[Nothing] :: Maybe a
[Just] :: a -> Maybe a
[False] :: Bool
[True] :: Bool
[Char] :: Char -> Lexeme
[String] :: String -> Lexeme
[Punc] :: String -> Lexeme
[Ident] :: String -> Lexeme
[Symbol] :: String -> Lexeme
[Number] :: Number -> Lexeme
[EOF] :: Lexeme
[LT] :: Ordering
[EQ] :: Ordering
[GT] :: Ordering
[Down] :: a -> Down a
[Refl] :: a :~: a
[Coercion] :: Coercion a b
[UppercaseLetter] :: GeneralCategory
[LowercaseLetter] :: GeneralCategory
[TitlecaseLetter] :: GeneralCategory
[ModifierLetter] :: GeneralCategory
[OtherLetter] :: GeneralCategory
[NonSpacingMark] :: GeneralCategory
[SpacingCombiningMark] :: GeneralCategory
[EnclosingMark] :: GeneralCategory
[DecimalNumber] :: GeneralCategory
[LetterNumber] :: GeneralCategory
[OtherNumber] :: GeneralCategory
[ConnectorPunctuation] :: GeneralCategory
[DashPunctuation] :: GeneralCategory
[OpenPunctuation] :: GeneralCategory
[ClosePunctuation] :: GeneralCategory
[InitialQuote] :: GeneralCategory
[FinalQuote] :: GeneralCategory
[OtherPunctuation] :: GeneralCategory
[MathSymbol] :: GeneralCategory
[CurrencySymbol] :: GeneralCategory
[ModifierSymbol] :: GeneralCategory
[OtherSymbol] :: GeneralCategory
[Space] :: GeneralCategory
[LineSeparator] :: GeneralCategory
[ParagraphSeparator] :: GeneralCategory
[Control] :: GeneralCategory
[Format] :: GeneralCategory
[Surrogate] :: GeneralCategory
[PrivateUse] :: GeneralCategory
[NotAssigned] :: GeneralCategory
[Proxy] :: Proxy t
[KProxy] :: KProxy
[Fingerprint] :: {-# UNPACK #-} !Word64 -> {-# UNPACK #-} !Word64 -> Fingerprint
[Proxy] :: Proxy t
[TypeRep] :: {-# UNPACK #-} !Fingerprint -> TyCon -> [KindRep] -> [TypeRep] -> TypeRep
[Fingerprint] :: {-# UNPACK #-} !Word64 -> {-# UNPACK #-} !Word64 -> Fingerprint
[TyCon] :: {-# UNPACK #-} !Fingerprint -> String -> String -> String -> TyCon
[tyConFingerprint] :: TyCon -> {-# UNPACK #-} !Fingerprint
[tyConPackage] :: TyCon -> String
[tyConModule] :: TyCon -> String
[tyConName] :: TyCon -> String
[Refl] :: a :~: a
[Proxy] :: Proxy t
[Left] :: a -> Either a b
[Right] :: b -> Either a b
[U1] :: U1 p
[Par1] :: p -> Par1 p
[unPar1] :: Par1 p -> p
[Rec1] :: f p -> Rec1 f p
[unRec1] :: Rec1 f p -> f p
[K1] :: c -> K1 i c p
[unK1] :: K1 i c p -> c
[M1] :: f p -> M1 i c f p
[unM1] :: M1 i c f p -> f p
[L1] :: (f p) -> (:+:) f g p
[R1] :: (g p) -> (:+:) f g p
[:*:] :: f p -> g p -> (:*:) f g p
[Comp1] :: f (g p) -> (:.:) f g p
[unComp1] :: (:.:) f g p -> f (g p)
[Prefix] :: Fixity
[Infix] :: Associativity -> Int -> Fixity
[LeftAssociative] :: Associativity
[RightAssociative] :: Associativity
[NotAssociative] :: Associativity
[NoArity] :: Arity
[Arity] :: Int -> Arity
[Dual] :: a -> Dual a
[getDual] :: Dual a -> a
[Endo] :: (a -> a) -> Endo a
[appEndo] :: Endo a -> a -> a
[All] :: Bool -> All
[getAll] :: All -> Bool
[Any] :: Bool -> Any
[getAny] :: Any -> Bool
[Sum] :: a -> Sum a
[getSum] :: Sum a -> a
[Product] :: a -> Product a
[getProduct] :: Product a -> a
[First] :: Maybe a -> First a
[getFirst] :: First a -> Maybe a
[Last] :: Maybe a -> Last a
[getLast] :: Last a -> Maybe a
[Alt] :: f a -> Alt f a
[getAlt] :: Alt f a -> f a
[Char] :: Char -> Lexeme
[String] :: String -> Lexeme
[Punc] :: String -> Lexeme
[Ident] :: String -> Lexeme
[Symbol] :: String -> Lexeme
[Number] :: Number -> Lexeme
[EOF] :: Lexeme
[CChar] :: Int8 -> CChar
[CSChar] :: Int8 -> CSChar
[CUChar] :: Word8 -> CUChar
[CShort] :: Int16 -> CShort
[CUShort] :: Word16 -> CUShort
[CInt] :: Int32 -> CInt
[CUInt] :: Word32 -> CUInt
[CLong] :: Int64 -> CLong
[CULong] :: Word64 -> CULong
[CPtrdiff] :: Int64 -> CPtrdiff
[CSize] :: Word64 -> CSize
[CWchar] :: Int32 -> CWchar
[CSigAtomic] :: Int32 -> CSigAtomic
[CLLong] :: Int64 -> CLLong
[CULLong] :: Word64 -> CULLong
[CIntPtr] :: Int64 -> CIntPtr
[CUIntPtr] :: Word64 -> CUIntPtr
[CIntMax] :: Int64 -> CIntMax
[CUIntMax] :: Word64 -> CUIntMax
[CClock] :: Int64 -> CClock
[CTime] :: Int64 -> CTime
[CUSeconds] :: Word32 -> CUSeconds
[CSUSeconds] :: Int64 -> CSUSeconds
[CFloat] :: Float -> CFloat
[CDouble] :: Double -> CDouble
[Buffer] :: !(RawBuffer e) -> BufferState -> !Int -> !Int -> !Int -> Buffer e
[bufRaw] :: Buffer e -> !(RawBuffer e)
[bufState] :: Buffer e -> BufferState
[bufSize] :: Buffer e -> !Int
[bufL] :: Buffer e -> !Int
[bufR] :: Buffer e -> !Int
[ReadBuffer] :: BufferState
[WriteBuffer] :: BufferState
[BufferCodec] :: CodeBuffer from to -> (Buffer from -> Buffer to -> IO (Buffer from, Buffer to)) -> IO () -> IO state -> (state -> IO ()) -> BufferCodec from to state
[encode] :: BufferCodec from to state -> CodeBuffer from to
[recover] :: BufferCodec from to state -> Buffer from -> Buffer to -> IO (Buffer from, Buffer to)
[close] :: BufferCodec from to state -> IO ()
[getState] :: BufferCodec from to state -> IO state
[setState] :: BufferCodec from to state -> state -> IO ()
[TextEncoding] :: String -> IO (TextDecoder dstate) -> IO (TextEncoder estate) -> TextEncoding
[textEncodingName] :: TextEncoding -> String
[mkTextDecoder] :: TextEncoding -> IO (TextDecoder dstate)
[mkTextEncoder] :: TextEncoding -> IO (TextEncoder estate)
[InputUnderflow] :: CodingProgress
[OutputUnderflow] :: CodingProgress
[InvalidSequence] :: CodingProgress
[Directory] :: IODeviceType
[Stream] :: IODeviceType
[RegularFile] :: IODeviceType
[RawDevice] :: IODeviceType
[AbsoluteSeek] :: SeekMode
[RelativeSeek] :: SeekMode
[SeekFromEnd] :: SeekMode
[Errno] :: CInt -> Errno
[CDev] :: Word64 -> CDev
[CIno] :: Word64 -> CIno
[CMode] :: Word32 -> CMode
[COff] :: Int64 -> COff
[CPid] :: Int32 -> CPid
[CSsize] :: Int64 -> CSsize
[CGid] :: Word32 -> CGid
[CNlink] :: Word64 -> CNlink
[CUid] :: Word32 -> CUid
[CCc] :: Word8 -> CCc
[CSpeed] :: Word32 -> CSpeed
[CTcflag] :: Word32 -> CTcflag
[CRLim] :: Word64 -> CRLim
[Fd] :: CInt -> Fd
[ErrorOnCodingFailure] :: CodingFailureMode
[IgnoreCodingFailure] :: CodingFailureMode
[TransliterateCodingFailure] :: CodingFailureMode
[RoundtripFailure] :: CodingFailureMode
[ThreadId] :: ThreadId# -> ThreadId
[ThreadRunning] :: ThreadStatus
[ThreadFinished] :: ThreadStatus
[ThreadBlocked] :: BlockReason -> ThreadStatus
[ThreadDied] :: ThreadStatus
[BlockedOnMVar] :: BlockReason
[BlockedOnBlackHole] :: BlockReason
[BlockedOnException] :: BlockReason
[BlockedOnSTM] :: BlockReason
[BlockedOnForeignCall] :: BlockReason
[BlockedOnOther] :: BlockReason
[STM] :: (State# RealWorld -> (# State# RealWorld, a #)) -> STM a
[TVar] :: (TVar# RealWorld a) -> TVar a
[SomeException] :: e -> SomeException
[Overflow] :: ArithException
[Underflow] :: ArithException
[LossOfPrecision] :: ArithException
[DivideByZero] :: ArithException
[Denormal] :: ArithException
[RatioZeroDenominator] :: ArithException
[IndexOutOfBounds] :: String -> ArrayException
[UndefinedElement] :: String -> ArrayException
[AssertionFailed] :: String -> AssertionFailed
[SomeAsyncException] :: e -> SomeAsyncException
[StackOverflow] :: AsyncException
[HeapOverflow] :: AsyncException
[ThreadKilled] :: AsyncException
[UserInterrupt] :: AsyncException
[NonTermination] :: NonTermination
[NestedAtomically] :: NestedAtomically
[BlockedIndefinitelyOnMVar] :: BlockedIndefinitelyOnMVar
[BlockedIndefinitelyOnSTM] :: BlockedIndefinitelyOnSTM
[AllocationLimitExceeded] :: AllocationLimitExceeded
[Deadlock] :: Deadlock
[NoMethodError] :: String -> NoMethodError
[PatternMatchFail] :: String -> PatternMatchFail
[RecConError] :: String -> RecConError
[RecSelError] :: String -> RecSelError
[RecUpdError] :: String -> RecUpdError
[ErrorCall] :: String -> ErrorCall
[Unmasked] :: MaskingState
[MaskedInterruptible] :: MaskingState
[MaskedUninterruptible] :: MaskingState
[SomeException] :: e -> SomeException
[Overflow] :: ArithException
[Underflow] :: ArithException
[LossOfPrecision] :: ArithException
[DivideByZero] :: ArithException
[Denormal] :: ArithException
[RatioZeroDenominator] :: ArithException
[IndexOutOfBounds] :: String -> ArrayException
[UndefinedElement] :: String -> ArrayException
[AssertionFailed] :: String -> AssertionFailed
[SomeAsyncException] :: e -> SomeAsyncException
[StackOverflow] :: AsyncException
[HeapOverflow] :: AsyncException
[ThreadKilled] :: AsyncException
[UserInterrupt] :: AsyncException
[NonTermination] :: NonTermination
[NestedAtomically] :: NestedAtomically
[BlockedIndefinitelyOnMVar] :: BlockedIndefinitelyOnMVar
[BlockedIndefinitelyOnSTM] :: BlockedIndefinitelyOnSTM
[AllocationLimitExceeded] :: AllocationLimitExceeded
[Deadlock] :: Deadlock
[NoMethodError] :: String -> NoMethodError
[PatternMatchFail] :: String -> PatternMatchFail
[RecConError] :: String -> RecConError
[RecSelError] :: String -> RecSelError
[RecUpdError] :: String -> RecUpdError
[ErrorCall] :: String -> ErrorCall
[Handler] :: (e -> IO a) -> Handler a
[Unmasked] :: MaskingState
[MaskedInterruptible] :: MaskingState
[MaskedUninterruptible] :: MaskingState
[BufferCodec] :: CodeBuffer from to -> (Buffer from -> Buffer to -> IO (Buffer from, Buffer to)) -> IO () -> IO state -> (state -> IO ()) -> BufferCodec from to state
[encode] :: BufferCodec from to state -> CodeBuffer from to
[recover] :: BufferCodec from to state -> Buffer from -> Buffer to -> IO (Buffer from, Buffer to)
[close] :: BufferCodec from to state -> IO ()
[getState] :: BufferCodec from to state -> IO state
[setState] :: BufferCodec from to state -> state -> IO ()
[TextEncoding] :: String -> IO (TextDecoder dstate) -> IO (TextEncoder estate) -> TextEncoding
[textEncodingName] :: TextEncoding -> String
[mkTextDecoder] :: TextEncoding -> IO (TextDecoder dstate)
[mkTextEncoder] :: TextEncoding -> IO (TextEncoder estate)
[InputUnderflow] :: CodingProgress
[OutputUnderflow] :: CodingProgress
[InvalidSequence] :: CodingProgress
[ThreadId] :: ThreadId# -> ThreadId
[ThreadRunning] :: ThreadStatus
[ThreadFinished] :: ThreadStatus
[ThreadBlocked] :: BlockReason -> ThreadStatus
[ThreadDied] :: ThreadStatus
[BlockedOnMVar] :: BlockReason
[BlockedOnBlackHole] :: BlockReason
[BlockedOnException] :: BlockReason
[BlockedOnSTM] :: BlockReason
[BlockedOnForeignCall] :: BlockReason
[BlockedOnOther] :: BlockReason
[STM] :: (State# RealWorld -> (# State# RealWorld, a #)) -> STM a
[TVar] :: (TVar# RealWorld a) -> TVar a
[NoBuffering] :: BufferMode
[LineBuffering] :: BufferMode
[BlockBuffering] :: (Maybe Int) -> BufferMode
[HandlePosn] :: Handle -> HandlePosition -> HandlePosn
[AbsoluteSeek] :: SeekMode
[RelativeSeek] :: SeekMode
[SeekFromEnd] :: SeekMode
[LF] :: Newline
[CRLF] :: Newline
[NewlineMode] :: Newline -> Newline -> NewlineMode
[inputNL] :: NewlineMode -> Newline
[outputNL] :: NewlineMode -> Newline
[ReadMode] :: IOMode
[WriteMode] :: IOMode
[AppendMode] :: IOMode
[ReadWriteMode] :: IOMode
[NoBuffering] :: BufferMode
[LineBuffering] :: BufferMode
[BlockBuffering] :: (Maybe Int) -> BufferMode
[AbsoluteSeek] :: SeekMode
[RelativeSeek] :: SeekMode
[SeekFromEnd] :: SeekMode
[LF] :: Newline
[CRLF] :: Newline
[NewlineMode] :: Newline -> Newline -> NewlineMode
[inputNL] :: NewlineMode -> Newline
[outputNL] :: NewlineMode -> Newline
[Kleisli] :: (a -> m b) -> Kleisli m a b
[runKleisli] :: Kleisli m a b -> a -> m b
[ArrowMonad] :: (a () b) -> ArrowMonad a b
[Const] :: a -> Const a b
[getConst] :: Const a b -> a
[WrapMonad] :: m a -> WrappedMonad m a
[unwrapMonad] :: WrappedMonad m a -> m a
[WrapArrow] :: a b c -> WrappedArrow a b c
[unwrapArrow] :: WrappedArrow a b c -> a b c
[ZipList] :: [a] -> ZipList a
[getZipList] :: ZipList a -> [a]
[GCStats] :: !Int64 -> !Int64 -> !Int64 -> !Int64 -> !Int64 -> !Int64 -> !Int64 -> !Int64 -> !Int64 -> !Int64 -> !Double -> !Double -> !Double -> !Double -> !Double -> !Double -> !Int64 -> !Int64 -> GCStats
[bytesAllocated] :: GCStats -> !Int64
[numGcs] :: GCStats -> !Int64
[maxBytesUsed] :: GCStats -> !Int64
[numByteUsageSamples] :: GCStats -> !Int64
[cumulativeBytesUsed] :: GCStats -> !Int64
[bytesCopied] :: GCStats -> !Int64
[currentBytesUsed] :: GCStats -> !Int64
[currentBytesSlop] :: GCStats -> !Int64
[maxBytesSlop] :: GCStats -> !Int64
[peakMegabytesAllocated] :: GCStats -> !Int64
[mutatorCpuSeconds] :: GCStats -> !Double
[mutatorWallSeconds] :: GCStats -> !Double
[gcCpuSeconds] :: GCStats -> !Double
[gcWallSeconds] :: GCStats -> !Double
[cpuSeconds] :: GCStats -> !Double
[wallSeconds] :: GCStats -> !Double
[parTotBytesCopied] :: GCStats -> !Int64
[parMaxBytesCopied] :: GCStats -> !Int64
[Version] :: [Int] -> [String] -> Version
[versionBranch] :: Version -> [Int]
[versionTags] :: Version -> [String]
[AlgRep] :: [Constr] -> DataRep
[IntRep] :: DataRep
[FloatRep] :: DataRep
[CharRep] :: DataRep
[NoRep] :: DataRep
[Prefix] :: Fixity
[Infix] :: Fixity
[AlgConstr] :: ConIndex -> ConstrRep
[IntConstr] :: Integer -> ConstrRep
[FloatConstr] :: Rational -> ConstrRep
[CharConstr] :: Char -> ConstrRep
[NatS#] :: GmpLimb# -> Natural
[NatJ#] :: {-# UNPACK #-} !BigNat -> Natural
[I#] :: Int# -> Int
[W#] :: Word# -> Word
[F#] :: Float# -> Float
[D#] :: Double# -> Double
[C#] :: Char# -> Char
[Ptr] :: Addr# -> Ptr a
[FunPtr] :: Addr# -> FunPtr a
[Down] :: a -> Down a
[NoSpecConstr] :: SpecConstrAnnotation
[ForceSpecConstr] :: SpecConstrAnnotation
[RTSFlags] :: GCFlags -> ConcFlags -> MiscFlags -> DebugFlags -> CCFlags -> ProfFlags -> TraceFlags -> TickyFlags -> RTSFlags
[gcFlags] :: RTSFlags -> GCFlags
[concurrentFlags] :: RTSFlags -> ConcFlags
[miscFlags] :: RTSFlags -> MiscFlags
[debugFlags] :: RTSFlags -> DebugFlags
[costCentreFlags] :: RTSFlags -> CCFlags
[profilingFlags] :: RTSFlags -> ProfFlags
[traceFlags] :: RTSFlags -> TraceFlags
[tickyFlags] :: RTSFlags -> TickyFlags
[GCFlags] :: Maybe FilePath -> GiveGCStats -> Nat -> Nat -> Nat -> Nat -> Nat -> Nat -> Nat -> Nat -> Bool -> Double -> Double -> Nat -> Nat -> Bool -> Bool -> Double -> Bool -> Bool -> Bool -> Time -> Bool -> Word -> Word -> GCFlags
[statsFile] :: GCFlags -> Maybe FilePath
[giveStats] :: GCFlags -> GiveGCStats
[maxStkSize] :: GCFlags -> Nat
[initialStkSize] :: GCFlags -> Nat
[stkChunkSize] :: GCFlags -> Nat
[stkChunkBufferSize] :: GCFlags -> Nat
[maxHeapSize] :: GCFlags -> Nat
[minAllocAreaSize] :: GCFlags -> Nat
[minOldGenSize] :: GCFlags -> Nat
[heapSizeSuggestion] :: GCFlags -> Nat
[heapSizeSuggestionAuto] :: GCFlags -> Bool
[oldGenFactor] :: GCFlags -> Double
[pcFreeHeap] :: GCFlags -> Double
[generations] :: GCFlags -> Nat
[steps] :: GCFlags -> Nat
[squeezeUpdFrames] :: GCFlags -> Bool
[compact] :: GCFlags -> Bool
[compactThreshold] :: GCFlags -> Double
[sweep] :: GCFlags -> Bool
[ringBell] :: GCFlags -> Bool
[frontpanel] :: GCFlags -> Bool
[idleGCDelayTime] :: GCFlags -> Time
[doIdleGC] :: GCFlags -> Bool
[heapBase] :: GCFlags -> Word
[allocLimitGrace] :: GCFlags -> Word
[ConcFlags] :: Time -> Int -> ConcFlags
[ctxtSwitchTime] :: ConcFlags -> Time
[ctxtSwitchTicks] :: ConcFlags -> Int
[MiscFlags] :: Time -> Bool -> Bool -> Word -> MiscFlags
[tickInterval] :: MiscFlags -> Time
[installSignalHandlers] :: MiscFlags -> Bool
[machineReadable] :: MiscFlags -> Bool
[linkerMemBase] :: MiscFlags -> Word
[DebugFlags] :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> DebugFlags
[scheduler] :: DebugFlags -> Bool
[interpreter] :: DebugFlags -> Bool
[weak] :: DebugFlags -> Bool
[gccafs] :: DebugFlags -> Bool
[gc] :: DebugFlags -> Bool
[block_alloc] :: DebugFlags -> Bool
[sanity] :: DebugFlags -> Bool
[stable] :: DebugFlags -> Bool
[prof] :: DebugFlags -> Bool
[linker] :: DebugFlags -> Bool
[apply] :: DebugFlags -> Bool
[stm] :: DebugFlags -> Bool
[squeeze] :: DebugFlags -> Bool
[hpc] :: DebugFlags -> Bool
[sparks] :: DebugFlags -> Bool
[CCFlags] :: DoCostCentres -> Int -> Int -> CCFlags
[doCostCentres] :: CCFlags -> DoCostCentres
[profilerTicks] :: CCFlags -> Int
[msecsPerTick] :: CCFlags -> Int
[ProfFlags] :: DoHeapProfile -> Time -> Word -> Bool -> Bool -> Word -> Word -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> ProfFlags
[doHeapProfile] :: ProfFlags -> DoHeapProfile
[heapProfileInterval] :: ProfFlags -> Time
[heapProfileIntervalTicks] :: ProfFlags -> Word
[includeTSOs] :: ProfFlags -> Bool
[showCCSOnException] :: ProfFlags -> Bool
[maxRetainerSetSize] :: ProfFlags -> Word
[ccsLength] :: ProfFlags -> Word
[modSelector] :: ProfFlags -> Maybe String
[descrSelector] :: ProfFlags -> Maybe String
[typeSelector] :: ProfFlags -> Maybe String
[ccSelector] :: ProfFlags -> Maybe String
[ccsSelector] :: ProfFlags -> Maybe String
[retainerSelector] :: ProfFlags -> Maybe String
[bioSelector] :: ProfFlags -> Maybe String
[TraceFlags] :: DoTrace -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> TraceFlags
[tracing] :: TraceFlags -> DoTrace
[timestamp] :: TraceFlags -> Bool
[traceScheduler] :: TraceFlags -> Bool
[traceGc] :: TraceFlags -> Bool
[sparksSampled] :: TraceFlags -> Bool
[sparksFull] :: TraceFlags -> Bool
[user] :: TraceFlags -> Bool
[TickyFlags] :: Bool -> Maybe FilePath -> TickyFlags
[showTickyStats] :: TickyFlags -> Bool
[tickyFile] :: TickyFlags -> Maybe FilePath
[Fingerprint] :: {-# UNPACK #-} !Word64 -> {-# UNPACK #-} !Word64 -> Fingerprint
[SomeNat] :: (Proxy n) -> SomeNat
[SomeSymbol] :: (Proxy n) -> SomeSymbol
[False] :: Bool
[True] :: Bool
[Nothing] :: Maybe a
[Just] :: a -> Maybe a
[Left] :: a -> Either a b
[Right] :: b -> Either a b
[LT] :: Ordering
[EQ] :: Ordering
[GT] :: Ordering
[StaticPtrInfo] :: String -> String -> String -> (Int, Int) -> StaticPtrInfo
[spInfoPackageKey] :: StaticPtrInfo -> String
[spInfoModuleName] :: StaticPtrInfo -> String
[spInfoName] :: StaticPtrInfo -> String
[spInfoSrcLoc] :: StaticPtrInfo -> (Int, Int)
[:+] :: !a -> !a -> Complex a
[MkFixed] :: Integer -> Fixed a
[Identity] :: a -> Identity a
[runIdentity] :: Identity a -> a
[RequireOrder] :: ArgOrder a
[Permute] :: ArgOrder a
[ReturnInOrder] :: (String -> a) -> ArgOrder a
[Option] :: [Char] -> [String] -> (ArgDescr a) -> String -> OptDescr a
[NoArg] :: a -> ArgDescr a
[ReqArg] :: (String -> a) -> String -> ArgDescr a
[OptArg] :: (Maybe String -> a) -> String -> ArgDescr a
[ExitSuccess] :: ExitCode
[ExitFailure] :: Int -> ExitCode
[FieldFormat] :: Maybe Int -> Maybe Int -> Maybe FormatAdjustment -> Maybe FormatSign -> Bool -> String -> Char -> FieldFormat
[fmtWidth] :: FieldFormat -> Maybe Int
[fmtPrecision] :: FieldFormat -> Maybe Int
[fmtAdjust] :: FieldFormat -> Maybe FormatAdjustment
[fmtSign] :: FieldFormat -> Maybe FormatSign
[fmtAlternate] :: FieldFormat -> Bool
[fmtModifiers] :: FieldFormat -> String
[fmtChar] :: FieldFormat -> Char
[LeftAdjust] :: FormatAdjustment
[ZeroPad] :: FormatAdjustment
[SignPlus] :: FormatSign
[SignSpace] :: FormatSign
[FormatParse] :: String -> Char -> String -> FormatParse
[fpModifiers] :: FormatParse -> String
[fpChar] :: FormatParse -> Char
[fpRest] :: FormatParse -> String
[Done] :: Next
[More] :: !Int -> BufferWriter -> Next
[Chunk] :: !ByteString -> BufferWriter -> Next
[C] :: Text -> Element
[D] :: Decl -> Element
[O] :: Element
[I] :: Int -> Element
[L] :: Int -> Element
[Sym] :: Int -> Element
[Clk] :: (Maybe Int) -> Element
[Rst] :: (Maybe Int) -> Element
[Typ] :: (Maybe Int) -> Element
[TypM] :: (Maybe Int) -> Element
[Err] :: (Maybe Int) -> Element
[TypElem] :: Element -> Element
[CompName] :: Element
[Size] :: Element -> Element
[Length] :: Element -> Element
[FilePath] :: Element -> Element
[Gen] :: Bool -> Element
[SigD] :: [Element] -> (Maybe Int) -> Element
[Decl] :: Int -> [(BlackBoxTemplate, BlackBoxTemplate)] -> Decl
[BlackBox] :: Text -> Either Text Text -> Primitive
[name] :: Primitive -> Text
[template] :: Primitive -> Either Text Text
[Primitive] :: Text -> Text -> Primitive
[name] :: Primitive -> Text
[primType] :: Primitive -> Text
[TyVar] :: Name a -> Embed Kind -> Var a
[varName] :: Var a -> Name a
[varKind] :: Var a -> Embed Kind
[Id] :: Name a -> Embed Type -> Var a
[varName] :: Var a -> Name a
[varType] :: Var a -> Embed Type
[MkData] :: DcName -> ConTag -> Type -> [TyName] -> [TyName] -> [Type] -> DataCon
[dcName] :: DataCon -> DcName
[dcTag] :: DataCon -> ConTag
[dcType] :: DataCon -> Type
[dcUnivTyVars] :: DataCon -> [TyName]
[dcExtTyVars] :: DataCon -> [TyName]
[dcArgTys] :: DataCon -> [Type]
[AlgTyCon] :: TyConName -> Kind -> Int -> AlgTyConRhs -> TyCon
[tyConName] :: TyCon -> TyConName
[tyConKind] :: TyCon -> Kind
[tyConArity] :: TyCon -> Int
[algTcRhs] :: TyCon -> AlgTyConRhs
[FunTyCon] :: TyConName -> Kind -> Int -> [([Type], Type)] -> TyCon
[tyConName] :: TyCon -> TyConName
[tyConKind] :: TyCon -> Kind
[tyConArity] :: TyCon -> Int
[tyConSubst] :: TyCon -> [([Type], Type)]
[PrimTyCon] :: TyConName -> Kind -> Int -> TyCon
[tyConName] :: TyCon -> TyConName
[tyConKind] :: TyCon -> Kind
[tyConArity] :: TyCon -> Int
[SuperKindTyCon] :: TyConName -> TyCon
[tyConName] :: TyCon -> TyConName
[DataTyCon] :: [DataCon] -> AlgTyConRhs
[dataCons] :: AlgTyConRhs -> [DataCon]
[NewTyCon] :: DataCon -> ([TyName], Type) -> AlgTyConRhs
[dataCon] :: AlgTyConRhs -> DataCon
[ntEtadRhs] :: AlgTyConRhs -> ([TyName], Type)
[IntegerLiteral] :: Integer -> Literal
[StringLiteral] :: String -> Literal
[RationalLiteral] :: Rational -> Literal
[Var] :: Type -> TmName -> Term
[Data] :: DataCon -> Term
[Literal] :: Literal -> Term
[Prim] :: Text -> Type -> Term
[Lam] :: (Bind Id Term) -> Term
[TyLam] :: (Bind TyVar Term) -> Term
[App] :: Term -> Term -> Term
[TyApp] :: Term -> Type -> Term
[Letrec] :: (Bind (Rec [LetBinding]) Term) -> Term
[Case] :: Term -> Type -> [Bind Pat Term] -> Term
[DataPat] :: (Embed DataCon) -> (Rebind [TyVar] [Id]) -> Pat
[LitPat] :: (Embed Literal) -> Pat
[DefaultPat] :: Pat
[VarTy] :: Kind -> TyName -> Type
[ConstTy] :: ConstTy -> Type
[ForAllTy] :: (Bind TyVar Type) -> Type
[AppTy] :: Type -> Type -> Type
[LitTy] :: LitTy -> Type
[FunTy] :: Type -> Type -> TypeView
[TyConApp] :: TyConName -> [Type] -> TypeView
[OtherType] :: Type -> TypeView
[TyCon] :: TyConName -> ConstTy
[Arrow] :: ConstTy
[NumTy] :: Int -> LitTy
[SymTy] :: String -> LitTy
[NetlistMonad] :: WriterT (Set (Identifier, HWType)) (StateT NetlistState (FreshMT IO)) a -> NetlistMonad a
[runNetlist] :: NetlistMonad a -> WriterT (Set (Identifier, HWType)) (StateT NetlistState (FreshMT IO)) a
[NetlistState] :: HashMap TmName (Type, Term) -> Gamma -> Int -> Int -> HashMap TmName Component -> PrimMap -> (HashMap TyConName TyCon -> Type -> Maybe (Either String HWType)) -> HashMap TyConName TyCon -> String -> Identifier -> [(String, FilePath)] -> NetlistState
[_bindings] :: NetlistState -> HashMap TmName (Type, Term)
[_varEnv] :: NetlistState -> Gamma
[_varCount] :: NetlistState -> Int
[_cmpCount] :: NetlistState -> Int
[_components] :: NetlistState -> HashMap TmName Component
[_primitives] :: NetlistState -> PrimMap
[_typeTranslator] :: NetlistState -> HashMap TyConName TyCon -> Type -> Maybe (Either String HWType)
[_tcCache] :: NetlistState -> HashMap TyConName TyCon
[_modNm] :: NetlistState -> String
[_curCompNm] :: NetlistState -> Identifier
[_dataFiles] :: NetlistState -> [(String, FilePath)]
[Component] :: Identifier -> [(Identifier, HWType)] -> [(Identifier, HWType)] -> [(Identifier, HWType)] -> [Declaration] -> Component
[componentName] :: Component -> Identifier
[hiddenPorts] :: Component -> [(Identifier, HWType)]
[inputs] :: Component -> [(Identifier, HWType)]
[outputs] :: Component -> [(Identifier, HWType)]
[declarations] :: Component -> [Declaration]
[Void] :: HWType
[Bool] :: HWType
[Integer] :: HWType
[BitVector] :: Size -> HWType
[Index] :: Size -> HWType
[Signed] :: Size -> HWType
[Unsigned] :: Size -> HWType
[Vector] :: Size -> HWType -> HWType
[Sum] :: Identifier -> [Identifier] -> HWType
[Product] :: Identifier -> [HWType] -> HWType
[SP] :: Identifier -> [(Identifier, [HWType])] -> HWType
[Clock] :: Identifier -> Int -> HWType
[Reset] :: Identifier -> Int -> HWType
[Assignment] :: Identifier -> Expr -> Declaration
[CondAssignment] :: Identifier -> HWType -> Expr -> [(Maybe Expr, Expr)] -> Declaration
[InstDecl] :: Identifier -> Identifier -> [(Identifier, Expr)] -> Declaration
[BlackBoxD] :: Text -> BlackBoxTemplate -> BlackBoxContext -> Declaration
[NetDecl] :: Identifier -> HWType -> Declaration
[Indexed] :: (HWType, Int, Int) -> Modifier
[DC] :: (HWType, Int) -> Modifier
[VecAppend] :: Modifier
[Literal] :: (Maybe (HWType, Size)) -> Literal -> Expr
[DataCon] :: HWType -> Modifier -> [Expr] -> Expr
[Identifier] :: Identifier -> (Maybe Modifier) -> Expr
[DataTag] :: HWType -> (Either Identifier Identifier) -> Expr
[BlackBoxE] :: Text -> BlackBoxTemplate -> BlackBoxContext -> Bool -> Expr
[NumLit] :: Integer -> Literal
[BitLit] :: Bit -> Literal
[BoolLit] :: Bool -> Literal
[VecLit] :: [Literal] -> Literal
[StringLit] :: String -> Literal
[H] :: Bit
[L] :: Bit
[U] :: Bit
[Z] :: Bit
[Context] :: (SyncExpr, HWType) -> [(SyncExpr, HWType, Bool)] -> IntMap (Either BlackBoxTemplate Declaration, BlackBoxContext) -> BlackBoxContext
[bbResult] :: BlackBoxContext -> (SyncExpr, HWType)
[bbInputs] :: BlackBoxContext -> [(SyncExpr, HWType, Bool)]
[bbFunctions] :: BlackBoxContext -> IntMap (Either BlackBoxTemplate Declaration, BlackBoxContext)
[AppFun] :: CoreContext
[AppArg] :: CoreContext
[TyAppC] :: CoreContext
[LetBinding] :: [Id] -> CoreContext
[LetBody] :: [Id] -> CoreContext
[LamBody] :: Id -> CoreContext
[TyLamBody] :: TyVar -> CoreContext
[CaseAlt] :: [Id] -> CoreContext
[CaseScrut] :: CoreContext
[RewriteState] :: Int -> HashMap TmName (Type, Term) -> Supply -> (HashMap TyConName TyCon -> Type -> Maybe (Either String HWType)) -> HashMap TyConName TyCon -> (HashMap TyConName TyCon -> Term -> Term) -> RewriteState
[_transformCounter] :: RewriteState -> Int
[_bindings] :: RewriteState -> HashMap TmName (Type, Term)
[_uniqSupply] :: RewriteState -> Supply
[_typeTranslator] :: RewriteState -> HashMap TyConName TyCon -> Type -> Maybe (Either String HWType)
[_tcCache] :: RewriteState -> HashMap TyConName TyCon
[_evaluator] :: RewriteState -> HashMap TyConName TyCon -> Term -> Term
[DebugNone] :: DebugLevel
[DebugFinal] :: DebugLevel
[DebugName] :: DebugLevel
[DebugApplied] :: DebugLevel
[DebugAll] :: DebugLevel
[RE] :: DebugLevel -> RewriteEnv
[_dbgLevel] :: RewriteEnv -> DebugLevel
[R] :: RewriteMonad m a -> R m a
[runR] :: R m a -> RewriteMonad m a
[CLaSHOpts] :: Int -> Int -> Int -> DebugLevel -> CLaSHOpts
[opt_inlineLimit] :: CLaSHOpts -> Int
[opt_specLimit] :: CLaSHOpts -> Int
[opt_inlineBelow] :: CLaSHOpts -> Int
[opt_dbgLevel] :: CLaSHOpts -> DebugLevel
[NormalizeState] :: HashMap TmName (Type, Term) -> Map (TmName, Int, Either Term Type) (TmName, Type) -> HashMap TmName Int -> Int -> HashMap TmName (HashMap TmName Int) -> Int -> Int -> TmName -> NormalizeState
[_normalized] :: NormalizeState -> HashMap TmName (Type, Term)
[_specialisationCache] :: NormalizeState -> Map (TmName, Int, Either Term Type) (TmName, Type)
[_specialisationHistory] :: NormalizeState -> HashMap TmName Int
[_specialisationLimit] :: NormalizeState -> Int
[_inlineHistory] :: NormalizeState -> HashMap TmName (HashMap TmName Int)
[_inlineLimit] :: NormalizeState -> Int
[_inlineBelow] :: NormalizeState -> Int
[_curFun] :: NormalizeState -> TmName
[CLeaf] :: (TmName, (Type, Term)) -> CallTree
[CBranch] :: (TmName, (Type, Term)) -> [CallTree] -> CallTree
[I] :: Integer -> Index
[unsafeToInteger] :: Index -> Integer
[SSymbol] :: (Proxy s) -> SSymbol
[SNat] :: (Proxy n) -> SNat
[UZero] :: UNat 0
[USucc] :: UNat n -> UNat (n + 1)
[SatWrap] :: SaturationMode
[SatBound] :: SaturationMode
[SatZero] :: SaturationMode
[SatSymmetric] :: SaturationMode
[Clk] :: Symbol -> Nat -> Clock
[SClock] :: SSymbol name -> SNat period -> SClock (Clk name period)
[:-] :: a -> Signal' clk a -> Signal' a
[BV] :: Integer -> BitVector
[unsafeToInteger] :: BitVector -> Integer
[Nil] :: Vec 0 a
[:>] :: a -> Vec n a -> Vec (n + 1) a
[S] :: Integer -> Signed
[unsafeToInteger] :: Signed -> Integer
[U] :: Integer -> Unsigned
[unsafeToInteger] :: Unsigned -> Integer
[Fixed] :: rep (int + frac) -> Fixed
[unFixed] :: Fixed -> rep (int + frac)
[Clk] :: Symbol -> Nat -> Clock
[SClock] :: SSymbol name -> SNat period -> SClock (Clk name period)
[TopEntity] :: String -> [String] -> [String] -> [(String, Int)] -> [(String, Int)] -> [ClockSource] -> TopEntity
[t_name] :: TopEntity -> String
[t_inputs] :: TopEntity -> [String]
[t_outputs] :: TopEntity -> [String]
[t_extraIn] :: TopEntity -> [(String, Int)]
[t_extraOut] :: TopEntity -> [(String, Int)]
[t_clocks] :: TopEntity -> [ClockSource]
[ClockSource] :: String -> Maybe (String, String) -> [(String, String)] -> Maybe (String, String) -> String -> Bool -> ClockSource
[c_name] :: ClockSource -> String
[c_inp] :: ClockSource -> Maybe (String, String)
[c_outp] :: ClockSource -> [(String, String)]
[c_reset] :: ClockSource -> Maybe (String, String)
[c_lock] :: ClockSource -> String
[c_sync] :: ClockSource -> Bool
[Emit] :: s -> o -> Step s o r
[Skip] :: s -> Step s o r
[Stop] :: r -> Step s o r
[Stream] :: (s -> m (Step s o r)) -> (m s) -> Stream m o r
[GBStart] :: s -> GroupByState a b s
[GBLoop] :: ([a] -> [a]) -> a -> b -> s -> GroupByState a b s
[GBDone] :: GroupByState a b s
[HaveOutput] :: (Pipe l i o u m r) -> (m ()) -> o -> Pipe l i o u m r
[NeedInput] :: (i -> Pipe l i o u m r) -> (u -> Pipe l i o u m r) -> Pipe l i o u m r
[Done] :: r -> Pipe l i o u m r
[PipeM] :: (m (Pipe l i o u m r)) -> Pipe l i o u m r
[Leftover] :: (Pipe l i o u m r) -> l -> Pipe l i o u m r
[ConduitM] :: (forall b. (r -> Pipe i i o () m b) -> Pipe i i o () m b) -> ConduitM i o m r
[unConduitM] :: ConduitM i o m r -> forall b. (r -> Pipe i i o () m b) -> Pipe i i o () m b
[ResumableSource] :: (Pipe () () o () m ()) -> (m ()) -> ResumableSource m o
[ResumableConduit] :: (Pipe i i o () m ()) -> (m ()) -> ResumableConduit i m o
[Chunk] :: a -> Flush a
[Flush] :: Flush a
[ZipSource] :: Source m o -> ZipSource m o
[getZipSource] :: ZipSource m o -> Source m o
[ZipSink] :: Sink i m r -> ZipSink i m r
[getZipSink] :: ZipSink i m r -> Sink i m r
[ZipConduit] :: ConduitM i o m r -> ZipConduit i o m r
[getZipConduit] :: ZipConduit i o m r -> ConduitM i o m r
[Chunk] :: a -> Flush a
[Flush] :: Flush a
[ZipSource] :: Source m o -> ZipSource m o
[getZipSource] :: ZipSource m o -> Source m o
[ZipSink] :: Sink i m r -> ZipSink i m r
[getZipSink] :: ZipSink i m r -> Sink i m r
[ZipConduit] :: ConduitM i o m r -> ZipConduit i o m r
[getZipConduit] :: ZipConduit i o m r -> ConduitM i o m r
[Section] :: Text -> Value -> Section
[sectionName] :: Section -> Text
[sectionValue] :: Section -> Value
[Sections] :: [Section] -> Value
[Number] :: Int -> Integer -> Value
[Text] :: Text -> Value
[Atom] :: Atom -> Value
[List] :: [Value] -> Value
[MkAtom] :: Text -> Atom
[atomName] :: Atom -> Text
[Job] :: (s -> IO s) -> (s -> IO ()) -> (s -> SomeException -> IO s) -> StateT s IO () -> Int -> Job s
[onStartup] :: Job s -> s -> IO s
[onShutdown] :: Job s -> s -> IO ()
[onException] :: Job s -> s -> SomeException -> IO s
[task] :: Job s -> StateT s IO ()
[sleepTime] :: Job s -> Int
[CreaturDaemon] :: CreateDaemon p -> Job s -> CreaturDaemon p s
[daemon] :: CreaturDaemon p s -> CreateDaemon p
[job] :: CreaturDaemon p s -> Job s
[CachedFSDatabase] :: FSDatabase r -> [r] -> Int -> CachedFSDatabase r
[database] :: CachedFSDatabase r -> FSDatabase r
[cache] :: CachedFSDatabase r -> [r]
[maxCacheSize] :: CachedFSDatabase r -> Int
[Zero] :: SatBit
[One] :: SatBit
[DontCare] :: SatBit
[MtrNode] :: (Ptr CMtrNode) -> MtrNode s
[Mtrdefault] :: MTRType
[Mtrterminal] :: MTRType
[Mtrsoft] :: MTRType
[Mtrfixed] :: MTRType
[Mtrnewnode] :: MTRType
[DDManager] :: Ptr CDDManager -> DDManager s u
[unDDManager] :: DDManager s u -> Ptr CDDManager
[DDNode] :: Ptr CDDNode -> DDNode s u
[unDDNode] :: DDNode s u -> Ptr CDDNode
[DDGen] :: (Ptr CDDGen) -> DDGen s u t
[CuddPreGcHook] :: CuddHookType
[CuddPostGcHook] :: CuddHookType
[CuddPreReorderingHook] :: CuddHookType
[CuddPostReorderingHook] :: CuddHookType
[CuddReorderSame] :: CuddReorderingType
[CuddReorderNone] :: CuddReorderingType
[CuddReorderRandom] :: CuddReorderingType
[CuddReorderRandomPivot] :: CuddReorderingType
[CuddReorderSift] :: CuddReorderingType
[CuddReorderSiftConverge] :: CuddReorderingType
[CuddReorderSymmSift] :: CuddReorderingType
[CuddReorderSymmSiftConv] :: CuddReorderingType
[CuddReorderWindow2] :: CuddReorderingType
[CuddReorderWindow3] :: CuddReorderingType
[CuddReorderWindow4] :: CuddReorderingType
[CuddReorderWindow2Conv] :: CuddReorderingType
[CuddReorderWindow3Conv] :: CuddReorderingType
[CuddReorderWindow4Conv] :: CuddReorderingType
[CuddReorderGroupSift] :: CuddReorderingType
[CuddReorderGroupSiftConv] :: CuddReorderingType
[CuddReorderAnnealing] :: CuddReorderingType
[CuddReorderGenetic] :: CuddReorderingType
[CuddReorderLinear] :: CuddReorderingType
[CuddReorderLinearConverge] :: CuddReorderingType
[CuddReorderLazySift] :: CuddReorderingType
[CuddReorderExact] :: CuddReorderingType
[DDManager] :: (Ptr CDDManager) -> DDManager
[DDNode] :: ForeignPtr CDDNode -> DDNode
[unDDNode] :: DDNode -> ForeignPtr CDDNode
[Zero] :: SatBit
[One] :: SatBit
[DontCare] :: SatBit
[DddmpVarids] :: DddmpVarInfoType
[DddmpVarpermids] :: DddmpVarInfoType
[DddmpVarauxids] :: DddmpVarInfoType
[DddmpVarnames] :: DddmpVarInfoType
[DddmpVardefault] :: DddmpVarInfoType
[DddmpModeText] :: DddmpMode
[DddmpModeBinary] :: DddmpMode
[DddmpModeDefault] :: DddmpMode
[DddmpVarMatchids] :: DddmpVarMatchType
[DddmpVarMatchpermids] :: DddmpVarMatchType
[DddmpVarMatchauxids] :: DddmpVarMatchType
[DddmpVarMatchnames] :: DddmpVarMatchType
[DddmpVarComposeids] :: DddmpVarMatchType
[Cell] :: a -> CellDelimiter -> Cell a
[EOP] :: CellDelimiter
[EOC] :: CellDelimiter
[EOR] :: CellDelimiter
[EOT] :: CellDelimiter
[Terminal] :: !(t -> Bool) -> !(Prod r e t (t -> b)) -> Prod r e t b
[NonTerminal] :: !(r e t a) -> !(Prod r e t (a -> b)) -> Prod r e t b
[Pure] :: a -> Prod r e t a
[Alts] :: ![Prod r e t a] -> !(Prod r e t (a -> b)) -> Prod r e t b
[Many] :: !(Prod r e t a) -> !(Prod r e t ([a] -> b)) -> Prod r e t b
[Named] :: !(Prod r e t a) -> e -> Prod r e t a
[RuleBind] :: Prod r e t a -> (Prod r e t a -> Grammar r e b) -> Grammar r e b
[FixBind] :: (a -> Grammar r e a) -> (a -> Grammar r e b) -> Grammar r e b
[Return] :: a -> Grammar r e a
[Rule] :: ProdR s r e t a -> !(STRef s (Maybe [a])) -> !(STRef s (STRef s [Cont s r e t a r])) -> Rule s r e t a
[ruleProd] :: Rule s r e t a -> ProdR s r e t a
[ruleNullable] :: Rule s r e t a -> !(STRef s (Maybe [a]))
[ruleConts] :: Rule s r e t a -> !(STRef s (STRef s [Cont s r e t a r]))
[State] :: !Pos -> !(ProdR s r e t f) -> !(Args s f b) -> !(Conts s r e t b a) -> State s r e t a
[Final] :: f -> Args s f a -> State s r e t a
[Cont] :: !Pos -> !(Args s a b) -> !(ProdR s r e t (b -> c)) -> !(Args s c d) -> !(Conts s r e t d e') -> Cont s r e t a e'
[FinalCont] :: Args s a c -> Cont s r e t a c
[Conts] :: !(STRef s [Cont s r e t a c]) -> !(STRef s (Maybe (STRef s (ST s [a])))) -> Conts s r e t a c
[conts] :: Conts s r e t a c -> !(STRef s [Cont s r e t a c])
[contsArgs] :: Conts s r e t a c -> !(STRef s (Maybe (STRef s (ST s [a]))))
[Report] :: Int -> [e] -> i -> Report e i
[position] :: Report e i -> Int
[expected] :: Report e i -> [e]
[unconsumed] :: Report e i -> i
[Ended] :: (Report e i) -> Result s e i a
[Parsed] :: (ST s [a]) -> Int -> i -> (ST s (Result s e i a)) -> Result s e i a
[Report] :: Int -> [e] -> i -> Report e i
[position] :: Report e i -> Int
[expected] :: Report e i -> [e]
[unconsumed] :: Report e i -> i
[Ended] :: (Report e i) -> Result s e i a
[Parsed] :: (ST s [a]) -> Int -> i -> (ST s (Result s e i a)) -> Result s e i a
[Report] :: Int -> [e] -> i -> Report e i
[position] :: Report e i -> Int
[expected] :: Report e i -> [e]
[unconsumed] :: Report e i -> i
[Ended] :: (Report e i) -> Result s e i a
[Parsed] :: (ST s [a]) -> Int -> i -> (ST s (Result s e i a)) -> Result s e i a
[LeftAssoc] :: Associativity
[NonAssoc] :: Associativity
[RightAssoc] :: Associativity
[Forward] :: Direction
[Backward] :: Direction
[IterT] :: m (Either a (IterT m a)) -> IterT m a
[runIterT] :: IterT m a -> m (Either a (IterT m a))
[Pure] :: a -> FreeF f a b
[Free] :: (f b) -> FreeF f a b
[FreeT] :: m (FreeF f a (FreeT f m a)) -> FreeT f m a
[runFreeT] :: FreeT f m a -> m (FreeF f a (FreeT f m a))
[FT] :: (forall r. (a -> m r) -> (forall x. (x -> m r) -> f x -> m r) -> m r) -> FT f m a
[runFT] :: FT f m a -> forall r. (a -> m r) -> (forall x. (x -> m r) -> f x -> m r) -> m r
[Pure] :: a -> Free f a
[Free] :: (f (Free f a)) -> Free f a
[F] :: (forall r. (a -> r) -> (f r -> r) -> r) -> F f a
[runF] :: F f a -> forall r. (a -> r) -> (f r -> r) -> r
[CofreeT] :: w (CofreeF f a (CofreeT f w a)) -> CofreeT f w a
[runCofreeT] :: CofreeT f w a -> w (CofreeF f a (CofreeT f w a))
[:<] :: a -> f b -> CofreeF f a b
[CoiterT] :: w (a, CoiterT w a) -> CoiterT w a
[runCoiterT] :: CoiterT w a -> w (a, CoiterT w a)
[:<] :: a -> f (Cofree f a) -> Cofree f a
[Alt] :: (forall g. Alternative g => (forall x. f x -> g x) -> g a) -> Alt f a
[_runAlt] :: Alt f a -> forall g. Alternative g => (forall x. f x -> g x) -> g a
[Alt] :: [AltF f a] -> Alt f a
[alternatives] :: Alt f a -> [AltF f a]
[Ap] :: f a -> Alt f (a -> b) -> AltF f b
[Pure] :: a -> AltF f a
[ApT] :: g (ApF f g a) -> ApT f g a
[getApT] :: ApT f g a -> g (ApF f g a)
[Pure] :: a -> ApF f g a
[Ap] :: f a -> ApT f g (a -> b) -> ApF f g b
[Ap] :: (forall g. Applicative g => (forall x. f x -> g x) -> g a) -> Ap f a
[_runAp] :: Ap f a -> forall g. Applicative g => (forall x. f x -> g x) -> g a
[Pure] :: a -> Ap f a
[Ap] :: f a -> Ap f (a -> b) -> Ap f b
[HttpF] :: StdMethod -> (RequestType client) -> (ResponseType client -> a) -> HttpF client a
[HttpF] :: StdMethod -> (RequestType client) -> (ResponseType client -> a) -> HttpF client a
[()] :: ()
[(,)] :: a -> b -> (,) a b
[(,,)] :: a -> b -> c -> (,,) a b c
[(,,,)] :: a -> b -> c -> d -> (,,,) a b c d
[(,,,,)] :: a -> b -> c -> d -> e -> (,,,,) a b c d e
[(,,,,,)] :: a -> b -> c -> d -> e -> f -> (,,,,,) a b c d e f
[(,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> (,,,,,,) a b c d e f g
[(,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> (,,,,,,,) a b c d e f g h
[(,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> (,,,,,,,,) a b c d e f g h i
[(,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> (,,,,,,,,,) a b c d e f g h i j
[(,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> (,,,,,,,,,,) a b c d e f g h i j k
[(,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> (,,,,,,,,,,,) a b c d e f g h i j k l
[(,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> (,,,,,,,,,,,,) a b c d e f g h i j k l m
[(,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> (,,,,,,,,,,,,,) a b c d e f g h i j k l m n
[(,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> (,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o
[(,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> (,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p
[(,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> (,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q
[(,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> (,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r
[(,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> (,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s
[(,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> (,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t
[(,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> (,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u
[(,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> (,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v
[(,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> (,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w
[(,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> (,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x
[(,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> (,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y
[(,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> (,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z
[(,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> b__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__ b__
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> b__ -> c__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__ b__ c__
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> b__ -> c__ -> d__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__ b__ c__ d__
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> b__ -> c__ -> d__ -> e__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__ b__ c__ d__ e__
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> b__ -> c__ -> d__ -> e__ -> f__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__ b__ c__ d__ e__ f__
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> b__ -> c__ -> d__ -> e__ -> f__ -> g__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__ b__ c__ d__ e__ f__ g__
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> b__ -> c__ -> d__ -> e__ -> f__ -> g__ -> h__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__ b__ c__ d__ e__ f__ g__ h__
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> b__ -> c__ -> d__ -> e__ -> f__ -> g__ -> h__ -> i__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__ b__ c__ d__ e__ f__ g__ h__ i__
[(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)] :: a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> a_ -> b_ -> c_ -> d_ -> e_ -> f_ -> g_ -> h_ -> i_ -> j_ -> k_ -> l_ -> m_ -> n_ -> o_ -> p_ -> q_ -> r_ -> s_ -> t_ -> u_ -> v_ -> w_ -> x_ -> y_ -> z_ -> a__ -> b__ -> c__ -> d__ -> e__ -> f__ -> g__ -> h__ -> i__ -> j__ -> (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a_ b_ c_ d_ e_ f_ g_ h_ i_ j_ k_ l_ m_ n_ o_ p_ q_ r_ s_ t_ u_ v_ w_ x_ y_ z_ a__ b__ c__ d__ e__ f__ g__ h__ i__ j__
[False] :: Bool
[True] :: Bool
[C#] :: Char# -> Char
[I#] :: Int# -> Int
[W#] :: Word# -> Word
[F#] :: Float# -> Float
[D#] :: Double# -> Double
[LT] :: Ordering
[EQ] :: Ordering
[GT] :: Ordering
[IO] :: (State# RealWorld -> (# State# RealWorld, a #)) -> IO a
[SPEC] :: SPEC
[SPEC2] :: SPEC
[I] :: Integer -> Symbol v c
[C] :: c -> Symbol v c
[E] :: (SOP v c) -> (Product v c) -> Symbol v c
[V] :: v -> Symbol v c
[P] :: [Symbol v c] -> Product v c
[unP] :: Product v c -> [Symbol v c]
[S] :: [Product v c] -> SOP v c
[unS] :: SOP v c -> [Product v c]
[SubstItem] :: v -> SOP v c -> n -> UnifyItem v c n
[siVar] :: UnifyItem v c n -> v
[siSOP] :: UnifyItem v c n -> SOP v c
[siNote] :: UnifyItem v c n -> n
[UnifyItem] :: SOP v c -> SOP v c -> n -> UnifyItem v c n
[siLHS] :: UnifyItem v c n -> SOP v c
[siRHS] :: UnifyItem v c n -> SOP v c
[siNote] :: UnifyItem v c n -> n
[Win] :: UnifyResult
[Lose] :: UnifyResult
[Draw] :: CoreUnify -> UnifyResult
[South] :: TriDirection
[Northwest] :: TriDirection
[Northeast] :: TriDirection
[North] :: TriDirection
[Southeast] :: TriDirection
[Southwest] :: TriDirection
[UnboundedTriGrid] :: UnboundedTriGrid
[TriTriGrid] :: Int -> [(Int, Int)] -> TriTriGrid
[ParaTriGrid] :: (Int, Int) -> [(Int, Int)] -> ParaTriGrid
[RectTriGrid] :: (Int, Int) -> [(Int, Int)] -> RectTriGrid
[TorTriGrid] :: (Int, Int) -> [(Int, Int)] -> TorTriGrid
[YCylTriGrid] :: (Int, Int) -> [(Int, Int)] -> YCylTriGrid
[XCylTriGrid] :: (Int, Int) -> [(Int, Int)] -> XCylTriGrid
[UnboundedTriGrid] :: UnboundedTriGrid
[North] :: SquareDirection
[East] :: SquareDirection
[South] :: SquareDirection
[West] :: SquareDirection
[UnboundedSquareGrid] :: UnboundedSquareGrid
[RectSquareGrid] :: (Int, Int) -> [(Int, Int)] -> RectSquareGrid
[TorSquareGrid] :: (Int, Int) -> [(Int, Int)] -> TorSquareGrid
[UnboundedSquareGrid] :: UnboundedSquareGrid
[West] :: HexDirection
[Northwest] :: HexDirection
[Northeast] :: HexDirection
[East] :: HexDirection
[Southeast] :: HexDirection
[Southwest] :: HexDirection
[UnboundedHexGrid] :: UnboundedHexGrid
[HexHexGrid] :: Int -> [(Int, Int)] -> HexHexGrid
[ParaHexGrid] :: (Int, Int) -> [(Int, Int)] -> ParaHexGrid
[UnboundedHexGrid] :: UnboundedHexGrid
[Northwest] :: HexDirection
[North] :: HexDirection
[Northeast] :: HexDirection
[Southeast] :: HexDirection
[South] :: HexDirection
[Southwest] :: HexDirection
[UnboundedHexGrid] :: UnboundedHexGrid
[HexHexGrid] :: Int -> [(Int, Int)] -> HexHexGrid
[RectHexGrid] :: (Int, Int) -> [(Int, Int)] -> RectHexGrid
[UnboundedHexGrid] :: UnboundedHexGrid
[West] :: OctDirection
[Northwest] :: OctDirection
[North] :: OctDirection
[Northeast] :: OctDirection
[East] :: OctDirection
[Southeast] :: OctDirection
[South] :: OctDirection
[Southwest] :: OctDirection
[UnboundedOctGrid] :: UnboundedOctGrid
[RectOctGrid] :: (Int, Int) -> [(Int, Int)] -> RectOctGrid
[TorOctGrid] :: (Int, Int) -> [(Int, Int)] -> TorOctGrid
[UnboundedOctGrid] :: UnboundedOctGrid
[Yellow] :: NotificationColor
[Green] :: NotificationColor
[Red] :: NotificationColor
[Purple] :: NotificationColor
[Gray] :: NotificationColor
[Random] :: NotificationColor
[TextNotification] :: Text -> NotificationMessage
[HtmlNotification] :: Text -> NotificationMessage
[Notification] :: Maybe NotificationColor -> Bool -> NotificationMessage -> Notification
[_notificationColor] :: Notification -> Maybe NotificationColor
[_notificationNotify] :: Notification -> Bool
[_notificationMessage] :: Notification -> NotificationMessage
[AbsoluteURI] :: URI -> AbsoluteURI
[AddOn] :: Text -> Text -> Text -> Links -> Maybe Capabilities -> Maybe Vendor -> AddOn
[_addOnKey] :: AddOn -> Text
[_addOnName] :: AddOn -> Text
[_addOnDescription] :: AddOn -> Text
[_addOnLinks] :: AddOn -> Links
[_addOnCapabilities] :: AddOn -> Maybe Capabilities
[_addOnVendor] :: AddOn -> Maybe Vendor
[Links] :: AbsoluteURI -> Maybe AbsoluteURI -> Links
[_linksSelf] :: Links -> AbsoluteURI
[_linksHomepage] :: Links -> Maybe AbsoluteURI
[Capabilities] :: Maybe Installable -> Maybe APIConsumer -> Maybe OAuth2Provider -> [Webhook] -> Maybe Configurable -> Capabilities
[_capabilitiesInstallable] :: Capabilities -> Maybe Installable
[_capabilitiesHipchatApiConsumer] :: Capabilities -> Maybe APIConsumer
[_capabilitiesOauth2Provider] :: Capabilities -> Maybe OAuth2Provider
[_capabilitiesWebhooks] :: Capabilities -> [Webhook]
[_capabilitiesConfigurable] :: Capabilities -> Maybe Configurable
[Installable] :: Maybe AbsoluteURI -> Bool -> Bool -> Installable
[_installableCallbackUrl] :: Installable -> Maybe AbsoluteURI
[_installableAllowRoom] :: Installable -> Bool
[_installableAllowGlobal] :: Installable -> Bool
[APIConsumer] :: [APIScope] -> Maybe Text -> APIConsumer
[_apiScopes] :: APIConsumer -> [APIScope]
[_apiFromName] :: APIConsumer -> Maybe Text
[OAuth2Provider] :: AbsoluteURI -> AbsoluteURI -> OAuth2Provider
[_oAuth2ProviderAuthorizationUrl] :: OAuth2Provider -> AbsoluteURI
[_oAuth2ProviderTokenUrl] :: OAuth2Provider -> AbsoluteURI
[AdminGroup] :: APIScope
[AdminRoom] :: APIScope
[ManageRooms] :: APIScope
[SendMessage] :: APIScope
[SendNotification] :: APIScope
[ViewGroup] :: APIScope
[ViewMessages] :: APIScope
[Webhook] :: AbsoluteURI -> Maybe Text -> RoomEvent -> Webhook
[_webhookUrl] :: Webhook -> AbsoluteURI
[_webhookPattern] :: Webhook -> Maybe Text
[_webhookEvent] :: Webhook -> RoomEvent
[Configurable] :: AbsoluteURI -> Configurable
[_configurableUrl] :: Configurable -> AbsoluteURI
[Vendor] :: AbsoluteURI -> Text -> Vendor
[_vendorUrl] :: Vendor -> AbsoluteURI
[_vendorName] :: Vendor -> Text
[Registration] :: OAuthId -> AbsoluteURI -> Maybe RoomId -> Int -> Text -> Registration
[_registrationOauthId] :: Registration -> OAuthId
[_registrationCapabilitiesUrl] :: Registration -> AbsoluteURI
[_registrationRoomId] :: Registration -> Maybe RoomId
[_registrationGroupId] :: Registration -> Int
[_registrationOauthSecret] :: Registration -> Text
[AccessToken] :: Text -> UTCTime -> AccessToken
[_accessTokenAccessToken] :: AccessToken -> Text
[_accessTokenExpires] :: AccessToken -> UTCTime
[HipBotAPI] :: (Registration -> AccessToken -> m ()) -> (OAuthId -> m ()) -> (OAuthId -> m (Maybe (Registration, AccessToken))) -> (OAuthId -> AccessToken -> m ()) -> HipBotAPI m
[apiInsertRegistration] :: HipBotAPI m -> Registration -> AccessToken -> m ()
[apiDeleteRegistration] :: HipBotAPI m -> OAuthId -> m ()
[apiLookupRegistration] :: HipBotAPI m -> OAuthId -> m (Maybe (Registration, AccessToken))
[apiUpdateAccessToken] :: HipBotAPI m -> OAuthId -> AccessToken -> m ()
[RoomLinks] :: Maybe AbsoluteURI -> AbsoluteURI -> AbsoluteURI -> AbsoluteURI -> RoomLinks
[_roomLinksMembers] :: RoomLinks -> Maybe AbsoluteURI
[_roomLinksParticipants] :: RoomLinks -> AbsoluteURI
[_roomLinksSelf] :: RoomLinks -> AbsoluteURI
[_roomLinksWebhooks] :: RoomLinks -> AbsoluteURI
[Room] :: RoomId -> RoomName -> RoomLinks -> Room
[_roomRoomId] :: Room -> RoomId
[_roomName] :: Room -> RoomName
[_roomLinks] :: Room -> RoomLinks
[MessageItem] :: Text -> MessageItem
[_messageItemMessage] :: MessageItem -> Text
[WebhookRoomMessage] :: Room -> MessageItem -> WebhookRoomItem
[WebhookRoomEvent] :: Int -> Maybe String -> WebhookRoomItem -> WebhookRoomEvent
[_webhookRoomEventWebhookId] :: WebhookRoomEvent -> Int
[_webhookRoomEventOauthId] :: WebhookRoomEvent -> Maybe String
[_webhookRoomEventItem] :: WebhookRoomEvent -> WebhookRoomItem
[HipBotAPI] :: (Registration -> AccessToken -> m ()) -> (OAuthId -> m ()) -> (OAuthId -> m (Maybe (Registration, AccessToken))) -> (OAuthId -> AccessToken -> m ()) -> HipBotAPI m
[apiInsertRegistration] :: HipBotAPI m -> Registration -> AccessToken -> m ()
[apiDeleteRegistration] :: HipBotAPI m -> OAuthId -> m ()
[apiLookupRegistration] :: HipBotAPI m -> OAuthId -> m (Maybe (Registration, AccessToken))
[apiUpdateAccessToken] :: HipBotAPI m -> OAuthId -> AccessToken -> m ()
[RoomMessage] :: RoomEvent
[RoomNotification] :: RoomEvent
[RoomExit] :: RoomEvent
[RoomEnter] :: RoomEvent
[RoomTopicChange] :: RoomEvent
[Vector3] :: UnpkScalar -> UnpkScalar -> UnpkScalar -> Vector3
[v3x] :: Vector3 -> UnpkScalar
[v3y] :: Vector3 -> UnpkScalar
[v3z] :: Vector3 -> UnpkScalar
[Parallel] :: StrandSenseT
[Antiparallel] :: StrandSenseT
[XRayDiffraction] :: ExpMethod
[FiberDiffraction] :: ExpMethod
[NeutronDiffraction] :: ExpMethod
[ElectronCrystallography] :: ExpMethod
[ElectronMicroscopy] :: ExpMethod
[SolidStateNMR] :: ExpMethod
[SolutionNMR] :: ExpMethod
[SolutionScattering] :: ExpMethod
[OtherExpMethod] :: !ByteString -> ExpMethod
[Vector3] :: UnpkScalar -> UnpkScalar -> UnpkScalar -> Vector3
[v3x] :: Vector3 -> UnpkScalar
[v3y] :: Vector3 -> UnpkScalar
[v3z] :: Vector3 -> UnpkScalar
[ATID] :: (String, String, Char, Int, Char) -> ATID
[RESID] :: (String, Char, Int, Char) -> RESID
[ATOM] :: !Int -> !String -> !String -> !Char -> !Int -> !Char -> !Char -> !Vector3 -> !Double -> !Double -> !String -> !String -> !String -> !Bool -> PDBEvent
[no] :: PDBEvent -> !Int
[atomtype] :: PDBEvent -> !String
[restype] :: PDBEvent -> !String
[chain] :: PDBEvent -> !Char
[resid] :: PDBEvent -> !Int
[resins] :: PDBEvent -> !Char
[altloc] :: PDBEvent -> !Char
[coords] :: PDBEvent -> !Vector3
[occupancy] :: PDBEvent -> !Double
[bfactor] :: PDBEvent -> !Double
[segid] :: PDBEvent -> !String
[elt] :: PDBEvent -> !String
[charge] :: PDBEvent -> !String
[hetatm] :: PDBEvent -> !Bool
[SIGATM] :: !Int -> !String -> !String -> !Char -> !Int -> !Char -> !Char -> !Vector3 -> !Double -> !Double -> !String -> !String -> !String -> PDBEvent
[no] :: PDBEvent -> !Int
[atomtype] :: PDBEvent -> !String
[restype] :: PDBEvent -> !String
[chain] :: PDBEvent -> !Char
[resid] :: PDBEvent -> !Int
[resins] :: PDBEvent -> !Char
[altloc] :: PDBEvent -> !Char
[coords] :: PDBEvent -> !Vector3
[occupancy] :: PDBEvent -> !Double
[bfactor] :: PDBEvent -> !Double
[segid] :: PDBEvent -> !String
[elt] :: PDBEvent -> !String
[charge] :: PDBEvent -> !String
[ANISOU] :: !Int -> !String -> !String -> !Char -> !Int -> !Char -> !Char -> !Int -> !Int -> !Int -> !Int -> !Int -> !Int -> !String -> !String -> !String -> PDBEvent
[no] :: PDBEvent -> !Int
[atomtype] :: PDBEvent -> !String
[restype] :: PDBEvent -> !String
[chain] :: PDBEvent -> !Char
[resid] :: PDBEvent -> !Int
[resins] :: PDBEvent -> !Char
[altloc] :: PDBEvent -> !Char
[u_1_1] :: PDBEvent -> !Int
[u_2_2] :: PDBEvent -> !Int
[u_3_3] :: PDBEvent -> !Int
[u_1_2] :: PDBEvent -> !Int
[u_1_3] :: PDBEvent -> !Int
[u_2_3] :: PDBEvent -> !Int
[segid] :: PDBEvent -> !String
[elt] :: PDBEvent -> !String
[charge] :: PDBEvent -> !String
[SIGUIJ] :: !Int -> !String -> !String -> !Char -> !Int -> !Char -> !Char -> !Int -> !Int -> !Int -> !Int -> !Int -> !Int -> !String -> !String -> !String -> PDBEvent
[no] :: PDBEvent -> !Int
[atomtype] :: PDBEvent -> !String
[restype] :: PDBEvent -> !String
[chain] :: PDBEvent -> !Char
[resid] :: PDBEvent -> !Int
[resins] :: PDBEvent -> !Char
[altloc] :: PDBEvent -> !Char
[u_1_1] :: PDBEvent -> !Int
[u_2_2] :: PDBEvent -> !Int
[u_3_3] :: PDBEvent -> !Int
[u_1_2] :: PDBEvent -> !Int
[u_1_3] :: PDBEvent -> !Int
[u_2_3] :: PDBEvent -> !Int
[segid] :: PDBEvent -> !String
[elt] :: PDBEvent -> !String
[charge] :: PDBEvent -> !String
[SEQRES] :: !Int -> !Char -> !Int -> ![String] -> PDBEvent
[serial] :: PDBEvent -> !Int
[chain] :: PDBEvent -> !Char
[num] :: PDBEvent -> !Int
[resList] :: PDBEvent -> ![String]
[HEADER] :: !String -> !String -> !String -> PDBEvent
[classification] :: PDBEvent -> !String
[depDate] :: PDBEvent -> !String
[idCode] :: PDBEvent -> !String
[TITLE] :: !Int -> !String -> PDBEvent
[continuation] :: PDBEvent -> !Int
[title] :: PDBEvent -> !String
[KEYWDS] :: !Int -> ![String] -> PDBEvent
[continuation] :: PDBEvent -> !Int
[aList] :: PDBEvent -> ![String]
[AUTHOR] :: !Int -> ![String] -> PDBEvent
[continuation] :: PDBEvent -> !Int
[aList] :: PDBEvent -> ![String]
[REMARK] :: !Int -> ![String] -> PDBEvent
[num] :: PDBEvent -> !Int
[text] :: PDBEvent -> ![String]
[EXPDTA] :: !Int -> ![ExpMethod] -> PDBEvent
[continuation] :: PDBEvent -> !Int
[expMethods] :: PDBEvent -> ![ExpMethod]
[MDLTYP] :: !Int -> ![String] -> PDBEvent
[continuation] :: PDBEvent -> !Int
[aList] :: PDBEvent -> ![String]
[NUMMDL] :: !Int -> PDBEvent
[num] :: PDBEvent -> !Int
[MODEL] :: !Int -> PDBEvent
[num] :: PDBEvent -> !Int
[CONECT] :: ![Int] -> PDBEvent
[atoms] :: PDBEvent -> ![Int]
[CAVEAT] :: !Int -> !String -> !String -> PDBEvent
[cont] :: PDBEvent -> !Int
[pdbid] :: PDBEvent -> !String
[comment] :: PDBEvent -> !String
[DBREF] :: !String -> !Char -> !Int -> !Char -> !Int -> !Char -> !String -> !String -> !String -> !Int -> !Char -> !Int -> !Char -> PDBEvent
[idCode] :: PDBEvent -> !String
[chain] :: PDBEvent -> !Char
[iniSeqNumPDB] :: PDBEvent -> !Int
[iniInsCodePDB] :: PDBEvent -> !Char
[endSeqNumPDB] :: PDBEvent -> !Int
[endInsCodePDB] :: PDBEvent -> !Char
[seqDbName] :: PDBEvent -> !String
[seqDbAccCode] :: PDBEvent -> !String
[seqDbIdCode] :: PDBEvent -> !String
[iniSeqNumInDb] :: PDBEvent -> !Int
[iniInsCodeInPDBRef] :: PDBEvent -> !Char
[endSeqNumInDb] :: PDBEvent -> !Int
[endInsCodeInPDBRef] :: PDBEvent -> !Char
[REVDAT] :: !Int -> !Int -> !String -> !String -> !Int -> ![String] -> PDBEvent
[modNum] :: PDBEvent -> !Int
[cont] :: PDBEvent -> !Int
[modDat] :: PDBEvent -> !String
[modId] :: PDBEvent -> !String
[modTyp] :: PDBEvent -> !Int
[details] :: PDBEvent -> ![String]
[HETNAM] :: !Int -> !String -> !String -> !Bool -> PDBEvent
[cont] :: PDBEvent -> !Int
[hetId] :: PDBEvent -> !String
[name] :: PDBEvent -> !String
[notSynonym] :: PDBEvent -> !Bool
[HET] :: !String -> !Char -> !Int -> !Char -> !Int -> !String -> PDBEvent
[hetId] :: PDBEvent -> !String
[chain] :: PDBEvent -> !Char
[seqNum] :: PDBEvent -> !Int
[insCode] :: PDBEvent -> !Char
[atmNum] :: PDBEvent -> !Int
[description] :: PDBEvent -> !String
[FORMUL] :: !Int -> !String -> !Int -> !Bool -> ![String] -> PDBEvent
[compNum] :: PDBEvent -> !Int
[hetId] :: PDBEvent -> !String
[cont] :: PDBEvent -> !Int
[isWater] :: PDBEvent -> !Bool
[formula] :: PDBEvent -> ![String]
[CISPEP] :: !Int -> !RESID -> !RESID -> !Int -> Maybe Double -> PDBEvent
[serial] :: PDBEvent -> !Int
[res1] :: PDBEvent -> !RESID
[res2] :: PDBEvent -> !RESID
[modNum] :: PDBEvent -> !Int
[angle] :: PDBEvent -> Maybe Double
[HELIX] :: Int -> RESID -> RESID -> HelixT -> String -> Int -> PDBEvent
[serial] :: PDBEvent -> Int
[iniRes] :: PDBEvent -> RESID
[endRes] :: PDBEvent -> RESID
[helixClass] :: PDBEvent -> HelixT
[comment] :: PDBEvent -> String
[len] :: PDBEvent -> Int
[SHEET] :: Int -> String -> Int -> Maybe StrandSenseT -> RESID -> RESID -> Maybe ATID -> Maybe ATID -> PDBEvent
[strandId] :: PDBEvent -> Int
[sheetId] :: PDBEvent -> String
[numStrands] :: PDBEvent -> Int
[sense] :: PDBEvent -> Maybe StrandSenseT
[iniRes] :: PDBEvent -> RESID
[endRes] :: PDBEvent -> RESID
[curAt] :: PDBEvent -> Maybe ATID
[prevAt] :: PDBEvent -> Maybe ATID
[ORIGXn] :: Int -> [Vector3] -> [Double] -> PDBEvent
[n] :: PDBEvent -> Int
[o] :: PDBEvent -> [Vector3]
[t] :: PDBEvent -> [Double]
[SCALEn] :: Int -> [Vector3] -> [Double] -> PDBEvent
[n] :: PDBEvent -> Int
[o] :: PDBEvent -> [Vector3]
[t] :: PDBEvent -> [Double]
[MTRIXn] :: !Int -> !Bool -> !Int -> ![Vector3] -> ![Double] -> PDBEvent
[serial] :: PDBEvent -> !Int
[relMol] :: PDBEvent -> !Bool
[n] :: PDBEvent -> !Int
[o] :: PDBEvent -> ![Vector3]
[t] :: PDBEvent -> ![Double]
[CRYST1] :: !Double -> !Double -> !Double -> !Double -> !Double -> !Double -> !String -> !Int -> PDBEvent
[a] :: PDBEvent -> !Double
[b] :: PDBEvent -> !Double
[c] :: PDBEvent -> !Double
[alpha] :: PDBEvent -> !Double
[beta] :: PDBEvent -> !Double
[gamma] :: PDBEvent -> !Double
[spcGrp] :: PDBEvent -> !String
[zValue] :: PDBEvent -> !Int
[COMPND] :: !Int -> ![(String, String)] -> PDBEvent
[cont] :: PDBEvent -> !Int
[tokens] :: PDBEvent -> ![(String, String)]
[SOURCE] :: !Int -> ![(String, String)] -> PDBEvent
[cont] :: PDBEvent -> !Int
[tokens] :: PDBEvent -> ![(String, String)]
[TER] :: !Int -> !String -> !Char -> !Int -> !Char -> PDBEvent
[num] :: PDBEvent -> !Int
[resname] :: PDBEvent -> !String
[chain] :: PDBEvent -> !Char
[resid] :: PDBEvent -> !Int
[insCode] :: PDBEvent -> !Char
[MASTER] :: !Int -> !Int -> !Int -> !Int -> !Int -> !Int -> !Int -> !Int -> !Int -> !Int -> !Int -> PDBEvent
[numRemark] :: PDBEvent -> !Int
[numHet] :: PDBEvent -> !Int
[numHelix] :: PDBEvent -> !Int
[numSheet] :: PDBEvent -> !Int
[numTurn] :: PDBEvent -> !Int
[numSite] :: PDBEvent -> !Int
[numXform] :: PDBEvent -> !Int
[numAts] :: PDBEvent -> !Int
[numMaster] :: PDBEvent -> !Int
[numConect] :: PDBEvent -> !Int
[numSeqres] :: PDBEvent -> !Int
[END] :: PDBEvent
[ENDMDL] :: PDBEvent
[SITE] :: !Int -> !String -> !Int -> ![RESID] -> PDBEvent
[serial] :: PDBEvent -> !Int
[siteid] :: PDBEvent -> !String
[numres] :: PDBEvent -> !Int
[residues] :: PDBEvent -> ![RESID]
[OBSLTE] :: !Int -> !String -> !String -> ![String] -> PDBEvent
[cont] :: PDBEvent -> !Int
[date] :: PDBEvent -> !String
[this] :: PDBEvent -> !String
[entries] :: PDBEvent -> ![String]
[SPRSDE] :: !Int -> !String -> !String -> ![String] -> PDBEvent
[cont] :: PDBEvent -> !Int
[date] :: PDBEvent -> !String
[this] :: PDBEvent -> !String
[entries] :: PDBEvent -> ![String]
[SPLIT] :: !Int -> ![String] -> PDBEvent
[cont] :: PDBEvent -> !Int
[codes] :: PDBEvent -> ![String]
[SSBOND] :: !Int -> RESID -> RESID -> !String -> !String -> !Double -> PDBEvent
[serial] :: PDBEvent -> !Int
[res1] :: PDBEvent -> RESID
[res2] :: PDBEvent -> RESID
[symOp1] :: PDBEvent -> !String
[symOp2] :: PDBEvent -> !String
[bondLen] :: PDBEvent -> !Double
[LINK] :: !ATID -> !Char -> !ATID -> !Char -> !String -> !String -> Maybe Double -> PDBEvent
[at1] :: PDBEvent -> !ATID
[altloc1] :: PDBEvent -> !Char
[at2] :: PDBEvent -> !ATID
[altloc2] :: PDBEvent -> !Char
[symop1] :: PDBEvent -> !String
[symop2] :: PDBEvent -> !String
[linkdist] :: PDBEvent -> Maybe Double
[SLTBRG] :: !ATID -> !Char -> !ATID -> !Char -> !String -> !String -> PDBEvent
[at1] :: PDBEvent -> !ATID
[altloc1] :: PDBEvent -> !Char
[at2] :: PDBEvent -> !ATID
[altloc2] :: PDBEvent -> !Char
[symOp1] :: PDBEvent -> !String
[symOp2] :: PDBEvent -> !String
[HYDBND] :: !ATID -> !Char -> !ATID -> !Char -> !ATID -> !Char -> !String -> !String -> PDBEvent
[at1] :: PDBEvent -> !ATID
[altloc1] :: PDBEvent -> !Char
[atH] :: PDBEvent -> !ATID
[altlocH] :: PDBEvent -> !Char
[at2] :: PDBEvent -> !ATID
[altloc2] :: PDBEvent -> !Char
[symOp1] :: PDBEvent -> !String
[symOp2] :: PDBEvent -> !String
[TVECT] :: !Int -> Vector3 -> PDBEvent
[serial] :: PDBEvent -> !Int
[vec] :: PDBEvent -> Vector3
[JRNL] :: !Int -> ![(String, String)] -> !Bool -> PDBEvent
[cont] :: PDBEvent -> !Int
[content] :: PDBEvent -> ![(String, String)]
[isFirst] :: PDBEvent -> !Bool
[MODRES] :: !String -> !RESID -> !String -> !String -> PDBEvent
[pdbCode] :: PDBEvent -> !String
[residue] :: PDBEvent -> !RESID
[stdRes] :: PDBEvent -> !String
[comment] :: PDBEvent -> !String
[SEQADV] :: !String -> Maybe RESID -> !String -> !String -> !String -> Maybe Int -> !String -> PDBEvent
[pdbId] :: PDBEvent -> !String
[advResidue] :: PDBEvent -> Maybe RESID
[database] :: PDBEvent -> !String
[accessionCode] :: PDBEvent -> !String
[dbResname] :: PDBEvent -> !String
[dbSeqNum] :: PDBEvent -> Maybe Int
[comment] :: PDBEvent -> !String
[PDBParseError] :: !Int -> !Int -> !String -> PDBEvent
[PDBIgnoredLine] :: ByteString -> PDBEvent
[Parallel] :: StrandSenseT
[Antiparallel] :: StrandSenseT
[XRayDiffraction] :: ExpMethod
[FiberDiffraction] :: ExpMethod
[NeutronDiffraction] :: ExpMethod
[ElectronCrystallography] :: ExpMethod
[ElectronMicroscopy] :: ExpMethod
[SolidStateNMR] :: ExpMethod
[SolutionNMR] :: ExpMethod
[SolutionScattering] :: ExpMethod
[OtherExpMethod] :: !ByteString -> ExpMethod
[Structure] :: List Model -> Structure
[models] :: Structure -> List Model
[Model] :: !Int -> List Chain -> Model
[modelId] :: Model -> !Int
[chains] :: Model -> List Chain
[Chain] :: !Char -> List Residue -> Chain
[chainId] :: Chain -> !Char
[residues] :: Chain -> List Residue
[Residue] :: !String -> !Int -> List Atom -> !Char -> Residue
[resName] :: Residue -> !String
[resSeq] :: Residue -> !Int
[atoms] :: Residue -> List Atom
[insCode] :: Residue -> !Char
[Atom] :: !String -> !Int -> !Vector3 -> !Double -> !Double -> !String -> !String -> !String -> !Bool -> Atom
[atName] :: Atom -> !String
[atSerial] :: Atom -> !Int
[coord] :: Atom -> !Vector3
[bFactor] :: Atom -> !Double
[occupancy] :: Atom -> !Double
[element] :: Atom -> !String
[segid] :: Atom -> !String
[charge] :: Atom -> !String
[hetatm] :: Atom -> !Bool
[Structure] :: List Model -> Structure
[models] :: Structure -> List Model
[Model] :: !Int -> List Chain -> Model
[modelId] :: Model -> !Int
[chains] :: Model -> List Chain
[Chain] :: !Char -> List Residue -> Chain
[chainId] :: Chain -> !Char
[residues] :: Chain -> List Residue
[Residue] :: !String -> !Int -> List Atom -> !Char -> Residue
[resName] :: Residue -> !String
[resSeq] :: Residue -> !Int
[atoms] :: Residue -> List Atom
[insCode] :: Residue -> !Char
[Atom] :: !String -> !Int -> !Vector3 -> !Double -> !Double -> !String -> !String -> !String -> !Bool -> Atom
[atName] :: Atom -> !String
[atSerial] :: Atom -> !Int
[coord] :: Atom -> !Vector3
[bFactor] :: Atom -> !Double
[occupancy] :: Atom -> !Double
[element] :: Atom -> !String
[segid] :: Atom -> !String
[charge] :: Atom -> !String
[hetatm] :: Atom -> !Bool
[ShimDispatch] :: String -> String -> [RValue] -> ShimDispatch
[RNONE] :: RBuiltin
[RNIL] :: RBuiltin
[ROBJECT] :: RBuiltin
[RCLASS] :: RBuiltin
[RICLASS] :: RBuiltin
[RMODULE] :: RBuiltin
[RFLOAT] :: RBuiltin
[RSTRING] :: RBuiltin
[RREGEXP] :: RBuiltin
[RARRAY] :: RBuiltin
[RFIXNUM] :: RBuiltin
[RHASH] :: RBuiltin
[RSTRUCT] :: RBuiltin
[RBIGNUM] :: RBuiltin
[RFILE] :: RBuiltin
[RTRUE] :: RBuiltin
[RFALSE] :: RBuiltin
[RDATA] :: RBuiltin
[RMATCH] :: RBuiltin
[RSYMBOL] :: RBuiltin
[RUNDEF] :: RBuiltin
[RNODE] :: RBuiltin
[RFixNum] :: RType
[RNil] :: RType
[RFalse] :: RType
[RTrue] :: RType
[RSymbol] :: RType
[RUndef] :: RType
[RBuiltin] :: RBuiltin -> RType
[Stack] :: String -> String -> RubyError
[WithOutput] :: String -> RValue -> RubyError
[OtherError] :: String -> RubyError
[Stack] :: String -> String -> RubyError
[WithOutput] :: String -> RValue -> RubyError
[OtherError] :: String -> RubyError
[MasterInfo] :: !ByteString -> !Word32 -> !(Maybe Word32) -> !(Maybe ByteString) -> !(Maybe ByteString) -> MasterInfo
[masterInfoId'] :: MasterInfo -> !ByteString
[masterInfoIp] :: MasterInfo -> !Word32
[masterInfoPort] :: MasterInfo -> !(Maybe Word32)
[masterInfoPid] :: MasterInfo -> !(Maybe ByteString)
[masterInfoHostname] :: MasterInfo -> !(Maybe ByteString)
[SlaveInfo] :: !ByteString -> !(Maybe Word32) -> ![Resource] -> ![(ByteString, Value)] -> !(Maybe SlaveID) -> !(Maybe Bool) -> SlaveInfo
[slaveInfoHostname] :: SlaveInfo -> !ByteString
[slaveInfoPort] :: SlaveInfo -> !(Maybe Word32)
[slaveInfoResources] :: SlaveInfo -> ![Resource]
[slaveInfoAttributes] :: SlaveInfo -> ![(ByteString, Value)]
[slaveInfoSlaveId] :: SlaveInfo -> !(Maybe SlaveID)
[slaveInfoCheckpoint] :: SlaveInfo -> !(Maybe Bool)
[ExecutorInfo] :: !ExecutorID -> !FrameworkID -> !CommandInfo -> !(Maybe ContainerInfo) -> ![Resource] -> !(Maybe ByteString) -> !(Maybe ByteString) -> !(Maybe ByteString) -> ExecutorInfo
[executorInfoExecutorId] :: ExecutorInfo -> !ExecutorID
[executorInfoFrameworkId] :: ExecutorInfo -> !FrameworkID
[executorInfoCommandInfo] :: ExecutorInfo -> !CommandInfo
[executorInfoContainerInfo] :: ExecutorInfo -> !(Maybe ContainerInfo)
[executorInfoResources] :: ExecutorInfo -> ![Resource]
[executorInfoName] :: ExecutorInfo -> !(Maybe ByteString)
[executorInfoSource] :: ExecutorInfo -> !(Maybe ByteString)
[executorInfoData_] :: ExecutorInfo -> !(Maybe ByteString)
[FrameworkInfo] :: !ByteString -> !ByteString -> !(Maybe FrameworkID) -> !(Maybe Double) -> !(Maybe Bool) -> !(Maybe ByteString) -> !(Maybe ByteString) -> !(Maybe ByteString) -> FrameworkInfo
[frameworkInfoUser] :: FrameworkInfo -> !ByteString
[frameworkInfoName] :: FrameworkInfo -> !ByteString
[frameworkInfoId'] :: FrameworkInfo -> !(Maybe FrameworkID)
[frameworkInfoFailoverTimeout] :: FrameworkInfo -> !(Maybe Double)
[frameworkInfoCheckpoint] :: FrameworkInfo -> !(Maybe Bool)
[frameworkInfoRole] :: FrameworkInfo -> !(Maybe ByteString)
[frameworkInfoHostname] :: FrameworkInfo -> !(Maybe ByteString)
[frameworkInfoPrincipal] :: FrameworkInfo -> !(Maybe ByteString)
[Offer] :: !OfferID -> !FrameworkID -> !SlaveID -> !ByteString -> ![Resource] -> ![(ByteString, Value)] -> ![ExecutorID] -> Offer
[offerId'] :: Offer -> !OfferID
[offerFrameworkId] :: Offer -> !FrameworkID
[offerSlaveId] :: Offer -> !SlaveID
[offerHostname] :: Offer -> !ByteString
[offerResources] :: Offer -> ![Resource]
[offerAttributes] :: Offer -> ![(ByteString, Value)]
[offerExecutorIds] :: Offer -> ![ExecutorID]
[Request] :: !(Maybe SlaveID) -> ![Resource] -> Request
[requestSlaveId] :: Request -> !(Maybe SlaveID)
[requestResources] :: Request -> ![Resource]
[Filters] :: Maybe Double -> Filters
[filtersRefuseSeconds] :: Filters -> Maybe Double
[TaskInfo] :: !ByteString -> !TaskID -> !SlaveID -> ![Resource] -> !TaskExecutionInfo -> !(Maybe ByteString) -> !(Maybe ContainerInfo) -> !(Maybe HealthCheck) -> TaskInfo
[taskInfoName] :: TaskInfo -> !ByteString
[taskInfoId'] :: TaskInfo -> !TaskID
[taskInfoSlaveId] :: TaskInfo -> !SlaveID
[taskInfoResources] :: TaskInfo -> ![Resource]
[taskInfoImplementation] :: TaskInfo -> !TaskExecutionInfo
[taskInfoData_] :: TaskInfo -> !(Maybe ByteString)
[taskInfoContainer] :: TaskInfo -> !(Maybe ContainerInfo)
[taskInfoHealthCheck] :: TaskInfo -> !(Maybe HealthCheck)
[TaskCommand] :: !CommandInfo -> TaskExecutionInfo
[TaskExecutor] :: !ExecutorInfo -> TaskExecutionInfo
[CommandInfo] :: ![CommandURI] -> !(Maybe [(ByteString, ByteString)]) -> !CommandValue -> !(Maybe ByteString) -> CommandInfo
[commandInfoUris] :: CommandInfo -> ![CommandURI]
[commandInfoEnvironment] :: CommandInfo -> !(Maybe [(ByteString, ByteString)])
[commandInfoValue] :: CommandInfo -> !CommandValue
[commandInfoUser] :: CommandInfo -> !(Maybe ByteString)
[CommandURI] :: !ByteString -> !(Maybe Bool) -> !(Maybe Bool) -> CommandURI
[commandURIValue] :: CommandURI -> !ByteString
[commandURIExecutable] :: CommandURI -> !(Maybe Bool)
[commandURIExtract] :: CommandURI -> !(Maybe Bool)
[ShellCommand] :: !ByteString -> CommandValue
[RawCommand] :: !ByteString -> ![ByteString] -> CommandValue
[Scalar] :: !Double -> Value
[Ranges] :: ![(Word64, Word64)] -> Value
[Set] :: ![ByteString] -> Value
[Text] :: !ByteString -> Value
[Resource] :: !ByteString -> !Value -> !(Maybe ByteString) -> Resource
[resourceName] :: Resource -> !ByteString
[resourceValue] :: Resource -> !Value
[resourceRole] :: Resource -> !(Maybe ByteString)
[NotStarted] :: Status
[Running] :: Status
[Aborted] :: Status
[Stopped] :: Status
[TaskStatus] :: !TaskID -> !TaskState -> !(Maybe ByteString) -> !(Maybe ByteString) -> !(Maybe SlaveID) -> !(Maybe ExecutorID) -> !(Maybe Double) -> !(Maybe Bool) -> TaskStatus
[taskStatusTaskId] :: TaskStatus -> !TaskID
[taskStatusState] :: TaskStatus -> !TaskState
[taskStatusMessage] :: TaskStatus -> !(Maybe ByteString)
[taskStatusData_] :: TaskStatus -> !(Maybe ByteString)
[taskStatusSlaveId] :: TaskStatus -> !(Maybe SlaveID)
[taskStatusExecutorId] :: TaskStatus -> !(Maybe ExecutorID)
[taskStatusTimestamp] :: TaskStatus -> !(Maybe Double)
[taskStatusHealthy] :: TaskStatus -> !(Maybe Bool)
[Staging] :: TaskState
[Starting] :: TaskState
[TaskRunning] :: TaskState
[Finished] :: TaskState
[Failed] :: TaskState
[Killed] :: TaskState
[Lost] :: TaskState
[FrameworkID] :: ByteString -> FrameworkID
[frameworkIDId'] :: FrameworkID -> ByteString
[SlaveID] :: ByteString -> SlaveID
[slaveIDId'] :: SlaveID -> ByteString
[OfferID] :: ByteString -> OfferID
[offerIDId'] :: OfferID -> ByteString
[TaskID] :: ByteString -> TaskID
[taskIDId'] :: TaskID -> ByteString
[ExecutorID] :: ByteString -> ExecutorID
[executorIDId'] :: ExecutorID -> ByteString
[ContainerID] :: ByteString -> ContainerID
[containerIDId'] :: ContainerID -> ByteString
[ContainerInfo] :: !ContainerType -> ![Volume] -> ContainerInfo
[containerInfoContainerType] :: ContainerInfo -> !ContainerType
[containerInfoVolumes] :: ContainerInfo -> ![Volume]
[Volume] :: !ByteString -> !(Maybe ByteString) -> !Mode -> Volume
[volumeContainerPath] :: Volume -> !ByteString
[volumeHostPath] :: Volume -> !(Maybe ByteString)
[volumeMode] :: Volume -> !Mode
[ReadWrite] :: Mode
[ReadOnly] :: Mode
[Docker] :: ByteString -> ContainerType
[dockerImage] :: ContainerType -> ByteString
[Unknown] :: Int -> ContainerType
[HealthCheck] :: !HealthCheckStrategy -> !(Maybe Double) -> !(Maybe Double) -> !(Maybe Double) -> !(Maybe Word32) -> !(Maybe Double) -> HealthCheck
[healthCheckStrategy] :: HealthCheck -> !HealthCheckStrategy
[healthCheckDelaySeconds] :: HealthCheck -> !(Maybe Double)
[healthCheckIntervalSeconds] :: HealthCheck -> !(Maybe Double)
[healthCheckTimeoutSeconds] :: HealthCheck -> !(Maybe Double)
[healthCheckConsecutiveFailures] :: HealthCheck -> !(Maybe Word32)
[healthCheckGracePeriodSeconds] :: HealthCheck -> !(Maybe Double)
[HTTPCheck] :: !Word32 -> !(Maybe ByteString) -> ![Word32] -> HealthCheckStrategy
[healthCheckStrategyPort] :: HealthCheckStrategy -> !Word32
[healthCheckStrategyPath] :: HealthCheckStrategy -> !(Maybe ByteString)
[healthCheckStrategyStatuses] :: HealthCheckStrategy -> ![Word32]
[CommandCheck] :: !CommandInfo -> HealthCheckStrategy
[healthCheckStrategyCommand] :: HealthCheckStrategy -> !CommandInfo
[ResourceStatistics] :: !Double -> !(Maybe Double) -> !(Maybe Double) -> !Double -> !(Maybe Word32) -> !(Maybe Word32) -> !(Maybe Double) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe PerformanceStatistics) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> ResourceStatistics
[resourceStatisticsTimestamp] :: ResourceStatistics -> !Double
[resourceStatisticsCpusUserTimeSecs] :: ResourceStatistics -> !(Maybe Double)
[resourceStatisticsCpusSystemTimeSecs] :: ResourceStatistics -> !(Maybe Double)
[resourceStatisticsCpusLimit] :: ResourceStatistics -> !Double
[resourceStatisticsCpusPeriods] :: ResourceStatistics -> !(Maybe Word32)
[resourceStatisticsCpusThrottled] :: ResourceStatistics -> !(Maybe Word32)
[resourceStatisticsCpusThrottledTimeSecs] :: ResourceStatistics -> !(Maybe Double)
[resourceStatisticsMemoryResidentSetSize] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsMemoryLimitBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsMemoryFileBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsMemoryAnonymousBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsMemoryMappedFileBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsPerformanceStatistics] :: ResourceStatistics -> !(Maybe PerformanceStatistics)
[resourceStatisticsNetRxPackets] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetRxBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetRxErrors] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetRxDropped] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetTxPackets] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetTxBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetTxErrors] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetTxDropped] :: ResourceStatistics -> !(Maybe Word64)
[ResourceUsage] :: !SlaveID -> !FrameworkID -> !(Maybe ExecutorID) -> !(Maybe ByteString) -> !(Maybe TaskID) -> !(Maybe ResourceStatistics) -> ResourceUsage
[resourceUsageSlaveId] :: ResourceUsage -> !SlaveID
[resourceUsageFrameworkId] :: ResourceUsage -> !FrameworkID
[resourceUsageExecutorId] :: ResourceUsage -> !(Maybe ExecutorID)
[resourceUsageExecutorName] :: ResourceUsage -> !(Maybe ByteString)
[resourceUsageTaskId] :: ResourceUsage -> !(Maybe TaskID)
[resourceUsageStatistics] :: ResourceUsage -> !(Maybe ResourceStatistics)
[PerformanceStatistics] :: !Double -> !Double -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Double) -> !(Maybe Double) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> PerformanceStatistics
[performanceStatisticsTimestamp] :: PerformanceStatistics -> !Double
[performanceStatisticsDuration] :: PerformanceStatistics -> !Double
[performanceStatisticsCycles] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsStalledCyclesFrontend] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsStalledCyclesBackend] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsInstructions] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsCacheReferences] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsCacheMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBranches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBranchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBusCycles] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsRefCycles] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsCpuClock] :: PerformanceStatistics -> !(Maybe Double)
[performanceStatisticsTaskClock] :: PerformanceStatistics -> !(Maybe Double)
[performanceStatisticsPageFaults] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsMinorFaults] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsMajorFaults] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsContextSwitches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsCpuMigrations] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsAlignmentFaults] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsEmulationFaults] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcacheLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcacheLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcacheStores] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcacheStoreMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcachePrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcachePrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1IcacheLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1IcacheLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1IcachePrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1IcachePrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcStores] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcStoreMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcPrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcPrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbStores] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbStoreMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbPrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbPrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsItlbLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsItlbLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBranchLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBranchLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodeLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodeLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodeStores] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodeStoreMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodePrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodePrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[Credential] :: !ByteString -> !(Maybe ByteString) -> Credential
[credentialPrincipal] :: Credential -> !ByteString
[credentialSecret] :: Credential -> !(Maybe ByteString)
[Resources] :: [Resource] -> Resources
[fromResources] :: Resources -> [Resource]
[EnvironmentVariable] :: !ByteString -> !ByteString -> EnvironmentVariable
[environmentVariableKey] :: EnvironmentVariable -> !ByteString
[environmentVariableValue] :: EnvironmentVariable -> !ByteString
[Environment] :: [(ByteString, ByteString)] -> Environment
[environmentVariables] :: Environment -> [(ByteString, ByteString)]
[Parameter] :: ByteString -> ByteString -> Parameter
[Parameters] :: [Parameter] -> Parameters
[StdString] :: ByteString -> StdString
[fromStdString] :: StdString -> ByteString
[SCALAR] :: ValueType
[RANGES] :: ValueType
[SET] :: ValueType
[TEXT] :: ValueType
[ValueRange] :: Word64 -> Word64 -> ValueRange
[Attribute] :: !ByteString -> !Value -> Attribute
[attributeName] :: Attribute -> !ByteString
[attributeValue] :: Attribute -> !Value
[Executor] :: Ptr Executor -> FunPtr RawExecutorRegistered -> FunPtr RawExecutorReRegistered -> FunPtr RawExecutorDisconnected -> FunPtr RawExecutorLaunchTask -> FunPtr RawExecutorTaskKilled -> FunPtr RawExecutorFrameworkMessage -> FunPtr RawExecutorShutdown -> FunPtr RawExecutorError -> Executor
[executorImpl] :: Executor -> Ptr Executor
[rawExecutorRegistered] :: Executor -> FunPtr RawExecutorRegistered
[rawExecutorReRegistered] :: Executor -> FunPtr RawExecutorReRegistered
[rawExecutorDisconnected] :: Executor -> FunPtr RawExecutorDisconnected
[rawExecutorLaunchTask] :: Executor -> FunPtr RawExecutorLaunchTask
[rawExecutorTaskKilled] :: Executor -> FunPtr RawExecutorTaskKilled
[rawExecutorFrameworkMessage] :: Executor -> FunPtr RawExecutorFrameworkMessage
[rawExecutorShutdown] :: Executor -> FunPtr RawExecutorShutdown
[rawExecutorErrorCallback] :: Executor -> FunPtr RawExecutorError
[ExecutorDriver] :: ExecutorDriverPtr -> ExecutorDriver
[fromExecutorDriver] :: ExecutorDriver -> ExecutorDriverPtr
[Scheduler] :: SchedulerPtr -> FunPtr RawSchedulerRegistered -> FunPtr RawSchedulerReRegistered -> FunPtr RawSchedulerDisconnected -> FunPtr RawSchedulerResourceOffers -> FunPtr RawSchedulerOfferRescinded -> FunPtr RawSchedulerStatusUpdate -> FunPtr RawSchedulerFrameworkMessage -> FunPtr RawSchedulerSlaveLost -> FunPtr RawSchedulerExecutorLost -> FunPtr RawSchedulerError -> Scheduler
[schedulerImpl] :: Scheduler -> SchedulerPtr
[rawSchedulerRegistered] :: Scheduler -> FunPtr RawSchedulerRegistered
[rawSchedulerReRegistered] :: Scheduler -> FunPtr RawSchedulerReRegistered
[rawSchedulerDisconnected] :: Scheduler -> FunPtr RawSchedulerDisconnected
[rawSchedulerResourceOffers] :: Scheduler -> FunPtr RawSchedulerResourceOffers
[rawSchedulerOfferRescinded] :: Scheduler -> FunPtr RawSchedulerOfferRescinded
[rawSchedulerStatusUpdate] :: Scheduler -> FunPtr RawSchedulerStatusUpdate
[rawSchedulerFrameworkMessage] :: Scheduler -> FunPtr RawSchedulerFrameworkMessage
[rawSchedulerSlaveLost] :: Scheduler -> FunPtr RawSchedulerSlaveLost
[rawSchedulerExecutorLost] :: Scheduler -> FunPtr RawSchedulerExecutorLost
[rawSchedulerError] :: Scheduler -> FunPtr RawSchedulerError
[SchedulerDriver] :: SchedulerDriverPtr -> SchedulerDriver
[fromSchedulerDriver] :: SchedulerDriver -> SchedulerDriverPtr
[S#] :: !Int# -> Integer
[Jp#] :: {-# UNPACK #-} !BigNat -> Integer
[Jn#] :: {-# UNPACK #-} !BigNat -> Integer
[BN#] :: ByteArray# -> BigNat
[UserInfo] :: Identifier -> Maybe ByteString -> Maybe ByteString -> UserInfo
[userNick] :: UserInfo -> Identifier
[userName] :: UserInfo -> Maybe ByteString
[userHost] :: UserInfo -> Maybe ByteString
[RawIrcMsg] :: Maybe UTCTime -> Maybe UserInfo -> ByteString -> [ByteString] -> RawIrcMsg
[msgTime] :: RawIrcMsg -> Maybe UTCTime
[msgPrefix] :: RawIrcMsg -> Maybe UserInfo
[msgCommand] :: RawIrcMsg -> ByteString
[msgParams] :: RawIrcMsg -> [ByteString]
[RplWelcome] :: ByteString -> MsgFromServer
[RplYourHost] :: ByteString -> MsgFromServer
[RplCreated] :: ByteString -> MsgFromServer
[RplMyInfo] :: ByteString -> ByteString -> [ByteString] -> MsgFromServer
[RplISupport] :: [(ByteString, ByteString)] -> MsgFromServer
[RplSnoMask] :: ByteString -> MsgFromServer
[RplYourId] :: ByteString -> MsgFromServer
[RplStatsLinkInfo] :: [ByteString] -> MsgFromServer
[RplStatsCommands] :: [ByteString] -> MsgFromServer
[RplStatsCLine] :: [ByteString] -> MsgFromServer
[RplStatsNLine] :: [ByteString] -> MsgFromServer
[RplStatsILine] :: [ByteString] -> MsgFromServer
[RplStatsKLine] :: [ByteString] -> MsgFromServer
[RplStatsQLine] :: [ByteString] -> MsgFromServer
[RplStatsYLine] :: [ByteString] -> MsgFromServer
[RplEndOfStats] :: Char -> MsgFromServer
[RplStatsPLine] :: [ByteString] -> MsgFromServer
[RplUmodeIs] :: ByteString -> [ByteString] -> MsgFromServer
[RplStatsDLine] :: [ByteString] -> MsgFromServer
[RplStatsVLine] :: [ByteString] -> MsgFromServer
[RplStatsLLine] :: [ByteString] -> MsgFromServer
[RplStatsUptime] :: ByteString -> MsgFromServer
[RplStatsOLine] :: [ByteString] -> MsgFromServer
[RplStatsHLine] :: [ByteString] -> MsgFromServer
[RplStatsSLine] :: [ByteString] -> MsgFromServer
[RplStatsPing] :: [ByteString] -> MsgFromServer
[RplStatsXLine] :: [ByteString] -> MsgFromServer
[RplStatsULine] :: [ByteString] -> MsgFromServer
[RplStatsDebug] :: [ByteString] -> MsgFromServer
[RplStatsConn] :: ByteString -> MsgFromServer
[RplLuserClient] :: ByteString -> MsgFromServer
[RplLuserOp] :: ByteString -> MsgFromServer
[RplLuserUnknown] :: ByteString -> MsgFromServer
[RplLuserChannels] :: ByteString -> MsgFromServer
[RplLuserMe] :: ByteString -> MsgFromServer
[RplLuserAdminMe] :: ByteString -> MsgFromServer
[RplLuserAdminLoc1] :: ByteString -> MsgFromServer
[RplLuserAdminLoc2] :: ByteString -> MsgFromServer
[RplLuserAdminEmail] :: ByteString -> MsgFromServer
[RplLoadTooHigh] :: ByteString -> MsgFromServer
[RplLocalUsers] :: [ByteString] -> MsgFromServer
[RplGlobalUsers] :: [ByteString] -> MsgFromServer
[RplPrivs] :: ByteString -> MsgFromServer
[RplWhoisCertFp] :: Identifier -> ByteString -> MsgFromServer
[RplAcceptList] :: Identifier -> MsgFromServer
[RplEndOfAccept] :: MsgFromServer
[RplAway] :: Identifier -> ByteString -> MsgFromServer
[RplUserHost] :: [ByteString] -> MsgFromServer
[RplIsOn] :: [Identifier] -> MsgFromServer
[RplSyntax] :: ByteString -> MsgFromServer
[RplUnAway] :: MsgFromServer
[RplNowAway] :: MsgFromServer
[RplWhoisUser] :: Identifier -> ByteString -> ByteString -> ByteString -> MsgFromServer
[RplWhoisServer] :: Identifier -> ByteString -> ByteString -> MsgFromServer
[RplWhoisOperator] :: Identifier -> ByteString -> MsgFromServer
[RplWhoWasUser] :: Identifier -> ByteString -> ByteString -> ByteString -> MsgFromServer
[RplEndOfWho] :: Identifier -> MsgFromServer
[RplWhoisIdle] :: Identifier -> Integer -> (Maybe UTCTime) -> MsgFromServer
[RplEndOfWhois] :: Identifier -> MsgFromServer
[RplWhoisChannels] :: Identifier -> ByteString -> MsgFromServer
[RplListStart] :: MsgFromServer
[RplList] :: Identifier -> Integer -> ByteString -> MsgFromServer
[RplListEnd] :: MsgFromServer
[RplChannelModeIs] :: Identifier -> ByteString -> [ByteString] -> MsgFromServer
[RplNoTopicSet] :: Identifier -> MsgFromServer
[RplTopic] :: Identifier -> ByteString -> MsgFromServer
[RplChannelUrl] :: Identifier -> ByteString -> MsgFromServer
[RplCreationTime] :: Identifier -> UTCTime -> MsgFromServer
[RplWhoisAccount] :: Identifier -> ByteString -> MsgFromServer
[RplTopicWhoTime] :: Identifier -> ByteString -> UTCTime -> MsgFromServer
[RplInviting] :: Identifier -> Identifier -> MsgFromServer
[RplInviteList] :: Identifier -> ByteString -> ByteString -> UTCTime -> MsgFromServer
[RplEndOfInviteList] :: Identifier -> MsgFromServer
[RplExceptionList] :: Identifier -> ByteString -> ByteString -> UTCTime -> MsgFromServer
[RplEndOfExceptionList] :: Identifier -> MsgFromServer
[RplVersion] :: [ByteString] -> MsgFromServer
[RplWhoReply] :: Identifier -> ByteString -> ByteString -> ByteString -> Identifier -> ByteString -> ByteString -> MsgFromServer
[RplNameReply] :: ChannelType -> Identifier -> [ByteString] -> MsgFromServer
[RplLinks] :: ByteString -> ByteString -> ByteString -> MsgFromServer
[RplEndOfLinks] :: ByteString -> MsgFromServer
[RplEndOfNames] :: Identifier -> MsgFromServer
[RplBanList] :: Identifier -> ByteString -> ByteString -> UTCTime -> MsgFromServer
[RplEndOfBanList] :: Identifier -> MsgFromServer
[RplEndOfWhoWas] :: Identifier -> MsgFromServer
[RplMotd] :: ByteString -> MsgFromServer
[RplMotdStart] :: MsgFromServer
[RplEndOfMotd] :: MsgFromServer
[RplTime] :: ByteString -> ByteString -> MsgFromServer
[RplInfo] :: ByteString -> MsgFromServer
[RplEndOfInfo] :: MsgFromServer
[RplWhoisHost] :: Identifier -> ByteString -> MsgFromServer
[RplWhoisModes] :: Identifier -> ByteString -> [ByteString] -> MsgFromServer
[RplYoureOper] :: ByteString -> MsgFromServer
[RplHostHidden] :: ByteString -> MsgFromServer
[Err] :: Identifier -> IrcError -> MsgFromServer
[RplWhoisSecure] :: Identifier -> MsgFromServer
[RplHelpStart] :: ByteString -> ByteString -> MsgFromServer
[RplHelp] :: ByteString -> ByteString -> MsgFromServer
[RplEndOfHelp] :: ByteString -> MsgFromServer
[RplKnock] :: Identifier -> UserInfo -> MsgFromServer
[RplKnockDelivered] :: Identifier -> MsgFromServer
[RplTargNotify] :: Identifier -> MsgFromServer
[RplUmodeGMsg] :: Identifier -> ByteString -> MsgFromServer
[RplQuietList] :: Identifier -> Char -> ByteString -> ByteString -> UTCTime -> MsgFromServer
[RplEndOfQuietList] :: Identifier -> Char -> MsgFromServer
[RplLoggedIn] :: ByteString -> MsgFromServer
[RplLoggedOut] :: MsgFromServer
[RplNickLocked] :: MsgFromServer
[RplSaslSuccess] :: MsgFromServer
[RplSaslFail] :: MsgFromServer
[RplSaslTooLong] :: MsgFromServer
[RplSaslAborted] :: MsgFromServer
[RplSaslAlready] :: MsgFromServer
[RplSaslMechs] :: ByteString -> MsgFromServer
[Away] :: UserInfo -> (Maybe ByteString) -> MsgFromServer
[Ping] :: ByteString -> MsgFromServer
[Pong] :: ByteString -> (Maybe ByteString) -> MsgFromServer
[Notice] :: UserInfo -> Identifier -> ByteString -> MsgFromServer
[Topic] :: UserInfo -> Identifier -> ByteString -> MsgFromServer
[PrivMsg] :: UserInfo -> Identifier -> ByteString -> MsgFromServer
[ExtJoin] :: UserInfo -> Identifier -> (Maybe ByteString) -> ByteString -> MsgFromServer
[Join] :: UserInfo -> Identifier -> MsgFromServer
[Nick] :: UserInfo -> Identifier -> MsgFromServer
[Mode] :: UserInfo -> Identifier -> [ByteString] -> MsgFromServer
[Quit] :: UserInfo -> ByteString -> MsgFromServer
[Cap] :: ByteString -> ByteString -> MsgFromServer
[Kick] :: UserInfo -> Identifier -> Identifier -> ByteString -> MsgFromServer
[Part] :: UserInfo -> Identifier -> ByteString -> MsgFromServer
[Invite] :: UserInfo -> Identifier -> MsgFromServer
[Error] :: ByteString -> MsgFromServer
[Authenticate] :: ByteString -> MsgFromServer
[Account] :: UserInfo -> (Maybe ByteString) -> MsgFromServer
[ErrNoSuchNick] :: IrcError
[ErrNoSuchServer] :: ByteString -> IrcError
[ErrNoSuchChannel] :: IrcError
[ErrCannotSendToChan] :: IrcError
[ErrTooManyChannels] :: IrcError
[ErrWasNoSuchNick] :: IrcError
[ErrTooManyTargets] :: IrcError
[ErrNoOrigin] :: IrcError
[ErrNoRecipient] :: IrcError
[ErrNoTextToSend] :: IrcError
[ErrUnknownCommand] :: ByteString -> IrcError
[ErrNoMotd] :: IrcError
[ErrNoAdminInfo] :: ByteString -> IrcError
[ErrNoNicknameGiven] :: IrcError
[ErrErroneousNickname] :: ByteString -> IrcError
[ErrNicknameInUse] :: Identifier -> IrcError
[ErrBanNickChange] :: IrcError
[ErrUnavailResource] :: IrcError
[ErrNickTooFast] :: IrcError
[ErrServicesDown] :: IrcError
[ErrUserNotInChannel] :: Identifier -> IrcError
[ErrNotOnChannel] :: IrcError
[ErrUserOnChannel] :: Identifier -> IrcError
[ErrNotRegistered] :: IrcError
[ErrAcceptFull] :: IrcError
[ErrAcceptExist] :: IrcError
[ErrAcceptNot] :: IrcError
[ErrNeedMoreParams] :: ByteString -> IrcError
[ErrAlreadyRegistered] :: IrcError
[ErrNoPermForHost] :: IrcError
[ErrPasswordMismatch] :: IrcError
[ErrYoureBannedCreep] :: IrcError
[ErrLinkChannel] :: Identifier -> IrcError
[ErrChannelFull] :: IrcError
[ErrUnknownMode] :: Char -> IrcError
[ErrInviteOnlyChan] :: IrcError
[ErrBannedFromChan] :: IrcError
[ErrBadChannelKey] :: IrcError
[ErrNeedReggedNick] :: IrcError
[ErrBanListFull] :: Char -> IrcError
[ErrBadChanName] :: ByteString -> IrcError
[ErrThrottle] :: IrcError
[ErrNoPrivileges] :: IrcError
[ErrChanOpPrivsNeeded] :: IrcError
[ErrCantKillServer] :: IrcError
[ErrIsChanService] :: Identifier -> IrcError
[ErrNoNonReg] :: IrcError
[ErrVoiceNeeded] :: IrcError
[ErrNoOperHost] :: IrcError
[ErrOwnMode] :: IrcError
[ErrUnknownUmodeFlag] :: Char -> IrcError
[ErrUsersDontMatch] :: IrcError
[ErrHelpNotFound] :: ByteString -> IrcError
[ErrTooManyKnocks] :: IrcError
[ErrChanOpen] :: IrcError
[ErrKnockOnChan] :: IrcError
[ErrTargUmodeG] :: IrcError
[ErrNoPrivs] :: ByteString -> IrcError
[ErrMlockRestricted] :: Char -> ByteString -> IrcError
[IrcMessage] :: !IrcMessageType -> !UserInfo -> !UTCTime -> !Bool -> String -> String -> IrcMessage
[_mesgType] :: IrcMessage -> !IrcMessageType
[_mesgSender] :: IrcMessage -> !UserInfo
[_mesgStamp] :: IrcMessage -> !UTCTime
[_mesgMe] :: IrcMessage -> !Bool
[_mesgModes] :: IrcMessage -> String
[_mesgStatus] :: IrcMessage -> String
[PrivMsgType] :: Text -> IrcMessageType
[NoticeMsgType] :: Text -> IrcMessageType
[ActionMsgType] :: Text -> IrcMessageType
[AwayMsgType] :: Text -> IrcMessageType
[JoinMsgType] :: IrcMessageType
[KickMsgType] :: Identifier -> Text -> IrcMessageType
[PartMsgType] :: Text -> IrcMessageType
[QuitMsgType] :: Text -> IrcMessageType
[NickMsgType] :: Identifier -> IrcMessageType
[TopicMsgType] :: Text -> IrcMessageType
[ErrorMsgType] :: Text -> IrcMessageType
[ErrMsgType] :: IrcError -> IrcMessageType
[ModeMsgType] :: Bool -> Char -> ByteString -> IrcMessageType
[InviteMsgType] :: IrcMessageType
[KnockMsgType] :: IrcMessageType
[CallerIdMsgType] :: IrcMessageType
[CallerIdDeliveredMsgType] :: IrcMessageType
[CtcpReqMsgType] :: ByteString -> ByteString -> IrcMessageType
[CtcpRspMsgType] :: ByteString -> ByteString -> IrcMessageType
[IrcConnection] :: !Identifier -> !(Map Identifier IrcChannel) -> Maybe ByteString -> [Char] -> [Char] -> !Bool -> !Int -> Maybe Char -> Maybe Char -> !(Map Identifier IrcUser) -> !ModeTypes -> !ModeTypes -> !Int -> !Int -> Maybe (ByteString, ByteString) -> Maybe (ByteString, ByteString) -> !ByteString -> !ByteString -> !Phase -> IrcConnection
[_connNick] :: IrcConnection -> !Identifier
[_connChannels] :: IrcConnection -> !(Map Identifier IrcChannel)
[_connId] :: IrcConnection -> Maybe ByteString
[_connChanTypes] :: IrcConnection -> [Char]
[_connStatusMsg] :: IrcConnection -> [Char]
[_connKnock] :: IrcConnection -> !Bool
[_connNickLen] :: IrcConnection -> !Int
[_connExcepts] :: IrcConnection -> Maybe Char
[_connInvex] :: IrcConnection -> Maybe Char
[_connUsers] :: IrcConnection -> !(Map Identifier IrcUser)
[_connChanModeTypes] :: IrcConnection -> !ModeTypes
[_connUserModeTypes] :: IrcConnection -> !ModeTypes
[_connModes] :: IrcConnection -> !Int
[_connTopicLen] :: IrcConnection -> !Int
[_connMyInfo] :: IrcConnection -> Maybe (ByteString, ByteString)
[_connSasl] :: IrcConnection -> Maybe (ByteString, ByteString)
[_connUmode] :: IrcConnection -> !ByteString
[_connSnoMask] :: IrcConnection -> !ByteString
[_connPhase] :: IrcConnection -> !Phase
[RegistrationPhase] :: Phase
[ActivePhase] :: Phase
[SaslPhase] :: Phase
[IrcChannel] :: Maybe (Maybe (Text, ByteString, UTCTime)) -> !(Map Identifier String) -> Maybe (Map Char ByteString) -> Maybe UTCTime -> Map Char [IrcMaskEntry] -> Maybe ByteString -> IrcChannel
[_chanTopic] :: IrcChannel -> Maybe (Maybe (Text, ByteString, UTCTime))
[_chanUsers] :: IrcChannel -> !(Map Identifier String)
[_chanModes] :: IrcChannel -> Maybe (Map Char ByteString)
[_chanCreation] :: IrcChannel -> Maybe UTCTime
[_chanMaskLists] :: IrcChannel -> Map Char [IrcMaskEntry]
[_chanUrl] :: IrcChannel -> Maybe ByteString
[ModeTypes] :: String -> String -> String -> String -> [(Char, Char)] -> ModeTypes
[_modesLists] :: ModeTypes -> String
[_modesAlwaysArg] :: ModeTypes -> String
[_modesSetArg] :: ModeTypes -> String
[_modesNeverArg] :: ModeTypes -> String
[_modesPrefixModes] :: ModeTypes -> [(Char, Char)]
[IrcMaskEntry] :: ByteString -> ByteString -> UTCTime -> IrcMaskEntry
[_maskEntryMask] :: IrcMaskEntry -> ByteString
[_maskEntryWho] :: IrcMaskEntry -> ByteString
[_maskEntryStamp] :: IrcMaskEntry -> UTCTime
[IrcUser] :: !Bool -> !(Maybe ByteString) -> !(Maybe ByteString) -> IrcUser
[_usrAway] :: IrcUser -> !Bool
[_usrAccount] :: IrcUser -> !(Maybe ByteString)
[_usrHost] :: IrcUser -> !(Maybe ByteString)
[Expect] :: (MsgFromServer -> r) -> LogicOp r
[Emit] :: ByteString -> r -> LogicOp r
[Record] :: Identifier -> IrcMessage -> r -> LogicOp r
[RowMajor] :: Order
[ColumnMajor] :: Order
[Trans] :: Transpose
[NoTrans] :: Transpose
[Up] :: UpLo
[Lo] :: UpLo
[CblasRowMajor] :: CblasOrder
[CblasColMajor] :: CblasOrder
[CblasNoTrans] :: CblasTranspose
[CblasTrans] :: CblasTranspose
[CblasConjTrans] :: CblasTranspose
[CblasUpper] :: CblasUplo
[CblasLower] :: CblasUplo
[CblasNonUnit] :: CblasDiag
[CblasUnit] :: CblasDiag
[CblasLeft] :: CblasSide
[CblasRight] :: CblasSide
[Vector] :: !(ForeignPtr e) -> !Index -> !Index -> Vector e
[vecP] :: Vector e -> !(ForeignPtr e)
[vecInc] :: Vector e -> !Index
[vecLength] :: Vector e -> !Index
[RowMajor] :: Order
[ColumnMajor] :: Order
[Trans] :: Transpose
[NoTrans] :: Transpose
[SVD] :: Maybe (mat e) -> Maybe (mat e) -> [FieldScalar e] -> SVD mat e
[svdU] :: SVD mat e -> Maybe (mat e)
[svdVT] :: SVD mat e -> Maybe (mat e)
[svdS] :: SVD mat e -> [FieldScalar e]
[SVDFull] :: SVDOpt
[SVDThin] :: SVDOpt
[SVDNone] :: SVDOpt
[SVDU] :: SVDOpt -> SVDU
[SVDVT] :: SVDOpt -> SVDVT
[Focusing] :: m (s, a) -> Focusing m s a
[unfocusing] :: Focusing m s a -> m (s, a)
[FocusingWith] :: m (s, a, w) -> FocusingWith w m s a
[unfocusingWith] :: FocusingWith w m s a -> m (s, a, w)
[FocusingPlus] :: k (s, w) a -> FocusingPlus w k s a
[unfocusingPlus] :: FocusingPlus w k s a -> k (s, w) a
[FocusingOn] :: k (f s) a -> FocusingOn f k s a
[unfocusingOn] :: FocusingOn f k s a -> k (f s) a
[FocusingMay] :: k (May s) a -> FocusingMay k s a
[unfocusingMay] :: FocusingMay k s a -> k (May s) a
[May] :: Maybe a -> May a
[getMay] :: May a -> Maybe a
[FocusingErr] :: k (Err e s) a -> FocusingErr e k s a
[unfocusingErr] :: FocusingErr e k s a -> k (Err e s) a
[Err] :: Either e a -> Err e a
[getErr] :: Err e a -> Either e a
[Effect] :: m r -> Effect m r a
[getEffect] :: Effect m r a -> m r
[EffectRWS] :: (st -> m (s, st, w)) -> EffectRWS w st m s a
[getEffectRWS] :: EffectRWS w st m s a -> st -> m (s, st, w)
[Market] :: (b -> t) -> (s -> Either t a) -> Market a b s t
[Exchange] :: (s -> a) -> (b -> t) -> Exchange a b s t
[Two] :: {-# UNPACK #-} !Word -> !(Level i a) -> !(Level i a) -> Level i a
[One] :: i -> a -> Level i a
[Zero] :: Level i a
[Deepening] :: (forall r. Int -> (Level i a -> Bool -> r) -> r) -> Deepening i a
[runDeepening] :: Deepening i a -> forall r. Int -> (Level i a -> Bool -> r) -> r
[Flows] :: ([Level i b] -> a) -> Flows i b a
[runFlows] :: Flows i b a -> [Level i b] -> a
[AlongsideLeft] :: f (a, b) -> AlongsideLeft f b a
[getAlongsideLeft] :: AlongsideLeft f b a -> f (a, b)
[AlongsideRight] :: f (a, b) -> AlongsideRight f a b
[getAlongsideRight] :: AlongsideRight f a b -> f (a, b)
[Indexed] :: (i -> a -> b) -> Indexed i a b
[runIndexed] :: Indexed i a b -> i -> a -> b
[Indexing] :: (Int -> (Int, f a)) -> Indexing f a
[runIndexing] :: Indexing f a -> Int -> (Int, f a)
[Indexing64] :: (Int64 -> (Int64, f a)) -> Indexing64 f a
[runIndexing64] :: Indexing64 f a -> Int64 -> (Int64, f a)
[Context] :: (b -> t) -> a -> Context a b t
[Pretext] :: (forall f. Functor f => p a (f b) -> f t) -> Pretext p a b t
[runPretext] :: Pretext p a b t -> forall f. Functor f => p a (f b) -> f t
[PretextT] :: (forall f. Functor f => p a (f b) -> f t) -> PretextT p a b t
[runPretextT] :: PretextT p a b t -> forall f. Functor f => p a (f b) -> f t
[Bazaar] :: (forall f. Applicative f => p a (f b) -> f t) -> Bazaar p a b t
[runBazaar] :: Bazaar p a b t -> forall f. Applicative f => p a (f b) -> f t
[BazaarT] :: (forall f. Applicative f => p a (f b) -> f t) -> BazaarT p a b t
[runBazaarT] :: BazaarT p a b t -> forall f. Applicative f => p a (f b) -> f t
[Bazaar1] :: (forall f. Apply f => p a (f b) -> f t) -> Bazaar1 p a b t
[runBazaar1] :: Bazaar1 p a b t -> forall f. Apply f => p a (f b) -> f t
[BazaarT1] :: (forall f. Apply f => p a (f b) -> f t) -> BazaarT1 p a b t
[runBazaarT1] :: BazaarT1 p a b t -> forall f. Apply f => p a (f b) -> f t
[MagmaAp] :: Magma i (x -> y) b a -> Magma i x b a -> Magma i y b a
[MagmaPure] :: x -> Magma i x b a
[MagmaFmap] :: (x -> y) -> Magma i x b a -> Magma i y b a
[Magma] :: i -> a -> Magma i b b a
[Molten] :: Magma i t b a -> Molten i a b t
[runMolten] :: Molten i a b t -> Magma i t b a
[Mafic] :: Int -> (Int -> Magma Int t b a) -> Mafic a b t
[TakingWhile] :: Bool -> t -> (Bool -> Magma () t b (Corep p a)) -> TakingWhile p a b t
[Folding] :: f a -> Folding f a
[getFolding] :: Folding f a -> f a
[Traversed] :: f a -> Traversed a f
[getTraversed] :: Traversed a f -> f a
[Sequenced] :: m a -> Sequenced a m
[getSequenced] :: Sequenced a m -> m a
[NoMax] :: Max a
[Max] :: a -> Max a
[NoMin] :: Min a
[Min] :: a -> Min a
[LPure] :: Leftmost a
[LLeaf] :: a -> Leftmost a
[LStep] :: (Leftmost a) -> Leftmost a
[RPure] :: Rightmost a
[RLeaf] :: a -> Rightmost a
[RStep] :: (Rightmost a) -> Rightmost a
[ReifiedMonoid] :: (a -> a -> a) -> a -> ReifiedMonoid a
[reifiedMappend] :: ReifiedMonoid a -> a -> a -> a
[reifiedMempty] :: ReifiedMonoid a -> a
[M] :: a -> M a s
[Identity] :: a -> Identity a
[runIdentity] :: Identity a -> a
[Context] :: (b -> t) -> a -> Context a b t
[Const] :: a -> Const a b
[getConst] :: Const a b -> a
[Bazaar] :: (forall f. Applicative f => p a (f b) -> f t) -> Bazaar p a b t
[runBazaar] :: Bazaar p a b t -> forall f. Applicative f => p a (f b) -> f t
[Bazaar1] :: (forall f. Apply f => p a (f b) -> f t) -> Bazaar1 p a b t
[runBazaar1] :: Bazaar1 p a b t -> forall f. Apply f => p a (f b) -> f t
[Indexed] :: (i -> a -> b) -> Indexed i a b
[runIndexed] :: Indexed i a b -> i -> a -> b
[Lens] :: Lens s t a b -> ReifiedLens s t a b
[runLens] :: ReifiedLens s t a b -> Lens s t a b
[IndexedLens] :: IndexedLens i s t a b -> ReifiedIndexedLens i s t a b
[runIndexedLens] :: ReifiedIndexedLens i s t a b -> IndexedLens i s t a b
[IndexedTraversal] :: IndexedTraversal i s t a b -> ReifiedIndexedTraversal i s t a b
[runIndexedTraversal] :: ReifiedIndexedTraversal i s t a b -> IndexedTraversal i s t a b
[Traversal] :: Traversal s t a b -> ReifiedTraversal s t a b
[runTraversal] :: ReifiedTraversal s t a b -> Traversal s t a b
[Getter] :: Getter s a -> ReifiedGetter s a
[runGetter] :: ReifiedGetter s a -> Getter s a
[IndexedGetter] :: IndexedGetter i s a -> ReifiedIndexedGetter i s a
[runIndexedGetter] :: ReifiedIndexedGetter i s a -> IndexedGetter i s a
[Fold] :: Fold s a -> ReifiedFold s a
[runFold] :: ReifiedFold s a -> Fold s a
[IndexedFold] :: IndexedFold i s a -> ReifiedIndexedFold i s a
[runIndexedFold] :: ReifiedIndexedFold i s a -> IndexedFold i s a
[Setter] :: Setter s t a b -> ReifiedSetter s t a b
[runSetter] :: ReifiedSetter s t a b -> Setter s t a b
[IndexedSetter] :: IndexedSetter i s t a b -> ReifiedIndexedSetter i s t a b
[runIndexedSetter] :: ReifiedIndexedSetter i s t a b -> IndexedSetter i s t a b
[Iso] :: Iso s t a b -> ReifiedIso s t a b
[runIso] :: ReifiedIso s t a b -> Iso s t a b
[Prism] :: Prism s t a b -> ReifiedPrism s t a b
[runPrism] :: ReifiedPrism s t a b -> Prism s t a b
[Identical] :: Identical a b a b
[BD] :: !Int -> [a] -> !Int -> [a] -> Deque a
[LensRules] :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> (Name -> [Name] -> Name -> [DefName]) -> (Name -> Maybe (Name, Name)) -> LensRules
[_simpleLenses] :: LensRules -> Bool
[_generateSigs] :: LensRules -> Bool
[_generateClasses] :: LensRules -> Bool
[_allowIsos] :: LensRules -> Bool
[_allowUpdates] :: LensRules -> Bool
[_lazyPatterns] :: LensRules -> Bool
[_fieldToDef] :: LensRules -> Name -> [Name] -> Name -> [DefName]
[_classyLenses] :: LensRules -> Name -> Maybe (Name, Name)
[TopName] :: Name -> DefName
[MethodName] :: Name -> Name -> DefName
[TopName] :: Name -> DefName
[MethodName] :: Name -> Name -> DefName
[HandlingException] :: HandlingException
[Handler] :: (e -> Maybe a) -> (a -> m r) -> Handler e m r
[D0L] :: (a -> m a) -> m a -> D0L m a
[rules] :: D0L m a -> a -> m a
[axiom] :: D0L m a -> m a
[E] :: (forall x. Lens' (t x) x) -> E t
[el] :: E t -> forall x. Lens' (t x) x
[V0] :: V0 a
[V1] :: a -> V1 a
[V2] :: !a -> !a -> V2 a
[V3] :: !a -> !a -> !a -> V3 a
[V4] :: !a -> !a -> !a -> !a -> V4 a
[Plucker] :: !a -> !a -> !a -> !a -> !a -> !a -> Plucker a
[Coplanar] :: LinePass
[Clockwise] :: LinePass
[Counterclockwise] :: LinePass
[V] :: Vector a -> V n a
[toVector] :: V n a -> Vector a
[Line] :: Plucker a -> Coincides a
[Ray] :: Plucker a -> Coincides a
[Quaternion] :: !a -> {-# UNPACK #-} !(V3 a) -> Quaternion a
[P] :: (f a) -> Point f a
[Covector] :: ((a -> r) -> r) -> Covector r a
[runCovector] :: Covector r a -> (a -> r) -> r
[EVar] :: String -> LinAst
[ELit] :: Rational -> LinAst
[ECoeff] :: LinAst -> Rational -> LinAst
[EAdd] :: LinAst -> LinAst -> LinAst
[LinVar] :: String -> Rational -> LinVar
[varName] :: LinVar -> String
[varCoeff] :: LinVar -> Rational
[LinExpr] :: [LinVar] -> Rational -> LinExpr
[exprVars] :: LinExpr -> [LinVar]
[exprConst] :: LinExpr -> Rational
[Equ] :: LinExpr -> LinExpr -> Ineq
[Lte] :: LinExpr -> LinExpr -> Ineq
[EquStd] :: [LinVar] -> Rational -> IneqStdForm
[LteStd] :: [LinVar] -> Rational -> IneqStdForm
[GteStd] :: [LinVar] -> Rational -> IneqStdForm
[TLamb] :: ExprTokens
[TArrow] :: ExprTokens
[TIdent] :: String -> ExprTokens
[TGroup] :: [ExprTokens] -> ExprTokens
[TLParen] :: ExprTokens
[TRParen] :: ExprTokens
[TokenState] :: String -> TokenState
[between] :: TokenState -> String
[EVar] :: ExprVar -> Expr
[EApp] :: Expr -> Expr -> Expr
[EAbs] :: ExprVar -> Expr -> Expr
[ELet] :: ExprVar -> Expr -> Expr -> Expr
[EText] :: [Span] -> Expr
[EConc] :: Expr -> Expr -> Expr
[ParseState] :: Bool -> Bool -> Maybe Expr -> ParseState
[inLambdaDec] :: ParseState -> Bool
[isFreshScope] :: ParseState -> Bool
[exprSoFar] :: ParseState -> Maybe Expr
[TVar] :: TypeVar -> Type
[TFun] :: Type -> Type -> Type
[TText] :: Type
[Prenex] :: [TypeVar] -> Type -> Prenex
[Context] :: (Map ExprVar Prenex) -> Context
[TIState] :: Int -> Subst TypeVar Type -> TIState
[tiSupply] :: TIState -> Int
[tiSubst] :: TIState -> Subst TypeVar Type
[ErrorT] :: m (Either e a) -> ErrorT e a
[runErrorT] :: ErrorT e a -> m (Either e a)
[ExceptT] :: m (Either e a) -> ExceptT e a
[ListT] :: m [a] -> ListT a
[runListT] :: ListT a -> m [a]
[RWST] :: (r -> s -> m (a, s, w)) -> RWST r w s a
[runRWST] :: RWST r w s a -> r -> s -> m (a, s, w)
[ReaderT] :: (r -> m a) -> ReaderT r a
[runReaderT] :: ReaderT r a -> r -> m a
[RWST] :: (r -> s -> m (a, s, w)) -> RWST r w s a
[runRWST] :: RWST r w s a -> r -> s -> m (a, s, w)
[StateT] :: (s -> m (a, s)) -> StateT s a
[runStateT] :: StateT s a -> s -> m (a, s)
[StateT] :: (s -> m (a, s)) -> StateT s a
[runStateT] :: StateT s a -> s -> m (a, s)
[WriterT] :: m (a, w) -> WriterT w a
[runWriterT] :: WriterT w a -> m (a, w)
[WriterT] :: m (a, w) -> WriterT w a
[runWriterT] :: WriterT w a -> m (a, w)
[ContT] :: ((a -> m r) -> m r) -> ContT r a
[runContT] :: ContT r a -> (a -> m r) -> m r
[DynValue] :: !Dynamic -> !Int -> DynValue
[dynValue] :: DynValue -> !Dynamic
[dynSize] :: DynValue -> !Int
[LRUCache] :: !Int -> !Int -> !NominalDiffTime -> !Int -> !(IntPSQ UTCTime DynValue) -> LRUCache
[minCapacity] :: LRUCache -> !Int
[maxCapacity] :: LRUCache -> !Int
[maxAge] :: LRUCache -> !NominalDiffTime
[size] :: LRUCache -> !Int
[queue] :: LRUCache -> !(IntPSQ UTCTime DynValue)
[Reference] :: IxKey -> Reference a
[unReference] :: Reference a -> IxKey
[Sortable] :: a -> Sortable a
[unSortable] :: Sortable a -> a
[Unique] :: a -> Unique a
[unUnique] :: Unique a -> a
[Indexables] :: [(String, DocumentKey)] -> [(String, SortableKey)] -> [(String, UniqueKey)] -> Indexables
[ixReferences] :: Indexables -> [(String, DocumentKey)]
[ixSortables] :: Indexables -> [(String, SortableKey)]
[ixUniques] :: Indexables -> [(String, UniqueKey)]
[IxKey] :: Int -> IxKey
[unIxKey] :: IxKey -> Int
[Property] :: (PropertyKey, String) -> Property a
[unProperty] :: Property a -> (PropertyKey, String)
[DateTime] :: UTCTime -> DateTime
[unDateTime] :: DateTime -> UTCTime
[LogParseError] :: String -> DatabaseError
[DataParseError] :: DocAddress -> DocSize -> String -> DatabaseError
[IdAllocationError] :: String -> DatabaseError
[DataAllocationError] :: DocSize -> (Maybe DocSize) -> String -> DatabaseError
[Pending] :: LogRecord -> TransRecord
[Completed] :: TransactionId -> TransRecord
[LogRecord] :: !TransactionId -> !DocumentKey -> ![(PropertyKey, DocumentKey)] -> ![(PropertyKey, SortableKey)] -> ![(PropertyKey, UniqueKey)] -> !DocAddress -> !DocSize -> !Bool -> LogRecord
[recTransactionId] :: LogRecord -> !TransactionId
[recDocumentKey] :: LogRecord -> !DocumentKey
[recReferences] :: LogRecord -> ![(PropertyKey, DocumentKey)]
[recSortables] :: LogRecord -> ![(PropertyKey, SortableKey)]
[recUniques] :: LogRecord -> ![(PropertyKey, UniqueKey)]
[recAddress] :: LogRecord -> !DocAddress
[recSize] :: LogRecord -> !DocSize
[recDeleted] :: LogRecord -> !Bool
[FileLogState] :: FileHandle -> DocAddress -> DocSize -> FileLogState
[flogHandle] :: FileLogState -> FileHandle
[flogPos] :: FileLogState -> DocAddress
[flogSize] :: FileLogState -> DocSize
[Handle] :: DBState l -> Handle l
[unHandle] :: Handle l -> DBState l
[DBState] :: DbPath -> DbPath -> Int -> MVar (MasterState l) -> MVar (DataState l) -> MVar Bool -> MVar GCState -> DBState l
[logDbPath] :: DBState l -> DbPath
[dataDbPath] :: DBState l -> DbPath
[commitDelay] :: DBState l -> Int
[masterState] :: DBState l -> MVar (MasterState l)
[dataState] :: DBState l -> MVar (DataState l)
[commitSgn] :: DBState l -> MVar Bool
[gcState] :: DBState l -> MVar GCState
[MasterState] :: !l -> !TransactionId -> !IdSupply -> !Bool -> !GapsIndex -> !PendingIndex -> !CompletedIndex -> !MainIndex -> !UniqueIndex -> !SortIndex -> !FilterIndex -> MasterState l
[logState] :: MasterState l -> !l
[topTid] :: MasterState l -> !TransactionId
[idSupply] :: MasterState l -> !IdSupply
[keepTrans] :: MasterState l -> !Bool
[gaps] :: MasterState l -> !GapsIndex
[logPend] :: MasterState l -> !PendingIndex
[logComp] :: MasterState l -> !CompletedIndex
[mainIdx] :: MasterState l -> !MainIndex
[unqIdx] :: MasterState l -> !UniqueIndex
[sortIdx] :: MasterState l -> !SortIndex
[refIdx] :: MasterState l -> !FilterIndex
[DataState] :: !(DataHandleOf l) -> !LRUCache -> DataState l
[dataHandle] :: DataState l -> !(DataHandleOf l)
[dataCache] :: DataState l -> !LRUCache
[IdleGC] :: GCState
[PerformGC] :: GCState
[KillGC] :: GCState
[Transaction] :: StateT (TransactionState l) m a -> Transaction l m a
[unTransaction] :: Transaction l m a -> StateT (TransactionState l) m a
[TransactionState] :: !(Handle l) -> !TransactionId -> ![DocumentKey] -> ![(LogRecord, ByteString)] -> TransactionState l
[transHandle] :: TransactionState l -> !(Handle l)
[transId] :: TransactionState l -> !TransactionId
[transReadList] :: TransactionState l -> ![DocumentKey]
[transUpdateList] :: TransactionState l -> ![(LogRecord, ByteString)]
[AbortUnique] :: String -> TransactionAbort
[AbortConflict] :: String -> TransactionAbort
[AbortDelete] :: String -> TransactionAbort
[AbortUnique] :: String -> TransactionAbort
[AbortConflict] :: String -> TransactionAbort
[AbortDelete] :: String -> TransactionAbort
[SortAsc] :: SortOrder
[SortDesc] :: SortOrder
[Url] :: Scheme -> Host -> Path -> Query -> Url
[Http] :: Scheme
[Https] :: Scheme
[:=] :: Text -> EitherUrlChunk Nothing
[:~] :: (Text, Parser r) -> EitherUrlChunk (Just r)
[:*] :: (Text, Regex) -> EitherUrlChunk (Just [String])
[Cons] :: EitherUrlChunk mx -> UrlChunks xs -> UrlChunks (mx : xs)
[Root] :: UrlChunks []
[Get] :: Verb
[Post] :: Verb
[Put] :: Verb
[Delete] :: Verb
[Verbs] :: Map Verb (Maybe (ByteString -> m (), Maybe BodyLength), Either r (Request -> r)) -> Verbs m r
[unVerbs] :: Verbs m r -> Map Verb (Maybe (ByteString -> m (), Maybe BodyLength), Either r (Request -> r))
[VerbListenerT] :: WriterT (Verbs m r) m a -> VerbListenerT r m a
[runVerbListenerT] :: VerbListenerT r m a -> WriterT (Verbs m r) m a
[Html] :: FileExt
[Css] :: FileExt
[JavaScript] :: FileExt
[Json] :: FileExt
[Text] :: FileExt
[FileExts] :: Map FileExt a -> FileExts a
[unFileExts] :: FileExts a -> Map FileExt a
[FileExtListenerT] :: WriterT (FileExts r) m a -> FileExtListenerT r m a
[runFileExtListenerT] :: FileExtListenerT r m a -> WriterT (FileExts r) m a
[HandlerT] :: WriterT (RUPTrie Text x, RUPTrie Text x) m a -> HandlerT x m a
[runHandler] :: HandlerT x m a -> WriterT (RUPTrie Text x, RUPTrie Text x) m a
[Z] :: Nat
[S] :: Nat -> Nat
[Pos] :: Sign
[Neg] :: Sign
[Whole] :: Nat -> Sign -> Whole
[M] :: (Continued a) -> Continued a
[:|] :: a -> (Continued a) -> Continued a
[E] :: Continued a
[M] :: (Continued a) -> Continued a
[:|] :: a -> (Continued a) -> Continued a
[E] :: Continued a
[Z] :: Nat
[S] :: Nat -> Nat
[Whole] :: Nat -> Sign -> Whole
[CURRENT] :: LockAllFlags
[FUTURE] :: LockAllFlags
[SivalInt] :: Int -> Sigval
[Sigevent] :: Sigval -> Signal -> Int -> FunPtr (Sigval -> IO ()) -> Ptr Char -> Sigevent
[sigevVal] :: Sigevent -> Sigval
[sigevSigno] :: Sigevent -> Signal
[sigevNotify] :: Sigevent -> Int
[sigevFunction] :: Sigevent -> FunPtr (Sigval -> IO ())
[sigevAttribute] :: Sigevent -> Ptr Char
[TimeSpec] :: Int -> Int -> TimeSpec
[tvSec] :: TimeSpec -> Int
[tvNsec] :: TimeSpec -> Int
[ItimerSpec] :: TimeSpec -> TimeSpec -> ItimerSpec
[itInterval] :: ItimerSpec -> TimeSpec
[itValue] :: ItimerSpec -> TimeSpec
[SchedParam] :: Int -> SchedParam
[schedPriority] :: SchedParam -> Int
[Clock_Realtime] :: ClockId
[Clock_Monotonic] :: ClockId
[Clock_Process_CPUTime_ID] :: ClockId
[Clock_Thread_CPUTime_ID] :: ClockId
[Timer_Abstime] :: SetTimeFlag
[DSync] :: SyncOp
[Sync] :: SyncOp
[MQAttributes] :: Int -> Int -> Int -> Int -> MQAttributes
[flags] :: MQAttributes -> Int
[maxMsgNum] :: MQAttributes -> Int
[maxMsgSize] :: MQAttributes -> Int
[curNumMsgs] :: MQAttributes -> Int
[DMore] :: t -> Maybe x -> [DPTrie p t x] -> DPTrie p t x
[DPred] :: p -> (t -> Maybe r) -> Maybe (r -> x) -> [DPTrie p t (r -> x)] -> DPTrie p t x
[Rooted] :: (Maybe x) -> [DPTrie p t x] -> RDPTrie p t x
[UMore] :: t -> Maybe x -> [UPTrie t x] -> UPTrie t x
[UPred] :: t -> (t -> Maybe r) -> Maybe (r -> x) -> [UPTrie t (r -> x)] -> UPTrie t x
[Rooted] :: Maybe x -> [UPTrie t x] -> RUPTrie t x
[root] :: RUPTrie t x -> Maybe x
[children] :: RUPTrie t x -> [UPTrie t x]
[ProcessHandle] :: !(MVar ProcessHandle__) -> !Bool -> ProcessHandle
[OpenHandle] :: PHANDLE -> ProcessHandle__
[ClosedHandle] :: ExitCode -> ProcessHandle__
[CreateProcess] :: CmdSpec -> Maybe FilePath -> Maybe [(String, String)] -> StdStream -> StdStream -> StdStream -> Bool -> Bool -> Bool -> CreateProcess
[cmdspec] :: CreateProcess -> CmdSpec
[cwd] :: CreateProcess -> Maybe FilePath
[env] :: CreateProcess -> Maybe [(String, String)]
[std_in] :: CreateProcess -> StdStream
[std_out] :: CreateProcess -> StdStream
[std_err] :: CreateProcess -> StdStream
[close_fds] :: CreateProcess -> Bool
[create_group] :: CreateProcess -> Bool
[delegate_ctlc] :: CreateProcess -> Bool
[ShellCommand] :: String -> CmdSpec
[RawCommand] :: FilePath -> [String] -> CmdSpec
[Inherit] :: StdStream
[UseHandle] :: Handle -> StdStream
[CreatePipe] :: StdStream
[CreateProcess] :: CmdSpec -> Maybe FilePath -> Maybe [(String, String)] -> StdStream -> StdStream -> StdStream -> Bool -> Bool -> Bool -> CreateProcess
[cmdspec] :: CreateProcess -> CmdSpec
[cwd] :: CreateProcess -> Maybe FilePath
[env] :: CreateProcess -> Maybe [(String, String)]
[std_in] :: CreateProcess -> StdStream
[std_out] :: CreateProcess -> StdStream
[std_err] :: CreateProcess -> StdStream
[close_fds] :: CreateProcess -> Bool
[create_group] :: CreateProcess -> Bool
[delegate_ctlc] :: CreateProcess -> Bool
[ShellCommand] :: String -> CmdSpec
[RawCommand] :: FilePath -> [String] -> CmdSpec
[Inherit] :: StdStream
[UseHandle] :: Handle -> StdStream
[CreatePipe] :: StdStream
[Consume] :: a' -> (a -> P a' a b b' f r) -> (Producer b b' f r) -> P a' a b b' f r
[Produce] :: b -> (b' -> P a' a b b' f r) -> (Consumer a' a f r) -> P a' a b b' f r
[Enclose] :: (f (P a' a b b' f r)) -> P a' a b b' f r
[Deliver] :: r -> P a' a b b' f r
[IncompleteCell] :: ParseError
[IncompleteRow] :: ParseError
[IncompleteCell] :: ParseError
[IncompleteRow] :: ParseError
[PaginationQuery] :: Word64 -> Word64 -> String -> PaginationQuery
[_pqLimit] :: PaginationQuery -> Word64
[_pqOffset] :: PaginationQuery -> Word64
[_pqSearchString] :: PaginationQuery -> String
[PaginationResults] :: Word64 -> Word64 -> UTCTime -> [a] -> PaginationResults a
[_prOffset] :: PaginationResults a -> Word64
[_prTotalCount] :: PaginationResults a -> Word64
[_prTimestamp] :: PaginationResults a -> UTCTime
[_prResults] :: PaginationResults a -> [a]
[CacheVal] :: PaginationQuery -> Bool -> a -> CacheVal a
[_pvQuery] :: CacheVal a -> PaginationQuery
[_pvShouldStore] :: CacheVal a -> Bool
[_pvValue] :: CacheVal a -> a
[PQParams] :: Int -> Int -> PQParams
[pqpMaxCacheSize] :: PQParams -> Int
[pqpPruneAmount] :: PQParams -> Int
[KeyEvent] :: Int -> Bool -> Bool -> KeyEvent
[keKeyCode] :: KeyEvent -> Int
[keCtrl] :: KeyEvent -> Bool
[keShift] :: KeyEvent -> Bool
[WidgetConfig] :: Event t a -> a -> Dynamic t (Map String String) -> WidgetConfig t a
[_widgetConfig_setValue] :: WidgetConfig t a -> Event t a
[_widgetConfig_initialValue] :: WidgetConfig t a -> a
[_widgetConfig_attributes] :: WidgetConfig t a -> Dynamic t (Map String String)
[HtmlWidget] :: Dynamic t a -> Event t a -> Event t Int -> Event t Int -> Event t Int -> Dynamic t Bool -> HtmlWidget t a
[_hwidget_value] :: HtmlWidget t a -> Dynamic t a
[_hwidget_change] :: HtmlWidget t a -> Event t a
[_hwidget_keypress] :: HtmlWidget t a -> Event t Int
[_hwidget_keydown] :: HtmlWidget t a -> Event t Int
[_hwidget_keyup] :: HtmlWidget t a -> Event t Int
[_hwidget_hasFocus] :: HtmlWidget t a -> Dynamic t Bool
[ReflexMap] :: Map k v -> Event t [(k, v)] -> Event t (Set k) -> ReflexMap t k v
[rmInitialItems] :: ReflexMap t k v -> Map k v
[rmInsertItems] :: ReflexMap t k v -> Event t [(k, v)]
[rmDeleteItems] :: ReflexMap t k v -> Event t (Set k)
[ReflexList] :: [v] -> Event t [v] -> Event t [v] -> ReflexList t v
[rlInitialItems] :: ReflexList t v -> [v]
[rlInsertItems] :: ReflexList t v -> Event t [v]
[rlDeleteItems] :: ReflexList t v -> Event t [v]
[NameNull] :: GIBSError
[NoDevices] :: GIBSError
[NoMatching] :: GIBSError
[InvalidHandle] :: EEPROMError
[SizeExceeded] :: EEPROMError
[NoEEPROM] :: EEPROMError
[RtlsdrTunerUnknown] :: Tuner
[RtlsdrTunerE4000] :: Tuner
[RtlsdrTunerFc0012] :: Tuner
[RtlsdrTunerFc0013] :: Tuner
[RtlsdrTunerFc2580] :: Tuner
[RtlsdrTunerR820t] :: Tuner
[RtlsdrTunerR828d] :: Tuner
[DSDisabled] :: DirectSamplingMode
[DSI] :: DirectSamplingMode
[DSQ] :: DirectSamplingMode
[Keysym] :: SDLKey -> [Modifier] -> Char -> Keysym
[symKey] :: Keysym -> SDLKey
[symModifiers] :: Keysym -> [Modifier]
[symUnicode] :: Keysym -> Char
[KeyModNone] :: Modifier
[KeyModLeftShift] :: Modifier
[KeyModRightShift] :: Modifier
[KeyModLeftCtrl] :: Modifier
[KeyModRightCtrl] :: Modifier
[KeyModLeftAlt] :: Modifier
[KeyModRightAlt] :: Modifier
[KeyModLeftMeta] :: Modifier
[KeyModRightMeta] :: Modifier
[KeyModNum] :: Modifier
[KeyModCaps] :: Modifier
[KeyModMode] :: Modifier
[KeyModCtrl] :: Modifier
[KeyModShift] :: Modifier
[KeyModAlt] :: Modifier
[KeyModMeta] :: Modifier
[SDLK_UNKNOWN] :: SDLKey
[SDLK_FIRST] :: SDLKey
[SDLK_BACKSPACE] :: SDLKey
[SDLK_TAB] :: SDLKey
[SDLK_CLEAR] :: SDLKey
[SDLK_RETURN] :: SDLKey
[SDLK_PAUSE] :: SDLKey
[SDLK_ESCAPE] :: SDLKey
[SDLK_SPACE] :: SDLKey
[SDLK_EXCLAIM] :: SDLKey
[SDLK_QUOTEDBL] :: SDLKey
[SDLK_HASH] :: SDLKey
[SDLK_DOLLAR] :: SDLKey
[SDLK_AMPERSAND] :: SDLKey
[SDLK_QUOTE] :: SDLKey
[SDLK_LEFTPAREN] :: SDLKey
[SDLK_RIGHTPAREN] :: SDLKey
[SDLK_ASTERISK] :: SDLKey
[SDLK_PLUS] :: SDLKey
[SDLK_COMMA] :: SDLKey
[SDLK_MINUS] :: SDLKey
[SDLK_PERIOD] :: SDLKey
[SDLK_SLASH] :: SDLKey
[SDLK_0] :: SDLKey
[SDLK_1] :: SDLKey
[SDLK_2] :: SDLKey
[SDLK_3] :: SDLKey
[SDLK_4] :: SDLKey
[SDLK_5] :: SDLKey
[SDLK_6] :: SDLKey
[SDLK_7] :: SDLKey
[SDLK_8] :: SDLKey
[SDLK_9] :: SDLKey
[SDLK_COLON] :: SDLKey
[SDLK_SEMICOLON] :: SDLKey
[SDLK_LESS] :: SDLKey
[SDLK_EQUALS] :: SDLKey
[SDLK_GREATER] :: SDLKey
[SDLK_QUESTION] :: SDLKey
[SDLK_AT] :: SDLKey
[SDLK_LEFTBRACKET] :: SDLKey
[SDLK_BACKSLASH] :: SDLKey
[SDLK_RIGHTBRACKET] :: SDLKey
[SDLK_CARET] :: SDLKey
[SDLK_UNDERSCORE] :: SDLKey
[SDLK_BACKQUOTE] :: SDLKey
[SDLK_a] :: SDLKey
[SDLK_b] :: SDLKey
[SDLK_c] :: SDLKey
[SDLK_d] :: SDLKey
[SDLK_e] :: SDLKey
[SDLK_f] :: SDLKey
[SDLK_g] :: SDLKey
[SDLK_h] :: SDLKey
[SDLK_i] :: SDLKey
[SDLK_j] :: SDLKey
[SDLK_k] :: SDLKey
[SDLK_l] :: SDLKey
[SDLK_m] :: SDLKey
[SDLK_n] :: SDLKey
[SDLK_o] :: SDLKey
[SDLK_p] :: SDLKey
[SDLK_q] :: SDLKey
[SDLK_r] :: SDLKey
[SDLK_s] :: SDLKey
[SDLK_t] :: SDLKey
[SDLK_u] :: SDLKey
[SDLK_v] :: SDLKey
[SDLK_w] :: SDLKey
[SDLK_x] :: SDLKey
[SDLK_y] :: SDLKey
[SDLK_z] :: SDLKey
[SDLK_DELETE] :: SDLKey
[SDLK_WORLD_0] :: SDLKey
[SDLK_WORLD_1] :: SDLKey
[SDLK_WORLD_2] :: SDLKey
[SDLK_WORLD_3] :: SDLKey
[SDLK_WORLD_4] :: SDLKey
[SDLK_WORLD_5] :: SDLKey
[SDLK_WORLD_6] :: SDLKey
[SDLK_WORLD_7] :: SDLKey
[SDLK_WORLD_8] :: SDLKey
[SDLK_WORLD_9] :: SDLKey
[SDLK_WORLD_10] :: SDLKey
[SDLK_WORLD_11] :: SDLKey
[SDLK_WORLD_12] :: SDLKey
[SDLK_WORLD_13] :: SDLKey
[SDLK_WORLD_14] :: SDLKey
[SDLK_WORLD_15] :: SDLKey
[SDLK_WORLD_16] :: SDLKey
[SDLK_WORLD_17] :: SDLKey
[SDLK_WORLD_18] :: SDLKey
[SDLK_WORLD_19] :: SDLKey
[SDLK_WORLD_20] :: SDLKey
[SDLK_WORLD_21] :: SDLKey
[SDLK_WORLD_22] :: SDLKey
[SDLK_WORLD_23] :: SDLKey
[SDLK_WORLD_24] :: SDLKey
[SDLK_WORLD_25] :: SDLKey
[SDLK_WORLD_26] :: SDLKey
[SDLK_WORLD_27] :: SDLKey
[SDLK_WORLD_28] :: SDLKey
[SDLK_WORLD_29] :: SDLKey
[SDLK_WORLD_30] :: SDLKey
[SDLK_WORLD_31] :: SDLKey
[SDLK_WORLD_32] :: SDLKey
[SDLK_WORLD_33] :: SDLKey
[SDLK_WORLD_34] :: SDLKey
[SDLK_WORLD_35] :: SDLKey
[SDLK_WORLD_36] :: SDLKey
[SDLK_WORLD_37] :: SDLKey
[SDLK_WORLD_38] :: SDLKey
[SDLK_WORLD_39] :: SDLKey
[SDLK_WORLD_40] :: SDLKey
[SDLK_WORLD_41] :: SDLKey
[SDLK_WORLD_42] :: SDLKey
[SDLK_WORLD_43] :: SDLKey
[SDLK_WORLD_44] :: SDLKey
[SDLK_WORLD_45] :: SDLKey
[SDLK_WORLD_46] :: SDLKey
[SDLK_WORLD_47] :: SDLKey
[SDLK_WORLD_48] :: SDLKey
[SDLK_WORLD_49] :: SDLKey
[SDLK_WORLD_50] :: SDLKey
[SDLK_WORLD_51] :: SDLKey
[SDLK_WORLD_52] :: SDLKey
[SDLK_WORLD_53] :: SDLKey
[SDLK_WORLD_54] :: SDLKey
[SDLK_WORLD_55] :: SDLKey
[SDLK_WORLD_56] :: SDLKey
[SDLK_WORLD_57] :: SDLKey
[SDLK_WORLD_58] :: SDLKey
[SDLK_WORLD_59] :: SDLKey
[SDLK_WORLD_60] :: SDLKey
[SDLK_WORLD_61] :: SDLKey
[SDLK_WORLD_62] :: SDLKey
[SDLK_WORLD_63] :: SDLKey
[SDLK_WORLD_64] :: SDLKey
[SDLK_WORLD_65] :: SDLKey
[SDLK_WORLD_66] :: SDLKey
[SDLK_WORLD_67] :: SDLKey
[SDLK_WORLD_68] :: SDLKey
[SDLK_WORLD_69] :: SDLKey
[SDLK_WORLD_70] :: SDLKey
[SDLK_WORLD_71] :: SDLKey
[SDLK_WORLD_72] :: SDLKey
[SDLK_WORLD_73] :: SDLKey
[SDLK_WORLD_74] :: SDLKey
[SDLK_WORLD_75] :: SDLKey
[SDLK_WORLD_76] :: SDLKey
[SDLK_WORLD_77] :: SDLKey
[SDLK_WORLD_78] :: SDLKey
[SDLK_WORLD_79] :: SDLKey
[SDLK_WORLD_80] :: SDLKey
[SDLK_WORLD_81] :: SDLKey
[SDLK_WORLD_82] :: SDLKey
[SDLK_WORLD_83] :: SDLKey
[SDLK_WORLD_84] :: SDLKey
[SDLK_WORLD_85] :: SDLKey
[SDLK_WORLD_86] :: SDLKey
[SDLK_WORLD_87] :: SDLKey
[SDLK_WORLD_88] :: SDLKey
[SDLK_WORLD_89] :: SDLKey
[SDLK_WORLD_90] :: SDLKey
[SDLK_WORLD_91] :: SDLKey
[SDLK_WORLD_92] :: SDLKey
[SDLK_WORLD_93] :: SDLKey
[SDLK_WORLD_94] :: SDLKey
[SDLK_WORLD_95] :: SDLKey
[SDLK_KP0] :: SDLKey
[SDLK_KP1] :: SDLKey
[SDLK_KP2] :: SDLKey
[SDLK_KP3] :: SDLKey
[SDLK_KP4] :: SDLKey
[SDLK_KP5] :: SDLKey
[SDLK_KP6] :: SDLKey
[SDLK_KP7] :: SDLKey
[SDLK_KP8] :: SDLKey
[SDLK_KP9] :: SDLKey
[SDLK_KP_PERIOD] :: SDLKey
[SDLK_KP_DIVIDE] :: SDLKey
[SDLK_KP_MULTIPLY] :: SDLKey
[SDLK_KP_MINUS] :: SDLKey
[SDLK_KP_PLUS] :: SDLKey
[SDLK_KP_ENTER] :: SDLKey
[SDLK_KP_EQUALS] :: SDLKey
[SDLK_UP] :: SDLKey
[SDLK_DOWN] :: SDLKey
[SDLK_RIGHT] :: SDLKey
[SDLK_LEFT] :: SDLKey
[SDLK_INSERT] :: SDLKey
[SDLK_HOME] :: SDLKey
[SDLK_END] :: SDLKey
[SDLK_PAGEUP] :: SDLKey
[SDLK_PAGEDOWN] :: SDLKey
[SDLK_F1] :: SDLKey
[SDLK_F2] :: SDLKey
[SDLK_F3] :: SDLKey
[SDLK_F4] :: SDLKey
[SDLK_F5] :: SDLKey
[SDLK_F6] :: SDLKey
[SDLK_F7] :: SDLKey
[SDLK_F8] :: SDLKey
[SDLK_F9] :: SDLKey
[SDLK_F10] :: SDLKey
[SDLK_F11] :: SDLKey
[SDLK_F12] :: SDLKey
[SDLK_F13] :: SDLKey
[SDLK_F14] :: SDLKey
[SDLK_F15] :: SDLKey
[SDLK_NUMLOCK] :: SDLKey
[SDLK_CAPSLOCK] :: SDLKey
[SDLK_SCROLLOCK] :: SDLKey
[SDLK_RSHIFT] :: SDLKey
[SDLK_LSHIFT] :: SDLKey
[SDLK_RCTRL] :: SDLKey
[SDLK_LCTRL] :: SDLKey
[SDLK_RALT] :: SDLKey
[SDLK_LALT] :: SDLKey
[SDLK_RMETA] :: SDLKey
[SDLK_LMETA] :: SDLKey
[SDLK_LSUPER] :: SDLKey
[SDLK_RSUPER] :: SDLKey
[SDLK_MODE] :: SDLKey
[SDLK_COMPOSE] :: SDLKey
[SDLK_HELP] :: SDLKey
[SDLK_PRINT] :: SDLKey
[SDLK_SYSREQ] :: SDLKey
[SDLK_BREAK] :: SDLKey
[SDLK_MENU] :: SDLKey
[SDLK_POWER] :: SDLKey
[SDLK_EURO] :: SDLKey
[SDLK_UNDO] :: SDLKey
[SDLK_LAST] :: SDLKey
[Color] :: Word8 -> Color
[colorRed, colorGreen, colorBlue] :: Color -> Word8
[Pixel] :: Word32 -> Pixel
[AudioU8] :: AudioFormat
[AudioS8] :: AudioFormat
[AudioU16LSB] :: AudioFormat
[AudioS16LSB] :: AudioFormat
[AudioU16MSB] :: AudioFormat
[AudioS16MSB] :: AudioFormat
[AudioU16Sys] :: AudioFormat
[AudioS16Sys] :: AudioFormat
[HatCentered] :: Hat
[HatUp] :: Hat
[HatRight] :: Hat
[HatDown] :: Hat
[HatLeft] :: Hat
[HatRightUp] :: Hat
[HatRightDown] :: Hat
[HatLeftUp] :: Hat
[HatLeftDown] :: Hat
[SWSurface] :: SurfaceFlag
[HWSurface] :: SurfaceFlag
[OpenGL] :: SurfaceFlag
[ASyncBlit] :: SurfaceFlag
[OpenGLBlit] :: SurfaceFlag
[Resizable] :: SurfaceFlag
[NoFrame] :: SurfaceFlag
[HWAccel] :: SurfaceFlag
[SrcColorKey] :: SurfaceFlag
[RLEAccel] :: SurfaceFlag
[SrcAlpha] :: SurfaceFlag
[PreAlloc] :: SurfaceFlag
[AnyFormat] :: SurfaceFlag
[HWPalette] :: SurfaceFlag
[DoubleBuf] :: SurfaceFlag
[Fullscreen] :: SurfaceFlag
[Rect] :: Int -> Int -> Rect
[rectX, rectY] :: Rect -> Int
[rectW, rectH] :: Rect -> Int
[InitTimer] :: InitFlag
[InitAudio] :: InitFlag
[InitVideo] :: InitFlag
[InitCDROM] :: InitFlag
[InitJoystick] :: InitFlag
[InitNoParachute] :: InitFlag
[InitEventthread] :: InitFlag
[InitEverything] :: InitFlag
[GrabQuery] :: GrabMode
[GrabOff] :: GrabMode
[GrabOn] :: GrabMode
[Disable] :: Toggle
[Enable] :: Toggle
[Query] :: Toggle
[Modes] :: [Rect] -> ListModes
[NonAvailable] :: ListModes
[AnyOK] :: ListModes
[NoEvent] :: Event
[GotFocus] :: [Focus] -> Event
[LostFocus] :: [Focus] -> Event
[KeyDown] :: !Keysym -> Event
[KeyUp] :: !Keysym -> Event
[MouseMotion] :: !Word16 -> !Word16 -> !Int16 -> !Int16 -> Event
[MouseButtonDown] :: !Word16 -> !Word16 -> !MouseButton -> Event
[MouseButtonUp] :: !Word16 -> !Word16 -> !MouseButton -> Event
[JoyAxisMotion] :: !Word8 -> !Word8 -> !Int16 -> Event
[JoyBallMotion] :: !Word8 -> !Word8 -> !Int16 -> !Int16 -> Event
[JoyHatMotion] :: !Word8 -> !Word8 -> !Word8 -> Event
[JoyButtonDown] :: !Word8 -> !Word8 -> Event
[JoyButtonUp] :: !Word8 -> !Word8 -> Event
[VideoResize] :: !Int -> !Int -> Event
[VideoExpose] :: Event
[Quit] :: Event
[User] :: !UserEventID -> !Int -> !(Ptr ()) -> !(Ptr ()) -> Event
[Unknown] :: Event
[SDLNoEvent] :: SDLEvent
[SDLActiveEvent] :: SDLEvent
[SDLKeyDown] :: SDLEvent
[SDLKeyUp] :: SDLEvent
[SDLMouseMotion] :: SDLEvent
[SDLMouseButtonDown] :: SDLEvent
[SDLMouseButtonUp] :: SDLEvent
[SDLJoyAxisMotion] :: SDLEvent
[SDLJoyBallMotion] :: SDLEvent
[SDLJoyHatMotion] :: SDLEvent
[SDLJoyButtonDown] :: SDLEvent
[SDLJoyButtonUp] :: SDLEvent
[SDLQuit] :: SDLEvent
[SDLSysWMEvent] :: SDLEvent
[SDLVideoResize] :: SDLEvent
[SDLVideoExpose] :: SDLEvent
[SDLUserEvent] :: Word8 -> SDLEvent
[SDLNumEvents] :: SDLEvent
[UID0] :: UserEventID
[UID1] :: UserEventID
[UID2] :: UserEventID
[UID3] :: UserEventID
[UID4] :: UserEventID
[UID5] :: UserEventID
[UID6] :: UserEventID
[UID7] :: UserEventID
[ButtonLeft] :: MouseButton
[ButtonMiddle] :: MouseButton
[ButtonRight] :: MouseButton
[ButtonWheelUp] :: MouseButton
[ButtonWheelDown] :: MouseButton
[ButtonUnknown] :: !Word8 -> MouseButton
[MouseFocus] :: Focus
[InputFocus] :: Focus
[ApplicationFocus] :: Focus
[TGA] :: ImageType
[BMP] :: ImageType
[PNM] :: ImageType
[XPM] :: ImageType
[XCF] :: ImageType
[PCX] :: ImageType
[GIF] :: ImageType
[JPG] :: ImageType
[TIF] :: ImageType
[LBM] :: ImageType
[PNG] :: ImageType
[Other] :: String -> ImageType
[MusicNone] :: MusicType
[MusicCmd] :: MusicType
[MusicWav] :: MusicType
[MusicMod] :: MusicType
[MusicMid] :: MusicType
[MusicOgg] :: MusicType
[MusicMp3] :: MusicType
[NoFading] :: Fading
[FadingOut] :: Fading
[FadingIn] :: Fading
[AudioU8] :: AudioFormat
[AudioS8] :: AudioFormat
[AudioU16LSB] :: AudioFormat
[AudioS16LSB] :: AudioFormat
[AudioU16MSB] :: AudioFormat
[AudioS16MSB] :: AudioFormat
[AudioU16Sys] :: AudioFormat
[AudioS16Sys] :: AudioFormat
[StyleBold] :: FontStyle
[StyleItalic] :: FontStyle
[StyleUnderline] :: FontStyle
[CPUInfo] :: Word32 -> Maybe Word32 -> CPUInfo
[features] :: CPUInfo -> Word32
[extendedFeatures] :: CPUInfo -> Maybe Word32
[Coeffs] :: Int -> Int -> [Int] -> [[Float]] -> Coeffs
[numCoeffs] :: Coeffs -> Int
[numGroups] :: Coeffs -> Int
[increments] :: Coeffs -> [Int]
[groups] :: Coeffs -> [[Float]]
[Filter] :: Int -> (Int -> v a -> vm (PrimState m) a -> m ()) -> (Int -> v a -> v a -> vm (PrimState m) a -> m ()) -> Filter m v vm a
[numCoeffsF] :: Filter m v vm a -> Int
[filterOne] :: Filter m v vm a -> Int -> v a -> vm (PrimState m) a -> m ()
[filterCross] :: Filter m v vm a -> Int -> v a -> v a -> vm (PrimState m) a -> m ()
[Decimator] :: Int -> Int -> (Int -> v a -> vm (PrimState m) a -> m ()) -> (Int -> v a -> v a -> vm (PrimState m) a -> m ()) -> Decimator m v vm a
[numCoeffsD] :: Decimator m v vm a -> Int
[decimationD] :: Decimator m v vm a -> Int
[decimateOne] :: Decimator m v vm a -> Int -> v a -> vm (PrimState m) a -> m ()
[decimateCross] :: Decimator m v vm a -> Int -> v a -> v a -> vm (PrimState m) a -> m ()
[Resampler] :: Int -> Int -> Int -> dat -> (dat -> Int -> v a -> vm (PrimState m) a -> m (dat, Int)) -> (dat -> Int -> v a -> v a -> vm (PrimState m) a -> m (dat, Int)) -> Resampler m v vm a
[numCoeffsR] :: Resampler m v vm a -> Int
[decimationR] :: Resampler m v vm a -> Int
[interpolationR] :: Resampler m v vm a -> Int
[startDat] :: Resampler m v vm a -> dat
[resampleOne] :: Resampler m v vm a -> dat -> Int -> v a -> vm (PrimState m) a -> m (dat, Int)
[resampleCross] :: Resampler m v vm a -> dat -> Int -> v a -> v a -> vm (PrimState m) a -> m (dat, Int)
[:|] :: a -> [a] -> NonEmpty a
[Min] :: a -> Min a
[getMin] :: Min a -> a
[Max] :: a -> Max a
[getMax] :: Max a -> a
[First] :: a -> First a
[getFirst] :: First a -> a
[Last] :: a -> Last a
[getLast] :: Last a -> a
[WrapMonoid] :: m -> WrappedMonoid m
[unwrapMonoid] :: WrappedMonoid m -> m
[Dual] :: a -> Dual a
[getDual] :: Dual a -> a
[Endo] :: (a -> a) -> Endo a
[appEndo] :: Endo a -> a -> a
[All] :: Bool -> All
[getAll] :: All -> Bool
[Any] :: Bool -> Any
[getAny] :: Any -> Bool
[Sum] :: a -> Sum a
[getSum] :: Sum a -> a
[Product] :: a -> Product a
[getProduct] :: Product a -> a
[Option] :: Maybe a -> Option a
[getOption] :: Option a -> Maybe a
[Arg] :: a -> b -> Arg a b
[Failure] :: String -> Result a
[Warning] :: [String] -> a -> Result a
[Success] :: a -> Result a
[Failure] :: String -> Result a
[Warning] :: [String] -> a -> Result a
[Success] :: a -> Result a
[IneqSlack] :: IneqStdForm -> [LinVar] -> IneqSlack
[slackIneq] :: IneqSlack -> IneqStdForm
[slackVars] :: IneqSlack -> [LinVar]
[DSOM] :: gm p -> (x -> x -> x -> x) -> (p -> p -> x) -> (p -> x -> p -> p) -> DSOM gm x k p
[gridMap] :: DSOM gm x k p -> gm p
[learningRate] :: DSOM gm x k p -> (x -> x -> x -> x)
[difference] :: DSOM gm x k p -> p -> p -> x
[makeSimilar] :: DSOM gm x k p -> p -> x -> p -> p
[DSOM] :: gm p -> (x -> x -> x -> x) -> (p -> p -> x) -> (p -> x -> p -> p) -> DSOM gm x k p
[gridMap] :: DSOM gm x k p -> gm p
[learningRate] :: DSOM gm x k p -> (x -> x -> x -> x)
[difference] :: DSOM gm x k p -> p -> p -> x
[makeSimilar] :: DSOM gm x k p -> p -> x -> p -> p
[SSOM] :: Map k p -> (t -> x) -> (p -> p -> x) -> (p -> x -> p -> p) -> t -> SSOM t x k p
[sMap] :: SSOM t x k p -> Map k p
[learningRate] :: SSOM t x k p -> t -> x
[difference] :: SSOM t x k p -> p -> p -> x
[makeSimilar] :: SSOM t x k p -> p -> x -> p -> p
[counter] :: SSOM t x k p -> t
[SSOM] :: Map k p -> (t -> x) -> (p -> p -> x) -> (p -> x -> p -> p) -> t -> SSOM t x k p
[sMap] :: SSOM t x k p -> Map k p
[learningRate] :: SSOM t x k p -> t -> x
[difference] :: SSOM t x k p -> p -> p -> x
[makeSimilar] :: SSOM t x k p -> p -> x -> p -> p
[counter] :: SSOM t x k p -> t
[SOM] :: gm p -> (t -> d -> x) -> (p -> p -> x) -> (p -> x -> p -> p) -> t -> SOM t d gm x k p
[gridMap] :: SOM t d gm x k p -> gm p
[learningRate] :: SOM t d gm x k p -> t -> d -> x
[difference] :: SOM t d gm x k p -> p -> p -> x
[makeSimilar] :: SOM t d gm x k p -> p -> x -> p -> p
[counter] :: SOM t d gm x k p -> t
[SOM] :: gm p -> (t -> d -> x) -> (p -> p -> x) -> (p -> x -> p -> p) -> t -> SOM t d gm x k p
[gridMap] :: SOM t d gm x k p -> gm p
[learningRate] :: SOM t d gm x k p -> t -> d -> x
[difference] :: SOM t d gm x k p -> p -> p -> x
[makeSimilar] :: SOM t d gm x k p -> p -> x -> p -> p
[counter] :: SOM t d gm x k p -> t
[Parameters] :: Lattice -> Meshing -> [LEdge Displacement] -> Map String (Complex Double) -> Map String (Vector (Complex Double)) -> Parameters
[latticeData] :: Parameters -> Lattice
[meshingData] :: Parameters -> Meshing
[decomData] :: Parameters -> [LEdge Displacement]
[scalarParams] :: Parameters -> Map String (Complex Double)
[vectorParams] :: Parameters -> Map String (Vector (Complex Double))
[SingularLatticeError] :: TBError
[DimensionalityError] :: String -> TBError
[UndefinedError] :: String -> TBError
[UnknownParameter] :: String -> TBError
[Spacing] :: Double -> Meshing
[GID] :: [Int] -> GridIndex
[ScalarSite] :: Int -> SiteData
[num] :: SiteData -> Int
[VectorSite] :: Int -> Moment -> SiteData
[num] :: SiteData -> Int
[mom] :: SiteData -> Moment
[Q] :: (forall m. Quasi m => m a) -> Q a
[unQ] :: Q a -> forall m. Quasi m => m a
[TExp] :: Exp -> TExp a
[unType] :: TExp a -> Exp
[ModName] :: String -> ModName
[PkgName] :: String -> PkgName
[Module] :: PkgName -> ModName -> Module
[OccName] :: String -> OccName
[Name] :: OccName -> NameFlavour -> Name
[NameS] :: NameFlavour
[NameQ] :: ModName -> NameFlavour
[NameU] :: !Int -> NameFlavour
[NameL] :: !Int -> NameFlavour
[NameG] :: NameSpace -> PkgName -> ModName -> NameFlavour
[VarName] :: NameSpace
[DataName] :: NameSpace
[TcClsName] :: NameSpace
[Alone] :: NameIs
[Applied] :: NameIs
[Infix] :: NameIs
[Loc] :: String -> String -> String -> CharPos -> CharPos -> Loc
[loc_filename] :: Loc -> String
[loc_package] :: Loc -> String
[loc_module] :: Loc -> String
[loc_start] :: Loc -> CharPos
[loc_end] :: Loc -> CharPos
[ClassI] :: Dec -> [InstanceDec] -> Info
[ClassOpI] :: Name -> Type -> ParentName -> Fixity -> Info
[TyConI] :: Dec -> Info
[FamilyI] :: Dec -> [InstanceDec] -> Info
[PrimTyConI] :: Name -> Arity -> Unlifted -> Info
[DataConI] :: Name -> Type -> ParentName -> Fixity -> Info
[VarI] :: Name -> Type -> (Maybe Dec) -> Fixity -> Info
[TyVarI] :: Name -> Type -> Info
[ModuleInfo] :: [Module] -> ModuleInfo
[Fixity] :: Int -> FixityDirection -> Fixity
[InfixL] :: FixityDirection
[InfixR] :: FixityDirection
[InfixN] :: FixityDirection
[CharL] :: Char -> Lit
[StringL] :: String -> Lit
[IntegerL] :: Integer -> Lit
[RationalL] :: Rational -> Lit
[IntPrimL] :: Integer -> Lit
[WordPrimL] :: Integer -> Lit
[FloatPrimL] :: Rational -> Lit
[DoublePrimL] :: Rational -> Lit
[StringPrimL] :: [Word8] -> Lit
[LitP] :: Lit -> Pat
[VarP] :: Name -> Pat
[TupP] :: [Pat] -> Pat
[UnboxedTupP] :: [Pat] -> Pat
[ConP] :: Name -> [Pat] -> Pat
[InfixP] :: Pat -> Name -> Pat -> Pat
[UInfixP] :: Pat -> Name -> Pat -> Pat
[ParensP] :: Pat -> Pat
[TildeP] :: Pat -> Pat
[BangP] :: Pat -> Pat
[AsP] :: Name -> Pat -> Pat
[WildP] :: Pat
[RecP] :: Name -> [FieldPat] -> Pat
[ListP] :: [Pat] -> Pat
[SigP] :: Pat -> Type -> Pat
[ViewP] :: Exp -> Pat -> Pat
[Match] :: Pat -> Body -> [Dec] -> Match
[Clause] :: [Pat] -> Body -> [Dec] -> Clause
[VarE] :: Name -> Exp
[ConE] :: Name -> Exp
[LitE] :: Lit -> Exp
[AppE] :: Exp -> Exp -> Exp
[InfixE] :: (Maybe Exp) -> Exp -> (Maybe Exp) -> Exp
[UInfixE] :: Exp -> Exp -> Exp -> Exp
[ParensE] :: Exp -> Exp
[LamE] :: [Pat] -> Exp -> Exp
[LamCaseE] :: [Match] -> Exp
[TupE] :: [Exp] -> Exp
[UnboxedTupE] :: [Exp] -> Exp
[CondE] :: Exp -> Exp -> Exp -> Exp
[MultiIfE] :: [(Guard, Exp)] -> Exp
[LetE] :: [Dec] -> Exp -> Exp
[CaseE] :: Exp -> [Match] -> Exp
[DoE] :: [Stmt] -> Exp
[CompE] :: [Stmt] -> Exp
[ArithSeqE] :: Range -> Exp
[ListE] :: [Exp] -> Exp
[SigE] :: Exp -> Type -> Exp
[RecConE] :: Name -> [FieldExp] -> Exp
[RecUpdE] :: Exp -> [FieldExp] -> Exp
[StaticE] :: Exp -> Exp
[GuardedB] :: [(Guard, Exp)] -> Body
[NormalB] :: Exp -> Body
[NormalG] :: Exp -> Guard
[PatG] :: [Stmt] -> Guard
[BindS] :: Pat -> Exp -> Stmt
[LetS] :: [Dec] -> Stmt
[NoBindS] :: Exp -> Stmt
[ParS] :: [[Stmt]] -> Stmt
[FromR] :: Exp -> Range
[FromThenR] :: Exp -> Exp -> Range
[FromToR] :: Exp -> Exp -> Range
[FromThenToR] :: Exp -> Exp -> Exp -> Range
[FunD] :: Name -> [Clause] -> Dec
[ValD] :: Pat -> Body -> [Dec] -> Dec
[DataD] :: Cxt -> Name -> [TyVarBndr] -> [Con] -> [Name] -> Dec
[NewtypeD] :: Cxt -> Name -> [TyVarBndr] -> Con -> [Name] -> Dec
[TySynD] :: Name -> [TyVarBndr] -> Type -> Dec
[ClassD] :: Cxt -> Name -> [TyVarBndr] -> [FunDep] -> [Dec] -> Dec
[InstanceD] :: Cxt -> Type -> [Dec] -> Dec
[SigD] :: Name -> Type -> Dec
[ForeignD] :: Foreign -> Dec
[InfixD] :: Fixity -> Name -> Dec
[PragmaD] :: Pragma -> Dec
[FamilyD] :: FamFlavour -> Name -> [TyVarBndr] -> (Maybe Kind) -> Dec
[DataInstD] :: Cxt -> Name -> [Type] -> [Con] -> [Name] -> Dec
[NewtypeInstD] :: Cxt -> Name -> [Type] -> Con -> [Name] -> Dec
[TySynInstD] :: Name -> TySynEqn -> Dec
[ClosedTypeFamilyD] :: Name -> [TyVarBndr] -> (Maybe Kind) -> [TySynEqn] -> Dec
[RoleAnnotD] :: Name -> [Role] -> Dec
[StandaloneDerivD] :: Cxt -> Type -> Dec
[DefaultSigD] :: Name -> Type -> Dec
[TySynEqn] :: [Type] -> Type -> TySynEqn
[FunDep] :: [Name] -> [Name] -> FunDep
[TypeFam] :: FamFlavour
[DataFam] :: FamFlavour
[ImportF] :: Callconv -> Safety -> String -> Name -> Type -> Foreign
[ExportF] :: Callconv -> String -> Name -> Type -> Foreign
[CCall] :: Callconv
[StdCall] :: Callconv
[CApi] :: Callconv
[Prim] :: Callconv
[JavaScript] :: Callconv
[Unsafe] :: Safety
[Safe] :: Safety
[Interruptible] :: Safety
[InlineP] :: Name -> Inline -> RuleMatch -> Phases -> Pragma
[SpecialiseP] :: Name -> Type -> (Maybe Inline) -> Phases -> Pragma
[SpecialiseInstP] :: Type -> Pragma
[RuleP] :: String -> [RuleBndr] -> Exp -> Exp -> Phases -> Pragma
[AnnP] :: AnnTarget -> Exp -> Pragma
[LineP] :: Int -> String -> Pragma
[NoInline] :: Inline
[Inline] :: Inline
[Inlinable] :: Inline
[ConLike] :: RuleMatch
[FunLike] :: RuleMatch
[AllPhases] :: Phases
[FromPhase] :: Int -> Phases
[BeforePhase] :: Int -> Phases
[RuleVar] :: Name -> RuleBndr
[TypedRuleVar] :: Name -> Type -> RuleBndr
[ModuleAnnotation] :: AnnTarget
[TypeAnnotation] :: Name -> AnnTarget
[ValueAnnotation] :: Name -> AnnTarget
[IsStrict] :: Strict
[NotStrict] :: Strict
[Unpacked] :: Strict
[NormalC] :: Name -> [StrictType] -> Con
[RecC] :: Name -> [VarStrictType] -> Con
[InfixC] :: StrictType -> Name -> StrictType -> Con
[ForallC] :: [TyVarBndr] -> Cxt -> Con -> Con
[ForallT] :: [TyVarBndr] -> Cxt -> Type -> Type
[AppT] :: Type -> Type -> Type
[SigT] :: Type -> Kind -> Type
[VarT] :: Name -> Type
[ConT] :: Name -> Type
[PromotedT] :: Name -> Type
[TupleT] :: Int -> Type
[UnboxedTupleT] :: Int -> Type
[ArrowT] :: Type
[EqualityT] :: Type
[ListT] :: Type
[PromotedTupleT] :: Int -> Type
[PromotedNilT] :: Type
[PromotedConsT] :: Type
[StarT] :: Type
[ConstraintT] :: Type
[LitT] :: TyLit -> Type
[PlainTV] :: Name -> TyVarBndr
[KindedTV] :: Name -> Kind -> TyVarBndr
[NumTyLit] :: Integer -> TyLit
[StrTyLit] :: String -> TyLit
[NominalR] :: Role
[RepresentationalR] :: Role
[PhantomR] :: Role
[InferR] :: Role
[AnnLookupModule] :: Module -> AnnLookup
[AnnLookupName] :: Name -> AnnLookup
[QuasiQuoter] :: (String -> Q Exp) -> (String -> Q Pat) -> (String -> Q Type) -> (String -> Q [Dec]) -> QuasiQuoter
[quoteExp] :: QuasiQuoter -> String -> Q Exp
[quotePat] :: QuasiQuoter -> String -> Q Pat
[quoteType] :: QuasiQuoter -> String -> Q Type
[quoteDec] :: QuasiQuoter -> String -> Q [Dec]
[Loc] :: String -> String -> String -> CharPos -> CharPos -> Loc
[loc_filename] :: Loc -> String
[loc_package] :: Loc -> String
[loc_module] :: Loc -> String
[loc_start] :: Loc -> CharPos
[loc_end] :: Loc -> CharPos
[ClassI] :: Dec -> [InstanceDec] -> Info
[ClassOpI] :: Name -> Type -> ParentName -> Fixity -> Info
[TyConI] :: Dec -> Info
[FamilyI] :: Dec -> [InstanceDec] -> Info
[PrimTyConI] :: Name -> Arity -> Unlifted -> Info
[DataConI] :: Name -> Type -> ParentName -> Fixity -> Info
[VarI] :: Name -> Type -> (Maybe Dec) -> Fixity -> Info
[TyVarI] :: Name -> Type -> Info
[ModuleInfo] :: [Module] -> ModuleInfo
[AnnLookupModule] :: Module -> AnnLookup
[AnnLookupName] :: Name -> AnnLookup
[FunD] :: Name -> [Clause] -> Dec
[ValD] :: Pat -> Body -> [Dec] -> Dec
[DataD] :: Cxt -> Name -> [TyVarBndr] -> [Con] -> [Name] -> Dec
[NewtypeD] :: Cxt -> Name -> [TyVarBndr] -> Con -> [Name] -> Dec
[TySynD] :: Name -> [TyVarBndr] -> Type -> Dec
[ClassD] :: Cxt -> Name -> [TyVarBndr] -> [FunDep] -> [Dec] -> Dec
[InstanceD] :: Cxt -> Type -> [Dec] -> Dec
[SigD] :: Name -> Type -> Dec
[ForeignD] :: Foreign -> Dec
[InfixD] :: Fixity -> Name -> Dec
[PragmaD] :: Pragma -> Dec
[FamilyD] :: FamFlavour -> Name -> [TyVarBndr] -> (Maybe Kind) -> Dec
[DataInstD] :: Cxt -> Name -> [Type] -> [Con] -> [Name] -> Dec
[NewtypeInstD] :: Cxt -> Name -> [Type] -> Con -> [Name] -> Dec
[TySynInstD] :: Name -> TySynEqn -> Dec
[ClosedTypeFamilyD] :: Name -> [TyVarBndr] -> (Maybe Kind) -> [TySynEqn] -> Dec
[RoleAnnotD] :: Name -> [Role] -> Dec
[StandaloneDerivD] :: Cxt -> Type -> Dec
[DefaultSigD] :: Name -> Type -> Dec
[NormalC] :: Name -> [StrictType] -> Con
[RecC] :: Name -> [VarStrictType] -> Con
[InfixC] :: StrictType -> Name -> StrictType -> Con
[ForallC] :: [TyVarBndr] -> Cxt -> Con -> Con
[Clause] :: [Pat] -> Body -> [Dec] -> Clause
[IsStrict] :: Strict
[NotStrict] :: Strict
[Unpacked] :: Strict
[ImportF] :: Callconv -> Safety -> String -> Name -> Type -> Foreign
[ExportF] :: Callconv -> String -> Name -> Type -> Foreign
[CCall] :: Callconv
[StdCall] :: Callconv
[CApi] :: Callconv
[Prim] :: Callconv
[JavaScript] :: Callconv
[Unsafe] :: Safety
[Safe] :: Safety
[Interruptible] :: Safety
[InlineP] :: Name -> Inline -> RuleMatch -> Phases -> Pragma
[SpecialiseP] :: Name -> Type -> (Maybe Inline) -> Phases -> Pragma
[SpecialiseInstP] :: Type -> Pragma
[RuleP] :: String -> [RuleBndr] -> Exp -> Exp -> Phases -> Pragma
[AnnP] :: AnnTarget -> Exp -> Pragma
[LineP] :: Int -> String -> Pragma
[NoInline] :: Inline
[Inline] :: Inline
[Inlinable] :: Inline
[ConLike] :: RuleMatch
[FunLike] :: RuleMatch
[AllPhases] :: Phases
[FromPhase] :: Int -> Phases
[BeforePhase] :: Int -> Phases
[RuleVar] :: Name -> RuleBndr
[TypedRuleVar] :: Name -> Type -> RuleBndr
[ModuleAnnotation] :: AnnTarget
[TypeAnnotation] :: Name -> AnnTarget
[ValueAnnotation] :: Name -> AnnTarget
[FunDep] :: [Name] -> [Name] -> FunDep
[TypeFam] :: FamFlavour
[DataFam] :: FamFlavour
[TySynEqn] :: [Type] -> Type -> TySynEqn
[Fixity] :: Int -> FixityDirection -> Fixity
[InfixL] :: FixityDirection
[InfixR] :: FixityDirection
[InfixN] :: FixityDirection
[VarE] :: Name -> Exp
[ConE] :: Name -> Exp
[LitE] :: Lit -> Exp
[AppE] :: Exp -> Exp -> Exp
[InfixE] :: (Maybe Exp) -> Exp -> (Maybe Exp) -> Exp
[UInfixE] :: Exp -> Exp -> Exp -> Exp
[ParensE] :: Exp -> Exp
[LamE] :: [Pat] -> Exp -> Exp
[LamCaseE] :: [Match] -> Exp
[TupE] :: [Exp] -> Exp
[UnboxedTupE] :: [Exp] -> Exp
[CondE] :: Exp -> Exp -> Exp -> Exp
[MultiIfE] :: [(Guard, Exp)] -> Exp
[LetE] :: [Dec] -> Exp -> Exp
[CaseE] :: Exp -> [Match] -> Exp
[DoE] :: [Stmt] -> Exp
[CompE] :: [Stmt] -> Exp
[ArithSeqE] :: Range -> Exp
[ListE] :: [Exp] -> Exp
[SigE] :: Exp -> Type -> Exp
[RecConE] :: Name -> [FieldExp] -> Exp
[RecUpdE] :: Exp -> [FieldExp] -> Exp
[StaticE] :: Exp -> Exp
[Match] :: Pat -> Body -> [Dec] -> Match
[GuardedB] :: [(Guard, Exp)] -> Body
[NormalB] :: Exp -> Body
[NormalG] :: Exp -> Guard
[PatG] :: [Stmt] -> Guard
[BindS] :: Pat -> Exp -> Stmt
[LetS] :: [Dec] -> Stmt
[NoBindS] :: Exp -> Stmt
[ParS] :: [[Stmt]] -> Stmt
[FromR] :: Exp -> Range
[FromThenR] :: Exp -> Exp -> Range
[FromToR] :: Exp -> Exp -> Range
[FromThenToR] :: Exp -> Exp -> Exp -> Range
[CharL] :: Char -> Lit
[StringL] :: String -> Lit
[IntegerL] :: Integer -> Lit
[RationalL] :: Rational -> Lit
[IntPrimL] :: Integer -> Lit
[WordPrimL] :: Integer -> Lit
[FloatPrimL] :: Rational -> Lit
[DoublePrimL] :: Rational -> Lit
[StringPrimL] :: [Word8] -> Lit
[LitP] :: Lit -> Pat
[VarP] :: Name -> Pat
[TupP] :: [Pat] -> Pat
[UnboxedTupP] :: [Pat] -> Pat
[ConP] :: Name -> [Pat] -> Pat
[InfixP] :: Pat -> Name -> Pat -> Pat
[UInfixP] :: Pat -> Name -> Pat -> Pat
[ParensP] :: Pat -> Pat
[TildeP] :: Pat -> Pat
[BangP] :: Pat -> Pat
[AsP] :: Name -> Pat -> Pat
[WildP] :: Pat
[RecP] :: Name -> [FieldPat] -> Pat
[ListP] :: [Pat] -> Pat
[SigP] :: Pat -> Type -> Pat
[ViewP] :: Exp -> Pat -> Pat
[ForallT] :: [TyVarBndr] -> Cxt -> Type -> Type
[AppT] :: Type -> Type -> Type
[SigT] :: Type -> Kind -> Type
[VarT] :: Name -> Type
[ConT] :: Name -> Type
[PromotedT] :: Name -> Type
[TupleT] :: Int -> Type
[UnboxedTupleT] :: Int -> Type
[ArrowT] :: Type
[EqualityT] :: Type
[ListT] :: Type
[PromotedTupleT] :: Int -> Type
[PromotedNilT] :: Type
[PromotedConsT] :: Type
[StarT] :: Type
[ConstraintT] :: Type
[LitT] :: TyLit -> Type
[PlainTV] :: Name -> TyVarBndr
[KindedTV] :: Name -> Kind -> TyVarBndr
[NumTyLit] :: Integer -> TyLit
[StrTyLit] :: String -> TyLit
[NominalR] :: Role
[RepresentationalR] :: Role
[PhantomR] :: Role
[InferR] :: Role
[ModJulianDate] :: Rational -> UniversalTime
[getModJulianDate] :: UniversalTime -> Rational
[UTCTime] :: Day -> DiffTime -> UTCTime
[utctDay] :: UTCTime -> Day
[utctDayTime] :: UTCTime -> DiffTime
[ModifiedJulianDay] :: Integer -> Day
[toModifiedJulianDay] :: Day -> Integer
[TimeZone] :: Int -> Bool -> String -> TimeZone
[timeZoneMinutes] :: TimeZone -> Int
[timeZoneSummerOnly] :: TimeZone -> Bool
[timeZoneName] :: TimeZone -> String
[TimeOfDay] :: Int -> Int -> Pico -> TimeOfDay
[todHour] :: TimeOfDay -> Int
[todMin] :: TimeOfDay -> Int
[todSec] :: TimeOfDay -> Pico
[LocalTime] :: Day -> TimeOfDay -> LocalTime
[localDay] :: LocalTime -> Day
[localTimeOfDay] :: LocalTime -> TimeOfDay
[ZonedTime] :: LocalTime -> TimeZone -> ZonedTime
[zonedTimeToLocalTime] :: ZonedTime -> LocalTime
[zonedTimeZone] :: ZonedTime -> TimeZone
[TimeLocale] :: [(String, String)] -> [(String, String)] -> (String, String) -> String -> [TimeZone] -> TimeLocale
[wDays] :: TimeLocale -> [(String, String)]
[months] :: TimeLocale -> [(String, String)]
[amPm] :: TimeLocale -> (String, String)
[dateTimeFmt, dateFmt, timeFmt, time12Fmt] :: TimeLocale -> String
[knownTimeZones] :: TimeLocale -> [TimeZone]
[ContT] :: ((a -> m r) -> m r) -> ContT r m a
[runContT] :: ContT r m a -> (a -> m r) -> m r
[ReaderT] :: (r -> m a) -> ReaderT r m a
[runReaderT] :: ReaderT r m a -> r -> m a
[RWST] :: (r -> s -> m (a, s, w)) -> RWST r w s m a
[runRWST] :: RWST r w s m a -> r -> s -> m (a, s, w)
[RWST] :: (r -> s -> m (a, s, w)) -> RWST r w s m a
[runRWST] :: RWST r w s m a -> r -> s -> m (a, s, w)
[StateT] :: (s -> m (a, s)) -> StateT s m a
[runStateT] :: StateT s m a -> s -> m (a, s)
[StateT] :: (s -> m (a, s)) -> StateT s m a
[runStateT] :: StateT s m a -> s -> m (a, s)
[Constant] :: a -> Constant a b
[getConstant] :: Constant a b -> a
[Pure] :: a -> Lift f a
[Other] :: (f a) -> Lift f a
[ExceptT] :: (m (Either e a)) -> ExceptT e m a
[ErrorT] :: m (Either e a) -> ErrorT e m a
[runErrorT] :: ErrorT e m a -> m (Either e a)
[IdentityT] :: f a -> IdentityT f a
[runIdentityT] :: IdentityT f a -> f a
[ListT] :: m [a] -> ListT m a
[runListT] :: ListT m a -> m [a]
[MaybeT] :: m (Maybe a) -> MaybeT m a
[runMaybeT] :: MaybeT m a -> m (Maybe a)
[WriterT] :: m (a, w) -> WriterT w m a
[runWriterT] :: WriterT w m a -> m (a, w)
[WriterT] :: m (a, w) -> WriterT w m a
[runWriterT] :: WriterT w m a -> m (a, w)
[Compose] :: f (g a) -> Compose f g a
[getCompose] :: Compose f g a -> f (g a)
[Pair] :: (f a) -> (g a) -> Product f g a
[InL] :: (f a) -> Sum f g a
[InR] :: (g a) -> Sum f g a
[Backwards] :: f a -> Backwards f a
[forwards] :: Backwards f a -> f a
[Reverse] :: f a -> Reverse f a
[getReverse] :: Reverse f a -> f a
[AdviceNormal] :: Advice
[AdviceRandom] :: Advice
[AdviceSequential] :: Advice
[AdviceWillNeed] :: Advice
[AdviceDontNeed] :: Advice
[AdviceNoReuse] :: Advice
[RTLD_LAZY] :: RTLDFlags
[RTLD_NOW] :: RTLDFlags
[RTLD_GLOBAL] :: RTLDFlags
[RTLD_LOCAL] :: RTLDFlags
[Null] :: DL
[Next] :: DL
[Default] :: DL
[DLHandle] :: (Ptr ()) -> DL
[Exited] :: ExitCode -> ProcessStatus
[Terminated] :: Signal -> Bool -> ProcessStatus
[Stopped] :: Signal -> ProcessStatus
[Immediately] :: TerminalState
[WhenDrained] :: TerminalState
[WhenFlushed] :: TerminalState
[InterruptOnBreak] :: TerminalMode
[MapCRtoLF] :: TerminalMode
[IgnoreBreak] :: TerminalMode
[IgnoreCR] :: TerminalMode
[IgnoreParityErrors] :: TerminalMode
[MapLFtoCR] :: TerminalMode
[CheckParity] :: TerminalMode
[StripHighBit] :: TerminalMode
[StartStopInput] :: TerminalMode
[StartStopOutput] :: TerminalMode
[MarkParityErrors] :: TerminalMode
[ProcessOutput] :: TerminalMode
[LocalMode] :: TerminalMode
[ReadEnable] :: TerminalMode
[TwoStopBits] :: TerminalMode
[HangupOnClose] :: TerminalMode
[EnableParity] :: TerminalMode
[OddParity] :: TerminalMode
[EnableEcho] :: TerminalMode
[EchoErase] :: TerminalMode
[EchoKill] :: TerminalMode
[EchoLF] :: TerminalMode
[ProcessInput] :: TerminalMode
[ExtendedFunctions] :: TerminalMode
[KeyboardInterrupts] :: TerminalMode
[NoFlushOnInterrupt] :: TerminalMode
[BackgroundWriteInterrupt] :: TerminalMode
[EndOfFile] :: ControlCharacter
[EndOfLine] :: ControlCharacter
[Erase] :: ControlCharacter
[Interrupt] :: ControlCharacter
[Kill] :: ControlCharacter
[Quit] :: ControlCharacter
[Start] :: ControlCharacter
[Stop] :: ControlCharacter
[Suspend] :: ControlCharacter
[B0] :: BaudRate
[B50] :: BaudRate
[B75] :: BaudRate
[B110] :: BaudRate
[B134] :: BaudRate
[B150] :: BaudRate
[B200] :: BaudRate
[B300] :: BaudRate
[B600] :: BaudRate
[B1200] :: BaudRate
[B1800] :: BaudRate
[B2400] :: BaudRate
[B4800] :: BaudRate
[B9600] :: BaudRate
[B19200] :: BaudRate
[B38400] :: BaudRate
[B57600] :: BaudRate
[B115200] :: BaudRate
[InputQueue] :: QueueSelector
[OutputQueue] :: QueueSelector
[BothQueues] :: QueueSelector
[SuspendOutput] :: FlowAction
[RestartOutput] :: FlowAction
[TransmitStop] :: FlowAction
[TransmitStart] :: FlowAction
[ProcessTimes] :: ClockTick -> ClockTick -> ClockTick -> ClockTick -> ClockTick -> ProcessTimes
[elapsedTime] :: ProcessTimes -> ClockTick
[userTime] :: ProcessTimes -> ClockTick
[systemTime] :: ProcessTimes -> ClockTick
[childUserTime] :: ProcessTimes -> ClockTick
[childSystemTime] :: ProcessTimes -> ClockTick
[Exited] :: ExitCode -> ProcessStatus
[Terminated] :: Signal -> Bool -> ProcessStatus
[Stopped] :: Signal -> ProcessStatus
[ReadOnly] :: OpenMode
[WriteOnly] :: OpenMode
[ReadWrite] :: OpenMode
[OpenFileFlags] :: Bool -> Bool -> Bool -> Bool -> Bool -> OpenFileFlags
[append] :: OpenFileFlags -> Bool
[exclusive] :: OpenFileFlags -> Bool
[noctty] :: OpenFileFlags -> Bool
[nonBlock] :: OpenFileFlags -> Bool
[trunc] :: OpenFileFlags -> Bool
[AppendOnWrite] :: FdOption
[CloseOnExec] :: FdOption
[NonBlockingRead] :: FdOption
[SynchronousWrites] :: FdOption
[ReadLock] :: LockRequest
[WriteLock] :: LockRequest
[Unlock] :: LockRequest
[FileSizeBits] :: PathVar
[LinkLimit] :: PathVar
[InputLineLimit] :: PathVar
[InputQueueLimit] :: PathVar
[FileNameLimit] :: PathVar
[PathNameLimit] :: PathVar
[PipeBufferLimit] :: PathVar
[SymbolicLinkLimit] :: PathVar
[SetOwnerAndGroupIsRestricted] :: PathVar
[FileNamesAreNotTruncated] :: PathVar
[VDisableChar] :: PathVar
[AsyncIOAvailable] :: PathVar
[PrioIOAvailable] :: PathVar
[SyncIOAvailable] :: PathVar
[ShmOpenFlags] :: Bool -> Bool -> Bool -> Bool -> ShmOpenFlags
[shmReadWrite] :: ShmOpenFlags -> Bool
[shmCreate] :: ShmOpenFlags -> Bool
[shmExclusive] :: ShmOpenFlags -> Bool
[shmTrunc] :: ShmOpenFlags -> Bool
[OpenSemFlags] :: Bool -> Bool -> OpenSemFlags
[semCreate] :: OpenSemFlags -> Bool
[semExclusive] :: OpenSemFlags -> Bool
[ResourceLimitInfinity] :: ResourceLimit
[ResourceLimitUnknown] :: ResourceLimit
[ResourceLimit] :: Integer -> ResourceLimit
[ResourceLimits] :: ResourceLimit -> ResourceLimits
[softLimit, hardLimit] :: ResourceLimits -> ResourceLimit
[ResourceCoreFileSize] :: Resource
[ResourceCPUTime] :: Resource
[ResourceDataSize] :: Resource
[ResourceFileSize] :: Resource
[ResourceOpenFiles] :: Resource
[ResourceStackSize] :: Resource
[ResourceTotalMemory] :: Resource
[GroupEntry] :: String -> String -> GroupID -> [String] -> GroupEntry
[groupName] :: GroupEntry -> String
[groupPassword] :: GroupEntry -> String
[groupID] :: GroupEntry -> GroupID
[groupMembers] :: GroupEntry -> [String]
[UserEntry] :: String -> String -> UserID -> GroupID -> String -> String -> String -> UserEntry
[userName] :: UserEntry -> String
[userPassword] :: UserEntry -> String
[userID] :: UserEntry -> UserID
[userGroupID] :: UserEntry -> GroupID
[userGecos] :: UserEntry -> String
[homeDirectory] :: UserEntry -> String
[userShell] :: UserEntry -> String
[Immediately] :: TerminalState
[WhenDrained] :: TerminalState
[WhenFlushed] :: TerminalState
[InterruptOnBreak] :: TerminalMode
[MapCRtoLF] :: TerminalMode
[IgnoreBreak] :: TerminalMode
[IgnoreCR] :: TerminalMode
[IgnoreParityErrors] :: TerminalMode
[MapLFtoCR] :: TerminalMode
[CheckParity] :: TerminalMode
[StripHighBit] :: TerminalMode
[StartStopInput] :: TerminalMode
[StartStopOutput] :: TerminalMode
[MarkParityErrors] :: TerminalMode
[ProcessOutput] :: TerminalMode
[LocalMode] :: TerminalMode
[ReadEnable] :: TerminalMode
[TwoStopBits] :: TerminalMode
[HangupOnClose] :: TerminalMode
[EnableParity] :: TerminalMode
[OddParity] :: TerminalMode
[EnableEcho] :: TerminalMode
[EchoErase] :: TerminalMode
[EchoKill] :: TerminalMode
[EchoLF] :: TerminalMode
[ProcessInput] :: TerminalMode
[ExtendedFunctions] :: TerminalMode
[KeyboardInterrupts] :: TerminalMode
[NoFlushOnInterrupt] :: TerminalMode
[BackgroundWriteInterrupt] :: TerminalMode
[EndOfFile] :: ControlCharacter
[EndOfLine] :: ControlCharacter
[Erase] :: ControlCharacter
[Interrupt] :: ControlCharacter
[Kill] :: ControlCharacter
[Quit] :: ControlCharacter
[Start] :: ControlCharacter
[Stop] :: ControlCharacter
[Suspend] :: ControlCharacter
[B0] :: BaudRate
[B50] :: BaudRate
[B75] :: BaudRate
[B110] :: BaudRate
[B134] :: BaudRate
[B150] :: BaudRate
[B200] :: BaudRate
[B300] :: BaudRate
[B600] :: BaudRate
[B1200] :: BaudRate
[B1800] :: BaudRate
[B2400] :: BaudRate
[B4800] :: BaudRate
[B9600] :: BaudRate
[B19200] :: BaudRate
[B38400] :: BaudRate
[B57600] :: BaudRate
[B115200] :: BaudRate
[InputQueue] :: QueueSelector
[OutputQueue] :: QueueSelector
[BothQueues] :: QueueSelector
[SuspendOutput] :: FlowAction
[RestartOutput] :: FlowAction
[TransmitStop] :: FlowAction
[TransmitStart] :: FlowAction
[ProcessTimes] :: ClockTick -> ClockTick -> ClockTick -> ClockTick -> ClockTick -> ProcessTimes
[elapsedTime] :: ProcessTimes -> ClockTick
[userTime] :: ProcessTimes -> ClockTick
[systemTime] :: ProcessTimes -> ClockTick
[childUserTime] :: ProcessTimes -> ClockTick
[childSystemTime] :: ProcessTimes -> ClockTick
[Exited] :: ExitCode -> ProcessStatus
[Terminated] :: Signal -> Bool -> ProcessStatus
[Stopped] :: Signal -> ProcessStatus
[ReadOnly] :: OpenMode
[WriteOnly] :: OpenMode
[ReadWrite] :: OpenMode
[OpenFileFlags] :: Bool -> Bool -> Bool -> Bool -> Bool -> OpenFileFlags
[append] :: OpenFileFlags -> Bool
[exclusive] :: OpenFileFlags -> Bool
[noctty] :: OpenFileFlags -> Bool
[nonBlock] :: OpenFileFlags -> Bool
[trunc] :: OpenFileFlags -> Bool
[AppendOnWrite] :: FdOption
[CloseOnExec] :: FdOption
[NonBlockingRead] :: FdOption
[SynchronousWrites] :: FdOption
[ReadLock] :: LockRequest
[WriteLock] :: LockRequest
[Unlock] :: LockRequest
[SystemID] :: String -> String -> String -> String -> String -> SystemID
[systemName] :: SystemID -> String
[nodeName] :: SystemID -> String
[release] :: SystemID -> String
[version] :: SystemID -> String
[machine] :: SystemID -> String
[ArgumentLimit] :: SysVar
[ChildLimit] :: SysVar
[ClockTick] :: SysVar
[GroupLimit] :: SysVar
[OpenFileLimit] :: SysVar
[PosixVersion] :: SysVar
[HasSavedIDs] :: SysVar
[HasJobControl] :: SysVar
[FileSizeBits] :: PathVar
[LinkLimit] :: PathVar
[InputLineLimit] :: PathVar
[InputQueueLimit] :: PathVar
[FileNameLimit] :: PathVar
[PathNameLimit] :: PathVar
[PipeBufferLimit] :: PathVar
[SymbolicLinkLimit] :: PathVar
[SetOwnerAndGroupIsRestricted] :: PathVar
[FileNamesAreNotTruncated] :: PathVar
[VDisableChar] :: PathVar
[AsyncIOAvailable] :: PathVar
[PrioIOAvailable] :: PathVar
[SyncIOAvailable] :: PathVar
[Default] :: Handler
[Ignore] :: Handler
[Catch] :: (IO ()) -> Handler
[CatchOnce] :: (IO ()) -> Handler
[CatchInfo] :: (SignalInfo -> IO ()) -> Handler
[CatchInfoOnce] :: (SignalInfo -> IO ()) -> Handler
[SignalInfo] :: Signal -> Errno -> SignalSpecificInfo -> SignalInfo
[siginfoSignal] :: SignalInfo -> Signal
[siginfoError] :: SignalInfo -> Errno
[siginfoSpecific] :: SignalInfo -> SignalSpecificInfo
[NoSignalSpecificInfo] :: SignalSpecificInfo
[SigChldInfo] :: ProcessID -> UserID -> ProcessStatus -> SignalSpecificInfo
[siginfoPid] :: SignalSpecificInfo -> ProcessID
[siginfoUid] :: SignalSpecificInfo -> UserID
[siginfoStatus] :: SignalSpecificInfo -> ProcessStatus
[QueryString] :: a -> [(a, a)] -> Maybe a -> QueryString a
[RelativeUrlT] :: (h -> m b) -> RelativeUrlT h m b
[runRelativeUrlT] :: RelativeUrlT h m b -> h -> m b
[GroundedUrlT] :: (h -> m b) -> GroundedUrlT h m b
[runGroundedUrlT] :: GroundedUrlT h m b -> h -> m b
[AbsoluteUrlT] :: (h -> m b) -> AbsoluteUrlT h m b
[runAbsoluteUrlT] :: AbsoluteUrlT h m b -> h -> m b
[WebcrankT] :: RWST (ResourceData (WebcrankT m)) LogData ReqData m a -> WebcrankT m a
[unWebcrankT] :: WebcrankT m a -> RWST (ResourceData (WebcrankT m)) LogData ReqData m a
[Decision] :: String -> m (FlowChart m a) -> FlowChart m a
[Done] :: m a -> FlowChart m a
[ServerAPI] :: m Method -> m ByteString -> (HeaderName -> m (Maybe ByteString)) -> m HTTPDate -> ServerAPI m
[srvGetRequestMethod] :: ServerAPI m -> m Method
[srvGetRequestURI] :: ServerAPI m -> m ByteString
[srvGetRequestHeader] :: ServerAPI m -> HeaderName -> m (Maybe ByteString)
[srvGetRequestTime] :: ServerAPI m -> m HTTPDate
[Resource] :: HaltT m Bool -> HaltT m Bool -> m [Method] -> HaltT m Bool -> HaltT m Authorized -> HaltT m Bool -> HaltT m Bool -> HaltT m Bool -> HaltT m Bool -> m ResponseHeaders -> m [(MediaType, HaltT m Body)] -> m CharsetsProvided -> m [(Encoding, Body -> Body)] -> HaltT m Bool -> MaybeT m ETag -> MaybeT m HTTPDate -> MaybeT m HTTPDate -> MaybeT (HaltT m) ByteString -> MaybeT (HaltT m) ByteString -> HaltT m Bool -> HaltT m Bool -> HaltT m Bool -> HaltT m Bool -> m (PostAction m) -> m [(MediaType, HaltT m ())] -> m [HeaderName] -> HaltT m Bool -> m Bool -> m () -> Resource m
[serviceAvailable] :: Resource m -> HaltT m Bool
[uriTooLong] :: Resource m -> HaltT m Bool
[allowedMethods] :: Resource m -> m [Method]
[malformedRequest] :: Resource m -> HaltT m Bool
[isAuthorized] :: Resource m -> HaltT m Authorized
[forbidden] :: Resource m -> HaltT m Bool
[validContentHeaders] :: Resource m -> HaltT m Bool
[knownContentType] :: Resource m -> HaltT m Bool
[validEntityLength] :: Resource m -> HaltT m Bool
[options] :: Resource m -> m ResponseHeaders
[contentTypesProvided] :: Resource m -> m [(MediaType, HaltT m Body)]
[charsetsProvided] :: Resource m -> m CharsetsProvided
[encodingsProvided] :: Resource m -> m [(Encoding, Body -> Body)]
[resourceExists] :: Resource m -> HaltT m Bool
[generateETag] :: Resource m -> MaybeT m ETag
[lastModified] :: Resource m -> MaybeT m HTTPDate
[expires] :: Resource m -> MaybeT m HTTPDate
[movedPermanently] :: Resource m -> MaybeT (HaltT m) ByteString
[movedTemporarily] :: Resource m -> MaybeT (HaltT m) ByteString
[previouslyExisted] :: Resource m -> HaltT m Bool
[allowMissingPost] :: Resource m -> HaltT m Bool
[deleteResource] :: Resource m -> HaltT m Bool
[deleteCompleted] :: Resource m -> HaltT m Bool
[postAction] :: Resource m -> m (PostAction m)
[contentTypesAccepted] :: Resource m -> m [(MediaType, HaltT m ())]
[variances] :: Resource m -> m [HeaderName]
[multipleChoices] :: Resource m -> HaltT m Bool
[isConflict] :: Resource m -> m Bool
[finishRequest] :: Resource m -> m ()
[Authorized] :: Authorized
[Unauthorized] :: ByteString -> Authorized
[StrongETag] :: ByteString -> ETag
[WeakETag] :: ByteString -> ETag
[PostCreate] :: [Text] -> PostAction m
[PostCreateRedir] :: [Text] -> PostAction m
[PostProcess] :: (HaltT m ()) -> PostAction m
[PostProcessRedir] :: (HaltT m ByteString) -> PostAction m
[NoCharset] :: CharsetsProvided
[CharsetsProvided] :: (NonEmpty (Charset, Body -> Body)) -> CharsetsProvided
[Context] :: !Text -> !Ip -> Context
[contextServer] :: Context -> !Text
[contextSubnet] :: Context -> !Ip
[Unspecified] :: ClientType
[Dhcp] :: ClientType
[Bootp] :: ClientType
[Both] :: ClientType
[ReservationFlag] :: ClientType
[None] :: ClientType
[DATE_TIME] :: !DWORD -> !DWORD -> DATE_TIME
[HOST_INFO] :: !Ip -> (Maybe String) -> (Maybe String) -> HOST_INFO
[ClientIpAddress] :: !Ip -> SEARCH_INFO
[ClientHardwareAddress] :: !Mac -> SEARCH_INFO
[ClientName] :: !String -> SEARCH_INFO
[Client] :: !Ip -> !Ip -> !Mac -> Maybe String -> Maybe String -> !DATE_TIME -> !HOST_INFO -> !ClientType -> Client
[clientIp] :: Client -> !Ip
[clientSubnetMask] :: Client -> !Ip
[clientHardwareAddress] :: Client -> !Mac
[clientName] :: Client -> Maybe String
[clientComment] :: Client -> Maybe String
[clientLeaseExpires] :: Client -> !DATE_TIME
[clientOwnerHost] :: Client -> !HOST_INFO
[clientType] :: Client -> !ClientType
[Mapping] :: !Mac -> !Ip -> Mapping
[mappingMac] :: Mapping -> !Mac
[mappingIp] :: Mapping -> !Ip
[Reservation] :: !Mapping -> !ClientType -> Reservation
[reservationMapping] :: Reservation -> !Mapping
[reservationType] :: Reservation -> !ClientType
[Win32Exception] :: Text -> ErrCode -> Text -> Win32Exception
[function] :: Win32Exception -> Text
[errCode] :: Win32Exception -> ErrCode
[systemMessage] :: Win32Exception -> Text
[InvalidHandleValue] :: ErrCode
[Success] :: ErrCode
[FileNotFound] :: ErrCode
[PathNotFound] :: ErrCode
[AccessDenied] :: ErrCode
[InvalidHandle] :: ErrCode
[InvalidData] :: ErrCode
[InvalidDrive] :: ErrCode
[CurrentDirectory] :: ErrCode
[NoMoreFiles] :: ErrCode
[CallNotImplemented] :: ErrCode
[MoreData] :: ErrCode
[NoMoreItems] :: ErrCode
[ServiceAlreadyRunning] :: ErrCode
[ServiceDisabled] :: ErrCode
[ServiceDoesNotExist] :: ErrCode
[ServiceCannotAcceptCtrl] :: ErrCode
[ServiceNotActive] :: ErrCode
[FailedServiceControllerConnect] :: ErrCode
[ExceptionInService] :: ErrCode
[ServiceSpecificError] :: ErrCode
[ServiceNotInExe] :: ErrCode
[RPCSServerUnavailable] :: ErrCode
[RPCSServerTooBusy] :: ErrCode
[NotAReparsePoint] :: ErrCode
[DhcpSubnetNotPresent] :: ErrCode
[DhcpElementCantRemove] :: ErrCode
[DhcpOptionNotPresent] :: ErrCode
[DhcpJetError] :: ErrCode
[DhcpNotReservedClient] :: ErrCode
[DhcpReservedClient] :: ErrCode
[DhcpIprangeExists] :: ErrCode
[DhcpReservedipExists] :: ErrCode
[DhcpInvalidRange] :: ErrCode
[DhcpIprangeConvIllegal] :: ErrCode
[ScopeRangePolicyRangeConflict] :: ErrCode
[DhcpFoIprangeTypeConvIllegal] :: ErrCode
[Other] :: !DWORD -> ErrCode
[ACCEPT_NETBINDCHANGE] :: SERVICE_ACCEPT
[ACCEPT_PARAMCHANGE] :: SERVICE_ACCEPT
[ACCEPT_PAUSE_CONTINUE] :: SERVICE_ACCEPT
[ACCEPT_PRESHUTDOWN] :: SERVICE_ACCEPT
[ACCEPT_SHUTDOWN] :: SERVICE_ACCEPT
[ACCEPT_STOP] :: SERVICE_ACCEPT
[CONTINUE] :: SERVICE_CONTROL
[INTERROGATE] :: SERVICE_CONTROL
[NETBINDADD] :: SERVICE_CONTROL
[NETBINDDISABLE] :: SERVICE_CONTROL
[NETBINDENABLE] :: SERVICE_CONTROL
[NETBINDREMOVE] :: SERVICE_CONTROL
[PARAMCHANGE] :: SERVICE_CONTROL
[PAUSE] :: SERVICE_CONTROL
[PRESHUTDOWN] :: SERVICE_CONTROL
[SHUTDOWN] :: SERVICE_CONTROL
[STOP] :: SERVICE_CONTROL
[CONTINUE_PENDING] :: SERVICE_STATE
[PAUSE_PENDING] :: SERVICE_STATE
[PAUSED] :: SERVICE_STATE
[RUNNING] :: SERVICE_STATE
[START_PENDING] :: SERVICE_STATE
[STOP_PENDING] :: SERVICE_STATE
[STOPPED] :: SERVICE_STATE
[SERVICE_STATUS] :: SERVICE_TYPE -> SERVICE_STATE -> [SERVICE_ACCEPT] -> DWORD -> DWORD -> DWORD -> DWORD -> SERVICE_STATUS
[serviceType] :: SERVICE_STATUS -> SERVICE_TYPE
[currentState] :: SERVICE_STATUS -> SERVICE_STATE
[controlsAccepted] :: SERVICE_STATUS -> [SERVICE_ACCEPT]
[win32ExitCode] :: SERVICE_STATUS -> DWORD
[serviceSpecificExitCode] :: SERVICE_STATUS -> DWORD
[checkPoint] :: SERVICE_STATUS -> DWORD
[waitHint] :: SERVICE_STATUS -> DWORD
[FILE_SYSTEM_DRIVER] :: SERVICE_TYPE
[KERNEL_DRIVER] :: SERVICE_TYPE
[WIN32_OWN_PROCESS] :: SERVICE_TYPE
[WIN32_SHARE_PROCESS] :: SERVICE_TYPE
[SERVICE_INTERACTIVE_PROCESS] :: SERVICE_TYPE
[ThreeColMid] :: !Int -> !Rational -> !Rational -> ThreeCol a
[threeColNMaster] :: ThreeCol a -> !Int
[threeColDelta] :: ThreeCol a -> !Rational
[threeColFrac] :: ThreeCol a -> !Rational
[ThreeCol] :: !Int -> !Rational -> !Rational -> ThreeCol a
[threeColNMaster] :: ThreeCol a -> !Int
[threeColDelta] :: ThreeCol a -> !Rational
[threeColFrac] :: ThreeCol a -> !Rational
[StackTile] :: !Int -> !Rational -> !Rational -> StackTile a
[CW] :: Rotation
[CCW] :: Rotation
[East] :: Direction
[South] :: Direction
[West] :: Direction
[North] :: Direction
[Roledex] :: Roledex a
[ResizableTall] :: Int -> Rational -> Rational -> [Rational] -> ResizableTall a
[_nmaster] :: ResizableTall a -> Int
[_delta] :: ResizableTall a -> Rational
[_frac] :: ResizableTall a -> Rational
[_slaves] :: ResizableTall a -> [Rational]
[MirrorShrink] :: MirrorResize
[MirrorExpand] :: MirrorResize
[OneBig] :: Float -> Float -> OneBig a
[Toggle] :: t -> Toggle a
[EOT] :: EOT
[MosaicAlt] :: Params -> MosaicAlt a
[Taller] :: Aspect
[Wider] :: Aspect
[Reset] :: Aspect
[SlopeMod] :: ([Rational] -> [Rational]) -> Aspect
[IncLayoutN] :: Int -> IncLayoutN
[Abs] :: Int -> SubMeasure
[Rel] :: Rational -> SubMeasure
[SubBox] :: SubMeasure -> SubMeasure -> SubMeasure -> SubMeasure -> SubBox
[Grid] :: Bool -> Grid a
[GridRatio] :: Double -> Bool -> Grid a
[Simplest] :: Simplest a
[ToEnclosing] :: SomeMessage -> GroupsMessage
[ToGroup] :: Int -> SomeMessage -> GroupsMessage
[ToFocused] :: SomeMessage -> GroupsMessage
[ToAll] :: SomeMessage -> GroupsMessage
[Refocus] :: GroupsMessage
[Modify] :: ModifySpec -> GroupsMessage
[G] :: WithID l a -> Zipper a -> Group l a
[gLayout] :: Group l a -> WithID l a
[gZipper] :: Group l a -> Zipper a
[IncMasterRows] :: !Int -> ChangeMasterGridGeom
[IncMasterCols] :: !Int -> ChangeMasterGridGeom
[SetMasterRows] :: !Int -> ChangeMasterGridGeom
[SetMasterCols] :: !Int -> ChangeMasterGridGeom
[SetMasterFraction] :: !Rational -> ChangeMasterGridGeom
[SetGridAspect] :: !Rational -> ChangeGridGeom
[ChangeGridAspect] :: !Rational -> ChangeGridGeom
[Grid] :: !Rational -> Grid a
[TallGrid] :: !Int -> !Int -> !Rational -> !Rational -> !Rational -> TallGrid a
[SplitGrid] :: Orientation -> !Int -> !Int -> !Rational -> !Rational -> !Rational -> SplitGrid a
[T] :: Orientation
[B] :: Orientation
[L] :: Orientation
[R] :: Orientation
[Grid] :: Grid a
[GridRatio] :: Double -> Grid a
[FixedColumn] :: !Int -> !Int -> !Int -> !Int -> FixedColumn a
[Dishes] :: Int -> Rational -> Dishes a
[I] :: (m a) -> Invisible m a
[Cross] :: !Rational -> !Rational -> Cross a
[crossProp] :: Cross a -> !Rational
[crossInc] :: Cross a -> !Rational
[Column] :: Float -> Column a
[Circle] :: Circle a
[Newer] :: Focus
[Older] :: Focus
[Master] :: Position
[End] :: Position
[Above] :: Position
[Below] :: Position
[Title] :: String -> Property
[ClassName] :: String -> Property
[Resource] :: String -> Property
[Role] :: String -> Property
[Machine] :: String -> Property
[And] :: Property -> Property -> Property
[Or] :: Property -> Property -> Property
[Not] :: Property -> Property
[Const] :: Bool -> Property
[LayoutP] :: (Maybe a) -> (Maybe a) -> p -> SubBox -> (Maybe SubBox) -> (l1 a) -> (Maybe (l2 a)) -> LayoutP p l1 l2 a
[Proxy] :: Proxy a
[TwoPane] :: Rational -> Rational -> TwoPane a
[HintedTile] :: !Int -> !Rational -> !Rational -> !Alignment -> !Orientation -> HintedTile a
[nmaster] :: HintedTile a -> !Int
[delta] :: HintedTile a -> !Rational
[frac] :: HintedTile a -> !Rational
[alignment] :: HintedTile a -> !Alignment
[orientation] :: HintedTile a -> !Orientation
[Wide] :: Orientation
[Tall] :: Orientation
[TopLeft] :: Alignment
[Center] :: Alignment
[BottomRight] :: Alignment
[ToggleLayout] :: ToggleLayout
[Toggle] :: String -> ToggleLayout
[Square] :: Square a
[Accordion] :: Accordion a
[ModifiedLayout] :: (m a) -> (l a) -> ModifiedLayout m l a
[Combine] :: With -> Ambiguity -> Ambiguity -> Ambiguity
[OnlyFloat] :: Ambiguity
[Never] :: Ambiguity
[EmptyScreen] :: Ambiguity
[OtherIndicated] :: Ambiguity
[Screen] :: Ambiguity
[Union] :: With
[Difference] :: With
[Intersection] :: With
[UpdateBoring] :: UpdateBoring
[Replace] :: String -> [Window] -> BoringMessage
[Merge] :: String -> [Window] -> BoringMessage
[DraggingWindow] :: Window -> Rectangle -> DraggingVisualizerMsg
[DraggingStopped] :: DraggingVisualizerMsg
[CutLeft] :: Int -> Rename a
[CutRight] :: Int -> Rename a
[Append] :: String -> Rename a
[Prepend] :: String -> Rename a
[CutWordsLeft] :: Int -> Rename a
[CutWordsRight] :: Int -> Rename a
[AppendWords] :: String -> Rename a
[PrependWords] :: String -> Rename a
[Replace] :: String -> Rename a
[Chain] :: [Rename a] -> Rename a
[Escape] :: SomeMessage -> EscapedMessage
[Title] :: String -> Property
[ClassName] :: String -> Property
[Resource] :: String -> Property
[Role] :: String -> Property
[Machine] :: String -> Property
[And] :: Property -> Property -> Property
[Or] :: Property -> Property -> Property
[Not] :: Property -> Property
[Const] :: Bool -> Property
[IM] :: Rational -> Property -> IM a
[FULL] :: StdTransformers
[NBFULL] :: StdTransformers
[MIRROR] :: StdTransformers
[NOBORDERS] :: StdTransformers
[SMARTBORDERS] :: StdTransformers
[RestoreMinimizedWin] :: Window -> MinimizeMsg
[RestoreNextMinimizedWin] :: MinimizeMsg
[RestoreMinimized] :: RestoreMinimized
[UpperLeft] :: Corner
[UpperRight] :: Corner
[LowerLeft] :: Corner
[LowerRight] :: Corner
[NamedAction] :: a -> NamedAction
[SC] :: Side
[NC] :: Side
[CE] :: Side
[CW] :: Side
[SE] :: Side
[SW] :: Side
[NE] :: Side
[NW] :: Side
[C] :: Side
[AddFullscreen] :: Window -> FullscreenMessage
[RemoveFullscreen] :: Window -> FullscreenMessage
[FullscreenChanged] :: FullscreenMessage
[Monitor] :: Property -> Rectangle -> Bool -> String -> Bool -> Rational -> Monitor a
[prop] :: Monitor a -> Property
[rect] :: Monitor a -> Rectangle
[visible] :: Monitor a -> Bool
[name] :: Monitor a -> String
[persistent] :: Monitor a -> Bool
[opacity] :: Monitor a -> Rational
[Title] :: String -> Property
[ClassName] :: String -> Property
[Resource] :: String -> Property
[Role] :: String -> Property
[Machine] :: String -> Property
[And] :: Property -> Property -> Property
[Or] :: Property -> Property -> Property
[Not] :: Property -> Property
[Const] :: Bool -> Property
[ToggleMonitor] :: MonitorMessage
[ShowMonitor] :: MonitorMessage
[HideMonitor] :: MonitorMessage
[ToggleMonitorNamed] :: String -> MonitorMessage
[ShowMonitorNamed] :: String -> MonitorMessage
[HideMonitorNamed] :: String -> MonitorMessage
[RGB] :: Int -> Int -> RandomColor
[HSV] :: Double -> Double -> RandomColor
[P] :: Int -> PhysicalScreen
[FocusNew] :: Focus
[FocusCurrent] :: Focus
[FocusTag] :: WorkspaceId -> Focus
[FocusTagVisible] :: WorkspaceId -> Focus
[ToLeft] :: Direction
[ToUp] :: Direction
[ToRight] :: Direction
[ToDown] :: Direction
[Finite] :: Limits
[Circular] :: Limits
[Linear] :: Limits
[GConf] :: Lines
[Lines] :: Int -> Lines
[Core] :: FontStruct -> XMonadFont
[Utf8] :: FontSet -> XMonadFont
[Xft] :: XftFont -> XMonadFont
[AlignCenter] :: Align
[AlignRight] :: Align
[AlignLeft] :: Align
[AlignRightOffset] :: Int -> Align
[OffsetLeft] :: Int -> Int -> Placement
[OffsetRight] :: Int -> Int -> Placement
[CenterLeft] :: Int -> Placement
[CenterRight] :: Int -> Placement
[DeArrange] :: WindowArrangerMsg
[Arrange] :: WindowArrangerMsg
[IncreaseLeft] :: Int -> WindowArrangerMsg
[IncreaseRight] :: Int -> WindowArrangerMsg
[IncreaseUp] :: Int -> WindowArrangerMsg
[IncreaseDown] :: Int -> WindowArrangerMsg
[DecreaseLeft] :: Int -> WindowArrangerMsg
[DecreaseRight] :: Int -> WindowArrangerMsg
[DecreaseUp] :: Int -> WindowArrangerMsg
[DecreaseDown] :: Int -> WindowArrangerMsg
[MoveLeft] :: Int -> WindowArrangerMsg
[MoveRight] :: Int -> WindowArrangerMsg
[MoveUp] :: Int -> WindowArrangerMsg
[MoveDown] :: Int -> WindowArrangerMsg
[SetGeometry] :: Rectangle -> WindowArrangerMsg
[Nearest] :: PointerPosition
[Relative] :: Rational -> Rational -> PointerPosition
[TowardsCentre] :: Rational -> Rational -> PointerPosition
[MagnifyMore] :: MagnifyMsg
[MagnifyLess] :: MagnifyMsg
[ToggleOn] :: MagnifyMsg
[ToggleOff] :: MagnifyMsg
[Toggle] :: MagnifyMsg
[ShrinkSlave] :: MRTMessage
[ExpandSlave] :: MRTMessage
[FixedDragger] :: Dimension -> Dimension -> DraggerType
[gapWidth] :: DraggerType -> Dimension
[draggerWidth] :: DraggerType -> Dimension
[BordersDragger] :: DraggerType
[SWNC] :: String -> String -> String -> Rational -> SWNConfig
[swn_font] :: SWNConfig -> String
[swn_bgcolor] :: SWNConfig -> String
[swn_color] :: SWNConfig -> String
[swn_fade] :: SWNConfig -> Rational
[Horizontal] :: DragType
[Vertical] :: DragType
[REFLECTX] :: REFLECTX
[REFLECTY] :: REFLECTY
[Forward] :: Direction
[Backward] :: Direction
[History] :: Direction
[KeymapTable] :: [((KeyMask, KeySym), (KeyMask, KeySym))] -> KeymapTable
[STC] :: String -> String -> String -> ShowTextConfig
[st_font] :: ShowTextConfig -> String
[st_bg] :: ShowTextConfig -> String
[st_fg] :: ShowTextConfig -> String
[UrgencyConfig] :: SuppressWhen -> RemindWhen -> UrgencyConfig
[suppressWhen] :: UrgencyConfig -> SuppressWhen
[remindWhen] :: UrgencyConfig -> RemindWhen
[Visible] :: SuppressWhen
[OnScreen] :: SuppressWhen
[Focused] :: SuppressWhen
[Never] :: SuppressWhen
[Dont] :: RemindWhen
[Repeatedly] :: Int -> Interval -> RemindWhen
[Every] :: Interval -> RemindWhen
[DzenUrgencyHook] :: Int -> [String] -> DzenUrgencyHook
[duration] :: DzenUrgencyHook -> Int
[args] :: DzenUrgencyHook -> [String]
[NoUrgencyHook] :: NoUrgencyHook
[BorderUrgencyHook] :: !String -> BorderUrgencyHook
[urgencyBorderColor] :: BorderUrgencyHook -> !String
[FocusHook] :: FocusHook
[StdoutUrgencyHook] :: StdoutUrgencyHook
[SpawnUrgencyHook] :: String -> SpawnUrgencyHook
[Theme] :: String -> String -> String -> String -> String -> String -> String -> String -> String -> String -> Dimension -> Dimension -> [(String, Align)] -> [([[Bool]], Placement)] -> Theme
[activeColor] :: Theme -> String
[inactiveColor] :: Theme -> String
[urgentColor] :: Theme -> String
[activeBorderColor] :: Theme -> String
[inactiveBorderColor] :: Theme -> String
[urgentBorderColor] :: Theme -> String
[activeTextColor] :: Theme -> String
[inactiveTextColor] :: Theme -> String
[urgentTextColor] :: Theme -> String
[fontName] :: Theme -> String
[decoWidth] :: Theme -> Dimension
[decoHeight] :: Theme -> Dimension
[windowTitleAddons] :: Theme -> [(String, Align)]
[windowTitleIcons] :: Theme -> [([[Bool]], Placement)]
[SetTheme] :: Theme -> DecorationMsg
[DefaultDecoration] :: DefaultDecoration a
[CustomShrink] :: CustomShrink
[MR] :: [((a, Rectangle), Maybe a)] -> MouseResize a
[Theme] :: String -> String -> String -> String -> String -> String -> String -> String -> String -> String -> Dimension -> Dimension -> [(String, Align)] -> [([[Bool]], Placement)] -> Theme
[activeColor] :: Theme -> String
[inactiveColor] :: Theme -> String
[urgentColor] :: Theme -> String
[activeBorderColor] :: Theme -> String
[inactiveBorderColor] :: Theme -> String
[urgentBorderColor] :: Theme -> String
[activeTextColor] :: Theme -> String
[inactiveTextColor] :: Theme -> String
[urgentTextColor] :: Theme -> String
[fontName] :: Theme -> String
[decoWidth] :: Theme -> Dimension
[decoHeight] :: Theme -> Dimension
[windowTitleAddons] :: Theme -> [(String, Align)]
[windowTitleIcons] :: Theme -> [([[Bool]], Placement)]
[Tabbed] :: TabbarLocation -> TabbarShown -> TabbedDecoration a
[CustomShrink] :: CustomShrink
[TI] :: String -> String -> String -> Theme -> ThemeInfo
[themeName] :: ThemeInfo -> String
[themeAuthor] :: ThemeInfo -> String
[themeDescription] :: ThemeInfo -> String
[theme] :: ThemeInfo -> Theme
[BR] :: (Map Window RectWithBorders) -> BorderResize a
[Theme] :: String -> String -> String -> String -> String -> String -> String -> String -> String -> String -> Dimension -> Dimension -> [(String, Align)] -> [([[Bool]], Placement)] -> Theme
[activeColor] :: Theme -> String
[inactiveColor] :: Theme -> String
[urgentColor] :: Theme -> String
[activeBorderColor] :: Theme -> String
[inactiveBorderColor] :: Theme -> String
[urgentBorderColor] :: Theme -> String
[activeTextColor] :: Theme -> String
[inactiveTextColor] :: Theme -> String
[urgentTextColor] :: Theme -> String
[fontName] :: Theme -> String
[decoWidth] :: Theme -> Dimension
[decoHeight] :: Theme -> Dimension
[windowTitleAddons] :: Theme -> [(String, Align)]
[windowTitleIcons] :: Theme -> [([[Bool]], Placement)]
[Dwm] :: DwmStyle a
[CustomShrink] :: CustomShrink
[Theme] :: String -> String -> String -> String -> String -> String -> String -> String -> String -> String -> Dimension -> Dimension -> [(String, Align)] -> [([[Bool]], Placement)] -> Theme
[activeColor] :: Theme -> String
[inactiveColor] :: Theme -> String
[urgentColor] :: Theme -> String
[activeBorderColor] :: Theme -> String
[inactiveBorderColor] :: Theme -> String
[urgentBorderColor] :: Theme -> String
[activeTextColor] :: Theme -> String
[inactiveTextColor] :: Theme -> String
[urgentTextColor] :: Theme -> String
[fontName] :: Theme -> String
[decoWidth] :: Theme -> Dimension
[decoHeight] :: Theme -> Dimension
[windowTitleAddons] :: Theme -> [(String, Align)]
[windowTitleIcons] :: Theme -> [([[Bool]], Placement)]
[Simple] :: Bool -> SimpleDecoration a
[CustomShrink] :: CustomShrink
[Simple] :: Bool -> SimpleDecoration a
[SF] :: Dimension -> SimpleFloat a
[CustomShrink] :: CustomShrink
[Zoom] :: Rational -> ZoomMessage
[ZoomTo] :: Rational -> ZoomMessage
[ZoomFull] :: Bool -> ZoomMessage
[ZoomFullToggle] :: ZoomMessage
[ClassEQ] :: ClassEQ a
[ResizeScreen] :: ResizeMode -> Int -> ResizeScreen a
[WithNewScreen] :: Rectangle -> ResizeScreen a
[Workscreen] :: Int -> [WorkspaceId] -> Workscreen
[workscreenId] :: Workscreen -> Int
[workspaces] :: Workscreen -> [WorkspaceId]
[SCUpperLeft] :: ScreenCorner
[SCUpperRight] :: ScreenCorner
[SCLowerLeft] :: ScreenCorner
[SCLowerRight] :: ScreenCorner
[Next] :: Direction1D
[Prev] :: Direction1D
[U] :: Direction2D
[D] :: Direction2D
[R] :: Direction2D
[L] :: Direction2D
[XPT] :: p -> XPType
[Top] :: XPPosition
[Bottom] :: XPPosition
[XPC] :: String -> String -> String -> String -> String -> String -> !Dimension -> XPPosition -> !Bool -> !Dimension -> !Int -> ([String] -> [String]) -> Map (KeyMask, KeySym) (XP ()) -> KeySym -> KeySym -> String -> Maybe Int -> Bool -> (String -> String -> Bool) -> XPConfig
[font] :: XPConfig -> String
[bgColor] :: XPConfig -> String
[fgColor] :: XPConfig -> String
[fgHLight] :: XPConfig -> String
[bgHLight] :: XPConfig -> String
[borderColor] :: XPConfig -> String
[promptBorderWidth] :: XPConfig -> !Dimension
[position] :: XPConfig -> XPPosition
[alwaysHighlight] :: XPConfig -> !Bool
[height] :: XPConfig -> !Dimension
[historySize] :: XPConfig -> !Int
[historyFilter] :: XPConfig -> [String] -> [String]
[promptKeymap] :: XPConfig -> Map (KeyMask, KeySym) (XP ())
[completionKey] :: XPConfig -> KeySym
[changeModeKey] :: XPConfig -> KeySym
[defaultText] :: XPConfig -> String
[autoComplete] :: XPConfig -> Maybe Int
[showCompletionOnTab] :: XPConfig -> Bool
[searchPredicate] :: XPConfig -> String -> String -> Bool
[Next] :: Direction1D
[Prev] :: Direction1D
[Wor] :: String -> Wor
[LauncherConfig] :: String -> String -> LauncherConfig
[browser] :: LauncherConfig -> String
[pathToHoogle] :: LauncherConfig -> String
[Shell] :: Shell
[SearchEngine] :: Name -> Site -> SearchEngine
[TabBar] :: XPPosition -> TabBarDecoration a
[Top] :: XPPosition
[Bottom] :: XPPosition
[ToggleStruts] :: ToggleStruts
[ToggleStrut] :: Direction2D -> ToggleStruts
[SetStruts] :: [Direction2D] -> [Direction2D] -> SetStruts
[addedStruts] :: SetStruts -> [Direction2D]
[removedStruts] :: SetStruts -> [Direction2D]
[U] :: Direction2D
[D] :: Direction2D
[R] :: Direction2D
[L] :: Direction2D
[PP] :: (WorkspaceId -> String) -> (WorkspaceId -> String) -> (WorkspaceId -> String) -> (WorkspaceId -> String) -> (WorkspaceId -> String) -> String -> String -> (String -> String) -> (String -> String) -> (String -> String) -> ([String] -> [String]) -> X ([WindowSpace] -> [WindowSpace]) -> [X (Maybe String)] -> (String -> IO ()) -> PP
[ppCurrent] :: PP -> WorkspaceId -> String
[ppVisible] :: PP -> WorkspaceId -> String
[ppHidden] :: PP -> WorkspaceId -> String
[ppHiddenNoWindows] :: PP -> WorkspaceId -> String
[ppUrgent] :: PP -> WorkspaceId -> String
[ppSep] :: PP -> String
[ppWsSep] :: PP -> String
[ppTitle] :: PP -> String -> String
[ppTitleSanitize] :: PP -> String -> String
[ppLayout] :: PP -> String -> String
[ppOrder] :: PP -> [String] -> [String]
[ppSort] :: PP -> X ([WindowSpace] -> [WindowSpace])
[ppExtras] :: PP -> [X (Maybe String)]
[ppOutput] :: PP -> String -> IO ()
[TopicConfig] :: Map Topic Dir -> Map Topic (X ()) -> (Topic -> X ()) -> Topic -> Int -> TopicConfig
[topicDirs] :: TopicConfig -> Map Topic Dir
[topicActions] :: TopicConfig -> Map Topic (X ())
[defaultTopicAction] :: TopicConfig -> Topic -> X ()
[defaultTopic] :: TopicConfig -> Topic
[maxTopicHistory] :: TopicConfig -> Int
[NS] :: String -> String -> Query Bool -> ManageHook -> NamedScratchpad
[name] :: NamedScratchpad -> String
[cmd] :: NamedScratchpad -> String
[query] :: NamedScratchpad -> Query Bool
[hook] :: NamedScratchpad -> ManageHook
[U] :: Direction2D
[D] :: Direction2D
[R] :: Direction2D
[L] :: Direction2D
[Navigation2DConfig] :: Navigation2D -> Navigation2D -> Navigation2D -> [(String, Navigation2D)] -> [(String, Screen -> Window -> X (Maybe Rectangle))] -> Navigation2DConfig
[defaultTiledNavigation] :: Navigation2DConfig -> Navigation2D
[floatNavigation] :: Navigation2DConfig -> Navigation2D
[screenNavigation] :: Navigation2DConfig -> Navigation2D
[layoutNavigation] :: Navigation2DConfig -> [(String, Navigation2D)]
[unmappedWindowRect] :: Navigation2DConfig -> [(String, Screen -> Window -> X (Maybe Rectangle))]
[U] :: Direction2D
[D] :: Direction2D
[R] :: Direction2D
[L] :: Direction2D
[WNGo] :: Direction2D -> WNAction
[WNSwap] :: Direction2D -> WNAction
[U] :: Direction2D
[D] :: Direction2D
[R] :: Direction2D
[L] :: Direction2D
[Go] :: Direction2D -> Navigate
[Swap] :: Direction2D -> Navigate
[Move] :: Direction2D -> Navigate
[Apply] :: (Window -> X ()) -> Direction2D -> Navigate
[U] :: Direction2D
[D] :: Direction2D
[R] :: Direction2D
[L] :: Direction2D
[MoveWindowToWindow] :: a -> a -> MoveWindowToWindow a
[SwapWindow] :: SwapWindow
[SwapWindowN] :: Int -> SwapWindow
[Title] :: String -> Property
[ClassName] :: String -> Property
[Resource] :: String -> Property
[Role] :: String -> Property
[Machine] :: String -> Property
[And] :: Property -> Property -> Property
[Or] :: Property -> Property -> Property
[Not] :: Property -> Property
[Const] :: Bool -> Property
[U] :: Direction2D
[D] :: Direction2D
[R] :: Direction2D
[L] :: Direction2D
[ToggleGaps] :: GapMessage
[ToggleGap] :: !Direction2D -> GapMessage
[IncGap] :: !Int -> !Direction2D -> GapMessage
[DecGap] :: !Int -> !Direction2D -> GapMessage
[UnMerge] :: a -> GroupMsg a
[UnMergeAll] :: a -> GroupMsg a
[Merge] :: a -> a -> GroupMsg a
[MergeAll] :: a -> GroupMsg a
[Migrate] :: a -> a -> GroupMsg a
[WithGroup] :: (Stack a -> X (Stack a)) -> a -> GroupMsg a
[SubMessage] :: SomeMessage -> a -> GroupMsg a
[Broadcast] :: SomeMessage -> Broadcast
[Next] :: Direction1D
[Prev] :: Direction1D
[EmptyWS] :: WSType
[NonEmptyWS] :: WSType
[HiddenWS] :: WSType
[HiddenNonEmptyWS] :: WSType
[AnyWS] :: WSType
[WSTagGroup] :: Char -> WSType
[WSIs] :: (X (WindowSpace -> Bool)) -> WSType
[Next] :: Direction1D
[Prev] :: Direction1D
[GSConfig] :: Integer -> Integer -> Integer -> (a -> Bool -> X (String, String)) -> String -> TwoD a (Maybe a) -> Double -> Double -> GSConfig a
[gs_cellheight] :: GSConfig a -> Integer
[gs_cellwidth] :: GSConfig a -> Integer
[gs_cellpadding] :: GSConfig a -> Integer
[gs_colorizer] :: GSConfig a -> a -> Bool -> X (String, String)
[gs_font] :: GSConfig a -> String
[gs_navigate] :: GSConfig a -> TwoD a (Maybe a)
[gs_originFractX] :: GSConfig a -> Double
[gs_originFractY] :: GSConfig a -> Double
[ServerMode] :: ServerMode
[JumpToLayout] :: String -> JumpToLayout
[NextLayoutNoWrap] :: JumpToLayout
[Wrap] :: JumpToLayout
[TTC] :: Int -> Rational -> Rational -> Int -> Rational -> Rational -> s -> Theme -> TiledTabsConfig s
[vNMaster] :: TiledTabsConfig s -> Int
[vRatio] :: TiledTabsConfig s -> Rational
[vIncrement] :: TiledTabsConfig s -> Rational
[hNMaster] :: TiledTabsConfig s -> Int
[hRatio] :: TiledTabsConfig s -> Rational
[hIncrement] :: TiledTabsConfig s -> Rational
[tabsShrinker] :: TiledTabsConfig s -> s
[tabsTheme] :: TiledTabsConfig s -> Theme
[GroupEQ] :: GroupEQ a
