type Abacate = Feature
type Header = Text
type FeatureElements = [FeatureElement]
type Background = BasicScenario
type Tags = [Tag]
type Tag = Text
type Comment = Text
type Steps = [Step]
type ExamplesSection = [Examples]
type PyString = Text
type Table = [Row]
type Row = [Cell]
type Cell = Text
type Abc_Cex_t = Ptr (Abc_Cex_t_)
type Vec_Int_t = Ptr (Vec_Int_t_)
type Vec_Ptr_t = Ptr (Vec_Ptr_t_)
type Gia_Man_t = Ptr (Gia_Man_t_)
type Gia_Obj_t = Ptr (Gia_Obj_t_)
type Cec_ManPat_t = Ptr (Cec_ManPat_t_)
type Aig_Man_t = Ptr (Aig_Man_t_)
type Aig_Obj_t = Ptr (Aig_Obj_t_)
type Cnf_Dat_t = Ptr (Cnf_Dat_t_)
type Cnf_Man_t = ForeignPtr (Cnf_Man_t_)
type Gia_AigMap_t = Ptr Aig_Obj_t
type Abc_Ntk_t = Ptr (Abc_Ntk_t_)
type Abc_Obj_t = Ptr (Abc_Obj_t_)
type Nm_Man_t = Ptr (Nm_Man_t_)
type AIGLit = Lit
type GIALit = Lit
type TuneBody = [Music]
type ChordSymbol = String
type Abort r = AbortT r Identity
type S = SingleEnd
type D = DoubleEnd
type NT = Nonthreadsafe
type T = Threadsafe
type Queue a = Deque Nonthreadsafe Nonthreadsafe SingleEnd SingleEnd Grow Safe a
type ConcQueue a = Deque Threadsafe Threadsafe SingleEnd SingleEnd Grow Safe a
type ConcDeque a = Deque Threadsafe Threadsafe DoubleEnd DoubleEnd Grow Safe a
type WSDeque a = Deque Nonthreadsafe Threadsafe DoubleEnd SingleEnd Grow Safe a
type View0 v o φ = View v o Z φ
type Tm0 o = Tm o Z
type Ctx = [(Var, Tm0 Lang)]
type ColourMap = [(Double, Colour)]
type Coord = Int
type Channel = Word8
type Coord = Int
type Channel = Word8
type Scalar = Double
type Scalar e = Array DIM0 e
type Vector e = Array DIM1 e
type Segments i = Vector i
type DIM0 = Z
type DIM1 = DIM0 :. Int
type DIM2 = DIM1 :. Int
type DIM3 = DIM2 :. Int
type DIM4 = DIM3 :. Int
type DIM5 = DIM4 :. Int
type DIM6 = DIM5 :. Int
type DIM7 = DIM6 :. Int
type DIM8 = DIM7 :. Int
type DIM9 = DIM8 :. Int
type Stencil3 a = (Exp a, Exp a, Exp a)
type Stencil5 a = (Exp a, Exp a, Exp a, Exp a, Exp a)
type Stencil7 a = (Exp a, Exp a, Exp a, Exp a, Exp a, Exp a, Exp a)
type Stencil9 a = (Exp a, Exp a, Exp a, Exp a, Exp a, Exp a, Exp a, Exp a, Exp a)
type Stencil3x3 a = (Stencil3 a, Stencil3 a, Stencil3 a)
type Stencil5x3 a = (Stencil5 a, Stencil5 a, Stencil5 a)
type Stencil3x5 a = (Stencil3 a, Stencil3 a, Stencil3 a, Stencil3 a, Stencil3 a)
type Stencil5x5 a = (Stencil5 a, Stencil5 a, Stencil5 a, Stencil5 a, Stencil5 a)
type Stencil3x3x3 a = (Stencil3x3 a, Stencil3x3 a, Stencil3x3 a)
type Stencil5x3x3 a = (Stencil5x3 a, Stencil5x3 a, Stencil5x3 a)
type Stencil3x5x3 a = (Stencil3x5 a, Stencil3x5 a, Stencil3x5 a)
type Stencil3x3x5 a = (Stencil3x3 a, Stencil3x3 a, Stencil3x3 a, Stencil3x3 a, Stencil3x3 a)
type Stencil5x5x3 a = (Stencil5x5 a, Stencil5x5 a, Stencil5x5 a)
type Stencil5x3x5 a = (Stencil5x3 a, Stencil5x3 a, Stencil5x3 a, Stencil5x3 a, Stencil5x3 a)
type Stencil3x5x5 a = (Stencil3x5 a, Stencil3x5 a, Stencil3x5 a, Stencil3x5 a, Stencil3x5 a)
type Stencil5x5x5 a = (Stencil5x5 a, Stencil5x5 a, Stencil5x5 a, Stencil5x5 a, Stencil5x5 a)
type Scalar ix a = Acc (Array ix a)
type Vector ix a = Acc (Array (ix :. Int) a)
type Matrix ix a = Acc (Array ((ix :. Int) :. Int) a)
type Interpolator13 a = (a, a) -> (a, a) -> (a, a) -> (a, a) -> a -> a
type Transform sh a = Array sh a -> Array sh a
type Element a = (FFTWReal a, Elt a, BlockPtrs (EltRepr a) ~ ((), Ptr a), BlockPtrs (EltRepr' a) ~ Ptr a)
type Transform2 sh a = Acc (Array sh a) -> Acc (Array sh a) -> Acc (Array sh a)
type Transform sh a = Acc (Array sh a) -> Acc (Array sh a)
type Transform sh a = Acc (Array sh a) -> Acc (Array sh a)
type Transform sh a = Acc (Array sh a) -> Acc (Array sh a)
type Transform2 sh a = Acc (Array sh a) -> Acc (Array sh a) -> Acc (Array sh a)
type Transform sh a = Acc (Array sh a) -> Acc (Array sh a)
type PlanMap = Map Integer Plan
type CacheMap a = Map (Integer, Direction) (Cache a)
type RGBA32 = Word32
type BlockCopyFun e = Ptr e -> Int -> IO ()
type Lang = ByteString
type Locale = ByteString
type EventResult ev = MethodResult ev
type EventState ev = MethodState ev
type EventResult ev = MethodResult ev
type EventState ev = MethodState ev
type All = AllT Identity
type EvilInvention a b = (TrappedAgent, a) -> b
type Pointful = () + ((), ())
type Schönfinkel = Schoenfinkel
type WrappedSchönfinkel = WrappedSchoenfinkel
type StrTok s = StrTokT s Identity
type TimeMachine = Undoable Universe
type AtomicTimeMachine = Undoable Entanglement
type Lens' a b = forall f. Functor f => (b -> f b) -> (a -> f a)
type Tag = IORef ()
type Code_RHS a = IO a
type CompClause act rmsg code = rmsg -> act -> IO (Maybe (Code_RHS code))
type HashIdx = Int
type PID msg = (Chan msg, MVar ThreadId)
type Location msg = IORef (Item (InternalMsg msg))
type NoSignature = ()
type InternalSignature = Either PrivateKey ExternalSignature
type ExternalSignature = Maybe (Signature, SignatureStatus)
type MessageID = String
type MessageIDGenerator g = g -> [MessageID]
type TTL = Word16
type Delay = Word
type UnsignedMessage = ProtocolMessage NoSignature
type InternalMessage = ProtocolMessage InternalSignature
type ExternalMessage = ProtocolMessage ExternalSignature
type Sub a = Map Weight (Set a)
type SubMap a = Map a (Sub a)
type Word a = Vector a
type Pos = Int
type Weight = Double
type Cont r = ContsT r Identity Identity
type Conts r w = ContsT r w Identity
type Adjoint f g = AdjointT f g Identity
type Adjoint f g = AdjointT f g Identity
type Adjoint f g = AdjointT f g Identity
type Reader f = ReaderT f Identity
type State g = StateT g Identity
type Store g = StoreT g Identity
type SymbolID = (Int, Int)
type Dim1 = [SymbolID] -> [SymbolID]
type Dim2 = [SymbolID] -> ([SymbolID], [SymbolID])
type Subword = [Int]
type Parser a b = Array Int a -> Subword -> [b]
type RichParser a b = (ParserInfo, Parser a b)
type SubwordConstructionAlgorithm a = a -> [ParserInfo] -> Subword -> [SubwordTree]
type Filter a = Array Int a -> Subword -> Bool
type YieldAnalysisAlgorithm a = a -> [ParserInfo] -> ParserInfo
type YieldSize = (Int, Maybe Int)
type YieldSizeMap = Map (Int, Int) YieldSize
type Choice = Name -> Name -> Q Exp
type ZS2 = (Z :. Subword) :. Subword
type QueryId = Int
type ERProcessName = String
type ERProcessDeploy sInAnyProt sOutAnyProt = ERProcessName -> [sInAnyProt] -> [sOutAnyProt] -> (ERProcessExpandCallback sInAnyProt sOutAnyProt) -> IO ()
type ERProcessExpandCallback sInAnyProt sOutAnyProt = String -> [(ChannelType, Int)] -> [(ChannelType, Int)] -> [(ERProcess sInAnyProt sOutAnyProt, ([Int], [Int]))] -> IO ()
type ManagerName = String
type ManagerID = String
type Precision = ExtendedInteger
type Granularity = Int
type EffortIndex = Integer
type VarID = Int
type Box ira = IntMap ira
type RAPropTupleUnary ira = ira -> String -> ((Ix20, RAThin ira) -> Bool, (Ix20, RAConsistent ira) -> Bool, (Ix20, RAThin ira) -> Bool, (Ix20, RAConsistent ira) -> Bool, (Ix20, RADirected ira) -> Bool)
type B = BMAP
type BM = Double
type BAP = ERFloat
type BMAP = ERMachineAP BAP
type BR = ExtendedRational
type RA b = ERInterval b
type IRA b = ERInterval b
type TermKey box = box
type Depth = Int
type ValueSplitter box varid d v = EffortIndex -> Depth -> box -> v -> varid -> d -> (v, v)
type ValueCombiner box varid d v = EffortIndex -> Depth -> (BisectionTree box varid d v) -> v
type TermKey box = box
type P b = ERChebPoly (Box Int) b
type FAPU b = ERFnInterval (P b)
type FAPUOI b = ERFnIntervalOI (P b)
type FAPD b = ERFnDomTranslApprox (Box (DomTransl (IRA b))) VarID (FAPU b) (IRA b)
type FAPDOI b = ERFnDomTranslApprox (Box (DomTransl (IRA b))) VarID (FAPUOI b) (IRA b)
type FAPT b = ERFnTuple (FAPD b)
type FAPE b = ERFnDomEdgesApprox VarID (FAPT b)
type FAPWP b = ERFnPiecewise (Box (IRA b)) VarID (IRA b) (FAPE b)
type FA = FAPWP B
type AES s a = AEST (ST s) a
type AEST m a = ReaderT AESCtx (WriterT ByteString m) a
type Array = Vector Value
type Pair = (Text, Value)
type Object = HashMap Text Value
type Array = Vector Value
type Object = HashMap Text Value
type Parse err a = ParseT err Identity a
type Parse' a = Parse Void a
type ParseError' = ParseError Void
type ErrorSpecifics' = ErrorSpecifics Void
type Parse err a = ParseT err Identity a
type Parse' a = Parse Void a
type ParseError' = ParseError Void
type ErrorSpecifics' = ErrorSpecifics Void
type Path = [Key]
type Array = Vector Value
type Pair = (Text, Value)
type Object = Map Text Value
type Array = Vector Value
type Object = Map Text Value
type Code = [Declaration]
type Graph f ref = Map ref (f ref)
type ValidationError = String
type Code = [Declaration]
type Builder = Value -> Value
type Dimension a = Tagged a Int
type Improving a = StateT (Int, Int, [Int]) Gen a
type Strategy a = Int -> Dimension a -> Gen (Improving ())
type VarSet = IntSet
type Updater a = a -> Change a
type Comparable a = a -> a -> PartialOrdering
type Offset = Int
type SizeExpr = SizeExpr' Rigid Flex
type Constraint = Constraint' Rigid Flex
type Polarities flex = Map flex Polarity
type Solution rigid flex = Map flex (SizeExpr' rigid flex)
type CTrans r f = Constraint' r f -> Maybe [Constraint' r f]
type Hash = Word64
type AssocList k v = [(k, v)]
type Prefix a = [a]
type Suffix a = [a]
type Graph r f a = Graph (Node r f) (Node r f) a
type Edge' r f a = Edge (Node r f) (Node r f) a
type Key r f = Edge' r f ()
type Nodes r f = Nodes (Node r f)
type LabelledEdge r f = Edge' r f Label
type Graphs r f a = [Graph r f a]
type Hyp = Constraint
type Hyp' = Constraint'
type HypGraph r f = Graph r f Label
type ConGraph r f = Graph r f Label
type ConGraphs r f = Graphs r f Label
type Bound r f = Map f (Set (SizeExpr' r f))
type Relation a = a -> a -> Bool
type Prio = Int
type OKHandle blk = MM OKVal blk
type OKMeta blk = Metavar OKVal blk
type Undo = StateT [Restore] IO
type RefCreateEnv blk = StateT (IORef [SubConstraints blk], Int) IO
type BlkInfo blk = (Bool, Prio, Maybe blk)
type MetaEnv = IO
type HandleSol = IO ()
type SRes = Either Bool Int
type UId o = Metavar (Exp o) (RefInfo o)
type MyPB o = PB (RefInfo o)
type MyMB a o = MB a (RefInfo o)
type Nat = Int
type Clause o = ([Pat o], MExp o)
type ConstRef o = IORef (ConstDef o)
type MExp o = MM (Exp o) (RefInfo o)
type MArgList o = MM (ArgList o) (RefInfo o)
type ICExp o = Clos (MExp o) o
type CExp o = TrBr (ICExp o) o
type Ctx o = [(MId, CExp o)]
type EE = IO
type HNNBlks o = [HNExp o]
type CSPat o = HI (CSPatI o)
type CSCtx o = [HI (MId, MExp o)]
type Sol o = [(CSCtx o, [CSPat o], Maybe (MExp o))]
type ExceptT = ErrorT
type ClockTime = UTCTime
type Account = [Phase]
type Benchmark = Trie Phase CPUTime
type Cont r a = (a -> r) -> r
type Position = Position' SrcFile
type Interval = Interval' SrcFile
type Range = Range' SrcFile
type KillRangeT a = a -> a
type LexState = Int
type Named_ = Named RString
type NamedArg c a = Arg c (Named_ a)
type RawName = String
type RString = Ranged RawName
type Nat = Int
type Arity = Nat
type Parser = ReadP Char
type Notation = [GenPart]
type Matrix a = Array (Int, Int) a
type AdjList node edge = Map node [(node, edge)]
type NodeId = Int
type RigidId = Int
type FlexId = Int
type Scope = RigidId -> Bool
type Constraints = [Constraint]
type GM = State Graph
type Solution = Map Int SizeExpr
type ArgumentIndex = Int
type CallMatrix = CallMatrix' Order
type Node = Int
type Call cinfo = Edge Node Node (CMSet cinfo)
type Lens' i o = forall f. Functor f => (i -> f i) -> o -> f o
type LexAction r = PreviousInput -> CurrentInput -> TokenLength -> Parser r
type LexPredicate = ([LexState], ParseFlags) -> PreviousInput -> TokenLength -> CurrentInput -> Bool
type PreviousInput = AlexInput
type CurrentInput = AlexInput
type TokenLength = Int
type OptionsPragma = [String]
type Flag opts = opts -> Either String opts
type Verbosity = Trie String Int
type IncludeDirs = Either [FilePath] [AbsolutePath]
type SplitTree = SplitTree' QName
type SplitTrees = SplitTrees' QName
type SplitTrees' a = [(a, SplitTree' a)]
type LamBinding = LamBinding' TypedBindings
type TypedBindings = TypedBindings' TypedBinding
type TypedBinding = TypedBinding' Expr
type Telescope = [TypedBindings]
type TypeSignature = Declaration
type TypeSignatureOrInstanceBlock = Declaration
type Constructor = TypeSignature
type RewriteEqn = Expr
type WithExpr = Expr
type RHS = RHS' Expr
type WhereClause = WhereClause' [Declaration]
type Module = ([Pragma], [Declaration])
type Color = Expr
type Arg a = Arg Color a
type NamedArg a = NamedArg Color a
type ArgInfo = ArgInfo Color
type ScopeNameSpaces = [(NameSpaceId, NameSpace)]
type LocalVars = AssocList Name LocalVar
type ThingsInScope a = Map Name [a]
type NamesInScope = ThingsInScope AbstractName
type ModulesInScope = ThingsInScope AbstractModule
type Color = Expr
type Arg a = Arg Color a
type Dom a = Dom Color a
type NamedArg a = NamedArg Color a
type ArgInfo = ArgInfo Color
type Args = [NamedArg Expr]
type Assign = (Name, Expr)
type Assigns = [Assign]
type Ren a = Map a a
type TypeSignature = Declaration
type Constructor = TypeSignature
type Field = TypeSignature
type Telescope = [TypedBindings]
type Clause = Clause' LHS
type SpineClause = Clause' SpineLHS
type LHSCore = LHSCore' Expr
type Pattern = Pattern' Expr
type Patterns = [NamedArg Pattern]
type PatternSynDefn = ([Arg Name], Pattern)
type PatternSynDefns = Map QName PatternSynDefn
type Color = Term
type ArgInfo = ArgInfo Color
type Arg a = Arg Color a
type Dom a = Dom Color a
type NamedArg a = NamedArg Color a
type Args = [Arg Term]
type NamedArgs = [NamedArg Term]
type Elim = Elim' Term
type Elims = [Elim]
type ArgName = String
type Type = Type' Term
type Telescope = Tele (Dom Type)
type ClauseBody = ClauseBodyF Term
type PatVarName = ArgName
type Pattern = Pattern' PatVarName
type ConPatternInfo = Maybe (Bool, Arg Type)
type Var = String
type ForcedArgs = [Forced]
type RelevantArgs = [Relevance]
type Comment = String
type Inline = Bool
type GetDefsM b = ReaderT (GetDefsEnv b) (Writer b)
type BlockingVars = [BlockingVar]
type MatchLit = Literal -> MPat -> Match ()
type HighlightingInfo = CompressedFile
type NiceConstructor = NiceTypeSignature
type NiceTypeSignature = NiceDeclaration
type Nice = StateT NiceEnv (Either DeclarationException)
type Measure = Name
type DisambiguatedNames = IntMap QName
type ModuleToSource = Map TopLevelModuleName AbsolutePath
type SourceToModule = Map AbsolutePath TopLevelModuleName
type VisitedModules = Map TopLevelModuleName ModuleInfo
type DecodedModules = Map TopLevelModuleName Interface
type Constraints = [ProblemConstraint]
type MetaNameSuggestion = String
type MetaStore = Map MetaId MetaVariable
type InteractionPoints = Map InteractionId InteractionPoint
type Sections = Map ModuleName Section
type Definitions = HashMap QName Definition
type RewriteRules = [RewriteRule]
type HaskellCode = String
type HaskellType = String
type EpicCode = String
type JSCode = Exp
type MaybeReducedArgs = [MaybeReduced (Arg Term)]
type MaybeReducedElims = [MaybeReduced Elim]
type AllowedReductions = [AllowedReduction]
type FunctionInverse = FunctionInverse' Clause
type Statistics = Map String Integer
type InstanceTable = Map QName [QName]
type TempInstanceTable = (InstanceTable, [QName])
type BuiltinThings pf = Map String (Builtin pf)
type Context = [ContextEntry]
type LetBindings = Map Name (Open (Term, Dom Type))
type TCM = TCMT IO
type TelView = TelV Type
type ListTel' a = [Dom (a, Type)]
type ListTel = ListTel' ArgName
type InteractionOutputCallback = Response -> TCM ()
type SafeMode = Bool
type PersistentVerbosity = Verbosity
type VerboseKey = String
type AbsToCon = ReaderT Env TCM
type ScopeM = TCM
type Out = (Ren ModuleName, Ren QName)
type WSM = StateT Out ScopeM
type Offset = Nat
type SizeMaxView = [DeepSizeView]
type IM = TCMT (InputT IO)
type ModuleId = String
type DotM = StateT DotState TCM
type Compile = StateT CompileState
type NamedClause = QNamed Clause
type Doc = Doc
type HaskellKind = String
type Erasure = StateT ErasureState
type InjConstraints = Maybe [(QName, QName)]
type Substitution = [Maybe Term]
type FlexibleVars = [FlexibleVar Nat]
type Problem = Problem' (Permutation, [NamedArg Pattern])
type ProblemPart = Problem' ()
type MutualNames = [QName]
type Target = QName
type Guarded = Order
type DeBruijnPats = [DeBruijnPat]
type DeBruijnPat = DeBruijnPat' Int
type Result = [TerminationError]
type DeBruijnPat = DeBruijnPat' Int
type Frame = (CompiledClauses, MaybeReducedElims, Elims -> Elims)
type Stack = [Frame]
type Candidate = (Term, Type)
type Candidates = [Candidate]
type Vars = ([Nat], [Nat])
type Condition = Dom Type -> Abs Type -> Bool
type FVs = VarSet
type SubstCand = [(Nat, Term)]
type Res = [(Arg Nat, Term)]
type Occurrences = Map Item [OccursWhere]
type OccM = Reader OccEnv
type FromTermFunction a = Arg Term -> ReduceM (Reduced (MaybeReduced (Arg Term)) a)
type Op a = a -> a -> a
type Fun a = a -> a
type Rel a = a -> a -> Bool
type Pred a = a -> Bool
type UnifyEnv = UnifyMayPostpone
type UnifyOutput = Unifiable
type Sub = IntMap Term
type TermHH = HomHet Term
type TypeHH = HomHet Type
type TelHH = Tele (Dom TypeHH)
type TelViewHH = TelV TypeHH
type ArgsHH = HomHet Args
type DBSizeExpr = SizeExpr' NamedRigid SizeMeta
type SizeConstraint = Constraint' NamedRigid SizeMeta
type UnquoteM = ExceptionT UnquoteError TCM
type Cl = ([Arg Pattern], ClauseBody)
type Cls = [Cl]
type FinalChecks = Maybe (TCM ())
type Command a = (String, [String] -> TCM (ExitCode a))
type O = (Maybe Int, QName)
type MapS a b = (Map a b, [a])
type TOM = StateT S TCM
type OldInteractionScopes = Map InteractionId ScopeInfo
type CommandM = StateT CommandState TCM
type Interaction = Interaction' Range
type IOTCM = IOTCM' Range
type Parse a = ExceptT String (StateT String Identity) a
type GoalCommand = InteractionId -> Range -> String -> Interaction
type InstanceRegistration = Bool
type NewIndex = Bool
type AnyIndex = Bool
type NonDefaultContext = Bool
type BigEndian = Bool
type SysUptime = Word32
type Index = Word16
type NonRepeaters = Word16
type MaxRepeaters = Word16
type MIBTree = StateT Module
type Parent = String
type Name = String
type SubAgent = ReaderT SubAgentState IO
type AGI = AGIT IO
type LinEq = ([Int], [Int])
type Subst = [(Int, LinEq)]
type KeyLength = Int
type Getter s x = s -> x
type Setter s x = x -> s -> s
type Modifier s x = (x -> x) -> s -> s
type RegexResult = (String, (String, String))
type MatchList = [(Int, String)]
type APIKey = String
type Location = (FilePath, Int)
type Locations = NonEmpty Location
type APIKey = String
type Environment = String
type Handler s m a = Monad m => Webmachine s m a
type DiscretePDF a = [(a, Double)]
type FCFSResource = Resource FCFS
type LCFSResource = Resource LCFS
type SIROResource = Resource SIRO
type PriorityResource = Resource StaticPriorities
type FCFSResource = Resource FCFS
type LCFSResource = Resource LCFS
type SIROResource = Resource SIRO
type PriorityResource = Resource StaticPriorities
type FCFSQueue a = Queue FCFS FCFS FCFS a
type LCFSQueue a = Queue FCFS LCFS FCFS a
type SIROQueue a = Queue FCFS SIRO FCFS a
type PriorityQueue a = Queue FCFS StaticPriorities FCFS a
type FCFSQueue a = Queue FCFS FCFS a
type LCFSQueue a = Queue LCFS FCFS a
type SIROQueue a = Queue SIRO FCFS a
type PriorityQueue a = Queue StaticPriorities FCFS a
type ResultLocale = String
type ResultLocalisation = ResultId -> ResultDescription
type ResultDescription = String
type ResultTransform = Results -> Results
type ResultName = String
type ResultSourceMap = Map ResultName ResultSource
type ResultData e = Event e
type ResultSourcePrint = ResultSource -> Event ()
type ResultSourceShowS = ResultSource -> Event ShowS
type Histogram = [(Double, [Int])]
type BinningStrategy = [Double] -> Int
type WebPageGenerator a = ExperimentGenerator (WebPageRenderer a)
type FileGenerator a = ExperimentGenerator (FileRenderer a)
type FCFSResource m = Resource m FCFS
type LCFSResource m = Resource m LCFS
type SIROResource m = Resource m SIRO
type PriorityResource m = Resource m StaticPriorities
type FCFSQueue m a = Queue m FCFS FCFS FCFS a
type LCFSQueue m a = Queue m FCFS LCFS FCFS a
type SIROQueue m a = Queue m FCFS SIRO FCFS a
type PriorityQueue m a = Queue m FCFS StaticPriorities FCFS a
type FCFSQueue m a = Queue m FCFS FCFS a
type LCFSQueue m a = Queue m LCFS FCFS a
type SIROQueue m a = Queue m SIRO FCFS a
type PriorityQueue m a = Queue m StaticPriorities FCFS a
type ResultLocale = String
type ResultLocalisation = ResultId -> ResultDescription
type ResultDescription = String
type ResultTransform m = Results m -> Results m
type ResultName = String
type ResultSourceMap m = Map ResultName (ResultSource m)
type ResultData e m = Maybe (Event m e)
type ResultSourcePrint m = ResultSource m -> Event m ()
type ResultSourceShowS m = ResultSource m -> Event m ShowS
type T = Element
type Hash = ABCDE
type Key = Int
type FileType = ChunkType
type FileOffset = Word
type ChunkLength = Word
type SomeException' = SomeException
type VarName ni no a = VarNameT () ni no Identity a
type T = Info
type Uniq = UniqT Identity
type OptM = OptT Identity
type Tag = Atom
type WhizState = Either (Set Int) Int
type Class = Name
type IdMap = IntjectionMap Id
type IdSet = IntjectionSet Id
type HsName = Name
type LHsType = Located HsType
type HsContext = [HsAsst]
type LHsExp = Located HsExp
type LHsPat = Located HsPat
type Var = String
type Class = String
type Constructor = String
type IFunction = Body -> Doc
type TVr = TVr' E
type IdMap = IntjectionMap Id
type IdSet = IntjectionSet Id
type Class = Name
type Preds = [Pred]
type Sigma' = Sigma
type Tau' = Tau
type Rho' = Rho
type Sigma = Type
type Rho = Type
type Tau = Type
type SkolemTV = Tyvar
type BoundTV = Tyvar
type Preds = [Pred]
type Class = Name
type AM m = ReaderT (IdMap (Maybe E)) m
type Typ = VMap () Name
type SigEnv = Map Name Type
type SourceHash = Hash
type HoHash = Hash
type ModuleGroup = Module
type TypeEnv = Map Name Sigma
type Preds = [Pred]
type Alex = String
type Query a = Query' Text a
type Query' q a = q -> IO (Either Text a)
type Renderer a = Renderer' Text a
type Renderer' q a = q -> Either Text a -> Items
type Comultivector r m = Covector r (BasisCoblade m)
type Ratio = Fraction
type AlgNode = Int
type AlgMap alg = Map alg AlgNode
type NodeMap a = IntMap a
type Tag = String
type Build alg = State (BuildState alg)
type Log = Seq String
type Rule o p e = AlgNode -> Match o p e (Rewrite o e ())
type RuleSet o p e = [Rule o p e]
type Attr = String
type ResAttr = Attr
type PartAttr = Attr
type LeftAttr = Attr
type RightAttr = Attr
type TableName = String
type TypedAttr = (Attr, ATy)
type SortSpec = (Expr, SortDir)
type PartExpr = Expr
type Proj = (ResAttr, Expr)
type Tuple = [AVal]
type SchemaInfos = [(Attr, ATy)]
type TableAlgebra = Algebra () BinOp UnOp NullOp AlgNode
type MatFun = ([TileTree], DependencyList) -> ([Query], [Query])
type Step a = Either (Either a a) (a, a)
type IOProcessor a b = Processor IO a b
type IOSource a b = Processor IO a b
type IOSink a = IOProcessor a ()
type OneOpARoute t = t :-@ BaseOpARoute
type TwoOpARoute s t = s :-@ (t :-@ BaseOpARoute)
type RecurseA f opT = forall t. AlloyA t opT BaseOpA => t -> f t
type DescendA f opT = forall t. AlloyA t BaseOpA opT => t -> f t
type OneOpA t = t :-* BaseOpA
type TwoOpA s t = s :-* (t :-* BaseOpA)
type Recurse opT = forall t. Alloy t opT BaseOp => t -> t
type Descend opT = forall t. Alloy t BaseOp opT => t -> t
type OneOp t = t :- BaseOp
type TwoOp s t = s :- (t :- BaseOp)
type SampleFreq = Int
type Time = Int
type OpenMode = FlagSet CUInt Open
type PortTypeSet = FlagSet CUInt PortType
type PortCapabilitySet = FlagSet CUInt PortCapability
type Switch = PerChannel Bool
type Size = Int
type SampleFreq = Int
type Time = Int
type Size = Int
type Time = Int
type SampleFreq = Int
type Size = Int
type Time = Int
type SampleFreq = Int
type Size = Int
type SampleFreq = Int
type Time = Int
type Size = Int
type Pcm = Handle Interleaved
type File = Handle
type Cap = T CUInt CapabilityFlag
type Type = T CUInt TypeFlag
type Phase = Float
type Duration = Float
type ArgumentConsumer a = String -> [String] -> a
type Runner m a = ArgumentConsumer (m a) -> m a
type AccessID = Text
type AccessSecret = ByteString
type AssociateTag = Text
type ItemID = Text
type AWS = AWST IO
type MonadAWS m = (MonadBaseControl IO m, MonadCatch m, MonadResource m, MonadError Error m, MonadReader Env m)
type Error = ServiceError String
type LazyByteString = ByteString
type RFC822 = Time RFC822Format
type ISO8601 = Time ISO8601Format
type BasicTime = Time BasicFormat
type AWSTime = Time AWSFormat
type POSIX = Time POSIXFormat
type Object = HashMap Text Value
type Abbrev = Text
type Response a = Either (ServiceError (Er (Sv a))) (Rs a)
type Response' a = Either (ServiceError (Er (Sv a))) (Status, Rs a)
type Logger = LogLevel -> Builder -> IO ()
type ClientRequest = Request
type ClientResponse = Response ResponseBody
type ResponseBody = ResumableSource (ResourceT IO) ByteString
type ClientRequest = Request
type ClientResponse = Response ResponseBody
type Response a = Either (ServiceError (Er (Sv a))) (Rs a)
type Acceptor a = Request a -> Response' a -> Maybe Accept
type Parameters = [(ByteString, ByteString)]
type ActionType = ByteString
type EventType = ByteString
type ActionID = Integer
type ResponseType = ByteString
type EventHandler = Parameters -> IO ()
type AMI a = ReaderT (TVar AMIState) IO a
type Paire = (String, String)
type Octet = Word8
type Bit = Bool
type ChannelID = ShortInt
type PayloadSize = LongInt
type ShortInt = Word16
type LongInt = Word32
type LongLongInt = Word64
type Timestamp = Word64
type Decimals = Octet
type ConsumerTag = Text
type ExchangeKey = Text
type Exchange = Text
type QueueName = Text
type AmqpURI = String
type Loom = Document -> LoomM ()
type Time = Double
type DTime = Double
type ReactHandle a b = IORef (ReactState a b)
type SpanList a = [(Int, Int, a)]
type Nav = forall phi f ix. Zipper phi f => FixZipper phi f ix -> Maybe (FixZipper phi f ix)
type FixZipper phi f = Loc phi f (HFix f)
type AnnFix x s = HFix (K x :*: PF s)
type AnnFix1 x s = (PF s) (AnnFix x s)
type AnyAnnFix x s = AnyF s (AnnFix x s)
type AnnZipper phi x = FixZipper phi (K x :*: PF phi)
type Yield x fam = YieldT x fam Identity
type Algebra fT aT = fT aT -> aT
type Coalgebra fT aT = aT -> fT aT
type ErrorAlgebra fT eT aT = fT aT -> Either eT aT
type AnnFix xT fT = Fix (Ann xT fT)
type AnnFix1 xT fT = fT (AnnFix xT fT)
type ErrorAlg_PF f e a = forall ix. f (K0 a) ix -> Either e a
type Range = (Int, Int)
type P s = ParsecT [(s, Bounds)] Range
type YP s fam m = P s (YieldT Bounds fam m)
type SessionState = ((((DungeonState, TST Token), AVL (Int, Container)), Int), [(String, EnvVar)])
type RxInput = [Tree SubRxInput]
type Rx = [Tree SubRx]
type DiscourseUnit = Tree RefGroup
type RefKey = (Text, Text)
type RefCount = Int
type RefStateT m a = StateT RefHistory m a
type RefState a = RefStateT Identity a
type Config = TST Key
type UserA = Atom User
type MonadAnticiv m = (Functor m, Monad m, ChPrinter m, ChScanner m, ChClock m, ChChannelPrinter Target m, MonadBot m, ChAtoms m, ChRandom m)
type Anticiv a = forall m. MonadAnticiv m => m a
type AnticivA a = Atom (Packciv a)
type Handler = UserA -> String -> Packciv Bool
type HandlerA = Atom Handler
type Speaker = forall r. PrintlType r => UserA -> String -> r
type MafiaStateA = Atom MafiaState
type CaptchaID = Int
type AntiQuoterPass e q = e -> Maybe (Q q)
type AntiQuoter q = forall e. Typeable e => AntiQuoterPass e q
type AQResult q = Maybe (Q q)
type EPAntiQuoter = forall q. EP q => AntiQuoter q
type EPAntiQuoterPass e = forall q. EP q => AntiQuoterPass e q
type SplErrT m = FailT SplErr m
type DungeonM a = forall m. SomeDungeon m => m a
type ChattyDungeonM a = forall m. SomeChattyDungeon m => m a
type Handler = ChattyDungeonM ()
type Prerequisite = ChattyDungeonM Bool
type Predicate = ChattyDungeonM (Maybe ReError)
type Invokable = [String] -> HandlerBox
type InvokableP = [String] -> PredicateBox
type PlayerFilterT = FilterT PlayerId
type Constructor a = forall m. (Functor m, ChExtendedPrinter m, ChExpand m, ChExpanderEnv m, ChAtoms m, ChClock m, MonadVocab m, MonadError SplErr m, MonadDungeon m) => m a
type MapDBM = MVar (Map String String)
type C'AosdCoordinate = CUInt
type C'AosdRenderer = FunPtr (Cairo -> Ptr () -> IO ())
type C'AosdMouseEventCb = FunPtr (Ptr C'AosdMouseEvent -> Ptr () -> IO ())
type C'AosdTransparency = CUInt
type TabPosition = (Double, TabAlign)
type Password = ByteString
type Password = ByteString
type URLPiece = Text
type URLParam = [(Text, Text)]
type API s e a = APIT s e IO a
type APIT s e m a = ExceptT (APIError e) (ReaderT Manager (StateT Builder (StateT s m))) a
type Dict = Map String String
type API = [Thing]
type MDComment = String
type Prefix = CI String
type Conversion = Maybe (FieldName, FieldName)
type JSONWarning = JSONError
type Position = [Step]
type NormAPI = Map TypeName NormTypeDecl
type NormRecordType = Map FieldName APIType
type NormUnionType = Map FieldName APIType
type NormEnumType = Set FieldName
type APIWithChangelog = (API, APIChangelog)
type MigrationTag = String
type NormAPI = Map TypeName NormTypeDecl
type NormRecordType = Map FieldName APIType
type NormUnionType = Map FieldName APIType
type NormEnumType = Set FieldName
type MigrateWarning = ValidateWarning
type URL = String
type HTTPMethod = String
type StatusCode = Int
type APITool = Tool API
type APINodeTool = Tool APINode
type APISpec = [APINode]
type Param = (ByteString, ByteString)
type Middleware' = forall exts. ActionT exts [] IO () -> ActionT exts [] IO ()
type Initializer' m a = forall i. Initializer m i (a : i)
type ContentType = ByteString
type StreamingBody = (Builder -> IO ()) -> IO () -> IO ()
type Filter exts actM m inp out = ApiaryT exts out actM m () -> ApiaryT exts inp actM m ()
type Filter' exts actM m = forall prms. Filter exts actM m prms prms
type OpenId = OpenId_ Text
type MongoQuery = Query
type With c m = forall a. (c -> m a) -> m a
type APIT s m = StateT s m
type Conf = Map String SettingInfo
type Parser = MkParser ByteString
type Parser = MkParser ByteString
type Parser = MkParser String
type DeviceToken = ByteString
type NotificationServiceChan = Chan NotificationServiceMsg
type NotificationCallbackChan = Chan NotificationCallbackMsg
type NotificationPayload = JSObject JSValue
type NotificationAction = JSObject JSValue
type ErrorMsg = String
type M tt td = ExceptT ParseError (State (ParseState tt td))
type RandWithError a = ErrorT String Rand a
type TestStatistic = Sample -> Sample -> Double
type Arg = String
type Args = [Arg]
type Flags = Map Arg Args
type NiceArgs = (Args, Flags)
type ParseResult a = Either String a
type SpecialAction a = CmdLnInterface a -> NiceArgs -> ParseResult a
type SpecialFlag a = (ParserSpec Bool, SpecialAction a)
type Key = String
type F18Word = Word18
type NativeProgram = [Instrs]
type Trace = [State]
type Distance = Sum Double
type Program = [Instruction]
type IOSpecific a :: (* -> *) = a RealWorld
type IOSpecific2 a :: (* -> * -> *) = a RealWorld
type IOSpecific3 a :: (* -> * -> * -> *) = a RealWorld
type IOSpecific a :: (* -> *) = a RealWorld
type IOSpecific2 a :: (* -> * -> *) = a RealWorld
type IOSpecific3 a :: (* -> * -> * -> *) = a RealWorld
type STUArray = UnboxedMutableArray
type IOUArray = IOSpecific3 UnboxedMutableArray
type IOUArray = IOSpecific3 UnboxedMutableArray
type STUArray = UnboxedMutableArray
type STArray = BoxedMutableArray
type IOArray = IOSpecific3 BoxedMutableArray
type IOArray = IOSpecific3 BoxedMutableArray
type STArray = BoxedMutableArray
type DiffArray = IOToDiffArray IOArray
type DiffUArray = IOToDiffArray IOUArray
type IOArray = IOSpecific3 BoxedMutableArray
type IOUArray = IOSpecific3 UnboxedMutableArray
type STArray = BoxedMutableArray
type STUArray = UnboxedMutableArray
type DynamicIO = Dynamic IORef
type DynamicIOArray = DynamicIO IOArray
type DynamicIOUArray = DynamicIO IOUArray
type DynamicST s = Dynamic (STRef s)
type DynamicSTArray s = (DynamicST s) (STArray s)
type DynamicSTUArray s = (DynamicST s) (STUArray s)
type GrowBoundsF i = (i, i) -> i -> (i, i)
type ListArrow a b = ListTArrow Identity a b
type SeqArrow a b = SeqTArrow Identity a b
type StaticMonadArrow m = StaticArrow (WrappedMonad m)
type StaticArrowArrow a s = StaticArrow (WrappedArrow a s)
type StreamMap = StreamArrow (->)
type StreamMapST s = StreamArrow (Kleisli (ST s))
type ArgsParser = Parsec [ByteString] ()
type Content = String
type Tag = String
type Attribute = String
type Value = String
type Class = String
type Selector = String
type PseudoClass = Maybe String
type Property = String
type Value = String
type DeclarationBlock = [(Property, Value)]
type HTML = Ascetic
type CIAscii = CI Ascii
type Point = V2 Int
type ASN1Tag = Int
type ASN1Tag = Int
type ASN1Tag = Int
type ASN1Repr = (ASN1, [ASN1Event])
type ASN1Repr = (ASN1, [ASN1Event])
type ASN1Tag = Int
type ASN1Tag = Int
type OID = [Integer]
type ASN1S = [ASN1] -> [ASN1]
type ASN1Tag = Int
type Att att val = LVPair att val
type Chi ch atts = LVPair ch atts
type Rule lf hof sc ip l ho ic sp l' ho' ic' sp' = Fam lf hof sc ip -> Fam l ho ic sp -> Fam l' ho' ic' sp'
type Prd prd rule = LVPair prd rule
type CheckM log state m a = RWST ATermTable log state m a
type HostName = Text
type UserKey = Text
type UserEmail = ByteString
type IssueKey = Text
type IssueId = Integer
type ProjectKey = Text
type ProjectId = Integer
type IssueSummary = Text
type ClientKey = Text
type TenantKey = Text
type TenantWithUser = (Tenant, Maybe UserKey)
type Weight = Integer
type ModuleParams = HashMap Text Text
type UeMap = (Hash, Bimap Int UeElem)
type Hash = Int
type UeState a = State UeMap a
type UID = Int
type Name = String
type Path = [Name]
type Schedule = (UeMap, [(Int, Int, [Rule])])
type Atom = Atom
type Name = String
type RuleCoverage = [(Name, Int, Int)]
type Schedule = (UeMap, [(Int, Int, [Rule])])
type RuleCoverage = [(Name, Int, Int)]
type Schedule = (UeMap, [(Int, Int, [Rule])])
type Atom = Atom
type Name = String
type CTicket = Int
type AtomicCounter = ForeignPtr Int
type CTicket = Int
type Failure f r = String -> f r
type Success a f r = a -> f r
type Dict = Map ByteString BValue
type Parser a = ZeptoT Identity a
type Failure i t r = t -> Pos -> More -> [String] -> String -> IResult i r
type Success i t a r = t -> Pos -> More -> a -> IResult i r
type Parser = Parser Text
type Result = IResult Text
type Parser = Parser ByteString
type Result = IResult ByteString
type Parser = Parser ByteString
type Result = IResult ByteString
type CSV = [[Text]]
type OperatorTable t a = [[Operator t a]]
type Parser = Parsec Text ()
type Interval time label = ((time, time), label)
type Augeas = ()
type MonadAuthoring s w m = (MonadState s m, HasAuthorState s, HasDatabase s, MonadWriter w m, HasDocument w, MonadIO m)
type AuthoringT = RWST () Document AuthorState
type Auto' = Auto Identity
type Interval m a b = Auto m a (Maybe b)
type Interval' a b = Auto' a (Maybe b)
type Auto' = Auto Identity
type Interval m a b = Auto m a (Maybe b)
type Interval' a b = Auto' a (Maybe b)
type Class = (String, [Cond])
type Trigger = (String, Int, Act)
type Classifier = Writer [CExp] ()
type PatchM a = Either PatchError a
type AversPatch a b = StateT (PatchState a) Avers b
type Actions = ActionsM ()
type Actions = ActionsM ()
type HTTPResponseConsumer a = Response (ResumableSource (ResourceT IO) ByteString) -> ResourceT IO a
type Item = Map Text DValue
type AttributeUpdates = [AttributeUpdate]
type ErrorCode = Text
type CanonicalUserId = Text
type Bucket = Text
type Object = Text
type LocationConstraint = Text
type EmailAddress = Text
type ErrorCode = String
type ErrorCode = Text
type UserMessageAttributeCustomType = Text
type UserMessageAttributeName = Text
type UserMessageAttribute = (UserMessageAttributeName, UserMessageAttributeValue)
type Logger = LogLevel -> Text -> IO ()
type Logger = LogLevel -> Text -> IO ()
type HTTPResponseConsumer a = Response (ResumableSource (ResourceT IO) ByteString) -> ResourceT IO a
type URL = String
type KeyID = String
type JSONPOlicy = String
type ConduitResponse a r = ConduitM () a (ResourceT IO) r
type ConduitQueryResponse = ConduitResponse (Seq Item) QueryResponse
type EC2Configuration = QueryAPIConfiguration
type EC2Metadata = QueryMetadata
type SecurityGroupId = Text
type SecurityGroupName = Text
type CidrIp = Text
type Tag = (Text, Text)
type ELBMetadata = QueryMetadata
type S3BucketName = Text
type S3BucketPrefix = Text
type S3Object = Text
type SNSTopic = Text
type IAMRole = Text
type PipelineStatus = Text
type UriPath = [Text]
type UriQuery = QueryText
type MonadKinesis m = (MonadIO m, MonadReader KinesisKit m, MonadError SomeException m)
type MonadConsumer m = (MonadIO m, MonadBaseControl IO m, MonadError ConsumerError m)
type Message = Text
type MonadProducer m = (MonadIO m, MonadBaseControl IO m, MonadError ProducerError m)
type MonadReshard m = (MonadError SomeException m, MonadReader Options m, MonadIO m, MonadBaseControl IO m, MonadResource m)
type Arn = Text
type HostedZones = [HostedZone]
type Nameserver = Domain
type Nameservers = [Nameserver]
type ResourceRecordSets = [ResourceRecordSet]
type ResourceRecords = [ResourceRecord]
type Filter = (Text, [Text])
type AvailabilityZoneMessage = Text
type InstanceStatusDetailName = Text
type InstanceStatusDetailStatus = Text
type PropagatingVgw = Text
type DBInstanceClass = Text
type Engine = Text
type DimensionFilter = (Text, Text)
type EC2 m a = AWS AWSContext m a
type AccessKey = ByteString
type SecretAccessKey = ByteString
type RDS m a = AWS AWSContext m a
type ELB m a = AWS AWSContext m a
type CloudWatch m a = AWS AWSContext m a
type ElementPath = Tree ElementName
type SnsEndpoint = Text
type AcsToken = Header
type AcsToken = Header
type Size = Word64
type Order = Word64
type Mounted a = (a, MountPoint)
type BuildVariables = [(String, String)]
type BackwardState s = BackwardStateT s Identity
type Program = State St
type Color = (Double, Double, Double)
type Host = String
type Port = Int
type Author = String
type Assoc = [(String, String)]
type SC = String -> String
type SIO = String -> IO ()
type Theme = Interface -> State -> IO Response
type Controller = StateController ()
type ETagController = StateController String
type Part a = StateT State IO a
type StateController a = StateT State IO a
type View = State -> IO Response
type Label = String
type Lens' s a = forall f. Functor f => (a -> f a) -> s -> f s
type ShowS = String -> String
type ReadS a = String -> [(a, String)]
type Prec = Int
type KindRep = TypeRep
type Typeable1 (a :: * -> *) = Typeable a
type Typeable2 (a :: * -> * -> *) = Typeable a
type Typeable3 (a :: * -> * -> * -> *) = Typeable a
type Typeable4 (a :: * -> * -> * -> * -> *) = Typeable a
type Typeable5 (a :: * -> * -> * -> * -> * -> *) = Typeable a
type Typeable6 (a :: * -> * -> * -> * -> * -> * -> *) = Typeable a
type Typeable7 (a :: * -> * -> * -> * -> * -> * -> * -> *) = Typeable a
type Typeable1 (a :: * -> *) = Typeable a
type Typeable2 (a :: * -> * -> *) = Typeable a
type Typeable3 (a :: * -> * -> * -> *) = Typeable a
type Typeable4 (a :: * -> * -> * -> * -> *) = Typeable a
type Typeable5 (a :: * -> * -> * -> * -> * -> *) = Typeable a
type Typeable6 (a :: * -> * -> * -> * -> * -> * -> *) = Typeable a
type Typeable7 (a :: * -> * -> * -> * -> * -> * -> * -> *) = Typeable a
type Rec0 = K1 R
type Par0 = K1 P
type D1 = M1 D
type C1 = M1 C
type S1 = M1 S
type ReadS a = String -> [(a, String)]
type FinalizerPtr a = FunPtr (Ptr a -> IO ())
type FinalizerEnvPtr env a = FunPtr (Ptr env -> Ptr a -> IO ())
type FinalizerPtr a = FunPtr (Ptr a -> IO ())
type FinalizerEnvPtr env a = FunPtr (Ptr env -> Ptr a -> IO ())
type CharBuffer = Buffer Char
type CharBufElem = Char
type RawBuffer e = ForeignPtr e
type RawCharBuffer = RawBuffer CharBufElem
type TextEncoder state = BufferCodec CharBufElem Word8 state
type TextDecoder state = BufferCodec Word8 CharBufElem state
type CodeBuffer from to = Buffer from -> Buffer to -> IO (CodingProgress, Buffer from, Buffer to)
type EncodeBuffer = CodeBuffer Char Word8
type DecodeBuffer = CodeBuffer Word8 Char
type CString = Ptr CChar
type CStringLen = (Ptr CChar, Int)
type CWString = Ptr CWchar
type CWStringLen = (Ptr CWchar, Int)
type LinkCount = CNlink
type UserID = CUid
type GroupID = CGid
type ByteCount = CSize
type ClockTick = CClock
type EpochTime = CTime
type FileOffset = COff
type ProcessID = CPid
type ProcessGroupID = CPid
type DeviceID = CDev
type FileID = CIno
type FileMode = CMode
type Limit = CLong
type Signal = CInt
type HandlerFun = ForeignPtr Word8 -> IO ()
type TextEncoder state = BufferCodec CharBufElem Word8 state
type TextDecoder state = BufferCodec Word8 CharBufElem state
type IOError = IOException
type Signal = CInt
type HandlerFun = ForeignPtr Word8 -> IO ()
type HandlePosition = Integer
type FilePath = String
type String = [Char]
type ConIndex = Int
type IOCallback = FdKey -> Event -> IO ()
type TimeoutCallback = IO ()
type (<=) x y = (x <=? y) ~ True
type String = [Char]
type Rational = Ratio Integer
type ShowS = String -> String
type ReadS a = String -> [(a, String)]
type FilePath = String
type IOError = IOException
type StaticKey = Fingerprint
type Uni = Fixed E0
type Deci = Fixed E1
type Centi = Fixed E2
type Milli = Fixed E3
type Micro = Fixed E6
type Nano = Fixed E9
type Pico = Fixed E12
type Rational = Ratio Integer
type FieldFormatter = FieldFormat -> ShowS
type ModifierParser = String -> FormatParse
type ReadS a = String -> [(a, String)]
type FilePath = String
type IOError = IOException
type Rational = Ratio Integer
type ReadS a = String -> [(a, String)]
type ShowS = String -> String
type String = [Char]
type ℤ = Integer
type ℚ = Ratio ℤ
type Input i e = (MonoFoldable i, Element i ~ e)
type Output o e = (MonoPointed o, Element o ~ e, Monoid o)
type BASIC = Expr ()
type BASIC = Expr ()
type Lens s t a b = forall f. Functor f => (a -> f b) -> (s -> f t)
type LByteString = ByteString
type LText = Text
type UVector = Vector
type SVector = Vector
type Rational = Ratio Integer
type FilePath = String
type String = [Char]
type ShowS = String -> String
type ReadS a = String -> [(a, String)]
type UniqueKey val key = UniqueKeyT val key Identity
type DirMean a = EnumMap a Double
type DirPrecision = Double
type Probability = LogFloat
type Location = String
type Street = String
type Symbol = String
type Alist = (Symbol, String)
type GivenWithTeardown m = Monad m => [GivenStore m]
type Given m a = Monad m => m a
type Then m a = Monad m => a -> m ()
type When m a = Monad m => m a
type Dict = Map ByteString BEncode
type Result = Either String
type DbEnv = ForeignPtr DbEnv_struct
type DbLock = ForeignPtr DbLock_struct
type DbTxn = ForeignPtr DbTxn_struct
type Db = ForeignPtr Db_struct
type DbCursor = ForeignPtr DbCursor_struct
type Hashed a = (Int, a)
type TransportM = ReaderT SendPacketFn (ConduitM Packet Void IO)
type SendPacketFn = Packet -> IO ()
type Call a = IO (Either Error a)
type SpecGen tgt a = tgt -> a -> tgt
type Artist = String
type Title = String
type Consume s = s -> ByteString -> Either s (ByteString, ByteString)
type ByteOffset = Int64
type Put = PutM ()
type Put = PutM ()
type BinaryIndexedTree s = STUArray s Int Int
type Exponent = Word8
type BinaryProtocol = StateT (Handle, Handle, ByteString) IO
type BinarySearchM m a b = InitializerM m a b -> CutterM m a b -> PredicateM m a b -> m (Seq (Range a b))
type Range a b = ((a, a), b)
type PredicateM m a b = a -> m b
type InitializerM m a b = PredicateM m a b -> m (Seq (BookEnd a b))
type CutterM m a b = PredicateM m a b -> a -> a -> m (Maybe a)
type Range a b = ((a, a), b)
type BinarySearchM m a b = InitializerM m a b -> CutterM m a b -> PredicateM m a b -> m (Seq (Range a b))
type PredicateM m a b = a -> m b
type InitializerM m a b = PredicateM m a b -> m (Seq (BookEnd a b))
type CutterM m a b = PredicateM m a b -> a -> a -> m (Maybe a)
type PutState s a = StateT s PutM a
type GetState s a = StateT s Get a
type BitPut = BitPutM ()
type Size = Int
type BytePtr = Ptr Word8
type Iter = Ptr Word8
type StaticIter r = Addr# -> IO r
type DesBuffer = BufferRegion DesTag
type DeserializeAction t = Addr# -> IO t
type StaticDesAction size a = StaticMemAction DesTag size a
type SerBuffer = BufferRegion SerTag
type SerializeAction t = t -> Addr# -> IO ()
type DynamicDesAction pre_s post_sa post_s bd a = DynAction pre_s post_sa post_s bd DesTag a
type DynamicSerAction pre_s post_sa post_s bd a = DynAction pre_s post_sa post_s bd SerTag a
type StaticSerAction size a = StaticMemAction SerTag size a
type C'apr_byte_t = CUChar
type C'apr_int16_t = Int16
type C'apr_uint16_t = Word16
type C'apr_int32_t = CInt
type C'apr_uint32_t = CUInt
type C'apr_int64_t = Int64
type C'apr_uint64_t = Word64
type C'apr_size_t = CUInt
type C'apr_ssize_t = CInt
type C'apr_off_t = Int64
type C'apr_socklen_t = CUInt
type C'apr_ino_t = CUInt
type C'apr_uintptr_t = CUInt
type C'apr_status_t = CInt
type C'apr_abortfunc_t = FunPtr (CInt -> IO CInt)
type C'apr_uid_t = CUInt
type C'apr_gid_t = CUInt
type C'apr_lockmech_e = CUInt
type C'apr_dso_handle_sym_t = Ptr ()
type C'apr_time_t = Int64
type C'apr_interval_time_t = Int64
type C'apr_short_interval_time_t = CInt
type C'apr_table_do_callback_fn_t = FunPtr (Ptr () -> Ptr CChar -> Ptr CChar -> IO CInt)
type C'apr_filetype_e = CUInt
type C'apr_fileperms_t = CInt
type C'apr_dev_t = Word64
type C'apr_fileattrs_t = CUInt
type C'apr_seek_where_t = CInt
type C'apr_signum_t = CInt
type C'apr_hashfunc_t = FunPtr (Ptr CChar -> Ptr C'apr_ssize_t -> IO CUInt)
type C'apr_shutdown_how_e = CUInt
type C'apr_interface_e = CUInt
type C'apr_port_t = Word16
type C'apr_datatype_e = CUInt
type C'apr_pollcb_cb_t = FunPtr (Ptr () -> Ptr C'apr_pollfd_t -> IO C'apr_status_t)
type C'apr_cmdtype_e = CUInt
type C'apr_wait_how_e = CUInt
type C'apr_exit_why_e = CUInt
type C'apr_child_errfn_t = FunPtr (Ptr C'apr_pool_t -> C'apr_status_t -> Ptr CChar -> IO ())
type C'apr_thread_start_t = FunPtr (Ptr C'apr_thread_t -> Ptr () -> IO (Ptr ()))
type C'apr_kill_conditions_e = CUInt
type C'apr_crypto_hash_init_t = FunPtr (Ptr C'apr_crypto_hash_t -> IO ())
type C'apr_crypto_hash_add_t = FunPtr (Ptr C'apr_crypto_hash_t -> Ptr () -> C'apr_size_t -> IO ())
type C'apr_crypto_hash_finish_t = FunPtr (Ptr C'apr_crypto_hash_t -> Ptr CUChar -> IO ())
type C'apr_sigfunc_t = FunPtr (CInt -> IO ())
type C'apr_reslist_constructor = FunPtr (Ptr (Ptr ()) -> Ptr () -> Ptr C'apr_pool_t -> IO C'apr_status_t)
type C'apr_reslist_destructor = FunPtr (Ptr () -> Ptr () -> Ptr C'apr_pool_t -> IO C'apr_status_t)
type C'apr_memcache_server_status_t = CUInt
type C'apr_memcache_hash_func = FunPtr (Ptr () -> Ptr CChar -> C'apr_size_t -> IO C'apr_uint32_t)
type C'apr_memcache_server_func = FunPtr (Ptr () -> Ptr C'apr_memcache_t -> C'apr_uint32_t -> IO (Ptr C'apr_memcache_server_t))
type C'apr_dbd_type_e = CUInt
type C'apr_read_type_e = CUInt
type C'apr_brigade_flush = FunPtr (Ptr C'apr_bucket_brigade -> Ptr () -> IO C'apr_status_t)
type C'tm_lock = CInt
type C'apr_rmm_off_t = CUInt
type C'AUpvlist = Ptr C'_AUpvlist
type C'AFvirtualfile = C'_AFvirtualfile
type C'AFfilesetup = Ptr C'_AFfilesetup
type C'AFfilehandle = Ptr C'_AFfilehandle
type C'AFerrfunc = FunPtr (CLong -> Ptr CChar -> IO ())
type C'AFframecount = Int64
type C'AFfileoffset = Int64
type LinkInfo = Ptr LinkInfo'
type Bool' = CUInt
type Vma = Int
type Vma' = CULong
type Size = Int
type Size' = CULong
type File = Ptr File'
type FilePtr = Int
type FilePtr' = CULong
type LinkOrder = Ptr LinkOrder'
type FPrintfFn = FunPtr (File -> CString -> IO CInt)
type Info0 = Ptr Info'
type FunctionName = String
type FormatName = String
type ErrorMsg = String
type Disasm = FunPtr Disasm'
type Disasm' = Vma' -> Info0 -> IO CInt
type Target = Ptr Target'
type TargetName = String
type Symbol = Ptr Symbol'
type SymbolName = String
type Address = Either Int Symbol
type Section = Ptr Section'
type SectionName = String
type Assign = (Term, Term)
type HappyAny = Any
type C'DFBResult = CUInt
type C'DFBBoolean = CUInt
type C'DFBScreenID = CUInt
type C'DFBDisplayLayerID = CUInt
type C'DFBDisplayLayerSourceID = CUInt
type C'DFBWindowID = CUInt
type C'DFBInputDeviceID = CUInt
type C'DFBTextEncodingID = CUInt
type C'DFBDisplayLayerIDs = CUInt
type C'DFBCooperativeLevel = CUInt
type C'DFBDisplayLayerCapabilities = CUInt
type C'DFBScreenCapabilities = CUInt
type C'DFBDisplayLayerOptions = CUInt
type C'DFBDisplayLayerBufferMode = CUInt
type C'DFBSurfaceDescriptionFlags = CUInt
type C'DFBPaletteDescriptionFlags = CUInt
type C'DFBSurfaceCapabilities = CUInt
type C'DFBPaletteCapabilities = CUInt
type C'DFBSurfaceDrawingFlags = CUInt
type C'DFBSurfaceBlittingFlags = CUInt
type C'DFBSurfaceRenderOptions = CUInt
type C'DFBAccelerationMask = CUInt
type C'DFBDisplayLayerTypeFlags = CUInt
type C'DFBInputDeviceTypeFlags = CUInt
type C'DFBInputDeviceCapabilities = CUInt
type C'DFBInputDeviceButtonIdentifier = CUInt
type C'DFBInputDeviceAxisIdentifier = CUInt
type C'DFBWindowDescriptionFlags = CUInt
type C'DFBDataBufferDescriptionFlags = CUInt
type C'DFBWindowCapabilities = CUInt
type C'DFBWindowOptions = CUInt
type C'DFBWindowStackingClass = CUInt
type C'DFBFontAttributes = CUInt
type C'DFBFontDescriptionFlags = CUInt
type C'DFBSurfacePixelFormat = CInt
type C'DFBDisplayLayerSourceCaps = CUInt
type C'DFBInputDeviceAxisInfoFlags = CUInt
type C'DFBEnumerationResult = CUInt
type C'DFBVideoModeCallback = FunPtr (CInt -> CInt -> CInt -> Ptr () -> IO C'DFBEnumerationResult)
type C'DFBGetDataCallback = FunPtr (Ptr () -> CUInt -> Ptr () -> IO CInt)
type C'DFBVideoProviderCapabilities = CUInt
type C'DFBVideoProviderStatus = CUInt
type C'DFBVideoProviderPlaybackFlags = CUInt
type C'DFBVideoProviderAudioUnits = CUInt
type C'DFBColorAdjustmentFlags = CUInt
type C'DFBDisplayLayerCooperativeLevel = CUInt
type C'DFBDisplayLayerBackgroundMode = CUInt
type C'DFBDisplayLayerConfigFlags = CUInt
type C'DFBScreenPowerMode = CUInt
type C'DFBScreenMixerCapabilities = CUInt
type C'DFBScreenMixerConfigFlags = CUInt
type C'DFBScreenMixerTree = CUInt
type C'DFBScreenOutputCapabilities = CUInt
type C'DFBScreenOutputConnectors = CUInt
type C'DFBScreenOutputSignals = CUInt
type C'DFBScreenOutputSlowBlankingSignals = CUInt
type C'DFBScreenOutputResolution = CUInt
type C'DFBScreenOutputConfigFlags = CUInt
type C'DFBScreenEncoderCapabilities = CUInt
type C'DFBScreenEncoderType = CUInt
type C'DFBScreenEncoderTVStandards = CUInt
type C'DFBScreenEncoderScanMode = CUInt
type C'DFBScreenEncoderFrequency = CUInt
type C'DFBScreenEncoderConfigFlags = CUInt
type C'DFBScreenEncoderTestPicture = CUInt
type C'DFBSurfaceFlipFlags = CUInt
type C'DFBSurfaceTextFlags = CUInt
type C'DFBSurfaceLockFlags = CUInt
type C'DFBSurfacePorterDuffRule = CUInt
type C'DFBSurfaceBlendFunction = CUInt
type C'DFBTriangleFormation = CUInt
type C'DFBSurfaceMaskFlags = CUInt
type C'DFBInputDeviceKeyState = CUInt
type C'DFBInputDeviceButtonState = CUInt
type C'DFBInputDeviceButtonMask = CUInt
type C'DFBInputDeviceModifierMask = CUInt
type C'DFBEventClass = CUInt
type C'DFBInputEventType = CUInt
type C'DFBInputEventFlags = CUInt
type C'DFBWindowEventType = CUInt
type C'DFBWindowEventFlags = CUInt
type C'DFBVideoProviderEventType = CUInt
type C'DFBVideoProviderEventDataSubType = CUInt
type C'DFBWindowKeySelection = CUInt
type C'DFBWindowGeometryMode = CUInt
type C'DFBTextEncodingCallback = FunPtr (C'DFBTextEncodingID -> CString -> Ptr () -> IO C'DFBEnumerationResult)
type C'DFBImageCapabilities = CUInt
type C'DIRenderCallbackResult = CUInt
type C'DIRenderCallback = FunPtr (Ptr C'DFBRectangle -> Ptr () -> IO C'DIRenderCallbackResult)
type C'DFBStreamCapabilities = CUInt
type C'DFBStreamFormat = CUInt
type C'DVFrameCallback = FunPtr (Ptr () -> IO ())
type C'DFBInputDeviceKeyType = CUInt
type C'DFBInputDeviceModifierKeyIdentifier = CUInt
type C'DFBInputDeviceKeyIdentifier = CUInt
type C'DFBInputDeviceKeySymbol = CUInt
type C'DFBInputDeviceLockState = CUInt
type C'DFBInputDeviceKeymapSymbolIndex = CUInt
type C'GLFWglproc = FunPtr (IO ())
type C'GLFWerrorfun = FunPtr (CInt -> Ptr CChar -> IO ())
type C'GLFWwindowposfun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
type C'GLFWwindowsizefun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
type C'GLFWwindowclosefun = FunPtr (Ptr C'GLFWwindow -> IO ())
type C'GLFWwindowrefreshfun = FunPtr (Ptr C'GLFWwindow -> IO ())
type C'GLFWwindowfocusfun = FunPtr (Ptr C'GLFWwindow -> CInt -> IO ())
type C'GLFWwindowiconifyfun = FunPtr (Ptr C'GLFWwindow -> CInt -> IO ())
type C'GLFWframebuffersizefun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
type C'GLFWmousebuttonfun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> CInt -> IO ())
type C'GLFWcursorposfun = FunPtr (Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ())
type C'GLFWcursorenterfun = FunPtr (Ptr C'GLFWwindow -> CInt -> IO ())
type C'GLFWscrollfun = FunPtr (Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ())
type C'GLFWkeyfun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> CInt -> CInt -> IO ())
type C'GLFWcharfun = FunPtr (Ptr C'GLFWwindow -> CUInt -> IO ())
type C'GLFWmonitorfun = FunPtr (Ptr C'GLFWmonitor -> CInt -> IO ())
type C'gboolean = CInt
type C'gpointer = Ptr ()
type C'gconstpointer = Ptr ()
type C'gchar = CChar
type C'guchar = CUChar
type C'gint = CInt
type C'guint = CUInt
type C'gshort = Int16
type C'gushort = Word16
type C'glong = CInt
type C'gulong = CUInt
type C'gint8 = CChar
type C'guint8 = CUChar
type C'gint16 = Int16
type C'guint16 = Word16
type C'gint32 = CInt
type C'guint32 = CUInt
type C'gint64 = Int64
type C'guint64 = Word64
type C'gfloat = CFloat
type C'gdouble = CDouble
type C'gsize = CUInt
type C'gssize = CInt
type C'goffset = Int64
type C'gintptr = CInt
type C'guintptr = CUInt
type C'GLogFunc = FunPtr (Ptr C'gchar -> C'GLogLevelFlags -> Ptr C'gchar -> C'gpointer -> IO ())
type C'GLogLevelFlags = CInt
type C'GPrintFunc = FunPtr (Ptr C'gchar -> IO ())
type C'GDateDMY = CUInt
type C'GDateDay = CUChar
type C'GDateMonth = CUInt
type C'GDateYear = Word16
type C'GDateWeekday = CUInt
type C'GCompareFunc = FunPtr (C'gconstpointer -> C'gconstpointer -> IO C'gint)
type C'GCompareDataFunc = FunPtr (C'gconstpointer -> C'gconstpointer -> C'gpointer -> IO C'gint)
type C'GFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
type C'GQuark = CUInt
type C'gunichar = CUInt
type C'gunichar2 = Word16
type C'GUnicodeType = CUInt
type C'GUnicodeBreakType = CUInt
type C'GUnicodeScript = CInt
type C'GNormalizeMode = CUInt
type C'GDestroyNotify = FunPtr (C'gpointer -> IO ())
type C'GDataForeachFunc = FunPtr (C'GQuark -> C'gpointer -> C'gpointer -> IO ())
type C'GThreadError = CUInt
type C'GThreadFunc = FunPtr (C'gpointer -> IO C'gpointer)
type C'GThreadPriority = CUInt
type C'GOnceStatus = CUInt
type C'GPollFunc = FunPtr (Ptr C'GPollFD -> C'guint -> C'gint -> IO C'gint)
type C'GPid = CInt
type C'GChildWatchFunc = FunPtr (C'GPid -> C'gint -> C'gpointer -> IO ())
type C'GSourceDummyMarshal = FunPtr (IO ())
type C'GSourceFunc = FunPtr (C'gpointer -> IO C'gboolean)
type C'GOptionError = CUInt
type C'GOptionArgFunc = FunPtr (Ptr C'gchar -> Ptr C'gchar -> C'gpointer -> Ptr (Ptr C'GError) -> IO C'gboolean)
type C'GTranslateFunc = FunPtr (Ptr C'gchar -> C'gpointer -> IO (Ptr C'gchar))
type C'GOptionArg = CUInt
type C'GOptionFlags = CUInt
type C'GOptionParseFunc = FunPtr (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> C'gpointer -> Ptr (Ptr C'GError) -> IO C'gboolean)
type C'GOptionErrorFunc = FunPtr (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> C'gpointer -> Ptr (Ptr C'GError) -> IO ())
type C'GTraverseFunc = FunPtr (C'gpointer -> C'gpointer -> C'gpointer -> IO C'gboolean)
type C'GTraverseType = CUInt
type C'GHashFunc = FunPtr (C'gconstpointer -> IO C'guint)
type C'GEqualFunc = FunPtr (C'gconstpointer -> C'gconstpointer -> IO C'gboolean)
type C'GHFunc = FunPtr (C'gpointer -> C'gpointer -> C'gpointer -> IO ())
type C'GHRFunc = FunPtr (C'gpointer -> C'gpointer -> C'gpointer -> IO C'gboolean)
type C'GCopyFunc = FunPtr (C'gconstpointer -> C'gpointer -> IO C'gpointer)
type C'GTraverseFlags = CUInt
type C'GNodeTraverseFunc = FunPtr (Ptr C'GNode -> C'gpointer -> IO C'gboolean)
type C'GNodeForeachFunc = FunPtr (Ptr C'GNode -> C'gpointer -> IO ())
type C'GType = CUInt
type C'GTypeDebugFlags = CUInt
type C'GBaseInitFunc = FunPtr (C'gpointer -> IO ())
type C'GBaseFinalizeFunc = FunPtr (C'gpointer -> IO ())
type C'GClassInitFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
type C'GClassFinalizeFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
type C'GInstanceInitFunc = FunPtr (Ptr C'GTypeInstance -> C'gpointer -> IO ())
type C'GInterfaceInitFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
type C'GInterfaceFinalizeFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
type C'GTypeClassCacheFunc = FunPtr (C'gpointer -> Ptr C'GTypeClass -> IO C'gboolean)
type C'GTypeFlags = CUInt
type C'GTypeFundamentalFlags = CUInt
type C'GTypeInterfaceCheckFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
type C'GTypePluginUse = FunPtr (Ptr C'GTypePlugin -> IO ())
type C'GTypePluginUnuse = FunPtr (Ptr C'GTypePlugin -> IO ())
type C'GTypePluginCompleteTypeInfo = FunPtr (Ptr C'GTypePlugin -> C'GType -> Ptr C'GTypeInfo -> Ptr C'GTypeValueTable -> IO ())
type C'GTypePluginCompleteInterfaceInfo = FunPtr (Ptr C'GTypePlugin -> C'GType -> C'GType -> Ptr C'GInterfaceInfo -> IO ())
type C'GParamFlags = CInt
type C'gchararray = Ptr C'gchar
type C'GValueTransform = FunPtr (Ptr C'GValue -> Ptr C'GValue -> IO ())
type C'GCallback = FunPtr (IO ())
type C'GClosureNotify = FunPtr (C'gpointer -> Ptr C'GClosure -> IO ())
type C'GClosureMarshal = FunPtr (Ptr C'GClosure -> Ptr C'GValue -> C'guint -> Ptr C'GValue -> C'gpointer -> C'gpointer -> IO ())
type C'GSignalAccumulator = FunPtr (Ptr C'GSignalInvocationHint -> Ptr C'GValue -> Ptr C'GValue -> C'gpointer -> IO C'gboolean)
type C'GSignalCMarshaller = C'GClosureMarshal
type C'GSignalEmissionHook = FunPtr (Ptr C'GSignalInvocationHint -> C'guint -> Ptr C'GValue -> C'gpointer -> IO C'gboolean)
type C'GSignalFlags = CUInt
type C'GSignalMatchType = CUInt
type C'GConnectFlags = CUInt
type C'GBoxedCopyFunc = FunPtr (C'gpointer -> IO C'gpointer)
type C'GBoxedFreeFunc = FunPtr (C'gpointer -> IO ())
type C'GStrv = Ptr (Ptr C'gchar)
type C'GObjectClass_constructor = FunPtr (C'GType -> C'guint -> Ptr C'GObjectConstructParam -> IO (Ptr C'GObject))
type C'GObjectClass_set_property = FunPtr (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
type C'GObjectClass_get_property = FunPtr (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
type C'GObjectClass_dispose = FunPtr (Ptr C'GObject -> IO ())
type C'GObjectClass_finalize = FunPtr (Ptr C'GObject -> IO ())
type C'GObjectClass_dispatch_properties_changed = FunPtr (Ptr C'GObject -> C'guint -> Ptr (Ptr C'GParamSpec) -> IO ())
type C'GObjectClass_notify = FunPtr (Ptr C'GObject -> Ptr C'GParamSpec -> IO ())
type C'GObjectClass_constructed = FunPtr (Ptr C'GObject -> IO ())
type C'GObjectGetPropertyFunc = FunPtr (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
type C'GObjectSetPropertyFunc = FunPtr (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
type C'GObjectFinalizeFunc = FunPtr (Ptr C'GObject -> IO ())
type C'GWeakNotify = FunPtr (C'gpointer -> Ptr C'GObject -> IO ())
type C'GToggleNotify = FunPtr (C'gpointer -> Ptr C'GObject -> C'gboolean -> IO ())
type C'off_t = Int64
type C'ssize_t = Int64
type C'gpgme_ctx_t = Word64
type C'gpgme_data_t = Word64
type C'gpg_error_t = CUInt
type C'gpgme_error_t = CUInt
type C'gpg_err_code_t = CUInt
type C'gpgme_err_code_t = CUInt
type C'gpg_err_source_t = CUInt
type C'gpgme_err_source_t = CUInt
type C'gpgme_data_encoding_t = CUInt
type C'gpgme_pubkey_algo_t = CUInt
type C'gpgme_hash_algo_t = CUInt
type C'gpgme_sig_mode_t = CUInt
type C'gpgme_validity_t = CUInt
type C'gpgme_protocol_t = CUInt
type C'gpgme_keylist_mode_t = CUInt
type C'gpgme_sig_notation_flags_t = CUInt
type C'gpgme_sig_notation_t = Ptr C'_gpgme_sig_notation
type C'gpgme_status_code_t = CUInt
type C'gpgme_engine_info_t = Ptr C'_gpgme_engine_info
type C'gpgme_subkey_t = Ptr C'_gpgme_subkey
type C'gpgme_key_sig_t = Ptr C'_gpgme_key_sig
type C'gpgme_user_id_t = Ptr C'_gpgme_user_id
type C'gpgme_key_t = Ptr C'_gpgme_key
type C'gpgme_passphrase_cb_t = FunPtr (Ptr () -> CString -> CString -> CInt -> CInt -> IO C'gpgme_error_t)
type C'gpgme_progress_cb_t = FunPtr (Ptr () -> CString -> CInt -> CInt -> CInt -> IO ())
type C'gpgme_edit_cb_t = FunPtr (Ptr () -> C'gpgme_status_code_t -> CString -> CInt -> IO C'gpgme_error_t)
type C'gpgme_io_cb_t = FunPtr (Ptr () -> CInt -> IO C'gpgme_error_t)
type C'gpgme_register_io_cb_t = FunPtr (Ptr () -> CInt -> CInt -> C'gpgme_io_cb_t -> Ptr () -> Ptr (Ptr ()) -> IO C'gpgme_error_t)
type C'gpgme_remove_io_cb_t = FunPtr (Ptr () -> IO ())
type C'gpgme_event_io_t = CUInt
type C'gpgme_event_io_cb_t = FunPtr (Ptr () -> C'gpgme_event_io_t -> Ptr () -> IO ())
type C'gpgme_io_cbs_t = Ptr C'gpgme_io_cbs
type C'gpgme_data_read_cb_t = FunPtr (Ptr () -> Ptr () -> CSize -> IO C'ssize_t)
type C'gpgme_data_write_cb_t = FunPtr (Ptr () -> Ptr () -> CSize -> IO C'ssize_t)
type C'gpgme_data_seek_cb_t = FunPtr (Ptr () -> C'off_t -> CInt -> IO C'off_t)
type C'gpgme_data_release_cb_t = FunPtr (Ptr () -> IO ())
type C'gpgme_data_cbs_t = Ptr C'gpgme_data_cbs
type C'gpgme_invalid_key_t = Ptr C'_gpgme_invalid_key
type C'gpgme_encrypt_result_t = Ptr C'_gpgme_op_encrypt_result
type C'gpgme_encrypt_flags_t = CUInt
type C'gpgme_recipient_t = Ptr C'_gpgme_recipient
type C'gpgme_decrypt_result_t = Ptr C'_gpgme_op_decrypt_result
type C'gpgme_new_signature_t = Ptr C'_gpgme_new_signature
type C'gpgme_sign_result_t = Ptr C'_gpgme_op_sign_result
type C'gpgme_sigsum_t = CUInt
type C'gpgme_signature_t = Ptr C'_gpgme_signature
type C'gpgme_verify_result_t = Ptr C'_gpgme_op_verify_result
type C'gpgme_import_status_t = Ptr C'_gpgme_import_status
type C'gpgme_import_result_t = Ptr C'_gpgme_op_import_result
type C'gpgme_genkey_result_t = Ptr C'_gpgme_op_genkey_result
type C'gpgme_keylist_result_t = Ptr C'_gpgme_op_keylist_result
type C'gpgme_trust_item_t = Ptr C'_gpgme_trust_item
type C'gpgme_conf_level_t = CUInt
type C'gpgme_conf_type_t = CUInt
type C'gpgme_conf_arg_t = Ptr C'gpgme_conf_arg
type C'gpgme_conf_opt_t = Ptr C'gpgme_conf_opt
type C'gpgme_conf_comp_t = Ptr C'gpgme_conf_comp
type C'gpgme_pinentry_mode_t = CUInt
type C'gsl_wavelet_direction = CInt
type C'gsl_siman_Efunc_t = FunPtr (Ptr () -> IO CDouble)
type C'gsl_siman_step_t = FunPtr (Ptr C'gsl_rng -> Ptr () -> CDouble -> IO ())
type C'gsl_siman_metric_t = FunPtr (Ptr () -> Ptr () -> IO CDouble)
type C'gsl_siman_print_t = FunPtr (FunPtr (Ptr () -> IO ()))
type C'gsl_siman_copy_t = FunPtr (FunPtr (Ptr () -> Ptr () -> IO ()))
type C'gsl_siman_copy_construct_t = FunPtr (FunPtr (Ptr () -> IO (Ptr ())))
type C'gsl_siman_destroy_t = FunPtr (FunPtr (Ptr () -> IO ()))
type C'gsl_comparison_fn_t = FunPtr (FunPtr (Ptr () -> Ptr () -> IO CInt))
type C'gsl_integration_qawo_enum = CUInt
type C'gsl_integration_rule = FunPtr (Ptr C'gsl_function -> CDouble -> CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ())
type C'gsl_min_bracketing_function = FunPtr (Ptr C'gsl_function -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> CSize -> IO CInt)
type C'gsl_error_handler_t = FunPtr (CString -> CString -> CInt -> CInt -> CInt -> IO ())
type C'gsl_stream_handler_t = FunPtr (CString -> CString -> CInt -> CInt -> CString -> IO ())
type C'gsl_complex_packed = CUInt
type C'gsl_complex_packed_float = CUInt
type C'gsl_complex_packed_long_double = CUInt
type C'gsl_const_complex_packed = CUInt
type C'gsl_const_complex_packed_float = CUInt
type C'gsl_const_complex_packed_long_double = CUInt
type C'gsl_complex_packed_array = CUInt
type C'gsl_complex_packed_array_float = CUInt
type C'gsl_complex_packed_array_long_double = CUInt
type C'gsl_const_complex_packed_array = CUInt
type C'gsl_const_complex_packed_array_float = CUInt
type C'gsl_const_complex_packed_array_long_double = CUInt
type C'gsl_complex_packed_ptr = CUInt
type C'gsl_complex_packed_float_ptr = CUInt
type C'gsl_complex_packed_long_double_ptr = CUInt
type C'gsl_const_complex_packed_ptr = CUInt
type C'gsl_const_complex_packed_float_ptr = CUInt
type C'gsl_const_complex_packed_long_double_ptr = CUInt
type C'gsl_eigen_sort_t = CUInt
type C'gsl_mode_t = CUInt
type C'gsl_fft_direction = CInt
type C'gsl_linalg_matrix_mod_t = CUInt
type C'CBLAS_INDEX = CUInt
type C'CBLAS_ORDER = CUInt
type C'CBLAS_TRANSPOSE = CUInt
type C'CBLAS_UPLO = CUInt
type C'CBLAS_DIAG = CUInt
type C'CBLAS_SIDE = CUInt
type C'CBLAS_INDEX_t = CUInt
type C'CBLAS_ORDER_t = CUInt
type C'CBLAS_TRANSPOSE_t = CUInt
type C'CBLAS_UPLO_t = CUInt
type C'CBLAS_DIAG_t = CUInt
type C'CBLAS_SIDE_t = CUInt
type C'GtsKeyFunc = FunPtr (C'gpointer -> C'gpointer -> IO C'gdouble)
type C'GtsVector = Ptr C'gdouble
type C'GtsVector4 = Ptr C'gdouble
type C'GtsTokenType = CUInt
type C'GtsObjectClassInitFunc = FunPtr (Ptr C'GtsObjectClass -> IO ())
type C'GtsObjectInitFunc = FunPtr (Ptr C'GtsObject -> IO ())
type C'GtsArgSetFunc = FunPtr (Ptr C'GtsObject -> IO ())
type C'GtsArgGetFunc = FunPtr (Ptr C'GtsObject -> IO ())
type C'GtsObjectFlags = CUInt
type C'GtsIntersect = CInt
type C'GtsEncroachFunc = FunPtr (Ptr C'GtsVertex -> Ptr C'GtsEdge -> Ptr C'GtsSurface -> C'gpointer -> IO C'gboolean)
type C'GtsFunc = FunPtr (C'gpointer -> C'gpointer -> IO C'gint)
type C'GtsBBTreeTraverseFunc = FunPtr (Ptr C'GtsBBox -> Ptr C'GtsBBox -> C'gpointer -> IO ())
type C'GtsBBoxDistFunc = FunPtr (Ptr C'GtsPoint -> C'gpointer -> IO C'gdouble)
type C'GtsBBoxClosestFunc = FunPtr (Ptr C'GtsPoint -> C'gpointer -> IO (Ptr C'GtsPoint))
type C'GtsBooleanOperation = CUInt
type C'GtsCoarsenFunc = FunPtr (Ptr C'GtsEdge -> Ptr C'GtsVertexClass -> C'gpointer -> IO (Ptr C'GtsVertex))
type C'GtsRefineFunc = FunPtr (Ptr C'GtsEdge -> Ptr C'GtsVertexClass -> C'gpointer -> IO (Ptr C'GtsVertex))
type C'GtsStopFunc = FunPtr (C'gdouble -> C'guint -> C'gpointer -> IO C'gboolean)
type C'GtsSplitTraverseFunc = FunPtr (Ptr C'GtsSplit -> C'gpointer -> IO C'gboolean)
type C'GtsTraverseType = CUInt
type C'ssize_t = CInt
type C'hsize_t = Word64
type C'hssize_t = Int64
type C'herr_t = CInt
type C'hbool_t = CUInt
type C'htri_t = CInt
type C'hid_t = CInt
type C'H5LT_lang_t = CInt
type C'H5T_class_t = CInt
type C'H5DS_iterate_t = FunPtr (C'hid_t -> CUInt -> C'hid_t -> Ptr () -> IO C'herr_t)
type Parameters = Ptr
type Measurements = Ptr
type Options = Ptr
type LowerBounds = Ptr
type UpperBounds = Ptr
type ConstraintsMatrix = Ptr
type ConstraintsVector = Ptr
type Weights = Ptr
type Info = Ptr
type Work = Ptr
type Covar = Ptr
type AData = Ptr ()
type NrOfParameters = CInt
type NrOfMeasurements = CInt
type NrOfConstraints = CInt
type MaxIterations = CInt
type Model r = Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> AData -> IO ()
type Jacobian a = Model a
type LevMarDer r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarDif r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarBCDer r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> LowerBounds r -> UpperBounds r -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarBCDif r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> LowerBounds r -> UpperBounds r -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarLecDer r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> ConstraintsMatrix r -> ConstraintsVector r -> NrOfConstraints -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarLecDif r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> ConstraintsMatrix r -> ConstraintsVector r -> NrOfConstraints -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarBLecDer r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> LowerBounds r -> UpperBounds r -> ConstraintsMatrix r -> ConstraintsVector r -> NrOfConstraints -> Weights r -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarBLecDif r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> LowerBounds r -> UpperBounds r -> ConstraintsMatrix r -> ConstraintsVector r -> NrOfConstraints -> Weights r -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type Errors = Ptr
type LevMarChkJac r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> NrOfParameters -> NrOfMeasurements -> AData -> Errors r -> IO ()
type BestFitParameterIx = CInt
type LevMarStddev r = Covar r -> NrOfParameters -> BestFitParameterIx -> IO r
type LevMarCorCoef r = Covar r -> NrOfParameters -> BestFitParameterIx -> BestFitParameterIx -> IO r
type LevMarR2 r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> AData -> Result r -> IO CInt
type Result = Ptr
type C'cddb_log_handler_t = FunPtr (C'cddb_log_level_t -> CString -> IO ())
type C'cddb_log_level_t = CUInt
type C'cddb_error_t = CUInt
type C'cddb_protocol_t = CUInt
type C'cddb_cat_t = CUInt
type C'cddb_iconv_t = CUInt
type C'cddb_cache_mode_t = CUInt
type C'cddb_search_t = CInt
type C'ffi_abi = CUInt
type C'ffi_arg = CUInt
type C'ffi_sarg = CInt
type C'ffi_status = CUInt
type C'ftdi_chip_type = CUInt
type C'ftdi_parity_type = CUInt
type C'ftdi_stopbits_type = CUInt
type C'ftdi_bits_type = CUInt
type C'ftdi_break_type = CUInt
type C'ftdi_mpsse_mode = CUInt
type C'ftdi_interface = CUInt
type C'rrdc_stats_t = C'rrdc_stats_s
type C'rrd_value_t = CDouble
type C'rrd_info_type_t = CUInt
type C'rrd_infoval_t = C'rrd_infoval
type C'rrd_output_callback_t = FunPtr (Ptr () -> CSize -> Ptr () -> IO CSize)
type C'rrd_timetype_t = CUInt
type C'rrd_time_value_t = C'rrd_time_value
type C'rrd_context_t = C'rrd_context
type C'libusb_capability = CUInt
type C'libusb_standard_request = CUInt
type C'libusb_request_type = CUInt
type C'libusb_request_recipient = CUInt
type C'libusb_error = CInt
type C'libusb_log_level = CUInt
type C'libusb_pollfd_added_cb = FunPtr (CInt -> CShort -> Ptr () -> IO ())
type C'libusb_pollfd_removed_cb = FunPtr (CInt -> Ptr () -> IO ())
type C'ssize_t = Int64
type C'libusb_speed = CUInt
type C'libusb_supported_speed = CUInt
type C'libusb_usb_2_0_extension_attributes = CUInt
type C'libusb_ss_usb_device_capability_attributes = CUInt
type C'libusb_bos_type = CUInt
type C'libusb_class_code = CUInt
type C'libusb_descriptor_type = CUInt
type C'libusb_endpoint_direction = CUInt
type C'libusb_transfer_type = CUInt
type C'libusb_iso_sync_type = CUInt
type C'libusb_iso_usage_type = CUInt
type C'libusb_transfer_cb_fn = FunPtr (Ptr C'libusb_transfer -> IO ())
type C'libusb_transfer_status = CUInt
type C'libusb_transfer_flags = CUInt
type C'libusb_hotplug_callback_handle = CInt
type C'libusb_hotplug_callback_fn = FunPtr (Ptr C'libusb_context -> Ptr C'libusb_device -> C'libusb_hotplug_event -> Ptr () -> IO CInt)
type C'libusb_hotplug_flag = CUInt
type C'libusb_hotplug_event = CUInt
type C'zip_flags_t = CUInt
type C'zip_source_cmd = CUInt
type C'zip_source_callback = FunPtr (Ptr () -> Ptr () -> CULLong -> C'zip_source_cmd -> IO CULLong)
type C'v4l2_std_id = Word64
type C'v4l2_field = CUInt
type C'v4l2_buf_type = CUInt
type C'v4l2_ctrl_type = CUInt
type C'v4l2_tuner_type = CUInt
type C'v4l2_memory = CUInt
type C'v4l2_colorspace = CUInt
type C'v4l2_priority = CUInt
type C'v4l2_frmsizetypes = CUInt
type C'v4l2_frmivaltypes = CUInt
type C'v4l2_power_line_frequency = CUInt
type C'v4l2_colorfx = CUInt
type C'v4l2_mpeg_stream_type = CUInt
type C'v4l2_mpeg_stream_vbi_fmt = CUInt
type C'v4l2_mpeg_audio_sampling_freq = CUInt
type C'v4l2_mpeg_audio_encoding = CUInt
type C'v4l2_mpeg_audio_l1_bitrate = CUInt
type C'v4l2_mpeg_audio_l2_bitrate = CUInt
type C'v4l2_mpeg_audio_l3_bitrate = CUInt
type C'v4l2_mpeg_audio_mode = CUInt
type C'v4l2_mpeg_audio_mode_extension = CUInt
type C'v4l2_mpeg_audio_emphasis = CUInt
type C'v4l2_mpeg_audio_crc = CUInt
type C'v4l2_mpeg_audio_ac3_bitrate = CUInt
type C'v4l2_mpeg_video_encoding = CUInt
type C'v4l2_mpeg_video_aspect = CUInt
type C'v4l2_mpeg_video_bitrate_mode = CUInt
type C'v4l2_mpeg_cx2341x_video_spatial_filter_mode = CUInt
type C'v4l2_mpeg_cx2341x_video_luma_spatial_filter_type = CUInt
type C'v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type = CUInt
type C'v4l2_mpeg_cx2341x_video_temporal_filter_mode = CUInt
type C'v4l2_mpeg_cx2341x_video_median_filter_type = CUInt
type C'v4l2_exposure_auto_type = CUInt
type C'v4l2_preemphasis = CUInt
type C'blkcnt_t = CInt
type C'blksize_t = CInt
type C'clockid_t = CInt
type C'dev_t = Word64
type C'gid_t = CUInt
type C'id_t = CUInt
type C'ino_t = CUInt
type C'mode_t = CUInt
type C'nlink_t = CUInt
type C'off_t = CInt
type C'pid_t = CInt
type C'pthread_t = CUInt
type C'size_t = CUInt
type C'ssize_t = CInt
type C'suseconds_t = CInt
type C'time_t = CInt
type C'timer_t = CUInt
type C'uid_t = CUInt
type C'regoff_t = CInt
type CmdPars = Map String String
type ParaMap = Map String (String, String)
type SagaIoCmd = FilePath -> FilePath -> SagaCmd
type SagaIoCmdExt = (SagaIoCmd, String)
type SagaIoCmdDB = Map String SagaIoCmdExt
type NodeMap = Map String ([String], [String])
type C'sporder = CUInt
type Handle = Ptr ()
type Env = Handle
type Db = Handle
type Cursor = Handle
type Flags = Word32
type ErrorCode = CInt
type Key = Ptr ()
type Val = Ptr ()
type SpCmpF = FunPtr (CString -> CSize -> CString -> CSize -> Ptr () -> IO CInt)
type C'sqlite3_syscall_ptr = FunPtr (IO ())
type C'sqlite3_destructor_type = FunPtr (Ptr () -> IO ())
type C'sqlite3_int64 = Int64
type C'sqlite3_uint64 = Word64
type Measure a b = b -> a
type Bin a b = (a, [b])
type SeqId = ByteString
type GoHierarchy = [(GoDef, [GoTerm])]
type UniProtAcc = ByteString
type Offset = Int64
type SeqData = ByteString
type Qual = Word8
type QualData = ByteString
type Qual = Word8
type Flow = Int16
type Qual = Word8
type Index = Word8
type SeqData = ByteString
type QualData = ByteString
type DiscardFilter = ReadBlock -> Bool
type TrimFilter = ReadBlock -> ReadBlock
type Shape = String
type AAProp = Amino -> Bool
type Gaps = [Offset]
type Alignment a = [(Offset, Dir, Sequence a, Gaps)]
type EditList = [Edit]
type SubstMx t a = (Chr, Chr) -> a
type Selector a = [(a, Edit)] -> a
type Chr = Word8
type SeqName = SeqData
type OnSeqs a = Map SeqName a
type SeqPos = OnSeq Pos
type ContigSeqLoc = OnSeq ContigLoc
type SeqLoc = OnSeq Loc
type SeqLocMap a = OnSeqs (LocMap a)
type Offset = Int64
type SeqData = ByteString
type Qual = Word8
type QualData = ByteString
type Gaps = [Offset]
type Alignment = [(Offset, Strand, Sequence, Gaps)]
type EditList = [Edit]
type SubstMx t a = (Chr, Chr) -> a
type Selector a = [(a, Edit)] -> a
type Chr = Word8
type Primary = PrimArray Int Nucleotide
type TurnerTables = Turner2004 Basepair Nucleotide Double
type TurnerEntropy = TurnerTables
type TurnerEnthalpy = TurnerTables
type Temperature = Double
type TurnerSet = (Temperature, TurnerEntropy, TurnerEnthalpy)
type Basepair = (Nucleotide, Nucleotide)
type ViennaIntTables = Turner2004 ViennaPair Nucleotide Int
type ViennaEnergyTables = Turner2004 ViennaPair Nucleotide Energy
type ViennaPartitionTables = Turner2004 ViennaPair Nucleotide Partition
type Temperature = Double
type FastaFunction z = FastaHeader -> StartPos -> WindowSize -> PeekSize -> TrailSequence -> FastaData -> z
type StartPos = Int
type FastaHeader = ByteString
type FastaData = ByteString
type WindowSize = Int
type PeekSize = Int
type TrailSequence = ByteString
type TriPair = (ExtPairIdx, ExtPair, Basepair)
type ID2CM = Map (Identification Rfam) CM
type AC2CM = Map (Accession Rfam) CM
type KVs = Map ByteString ByteString
type TDmanip = Either TrainingData TrainingData
type Turner2004 = Turner2004Model Energy
type PP = (((Z :. Nuc) :. Nuc) :. Nuc) :. Nuc
type PN = ((Z :. Nuc) :. Nuc) :. Nuc
type PNN = (((Z :. Nuc) :. Nuc) :. Nuc) :. Nuc
type PPNN = (PP :. Nuc) :. Nuc
type PPNNN = PPNN :. Nuc
type PPNNNN = PPNNN :. Nuc
type Prefix = FilePath
type Suffix = FilePath
type I0 = Index 0
type I1 = Index 1
type Vienna2004 = Turner2004Model Deka
type Primary t = Vector (Letter t)
type PairIdx = (Int, Int)
type Pair = (Letter RNA, Letter RNA)
type ExtPairAnnotation = (CTisomerism, Edge, Edge)
type ExtPairIdx = (PairIdx, ExtPairAnnotation)
type ExtPair = (Pair, ExtPairAnnotation)
type Flow = Int16
type Index = Word8
type DiscardFilter = ReadBlock -> Bool
type TrimFilter = ReadBlock -> ReadBlock
type Path = [String]
type BirdResponder = StateT Reply (ReaderT Request (WriterT [String] IO))
type Router = Request -> BirdResponder ()
type BitVector = Vector Bool
type TransactionId = HexString
type BlockHash = HexString
type PrivateKey = Base58String
type Address = Base58String
type Account = Text
type Btc = Fixed Satoshi
type Result = Either String String
type Size = (Int, Int)
type Offset = (Int, Int)
type NChn = Int
type Alignment = Int
type Padding = Int
type Dimensions i = (i, i)
type Coordinates i = (i, i)
type PixelStorage = Word32
type PixelComponent = Word8
type GenPixelStorage = Word32
type GenPixelComponent = Word8
type FBBitmapBase = IOBitmap
type Gamma c = Elias (Unary c)
type Delta c n = Elias (Gamma c n) n
type BitSet = BitSet Word
type BitSet = BitSet FasterInteger
type Ticker = Record6 "ask" Scientific "bid" Scientific "lastTrade" Scientific "pair" CcyPair "rolling24HourVolume" Scientific "timestamp" UTCTime
type Orderbook = Record3 "asks" [Ask] "bids" [Bid] "timestamp" UTCTime
type Order = Record2 "price" Scientific "volume" Scientific
type Bid = Order
type Ask = Order
type Trade = Record3 "price" Scientific "timestamp" UTCTime "volume" Scientific
type BitXAuth = Record2 "id" Text "secret" Text
type PrivateOrder = Record12 "base" Scientific "counter" Scientific "creationTimestamp" UTCTime "expirationTimestamp" UTCTime "feeBase" Scientific "feeCounter" Scientific "id" OrderID "limitPrice" Scientific "limitVolume" Scientific "pair" CcyPair "state" RequestStatus "type" OrderType
type OrderID = Text
type OrderRequest = Record4 "pair" CcyPair "price" Scientific "type" OrderType "volume" Scientific
type RequestSuccess = Bool
type BitXError = Record2 "error" Text "errorCode" Text
type PrivateOrderWithTrades = Record13 "base" Scientific "counter" Scientific "creationTimestamp" UTCTime "expirationTimestamp" UTCTime "feeBase" Scientific "feeCounter" Scientific "id" OrderID "limitPrice" Scientific "limitVolume" Scientific "pair" CcyPair "state" RequestStatus "trades" [Trade] "type" OrderType
type AccountID = Text
type Balance = Record5 "asset" Asset "balance" Scientific "id" AccountID "reserved" Scientific "unconfirmed" Scientific
type FundingAddress = Record4 "address" Text "asset" Asset "totalReceived" Scientific "totalUnconfirmed" Scientific
type WithdrawalRequest = Record2 "id" Text "status" RequestStatus
type NewWithdrawal = Record2 "amount" Scientific "type" WithdrawalType
type BitcoinSendRequest = Record5 "address" Text "amount" Scientific "currency" Asset "description" (Maybe Text) "message" (Maybe Text)
type QuoteRequest = Record3 "baseAmount" Scientific "pair" CcyPair "type" QuoteType
type OrderQuote = Record9 "baseAmount" Scientific "counterAmount" Scientific "createdAt" UTCTime "discarded" Bool "exercised" Bool "expiresAt" UTCTime "id" Text "pair" CcyPair "type" QuoteType
type BitXClientAuth = BitXAuth
type Transaction = Record8 "available" Scientific "availableDelta" Scientific "balance" Scientific "balanceDelta" Scientific "currency" Asset "description" Text "rowIndex" Int "timestamp" UTCTime
type Account = Record3 "currency" Asset "id" Text "name" Text
type Distance s = s -> s -> Int
type InterfaceName = String
type Milliseconds = Int
type Sequence = Int16
type UniqueId = Integer
type Alpha = Double
type Percentage = Double
type EventName = Text
type EventQueue = TChan Event
type BufferAllocStrategy = (IO Buffer, Int -> Buffer -> IO (IO Buffer))
type BufferAllocStrategy = (IO Buffer, Int -> Buffer -> IO (IO Buffer))
type Html = Markup
type Forest = [Node ByteString ByteString]
type Markup = MarkupM ()
type Markup = MarkupM ()
type Svg = Markup
type Path = State AttributeValue ()
type VarCounter = Int
type LitLET a = FEX E (EList a)
type RGB8 = RGB Word8
type RGB8 = RGB Word8
type CodeObjectFlagMask = Word32
type Blogination = ErrorT String (StateT Blog IO)
type ProcessInfo = (Handle, Handle, Handle, ProcessHandle)
type StylePrefs = [(String, String)]
type Reply = Response ByteString
type TrackSortScores = Bool
type Sort = [SortSpec]
type Method = Method
type Score = Maybe Double
type Cache = Bool
type Aggregations = Map Text Aggregation
type AggregationResults = Map Text Value
type HitHighlight = Map Text [Text]
type Hash = Word32
type Hash = Word32
type Attrs = [Attr]
type Q a = SomeTri a
type Extent = (Int, Int)
type Set a = [a]
type MT2 a = Q a
type Verbosity = Int
type Doc = [ShowS] -> [ShowS]
type AlexInput = (Posn, Char, [Word8], String)
type LocType = (String, String)
type BoolAlgebra r = (r, r)
type PrinterParser = Boomerang
type StringBoomerang = Boomerang StringError String
type StringPrinterParser = StringBoomerang
type StringError = ParserError MajorMinorPos
type StringsError = ParserError MajorMinorPos
type TextsError = ParserError MajorMinorPos
type ALayer a = [(Neuron, a)]
type ANetwork a = [ALayer a]
type Network = ANetwork ()
type PackedNeuron = [Double]
type NeuronCreator = PackedNeuron -> Neuron
type Core = IOUArray Int Word8
type InstPtr = Int
type CorePtr = Int
type DataPointer = Integer
type Tape = Array Int Word8
type DataPointer = Int
type JumpPairs = [(Int, Int)]
type Tagged a = (a, Tag)
type Count = Map Text (Map Tag Int)
type TCount = Map Tag Int
type DeltaHistogram = Map Tag (Map TagPair Int)
type Document = [Field]
type Label = Text
type Param = FilePath
type AccessTime = UTCTime
type TreeBackend mc k v = KVBackend mc (Ref (Node k v)) ByteString
type TreeResult m mc k v a = BTreeM m (Param mc (Ref (Node k v)) (Node k v)) k v a
type N k v = Node k v
type R k v = Ref (N k v)
type Cp m k v = Param m (R k v) (N k v)
type S m k v = Param m (R k v) (N k v)
type FileSize = Word64
type ObjectType = Word8
type ObjectId = Word64
type InodeNum = ObjectId
type SubvolId = ObjectId
type FileSize = Word64
type ObjectType = Word8
type ObjectId = Word64
type InodeNum = ObjectId
type SubvolId = ObjectId
type MaxLength = Int
type ReadSize = Int
type BugzillaServer = Text
type BugId = Int
type AttachmentId = Int
type CommentId = Int
type UserId = Int
type EventId = Int
type FlagId = Int
type FlagType = Int
type UserEmail = Text
type CanBuildFrom b a = (Buildable b, BuildFrom (Builder b) a)
type EventName = String
type Log = Seq Line
type Line = ByteString
type Build a = ErrorT BuildError (StateT BuildState IO) a
type Build a = ErrorT BuildError (StateT BuildState IO) a
type EmailAddress = String
type DarcsPath = String
type BuildWrapper = StateT BuildWrapperState IO
type OpResult a = (a, [BWNote])
type GHCApplyFunction a = FilePath -> TypecheckedModule -> Ghc a
type AliasMap = Map ModuleName [ModuleName]
type ImportMap = Map Text (LImportDecl Name, [Text])
type TypeMap = Map Text (Map Text (Set Text))
type FinalImportValue = (LImportDecl Name, Map Text (Set Text))
type FinalImportMap = Map Text FinalImportValue
type VoidPtr = Ptr ()
type Widget a = MVar (Bus a) -> IO ()
type Future a = IO (Bus a, MVar [Diff a])
type Behaviour a = Bus a -> Future a
type Widget a = MVar (Bus a) -> IO ()
type Future a = IO (Bus a, MVar [Diff a])
type Behaviour a = Bus a -> Future a
type BitVector = BV
type CompletionFunc = (Text, Text) -> IO (Text, [Completion])
type Matcher a = Menu a -> Map Text a -> Text -> Choice a
type Matcher a = Menu a -> Map Text a -> Text -> Choice a
type CompletionFunc = (Text, Text) -> IO (Text, [Completion])
type BufferWriter = Ptr Word8 -> Int -> IO (Int, Next)
type CSV = [Record]
type Record = [Field]
type Field = ByteString
type EffectiveDigit = ReadFractional
type Base = Radix
type Put = PutM ()
type ParseError = String
type ParseError = String
type ParseError = String
type ParseError = String
type ParseError = String
type ParseError = String
type ReadS a = ByteString -> [(a, ByteString)]
type Ident = String
type Number = Int
type Ident = String
type Number = Int
type C10kServer = Socket -> IO ()
type C10kServerH = Handle -> TCPInfo -> IO ()
type PkgName = String
type PkgDB = PackageIndex
type PkgInfo = InstalledPackageInfo
type FunctionCommand = [String] -> [Option] -> [String] -> IO ()
type Options = [(String, String)]
type ReadP r a = Parser r Char a
type ReadS a = String -> [(a, String)]
type VersionInterval = (LowerBound, UpperBound)
type PackageDBStack = [PackageDB]
type Flag = String
type PackageId = PackageIdentifier
type HookedBuildInfo = (Maybe BuildInfo, [(String, BuildInfo)])
type FlagAssignment = [(FlagName, Bool)]
type InstallDirTemplates = InstallDirs PathTemplate
type PathTemplateEnv = [(PathTemplateVariable, PathTemplate)]
type InstalledPackageInfo = InstalledPackageInfo_ ModuleName
type Name = String
type Description = String
type SFlags = [Char]
type LFlags = [String]
type OptFlags = (SFlags, LFlags)
type ArgPlaceHolder = String
type MkOptDescr get set a = SFlags -> LFlags -> Description -> get -> set -> OptDescr a
type LineNo = Int
type InstalledPackageIndex = PackageIndex InstalledPackageInfo
type FakeMap = Map InstalledPackageId InstalledPackageId
type ProgramSearchPath = [ProgramSearchPathEntry]
type ProgramSearchPath = [ProgramSearchPathEntry]
type ProgArg = String
type ProgramSearchPath = [ProgramSearchPathEntry]
type ProgArg = String
type ProgramConfiguration = ProgramDb
type PPSuffixHandler = (String, BuildInfo -> LocalBuildInfo -> PreProcessor)
type Args = [String]
type Args = [String]
type Fields = [Field]
type DebMap = Map BinPkgName (Maybe DebianVersion)
type CabalT m = StateT CabalInfo m
type CabalM = State CabalInfo
type DebianT m = StateT DebInfo m
type Options = [(String, String)]
type ReadP r a = Parser r Char a
type ReadS a = String -> [(a, String)]
type VersionInterval = (LowerBound, UpperBound)
type PackageDBStack = [PackageDB]
type Flag = String
type PackageId = PackageIdentifier
type HookedBuildInfo = (Maybe BuildInfo, [(String, BuildInfo)])
type FlagAssignment = [(FlagName, Bool)]
type InstallDirTemplates = InstallDirs PathTemplate
type PathTemplateEnv = [(PathTemplateVariable, PathTemplate)]
type InstalledPackageInfo = InstalledPackageInfo_ ModuleName
type Name = String
type Description = String
type SFlags = [Char]
type LFlags = [String]
type OptFlags = (SFlags, LFlags)
type ArgPlaceHolder = String
type MkOptDescr get set a = SFlags -> LFlags -> Description -> get -> set -> OptDescr a
type LineNo = Int
type InstalledPackageIndex = PackageIndex InstalledPackageInfo
type FakeMap = Map InstalledPackageId InstalledPackageId
type ProgramSearchPath = [ProgramSearchPathEntry]
type ProgramSearchPath = [ProgramSearchPathEntry]
type ProgArg = String
type ProgramSearchPath = [ProgramSearchPathEntry]
type ProgArg = String
type ProgramConfiguration = ProgramDb
type PPSuffixHandler = (String, BuildInfo -> LocalBuildInfo -> PreProcessor)
type Args = [String]
type Args = [String]
type Exclusions = [String]
type ProjectRootDir = FilePath
type BinaryName = FilePath
type TestList = IO [Test]
type EFuture a = MVar a
type Buffer a = (Cell Bool, Cell Bool, Cell a, Cell (Bool -> IO ()))
type ChanType a = (Buffer (ItemType a), Buffer (ItemType a))
type QSem = Buffer (Int, [Buffer Bool])
type BChan a = (Chan a, QSem)
type HQSem = Buffer (Int, [Bool -> IO ()])
type Bar a = (Buffer a, Buffer [Bool -> IO ()], Int)
type ReadS a = String -> [(a, String)]
type ShowS = String -> String
type Rational = Ratio Integer
type IOError = IOException
type FilePath = String
type String = [Char]
type FilePath = String
type ReadS a = String -> [(a, String)]
type ShowS = String -> String
type String = [Char]
type Rational = Ratio Integer
type IOError = IOException
type G a = State (Node, Gr a ())
type Node = Int
type Net = Gr LayerParameter ()
type AnnotatedNet a = Gr (LayerParameter, a) ()
type NetBuilder = G LayerParameter ()
type Pass = (Net, Node, LayerParameter) -> LayerParameter
type MatrixPtr = Ptr (Matrix)
type Rule = P (Act ())
type P = Parser Char
type File = FileT FilePath
type Command = [CommandPiece]
type Target = Set File
type Location = String
type Make a = Make' IO a
type A a = A' (Make' IO) a
type CommandGen = CommandGen' (Make' IO)
type A a = A' (Make' IO) a
type Make a = Make' IO a
type File = FileT FilePath
type BinOptions = [BinOption]
type Fallible a = Either String a
type IOFallible a = IO (Fallible a)
type LoadResult a = IO (Either String a)
type Loader a = CoreModel -> FilePath -> LoadResult a
type CLoader = CoreModel -> CString -> IO CInt
type CalIndex = CInt
type F = Double
type ErrorAndState e s a = ErrorT e (State s) a
type MyParser = GenParser Char State
type Scope = Map Name StateEntry
type D = Double
type R = Ratio Integer
type Args = [Arg]
type MyParser = GenParser Char State
type Args = [Arg]
type Scope = Map Name StateEntry
type Mon a = ErrorAndState String State a
type Id = Integer
type PreciseCardinality = Integer
type CurrentNotFinalPreciseCardinality = PreciseCardinality
type BoundaryPreciseCardinality = CurrentNotFinalPreciseCardinality
type ContinueCounting_DoWe = Bool
type ContinueRefiningCardinalityUntil = CurrentNotFinalPreciseCardinality -> (CurrentNotFinalPreciseCardinality -> ContinueCounting_DoWe) -> LazyCardinality
type CardinalityRefinementState = (CurrentNotFinalPreciseCardinality, ContinueRefiningCardinalityUntil)
type CardinalityRange_From = LazyCardinality
type CardinalityRange_To = LazyCardinality
type CardinalityConstraint = CardinalityRange
type TransformError_FromTypeName = String
type TransformError_ToTypeName = String
type TransformError_Details = String
type From_LazyCardinality = LazyCardinality
type To_CardinalityConstraint = CardinalityConstraint
type PropLiteral = (Bool, String)
type ArgSet = Gr (PropLiteral, [Argument]) ()
type Audience = (Assumptions, ArgWeight)
type Assumptions = [PropLiteral]
type ArgWeight = Argument -> Weight
type Weight = Double
type PropStandard = PropLiteral -> PSName
type ProofStandard = PropLiteral -> CAES -> Bool
type AGraph = ArgSet
type PropNode = LNode (PropLiteral, [Argument])
type AssociatedGraph = (AGraph, Map PropLiteral Node)
type ConcreteArg = Either PropLiteral Argument
type LConcreteArg = (Bool, ConcreteArg)
type ConcreteAF = DungAF ConcreteArg
type LConcreteAF = DungAF LConcreteArg
type NonEmptyString = String
type Version = [Word]
type Level = Int
type NonEmptyString = String
type Version = [Word]
type Cascade = CascadeC (->)
type CascadeM m = CascadeC (Kleisli m)
type CascadeW w = CascadeC (Cokleisli w)
type Product = ProductM Identity
type Sum = SumW Identity
type TailSums ts = TailSumsW Identity ts
type SetProp = forall m. SetPropM m
type SetPropM m = (MonadReader BuildCfg m, MonadWriter CSS m) => m ()
type CaseTransformer = Part -> Part
type Delimiter = Folder (Maybe Text)
type Server = (HostName, ServiceName)
type Csv = Vector Record
type Record = Vector Field
type Field = ByteString
type Header = Vector Name
type Name = ByteString
type NamedRecord = HashMap ByteString ByteString
type C r = (String -> r) -> String -> r
type PP a = forall r r'. K7 (C (a -> r)) (C r) (C (a -> r')) (C r')
type PP0 = forall r r'. K7 (C r) (C r) (C r') (C r')
type UnL a b = forall r r'. K7 (C (b -> r)) (C (a -> r)) (C (b -> r')) (C (a -> r'))
type BinL a b c = forall r r'. K7 (C (c -> r)) (C (b -> a -> r)) (C (c -> r')) (C (b -> a -> r'))
type CPool = Pool Cassandra
type Server = (HostName, Int)
type KeySpace = String
type ColumnFamily = String
type Key = ByteString
type RowKey = Key
type ColumnName = ByteString
type Value = ByteString
type Row = [Column]
type CPool = Pool Cassandra
type Server = (HostName, Int)
type KeySpace = String
type Cas a = ReaderT CPool IO a
type ColumnFamily = String
type Key = ByteString
type ColumnName = ByteString
type Value = ByteString
type Row = [Column]
type CPool = Pool Cassandra
type Server = (HostName, Int)
type KeySpace = String
type Cas a = ReaderT CPool IO a
type RowKey = Key
type ColumnName = ByteString
type ColumnFamily = String
type CPool = Pool Cassandra
type Server = (HostName, Int)
type KeySpace = String
type Cas a = ReaderT CPool IO a
type RowKey = ByteString
type ColumnName = ByteString
type ColumnFamily = String
type MonadError e m = (MonadThrow e m, MonadCatch e m m)
type Dist f g = forall a. f (g a) -> g (f a)
type :~> f g = forall a. f a -> g a
type Natural f g = f :~> g
type :~~> f g = forall a b. f a b -> g a b
type Dinatural f g = forall a. f a a -> g a a
type Limit f = forall a. f a
type Cone n f = n -> forall a. f a
type Hask = (->)
type HAlgebra f g = f g :~> g
type HCoalgebra f g = g :~> f g
type :*: f g = Lift (,) f g
type :+: f g = Lift Either f g
type Ap p = Lift p Identity
type Dialgebra f g a = f a -> g a
type GDialgebra f g w m a = f (w a) -> g (m a)
type Bialgebra f g a = (Algebra f a, Coalgebra g a)
type GBialgebra f g w m a = (GAlgebra f w a, GCoalgebra g m a)
type Algebra f a = f a -> a
type GAlgebra f w a = f (w a) -> a
type Coalgebra f a = a -> f a
type GCoalgebra f m a = a -> f (m a)
type Trialgebra f g h a = (Algebra f a, Dialgebra g h a)
type Hyper h a = Fix (PHyper h)
type Hyp e a = Hyper (ContraF e) a
type On p f = Biff p f f
type PAp p = Biff p Identity
type PCofree = PAp (,)
type PFree = PAp Either
type Cofree f = Fix (PCofree f)
type Stream = Cofree Identity
type :.: = CompF
type :++: = Comp Either
type :**: = Comp (,)
type Interpreter y g h = y :~> Ran g h
type InterpreterT f g h = forall y. (Functor y) => Interpreter y g h -> Interpreter (f y) g h
type Cointerpreter y g h = Lan g h :~> y
type CointerpreterT f g h = forall y. (Functor y) => Cointerpreter y g h -> Cointerpreter (f y) g h
type Zygo = (,)
type ZygoT = CoreaderT
type Para f = (,) (FixF f)
type ParaT w f = CoreaderT w (FixF f)
type Apo f a = Either (FixF f) a
type ApoT f m a = EitherT (FixF f) m a
type GApo b a = Either b a
type GApoT b m a = EitherT b m a
type Coideal = Ap (,)
type :* m n = Mutual' (,) m n
type Ideal = Ap Either
type :+ m n = Mutual' Either m n
type PFree = PAp Either
type Free f = Fix (PFree f)
type SubSeq seg ans a b = Seq seg ans b -> Seq seg ans a
type Iterator m a = Cursor m () () a
type SubCont p m a b = CC p m a -> CC p m b
type CCT p m a w = SubCont p m a w -> CC p m w
type Prompt p m w = (forall x. CCT p m x w -> p m x, forall x. p m x -> Maybe (CCT p m x w))
type SubCont p m a b = CC p m a -> CC p m b
type CCT p m a w = SubCont p m a w -> CC p m w
type Prompt p m w = (forall x. CCT p m x w -> p m x, forall x. p m x -> Maybe (CCT p m x w))
type SubCont p m a b = CC p m a -> CC p m b
type CCT p m a w = SubCont p m a w -> CC p m w
type Prompt p m w = (forall x. CCT p m x w -> p m x, forall x. p m x -> Maybe (CCT p m x w))
type SubCont p m a b = CC p m a -> CC p m b
type CCT p m a w = SubCont p m a w -> CC p m w
type Prompt p m w = (forall x. CCT p m x w -> p m x, forall x. p m x -> Maybe (CCT p m x w))
type Content = ByteString
type Name = [Component]
type Component = String
type PublisherPublicKeyDigest = String
type ChildSelector = Int
type AnswerOriginKind = Int
type Scope = Int
type Nonce = String
type MinSuffixComponents = Int
type MaxSuffixComponents = Int
type Timestamp = Word16
type FreshnessSeconds = Int
type FinalBlockID = String
type DigestAlgorithm = String
type Witness = String
type SignatureBits = String
type IPv6Address = Text
type IPv4Address = Text
type MACAddress = Text
type TimeStamp = UTCTime
type PFValue64 = Word64
type PFValue32 = Word32
type PFValueText = Text
type Flavor = Text
type FlavorMap = Bimap Flavor Word32
type Put = PutM ()
type Putter a = a -> Put
type ConduitErrorHandler m o = String -> Conduit ByteString m o
type SinkErrorHandler m r = String -> Consumer ByteString m r
type SinkTerminationHandler m r = (ByteString -> Result r) -> Consumer ByteString m r
type ExtensionRaw = (OID, Bool, [ASN1])
type ASN1String = (ASN1StringType, String)
type OID = [Integer]
type OID = [Integer]
type ASN1String = (ASN1StringType, String)
type CF = CF' Integer
type Data s a = Nondet (Ctx s) s a
type Decons a = ([NormalForm] -> NormalForm) -> Result a -> Maybe NormalForm
type Computation a = forall s. (CFLP s, BooleanSolver (Ctx s)) => Context (Ctx s) -> ID -> Data s a
type Headers = [(HeaderName, String)]
type CGI a = CGIT IO a
type CGI a = CGIT IO a
type Sessions = MVar ([Integer], Map Integer Session)
type SessionName = String
type SessionM = StateT Session (CGIT IO)
type UI = R
type R = Float
type Point = (R, R)
type Radian = Float
type Gray = UI
type Rnd = StdGen
type Model = [(String, [String])]
type Range a = (a, a)
type RectSize = (Double, Double)
type Range = (Double, Double)
type PointMapFn x y = (Limit x, Limit y) -> Point
type AlignmentFn = Point -> Point
type ChartBackend a = Program ChartBackendInstr a
type ChartBackend a = Program ChartBackendInstr a
type AlignmentFn = Point -> Point
type PickFn a = Point -> Maybe a
type AxisFn x = [x] -> AxisData x
type TimeSeq = LocalTime -> ([LocalTime], [LocalTime])
type TimeLabelFn = LocalTime -> String
type Span = (Int, Int)
type SpaceWeight = (Double, Double)
type MAxisFn t = [t] -> Maybe (AxisData t)
type EC l a = StateT l (State CState) a
type DFont = (FontData, OutlineMap)
type Range a = (a, a)
type Prec = Int
type GenTransformer = forall a. Gen a -> Gen a
type MakePM a = a -> PatternMatch
type Error = Text
type Weight = Double
type TermVector = DefaultMap Text Double
type Extractor t = Parsec (TaggedSentence t) ()
type InRedir = InRedirT (HandleCloserT IO)
type OutRedir = OutRedirT IO
type Recorder = RecorderT Identity
type IntArchiverT = ArchiverT Int
type BoolArchiverT = ArchiverT Bool
type HandleArchiverT = ArchiverT Handle
type IntFilterT = FilterT Int
type BoolFilterT = FilterT Bool
type HandleFilterT = FilterT Handle
type FileA m = Atom (File m)
type IgnorantT m = QuietT (DeafT m)
type Ignorant = IgnorantT Identity
type ChattyT m = HereStringT (RecorderT m)
type Chatty = ChattyT Identity
type StrictBuilder i = StrictBuilderT i Identity
type LazyBuilder i = LazyBuilderT i Identity
type Fail e = FailT e Identity
type Blocks = Seq Block
type Inlines = Seq Inline
type ReferenceMap = Map Text (Text, Text)
type FirstName = String
type LastName = String
type Warning = (Text, Integer)
type SumTestFuncParams = (UnderOneHundred Integer, UnderOneHundred Integer)
type Test = (String, Property)
type TestBatch = (String, [Test])
type Unop a = a -> a
type Binop a = a -> a -> a
type FracT = Float
type NumT = Int
type OrdT = Int
type T = Char
type BinRel a = a -> a -> Bool
type RecordedEvent u = (RecordedEventType, u)
type ChannelLabels u = Map u String
type OneToOneChannel = Chan Chanin Chanout
type OneToAnyChannel = Chan (Shared Chanin) (Chanout)
type AnyToOneChannel = Chan (Chanin) (Shared Chanout)
type AnyToAnyChannel = Chan (Shared Chanin) (Shared Chanout)
type Barrier = PhasedBarrier ()
type EnrolledBarrier = Enrolled PhasedBarrier ()
type OneToManyChannel = Chan BroadcastChanin BroadcastChanout
type AnyToManyChannel = Chan BroadcastChanin (Shared BroadcastChanout)
type ManyToOneChannel = Chan ReduceChanin ReduceChanout
type ManyToAnyChannel = Chan (Shared ReduceChanin) ReduceChanout
type EightWay a b l r al br ar bl = (FourWay a b l r, FourWayDiag al br ar bl)
type Series a = Int -> Cons a
type CHP = CHPSpecT (StateT CHPState IO)
type OneToOneChannel = Chan Chanin Chanout
type OneToAnyChannel = Chan (Shared Chanin) (Chanout)
type AnyToOneChannel = Chan (Chanin) (Shared Chanout)
type AnyToAnyChannel = Chan (Shared Chanin) (Shared Chanout)
type Barrier = PhasedBarrier ()
type EnrolledBarrier = Enrolled PhasedBarrier ()
type BindingGroup = [(Name, [(Name, [[Type]])])]
type GTrafo = Trafo Unit Productions
type GramTrafo env a = Trafo (MapA_X env a) Productions
type GReadMsg = Message Token (Maybe Token)
type Field = String
type Headers = [Header]
type Header = (,) Field Field
type Chu2Errors = Field -> IO ()
type Application = EnvData -> IO ResponseData
type Middleware = Application -> Application
type Chuchu m = ChuchuM m ()
type TextBuilder = Builder
type BlazeBuilder = Builder
type Name = String
type CIRC = State (Int, [(String, Int)])
type Id = String
type Name = String
type ModuleName = String
type CtorName = String
type TypeName = String
type TypeParam = String
type Code = String
type Import = String
type RM m a b = a -> EitherT String m b
type Content = UNode String
type Attr = (String, String)
type Abbrev = (String, [(String, Map String String)])
type MacroMap = (String, [Element])
type Option = (String, String)
type Delimiter = String
type NameAttrs = [(String, String)]
type Citations = [[Cite]]
type ReferenceMap = [(String, Value)]
type Phone = Text
type Phone = Text
type Phone = Char
type VariantSource = Text
type VariantCitation = [(VariantSource, [SemanticVariantType])]
type Variant = (Char, VariantCitation)
type StrokeCount = Int
type HDZEntry = Text
type CangjieInputCode = Text
type IsSimplifiedKangXi = Bool
type Reading = [Either Text Phone]
type CharDefinition = Text
type OccurrenceCount = Int
type IsHDZSubstitution = Bool
type CommonTangCharacter = Bool
type Byte = Word8
type AlexInput = (Posn, Char, [Byte], String)
type Doc = [ShowS] -> [ShowS]
type UID = String
type CName = String
type URL = String
type Interval = (Integer, Integer)
type ClaferBinding = Maybe UID
type LineNo = Integer
type ColNo = Integer
type QName = String
type FQName = String
type PQName = String
type UID = String
type Result = String
type Ident = PosIdent
type UIDIClaferMap = StringMap IClafer
type Position = ((LineNo, ColNo), (LineNo, ColNo))
type HappyAny = Any
type ClaferM = ClaferT Identity
type ClaferT m = ExceptT ClaferErrs (StateT ClaferEnv m)
type ClaferErr = CErr ErrPos
type ClaferErrs = CErrs ErrPos
type ClaferSErr = CErr Span
type ClaferSErrs = CErrs Span
type LastNl = (Int, Int)
type Position = Posn
type Resolve = Either ClaferSErr
type ClaferErr = CErr ErrPos
type InputModel = String
type RAM s a = Vector (s :+: D1) a
type MemState s a = State (RAM s a)
type BlackBoxTemplate = [Element]
type PrimMap = HashMap Text Primitive
type Id = Var Term
type TyVar = Var Type
type DcName = Name DataCon
type ConTag = Int
type TyConName = Name TyCon
type TmName = Name Term
type LetBinding = (Id, Embed Term)
type Kind = Type
type KindOrType = Type
type KiName = Name Kind
type TyName = Name Type
type TyVar = Var Type
type Gamma = HashMap TmName Type
type Delta = HashMap TyName Kind
type Identifier = Text
type Size = Int
type SyncIdentifier = Either Identifier (Identifier, (Identifier, Int))
type SyncExpr = Either Expr (Expr, (Identifier, Int))
type RewriteSession m = ReaderT RewriteEnv (StateT RewriteState (FreshMT m))
type RewriteMonad m = WriterT Any (RewriteSession m)
type Transform m = [CoreContext] -> Term -> m Term
type Rewrite m = Transform (R m)
type BindingMap = HashMap TmName (Type, Term)
type NormalizeMonad = State NormalizeState
type NormalizeSession = RewriteSession NormalizeMonad
type NormRewrite = Rewrite NormalizeMonad
type Bit = BitVector 1
type Bit = BitVector 1
type SFixed = Fixed Signed
type UFixed = Fixed Unsigned
type NumSFixedC int frac = (KnownNat frac, KnownNat (frac + frac), KnownNat (int + frac), KnownNat (1 + (int + frac)), KnownNat ((int + frac) + (int + frac)), ((int + int) + (frac + frac)) ~ ((int + frac) + (int + frac)))
type ENumSFixedC int1 frac1 int2 frac2 = (KnownNat frac1, KnownNat frac2, KnownNat (Max frac1 frac2), KnownNat (int1 + frac1), KnownNat (int2 + frac2), KnownNat ((int1 + int2) + (frac1 + frac2)), KnownNat (1 + Max (int1 + frac1) (int2 + frac2)), KnownNat ((1 + Max int1 int2) + Max frac1 frac2), ((int1 + frac1) + (int2 + frac2)) ~ ((int1 + int2) + (frac1 + frac2)))
type FracSFixedC int frac = (NumSFixedC int frac, KnownNat int, KnownNat (((int + frac) + 1) + (int + frac)))
type ResizeSFC int1 frac1 int2 frac2 = (KnownNat frac1, KnownNat frac2, KnownNat (int1 + frac1), KnownNat (int2 + frac2))
type DivideSC int1 frac1 int2 frac2 = (KnownNat int2, KnownNat frac2, KnownNat (int1 + frac1), KnownNat (int2 + frac2), KnownNat (((int1 + frac2) + 1) + (int2 + frac1)))
type NumUFixedC int frac = NumSFixedC int frac
type ENumUFixedC int1 frac1 int2 frac2 = ENumSFixedC int1 frac1 int2 frac2
type FracUFixedC int frac = FracSFixedC int frac
type ResizeUFC int1 frac1 int2 frac2 = ResizeSFC int1 frac1 int2 frac2
type DivideUC int1 frac1 int2 frac2 = DivideSC int1 frac1 int2 frac2
type NumFixedC rep int frac = (SaturatingNum (rep (int + frac)), ExtendingNum (rep (int + frac)) (rep (int + frac)), ResizeFC rep (int + int) (frac + frac) int frac, MResult (rep (int + frac)) (rep (int + frac)) ~ rep ((int + int) + (frac + frac)))
type ENumFixedC rep int1 frac1 int2 frac2 = (ResizeFC rep int1 frac1 (1 + Max int1 int2) (Max frac1 frac2), ResizeFC rep int2 frac2 (1 + Max int1 int2) (Max frac1 frac2), Bounded (rep ((1 + Max int1 int2) + Max frac1 frac2)), Num (rep ((1 + Max int1 int2) + Max frac1 frac2)), ExtendingNum (rep (int1 + frac1)) (rep (int2 + frac2)), MResult (rep (int1 + frac1)) (rep (int2 + frac2)) ~ rep ((int1 + int2) + (frac1 + frac2)))
type FracFixedC rep int frac = (NumFixedC rep int frac, DivideC rep int frac int frac, Integral (rep (int + frac)))
type ResizeFC rep int1 frac1 int2 frac2 = (Resize rep, Ord (rep (int1 + frac1)), Num (rep (int1 + frac1)), Bits (rep (int1 + frac1)), Bits (rep (int2 + frac2)), KnownNat frac1, KnownNat frac2, KnownNat (int1 + frac1), KnownNat (int2 + frac2))
type DivideC rep int1 frac1 int2 frac2 = (Resize rep, Integral (rep (((int1 + frac2) + 1) + (int2 + frac1))), Bits (rep (((int1 + frac2) + 1) + (int2 + frac1))), KnownNat int2, KnownNat frac2, KnownNat (int1 + frac1), KnownNat (int2 + frac2), KnownNat (((int1 + frac2) + 1) + (int2 + frac1)))
type SystemClock = Clk "system" 1000
type Signal a = Signal' SystemClock a
type Unbundled a = Unbundled' SystemClock a
type DataFlow iEn oEn i o = DataFlow' SystemClock iEn oEn i o
type Name = String
type Title = String
type FunTab e a = [a]
type SemEq a = Tweak -> a -> a -> Bool
type Equal = []
type Theorem = Equal
type Law t = LawArgs t -> Equal (LawBody t)
type Pos = Int
type Reader r = ReaderT r Identity
type String = [Char]
type Selector = Fix SelectorF
type Css = StyleM ()
type Ramp = [(Color, Size Rel)]
type Css = StyleM ()
type Selector = Fix SelectorF
type Clck url = ClckT url (ServerPartT IO)
type ClckPlugins = Plugins Theme (ClckT ClckURL (ServerPartT IO) Response) (ClckT ClckURL IO ()) ClckwrksConfig ClckPluginsSt
type ClckForm url = Form (ClckT url (ServerPartT IO)) [Input] ClckFormError [XMLGenT (ClckT url (ServerPartT IO)) XML] ()
type ClckFormT error m = Form m [Input] error [XMLGenT m XML] ()
type ThemeName = Text
type BugsT m = ClckT BugsURL (ReaderT BugsConfig m)
type BugsM = ClckT BugsURL (ReaderT BugsConfig (ServerPartT IO))
type BugsForm = ClckFormT BugsFormError BugsM
type IrcBotT m = ClckT IrcBotURL (ReaderT IrcBotConfig m)
type IrcBotM = ClckT IrcBotURL (ReaderT IrcBotConfig (ServerPartT IO))
type IrcBotForm = ClckFormT IrcFormError IrcBotM
type MediaT m = ClckT MediaURL (ReaderT MediaConfig m)
type MediaM = ClckT MediaURL (ReaderT MediaConfig (ServerPartT IO))
type MediaForm = ClckFormT MediaFormError MediaM
type Pages = IxSet Page
type PageT m = ClckT PageURL (ReaderT PageConfig m)
type PageT' url m = ClckT url (ReaderT PageConfig m)
type PageM = ClckT PageURL (ReaderT PageConfig (ServerPartT IO))
type PageAdminM = ClckT PageAdminURL (ReaderT PageConfig (ServerPartT IO))
type PageForm = ClckFormT PageFormError PageM
type (:*:) a b = (a, b)
type (:+:) a b = Either a b
type Iso s t a b = forall p f. (Functor f, Bifunctor p) => p s (f t) -> p a (f b)
type Iso' a b = Iso b b a a
type LensLike f s t a b = (s -> f t) -> (a -> f b)
type LensLike' f a b = LensLike f b b a a
type Lens s t a b = forall f. Functor f => LensLike f s t a b
type Lens' a b = Lens b b a a
type Traversal s t a b = forall f. Applicative f => LensLike f s t a b
type Traversal' a b = Traversal b b a a
type State s a = StateT s Id a
type Reader r a = ReaderT r Id a
type Writer w a = WriterT w Id a
type Cont r a = ContT r Id a
type Nil = Union Empty
type Member f s = f ∈ s
type Include s t = s ⊆ t
type Options = [String]
type Unary (a :: i -> k) (p :: i -> Constraint) = a <| p
type Binary (a :: i -> i2 -> k) (p :: i -> i2 -> Constraint) = a <| p
type Ternary (a :: i -> i2 -> i3 -> k) (p :: i -> i2 -> i3 -> Constraint) = a <| p
type Quaternary (a :: i -> i2 -> i3 -> i4 -> k) (p :: i -> i2 -> i3 -> i4 -> Constraint) = a <| p
type Quinary (a :: i -> i2 -> i3 -> i4 -> i5 -> k) (p :: i -> i2 -> i3 -> i4 -> i5 -> Constraint) = a <| p
type Senary (a :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> k) (p :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> Constraint) = a <| p
type Septenary (a :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> i7 -> k) (p :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> i7 -> Constraint) = a <| p
type Octary (a :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> i7 -> i8 -> k) (p :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> i7 -> i8 -> Constraint) = a <| p
type Nonary (a :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> i7 -> i8 -> i9 -> k) (p :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> i7 -> i8 -> i9 -> Constraint) = a <| p
type Denary (a :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> i7 -> i8 -> i9 -> i10 -> k) (p :: i -> i2 -> i3 -> i4 -> i5 -> i6 -> i7 -> i8 -> i9 -> i10 -> Constraint) = a <| p
type AllOf as = AllOf' as as
type Is = (~)
type AllOfI as = AllOfI' as as
type AllOfF as t = AllOfF' as as t
type Distance = Double
type DistFn a = a -> a -> Distance
type Size = Int
type Url = Text
type Title = Text
type Level = Int
type Info = Text
type Opt a = (CM -> StateID -> a, CM -> StateID -> BitScore -> a -> a, CM -> StateID -> BitScore -> a -> a, CM -> StateID -> BitScore -> a -> a, CM -> StateID -> BitScore -> (Char, Char, BitScore) -> a -> a, CM -> StateID -> BitScore -> (Char, BitScore) -> a -> a, CM -> StateID -> BitScore -> (Char, BitScore) -> a -> a, CM -> StateID -> BitScore -> (Char, BitScore) -> a -> a, CM -> StateID -> BitScore -> (Char, BitScore) -> a -> a, CM -> StateID -> a -> a -> a, [(a, a)] -> [(a, a)], a -> String)
type Name = String
type Help = String
type FlagHelp = String
type Update a = String -> a -> Either String a
type ArgParser a = String -> Either Doc a
type ArgPrinter a = a -> Doc
type Converter a = (ArgParser a, ArgPrinter a)
type Err = ErrorT Fail IO
type KEY = (IPv4, Integer)
type SubtlexMap = Map ByteString RawEntry
type CCDict = IntMap CCTrieEntry
type Source = FilePath
type Target = FilePath
type Codec fr fw a = Codec' fr fw a a
type ConcreteCodec b f a = Codec (ReaderT b f) (Const b) a
type PartialCodec fr fw a = Codec fr (Compose Maybe fw) a
type BinaryCodec a = Codec Get PutM a
type ForeignContext a = ReaderT (Ptr a) IO
type ForeignCodec a = ForeignCodec' a a
type ForeignCodec' p a = Codec (ForeignContext p) (ForeignContext p) a
type JSONCodec a = ConcreteCodec Value Parser a
type ObjectParser = ReaderT Object Parser
type ObjectBuilder = Const (Endo [Pair])
type ObjectCodec a = Codec ObjectParser ObjectBuilder a
type BitCodec a = Codec Block BitPut a
type CoverageEntry = ([MixEntry], [Integer], [String])
type Lix = [Hit]
type URL = String
type Code = String
type PasteId = String
type PasteOutput = String
type LangName = String
type ProjectDependencies = (PackageIdentifier, [PackageIdentifier], [WorkspaceProject])
type Action = EitherT String IO
type State s = StateT s Identity
type NotificationCount = MVar (Word64, [IO ()])
type Async a s = (a -> IO ()) -> IO s
type Id a = a -> a
type (:>>=) a b = Increasing' a b
type (:>>) a b = StrictlyIncreasing' a b
type (:<-) = RevFun
type (:|) a b = Either a b
type At a = forall z. Tagged a z -> z
type Tagged2 a b z = Tagged a (Tagged b z)
type At2 a b = forall z. Tagged2 a b z -> z
type Tagged3 a b c z = Tagged a (Tagged2 b c z)
type At3 a b c = forall z. Tagged3 a b c z -> z
type Tagged4 a b c d z = Tagged a (Tagged3 b c d z)
type At4 a b c d = forall z. Tagged4 a b c d z -> z
type D1 = Succ D0
type D2 = Succ D1
type D3 = Succ D2
type D4 = Succ D3
type D5 = Succ D4
type D6 = Succ D5
type D7 = Succ D6
type D8 = Succ D7
type D9 = Succ D8
type D10 = Succ D9
type D11 = Succ D10
type D12 = Succ D11
type D13 = Succ D12
type D14 = Succ D13
type D15 = Succ D14
type D16 = Succ D15
type D17 = Succ D16
type D18 = Succ D17
type D19 = Succ D18
type D20 = Succ D19
type D21 = Succ D20
type D22 = Succ D21
type D23 = Succ D22
type D24 = Succ D23
type D25 = Succ D24
type D26 = Succ D25
type D27 = Succ D26
type D28 = Succ D27
type D29 = Succ D28
type D30 = Succ D29
type D31 = Succ D30
type D32 = Succ D31
type D33 = Succ D32
type D34 = Succ D33
type D35 = Succ D34
type D36 = Succ D35
type D37 = Succ D36
type D38 = Succ D37
type D39 = Succ D38
type D40 = Succ D39
type D41 = Succ D40
type D42 = Succ D41
type D43 = Succ D42
type D44 = Succ D43
type D45 = Succ D44
type D46 = Succ D45
type D47 = Succ D46
type D48 = Succ D47
type D49 = Succ D48
type D50 = Succ D49
type D51 = Succ D50
type D52 = Succ D51
type D53 = Succ D52
type D54 = Succ D53
type D55 = Succ D54
type D56 = Succ D55
type D57 = Succ D56
type D58 = Succ D57
type D59 = Succ D58
type D60 = Succ D59
type D61 = Succ D60
type D62 = Succ D61
type D63 = Succ D62
type D64 = Succ D63
type D65 = Succ D64
type RWord8 = RWord Word8
type RWord16 = RWord Word16
type RWord32 = RWord Word32
type RWord64 = RWord Word64
type ArrayIx a = Len (ArrayElem a) Word
type Endpoint = String
type Path = String
type Key = ByteString
type Secret = ByteString
type Passphrase = ByteString
type Exchange a = ExchangeT IO a
type Token = Vector Text
type Field = Text
type Sentence = Vector Token
type Transport t m = MonadIO m => forall r. Value -> Server Value Value (t m) r
type Protocol s m e = forall r. (s, Value) -> Proxy Value Value (s, Value) Value (ExceptT e m) r
type JSONClient s m r = Client (s, Value) Value (ExceptT JSONClientError m) r
type JSONClientError = (Value, Text, Value)
type Protocol s m e = forall r. (s, Value) -> Proxy Value Value (s, Value) Value (ExceptT e m) r
type Transport t m = MonadIO m => forall r. Value -> Server Value Value (t m) r
type VI = Vector (Vector Int)
type Point = (Float, Float, Float)
type Normal = (Float, Float, Float)
type Angle = Float
type Scene = Tree SceneNode
type ID = String
type SID = String
type Material = (SID, Effect)
type Effect = Profile
type Animation = Tree (SID, AnimChannel)
type TestTrees = [(Int, [(AVL Int, Int)])]
type StdSet = Set
type StdMap = Map
type AvlSet = Set
type AvlMap = Map
type RangedSet = RSet
type StdSet = Set
type StdMap = Map
type Style = Token -> String -> ShowS
type RGBA = V4
type Color = RGBA
type Dot = String
type IntVector = UArray Int Int
type Composition = [Int]
type Tableau a = [[a]]
type Tableau a = [[a]]
type TriangularArray a = Array Tri a
type Dot = String
type LatticePath = [Step]
type Dot = String
type Word a = [Generator a]
type TimeSlot = Int
type DayNumber = Int
type DaySlot = Int
type RoomNumber = Int
type EventNumber = Int
type PersonNumber = Int
type FeatureNumber = Int
type Counter = Int
type BitWindow = (Word64, Word64)
type HostName = String
type Env e = EnvT e Identity
type Store s = StoreT s Identity
type Traced m = TracedT m Identity
type Env e = EnvT e Identity
type Store s = StoreT s Identity
type Traced m = TracedT m Identity
type Pointer i = PointerT i Identity
type Env e = EnvT e Identity
type Store s = StoreT s Identity
type Traced m = TracedT m Identity
type Traced m = TracedT m Identity
type Store s = StoreT s Identity
type Env e = EnvT e Identity
type AccEFL acc = acc -> Char -> (PairS acc (MaybeS Char))
type FoldEFL acc = acc -> Char -> acc
type ImperativeLoop acc = Ptr Word8 -> Ptr Word8 -> Int -> IO (PairS (PairS acc Int) Int)
type ImperativeLoop_ acc = Ptr Word8 -> Int -> IO acc
type Native = LE
type UTF16BE = UTF16 BE
type UTF16LE = UTF16 LE
type UTF16Native = UTF16 Native
type UTF32BE = UTF32 BE
type UTF32LE = UTF32 LE
type UTF32Native = UTF32 Native
type CompactString = CompactString ASCII
type CompactString = CompactString UTF16Native
type CompactString = CompactString UTF8
type AccEFL acc = acc -> Char -> (PairS acc (MaybeS Char))
type FoldEFL acc = acc -> Char -> acc
type ImperativeLoop acc = Ptr Word8 -> Ptr Word8 -> Int -> IO (PairS (PairS acc Int) Int)
type ImperativeLoop_ acc = Ptr Word8 -> Int -> IO acc
type Native = LE
type UTF16BE = UTF16 BE
type UTF16LE = UTF16 LE
type UTF16Native = UTF16 Native
type UTF32BE = UTF32 BE
type UTF32LE = UTF32 LE
type UTF32Native = UTF32 Native
type CompactString = CompactString ASCII
type CompactString = CompactString UTF16Native
type CompactString = CompactString UTF8
type (:->) f g = forall i. f i -> g i
type (:=>) f a = forall i. f i -> a
type NatM m f g = forall i. f i -> m (g i)
type Context = Cxt Hole
type Term f = Cxt NoHole f (K ())
type Const (f :: (* -> *) -> * -> *) = f (K ())
type (:<) f g = Proj (ComprEmb (Elem f g)) f g
type (:<:) f g = Subsume (ComprEmb (Elem f g)) f g
type (:=:) f g = (f :<: g, g :<: f)
type Alg f e = f e :-> e
type AlgM m f e = NatM m (f e) e
type CxtFun f g = forall h. SigFun (Cxt h f) (Cxt h g)
type SigFun f g = forall (a :: * -> *). f a :-> g a
type Hom f g = SigFun f (Context g)
type CxtFunM m f g = forall h. SigFunM m (Cxt h f) (Cxt h g)
type SigFunM m f g = forall (a :: * -> *). NatM m (f a) (g a)
type HomM m f g = SigFunM m f (Context g)
type Coalg f a = a :-> f a
type CoalgM m f a = NatM m a (f a)
type RAlg f a = f (Term f :*: a) :-> a
type RAlgM m f a = NatM m (f (Term f :*: a)) a
type RCoalg f a = a :-> f (Term f :+: a)
type RCoalgM m f a = NatM m a (f (Term f :+: a))
type CVCoalg f a = a :-> f (Context f a)
type CVCoalgM m f a = NatM m a (f (Context f a))
type (:<:) f g = Subsume (ComprEmb (Elem f g)) f g
type (:=:) f g = (f :<: g, g :<: f)
type (:<:) f g = Subsume (ComprEmb (Elem f g)) f g
type GSubst v a = Map v (A a)
type CxtSubst h a f v = GSubst v (Cxt h f a)
type Subst f v = CxtSubst NoHole (K ()) f v
type (:<) f g = Proj (ComprEmb (Elem f g)) f g
type Context = Cxt Hole
type Term f = Cxt NoHole f ()
type PTerm f = forall h a. Cxt h f a
type Const f = f ()
type Alg f a = f a -> a
type AlgM m f a = f a -> m a
type CxtFun f g = forall a h. Cxt h f a -> Cxt h g a
type SigFun f g = forall a. f a -> g a
type Hom f g = SigFun f (Context g)
type CxtFunM m f g = forall a h. Cxt h f a -> m (Cxt h g a)
type SigFunM m f g = forall a. f a -> m (g a)
type HomM m f g = SigFunM m f (Context g)
type SigFunMD m f g = forall a. f (m a) -> m (g a)
type HomMD m f g = SigFunMD m f (Context g)
type Coalg f a = a -> f a
type CoalgM m f a = a -> m (f a)
type RAlg f a = f (Term f, a) -> a
type RAlgM m f a = f (Term f, a) -> m a
type RCoalg f a = a -> f (Either (Term f) a)
type RCoalgM m f a = a -> m (f (Either (Term f) a))
type CVAlg f a f' = f (Term f') -> a
type CVAlgM m f a f' = f (Term f') -> m a
type CVCoalg f a = a -> f (Context f a)
type CVCoalg' f a = a -> Context f a
type CVCoalgM m f a = a -> m (f (Context f a))
type (:<:) f g = Subsume (ComprEmb (Elem f g)) f g
type (:=:) f g = (f :<: g, g :<: f)
type TermT m f = Term (m :+: f)
type CxtT m h f a = Cxt h (m :+: f) a
type AlgT m f g = Alg f (TermT m g)
type Subst f v = CxtSubst NoHole () f v
type CxtSubst h a f v = Map v (Cxt h f a)
type RPS f g = Hom f g
type Var = Int
type Rule f g v = (Context f v, Context g v)
type TRS f g v = [Rule f g v]
type Step t = t -> Maybe t
type BStep t = t -> (t, Bool)
type DecompTerm f v = Decomp f v (Term f)
type Equation f = (Term f, Term f)
type Equations f = [Equation f]
type UnifyM f v m a = StateT (UnifyState f v) m a
type (:->) (f :: * -> *) (g :: * -> *) = forall i. f i -> g i
type NatM (m :: * -> *) (f :: * -> *) (g :: * -> *) = forall i. f i -> m (g i)
type Trm f a = Cxt NoHole f a (K ())
type Context = Cxt Hole
type Alg f a = f a a :-> a
type AlgM m f a = NatM m (f a a) a
type AlgM' m f a = NatM m (f a (Compose m a)) a
type CxtFun f g = forall h. SigFun (Cxt h f) (Cxt h g)
type SigFun f g = forall (a :: * -> *) (b :: * -> *). f a b :-> g a b
type Hom f g = SigFun f (Context g)
type CxtFunM m f g = forall h. SigFunM m (Cxt h f) (Cxt h g)
type SigFunM m f g = forall (a :: * -> *) (b :: * -> *). NatM m (f a b) (g a b)
type HomM m f g = SigFunM m f (Cxt Hole g)
type Trm f a = Cxt NoHole f a ()
type Context = Cxt Hole
type Alg f a = f a a -> a
type AlgM m f a = f a a -> m a
type CxtFun f g = forall h a b. Cxt h f a b -> Cxt h g a b
type SigFun f g = forall a b. f a b -> g a b
type Hom f g = SigFun f (Context g)
type CxtFunM m f g = forall h. SigFunM m (Cxt h f) (Cxt h g)
type SigFunM m f g = forall a b. f a b -> m (g a b)
type HomM m f g = SigFunM m f (Context g)
type SigFunMD m f g = forall a b. f a (m b) -> m (g a b)
type HomMD m f g = SigFunMD m f (Context g)
type Coalg f a = forall b. a -> [(a, b)] -> Either b (f b (a, [(a, b)]))
type CoalgM m f a = forall b. a -> [(a, b)] -> m (Either b (f b (a, [(a, b)])))
type RAlg f a = f a (Trm f a, a) -> a
type RAlgM m f a = f a (Trm f a, a) -> m a
type RCoalg f a = forall b. a -> [(a, b)] -> Either b (f b (Either (Trm f b) (a, [(a, b)])))
type RCoalgM m f a = forall b. a -> [(a, b)] -> m (Either b (f b (Either (Trm f b) (a, [(a, b)]))))
type CVAlg f a f' = f a (Trm f' a) -> a
type CVAlgM m f a f' = f a (Trm f' a) -> m a
type CVCoalg f a = forall b. a -> [(a, b)] -> Either b (f b (Context f b (a, [(a, b)])))
type CVCoalg' f a = forall b. a -> [(a, b)] -> Context f b (a, [(a, b)])
type CVCoalgM m f a = forall b. a -> [(a, b)] -> m (Either b (f b (Context f b (a, [(a, b)]))))
type TermT m f = Term (Thunk m :+: f)
type TrmT m f a = Trm (Thunk m :+: f) a
type CxtT h m f a = Cxt h (Thunk m :+: f) a
type AlgT m f g = Alg f (TermT m g)
type Overcompensated a = Compensated (Compensated a)
type Compile a b = Compilation a b
type FreshIndex = Integer
type StateExtensionFresh = FreshIndex
type ModuleName = String
type StateExtensionModule = ModuleName
type StateExtensionEnv a = [(String, a)]
type Indentation = Integer
type StateExtensionString = (Indentation, String)
type StateExtensionSequences a = [[a]]
type :-> m n = forall a. m a -> n a
type Inst c m = c m :-> m
type RewriteM m f l = f l -> m (f l)
type Rewrite f l = RewriteM Identity f l
type GRewriteM m f = forall l. RewriteM m f l
type GRewrite f = GRewriteM Identity f
type Translate f l t = TranslateM Identity f l t
type TranslateM m f l t = f l -> m t
type GTranslateM m f t = forall l. TranslateM m f l t
type Polynomial r = OrderedPolynomial r Grevlex
type Monomial (n :: Nat) = Vector Int n
type MonomialOrder n = Monomial n -> Monomial n -> Ordering
type IsPolynomial r n = (NoetherianRing r, Sing n, Eq r)
type Polyn = [(Rational, [(Variable, Integer)])]
type Pure = (->)
type Resourceful = (~>)
type Attr a v = Property a a v
type R2 = (Double, Double)
type Sent w t = [Seg w t]
type Analyse w t = Text -> IO (Sent w t)
type Ob = ([Int], Text)
type Ox a = Ox Text a
type Schema w t a = Vector (Seg w t) -> Int -> Ox a
type Entry a = Maybe (Body a)
type Block w t a = Vector (Seg w t) -> [Int] -> Ox a
type Tag = Text
type Sent t = [Seg t]
type Barrier = IO ()
type State = Maybe (ThreadId, Integer)
type In = T In
type Out = T Out
type In = T In
type Out = T Out
type Candidate = Int
type Ballot = [[Candidate]]
type MutableMap t t1 = TVar (Map t t1)
type StreamConduitM i o m r = Stream m i () -> Stream m o r
type StreamConduit i m o = StreamConduitM i o m ()
type StreamSource m o = StreamConduitM () o m ()
type StreamProducer m o = forall i. StreamConduitM i o m ()
type StreamSink i m r = StreamConduitM i Void m r
type StreamConsumer i m r = forall o. StreamConduitM i o m r
type Source m o = ConduitM () o m ()
type Producer m o = forall i. ConduitM i o m ()
type Sink i = ConduitM i Void
type Consumer i m r = forall o. ConduitM i o m r
type Conduit i m o = ConduitM i o m ()
type Source m o = ConduitM () o m ()
type Conduit i m o = ConduitM i o m ()
type Sink i = ConduitM i Void
type Producer m o = forall i. ConduitM i o m ()
type Consumer i m r = forall o. ConduitM i o m r
type Seconds = Double
type Frames = Int
type Rate = Double
type Channels = Int
type BufferAllocStrategy = (IO Buffer, Int -> Buffer -> IO (IO Buffer))
type BufferAllocStrategy = (IO Buffer, Int -> Buffer -> IO (IO Buffer))
type CharacterEncoding = String
type Conf = [(String, String)]
type Conf = [(String, String)]
type CPOptions = Map OptionSpec String
type CPData = Map SectionSpec CPOptions
type CPError = (CPErrorData, String)
type SectionSpec = String
type OptionSpec = String
type ParseOutput = [(String, [(String, String)])]
type ParseOutput = [(String, [(String, String)])]
type SectionSpec = String
type OptionSpec = String
type CPError = (CPErrorData, String)
type Config = [(String, [(String, String)])]
type Env = [(String, String)]
type Args = [String]
type ToValE (a :: ConfigCode *) (p :: [Symbol]) = ToExc (LookupFailed a p) (ToVal a p)
type Lens' σ α = Lens σ σ α α
type Lens σ τ α β = forall φ. Functor φ => (α -> φ β) -> σ -> φ τ
type Iso' σ α = Iso σ σ α α
type Iso σ τ α β = forall π φ. (Profunctor π, Functor φ) => π α (φ β) -> π σ (φ τ)
type ConfigValidation α λ = forall μ. (MonadIO μ, Functor μ, Applicative μ, MonadError Text μ, MonadWriter (λ Text) μ) => α -> μ ()
type MParser α = Parser (α -> α)
type ProgramInfo α = ProgramInfoValidate α []
type ConfigValidation α λ = forall μ. (MonadIO μ, Functor μ, Applicative μ, MonadError Text μ, MonadWriter (λ Text) μ) => α -> μ ()
type PkgInfo = (String, String, String, String)
type Lens' σ α = Lens σ σ α α
type Lens σ τ α β = forall φ. Functor φ => (α -> φ β) -> σ -> φ τ
type Name = Text
type ChangeHandler = Name -> Maybe Value -> IO ()
type SockSettings = ProxySettings
type Commands m = Tree (Command m)
type ObjectPair k a b = (Category k, Object k a, Object k b, PairObjects k a b, Object k (a, b))
type ObjectMorphism k b c = (Object k b, Object k c, MorphObjects k b c, Object k (k b c))
type (+) = Either
type ObjectSum k a b = (Category k, Object k a, Object k b, SumObjects k a b, Object k (a + b))
type CatTagged k x = Tagged (k (UnitObject k) (UnitObject k)) x
type Arrow a k = (WellPointed a, EnhancedCat a k)
type ObjectPoint k a = (Object k a, PointObject k a)
type ArrowChoice a k = (WellPointed a, PreArrChoice a, EnhancedCat a k)
type Function f = EnhancedCat (->) f
type Forall (p :: * -> Constraint) = (p A, p B)
type ForallF (p :: * -> Constraint) (f :: * -> *) = (p (f A), p (f B))
type Forall1 (p :: (* -> *) -> Constraint) = (p F, p M)
type ForallT (p :: * -> Constraint) (t :: (* -> *) -> * -> *) = (p (t F A), p (t M B))
type Z = Integer
type Z3 = Zn D3
type Q = FieldOfFractions Z
type Qx = UPoly Q X_
type FieldOfRationalFunctions k x = FieldOfFractions (UPoly k x)
type QX = FieldOfRationalFunctions Q X_
type Forest a = [Tree a]
type Graph = Table [Vertex]
type Table a = Array Vertex a
type Bounds = (Vertex, Vertex)
type Edge = (Vertex, Vertex)
type Vertex = Int
type Key = Int
type Key = Int
type Key = Int
type Vs t nt = [V t nt]
type Production t nt = (nt, Vs t nt)
type AugV t nt = V (AugT t) (AugNT nt)
type AugVs t nt = Vs (AugT t) (AugNT nt)
type AugProduction t nt = Production (AugT t) (AugNT nt)
type AugFreeCfg t nt = FreeCfg (AugT t) (AugNT nt)
type Prediction t nt = (LookaheadSet t, Set (AugProduction t nt))
type Predictions t nt = Set (Prediction t nt)
type Continue e f = ContinueT e f Identity
type LastEx = Last SomeException
type EventId = (ThreadId, MVar Bool)
type CallTrace = [String]
type EM l = EMT l Identity
type EM l = EMT l Identity
type CallTrace = [String]
type EM l = EMT l Identity
type CallTrace = [String]
type Typeable1 (a :: * -> *) = Typeable (* -> *) a
type ST2ToMP tc = forall r w a. ST2 r w a -> MultiPassBase r w tc a
type UpdateThreadContext tc tc' = forall r w. (tc' -> tc') -> MultiPassBase r w tc tc'
type TestInstrument1 f r w = PassS (PassS (PassS PassZ)) (WrappedType1 f r w)
type TestInstrument2 f r w = PassS (PassS (PassS (PassS PassZ))) (WrappedType2 f r w)
type TestInstrument3 f r w = PassS (PassS (PassS (PassS (PassS (PassS PassZ))))) (WrappedType3 f r w)
type TestInstrument4 f r w = PassS (PassS (PassS (PassS (PassS (PassS (PassS (PassS PassZ))))))) (WrappedType4 f r w)
type LenType = Word
type LenType = Word
type WriterT = ContT
type OldWriterT r w m a = ContT (r, w) m a
type Choice r i a = ChoiceT r i Identity a
type Cont r a = ContT r Identity a
type Reader e a = ReaderT e Identity a
type State r s a = StateT r s Identity a
type OldWriter r w a = ContT (r, w) Identity a
type ChoiceT m a = forall r i. ChoiceT r i m a
type EitherT e m a = forall r. EitherT r e m a
type MaybeT m a = forall r. MaybeT r m a
type StateT s m a = forall r. StateT r s m a
type WriterT w m a = forall r. OldWriterT r w m a
type ConvertResult a = Either ConvertError a
type CIAscii = CI Ascii
type Quill = (String, Element String)
type Cookies = [(ByteString, ByteString)]
type CookiesText = [(Text, Text)]
type StreamInfoMap = Map Id StreamInfo
type ExternInfoMap = Map Name ExternInfo
type ExternFunInfoMap = Map (Name, Tag) ExternFunInfo
type Depth = Int
type Id = Int
type Name = String
type DropIdx = Word16
type Tag = Int
type Env nm = [(nm, DynamicF [] Type)]
type Output = String
type Spec = Writer [SpecItem] ()
type QueueSize = DropIdx
type Ext = (Name, ExtInput)
type ExtQue = (Id, QueInput)
type StreamInfoMap = Map Id Stream
type ExternVarInfoMap = Map Name ExtVar
type ExternArrInfoMap = Map Tag ExtArray
type ExternFunInfoMap = Map Tag ExtFun
type TriggerInfoMap = Map Name TriggerInfo
type ObserverInfoMap = Map Name ObserverInfo
type Username = ByteString
type ProjectName = ByteString
type Vbind = (Qual Var, Ty)
type Tbind = (Tvar, Kind)
type Pkgname = Id
type Mname = Id
type Var = Id
type Tvar = Id
type Tcon = Id
type Dcon = Id
type Qual t = (Pkgname, Mname, t)
type Id = ByteString
type Var = String
type Indent = Int
type EvOrAct e = Either (ActionOrder e) e
type GenT o = FreeT (Yld o)
type CnsmT a = FreeT (Awt a)
type CrtnT req ans = FreeT (Rqst req ans)
type SrvT req ans m = ReaderT req (CrtnT ans req m)
type CliT req ans = CrtnT req ans
type SObjT s m = SrvT (Arg s) (Res s) m
type CObjT s = CliT (Arg s) (Res s)
type SObjBT s m = CrtnT (Res s) (Arg s) m
type EStT s m = EitherT CrtnErr (StateT s m)
type LogInput = Arg LogOp
type LogServer m r = SObjT LogOp m r
type LogClient m r = CObjT LogOp m r
type World e m r = SObjT (WorldOp e m) m r
type Driver e m = SObjT (DrvOp e) m
type DrvClient e m r = CObjT (DrvOp e) m r
type IOActor e m r = SObjT (IOOp e) m r
type ReduceSignature a = [Value] -> [Value] -> Bool -> ViewReduce a
type MapSignature = Object -> ViewMap ()
type MapSignature = Object -> ViewMap ()
type ReduceSignature a = [Value] -> [Value] -> Bool -> ViewReduce a
type CouchResponse m = Response (ResumableSource m ByteString)
type Path = ByteString
type Revision = ByteString
type Path = String
type Revision = Text
type Counter k v = Map k v
type Address = String
type Message = ByteString
type Name = String
type Scheme = String
type Method = String
type Reply b = b -> IO ()
type Std__basic_string = Ptr Std__basic_string_mem
type FlagSet = T Word32
type Encoding = Text
type RawEvent = PersistedEvent ByteString
type FigureColor = Colour Double
type Point = (Double, Double)
type Vector = Point
type Line = [Point]
type Path = [Segment]
type Sequence = [Bool]
type Writer = StateT Sequence Identity
type Reader = StateT (Sequence, Int) Identity
type DiploidSequence = (Sequence, Sequence)
type DiploidReader = StateT ((Sequence, Int), (Sequence, Int)) Identity
type Sequence = [Word8]
type Writer = StateT Sequence Identity
type Reader = StateT (Sequence, Int) Identity
type DiploidSequence = (Sequence, Sequence)
type DiploidReader = StateT ((Sequence, Int), (Sequence, Int)) Identity
type Sequence = [Word16]
type Writer = StateT Sequence Identity
type Reader = StateT (Sequence, Int) Identity
type DiploidSequence = (Sequence, Sequence)
type DiploidReader = StateT ((Sequence, Int), (Sequence, Int)) Identity
type PersistentChecklist = Persistent Status
type AgentId = String
type Time = Int
type PersistentCounter = Persistent Int
type AgentProgram u = Agent u -> StateT u IO (Agent u)
type AgentsProgram u = [Agent u] -> StateT u IO [Agent u]
type AgentProgram u = Agent u -> StateT u IO (Agent u)
type AgentsProgram u = [Agent u] -> StateT u IO [Agent u]
type Xs = Vector X
type Ys = Vector Y
type Word a = Set a
type Sent a = [Word a]
type WordL a b = (Word a, Dist b)
type SentL a b = [WordL a b]
type Codec a b = (AtomCodec a, AtomCodec b)
type CodecM a b c = Codec (Codec a b) c
type Word a = Set a
type Sent a = [Word a]
type WordL a b = (Word a, Dist b)
type SentL a b = [WordL a b]
type Xs = Vector X
type Ys = Vector Y
type Sent a b = [Word a b]
type SentL a b = [WordL a b]
type Codec a b = (AtomCodec a, AtomCodec (Maybe b))
type CodecM a b c = Codec (Codec a b) c
type Sent a b = [Word a b]
type SentL a b = [WordL a b]
type Sent a b = [Word a b]
type WordL a b = (Word a b, Dist b)
type SentL a b = [WordL a b]
type Xs o t = Vector (X o t)
type Ys t = Vector (Y t)
type LbIx = Int
type FeatSel o t f = FeatGen o t f -> Xs o t -> Ys t -> [f]
type Lb = (Lb1, Lb2)
type CodecM c a = Codec c a
type CodecData a b c = (AtomCodec a, AtomCodec (Maybe b), AtomCodec (Maybe c))
type Sent a b = [Word a b]
type WordL a b = (Word a b, Dist b)
type SentL a b = [WordL a b]
type Lb = (Lb1, Lb2)
type FeatSel o t f = FeatGen o t f -> Xs o t -> Ys t -> [f]
type CbIx = Int
type Xs = Vector X
type Ys = Vector Y
type FeatSel = Xs -> Ys -> [Feat]
type Sent a b = [Word a b]
type WordL a b = (Word a b, Prob [b])
type SentL a b = [WordL a b]
type Codec a b = (AtomCodec a, Vector (AtomCodec (Maybe b)))
type CodecM a b c = Codec (Codec a b) c
type Name = StrictText
type Schedule = ScheduleT Identity
type Schedule = ScheduleT Identity
type Hash256 = Hash8 Word32
type Hash512 = Hash8 Word64
type Word96 = LargeKey Word32 Word64
type Word128 = LargeKey Word64 Word64
type Word160 = LargeKey Word32 Word128
type Word192 = LargeKey Word64 Word128
type Word224 = LargeKey Word32 Word192
type Word256 = LargeKey Word64 Word192
type Octet = Word8
type BitLength = Int
type ByteLength = Int
type Properties = [(String, String)]
type Record = (String, String)
type NistTest = [Record]
type TypedTest = (String, [NistTest])
type TestCategory = (Properties, [NistTest])
type DataUnitOffset = Word32
type Reflector = Map (ℤ / 26) (ℤ / 26)
type Plugboard = Map (ℤ / 26) (ℤ / 26)
type PublicPoint = Point
type PrivateNumber = Integer
type HashFunction = ByteString -> ByteString
type MaskGenAlgorithm = HashFunction -> ByteString -> Int -> ByteString
type PublicPoint = Point
type PrivateNumber = Integer
type PublicPoint = Point
type PrivateNumber = Integer
type PublicNumber = Integer
type PrivateNumber = Integer
type HashFunctionBS a = ByteString -> Digest a
type HashFunctionLBS a = ByteString -> Digest a
type NameMap = IntMap String
type LName = Located Name
type LQName = Located QName
type LString = Located String
type Prop = Type
type SType = Type
type Value = GenValue Bool BV
type SBool = SVal
type SWord = SVal
type Value = GenValue SBool SWord
type Gen g = Int -> g -> (Value, g)
type ReadEnv = EvalEnv
type GenBinary b w = TValue -> GenValue b w -> GenValue b w -> GenValue b w
type Binary = GenBinary Bool BV
type GenUnary b w = TValue -> GenValue b w -> GenValue b w
type Unary = GenUnary Bool BV
type BinArith = Integer -> Integer -> Integer -> Integer
type TypesMap = List TypeMap
type MGU = (Subst, [Prop])
type IfaceTySyn = TySyn
type IfaceNewtype = Newtype
type ModuleM = ModuleT IO
type TCAction i o = i -> InferInput -> IO (InferOutput o)
type ModuleCmd a = ModuleEnv -> IO (ModuleRes a)
type ModuleRes a = (Either ModuleError (a, ModuleEnv), [ModuleWarning])
type IfaceTySyn = TySyn
type SpecCache = Map QName (Decl, TypesMap (QName, Maybe Decl))
type SpecT m a = StateT SpecCache (ModuleT m) a
type SpecM a = SpecT IO a
type Binary = TValue -> Value -> Value -> Value
type Unary = TValue -> Value -> Value
type SatResult = [(Type, Expr, Value)]
type BinaryPolynomial = Integer
type PRF password = password -> Bytes -> Bytes
type MaskGenAlgorithm seed output = seed -> Int -> output
type PublicNumber = Integer
type PrivateNumber = Integer
type PublicPoint = Point
type PrivateNumber = Integer
type PublicPoint = Point
type PrivateNumber = Integer
type PublicPoint = Point
type PrivateNumber = Integer
type DataUnitOffset = Word32
type Order = GOrder CryptsyNum CryptsyNum CryptsyNum
type Trade = GTrade CryptsyTime CryptsyNum CryptsyNum CryptsyNum
type OrderBook = GOrderBook CryptsyNum CryptsyNum CryptsyNum
type Market = GMarket CryptsyNum CryptsyNum CryptsyTime CryptsyNum
type PubCryptsy = ReaderT Manager (EitherT CryptsyError (StateT (Maybe CookieJar) IO))
type MarketData = GMarketData CryptsyNum CryptsyNum CryptsyTime CryptsyNum
type OrderData = GOrderData CryptsyNum CryptsyNum CryptsyNum
type Reson = [(Sig, Sig)]
type Color = Colour Double
type Sig2 = (Sig, Sig)
type Sig3 = (Sig, Sig, Sig)
type Sig4 = (Sig, Sig, Sig, Sig)
type Sig5 = (Sig, Sig, Sig, Sig, Sig)
type Sig6 = (Sig, Sig, Sig, Sig, Sig, Sig)
type Sig8 = (Sig, Sig, Sig, Sig, Sig, Sig, Sig, Sig)
type ResonFilter = Sig -> Sig -> Sig -> Sig
type FlatFilter = Sig -> Sig -> Sig
type Bam a = a -> SE ()
type Tick = Evt Unit
type Rnds a = [(D, a)]
type Sco a = Track D a
type MidiFun a = (Msg -> SE a) -> SE a
type Channel = Int
type ValStep = Double
type Range a = (a, a)
type Widget a b = SE (Gui, Output a, Input b, Inner)
type Input a = a
type Output a = a -> SE ()
type Inner = SE ()
type Sink a = SE (Gui, Output a)
type Source a = SE (Gui, Input a)
type Display = SE Gui
type SinkSource a = SE (Gui, Output a, Input a)
type PartialStrength = Double
type PartialNumber = Double
type PartialPhase = Double
type PartialDC = Double
type Lfo = Sig
type Fidelity = D
type TempoSig = Sig
type PitchSig = Sig
type MidiTrigFun a = a -> D -> SE a
type MaxDelayTime = D
type DelayTime = Sig
type Feedback = Sig
type Balance = Sig
type DepthSig = Sig
type RateSig = Sig
type WidthSig = Sig
type ToneSig = Sig
type GrainRate = Sig
type GrainSize = Sig
type Pointer = Sig
type ConstPitchSig = D
type FxFun = Sig2 -> SE Sig2
type HvsSnapshot = [Double]
type HvsMatrix1 = [HvsSnapshot]
type HvsMatrix2 = [HvsMatrix1]
type HvsMatrix3 = [HvsMatrix2]
type E = Fix RatedExp
type RatedVar = Var Rate
type Exp a = MainExp (PrimOr a)
type Name = String
type BoolExp a = PreInline CondOp a
type CondInfo a = Inline CondOp a
type NumExp a = PreInline NumOp a
type Note = [Prim]
type MultiOut a = Int -> a
type Spec1 = [(Rate, [Rate])]
type Specs = ([Rate], [Rate])
type MultiOut a = Int -> a
type InstrBody = E
type CsdEvent = (Double, Double, Note)
type Sig2 = (Sig, Sig)
type Sig3 = (Sig, Sig, Sig)
type Sig4 = (Sig, Sig, Sig, Sig)
type Sig5 = (Sig, Sig, Sig, Sig, Sig)
type Sig6 = (Sig, Sig, Sig, Sig, Sig, Sig)
type Sig8 = (Sig, Sig, Sig, Sig, Sig, Sig, Sig, Sig)
type E = Fix RatedExp
type Bam a = a -> SE ()
type Sco a = Track D a
type CsdEventList a = Track D a
type CsdEvent = (Double, Double, Note)
type Channel = Int
type OscHost = String
type OscPort = Int
type OscAddress = String
type OscType = String
type Color = Colour Double
type ValStep = Double
type Input a = a
type Output a = a -> SE ()
type Inner = SE ()
type Widget a b = SE (Gui, Output a, Input b, Inner)
type Source a = SE (Gui, Input a)
type Sink a = SE (Gui, Output a)
type Display = SE Gui
type SinkSource a = SE (Gui, Output a, Input a)
type Sam = Sample Sig2
type Bpm = D
type Sam = Sample Sig2
type Bpm = D
type Chord = [D]
type Constraint r = AmbT r IO ()
type Sigma i = EventSet i
type LTS = Map LtsNode [Rule INT]
type Search a = Search a
type EventRepAPart i = Either (EventSet i, Process i) (EventSet i, RuleEvent i)
type SrcLine = Int
type SrcCol = Int
type SrcOffset = Int
type AstAnnotation x = IntMap x
type Bindings = Map String UniqueIdent
type FreeNames = IntMap UniqueIdent
type LIdent = Labeled Ident
type ModuleFromParser = Module FromParser
type LExp = Labeled Exp
type LProc = LExp
type LRange = Labeled Range
type LCommField = Labeled CommField
type LLinkList = Labeled LinkList
type LLink = Labeled Link
type LRename = Labeled Rename
type LBuiltIn = Labeled BuiltIn
type LCompGenList = Labeled [LCompGen]
type LCompGen = Labeled CompGen
type LPattern = Labeled Pattern
type LDecl = Labeled Decl
type FunArgs = [[LPattern]]
type LTypeDef = Labeled TypeDef
type LConstructor = Labeled Constructor
type LAssertDecl = Labeled AssertDecl
type LFDRModels = Labeled FDRModels
type LFdrExt = Labeled FdrExt
type LTauRefineOp = Labeled TauRefineOp
type LRefineOp = Labeled RefineOp
type Pragma = String
type LocComment = (Comment, SrcLoc)
type Chunk = [Token]
type Chunks = DList Chunk
type ModuleFromRenaming = Module FromRenaming
type PT a = GenParser Token PState a
type ModuleFromParser = Module FromParser
type ModuleFromRenaming = Module FromRenaming
type Bindings = Map String UniqueIdent
type Event = [Field]
type Field = Value
type FieldSet = SSet Field
type Process = Process INT
type Digest = MD5Digest
type Sigma = ClosureSet
type Bindings = IntMap Value
type CSS x = CSSM x ()
type CSV = [Record]
type Record = [Field]
type Field = String
type Row a = [a]
type MapRow a = Map a a
type Record = Vector ByteString
type NamedRecord = Map ByteString ByteString
type MapRow a = Map a a
type Row a = [a]
type Row = [Field]
type Field = ByteString
type MapRow = Map ByteString ByteString
type CSVAction r a = a -> ParsedRow r -> Iteratee ByteString IO a
type (:\) r l = LacksP l r ~ LabelUnique l
type Disjoint l r = DisjointR l r ~ IsDisjoint
type Stl = RSTL Triangle
type Cube = Quaternion Float
type Device = Int
type Fun = FunPtr ()
type HookTyp = Ptr CDDManager -> CString -> Ptr () -> IO (CInt)
type HookFP = FunPtr HookTyp
type CurlH = Ptr Curl_
type URLString = String
type Port = Long
type Long = Word32
type LLong = Word64
type OptionMap = IntMap (IO ())
type Header = String
type WriteFunction = Ptr CChar -> CInt -> CInt -> Ptr () -> IO CInt
type ReadFunction = Ptr CChar -> CInt -> CInt -> Ptr () -> IO (Maybe CInt)
type ReadFunctionPrim = Ptr CChar -> CInt -> CInt -> Ptr () -> IO CInt
type ProgressFunction = Ptr () -> Double -> Double -> Double -> Double -> IO CInt
type DebugFunction = Curl -> DebugInfo -> Ptr CChar -> CInt -> Ptr () -> IO ()
type DebugFunctionPrim = CurlH -> CInt -> Ptr CChar -> CInt -> Ptr () -> IO CInt
type SSLCtxtFunction = CurlH -> Ptr () -> Ptr () -> IO CInt
type CurlResponse = CurlResponse_ [(String, String)] String
type CURL_write_callback = ByteString -> IO CURL_write_response
type CURL_read_callback = Int -> IO CURL_read_response
type CURL_header_callback = ByteString -> IO CURL_header_response
type CURL_write_callback = ByteString -> IO CURL_write_response
type CURL_read_callback = Int -> IO CURL_read_response
type CURL_header_callback = ByteString -> IO CURL_header_response
type QName = (String, String)
type TVarIndex = Int
type VarIndex = Int
type Update a b = (b -> b) -> a -> a
type QName = (String, String)
type CLabel = String
type CTVarIName = (Int, String)
type CVarIName = (Int, String)
type CField a = (CLabel, a)
type MsgMonadT m = ErrorT WarnMsg (WriterT [WarnMsg] m)
type MsgMonad = MsgMonadT Identity
type MsgMonadIO = MsgMonadT IO
type TVarIndex = Int
type Update a b = (b -> b) -> a -> a
type UpdateM m a b = (b -> m b) -> a -> m a
type DBMT v m = DBMT_ (StateT (DBMState v) m)
type DBMS v = DBMT v STM
type MemcachedT m = DBMT ByteString m
type RedisT m = DBMT Value m
type Score = Int32
type SortedSet = (Set (Score, ByteString), HashMap ByteString Score)
type Scalar = Double
type Point = Vec
type Colour = Colour' Scalar
type Style = [Assignment Image]
type BlendFunc = Maybe Colour -> Maybe Colour -> Maybe Colour
type Length = Scalar
type Angle = Scalar
type Path = [PathCmd]
type Pt a = (a, a)
type D32 = Float
type D64 = Double
type D8 = Word8
type Moments = C'CvMoments
type HoughDesc = Int
type ImageWithLines = Image GrayScale D8 With [Line]
type ImageWithSegments = Image GrayScale D8 With [Segment]
type F32I = Ptr C'F32_image_iterator
type HarrisDesc = Float
type StructuringElement = ConvKernel
type Marker c d = (Int, Int) -> (Int, Int) -> ImageOperation c d
type VideoStream c d = Stream IO (Image c d)
type ImageSink = IOSink Image
type ImageSource = IOSource () Image
type ImageProcessor = IOProcessor Image Image
type Image = PImage
type LuceneQuery = ByteString
type LuceneQuery = ByteString
type Hostname = ByteString
type Port = Int
type Mechanism = ByteString
type InitialResponse = ByteString
type GUID = ByteString
type TypeByteSym0 = TypeByte
type TypeBooleanSym0 = TypeBoolean
type TypeInt16Sym0 = TypeInt16
type TypeUInt16Sym0 = TypeUInt16
type TypeInt32Sym0 = TypeInt32
type TypeUInt32Sym0 = TypeUInt32
type TypeInt64Sym0 = TypeInt64
type TypeUInt64Sym0 = TypeUInt64
type TypeDoubleSym0 = TypeDouble
type TypeUnixFDSym0 = TypeUnixFD
type TypeStringSym0 = TypeString
type TypeObjectPathSym0 = TypeObjectPath
type TypeSignatureSym0 = TypeSignature
type SDBusSimpleType (z_anp0 :: DBusSimpleType) = Sing z_anp0
type DBusSimpleTypeSym1 (t_anp1 :: DBusSimpleType) = DBusSimpleType t_anp1
type TypeArraySym1 (t_anp4 :: DBusType) = TypeArray t_anp4
type TypeStructSym1 (t_anp7 :: [] DBusType) = TypeStruct t_anp7
type TypeDictSym2 (t_anpa :: DBusSimpleType) (t_anpb :: DBusType) = TypeDict t_anpa t_anpb
type TypeVariantSym0 = TypeVariant
type TypeDictEntrySym2 (t_anph :: DBusSimpleType) (t_anpi :: DBusType) = TypeDictEntry t_anph t_anpi
type TypeUnitSym0 = TypeUnit
type SDBusType (z_anpo :: DBusType) = Sing z_anpo
type NullSym0 = Null
type ArgSym1 (t_anpR :: Parity) = Arg t_anpR
type SParity (z_anpU :: Parity) = Sing z_anpU
type Serial = Word32
type Slot = Either [SomeDBusValue] SomeDBusValue -> STM ()
type AnswerSlots = Map Serial Slot
type DBusPut a = RWS Endian Builder Int a
type DBusGet a = ReaderT Endian Get a
type MethodCallHandler = DBusConnection -> MessageHeader -> [SomeDBusValue] -> IO ()
type SignalHandler = DBusConnection -> MessageHeader -> [SomeDBusValue] -> IO ()
type Handler = DBusConnection -> MessageHeader -> [SomeDBusValue] -> IO ()
type MethodCallHandler = DBusConnection -> MessageHeader -> [SomeDBusValue] -> IO ()
type SignalHandler = DBusConnection -> MessageHeader -> [SomeDBusValue] -> IO ()
type Var = Text
type Selector = Text
type FuncName = Text
type St r = RWS () Text Int r
type Handler r = Producer ByteString IO () -> Consumer ByteString IO () -> IO r
type HostName = String
type Port = Int
type SRTree (z_abaw :: RTree a_abad) = Sing z_abaw
type (:@->$$$) (t_abap :: a_abad) (t_abaq :: [] (RTree a_abad)) = (:@->) t_abap t_abaq
type Arguments = Map Text Text
type PrimOptSpec d f a v = OptSpec d f a (v -> a)
type Signal = CInt
type TimeInterval = (Maybe CalendarTime, Maybe CalendarTime)
type Redirects = (Redirect, Redirect, Redirect)
type Location = (UUID, ByteString)
type DirContent = Map ByteString UUID
type Printers = Handle -> Printers'
type Printer = Printable -> St -> Document
type PArray = Array Int ByteString
type Flag = DarcsFlag
type PrimDarcsOption v = forall a. PrimOptSpec DarcsOptDescr Flag a v
type DarcsOptDescr = Compose OptDescr ((->) AbsolutePath)
type BracketedFL p wX wY = FL (Bracketed p) wX wY
type CommuteFn p1 p2 = forall wX wY. (p1 :> p2) wX wY -> Maybe ((p2 :> p1) wX wY)
type MergeFn p1 p2 = forall wX wY. (p1 :\/: p2) wX wY -> (p2 :/\: p1) wX wY
type TotalCommuteFn p1 p2 = forall wX wY. (p1 :> p2) wX wY -> (p2 :> p1) wX wY
type TreeMonad m = RWST AnchoredPath () (TreeState m) m
type TreeIO = TreeMonad IO
type Index = IndexM IO
type HashedIO p = StateT (HashDir RW p) IO
type Location = (UUID, ByteString)
type AnnotateResult = Vector (Maybe PatchInfo, ByteString)
type SealedPatchSet p wStart = Sealed ((PatchSet p) wStart)
type WDDNamed p = WithDroppedDeps (Named p)
type DarcsOption = OptSpec DarcsOptDescr Flag
type DarcsOption = OptSpec DarcsOptDescr Flag
type PrimDarcsOption v = forall a. PrimOptSpec DarcsOptDescr Flag a v
type DarcsOptDescr = Compose OptDescr ((->) AbsolutePath)
type PatchFilter p = [FilePath] -> [Sealed2 (PatchInfoAnd p)] -> IO [Sealed2 (PatchInfoAnd p)]
type SealedPatchSet p wStart = Sealed ((PatchSet p) wStart)
type InteractiveSelectionM p wX wY a = StateT (InteractiveSelectionContext p wX wY) (PatchSelectionM p IO) a
type Location = (UUID, ByteString)
type DirContent = Map ByteString UUID
type TimeInterval = (Maybe CalendarTime, Maybe CalendarTime)
type Signal = CInt
type Redirects = (Redirect, Redirect, Redirect)
type Printers = Handle -> Printers'
type Printer = Printable -> St -> Document
type CommuteFn p1 p2 = forall x y. (p1 :> p2) x y -> Maybe ((p2 :> p1) x y)
type BracketedFL p x y = FL (Bracketed p) x y
type Location = (UUID, ByteString)
type SealedPatchSet p start = Sealed ((PatchSet p) start)
type MatchFun p = Sealed2 (PatchInfoAnd p) -> Bool
type HashedIO p = StateT (HashDir RW p) IO
type SealedPatchSet p start = Sealed ((PatchSet p) start)
type ClientStatsList = [(ClientStatsEnum, Int)]
type ErrorInfo = (ByteOffset, String)
type PacketOrError = Either Word8 DPServerPacket
type MetadataList = [DemoMetadata]
type UtilError = ErrorT String IO
type EvalCmd = Either CommandErrorType InputType
type BinaryDPText = DPText ByteString
type DecodedDPText = DPText Text
type DecodeFun a b = DPText a -> DPText b
type BinStreamState = DPStreamState ByteString
type BinStreamState = DPStreamState ByteString
type BinaryDPText = DPText ByteString
type DecodedDPText = DPText Text
type Stream = [Word8]
type Accessor r a = T r a
type Obj k a = k a a
type ConstF f = Const (Dom f) (Cod f)
type Swap (c1 :: * -> * -> *) (c2 :: * -> * -> *) = (Proj2 c1 c2 :***: Proj1 c1 c2) :.: DiagProd (c1 :**: c2)
type Tuple2 c1 c2 a = Swap c2 c1 :.: Tuple1 c2 c1 a
type (:*-:) x k = Hom k :.: Tuple1 (Op k) k x
type (:-*:) k x = Hom k :.: Tuple2 (Op k) k x
type (:~>) f g = (c ~ Dom f, c ~ Dom g, d ~ Cod f, d ~ Cod g) => Nat c d f g
type Component f g z = Cod f (f :% z) (g :% z)
type Endo k = Nat k k
type EndoFunctorCompose k = FunctorCompose k k k
type Precompose f e = FunctorCompose (Dom f) (Cod f) e :.: Tuple2 (Nat (Cod f) e) (Nat (Dom f) (Cod f)) f
type Postcompose f c = FunctorCompose c (Dom f) (Cod f) :.: Tuple1 (Nat (Dom f) (Cod f)) (Nat c (Dom f)) f
type InitialUniversal x u a = Representable ((x :*-: Cod u) :.: u) a
type TerminalUniversal x u a = Representable ((Cod u :-*: x) :.: Opposite u) a
type DiagF f = Diag (Dom f) (Cod f)
type Cone f n = Nat (Dom f) (Cod f) (ConstF f n) f
type Cocone f n = Nat (Dom f) (Cod f) f (ConstF f n)
type Limit f = LimitFam (Dom f) (Cod f) f
type Colimit f = ColimitFam (Dom f) (Cod f) f
type Monad f = MonoidObject (EndoFunctorCompose (Dom f)) f
type Comonad f = ComonoidObject (EndoFunctorCompose (Dom f)) f
type State k s a = Exponential k s (BinaryProduct k a s)
type Context k s a = BinaryProduct k (Exponential k s a) s
type YonedaEmbedding k = Postcompose (Hom k) (Op k) :.: (Postcompose (Swap k (Op k)) (Op k) :.: Tuple k (Op k))
type Presheaves k = Nat (Op k) (->)
type PShExponential k y z = (Presheaves k :-*: z) :.: Opposite ((ProductFunctor (Presheaves k) :.: Tuple2 (Presheaves k) (Presheaves k) y) :.: YonedaEmbedding k)
type Omega = Fix (:>>: Unit)
type Alg f = Dialg f (Id (Dom f))
type Algebra f a = Dialgebra f (Id (Dom f)) a
type Coalg f = Dialg (Id (Dom f)) f
type Coalgebra f a = Dialgebra (Id (Dom f)) f a
type InitialFAlgebra f = InitialObject (Alg f)
type TerminalFAlgebra f = TerminalObject (Coalg f)
type Cata f a = Algebra f a -> Alg f (InitialFAlgebra f) a
type Ana f a = Coalgebra f a -> Coalg f a (TerminalFAlgebra f)
type Nat = Fix (:++: Unit)
type ObjectsFUnder f a = ConstF f a :/\: f
type ObjectsFOver f a = f :/\: ConstF f a
type ObjectsUnder c a = Id c ObjectsFUnder a
type ObjectsOver c a = Id c ObjectsFOver a
type FMatrix = Matrix FField
type MaxBoundInt8 = (D1 :. D2) :. D7
type MaxBoundInt16 = (((D3 :. D2) :. D7) :. D6) :. D7
type MaxBoundInt32 = ((((((((D2 :. D1) :. D4) :. D7) :. D4) :. D8) :. D3) :. D6) :. D4) :. D7
type MaxBoundInt64 = (((((((((((((((((D9 :. D2) :. D2) :. D3) :. D3) :. D7) :. D2) :. D0) :. D3) :. D6) :. D8) :. D5) :. D4) :. D7) :. D7) :. D5) :. D8) :. D0) :. D7
type MaxBoundWord8 = (D2 :. D5) :. D5
type MaxBoundWord16 = (((D6 :. D5) :. D5) :. D3) :. D5
type MaxBoundWord32 = ((((((((D4 :. D2) :. D9) :. D4) :. D9) :. D6) :. D7) :. D2) :. D9) :. D5
type MaxBoundWord64 = ((((((((((((((((((D1 :. D8) :. D4) :. D4) :. D6) :. D7) :. D4) :. D4) :. D0) :. D7) :. D3) :. D7) :. D0) :. D9) :. D5) :. D5) :. D1) :. D6) :. D1) :. D5
type VarName = Int
type Dag f = IntMap (f VarName)
type Host = String
type Hash = Word32
type HashHost = (Hash, Host)
type ConsistentHash = Vector HashHost
type EndPoint r = Extended r
type MSLL s a = Clay s (Compose ((,) a) Maybe)
type SLL a = Fix (Compose ((,) a) Maybe)
type MNode s n e = Clay s (Compose (Compose ((,) n) []) ((,) e))
type Node n e = Fix (Compose (Compose ((,) n) []) ((,) e))
type Memo a = forall r. (a -> r) -> (a -> r)
type RangeMemo a = (a, a) -> Memo a
type NeTree a b = Tree (Either a b)
type NeForest a b = Forest (Either a b)
type Label a = [Atom a]
type StringObject = Object String String
type TextObject = Object Text Text
type ScalarObject = Object String Scalar
type JsonObject = Object ByteString JsonScalar
type YamlObject = Object YamlScalar YamlScalar
type TimeLimit = Double
type SizeLimit = Int
type Unique = Int
type N0 = Z
type N1 = S N0
type N2 = S N1
type N3 = S N2
type N4 = S N3
type N5 = S N4
type N6 = S N5
type N7 = S N6
type N8 = S N7
type N9 = S N8
type N10 = S N9
type Key = GenericKey KeyDimension
type IKey = GenericKey IKeyDimension
type Key = GenericKey KeyDimension
type N0 = Z
type N1 = S N0
type N2 = S N1
type N3 = S N2
type N4 = S N3
type N5 = S N4
type N6 = S N5
type N7 = S N6
type N8 = S N7
type N9 = S N8
type N10 = S N9
type Id = Int
type MigrationId = Text
type ID = String
type Name = String
type StmtList = [Stmt]
type ID = String
type AttrList = [Attr]
type StmtList = [Stmt]
type Indent = Int
type IndentNext = Bool
type Renderer t = WriterT [String] (State RendererState) t
type ID = String
type Name = String
type Operation = String
type Description = String
type Step = Int
type DFD v = State Step v
type StrictForest a = StrictList (StrictTree a)
type CellData = StrictList CellAttr
type ColorName = String
type DateCacheGetter = IO ByteString
type DateCacheCloser = IO ()
type Format = [FormatElement]
type FormatParser a = Parsec String Bool a
type DateTime = UTCTime
type DateTime = UTCTime
type ID = Int
type Weight = Int
type CP_Infos = [CP_Info]
type Interfaces = [Interface]
type Field_Infos = [Field_Info]
type Method_Infos = [Method_Info]
type Attribute_Infos = [Attribute_Info]
type Tupla5Int = [(Int, Int, Int, Int, Int)]
type Tupla2Int = [(Int, Int)]
type Tupla4Int = [(Int, Int, Int, Int)]
type ListaInt = [Int]
type ConstantPool_Count = Int
type Interfaces_Count = Int
type Fields_Count = Int
type Methods_Count = Int
type Attributes_Count = Int
type Index_Constant_Pool = Int
type Tupla5Int = [(Int, Int, Int, Int, Int)]
type Tupla2Int = [(Int, Int)]
type Tupla4Int = [(Int, Int, Int, Int)]
type ListaInt = [Int]
type ConstantPool_Count = Int
type Interfaces_Count = Int
type Fields_Count = Int
type Methods_Count = Int
type Attributes_Count = Int
type Index_Constant_Pool = Int
type MigrationMap = Map String Migration
type Args = [String]
type ServiceName = String
type PathName = FilePath
type InterfaceName = String
type Message = ForeignPtr MessageTag
type Connection = ForeignPtr ConnectionTag
type Priv = Component
type Priv = Component
type Priv = Label
type Priv = Label
type Parser k a = Eq k => ParsecT [Token k] (ParserState k) Identity a
type Kind n = Type n
type Sort n = Type n
type Region n = Type n
type Effect n = Type n
type Closure n = Type n
type SuperEnv n = Env n
type KindEnv n = Env n
type TypeEnv n = Env n
type ModuleMap a n = Map ModuleName (Module a n)
type Parser n a = Parser (Tok n) a
type LogFailures a = Writer [Fail] a
type KindEnvF = Env Name
type TypeEnvF = Env Name
type TypeF = Type Name
type ModuleF = Module () Name
type ExpF = Exp () Name
type CastF = Cast () Name
type LetsF = Lets () Name
type AltF = Alt () Name
type PatF = Pat Name
type WitnessF = Witness () Name
type BoundF = Bound Name
type BindF = Bind Name
type ConstraintMap = Map Name Constraint
type EquivClass = [Set Name]
type Graph = Map Name [Edge]
type Edge = (Name, Bool)
type Dom a = [a]
type Rel a = a -> a -> Bool
type SubstInfo a n = (Map n (Exp a n), Map n (Type n))
type NamedRewriteRule a n = (String, RewriteRule a n)
type Arities n = (Map n Int, [Int])
type InlinerTemplates a n = n -> Maybe (Exp a n)
type NamedRewriteRules a n = [(String, RewriteRule a n)]
type Parser n a = Parser (Tok n) a
type URL = String
type Domain = String
type Port = Int
type Path = String
type Error = String
type Params = (Domain, Port, Path)
type Lookup a = Seq (LookupItem a)
type Callback = EJsonValue -> DeadpanApp ()
type Error = String
type Params = (Domain, Port, Path)
type SliceName = ReleaseName
type Control = Control' String
type Paragraph = Paragraph' String
type Field = Field' String
type ControlParser a = CharParser () a
type Message = String
type Site = String
type User = String
type Password = String
type Media = String
type Drive = String
type Header = (String, String)
type ConfigItem = (String, String)
type Relations = AndRelation
type AndRelation = [OrRelation]
type OrRelation = [Relation]
type AndRelation = [OrRelation]
type OrRelation = [Relation]
type Relations = AndRelation
type RelParser a = CharParser () a
type AndRelation = [OrRelation]
type OrRelation = [Relation]
type Relations = AndRelation
type RelParser a = CharParser () a
type AndRelation = [OrRelation]
type OrRelation = [Relation]
type Relations = AndRelation
type RelParser a = CharParser () a
type Relations = AndRelation
type AndRelation = [OrRelation]
type OrRelation = [Relation]
type RelParser a = CharParser () a
type Control = Control' ByteString
type Paragraph = Paragraph' ByteString
type Field = Field' ByteString
type Control = Control' Text
type Paragraph = Paragraph' Text
type Field = Field' Text
type Control = Control' String
type Paragraph = Paragraph' String
type Field = Field' String
type ControlParser a = CharParser () a
type Fetcher = URI -> FilePath -> Maybe UTCTime -> IO Bool
type FileTuple = (CheckSums, Size, FilePath)
type Size = Integer
type RelaxInfo = SrcPkgName -> BinPkgName -> Bool
type PackageNameMap a = Map BinPkgName [a]
type State a = (Status, [a])
type ConflictSet = ([(BinPkgName, DebianVersion)], [Relation])
type Labeler a = CSP a -> Tree (State a) -> Tree (State a, ConflictSet)
type Trace = ReaderT Bool IO
type BaseDir = FilePath
type Build = ReaderT BaseDir (ReaderT Config Trace)
type Decimal = DecimalRaw Integer
type PreLabeled a b = (b, Datum a)
type Cify a = a -> (Context -> a)
type Vol sh = Array U sh Double
type DVol sh = Array D sh Double
type Label = Int
type Forward m sh sh' = Vol sh -> WriterT [Vector Double] m (DVol sh')
type Pattern = Rose PatNode
type Shape = Rose ()
type MightBe a' a = In '[Type Def, Type a] a'
type (=?) a' a = MightBe a' a
type Bytes = ByteString
type Chunk = ByteString
type (:*:) a b = (a, b)
type (:+:) a b = Either a b
type Constraint a = a -> a
type Iso s t a b = forall p f. (Functor f, Bifunctor p) => p s (f t) -> p a (f b)
type Iso' a b = Simple Iso a b
type (:<->:) a b = Iso' a b
type LensLike f s t a b = (s -> f t) -> (a -> f b)
type Fold s t a b = forall f. (Semigroup (f b), Applicative f) => LensLike f s t a b
type Fold' a b = Simple Fold a b
type Getter s t a b = LensLike (Const s) s t a b
type Getter' a b = Simple Getter a b
type Lens s t a b = forall f. Functor f => LensLike f s t a b
type Lens' a b = Simple Lens a b
type Traversal s t a b = forall f. Applicative f => LensLike f s t a b
type Traversal' a b = Simple Traversal a b
type Action s t a b = forall m. Monad m => LensLike m s t a b
type Action' a b = Action b b a a
type RWS r w s a = RWST r w s Id a
type State s a = StateT s Id a
type Next a = a
type Prev a = a
type Reader r a = ReaderT r Id a
type Writer w a = WriterT w Id a
type Counter w acc a = CounterT w acc Id a
type Cont a = ContT Id a
type Infinite a = Cofree Id a
type Colist a = Cofree Maybe a
type Bifree f a = Cofree (Free f) a
type Slice a = Vector a
type Prob t a = ProbT t Id a
type Thunk n a = ThunkT n Id a
type NodeT n m a = n (Lambda n m) (ThunkT n m a)
type Parser c a = ParserT c Id a
type ThunkN k m = ThunkT (Node k) m ()
type Env k m = Map k (ThunkT (Node k) m ())
type Seconds = Double
type Signed = Int64
type DateString = String
type TimeString = String
type URLString = String
type Tag = String
type URLString = String
type Content = [Record]
type Record = [Field]
type Field = ByteString
type Result a = Either ParseError a
type X = Map Int (Map String Double)
type Token = (String, String)
type X k = Map k Count
type Y = Int
type Count = Double
type TypedFilePath = (FileType, FilePath)
type FilenameConverter = TypedFilePath -> FilePath
type GReadS t = String -> [(forall b. (forall a. t a -> b) -> b, String)]
type Derivation = Derivation' ()
type Premise = Link ::> Derivation' ()
type Name = String
type Sort = String
type Colour = String
type Env = [Binding]
type DataDef = Dec
type CtorDef = Con
type Precedence = Int
type DataDecl = Decl
type CtorDecl = Either QualConDecl GadtDecl
type FieldDecl = [(String, Type)]
type FullDataDecl = (ModuleName, DataDecl)
type Input = DataDecl
type Ctor = CtorDecl
type Out = [Decl]
type Substs = Map Name [Type]
type SubstMap = Map Name [Name]
type UnifyMap = Map Name [Type]
type SubstM a = S SubstEnv a
type Tags = Set Tag
type Symbol = Char
type Cond a b = (a -> Bool, RTSP a b)
type Game = (Integer, String, Bool, String, String)
type Message = (Integer, String, String, String)
type Point = (Integer, Integer)
type Point = (Double, Double)
type Point = (Double, Double)
type Point = (Double, Double)
type Vec = Point
type VAlignment = Alignment
type HAlignment = Alignment
type VAlignment = Alignment
type HAlignment = Alignment
type Hash = Int
type B = Cairo
type RenderM a = StateStackT CairoState Render a
type B = Cairo
type B = Cairo
type B = Canvas
type B = Canvas
type Curl = Double
type Dir = R2
type BasicJoin = Either TensionJoin ControlJoin
type MFP = MFPath (Maybe PathDir) BasicJoin
type MFS = MetafontSegment (Maybe PathDir) BasicJoin
type RadiusFunction b m = QDiagram b R2 m -> Double
type Q2 = (Q236, Q236)
type TilingM w a = WriterT w (State TilingState) a
type Turtle = TurtleT Identity
type TurtleT = StateT TurtleState
type Vn a = V a (N a)
type Measure n = Measured n n
type UpAnnots b v n m = Deletable (Envelope v n) ::: (Deletable (Trace v n) ::: (Deletable (SubMap b v n m) ::: (Query v n m ::: ())))
type DownAnnots v n = (Transformation v n :+: Style v n) ::: (Name ::: ())
type Diagram b = QDiagram b (V b) (N b) Any
type DTree b v n a = Tree (DNode b v n a)
type RTree b v n a = Tree (RNode b v n a)
type D v n = QDiagram NullBackend v n Any
type RTree b v n a = Tree (RNode b v n a)
type Vn a = V a (N a)
type Diagram b = QDiagram b (V b) (N b) Any
type Measure n = Measured n n
type D v n = QDiagram NullBackend v n Any
type B = HsQML
type P2 = Point R2
type T2 = Transformation R2
type P3 = Point R3
type T3 = Transformation R3
type SegMeasure v = SegCount ::: (ArcLength v ::: (OffsetEnvelope v ::: ()))
type QAnimation b v m = Active (QDiagram b v m)
type Animation b v = QAnimation b v Any
type ArrowHT = Double -> Double -> (Path R2, Path R2)
type P2 = Point R2
type T2 = Transformation R2
type LabelSize = Int
type B = Postscript
type B = Postscript
type B = Rasterific
type B = Rasterific
type Aut a = Iso' a a
type B = SVG
type B = SVG
type Headword = String
type Translation = String
type LineNo = Int
type FileDeltas = [FileDelta]
type DiffArray = IOToDiffArray IOArray
type DiffUArray = IOToDiffArray IOUArray
type Path = [Text]
type Env m = Path -> m [FormInput]
type Form v m a = FormTree m v m a
type Ref = Text
type Formlet v m a = Maybe a -> Form v m a
type Form v m a = FormTree m v m a
type SnapPartPolicy = PartInfo -> PartUploadPolicy
type Unit = Dimensional DUnit
type Quantity = Dimensional DQuantity
type DOne = Dim Zero Zero Zero Zero Zero Zero Zero
type DLength = Dim Pos1 Zero Zero Zero Zero Zero Zero
type DMass = Dim Zero Pos1 Zero Zero Zero Zero Zero
type DTime = Dim Zero Zero Pos1 Zero Zero Zero Zero
type DElectricCurrent = Dim Zero Zero Zero Pos1 Zero Zero Zero
type DThermodynamicTemperature = Dim Zero Zero Zero Zero Pos1 Zero Zero
type DAmountOfSubstance = Dim Zero Zero Zero Zero Zero Pos1 Zero
type DLuminousIntensity = Dim Zero Zero Zero Zero Zero Zero Pos1
type Dimensionless = Quantity DOne
type Length = Quantity DLength
type Mass = Quantity DMass
type Time = Quantity DTime
type ElectricCurrent = Quantity DElectricCurrent
type ThermodynamicTemperature = Quantity DThermodynamicTemperature
type AmountOfSubstance = Quantity DAmountOfSubstance
type LuminousIntensity = Quantity DLuminousIntensity
type DArea = Dim Pos2 Zero Zero Zero Zero Zero Zero
type Area = Quantity DArea
type DVolume = Dim Pos3 Zero Zero Zero Zero Zero Zero
type Volume = Quantity DVolume
type DVelocity = Dim Pos1 Zero Neg1 Zero Zero Zero Zero
type Velocity = Quantity DVelocity
type DAcceleration = Dim Pos1 Zero Neg2 Zero Zero Zero Zero
type Acceleration = Quantity DAcceleration
type DWaveNumber = Dim Neg1 Zero Zero Zero Zero Zero Zero
type WaveNumber = Quantity DWaveNumber
type DMassDensity = Dim Neg3 Pos1 Zero Zero Zero Zero Zero
type MassDensity = Quantity DMassDensity
type Density = MassDensity
type DSpecificVolume = Dim Pos3 Neg1 Zero Zero Zero Zero Zero
type SpecificVolume = Quantity DSpecificVolume
type DCurrentDensity = Dim Neg2 Zero Zero Pos1 Zero Zero Zero
type CurrentDensity = Quantity DCurrentDensity
type DMagneticFieldStrength = Dim Neg1 Zero Zero Pos1 Zero Zero Zero
type MagneticFieldStrength = Quantity DMagneticFieldStrength
type DAmountOfSubstanceConcentration = Dim Neg3 Zero Zero Zero Zero Pos1 Zero
type AmountOfSubstanceConcentration = Quantity DAmountOfSubstanceConcentration
type Concentration = AmountOfSubstanceConcentration
type DLuminance = Dim Neg2 Zero Zero Zero Zero Zero Pos1
type Luminance = Quantity DLuminance
type DPlaneAngle = DOne
type PlaneAngle = Dimensionless
type DSolidAngle = DOne
type SolidAngle = Dimensionless
type DFrequency = Dim Zero Zero Neg1 Zero Zero Zero Zero
type Frequency = Quantity DFrequency
type DForce = Dim Pos1 Pos1 Neg2 Zero Zero Zero Zero
type Force = Quantity DForce
type DPressure = Dim Neg1 Pos1 Neg2 Zero Zero Zero Zero
type DStress = DPressure
type Pressure = Quantity DPressure
type Stress = Quantity DStress
type DEnergy = Dim Pos2 Pos1 Neg2 Zero Zero Zero Zero
type DWork = DEnergy
type DQuantityOfHeat = DEnergy
type Energy = Quantity DEnergy
type Work = Quantity DWork
type QuantityOfHeat = Quantity DQuantityOfHeat
type DPower = Dim Pos2 Pos1 Neg3 Zero Zero Zero Zero
type DRadiantFlux = DPower
type Power = Quantity DPower
type RadiantFlux = Quantity DRadiantFlux
type DElectricCharge = Dim Zero Zero Pos1 Pos1 Zero Zero Zero
type DQuantityOfElectricity = DElectricCharge
type ElectricCharge = Quantity DElectricCharge
type QuantityOfElectricity = Quantity DQuantityOfElectricity
type DElectricPotential = Dim Pos2 Pos1 Neg3 Neg1 Zero Zero Zero
type DPotentialDifference = DElectricPotential
type DElectromotiveForce = DElectricPotential
type ElectricPotential = Quantity DElectricPotential
type PotentialDifference = Quantity DPotentialDifference
type ElectromotiveForce = Quantity DElectromotiveForce
type DCapacitance = Dim Neg2 Neg1 Pos4 Pos2 Zero Zero Zero
type Capacitance = Quantity DCapacitance
type DElectricResistance = Dim Pos2 Pos1 Neg3 Neg2 Zero Zero Zero
type ElectricResistance = Quantity DElectricResistance
type DElectricConductance = Dim Neg2 Neg1 Pos3 Pos2 Zero Zero Zero
type ElectricConductance = Quantity DElectricConductance
type DMagneticFlux = Dim Pos2 Pos1 Neg2 Neg1 Zero Zero Zero
type MagneticFlux = Quantity DMagneticFlux
type DMagneticFluxDensity = Dim Zero Pos1 Neg2 Neg1 Zero Zero Zero
type MagneticFluxDensity = Quantity DMagneticFluxDensity
type DInductance = Dim Pos2 Pos1 Neg2 Neg2 Zero Zero Zero
type Inductance = Quantity DInductance
type DLuminousFlux = DLuminousIntensity
type LuminousFlux = Quantity DLuminousFlux
type DIlluminance = Dim Neg2 Zero Zero Zero Zero Zero Pos1
type Illuminance = Quantity DIlluminance
type DCelsiusTemperature = DThermodynamicTemperature
type CelsiusTemperature = Quantity DCelsiusTemperature
type DActivity = DFrequency
type Activity = Quantity DActivity
type DAbsorbedDose = Dim Pos2 Zero Neg2 Zero Zero Zero Zero
type DSpecificEnergy = DAbsorbedDose
type DKerma = DAbsorbedDose
type AbsorbedDose = Quantity DAbsorbedDose
type SpecificEnergy = Quantity DSpecificEnergy
type Kerma = Quantity DKerma
type DDoseEquivalent = DAbsorbedDose
type DAmbientDoseEquivalent = DDoseEquivalent
type DDirectionalDoseEquivalent = DDoseEquivalent
type DPersonalDoseEquivalent = DDoseEquivalent
type DEquivalentDose = DDoseEquivalent
type DoseEquivalent = Quantity DDoseEquivalent
type AmbientDoseEquivalent = DoseEquivalent
type DirectionalDoseEquivalent = DoseEquivalent
type PersonalDoseEquivalent = DoseEquivalent
type EquivalentDose = DoseEquivalent
type DAngularVelocity = DFrequency
type AngularVelocity = Quantity DAngularVelocity
type DAngularAcceleration = Dim Zero Zero Neg2 Zero Zero Zero Zero
type AngularAcceleration = Quantity DAngularAcceleration
type DDynamicViscosity = Dim Neg1 Pos1 Neg1 Zero Zero Zero Zero
type DynamicViscosity = Quantity DDynamicViscosity
type DMomentOfForce = DEnergy
type MomentOfForce = Quantity DMomentOfForce
type DSurfaceTension = Dim Zero Pos1 Neg2 Zero Zero Zero Zero
type SurfaceTension = Quantity DSurfaceTension
type DHeatFluxDensity = Dim Zero Pos1 Neg3 Zero Zero Zero Zero
type DIrradiance = DHeatFluxDensity
type HeatFluxDensity = Quantity DHeatFluxDensity
type Irradiance = Quantity DIrradiance
type DRadiantIntensity = DPower
type RadiantIntensity = Quantity DRadiantIntensity
type DRadiance = DIrradiance
type Radiance = Quantity DRadiance
type DHeatCapacity = Dim Pos2 Pos1 Neg2 Zero Neg1 Zero Zero
type DEntropy = DHeatCapacity
type HeatCapacity = Quantity DHeatCapacity
type Entropy = Quantity DEntropy
type DSpecificHeatCapacity = Dim Pos2 Zero Neg2 Zero Neg1 Zero Zero
type DSpecificEntropy = DSpecificHeatCapacity
type SpecificHeatCapacity = Quantity DSpecificHeatCapacity
type SpecificEntropy = Quantity DSpecificEntropy
type DThermalConductivity = Dim Pos1 Pos1 Neg3 Zero Neg1 Zero Zero
type ThermalConductivity = Quantity DThermalConductivity
type DEnergyDensity = DPressure
type EnergyDensity = Quantity DEnergyDensity
type DElectricFieldStrength = Dim Pos1 Pos1 Neg3 Neg1 Zero Zero Zero
type ElectricFieldStrength = Quantity DElectricFieldStrength
type DElectricChargeDensity = Dim Neg3 Zero Pos1 Pos1 Zero Zero Zero
type ElectricChargeDensity = Quantity DElectricChargeDensity
type DElectricFluxDensity = Dim Neg2 Zero Pos1 Pos1 Zero Zero Zero
type ElectricFluxDensity = Quantity DElectricFluxDensity
type DPermittivity = Dim Neg3 Neg1 Pos4 Pos2 Zero Zero Zero
type Permittivity = Quantity DPermittivity
type DPermeability = Dim Pos1 Pos1 Neg2 Neg2 Zero Zero Zero
type Permeability = Quantity DPermeability
type DMolarEnergy = Dim Pos2 Pos1 Neg2 Zero Zero Neg1 Zero
type MolarEnergy = Quantity DMolarEnergy
type DMolarEntropy = Dim Pos2 Pos1 Neg2 Zero Neg1 Neg1 Zero
type DMolarHeatCapacity = DMolarEntropy
type MolarEntropy = Quantity DMolarEntropy
type MolarHeatCapacity = Quantity DMolarHeatCapacity
type DExposure = Dim Zero Neg1 Pos1 Pos1 Zero Zero Zero
type Exposure = Quantity DExposure
type DAbsorbedDoseRate = Dim Pos2 Zero Neg3 Zero Zero Zero Zero
type AbsorbedDoseRate = Quantity DAbsorbedDoseRate
type DImpulse = Dim Pos1 Pos1 Neg1 Zero Zero Zero Zero
type Impulse = Quantity DImpulse
type DMassFlow = Dim Zero Pos1 Neg1 Zero Zero Zero Zero
type MassFlow = Quantity DMassFlow
type DGravitationalParameter = Dim Pos3 Zero Neg2 Zero Zero Zero Zero
type GravitationalParameter = Quantity DGravitationalParameter
type DKinematicViscosity = Dim Pos2 Zero Neg1 Zero Zero Zero Zero
type KinematicViscosity = Quantity DKinematicViscosity
type DFirstMassMoment = Dim Pos1 Pos1 Zero Zero Zero Zero Zero
type FirstMassMoment = Quantity DFirstMassMoment
type DMomentOfInertia = Dim Pos2 Pos1 Zero Zero Zero Zero Zero
type MomentOfInertia = Quantity DMomentOfInertia
type DAngularMomentum = Dim Pos2 Pos1 Neg1 Zero Zero Zero Zero
type AngularMomentum = Quantity DAngularMomentum
type Angle = PlaneAngle
type DAngle = DPlaneAngle
type Thrust = Force
type DThrust = DForce
type Torque = MomentOfForce
type DTorque = DMomentOfForce
type EnergyPerUnitMass = SpecificEnergy
type DEnergyPerUnitMass = DSpecificEnergy
type DLength = CGSDim Pos2 Zero Zero
type DMass = CGSDim Zero Pos2 Zero
type DTime = CGSDim Zero Zero Pos1
type DElectricCurrent = CGSDim Pos3 Pos1 Neg2
type DCharge = CGSDim Pos3 Pos1 Neg1
type Unit = Dimensional DUnit
type Quantity = Dimensional DQuantity
type DOne = Dim Zero Zero Zero Zero Zero Zero Zero
type DLength = Dim Pos1 Zero Zero Zero Zero Zero Zero
type DMass = Dim Zero Pos1 Zero Zero Zero Zero Zero
type DTime = Dim Zero Zero Pos1 Zero Zero Zero Zero
type DElectricCurrent = Dim Zero Zero Zero Pos1 Zero Zero Zero
type DThermodynamicTemperature = Dim Zero Zero Zero Zero Pos1 Zero Zero
type DAmountOfSubstance = Dim Zero Zero Zero Zero Zero Pos1 Zero
type DLuminousIntensity = Dim Zero Zero Zero Zero Zero Zero Pos1
type Dimensionless = Quantity DOne
type Length = Quantity DLength
type Mass = Quantity DMass
type Time = Quantity DTime
type ElectricCurrent = Quantity DElectricCurrent
type ThermodynamicTemperature = Quantity DThermodynamicTemperature
type AmountOfSubstance = Quantity DAmountOfSubstance
type LuminousIntensity = Quantity DLuminousIntensity
type DArea = Dim Pos2 Zero Zero Zero Zero Zero Zero
type Area = Quantity DArea
type DVolume = Dim Pos3 Zero Zero Zero Zero Zero Zero
type Volume = Quantity DVolume
type DVelocity = Dim Pos1 Zero Neg1 Zero Zero Zero Zero
type Velocity = Quantity DVelocity
type DAcceleration = Dim Pos1 Zero Neg2 Zero Zero Zero Zero
type Acceleration = Quantity DAcceleration
type DWaveNumber = Dim Neg1 Zero Zero Zero Zero Zero Zero
type WaveNumber = Quantity DWaveNumber
type DMassDensity = Dim Neg3 Pos1 Zero Zero Zero Zero Zero
type MassDensity = Quantity DMassDensity
type Density = MassDensity
type DSpecificVolume = Dim Pos3 Neg1 Zero Zero Zero Zero Zero
type SpecificVolume = Quantity DSpecificVolume
type DCurrentDensity = Dim Neg2 Zero Zero Pos1 Zero Zero Zero
type CurrentDensity = Quantity DCurrentDensity
type DMagneticFieldStrength = Dim Neg1 Zero Zero Pos1 Zero Zero Zero
type MagneticFieldStrength = Quantity DMagneticFieldStrength
type DAmountOfSubstanceConcentration = Dim Neg3 Zero Zero Zero Zero Pos1 Zero
type AmountOfSubstanceConcentration = Quantity DAmountOfSubstanceConcentration
type Concentration = AmountOfSubstanceConcentration
type DLuminance = Dim Neg2 Zero Zero Zero Zero Zero Pos1
type Luminance = Quantity DLuminance
type DPlaneAngle = DOne
type PlaneAngle = Dimensionless
type DSolidAngle = DOne
type SolidAngle = Dimensionless
type DFrequency = Dim Zero Zero Neg1 Zero Zero Zero Zero
type Frequency = Quantity DFrequency
type DForce = Dim Pos1 Pos1 Neg2 Zero Zero Zero Zero
type Force = Quantity DForce
type DPressure = Dim Neg1 Pos1 Neg2 Zero Zero Zero Zero
type DStress = DPressure
type Pressure = Quantity DPressure
type Stress = Quantity DStress
type DEnergy = Dim Pos2 Pos1 Neg2 Zero Zero Zero Zero
type DWork = DEnergy
type DQuantityOfHeat = DEnergy
type Energy = Quantity DEnergy
type Work = Quantity DWork
type QuantityOfHeat = Quantity DQuantityOfHeat
type DPower = Dim Pos2 Pos1 Neg3 Zero Zero Zero Zero
type DRadiantFlux = DPower
type Power = Quantity DPower
type RadiantFlux = Quantity DRadiantFlux
type DElectricCharge = Dim Zero Zero Pos1 Pos1 Zero Zero Zero
type DQuantityOfElectricity = DElectricCharge
type ElectricCharge = Quantity DElectricCharge
type QuantityOfElectricity = Quantity DQuantityOfElectricity
type DElectricPotential = Dim Pos2 Pos1 Neg3 Neg1 Zero Zero Zero
type DPotentialDifference = DElectricPotential
type DElectromotiveForce = DElectricPotential
type ElectricPotential = Quantity DElectricPotential
type PotentialDifference = Quantity DPotentialDifference
type ElectromotiveForce = Quantity DElectromotiveForce
type DCapacitance = Dim Neg2 Neg1 Pos4 Pos2 Zero Zero Zero
type Capacitance = Quantity DCapacitance
type DElectricResistance = Dim Pos2 Pos1 Neg3 Neg2 Zero Zero Zero
type ElectricResistance = Quantity DElectricResistance
type DElectricConductance = Dim Neg2 Neg1 Pos3 Pos2 Zero Zero Zero
type ElectricConductance = Quantity DElectricConductance
type DMagneticFlux = Dim Pos2 Pos1 Neg2 Neg1 Zero Zero Zero
type MagneticFlux = Quantity DMagneticFlux
type DMagneticFluxDensity = Dim Zero Pos1 Neg2 Neg1 Zero Zero Zero
type MagneticFluxDensity = Quantity DMagneticFluxDensity
type DInductance = Dim Pos2 Pos1 Neg2 Neg2 Zero Zero Zero
type Inductance = Quantity DInductance
type DLuminousFlux = DLuminousIntensity
type LuminousFlux = Quantity DLuminousFlux
type DIlluminance = Dim Neg2 Zero Zero Zero Zero Zero Pos1
type Illuminance = Quantity DIlluminance
type DCelsiusTemperature = DThermodynamicTemperature
type CelsiusTemperature = Quantity DCelsiusTemperature
type DActivity = DFrequency
type Activity = Quantity DActivity
type DAbsorbedDose = Dim Pos2 Zero Neg2 Zero Zero Zero Zero
type DSpecificEnergy = DAbsorbedDose
type DKerma = DAbsorbedDose
type AbsorbedDose = Quantity DAbsorbedDose
type SpecificEnergy = Quantity DSpecificEnergy
type Kerma = Quantity DKerma
type DDoseEquivalent = DAbsorbedDose
type DAmbientDoseEquivalent = DDoseEquivalent
type DDirectionalDoseEquivalent = DDoseEquivalent
type DPersonalDoseEquivalent = DDoseEquivalent
type DEquivalentDose = DDoseEquivalent
type DoseEquivalent = Quantity DDoseEquivalent
type AmbientDoseEquivalent = DoseEquivalent
type DirectionalDoseEquivalent = DoseEquivalent
type PersonalDoseEquivalent = DoseEquivalent
type EquivalentDose = DoseEquivalent
type DAngularVelocity = DFrequency
type AngularVelocity = Quantity DAngularVelocity
type DAngularAcceleration = Dim Zero Zero Neg2 Zero Zero Zero Zero
type AngularAcceleration = Quantity DAngularAcceleration
type DDynamicViscosity = Dim Neg1 Pos1 Neg1 Zero Zero Zero Zero
type DynamicViscosity = Quantity DDynamicViscosity
type DMomentOfForce = DEnergy
type MomentOfForce = Quantity DMomentOfForce
type DSurfaceTension = Dim Zero Pos1 Neg2 Zero Zero Zero Zero
type SurfaceTension = Quantity DSurfaceTension
type DHeatFluxDensity = Dim Zero Pos1 Neg3 Zero Zero Zero Zero
type DIrradiance = DHeatFluxDensity
type HeatFluxDensity = Quantity DHeatFluxDensity
type Irradiance = Quantity DIrradiance
type DRadiantIntensity = DPower
type RadiantIntensity = Quantity DRadiantIntensity
type DRadiance = DIrradiance
type Radiance = Quantity DRadiance
type DHeatCapacity = Dim Pos2 Pos1 Neg2 Zero Neg1 Zero Zero
type DEntropy = DHeatCapacity
type HeatCapacity = Quantity DHeatCapacity
type Entropy = Quantity DEntropy
type DSpecificHeatCapacity = Dim Pos2 Zero Neg2 Zero Neg1 Zero Zero
type DSpecificEntropy = DSpecificHeatCapacity
type SpecificHeatCapacity = Quantity DSpecificHeatCapacity
type SpecificEntropy = Quantity DSpecificEntropy
type DThermalConductivity = Dim Pos1 Pos1 Neg3 Zero Neg1 Zero Zero
type ThermalConductivity = Quantity DThermalConductivity
type DEnergyDensity = DPressure
type EnergyDensity = Quantity DEnergyDensity
type DElectricFieldStrength = Dim Pos1 Pos1 Neg3 Neg1 Zero Zero Zero
type ElectricFieldStrength = Quantity DElectricFieldStrength
type DElectricChargeDensity = Dim Neg3 Zero Pos1 Pos1 Zero Zero Zero
type ElectricChargeDensity = Quantity DElectricChargeDensity
type DElectricFluxDensity = Dim Neg2 Zero Pos1 Pos1 Zero Zero Zero
type ElectricFluxDensity = Quantity DElectricFluxDensity
type DPermittivity = Dim Neg3 Neg1 Pos4 Pos2 Zero Zero Zero
type Permittivity = Quantity DPermittivity
type DPermeability = Dim Pos1 Pos1 Neg2 Neg2 Zero Zero Zero
type Permeability = Quantity DPermeability
type DMolarEnergy = Dim Pos2 Pos1 Neg2 Zero Zero Neg1 Zero
type MolarEnergy = Quantity DMolarEnergy
type DMolarEntropy = Dim Pos2 Pos1 Neg2 Zero Neg1 Neg1 Zero
type DMolarHeatCapacity = DMolarEntropy
type MolarEntropy = Quantity DMolarEntropy
type MolarHeatCapacity = Quantity DMolarHeatCapacity
type DExposure = Dim Zero Neg1 Pos1 Pos1 Zero Zero Zero
type Exposure = Quantity DExposure
type DAbsorbedDoseRate = Dim Pos2 Zero Neg3 Zero Zero Zero Zero
type AbsorbedDoseRate = Quantity DAbsorbedDoseRate
type DImpulse = Dim Pos1 Pos1 Neg1 Zero Zero Zero Zero
type Impulse = Quantity DImpulse
type DMassFlow = Dim Zero Pos1 Neg1 Zero Zero Zero Zero
type MassFlow = Quantity DMassFlow
type DGravitationalParameter = Dim Pos3 Zero Neg2 Zero Zero Zero Zero
type GravitationalParameter = Quantity DGravitationalParameter
type DKinematicViscosity = Dim Pos2 Zero Neg1 Zero Zero Zero Zero
type KinematicViscosity = Quantity DKinematicViscosity
type DFirstMassMoment = Dim Pos1 Pos1 Zero Zero Zero Zero Zero
type FirstMassMoment = Quantity DFirstMassMoment
type DMomentOfInertia = Dim Pos2 Pos1 Zero Zero Zero Zero Zero
type MomentOfInertia = Quantity DMomentOfInertia
type DAngularMomentum = Dim Pos2 Pos1 Neg1 Zero Zero Zero Zero
type AngularMomentum = Quantity DAngularMomentum
type Angle = PlaneAngle
type DAngle = DPlaneAngle
type Thrust = Force
type DThrust = DForce
type Torque = MomentOfForce
type DTorque = DMomentOfForce
type EnergyPerUnitMass = SpecificEnergy
type DEnergyPerUnitMass = DSpecificEnergy
type ResourceDirectory = [(String, ByteString)]
type CallbackM = CallbackT (SessionT WrapCallback IO)
type Z = Integer
type Z = Integer
type Serialization a = forall context. ContextualSerialization context a
type Deserialization a = forall context. ContextualDeserialization context a
type FastCGI = ReaderT FastCGIState IO
type HTTP = ReaderT HTTPState IO
type ColumnCount = ColumnIndex
type CColumnCount = CColumnIndex
type ArgIndex = ArgCount
type CTraceCallback a = Ptr a -> CString -> IO ()
type CExecCallback a = Ptr a -> CColumnCount -> Ptr CString -> Ptr CString -> IO CInt
type CFunc = Ptr CContext -> CArgCount -> Ptr (Ptr CValue) -> IO ()
type CFuncFinal = Ptr CContext -> IO ()
type CFuncDestroy a = Ptr a -> IO ()
type CCompare a = Ptr a -> CNumBytes -> CString -> CNumBytes -> CString -> IO CInt
type CWalHook = Ptr () -> Ptr CDatabase -> CString -> CInt -> IO CError
type ExecCallback = ColumnCount -> [Utf8] -> [Maybe Utf8] -> IO ()
type ColumnCount = ColumnIndex
type ArgIndex = ArgCount
type ExecCallback = ColumnCount -> [Text] -> [Maybe Text] -> IO ()
type ColumnCount = ColumnIndex
type ArgIndex = ArgCount
type T = Int8
type ResId = Int
type ResReq = (ReqType, ResId)
type PID = Int
type Title = String
type FileName = String
type FileName = String
type Library = Seq LibraryItem
type ItemId = Int
type LocalSendPortId = Int32
type Fork = Process () -> IO ProcessId
type MxSink s = Message -> MxAgent s (Maybe MxAction)
type CP a b = Closure (a -> Process b)
type MxSink s = Message -> MxAgent s (Maybe MxAction)
type AgentConfig = (Tracer, Weak (CQueue Message), ((TChan Message, TChan Message) -> Process ()) -> IO ProcessId)
type RemoteRegister = RemoteTable -> RemoteTable
type CP a b = Closure (a -> Process b)
type RemoteRegister = RemoteTable -> RemoteTable
type AsyncRef = ProcessId
type InitHandler a s = a -> Process (InitResult s)
type ShutdownHandler s = s -> ExitReason -> Process ()
type TimeoutHandler s = s -> Delay -> Process (ProcessAction s)
type CallHandler s a b = s -> a -> Process (ProcessReply b s)
type CastHandler s a = s -> a -> Process (ProcessAction s)
type BroadcastExchange = ExchangeType BroadcastEx
type HeaderName = String
type BindingSelector k = Message -> Process k
type Limit = Integer
type Tag = Int
type TagPool = MVar Tag
type Channel a = (SendPort a, ReceivePort a)
type Timeout = Maybe Int
type TimerRef = ProcessId
type Channel a = (SendPort a, ReceivePort a)
type Tag = Int
type TagPool = MVar Tag
type LogFormat = String -> Process String
type LogChan = ()
type ChildKey = String
type Child = (ChildRef, ChildSpec)
type StaticLabel = String
type SupervisorPid = ProcessId
type ChildPid = ProcessId
type StarterPid = ProcessId
type SizeLimit = Int
type Probability = Rational
type Coin = Distribution CoinSide
type Dice = Distribution Int
type Fragment = String
type Sample = String
type Position = Int
type Diversity = Double
type Order = Double
type Label = String
type Window = Int
type FrequencyMap = Map (Sample, Fragment) Int
type PositionMap = Map Position FrequencyMap
type DiversityMap = Map Position Diversity
type Environment = [(Name, Type)]
type Proof = Term
type MoreSolutions = Bool
type HSymbol = String
type Domain = ByteString
type DNSFormat = DNSMessage
type Domain = ByteString
type URL = String
type ApiVersion = String
type Endpoint = String
type Tag = String
type IP = String
type Port = Int
type PortType = String
type Docker a = Writer DockerFile a
type Arguments = Map Option ArgValue
type Arguments = Map Option ArgValue
type Node = Int
type Path = [Node]
type Edge = (Node, Node)
type Graph = IntMap IntSet
type Rooted = (Node, Graph)
type RawMail = ByteString
type RawFieldKey = ByteString
type RawFieldValue = ByteString
type RawBodyChunk = ByteString
type Header = [Field]
type CanonFieldKey = ByteString
type FieldKey = ByteString
type FieldValue = [ByteString]
type Body = Seq ByteString
type Key = Text
type User = ByteString
type Key = ByteString
type ZoneName = ByteString
type MailAddress = ByteString
type User = ByteString
type Key = ByteString
type ZoneName = ByteString
type MailAddress = ByteString
type Tag = Int
type PArray a = Vector a
type PArr = [::]
type Sel2 = Sel2
type Sels2 = Vector Sel2
type PArr = [::]
type Array a = [a]
type SelRep2 = ()
type Arrays a = [[a]]
type UPSelRep2 = Dist ((Int, Int), (Int, Int))
type Array = Vector
type Sel2 = UPSel2
type SelRep2 = UPSelRep2
type Segd = UPSegd
type SSegd = UPSSegd
type VSegd = UPVSegd
type Arrays = Vectors
type Array = Vector
type Sel2 = USel2
type SelRep2 = ()
type Segd = USegd
type SSegd = USSegd
type VSegd = UVSegd
type Arrays = Vectors
type C'pkgwant = CUInt
type C'pkgeflag = CUInt
type C'pkgstatus = CUInt
type C'pkgpriority = CInt
type C'dpkg_msg_type = CUInt
type DiscardList = [Card]
type Deck = [Card]
type Canvas = Map (Int, Int) Int
type BitLen = Int
type Entropy = ByteString
type PersonalizationString = ByteString
type Nonce = ByteString
type AdditionalInput = ByteString
type RandomBits = ByteString
type HmacDRBG = State SHA512
type HashDRBG = State SHA512
type CtrDRBG = State AESKey128
type HmacDRBGWith = State
type HashDRBGWith = State
type CtrDRBGWith = State
type EvReqs e = Set e
type EvOccs e = Set e
type Name = Text
type Description = Text
type CertVerifierFunc = ByteString -> [X509] -> IO TLSCertificateUsage
type Manager = Manager
type ErrorMessage = String
type URL = String
type Path = String
type Vec3 = (Double, Double, Double)
type Matrix = (Vec3, Vec3, Vec3)
type Point = Vec3
type Reflector s = GenST s -> Vec3 -> Vec3 -> ST s Vec3
type Particle = (Point, Vec3)
type Ensemble = Array U DIM1 Particle
type HitSegment = Pair HitPoint HitPoint
type Trace = [HitSegment]
type DomainSeeds = (Seed, Seed, Seed, Seed, Seed, Seed)
type CellContents = Vector Particle
type Classifier = Particle -> Int
type GridMonad = ReaderT GridWares DSMCRootMonad
type MacroSamples = Array U DIM1 BasicMacroParameters
type MacroField = Array U DIM1 (Point, IntensiveMacroParameters)
type BasicMacroParameters = (Double, Vec3, Double)
type IntensiveMacroParameters = (Double, Vec3, Double, Double)
type MacroSamplingMonad = StateT SamplingState (ReaderT Int GridMonad)
type W = Word32
type PERef = Text
type AttrMap = Map Name (Map Name Att)
type EntityMap = Map Text Text
type SymTable = Map Text Text
type PERef = Text
type Path = [Index]
type Index = (Int, Int)
type Labelling arg = [(arg, Status)]
type AbsArg = String
type LineNumber = Int
type ModuleName = String
type DepScore = Int
type OrderedModules = State [Module]
type Copy = (FilePath, FilePath)
type Dependencies = HashMap String String
type Modes = HashMap String [String]
type Version = (String, String)
type Level = String
type Version = String
type Subversion = String
type FileExtension = String
type FileName = String
type FileContent = String
type ComponentId = String
type CompiledContent = MaybeT Action
type FileProcessor = [File] -> CompiledContent [File]
type StringProcessor = String -> CompiledContent String
type State s = StateT s Identity
type Offset = Word32
type Size = Word64
type Title = Word8
type PageObjects = [(Coordinates, PageObject)]
type PageNumbers = (Word32, Word32, Word32, Word32, Word32, Word32, Word32, Word32, Word32, Word32)
type Coordinates = (Dimen, Dimen)
type TextString = [Either Dimen Word32]
type FontMag = Either Int Word32
type Dimen = Int32
type RenderPos = Double
type CustomStringFn x = Font -> x -> (Int, Either Char (Int -> [Node]))
type DIEMap = Map DieID DIERefs
type Module = String
type STVector = MVector
type IOVector = MVector RealWorld
type TableMap = Map TypeRep Dynamic
type MemberLens o memb = Member o memb => Simple Traversal o (ValType o memb)
type Acyclic o a = RWST o () (Set TypeRep) Maybe a
type MemberLens o memb = Member o memb => Simple Traversal o (ValType o memb)
type BehaviorGen a = Behavior (Behavior a)
type BehaviorGen a = Behavior (Behavior a)
type DColour = Colour Double
type Width = Int
type Height = Int
type Radius = Int
type ProdR s r e t a = Prod (Rule s r) e t a
type Args s f a = f -> ST s [a]
type Pos = Int
type Holey a = [Maybe a]
type FilePath = String
type JError = Text
type JReader = Either JError
type Method = ByteString
type Endpoint = ByteString
type Path = ByteString
type SecretKey = ByteString
type Resolver m = Syntax -> Id -> Delta -> m (Result Template)
type Delim = (String, String)
type Places = [Int]
type RD a = ChanName (ChanName a)
type ChanName a = Comm a
type Strategy a = a -> ()
type Places = [Int]
type RD a = ChanName (ChanName a)
type ChanName a = Comm a
type Strategy a = a -> ()
type DivideConquer a b = (a -> Bool) -> (a -> b) -> (a -> [a]) -> (a -> [b] -> b) -> a -> b
type DivideConquerSimple a b = (a -> Bool) -> (a -> b) -> (a -> [a]) -> ([b] -> b) -> a -> b
type Seq a = [a]
type Set = Set
type FM = Map
type ChangeMatrix o c = Vector (c, [o])
type ProductAtom = Either
type Callback = Int -> Char -> IO Int
type Template = String
type ParameterInput = (String, [String])
type ParameterOutput = (String, String)
type ParameterTree = Map String String
type Handler e r a b = Comp e r a b -> Res r b
type Res r = Free (Union r)
type FunctionTag = Integer
type Advice m a b = (a -> m b) -> a -> m b
type AspectEnv m = [EAspect m]
type State s m a = s -> m a
type BindingExpr = ([String], EgisonExpr)
type MatchClause = (EgisonPattern, EgisonExpr)
type MatcherInfo = [(PrimitivePatPattern, EgisonExpr, [(PrimitiveDataPattern, EgisonExpr)])]
type Matcher = EgisonValue
type PrimitiveFunc = WHNFData -> EgisonM WHNFData
type ObjectRef = IORef Object
type Env = [HashMap Var ObjectRef]
type Var = String
type Binding = (Var, ObjectRef)
type Match = [Binding]
type PatternBinding = (Var, EgisonPattern)
type Fresh = FreshT Identity
type MatchM = MaybeT EgisonM
type DPTB1 = Bool
type DPTU8 = Word8
type DPTS8 = Int8
type GroupM = MaybeT (StateT GroupCache IO)
type MMatrixXf = MMatrix Float CFloat
type MMatrixXd = MMatrix Double CDouble
type MMatrixXcf = MMatrix (Complex Float) (CComplex CFloat)
type MMatrixXcd = MMatrix (Complex Double) (CComplex CDouble)
type IOMatrix a b = MMatrix a b RealWorld
type STMatrix a b s = MMatrix a b s
type MatrixXf = Matrix Float CFloat
type MatrixXd = Matrix Double CDouble
type MatrixXcf = Matrix (Complex Float) (CComplex CFloat)
type MatrixXcd = Matrix (Complex Double) (CComplex CDouble)
type Sample = HashMap Text Value
type IntervalSeconds = Int
type SourceValue = Int64
type IntervalSeconds = Int
type SourceValue = Int64
type Signal a = Int -> a
type SignalGen a = Int -> a
type Ticks = Word32
type Elevate f g = (Tower g, f ∈ Floors1 g)
type Floors1 f = f : Floors f
type Interface = Interface
type Solution = Map Name Version
type ElmUrl url = (url -> [(Text, Text)] -> Text) -> Elm
type Headers = [(HeaderName, HeaderField)]
type HeaderName = CI ByteString
type HeaderField = ByteString
type Parameters = Map (CI ByteString) ByteString
type Prec = Int
type BoolS = Unit :+: Unit
type EitherS a b = a :+: b
type ListS a = Unit :+: (a :*: [a])
type MaybeS a = Unit :+: a
type Tuple0S = Unit
type Tuple2S a b = a :*: b
type Tuple3S a b c = a :*: (b :*: c)
type Tuple4S a b c d = a :*: (b :*: (c :*: d))
type Tuple5S a b c d e = a :*: (b :*: (c :*: (d :*: e)))
type Tuple6S a b c d e f = a :*: (b :*: (c :*: (d :*: (e :*: f))))
type Tuple7S a b c d e f h = a :*: (b :*: (c :*: (d :*: (e :*: (f :*: h)))))
type RatioS a = a :*: a
type Prec = Int
type Expect = [String]
type Unexpect = [String]
type ParseMethod s a e r = P s a -> [s] -> ParseResult e r
type ParseResult e r = Either (e, Expect, Unexpect) r
type Extend e s = StateT [e s] (Standard s)
type Quit s a = ([s], a)
type CSpace = Word
type E a = a -> a
type SocketId = ByteString
type Enumerator a m b = Step a m b -> Iteratee a m b
type Enumeratee ao ai m b = Step ai m b -> Iteratee ao m (Step ai m b)
type Enumerator a m b = Step a m b -> Iteratee a m b
type Enumeratee ao ai m b = Step ai m b -> Iteratee ao m (Step ai m b)
type Key_ = Int
type EnumMapSet k = EnumMapMap k ()
type Reader a = String -> Either String a
type MsgHandler m a = m -> Handler a
type ErrorHandler m = WrapBox m -> IOError -> IO ()
type Term = State Int Expr
type CallbackFn = Device -> Event Data -> IO ()
type EventMap = [(EventType, CallbackFn)]
type Process r = ReceiverT r IO
type MFItemId = String
type Name = String
type Arity = Int
type (/\) a b = (a, b)
type (\/) a b = Either a b
type Not a = a -> Void
type (:=:) = (:~:)
type (:\/:) a b = Either a b
type (:/\:) a b = (a, b)
type EquivT' s = EquivT s ()
type EquivM s c v = EquivT s c v Identity
type EquivM' s v = EquivM s () v
type ErlRecv = IO (Maybe ErlType, Maybe ErlType)
type ErlSend = (Maybe ErlType, Maybe ErlType) -> IO ()
type Node = String
type Pid = Either ErlType String
type PhraseTree = Tree Phrase
type PhraseForest = Forest Phrase
type PhraseMap = Map Text PhraseTree
type PhraselistSet = Phraselist t => [t]
type PAT = PhraseAlmostTree
type BadWord = Text
type Message = Text
type MessagePart = Text
type Multiplicity = Int
type Restof = Text
type RestOf = Text
type Word = Text
type Score = Int
type SubMap = PhraseMap
type MaybeCont a r = MaybeContT a Identity r
type EitherCont a l r = EitherContT a l Identity r
type ErrorMessageOr = Either ErrorMessage
type Script = EitherT String IO
type Solver s m = s -> m (Result, IntMap Bool)
type BitString = [BitChar]
type SqlEntity ent = (PersistEntity ent, PersistEntityBackend ent ~ SqlBackend)
type IdentInfo = (SqlBackend, IdentState)
type SqlEntity ent = (PersistEntity ent, PersistEntityBackend ent ~ SqlBackend)
type Count = Double
type Prob = Double
type Distribution event = event -> Prob
type CondObserved event context = SmoothTrie (SubMap context) (Sub context) (Counts event)
type CondDistribution event context = context -> Distribution event
type Weighting = forall a. [Maybe (Observed a)] -> [Double]
type DebugDist event context = context -> event -> [(Double, Double)]
type NerveBoth n = (NeuronOptions n -> NeuronOptions n) -> Incubation (Nerve (NeuronFromImpulse n) AxonConductive (NeuronForImpulse n) AxonConductive)
type NerveNone n = (NeuronOptions n -> NeuronOptions n) -> Incubation (Nerve (NeuronFromImpulse n) AxonNonConductive (NeuronForImpulse n) AxonNonConductive)
type NerveOnlyFrom n = (NeuronOptions n -> NeuronOptions n) -> Incubation (Nerve (NeuronFromImpulse n) AxonConductive (NeuronForImpulse n) AxonNonConductive)
type NerveOnlyFor n = (NeuronOptions n -> NeuronOptions n) -> Incubation (Nerve (NeuronFromImpulse n) AxonNonConductive (NeuronForImpulse n) AxonConductive)
type ImpulseTime = POSIXTime
type ImpulseValue = [Rational]
type IInteger = IValue Integer
type IRational = IValue Rational
type IIntegerList = IList Integer
type IRationalList = IList Rational
type DumpFromImpulse = NeuronFromImpulse DumpNeuron
type DumpForImpulse = NeuronForImpulse DumpNeuron
type DumpOptions = NeuronOptions DumpNeuron
type SequenceFromImpulse v = NeuronFromImpulse (SequenceNeuron v)
type SequenceForImpulse v = NeuronForImpulse (SequenceNeuron v)
type SequenceOptions v = NeuronOptions (SequenceNeuron v)
type WorkerFromImpulse = NeuronFromImpulse WorkerNeuron
type WorkerOptions = NeuronOptions WorkerNeuron
type WorkType = IO ()
type TimeoutFromImpulse = NeuronFromImpulse TimeoutNeuron
type TimeoutForImpulse = NeuronForImpulse TimeoutNeuron
type TimeoutOptions = NeuronOptions TimeoutNeuron
type FunctionFromImpulse i j = NeuronFromImpulse (FunctionNeuron i j)
type FunctionForImpulse i j = NeuronForImpulse (FunctionNeuron i j)
type FunctionOptions i j = NeuronOptions (FunctionNeuron i j)
type FailFromImpulse = NeuronFromImpulse FailNeuron
type FailForImpulse = NeuronForImpulse FailNeuron
type FailOptions = NeuronOptions FailNeuron
type DelayFromImpulse i = NeuronFromImpulse (DelayNeuron i)
type DelayForImpulse i = NeuronForImpulse (DelayNeuron i)
type DelayOptions i = NeuronOptions (DelayNeuron i)
type Index = Int
type Key = Text
type Value = Text
type TTL = Int
type Tags (m :: * -> *) = MaybeToList (Tag m) ++ ListMapTag (Inners m)
type Inners m = Inners' (Inner m)
type Reader tag r = ReaderT tag r Identity
type Reader tag r = ReaderT tag r Identity
type MonadReader r = MonadReader r r
type Reader r = Reader r r
type ReaderT r = ReaderT r r
type Writer tag w = WriterT tag w Identity
type Writer tag w = WriterT tag w Identity
type MonadWriter w = MonadWriter w w
type Writer w = Writer w w
type WriterT w = WriterT w w
type State tag r = StateT tag r Identity
type State tag r = StateT tag r Identity
type Except tag e = ExceptT tag e Identity
type State tag r = StateT tag r Identity
type MonadState s = MonadState s s
type State s = State s s
type StateT s = StateT s s
type State tag r = StateT tag r Identity
type MonadState s = MonadState s s
type State s = State s s
type StateT s = StateT s s
type Except tag e = ExceptT tag e Identity
type MonadExcept e = MonadExcept e e
type Except e = Except e e
type ExceptT e = ExceptT e e
type Key = NibbleString
type Val = RLPObject
type EventState e c = Talker e c
type EventMonad e c = TalkM (Talker e c, Answer e c)
type EventM = EventIO Double
type HandlerAccessor t a b = EventIOHandlers t -> Ref IO (HandlerSet (EventIO t) a b)
type HandlerAccessor t m a b = (EventTHandlers t m -> HandlerSet (EventT t m) a b, HandlerSet (EventT t m) a b -> EventTHandlers t m -> EventTHandlers t m)
type EventM = EventIO Double
type Angle = Float
type Radians = Float
type Length = Float
type X = Float
type Y = Float
type Offset = (X, Y)
type NamedId = [Char]
type NumericId = Int
type LeftOffset = X
type TopOffset = Y
type RightOffset = X
type BottomOffset = Y
type Middle = GraphicalNumeric
type Pos = (X, Y)
type EventloopModuleIdentifier = [Char]
type Initializer = SharedIOState -> IOState -> IO (SharedIOState, IOState)
type EventRetriever = SharedIOState -> IOState -> IO (SharedIOState, IOState, [In])
type PreProcessor = SharedIOState -> IOState -> In -> IO (SharedIOState, IOState, [In])
type PostProcessor = SharedIOState -> IOState -> Out -> IO (SharedIOState, IOState, [Out])
type EventSender = SharedIOState -> IOState -> Out -> IO (SharedIOState, IOState)
type Teardown = SharedIOState -> IOState -> IO (SharedIOState, IOState)
type OutEventRouter = Out -> EventloopModuleIdentifier
type APIName = [Char]
type Parameter = [Char]
type CanvasUserReceiveBuffer = MVar [CanvasIn]
type CanvasSystemReceiveBuffer = MVar SystemCanvasIn
type Opcode = Int
type ScreenMetric = Int
type ScreenX = ScreenMetric
type ScreenY = ScreenMetric
type ScreenWidth = ScreenMetric
type ScreenHeight = ScreenMetric
type ScreenRadius = ScreenMetric
type ScreenAngle = ScreenMetric
type ScreenPoint = (ScreenX, ScreenY)
type ScreenDimensions = (ScreenWidth, ScreenHeight)
type ScreenStartingPoint = ScreenPoint
type ScreenControlPoint = ScreenPoint
type ScreenEndPoint = ScreenPoint
type ScreenStartingAngle = ScreenAngle
type ScreenEndAngle = ScreenAngle
type CanvasId = NumericId
type ZIndex = Int
type ScreenColorMetric = Int
type ScreenRed = ScreenColorMetric
type ScreenGreen = ScreenColorMetric
type ScreenBlue = ScreenColorMetric
type ScreenAlpha = Float
type ScreenColor = (ScreenRed, ScreenGreen, ScreenBlue, ScreenAlpha)
type ScreenPixel = ScreenColor
type ColorStopOffset = Float
type ScreenCircle = (ScreenPoint, ScreenRadius)
type ScaleUnit = Float
type ScaleX = ScaleUnit
type ScaleY = ScaleUnit
type ScreenLineThickness = ScreenMetric
type FontFamily = [Char]
type FontSize = Int
type PathRenderStrokeStyle = RenderStyle
type PathRenderFillStyle = RenderStyle
type CanvasColorStop = (ColorStopOffset, ScreenColor)
type TextStrokeRenderStyle = RenderStyle
type TextFillRenderStyle = RenderStyle
type TransformUnit = Float
type TransformationMatrix = (TransformUnit, TransformUnit, TransformUnit, TransformUnit, TransformUnit, TransformUnit)
type CSSLeftOffset = CSSUnit
type CSSTopOffset = CSSUnit
type CSSMeasurements = (CSSLeftOffset, CSSTopOffset)
type GraphicalNumeric = Float
type Translation = Point
type Width = GraphicalNumeric
type Height = GraphicalNumeric
type Dimensions = (Width, Height)
type Radius = GraphicalNumeric
type Red = GraphicalNumeric
type Green = GraphicalNumeric
type Blue = GraphicalNumeric
type Alpha = GraphicalNumeric
type Color = (Red, Green, Blue, Alpha)
type FillColor = Color
type StrokeColor = Color
type StrokeLineThickness = GraphicalNumeric
type UpperLeft = Point
type UpperRight = Point
type LowerLeft = Point
type LowerRight = Point
type AmountOfPoints = Int
type FontFamily = [Char]
type FontSize = GraphicalNumeric
type CanvasId = NumericId
type OpenFile = (FilePath, Handle, IOMode)
type MicroSecondDelay = Int
type TimerId = [Char]
type IncomingTickBuffer = MVar [TimerIn]
type StartedTimer = (TimerId, TimerIO)
type TimerStartFunction = TimerIO -> IO () -> Delay -> IO Bool
type Pos = (Float, Float)
type Vector = (Float, Float)
type Label = Char
type Weight = Float
type Node = (Label, Pos, Color)
type Edge = (Label, Label, Color, Weight, Thickness)
type EvtKVMap = Map ByteString ByteString
type ESUUID = ByteString
type EventId = (Int, ByteString, EventType)
type Builder a = Endo a
type StreamACLBuilder = Builder StreamACL
type StreamMetadataBuilder = Builder StreamMetadata
type Nat = Int
type Set a = [a]
type PQ a = [(Int, a)]
type Pos = Int
type Env = [Ty]
type Bit = Int
type MInterval = (Int, Int, Int)
type Interval = (Int, Int)
type EInterval = (Int, Interval)
type Catch = CatchT Identity
type ConstructorApplication f code = Injection (NP I) code -.-> K (f (NS (NP I) code))
type ExifTag = CInt
type And c d = c :&: d
type RationalInf = RatioInf Integer
type InitPair = InitPair' Rational
type InitPair = InitPair' Rational
type RationalInf = RatioInf Integer
type BlockL = [Block]
type InlineL = [Inline]
type TimeUnits = Int
type ECMMapSize = Int
type ECMULength = Int
type ECMIncr = Word32
type ECMNewState a b s m k v = (CacheState s m k v) -> a (b (CacheState s m k v))
type ECMEnterState a b s m k v = b (CacheState s m k v) -> ((CacheState s m k v) -> a (CacheState s m k v, v)) -> a v
type ECMReadState a b s m k v = b (CacheState s m k v) -> a (CacheState s m k v)
type TimeUnits = Int
type ECMMapSize = Int
type ECMULength = Int
type ECMIncr = Word32
type ECMNewState a b s m k v = (CacheState s m k v) -> a (b (CacheState s m k v))
type ECMEnterState a b s m k v = b (CacheState s m k v) -> ((CacheState s m k v) -> a (CacheState s m k v, v)) -> a v
type ECMReadState a b s m k v = b (CacheState s m k v) -> a (CacheState s m k v)
type FilePath = String
type MInt m = Int
type MChar m = Char
type MBool m = Bool
type Forest a = [Tree a]
type Graph = Table [Vertex]
type Table a = Array Vertex a
type Bounds = (Vertex, Vertex)
type Edge = (Vertex, Vertex)
type Vertex = Int
type Key = Int
type Key = Int
type Key = Int
type Mask = Int
type Prefix = Int
type Nat = Word
type Key = Int
type Key = Int
type OperatorTable p a = [[Operator p a]]
type UserString = String
type EncodedString = String
type P a = String -> Int -> ParseResult a
type Vbind = (Var, Ty)
type Tbind = (Tvar, Kind)
type Mname = Maybe AnMname
type Var = Id
type Tvar = Id
type Tcon = Id
type Dcon = Id
type Qual t = (Mname, t)
type Id = String
type Menv = Map AnMname Envs
type Venv = Map Var Ty
type Tvenv = Map Tvar Kind
type Tcenv = Map Tcon KindOrCoercion
type NtEnv = Map Tcon CoercionKind
type PrepM = State Int
type Optic p f s t a b = p a (f b) -> p s (f t)
type Optic' p f s a = p a (f a) -> p s (f s)
type (∈) x xs = Member xs x
type (∈) x xs = Member xs x
type WrapForall c h = Forall (Instance1 c h)
type (⊆) xs ys = Include ys xs
type Include ys = Forall (Member ys)
type IncludeAssoc ys = Forall (Associated ys)
type FieldOptic k = forall f p t xs (h :: kind -> *) (v :: kind). (Extensible f p t, Associate k v xs, Labelling k p, Wrapper h) => Optic' p f (t (Field h) xs) (Repr h v)
type FieldName k = Optic' (LabelPhantom k) Proxy (Inextensible (Field Proxy) '[k :> ()]) ()
type RecordOf h = (:*) (Field h)
type Record = RecordOf Identity
type VariantOf h = (:|) (Field h)
type Variant = VariantOf Identity
type Eff xs = Skeleton (Instruction xs)
type AllOf xs = Identity :* xs
type OneOf xs = Identity :| xs
type Member = MemberImpl OU2
type MemberU = MemberUImpl OU2
type Member = MemberImpl OU2
type Eff r = Free (Union r)
type Member = MemberImpl OU2
type Fail = Exc ()
type Seconds = Double
type Seconds = Double
type Environment = (ConnectionSettings, Manager, NominalDiffTime)
type Label = String
type View = [Label]
type Base = Integer
type HyperExponent = Base
type ConvergenceOrder = Int
type ConvergenceRate = Double
type DecimalDigits = Int
type Result = Rational
type Estimate = (Result, DecimalDigits)
type ArithmeticMean = Rational
type GeometricMean = Rational
type AGM = (ArithmeticMean, GeometricMean)
type Distance i = (i, [i])
type NPrimes = Int
type PrimeMultiples i = [i]
type BisectionRatio = Ratio Int
type MinLength = Int
type Monomial coefficient exponent = (coefficient, exponent)
type Interval endPoint = (endPoint, endPoint)
type Exponential base exponent = (base, exponent)
type Factors base exponent = [Exponential base exponent]
type Terms = Int
type StateCode = StateAbbreviation
type UNFormalName = String
type UNShortName = String
type Digit = DecimalDigit
type Lat = Double
type Long = Double
type Radius = Double
type Field = String
type Long = Word32
type PartialDate = Interval Day
type BufSize = Int
type Clone = FastaSequence
type Germline = FastaSequence
type Codon = ByteString
type CloneMap = Map (Int, Germline) [Clone]
type Clone = FastaSequence
type Germline = FastaSequence
type Codon = ByteString
type CloneMap = Map (Int, Germline) [Clone]
type Clone = FastaSequence
type Germline = FastaSequence
type Codon = Text
type CloneMap = Map (Int, Germline) [Clone]
type Clone = FastaSequence
type Germline = FastaSequence
type Codon = Text
type CloneMap = Map (Int, Germline) [Clone]
type Codon = String
type Clone = FastaSequence
type Germline = FastaSequence
type CloneMap = Map (Int, Germline) [Clone]
type ChannelKey = ByteString
type ChannelName = ByteString
type CommandArg = ByteString
type CommandName = ByteString
type HostName = ByteString
type MsgString = ByteString
type NickName = ByteString
type RealName = ByteString
type ServerName = ByteString
type TargetName = ByteString
type UserName = ByteString
type Bot = ContT () (StateT Config (ReaderT Params IO))
type EventHandler = Unique
type CompileModule a = ModuleT Symbols IO (Either CompileError (a, CompileState, CompileWriter))
type Ptr a = a
type Automatic a = a
type String = [Char]
type EventType = Text
type Selector = Text
type UserAccessToken = AccessToken UserKind
type AppAccessToken = AccessToken AppKind
type AccessTokenData = Text
type RedirectUrl = Text
type UserId = Id
type OrderId = Id
type RealTimeUpdateField = ByteString
type RealTimeUpdateUrl = Text
type RealTimeUpdateToken = ByteString
type Argument = (ByteString, ByteString)
type Obj o = o
type Attr a = a
type Lattice = HashMap Cid Neighborhood
type Total = (->)
type Partial = Kleisli Maybe
type Failing e = Kleisli (Either e)
type Lens cat f o = Lens cat (f -> f) (o -> o)
type (:->) f o = Lens Total f o
type (:~>) f o = Lens Partial f o
type (:~>) f o = Lens Partial f o
type Partial = Kleisli Maybe
type Lens e f o = Lens (Failing e) f o
type Failing e = Kleisli (Either e)
type (:->) f o = Lens Total f o
type Total = (->)
type (:->) f o = Lens Total f o
type Octave = Int
type FrequencyTable = [(String, Int)]
type PMusic a = P (Str ChordToken [ChordToken] Int) a
type SD (mode :: Mode) (deg :: DiatonicDegree) (clss :: ClassType) = Surface_Chord deg clss
type RepPhrase_ (mode_aytW :: Mode) = (:+:) ((:+:) (CEq Phrase_P_1451_ () () ((:*:) ((:*:) (Rec (Ton mode_aytW)) (Rec (SDom mode_aytW))) ((:*:) (Rec (Dom mode_aytW)) (Rec (Ton mode_aytW))))) (CEq Phrase_P_151_ () () ((:*:) (Rec (Ton mode_aytW)) ((:*:) (Rec (Dom mode_aytW)) (Rec (Ton mode_aytW)))))) ((:+:) (CEq Phrase_P_51_ () () ((:*:) (Rec (Dom mode_aytW)) (Rec (Ton mode_aytW)))) ((:+:) (CEq Phrase_P_15_ () () ((:*:) (Rec (Ton mode_aytW)) (Rec (Dom mode_aytW)))) (CEq Phrase_P_1_ () () (Rec (Ton mode_aytW)))))
type RepTon_ (mode_aytV :: Mode) = (:+:) (CEq Ton_T_1_ ((,) mode_aytV ()) ((,) MajMode ()) (Rec (SD MajMode I MajClass))) (CEq Ton_Tm_1_ ((,) mode_aytV ()) ((,) MinMode ()) (Rec (SD MinMode I MinClass)))
type RepDom_ (mode_aytQ :: Mode) = (:+:) ((:+:) (CEq Dom_D_2_ () () (Rec (SD mode_aytQ V DomClass))) ((:+:) (CEq Dom_D_1_ () () ((:*:) (Rec (SDom mode_aytQ)) (Rec (Dom mode_aytQ)))) (CEq Dom_D_3_ () () (Rec (SD mode_aytQ V MajClass))))) ((:+:) (CEq Dom_D_4_ ((,) mode_aytQ ()) ((,) MajMode ()) (Rec (SD MajMode VII DimClass))) ((:+:) (CEq Dom_D_5_ () () ((:*:) (Rec (SD mode_aytQ II DomClass)) (Rec (SD mode_aytQ V DomClass)))) (CEq Dom_Dm_4_ ((,) mode_aytQ ()) ((,) MinMode ()) (Rec (SD MinMode VII DimClass)))))
type RepSDom_ (mode_aytO :: Mode) = (:+:) ((:+:) (CEq SDom_S_1_ ((,) mode_aytO ()) ((,) MajMode ()) (Rec (SD MajMode IV MajClass))) (CEq SDom_S_2_ () () (Rec (SD mode_aytO II MinClass)))) ((:+:) (CEq SDom_S_3_ ((,) mode_aytO ()) ((,) MajMode ()) ((:*:) (Rec (SD MajMode III MinClass)) (Rec (SD MajMode IV MajClass)))) (CEq SDom_Sm_1_ ((,) mode_aytO ()) ((,) MinMode ()) (Rec (SD MinMode IV MinClass))))
type URL = String
type URLString = String
type DateString = String
type URIString = String
type TitleString = String
type TimeString = String
type TextString = String
type URI = String
type NCName = String
type Date = String
type MediaType = String
type ValidatorResult = VTree (Bool, String)
type FeedSetter a = a -> Feed -> Feed
type ItemSetter a = a -> Item -> Item
type FeedGetter a = Feed -> Maybe a
type ItemGetter a = Item -> Maybe a
type CrawlResult = Either CrawlFail CrawlSuccess
type Tweet = String
type GUID = String
type ShowValue = Constant () -> String
type CodeWriter = RWS Readers Writers States
type Location = Maybe (Expression ())
type Widening a = (Int -> a -> a) -> (Int -> a -> a)
type BoundedInt a = (BoundedSuper a, BoundedSuper (UnsignedRep a))
type Length = WordN
type Index = WordN
type Mut = IO
type MArr a = IOArray Index a
type Par = Par
type IV = IVar
type SourceInfo = String
type Opt = Reader Env
type FeldSymbols = (Decor SourceInfo1 Identity :|| Type) :+: ((Condition :|| Type) :+: ((FFI :|| Type) :+: ((Literal :|| Type) :+: ((Select :|| Type) :+: ((Tuple :|| Type) :+: ((Array :|| Type) :+: ((BITS :|| Type) :+: ((COMPLEX :|| Type) :+: ((Conversion :|| Type) :+: ((EQ :|| Type) :+: ((Error :|| Type) :+: ((FLOATING :|| Type) :+: ((REALFLOAT :|| Type) :+: ((FRACTIONAL :|| Type) :+: ((FUTURE :|| Type) :+: ((INTEGRAL :|| Type) :+: ((Logic :|| Type) :+: ((Loop :|| Type) :+: ((NUM :|| Type) :+: ((NoInline :|| Type) :+: ((ORD :|| Type) :+: ((PropSize :|| Type) :+: ((Save :|| Type) :+: ((Switch :|| Type) :+: ((Trace :|| Type) :+: (Let :+: (ConditionM Mut :+: (LoopM Mut :+: (MONAD Mut :+: (Mutable :+: (MutableArray :+: (MutableReference :+: (MutableToPure :+: (MONAD Par :+: (ParFeature :+: Empty)))))))))))))))))))))))))))))))))))
type FeldDom = FODomain FeldSymbols Typeable Type
type SyntacticFeld a = (Syntactic a, Domain a ~ FeldDomain, Typeable (Internal a))
type SizeCap a = Data a -> Data a
type BoundedInt a = (BoundedSuper a, BoundedSuper (UnsignedRep a))
type Vector1 a = Vector (Data a)
type Vector2 a = Vector (Vector (Data a))
type Matrix a = Vector2 a
type DIM0 = Z
type DIM1 = DIM0 :. Data Length
type DIM2 = DIM1 :. Data Length
type DIM3 = DIM2 :. Data Length
type DVector sh a = Vector sh (Data a)
type PushVector1 a = PushVector (Data a)
type Ident = String
type Identifier = String
type Ident = String
type Identifier = String
type ArtefactResult = Reader Config String
type PhaseResult r = ErrorT FerryError (WriterT Log (WriterT [File] (Reader Config))) r
type FileName = String
type File = (Maybe FileName, String)
type Name = String
type Stage = Int
type Log = [String]
type ConfMap = Map String String
type URLString = String
type ErrM a = Either FFeedErr a
type UUID = String
type URLString = String
type DateString = String
type UserName = String
type ListName = String
type RoomName = String
type ServiceName = String
type UpdateToken = String
type EntryID = UUID
type CommentID = UUID
type RoomID = UUID
type ListID = UUID
type ServiceID = UUID
type UserID = UUID
type Via = (String, URLString)
type PackageInterface = HashMap (PackageName, ClassName) HeaderName
type Args = [(Types, String)]
type DaughterMap = Map String [Class]
type AnnotateMap = Map (PkgType, String) String
type Plan = Ptr FFTWPlan
type FFTWPlan = ()
type FFTWFlag = CUInt
type FFTWSign = CInt
type FFTWKind = CInt
type TSpec = ([IODim], [IODim])
type Split t i r = i -> t -> (r, t)
type SplitM t i r = Split t i (Maybe r)
type Thread t i r = (t, Split t i r)
type Collect r c = (r -> c -> c, c)
type Node = Int
type LNode a = (Node, a)
type UNode = LNode ()
type Edge = (Node, Node)
type LEdge b = (Node, Node, b)
type UEdge = LEdge ()
type Adj b = [(b, Node)]
type Context a b = (Adj b, Node, a, Adj b)
type MContext a b = Maybe (Context a b)
type Decomp g a b = (MContext a b, g a b)
type GDecomp g a b = (Context a b, g a b)
type UContext = ([Node], Node, [Node])
type UDecomp g = (Maybe UContext, g)
type Path = [Node]
type UPath = [UNode]
type UGr = Gr () ()
type GraphRep a b = (Int, Array Node (Context' a b), IOArray Node Bool)
type Context' a b = Maybe (Adj b, a, Adj b)
type USGr = SGr () ()
type NodeMapM a b g r = State (NodeMap a, g a b) r
type CFun a b c = Context a b -> c
type UGr = Gr () ()
type RTree = [Path]
type LRTree a = [LPath a]
type Network = Gr () (Double, Double)
type Voronoi a = LRTree a
type JSONGen = JSONGenT Identity
type HeightField s = Two s -> One s
type Surf s = Two s -> Three s
type USurf = forall s. (Floating s) => Surf s
type Curve2 s = One s -> Two s
type Curve3 s = One s -> Three s
type Warp1 s = One s -> One s
type Warp2 s = Two s -> Two s
type Warp3 s = Three s -> Three s
type Point3 = Vertex3
type VN3 s = VN (Point3 s) (Normal3 s)
type Point2 = Vertex2
type R = Float
type Unop a = a -> a
type Binop a = a -> a -> a
type Col = Color4 R
type ErrorBound = R
type MaterialTrans = Unop Material
type Renderer = GContext -> IO ()
type Image o = (R, R) -> o
type ImageC = Image Col
type Region = Image Bool
type Filter2 = Geometry2 -> Geometry2
type Filter3 = Geometry3 -> Geometry3
type FileCache = FileCacheR String
type Line = Text
type Error = String
type GlobPattern = String
type FilterPredicate = FindClause Bool
type RecursionPredicate = FindClause Bool
type GlobPattern = String
type FilterPredicate = FindClause Bool
type RecursionPredicate = FindClause Bool
type FilterPredicate = FindClause Bool
type RecursionPredicate = FindClause Bool
type FilePath = String
type FilePath = String
type FilterPredicate = FilterPredicateT Identity
type RecursePredicate = RecursePredicateT Identity
type FilterPredicate = FilterPredicateT Identity
type RecursePredicate = RecursePredicateT Identity
type RevisionId = String
type Description = String
type InApp a = a -> a
type DirName = String
type FileName = String
type FileCnt = ByteString
type DirPath = [DirName]
type FPath = (DirPath, FileName)
type FSE = Either (DirName, FileSystem) File
type FSState = FileSystem
type FS = FST Identity
type InApp a = a -> a
type DirName = String
type FileName = String
type FSState = FileSystem
type FS = FST Identity
type DirPath = [DirName]
type FPath = (DirPath, FileName)
type FSForest = [FSTree]
type Forest a = [Tree a]
type QuoteField = String
type QuoteSymbol = String
type QuoteValue = String
type Quote = [(QuoteField, QuoteValue)]
type QuoteCurrency = Float
type Cond a = CondT a Identity
type Name = String
type Arity = Int
type Sort = String
type LittleEndian a = WithArch ArchLittle a
type BigEndian a = WithArch ArchBig a
type FitParser a = StateT FpState Parser a
type N0 = T
type N1 = GE1 T
type N2 = GE2 T
type N3 = GE3 T
type N4 = GE4 T
type N5 = GE5 T
type N6 = GE6 T
type N7 = GE7 T
type N8 = GE8 T
type GE1 list = T list
type GE2 list = T (GE1 list)
type GE3 list = T (GE2 list)
type GE4 list = T (GE3 list)
type GE5 list = T (GE4 list)
type GE6 list = T (GE5 list)
type GE7 list = T (GE6 list)
type GE8 list = T (GE7 list)
type FixedList0 = Nil
type FixedList1 = Cons FixedList0
type FixedList2 = Cons FixedList1
type FixedList3 = Cons FixedList2
type FixedList4 = Cons FixedList3
type FixedList5 = Cons FixedList4
type FixedList6 = Cons FixedList5
type FixedList7 = Cons FixedList6
type FixedList8 = Cons FixedList7
type FixedList9 = Cons FixedList8
type FixedList10 = Cons FixedList9
type FixedList11 = Cons FixedList10
type FixedList12 = Cons FixedList11
type FixedList13 = Cons FixedList12
type FixedList14 = Cons FixedList13
type FixedList15 = Cons FixedList14
type FixedList16 = Cons FixedList15
type FixedList17 = Cons FixedList16
type FixedList18 = Cons FixedList17
type FixedList19 = Cons FixedList18
type FixedList20 = Cons FixedList19
type FixedList21 = Cons FixedList20
type FixedList22 = Cons FixedList21
type FixedList23 = Cons FixedList22
type FixedList24 = Cons FixedList23
type FixedList25 = Cons FixedList24
type FixedList26 = Cons FixedList25
type FixedList27 = Cons FixedList26
type FixedList28 = Cons FixedList27
type FixedList29 = Cons FixedList28
type FixedList30 = Cons FixedList29
type FixedList31 = Cons FixedList30
type FixedList32 = Cons FixedList31
type E1 = S E0
type E2 = E1 :+ E1
type E4 = E2 :+ E2
type E8 = E4 :+ E4
type E10 = S (S E8)
type E16 = E8 :+ E8
type E20 = E10 :+ E10
type E30 = E20 :+ E10
type E32 = E16 :+ E16
type E64 = E32 :+ E32
type N1 = S Z
type N2 = S N1
type N3 = S N2
type N4 = S N3
type N5 = S N4
type N6 = S N5
type N1 = S Z
type N2 = S N1
type N3 = S N2
type N4 = S N3
type N5 = S N4
type N6 = S N5
type Tuple2 a = (a, a)
type Tuple3 a = (a, a, a)
type Tuple4 a = (a, a, a, a)
type Tuple5 a = (a, a, a, a, a)
type N1 = S Z
type N2 = S N1
type N3 = S N2
type N4 = S N3
type N5 = S N4
type N6 = S N5
type Vec1 = Vec (S Z)
type Vec2 = Vec (S (S Z))
type Vec3 = Vec (S (S (S Z)))
type Vec4 = Vec (S (S (S (S Z))))
type Vec5 = Vec (S (S (S (S (S Z)))))
type Vec1 = Vec (S Z)
type Vec2 = Vec (S (S Z))
type Vec3 = Vec (S (S (S Z)))
type Vec4 = Vec (S (S (S (S Z))))
type Vec5 = Vec (S (S (S (S (S Z)))))
type Vec1 = Vec (S Z)
type Vec2 = Vec (S (S Z))
type Vec3 = Vec (S (S (S Z)))
type Vec4 = Vec (S (S (S (S Z))))
type Vec5 = Vec (S (S (S (S (S Z)))))
type Vec1 = Vec (S Z)
type Vec2 = Vec (S (S Z))
type Vec3 = Vec (S (S (S Z)))
type Vec4 = Vec (S (S (S (S Z))))
type Vec5 = Vec (S (S (S (S (S Z)))))
type FixedPoint4816 = GenericFixedPoint Int64 Word128 Word16
type FixedPoint3232 = GenericFixedPoint Int64 Word128 Word32
type FixedPoint6464 = GenericFixedPoint Int128 Word256 Word64
type FixedPoint128128 = GenericFixedPoint Int256 Word512 Word128
type FixedPoint256256 = GenericFixedPoint Int512 Word1024 Word256
type FixedPoint512512 = GenericFixedPoint Int1024 Word2048 Word512
type FixedPoint10241024 = GenericFixedPoint Int2048 Word4096 Word1024
type Int128 = BigInt Word128
type Int256 = BigInt Word256
type Int512 = BigInt Word512
type Int1024 = BigInt Word1024
type Int2048 = BigInt Word2048
type Int4096 = BigInt Word4096
type Int8192 = BigInt Word8192
type Word72 = BigWord Word8 Word64
type Word256 = BigWord Word128 Word128
type Word512 = BigWord Word256 Word256
type Word576 = BigWord Word64 Word512
type Word584 = BigWord Word72 Word512
type Word1024 = BigWord Word512 Word512
type Word1280 = BigWord Word1024 Word256
type Word2048 = BigWord Word1024 Word1024
type Word2632 = BigWord Word584 Word2048
type Word4096 = BigWord Word2048 Word2048
type Word8192 = BigWord Word4096 Word4096
type FIXValues = ListOfValues FIXValue
type FIXTags = ListOfTags FIXTag
type FIXMessages = ListOfMessages FIXMessageSpec
type Attr f a = Mu (Ann f a)
type CoAttr f a = Mu (CoAnn f a)
type Node f = Either (Mu f) (Path f)
type HashMu hash f = Mu (HashAnn hash f)
type Ensemble = Vector [Double]
type FW = FlexiWrap
type FWCTC = FlexiWrapCTC
type O = :.
type FWT = FlexiWrapT
type URLString = String
type URLString = String
type DateString = String
type UserID = String
type UserName = String
type NSID = UserID
type PhotoID = String
type PhotosetID = String
type BlogID = String
type CategoryID = String
type ChatId = String
type Key = String
type Tag = String
type TagID = Tag
type Title = String
type Description = String
type PlaceID = String
type GroupID = String
type WhereOnEarthID = String
type LicenseID = String
type CommentID = String
type TicketID = String
type NoteID = String
type ClusterID = String
type DayWeek = Bool
type PermissionID = String
type ContextID = Integer
type Date = DateString
type DateInterval = (Date, Maybe Date)
type AuthTokenValue = String
type AuthMiniToken = String
type Decimal = String
type DateGranularity = Int
type Latitude = Decimal
type Longitude = Decimal
type GeoLocation = (Latitude, Longitude, Maybe Accuracy)
type Accuracy = Int
type Threshold = Int
type PlaceTypeName = String
type PlaceTypeId = String
type NameContext = ResContext Namespace
type TagMode = String
type ErrM a = Either FlickErr a
type Prog = [Decl]
type Id = String
type Pat = Exp
type Alt = (Pat, Exp)
type Binding = (Id, Exp)
type App = [Exp]
type CallGraph = [(Id, [Id])]
type Content = Text
type ExternalUserName = Text
type Event = Object
type FlShortcut = CUInt
type FlColor = CUInt
type FlFont = CInt
type FlAlign = CUInt
type RGB = (Word8, Word8, Word8)
type LineDelta = Maybe Int
type Delta = Maybe Int
type FlIntPtr = CLong
type FlUIntPtr = CULong
type ID = Ptr ()
type Base = CBase ()
type GlobalCallback = IO ()
type CallbackWithUserDataPrim = Ptr () -> Ptr () -> IO ()
type CallbackPrim = Ptr () -> IO ()
type ColorAverageCallbackPrim = Ptr () -> CUInt -> CFloat -> IO ()
type ImageDrawCallbackPrim = Ptr () -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()
type ImageCopyCallbackPrim = Ptr () -> CInt -> CInt -> IO (Ptr ())
type GlobalEventHandlerPrim = CInt -> IO CInt
type GlobalEventHandlerF = Event -> IO Int
type DrawCallback = String -> Position -> IO ()
type DrawCallbackPrim = CString -> CInt -> CInt -> CInt -> IO ()
type TextBufferCallback = FunPtr (Ptr () -> IO ())
type FileChooserCallback = FunPtr (Ptr () -> Ptr () -> IO ())
type SharedImageHandler = FunPtr (CString -> CUChar -> CInt -> Ptr ())
type BoxDrawF = Rectangle -> Color -> IO ()
type BoxDrawFPrim = CInt -> CInt -> CInt -> CInt -> FlColor -> IO ()
type TextModifyCb = Int -> Int -> Int -> Int -> String -> IO ()
type TextModifyCbPrim = CInt -> CInt -> CInt -> CInt -> Ptr CChar -> Ptr () -> IO ()
type TextPredeleteCb = BufferOffset -> Int -> IO ()
type TextPredeleteCbPrim = CInt -> CInt -> Ptr () -> IO ()
type UnfinishedStyleCb = BufferOffset -> IO ()
type UnfinishedStyleCbPrim = CInt -> Ptr () -> IO ()
type Region = CRegion Base
type GlContext = CGlContext Base
type Widget = CWidget Base
type Group = CGroup Widget
type Window = CWindow Group
type SingleWindow = CSingleWindow Window
type DoubleWindow = CDoubleWindow Window
type OverlayWindow = COverlayWindow DoubleWindow
type Button = CButton Widget
type LightButton = CLightButton Button
type RadioLightButton = CRadioLightButton LightButton
type CheckButton = CCheckButton Button
type ReturnButton = CReturnButton Button
type RoundButton = CRoundButton Button
type RepeatButton = CRepeatButton Button
type ToggleButton = CToggleButton Button
type Valuator = CValuator Widget
type Slider = CSlider Valuator
type FillSlider = CFillSlider Slider
type HorSlider = CHorSlider Slider
type HorFillSlider = CHorFillSlider Slider
type NiceSlider = CNiceSlider Slider
type HorNiceSlider = CHorNiceSlider Slider
type MenuItem = CMenuItem Base
type MenuPrim = CMenuPrim Widget
type SysMenuBar = CSysMenuBar MenuPrim
type Choice = CChoice MenuPrim
type MenuButton = CMenuButton MenuPrim
type Image = CImage Base
type Bitmap = CBitmap Image
type Pixmap = CPixmap Image
type CopySurface = CCopySurface Base
type ImageSurface = CImageSurface Base
type Adjuster = CAdjuster Valuator
type Dial = CDial Valuator
type FillDial = CFillDial Dial
type LineDial = CLineDial Dial
type Roller = CRoller Valuator
type Counter = CCounter Valuator
type SimpleCounter = CSimpleCounter Counter
type Scrollbar = CScrollbar Slider
type ValueSlider = CValueSlider Slider
type HorValueSlider = CHorValueSlider ValueSlider
type Input = CInput Widget
type ValueInput = CValueInput Valuator
type ValueOutput = CValueOutput Valuator
type Timer = CTimer Widget
type HiddenTimer = CHiddenTimer Widget
type ValueTimer = CValueTimer Widget
type Progress = CProgress Widget
type Positioner = CPositioner Widget
type Wizard = CWizard Widget
type Table = CTable Group
type TableRow = CTableRow Table
type GlWindow = CGlWindow Window
type Box = CBox Widget
type Browser = CBrowser Group
type SelectBrowser = CSelectBrowser Browser
type IntInput = CIntInput Input
type Clock = CClock Widget
type TreePrefs = CTreePrefs Base
type TreeItem = CTreeItem Base
type Tree = CTree Group
type TextSelection = CTextSelection Base
type TextBuffer = CTextBuffer Base
type TextDisplay = CTextDisplay Group
type TextEditor = CTextEditor TextDisplay
type NativeFileChooser = CNativeFileChooser Base
type ColorAverageCallback = Ref Image -> Color -> Float -> IO ()
type ImageDrawCallback = Ref Image -> Position -> Size -> Maybe X -> Maybe Y -> IO ()
type ImageCopyCallback = Ref Image -> Size -> IO (Ref Image)
type KeyFuncPrim = CInt -> Ptr () -> IO ()
type Strategy a r = Maybe a -> (r, Decision a)
type StrategyM m a r = Maybe a -> m (r, Decision a)
type Handler a b = forall x. (b -> Constant (Endo x) b) -> a -> Constant (Endo x) a
type HandlerM m a b = forall x. (b -> Constant (EndoM m x) b) -> a -> Constant (EndoM m x) a
type HistogramDU = Histogram BinDU Double
type Name = String
type Clause = [Formula]
type Dpi = Int
type Co w = CoT w Identity
type DensityAsk p = DensityAskT p Identity
type PID = Int
type Edge = (PID, PID)
type GettableVar = IO
type Parse m a = (TokenParsing m, MonadState GrammarEnv (Unlined m), MonadState GrammarEnv m, MonadPlus m) => m a
type Stately m a = (TokenParsing m, MonadState GrammarEnv m, MonadPlus m) => m a
type Env = [(String, Either String File)]
type Formlet xml m a = Maybe a -> Form xml m a
type XHtmlForm m a = Form Html m a
type XHtmlFormlet m a = Formlet Html m a
type XHtmlForm m a = Form Html m a
type XHtmlFormlet m a = Formlet Html m a
type Html5Form m a = Form Html m a
type Html5Formlet m a = Formlet Html m a
type BitVector = Vector Integer
type MemSize = Int
type Adr = Int
type ProcId = String
type PortId = String
type SysId = String
type Precoding = [IntSet]
type FayTutorialToken = TutorialConcurrentToken
type Returns' a = Returns (CanFail a)
type MonadFail m = MonadIO m
type ServerM r = ReaderT (ServerState, r) (LoggingT IO)
type Server = ServerM ProjectId
type FieldName = String
type Fields = Map FieldName WrapperType
type Validators = Map FieldName [WrapperType -> Maybe String]
type Class = String
type URL = String
type Label = String
type FormValue = WrapperType
type Router = [String] -> StateT Vars (ReaderT Config IO) Data
type CanDelete r rs = (RElem r rs (RIndex r rs), RDelete r rs ⊆ rs)
type AllCols c ts = LAll c (UnColumn ts)
type Field = CoRec Identity
type Handlers ts b = Rec (Handler b) ts
type Columns = ColumnUniverse CommonColumns
type ColumnUniverse = CoRec ColInfo
type CommonColumns = '[Bool, Int, Double, Text]
type Record = Rec Identity
type FrameRec rs = Frame (Record rs)
type VectorMFor a = Mutable (VectorFor a)
type ElemOf ts r = RElem r ts (RIndex r ts)
type Separator = Text
type QuoteChar = Char
type Iter = IterT Identity
type Free f = FreeT f Identity
type F f = FT f Identity
type Cofree f = CofreeT f Identity
type Coiter = CoiterT Identity
type Ap f = ApT f Identity
type Alt f = ApT f []
type (:~>) f g = forall b. f b -> g b
type (:~>) f g = forall b. f b -> g b
type Coproduct c m n = Free c (Either m n)
type InitialObject c = Free c Void
type Product c m n = Cofree c (m, n)
type TerminalObject c = Cofree c ()
type Vec2 = V2 Double
type BoundingBox2 = Box V2 Double
type Texture = (TextureObject, Double, Double)
type Frame = F UI
type Game = IterT Frame
type TextT = FreeT TextF
type Game = IterT Frame
type BoundingBox2 = Box V2 Double
type Frame = F UI
type Vec2 = V2 Double
type FreeHttp client m a = FT (HttpF client) m a
type FreeHttp client m a = FT (HttpF client) m a
type Program instr = ProgramT instr Identity
type ProgramView instr = ProgramViewT instr Identity
type Theorem = Formula
type Parsed a = Writer [Doc] a
type Checked a = Writer [Doc] a
type DepthCallback = Ptr DeviceStruct -> Ptr Word16 -> Word32 -> IO ()
type VideoCallback = Ptr DeviceStruct -> Ptr Word8 -> Word32 -> IO ()
type Tag = String
type FT_Renderer = Ptr FT_RendererRec_
type FT_Module = Ptr FT_ModuleRec_
type FT_SubGlyph = Ptr FT_SubGlyphRec_
type FT_Generic_Finalizer = FunPtr (Ptr () -> IO ())
type FT_Driver = Ptr FT_DriverRec_
type FT_Face = Ptr FT_FaceRec_
type FT_Memory = Ptr FT_MemoryRec
type FT_Stream = Ptr FT_StreamRec_
type FT_StreamDesc = CLong
type FT_Stream_IoFunc = FunPtr (FT_Stream -> CULong -> Ptr CUChar -> CULong -> IO CULong)
type FT_Stream_CloseFunc = FunPtr (FT_Stream -> IO ())
type FT_Library = Ptr FT_LibraryRec_
type FT_Byte = CUChar
type FT_Bytes = Ptr FT_Byte
type FT_Char = CChar
type FT_Int = CInt
type FT_UInt = CUInt
type FT_Int16 = CShort
type FT_UInt16 = CUShort
type FT_Int32 = Int32
type FT_UInt32 = Word32
type FT_Short = CShort
type FT_UShort = CUShort
type FT_Long = CLong
type FT_ULong = CULong
type FT_Bool = CUChar
type FT_Offset = Word32
type FT_Error = CInt
type FT_F26Dot6 = CLong
type FT_Fixed = CLong
type FT_Pos = CLong
type FT_Pointer = Ptr ()
type FT_Glyph = Ptr FT_GlyphRec_
type FT_Size_Request = Ptr FT_Size_RequestRec
type FT_CharMap = Ptr FT_CharMapRec
type FT_Outline_MoveToFunc = FunPtr (Ptr FT_Vector -> Ptr () -> IO CInt)
type FT_Outline_LineToFunc = FunPtr (Ptr FT_Vector -> Ptr () -> IO CInt)
type FT_Outline_ConicToFunc = FunPtr (Ptr FT_Vector -> Ptr FT_Vector -> Ptr () -> IO CInt)
type FT_Outline_CubicToFunc = FunPtr (Ptr FT_Vector -> Ptr FT_Vector -> Ptr FT_Vector -> Ptr () -> IO CInt)
type FT_SpanFunc = FunPtr (CInt -> CInt -> Ptr FT_Span -> Ptr () -> IO ())
type FT_Raster_BitTest_Func = FunPtr (CInt -> CInt -> Ptr () -> IO CInt)
type FT_Raster_BitSet_Func = FunPtr (CInt -> CInt -> Ptr () -> IO ())
type FT_GlyphSlot = Ptr FT_GlyphSlotRec_
type FT_Size = Ptr FT_SizeRec_
type FT_Face = Ptr FT_FaceRec_
type ConflictTable = Map String String
type DIM0 = Z
type DIM1 = DIM0 :. Int
type DIM2 = DIM1 :. Int
type DIM3 = DIM2 :. Int
type DIM4 = DIM3 :. Int
type DIM5 = DIM4 :. Int
type DIM6 = DIM5 :. Int
type DIM7 = DIM6 :. Int
type DIM8 = DIM7 :. Int
type DIM9 = DIM8 :. Int
type Point = DIM2
type Size = DIM2
type ImageChannel i = PixelChannel (ImagePixel i)
type Grey = Manifest GreyPixel
type GreyDelayed = Delayed GreyPixel
type HSV = Manifest HSVPixel
type HSVDelayed = Delayed HSVPixel
type RGBA = Manifest RGBAPixel
type RGBADelayed = Delayed RGBAPixel
type RGB = Manifest RGBPixel
type RGBDelayed = Delayed RGBPixel
type BoxFilter src init acc res = Filter src (Kernel src init acc) init (FilterFold acc) acc res
type BoxFilter1 src init res = Filter src (Kernel src init src) init FilterFold1 src res
type SeparableFilter src init acc res = Filter src (SeparableKernel src init acc) init (FilterFold acc) acc res
type SeparableFilter1 src init res = Filter src (SeparableKernel src init src) init FilterFold1 src res
type Morphological pix = SeparableFilter1 pix () pix
type Blur src acc res = SeparableFilter src () acc res
type Derivative src res = SeparableFilter src () res res
type Mean src acc res = SeparableFilter src () acc res
type AdaptiveThreshold src acc res = SeparableFilter src () acc res
type Action a = State DAGState a
type Byte = Word8
type Word = Word16
type Command = (Bit, Bit, Bit, Bit, Bit, Word)
type GEvent = Event
type Time = Float
type ReadFsmMonad = Either FsmError
type State = Int
type EventChannel = Chan Event
type Action = Event -> IO ()
type ActionPredicate = Event -> Bool
type StopListening = IO ()
type StateTy = Int
type FirstState = Int
type LastState = Int
type InitialStates = [StateTy]
type FinalStates = [StateTy]
type Transitions a = [(a, StateTy)]
type TransitionTable a = [(StateTy, Transitions a)]
type Sigma a = [a]
type StateTy = Int
type FinalStates = [StateTy]
type FirstState = Int
type LastState = Int
type Sigma a = [a]
type Relation a = (Upper a, Lower a)
type Upper a = Symbol a
type Lower a = Symbol a
type TTransitions a = [(Relation a, StateTy)]
type TTransitionTable a = [(StateTy, [(Relation a, StateTy)])]
type InitialStates = [StateTy]
type Glyph = Ptr GlyphOpaque
type Font = Ptr FontOpaque
type Layout = Ptr LayoutOpaque
type FTPResult = (Int, [String])
type (:^) = T
type (:^) = T
type Term = Text
type Unit = Const ()
type PreScanO f a = (f a, a)
type SufScanO f a = (a, f a)
type Loc f a = (Der f a, a)
type Context f = [Der f (Fix f)]
type Zipper f = (Context f, Fix f)
type Context t = [Der (PF t) t]
type Zipper t = (Context t, t)
type (:->:) k v = Trie k v
type (:->:) k v = Trie k v
type KeyBinder = Key -> KeyEvent -> Maybe InputHandler -> IO ()
type InputHandler = Modifiers -> Position -> IO ()
type StillDownHandler = IO ()
type WindowConfig = ((Int, Int), (Int, Int), String)
type Point2D = (GLdouble, GLdouble)
type ColorList3 = [(GLubyte, GLubyte, GLubyte)]
type AwbfBitmap = (GLsizei, GLsizei, PixelData GLubyte)
type InvList = Maybe [(Int, Int, Int)]
type FilePictureList = [(FilePath, InvList)]
type Text = (String, BitmapFont, Point2D, GLclampf, GLclampf, GLclampf)
type Tile t = (Int, Bool, Float, t)
type TileMatrix t = [[(Tile t)]]
type InputBinding t s u v = (Key, KeyEvent, InputHandler t s u v)
type InputHandler t s u v = Modifiers -> Position -> IOGame t s u v ()
type Clause = [Lit]
type IAssignment = UArray Var Int
type MAssignment s = STUArray s Var Int
type Level = Int
type LevelArray s = STUArray s Var Level
type FrozenLevelArray = UArray Var Level
type WatchedPair s = (STRef s (Lit, Lit), Clause, ClauseId)
type WatchArray s = STArray s Lit [WatchedPair s]
type ReasonMap = Map Var (Clause, ClauseId)
type ClauseId = Int
type CircuitHash = Int
type BEnv v = Map v Bool
type UnsatisfiableCore = [Clause]
type PromiseResult a = Either SomeException a
type Future' = Future [String]
type TimesToPlay = Double
type FuzzyCountMap k = Map (FuzzyTiming k) TimesToPlay
type TimingBuckets k = SlicedTime (FuzzyCountMap k)
type Time = String
type Equal xs ys = And (IsSubset xs ys) (IsSubset ys xs) ~ True
type Member x xs = IsMember x xs ~ True
type Reverse xs = Reverse' xs []
type Shader gs is os = STList gs -> STList is -> STList os
type Valid gs is os = (StaticList gs, StaticList is, StaticList os, StaticSTList gs, StaticSTList is, StaticSTList os)
type Member x xs = IsMember x xs ~ True
type Equal xs ys = And (IsSubset xs ys) (IsSubset ys xs) ~ True
type VertexShader g i o = Shader g i (VertexShaderOutput : o)
type ValidVertex g i o = (Valid g i o, IsMember VertexShaderOutput o ~ False)
type FragmentShader g i = Shader g i (FragmentShaderOutput : [])
type Shader gs is os = STList gs -> STList is -> STList os
type VertexShader g i o = Shader g i (VertexShaderOutput : o)
type FragmentShader g i = Shader g i (FragmentShaderOutput : [])
type CFloat = Float
type CSampler2D = ActiveTexture
type CV2 = V2
type CV3 = V3
type CV4 = V4
type CM2 = M2
type CM3 = M3
type CM4 = M4
type Uniforms = '[View2, Image, Depth, Transform2]
type Attributes = '[Position2, UV]
type Uniforms = '[View3, Transform3, Texture2]
type Attributes = '[Position3, UV, Normal3]
type Geometry2 = '[Position2, UV]
type Geometry3 = '[Position3, UV, Normal3]
type DefaultUniforms2D = Uniforms
type DefaultAttributes2D = Attributes
type DefaultUniforms3D = Uniforms
type DefaultAttributes3D = Attributes
type Geometry2 = '[Position2, UV]
type DefaultUniforms2D = Uniforms
type Geometry3 = '[Position3, UV, Normal3]
type DefaultUniforms3D = Uniforms
type ScoredEntity e s = (Maybe s, e)
type Archive e s = [ScoredEntity e s]
type DieRoll = EventM Int
type StateIORef a = StateT (IORef a) IO
type Parser = Parsec LBS ()
type Width = Word32
type Height = Word32
type X = Double
type Y = Double
type TextureIds = [(TextureName, GLuint)]
type FontIds = [(FontName, FontId)]
type Vect = Vec3 Double
type Vect4 = Vec4 Double
type Tuple3d = (Double, Double, Double)
type MousePos = Vect
type EnterWhen = StateTransition
type LeaveWhen = StateTransition
type XY = (Double, Double)
type XYZ = (Double, Double, Double)
type XYZW = (Double, Double, Double, Double)
type RGB = (Double, Double, Double)
type RGBA = (Double, Double, Double, Double)
type Matrix = Mat44 Double
type Window = (Width, Height)
type SplitFunction r = TaskBufferSTM (IO (Maybe r)) -> TaskBufferSTM (IO (Maybe r)) -> STM (IO (Maybe r))
type WriteResult r = r -> IO ()
type AddTask r = IO (Maybe r) -> IO ()
type SplitFunction r = TaskBufferSTM (IO (Maybe r)) -> TaskBufferSTM (IO (Maybe r)) -> STM (IO (Maybe r))
type SplitFunction r = TaskBufferSTM (IO (Maybe r)) -> TaskBufferSTM (IO (Maybe r)) -> STM (IO (Maybe r))
type Size = (Int, Int)
type Point = (Int, Int)
type Color = CInt
type Size = (Int, Int)
type Point = (Int, Int)
type Color = CInt
type Size = (Int, Int)
type Point = (Int, Int)
type Color = CInt
type EditScript f x y = EditScriptL f (Cons x Nil) (Cons y Nil)
type ConstructorRenamer = String -> Name -> Type -> Q Name
type Meta = Map Text Text
type Port = Int
type Rank = Int
type Count = Integer
type Property a = a -> Bool
type Counter = Rank -> Count
type Selector c a = Rank -> Count -> c a
type EnumStrat = Count -> [Count]
type Generator a = Rank -> [a]
type GenInstruct = [(Rank, Count)]
type TestSuite c k v a = c k (v a)
type MapRankSuite a = TestSuite Map Rank [] a
type Property a = a -> Bool
type Property a = a -> Bool
type Rank = Int
type Count = Integer
type MapRankSuite a = TestSuite Map Rank [] a
type TestSuite c k v a = c k (v a)
type GenInstruct = [(Rank, Count)]
type Generator a = Rank -> [a]
type Church t c = ChurchSum (ToList (StripMeta (Rep t ())) (ListTerm ())) c
type LForest v a = v (LTree v a)
type Forest v a = v (Tree v a)
type TrieRepDefault k = Compose Maybe (GTrie (Rep k))
type DatatypeName = String
type ModuleName = String
type ConstructorName = String
type FieldName = String
type Fixity = Int
type Injection (f :: k -> *) (xs :: [k]) = f -.-> K (NS f xs)
type GCode (a :: *) = ToSumCode (Rep a) []
type GFrom a = GSumFrom (Rep a)
type GTo a = GSumTo (Rep a)
type GDatatypeInfo a = GDatatypeInfo' (Rep a)
type Rep a = SOP I (Code a)
type Rep a = SOP I (Code a)
type DatatypeName = String
type ModuleName = String
type ConstructorName = String
type FieldName = String
type Fixity = Int
type Injection (f :: k -> *) (xs :: [k]) = f -.-> K (NS f xs)
type StatisticsState a = forall m. MonadState Statistics m => m a
type ErrorIO = ErrorT Text IO
type SemPols = [Int]
type Interval = (Int, Int)
type Subst = Map Text GeniVal
type CollectedVar = (Text, Maybe (FullList Text))
type Subst = Map Text GeniVal
type Flist a = [AvPair a]
type FeatStruct a = Map Text a
type Instruction = (FilePath, Maybe [Text])
type Sem = [Literal GeniVal]
type LitConstr = (Literal GeniVal, [Text])
type SemInput = (Sem, Flist GeniVal, [LitConstr])
type PathEqPair = (NodePathEqLhs, GeniVal)
type MorphInputFn = Literal GeniVal -> Maybe (Flist GeniVal)
type MorphRealiser = [Flag] -> [LemmaPlusSentence] -> [MorphOutput]
type LemmaPlusSentence = [LemmaPlus]
type Lexicon = [LexEntry]
type PolValue = (GeniVal, Int)
type Lexicon = [LexEntry]
type PolValue = (GeniVal, Int)
type Macros = [SchemaTree]
type SchemaTree = Ttree (GNode SchemaVal)
type NodeName = Text
type Tags = Map String [TagElem]
type TagDerivation = [DerivationStep]
type WordFamilyCount = Map (FullList Text, Text) Int
type SemMap = Map (Literal GeniVal) [TagElem]
type PolMap = Map PolarityKey Interval
type PolAut = NFA PolState PolTrans
type AutDebug = (PolarityKey, PolAut, PolAut)
type PolPathSet = IntSet
type TagDerivation = [DerivationStep]
type SemBitMap = Map (Literal GeniVal) BitVector
type DispatchFilter s a = a -> s (FilterStatus a)
type BuilderState s a = StateT s (State Statistics) a
type Output = (Integer, LemmaPlusSentence, TagDerivation)
type SentenceAut = NFA Int LemmaPlus
type OtRanking = [[OtConstraint]]
type GetTraces = Text -> [Text]
type OtResult x = (Int, x, [OtViolation])
type LexicalSelector sem = Macros -> Lexicon -> sem -> IO LexicalSelection
type LexCombine a = MaybeT (Writer [LexCombineError]) a
type ProgStateRef = IORef ProgState
type LexicalSelector sem = Macros -> Lexicon -> sem -> IO LexicalSelection
type Agenda = [SimpleItem]
type AuxAgenda = [SimpleItem]
type Chart = [SimpleItem]
type SimpleState a = BuilderState SimpleStatus a
type Section = (FilePath, [Result])
type OptSection = (String, [OptDescr Flag], [String])
type Fitness e = e -> Double
type Mutate m e = e -> m e
type Terminate e = EvolState e -> Bool
type Source s = Stream s Identity Char
type X = ITbl Id Unboxed Subword Int
type T = ITbl Id Unboxed ((Z :. Subword) :. Subword) Int
type Convergence = Double
type ECEF = Vec3 (Length Double)
type Vec3 a = (a, a, a)
type Matrix3 a = Vec3 (Vec3 a)
type ECEF = Vec3 (Length Double)
type PathValidity = (Length Double, Length Double)
type Latitude = Double
type Longitude = Double
type Easting = Double
type Northing = Double
type Altitude = Double
type GeoPositionWithoutCRS = [Double]
type Name = Text
type Code = Int
type Href = Text
type FormatString = Text
type ProjectionType = Text
type FeatureID = Text
type BoundingBoxWithoutCRS = [Double]
type Vector2 a = (a, a)
type LineSegment a = (a, a)
type IntersectionPair = (IntersectionPoint, IntersectionPoint)
type Options = Map String String
type Flag = (String, String)
type FlagMaker = String -> ArgDescr Flag
type FlagDescr = OptDescr Flag
type Conf = [(FlagMaker, String, Mode, String)]
type Str = [Tok]
type Prefix = String
type Language = CId
type Hypo = (BindType, CId, Type)
type Tree = Expr
type FId = Int
type LIndex = Int
type Token = String
type Lemma = CId
type Analysis = String
type BinTree a b = Map a b
type FileName = String
type InitPath = String
type FullPath = String
type IOE a = IO a
type OneOutput = (Maybe FullPath, CompiledModule)
type CompiledModule = Module
type Module = (ModuleName, ModuleInfo)
type SourceGrammar = Grammar
type SourceModInfo = ModuleInfo
type SourceModule = Module
type Type = Term
type Cat = QIdent
type Fun = QIdent
type QIdent = (ModuleName, Ident)
type MetaId = Int
type Hypo = (BindType, Ident, Term)
type Context = [Hypo]
type Equation = ([Patt], Term)
type Labelling = (Label, Type)
type Assign = (Label, (Maybe Type, Term))
type Case = (Patt, Term)
type LocalDef = (Ident, (Maybe Type, Term))
type Param = (Ident, Context)
type Altern = (Term, [(Term, Term)])
type Substitution = [(Ident, Term)]
type FId = Int
type FunId = Int
type SeqId = Int
type LIndex = Int
type Sequence = Array DotPos Symbol
type Timestamp = Word64
type ThreadId = Word32
type TaskId = Word64
type ProcessId = Word32
type MachineId = Word16
type PortId = ThreadId
type MessageSize = Word32
type Timestamp = Word64
type ThreadId = Word32
type TaskId = Word64
type ProcessId = Word32
type MachineId = Word16
type PortId = ThreadId
type MessageSize = Word32
type Closure = GenClosure Box
type HalfWord = Word32
type HeapGraphIndex = Int
type QualifiedName = String
type Symbol = String
type GHCOption = String
type Package = (PackageBaseName, PackageVersion, PackageId)
type PackageBaseName = String
type PackageVersion = String
type PackageId = String
type IncludeDir = FilePath
type GhcModLog = ()
type ModuleString = String
type Expression = String
type Symbol = String
type IOish m = (Functor m, MonadIO m, MonadBaseControl IO m, ExceptionMonad m)
type TargetId = FilePath
type LogChan = Chan LogTask
type WorkerChan = Chan WorkerTask
type ControlChan = Chan ControlMessage
type LineNumber = Int
type ColumnNumber = Int
type ErrMsg = String
type StgModule = CompiledModule [StgBinding]
type PkgKey = PackageId
type StgModule = CompiledModule [StgBinding]
type PkgKey = PackageId
type CoreSOP = SOP TyVar Type
type TyUnify v c n = [UnifyItem v c n]
type CoreUnify = TyUnify TyVar Type Ct
type Point = (Double, Double)
type GType = CULong
type IsDOMAttr o = DOMAttrClass o
type IsBlob o = BlobClass o
type IsCDATASection o = CDATASectionClass o
type IsCSSRule o = CSSRuleClass o
type IsCSSRuleList o = CSSRuleListClass o
type IsCSSStyleDeclaration o = CSSStyleDeclarationClass o
type IsCSSStyleSheet o = CSSStyleSheetClass o
type IsCSSValue o = CSSValueClass o
type IsCharacterData o = CharacterDataClass o
type IsComment o = CommentClass o
type IsConsole o = ConsoleClass o
type IsDOMApplicationCache o = DOMApplicationCacheClass o
type IsDOMImplementation o = DOMImplementationClass o
type IsDOMMimeType o = DOMMimeTypeClass o
type IsDOMMimeTypeArray o = DOMMimeTypeArrayClass o
type IsDOMPlugin o = DOMPluginClass o
type IsDOMPluginArray o = DOMPluginArrayClass o
type IsDOMSelection o = DOMSelectionClass o
type IsDOMSettableTokenList o = DOMSettableTokenListClass o
type IsDOMStringList o = DOMStringListClass o
type IsDOMTokenList o = DOMTokenListClass o
type IsDOMWindow o = DOMWindowClass o
type IsDocument o = DocumentClass o
type IsDocumentFragment o = DocumentFragmentClass o
type IsDocumentType o = DocumentTypeClass o
type IsElement o = ElementClass o
type IsEntityReference o = EntityReferenceClass o
type IsEvent o = EventClass o
type IsEventTarget o = EventTargetClass o
type IsFile o = FileClass o
type IsFileList o = FileListClass o
type IsGeolocation o = GeolocationClass o
type IsHTMLAnchorElement o = HTMLAnchorElementClass o
type IsHTMLAppletElement o = HTMLAppletElementClass o
type IsHTMLAreaElement o = HTMLAreaElementClass o
type IsHTMLAudioElement o = HTMLAudioElementClass o
type IsHTMLBRElement o = HTMLBRElementClass o
type IsHTMLBaseElement o = HTMLBaseElementClass o
type IsHTMLBaseFontElement o = HTMLBaseFontElementClass o
type IsHTMLBodyElement o = HTMLBodyElementClass o
type IsHTMLButtonElement o = HTMLButtonElementClass o
type IsHTMLCanvasElement o = HTMLCanvasElementClass o
type IsHTMLCollection o = HTMLCollectionClass o
type IsHTMLDListElement o = HTMLDListElementClass o
type IsHTMLDetailsElement o = HTMLDetailsElementClass o
type IsHTMLDirectoryElement o = HTMLDirectoryElementClass o
type IsHTMLDivElement o = HTMLDivElementClass o
type IsHTMLDocument o = HTMLDocumentClass o
type IsHTMLElement o = HTMLElementClass o
type IsHTMLEmbedElement o = HTMLEmbedElementClass o
type IsHTMLFieldSetElement o = HTMLFieldSetElementClass o
type IsHTMLFontElement o = HTMLFontElementClass o
type IsHTMLFormElement o = HTMLFormElementClass o
type IsHTMLFrameElement o = HTMLFrameElementClass o
type IsHTMLFrameSetElement o = HTMLFrameSetElementClass o
type IsHTMLHRElement o = HTMLHRElementClass o
type IsHTMLHeadElement o = HTMLHeadElementClass o
type IsHTMLHeadingElement o = HTMLHeadingElementClass o
type IsHTMLHtmlElement o = HTMLHtmlElementClass o
type IsHTMLIFrameElement o = HTMLIFrameElementClass o
type IsHTMLImageElement o = HTMLImageElementClass o
type IsHTMLInputElement o = HTMLInputElementClass o
type IsHTMLKeygenElement o = HTMLKeygenElementClass o
type IsHTMLLIElement o = HTMLLIElementClass o
type IsHTMLLabelElement o = HTMLLabelElementClass o
type IsHTMLLegendElement o = HTMLLegendElementClass o
type IsHTMLLinkElement o = HTMLLinkElementClass o
type IsHTMLMapElement o = HTMLMapElementClass o
type IsHTMLMarqueeElement o = HTMLMarqueeElementClass o
type IsHTMLMediaElement o = HTMLMediaElementClass o
type IsHTMLMenuElement o = HTMLMenuElementClass o
type IsHTMLMetaElement o = HTMLMetaElementClass o
type IsHTMLModElement o = HTMLModElementClass o
type IsHTMLOListElement o = HTMLOListElementClass o
type IsHTMLObjectElement o = HTMLObjectElementClass o
type IsHTMLOptGroupElement o = HTMLOptGroupElementClass o
type IsHTMLOptionElement o = HTMLOptionElementClass o
type IsHTMLOptionsCollection o = HTMLOptionsCollectionClass o
type IsHTMLParagraphElement o = HTMLParagraphElementClass o
type IsHTMLParamElement o = HTMLParamElementClass o
type IsHTMLPreElement o = HTMLPreElementClass o
type IsHTMLQuoteElement o = HTMLQuoteElementClass o
type IsHTMLScriptElement o = HTMLScriptElementClass o
type IsHTMLSelectElement o = HTMLSelectElementClass o
type IsHTMLStyleElement o = HTMLStyleElementClass o
type IsHTMLTableCaptionElement o = HTMLTableCaptionElementClass o
type IsHTMLTableCellElement o = HTMLTableCellElementClass o
type IsHTMLTableColElement o = HTMLTableColElementClass o
type IsHTMLTableElement o = HTMLTableElementClass o
type IsHTMLTableRowElement o = HTMLTableRowElementClass o
type IsHTMLTableSectionElement o = HTMLTableSectionElementClass o
type IsHTMLTextAreaElement o = HTMLTextAreaElementClass o
type IsHTMLTitleElement o = HTMLTitleElementClass o
type IsHTMLUListElement o = HTMLUListElementClass o
type IsHTMLVideoElement o = HTMLVideoElementClass o
type IsHistory o = HistoryClass o
type IsLocation o = LocationClass o
type IsMediaError o = MediaErrorClass o
type IsMediaList o = MediaListClass o
type IsMediaQueryList o = MediaQueryListClass o
type IsMessagePort o = MessagePortClass o
type IsMouseEvent o = MouseEventClass o
type IsNamedNodeMap o = NamedNodeMapClass o
type IsNavigator o = NavigatorClass o
type IsNode o = NodeClass o
type IsNodeFilter o = NodeFilterClass o
type IsNodeIterator o = NodeIteratorClass o
type IsNodeList o = NodeListClass o
type IsProcessingInstruction o = ProcessingInstructionClass o
type IsDOMRange o = DOMRangeClass o
type IsDOMScreen o = DOMScreenClass o
type IsStorage o = StorageClass o
type IsStyleMedia o = StyleMediaClass o
type IsStyleSheet o = StyleSheetClass o
type IsStyleSheetList o = StyleSheetListClass o
type IsText o = TextClass o
type IsTimeRanges o = TimeRangesClass o
type IsTreeWalker o = TreeWalkerClass o
type IsUIEvent o = UIEventClass o
type IsValidityState o = ValidityStateClass o
type IsWebKitNamedFlow o = WebKitNamedFlowClass o
type IsWebKitPoint o = WebKitPointClass o
type IsXPathExpression o = XPathExpressionClass o
type IsXPathNSResolver o = XPathNSResolverClass o
type IsXPathResult o = XPathResultClass o
type Signal target callback = target -> callback -> IO (IO ())
type EventM e t a = ReaderT (t, e) IO a
type Socket = JSRef Socket_
type Observing a = a -> a
type CDSSet = [CDS]
type Giml = [GimlNode]
type GimlNode = (String, GimlType, GimlVal)
type SimpleGiml = [(String, GimlVal)]
type AsyncReadyCallback = GObject -> AsyncResult -> IO ()
type FileProgressCallback = Offset -> Offset -> IO ()
type FileReadMoreCallback = ByteString -> IO Bool
type Offset = CLong
type LeafEntry p a = (a, p a)
type NodeEntry p a = (GiST p a, p a)
type Penalty = Int
type Size = Int
type Blob = ByteString
type GitDir = FilePath
type GitPath = FilePath
type Range = String
type Line = ByteString
type Hash = ByteString
type RepoOwner = String
type RepoName = String
type RepoWebhookId = Int
type Url = ByteString
type HashValue = ByteString
type DateString = ByteString
type SessionKey = Integer
type ContentTransformer = StateT Context GititServerPart
type PluginM = ReaderT PluginData (StateT Context IO)
type GititServerPart = ServerPartT (ReaderT WikiState IO)
type Handler = GititServerPart Response
type PluginM = ReaderT PluginData (StateT Context IO)
type RawFilePath = ByteString
type RefName = Text
type CommitAuthor = Text
type CommitEmail = Text
type CommitMessage = Text
type TreeFilePath = RawFilePath
type BlobOid r = Tagged r (Oid r)
type TreeOid r = Tagged (Tree r) (Oid r)
type CommitOid r = Tagged (Commit r) (Oid r)
type TagOid r = Tagged (Tag r) (Oid r)
type ByteSource m = Source m ByteString
type EntryHashMap r = HashMap TreeFilePath (TreeEntry r)
type FileTree m = HashMap TreeFilePath (FileEntry m)
type MonadCli m = (Applicative m, MonadThrow m, MonadIO m)
type BlobOid = BlobOid LgRepo
type TreeOid = TreeOid LgRepo
type CommitOid = CommitOid LgRepo
type Tree = Tree LgRepo
type TreeEntry = TreeEntry LgRepo
type Commit = Commit LgRepo
type Tag = Tag LgRepo
type Object = Object LgRepo
type ObjectOid = ObjectOid LgRepo
type RefTarget = RefTarget LgRepo
type TreeBuilder = TreeBuilder LgRepo
type Options = Options LgRepo
type MonadExcept m = (MonadThrow m, MonadCatch m, MonadMask m)
type MonadLg m = (Applicative m, MonadExcept m, MonadIO m, MonadBaseControl IO m, MonadLogger m)
type F'git_odb_backend_read_callback = Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt
type F'git_odb_backend_read_prefix_callback = Ptr C'git_oid -> Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> CSize -> IO CInt
type F'git_odb_backend_readstream_callback = Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt
type F'git_odb_backend_read_header_callback = Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt
type F'git_odb_backend_write_callback = Ptr C'git_oid -> Ptr C'git_odb_backend -> Ptr () -> CSize -> C'git_otype -> IO CInt
type F'git_odb_backend_writestream_callback = Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> CSize -> C'git_otype -> IO CInt
type F'git_odb_backend_exists_callback = Ptr C'git_odb_backend -> Ptr C'git_oid -> CInt -> IO CInt
type F'git_odb_backend_refresh_callback = Ptr C'git_odb_backend -> IO CInt
type F'git_odb_backend_foreach_callback = Ptr C'git_odb_backend -> C'git_odb_foreach_cb -> Ptr () -> IO CInt
type F'git_odb_backend_writepack_callback = Ptr (Ptr C'git_odb_writepack) -> Ptr C'git_odb_backend -> C'git_transfer_progress_callback -> Ptr () -> IO CInt
type F'git_odb_backend_free_callback = Ptr C'git_odb_backend -> IO ()
type F'git_odb_writepack_add_callback = Ptr C'git_odb_writepack -> Ptr () -> CSize -> Ptr C'git_transfer_progress -> IO CInt
type F'git_odb_writepack_commit_callback = Ptr C'git_odb_writepack -> Ptr C'git_transfer_progress -> IO CInt
type F'git_odb_writepack_free_callback = Ptr C'git_odb_writepack -> IO ()
type MonadLg m = (Applicative m, MonadExcept m, MonadIO m, MonadBaseControl IO m, MonadLogger m)
type BlobOid = BlobOid LgRepo
type Commit = Commit LgRepo
type CommitOid = CommitOid LgRepo
type Tree = Tree LgRepo
type TreeOid = TreeOid LgRepo
type TransactionWriter = WriterT [IO ()]
type Prec = Rational
type Version = (Int, Int, Int)
type WindowCloseCallback = IO Bool
type WindowSizeCallback = Size -> IO ()
type WindowRefreshCallback = IO ()
type KeyCallback = Key -> KeyButtonState -> IO ()
type CharCallback = Char -> KeyButtonState -> IO ()
type MouseButtonCallback = MouseButton -> KeyButtonState -> IO ()
type MousePosCallback = Position -> IO ()
type MouseWheelCallback = Int -> IO ()
type ErrorCallback = Error -> String -> IO ()
type MonitorCallback = Monitor -> MonitorState -> IO ()
type WindowPosCallback = Window -> Int -> Int -> IO ()
type WindowSizeCallback = Window -> Int -> Int -> IO ()
type WindowCloseCallback = Window -> IO ()
type WindowRefreshCallback = Window -> IO ()
type WindowFocusCallback = Window -> FocusState -> IO ()
type WindowIconifyCallback = Window -> IconifyState -> IO ()
type FramebufferSizeCallback = Window -> Int -> Int -> IO ()
type KeyCallback = Window -> Key -> Int -> KeyState -> ModifierKeys -> IO ()
type CharCallback = Window -> Char -> IO ()
type MouseButtonCallback = Window -> MouseButton -> MouseButtonState -> ModifierKeys -> IO ()
type CursorPosCallback = Window -> Double -> Double -> IO ()
type CursorEnterCallback = Window -> CursorState -> IO ()
type ScrollCallback = Window -> Double -> Double -> IO ()
type Version = (Int, Int, Int)
type WindowCloseCallback = IO ()
type WindowSizeCallback = Size -> IO ()
type WindowRefreshCallback = IO ()
type KeyCallback = Key -> KeyButtonState -> IO ()
type CharCallback = Char -> KeyButtonState -> IO ()
type MouseButtonCallback = MouseButton -> KeyButtonState -> IO ()
type MousePosCallback = Position -> IO ()
type MouseWheelCallback = Int -> IO ()
type LoopFunc = IO ()
type Attr o a = ReadWriteAttr o a a
type ReadAttr o a = ReadWriteAttr o a ()
type WriteAttr o b = ReadWriteAttr o () b
type GString = Ptr (())
type GList = Ptr (())
type GSList = Ptr (())
type GType = CULong
type DefaultGlibString = Text
type DestroyNotify = FunPtr (((Ptr ()) -> (IO ())))
type Quark = CUInt
type SignalName = String
type ConnectAfter = Bool
type HandlerId = CUInt
type Priority = Int
type GErrorDomain = GQuark
type GErrorCode = Int
type GErrorMessage = Text
type GTimeValPart = CLong
type GDateJulianDay = CUInt
type MemoRef a = IORef (MemoTable a)
type MemoTable a = IntMap (IntMap a)
type Parser a = (Visit1, Visit2, Visit3 a)
type Parser a = (Visit1, Visit2, Visit3 a)
type MemoRef a = IORef (MemoTable a)
type MemoTable a = IntMap (IntMap a)
type UN u = Tagged (Cnt u) Name
type UT c = Tagged (Cnt c) TypeQ
type Cnt c = c ()
type UV = ExpQ
type QSemQuantity = Int
type CFlt = Double
type Texture tag mat = Ray -> Rayint tag mat -> mat
type SI = SolidItem () (Material ())
type Flt = Double
type Point = (Float, Float)
type Vector = Point
type Path = [Point]
type Point = (Float, Float)
type Path = [Point]
type Vector = Point
type CommandConfig = [(Command, [(Key, Maybe Modifiers)])]
type Point = XY Float
type Color = RGB Float
type Color = RGBA Float
type Coord = (Int, Int)
type InputEvent = Event
type Size = (Float, Float)
type Rect = (Point, Size)
type Point = (Float, Float)
type Render = forall a b. (Arrays a, Arrays b) => (Acc a -> Acc b) -> a -> b
type Render = forall a b. (Arrays a, Arrays b) => (Acc a -> Acc b) -> a -> b
type Render = forall a b. (Arrays a, Arrays b) => (Acc a -> Acc b) -> a -> b
type Point = (Float, Float)
type Vector = Point
type Path = [Point]
type InputEvent = Event
type VSupply = VSupplyT Identity
type Poly = []
type GroupRing r g = Map g r
type LinFunc = Map
type VarTypes v = Map v VarKind
type ObjectiveFunc = LinFunc
type VarBounds v c = Map v (Bounds c)
type LPM v c = LPT v c Identity
type LPT v c = StateT (LP v c)
type BasicService m a b = a -> m b
type MultiGetService m a b = BasicService m (MultiGetRequest a) (MultiGetResponse a b)
type MultiGetRequest a = HashSet a
type MultiGetResponse a b = HashMap a b
type ResultVar a = MVar (Either SomeException a)
type TessBeginCallback = GLenum -> IO ()
type TessEdgeFlagCallback = GLboolean -> IO ()
type TessVertexCallback v = Ptr v -> IO ()
type TessEndCallback = IO ()
type TessErrorCallback = GLenum -> IO ()
type TessCombineCallback v = Ptr GLdouble -> Ptr (Ptr v) -> Ptr GLfloat -> Ptr (Ptr v) -> IO ()
type TessBeginDataCallback p = GLenum -> Ptr p -> IO ()
type TessEdgeFlagDataCallback p = GLboolean -> Ptr p -> IO ()
type TessVertexDataCallback v p = Ptr v -> Ptr p -> IO ()
type TessEndDataCallback p = Ptr p -> IO ()
type TessErrorDataCallback p = GLenum -> Ptr p -> IO ()
type TessCombineDataCallback v p = Ptr GLdouble -> Ptr (Ptr v) -> Ptr GLfloat -> Ptr (Ptr v) -> Ptr p -> IO ()
type QuadricCallback = GLenum -> IO ()
type NURBSBeginCallback = GLenum -> IO ()
type NURBSVertexCallback = Ptr GLfloat -> IO ()
type NURBSNormalCallback = Ptr GLfloat -> IO ()
type NURBSColorCallback = Ptr GLfloat -> IO ()
type NURBSTexCoordCallback = Ptr GLfloat -> IO ()
type NURBSEndCallback = IO ()
type NURBSErrorCallback = GLenum -> IO ()
type NURBSBeginDataCallback u = GLenum -> Ptr u -> IO ()
type NURBSVertexDataCallback u = Ptr GLfloat -> Ptr u -> IO ()
type NURBSNormalDataCallback u = Ptr GLfloat -> Ptr u -> IO ()
type NURBSColorDataCallback u = Ptr GLfloat -> Ptr u -> IO ()
type NURBSTexCoordDataCallback u = Ptr GLfloat -> Ptr u -> IO ()
type NURBSEndDataCallback u = Ptr u -> IO ()
type BitsPerPlane = Int
type RefreshRate = Int
type Sides = GLint
type Rings = GLint
type NumLevels = GLint
type BufferDepth = Int
type SampleCount = Int
type ButtonCount = Int
type DialCount = Int
type AxisCount = Int
type PollRate = Int
type MenuCallback = IO ()
type DisplayCallback = IO ()
type ReshapeCallback = Size -> IO ()
type PositionCallback = Position -> IO ()
type VisibilityCallback = Visibility -> IO ()
type WindowStateCallback = WindowState -> IO ()
type CloseCallback = IO ()
type InitContextCallback = IO ()
type AppStatusCallback = AppStatus -> IO ()
type KeyboardCallback = Char -> Position -> IO ()
type SpecialCallback = SpecialKey -> Position -> IO ()
type MouseCallback = MouseButton -> KeyState -> Position -> IO ()
type KeyboardMouseCallback = Key -> KeyState -> Modifiers -> Position -> IO ()
type WheelNumber = Int
type WheelDirection = Int
type MouseWheelCallback = WheelNumber -> WheelDirection -> Position -> IO ()
type MotionCallback = Position -> IO ()
type CrossingCallback = Crossing -> IO ()
type SpaceballMotion = Int
type SpaceballRotation = Int
type ButtonIndex = Int
type SpaceballCallback = SpaceballInput -> IO ()
type DialIndex = Int
type DialAndButtonBoxCallback = DialAndButtonBoxInput -> IO ()
type TabletCallback = TabletInput -> TabletPosition -> IO ()
type JoystickCallback = JoystickButtons -> JoystickPosition -> IO ()
type TouchID = Int
type MultiMouseCallback = TouchID -> MouseCallback
type MultiCrossingCallback = TouchID -> CrossingCallback
type MultiMotionCallback = TouchID -> MotionCallback
type MenuStatusCallback = MenuUsage -> Position -> IO ()
type IdleCallback = IO ()
type Timeout = Int
type TimerCallback = IO ()
type VAO = VertexArrayObject
type OList k = SList (ImaginaryOrdMap k) k
type Choice3Map mapa mapb mapc a b c = InjectKeys (InjectChoice3 a b c) (Choice3 a b c) (Choice2 a (Choice2 b c)) (Choice2Map mapa (Choice2Map mapb mapc b c) a (Choice2 b c))
type Choice4Map mapa mapb mapc mapd a b c d = InjectKeys (InjectChoice4 a b c d) (Choice4 a b c d) (Choice2 (Choice2 a b) (Choice2 c d)) (Choice2Map (Choice2Map mapa mapb a b) (Choice2Map mapc mapd c d) (Choice2 a b) (Choice2 c d))
type Choice5Map mapa mapb mapc mapd mape a b c d e = InjectKeys (InjectChoice5 a b c d e) (Choice5 a b c d e) (Choice2 (Choice2 a b) (Choice2 c (Choice2 d e))) (Choice2Map (Choice2Map mapa mapb a b) (Choice2Map mapc (Choice2Map mapd mape d e) c (Choice2 d e)) (Choice2 a b) (Choice2 c (Choice2 d e)))
type EitherMap mapL mapR l r = InjectKeys (InjectEither l r) (Either l r) (Choice2 l r) (Choice2Map mapL mapR l r)
type MaybeMap map k = InjectKeys (InjectMaybe k) (Maybe k) (Choice2 k ()) (Choice2Map map UnitMap k ())
type EnumMap k = InjectKeys (InjectEnum k) k Int IntMap
type Tuple3Map mapa mapb mapc a b c = InjectKeys (InjectTuple3 a b c) (a, b, c) (a, (b, c)) (Tuple2Map mapa (Tuple2Map mapb mapc b c) a (b, c))
type Tuple4Map mapa mapb mapc mapd a b c d = InjectKeys (InjectTuple4 a b c d) (a, b, c, d) (a, (b, (c, d))) (Tuple2Map mapa (Tuple2Map mapb (Tuple2Map mapc mapd c d) b (c, d)) a (b, (c, d)))
type Tuple5Map mapa mapb mapc mapd mape a b c d e = InjectKeys (InjectTuple5 a b c d e) (a, b, c, d, e) (a, (b, (c, (d, e)))) (Tuple2Map mapa (Tuple2Map mapb (Tuple2Map mapc (Tuple2Map mapd mape d e) c (d, e)) b (c, (d, e))) a (b, (c, (d, e))))
type Tests m1 m2 = [(Test m1 m2, String)]
type InodeNumber = Word64
type IDs = (Int, Int)
type MIMEType = String
type MonitorCallback = MonitorHandle -> TextURI -> TextURI -> MonitorEventType -> IO ()
type FileSize = Word64
type FileOffset = Word64
type TextURI = String
type VolumeID = CULong
type XferProgressCallback = XferProgressInfo -> IO Bool
type XferErrorCallback = XferProgressInfo -> IO XferErrorAction
type XferOverwriteCallback = XferProgressInfo -> IO XferOverwriteAction
type XferDuplicateCallback = XferProgressInfo -> String -> Int -> IO (Maybe String)
type DriveID = CULong
type Type = String
type Type = String
type T x y z = T (T x y z)
type T x y = T (T x y)
type Render = WriterT String (Except String)
type Coord = (Int, Int)
type RealValue = Bigfloat
type ArrowList = [(Coord, Coord)]
type LineList = [Line]
type LabelList = [(Coord, SimpleText)]
type AnyCoordListDescriptor = AnyValuedDescriptor CoordList
type GoM = GoT Identity
type ChildAddedHandler go = Int -> go ()
type ChildDeletedHandler go = Cursor -> go ()
type GameInfoChangedHandler go = GameInfo -> GameInfo -> go ()
type NavigationHandler go = Step -> go ()
type PropertiesModifiedHandler go = [Property] -> [Property] -> go ()
type VariationModeChangedHandler go = VariationMode -> VariationMode -> go ()
type StdUiCtrlImpl = UiCtrlImpl UiGoM
type ShowS = String -> String
type Dialogue = [Response] -> [Request]
type SuccCont = Dialogue
type StrCont = String -> Dialogue
type StrListCont = [String] -> Dialogue
type FailCont = IOError -> Dialogue
type Api = ReaderT (String, Manager) (ErrorT ApiError IO)
type URL = String
type Path = String
type Params = [(ByteString, Maybe ByteString)]
type DownloadSink a = ResumableSource (ResourceT IO) ByteString -> ResourceT IO a
type FileId = Text
type FileTitle = Text
type Query = Text
type UploadSource = Int -> Source (ResourceT IO) ByteString
type Author = (Text, Text)
type OAuth2Code = String
type OAuth2Scope = String
type OAuth2Token = String
type BooleanM = Free BooleanF
type Simple = BooleanM (Term Text)
type Mail = BooleanM MailOp
type Coord = (Double, Double)
type ID = Text
type Goto r = GotoT r Identity
type Depth = Float
type Stencil = Int
type Vec2 a = :. a (:. a ())
type Vec3 a = :. a (Vec2 a)
type Vec4 a = :. a (Vec3 a)
type ColorMask f = Color f Bool
type DepthFunction = ComparisonFunction
type DepthMask = Bool
type FragmentDepth = Fragment Float
type Fragment = Shader F
type VertexPosition = Vec4 (Vertex Float)
type Vertex = Shader V
type Scene = Tree (SID, Node)
type ID = String
type SID = Maybe String
type Semantic = String
type SIDPath = [String]
type Latitude = Double
type Longitude = Double
type Distance = Double
type Heading = Double
type Speed = Double
type Vector = (Distance, Heading)
type Trail a = [a]
type Circle a = (a, Distance)
type Arc a = (Circle a, Heading, Heading)
type PointGrouping c = Trail c -> [Selected (Trail c)]
type TransformGrouping c = [Selected (Trail c)] -> [Selected (Trail c)]
type RegularRule (phi :: * -> *) (r :: * -> *) t v = forall p. (ProductionRule p, EpsProductionRule p, TokenProductionRule p t) => p v
type PenaltyRegularRule (phi :: * -> *) (r :: * -> *) t v = forall p. (ProductionRule p, EpsProductionRule p, TokenProductionRule p t, PenaltyProductionRule p) => p v
type BiasedRegularRule (phi :: * -> *) (r :: * -> *) t v = forall p. (ProductionRule p, EpsProductionRule p, TokenProductionRule p t, BiasedProductionRule p) => p v
type ContextFreeRule phi r t v = forall p. (ProductionRule p, EpsProductionRule p, RecProductionRule p phi r, TokenProductionRule p t) => p v
type PenaltyContextFreeRule phi r t v = forall p. (ProductionRule p, EpsProductionRule p, RecProductionRule p phi r, TokenProductionRule p t, PenaltyProductionRule p) => p v
type BiasedContextFreeRule phi r t v = forall p. (ProductionRule p, EpsProductionRule p, RecProductionRule p phi r, TokenProductionRule p t, BiasedProductionRule p) => p v
type ExtendedContextFreeRule phi r t v = forall p. (ProductionRule p, EpsProductionRule p, RecProductionRule p phi r, TokenProductionRule p t, LoopProductionRule p phi r) => p v
type PenaltyExtendedContextFreeRule phi r t v = forall p. (ProductionRule p, EpsProductionRule p, RecProductionRule p phi r, TokenProductionRule p t, LoopProductionRule p phi r, PenaltyProductionRule p) => p v
type BiasedExtendedContextFreeRule phi r t v = forall p. (ProductionRule p, EpsProductionRule p, RecProductionRule p phi r, TokenProductionRule p t, LoopProductionRule p phi r, BiasedProductionRule p) => p v
type BiasedExtendedLiftableContextFreeRule phi r t v = forall p. (ProductionRule p, LiftableProductionRule p, RecProductionRule p phi r, TokenProductionRule p t, LoopProductionRule p phi r, BiasedProductionRule p) => p v
type AnyExtendedContextFreeRule phi r t v = forall p. (ProductionRule p, EpsProductionRule p, RecProductionRule p phi r, TokenProductionRule p t, LoopProductionRule p phi r, PenaltyProductionRule p, BiasedProductionRule p) => p v
type LAnyExtendedContextFreeRule phi r t v = forall p. (ProductionRule p, LiftableProductionRule p, RecProductionRule p phi r, TokenProductionRule p t, LoopProductionRule p phi r, PenaltyProductionRule p, BiasedProductionRule p) => p v
type LiftableContextFreeRule phi r t v = forall p. (ProductionRule p, LiftableProductionRule p, RecProductionRule p phi r, TokenProductionRule p t) => p v
type ExtendedLiftableContextFreeRule phi r t v = forall p. (ProductionRule p, LiftableProductionRule p, RecProductionRule p phi r, TokenProductionRule p t, LoopProductionRule p phi r) => p v
type GGrammar rt phi t (r :: * -> *) (rr :: * -> *) = forall ix. phi ix -> rt phi r t (rr ix)
type AGrammar rt phi t = forall r. GGrammar rt phi t r (PF phi r)
type PGrammar rt phi t r = GGrammar rt phi t r r
type GRegularGrammar phi t r rr = GGrammar RegularRule phi t r rr
type GContextFreeGrammar phi t r rr = GGrammar ContextFreeRule phi t r rr
type GLContextFreeGrammar phi t r rr = GGrammar LiftableContextFreeRule phi t r rr
type GPenaltyContextFreeGrammar phi t r rr = GGrammar PenaltyContextFreeRule phi t r rr
type GBiasedContextFreeGrammar phi t r rr = GGrammar BiasedContextFreeRule phi t r rr
type GExtendedContextFreeGrammar phi t r rr = GGrammar ExtendedContextFreeRule phi t r rr
type GPenaltyExtendedContextFreeGrammar phi t r rr = GGrammar PenaltyExtendedContextFreeRule phi t r rr
type GBiasedExtendedContextFreeGrammar phi t r rr = GGrammar BiasedExtendedContextFreeRule phi t r rr
type GAnyExtendedContextFreeGrammar phi t r rr = GGrammar AnyExtendedContextFreeRule phi t r rr
type GLAnyExtendedContextFreeGrammar phi t r rr = GGrammar LAnyExtendedContextFreeRule phi t r rr
type GLExtendedContextFreeGrammar phi t r rr = GGrammar ExtendedLiftableContextFreeRule phi t r rr
type ContextFreeGrammar phi t = AGrammar ContextFreeRule phi t
type LContextFreeGrammar phi t = AGrammar LiftableContextFreeRule phi t
type ExtendedContextFreeGrammar phi t = AGrammar ExtendedContextFreeRule phi t
type PenaltyExtendedContextFreeGrammar phi t r rr = AGrammar PenaltyExtendedContextFreeRule phi t
type BiasedExtendedContextFreeGrammar phi t r rr = AGrammar BiasedExtendedContextFreeRule phi t
type LExtendedContextFreeGrammar phi t = AGrammar ExtendedLiftableContextFreeRule phi t
type ProcessingRegularGrammar phi t r = PGrammar RegularRule phi t r
type ProcessingPenaltyRegularGrammar phi t r = PGrammar PenaltyRegularRule phi t r
type ProcessingBiasedRegularGrammar phi t r = PGrammar BiasedRegularRule phi t r
type ProcessingContextFreeGrammar phi t r = PGrammar ContextFreeRule phi t r
type ProcessingLContextFreeGrammar phi t r = PGrammar LiftableContextFreeRule phi t r
type ProcessingPenaltyContextFreeGrammar phi t r = PGrammar PenaltyContextFreeRule phi t r
type ProcessingBiasedContextFreeGrammar phi t r = PGrammar BiasedContextFreeRule phi t r
type ProcessingExtendedContextFreeGrammar phi t r = PGrammar ExtendedContextFreeRule phi t r
type ProcessingPenaltyExtendedContextFreeGrammar phi t r = PGrammar PenaltyExtendedContextFreeRule phi t r
type ProcessingBiasedExtendedContextFreeGrammar phi t r = PGrammar BiasedExtendedContextFreeRule phi t r
type ProcessingLExtendedContextFreeGrammar phi t r = PGrammar ExtendedLiftableContextFreeRule phi t r
type ProcessingLBiasedExtendedContextFreeGrammar phi t r = PGrammar BiasedExtendedLiftableContextFreeRule phi t r
type GProcessor phi r rr = forall ix. phi ix -> rr ix -> r ix
type Processor phi r = GProcessor phi r (PF phi r)
type UnambiguousTopDownGrammar phi r t = (Domain phi, Token t) => phi ix -> [ConcreteToken t] -> NonBranchingRule phi r t (r ix)
type UnfoldDepth phi = forall ix. phi ix -> Integer
type FirstSetGrammar phi r t rr = forall ix. phi ix -> FSCalculator phi r t rr (rr ix)
type EnumerateParserInternalGrammar phi t = forall ix. phi ix -> Int -> [[ConcreteToken t]]
type EnumerateGrammar phi ixT (r :: * -> *) t rr = forall ix. phi ix -> EnumerateProductionRule phi ixT r t (rr ix)
type UDFGrammar p phi (r :: * -> *) t rr = forall ix. phi ix -> p (rr ix)
type SignalRecord era record = record (SignalStyle era)
type ConsumerRecord record = ConnectorRecord Consumer record
type ProducerRecord record = ConnectorRecord Producer record
type ConnectorRecord connector record = record (ConnectorStyle connector)
type ContextConsumerRecord context record = ContextConnectorRecord context Consumer record
type ContextProducerRecord context record = ContextConnectorRecord context Producer record
type ContextConnectorRecord context connector record = record (ContextConnectorStyle context connector)
type ContextConnectorStyle context connector = ContextStyle context (ConnectorStyle connector)
type Node = Int
type NodeMap v = IntMap v
type NodeSet = IntSet
type Node = Int
type NodeSet = IntSet
type Edge = Port
type WithGraph n = Reader (Graph n)
type Pattern n = PatternT n Identity
type Pattern n = PatternT n Identity
type Match = [Node]
type Rule n = Pattern n (Rewrite n ())
type Angle = Double
type Impulse = Angle -> Angle
type Momentum = Impulse -> Rotation -> Rotation
type RankDic = Map Node Double
type EGGraph a = [EGTerm a]
type Edge i = (i, i)
type Edge i = (i, i)
type AGr n e = Gr n e
type Rel n e = (n, n, e)
type NGroup = [Node]
type LNGroup a = [LNode a]
type CNodes a = [a]
type R = GLdouble
type R2 = (R, R)
type Dict = Map ID Object
type ID = String
type VertexMap g = PropertyMap g (Vertex g)
type EdgeMap g = PropertyMap g (Edge g)
type Parse a = Parser GraphvizState a
type DotCode = State GraphvizState Doc
type ColorList = [WeightedColor]
type Text = [TextItem]
type Attributes = [Attribute]
type Attributes = [Attribute]
type AttributeName = Text
type CustomAttribute = Attribute
type EscString = Text
type RecordFields = [RecordField]
type LayerRange = [LayerRangeElem]
type Attributes = [Attribute]
type Style = StyleItem
type Arrow = ArrowType
type ClusterLookup = Map (Maybe GraphID) ([Path], GlobalAttributes)
type NodeLookup n = Map n (Path, Attributes)
type Path = Seq (Maybe GraphID)
type DotStatements n = Seq (DotStatement n)
type Dot n = DotM n ()
type LNodeCluster cl l = NodeCluster cl (Node, l)
type AttributeNode nl = (Attributes, nl)
type AttributeEdge el = (Attributes, el)
type MbString = Maybe String
type MbString = Maybe String
type ParseResult t a = Either (ParseError t) a
type Parser t a = [t] -> ParseResult t a
type ParseResult t a = Either (ParseError t) a
type Parser t a = [t] -> ParseResult t a
type Grammar t a = GrammarState t (RId t a)
type Rule t a = [Prod t a]
type GrammarState t = State (RuleIDs t)
type Number = String
type Uident = String
type Lident = String
type Mlcode = String
type Usym = String
type Pos = Int
type Range = (Pos, Pos)
type Path = [Int]
type Nav = Path -> Path
type TreeSelection = (Path, Int)
type TokenPos = (Pos, Token)
type FieldChain = ((String, DbType), [(String, EmbeddedDef)])
type DbTypePrimitive = DbTypePrimitive' String
type EntityDef = EntityDef' String DbType
type EmbeddedDef = EmbeddedDef' String DbType
type OtherTypeDef = OtherTypeDef' String
type ConstructorDef = ConstructorDef' String DbType
type UniqueDef = UniqueDef' String (Either (String, DbType) String)
type ParentTableReference = (Either (EntityDef, Maybe String) ((Maybe String, String), [String]), Maybe ReferenceActionType, Maybe ReferenceActionType)
type SingleMigration = Either [String] [(Bool, Int, String)]
type NamedMigrations = Map String SingleMigration
type Migration m = StateT NamedMigrations m ()
type RowPopper m = m (Maybe [PersistValue])
type QualifiedName = (Maybe String, String)
type UniqueDefInfo = UniqueDef' String (Either String String)
type MultiMap a b = Map a [b]
type Param = (ByteString, ByteString)
type EarlyTermination = ResponseState
type HandlerAbort m = EitherT EarlyTermination m
type Handler = HandlerT IO
type Growler = GrowlerT IO
type Growler = GrowlerT IO
type Handler = HandlerT IO
type ClockTime = Word64
type ClockTimeDiff = Int64
type IteratorFilter itemT = itemT -> IO Bool
type IteratorFoldFunction itemT accumT = itemT -> accumT -> IO (Bool, accumT)
type Tag = String
type TagList = Structure
type BusSyncHandler = Bus -> Message -> IO BusSyncReply
type TypeInfo = (Name, [TyVarBndr], [(Name, [(Maybe Name, Type)])])
type LVTreeSemiring a s = GenericSemiring (LVTreeAlgebra a) s
type BinTreeSemiring n l a = GenericSemiring (BinTreeAlgebra n l) a
type Semiring a s = GenericSemiring (JoinListAlgebra a) s
type ConsSemiring a s = GenericSemiring (ConsListAlgebra a) s
type AgencyID = String
type BlockID = String
type FareID = String
type RouteID = String
type ServiceID = String
type ShapeID = String
type StopID = String
type TripID = String
type ZoneID = String
type URL = String
type Phone = String
type Timezone = String
type Language = String
type Currency = String
type Color = String
type Sequence = Int
type Seconds = Int
type Distance = Double
type Price = Double
type LatLon = Double
type TransferLimit = Maybe Int
type GWeakNotify = FunPtr (((Ptr ()) -> ((Ptr GObject) -> (IO ()))))
type ContainerForeachCB = Widget -> IO ()
type SortColumnId = Int
type TreePath = [Int]
type TreeSelectionCB = TreePath -> IO Bool
type TreeSelectionForeachCB = TreeIter -> IO ()
type ComboBoxText = Text
type MarkName = DefaultGlibString
type ContextId = CUInt
type Bitmap = Pixmap
type Point = (Int, Int)
type KeyVal = Word32
type KeyCode = Word16
type EventM t = ReaderT (Ptr t) IO
type TimeStamp = Word32
type KeyVal = Word32
type TimeStamp = Word32
type EventButton = Event
type EventScroll = Event
type EventMotion = Event
type EventExpose = Event
type EventKey = Event
type EventConfigure = Event
type EventCrossing = Event
type EventFocus = Event
type EventProperty = Event
type EventProximity = Event
type EventVisibility = Event
type EventWindowState = Event
type EventGrabBroken = Event
type TagName = DefaultGlibString
type Point = (Int, Int)
type InfoId = CUInt
type TargetTag = Atom
type SelectionTag = Atom
type SelectionTypeTag = Atom
type SelectionDataM a = ReaderT (Ptr ()) IO a
type StockId = DefaultGlibString
type GType = CULong
type KeyVal = Word32
type Bitmap = Pixmap
type StockId = DefaultGlibString
type Allocation = Rectangle
type Priority = Int
type HandlerId = CUInt
type FD = Int
type ImageFormat = DefaultGlibString
type EitherWidgetParams = Bool
type TypedTreeView a = (TreeView, ListStore a)
type MaybeWidgetParams = Bool
type TypedComboBox a = (ComboBox, ListStore a)
type PixmapsFor a = a -> Pixbuf
type KeyInfo = (Bool, Int, [Modifier])
type KeyTable = Map String KeyInfo
type MouseEvent = Maybe (Bool, Int)
type KeyEvent = (Bool, Either String Char)
type TrayManagerChild = Ptr EggTrayManagerChild
type GWeakNotify = FunPtr (((Ptr ()) -> ((Ptr GObject) -> (IO ()))))
type ContainerForeachCB = Widget -> IO ()
type SortColumnId = Int
type TreePath = [Int]
type TreeSelectionCB = TreePath -> IO Bool
type TreeSelectionForeachCB = TreeIter -> IO ()
type ComboBoxText = Text
type MarkName = DefaultGlibString
type ContextId = CUInt
type KeyVal = Word32
type KeyCode = Word16
type EventM t = ReaderT (Ptr t) IO
type TimeStamp = Word32
type TagName = DefaultGlibString
type KeyVal = Word32
type TimeStamp = Word32
type EventButton = Event
type EventScroll = Event
type EventMotion = Event
type EventExpose = Event
type EventKey = Event
type EventConfigure = Event
type EventCrossing = Event
type EventFocus = Event
type EventProperty = Event
type EventProximity = Event
type EventVisibility = Event
type EventWindowState = Event
type EventGrabBroken = Event
type Point = (Int, Int)
type InfoId = CUInt
type TargetTag = Atom
type SelectionTag = Atom
type SelectionTypeTag = Atom
type SelectionDataM a = ReaderT (Ptr ()) IO a
type StockId = DefaultGlibString
type GType = CULong
type KeyVal = Word32
type StockId = DefaultGlibString
type Allocation = Rectangle
type Priority = Int
type HandlerId = CUInt
type FD = Int
type ImageFormat = DefaultGlibString
type In = Input MkI
type Out = Output MkI MkO
type GTV = TV MkI MkO
type R = Float
type In = Input MkI
type Out = Output MkI MkO
type GTV = TV MkI MkO
type R = Float
type Tag = String
type Parse = Either ParseFailure
type ExcIO a = ErrorT RealWorldExcs IO a
type R a = PlainRec ElF a
type PR a = Parse (R a)
type ParseArrow cat = (Functor (cat XmlTree), ArrowXml cat)
type Field cat s = cat XmlTree (Parse (R '[s]))
type IchijouPost = PR '["creator_id", "md5", "status", "preview_height", "has_notes", "author", "source", "score", "file_size", "sample_width", "width", "file_url", "sample_height", "has_children", "tags", "change", "preview_url", "has_comments", "id", "sample_url", "rating", "created_at", "preview_width", "parent_id", "height"]
type GelbooruPost = PR '["height", "score", "file_url", "parent_id", "sample_url", "sample_width", "sample_height", "preview_url", "rating", "tags", "id", "width", "change", "md5", "creator_id", "has_children", "created_at", "status", "source", "has_notes", "has_comments", "preview_width", "preview_height"]
type KonachanPost = PR '["actual_preview_height", "actual_preview_width", "author", "change", "created_at", "file_size", "file_url", "frames", "frames_pending", "frames_pending_string", "frames_string", "has_children", "height", "id", "is_held", "is_shown_in_index", "jpeg_file_size", "jpeg_height", "jpeg_url", "jpeg_width", "md5", "preview_height", "preview_url", "preview_width", "rating", "sample_file_size", "sample_height", "sample_url", "sample_width", "score", "source", "status", "tags", "width"]
type SafebooruPost = PR '["height", "score", "file_url", "parent_id", "sample_url", "sample_width", "sample_height", "preview_url", "rating", "tags", "id", "width", "change", "md5", "creator_id", "has_children", "created_at", "status", "source", "has_notes", "has_comments", "preview_width", "preview_height"]
type YanderePost = PR '["actual_preview_height", "actual_preview_width", "author", "change", "created_at", "creator_id", "file_size", "file_url", "frames", "frames_pending", "frames_pending_string", "frames_string", "has_children", "height", "id", "is_held", "is_shown_in_index", "jpeg_file_size", "jpeg_height", "jpeg_url", "jpeg_width", "md5", "preview_height", "preview_url", "preview_width", "rating", "sample_file_size", "sample_height", "sample_url", "sample_width", "score", "source", "status", "tags", "width"]
type Board = [[Int]]
type Line = [Int]
type Func = ExpQ -> ExpQ
type Nick = Text
type Timestamp = UTCTime
type Application = Env -> IO Response
type Middleware = Application -> Application
type HackErrors = String -> IO ()
type Formatter = Severity -> UTCTime -> Int -> String -> String -> String
type Logger = String -> Severity -> IO ()
type Word256 = LargeKey Word64 Word192
type Application = Env -> IO Response
type Middleware = Application -> Application
type Hackage = Map String (Map Version ByteString)
type Hackage = Map String (Map Version GenericPackageDescription)
type Hackage = Map String (Map Version GenericPackageDescription)
type HackerNews a = EitherT HackerNewsError (ReaderT Connection IO) a
type MailBox msg = TChan msg
type Process = ThreadId
type MBox m = TChan m
type DocForDecl name = (Documentation name, FnArgsDoc name)
type FnArgsDoc name = Map Int (Doc name)
type LinkEnv = Map Name Module
type DocInstance name = (InstHead name, Maybe (Doc name))
type InstHead name = (name, [HsType name], [HsType name], InstType name)
type ArgMap a = Map Name (Map Int (Doc a))
type AliasMap = Map Module ModuleName
type WarningMap = DocMap Name
type DocMap a = Map Name (Doc a)
type NameCacheAccessor m = (m NameCache, NameCache -> m ())
type DocForDecl name = (Documentation name, FnArgsDoc name)
type FnArgsDoc name = Map Int (Doc name)
type LinkEnv = Map Name Module
type DocInstance name = (InstHead name, Maybe (Doc name))
type InstHead name = (name, [HsType name], [HsType name], InstType name)
type Doc id = DocH (ModuleName, OccName) id
type ArgMap a = Map Name (Map Int (Doc a))
type AliasMap = Map Module ModuleName
type WarningMap = DocMap Name
type DocMap a = Map Name (Doc a)
type NameCacheAccessor m = (m NameCache, NameCache -> m ())
type Version = [Int]
type Identifier = (Char, String, Char)
type NameNode = Endpoint
type SocksProxy = Endpoint
type HostName = Text
type Port = Int
type User = Text
type Group = Text
type Permission = Word16
type HdfsPath = ByteString
type HdfsTime = Word64
type HdfsPath = ByteString
type User = Text
type Method = Text
type RawRequest = ByteString
type RawResponse = Either SomeException ByteString
type CreateParent = Bool
type Recursive = Bool
type Overwrite = Bool
type MessageSubject = Text
type UnverifiedEmailAddress = ByteString
type HailgunErrorMessage = String
type Application = RequestConfig -> DCLabeled Request -> DC Response
type Middleware = Application -> Application
type Request = Request
type Route = RouteM ()
type RESTController = RESTControllerM ()
type Controller = ReaderT ControllerState DC
type UserName = Text
type HsonDocument = [HsonField]
type BsonDocument = [BsonField]
type FieldName = Text
type S8 = ByteString
type HsonDocument = [HsonField]
type Document = HsonDocument
type BsonDocument = [BsonField]
type FieldName = Text
type CollectionName = Text
type CollectionSet = DCLabeled (Set Collection)
type DatabaseName = Text
type Pipe = Pipeline Response Message
type CollectionName = Text
type CollectionSet = DCLabeled (Set Collection)
type DatabaseName = Text
type LabeledHsonDocument = DCLabeled HsonDocument
type Pipe = Pipeline Response Message
type TypeName = String
type Selector = BsonDocument
type Limit = Word32
type BatchSize = Word32
type DatabaseName = Text
type CollectionName = Text
type CollectionSet = DCLabeled (Set Collection)
type LabeledHsonDocument = DCLabeled HsonDocument
type Selector = BsonDocument
type Limit = Word32
type BatchSize = Word32
type TaskId = Key Task
type Error = Text
type Action = ActionT Error ConfigM ()
type Prob = LogFloat
type VarCounter = Int
type PRNG m = Gen (PrimState m)
type Cond = Maybe Dynamic
type LogLikelihood = Double
type (~~>) a b = a -> Dist b
type Sampler a = PrimMonad m => PRNG m -> m (Mixture a)
type DistVal = Dynamic
type Visited = Bool
type Observed = Bool
type LL = LogLikelihood
type LL2 = (LL, LL)
type Subloc = Int
type Name = [Subloc]
type Database = Map Name DBEntry
type Sampler a = PrimMonad m => SamplerState -> PRNG m -> m (a, SamplerState)
type Rule = (Targets, Sources, Commands)
type DependencyFacts = Map Identifier [Dependency]
type Metadata = Map String String
type UsedMetadata = Bool
type Snapshot = String
type PageNumber = Int
type Template m a = (String -> m String) -> Item a -> m Html
type CanonicalSymbol = (PackageRef, ModuleName, OrigName)
type LookupTable = Map String [CanonicalSymbol]
type Suggestion = (QName (Scoped SrcSpan), [CanonicalSymbol])
type ChooseExternal m = QName (Scoped SrcSpan) -> [CanonicalSymbol] -> m CanonicalSymbol
type Parser s r = [s] -> [(r, [s])]
type Instr = [Code]
type CT st = [(StDfa st, [StDfa st])]
type CustomFn s f = Context s f -> Arg -> IO (Context s f, Result s f)
type UpdateDict s = s String -> [String] -> s String
type PageGen s = s String -> s String -> TreeSite s
type PageGenS s = s String -> s String -> [TreeSite s]
type Label s = s String -> Page s -> Maybe [Element Posn]
type Collect = [Element Posn] -> [Element Posn] -> [Element Posn]
type Translate = [String] -> Maybe [String]
type ReadDB d = Translate -> d String -> FilePath -> [String] -> IO (d String)
type Team = HalmaDirection
type Move size = (Index (HalmaGrid size), Index (HalmaGrid size))
type MidiTime = Word32
type MidiMessage = Message
type MidiEvent = (MidiTime, Message)
type HamletMap url = [([String], HamletData url)]
type Html = Markup
type HtmlUrl url = Render url -> Html
type HtmlUrlI18n msg url = Translate msg -> Render url -> Html
type Number = Double
type Delta = Number
type Text = String
type IntegerNumber = Int
type RatioNumber = Ratio IntegerNumber
type Score_Partwise = [Music_Data]
type Note = (Note_, Maybe Type, [Dot], Maybe Accidental)
type Full_Note = Full_Note_
type Pitch = (Step, Maybe Alter, Octave)
type Alter = Number
type Octave = IntegerNumber
type Rest = ()
type Type = Type_
type Dot = ()
type Accidental = Accidental_
type Score_Partwise = [Music_Data]
type Note = (Note_, Maybe Type, [Dot], Maybe Accidental)
type Full_Note = Full_Note_
type Pitch = (IntegerNumber, Maybe Alter)
type Alter = Number
type Rest = ()
type Type = Type_
type Type_ = IntegerNumber
type Dot = ()
type Accidental = Accidental_
type Accidental_ = IntegerNumber
type Settings = Map Text (Bool, Either Text Number)
type Pitch = Number
type MelodicNode = Maybe (Delta, Accident)
type MelodicRelative = Maybe (Delta, Accident)
type MelodicAbsolute = Maybe (Pitch, Accident)
type MelodicClass = Maybe (PitchClass, Accident)
type Accident = Maybe Number
type MelodicClassNode = Maybe (PitchClass, Accident)
type RhythmNode = (Delta, Dots)
type RhythmAbsolute = (RatioNumber, Dots)
type RhythmRelative = (RatioNumber, Dots)
type Dots = IntegerNumber
type Duration = Number
type VoiceZipNode = (MelodicNode, RhythmNode)
type VoiceZipAbsolute = (MelodicAbsolute, RhythmAbsolute)
type VoiceZipRelative = (MelodicRelative, RhythmRelative)
type NotationInfo = Either Text Number
type NotationNode = [(NotationPosition, NotationInfo)]
type NotationPosition = Maybe Position
type Position = Number
type MultiVoiceNode = ((VoiceZipNode, IntegerNumber), NotationNode)
type MultiVoiceAbsolute = ((VoiceZipAbsolute, IntegerNumber), NotationNode)
type MultiVoiceRelative = ((VoiceZipRelative, IntegerNumber), NotationNode)
type MultiInstrumentNode = [MultiVoiceNode]
type MultiInstrumentAbsolute = [MultiVoiceAbsolute]
type MultiInstrumentRelative = [MultiVoiceRelative]
type A = Text
type Annot = ([((((MelodicNode, A), (RhythmNode, A)), Bool), [((NotationPosition, NotationInfo), A)])], A)
type AnnotationNode = [(Maybe Number, Text)]
type MultiAnnotationNode = (MultiInstrumentNode, AnnotationNode)
type AnnotationAbsolute = (MultiInstrumentAbsolute, AnnotationNode)
type AnnotationRelative = (MultiInstrumentRelative, AnnotationNode)
type Score_Partwise = [Measure]
type Measure = [Music_Data]
type Note = (Note_, Maybe Type, [Dot], Maybe Accidental)
type Full_Note = Full_Note_
type Pitch = (Step, Maybe Alter, Octave)
type Duration = IntegerNumber
type Type = Type_
type Dot = ()
type Accidental = Accidental_
type Attributes = (Maybe Divisions, [Key], [Time], [Clef])
type Divisions = IntegerNumber
type Key = (Key_, [Key_Octave])
type Fifths = IntegerNumber
type Key_Step = Step
type Key_Alter = Alter
type Key_Octave = Octave
type Time = Time_B
type Beats = (IntegerNumber, Maybe IntegerNumber)
type Beat_Type = IntegerNumber
type Clef = (Sign, Maybe Line, Maybe Clef_Octave_Change)
type Line = IntegerNumber
type Clef_Octave_Change = IntegerNumber
type Score_Partwise = [Measure]
type Measure = [Music_Data]
type Note = (Note_, Maybe Type, [Dot], Maybe Accidental)
type Full_Note = Full_Note_
type Pitch = Pitch
type Duration = IntegerNumber
type Type = Type_
type Dot = ()
type Accidental = Accidental_
type Attributes = (Maybe Divisions, [Key], [Time], [Clef])
type Divisions = IntegerNumber
type Key = (Key_, [IntegerNumber])
type Fifths = IntegerNumber
type Time = Time_B
type Beats = (IntegerNumber, Maybe IntegerNumber)
type Beat_Type = IntegerNumber
type Clef = (Sign, Maybe Line, Maybe Clef_Octave_Change)
type Sign = IntegerNumber
type Line = IntegerNumber
type Clef_Octave_Change = IntegerNumber
type Score_Partwise = (Document_Attributes, (Score_Header, [Part]))
type Part = [Measure]
type Measure = [Music_Data]
type Barline = Barline
type Note = (Note_, Maybe Instrument, Editorial_Voice, Maybe Type, [Dot], Maybe Accidental, Maybe Staff)
type Full_Note = (Maybe Chord, Full_Note_)
type Rest = ()
type Duration = IntegerNumber
type Editorial_Voice = Editorial_Voice
type Instrument = Instrument
type Type = Type_
type Dot = Dot
type Accidental = Accidental_
type Staff = IntegerNumber
type Attributes = (Maybe Divisions, [Key], [Time], Maybe Staves, Maybe Instruments, [Clef], Maybe Transpose)
type Editorial = Editorial
type Divisions = IntegerNumber
type Key = (Key_, [IntegerNumber])
type Time = Time_B
type Beats = (IntegerNumber, Maybe IntegerNumber)
type Beat_Type = IntegerNumber
type Staves = Staves
type Part_Symbol = Part_Symbol
type Instruments = Instruments
type Clef = Clef
type Staff_Details = Staff_Details
type Transpose = Transpose
type Directive = Directive
type Measure_Style = Measure_Style
type Score_Partwise = (Document_Attributes, (Score_Header, [Part]))
type Part = [Measure]
type Measure = [Music_Data]
type Barline = Barline
type Note = (Note_, Maybe Instrument, Editorial_Voice, Maybe Type, [Dot], Maybe Accidental, Maybe Staff)
type Full_Note = (Maybe Chord, Full_Note_)
type Rest = ()
type Duration = IntegerNumber
type Editorial_Voice = Editorial_Voice
type Instrument = Instrument
type Type = Type_
type Dot = Dot
type Accidental = Accidental_
type Staff = IntegerNumber
type Attributes = (Maybe Divisions, [Key], [Time], Maybe Staves, Maybe Instruments, [Clef], Maybe Transpose)
type Editorial = Editorial
type Divisions = IntegerNumber
type Key = (Key_, [Key_Octave])
type Time = Time_B
type Beats = (IntegerNumber, Maybe IntegerNumber)
type Beat_Type = IntegerNumber
type Staves = Staves
type Part_Symbol = Part_Symbol
type Instruments = Instruments
type Clef = Clef
type Staff_Details = Staff_Details
type Transpose = Transpose
type Directive = Directive
type Measure_Style = Measure_Style
type Score_Partwise = (Document_Attributes, (Score_Header, [Part]))
type Part = [Measure]
type Measure = [Music_Data]
type Note = (Note_, Maybe Instrument, Editorial_Voice, Maybe Type, [Dot], Maybe Accidental, Maybe Time_Modification, Maybe Stem, Maybe Notehead, Maybe Staff, [Beam], [Notations], [Lyric])
type Grace = Grace
type Cue = Cue
type Tie = Tie
type Full_Note = (Maybe Chord, Full_Note_)
type Unpitched = Unpitched
type Rest = Rest
type Duration = IntegerNumber
type Editorial_Voice = Editorial_Voice
type Instrument = Instrument
type Type = Type_
type Dot = Dot
type Accidental = Accidental_
type Time_Modification = Time_Modification
type Stem = Stem
type Notehead = Notehead
type Beam = Beam
type Staff = IntegerNumber
type Lyric = Lyric
type Notations = Notations
type Attributes = (Editorial, Maybe Divisions, [Key], [Time], Maybe Staves, Maybe Part_Symbol, Maybe Instruments, [Clef], [Staff_Details], Maybe Transpose, [Directive], [Measure_Style])
type Editorial = Editorial
type Divisions = IntegerNumber
type Key = (Key_, [Key_Octave])
type Time = Time_B
type Staves = Staves
type Part_Symbol = Part_Symbol
type Instruments = Instruments
type Clef = (Sign, Maybe Line, Maybe Clef_Octave_Change)
type Staff_Details = Staff_Details
type Transpose = Transpose
type Directive = Directive
type Measure_Style = Measure_Style
type Score_Partwise = (Document_Attributes, (Score_Header, [Part]))
type Part = (ID, [Measure])
type Measure = ((CDATA, Maybe Yes_No, Maybe Yes_No, Maybe Tenths), [Music_Data])
type Note = ((Print_Style, Printout, Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe Yes_No), (Note_, Maybe Instrument, Editorial_Voice, Maybe Type, [Dot], Maybe Accidental, Maybe Time_Modification, Maybe Stem, Maybe Notehead, Maybe Staff, [Beam], [Notations], [Lyric]))
type Grace = Grace
type Cue = Cue
type Tie = Tie
type Full_Note = (Maybe Chord, Full_Note_)
type Duration = IntegerNumber
type Editorial_Voice = Editorial_Voice
type Instrument = Instrument
type Type = (Maybe Symbol_Size, Type_)
type Dot = Dot
type Accidental = ((Maybe Yes_No, Maybe Yes_No, Level_Display, Print_Style), Accidental_)
type Time_Modification = Time_Modification
type Stem = Stem
type Notehead = Notehead
type Beam = Beam
type Staff = IntegerNumber
type Lyric = Lyric
type Notations = Notations
type Attributes = (Editorial, Maybe Divisions, [Key], [Time], Maybe Staves, Maybe Part_Symbol, Maybe Instruments, [Clef], [Staff_Details], Maybe Transpose, [Directive], [Measure_Style])
type Editorial = Editorial
type Divisions = IntegerNumber
type Key = ((Maybe CDATA, Print_Style, Print_Object), (Key_, [Key_Octave]))
type Key_Octave = ((CDATA, Maybe Yes_No), Octave)
type Time = ((Maybe CDATA, Maybe Time_A, Print_Style, Print_Object), Time_B)
type Staves = Staves
type Part_Symbol = Part_Symbol
type Instruments = Instruments
type Clef = ((Maybe CDATA, Maybe Yes_No, Maybe Symbol_Size, Print_Style, Print_Object), (Sign, Maybe Line, Maybe Clef_Octave_Change))
type Staff_Details = Staff_Details
type Transpose = Transpose
type Directive = Directive
type Measure_Style = Measure_Style
type Score_Partwise = (Document_Attributes, (Score_Header, [Part]))
type Part = (ID, [Measure])
type Measure = ((CDATA, Maybe Yes_No, Maybe Yes_No, Maybe Tenths), [Music_Data])
type Annotation = (Maybe Start_Stop, PCDATA)
type Note = Note
type Attributes = Attributes
type AccessToken = ByteString
type ProjectId = String
type EMail = String
type Password = String
type SmsToken = String
type ShelfId = String
type TableId = FTString
type OAuth2Scope = String
type UserId = String
type AlbumId = String
type MD5Info = (MD5String, MD5Base64)
type MD5String = String
type MD5Base64 = String
type BucketName = String
type KeyName = String
type MIMEType = String
type Recipient = String
type RegexExclusion = String
type Points = [Point]
type Handsy a = ProgramT HandsyInstruction IO a
type Handsy a = ProgramT HandsyInstruction IO a
type Host = String
type Wakeup = Bool -> IO ()
type Milliseconds = Int
type Channel a = Chan a
type DeviceName = String
type MkPseudoHeader = Int -> ByteString
type Endo a = a -> a
type Exit i r = LayerState i -> Action -> Result i r
type Failure i r = Action -> Result i r
type Success a i r = a -> LayerState i -> Action -> Result i r
type Handlers k a = Map k a
type Name = [ByteString]
type TcpAckNum = TcpSeqNum
type OutSegments = Seq OutSegment
type Connections = Map SocketId TcpSocket
type TimeWaitConnections = Map SocketId TimeWaitSock
type SlowTicks = Int
type Acceptor = SocketId -> IO ()
type Notify = Bool -> IO ()
type Close = IO ()
type EthernetHandle = Channel (Eth ())
type Tx = ByteString -> IO ()
type Rx = EthernetHandle -> IO ()
type ArpTable = Map IP4 ArpEntry
type ArpHandle = Channel (Arp ())
type FragmentationTable addr = Map (Ident, addr, addr) Fragments
type Mtu = Int
type RoutingTable addr = PrefixTree (Dest addr)
type IP4Handle = Channel (IP ())
type Handler = IP4Header -> ByteString -> IO ()
type Mtu = Int
type Icmp4Handle = Channel (Icmp4 ())
type UdpHandle = Channel (Udp ())
type Handler = IP4 -> UdpPort -> ByteString -> IO ()
type DnsHandle = Channel (Dns ())
type HostName = String
type TcpHandle = Channel (Tcp ())
type Tcp = Layer TcpState
type Escape r = TcpSocket -> Tcp (TcpSocket, Maybe r)
type Next a r = TcpSocket -> a -> Tcp (TcpSocket, Maybe r)
type SetFlag = TcpHeader -> Bool
type UnsetFlag = TcpHeader -> Bool
type TcpHandle = Channel (Tcp ())
type Mtu = Int
type HostName = String
type ReadM m = StateT ReadState m
type Pairs = [(String, String)]
type :&: a b = Couple b a
type IndexOp = forall k a. (Ord k, Ord a) => k -> a -> Map k (Set a) -> Map k (Set a)
type ComponentTree = Map String MethodMap
type ComponentVersions = Map String [ByteString]
type Collect = State Collection
type ExceptionT = SomeException
type TypeString = String
type EventMap = Map TypeString EventHandler
type Runner ev res = IO (IO ev, res -> IO ())
type EH i o = i -> IO o
type RunHandler st ev = TxContext -> st -> IO (Maybe st, IO ())
type EventQueue st = TChan (HR st)
type ProcessQueue st = TChan (IHR st)
type EvLoaders' st = Map String (ProcessQueue st -> ByteString -> IO (TxId, ByteString))
type EvLoaders = Map String (ByteString -> IO (TxId, ByteString))
type AnyEv a = forall t. (Monad (t STM), MonadTrans t) => Ev (t STM) a
type Update state = Ev (StateT state STM)
type Query state = Ev (ReaderT state STM)
type TxId = Int64
type EpochMilli = Int64
type Seconds = Int
type EpochSeconds = Int64
type UserDB = IxSet User
type Username = String
type Password = String
type Minutes = Int
type UserIxs = '[UserId, Username, Email]
type IxUser = IxSet UserIxs User
type SharedSecrets = Map UserId SharedSecret
type TokenText = Text
type AuthenticationHandler = [Text] -> RouteT AuthenticateURL (ServerPartT IO) Response
type AuthenticationHandlers = Map AuthenticationMethod AuthenticationHandler
type Partial' m = RouteT AuthenticateURL (ReaderT [Lang] m)
type Partial m = XMLGenT (RouteT AuthenticateURL (ReaderT [Lang] m))
type Partial' m = RouteT AuthenticateURL (ReaderT [Lang] m)
type Partial m = XMLGenT (RouteT AuthenticateURL (ReaderT [Lang] m))
type Pairs = [(String, String)]
type Page m = String -> ServerPartT m Response
type SessionKey = String
type Parameters = [(String, String)]
type FoundationT url acidState requestState m = XMLGenT (FoundationT' url acidState requestState m)
type FoundationT' url acidState requestState m = RouteT url (StateT (AppState url acidState requestState) (ServerPartT m))
type FoundationForm url acidState requestState m = Form (FoundationT url acidState requestState m) [Input] AppError [FoundationT url acidState requestState m XML] ()
type IndexOp = forall k a. (Ord k, Ord a) => k -> a -> Map k (Set a) -> Map k (Set a)
type ServerPart a = ServerPartT IO a
type MimeMap = Map String String
type LogAccess time = String -> String -> time -> String -> Int -> Integer -> String -> String -> IO ()
type Headers = Map ByteString HeaderPair
type Host = (String, Int)
type InputWorker = Work -> IO InputIter
type FileSaver = FilePath -> Int64 -> FilePath -> ByteString -> IO (Bool, Int64, FilePath)
type LogAccess time = String -> String -> time -> String -> Int -> Integer -> String -> String -> IO ()
type Headers = Map ByteString HeaderPair
type Host = (String, Int)
type Web a = WebT IO a
type ServerPart a = ServerPartT IO a
type FilterFun a = SetAppend (Dual (Endo a))
type UnWebT m a = m (Maybe (Either Response a, FilterFun Response))
type RqEnv = ([(String, Input)], Maybe [(String, Input)], [(String, Cookie)])
type ServerPart a = ServerPartT IO a
type UnWebT m a = m (Maybe (Either Response a, FilterFun Response))
type MimeMap = Map String String
type MimeMap = Map String String
type Store = Map String (Map Int ByteString)
type ComponentTree = Map String MethodMap
type ComponentVersions = Map String [ByteString]
type Collect = State Collection
type ExceptionT = SomeException
type TypeString = String
type EventMap = Map TypeString EventHandler
type Runner ev res = IO (IO ev, res -> IO ())
type EH i o = i -> IO o
type RunHandler st ev = TxContext -> st -> IO (Maybe st, IO ())
type EventQueue st = TChan (HR st)
type ProcessQueue st = TChan (IHR st)
type EvLoaders' st = Map String (ProcessQueue st -> ByteString -> IO (TxId, ByteString))
type EvLoaders = Map String (ByteString -> IO (TxId, ByteString))
type AnyEv a = forall t. (Monad (t STM), MonadTrans t) => Ev (t STM) a
type Update state = Ev (StateT state STM)
type Query state = Ev (ReaderT state STM)
type TxId = Int64
type EpochMilli = Int64
type HostAddress = Word32
type HostAddress6 = (Word32, Word32, Word32, Word32)
type Seconds = Int
type EpochSeconds = Int64
type Message = Zord64
type Enc = Zord64
type Happybara sess a = HappybaraT sess IO a
type NodeHandle = Text
type URL = Text
type HsExpP = HsExpr RdrName
type HsPatP = Pat RdrName
type HsDeclP = LHsDecl RdrName
type HsDeclsP = HsGroup Name
type InScopes = [Name]
type PosToken = (Located Token, String)
type Export = LIE RdrName
type HsName = RdrName
type ParseResult = TypecheckedModule
type TargetModule = ([FilePath], ModSummary)
type RefactGhc a = GhcT (StateT RefactState IO) a
type ApplyRefacResult = ((FilePath, Bool), ([Line PosToken], [PosToken], RenamedSource))
type ParseResult = TypecheckedModule
type TargetModule = ([FilePath], ModSummary)
type RefactGhc a = GhcT (StateT RefactState IO) a
type ApplyRefacResult = ((FilePath, Bool), ([Line PosToken], [PosToken], RenamedSource))
type SimpPos = (Int, Int)
type InScopes = [Name]
type PosToken = (Located Token, String)
type SimpPos = (Int, Int)
type Memory = IOArray Address Word32
type Address = Word32
type WordAddress = Address
type ByteAddress = Address
type Registers = IOArray RegisterName Word32
type Symbol = String
type T0 = Ze
type T1 = Su T0
type T2 = Su T1
type T3 = Su T2
type T4 = Su T3
type T5 = Su T4
type T6 = Su T5
type T7 = Su T6
type T8 = Su T7
type T9 = Su T8
type T10 = Su T9
type T11 = Su T10
type T12 = Su T11
type T13 = Su T12
type T14 = Su T13
type T15 = Su T14
type T16 = Su T15
type T17 = Su T16
type T18 = Su T17
type T19 = Su T18
type T20 = Su T19
type SD mode deg clss = Base_SD deg clss T5
type TritMinVSub deg clss = Base_Final deg clss T2
type FinalDimTrans deg clss = Surface_Chord deg clss T4
type Final deg clss = Surface_Chord deg clss T1
type SD mode deg clss = Base_SD deg clss T4
type TritMinVSub deg clss = Base_Final deg clss T2
type FinalDimTrans deg clss = Surface_Chord deg clss T4
type Final deg clss = Surface_Chord deg clss T1
type PMusic a = P (Str ChordToken [ChordToken] Int) a
type RepPhrase_ mode_a2BXz = :+: (CEq Phrase_PT_ () () (Rec (Ton mode_a2BXz))) (CEq Phrase_PD_ () () (Rec (Dom mode_a2BXz)))
type RepTon_ mode_a2BXy = :+: (:+: (:+: (CEq Ton_T_1_ (:*: mode_a2BXy ()) (:*: MajMode ()) (Rec (Final I MajClass))) (CEq Ton_T_2_ (:*: mode_a2BXy ()) (:*: MajMode ()) (:*: (Rec (Final I MajClass)) (:*: (Rec (Final IV MajClass)) (Rec (Final I MajClass)))))) (:+: (CEq Ton_T_3_par_ (:*: mode_a2BXy ()) (:*: MajMode ()) (Rec (Final III MinClass))) (CEq Ton_T_6_bor_ (:*: mode_a2BXy ()) (:*: MajMode ()) (Rec TMinBorrow)))) (:+: (:+: (CEq Ton_Tm_1_ (:*: mode_a2BXy ()) (:*: MinMode ()) (Rec (SD MinMode I MinClass))) (CEq Ton_Tm_2_ (:*: mode_a2BXy ()) (:*: MinMode ()) (:*: (Rec (Final I MinClass)) (:*: (Rec (Final IV MinClass)) (Rec (Final I MinClass)))))) (:+: (CEq Ton_Tm_3_par_ (:*: mode_a2BXy ()) (:*: MinMode ()) (Rec (Final IIIb MajClass))) (CEq Ton_Tm_6_bor_ (:*: mode_a2BXy ()) (:*: MinMode ()) (Rec TMajBorrow))))
type RepDom_ mode_a2BXu = :+: (:+: (CEq Dom_D_1_ () () (:*: (Rec (SDom mode_a2BXu)) (Rec (Dom mode_a2BXu)))) (:+: (CEq Dom_D_2_ () () (Rec (SD mode_a2BXu V DomClass))) (CEq Dom_D_3_ () () (Rec (SD mode_a2BXu V MajClass))))) (:+: (:+: (CEq Dom_D_4_ (:*: mode_a2BXu ()) (:*: MajMode ()) (Rec (SD MajMode VII MinClass))) (CEq Dom_D_8_bor_ (:*: mode_a2BXu ()) (:*: MajMode ()) (Rec DMinBorrow))) (:+: (CEq Dom_Dm_4_ (:*: mode_a2BXu ()) (:*: MinMode ()) (Rec (SD MinMode VIIb MajClass))) (CEq Dom_Dm_8_bor_ (:*: mode_a2BXu ()) (:*: MinMode ()) (Rec DMajBorrow))))
type RepSDom_ mode_a2BXr = :+: (:+: (:+: (CEq SDom_S_1_par_ () () (Rec (SD mode_a2BXr II MinClass))) (CEq SDom_S_2_par_ () () (:*: (Rec (SD mode_a2BXr II DomClass)) (Rec (Final II MinClass))))) (:+: (CEq SDom_S_3_ (:*: mode_a2BXr ()) (:*: MajMode ()) (Rec (SD MajMode IV MajClass))) (CEq SDom_S_4_ (:*: mode_a2BXr ()) (:*: MajMode ()) (:*: (Rec (SD MajMode III MinClass)) (Rec (Final IV MajClass)))))) (:+: (:+: (CEq SDom_S_5_bor_ (:*: mode_a2BXr ()) (:*: MajMode ()) (Rec SMinBorrow)) (CEq SDom_Sm_3_ (:*: mode_a2BXr ()) (:*: MinMode ()) (Rec (SD MinMode IV MinClass)))) (:+: (CEq SDom_Sm_4_ (:*: mode_a2BXr ()) (:*: MinMode ()) (:*: (Rec (SD MinMode IIIb MajClass)) (Rec (Final IV MinClass)))) (:+: (CEq SDom_Sm_5_bor_ (:*: mode_a2BXr ()) (:*: MinMode ()) (Rec SMajBorrow)) (CEq SDom_Sm_6_ (:*: mode_a2BXr ()) (:*: MinMode ()) (Rec (SD MinMode IIb MajClass))))))
type RepTMinBorrow_ = :+: (CEq TMinBorrow_Tm_21_bor_ () () (Rec (SD MinMode I MinClass))) (CEq TMinBorrow_Tm_23_bor_ () () (Rec (SD MinMode IIIb MajClass)))
type RepDMinBorrow_ = CEq DMinBorrow_Dm_24_bor_ () () (Rec (SD MinMode VIIb MajClass))
type RepSMinBorrow_ = :+: (CEq SMinBorrow_Sm_20_bor_ () () (Rec (SD MinMode IV MinClass))) (CEq SMinBorrow_Sm_22_bor_ () () (Rec (SD MinMode IIb MajClass)))
type RepTMajBorrow_ = :+: (CEq TMajBorrow_T_21_bor_ () () (Rec (SD MajMode I MajClass))) (CEq TMajBorrow_T_23_bor_ () () (Rec (SD MajMode III MinClass)))
type RepDMajBorrow_ = CEq DMajBorrow_D_24_bor_ () () (Rec (SD MajMode VII MinClass))
type RepSMajBorrow_ = CEq SMajBorrow_S_20_bor_ () () (Rec (SD MajMode IV MajClass))
type RepPhrase_ mode_a2D31 = :+: (CEq Phrase_PT_ () () (Rec (Ton mode_a2D31))) (CEq Phrase_PD_ () () (Rec (Dom mode_a2D31)))
type RepTon_ mode_a2D2Y = :+: (:+: (CEq Ton_T_0_ () () (:*: (Rec (SDom mode_a2D2Y)) (Rec (Ton mode_a2D2Y)))) (:+: (CEq Ton_T_1_ (:*: mode_a2D2Y ()) (:*: MajMode ()) (Rec (Final I MajClass))) (CEq Ton_T_4_bls_ () () (Rec (Final I DomClass))))) (:+: (CEq Ton_T_6_bor_ (:*: mode_a2D2Y ()) (:*: MajMode ()) (Rec TMinBorrow)) (:+: (CEq Ton_Tm_1_ (:*: mode_a2D2Y ()) (:*: MinMode ()) (Rec (SD MinMode I MinClass))) (CEq Ton_Tm_6_bor_ (:*: mode_a2D2Y ()) (:*: MinMode ()) (Rec TMajBorrow))))
type RepDom_ mode_a2D2U = :+: (:+: (CEq Dom_D_1_ () () (:*: (Rec (SDom mode_a2D2U)) (Rec (Dom mode_a2D2U)))) (:+: (CEq Dom_D_2_ () () (Rec (SD mode_a2D2U V DomClass))) (CEq Dom_D_3_ () () (Rec (SD mode_a2D2U V MajClass))))) (:+: (:+: (CEq Dom_D_4_ (:*: mode_a2D2U ()) (:*: MajMode ()) (Rec (SD MajMode VII MinClass))) (CEq Dom_D_8_bor_ (:*: mode_a2D2U ()) (:*: MajMode ()) (Rec DMinBorrow))) (:+: (CEq Dom_Dm_4_ (:*: mode_a2D2U ()) (:*: MinMode ()) (Rec (SD MinMode VIIb MajClass))) (CEq Dom_Dm_8_bor_ (:*: mode_a2D2U ()) (:*: MinMode ()) (Rec DMajBorrow))))
type RepSDom_ mode_a2D2Q = :+: (:+: (:+: (CEq SDom_S_1_par_ () () (Rec (SD mode_a2D2Q II MinClass))) (:+: (CEq SDom_S_2_par_ () () (:*: (Rec (SD mode_a2D2Q II DomClass)) (Rec (Final II MinClass)))) (CEq SDom_S_3_ (:*: mode_a2D2Q ()) (:*: MajMode ()) (Rec (SD MajMode IV MajClass))))) (:+: (:+: (CEq SDom_S_3_bls_ () () (Rec (Final IV DomClass))) (CEq SDom_S_4_ (:*: mode_a2D2Q ()) (:*: MajMode ()) (:*: (Rec (SD MajMode III MinClass)) (Rec (Final IV MajClass))))) (:+: (CEq SDom_S_7_ (:*: mode_a2D2Q ()) (:*: MajMode ()) (:*: (Rec (SD MajMode III MinClass)) (Rec (Final II MinClass)))) (CEq SDom_S_5_par_ (:*: mode_a2D2Q ()) (:*: MajMode ()) (Rec (SD MajMode VI MinClass)))))) (:+: (:+: (CEq SDom_S_9_bor_ (:*: mode_a2D2Q ()) (:*: MajMode ()) (Rec SMinBorrow)) (:+: (CEq SDom_Sm_3_ (:*: mode_a2D2Q ()) (:*: MinMode ()) (Rec (SD MinMode IV MinClass))) (CEq SDom_Sm_4_ (:*: mode_a2D2Q ()) (:*: MinMode ()) (:*: (Rec (SD MinMode IIIb MajClass)) (Rec (Final IV MinClass)))))) (:+: (:+: (CEq SDom_Sm_7_ (:*: mode_a2D2Q ()) (:*: MinMode ()) (:*: (Rec (SD MinMode IIIb MajClass)) (Rec (Final II MinClass)))) (CEq SDom_Sm_5_par_ (:*: mode_a2D2Q ()) (:*: MinMode ()) (Rec (SD MinMode VIb MajClass)))) (:+: (CEq SDom_Sm_9_bor_ (:*: mode_a2D2Q ()) (:*: MinMode ()) (Rec SMajBorrow)) (CEq SDom_Sm_6_ (:*: mode_a2D2Q ()) (:*: MinMode ()) (Rec (SD MinMode IIb MajClass))))))
type RepTMinBorrow_ = CEq TMinBorrow_Tm_21_bor_ () () (Rec (SD MinMode I MinClass))
type RepDMinBorrow_ = CEq DMinBorrow_Dm_24_bor_ () () (Rec (SD MinMode VIIb MajClass))
type RepSMinBorrow_ = :+: (CEq SMinBorrow_Sm_20_bor_ () () (Rec (SD MinMode IV MinClass))) (CEq SMinBorrow_Sm_22_bor_ () () (Rec (SD MinMode IIb MajClass)))
type RepTMajBorrow_ = CEq TMajBorrow_T_21_bor_ () () (Rec (SD MajMode I MajClass))
type RepDMajBorrow_ = CEq DMajBorrow_D_24_bor_ () () (Rec (SD MajMode VII MinClass))
type RepSMajBorrow_ = CEq SMajBorrow_S_20_bor_ () () (Rec (SD MajMode IV MajClass))
type NumData = Double
type Root = Note DiatonicNatural
type ScaleDegree = Note DiatonicDegree
type Interval = Note IntNat
type ChordLabel = Chord Root
type ChordDegree = Chord ScaleDegree
type ErrMsg = Doc
type Field a = a ::: TyNil
type :> lab a = Field (Labelled lab a)
type InitHandler a = AppConfig -> IO a
type RespondHandler a = AppConfig -> a -> ServletRequest -> IO (Response ByteString)
type DoneHandler a = AppConfig -> a -> IO ()
type ResponseCode = (Int, Int, Int)
type StateVar = MVar State
type DVector = Vector Double
type DMatrix = Matrix Double
type Input = Vector Double
type Inputs = Matrix Double
type CovarianceMatrix = Matrix Double
type Targets = Vector Double
type Outputs = Vector Double
type LaplaceConvergenceTest = LaplaceValue -> LaplaceValue -> Bool
type EPConvergenceTest = EPValue -> EPValue -> Bool
type EPState = (EPSiteState, StdGen, Int)
type SiteOrder = State EPState [Int]
type Index = IndexM IO
type TreeMonad m = RWST AnchoredPath () (TreeState m) m
type TreeIO = TreeMonad IO
type HashSet a = Set a
type HashMap k v = Map k v
type BasicHashTable k v = IOHashTable (HashTable) k v
type CuckooHashTable k v = IOHashTable (HashTable) k v
type LinearHashTable k v = IOHashTable (HashTable) k v
type IOHashTable tabletype k v = tabletype (PrimState IO) k v
type Map a k v = a RealWorld k v
type Algorithm = HashTable
type Basic = HashTable
type Cuckoo = HashTable
type Linear = HashTable
type Key k = (Hashable k, Eq k)
type Time = Double
type Id = Int
type Acceptor pkt st = pkt -> AcceptResult pkt st
type SimMonad a = StateT SimState IO a
type Time = Double
type Id = Int
type SimMonad a = StateT SimState IO a
type Acceptor pkt st = pkt -> AcceptResult pkt st
type Cod2 p = NatCod (Cod p)
type Dom2 p = NatDom (Cod p)
type Opd f = Op (Dom f)
type NatId p = Endo (Nat (Dom p) (Cod p)) p
type Endo p a = p a a
type Presheaves p = Nat (Op p) (->)
type Copresheaves p = Nat p (->)
type Iso c d e s t a b = forall p. (Bifunctor p, Opd p ~ c, Dom2 p ~ d, Cod2 p ~ e) => p a b -> p s t
type Prof c d = Nat (Op c) (Nat d (->))
type Compose = (Any Compose :: (i -> i -> *) -> (j -> j -> *) -> (k -> k -> *) -> (j -> k) -> (i -> j) -> i -> k)
type Id = (Any Id :: (i -> i -> *) -> i -> i)
type HaskbotM = EnvironT (ErrorT Status IO)
type EnvironT m = ReaderT Environment m
type Params = Map Text Text
type HandlerFn = SlashCom -> HaskbotM (Maybe Incoming)
type CompletionFunc m = (String, String) -> m (String, [Completion])
type Delimiter = ByteString
type BFExError = ExecutionError Int8
type BFTape = Tape Int8
type Program = [Op]
type Step a = a -> StepCode ()
type Step a = a -> StepCode ()
type Step a = a -> StepCode ()
type Step a = a -> StepCode ()
type Step a = a -> StepCode ()
type Char = Char
type String = [Char]
type Int = Int
type Double = Double
type Index = HashMap Text Text
type MapForest k a = Map k (MapTree k a)
type TreeFormat a = MapForest String (Leaf a)
type ExpG t = Generate (Expression t)
type ModuleG = ModuleM (Maybe [ExportSpec])
type PosToken = (Token, (Pos, String))
type ModRegister = Word16
type SlaveId = Word8
type FunctionCode = Word8
type ExtensionSet = Set KnownExtension
type Table = Map QName [Symbol]
type WcNames = [WcField]
type Properties = HashMap Text PropertyValue
type RelationshipType = Text
type Label = Text
type Hostname = ByteString
type Port = Int
type Params = HashMap Text ParamValue
type LabelSet = HashSet Label
type Batch a = State BatchState a
type Params = HashMap Text ParamValue
type TransError = (Text, Text)
type Transaction a = ExceptT TransError (ReaderT Connection (StateT TransState (ResourceT IO))) a
type RelFilter = (RelationshipType, Direction)
type IdPath = Path NodePath (RelPath, ConcreteDirection)
type FullPath = Path Node Relationship
type Hostname = ByteString
type Port = Int
type Properties = HashMap Text PropertyValue
type RelationshipType = Text
type Label = Text
type Packages = [InstalledPackageInfo]
type CompileFn = FilePath -> Maybe Language -> [Extension] -> CpphsOptions -> PackageId -> PackageDBStack -> [InstalledPackageId] -> [FilePath] -> IO ()
type PlayerId = Int
type Round = Int
type Units = (Int, Int, Int)
type Coord = (Int, Int)
type Move = Maybe (Int, Int, Units)
type Strategy = State -> Move
type HsContext = [HsAsst]
type HsAsst = (HsQName, [HsType])
type Indent = Int
type Deriving = (QName, [Type])
type Context = [Asst]
type Indent = Int
type ForestSpan = (ForestPos, ForestPos)
type ForestPos = (ForestLine, Int)
type RowOffset = Int
type ColOffset = Int
type Row = Int
type Col = Int
type SimpPos = (Int, Int)
type SimpSpan = (SimpPos, SimpPos)
type LayoutTree a = Tree (Entry a)
type SourceTree a = DUALTree Transformation (Up a) Annot (Prim a)
type GhcPosToken = (Located Token, String)
type Q = TcCtxt
type VarEnv = [(QName, Sigma)]
type Zord64 = Word64
type XmppMessage = Content Posn
type XmppStateT a = StateT Stream IO a
type XmppThreadT a = ReaderT Thread IO a
type String = [Char]
type Rational = Ratio Integer
type ShowS = String -> String
type ReadS a = String -> [(a, String)]
type FilePath = String
type IOError = IOException
type String = [Char]
type Rational = Ratio Integer
type IOError = IOError
type CString = Ptr CChar
type CStringLen = (Ptr CChar, Int)
type CWString = Ptr CWchar
type CWStringLen = (Ptr CWchar, Int)
type FinalizerPtr a = FunPtr (Ptr a -> IO ())
type FinalizerEnvPtr env a = FunPtr (Ptr env -> Ptr a -> IO ())
type FilePath = String
type String = [Char]
type Rational = Ratio Integer
type ShowS = String -> String
type ReadS a = String -> [(a, String)]
type FilePath = String
type IOError = IOException
type Rational = Ratio Integer
type FilePath = String
type IOError = IOException
type String = [Char]
type Rational = Ratio Integer
type FilePath = String
type IOError = IOException
type String = [Char]
type BoundedString n = BoundedList Char n
type BStr0 = BoundedString N0
type BStr1 = BoundedString N1
type BStr2 = BoundedString N2
type BStr3 = BoundedString N3
type BStr4 = BoundedString N4
type BStr5 = BoundedString N5
type BStr6 = BoundedString N6
type BStr7 = BoundedString N7
type BStr8 = BoundedString N8
type BStr9 = BoundedString N9
type BStr10 = BoundedString N10
type BStr11 = BoundedString N11
type BStr12 = BoundedString N12
type BStr13 = BoundedString N13
type BStr14 = BoundedString N14
type BStr15 = BoundedString N15
type BStr16 = BoundedString N16
type BStr17 = BoundedString N17
type BStr18 = BoundedString N18
type BStr19 = BoundedString N19
type BStr20 = BoundedString N20
type BStr21 = BoundedString N21
type BStr22 = BoundedString N22
type BStr23 = BoundedString N23
type BStr24 = BoundedString N24
type BStr25 = BoundedString N25
type BStr26 = BoundedString N26
type BStr27 = BoundedString N27
type BStr28 = BoundedString N28
type BStr29 = BoundedString N29
type BStr30 = BoundedString N30
type BStr31 = BoundedString N31
type BStr32 = BoundedString N32
type BStr33 = BoundedString N33
type BStr34 = BoundedString N34
type BStr35 = BoundedString N35
type BStr36 = BoundedString N36
type BStr37 = BoundedString N37
type BStr38 = BoundedString N38
type BStr39 = BoundedString N39
type BStr40 = BoundedString N40
type BStr41 = BoundedString N41
type BStr42 = BoundedString N42
type BStr43 = BoundedString N43
type BStr44 = BoundedString N44
type BStr45 = BoundedString N45
type BStr46 = BoundedString N46
type BStr47 = BoundedString N47
type BStr48 = BoundedString N48
type BStr49 = BoundedString N49
type BStr50 = BoundedString N50
type BStr51 = BoundedString N51
type BStr52 = BoundedString N52
type BStr53 = BoundedString N53
type BStr54 = BoundedString N54
type BStr55 = BoundedString N55
type BStr56 = BoundedString N56
type BStr57 = BoundedString N57
type BStr58 = BoundedString N58
type BStr59 = BoundedString N59
type BStr60 = BoundedString N60
type BStr61 = BoundedString N61
type BStr62 = BoundedString N62
type BStr63 = BoundedString N63
type BStr64 = BoundedString N64
type BStr65 = BoundedString N65
type BStr66 = BoundedString N66
type BStr67 = BoundedString N67
type BStr68 = BoundedString N68
type BStr69 = BoundedString N69
type BStr70 = BoundedString N70
type BStr71 = BoundedString N71
type BStr72 = BoundedString N72
type BStr73 = BoundedString N73
type BStr74 = BoundedString N74
type BStr75 = BoundedString N75
type BStr76 = BoundedString N76
type BStr77 = BoundedString N77
type BStr78 = BoundedString N78
type BStr79 = BoundedString N79
type BStr80 = BoundedString N80
type BStr81 = BoundedString N81
type BStr82 = BoundedString N82
type BStr83 = BoundedString N83
type BStr84 = BoundedString N84
type BStr85 = BoundedString N85
type BStr86 = BoundedString N86
type BStr87 = BoundedString N87
type BStr88 = BoundedString N88
type BStr89 = BoundedString N89
type BStr90 = BoundedString N90
type BStr91 = BoundedString N91
type BStr92 = BoundedString N92
type BStr93 = BoundedString N93
type BStr94 = BoundedString N94
type BStr95 = BoundedString N95
type BStr96 = BoundedString N96
type BStr97 = BoundedString N97
type BStr98 = BoundedString N98
type BStr99 = BoundedString N99
type BStr100 = BoundedString N100
type BStr101 = BoundedString N101
type BStr102 = BoundedString N102
type BStr103 = BoundedString N103
type BStr104 = BoundedString N104
type BStr105 = BoundedString N105
type BStr106 = BoundedString N106
type BStr107 = BoundedString N107
type BStr108 = BoundedString N108
type BStr109 = BoundedString N109
type BStr110 = BoundedString N110
type BStr111 = BoundedString N111
type BStr112 = BoundedString N112
type BStr113 = BoundedString N113
type BStr114 = BoundedString N114
type BStr115 = BoundedString N115
type BStr116 = BoundedString N116
type BStr117 = BoundedString N117
type BStr118 = BoundedString N118
type BStr119 = BoundedString N119
type BStr120 = BoundedString N120
type BStr121 = BoundedString N121
type BStr122 = BoundedString N122
type BStr123 = BoundedString N123
type BStr124 = BoundedString N124
type BStr125 = BoundedString N125
type BStr126 = BoundedString N126
type BStr127 = BoundedString N127
type BStr128 = BoundedString N128
type BStr129 = BoundedString N129
type BStr130 = BoundedString N130
type BStr131 = BoundedString N131
type BStr132 = BoundedString N132
type BStr133 = BoundedString N133
type BStr134 = BoundedString N134
type BStr135 = BoundedString N135
type BStr136 = BoundedString N136
type BStr137 = BoundedString N137
type BStr138 = BoundedString N138
type BStr139 = BoundedString N139
type BStr140 = BoundedString N140
type BStr141 = BoundedString N141
type BStr142 = BoundedString N142
type BStr143 = BoundedString N143
type BStr144 = BoundedString N144
type BStr145 = BoundedString N145
type BStr146 = BoundedString N146
type BStr147 = BoundedString N147
type BStr148 = BoundedString N148
type BStr149 = BoundedString N149
type BStr150 = BoundedString N150
type BStr151 = BoundedString N151
type BStr152 = BoundedString N152
type BStr153 = BoundedString N153
type BStr154 = BoundedString N154
type BStr155 = BoundedString N155
type BStr156 = BoundedString N156
type BStr157 = BoundedString N157
type BStr158 = BoundedString N158
type BStr159 = BoundedString N159
type BStr160 = BoundedString N160
type BStr161 = BoundedString N161
type BStr162 = BoundedString N162
type BStr163 = BoundedString N163
type BStr164 = BoundedString N164
type BStr165 = BoundedString N165
type BStr166 = BoundedString N166
type BStr167 = BoundedString N167
type BStr168 = BoundedString N168
type BStr169 = BoundedString N169
type BStr170 = BoundedString N170
type BStr171 = BoundedString N171
type BStr172 = BoundedString N172
type BStr173 = BoundedString N173
type BStr174 = BoundedString N174
type BStr175 = BoundedString N175
type BStr176 = BoundedString N176
type BStr177 = BoundedString N177
type BStr178 = BoundedString N178
type BStr179 = BoundedString N179
type BStr180 = BoundedString N180
type BStr181 = BoundedString N181
type BStr182 = BoundedString N182
type BStr183 = BoundedString N183
type BStr184 = BoundedString N184
type BStr185 = BoundedString N185
type BStr186 = BoundedString N186
type BStr187 = BoundedString N187
type BStr188 = BoundedString N188
type BStr189 = BoundedString N189
type BStr190 = BoundedString N190
type BStr191 = BoundedString N191
type BStr192 = BoundedString N192
type BStr193 = BoundedString N193
type BStr194 = BoundedString N194
type BStr195 = BoundedString N195
type BStr196 = BoundedString N196
type BStr197 = BoundedString N197
type BStr198 = BoundedString N198
type BStr199 = BoundedString N199
type BStr200 = BoundedString N200
type BStr201 = BoundedString N201
type BStr202 = BoundedString N202
type BStr203 = BoundedString N203
type BStr204 = BoundedString N204
type BStr205 = BoundedString N205
type BStr206 = BoundedString N206
type BStr207 = BoundedString N207
type BStr208 = BoundedString N208
type BStr209 = BoundedString N209
type BStr210 = BoundedString N210
type BStr211 = BoundedString N211
type BStr212 = BoundedString N212
type BStr213 = BoundedString N213
type BStr214 = BoundedString N214
type BStr215 = BoundedString N215
type BStr216 = BoundedString N216
type BStr217 = BoundedString N217
type BStr218 = BoundedString N218
type BStr219 = BoundedString N219
type BStr220 = BoundedString N220
type BStr221 = BoundedString N221
type BStr222 = BoundedString N222
type BStr223 = BoundedString N223
type BStr224 = BoundedString N224
type BStr225 = BoundedString N225
type BStr226 = BoundedString N226
type BStr227 = BoundedString N227
type BStr228 = BoundedString N228
type BStr229 = BoundedString N229
type BStr230 = BoundedString N230
type BStr231 = BoundedString N231
type BStr232 = BoundedString N232
type BStr233 = BoundedString N233
type BStr234 = BoundedString N234
type BStr235 = BoundedString N235
type BStr236 = BoundedString N236
type BStr237 = BoundedString N237
type BStr238 = BoundedString N238
type BStr239 = BoundedString N239
type BStr240 = BoundedString N240
type BStr241 = BoundedString N241
type BStr242 = BoundedString N242
type BStr243 = BoundedString N243
type BStr244 = BoundedString N244
type BStr245 = BoundedString N245
type BStr246 = BoundedString N246
type BStr247 = BoundedString N247
type BStr248 = BoundedString N248
type BStr249 = BoundedString N249
type BStr250 = BoundedString N250
type BStr251 = BoundedString N251
type BStr252 = BoundedString N252
type BStr253 = BoundedString N253
type BStr254 = BoundedString N254
type BStr255 = BoundedString N255
type BStr65535 = BoundedString N65535
type SqlTable = String
type SqlColumn = String
type SqlName = String
type TableName = String
type Attribute = String
type Scheme = [Attribute]
type Assoc = [(Attribute, PrimExpr)]
type Name = String
type Record r = RecNil -> r
type FieldDesc = (FieldType, Bool)
type FieldDesc = (FieldType, Bool)
type Record r = RecNil -> r
type Param = Either Int String
type Trivial k = Vect k ()
type DSum a b = Either a b
type Tensor a b = (a, b)
type F2 = Fp T2
type F3 = Fp T3
type F5 = Fp T5
type F7 = Fp T7
type F11 = Fp T11
type F13 = Fp T13
type F17 = Fp T17
type F19 = Fp T19
type F23 = Fp T23
type F29 = Fp T29
type F31 = Fp T31
type F37 = Fp T37
type F41 = Fp T41
type F43 = Fp T43
type F47 = Fp T47
type F53 = Fp T53
type F59 = Fp T59
type F61 = Fp T61
type F67 = Fp T67
type F71 = Fp T71
type F73 = Fp T73
type F79 = Fp T79
type F83 = Fp T83
type F89 = Fp T89
type F97 = Fp T97
type F4 = ExtensionField F2 ConwayF4
type F8 = ExtensionField F2 ConwayF8
type F9 = ExtensionField F3 ConwayF9
type F16 = ExtensionField F2 ConwayF16
type F25 = ExtensionField F5 ConwayF25
type F27 = ExtensionField F3 ConwayF27
type F32 = ExtensionField F2 ConwayF32
type QSqrt2 = ExtensionField Q (Sqrt T2)
type QSqrt3 = ExtensionField Q (Sqrt T3)
type QSqrt5 = ExtensionField Q (Sqrt T5)
type QSqrt7 = ExtensionField Q (Sqrt T7)
type QSqrtMinus1 = ExtensionField Q (Sqrt TMinus1)
type QSqrtMinus2 = ExtensionField Q (Sqrt (M TMinus1 T2))
type QSqrtMinus3 = ExtensionField Q (Sqrt (M TMinus1 T3))
type QSqrtMinus5 = ExtensionField Q (Sqrt (M TMinus1 T5))
type GlexPoly k v = Vect k (GlexMonomial v)
type LaurentPoly k = Vect k LaurentMonomial
type NCPoly v = Vect Q (NonComMonomial v)
type LPQ = LaurentMPoly Q
type TangleRep b = Vect (LaurentPoly Q) b
type LexPoly k v = Vect k (Lex v)
type GlexPoly k v = Vect k (Glex v)
type GrevlexPoly k v = Vect k (Grevlex v)
type Quaternion k = Vect k HBasis
type GroupAlgebra k = Vect k (Permutation Int)
type Octonion k = Vect k OBasis
type QNF = Vect Q QNFBasis
type Function = Vector Double -> Vector Double
type Jacobian = Vector Double -> Matrix Double
type UserName = String
type Password = String
type MailboxName = String
type UID = Word64
type Charset = String
type ActivationFunction = Double -> Double
type DerivativeFunction = Double -> Double
type ErrorFunction = Vector Double -> Vector Double -> Double
type CostFunction = Network -> Matrix Double -> Matrix Double -> Double
type CostDerivative = Network -> Matrix Double -> Matrix Double -> Matrix Double -> Matrix Double
type GradientFunction = CostFunction -> CostDerivative -> Network -> Matrix Double -> Matrix Double -> Vector Double
type FormedWord = Seq (Pos, Square)
type Keysym = Keysym
type Font = Font
type Surface = Surface
type Event = Event
type HOLTypeEnv = [(HOLType, HOLType)]
type SubstTrip = (HOLTypeEnv, [(TypeOp, HOLType)], [(TypeOp, TypeOp)])
type HOLTermEnv = [(HOLTerm, HOLTerm)]
type HOLRef = IORef
type PType thry = PData HOLType thry
type PTerm thry = PData HOLTerm thry
type PThm thry = PData HOLThm thry
type BlockLocator = [BlockHash]
type BlockHeaderCount = (BlockHeader, VarInt)
type NetworkAddressTime = (Word32, NetworkAddress)
type SecretT m = StateT (SecretState m) m
type Word512 = BigWord Mod512
type Word256 = BigWord Mod256
type Word160 = BigWord Mod160
type Word128 = BigWord Mod128
type TxHash = BigWord Mod256Tx
type BlockHash = BigWord Mod256Block
type CheckSum32 = Word32
type Entropy = ByteString
type Mnemonic = String
type Passphrase = String
type Seed = ByteString
type ChainCode = Word256
type KeyIndex = Word32
type RedeemScript = ScriptOutput
type SigCheck = [ScriptOp] -> TxSignature -> PubKey -> Bool
type CheckSum32 = Word32
type WorkingState = (ByteString, ByteString, Word16)
type TxHash = BigWord Mod256Tx
type BlockHash = BigWord Mod256Block
type Word512 = BigWord Mod512
type Word256 = BigWord Mod256
type Word160 = BigWord Mod160
type Word128 = BigWord Mod128
type FieldP = BigWord ModP
type FieldN = BigWord ModN
type ChainCode = Word256
type KeyIndex = Word32
type SecretT m = StateT (SecretState m) m
type Entropy = ByteString
type Mnemonic = String
type Passphrase = String
type Seed = ByteString
type NetworkAddressTime = (Word32, NetworkAddress)
type BlockLocator = [BlockHash]
type BlockHeaderCount = (BlockHeader, VarInt)
type RedeemScript = ScriptOutput
type SigCheck = [ScriptOp] -> TxSignature -> PubKey -> Bool
type Stack = [StackValue]
type SecretT m a = StateT (SecretState m) m a
type Hash512 = Ring Mod512
type Hash256 = Ring Mod256
type Hash160 = Ring Mod160
type BlockHeaderCount = (BlockHeader, VarInt)
type NetworkAddressTime = (Word32, NetworkAddress)
type WebWebRes m = m (WebRes m)
type Sitemap m = [SitemapT m (WebRes m)]
type HSPT m :: (* -> *) = XMLGenT (HSPT' m)
type Name = String
type Velocity = Float
type PField = Float
type Time = Float
type SoundTable instr = [(instr, Instrument)]
type ToSound instr = instr -> ([PField], Instrument)
type T = (Octave, Class)
type Octave = Int
type Absolute = Int
type Relative = Int
type T = [Absolute]
type Velocity = Rational
type T = Rational
type SFName = String
type SkipTime = Time
type ChanNum = Float
type Number = Int
type Parameter = Float
type Interval = (Float, Float)
type Coefficients = [Float]
type StartPt = Float
type SegLength = Float
type EndPt = Float
type Point = (Float, Float)
type PStrength = Float
type PNum = Float
type PhaseOffset = Float
type DCOffset = Float
type NHarms = Int
type LowestHarm = Int
type Mult = Float
type Header = (AudRate, CtrlRate)
type AudRate = Int
type CtrlRate = Int
type SigExp = T SigTerm
type DelayLine = DelayLineTerm SigExp
type Boolean = BooleanTerm SigExp
type Name = String
type Orc a b = State (OrcState a) b
type SoundId = Instrument
type InstrumentId = SoundId
type DrumId = SoundId
type Attribute = PField
type AttributeList = [Attribute]
type ToSound instr = instr -> (AttributeList, SoundId)
type InstrumentTable out instr = [(instr, InstrumentSigExp out)]
type InstrumentTableWithAttributes out instr = [InstrumentAssociation out instr]
type InstrumentSigExp out = SigExp -> SigExp -> SigExp -> out
type DrumTable out drum = [(drum, DrumSigExp out)]
type DrumTableWithAttributes out drum = [DrumAssociation out drum]
type DrumSigExp out = SigExp -> SigExp -> out
type Dur = Rational
type TagMedium key prim = T (Tag key prim)
type T key prim = [(key, TagMedium key prim)]
type T key control prim = [(key, TagMedium key control prim)]
type TagMedium key control prim = T control (Tag key prim)
type T = Dur
type Ratio = T
type Offset = Rational
type Dur = T
type Atom note = Maybe note
type DurRatio = Dur
type PlayerName = String
type T note = T Control (Primitive note)
type T attr = T (Note attr)
type T = [Relative]
type Inversion = Int
type Boundary = (T, T)
type Note = Note NoteAttributes
type T = T NoteAttributes
type T drum instr = T (Note drum instr)
type Dur = T
type T = T Drum Instr
type Note = Note Drum Instr
type NoteBody = NoteBody Drum Instr
type Instr = Instrument
type Dur = T
type T = Drum
type T = [Bool]
type ToMusicWithMusic drum instr = T drum instr -> T -> T drum instr
type ToMusicWithDrum drum instr = drum -> T -> T drum instr
type Vector a = [a]
type Matrix a = [Vector a]
type AT a = Vector a -> Vector a
type IFS a = Array Int (AT a)
type UpDownPattern = [(Dur, Direction)]
type DelayedNote = (Offset, (Dur, Maybe T))
type T time dyn note = T time (Event time dyn note)
type Padded time dyn note = T time (Event time dyn note)
type PlayerMap time dyn note = PlayerName -> Player time dyn note
type UpdateContext time dyn note a = (a -> a) -> Context time dyn note -> Context time dyn note
type PaddedWithRests time dyn note = T time (Maybe (Event time dyn note))
type Monad time dyn note = Reader (Context time dyn note) (PaddedWithRests time dyn note, time)
type NoteFun time dyn note = Context time dyn note -> Dur -> note -> T time dyn note
type PhraseFun time dyn note = PhraseAttribute -> Monad time dyn note -> Monad time dyn note
type NotateFun = ()
type T time note = T time (Event time note)
type Padded time note = T time (Event time note)
type Accum = (Dur, Octave)
type Instrument = Int
type T = T Drum Instr
type Note = Note Drum Instr
type NoteBody = NoteBody Drum Instr
type Instr = String
type Drum = String
type Dur = T
type ChannelTable instr = [(instr, Channel)]
type ChannelProgramTable instr = [(instr, (Channel, Program))]
type ChannelProgramPitchTable instr = [(instr, (Channel, Program, Pitch))]
type ToChannel instr = instr -> Channel
type ToChannelProgram instr = instr -> (Channel, Program)
type ToChannelProgramPitch instr = instr -> (Channel, Program, Pitch)
type FromChannel instr = Channel -> Maybe instr
type FromChannelProgram instr = (Channel, Program) -> Maybe instr
type FromChannelProgramPitch instr = (Channel, Program, Pitch) -> Maybe instr
type T time dyn note = Player time dyn note
type Name = PlayerName
type Map time dyn note = PlayerMap time dyn note
type PhraseInterpreter time dyn note = PhraseAttribute -> (T time dyn note, time) -> (T time dyn note, time)
type EventModifier time dyn note = Event time dyn note -> Event time dyn note
type T time dyn note = Context time dyn note
type Pat = [SNote]
type SNote = [(Absolute, Dur)]
type StdContext = T Float Float (Note Drum Instr)
type MidiArrange = (ChannelTable Instr, StdContext, T)
type T = T -> T
type T = [Statement]
type Bpm = Int
type StartTime = Time
type Duration = Time
type Volume = Float
type Table = Int
type CreatTime = Time
type TableSize = Int
type Normalize = Bool
type Tables = T
type TutMelody params = T (TutAttr params)
type Pair = (Float, Float)
type Quadruple = (Float, Float, Float, Float)
type TutOrchestra out = (Header, InstrumentTableWithAttributes out Instrument)
type TutMelody params = T (TutAttr params)
type Pair = (Float, Float)
type Quadruple = (Float, Float, Float, Float)
type TutOrchestra out = (Header, [(Instrument, OutFunc out)])
type Channel = Int
type NumberChannels = Int
type Name = String
type Attribute = Double
type AttributeList = [Attribute]
type ToSound instr = instr -> (AttributeList, Name)
type Table params sound = [(sound, Sound params)]
type TableWithAttributes params sound = [Assign params sound]
type TableWithChannels params sound = [(Channel, Assign params sound)]
type Sound params = params -> UGen
type InstrumentTable instr = Table InstrumentParameters instr
type InstrumentTableWithAttributes instr = TableWithAttributes InstrumentParameters instr
type InstrumentTableWithChannels instr = TableWithChannels InstrumentParameters instr
type Instrument = Sound InstrumentParameters
type InstrumentAssign instr = Assign InstrumentParameters instr
type DrumTable instr = Table DrumParameters instr
type DrumTableWithAttributes instr = TableWithAttributes DrumParameters instr
type DrumTableWithChannels instr = TableWithChannels DrumParameters instr
type Drum = Sound DrumParameters
type DrumAssign instr = Assign DrumParameters instr
type FromNote dyn note = dyn -> Relative -> note -> T
type NodeId = Int
type NodeIdGen a = T NodeId a
type T time = T time (NodeId, Maybe (time, T))
type SoundHandler note = (FromNote Double note, [SoundAssign])
type Time = Double
type Song = (String, T)
type Instrument attr = Sound InstrumentParameters attr
type Drum attr = Sound DrumParameters attr
type DrumAttributes = SoundAttributes DrumParameters
type InstrumentAttributes = SoundAttributes InstrumentParameters
type Instrument attr = Sound InstrumentParameters attr
type Drum attr = Sound DrumParameters attr
type DrumAttributes = SoundAttributes DrumParameters
type InstrumentAttributes = SoundAttributes InstrumentParameters
type Environment t a = StateT Channel (ReaderT t IO) a
type InstrumentUGen = UGen -> UGen -> UGen
type DrumUGen = UGen -> UGen
type Track = [MEvent]
type MFType = Int
type ElapsedTime = Int
type MPitch = Int
type Velocity = Int
type ControlNum = Int
type PBRange = Int
type ProgNum = Int
type Pressure = Int
type MidiChannel = Int
type ControlVal = Int
type MTempo = Int
type SMPTEHours = Int
type SMPTEMins = Int
type SMPTESecs = Int
type SMPTEFrames = Int
type SMPTEBits = Int
type GenMidiName = String
type GenMidiTable = [(GenMidiName, Int)]
type Pitch = (PitchClass, Octave)
type Octave = Int
type Dur = Ratio Int
type IName = String
type PName = String
type AbsPitch = Int
type Performance = [Event]
type Time = Float
type DurT = Float
type Volume = Float
type PMap = PName -> Player
type Key = AbsPitch
type NoteFun = Context -> Pitch -> Dur -> [NoteAttribute] -> Performance
type PhraseFun = PMap -> Context -> [PhraseAttribute] -> Music -> (Performance, DurT)
type NotateFun = ()
type UserPatchMap = [(IName, GenMidiName, MidiChannel)]
type Endpoint = String
type Query = String
type DefaultGraph = Maybe String
type NamedGraph = String
type ExtraParameters = (Key, Value)
type Key = String
type Value = String
type SpellChecker = ForeignPtr ()
type Ex c s r = Stmt c -> Tx c s r
type TxMode = Maybe (TxIsolationLevel, TxWriteMode)
type TxWriteMode = Maybe Bool
type TxStream c s = TxStreamListT s (Tx c s)
type ResultRow c = Vector (ResultValue c)
type ResultStream c = ListT IO (ResultRow c)
type ResultMatrix c = Vector (ResultRow c)
type TxMode = Maybe (TxIsolationLevel, TxWriteMode)
type TxWriteMode = Maybe Bool
type Tx c = FreeT (TxF c) (MaybeT (EitherT (TxError c) IO))
type ErrorCode = ByteString
type MuContext m = Text -> m (MuType m)
type Ext = forall b. (Data b, Typeable b) => b -> String
type URL = String
type JSAny = Ptr Any
type PropID = String
type ElemID = String
type QuerySelector = String
type ElemClass = String
type AttrValue = String
type JSAny = Ptr Any
type URL = String
type URL = String
type Key = String
type Val = String
type Inbox = MBox Recv
type Outbox = MBox Send
type Put = PutM ()
type Point = (Double, Double)
type Vector = (Double, Double)
type Angle = Double
type Sessions = Set SessionID
type SessionID = Word64
type JSAny = Ptr Any
type URL = String
type Inbox = MBox Recv
type Outbox = MBox Send
type Perch = PerchM ()
type Attribute = (String, String)
type Perch = PerchM ()
type Attribute = (String, String)
type Loc = Int
type Fixity = Int
type Arity = Int
type IOError = IOException
type String = List Char
type ReadS a = Fun String (List (Tuple2 a String))
type ReadS___1 a = String
type ReadS___2 a = List (Tuple2 a String)
type ShowS = Fun String String
type ShowS___1 = String
type ShowS___2 = String
type FilePath = String
type Rational = Ratio Integer
type Rational___1 = Ratio Integer
type IOError = IOException
type String = List Char
type ReadS a = Fun String (List (Tuple2 a String))
type ReadS___1 a = String
type ReadS___2 a = List (Tuple2 a String)
type ShowS = Fun String String
type ShowS___1 = String
type ShowS___2 = String
type FilePath = String
type IOError = IOException
type String = List Char
type Rational = Ratio Integer
type String = List Char
type Rational = Ratio Integer
type FilePath = String
type IOError = IOException
type FilePath = String
type String = List Char
type ClassName = String
type PackageName = String
type PageStyle = String
type LaTeXT_ m = LaTeXT m ()
type LaTeXM = LaTeXT Identity
type Point = (Double, Double)
type Printer = (Expr -> String, Bool -> String)
type Mapping = Map Var Bool
type Microseconds = Int
type Request req a = (Eq (req a), Hashable (req a), Typeable (req a), Show (req a), Show a)
type UserAccessToken = AccessToken UserKind
type Token = Either String (Posn, TokenT)
type Token = (Posn, TokenT)
type Constructors = [(Name, [StructType])]
type AttrFields = [(Name, StructType)]
type SymTab a = [(String, a)]
type Attribute = (QName, AttValue)
type ProcessingInstruction = (PITarget, String)
type SDDecl = Bool
type VersionInfo = String
type Comment = String
type PITarget = String
type NotationType = [Name]
type Enumeration = [NmToken]
type IncludeSect = [ExtSubsetDecl]
type IgnoreSect = [IgnoreSectContents]
type EntityRef = Name
type CharRef = Int
type PEReference = Name
type Name = String
type Names = [Name]
type NmToken = String
type NmTokens = [NmToken]
type CharData = String
type CDSect = CharData
type CFilter i = Content i -> [Content i]
type LabelFilter i a = Content i -> [(a, Content i)]
type XParser a = Parser SymTabs (Posn, TokenT) a
type XParser a = Parser SymTabs (Posn, TokenT) a
type Particle = Maybe (Either ChoiceOrSeq Group)
type Mixed = Bool
type Nillable = Bool
type Fixed = Bool
type TargetNamespace = URI
type Block = Final
type SchemaLocation = String
type DefaultValue = String
type FixedValue = String
type Regexp = String
type URI = String
type TypeName = String
type Boolean = Bool
type Attribute = (QName, AttValue)
type XMLParser a = Parser (Content Posn) a
type XsdParser a = Parser (Content Posn) a
type Comment = Maybe String
type DFilter i = Content i -> Content i -> [Content i]
type XMLParser a = Parser (Content Posn) a
type Parser = Parsec ByteString ParserState
type Err m a = ExceptT String m a
type XmlRpcMethod = (MethodCall -> ServerResult, Signature)
type ServerResult = Err IO MethodResponse
type Signature = ([Type], Type)
type Help = String
type MethodInfo = (String, [Signature], Help)
type Fixed256 = Fixed Precision256
type Time = Milli
type InterfaceName = String
type EnumName = String
type Argument = (String, ArgumentType, Bool)
type MessageName = String
type ProtocolName = String
type EventLoopFdFunc = Int -> ClientState -> IO Bool
type EventLoopTimerFunc = IO Bool
type EventLoopSignalFunc = Int -> IO Bool
type EventLoopIdleFunc = IO ()
type EliminationOrder dv = [dv]
type DVISet = [DVI]
type CPT = PrivateCPT (Vector) Double
type MAXCPT = PrivateCPT (Vector) (Double, PossibleInstantiations)
type GMState g e f = (AuxiliaryState, g e f)
type DirectedSG = SimpleGraph DE
type UndirectedSG = SimpleGraph UE
type SBN f = DirectedSG () f
type BayesianNetwork g f = g () f
type EliminationOrder dv = [dv]
type JunctionTree f = JTree Cluster f
type BNMonad g f a = NetworkMonad g () f a
type InfluenceDiagram = DirectedSG EdgeKind IDValue
type DecisionFactor = PrivateCPT (Vector) DVI
type IDMonad g a = NetworkMonad g EdgeKind IDValue a
type DVISet = [DVI]
type Sample g a = BayesianNetwork g a
type ContinuousNetwork = SBN Distri
type ContinuousSample = SBN CVI
type CNMonad a = GraphMonad DirectedSG () Distri a
type ContinuousNetwork = SBN Distri
type ContinuousSample = SBN CVI
type BeanstalkServer = MVar Socket
type Fun_FFI_GESVX el = Ptr Fact_C -> Ptr Trans_C -> Ptr Int32 -> Ptr Int32 -> Ptr el -> Ptr Stride_C -> Ptr Double -> Ptr Stride_C -> Ptr Int32 -> Ptr Equilib_C -> Ptr el -> Ptr el -> Ptr el -> Ptr Stride_C -> Ptr el -> Ptr Stride_C -> Ptr el -> Ptr el -> Ptr el -> Ptr el -> Ptr Int32 -> Ptr Int32 -> IO ()
type SYEV_FUN_FFI elem = Ptr JobTy -> Ptr UploTy -> Ptr Int32 -> Ptr elem -> Ptr Int32 -> Ptr elem -> Ptr Info -> IO ()
type GESV_FUN_FFI elem = Ptr Int32 -> Ptr Int32 -> Ptr elem -> Ptr Int32 -> Ptr Int32 -> Ptr elem -> Ptr Int32 -> Ptr Info -> IO ()
type Row = Row
type Column = Column
type IODenseMatrix = MDenseMatrix RealWorld
type GemvFunFFI sc el = CBLAS_ORDERT -> CBLAS_TRANSPOSET -> CInt -> CInt -> sc -> Ptr el -> CInt -> Ptr el -> CInt -> sc -> Ptr el -> CInt -> IO ()
type TrsvFunFFI el = CBLAS_ORDERT -> CBLAS_UPLOT -> CBLAS_TRANSPOSET -> CBLAS_DIAGT -> CInt -> Ptr el -> CInt -> Ptr el -> CInt -> IO ()
type SymvFunFFI el = CBLAS_ORDERT -> CBLAS_UPLOT -> CInt -> el -> Ptr el -> CInt -> Ptr el -> CInt -> el -> Ptr el -> CInt -> IO ()
type GemmFunFFI scale el = CBLAS_ORDERT -> CBLAS_TRANSPOSET -> CBLAS_TRANSPOSET -> CInt -> CInt -> CInt -> scale -> Ptr el -> CInt -> Ptr el -> CInt -> scale -> Ptr el -> CInt -> IO ()
type SymmFunFFI scale el = CBLAS_ORDERT -> CBLAS_SIDET -> CBLAS_UPLOT -> CInt -> CInt -> scale -> Ptr el -> CInt -> Ptr el -> CInt -> scale -> Ptr el -> CInt -> IO ()
type SyrkFunFFI scale el = CBLAS_ORDERT -> CBLAS_UPLOT -> CBLAS_TRANSPOSET -> CInt -> CInt -> scale -> Ptr el -> CInt -> Ptr el -> CInt -> scale -> Ptr el -> CInt -> IO ()
type Syr2kFunFFI scale el = CBLAS_ORDERT -> CBLAS_UPLOT -> CBLAS_TRANSPOSET -> CInt -> CInt -> scale -> Ptr el -> CInt -> Ptr el -> CInt -> scale -> Ptr el -> CInt -> IO ()
type TrmmFunFFI scale el = CBLAS_ORDERT -> CBLAS_SIDET -> CBLAS_UPLOT -> CBLAS_TRANSPOSET -> CBLAS_DIAGT -> CInt -> CInt -> scale -> Ptr el -> CInt -> Ptr el -> CInt -> Ptr el -> CInt -> IO ()
type TrsmFunFFI scale el = CBLAS_ORDERT -> CBLAS_SIDET -> CBLAS_UPLOT -> CBLAS_TRANSPOSET -> CBLAS_DIAGT -> CInt -> CInt -> scale -> Ptr el -> CInt -> Ptr el -> CInt -> Ptr el -> CInt -> IO ()
type HemmFunFFI el = CBLAS_ORDERT -> CBLAS_SIDET -> CBLAS_UPLOT -> CInt -> CInt -> Ptr el -> Ptr el -> CInt -> Ptr el -> CInt -> Ptr el -> CInt -> IO ()
type HerkFun scale el = CBLAS_ORDERT -> CBLAS_SIDET -> CBLAS_TRANSPOSET -> CInt -> CInt -> scale -> Ptr el -> CInt -> Ptr el -> CInt -> scale -> Ptr el -> CInt -> IO ()
type Her2kFunFFI scale el = CBLAS_ORDERT -> CBLAS_SIDET -> CBLAS_TRANSPOSET -> CInt -> CInt -> Ptr el -> Ptr el -> CInt -> Ptr el -> CInt -> scale -> Ptr el -> CInt -> IO ()
type GemmFun el orient s m = Transpose -> Transpose -> el -> el -> MDenseMatrix s orient el -> MDenseMatrix s orient el -> MDenseMatrix s orient el -> m ()
type GemvFun el orient s m = Transpose -> el -> el -> MDenseMatrix s orient el -> MDenseVector s Direct el -> MDenseVector s Direct el -> m ()
type TrsvFun el orient s m = MatUpLo -> Transpose -> MatDiag -> MDenseMatrix s orient el -> MDenseVector s Direct el -> m ()
type GemvFun el orient s m = Transpose -> el -> el -> MDenseMatrix s orient el -> MDenseVector s Direct el -> MDenseVector s Direct el -> m ()
type GemmFun el orient s m = Transpose -> Transpose -> el -> el -> MDenseMatrix s orient el -> MDenseMatrix s orient el -> MDenseMatrix s orient el -> m ()
type TrsvFun el orient s m = MatUpLo -> Transpose -> MatDiag -> MDenseMatrix s orient el -> MDenseVector s Direct el -> m ()
type K = KT IO
type Config' = Either String Config
type PortableFilePath = RefDirs -> FilePath
type KeysList = [(String, K ())]
type KeysMap = Map String (K ())
type KeyEventCallback = [Modifier] -> String -> IO Bool
type CommandsList = [(String, [String] -> K String)]
type CommandsMap = Map String ([String] -> K String)
type Classic = CardT Suit Index
type ClassicDeck = Deck Suit Index
type ClassicDeckST = DeckST Suit Index
type ClassicHand = Hand Suit Index
type Cards s i = [CardT s i]
type DeckST s i = State (Deck s i)
type C = Colour Double
type Ca = AlphaColour Double
type Ls a = [Pt a]
type R = Double
type Driver = Free DriverF
type Sample = Double
type SampleData a = UArray Int a
type Track a = [(a, Message)]
type Ticks = Int
type Time = Double
type Channel = Int
type Key = Int
type Velocity = Int
type Pressure = Int
type Preset = Int
type Bank = Int
type PitchWheel = Int
type Tempo = Int
type Numb = Int
type Size = Numb
type Point = (Numb, Numb)
type Vec = (Numb, Numb, Numb)
type Format = String
type ColorTag = String
type Projection = [(Numb, Side)]
type CubeSurf = [(Side, [Color])]
type ChildList = MVar [Weak Statement]
type Id = Int
type C_Comment = String
type C_Type = String
type C_QName = (String, String, String)
type C_Call = (Maybe String, String, [(Var_Ty, Id)])
type Var = (Var_Ty, TypeRep, Id, Maybe Var_Fld)
type Instructions = ([(Id, K)], [Var], [C_Call])
type Port_Index = Int
type Node = (Id, UDF)
type Edge = (Id, Id, (Port_Index, Edge_Ty))
type Graph = ([Node], [Edge])
type Analysis = [(Node, [Edge])]
type Gr = Gr UDF (Port_Index, Edge_Ty)
type Gr' = Gr String (Port_Index, Edge_Ty)
type Rec_Id = (Id, Id, TypeRep)
type Degree = (Int, Int)
type Port_Index = Int
type Wire = (Port, Port, Wire_Ty)
type Edge = (Id, Id, (Port_Index, Wire_Ty))
type Graph = ([Node], [Edge])
type Gr = Gr Node (Port_Index, Wire_Ty)
type Unary_Op a = a -> a
type Binary_Op a = a -> a -> a
type Ternary_Op a = a -> a -> a -> a
type Quaternary_Op a = a -> a -> a -> a -> a
type Quinary_Op a = a -> a -> a -> a -> a -> a
type Senary_Op a = a -> a -> a -> a -> a -> a -> a
type Binary_Fn i o = i -> i -> o
type T5 t = (t, t, t, t, t)
type Label = CUInt
type State = CUInt
type Graph = Table [Vertex]
type Vertex = Int
type Forest a = [Tree a]
type Env a b = FiniteMap a b
type PPDoc a = a -> Doc
type Name = String
type ScopedName = [String]
type Inherit = [Name]
type GUID = [String]
type LocSpec = (String, Maybe Integer, String, Maybe Int)
type ClassName = QualName
type TyVar = QualName
type TyCon = QualName
type VarName = QualName
type ConName = QualName
type Raises = [Name]
type Context = [String]
type CoClassMember = (Bool, Id, [Attribute])
type Member = (Type, [Attribute], [Id])
type SwitchArm = Param
type InterfaceDecl = Decl
type ModuleDecl = Decl
type DispInterfaceDecl = Decl
type LibraryDecl = Decl
type InterfaceInherit = [(QualName, Int)]
type Signed = Bool
type IsoEnv = Env String [(Bool, Result, [Param])]
type CoreDoc = PPDoc (Bool, Bool, Bool, Bool, String)
type DependInfo = [(Id, [Dependent])]
type IDLDoc = PPDoc ()
type TypeEnv = Env String (Maybe String, Type, [Attribute])
type SourceEnv = Env String ()
type ConstEnv = Env String (Either Int32 Expr)
type TagEnv = Env String (Maybe String, String)
type IfaceEnv = Env String Decl
type IsoEnv = Env String [(Result, [Param])]
type IfaceNukeEnv = Env String (Maybe Id)
type IsoEnv = Env String [(Result, [Param])]
type IfaceNukeEnv = Env String (Maybe Id)
type InputHook = IO CInt
type Translator = Ptr UD_t -> IO ()
type UD_vendor = CUInt
type UD_type = CUInt
type InputHook = IO (Maybe Word8)
type ModuleDocMap = Map String (Doc String)
type Par = ParM RTS
type Strategy a = a -> Par a
type StaticForceCC a = Static (Env -> Strategy (Closure a))
type ProtoStrategy a = a -> Par (IVar a)
type StaticToClosure a = Static (Env -> a)
type Channel = StorableArray (Int, Int) CFloat
type TagIteratorH = Ptr TagIterator
type TagContainerH = Ptr TagContainer
type ChannelH = Ptr Channel
type ArrayH = Ptr Array
type ChannelIteratorH = Ptr ChannelIterator
type FrameH = Ptr Frame
type DOMIOH = Ptr DOMIO
type FrameFileH = Ptr FrameFile
type FrameFileIteratorH = Ptr FrameFileIterator
type FILEH = Ptr FILE
type Heap pol item = HeapT (Prio pol item) (Val pol item)
type MinHeap a = Heap MinPolicy a
type MaxHeap a = Heap MaxPolicy a
type MinPrioHeap prio val = Heap FstMinPolicy (prio, val)
type MaxPrioHeap prio val = Heap FstMaxPolicy (prio, val)
type HStateT s m = StateT (History s) m
type Change a = a -> Maybe a
type StatoE m = UndoT Stato m
type Editor m = ErrorT Err (StatoE m)
type ParseE = GenParser Char ()
type Line = String
type CState = State Emulator
type HostName = String
type TaggedValue = Tagged Value
type EDNList = [TaggedValue]
type EDNVec = Vector TaggedValue
type EDNSet = Set TaggedValue
type EDNMap = Map Value TaggedValue
type Pair = (Value, TaggedValue)
type TaggedValue = Tagged Value
type Pair = (Value, TaggedValue)
type Splice n = HeistT n IO (DList (Chunk n))
type Splice n = HeistT n n Template
type Splices s = MapSyntax Text s
type Template = [Node]
type MIMEType = ByteString
type TPath = [ByteString]
type AttrSplice m = Text -> RuntimeSplice m [(Text, Text)]
type TemplateRepo = HashMap TPath DocumentFile
type TemplateLocation = EitherT [String] IO TemplateRepo
type SplicesM s a = MapSyntaxM Text s a
type Splices s = MapSyntax Text s
type TemplateRepo = HashMap TPath DocumentFile
type TemplateLocation = EitherT [String] IO TemplateRepo
type Template = [Node]
type TPath = [ByteString]
type MIMEType = ByteString
type AttrSplice m = Text -> RuntimeSplice m [(Text, Text)]
type JsonT m = ReaderT JsonInput m
type JsonTemplate m a = TemplateMonad (JsonT m) a
type JsonState m = TemplateState (JsonT m)
type JsonSpliceT m = Splice (JsonT m)
type JsonSplice = JsonSpliceT IO
type TypeConstraints info = [TypeConstraint info]
type Core_TypingStrategies = [Core_TypingStrategy]
type Core_Judgements = [Core_Judgement]
type Core_UserStatements = [Core_UserStatement]
type Token = (SourcePos, Lexeme)
type Alternatives = [Alternative]
type AnnotatedTypes = [AnnotatedType]
type Constructors = [Constructor]
type ContextItems = [ContextItem]
type Declarations = [Declaration]
type Exports = [Export]
type Expressions = [Expression]
type FieldDeclarations = [FieldDeclaration]
type FunctionBindings = [FunctionBinding]
type GuardedExpressions = [GuardedExpression]
type ImportDeclarations = [ImportDeclaration]
type Imports = [Import]
type Names = [Name]
type Patterns = [Pattern]
type Qualifiers = [Qualifier]
type RecordExpressionBindings = [RecordExpressionBinding]
type RecordPatternBindings = [RecordPatternBinding]
type Statements = [Statement]
type Strings = [(String)]
type Types = [Type]
type Message = [MessageLine]
type MessageBlocks = [MessageBlock]
type Errors = [Error]
type T_Alternative_v1 = (T_Alternative_vIn1) -> (T_Alternative_vOut1)
type T_Alternatives_v4 = (T_Alternatives_vIn4) -> (T_Alternatives_vOut4)
type T_AnnotatedType_v7 = (T_AnnotatedType_vIn7) -> (T_AnnotatedType_vOut7)
type T_AnnotatedTypes_v10 = (T_AnnotatedTypes_vIn10) -> (T_AnnotatedTypes_vOut10)
type T_Body_v13 = (T_Body_vIn13) -> (T_Body_vOut13)
type T_Constructor_v16 = (T_Constructor_vIn16) -> (T_Constructor_vOut16)
type T_Constructors_v19 = (T_Constructors_vIn19) -> (T_Constructors_vOut19)
type T_ContextItem_v22 = (T_ContextItem_vIn22) -> (T_ContextItem_vOut22)
type T_ContextItems_v25 = (T_ContextItems_vIn25) -> (T_ContextItems_vOut25)
type T_Declaration_v28 = (T_Declaration_vIn28) -> (T_Declaration_vOut28)
type T_Declarations_v31 = (T_Declarations_vIn31) -> (T_Declarations_vOut31)
type T_Export_v34 = (T_Export_vIn34) -> (T_Export_vOut34)
type T_Exports_v37 = (T_Exports_vIn37) -> (T_Exports_vOut37)
type T_Expression_v40 = (T_Expression_vIn40) -> (T_Expression_vOut40)
type T_Expressions_v43 = (T_Expressions_vIn43) -> (T_Expressions_vOut43)
type T_FieldDeclaration_v46 = (T_FieldDeclaration_vIn46) -> (T_FieldDeclaration_vOut46)
type T_FieldDeclarations_v49 = (T_FieldDeclarations_vIn49) -> (T_FieldDeclarations_vOut49)
type T_Fixity_v52 = (T_Fixity_vIn52) -> (T_Fixity_vOut52)
type T_FunctionBinding_v55 = (T_FunctionBinding_vIn55) -> (T_FunctionBinding_vOut55)
type T_FunctionBindings_v58 = (T_FunctionBindings_vIn58) -> (T_FunctionBindings_vOut58)
type T_GuardedExpression_v61 = (T_GuardedExpression_vIn61) -> (T_GuardedExpression_vOut61)
type T_GuardedExpressions_v64 = (T_GuardedExpressions_vIn64) -> (T_GuardedExpressions_vOut64)
type T_Import_v67 = (T_Import_vIn67) -> (T_Import_vOut67)
type T_ImportDeclaration_v70 = (T_ImportDeclaration_vIn70) -> (T_ImportDeclaration_vOut70)
type T_ImportDeclarations_v73 = (T_ImportDeclarations_vIn73) -> (T_ImportDeclarations_vOut73)
type T_ImportSpecification_v76 = (T_ImportSpecification_vIn76) -> (T_ImportSpecification_vOut76)
type T_Imports_v79 = (T_Imports_vIn79) -> (T_Imports_vOut79)
type T_LeftHandSide_v82 = (T_LeftHandSide_vIn82) -> (T_LeftHandSide_vOut82)
type T_Literal_v85 = (T_Literal_vIn85) -> (T_Literal_vOut85)
type T_MaybeDeclarations_v88 = (T_MaybeDeclarations_vIn88) -> (T_MaybeDeclarations_vOut88)
type T_MaybeExports_v91 = (T_MaybeExports_vIn91) -> (T_MaybeExports_vOut91)
type T_MaybeExpression_v94 = (T_MaybeExpression_vIn94) -> (T_MaybeExpression_vOut94)
type T_MaybeImportSpecification_v97 = (T_MaybeImportSpecification_vIn97) -> (T_MaybeImportSpecification_vOut97)
type T_MaybeInt_v100 = (T_MaybeInt_vIn100) -> (T_MaybeInt_vOut100)
type T_MaybeName_v103 = (T_MaybeName_vIn103) -> (T_MaybeName_vOut103)
type T_MaybeNames_v106 = (T_MaybeNames_vIn106) -> (T_MaybeNames_vOut106)
type T_Module_v109 = (T_Module_vIn109) -> (T_Module_vOut109)
type T_Name_v112 = (T_Name_vIn112) -> (T_Name_vOut112)
type T_Names_v115 = (T_Names_vIn115) -> (T_Names_vOut115)
type T_Pattern_v118 = (T_Pattern_vIn118) -> (T_Pattern_vOut118)
type T_Patterns_v121 = (T_Patterns_vIn121) -> (T_Patterns_vOut121)
type T_Position_v124 = (T_Position_vIn124) -> (T_Position_vOut124)
type T_Qualifier_v127 = (T_Qualifier_vIn127) -> (T_Qualifier_vOut127)
type T_Qualifiers_v130 = (T_Qualifiers_vIn130) -> (T_Qualifiers_vOut130)
type T_Range_v133 = (T_Range_vIn133) -> (T_Range_vOut133)
type T_RecordExpressionBinding_v136 = (T_RecordExpressionBinding_vIn136) -> (T_RecordExpressionBinding_vOut136)
type T_RecordExpressionBindings_v139 = (T_RecordExpressionBindings_vIn139) -> (T_RecordExpressionBindings_vOut139)
type T_RecordPatternBinding_v142 = (T_RecordPatternBinding_vIn142) -> (T_RecordPatternBinding_vOut142)
type T_RecordPatternBindings_v145 = (T_RecordPatternBindings_vIn145) -> (T_RecordPatternBindings_vOut145)
type T_RightHandSide_v148 = (T_RightHandSide_vIn148) -> (T_RightHandSide_vOut148)
type T_SimpleType_v151 = (T_SimpleType_vIn151) -> (T_SimpleType_vOut151)
type T_Statement_v154 = (T_Statement_vIn154) -> (T_Statement_vOut154)
type T_Statements_v157 = (T_Statements_vIn157) -> (T_Statements_vOut157)
type T_Strings_v160 = (T_Strings_vIn160) -> (T_Strings_vOut160)
type T_Type_v163 = (T_Type_vIn163) -> (T_Type_vOut163)
type T_Types_v166 = (T_Types_vIn166) -> (T_Types_vOut166)
type T_Alternative_v1 = (T_Alternative_vIn1) -> (T_Alternative_vOut1)
type T_Alternatives_v4 = (T_Alternatives_vIn4) -> (T_Alternatives_vOut4)
type T_AnnotatedType_v7 = (T_AnnotatedType_vIn7) -> (T_AnnotatedType_vOut7)
type T_AnnotatedTypes_v10 = (T_AnnotatedTypes_vIn10) -> (T_AnnotatedTypes_vOut10)
type T_Body_v13 = (T_Body_vIn13) -> (T_Body_vOut13)
type T_Constructor_v16 = (T_Constructor_vIn16) -> (T_Constructor_vOut16)
type T_Constructors_v19 = (T_Constructors_vIn19) -> (T_Constructors_vOut19)
type T_ContextItem_v22 = (T_ContextItem_vIn22) -> (T_ContextItem_vOut22)
type T_ContextItems_v25 = (T_ContextItems_vIn25) -> (T_ContextItems_vOut25)
type T_Declaration_v28 = (T_Declaration_vIn28) -> (T_Declaration_vOut28)
type T_Declarations_v31 = (T_Declarations_vIn31) -> (T_Declarations_vOut31)
type T_Export_v34 = (T_Export_vIn34) -> (T_Export_vOut34)
type T_Exports_v37 = (T_Exports_vIn37) -> (T_Exports_vOut37)
type T_Expression_v40 = (T_Expression_vIn40) -> (T_Expression_vOut40)
type T_Expressions_v43 = (T_Expressions_vIn43) -> (T_Expressions_vOut43)
type T_FieldDeclaration_v46 = (T_FieldDeclaration_vIn46) -> (T_FieldDeclaration_vOut46)
type T_FieldDeclarations_v49 = (T_FieldDeclarations_vIn49) -> (T_FieldDeclarations_vOut49)
type T_Fixity_v52 = (T_Fixity_vIn52) -> (T_Fixity_vOut52)
type T_FunctionBinding_v55 = (T_FunctionBinding_vIn55) -> (T_FunctionBinding_vOut55)
type T_FunctionBindings_v58 = (T_FunctionBindings_vIn58) -> (T_FunctionBindings_vOut58)
type T_GuardedExpression_v61 = (T_GuardedExpression_vIn61) -> (T_GuardedExpression_vOut61)
type T_GuardedExpressions_v64 = (T_GuardedExpressions_vIn64) -> (T_GuardedExpressions_vOut64)
type T_Import_v67 = (T_Import_vIn67) -> (T_Import_vOut67)
type T_ImportDeclaration_v70 = (T_ImportDeclaration_vIn70) -> (T_ImportDeclaration_vOut70)
type T_ImportDeclarations_v73 = (T_ImportDeclarations_vIn73) -> (T_ImportDeclarations_vOut73)
type T_ImportSpecification_v76 = (T_ImportSpecification_vIn76) -> (T_ImportSpecification_vOut76)
type T_Imports_v79 = (T_Imports_vIn79) -> (T_Imports_vOut79)
type T_LeftHandSide_v82 = (T_LeftHandSide_vIn82) -> (T_LeftHandSide_vOut82)
type T_Literal_v85 = (T_Literal_vIn85) -> (T_Literal_vOut85)
type T_MaybeDeclarations_v88 = (T_MaybeDeclarations_vIn88) -> (T_MaybeDeclarations_vOut88)
type T_MaybeExports_v91 = (T_MaybeExports_vIn91) -> (T_MaybeExports_vOut91)
type T_MaybeExpression_v94 = (T_MaybeExpression_vIn94) -> (T_MaybeExpression_vOut94)
type T_MaybeImportSpecification_v97 = (T_MaybeImportSpecification_vIn97) -> (T_MaybeImportSpecification_vOut97)
type T_MaybeInt_v100 = (T_MaybeInt_vIn100) -> (T_MaybeInt_vOut100)
type T_MaybeName_v103 = (T_MaybeName_vIn103) -> (T_MaybeName_vOut103)
type T_MaybeNames_v106 = (T_MaybeNames_vIn106) -> (T_MaybeNames_vOut106)
type T_Module_v109 = (T_Module_vIn109) -> (T_Module_vOut109)
type T_Name_v112 = (T_Name_vIn112) -> (T_Name_vOut112)
type T_Names_v115 = (T_Names_vIn115) -> (T_Names_vOut115)
type T_Pattern_v118 = (T_Pattern_vIn118) -> (T_Pattern_vOut118)
type T_Patterns_v121 = (T_Patterns_vIn121) -> (T_Patterns_vOut121)
type T_Position_v124 = (T_Position_vIn124) -> (T_Position_vOut124)
type T_Qualifier_v127 = (T_Qualifier_vIn127) -> (T_Qualifier_vOut127)
type T_Qualifiers_v130 = (T_Qualifiers_vIn130) -> (T_Qualifiers_vOut130)
type T_Range_v133 = (T_Range_vIn133) -> (T_Range_vOut133)
type T_RecordExpressionBinding_v136 = (T_RecordExpressionBinding_vIn136) -> (T_RecordExpressionBinding_vOut136)
type T_RecordExpressionBindings_v139 = (T_RecordExpressionBindings_vIn139) -> (T_RecordExpressionBindings_vOut139)
type T_RecordPatternBinding_v142 = (T_RecordPatternBinding_vIn142) -> (T_RecordPatternBinding_vOut142)
type T_RecordPatternBindings_v145 = (T_RecordPatternBindings_vIn145) -> (T_RecordPatternBindings_vOut145)
type T_RightHandSide_v148 = (T_RightHandSide_vIn148) -> (T_RightHandSide_vOut148)
type T_SimpleType_v151 = (T_SimpleType_vIn151) -> (T_SimpleType_vOut151)
type T_Statement_v154 = (T_Statement_vIn154) -> (T_Statement_vOut154)
type T_Statements_v157 = (T_Statements_vIn157) -> (T_Statements_vOut157)
type T_Strings_v160 = (T_Strings_vIn160) -> (T_Strings_vOut160)
type T_Type_v163 = (T_Type_vIn163) -> (T_Type_vOut163)
type T_Types_v166 = (T_Types_vIn166) -> (T_Types_vOut166)
type KindErrors = [KindError]
type Warnings = [Warning]
type OperatorTable = Map Name (Int, Assoc)
type State expr = ([Name], [expr], [ResolveError])
type T_Alternative_v1 = (T_Alternative_vIn1) -> (T_Alternative_vOut1)
type T_Alternatives_v4 = (T_Alternatives_vIn4) -> (T_Alternatives_vOut4)
type T_AnnotatedType_v7 = (T_AnnotatedType_vIn7) -> (T_AnnotatedType_vOut7)
type T_AnnotatedTypes_v10 = (T_AnnotatedTypes_vIn10) -> (T_AnnotatedTypes_vOut10)
type T_Body_v13 = (T_Body_vIn13) -> (T_Body_vOut13)
type T_Constructor_v16 = (T_Constructor_vIn16) -> (T_Constructor_vOut16)
type T_Constructors_v19 = (T_Constructors_vIn19) -> (T_Constructors_vOut19)
type T_ContextItem_v22 = (T_ContextItem_vIn22) -> (T_ContextItem_vOut22)
type T_ContextItems_v25 = (T_ContextItems_vIn25) -> (T_ContextItems_vOut25)
type T_Declaration_v28 = (T_Declaration_vIn28) -> (T_Declaration_vOut28)
type T_Declarations_v31 = (T_Declarations_vIn31) -> (T_Declarations_vOut31)
type T_Export_v34 = (T_Export_vIn34) -> (T_Export_vOut34)
type T_Exports_v37 = (T_Exports_vIn37) -> (T_Exports_vOut37)
type T_Expression_v40 = (T_Expression_vIn40) -> (T_Expression_vOut40)
type T_Expressions_v43 = (T_Expressions_vIn43) -> (T_Expressions_vOut43)
type T_FieldDeclaration_v46 = (T_FieldDeclaration_vIn46) -> (T_FieldDeclaration_vOut46)
type T_FieldDeclarations_v49 = (T_FieldDeclarations_vIn49) -> (T_FieldDeclarations_vOut49)
type T_Fixity_v52 = (T_Fixity_vIn52) -> (T_Fixity_vOut52)
type T_FunctionBinding_v55 = (T_FunctionBinding_vIn55) -> (T_FunctionBinding_vOut55)
type T_FunctionBindings_v58 = (T_FunctionBindings_vIn58) -> (T_FunctionBindings_vOut58)
type T_GuardedExpression_v61 = (T_GuardedExpression_vIn61) -> (T_GuardedExpression_vOut61)
type T_GuardedExpressions_v64 = (T_GuardedExpressions_vIn64) -> (T_GuardedExpressions_vOut64)
type T_Import_v67 = (T_Import_vIn67) -> (T_Import_vOut67)
type T_ImportDeclaration_v70 = (T_ImportDeclaration_vIn70) -> (T_ImportDeclaration_vOut70)
type T_ImportDeclarations_v73 = (T_ImportDeclarations_vIn73) -> (T_ImportDeclarations_vOut73)
type T_ImportSpecification_v76 = (T_ImportSpecification_vIn76) -> (T_ImportSpecification_vOut76)
type T_Imports_v79 = (T_Imports_vIn79) -> (T_Imports_vOut79)
type T_LeftHandSide_v82 = (T_LeftHandSide_vIn82) -> (T_LeftHandSide_vOut82)
type T_Literal_v85 = (T_Literal_vIn85) -> (T_Literal_vOut85)
type T_MaybeDeclarations_v88 = (T_MaybeDeclarations_vIn88) -> (T_MaybeDeclarations_vOut88)
type T_MaybeExports_v91 = (T_MaybeExports_vIn91) -> (T_MaybeExports_vOut91)
type T_MaybeExpression_v94 = (T_MaybeExpression_vIn94) -> (T_MaybeExpression_vOut94)
type T_MaybeImportSpecification_v97 = (T_MaybeImportSpecification_vIn97) -> (T_MaybeImportSpecification_vOut97)
type T_MaybeInt_v100 = (T_MaybeInt_vIn100) -> (T_MaybeInt_vOut100)
type T_MaybeName_v103 = (T_MaybeName_vIn103) -> (T_MaybeName_vOut103)
type T_MaybeNames_v106 = (T_MaybeNames_vIn106) -> (T_MaybeNames_vOut106)
type T_Module_v109 = (T_Module_vIn109) -> (T_Module_vOut109)
type T_Name_v112 = (T_Name_vIn112) -> (T_Name_vOut112)
type T_Names_v115 = (T_Names_vIn115) -> (T_Names_vOut115)
type T_Pattern_v118 = (T_Pattern_vIn118) -> (T_Pattern_vOut118)
type T_Patterns_v121 = (T_Patterns_vIn121) -> (T_Patterns_vOut121)
type T_Position_v124 = (T_Position_vIn124) -> (T_Position_vOut124)
type T_Qualifier_v127 = (T_Qualifier_vIn127) -> (T_Qualifier_vOut127)
type T_Qualifiers_v130 = (T_Qualifiers_vIn130) -> (T_Qualifiers_vOut130)
type T_Range_v133 = (T_Range_vIn133) -> (T_Range_vOut133)
type T_RecordExpressionBinding_v136 = (T_RecordExpressionBinding_vIn136) -> (T_RecordExpressionBinding_vOut136)
type T_RecordExpressionBindings_v139 = (T_RecordExpressionBindings_vIn139) -> (T_RecordExpressionBindings_vOut139)
type T_RecordPatternBinding_v142 = (T_RecordPatternBinding_vIn142) -> (T_RecordPatternBinding_vOut142)
type T_RecordPatternBindings_v145 = (T_RecordPatternBindings_vIn145) -> (T_RecordPatternBindings_vOut145)
type T_RightHandSide_v148 = (T_RightHandSide_vIn148) -> (T_RightHandSide_vOut148)
type T_SimpleType_v151 = (T_SimpleType_vIn151) -> (T_SimpleType_vOut151)
type T_Statement_v154 = (T_Statement_vIn154) -> (T_Statement_vOut154)
type T_Statements_v157 = (T_Statements_vIn157) -> (T_Statements_vOut157)
type T_Strings_v160 = (T_Strings_vIn160) -> (T_Strings_vOut160)
type T_Type_v163 = (T_Type_vIn163) -> (T_Type_vOut163)
type T_Types_v166 = (T_Types_vIn166) -> (T_Types_vOut166)
type Token = (SourcePos, Lexeme)
type HParser a = GenParser Token SourcePos a
type SimpleJudgements = [SimpleJudgement]
type TypingStrategies = [TypingStrategy]
type UserStatements = [UserStatement]
type T_Alternative_v1 = (T_Alternative_vIn1) -> (T_Alternative_vOut1)
type T_Alternatives_v4 = (T_Alternatives_vIn4) -> (T_Alternatives_vOut4)
type T_AnnotatedType_v7 = (T_AnnotatedType_vIn7) -> (T_AnnotatedType_vOut7)
type T_AnnotatedTypes_v10 = (T_AnnotatedTypes_vIn10) -> (T_AnnotatedTypes_vOut10)
type T_Body_v13 = (T_Body_vIn13) -> (T_Body_vOut13)
type T_Constructor_v16 = (T_Constructor_vIn16) -> (T_Constructor_vOut16)
type T_Constructors_v19 = (T_Constructors_vIn19) -> (T_Constructors_vOut19)
type T_ContextItem_v22 = (T_ContextItem_vIn22) -> (T_ContextItem_vOut22)
type T_ContextItems_v25 = (T_ContextItems_vIn25) -> (T_ContextItems_vOut25)
type T_Declaration_v28 = (T_Declaration_vIn28) -> (T_Declaration_vOut28)
type T_Declarations_v31 = (T_Declarations_vIn31) -> (T_Declarations_vOut31)
type T_Export_v34 = (T_Export_vIn34) -> (T_Export_vOut34)
type T_Exports_v37 = (T_Exports_vIn37) -> (T_Exports_vOut37)
type T_Expression_v40 = (T_Expression_vIn40) -> (T_Expression_vOut40)
type T_Expressions_v43 = (T_Expressions_vIn43) -> (T_Expressions_vOut43)
type T_FieldDeclaration_v46 = (T_FieldDeclaration_vIn46) -> (T_FieldDeclaration_vOut46)
type T_FieldDeclarations_v49 = (T_FieldDeclarations_vIn49) -> (T_FieldDeclarations_vOut49)
type T_Fixity_v52 = (T_Fixity_vIn52) -> (T_Fixity_vOut52)
type T_FunctionBinding_v55 = (T_FunctionBinding_vIn55) -> (T_FunctionBinding_vOut55)
type T_FunctionBindings_v58 = (T_FunctionBindings_vIn58) -> (T_FunctionBindings_vOut58)
type T_GuardedExpression_v61 = (T_GuardedExpression_vIn61) -> (T_GuardedExpression_vOut61)
type T_GuardedExpressions_v64 = (T_GuardedExpressions_vIn64) -> (T_GuardedExpressions_vOut64)
type T_Import_v67 = (T_Import_vIn67) -> (T_Import_vOut67)
type T_ImportDeclaration_v70 = (T_ImportDeclaration_vIn70) -> (T_ImportDeclaration_vOut70)
type T_ImportDeclarations_v73 = (T_ImportDeclarations_vIn73) -> (T_ImportDeclarations_vOut73)
type T_ImportSpecification_v76 = (T_ImportSpecification_vIn76) -> (T_ImportSpecification_vOut76)
type T_Imports_v79 = (T_Imports_vIn79) -> (T_Imports_vOut79)
type T_LeftHandSide_v82 = (T_LeftHandSide_vIn82) -> (T_LeftHandSide_vOut82)
type T_Literal_v85 = (T_Literal_vIn85) -> (T_Literal_vOut85)
type T_MaybeDeclarations_v88 = (T_MaybeDeclarations_vIn88) -> (T_MaybeDeclarations_vOut88)
type T_MaybeExports_v91 = (T_MaybeExports_vIn91) -> (T_MaybeExports_vOut91)
type T_MaybeExpression_v94 = (T_MaybeExpression_vIn94) -> (T_MaybeExpression_vOut94)
type T_MaybeImportSpecification_v97 = (T_MaybeImportSpecification_vIn97) -> (T_MaybeImportSpecification_vOut97)
type T_MaybeInt_v100 = (T_MaybeInt_vIn100) -> (T_MaybeInt_vOut100)
type T_MaybeName_v103 = (T_MaybeName_vIn103) -> (T_MaybeName_vOut103)
type T_MaybeNames_v106 = (T_MaybeNames_vIn106) -> (T_MaybeNames_vOut106)
type T_Module_v109 = (T_Module_vIn109) -> (T_Module_vOut109)
type T_Name_v112 = (T_Name_vIn112) -> (T_Name_vOut112)
type T_Names_v115 = (T_Names_vIn115) -> (T_Names_vOut115)
type T_Pattern_v118 = (T_Pattern_vIn118) -> (T_Pattern_vOut118)
type T_Patterns_v121 = (T_Patterns_vIn121) -> (T_Patterns_vOut121)
type T_Position_v124 = (T_Position_vIn124) -> (T_Position_vOut124)
type T_Qualifier_v127 = (T_Qualifier_vIn127) -> (T_Qualifier_vOut127)
type T_Qualifiers_v130 = (T_Qualifiers_vIn130) -> (T_Qualifiers_vOut130)
type T_Range_v133 = (T_Range_vIn133) -> (T_Range_vOut133)
type T_RecordExpressionBinding_v136 = (T_RecordExpressionBinding_vIn136) -> (T_RecordExpressionBinding_vOut136)
type T_RecordExpressionBindings_v139 = (T_RecordExpressionBindings_vIn139) -> (T_RecordExpressionBindings_vOut139)
type T_RecordPatternBinding_v142 = (T_RecordPatternBinding_vIn142) -> (T_RecordPatternBinding_vOut142)
type T_RecordPatternBindings_v145 = (T_RecordPatternBindings_vIn145) -> (T_RecordPatternBindings_vOut145)
type T_RightHandSide_v148 = (T_RightHandSide_vIn148) -> (T_RightHandSide_vOut148)
type T_SimpleType_v151 = (T_SimpleType_vIn151) -> (T_SimpleType_vOut151)
type T_Statement_v154 = (T_Statement_vIn154) -> (T_Statement_vOut154)
type T_Statements_v157 = (T_Statements_vIn157) -> (T_Statements_vOut157)
type T_Strings_v160 = (T_Strings_vIn160) -> (T_Strings_vOut160)
type T_Type_v163 = (T_Type_vIn163) -> (T_Type_vOut163)
type T_Types_v166 = (T_Types_vIn166) -> (T_Types_vOut166)
type TypeErrors = [TypeError]
type TypeErrorHint = (String, MessageBlock)
type Properties = [Property]
type InfoTrees = [InfoTree]
type InfoTree = DoublyLinkedTree LocalInfo
type ConstraintSet = Tree (TypeConstraint ConstraintInfo)
type ConstraintSets = Trees (TypeConstraint ConstraintInfo)
type TS_Errors = [TS_Error]
type TS_Warnings = [TS_Warning]
type Assumptions = Map Name [(Name, Tp)]
type PatternAssumptions = Map Name Tp
type Monos = Tps
type BindingGroups = [BindingGroup]
type BindingGroup = (PatternAssumptions, Assumptions, ConstraintSets)
type InheritedBDG = [(Names, (Monos, Int))]
type InputBDG = (Bool, Int, Int, Monos, Map Name TpScheme, Maybe (Assumptions, ConstraintSets), Int)
type OutputBDG = (Assumptions, ConstraintSet, InheritedBDG, Int, Int, Map Name (Sigma Predicates))
type MetaVariableTable = [(String, MetaVariableInfo)]
type AttributeTable = [(String, MetaVariableInfo -> MessageBlock)]
type Siblings = [[(String, TpScheme)]]
type Permutation = [Int]
type TypeEnvironment = Map Name TpScheme
type ValueConstructorEnvironment = Map Name TpScheme
type TypeConstructorEnvironment = Map Name Int
type TypeSynonymEnvironment = Map Name (Int, Tps -> Tp)
type ImportEnvironments = [ImportEnvironment]
type Phase err a = IO (Either [err] a)
type CompileOptions = ([Option], String, [String])
type Fixity = (Int, Assoc)
type KindEnvironment = Map Name TpScheme
type KindConstraint = TypeConstraint KindError
type KindConstraints = TypeConstraints KindError
type BindingGroups = [BindingGroup]
type BindingGroup = (PatternAssumptions, Assumptions, KindConstraints)
type T_Alternative_v1 = (T_Alternative_vIn1) -> (T_Alternative_vOut1)
type T_Alternatives_v4 = (T_Alternatives_vIn4) -> (T_Alternatives_vOut4)
type T_AnnotatedType_v7 = (T_AnnotatedType_vIn7) -> (T_AnnotatedType_vOut7)
type T_AnnotatedTypes_v10 = (T_AnnotatedTypes_vIn10) -> (T_AnnotatedTypes_vOut10)
type T_Body_v13 = (T_Body_vIn13) -> (T_Body_vOut13)
type T_Constructor_v16 = (T_Constructor_vIn16) -> (T_Constructor_vOut16)
type T_Constructors_v19 = (T_Constructors_vIn19) -> (T_Constructors_vOut19)
type T_ContextItem_v22 = (T_ContextItem_vIn22) -> (T_ContextItem_vOut22)
type T_ContextItems_v25 = (T_ContextItems_vIn25) -> (T_ContextItems_vOut25)
type T_Declaration_v28 = (T_Declaration_vIn28) -> (T_Declaration_vOut28)
type T_Declarations_v31 = (T_Declarations_vIn31) -> (T_Declarations_vOut31)
type T_Export_v34 = (T_Export_vIn34) -> (T_Export_vOut34)
type T_Exports_v37 = (T_Exports_vIn37) -> (T_Exports_vOut37)
type T_Expression_v40 = (T_Expression_vIn40) -> (T_Expression_vOut40)
type T_Expressions_v43 = (T_Expressions_vIn43) -> (T_Expressions_vOut43)
type T_FieldDeclaration_v46 = (T_FieldDeclaration_vIn46) -> (T_FieldDeclaration_vOut46)
type T_FieldDeclarations_v49 = (T_FieldDeclarations_vIn49) -> (T_FieldDeclarations_vOut49)
type T_Fixity_v52 = (T_Fixity_vIn52) -> (T_Fixity_vOut52)
type T_FunctionBinding_v55 = (T_FunctionBinding_vIn55) -> (T_FunctionBinding_vOut55)
type T_FunctionBindings_v58 = (T_FunctionBindings_vIn58) -> (T_FunctionBindings_vOut58)
type T_GuardedExpression_v61 = (T_GuardedExpression_vIn61) -> (T_GuardedExpression_vOut61)
type T_GuardedExpressions_v64 = (T_GuardedExpressions_vIn64) -> (T_GuardedExpressions_vOut64)
type T_Import_v67 = (T_Import_vIn67) -> (T_Import_vOut67)
type T_ImportDeclaration_v70 = (T_ImportDeclaration_vIn70) -> (T_ImportDeclaration_vOut70)
type T_ImportDeclarations_v73 = (T_ImportDeclarations_vIn73) -> (T_ImportDeclarations_vOut73)
type T_ImportSpecification_v76 = (T_ImportSpecification_vIn76) -> (T_ImportSpecification_vOut76)
type T_Imports_v79 = (T_Imports_vIn79) -> (T_Imports_vOut79)
type T_LeftHandSide_v82 = (T_LeftHandSide_vIn82) -> (T_LeftHandSide_vOut82)
type T_Literal_v85 = (T_Literal_vIn85) -> (T_Literal_vOut85)
type T_MaybeDeclarations_v88 = (T_MaybeDeclarations_vIn88) -> (T_MaybeDeclarations_vOut88)
type T_MaybeExports_v91 = (T_MaybeExports_vIn91) -> (T_MaybeExports_vOut91)
type T_MaybeExpression_v94 = (T_MaybeExpression_vIn94) -> (T_MaybeExpression_vOut94)
type T_MaybeImportSpecification_v97 = (T_MaybeImportSpecification_vIn97) -> (T_MaybeImportSpecification_vOut97)
type T_MaybeInt_v100 = (T_MaybeInt_vIn100) -> (T_MaybeInt_vOut100)
type T_MaybeName_v103 = (T_MaybeName_vIn103) -> (T_MaybeName_vOut103)
type T_MaybeNames_v106 = (T_MaybeNames_vIn106) -> (T_MaybeNames_vOut106)
type T_Module_v109 = (T_Module_vIn109) -> (T_Module_vOut109)
type T_Name_v112 = (T_Name_vIn112) -> (T_Name_vOut112)
type T_Names_v115 = (T_Names_vIn115) -> (T_Names_vOut115)
type T_Pattern_v118 = (T_Pattern_vIn118) -> (T_Pattern_vOut118)
type T_Patterns_v121 = (T_Patterns_vIn121) -> (T_Patterns_vOut121)
type T_Position_v124 = (T_Position_vIn124) -> (T_Position_vOut124)
type T_Qualifier_v127 = (T_Qualifier_vIn127) -> (T_Qualifier_vOut127)
type T_Qualifiers_v130 = (T_Qualifiers_vIn130) -> (T_Qualifiers_vOut130)
type T_Range_v133 = (T_Range_vIn133) -> (T_Range_vOut133)
type T_RecordExpressionBinding_v136 = (T_RecordExpressionBinding_vIn136) -> (T_RecordExpressionBinding_vOut136)
type T_RecordExpressionBindings_v139 = (T_RecordExpressionBindings_vIn139) -> (T_RecordExpressionBindings_vOut139)
type T_RecordPatternBinding_v142 = (T_RecordPatternBinding_vIn142) -> (T_RecordPatternBinding_vOut142)
type T_RecordPatternBindings_v145 = (T_RecordPatternBindings_vIn145) -> (T_RecordPatternBindings_vOut145)
type T_RightHandSide_v148 = (T_RightHandSide_vIn148) -> (T_RightHandSide_vOut148)
type T_SimpleType_v151 = (T_SimpleType_vIn151) -> (T_SimpleType_vOut151)
type T_Statement_v154 = (T_Statement_vIn154) -> (T_Statement_vOut154)
type T_Statements_v157 = (T_Statements_vIn157) -> (T_Statements_vOut157)
type T_Strings_v160 = (T_Strings_vIn160) -> (T_Strings_vOut160)
type T_Type_v163 = (T_Type_vIn163) -> (T_Type_vOut163)
type T_Types_v166 = (T_Types_vIn166) -> (T_Types_vOut166)
type ScopeInfo = ([Names], [Name], [(Name, Name)])
type T_Alternative_v1 = (T_Alternative_vIn1) -> (T_Alternative_vOut1)
type T_Alternatives_v4 = (T_Alternatives_vIn4) -> (T_Alternatives_vOut4)
type T_AnnotatedType_v7 = (T_AnnotatedType_vIn7) -> (T_AnnotatedType_vOut7)
type T_AnnotatedTypes_v10 = (T_AnnotatedTypes_vIn10) -> (T_AnnotatedTypes_vOut10)
type T_Body_v13 = (T_Body_vIn13) -> (T_Body_vOut13)
type T_Constructor_v16 = (T_Constructor_vIn16) -> (T_Constructor_vOut16)
type T_Constructors_v19 = (T_Constructors_vIn19) -> (T_Constructors_vOut19)
type T_ContextItem_v22 = (T_ContextItem_vIn22) -> (T_ContextItem_vOut22)
type T_ContextItems_v25 = (T_ContextItems_vIn25) -> (T_ContextItems_vOut25)
type T_Declaration_v28 = (T_Declaration_vIn28) -> (T_Declaration_vOut28)
type T_Declarations_v31 = (T_Declarations_vIn31) -> (T_Declarations_vOut31)
type T_Export_v34 = (T_Export_vIn34) -> (T_Export_vOut34)
type T_Exports_v37 = (T_Exports_vIn37) -> (T_Exports_vOut37)
type T_Expression_v40 = (T_Expression_vIn40) -> (T_Expression_vOut40)
type T_Expressions_v43 = (T_Expressions_vIn43) -> (T_Expressions_vOut43)
type T_FieldDeclaration_v46 = (T_FieldDeclaration_vIn46) -> (T_FieldDeclaration_vOut46)
type T_FieldDeclarations_v49 = (T_FieldDeclarations_vIn49) -> (T_FieldDeclarations_vOut49)
type T_Fixity_v52 = (T_Fixity_vIn52) -> (T_Fixity_vOut52)
type T_FunctionBinding_v55 = (T_FunctionBinding_vIn55) -> (T_FunctionBinding_vOut55)
type T_FunctionBindings_v58 = (T_FunctionBindings_vIn58) -> (T_FunctionBindings_vOut58)
type T_GuardedExpression_v61 = (T_GuardedExpression_vIn61) -> (T_GuardedExpression_vOut61)
type T_GuardedExpressions_v64 = (T_GuardedExpressions_vIn64) -> (T_GuardedExpressions_vOut64)
type T_Import_v67 = (T_Import_vIn67) -> (T_Import_vOut67)
type T_ImportDeclaration_v70 = (T_ImportDeclaration_vIn70) -> (T_ImportDeclaration_vOut70)
type T_ImportDeclarations_v73 = (T_ImportDeclarations_vIn73) -> (T_ImportDeclarations_vOut73)
type T_ImportSpecification_v76 = (T_ImportSpecification_vIn76) -> (T_ImportSpecification_vOut76)
type T_Imports_v79 = (T_Imports_vIn79) -> (T_Imports_vOut79)
type T_LeftHandSide_v82 = (T_LeftHandSide_vIn82) -> (T_LeftHandSide_vOut82)
type T_Literal_v85 = (T_Literal_vIn85) -> (T_Literal_vOut85)
type T_MaybeDeclarations_v88 = (T_MaybeDeclarations_vIn88) -> (T_MaybeDeclarations_vOut88)
type T_MaybeExports_v91 = (T_MaybeExports_vIn91) -> (T_MaybeExports_vOut91)
type T_MaybeExpression_v94 = (T_MaybeExpression_vIn94) -> (T_MaybeExpression_vOut94)
type T_MaybeImportSpecification_v97 = (T_MaybeImportSpecification_vIn97) -> (T_MaybeImportSpecification_vOut97)
type T_MaybeInt_v100 = (T_MaybeInt_vIn100) -> (T_MaybeInt_vOut100)
type T_MaybeName_v103 = (T_MaybeName_vIn103) -> (T_MaybeName_vOut103)
type T_MaybeNames_v106 = (T_MaybeNames_vIn106) -> (T_MaybeNames_vOut106)
type T_Module_v109 = (T_Module_vIn109) -> (T_Module_vOut109)
type T_Name_v112 = (T_Name_vIn112) -> (T_Name_vOut112)
type T_Names_v115 = (T_Names_vIn115) -> (T_Names_vOut115)
type T_Pattern_v118 = (T_Pattern_vIn118) -> (T_Pattern_vOut118)
type T_Patterns_v121 = (T_Patterns_vIn121) -> (T_Patterns_vOut121)
type T_Position_v124 = (T_Position_vIn124) -> (T_Position_vOut124)
type T_Qualifier_v127 = (T_Qualifier_vIn127) -> (T_Qualifier_vOut127)
type T_Qualifiers_v130 = (T_Qualifiers_vIn130) -> (T_Qualifiers_vOut130)
type T_Range_v133 = (T_Range_vIn133) -> (T_Range_vOut133)
type T_RecordExpressionBinding_v136 = (T_RecordExpressionBinding_vIn136) -> (T_RecordExpressionBinding_vOut136)
type T_RecordExpressionBindings_v139 = (T_RecordExpressionBindings_vIn139) -> (T_RecordExpressionBindings_vOut139)
type T_RecordPatternBinding_v142 = (T_RecordPatternBinding_vIn142) -> (T_RecordPatternBinding_vOut142)
type T_RecordPatternBindings_v145 = (T_RecordPatternBindings_vIn145) -> (T_RecordPatternBindings_vOut145)
type T_RightHandSide_v148 = (T_RightHandSide_vIn148) -> (T_RightHandSide_vOut148)
type T_SimpleType_v151 = (T_SimpleType_vIn151) -> (T_SimpleType_vOut151)
type T_Statement_v154 = (T_Statement_vIn154) -> (T_Statement_vOut154)
type T_Statements_v157 = (T_Statements_vIn157) -> (T_Statements_vOut157)
type T_Strings_v160 = (T_Strings_vIn160) -> (T_Strings_vOut160)
type T_Type_v163 = (T_Type_vIn163) -> (T_Type_vOut163)
type T_Types_v166 = (T_Types_vIn166) -> (T_Types_vOut166)
type Core_TypingStrategies = [Core_TypingStrategy]
type T_Core_Judgement = MetaVariableInfo -> MetaVariableTable -> MapSubstitution -> ([Int], [(String, Tp)])
type T_Core_Judgements = MetaVariableInfo -> MetaVariableTable -> MapSubstitution -> ([Int], [(String, Tp)])
type T_Core_TypeRule = MetaVariableInfo -> MetaVariableTable -> MapSubstitution -> (TypeConstraints ConstraintInfo, [Int], [(String, Tp)])
type T_Core_TypingStrategy = MetaVariableInfo -> MetaVariableTable -> Int -> (Assumptions, ConstraintSet, IO (), Int)
type T_Core_UserStatement = (Trees (TypeConstraint ConstraintInfo)) -> (Maybe Int) -> ((Int, Int)) -> (Attribute -> MessageBlock) -> MetaVariableInfo -> MetaVariableTable -> ([(String, Tree (TypeConstraint ConstraintInfo))]) -> MapSubstitution -> (Trees (TypeConstraint ConstraintInfo), Maybe Int, (Int, Int), [Int], [(String, Tree (TypeConstraint ConstraintInfo))])
type T_Core_UserStatements = (Trees (TypeConstraint ConstraintInfo)) -> (Maybe Int) -> ((Int, Int)) -> (Attribute -> MessageBlock) -> MetaVariableInfo -> MetaVariableTable -> ([(String, Tree (TypeConstraint ConstraintInfo))]) -> MapSubstitution -> (Trees (TypeConstraint ConstraintInfo), Maybe Int, (Int, Int), [Int], [(String, Tree (TypeConstraint ConstraintInfo))])
type ScopeInfo = ([Names], [Name], [(Name, Name)])
type Env = [(Tp, (Name, [Tp]))]
type T_Alternative_v1 = (T_Alternative_vIn1) -> (T_Alternative_vOut1)
type T_Alternatives_v4 = (T_Alternatives_vIn4) -> (T_Alternatives_vOut4)
type T_AnnotatedType_v7 = (T_AnnotatedType_vIn7) -> (T_AnnotatedType_vOut7)
type T_AnnotatedTypes_v10 = (T_AnnotatedTypes_vIn10) -> (T_AnnotatedTypes_vOut10)
type T_Body_v13 = (T_Body_vIn13) -> (T_Body_vOut13)
type T_Constructor_v16 = (T_Constructor_vIn16) -> (T_Constructor_vOut16)
type T_Constructors_v19 = (T_Constructors_vIn19) -> (T_Constructors_vOut19)
type T_ContextItem_v22 = (T_ContextItem_vIn22) -> (T_ContextItem_vOut22)
type T_ContextItems_v25 = (T_ContextItems_vIn25) -> (T_ContextItems_vOut25)
type T_Declaration_v28 = (T_Declaration_vIn28) -> (T_Declaration_vOut28)
type T_Declarations_v31 = (T_Declarations_vIn31) -> (T_Declarations_vOut31)
type T_Export_v34 = (T_Export_vIn34) -> (T_Export_vOut34)
type T_Exports_v37 = (T_Exports_vIn37) -> (T_Exports_vOut37)
type T_Expression_v40 = (T_Expression_vIn40) -> (T_Expression_vOut40)
type T_Expressions_v43 = (T_Expressions_vIn43) -> (T_Expressions_vOut43)
type T_FieldDeclaration_v46 = (T_FieldDeclaration_vIn46) -> (T_FieldDeclaration_vOut46)
type T_FieldDeclarations_v49 = (T_FieldDeclarations_vIn49) -> (T_FieldDeclarations_vOut49)
type T_Fixity_v52 = (T_Fixity_vIn52) -> (T_Fixity_vOut52)
type T_FunctionBinding_v55 = (T_FunctionBinding_vIn55) -> (T_FunctionBinding_vOut55)
type T_FunctionBindings_v58 = (T_FunctionBindings_vIn58) -> (T_FunctionBindings_vOut58)
type T_GuardedExpression_v61 = (T_GuardedExpression_vIn61) -> (T_GuardedExpression_vOut61)
type T_GuardedExpressions_v64 = (T_GuardedExpressions_vIn64) -> (T_GuardedExpressions_vOut64)
type T_Import_v67 = (T_Import_vIn67) -> (T_Import_vOut67)
type T_ImportDeclaration_v70 = (T_ImportDeclaration_vIn70) -> (T_ImportDeclaration_vOut70)
type T_ImportDeclarations_v73 = (T_ImportDeclarations_vIn73) -> (T_ImportDeclarations_vOut73)
type T_ImportSpecification_v76 = (T_ImportSpecification_vIn76) -> (T_ImportSpecification_vOut76)
type T_Imports_v79 = (T_Imports_vIn79) -> (T_Imports_vOut79)
type T_LeftHandSide_v82 = (T_LeftHandSide_vIn82) -> (T_LeftHandSide_vOut82)
type T_Literal_v85 = (T_Literal_vIn85) -> (T_Literal_vOut85)
type T_MaybeDeclarations_v88 = (T_MaybeDeclarations_vIn88) -> (T_MaybeDeclarations_vOut88)
type T_MaybeExports_v91 = (T_MaybeExports_vIn91) -> (T_MaybeExports_vOut91)
type T_MaybeExpression_v94 = (T_MaybeExpression_vIn94) -> (T_MaybeExpression_vOut94)
type T_MaybeImportSpecification_v97 = (T_MaybeImportSpecification_vIn97) -> (T_MaybeImportSpecification_vOut97)
type T_MaybeInt_v100 = (T_MaybeInt_vIn100) -> (T_MaybeInt_vOut100)
type T_MaybeName_v103 = (T_MaybeName_vIn103) -> (T_MaybeName_vOut103)
type T_MaybeNames_v106 = (T_MaybeNames_vIn106) -> (T_MaybeNames_vOut106)
type T_Module_v109 = (T_Module_vIn109) -> (T_Module_vOut109)
type T_Name_v112 = (T_Name_vIn112) -> (T_Name_vOut112)
type T_Names_v115 = (T_Names_vIn115) -> (T_Names_vOut115)
type T_Pattern_v118 = (T_Pattern_vIn118) -> (T_Pattern_vOut118)
type T_Patterns_v121 = (T_Patterns_vIn121) -> (T_Patterns_vOut121)
type T_Position_v124 = (T_Position_vIn124) -> (T_Position_vOut124)
type T_Qualifier_v127 = (T_Qualifier_vIn127) -> (T_Qualifier_vOut127)
type T_Qualifiers_v130 = (T_Qualifiers_vIn130) -> (T_Qualifiers_vOut130)
type T_Range_v133 = (T_Range_vIn133) -> (T_Range_vOut133)
type T_RecordExpressionBinding_v136 = (T_RecordExpressionBinding_vIn136) -> (T_RecordExpressionBinding_vOut136)
type T_RecordExpressionBindings_v139 = (T_RecordExpressionBindings_vIn139) -> (T_RecordExpressionBindings_vOut139)
type T_RecordPatternBinding_v142 = (T_RecordPatternBinding_vIn142) -> (T_RecordPatternBinding_vOut142)
type T_RecordPatternBindings_v145 = (T_RecordPatternBindings_vIn145) -> (T_RecordPatternBindings_vOut145)
type T_RightHandSide_v148 = (T_RightHandSide_vIn148) -> (T_RightHandSide_vOut148)
type T_SimpleType_v151 = (T_SimpleType_vIn151) -> (T_SimpleType_vOut151)
type T_Statement_v154 = (T_Statement_vIn154) -> (T_Statement_vOut154)
type T_Statements_v157 = (T_Statements_vIn157) -> (T_Statements_vOut157)
type T_Strings_v160 = (T_Strings_vIn160) -> (T_Strings_vOut160)
type T_Type_v163 = (T_Type_vIn163) -> (T_Type_vOut163)
type T_Types_v166 = (T_Types_vIn166) -> (T_Types_vOut166)
type T_Alternative_v1 = (T_Alternative_vIn1) -> (T_Alternative_vOut1)
type T_Alternatives_v4 = (T_Alternatives_vIn4) -> (T_Alternatives_vOut4)
type T_AnnotatedType_v7 = (T_AnnotatedType_vIn7) -> (T_AnnotatedType_vOut7)
type T_AnnotatedTypes_v10 = (T_AnnotatedTypes_vIn10) -> (T_AnnotatedTypes_vOut10)
type T_Body_v13 = (T_Body_vIn13) -> (T_Body_vOut13)
type T_Constructor_v16 = (T_Constructor_vIn16) -> (T_Constructor_vOut16)
type T_Constructors_v19 = (T_Constructors_vIn19) -> (T_Constructors_vOut19)
type T_ContextItem_v22 = (T_ContextItem_vIn22) -> (T_ContextItem_vOut22)
type T_ContextItems_v25 = (T_ContextItems_vIn25) -> (T_ContextItems_vOut25)
type T_Declaration_v28 = (T_Declaration_vIn28) -> (T_Declaration_vOut28)
type T_Declarations_v31 = (T_Declarations_vIn31) -> (T_Declarations_vOut31)
type T_Export_v34 = (T_Export_vIn34) -> (T_Export_vOut34)
type T_Exports_v37 = (T_Exports_vIn37) -> (T_Exports_vOut37)
type T_Expression_v40 = (T_Expression_vIn40) -> (T_Expression_vOut40)
type T_Expressions_v43 = (T_Expressions_vIn43) -> (T_Expressions_vOut43)
type T_FieldDeclaration_v46 = (T_FieldDeclaration_vIn46) -> (T_FieldDeclaration_vOut46)
type T_FieldDeclarations_v49 = (T_FieldDeclarations_vIn49) -> (T_FieldDeclarations_vOut49)
type T_Fixity_v52 = (T_Fixity_vIn52) -> (T_Fixity_vOut52)
type T_FunctionBinding_v55 = (T_FunctionBinding_vIn55) -> (T_FunctionBinding_vOut55)
type T_FunctionBindings_v58 = (T_FunctionBindings_vIn58) -> (T_FunctionBindings_vOut58)
type T_GuardedExpression_v61 = (T_GuardedExpression_vIn61) -> (T_GuardedExpression_vOut61)
type T_GuardedExpressions_v64 = (T_GuardedExpressions_vIn64) -> (T_GuardedExpressions_vOut64)
type T_Import_v67 = (T_Import_vIn67) -> (T_Import_vOut67)
type T_ImportDeclaration_v70 = (T_ImportDeclaration_vIn70) -> (T_ImportDeclaration_vOut70)
type T_ImportDeclarations_v73 = (T_ImportDeclarations_vIn73) -> (T_ImportDeclarations_vOut73)
type T_ImportSpecification_v76 = (T_ImportSpecification_vIn76) -> (T_ImportSpecification_vOut76)
type T_Imports_v79 = (T_Imports_vIn79) -> (T_Imports_vOut79)
type T_Judgement_v82 = (T_Judgement_vIn82) -> (T_Judgement_vOut82)
type T_LeftHandSide_v85 = (T_LeftHandSide_vIn85) -> (T_LeftHandSide_vOut85)
type T_Literal_v88 = (T_Literal_vIn88) -> (T_Literal_vOut88)
type T_MaybeDeclarations_v91 = (T_MaybeDeclarations_vIn91) -> (T_MaybeDeclarations_vOut91)
type T_MaybeExports_v94 = (T_MaybeExports_vIn94) -> (T_MaybeExports_vOut94)
type T_MaybeExpression_v97 = (T_MaybeExpression_vIn97) -> (T_MaybeExpression_vOut97)
type T_MaybeImportSpecification_v100 = (T_MaybeImportSpecification_vIn100) -> (T_MaybeImportSpecification_vOut100)
type T_MaybeInt_v103 = (T_MaybeInt_vIn103) -> (T_MaybeInt_vOut103)
type T_MaybeName_v106 = (T_MaybeName_vIn106) -> (T_MaybeName_vOut106)
type T_MaybeNames_v109 = (T_MaybeNames_vIn109) -> (T_MaybeNames_vOut109)
type T_Module_v112 = (T_Module_vIn112) -> (T_Module_vOut112)
type T_Name_v115 = (T_Name_vIn115) -> (T_Name_vOut115)
type T_Names_v118 = (T_Names_vIn118) -> (T_Names_vOut118)
type T_Pattern_v121 = (T_Pattern_vIn121) -> (T_Pattern_vOut121)
type T_Patterns_v124 = (T_Patterns_vIn124) -> (T_Patterns_vOut124)
type T_Position_v127 = (T_Position_vIn127) -> (T_Position_vOut127)
type T_Qualifier_v130 = (T_Qualifier_vIn130) -> (T_Qualifier_vOut130)
type T_Qualifiers_v133 = (T_Qualifiers_vIn133) -> (T_Qualifiers_vOut133)
type T_Range_v136 = (T_Range_vIn136) -> (T_Range_vOut136)
type T_RecordExpressionBinding_v139 = (T_RecordExpressionBinding_vIn139) -> (T_RecordExpressionBinding_vOut139)
type T_RecordExpressionBindings_v142 = (T_RecordExpressionBindings_vIn142) -> (T_RecordExpressionBindings_vOut142)
type T_RecordPatternBinding_v145 = (T_RecordPatternBinding_vIn145) -> (T_RecordPatternBinding_vOut145)
type T_RecordPatternBindings_v148 = (T_RecordPatternBindings_vIn148) -> (T_RecordPatternBindings_vOut148)
type T_RightHandSide_v151 = (T_RightHandSide_vIn151) -> (T_RightHandSide_vOut151)
type T_SimpleJudgement_v154 = (T_SimpleJudgement_vIn154) -> (T_SimpleJudgement_vOut154)
type T_SimpleJudgements_v157 = (T_SimpleJudgements_vIn157) -> (T_SimpleJudgements_vOut157)
type T_SimpleType_v160 = (T_SimpleType_vIn160) -> (T_SimpleType_vOut160)
type T_Statement_v163 = (T_Statement_vIn163) -> (T_Statement_vOut163)
type T_Statements_v166 = (T_Statements_vIn166) -> (T_Statements_vOut166)
type T_Strings_v169 = (T_Strings_vIn169) -> (T_Strings_vOut169)
type T_Type_v172 = (T_Type_vIn172) -> (T_Type_vOut172)
type T_TypeRule_v175 = (T_TypeRule_vIn175) -> (T_TypeRule_vOut175)
type T_Types_v178 = (T_Types_vIn178) -> (T_Types_vOut178)
type T_TypingStrategies_v181 = (T_TypingStrategies_vIn181) -> (T_TypingStrategies_vOut181)
type T_TypingStrategy_v184 = (T_TypingStrategy_vIn184) -> (T_TypingStrategy_vOut184)
type T_UserStatement_v187 = (T_UserStatement_vIn187) -> (T_UserStatement_vOut187)
type T_UserStatements_v190 = (T_UserStatements_vIn190) -> (T_UserStatements_vOut190)
type T_Alternative = Alternative
type T_Alternatives = Alternatives
type T_AnnotatedType = AnnotatedType
type T_AnnotatedTypes = AnnotatedTypes
type T_Body = Body
type T_Constructor = Constructor
type T_Constructors = Constructors
type T_ContextItem = ContextItem
type T_ContextItems = ContextItems
type T_Declaration = Declaration
type T_Declarations = Declarations
type T_Export = Export
type T_Exports = Exports
type T_Expression = Expression
type T_Expressions = Expressions
type T_FieldDeclaration = FieldDeclaration
type T_FieldDeclarations = FieldDeclarations
type T_Fixity = Fixity
type T_FunctionBinding = FunctionBinding
type T_FunctionBindings = FunctionBindings
type T_GuardedExpression = GuardedExpression
type T_GuardedExpressions = GuardedExpressions
type T_Import = Import
type T_ImportDeclaration = ImportDeclaration
type T_ImportDeclarations = ImportDeclarations
type T_ImportSpecification = ImportSpecification
type T_Imports = Imports
type T_Judgement = ([(Name, Tp)]) -> (Tp, Core_Judgement, Judgement, Expression, Names)
type T_LeftHandSide = LeftHandSide
type T_Literal = Literal
type T_MaybeDeclarations = MaybeDeclarations
type T_MaybeExports = MaybeExports
type T_MaybeExpression = MaybeExpression
type T_MaybeImportSpecification = MaybeImportSpecification
type T_MaybeInt = MaybeInt
type T_MaybeName = MaybeName
type T_MaybeNames = MaybeNames
type T_Module = Module
type T_Name = Name
type T_Names = Names
type T_Pattern = Pattern
type T_Patterns = Patterns
type T_Position = Position
type T_Qualifier = Qualifier
type T_Qualifiers = Qualifiers
type T_Range = Range
type T_RecordExpressionBinding = RecordExpressionBinding
type T_RecordExpressionBindings = RecordExpressionBindings
type T_RecordPatternBinding = RecordPatternBinding
type T_RecordPatternBindings = RecordPatternBindings
type T_RightHandSide = RightHandSide
type T_SimpleJudgement = ([(Name, Tp)]) -> ([(String, Tp)]) -> (Core_Judgement, SimpleJudgement, [(String, Tp)], Names)
type T_SimpleJudgements = ([(Name, Tp)]) -> ([(String, Tp)]) -> (Core_Judgements, SimpleJudgements, [(String, Tp)], Names)
type T_SimpleType = SimpleType
type T_Statement = Statement
type T_Statements = Statements
type T_Strings = Strings
type T_Type = (Type, Names)
type T_TypeRule = ([(Name, Tp)]) -> ([(String, Tp)]) -> (Expression, Tp, Core_TypeRule, TypeRule, [(String, Tp)], Names)
type T_Types = (Types, Names)
type T_TypingStrategies = ImportEnvironment -> (TypingStrategies)
type T_TypingStrategy = ImportEnvironment -> (Core_TypingStrategy, TypingStrategy)
type T_UserStatement = ([((String, Maybe String), MessageBlock)]) -> Names -> ([(Name, Tp)]) -> ConstraintInfo -> (TypeConstraints ConstraintInfo) -> Predicates -> (Core_UserStatement, Names, UserStatement, Names, TypeConstraints ConstraintInfo, Predicates)
type T_UserStatements = ([((String, Maybe String), MessageBlock)]) -> Names -> ([(Name, Tp)]) -> ConstraintInfo -> (TypeConstraints ConstraintInfo) -> Predicates -> (Core_UserStatements, Names, UserStatements, Names, TypeConstraints ConstraintInfo, Predicates)
type CoreDecl = Decl Expr
type T_Alternative_v1 = (T_Alternative_vIn1) -> (T_Alternative_vOut1)
type T_Alternatives_v4 = (T_Alternatives_vIn4) -> (T_Alternatives_vOut4)
type T_AnnotatedType_v7 = (T_AnnotatedType_vIn7) -> (T_AnnotatedType_vOut7)
type T_AnnotatedTypes_v10 = (T_AnnotatedTypes_vIn10) -> (T_AnnotatedTypes_vOut10)
type T_Body_v13 = (T_Body_vIn13) -> (T_Body_vOut13)
type T_Constructor_v16 = (T_Constructor_vIn16) -> (T_Constructor_vOut16)
type T_Constructors_v19 = (T_Constructors_vIn19) -> (T_Constructors_vOut19)
type T_ContextItem_v22 = (T_ContextItem_vIn22) -> (T_ContextItem_vOut22)
type T_ContextItems_v25 = (T_ContextItems_vIn25) -> (T_ContextItems_vOut25)
type T_Declaration_v28 = (T_Declaration_vIn28) -> (T_Declaration_vOut28)
type T_Declarations_v31 = (T_Declarations_vIn31) -> (T_Declarations_vOut31)
type T_Export_v34 = (T_Export_vIn34) -> (T_Export_vOut34)
type T_Exports_v37 = (T_Exports_vIn37) -> (T_Exports_vOut37)
type T_Expression_v40 = (T_Expression_vIn40) -> (T_Expression_vOut40)
type T_Expressions_v43 = (T_Expressions_vIn43) -> (T_Expressions_vOut43)
type T_FieldDeclaration_v46 = (T_FieldDeclaration_vIn46) -> (T_FieldDeclaration_vOut46)
type T_FieldDeclarations_v49 = (T_FieldDeclarations_vIn49) -> (T_FieldDeclarations_vOut49)
type T_Fixity_v52 = (T_Fixity_vIn52) -> (T_Fixity_vOut52)
type T_FunctionBinding_v55 = (T_FunctionBinding_vIn55) -> (T_FunctionBinding_vOut55)
type T_FunctionBindings_v58 = (T_FunctionBindings_vIn58) -> (T_FunctionBindings_vOut58)
type T_GuardedExpression_v61 = (T_GuardedExpression_vIn61) -> (T_GuardedExpression_vOut61)
type T_GuardedExpressions_v64 = (T_GuardedExpressions_vIn64) -> (T_GuardedExpressions_vOut64)
type T_Import_v67 = (T_Import_vIn67) -> (T_Import_vOut67)
type T_ImportDeclaration_v70 = (T_ImportDeclaration_vIn70) -> (T_ImportDeclaration_vOut70)
type T_ImportDeclarations_v73 = (T_ImportDeclarations_vIn73) -> (T_ImportDeclarations_vOut73)
type T_ImportSpecification_v76 = (T_ImportSpecification_vIn76) -> (T_ImportSpecification_vOut76)
type T_Imports_v79 = (T_Imports_vIn79) -> (T_Imports_vOut79)
type T_LeftHandSide_v82 = (T_LeftHandSide_vIn82) -> (T_LeftHandSide_vOut82)
type T_Literal_v85 = (T_Literal_vIn85) -> (T_Literal_vOut85)
type T_MaybeDeclarations_v88 = (T_MaybeDeclarations_vIn88) -> (T_MaybeDeclarations_vOut88)
type T_MaybeExports_v91 = (T_MaybeExports_vIn91) -> (T_MaybeExports_vOut91)
type T_MaybeExpression_v94 = (T_MaybeExpression_vIn94) -> (T_MaybeExpression_vOut94)
type T_MaybeImportSpecification_v97 = (T_MaybeImportSpecification_vIn97) -> (T_MaybeImportSpecification_vOut97)
type T_MaybeInt_v100 = (T_MaybeInt_vIn100) -> (T_MaybeInt_vOut100)
type T_MaybeName_v103 = (T_MaybeName_vIn103) -> (T_MaybeName_vOut103)
type T_MaybeNames_v106 = (T_MaybeNames_vIn106) -> (T_MaybeNames_vOut106)
type T_Module_v109 = (T_Module_vIn109) -> (T_Module_vOut109)
type T_Name_v112 = (T_Name_vIn112) -> (T_Name_vOut112)
type T_Names_v115 = (T_Names_vIn115) -> (T_Names_vOut115)
type T_Pattern_v118 = (T_Pattern_vIn118) -> (T_Pattern_vOut118)
type T_Patterns_v121 = (T_Patterns_vIn121) -> (T_Patterns_vOut121)
type T_Position_v124 = (T_Position_vIn124) -> (T_Position_vOut124)
type T_Qualifier_v127 = (T_Qualifier_vIn127) -> (T_Qualifier_vOut127)
type T_Qualifiers_v130 = (T_Qualifiers_vIn130) -> (T_Qualifiers_vOut130)
type T_Range_v133 = (T_Range_vIn133) -> (T_Range_vOut133)
type T_RecordExpressionBinding_v136 = (T_RecordExpressionBinding_vIn136) -> (T_RecordExpressionBinding_vOut136)
type T_RecordExpressionBindings_v139 = (T_RecordExpressionBindings_vIn139) -> (T_RecordExpressionBindings_vOut139)
type T_RecordPatternBinding_v142 = (T_RecordPatternBinding_vIn142) -> (T_RecordPatternBinding_vOut142)
type T_RecordPatternBindings_v145 = (T_RecordPatternBindings_vIn145) -> (T_RecordPatternBindings_vOut145)
type T_RightHandSide_v148 = (T_RightHandSide_vIn148) -> (T_RightHandSide_vOut148)
type T_SimpleType_v151 = (T_SimpleType_vIn151) -> (T_SimpleType_vOut151)
type T_Statement_v154 = (T_Statement_vIn154) -> (T_Statement_vOut154)
type T_Statements_v157 = (T_Statements_vIn157) -> (T_Statements_vOut157)
type T_Strings_v160 = (T_Strings_vIn160) -> (T_Strings_vOut160)
type T_Type_v163 = (T_Type_vIn163) -> (T_Type_vOut163)
type T_Types_v166 = (T_Types_vIn166) -> (T_Types_vOut166)
type Joystick = Joystick
type Time = Double
type Path = [(Double, Double)]
type Frame = (Time, Form)
type Time = Double
type Pattern = [[Note]]
type WaveData = [Float]
type ChunkMixState = (Int, [(WaveData, Float, Int, Float, Float, Float)])
type SongMixState = [ChunkMixState]
type Xen = XenT IO
type Xen = XenT IO
type Xen = XenT IO
type Position = ((String, Int), Int)
type L = StateT (Position, String) Maybe
type Dyadic = MPFR_T
type Precision = Word
type Interval = Maybe Ball
type Nat = Word
type Chain = Nat -> Interval
type Type = String
type Signature = ByteString
type HermesID = Integer
type ProcName = String
type TTL = Double
type Script = [ExprH]
type BranchIndex = Int
type CoreTickish = Tickish Id
type Lemmas = Map LemmaName Lemma
type NamedLemma = (LemmaName, Lemma)
type AbsolutePathH = AbsolutePath Crumb
type LocalPathH = LocalPath Crumb
type BindingDepth = Int
type TransformH a b = Transform HermitC HermitM a b
type RewriteH a = Rewrite HermitC HermitM a
type BiRewriteH a = BiRewrite HermitC HermitM a
type LensH a b = Lens HermitC HermitM a b
type PathH = Path Crumb
type ExternalName = String
type ExternalHelp = [String]
type LemmaLibrary = TransformH () Lemmas
type DocH = MDoc HermitMark
type PrettyH a = Transform PrettyC HermitM a DocH
type EqualityProof c m = (Rewrite c m CoreExpr, Rewrite c m CoreExpr)
type HERMITPass = IORef (Maybe (AST, ASTMap)) -> PassInfo -> [CommandLineOption] -> ModGuts -> CoreM ModGuts
type PluginM = PluginT IO
type TagName = String
type CLMonad m = (MonadIO m, MonadState CommandLineState m, MonadReader PluginReader m, MonadError CLException m)
type PathStack = ([LocalPathH], LocalPathH)
type ScriptName = String
type PPAction = ByteString -> PPM (Either CompileError ByteString)
type CompileError = ByteString
type BuildMapping = [BuildSpec]
type ConfigBuilder = HerringboneSettings -> HerringboneSettings
type CompileError = ByteString
type HParser = ByteString -> Bool -> IO (ForeignPtr Word8, CInt, Maybe XMLParseError)
type Attributes tag text = [(tag, text)]
type UAttributes text = Attributes text text
type QAttributes text = Attributes (QName text) text
type NAttributes text = Attributes (NName text) text
type Node tag text = NodeG [] tag text
type UNode text = Node text text
type QNode text = Node (QName text) text
type NNode text = Node (NName text) text
type Cursor tag text = CursorG NodeG [] tag text
type Path tag text = PathG NodeG [] tag text
type PathG n c tag text = [(c (n c tag text), Tag tag text, c (n c tag text))]
type Document a tag text = DocumentG a [] tag text
type Node a tag text = NodeG a [] tag text
type UDocument a text = Document a text text
type LDocument tag text = Document XMLParseLocation tag text
type ULDocument text = Document XMLParseLocation text text
type UNode a text = Node a text text
type LNode tag text = Node XMLParseLocation tag text
type ULNode text = LNode text text
type QDocument a text = Document a (QName text) text
type QLDocument text = Document XMLParseLocation (QName text) text
type QNode a text = Node a (QName text) text
type QLNode text = LNode (QName text) text
type NDocument a text = Document a (NName text) text
type NLDocument text = Document XMLParseLocation (NName text) text
type NNode a text = Node a (NName text) text
type NLNode text = LNode (NName text) text
type Node a tag text = NodeG a [] tag text
type UNode a text = Node a text text
type LNode tag text = Node XMLParseLocation tag text
type ULNode text = LNode text text
type QNode a text = Node a (QName text) text
type QLNode text = LNode (QName text) text
type NNode a text = Node a (NName text) text
type NLNode text = LNode (NName text) text
type Node s m tag text = NodeG (ListT (XMLT s m)) tag text
type UNode s m text = Node s m text text
type QNode s m a text = Node s a (QName text) text
type NNode s m text a = Node s a (NName text) text
type Node tag text = NodeG [] tag text
type UNode text = Node text text
type QNode text = Node (QName text) text
type NNode text = Node (NName text) text
type Attributes tag text = [(tag, text)]
type UAttributes text = Attributes text text
type QAttributes text = Attributes (QName text) text
type NAttributes text = Attributes (NName text) text
type FannType = Double
type CFannType = CDouble
type CFannTypePtr = Ptr CDouble
type ActivationFunction = Word32
type TrainAlgorithm = Word32
type ErrorFunction = Word32
type StopFunction = Word32
type FannPtr = Ptr Fann
type TrainDataPtr = Ptr TrainData
type CallbackType = FannPtr -> TrainDataPtr -> Int -> Int -> Float -> Int -> IO Bool
type CCallbackType = FannPtr -> TrainDataPtr -> CUInt -> CUInt -> CFloat -> CUInt -> IO Int
type HFiaR = HFiaRT IO
type FusionState a = ErrorT FusionError VarGenState a
type VarGen = Map String Int
type Constructor = String
type Cell = [Vertex]
type Partition = [Cell]
type Indicator = Int32
type Permutation = Array Vertex Vertex
type GAState c p = State (Config c p)
type ANN = [Layer]
type Layer = [Node]
type Node = [Double]
type Vector3Ptr = Ptr (Vector3)
type Vec3Ptr = Ptr (Vec3)
type Vector2Ptr = Ptr (Vector2)
type Vec2Ptr = Ptr (Vec2)
type QuatPtr = Ptr (Quat)
type QuaternionPtr = Ptr (Quaternion)
type ColourPtr = Ptr (Colour)
type HG3DClassPtr = Ptr (HG3DClass)
type ClassHG3DBulletDefaultCreator = Ptr (())
type ClassHG3DBulletMotionStateHandler = Ptr (())
type ClassHG3DRigidBodyCreator = Ptr (())
type ClassActionInterface = Ptr (())
type ClassBroadphaseInterface = Ptr (())
type ClassCapsuleShapeX = Ptr (())
type ClassCapsuleShapeZ = Ptr (())
type ClassCollisionConfiguration = Ptr (())
type ClassCollisionDispatcher = Ptr (())
type ClassCollisionWorld = Ptr (())
type ClassConeShapeX = Ptr (())
type ClassConeShapeZ = Ptr (())
type ClassCylinderShapeX = Ptr (())
type ClassCylinderShapeZ = Ptr (())
type ClassDefaultCollisionConfiguration = Ptr (())
type ClassDispatcher = Ptr (())
type ClassDynamicsWorld = Ptr (())
type ClassMotionState = Ptr (())
type ClassRigidBody = Ptr (())
type ClassSimpleBroadphase = Ptr (())
type ClassSimpleDynamicsWorld = Ptr (())
type HG3DClassPtr = Ptr (HG3DClass)
type ClassCheckbox = Ptr (())
type ClassCombobox = Ptr (())
type ClassComboDropList = Ptr (())
type ClassDefaultLogger = Ptr (())
type ClassDefaultResourceProvider = Ptr (())
type ClassDragContainer = Ptr (())
type ClassEditbox = Ptr (())
type ClassEventArgs = Ptr (())
type ClassEventSet = Ptr (())
type ClassFont = Ptr (())
type ClassFontManager = Ptr (())
type ClassFrameWindow = Ptr (())
type ClassImageCodec = Ptr (())
type ClassImageset = Ptr (())
type ClassItemEntry = Ptr (())
type ClassItemListbox = Ptr (())
type ClassListbox = Ptr (())
type ClassListboxItem = Ptr (())
type ClassListboxTextItem = Ptr (())
type ClassListHeader = Ptr (())
type ClassListHeaderSegment = Ptr (())
type ClassLogger = Ptr (())
type ClassMenuBase = Ptr (())
type ClassMenuItem = Ptr (())
type ClassMultiColumnList = Ptr (())
type ClassMultiLineEditbox = Ptr (())
type ClassOgreRenderer = Ptr (())
type ClassOgreResourceProvider = Ptr (())
type ClassProgressBar = Ptr (())
type ClassPropertySet = Ptr (())
type ClassPushButton = Ptr (())
type ClassRadioButton = Ptr (())
type ClassRenderer = Ptr (())
type ClassResourceProvider = Ptr (())
type ClassScheme = Ptr (())
type ClassSchemeManager = Ptr (())
type ClassScriptFunctor = Ptr (())
type ClassScriptModule = Ptr (())
type ClassScrollablePane = Ptr (())
type ClassScrollbar = Ptr (())
type ClassScrolledContainer = Ptr (())
type ClassScrolledItemListBase = Ptr (())
type ClassSlider = Ptr (())
type ClassSpinner = Ptr (())
type ClassSystem = Ptr (())
type ClassTabButton = Ptr (())
type ClassThumb = Ptr (())
type ClassTooltip = Ptr (())
type ClassTree = Ptr (())
type ClassWidgetLookManager = Ptr (())
type ClassWindow = Ptr (())
type ClassWindowManager = Ptr (())
type ClassXMLParser = Ptr (())
type ClassHG3DEventController = Ptr (())
type ClassHG3DEventStaticFunctions = Ptr (())
type ClassHG3DListboxStaticFunctions = Ptr (())
type ClassHG3DWindowStaticFunctions = Ptr (())
type ClassSystemHG3D = Ptr (())
type ClassWindowManagerHG3D = Ptr (())
type Entity = Map Component Dynamic
type Listeners = TVar (Map Component [Entity -> Entity -> IO ()])
type ComponentListener = TVar (Maybe (Entity, Entity))
type OnUpdateFunction = Entity -> Entity -> IO ()
type OnDeleteFunction = IO ()
type SystemRecord = (ComponentListener, OnUpdateFunction, OnDeleteFunction)
type SystemFunction a = a -> ERef -> IO [SystemRecord]
type GameTime = TimeSpec
type Size = Vec3
type Position = Vec3
type Orientation = UnitQuaternion
type HG3DClassPtr = Ptr (HG3DClass)
type ClassEnetClient = Ptr (())
type ClassEnetPacket = Ptr (())
type ClassEnetServer = Ptr (())
type ClassEnet = Ptr (())
type Vector3Ptr = Ptr (Vector3)
type Vec3Ptr = Ptr (Vec3)
type Vector2Ptr = Ptr (Vector2)
type Vec2Ptr = Ptr (Vec2)
type SharedPtrPtr = Ptr (SharedPtr)
type RadiansPtr = Ptr (Radians)
type QuatPtr = Ptr (Quat)
type QuaternionPtr = Ptr (Quaternion)
type DegreesPtr = Ptr (Degrees)
type ColourPtr = Ptr (Colour)
type HG3DClassPtr = Ptr (HG3DClass)
type ClassAnimation = Ptr (())
type ClassAnimationState = Ptr (())
type ClassAnimationStateSet = Ptr (())
type ClassAnimationTrack = Ptr (())
type ClassArchive = Ptr (())
type ClassArchiveManager = Ptr (())
type ClassBillboard = Ptr (())
type ClassBillboardChain = Ptr (())
type ClassBillboardChainFactory = Ptr (())
type ClassBillboardSet = Ptr (())
type ClassBillboardSetFactory = Ptr (())
type ClassBone = Ptr (())
type ClassCamera = Ptr (())
type ClassConfigFile = Ptr (())
type ClassControllerManager = Ptr (())
type ClassEntity = Ptr (())
type ClassEntityFactory = Ptr (())
type ClassException = Ptr (())
type ClassFrustum = Ptr (())
type ClassLight = Ptr (())
type ClassLightFactory = Ptr (())
type ClassLog = Ptr (())
type ClassLogManager = Ptr (())
type ClassManualObject = Ptr (())
type ClassManualObjectFactory = Ptr (())
type ClassManualObjectSection = Ptr (())
type ClassMaterial = Ptr (())
type ClassMaterialManager = Ptr (())
type ClassMesh = Ptr (())
type ClassMeshManager = Ptr (())
type ClassMovableObject = Ptr (())
type ClassMovableObjectFactory = Ptr (())
type ClassMultiRenderTarget = Ptr (())
type ClassNode = Ptr (())
type ClassNodeAnimationTrack = Ptr (())
type ClassNumericAnimationTrack = Ptr (())
type ClassRenderable = Ptr (())
type ClassRenderSystem = Ptr (())
type ClassRenderTarget = Ptr (())
type ClassRenderTexture = Ptr (())
type ClassRenderWindow = Ptr (())
type ClassResource = Ptr (())
type ClassResourceGroupManager = Ptr (())
type ClassResourceManager = Ptr (())
type ClassRoot = Ptr (())
type ClassSceneManager = Ptr (())
type ClassSceneManagerFactory = Ptr (())
type ClassSceneNode = Ptr (())
type ClassSkeleton = Ptr (())
type ClassSkeletonManager = Ptr (())
type ClassTextureManager = Ptr (())
type ClassTimeIndex = Ptr (())
type ClassVertexAnimationTrack = Ptr (())
type ClassViewport = Ptr (())
type ClassWindowEventUtilities = Ptr (())
type ClassWindowUtilsHG3D = Ptr (())
type ClassHG3DMessagePump = Ptr (())
type Vector3fPtr = Ptr (Vector3f)
type Vec3Ptr = Ptr (Vec3)
type HG3DClassPtr = Ptr (HG3DClass)
type ClassMouseHG3D = Ptr (())
type ClassJoystick = Ptr (())
type ClassKeyboard = Ptr (())
type ClassListener = Ptr (())
type ClassMouse = Ptr (())
type ClassMusic = Ptr (())
type ClassSound = Ptr (())
type ClassSoundBuffer = Ptr (())
type ClassSoundSource = Ptr (())
type ClassSoundStream = Ptr (())
type Token = Int
type Operation = String
type Variable = String
type Const = CString
type CString = String
type BreakpointType = String
type BkptNumber = Int
type Graphic = Draw ()
type Point = (Int, Int)
type Size = (Int, Int)
type Angle = Double
type Time = Integer
type Alignment = (HAlign, VAlign)
type Title = String
type Title = String
type Size = (Int, Int)
type Graphic = Draw ()
type Point = (Int, Int)
type Angle = Double
type GraphUsableMonad m = (MonadBaseControl IO m, MonadResource m, MonadLogger m)
type ObjectID = Int32
type ObjectTypeID = Int16
type RelationID = Int32
type RelationTypeID = Int16
type PropertyID = Int32
type PropertyTypeID = Int16
type DataTypeID = Int8
type PropertyValueOffset = Int64
type PropertyValueLength = Int64
type Files = [File]
type DevicePath = String
type VendorID = Word16
type ProductID = Word16
type ReleaseNumber = Word16
type SerialNumber = String
type InterfaceNumber = Int
type Vector a = [a]
type ClusterResult a = [[a]]
type ClusterMap a = IntMap (Cluster a)
type ID = Key
type MinimumMap a = MultiSet (a, Pair ID)
type CombinationMap a = Map (Pair ID) a
type Pair a = (a, a)
type DistanceFunction a = Vector a -> Vector a -> a
type SimilarityFunction a = [Vector a] -> a
type Transformation a b = a -> Vector b
type Distance = Double
type Distance = Double
type X = Double
type Difference = DifferenceP FilePath
type Key = ByteString
type Value = ByteString
type Item = (Key, Value)
type KeySpace = ByteString
type KeySpaceId = ByteString
type LevelDB a = LevelDBT IO a
type RWOptions = (ReadOptions, WriteOptions)
type WriteBatch = [BatchOp]
type MonadResourceBase (m :: * -> *) = (MonadBaseControl IO m, MonadThrow m, MonadUnsafeIO m, MonadIO m, Applicative m)
type TokenMatcher = [Match]
type Callback = [String] -> TokenMatcher
type LexerM = ErrorT LexerError (State LexerState)
type TokenMatcher = [Match]
type Callback = [String] -> TokenMatcher
type Context = (String, String)
type ContextStack = [Context]
type Token = (TokenType, String)
type SourceLine = [Token]
type KateParser = GenParser Char SyntaxState
type Extend f = f NodeInfo -> Printer State ()
type Transaction a = Set a
type Items a = Set a
type Interpreter = InterpreterT IO
type ModuleName = String
type Id = String
type OnUninstall m = OAuthId -> m ()
type OAuthId = Text
type RoomName = Text
type RoomId = Int
type IpeBitmap = XmlTree
type LayerDefinition = String
type AMap = Map String String
type LayerDefinition = String
type AMap = Map String String
type CpFloat = Double
type Time = CpFloat
type Angle = CpFloat
type Distance = CpFloat
type Damping = CpFloat
type BiasCoef = CpFloat
type Position = Vector
type Mass = CpFloat
type Moment = CpFloat
type Velocity = Vector
type Force = Vector
type AngVel = CpFloat
type Torque = CpFloat
type CollisionType = Word32
type Group = Word32
type Layers = Word32
type Elasticity = CpFloat
type Friction = CpFloat
type SurfaceVel = Vector
type Segment = (Position, Position)
type Iterations = CInt
type ElasticIterations = CInt
type Gravity = Vector
type TimeStamp = CInt
type APIKey = ByteString
type SimpleText = ByteString
type Property = (SimpleText, Text)
type LexSet i a b = Map (Key i) (Val a Text b)
type Node i a b = Map i (Val a Rule b)
type DAWG i a b = DAWG Char Weight (Node i a b)
type DAWG'Init i a b = DAWG Char (Node i a b)
type Weight = Int
type UID = Int
type POS = Text
type Word = Text
type Base = Text
type IsBase = Bool
type BaseDAWG i a b = DAWG i a b
type FormDAWG i a b = DAWG i a b
type Poli = Bila POS () ()
type PLex = Lex POS () ()
type PLexSet = LexSet POS () ()
type Corresp = Poli -> LexEntry -> PLexSet
type Core = Poli -> LexEntry -> [PLexSet]
type Filter = LexEntry -> PLex -> Bool
type Choice = [PLexSet] -> PLexSet
type Key = Key UID
type UID = Int
type Parser = Parsec String ()
type PlotOptions = T (T Int Double)
type (:><:) = Bin2D
type Histogram bin a = Histogram Vector bin a
type EntPath = [EntName]
type TreeEnt = (ModePerm, EntName, Ref)
type ObjectHeader = (ObjectType, Word64, Maybe ObjectPtr)
type ObjectData = ByteString
type PackedObjectRaw = (PackedObjectInfo, ByteString)
type HTree = [(ModePerm, EntName, HTreeEnt)]
type EntPath = [EntName]
type WorkTree = MVar TreeSt
type JInt = Exp Int
type JString = Exp String
type JBool = Exp Bool
type JFloat = Exp Float
type JVoid = Exp ()
type JObject c = Exp c
type JArray t = Exp (Array t)
type JSParser a = GenParser (SourcePos, Token) JSPState a
type Value = Either Int (Either String (Either Bool (Either Undefined (Either Null (Either ObjId (Either Ref (Either [ObjId] (Either CallValue (Either [String] (Either BreakContinue ()))))))))))
type InterpM = ErrorT Throwable (StateT JSState IO)
type Ctx = ([ObjId], ObjId, ObjId, ObjId)
type HJScript = XMLGenT HJScript'
type ReqParam = (JString, JString)
type ReqParams = [ReqParam]
type XML = Exp ElementNode
type Child = Exp Node
type Attribute = Exp AttributeNode
type HJScript = XMLGenT HJScript'
type HJScript' = StateT HJState (Writer (Block ()))
type Jsons = [Json]
type JFilter = Json -> Jsons
type Graph = HashMap Text (HashMap Text Value)
type ValErr = Text
type Validator = Value -> Vector ValErr
type ValidatorGen = Spec -> Graph -> RawSchema -> Value -> Maybe Validator
type EmbeddedSchemas = Text -> Value -> Vector RawSchema
type LineNumber = Int
type CharNumber = Int
type ErrorMessage = String
type TexDecl = LatexM TexDcl
type LatexItem = LatexM LatexItm
type ParItem = LatexM ParItm
type MathDecl = LatexM MathDcl
type ListItem = LatexM ListItm
type PreambleItem = LatexM PreambleItm
type DocumentClass = LatexM DocumentClss
type TexDeclW = Writer TexDecl ()
type LatexItemW = Writer LatexItem ()
type ParItemW = Writer ParItem ()
type MathDeclW = Writer MathDecl ()
type MathItemW = Writer MathItem ()
type PreambleItemW = Writer PreambleItem ()
type XChar = Char -> LatexItem
type TargetName = String
type Label = String
type Overlays = [Overlay]
type BeamerOpt = (String, String)
type TexDimension = LatexLength
type LineNumber = Int
type CharNumber = Int
type TexDecl = LatexM TexDcl
type LatexItem = LatexM LatexItm
type ParItem = LatexM ParItm
type MathDecl = LatexM MathDcl
type ListItem = LatexM ListItm
type PreambleItem = LatexM PreambleItm
type DocumentClass = LatexM DocumentClss
type TexDeclW = Writer TexDecl ()
type LatexItemW = Writer LatexItem ()
type ParItemW = Writer ParItem ()
type MathDeclW = Writer MathDecl ()
type MathItemW = Writer MathItem ()
type PreambleItemW = Writer PreambleItem ()
type Writer w = WriterT w Identity
type Frequency = Int
type Item = Int
type ValueList datatype = IndexList2ValueList datatype (HList (DepIndexList datatype))
type Bagging n model = Bagging' n 0 model
type LossFunction model = model -> [Datapoint model] -> Double
type SystemString = String
type Regexp = String
type Replacement = String
type SmartDate = (String, String, String)
type AccountName = String
type Commodity = String
type Quantity = Decimal
type Tag = (String, String)
type Year = Integer
type JournalUpdate = ExceptT String IO (Journal -> Journal)
type StorageFormat = String
type SystemString = String
type RawOpts = [(String, String)]
type CsvRecord = [String]
type FormatStr = String
type EntriesReport = [EntriesReportItem]
type EntriesReportItem = Transaction
type PostingsReport = (String, [PostingsReportItem])
type PostingsReportItem = (Maybe Day, Maybe Day, Maybe String, Posting, MixedAmount)
type TransactionsReport = (String, [TransactionsReportItem])
type TransactionsReportItem = (Transaction, Transaction, Bool, String, MixedAmount, MixedAmount)
type BalanceReport = ([BalanceReportItem], MixedAmount)
type BalanceReportItem = (RenderableAccountName, MixedAmount)
type RenderableAccountName = (AccountName, AccountName, Int)
type MultiBalanceReportRow = (RenderableAccountName, [MixedAmount], MixedAmount, MixedAmount)
type Handler = HandlerT App IO
type Widget = WidgetT App IO ()
type AppRoute = Route App
type Form x = Html -> MForm (HandlerT App IO) (FormResult x, Widget)
type EvLoopPtr = Ptr EvLoop
type CEvLoopFlagType = CInt
type CEvUnloopFlagType = CInt
type CEvFlagType = CInt
type CEvBackendFlagType = CInt
type MutexCallback = EvLoopPtr -> IO ()
type CEventType = CInt
type EvIoPtr = Ptr EvIo
type IoCallback = EvLoopPtr -> EvIoPtr -> CEventType -> IO ()
type EvTimerPtr = Ptr EvTimer
type TimerCallback = EvLoopPtr -> EvTimerPtr -> CEventType -> IO ()
type EvAsyncPtr = Ptr EvAsync
type AsyncCallback = EvLoopPtr -> EvAsyncPtr -> CEventType -> IO ()
type EvTimestamp = CDouble
type C'git_error_t = CUInt
type C'git_off_t = CLong
type C'git_time_t = CLong
type C'git_otype = CInt
type C'git_ref_t = CUInt
type C'git_branch_t = CUInt
type C'git_filemode_t = CUInt
type C'git_config_foreach_cb = FunPtr (Ptr (C'git_config_entry) -> Ptr () -> IO CInt)
type C'git_config_backend_open_callback = FunPtr (Ptr C'git_config_backend -> CUInt -> IO CInt)
type C'git_config_backend_get_callback = FunPtr (Ptr C'git_config_backend -> CString -> Ptr (Ptr C'git_config_entry) -> IO CInt)
type C'git_config_backend_get_multivar_callback = FunPtr (Ptr C'git_config_backend -> CString -> CString -> C'git_config_foreach_cb -> Ptr () -> IO CInt)
type C'git_config_backend_set_callback = FunPtr (Ptr C'git_config_backend -> CString -> CString -> IO CInt)
type C'git_config_backend_set_multivar_callback = FunPtr (Ptr C'git_config_backend -> CString -> CString -> CString -> IO CInt)
type C'git_config_backend_del_callback = FunPtr (Ptr C'git_config_backend -> CString -> IO CInt)
type C'git_config_backend_foreach_callback = FunPtr (Ptr C'git_config_backend -> CString -> C'git_config_foreach_cb -> Ptr () -> IO CInt)
type C'git_config_backend_refresh_callback = FunPtr (Ptr C'git_config_backend -> IO CInt)
type C'git_config_backend_free_callback = FunPtr (Ptr C'git_config_backend -> IO ())
type C'git_cvar_t = CUInt
type C'git_transfer_progress_callback = FunPtr (Ptr (C'git_transfer_progress) -> Ptr () -> IO CInt)
type C'git_direction = CUInt
type C'git_headlist_cb = FunPtr (Ptr (C'git_remote_head) -> Ptr () -> IO CInt)
type C'git_note_foreach_cb = FunPtr (Ptr (C'git_oid) -> Ptr (C'git_oid) -> Ptr () -> IO CInt)
type C'git_note_iterator = C'git_iterator
type C'git_odb_foreach_cb = FunPtr (Ptr (C'git_oid) -> Ptr () -> IO CInt)
type C'git_odb_backend_read_callback = FunPtr (Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt)
type C'git_odb_backend_read_prefix_callback = FunPtr (Ptr C'git_oid -> Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> CSize -> IO CInt)
type C'git_odb_backend_read_header_callback = FunPtr (Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt)
type C'git_odb_backend_write_callback = FunPtr (Ptr C'git_oid -> Ptr C'git_odb_backend -> Ptr () -> CSize -> C'git_otype -> IO CInt)
type C'git_odb_backend_writestream_callback = FunPtr (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> CSize -> C'git_otype -> IO CInt)
type C'git_odb_backend_readstream_callback = FunPtr (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt)
type C'git_odb_backend_exists_callback = FunPtr (Ptr C'git_odb_backend -> Ptr C'git_oid -> CInt -> IO CInt)
type C'git_odb_backend_refresh_callback = FunPtr (Ptr C'git_odb_backend -> IO CInt)
type C'git_odb_backend_foreach_callback = FunPtr (Ptr C'git_odb_backend -> C'git_odb_foreach_cb -> Ptr () -> IO CInt)
type C'git_odb_backend_writepack_callback = FunPtr (Ptr (Ptr C'git_odb_writepack) -> Ptr C'git_odb_backend -> C'git_transfer_progress_callback -> Ptr () -> IO CInt)
type C'git_odb_backend_free_callback = FunPtr (Ptr C'git_odb_backend -> IO ())
type C'git_odb_stream_read_callback = FunPtr (Ptr C'git_odb_stream -> CString -> CSize -> IO CInt)
type C'git_odb_stream_write_callback = FunPtr (Ptr C'git_odb_stream -> CString -> CSize -> IO CInt)
type C'git_odb_stream_finalize_write_callback = FunPtr (Ptr C'git_oid -> Ptr C'git_odb_stream -> IO CInt)
type C'git_odb_stream_free_callback = FunPtr (Ptr C'git_odb_stream -> IO ())
type C'git_odb_writepack_add_callback = FunPtr (Ptr C'git_odb_writepack -> Ptr () -> CSize -> Ptr C'git_transfer_progress -> IO CInt)
type C'git_odb_writepack_commit_callback = FunPtr (Ptr C'git_odb_writepack -> Ptr C'git_transfer_progress -> IO CInt)
type C'git_odb_writepack_free_callback = FunPtr (Ptr C'git_odb_writepack -> IO ())
type C'git_packbuilder_foreach_cb = FunPtr (Ptr () -> CSize -> Ptr () -> IO CInt)
type C'git_reference_foreach_cb = FunPtr (CString -> Ptr () -> IO CInt)
type C'git_reference_normalize_t = CUInt
type C'git_refdb_backend_exists_callback = FunPtr (Ptr CInt -> Ptr C'git_refdb_backend -> CString -> IO CInt)
type C'git_refdb_backend_lookup_callback = FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_refdb_backend -> CString -> IO CInt)
type C'git_refdb_backend_foreach_callback = FunPtr (Ptr C'git_refdb_backend -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO CInt)
type C'git_refdb_backend_foreach_glob_callback = FunPtr (Ptr C'git_refdb_backend -> CString -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO CInt)
type C'git_refdb_backend_write_callback = FunPtr (Ptr C'git_refdb_backend -> Ptr C'git_reference -> IO CInt)
type C'git_refdb_backend_delete_callback = FunPtr (Ptr C'git_refdb_backend -> Ptr C'git_reference -> IO CInt)
type C'git_refdb_backend_compress_callback = FunPtr (Ptr C'git_refdb_backend -> IO CInt)
type C'git_refdb_backend_free_callback = FunPtr (Ptr C'git_refdb_backend -> IO ())
type C'git_repository_open_flag_t = CUInt
type C'git_repository_init_flag_t = CUInt
type C'git_repository_init_mode_t = CUInt
type C'git_repository_fetchhead_foreach_cb = FunPtr (CString -> CString -> Ptr (C'git_oid) -> CUInt -> Ptr () -> IO CInt)
type C'git_repository_mergehead_foreach_cb = FunPtr (Ptr (C'git_oid) -> Ptr () -> IO CInt)
type C'git_repository_state_t = CUInt
type C'git_reset_t = CUInt
type C'git_revparse_mode_t = CUInt
type C'git_stash_flags = CUInt
type C'git_stash_cb = FunPtr (CSize -> CString -> Ptr (C'git_oid) -> Ptr () -> IO CInt)
type C'git_status_t = CUInt
type C'git_status_cb = FunPtr (CString -> CUInt -> Ptr () -> IO CInt)
type C'git_status_show_t = CUInt
type C'git_status_opt_t = CUInt
type C'git_submodule_update_t = CInt
type C'git_submodule_ignore_t = CInt
type C'git_submodule_status_t = CUInt
type C'git_submodule_foreach_callback = FunPtr (Ptr (C'git_submodule) -> CString -> Ptr () -> IO CInt)
type C'git_tag_foreach_cb = FunPtr (CString -> Ptr (C'git_oid) -> Ptr () -> IO CInt)
type C'git_trace_level_t = CUInt
type C'git_trace_callback = FunPtr (C'git_trace_level_t -> CString -> IO ())
type C'git_credtype_t = CUInt
type C'git_cred_free_callback = FunPtr (Ptr C'git_cred -> IO ())
type C'git_cred_acquire_cb = FunPtr (Ptr (Ptr (C'git_cred)) -> CString -> CString -> CUInt -> Ptr () -> IO CInt)
type C'git_transport_flags_t = CUInt
type C'git_transport_message_cb = FunPtr (CString -> CInt -> Ptr () -> IO ())
type C'git_transport_set_callbacks_callback = FunPtr (Ptr C'git_transport -> C'git_transport_message_cb -> C'git_transport_message_cb -> Ptr () -> IO CInt)
type C'git_transport_connect_callback = FunPtr (Ptr C'git_transport -> CString -> C'git_cred_acquire_cb -> Ptr () -> CInt -> CInt -> IO CInt)
type C'git_transport_ls_callback = FunPtr (Ptr C'git_transport -> C'git_headlist_cb -> Ptr () -> IO CInt)
type C'git_transport_push_callback = FunPtr (Ptr C'git_transport -> Ptr C'git_push -> IO CInt)
type C'git_transport_negotiate_fetch_callback = FunPtr (Ptr C'git_transport -> Ptr C'git_repository -> Ptr (Ptr C'git_remote_head) -> CSize -> IO CInt)
type C'git_transport_download_pack_callback = FunPtr (Ptr C'git_transport -> Ptr C'git_repository -> Ptr C'git_transfer_progress -> C'git_transfer_progress_callback -> Ptr () -> IO CInt)
type C'git_transport_is_connected_callback = FunPtr (Ptr C'git_transport -> IO CInt)
type C'git_transport_read_flags_callback = FunPtr (Ptr C'git_transport -> Ptr CInt -> IO CInt)
type C'git_transport_cancel_callback = FunPtr (Ptr C'git_transport -> IO ())
type C'git_transport_close_callback = FunPtr (Ptr C'git_transport -> IO CInt)
type C'git_transport_free_callback = FunPtr (Ptr C'git_transport -> IO ())
type C'git_transport_cb = FunPtr (Ptr (Ptr (C'git_transport)) -> Ptr (C'git_remote) -> Ptr () -> IO CInt)
type C'git_smart_service_t = CUInt
type C'git_smart_subtransport_stream_read_callback = FunPtr (Ptr C'git_smart_subtransport_stream -> CString -> CSize -> Ptr CSize -> IO CInt)
type C'git_smart_subtransport_stream_write_callback = FunPtr (Ptr C'git_smart_subtransport_stream -> CString -> CSize -> IO CInt)
type C'git_smart_subtransport_stream_free_callback = FunPtr (Ptr C'git_smart_subtransport_stream -> IO ())
type C'git_smart_subtransport_action_callback = FunPtr (Ptr (Ptr C'git_smart_subtransport_stream) -> Ptr C'git_smart_subtransport -> CString -> C'git_smart_service_t -> IO CInt)
type C'git_smart_subtransport_close_callback = FunPtr (Ptr C'git_smart_subtransport -> IO CInt)
type C'git_smart_subtransport_free_callback = FunPtr (Ptr C'git_smart_subtransport -> IO ())
type C'git_smart_subtransport_cb = FunPtr (Ptr (Ptr (C'git_smart_subtransport)) -> Ptr (C'git_transport) -> IO CInt)
type C'git_remote_rename_problem_cb = FunPtr (CString -> Ptr () -> IO CInt)
type C'git_remote_completion_type = CUInt
type C'git_remote_callbacks_progress_callback = FunPtr (CString -> CInt -> Ptr () -> IO ())
type C'git_remote_callbacks_completion_callback = FunPtr (C'git_remote_completion_type -> Ptr () -> IO CInt)
type C'git_remote_callbacks_update_tips_callback = FunPtr (CString -> Ptr C'git_oid -> Ptr C'git_oid -> Ptr () -> IO CInt)
type C'git_remote_autotag_option_t = CUInt
type C'git_treebuilder_filter_cb = FunPtr (Ptr (C'git_tree_entry) -> Ptr () -> IO CInt)
type C'git_treewalk_cb = FunPtr (CString -> Ptr (C'git_tree_entry) -> Ptr () -> IO CInt)
type C'git_treewalk_mode = CUInt
type C'git_diff_option_t = CUInt
type C'git_diff_flag_t = CUInt
type C'git_delta_t = CUInt
type C'git_diff_notify_cb = FunPtr (Ptr (C'git_diff_list) -> Ptr (C'git_diff_delta) -> CString -> Ptr () -> IO CInt)
type C'git_diff_file_cb = FunPtr (Ptr (C'git_diff_delta) -> CFloat -> Ptr () -> IO CInt)
type C'git_diff_hunk_cb = FunPtr (Ptr (C'git_diff_delta) -> Ptr (C'git_diff_range) -> CString -> CSize -> Ptr () -> IO CInt)
type C'git_diff_line_t = CUInt
type C'git_diff_data_cb = FunPtr (Ptr (C'git_diff_delta) -> Ptr (C'git_diff_range) -> CChar -> CString -> CSize -> Ptr () -> IO CInt)
type C'git_diff_find_t = CUInt
type C'git_diff_similarity_metric_file_signature_callback = FunPtr (Ptr (Ptr ()) -> Ptr C'git_diff_file -> CString -> Ptr () -> IO CInt)
type C'git_diff_similarity_metric_buffer_signature_callback = FunPtr (Ptr (Ptr ()) -> Ptr C'git_diff_file -> CString -> CSize -> Ptr () -> IO CInt)
type C'git_diff_similarity_metric_free_signature_callback = FunPtr (Ptr () -> Ptr () -> IO ())
type C'git_diff_similarity_metric_similarity_callback = FunPtr (Ptr CInt -> Ptr () -> Ptr () -> Ptr () -> IO CInt)
type C'git_checkout_strategy_t = CUInt
type C'git_checkout_notify_t = CUInt
type C'git_checkout_notify_cb = FunPtr (C'git_checkout_notify_t -> CString -> Ptr (C'git_diff_file) -> Ptr (C'git_diff_file) -> Ptr (C'git_diff_file) -> Ptr () -> IO CInt)
type C'git_checkout_progress_cb = FunPtr (CString -> CSize -> CSize -> Ptr () -> IO ())
type C'git_branch_foreach_cb = FunPtr (CString -> C'git_branch_t -> Ptr () -> IO (CInt))
type C'git_blob_chunk_cb = FunPtr (CString -> CSize -> Ptr () -> IO CInt)
type C'git_attr_t = CUInt
type C'git_attr_foreach_callback = FunPtr (CString -> CString -> Ptr () -> IO CInt)
type SassImportEntry = Ptr SassImport
type SassImportList = Ptr (Ptr SassImport)
type SassImporterEntry = Ptr SassImporter
type SassImporterList = Ptr (Ptr SassImporter)
type SassImporterFnType = CString -> SassImporterEntry -> Ptr SassCompiler -> IO SassImportList
type SassImporterFn = FunPtr SassImporterFnType
type SassFunctionEntry = Ptr SassFunction
type SassFunctionList = Ptr (Ptr SassFunction)
type SassFunctionFnType = Ptr SassValue -> SassFunctionEntry -> Ptr SassOptions -> IO (Ptr SassValue)
type SassFunctionFn = FunPtr SassFunctionFnType
type Encoding = TextEncoding
type HEqK (x :: k1) (y :: k2) (b :: Bool) = HEq (Proxy x) (Proxy y) b
type Arity f n = (ArityFwd f n, ArityRev f n)
type TypeablePolyK (a :: k) = Typeable a
type HProxies xs = HProxiesFD xs (AddProxy xs)
type HUnfold p s = HUnfoldR p (ApplyR p s)
type HUnfold' p res = HUnfoldFD p (ApplyR p res) (HUnfold p res)
type HReplicate n e = HReplicateFD n e (HReplicateR n e)
type HMapOut f l e = HFoldr (Mapcar f) [e] l [e]
type HProjectByHNatsR (ns :: [HNat]) (l :: [*]) = HUnfold (FHUProj True ns) (HList l, Proxy HZero)
type HProjectByHNatsCtx ns l = (Apply (FHUProj True ns) (HList l, Proxy HZero), HUnfold' (FHUProj True ns) (HList l, Proxy HZero))
type HProjectAwayByHNatsR (ns :: [HNat]) (l :: [*]) = HUnfold (FHUProj False ns) (HList l, Proxy HZero)
type HProjectAwayByHNatsCtx ns l = (Apply (FHUProj False ns) (HList l, Proxy HZero), HUnfold' (FHUProj False ns) (HList l, Proxy HZero))
type HSort x y = HSortBy HLeFn x y
type HMerge1 b x y min max = (HCond b (HList x) (HList y) (HList min), HCond b (HList y) (HList x) (HList max))
type Unlabeled x y = (HMapCxt HList TaggedFn (RecordValuesR y) y, RecordValues x, RecordValues y, SameLength (RecordValuesR x) (RecordValuesR y), SameLength x y, SameLabels x y, HAllTaggedLV x, HAllTaggedLV y)
type Unlabeled' x = Unlabeled x x
type HTPupdateAtLabel record l v r = (HUpdateAtLabel record l v r r, SameLength' r r)
type HFindLabel (l :: k) (ls :: [*]) (n :: HNat) = HFind l (UnLabel l (LabelsOf ls)) n
type HMemberLabel l r b = HMember l (UnLabel l (LabelsOf r)) b
type HMapTaggedFn l r = (HMapCxt HList TaggedFn l r, RecordValuesR r ~ l, RecordValues r)
type HLensCxt x r s t a b = (HasField x (r s) a, HUpdateAtLabel r x b s t, HasField x (r t) b, HUpdateAtLabel r x a t s, SameLength s t, SameLabels s t)
type TagUntag xs = TagUntagFD xs (TagR xs)
type UntagTag xs = TagUntagFD (UntagR xs) xs
type HUpdateVariantAtLabelCxt l e v v' n _e = (HFindLabel l v n, HFindLabel l v' n, HUpdateAtHNatR n (Tagged l e) v ~ v', HasField l (Variant v) (Maybe _e), HasField l (Record v') e, MkVariant l e v')
type TypeIndexedCxt s t a b = (HMapCxt HList TaggedFn b t, RecordValues s, RecordValues t, a ~ RecordValuesR s, b ~ RecordValuesR t, SameLabels s t, SameLength s t, SameLength b a, Coercible (TagR b) t, Coercible (TagR a) s, HAllTaggedLV s, HRLabelSet t, TagUntag a, TagUntag b)
type LabeledOptic (x :: k) (r :: [*] -> *) (s :: [*]) (t :: [*]) (a :: *) (b :: *) = forall ty to p f. (ty ~ LabelableTy r, LabeledOpticF ty f, LabeledOpticP ty p, LabeledOpticTo ty x to) => (a `p` f b) `to` (r s `p` f (r t))
type LabeledCxt1 s t a b = (s ~ [], t ~ [], a ~ (), b ~ ())
type LabelableTIPCxt x s t a b = (s ~ t, a ~ b, x ~ a, HLens x TIP s t a b)
type DataHListFlatCxt na g a = (HBuild' [] g, Typeable (HListFlat a), TypeablePolyK a, HFoldl (GfoldlK C) (C g) a (C (HList a)), HFoldr (GunfoldK C) (C g) (HReplicateR na ()) (C (HList a)), HLengthEq a na, HReplicate na ())
type DataRecordCxt a = (Data (HListFlat (RecordValuesR a)), TypeablePolyK a, TypeRepsList (Record a), RecordValues a, RecordLabelsStr a)
type TypeablePolyK (a :: k) = Typeable a
type HSort x y = HSortBy HLeFn x y
type TagUntag xs = TagUntagFD xs (TagR xs)
type Element = Char
type Axiom = [Element]
type Rules = Map Element Axiom
type Tuplet_T = (Integer, Integer)
type Staff_Name = (String, String)
type Staff_ID = String
type Staff_Scalar = Int
type M_Annotation = Music
type DA_F x = (Duration_A, x) -> Music
type Time_Signature_Map = [(Measure, Time_Signature)]
type Tempo_Marking_Map = [(Measure, Tempo_Marking)]
type Temporal_Map = (Time_Signature_Map, Tempo_Marking_Map)
type Measure = Integer
type Pulse = Rational
type Part_ID = Integer
type Locate_ST = (Time_Signature, Location)
type LM = (Location, Music)
type LV a = (Location, a)
type ST_r st = (st, Music)
type ST_f st = st -> Music -> ST_r st
type KeyM s a = KeyT s Identity a
type Key s = KeyT s Identity
type DBS = (BDB, BDB)
type AssocMatrix = [((Int, Int), Double)]
type Seed = Int
type ℝ = Double
type ℂ = Complex Double
type ℝ = Double
type Sq n = L n n
type Bounds = [Bound Int]
type Jacobian = Double -> Vector Double -> Matrix Double
type MS = MaybeT STM
type TableVar t a = TableVarU t a Single
type TableVars t a = TableVarU t a Multiple
type TimeStamp = Word32
type ClientCallback = MidiEvent -> IO ()
type Source = Source
type Destination = Destination
type Connection = Connection
type Beats = Double
type BPM = Double
type Cmp m a = a -> a -> m Bool
type Task m = m Result
type DepGraph m a = [Tree m a]
type Schedule m = [Task m]
type Prob = LogFloat
type CSVParser = StateT CSVResult (Exceptional String)
type Discrete prob symbol = T (Discrete prob symbol) prob
type Gaussian a = T (Gaussian a) a
type Discrete prob symbol = T (Discrete prob symbol) prob
type DiscreteTrained prob symbol = Trained (DiscreteTrained prob symbol) prob
type Gaussian a = T (Gaussian a) a
type GaussianTrained a = Trained (GaussianTrained a) a
type MollomMonad = ErrorT MollomError (StateT (Maybe SessionID) MollomState)
type MollomState = ReaderT MollomConfiguration (StateT MollomServerList IO)
type Exp = Int32
type MpSize = Int32
type Code = Int
type Array = [Bool]
type Unicode_Table = [(Int, String)]
type T2 a = (a, a)
type T3 a = (a, a, a)
type T4 a = (a, a, a, a)
type T5 a = (a, a, a, a, a)
type T6 a = (a, a, a, a, a, a)
type T7 a = (a, a, a, a, a, a, a)
type T8 a = (a, a, a, a, a, a, a, a)
type T9 a = (a, a, a, a, a, a, a, a, a)
type FSEC = Double
type MINSEC = (Int, Int)
type MINCSEC = (Int, Int, Int)
type S = [Int]
type R = (Int, S, [Int], [Int])
type V = [Int]
type T = [[Int]]
type E = (S, Int, Int)
type Code = Code
type R = Double
type Stratification t = [t]
type S_MM t = ([t], t)
type Alteration_T' = (Rational, String)
type Spelling n = n -> (Note_T, Alteration_T)
type Spelling_M i = i -> Maybe (Note_T, Alteration_T)
type RQ = Rational
type Duration_A = (Duration, [D_Annotation])
type Time_Signature = (Integer, Integer)
type Composite_Time_Signature = [Time_Signature]
type Rational_Time_Signature = [(Rational, Rational)]
type Tempo_Marking = (Duration, Rational)
type Compare_F a = a -> a -> Ordering
type Useq t a = (t, [a])
type Dseq t a = [(t, a)]
type Iseq t a = [(t, a)]
type Pseq t a = [((t, t, t), a)]
type Tseq t a = [(t, a)]
type Wseq t a = [((t, t), a)]
type Lseq t a = Tseq (t, Interpolation_T) a
type MD_Table t = (Maybe [String], [[t]])
type PitchClass = Int
type Octave = Int
type Octave_PitchClass i = (i, i)
type OctPC = (Octave, PitchClass)
type Midi_Detune = (Int, Double)
type Voice_Rng_Tbl = [(Voice, (Pitch, Pitch))]
type Part = (Voice, Int)
type Key = (Note_T, Alteration_T, Mode_T)
type Matrix a = [[a]]
type Build_f st e = st -> Maybe (e, st)
type Conforms_f e = Int -> [e] -> Bool
type Half_Seq = [Int]
type Seq = [Int]
type Rel = (Bool, Permute)
type Measure = Int
type Pulse = Int
type Tied_Right = Bool
type RQ_T = (RQ, Tied_Right)
type RQ_Div = (Rational, Integer, [Integer], Tied_Right)
type RQ1_Div = (Integer, [Integer], Tied_Right)
type Simplify_T = (Time_Signature, RQ, (RQ, RQ))
type Simplify_P = Simplify_T -> Bool
type Simplify_M = ([Time_Signature], [RQ], [(RQ, RQ)])
type Dynamic_Node = (Maybe Dynamic_Mark_T, Maybe Hairpin_T)
type Approximate_Ratio = Double
type Cents = Double
type Midi_Tuning_F = Int -> Midi_Detune
type D12_Midi_Tuning = (Tuning, Cents, Int)
type CPS_Midi_Tuning = (Tuning, Double, Int, Int)
type Table_2_Row = (Double, [Integer], Rational, Double)
type Pitch i = Either Cents (Ratio i)
type Scale i = (String, i, [Pitch i])
type Epsilon = Double
type Interval a n = a -> a -> n
type Delta n a = [n] -> Int -> a
type Psi a = a -> a -> a
type Tempo = Rational
type Time = Rational
type Voice = [Char]
type L_St = (Time, Tempo, Voice)
type L_Term a = (L_St, Term a)
type L_Bel a = [L_Term a]
type P a = GenParser Char () a
type HS_R p = (Double, p, Double, Double, Cents)
type Pitch_Detune = (Pitch, Cents)
type I = Integer
type SC_Name = String
type D n = (R, n)
type SATV i = ([D i], [D i])
type Column_Range = (Column_Ref, Column_Ref)
type Row_Ref = Int
type Row_Range = (Row_Ref, Row_Ref)
type Cell_Ref = (Column_Ref, Row_Ref)
type Cell_Range = (Cell_Ref, Cell_Ref)
type CSV_Has_Header = Bool
type CSV_Delimiter = Char
type CSV_Allow_Linebreaks = Bool
type CSV_Opt = (CSV_Has_Header, CSV_Delimiter, CSV_Allow_Linebreaks, CSV_Align_Columns)
type Table a = [[a]]
type CSV_Table a = (Maybe [String], Table a)
type P2 = (R, R)
type Grey = R
type C_Rect = (P2, P2, Grey)
type K_Rect = (Int, C_Rect)
type Seq_Plot_Opt = ((Int, Int), (R, R), (R, R))
type Sequencer_Midi n = Wseq R (n, n)
type CN = [(Bool, [Int])]
type PP = [CN]
type P = Pt R
type Text_F = Maybe (Int -> String)
type Shift_Map a = [(Pt a, [Orientation a])]
type Shift_Table a = [(Pt a, Pt a)]
type Collision_Table = [(Ln R, Bool)]
type Path_Diagram = [(Int, Int)]
type Path = [(Ca, Ls R)]
type P = (R, R)
type C = (R, R, R)
type L = (Int, Int)
type Cell = (L, C, String)
type Grid = [Cell]
type Table_Cell = ([Attr], [Content])
type Caption = [Content]
type HTML_Table = (Caption, [[Table_Cell]])
type Build_F = (Int, Int) -> Maybe Table_Cell
type HTML_Table_Set = [HTML_Table]
type Arr t = [[t]]
type NSelector r = [NKeyName r]
type NExpr = Fix NExprF
type NValue = Fix NValueF
type Key = String
type SSID = String
type MAC = String
type Interface = String
type Cell = String
type IP = String
type AP = String
type Driver = String
type Quality = Int
type Unit = (MAC, Quality)
type Name = Integer
type Subst f = [(Name, Term f)]
type OneToOne a b = (Map a b, Map b a)
type AlphaEnv = OneToOne Name Name
type OAuth2Result a = Either ByteString a
type QueryParams = [(ByteString, ByteString)]
type PostBody = [(ByteString, ByteString)]
type URI = ByteString
type DirectoryForest = Forest DirectoryTreeElement
type DirectoryTreeLoader = FilePath -> IO DirectoryForest
type DirectoryReader = FilePath -> IO [FilePath]
type IsDirectoryCheck = FilePath -> IO Bool
type FileLoader = FilePath -> IO (Maybe Text)
type FileWriter = FilePath -> Text -> IO ()
type FileTreeLoader = IO (Forest DirectoryTreeElement)
type App = ReaderT Context IO
type KeyboardBinding = ([Modifier], String)
type KeyCommandMatcher = SingleCommandMatcher KeyboardBinding
type TextCommandMatcher = SingleCommandMatcher String
type App = ReaderT Context IO
type KeyboardBinding = ([Modifier], String)
type KeyCommandMatcher = SingleCommandMatcher KeyboardBinding
type TextCommandMatcher = SingleCommandMatcher String
type NewFileNameChooser = IO (Maybe FilePath)
type NewFileEditorLauncher = FilePath -> IO ()
type Binding a = Mb (Nil :> a)
type Closed = Cl
type ODEreal = Float
type Matrix3 = Ptr ODEreal
type Quaternion = (ODEreal, ODEreal, ODEreal, ODEreal)
type World = Ptr WorldStruct
type Space = Ptr SpaceStruct
type Body = Ptr BodyStruct
type Geom = Ptr GeomStruct
type Joint = Ptr JointStruct
type JointGroup = Ptr JointGroupStruct
type Mass = ForeignPtr MassStruct
type Serial = Word32
type Angle = Float
type Format m a b = forall r. ((m -> r) -> a) -> ((m -> r) -> b)
type Build a = forall r b. ((Builder -> r) -> b) -> (Builder -> r) -> a -> b
type Wrap r m a t = ((m -> a) -> t) -> ((r -> a) -> t)
type ServerAction a = a -> Client a -> [Client a] -> IO [Client a]
type LineConverter a = String -> a
type HandlerFunction a = Handle -> IO a
type DResourceDispatcher = DNodeId -> Handle -> IO ()
type ConsoleData a = Map String (ConsoleCommand a)
type ConsoleData a = Map String (ConsoleCommand a)
type SiteMap = Map HostName (Set SiteId)
type Thread = MVar ThreadData
type StreamName = String
type StreamName = String
type IdType = Int
type PortRegistryRequestStream = Stream PortRegistryRequestMessage
type PortRegistryRequestPort = Port PortRegistryRequestMessage
type PortRegistryResponseStream = Stream PortRegistryResponseMessage
type PortRegistryResponsePort = Port PortRegistryResponseMessage
type TaskId = Integer
type JobId = Integer
type OutputMap = Map JobState (AccuMap Int FunctionData)
type ActionName = String
type ActionInfo = String
type InputReader k1 v1 = ByteString -> IO [(k1, v1)]
type OutputWriter k2 v2 = [(k2, v2)] -> IO ByteString
type OptionsDecoder a = ByteString -> a
type ActionMap = KeyMap ActionData
type MapAction a k1 v1 k2 v2 = ActionEnvironment -> a -> Int -> [(k1, v1)] -> IO [(Int, [(k2, v2)])]
type MapFunction a k1 v1 k2 v2 = ActionEnvironment -> a -> k1 -> v1 -> IO [(k2, v2)]
type MapPartition a k2 v2 = ActionEnvironment -> a -> Int -> [(k2, v2)] -> IO [(Int, [(k2, v2)])]
type ReduceAction a k2 v2 v3 = ActionEnvironment -> a -> Int -> [(k2, v2)] -> IO [(Int, [(k2, v3)])]
type ReduceMerge a k2 v2 = ActionEnvironment -> a -> [(k2, v2)] -> IO [(k2, [v2])]
type ReduceFunction a k2 v2 v3 = ActionEnvironment -> a -> k2 -> [v2] -> IO (Maybe v3)
type ReducePartition a k2 v3 = ActionEnvironment -> a -> Int -> [(k2, v3)] -> IO [(Int, [(k2, v3)])]
type SplitFunction a k1 v1 = SplitAction a k1 v1
type SplitAction a k1 v1 = ActionEnvironment -> a -> Int -> [(k1, v1)] -> IO [(Int, [(k1, v1)])]
type WorkerId = Int
type TaskResultFunction = TaskData -> IO Bool
type TaskProcessor = MVar TaskProcessorData
type State = ([ActionName], WorkerPort)
type States = Map IdType State
type StateResource = FilePath
type TaskSendFunction = TaskData -> IO (TaskSendResult)
type JobController = MVar JobControllerData
type MapFunction a k1 v1 k2 v2 = ActionEnvironment -> a -> k1 -> v1 -> IO [(k2, v2)]
type ReduceFunction a k2 v2 v3 = ActionEnvironment -> a -> k2 -> [v2] -> IO (Maybe v3)
type FuzzySet = Map String FuzzyScore
type Replacements = [Replacement]
type Replacement = ((String, String), FuzzyScore)
type FuzzyScore = Float
type URI = String
type Title = String
type Content = String
type Position = Word32
type Context = String
type Word = String
type Occurrences = DocIdMap Positions
type Positions = EnumSet Position
type RawResult = [(Word, Occurrences)]
type Sym = Char
type Key = [Sym]
type DiffList = [Diff]
type CompressedOccurrences = DocIdMap CompressedPositions
type CompressedPositions = DiffList
type Key = [Sym]
type DocMap a = DocIdMap (CompressedDoc a)
type URIMap = PrefixTree DocId
type Parts occ = Map Context (Part occ)
type Part occ = PrefixTree occ
type Inverted0 = Inverted Occ0
type InvertedCompressed = Inverted OccCompressed
type InvertedSerialized = Inverted OccSerialized
type InvertedCSerialized = Inverted OccCSerialized
type InvertedOSerialized = Inverted OccOSerialized
type DocMap a = DocIdMap (CompressedDoc a)
type Parts = Map Context Part
type Part = PrefixTree CompressedOccurrences
type DocHits a = DocIdMap (DocInfo a, DocContextHits)
type DocContextHits = Map Context DocWordHits
type DocWordHits = Map Word Positions
type WordHits = Map Word (WordInfo, WordContextHits)
type WordContextHits = Map Context WordDocHits
type WordDocHits = Occurrences
type Score = Float
type Intermediate = DocIdMap IntermediateContexts
type DocRanking a = DocId -> DocInfo a -> DocContextHits -> Score
type WordRanking = Word -> WordInfo -> WordContextHits -> Score
type URI = String
type URIWithLevel = (URI, Int)
type URIs = URIs' ()
type URIsWithLevel = URIs' Int
type URIs' a = PrefixTree a
type Robots = Map URI RobotRestriction
type RobotRestriction = [RobotSpec]
type RobotSpec = (URI, RobotAction)
type AddRobotsAction = URI -> Robots -> IO Robots
type AccumulateDocResult a r = (URI, a) -> r -> IO r
type MergeDocResults r = r -> r -> IO r
type SavePartialResults r = FilePath -> r -> IO r
type ProcessDocument a = IOSArrow XmlTree a
type CrawlerAction a r = ReaderStateIO (CrawlerConfig a r) (CrawlerState r)
type MapFold a r = (a -> IO r) -> (r -> r -> IO r) -> [a] -> IO r
type CacheCrawlerConfig = CrawlerConfig () CacheState
type CacheCrawlerState = CrawlerState CacheState
type RawDoc c = (RawContexts, RawTitle, Maybe c)
type RawContexts = [RawContext]
type RawContext = (Context, RawWords)
type RawWords = [RawWord]
type RawWord = (Word, Position)
type RawTitle = String
type IndexCrawlerConfig i d c = CrawlerConfig (RawDoc c) (IndexerState i d c)
type Inverted = Inverted0
type CompactInverted = InvertedOSerialized
type HolumbusState di = IndexerState Inverted Documents di
type HolumbusConfig di = IndexCrawlerConfig Inverted Documents di
type SmallDocuments = Documents
type Inverted = Inverted0
type CompactInverted = InvertedOSerialized
type HolumbusState di = IndexerState Inverted Documents di
type HolumbusConfig di = IndexCrawlerConfig Inverted Documents di
type FileId = String
type FileContent = ByteString
type NodeId = Int
type ClientPortMap = [(ClientPort, [FileId])]
type FileId = String
type FileContent = ByteString
type Cache k = Map (Shell k) (Map (Shell k) Bool)
type Cache = IntMap (IntMap Bool)
Binary file ./hoogle-data/hommage/0.0.5/doc/html/hommage.txt matches
type Homology = [Int]
type Complex = Vector ([Int], [Int], Bool)
type Observing a = a -> a
type Observing a = a -> a
type CanvasId = Int
type CanvasInfoMap = IntMap CanvasInfoBox
type MainCoroutine = MainObjB
type MainObjB = SObjBT MainOp (EStT HoodleState WorldObjB)
type MainObj = SObjT MainOp (EStT HoodleState WorldObjB)
type WorldObj = SObjT (WorldOp AllEvent DriverB) DriverB
type WorldObjB = SObjBT (WorldOp AllEvent DriverB) DriverB
type Driver a = Driver AllEvent IO a
type DriverB = SObjBT (DrvOp AllEvent) IO
type EventVar = MVar (Maybe (Driver ()))
type TempSelection = TempRender [RItem]
type RenderCache = HashMap UUID (Double, Surface)
type Renderer = ReaderT ((UUID, (Double, Surface)) -> IO (), TVar (Seq (UUID, PDFCommand))) IO
type RLayer = GLayer LyBuf [] RItem
type RPage = GPage RBackground ZipperSelect RLayer
type RHoodle = GHoodle IntMap RPage
type StrokeHitted = AlterList (NotHitted (BBoxed Stroke)) (Hitted (BBoxed Stroke))
type RItemHitted = AlterList (NotHitted RItem) (Hitted RItem)
type TAlterHitted a = AlterList [a] (Hitted a)
type SLayerF a = GLayer (BufOf a) TEitherAlterHitted (ItmOf a)
type HLayers = HLayersF ZipperSelect RLayer
type HLayer = SLayerF RLayer
type HPage = GPage RBackground (HLayersF ZipperSelect) RLayer
type HHoodle = GSelect (IntMap RPage) (Maybe (Int, HPage))
type Title = ByteString
type Title = ByteString
type Title = ByteString
type Title = ByteString
type Title = ByteString
type NonEmptyList a = (a, [a])
type ZipperSelect = SeqZipper
type URL = String
type Body n = LabelMap (Block n C C)
type Body' block (n :: * -> * -> *) = LabelMap (block n C C)
type Graph = Graph' Block
type FactBase f = LabelMap f
type JoinFun a = Label -> OldFact a -> NewFact a -> (ChangeFlag, a)
type Body n = LabelMap (Block n C C)
type Body' block (n :: * -> * -> *) = LabelMap (block n C C)
type Graph = Graph' Block
type JoinFun a = Label -> OldFact a -> NewFact a -> (ChangeFlag, a)
type FactBase f = LabelMap f
type WithTop a = Pointed C O a
type WithBot a = Pointed O C a
type WithTopAndBot a = Pointed C C a
type Fuel = Int
type SimpleFuelMonad = CheckingFuelMonad SimpleUniqueMonad
type Unique = Int
type TraceFn = forall a. String -> a -> a
type Doms = WithBot DPath
type Doms = WithBot [Label]
type AutoSize = Bool
type PImage = Ptr IplImage
type PCapture = Ptr CvCapture
type FPImage = ForeignPtr IplImage
type FPCapture = ForeignPtr CvCapture
type TimeStamp = Word32
type Exportability = Bool
type TrustLevel = Word8
type TrustAmount = Word8
type AlmostPublicDomainRegex = ByteString
type Revocability = Bool
type RevocationReason = ByteString
type KeyServer = ByteString
type URL = ByteString
type NotationName = ByteString
type NotationValue = ByteString
type SignatureHash = ByteString
type PacketVersion = Word8
type Salt = ByteString
type Count = Int
type V3Expiration = Word16
type CompressedDataPayload = ByteString
type FileName = ByteString
type ImageData = ByteString
type NestedFlag = Bool
type IV = ByteString
type Keyring = IxSet TK
type Digest a = StateT DigestState IO a
type Context = Ptr OpaqueContext
type MDEngine = Ptr OpaqueMDEngine
type LatitudeNorth = Double
type LongitudeWest = Double
type Time = Double
type Datum_Type = Char
type ASCII = ByteString
type Address_Pattern = String
type FP_Precision = Maybe Int
type NTPi = Word64
type UT = Double
type Coder = (Packet -> ByteString, ByteString -> Packet)
type Connection t a = ReaderT t IO a
type Value = Value
type Number = Either Integer Double
type HostName = String
type CostCentreId = Int
type CostCentreName = ByteString
type Time = Double
type Cost = Int64
type ProfileSample = [(CostCentreId, Cost)]
type ProfileSink = SinkInput -> IO ()
type LoadProgress = IO (Either Double Profile)
type ProfilingStop = IO ()
type ProfileReader = IO Profile
type ProfilingCommand = ProfilingType CreateProcess String
type ProfilingInfo = ProfilingType ProcessHandle Handle
type GhcOption = String
type CodeWriter o s a = RWS o String s a
type Parser s a = ParsecT String s IO a
type Identifier = String
type Def = (Identifier, Statement)
type Reader = SourceName -> String -> IO AST
type Parser a = ParsecT String PacoState IO a
type Writer = AST -> String
type MixEntry = (HpcPos, BoxLabel)
type MixEntryDom a = Tree (HpcPos, a)
type CoverageEntry = ([MixEntry], [Integer], [String])
type Lix = [Hit]
type List a = Vector a
type String = ByteString
type String = ByteString
type Element = ByteString
type AtomOctree = Octree Atom
type Element = ByteString
type Point = Complex PDFFloat
type UnscaledUnit = PDFFloat
type BoxDimension = (PDFFloat, PDFFloat, PDFFloat)
type PDFFloat = Double
type Widget a = View Perch IO a
type Expr a = Map String a -> a
type ParamAllocator = forall r. (Ptr PGparam -> IO r) -> IO r
type ReMap = Map (FIName Utf8) ProtoName
type ReMap = Map (FIName Utf8) ProtoName
type LineWidth = Double
type Glyph = Char
type Apptoken = Text
type Receipt = Text
type Index = (Int, Int)
type FormatterAlias = String
type LexerAlias = String
type Option = (String, String)
type Options = [Option]
type Date = Day
type Leg = [CashFlow]
type TimeSeries m = Map LocalTime m
type IntervalPriceSeries = TimeSeries IntervalPrice
type Volatility = Double
type RValue = Ptr CULong
type RID = CULong
type Registered0 = IO RValue
type Registered1 = RValue -> IO RValue
type Registered2 = RValue -> RValue -> IO RValue
type RegisteredCB3 = RValue -> RValue -> RValue -> IO Int
type RValue = Ptr CULong
type RubyFunction1 = RValue -> IO RValue
type RubyFunction2 = RValue -> RValue -> IO RValue
type RubyFunction3 = RValue -> RValue -> RValue -> IO RValue
type RubyFunction4 = RValue -> RValue -> RValue -> RValue -> IO RValue
type RubyFunction5 = RValue -> RValue -> RValue -> RValue -> RValue -> IO RValue
type RValue = Ptr CULong
type RID = CULong
type RubyFunction1 = RValue -> IO RValue
type RubyFunction2 = RValue -> RValue -> IO RValue
type RubyFunction3 = RValue -> RValue -> RValue -> IO RValue
type RubyFunction4 = RValue -> RValue -> RValue -> RValue -> IO RValue
type RubyFunction5 = RValue -> RValue -> RValue -> RValue -> RValue -> IO RValue
type MonteCarlo g = State g
type CDBMake = StateT CDBMakeState IO ()
type Act t = t -> IO ()
type ChartM a = State Chart a
type BarChartWidthSpacing = (Maybe BarWidth, Maybe BarGroupSpacing)
type Color = String
type DataScale = (Float, Float)
type ChartFills = [Fill]
type Offset = Float
type Width = Float
type Angle = Float
type ChartLineStyles = [LineStyle]
type ChartMarkers = [AnyChartMarker]
type ChartAxes = [Axis]
type AxisLabel = String
type AxisPosition = Float
type FontSize = Int
type OneToManyPair = (String, [Integer])
type Alignment = ([String], [String], [Align])
type OneToManyPair = (String, [Integer])
type Binding = String
type Code = String
type Inspection = Binding -> Code -> Bool
type GlobalInspection = Code -> Bool
type Section = Map String String
type META = [Section]
type FieldSignature = FieldType
type ArgumentSignature = FieldType
type Pool stage = Map Word16 (Constant stage)
type ClassPath a = StateT [Tree CPEntry] IO a
type CBool = CUChar
type ToID a = Ptr CChar -> CInt -> IO a
type FromID a = a -> Ptr (Ptr CChar) -> IO CInt
type CommandURIPtr = Ptr CommandURI
type ContainerIDPtr = Ptr ContainerID
type CredentialPtr = Ptr Credential
type EnvironmentVariablePtr = Ptr EnvironmentVariable
type EnvironmentPtr = Ptr Environment
type ExecutorIDPtr = Ptr ExecutorID
type FiltersPtr = Ptr Filters
type FrameworkIDPtr = Ptr FrameworkID
type FrameworkInfoPtr = Ptr FrameworkInfo
type MasterInfoPtr = Ptr MasterInfo
type OfferIDPtr = Ptr OfferID
type ParameterPtr = Ptr Parameter
type ParametersPtr = Ptr Parameters
type SlaveIDPtr = Ptr SlaveID
type StdStringPtr = Ptr StdString
type CommandInfoPtr = Ptr CommandInfo
type TaskIDPtr = Ptr TaskID
type TaskStatusPtr = Ptr TaskStatus
type ValuePtr = Ptr Value
type ValueRangePtr = Ptr ValueRange
type AttributePtr = Ptr Attribute
type ResourcePtr = Ptr Resource
type OfferPtr = Ptr Offer
type RequestPtr = Ptr Request
type SlaveInfoPtr = Ptr SlaveInfo
type VolumePtr = Ptr Volume
type ContainerInfoPtr = Ptr ContainerInfo
type ExecutorInfoPtr = Ptr ExecutorInfo
type HealthCheckPtr = Ptr HealthCheck
type TaskInfoPtr = Ptr TaskInfo
type ExecutorPtr = Ptr Executor
type ExecutorDriverPtr = Ptr ExecutorDriver
type RawExecutorRegistered = ExecutorDriverPtr -> ExecutorInfoPtr -> FrameworkInfoPtr -> SlaveInfoPtr -> IO ()
type RawExecutorReRegistered = ExecutorDriverPtr -> SlaveInfoPtr -> IO ()
type RawExecutorDisconnected = ExecutorDriverPtr -> IO ()
type RawExecutorLaunchTask = ExecutorDriverPtr -> TaskInfoPtr -> IO ()
type RawExecutorTaskKilled = ExecutorDriverPtr -> TaskIDPtr -> IO ()
type RawExecutorFrameworkMessage = ExecutorDriverPtr -> Ptr CChar -> CInt -> IO ()
type RawExecutorShutdown = ExecutorDriverPtr -> IO ()
type RawExecutorError = ExecutorDriverPtr -> Ptr CChar -> CInt -> IO ()
type SchedulerPtr = Ptr Scheduler
type SchedulerDriverPtr = Ptr SchedulerDriver
type RawSchedulerRegistered = SchedulerDriverPtr -> FrameworkIDPtr -> MasterInfoPtr -> IO ()
type RawSchedulerReRegistered = SchedulerDriverPtr -> MasterInfoPtr -> IO ()
type RawSchedulerDisconnected = SchedulerDriverPtr -> IO ()
type RawSchedulerResourceOffers = SchedulerDriverPtr -> Ptr OfferPtr -> CInt -> IO ()
type RawSchedulerOfferRescinded = SchedulerDriverPtr -> OfferIDPtr -> IO ()
type RawSchedulerStatusUpdate = SchedulerDriverPtr -> TaskStatusPtr -> IO ()
type RawSchedulerFrameworkMessage = SchedulerDriverPtr -> ExecutorIDPtr -> SlaveIDPtr -> Ptr CChar -> Int -> IO ()
type RawSchedulerSlaveLost = SchedulerDriverPtr -> SlaveIDPtr -> IO ()
type RawSchedulerExecutorLost = SchedulerDriverPtr -> ExecutorIDPtr -> SlaveIDPtr -> CInt -> IO ()
type RawSchedulerError = SchedulerDriverPtr -> Ptr CChar -> CInt -> IO ()
type PerformanceStatisticsPtr = Ptr PerformanceStatistics
type ResourceStatisticsPtr = Ptr ResourceStatistics
type ResourceUsagePtr = Ptr ResourceUsage
type View = Array Pos Cell
type PHPSessionVariableList = [(ByteString, PHPSessionValue)]
type PHPSessionVariableList = [(ByteString, PHPSessionValue)]
type PkgTemplate = Template
type PkgVariable = (Text, PkgTemplate)
type PkgName = Text
type PkgDescription = Text
type PkgUrl = Text
type PkgVersion = PkgTemplate
type PkgDescription = Text
type PkgName = Text
type PkgUrl = Text
type PkgVariable = (Text, PkgTemplate)
type PkgVersion = PkgTemplate
type PkgTemplate = Template
type URLString = String
type ColorString = String
type DateString = String
type UserId = String
type URLString = String
type UserName = String
type StatusId = String
type CommonName = String
type FunctionName = String
type MaybePtr a = Ptr (Maybe a)
type EitherPtr a b = Ptr (Either a b)
type Defs = [(String, String)]
type Name = String
type ModuleName = String
type Import = String
type ExportName = String
type Type = Type
type TypeName = String
type TypeNames = [TypeName]
type NamedTypes = [(Name, Type)]
type AnnNamedTypes = [AnnType]
type Types = [Type]
type Tuple2Ptr a b = Ptr (Tuple2 a b)
type Tuple3Ptr a b c = Ptr (Tuple3 a b c)
type Tuple4Ptr a b c d = Ptr (Tuple4 a b c d)
type Tuple5Ptr a b c d e = Ptr (Tuple5 a b c d e)
type Tuple6Ptr a b c d e f = Ptr (Tuple6 a b c d e f)
type Tuple7Ptr a b c d e f g = Ptr (Tuple7 a b c d e f g)
type Tuple8Ptr a b c d e f g h = Ptr (Tuple8 a b c d e f g h)
type Tuple2Ptr a b = Ptr (Tuple2 a b)
type Tuple3Ptr a b c = Ptr (Tuple3 a b c)
type Tuple4Ptr a b c d = Ptr (Tuple4 a b c d)
type Tuple5Ptr a b c d e = Ptr (Tuple5 a b c d e)
type Tuple6Ptr a b c d e f = Ptr (Tuple6 a b c d e f)
type Tuple7Ptr a b c d e f g = Ptr (Tuple7 a b c d e f g)
type Tuple8Ptr a b c d e f g h = Ptr (Tuple8 a b c d e f g h)
type AWSResult a = Either ReqError a
type IsTruncated = Bool
type Doubles = UArray Int Double
type CostFunction = Ptr Double -> Ptr Int -> IO Double
type SassMapEntry = (SassValue, SassValue)
type SassFunctionType = SassValue -> IO SassValue
type SassImporterType = String -> IO [SassImport]
type StringResult = IO (Either SassError String)
type ExtendedResult = IO (Either SassError (SassExtendedResult String))
type ExtendedResultBS = IO (Either SassError (SassExtendedResult ByteString))
type RunFlags = [String]
type CompileFlags = [String]
type BuildID = String
type BenchM a = ReaderT Config IO a
type Tag = String
type EnvVars = [(String, String)]
type PreppedTuple = [(String, String)]
type Schema = [String]
type Interpolation_F t = t -> t -> t -> t
type LPCFrame = [Float]
type ATSFrame = [Double]
type Name = ASCII
type Control = (Name, Int)
type Sample = Double
type Output = Int
type Rate = Int
type Special = Int
type UGen = (Name, Rate, [Input], [Output], Special)
type SC3_Command = String
type Query_Ctl = (Either String Int, Either Double Int)
type NRT_Render_Plain = (FilePath, FilePath, Int, Int, SampleFormat)
type T2 a = (a, a)
type T3 a = (a, a, a)
type T4 a = (a, a, a, a)
type Sample = Double
type C_Meta' n = (n, n, String, n, String)
type Output = Rate
type Envelope_Curve2 a = T2 (Envelope_Curve a)
type Envelope_Curve3 a = T3 (Envelope_Curve a)
type Envelope_Curve4 a = T4 (Envelope_Curve a)
type EnvCurve = Envelope_Curve UGen
type Envelope_Segment t = (t, t, t, t, Envelope_Curve t)
type Fn1 a b = a -> b
type Fn2 a b c = a -> b -> c
type Fn3 a b c d = a -> b -> c -> d
type Fn4 a b c d e = a -> b -> c -> d -> e
type NodeId = Int
type PortIndex = Int
type Edge = (FromPort, ToPort)
type UGenParts = (Rate, String, [FromPort], [Output], Special, UGenId)
type Map = IntMap Int
type Maps = (Map, [Node], Map, Map, [(KType, Int)])
type KS_COUNT = (Int, Int, Int, Int)
type Param = [(String, Double)]
type SMPLR_OPT = ((Int, Int), String, Int, Int, (Double, Double), Int, Int, Param)
type SF_LD = (Int -> Bool, Header, FilePath)
type Amplitude = Double
type Index = Int
type NC = Int
type Chord = [Note]
type Sample_Loader = [Index] -> [Message]
type PP = Tseq Time Chord
type CT_SF = (FilePath, Index, Amplitude)
type CT_Node_SF = CT_Node -> [CT_SF]
type Parameters = [Position]
type Render_F st = Shell st -> st -> Render st
type Interact_F st = UDP -> Shell st -> st -> IO st
type Bracket_F st = (Interact_F st, Interact_F st)
type SC3_F st = Interact_F st
type Key_F st = Char -> st -> st
type Trace t a = [(t, a)]
type Window t = (t, t)
type Lerp_F t a b = t -> a -> a -> b
type Time = R
type Code = String
type Annotation = String
type U_Output = Either Int Int
type Attr = (String, String)
type Window x = x -> x
type Table x = [x]
type Fdata n = (Voice, Vowel, [n], [n], [n])
type Phoneme_str = (Phoneme, Maybe Stress)
type SYLLABLE = [Phoneme_str]
type ARPABET = [Phoneme_str]
type ARPABET_syl = [SYLLABLE]
type CMU_Dict_ty a = Map String a
type CMU_Dict = CMU_Dict_ty ARPABET
type CMU_Dict_syl = CMU_Dict_ty ARPABET_syl
type Env_ST n = (n, n)
type Loc_GB = (Int, UGen)
type OverlapTexture = (Double, Double, Double, Int)
type XFadeTexture = (Double, Double, Int)
type Spawn_Texture = (Int -> Double, Int)
type PP_Bus = Either UGen (UGen, UGen)
type PPF = UGen -> UGen
type USTF st = st -> (UGen, st)
type MSTF st m = st -> m (Maybe st)
type Node_Id = Int
type Midi_Init_f st = UDP -> IO st
type Midi_Recv_f st = UDP -> st -> Midi_Message Int -> IO st
type Midi_7bit = Int
type Midi_Note = Midi_7bit
type Midi_Velocity = Midi_7bit
type Midi_Program = Midi_7bit
type Midi_CC_Ix = Midi_7bit
type Midi_CC_Value = Midi_7bit
type Midi_Key_Map = Map Midi_Note Midi_Velocity
type Midi_CC_Map = Map Midi_CC_Ix Midi_CC_Value
type Midi_State = MVar (Midi_Key_Map, Midi_Program, Midi_CC_Map)
type Warp t = W_Direction -> t -> t
type T616 a b c = (a, a, a, a, a, a, b, c, c, c, c, c, c)
type OptPitch = T616 (Maybe Double) (Maybe [Double]) (Maybe Double)
type T8 n = (n, n, n, n, n, n, n, n)
type OptDur = T8 (Maybe Double)
type UOp n = n -> n
type BinOp n = n -> n -> n
type BinAt n a = n -> n -> a
type TriAt n a = n -> n -> n -> a
type Param = [(String, [Double])]
type Event = Map Key Field
type T2 n = (n, n)
type T3 n = (n, n, n)
type P_Bind = (Key, P Field)
type Attr = (Int, Int) -> String
type Table t = [t]
type P2 t = (t, t)
type Coord t = [P2 t]
type P3 t = (t, t, t)
type Path t = [P3 t]
type Vc t = [(P2 t, P2 t)]
type PlotSize = (Double, Double)
type PlotParam = ([String], String, Attr)
type Parser r = String -> ParseResult r
type RW t m a = t -> m a
type RW_st t a = t -> State Int a
type Tr = String -> String
type Tr_m m = String -> m String
type RW_Opt = (PPLayout, Int)
type Param = (String, Double)
type PSynth = (String, [Param])
type P a = ParsecT String () Identity a
type Name_Supply = [Char]
type Binding = (String, String)
type Name_Supply = [String]
type HP_Char = (Char, Maybe Int)
type HP_String = [HP_Char]
type ST = (Int, [Int])
type HP = Parser ST Char
type Binding = (String, String)
type Name_Supply = [String]
type FrameCount = Int
type SampleRate = Int
type ChannelCount = Int
type Port = Int
type Hostname = String
type Username = String
type Password = String
type ClusterName = String
type Keyspace = String
type Partitioner = String
type Snitch = String
type ColumnFamily = String
type ColumnName = ByteString
type ColumnValue = ByteString
type ThriftApiVersion = String
type SchemaId = String
type Cassandra a = CassandraT a
type CassandraT a = StateT CassandraConfig IO a
type Cassandra a = CassandraT a
type CassandraT a = StateT CassandraConfig IO a
type Cuid = Text
type Slug = Text
type Window = Ptr WindowTag
type ChType = Word64
type NBool = Word8
type Pos = (Int, Int)
type Offset = (Int, Int)
type Size = (Int, Int)
type KeyHandler a = Pos -> Size -> a -> IO (Cont a)
type Row = [TableCell]
type FormatArgs = [(Maybe String, String)]
type CmdAction a = ErrorT String Maybe a
type Size = Point
type Contents a = [a]
type Response = Either Notification Result
type InspectedModule = Inspected ModuleLocation Module
type ResolvedTree = Map ModuleId ResolvedModule
type Result = Either String String
type ToolM a = ErrorT String IO a
type ReadM a = StateT String [] a
type WorkerMap = MVar (Map FilePath (Worker (GhcModT IO)))
type CompileFlag = String
type ModuleToScan = (ModuleLocation, [CompileFlag])
type ProjectToScan = (Project, [ModuleToScan])
type SandboxToScan = Cabal
type CorrectorMatch = FilePath -> Point -> String -> Maybe Correction
type CommandAction = CommandOptions -> IO Result
type CommandM a = ErrorT CommandError IO a
type CommandActionT a = CommandOptions -> CommandM a
type Type = Int
type Location = String
type UnitLoc = (Unit, Location)
type UnitMoveTry = (UnitMove, Bool)
type Ownership = (Maybe Power, [Location])
type PowerPos = (Power, [UnitLoc])
type PowerMove = (Power, [UnitMoveTry])
type Year = Int
type Time = (Year, Season, TurnType)
type AdnsState = Ptr OpaqueState
type Query = Ptr OpaqueQuery
type Resolver = String -> RRType -> [QueryFlag] -> IO (MVar Answer)
type HostName = String
type HostAddress = Word32
type Resolver = String -> RRType -> [QueryFlag] -> IO (MVar Answer)
type Pattern = ByteString
type OutputPat = Bool
type Replacement = ByteString
type Invert = Bool
type Text = ByteString
type Label = ByteString
type SedParser = GenParser Char ParserState
type Stream = String
type SedState = StateT Env IO
type SedEngine a = GotoT a (StateT Env IO) a
type SedScript = String
type SmtpdFSM = State SessionState Event
type SmtpParser st = CharParser st SmtpCmd
type Message = GenericMessage String
type HGetable els e = HGet els e (Index e els)
type GEPMonad a = Rand a
type Symbol = Char
type Sequence = [Char]
type Gene = Sequence
type Chromosome = Sequence
type SymTable a = [(Symbol, a)]
type ExpressionFunction a = Chromosome -> Genome -> a
type FitnessFunction a b = a -> TestCase b -> Double -> Double -> Double
type TestCase a = SymTable a
type TestDict a = [TestCase a]
type TestOuts = [Double]
type OID = String
type GnuTLSMonad a = Either GnuTLSError a
type Attr o a = ReadWriteAttr o a a
type ReadAttr o a = ReadWriteAttr o a ()
type WriteAttr o b = ReadWriteAttr o () b
type Transport = Ptr () -> Int -> Ptr CInt -> IO Int
type OID = String
type GnuTLSMonad a = Either GnuTLSError a
type Attr o a = ReadWriteAttr o a a
type ReadAttr o a = ReadWriteAttr o a ()
type WriteAttr o b = ReadWriteAttr o () b
type Transport = Ptr () -> Int -> Ptr CInt -> IO Int
type Bounds = [(Double, Double)]
type Input = [Double]
type Inputs = [Input]
type Coordinates = (Int, Int)
type Direction = Int
type Directions = [Int]
type Neighbours = [TVar Node]
type Neighbourhood = [(Int, Node)]
type Nodes = [Node]
type Lattice = Map Coordinates (TVar Node)
type Phases = [Phase]
type Input = [Double]
type Inputs = [Input]
type Bounds = [(Double, Double)]
type Coordinates = (Int, Int)
type Nodes = [Node]
type Neighbours = [TVar Node]
type Neighbourhood = [(Int, Node)]
type Lattice = Map Coordinates (TVar Node)
type Phases = [Phase]
type Clustering = Map Coordinates Cluster
type Environment = Maybe [(String, String)]
type InvokeResult = (String, IO ExitCode)
type Doc = Ptr HPDF_Doc
type Page = Ptr HPDF_Page
type FontDef = Ptr HPDF_FontDef
type BOOL = CInt
type FontName = String
type X = CFloat
type Y = CFloat
type Size = CFloat
type HPDF_Error_Handler = CULong -> CULong -> Ptr () -> IO ()
type DomainName = String
type MaxNumberOfDomains = Int
type SelectExpression = String
type ItemName = String
type AttributeKey = String
type AttributeValue = String
type Config = Map SectionName Section
type SectionName = String
type Section = Map OptionName OptionValue
type OptionName = String
type OptionValue = String
type IniParseResult = Either IniReaderError
type LogRecord = (Priority, String)
type LogFormatter a = a -> LogRecord -> String -> IO String
type LuaAlloc = Ptr () -> Ptr () -> CSize -> CSize -> IO (Ptr ())
type LuaReader = Ptr () -> Ptr () -> Ptr CSize -> IO (Ptr CChar)
type LuaWriter = LuaState -> Ptr CChar -> CSize -> Ptr () -> IO CInt
type LuaCFunction = LuaState -> IO CInt
type LuaInteger = Int64
type LuaNumber = Double
type LuaCFunction = LuaState -> IO CInt
type LuaInteger = Int64
type LuaNumber = Double
type PixelPacketByte = PixelPacket Word8
type ExportPixelAreaOptions = Word32
type ExportPixelAreaInfo = Word32
type ImportPixelAreaOptions = Word32
type ImportPixelAreaInfo = Word32
type ImagePtr = Ptr Image
type Image = Word32
type CompressionType = Word32
type InterlaceType = Word32
type EndianType = Word32
type ResolutionType = Word32
type ColorspaceType = Word32
type ImageType = Word32
type StreamHandler = Word32
type PreviewType = Word32
type ClassType = Word32
type ChromaticityInfo = Word32
type OrientationType = Word32
type RenderingIntent = Word32
type GravityType = Word32
type DisposeType = Word32
type ErrorInfo = Word32
type TimerInfo = Word32
type CacheInfoPtr = Word32
type ImageAttributePtr = Word32
type Ascii85InfoPtr = Word32
type BlobInfoPtr = Word32
type SemaphoreInfoPtr = Word32
type ExceptionType = CUInt
type PrintDirective = Text
type ParamMap = HashMap Text TemplateParam
type ConfMap = Map String String
type GetInfoResponse = [InfoResponse]
type GetAssertionsResponse = [Term]
type GetProofResponse = Sexpr
type GetUnsatCoreResponse = [String]
type GetValueResponse = [ValuationPair]
type GetAssignmentResponse = [TValuationPair]
type GetOptionResponse = AttrValue
type Process = (Maybe Handle, Maybe Handle, Maybe Handle, ProcessHandle)
type CmdPath = String
type Args = [String]
type Arrays = Map String (Map String Integer)
type Count = Int
type Index = Int
type Point = (Double, Double, Double)
type Seed = Int
type MsgId = ByteString
type Topic = Text
type Channel = Text
type LogName = String
type MsgId = ByteString
type Topic = Text
type Channel = Text
type MayIO = ErrorT String IO
type Bufi = (Ptr Word8, Int)
type Data = UArray Int Word8
type MayIO = ErrorT String IO
type RClass = Word16
type RType = Word16
type Name = UArray Int Word8
type MayIOSt s = StateT s MayIO
type WState = ((), Bufi, Ptr Word8)
type PSt = StateT (Ptr Word8) IO
type RSAGenKeyCallback = Int -> Int -> IO ()
type PemPasswordCallback = Int -> PemPasswordRWState -> IO String
type SampleRate = Integer
type BitDepth = Integer
type SoundData = Double
type SoundFrame = [SoundData]
type FrameCount = Integer
type AudioMonad m = ErrorT AudioError m
type Namespace = Maybe Text
type NSName = (Namespace, Text)
type Attributes = [Attribute]
type Children = [XML]
type Name a = (Maybe a, a)
type GenXML m = XMLGenT m (XMLType m)
type GenXMLList m = XMLGenT m [XMLType m]
type GenChild m = XMLGenT m (ChildType m)
type GenChildList m = XMLGenT m [ChildType m]
type GenAttribute m = XMLGenT m (AttributeType m)
type GenAttributeList m = XMLGenT m [AttributeType m]
type Query a = State QueryData a
type EndPoint = String
type PIR = [Decl]
type LabelName = String
type SubName = String
type VarName = String
type PrimName = String
type PkgName = String
type CallConv = String
type N_Time = Double
type N_Data = Double
type STR = ByteString
type N_Reduction_F = (Node, Node, Node) -> Bool
type Spec = SpecWith ()
type Spec = SpecWith ()
type SpecWith a = SpecM a ()
type ActionWith a = a -> IO ()
type Path = ([String], String)
type Spec = SpecWith ()
type SpecWith a = SpecM a ()
type ActionWith a = a -> IO ()
type Progress = (Int, Int)
type ProgressCallback = Progress -> IO ()
type SpecTree a = Tree (ActionWith a) (Item a)
type Path = ([String], String)
type Expectation = Assertion
type Selector a = a -> Bool
type Spec = SpecWith ()
type Spec = SpecWith ()
type SpecWith a = SpecM a ()
type ActionWith a = a -> IO ()
type Spec = SpecWith ()
type ServerName = String
type ServerExample dat = ReaderT dat IO
type Patterns = [String]
type Arg = [String]
type Input = String
type TestType = String
type ServerStatus = Set ServerStatus'
type CommandStatus = Set CommandStatus'
type NetworkStatus = Set NetworkStatus'
type SnapHspecM b = StateT (SnapHspecState b) IO
type TestName = String
type Test = SpecTree
type WaiExpectation = WaiSession ()
type WaiExpectation = WaiSession ()
type Spec = SpecWith ()
type SpecWith a = SpecM a ()
type SV = Ptr ()
type SessionId = Int
type Key = String
type Value = String
type Expires = Maybe CalendarTime
type SessionData = (Expires, [SessionItem])
type SessionItem = (Key, (Value, Expires))
type PrivateGroup = Group
type AuthMethod = (AuthName, Handle -> IO Bool)
type SQL = String
type TableId = String
type ColId = String
type Nullability = Bool
type ColDef = (ColId, SqlType, Nullability)
type FieldReader t = ColDef -> CString -> Int -> IO t
type FieldReading = forall t. Int -> ColDef -> FieldReader t -> IO t
type ColDef = (ColId, SqlType, Nullability)
type SQL = String
type MYSQL = Ptr ()
type MYSQL_RES = Ptr ()
type MYSQL_FIELD = Ptr ()
type MYSQL_ROW = Ptr CString
type MYSQL_LENGTHS = Ptr CULong
type SQLHANDLE = Ptr ()
type HENV = SQLHANDLE
type HDBC = SQLHANDLE
type HSTMT = SQLHANDLE
type HENVRef = ForeignPtr ()
type SQLSMALLINT = Int16
type SQLUSMALLINT = Word16
type SQLINTEGER = Int32
type SQLUINTEGER = Word32
type SQLRETURN = SQLSMALLINT
type SQLLEN = SQLINTEGER
type SQLULEN = SQLINTEGER
type ConnStatusType = Word32
type ExecStatusType = Word32
type Oid = Word32
type PGconn = Ptr ()
type PGresult = Ptr ()
type SQLite3 = Ptr ()
type Argtester = String -> Maybe (ArgumentDescription -> String)
type Db a = (DbError e, MonadError e m, MonadDb m) => m a
type Nil = Stack ()
type :. a b = Stack (a, b)
type CompositeDef = (String, CompositeFlavour, Type, Type)
type FunctionPrototype = (String, [Type], Type, Bool)
type DomainDefinition = (Type, Type)
type SourcePosition = (String, Int, Int)
type ParameterizedStatementType = ([Type], [(String, Type)])
type StatementList = [Statement]
type WithQueryList = [WithQuery]
type ScalarExprListStatementListPairList = [ScalarExprListStatementListPair]
type ScalarExprListStatementListPair = (ScalarExprList, StatementList)
type ScalarExprList = [ScalarExpr]
type MaybeSelectList = Maybe SelectList
type ParamDefList = [ParamDef]
type AttributeDefList = [AttributeDef]
type ConstraintList = [Constraint]
type TypeAttributeDefList = [TypeAttributeDef]
type TypeNameList = [TypeName]
type NameTypeNameListPair = (Name, TypeNameList)
type NameTypeNameListPairList = [NameTypeNameListPair]
type ScalarExprStatementListPairList = [ScalarExprStatementListPair]
type CaseScalarExprListScalarExprPairList = [CaseScalarExprListScalarExprPair]
type MaybeScalarExpr = Maybe ScalarExpr
type MaybeBoolExpr = Maybe ScalarExpr
type TableRefList = [TableRef]
type ScalarExprListList = [ScalarExprList]
type SelectItemList = [SelectItem]
type OnExpr = Maybe JoinExpr
type RowConstraintList = [RowConstraint]
type VarDefList = [VarDef]
type ScalarExprStatementListPair = (ScalarExpr, StatementList)
type CaseScalarExprListScalarExprPair = (ScalarExprList, ScalarExpr)
type ScalarExprDirectionPair = (ScalarExpr, Direction)
type ScalarExprDirectionPairList = [ScalarExprDirectionPair]
type AlterTableActionList = [AlterTableAction]
type SetClauseList = [SetClause]
type SYMID = CULong
type Sample a = Vector a
type Samples a = Array Int (Vector a)
type SMap a = Map String (SElem a)
type STGroup a = String -> (StFirst (StringTemplate a))
type STGroup a = String -> (StFirst (StringTemplate a))
type STDirGroups a = Map FilePath (STGroup a)
type InstanceName = Text
type Vector = IntMap Double
type Problem = [(Double, Vector)]
type Name = (Maybe String, String)
type GenXML m = XMLGenT m (XMLType m)
type GenXMLList m = XMLGenT m [XMLType m]
type GenChild m = XMLGenT m (ChildType m)
type GenChildList m = XMLGenT m [ChildType m]
type GenAttribute m = XMLGenT m (AttributeType m)
type GenAttributeList m = XMLGenT m [AttributeType m]
type JMacroM = JMacroT Identity
type DOMNode = HSPT XML Identity XML
type CInput c = Input c String
type SInput s = Input Checked s
type OptGroup s o = (s, [o])
type DomId_t = Word16
type XCErrorHandler = FunPtr (XCError -> IO ())
type EventChanPortOrError = CInt
type Dumpcore_rtn_t = Ptr Word8 -> CString -> CUInt -> IO CInt
type XCperfcVal = Word32
type XenPFN = CULong
type PerfcOp = Word32
type MemoryProtectionFlags = CInt
type XenDomainHandleT = Ptr Word8
type DumpcoreCallback = ByteString -> IO Int
type Name = String
type Array t = NArray None t
type Tensor t = NArray Variant t
type ThreadPoolEntry m a b = (m a, a -> IO b, Either SomeException b -> m StopFlag)
type Assertion = IO ()
type Milliseconds = Int
type TestID = String
type FlatTest = GenFlatTest (WithTestOptions Assertion)
type TestFilter = FlatTest -> Bool
type TR = RWST TestConfig () TestState IO
type ReportAllTests = [FlatTest] -> TR ()
type ReportGlobalStart = [FlatTest] -> TR ()
type ReportTestStart = FlatTest -> TR ()
type ReportTestResult = FlatTestResult -> TR ()
type ReportGlobalResults = ReportGlobalResultsArg -> TR ()
type CallStack = [(Maybe String, Location)]
type FlatTestResult = GenFlatTest RunResult
type Milliseconds = Int
type Diff = Maybe FilePath -> String -> IO (Maybe String)
type Properties = [(String, String)]
type URL = String
type Decoder a = Text -> Either String a
type Element_C = [Attr] -> [Content] -> Content
type Empty_Element_C = [Attr] -> Content
type DocType = String
type Menu_Entry = (String, String, Maybe String)
type Menu_P = [Content] -> [Content]
type Menu_C = Menu_P -> String -> [Menu_Entry] -> String -> Content
type OpeningTag = (Identifier, [Attribute], Bool)
type Identifier = CI Text
type Attribute = (Identifier, Maybe Text)
type Table = HashMap Text Node
type ELEM = [Attr] -> [Content] -> Content
type EMPTY_ELEM = [Attr] -> Content
type PCDATA_ELEM = [Attr] -> String -> Content
type NUMERICAL_ELEM = (Num n, Show n) => [Attr] -> n -> Content
type ATTR = String -> Attr
type DocType = String
type Font_Family_T = String
type Font_Size_T = Int
type Tuplet_T = (Integer, Duration, Integer, Duration)
type Name = (String, String)
type ID = Integer
type SI_Map a = [(Integer, a)]
type Time_Signature_Map = SI_Map Time_Signature
type Tempo_Marking_Map = SI_Map Tempo_Marking
type Temporal_Map = (Integer, Time_Signature_Map, Tempo_Marking_Map)
type Result a = Either ConnError a
type HeaderSetter a = HeaderName -> String -> a -> a
type Request_String = Request String
type Response_String = Response String
type HTTPRequest a = Request a
type HTTPResponse a = Response a
type ResponseData = (ResponseCode, String, [Header])
type ResponseCode = (Int, Int, Int)
type RequestData = (RequestMethod, URI, [Header])
type RequestNormalizer ty = NormalizeRequestOptions ty -> Request ty -> Request ty
type RequestID = Int
type FormVar = (String, String)
type BodyReader = IO ByteString
type Popper = IO ByteString
type NeedsPopper a = Popper -> IO a
type GivesPopper a = NeedsPopper a -> IO a
type ConnRelease = ConnReuse -> IO ()
type Popper = IO ByteString
type NeedsPopper a = Popper -> IO a
type GivesPopper a = NeedsPopper a -> IO a
type BodyReader = IO ByteString
type ReqMod m = Request -> m Request
type Hostname = ByteString
type Port = Word16
type ContentType = ByteString
type StatusCode = Int
type BrowserAction = GenericBrowserAction (ResourceT IO)
type GenericBrowserAction m = StateT BrowserState m
type DownloadOptions = [String]
type Connection = InputStream
type Limit = Int
type BodyReader = IO ByteString
type RequestPath = ByteString
type RequestPath = ByteString
type BodyReader = IO ByteString
type Connection = InputStream
type Parameters = Map (CI ByteString) (CI ByteString)
type T = Header
type Name = HeaderName
type SyncExceptional m = ExceptionalT ConnError m
type AsyncExceptional m = ExceptionalT ConnError m
type T body m = ReaderT (T m body) m
type SyncExceptional body m = ExceptionalT ConnError (T body m)
type AsyncExceptional body m = ExceptionalT ConnError (T body m)
type T body = RWS ConnError [body] body
type Handler a = SockAddr -> URL -> Request a -> IO (Response a)
type Hostname = ByteString
type Port = Word16
type ContentType = ByteString
type StatusCode = Int
type URL = ByteString
type Session = StateT HttpTest IO
type Url = String
type QueryItem = (ByteString, Maybe ByteString)
type Query = [QueryItem]
type SimpleQueryItem = (ByteString, ByteString)
type SimpleQuery = [SimpleQueryItem]
type QueryText = [(Text, Maybe Text)]
type Method = ByteString
type Header = (HeaderName, ByteString)
type HeaderName = CI ByteString
type RequestHeaders = [Header]
type ResponseHeaders = [Header]
type ByteRanges = [ByteRange]
type Method = ByteString
type Header = (HeaderName, ByteString)
type HeaderName = CI ByteString
type RequestHeaders = [Header]
type ResponseHeaders = [Header]
type ByteRanges = [ByteRange]
type QueryItem = (ByteString, Maybe ByteString)
type Query = [QueryItem]
type SimpleQueryItem = (ByteString, ByteString)
type SimpleQuery = [SimpleQueryItem]
type QueryText = [(Text, Maybe Text)]
type FramePayloadDecoder = FrameHeader -> ByteString -> Either HTTP2Error FramePayload
type FrameType = Word8
type HeaderBlockFragment = ByteString
type Padding = ByteString
type Weight = Int
type StreamId = Int
type FrameFlags = Word8
type SettingsList = [(SettingsKeyId, SettingsValue)]
type SettingsValue = Int
type WindowSize = Int
type ErrorCode = Word32
type HPACKEncoding = DynamicTable -> HeaderList -> IO (DynamicTable, ByteString)
type HPACKDecoding = DynamicTable -> ByteString -> IO (DynamicTable, HeaderList)
type HPACKEncodingBuilder = DynamicTable -> HeaderList -> IO (DynamicTable, Builder)
type HeaderList = [Header]
type Header = (HeaderName, HeaderValue)
type HeaderName = ByteString
type HeaderValue = ByteString
type Size = Int
type Index = Int
type Server = ()
type HttpBody = ByteString
type HttpMethod = RequestMethod
type HttpUrl = URI
type HttpCode = Int
type HttpReason = String
type HttpHeaderName = HeaderName
type HttpHeaderValue = String
type HttpHeader = (HttpHeaderName, String)
type HttpHeaders = [HttpHeader]
type HttpParamName = String
type HttpParamValue = String
type HttpParams = [(HttpParamName, HttpParamValue)]
type ReqSpec = Spec ReqErr ReqIn ReqOut
type ResSpec = Spec ResErr ResIn ResOut
type HttpSpec = Spec HttpErr
type TextEncoding = DynEncoding
type Hubigraph = ReaderT Ubigraph IO
type VertexID = Int
type EdgeID = Int
type Edge = (VertexID, VertexID)
type Color = String
type StyleID = Int
type Name = String
type Hue = StateT HueData (ReaderT String IO)
type Code a = [(a, [Bit])]
type Assertion = IO ()
type Assertion = IO ()
type AssertionPredicate = IO Bool
type Path = [Node]
type ReportStart us = State -> us -> IO us
type ReportProblem us = String -> State -> us -> IO us
type Path = [Node]
type Assertion = IO ()
type URI = Text
type Description = DocDesc
type Title = Text
type Content = Text
type Position = Int
type Context = Text
type Word = Text
type Words = Map Context WordList
type WordList = Map Word [Position]
type Weight = Score
type RegEx = Text
type IndexMap = Map Context Content
type ApiDocuments = [ApiDocument]
type AnalyzerFunction = Text -> [(Position, Text)]
type FuzzySet = Map Text FuzzyScore
type Replacements = [Replacement]
type Replacement = ((Text, Text), FuzzyScore)
type FuzzyScore = Float
type Key = Int
type IntMap v = Tree v
type Occurrences = DocIdMap Positions
type RawResult = [(Word, Occurrences)]
type RawScoredResult = [(Word, (Score, Occurrences))]
type IndexImplCon i = (Index i, Show i, ICon i, IndexValue (IVal i), Binary i, Typeable i, IKey i ~ Text)
type DocMap e = DocIdMap e
type Schema = Map Context ContextSchema
type ContextTypes = [ContextType]
type IndexRep = (ContextSchema, IndexImpl)
type DocHits e = DocIdMap (DocInfo e, DocContextHits)
type DocContextHits = Map Context DocWordHits
type DocWordHits = Map Word Positions
type WordHits = Map Word WordInfoAndHits
type WordContextHits = Map Context WordDocHits
type WordDocHits = DocBoosts
type Weight = Score
type Boost = Score
type DocBoosts = DocIdMap Score
type ScoredContexts = ScoredWords
type DocRanking e = ContextWeights -> DocId -> Score -> DocInfo e -> DocContextHits -> Score
type WordRanking = Word -> WordInfo -> WordContextHits -> Score
type ContextWeights = Map Context Weight
type Content = Text
type Context = Text
type Description = DocDesc
type IndexMap = Map Context Content
type RegEx = Text
type URI = Text
type Weight = Score
type Hunt dt = HuntT dt IO
type DefHuntEnv = HuntEnv (Documents Document)
type ThrowsError = Either LispError
type IOThrowsError = ErrorT LispError IO
type Reverse as = ReverseLoop as []
type SubType = Text
type TextType = Text
type Content = ByteString
type Rational = Ratio Integer
type ShowS = String -> String
type ReadS a = String -> [(a, String)]
type Prefix = String
type URI = String
type LocalName = String
type Attributes = [(QName, String)]
type XSeq = [XTree]
type TVar = Int
type TQualifier = Char
type Path = [String]
type XParser s a = GenParser Char (XPState s) a
type SimpleXParser a = XParser () a
type MimeTypeTable = Map String String
type AssocList k v = [(k, v)]
type NTrees a = [NTree a]
type NTBreadCrumbs a = [NTCrumb a]
type NsEnv = AssocList XName XName
type XmlTree = NTree XNode
type XmlTrees = NTrees XNode
type XmlNavTree = NTZipper XNode
type XmlNavTrees = [NTZipper XNode]
type Blob = ByteString
type Attributes = AssocList String String
type ChildNodes = [(Int, XmlNodeSet)]
type Name = String
type Schemas = [Schema]
type IOStateArrow s b c = IOSLA (XIOState s) b c
type IOSArrow b c = IOStateArrow () b c
type MimeTypeHandlers = Map String (IOSArrow XmlTree XmlTree)
type CompressionFct = ByteString -> ByteString
type DeCompressionFct = ByteString -> ByteString
type SysConfig = XIOSysState -> XIOSysState
type SysConfigList = [SysConfig]
type XmlArrow = LA XmlTree XmlTree
type XmlArrowS = LA XmlTree XmlTrees
type IOStateArrow s b c = IOSLA (XIOState s) b c
type IOSArrow b c = IOStateArrow () b c
type SysConfig = XIOSysState -> XIOSysState
type SysConfigList = [SysConfig]
type Pickler a = a -> St -> St
type UnpickleVal a = Either UnpickleErr a
type UnpickleErr = (String, St)
type Schemas = [Schema]
type ResourceTable a = MVar (Map a ResourceLock)
type ResourceLock = (MVar (), Int)
type CharSet = [(Char, Char)]
type TFilter node = NTree node -> NTrees node
type TSFilter node = NTrees node -> NTrees node
type XmlFilter = TFilter XNode
type XmlSFilter = TSFilter XNode
type TagName = QName
type AttrName = QName
type NamespaceTable = NsEnv
type SysStateAttrs = AssocList String XmlTrees
type XState state res = StateIO (XmlState state) res
type XmlStateFilter state = XmlTree -> XState state XmlTrees
type Regex = GenRegex String
type RegexText = GenRegex Text
type RegexTextLazy = GenRegex Text
type RegexByteString = GenRegex ByteString
type RegexByteStringLazy = GenRegex ByteString
type Regex = GenRegex String
type Regex = GenRegex String
type RegexText = GenRegex Text
type RegexTextLazy = GenRegex Text
type RegexByteString = GenRegex ByteString
type RegexByteStringLazy = GenRegex ByteString
type Regex = GenRegex String
type Env = [(String, XmlTree)]
type PatternEnv = [(String, Pattern)]
type OldName = String
type NewName = String
type NamePair = (OldName, NewName)
type RefList = [NamePair]
type DatatypeEqual = DatatypeName -> String -> Context -> String -> Context -> Maybe String
type DatatypeAllows = DatatypeName -> ParamList -> String -> Context -> Maybe String
type DatatypeLibraries = [DatatypeLibrary]
type DatatypeLibrary = (Uri, DatatypeCheck)
type DatatypeName = String
type ParamName = String
type AllowedParams = [ParamName]
type AllowedDatatypes = [(DatatypeName, AllowedParams)]
type Uri = String
type LocalName = String
type ParamList = [(LocalName, String)]
type Prefix = String
type Context = (Uri, [(Prefix, Uri)])
type Datatype = (Uri, LocalName)
type ErrLevel = Int
type FunctionTable = [(String, String -> String -> Bool)]
type CheckString = CheckA String String
type CheckInteger = CheckA Integer Integer
type Unicode = Char
type UString = [Unicode]
type UTF8Char = Char
type UTF8String = String
type UStringWithErrors = [Either String Char]
type DecodingFct = String -> (UString, [String])
type DecodingFctEmbedErrors = String -> UStringWithErrors
type Name = (NamePrefix, LocalName)
type NamePrefix = String
type LocalName = String
type VarName = Name
type Literal = String
type FctName = String
type FctArguments = [Expr]
type Context = (ConPos, ConLen, ConNode)
type ConPos = Int
type ConLen = Int
type ConNode = NavXmlTree
type NavXmlTree = NavTree XNode
type NavXmlTrees = [NavXmlTree]
type NodePath = [Int]
type XPathFilter = XPathValue -> XPathValue
type VarTab = [(VarName, XPathValue)]
type KeyTab = [(QName, String, NavXmlTree)]
type Env = (VarTab, KeyTab)
type XFct = Context -> Env -> [XPathValue] -> XPathValue
type UriMapping = Map String String
type NTest = ExName
type Strips = Map NTest Bool
type NSAliasing = Map String String
type XPathParams = Map ExName Expr
type XmlValidator = ByteString -> Either String ()
type IOVector u v = MVector u v RealWorld
type STVector = MVector
type OptArgs = (MultiMap String String, Set String, [String])
type Parser source result = source -> Either SomethingBad result
type SomethingBad = [(SourcePos, String)]
type Tokens t = [(SourcePos, t)]
type LazyByteString = ByteString
type List a = [a]
type POPs a = [(SourcePos, POP a)]
type Parser source result = source -> Either SomethingBad result
type SomethingBad = (SourcePos, [String])
type Tokens t = [(SourcePos, t)]
type Application = Environment -> IO (Int, ByteString, Headers, Enumerator)
type Enumerator = forall a. (a -> ByteString -> IO (Either a a)) -> a -> IO a
type Headers = [(ByteString, ByteString)]
type ModuleName = String
type TestName = String
type TestCase = TestName -> Align -> IO TestResult
type UnitTest = [(TestName, TestCase)]
type SimpleSignature = Signature NomSymbol PropSymbol RelSymbol
type StringSignature = Signature NomSymbol PropSymbol RelSymbol
type TestFormula = Formula NomSymbol PropSymbol RelSymbol
type ParseState = (StringSignature, SignatureType)
type RelInfo = (String, [RelProperty])
type ProverInfo = (String, [(String, String)])
type InferenceTask = (QueryType, Maybe String, [Formula NomSymbol PropSymbol RelSymbol])
type InputFile = [Formula NomSymbol PropSymbol RelSymbol]
type OldInputFile = [Formula NomSymbol PropSymbol RelSymbol]
type MessageBody = ByteString
type Handler m = Request -> Pipe ProxyFast ByteString ByteString m (Response m)
type Rank = Int8
type LabelSet = HashSet Label
type Batch a = State BatchState a
type Params = HashMap Text ParamValue
type TransError = (Text, Text)
type Transaction a = ExceptT TransError (ReaderT Connection (StateT TransState (ResourceT IO))) a
type Hostname = ByteString
type Port = Int
type Properties = HashMap Text PropertyValue
type RelationshipType = Text
type Label = Text
type Scheme = String
type Timeout = Int
type Watcher = Zookeeper -> Event -> State -> Maybe String -> IO ()
type Version = Int32
type ZulipM = ReaderT ZulipOptions IO
type EventCallback = Event -> ZulipM ()
type MessageCallback = Message -> ZulipM ()
type ZulipM = ReaderT ZulipOptions IO
type EventCallback = Event -> ZulipM ()
type MessageCallback = Message -> ZulipM ()
type Msgstr = String
type Context = String
type I18n a = ReaderT (Locale, L10n, Maybe Context) Identity a
type L10n = Map Locale (Map (Maybe Context) (Map Msgid [Msgstr]))
type Msgstr = String
type Context = String
type I18n a = ReaderT (Locale, L10n, Maybe Context) Identity a
type L10n = Map Locale (Map (Maybe Context) (Map Msgid [Msgstr]))
type CodeMsgPair = (Int, String)
type ReqId = Int
type OrderComboLeg = Double
type TickerId = Int
type OrderId = Int
type GroupId = Int
type MIB = MVar IBServer
type HandlerFunc = MIB -> IBMessage -> IO ()
type BLZ = Text
type BIC = Text
type AccountNr = Text
type ChecksumType = Text
type BIC = Text
type BLZ = Text
type AccountNr = Text
type CalAddress = URI
type EncodingName = String
type InProcess = Bool
type Query a = IdeSession -> IO a
type Type = Text
type ModuleName = Text
type PackageDBStack = [PackageDB]
type StrictState s = StrictStateT s Identity
type Type = Text
type Name = Text
type ModuleName = Text
type Value = Text
type VariableEnv = [(Name, Type, Value)]
type UseSites = Strict (Map IdPropPtr) [SourceSpan]
type ModuleName = Text
type IdList = [(SourceSpan, SpanInfo)]
type Name = String
type Attributes = [Attribute]
type Content = [XML]
type AttDef = (Name, AttType, DefaultDecl)
type EntityDef = Either EntityValue (ExternalID, Maybe String)
type AttValue = [Either Char Reference]
type EntityValue = [Either Char (Either Parameter Reference)]
type PublicID = String
type TextDecl = (Maybe String, String)
type External = (Maybe TextDecl, Content)
type Content = [Either String Element]
type Attributes = [Attribute]
type Symbol = (Maybe String, String)
type XML = Element
type Attr = Attribute
type AttrList = Attributes
type HTMLBuilder = XMLBuilder
type Key = String
type RPCHandler = String -> JSON -> IO JSON
type Pairings a = a -> a -> [[(a, a)]]
type PairingsList a b = [a] -> [b] -> [[([a], [b])]]
type PairingsPair a b = (a, a) -> (b, b) -> [[(a, b)]]
type Match a = a -> a -> [Substitution]
type SymbolMatch = Match Term -> [Term] -> Term -> [Substitution]
type Transformation a = Trans a a
type ParamTrans a b = Trans (a, b) b
type Core a = GCore (Rule a)
type DependencyGraph node key = (Graph, Vertex -> (node, key, [key]), key -> Maybe Vertex)
type DependencyGraph node key = (Graph, Vertex -> (node, key, [key]), key -> Maybe Vertex)
type Examples a = [(Difficulty, a)]
type ExampleMap a = Map Id [(a, a)]
type Type a = TypeRep (Const a)
type StepInfo a = (Rule (Context a), Location, Environment)
type TypedEncoder a = Encoder a (TypedValue (Type a))
type TypedDecoder a s = forall t. Type a t -> Decoder a s t
type JSONDecoder a = Decoder a JSON
type XMLDecoder a = Decoder a XML
type XMLEncoder a t = Encoder a t XMLBuilder
type TagVersion = (Word8, Word8)
type TagSize = Integer
type FrameName = String
type FrameID = String
type FrameSize = Integer
type Token = Word8
type CharEncoding = Integer
type TagParser = Parser St Token
type Size = Integer
type Tag = ID3Tag
type Err = Err' Term
type Ctxt a = Map Name (Map Name a)
type UCs = (Int, [UConstraint])
type EnvTT n = [(n, Binder (TT n))]
type DataOpts = [DataOpt]
type Term = TT Name
type Type = Term
type Env = EnvTT Name
type WkEnv = WkEnvTT Name
type SC = SC' Term
type CaseAlt = CaseAlt' Term
type ErasureInfo = Name -> [Int]
type CaseTree = SC
type Hole = Maybe Name
type RunTactic' a = Context -> Env -> Term -> StateT a TC Term
type Fails = [(TT Name, TT Name, Bool, Env, Err, [FailContext], FailAt)]
type Elab' aux a = StateT (ElabState aux) TC a
type Elab a = Elab' () a
type LAlt = LAlt' LExp
type LDefs = Ctxt LDecl
type DDefs = Ctxt DDecl
type CodeGenerator = CodegenInfo -> IO ()
type SCGEntry = (Name, [Maybe (Int, SizeChange)])
type UsageReason = (Name, Int)
type Idris = StateT IState (ExceptT Err IO)
type FnOpts = [FnOpt]
type ProvideWhat = ProvideWhat' PTerm
type ElabD a = Elab' EState a
type PDecl = PDecl' PTerm
type PData = PData' PTerm
type PClause = PClause' PTerm
type PTactic = PTactic' PTerm
type PDo = PDo' PTerm
type PArg = PArg' PTerm
type DSL = DSL' PTerm
type FunDoc = FunDoc' (Docstring DocTerm)
type Docs = Docs' (Docstring DocTerm)
type MultiPath = [SCGEntry]
type IdrisParser = StateT IState IdrisInnerParser
type MonadicParsing m = (DeltaParsing m, LookAheadParsing m, TokenParsing m, Monad m)
type AccessTime = Integer
type ModifTime = Integer
type Exponent = Int
type Fraction = Integer
type BitCount = Int
type NonLinear a = V a -> V a
type Pixel = (Int, Word8)
type ColorizeFunction = Word8 -> [Word8] -> [Word8]
type RedirectUri = Text
type UserID = Text
type CallbackUrl = Text
type TagName = Text
type MediaID = Text
type CommentID = Text
type LocationID = Text
type GeographyID = Text
type Port = Int
type IP = String
type Username = Text
type Metadata = Map Text Text
type Width = Int
type Height = Int
type LineNumber = Int
type ColumnNumber = Int
type ErrMsg = String
type Username = Text
type Metadata = Map Text Text
type Width = Int
type Height = Int
type Width = Int
type Height = Int
type Base64 = Text
type Interpreter = Ghc
type HeaderMap = Map ByteString ByteString
type Token = (TokenType, String)
type Tokens = Seq Token
type Scanner = String -> Either String Tokens
type Style = TokenType -> [Styling]
type RGBA = (Int, Int, Int, Int)
type MagickRealType = Double
type MagickStatusType = Word32
type MagickOffsetType = Int64
type MagickSizeType = Word64
type SignedQuantum = Int32
type QuantumAny = Word64
type Quantum = Word16
type IndexPacket = Word16
type PPixelIterator = Ptr PixelIterator
type PPixelWand = Ptr PixelWand
type PPixelPacket = ForeignPtr PixelPacket
type PMagickPixelPacket = ForeignPtr MagickPixelPacket
type PDrawingWand = Ptr DrawingWand
type PMagickWand = Ptr MagickWand
type ImlibProgressFunction = ImlibImage -> Word8 -> CInt -> CInt -> CInt -> CInt -> IO CInt
type ImlibDataDestructorFunction = ImlibImage -> Ptr () -> IO ()
type FeedID = URI
type DatabaseState m = (DatabaseReader m, DatabaseWriter m)
type ImmFeed = (FeedID, Feed)
type Format = (Item, Feed) -> String
type Maildir = FilePath
type FeedConfig = (Config -> Config, FeedID)
type FeedList = [FeedConfig]
type ConfigFeed = (Config -> Config, String)
type Import = String
type NonTerminal = String
type Constructor = String
type WhitespaceParse = Bool
type Minimum = Integer
type Separator = String
type TerminalString = String
type RegularExpression = String
type InitialNonTerminals = [NonTerminal]
type InitialTerminals = [Terminal]
type ReachableNonTerminals = [NonTerminal]
type Characterization = (InitialTerminals, InitialNonTerminals, ReachableNonTerminals)
type HaskellModulePrefix = String
type ℝ = Float
type ℝ2 = (ℝ, ℝ)
type ℝ3 = (ℝ, ℝ, ℝ)
type ℕ = Int
type Polyline = [ℝ2]
type Obj2 = ℝ2 -> ℝ
type Obj3 = ℝ3 -> ℝ
type VariableLookup = Map String OpenscadObj
type Predictor = FilePath -> IO Bool
type Name = String
type Path = [Name]
type UID = Int
type VarInfo = (Bool, Path, Const)
type Name = String
type TransProc m p q = Value p -> m (Value q, p -> m q)
type (->>) a b = Trans (DefaultChange a) (DefaultChange b)
type Parser s r = Parser LeftBiasedLocal s r
type Parser s r = Parser Symmetric s r
type IncrementalCnstr a = (Incremental a, Changed (Increment a))
type MapLikeIncrement k a = ([AddItem k a], [RemItem k], [ModItem k a])
type SetLikeIncrement a = ([AddItem () a], [RemItem a])
type IncrementalCnstr a = (Incremental a, Changed (Increment a))
type Indentation = Int
type LocalState a = (IndentationState -> IndentationState) -> (IndentationState -> IndentationState -> IndentationState) -> a -> a
type IndentationToken t = t
type Indentation = Int
type IndentLanguageDef st = GenLanguageDef (IndentStream (CharIndentStream String)) st Identity
type Indentation = Int
type GenIndentParsecT i s u m a = ParsecT s u (IndentT i m) a
type IndentT i m = StateT i m
type GenIndentParsec i s u a = GenIndentParsecT i s u Identity a
type IndentParsecT s u m a = GenIndentParsecT HaskellLike s u m a
type IndentParsec s u a = IndentParsecT s u Identity a
type GenIndentTokenParser i s u m = GenTokenParser s u (IndentT i m)
type IndentTokenParser s u m = GenIndentTokenParser HaskellLike s u m
type IndentParser tok st a = GenParser tok (st, IndentState) a
type IndentCharParser st a = IndentParser Char st a
type IndentCharParser st a = IndentParser Char st a
type TokenParser st = TokenParser (st, IndentState)
type IndentParser s u a = ParsecT s u (State SourcePos) a
type (:->) a b = forall i. a i -> b i
type R m i j a = m (a := j) i
type EVarName = String
type TVarName = Int
type Type = Fix FType
type QualType = TQual Type
type TypeScheme = TScheme Type
type TypeEnv = Map EVarName VarId
type TSubst = Map TVarName Type
type EPropName = String
type Infer a = StateT InferState (EitherT TypeError Identity) a
type InfixMap = Map HsQName Fixity
type Transliterations = Map Char String
type Pred a = a -> Bool
type InfString = InfList Char
type Column = Text
type Interface = Text
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s a = Lens s s a a
type WikiHandler a = forall master. (YesodWikiAuth master, YesodPersist master, YesodPersistBackend master ~ SqlPersistT) => HandlerT Informative (HandlerT master IO) a
type Wikipage = WikipageGeneric SqlBackend
type WikipageId = KeyBackend SqlBackend Wikipage
type Wikisection = WikisectionGeneric SqlBackend
type WikisectionId = KeyBackend SqlBackend Wikisection
type Wikirel = WikirelGeneric SqlBackend
type WikirelId = KeyBackend SqlBackend Wikirel
type Wikisugg = WikisuggGeneric SqlBackend
type WikisuggId = KeyBackend SqlBackend Wikisugg
type TypeNames = HashSet CIdentifier
type CParser i m = (Monad m, Functor m, Applicative m, MonadPlus m, Parsing m, CharParsing m, TokenParsing m, LookAheadParsing m, MonadReader (CParserContext i) m, Hashable i)
type TypeNames = HashSet CIdentifier
type CParser i m = (Monad m, Functor m, Applicative m, MonadPlus m, Parsing m, CharParsing m, TokenParsing m, LookAheadParsing m, MonadReader (CParserContext i) m, Hashable i)
type TypesTable = Map TypeSpecifier TypeQ
type CArray = Ptr
type AntiQuoterId = String
type AntiQuoters = Map AntiQuoterId SomeAntiQuoter
type C c a = CEq c () () a
type ZipperR = Either String
type Salary = Float
type Manager = Employee
type Name = String
type RepDept_ = C Dept_D_ (:*: (Rec Manager) (Rec [Employee]))
type RepEmployee_ = C Employee_E_ (:*: (Rec Name) (Rec Salary))
type RepTerm_ = :+: (C Term_Var'_ (Rec String)) (:+: (C Term_Lambda_ (:*: (Rec String) (Rec Term))) (:+: (C Term_App_ (:*: (Rec Term) (Rec Term))) (C Term_If_ (:*: (Rec Term) (:*: (Rec Term) (Rec Term))))))
type Pattern = Vector Double
type TrainPat = (Pattern, Pattern)
type IsIntSubType a b = IsIntBaseSubType (IntBaseType a) (IntBaseType b)
type IsIntTypeIso a b = IsIntBaseTypeIso (IntBaseType a) (IntBaseType b)
type IsIntTypeEq a b = IsIntBaseTypeEq (IntBaseType a) (IntBaseType b)
type GmpLimb = Word
type GmpLimb# = Word#
type GmpSize = Int
type GmpSize# = Int#
type Id = Int
type Id = Int
type T x y ny = (x, ny) -> (x, ny) -> x -> y
type T x y = [x] -> x -> [(Int, y)]
type IntervalMap k v = IntervalMap (Interval k) v
type IntervalMap k v = IntervalMap (Interval k) v
type Key = Int
type Action s = s -> IO s
type Request s a = s -> IO (s, a)
type StreamPair a = SP (InputStream a) (OutputStream a)
type IOSpec f a = IO a
type VM a = StateT Store Effect a
type Data = Dynamic
type Loc = Int
type UndoableIO a = UndoableM IO a
type Protocol = String
type ChainNames = Set String
type Behavior = BehaviorM ()
type Parameter = ByteString
type ServerName = ByteString
type UserName = ByteString
type RealName = ByteString
type Command = ByteString
type Channel = ByteString
type Password = ByteString
type ServerName = ByteString
type ChannelName a = a
type NickName a = a
type ServerName a = a
type Reason a = Maybe a
type IsModeSet = Bool
type ModeFlag a = a
type ModeArg a = a
type NumericArg a = a
type Target a = a
type IrcEvent = Event ByteString
type IrcSource = Source ByteString
type IrcMessage = Message ByteString
type Logger = LogLevel -> ByteString -> IO ()
type HostName = ByteString
type Precision = Int
type Url = Text
type Endpoint = Text
type Param = (Text, Text)
type QueueName = Text
type ID = Text
type Mail r = MailT r IO
type MailT r m = StateT r MailConfig (Iteratee SmtpResponse m)
type ListLikey s el = (ListLike s el, Nullable s)
type FileOffset = COff
type EnumerateeHandler eli elo m a = (Stream eli -> Iteratee eli m a) -> SomeException -> Iteratee elo m (Iteratee eli m a)
type Enumerator s m a = Iteratee s m a -> m (Iteratee s m a)
type Enumeratee sFrom sTo (m :: * -> *) a = Iteratee sTo m a -> Iteratee sFrom m (Iteratee sTo m a)
type FileOffset = COff
type FileOffset = COff
type Enumerator s m a = Iteratee s m a -> m (Iteratee s m a)
type Enumeratee sFrom sTo m :: (* -> *) a = Iteratee sTo m a -> Iteratee sFrom m (Iteratee sTo m a)
type FileOffset = COff
type Inum tIn tOut m a = Iter tOut m a -> Iter tIn m (IterR tOut m a)
type Onum t m a = Inum () t m a
type ResidHandler tIn tOut = (tIn, tOut) -> (tIn, tOut)
type CtlHandler m1 t m a = CtlArg t m a -> m1 (IterR t m a)
type Codec tIn tOut m a = Iter tIn m (tOut, Maybe (Inum tIn tOut m a))
type InumM tIn tOut m a = Iter tIn (IterStateT (InumState tIn tOut m a) m)
type HttpRequestHandler m s = HttpReq s -> Iter ByteString m (HttpResp m)
type HttpResponseHandler m s = HttpResp m -> Iter L m (Maybe (HttpReq s, L))
type HttpMap m s = [(String, HttpRoute m s)]
type Action t b m a = StateT (ActionState t b m) m a
type TTM = Either TTError
type Tactic = Goal -> Context -> TTM Context
type Union s t = Nub (Sort (Append s t))
type Unionable s t = (Sortable (Append s t), Nubable (Sort (Append s t)))
type Sort l = Bubble l l
type Sortable s = Bubbler s s
type AsSet s = Nub (Sort s)
type IsSet s = s ~ Nub (Sort s)
type Select a b p q = Choose (CmpSymbol a b) p q
type UnionS s t = Nub (Sort (Append s t))
type Unionable s t = (Sortable (Append s t), Nubable (Sort (Append s t)) (Nub (Sort (Append s t))), Split s t (Union s t))
type Sortable s = Bubbler s s
type SetLike s = Nub (Sort s)
type StateSet f = (StateSetProperties f, StateSetProperties (Reads f), StateSetProperties (Writes f))
type IntersectR s t = (Sortable (Append s t), Update (Sort (Append s t)) t)
type Sort l = Bubble l l
type IsSet s = s ~ Nub (Sort s)
type Union s t = Nub (Sort (Append s t))
type Unionable s t = (Sortable (Append s t), Nubable (Sort (Append s t)))
type IndexOp = forall k a. (Ord k, Ord a) => k -> a -> Map k (Set a) -> Map k (Set a)
type IndexOp = forall k a. (Ord k, Ord a) => k -> a -> Map k (Set a) -> Map k (Set a)
type SetOp = forall a. Ord a => a -> Set a -> Set a
type All = Status (PortRegister (PortMismatch Errno))
type Process arg = NFrames -> Ptr arg -> IO Errno
type Sample = CFloat
type Port = Port Sample
type Port = Port EventBuffer
type AudioSample = CFloat
type BufferSizeCallback = CUInt -> Ptr () -> IO CInt
type ClientRegistrationCallback = Ptr CChar -> CInt -> Ptr () -> IO ()
type FreewheelCallback = CInt -> Ptr () -> IO ()
type GraphOrderCallback = Ptr () -> IO CInt
type PortConnectCallback = CUInt -> CUInt -> CInt -> Ptr () -> IO ()
type PortRegistrationCallback = CUInt -> CInt -> Ptr () -> IO ()
type ProcessCallback = CUInt -> Ptr () -> IO CInt
type SampleRateCallback = CUInt -> Ptr () -> IO CInt
type ThreadCallback = Ptr () -> IO (Ptr ())
type ThreadInitCallback = Ptr () -> IO ()
type XRunCallback = Ptr () -> IO CInt
type NFrames = CUInt
type Time = CULLong
type AudioSample = CFloat
type BufferSizeCallback = CUInt -> Ptr () -> IO CInt
type ClientRegistrationCallback = Ptr CChar -> CInt -> Ptr () -> IO ()
type FreewheelCallback = CInt -> Ptr () -> IO ()
type GraphOrderCallback = Ptr () -> IO CInt
type PortConnectCallback = CUInt -> CUInt -> CInt -> Ptr () -> IO ()
type PortRegistrationCallback = CUInt -> CInt -> Ptr () -> IO ()
type ProcessCallback = CUInt -> Ptr () -> IO CInt
type SampleRateCallback = CUInt -> Ptr () -> IO CInt
type ThreadCallback = Ptr () -> IO (Ptr ())
type ThreadInitCallback = Ptr () -> IO ()
type XRunCallback = Ptr () -> IO CInt
type NFrames = CUInt
type Time = CULLong
type FilePath = String
type JalaaliYear = Int
type JalaaliMonth = Int
type JalaaliDay = Int
type GregorianYear = Int
type GregorianMonth = Int
type GregorianDay = Int
type JulianDayNumber = Int
type DayInMarch = Int
type LeapOffset = Int
type JalaaliDate = (JalaaliYear, JalaaliMonth, JalaaliDay)
type GregorianDate = (GregorianYear, GregorianMonth, GregorianDay)
type Index = Int
type Shape = (Index, Index)
type IndexPair = (Index, Index)
type CblasIndex = Integer
type Library = [(FilePath, Info, [Track])]
type WrappedFun = Ptr JVM -> Ptr JObjectRef -> Ptr JObjectRef -> Ptr JObjectRef -> IO (Ptr JObjectRef)
type TArr a b = IOStateArrow ConsState a b
type JLocalType = ([(VarRef, Constraint)], JType)
type VarRef = (Maybe String, Int)
type JsLabel = String
type JRequest = [Value]
type JResult = Either String Value
type JState a = MVar (Either String a)
type JStateAsync a = MVar (Either (Int, String) (JState a))
type PanelPath = [Int]
type PState m a = StateT PanelState m a
type UpdateList = [(String, (String, String))]
type ActiveMethod = Location Method
type Sync a = MVar a
type Jwe = (JweHeader, ByteString)
type Jws = (JwsHeader, ByteString)
type Table a = Int -> a
type Dim = (Int, Int)
type Mat a = [[a]]
type Bits = [Bool]
type QuaTab = [Int]
type DataUnit = Mat Int8
type Picture = Mat PixelRGB
type DataSpec = (Dim, QuaTab, Tree Int, Tree (Int, Int))
type MCUSpec = [(Dim, DataSpec)]
type FrameCompo = (Int, Dim, Int)
type ScanCompo = (Int, Int, Int)
type QtabCompo = (Int, [Int])
type SOF = (Dim, [FrameCompo])
type DHT = (Int, Int, Tree Int)
type SOS = ([ScanCompo], Bits)
type DQT = [QtabCompo]
type XXX = (Char, String)
type Huf = (Table (Tree Int), Table (Tree (Int, Int)))
type Sof = (Dim, Table (Dim, QuaTab))
type Qua = Table QuaTab
type State2 = (Sof, Huf, Qua, Picture)
type JSValueRef = Ptr OpaqueJSValue
type JSValueRefRef = Ptr JSValueRef
type JSObjectRef = Ptr OpaqueJSValue
type JSPropertyNameArrayRef = Ptr OpaqueJSPropertyNameArray
type JSPropertyAttributes = CUInt
type JSContextRef = Ptr OpaqueJSContext
type JSStringRef = Ptr OpaqueJSString
type Index = CUInt
type JSM = ReaderT JSContextRef IO
type JSContextRef = Ptr OpaqueJSContext
type JSStringRef = Ptr OpaqueJSString
type JSValueRef = Ptr OpaqueJSValue
type JSUndefined = ()
type JSBool = Bool
type JSNumber = Double
type JSString = Text
type JSObjectRef = Ptr OpaqueJSValue
type JSF = MakeObjectRef o => IndexPreservingGetter o (JSM JSValueRef)
type JSCallAsFunction = JSValueRef -> JSValueRef -> [JSValueRef] -> JSM JSUndefined
type JSValueRef = Ptr OpaqueJSValue
type JSValueRefRef = Ptr JSValueRef
type JSObjectRef = Ptr OpaqueJSValue
type JSPropertyNameArrayRef = Ptr OpaqueJSPropertyNameArray
type JSPropertyAttributes = CUInt
type JSContextRef = Ptr OpaqueJSContext
type JSStringRef = Ptr OpaqueJSString
type Index = CUInt
type JSC = ReaderT JSContextRef IO
type JSContextRef = Ptr OpaqueJSContext
type JSStringRef = Ptr OpaqueJSString
type JSValueRef = Ptr OpaqueJSValue
type JSUndefined = ()
type JSBool = Bool
type JSNumber = Double
type JSString = Text
type JSObjectRef = Ptr OpaqueJSValue
type JSF = MakeObjectRef o => IndexPreservingGetter o (JSC JSValueRef)
type JSCallAsFunction = JSValueRef -> JSValueRef -> [JSValueRef] -> JSC JSUndefined
type JSMW e a = RWS (Expression e) [Statement ()] Int a
type ECRF e n = Expression THTMLDocument -> JSMW e (Expression n)
type OnHandler e c = Expression e -> JSMW c (Expression Bool)
type JSONTest = IxFree JSONF
type AppConduits qo no ro qi ni ri m = (Source m (IncomingMsg qo qi ni ri), Sink (Message qo no ro) m ())
type SentRequests qo = HashMap Id (Request qo)
type Method = Text
type Connection m = ByteString -> m (Maybe ByteString)
type RpcResult (m :: * -> *) r = ExceptT RpcError m r
type RpcResult m r = ExceptT RpcError m r
type Methods m = [Method m]
type SchemaC = Schema -> Schema
type JsonFieldName = String
type JsonTagName = String
type ParserM = ParserT ByteString
type Object = Map Text Value
type Array = [Value]
type JFilter = Json -> Jsons
type ConvResult a = Either ConvError a
type Jsons = [Json]
type Jsons = [Json]
type URL = Text
type EmailAddress = Text
type Key = Word
type Palette = Image PixelRGB8
type Traversal s t a b = forall f. Applicative f => (a -> f b) -> s -> f t
type Pixel8 = Word8
type Pixel16 = Word16
type Pixel32 = Word32
type PixelF = Float
type GifDelay = Int
type Traversal s t a b = forall f. Applicative f => (a -> f b) -> s -> f t
type GifDelay = Int
type Palette = Image PixelRGB8
type Pixel8 = Word8
type Pixel16 = Word16
type PixelF = Float
type Reply a b = [String] -> Result (Position a) b
type ArgParser = Annotated ArgDesc SeqParser
type ArgDesc = String
type OptionParser = Annotated [Flag] ParParser
type ToolParser = Annotated [Tool] PrefixParser
type Map a b = HashMap a b
type UF a = State (S a)
type S a = Map a a
type NameMap a = Map Int64 a
type Variable = Name ::: Type
type Function = Name ::: FunType
type Literal = Signed Atomic
type CNF = Closed Obligs
type Tag = ByteString
type Problem a = Closed [Input a]
type Subst = NameMap (Name ::: Term)
type ShareState = (NameMap Type, NameMap Variable, NameMap Function)
type Watch a = a -> Sat1 a ()
type Function' = Name ::: ([Type'], Type')
type Variable' = Name ::: Type'
type Type' = Name ::: Type
type Parser = Parsec ParsecState
type ParsecState = UserState ParseState TokenStream
type Cost = (Integer, Integer)
type M = ReaderT Tag (StateT Int NameM)
type LocalVariableIndex = Word16
type PC = Word16
type ExceptionTable = [ExceptionTableEntry]
type InstructionStream = Array PC (Maybe Instruction)
type LocalVariableIndex = Word16
type PC = Word16
type JSON = Text
type ClaimsMap = Map Text Value
type Pt a = (a, a)
type Table row col c = Map (row, col) c
type Stripe a b = Map a b
type Vector = [Double]
type Response a = Either Error a
type Response a = Either Error a
type Co w = CoT w Identity
type Kangaroo r a = GenKangaroo r a
type ParseErr = String
type RegionName = String
type Kangaroo r w st a = GenKangaroo (r, w, st) a
type ParseErr = String
type RegionName = String
type Kangaroo st a = GenKangaroo st a
type ParseErr = String
type RegionName = String
type Kangaroo r a = GenKangaroo r a
type ParseErr = String
type RegionName = String
type Kangaroo a = GenKangaroo () a
type ParseErr = String
type RegionName = String
type Seq a = Signal CLK a
type Enabled a = Maybe a
type Pipe a d = Enabled (a, d)
type Memory clk a d = Signal clk a -> Signal clk d
type Patch lhs_in rhs_out lhs_out rhs_in = (lhs_in, rhs_in) -> (lhs_out, rhs_out)
type FabricPatch fab lhs_in rhs_out lhs_out rhs_in = (lhs_in, rhs_in) -> fab (lhs_out, rhs_out)
type Seq a = Signal CLK a
type Karakuri' = Karakuri Identity
type ConfigEnvInternal m = StateT ConfigState m
type ConfigEnv m = EitherT ErrorDesc (ConfigEnvInternal m)
type Submission = (KattisProblem, [FilePath])
type ErrorDesc = ByteString
type SubmissionId = Integer
type ProblemSession = Integer
type ProjectState = KattisProblem
type Session = (Session, ByteString)
type PointAsListFn a p = p -> [a]
type SquaredDistanceFn a p = p -> p -> a
type PointAsListFn a p = p -> [a]
type SquaredDistanceFn a p = p -> p -> a
type PointAsListFn a p = p -> [a]
type SquaredDistanceFn a p = p -> p -> a
type PointAsListFn a p = p -> [a]
type SquaredDistanceFn a p = p -> p -> a
type Field a b c = (b -> a, a -> b -> Bool, a -> b -> b, c)
type Setter a b c = ProtectedModel b c -> a -> IO ()
type Getter a b c = ProtectedModel b c -> IO a
type Modifier a b c = ProtectedModel b c -> (a -> a) -> IO ()
type ModifierIO a b c = ProtectedModel b c -> (a -> IO a) -> IO ()
type FieldAccessor a b c = ProtectedModel b c -> ReactiveFieldReadWrite IO a
type ConfigIO e = (Maybe String -> e -> IO (), e -> IO String)
type ViewElementAccessor a b = a -> b
type ViewElementAccessorIO a b = ViewElementAccessor a (IO b)
type Color4 = (Word16, Word16, Word16, Word16)
type Notifiers = MVar [IO ()]
type FieldGetter m a = m a
type FieldSetter m a = a -> m ()
type FieldNotifier m a = m () -> m ()
type ReactiveFieldActivatable m = ReactiveFieldRead m ()
type Involution a = BijectiveFunc a a
type Headers = [(ByteString, [ByteString])]
type Handler = Socket -> HTTPRequest -> IO ()
type Route = Socket -> HTTPRequest -> (ByteString -> Maybe ByteString) -> IO ()
type Appname = Text
type Plugins = [Plugin]
type Port = Int
type Host = CI Text
type HostBS = CI ByteString
type RequiresSecure = Bool
type ProxyAction = (ProxyActionRaw, RequiresSecure)
type IsSecure = Bool
type Reservations = Set Host
type HostLookup = ByteString -> IO (Maybe ProxyAction)
type KeyCode = Int
type E a = Either Reason a
type PasswordMap = Map PasswordName Password
type SessionMap = Map SessionName Session
type TriggerMap = Map TriggerID Trigger
type KeyMap = Map Name Key
type EncrypedCopyMap = Map Safeguard EncrypedCopy
type KeyPredicate h s k = Maybe h -> s -> k -> Bool
type Key = ByteString
type Value = ByteString
type PageAssign v = (String, Page v)
type PcbnewXyzT = (Double, Double, Double)
type State = Store
type HNFMode = Bool
type Branches a = [a]
type C_Exceptions = Exception
type Result a = State -> a
type Result' a = Store -> a
type C_Float = Prim Float
type StrEqResult = C_Bool
type C_String = List C_Char
type C_LeKey t0 = t0 -> t0 -> C_Bool
type C_FiniteSet t0 = C_FM t0 T0
type C_Global t0 = Prim (IORef t0)
type C_IORef a = Prim (IORef a)
type C_Node = C_Int
type C_LNode t0 = T2 C_Int t0
type C_UNode = T2 C_Int T0
type C_Edge = T2 C_Int C_Int
type C_LEdge t0 = T3 C_Int C_Int t0
type C_UEdge = T3 C_Int C_Int T0
type C_Context t0 t1 = T4 (List (T2 t1 C_Int)) C_Int t0 (List (T2 t1 C_Int))
type C_Adj t0 = List (T2 t0 C_Int)
type C_MContext t0 t1 = C_Maybe (T4 (List (T2 t1 C_Int)) C_Int t0 (List (T2 t1 C_Int)))
type C_Context'39 t0 t1 = T3 (List (T2 t1 C_Int)) t0 (List (T2 t1 C_Int))
type C_UContext = T3 (List C_Int) C_Int (List C_Int)
type C_GDecomp t0 t1 = T2 (T4 (List (T2 t1 C_Int)) C_Int t0 (List (T2 t1 C_Int))) (C_Graph t0 t1)
type C_Decomp t0 t1 = T2 (C_Maybe (T4 (List (T2 t1 C_Int)) C_Int t0 (List (T2 t1 C_Int)))) (C_Graph t0 t1)
type C_UDecomp t0 = T2 (C_Maybe (T3 (List C_Int) C_Int (List C_Int))) t0
type C_Path = List C_Int
type C_LPath t0 = List (T2 C_Int t0)
type C_UPath = List (T2 C_Int T0)
type C_GraphRep t0 t1 = C_FM C_Int (T3 (List (T2 t1 C_Int)) t0 (List (T2 t1 C_Int)))
type C_UGr = C_Graph T0 T0
type C_Handle = Prim IOHandle
type Assocs = [(C_String, C_String)]
type C_IORef a = C_IORef a
type C_Parser t0 = (List t0) -> List t0
type C_ParserRep t0 t1 = t0 -> (List t1) -> List t1
type C_Layout = List C_Char
type C_Horizontal = C_Bool
type C_Remaining = C_Int
type C_Width = C_Int
type C_Position = C_Int
type C_StartPosition = C_Int
type C_EndPosition = C_Int
type C_Out = C_Int -> (List C_Int) -> List C_Char
type C_OutGroupPrefix = C_Bool -> (Prim (C_Int -> State -> Prim ((List C_Int) -> State -> List C_Char))) -> C_Int -> (List C_Int) -> List C_Char
type C_Margins = List C_Int
type C_SetRBT t0 = C_RedBlackTree t0
type C_Socket = Prim Socket
type C_ShowS = (List C_Char) -> List C_Char
type C_TableRBT t0 t1 = C_RedBlackTree (T2 t0 t1)
type C_Prop = List C_Test
type C_Traversable t0 t1 = t0 -> T2 (List t1) (Prim ((List t1) -> State -> t0))
type C_FunList t0 = (List t0) -> List t0
type C_Tokens = List C_Token
type C_QName = T2 (List C_Char) (List C_Char)
type C_TVarIndex = C_Int
type C_VarIndex = C_Int
type C_Update t0 t1 = (Prim (t1 -> State -> t1)) -> t0 -> t0
type C_Precs = List (T2 (T2 (List C_Char) (List C_Char)) C_Int)
type C_QName = T2 (List C_Char) (List C_Char)
type C_CTVarIName = T2 C_Int (List C_Char)
type C_CVarIName = T2 C_Int (List C_Char)
type C_NameFM = C_FM (List C_Char) T0
type C_Options = T2 (C_FM (List C_Char) T0) (List C_Char)
type C_Pos = T2 C_Int C_Int
type C_ModuleIdent = List C_Char
type Distance = Vector Double -> Vector Double -> Double
type Clusters a = Vector (Cluster a)
type Centroids = Vector (Vector Double)
type Ab a = (Default a, AbelianGroup a)
type AbDef a = (Default a, AbelianGroup a)
type AbEq a = (Eq a, AbelianGroup a)
type DefEq a = (Eq a, Default a)
type Rational = Ratio Integer
type RingDef a = (Default a, Ring a)
type RingEq a = (Default a, Eq a, Ring a)
type PD a = [Node a]
type Basis b = Ord b
type Morphism b r = Graded (Lin b b r)
type Complex' r = Map Int (Morphism (Set Int, [B]) r)
type Complex b r = [Lin b b r]
type GradedComplex b r = Map Int (Complex b r)
type C r = Graded (Complex [B] r)
type MountId = String
type Download = (IO ByteString, IO ())
type Upload = Part
type Name = String
type ErrorCode = Int
type MethodName = ByteString
type ParamName = ByteString
type ValName = ByteString
type KRemote = Socket
type KRemoteAddr = (HostAddress, PortNumber)
type RemoteAddr = KRemoteAddr
type MethodHandler remote = (MethodName, HandlerBody remote)
type Height = Double
type GravConst = Double
type KSystem = System Body
type Radius = Double
type Speed = Double
type Height = Double
type GravConst = Double
type KSystem = System Body
type ErrorCode = Word32
type Translate c m a b = Transform c m a b
type Rewrite c m a = Transform c m a a
type BiTranslate c m a b = BiTransform c m a b
type BiRewrite c m a = BiTransform c m a a
type Path crumb = [crumb]
type LocalPath = SnocPath
type AbsolutePath = SnocPath
type WithLocalPath c crumb = ExtendContext c (LocalPath crumb)
type KcVisitFull = ByteString -> ByteString -> IO KcVisitAction
type KcVisitEmpty = ByteString -> IO KcVisitAction
type KcFileProc = FilePath -> Int64 -> Int64 -> IO Bool
type VisitorFull = ByteString -> ByteString -> IO (Either VisitorAction ByteString)
type VisitorEmpty = ByteString -> IO (Maybe ByteString)
type Writable = Bool
type UserTag = String
type Angle = Double
type Garden a = [Planted a]
type GrowingGarden = Garden GrowthState
type AnnotatedGarden = Garden StipeInfo
type GrowingPlanted = Planted GrowthState
type AnnotatedPlanted = Planted StipeInfo
type GrowingPlant = Plant GrowthState
type AnnotatedPlant = Plant StipeInfo
type GrammarFile = [GrammarRule]
type Priority = Int
type Weight = Int
type Point = (Double, Double)
type Line = (Point, Point)
type Forest k a = [k ::> Tree k a]
type ParameterSpace = Map Text ParameterDescription
type ParameterSet = Map Text ParameterValue
type Finalizer m = Execution m -> m ()
type Step m a = ErrorT ExecutionError (StateT DynEnv (ReaderT (Backend m, Execution m) m)) a
type DynEnv = Map Text Dynamic
type EnvIO = IO
type PlayerId = Int
type ActionCondition = String
type LabState m a = StateT Labyrinth m a
type PositionMap a = Map Position a
type Connectivity = PositionMap [Position]
type Distribution = PositionMap Double
type Reachability = PositionMap Bool
type LabGen g a = LabState (Rand g) a
type CellPredicate m = Position -> LabState m Bool
type CellPredicateR g = CellPredicate (Rand g)
type ActionState a = LabState (State [ActionResult]) a
type AmmoLocation = Simple Lens Labyrinth Int
type Sym = String
type Expr = GExpr Sym
type Point = (GLfloat, GLfloat)
type OpaqueCallback r = [Opaque] -> r
type OpaqueParser = [String] -> (Maybe Opaque, Int)
type OptionCallback m f = (Monad m, GetOpaqueParsers f, Wrap (m ()) f)
type Signal = CInt
type OutputFilter m = Nick -> [String] -> m [String]
type PackedNick = ByteString
type Callback = IrcMessage -> LB ()
type Modules = LB ()
type PackedNick = ByteString
type OutputFilter m = Nick -> [String] -> m [String]
type Callback = IrcMessage -> LB ()
type Modules = LB ()
type Proxy = Maybe (String, Integer)
type M22F = V2 V2F
type M23F = V3 V2F
type M24F = V4 V2F
type M32F = V2 V3F
type M33F = V3 V3F
type M34F = V4 V3F
type M42F = V2 V4F
type M43F = V3 V4F
type M44F = V4 V4F
type V2F = V2 Float
type V3F = V3 Float
type V4F = V4 Float
type V2I = V2 Int32
type V3I = V3 Int32
type V4I = V4 Int32
type V2U = V2 Word32
type V3U = V3 Word32
type V4U = V4 Word32
type V2B = V2 Bool
type V3B = V3 Bool
type V4B = V4 Bool
type DepthFunction = ComparisonFunction
type ExpId = Int
type GSampler1D t ar = Sampler Tex1D SingleTex t ar
type GSampler2D t ar = Sampler Tex2D SingleTex t ar
type GSampler3D t ar = Sampler Tex3D SingleTex t ar
type GSamplerCube t ar = Sampler Tex2D CubeTex t ar
type GSampler1DArray t ar = Sampler Tex1D ArrayTex t ar
type GSampler2DArray t ar = Sampler Tex2D ArrayTex t ar
type GSampler2DRect t ar = Sampler TexRect SingleTex t ar
type Sampler1DShadow = GSampler1D (Shadow Float) Red
type Sampler2DShadow = GSampler2D (Shadow Float) Red
type SamplerCubeShadow = GSamplerCube (Shadow Float) Red
type Sampler1DArrayShadow = GSampler1DArray (Shadow Float) Red
type Sampler2DArrayShadow = GSampler2DArray (Shadow Float) Red
type Sampler2DRectShadow = GSampler2DRect (Shadow Float) Red
type Sampler1D t ar = GSampler1D (Regular t) ar
type Sampler2D t ar = GSampler2D (Regular t) ar
type Sampler3D t ar = GSampler3D (Regular t) ar
type SamplerCube t ar = GSamplerCube (Regular t) ar
type Sampler1DArray t ar = GSampler1DArray (Regular t) ar
type Sampler2DArray t ar = GSampler2DArray (Regular t) ar
type Sampler2DRect t ar = GSampler2DRect (Regular t) ar
type Sampler2DMS t ar = GSampler2D (MultiSample t) ar
type Sampler2DMSArray t ar = GSampler2DArray (MultiSample t) ar
type SamplerBuffer t ar = GSampler1D (Buffer t) ar
type FrameBuffer layerCount t = FlatTuple NoConstraint (Image layerCount) t
type InterpolatedFlatExp stage a = FlatTuple GPU (Interpolated (Exp stage)) a
type FlatExp stage a = FlatTuple GPU (Exp stage) a
type ImageLoader = String -> ByteString -> IO (Maybe Image)
type FloatType = Float
type FloatType2 = (FloatType, FloatType)
type FloatType3 = (FloatType, FloatType, FloatType)
type FloatType4 = (FloatType, FloatType, FloatType, FloatType)
type RGB = FloatType3
type ColourValue = FloatType4
type VVB = Vector VectorVertexData
type VIB = Vector Int
type ResourcePath = (PathType, String)
type ResourceGroup = (String, [ResourcePath])
type MkSceneObjectAction r vb ib q t p lp e = LCM (World r vb ib q t p lp) e (SceneObject vb ib t lp)
type MkNodeAction r vb ib q t p lp e = LCM (World r vb ib q t p lp) e ((String, String), SceneNode vb ib t lp)
type GLEntity = Entity GLVertexBuffer GLIndexBuffer GLTexture GLLinkedGpuProgram
type GLRenderEntity = RenderEntity GLVertexBuffer GLIndexBuffer GLTexture GLLinkedGpuProgram
type M22F = V2 V2F
type M23F = V3 V2F
type M24F = V4 V2F
type M32F = V2 V3F
type M33F = V3 V3F
type M34F = V4 V3F
type M42F = V2 V4F
type M43F = V3 V4F
type M44F = V4 V4F
type V2F = V2 Float
type V3F = V3 Float
type V4F = V4 Float
type V2I = V2 Int32
type V3I = V3 Int32
type V4I = V4 Int32
type V2U = V2 Word32
type V3U = V3 Word32
type V4U = V4 Word32
type V2B = V2 Bool
type V3B = V3 Bool
type V4B = V4 Bool
type DepthFunction = ComparisonFunction
type InputSetter = Input Setter
type BufferSetter = (Ptr () -> IO ()) -> IO ()
type SetterFun a = a -> IO ()
type Distance = Int
type Progress = Int
type ConvexHull = [Bump]
type Edge = (Line, ConvexHull)
type EdgeInterval = (Edge, Edge)
type SBump = (Progress, Distance)
type Interval = (Rational, Rational)
type LQueue a = ([a], [a])
type Skills = EnumMap Ability Int
type X = Int
type Y = Int
type RadianAngle = Double
type Freqs a = [(GroupName a, Int)]
type Rarity = [(Double, Int)]
type Msg = Text
type ScreenLine = Vector Int32
type SimpleDice = Frequency Int
type Rnd a = State StdGen a
type Chance = Rational
type Corridor = [Point]
type ChanSave a = MVar (Maybe a)
type Frames = [Maybe SingleFrame]
type Caves = IntMap (GroupName CaveKind, Maybe Bool)
type HiCondPoly = [HiSummand]
type HiSummand = (HiPolynomial, [Outcome])
type HiPolynomial = [(HiIndeterminant, Double)]
type DiscoveryKind = EnumMap ItemKindIx (Id ItemKind)
type DiscoveryEffect = EnumMap ItemId ItemAspectEffect
type ItemTimer = [Time]
type ItemQuant = (Int, ItemTimer)
type ItemBag = EnumMap ItemId ItemQuant
type ItemDict = EnumMap ItemId Item
type ItemKnown = (ItemKindIx, ItemAspectEffect)
type SmellTime = Time
type ItemRev = HashMap ItemKnown ItemId
type UniqueSet = EnumSet (Id ItemKind)
type DiscoveryKindRev = EnumMap (Id ItemKind) ItemKindIx
type ItemSeedDict = EnumMap ItemId ItemSeed
type ActorDict = EnumMap ActorId Actor
type FactionDict = EnumMap FactionId Faction
type Dipl = EnumMap FactionId Diplomacy
type ScoreDict = EnumMap (Id ModeKind) ScoreTable
type Dungeon = EnumMap LevelId Level
type ActorPrio = EnumMap Time [ActorId]
type ItemFloor = EnumMap Point ItemBag
type TileMap = Array (Id TileKind)
type SmellMap = EnumMap Point SmellTime
type FactionPers = EnumMap LevelId Perception
type Pers = EnumMap FactionId FactionPers
type TileMapEM = EnumMap Point (Id TileKind)
type ItemSlots = (EnumMap SlotChar ItemId, EnumMap SlotChar ItemId)
type PathEtc = ([Point], (Point, Int))
type LastRecord = ([KM], [KM], Int)
type SlideOrCmd a = Either Slideshow a
type PersLit = EnumMap LevelId (EnumMap FactionId [(Actor, FovCache3)], Array Bool, Array Bool)
type ConnServerDict = EnumMap FactionId ConnServerFaction
type ConnServerFaction = (Maybe (ChanServer ResponseUI RequestUI), ChanServer ResponseAI RequestAI)
type ActivationFunction a = a -> a
type ActivationFunction' a = a -> a
type Connectivity a = Int -> Int -> Matrix a
type RandomTransform a = [a] -> [a]
type CostFunction a = Vector a -> Vector a -> a
type CostFunction' a = Vector a -> Vector a -> Vector a
type TrainingData a = (Vector a, Vector a)
type Selection a = [TrainingData a] -> [[TrainingData a]]
type TrainCompletionPredicate a = Network a -> BackpropTrainer a -> [TrainingData a] -> Int -> Bool
type M = Identity
type Output = Expr
type Result f s = Validation (NonEmpty f) s
type BString = BinString
type HString = BinString
type DefinitiveOID = [DefinitiveOIDComponent]
type ValueSet = ElementSets
type ComponentValueList = [NamedValue]
type OID = [OIDComponent]
type Exclusions = Elements
type TypeConstraints = [NamedConstraint]
type FieldName = [PrimitiveFieldName]
type Expression = Pos BareExpression
type Statement = Pos BareStatement
type LStatement = Pos BareLStatement
type BareLStatement = ([Id], Statement)
type Block = [LStatement]
type Body = ([[IdTypeWhere]], Block)
type BasicBlock = (Id, [Statement])
type BasicBody = ([IdTypeWhere], Map Id [Statement])
type Decl = Pos BareDecl
type Id = String
type IdType = (Id, Type)
type FArg = (Maybe Id, Type)
type ParentEdge = (Bool, Id)
type ParentInfo = Maybe [ParentEdge]
type TypeBinding = Map Id Type
type VarBinding = Map Id BareExpression
type ConstraintSet = ([FDef], [FDef])
type AbstractStore = Map Id ConstraintSet
type Ref = Int
type Store = Map Id Value
type StoreLens = SimpleLens Memory Store
type StackTrace = [StackFrame]
type PosLength = (Position, Int)
type CTranslUnit = CTranslationUnit NodeInfo
type CExtDecl = CExternalDeclaration NodeInfo
type CFunDef = CFunctionDef NodeInfo
type CDecl = CDeclaration NodeInfo
type CStructUnion = CStructureUnion NodeInfo
type CEnum = CEnumeration NodeInfo
type CDeclSpec = CDeclarationSpecifier NodeInfo
type CStorageSpec = CStorageSpecifier NodeInfo
type CTypeSpec = CTypeSpecifier NodeInfo
type CTypeQual = CTypeQualifier NodeInfo
type CAttr = CAttribute NodeInfo
type CDeclr = CDeclarator NodeInfo
type CDerivedDeclr = CDerivedDeclarator NodeInfo
type CArrSize = CArraySize NodeInfo
type CInit = CInitializer NodeInfo
type CInitList = CInitializerList NodeInfo
type CDesignator = CPartDesignator NodeInfo
type CInitializerList a = [([CPartDesignator a], CInitializer a)]
type CStat = CStatement NodeInfo
type CBlockItem = CCompoundBlockItem NodeInfo
type CAsmStmt = CAssemblyStatement NodeInfo
type CAsmOperand = CAssemblyOperand NodeInfo
type CExpr = CExpression NodeInfo
type CBuiltin = CBuiltinThing NodeInfo
type CConst = CConstant NodeInfo
type CStrLit = CStringLiteral NodeInfo
type InputStream = ByteString
type ThreadLocal = Bool
type Register = Bool
type AsmName = CStrLit
type Attributes = [Attr]
type Stmt = CStat
type Expr = CExpr
type Initializer = CInit
type AsmBlock = CStrLit
type IdentEntry = Either TypeDef IdentDecl
type TagEntry = Either TagFwdDecl TagDef
type CString = Ptr CChar
type CStringLen = (Ptr CChar, Int)
type CWString = Ptr CWchar
type CWStringLen = (Ptr CWchar, Int)
type Linkage = StringLit
type AsmLabel = StringLit
type AsmTemplate = StringLit
type AsmClobber = String
type ExtensionsInt = Word32
type AlexPredicate = PState -> AlexInput -> Int -> AlexInput -> Bool
type HappyAny = Any
type DottedName = String
type AssemblyName = DottedName
type TypeName = DottedName
type GenParamName = DottedName
type MethodName = DottedName
type FieldName = DottedName
type ParamName = DottedName
type LocalName = DottedName
type Version = (Int, Int, Int, Int)
type PublicKeyToken = String
type Offset = Int
type Label = String
type PseudoPage = Ident
type Prop = Ident
type Element = String
type Class = String
type Id = String
type AttrIdent = String
type AttrVal = String
type Sel' = [Decl] -> RuleSet
type Parser s a = ParsecT s ParserState Identity a
type ParsedStatement = Statement SourcePos
type ParsedExpression = Expression SourcePos
type StatementParser s = Parser s ParsedStatement
type ExpressionParser s = Parser s ParsedExpression
type LabelSubst = Map (Id ()) (Id ())
type Line = Int
type Column = Int
type Map = HashMap
type Clas = ClasBody Expr
type ClasBody exp = AbsClas (RoutineBody exp) exp
type ClasInterface = AbsClas EmptyBody Expr
type ClasI exp = AbsClas (RoutineBody exp) exp
type RoutineI = AbsRoutine EmptyBody Expr
type RoutineWithBody exp = AbsRoutine (RoutineBody exp) exp
type Routine = RoutineWithBody Expr
type Expr = Pos UnPosExpr
type ClassName = Text
type Stmt = PosAbsStmt Expr
type UnPosStmt = AbsStmt Expr
type PosAbsStmt a = Pos (AbsStmt a)
type SrcSpan = (SrcLoc, SrcLoc)
type Variable = String
type ProgName = String
type Program p = [ProgUnit p]
type Renames = [(Variable, Variable)]
type MeasureUnit = String
type AlexAccPred user = user -> AlexInput -> Int -> AlexInput -> Bool
type Byte = Word8
type AlexInput = (Char, [Byte], String)
type HappyAny = Any
type A0 = ()
type P a = GenParser Char S a
type Trigram = (Char, Char, Char)
type Frequency = Int
type Rank = Int
type Language = String
type ExceptionType = RefType
type Argument = Exp
type Comment = String
type Line = Either Comment Statement
type Document = [Line]
type ParseError = LexError Line
type ParseResult = LexResult Line
type UidMap = ([(String, String)], [String])
type LTok = (LToken, AlexPosn)
type Parser = Parsec [LTok] ()
type Name = String
type CTranslUnit = CTranslationUnit NodeInfo
type CExtDecl = CExternalDeclaration NodeInfo
type CFunDef = CFunctionDef NodeInfo
type CDecl = CDeclaration NodeInfo
type CStructUnion = CStructureUnion NodeInfo
type CEnum = CEnumeration NodeInfo
type ObjCIface = ObjCInterface NodeInfo
type ObjCClassDef = ObjCClassListDef NodeInfo
type ObjCProtoNm = ObjCProtocolName NodeInfo
type ObjCInstanceVarBlock = ObjCInstanceVariableBlock NodeInfo
type ObjCVisSpec = ObjCVisibilitySpec NodeInfo
type ObjCPropDecl = ObjCPropertyDeclaration NodeInfo
type ObjCSel = ObjCSelector NodeInfo
type ObjCMethodSel = ObjCMethodSelector NodeInfo
type ObjCMethodDecl = ObjCMethodDeclaration NodeInfo
type ObjCProtoDec = ObjCProtocolDec NodeInfo
type ObjCProtoDeclBlock = ObjCProtocolDeclBlock NodeInfo
type ObjCCatDec = ObjCCategoryDec NodeInfo
type ObjCImpl = ObjCImplementation NodeInfo
type ObjCCatImpl = ObjCCategoryImplementation NodeInfo
type ObjCMethodDef = ObjCMethodDefinition NodeInfo
type ObjCImplDef = ObjCImplementationDefinition NodeInfo
type CDeclSpec = CDeclarationSpecifier NodeInfo
type CStorageSpec = CStorageSpecifier NodeInfo
type CTypeSpec = CTypeSpecifier NodeInfo
type CTypeQual = CTypeQualifier NodeInfo
type CAttr = CAttribute NodeInfo
type ObjCPropMod = ObjCPropertyModifier NodeInfo
type ObjCProtoQual = ObjCProtoQualifier NodeInfo
type CDeclr = CDeclarator NodeInfo
type CDerivedDeclr = CDerivedDeclarator NodeInfo
type CArrSize = CArraySize NodeInfo
type ObjCClassNm = ObjCClassName NodeInfo
type ObjCClassDeclr = ObjCClassDeclarator NodeInfo
type ObjCIfaceDecl = ObjCInterfaceDeclaration NodeInfo
type ObjCKeyDeclr = ObjCKeywordDeclarator NodeInfo
type CInit = CInitializer NodeInfo
type CInitList = CInitializerList NodeInfo
type CDesignator = CPartDesignator NodeInfo
type CInitializerList a = [([CPartDesignator a], CInitializer a)]
type CStat = CStatement NodeInfo
type CBlockItem = CCompoundBlockItem NodeInfo
type CAsmStmt = CAssemblyStatement NodeInfo
type CAsmOperand = CAssemblyOperand NodeInfo
type CExpr = CExpression NodeInfo
type CBuiltin = CBuiltinThing NodeInfo
type ObjCMsgExpr = ObjCMessageExpression NodeInfo
type ObjCMsgSel = ObjCMessageSelector NodeInfo
type ObjCKeyArg = ObjCKeywordArg NodeInfo
type ObjCSelName = ObjCSelectorName NodeInfo
type ObjCSelKeyName = ObjCSelectorKeyName NodeInfo
type CConst = CConstant NodeInfo
type CStrLit = CStringLiteral NodeInfo
type ObjCConst = ObjCConstant NodeInfo
type InputStream = ByteString
type P a = LP [CExtDecl] a
type ThreadLocal = Bool
type Register = Bool
type AsmName = CStrLit
type Attributes = [Attr]
type Stmt = CStat
type Expr = CExpr
type Initializer = CInit
type AsmBlock = CStrLit
type IdentEntry = Either TypeDef IdentDecl
type TagEntry = Either TagFwdDecl TagDef
type StatsTable = HashMap Text StatsPoint
type Position = SourcePos
type PPosition = Pair Position Position
type Nodename = Text
type Container = HashMap Text
type HieraQueryFunc m = Container Text -> Text -> HieraQueryType -> m (Either PrettyError (Pair InterpreterWriter (Maybe PValue)))
type Scope = Text
type Facts = Container PValue
type InterpreterLog = Pair Priority Doc
type InterpreterWriter = [InterpreterLog]
type InterpreterMonad = ProgramT InterpreterInstr (State InterpreterState)
type EdgeMap = HashMap RIdentifier [LinkInformation]
type NativeTypeValidate = Resource -> Either PrettyError Resource
type FinalCatalog = HashMap RIdentifier Resource
type HieraQueryFunc m = Container Text -> Text -> HieraQueryType -> m (Either PrettyError (Pair InterpreterWriter (Maybe PValue)))
type NativeTypeName = Text
type PSpec = PSpecM ()
type PSpecM = ReaderT TestEnv SpecM
type ModuleSpan = Module SrcSpan
type IdentSpan = Ident SrcSpan
type DottedName annot = [Ident annot]
type DottedNameSpan = DottedName SrcSpan
type StatementSpan = Statement SrcSpan
type Suite annot = [Statement annot]
type SuiteSpan = Suite SrcSpan
type ParameterSpan = Parameter SrcSpan
type ParamTupleSpan = ParamTuple SrcSpan
type DecoratorSpan = Decorator SrcSpan
type AssignOpSpan = AssignOp SrcSpan
type ExprSpan = Expr SrcSpan
type OpSpan = Op SrcSpan
type ArgumentSpan = Argument SrcSpan
type SliceSpan = Slice SrcSpan
type DictMappingPairSpan = DictMappingPair SrcSpan
type YieldArgSpan = YieldArg SrcSpan
type ImportItemSpan = ImportItem SrcSpan
type FromItemSpan = FromItem SrcSpan
type FromItemsSpan = FromItems SrcSpan
type ImportRelativeSpan = ImportRelative SrcSpan
type HandlerSpan = Handler SrcSpan
type ExceptClauseSpan = ExceptClause SrcSpan
type RaiseExprSpan = RaiseExpr SrcSpan
type ComprehensionSpan = Comprehension SrcSpan
type ComprehensionExprSpan = ComprehensionExpr SrcSpan
type CompForSpan = CompFor SrcSpan
type CompIfSpan = CompIf SrcSpan
type CompIterSpan = CompIter SrcSpan
type P a = StateT ParseState (Either ParseError) a
type Word = [Lexeme]
type WildList a = [WildCard a]
type AlterTable = Statement L0 NT NS AlterTable'
type Analyze = Statement L0 NT NS Analyze'
type Attach = Statement L0 NT NS Attach'
type Begin = Statement L0 NT NS Begin'
type Commit = Statement L0 NT NS Commit'
type CreateIndex = Statement L0 NT NS CreateIndex'
type CreateTable = Statement L0 NT NS CreateTable'
type CreateTrigger = Statement L0 NT NS CreateTrigger'
type CreateView = Statement L0 NT NS CreateView'
type CreateVirtualTable = Statement L0 NT NS CreateVirtualTable'
type Delete = Statement L0 T NS Delete'
type DeleteLimited = Statement L0 NT NS DeleteLimited'
type Detach = Statement L0 NT NS Detach'
type DropIndex = Statement L0 NT NS DropIndex'
type DropTable = Statement L0 NT NS DropTable'
type DropTrigger = Statement L0 NT NS DropTrigger'
type DropView = Statement L0 NT NS DropView'
type Explain = Statement L1 NT NS Explain'
type ExplainQueryPlan = Statement L1 NT NS ExplainQueryPlan'
type Insert = Statement L0 T NS Insert'
type Pragma = Statement L0 NT NS Pragma'
type Reindex = Statement L0 NT NS Reindex'
type Release = Statement L0 NT NS Release'
type Rollback = Statement L0 NT NS Rollback'
type Savepoint = Statement L0 NT NS Savepoint'
type Select = Statement L0 T S Select'
type Update = Statement L0 T NS Update'
type UpdateLimited = Statement L0 NT NS UpdateLimited'
type Vacuum = Statement L0 NT NS Vacuum'
type Docstring = Maybe Text
type Word96 = LargeKey Word32 Word64
type Word128 = LargeKey Word64 Word64
type Word160 = LargeKey Word32 Word128
type Word192 = LargeKey Word64 Word128
type Word224 = LargeKey Word32 Word192
type Word256 = LargeKey Word64 Word192
type Runner e r = r -> [FilePath] -> IO e
type RunnerExit r = Runner ExitCode r
type Basis = Array Int [Rational]
type MonadRWS r w s m = (MonadReader r m, MonadWriter w m, MonadState s m)
type FormData = Map Text [Text]
type Context = Map Text Text
type CSVTable = [CSVRow]
type CSVRow = [CSVField]
type CSVResult = [Either [CSVError] [CSVField]]
type CSVTable = [CSVRow]
type CSVRow = [CSVField]
type CSVResult = [Either [CSVError] CSVRow]
type Series a = Int -> Cons a
type Poly = [Double]
type PolySegment = (Double, Poly)
type Spline = [PolySegment]
type SplinePredicate = Double -> Double -> Poly -> Double
type CEvaluateFun a = StablePtr a -> Ptr CDouble -> Ptr CDouble -> CInt -> CDouble -> IO (CDouble)
type CProgressFun a = StablePtr a -> Ptr CDouble -> Ptr CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CInt -> CInt -> CInt -> IO (CInt)
type EvaluateFun a = a -> StorableArray Int CDouble -> StorableArray Int CDouble -> CInt -> CDouble -> IO (CDouble)
type ProgressFun a = a -> StorableArray Int CDouble -> StorableArray Int CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CInt -> CInt -> CInt -> IO (CInt)
type Sampler a = RVarT (State LDA) a
type Doc = (D, Vector (W, Maybe Z))
type D = Int
type W = Int
type Z = Int
type Table2D = IntMap Table1D
type Table1D = IntMap Double
type LDAP = ForeignPtr CLDAP
type LDAPInt = CInt
type BERInt = Int32
type BERTag = Word64
type BERLen = Word64
type AttrList f = [(Attr, f AttrValue)]
type Response = NonEmpty InMessage
type Request = ProtocolClientOp
type AttrValue = ByteString
type AttrValue = ByteString
type AttrList f = [(Attr, f AttrValue)]
type PosTable = [PosOp]
type AttrValue = (Attribute, Value)
type LDIFCache = Map DN LDIFRecord
type Prob = Ratio Integer
type Displacement = Vec
type ScalarField = Position -> Double
type VectorField = Position -> Vec
type Field v = Position -> v
type CoordinateSystem = (Double, Double, Double) -> Position
type Current = Double
type Time p = Scalar (Diff p)
type DifferentialEquation state = state -> Diff state
type InitialValueProblem state = (DifferentialEquation state, state)
type EvolutionMethod state = DifferentialEquation state -> Time state -> state -> state
type SolutionMethod state = InitialValueProblem state -> [state]
type TheTime = Double
type TimeStep = Double
type Velocity = Vec
type SimpleState = (TheTime, Position, Velocity)
type SimpleAccelerationFunction = SimpleState -> Vec
type OneParticleSystemState = (TheTime, St)
type OneParticleAccelerationFunction = OneParticleSystemState -> Vec
type TwoParticleSystemState = (TheTime, St, St)
type TwoParticleAccelerationFunction = TwoParticleSystemState -> (Vec, Vec)
type ManyParticleSystemState = (TheTime, [St])
type ManyParticleAccelerationFunction = ManyParticleSystemState -> [Vec]
type Charge = Double
type TheTime = Double
type TimeStep = Double
type Velocity = Vec
type SimpleState = (TheTime, Position, Velocity)
type SimpleAccelerationFunction = SimpleState -> Vec
type OneParticleSystemState = (TheTime, St)
type OneParticleAccelerationFunction = OneParticleSystemState -> Vec
type TwoParticleSystemState = (TheTime, St, St)
type TwoParticleAccelerationFunction = TwoParticleSystemState -> (Vec, Vec)
type ManyParticleSystemState = (TheTime, [St])
type ManyParticleAccelerationFunction = ManyParticleSystemState -> [Vec]
type Charge = Double
type Current = Double
type Displacement = Vec
type ScalarField = Position -> Double
type VectorField = Position -> Vec
type Field v = Position -> v
type CoordinateSystem = (Double, Double, Double) -> Position
type Time p = Scalar (Diff p)
type DifferentialEquation state = state -> Diff state
type InitialValueProblem state = (DifferentialEquation state, state)
type EvolutionMethod state = DifferentialEquation state -> Time state -> state -> state
type SolutionMethod state = InitialValueProblem state -> [state]
type LogLikelihood = Double
type LogLikelihood = Double
type IDERef = IORef IDE
type IDEM = ReaderT IDERef IO
type IDEEventM t = ReaderT IDERef (ReaderT (Ptr t) IO)
type IDEAction = IDEM ()
type WorkspaceM = ReaderT Workspace IDEM
type WorkspaceAction = WorkspaceM ()
type PackageM = ReaderT IDEPackage WorkspaceM
type PackageAction = PackageM ()
type DebugM = ReaderT (IDEPackage, ToolState) IDEM
type DebugAction = DebugM ()
type VCSConf = (VCSType, Config, Maybe MergeTool)
type ActionString = Text
type KeyString = Text
type CandyTableForth = [(Bool, Text, Text)]
type CandyTableBack = [(Text, Text, Int)]
type SpecialKeyTable alpha = Map (KeyVal, [Modifier]) (Map (KeyVal, [Modifier]) (ActionDescr alpha))
type SpecialKeyCons alpha = Maybe (Map (KeyVal, [Modifier]) (ActionDescr alpha), Text)
type PackageDescrCache = Map PackageIdentifier ModuleDescrCache
type ModuleDescrCache = Map ModuleName (UTCTime, Maybe FilePath, ModuleDescr)
type GUIHistory = (GUIHistory', GUIHistory')
type ServerRoutine = (Handle, HostName, PortNumber) -> IO ()
type Money = Double
type Money = Double
type Market' a = Market a a
type Context' a = Context a a
type Pretext' p a = Pretext p a a
type PretextT' p g a = PretextT p g a a
type Bazaar' p a = Bazaar p a a
type BazaarT' p g a = BazaarT p g a a
type Bazaar1' p a = Bazaar1 p a a
type BazaarT1' p g a = BazaarT1 p g a a
type Equality s t a b = forall p (f :: * -> *). p a (f b) -> p s (f t)
type Equality' s a = Equality s s a a
type As a = Equality' a a
type Iso s t a b = forall p f. (Profunctor p, Functor f) => p a (f b) -> p s (f t)
type Iso' s a = Iso s s a a
type Prism s t a b = forall p f. (Choice p, Applicative f) => p a (f b) -> p s (f t)
type Prism' s a = Prism s s a a
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s a = Lens s s a a
type Traversal s t a b = forall f. Applicative f => (a -> f b) -> s -> f t
type Traversal' s a = Traversal s s a a
type Traversal1 s t a b = forall f. Apply f => (a -> f b) -> s -> f t
type Traversal1' s a = Traversal1 s s a a
type Setter s t a b = forall f. Settable f => (a -> f b) -> s -> f t
type Setter' s a = Setter s s a a
type Getter s a = forall f. (Contravariant f, Functor f) => (a -> f a) -> s -> f s
type Fold s a = forall f. (Contravariant f, Applicative f) => (a -> f a) -> s -> f s
type Fold1 s a = forall f. (Contravariant f, Apply f) => (a -> f a) -> s -> f s
type IndexedLens i s t a b = forall f p. (Indexable i p, Functor f) => p a (f b) -> s -> f t
type IndexedLens' i s a = IndexedLens i s s a a
type IndexedTraversal i s t a b = forall p f. (Indexable i p, Applicative f) => p a (f b) -> s -> f t
type IndexedTraversal' i s a = IndexedTraversal i s s a a
type IndexedTraversal1 i s t a b = forall p f. (Indexable i p, Apply f) => p a (f b) -> s -> f t
type IndexedTraversal1' i s a = IndexedTraversal1 i s s a a
type IndexedSetter i s t a b = forall f p. (Indexable i p, Settable f) => p a (f b) -> s -> f t
type IndexedSetter' i s a = IndexedSetter i s s a a
type IndexedGetter i s a = forall p f. (Indexable i p, Contravariant f, Functor f) => p a (f a) -> s -> f s
type IndexedFold i s a = forall p f. (Indexable i p, Contravariant f, Applicative f) => p a (f a) -> s -> f s
type IndexedFold1 i s a = forall p f. (Indexable i p, Contravariant f, Apply f) => p a (f a) -> s -> f s
type IndexPreservingLens s t a b = forall p f. (Conjoined p, Functor f) => p a (f b) -> p s (f t)
type IndexPreservingLens' s a = IndexPreservingLens s s a a
type IndexPreservingTraversal s t a b = forall p f. (Conjoined p, Applicative f) => p a (f b) -> p s (f t)
type IndexPreservingTraversal' s a = IndexPreservingTraversal s s a a
type IndexPreservingTraversal1 s t a b = forall p f. (Conjoined p, Apply f) => p a (f b) -> p s (f t)
type IndexPreservingTraversal1' s a = IndexPreservingTraversal1 s s a a
type IndexPreservingSetter s t a b = forall p f. (Conjoined p, Settable f) => p a (f b) -> p s (f t)
type IndexPreservingSetter' s a = IndexPreservingSetter s s a a
type IndexPreservingGetter s a = forall p f. (Conjoined p, Contravariant f, Functor f) => p a (f a) -> p s (f s)
type IndexPreservingFold s a = forall p f. (Conjoined p, Contravariant f, Applicative f) => p a (f a) -> p s (f s)
type IndexPreservingFold1 s a = forall p f. (Conjoined p, Contravariant f, Apply f) => p a (f a) -> p s (f s)
type Simple f s a = f s s a a
type LensLike f s t a b = (a -> f b) -> s -> f t
type LensLike' f s a = LensLike f s s a a
type Over p f s t a b = p a (f b) -> s -> f t
type Over' p f s a = Over p f s s a a
type IndexedLensLike i f s t a b = forall p. Indexable i p => p a (f b) -> s -> f t
type IndexedLensLike' i f s a = IndexedLensLike i f s s a a
type Optical p q f s t a b = p a (f b) -> q s (f t)
type Optical' p q f s a = Optical p q f s s a a
type Optic p f s t a b = p a (f b) -> p s (f t)
type Optic' p f s a = Optic p f s s a a
type Setter s t a b = forall f. Settable f => (a -> f b) -> s -> f t
type Setter' s a = Setter s s a a
type IndexedSetter i s t a b = forall f p. (Indexable i p, Settable f) => p a (f b) -> s -> f t
type IndexedSetter' i s a = IndexedSetter i s s a a
type ASetter s t a b = (a -> Identity b) -> s -> Identity t
type ASetter' s a = ASetter s s a a
type AnIndexedSetter i s t a b = Indexed i a (Identity b) -> s -> Identity t
type AnIndexedSetter' i s a = AnIndexedSetter i s s a a
type Setting p s t a b = p a (Identity b) -> s -> Identity t
type Setting' p s a = Setting p s s a a
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s a = Lens s s a a
type IndexedLens i s t a b = forall f p. (Indexable i p, Functor f) => p a (f b) -> s -> f t
type IndexedLens' i s a = IndexedLens i s s a a
type ALens s t a b = LensLike (Pretext (->) a b) s t a b
type ALens' s a = ALens s s a a
type AnIndexedLens i s t a b = Optical (Indexed i) (->) (Pretext (Indexed i) a b) s t a b
type AnIndexedLens' i s a = AnIndexedLens i s s a a
type Context' a = Context a a
type Getter s a = forall f. (Contravariant f, Functor f) => (a -> f a) -> s -> f s
type IndexedGetter i s a = forall p f. (Indexable i p, Contravariant f, Functor f) => p a (f a) -> s -> f s
type Getting r s a = (a -> Const r a) -> s -> Const r s
type IndexedGetting i m s a = Indexed i a (Const m a) -> s -> Const m s
type Accessing p m s a = p a (Const m a) -> s -> Const m s
type Review t b = forall p f. (Choice p, Bifunctor p, Settable f) => Optic' p f t b
type AReview t b = Optic' Tagged Identity t b
type Prism s t a b = forall p f. (Choice p, Applicative f) => p a (f b) -> p s (f t)
type Prism' s a = Prism s s a a
type APrism s t a b = Market a b a (Identity b) -> Market a b s (Identity t)
type APrism' s a = APrism s s a a
type Fold s a = forall f. (Contravariant f, Applicative f) => (a -> f a) -> s -> f s
type IndexedFold i s a = forall p f. (Indexable i p, Contravariant f, Applicative f) => p a (f a) -> s -> f s
type Traversal s t a b = forall f. Applicative f => (a -> f b) -> s -> f t
type Traversal' s a = Traversal s s a a
type Traversal1 s t a b = forall f. Apply f => (a -> f b) -> s -> f t
type Traversal1' s a = Traversal1 s s a a
type IndexedTraversal i s t a b = forall p f. (Indexable i p, Applicative f) => p a (f b) -> s -> f t
type IndexedTraversal' i s a = IndexedTraversal i s s a a
type IndexedTraversal1 i s t a b = forall p f. (Indexable i p, Apply f) => p a (f b) -> s -> f t
type IndexedTraversal1' i s a = IndexedTraversal1 i s s a a
type ATraversal s t a b = LensLike (Bazaar (->) a b) s t a b
type ATraversal' s a = ATraversal s s a a
type ATraversal1 s t a b = LensLike (Bazaar1 (->) a b) s t a b
type ATraversal1' s a = ATraversal1 s s a a
type AnIndexedTraversal i s t a b = Over (Indexed i) (Bazaar (Indexed i) a b) s t a b
type AnIndexedTraversal' i s a = AnIndexedTraversal i s s a a
type AnIndexedTraversal1 i s t a b = Over (Indexed i) (Bazaar1 (Indexed i) a b) s t a b
type AnIndexedTraversal1' i s a = AnIndexedTraversal1 i s s a a
type Traversing p f s t a b = Over p (BazaarT p f a b) s t a b
type Traversing' p f s a = Traversing p f s s a a
type Traversing1 p f s t a b = Over p (BazaarT1 p f a b) s t a b
type Traversing1' p f s a = Traversing1 p f s s a a
type Bazaar' p a = Bazaar p a a
type Bazaar1' p a = Bazaar1 p a a
type ReifiedLens' s a = ReifiedLens s s a a
type ReifiedIndexedLens' i s a = ReifiedIndexedLens i s s a a
type ReifiedIndexedTraversal' i s a = ReifiedIndexedTraversal i s s a a
type ReifiedTraversal' s a = ReifiedTraversal s s a a
type ReifiedSetter' s a = ReifiedSetter s s a a
type ReifiedIndexedSetter' i s a = ReifiedIndexedSetter i s s a a
type ReifiedIso' s a = ReifiedIso s s a a
type ReifiedPrism' s a = ReifiedPrism s s a a
type Equality s t a b = forall p (f :: * -> *). p a (f b) -> p s (f t)
type Equality' s a = Equality s s a a
type AnEquality s t a b = Identical a (Identity b) a (Identity b) -> Identical a (Identity b) s (Identity t)
type AnEquality' s a = AnEquality s s a a
type Iso s t a b = forall p f. (Profunctor p, Functor f) => p a (f b) -> p s (f t)
type Iso' s a = Iso s s a a
type AnIso s t a b = Exchange a b a (Identity b) -> Exchange a b s (Identity t)
type AnIso' s a = AnIso s s a a
type Action m s a = forall f r. Effective m r f => (a -> f a) -> s -> f s
type MonadicFold m s a = forall f r. (Effective m r f, Applicative f) => (a -> f a) -> s -> f s
type RelevantMonadicFold m s a = forall f r. (Effective m r f, Apply f) => (a -> f a) -> s -> f s
type IndexedAction i m s a = forall p f r. (Indexable i p, Effective m r f) => p a (f a) -> s -> f s
type IndexedMonadicFold i m s a = forall p f r. (Indexable i p, Effective m r f, Applicative f) => p a (f a) -> s -> f s
type IndexedRelevantMonadicFold i m s a = forall p f r. (Indexable i p, Effective m r f, Apply f) => p a (f a) -> s -> f s
type IndexPreservingAction m s a = forall p f r. (Conjoined p, Effective m r f) => p a (f a) -> p s (f s)
type IndexPreservingMonadicFold m s a = forall p f r. (Conjoined p, Effective m r f, Applicative f) => p a (f a) -> p s (f s)
type IndexPreservingRelevantMonadicFold m s a = forall p f r. (Conjoined p, Effective m r f, Apply f) => p a (f a) -> p s (f s)
type Action m s a = forall f r. Effective m r f => (a -> f a) -> s -> f s
type IndexedAction i m s a = forall p f r. (Indexable i p, Effective m r f) => p a (f a) -> s -> f s
type MonadicFold m s a = forall f r. (Effective m r f, Applicative f) => (a -> f a) -> s -> f s
type IndexedMonadicFold i m s a = forall p f r. (Indexable i p, Effective m r f, Applicative f) => p a (f a) -> s -> f s
type Acting m r s a = LensLike (Effect m r) s s a a
type IndexedActing i m r s a = Over (Indexed i) (Effect m r) s s a a
type Lens a a' b b' = forall f. Functor f => LensLike f a a' b b'
type Lens' a b = forall f. Functor f => LensLike' f a b
type Traversal a a' b b' = forall f. Applicative f => LensLike f a a' b b'
type Traversal' a b = forall f. Applicative f => LensLike' f a b
type Setter a a' b b' = forall f. Identical f => LensLike f a a' b b'
type Setter' a b = forall f. Identical f => LensLike' f a b
type LensLike (f :: * -> *) a a' b b' = (b -> f b') -> a -> f a'
type LensLike' (f :: * -> *) a b = (b -> f b) -> a -> f a
type Lens a a' b b' = forall f. Functor f => LensLike f a a' b b'
type Lens' a b = forall f. Functor f => LensLike' f a b
type Traversal a a' b b' = forall f. Applicative f => LensLike f a a' b b'
type Traversal' a b = forall f. Applicative f => LensLike' f a b
type Setter a a' b b' = forall f. Identical f => LensLike f a a' b b'
type Setter' a b = forall f. Identical f => LensLike' f a b
type Getter a a' b b' = forall f. Phantom f => LensLike f a a' b b'
type Getter' a b = forall f. Phantom f => LensLike' f a b
type Fold a a' b b' = forall f. (Phantom f, Applicative f) => LensLike f a a' b b'
type Fold' a b = forall f. (Phantom f, Applicative f) => LensLike' f a b
type LensLike (f :: * -> *) a a' b b' = (b -> f b') -> a -> f a'
type LensLike' (f :: * -> *) a b = (b -> f b) -> a -> f a
type FoldLike r a a' b b' = LensLike (Constant r) a a' b b'
type FoldLike' r a b = LensLike' (Constant r) a b
type Lens a a' b b' = forall f. Functor f => LensLike f a a' b b'
type Lens' a b = forall f. Functor f => LensLike' f a b
type Traversal a a' b b' = forall f. Applicative f => LensLike f a a' b b'
type Traversal' a b = forall f. Applicative f => LensLike' f a b
type Setter a a' b b' = forall f. Identical f => LensLike f a a' b b'
type LensLike (f :: * -> *) a a' b b' = (b -> f b') -> a -> f a'
type LensLike' (f :: * -> *) a b = (b -> f b) -> a -> f a
type LensLike (f :: * -> *) a a' b b' = (b -> f b') -> a -> f a'
type LensLike' (f :: * -> *) a b = (b -> f b) -> a -> f a
type FoldLike r a a' b b' = LensLike (Constant r) a a' b b'
type Setter a a' b b' = forall f. Identical f => LensLike f a a' b b'
type Setter' a b = forall f. Identical f => LensLike' f a b
type Writer w = WriterT w Identity
type LensLike (f :: * -> *) a a' b b' = (b -> f b') -> a -> f a'
type LensLike' (f :: * -> *) a b = (b -> f b) -> a -> f a
type FoldLike r a a' b b' = LensLike (Constant r) a a' b b'
type Setter a a' b b' = forall f. Identical f => LensLike f a a' b b'
type Setter' a b = forall f. Identical f => LensLike' f a b
type Writer w = WriterT w Identity
type LensLike f a a' b b' = (b -> f b') -> (a -> f a')
type LensLike' f a b = (b -> f b) -> (a -> f a)
type LensLike f a a' b b' = (b -> f b') -> (a -> f a')
type LensLike' f a b = (b -> f b) -> (a -> f a)
type FoldLike r a a' b b' = LensLike (Constant r) a a' b b'
type FoldLike' r a b = LensLike' (Constant r) a b
type ASetter a a' b b' = LensLike Identity a a' b b'
type ASetter' a b = LensLike' Identity a b
type ALens a a' b b' = LensLike (IStore b b') a a' b b'
type ALens' a b = LensLike' (IStore b b) a b
type ATraversal a a' b b' = LensLike (IKleeneStore b b') a a' b b'
type ATraversal' a b = LensLike' (IKleeneStore b b) a b
type AGetter a a' b b' = FoldLike b a a' b b'
type AGetter' a b = FoldLike' b a b
type AFold a a' b b' = FoldLike [b] a a' b b'
type AFold' a b = FoldLike' [b] a b
type LensLike f a a' b b' = (b -> f b') -> (a -> f a')
type LensLike' f a b = (b -> f b) -> (a -> f a)
type FoldLike r a a' b b' = LensLike (Constant r) a a' b b'
type FoldLike' r a b = LensLike' (Constant r) a b
type ASetter a a' b b' = LensLike Identity a a' b b'
type LensLike f a a' b b' = (b -> f b') -> (a -> f a')
type LensLike' f a b = (b -> f b) -> (a -> f a)
type LensLike f a a' b b' = (b -> f b') -> (a -> f a')
type LensLike' f a b = (b -> f b) -> (a -> f a)
type FoldLike r a a' b b' = LensLike (Constant r) a a' b b'
type ASetter a a' b b' = LensLike Identity a a' b b'
type ASetter' a b = LensLike' Identity a b
type Writer w = WriterT w Identity
type LensLike f a a' b b' = (b -> f b') -> (a -> f a')
type LensLike' f a b = (b -> f b) -> (a -> f a)
type FoldLike r a a' b b' = LensLike (Constant r) a a' b b'
type ASetter a a' b b' = LensLike Identity a a' b b'
type ASetter' a b = LensLike' Identity a b
type Writer w = WriterT w Identity
type LensTypeInfo = (Name, [TyVarBndr])
type ConstructorFieldInfo = (Name, Strict, Type)
type LensName = String
type Path = [String]
type RefSimple r a = RefReaderSimple r (r a)
type RefWriterSimple m = RefWriterOf (RefReaderSimple m)
type Ref m a = RefSimple (BaseRef m) a
type RefReader m = RefReaderSimple (BaseRef m)
type RefWriter m = RefWriterSimple (BaseRef m)
type EqRefSimple r a = RefReaderSimple r (EqRefCore r a)
type EqRef m a = EqRefSimple (BaseRef m) a
type RefWriterT w m = ReaderT (Ref m w) m
type SRef m a = Morph (StateT a m) m
type Register m = Reg (Wrap m)
type LevelDBPtr = Ptr LevelDB
type CachePtr = Ptr LCache
type ComparatorPtr = Ptr LComparator
type IteratorPtr = Ptr LIterator
type LoggerPtr = Ptr LLogger
type OptionsPtr = Ptr LOptions
type ReadOptionsPtr = Ptr LReadOptions
type SnapshotPtr = Ptr LSnapshot
type WriteBatchPtr = Ptr LWriteBatch
type WriteOptionsPtr = Ptr LWriteOptions
type FilterPolicyPtr = Ptr LFilterPolicy
type DBName = CString
type ErrPtr = Ptr CString
type Key = CString
type Val = CString
type StatePtr = Ptr ()
type Destructor = StatePtr -> ()
type CompareFun = StatePtr -> CString -> CSize -> CString -> CSize -> IO CInt
type NameFun = StatePtr -> CString
type CreateFilterFun = StatePtr -> Ptr CString -> Ptr CSize -> CInt -> Ptr CSize -> IO CString
type KeyMayMatchFun = StatePtr -> CString -> CSize -> CString -> CSize -> IO CUChar
type WriteBatch = [BatchOp]
type WriteBatch = [BatchOp]
type Range = (ByteString, ByteString)
type Key = ByteString
type Value = ByteString
type Entry = (Key, Value)
type WriteBatch = [BatchOp]
type Range = (ByteString, ByteString)
type LevelDBPtr = Ptr LevelDB
type CachePtr = Ptr LCache
type ComparatorPtr = Ptr LComparator
type IteratorPtr = Ptr LIterator
type LoggerPtr = Ptr LLogger
type OptionsPtr = Ptr LOptions
type ReadOptionsPtr = Ptr LReadOptions
type SnapshotPtr = Ptr LSnapshot
type WriteBatchPtr = Ptr LWriteBatch
type WriteOptionsPtr = Ptr LWriteOptions
type FilterPolicyPtr = Ptr LFilterPolicy
type DBName = CString
type ErrPtr = Ptr CString
type Key = CString
type Val = CString
type StatePtr = Ptr ()
type Destructor = StatePtr -> ()
type CompareFun = StatePtr -> CString -> CSize -> CString -> CSize -> IO CInt
type NameFun = StatePtr -> CString
type CreateFilterFun = StatePtr -> Ptr CString -> Ptr CSize -> CInt -> Ptr CSize -> IO CString
type KeyMayMatchFun = StatePtr -> CString -> CSize -> CString -> CSize -> IO CUChar
type WriteBatch = [BatchOp]
type WriteBatch = [BatchOp]
type Range = (ByteString, ByteString)
type WriteBatch = [BatchOp]
type Range = (ByteString, ByteString)
type Params r = Vector r
type Samples r = Vector r
type Model r = Params r -> Samples r
type Jacobian r = Params r -> Matrix r
type LinearConstraints r = (Matrix r, Vector r)
type Morph m n = forall a. m a -> n a
type ReadRefMonad m = ReadPart (RefMonad m)
type ReadRef m = ReadRefMonad (Ref m)
type WriteRef m = RefMonad (Ref m)
type Widget m = Widget (EffectM m) m
type Set a = [a]
type ErrorMessages = [ErrorMessage]
type PartialFunction a b = [(a, b)]
type Map k v = PartialFunction k v
type Relation k v = Map k v
type EventSet = Set Event
type SymbolTable = PartialFunction Name TypeScheme
type PSymbolTable = IORef SymbolTable
type PType = IORef (Maybe Type)
type AnModule id = Annotated () (Module id)
type AnDecl id = Annotated (Maybe SymbolTable, PSymbolTable) (Decl id)
type AnMatch id = Annotated () (Match id)
type AnPat id = Annotated () (Pat id)
type AnExp id = Annotated (Maybe Type, PType) (Exp id)
type AnField id = Annotated () (Field id)
type AnStmt id = Annotated () (Stmt id)
type AnDataTypeClause id = Annotated () (DataTypeClause id)
type AnAssertion id = Annotated () (Assertion id)
type AnInteractiveStmt id = Annotated () (InteractiveStmt id)
type PModule = AnModule UnRenamedName
type PDecl = AnDecl UnRenamedName
type PMatch = AnMatch UnRenamedName
type PPat = AnPat UnRenamedName
type PExp = AnExp UnRenamedName
type PField = AnField UnRenamedName
type PStmt = AnStmt UnRenamedName
type PDataTypeClause = AnDataTypeClause UnRenamedName
type PAssertion = AnAssertion UnRenamedName
type PInteractiveStmt = AnInteractiveStmt UnRenamedName
type TCModule = AnModule Name
type TCDecl = AnDecl Name
type TCMatch = AnMatch Name
type TCPat = AnPat Name
type TCExp = AnExp Name
type TCField = AnField Name
type TCStmt = AnStmt Name
type TCDataTypeClause = AnDataTypeClause Name
type TCAssertion = AnAssertion Name
type TCInteractiveStmt = AnInteractiveStmt Name
type LToken = Located Token
type ParseMonad = StateT ParserState IO
type AlexAccPred user = user -> AlexInput -> Int -> AlexInput -> Bool
type AlexInput = ParserState
type Environment = Map Name Value
type EvaluationMonad = LazyEvalMonad EvaluationState
type RenamerMonad = StateT RenamerState IO
type EvaluationMonad = LazyEvalMonad EvaluationState
type ParseMonad = StateT ParserState IO
type Environment = Map Name SymbolInformation
type Error = Doc
type Warning = Doc
type TypeCheckMonad = StateT TypeInferenceState IO
type ErrorContext = Doc
type TypeCheckMonad = StateT TypeInferenceState IO
type CSPM = StateT CSPMSession IO
type C_ffi_status = Word32
type C_ffi_abi = Word32
type GitFailure = (Int, String, String, String, [String])
type ID = String
type CommitID = ID
type BlobID = ID
type TreeID = ID
type TagID = ID
type Perms = (Int, Int, Int, Int, Int, Int)
type Treeent = [(Perms, Object, FilePath)]
type LineBuf = [String]
type Indentation = Int
type ClientTTree = TTree LineBuf (RealSrcSpan, Int) BufSpan
type FunBindInfo = SearchedTokenInfo (LHsBindLR Name Name, Maybe (LSig Name))
type InternalTTree = TTree LineBuf RealSrcSpan InsertionInfo
type LineBuf = [String]
type Jenkins = JenkinsT IO
type Response = Either MPDError
type Host = String
type Port = Integer
type Password = String
type ChannelName = String
type MessageText = String
type Response = Either MPDError
type Host = String
type Port = Integer
type Password = String
type Artist = Value
type Album = Value
type Title = Value
type Seconds = Integer
type Decibels = Integer
type Position = Int
type ChannelName = String
type MessageText = String
type Category = String
type Title = String
type Body = String
type Icon = String
type SIO s = IORT s IO
type P1World = (Int, Int)
type P2World = (Int, Int, Int)
type VarName = String
type Varname = String
type Arr exp a b = exp a -> exp b
type VarCounter = Int
type Arr exp a b = exp a -> exp b
type TVarName = Int
type VarName = String
type TEnv = [(VarName, Typ)]
type TVEM a = TVE -> (a, TVE)
type TVarName = Int
type VarName = String
type TEnv = [(VarName, Typ)]
type TVarName = Int
type VarName = String
type TEnv = [(VarName, Typ)]
type TVarName = Int
type VarName = String
type TEnv = [(VarName, TypS)]
type TVEM = State TVE
type TVarName = Int
type VarName = String
type TEnv = [(VarName, TVEM Typ)]
type TVEM = State TVE
type VarName = String
type TEnv = [(VarName, Typ)]
type TermIndex = [Int]
type Typs = Map TermIndex Typ
type VarName = String
type TEnv = [(VarName, Typ)]
type VarCount = Int
type VarName = String
type Env = [(VarName, Value)]
type VStack = [Int]
type LogicVar term = (Int, VStack)
type Subst term = Map (LogicVar term) term
type Testb x = (E ((F FAnd :< (F FNot :< x)) :< (F FNot :< (F FNot :< x))) r) => r
type FSum = Rec (F FSum')
type N0 = Zero
type N1 = Su N0
type N2 = Su N1
type N3 = Su N2
type Fib = Rec (F Fib')
type Test_skk x = (E (((F CombS :< F CombK) :< F CombK) :< x) r) => r
type CombZ = F CombS :< F CombK
type CombSu = F CombS :< ((F CombS :< (F CombK :< F CombS)) :< F CombK)
type CombTwo = CombSu :< (CombSu :< CombZ)
type Prop = Rec (F Prop')
type Prop2 = (E (F Prop :< N2) r) => r
type PropN' n = (E (((F Ntimes :< (F (ATC1 ((->) Bool)))) :< Bool) :< n) r) => r
type SPropN' n = (E (((F Ntimes :< (F (ATC2 (->)) :< Bool)) :< Bool) :< (F Fib :< n)) r) => r
type SSPropN' n = (E (((F Ntimes :< ((F Flip :< (F (ATC2 (->)))) :< Bool)) :< Bool) :< (F Fib :< n)) r) => r
type TreeDN v l n = (E (((F Ntimes :< (F (ATC1 (Node v)))) :< l) :< n) r) => r
type SK = (String -> String) -> String
type State = [Entity]
type QNP = S :/ (NP :\\ S)
type Stream = StreamG Char
type Iteratee m a = IterateeG Char m a
type IterateeM m a = IterateeGM Char m a
type EnumeratorN el_outer el_inner m a = IterateeG el_inner m a -> IterateeGM el_outer m (IterateeG el_inner m a)
type Line = String
type EnumeratorGM el m a = IterateeG el m a -> IterateeGM el m a
type EnumeratorM m a = EnumeratorGM Char m a
type EnumeratorGMM elfrom elto m a = IterateeG elto m a -> IterateeGM elfrom m a
type TIFFDict = IntMap TIFFDE
type SubCont p m a b = CC p m a -> CC p m b
type CCT p m a w = SubCont p m a w -> CC p m w
type Prompt p m w = (forall x. CCT p m x w -> p m x, forall x. p m x -> Maybe (CCT p m x w))
type SubCont p m a b = CC p m a -> CC p m b
type CCT p m a w = SubCont p m a w -> CC p m w
type Prompt p m w = (forall x. CCT p m x w -> p m x, forall x. p m x -> Maybe (CCT p m x w))
type Label = Int
type P m a = PS (Res m a)
type Label = Int
type Fractionals = Float :*: (Double :*: HNil)
type Nums = Int :*: (Integer :*: (AllOf Fractionals :*: HNil))
type Ords = Bool :*: (Char :*: (AllOf Nums :*: HNil))
type Eqs = AllOf (TypeCl OpenEqs) :*: (AllOfBut Ords Fractionals :*: HNil)
type Russel = AllOfBut () (TypeCl RusselC) :*: HNil
type Tag = String
type Action = Value
type Env v = V -> v
type Proc = Value -> Comp
type Var = V
type Sto = (Int, Loc -> Value)
type QCode a = Q (Code a)
type Ref = Int
type Oid = CUInt
type Gauge = Measurement
type Counter = Measurement
type CStringCLen i = (CString, i)
type Size = CULong
type SSize = CLong
type Request a n r = Dual (Endo (R a n r))
type JournalFields = HashMap JournalField ByteString
type JournalEntryCursor = ByteString
type TagFile = ForeignPtr Void
type Tag = TagPtr
type AudioProperties = AudioPropertiesPtr
type DomainID = CInt
type Zip = Ptr C'zip
type ZipFile = Ptr C'zip_file
type ZipSource = Ptr C'zip_source
type Archive a = StateT Zip IO a
type Entry a = StateT (ZipFile, Integer, [FileFlag]) (StateT Zip IO) a
type Forall (p :: * -> Constraint) = (p A, p B)
type Result a = Either SomeException a
type Accidental = Int
type Octaves = Int
type Accidental = Int
type Octaves = Int
type B rep v = (Maybe rep, v, Maybe rep)
type LinFunction a = [a]
type Values a = [a]
type RawVector a = [a]
type RawMatrix a = [[a]]
type MatrixList a = [Matrix a]
type RawMatrixList a = [[[a]]]
type M = IO
type Obj = Int
type M22 a = V2 (V2 a)
type M23 a = V2 (V3 a)
type M24 a = V2 (V4 a)
type M32 a = V3 (V2 a)
type M33 a = V3 (V3 a)
type M34 a = V3 (V4 a)
type M42 a = V4 (V2 a)
type M43 a = V4 (V3 a)
type M44 a = V4 (V4 a)
type I0 = Zero
type I1 = Succ I0
type I2 = Succ I1
type I3 = Succ I2
type I4 = Succ I3
type I5 = Succ I4
type I6 = Succ I5
type I7 = Succ I6
type I8 = Succ I7
type I9 = Succ I8
type I10 = Succ I9
type I11 = Succ I10
type I12 = Succ I11
type I13 = Succ I12
type I14 = Succ I13
type I15 = Succ I14
type I16 = Succ I15
type I17 = Succ I16
type I18 = Succ I17
type I19 = Succ I18
type I20 = Succ I19
type I21 = Succ I20
type I22 = Succ I21
type I23 = Succ I22
type I24 = Succ I23
type I25 = Succ I24
type I26 = Succ I25
type I27 = Succ I26
type I28 = Succ I27
type I29 = Succ I28
type I30 = Succ I29
type I31 = Succ I30
type I32 = Succ I31
type Map i k a = Maplike (M i) k a
type Set i k = Maplike (S Zero i) k ()
type ICC i k a = Maps i k -> (forall b. Map Zero k b) -> [Id k] -> a
type ICCS i k a = Maps i k -> Sets I32 k -> [Id k] -> a
type Children a = a -> [a]
type VarId = Int
type PhysReg = Int
type Env = Tardis (Map PhysReg VarId) ([Int], SpillStack)
type Labels = Map String Label
type Asm = StateT Labels SimpleUniqueMonad
type Nodes n a = Free ((,) (n O O)) a
type BodyNode n = Nodes n ()
type EndNode n = Nodes n (Asm (n O C))
type Program n = FreeT ((,) (ProgramF n)) Asm ()
type Key = String
type Value = String
type Options = String
type RunInstall = Module -> String -> IO ()
type PrintAction = Module -> Bool -> Options -> IO ()
type Symbol = String
type CRC = Word64
type Name = String
type Address = Word64
type DriverData = ByteString
type TypeMap = Map EventID TypeInfo
type Name = String
type Value = ByteString
type HostName = String
type LIORef l a = LObj l (IORef a)
type LMVar l a = LObj l (MVar a)
type LChan l a = LObj l (Chan a)
type DC = LIO DCLabel
type DCPriv = Priv CNF
type DCLabeled = Labeled DCLabel
type DCCatSet = Label
type DCPriv = Priv
type DCPrivTCB = TCBPriv
type DC = LIO DCLabel ()
type HS a = LIO HSLabel HSState a
type SimpleLIOApplication p l = Priv p -> SimpleApplication (LIO l)
type SimpleLIOMiddleware p l = SimpleLIOApplication p l -> SimpleLIOApplication p l
type SimpleLIOApplication p l = Priv p -> SimpleApplication (LIO l)
type SimpleLIOMiddleware p l = SimpleLIOApplication p l -> SimpleLIOApplication p l
type LIOController l s = ControllerT s (LIO l)
type DCController a = LIOController DCLabel a
type SimpleDCApplication = SimpleLIOApplication CNF DCLabel
type SimpleDCMiddleware = SimpleLIOMiddleware CNF DCLabel
type ListNE a = [a]
type TCEmb a = HashMap a FTycon
type Tag = [Int]
type Result a = (FixResult (SubC a), HashMap KVar Pred)
type FixSolution = HashMap KVar Pred
type FEnv = SEnv SortedReft
type BindId = Int
type BindMap a = HashMap BindId a
type LocSymbol = Located Symbol
type LocText = Located Text
type Solution = Sol KBind
type Cand a = [(Pred, a)]
type SolveM = StateT SolverState IO
type Parser = Parsec String Integer
type ExhaustivePat = ([WarningPat], [(Name, [HsLit])])
type VarianceInfo = [Variance]
type TagKey = Var
type TagEnv = HashMap TagKey Tag
type LocSymbol = Located Symbol
type LocText = Located Text
type RTProp c tv r = Ref (RType c tv ()) r (RType c tv r)
type RRType = RType RTyCon RTyVar
type BRType = RType LocSymbol Symbol
type RRProp r = Ref RSort r (RRType r)
type BSort = BRType ()
type BPVar = PVar BSort
type BareType = BRType RReft
type PrType = RRType Predicate
type SpecType = RRType RReft
type SpecProp = RRProp RReft
type RSort = RRType ()
type UsedPVar = PVar ()
type RPVar = PVar RSort
type RReft = UReft Reft
type Error = TError SpecType
type ErrorResult = FixResult Error
type Strata = [Stratum]
type LogicMap = HashMap Symbol LMap
type RDEnv = DEnv Var SpecType
type PrType = RRType Predicate
type FixSubC = SubC Cinfo
type FixWfC = WfC Cinfo
type RTyConInv = HashMap RTyCon [SpecType]
type RTyConIAl = HashMap RTyCon [SpecType]
type RBound = RRBound RSort
type RRBound tv = Bound tv Pred
type RBEnv = HashMap LocSymbol RBound
type RRBEnv tv = HashMap LocSymbol (RRBound tv)
type BareSpec = Spec BareType LocSymbol
type BareM = WriterT [Warn] (ErrorT Error (StateT BareEnv IO))
type Warn = String
type TCEnv = HashMap TyCon RTyCon
type InlnEnv = HashMap Symbol TInline
type FilePath = String
type IOError = IOException
type Rational = Ratio Integer
type ReadS a = String -> [(a, String)]
type ShowS = String -> String
type String = [Char]
type Transformation m a b = forall t. (Monad m, MonadCons (t m), MonadTransUncons t) => t m a -> t m b
type Error = (Text, [Text])
type Error = Maybe ErrorDetails
type Error = CURLE
type TrieMap = TrieMap AList
type TrieMap = TrieMap Map
type TrieMap = TrieMap WrappedIntMap
type TrieSet = TrieSet AList
type TrieSet = TrieSet Map
type TrieSet = TrieSet WrappedIntMap
type TrieMap = TrieMap AList
type TrieMap = TrieMap Map
type TrieMap = TrieMap WrappedIntMap
type TrieSet = TrieSet AList
type TrieSet = TrieSet Map
type TrieSet = TrieSet WrappedIntMap
type TreeT m a = ListT (ListT m) a
type TreeItemM t = ItemM (ItemM t)
type Rank = Int
type Rank = Int
type Size = Int
type BlackHeight = Int
type BlackHeight = Int
type Terminate = ()
type UnknownSize = D99
type :& a as = (a, as)
type Function a = Value (Ptr a)
type TFunction a = CodeGenModule (Function a)
type Global a = Value (Ptr a)
type TGlobal a = CodeGenModule (Global a)
type FreePointers = (Ptr ExecutionEngine, ModuleProviderRef, ValueRef)
type TValue r a = CodeGenFunction r (Value a)
type ModuleRef = Ptr Module
type ModuleProviderRef = Ptr ModuleProvider
type TypeRef = Ptr Type
type ValueRef = Ptr Value
type BasicBlock = Value
type BasicBlockRef = Ptr BasicBlock
type BuilderRef = Ptr Builder
type MemoryBufferRef = Ptr MemoryBuffer
type PassManagerRef = Ptr PassManager
type ContextRef = Ptr Context
type UseRef = Ptr OpaqueUse
type ByteOrdering = CInt
type TargetDataRef = Ptr TargetData
type GenericValueRef = Ptr GenericValue
type VerifierFailureAction = CInt
type BasicBlock = BasicBlockRef
type Function = ValueRef
type CString = Ptr CChar
type Record r o v = Element r o v v
type CallableOperand = Either InlineAssembly Operand
type InstructionMetadata = [(String, MetadataNode)]
type InstructionMetadata = [(String, MetadataNode)]
type CallableOperand = Either InlineAssembly Operand
type ExtensionsInt = Word32
type ExtensionsInt = Word32
type AlexPredicate = PState -> AlexInput -> Int -> AlexInput -> Bool
type HappyAny = Any
type CodeGen = State (Int, Map Name [Operand])
type ModuleRef = Ptr Module
type ModuleProviderRef = Ptr ModuleProvider
type TypeRef = Ptr Type
type ValueRef = Ptr Value
type BasicBlock = Value
type BasicBlockRef = Ptr BasicBlock
type BuilderRef = Ptr Builder
type MemoryBufferRef = Ptr MemoryBuffer
type PassManagerRef = Ptr PassManager
type ContextRef = Ptr Context
type VerifierFailureAction = CInt
type ByteOrdering = CInt
type TargetDataRef = Ptr TargetData
type GenericValueRef = Ptr GenericValue
type Terminate = ()
type UnknownSize = D99
type :& a as = (a, as)
type Function a = Value (Ptr a)
type TFunction a = CodeGenModule (Function a)
type Global a = Value (Ptr a)
type TGlobal a = CodeGenModule (Global a)
type FreePointers = (Ptr ExecutionEngine, ModuleProviderRef, ValueRef)
type TValue r a = CodeGenFunction r (Value a)
type DataLayout = [LayoutSpec]
type InlineAsm = [String]
type Type = Type' Ident
type BasicBlock = BasicBlock' (Maybe BlockLabel)
type Align = Int
type Instr = Instr' BlockLabel
type Clause = Clause' BlockLabel
type Value = Value' BlockLabel
type ValMd = ValMd' BlockLabel
type DebugLoc = DebugLoc' BlockLabel
type Stmt = Stmt' BlockLabel
type ConstExpr = ConstExpr' BlockLabel
type BB = BasicBlock' (BBId, BlockLabel)
type MDB_cmp_func = Ptr MDB_val -> Ptr MDB_val -> IO CInt
type Environment = [Variable]
type Variable = (String, String)
type StreamT a b = Stream a -> Stream b
type Stream s = [s]
type List s = [s]
type Distribution = [Double]
type DistributionMaker = Int -> Distribution
type InnerLogT = ReaderT LoggerEnv
type Logger m l = forall v. Log l v -> m ()
type SimpleLog a = Log (Severity, a)
type Parser a = Parsec String () a
type LogBuilder a m = LogBuilderProto a m (LogFormat m)
type Pos = (Int, Int)
type Handler' m = Handler m (LogFormat m)
type Logs m = Seq (Log (LogFormat m))
type ThreadedLogger d m a = ThreadedLogger' d a m a
type CNF = [Clause]
type Clause = [Literal]
type CNF = [Clause]
type Clause = [Literal]
type TruthTable a = ([a], [TruthTableRow])
type TruthTableRow = ([Bool], Bool)
type N = Int
type SkolemT v term m = StateT (SkolemState v term) m
type Skolem v term = StateT (SkolemState v term) Identity
type LiteralMapT f = StateT (Int, Map f Int)
type NormalT formula v term m a = SkolemT v term (LiteralMapT formula m) a
type Assertion t = IO ()
type SetOfSupport lit v term = Set (Unification lit v term)
type Unification lit v term = (ImplicativeForm lit, Map v term)
type ProverT inf = StateT (ProverState inf)
type Formula = F Identity
type Term = T Identity
type FormulaST s = F (State s)
type TermST s = T (State s)
type FormulaC = FormulaST [String]
type TermC = TermST [String]
type TPTP_Input = TPTP_Input_ Identity
type TPTP_Input_C = TPTP_Input_ (State [String])
type T0Diff = DiffResult (Term0 (T DiffResult))
type F0Diff = DiffResult (Formula0 (T DiffResult) (F DiffResult))
type Tree = TreeT Identity
type TreeIO = TreeT IO
type TreeInstruction = TreeTInstruction Identity
type Path = Seq Step
type CheckpointCursor = Seq CheckpointDifferential
type Context m α = Seq (ContextStep m α)
type ExplorationState = ExplorationTState Identity
type NQueensSolution = [(Word, Word)]
type NQueensSolutions = [NQueensSolution]
type LocatableTree = LocatableTreeT Identity
type LocatableTreeIO = LocatableTreeT IO
type ProgressUpdateFor exploration_mode = ProgressUpdate (ProgressFor exploration_mode)
type StolenWorkloadFor exploration_mode = StolenWorkload (ProgressFor exploration_mode)
type WorkerRequestQueue progress = IORef [WorkerRequest progress]
type WorkerRequestQueueFor exploration_mode = WorkerRequestQueue (ProgressFor exploration_mode)
type WorkerEnvironmentFor exploration_mode = WorkerEnvironment (ProgressFor exploration_mode)
type WorkerTerminationReasonFor exploration_mode = WorkerTerminationReason (WorkerFinishedProgressFor exploration_mode)
type MessageForSupervisorFor exploration_mode = MessageForSupervisor (ProgressFor exploration_mode) (WorkerFinishedProgressFor exploration_mode)
type SupervisorFullConstraint worker_id m = (SupervisorWorkerIdConstraint worker_id, SupervisorMonadConstraint m)
type SupervisorMonadConstraint m = (Functor m, MonadIO m)
type SupervisorWorkerIdConstraint worker_id = (Eq worker_id, Ord worker_id, Show worker_id, Typeable worker_id)
type SupervisorOutcomeFor exploration_mode worker_id = SupervisorOutcome (FinalResultFor exploration_mode) (ProgressFor exploration_mode) worker_id
type SupervisorTerminationReasonFor exploration_mode = SupervisorTerminationReason (FinalResultFor exploration_mode) (ProgressFor exploration_mode)
type Request exploration_mode worker_id m = SupervisorMonad exploration_mode worker_id m ()
type RequestQueueReader exploration_mode worker_id m = ReaderT (RequestQueue exploration_mode worker_id m) IO
type RunOutcomeFor exploration_mode = RunOutcome (ProgressFor exploration_mode) (FinalResultFor exploration_mode)
type TerminationReasonFor exploration_mode = TerminationReason (ProgressFor exploration_mode) (FinalResultFor exploration_mode)
type InnerMonad inner_state = StateT inner_state IO
type WorkerId = Int
type LogicST s = LogicT s (ST s)
type STRef s = Ref s (ST s)
type LogicIO s = LogicT s IO
type IORef s = Ref s IO
type Logic = LogicT Identity
type Format = LogRecord -> IO String
type Format = LogRecord -> IO String
type LojbanTree = Tree Expr
type Expr = Either Type Value
type Type = String
type Value = String
type Text = Sentence
type Clause = ([String], String, Indicators)
type Indicators = [[([String], String)]]
type Term = Sumti
type Gik = (Clause, Maybe Clause, [Free])
type Gihek = JoikJek
type Statement = Sentence
type Ek = JoikJek
type Quantifier = Operand
type Paragraph = Sentence
type Paragraphs = Sentence
type Pre = ([String], String)
type LerfuString = [Clause]
type RelativeClauses = RelativeClause
type Mex = Operand
type JoikEk = JoikJek
type NumberLerfuString = [Clause]
type Guhek = (Maybe Clause, Clause, Maybe Clause, [Free])
type JoikJekSelbri5 = Either (JoikJek, [Free], Selbri) (Joik, Maybe Tag, Clause, [Free], Selbri, Maybe Clause, [Free])
type Joik = JoikJek
type Number = [Clause]
type Tense = Tag
type RoutePathT a = (RequestMethod, String, a)
type RoutePath = RoutePathT AppUnit
type AppReader = Env
type AppState = Response
type AppUnitT = ReaderT AppReader (StateT AppState IO)
type AppUnit = AppUnitT ()
type Assoc = [(String, String)]
type Context = Assoc
type RouterT a = String -> (a -> Application) -> RoutePathT a -> Middleware
type Router = RouterT AppUnit
type UnitT a = State Loli a
type Unit = UnitT ()
type ETParam = Param EightTracks
type JingParam = Param Jing
type Span = (FilePath, Text)
type ExprVar = String
type Var = String
type HeaderSchema = (String, [Var], String)
type Var = String
type HeaderSchema = (String, [Var], String)
type TypeVar = String
type Subst name domain = Map name domain
type Parameters = [Parameter]
type Handlers beta gamma delta = Map delta [(Unique, beta -> gamma beta)]
type Getter alpha beta = alpha -> beta
type Setter alpha beta = beta -> alpha -> alpha
type Injector beta = beta -> IO ()
type Extractor beta = IO (Maybe beta)
type Applicator beta gamma = beta -> gamma ()
type Editor alpha = Parameters -> Notifier -> IO (Widget, Injector alpha, Extractor alpha)
type GtkRegFunc = forall o. GObjectClass o => o -> GtkHandler -> IO Connection
type GtkHandler = IO Bool
type Connections = [Connection]
type MkFieldDescription alpha beta = Parameters -> Getter alpha beta -> Setter alpha beta -> Editor beta -> FieldDescription alpha
type Printer beta = beta -> Doc
type Parser beta = CharParser () beta
type MkFieldDescriptionS alpha beta = Parameters -> Printer beta -> Parser beta -> Getter alpha beta -> Setter alpha beta -> FieldDescriptionS alpha
type Applicator beta gamma = beta -> gamma ()
type PanePath = [PanePathElement]
type PaneName = Text
type Connections = [Connection]
type StandardPath = PanePath
type Table = Map Constant Constant
type Operations = Vector Operation
type Stack = Vector Constant
type StackId = Int
type Prototypes = Vector Prototype
type Html = HtmlT Identity
type Html = HtmlT Identity
type SvgT = HtmlT
type Svg = SvgT Identity
type ExtMap = Map String MIMEType
type Realm = String
type UserID = String
type Password = String
type FallbackHandler = [String] -> IO (Maybe ResourceDef)
type FallbackHandler = [String] -> IO (Maybe ResourceDef)
type Widget model = model -> WidgetFuncs model
type New model mutable = Accessor model mutable -> Widget model
type KeyAction = (KeyStatus, KeyGroup)
type Handler model = (String, ModKey -> model)
type ActionHandlers model = Map KeyAction (Handler model)
type DelegatedMutable mutable = (Mutable, mutable)
type Items model = Map Cursor (Item model)
type Cursor = (Int, Int)
type DelegatedMutable = DelegatedMutable Mutable
type Cursor = Int
type DelegatedMutable = DelegatedMutable Mutable
type Cursor = Int
type DelegatedMutable = DelegatedMutable Mutable
type ID = Ptr IDData
type SEL = Ptr SELData
type Ivar = Ptr IvarData
type QPar = Par QuasiDet
type SatMapContents k v = Maybe (Map k v, OnSat)
type OnSat = Par ()
type NodeAction d s k v = IsCycle -> k -> [(k, IsCycle, IVar s v)] -> Par d s (NodeValue k v)
type Token = (Pos, Lexeme)
type Pos = (Int, Int)
type Byte = Word8
type Offset = Int
type Depth = Int
type Index = Int
type Tag = Int
type Arity = Int
type Arity = Int
type Tag = Int
type LvmModule = Module [Instr]
type LvmDecl = Decl [Instr]
type CoreModule = Module Expr
type CoreDecl = Decl Expr
type Alts = [Alt]
type AsmModule = Module Top
type AsmDecl = Decl Top
type Atom = Expr
type C'lzma_ret = CUInt
type C'lzma_action = CUInt
type C'lzma_check = CUInt
type C'lzma_ret = CUInt
type C'lzma_action = CUInt
type C'lzma_check = CUInt
type (~>) m n = forall a. m a -> n a
type (~~>) t u = forall m. t m ~> u m
type String = Text
type Chars = [Char]
type Old v = v
type New v = v
type Reader r = ReaderT r ID
type State s = StateT s ID
type Kon r = ContT r ID
type OpaqueKon k r = OpaqueContT k r ID
type POut = FreeMonoidFunctor ((,) Format) Chunk
type MonadPretty m = (Monad m, MonadReader PEnv m, MonadWriter POut m, MonadState PState m, MonadMaybe m)
type Doc = DocM ()
type Atom = PreAtom Call
type CaseBranch = PreCaseBranch Call
type Call = StampedFix Int PreCall
type CPSM m = (Monad m, MonadCont Call m, MonadOpaqueCont CPSKon Call m, MonadState CPS𝒮 m)
type Env lτ dτ = Map Name (Addr lτ dτ)
type Store ν lτ dτ = Map (Addr lτ dτ) (ν lτ dτ)
type TimeC lτ dτ = (Ord lτ, Ord dτ, Time Int lτ, Time Int dτ)
type ValC ν lτ dτ = (JoinLattice (ν lτ dτ), Meet (ν lτ dτ), Neg (ν lτ dτ), Val lτ dτ SetWithTop ν)
type MonadC ν lτ dτ m = (Monad m, MonadBot m, MonadTop m, MonadPlus m, MonadState (𝒮 ν lτ dτ) m)
type SRawName = Stamped BdrNum RawName
type Name = Stamped BdrNum GenName
type RawExp = Fix (PreExp RawName)
type Exp = StampedFix LocNum (PreExp SRawName)
type Pico = PrePico Name
type Atom = Stamped LocNum (PreAtom Name Call)
type Call = StampedFix LocNum (PreCall Name)
type StampM m = (Monad m, MonadState StampSt m, MonadReader Env m)
type CPSM m = (Monad m, MonadCont Call m, MonadOpaqueCont CPSKon Call m, MonadState CPSSt m)
type Env lτ dτ = Map Name (Addr lτ dτ)
type Store val lτ dτ = Map (Addr lτ dτ) val
type PSΣ' ν lτ dτ = (ID :.: ListSetWithTop) :.: (,) (𝒮 ν lτ dτ)
type Ψ = LocNum
type TimeC τ = (Time Ψ τ, Bot τ, Ord τ, Pretty τ)
type ValC lτ dτ val = (Val lτ dτ val, Ord val, PartialOrder val, JoinLattice val, Difference val, Pretty val)
type MonadC val lτ dτ m = (Monad m, MonadBot m, MonadPlus m, MonadState (𝒮 val lτ dτ) m)
type GC m = Call -> m ()
type CreateClo lτ dτ m = LocNum -> [Name] -> Call -> m (Clo lτ dτ)
type TimeFilter = Call -> Bool
type StateSpaceC ς' = (PartialOrder (ς' Call), JoinLattice (ς' Call), Difference (ς' Call), Pretty (ς' Call))
type UniTime τ = W (TimeC τ)
type UniVal val = forall lτ dτ. (TimeC lτ, TimeC dτ) => W (ValC lτ dτ (val lτ dτ))
type UniMonad ς ς' m = forall val lτ dτ. (TimeC lτ, TimeC dτ, ValC lτ dτ val) => W (Analysis val lτ dτ (m val lτ dτ), Execution (ς val lτ dτ) (ς' val lτ dτ) (m val lτ dτ))
type PSΣ' val lτ dτ = (ID :.: ListSet) :.: (,) (𝒮 val lτ dτ)
type FSΣ' val lτ dτ = (ID :.: ListSet) :.: (,) (𝒮 val lτ dτ)
type FIΣ' val lτ dτ = ((ID :.: (,) (Store val lτ dτ)) :.: ListSet) :.: (,) (𝒮Cxt lτ dτ)
type Labeled l a = Res l (Id a)
type MACMVar l a = Res l (MVar a)
type MACRef l a = Res l (IORef a)
type AS e = (e, ())
type PlanT i o m a = FT (PlanF i o) m a
type Plan i o a = forall m. Monad m => PlanT i o m a
type Plan k o a = forall m. PlanT k o m a
type Machine k o = forall m. Monad m => MachineT m k o
type Proxy a' a b' b m c = MachineT m (Exchange a' a b' b) c
type Effect m r = Proxy Void () () Void m r
type Client a' a m r = Proxy a' a () Void m r
type Server b' b m r = Proxy Void () b' b m r
type Effect' m r = forall x' x y' y. Proxy x' x y' y m r
type Server' b' b m r = forall x' x. Proxy x' x b' b m r
type Client' a' a m r = forall y' y. Proxy a' a y' y m r
type Process a b = Machine (Is a) b
type ProcessT m a b = MachineT m (Is a) b
type Source b = forall k. Machine k b
type SourceT m b = forall k. MachineT m k b
type Tee a b c = Machine (T a b) c
type TeeT m a b c = MachineT m (T a b) c
type Wye a b c = Machine (Y a b) c
type WyeT m a b c = MachineT m (Y a b) c
type DataModeIO m a = MonadIO m => (Handle -> m a, Handle -> a -> m ())
type SinkIO m k = MonadIO m => forall a. ProcessT m k a
type SourceIO m a = MonadIO m => forall k. MachineT m k a
type IODataMode a = (Handle -> IO a, Handle -> a -> IO ())
type IOSink k = forall a. ProcessT IO k a
type IOSource a = forall k. MachineT IO k a
type ProcessMachines a b k = (Maybe (ProcessT IO a b), Maybe (MachineT IO k a), Maybe (MachineT IO k a))
type Magic = ForeignPtr CMagic
type Address = ByteString
type MDError = ByteString
type FocusNotifierId = Int
type Frame = Window
type Keymap = Map Text Action
type SignalBoxList = Set SignalBox
type WindowNodeId = Int
type WindowNodeList = SetList WindowNode
type WindowList = ListZipper Window
type WindowId = WindowNodeId
type WindowListTuple = (WindowList, WindowNodeList)
type WindowNodeArgs = (WindowNodeList, Container)
type WindowArgs = (WindowList, WindowNodeList, Container)
type WindowNodeAttr = (Maybe WindowNodeId, Maybe WindowNodeId, Maybe WindowNodeId, Maybe WindowNodeId, WindowNodeType, WindowNodeDirection)
type PageActionInputArgs = (Window, (TVar SignalBoxList, (TVar PageId, TVar SignalBoxId)))
type AnythingName = String
type AnythingInput = String
type AnythingCompletion = String
type AnythingList = Map AnythingName Anything
type AnythingFilterRule = AnythingInput -> String -> Bool
type AnythingCompletionRule = AnythingInput -> AnythingCompletion
type AnythingColumnTitle = String
type AnythingColumnFun = AnythingCandidateWrap -> String
type AnythingCommandName = String
type AnythingAction = Client -> IO ()
type AnythingCommandFun = AnythingInput -> AnythingCandidateWrap -> AnythingInteractiveType -> IO [(AnythingCommandName, AnythingAction)]
type AnythingSearchCache = Map String (Either (MVar [AnythingCandidateWrap], ThreadId, ThreadId) HandlerId)
type AnythingCandidateStore = ListStore AnythingCandidateWrap
type AnythingCommandStore = ListStore String
type AnythingCandidateTab = Map Int ((AnythingName, Int), AnythingCandidateView)
type AnythingCommandTab = AnythingCommandView
type AnythingViewKeymap = Map Text AnythingViewAction
type EditableContent = String
type EditableBound = (Int, Int)
type EditableStatus = (EditableContent, EditableBound)
type StatusbarSubitem = Statusbar
type StatusbarInfoTable = Seq (String, String)
type InteractivebarTitle = String
type InteractivebarEntryStatus = EditableStatus
type InteractivebarStatus = (InteractivebarTitle, InteractivebarEntryStatus)
type FileContentType = String
type FileIconPixbufDatabase = Map FileContentType Pixbuf
type ObjectPathText = Text
type MemberNameText = Text
type InterfaceNameText = Text
type BusNameText = Text
type SignatureText = Text
type PagePlug = Plug
type PageList = Set Page
type PageType = String
type FileOpenName = String
type FilePrefix = String
type BufferInfoList = [BufferInfo]
type BufferHistoryList = [BufferHistory]
type PageModeName = String
type PageModeRegexp = String
type PageBufferNewFun = FilePath -> Client -> PageId -> IO PageBufferWrap
type PageViewKeymap = forall a. (PageView a) => Map Text (a -> IO ())
type AnythingKeyPressId = Int
type PageId = Int
type PageSocketId = GWindowId
type PagePlugId = GWindowId
type PagePath = String
type SignalBoxId = Int
type InteractiveString = (PagePlugId, String)
type InteractiveResult = [String]
type NickColor = (Int, Int, Int)
type Server = String
type Channel = String
type Port = Int
type Nick = String
type Password = String
type HasConnected = Bool
type IrcConnect = Map Server (MVar Handle, Map Channel [ProcessID])
type MplayerHandle = (Handle, Handle, Handle, ProcessHandle)
type MandrillTags = Text
type MandrillHeaders = Value
type MandrillVars = Value
type MandrillKey = Text
type MandrillTemplate = Text
type Mandrill = MandrillT IO
type MPUsableMonad m = (MonadBaseControl IO m, MonadResource m, MonadLogger m)
type NaturalUserId = Text
type LegalUserId = Text
type AnyUserId = Text
type WalletId = Text
type Currency = Text
type TransferId = Text
type TransactionId = Text
type HookId = Text
type DocumentId = Text
type BankAccountId = Text
type BankWireId = Text
type CardPayinId = Text
type PayoutId = Text
type CardRegistrationId = Text
type CardId = Text
type RefundId = Text
type FlatManifold v = (MetricSpace v, Manifold v, v ~ TangentSpace v)
type Atlas m = [Chart m]
type Representsℝ r = (EqFloating r, FlatManifold r, r ~ Scalar r, r ~ Metric r)
type CntnRealFunction = Representsℝ r => r :--> r
type EuclidSpace v = (HasBasis v, EqFloating (Scalar v), Eq v)
type EqFloating f = (Eq f, Ord f, Floating f)
type Endomorphism a = a -> a
type ℝ = Double
type ℝ² = (ℝ, ℝ)
type ℝ³ = (ℝ², ℝ)
type MapSyntax k v = MapSyntaxM k v ()
type List = [List1]
type Doc = MDoc ()
type Algo c = [Rule c]
type Distribution a = [(a, Probability)]
type Probability = Rational
type MMatrix a = MMatrix MVector a
type MMatrix a = MMatrix MVector a
type AssocList a = [((Int, Int), a)]
type MMatrix a = MMatrix MVector a
type Matrix a = Matrix Vector a
type Matrix a = Matrix Vector a
type Matrix = Matrix Vector
type ReadMatrix a = Either ReadError (Matrix a)
type SearchResults = [SearchResult]
type MBox = [Message]
type Header = (String, String)
type MBox = [Message]
type Header = (Text, Text)
type Table2 = PrimArray (Int, Int) Double
type Table4 = PrimArray (Int, Int, Int, Int) Double
type Tables = (Table2, [Table2], Table2, Table2, Table2)
type Rand = Gen (PrimState IO)
type Probability = Double
type Batch x = ([x], Int)
type BatchAct x m = Act x m (Batch x)
type BatchAction x m b = Action x m (Batch x) b
type PrintF x s = [x] -> [s]
type Step x = Rand -> x -> IO x
type Kernel x a = Target a -> (a -> Proposal a) -> Step x
type Temp = Double
type CoolingSchedule = Temp -> Temp
type StateSA a = (a, Temp, CoolingSchedule)
type Mutation a = a -> Distr a
type Mutation a = a -> Distr a
type MCPI = ReaderT ConnInfo IO
type MCPI = ReaderT ConnInfo IO
type IPos = Pos Int
type FPos = Pos Float
type Window = Support -> [Vector]
type Support = (Vector, Double)
type Vector = (Double, Double, Double)
type Vertex = Vector
type Normal = Vector
type Color = (Double, Double, Double, Double)
type UserName = String
type NamespaceID = String
type TimeString = String
type RevID = String
type PageName = String
type UserID = String
type Timestamp = String
type Redirect = String
type SortKind = String
type CatName = String
type GroupName = String
type FilterLang = String
type WithRedirects = String
type URLString = String
type Token = String
type LangName = String
type User = String
type Password = String
type LoginToken = String
type SessionID = String
type SessionToken = String
type ValueName = (String, String)
type Title = String
type PageID = String
type RevisionID = String
type Permission = String
type URLString = String
type PQ = BootWrap Integer
type PQ = BootWrap Integer
type PQ = PQ
type Username = ByteString
type Password = ByteString
type Key = ByteString
type Value = ByteString
type Extras = ByteString
type Initial = Word64
type Delta = Word64
type Expiration = Word32
type Flags = Word32
type Version = Word64
type Username = ByteString
type Password = ByteString
type StatResults = [(ByteString, ByteString)]
type Client = Cluster
type Username = ByteString
type Password = ByteString
type StatResults = [(ByteString, ByteString)]
type StatsList = [(String, String)]
type Nodekey = String
type StatsList = [(String, String)]
type Nodekey = String
type User = ByteString
type Password = ByteString
type Flags = Word32
type Key = ByteString
type Value = ByteString
type Expiry = Word32
type Delta = Word64
type Initial = Word64
type Counter = Word64
type Wrap s t k v = (k -> IO v) -> s k -> IO (t v)
type Unwrap s t k v = (s k -> IO (t v)) -> k -> IO v
type Wrapper s t k v = (Wrap s t k v, Unwrap s t k v)
type Memo k v = (k -> IO v) -> IO (IO (), k -> IO v)
type MemoRec k v = ((k -> IO v) -> k -> IO v) -> IO (IO (), k -> IO v)
type MkMemo k v = FilePath -> Table -> Memo k v
type MkMemoRec k v = FilePath -> Table -> MemoRec k v
type UInt64 = CULLong
type Method = Object -> IO (Either String Object)
type HotVar a = IORef a
type GlobalState = Vector (Maybe Sched)
type URL = Text
type Date = Day
type Time = TimeOfDay
type DateTime = UTCTime
type Number = Either Integer Float
type Boolean = Bool
type Workload = Energy
type Parents = Person
type Participant = Either Organization Person
type Album = MusicAlbum
type Model = Either ProductModel Text
type CostOrigin = Text
type AdministrationRoute = Text
type MedicalSpecialty = MedicalSpecialty
type PossibleComplication = Text
type LesserOrEqual = QualitativeValue
type AddressLocality = Text
type PartOfEpisode = Episode
type ThumbnailUrl = URL
type Spouse = Person
type DownloadUrl = URL
type SubOrganization = Organization
type Height = Either Distance QuantitativeValue
type MaxValue = Number
type MinPrice = Number
type SuccessorOf = ProductModel
type Study = MedicalStudy
type Area = Place
type UploadDate = Date
type Intensity = Text
type Manufacturer = Organization
type PostOp = Text
type EstimatesRiskOf = MedicalEntity
type CholesterolContent = Mass
type Insertion = AnatomicalStructure
type LegalStatus = DrugLegalStatus
type SubStageSuffix = Text
type TotalTime = Duration
type Algorithm = Text
type Elevation = Either Text Number
type AvailableAtOrFrom = Place
type Maps = URL
type Sponsor = Organization
type DuplicateTherapy = MedicalTherapy
type TrackingNumber = Text
type NumberOfSeasons = Number
type Parent = Person
type PredecessorOf = ProductModel
type EducationalUse = Text
type Status = MedicalStudyStatus
type RelatedCondition = MedicalCondition
type Free = Boolean
type Duns = Text
type AssociatedArticle = NewsArticle
type Vendor = Either Organization Person
type Map = URL
type SportsTeam = SportsTeam
type AppliesToPaymentMethod = PaymentMethod
type Lender = Person
type RelatedTherapy = MedicalTherapy
type Publication = PublicationEvent
type HospitalAffiliation = Hospital
type ConfirmationNumber = Text
type AvailableService = Either3 MedicalTest MedicalProcedure MedicalTherapy
type BusinessFunction = BusinessFunction
type Subtype = Text
type RatingValue = Text
type AvailableStrength = DrugStrength
type Colleagues = Person
type VideoQuality = Text
type Drug = Drug
type Screenshot = Either ImageObject URL
type AcceptedPaymentMethod = PaymentMethod
type DatePublished = Date
type AssemblyVersion = Text
type SecondaryPrevention = MedicalTherapy
type Audience = Audience
type Indication = MedicalIndication
type TimeRequired = Duration
type PrescriptionStatus = DrugPrescriptionStatus
type TickerSymbol = Text
type DateCreated = Date
type RatingCount = Number
type ApplicationSuite = Text
type InfectiousAgentClass = InfectiousAgentClass
type Origin = AnatomicalStructure
type Requirements = Either Text URL
type PublishingPrinciples = URL
type Calories = Energy
type StartDate = Date
type Department = Organization
type Tracks = MusicRecording
type Polygon = Text
type MechanismOfAction = Text
type FaxNumber = Text
type ItemOffered = Product
type IsVariantOf = ProductModel
type Telephone = Text
type VideoFrameSize = Text
type Produces = Thing
type Availability = ItemAvailability
type TransmissionMethod = Text
type Employees = Person
type RealEstateAgent = RealEstateAgent
type SensoryUnit = Either AnatomicalStructure SuperficialAnatomy
type RunsTo = Vessel
type OriginatesFrom = Vessel
type SpecialCommitments = Text
type RegionDrained = Either AnatomicalSystem AnatomicalStructure
type AccessibilityControl = Text
type ValidIn = AdministrativeArea
type Buyer = Person
type AffectedBy = Drug
type OwnedFrom = DateTime
type PublishedOn = BroadcastService
type PerformerIn = Event
type ActiveIngredient = Text
type BaseSalary = Number
type Endorsee = Either Organization Person
type FamilyName = Text
type PaymentUrl = URL
type Dependencies = Text
type Award = Text
type SubStructure = AnatomicalStructure
type AlternativeHeadline = Text
type DayOfWeek = DayOfWeek
type Seller = Either Organization Person
type Episode = Episode
type IsBasedOnUrl = URL
type Followee = Either Organization Person
type Result = Thing
type RecommendedIntake = RecommendedDoseSchedule
type BloodSupply = Vessel
type BirthDate = Date
type ReviewCount = Number
type Illustrator = Person
type EligibleCustomerType = BusinessEntityType
type WorksFor = Organization
type Contraindication = MedicalContraindication
type SportsActivityLocation = SportsActivityLocation
type ValueAddedTaxIncluded = Boolean
type SignificantLinks = URL
type Question = Text
type RecipeCuisine = Text
type Assembly = Text
type PostOfficeBoxNumber = Text
type ItemCondition = OfferItemCondition
type ProgrammingModel = Text
type IsRelatedTo = Product
type EligibleQuantity = QuantitativeValue
type Ingredients = Text
type ServicePostalAddress = PostalAddress
type MusicGroupMember = Person
type ApplicationSubCategory = Either Text URL
type PaymentDue = DateTime
type InteractingDrug = Drug
type StrengthValue = Number
type LearningResourceType = Text
type Transcript = Text
type TargetName = Text
type VatID = Text
type SourceOrganization = Organization
type IsGift = Boolean
type Background = Text
type RequiredMaxAge = Integer
type RestPeriods = Text
type IsAccessoryOrSparePartFor = Product
type ImagingTechnique = MedicalImagingTechnique
type Purpose = Either Thing MedicalDevicePurpose
type HasPOS = Place
type CommentText = Text
type TypicalAgeRange = Text
type ToLocation = Either Place Number
type RelatedAnatomy = Either AnatomicalStructure AnatomicalSystem
type Duration = Duration
type Discusses = CreativeWork
type Address = PostalAddress
type AccountablePerson = Person
type RiskFactor = MedicalRiskFactor
type Width = Either Distance QuantitativeValue
type CommentTime = Date
type Caption = Text
type EligibleDuration = QuantitativeValue
type Mpn = Text
type PartOfSystem = AnatomicalSystem
type StrengthUnit = Text
type CostCategory = DrugCostCategory
type HighPrice = Either Number Text
type TissueSample = Text
type FiberContent = Mass
type Diagnosis = MedicalCondition
type Children = Person
type PartOfSeason = Season
type PaymentAccepted = Text
type StructuralClass = Text
type ContactOption = ContactPointOption
type Directors = Person
type CarbohydrateContent = Mass
type SubEvents = Event
type ProgrammingLanguage = Thing
type OfferCount = Integer
type Breadcrumb = Text
type BreastfeedingWarning = Text
type Distance = Distance
type Menu = Either Text URL
type ExpertConsiderations = Text
type PregnancyCategory = DrugPregnancyCategory
type Comment = UserComments
type StudySubject = MedicalEntity
type Longitude = Either Number Text
type Contributor = Either Organization Person
type RecipeInstructions = Text
type EducationalFramework = Text
type Sender = Either3 Audience Organization Person
type Genre = Text
type Cost = DrugCost
type DietFeatures = Text
type AssociatedPathophysiology = Text
type ChildMinAge = Number
type FileSize = Integer
type PlayerType = Text
type RegionsAllowed = Place
type Overview = Text
type Recipient = Either3 Organization Audience Person
type Latitude = Either Number Text
type BiomechnicalClass = Text
type NumberOfEpisodes = Number
type PostalCode = Text
type HiringOrganization = Organization
type AmountOfThisGood = Number
type AddOn = Offer
type ValidFrom = DateTime
type SameAs = URL
type EmploymentType = Text
type RecognizingAuthority = Organization
type Device = Text
type ArterialBranch = AnatomicalStructure
type Category = Either3 Text PhysicalActivityCategory Thing
type CountriesSupported = Text
type UsesDevice = MedicalDevice
type Actors = Person
type ContactType = Text
type Nutrition = NutritionInformation
type Title = Text
type DrainsTo = Vessel
type Encodings = MediaObject
type RecipeCategory = Text
type MainContentOfPage = WebPageElement
type TransFatContent = Mass
type ClincalPharmacology = Text
type GuidelineDate = Date
type Producer = Person
type PrintSection = Text
type ReviewedBy = Either Organization Person
type Affiliation = Organization
type YearlyRevenue = QuantitativeValue
type Permissions = Text
type Aspect = Text
type TrialDesign = MedicalTrialDesign
type Broadcaster = Organization
type Recipe = Recipe
type InAlbum = MusicAlbum
type GuidelineSubject = MedicalEntity
type SupplyTo = AnatomicalStructure
type Weight = QuantitativeValue
type FoodWarning = Text
type DeliveryStatus = DeliveryEvent
type UsedToDiagnose = MedicalCondition
type SubEvent = Event
type Director = Person
type AdverseOutcome = MedicalEntity
type StartTime = DateTime
type Attendees = Either Organization Person
type ClipNumber = Integer
type SignificantLink = URL
type CopyrightHolder = Either Organization Person
type ProcedureType = MedicalProcedureType
type Performers = Either Organization Person
type DateModified = Date
type StudyDesign = MedicalObservationalStudyDesign
type NonProprietaryName = Text
type ProductSupported = Either Product Text
type Course = Place
type Source = AnatomicalStructure
type Candidate = Person
type IncreasesRiskOf = MedicalEntity
type Author = Either Organization Person
type ReviewRating = Rating
type ValidFor = Duration
type BranchOf = Organization
type WordCount = Integer
type SignDetected = MedicalSign
type PrintEdition = Text
type ChildMaxAge = Number
type AvailabilityEnds = DateTime
type BlogPosts = BlogPosting
type RequiresSubscription = Boolean
type CookTime = Duration
type Overdosage = Text
type DeliveryLeadTime = QuantitativeValue
type PriceType = Text
type EvidenceLevel = MedicalEvidenceLevel
type ServiceOperator = Organization
type StorageRequirements = Either Text URL
type Color = Text
type Box = Text
type Code = MedicalCode
type ArticleSection = Text
type EligibleRegion = Either Text GeoShape
type SportsEvent = SportsEvent
type SuperEvent = Event
type Diagram = ImageObject
type BillingAddress = PostalAddress
type Object = Thing
type ReleaseNotes = Either Text URL
type StudyLocation = AdministrativeArea
type Antagonist = Muscle
type OriginAddress = PostalAddress
type Nerve = Nerve
type AccessibilityHazard = Text
type HomeLocation = Either ContactPoint Place
type DrugUnit = Text
type FoundingDate = Date
type AccessibilityFeature = Text
type SubTest = MedicalTest
type Query = Either Class Text
type TypeOfGood = Product
type Responsibilities = Text
type ProcessorRequirements = Text
type CopyrightYear = Number
type Follows = Person
type Outcome = Text
type OccupationalCategory = Text
type IsConsumableFor = Product
type Founders = Person
type Function = Text
type NumTracks = Integer
type AvailableThrough = DateTime
type TargetPopulation = Text
type NumberOfPages = Integer
type Greater = QualitativeValue
type IsAvailableGenerically = Boolean
type Version = Number
type Circle = Text
type ExperienceRequirements = Text
type SuggestedMaxAge = Number
type IncludesObject = TypeAndQuantityNode
type AvailableChannel = ServiceChannel
type JobLocation = Place
type AppliesToDeliveryMethod = DeliveryMethod
type Distribution = DataDownload
type HoursAvailable = OpeningHoursSpecification
type EndTime = DateTime
type OpeningHoursSpecification = OpeningHoursSpecification
type BookFormat = BookFormatType
type TargetProduct = SoftwareApplication
type Employee = Person
type OrderDate = DateTime
type Warning = Either Text URL
type Industry = Text
type ProteinContent = Mass
type Dateline = Text
type DeliveryAddress = PostalAddress
type DifferentialDiagnosis = DDxElement
type AlignmentType = Text
type FoodEstablishment = Either FoodEstablishment Place
type IsProprietary = Boolean
type Gender = Text
type Track = MusicRecording
type Colleague = Person
type Image = URL
type Significance = Text
type Loser = Person
type AvailableTest = MedicalTest
type SourcedFrom = BrainStructure
type ExpectedArrivalUntil = DateTime
type SaturatedFatContent = Mass
type SignOrSymptom = MedicalSignOrSymptom
type Events = Event
type Siblings = Person
type RelevantSpecialty = MedicalSpecialty
type StreetAddress = Text
type EvidenceOrigin = Text
type PrintColumn = Text
type DomainIncludes = Class
type CodeRepository = URL
type AvailableFrom = DateTime
type TargetDescription = Text
type RelatedLink = URL
type OpeningHours = Duration
type ProficiencyLevel = Text
type AlternateName = Text
type ContactPoints = ContactPoint
type Phase = Text
type BestRating = Either Number Text
type Opens = Time
type AdditionalVariable = Text
type Photos = Either ImageObject Photograph
type Name = Text
type JobTitle = Text
type CookingMethod = Text
type EncodesCreativeWork = CreativeWork
type PartOfTVSeries = TVSeries
type HealthCondition = MedicalCondition
type ServingSize = Text
type Stage = MedicalConditionStage
type ExpectedPrognosis = Text
type LabelDetails = URL
type NormalRange = Text
type CostCurrency = Text
type SuggestedMinAge = Number
type Creator = Either Organization Person
type AdvanceBookingRequirement = QuantitativeValue
type NaturalProgression = Text
type Sibling = Person
type Email = Text
type ContentLocation = Place
type Event = Event
type TypicalTest = MedicalTest
type Guideline = MedicalGuideline
type ProductionCompany = Organization
type ArticleBody = Text
type ConnectedTo = AnatomicalStructure
type LegalName = Text
type Benefits = Text
type GivenName = Text
type IsPartOf = CollectionPage
type Temporal = DateTime
type Customer = Either Organization Person
type RelatedTo = Person
type ContactPoint = ContactPoint
type AssociatedMedia = MediaObject
type AudienceType = Text
type UnsaturatedFatContent = Mass
type Diet = Diet
type AreaServed = AdministrativeArea
type GeographicArea = AdministrativeArea
type ContentSize = Text
type ValidUntil = Date
type Followup = Text
type Carrier = Organization
type Branch = Either AnatomicalStructure Nerve
type Specialty = Specialty
type OwnedThrough = DateTime
type Frequency = Text
type Photo = Either ImageObject Photograph
type MaximumIntake = MaximumDoseSchedule
type RecommendationStrength = Text
type InventoryLevel = QuantitativeValue
type Equal = QualitativeValue
type SeriousAdverseOutcome = MedicalEntity
type Runtime = Text
type PublicationType = Text
type TrackingUrl = URL
type Gtin8 = Text
type WorkLocation = Either ContactPoint Place
type Albums = MusicAlbum
type Warranty = WarrantyPromise
type Thumbnail = ImageObject
type ScheduledTime = DateTime
type PossibleTreatment = MedicalTherapy
type PrimaryImageOfPage = ImageObject
type ServicePhone = ContactPoint
type ActivityFrequency = Text
type Preparation = Text
type AdditionalType = URL
type MedicineSystem = MedicineSystem
type HonorificPrefix = Text
type Video = VideoObject
type ItemListElement = Text
type Founder = Person
type ComprisedOf = Either AnatomicalStructure AnatomicalSystem
type Reviews = Review
type MakesOffer = Offer
type NerveMotor = Muscle
type InPlaylist = MusicPlaylist
type LastReviewed = Date
type PriceValidUntil = Date
type AccessCode = Text
type MemberOf = Organization
type AssociatedAnatomy = Either3 AnatomicalSystem SuperficialAnatomy AnatomicalStructure
type Replacee = Thing
type Provider = Either Organization Person
type AcceptedOffer = Offer
type Position = Text
type FunctionalClass = Text
type ParentService = BroadcastService
type ItemListOrder = Text
type InteractionCount = Text
type Mentions = Thing
type ServiceAudience = Audience
type EligibleTransactionVolume = PriceSpecification
type Winner = Person
type PregnancyWarning = Text
type InteractivityType = Text
type RepresentativeOfPage = Boolean
type MaxPrice = Number
type Agent = Either Organization Person
type MinValue = Number
type LowPrice = Either Number Text
type Gtin14 = Text
type Editor = Person
type Oponent = Person
type HasDeliveryMethod = DeliveryMethod
type Cause = MedicalCause
type RequiredGender = Text
type IssuedThrough = Service
type DistinguishingSign = MedicalSignOrSymptom
type ContainedIn = Place
type Lesser = QualitativeValue
type IssuedBy = Organization
type ExerciseType = Text
type AddressRegion = Text
type Knows = Person
type ItemReviewed = Thing
type HonorificSuffix = Text
type IncludedRiskFactor = MedicalRiskFactor
type Publisher = Organization
type Collection = Thing
type Line = Text
type Audio = AudioObject
type ServiceUrl = URL
type Headline = Text
type Tributary = AnatomicalStructure
type AvailableIn = AdministrativeArea
type BlogPost = BlogPosting
type ProcessingTime = Duration
type AggregateRating = AggregateRating
type SeasonNumber = Integer
type FoodEvent = FoodEvent
type AccessibilityAPI = Text
type Replacer = Thing
type WarrantyScope = WarrantyScope
type SampleType = Text
type FeatureList = Either Text URL
type EntertainmentBusiness = EntertainmentBusiness
type Naics = Text
type ItemShipped = Product
type Action = Text
type AdditionalName = Text
type YearsInOperation = QuantitativeValue
type EducationRequirements = Text
type Performer = Either Organization Person
type Seasons = Season
type ContentRating = Text
type ProductID = Text
type Gtin13 = Text
type AddressCountry = Country
type Description = Text
type Isbn = Text
type DoseValue = Number
type Attendee = Either Organization Person
type TargetPlatform = Text
type CodeValue = Text
type SugarContent = Mass
type AvailableLanguage = Language
type Option = Either Text Thing
type Value = Number
type FromLocation = Either Place Number
type Encoding = MediaObject
type Citation = Either CreativeWork Text
type ServiceSmsNumber = ContactPoint
type AlumniOf = EducationalOrganization
type SalaryCurrency = Text
type NumberofEmployees = QuantitativeValue
type Actor = Person
type EndDate = Date
type DurationOfWarranty = QuantitativeValue
type Brand = Either Organization Brand
type Members = Either Organization Person
type DoseUnit = Text
type Pathophysiology = Text
type GreaterOrEqual = QualitativeValue
type DiscussionUrl = URL
type EducationalRole = Text
type Epidemiology = Text
type ExpectedArrivalFrom = DateTime
type PermitAudience = Audience
type Seeks = Demand
type PhysiologicalBenefits = Text
type DoorTime = DateTime
type Url = URL
type DeliveryMethod = DeliveryMethod
type UnitCode = Text
type Logo = Either URL ImageObject
type RelatedDrug = Drug
type ResultReview = Review
type Catalog = DataCatalog
type Population = Text
type Offers = Offer
type ActivityDuration = Duration
type WarrantyPromise = WarrantyPromise
type SerialNumber = Text
type IsFamilyFriendly = Boolean
type NonEqual = QualitativeValue
type EventStatus = EventStatusType
type PrescribingInfo = URL
type AcceptsReservations = Either Text URL
type DeathDate = Date
type DoseSchedule = DoseSchedule
type PriceSpecification = PriceSpecification
type PartOfOrder = Order
type EmbedUrl = URL
type HowPerformed = Text
type PreOp = Text
type Repetitions = Number
type CurrenciesAccepted = Text
type Risks = Text
type CauseOf = MedicalEntity
type CarrierRequirements = Text
type OperatingSystem = Text
type SodiumContent = Mass
type ApplicableLocation = AdministrativeArea
type AlcoholWarning = Text
type IsSimilarTo = Product
type EncodingFormat = Text
type ValueReference = Either Enumeration StructuredValue
type Expires = Date
type DiscountCode = Text
type TaxID = Text
type ServiceLocation = Place
type BrowserRequirements = Text
type Member = Either Organization Person
type RangeIncludes = Class
type PaymentMethodId = Text
type RequiredMinAge = Integer
type EducationalAlignment = AlignmentObject
type PreviousStartDate = Date
type Bitrate = Text
type ServiceType = Text
type Procedure = Text
type Instrument = Thing
type Location = Either PostalAddress Place
type Closes = Time
type DosageForm = Text
type Endorsers = Either Organization Person
type SoftwareVersion = Text
type Sku = Text
type InLanguage = Text
type ReleaseDate = Date
type Discount = Either Number Text
type About = Thing
type DatePosted = Date
type Geo = Either GeoCoordinates GeoShape
type MemoryRequirements = Either Text URL
type ValidThrough = DateTime
type FileFormat = Text
type CountriesNotSupported = Text
type ExercisePlan = ExercisePlan
type Trailer = VideoObject
type Season = Season
type PartOfSeries = Series
type IdentifyingExam = PhysicalExam
type ProvidesService = Service
type RecipeYield = Text
type Depth = Either Distance QuantitativeValue
type Owns = Either OwnershipInfo Product
type PaymentMethod = PaymentMethod
type BookEdition = Text
type Price = Either Text Number
type GlobalLocationNumber = Text
type CodingSystem = Text
type OrderNumber = Text
type BodyLocation = Text
type StageAsNumber = Number
type Borrower = Person
type Landlord = Either Organization Person
type PrintPage = Text
type Language = Language
type PrepTime = Duration
type AcquiredFrom = Either Organization Person
type BillingIncrement = Number
type Episodes = Episode
type Keywords = Text
type InfectiousAgent = Text
type MusicBy = Either Person MusicGroup
type DiscountCurrency = Text
type Dataset = Dataset
type TargetUrl = URL
type Review = Review
type ApplicationCategory = Either Text URL
type SafetyConsideration = Text
type EpisodeNumber = Integer
type ByArtist = MusicGroup
type Spatial = Place
type ReviewBody = Text
type Alumni = Person
type IsicV4 = Text
type ServiceArea = AdministrativeArea
type ContentUrl = URL
type Merchant = Either Organization Person
type Nationality = Country
type Skills = Text
type FatContent = Mass
type Qualifications = Text
type WorkHours = Text
type ExifData = Text
type ProprietaryName = Text
type IdentifyingTest = MedicalTest
type CostPerUnit = Either Number Text
type DrugClass = DrugClass
type AvailableDeliveryMethod = DeliveryMethod
type Incentives = Text
type WorstRating = Either Number Text
type PriceRange = Text
type SuggestedGender = Text
type AvailabilityStarts = DateTime
type InstallUrl = URL
type RelatedStructure = AnatomicalStructure
type PriceCurrency = Text
type Awards = Text
type ServesCuisine = Text
type OrderedItem = Product
type PrimaryPrevention = MedicalTherapy
type OrderStatus = OrderStatus
type ReplyToUrl = URL
type HashTable k v = BasicHashTable k v
type BinA a t = SymA (II a) t
type PowA a t = SymA (Power a) t
type SymA g t = A (g t) g t
type JoinA a g = A (II [a] (g a)) (II a) (g a)
type Split t i r = i -> t -> (r, t)
type Thread t i r = (t, Split t i r)
type Collect r c = (r -> c -> c, c)
type SplitM t i r = Split t i (Maybe r)
type Node = Int
type Edge b = (Node, Node, b)
type Adj b = [(b, Node)]
type Context a b = (Adj b, Node, a, Adj b)
type MContext a b = Maybe (Context a b)
type Decomp a b = (MContext a b, Graph a b)
type LinGraph a b = II (Context a b) (Graph a b)
type IxI = (Int, Int)
type Forest a = [Rose a]
type Arguments m = Capt (Invocant m)
type MethodName = Atom
type AttributeName = Atom
type ClassName = Atom
type MV m = MutVar (PrimState m)
type Minutes = Int
type HealthChecks = [HealthCheck]
type Control a = TVar (Thread a)
type Priority = Double
type Frequency = Integer
type Ticks = Integer
type Action = STM (IO ())
type MTime = Double
type TrackForker = Control Track -> IO ()
type CookieT = (ByteString, ByteString, ByteString, Maybe ByteString)
type Flow = Token -> Workflow IO ()
type Params = [(String, String)]
type ProcList = WorkflowList IO Token ()
type Attribs = [(String, String)]
type UserStr = String
type PasswdStr = String
type WState view m = StateT (MFlowState view) m
type FlowMM view m = Sup (WState view m)
type Lang = String
type Void = Char
type Name = String
type Type = String
type Value = String
type Checked = Bool
type OnClick = Maybe String
type (~>) m n = forall x. m x -> n x
type (<~) m n = n ~> m
type ASetter s t a b = (a -> Identity b) -> s -> Identity t
type Getting r s a = (a -> Const r a) -> s -> Const r s
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s a = Lens s s a a
type Traversal s t a b = forall f. Applicative f => (a -> f b) -> s -> f t
type Traversal' s a = Traversal s s a a
type Getter s a = forall r. Getting r s a
type Fold s a = forall r. Applicative (Const r) => Getting r s a
type UserMessage = String
type T = Controller
type Value = Int
type ByteList = [Word8]
type ControllerValue = Value
type PitchBendRange = Int
type Pressure = Int
type ElapsedTime = Integer
type Tempo = Int
type SMPTEHours = Int
type SMPTEMinutes = Int
type SMPTESeconds = Int
type SMPTEFrames = Int
type SMPTEBits = Int
type TrackEvent = (ElapsedTime, T)
type ElapsedTime = Integer
type Track = T ElapsedTime T
type ElapsedTime = Integer
type Tempo = Int
type MeasureBeats = (Int, Beats)
type GetInfo = Path -> IO FileInfo
type RemoveInfo = IO ()
type RouteDB = [Block]
type Src = Path
type Dst = Path
type Domain = ByteString
type Port = Int
type AppReader = Env
type AppState = Response
type AppMonadT = ReaderT AppReader (StateT AppState IO)
type AppMonad = AppMonadT ()
type MikuMonadT a = State MikuState a
type MikuMonad = MikuMonadT ()
type Kafka = StateT KafkaClient (EitherT KafkaClientError IO)
type KafkaAddress = (Host, Port)
type KafkaClientId = KafkaString
type SubType = Text
type TextType = SubType
type Content = Text
type Directory u = [Map Type [Property u]]
type ValueParser u = (Type, [Parameter]) -> ByteString -> [Value u]
type Alternatives = [Part]
type Headers = [(ByteString, Text)]
type Day = Int
type Year = Int
type Zone = Int
type Hour = Int
type Minute = Int
type Second = Int
type ParseM a = State PartNumber a
type PartNumber = Integer
type Headers = [Header]
type Attachments = [Attachment]
type Attachment = (String, FilePath, Maybe ContentType)
type FileName = Text
type MimeType = ByteString
type MimeMap = Map Extension MimeType
type Extension = Text
type Key = String
type Value = String
type InteractiveValidator = Value -> IO (Either String Value)
type (:!) t m = Elevate t m
type Irregular = (Map Text Text, Map Text Text)
type StdOption = (String, String)
type ControlFile = [(String, String)]
type Output = [Word32]
type Zord64 = Word64
type Section = (Header, String, Footer)
type HandlerT = Socket -> SockAddr -> SockAddr -> IO ()
type ProgressTimeSource = IO Integer
type ProgressCallback = ProgressStatus -> ProgressStatus -> IO ()
type BinPacker = (Num size, Ord size, Show size, Show obj) => [size] -> [(size, obj)] -> Either (BinPackerError size obj) [[(size, obj)]]
type Flags = [Flag]
type Message = String
type GeneralizedToken a = (SourcePos, a)
type GeneralizedTokenParser a st b = GenParser (GeneralizedToken a) st b
type FilePath = String
type DeviceID = CDev
type FileID = CIno
type FileMode = CMode
type LinkCount = CNlink
type UserID = CUid
type GroupID = CGid
type FileOffset = COff
type EpochTime = CTime
type MemoryNode = (String, MemoryEntry)
type MIMEResults = (Maybe String, Maybe String)
type ProgressMeter = MVar ProgressMeterR
type Stack a = [a]
type CPyObject = ()
type CPyGILState = ()
type Along f input output i o = f (i, input) (o, output)
type :~> f g = forall i o. f i o -> g i o
type :~~> f g = forall i o. (i -> o) -> f i o -> g i o
type OhNo a b = b
type Id = String
type Decl = (Id, Expr)
type TyVar = Int
type TransactionId = Word16
type ProtocolId = Word16
type UnitId = Word8
type OptionSet = Set Option
type Parser = Parsec String OptionSet
type EitherOrOr a b c = Either a (Either b c)
type TypeSpecifier = Name
type BasePrefix = TypePrefix
type LanguageSpecification = String
type (/) = Mod
type ℤ = Integer
type CleanT m = StateT Params m
type CleanT m = StateT Params m
type ModulePath = FilePath
type DTime = Double
type Time = Int
type Input = Maybe (Key, KeyState, Modifiers, Position)
type Prog b = SF Input b
type Handle b = IORef (Prog b, Time, b)
type Internal = ByteString
type MoeUnitT a = Writer (DList Element) a
type MoeUnit = MoeUnitT ()
type MoeCombinator = MoeUnit -> MoeUnit
type LightCombinator = MoeCombinator
type Str = Text
type RadicalLetter = Char
type PinYin = Text
type EntryMap = Map HeadWord [Entry]
type T = Header
type Name = HeaderName
type Command = RequestMethod
type Dictionary = Map String T
type T st ext = GenParser Char st (Builder ext)
type Handle = Handle Request
type Abort e α = AbortT e Identity α
type Finish f α = FinishT f Identity α
type CustomWriterT w m a = CustomWriterT' w m m a
type MonadState s m = MonadStateN (Find (EffState s) m) s m
type MonadReader e m = MonadReaderN (Find (EffReader e) m) e m
type MonadLocal e m = MonadLocalN (Find (EffLocal e) m) e m
type MonadWriter w m = MonadWriterN (Find (EffWriter w) m) w m
type MonadExcept e m = MonadExceptN (Find (EffExcept e) m) e m
type MonadExec w m = MonadExecN (Find (EffExec w) m) w m
type Find eff (m :: * -> *) = FindTrue (MapCanDo eff m)
type AtomLens c a = Lens c (AtomCodec a)
type Run t = forall n b. Monad n => t n b -> n (StT t b)
type RunDefault t t' = forall n b. Monad n => t n b -> n (StT t' b)
type RunInBase m b = forall a. m a -> b (StM m a)
type ComposeSt t m a = StM m (StT t a)
type RunInBaseDefault t m b = forall a. t m a -> b (ComposeSt t m a)
type CoroutineStepResult s m r = Either (s (Coroutine s m r)) r
type PairBinder m = forall x y r. (x -> y -> m r) -> m x -> m y -> m r
type Weaver s1 s2 s3 m x y z = Coroutine s1 m x -> Coroutine s2 m y -> Coroutine s3 m z
type WeaveStepper s1 s2 s3 m x y z = Weaver s1 s2 s3 m x y z -> CoroutineStepResult s1 m x -> CoroutineStepResult s2 m y -> Coroutine s3 m z
type NestWeaveStepper s0 s1 s2 m x y z = WeaveStepper (Sum s0 s1) (Sum s0 s2) s0 m x y z
type Reader x py y = x -> Reading x py y
type Gen e = GenT e Identity
type SatisfyConstraint c m = (SatisfyConstraint_ (SatDepth c m) c m, c (SatMonad c m), BaseMonad (SatMonad c m) ~ BaseMonad m)
type SatisfyConstraintF c m a f = (SatisfyConstraint c m, VariadicFunction f, CanLowerFunc f c m a)
type SatMonad (c :: (* -> *) -> Constraint) (m :: * -> *) = SatMonad_ (SatDepth c m) c m
type SatMonadValue c m a = SatMonad_ (SatDepth c m) c m (SatValue_ (SatDepth c m) c m a)
type CanLowerFunc f c m a = CanLowerFunc_ f (SatDepth c m) c m a
type SatFunction c f m a = VarFunctionSat f (SatDepth c m) c m a
type SatDepth (c :: (* -> *) -> Constraint) (m :: * -> *) = FindTrue (TrySatisfy c m)
type VarFunctionSat f n c m a = VarFunction (SatV f n c m) (SatMonad_ n c m) (SatValue_ n c m a)
type MkVarFn v = Func v (MkVarFnFrom MonadicValue)
type HasTransformer t m = (SatisfyConstraint (IsTransformer t) m, MonadLevel (TransformedMonad t m), TransformedMonad t m ~ t (LowerMonad (TransformedMonad t m)))
type TransformedMonad t m = SatMonad (IsTransformer t) m
type MonadTower m = (MonadTower_ m, MonadTower_ (BaseMonad m), BaseMonad (BaseMonad m) ~ BaseMonad m, BaseMonad m ~ BaseMonad (BaseMonad m))
type MonadLevel m = (MonadLevel_ m, (Forall (CanUnwrapSelf m), WithLowerC m))
type Unwrapper m a t = (forall b. CanUnwrap m a b => m b -> LowerMonadValue m b) -> (WithLower m a) -> t
type LowerMonadValue m a = LowerMonad m (InnerValue m a)
type WithLower m = WithLower_ m m
type WithLowerC m = AddConstraint (WithLower_ m) m
type CanAddInternalM m = AddInternalM (WithLower_ m)
type CanAddInternal m = AddInternal (WithLower_ m)
type CanGetInternal m = GetInternal (WithLower_ m)
type HasBaseMonad m = SatisfyConstraint IsBaseMonad m
type BaseMonadOf b m = (HasBaseMonad m, BaseMonad m ~ b, b ~ BaseMonad m)
type HasTransformer t m = (SatisfyConstraint (IsTransformer t) m, MonadLevel (TransformedMonad t m), TransformedMonad t m ~ t (LowerMonad (TransformedMonad t m)))
type TransformedMonad t m = SatMonad (IsTransformer t) m
type HasCont m a b = SatisfyConstraintF IsCont m a (ContFn b)
type ContFn b = MkVarFn (Func (Func ValueOnly (MonadicOther b)) MonadicValue)
type HasError e m = SatisfyConstraint (IsError e) m
type HasReader r m = SatisfyConstraint (IsReader r) m
type HasState s m = SatisfyConstraint (IsState s) m
type HasState s m = SatisfyConstraint (IsState s) m
type HasState s m = SatisfyConstraint (IsState s) m
type HasWriter w m = (Monoid w, SatisfyConstraint (IsWriter w) m)
type CanListen w m a = SatisfyConstraintF (IsWriter w) m a (ListenFn w)
type ListenFn w = Func MonadicValue (MkVarFnFrom (MonadicTuple w))
type CanPass w m a = SatisfyConstraintF (IsWriter w) m a (PassFn w)
type PassFn w = MkVarFn (MonadicTuple (Endo w))
type HasWriter w m = (Monoid w, SatisfyConstraint (IsWriter w) m)
type CanListen w m a = SatisfyConstraintF (IsWriter w) m a (ListenFn w)
type ListenFn w = Func MonadicValue (MkVarFnFrom (MonadicTuple w))
type CanPass w m a = SatisfyConstraintF (IsWriter w) m a (PassFn w)
type PassFn w = MkVarFn (MonadicTuple (Endo w))
type HasWriter w m = (Monoid w, SatisfyConstraint (IsWriter w) m)
type CanListen w m a = SatisfyConstraintF (IsWriter w) m a (ListenFn w)
type ListenFn w = Func MonadicValue (MkVarFnFrom (MonadicTuple w))
type CanPass w m a = SatisfyConstraintF (IsWriter w) m a (PassFn w)
type PassFn w = MkVarFn (MonadicTuple (Endo w))
type HasRWS r w s m = SatisfyConstraint (IsRWS r w s) m
type LogSource = Text
type LinearCombination = Vector
type Variable = Vector1
type ArrayCache k e m = Cache (Array m) k e m
type UArrayCache k e m = Cache (UArray m) k e m
type Cache arr k e = ReaderCache (Container (arr k e))
type Vector = MVector
type VectorCache s e = Cache Vector s e
type UVector = MVector
type UVectorCache s e = Cache UVector s e
type Cache vec s e = ReaderCache (Container (vec s e))
type VectorCache s e = Cache Vector s e
type UVectorCache s e = Cache UVector s e
type Cache vec k e = StateCache (Container (vec k e))
type VectorCache s e = Cache Vector s e
type UVectorCache s e = Cache UVector s e
type Cache vec k e = ReaderCache (Container (vec k e))
type MemoStateT s k v = StateCache (Container s)
type MemoState c k v = MemoStateT c k v Identity
type MemoT k v = MemoStateT (Map k v) k v
type Memo k v = MemoT k v Identity
type MemoState c k v = MemoStateT c k v Identity
type MemoStateT s k v = StateCache (Container s)
type Memo k v = MemoT k v Identity
type MemoT k v = MemoStateT (Map k v) k v
type ArrayCache k e m = Cache (Array m) k e m
type UArrayCache k e m = Cache (UArray m) k e m
type VectorCache s e = Cache Vector s e
type UVectorCache s e = Cache UVector s e
type OpenT' a m b = OpenT a b m b
type Theory j = (Monad m, Alternative m, MonadOpen (j a) a m) => Op (j a) m a
type Ox o a = WriterT [(Id, o)] (State Id) a
type Id = [Int]
type ParRandStd par a = StateT StdGen par a
type Abort r = AbortT r Identity
type Abort r = AbortT r Identity
type MonadShortable r m a = AbortT r m a
type MonadErrorShortable m a = MonadShortable String m a
type IOS s t = STLike IO s t
type STMS s t = STLike STM s t
type Unknown = Int
type Fn t u = A () (Pair t St) (Pair u St)
type CRand g e = CRandT g e Identity
type TreeState = Value
type EvalState = Value
type Field = String
type MkEval m = Evalable m => Eval m -> State Int (Eval m)
type IValue = Info -> Value
type Mixin a = a -> a -> a
type NewBound solver = solver (Bound solver)
type EGPar = Expr EGParTerm EGParColTerm EGParBoolTerm
type EGBoolPar = BoolExpr EGParTerm EGParColTerm EGParBoolTerm
type EGColPar = ColExpr EGParTerm EGParColTerm EGParBoolTerm
type EGConsArgs = (Int, Int, Int)
type Model = ModelBool
type ModelInt = ModelIntExpr ModelFunctions
type ModelIntArg = ModelIntTerm ModelFunctions
type ModelCol = ModelColExpr ModelFunctions
type ModelColArg = ModelColTerm ModelFunctions
type ModelBool = ModelBoolExpr ModelFunctions
type ModelBoolArg = ModelBoolTerm ModelFunctions
type FDSpecInfo s = ([FDSpecInfoBool s], [FDSpecInfoInt s], [FDSpecInfoCol s])
type SpecFn s = EGEdge -> SpecFnRes s
type SpecFnRes s = ([(Int, EGVarId, Bool, SpecBool s)], [(Int, EGVarId, Bool, SpecInt s)], [(Int, EGVarId, Bool, SpecCol s)])
type ModelInt = ModelIntExpr ModelFunctions
type ModelCol = ModelColExpr ModelFunctions
type ModelBool = ModelBoolExpr ModelFunctions
type VarExpr = Expr VarStat () ()
type ConstraintExpr = Expr ConstraintRefs () ()
type ExampleModel t = forall s m. (Show (FDIntTerm s), FDSolver s, MonadTree m, TreeSolver m ~ (FDInstance s)) => t -> m (ModelCol)
type ExampleMinModel t = forall s m. (Show (FDIntTerm s), FDSolver s, MonadTree m, TreeSolver m ~ (FDInstance s)) => t -> m (ModelInt, ModelCol)
type GecodeIntConst = Expr GecodeIntParam GecodeColParam GecodeBoolParam
type GecodeBoolConst = BoolExpr GecodeIntParam GecodeColParam GecodeBoolParam
type GecodeColConst = ColExpr GecodeIntParam GecodeColParam GecodeBoolParam
type GecodeListConst = (GecodeIntConst, GecodeIntConst -> GecodeIntConst)
type GecodeLinear s = Linear (GecodeIntVar s) GecodeIntConst
type GecodeColVarOrSection s = Either (GecodeColVar s) (GecodeColSection s)
type Space = ForeignPtr GecodeModel
type Search = ForeignPtr GecodeSearch
type ErrorName = String
type StateName = String
type EnvName = String
type WriterName = String
type Monad = (MonadTypeCon, ReturnExpQ, BindExpQ, [LayerNPM], LiftExpQ)
type MonadName = String
type MonadTypeCon = TypeQ -> TypeQ
type ReturnExpQ = ExpQ
type BindExpQ = ExpQ
type LiftExpQ = ExpQ
type JoinExpQ = ExpQ
type RunExpQ = ExpQ
type NonProperMorphismExpQ = ExpQ
type MonadTransformer = Monad -> Monad
type LayerNPM = (Layer, [NonProperMorphismExpQ])
type Rand g = RandT g Identity
type Cont r = ContT r Identity
type Reader r = ReaderT r Identity
type RWS r w s = RWST r w s Identity
type RWS r w s = RWST r w s Identity
type State s = StateT s Identity
type State s = StateT s Identity
type Writer w = WriterT w Identity
type Writer w = WriterT w Identity
type Reader r = ReaderT r Identity
type RWS r w s = RWST r w s Identity
type RWS r w s = RWST r w s Identity
type State s = StateT s Identity
type State s = StateT s Identity
type Writer w = WriterT w Identity
type Writer w = WriterT w Identity
type Cont r = ContT r Identity
type Monarch = MonarchT IO
type ConnectionPool = Pool Connection
type State s = StateT s Id
type Writer w = WriterT w Id
type Reader r = ReaderT r Id
type Exception x = ExcT x Id
type Cont r = ContT r Id
type ExtModel f g m = forall a. f (m (g a)) -> m a
type Model f m = forall a. f (m a) -> m a
type AlgModel f m = forall a. f a -> m a
type Open e f r = (e -> r) -> (f e -> r)
type Env = [(String, Int)]
type Count = Int
type Reg = Int
type M4 = StateT Reg (StateT Env (ExcT String (StateT Count Id)))
type Expr3 = Fix (Mem :+: (Var :+: Lit))
type FullCollection = Text
type Pipe = Pipeline Response Message
type CursorId = Int64
type Username = Text
type Password = Text
type Nonce = Text
type Action = ReaderT MongoContext
type ErrorCode = Int
type GetLastError = Document
type Database = Text
type Username = Text
type Password = Text
type Collection = Text
type Selector = Document
type Modifier = Document
type Projector = Document
type Limit = Word32
type Order = Document
type BatchSize = Word32
type Pipeline = [Document]
type MapFun = Javascript
type ReduceFun = Javascript
type FinalizeFun = Javascript
type MRResult = Document
type Command = Document
type Secs = Double
type Pipe = Pipeline Response Message
type ReplicaSetName = Text
type IndexName = Text
type MilliSec = Int
type OpNum = Int
type ClientID = Int64
type UUID = ByteString
type NonNull mono = MinLen (Succ Zero) mono
type PosInf a = Inf Pos a
type NegInf a = Inf Neg a
type (:::) a l = (Option a, l)
type Prob a b = WriterT a [] b
type STMC s a = MC (ST s) a
type IOMC a = MC IO a
type IORNG = RNG (PrimState IO)
type STRNG s = RNG (PrimState (ST s))
type Seed = Word64
type Genome a = [a]
type Objective = Double
type Phenotype a = (Genome a, Objective)
type Population a = [Phenotype a]
type SelectionOp a = Population a -> Rand (Population a)
type CrossoverOp a = [Genome a] -> Rand ([Genome a], [Genome a])
type MutationOp a = Genome a -> Rand (Genome a)
type StepGA m a = Cond a -> PopulationState a -> m (StepResult (Population a))
type PopulationState a = Either [Genome a] [Phenotype a]
type ConstraintFunction a b = Genome a -> b
type SingleObjectiveProblem fn = (ProblemType, fn)
type MultiObjectiveProblem fn = [SingleObjectiveProblem fn]
type MultiPhenotype a = (Genome a, [Objective])
type DAG a = [Edge a]
type KeepSpaces = Bool
type Context = [(Text, Expr)]
type MonadRWS env out state m = (MonadReader env m, MonadWriter out m, MonadState state m)
type MonadPretty env out state m = (MonadRWS env out state m, MonadPlus m, HasLens env PrettyEnv, PrettyOutput out, HasLens state PrettyState)
type RegexResult = (String, (String, String))
type MatchList = [(Int, String)]
type Spec = [Decl]
type Client = ClientT IO
type RpcMethod m = [Object] -> m Object
type Method = MethodT IO
type MSQueueIO a = MSQueue IORef a
type MSQueueSTM a = MSQueue TVar a
type Except e = ExceptT e Identity
type RWS r w s = RWST r w s Identity
type Reader r = ReaderT r Identity
type RWS r w s = RWST r w s Identity
type State s = StateT s Identity
type State s = StateT s Identity
type Writer w = WriterT w Identity
type Writer w = WriterT w Identity
type Cont r = ContT r Identity
type State s = StateT s Identity
type Writer w = WriterT w Identity
type Reader r = ReaderT r Identity
type Except e = ExceptT e Identity
type Mutant = String
type TestStr = String
type HspecSummary = Summary
type HUnitSummary = Counts
type QuickCheckSummary = Result
type SmallCheckSummary = Maybe PropertyFailure
type DocumentKey = IxKey
type SortableKey = IxKey
type UniqueKey = IxKey
type PropertyKey = IxKey
type TransactionId = Word64
type DocAddress = Word64
type DocSize = Word64
type DbPath = String
type IdSupply = IntMap Int
type MainIndex = IntMap [LogRecord]
type GapsIndex = Map DocSize [DocAddress]
type SortIndex = IntMap (IntMap IntSet)
type FilterIndex = IntMap (IntMap SortIndex)
type UniqueIndex = IntMap (IntMap Int)
type PendingIndex = Map TransactionId [(LogRecord, ByteString)]
type CompletedIndex = Map TransactionId [LogRecord]
type Attribute a = a -> Feature
type Headers = [(HeaderName, String)]
type Headers = [(HeaderName, String)]
type Projector p a = forall f. p f -> a -> f a
type Algebra' phi f r = forall ix. phi ix -> f r ix -> r ix
type Algebra phi r = Algebra' phi (PF phi) r
type AlgebraF' phi f g r = forall ix. phi ix -> f r ix -> g (r ix)
type AlgebraF phi g r = AlgebraF' phi (PF phi) g r
type CoAlgebra' phi f r = forall ix. phi ix -> r ix -> f r ix
type CoAlgebra phi r = CoAlgebra' phi (PF phi) r
type CoAlgebraF' phi f g r = forall ix. phi ix -> r ix -> g (f r ix)
type CoAlgebraF phi g r = CoAlgebraF' phi (PF phi) g r
type ParaAlgebra' phi f r = forall ix. phi ix -> f r ix -> ix -> r ix
type ParaAlgebra phi r = ParaAlgebra' phi (PF phi) r
type ParaAlgebraF' phi f g r = forall ix. phi ix -> f r ix -> ix -> g (r ix)
type ParaAlgebraF phi g r = ParaAlgebraF' phi (PF phi) g r
type AlgPart f r ix = f r ix -> r ix
type (:->) f g (r :: * -> *) ix = f r ix -> g r ix
type Algebra' phi f r = forall ix. phi ix -> f (K0 r) ix -> r
type Algebra phi r = Algebra' phi (PF phi) r
type AlgebraF' phi f g r = forall ix. phi ix -> f (K0 r) ix -> g r
type AlgebraF phi g r = AlgebraF' phi (PF phi) g r
type CoAlgebra' phi f r = forall ix. phi ix -> r -> f (K0 r) ix
type CoAlgebra phi r = CoAlgebra' phi (PF phi) r
type CoAlgebraF' phi f g r = forall ix. phi ix -> r -> g (f (K0 r) ix)
type CoAlgebraF phi g r = CoAlgebraF' phi (PF phi) g r
type ParaAlgebra' phi f r = forall ix. phi ix -> f (K0 r) ix -> ix -> r
type ParaAlgebra phi r = ParaAlgebra' phi (PF phi) r
type ParaAlgebraF' phi f g r = forall ix. phi ix -> f (K0 r) ix -> ix -> g r
type ParaAlgebraF phi g r = ParaAlgebraF' phi (PF phi) g r
type AlgPart f b ix = f (K0 b) ix -> b
type (:->) f g b ix = f b ix -> g b ix
type Algebra phi r = forall ix. phi ix -> Alg (PF phi) r ix
type Algebra phi r = forall ix. phi ix -> Alg (PF phi) r
type Occur = Int
type Key = Int
type Occur = Int
type Count = Int
type Vec = [Count]
type Tag = IORef ()
type Code_RHS a = IO a
type CompClause store rmsg code = rmsg -> store -> IO (Maybe (Code_RHS code))
type Cnt a = IO (Maybe (Code_RHS a))
type HashIdx = Int
type Location msg = IORef (List (InternalMsg msg))
type MultiStateTNull = MultiStateT []
type MultiState x = MultiStateT x Identity
type MultiStateTNull = MultiStateT []
type MultiState x = MultiStateT x Identity
type MultiStateTNull = MultiStateT []
type MultiState x = MultiStateT x Identity
type MultiReaderTNull = MultiReaderT []
type MultiReader x = MultiReaderT x Identity
type MultiReaderTNull = MultiReaderT []
type MultiReader x = MultiReaderT x Identity
type MultiReaderTNull = MultiReaderT []
type MultiReader x = MultiReaderT x Identity
type MultiWriterTNull = MultiWriterT []
type MultiWriter x a = MultiWriterT x Identity a
type MultiWriterTNull = MultiWriterT []
type MultiWriter x a = MultiWriterT x Identity a
type MultiWriterTNull = MultiWriterT []
type MultiWriter x a = MultiWriterT x Identity a
type MultiReaderTNull = MultiReaderT []
type MultiReader x = MultiReaderT x Identity
type MultiWriterTNull = MultiWriterT []
type MultiWriter x a = MultiWriterT x Identity a
type MultiStateTNull = MultiStateT []
type MultiState x = MultiStateT x Identity
type MultiRWSTNull = MultiRWST [] [] []
type MultiRWS r w s = MultiRWST r w s Identity
type MultiRWSTNull = MultiRWST [] [] []
type MultiRWS r w s = MultiRWST r w s Identity
type MultiRWSTNull = MultiRWST [] [] []
type MultiRWS r w s = MultiRWST r w s Identity
type Token = GenToken String EnumValToken String
type GramEnv = Env (Productions NF)
type PreGramEnv = Env (Productions TL)
type Line = Int
type Column = Int
type Filename = String
type Parser a = P (Str Char String LineCol) a
type ParseMsg = Message Token (Maybe Token)
type GramTrafo = Trafo Unit (Productions NF)
type PreGramTrafo = Trafo Unit (Productions TL)
type ExtGram env start nts = PreGramTrafo env () (Export start nts env)
type GramExt env start nts start' nts' = PreGramTrafo env (Export start nts env) (Export start' nts' env)
type Hash = Word32
type Articulation = (Average Double, Average Double)
type Dynamics = Average Double
type SoundId = String
type StringTuning = [Pitch]
type HarmonicPosition = Integer
type GlissandoRange = Ambitus Pitch
type Glissando = Ambitus Pitch
type Semitones = ChromaticSteps
type Semitones = ChromaticSteps
type Equal6 = Equal N6
type Equal12 = Equal N12
type Equal17 = Equal N17
type Equal24 = Equal N24
type Equal36 = Equal N36
type N20 = N10 :*: N2
type N30 = N10 :*: N3
type N17 = N10 :+: N7
type N24 = N20 :+: N4
type N36 = N30 :+: N6
type Spelling = Semitones -> Number
type ClefLine = StaffLines
type ClefOctave = Integer
type BasicNote = PartT BasicPart (TextT (TieT (SlideT (TremoloT (HarmonicT (ArticulationT Articulation (DynamicT Dynamics [Behavior Pitch])))))))
type StandardNote = PartT Part (ColorT (TextT (TremoloT (HarmonicT (SlideT (ArticulationT Articulation (DynamicT Dynamics [TieT Pitch])))))))
type Alignment = Duration
type LocalDuration = Alignment
type Positive = Natural
type AttributeClass a = (Typeable a, Monoid a, Semigroup a)
type TAttributeClass a = (Transformable a, AttributeClass a)
type HasPart' a = HasPart a a
type HasParts' a = HasParts a a
type HasPhrases' s a = HasPhrases s s a a
type Phrase a = Voice a
type MVoice a = Voice (Maybe a)
type PVoice a = [Either Duration (Phrase a)]
type TVoice a = Track (Phrase a)
type Interval a = Diff (Pitch a)
type HasPitch' a = HasPitch a a
type HasPitches' a = HasPitches a a
type PitchPair v w = (Num (Scalar v), IsInterval v, IsPitch w)
type AffinePair v w = (VectorSpace v, AffineSpace w)
type Transposable a = (HasPitches' a, AffinePair (Interval a) (Pitch a), PitchPair (Interval a) (Pitch a))
type DynamicLensLaws' s t a b = (Dynamic (SetDynamic a s) ~ a, SetDynamic (Dynamic t) s ~ t, SetDynamic a (SetDynamic b s) ~ SetDynamic a s)
type DynamicLensLaws s t = DynamicLensLaws' s t (Dynamic s) (Dynamic t)
type HasDynamics' a = HasDynamics a a
type HasDynamic' a = HasDynamic a a
type Level a = Diff (Dynamic a)
type Attenuable a = (HasDynamics a a, VectorSpace (Level a), AffineSpace (Dynamic a), IsDynamics (Dynamic a))
type HasArticulations' a = HasArticulations a a
type HasArticulation' a = HasArticulation a a
type MVoice a = Voice (Maybe a)
type IsMidi a = (IsPitch a, HasPart' a, Ord (Part a), Enum (Part a), Num (Pitch a), HasTremolo a, HasArticulation a a, Tiable a)
type HasOrdPart a = (HasPart' a, Ord (Part a))
type HasDynamic3 a a' a'' = (HasDynamic' a, HasDynamic' a'', HasDynamic a a', HasDynamic a' a'', HasDynamic a a'')
type HasDynamicNotation a b c = (HasDynamic3 a b c, Dynamic b ~ Ctxt (Dynamic a), Dynamic c ~ DynamicNotation, Real (Dynamic a), Part (SetDynamic (Dynamic a) a) ~ Part (SetDynamic DynamicNotation b))
type HasArticulation3 c d e = (HasArticulation' c, HasArticulation c d, HasArticulation d e, HasArticulation c e)
type HasArticulationNotation a b c = (HasArticulation3 a b c, Articulation b ~ Ctxt (Articulation a), Articulation c ~ ArticulationNotation, Articulation a ~ (Average Double, Average Double))
type Bpm = Duration
type NoteValue = Duration
type HasMidi a = (HasBackendNote Midi (BackendScoreEvent Midi a), HasBackendScore Midi a)
type HasSuperCollider a = (HasBackendNote SuperCollider (BackendScoreEvent SuperCollider a), HasBackendScore SuperCollider a)
type HasLilypond a = (HasBackendNote Lilypond (BackendScoreEvent Lilypond a), HasBackendScore Lilypond a)
type HasMusicXml a = (HasBackendNote MusicXml (BackendScoreEvent MusicXml a), HasBackendScore MusicXml a)
type IsSibelius a = (HasPitches' a, IsPitch a, HasPart' a, Part a ~ Part, HasArticulation' a, Articulation a ~ Articulation, HasDynamic' a, Dynamic a ~ Dynamics, HasText a, HasTremolo a, Tiable a)
type CDATA = String
type ID = String
type PCDATA = String
type YYYY_MM_DD = PCDATA
type Tenths = CDATA
type Layout_Tenths = PCDATA
type Yes_No = Bool
type Yes_No_Number = CDATA
type Position = (Maybe Tenths, Maybe Tenths, Maybe Tenths, Maybe Tenths)
type Placement = Maybe Placement_
type Orientation = Maybe Orientation_
type Directive = Maybe Yes_No
type Bezier = (Maybe CDATA, Maybe CDATA, Maybe Tenths, Maybe Tenths, Maybe Tenths, Maybe Tenths)
type Font = (Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe CDATA)
type Color = Maybe CDATA
type Text_Decoration = (Maybe Number_Of_Lines, Maybe Number_Of_Lines, Maybe Number_Of_Lines)
type Justify = Maybe Justify_
type Halign = Maybe Halign_
type Valign = Maybe Valign_
type Valign_Image = Maybe Valign_Image_
type Letter_Spacing = Maybe CDATA
type Line_Height = Maybe CDATA
type Text_Direction = Maybe Text_Direction_
type Text_Rotation = Maybe CDATA
type Print_Style = (Position, Font, Color)
type Line_Shape = Maybe Line_Shape_
type Line_Type = Maybe Line_Type_
type Print_Object = Maybe Yes_No
type Print_Spacing = Maybe Yes_No
type Printout = (Print_Object, Maybe Yes_No, Print_Spacing, Maybe Yes_No)
type Text_Formatting = (Justify, Halign, Valign, Print_Style, Text_Decoration, Text_Rotation, Letter_Spacing, Line_Height, Maybe CDATA, Text_Direction, Maybe Text_Formatting_)
type Level_Display = (Maybe Yes_No, Maybe Yes_No, Maybe Symbol_Size)
type Trill_Sound = (Maybe Trill_Sound_A, Maybe Trill_Sound_B, Maybe Trill_Sound_C, Maybe Bool, Maybe CDATA, Maybe CDATA, Maybe CDATA)
type Bend_Sound = (Maybe Yes_No, Maybe CDATA, Maybe CDATA, Maybe CDATA)
type Document_Attributes = CDATA
type Editorial = (Maybe Footnote, Maybe Level)
type Editorial_Voice = (Maybe Footnote, Maybe Level, Maybe Voice)
type Footnote = (Text_Formatting, PCDATA)
type Level = ((Maybe Yes_No, Level_Display), PCDATA)
type Voice = PCDATA
type Fermata = ((Maybe Fermata_, Print_Style), PCDATA)
type Wavy_Line = ((Start_Stop_Continue, Maybe Number_Level, Position, Placement, Color, Trill_Sound), ())
type Staff = PCDATA
type Segno = (Print_Style, ())
type Coda = (Print_Style, ())
type Actual_Notes = PCDATA
type Normal_Notes = PCDATA
type Normal_Type = PCDATA
type Normal_Dot = ()
type Dynamics = ((Print_Style, Placement), [Dynamics_])
type P = ()
type PP = ()
type PPP = ()
type PPPP = ()
type PPPPP = ()
type PPPPPP = ()
type FFFFFF = ()
type FFFFF = ()
type FFFF = ()
type FFF = ()
type FF = ()
type F = ()
type MP = ()
type MF = ()
type SF = ()
type SFP = ()
type SFPP = ()
type FP = ()
type RF = ()
type RFZ = ()
type SFZ = ()
type SFFZ = ()
type FZ = ()
type Other_Dynamics = PCDATA
type Fingering = ((Maybe Yes_No, Maybe Yes_No, Print_Style, Placement), PCDATA)
type Fret = ((Font, Color), PCDATA)
type String = ((Print_Style, Placement), PCDATA)
type Tuning_Step = PCDATA
type Tuning_Alter = PCDATA
type Tuning_Octave = PCDATA
type Display_Text = (Text_Formatting, PCDATA)
type Accidental_Text = (Text_Formatting, PCDATA)
type Part_Name_Display = (Print_Object, [Part_Name_Display_])
type Part_Abbreviation_Display = (Print_Object, [Part_Abbreviation_Display_])
type Midi_Instrument = (ID, (Maybe Midi_Channel, Maybe Midi_Name, Maybe Midi_Bank, Maybe Midi_Program, Maybe Midi_Unpitched, Maybe Volume, Maybe Pan, Maybe Elevation))
type Midi_Channel = PCDATA
type Midi_Name = PCDATA
type Midi_Bank = PCDATA
type Midi_Program = PCDATA
type Midi_Unpitched = PCDATA
type Volume = PCDATA
type Pan = PCDATA
type Elevation = PCDATA
type Attributes = (Editorial, Maybe Divisions, [Key], [Time], Maybe Staves, Maybe Part_Symbol, Maybe Instruments, [Clef], [Staff_Details], Maybe Transpose, [Directive], [Measure_Style])
type Key = ((Maybe CDATA, Print_Style, Print_Object), (Key_, [Key_Octave]))
type Cancel = (Maybe Left_Right, PCDATA)
type Fifths = PCDATA
type Mode = PCDATA
type Key_Step = PCDATA
type Key_Alter = PCDATA
type Key_Octave = ((CDATA, Maybe Yes_No), PCDATA)
type Divisions = PCDATA
type Time = ((Maybe CDATA, Maybe Time_A, Print_Style, Print_Object), Time_B)
type Beats = PCDATA
type Beat_Type = PCDATA
type Senza_Misura = ()
type Staves = PCDATA
type Part_Symbol = ((Maybe CDATA, Maybe CDATA, Position, Color), PCDATA)
type Instruments = PCDATA
type Clef = ((Maybe CDATA, Maybe Yes_No, Maybe Symbol_Size, Print_Style, Print_Object), (Sign, Maybe Line, Maybe Clef_Octave_Change))
type Sign = PCDATA
type Line = PCDATA
type Clef_Octave_Change = PCDATA
type Staff_Details = ((Maybe CDATA, Maybe Staff_Details_, Print_Object, Print_Spacing), (Maybe Staff_Type, Maybe Staff_Lines, [Staff_Tuning], Maybe Capo, Maybe Staff_Size))
type Staff_Type = PCDATA
type Staff_Lines = PCDATA
type Staff_Tuning = (CDATA, (Tuning_Step, Maybe Tuning_Alter, Tuning_Octave))
type Capo = PCDATA
type Staff_Size = PCDATA
type Transpose = (Maybe Diatonic, Chromatic, Maybe Octave_Change, Maybe Double)
type Diatonic = PCDATA
type Chromatic = PCDATA
type Octave_Change = PCDATA
type Double = ()
type Directive = ((Print_Style, Maybe CDATA), CDATA)
type Measure_Style = ((Maybe CDATA, Font, Color), Measure_Style_)
type Slash_Type = PCDATA
type Slash_Dot = ()
type Multiple_Rest = (Maybe Yes_No, PCDATA)
type Measure_Repeat = ((Start_Stop, Maybe CDATA), PCDATA)
type Beat_Repeat = ((Start_Stop, Maybe CDATA, Maybe Yes_No), Maybe (Slash_Type, [Slash_Dot]))
type Slash = ((Start_Stop, Maybe Yes_No, Maybe Yes_No), Maybe (Slash_Type, [Slash_Dot]))
type Identification = ([Creator], [Rights], Maybe Encoding, Maybe Source, [Relation], Maybe Miscellaneous)
type Creator = (Maybe CDATA, PCDATA)
type Rights = (Maybe CDATA, CDATA)
type Encoding = [Encoding_]
type Encoding_Date = YYYY_MM_DD
type Encoder = (Maybe CDATA, PCDATA)
type Software = PCDATA
type Encoding_Description = PCDATA
type Supports = ((Yes_No, CDATA, Maybe CDATA, Maybe CDATA), ())
type Source = PCDATA
type Relation = (Maybe CDATA, CDATA)
type Miscellaneous = [Miscellaneous_Field]
type Miscellaneous_Field = (CDATA, PCDATA)
type Barline = ((Barline_, Maybe CDATA, Maybe CDATA, Maybe CDATA), (Maybe Bar_Style, Editorial, Maybe Wavy_Line, Maybe Segno, Maybe Coda, Maybe (Fermata, Maybe Fermata), Maybe Ending, Maybe Repeat))
type Bar_Style = (Color, PCDATA)
type Ending = ((CDATA, Ending_, Print_Object, Print_Style, Maybe Tenths, Maybe Tenths, Maybe Tenths), PCDATA)
type Repeat = ((Repeat_, Maybe CDATA), ())
type Link_Attributes = (CDATA, CDATA, CDATA, Maybe CDATA, Maybe CDATA, Link_Attributes_A, Link_Attributes_B)
type Link = ((Link_Attributes, Maybe CDATA, Maybe CDATA, Maybe CDATA, Position), ())
type Bookmark = ((ID, Maybe CDATA, Maybe CDATA, Maybe CDATA), ())
type Scaling = (Millimeters, Tenths)
type Millimeters = PCDATA
type Tenths = Layout_Tenths
type Left_Margin = Layout_Tenths
type Right_Margin = Layout_Tenths
type Top_Margin = Layout_Tenths
type Bottom_Margin = Layout_Tenths
type Page_Layout = (Maybe (Page_Height, Page_Width), Maybe (Page_Margins, Maybe Page_Margins))
type Page_Height = Layout_Tenths
type Page_Width = Layout_Tenths
type Page_Margins = (Maybe Page_Margins_, (Left_Margin, Right_Margin, Top_Margin, Bottom_Margin))
type System_Layout = (Maybe System_Margins, Maybe System_Distance, Maybe Top_System_Distance)
type System_Margins = (Left_Margin, Right_Margin)
type System_Distance = Layout_Tenths
type Top_System_Distance = Layout_Tenths
type Staff_Layout = (Maybe CDATA, Maybe Staff_Distance)
type Staff_Distance = Layout_Tenths
type Measure_Layout = Maybe Measure_Distance
type Measure_Distance = Layout_Tenths
type Appearance = ([Line_Width], [Note_Size], [Other_Appearance])
type Line_Width = (CDATA, Layout_Tenths)
type Note_Size = (Note_Size_, PCDATA)
type Other_Appearance = (CDATA, PCDATA)
type Direction = ((Placement, Directive), ([Direction_Type], Maybe Offset, Editorial_Voice, Maybe Staff, Maybe Sound))
type Direction_Type = Direction_Type_
type Rehearsal = ((Print_Style, Text_Decoration, Maybe CDATA, Text_Direction, Text_Rotation, Maybe Rehearsal_), PCDATA)
type Words = (Text_Formatting, PCDATA)
type Wedge = ((Wedge_, Maybe Number_Level, Maybe CDATA, Position, Color), ())
type Dashes = ((Start_Stop, Maybe Number_Level, Position, Color), ())
type Bracket = ((Start_Stop, Maybe Number_Level, Bracket_, Maybe Tenths, Line_Type, Position, Color), ())
type Pedal = ((Pedal_, Maybe Yes_No, Print_Style), ())
type Metronome = ((Print_Style, Maybe Yes_No), Metronome_A)
type Beat_Unit = PCDATA
type Beat_Unit_Dot = ()
type Per_Minute = (Font, PCDATA)
type Metronome_Note = (Metronome_Type, [Metronome_Dot], [Metronome_Beam], Maybe Metronome_Tuplet)
type Metronome_Relation = PCDATA
type Metronome_Type = PCDATA
type Metronome_Dot = ()
type Metronome_Beam = (Beam_Level, PCDATA)
type Metronome_Tuplet = ((Start_Stop, Maybe Yes_No, Maybe Metronome_Tuplet_), (Actual_Notes, Normal_Notes, Maybe (Normal_Type, [Normal_Dot])))
type Octave_Shift = ((Octave_Shift_, Maybe Number_Level, CDATA, Print_Style), ())
type Harp_Pedals = (Print_Style, [Pedal_Tuning])
type Pedal_Tuning = (Pedal_Step, Pedal_Alter)
type Pedal_Step = PCDATA
type Pedal_Alter = PCDATA
type Damp = (Print_Style, ())
type Damp_All = (Print_Style, ())
type Eyeglasses = (Print_Style, ())
type Scordatura = [Accord]
type Accord = (CDATA, (Tuning_Step, Maybe Tuning_Alter, Tuning_Octave))
type Image = ((CDATA, CDATA, Position, Halign, Valign_Image), ())
type Accordion_Registration = (Print_Style, (Maybe Accordion_High, Maybe Accordion_Middle, Maybe Accordion_Low))
type Accordion_High = ()
type Accordion_Middle = PCDATA
type Accordion_Low = ()
type Other_Direction = ((Print_Object, Print_Style), PCDATA)
type Offset = (Maybe Yes_No, PCDATA)
type Harmony_Chord = (Harmony_Chord_, Kind, Maybe Inversion, Maybe Bass, [Degree])
type Harmony = ((Maybe Harmony_, Print_Object, Maybe Yes_No, Print_Style, Placement), ([Harmony_Chord], Maybe Frame, Maybe Offset, Editorial, Maybe Staff))
type Root = (Root_Step, Maybe Root_Alter)
type Root_Step = ((Maybe CDATA, Print_Style), PCDATA)
type Root_Alter = ((Print_Object, Print_Style, Maybe Left_Right), PCDATA)
type Function = (Print_Style, PCDATA)
type Kind = ((Maybe Yes_No, Maybe CDATA, Maybe Yes_No, Maybe Yes_No, Maybe Yes_No, Print_Style, Halign, Valign), PCDATA)
type Inversion = (Print_Style, PCDATA)
type Bass = (Bass_Step, Maybe Bass_Alter)
type Bass_Step = ((Maybe CDATA, Print_Style), PCDATA)
type Bass_Alter = ((Print_Object, Print_Style, Maybe Bass_Alter_), PCDATA)
type Degree = (Print_Object, (Degree_Value, Degree_Alter, Degree_Type))
type Degree_Value = ((Maybe CDATA, Print_Style), PCDATA)
type Degree_Alter = ((Print_Style, Maybe Yes_No), PCDATA)
type Degree_Type = ((Maybe CDATA, Print_Style), PCDATA)
type Frame = ((Position, Color, Halign, Valign, Maybe Tenths, Maybe Tenths), (Frame_Strings, Frame_Frets, Maybe First_Fret, [Frame_Note]))
type Frame_Strings = PCDATA
type Frame_Frets = PCDATA
type First_Fret = ((Maybe CDATA, Maybe Left_Right), PCDATA)
type Frame_Note = (String, Fret, Maybe Fingering, Maybe Barre)
type Barre = ((Start_Stop, Color), ())
type Grouping = ((Start_Stop_Single, CDATA, Maybe CDATA), [Feature])
type Feature = (Maybe CDATA, PCDATA)
type Print = ((Maybe Tenths, Maybe Yes_No, Maybe Yes_No, Maybe CDATA, Maybe CDATA), (Maybe Page_Layout, Maybe System_Layout, [Staff_Layout], Maybe Measure_Layout, Maybe Measure_Numbering, Maybe Part_Name_Display, Maybe Part_Abbreviation_Display))
type Measure_Numbering = (Print_Style, PCDATA)
type Sound = ((Maybe CDATA, Maybe CDATA, Maybe Yes_No, Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe Yes_No, Maybe CDATA, Maybe CDATA, Maybe Yes_No, Maybe CDATA, Maybe CDATA, Maybe Yes_No_Number, Maybe Yes_No_Number, Maybe Yes_No_Number), ([Midi_Instrument], Maybe Offset))
type Full_Note = (Maybe Chord, Full_Note_)
type Note = ((Print_Style, Printout, Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe Yes_No), (Note_, Maybe Instrument, Editorial_Voice, Maybe Type, [Dot], Maybe Accidental, Maybe Time_Modification, Maybe Stem, Maybe Notehead, Maybe Staff, [Beam], [Notations], [Lyric]))
type Pitch = (Step, Maybe Alter, Octave)
type Step = PCDATA
type Alter = PCDATA
type Octave = PCDATA
type Cue = ()
type Grace = ((Maybe CDATA, Maybe CDATA, Maybe CDATA, Maybe Yes_No), ())
type Chord = ()
type Unpitched = Maybe (Display_Step, Display_Octave)
type Display_Step = PCDATA
type Display_Octave = PCDATA
type Rest = Maybe (Display_Step, Display_Octave)
type Duration = PCDATA
type Tie = (Start_Stop, ())
type Instrument = (ID, ())
type Type = (Maybe Symbol_Size, PCDATA)
type Dot = ((Print_Style, Placement), ())
type Accidental = ((Maybe Yes_No, Maybe Yes_No, Level_Display, Print_Style), PCDATA)
type Time_Modification = (Actual_Notes, Normal_Notes, Maybe (Normal_Type, [Normal_Dot]))
type Stem = ((Position, Color), PCDATA)
type Notehead = ((Maybe Yes_No, Maybe Yes_No, Font, Color), PCDATA)
type Beam = ((Beam_Level, Maybe Yes_No, Maybe Beam_, Color), PCDATA)
type Notations = (Editorial, [Notations_])
type Tied = ((Start_Stop, Maybe Number_Level, Line_Type, Position, Placement, Orientation, Bezier, Color), ())
type Slur = ((Start_Stop_Continue, Number_Level, Line_Type, Position, Placement, Orientation, Bezier, Color), ())
type Tuplet = ((Start_Stop, Maybe Number_Level, Maybe Yes_No, Maybe Tuplet_, Maybe Tuplet_, Line_Shape, Position, Placement), (Maybe Tuplet_Actual, Maybe Tuplet_Normal))
type Tuplet_Actual = (Maybe Tuplet_Number, Maybe Tuplet_Type, [Tuplet_Dot])
type Tuplet_Normal = (Maybe Tuplet_Number, Maybe Tuplet_Type, [Tuplet_Dot])
type Tuplet_Number = ((Font, Color), PCDATA)
type Tuplet_Type = ((Font, Color), PCDATA)
type Tuplet_Dot = ((Font, Color), ())
type Glissando = ((Start_Stop, Number_Level, Line_Type, Print_Style), PCDATA)
type Slide = ((Start_Stop, Number_Level, Line_Type, Print_Style, Bend_Sound), PCDATA)
type Other_Notation = ((Start_Stop_Single, Number_Level, Print_Object, Print_Style, Placement), PCDATA)
type Ornaments = [(Ornaments_, [Accidental_Mark])]
type Trill_Mark = ((Print_Style, Placement, Trill_Sound), ())
type Turn = ((Print_Style, Placement, Trill_Sound), ())
type Delayed_Turn = ((Print_Style, Placement, Trill_Sound), ())
type Inverted_Turn = ((Print_Style, Placement, Trill_Sound), ())
type Shake = ((Print_Style, Placement, Trill_Sound), ())
type Mordent = ((Maybe Yes_No, Print_Style, Placement, Trill_Sound), ())
type Inverted_Mordent = ((Maybe Yes_No, Print_Style, Placement, Trill_Sound), ())
type Schleifer = ((Print_Style, Placement), ())
type Tremolo = ((Start_Stop_Single, Print_Style, Placement), PCDATA)
type Other_Ornament = ((Print_Style, Placement), PCDATA)
type Accidental_Mark = ((Print_Style, Placement), CDATA)
type Technical = [Technical_]
type Up_Bow = ((Print_Style, Placement), ())
type Down_Bow = ((Print_Style, Placement), ())
type Harmonic = ((Print_Object, Print_Style, Placement), (Maybe Harmonic_A, Maybe Harmonic_B))
type Natural = ()
type Artificial = ()
type Base_Pitch = ()
type Touching_Pitch = ()
type Sounding_Pitch = ()
type Open_String = ((Print_Style, Placement), ())
type Thumb_Position = ((Print_Style, Placement), ())
type Pluck = ((Print_Style, Placement), PCDATA)
type Double_Tongue = ((Print_Style, Placement), ())
type Triple_Tongue = ((Print_Style, Placement), ())
type Stopped = ((Print_Style, Placement), ())
type Snap_Pizzicato = ((Print_Style, Placement), ())
type Hammer_On = ((Start_Stop, Number_Level, Print_Style, Placement), PCDATA)
type Pull_Off = ((Start_Stop, Number_Level, Print_Style, Placement), PCDATA)
type Bend = ((Print_Style, Bend_Sound), (Bend_Alter, Maybe Bend_, Maybe With_Bar))
type Bend_Alter = PCDATA
type Pre_Bend = ()
type Release = ()
type With_Bar = ((Print_Style, Placement), CDATA)
type Tap = ((Print_Style, Placement), CDATA)
type Heel = ((Maybe Yes_No, Print_Style, Placement), ())
type Toe = ((Maybe Yes_No, Print_Style, Placement), ())
type Fingernails = ((Print_Style, Placement), ())
type Other_Technical = ((Print_Style, Placement), CDATA)
type Articulations = [Articulations_]
type Accent = ((Print_Style, Placement), ())
type Strong_Accent = ((Print_Style, Placement, Up_Down), ())
type Staccato = ((Print_Style, Placement), ())
type Tenuto = ((Print_Style, Placement), ())
type Detached_Legato = ((Print_Style, Placement), ())
type Staccatissimo = ((Print_Style, Placement), ())
type Spiccato = ((Print_Style, Placement), ())
type Scoop = ((Line_Shape, Line_Type, Print_Style, Placement), ())
type Plop = ((Line_Shape, Line_Type, Print_Style, Placement), ())
type Doit = ((Line_Shape, Line_Type, Print_Style, Placement), ())
type Falloff = ((Line_Shape, Line_Type, Print_Style, Placement), ())
type Breath_Mark = ((Print_Style, Placement), ())
type Caesura = ((Print_Style, Placement), ())
type Stress = ((Print_Style, Placement), ())
type Unstress = ((Print_Style, Placement), ())
type Other_Articulation = ((Print_Style, Placement), ())
type Arpeggiate = ((Maybe Number_Level, Maybe Up_Down, Position, Placement, Color), ())
type Non_Arpeggiate = ((Top_Bottom, Maybe Number_Level, Position, Placement, Color), ())
type Lyric = ((Maybe CDATA, Maybe CDATA, Justify, Position, Placement, Color), (Lyric_, Maybe End_Line, Maybe End_Paragraph, Editorial))
type Text = ((Font, Color, Text_Decoration, Text_Rotation, Letter_Spacing, Maybe CDATA, Text_Direction), CDATA)
type Syllabic = PCDATA
type Elision = ((Font, Color), CDATA)
type Extend = ((Font, Color), ())
type Laughing = ()
type Humming = ()
type End_Line = ()
type End_Paragraph = ()
type Figured_Bass = ((Print_Style, Printout, Maybe Yes_No), ([Figure], Maybe Duration, Editorial))
type Figure = (Maybe Prefix, Maybe Figure_Number, Maybe Suffix, Maybe Extend)
type Prefix = (Print_Style, CDATA)
type Figure_Number = (Print_Style, PCDATA)
type Suffix = (Print_Style, PCDATA)
type Backup = (Duration, Editorial)
type Forward = (Duration, Editorial_Voice, Maybe Staff)
type Work = (Maybe Work_Number, Maybe Work_Title, Maybe Opus)
type Work_Number = PCDATA
type Work_Title = PCDATA
type Opus = (Link_Attributes, ())
type Movement_Number = PCDATA
type Movement_Title = PCDATA
type Defaults = (Maybe Scaling, Maybe Page_Layout, Maybe System_Layout, [Staff_Layout], Maybe Appearance, Maybe Music_Font, Maybe Word_Font, [Lyric_Font], [Lyric_Language])
type Music_Font = (Font, ())
type Word_Font = (Font, ())
type Lyric_Font = ((Maybe CDATA, Maybe CDATA, Font), ())
type Lyric_Language = ((Maybe CDATA, Maybe CDATA, CDATA), ())
type Credit = (Maybe CDATA, ([Link], [Bookmark], Credit_))
type Credit_Words = (Text_Formatting, PCDATA)
type Credit_Image = ((CDATA, CDATA, Position, Halign, Valign_Image), ())
type Part_List = ([Part_Group], Score_Part, [Part_List_])
type Score_Part = (ID, (Maybe Identification, Part_Name, Maybe Part_Name_Display, Maybe Part_Abbreviation, Maybe Part_Abbreviation_Display, [Group], [Score_Instrument], Maybe Midi_Device, [Midi_Instrument]))
type Part_Name = ((Print_Style, Print_Object, Justify), PCDATA)
type Part_Abbreviation = ((Print_Style, Print_Object, Justify), PCDATA)
type Part_Group = ((Start_Stop, CDATA), (Maybe Group_Name, Maybe Group_Name_Display, Maybe Group_Abbreviation, Maybe Group_Abbreviation_Display, Maybe Group_Symbol, Maybe Group_Barline, Maybe Group_Time, Editorial))
type Group_Name = ((Print_Style, Justify), PCDATA)
type Group_Name_Display = (Print_Object, [Group_Name_Display_])
type Group_Abbreviation = ((Print_Style, Justify), PCDATA)
type Group_Abbreviation_Display = (Print_Object, [Group_Abbreviation_Display_])
type Group_Symbol = ((Position, Color), PCDATA)
type Group_Barline = (Color, PCDATA)
type Group_Time = ()
type Score_Instrument = (ID, (Instrument_Name, Maybe Instrument_Abbreviation, Maybe Score_Instrument_))
type Instrument_Name = PCDATA
type Instrument_Abbreviation = PCDATA
type Solo = ()
type Ensemble = PCDATA
type Midi_Device = (Maybe CDATA, PCDATA)
type Group = PCDATA
type Music_Data = [Music_Data_]
type Score_Header = (Maybe Work, Maybe Movement_Number, Maybe Movement_Title, Maybe Identification, Maybe Defaults, [Credit], Part_List)
type Score_Partwise = (Document_Attributes, (Score_Header, [Part]))
type Part = (ID, [Measure])
type Measure = ((CDATA, Maybe Yes_No, Maybe Yes_No, Maybe Tenths), Music_Data)
type Score_Timewise = (Document_Attributes, (Score_Header, [Measure]))
type Measure = ((CDATA, Maybe Yes_No, Maybe Yes_No, Maybe Tenths), [Part])
type Part = (ID, Music_Data)
type Opus = (Document_Attributes, (Maybe Title, [Opus_]))
type Score = ((Link_Attributes, Maybe Yes_No), ())
type Opus_Link = (Link_Attributes, ())
type Title = PCDATA
type Container = Rootfiles
type Rootfiles = [Rootfile]
type Rootfile = ((CDATA, Maybe CDATA), ())
type Pitch = (PitchClass, Maybe Semitones, Octaves)
type DisplayPitch = (PitchClass, Octaves)
type Duration = Divs
type NoteType = (NoteVal, Maybe NoteSize)
type IsChord = Bool
type Tie = StartStop
type Pitch = (PitchClass, Maybe Semitones, Octaves)
type DisplayPitch = (PitchClass, Octaves)
type Duration = Divs
type NoteType = (NoteVal, Maybe NoteSize)
type StartStop = StartStopContinueChange
type StartStopChange = StartStopContinueChange
type StartStopContinue = StartStopContinueChange
type IsChord = Bool
type Tie = StartStop
type Pitch = (PitchClass, Maybe Semitones, Octaves)
type DisplayPitch = (PitchClass, Octaves)
type Duration = Divs
type NoteType = (NoteVal, Maybe NoteSize)
type StartStop = StartStopContinueChange
type StartStopChange = StartStopContinueChange
type StartStopContinue = StartStopContinueChange
type KeyPath = [Key]
type UDeque = Deque MVector
type SDeque = Deque MVector
type BDeque = Deque MVector
type MutableQueue c = (MutablePopFront c, MutablePushBack c)
type MutableStack c = (MutablePopFront c, MutablePushFront c)
type MutableDeque c = (MutableQueue c, MutablePushFront c, MutablePopBack c)
type MEnumerator s m a = MIteratee s m a -> m (MIteratee s m a)
type MEnumeratee sFrom sTo m a = MIteratee sTo m a -> MIteratee sFrom m (MIteratee sTo m a)
type GenIO = Gen (PrimState IO)
type GenST s = Gen (PrimState (ST s))
type CondensedTableV = CondensedTable Vector
type CondensedTableU = CondensedTable Vector
type RandIO a = Rand IO a
type RandST s a = Rand (ST s) a
type CondensedTableV = CondensedTable Vector
type CondensedTableU = CondensedTable Vector
type Page m = ByteString -> m ()
type Seconds = Word
type FieldFlag = FieldFlags
type MYSQL_ROW = Ptr (Ptr CChar)
type MYSQL_ROW_OFFSET = Ptr MYSQL_ROWS
type MyBool = CChar
type Seconds = Word
type MySQL = Reader Connection
type TStateT tag s m = Tagged tag (StateT s m)
type TErrorT tag error m = Tagged tag (ErrorT error m)
type ParserError = String
type MetricList = [(String, Metric)]
type MetricList = [(String, Metric)]
type ParserError = String
type UpperCase = String
type LowerCase = String
type Tag = String
type Proofs = [(Tag, Rule)]
type TaggedTerm = (Tag, Term)
type Spec = SpecM ()
type Expectation = IO ()
type TyVar = Int
type QType = ([TyVar], Type)
type TySubst = [(Int, Type)]
type TyEnv = [(VarName, QType)]
type NS = Compose ((,) Query) (Compose ((->) Query) ((->) Element))
type MsgCallback = NatsSID -> String -> ByteString -> Maybe String -> IO ()
type (~>) f g = forall x. f x -> g x
type Chunk = Either Int ByteString
type Unit = StateT Nemesis IO ()
type NeType = Text
type Form = Text
type Label = Text
type DAWG = DAWG Trans Char ()
type Dict = DAWG (Set Label)
type Word = Text
type NE = Text
type Ob = ([Int], Text)
type Lb = Label NE
type Ox a = Ox Word Text a
type Schema a = Vector Word -> Int -> Ox a
type Entry a = Maybe (Body a)
type Block a = Vector Word -> [Int] -> Ox a
type Match = [Text]
type Body = ByteString
type Form = MultiMap
type Host = ByteString
type Path = Text
type Query = MultiMap
type Application = Request -> IO Response
type Application = Request -> IO Response
type BodyLength = Word64
type ActionT m a = VerbListenerT (FileExtListenerT Response m a) m a
type NestedSets a = [NestedSetsNode a]
type Position = (Int, Int)
type Switch = Word64
type Port = Word16
type Vlan = Word16
type Word48 = EthernetAddress
type Switch = Word64
type Port = Word16
type Vlan = Word16
type Word48 = EthernetAddress
type Topo = Gr () Port
type Attributes = Map Int ByteString
type Ident = String
type Size = Int
type ConstExpr = Expr
type LValue = Expr
type PpmParseResult = Either String ([PPM], Maybe ByteString)
type RawOID = [OIDpart]
type OIDpart = Word64
type Hostname = ByteString
type Community = ByteString
type Port = (SwitchID, PortID)
type Link = Set Port
type Topology = Set Link
type Clause = [Literal]
type Literal = PacketPredicate
type Time = Double
type ReactHandle a b = IORef (ReactState a b)
type DTime = Double
type SwitchMessage = TCPMessage (TransactionID, SCMessage)
type SwitchOutput = [(SockAddr, (TransactionID, CSMessage))]
type TrafficGenerator = SF () (Event PacketSendCommand)
type PacketSendCommand = [(IPAddress, UDPPort, String)]
type ConsoleMessage = String
type UDPPort = Word16
type FlowRule = (PacketPredicate, ActionSequence, TimeOut, TimeOut)
type PrioritizedFlowRule = (Priority, FlowRule)
type SwitchTable = [SwitchRecord]
type PortTable = [PortRecord]
type HostDirectionMap = Map (SwitchID, EthernetAddress) PortID
type HostLocationMap = Map EthernetAddress (SwitchID, PortID)
type Partition a = Set (Set a)
type ControllerTCPPort = Int
type SwitchPort = (Switch, Port)
type Weight = Double
type Put = PutM ()
type IPAddressPrefix = (IPAddress, PrefixLength)
type PrefixLength = Word8
type IPPacket = IPHeader :*: (IPBody :*: HNil)
type DifferentiatedServicesCodePoint = Word8
type FragOffset = Word16
type IPProtocol = Word8
type IPTypeOfService = Word8
type TransportPort = Word16
type ICMPHeader = (ICMPType, ICMPCode)
type ICMPType = Word8
type ICMPCode = Word8
type TCPHeader = (TCPPortNumber, TCPPortNumber)
type TCPPortNumber = Word16
type UDPHeader = (UDPPortNumber, UDPPortNumber)
type UDPPortNumber = Word16
type EthernetFrame = EthernetHeader :*: (EthernetBody :*: HNil)
type EthernetTypeCode = Word16
type VLANPriority = Word8
type VLANID = Word16
type PortID = Word16
type PortFeatures = [PortFeature]
type PortStatus = (PortStatusUpdateReason, Port)
type MaxLenToSendController = Word16
type VendorID = Word32
type QueueID = Word32
type ActionSequence = [Action]
type SwitchID = Word64
type QueueLength = Word16
type BufferID = Word32
type NumBytes = Int
type FlowTableID = Word8
type Cookie = Word64
type Priority = Word16
type MoreToFollowFlag = Bool
type TransactionID = Word32
type ServerPortNumber = Word16
type HostName = String
type ServerPortNumber = Word16
type LinkID = ((SwitchID, PortID), (SwitchID, PortID))
type Weight = Double
type WireP s e = Wire s e Identity
type SimpleWire = Wire (Timed NominalDiffTime ()) () Identity
type WireP s e = Wire s e Identity
type SimpleWire = Wire (Timed NominalDiffTime ()) () Identity
type GLFWInput = State GLFWInputState
type GLFWInputT m = StateT GLFWInputState m
type HostAddress = Word32
type HostAddress6 = (Word32, Word32, Word32, Word32)
type FlowInfo = Word32
type ScopeID = Word32
type HostAddress = Word32
type HostAddress6 = (Word32, Word32, Word32, Word32)
type FlowInfo = Word32
type ScopeID = Word32
type ProtocolNumber = CInt
type HostName = String
type ServiceName = String
type HostName = String
type ServiceName = String
type ProtocolName = String
type ProtocolNumber = CInt
type NetworkName = String
type NetworkAddr = CULong
type HostName = String
type Line = [Token]
type I2PError = I2PException
type HostName = HostName
type PortNumber = ServiceName
type EndPoint = (HostName, PortNumber)
type HostName = HostName
type PortNumber = PortNumber
type TorError = TorException
type Responder a = Request -> Response ByteString -> a
type RequestTransformer = Endo Request
type ParseC a = ByteString -> Result a
type Client = ByteString -> IO ByteString
type HexString = Text
type TransactionID = HexString
type BTC = Fixed Satoshi
type Account = Text
type Address = HexString
type PrivateKey = Text
type Client = ByteString -> IO ByteString
type Client = ByteString -> IO ByteString
type Client = ByteString -> IO ByteString
type RawTransaction = HexString
type Client = ByteString -> IO ByteString
type TransactionID = HexString
type BTC = Fixed Satoshi
type BlockHash = HexString
type Client = ByteString -> IO ByteString
type Signature = HexString
type Client = ByteString -> IO ByteString
type HexString = Text
type TransactionID = HexString
type BTC = Fixed Satoshi
type Account = Text
type Address = HexString
type BlockHash = HexString
type RawTransaction = HexString
type Signature = HexString
type Application m = AppData m -> m ()
type IP = Either IPv4 IPv6
type IPHeader = Either IPv4Header IPv6Header
type Bytes = Int
type Serializer = ReaderT Endianness (StateT Bytes PutM) ()
type Deserializer a = ReaderT Endianness Get a
type Handler = Message -> IO ()
type MatchRule = [MatchClause]
type HostName = String
type Wire m a = Interface m a a
type Chunk = UArray Int Word8
type Netmask = Addr
type UDP_API m = TimedInterface m (Addr, Packet InPacket) (Addr, Packet OutPacket)
type Option = Word8
type Peer = (Addr, Port)
type Client m p = Client' m (p InPacket) (p OutPacket)
type Client_ m p = Client' m p p
type Client' m i o = Interface m (Packet i) (Packet o)
type Filename = String
type Mode = String
type BlockNr = Word16
type Data = UArray Int Word8
type ErrMsg = String
type CacheDump = [(Addr, Maybe Addr)]
type Client_ m p = Interface m p (Packet p)
type Client m p = Interface m (p InPacket) (Packet (p OutPacket))
type Net4Addr = NetAddr IP4
type Net6Addr = NetAddr IP6
type Inet4Addr = InetAddr IP4
type Inet6Addr = InetAddr IP6
type Host = ByteString
type Group = ByteString
type Bucket = ByteString
type HostName = String
type Group = ByteString
type Bucket = ByteString
type Group = ByteString
type Bucket = ByteString
type Group = ByteString
type Bucket = ByteString
type Group = ByteString
type Bucket = ByteString
type Group = ByteString
type Bucket = ByteString
type MediaType = ((String, String), [(String, String)])
type Source = IO SourceResult
type WebMonad = StateT WebState IO
type TimeToLive = Int
type LoopbackMode = Bool
type Route = String
type Handler = TValue -> IO TValue
type ServerRoutine = (Handle, HostName, PortNumber) -> IO ()
type ServiceHandler a = Service a -> IO ()
type HostName = String
type ServiceName = String
type Seconds = Int
type Microseconds = Int64
type ConnectionId = Word64
type EndPointId = Word32
type LightweightConnectionId = Word32
type RouteResponder = (Maybe Response) -> IO ResponseReceived
type AppResponder = Response -> IO ResponseReceived
type Router = Request -> RouteResponder -> IO ResponseReceived
type Nibble = Word8
type Count = Double
type Count = Double
type NntpParser m a = ParsecT ByteString () (NntpT m) a
type PlayerNumber = Int
type PlayerName = String
type RuleNumber = Int
type RuleName = String
type RuleDesc = String
type RuleText = String
type RuleCode = String
type EventNumber = Int
type EventName = String
type VarName = String
type Code = String
type OutputNumber = Int
type InputNumber = Int
type Effect = Effect
type NoEffect = NoEffect
type Nomex = Exp Effect
type NomexNE = Exp NoEffect
type SignalAddress = [SignalAddressElem]
type EventHandler e = (EventNumber, e) -> Nomex ()
type Rule = Nomex ()
type ArrayVar i a = MsgVar [(i, Maybe a)]
type OutputNumber = Int
type RuleNumber = Int
type RuleCode = String
type MetaRule = RuleInfo -> NomexNE Bool
type PlayerNumber = Int
type PlayerName = String
type AssessFunction = VoteStats -> Maybe Bool
type Int = T Int
type Integer = T Integer
type Float = T Float
type Double = T Double
type Ratio a = T (Ratio a)
type Rational = T Rational
type AmbT' m a = forall r. AmbT r m a
type Amb r = AmbT r Identity
type Amb' a = AmbT' Identity a
type PointMVector m = MVector (PrimState m) Double
type GradientMVector m = MVector (PrimState m) Double
type Position = (Int, Int, Int)
type PosParser st tok res = GParser (PosSt st) tok res
type Parser st res = PosParser st Char res
type NParser a = Parser () a
type Name = String
type FullState a = (a, Float)
type UpgradeCallback = String -> Double -> IO ()
type Messages = [Message]
type Tags = [String]
type Threads = [Thread]
type MessageHeaders = Map (CI Text) Text
type Handler = HandlerT App IO
type Widget = WidgetT App IO ()
type Form x = Html -> MForm (HandlerT App IO) (FormResult x, Widget)
type Number a = NotZeroOr a ()
type NumberM a f = NotZeroOrT a f ()
type OneNotZeroOr a x = AccNotZeroOr Identity a x
type Exp ty = Action (Value ty)
type HWND = Exp Int
type EventQueue = TChan Event
type Number = Continued Nat
type Matrix = (Whole, Whole, Whole, Whole, Whole, Whole, Whole, Whole)
type Number = Continued Nat
type Rule α β = (α -> β) -> (α -> β)
type Sqr a = Mul a a
type Frequency = Recip Time
type VoltageAnalytical = Mul (Mul (Sqr Length) Mass) (Recip (Mul (Sqr Time) Charge))
type FilePath = String
type IOError = IOException
type ReadS a = String -> [(a, String)]
type ShowS = String -> String
type String = [Char]
type T i = Array i i
type Rational = T Integer
type Rational = T Integer
type Dimension = Int
type Cycle i = [i]
type T i = [Cycle i]
type T a = [[a]]
type T i = Map i Int
type T i a = [UnitSet i a]
type T = (Exponent, Mantissa)
type FixedPoint = (Integer, Mantissa)
type Mantissa = [Digit]
type Digit = Int
type Exponent = Int
type Basis = Int
type Series = [(Exponent, T)]
type Scalar a = T Scalar a
type Length a = T Length a
type Time a = T Time a
type Mass a = T Mass a
type Charge a = T Charge a
type Angle a = T Angle a
type Temperature a = T Temperature a
type Information a = T Information a
type Frequency a = T Frequency a
type Voltage a = T Voltage a
type Int = T Int
type Integer = T Integer
type Float = T Float
type Double = T Double
type Ratio a = T (T a)
type Rational = T Rational
type PValue v = T Dimension v
type CF = [(Fraction, Fraction)]
type Scalar = Complex Double
type Scalar = Complex Double
type Pos1 = Pos Zero
type Pos2 = Pos Pos1
type Pos3 = Pos Pos2
type Pos4 = Pos Pos3
type Pos5 = Pos Pos4
type Neg1 = Neg Zero
type Neg2 = Neg Neg1
type Neg3 = Neg Neg2
type Neg4 = Neg Neg3
type Neg5 = Neg Neg4
type Zero = Z
type Pos1 = S Z
type Pos2 = S Pos1
type Pos3 = S Pos2
type Pos4 = S Pos3
type Pos5 = S Pos4
type Neg1 = N Pos1
type Neg2 = N Pos2
type Neg3 = N Pos3
type Neg4 = N Pos4
type Neg5 = N Pos5
type Signature m a r = (() -> a, Char -> a -> a, a -> Char -> a, Char -> a -> Char -> a, a -> a -> a, Stream m a -> m r)
type CombSignature m e b = (() -> (e, m (Stream m b)), Char -> (e, m (Stream m b)) -> (e, m (Stream m b)), (e, m (Stream m b)) -> Char -> (e, m (Stream m b)), Char -> (e, m (Stream m b)) -> Char -> (e, m (Stream m b)), (e, m (Stream m b)) -> (e, m (Stream m b)) -> (e, m (Stream m b)), Stream m (e, m (Stream m b)) -> m (Stream m b))
type Major = Int
type Minor = Int
type Name = String
type BTAddress = String
type BTStrength = Int64
type FlashFree = Int64
type OutputPower = Int
type TurnRatio = Int
type TachoLimit = Int64
type TachoCount = Int64
type BlockTachoCount = Int64
type RotationCount = Int64
type Valid = Bool
type Calibrated = Bool
type RawADValue = Int
type NormalizedADValue = Int
type ScaledValue = Int
type CalibratedValue = Int
type Voltage = Ratio Int
type Duration = NominalDiffTime
type RemoveMessage = Bool
type LoopPlayback = Bool
type Frequency = Int
type RxDataLength = Int
type TxData = [Word8]
type RxData = [Word8]
type DeviceAddress = Word8
type Command = Word8
type Measurement = Int
type FileName = String
type FileSize = Int
type FileHandle = Int
type FileData = [Word8]
type ModuleName = String
type ModuleID = Int64
type ModuleSize = Int64
type ModuleIOMapSize = Int
type ModuleHandle = Int
type IOMapOffset = Int
type IOMapLength = Int
type IOMapData = [Word8]
type SpeedRegulation = Bool
type Zero = Int
type ScaleFactor = Int
type ScaleDivisor = Int
type ContinuousInterval = Int
type MeasurementNumber = Int
type Key = ByteString
type Secret = ByteString
type Verifier = ByteString
type Verifier = ByteString
type OAuth ty = OAuthT ty IO
type Verifier = ByteString
type GitHub = EitherT GitHubReturnStatus (ReaderT BearerToken (StateT Pagination IO))
type Word1 = OddWord Word8 (One ())
type Word2 = OddWord Word8 (One (Zero ()))
type Word3 = OddWord Word8 (One (One ()))
type Word4 = OddWord Word8 (One (Zero (Zero ())))
type Word5 = OddWord Word8 (One (Zero (One ())))
type Word6 = OddWord Word8 (One (One (Zero ())))
type Word7 = OddWord Word8 (One (One (One ())))
type Word9 = OddWord Word16 (One (Zero (Zero (One ()))))
type Word10 = OddWord Word16 (One (Zero (One (Zero ()))))
type Word11 = OddWord Word16 (One (Zero (One (One ()))))
type Word12 = OddWord Word16 (One (One (Zero (Zero ()))))
type Word13 = OddWord Word16 (One (One (Zero (One ()))))
type Word14 = OddWord Word16 (One (One (One (Zero ()))))
type Word15 = OddWord Word16 (One (One (One (One ()))))
type Word17 = OddWord Word32 (One (Zero (Zero (Zero (One ())))))
type Word18 = OddWord Word32 (One (Zero (Zero (One (Zero ())))))
type Word19 = OddWord Word32 (One (Zero (Zero (One (One ())))))
type Word20 = OddWord Word32 (One (Zero (One (Zero (Zero ())))))
type Word21 = OddWord Word32 (One (Zero (One (Zero (One ())))))
type Word22 = OddWord Word32 (One (Zero (One (One (Zero ())))))
type Word23 = OddWord Word32 (One (Zero (One (One (One ())))))
type Word24 = OddWord Word32 (One (One (Zero (Zero (Zero ())))))
type Word25 = OddWord Word32 (One (One (Zero (Zero (One ())))))
type Word26 = OddWord Word32 (One (One (Zero (One (Zero ())))))
type Word27 = OddWord Word32 (One (One (Zero (One (One ())))))
type Word28 = OddWord Word32 (One (One (One (Zero (Zero ())))))
type Word29 = OddWord Word32 (One (One (One (Zero (One ())))))
type Word30 = OddWord Word32 (One (One (One (One (Zero ())))))
type Word31 = OddWord Word32 (One (One (One (One (One ())))))
type Word33 = OddWord Word64 (One (Zero (Zero (Zero (Zero (One ()))))))
type Word34 = OddWord Word64 (One (Zero (Zero (Zero (One (Zero ()))))))
type Word35 = OddWord Word64 (One (Zero (Zero (Zero (One (One ()))))))
type Word36 = OddWord Word64 (One (Zero (Zero (One (Zero (Zero ()))))))
type Word37 = OddWord Word64 (One (Zero (Zero (One (Zero (One ()))))))
type Word38 = OddWord Word64 (One (Zero (Zero (One (One (Zero ()))))))
type Word39 = OddWord Word64 (One (Zero (Zero (One (One (One ()))))))
type Word40 = OddWord Word64 (One (Zero (One (Zero (Zero (Zero ()))))))
type Word41 = OddWord Word64 (One (Zero (One (Zero (Zero (One ()))))))
type Word42 = OddWord Word64 (One (Zero (One (Zero (One (Zero ()))))))
type Word43 = OddWord Word64 (One (Zero (One (Zero (One (One ()))))))
type Word44 = OddWord Word64 (One (Zero (One (One (Zero (Zero ()))))))
type Word45 = OddWord Word64 (One (Zero (One (One (Zero (One ()))))))
type Word46 = OddWord Word64 (One (Zero (One (One (One (Zero ()))))))
type Word47 = OddWord Word64 (One (Zero (One (One (One (One ()))))))
type Word48 = OddWord Word64 (One (One (Zero (Zero (Zero (Zero ()))))))
type Word49 = OddWord Word64 (One (One (Zero (Zero (Zero (One ()))))))
type Word50 = OddWord Word64 (One (One (Zero (Zero (One (Zero ()))))))
type Word51 = OddWord Word64 (One (One (Zero (Zero (One (One ()))))))
type Word52 = OddWord Word64 (One (One (Zero (One (Zero (Zero ()))))))
type Word53 = OddWord Word64 (One (One (Zero (One (Zero (One ()))))))
type Word54 = OddWord Word64 (One (One (Zero (One (One (Zero ()))))))
type Word55 = OddWord Word64 (One (One (Zero (One (One (One ()))))))
type Word56 = OddWord Word64 (One (One (One (Zero (Zero (Zero ()))))))
type Word57 = OddWord Word64 (One (One (One (Zero (Zero (One ()))))))
type Word58 = OddWord Word64 (One (One (One (Zero (One (Zero ()))))))
type Word59 = OddWord Word64 (One (One (One (Zero (One (One ()))))))
type Word60 = OddWord Word64 (One (One (One (One (Zero (Zero ()))))))
type Word61 = OddWord Word64 (One (One (One (One (Zero (One ()))))))
type Word62 = OddWord Word64 (One (One (One (One (One (Zero ()))))))
type Word63 = OddWord Word64 (One (One (One (One (One (One ()))))))
type SequenceData = [Integer]
type Err = Either String
type HeaderTag = String
type HeaderValue = String
type TagName = String
type TagData = String
type GLboolean = Word8
type GLbyte = Int8
type GLubyte = Word8
type GLchar = Int8
type GLshort = Int16
type GLushort = Word16
type GLint = Int32
type GLuint = Word32
type GLsizei = Int32
type GLenum = Word32
type GLintptr = Int32
type GLsizeiptr = Int32
type GLbitfield = Word32
type GLfloat = Float
type GLclampf = Float
type GLdouble = Double
type GLclampd = Double
type NumComponents = GLint
type Stride = GLsizei
type ArrayIndex = GLint
type NumArrayIndices = GLsizei
type NumIndexBlocks = GLsizei
type ColorInfo = Either (Index1 GLint) (Color4 GLfloat)
type Order = GLint
type Level = GLint
type Border = GLint
type TextureQuery a = Either TextureTarget CubeMapTarget -> Level -> GettableStateVar a
type MinificationFilter = (TextureFilter, Maybe TextureFilter)
type MagnificationFilter = TextureFilter
type LOD = GLfloat
type TexturePriority = GLclampf
type Combiner v = Vertex3 GLdouble -> WeightedProperties v -> v
type Tolerance = GLdouble
type Tessellator p v = TessWinding -> Tolerance -> Normal3 GLdouble -> Combiner v -> ComplexPolygon v -> GL (p v)
type TriangleVertex v = AnnotatedVertex (v, EdgeFlag)
type QuadricNormal = Maybe ShadingModel
type Radius = GLdouble
type Height = GLdouble
type Angle = GLdouble
type Slices = GLint
type Stacks = GLint
type Loops = GLint
type NURBSBeginCallback = PrimitiveMode -> GL ()
type NURBSVertexCallback = Vertex3 GLfloat -> GL ()
type NURBSNormalCallback = Normal3 GLfloat -> GL ()
type NURBSColorCallback = Color4 GLfloat -> GL ()
type NURBSEndCallback = GL ()
type (:->) a b = OI a -> b
type IFun p a b = a -> p :-> b
type (:~>) a b = OI (IOResult a) -> IOResult b
type GeoId = Integer
type IntExp = Exp Int
type BoolExp = Exp Bool
type IntExpr = Expr Int
type BoolExpr = Expr Bool
type FormOut = String
type HoH i o = LabeledArrow (ReaderArrow FormIn (Automaton (Kleisli IO))) i o
type HoHMay i o = LabeledArrow (ReaderArrow FormIn (MaybeAutomaton (Kleisli IO))) i o
type HoHErr ex i o = LabeledArrow (ErrorArrow ex (ReaderArrow FormIn (Automaton (Kleisli IO)))) i o
type HoHErrMay ex i o = LabeledArrow (ErrorArrow ex (ReaderArrow FormIn (MaybeAutomaton (Kleisli IO)))) i o
type Url = [String]
type ADT t = (Generic t, ADT' (Rep t))
type ADTRecord t = (ADT t, 1 ~ CtorCount t)
type ADTNonEmpty t = (ADT t, 1 <= CtorCount t)
type CtorCount t = CtorCount' (Rep t)
type Constraints t c = Constraints' (Rep t) c
type SqlTable = String
type SqlName = String
type TableName = String
type Attribute = String
type Name = String
type Scheme = [Attribute]
type Assoc = [(Attribute, PrimExpr)]
type PrimQueryFold p = (p, String -> [(Symbol, PrimExpr)] -> p, NonEmpty p -> [PrimExpr] -> p, [(Symbol, (Maybe AggrOp, PrimExpr))] -> p -> p, [OrderExpr] -> p -> p, LimitOp -> p -> p, JoinType -> [(Symbol, PrimExpr)] -> PrimExpr -> p -> p -> p, [Symbol] -> [[PrimExpr]] -> p, BinOp -> [(Symbol, (PrimExpr, PrimExpr))] -> (p, p) -> p)
type PM a = State (a, Int)
type Query = QueryArr ()
type Query = QueryArr ()
type ListAttributes = (Int, ListNumberStyle, ListNumberDelim)
type Attr = (String, [String], [(String, String)])
type Target = (String, String)
type NoteTable = [(String, String)]
type KeyTable = [([Inline], Target)]
type KeyTable = [([Inline], Target)]
type NoteTable = [(String, String)]
type TR = AST
type NonFunction a = ToRes a ~ Res a
type IOWitness = OpenWitness RealWorld
type ST s = StateT (WitnessDict (OpenWitness s)) (OW s)
type STRef = OpenWitness
type TypeRep = AnyWitness Rep
type TypeRep1 = AnyWitness1 Rep1
type TypeRep2 = AnyWitness2 Rep2
type Dynamic = Any Rep
type Exn = IOWitness
type PStringLen = ByteString
type Size = Int
type IOm a = (MonadPlus m, MonadIO m, MonadError e m, Show e, Typeable e) => m a
type StateIO v a = (MonadPlus m, MonadIO m, MonadReader v m, MonadError e m, Show e, Typeable e) => m a
type BS = ByteString
type HashTable k v = CuckooHashTable k v
type ChunksType = TypeRep
type RecordType = TypeRep
type NumberType = TypeRep
type NStrType = TypeRep
type StringType = TypeRep
type DataType = TypeRep
type FieldLabel = ByteString
type NStr = Buffer0
type AStr = NStr
type ChunkWriter c = WriterT (ChunkQueue c)
type WriterStateIO v a = (Chunk c, MonadReader v m) => ChunkWriter c m a
type ALCboolean = CChar
type ALCchar = CChar
type ALCbyte = CSChar
type ALCubyte = CUChar
type ALCshort = CShort
type ALCushort = CUShort
type ALCint = CInt
type ALCuint = CUInt
type ALCsizei = CInt
type ALCenum = CInt
type ALCfloat = CFloat
type ALCdouble = CDouble
type Frequency = Float
type ALboolean = CChar
type ALchar = CChar
type ALbyte = CSChar
type ALubyte = CUChar
type ALshort = CShort
type ALushort = CUShort
type ALint = CInt
type ALuint = CUInt
type ALsizei = CInt
type ALenum = CInt
type ALfloat = CFloat
type ALdouble = CDouble
type NumSamples = ALCsizei
type Gain = ALfloat
type CLProgram = Ptr ()
type CLKernel = Ptr ()
type CLEvent = Ptr ()
type CLMem = Ptr ()
type CLSampler = Ptr ()
type CLCommandQueue = Ptr ()
type CLContext = Ptr ()
type CLPlatformID = Ptr ()
type CLDeviceID = Ptr ()
type CLint = CInt
type CLuint = CUInt
type CLulong = CULLong
type ContextProperties = Ptr CLint
type PlatformID = Ptr PlatformIDc
type DeviceID = Ptr DeviceIDc
type Context = Ptr Contextc
type CommandQueue = Ptr CommandQueuec
type Mem = Ptr Memc
type Program = Ptr Programc
type Event = Ptr Eventc
type Sampler = Ptr Samplerc
type Kernel = Ptr Kernelc
type CLsizei = CSize
type CLint = CInt
type CLuint = CUInt
type CLbool = CLuint
type CLulong = CULong
type CLbitfield = CLulong
type ImageFormatp = Ptr ImageFormat
type ImageFormat = (ChannelOrder, ChannelType)
type ContextCallback = CString -> Ptr () -> CLsizei -> Ptr () -> IO ()
type PlatformID = Ptr PlatformIDc
type DeviceID = Ptr DeviceIDc
type Context = Ptr Contextc
type CommandQueue = Ptr CommandQueuec
type Mem = Ptr Memc
type Program = Ptr Programc
type Event = Ptr Eventc
type Sampler = Ptr Samplerc
type Kernel = Ptr Kernelc
type CLsizei = CSize
type CLint = CInt
type CLuint = CUInt
type CLbool = CLuint
type CLulong = CULong
type CLbitfield = CLulong
type ImageFormatp = Ptr ImageFormat
type ImageFormat = (ChannelOrder, ChannelType)
type ImageDims = (CLsizei, CLsizei, CLsizei)
type ContextCallback = CString -> Ptr () -> CLsizei -> Ptr () -> IO ()
type NativeKernelCallback = Ptr () -> IO ()
type BuildProgramCallback = Program -> Ptr () -> IO ()
type QuadricNormal = Maybe ShadingModel
type Radius = GLdouble
type Height = GLdouble
type Angle = GLdouble
type Slices = GLint
type Stacks = GLint
type Loops = GLint
type DrawBufferIndex = GLuint
type ColorInfo = Either (Index1 GLint) (Color4 GLfloat)
type Level = GLint
type Border = GLint
type TextureQuery t a = t -> Level -> GettableStateVar a
type MinificationFilter = (TextureFilter, Maybe TextureFilter)
type MagnificationFilter = TextureFilter
type LOD = GLfloat
type TexturePriority = GLclampf
type NumComponents = GLint
type Stride = GLsizei
type ArrayIndex = GLint
type NumArrayIndices = GLsizei
type NumIndexBlocks = GLsizei
type Offset = GLintptr
type Length = GLsizeiptr
type BufferIndex = GLuint
type RangeStartIndex = GLintptr
type RangeSize = GLsizeiptr
type BufferRange = (BufferObject, RangeStartIndex, RangeSize)
type Order = GLint
type Combiner v = Vertex3 GLdouble -> WeightedProperties v -> v
type Tolerance = GLdouble
type Tessellator p v = TessWinding -> Tolerance -> Normal3 GLdouble -> Combiner v -> ComplexPolygon v -> IO (p v)
type TriangleVertex v = AnnotatedVertex (v, EdgeFlag)
type NURBSObj = Ptr GLUnurbs
type NURBSBeginCallback = PrimitiveMode -> IO ()
type NURBSVertexCallback = Vertex3 GLfloat -> IO ()
type NURBSNormalCallback = Normal3 GLfloat -> IO ()
type NURBSColorCallback = Color4 GLfloat -> IO ()
type NURBSEndCallback = IO ()
type QueryIndex = GLuint
type WaitTimeout = GLuint64
type EGLint = Int32
type EGLboolean = Word32
type EGLenum = Word32
type EGLConfig = Ptr ()
type EGLContext = Ptr ()
type EGLDisplay = Ptr ()
type EGLSurface = Ptr ()
type EGLClientBuffer = Ptr ()
type EGLNativeWindow = Ptr ()
type EGLNativePixmap = Ptr ()
type EGLNativeDisplay = Ptr ()
type Egl = IORef EglCurrent
type GL = IO
type GLName = String
type GLboolean = Word8
type GLbyte = Int8
type GLubyte = Word8
type GLchar = Int8
type GLshort = Int16
type GLushort = Word16
type GLint = Int32
type GLuint = Word32
type GLfixed = Int32
type GLsizei = Int32
type GLenum = Word32
type GLintptr = Int
type GLsizeiptr = Int
type GLbitfield = Word32
type GLfloat = Float
type GLclampf = Float
type GLint64 = Int64
type GLuint64 = Word64
type GLsync = Ptr ()
type GLhalf = Word16
type GLO = IORef GLObj
type GLArray a = Vector a
type RenderConfig = GL ()
type ShaderType = GLenum
type ProgramBinary = ByteString
type VarDesc = (String, (GLint, GLsizei, GLenum))
type GLdouble = Double
type GLuint64EXT = GLuint64
type GLDebugProc = GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> CString -> Ptr () -> GL ()
type Vec2 = V2 Float
type Vec3 = V3 Float
type Vec4 = V4 Float
type IVec2 = V2 Int32
type IVec3 = V3 Int32
type IVec4 = V4 Int32
type UVec2 = V2 Word32
type UVec3 = V3 Word32
type UVec4 = V4 Word32
type Mat2 = M22 Float
type Mat3 = M33 Float
type Mat4 = M44 Float
type Mat2x3 = M23 Float
type Mat2x4 = M24 Float
type Mat3x2 = M32 Float
type Mat3x4 = M34 Float
type Mat4x2 = M42 Float
type Mat4x3 = M43 Float
type DVec2 = V2 Double
type DVec3 = V3 Double
type DVec4 = V4 Double
type DMat2 = M22 Double
type DMat3 = M33 Double
type DMat4 = M44 Double
type DMat2x3 = M23 Double
type DMat2x4 = M24 Double
type DMat3x2 = M32 Double
type DMat3x4 = M34 Double
type DMat4x2 = M42 Double
type DMat4x3 = M43 Double
type GLArray a = Vector a
type GL = IO
type RenderConfig = GL ()
type ProgramBinary = ByteString
type UniformAssignment p = GL ()
type SetVertexAttr p = GL ()
type Clampf = Float
type GLboolean = CUChar
type GLbyte = CSChar
type GLubyte = CUChar
type GLchar = CChar
type GLshort = CShort
type GLushort = CUShort
type GLint = CInt
type GLuint = CUInt
type GLfixed = CInt
type GLint64 = Int64
type GLuint64 = Word64
type GLsizei = CInt
type GLenum = CUInt
type GLintptr = CPtrdiff
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLbitfield = CUInt
type GLhalf = CUShort
type GLfloat = CFloat
type GLclampf = CFloat
type GLdouble = CDouble
type GLclampd = CDouble
type GLDEBUGPROC = FunPtr GLDEBUGPROCFunc
type GLDEBUGPROCFunc = GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ()
type GLvoid = ()
type GLcharARB = CChar
type GLint64EXT = Int64
type GLuint64EXT = Word64
type GLintptrARB = CPtrdiff
type GLsizeiptrARB = CPtrdiff
type GLhalfARB = CUShort
type GLhalfNV = CUShort
type GLDEBUGPROCAMD = FunPtr GLDEBUGPROCAMDFunc
type GLDEBUGPROCAMDFunc = GLuint -> GLenum -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ()
type GLDEBUGPROCARB = GLDEBUGPROC
type GLDEBUGPROCARBFunc = GLDEBUGPROCFunc
type GLDEBUGPROCKHR = GLDEBUGPROC
type GLDEBUGPROCKHRFunc = GLDEBUGPROCFunc
type GLclampx = CInt
type GLhandleARB = CUInt
type GLvdpauSurfaceNV = GLintptr
type GLeglImageOES = Ptr ()
type GLhalfARB = CUShort
type GLhalf = CUShort
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLDEBUGPROC = FunPtr GLDEBUGPROCFunc
type GLDEBUGPROCFunc = GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLDEBUGPROC = FunPtr GLDEBUGPROCFunc
type GLDEBUGPROCFunc = GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLDEBUGPROC = FunPtr GLDEBUGPROCFunc
type GLDEBUGPROCFunc = GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLDEBUGPROC = FunPtr GLDEBUGPROCFunc
type GLDEBUGPROCFunc = GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLDEBUGPROC = FunPtr GLDEBUGPROCFunc
type GLDEBUGPROCFunc = GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbyte = CSChar
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLint = CInt
type GLshort = CShort
type GLsizei = CInt
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLint = CInt
type GLshort = CShort
type GLsizei = CInt
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLint = CInt
type GLshort = CShort
type GLsizei = CInt
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLint = CInt
type GLshort = CShort
type GLsizei = CInt
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLint = CInt
type GLshort = CShort
type GLsizei = CInt
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLint = CInt
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLint = CInt
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLint = CInt
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type GLvoid = ()
type GLDEBUGPROC = FunPtr GLDEBUGPROCFunc
type GLDEBUGPROCFunc = GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLhalf = CUShort
type GLint = CInt
type GLint64 = Int64
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLsync = Ptr ()
type GLubyte = CUChar
type GLuint = CUInt
type GLuint64 = Word64
type GLushort = CUShort
type GLvoid = ()
type GLbitfield = CUInt
type GLboolean = CUChar
type GLbyte = CSChar
type GLchar = CChar
type GLclampd = CDouble
type GLclampf = CFloat
type GLdouble = CDouble
type GLenum = CUInt
type GLfloat = CFloat
type GLint = CInt
type GLintptr = CPtrdiff
type GLshort = CShort
type GLsizei = CInt
type GLsizeiptr = CPtrdiff
type GLubyte = CUChar
type GLuint = CUInt
type GLushort = CUShort
type XRDS = [XRD]
type XRD = [Service]
type Params = [(String, String)]
type ReturnTo = String
type Realm = String
type Resolver m = Request String -> m (Either ConnError (Response String))
type AXFieldVal = (AXFieldTy, String)
type Modulus = Integer
type Generator = Int
type Model2d = Model Vector2d
type Model3d = Model Vector3d
type Vector2d = (Double, Double)
type Vector3d = (Double, Double, Double)
type TransMatrix = ((Double, Double, Double, Double), (Double, Double, Double, Double), (Double, Double, Double, Double), (Double, Double, Double, Double))
type Byte = Word8
type Word16 = Word16
type MonomialMap a t n = Map a t n
type DecoratedTree a = PreDecoratedTree a Int
type Shuffle = [Int]
type Embedding a = DecoratedTree (Maybe a)
type Tree = DecoratedTree Integer
type FreeOperad a = OperadElement a Rational PathPerm
type Program instr = ProgramT instr Identity
type ProgramView instr = ProgramViewT instr Identity
type DateString = String
type URIString = String
type Args = [String]
type ParserA = A Parser
type Group = (TVar Int, TVar Inhabitants)
type APIKey = Text
type Collection = Text
type Key = Text
type Ref = Text
type Timestamp = Integer
type Location = Text
type RestCall a = Options -> String -> IO (Response a)
type Limit = Int
type Offset = Int
type IfMatch' = Maybe Ref
type Range a = (RangeEnd a, RangeEnd a)
type KVList v = ResultList (ResultItem Path v)
type EventList a b = ResultList (EventItem a b)
type EventType = Text
type RelKind = Text
type RelList a b = ResultList (ResultItem Path b)
type QueryText = Text
type OrchestrateIO = OrchestrateT IO
type Orchestrate = OrchestrateT Identity
type BoundedMin = GBounded () Void
type BoundedMax = GBounded Void ()
type BoundedBoth = GBounded () ()
type RawOrder a s = STRef s (OrderCell a s)
type RawElement a s = STRef s (ElementCell a s)
type Order o = OrderT o Identity
type Order o = OrderT o Identity
type Estimator r = Rational -> Int -> Estimate r
type LineNumber = Maybe Int
type LineNumber = Maybe Int
type Duration = (Hour, Minute)
type Properties = HashMap Text Text
type Tag = Text
type Weekday = Text
type AbsoluteTime = (Hours, Minutes)
type TimestampRange = (AbsoluteTime, AbsoluteTime)
type OsReleaseLine = (OsReleaseKey, OsReleaseValue)
type OsRelease = Map OsReleaseKey OsReleaseValue
type Timestamp = Word64
type Zoom = Int
type Revision = Integer
type Packer a = a -> Packet String a
type Packer a = a -> Packet String a
type Newest = Map String PackInfo
type Reverses = Map String (Version, [(String, VersionRange)])
type NodeVector = Vector Word32
type Col = Int
type Row = Int
type FractionDigits = Int
type Value = ByteString
type Area = Page
type Bound = Value
type ValueMap = LabelMap [Value]
type Ordered a = ([OrderBy (Maybe Value)], a)
type PageCapacity = [Slot]
type FitAttempt = LabelMap BlockData
type PageBinding = LabelMap [FieldBinding]
type FieldBinding = (Area, LabelMap Bound)
type Acknowledge = Generic
type Resolve = Generic
type ServiceKey = Key "service"
type IncidentKey = Key "incident"
type AlertId = Id "alert"
type ContactId = Id "contact"
type EmailFilterId = Id "email-filter"
type EscalationPolicyId = Id "escalation-policy"
type EscalationRuleId = Id "escalation-rule"
type IncidentId = Id "incident"
type LogEntryId = Id "log-entry"
type NoteId = Id "note"
type NotificationRuleId = Id "notification-rule"
type OverrideId = Id "schedule-override"
type RequesterId = Id "requester"
type ScheduleId = Id "schedule"
type ServiceId = Id "service"
type UserId = Id "user"
type VendorId = Id "vendor"
type WebhookId = Id "webhook"
type WindowId = Id "maintenance-window"
type ServiceKey = Key "service"
type IncidentKey = Key "incident"
type AlertId = Id "alert"
type ContactId = Id "contact"
type EmailFilterId = Id "email-filter"
type EscalationPolicyId = Id "escalation-policy"
type EscalationRuleId = Id "escalation-rule"
type IncidentId = Id "incident"
type LogEntryId = Id "log-entry"
type NoteId = Id "note"
type NotificationRuleId = Id "notification-rule"
type OverrideId = Id "schedule-override"
type RequesterId = Id "requester"
type ScheduleId = Id "schedule"
type ServiceId = Id "service"
type UserId = Id "user"
type VendorId = Id "vendor"
type WebhookId = Id "webhook"
type WindowId = Id "maintenance-window"
type PagerDuty s = PagerDutyT s IO
type ServiceKey = Key "service"
type IncidentKey = Key "incident"
type AlertId = Id "alert"
type ContactId = Id "contact"
type EmailFilterId = Id "email-filter"
type EscalationPolicyId = Id "escalation-policy"
type EscalationRuleId = Id "escalation-rule"
type IncidentId = Id "incident"
type LogEntryId = Id "log-entry"
type NoteId = Id "note"
type NotificationRuleId = Id "notification-rule"
type OverrideId = Id "schedule-override"
type RequesterId = Id "requester"
type ScheduleId = Id "schedule"
type ServiceId = Id "service"
type UserId = Id "user"
type VendorId = Id "vendor"
type WebhookId = Id "webhook"
type WindowId = Id "maintenance-window"
type Kolor = Colour Double
type Kolor = Colour Double
type Kolor = Colour Double
type Kolor = Colour Double
type ConvFunc = CInt -> Ptr (Ptr ()) -> Ptr (Ptr ()) -> Ptr () -> IO CInt
type CPamHandleT = ()
type PamConv = Ptr () -> [PamMessage] -> IO [PamResponse]
type MacroMap = (String, [Element])
type Option = (String, String)
type Delimiter = String
type NameAttrs = [(String, String)]
type Citations = [[Cite]]
type ReferenceMap = [(String, Value)]
type Span = Int
type Width = Int
type Gutter = Int
type Lines = [String]
type Caption = String
type AtrName = String
type AtrValue = String
type Atrs = [(AtrName, AtrValue)]
type Atrs = [(AtrName, AtrValue)]
type ListAttributes = (Int, ListNumberStyle, ListNumberDelim)
type Attr = (String, [String], [(String, String)])
type TableCell = [Block]
type Target = (String, String)
type Inlines = Many Inline
type Blocks = Many Block
type PangoUnit = Double
type TabPosition = (Double, TabAlign)
type ModuleName = [String]
type Exports = String
type Code = String
type Graph vector gauge anot = Gr (Node vector gauge anot) Edge
type Orthotope0 a = Vec0 (Interval a)
type Orthotope1 a = Vec1 (Interval a)
type Orthotope2 a = Vec2 (Interval a)
type Orthotope3 a = Vec3 (Interval a)
type Text = Text
type Builder (vector :: * -> *) (gauge :: *) (anot :: *) (val :: *) = State (BuilderState vector gauge anot) val
type B ret = forall (v :: * -> *) (g :: *) (a :: *). Builder v g a ret
type BuilderOf r c = forall (v :: * -> *) (g :: *) (a :: *). Builder v g a (Value r c)
type Builder (vector :: * -> *) (gauge :: *) (anot :: *) (val :: *) = State (BuilderState vector gauge anot) val
type BuilderOf r c = forall (v :: * -> *) (g :: *) (a :: *). Builder v g a (Value r c)
type Annotation = [Dynamic]
type Optimization = forall (v :: * -> *) (g :: *). Graph v g Annotation -> Graph v g Annotation
type OptimizationEx = forall (v :: * -> *) (g :: *) (a :: *). OM v g a -> OM v g a
type OptimizationOf (v :: * -> *) (g :: *) = Graph v g Annotation -> Graph v g Annotation
type Strategy a = a -> ()
type Strategy a = a -> Eval a
type SeqStrategy a = Strategy a
type Done = ()
type Parcom s t a = ParcomT s t Identity a
type Clause = UArray Int Int
type SourceName = String
type Line = Int
type Column = Int
type Parsec s u = ParsecT s u Identity
type Parser = Parsec String ()
type GenParser tok st = Parsec [tok] st
type Parser = Parsec ByteString ()
type GenParser t st = Parsec ByteString st
type Parser = Parsec ByteString ()
type GenParser t st = Parsec ByteString st
type Parser = Parsec Text ()
type GenParser st = Parsec Text st
type Parser = Parsec Text ()
type GenParser st = Parsec Text st
type OperatorTable s u m a = [[Operator s u m a]]
type Parser = Parsec String ()
type GenParser tok st = Parsec [tok] st
type SourceName = String
type Line = Int
type Column = Int
type LanguageDef st = GenLanguageDef String st Identity
type TokenParser st = GenTokenParser String st Identity
type LanguageDef st = GenLanguageDef String st Identity
type TokenParser st = GenTokenParser String st Identity
type CharParser st = GenParser Char st
type SourceName = String
type Line = Int
type Column = Int
type OperatorTable tok st a = [[Operator tok st a]]
type Parsec s u = ParsecT s u Identity
type SourceName = String
type Line = Int
type Column = Int
type LanguageDef st = GenLanguageDef String st Identity
type LanguageDef st = GenLanguageDef String st Identity
type PermParser tok st a = StreamPermParser String st a
type PermParser tok st a = StreamPermParser String st a
type TagParser str st = GenParser (Tag str) st
type SourceName = String
type Line = Int
type Column = Int
type Parser a = GenParser Char () a
type CharParser st a = GenParser Char st a
type SourceName = String
type Line = Int
type Column = Int
type SourceName = String
type Line = Int
type Column = Int
type Parser a = GenParser Char () a
type CharParser st a = GenParser Char st a
type OperatorTable t st a = [[Operator t st a]]
type SourceName = String
type Line = Int
type Column = Int
type SourceName = String
type Line = Int
type Column = Int
type Parsec s u = ParsecT s u Identity
type Parser = Parsec String ()
type GenParser tok st = Parsec [tok] st
type Parser = Parsec ByteString ()
type GenParser t st = Parsec ByteString st
type Parser = Parsec ByteString ()
type GenParser t st = Parsec ByteString st
type Parser = Parsec Text ()
type GenParser st = Parsec Text st
type Parser = Parsec Text ()
type GenParser st = Parsec Text st
type OperatorTable s u m a = [[Operator s u m a]]
type LanguageDef st = GenLanguageDef String st Identity
type TokenParser st = GenTokenParser String st Identity
type Parsec s u = ParsecT s u Identity
type SourceName = String
type Line = Int
type Column = Int
type LanguageDef st = GenLanguageDef String st Identity
type PermParser tok st a = StreamPermParser String st a
type Expect s = [(String, Maybe s)]
type ParseMethod s a r = P s a -> [s] -> ParseResult s r
type ParseResult s r = Either (Err s) r
type OperatorTable m a = [[Operator m a]]
type STARKey = String
type String = ByteString
type STARKey = String
type SourceName = String
type Line = Int
type Column = Int
type ParserU u s = Parser (UserState u s)
type SourceName = String
type Line = Int
type Column = Int
type PrimParser s a = State s -> Reply s a
type TotalHandler a = SomeException -> IO a
type Node = Expr
type Vector = [Expr] -> Expr
type Matrix = [Expr] -> Expr
type NodeArray = [Expr] -> Expr
type Patch a b = a -> b
type XmlString = String
type ErrorString = String
type OutputString = String
type OptString = String
type Width = Int
type Height = Int
type NodeID = Int
type PathingGrid = Array Coordinate Terrain
type AbsFile = Path Abs File
type RelFile = Path Rel File
type AbsDir = Path Abs Dir
type RelDir = Path Rel Dir
type AbsPath fd = Path Abs fd
type RelPath fd = Path Rel fd
type FilePath ar = Path ar File
type DirPath ar = Path ar Dir
type AbsFile = Path Abs File
type RelFile = Path Rel File
type AbsDir = Path Abs Dir
type RelDir = Path Rel Dir
type AbsPath fd = Path Abs fd
type RelPath fd = Path Rel fd
type FilePath ar = Path ar File
type DirPath ar = Path ar Dir
type RIO = ResourceT IO
type Source = Source RIO ByteString
type Sink = Sink ByteString RIO ()
type SinkR r = Sink ByteString RIO r
type Conduit o r = ConduitM ByteString o RIO r
type Conduit_ = Conduit ByteString ()
type OnError_ = Criticality -> SomeException -> String -> IO ()
type Identifier = String
type Service = String
type Identity = ByteString
type Body = [ByteString]
type Msec = Int
type Timeout = Timeout
type Context = Context
type Size = Size
type StreamConduit = Streamer -> Conduit ByteString ()
type StreamSink = Streamer -> Sink
type StreamAction = Streamer -> IO ()
type Control a = Controller -> IO a
type ServiceName = String
type Pdump = ForeignPtr PcapDumpTag
type BpfProgram = ForeignPtr BpfProgramTag
type Callback = PktHdr -> Ptr Word8 -> IO ()
type BpfProgram = ForeignPtr BpfProgramTag
type Callback = PktHdr -> Ptr Word8 -> IO ()
type CallbackBS = PktHdr -> ByteString -> IO ()
type Packet = (PktHdr, ByteString)
type M44 a = V4 (V4 a)
type GenIO = Gen RealWorld
type GenST = Gen
type GenIO = Gen RealWorld
type GenST = Gen
type GenIO = Gen RealWorld
type GenST s = Gen s
type LanguageName = String
type PCLT_ID = String
type PCLT_ParamKey = String
type PCLT_CompositeKey = PCLT_ID
type PCLT_SuperCompositeKey = PCLT_CompositeKey
type PCLT_SubCompositeKey = PCLT_CompositeKey
type RequiredCompositeKey = PCLT_CompositeKey
type RequirerCompositeKey = PCLT_CompositeKey
type ParamName_LBS = ByteString
type PCLT_InnerConfigID = Int
type ReparsingDepth = Int
type SeparationMarkerIdx = Int
type MarkedChunkLength = Int64
type New_Active_Sep_SSM = SeparatedSectorMarker
type Previous_Active_Sep_SSM = SeparatedSectorMarker
type Current_Sep_SSM = SeparatedSectorMarker
type Current_Chunk_SSM = SeparatedSectorMarker
type SectorMarkingStrategy = (Previous_Active_Sep_SSM, Current_Sep_SSM) -> (Current_Chunk_SSM, New_Active_Sep_SSM)
type ChunkIndexInList_ = Int
type StdOut_CLBS = CLBS
type StdErr_CLBS = CLBS
type StdOutAndErr_CLBS = CLBS
type LngTpl_AbstractedString = [(PCS_SpecificMarkings, ByteString, MarkedChunkLength)]
type ParserBadResult = String
type PCLT_CatalogMap = Map PCLT_ID LocalizableTemplate
type LngTpl_SubCompositesMap = PCLT_CatalogMap
type DefaultLngTpl = LocalizedTemplate
type NondefaultLngTpl = LocalizedTemplate
type PCLT_RequiredShowDetalizationLevel = PCLT_ShowDetalizationLevel
type PCLT_AllocatedShowDetalizationLevel = PCLT_ShowDetalizationLevel
type PCLT_CatalogID = Int
type MainUnit_SDL = PCLT_ShowDetalizationLevel
type AddedUnit_SDL = PCLT_ShowDetalizationLevel
type Parsed_DidWe = Bool
type PCSI_ParamsValuesMap = Map PCLT_ParamKey PCLT_ParamVal
type SpaceAvailableForPCSIInstaniation = MarkedChunkLength
type ForInstaniationUsedChunkLength = MarkedChunkLength
type FieldName = String
type NoMoreThanOne_shoulditbe = Bool
type AllowedMaximumOfRowsCount = Int
type DisconnectDBConnWhenFinished_shouldwe = Bool
type MakeIterationAndContinueCycle_shouldwe = Bool
type PCRE = ()
type PCREError = CInt
type PCREInfo = CInt
type PCREConfig = CInt
type PCREExtraFlags = CInt
type Operator = (Op, [Object ()])
type GlyphDecoder = Name -> Str -> [(Glyph, Double)]
type PdfE m = EitherT PdfError m
type IS = InputStream ByteString
type IS = InputStream ByteString
type Decryptor = Ref -> DecryptorScope -> IS -> IO IS
type Pdf m = PdfE (Pdf' m)
type (<=) a b = LessThanOrEqual a b ~ True
type (<) a b = LessThan a b ~ True
type CntW32 = Cnt4294967296
type W32 = W CntW32
type Label = String
type M a = StateT St IO a
type Id = String
type CString = Ptr Char
type W_ a = W a
type I_ a = I a
type SuccCnt_ a = SuccCnt a
type Syntax = [Definition]
type CodeFragment = [CodePart]
type Identifier = String
type TermType = String
type Solution = (Integer, Integer)
type Factory = CaseSensitive -> Text -> Either Text (Predbox Text)
type WholeOrFracResult a = Either (WholeOrFrac DigitList) (WholeOrFrac (GroupedDigits a))
type Signif = Integer
type Places = Integer
type TotSeats = Integer
type PartyVotes = Integer
type SeatsWon = Integer
type LPdct = Predbox Posting
type MakePdct = Predbox Text -> LPdct
type MakeSerialPdct = Int -> Ordering -> Predbox Posting
type LPdct = Predbox Posting
type MakePdct = Predbox Text -> LPdct
type MakeSerialPdct = Int -> Ordering -> Predbox Posting
type DbMap = Map UNumber Posting
type DbList = [(UNumber, Posting)]
type ParserFn = FitFileLocation -> IO (Either String [Posting])
type Mode = Maybe FitAcct -> Mode (ProgName -> String) (IO ())
type ParsedTxn = (ParsedTopLine, Ents (PostingCore, PostingLine))
type ParsedItem = S4 ParsedTxn PricePoint Comment BlankLine
type LedgerItem = S4 Transaction PricePoint Comment BlankLine
type Parser = String -> IO (Filename, [ParsedItem])
type MatcherFactory = CaseSensitive -> Text -> Either Text (Predbox Text)
type PostFilterFn = ListLength -> ItemIndex -> Bool
type Operand = Predbox Posting
type Error = Text
type Changers = Labels (EvenAndOdd (Chunk -> Chunk))
type Error = Text
type PosArg = String
type HelpStr = String
type ArgsAndReport = ([PosArg], PrintReport)
type ParseResult = Either Text ArgsAndReport
type PrintReport = (Amount Qty -> Text) -> [Transaction] -> [PricePoint] -> Either Text [Chunk]
type Report = Runtime -> (HelpStr, MkReport)
type MkReport = CaseSensitive -> (CaseSensitive -> Text -> Either Text (Predbox Text)) -> Changers -> ExprDesc -> ([Transaction] -> [(LibertyMeta, Posting)]) -> Mode (ProgName -> String) ParseResult
type Sorter = (SubAccount, BottomLine) -> (SubAccount, BottomLine) -> Ordering
type Changers = Labels (EvenAndOdd (Chunk -> Chunk))
type FormatQty = [LedgerItem] -> Amount Qty -> Text
type Factory = CaseSensitive -> Text -> Exceptional Text Matcher
type WholeOrFracResult a = Either (WholeOrFrac DigitList) (WholeOrFrac (GroupedDigits a))
type Signif = Integer
type Places = Integer
type TotSeats = Integer
type PartyVotes = Integer
type SeatsWon = Integer
type LPdct = Pdct Posting
type MakePdct = Matcher -> LPdct
type MakeSerialPdct = Int -> Ordering -> Pdct Posting
type DbMap = Map UNumber Posting
type DbList = [(UNumber, Posting)]
type ParserFn = FitFileLocation -> IO (Exceptional String [Posting])
type Mode = Maybe FitAcct -> Mode (ProgName -> String) (IO ())
type LPdct = Pdct Posting
type MakePdct = Matcher -> LPdct
type MakeSerialPdct = Int -> Ordering -> Pdct Posting
type ParsedTxn = (ParsedTopLine, Ents (PostingCore, PostingLine))
type ParsedItem = S4 ParsedTxn PricePoint Comment BlankLine
type LedgerItem = S4 Transaction PricePoint Comment BlankLine
type Parser = String -> IO (Filename, [ParsedItem])
type MatcherFactory = CaseSensitive -> Text -> Exceptional Text Matcher
type PostFilterFn = ListLength -> ItemIndex -> Bool
type Operand = Pdct Posting
type Error = Text
type Changers = Labels (EvenAndOdd (Chunk -> Chunk))
type Error = Text
type PosArg = String
type HelpStr = String
type ArgsAndReport = ([PosArg], PrintReport)
type ParseResult = Exceptional Text ArgsAndReport
type PrintReport = (Amount Qty -> Text) -> [Transaction] -> [PricePoint] -> Exceptional Text [Chunk]
type Report = Runtime -> (HelpStr, MkReport)
type MkReport = CaseSensitive -> (CaseSensitive -> Text -> Exceptional Text Matcher) -> Changers -> ExprDesc -> ([Transaction] -> [(LibertyMeta, Posting)]) -> Mode (ProgName -> String) ParseResult
type Sorter = (SubAccount, BottomLine) -> (SubAccount, BottomLine) -> Ordering
type Changers = Labels (EvenAndOdd (Chunk -> Chunk))
type Filename = String
type Secname = String
type SectionMeta = (SectionTable, ByteString)
type ImportDirectory = [ImportDirectoryEntry]
type ImportLookupTable = [ImportLookupTableEntry]
type WArrayRef = WordArrayRef (WordNArrayRef W32Validator) (WordNArrayRef W64Validator)
type CDRef = CRef DRef
type SerializerContext l c = (MVar Cache, l, CountDest c)
type Address = Len Word64 Word64
type Span = SortedPair Word64
type UniqueColumnConstraint = ColumnConstraint Unique
type NotNullColumnConstraint = ColumnConstraint NotNull
type PrimaryColumnConstraint = ColumnConstraint Primary
type UniqueConstraint = KeyConstraint Unique
type PrimaryConstraint = KeyConstraint Primary
type ToSqlM q a = Writer (DList q) a
type ExtraLine = [Text]
type Attr = Text
type ForeignFieldDef = (HaskellName, DBName)
type Connection = SqlBackend
type LogFunc = Loc -> LogSource -> LogLevel -> LogStr -> IO ()
type SqlPersistT = ReaderT SqlBackend
type SqlPersist = SqlPersistT
type SqlPersistM = SqlPersistT (NoLoggingT (ResourceT IO))
type Sql = Text
type CautiousMigration = [(Bool, Sql)]
type Migration = WriterT [Text] (WriterT CautiousMigration (ReaderT SqlBackend IO)) ()
type ConnectionPool = Pool SqlBackend
type Query = (QueryExpr, EntityDef)
type TFiniteMap key val backendType = TMap (FM key) key val backendType LRU
type MongoRegex = (Text, Text)
type ConnectionPool = Pool Connection
type PipePool = Pool Pipe
type HostName = String
type Database = Text
type Action = ReaderT MongoContext
type ConnectionString = String
type ConnectionString = ByteString
type RedisT = ReaderT Connection
type RedisBackend = Connection
type ST s = STT s Identity
type Connection = Pool Zookeeper
type Action = ReaderT Zookeeper
type PeyotlsM = TlsM Handle SystemRNG
type PeyotlsHandle = TlsHandle Handle SystemRNG
type TlsM h g = ErrorT Alert (StateT (TlsState h g) (HandleMonad h))
type PeyotlsM = TlsM Handle SystemRNG
type PeyotlsHandle = TlsHandle Handle SystemRNG
type TlsM h g = ErrorT Alert (StateT (TlsState h g) (HandleMonad h))
type Zipper1 a = Zipper a a
type :~> f a = MaybeLens f a
type ObjectId = Int
type PhantomState s = PhantomStateT s Identity
type Mutable mut = PhaseChange (Frozen mut) mut
type Immutable imm = PhaseChange imm (Thawed imm)
type DefDecor = (Maybe Int, BranchLen)
type AnnotatedTree = NewickTree StandardDecor
type TreeName = String
type Label = Int
type LabelTable = Map Label String
type DenseLabelSet = IntSet
type DistanceMatrix = Vector (Vector Int)
type BinResults a = Map StrippedTree (OneCluster a)
type StrippedTree = NewickTree Int
type ProtocolF = Compose ((,) [ByteString]) (Iteratee ByteString Identity)
type Protocol = EitherT ServerError (Free ProtocolF)
type Interval = (Int, Int)
type Point1d = Int
type Point2d = (Int, Int)
type Dimensions2d = (Int, Int)
type Tag = Text
type Produ t = Producer t
type Consu t = Consumer t
type Image = ByteString
type Tag = Text
type Glance m l o a = o -> LogicT (Produ l (Nullipotent m)) a
type Delay = Int
type GUI m = [Window m]
type Result = IResult
type LabelKey = Int
type Pinboard = EitherT PinboardError (ReaderT (PinboardConfig, Connection) IO)
type ParamsBS = [(ByteString, ByteString)]
type DateCount = (Day, Int)
type TagMap = HashMap Tag Int
type Url = Text
type Description = Text
type Extended = Text
type Tag = Text
type Old = Tag
type New = Tag
type Count = Int
type NumResults = Int
type StartOffset = Int
type Shared = Bool
type Replace = Bool
type ToRead = Bool
type Date = Day
type DateTime = UTCTime
type FromDateTime = DateTime
type ToDateTime = DateTime
type Meta = Int
type NoteId = Text
type Effect = Proxy X () () X
type Producer b = Proxy X () () b
type Pipe a b = Proxy () a () b
type Consumer a = Proxy () a () X
type Client a' a = Proxy a' a () X
type Server b' b = Proxy X () b' b
type Effect' m r = forall x' x y' y. Proxy x' x y' y m r
type Producer' b m r = forall x' x. Proxy x' x () b m r
type Consumer' a m r = forall y' y. Proxy () a y' y m r
type Client' a' a m r = forall y' y. Proxy a' a y' y m r
type Server' b' b m r = forall x' x. Proxy x' x b' b m r
type Effect = Proxy X () () X
type Effect' m r = forall x' x y' y. Proxy x' x y' y m r
type Producer b = Proxy X () () b
type Producer' b m r = forall x' x. Proxy x' x () b m r
type Consumer a = Proxy () a () X
type Consumer' a m r = forall y' y. Proxy () a y' y m r
type Pipe a b = Proxy () a () b
type Lock = MVar ()
type Var a = MVar a
type Barrier a = MVar a
type Producer b m = Pipe () b m
type Consumer a m = Pipe a Void m
type Pipeline m = Pipe () Void m
type Parser a m r = forall x. StateT (Producer a m x) m r
type Codec = forall m r. Monad m => Lens' (Producer ByteString m r) (Producer Text m (Producer ByteString m r))
type String = ByteString
type String = Text
type Bind a = (Name, a)
type Clos a = (a, Scope)
type EnvEntries = [(EnvEntry, PrtInfo)]
type Id = Int
type Label = String
type Name = String
type Prog = [Entry]
type Type = Term
type Parser = Parsec String ()
type Pretty = Pretty (Seq String Char) (Tok String Char)
type Point = [Float]
type Rectangle = (Point, Point)
type PKTree a = Tree (Node a)
type GraphTraversal = (TraversedValues Node, TraversedValues Edge)
type FaceMap = Map Face FaceInfo
type SerialisedGraph n e = [(Word, n, [(Word, Word, e, Word)])]
type CharNumber = Int
type LineNumber = Int
type Pos = (LineNumber, CharNumber)
type Playlist = [Track]
type Border = Bool
type Function = Double -> Double
type Series = Vector Double
type MinMaxSeries = (Series, Series)
type ErrorSeries = Series
type Surface = Matrix Double
type SeriesLabel = String
type FormattedSeries = Data DecoratedSeries
type Location = (Double, Double)
type Head = Bool
type Fill = Bool
type SampleData = Bool
type LegendBorder = Bool
type GridLines = Bool
type DashStyle = [Dash]
type LineWidth = Double
type PointSize = Double
type FontFamily = String
type FontSize = Double
type Color = Colour Double
type FigureHandle = MVar FigureState
type FigureHandle = MVar FigureState
type Symbol = String
type Type = String
type Errors = [String]
type PackageConf = FilePath
type Arg = String
type EncodedString = String
type MergeCode = MakeCode
type Args = [Arg]
type Errors = [String]
type Symbol = String
type Import = String
type Transformation a = (V3 a, Quaternion a)
type Header = (Format, [Element])
type Parser = Parsec ByteString ()
type Width = Word32
type Height = Word32
type Parser = Parsec ByteString ()
type Width = Word32
type Height = Word32
type F a x = Rep (PF a) x
type (:~>) s v = forall a. s a -> v a
type H t a = HRep (HF t) a
type Para a = a :@!: (I :*!: K a)
type Apo b = b :@!: (I :+!: K b)
type Zygo a b = a :@!: (I :*!: K b)
type Accum a b = a :*!: K b
type Histo a c = K c :*!: a
type Futu b c = K c :+!: b
type From a = K a :+!: I
type BSTree = K One :+!: (K One :+!: (I :*!: I))
type BTree = K One :+!: (I :+!: (I :*!: I))
type NeList a b = K a :+!: (K b :*!: I)
type EditDist a = K [a] :+!: ((K a :*!: K a) :*!: (I :*!: (I :*!: I)))
type EditDistL a = (K [a] :*!: K [a]) :*!: (K One :+!: I)
type Stream a = K a :*!: I
type B d a x = Rep (BRep (BF d) a) x
type NatLens f g = forall x. x -> Lens (Rep f x) (Rep g x)
type Imdb = ([Show], [Actor])
type Show = (((Year, Title), [Review]), Either Movie TV)
type Review = (User, [Comment])
type Movie = (Director, [BoxOffice])
type BoxOffice = (Country, Maybe Value)
type TV = [Season]
type Season = (Year, [Episode])
type Actor = (Name, [Played])
type Played = (((Year, Title), Role), [Award])
type Award = (Year, Category)
type Year = Int
type Title = String
type User = String
type Comment = String
type Director = String
type Country = String
type Value = Nat
type Episode = String
type Name = String
type Role = String
type Category = String
type Person = (Name, Gender)
type Name = String
type StdDeck_CardMask = CLLong
type Kicker = Rank
type Parameters = [(String, String)]
type Polh = [LexEntry]
type PolhM a = PolhT IO a
type Form = Text
type Base = Text
type POS = Text
type MSD = Text
type Tag = Text
type Cat = Text
type Events = T CShort Event
type TextParser a = Parser a
type TextParser a = Parser Char a
type XmlTree s = Tree (Tag s)
type XmlForest s = [XmlTree s]
type Lens a b = Functor f => (b -> f b) -> a -> f a
type Traversal a b = Applicative f => (b -> f b) -> a -> f a
type Prism a b = forall p f. (Choice p, Applicative f) => p b (f b) -> p a (f a)
type Iso a b = forall p f. (Profunctor p, Functor f) => p b (f b) -> p a (f a)
type StanzaHandler = (Stanza -> IO (Either XmppFailure ())) -> Stanza -> [Annotation] -> IO [(Stanza, [Annotation])]
type Resource = Text
type AuthData = Maybe (ConnectionState -> [SaslHandler], Maybe Resource)
type Annotated a = (a, [Annotation])
type Plugin = (Stanza -> IO (Either XmppFailure ())) -> ErrorT XmppFailure IO Plugin'
type WriteSemaphore = TMVar (ByteString -> IO (Either XmppFailure ()))
type IQHandlers = (Map (IQRequestType, Text) (TChan IQRequestTicket), Map Text (Either (Maybe Jid) Jid, TMVar (Maybe (Annotated IQResponse))))
type IQRequestHandler a = a -> IO (Either StanzaError (IQResponseType a))
type IQRequestHandler a = a -> IO (Either StanzaError (IQResponseType a))
type StanzaHandler = (Stanza -> IO (Either XmppFailure ())) -> Stanza -> [Annotation] -> IO [(Stanza, [Annotation])]
type Resource = Text
type AuthData = Maybe (ConnectionState -> [SaslHandler], Maybe Resource)
type Annotated a = (a, [Annotation])
type Plugin = (Stanza -> IO (Either XmppFailure ())) -> ErrorT XmppFailure IO Plugin'
type WriteSemaphore = TMVar (ByteString -> IO (Either XmppFailure ()))
type IQHandlers = (Map (IQRequestType, Text) (TChan IQRequestTicket), Map Text (Either (Maybe Jid) Jid, TMVar (Maybe (Annotated IQResponse))))
type Username = Text
type Password = Text
type AuthZID = Text
type Pairs = [(ByteString, ByteString)]
type SaslHandler = (Text, StateT StreamState IO (Either XmppFailure (Maybe AuthFailure)))
type StreamSink a = ConduitM Event Void (ErrorT XmppFailure IO) a
type ExtendedAttribute = (Name, Text)
type SaslHandler = (Text, StateT StreamState IO (Either XmppFailure (Maybe AuthFailure)))
type AuthData = Maybe (ConnectionState -> [SaslHandler], Maybe Resource)
type Username = Text
type Password = Text
type AuthZID = Text
type IQRequestHandler a = a -> IO (Either StanzaError (IQResponseType a))
type Annotated a = (a, [Annotation])
type Plugin = (Stanza -> IO (Either XmppFailure ())) -> ErrorT XmppFailure IO Plugin'
type POP3 = ErrorT String (ReaderT Connection IO)
type MessageID = Integer
type AttachmentSave = String -> Int -> Bool
type PaFloat32 = Float
type PaInt32 = Int32
type PaInt16 = Int16
type PaInt8 = Int8
type PaUInt8 = Word8
type PaTime = Double
type HostApiIndex = Int
type DeviceIndex = Int
type FrequencyMap = Map ByteString Int
type FieldFrequency = (ByteString, Int)
type Name = ByteString
type DistributionName = ByteString
type Path = ByteString
type Prefix = ByteString
type Comment = ByteString
type DescriptionPath = ByteString
type PortDescription = Maybe ByteString
type Maintainer = ByteString
type Categories = [ByteString]
type ExtractDepends = [ByteString]
type PatchDepends = [ByteString]
type FetchDepends = [ByteString]
type BuildDepends = [ByteString]
type RunDepends = [ByteString]
type Website = ByteString
type PortField = Port -> ByteString
type PortQuery = [(PortField, String)]
type PMStream = ForeignPtr PortMidiStream
type DeviceID = Int
type PortFilter a = a -> a -> Maybe a
type PortNotifier a = a -> IO ()
type Proc = String -> Port Char -> Port Char -> IO ProcId
type Pid = Int
type Policy = Int
type TimerId = Int
type AIOCB = ForeignPtr AIOCBStruct
type ListIOMode = Int
type Data = ([Dimension], [Value], Bool, Word32)
type Dimension = (Word32, Word32)
type Value = Maybe ByteString
type E a = a -> ByteString
type D a = ByteString -> Either Text a
type ValidationFunc a = a -> ValidationError
type Migration = ReaderT Connection IO
type DBKeyType = Int64
type DBRef = GDBRef NormalRef
type DBRefUnique = GDBRef UniqueRef
type DBRefInfo = GDBRefInfo NormalRef
type DBRef = GDBRef NormalRef
type DBRefUnique = GDBRef UniqueRef
type DBRefInfo = GDBRefInfo NormalRef
type Ent a = (EntityId a, a)
type TimeZoneHMS = (Int, Int, Int)
type Date = Unbounded Day
type UTCTimestamp = Unbounded UTCTime
type ZonedTimestamp = Unbounded ZonedTime
type LocalTimestamp = Unbounded LocalTime
type TypeInfoCache = IntMap TypeInfo
type FieldParser a = Field -> Maybe ByteString -> Conversion a
type ScriptName = String
type Checksum = ByteString
type OID = Word32
type PGValues = [PGValue]
type PGArray a = [Maybe a]
type PGSimpleQuery = QueryParser SimpleQuery
type PGPreparedQuery = QueryParser PreparedQuery
type PGException = PGError
type PgError = SessionError Postgres
type NonnegRange = Range Int
type PStmt = Stmt Postgres
type StatementT = PStmt -> PStmt
type DbRole = Text
type UserId = Text
type Application = Mail -> IO HandlerResponse
type Producer b = Proxy X () () b
type Consumer a = Proxy () a () X
type PostmarkRequest' a = PostmarkRequest PostmarkError a
type PostmarkResponse' a = PostmarkResponse PostmarkError a
type Connection = Handle
type ReconnectableConnection = (IORef Connection, (String, Int))
type ColorArray = [Color]
type Color = (Int, Int, Int)
type Name = String
type Depth = Int
type Test = (Name, Depth -> IO Result)
type HeapM s e = HeapT e (ST s)
type PQueueT e = QueueT (PQueue e)
type PQueueM e = QueueM (PQueue e)
type FibQueueT e = QueueT (FQueue e)
type FibQueueM e = QueueM (FQueue e)
type SkewQueueT e = QueueT (SkewQueue e)
type SkewQueueM e = QueueM (SkewQueue e)
type IntQueueT = QueueT IntQueue
type IntQueueM = QueueM IntQueue
type TextRep = String
type StrName = String
type H a = [a] -> [a]
type FileExtension = String
type Log = ([Html], ChangeStats)
type ModuleParseFunction = HsSourceFile -> IO (Either ModuleParseError Module)
type Pred = PredM Identity
type Error = Text
type Cont r = ContT r Identity
type State s = StateT s Identity
type Reader r = ReaderT r Identity
type RWS r w s = RWST r w s Identity
type Writer w = WriterT w Identity
type Forest a = [Tree a]
type RenderT a = WriterT [String] (StateT RenderState (ErrorT PressError IO)) a
type RenderT_ = RenderT ()
type TemplatePath = String
type TagName = String
type TemplateParser a = Parsec [(Token, SourcePos)] ParserState a
type NodeParser = TemplateParser (Maybe Node)
type ParserState = (Parser, Template)
type Result = Either PressError [String]
type Name = String
type Width = Int
type Word64_# = Word#
type Int64_# = Int#
type BS1I i = BitSet :> Interface i
type BS2I i j = (BitSet :> Interface i) :> Interface j
type ChanContentAmountMeasure = Int
type ChanLoad = ChanContentAmountMeasure
type ChanCapacity = ChanContentAmountMeasure
type PermitToBlock = Bool
type WriteSucceeded = Bool
type TakeElementOutShouldWe = Bool
type StartPriority = ChanContentAmountMeasure
type CurrentPriority = StartPriority
type PCC_ContainsGivenSpecification = Bool
type NothingElseIsInStruct = Bool
type InterruptShouldWe = Bool
type AskerID = String
type ReadFromConsoleStr = String
type ThreadFinisher = IO ()
type FunctionName = String
type LockUserName = FunctionName
type Hex = String
type Percent = Integer
type T prob = prob -> prob
type Event a = a -> Bool
type Spread prob a = [a] -> T prob a
type Change a = a -> a
type T prob a = a -> T prob a
type SpreadC prob a = [Change a] -> T prob a
type SpreadT prob a = [T prob a] -> T prob a
type Probability = Rational
type Dist a = T Probability a
type PBool = T Probability Bool
type Probability = Rational
type Dist a = T Probability a
type State a = [a]
type PState a = Dist (State a)
type STrans a = State a -> PState a
type SPred a = a -> State a -> Bool
type Probability = Rational
type Dist a = T Probability a
type Family = (Child, Child)
type Probability = Rational
type Dist a = T Probability a
type Die = Int
type Probability = Rational
type Dist = T Probability
type Family = [Child]
type Probability = Double
type Dist a = T Probability a
type Distribution prob a = T (T prob a)
type Change a = a -> T a
type Transition prob a = a -> Distribution prob a
type ApproxDist a = T [a]
type Trace a = [a]
type Walk a = a -> Trace a
type Space prob a = Trace (T prob a)
type Expand prob a = a -> Space prob a
type RTrace a = T (Trace a)
type RWalk a = a -> RTrace a
type RSpace prob a = T (Space prob a)
type RExpand prob a = a -> RSpace prob a
type Dist a = T T a
type Spread a = [a] -> Dist a
type RDist a = T (Dist a)
type Trans a = a -> Dist a
type Space a = Trace (Dist a)
type Expand a = a -> Space a
type RTrans a = a -> RDist a
type RSpace a = T (Space a)
type RExpand a = a -> RSpace a
type Strategy = Trans State
type StrategyM = Door -> Door -> Door
type Spread obj a = [a] -> obj a
type Time = Int
type Profile = (Time, Time)
type Event a = (a, Profile)
type Queue a = [(a, Time)]
type State a = (Queue a, Time)
type System a = [([a], Time)]
type Events a = [Event a]
type RProfile = (Dist Time, Trans Time)
type REvent a = (a, RProfile)
type REvents a = [REvent a]
type Collection a = [a]
type Probability = Rational
type Card = (Rank, Suit)
type Score = Int
type Die = Int
type Probability = Rational
type Dist = T Probability
type Score = Int
type PlotFun = Float -> Float
type Vis = IO ()
type Height = Int
type ProcessName = String
type UID = Int
type UserName = String
type UserDatabase = Map UID UserName
type PHANDLE = CPid
type DecodingFunction bytes text = forall r. Producer bytes IO r -> Producer text IO (Producer bytes IO r)
type Proc_Point = (Proc_Float, Proc_Float)
type Proc_Point = (Proc_Float, Proc_Float)
type Path = [Proc_Point]
type InstImage = [(IAddress, [Inst])]
type DataImage = [(DAddress, [DValue])]
type ImemArray = Array IAddress Inst
type DmemArray = Array DAddress DValue
type IAddress = Int
type DAddress = Int
type DValue = Int
type GRegArray = Array GReg Int
type FlagArray = Array Flag Bool
type EvalCpu a = State CpuState a
type TrcLog = ByteString
type TrcLog = ByteString
type InstImage = [(IAddress, [Inst])]
type DataImage = [(DAddress, [DValue])]
type Pid = Int
type ProcessHandles = (Handle, Handle, Handle, ProcessHandle)
type T0 = ()
type T1 a = a
type T2 a b = (a, T1 b)
type T3 a b c = (a, T2 b c)
type T4 a b c d = (a, T3 b c d)
type T5 a b c d e = (a, T4 b c d e)
type T6 a b c d e f = (a, T5 b c d e f)
type T7 a b c d e f g = (a, T6 b c d e f g)
type T8 a b c d e f g h = (a, T7 b c d e f g h)
type T9 a b c d e f g h a9 = (a, T8 b c d e f g h a9)
type T10 a b c d e f g h a9 a10 = (a, T9 b c d e f g h a9 a10)
type T11 a b c d e f g h a9 a10 a11 = (a, T10 b c d e f g h a9 a10 a11)
type T12 a b c d e f g h a9 a10 a11 a12 = (a, T11 b c d e f g h a9 a10 a11 a12)
type T13 a b c d e f g h a9 a10 a11 a12 a13 = (a, T12 b c d e f g h a9 a10 a11 a12 a13)
type T14 a b c d e f g h a9 a10 a11 a12 a13 a14 = (a, T13 b c d e f g h a9 a10 a11 a12 a13 a14)
type T15 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 = (a, T14 b c d e f g h a9 a10 a11 a12 a13 a14 a15)
type T16 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 = (a, T15 b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16)
type T17 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 = (a, T16 b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17)
type T18 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 = (a, T17 b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18)
type T19 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 = (a, T18 b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19)
type T20 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 = (a, T19 b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20)
type T21 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 = (a, T20 b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21)
type T22 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 = (a, T21 b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22)
type T23 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 = (a, T22 b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23)
type T24 a b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 = (a, T23 b c d e f g h a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24)
type Error = String
type (:->) p q = forall a b. p a b -> q a b
type GraphDataMapping = String -> Map String (Map String BoundedMean) -> GraphData
type FileReceiver m = FilePath -> Sink ByteString m ()
type Atom = String
type Unifier = [Substitution]
type Substitution = (VariableName, Term)
type Program = [Clause]
type Goal = Term
type Graph = Gr HtmlText HtmlText
type Quantile = (Rational, Rational)
type LabelPairs = [(String, String)]
type Label0 = ()
type Label1 = String
type Label2 = (String, String)
type Label3 = (String, String, String)
type Label4 = (String, String, String, String)
type Label5 = (String, String, String, String, String)
type Label6 = (String, String, String, String, String, String)
type Label7 = (String, String, String, String, String, String, String)
type Label8 = (String, String, String, String, String, String, String, String)
type Label9 = (String, String, String, String, String, String, String, String, String)
type Monitor a = MonitorT Identity a
type Prompt a b = PromptT a b Identity
type Release = String
type Architecture = String
type HostName = String
type UserName = String
type Domain = String
type SerialNumber = Word32
type PrivDataSourceDesc = String
type PrivData = String
type Desc = String
type Script = [String]
type PrivMap = Map (PrivDataField, Context) PrivData
type Line = String
type ServiceName = String
type Url = String
type Section = String
type SourcesGenerator = DebianSuite -> [Line]
type Package = String
type ConfigFile = [String]
type FsType = String
type Source = String
type Url = String
type ServiceName = String
type Option = String
type MachineName = String
type WeekDay = Int
type MonthDay = Int
type YearDay = Int
type ContainerName = String
type ContainerAlias = String
type Interface = String
type RepoUrl = String
type Branch = String
type GID = Int
type GrubDevice = String
type OSDevice = String
type TimeoutSecs = Int
type DataSize = String
type ConfigFile = [String]
type ObnamParam = String
type PubKeyText = String
type WarningMessage = String
type ConfigFile = [String]
type Conf = String
type HiddenServiceName = String
type NodeName = String
type NickName = String
type AnnexUUID = String
type TimeOut = String
type Name = String
type Clause c = Set (Atom c)
type CNF c = Set (Clause c)
type SatisfyingAssignment l = Map l Bool
type Olist a = [a]
type TextFrame = [String]
type TextFrameTable = [[TextFrame]]
type LiteralPair a = (a, Bool)
type Valuator a = Olist (LiteralPair a)
type TruthTable a = (Olist a, Maybe (PropForm a), [([Bool], Bool)])
type MultiTruthTable a = (Olist a, [PropForm a], [([Bool], [Bool])])
type OrdPropForm a = PropForm a
type EvalNF a = PropForm a
type LitForm a = PropForm a
type NegNormForm a = PropForm a
type NLC a = NegNormForm a
type NLD a = NegNormForm a
type CNF a = NegNormForm a
type DNF a = NegNormForm a
type NaturalDNF a = DNF a
type NaturalCNF a = CNF a
type PDNF a = DNF a
type PCNF a = CNF a
type MDNF a = DNF a
type MCNF a = CNF a
type SimpleDNF a = PropForm a
type SimpleCNF a = PropForm a
type IAtom = Int
type ILit = Int
type ILine = Costack ILit
type IForm = Costack ILine
type XLit a = (Olist a, ILit)
type XLine a = (Olist a, ILine)
type XForm a = (Olist a, IForm)
type IdxPropForm a = (Olist a, PropForm IAtom)
type SizeTriple = (Int, Int, Int)
type JunctorWeighting = [(JunctorSymbol, Int)]
type Msec = Integer
type CanonPerformance = (SizeTriple, (Msec, SizeTriple), (Msec, SizeTriple))
type Verbose = Bool
type Seconds = Double
type Money = Double
type Money = Double
type Tag = Word32
type Repeated n a = Field n (RepeatedField [a])
type Packed n a = Field n (PackedField (PackedList a))
type Std__basic_string = Ptr Std__basic_string_mem
type WireSize = Int64
type KeyInfo = (ProtoName, FieldInfo)
type EnumInfoApp e = [(EnumCode, String, e)]
type Put = PutM ()
type WireSize = Int64
type KeyInfo = (ProtoName, FieldInfo)
type EnumInfoApp e = [(EnumCode, String, e)]
type Put = PutM ()
type Prot m = StateT (ProtEnv m) m
type Method m = Object -> [Object] -> Prot m [Object]
type One = Succ Zero
type Two = Succ One
type Three = Succ Two
type Four = Succ Three
type Five = Succ Four
type Six = Succ Five
type Seven = Succ Six
type Eight = Succ Seven
type Nine = Succ Eight
type Ten = Succ Nine
type VecTree n a = Tree2N n (VecN n a)
type Constraint = (Sum, Op, Integer)
type SoftConstraint = (Maybe Integer, Constraint)
type Sum = [WeightedTerm]
type WeightedTerm = (Integer, Term)
type Term = [Lit]
type Lit = Int
type Var = Int
type UUID = Text
type HistoryOptions = [HistoryOption]
type URLString = String
type VerifyToken = String
type Document = Document_ Unknown Immutable
type MutableDocument = Document_ Unknown Mutable
type Node = Node_ Unknown Immutable
type MutableNode k = Node_ k Mutable
type XPathNode m = Either (Node_ Unknown m) Attribute
type Attribute = (ByteString, ByteString)
type Buf = ByteString
type YAMLClass = String
type YAMLKey = String
type YAMLVal = YamlNode
type SeenCache = IORef IntSet
type EmitAs = ReaderT SeenCache IO
type SeenHash = HashTable SYMID (Maybe YamlNode)
type DuplHash = HashTable YamlNode Int
type NamespaceMangler = String -> String
type Perl5Class = String
type Perl5Key = String
type Perl5Val = String
type JSONClass = String
type JSONKey = String
type JSONVal = String
type Punkt = Reader PunktData
type PQueue a = [TChan a]
type DeflateM = State DecompressState
type Unknown = Int
type Precedence = Integer
type Guard a = Expr a
type Constraint = (Qualified ProperName, [Type])
type Guard = Expr
type Ann = (Maybe SourceSpan, [Comment], Maybe Type, Maybe Meta)
type ForeignDecl = (Ident, Type)
type TokenParser a = Parsec [PositionedToken] ParseState a
type UnknownMap = Map (LabelType, Unknown) Unknown
type ModuleGraph = [(ModuleName, [ModuleName])]
type ForeignJS = String
type Supply = SupplyT Identity
type SupplyVar = Integer
type Externs = String
type UploadedPackage = Package NotYetKnown
type VerifiedPackage = Package GithubUser
type Bookmark = InPackage (ModuleName, String)
type DeviceURI = Text
type DeviceToken = Text
type RegId = Text
type RegId = Text
type F a = Flatten (Rep a)
type Lens s v = LensM Identity s v
type PutM m a = ReaderT GetPut (WriterT PutGet m) a
type Get s v = s -> Maybe v
type Put m s v = Maybe s -> v -> PutM m s
type Create m s v = v -> PutM m s
type PutlensMaybeM m s v = PutlensM (MaybeT m) s v
type PutlensReaderM m e s v = PutlensM (ReaderT e m) s v
type PutlensStateM m st s v = PutlensM (StateT st m) s v
type Putlens s v = PutlensM Identity s v
type Name = String
type City = String
type Book = (String, String)
type BookPerson = (String, Person)
type Vertex = Int
type ColoredGraph = [((Vertex, Color), Edges)]
type Edges = [Vertex]
type Graph = [(Vertex, Edges)]
type Vertex = Int
type Edges = [Vertex]
type Graph = [(Vertex, Edges)]
type Backend' b = (Backend b R2, Renderable (Path R2) b)
type PuzzleSol b = (Diagram b R2, Maybe (Diagram b R2))
type RenderPuzzle b p s = (p -> Diagram b R2, (p, s) -> Diagram b R2)
type ParsePuzzle a b = (Value -> Parser a, Value -> Parser b)
type B = SVG
type Coord = Cell Square
type Size = GridSize Square
type Clue a = Maybe a
type MasyuClue = Clue MasyuPearl
type IntClue = Clue Int
type CompassClue = Clue CompassC
type Loop = [Edge]
type Thermometer = [Coord]
type BahnhofClue = Either Int Crossing
type SGrid = Grid Square
type CharGrid = SGrid Char
type AreaGrid = CharGrid
type ShadedGrid = SGrid Bool
type CharClueGrid = SGrid (Maybe Char)
type IntGrid = SGrid (Clue Int)
type Path = [String]
type ThermoRect = Rect (Either Blank (Either Int Alpha))
type PuzzleHandler b a = forall p q. ParsePuzzle p q -> RenderPuzzle b p q -> a
type Stack = [Value]
type Memo = IntMap Value
type Arg = Int
type Arg = Int
type Vec2DD = Packed (Vec2 DoubleDouble)
type Vec3DD = Packed (Vec3 DoubleDouble)
type Vec4DD = Packed (Vec4 DoubleDouble)
type Mat22DD = Vec2 (Vec2DD)
type Mat23DD = Vec2 (Vec3DD)
type Mat24DD = Vec2 (Vec4DD)
type Mat32DD = Vec3 (Vec2DD)
type Mat33DD = Vec3 (Vec3DD)
type Mat34DD = Vec3 (Vec4DD)
type Mat42DD = Vec4 (Vec2DD)
type Mat43DD = Vec4 (Vec3DD)
type Mat44DD = Vec4 (Vec4DD)
type Vec2QD = Packed (Vec2 QuadDouble)
type Vec3QD = Packed (Vec3 QuadDouble)
type Vec4QD = Packed (Vec4 QuadDouble)
type Mat22QD = Vec2 (Vec2QD)
type Mat23QD = Vec2 (Vec3QD)
type Mat24QD = Vec2 (Vec4QD)
type Mat32QD = Vec3 (Vec2QD)
type Mat33QD = Vec3 (Vec3QD)
type Mat34QD = Vec3 (Vec4QD)
type Mat42QD = Vec4 (Vec2QD)
type Mat43QD = Vec4 (Vec3QD)
type Mat44QD = Vec4 (Vec4QD)
type RR = Double
type CC = Complex RR
type Rotation = (Bool, Bool) -> CC
type HeapMap = Map Qbit Bool
type Pure = VecEqL CC HeapMap
type Index = Int
type EdgeRef = (Index, Direction, Orientation)
type EdgeTable = (EdgeRef, EdgeRef, EdgeRef, EdgeRef)
type QEDS a = Vector (Maybe (Edge a))
type MQEDS s a = MVector s (Maybe (Edge a))
type Location = (Int, Int)
type Region = (Int, Int, Int, Int)
type Tile a = (a, Region)
type Integrator = (Double -> Double) -> Double -> Double -> Double
type Interpolator1d = [Double] -> [Double] -> Double -> Double
type ContingentClaim1 = forall a. Obs1 a => ContingentClaim a
type ContingentClaim2 = forall a. Obs2 a => ContingentClaim a
type ContingentClaim3 = forall a. Obs3 a => ContingentClaim a
type ContingentClaim4 = forall a. Obs4 a => ContingentClaim a
type CCBuilder w r a = WriterT w (Reader r) a
type MonteCarlo s a = MonteCarloT Identity s a
type MonteCarloT m s = StateT s (RVarT m)
type Amp = Complex Double
type SpinnerTheme = String
type Loc = String
type AnException = SomeException
type AnException = SomeException
type Test = (String, Property)
type UF = State S
type CC = State S
type List = []
type Several f = Some (List O f)
type Witness = Some Witnessed
type TypeMap f = Map TypeRep (Some f)
type TypeRel f = TypeMap (List O f)
type Strategy = forall a. Symbol -> PGen a -> Gen a
type Universe = IntMap [Int]
type EQ = ReaderT (Int, IntMap Universe) CC
type Subst = Symbol -> Int
type GP = ReaderT Plug Gen
type Precondition = [Symbol]
type PEQ = State Context
type SP a b f r = forall b'. P () a b b' f r
type Producer b b' f r = forall a' a. P a' a b b' f r
type Consumer a' a f r = forall b b'. P a' a b b' f r
type Effect f r = forall a' a b b'. P a' a b b' f r
type SP a b f r = forall b'. P () a b b' f r
type Consumer a' a f r = forall b b'. P a' a b b' f r
type Producer b b' f r = forall a' a. P a' a b b' f r
type Effect f r = forall a' a b b'. P a' a b b' f r
type ParseResult e = Maybe (Maybe e)
type ParseResult e = Maybe (Maybe e)
type Cell = (Int, Int)
type HalfGate = (Cell, Cell)
type Gate = (HalfGate, HalfGate)
type HalfGates = Set HalfGate
type BoardSize = Int
type ValidMoves = [Cell]
type RadosCallback = Ptr RadosCompletionT -> Ptr () -> IO ()
type RadosCallbackT = FunPtr RadosCallback
type WordScore = (Text, Double)
type NoSplit = String
type StopwordsMap = Map Text ()
type NoList = [Text]
type Dictionary = Map ByteString Object
type Drive m a = Client' TReq TResp m a
type Playground m a = Client' NReq NResp m a
type Reference = (Int, Int)
type Tape m a = Server' TReq TResp m a
type Error = String
type Uri = Text
type Path = Text
type MonadRand m = (Monad m, RandPicker m)
type RVar = RVarT Identity
type RVar = RVarT Identity
type Array2 a = (a, a)
type Array4 a = (a, a, a, a)
type Bounds t = (t, t)
type Span t = (t, Diff t)
type RangeMin = Index -> Length -> Index
type LEq a = a -> a -> Bool
type Index = Int
type Length = Int
type Index = Int
type Index = Int
type TypeError = String
type V0 = Zero
type V1 = Succ V0
type V2 = Succ V1
type V3 = Succ V2
type V4 = Succ V3
type V5 = Succ V4
type V6 = Succ V5
type V7 = Succ V6
type V8 = Succ V7
type V9 = Succ V8
type ANY = TypVar V0
type ANY1 = TypVar V1
type ANY2 = TypVar V2
type ANY3 = TypVar V3
type ANY4 = TypVar V4
type ANY5 = TypVar V5
type ANY6 = TypVar V6
type ANY7 = TypVar V7
type ANY8 = TypVar V8
type ANY9 = TypVar V9
type TypeError = String
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s a = Lens s s a a
type Traversal s t a b = forall f. Applicative f => (a -> f b) -> s -> f t
type Traversal' s a = Traversal s s a a
type StrokeWidth = Float
type DrawContext m px = StateT (MutableImage (PrimState m) px) m
type PathWalker a = PathWalkerT Identity a
type PathDrawer m px = Transformation -> PlaneBound -> DrawOrder px -> m ()
type ModulablePixel px = (Pixel px, PackeablePixel px, Storable (PackedRepresentation px), Modulable (PixelBaseComponent px))
type RenderablePixel px = (ModulablePixel px, Pixel (PixelBaseComponent px), PackeablePixel (PixelBaseComponent px), Num (PackedRepresentation px), Num (PackedRepresentation (PixelBaseComponent px)), Storable (PackedRepresentation (PixelBaseComponent px)), PixelBaseComponent (PixelBaseComponent px) ~ (PixelBaseComponent px))
type Drawing px = F (DrawCommand px)
type Point = V2 Float
type Vector = V2 Float
type DashPattern = [Float]
type Gradient px = [(Float, px)]
type Dpi = Int
type ResultsCombiner req resp = req -> req -> Maybe (req, resp -> (resp, resp))
type Regex a = RE Char a
type PosRegex a = PosRE Char a
type LexResult t = Either (LexError t) [t]
type Result = Either RserveError (Maybe RSEXP)
type RserveError = String
type Subject = Node
type Predicate = Node
type Object = Node
type Triples = [Triple]
type NodeSelector = Maybe (Node -> Bool)
type Rdio a = ReaderT Token IO a
type React ty = ReactT ty Identity
type ParseSerial a = (Serial -> Maybe Serial) -> a -> Maybe a
type External = Serial
type Internal = Untyped
type Recover = Serial
type Index = Int
type OperationalLayer m = ReaderT (Index, Internal) (WriterT [Internal] m)
type SerialReactor c = (ReactionStates, [SerialExternal c])
type Serialization c = MinimalGraph (SerialExternal c)
type Serial = forall a. IO a -> IO a
type Action = IO ()
type Sink a = a -> Action
type Time = Max
type Time = Max
type ImpBounds t = Improving (AddBounds t)
type TimeT = Double
type ITime = ImpBounds TimeT
type Future = FutureG ITime
type Event = EventG ITime
type Reactive = ReactiveG ITime
type Behavior = BehaviorI TimeT
type Behaviour = Behavior
type :--> b a = (Sink b, a)
type :+-> b a = IO (b :--> a)
type Sink a = a -> Action
type Action = IO ()
type TimeT = Double
type ITime = ImpBounds TimeT
type Event = EventG ITime
type Behavior = BehaviorI TimeT
type Behaviour = Behavior
type EventSink a = Event a -> IO (HandleResult)
type Disposable = IO ()
type PropertySink a = PropertyEvent a -> IO HandleResult
type Abs = Rational
type Bundle a = [Future a]
type EventBundle = Bundle T
type EventDataBundle = Bundle Data
type KeySet = Map (Pitch, Channel) Velocity
type KeyQueue = [((Pitch, Channel), Velocity)]
type T t time set = Behavior t set -> Event t time -> Event t [NoteBoundary]
type Selector set i = i -> set -> [((Pitch, Channel), Velocity)]
type Schedule = Tag
type Step = EvalNetwork (IO ())
type Build = BuildT Identity
type BuildIO = BuildT IO
type BuildT = RWST () BuildConf Network
type Future = Dated
type Event a = [Maybe a]
type Moment a = Time -> a
type Handler a = a -> IO ()
type Behavior t = Behavior t
type Anim a = UI -> Behavior a
type Action s = s -> IO s
type Request s a = s -> IO (s, a)
type Sink a = a -> IO ()
type Callback = Int -> Char -> IO Int
type Callback = Int -> Char -> IO Int
type Setter s t a b = (a -> Mutator b) -> s -> Mutator t
type Getting r s a = (a -> Accessor r a) -> s -> Accessor r s
type Getter s a = forall r. Getting r s a
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Field' n a v = Field n a a v v
type Field a = a ::: TypeOf a
type Rec a = a (Id KindStar)
type SessionState = Integer
type IORqHandler = RqHandlerT IO
type BasicRsp = HandlerRsp BasicRspBody
type RedisInfo = Map String String
type RedisInfo = Map String String
type RedisM = StateT Redis IO
type Redis = ProgramT Command
type PubSub = ProgramT PubSubCommand
type Result = Either RedisError
type Field = ByteString
type Index = Int64
type ParamRest = Map ByteString ByteString
type Source a = Event a
type Sink a = Event a -> Event ()
type MidiTime = Word32
type MidiMessage = Message
type MidiSource = Source
type MidiDestination = Destination
type Capacity = Int
type Copies = Int
type Row = Index Row'
type Col = Index Col'
type Profit = Double
type ProfitMatrix = Matrix Profit
type ProfitFunction a b c = a -> b -> Maybe c -> Profit
type Row = Index Row'
type Col = Index Col'
type ProfitFunction a b c = a -> b -> Maybe c -> Profit
type ProfitMatrix = Matrix Profit
type Capacity = Int
type Copies = Int
type Name = String
type Language = String
type Area = String
type Subarea = String
type Match = (Entry Referee, [Entry Proposal])
type Name = String
type Language = String
type Area = String
type Subarea = String
type Match = (Entry Referee, [Entry Proposal])
type Simple t s a = t s s a a
type Iso s t a b = forall w r w' r'. (RefMonads w r, RefMonads w' r') => Reference w r w' r' s t a b
type Prism s t a b = forall w r w' r'. (RefMonads w r, RefMonads w' r', MonadPlus r, MMorph Maybe r, MonadPlus w', MMorph Maybe w') => Reference w r w' r' s t a b
type Lens s t a b = forall w r. RefMonads w r => Reference w r MU MU s t a b
type Lens' = Reference Identity Identity MU MU
type RefPlus s t a b = forall w r. (RefMonads w r, MonadPlus r) => Reference w r MU MU s t a b
type Partial s t a b = forall w r. (Functor w, Applicative w, Monad w, Functor r, Applicative r, MonadPlus r, MMorph Maybe r) => Reference w r MU MU s t a b
type Partial' = Reference Identity Maybe MU MU
type Traversal s t a b = forall w r. (RefMonads w r, MonadPlus r, MMorph Maybe r, MMorph [] r) => Reference w r MU MU s t a b
type Traversal' = Reference Identity [] MU MU
type IOLens s t a b = forall w r. (RefMonads w r, IOMonads w r) => Reference w r MU MU s t a b
type IOLens' = Reference IO IO MU MU
type IOPartial s t a b = forall w r. (RefMonads w r, IOMonads w r, MonadPlus r, MMorph Maybe r) => Reference w r MU MU s t a b
type IOPartial' = Reference IO (MaybeT IO) MU MU
type IOTraversal s t a b = forall w r. (RefMonads w r, IOMonads w r, MonadPlus r, MMorph Maybe r, MMorph [] r) => Reference w r MU MU s t a b
type IOTraversal' = Reference IO (ListT IO) MU MU
type StateLens st m s t a b = forall w r. (RefMonads w r, MMorph (StateT st m) w, MMorph (StateT st m) r) => Reference w r MU MU s t a b
type StateLens' s m = Reference (StateT s m) (StateT s m) MU MU
type StatePartial st m s t a b = forall w r. (RefMonads w r, MMorph (StateT st m) w, MonadPlus r, MMorph Maybe r, MMorph (StateT st m) r) => Reference w r MU MU s t a b
type StatePartial' s m = Reference (StateT s m) (MaybeT (StateT s m)) MU MU
type StateTraversal st m s t a b = forall w r. (RefMonads w r, MMorph (StateT st m) w, MonadPlus r, MMorph Maybe r, MMorph [] r, MMorph (StateT st m) r) => Reference w r MU MU s t a b
type StateTraversal' s m = Reference (StateT s m) (ListT (StateT s m)) MU MU
type WriterLens st m s t a b = forall w r. (RefMonads w r, MMorph (WriterT st m) w, MMorph (WriterT st m) r) => Reference w r MU MU s t a b
type WriterLens' s m = Reference (WriterT s m) (WriterT s m) MU MU
type WriterPartial st m s t a b = forall w r. (RefMonads w r, MMorph (WriterT st m) w, MonadPlus r, MMorph Maybe r, MMorph (WriterT st m) r) => Reference w r MU MU s t a b
type WriterPartial' s m = Reference (WriterT s m) (MaybeT (WriterT s m)) MU MU
type WriterTraversal st m s t a b = forall w r. (RefMonads w r, MMorph (WriterT st m) w, MonadPlus r, MMorph Maybe r, MMorph [] r, MMorph (WriterT st m) r) => Reference w r MU MU s t a b
type WriterTraversal' s m = Reference (WriterT s m) (ListT (WriterT s m)) MU MU
type STLens st s t a b = forall w r. (RefMonads w r, MMorph (ST st) w, MMorph (ST st) r) => Reference w r MU MU s t a b
type STLens' s = Reference (ST s) (ST s) MU MU
type STPartial st s t a b = forall w r. (RefMonads w r, MMorph (ST st) w, MonadPlus r, MMorph Maybe r, MMorph (ST st) r) => Reference w r MU MU s t a b
type STPartial' s = Reference (ST s) (MaybeT (ST s)) MU MU
type STTraversal st s t a b = forall w r. (RefMonads w r, MMorph (ST st) w, MonadPlus r, MMorph Maybe r, MMorph [] r, MMorph (ST st) r) => Reference w r MU MU s t a b
type STTraversal' s = Reference (ST s) (ListT (ST s)) MU MU
type Simple t s a = t s s a a
type Iso s t a b = forall w r w' r'. (RefMonads w r, RefMonads w' r') => Reference w r w' r' s t a b
type Lens s t a b = forall w r. RefMonads w r => Reference w r MU MU s t a b
type Partial s t a b = forall w r. (Functor w, Applicative w, Monad w, Functor r, Applicative r, MonadPlus r, MMorph Maybe r) => Reference w r MU MU s t a b
type Traversal s t a b = forall w r. (RefMonads w r, MonadPlus r, MMorph Maybe r, MMorph [] r) => Reference w r MU MU s t a b
type Lens' = Reference Identity Identity MU MU
type Partial' = Reference Identity Maybe MU MU
type Traversal' = Reference Identity [] MU MU
type IOLens s t a b = forall w r. (RefMonads w r, IOMonads w r) => Reference w r MU MU s t a b
type IOPartial s t a b = forall w r. (RefMonads w r, IOMonads w r, MonadPlus r, MMorph Maybe r) => Reference w r MU MU s t a b
type IOTraversal s t a b = forall w r. (RefMonads w r, IOMonads w r, MonadPlus r, MMorph Maybe r, MMorph [] r) => Reference w r MU MU s t a b
type IOLens' = Reference IO IO MU MU
type IOPartial' = Reference IO (MaybeT IO) MU MU
type IOTraversal' = Reference IO (ListT IO) MU MU
type StateLens st m s t a b = forall w r. (RefMonads w r, MMorph (StateT st m) w, MMorph (StateT st m) r) => Reference w r MU MU s t a b
type StatePartial st m s t a b = forall w r. (RefMonads w r, MMorph (StateT st m) w, MonadPlus r, MMorph Maybe r, MMorph (StateT st m) r) => Reference w r MU MU s t a b
type StateTraversal st m s t a b = forall w r. (RefMonads w r, MMorph (StateT st m) w, MonadPlus r, MMorph Maybe r, MMorph [] r, MMorph (StateT st m) r) => Reference w r MU MU s t a b
type StateLens' s m = Reference (StateT s m) (StateT s m) MU MU
type StatePartial' s m = Reference (StateT s m) (MaybeT (StateT s m)) MU MU
type StateTraversal' s m = Reference (StateT s m) (ListT (StateT s m)) MU MU
type WriterLens st m s t a b = forall w r. (RefMonads w r, MMorph (WriterT st m) w, MMorph (WriterT st m) r) => Reference w r MU MU s t a b
type WriterPartial st m s t a b = forall w r. (RefMonads w r, MMorph (WriterT st m) w, MonadPlus r, MMorph Maybe r, MMorph (WriterT st m) r) => Reference w r MU MU s t a b
type WriterTraversal st m s t a b = forall w r. (RefMonads w r, MMorph (WriterT st m) w, MonadPlus r, MMorph Maybe r, MMorph [] r, MMorph (WriterT st m) r) => Reference w r MU MU s t a b
type WriterLens' s m = Reference (WriterT s m) (WriterT s m) MU MU
type WriterPartial' s m = Reference (WriterT s m) (MaybeT (WriterT s m)) MU MU
type WriterTraversal' s m = Reference (WriterT s m) (ListT (WriterT s m)) MU MU
type Positive = GreaterThan 0
type Negative = LessThan 0
type ZeroToOne = And (Not (LessThan 0)) (Not (GreaterThan 1))
type ResultM = EventM
type WeakList a = [Weak a]
type PaginationCache k v = Map k [CacheVal v]
type PaginationInput k = (k, PaginationQuery)
type PaginationOutput k v = (k, CacheVal v)
type GWidget t m a = WidgetConfig t a -> m (HtmlWidget t a)
type FormState m input = ReaderT (Environment m input) (StateT FormRange m)
type MFun = Char
type VarName = String
type Context = BasicHashTable Int (StableName MFun, MFun, [ShowF], Int)
type Context = BasicHashTable Int (StableName MFun, MFun, [ShowF], Int)
type MatchOffset = Int
type MatchLength = Int
type MatchArray = Array Int (MatchOffset, MatchLength)
type MatchText source = Array Int (source, (MatchOffset, MatchLength))
type Letter = (Char, Int)
type Binder = IntMap [Range]
type Regex = (DfaTable, SBinder, SBinder -> [Env], [Int], FollowBy, IntMap ())
type Regex = (DfaTable, SBinder, SBinder -> [Env], [Int], FollowBy, IntMap ())
type StartOffset = MatchOffset
type EndOffset = MatchOffset
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type StartOffset = MatchOffset
type EndOffset = MatchOffset
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type Letter = (Char, Int)
type Binder = IntMap [Range]
type Regex = (PdPat0TableRev, [Int], Binder, FollowBy, IntMap ())
type RegOffset = Int64
type RegOffsetT = Int32
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type MatchOffset = Int
type MatchLength = Int
type WrapError = (ReturnCode, String)
type Key = Char
type Tag = Int
type Index = Int
type SetIndex = IntSet
type Position = Int
type GroupIndex = Int
type QTrans = IntMap [TagCommand]
type TagTasks = [(Tag, TagTask)]
type TagList = [(Tag, TagUpdate)]
type TagCommand = (DoPa, TagList)
type WinTags = TagList
type DTrans = IntMap (IntMap (DoPa, Instructions))
type DTrans' = [(Index, [(Index, (DoPa, ([(Tag, (Position, Bool))], [String])))])]
type OrbitTransformer = OrbitLog -> OrbitLog
type OrbitLog = IntMap Orbits
type GroupIndex = Int
type TestInfo = (WhichTest, DoPa)
type NullView = [(SetTestInfo, TagList)]
type QTrans = IntMap [TagCommand]
type MatchOffset = Int
type MatchLength = Int
type Key = Char
type Tag = Int
type Index = Int
type SetIndex = IntSet
type Position = Int
type GroupIndex = Int
type QTrans = IntMap [TagCommand]
type TagTasks = [(Tag, TagTask)]
type TagList = [(Tag, TagUpdate)]
type TagCommand = (DoPa, TagList)
type WinTags = TagList
type DTrans = IntMap (IntMap (DoPa, Instructions))
type DTrans' = [(Index, [(Index, (DoPa, ([(Tag, (Position, Bool))], [String])))])]
type OrbitTransformer = OrbitLog -> OrbitLog
type OrbitLog = IntMap Orbits
type GroupIndex = Int
type TestInfo = (WhichTest, DoPa)
type NullView = [(SetTestInfo, TagList)]
type QTrans = IntMap [TagCommand]
type MatchOffset = Int
type MatchLength = Int
type CharSet = [(Char, Char)]
type Regex = GenRegex String
type Regex = GenRegex String
type InputData = InputData Char
type MatchSpan = (MatchOffset, MatchLength)
type RegExOptsChar = RegExOpts ExtendedRegExChar
type ConsumptionBounds = (DataLength, Maybe DataLength)
type DataLength = Int
type Span = (DataLength, DataLength)
type DataSpan a = ([a], Span)
type AccumulatedConsumptionProfiles = [ConsumptionProfile]
type Repetitions = Int
type RepetitionBounds = (Repetitions, Maybe Repetitions)
type Predicate a = a -> Bool
type BracketExpression m = [Member m]
type AnchorSpecification = (Maybe Anchor, Maybe Anchor)
type Concatenation m = [RepeatablePattern m]
type ExternalMatch m = Maybe (Match m)
type InputData m = [m]
type MatchedData m = (RepeatablePattern m, DataLength, InputData m)
type MatchList m = [Match m]
type RepeatablePattern m = Repeatable (Pattern m)
type Match m = Tree (MatchedData m)
type Result m = (ExternalMatch m, Maybe (MatchList m), ExternalMatch m)
type Word a = [a]
type Env a = [((RE a, RE a), RE a)]
type EnvEq a = [(RE a, RE a)]
type RegionalCString pointer :: (* -> (* -> *) -> *) r = pointer CChar r
type RegionalCStringLen pointer r = (RegionalCString pointer r, Int)
type RegionalCWString pointer :: (* -> (* -> *) -> *) r = pointer CWchar r
type RegionalCWStringLen pointer r = (RegionalCWString pointer r, Int)
type Finalizer = IO ()
type Model f a = f a
type Model f a = f a
type Algebra a r = Alg (PF a) r
type CoAlgebra a s = s -> CoAlg (PF a) s
type FrequencyTable = [(String, Int)]
type XForm m a = XHtmlForm m a
type XFormlet m a = XHtmlFormlet m a
type Column = (PgAttribute, PgType)
type ColumnSQL = ColumnSQL' StringSQL
type QueryRestriction c = [Expr c Bool]
type AggregateColumnRef = ColumnSQL
type OrderColumn = ColumnSQL
type OrderingTerm = (Order, OrderColumn)
type OrderingTerms = [OrderingTerm]
type AssignColumn = ColumnSQL
type AssignTerm = ColumnSQL
type Assignment = (AssignColumn, AssignTerm)
type Assignments = [Assignment]
type UntypedProjection = [ProjectionUnit]
type QueryProduct = ProductTree (Qualified SubQuery)
type QueryProductNode = Node (Qualified SubQuery)
type JoinProduct = Maybe QueryProduct
type QuerySuffix = [Keyword]
type SqlBinOp = Keyword -> Keyword -> Keyword
type AggregatingSetT = Aggregatings Set AggregateElem
type AggregatingSetListT = Aggregatings SetList AggregateSet
type AggregatingPowerSetT = Aggregatings Power AggregateBitKey
type PartitioningSetT c = Aggregatings c AggregateColumnRef
type AggregatingSet = AggregatingSetT Identity
type AggregatingPowerSet = AggregatingPowerSetT Identity
type AggregatingSetList = AggregatingSetListT Identity
type PartitioningSet c = PartitioningSetT c Identity
type OrderingTerms = [OrderingTerm]
type AssignTarget r v = Pi r v
type ConfigureQuery = Qualify (QueryConfig Identity)
type QueryCore = Restrictings Flat (QueryJoin ConfigureQuery)
type OrderedQuery c m p r = Orderings c m (PlaceHolders p, Projection c r)
type Restrict = Restrictings Flat ConfigureQuery
type RestrictedStatement r a = Projection Flat r -> Restrict a
type Assign r = Assignings r Restrict
type AssignStatement r a = Projection Flat r -> Assign r a
type RestrictionContext p r = RestrictedStatement r (PlaceHolders p)
type UpdateTargetContext p r = AssignStatement r (PlaceHolders p)
type QuerySimple = Orderings Flat QueryCore
type SimpleQuery p r = OrderedQuery Flat QueryCore p r
type QueryAggregate = Orderings Aggregated (Restrictings Aggregated (AggregatingSetT QueryCore))
type AggregatedQuery p r = OrderedQuery Aggregated (Restrictings Aggregated (AggregatingSetT QueryCore)) p r
type Window c = Orderings c (PartitioningSet c)
type JoinRestriction a b = Projection Flat a -> Projection Flat b -> Projection Flat (Maybe Bool)
type QuerySimple = QueryA QuerySimple
type QueryAggregate = QueryA QueryAggregate
type QueryUnique = QueryA QueryUnique
type AggregatingSet = QueryA AggregatingSet
type AggregatingSetList = QueryA AggregatingSetList
type AggregatingPowerSet = QueryA AggregatingPowerSet
type Orderings c m = QueryA (Orderings c m)
type Window c = QueryA (Window c)
type Assignings r m = QueryA (Assignings r m)
type UpdateTargetContext p r = Assignings r Restrict (Projection Flat r) (PlaceHolders p)
type RestrictionContext p r = QueryA Restrict (Projection Flat r) (PlaceHolders p)
type TypeMap = [(String, TypeQ)]
type PreparedQuery p a = PreparedStatement p a
type PreparedUpdate p = PreparedStatement p ()
type PreparedInsert a = PreparedStatement a ()
type PreparedInsertQuery p = PreparedStatement p ()
type PreparedDelete p = PreparedStatement p ()
type Column = (PgAttribute, PgType)
type Duration = DateTime -> DateTime
type PayloadLength = Int64
type Identifier = String
type RemoteCallMetaData = Lookup -> Lookup
type PeerInfo = Map String [NodeId]
type LogSphere = String
type PortId = Int
type LocalProcessId = Int
type PeerInfo = Map String [NodeId]
type LogSphere = String
type PeerInfo = Map String [NodeId]
type RemoteCallMetaData = Lookup -> Lookup
type Settings = (UserProtocolSignature, URL)
type UserProtocolSignature = ByteString
type Credentials = Maybe ByteString
type Settings i o s = (UserProtocolSignature, ListeningMode, Timeout, MaxClients, Log, ProcessUserRequest i o s)
type UserProtocolSignature = ByteString
type Port = Int
type Authenticate = Credentials -> IO Bool
type Credentials = Maybe ByteString
type Timeout = Int
type MaxClients = Int
type Log = Text -> IO ()
type ProcessUserRequest i o s = State s -> i -> IO o
type State s = IORef (Maybe s)
type DIM0 = Z
type DIM1 = DIM0 :. Int
type DIM2 = DIM1 :. Int
type DIM3 = DIM2 :. Int
type DIM4 = DIM3 :. Int
type DIM5 = DIM4 :. Int
type PC5 = P C (P (S D) (P (S D) (P (S D) (P (S D) X))))
type GetOut a = (DIM2 -> a) -> DIM2 -> DIM2 -> a
type Complex = (Double, Double)
type SH0 = Z
type SH1 = SH0 :. Int
type SH2 = SH1 :. Int
type SH3 = SH2 :. Int
type SH4 = SH3 :. Int
type SH5 = SH4 :. Int
type LayoutI l = (Layout l, Index l ~ Int)
type DIM1 = RW SH1
type DIM2 = RW SH2
type DIM3 = RW SH3
type DIM4 = RW SH4
type DIM5 = RW SH5
type TargetI l a = (Target l a, Index l ~ Int)
type Material l a = (Bulk l a, Windowable l a, Target l a)
type BulkI l a = (Bulk l a, Index l ~ Int)
type TargetI l a = (Target l a, Index l ~ Int)
type ConcatDict lOut lIn tIn lDst a = (BulkI lOut (Array lIn a), BulkI lIn a, TargetI lDst a, Unpack (Array lIn a) tIn)
type GroupsDict lElt lGrp tGrp lLen tLen n = (Bulk lElt n, Target lGrp n, Target lLen Int, Index lGrp ~ Index lLen, Unpack (Buffer lLen Int) tLen, Unpack (Buffer lGrp n) tGrp)
type FoldsDict lSeg lElt lGrp tGrp lRes tRes n a b = (Bulk lSeg (n, Int), Bulk lElt a, Target lGrp n, Target lRes b, Index lGrp ~ Index lRes, Unpack (Buffer lGrp n) tGrp, Unpack (Buffer lRes b) tRes)
type Array a = Array A a
type Elem a = (Bulk A a, Windowable A a)
type Build a t = (Bulk A a, Target A a, Unpack (Buffer A a) t)
type Array a = Array A a
type Elem a = (Bulk A a, Windowable A a)
type Build a t = (Bulk A a, Target A a, Unpack (Buffer A a) t)
type Source m e = Sources () m e
type Sink m e = Sinks () m e
type Sources i m l e = Sources i m (Array l e)
type Sinks i m l e = Sinks i m (Array l e)
type Flow i m l a = (Ord i, Monad m, BulkI l a, States i m)
type GroupsDict i m lVal lGrp tGrp lLen tLen a = (Flow i m lVal a, Index lVal ~ Int, TargetI lGrp a, TargetI lLen Int, Unpack (Buffer lGrp a) tGrp, Unpack (Buffer lLen Int) tLen)
type FoldsDict i m lSeg tSeg lElt tElt lGrp tGrp lRes tRes n a b = (States i m, Windowable lSeg (n, Int), Windowable lElt a, BulkI lSeg (n, Int), BulkI lElt a, BulkI lGrp n, BulkI lRes b, TargetI lElt a, TargetI lGrp n, TargetI lRes b, Unpack (Buffer lGrp n) tGrp, Unpack (Buffer lRes b) tRes)
type Sources a = Sources Int IO A a
type Sinks a = Sinks Int IO A a
type Flow a = (Flow Int IO A a, Windowable A a)
type GroupsDict a u1 u2 = GroupsDict Int IO A A u1 A u2 a
type FoldsDict n a b u1 u2 u3 u4 = FoldsDict Int IO A u1 A u2 A u3 A u4 n a b
type FoldGroupsDict n a b u1 u2 = (BulkI A n, Material A a, Material A n, Material A b, Unpack (Buffer A n) u1, Unpack (Buffer A b) u2)
type Sources a = Sources Int IO A a
type Sinks a = Sinks Int IO A a
type Flow a = (Flow Int IO A a, Windowable A a)
type GroupsDict a u1 u2 = GroupsDict Int IO A A u1 A u2 a
type FoldsDict n a b u1 u2 u3 u4 = FoldsDict Int IO A u1 A u2 A u3 A u4 n a b
type FoldGroupsDict n a b u1 u2 = (BulkI A n, Material A a, Material A n, Material A b, Unpack (Buffer A n) u1, Unpack (Buffer A b) u2)
type Image r a = Array r DIM3 a
type PromptMsg = Text
type TypeErrorMsg = Text
type PredicateErrorMsg = Text
type Predicate m a = a -> m Bool
type Parser a = Text -> Either Text a
type Traversal = forall a. Rep a => a -> a
type Query r = forall a. Rep a => a -> r
type MapM m = forall a. Rep a => a -> m a
type Traversal1 ctx = forall a. Rep a => ctx a -> a -> a
type Query1 ctx r = forall a. Rep a => ctx a -> a -> r
type MapM1 ctx m = forall a. Rep a => ctx a -> a -> m a
type GenericT = forall a. Rep a => a -> a
type GenericQ r = forall a. Rep a => a -> r
type GenericM m = forall a. Rep a => a -> m a
type GenericB = forall a. Rep a => a
type GenericR m = forall a. Rep a => m a
type Generic c = forall a. Rep a => a -> c a
type UnifyError = String
type UM n a b = ErrorT UnifyError (State (UnificationState n a)) b
type Cmd m = [String] -> m ()
type Options m = [(String, Cmd m)]
type WordCompleter m = String -> m [String]
type LineCompleter m = String -> String -> m [Completion]
type Command m = String -> m ()
type CompletionFunc (m :: * -> *) = (String, String) -> m (String, [Completion])
type Renderer = Precedence -> Fixity -> DString
type Precedence = Int
type Reader f = ReaderT f Identity
type State g = StateT g Identity
type Store g = StoreT g Identity
type (:+:) n m = Add C0 n m
type Compare m n = Compare' EQ m n
type N1 = D1 D0
type N8 = D2 (D1 (D1 D0))
type N16 = D2 (D1 (D1 (D1 D0)))
type N32 = D2 (D1 (D1 (D1 (D1 D0))))
type N64 = D2 (D1 (D1 (D1 (D1 (D1 D0)))))
type Reverse n = Reverse' D0 n
type Request r r' = RequestT r r' Identity
type RequestT r r' = FreeT (RequestF r r')
type ParamMap = HashMap CaptureVar Text
type TextAction m r = TAction m r []
type Reverse as = ReverseLoop as []
type Var a = Path (a : [])
type ResIO a = ResourceT IO a
type ResIO a = ResourceT IO a
type MonadResourceBase m = (MonadBaseControl IO m, MonadThrow m, MonadBase IO m, MonadIO m, Applicative m)
type InternalState = IORef ReleaseMap
type ExceptionT = CatchT
type Responder = Response -> IO ResponseReceived
type ResponseBody = (MediaType, ByteString)
type MediaTypeMatcher a = (MediaType, a -> ByteString)
type HList0 = HList []
type HList1 a = HList '[a]
type RespondM a = RespondT IO a
type PathExtractor0 = PathExtractor HList0
type PathExtractor1 a = PathExtractor (HList1 a)
type Api = ApiT IO
type Modifier h p i o e = Dict () () Nothing Nothing Nothing -> Dict h p i o e
type Inputs i = Dicts Input i
type Outputs o = Dicts Output o
type Errors e = Dicts Error e
type Handler m = GenHandler m Identity
type ListHandler m = GenHandler m []
type Run m n = forall a. m a -> n a
type Endpoint sid mid aid = Either aid (Cardinality (Getter sid) (Getter mid))
type Api m = [(Version, Some1 (Router m))]
type UriParts = [String]
type Name = Text
type Password = Text
type Id = Int
type Title = Text
type Title = Text
type WithPost = ReaderT Identifier BlogApi
type WithText = ReaderT Text BlogApi
type WithText = ReaderT Text BlogApi
type Accessor = (String, Maybe Ident)
type ResourceId = [String]
type Link = [LinkItem]
type Reason_ = Reason Void
type KeyValues = StringHashMap String Value
type RestartWorker m a = Worker a -> m (Worker a)
type DecodeResult a = Either String a
type Resumable scope req res = ResumableT scope req res Identity
type Array = Vector Datum
type Object = HashMap Text Datum
type Key = Text
type Backtrace = [Frame]
type OptArg = Attribute Static
type Array a = Vector a
type Object = HashMap Text Datum
type Res a = Either Error (Result a)
type Datum = Value
type Key = Text
type BaseArray = [BaseReQL]
type Backtrace = [Frame]
type State s = StateT s Identity
type ReverseGeoJsonKey = Text
type ReverseGeoParser = Object -> Parser ParsedLocationInfo
type ReverseGeoProvider = (ReverseGeoJsonKey, ReverseGeoUrl, ReverseGeoParser)
type Rule a = RuleSpec (SchemeOf a)
type SchemeOf a = Scheme (PF a)
type Metavar = Int
type CompiledBytes = ByteString
type ClientID = ByteString
type Bucket = ByteString
type Key = ByteString
type Tag = ByteString
type RW = Quorum
type R = Quorum
type W = Quorum
type DW = Quorum
type ClientID = ByteString
type ClientID = ByteString
type Message = Report
type RiffChunkSize = Word32
type RiffId = String
type RiffData = ByteString
type ParseError = (ByteOffset, String)
type G v o = [v] -> o
type Coalg c a b = (c -> b, c -> a -> c)
type Union3 a b c = Union (Union a b) c
type Union4 a b c d = Union (Union3 a b c) d
type Union5 a b c d e = Union (Union4 a b c d) e
type Union6 a b c d e f = Union (Union5 a b c d e) f
type Union7 a b c d e f g = Union (Union6 a b c d e f) g
type Union8 a b c d e f g h = Union (Union7 a b c d e f g) h
type Union9 a b c d e f g h i = Union (Union8 a b c d e f g h) i
type Union10 a b c d e f g h i j = Union (Union9 a b c d e f g h i) j
type FromRDA r = (Unlabeled' r, FromRDS (RDA (RecordValuesR r)))
type ToRDSRecord __ ___ xs = (RDSHLIST __ ___, ToRDS (LST ___), RecordValues xs, HList ___ ~ (HList (RecordValuesR xs) `HAppendR` HList '[ListStart, Tagged "names" [String]]), RecordLabelsString (LabelsOf xs), HAppend (HList (RecordValuesR xs)) (HList '[ListStart, Tagged "names" [String]]))
type RDSHLIST xs' xs = (HNat2Integral (HLength xs), HFoldr (HSeq FToRDS) Put xs Put)
type DiscountFactor = Double
type IntsBounds = [DataBounds Int]
type DoublesBounds = [DataBounds Double]
type NumChars = Int
type DataBounds a = (LowBound a, UpBound a)
type RewardBounds = DataBounds Double
type Reward = Double
type Terminal = Int
type PaLength = PrimArray Int Double
type PaDistance = PrimArray Int Double
type PaExtPair = PrimArray ExtPair Double
type Pa2ExtPairs = PrimArray (ExtPair, ExtPair) Double
type PaExtPairNN = PrimArray (ExtPair, Nuc, Nuc) Double
type ExtBT = Int -> Int -> CTisomerism -> Edge -> Edge -> Double -> BTAnswer
type NBT = Int -> Int -> Double -> BTAnswer
type BTAnswer = [([ExtPairIdx], Double)]
type Table = PrimArray PairIdx Double
type ExtTable = PrimArray ExtPairIdx Double
type BaseF a = Params -> Primary -> a
type ExtFeatures a = Int -> Int -> CTisomerism -> Edge -> Edge -> a
type Features a = Int -> Int -> a
type Tables = (EStem, NStem, NInte, NInteLoop, NBulg, NBulgLoop, NMult, NMbr, NMbr1, NMultLoop, NExtn)
type Robot = ([([UserAgent], [Directive])], [Unparsable])
type Unparsable = ByteString
type Path = ByteString
type TimeInterval = (DiffTime, DiffTime)
type CLI a = Bool -> Int -> [String] -> a
type Body = FingerTree Offset Chunk
type UBR a = (Unsafe Branded Rope) a
type Ann f s = (s Branded Rope) (f s)
type Snoc a s t = a :<> Return (Token s t)
type Cons s t a = Token s t :> a
type Tail t a = Return (Tailed t a)
type Init a t = Return (Inited a t)
type Return a = a :> Nil
type Ann f s = (s Branded Rope) (f s)
type Attribute = (Name, [Content])
type PParser s u m = ParsecT s u m
type XmlParser a = GenXmlParser [RtEventWithPos] Identity a
type EventWithPos = WithPos Event
type SourceName = String
type Line = Int
type Column = Int
type EntityRenderer = Text -> Maybe Text
type XmlParseIteratee r m a = GenXmlParser (Cursor r m RtEventWithPos) (Iteratee RtEventWithPos m) a
type PureXmlParseIteratee a = forall s. XmlParseIteratee (STRef s) (ST s) a
type Waypoints = [Waypoint]
type Column = String
type Row = Map Column String
type Table = [Row]
type Handlers m = Map ServiceID (Handle -> AIO m ())
type State m = MVar (Handlers m, Integer)
type Rpm a = RpmInfo -> a
type RpmP = Rpm Bool
type MGF = ByteString -> Int64 -> Either RSAError ByteString
type MGF = ByteString -> Int64 -> Either RSAError ByteString
type LinearAdjustment = LinearMetric -> RSdouble
type TesselatedSurface a = [TesselatedElement a]
type RGBA = Alpha RGB
type MaterialSurface a = ApplicativeWrapper Surface a
type AffineTransformation = Affine -> Affine
type Sphere = WrappedAffine UnitSphere
type Deformation = Either (SurfaceVertex3D -> Point3D) (SurfaceVertex3D -> SurfaceVertex3D)
type Model attr = [ModeledSurface attr]
type Modeling attr = ModelingM attr ()
type RGBFunction = ApplicativeWrapper ((->) SurfaceVertex3D) RGB
type RGBAFunction = ApplicativeWrapper ((->) SurfaceVertex3D) RGBA
type ColorFunction a = ApplicativeWrapper ((->) SurfaceVertex3D) a
type Pattern = SurfaceVertex3D -> RSdouble
type SceneLayer = Integer
type Atmosphere = [AtmosphereLayer]
type SkyFilter = (Vector3D -> RGB) -> Maybe (RGB -> RGB)
type AniM a = StateT (TimePlusSceneAccumulator IO) IO a
type PV = (Point3D, Rate Vector3D)
type PVA = (Point3D, Rate Vector3D, Acceleration Vector3D)
type ForceFunction = Time -> Point3D -> Rate Vector3D -> Acceleration Vector3D
type Acceleration a = Rate (Rate a)
type Frequency = Rate RSdouble
type FRP1 s i o = Switch Disabled () s Enabled i o ()
type FRPX t s i o = FRPContext t i o (FRP1 s i [(t, o)])
type FRPContext t i o m = Switch Enabled t (SubState (StateOf m)) (InputOutputOf m) i o m
type FRP1Context i o m = Switch Disabled (ThreadIDOf m) (StateOf m) (InputOutputOf m) i o m
type IODisabled i o m = Switch (ThreadingOf m) (ThreadIDOf m) (StateOf m) Disabled i o m
type SimpleSwitch k t s i o m = Switch k t s Enabled i o m
type FRPProgram s i o = FRPInit s () i o
type ThreadIdentityRule t = (t -> Bool) -> t -> Bool
type XYZ = (RSdouble, RSdouble, RSdouble)
type SamplingAlgorithm a = Curve a -> [IntervalSample a]
type Item = [ItemElem]
type Title = String
type Link = URI
type Description = String
type Width = Int
type Height = Int
type Email = String
type Domain = String
type MIME_Type = String
type InputName = String
type Hour = Int
type Minutes = Int
type CloudHost = String
type CloudPort = Int
type CloudPath = String
type CloudProcedure = String
type LIBH = Ptr ()
type ReadCallback = Ptr CUChar -> Word32 -> Ptr CInt -> IO ()
type TorrentAction = Action TorrentId
type FileAction = Action FileId
type PeerAction = Action PeerId
type TrackerAction = Action TrackerId
type StateMod = StateFile -> StateFile
type Coordinates r = (((Int, Int), (Int, Int)), [(Pair Int Int, Complex r)])
type Rational = Ratio Integer
type Angle = Rational
type BinAngle = ([Bool], [Bool])
type Memoizable a = a -> a
type Memoizer a b = (a -> b) -> a -> b
type RVar = RVarT Identity
type Channel s v = (Subscriber s v, Signal s v)
type Channel s v = (Subscriber s v, Signal s v)
type Channel s v = (Subscriber s v, Signal s v)
type Modes = Array ModeID (ModeName, Mode)
type ModeName = String
type SToken = (LexTokenID, String)
type ErrorMsg = String
type GotoTable = Array GotoIndex GotoMap
type ActionTable = Array ParserStateID TransitionList
type PToken = (ParserTokenID, String)
type Capabilities d = [Capability d]
type STNormal st s a = st (Normal s) (Normal s) a
type STFreeze st s a = forall stg. st (stg s) (Freeze s) a
type STRead st s a = forall stg. st (stg s) (stg s) a
type ST = STT Identity
type Declare = String -> Q Type -> Q [Dec]
type DeclareInit = String -> Q Type -> Q Exp -> Q [Dec]
type DeclareSem = String -> Q Exp -> Q [Dec]
type Formatter a = a -> String
type Template = RelFile
type Route = Text
type RoutePart = Text
type ForeignResource = AttributeValue
type TMap = Map ThreadId Int
type TSet = Set ThreadId
type Homo r = Rose r
type Hetero = Homo Dynamic
type Bi r = Homo (Dynamic, r)
type Shape = Homo ()
type HomoM r = Homo (Maybe r)
type BiM r = Bi (Maybe r)
type Rose = Tree
type Forest a = [Tree a]
type SendQueue = [SendAction]
type Dispatcher a m b = a -> m b -> m b -> m b
type ListDispatcher a m b = [(a, m b)] -> m b -> m b
type Dispatcher a m b = a -> m b -> m b -> m b
type ListDispatcher a m b = [(a, m b)] -> m b -> m b
type Scheme = String
type RegName = String
type Port = Int
type Query = String
type Fragment = String
type Hash = String
type UserInfo = String
type PathSegment = String
type Mime = String
type Parameters = [(String, Maybe String)]
type Scheme = String
type RegName = String
type Port = Int
type Query = String
type Fragment = String
type Hash = String
type UserInfo = String
type PathSegment = String
type Parameters = [(String, Maybe String)]
type Key = String
type Value = String
type Key = String
type Value = String
type SessionMap p = Map SessionID (TVar (Session p))
type Username = String
type Password = String
type Email = String
type Action = String
type UserSession a = Session (UserPayload a)
type Protocol = String
type WebSocketT m a = StateT ByteString m a
type Send m = m ByteString
type Receive m = ByteString -> m ()
type Variable = Int
type Weight = Int
type Booleans = [Boolean]
type Weight = Int
type NumPoly = Poly Number
type Coefficient a = a
type Exponents = [Integer]
type NumPolynomialN = PolynomialN Number
type MachineDescription = String
type Hostname = String
type Logger = Text -> IO ()
type DistributedJobLogger = FilePath -> Text -> IO ()
type MachineDescription = String
type Hostname = String
type YBServer a = StateT YBSSharedState IO a
type YBSSharedState = TVar YBServerState
type JobRequestListenerConnectionHandler a = StateT (Socket, SockAddr) (StateT YBSSharedState IO) a
type Imports = [String]
type CompilerOptions = [String]
type ProgramArguments = [String]
type MemoryOptions = [MemSize]
type ProfilingOptions = [ProfParam]
type Repetitions = Int
type ThreadNum = Int
type NormalInput = Bool
type Title = String
type CostCenter = String
type DataGen a = STerm a
type Algorithm a = STerm a
type Data a = STerm a
type Seed a = STerm a
type Test a b = Data a -> FilePath -> IO b
type SBool = SBV Bool
type SWord8 = SBV Word8
type SWord16 = SBV Word16
type SWord32 = SBV Word32
type SWord64 = SBV Word64
type SInt8 = SBV Int8
type SInt16 = SBV Int16
type SInt32 = SBV Int32
type SInt64 = SBV Int64
type SInteger = SBV Integer
type SFloat = SBV Float
type SDouble = SBV Double
type SRoundingMode = SBV RoundingMode
type SReal = SBV AlgReal
type STree i e = STreeInternal (SBV i) (SBV e)
type Predicate = Symbolic SBool
type Address = SWord32
type Value = SWord8
type Bit = SBool
type Registers = Array Register Value
type Flags = Array Flag Bit
type Memory = Model Word32 Word8
type Extract a = Mostek -> a
type Program = Mostek -> Mostek
type Instruction = Program -> Program
type InitVals = (Value, Value, Value, Bit, Bit)
type Model = SFunArray
type E = SWord8
type PowerList a = [a]
type GF28 = SWord8
type State = [SWord32]
type Key = [SWord32]
type KS = (Key, [Key], Key)
type S = STree Word8 Word8
type Key = [SWord8]
type RC4 = (S, SWord8, SWord8)
type SWord48 = (SWord32, SWord16)
type SE = SBV E
type SWord4 = SBV Word4
type GF28 = SWord8
type Coin = SWord16
type Count = SWord8
type Elem = SWord32
type Row = [Elem]
type Board = [Row]
type Solution = [SWord8]
type Row = [SWord8]
type Board = [Row]
type Puzzle = (Int, [SWord8] -> Board)
type SU2Member = SBV U2Member
type Time = Word32
type STime = SBV Time
type SLocation = SBV Location
type Move a = State Status a
type Actions = [(SBool, SU2Member, SU2Member)]
type A = SFunArray Word32 Word32
type B = SArray Word32 Word32
type SB = SBV B
type Ternary = SBool -> SBool -> SBool -> SBool
type Binary = SBool -> SBool -> SBool
type I_Meta = (Double, Double, String, Double, String)
type RequestCreator a = Parser a
type RequestProcessor a = a -> IO Builder
type URL = String
type SinkFunctor a x = Sum a (Request x x)
type SourceFunctor a x = Sum a (ReadRequest x)
type Reader x py y = x -> Reading x py y
type OpenConsumer m a d x r = (AncestorFunctor a d, Monoid x) => Source m a x -> Coroutine d m r
type OpenProducer m a d x r = (AncestorFunctor a d, Monoid x) => Sink m a x -> Coroutine d m r
type OpenTransducer m a1 a2 d x y r = (AncestorFunctor a1 d, AncestorFunctor a2 d, Monoid x, Monoid y) => Source m a1 x -> Sink m a2 y -> Coroutine d m r
type OpenSplitter m a1 a2 a3 d x r = (AncestorFunctor a1 d, AncestorFunctor a2 d, AncestorFunctor a3 d, Monoid x) => Source m a1 x -> Sink m a2 x -> Sink m a3 x -> Coroutine d m r
type Parser m x b = Transducer m x [Markup b x]
type PerformerComponent m r = Component (Performer m r)
type ConsumerComponent m x r = Component (Consumer m x r)
type ProducerComponent m x r = Component (Producer m x r)
type TransducerComponent m x y = Component (Transducer m x y)
type SplitterComponent m x = Component (Splitter m x)
type STM a = IO a
type TVar a = IORef a
type VectorD = Vector GLdouble
type MatrixD = Matrix GLdouble
type SceneGraph = Gr SceneNode ()
type OSG = OSGT Identity
type Scene = (SceneGraph, Node)
type OSGT m = StateT OSGState m
type GSRef = TVar GraphicsState
type AttributedMath = (Attr, String)
type MacroMap = (String, [Element])
type Option = (String, String)
type Delimiter = String
type NameAttrs = [(String, String)]
type Citations = [[Cite]]
type ReferenceMap = [(String, Value)]
type ArrayLine = [[Exp]]
type Property = String
type Env = [String]
type InEDelimited = Either Middle Exp
type ListAttributes = (Int, ListNumberStyle, ListNumberDelim)
type Attr = (String, [String], [(String, String)])
type TableCell = [Block]
type Target = (String, String)
type Inlines = Many Inline
type Blocks = Many Block
type SciRational = SciRatio Rational Integer
type Builder = State B
type Label m l o = (l -> m (Maybe o), l -> o -> m ())
type IOProcessor = Processor (ReaderT Config IO)
type Actor = Kleisli IO
type Source i = IOProcessor () i
type Notes = MultiSet Note
type FileComponentConfiguration = (FilePath, [String])
type SearchResults id = PosForest (SearchResult id)
type PosForest a = Set (PosTree a)
type Documented a = a Doc
type Database = Map PackageIdentifier (Documented Package)
type SQL a = SqlPersistT (LoggingT (ResourceT IO)) a
type DbPackage = DbPackageGeneric SqlBackend
type DbPackageId = KeyBackend SqlBackend DbPackage
type DbModule = DbModuleGeneric SqlBackend
type DbModuleId = KeyBackend SqlBackend DbModule
type DbDecl = DbDeclGeneric SqlBackend
type DbDeclId = KeyBackend SqlBackend DbDecl
type DbTyVar = DbTyVarGeneric SqlBackend
type DbTyVarId = KeyBackend SqlBackend DbTyVar
type DbFunDep = DbFunDepGeneric SqlBackend
type DbFunDepId = KeyBackend SqlBackend DbFunDep
type DbContext = DbContextGeneric SqlBackend
type DbContextId = KeyBackend SqlBackend DbContext
type DbConstructor = DbConstructorGeneric SqlBackend
type DbConstructorId = KeyBackend SqlBackend DbConstructor
type Results = [Result]
type RGB = (Double, Double, Double)
type DrawLayer = [DrawCmd]
type LayerMapFunc a = Double -> Double -> a -> [DrawLayer]
type LayerFoldFunc a b = Double -> Double -> b -> a -> ([DrawLayer], b)
type Middleware m = Application m -> Application m
type Application m = Request -> m Response
type ErrorHandler e m = Maybe (e -> ActionT e m ())
type Param = (Text, Text)
type File = (Text, FileInfo ByteString)
type Param = (Text, Text)
type File = (Text, FileInfo ByteString)
type Param = (Text, Text)
type ScottyM = ScottyT Text IO
type ActionM = ActionT Text IO
type File = (Text, FileInfo ByteString)
type ScottyH = ScottyT HState
type ActionH = ActionT HState
type HState = StateT (MuConfig IO, Map String (MuType IO)) IO
type AlexAccPred user = user -> AlexInput -> Int -> AlexInput -> Bool
type AlexInput = (AlexPosn, Char, String)
type AlexAction result = AlexInput -> Int -> Alex result
type ConsistentLabels k l = ConsistentLabelsT k l Identity
type Named a = (String, a)
type RoleStepOrder = [((RoleStep, Role), (RoleStep, Role))]
type TIDEq = (TID, TID)
type TIDRoleEq = (TID, Role)
type RoleEq = (Role, Role)
type AgentEqRHS = Either AgentId AVar
type AgentEq = (AgentId, AgentEqRHS)
type AVarEq = (AVar, AVar)
type MVarEq = (MVar, Message)
type MsgEq = (Message, Message)
type EventOrder = Set (Event, Event)
type Theorem = Named Proof
type Token = (SourcePos, Keyword)
type Parser s a = Parsec [Token] s a
type SdfString = ByteString
type Qstring = String
type Number = Double
type Rnumber = Double
type Dnumber = Int
type Tsvalue = String
type Identifier = String
type SdfVersion = Qstring
type DesignName = Qstring
type Date = Qstring
type Vendor = Qstring
type ProgramName = Qstring
type ProgramVersion = Qstring
type HierarchyDivider = Qstring
type Voltage = Rtriple
type Process = Qstring
type Temperature = Rtriple
type TimeScale = Qstring
type Celltype = Qstring
type CellInstance = [Identifier]
type Instance = Identifier
type CorrFactor = [Number]
type DelSpec = [Deltype]
type TcSpec = [TcDef]
type ConstraintPath = (PortInstance, PortInstance)
type EdgeIdentifier = String
type PortPath = Port
type Port = Identifier
type ScalarPort = Identifier
type BusPort = Identifier
type Value = Triple
type Triple = (Maybe Double, Maybe Double, Maybe Double)
type Rvalue = Triple
type Rtriple = Triple
type RvalueList = [Rvalue]
type ConditionalPortExpr = String
type SimpleExpression = String
type TimingCheckCondition = String
type ScalarConstant = String
type UnaryOperator = String
type InversionOperator = String
type BinaryOperator = String
type EqualityOperator = String
type Surface = ForeignPtr SurfaceStruct
type VideoInfo = ForeignPtr VideoInfoStruct
type RWops = ForeignPtr RWopsStruct
type PixelFormat = ForeignPtr PixelFormatStruct
type Joystick = ForeignPtr JoystickStruct
type GLAttr = CInt
type GLValue = CInt
type FPSManager = ForeignPtr FPSManagerStruct
type Chunk = ForeignPtr ChunkStruct
type Music = ForeignPtr MusicStruct
type Channel = Int
type Mutex = ForeignPtr MutexStruct
type MPEG = ForeignPtr MPEGStruct
type Info = ForeignPtr InfoStruct
type Filter = ForeignPtr FilterStruct
type AudioSpec = ForeignPtr AudioSpecStruct
type DisplayCallback = Ptr SurfaceStruct -> Int -> Int -> Int -> Int -> IO ()
type Font = ForeignPtr FontStruct
type AudioStatus = Word32
type BlendMode = Word32
type EventAction = Word32
type GameControllerAxis = Int32
type GameControllerButton = Int32
type GLattr = Word32
type HintPriority = Word32
type Keymod = Word32
type LogPriority = Word32
type PowerState = Word32
type RendererFlip = Word32
type Scancode = Word32
type SystemCursor = Word32
type AudioCallback = FunPtr (Ptr () -> Ptr Word8 -> CInt -> IO ())
type AudioDeviceID = Word32
type AudioFormat = Word16
type Cursor = Ptr ()
type EventFilter = FunPtr (Ptr () -> Ptr Event -> IO CInt)
type FingerID = Int64
type GameController = Ptr ()
type GestureID = Int64
type GLContext = Ptr ()
type Haptic = Ptr ()
type HintCallback = FunPtr (Ptr () -> CString -> CString -> CString -> IO ())
type Joystick = Ptr ()
type JoystickID = Int32
type Keycode = Int32
type LogOutputFunction = FunPtr (Ptr () -> CInt -> LogPriority -> CString -> IO ())
type Renderer = Ptr ()
type SysWMmsg = Ptr ()
type Texture = Ptr ()
type TimerCallback = FunPtr (Word32 -> Ptr () -> IO Word32)
type TimerID = CInt
type TouchID = Int64
type Window = Ptr ()
type TTFFont = Ptr ()
type FilterCRR = CInt -> CInt -> Ptr CFloat -> Ptr CFloat -> Ptr CFloat -> IO ()
type FilterRR = Vector Float -> Int -> Vector Float -> MVector RealWorld Float -> IO ()
type FilterRC = Vector Float -> Int -> Vector (Complex Float) -> MVector RealWorld (Complex Float) -> IO ()
type DecimateCRR = CInt -> CInt -> CInt -> Ptr CFloat -> Ptr CFloat -> Ptr CFloat -> IO ()
type DecimateRR = Int -> Vector Float -> Int -> Vector Float -> MVector RealWorld Float -> IO ()
type DecimateRC = Int -> Vector Float -> Int -> Vector (Complex Float) -> MVector RealWorld (Complex Float) -> IO ()
type ResampleR = CInt -> CInt -> CInt -> CInt -> Ptr CInt -> Ptr (Ptr CFloat) -> Ptr CFloat -> Ptr CFloat -> IO CInt
type ResampleRR = Int -> Int -> [Float] -> IO (Int -> Int -> Vector Float -> MVector RealWorld Float -> IO Int)
type ErrorCallback = (SessionComponent, SessionCoordinates, SomeException) -> IO ()
type PushAction = ByteString -> IO ()
type PullAction = IO ByteString
type Attendant = PushAction -> PullAction -> CloseAction -> IO ()
type CloseAction = IO ()
type HeaderName = ByteString
type HeaderValue = ByteString
type Header = (HeaderName, HeaderValue)
type Headers = [Header]
type FinalizationHeaders = Headers
type Request = (Headers, Maybe InputDataStream)
type Footers = FinalizationHeaders
type CoherentWorker = Request -> IO PrincipalStream
type PrincipalStream = (Headers, PushedStreams, DataAndConclusion)
type PushedStreams = [IO PushedStream]
type PushedStream = (Headers, Headers, DataAndConclusion)
type DataAndConclusion = ConduitM () ByteString IO Footers
type InputDataStream = Source IO ByteString
type Headers = [Header]
type HeaderName = ByteString
type HeaderValue = ByteString
type Header = (HeaderName, HeaderValue)
type Request = (Headers, Maybe InputDataStream)
type Footers = FinalizationHeaders
type CoherentWorker = Request -> IO PrincipalStream
type PrincipalStream = (Headers, PushedStreams, DataAndConclusion)
type PushedStreams = [IO PushedStream]
type PushedStream = (Headers, Headers, DataAndConclusion)
type DataAndConclusion = ConduitM () ByteString IO Footers
type InputDataStream = Source IO ByteString
type FinalizationHeaders = Headers
type Attendant = PushAction -> PullAction -> CloseAction -> IO ()
type Polyn = [FField]
type HostName = String
type ServiceName = String
type C'se_debug_info_type = CUInt
type C'sp_int32 = CInt
type C'debug_handler_t = FunPtr (FunPtr (C'se_debug_info_type -> CString -> IO ()))
type SednaConnection = Ptr C'SednaConnection
type Transaction a = ReaderT TransactionEnv (ErrorT ErrorMsg IO) a
type QueryResult = String
type Query = String
type Document = String
type Collection = String
type URL = String
type Password = String
type DBName = String
type UserName = String
type SecurityContext = String
type SemiIso s t a b = forall p f. (Exposed (Either String) p, Traversable f) => p a (f b) -> p s (f t)
type SemiIso' s a = SemiIso s s a a
type ASemiIso s t a b = Retail a b a (Identity b) -> Retail a b s (Identity t)
type ASemiIso' s a = ASemiIso s s a a
type ArgMin a b = Min (Arg a b)
type ArgMax a b = Max (Arg a b)
type Viterbi10Best semi = ViterbiNBest Ten semi
type Viterbi semi = ViterbiNBest One semi
type ViterbiNBestDerivation n m = ViterbiNBest n (Weighted Prob (Derivation m))
type ViterbiDerivation m = Viterbi (Weighted Prob (Derivation m))
type ByteCount = Integer
type Offset = Integer
type ByteCount = Integer
type Offset = Integer
type Senza = Markup
type SiteID = (Int, String, Int)
type SiteID = (Int, String, Int)
type SeqOffset = OnSeq Offset
type SeqPos = OnSeq Pos
type ContigSeqLoc = OnSeq ContigLoc
type SpliceSeqLoc = OnSeq SpliceLoc
type FastTCQueue = ToCatQueue FastQueue
type Program a = [Bind a]
type ContId = Id
type SeqCoreTerm = Term Var
type SeqCoreCont = Cont Var
type SeqCoreCommand = Command Var
type SeqCoreBind = Bind Var
type SeqCoreBndr = Var
type SeqCoreAlt = Alt Var
type SeqCoreExpr = Expr Var
type SeqCoreProgram = Program Var
type AlphaEnv = RnEnv2
type TvSubstEnv = TyVarEnv Type
type IdSubstEnv = IdEnv SeqCoreTerm
type SerfM = Program Serf
type BlockingSerialManager = MVar BlockingSerialCommand
type BlockingSerialCommand = (String, MVar (Maybe String))
type Errors = [TemplateError]
type TemplateError = (FilePath, String)
type Arg = String
type Path = [Segment]
type MatrixArg = QueryArg
type FunctionName = String
type Method = String
type RoutingApplication = Request -> (RouteResult Response -> IO ResponseReceived) -> IO ResponseReceived
type Server layout = ServerT layout (EitherT ServantErr IO)
type Server layout = ServerT layout (EitherT ServantErr IO)
type AuthId = ByteString
type AuthId = ByteString
type SessionIdToSession sess = HashMap (SessionId sess) (Session sess)
type AuthIdToSessionId sess = HashMap AuthId (Set (SessionId sess))
type PersistentSessionId sess = Key (PersistentSession sess)
type From = ByteString
type To = [ByteString]
type Subject = ByteString
type SESErrorCode = Int
type SESErrorMessage = ByteString
type ExtraData = [String]
type :$ a :: (* -> *) b = a b
type :. a :: (* -> *) b :: (* -> *) c = a (b c)
type RawPid = [Int]
type Size = Coords Int
type GenIO = Gen (PrimState IO)
type GenST s = Gen (PrimState (ST s))
type Matrix22' a = SquareMatrix Pair a
type Matrix33' a = SquareMatrix Triple a
type Matrix44' a = SquareMatrix Quad a
type Grad = IntMap LogSigned
type Para = Vector Double
type NodeGo = GameNode MoveGo Point RuleSetGo GameInfoGo AnnotationGo
type AnnotationGo = Map Color (Set Point)
type NodeBackgammon = GameNode () () RuleSetBackgammon GameInfoBackgammon ()
type GameInfoBackgammon = [MatchInfo]
type NodeLinesOfAction = GameNode () () Void GameInfoLinesOfAction ()
type NodeHex = GameNode () () Void GameInfoHex ()
type GameInfoHex = Bool
type NodeOcti = GameNode () () RuleSetOcti GameInfoOcti ()
type NodeOther = GameNode [Word8] [Word8] Void () ()
type Collection = [Game]
type Point = (Integer, Integer)
type Application = String
type Version = String
type AutoMarkup = Bool
type TreeGo = Tree NodeGo
type TreeBackgammon = Tree NodeBackgammon
type TreeLinesOfAction = Tree NodeLinesOfAction
type TreeHex = Tree NodeHex
type TreeOcti = Tree NodeOcti
type TreeOther = Tree NodeOther
type SHA s a = SHAT (ST s) a
type SHAT m a = ReaderT SHACtx m a
type Unop a = a -> a
type Binop a = a -> a -> a
type Sink a = a -> Action
type Action = IO ()
type R = Float
type EyePos = (R, R, R)
type ZeroT = Z
type OneT = S ZeroT
type TwoT = S OneT
type ThreeT = S TwoT
type FourT = S ThreeT
type Zero = Vec ZeroT
type One = Vec OneT
type Two = Vec TwoT
type Three = Vec ThreeT
type Four = Vec FourT
type NameM = State [String]
type TextureId = Int
type Sampler1 = Sampler OneT
type Sampler2 = Sampler TwoT
type Sampler3 = Sampler ThreeT
type R = Float
type R1 = One R
type R2 = Two R
type R3 = Three R
type R4 = Four R
type B1 = One Bool
type Pred1 a = a -> B1
type Pred2 a = a -> Pred1 a
type :# a b = (a, b)
type :--> k v = forall a. (HasType a, Show a) => k a -> v a
type Id = String
type Pat = Glom V
type :=> a b = E a -> b
type :=>* a b = a :=> E b
type SamplerE n = E (Sampler n)
type BoolE = E B1
type FloatE = E R1
type R1E = E R1
type R2E = E R2
type R3E = E R3
type R4E = E R4
type VecE n a = E (Vec n a)
type ComplexE a = Complex (E (One a))
type NodeId = Int
type Point = ComplexE R
type Id = String
type Pos = R4
type ShaderVF a = a :-> ()
type Pos = R4
type ShaderVF a' = a' :-> ()
type Light = R3E -> LightInfo
type Lighter a = View -> SurfInfo -> a
type LLighter a = LightInfo -> Lighter a
type BasicSh = (Color, Color, Color, FloatE) -> Lighter Color
type Dir3E = R3E
type Point = ComplexE R
type FilterG p a = Unop (p -> a)
type Filter a = FilterG Point a
type ImageG s a = Complex s -> a
type Image a = ImageG FloatE a
type PRegion p = p -> BoolE
type Region = Image BoolE
type HeightField s = Complex s -> s
type Surf s = Complex s -> (s, s, s)
type USurf = forall s. Floating s => Surf s
type Curve2 s = s -> Complex s
type Curve3 s = s -> (s, s, s)
type Warp1 s = s -> s
type Warp2 s = Complex s -> Complex s
type Warp3 s = (s, s, s) -> (s, s, s)
type V2 a = (a, a)
type V3 a = (a, a, a)
type ER = FloatE
type ER2 = V2 ER
type ER3 = V3 ER
type TR = ER :> ER
type T = ER2 :> ER
type SurfPt = V3 T
type SurfD = Surf T
type VN = (R3E, R3E)
type SurfVN = R2E -> VN
type EyePosE = R3E
type FullSurf = (Lighter Color, EyePosE -> View, SurfD, Image Color)
type SurfB = T -> FullSurf
type ImageB c = R1 :=> Image c
type ShakeValue a = (Show a, Typeable a, Eq a, Hashable a, Binary a, NFData a)
type FilePattern = String
type Compiler = ToolChain -> BuildFlags -> FilePath -> FilePath -> Action ()
type Archiver = ToolChain -> BuildFlags -> [FilePath] -> FilePath -> Action ()
type Linker = ToolChain -> BuildFlags -> [FilePath] -> FilePath -> Action ()
type Shaker = ReaderT ShakerInput
type ShakerR = Reader ShakerInput
type ThreadIdList = MVar [ThreadId]
type Token = MVar Int
type CurrentFiles = MVar [FileInfo]
type MvModifiedFiles = MVar [FileInfo]
type Job = MVar [FileListenInfo]
type CompileM = Reader CompileInput
type InputCommand = MVar (Maybe Command)
type MapImportToModules = Map String [String]
type PluginMap = Map ShakerAction Plugin
type CommandMap = Map String ShakerAction
type Plugin = Shaker IO ()
type Scope = [(Ident, Exp)]
type Html = Markup
type HtmlUrl url = Render url -> Html
type HtmlUrlI18n msg url = Translate msg -> Render url -> Html
type HamletMap url = [([String], HamletData url)]
type Lang = Text
type RenderUrl url = url -> QueryParameters -> Text
type Parser = Parsec String [String]
type TextUrl url = RenderUrl url -> Builder
type JavascriptUrl url = (url -> [(Text, Text)] -> Text) -> Javascript
type CssUrl url = (url -> [(Text, Text)] -> Text) -> Css
type CssUrl url = (url -> [(Text, Text)] -> Text) -> Css
type CssUrl url = (url -> [(Text, Text)] -> Text) -> Css
type CssUrl url = (url -> [(Text, Text)] -> Text) -> Css
type Lang = Text
type JavascriptUrl url = (url -> [(Text, Text)] -> Text) -> Javascript
type TextUrl url = RenderUrl url -> Builder
type CompletionFunction = (String, String, String) -> IO (Maybe (String, [String]))
type ShellContext st = (CommandResult st, OutputCommand)
type ShellCommand st = ShellDescription st -> (String, CommandParser st, Doc, Doc)
type Subshell st st' = (st -> IO st', st' -> IO st, st' -> IO (ShellDescription st'))
type OutputCommand = BackendOutput -> IO ()
type CommandResult st = (st, Maybe (ShellSpecial st))
type ShellacException = SomeException
type ShIO a = ReaderT (IORef St) IO a
type ShIO a = Sh a
type FoldCallback a = a -> Text -> a
type HandleInitializer = Handle -> IO ()
type ShIO a = Sh a
type FoldCallback a = a -> Text -> a
type FoldCallback a = a -> Text -> a
type Shortcut = Maybe Text -> Text -> Result Text
type PairsWriter a b = State [(a, b)]
type Shpider = StateT ShpiderState IO
type FPathWithAlias = (Maybe String, FPath)
type GtkFrame = Frame
type GtkLayout = Layout
type Reader a b = a -> SuccFail b
type IoletCounter e = e -> (Int, Int)
type TreeLayout e = Tree (LayoutNode e)
type EvalResult = EvalRes Value
type OStr = String
type OBool = Bool
type OChar = Char
type Precedence = Int
type FunctionDefTuple = (String, [String], [Type], Type, Expr)
type TypeVarName = String
type TypeConsName = String
type Env = [EnvFrame]
type Exporter = Functions -> FilePath -> IO ()
type ExprTree = Tree ExprNode
type WGraph = Gr WNode WEdge
type WContext = Context WNode WEdge
type WinId = String
type CanvasToolOp = VCanvas -> ToolContext -> [Modifier] -> Double -> Double -> IO VCanvas
type ToolOp = VPUI -> WinId -> ToolContext -> [Modifier] -> Double -> Double -> IO VPUI
type CBMgr = CBMgrCmd -> IO ()
type CBMgrAction = IORef VPUI -> IO ()
type MenuItemAction = VPUI -> IO VPUI
type ArgSpecAction = [ArgSpec] -> IO ()
type Subst = TypeVarName -> Type
type TypeEnv = Map TypeVarName TypeScheme
type LayoutGraph n e = Gr (LayoutNode n) e
type Indent = Int
type Exporter = Functions -> FilePath -> IO ()
type SimpleApplication m = Request -> m Response
type SimpleMiddleware m = SimpleApplication m -> SimpleApplication m
type Controller s = ControllerT s IO
type AuthRouter r a = (Request -> ByteString -> ByteString -> Controller r (Maybe Request)) -> Controller r a -> Controller r a
type FunctionMap = HashMap Identifier Function
type RESTController m r = RESTControllerM m r ()
type UnionPath = [Side]
type Conduit a m b = Source m a -> Source m b
type Sink a m r = Source m a -> m r
type Conduit a m b = Source m a -> Source m b
type Sink a m r = Source m a -> m r
type ConfLine = (String, ConfType)
type ConfTmp = (String, [ConfLine])
type CssCode = String
type Href = String
type Tag = String
type Pseudo = [(PseudoVal, [Decl])]
type Context = [Tag]
type BorderStyle = Expr
type BorderWidth = Expr
type BorderColor = Expr
type Widget a = Maybe a -> Maybe Text -> Text -> InputOptions -> Input
type GroupedCollection = [(Text, [(Text, Text)])]
type Collection = [(Text, Text)]
type Renderer = RenderOptions -> Html
type GroupedCollection' a = [(Text, [(a, (Text, Text))])]
type Collection' a = [(a, (Text, Text))]
type Widget a = Maybe a -> Maybe Text -> Text -> InputOptions -> Input
type GroupedCollection' a = [(Text, [(a, (Text, Text))])]
type Collection' a = [(a, (Text, Text))]
type SimpleForm' m a = SimpleForm a (Form Html m a)
type OptSetter a = a -> Either String a
type Rules = [Rule]
type Converter a = Message -> a
type Logger = Consumer Message
type RulesLoad = IO (IO Rules)
type Id = String
type :~ node ann = Annotate (node ann) ann
type SymbolTable = [Map Id Symbol]
type PostgreSQLConn = Pool Connection
type ConnectionHandler = Server -> ClientConn -> IO ()
type DisconnectHandler = Server -> ClientConn -> IO ()
type CmdHandler = [String] -> Server -> ClientConn -> IO ()
type Session = Map ByteString ByteString
type DArray = Array Int StackItem
type Stack = [StackItem]
type Marks = Map String Int
type VM a = StateT VMState IO a
type FunctionMap = HashMap Identifier Function
type Identifier = Text
type Key = ByteString
type IV = ByteString
type FitnessFunc a = Genome a -> [Genome a] -> Fitness
type SelectionFunction a = [(Genome a, Fitness)] -> Rand PureMT [Genome a]
type RecombinationOp a = (Genome a, Genome a) -> Rand PureMT (Genome a, Genome a)
type MutationOp a = Genome a -> Rand PureMT (Genome a)
type Fitness = Double
type Genome a = [a]
type EventHandler = Event Seconds Position -> Event Seconds (Button, KeyButtonState) -> IO (Event Seconds (IO ()))
type Position = V2 Coord
type Title = String
type Scene t = [Widget t]
type Coord = GLfloat
type (:*:) a b = (a, b)
type (:+:) a b = Either a b
type Iso s t a b = forall p f. (Functor f, Bifunctor p) => p s (f t) -> p a (f b)
type Iso' a b = Iso b b a a
type (:<->:) a b = Iso' a b
type LensLike f s t a b = (s -> f t) -> (a -> f b)
type LensLike' f a b = LensLike f b b a a
type Fold s t a b = forall f. (Semigroup (f b), Applicative f) => LensLike f s t a b
type Fold' a b = Fold b b a a
type Getter s t a b = LensLike (Const s) s t a b
type Getter' a b = Getter b b a a
type Lens s t a b = forall f. Functor f => LensLike f s t a b
type Lens' a b = Lens b b a a
type Traversal s t a b = forall f. Applicative f => LensLike f s t a b
type Traversal' a b = Traversal b b a a
type RWS r w s a = RWST r w s Id a
type IOLens a = Lens' (IO ()) (IO a)
type State s a = StateT s Id a
type Reader r a = ReaderT r Id a
type Writer w a = WriterT w Id a
type Cont r a = ContT r Id a
type Parser w c a = ParserT w c Id a
type Seconds = Double
type MIrc = MVar IrcServer
type EventFunc = MIrc -> IrcMessage -> IO ()
type Format = [FormatElem]
type SLog = SLogT IO
type Filter = Severity -> Bool
type String = [Char]
type ShowS = String -> String
type ReadS a = String -> [(a, String)]
type FilePath = String
type IOError = IOException
type SimpleSSH a = ErrorT SimpleSSHError IO a
type Objective = IneqSlack
type SpaceNeed = (DimNeed, DimNeed)
type SpaceUse = [Rectangle]
type Constraints = ((Maybe Integer, Maybe Integer), (Maybe Integer, Maybe Integer))
type Chord = (Set KeyModifier, Key)
type SourcePos = (String, Int, Int)
type Identifier = String
type ObjectNum = Int
type ObjectRef = (ObjectNum, Identifier, Maybe Identifier)
type WidgetRef = ObjectRef
type SindreOption = OptDescr (Arguments -> Arguments)
type Arguments = Map String String
type Method s im = [Value] -> ObjectM s im Value
type EventHandler m = Event -> Execution m ()
type ClassMap m = Map Identifier (Constructor m)
type ObjectMap m = Map Identifier (ObjectRef -> m (NewObject m))
type FuncMap m = Map Identifier (Compiler m ([Value] -> Sindre m Value))
type GlobMap m = Map Identifier (m Value)
type Constructor m = WidgetRef -> [(Maybe Value, ObjectRef)] -> ConstructorM m (NewWidget m)
type Compiler m a = RWS (CompilerEnv m) (Initialisation m) CompilerState a
type FormatString = [Format]
type X11Field s = FieldDesc s SindreX11M
type SNat (z_a6ID :: Nat) = Sing z_a6ID
type SSym1 (t_a6HY :: Nat) = S t_a6HY
type ZSym0 = Z
type SLit n = Sing (Lit n)
type KindOf (a :: k) = (KProxy :: KProxy k)
type Demote (a :: k) = DemoteRep (KProxy :: KProxy k)
type (@@) a b = Apply a b
type SingFunction1 f = forall t. Sing t -> Sing (f @@ t)
type SingFunction2 f = forall t. Sing t -> SingFunction1 (f @@ t)
type SingFunction3 f = forall t. Sing t -> SingFunction2 (f @@ t)
type SingFunction4 f = forall t. Sing t -> SingFunction3 (f @@ t)
type SingFunction5 f = forall t. Sing t -> SingFunction4 (f @@ t)
type SingFunction6 f = forall t. Sing t -> SingFunction5 (f @@ t)
type SingFunction7 f = forall t. Sing t -> SingFunction6 (f @@ t)
type Refuted a = a -> Void
type MaxBoundSym0 = MaxBound
type MinBoundSym0 = MinBound
type SBool (z_ato2 :: Bool) = Sing z_ato2
type Otherwise = (TrueSym0 :: Bool)
type TrueSym0 = True
type FalseSym0 = False
type NotSym1 (t_aAgk :: Bool) = Not t_aAgk
type (:&&$$$) (t_aAgz :: Bool) (t_aAgA :: Bool) = (:&&) t_aAgz t_aAgA
type (:||$$$) (t_aAgo :: Bool) (t_aAgp :: Bool) = (:||) t_aAgo t_aAgp
type Bool_Sym3 (t_aA4t :: a_aA4o) (t_aA4u :: a_aA4o) (t_aA4v :: Bool) = Bool_ t_aA4t t_aA4u t_aA4v
type OtherwiseSym0 = Otherwise
type (:==$$$) (t_aARv :: a_aAQT) (t_aARw :: a_aAQT) = (:==) t_aARv t_aARw
type (:/=$$$) (t_aARC :: a_aAQT) (t_aARD :: a_aAQT) = (:/=) t_aARC t_aARD
type (:==$$$) (t_aARv :: a_aAQT) (t_aARw :: a_aAQT) = (:==) t_aARv t_aARw
type (:/=$$$) (t_aARC :: a_aAQT) (t_aARD :: a_aAQT) = (:/=) t_aARC t_aARD
type Otherwise = (TrueSym0 :: Bool)
type TrueSym0 = True
type FalseSym0 = False
type NotSym1 (t_aAgk :: Bool) = Not t_aAgk
type (:&&$$$) (t_aAgz :: Bool) (t_aAgA :: Bool) = (:&&) t_aAgz t_aAgA
type (:||$$$) (t_aAgo :: Bool) (t_aAgp :: Bool) = (:||) t_aAgo t_aAgp
type Bool_Sym3 (t_aA4t :: a_aA4o) (t_aA4u :: a_aA4o) (t_aA4v :: Bool) = Bool_ t_aA4t t_aA4u t_aA4v
type OtherwiseSym0 = Otherwise
type ThenCmpSym2 (t_aFk4 :: Ordering) (t_aFk5 :: Ordering) = ThenCmp t_aFk4 t_aFk5
type LTSym0 = LT
type EQSym0 = EQ
type GTSym0 = GT
type CompareSym2 (t_aE83 :: a_aE7v) (t_aE84 :: a_aE7v) = Compare t_aE83 t_aE84
type (:<$$$) (t_aE8c :: a_aE7v) (t_aE8d :: a_aE7v) = (:<) t_aE8c t_aE8d
type (:<=$$$) (t_aE8D :: a_aE7v) (t_aE8E :: a_aE7v) = (:<=) t_aE8D t_aE8E
type (:>$$$) (t_aE8u :: a_aE7v) (t_aE8v :: a_aE7v) = (:>) t_aE8u t_aE8v
type (:>=$$$) (t_aE8l :: a_aE7v) (t_aE8m :: a_aE7v) = (:>=) t_aE8l t_aE8m
type MaxSym2 (t_aE8M :: a_aE7v) (t_aE8N :: a_aE7v) = Max t_aE8M t_aE8N
type MinSym2 (t_aE8V :: a_aE7v) (t_aE8W :: a_aE7v) = Min t_aE8V t_aE8W
type LTSym0 = LT
type EQSym0 = EQ
type GTSym0 = GT
type CompareSym2 (t_aE83 :: a_aE7v) (t_aE84 :: a_aE7v) = Compare t_aE83 t_aE84
type (:<$$$) (t_aE8c :: a_aE7v) (t_aE8d :: a_aE7v) = (:<) t_aE8c t_aE8d
type (:<=$$$) (t_aE8D :: a_aE7v) (t_aE8E :: a_aE7v) = (:<=) t_aE8D t_aE8E
type (:>$$$) (t_aE8u :: a_aE7v) (t_aE8v :: a_aE7v) = (:>) t_aE8u t_aE8v
type (:>=$$$) (t_aE8l :: a_aE7v) (t_aE8m :: a_aE7v) = (:>=) t_aE8l t_aE8m
type MaxSym2 (t_aE8M :: a_aE7v) (t_aE8N :: a_aE7v) = Max t_aE8M t_aE8N
type MinSym2 (t_aE8V :: a_aE7v) (t_aE8W :: a_aE7v) = Min t_aE8V t_aE8W
type SNat (x :: Nat) = Sing x
type SSymbol (x :: Symbol) = Sing x
type (:+) x y = x + y
type (:-) x y = x - y
type (:*) x y = x * y
type (:^) x y = x ^ y
type Refuted a = a -> Void
type TrueSym0 = True
type FalseSym0 = False
type LTSym0 = LT
type EQSym0 = EQ
type GTSym0 = GT
type Tuple0Sym0 = '()
type Tuple2Sym2 (t_ato7 :: a_12) (t_ato8 :: b_13) = '(t_ato7, t_ato8)
type Tuple3Sym3 (t_atoq :: a_12) (t_ator :: b_13) (t_atos :: c_14) = '(t_atoq, t_ator, t_atos)
type Tuple4Sym4 (t_atoT :: a_12) (t_atoU :: b_13) (t_atoV :: c_14) (t_atoW :: d_15) = '(t_atoT, t_atoU, t_atoV, t_atoW)
type Tuple5Sym5 (t_atpx :: a_12) (t_atpy :: b_13) (t_atpz :: c_14) (t_atpA :: d_15) (t_atpB :: e_16) = '(t_atpx, t_atpy, t_atpz, t_atpA, t_atpB)
type Tuple6Sym6 (t_atqn :: a_12) (t_atqo :: b_13) (t_atqp :: c_14) (t_atqq :: d_15) (t_atqr :: e_16) (t_atqs :: f_17) = '(t_atqn, t_atqo, t_atqp, t_atqq, t_atqr, t_atqs)
type Tuple7Sym7 (t_atrq :: a_12) (t_atrr :: b_13) (t_atrs :: c_14) (t_atrt :: d_15) (t_atru :: e_16) (t_atrv :: f_17) (t_atrw :: g_18) = '(t_atrq, t_atrr, t_atrs, t_atrt, t_atru, t_atrv, t_atrw)
type Otherwise = (TrueSym0 :: Bool)
type FoldrSym3 (t_aIpL :: TyFun a_aIn4 (TyFun b_aIn5 b_aIn5 -> *) -> *) (t_aIpM :: b_aIn5) (t_aIpN :: [a_aIn4]) = Foldr t_aIpL t_aIpM t_aIpN
type MapSym2 (t_aIpy :: TyFun a_aInb b_aInc -> *) (t_aIpz :: [a_aInb]) = Map t_aIpy t_aIpz
type OtherwiseSym0 = Otherwise
type IdSym1 (t_aIpg :: a_aInl) = Id t_aIpg
type ConstSym2 (t_aIoQ :: a_aInn) (t_aIoR :: b_aIno) = Const t_aIoQ t_aIoR
type ($$$$) a b = ($) a b
type ($!$$$) a b = ($!) a b
type AsTypeOfSym2 (t_aIp5 :: a_aInC) (t_aIp6 :: a_aInC) = AsTypeOf t_aIp5 t_aIp6
type SeqSym2 (t_aInG :: a_aInD) (t_aInH :: b_aInE) = Seq t_aInG t_aInH
type SEither (z_atnT :: Either a_a8CR b_a8CS) = Sing z_atnT
type LeftSym1 (t_atnN :: a_a8CR) = Left t_atnN
type RightSym1 (t_atnQ :: b_a8CS) = Right t_atnQ
type Either_Sym3 (t_aLeZ :: TyFun a_aLeS c_aLeT -> *) (t_aLf0 :: TyFun b_aLeU c_aLeT -> *) (t_aLf1 :: Either a_aLeS b_aLeU) = Either_ t_aLeZ t_aLf0 t_aLf1
type LeftsSym1 (t_aLCt :: [Either a_aLB5 b_aLB6]) = Lefts t_aLCt
type RightsSym1 (t_aLCl :: [Either a_aLBa b_aLBb]) = Rights t_aLCl
type IsLeftSym1 (t_aLBz :: Either a_aLBp b_aLBq) = IsLeft t_aLBz
type IsRightSym1 (t_aLBt :: Either a_aLBr b_aLBs) = IsRight t_aLBt
type LeftSym1 (t_atnN :: a_a8CR) = Left t_atnN
type RightSym1 (t_atnQ :: b_a8CS) = Right t_atnQ
type Either_Sym3 (t_aLeZ :: TyFun a_aLeS c_aLeT -> *) (t_aLf0 :: TyFun b_aLeU c_aLeT -> *) (t_aLf1 :: Either a_aLeS b_aLeU) = Either_ t_aLeZ t_aLf0 t_aLf1
type LeftsSym1 (t_aLCt :: [Either a_aLB5 b_aLB6]) = Lefts t_aLCt
type RightsSym1 (t_aLCl :: [Either a_aLBa b_aLBb]) = Rights t_aLCl
type IsLeftSym1 (t_aLBz :: Either a_aLBp b_aLBq) = IsLeft t_aLBz
type IsRightSym1 (t_aLBt :: Either a_aLBr b_aLBs) = IsRight t_aLBt
type STuple0 (z_ato4 :: ()) = Sing z_ato4
type STuple2 (z_atoe :: (a_12, b_13)) = Sing z_atoe
type STuple3 (z_atoC :: (a_12, b_13, c_14)) = Sing z_atoC
type STuple4 (z_atpb :: (a_12, b_13, c_14, d_15)) = Sing z_atpb
type STuple5 (z_atpW :: (a_12, b_13, c_14, d_15, e_16)) = Sing z_atpW
type STuple6 (z_atqU :: (a_12, b_13, c_14, d_15, e_16, f_17)) = Sing z_atqU
type STuple7 (z_ats6 :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18)) = Sing z_ats6
type Tuple0Sym0 = '()
type Tuple2Sym2 (t_ato7 :: a_12) (t_ato8 :: b_13) = '(t_ato7, t_ato8)
type Tuple3Sym3 (t_atoq :: a_12) (t_ator :: b_13) (t_atos :: c_14) = '(t_atoq, t_ator, t_atos)
type Tuple4Sym4 (t_atoT :: a_12) (t_atoU :: b_13) (t_atoV :: c_14) (t_atoW :: d_15) = '(t_atoT, t_atoU, t_atoV, t_atoW)
type Tuple5Sym5 (t_atpx :: a_12) (t_atpy :: b_13) (t_atpz :: c_14) (t_atpA :: d_15) (t_atpB :: e_16) = '(t_atpx, t_atpy, t_atpz, t_atpA, t_atpB)
type Tuple6Sym6 (t_atqn :: a_12) (t_atqo :: b_13) (t_atqp :: c_14) (t_atqq :: d_15) (t_atqr :: e_16) (t_atqs :: f_17) = '(t_atqn, t_atqo, t_atqp, t_atqq, t_atqr, t_atqs)
type Tuple7Sym7 (t_atrq :: a_12) (t_atrr :: b_13) (t_atrs :: c_14) (t_atrt :: d_15) (t_atru :: e_16) (t_atrv :: f_17) (t_atrw :: g_18) = '(t_atrq, t_atrr, t_atrs, t_atrt, t_atru, t_atrv, t_atrw)
type FstSym1 (t_aNYm :: (a_aNXx, b_aNXy)) = Fst t_aNYm
type SndSym1 (t_aNYg :: (a_aNXA, b_aNXB)) = Snd t_aNYg
type CurrySym3 (t_aNXY :: TyFun (a_aNXD, b_aNXE) c_aNXF -> *) (t_aNXZ :: a_aNXD) (t_aNY0 :: b_aNXE) = Curry t_aNXY t_aNXZ t_aNY0
type UncurrySym2 (t_aNYs :: TyFun a_aNXJ (TyFun b_aNXK c_aNXL -> *) -> *) (t_aNYt :: (a_aNXJ, b_aNXK)) = Uncurry t_aNYs t_aNYt
type SwapSym1 (t_aNXS :: (a_aNXO, b_aNXP)) = Swap t_aNXS
type Tuple0Sym0 = '()
type Tuple2Sym2 (t_ato7 :: a_12) (t_ato8 :: b_13) = '(t_ato7, t_ato8)
type Tuple3Sym3 (t_atoq :: a_12) (t_ator :: b_13) (t_atos :: c_14) = '(t_atoq, t_ator, t_atos)
type Tuple4Sym4 (t_atoT :: a_12) (t_atoU :: b_13) (t_atoV :: c_14) (t_atoW :: d_15) = '(t_atoT, t_atoU, t_atoV, t_atoW)
type Tuple5Sym5 (t_atpx :: a_12) (t_atpy :: b_13) (t_atpz :: c_14) (t_atpA :: d_15) (t_atpB :: e_16) = '(t_atpx, t_atpy, t_atpz, t_atpA, t_atpB)
type Tuple6Sym6 (t_atqn :: a_12) (t_atqo :: b_13) (t_atqp :: c_14) (t_atqq :: d_15) (t_atqr :: e_16) (t_atqs :: f_17) = '(t_atqn, t_atqo, t_atqp, t_atqq, t_atqr, t_atqs)
type Tuple7Sym7 (t_atrq :: a_12) (t_atrr :: b_13) (t_atrs :: c_14) (t_atrt :: d_15) (t_atru :: e_16) (t_atrv :: f_17) (t_atrw :: g_18) = '(t_atrq, t_atrr, t_atrs, t_atrt, t_atru, t_atrv, t_atrw)
type FstSym1 (t_aNYm :: (a_aNXx, b_aNXy)) = Fst t_aNYm
type SndSym1 (t_aNYg :: (a_aNXA, b_aNXB)) = Snd t_aNYg
type CurrySym3 (t_aNXY :: TyFun (a_aNXD, b_aNXE) c_aNXF -> *) (t_aNXZ :: a_aNXD) (t_aNY0 :: b_aNXE) = Curry t_aNXY t_aNXZ t_aNY0
type UncurrySym2 (t_aNYs :: TyFun a_aNXJ (TyFun b_aNXK c_aNXL -> *) -> *) (t_aNYt :: (a_aNXJ, b_aNXK)) = Uncurry t_aNYs t_aNYt
type SwapSym1 (t_aNXS :: (a_aNXO, b_aNXP)) = Swap t_aNXS
type Otherwise = (TrueSym0 :: Bool)
type FoldrSym3 (t_aIpL :: TyFun a_aIn4 (TyFun b_aIn5 b_aIn5 -> *) -> *) (t_aIpM :: b_aIn5) (t_aIpN :: [a_aIn4]) = Foldr t_aIpL t_aIpM t_aIpN
type MapSym2 (t_aIpy :: TyFun a_aInb b_aInc -> *) (t_aIpz :: [a_aInb]) = Map t_aIpy t_aIpz
type OtherwiseSym0 = Otherwise
type IdSym1 (t_aIpg :: a_aInl) = Id t_aIpg
type ConstSym2 (t_aIoQ :: a_aInn) (t_aIoR :: b_aIno) = Const t_aIoQ t_aIoR
type ($$$$) a b = ($) a b
type ($!$$$) a b = ($!) a b
type UntilSym3 (t_aOZc :: TyFun a_aOZ5 Bool -> *) (t_aOZd :: TyFun a_aOZ5 a_aOZ5 -> *) (t_aOZe :: a_aOZ5) = Until t_aOZc t_aOZd t_aOZe
type AsTypeOfSym2 (t_aIp5 :: a_aInC) (t_aIp6 :: a_aInC) = AsTypeOf t_aIp5 t_aIp6
type SeqSym2 (t_aInG :: a_aInD) (t_aInH :: b_aInE) = Seq t_aInG t_aInH
type SList (z_atnC :: [a_12]) = Sing z_atnC
type NilSym0 = '[]
type (:$$$) (t_atnv :: a_12) (t_atnw :: [a_12]) = (:) t_atnv t_atnw
type HeadSym1 (t_aS4x :: [a_aRqm]) = Head t_aS4x
type LastSym1 (t_aS42 :: [a_aRqo]) = Last t_aS42
type TailSym1 (t_aS3W :: [a_aRqw]) = Tail t_aS3W
type InitSym1 (t_aS3r :: [a_aRqy]) = Init t_aS3r
type NullSym1 (t_aS3l :: [a_aRqG]) = Null t_aS3l
type MapSym2 (t_aIpy :: TyFun a_aInb b_aInc -> *) (t_aIpz :: [a_aInb]) = Map t_aIpy t_aIpz
type ReverseSym1 (t_aS2M :: [a_aRqH]) = Reverse t_aS2M
type IntersperseSym2 (t_aS2o :: a_aRqP) (t_aS2p :: [a_aRqP]) = Intersperse t_aS2o t_aS2p
type IntercalateSym2 (t_aS2B :: [a_aRqT]) (t_aS2C :: [[a_aRqT]]) = Intercalate t_aS2B t_aS2C
type SubsequencesSym1 (t_aS2j :: [a_aRqW]) = Subsequences t_aS2j
type PermutationsSym1 (t_aRVK :: [a_aRr8]) = Permutations t_aRVK
type FoldlSym3 (t_aRRm :: TyFun b_aRrq (TyFun a_aRrr b_aRrq -> *) -> *) (t_aRRn :: b_aRrq) (t_aRRo :: [a_aRrr]) = Foldl t_aRRm t_aRRn t_aRRo
type Foldl'Sym3 (t_aRPN :: TyFun b_aRpt (TyFun a_aRps b_aRpt -> *) -> *) (t_aRPO :: b_aRpt) (t_aRPP :: [a_aRps]) = Foldl' t_aRPN t_aRPO t_aRPP
type Foldl1Sym2 (t_aRSa :: TyFun a_aRrL (TyFun a_aRrL a_aRrL -> *) -> *) (t_aRSb :: [a_aRrL]) = Foldl1 t_aRSa t_aRSb
type Foldl1'Sym2 (t_aRR9 :: TyFun a_aRrP (TyFun a_aRrP a_aRrP -> *) -> *) (t_aRRa :: [a_aRrP]) = Foldl1' t_aRR9 t_aRRa
type FoldrSym3 (t_aIpL :: TyFun a_aIn4 (TyFun b_aIn5 b_aIn5 -> *) -> *) (t_aIpM :: b_aIn5) (t_aIpN :: [a_aIn4]) = Foldr t_aIpL t_aIpM t_aIpN
type Foldr1Sym2 (t_aRPe :: TyFun a_aRrT (TyFun a_aRrT a_aRrT -> *) -> *) (t_aRPf :: [a_aRrT]) = Foldr1 t_aRPe t_aRPf
type ConcatSym1 (t_aRP9 :: [[a_aRrY]]) = Concat t_aRP9
type ConcatMapSym2 (t_aROU :: TyFun a_aRrZ [b_aRs0] -> *) (t_aROV :: [a_aRrZ]) = ConcatMap t_aROU t_aROV
type AndSym1 (t_aROO :: [Bool]) = And t_aROO
type OrSym1 (t_aROI :: [Bool]) = Or t_aROI
type Any_Sym2 (t_aPpH :: TyFun a_aPpD Bool -> *) (t_aPpI :: [a_aPpD]) = Any_ t_aPpH t_aPpI
type AllSym2 (t_aROv :: TyFun a_aRs6 Bool -> *) (t_aROw :: [a_aRs6]) = All t_aROv t_aROw
type ScanlSym3 (t_aRNH :: TyFun b_aRsa (TyFun a_aRsb b_aRsa -> *) -> *) (t_aRNI :: b_aRsa) (t_aRNJ :: [a_aRsb]) = Scanl t_aRNH t_aRNI t_aRNJ
type Scanl1Sym2 (t_aROi :: TyFun a_aRsh (TyFun a_aRsh a_aRsh -> *) -> *) (t_aROj :: [a_aRsh]) = Scanl1 t_aROi t_aROj
type ScanrSym3 (t_aRMX :: TyFun a_aRsl (TyFun b_aRsm b_aRsm -> *) -> *) (t_aRMY :: b_aRsm) (t_aRMZ :: [a_aRsl]) = Scanr t_aRMX t_aRMY t_aRMZ
type Scanr1Sym2 (t_aRLZ :: TyFun a_aRsu (TyFun a_aRsu a_aRsu -> *) -> *) (t_aRM0 :: [a_aRsu]) = Scanr1 t_aRLZ t_aRM0
type MapAccumLSym3 (t_aRJj :: TyFun acc_aRsB (TyFun x_aRsC (acc_aRsB, y_aRsD) -> *) -> *) (t_aRJk :: acc_aRsB) (t_aRJl :: [x_aRsC]) = MapAccumL t_aRJj t_aRJk t_aRJl
type MapAccumRSym3 (t_aRGD :: TyFun acc_aRsN (TyFun x_aRsO (acc_aRsN, y_aRsP) -> *) -> *) (t_aRGE :: acc_aRsN) (t_aRGF :: [x_aRsO]) = MapAccumR t_aRGD t_aRGE t_aRGF
type UnfoldrSym2 (t_aRGe :: TyFun b_aRsZ (Maybe (a_aRt0, b_aRsZ)) -> *) (t_aRGf :: b_aRsZ) = Unfoldr t_aRGe t_aRGf
type InitsSym1 (t_aRFZ :: [a_aRt5]) = Inits t_aRFZ
type TailsSym1 (t_aRFz :: [a_aRt9]) = Tails t_aRFz
type IsPrefixOfSym2 (t_aRFi :: [a_aRtc]) (t_aRFj :: [a_aRtc]) = IsPrefixOf t_aRFi t_aRFj
type IsSuffixOfSym2 (t_aS3a :: [a_aRth]) (t_aS3b :: [a_aRth]) = IsSuffixOf t_aS3a t_aS3b
type IsInfixOfSym2 (t_aRFO :: [a_aRtk]) (t_aRFP :: [a_aRtk]) = IsInfixOf t_aRFO t_aRFP
type ElemSym2 (t_aRF5 :: a_aRtn) (t_aRF6 :: [a_aRtn]) = Elem t_aRF5 t_aRF6
type NotElemSym2 (t_aRES :: a_aRtr) (t_aRET :: [a_aRtr]) = NotElem t_aRES t_aRET
type ZipSym2 (t_aREB :: [a_aRtv]) (t_aREC :: [b_aRtw]) = Zip t_aREB t_aREC
type Zip3Sym3 (t_aRDY :: [a_aRtB]) (t_aRDZ :: [b_aRtC]) (t_aRE0 :: [c_aRtD]) = Zip3 t_aRDY t_aRDZ t_aRE0
type ZipWithSym3 (t_aRDx :: TyFun a_aRtK (TyFun b_aRtL c_aRtM -> *) -> *) (t_aRDy :: [a_aRtK]) (t_aRDz :: [b_aRtL]) = ZipWith t_aRDx t_aRDy t_aRDz
type UnzipSym1 (t_aRC9 :: [(a_aRu3, b_aRu4)]) = Unzip t_aRC9
type Unzip3Sym1 (t_aRBB :: [(a_aRua, b_aRub, c_aRuc)]) = Unzip3 t_aRBB
type Unzip4Sym1 (t_aRB1 :: [(a_aRuk, b_aRul, c_aRum, d_aRun)]) = Unzip4 t_aRB1
type Unzip5Sym1 (t_aRAp :: [(a_aRux, b_aRuy, c_aRuz, d_aRuA, e_aRuB)]) = Unzip5 t_aRAp
type Unzip6Sym1 (t_aRzL :: [(a_aRuN, b_aRuO, c_aRuP, d_aRuQ, e_aRuR, f_aRuS)]) = Unzip6 t_aRzL
type Unzip7Sym1 (t_aRz5 :: [(a_aRv6, b_aRv7, c_aRv8, d_aRv9, e_aRva, f_aRvb, g_aRvc)]) = Unzip7 t_aRz5
type DeleteSym2 (t_aRyU :: a_aRvs) (t_aRyV :: [a_aRvs]) = Delete t_aRyU t_aRyV
type (:\\$$$) (t_aRVd :: [a_aRvt]) (t_aRVe :: [a_aRvt]) = (:\\) t_aRVd t_aRVe
type DeleteBySym3 (t_aRy8 :: TyFun a_aRvu (TyFun a_aRvu Bool -> *) -> *) (t_aRy9 :: a_aRvu) (t_aRya :: [a_aRvu]) = DeleteBy t_aRy8 t_aRy9 t_aRya
type DeleteFirstsBySym3 (t_aRVo :: TyFun a_aRvz (TyFun a_aRvz Bool -> *) -> *) (t_aRVp :: [a_aRvz]) (t_aRVq :: [a_aRvz]) = DeleteFirstsBy t_aRVo t_aRVp t_aRVq
type SortBySym2 (t_aRxV :: TyFun a_aRvB (TyFun a_aRvB Ordering -> *) -> *) (t_aRxW :: [a_aRvB]) = SortBy t_aRxV t_aRxW
type InsertBySym3 (t_aRwU :: TyFun a_aRvD (TyFun a_aRvD Ordering -> *) -> *) (t_aRwV :: a_aRvD) (t_aRwW :: [a_aRvD]) = InsertBy t_aRwU t_aRwV t_aRwW
type MaximumBySym2 (t_aRSn :: TyFun a_aRvK (TyFun a_aRvK Ordering -> *) -> *) (t_aRSo :: [a_aRvK]) = MaximumBy t_aRSn t_aRSo
type MinimumBySym2 (t_aRTL :: TyFun a_aRvQ (TyFun a_aRvQ Ordering -> *) -> *) (t_aRTM :: [a_aRvQ]) = MinimumBy t_aRTL t_aRTM
type SMaybe (z_atnp :: Maybe a_a57N) = Sing z_atnp
type NothingSym0 = Nothing
type JustSym1 (t_atnm :: a_a57N) = Just t_atnm
type Maybe_Sym3 (t_a1wL8 :: b_a1wL3) (t_a1wL9 :: TyFun a_a1wL4 b_a1wL3 -> *) (t_a1wLa :: Maybe a_a1wL4) = Maybe_ t_a1wL8 t_a1wL9 t_a1wLa
type IsJustSym1 (t_a1x8E :: Maybe a_a1x6F) = IsJust t_a1x8E
type IsNothingSym1 (t_a1x8z :: Maybe a_a1x6G) = IsNothing t_a1x8z
type FromJustSym1 (t_a1x8u :: Maybe a_a1x6H) = FromJust t_a1x8u
type FromMaybeSym2 (t_a1x86 :: a_a1x6J) (t_a1x87 :: Maybe a_a1x6J) = FromMaybe t_a1x86 t_a1x87
type ListToMaybeSym1 (t_a1x7V :: [a_a1x6P]) = ListToMaybe t_a1x7V
type MaybeToListSym1 (t_a1x81 :: Maybe a_a1x6N) = MaybeToList t_a1x81
type CatMaybesSym1 (t_a1x7O :: [Maybe a_a1x6R]) = CatMaybes t_a1x7O
type MapMaybeSym2 (t_a1x76 :: TyFun a_a1x6V (Maybe b_a1x6W) -> *) (t_a1x77 :: [a_a1x6V]) = MapMaybe t_a1x76 t_a1x77
type SBool (z_ato2 :: Bool) = Sing z_ato2
type SList (z_atnC :: [a_12]) = Sing z_atnC
type SMaybe (z_atnp :: Maybe a_a57N) = Sing z_atnp
type SEither (z_atnT :: Either a_a8CR b_a8CS) = Sing z_atnT
type SOrdering (z_ato3 :: Ordering) = Sing z_ato3
type STuple0 (z_ato4 :: ()) = Sing z_ato4
type STuple2 (z_atoe :: (a_12, b_13)) = Sing z_atoe
type STuple3 (z_atoC :: (a_12, b_13, c_14)) = Sing z_atoC
type STuple4 (z_atpb :: (a_12, b_13, c_14, d_15)) = Sing z_atpb
type STuple5 (z_atpW :: (a_12, b_13, c_14, d_15, e_16)) = Sing z_atpW
type STuple6 (z_atqU :: (a_12, b_13, c_14, d_15, e_16, f_17)) = Sing z_atqU
type STuple7 (z_ats6 :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18)) = Sing z_ats6
type Otherwise = (TrueSym0 :: Bool)
type FalseSym0 = False
type TrueSym0 = True
type NotSym1 (t_aAgk :: Bool) = Not t_aAgk
type (:&&$$$) (t_aAgz :: Bool) (t_aAgA :: Bool) = (:&&) t_aAgz t_aAgA
type (:||$$$) (t_aAgo :: Bool) (t_aAgp :: Bool) = (:||) t_aAgo t_aAgp
type OtherwiseSym0 = Otherwise
type NothingSym0 = Nothing
type JustSym1 (t_atnm :: a_a57N) = Just t_atnm
type Maybe_Sym3 (t_a1wL8 :: b_a1wL3) (t_a1wL9 :: TyFun a_a1wL4 b_a1wL3 -> *) (t_a1wLa :: Maybe a_a1wL4) = Maybe_ t_a1wL8 t_a1wL9 t_a1wLa
type LeftSym1 (t_atnN :: a_a8CR) = Left t_atnN
type RightSym1 (t_atnQ :: b_a8CS) = Right t_atnQ
type Either_Sym3 (t_aLeZ :: TyFun a_aLeS c_aLeT -> *) (t_aLf0 :: TyFun b_aLeU c_aLeT -> *) (t_aLf1 :: Either a_aLeS b_aLeU) = Either_ t_aLeZ t_aLf0 t_aLf1
type Tuple0Sym0 = '()
type Tuple2Sym2 (t_ato7 :: a_12) (t_ato8 :: b_13) = '(t_ato7, t_ato8)
type Tuple3Sym3 (t_atoq :: a_12) (t_ator :: b_13) (t_atos :: c_14) = '(t_atoq, t_ator, t_atos)
type Tuple4Sym4 (t_atoT :: a_12) (t_atoU :: b_13) (t_atoV :: c_14) (t_atoW :: d_15) = '(t_atoT, t_atoU, t_atoV, t_atoW)
type Tuple5Sym5 (t_atpx :: a_12) (t_atpy :: b_13) (t_atpz :: c_14) (t_atpA :: d_15) (t_atpB :: e_16) = '(t_atpx, t_atpy, t_atpz, t_atpA, t_atpB)
type Tuple6Sym6 (t_atqn :: a_12) (t_atqo :: b_13) (t_atqp :: c_14) (t_atqq :: d_15) (t_atqr :: e_16) (t_atqs :: f_17) = '(t_atqn, t_atqo, t_atqp, t_atqq, t_atqr, t_atqs)
type Tuple7Sym7 (t_atrq :: a_12) (t_atrr :: b_13) (t_atrs :: c_14) (t_atrt :: d_15) (t_atru :: e_16) (t_atrv :: f_17) (t_atrw :: g_18) = '(t_atrq, t_atrr, t_atrs, t_atrt, t_atru, t_atrv, t_atrw)
type FstSym1 (t_aNYm :: (a_aNXx, b_aNXy)) = Fst t_aNYm
type SndSym1 (t_aNYg :: (a_aNXA, b_aNXB)) = Snd t_aNYg
type CurrySym3 (t_aNXY :: TyFun (a_aNXD, b_aNXE) c_aNXF -> *) (t_aNXZ :: a_aNXD) (t_aNY0 :: b_aNXE) = Curry t_aNXY t_aNXZ t_aNY0
type UncurrySym2 (t_aNYs :: TyFun a_aNXJ (TyFun b_aNXK c_aNXL -> *) -> *) (t_aNYt :: (a_aNXJ, b_aNXK)) = Uncurry t_aNYs t_aNYt
type IdSym1 (t_aIpg :: a_aInl) = Id t_aIpg
type ConstSym2 (t_aIoQ :: a_aInn) (t_aIoR :: b_aIno) = Const t_aIoQ t_aIoR
type ($$$$) a b = ($) a b
type ($!$$$) a b = ($!) a b
type AsTypeOfSym2 (t_aIp5 :: a_aInC) (t_aIp6 :: a_aInC) = AsTypeOf t_aIp5 t_aIp6
type SeqSym2 (t_aInG :: a_aInD) (t_aInH :: b_aInE) = Seq t_aInG t_aInH
type (:$$$) (t_atnv :: a_12) (t_atnw :: [a_12]) = (:) t_atnv t_atnw
type NilSym0 = '[]
type MapSym2 (t_aIpy :: TyFun a_aInb b_aInc -> *) (t_aIpz :: [a_aInb]) = Map t_aIpy t_aIpz
type ReverseSym1 (t_aS2M :: [a_aRqH]) = Reverse t_aS2M
type HeadSym1 (t_aS4x :: [a_aRqm]) = Head t_aS4x
type LastSym1 (t_aS42 :: [a_aRqo]) = Last t_aS42
type TailSym1 (t_aS3W :: [a_aRqw]) = Tail t_aS3W
type InitSym1 (t_aS3r :: [a_aRqy]) = Init t_aS3r
type NullSym1 (t_aS3l :: [a_aRqG]) = Null t_aS3l
type FoldlSym3 (t_aRRm :: TyFun b_aRrq (TyFun a_aRrr b_aRrq -> *) -> *) (t_aRRn :: b_aRrq) (t_aRRo :: [a_aRrr]) = Foldl t_aRRm t_aRRn t_aRRo
type Foldl1Sym2 (t_aRSa :: TyFun a_aRrL (TyFun a_aRrL a_aRrL -> *) -> *) (t_aRSb :: [a_aRrL]) = Foldl1 t_aRSa t_aRSb
type FoldrSym3 (t_aIpL :: TyFun a_aIn4 (TyFun b_aIn5 b_aIn5 -> *) -> *) (t_aIpM :: b_aIn5) (t_aIpN :: [a_aIn4]) = Foldr t_aIpL t_aIpM t_aIpN
type Foldr1Sym2 (t_aRPe :: TyFun a_aRrT (TyFun a_aRrT a_aRrT -> *) -> *) (t_aRPf :: [a_aRrT]) = Foldr1 t_aRPe t_aRPf
type ConcatSym1 (t_aRP9 :: [[a_aRrY]]) = Concat t_aRP9
type ConcatMapSym2 (t_aROU :: TyFun a_aRrZ [b_aRs0] -> *) (t_aROV :: [a_aRrZ]) = ConcatMap t_aROU t_aROV
type AndSym1 (t_aROO :: [Bool]) = And t_aROO
type OrSym1 (t_aROI :: [Bool]) = Or t_aROI
type Any_Sym2 (t_aPpH :: TyFun a_aPpD Bool -> *) (t_aPpI :: [a_aPpD]) = Any_ t_aPpH t_aPpI
type AllSym2 (t_aROv :: TyFun a_aRs6 Bool -> *) (t_aROw :: [a_aRs6]) = All t_aROv t_aROw
type ScanlSym3 (t_aRNH :: TyFun b_aRsa (TyFun a_aRsb b_aRsa -> *) -> *) (t_aRNI :: b_aRsa) (t_aRNJ :: [a_aRsb]) = Scanl t_aRNH t_aRNI t_aRNJ
type Scanl1Sym2 (t_aROi :: TyFun a_aRsh (TyFun a_aRsh a_aRsh -> *) -> *) (t_aROj :: [a_aRsh]) = Scanl1 t_aROi t_aROj
type ScanrSym3 (t_aRMX :: TyFun a_aRsl (TyFun b_aRsm b_aRsm -> *) -> *) (t_aRMY :: b_aRsm) (t_aRMZ :: [a_aRsl]) = Scanr t_aRMX t_aRMY t_aRMZ
type Scanr1Sym2 (t_aRLZ :: TyFun a_aRsu (TyFun a_aRsu a_aRsu -> *) -> *) (t_aRM0 :: [a_aRsu]) = Scanr1 t_aRLZ t_aRM0
type ElemSym2 (t_aRF5 :: a_aRtn) (t_aRF6 :: [a_aRtn]) = Elem t_aRF5 t_aRF6
type NotElemSym2 (t_aRES :: a_aRtr) (t_aRET :: [a_aRtr]) = NotElem t_aRES t_aRET
type ZipSym2 (t_aREB :: [a_aRtv]) (t_aREC :: [b_aRtw]) = Zip t_aREB t_aREC
type Zip3Sym3 (t_aRDY :: [a_aRtB]) (t_aRDZ :: [b_aRtC]) (t_aRE0 :: [c_aRtD]) = Zip3 t_aRDY t_aRDZ t_aRE0
type ZipWithSym3 (t_aRDx :: TyFun a_aRtK (TyFun b_aRtL c_aRtM -> *) -> *) (t_aRDy :: [a_aRtK]) (t_aRDz :: [b_aRtL]) = ZipWith t_aRDx t_aRDy t_aRDz
type UnzipSym1 (t_aRC9 :: [(a_aRu3, b_aRu4)]) = Unzip t_aRC9
type NilSym0 = '[]
type (:$$$) (t_atnv :: a_12) (t_atnw :: [a_12]) = (:) t_atnv t_atnw
type HeadSym1 (t_aS4x :: [a_aRqm]) = Head t_aS4x
type LastSym1 (t_aS42 :: [a_aRqo]) = Last t_aS42
type TailSym1 (t_aS3W :: [a_aRqw]) = Tail t_aS3W
type InitSym1 (t_aS3r :: [a_aRqy]) = Init t_aS3r
type NullSym1 (t_aS3l :: [a_aRqG]) = Null t_aS3l
type MapSym2 (t_aIpy :: TyFun a_aInb b_aInc -> *) (t_aIpz :: [a_aInb]) = Map t_aIpy t_aIpz
type ReverseSym1 (t_aS2M :: [a_aRqH]) = Reverse t_aS2M
type IntersperseSym2 (t_aS2o :: a_aRqP) (t_aS2p :: [a_aRqP]) = Intersperse t_aS2o t_aS2p
type IntercalateSym2 (t_aS2B :: [a_aRqT]) (t_aS2C :: [[a_aRqT]]) = Intercalate t_aS2B t_aS2C
type SubsequencesSym1 (t_aS2j :: [a_aRqW]) = Subsequences t_aS2j
type PermutationsSym1 (t_aRVK :: [a_aRr8]) = Permutations t_aRVK
type FoldlSym3 (t_aRRm :: TyFun b_aRrq (TyFun a_aRrr b_aRrq -> *) -> *) (t_aRRn :: b_aRrq) (t_aRRo :: [a_aRrr]) = Foldl t_aRRm t_aRRn t_aRRo
type Foldl'Sym3 (t_aRPN :: TyFun b_aRpt (TyFun a_aRps b_aRpt -> *) -> *) (t_aRPO :: b_aRpt) (t_aRPP :: [a_aRps]) = Foldl' t_aRPN t_aRPO t_aRPP
type Foldl1Sym2 (t_aRSa :: TyFun a_aRrL (TyFun a_aRrL a_aRrL -> *) -> *) (t_aRSb :: [a_aRrL]) = Foldl1 t_aRSa t_aRSb
type Foldl1'Sym2 (t_aRR9 :: TyFun a_aRrP (TyFun a_aRrP a_aRrP -> *) -> *) (t_aRRa :: [a_aRrP]) = Foldl1' t_aRR9 t_aRRa
type FoldrSym3 (t_aIpL :: TyFun a_aIn4 (TyFun b_aIn5 b_aIn5 -> *) -> *) (t_aIpM :: b_aIn5) (t_aIpN :: [a_aIn4]) = Foldr t_aIpL t_aIpM t_aIpN
type Foldr1Sym2 (t_aRPe :: TyFun a_aRrT (TyFun a_aRrT a_aRrT -> *) -> *) (t_aRPf :: [a_aRrT]) = Foldr1 t_aRPe t_aRPf
type ConcatSym1 (t_aRP9 :: [[a_aRrY]]) = Concat t_aRP9
type ConcatMapSym2 (t_aROU :: TyFun a_aRrZ [b_aRs0] -> *) (t_aROV :: [a_aRrZ]) = ConcatMap t_aROU t_aROV
type AndSym1 (t_aROO :: [Bool]) = And t_aROO
type OrSym1 (t_aROI :: [Bool]) = Or t_aROI
type Any_Sym2 (t_aPpH :: TyFun a_aPpD Bool -> *) (t_aPpI :: [a_aPpD]) = Any_ t_aPpH t_aPpI
type AllSym2 (t_aROv :: TyFun a_aRs6 Bool -> *) (t_aROw :: [a_aRs6]) = All t_aROv t_aROw
type ScanlSym3 (t_aRNH :: TyFun b_aRsa (TyFun a_aRsb b_aRsa -> *) -> *) (t_aRNI :: b_aRsa) (t_aRNJ :: [a_aRsb]) = Scanl t_aRNH t_aRNI t_aRNJ
type Scanl1Sym2 (t_aROi :: TyFun a_aRsh (TyFun a_aRsh a_aRsh -> *) -> *) (t_aROj :: [a_aRsh]) = Scanl1 t_aROi t_aROj
type ScanrSym3 (t_aRMX :: TyFun a_aRsl (TyFun b_aRsm b_aRsm -> *) -> *) (t_aRMY :: b_aRsm) (t_aRMZ :: [a_aRsl]) = Scanr t_aRMX t_aRMY t_aRMZ
type Scanr1Sym2 (t_aRLZ :: TyFun a_aRsu (TyFun a_aRsu a_aRsu -> *) -> *) (t_aRM0 :: [a_aRsu]) = Scanr1 t_aRLZ t_aRM0
type MapAccumLSym3 (t_aRJj :: TyFun acc_aRsB (TyFun x_aRsC (acc_aRsB, y_aRsD) -> *) -> *) (t_aRJk :: acc_aRsB) (t_aRJl :: [x_aRsC]) = MapAccumL t_aRJj t_aRJk t_aRJl
type MapAccumRSym3 (t_aRGD :: TyFun acc_aRsN (TyFun x_aRsO (acc_aRsN, y_aRsP) -> *) -> *) (t_aRGE :: acc_aRsN) (t_aRGF :: [x_aRsO]) = MapAccumR t_aRGD t_aRGE t_aRGF
type UnfoldrSym2 (t_aRGe :: TyFun b_aRsZ (Maybe (a_aRt0, b_aRsZ)) -> *) (t_aRGf :: b_aRsZ) = Unfoldr t_aRGe t_aRGf
type InitsSym1 (t_aRFZ :: [a_aRt5]) = Inits t_aRFZ
type TailsSym1 (t_aRFz :: [a_aRt9]) = Tails t_aRFz
type IsPrefixOfSym2 (t_aRFi :: [a_aRtc]) (t_aRFj :: [a_aRtc]) = IsPrefixOf t_aRFi t_aRFj
type IsSuffixOfSym2 (t_aS3a :: [a_aRth]) (t_aS3b :: [a_aRth]) = IsSuffixOf t_aS3a t_aS3b
type IsInfixOfSym2 (t_aRFO :: [a_aRtk]) (t_aRFP :: [a_aRtk]) = IsInfixOf t_aRFO t_aRFP
type ElemSym2 (t_aRF5 :: a_aRtn) (t_aRF6 :: [a_aRtn]) = Elem t_aRF5 t_aRF6
type NotElemSym2 (t_aRES :: a_aRtr) (t_aRET :: [a_aRtr]) = NotElem t_aRES t_aRET
type ZipSym2 (t_aREB :: [a_aRtv]) (t_aREC :: [b_aRtw]) = Zip t_aREB t_aREC
type Zip3Sym3 (t_aRDY :: [a_aRtB]) (t_aRDZ :: [b_aRtC]) (t_aRE0 :: [c_aRtD]) = Zip3 t_aRDY t_aRDZ t_aRE0
type ZipWithSym3 (t_aRDx :: TyFun a_aRtK (TyFun b_aRtL c_aRtM -> *) -> *) (t_aRDy :: [a_aRtK]) (t_aRDz :: [b_aRtL]) = ZipWith t_aRDx t_aRDy t_aRDz
type UnzipSym1 (t_aRC9 :: [(a_aRu3, b_aRu4)]) = Unzip t_aRC9
type Unzip3Sym1 (t_aRBB :: [(a_aRua, b_aRub, c_aRuc)]) = Unzip3 t_aRBB
type Unzip4Sym1 (t_aRB1 :: [(a_aRuk, b_aRul, c_aRum, d_aRun)]) = Unzip4 t_aRB1
type Unzip5Sym1 (t_aRAp :: [(a_aRux, b_aRuy, c_aRuz, d_aRuA, e_aRuB)]) = Unzip5 t_aRAp
type Unzip6Sym1 (t_aRzL :: [(a_aRuN, b_aRuO, c_aRuP, d_aRuQ, e_aRuR, f_aRuS)]) = Unzip6 t_aRzL
type Unzip7Sym1 (t_aRz5 :: [(a_aRv6, b_aRv7, c_aRv8, d_aRv9, e_aRva, f_aRvb, g_aRvc)]) = Unzip7 t_aRz5
type DeleteSym2 (t_aRyU :: a_aRvs) (t_aRyV :: [a_aRvs]) = Delete t_aRyU t_aRyV
type (:\\$$$) (t_aRVd :: [a_aRvt]) (t_aRVe :: [a_aRvt]) = (:\\) t_aRVd t_aRVe
type IntersectSym2 (t_a1Bbv :: [a_a1AYt]) (t_a1Bbw :: [a_a1AYt]) = Intersect t_a1Bbv t_a1Bbw
type InsertSym2 (t_a1Bco :: a_a1AVJ) (t_a1Bcp :: [a_a1AVJ]) = Insert t_a1Bco t_a1Bcp
type SortSym1 (t_a1Bcj :: [a_a1AVM]) = Sort t_a1Bcj
type DeleteBySym3 (t_aRy8 :: TyFun a_aRvu (TyFun a_aRvu Bool -> *) -> *) (t_aRy9 :: a_aRvu) (t_aRya :: [a_aRvu]) = DeleteBy t_aRy8 t_aRy9 t_aRya
type DeleteFirstsBySym3 (t_aRVo :: TyFun a_aRvz (TyFun a_aRvz Bool -> *) -> *) (t_aRVp :: [a_aRvz]) (t_aRVq :: [a_aRvz]) = DeleteFirstsBy t_aRVo t_aRVp t_aRVq
type SortBySym2 (t_aRxV :: TyFun a_aRvB (TyFun a_aRvB Ordering -> *) -> *) (t_aRxW :: [a_aRvB]) = SortBy t_aRxV t_aRxW
type InsertBySym3 (t_aRwU :: TyFun a_aRvD (TyFun a_aRvD Ordering -> *) -> *) (t_aRwV :: a_aRvD) (t_aRwW :: [a_aRvD]) = InsertBy t_aRwU t_aRwV t_aRwW
type MaximumBySym2 (t_aRSn :: TyFun a_aRvK (TyFun a_aRvK Ordering -> *) -> *) (t_aRSo :: [a_aRvK]) = MaximumBy t_aRSn t_aRSo
type MinimumBySym2 (t_aRTL :: TyFun a_aRvQ (TyFun a_aRvQ Ordering -> *) -> *) (t_aRTM :: [a_aRvQ]) = MinimumBy t_aRTL t_aRTM
type LengthSym1 (t_a1Bo4 :: [a_a1AUx]) = Length t_a1Bo4
type SumSym1 (t_a1BnG :: [Nat]) = Sum t_a1BnG
type ProductSym1 (t_a1Bni :: [Nat]) = Product t_a1Bni
type ReplicateSym2 (t_a1BmR :: Nat) (t_a1BmS :: a_a1AUL) = Replicate t_a1BmR t_a1BmS
type TransposeSym1 (t_a1BmJ :: [[a_a1AUO]]) = Transpose t_a1BmJ
type TakeSym2 (t_a1BlP :: Nat) (t_a1BlQ :: [a_a1AUT]) = Take t_a1BlP t_a1BlQ
type DropSym2 (t_a1Bld :: Nat) (t_a1Ble :: [a_a1AUX]) = Drop t_a1Bld t_a1Ble
type SplitAtSym2 (t_a1Bm4 :: Nat) (t_a1Bm5 :: [a_a1AV1]) = SplitAt t_a1Bm4 t_a1Bm5
type TakeWhileSym2 (t_a1BkQ :: TyFun a_a1AV4 Bool -> *) (t_a1BkR :: [a_a1AV4]) = TakeWhile t_a1BkQ t_a1BkR
type DropWhileSym2 (t_a1Bk3 :: TyFun a_a1AV8 Bool -> *) (t_a1Bk4 :: [a_a1AV8]) = DropWhile t_a1Bk3 t_a1Bk4
type DropWhileEndSym2 (t_a1Bj4 :: TyFun a_a1AVd Bool -> *) (t_a1Bj5 :: [a_a1AVd]) = DropWhileEnd t_a1Bj4 t_a1Bj5
type SpanSym2 (t_a1Bfz :: TyFun a_a1AVh Bool -> *) (t_a1BfA :: [a_a1AVh]) = Span t_a1Bfz t_a1BfA
type BreakSym2 (t_a1Bdf :: TyFun a_a1AVp Bool -> *) (t_a1Bdg :: [a_a1AVp]) = Break t_a1Bdf t_a1Bdg
type MaximumSym1 (t_a1BcE :: [a_a1AVF]) = Maximum t_a1BcE
type MinimumSym1 (t_a1Bcz :: [a_a1AVH]) = Minimum t_a1Bcz
type GroupSym1 (t_a1BiZ :: [a_a1AVD]) = Group t_a1BiZ
type GroupBySym2 (t_a1BhT :: TyFun a_a1AVN (TyFun a_a1AVN Bool -> *) -> *) (t_a1BhU :: [a_a1AVN]) = GroupBy t_a1BhT t_a1BhU
type LookupSym2 (t_a1BbT :: a_a1AVT) (t_a1BbU :: [(a_a1AVT, b_a1AVU)]) = Lookup t_a1BbT t_a1BbU
type FindSym2 (t_a1BbG :: TyFun a_a1AW0 Bool -> *) (t_a1BbH :: [a_a1AW0]) = Find t_a1BbG t_a1BbH
type FilterSym2 (t_a1Bai :: TyFun a_a1AW2 Bool -> *) (t_a1Baj :: [a_a1AW2]) = Filter t_a1Bai t_a1Baj
type PartitionSym2 (t_a1Ba7 :: TyFun a_a1AW7 Bool -> *) (t_a1Ba8 :: [a_a1AW7]) = Partition t_a1Ba7 t_a1Ba8
type (:!!$$$) (t_a1B97 :: [a_a1AWf]) (t_a1B98 :: Nat) = (:!!) t_a1B97 t_a1B98
type ElemIndexSym2 (t_a1Bpw :: a_a1AWj) (t_a1Bpx :: [a_a1AWj]) = ElemIndex t_a1Bpw t_a1Bpx
type ElemIndicesSym2 (t_a1Bp6 :: a_a1AWl) (t_a1Bp7 :: [a_a1AWl]) = ElemIndices t_a1Bp6 t_a1Bp7
type FindIndexSym2 (t_a1Bpj :: TyFun a_a1AWn Bool -> *) (t_a1Bpk :: [a_a1AWn]) = FindIndex t_a1Bpj t_a1Bpk
type FindIndicesSym2 (t_a1Boa :: TyFun a_a1AWp Bool -> *) (t_a1Bob :: [a_a1AWp]) = FindIndices t_a1Boa t_a1Bob
type Zip4Sym4 (t_a1B8H :: [a_a1AWw]) (t_a1B8I :: [b_a1AWx]) (t_a1B8J :: [c_a1AWy]) (t_a1B8K :: [d_a1AWz]) = Zip4 t_a1B8H t_a1B8I t_a1B8J t_a1B8K
type Zip5Sym5 (t_a1B80 :: [a_a1AWA]) (t_a1B81 :: [b_a1AWB]) (t_a1B82 :: [c_a1AWC]) (t_a1B83 :: [d_a1AWD]) (t_a1B84 :: [e_a1AWE]) = Zip5 t_a1B80 t_a1B81 t_a1B82 t_a1B83 t_a1B84
type Zip6Sym6 (t_a1B77 :: [a_a1AWF]) (t_a1B78 :: [b_a1AWG]) (t_a1B79 :: [c_a1AWH]) (t_a1B7a :: [d_a1AWI]) (t_a1B7b :: [e_a1AWJ]) (t_a1B7c :: [f_a1AWK]) = Zip6 t_a1B77 t_a1B78 t_a1B79 t_a1B7a t_a1B7b t_a1B7c
type Zip7Sym7 (t_a1B61 :: [a_a1AWL]) (t_a1B62 :: [b_a1AWM]) (t_a1B63 :: [c_a1AWN]) (t_a1B64 :: [d_a1AWO]) (t_a1B65 :: [e_a1AWP]) (t_a1B66 :: [f_a1AWQ]) (t_a1B67 :: [g_a1AWR]) = Zip7 t_a1B61 t_a1B62 t_a1B63 t_a1B64 t_a1B65 t_a1B66 t_a1B67
type NubSym1 (t_a1B1b :: [a_a1AY4]) = Nub t_a1B1b
type NubBySym2 (t_a1AZU :: TyFun a_a1AYb (TyFun a_a1AYb Bool -> *) -> *) (t_a1AZV :: [a_a1AYb]) = NubBy t_a1AZU t_a1AZV
type UnionSym2 (t_a1B10 :: [a_a1AYs]) (t_a1B11 :: [a_a1AYs]) = Union t_a1B10 t_a1B11
type UnionBySym3 (t_a1B0E :: TyFun a_a1AYo (TyFun a_a1AYo Bool -> *) -> *) (t_a1B0F :: [a_a1AYo]) (t_a1B0G :: [a_a1AYo]) = UnionBy t_a1B0E t_a1B0F t_a1B0G
type GenericLengthSym1 (t_a1BpL :: [a_a1AYz]) = GenericLength t_a1BpL
type GenericTakeSym2 (t_a1Bmy :: i_a1AYB) (t_a1Bmz :: [a_a1AYC]) = GenericTake t_a1Bmy t_a1Bmz
type GenericDropSym2 (t_a1BlE :: i_a1AYD) (t_a1BlF :: [a_a1AYE]) = GenericDrop t_a1BlE t_a1BlF
type GenericSplitAtSym2 (t_a1Bmj :: i_a1AYF) (t_a1Bmk :: [a_a1AYG]) = GenericSplitAt t_a1Bmj t_a1Bmk
type GenericIndexSym2 (t_a1B9s :: [a_a1AYH]) (t_a1B9t :: i_a1AYI) = GenericIndex t_a1B9s t_a1B9t
type GenericReplicateSym2 (t_a1Bn7 :: i_a1AYJ) (t_a1Bn8 :: a_a1AYK) = GenericReplicate t_a1Bn7 t_a1Bn8
type NothingSym0 = Nothing
type JustSym1 (t_atnm :: a_a57N) = Just t_atnm
type Maybe_Sym3 (t_a1wL8 :: b_a1wL3) (t_a1wL9 :: TyFun a_a1wL4 b_a1wL3 -> *) (t_a1wLa :: Maybe a_a1wL4) = Maybe_ t_a1wL8 t_a1wL9 t_a1wLa
type IsJustSym1 (t_a1x8E :: Maybe a_a1x6F) = IsJust t_a1x8E
type IsNothingSym1 (t_a1x8z :: Maybe a_a1x6G) = IsNothing t_a1x8z
type FromJustSym1 (t_a1x8u :: Maybe a_a1x6H) = FromJust t_a1x8u
type FromMaybeSym2 (t_a1x86 :: a_a1x6J) (t_a1x87 :: Maybe a_a1x6J) = FromMaybe t_a1x86 t_a1x87
type MaybeToListSym1 (t_a1x81 :: Maybe a_a1x6N) = MaybeToList t_a1x81
type ListToMaybeSym1 (t_a1x7V :: [a_a1x6P]) = ListToMaybe t_a1x7V
type CatMaybesSym1 (t_a1x7O :: [Maybe a_a1x6R]) = CatMaybes t_a1x7O
type MapMaybeSym2 (t_a1x76 :: TyFun a_a1x6V (Maybe b_a1x6W) -> *) (t_a1x77 :: [a_a1x6V]) = MapMaybe t_a1x76 t_a1x77
type Otherwise = (TrueSym0 :: Bool)
type (:+) x y = x + y
type (:-) x y = x - y
type (:*) x y = x * y
type (:^) x y = x ^ y
type FalseSym0 = False
type TrueSym0 = True
type NotSym1 (t_aAgk :: Bool) = Not t_aAgk
type (:&&$$$) (t_aAgz :: Bool) (t_aAgA :: Bool) = (:&&) t_aAgz t_aAgA
type (:||$$$) (t_aAgo :: Bool) (t_aAgp :: Bool) = (:||) t_aAgo t_aAgp
type OtherwiseSym0 = Otherwise
type NothingSym0 = Nothing
type JustSym1 (t_atnm :: a_a57N) = Just t_atnm
type Maybe_Sym3 (t_a1wL8 :: b_a1wL3) (t_a1wL9 :: TyFun a_a1wL4 b_a1wL3 -> *) (t_a1wLa :: Maybe a_a1wL4) = Maybe_ t_a1wL8 t_a1wL9 t_a1wLa
type LeftSym1 (t_atnN :: a_a8CR) = Left t_atnN
type RightSym1 (t_atnQ :: b_a8CS) = Right t_atnQ
type Either_Sym3 (t_aLeZ :: TyFun a_aLeS c_aLeT -> *) (t_aLf0 :: TyFun b_aLeU c_aLeT -> *) (t_aLf1 :: Either a_aLeS b_aLeU) = Either_ t_aLeZ t_aLf0 t_aLf1
type Tuple0Sym0 = '()
type Tuple2Sym2 (t_ato7 :: a_12) (t_ato8 :: b_13) = '(t_ato7, t_ato8)
type Tuple3Sym3 (t_atoq :: a_12) (t_ator :: b_13) (t_atos :: c_14) = '(t_atoq, t_ator, t_atos)
type Tuple4Sym4 (t_atoT :: a_12) (t_atoU :: b_13) (t_atoV :: c_14) (t_atoW :: d_15) = '(t_atoT, t_atoU, t_atoV, t_atoW)
type Tuple5Sym5 (t_atpx :: a_12) (t_atpy :: b_13) (t_atpz :: c_14) (t_atpA :: d_15) (t_atpB :: e_16) = '(t_atpx, t_atpy, t_atpz, t_atpA, t_atpB)
type Tuple6Sym6 (t_atqn :: a_12) (t_atqo :: b_13) (t_atqp :: c_14) (t_atqq :: d_15) (t_atqr :: e_16) (t_atqs :: f_17) = '(t_atqn, t_atqo, t_atqp, t_atqq, t_atqr, t_atqs)
type Tuple7Sym7 (t_atrq :: a_12) (t_atrr :: b_13) (t_atrs :: c_14) (t_atrt :: d_15) (t_atru :: e_16) (t_atrv :: f_17) (t_atrw :: g_18) = '(t_atrq, t_atrr, t_atrs, t_atrt, t_atru, t_atrv, t_atrw)
type FstSym1 (t_aNYm :: (a_aNXx, b_aNXy)) = Fst t_aNYm
type SndSym1 (t_aNYg :: (a_aNXA, b_aNXB)) = Snd t_aNYg
type CurrySym3 (t_aNXY :: TyFun (a_aNXD, b_aNXE) c_aNXF -> *) (t_aNXZ :: a_aNXD) (t_aNY0 :: b_aNXE) = Curry t_aNXY t_aNXZ t_aNY0
type UncurrySym2 (t_aNYs :: TyFun a_aNXJ (TyFun b_aNXK c_aNXL -> *) -> *) (t_aNYt :: (a_aNXJ, b_aNXK)) = Uncurry t_aNYs t_aNYt
type IdSym1 (t_aIpg :: a_aInl) = Id t_aIpg
type ConstSym2 (t_aIoQ :: a_aInn) (t_aIoR :: b_aIno) = Const t_aIoQ t_aIoR
type ($$$$) a b = ($) a b
type ($!$$$) a b = ($!) a b
type AsTypeOfSym2 (t_aIp5 :: a_aInC) (t_aIp6 :: a_aInC) = AsTypeOf t_aIp5 t_aIp6
type SeqSym2 (t_aInG :: a_aInD) (t_aInH :: b_aInE) = Seq t_aInG t_aInH
type (:$$$) (t_atnv :: a_12) (t_atnw :: [a_12]) = (:) t_atnv t_atnw
type NilSym0 = '[]
type MapSym2 (t_aIpy :: TyFun a_aInb b_aInc -> *) (t_aIpz :: [a_aInb]) = Map t_aIpy t_aIpz
type ReverseSym1 (t_aS2M :: [a_aRqH]) = Reverse t_aS2M
type HeadSym1 (t_aS4x :: [a_aRqm]) = Head t_aS4x
type LastSym1 (t_aS42 :: [a_aRqo]) = Last t_aS42
type TailSym1 (t_aS3W :: [a_aRqw]) = Tail t_aS3W
type InitSym1 (t_aS3r :: [a_aRqy]) = Init t_aS3r
type NullSym1 (t_aS3l :: [a_aRqG]) = Null t_aS3l
type FoldlSym3 (t_aRRm :: TyFun b_aRrq (TyFun a_aRrr b_aRrq -> *) -> *) (t_aRRn :: b_aRrq) (t_aRRo :: [a_aRrr]) = Foldl t_aRRm t_aRRn t_aRRo
type Foldl1Sym2 (t_aRSa :: TyFun a_aRrL (TyFun a_aRrL a_aRrL -> *) -> *) (t_aRSb :: [a_aRrL]) = Foldl1 t_aRSa t_aRSb
type FoldrSym3 (t_aIpL :: TyFun a_aIn4 (TyFun b_aIn5 b_aIn5 -> *) -> *) (t_aIpM :: b_aIn5) (t_aIpN :: [a_aIn4]) = Foldr t_aIpL t_aIpM t_aIpN
type Foldr1Sym2 (t_aRPe :: TyFun a_aRrT (TyFun a_aRrT a_aRrT -> *) -> *) (t_aRPf :: [a_aRrT]) = Foldr1 t_aRPe t_aRPf
type ConcatSym1 (t_aRP9 :: [[a_aRrY]]) = Concat t_aRP9
type ConcatMapSym2 (t_aROU :: TyFun a_aRrZ [b_aRs0] -> *) (t_aROV :: [a_aRrZ]) = ConcatMap t_aROU t_aROV
type MaximumBySym2 (t_aRSn :: TyFun a_aRvK (TyFun a_aRvK Ordering -> *) -> *) (t_aRSo :: [a_aRvK]) = MaximumBy t_aRSn t_aRSo
type MinimumBySym2 (t_aRTL :: TyFun a_aRvQ (TyFun a_aRvQ Ordering -> *) -> *) (t_aRTM :: [a_aRvQ]) = MinimumBy t_aRTL t_aRTM
type AndSym1 (t_aROO :: [Bool]) = And t_aROO
type OrSym1 (t_aROI :: [Bool]) = Or t_aROI
type Any_Sym2 (t_aPpH :: TyFun a_aPpD Bool -> *) (t_aPpI :: [a_aPpD]) = Any_ t_aPpH t_aPpI
type AllSym2 (t_aROv :: TyFun a_aRs6 Bool -> *) (t_aROw :: [a_aRs6]) = All t_aROv t_aROw
type ScanlSym3 (t_aRNH :: TyFun b_aRsa (TyFun a_aRsb b_aRsa -> *) -> *) (t_aRNI :: b_aRsa) (t_aRNJ :: [a_aRsb]) = Scanl t_aRNH t_aRNI t_aRNJ
type Scanl1Sym2 (t_aROi :: TyFun a_aRsh (TyFun a_aRsh a_aRsh -> *) -> *) (t_aROj :: [a_aRsh]) = Scanl1 t_aROi t_aROj
type ScanrSym3 (t_aRMX :: TyFun a_aRsl (TyFun b_aRsm b_aRsm -> *) -> *) (t_aRMY :: b_aRsm) (t_aRMZ :: [a_aRsl]) = Scanr t_aRMX t_aRMY t_aRMZ
type Scanr1Sym2 (t_aRLZ :: TyFun a_aRsu (TyFun a_aRsu a_aRsu -> *) -> *) (t_aRM0 :: [a_aRsu]) = Scanr1 t_aRLZ t_aRM0
type ElemSym2 (t_aRF5 :: a_aRtn) (t_aRF6 :: [a_aRtn]) = Elem t_aRF5 t_aRF6
type NotElemSym2 (t_aRES :: a_aRtr) (t_aRET :: [a_aRtr]) = NotElem t_aRES t_aRET
type ZipSym2 (t_aREB :: [a_aRtv]) (t_aREC :: [b_aRtw]) = Zip t_aREB t_aREC
type Zip3Sym3 (t_aRDY :: [a_aRtB]) (t_aRDZ :: [b_aRtC]) (t_aRE0 :: [c_aRtD]) = Zip3 t_aRDY t_aRDZ t_aRE0
type ZipWithSym3 (t_aRDx :: TyFun a_aRtK (TyFun b_aRtL c_aRtM -> *) -> *) (t_aRDy :: [a_aRtK]) (t_aRDz :: [b_aRtL]) = ZipWith t_aRDx t_aRDy t_aRDz
type UnzipSym1 (t_aRC9 :: [(a_aRu3, b_aRu4)]) = Unzip t_aRC9
type UntilSym3 (t_aOZc :: TyFun a_aOZ5 Bool -> *) (t_aOZd :: TyFun a_aOZ5 a_aOZ5 -> *) (t_aOZe :: a_aOZ5) = Until t_aOZc t_aOZd t_aOZe
type LengthSym1 (t_a1Bo4 :: [a_a1AUx]) = Length t_a1Bo4
type SumSym1 (t_a1BnG :: [Nat]) = Sum t_a1BnG
type ProductSym1 (t_a1Bni :: [Nat]) = Product t_a1Bni
type ReplicateSym2 (t_a1BmR :: Nat) (t_a1BmS :: a_a1AUL) = Replicate t_a1BmR t_a1BmS
type TakeSym2 (t_a1BlP :: Nat) (t_a1BlQ :: [a_a1AUT]) = Take t_a1BlP t_a1BlQ
type DropSym2 (t_a1Bld :: Nat) (t_a1Ble :: [a_a1AUX]) = Drop t_a1Bld t_a1Ble
type SplitAtSym2 (t_a1Bm4 :: Nat) (t_a1Bm5 :: [a_a1AV1]) = SplitAt t_a1Bm4 t_a1Bm5
type TakeWhileSym2 (t_a1BkQ :: TyFun a_a1AV4 Bool -> *) (t_a1BkR :: [a_a1AV4]) = TakeWhile t_a1BkQ t_a1BkR
type DropWhileSym2 (t_a1Bk3 :: TyFun a_a1AV8 Bool -> *) (t_a1Bk4 :: [a_a1AV8]) = DropWhile t_a1Bk3 t_a1Bk4
type SpanSym2 (t_a1Bfz :: TyFun a_a1AVh Bool -> *) (t_a1BfA :: [a_a1AVh]) = Span t_a1Bfz t_a1BfA
type BreakSym2 (t_a1Bdf :: TyFun a_a1AVp Bool -> *) (t_a1Bdg :: [a_a1AVp]) = Break t_a1Bdf t_a1Bdg
type LookupSym2 (t_a1BbT :: a_a1AVT) (t_a1BbU :: [(a_a1AVT, b_a1AVU)]) = Lookup t_a1BbT t_a1BbU
type FilterSym2 (t_a1Bai :: TyFun a_a1AW2 Bool -> *) (t_a1Baj :: [a_a1AW2]) = Filter t_a1Bai t_a1Baj
type (:!!$$$) (t_a1B97 :: [a_a1AWf]) (t_a1B98 :: Nat) = (:!!) t_a1B97 t_a1B98
type (@@) a b = Apply a b
type TrueSym0 = True
type FalseSym0 = False
type LTSym0 = LT
type EQSym0 = EQ
type GTSym0 = GT
type Tuple0Sym0 = '()
type Tuple2Sym2 (t_ato7 :: a_12) (t_ato8 :: b_13) = '(t_ato7, t_ato8)
type Tuple3Sym3 (t_atoq :: a_12) (t_ator :: b_13) (t_atos :: c_14) = '(t_atoq, t_ator, t_atos)
type Tuple4Sym4 (t_atoT :: a_12) (t_atoU :: b_13) (t_atoV :: c_14) (t_atoW :: d_15) = '(t_atoT, t_atoU, t_atoV, t_atoW)
type Tuple5Sym5 (t_atpx :: a_12) (t_atpy :: b_13) (t_atpz :: c_14) (t_atpA :: d_15) (t_atpB :: e_16) = '(t_atpx, t_atpy, t_atpz, t_atpA, t_atpB)
type Tuple6Sym6 (t_atqn :: a_12) (t_atqo :: b_13) (t_atqp :: c_14) (t_atqq :: d_15) (t_atqr :: e_16) (t_atqs :: f_17) = '(t_atqn, t_atqo, t_atqp, t_atqq, t_atqr, t_atqs)
type Tuple7Sym7 (t_atrq :: a_12) (t_atrr :: b_13) (t_atrs :: c_14) (t_atrt :: d_15) (t_atru :: e_16) (t_atrv :: f_17) (t_atrw :: g_18) = '(t_atrq, t_atrr, t_atrs, t_atrt, t_atru, t_atrv, t_atrw)
type URL = Text
type ListLikeF f = (Functor f, Forall (LLF f))
type Vector (ix :: Nat) a = Matrix (Fin ix) a
type Vector2 (ix :: Nat) (iy :: Nat) a = Matrix (Fin ix, Fin iy) a
type S2 = Signed 2
type S3 = Signed 3
type S4 = Signed 4
type S5 = Signed 5
type S6 = Signed 6
type S7 = Signed 7
type S8 = Signed 8
type S9 = Signed 9
type S10 = Signed 10
type S11 = Signed 11
type S12 = Signed 12
type S13 = Signed 13
type S14 = Signed 14
type S15 = Signed 15
type S16 = Signed 16
type S17 = Signed 17
type S18 = Signed 18
type S19 = Signed 19
type S20 = Signed 20
type S21 = Signed 21
type S22 = Signed 22
type S23 = Signed 23
type S24 = Signed 24
type S25 = Signed 25
type S26 = Signed 26
type S27 = Signed 27
type S28 = Signed 28
type S29 = Signed 29
type S30 = Signed 30
type S31 = Signed 31
type S32 = Signed 32
type U1 = Unsigned 1
type U2 = Unsigned 2
type U3 = Unsigned 3
type U4 = Unsigned 4
type U5 = Unsigned 5
type U6 = Unsigned 6
type U7 = Unsigned 7
type U8 = Unsigned 8
type U9 = Unsigned 9
type U10 = Unsigned 10
type U11 = Unsigned 11
type U12 = Unsigned 12
type U13 = Unsigned 13
type U14 = Unsigned 14
type U15 = Unsigned 15
type U16 = Unsigned 16
type U17 = Unsigned 17
type U18 = Unsigned 18
type U19 = Unsigned 19
type U20 = Unsigned 20
type U21 = Unsigned 21
type U22 = Unsigned 22
type U23 = Unsigned 23
type U24 = Unsigned 24
type U25 = Unsigned 25
type U26 = Unsigned 26
type U27 = Unsigned 27
type U28 = Unsigned 28
type U29 = Unsigned 29
type U30 = Unsigned 30
type U31 = Unsigned 31
type U32 = Unsigned 32
type Index = Ordinal
type Key = ByteString
type MimeType = ByteString
type Route = Text
type RoutePart = Text
type RouteParts = [Text]
type ForeignResource = AttributeValue
type URL = Text
type UserId = Id TUser
type BotId = Id TBot
type ChannelId = Id TChannel
type FileId = Id TFile
type CommentId = Id TComment
type GroupId = Id TGroup
type IMId = Id TIM
type TeamId = Id TTeam
type Username = Text
type Purpose = Topic
type Domain = Text
type Pref = (Text, Value)
type SlackBot s = Event -> Slack s ()
type SlackBot s = Event -> Slack s ()
type TeX = [TeXElement]
type LaTeX = [LaTeXElement]
type Parser = ParsecT TeX () (Writer [Text])
type Parser u = Parsec LaTeX u
type Profile = Map Text Config
type SubParser a = ParserState -> a -> Either String (a, ParserState)
type Parser = GenParser ParserState
type Parser = Parser ParserState
type Depth = Int
type Argument = String
type Depth = Int
type Rational = Ratio Integer
type Numeral = Integer
type Symbol = String
type Keyword = String
type Proof = S_expr
type Valuation_pair = (Term, Term)
type T_valuation_pair = (Symbol, Bool)
type Source = [Command]
type GetInfoResponse = [InfoResponse]
type GetAssertionsResponse = [Term]
type GetProofResponse = Sexpr
type GetUnsatCoreResponse = [String]
type GetValueResponse = [ValuationPair]
type GetAssignmentResponse = [TValuationPair]
type GetOptionResponse = AttrValue
type AttrVal = Expr
type Sort = Ident
type ArgumentSort = Fix ArgumentSort'
type SMT = SMT' IO
type Sort = Fix Sort'
type N0 = Z
type N1 = S N0
type N2 = S N1
type N3 = S N2
type N4 = S N3
type N5 = S N4
type N6 = S N5
type N7 = S N6
type N8 = S N7
type N9 = S N8
type N10 = S N9
type N11 = S N10
type N12 = S N11
type N13 = S N12
type N14 = S N13
type N15 = S N14
type N16 = S N15
type N17 = S N16
type N18 = S N17
type N19 = S N18
type N20 = S N19
type N21 = S N20
type N22 = S N21
type N23 = S N22
type N24 = S N23
type N25 = S N24
type N26 = S N25
type N27 = S N26
type N28 = S N27
type N29 = S N28
type N30 = S N29
type N31 = S N30
type N32 = S N31
type N33 = S N32
type N34 = S N33
type N35 = S N34
type N36 = S N35
type N37 = S N36
type N38 = S N37
type N39 = S N38
type N40 = S N39
type N41 = S N40
type N42 = S N41
type N43 = S N42
type N44 = S N43
type N45 = S N44
type N46 = S N45
type N47 = S N46
type N48 = S N47
type N49 = S N48
type N50 = S N49
type N51 = S N50
type N52 = S N51
type N53 = S N52
type N54 = S N53
type N55 = S N54
type N56 = S N55
type N57 = S N56
type N58 = S N57
type N59 = S N58
type N60 = S N59
type N61 = S N60
type N62 = S N61
type N63 = S N62
type N64 = S N63
type BV8 = BitVector (BVTyped N8)
type BV16 = BitVector (BVTyped N16)
type BV32 = BitVector (BVTyped N32)
type BV64 = BitVector (BVTyped N64)
type SMT = SMT' IO
type BV8 = BitVector (BVTyped N8)
type BV16 = BitVector (BVTyped N16)
type BV32 = BitVector (BVTyped N32)
type BV64 = BitVector (BVTyped N64)
type N0 = Z
type N1 = S N0
type N2 = S N1
type N3 = S N2
type N4 = S N3
type N5 = S N4
type N6 = S N5
type N7 = S N6
type N8 = S N7
type N9 = S N8
type N10 = S N9
type N11 = S N10
type N12 = S N11
type N13 = S N12
type N14 = S N13
type N15 = S N14
type N16 = S N15
type N17 = S N16
type N18 = S N17
type N19 = S N18
type N20 = S N19
type N21 = S N20
type N22 = S N21
type N23 = S N22
type N24 = S N23
type N25 = S N24
type N26 = S N25
type N27 = S N26
type N28 = S N27
type N29 = S N28
type N30 = S N29
type N31 = S N30
type N32 = S N31
type N33 = S N32
type N34 = S N33
type N35 = S N34
type N36 = S N35
type N37 = S N36
type N38 = S N37
type N39 = S N38
type N40 = S N39
type N41 = S N40
type N42 = S N41
type N43 = S N42
type N44 = S N43
type N45 = S N44
type N46 = S N45
type N47 = S N46
type N48 = S N47
type N49 = S N48
type N50 = S N49
type N51 = S N50
type N52 = S N51
type N53 = S N52
type N54 = S N53
type N55 = S N54
type N56 = S N55
type N57 = S N56
type N58 = S N57
type N59 = S N58
type N60 = S N59
type N61 = S N60
type N62 = S N61
type N63 = S N62
type N64 = S N63
type UserName = String
type Password = String
type ReplyCode = Int
type UserName = String
type Password = String
type UserName = String
type Password = String
type ReplyCode = Int
type HostName = String
type Message = GenericMessage String
type Message = GenericMessage String
type SnapletLens s a = ALens' s (Snaplet a)
type SnapletHeist b m a = HeistT (Handler b b) m a
type SnapletISplice b = SnapletHeist b (Handler b b) Template
type SnapletCSplice b = SnapletHeist b IO (DList (Chunk (Handler b b)))
type SnapletHeist b m a = HeistT (Handler b b) m a
type SnapletCSplice b = SnapletHeist b IO (DList (Chunk (Handler b b)))
type SnapletISplice b = SnapletHeist b (Handler b b) Template
type SnapletHeist b m a = HeistT (Handler b b) m a
type SnapletCSplice b = SnapletHeist b IO (DList (Chunk (Handler b b)))
type SnapletHeist b m a = HeistT (Handler b b) m a
type SnapletISplice b = SnapletHeist b (Handler b b) Template
type SnapletHeist b m a = HeistT (Handler b b) m a
type SnapletCSplice b = SnapletHeist b IO (DList (Chunk (Handler b b)))
type SecureCookie t = (UTCTime, t)
type Enumerator a (m :: * -> *) b = Step a m b -> Iteratee a m b
type Enumeratee ao ai (m :: * -> *) b = Step ai m b -> Iteratee ao m (Step ai m b)
type HttpVersion = (Int, Int)
type Params = Map ByteString [ByteString]
type DList a = [a] -> [a]
type EscapeHttpHandler = ((Int -> Int) -> IO ()) -> Iteratee ByteString IO () -> Iteratee ByteString IO ()
type EscapeHttpHandler = ((Int -> Int) -> IO ()) -> Iteratee ByteString IO () -> Iteratee ByteString IO ()
type Params = Map ByteString [ByteString]
type HttpVersion = (Int, Int)
type Enumerator a (m :: * -> *) b = Step a m b -> Iteratee a m b
type MultipartParams = [(ByteString, MultipartParam)]
type MimeMap = HashMap FilePath ByteString
type HandlerMap m = HashMap FilePath (FilePath -> m ())
type Tab = Text -> Node
type Delta = Double
type (:+:) a b = Either a b
type Content x y = MediaType x y
type SnapTesting b a = StateT (Handler b b (), (Snaplet b, InitializerState b), OutputStream TestResult) IO a
type Path = Text
type LoggedAction = LoggedActionGeneric SqlBackend
type LoggedActionId = KeyBackend SqlBackend LoggedAction
type LoggedActionDetails = LoggedActionDetailsGeneric SqlBackend
type LoggedActionDetailsId = KeyBackend SqlBackend LoggedActionDetails
type HdbcIO c = HdbcSnaplet c IO
type HdbcPool c = HdbcSnaplet c Pool
type Row = Map String SqlValue
type MongoDBPool = Pool IOError Pipe
type SnapAuthUserId = Key SnapAuthUser
type PrivateKey = ByteString
type SiteKey = ByteString
type ModelName = ByteString
type FieldName = ByteString
type FieldValue = ByteString
type FieldIndex = (FieldName, Bool)
type Commit = Map FieldName FieldValue
type FieldMeta = Map FieldName Value
type Groups = Map ByteString [Field]
type InstanceId = ByteString
type MediaSetter res m diff int f a = Setter (Media res m diff int) (Media res m diff int) (f a) a
type Resources b = ResourceConfig (Handler b b)
type Params = Map ByteString [ByteString]
type MediaSetter res m diff int f a = Setter (Media res m diff int) (Media res m diff int) (f a) a
type Resources b = ResourceConfig (Handler b b)
type Page m = ByteString -> m ()
type Checksum = Word32
type DecodeError = (ByteOffset, String)
type AudioMonad = StateT AudioStreamState IO
type NumChannels = Integer
type SampleRate = Integer
type BitDepth = Integer
type FrameCount = Integer
type WAVEDict = IntMap [WAVEDE]
type OID = [Integer]
type OIDS = [OID]
type Reportable = Bool
type EngineBootId = Int32
type PrivacyParameter = ByteString
type EngineTime = Int32
type EngineId = ByteString
type RequestId = Int32
type ErrorStatus = Integer
type ErrorIndex = Integer
type Password = ByteString
type Key = ByteString
type Salt = ByteString
type Raw = ByteString
type Encrypted = ByteString
type Rand32 = Int32
type Rand64 = Int64
type Port = String
type Hostname = String
type Login = ByteString
type Password = ByteString
type Sink i = ConduitM i Void
type Transport = String -> Document -> IO ByteString
type EndpointURL = String
type RequestP = Request -> Request
type BodyP = ByteString -> ByteString
type Handler = Document -> IO ByteString
type Handlers = [(String, Handler)]
type Transport = String -> Document -> IO ByteString
type Parser a = Sink Event (ResourceT IO) a
type Dict = HashMap Text Text
type ServerCertCallback = CertificateStore -> ValidationCache -> ServiceID -> CertificateChain -> IO [FailedReason]
type Metre = Float
type Length = Metre
type XPos = Metre
type YPos = Metre
type ZPos = Metre
type XRadius = Metre
type YRadius = Metre
type ZRadius = Metre
type Angle = Radian
type Radian = Float
type Velocity = Float
type Degrees = Int
type PlayingTime = Minutes
type TimeUnit = Seconds
type Seconds = Float
type ClubName = String
type PlayersNumber = Int
type FramesToGo = Int
type Displacements = [(PlayerID, Displacement)]
type Displacement = Position
type ExtraTime = Minutes
type Minutes = Float
type FieldWidth = Metre
type FieldLength = Metre
type PlayerAI memory = BrainInput -> State memory PlayerAction
type PlayerWithAction = (PlayerAction, PlayerID)
type PlayerWithEffect = (Maybe PlayerEffect, PlayerID)
type MajorSkills = (Skill, Skill, Skill)
type Stamina = Float
type Health = Float
type HealthStaminaFactor = Float
type Team = [Player]
type Score = (NrOfGoals, NrOfGoals)
type NrOfGoals = Int
type Step = (([RefereeAction], [PlayerWithAction]), Match)
type PenaltyFactor = Float
type TackleAction = (Victim, Offender, Velocity)
type Victim = (PlayerID, Position, Health)
type Offender = (PlayerID, Position, Health)
type PunishedPlayer = (PlayerID, PunishedScore, [Reason])
type PunishedScore = Int
type Mood = Float
type EventHandler a = ReaderT Socket IO a
type Port = Int
type EventName = Text
type SessionID = ByteString
type Behaviour r a = Behavior r a
type Reactive = Reactive Plain
type Event = Event Plain
type Behavior = Behavior Plain
type Behaviour = Behavior Plain
type Title = String
type Size = (Int, Int)
type Point = (Int, Int)
type Angle = Float
type Frame = Integer
type FrameCount = Integer
type ComponentId = Unique
type ComponentName = String
type NodeId = Unique
type SimMonad = StateT SimState STM
type SimInternal = Coroutine (RequestOrYield Unique ()) SimMonad
type ComponentId = Unique
type ComponentName = String
type NodeId = Unique
type Transform a b = forall m r. Monad m => Sink b m r -> Sink a m r
type TransFun a b m r = (a -> m (Sink a m r)) -> m r -> b -> m (Sink b m r)
type Fetch i a = Sink i Identity a
type Transform a b = forall m r. Monad m => Sink b m r -> Sink a m r
type IOReadException = Either ReadException SomeException
type OptimizeM m t = (t -> m Float) -> Probe t -> m [(t, Float)]
type Array a = Arr a a
type Index = Int
type SVec α = IntMap α
type SMx α = SVec (SVec α)
type Residual = Exp -> LP ()
type Var = Int
type Pred = LP ()
type Family = [(Int, Int)]
type Conv a = (Term a -> Pred, Exp -> Maybe a)
type Sparser = SparserT () Char
type Assoc = [(String, String)]
type Guard = String -> Assoc -> Either String Assoc
type Task = Assoc -> Either String Assoc
type GuardiansT a = Writer (DList Task) a
type Guardians = GuardiansT ()
type GuardM m = String -> Assoc -> m (Either String Assoc)
type TaskM m = Assoc -> m (Either String Assoc)
type GuardiansTM a m = Writer (DList (TaskM m)) a
type GuardiansM m = GuardiansTM () m
type M33 a = V3 (V3 a)
type M33T f1 f2 a = V3T f1 (V3T f2 a)
type Result a = Either SomeException a
type Spe a c = [a] -> [c]
type DecRenamer = [Type] -> TypeName -> Result TypeName
type ConstrRenamer = [Type] -> Con -> Con
type Result a = Either String a
type CycleType = [(Integer, Integer)]
type SpellingWordFilter = String -> String -> Bool
type SpellingWordCoder = String -> String
type Id = Int
type DoList a = DoListT a ()
type LoadAssets = DoList [LoadAsset]
type Scene = IO ()
type DeltaTime = Float
type SpinCounterIO = SpinCounter IORef
type SpinCounterSTM = SpinCounter TVar
type Datatype a = [Signature a]
type Map k a = SplayTree (Elem k a)
type RangeSet a = SplayTree (Range a)
type ChunkSize = Int
type SplitList a = [Chunk a]
type SpockAction conn sess st = ActionT (WebStateM conn sess st)
type SessionId = Text
type WebStateM conn sess st = WebStateT conn sess st (ResourceT IO)
type SpockM conn sess st a = SpockT (WebStateM conn sess st) a
type SpockM conn sess st a = SpockT (WebStateM conn sess st) a
type Var a = Path ((:) * a ([] *))
type NoAccessHandler conn sess userId st = NoAccessReason -> SpockAction conn (VisitorSession sess userId) st ()
type LoadUserFun conn sess userId st user = userId -> SpockAction conn (VisitorSession sess userId) st (Maybe user)
type CheckRightsFun conn sess userId st user = user -> [UserRights] -> SpockAction conn (VisitorSession sess userId) st Bool
type UserRights = Text
type WorkHandler conn sess st a = a -> ErrorT InternalError (WebStateM conn sess st) WorkResult
type InternalError = String
type Handles a = [Handler (Maybe a)]
type URL = Text
type SpotID = Text
type SpotURI = Text
type :: HasType s a => Lens' s a
type CountryID = Text
type T = [[String]]
type UserMessage = String
type FieldName = (TableName, String)
type TableName = String
type CompId = String
type DepsM conn a = RWST conn () (QueryCollection conn) IO a
type TableName = String
type ColumnName = String
type DatabaseName = String
type OpName = String
type SQLTable = Table SQLType
type SQLiteInt64 = Int64
type SQLiteWord64 = Word64
type SQLiteCallbackUserData = Ptr ()
type Status = Word32
type OpenFlags = Word32
type IOCap = Word32
type LockFlag = Word32
type SyncFlag = Word32
type AccessFlag = Word32
type AuthCode = Word32
type TextEncodeFlag = CInt
type FundamentalDatatype = CInt
type ExecHandler = SQLiteCallbackUserData -> CInt -> Ptr CString -> Ptr CString -> IO Status
type FreeHandler = SQLiteCallbackUserData -> IO ()
type UpdateHook = SQLiteCallbackUserData -> CInt -> CString -> CString -> SQLiteInt64 -> IO ()
type FilterHandler = SQLiteCallbackUserData -> IO Status
type StepHandler = SQLiteContext -> CInt -> Ptr SQLiteValue -> IO ()
type FinalizeContextHandler = SQLiteContext -> IO ()
type CompareHandler = SQLiteCallbackUserData -> CInt -> Ptr () -> CInt -> Ptr () -> IO CInt
type CollationHandler = SQLiteCallbackUserData -> SQLite -> TextEncodeFlag -> CString -> IO ()
type CollationHandler16 = SQLiteCallbackUserData -> SQLite -> TextEncodeFlag -> SQLiteUTF16 -> IO ()
type Row a = [(ColumnName, a)]
type RegexpHandler = ByteString -> ByteString -> IO Bool
type FieldParser a = Field -> Ok a
type SCGI = SCGIT IO
type Headers = Map (CI ByteString) ByteString
type Body = ByteString
type Status = ByteString
type Packet a = Writer ByteString a
type NetReader = State ByteString
type Channel = StateT ChannelState IO
type Session = StateT SessionState IO
type Depth = Int
type ValueCount = Int
type LengthCheck = Int
type FromFile = Bool
type DockerImageLastUsed = (String, [(UTCTime, FilePath)])
type DockerImageProjectId = Key DockerImageProject
type ToolMap = Map ByteString (Set PackageName)
type SourceMap = Map PackageName PackageSource
type Line = ByteString
type InstalledMap = Map PackageName (Version, InstallLocation, Installed)
type StackPrism a b = forall p f. (Choice p, Applicative f) => p a (f a) -> p b (f b)
type StackPrism a b = forall p f. (Choice p, Applicative f) => p a (f a) -> p b (f b)
type StackPrisms a = PrismList (Rep a) a
type StackPrism a b = forall p f. (Choice p, Applicative f) => p a (f a) -> p b (f b)
type DocMap = Map Text PackageDocs
type DocMap = Map Text PackageDocs
type FromFile = Bool
type :-> = E
type :<- = K
type :. = O
type :+ = S
type :* = P
type Key = ByteString
type Value = ByteString
type AuthMechanism = ByteString
type AuthData = ByteString
type Opaque = Word32
type Key = ByteString
type Value = ByteString
type AuthMechanism = ByteString
type AuthData = ByteString
type Stashable a = (ToJSON a, FromJSON a, Typeable a, Show a)
type Meta = Value
type StateStack s a = StateStackT s Identity a
type GettableStateVar = IO
type RSS r w s = RSST r w s Identity
type RSS r w s = RSST r w s Identity
type RSS r w s = RSST r w s Identity
type RSS r w s = RSST r w s Identity
type CanvasFree = F Canvas
type WrappedDouble = Either String Double
type CD = Complex Double
type Vector = Vector Double
type MVector s = MVector s Double
type MVector s = MVector s Double
type Sample = Vector Double
type WeightedSample = Vector (Double, Double)
type Weights = Vector Double
type Sample = Vector Double
type WeightedSample = Vector (Double, Double)
type Vector = Vector Double
type Bandwidth = Double
type Kernel = Double -> Double -> Double -> Double -> Double
type TrainingVector = Vector Double
type TrainingVectors = Vector TrainingVector
type Delta = Double
type Component = (Double, [Double])
type Component = (Double, [Double])
type TrainingVector = Vector Double
type TrainingVectors = Vector TrainingVector
type Delta = Double
type ErrorFunction = EstimatedRelation -> (Double, Double) -> Double
type Estimator = Sample -> Sample -> EstimatedRelation
type EstimatedRelation = (Double, Double)
type Statsd a = StatsdT IO a
type Bucket = ByteString
type SamplePct = Double
type Tags = [(Text, Text)]
type CStatVFS = ()
type Image = Bitmap Word8
type Unscaled = Int
type Scaling = (Float, Float)
type BitmapOfs = (Int, Int)
type U1 = Word8
type U2 = Word16
type U4 = Word32
type I1 = Int8
type I2 = Int16
type I4 = Int32
type R4 = Float
type R8 = Double
type C1 = Char
type Stdf = [Rec]
type Stdf = [Rec]
type MemoEnvRef e i o w = IORef (MemoEnv e i o w)
type Lab a = RWST LabIn Instrs LabChn (Stepwise AnyFailure LabSteps Lazy AnyWatcher) a
type Lab' a = Stepwise AnyFailure LabSteps Lazy AnyWatcher (a, LabChn, Instrs)
type Pos = (Int, Int)
type Path = [Dir]
type RepMin a = Stepwise AnyFailure I Lazy AnyWatcher a
type Comp i n = Stepwise AnyFailure i Lazy AnyWatcher (Syn n)
type Stitch = StitchT Identity
type CSS = Stitch ()
type BlockPrinter = Block -> Text
type CSS = Stitch ()
type Vector = (Float, Float, Float)
type Vector = (Float, Float, Float)
type Key a = (Eq a, Hashable a)
type Element a = (Eq a, Hashable a)
type Association k v = (Key k, Value v)
type Key k = Key k
type Value v = Element v
type Association a b = (Key a, Key b)
type Key k = Key k
type In = T In
type Out = T Out
type In = T In
type Out = T Out
type TList a = TVar (TCell a)
type TCursor a = TVar (TList a)
type STMC a b = ReaderT (IORef a) STM b
type StompUri = String
type Host = String
type Destination = String
type MessageId = String
type Transaction = String
type Subscription = String
type Version = (Int, Int)
type Heart = (Int, Int)
type EHandler = Con -> Frame -> IO ()
type ReaderDesc i = (String, [Qopt], [Header], InBound i)
type WriterDesc o = (String, [Qopt], [Header], OutBound o)
type InBound a = Type -> Int -> [Header] -> ByteString -> IO a
type OutBound a = a -> IO ByteString
type Receipt = Rec
type Header = (String, String)
type Body = ByteString
type Heart = (Int, Int)
type Version = (Int, Int)
type SrvDesc = (String, String, String)
type LazySize = T ChunkSize
type ProgramName = String
type ChaseName = String
type GSet = TU () Maybe
type GMap value = TU value Maybe
type GList = (Integer -> TP Maybe, Integer)
type Coder = (Int, TU Int Maybe)
type TypeGuard a = a -> ()
type Metrics = MetricName -> Integer
type MetricName = String
type State s = StateT s Identity
type Output = Builder
type BlockMap = Map String [ParsedPiece]
type TemplateStore = String -> IO (Maybe Template)
type ParserM = GenParser Char StrappedConfig
type TimeAbs = Rational
type Bundle a = [(Time, a)]
type EventDataBundle = Bundle Data
type KeySet = Map (Pitch, Channel) Velocity
type KeyQueue = [((Pitch, Channel), Velocity)]
type Selector i = i -> Time -> KeyQueue -> EventDataBundle
type EventDataTrigger = Bundle (Trigger Data)
type TempoControl = ((Channel, Controller), (Time, Time, Time))
type ZStream' = Ptr ZStreamStruct
type Popper = IO PopperRes
type ConnectionHandle = Socket -> SockAddr -> Maybe SockAddr -> IO ()
type BufferAllocStrategy = (IO Buffer, Int -> Buffer -> IO (IO Buffer))
type BuilderRecv = Builder -> IO BuilderPopper
type BuilderPopper = IO ByteString
type BuilderFinish = IO (Maybe ByteString)
type BufferAllocStrategy = (IO Buffer, Int -> Buffer -> IO (IO Buffer))
type BlazeRecv = Builder -> IO BlazePopper
type BlazePopper = IO ByteString
type BlazeFinish = IO (Maybe ByteString)
type BufferAllocStrategy = (IO Buffer, Int -> Buffer -> IO (IO Buffer))
type :!: = Pair
type GenStringDefault = ByteString
type StrictByteString = ByteString
type SBS = ByteString
type LazyByteString = ByteString
type LBS = ByteString
type StrictText = Text
type ST = Text
type LazyText = Text
type LT = Text
type Builder = BuilderM ()
type Key = Atom
type Stripe a = StripeT IO a
type AuthCode = ByteString
type AccessToken = Text
type PublishableKey = Text
type RefreshToken = Text
type UserId = Text
type ClientId = ByteString
type URL = ByteString
type EndingBefore a = Maybe a
type StartingAfter a = Maybe a
type Limit = Maybe Int
type ExpandParams = [Text]
type EndingBefore a = Maybe a
type StartingAfter a = Maybe a
type Limit = Maybe Int
type ExpandParams = [Text]
type MetaData = [(Text, Text)]
type Amount = Int
type EndingBefore a = Maybe a
type StartingAfter a = Maybe a
type Limit = Maybe Int
type Name = Text
type Description = Text
type Amount = Int
type Capture = Bool
type Description = Text
type AccountBalance = Int
type Limit = Maybe Int
type Limit = Maybe Int
type Description = Text
type Amount = Int
type Limit = Maybe Int
type StartingAfter a = Maybe a
type EndingBefore a = Maybe a
type Name = Text
type Amount = Int
type Description = Text
type MetaData = [(Text, Text)]
type MiddleInitial = Char
type TaxID = Text
type Description = Text
type Limit = Maybe Int
type Amount = Int
type Limit = Maybe Int
type Stripe = EitherT StripeError (ReaderT (StripeConfig, Connection) IO)
type GetClubMembersOptions = PaginationOptions
type GetClubActivitiesOptions = PaginationOptions
type GetCurrentFriendsOptions = PaginationOptions
type GetFriendsOptions = PaginationOptions
type GetCurrentFollowersOptions = PaginationOptions
type GetFollowersOptions = PaginationOptions
type GetCommonFriendsOptions = PaginationOptions
type GetActivityKudoersOptions = PaginationOptions
type Lens a b = forall f. Functor f => (b -> f b) -> a -> f a
type GetRelatedActivitiesOptions = PaginationOptions
type GetFeedOptions = PaginationOptions
type GetAthleteCrsOptions = PaginationOptions
type GetStarredSegmentsOptions = PaginationOptions
type ActivityId = Integer
type ApplicationId = Integer
type ApplicationSecret = String
type AthleteId = Integer
type AuthorizationCode = String
type ClubId = Integer
type EffortId = Integer
type ElapsedTime = Integer
type Extension = String
type GearId = String
type Latitude = Double
type Longitude = Double
type Name = String
type RedirectUri = String
type Result a = Either (Response ByteString, String) a
type SegmentId = Integer
type StartTime = UTCTime
type StreamId = Integer
type UploadId = Integer
type TaggedObligation c v t = Obligation c (Tagged v) t
type Predicate c v = [Term c v]
type Hypothesis c v t = ([(v, t)], Predicate c v)
type TyEnv c t = t -> Maybe [(c, [Arg t])]
type IterST s = IterT (ST s)
type Array a = Arr a a
type MArray s a = Mutable (Arr a) s a
type Heap s a = MArray s a
type Method = Word16
type Extensions = [String]
type Verbose = String -> IO ()
type Lines = [String]
type Style = (ColourOption, StyleOption)
type ColourOption = (ColorIntensity, Color)
type StyleOption = (ConsoleIntensity, Underlining)
type Subtitles = [Line]
type Frame = Int
type Color = Text
type Subtitles = [Line]
type Alphabet a = [a]
type Edge a = (Prefix a, STree a)
type Description = String
type Compiler = String
type GhcPkg = String
type Cabal = String
type Expr = E ExprE
type Id = String
type Uniq = Int
type JSA a = JS A a
type JSB a = JS B a
type JSA a = JS A a
type JSB a = JS B a
type SunroofApp = SunroofEngine -> IO ()
type NodeId = Int
type CssSelectorRule = [CssSelector]
type CssContext a = [[a]]
type Dpi = Int
type Coord = Double
type Point = (Number, Number)
type RPoint = V2 Coord
type Dpi = Int
type OutlineMap n = Map String (Path V2 n)
type PreparedFont n = (FontData n, OutlineMap n)
type FieldMap = [(ByteString, ByteString)]
type RevDate = UTCTime
type ModelId = Text
type PropertyName = Text
type OAuth2Builder = State [Scope] ()
type ScopeSt = Common '["description"] Scope
type ScopeBuilder = State ScopeSt ()
type ImplicitBuilder = State (TokenName ImplicitGrant) ()
type TokenEndpointBuilder = State (TokenName TokenEndpoint) ()
type TokenReqEndpointBuilder = State TokenRequestEndpoint ()
type ResourcesBuilder = State Resources ()
type InfoBuilder = State InfoSt ()
type ApiDeclSt = Common '["produces", "consumes", "models", "authorisations"] ApiDecl
type ApiDeclBuilder = State ApiDeclSt ()
type ApiSt = Common '["description"] API
type ApiBuilder = State ApiSt ()
type OperationSt = Common '["produces", "consumes", "authorisations"] Operation
type OperationBuilder = State OperationSt ()
type ParameterSt = Common '["description", "required"] Parameter
type ParameterBuilder = State ParameterSt ()
type ResponseSt = Common '["models"] Response
type ResponseBuilder = State ResponseSt ()
type ModelSt = Common '["description"] Model
type ModelBuilder = State ModelSt ()
type PropertySt = Common '["description", "required"] Property
type PropertyBuilder = State PropertySt ()
type SwfString = String
type SwfLanguageCode = Int
type SwfRGB = (SwfU8, SwfU8, SwfU8)
type SwfRGBA = (SwfU8, SwfU8, SwfU8, SwfU8)
type SwfU32 = Word32
type SwfU16 = Word16
type SwfU8 = Word8
type SwfUB = Word32
type SwfSB = Int32
type SwfBool = Bool
type SwfFloat = Float
type SwfDouble = Double
type Label = String
type Position = Int
type SymTbl = [(Label, Position)]
type Doc = (D, Vector (W, Maybe Z))
type D = Int
type W = Int
type Z = Int
type Table2D = IntMap Table1D
type Table1D = IntMap Double
type ArcSet lb = Set (Arc lb)
type Selector lb = Arc lb -> Bool
type LabelMap lb = GenLabelMap lb LabelIndex
type LabelEntry lb = GenLabelEntry lb LabelIndex
type LabelIndex = (Word32, Word32)
type EquivalenceClass lb = (LabelIndex, [lb])
type PartCompare a = a -> a -> Maybe Ordering
type RuleMap ex = Map ScopedName (Rule ex)
type RulesetMap ex = Map Namespace (Ruleset ex)
type RDFArcSet = ArcSet RDFLabel
type RDFTriple = Arc RDFLabel
type RDFGraph = NSGraph RDFLabel
type NamespaceMap = Map (Maybe Text) URI
type Formula lb = LookupFormula lb (NSGraph lb)
type FormulaMap lb = Map lb (NSGraph lb)
type Selector lb = Arc lb -> Bool
type SpecialMap = Map String ScopedName
type ParseResult = Either String RDFGraph
type ParseResult = Either String RDFGraph
type OpenVarBindingModify lb vn = [lb] -> VarBindingModify lb vn
type DatatypeRelFn vt = [Maybe vt] -> Maybe [[vt]]
type DatatypeRelPr vt = [vt] -> Bool
type UnaryFnDescr a = (a -> a, Int)
type UnaryFnTable a = [(a -> Bool, [UnaryFnDescr a])]
type UnaryFnApply a = (a -> Bool) -> UnaryFnDescr a -> [Maybe a] -> Maybe [a]
type BinaryFnDescr a = (a -> a -> a, Int, Int)
type BinaryFnTable a = [(a -> Bool, [BinaryFnDescr a])]
type BinaryFnApply a = (a -> Bool) -> BinaryFnDescr a -> [Maybe a] -> Maybe [a]
type BinMaybeFnDescr a = (a -> a -> Maybe [a], Int, Int)
type BinMaybeFnTable a = [(a -> Bool, [BinMaybeFnDescr a])]
type BinMaybeFnApply a = (a -> Bool) -> BinMaybeFnDescr a -> [Maybe a] -> Maybe [a]
type ListFnDescr a = (a -> a -> a, a, a -> a -> a, Int)
type ListFnTable a = [(a -> Bool, [ListFnDescr a])]
type ListFnApply a = (a -> Bool) -> ListFnDescr a -> [Maybe a] -> Maybe [a]
type ModifierFn vn = [vn] -> [vn]
type ApplyModifier lb vn = ScopedName -> [ModifierFn vn] -> OpenVarBindingModify lb vn
type RDFVarBinding = VarBinding RDFLabel RDFLabel
type RDFVarBindingModify = VarBindingModify RDFLabel RDFLabel
type RDFOpenVarBindingModify = OpenVarBindingModify RDFLabel RDFLabel
type RDFOpenVarBindingModifyMap = Map ScopedName RDFOpenVarBindingModify
type RDFVarBindingFilter = VarBindingFilter RDFLabel RDFLabel
type RDFDatatype = Datatype RDFGraph RDFLabel RDFLabel
type RDFDatatypeVal vt = DatatypeVal RDFGraph vt RDFLabel RDFLabel
type RDFDatatypeMod vt = DatatypeMod vt RDFLabel RDFLabel
type RDFModifierFn = ModifierFn RDFLabel
type RDFApplyModifier = ApplyModifier RDFLabel RDFLabel
type RDFDatatypeSub supvt subvt = DatatypeSub RDFGraph RDFLabel RDFLabel supvt subvt
type ParseResult = Either String RDFGraph
type ParseResult = Either String RDFGraph
type N3Parser a = Parser N3State a
type SpecialMap = Map String ScopedName
type RDFFormula = Formula RDFGraph
type RDFRule = Rule RDFGraph
type RDFRuleMap = RuleMap RDFGraph
type RDFClosure = GraphClosure RDFLabel
type RDFRuleset = Ruleset RDFGraph
type RDFRulesetMap = RulesetMap RDFGraph
type ClassRestrictionFn = [Maybe RDFLabel] -> Maybe [[RDFLabel]]
type RDFProof = Proof RDFGraph
type RDFProofStep = Step RDFGraph
type SwishStateIO a = StateT SwishState IO a
type NamedGraphMap = Map ScopedName [RDFGraph]
type NodeGenLookupMap = Map RDFLabel Word32
type NodeGenLookupMap = Map RDFLabel Word32
type GenericT = forall a. Data a => a -> a
type GenericQ r = forall a. Data a => a -> r
type GenericM m = forall a. Data a => a -> m a
type GenericB = forall a. Data a => a
type GenericR m = forall a. Data a => m a
type Generic c = forall a. Data a => a -> c a
type GenericT ctx = forall a. Data ctx a => a -> a
type GenericM m ctx = forall a. Data ctx a => a -> m a
type GenericQ ctx r = forall a. Data ctx a => a -> r
type ConIndex = Int
type Constructor = (Name, Int, Maybe [Name], [Type])
type SubSeq = CLongArray
type Perm = CLongArray
type GeneralizedPerm = [(Int, Int)]
type Entry = Int
type SSYT = [[Entry]]
type Pattern = Perm
type SubSeq = CLongArray
type Label a = Array Int a
type Mesh = Set Box
type Box = (Int, Int)
type Plot = Diagram Cairo R2
type SyncResult a = Either SyncError a
type Param = (Text, Text)
type Server = Text
type Device = Text
type FolderName = Text
type Path = Text
type Host = Text
type Port = Int
type Addr = (Host, Maybe Port)
type SyncResult a = Either SyncError a
type ASTF sym a = AST sym (Full a)
type AlphaEnv = [(Name, Name)]
type RunEnv = [(Name, Dynamic)]
type WS sym env a = ASTF (BindingWS :+: ReaderSym sym) (Reader env a)
type SyntaxText syn = (SyntaxChar syn, Seq syn ~ Text)
type Witness a = a
type Witness a = a
type Token = GenToken String EnumValToken String
type GramEnv = Env (Productions NF)
type PreGramEnv = Env (Productions TL)
type Line = Int
type Column = Int
type Filename = String
type Parser a = P (Str Char String LineCol) a
type ParseMsg = Message Token (Maybe Token)
type GramTrafo = Trafo Unit (Productions NF)
type PreGramTrafo = Trafo Unit (Productions TL)
type ExtGram env start nts = PreGramTrafo env () (Export start nts env)
type SyntaxMacro env start nts start' nts' = PreGramTrafo env (Export start nts env) (Export start' nts' env)
Binary file ./hoogle-data/synthesizer/0.2.0.1/doc/html/synthesizer.txt matches
type Device = String
type Device = String
type RenderedStorableSignal u t v y yv = T (Dimensional u t) (Dimensional v y) (T yv)
type StorableSignal s v y yv = T (Phantom s) (Dimensional v y) (T yv)
type StampedEvent time = (time, T)
type StrictTime = Integer
type Events = T StrictTime [T]
type Output handle signal a = (IO ((Size, SampleFreq), handle), handle -> IO (), handle -> signal -> IO a)
type T a = [a]
type T a = [a]
type Modifier s ctrl a b = Simple s ctrl a b
type ModifierInit s init ctrl a b = Initialized s init ctrl a b
type ControlDist y = (y, Control y, y)
type T = Vector
type Put a = a -> T a
type T t y sig = [PieceData t y sig]
type Coords t = (Int, (Int, (t, t)))
type Skip t = (Int, (t, T t))
type T = T LazySize
type Piece a = Piece a a (a -> T a)
type State v = (v, v)
type State = []
type Cell sig y = T (sig y)
type ControlDist y = (y, Control y, y)
type T sig a = Piece a a (LazySize -> a -> sig a)
type BlockList a = [Array Int a]
type Cell y = T (T y)
type Phase a = a
type State a = Vector (State a)
type Parameter a = Parameter a
type ParameterA a = (a, Parameter a)
type ParameterB a = Parameter a
type State v = (v, v)
type Dimensional u t = Actual (T (Recip u) t)
type DimensionGradient u v = Mul (Recip u) v
type Dimensional v y = Numeric (T v y)
type Dimensional v y yv = T (Dimensional v y) yv
type Numeric amp yv = T (Numeric amp) yv
type Flat y = T (Flat y) y
type Abstract y = T Abstract y
type R s v y yv = T (Phantom s) (Dimensional v y) (T yv)
type Single arrow amp0 amp1 yv0 yv1 = T arrow (T amp0 yv0) (T amp1 yv1)
type T = T (->)
type Single amp0 amp1 yv0 yv1 = Single (->) amp0 amp1 yv0 yv1
type T s sample0 sample1 = T (Core s) sample0 sample1
type Single s amp0 amp1 yv0 yv1 = Single (Core s) amp0 amp1 yv0 yv1
type SamplePhase t = Abstract (T t)
type T t y = T (SamplePhase t) y
type Frequency u t = Numeric (T (Recip u) t)
type SampleFrequency u t = T (Frequency u t) t
type T c t y = T (c, SamplePhase t) y
type T s u v sig q = Piece (T u q) (T v q) (T v q -> LazySize -> q -> T s u q (T (Phantom s) (Flat q) (sig q)))
type Sequence s u v sig q = T (T u q) (T v q) (T v q -> LazySize -> q -> T s u q (T (Phantom s) (Flat q) (sig q)))
type R s v y yv = T (Phantom s) (Dimensional v y) (T yv)
type ParameterStruct a = Struct (a, (a, (a, (a, (a, ())))))
type Parameter n a = Array n (ParameterStruct a)
type State = Vector D4
type Real = Float
type Instrument y yv = Instrument y (T yv)
type Bank y yv = Bank y (T yv)
type Vector = Vector VectorSize Real
type VectorSize = D4
type SampleInfo = (FilePath, [SamplePositions], Real)
type StrictTime = Integer
type LazyTime = T Integer
type Filter event = State (T StrictTime [event])
type Channel = Channel
type Controller = Controller
type Pitch = Pitch
type Velocity = Velocity
type Program = Program
type Instrument y signal = y -> y -> LazyTime -> signal
type Bank y signal = Program -> Instrument y signal
type FilterSequence event signal = Filter event (T ShortStrictTime signal)
type Instrument y yv = Instrument y (T yv)
type Bank y yv = Bank y (T yv)
type Events event = T StrictTime [event]
type Instrument y chunk = y -> y -> T GateChunk chunk
type Bank y chunk = Program -> Instrument y chunk
type GateChunk = Chunk Velocity
type T = T StrictTime
type T arrow y = arrow (T Controller Int) (T ShortStrictTime y)
type Signal s v y signal = AmpSignal s (Dimensional v y) signal
type AmpSignal s amp signal = T (Phantom s) amp signal
type LazyTime s = T (Phantom s) Abstract T
type Instrument s u v q signal = ModulatedInstrument s u q (Signal s v q signal)
type ModulatedInstrument s u q signal = q -> T (Recip u) q -> T s u q (LazyTime s -> signal)
type Bank s u q signal = Program -> ModulatedInstrument s u q signal
type Real = Double
type Real = Float
type SmbClientResult = Either () Text
type ExitCode = Number Int
type ExitCodeM f = NumberM Int f
type LogState a = State [String] a
type Field = String
type Hint = (RuleId, Action, Facts)
type Facts = [String]
type Result = (Bool, Facts)
type RuleId = String
type Action = String
type LogTree a = IntervalMap UTCTime a
type LogInterval = Interval UTCTime
type LogRequest = Maybe LogInterval
type HintEnv a = Reader HConfig a
type Matchable f = (Generic1 f, MatchG (Rep1 f))
type Action c (f :: * -> *) inh syn = Fix f -> inh -> Map c syn -> (Bool, Map c inh, syn)
type Rule c (f :: * -> *) inh syn = (Regex c f, Action c f inh syn)
type Grammar c (f :: * -> *) inh syn = [Rule c f inh syn]
type GenM f = forall ix. Sing ix -> Gen (f ix)
type Matchable f = (Generic1m f, MatchG (Rep1m f))
type Capturable c f = (Generic1m f, MatchG (Rep1m f), EqM c)
type Tree = Fix Tree'
type Rose = Fix Rose'
type List a = Fix (List_ a)
type Tree = Fix Tree_
type Expr = Fix Expr_
type Children c attrib = [Child c attrib]
type Action (c :: k -> *) (f :: (k -> *) -> k -> *) (inh :: k -> *) (syn :: k -> *) (ix :: k) = Fix f ix -> inh ix -> Children c syn -> (Bool, Children c inh, syn ix)
type Grammar (c :: k -> *) (f :: (k -> *) -> k -> *) (inh :: k -> *) (syn :: k -> *) = [Rule c f inh syn]
type IndexIndependentGrammar c f inh syn = Grammar c f (IndexIndependent inh) (IndexIndependent syn)
type FixOne = Fix Bis One
type FixTwo = Fix Bis Two
type ColName = String
type Graph = (AlgNode, [(Algebra, AlgNode)])
type GraphNode = Int
type XMLNode = Int
type Dictionary = Map GraphNode XMLNode
type XML = WriterT [Element ()] (ReaderT (Map AlgNode Algebra, Map AlgNode [String], Bool) (State (Int, Dictionary)))
type AlgPlan res = (Map Algebra AlgNode, res, Tags)
type Columns = [Column]
type SchemaInfos = [(AttrName, ATy)]
type KeyInfos = [KeyInfo]
type AlgNode = Int
type GraphM a = ReaderT (Gam a, AlgNode) (State (Int, Map Algebra AlgNode, Tags))
type Gam a = [(String, a)]
type ProjPair = (NewAttrName, OldAttrName)
type ProjInf = [ProjPair]
type TableStorage = ErrorT TableError (ReaderT TableConf IO)
type X11Property a = ReaderT X11Context IO a
type X11Window = Window
type X11Window = Window
type X11WindowHandle = ((Int, String, String), X11Window)
type Attr' s = (s, s)
type Attr = Attr' ByteString
type Token = Token' ByteString
type Token = Token' ByteString
type Attr = Attr' ByteString
type Attr' s = (s, s)
type Encoding = String
type Encoded = String
type Tagged s b = TaggedT s Identity b
type Str = ByteString
type RegexStr = Str
type Tag = Str
type Tagged a = [(a, [Tag])]
type Rules = [(Regex, [Tag])]
type AttrName = Text
type AttrValue = Text
type TagFile = ForeignPtr Void
type SetStringTag = Ptr Tag -> CString -> IO ()
type SetIntTag = Ptr Tag -> CInt -> IO ()
type GetStringTag = Ptr Tag -> IO (Ptr CChar)
type GetIntTag = Ptr Tag -> IO CInt
type GetIntAP = Ptr AudioProperties -> IO CInt
type Attr = Text
type AttrVal = Text
type POS = Text
type Optional = Bool
type Sharing tag a = State (DynMap tag) a
type Row = Int
type Column = Int
type Attribute str = (str, str)
type TagParser str = GenParser (Tag str) ()
type TagParserSt str u = GenParser (Tag str) u
type WholeTag str = (Tag str, [Tag str], Tag str)
type Attr' s = (s, s)
type Token = Token' ByteString
type Attr = Attr' ByteString
type Token = Token' Text
type Attr = Attr' Text
type MakeStyle a = State Style a
type HtmlBuilder o = Skeleton (HtmlBuilderBase o)
type HBuilder a = HtmlBuilder Style a
type HBuilderRWS a = RWS () Html Style a
type Taka = Skeleton TakahashiBase
type Taka = Skeleton TakahashiBase
type ColNum = Int
type RowNum = Int
type SqlState = (SqlStateClass, SqlStateSubClass)
type SqlStateClass = String
type SqlStateSubClass = String
type IterResult seedType = Either seedType seedType
type IterAct m seedType = seedType -> m (IterResult seedType)
type Position = Int
type VTerm c v = Term (Lit c v)
type NoEqSym = (ByteString, (Int, Privacy))
type FunSig = Set FunSym
type NoEqFunSig = Set NoEqSym
type Position = [Int]
type NTerm v = VTerm Name v
type NodeId = LVar
type LTerm c = VTerm c LVar
type LNTerm = VTerm Name LVar
type BLVar = BVar LVar
type BLTerm = NTerm BLVar
type LSubst c = Subst c LVar
type LNSubst = Subst Name LVar
type LSubstVFresh c = SubstVFresh c LVar
type LNSubstVFresh = SubstVFresh Name LVar
type MSubst = [((LSort, Integer), MTerm)]
type MTerm = Term MaudeLit
type WithMaude = Reader MaudeHandle
type WithMaude = Reader MaudeHandle
type NFact v = Fact (NTerm v)
type LFact c = Fact (LTerm c)
type LNFact = Fact LNTerm
type NAtom v = Atom (VTerm Name v)
type LNAtom = Atom LNTerm
type BLAtom = Atom BLTerm
type LNFormula = Formula (String, LSort) Name LVar
type LFormula c = Formula (String, LSort) c LVar
type RuleACConstrs = Disj LNSubstVFresh
type ProtoRuleE = Rule ProtoRuleName
type ProtoRuleAC = Rule ProtoRuleACInfo
type IntrRuleAC = Rule IntrRuleACInfo
type RuleAC = Rule (RuleInfo ProtoRuleACInfo IntrRuleACInfo)
type RuleACInst = Rule (RuleInfo ProtoRuleACInstInfo IntrRuleACInfo)
type SignaturePure = Signature MaudeSig
type SignatureWithMaude = Signature MaudeHandle
type LGuarded c = Guarded (String, LSort) c LVar
type LNGuarded = Guarded (String, LSort) Name LVar
type NodePrem = (NodeId, PremIdx)
type NodeConc = (NodeId, ConcIdx)
type Less = (NodeId, NodeId)
type Reduction = StateT System (FreshT (DisjT (Reader ProofContext)))
type AnnotatedGoal = (Goal, (Integer, Usefulness))
type CaseName = String
type Proof a = LTree CaseName (ProofStep a)
type ProofPath = [CaseName]
type IncrementalProof = Proof (Maybe System)
type OpenTheory = Theory SignaturePure [IntrRuleAC] OpenProtoRule ProofSkeleton
type ClosedTheory = Theory SignatureWithMaude ClosedRuleCache ClosedProtoRule IncrementalProof
type ProofSkeleton = Proof ()
type Parser a = Parsec String MaudeSig a
type WfErrorReport = [WfError]
type Fresh = FreshT Identity
type FreshState = Integer
type Fresh = FreshT Identity
type FreshState = Map String Integer
type Fresh = FreshT Identity
type FreshState = Integer
type Bindings = Map
type Bind k v = State (Bindings k v)
type BindT k v = StateT (Bindings k v)
type Relation a = [(a, a)]
type Named a = (String, a)
type TarEntryOffset = Word32
type PortabilityPlatform = String
type FileSize = Int64
type Permissions = FileMode
type EpochTime = Int64
type DevMajor = Int
type DevMinor = Int
type TypeCode = Char
type Tardis bw fw = TardisT bw fw Identity
type Depth = Int
type AllHave (c :: k -> Constraint) (xs :: [k]) = Constraints (Map c xs)
type Constraint = [Pred]
type Variable = (Symbol, Sort)
type Value = Text
type DataConEnv = [(Symbol, SpecType)]
type MeasureEnv = [Measure SpecType DataCon]
type Error = forall a. String -> a
type Handle = Node
type TaskInfo a = (Handle, Task a)
type TaskGraph a = Gr (Task a) Status
type Task a = IO a
type Handle = Node
type TestName = String
type Time = Double
type StatusMap = IntMap (TVar Status)
type TestName = String
type Assertion = IO ()
type AssertionPredicate = IO Bool
type TestResource a = [(String, TestGroup a)]
type TestGroup a = [TestUnit a]
type TestUnit a = [a]
type TestPath = String
type GoldenResult = GoldenResult' IO
type GoldenResultI = GoldenResult' Identity
type DirectoryConvention s = FilePath -> s -> (Action, s)
type TestFileConvention s = FilePath -> s -> (Action, s)
type TestConvention = String -> Maybe (Driver -> IO Result)
type Renderer s = Verbosity -> RenderFns s
type Parameterized = ExceptT TBError (State Parameters)
type Lattice = [Vector Double]
type Grid = Map GridIndex
type BandIndex = Int
type Filling = BandIndex
type Chern = Double
type Curvature = Double
type Wavevector = Vector Double
type KPath = [(String, Wavevector)]
type Hamiltonian = Wavevector -> Matrix (Complex Double)
type Magnetization = Double
type Moment = Vector Double
type ChemEnergy = Double
type Energy = Double
type Eigenstate = Vector (Complex Double)
type Eigenbra = Matrix (Complex Double)
type Eigenket = Matrix (Complex Double)
type AFOrder = Complex Double
type Hopping = Complex Double
type OnSite = Complex Double
type Rashba = Complex Double
type SOC = Complex Double
type Parameterizable = ExceptT TBError (State Parameters)
type Displacement = Vector Double
type CellGraph = Gr SiteData Displacement
type AdjMatrix = Gr (Matrix (Complex Double)) (Matrix (Complex Double))
type Term = String -> CellGraph -> Parameterized (Wavevector -> AdjMatrix)
type TSkipList k a = TSkipList TFile k a
type AccessTime = Integer
type ModifTime = Integer
type TPVar a = TVar (Status (Elem a))
type Key = String
type Cache = IORef (Ht, Integer)
type RefQueue a = DBRef (Queue a)
type KVConf = Map String String
type Port = Word16
type Time = Int64
type TimeWindow a = Maybe (Timed a)
type Time = Int64
type HTest = Test
type TTest = Test
type QState = State
type SingleResult = Result
type AttributesOf t node = [AttributeOf t node]
type PutM a = Writer [a] ()
type Star t node = forall children. ToChildren children t node => children -> TDoc t node
type Nullary t node = TDoc t node
type Unary t node = forall child. child `IsChildOf` node => TDoc t child -> TDoc t node
type Plus t node = forall children child. (child `IsChildOf` node, ToChildren children t node) => TDoc t child -> children -> TDoc t node
type NodeOpts = [NodeOpt]
type HtmlAttributeOf = AttributeOf HtmlTag
type HtmlAttributesOf x = AttributesOf HtmlTag x
type HtmlDoc = TDoc HtmlTag
type Time = Int
type Node = Either Factor Variable
type Edge = (Node, Node, EdgeType)
type Team = Gr Node EdgeType
type Context = Text -> Text
type ContextA f = Text -> f Text
type Uniq = Int
type CharPos = (Int, Int)  Line and character position
type ParentName = Name
type Arity = Int
type Unlifted = Bool
type InstanceDec = Dec
type FieldPat = (Name, Pat)
type FieldExp = (Name, Exp)
type Cxt = [Pred]  @(Eq a, Ord b)@
type Pred = Type
type StrictType = (Strict, Type)
type VarStrictType = (Name, Strict, Type)
type Kind = Type
type InfoQ = Q Info
type PatQ = Q Pat
type FieldPatQ = Q FieldPat
type ExpQ = Q Exp
type TExpQ a = Q (TExp a)
type DecQ = Q Dec
type DecsQ = Q [Dec]
type ConQ = Q Con
type TypeQ = Q Type
type TyLitQ = Q TyLit
type CxtQ = Q Cxt
type PredQ = Q Pred
type MatchQ = Q Match
type ClauseQ = Q Clause
type BodyQ = Q Body
type GuardQ = Q Guard
type StmtQ = Q Stmt
type RangeQ = Q Range
type StrictTypeQ = Q StrictType
type VarStrictTypeQ = Q VarStrictType
type FieldExpQ = Q FieldExp
type RuleBndrQ = Q RuleBndr
type TySynEqnQ = Q TySynEqn
type Role = Role
type Doc = PprM Doc
type Precedence = Int
type InstanceDec = Dec
type ParentName = Name
type Arity = Int
type Unlifted = Bool
type FieldExp = (Name, Exp)
type FieldPat = (Name, Pat)
type Kind = Type
type Cxt = [Pred]  @(Eq a, Ord b)@
type Pred = Type
type InfoQ = Q Info
type ExpQ = Q Exp
type DecQ = Q Dec
type DecsQ = Q [Dec]
type ConQ = Q Con
type TypeQ = Q Type
type TyLitQ = Q TyLit
type CxtQ = Q Cxt
type PredQ = Q Pred
type MatchQ = Q Match
type ClauseQ = Q Clause
type BodyQ = Q Body
type GuardQ = Q Guard
type StmtQ = Q Stmt
type RangeQ = Q Range
type StrictTypeQ = Q StrictType
type VarStrictTypeQ = Q VarStrictType
type PatQ = Q Pat
type FieldPatQ = Q FieldPat
type RuleBndrQ = Q RuleBndr
type TySynEqnQ = Q TySynEqn
type Context = Text -> Maybe Text
type CsdNote a = (D, D, a)
type CsdDrum a = (D, a)
type N = CsdNote Unit
type Dr = CsdDrum Unit
type Level = Int
type Accent = Double
type Hz = Double
type Interval = Double
type Bend = Double
type Octave = Int
type Step = Int
type Dur = Double
type Score a = Track Double a
type MidiNote = Note MidiId
type Instr = Int
type FilePath = String
type Tempo = Double
type C0 = Zero
type C1 = Succ C0
type C2 = Succ C1
type C3 = Succ C2
type C4 = Succ C3
type C5 = Succ C4
type C6 = Succ C5
type C7 = Succ C6
type C8 = Succ C7
type C9 = Succ C8
type C10 = Succ C9
type Two = Succ One
type Three = Succ Two
type Four = Succ Three
type Five = Succ Four
type Six = Succ Five
type Seven = Succ Six
type Eight = Succ Seven
type Nine = Succ Eight
type Ten = Succ Nine
type MatrixProductSpace t1 t2 = ProdSpace (Succ Zero) t1 t2
type (:⊗:) t1 t2 = ProdSpace C0 t1 t2
type Vector i = Tensor (i :|: Nil)
type Matrix i j = Tensor (i :|: (j :|: Nil))
type Vector n = Tensor (n :|: Nil)
type Matrix m n = Tensor (m :|: (n :|: Nil))
type ColumnVector n = Matrix n One
type RowVector n = Matrix One n
type Pos = [Int]
type Subst f v = GSubst v f v
type Subst f v = GSubst v f v
type Strategy f v v' = Term f v -> [Reduct f v v']
type Label = ℤ -> ℤ -> String
type LinesAffected = Int
Binary file ./hoogle-data/terrahs/0.7/doc/html/terrahs.txt matches
type TestOptions = TestOptions' Maybe
type CompleteTestOptions = TestOptions' K
type RunnerOptions = RunnerOptions' Maybe
type CompleteRunnerOptions = RunnerOptions' K
type TestName = String
type TestTypeName = String
type SuppliedRunnerOptions = Maybe RunnerOptions
type TestName = String
type TestTypeName = String
type Checker = Maybe (String -> Bool)
type DocTests = IO Test
type ExceptT' = ExceptT
type Port = Int
type SandboxStateRef = IORef SandboxState
type Expectation = Assertion
type Selector a = a -> Bool
type VizGraph a = Gr (Maybe a, Maybe TGDocuInfo) ()
type Index = Integer
type Constructor = Enumerate
type ConstructorDeriv = (Name, [(Name, ExpQ)])
type Override = DynMap Tag
type Report a = a -> IO ()
type Report a = a -> IO ()
type ArrayLine = [[Exp]]
type Property = String
type Env = [String]
type InEDelimited = Either Middle Exp
type IReader t a = t -> Either String (a, t)
type OnError a b = String -> Maybe a -> Maybe b
type OnDecodeError = OnError Word8 Char
type OnEncodeError = OnError Char Word8
type Reader a = IReader Text a
type Reader a = IReader Text a
type Ascii α = Checked IsAscii α
type Latin1 α = Checked IsLatin1 α
type Attribute = (AttrType, AttrValue)
type DN = List1 Component
type List1 = NonEmpty
type DN' = [Component']
type Component' = [Attribute]
type Bound a = (a, a)
type LdapParser = LdapParser
type LdapPrinter a = a -> LdapPutM ()
type LdapPutM = Writer (DList ByteString)
type Advance s = RE s (Position -> Position)
type PosRE s a = RE (Positioned s) (Positioned a)
type Program = Vector Instruction
type Label = Int
type LProgram = Vector LInstruction
type TextPlot = [[Char]]
type LText = Text
type SText = Text
type U0 = Zero
type U1 = Succ U0
type U2 = Succ U1
type U3 = Succ U2
type U4 = Succ U3
type U5 = Succ U4
type U6 = Succ U5
type U7 = Succ U6
type U8 = Succ U7
type U9 = Succ U8
type U10 = Succ U9
type U11 = Succ U10
type U12 = Succ U11
type U13 = Succ U12
type U14 = Succ U13
type U15 = Succ U14
type U16 = Succ U15
type U17 = Succ U16
type U18 = Succ U17
type U19 = Succ U18
type U20 = Succ U19
type U21 = Succ U20
type U22 = Succ U21
type U23 = Succ U22
type U24 = Succ U23
type U25 = Succ U24
type U26 = Succ U25
type U27 = Succ U26
type U28 = Succ U27
type U29 = Succ U28
type U30 = Succ U29
type U31 = Succ U30
type U32 = Succ U31
type U33 = Succ U32
type U34 = Succ U33
type U35 = Succ U34
type U36 = Succ U35
type U37 = Succ U36
type U38 = Succ U37
type U39 = Succ U38
type U40 = Succ U39
type U41 = Succ U40
type U42 = Succ U41
type U43 = Succ U42
type U44 = Succ U43
type U45 = Succ U44
type U46 = Succ U45
type U47 = Succ U46
type U48 = Succ U47
type U49 = Succ U48
type U50 = Succ U49
type U51 = Succ U50
type U52 = Succ U51
type U53 = Succ U52
type U54 = Succ U53
type U55 = Succ U54
type U56 = Succ U55
type U57 = Succ U56
type U58 = Succ U57
type U59 = Succ U58
type U60 = Succ U59
type U61 = Succ U60
type U62 = Succ U61
type U63 = Succ U62
type U64 = Succ U63
type (:-:) x y = x :+: Negate y
type UnaryAcc m x = ToUnary x :+: (m :*: U10)
type Pos1 p0 = Pos p0 (EndDesc)
type Pos2 p1 p0 = Pos p1 (p0 :> EndDesc)
type Pos3 p2 p1 p0 = Pos p2 (p1 :> (p0 :> EndDesc))
type Pos4 p3 p2 p1 p0 = Pos p3 (p2 :> (p1 :> (p0 :> EndDesc)))
type Pos5 p4 p3 p2 p1 p0 = Pos p4 (p3 :> (p2 :> (p1 :> (p0 :> EndDesc))))
type Pos6 p5 p4 p3 p2 p1 p0 = Pos p5 (p4 :> (p3 :> (p2 :> (p1 :> (p0 :> EndDesc)))))
type Pos7 p6 p5 p4 p3 p2 p1 p0 = Pos p6 (p5 :> (p4 :> (p3 :> (p2 :> (p1 :> (p0 :> EndDesc))))))
type Neg1 p0 = Neg p0 (EndDesc)
type Neg2 p1 p0 = Neg p1 (p0 :> EndDesc)
type Neg3 p2 p1 p0 = Neg p2 (p1 :> (p0 :> EndDesc))
type Neg4 p3 p2 p1 p0 = Neg p3 (p2 :> (p1 :> (p0 :> EndDesc)))
type Neg5 p4 p3 p2 p1 p0 = Neg p4 (p3 :> (p2 :> (p1 :> (p0 :> EndDesc))))
type Neg6 p5 p4 p3 p2 p1 p0 = Neg p5 (p4 :> (p3 :> (p2 :> (p1 :> (p0 :> EndDesc)))))
type Neg7 p6 p5 p4 p3 p2 p1 p0 = Neg p6 (p5 :> (p4 :> (p3 :> (p2 :> (p1 :> (p0 :> EndDesc))))))
type D0 = Zero
type D1 = Pos1 Dec1
type D2 = Pos1 Dec2
type D3 = Pos1 Dec3
type D4 = Pos1 Dec4
type D5 = Pos1 Dec5
type D6 = Pos1 Dec6
type D7 = Pos1 Dec7
type D8 = Pos1 Dec8
type D9 = Pos1 Dec9
type D10 = Pos2 Dec1 Dec0
type D11 = Pos2 Dec1 Dec1
type D12 = Pos2 Dec1 Dec2
type D13 = Pos2 Dec1 Dec3
type D14 = Pos2 Dec1 Dec4
type D15 = Pos2 Dec1 Dec5
type D16 = Pos2 Dec1 Dec6
type D17 = Pos2 Dec1 Dec7
type D18 = Pos2 Dec1 Dec8
type D19 = Pos2 Dec1 Dec9
type D20 = Pos2 Dec2 Dec0
type D21 = Pos2 Dec2 Dec1
type D22 = Pos2 Dec2 Dec2
type D23 = Pos2 Dec2 Dec3
type D24 = Pos2 Dec2 Dec4
type D25 = Pos2 Dec2 Dec5
type D26 = Pos2 Dec2 Dec6
type D27 = Pos2 Dec2 Dec7
type D28 = Pos2 Dec2 Dec8
type D29 = Pos2 Dec2 Dec9
type D30 = Pos2 Dec3 Dec0
type D31 = Pos2 Dec3 Dec1
type D32 = Pos2 Dec3 Dec2
type D33 = Pos2 Dec3 Dec3
type D34 = Pos2 Dec3 Dec4
type D35 = Pos2 Dec3 Dec5
type D36 = Pos2 Dec3 Dec6
type D37 = Pos2 Dec3 Dec7
type D38 = Pos2 Dec3 Dec8
type D39 = Pos2 Dec3 Dec9
type D40 = Pos2 Dec4 Dec0
type D41 = Pos2 Dec4 Dec1
type D42 = Pos2 Dec4 Dec2
type D43 = Pos2 Dec4 Dec3
type D44 = Pos2 Dec4 Dec4
type D45 = Pos2 Dec4 Dec5
type D46 = Pos2 Dec4 Dec6
type D47 = Pos2 Dec4 Dec7
type D48 = Pos2 Dec4 Dec8
type D49 = Pos2 Dec4 Dec9
type D50 = Pos2 Dec5 Dec0
type D51 = Pos2 Dec5 Dec1
type D52 = Pos2 Dec5 Dec2
type D53 = Pos2 Dec5 Dec3
type D54 = Pos2 Dec5 Dec4
type D55 = Pos2 Dec5 Dec5
type D56 = Pos2 Dec5 Dec6
type D57 = Pos2 Dec5 Dec7
type D58 = Pos2 Dec5 Dec8
type D59 = Pos2 Dec5 Dec9
type D60 = Pos2 Dec6 Dec0
type D61 = Pos2 Dec6 Dec1
type D62 = Pos2 Dec6 Dec2
type D63 = Pos2 Dec6 Dec3
type D64 = Pos2 Dec6 Dec4
type D65 = Pos2 Dec6 Dec5
type D66 = Pos2 Dec6 Dec6
type D67 = Pos2 Dec6 Dec7
type D68 = Pos2 Dec6 Dec8
type D69 = Pos2 Dec6 Dec9
type D70 = Pos2 Dec7 Dec0
type D71 = Pos2 Dec7 Dec1
type D72 = Pos2 Dec7 Dec2
type D73 = Pos2 Dec7 Dec3
type D74 = Pos2 Dec7 Dec4
type D75 = Pos2 Dec7 Dec5
type D76 = Pos2 Dec7 Dec6
type D77 = Pos2 Dec7 Dec7
type D78 = Pos2 Dec7 Dec8
type D79 = Pos2 Dec7 Dec9
type D80 = Pos2 Dec8 Dec0
type D81 = Pos2 Dec8 Dec1
type D82 = Pos2 Dec8 Dec2
type D83 = Pos2 Dec8 Dec3
type D84 = Pos2 Dec8 Dec4
type D85 = Pos2 Dec8 Dec5
type D86 = Pos2 Dec8 Dec6
type D87 = Pos2 Dec8 Dec7
type D88 = Pos2 Dec8 Dec8
type D89 = Pos2 Dec8 Dec9
type D90 = Pos2 Dec9 Dec0
type D91 = Pos2 Dec9 Dec1
type D92 = Pos2 Dec9 Dec2
type D93 = Pos2 Dec9 Dec3
type D94 = Pos2 Dec9 Dec4
type D95 = Pos2 Dec9 Dec5
type D96 = Pos2 Dec9 Dec6
type D97 = Pos2 Dec9 Dec7
type D98 = Pos2 Dec9 Dec8
type D99 = Pos2 Dec9 Dec9
type D100 = Pos3 Dec1 Dec0 Dec0
type D101 = Pos3 Dec1 Dec0 Dec1
type D102 = Pos3 Dec1 Dec0 Dec2
type D103 = Pos3 Dec1 Dec0 Dec3
type D104 = Pos3 Dec1 Dec0 Dec4
type D105 = Pos3 Dec1 Dec0 Dec5
type D106 = Pos3 Dec1 Dec0 Dec6
type D107 = Pos3 Dec1 Dec0 Dec7
type D108 = Pos3 Dec1 Dec0 Dec8
type D109 = Pos3 Dec1 Dec0 Dec9
type D110 = Pos3 Dec1 Dec1 Dec0
type D111 = Pos3 Dec1 Dec1 Dec1
type D112 = Pos3 Dec1 Dec1 Dec2
type D113 = Pos3 Dec1 Dec1 Dec3
type D114 = Pos3 Dec1 Dec1 Dec4
type D115 = Pos3 Dec1 Dec1 Dec5
type D116 = Pos3 Dec1 Dec1 Dec6
type D117 = Pos3 Dec1 Dec1 Dec7
type D118 = Pos3 Dec1 Dec1 Dec8
type D119 = Pos3 Dec1 Dec1 Dec9
type D120 = Pos3 Dec1 Dec2 Dec0
type D121 = Pos3 Dec1 Dec2 Dec1
type D122 = Pos3 Dec1 Dec2 Dec2
type D123 = Pos3 Dec1 Dec2 Dec3
type D124 = Pos3 Dec1 Dec2 Dec4
type D125 = Pos3 Dec1 Dec2 Dec5
type D126 = Pos3 Dec1 Dec2 Dec6
type D127 = Pos3 Dec1 Dec2 Dec7
type D128 = Pos3 Dec1 Dec2 Dec8
type D129 = Pos3 Dec1 Dec2 Dec9
type D130 = Pos3 Dec1 Dec3 Dec0
type D131 = Pos3 Dec1 Dec3 Dec1
type D132 = Pos3 Dec1 Dec3 Dec2
type D133 = Pos3 Dec1 Dec3 Dec3
type D134 = Pos3 Dec1 Dec3 Dec4
type D135 = Pos3 Dec1 Dec3 Dec5
type D136 = Pos3 Dec1 Dec3 Dec6
type D137 = Pos3 Dec1 Dec3 Dec7
type D138 = Pos3 Dec1 Dec3 Dec8
type D139 = Pos3 Dec1 Dec3 Dec9
type D140 = Pos3 Dec1 Dec4 Dec0
type D141 = Pos3 Dec1 Dec4 Dec1
type D142 = Pos3 Dec1 Dec4 Dec2
type D143 = Pos3 Dec1 Dec4 Dec3
type D144 = Pos3 Dec1 Dec4 Dec4
type D145 = Pos3 Dec1 Dec4 Dec5
type D146 = Pos3 Dec1 Dec4 Dec6
type D147 = Pos3 Dec1 Dec4 Dec7
type D148 = Pos3 Dec1 Dec4 Dec8
type D149 = Pos3 Dec1 Dec4 Dec9
type D150 = Pos3 Dec1 Dec5 Dec0
type D151 = Pos3 Dec1 Dec5 Dec1
type D152 = Pos3 Dec1 Dec5 Dec2
type D153 = Pos3 Dec1 Dec5 Dec3
type D154 = Pos3 Dec1 Dec5 Dec4
type D155 = Pos3 Dec1 Dec5 Dec5
type D156 = Pos3 Dec1 Dec5 Dec6
type D157 = Pos3 Dec1 Dec5 Dec7
type D158 = Pos3 Dec1 Dec5 Dec8
type D159 = Pos3 Dec1 Dec5 Dec9
type D160 = Pos3 Dec1 Dec6 Dec0
type D161 = Pos3 Dec1 Dec6 Dec1
type D162 = Pos3 Dec1 Dec6 Dec2
type D163 = Pos3 Dec1 Dec6 Dec3
type D164 = Pos3 Dec1 Dec6 Dec4
type D165 = Pos3 Dec1 Dec6 Dec5
type D166 = Pos3 Dec1 Dec6 Dec6
type D167 = Pos3 Dec1 Dec6 Dec7
type D168 = Pos3 Dec1 Dec6 Dec8
type D169 = Pos3 Dec1 Dec6 Dec9
type D170 = Pos3 Dec1 Dec7 Dec0
type D171 = Pos3 Dec1 Dec7 Dec1
type D172 = Pos3 Dec1 Dec7 Dec2
type D173 = Pos3 Dec1 Dec7 Dec3
type D174 = Pos3 Dec1 Dec7 Dec4
type D175 = Pos3 Dec1 Dec7 Dec5
type D176 = Pos3 Dec1 Dec7 Dec6
type D177 = Pos3 Dec1 Dec7 Dec7
type D178 = Pos3 Dec1 Dec7 Dec8
type D179 = Pos3 Dec1 Dec7 Dec9
type D180 = Pos3 Dec1 Dec8 Dec0
type D181 = Pos3 Dec1 Dec8 Dec1
type D182 = Pos3 Dec1 Dec8 Dec2
type D183 = Pos3 Dec1 Dec8 Dec3
type D184 = Pos3 Dec1 Dec8 Dec4
type D185 = Pos3 Dec1 Dec8 Dec5
type D186 = Pos3 Dec1 Dec8 Dec6
type D187 = Pos3 Dec1 Dec8 Dec7
type D188 = Pos3 Dec1 Dec8 Dec8
type D189 = Pos3 Dec1 Dec8 Dec9
type D190 = Pos3 Dec1 Dec9 Dec0
type D191 = Pos3 Dec1 Dec9 Dec1
type D192 = Pos3 Dec1 Dec9 Dec2
type D193 = Pos3 Dec1 Dec9 Dec3
type D194 = Pos3 Dec1 Dec9 Dec4
type D195 = Pos3 Dec1 Dec9 Dec5
type D196 = Pos3 Dec1 Dec9 Dec6
type D197 = Pos3 Dec1 Dec9 Dec7
type D198 = Pos3 Dec1 Dec9 Dec8
type D199 = Pos3 Dec1 Dec9 Dec9
type D200 = Pos3 Dec2 Dec0 Dec0
type D201 = Pos3 Dec2 Dec0 Dec1
type D202 = Pos3 Dec2 Dec0 Dec2
type D203 = Pos3 Dec2 Dec0 Dec3
type D204 = Pos3 Dec2 Dec0 Dec4
type D205 = Pos3 Dec2 Dec0 Dec5
type D206 = Pos3 Dec2 Dec0 Dec6
type D207 = Pos3 Dec2 Dec0 Dec7
type D208 = Pos3 Dec2 Dec0 Dec8
type D209 = Pos3 Dec2 Dec0 Dec9
type D210 = Pos3 Dec2 Dec1 Dec0
type D211 = Pos3 Dec2 Dec1 Dec1
type D212 = Pos3 Dec2 Dec1 Dec2
type D213 = Pos3 Dec2 Dec1 Dec3
type D214 = Pos3 Dec2 Dec1 Dec4
type D215 = Pos3 Dec2 Dec1 Dec5
type D216 = Pos3 Dec2 Dec1 Dec6
type D217 = Pos3 Dec2 Dec1 Dec7
type D218 = Pos3 Dec2 Dec1 Dec8
type D219 = Pos3 Dec2 Dec1 Dec9
type D220 = Pos3 Dec2 Dec2 Dec0
type D221 = Pos3 Dec2 Dec2 Dec1
type D222 = Pos3 Dec2 Dec2 Dec2
type D223 = Pos3 Dec2 Dec2 Dec3
type D224 = Pos3 Dec2 Dec2 Dec4
type D225 = Pos3 Dec2 Dec2 Dec5
type D226 = Pos3 Dec2 Dec2 Dec6
type D227 = Pos3 Dec2 Dec2 Dec7
type D228 = Pos3 Dec2 Dec2 Dec8
type D229 = Pos3 Dec2 Dec2 Dec9
type D230 = Pos3 Dec2 Dec3 Dec0
type D231 = Pos3 Dec2 Dec3 Dec1
type D232 = Pos3 Dec2 Dec3 Dec2
type D233 = Pos3 Dec2 Dec3 Dec3
type D234 = Pos3 Dec2 Dec3 Dec4
type D235 = Pos3 Dec2 Dec3 Dec5
type D236 = Pos3 Dec2 Dec3 Dec6
type D237 = Pos3 Dec2 Dec3 Dec7
type D238 = Pos3 Dec2 Dec3 Dec8
type D239 = Pos3 Dec2 Dec3 Dec9
type D240 = Pos3 Dec2 Dec4 Dec0
type D241 = Pos3 Dec2 Dec4 Dec1
type D242 = Pos3 Dec2 Dec4 Dec2
type D243 = Pos3 Dec2 Dec4 Dec3
type D244 = Pos3 Dec2 Dec4 Dec4
type D245 = Pos3 Dec2 Dec4 Dec5
type D246 = Pos3 Dec2 Dec4 Dec6
type D247 = Pos3 Dec2 Dec4 Dec7
type D248 = Pos3 Dec2 Dec4 Dec8
type D249 = Pos3 Dec2 Dec4 Dec9
type D250 = Pos3 Dec2 Dec5 Dec0
type D251 = Pos3 Dec2 Dec5 Dec1
type D252 = Pos3 Dec2 Dec5 Dec2
type D253 = Pos3 Dec2 Dec5 Dec3
type D254 = Pos3 Dec2 Dec5 Dec4
type D255 = Pos3 Dec2 Dec5 Dec5
type D256 = Pos3 Dec2 Dec5 Dec6
type DN1 = Neg1 Dec1
type DN2 = Neg1 Dec2
type DN3 = Neg1 Dec3
type DN4 = Neg1 Dec4
type DN5 = Neg1 Dec5
type DN6 = Neg1 Dec6
type DN7 = Neg1 Dec7
type DN8 = Neg1 Dec8
type DN9 = Neg1 Dec9
type DN10 = Neg2 Dec1 Dec0
type DN11 = Neg2 Dec1 Dec1
type DN12 = Neg2 Dec1 Dec2
type DN13 = Neg2 Dec1 Dec3
type DN14 = Neg2 Dec1 Dec4
type DN15 = Neg2 Dec1 Dec5
type DN16 = Neg2 Dec1 Dec6
type DN17 = Neg2 Dec1 Dec7
type DN18 = Neg2 Dec1 Dec8
type DN19 = Neg2 Dec1 Dec9
type DN20 = Neg2 Dec2 Dec0
type DN21 = Neg2 Dec2 Dec1
type DN22 = Neg2 Dec2 Dec2
type DN23 = Neg2 Dec2 Dec3
type DN24 = Neg2 Dec2 Dec4
type DN25 = Neg2 Dec2 Dec5
type DN26 = Neg2 Dec2 Dec6
type DN27 = Neg2 Dec2 Dec7
type DN28 = Neg2 Dec2 Dec8
type DN29 = Neg2 Dec2 Dec9
type DN30 = Neg2 Dec3 Dec0
type DN31 = Neg2 Dec3 Dec1
type DN32 = Neg2 Dec3 Dec2
type DN33 = Neg2 Dec3 Dec3
type DN34 = Neg2 Dec3 Dec4
type DN35 = Neg2 Dec3 Dec5
type DN36 = Neg2 Dec3 Dec6
type DN37 = Neg2 Dec3 Dec7
type DN38 = Neg2 Dec3 Dec8
type DN39 = Neg2 Dec3 Dec9
type DN40 = Neg2 Dec4 Dec0
type DN41 = Neg2 Dec4 Dec1
type DN42 = Neg2 Dec4 Dec2
type DN43 = Neg2 Dec4 Dec3
type DN44 = Neg2 Dec4 Dec4
type DN45 = Neg2 Dec4 Dec5
type DN46 = Neg2 Dec4 Dec6
type DN47 = Neg2 Dec4 Dec7
type DN48 = Neg2 Dec4 Dec8
type DN49 = Neg2 Dec4 Dec9
type DN50 = Neg2 Dec5 Dec0
type DN51 = Neg2 Dec5 Dec1
type DN52 = Neg2 Dec5 Dec2
type DN53 = Neg2 Dec5 Dec3
type DN54 = Neg2 Dec5 Dec4
type DN55 = Neg2 Dec5 Dec5
type DN56 = Neg2 Dec5 Dec6
type DN57 = Neg2 Dec5 Dec7
type DN58 = Neg2 Dec5 Dec8
type DN59 = Neg2 Dec5 Dec9
type DN60 = Neg2 Dec6 Dec0
type DN61 = Neg2 Dec6 Dec1
type DN62 = Neg2 Dec6 Dec2
type DN63 = Neg2 Dec6 Dec3
type DN64 = Neg2 Dec6 Dec4
type DN65 = Neg2 Dec6 Dec5
type DN66 = Neg2 Dec6 Dec6
type DN67 = Neg2 Dec6 Dec7
type DN68 = Neg2 Dec6 Dec8
type DN69 = Neg2 Dec6 Dec9
type DN70 = Neg2 Dec7 Dec0
type DN71 = Neg2 Dec7 Dec1
type DN72 = Neg2 Dec7 Dec2
type DN73 = Neg2 Dec7 Dec3
type DN74 = Neg2 Dec7 Dec4
type DN75 = Neg2 Dec7 Dec5
type DN76 = Neg2 Dec7 Dec6
type DN77 = Neg2 Dec7 Dec7
type DN78 = Neg2 Dec7 Dec8
type DN79 = Neg2 Dec7 Dec9
type DN80 = Neg2 Dec8 Dec0
type DN81 = Neg2 Dec8 Dec1
type DN82 = Neg2 Dec8 Dec2
type DN83 = Neg2 Dec8 Dec3
type DN84 = Neg2 Dec8 Dec4
type DN85 = Neg2 Dec8 Dec5
type DN86 = Neg2 Dec8 Dec6
type DN87 = Neg2 Dec8 Dec7
type DN88 = Neg2 Dec8 Dec8
type DN89 = Neg2 Dec8 Dec9
type DN90 = Neg2 Dec9 Dec0
type DN91 = Neg2 Dec9 Dec1
type DN92 = Neg2 Dec9 Dec2
type DN93 = Neg2 Dec9 Dec3
type DN94 = Neg2 Dec9 Dec4
type DN95 = Neg2 Dec9 Dec5
type DN96 = Neg2 Dec9 Dec6
type DN97 = Neg2 Dec9 Dec7
type DN98 = Neg2 Dec9 Dec8
type DN99 = Neg2 Dec9 Dec9
type DN100 = Neg3 Dec1 Dec0 Dec0
type DN101 = Neg3 Dec1 Dec0 Dec1
type DN102 = Neg3 Dec1 Dec0 Dec2
type DN103 = Neg3 Dec1 Dec0 Dec3
type DN104 = Neg3 Dec1 Dec0 Dec4
type DN105 = Neg3 Dec1 Dec0 Dec5
type DN106 = Neg3 Dec1 Dec0 Dec6
type DN107 = Neg3 Dec1 Dec0 Dec7
type DN108 = Neg3 Dec1 Dec0 Dec8
type DN109 = Neg3 Dec1 Dec0 Dec9
type DN110 = Neg3 Dec1 Dec1 Dec0
type DN111 = Neg3 Dec1 Dec1 Dec1
type DN112 = Neg3 Dec1 Dec1 Dec2
type DN113 = Neg3 Dec1 Dec1 Dec3
type DN114 = Neg3 Dec1 Dec1 Dec4
type DN115 = Neg3 Dec1 Dec1 Dec5
type DN116 = Neg3 Dec1 Dec1 Dec6
type DN117 = Neg3 Dec1 Dec1 Dec7
type DN118 = Neg3 Dec1 Dec1 Dec8
type DN119 = Neg3 Dec1 Dec1 Dec9
type DN120 = Neg3 Dec1 Dec2 Dec0
type DN121 = Neg3 Dec1 Dec2 Dec1
type DN122 = Neg3 Dec1 Dec2 Dec2
type DN123 = Neg3 Dec1 Dec2 Dec3
type DN124 = Neg3 Dec1 Dec2 Dec4
type DN125 = Neg3 Dec1 Dec2 Dec5
type DN126 = Neg3 Dec1 Dec2 Dec6
type DN127 = Neg3 Dec1 Dec2 Dec7
type DN128 = Neg3 Dec1 Dec2 Dec8
type DN129 = Neg3 Dec1 Dec2 Dec9
type DN130 = Neg3 Dec1 Dec3 Dec0
type DN131 = Neg3 Dec1 Dec3 Dec1
type DN132 = Neg3 Dec1 Dec3 Dec2
type DN133 = Neg3 Dec1 Dec3 Dec3
type DN134 = Neg3 Dec1 Dec3 Dec4
type DN135 = Neg3 Dec1 Dec3 Dec5
type DN136 = Neg3 Dec1 Dec3 Dec6
type DN137 = Neg3 Dec1 Dec3 Dec7
type DN138 = Neg3 Dec1 Dec3 Dec8
type DN139 = Neg3 Dec1 Dec3 Dec9
type DN140 = Neg3 Dec1 Dec4 Dec0
type DN141 = Neg3 Dec1 Dec4 Dec1
type DN142 = Neg3 Dec1 Dec4 Dec2
type DN143 = Neg3 Dec1 Dec4 Dec3
type DN144 = Neg3 Dec1 Dec4 Dec4
type DN145 = Neg3 Dec1 Dec4 Dec5
type DN146 = Neg3 Dec1 Dec4 Dec6
type DN147 = Neg3 Dec1 Dec4 Dec7
type DN148 = Neg3 Dec1 Dec4 Dec8
type DN149 = Neg3 Dec1 Dec4 Dec9
type DN150 = Neg3 Dec1 Dec5 Dec0
type DN151 = Neg3 Dec1 Dec5 Dec1
type DN152 = Neg3 Dec1 Dec5 Dec2
type DN153 = Neg3 Dec1 Dec5 Dec3
type DN154 = Neg3 Dec1 Dec5 Dec4
type DN155 = Neg3 Dec1 Dec5 Dec5
type DN156 = Neg3 Dec1 Dec5 Dec6
type DN157 = Neg3 Dec1 Dec5 Dec7
type DN158 = Neg3 Dec1 Dec5 Dec8
type DN159 = Neg3 Dec1 Dec5 Dec9
type DN160 = Neg3 Dec1 Dec6 Dec0
type DN161 = Neg3 Dec1 Dec6 Dec1
type DN162 = Neg3 Dec1 Dec6 Dec2
type DN163 = Neg3 Dec1 Dec6 Dec3
type DN164 = Neg3 Dec1 Dec6 Dec4
type DN165 = Neg3 Dec1 Dec6 Dec5
type DN166 = Neg3 Dec1 Dec6 Dec6
type DN167 = Neg3 Dec1 Dec6 Dec7
type DN168 = Neg3 Dec1 Dec6 Dec8
type DN169 = Neg3 Dec1 Dec6 Dec9
type DN170 = Neg3 Dec1 Dec7 Dec0
type DN171 = Neg3 Dec1 Dec7 Dec1
type DN172 = Neg3 Dec1 Dec7 Dec2
type DN173 = Neg3 Dec1 Dec7 Dec3
type DN174 = Neg3 Dec1 Dec7 Dec4
type DN175 = Neg3 Dec1 Dec7 Dec5
type DN176 = Neg3 Dec1 Dec7 Dec6
type DN177 = Neg3 Dec1 Dec7 Dec7
type DN178 = Neg3 Dec1 Dec7 Dec8
type DN179 = Neg3 Dec1 Dec7 Dec9
type DN180 = Neg3 Dec1 Dec8 Dec0
type DN181 = Neg3 Dec1 Dec8 Dec1
type DN182 = Neg3 Dec1 Dec8 Dec2
type DN183 = Neg3 Dec1 Dec8 Dec3
type DN184 = Neg3 Dec1 Dec8 Dec4
type DN185 = Neg3 Dec1 Dec8 Dec5
type DN186 = Neg3 Dec1 Dec8 Dec6
type DN187 = Neg3 Dec1 Dec8 Dec7
type DN188 = Neg3 Dec1 Dec8 Dec8
type DN189 = Neg3 Dec1 Dec8 Dec9
type DN190 = Neg3 Dec1 Dec9 Dec0
type DN191 = Neg3 Dec1 Dec9 Dec1
type DN192 = Neg3 Dec1 Dec9 Dec2
type DN193 = Neg3 Dec1 Dec9 Dec3
type DN194 = Neg3 Dec1 Dec9 Dec4
type DN195 = Neg3 Dec1 Dec9 Dec5
type DN196 = Neg3 Dec1 Dec9 Dec6
type DN197 = Neg3 Dec1 Dec9 Dec7
type DN198 = Neg3 Dec1 Dec9 Dec8
type DN199 = Neg3 Dec1 Dec9 Dec9
type DN200 = Neg3 Dec2 Dec0 Dec0
type DN201 = Neg3 Dec2 Dec0 Dec1
type DN202 = Neg3 Dec2 Dec0 Dec2
type DN203 = Neg3 Dec2 Dec0 Dec3
type DN204 = Neg3 Dec2 Dec0 Dec4
type DN205 = Neg3 Dec2 Dec0 Dec5
type DN206 = Neg3 Dec2 Dec0 Dec6
type DN207 = Neg3 Dec2 Dec0 Dec7
type DN208 = Neg3 Dec2 Dec0 Dec8
type DN209 = Neg3 Dec2 Dec0 Dec9
type DN210 = Neg3 Dec2 Dec1 Dec0
type DN211 = Neg3 Dec2 Dec1 Dec1
type DN212 = Neg3 Dec2 Dec1 Dec2
type DN213 = Neg3 Dec2 Dec1 Dec3
type DN214 = Neg3 Dec2 Dec1 Dec4
type DN215 = Neg3 Dec2 Dec1 Dec5
type DN216 = Neg3 Dec2 Dec1 Dec6
type DN217 = Neg3 Dec2 Dec1 Dec7
type DN218 = Neg3 Dec2 Dec1 Dec8
type DN219 = Neg3 Dec2 Dec1 Dec9
type DN220 = Neg3 Dec2 Dec2 Dec0
type DN221 = Neg3 Dec2 Dec2 Dec1
type DN222 = Neg3 Dec2 Dec2 Dec2
type DN223 = Neg3 Dec2 Dec2 Dec3
type DN224 = Neg3 Dec2 Dec2 Dec4
type DN225 = Neg3 Dec2 Dec2 Dec5
type DN226 = Neg3 Dec2 Dec2 Dec6
type DN227 = Neg3 Dec2 Dec2 Dec7
type DN228 = Neg3 Dec2 Dec2 Dec8
type DN229 = Neg3 Dec2 Dec2 Dec9
type DN230 = Neg3 Dec2 Dec3 Dec0
type DN231 = Neg3 Dec2 Dec3 Dec1
type DN232 = Neg3 Dec2 Dec3 Dec2
type DN233 = Neg3 Dec2 Dec3 Dec3
type DN234 = Neg3 Dec2 Dec3 Dec4
type DN235 = Neg3 Dec2 Dec3 Dec5
type DN236 = Neg3 Dec2 Dec3 Dec6
type DN237 = Neg3 Dec2 Dec3 Dec7
type DN238 = Neg3 Dec2 Dec3 Dec8
type DN239 = Neg3 Dec2 Dec3 Dec9
type DN240 = Neg3 Dec2 Dec4 Dec0
type DN241 = Neg3 Dec2 Dec4 Dec1
type DN242 = Neg3 Dec2 Dec4 Dec2
type DN243 = Neg3 Dec2 Dec4 Dec3
type DN244 = Neg3 Dec2 Dec4 Dec4
type DN245 = Neg3 Dec2 Dec4 Dec5
type DN246 = Neg3 Dec2 Dec4 Dec6
type DN247 = Neg3 Dec2 Dec4 Dec7
type DN248 = Neg3 Dec2 Dec4 Dec8
type DN249 = Neg3 Dec2 Dec4 Dec9
type DN250 = Neg3 Dec2 Dec5 Dec0
type DN251 = Neg3 Dec2 Dec5 Dec1
type DN252 = Neg3 Dec2 Dec5 Dec2
type DN253 = Neg3 Dec2 Dec5 Dec3
type DN254 = Neg3 Dec2 Dec5 Dec4
type DN255 = Neg3 Dec2 Dec5 Dec5
type DN256 = Neg3 Dec2 Dec5 Dec6
type DN10000 = Dec (Neg' (:. (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec0) Dec0))
type DN9999 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec9))
type DN9998 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec8))
type DN9997 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec7))
type DN9996 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec6))
type DN9995 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec5))
type DN9994 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec4))
type DN9993 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec3))
type DN9992 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec2))
type DN9991 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec1))
type DN9990 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec0))
type DN9989 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec9))
type DN9988 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec8))
type DN9987 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec7))
type DN9986 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec6))
type DN9985 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec5))
type DN9984 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec4))
type DN9983 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec3))
type DN9982 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec2))
type DN9981 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec1))
type DN9980 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec0))
type DN9979 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec9))
type DN9978 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec8))
type DN9977 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec7))
type DN9976 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec6))
type DN9975 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec5))
type DN9974 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec4))
type DN9973 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec3))
type DN9972 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec2))
type DN9971 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec1))
type DN9970 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec0))
type DN9969 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec9))
type DN9968 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec8))
type DN9967 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec7))
type DN9966 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec6))
type DN9965 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec5))
type DN9964 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec4))
type DN9963 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec3))
type DN9962 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec2))
type DN9961 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec1))
type DN9960 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec0))
type DN9959 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec9))
type DN9958 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec8))
type DN9957 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec7))
type DN9956 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec6))
type DN9955 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec5))
type DN9954 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec4))
type DN9953 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec3))
type DN9952 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec2))
type DN9951 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec1))
type DN9950 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec0))
type DN9949 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec9))
type DN9948 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec8))
type DN9947 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec7))
type DN9946 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec6))
type DN9945 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec5))
type DN9944 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec4))
type DN9943 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec3))
type DN9942 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec2))
type DN9941 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec1))
type DN9940 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec0))
type DN9939 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec9))
type DN9938 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec8))
type DN9937 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec7))
type DN9936 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec6))
type DN9935 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec5))
type DN9934 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec4))
type DN9933 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec3))
type DN9932 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec2))
type DN9931 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec1))
type DN9930 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec0))
type DN9929 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec9))
type DN9928 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec8))
type DN9927 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec7))
type DN9926 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec6))
type DN9925 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec5))
type DN9924 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec4))
type DN9923 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec3))
type DN9922 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec2))
type DN9921 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec1))
type DN9920 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec0))
type DN9919 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec9))
type DN9918 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec8))
type DN9917 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec7))
type DN9916 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec6))
type DN9915 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec5))
type DN9914 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec4))
type DN9913 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec3))
type DN9912 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec2))
type DN9911 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec1))
type DN9910 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec0))
type DN9909 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec9))
type DN9908 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec8))
type DN9907 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec7))
type DN9906 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec6))
type DN9905 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec5))
type DN9904 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec4))
type DN9903 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec3))
type DN9902 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec2))
type DN9901 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec1))
type DN9900 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec0))
type DN9899 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec9))
type DN9898 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec8))
type DN9897 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec7))
type DN9896 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec6))
type DN9895 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec5))
type DN9894 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec4))
type DN9893 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec3))
type DN9892 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec2))
type DN9891 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec1))
type DN9890 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec0))
type DN9889 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec9))
type DN9888 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec8))
type DN9887 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec7))
type DN9886 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec6))
type DN9885 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec5))
type DN9884 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec4))
type DN9883 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec3))
type DN9882 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec2))
type DN9881 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec1))
type DN9880 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec0))
type DN9879 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec9))
type DN9878 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec8))
type DN9877 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec7))
type DN9876 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec6))
type DN9875 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec5))
type DN9874 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec4))
type DN9873 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec3))
type DN9872 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec2))
type DN9871 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec1))
type DN9870 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec0))
type DN9869 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec9))
type DN9868 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec8))
type DN9867 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec7))
type DN9866 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec6))
type DN9865 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec5))
type DN9864 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec4))
type DN9863 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec3))
type DN9862 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec2))
type DN9861 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec1))
type DN9860 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec0))
type DN9859 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec9))
type DN9858 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec8))
type DN9857 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec7))
type DN9856 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec6))
type DN9855 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec5))
type DN9854 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec4))
type DN9853 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec3))
type DN9852 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec2))
type DN9851 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec1))
type DN9850 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec0))
type DN9849 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec9))
type DN9848 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec8))
type DN9847 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec7))
type DN9846 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec6))
type DN9845 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec5))
type DN9844 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec4))
type DN9843 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec3))
type DN9842 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec2))
type DN9841 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec1))
type DN9840 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec0))
type DN9839 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec9))
type DN9838 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec8))
type DN9837 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec7))
type DN9836 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec6))
type DN9835 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec5))
type DN9834 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec4))
type DN9833 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec3))
type DN9832 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec2))
type DN9831 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec1))
type DN9830 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec0))
type DN9829 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec9))
type DN9828 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec8))
type DN9827 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec7))
type DN9826 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec6))
type DN9825 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec5))
type DN9824 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec4))
type DN9823 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec3))
type DN9822 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec2))
type DN9821 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec1))
type DN9820 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec0))
type DN9819 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec9))
type DN9818 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec8))
type DN9817 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec7))
type DN9816 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec6))
type DN9815 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec5))
type DN9814 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec4))
type DN9813 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec3))
type DN9812 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec2))
type DN9811 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec1))
type DN9810 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec0))
type DN9809 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec9))
type DN9808 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec8))
type DN9807 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec7))
type DN9806 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec6))
type DN9805 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec5))
type DN9804 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec4))
type DN9803 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec3))
type DN9802 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec2))
type DN9801 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec1))
type DN9800 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec0))
type DN9799 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec9))
type DN9798 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec8))
type DN9797 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec7))
type DN9796 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec6))
type DN9795 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec5))
type DN9794 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec4))
type DN9793 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec3))
type DN9792 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec2))
type DN9791 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec1))
type DN9790 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec0))
type DN9789 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec9))
type DN9788 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec8))
type DN9787 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec7))
type DN9786 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec6))
type DN9785 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec5))
type DN9784 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec4))
type DN9783 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec3))
type DN9782 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec2))
type DN9781 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec1))
type DN9780 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec0))
type DN9779 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec9))
type DN9778 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec8))
type DN9777 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec7))
type DN9776 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec6))
type DN9775 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec5))
type DN9774 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec4))
type DN9773 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec3))
type DN9772 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec2))
type DN9771 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec1))
type DN9770 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec0))
type DN9769 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec9))
type DN9768 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec8))
type DN9767 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec7))
type DN9766 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec6))
type DN9765 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec5))
type DN9764 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec4))
type DN9763 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec3))
type DN9762 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec2))
type DN9761 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec1))
type DN9760 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec0))
type DN9759 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec9))
type DN9758 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec8))
type DN9757 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec7))
type DN9756 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec6))
type DN9755 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec5))
type DN9754 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec4))
type DN9753 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec3))
type DN9752 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec2))
type DN9751 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec1))
type DN9750 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec0))
type DN9749 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec9))
type DN9748 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec8))
type DN9747 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec7))
type DN9746 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec6))
type DN9745 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec5))
type DN9744 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec4))
type DN9743 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec3))
type DN9742 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec2))
type DN9741 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec1))
type DN9740 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec0))
type DN9739 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec9))
type DN9738 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec8))
type DN9737 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec7))
type DN9736 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec6))
type DN9735 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec5))
type DN9734 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec4))
type DN9733 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec3))
type DN9732 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec2))
type DN9731 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec1))
type DN9730 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec0))
type DN9729 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec9))
type DN9728 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec8))
type DN9727 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec7))
type DN9726 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec6))
type DN9725 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec5))
type DN9724 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec4))
type DN9723 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec3))
type DN9722 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec2))
type DN9721 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec1))
type DN9720 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec0))
type DN9719 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec9))
type DN9718 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec8))
type DN9717 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec7))
type DN9716 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec6))
type DN9715 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec5))
type DN9714 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec4))
type DN9713 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec3))
type DN9712 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec2))
type DN9711 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec1))
type DN9710 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec0))
type DN9709 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec9))
type DN9708 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec8))
type DN9707 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec7))
type DN9706 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec6))
type DN9705 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec5))
type DN9704 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec4))
type DN9703 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec3))
type DN9702 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec2))
type DN9701 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec1))
type DN9700 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec0))
type DN9699 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec9))
type DN9698 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec8))
type DN9697 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec7))
type DN9696 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec6))
type DN9695 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec5))
type DN9694 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec4))
type DN9693 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec3))
type DN9692 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec2))
type DN9691 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec1))
type DN9690 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec0))
type DN9689 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec9))
type DN9688 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec8))
type DN9687 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec7))
type DN9686 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec6))
type DN9685 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec5))
type DN9684 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec4))
type DN9683 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec3))
type DN9682 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec2))
type DN9681 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec1))
type DN9680 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec0))
type DN9679 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec9))
type DN9678 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec8))
type DN9677 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec7))
type DN9676 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec6))
type DN9675 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec5))
type DN9674 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec4))
type DN9673 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec3))
type DN9672 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec2))
type DN9671 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec1))
type DN9670 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec0))
type DN9669 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec9))
type DN9668 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec8))
type DN9667 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec7))
type DN9666 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec6))
type DN9665 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec5))
type DN9664 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec4))
type DN9663 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec3))
type DN9662 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec2))
type DN9661 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec1))
type DN9660 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec0))
type DN9659 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec9))
type DN9658 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec8))
type DN9657 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec7))
type DN9656 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec6))
type DN9655 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec5))
type DN9654 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec4))
type DN9653 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec3))
type DN9652 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec2))
type DN9651 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec1))
type DN9650 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec0))
type DN9649 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec9))
type DN9648 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec8))
type DN9647 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec7))
type DN9646 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec6))
type DN9645 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec5))
type DN9644 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec4))
type DN9643 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec3))
type DN9642 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec2))
type DN9641 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec1))
type DN9640 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec0))
type DN9639 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec9))
type DN9638 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec8))
type DN9637 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec7))
type DN9636 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec6))
type DN9635 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec5))
type DN9634 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec4))
type DN9633 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec3))
type DN9632 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec2))
type DN9631 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec1))
type DN9630 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec0))
type DN9629 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec9))
type DN9628 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec8))
type DN9627 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec7))
type DN9626 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec6))
type DN9625 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec5))
type DN9624 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec4))
type DN9623 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec3))
type DN9622 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec2))
type DN9621 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec1))
type DN9620 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec0))
type DN9619 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec9))
type DN9618 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec8))
type DN9617 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec7))
type DN9616 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec6))
type DN9615 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec5))
type DN9614 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec4))
type DN9613 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec3))
type DN9612 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec2))
type DN9611 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec1))
type DN9610 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec0))
type DN9609 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec9))
type DN9608 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec8))
type DN9607 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec7))
type DN9606 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec6))
type DN9605 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec5))
type DN9604 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec4))
type DN9603 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec3))
type DN9602 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec2))
type DN9601 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec1))
type DN9600 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec0))
type DN9599 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec9))
type DN9598 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec8))
type DN9597 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec7))
type DN9596 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec6))
type DN9595 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec5))
type DN9594 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec4))
type DN9593 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec3))
type DN9592 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec2))
type DN9591 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec1))
type DN9590 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec0))
type DN9589 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec9))
type DN9588 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec8))
type DN9587 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec7))
type DN9586 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec6))
type DN9585 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec5))
type DN9584 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec4))
type DN9583 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec3))
type DN9582 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec2))
type DN9581 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec1))
type DN9580 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec0))
type DN9579 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec9))
type DN9578 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec8))
type DN9577 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec7))
type DN9576 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec6))
type DN9575 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec5))
type DN9574 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec4))
type DN9573 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec3))
type DN9572 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec2))
type DN9571 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec1))
type DN9570 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec0))
type DN9569 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec9))
type DN9568 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec8))
type DN9567 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec7))
type DN9566 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec6))
type DN9565 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec5))
type DN9564 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec4))
type DN9563 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec3))
type DN9562 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec2))
type DN9561 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec1))
type DN9560 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec0))
type DN9559 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec9))
type DN9558 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec8))
type DN9557 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec7))
type DN9556 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec6))
type DN9555 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec5))
type DN9554 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec4))
type DN9553 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec3))
type DN9552 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec2))
type DN9551 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec1))
type DN9550 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec0))
type DN9549 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec9))
type DN9548 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec8))
type DN9547 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec7))
type DN9546 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec6))
type DN9545 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec5))
type DN9544 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec4))
type DN9543 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec3))
type DN9542 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec2))
type DN9541 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec1))
type DN9540 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec0))
type DN9539 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec9))
type DN9538 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec8))
type DN9537 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec7))
type DN9536 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec6))
type DN9535 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec5))
type DN9534 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec4))
type DN9533 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec3))
type DN9532 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec2))
type DN9531 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec1))
type DN9530 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec0))
type DN9529 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec9))
type DN9528 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec8))
type DN9527 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec7))
type DN9526 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec6))
type DN9525 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec5))
type DN9524 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec4))
type DN9523 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec3))
type DN9522 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec2))
type DN9521 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec1))
type DN9520 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec0))
type DN9519 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec9))
type DN9518 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec8))
type DN9517 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec7))
type DN9516 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec6))
type DN9515 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec5))
type DN9514 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec4))
type DN9513 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec3))
type DN9512 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec2))
type DN9511 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec1))
type DN9510 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec0))
type DN9509 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec9))
type DN9508 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec8))
type DN9507 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec7))
type DN9506 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec6))
type DN9505 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec5))
type DN9504 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec4))
type DN9503 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec3))
type DN9502 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec2))
type DN9501 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec1))
type DN9500 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec0))
type DN9499 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec9))
type DN9498 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec8))
type DN9497 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec7))
type DN9496 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec6))
type DN9495 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec5))
type DN9494 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec4))
type DN9493 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec3))
type DN9492 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec2))
type DN9491 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec1))
type DN9490 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec0))
type DN9489 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec9))
type DN9488 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec8))
type DN9487 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec7))
type DN9486 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec6))
type DN9485 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec5))
type DN9484 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec4))
type DN9483 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec3))
type DN9482 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec2))
type DN9481 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec1))
type DN9480 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec0))
type DN9479 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec9))
type DN9478 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec8))
type DN9477 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec7))
type DN9476 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec6))
type DN9475 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec5))
type DN9474 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec4))
type DN9473 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec3))
type DN9472 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec2))
type DN9471 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec1))
type DN9470 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec0))
type DN9469 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec9))
type DN9468 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec8))
type DN9467 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec7))
type DN9466 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec6))
type DN9465 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec5))
type DN9464 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec4))
type DN9463 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec3))
type DN9462 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec2))
type DN9461 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec1))
type DN9460 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec0))
type DN9459 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec9))
type DN9458 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec8))
type DN9457 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec7))
type DN9456 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec6))
type DN9455 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec5))
type DN9454 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec4))
type DN9453 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec3))
type DN9452 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec2))
type DN9451 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec1))
type DN9450 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec0))
type DN9449 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec9))
type DN9448 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec8))
type DN9447 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec7))
type DN9446 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec6))
type DN9445 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec5))
type DN9444 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec4))
type DN9443 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec3))
type DN9442 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec2))
type DN9441 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec1))
type DN9440 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec0))
type DN9439 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec9))
type DN9438 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec8))
type DN9437 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec7))
type DN9436 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec6))
type DN9435 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec5))
type DN9434 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec4))
type DN9433 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec3))
type DN9432 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec2))
type DN9431 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec1))
type DN9430 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec0))
type DN9429 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec9))
type DN9428 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec8))
type DN9427 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec7))
type DN9426 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec6))
type DN9425 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec5))
type DN9424 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec4))
type DN9423 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec3))
type DN9422 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec2))
type DN9421 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec1))
type DN9420 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec0))
type DN9419 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec9))
type DN9418 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec8))
type DN9417 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec7))
type DN9416 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec6))
type DN9415 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec5))
type DN9414 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec4))
type DN9413 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec3))
type DN9412 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec2))
type DN9411 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec1))
type DN9410 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec0))
type DN9409 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec9))
type DN9408 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec8))
type DN9407 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec7))
type DN9406 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec6))
type DN9405 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec5))
type DN9404 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec4))
type DN9403 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec3))
type DN9402 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec2))
type DN9401 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec1))
type DN9400 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec0))
type DN9399 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec9))
type DN9398 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec8))
type DN9397 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec7))
type DN9396 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec6))
type DN9395 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec5))
type DN9394 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec4))
type DN9393 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec3))
type DN9392 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec2))
type DN9391 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec1))
type DN9390 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec0))
type DN9389 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec9))
type DN9388 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec8))
type DN9387 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec7))
type DN9386 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec6))
type DN9385 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec5))
type DN9384 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec4))
type DN9383 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec3))
type DN9382 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec2))
type DN9381 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec1))
type DN9380 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec0))
type DN9379 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec9))
type DN9378 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec8))
type DN9377 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec7))
type DN9376 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec6))
type DN9375 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec5))
type DN9374 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec4))
type DN9373 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec3))
type DN9372 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec2))
type DN9371 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec1))
type DN9370 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec0))
type DN9369 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec9))
type DN9368 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec8))
type DN9367 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec7))
type DN9366 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec6))
type DN9365 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec5))
type DN9364 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec4))
type DN9363 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec3))
type DN9362 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec2))
type DN9361 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec1))
type DN9360 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec0))
type DN9359 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec9))
type DN9358 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec8))
type DN9357 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec7))
type DN9356 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec6))
type DN9355 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec5))
type DN9354 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec4))
type DN9353 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec3))
type DN9352 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec2))
type DN9351 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec1))
type DN9350 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec0))
type DN9349 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec9))
type DN9348 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec8))
type DN9347 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec7))
type DN9346 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec6))
type DN9345 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec5))
type DN9344 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec4))
type DN9343 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec3))
type DN9342 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec2))
type DN9341 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec1))
type DN9340 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec0))
type DN9339 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec9))
type DN9338 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec8))
type DN9337 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec7))
type DN9336 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec6))
type DN9335 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec5))
type DN9334 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec4))
type DN9333 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec3))
type DN9332 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec2))
type DN9331 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec1))
type DN9330 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec0))
type DN9329 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec9))
type DN9328 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec8))
type DN9327 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec7))
type DN9326 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec6))
type DN9325 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec5))
type DN9324 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec4))
type DN9323 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec3))
type DN9322 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec2))
type DN9321 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec1))
type DN9320 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec0))
type DN9319 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec9))
type DN9318 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec8))
type DN9317 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec7))
type DN9316 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec6))
type DN9315 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec5))
type DN9314 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec4))
type DN9313 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec3))
type DN9312 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec2))
type DN9311 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec1))
type DN9310 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec0))
type DN9309 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec9))
type DN9308 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec8))
type DN9307 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec7))
type DN9306 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec6))
type DN9305 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec5))
type DN9304 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec4))
type DN9303 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec3))
type DN9302 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec2))
type DN9301 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec1))
type DN9300 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec0))
type DN9299 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec9))
type DN9298 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec8))
type DN9297 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec7))
type DN9296 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec6))
type DN9295 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec5))
type DN9294 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec4))
type DN9293 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec3))
type DN9292 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec2))
type DN9291 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec1))
type DN9290 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec0))
type DN9289 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec9))
type DN9288 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec8))
type DN9287 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec7))
type DN9286 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec6))
type DN9285 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec5))
type DN9284 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec4))
type DN9283 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec3))
type DN9282 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec2))
type DN9281 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec1))
type DN9280 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec0))
type DN9279 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec9))
type DN9278 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec8))
type DN9277 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec7))
type DN9276 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec6))
type DN9275 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec5))
type DN9274 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec4))
type DN9273 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec3))
type DN9272 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec2))
type DN9271 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec1))
type DN9270 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec0))
type DN9269 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec9))
type DN9268 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec8))
type DN9267 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec7))
type DN9266 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec6))
type DN9265 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec5))
type DN9264 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec4))
type DN9263 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec3))
type DN9262 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec2))
type DN9261 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec1))
type DN9260 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec0))
type DN9259 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec9))
type DN9258 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec8))
type DN9257 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec7))
type DN9256 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec6))
type DN9255 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec5))
type DN9254 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec4))
type DN9253 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec3))
type DN9252 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec2))
type DN9251 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec1))
type DN9250 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec0))
type DN9249 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec9))
type DN9248 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec8))
type DN9247 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec7))
type DN9246 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec6))
type DN9245 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec5))
type DN9244 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec4))
type DN9243 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec3))
type DN9242 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec2))
type DN9241 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec1))
type DN9240 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec0))
type DN9239 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec9))
type DN9238 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec8))
type DN9237 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec7))
type DN9236 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec6))
type DN9235 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec5))
type DN9234 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec4))
type DN9233 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec3))
type DN9232 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec2))
type DN9231 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec1))
type DN9230 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec0))
type DN9229 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec9))
type DN9228 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec8))
type DN9227 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec7))
type DN9226 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec6))
type DN9225 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec5))
type DN9224 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec4))
type DN9223 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec3))
type DN9222 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec2))
type DN9221 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec1))
type DN9220 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec0))
type DN9219 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec9))
type DN9218 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec8))
type DN9217 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec7))
type DN9216 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec6))
type DN9215 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec5))
type DN9214 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec4))
type DN9213 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec3))
type DN9212 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec2))
type DN9211 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec1))
type DN9210 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec0))
type DN9209 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec9))
type DN9208 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec8))
type DN9207 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec7))
type DN9206 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec6))
type DN9205 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec5))
type DN9204 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec4))
type DN9203 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec3))
type DN9202 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec2))
type DN9201 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec1))
type DN9200 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec0))
type DN9199 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec9))
type DN9198 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec8))
type DN9197 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec7))
type DN9196 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec6))
type DN9195 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec5))
type DN9194 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec4))
type DN9193 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec3))
type DN9192 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec2))
type DN9191 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec1))
type DN9190 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec0))
type DN9189 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec9))
type DN9188 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec8))
type DN9187 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec7))
type DN9186 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec6))
type DN9185 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec5))
type DN9184 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec4))
type DN9183 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec3))
type DN9182 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec2))
type DN9181 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec1))
type DN9180 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec0))
type DN9179 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec9))
type DN9178 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec8))
type DN9177 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec7))
type DN9176 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec6))
type DN9175 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec5))
type DN9174 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec4))
type DN9173 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec3))
type DN9172 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec2))
type DN9171 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec1))
type DN9170 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec0))
type DN9169 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec9))
type DN9168 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec8))
type DN9167 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec7))
type DN9166 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec6))
type DN9165 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec5))
type DN9164 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec4))
type DN9163 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec3))
type DN9162 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec2))
type DN9161 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec1))
type DN9160 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec0))
type DN9159 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec9))
type DN9158 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec8))
type DN9157 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec7))
type DN9156 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec6))
type DN9155 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec5))
type DN9154 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec4))
type DN9153 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec3))
type DN9152 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec2))
type DN9151 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec1))
type DN9150 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec0))
type DN9149 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec9))
type DN9148 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec8))
type DN9147 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec7))
type DN9146 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec6))
type DN9145 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec5))
type DN9144 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec4))
type DN9143 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec3))
type DN9142 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec2))
type DN9141 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec1))
type DN9140 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec0))
type DN9139 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec9))
type DN9138 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec8))
type DN9137 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec7))
type DN9136 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec6))
type DN9135 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec5))
type DN9134 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec4))
type DN9133 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec3))
type DN9132 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec2))
type DN9131 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec1))
type DN9130 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec0))
type DN9129 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec9))
type DN9128 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec8))
type DN9127 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec7))
type DN9126 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec6))
type DN9125 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec5))
type DN9124 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec4))
type DN9123 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec3))
type DN9122 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec2))
type DN9121 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec1))
type DN9120 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec0))
type DN9119 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec9))
type DN9118 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec8))
type DN9117 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec7))
type DN9116 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec6))
type DN9115 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec5))
type DN9114 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec4))
type DN9113 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec3))
type DN9112 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec2))
type DN9111 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec1))
type DN9110 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec0))
type DN9109 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec9))
type DN9108 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec8))
type DN9107 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec7))
type DN9106 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec6))
type DN9105 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec5))
type DN9104 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec4))
type DN9103 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec3))
type DN9102 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec2))
type DN9101 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec1))
type DN9100 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec0))
type DN9099 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec9))
type DN9098 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec8))
type DN9097 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec7))
type DN9096 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec6))
type DN9095 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec5))
type DN9094 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec4))
type DN9093 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec3))
type DN9092 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec2))
type DN9091 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec1))
type DN9090 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec0))
type DN9089 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec9))
type DN9088 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec8))
type DN9087 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec7))
type DN9086 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec6))
type DN9085 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec5))
type DN9084 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec4))
type DN9083 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec3))
type DN9082 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec2))
type DN9081 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec1))
type DN9080 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec0))
type DN9079 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec9))
type DN9078 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec8))
type DN9077 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec7))
type DN9076 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec6))
type DN9075 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec5))
type DN9074 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec4))
type DN9073 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec3))
type DN9072 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec2))
type DN9071 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec1))
type DN9070 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec0))
type DN9069 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec9))
type DN9068 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec8))
type DN9067 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec7))
type DN9066 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec6))
type DN9065 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec5))
type DN9064 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec4))
type DN9063 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec3))
type DN9062 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec2))
type DN9061 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec1))
type DN9060 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec0))
type DN9059 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec9))
type DN9058 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec8))
type DN9057 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec7))
type DN9056 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec6))
type DN9055 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec5))
type DN9054 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec4))
type DN9053 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec3))
type DN9052 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec2))
type DN9051 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec1))
type DN9050 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec0))
type DN9049 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec9))
type DN9048 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec8))
type DN9047 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec7))
type DN9046 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec6))
type DN9045 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec5))
type DN9044 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec4))
type DN9043 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec3))
type DN9042 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec2))
type DN9041 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec1))
type DN9040 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec0))
type DN9039 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec9))
type DN9038 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec8))
type DN9037 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec7))
type DN9036 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec6))
type DN9035 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec5))
type DN9034 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec4))
type DN9033 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec3))
type DN9032 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec2))
type DN9031 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec1))
type DN9030 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec0))
type DN9029 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec9))
type DN9028 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec8))
type DN9027 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec7))
type DN9026 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec6))
type DN9025 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec5))
type DN9024 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec4))
type DN9023 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec3))
type DN9022 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec2))
type DN9021 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec1))
type DN9020 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec0))
type DN9019 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec9))
type DN9018 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec8))
type DN9017 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec7))
type DN9016 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec6))
type DN9015 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec5))
type DN9014 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec4))
type DN9013 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec3))
type DN9012 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec2))
type DN9011 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec1))
type DN9010 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec0))
type DN9009 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec9))
type DN9008 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec8))
type DN9007 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec7))
type DN9006 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec6))
type DN9005 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec5))
type DN9004 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec4))
type DN9003 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec3))
type DN9002 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec2))
type DN9001 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec1))
type DN9000 = Dec (Neg' (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec0))
type DN8999 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec9))
type DN8998 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec8))
type DN8997 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec7))
type DN8996 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec6))
type DN8995 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec5))
type DN8994 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec4))
type DN8993 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec3))
type DN8992 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec2))
type DN8991 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec1))
type DN8990 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec0))
type DN8989 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec9))
type DN8988 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec8))
type DN8987 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec7))
type DN8986 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec6))
type DN8985 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec5))
type DN8984 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec4))
type DN8983 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec3))
type DN8982 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec2))
type DN8981 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec1))
type DN8980 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec0))
type DN8979 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec9))
type DN8978 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec8))
type DN8977 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec7))
type DN8976 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec6))
type DN8975 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec5))
type DN8974 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec4))
type DN8973 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec3))
type DN8972 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec2))
type DN8971 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec1))
type DN8970 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec0))
type DN8969 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec9))
type DN8968 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec8))
type DN8967 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec7))
type DN8966 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec6))
type DN8965 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec5))
type DN8964 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec4))
type DN8963 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec3))
type DN8962 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec2))
type DN8961 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec1))
type DN8960 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec0))
type DN8959 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec9))
type DN8958 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec8))
type DN8957 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec7))
type DN8956 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec6))
type DN8955 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec5))
type DN8954 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec4))
type DN8953 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec3))
type DN8952 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec2))
type DN8951 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec1))
type DN8950 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec0))
type DN8949 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec9))
type DN8948 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec8))
type DN8947 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec7))
type DN8946 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec6))
type DN8945 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec5))
type DN8944 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec4))
type DN8943 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec3))
type DN8942 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec2))
type DN8941 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec1))
type DN8940 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec0))
type DN8939 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec9))
type DN8938 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec8))
type DN8937 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec7))
type DN8936 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec6))
type DN8935 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec5))
type DN8934 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec4))
type DN8933 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec3))
type DN8932 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec2))
type DN8931 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec1))
type DN8930 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec0))
type DN8929 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec9))
type DN8928 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec8))
type DN8927 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec7))
type DN8926 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec6))
type DN8925 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec5))
type DN8924 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec4))
type DN8923 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec3))
type DN8922 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec2))
type DN8921 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec1))
type DN8920 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec0))
type DN8919 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec9))
type DN8918 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec8))
type DN8917 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec7))
type DN8916 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec6))
type DN8915 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec5))
type DN8914 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec4))
type DN8913 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec3))
type DN8912 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec2))
type DN8911 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec1))
type DN8910 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec0))
type DN8909 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec9))
type DN8908 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec8))
type DN8907 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec7))
type DN8906 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec6))
type DN8905 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec5))
type DN8904 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec4))
type DN8903 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec3))
type DN8902 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec2))
type DN8901 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec1))
type DN8900 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec0))
type DN8899 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec9))
type DN8898 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec8))
type DN8897 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec7))
type DN8896 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec6))
type DN8895 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec5))
type DN8894 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec4))
type DN8893 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec3))
type DN8892 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec2))
type DN8891 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec1))
type DN8890 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec0))
type DN8889 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec9))
type DN8888 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec8))
type DN8887 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec7))
type DN8886 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec6))
type DN8885 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec5))
type DN8884 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec4))
type DN8883 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec3))
type DN8882 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec2))
type DN8881 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec1))
type DN8880 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec0))
type DN8879 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec9))
type DN8878 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec8))
type DN8877 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec7))
type DN8876 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec6))
type DN8875 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec5))
type DN8874 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec4))
type DN8873 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec3))
type DN8872 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec2))
type DN8871 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec1))
type DN8870 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec0))
type DN8869 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec9))
type DN8868 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec8))
type DN8867 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec7))
type DN8866 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec6))
type DN8865 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec5))
type DN8864 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec4))
type DN8863 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec3))
type DN8862 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec2))
type DN8861 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec1))
type DN8860 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec0))
type DN8859 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec9))
type DN8858 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec8))
type DN8857 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec7))
type DN8856 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec6))
type DN8855 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec5))
type DN8854 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec4))
type DN8853 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec3))
type DN8852 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec2))
type DN8851 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec1))
type DN8850 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec0))
type DN8849 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec9))
type DN8848 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec8))
type DN8847 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec7))
type DN8846 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec6))
type DN8845 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec5))
type DN8844 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec4))
type DN8843 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec3))
type DN8842 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec2))
type DN8841 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec1))
type DN8840 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec0))
type DN8839 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec9))
type DN8838 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec8))
type DN8837 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec7))
type DN8836 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec6))
type DN8835 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec5))
type DN8834 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec4))
type DN8833 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec3))
type DN8832 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec2))
type DN8831 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec1))
type DN8830 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec0))
type DN8829 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec9))
type DN8828 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec8))
type DN8827 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec7))
type DN8826 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec6))
type DN8825 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec5))
type DN8824 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec4))
type DN8823 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec3))
type DN8822 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec2))
type DN8821 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec1))
type DN8820 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec0))
type DN8819 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec9))
type DN8818 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec8))
type DN8817 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec7))
type DN8816 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec6))
type DN8815 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec5))
type DN8814 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec4))
type DN8813 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec3))
type DN8812 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec2))
type DN8811 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec1))
type DN8810 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec0))
type DN8809 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec9))
type DN8808 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec8))
type DN8807 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec7))
type DN8806 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec6))
type DN8805 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec5))
type DN8804 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec4))
type DN8803 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec3))
type DN8802 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec2))
type DN8801 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec1))
type DN8800 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec0))
type DN8799 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec9))
type DN8798 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec8))
type DN8797 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec7))
type DN8796 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec6))
type DN8795 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec5))
type DN8794 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec4))
type DN8793 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec3))
type DN8792 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec2))
type DN8791 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec1))
type DN8790 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec0))
type DN8789 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec9))
type DN8788 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec8))
type DN8787 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec7))
type DN8786 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec6))
type DN8785 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec5))
type DN8784 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec4))
type DN8783 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec3))
type DN8782 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec2))
type DN8781 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec1))
type DN8780 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec0))
type DN8779 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec9))
type DN8778 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec8))
type DN8777 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec7))
type DN8776 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec6))
type DN8775 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec5))
type DN8774 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec4))
type DN8773 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec3))
type DN8772 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec2))
type DN8771 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec1))
type DN8770 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec0))
type DN8769 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec9))
type DN8768 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec8))
type DN8767 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec7))
type DN8766 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec6))
type DN8765 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec5))
type DN8764 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec4))
type DN8763 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec3))
type DN8762 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec2))
type DN8761 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec1))
type DN8760 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec0))
type DN8759 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec9))
type DN8758 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec8))
type DN8757 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec7))
type DN8756 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec6))
type DN8755 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec5))
type DN8754 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec4))
type DN8753 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec3))
type DN8752 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec2))
type DN8751 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec1))
type DN8750 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec0))
type DN8749 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec9))
type DN8748 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec8))
type DN8747 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec7))
type DN8746 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec6))
type DN8745 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec5))
type DN8744 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec4))
type DN8743 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec3))
type DN8742 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec2))
type DN8741 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec1))
type DN8740 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec0))
type DN8739 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec9))
type DN8738 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec8))
type DN8737 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec7))
type DN8736 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec6))
type DN8735 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec5))
type DN8734 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec4))
type DN8733 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec3))
type DN8732 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec2))
type DN8731 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec1))
type DN8730 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec0))
type DN8729 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec9))
type DN8728 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec8))
type DN8727 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec7))
type DN8726 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec6))
type DN8725 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec5))
type DN8724 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec4))
type DN8723 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec3))
type DN8722 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec2))
type DN8721 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec1))
type DN8720 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec0))
type DN8719 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec9))
type DN8718 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec8))
type DN8717 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec7))
type DN8716 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec6))
type DN8715 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec5))
type DN8714 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec4))
type DN8713 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec3))
type DN8712 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec2))
type DN8711 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec1))
type DN8710 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec0))
type DN8709 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec9))
type DN8708 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec8))
type DN8707 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec7))
type DN8706 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec6))
type DN8705 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec5))
type DN8704 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec4))
type DN8703 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec3))
type DN8702 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec2))
type DN8701 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec1))
type DN8700 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec0))
type DN8699 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec9))
type DN8698 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec8))
type DN8697 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec7))
type DN8696 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec6))
type DN8695 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec5))
type DN8694 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec4))
type DN8693 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec3))
type DN8692 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec2))
type DN8691 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec1))
type DN8690 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec0))
type DN8689 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec9))
type DN8688 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec8))
type DN8687 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec7))
type DN8686 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec6))
type DN8685 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec5))
type DN8684 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec4))
type DN8683 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec3))
type DN8682 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec2))
type DN8681 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec1))
type DN8680 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec0))
type DN8679 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec9))
type DN8678 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec8))
type DN8677 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec7))
type DN8676 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec6))
type DN8675 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec5))
type DN8674 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec4))
type DN8673 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec3))
type DN8672 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec2))
type DN8671 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec1))
type DN8670 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec0))
type DN8669 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec9))
type DN8668 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec8))
type DN8667 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec7))
type DN8666 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec6))
type DN8665 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec5))
type DN8664 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec4))
type DN8663 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec3))
type DN8662 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec2))
type DN8661 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec1))
type DN8660 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec0))
type DN8659 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec9))
type DN8658 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec8))
type DN8657 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec7))
type DN8656 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec6))
type DN8655 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec5))
type DN8654 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec4))
type DN8653 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec3))
type DN8652 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec2))
type DN8651 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec1))
type DN8650 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec0))
type DN8649 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec9))
type DN8648 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec8))
type DN8647 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec7))
type DN8646 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec6))
type DN8645 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec5))
type DN8644 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec4))
type DN8643 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec3))
type DN8642 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec2))
type DN8641 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec1))
type DN8640 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec0))
type DN8639 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec9))
type DN8638 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec8))
type DN8637 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec7))
type DN8636 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec6))
type DN8635 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec5))
type DN8634 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec4))
type DN8633 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec3))
type DN8632 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec2))
type DN8631 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec1))
type DN8630 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec0))
type DN8629 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec9))
type DN8628 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec8))
type DN8627 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec7))
type DN8626 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec6))
type DN8625 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec5))
type DN8624 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec4))
type DN8623 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec3))
type DN8622 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec2))
type DN8621 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec1))
type DN8620 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec0))
type DN8619 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec9))
type DN8618 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec8))
type DN8617 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec7))
type DN8616 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec6))
type DN8615 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec5))
type DN8614 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec4))
type DN8613 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec3))
type DN8612 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec2))
type DN8611 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec1))
type DN8610 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec0))
type DN8609 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec9))
type DN8608 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec8))
type DN8607 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec7))
type DN8606 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec6))
type DN8605 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec5))
type DN8604 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec4))
type DN8603 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec3))
type DN8602 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec2))
type DN8601 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec1))
type DN8600 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec0))
type DN8599 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec9))
type DN8598 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec8))
type DN8597 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec7))
type DN8596 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec6))
type DN8595 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec5))
type DN8594 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec4))
type DN8593 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec3))
type DN8592 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec2))
type DN8591 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec1))
type DN8590 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec0))
type DN8589 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec9))
type DN8588 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec8))
type DN8587 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec7))
type DN8586 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec6))
type DN8585 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec5))
type DN8584 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec4))
type DN8583 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec3))
type DN8582 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec2))
type DN8581 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec1))
type DN8580 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec0))
type DN8579 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec9))
type DN8578 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec8))
type DN8577 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec7))
type DN8576 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec6))
type DN8575 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec5))
type DN8574 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec4))
type DN8573 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec3))
type DN8572 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec2))
type DN8571 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec1))
type DN8570 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec0))
type DN8569 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec9))
type DN8568 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec8))
type DN8567 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec7))
type DN8566 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec6))
type DN8565 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec5))
type DN8564 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec4))
type DN8563 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec3))
type DN8562 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec2))
type DN8561 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec1))
type DN8560 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec0))
type DN8559 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec9))
type DN8558 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec8))
type DN8557 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec7))
type DN8556 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec6))
type DN8555 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec5))
type DN8554 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec4))
type DN8553 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec3))
type DN8552 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec2))
type DN8551 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec1))
type DN8550 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec0))
type DN8549 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec9))
type DN8548 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec8))
type DN8547 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec7))
type DN8546 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec6))
type DN8545 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec5))
type DN8544 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec4))
type DN8543 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec3))
type DN8542 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec2))
type DN8541 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec1))
type DN8540 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec0))
type DN8539 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec9))
type DN8538 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec8))
type DN8537 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec7))
type DN8536 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec6))
type DN8535 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec5))
type DN8534 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec4))
type DN8533 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec3))
type DN8532 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec2))
type DN8531 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec1))
type DN8530 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec0))
type DN8529 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec9))
type DN8528 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec8))
type DN8527 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec7))
type DN8526 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec6))
type DN8525 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec5))
type DN8524 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec4))
type DN8523 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec3))
type DN8522 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec2))
type DN8521 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec1))
type DN8520 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec0))
type DN8519 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec9))
type DN8518 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec8))
type DN8517 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec7))
type DN8516 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec6))
type DN8515 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec5))
type DN8514 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec4))
type DN8513 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec3))
type DN8512 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec2))
type DN8511 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec1))
type DN8510 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec0))
type DN8509 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec9))
type DN8508 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec8))
type DN8507 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec7))
type DN8506 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec6))
type DN8505 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec5))
type DN8504 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec4))
type DN8503 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec3))
type DN8502 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec2))
type DN8501 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec1))
type DN8500 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec0))
type DN8499 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec9))
type DN8498 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec8))
type DN8497 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec7))
type DN8496 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec6))
type DN8495 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec5))
type DN8494 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec4))
type DN8493 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec3))
type DN8492 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec2))
type DN8491 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec1))
type DN8490 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec0))
type DN8489 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec9))
type DN8488 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec8))
type DN8487 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec7))
type DN8486 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec6))
type DN8485 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec5))
type DN8484 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec4))
type DN8483 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec3))
type DN8482 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec2))
type DN8481 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec1))
type DN8480 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec0))
type DN8479 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec9))
type DN8478 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec8))
type DN8477 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec7))
type DN8476 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec6))
type DN8475 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec5))
type DN8474 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec4))
type DN8473 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec3))
type DN8472 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec2))
type DN8471 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec1))
type DN8470 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec0))
type DN8469 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec9))
type DN8468 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec8))
type DN8467 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec7))
type DN8466 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec6))
type DN8465 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec5))
type DN8464 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec4))
type DN8463 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec3))
type DN8462 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec2))
type DN8461 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec1))
type DN8460 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec0))
type DN8459 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec9))
type DN8458 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec8))
type DN8457 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec7))
type DN8456 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec6))
type DN8455 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec5))
type DN8454 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec4))
type DN8453 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec3))
type DN8452 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec2))
type DN8451 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec1))
type DN8450 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec0))
type DN8449 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec9))
type DN8448 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec8))
type DN8447 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec7))
type DN8446 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec6))
type DN8445 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec5))
type DN8444 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec4))
type DN8443 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec3))
type DN8442 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec2))
type DN8441 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec1))
type DN8440 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec0))
type DN8439 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec9))
type DN8438 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec8))
type DN8437 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec7))
type DN8436 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec6))
type DN8435 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec5))
type DN8434 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec4))
type DN8433 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec3))
type DN8432 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec2))
type DN8431 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec1))
type DN8430 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec0))
type DN8429 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec9))
type DN8428 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec8))
type DN8427 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec7))
type DN8426 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec6))
type DN8425 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec5))
type DN8424 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec4))
type DN8423 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec3))
type DN8422 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec2))
type DN8421 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec1))
type DN8420 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec0))
type DN8419 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec9))
type DN8418 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec8))
type DN8417 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec7))
type DN8416 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec6))
type DN8415 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec5))
type DN8414 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec4))
type DN8413 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec3))
type DN8412 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec2))
type DN8411 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec1))
type DN8410 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec0))
type DN8409 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec9))
type DN8408 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec8))
type DN8407 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec7))
type DN8406 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec6))
type DN8405 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec5))
type DN8404 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec4))
type DN8403 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec3))
type DN8402 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec2))
type DN8401 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec1))
type DN8400 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec0))
type DN8399 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec9))
type DN8398 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec8))
type DN8397 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec7))
type DN8396 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec6))
type DN8395 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec5))
type DN8394 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec4))
type DN8393 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec3))
type DN8392 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec2))
type DN8391 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec1))
type DN8390 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec0))
type DN8389 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec9))
type DN8388 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec8))
type DN8387 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec7))
type DN8386 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec6))
type DN8385 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec5))
type DN8384 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec4))
type DN8383 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec3))
type DN8382 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec2))
type DN8381 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec1))
type DN8380 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec0))
type DN8379 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec9))
type DN8378 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec8))
type DN8377 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec7))
type DN8376 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec6))
type DN8375 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec5))
type DN8374 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec4))
type DN8373 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec3))
type DN8372 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec2))
type DN8371 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec1))
type DN8370 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec0))
type DN8369 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec9))
type DN8368 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec8))
type DN8367 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec7))
type DN8366 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec6))
type DN8365 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec5))
type DN8364 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec4))
type DN8363 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec3))
type DN8362 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec2))
type DN8361 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec1))
type DN8360 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec0))
type DN8359 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec9))
type DN8358 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec8))
type DN8357 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec7))
type DN8356 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec6))
type DN8355 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec5))
type DN8354 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec4))
type DN8353 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec3))
type DN8352 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec2))
type DN8351 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec1))
type DN8350 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec0))
type DN8349 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec9))
type DN8348 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec8))
type DN8347 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec7))
type DN8346 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec6))
type DN8345 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec5))
type DN8344 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec4))
type DN8343 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec3))
type DN8342 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec2))
type DN8341 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec1))
type DN8340 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec0))
type DN8339 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec9))
type DN8338 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec8))
type DN8337 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec7))
type DN8336 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec6))
type DN8335 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec5))
type DN8334 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec4))
type DN8333 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec3))
type DN8332 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec2))
type DN8331 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec1))
type DN8330 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec0))
type DN8329 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec9))
type DN8328 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec8))
type DN8327 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec7))
type DN8326 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec6))
type DN8325 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec5))
type DN8324 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec4))
type DN8323 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec3))
type DN8322 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec2))
type DN8321 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec1))
type DN8320 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec0))
type DN8319 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec9))
type DN8318 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec8))
type DN8317 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec7))
type DN8316 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec6))
type DN8315 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec5))
type DN8314 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec4))
type DN8313 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec3))
type DN8312 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec2))
type DN8311 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec1))
type DN8310 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec0))
type DN8309 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec9))
type DN8308 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec8))
type DN8307 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec7))
type DN8306 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec6))
type DN8305 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec5))
type DN8304 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec4))
type DN8303 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec3))
type DN8302 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec2))
type DN8301 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec1))
type DN8300 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec0))
type DN8299 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec9))
type DN8298 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec8))
type DN8297 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec7))
type DN8296 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec6))
type DN8295 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec5))
type DN8294 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec4))
type DN8293 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec3))
type DN8292 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec2))
type DN8291 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec1))
type DN8290 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec0))
type DN8289 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec9))
type DN8288 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec8))
type DN8287 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec7))
type DN8286 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec6))
type DN8285 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec5))
type DN8284 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec4))
type DN8283 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec3))
type DN8282 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec2))
type DN8281 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec1))
type DN8280 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec0))
type DN8279 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec9))
type DN8278 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec8))
type DN8277 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec7))
type DN8276 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec6))
type DN8275 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec5))
type DN8274 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec4))
type DN8273 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec3))
type DN8272 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec2))
type DN8271 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec1))
type DN8270 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec0))
type DN8269 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec9))
type DN8268 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec8))
type DN8267 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec7))
type DN8266 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec6))
type DN8265 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec5))
type DN8264 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec4))
type DN8263 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec3))
type DN8262 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec2))
type DN8261 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec1))
type DN8260 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec0))
type DN8259 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec9))
type DN8258 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec8))
type DN8257 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec7))
type DN8256 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec6))
type DN8255 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec5))
type DN8254 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec4))
type DN8253 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec3))
type DN8252 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec2))
type DN8251 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec1))
type DN8250 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec0))
type DN8249 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec9))
type DN8248 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec8))
type DN8247 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec7))
type DN8246 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec6))
type DN8245 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec5))
type DN8244 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec4))
type DN8243 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec3))
type DN8242 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec2))
type DN8241 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec1))
type DN8240 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec0))
type DN8239 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec9))
type DN8238 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec8))
type DN8237 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec7))
type DN8236 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec6))
type DN8235 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec5))
type DN8234 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec4))
type DN8233 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec3))
type DN8232 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec2))
type DN8231 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec1))
type DN8230 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec0))
type DN8229 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec9))
type DN8228 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec8))
type DN8227 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec7))
type DN8226 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec6))
type DN8225 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec5))
type DN8224 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec4))
type DN8223 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec3))
type DN8222 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec2))
type DN8221 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec1))
type DN8220 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec0))
type DN8219 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec9))
type DN8218 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec8))
type DN8217 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec7))
type DN8216 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec6))
type DN8215 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec5))
type DN8214 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec4))
type DN8213 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec3))
type DN8212 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec2))
type DN8211 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec1))
type DN8210 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec0))
type DN8209 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec9))
type DN8208 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec8))
type DN8207 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec7))
type DN8206 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec6))
type DN8205 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec5))
type DN8204 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec4))
type DN8203 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec3))
type DN8202 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec2))
type DN8201 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec1))
type DN8200 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec0))
type DN8199 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec9))
type DN8198 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec8))
type DN8197 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec7))
type DN8196 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec6))
type DN8195 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec5))
type DN8194 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec4))
type DN8193 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec3))
type DN8192 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec2))
type DN8191 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec1))
type DN8190 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec0))
type DN8189 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec9))
type DN8188 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec8))
type DN8187 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec7))
type DN8186 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec6))
type DN8185 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec5))
type DN8184 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec4))
type DN8183 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec3))
type DN8182 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec2))
type DN8181 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec1))
type DN8180 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec0))
type DN8179 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec9))
type DN8178 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec8))
type DN8177 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec7))
type DN8176 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec6))
type DN8175 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec5))
type DN8174 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec4))
type DN8173 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec3))
type DN8172 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec2))
type DN8171 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec1))
type DN8170 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec0))
type DN8169 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec9))
type DN8168 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec8))
type DN8167 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec7))
type DN8166 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec6))
type DN8165 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec5))
type DN8164 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec4))
type DN8163 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec3))
type DN8162 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec2))
type DN8161 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec1))
type DN8160 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec0))
type DN8159 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec9))
type DN8158 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec8))
type DN8157 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec7))
type DN8156 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec6))
type DN8155 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec5))
type DN8154 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec4))
type DN8153 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec3))
type DN8152 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec2))
type DN8151 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec1))
type DN8150 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec0))
type DN8149 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec9))
type DN8148 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec8))
type DN8147 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec7))
type DN8146 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec6))
type DN8145 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec5))
type DN8144 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec4))
type DN8143 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec3))
type DN8142 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec2))
type DN8141 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec1))
type DN8140 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec0))
type DN8139 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec9))
type DN8138 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec8))
type DN8137 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec7))
type DN8136 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec6))
type DN8135 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec5))
type DN8134 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec4))
type DN8133 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec3))
type DN8132 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec2))
type DN8131 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec1))
type DN8130 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec0))
type DN8129 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec9))
type DN8128 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec8))
type DN8127 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec7))
type DN8126 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec6))
type DN8125 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec5))
type DN8124 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec4))
type DN8123 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec3))
type DN8122 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec2))
type DN8121 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec1))
type DN8120 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec0))
type DN8119 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec9))
type DN8118 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec8))
type DN8117 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec7))
type DN8116 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec6))
type DN8115 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec5))
type DN8114 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec4))
type DN8113 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec3))
type DN8112 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec2))
type DN8111 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec1))
type DN8110 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec0))
type DN8109 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec9))
type DN8108 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec8))
type DN8107 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec7))
type DN8106 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec6))
type DN8105 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec5))
type DN8104 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec4))
type DN8103 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec3))
type DN8102 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec2))
type DN8101 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec1))
type DN8100 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec0))
type DN8099 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec9))
type DN8098 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec8))
type DN8097 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec7))
type DN8096 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec6))
type DN8095 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec5))
type DN8094 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec4))
type DN8093 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec3))
type DN8092 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec2))
type DN8091 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec1))
type DN8090 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec0))
type DN8089 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec9))
type DN8088 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec8))
type DN8087 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec7))
type DN8086 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec6))
type DN8085 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec5))
type DN8084 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec4))
type DN8083 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec3))
type DN8082 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec2))
type DN8081 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec1))
type DN8080 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec0))
type DN8079 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec9))
type DN8078 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec8))
type DN8077 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec7))
type DN8076 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec6))
type DN8075 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec5))
type DN8074 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec4))
type DN8073 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec3))
type DN8072 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec2))
type DN8071 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec1))
type DN8070 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec0))
type DN8069 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec9))
type DN8068 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec8))
type DN8067 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec7))
type DN8066 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec6))
type DN8065 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec5))
type DN8064 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec4))
type DN8063 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec3))
type DN8062 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec2))
type DN8061 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec1))
type DN8060 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec0))
type DN8059 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec9))
type DN8058 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec8))
type DN8057 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec7))
type DN8056 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec6))
type DN8055 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec5))
type DN8054 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec4))
type DN8053 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec3))
type DN8052 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec2))
type DN8051 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec1))
type DN8050 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec0))
type DN8049 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec9))
type DN8048 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec8))
type DN8047 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec7))
type DN8046 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec6))
type DN8045 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec5))
type DN8044 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec4))
type DN8043 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec3))
type DN8042 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec2))
type DN8041 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec1))
type DN8040 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec0))
type DN8039 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec9))
type DN8038 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec8))
type DN8037 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec7))
type DN8036 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec6))
type DN8035 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec5))
type DN8034 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec4))
type DN8033 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec3))
type DN8032 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec2))
type DN8031 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec1))
type DN8030 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec0))
type DN8029 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec9))
type DN8028 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec8))
type DN8027 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec7))
type DN8026 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec6))
type DN8025 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec5))
type DN8024 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec4))
type DN8023 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec3))
type DN8022 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec2))
type DN8021 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec1))
type DN8020 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec0))
type DN8019 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec9))
type DN8018 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec8))
type DN8017 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec7))
type DN8016 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec6))
type DN8015 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec5))
type DN8014 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec4))
type DN8013 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec3))
type DN8012 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec2))
type DN8011 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec1))
type DN8010 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec0))
type DN8009 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec9))
type DN8008 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec8))
type DN8007 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec7))
type DN8006 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec6))
type DN8005 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec5))
type DN8004 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec4))
type DN8003 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec3))
type DN8002 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec2))
type DN8001 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec1))
type DN8000 = Dec (Neg' (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec0))
type DN7999 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec9))
type DN7998 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec8))
type DN7997 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec7))
type DN7996 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec6))
type DN7995 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec5))
type DN7994 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec4))
type DN7993 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec3))
type DN7992 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec2))
type DN7991 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec1))
type DN7990 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec0))
type DN7989 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec9))
type DN7988 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec8))
type DN7987 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec7))
type DN7986 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec6))
type DN7985 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec5))
type DN7984 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec4))
type DN7983 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec3))
type DN7982 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec2))
type DN7981 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec1))
type DN7980 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec0))
type DN7979 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec9))
type DN7978 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec8))
type DN7977 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec7))
type DN7976 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec6))
type DN7975 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec5))
type DN7974 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec4))
type DN7973 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec3))
type DN7972 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec2))
type DN7971 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec1))
type DN7970 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec0))
type DN7969 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec9))
type DN7968 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec8))
type DN7967 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec7))
type DN7966 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec6))
type DN7965 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec5))
type DN7964 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec4))
type DN7963 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec3))
type DN7962 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec2))
type DN7961 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec1))
type DN7960 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec0))
type DN7959 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec9))
type DN7958 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec8))
type DN7957 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec7))
type DN7956 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec6))
type DN7955 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec5))
type DN7954 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec4))
type DN7953 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec3))
type DN7952 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec2))
type DN7951 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec1))
type DN7950 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec0))
type DN7949 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec9))
type DN7948 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec8))
type DN7947 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec7))
type DN7946 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec6))
type DN7945 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec5))
type DN7944 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec4))
type DN7943 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec3))
type DN7942 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec2))
type DN7941 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec1))
type DN7940 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec0))
type DN7939 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec9))
type DN7938 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec8))
type DN7937 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec7))
type DN7936 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec6))
type DN7935 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec5))
type DN7934 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec4))
type DN7933 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec3))
type DN7932 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec2))
type DN7931 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec1))
type DN7930 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec0))
type DN7929 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec9))
type DN7928 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec8))
type DN7927 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec7))
type DN7926 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec6))
type DN7925 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec5))
type DN7924 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec4))
type DN7923 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec3))
type DN7922 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec2))
type DN7921 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec1))
type DN7920 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec0))
type DN7919 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec9))
type DN7918 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec8))
type DN7917 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec7))
type DN7916 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec6))
type DN7915 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec5))
type DN7914 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec4))
type DN7913 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec3))
type DN7912 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec2))
type DN7911 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec1))
type DN7910 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec0))
type DN7909 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec9))
type DN7908 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec8))
type DN7907 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec7))
type DN7906 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec6))
type DN7905 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec5))
type DN7904 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec4))
type DN7903 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec3))
type DN7902 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec2))
type DN7901 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec1))
type DN7900 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec0))
type DN7899 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec9))
type DN7898 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec8))
type DN7897 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec7))
type DN7896 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec6))
type DN7895 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec5))
type DN7894 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec4))
type DN7893 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec3))
type DN7892 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec2))
type DN7891 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec1))
type DN7890 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec0))
type DN7889 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec9))
type DN7888 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec8))
type DN7887 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec7))
type DN7886 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec6))
type DN7885 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec5))
type DN7884 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec4))
type DN7883 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec3))
type DN7882 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec2))
type DN7881 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec1))
type DN7880 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec0))
type DN7879 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec9))
type DN7878 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec8))
type DN7877 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec7))
type DN7876 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec6))
type DN7875 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec5))
type DN7874 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec4))
type DN7873 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec3))
type DN7872 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec2))
type DN7871 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec1))
type DN7870 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec0))
type DN7869 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec9))
type DN7868 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec8))
type DN7867 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec7))
type DN7866 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec6))
type DN7865 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec5))
type DN7864 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec4))
type DN7863 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec3))
type DN7862 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec2))
type DN7861 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec1))
type DN7860 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec0))
type DN7859 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec9))
type DN7858 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec8))
type DN7857 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec7))
type DN7856 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec6))
type DN7855 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec5))
type DN7854 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec4))
type DN7853 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec3))
type DN7852 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec2))
type DN7851 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec1))
type DN7850 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec0))
type DN7849 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec9))
type DN7848 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec8))
type DN7847 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec7))
type DN7846 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec6))
type DN7845 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec5))
type DN7844 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec4))
type DN7843 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec3))
type DN7842 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec2))
type DN7841 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec1))
type DN7840 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec0))
type DN7839 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec9))
type DN7838 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec8))
type DN7837 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec7))
type DN7836 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec6))
type DN7835 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec5))
type DN7834 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec4))
type DN7833 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec3))
type DN7832 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec2))
type DN7831 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec1))
type DN7830 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec0))
type DN7829 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec9))
type DN7828 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec8))
type DN7827 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec7))
type DN7826 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec6))
type DN7825 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec5))
type DN7824 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec4))
type DN7823 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec3))
type DN7822 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec2))
type DN7821 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec1))
type DN7820 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec0))
type DN7819 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec9))
type DN7818 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec8))
type DN7817 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec7))
type DN7816 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec6))
type DN7815 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec5))
type DN7814 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec4))
type DN7813 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec3))
type DN7812 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec2))
type DN7811 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec1))
type DN7810 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec0))
type DN7809 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec9))
type DN7808 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec8))
type DN7807 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec7))
type DN7806 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec6))
type DN7805 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec5))
type DN7804 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec4))
type DN7803 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec3))
type DN7802 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec2))
type DN7801 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec1))
type DN7800 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec0))
type DN7799 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec9))
type DN7798 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec8))
type DN7797 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec7))
type DN7796 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec6))
type DN7795 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec5))
type DN7794 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec4))
type DN7793 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec3))
type DN7792 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec2))
type DN7791 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec1))
type DN7790 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec0))
type DN7789 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec9))
type DN7788 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec8))
type DN7787 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec7))
type DN7786 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec6))
type DN7785 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec5))
type DN7784 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec4))
type DN7783 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec3))
type DN7782 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec2))
type DN7781 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec1))
type DN7780 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec0))
type DN7779 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec9))
type DN7778 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec8))
type DN7777 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec7))
type DN7776 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec6))
type DN7775 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec5))
type DN7774 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec4))
type DN7773 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec3))
type DN7772 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec2))
type DN7771 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec1))
type DN7770 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec0))
type DN7769 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec9))
type DN7768 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec8))
type DN7767 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec7))
type DN7766 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec6))
type DN7765 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec5))
type DN7764 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec4))
type DN7763 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec3))
type DN7762 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec2))
type DN7761 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec1))
type DN7760 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec0))
type DN7759 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec9))
type DN7758 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec8))
type DN7757 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec7))
type DN7756 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec6))
type DN7755 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec5))
type DN7754 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec4))
type DN7753 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec3))
type DN7752 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec2))
type DN7751 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec1))
type DN7750 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec0))
type DN7749 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec9))
type DN7748 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec8))
type DN7747 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec7))
type DN7746 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec6))
type DN7745 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec5))
type DN7744 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec4))
type DN7743 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec3))
type DN7742 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec2))
type DN7741 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec1))
type DN7740 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec0))
type DN7739 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec9))
type DN7738 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec8))
type DN7737 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec7))
type DN7736 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec6))
type DN7735 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec5))
type DN7734 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec4))
type DN7733 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec3))
type DN7732 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec2))
type DN7731 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec1))
type DN7730 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec0))
type DN7729 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec9))
type DN7728 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec8))
type DN7727 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec7))
type DN7726 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec6))
type DN7725 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec5))
type DN7724 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec4))
type DN7723 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec3))
type DN7722 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec2))
type DN7721 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec1))
type DN7720 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec0))
type DN7719 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec9))
type DN7718 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec8))
type DN7717 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec7))
type DN7716 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec6))
type DN7715 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec5))
type DN7714 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec4))
type DN7713 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec3))
type DN7712 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec2))
type DN7711 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec1))
type DN7710 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec0))
type DN7709 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec9))
type DN7708 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec8))
type DN7707 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec7))
type DN7706 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec6))
type DN7705 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec5))
type DN7704 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec4))
type DN7703 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec3))
type DN7702 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec2))
type DN7701 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec1))
type DN7700 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec0))
type DN7699 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec9))
type DN7698 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec8))
type DN7697 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec7))
type DN7696 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec6))
type DN7695 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec5))
type DN7694 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec4))
type DN7693 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec3))
type DN7692 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec2))
type DN7691 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec1))
type DN7690 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec0))
type DN7689 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec9))
type DN7688 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec8))
type DN7687 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec7))
type DN7686 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec6))
type DN7685 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec5))
type DN7684 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec4))
type DN7683 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec3))
type DN7682 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec2))
type DN7681 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec1))
type DN7680 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec0))
type DN7679 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec9))
type DN7678 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec8))
type DN7677 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec7))
type DN7676 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec6))
type DN7675 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec5))
type DN7674 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec4))
type DN7673 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec3))
type DN7672 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec2))
type DN7671 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec1))
type DN7670 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec0))
type DN7669 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec9))
type DN7668 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec8))
type DN7667 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec7))
type DN7666 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec6))
type DN7665 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec5))
type DN7664 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec4))
type DN7663 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec3))
type DN7662 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec2))
type DN7661 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec1))
type DN7660 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec0))
type DN7659 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec9))
type DN7658 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec8))
type DN7657 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec7))
type DN7656 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec6))
type DN7655 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec5))
type DN7654 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec4))
type DN7653 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec3))
type DN7652 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec2))
type DN7651 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec1))
type DN7650 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec0))
type DN7649 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec9))
type DN7648 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec8))
type DN7647 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec7))
type DN7646 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec6))
type DN7645 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec5))
type DN7644 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec4))
type DN7643 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec3))
type DN7642 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec2))
type DN7641 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec1))
type DN7640 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec0))
type DN7639 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec9))
type DN7638 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec8))
type DN7637 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec7))
type DN7636 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec6))
type DN7635 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec5))
type DN7634 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec4))
type DN7633 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec3))
type DN7632 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec2))
type DN7631 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec1))
type DN7630 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec0))
type DN7629 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec9))
type DN7628 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec8))
type DN7627 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec7))
type DN7626 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec6))
type DN7625 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec5))
type DN7624 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec4))
type DN7623 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec3))
type DN7622 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec2))
type DN7621 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec1))
type DN7620 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec0))
type DN7619 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec9))
type DN7618 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec8))
type DN7617 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec7))
type DN7616 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec6))
type DN7615 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec5))
type DN7614 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec4))
type DN7613 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec3))
type DN7612 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec2))
type DN7611 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec1))
type DN7610 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec0))
type DN7609 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec9))
type DN7608 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec8))
type DN7607 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec7))
type DN7606 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec6))
type DN7605 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec5))
type DN7604 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec4))
type DN7603 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec3))
type DN7602 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec2))
type DN7601 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec1))
type DN7600 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec0))
type DN7599 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec9))
type DN7598 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec8))
type DN7597 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec7))
type DN7596 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec6))
type DN7595 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec5))
type DN7594 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec4))
type DN7593 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec3))
type DN7592 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec2))
type DN7591 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec1))
type DN7590 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec0))
type DN7589 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec9))
type DN7588 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec8))
type DN7587 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec7))
type DN7586 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec6))
type DN7585 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec5))
type DN7584 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec4))
type DN7583 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec3))
type DN7582 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec2))
type DN7581 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec1))
type DN7580 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec0))
type DN7579 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec9))
type DN7578 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec8))
type DN7577 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec7))
type DN7576 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec6))
type DN7575 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec5))
type DN7574 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec4))
type DN7573 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec3))
type DN7572 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec2))
type DN7571 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec1))
type DN7570 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec0))
type DN7569 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec9))
type DN7568 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec8))
type DN7567 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec7))
type DN7566 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec6))
type DN7565 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec5))
type DN7564 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec4))
type DN7563 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec3))
type DN7562 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec2))
type DN7561 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec1))
type DN7560 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec0))
type DN7559 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec9))
type DN7558 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec8))
type DN7557 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec7))
type DN7556 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec6))
type DN7555 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec5))
type DN7554 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec4))
type DN7553 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec3))
type DN7552 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec2))
type DN7551 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec1))
type DN7550 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec0))
type DN7549 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec9))
type DN7548 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec8))
type DN7547 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec7))
type DN7546 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec6))
type DN7545 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec5))
type DN7544 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec4))
type DN7543 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec3))
type DN7542 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec2))
type DN7541 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec1))
type DN7540 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec0))
type DN7539 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec9))
type DN7538 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec8))
type DN7537 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec7))
type DN7536 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec6))
type DN7535 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec5))
type DN7534 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec4))
type DN7533 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec3))
type DN7532 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec2))
type DN7531 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec1))
type DN7530 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec0))
type DN7529 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec9))
type DN7528 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec8))
type DN7527 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec7))
type DN7526 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec6))
type DN7525 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec5))
type DN7524 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec4))
type DN7523 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec3))
type DN7522 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec2))
type DN7521 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec1))
type DN7520 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec0))
type DN7519 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec9))
type DN7518 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec8))
type DN7517 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec7))
type DN7516 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec6))
type DN7515 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec5))
type DN7514 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec4))
type DN7513 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec3))
type DN7512 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec2))
type DN7511 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec1))
type DN7510 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec0))
type DN7509 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec9))
type DN7508 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec8))
type DN7507 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec7))
type DN7506 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec6))
type DN7505 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec5))
type DN7504 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec4))
type DN7503 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec3))
type DN7502 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec2))
type DN7501 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec1))
type DN7500 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec0))
type DN7499 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec9))
type DN7498 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec8))
type DN7497 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec7))
type DN7496 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec6))
type DN7495 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec5))
type DN7494 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec4))
type DN7493 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec3))
type DN7492 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec2))
type DN7491 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec1))
type DN7490 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec0))
type DN7489 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec9))
type DN7488 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec8))
type DN7487 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec7))
type DN7486 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec6))
type DN7485 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec5))
type DN7484 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec4))
type DN7483 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec3))
type DN7482 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec2))
type DN7481 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec1))
type DN7480 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec0))
type DN7479 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec9))
type DN7478 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec8))
type DN7477 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec7))
type DN7476 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec6))
type DN7475 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec5))
type DN7474 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec4))
type DN7473 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec3))
type DN7472 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec2))
type DN7471 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec1))
type DN7470 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec0))
type DN7469 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec9))
type DN7468 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec8))
type DN7467 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec7))
type DN7466 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec6))
type DN7465 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec5))
type DN7464 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec4))
type DN7463 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec3))
type DN7462 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec2))
type DN7461 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec1))
type DN7460 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec0))
type DN7459 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec9))
type DN7458 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec8))
type DN7457 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec7))
type DN7456 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec6))
type DN7455 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec5))
type DN7454 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec4))
type DN7453 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec3))
type DN7452 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec2))
type DN7451 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec1))
type DN7450 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec0))
type DN7449 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec9))
type DN7448 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec8))
type DN7447 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec7))
type DN7446 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec6))
type DN7445 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec5))
type DN7444 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec4))
type DN7443 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec3))
type DN7442 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec2))
type DN7441 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec1))
type DN7440 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec0))
type DN7439 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec9))
type DN7438 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec8))
type DN7437 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec7))
type DN7436 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec6))
type DN7435 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec5))
type DN7434 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec4))
type DN7433 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec3))
type DN7432 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec2))
type DN7431 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec1))
type DN7430 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec0))
type DN7429 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec9))
type DN7428 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec8))
type DN7427 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec7))
type DN7426 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec6))
type DN7425 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec5))
type DN7424 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec4))
type DN7423 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec3))
type DN7422 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec2))
type DN7421 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec1))
type DN7420 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec0))
type DN7419 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec9))
type DN7418 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec8))
type DN7417 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec7))
type DN7416 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec6))
type DN7415 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec5))
type DN7414 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec4))
type DN7413 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec3))
type DN7412 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec2))
type DN7411 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec1))
type DN7410 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec0))
type DN7409 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec9))
type DN7408 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec8))
type DN7407 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec7))
type DN7406 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec6))
type DN7405 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec5))
type DN7404 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec4))
type DN7403 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec3))
type DN7402 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec2))
type DN7401 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec1))
type DN7400 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec0))
type DN7399 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec9))
type DN7398 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec8))
type DN7397 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec7))
type DN7396 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec6))
type DN7395 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec5))
type DN7394 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec4))
type DN7393 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec3))
type DN7392 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec2))
type DN7391 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec1))
type DN7390 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec0))
type DN7389 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec9))
type DN7388 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec8))
type DN7387 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec7))
type DN7386 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec6))
type DN7385 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec5))
type DN7384 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec4))
type DN7383 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec3))
type DN7382 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec2))
type DN7381 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec1))
type DN7380 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec0))
type DN7379 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec9))
type DN7378 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec8))
type DN7377 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec7))
type DN7376 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec6))
type DN7375 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec5))
type DN7374 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec4))
type DN7373 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec3))
type DN7372 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec2))
type DN7371 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec1))
type DN7370 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec0))
type DN7369 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec9))
type DN7368 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec8))
type DN7367 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec7))
type DN7366 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec6))
type DN7365 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec5))
type DN7364 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec4))
type DN7363 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec3))
type DN7362 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec2))
type DN7361 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec1))
type DN7360 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec0))
type DN7359 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec9))
type DN7358 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec8))
type DN7357 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec7))
type DN7356 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec6))
type DN7355 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec5))
type DN7354 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec4))
type DN7353 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec3))
type DN7352 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec2))
type DN7351 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec1))
type DN7350 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec0))
type DN7349 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec9))
type DN7348 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec8))
type DN7347 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec7))
type DN7346 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec6))
type DN7345 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec5))
type DN7344 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec4))
type DN7343 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec3))
type DN7342 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec2))
type DN7341 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec1))
type DN7340 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec0))
type DN7339 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec9))
type DN7338 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec8))
type DN7337 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec7))
type DN7336 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec6))
type DN7335 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec5))
type DN7334 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec4))
type DN7333 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec3))
type DN7332 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec2))
type DN7331 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec1))
type DN7330 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec0))
type DN7329 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec9))
type DN7328 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec8))
type DN7327 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec7))
type DN7326 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec6))
type DN7325 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec5))
type DN7324 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec4))
type DN7323 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec3))
type DN7322 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec2))
type DN7321 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec1))
type DN7320 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec0))
type DN7319 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec9))
type DN7318 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec8))
type DN7317 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec7))
type DN7316 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec6))
type DN7315 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec5))
type DN7314 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec4))
type DN7313 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec3))
type DN7312 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec2))
type DN7311 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec1))
type DN7310 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec0))
type DN7309 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec9))
type DN7308 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec8))
type DN7307 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec7))
type DN7306 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec6))
type DN7305 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec5))
type DN7304 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec4))
type DN7303 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec3))
type DN7302 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec2))
type DN7301 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec1))
type DN7300 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec0))
type DN7299 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec9))
type DN7298 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec8))
type DN7297 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec7))
type DN7296 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec6))
type DN7295 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec5))
type DN7294 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec4))
type DN7293 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec3))
type DN7292 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec2))
type DN7291 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec1))
type DN7290 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec0))
type DN7289 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec9))
type DN7288 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec8))
type DN7287 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec7))
type DN7286 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec6))
type DN7285 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec5))
type DN7284 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec4))
type DN7283 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec3))
type DN7282 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec2))
type DN7281 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec1))
type DN7280 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec0))
type DN7279 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec9))
type DN7278 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec8))
type DN7277 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec7))
type DN7276 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec6))
type DN7275 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec5))
type DN7274 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec4))
type DN7273 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec3))
type DN7272 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec2))
type DN7271 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec1))
type DN7270 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec0))
type DN7269 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec9))
type DN7268 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec8))
type DN7267 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec7))
type DN7266 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec6))
type DN7265 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec5))
type DN7264 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec4))
type DN7263 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec3))
type DN7262 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec2))
type DN7261 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec1))
type DN7260 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec0))
type DN7259 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec9))
type DN7258 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec8))
type DN7257 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec7))
type DN7256 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec6))
type DN7255 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec5))
type DN7254 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec4))
type DN7253 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec3))
type DN7252 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec2))
type DN7251 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec1))
type DN7250 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec0))
type DN7249 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec9))
type DN7248 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec8))
type DN7247 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec7))
type DN7246 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec6))
type DN7245 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec5))
type DN7244 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec4))
type DN7243 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec3))
type DN7242 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec2))
type DN7241 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec1))
type DN7240 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec0))
type DN7239 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec9))
type DN7238 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec8))
type DN7237 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec7))
type DN7236 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec6))
type DN7235 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec5))
type DN7234 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec4))
type DN7233 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec3))
type DN7232 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec2))
type DN7231 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec1))
type DN7230 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec0))
type DN7229 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec9))
type DN7228 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec8))
type DN7227 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec7))
type DN7226 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec6))
type DN7225 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec5))
type DN7224 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec4))
type DN7223 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec3))
type DN7222 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec2))
type DN7221 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec1))
type DN7220 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec0))
type DN7219 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec9))
type DN7218 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec8))
type DN7217 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec7))
type DN7216 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec6))
type DN7215 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec5))
type DN7214 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec4))
type DN7213 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec3))
type DN7212 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec2))
type DN7211 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec1))
type DN7210 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec0))
type DN7209 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec9))
type DN7208 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec8))
type DN7207 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec7))
type DN7206 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec6))
type DN7205 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec5))
type DN7204 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec4))
type DN7203 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec3))
type DN7202 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec2))
type DN7201 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec1))
type DN7200 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec0))
type DN7199 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec9))
type DN7198 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec8))
type DN7197 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec7))
type DN7196 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec6))
type DN7195 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec5))
type DN7194 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec4))
type DN7193 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec3))
type DN7192 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec2))
type DN7191 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec1))
type DN7190 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec0))
type DN7189 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec9))
type DN7188 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec8))
type DN7187 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec7))
type DN7186 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec6))
type DN7185 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec5))
type DN7184 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec4))
type DN7183 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec3))
type DN7182 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec2))
type DN7181 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec1))
type DN7180 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec0))
type DN7179 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec9))
type DN7178 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec8))
type DN7177 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec7))
type DN7176 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec6))
type DN7175 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec5))
type DN7174 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec4))
type DN7173 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec3))
type DN7172 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec2))
type DN7171 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec1))
type DN7170 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec0))
type DN7169 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec9))
type DN7168 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec8))
type DN7167 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec7))
type DN7166 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec6))
type DN7165 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec5))
type DN7164 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec4))
type DN7163 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec3))
type DN7162 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec2))
type DN7161 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec1))
type DN7160 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec0))
type DN7159 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec9))
type DN7158 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec8))
type DN7157 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec7))
type DN7156 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec6))
type DN7155 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec5))
type DN7154 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec4))
type DN7153 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec3))
type DN7152 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec2))
type DN7151 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec1))
type DN7150 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec0))
type DN7149 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec9))
type DN7148 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec8))
type DN7147 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec7))
type DN7146 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec6))
type DN7145 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec5))
type DN7144 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec4))
type DN7143 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec3))
type DN7142 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec2))
type DN7141 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec1))
type DN7140 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec0))
type DN7139 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec9))
type DN7138 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec8))
type DN7137 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec7))
type DN7136 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec6))
type DN7135 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec5))
type DN7134 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec4))
type DN7133 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec3))
type DN7132 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec2))
type DN7131 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec1))
type DN7130 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec0))
type DN7129 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec9))
type DN7128 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec8))
type DN7127 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec7))
type DN7126 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec6))
type DN7125 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec5))
type DN7124 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec4))
type DN7123 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec3))
type DN7122 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec2))
type DN7121 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec1))
type DN7120 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec0))
type DN7119 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec9))
type DN7118 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec8))
type DN7117 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec7))
type DN7116 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec6))
type DN7115 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec5))
type DN7114 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec4))
type DN7113 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec3))
type DN7112 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec2))
type DN7111 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec1))
type DN7110 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec0))
type DN7109 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec9))
type DN7108 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec8))
type DN7107 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec7))
type DN7106 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec6))
type DN7105 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec5))
type DN7104 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec4))
type DN7103 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec3))
type DN7102 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec2))
type DN7101 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec1))
type DN7100 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec0))
type DN7099 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec9))
type DN7098 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec8))
type DN7097 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec7))
type DN7096 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec6))
type DN7095 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec5))
type DN7094 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec4))
type DN7093 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec3))
type DN7092 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec2))
type DN7091 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec1))
type DN7090 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec0))
type DN7089 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec9))
type DN7088 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec8))
type DN7087 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec7))
type DN7086 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec6))
type DN7085 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec5))
type DN7084 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec4))
type DN7083 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec3))
type DN7082 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec2))
type DN7081 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec1))
type DN7080 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec0))
type DN7079 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec9))
type DN7078 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec8))
type DN7077 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec7))
type DN7076 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec6))
type DN7075 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec5))
type DN7074 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec4))
type DN7073 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec3))
type DN7072 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec2))
type DN7071 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec1))
type DN7070 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec0))
type DN7069 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec9))
type DN7068 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec8))
type DN7067 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec7))
type DN7066 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec6))
type DN7065 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec5))
type DN7064 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec4))
type DN7063 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec3))
type DN7062 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec2))
type DN7061 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec1))
type DN7060 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec0))
type DN7059 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec9))
type DN7058 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec8))
type DN7057 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec7))
type DN7056 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec6))
type DN7055 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec5))
type DN7054 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec4))
type DN7053 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec3))
type DN7052 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec2))
type DN7051 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec1))
type DN7050 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec0))
type DN7049 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec9))
type DN7048 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec8))
type DN7047 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec7))
type DN7046 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec6))
type DN7045 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec5))
type DN7044 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec4))
type DN7043 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec3))
type DN7042 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec2))
type DN7041 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec1))
type DN7040 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec0))
type DN7039 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec9))
type DN7038 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec8))
type DN7037 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec7))
type DN7036 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec6))
type DN7035 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec5))
type DN7034 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec4))
type DN7033 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec3))
type DN7032 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec2))
type DN7031 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec1))
type DN7030 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec0))
type DN7029 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec9))
type DN7028 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec8))
type DN7027 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec7))
type DN7026 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec6))
type DN7025 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec5))
type DN7024 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec4))
type DN7023 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec3))
type DN7022 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec2))
type DN7021 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec1))
type DN7020 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec0))
type DN7019 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec9))
type DN7018 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec8))
type DN7017 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec7))
type DN7016 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec6))
type DN7015 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec5))
type DN7014 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec4))
type DN7013 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec3))
type DN7012 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec2))
type DN7011 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec1))
type DN7010 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec0))
type DN7009 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec9))
type DN7008 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec8))
type DN7007 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec7))
type DN7006 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec6))
type DN7005 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec5))
type DN7004 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec4))
type DN7003 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec3))
type DN7002 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec2))
type DN7001 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec1))
type DN7000 = Dec (Neg' (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec0))
type DN6999 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec9))
type DN6998 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec8))
type DN6997 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec7))
type DN6996 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec6))
type DN6995 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec5))
type DN6994 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec4))
type DN6993 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec3))
type DN6992 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec2))
type DN6991 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec1))
type DN6990 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec0))
type DN6989 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec9))
type DN6988 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec8))
type DN6987 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec7))
type DN6986 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec6))
type DN6985 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec5))
type DN6984 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec4))
type DN6983 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec3))
type DN6982 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec2))
type DN6981 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec1))
type DN6980 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec0))
type DN6979 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec9))
type DN6978 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec8))
type DN6977 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec7))
type DN6976 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec6))
type DN6975 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec5))
type DN6974 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec4))
type DN6973 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec3))
type DN6972 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec2))
type DN6971 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec1))
type DN6970 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec0))
type DN6969 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec9))
type DN6968 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec8))
type DN6967 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec7))
type DN6966 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec6))
type DN6965 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec5))
type DN6964 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec4))
type DN6963 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec3))
type DN6962 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec2))
type DN6961 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec1))
type DN6960 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec0))
type DN6959 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec9))
type DN6958 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec8))
type DN6957 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec7))
type DN6956 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec6))
type DN6955 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec5))
type DN6954 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec4))
type DN6953 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec3))
type DN6952 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec2))
type DN6951 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec1))
type DN6950 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec0))
type DN6949 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec9))
type DN6948 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec8))
type DN6947 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec7))
type DN6946 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec6))
type DN6945 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec5))
type DN6944 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec4))
type DN6943 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec3))
type DN6942 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec2))
type DN6941 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec1))
type DN6940 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec0))
type DN6939 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec9))
type DN6938 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec8))
type DN6937 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec7))
type DN6936 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec6))
type DN6935 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec5))
type DN6934 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec4))
type DN6933 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec3))
type DN6932 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec2))
type DN6931 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec1))
type DN6930 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec0))
type DN6929 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec9))
type DN6928 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec8))
type DN6927 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec7))
type DN6926 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec6))
type DN6925 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec5))
type DN6924 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec4))
type DN6923 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec3))
type DN6922 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec2))
type DN6921 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec1))
type DN6920 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec0))
type DN6919 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec9))
type DN6918 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec8))
type DN6917 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec7))
type DN6916 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec6))
type DN6915 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec5))
type DN6914 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec4))
type DN6913 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec3))
type DN6912 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec2))
type DN6911 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec1))
type DN6910 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec0))
type DN6909 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec9))
type DN6908 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec8))
type DN6907 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec7))
type DN6906 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec6))
type DN6905 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec5))
type DN6904 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec4))
type DN6903 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec3))
type DN6902 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec2))
type DN6901 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec1))
type DN6900 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec0))
type DN6899 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec9))
type DN6898 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec8))
type DN6897 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec7))
type DN6896 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec6))
type DN6895 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec5))
type DN6894 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec4))
type DN6893 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec3))
type DN6892 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec2))
type DN6891 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec1))
type DN6890 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec0))
type DN6889 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec9))
type DN6888 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec8))
type DN6887 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec7))
type DN6886 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec6))
type DN6885 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec5))
type DN6884 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec4))
type DN6883 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec3))
type DN6882 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec2))
type DN6881 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec1))
type DN6880 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec0))
type DN6879 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec9))
type DN6878 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec8))
type DN6877 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec7))
type DN6876 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec6))
type DN6875 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec5))
type DN6874 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec4))
type DN6873 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec3))
type DN6872 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec2))
type DN6871 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec1))
type DN6870 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec0))
type DN6869 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec9))
type DN6868 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec8))
type DN6867 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec7))
type DN6866 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec6))
type DN6865 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec5))
type DN6864 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec4))
type DN6863 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec3))
type DN6862 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec2))
type DN6861 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec1))
type DN6860 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec0))
type DN6859 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec9))
type DN6858 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec8))
type DN6857 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec7))
type DN6856 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec6))
type DN6855 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec5))
type DN6854 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec4))
type DN6853 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec3))
type DN6852 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec2))
type DN6851 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec1))
type DN6850 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec0))
type DN6849 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec9))
type DN6848 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec8))
type DN6847 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec7))
type DN6846 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec6))
type DN6845 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec5))
type DN6844 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec4))
type DN6843 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec3))
type DN6842 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec2))
type DN6841 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec1))
type DN6840 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec0))
type DN6839 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec9))
type DN6838 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec8))
type DN6837 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec7))
type DN6836 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec6))
type DN6835 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec5))
type DN6834 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec4))
type DN6833 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec3))
type DN6832 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec2))
type DN6831 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec1))
type DN6830 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec0))
type DN6829 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec9))
type DN6828 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec8))
type DN6827 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec7))
type DN6826 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec6))
type DN6825 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec5))
type DN6824 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec4))
type DN6823 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec3))
type DN6822 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec2))
type DN6821 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec1))
type DN6820 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec0))
type DN6819 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec9))
type DN6818 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec8))
type DN6817 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec7))
type DN6816 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec6))
type DN6815 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec5))
type DN6814 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec4))
type DN6813 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec3))
type DN6812 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec2))
type DN6811 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec1))
type DN6810 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec0))
type DN6809 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec9))
type DN6808 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec8))
type DN6807 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec7))
type DN6806 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec6))
type DN6805 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec5))
type DN6804 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec4))
type DN6803 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec3))
type DN6802 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec2))
type DN6801 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec1))
type DN6800 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec0))
type DN6799 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec9))
type DN6798 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec8))
type DN6797 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec7))
type DN6796 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec6))
type DN6795 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec5))
type DN6794 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec4))
type DN6793 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec3))
type DN6792 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec2))
type DN6791 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec1))
type DN6790 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec0))
type DN6789 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec9))
type DN6788 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec8))
type DN6787 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec7))
type DN6786 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec6))
type DN6785 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec5))
type DN6784 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec4))
type DN6783 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec3))
type DN6782 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec2))
type DN6781 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec1))
type DN6780 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec0))
type DN6779 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec9))
type DN6778 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec8))
type DN6777 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec7))
type DN6776 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec6))
type DN6775 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec5))
type DN6774 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec4))
type DN6773 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec3))
type DN6772 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec2))
type DN6771 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec1))
type DN6770 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec0))
type DN6769 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec9))
type DN6768 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec8))
type DN6767 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec7))
type DN6766 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec6))
type DN6765 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec5))
type DN6764 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec4))
type DN6763 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec3))
type DN6762 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec2))
type DN6761 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec1))
type DN6760 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec0))
type DN6759 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec9))
type DN6758 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec8))
type DN6757 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec7))
type DN6756 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec6))
type DN6755 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec5))
type DN6754 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec4))
type DN6753 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec3))
type DN6752 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec2))
type DN6751 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec1))
type DN6750 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec0))
type DN6749 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec9))
type DN6748 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec8))
type DN6747 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec7))
type DN6746 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec6))
type DN6745 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec5))
type DN6744 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec4))
type DN6743 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec3))
type DN6742 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec2))
type DN6741 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec1))
type DN6740 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec0))
type DN6739 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec9))
type DN6738 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec8))
type DN6737 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec7))
type DN6736 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec6))
type DN6735 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec5))
type DN6734 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec4))
type DN6733 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec3))
type DN6732 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec2))
type DN6731 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec1))
type DN6730 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec0))
type DN6729 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec9))
type DN6728 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec8))
type DN6727 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec7))
type DN6726 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec6))
type DN6725 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec5))
type DN6724 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec4))
type DN6723 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec3))
type DN6722 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec2))
type DN6721 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec1))
type DN6720 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec0))
type DN6719 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec9))
type DN6718 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec8))
type DN6717 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec7))
type DN6716 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec6))
type DN6715 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec5))
type DN6714 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec4))
type DN6713 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec3))
type DN6712 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec2))
type DN6711 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec1))
type DN6710 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec0))
type DN6709 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec9))
type DN6708 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec8))
type DN6707 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec7))
type DN6706 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec6))
type DN6705 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec5))
type DN6704 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec4))
type DN6703 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec3))
type DN6702 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec2))
type DN6701 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec1))
type DN6700 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec0))
type DN6699 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec9))
type DN6698 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec8))
type DN6697 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec7))
type DN6696 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec6))
type DN6695 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec5))
type DN6694 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec4))
type DN6693 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec3))
type DN6692 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec2))
type DN6691 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec1))
type DN6690 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec0))
type DN6689 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec9))
type DN6688 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec8))
type DN6687 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec7))
type DN6686 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec6))
type DN6685 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec5))
type DN6684 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec4))
type DN6683 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec3))
type DN6682 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec2))
type DN6681 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec1))
type DN6680 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec0))
type DN6679 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec9))
type DN6678 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec8))
type DN6677 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec7))
type DN6676 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec6))
type DN6675 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec5))
type DN6674 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec4))
type DN6673 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec3))
type DN6672 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec2))
type DN6671 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec1))
type DN6670 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec0))
type DN6669 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec9))
type DN6668 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec8))
type DN6667 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec7))
type DN6666 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec6))
type DN6665 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec5))
type DN6664 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec4))
type DN6663 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec3))
type DN6662 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec2))
type DN6661 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec1))
type DN6660 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec0))
type DN6659 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec9))
type DN6658 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec8))
type DN6657 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec7))
type DN6656 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec6))
type DN6655 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec5))
type DN6654 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec4))
type DN6653 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec3))
type DN6652 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec2))
type DN6651 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec1))
type DN6650 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec0))
type DN6649 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec9))
type DN6648 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec8))
type DN6647 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec7))
type DN6646 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec6))
type DN6645 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec5))
type DN6644 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec4))
type DN6643 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec3))
type DN6642 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec2))
type DN6641 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec1))
type DN6640 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec0))
type DN6639 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec9))
type DN6638 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec8))
type DN6637 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec7))
type DN6636 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec6))
type DN6635 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec5))
type DN6634 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec4))
type DN6633 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec3))
type DN6632 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec2))
type DN6631 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec1))
type DN6630 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec0))
type DN6629 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec9))
type DN6628 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec8))
type DN6627 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec7))
type DN6626 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec6))
type DN6625 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec5))
type DN6624 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec4))
type DN6623 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec3))
type DN6622 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec2))
type DN6621 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec1))
type DN6620 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec0))
type DN6619 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec9))
type DN6618 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec8))
type DN6617 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec7))
type DN6616 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec6))
type DN6615 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec5))
type DN6614 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec4))
type DN6613 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec3))
type DN6612 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec2))
type DN6611 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec1))
type DN6610 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec0))
type DN6609 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec9))
type DN6608 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec8))
type DN6607 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec7))
type DN6606 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec6))
type DN6605 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec5))
type DN6604 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec4))
type DN6603 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec3))
type DN6602 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec2))
type DN6601 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec1))
type DN6600 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec0))
type DN6599 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec9))
type DN6598 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec8))
type DN6597 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec7))
type DN6596 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec6))
type DN6595 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec5))
type DN6594 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec4))
type DN6593 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec3))
type DN6592 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec2))
type DN6591 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec1))
type DN6590 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec0))
type DN6589 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec9))
type DN6588 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec8))
type DN6587 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec7))
type DN6586 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec6))
type DN6585 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec5))
type DN6584 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec4))
type DN6583 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec3))
type DN6582 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec2))
type DN6581 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec1))
type DN6580 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec0))
type DN6579 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec9))
type DN6578 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec8))
type DN6577 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec7))
type DN6576 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec6))
type DN6575 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec5))
type DN6574 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec4))
type DN6573 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec3))
type DN6572 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec2))
type DN6571 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec1))
type DN6570 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec0))
type DN6569 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec9))
type DN6568 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec8))
type DN6567 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec7))
type DN6566 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec6))
type DN6565 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec5))
type DN6564 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec4))
type DN6563 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec3))
type DN6562 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec2))
type DN6561 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec1))
type DN6560 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec0))
type DN6559 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec9))
type DN6558 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec8))
type DN6557 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec7))
type DN6556 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec6))
type DN6555 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec5))
type DN6554 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec4))
type DN6553 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec3))
type DN6552 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec2))
type DN6551 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec1))
type DN6550 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec0))
type DN6549 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec9))
type DN6548 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec8))
type DN6547 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec7))
type DN6546 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec6))
type DN6545 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec5))
type DN6544 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec4))
type DN6543 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec3))
type DN6542 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec2))
type DN6541 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec1))
type DN6540 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec0))
type DN6539 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec9))
type DN6538 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec8))
type DN6537 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec7))
type DN6536 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec6))
type DN6535 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec5))
type DN6534 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec4))
type DN6533 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec3))
type DN6532 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec2))
type DN6531 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec1))
type DN6530 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec0))
type DN6529 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec9))
type DN6528 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec8))
type DN6527 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec7))
type DN6526 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec6))
type DN6525 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec5))
type DN6524 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec4))
type DN6523 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec3))
type DN6522 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec2))
type DN6521 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec1))
type DN6520 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec0))
type DN6519 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec9))
type DN6518 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec8))
type DN6517 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec7))
type DN6516 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec6))
type DN6515 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec5))
type DN6514 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec4))
type DN6513 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec3))
type DN6512 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec2))
type DN6511 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec1))
type DN6510 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec0))
type DN6509 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec9))
type DN6508 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec8))
type DN6507 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec7))
type DN6506 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec6))
type DN6505 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec5))
type DN6504 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec4))
type DN6503 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec3))
type DN6502 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec2))
type DN6501 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec1))
type DN6500 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec0))
type DN6499 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec9))
type DN6498 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec8))
type DN6497 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec7))
type DN6496 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec6))
type DN6495 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec5))
type DN6494 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec4))
type DN6493 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec3))
type DN6492 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec2))
type DN6491 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec1))
type DN6490 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec0))
type DN6489 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec9))
type DN6488 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec8))
type DN6487 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec7))
type DN6486 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec6))
type DN6485 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec5))
type DN6484 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec4))
type DN6483 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec3))
type DN6482 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec2))
type DN6481 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec1))
type DN6480 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec0))
type DN6479 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec9))
type DN6478 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec8))
type DN6477 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec7))
type DN6476 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec6))
type DN6475 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec5))
type DN6474 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec4))
type DN6473 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec3))
type DN6472 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec2))
type DN6471 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec1))
type DN6470 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec0))
type DN6469 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec9))
type DN6468 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec8))
type DN6467 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec7))
type DN6466 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec6))
type DN6465 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec5))
type DN6464 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec4))
type DN6463 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec3))
type DN6462 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec2))
type DN6461 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec1))
type DN6460 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec0))
type DN6459 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec9))
type DN6458 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec8))
type DN6457 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec7))
type DN6456 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec6))
type DN6455 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec5))
type DN6454 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec4))
type DN6453 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec3))
type DN6452 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec2))
type DN6451 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec1))
type DN6450 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec0))
type DN6449 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec9))
type DN6448 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec8))
type DN6447 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec7))
type DN6446 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec6))
type DN6445 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec5))
type DN6444 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec4))
type DN6443 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec3))
type DN6442 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec2))
type DN6441 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec1))
type DN6440 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec0))
type DN6439 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec9))
type DN6438 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec8))
type DN6437 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec7))
type DN6436 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec6))
type DN6435 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec5))
type DN6434 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec4))
type DN6433 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec3))
type DN6432 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec2))
type DN6431 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec1))
type DN6430 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec0))
type DN6429 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec9))
type DN6428 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec8))
type DN6427 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec7))
type DN6426 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec6))
type DN6425 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec5))
type DN6424 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec4))
type DN6423 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec3))
type DN6422 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec2))
type DN6421 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec1))
type DN6420 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec0))
type DN6419 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec9))
type DN6418 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec8))
type DN6417 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec7))
type DN6416 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec6))
type DN6415 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec5))
type DN6414 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec4))
type DN6413 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec3))
type DN6412 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec2))
type DN6411 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec1))
type DN6410 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec0))
type DN6409 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec9))
type DN6408 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec8))
type DN6407 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec7))
type DN6406 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec6))
type DN6405 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec5))
type DN6404 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec4))
type DN6403 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec3))
type DN6402 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec2))
type DN6401 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec1))
type DN6400 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec0))
type DN6399 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec9))
type DN6398 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec8))
type DN6397 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec7))
type DN6396 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec6))
type DN6395 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec5))
type DN6394 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec4))
type DN6393 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec3))
type DN6392 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec2))
type DN6391 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec1))
type DN6390 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec0))
type DN6389 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec9))
type DN6388 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec8))
type DN6387 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec7))
type DN6386 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec6))
type DN6385 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec5))
type DN6384 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec4))
type DN6383 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec3))
type DN6382 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec2))
type DN6381 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec1))
type DN6380 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec0))
type DN6379 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec9))
type DN6378 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec8))
type DN6377 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec7))
type DN6376 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec6))
type DN6375 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec5))
type DN6374 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec4))
type DN6373 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec3))
type DN6372 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec2))
type DN6371 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec1))
type DN6370 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec0))
type DN6369 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec9))
type DN6368 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec8))
type DN6367 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec7))
type DN6366 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec6))
type DN6365 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec5))
type DN6364 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec4))
type DN6363 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec3))
type DN6362 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec2))
type DN6361 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec1))
type DN6360 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec0))
type DN6359 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec9))
type DN6358 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec8))
type DN6357 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec7))
type DN6356 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec6))
type DN6355 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec5))
type DN6354 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec4))
type DN6353 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec3))
type DN6352 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec2))
type DN6351 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec1))
type DN6350 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec0))
type DN6349 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec9))
type DN6348 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec8))
type DN6347 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec7))
type DN6346 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec6))
type DN6345 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec5))
type DN6344 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec4))
type DN6343 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec3))
type DN6342 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec2))
type DN6341 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec1))
type DN6340 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec0))
type DN6339 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec9))
type DN6338 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec8))
type DN6337 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec7))
type DN6336 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec6))
type DN6335 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec5))
type DN6334 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec4))
type DN6333 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec3))
type DN6332 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec2))
type DN6331 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec1))
type DN6330 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec0))
type DN6329 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec9))
type DN6328 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec8))
type DN6327 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec7))
type DN6326 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec6))
type DN6325 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec5))
type DN6324 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec4))
type DN6323 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec3))
type DN6322 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec2))
type DN6321 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec1))
type DN6320 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec0))
type DN6319 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec9))
type DN6318 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec8))
type DN6317 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec7))
type DN6316 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec6))
type DN6315 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec5))
type DN6314 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec4))
type DN6313 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec3))
type DN6312 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec2))
type DN6311 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec1))
type DN6310 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec0))
type DN6309 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec9))
type DN6308 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec8))
type DN6307 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec7))
type DN6306 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec6))
type DN6305 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec5))
type DN6304 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec4))
type DN6303 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec3))
type DN6302 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec2))
type DN6301 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec1))
type DN6300 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec0))
type DN6299 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec9))
type DN6298 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec8))
type DN6297 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec7))
type DN6296 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec6))
type DN6295 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec5))
type DN6294 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec4))
type DN6293 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec3))
type DN6292 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec2))
type DN6291 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec1))
type DN6290 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec0))
type DN6289 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec9))
type DN6288 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec8))
type DN6287 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec7))
type DN6286 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec6))
type DN6285 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec5))
type DN6284 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec4))
type DN6283 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec3))
type DN6282 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec2))
type DN6281 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec1))
type DN6280 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec0))
type DN6279 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec9))
type DN6278 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec8))
type DN6277 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec7))
type DN6276 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec6))
type DN6275 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec5))
type DN6274 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec4))
type DN6273 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec3))
type DN6272 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec2))
type DN6271 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec1))
type DN6270 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec0))
type DN6269 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec9))
type DN6268 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec8))
type DN6267 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec7))
type DN6266 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec6))
type DN6265 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec5))
type DN6264 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec4))
type DN6263 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec3))
type DN6262 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec2))
type DN6261 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec1))
type DN6260 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec0))
type DN6259 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec9))
type DN6258 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec8))
type DN6257 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec7))
type DN6256 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec6))
type DN6255 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec5))
type DN6254 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec4))
type DN6253 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec3))
type DN6252 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec2))
type DN6251 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec1))
type DN6250 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec0))
type DN6249 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec9))
type DN6248 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec8))
type DN6247 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec7))
type DN6246 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec6))
type DN6245 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec5))
type DN6244 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec4))
type DN6243 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec3))
type DN6242 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec2))
type DN6241 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec1))
type DN6240 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec0))
type DN6239 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec9))
type DN6238 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec8))
type DN6237 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec7))
type DN6236 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec6))
type DN6235 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec5))
type DN6234 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec4))
type DN6233 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec3))
type DN6232 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec2))
type DN6231 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec1))
type DN6230 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec0))
type DN6229 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec9))
type DN6228 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec8))
type DN6227 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec7))
type DN6226 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec6))
type DN6225 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec5))
type DN6224 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec4))
type DN6223 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec3))
type DN6222 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec2))
type DN6221 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec1))
type DN6220 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec0))
type DN6219 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec9))
type DN6218 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec8))
type DN6217 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec7))
type DN6216 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec6))
type DN6215 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec5))
type DN6214 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec4))
type DN6213 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec3))
type DN6212 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec2))
type DN6211 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec1))
type DN6210 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec0))
type DN6209 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec9))
type DN6208 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec8))
type DN6207 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec7))
type DN6206 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec6))
type DN6205 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec5))
type DN6204 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec4))
type DN6203 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec3))
type DN6202 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec2))
type DN6201 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec1))
type DN6200 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec0))
type DN6199 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec9))
type DN6198 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec8))
type DN6197 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec7))
type DN6196 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec6))
type DN6195 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec5))
type DN6194 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec4))
type DN6193 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec3))
type DN6192 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec2))
type DN6191 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec1))
type DN6190 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec0))
type DN6189 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec9))
type DN6188 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec8))
type DN6187 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec7))
type DN6186 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec6))
type DN6185 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec5))
type DN6184 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec4))
type DN6183 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec3))
type DN6182 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec2))
type DN6181 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec1))
type DN6180 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec0))
type DN6179 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec9))
type DN6178 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec8))
type DN6177 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec7))
type DN6176 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec6))
type DN6175 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec5))
type DN6174 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec4))
type DN6173 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec3))
type DN6172 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec2))
type DN6171 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec1))
type DN6170 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec0))
type DN6169 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec9))
type DN6168 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec8))
type DN6167 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec7))
type DN6166 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec6))
type DN6165 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec5))
type DN6164 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec4))
type DN6163 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec3))
type DN6162 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec2))
type DN6161 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec1))
type DN6160 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec0))
type DN6159 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec9))
type DN6158 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec8))
type DN6157 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec7))
type DN6156 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec6))
type DN6155 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec5))
type DN6154 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec4))
type DN6153 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec3))
type DN6152 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec2))
type DN6151 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec1))
type DN6150 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec0))
type DN6149 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec9))
type DN6148 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec8))
type DN6147 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec7))
type DN6146 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec6))
type DN6145 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec5))
type DN6144 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec4))
type DN6143 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec3))
type DN6142 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec2))
type DN6141 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec1))
type DN6140 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec0))
type DN6139 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec9))
type DN6138 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec8))
type DN6137 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec7))
type DN6136 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec6))
type DN6135 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec5))
type DN6134 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec4))
type DN6133 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec3))
type DN6132 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec2))
type DN6131 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec1))
type DN6130 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec0))
type DN6129 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec9))
type DN6128 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec8))
type DN6127 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec7))
type DN6126 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec6))
type DN6125 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec5))
type DN6124 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec4))
type DN6123 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec3))
type DN6122 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec2))
type DN6121 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec1))
type DN6120 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec0))
type DN6119 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec9))
type DN6118 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec8))
type DN6117 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec7))
type DN6116 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec6))
type DN6115 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec5))
type DN6114 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec4))
type DN6113 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec3))
type DN6112 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec2))
type DN6111 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec1))
type DN6110 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec0))
type DN6109 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec9))
type DN6108 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec8))
type DN6107 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec7))
type DN6106 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec6))
type DN6105 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec5))
type DN6104 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec4))
type DN6103 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec3))
type DN6102 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec2))
type DN6101 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec1))
type DN6100 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec0))
type DN6099 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec9))
type DN6098 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec8))
type DN6097 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec7))
type DN6096 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec6))
type DN6095 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec5))
type DN6094 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec4))
type DN6093 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec3))
type DN6092 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec2))
type DN6091 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec1))
type DN6090 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec0))
type DN6089 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec9))
type DN6088 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec8))
type DN6087 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec7))
type DN6086 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec6))
type DN6085 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec5))
type DN6084 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec4))
type DN6083 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec3))
type DN6082 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec2))
type DN6081 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec1))
type DN6080 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec0))
type DN6079 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec9))
type DN6078 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec8))
type DN6077 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec7))
type DN6076 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec6))
type DN6075 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec5))
type DN6074 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec4))
type DN6073 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec3))
type DN6072 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec2))
type DN6071 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec1))
type DN6070 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec0))
type DN6069 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec9))
type DN6068 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec8))
type DN6067 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec7))
type DN6066 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec6))
type DN6065 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec5))
type DN6064 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec4))
type DN6063 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec3))
type DN6062 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec2))
type DN6061 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec1))
type DN6060 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec0))
type DN6059 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec9))
type DN6058 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec8))
type DN6057 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec7))
type DN6056 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec6))
type DN6055 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec5))
type DN6054 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec4))
type DN6053 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec3))
type DN6052 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec2))
type DN6051 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec1))
type DN6050 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec0))
type DN6049 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec9))
type DN6048 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec8))
type DN6047 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec7))
type DN6046 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec6))
type DN6045 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec5))
type DN6044 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec4))
type DN6043 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec3))
type DN6042 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec2))
type DN6041 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec1))
type DN6040 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec0))
type DN6039 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec9))
type DN6038 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec8))
type DN6037 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec7))
type DN6036 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec6))
type DN6035 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec5))
type DN6034 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec4))
type DN6033 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec3))
type DN6032 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec2))
type DN6031 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec1))
type DN6030 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec0))
type DN6029 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec9))
type DN6028 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec8))
type DN6027 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec7))
type DN6026 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec6))
type DN6025 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec5))
type DN6024 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec4))
type DN6023 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec3))
type DN6022 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec2))
type DN6021 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec1))
type DN6020 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec0))
type DN6019 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec9))
type DN6018 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec8))
type DN6017 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec7))
type DN6016 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec6))
type DN6015 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec5))
type DN6014 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec4))
type DN6013 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec3))
type DN6012 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec2))
type DN6011 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec1))
type DN6010 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec0))
type DN6009 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec9))
type DN6008 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec8))
type DN6007 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec7))
type DN6006 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec6))
type DN6005 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec5))
type DN6004 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec4))
type DN6003 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec3))
type DN6002 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec2))
type DN6001 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec1))
type DN6000 = Dec (Neg' (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec0))
type DN5999 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec9))
type DN5998 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec8))
type DN5997 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec7))
type DN5996 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec6))
type DN5995 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec5))
type DN5994 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec4))
type DN5993 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec3))
type DN5992 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec2))
type DN5991 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec1))
type DN5990 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec0))
type DN5989 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec9))
type DN5988 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec8))
type DN5987 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec7))
type DN5986 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec6))
type DN5985 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec5))
type DN5984 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec4))
type DN5983 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec3))
type DN5982 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec2))
type DN5981 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec1))
type DN5980 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec0))
type DN5979 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec9))
type DN5978 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec8))
type DN5977 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec7))
type DN5976 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec6))
type DN5975 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec5))
type DN5974 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec4))
type DN5973 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec3))
type DN5972 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec2))
type DN5971 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec1))
type DN5970 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec0))
type DN5969 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec9))
type DN5968 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec8))
type DN5967 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec7))
type DN5966 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec6))
type DN5965 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec5))
type DN5964 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec4))
type DN5963 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec3))
type DN5962 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec2))
type DN5961 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec1))
type DN5960 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec0))
type DN5959 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec9))
type DN5958 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec8))
type DN5957 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec7))
type DN5956 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec6))
type DN5955 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec5))
type DN5954 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec4))
type DN5953 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec3))
type DN5952 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec2))
type DN5951 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec1))
type DN5950 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec0))
type DN5949 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec9))
type DN5948 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec8))
type DN5947 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec7))
type DN5946 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec6))
type DN5945 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec5))
type DN5944 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec4))
type DN5943 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec3))
type DN5942 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec2))
type DN5941 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec1))
type DN5940 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec0))
type DN5939 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec9))
type DN5938 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec8))
type DN5937 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec7))
type DN5936 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec6))
type DN5935 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec5))
type DN5934 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec4))
type DN5933 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec3))
type DN5932 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec2))
type DN5931 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec1))
type DN5930 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec0))
type DN5929 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec9))
type DN5928 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec8))
type DN5927 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec7))
type DN5926 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec6))
type DN5925 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec5))
type DN5924 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec4))
type DN5923 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec3))
type DN5922 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec2))
type DN5921 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec1))
type DN5920 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec0))
type DN5919 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec9))
type DN5918 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec8))
type DN5917 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec7))
type DN5916 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec6))
type DN5915 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec5))
type DN5914 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec4))
type DN5913 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec3))
type DN5912 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec2))
type DN5911 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec1))
type DN5910 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec0))
type DN5909 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec9))
type DN5908 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec8))
type DN5907 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec7))
type DN5906 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec6))
type DN5905 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec5))
type DN5904 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec4))
type DN5903 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec3))
type DN5902 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec2))
type DN5901 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec1))
type DN5900 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec0))
type DN5899 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec9))
type DN5898 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec8))
type DN5897 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec7))
type DN5896 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec6))
type DN5895 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec5))
type DN5894 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec4))
type DN5893 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec3))
type DN5892 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec2))
type DN5891 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec1))
type DN5890 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec0))
type DN5889 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec9))
type DN5888 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec8))
type DN5887 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec7))
type DN5886 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec6))
type DN5885 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec5))
type DN5884 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec4))
type DN5883 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec3))
type DN5882 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec2))
type DN5881 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec1))
type DN5880 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec0))
type DN5879 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec9))
type DN5878 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec8))
type DN5877 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec7))
type DN5876 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec6))
type DN5875 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec5))
type DN5874 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec4))
type DN5873 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec3))
type DN5872 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec2))
type DN5871 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec1))
type DN5870 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec0))
type DN5869 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec9))
type DN5868 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec8))
type DN5867 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec7))
type DN5866 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec6))
type DN5865 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec5))
type DN5864 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec4))
type DN5863 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec3))
type DN5862 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec2))
type DN5861 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec1))
type DN5860 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec0))
type DN5859 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec9))
type DN5858 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec8))
type DN5857 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec7))
type DN5856 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec6))
type DN5855 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec5))
type DN5854 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec4))
type DN5853 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec3))
type DN5852 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec2))
type DN5851 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec1))
type DN5850 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec0))
type DN5849 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec9))
type DN5848 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec8))
type DN5847 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec7))
type DN5846 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec6))
type DN5845 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec5))
type DN5844 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec4))
type DN5843 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec3))
type DN5842 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec2))
type DN5841 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec1))
type DN5840 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec0))
type DN5839 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec9))
type DN5838 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec8))
type DN5837 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec7))
type DN5836 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec6))
type DN5835 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec5))
type DN5834 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec4))
type DN5833 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec3))
type DN5832 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec2))
type DN5831 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec1))
type DN5830 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec0))
type DN5829 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec9))
type DN5828 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec8))
type DN5827 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec7))
type DN5826 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec6))
type DN5825 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec5))
type DN5824 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec4))
type DN5823 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec3))
type DN5822 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec2))
type DN5821 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec1))
type DN5820 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec0))
type DN5819 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec9))
type DN5818 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec8))
type DN5817 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec7))
type DN5816 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec6))
type DN5815 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec5))
type DN5814 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec4))
type DN5813 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec3))
type DN5812 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec2))
type DN5811 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec1))
type DN5810 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec0))
type DN5809 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec9))
type DN5808 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec8))
type DN5807 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec7))
type DN5806 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec6))
type DN5805 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec5))
type DN5804 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec4))
type DN5803 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec3))
type DN5802 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec2))
type DN5801 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec1))
type DN5800 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec0))
type DN5799 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec9))
type DN5798 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec8))
type DN5797 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec7))
type DN5796 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec6))
type DN5795 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec5))
type DN5794 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec4))
type DN5793 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec3))
type DN5792 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec2))
type DN5791 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec1))
type DN5790 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec0))
type DN5789 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec9))
type DN5788 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec8))
type DN5787 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec7))
type DN5786 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec6))
type DN5785 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec5))
type DN5784 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec4))
type DN5783 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec3))
type DN5782 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec2))
type DN5781 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec1))
type DN5780 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec0))
type DN5779 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec9))
type DN5778 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec8))
type DN5777 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec7))
type DN5776 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec6))
type DN5775 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec5))
type DN5774 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec4))
type DN5773 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec3))
type DN5772 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec2))
type DN5771 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec1))
type DN5770 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec0))
type DN5769 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec9))
type DN5768 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec8))
type DN5767 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec7))
type DN5766 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec6))
type DN5765 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec5))
type DN5764 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec4))
type DN5763 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec3))
type DN5762 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec2))
type DN5761 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec1))
type DN5760 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec0))
type DN5759 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec9))
type DN5758 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec8))
type DN5757 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec7))
type DN5756 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec6))
type DN5755 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec5))
type DN5754 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec4))
type DN5753 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec3))
type DN5752 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec2))
type DN5751 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec1))
type DN5750 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec0))
type DN5749 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec9))
type DN5748 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec8))
type DN5747 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec7))
type DN5746 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec6))
type DN5745 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec5))
type DN5744 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec4))
type DN5743 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec3))
type DN5742 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec2))
type DN5741 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec1))
type DN5740 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec0))
type DN5739 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec9))
type DN5738 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec8))
type DN5737 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec7))
type DN5736 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec6))
type DN5735 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec5))
type DN5734 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec4))
type DN5733 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec3))
type DN5732 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec2))
type DN5731 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec1))
type DN5730 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec0))
type DN5729 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec9))
type DN5728 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec8))
type DN5727 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec7))
type DN5726 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec6))
type DN5725 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec5))
type DN5724 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec4))
type DN5723 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec3))
type DN5722 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec2))
type DN5721 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec1))
type DN5720 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec0))
type DN5719 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec9))
type DN5718 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec8))
type DN5717 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec7))
type DN5716 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec6))
type DN5715 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec5))
type DN5714 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec4))
type DN5713 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec3))
type DN5712 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec2))
type DN5711 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec1))
type DN5710 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec0))
type DN5709 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec9))
type DN5708 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec8))
type DN5707 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec7))
type DN5706 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec6))
type DN5705 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec5))
type DN5704 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec4))
type DN5703 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec3))
type DN5702 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec2))
type DN5701 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec1))
type DN5700 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec0))
type DN5699 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec9))
type DN5698 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec8))
type DN5697 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec7))
type DN5696 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec6))
type DN5695 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec5))
type DN5694 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec4))
type DN5693 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec3))
type DN5692 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec2))
type DN5691 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec1))
type DN5690 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec0))
type DN5689 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec9))
type DN5688 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec8))
type DN5687 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec7))
type DN5686 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec6))
type DN5685 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec5))
type DN5684 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec4))
type DN5683 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec3))
type DN5682 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec2))
type DN5681 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec1))
type DN5680 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec0))
type DN5679 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec9))
type DN5678 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec8))
type DN5677 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec7))
type DN5676 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec6))
type DN5675 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec5))
type DN5674 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec4))
type DN5673 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec3))
type DN5672 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec2))
type DN5671 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec1))
type DN5670 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec0))
type DN5669 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec9))
type DN5668 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec8))
type DN5667 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec7))
type DN5666 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec6))
type DN5665 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec5))
type DN5664 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec4))
type DN5663 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec3))
type DN5662 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec2))
type DN5661 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec1))
type DN5660 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec0))
type DN5659 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec9))
type DN5658 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec8))
type DN5657 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec7))
type DN5656 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec6))
type DN5655 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec5))
type DN5654 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec4))
type DN5653 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec3))
type DN5652 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec2))
type DN5651 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec1))
type DN5650 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec0))
type DN5649 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec9))
type DN5648 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec8))
type DN5647 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec7))
type DN5646 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec6))
type DN5645 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec5))
type DN5644 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec4))
type DN5643 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec3))
type DN5642 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec2))
type DN5641 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec1))
type DN5640 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec0))
type DN5639 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec9))
type DN5638 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec8))
type DN5637 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec7))
type DN5636 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec6))
type DN5635 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec5))
type DN5634 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec4))
type DN5633 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec3))
type DN5632 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec2))
type DN5631 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec1))
type DN5630 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec0))
type DN5629 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec9))
type DN5628 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec8))
type DN5627 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec7))
type DN5626 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec6))
type DN5625 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec5))
type DN5624 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec4))
type DN5623 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec3))
type DN5622 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec2))
type DN5621 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec1))
type DN5620 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec0))
type DN5619 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec9))
type DN5618 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec8))
type DN5617 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec7))
type DN5616 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec6))
type DN5615 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec5))
type DN5614 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec4))
type DN5613 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec3))
type DN5612 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec2))
type DN5611 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec1))
type DN5610 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec0))
type DN5609 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec9))
type DN5608 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec8))
type DN5607 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec7))
type DN5606 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec6))
type DN5605 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec5))
type DN5604 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec4))
type DN5603 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec3))
type DN5602 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec2))
type DN5601 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec1))
type DN5600 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec0))
type DN5599 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec9))
type DN5598 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec8))
type DN5597 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec7))
type DN5596 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec6))
type DN5595 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec5))
type DN5594 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec4))
type DN5593 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec3))
type DN5592 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec2))
type DN5591 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec1))
type DN5590 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec0))
type DN5589 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec9))
type DN5588 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec8))
type DN5587 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec7))
type DN5586 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec6))
type DN5585 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec5))
type DN5584 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec4))
type DN5583 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec3))
type DN5582 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec2))
type DN5581 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec1))
type DN5580 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec0))
type DN5579 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec9))
type DN5578 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec8))
type DN5577 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec7))
type DN5576 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec6))
type DN5575 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec5))
type DN5574 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec4))
type DN5573 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec3))
type DN5572 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec2))
type DN5571 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec1))
type DN5570 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec0))
type DN5569 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec9))
type DN5568 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec8))
type DN5567 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec7))
type DN5566 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec6))
type DN5565 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec5))
type DN5564 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec4))
type DN5563 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec3))
type DN5562 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec2))
type DN5561 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec1))
type DN5560 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec0))
type DN5559 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec9))
type DN5558 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec8))
type DN5557 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec7))
type DN5556 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec6))
type DN5555 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec5))
type DN5554 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec4))
type DN5553 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec3))
type DN5552 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec2))
type DN5551 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec1))
type DN5550 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec0))
type DN5549 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec9))
type DN5548 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec8))
type DN5547 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec7))
type DN5546 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec6))
type DN5545 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec5))
type DN5544 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec4))
type DN5543 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec3))
type DN5542 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec2))
type DN5541 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec1))
type DN5540 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec0))
type DN5539 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec9))
type DN5538 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec8))
type DN5537 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec7))
type DN5536 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec6))
type DN5535 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec5))
type DN5534 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec4))
type DN5533 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec3))
type DN5532 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec2))
type DN5531 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec1))
type DN5530 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec0))
type DN5529 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec9))
type DN5528 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec8))
type DN5527 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec7))
type DN5526 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec6))
type DN5525 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec5))
type DN5524 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec4))
type DN5523 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec3))
type DN5522 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec2))
type DN5521 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec1))
type DN5520 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec0))
type DN5519 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec9))
type DN5518 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec8))
type DN5517 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec7))
type DN5516 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec6))
type DN5515 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec5))
type DN5514 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec4))
type DN5513 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec3))
type DN5512 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec2))
type DN5511 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec1))
type DN5510 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec0))
type DN5509 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec9))
type DN5508 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec8))
type DN5507 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec7))
type DN5506 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec6))
type DN5505 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec5))
type DN5504 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec4))
type DN5503 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec3))
type DN5502 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec2))
type DN5501 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec1))
type DN5500 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec0))
type DN5499 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec9))
type DN5498 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec8))
type DN5497 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec7))
type DN5496 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec6))
type DN5495 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec5))
type DN5494 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec4))
type DN5493 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec3))
type DN5492 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec2))
type DN5491 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec1))
type DN5490 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec0))
type DN5489 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec9))
type DN5488 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec8))
type DN5487 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec7))
type DN5486 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec6))
type DN5485 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec5))
type DN5484 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec4))
type DN5483 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec3))
type DN5482 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec2))
type DN5481 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec1))
type DN5480 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec0))
type DN5479 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec9))
type DN5478 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec8))
type DN5477 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec7))
type DN5476 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec6))
type DN5475 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec5))
type DN5474 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec4))
type DN5473 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec3))
type DN5472 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec2))
type DN5471 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec1))
type DN5470 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec0))
type DN5469 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec9))
type DN5468 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec8))
type DN5467 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec7))
type DN5466 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec6))
type DN5465 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec5))
type DN5464 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec4))
type DN5463 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec3))
type DN5462 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec2))
type DN5461 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec1))
type DN5460 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec0))
type DN5459 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec9))
type DN5458 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec8))
type DN5457 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec7))
type DN5456 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec6))
type DN5455 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec5))
type DN5454 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec4))
type DN5453 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec3))
type DN5452 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec2))
type DN5451 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec1))
type DN5450 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec0))
type DN5449 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec9))
type DN5448 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec8))
type DN5447 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec7))
type DN5446 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec6))
type DN5445 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec5))
type DN5444 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec4))
type DN5443 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec3))
type DN5442 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec2))
type DN5441 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec1))
type DN5440 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec0))
type DN5439 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec9))
type DN5438 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec8))
type DN5437 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec7))
type DN5436 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec6))
type DN5435 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec5))
type DN5434 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec4))
type DN5433 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec3))
type DN5432 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec2))
type DN5431 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec1))
type DN5430 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec0))
type DN5429 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec9))
type DN5428 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec8))
type DN5427 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec7))
type DN5426 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec6))
type DN5425 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec5))
type DN5424 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec4))
type DN5423 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec3))
type DN5422 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec2))
type DN5421 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec1))
type DN5420 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec0))
type DN5419 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec9))
type DN5418 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec8))
type DN5417 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec7))
type DN5416 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec6))
type DN5415 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec5))
type DN5414 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec4))
type DN5413 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec3))
type DN5412 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec2))
type DN5411 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec1))
type DN5410 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec0))
type DN5409 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec9))
type DN5408 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec8))
type DN5407 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec7))
type DN5406 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec6))
type DN5405 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec5))
type DN5404 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec4))
type DN5403 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec3))
type DN5402 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec2))
type DN5401 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec1))
type DN5400 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec0))
type DN5399 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec9))
type DN5398 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec8))
type DN5397 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec7))
type DN5396 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec6))
type DN5395 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec5))
type DN5394 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec4))
type DN5393 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec3))
type DN5392 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec2))
type DN5391 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec1))
type DN5390 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec0))
type DN5389 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec9))
type DN5388 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec8))
type DN5387 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec7))
type DN5386 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec6))
type DN5385 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec5))
type DN5384 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec4))
type DN5383 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec3))
type DN5382 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec2))
type DN5381 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec1))
type DN5380 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec0))
type DN5379 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec9))
type DN5378 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec8))
type DN5377 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec7))
type DN5376 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec6))
type DN5375 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec5))
type DN5374 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec4))
type DN5373 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec3))
type DN5372 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec2))
type DN5371 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec1))
type DN5370 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec0))
type DN5369 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec9))
type DN5368 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec8))
type DN5367 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec7))
type DN5366 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec6))
type DN5365 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec5))
type DN5364 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec4))
type DN5363 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec3))
type DN5362 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec2))
type DN5361 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec1))
type DN5360 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec0))
type DN5359 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec9))
type DN5358 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec8))
type DN5357 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec7))
type DN5356 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec6))
type DN5355 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec5))
type DN5354 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec4))
type DN5353 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec3))
type DN5352 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec2))
type DN5351 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec1))
type DN5350 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec0))
type DN5349 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec9))
type DN5348 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec8))
type DN5347 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec7))
type DN5346 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec6))
type DN5345 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec5))
type DN5344 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec4))
type DN5343 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec3))
type DN5342 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec2))
type DN5341 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec1))
type DN5340 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec0))
type DN5339 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec9))
type DN5338 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec8))
type DN5337 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec7))
type DN5336 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec6))
type DN5335 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec5))
type DN5334 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec4))
type DN5333 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec3))
type DN5332 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec2))
type DN5331 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec1))
type DN5330 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec0))
type DN5329 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec9))
type DN5328 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec8))
type DN5327 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec7))
type DN5326 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec6))
type DN5325 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec5))
type DN5324 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec4))
type DN5323 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec3))
type DN5322 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec2))
type DN5321 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec1))
type DN5320 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec0))
type DN5319 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec9))
type DN5318 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec8))
type DN5317 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec7))
type DN5316 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec6))
type DN5315 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec5))
type DN5314 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec4))
type DN5313 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec3))
type DN5312 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec2))
type DN5311 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec1))
type DN5310 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec0))
type DN5309 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec9))
type DN5308 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec8))
type DN5307 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec7))
type DN5306 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec6))
type DN5305 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec5))
type DN5304 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec4))
type DN5303 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec3))
type DN5302 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec2))
type DN5301 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec1))
type DN5300 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec0))
type DN5299 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec9))
type DN5298 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec8))
type DN5297 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec7))
type DN5296 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec6))
type DN5295 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec5))
type DN5294 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec4))
type DN5293 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec3))
type DN5292 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec2))
type DN5291 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec1))
type DN5290 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec0))
type DN5289 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec9))
type DN5288 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec8))
type DN5287 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec7))
type DN5286 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec6))
type DN5285 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec5))
type DN5284 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec4))
type DN5283 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec3))
type DN5282 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec2))
type DN5281 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec1))
type DN5280 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec0))
type DN5279 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec9))
type DN5278 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec8))
type DN5277 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec7))
type DN5276 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec6))
type DN5275 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec5))
type DN5274 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec4))
type DN5273 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec3))
type DN5272 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec2))
type DN5271 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec1))
type DN5270 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec0))
type DN5269 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec9))
type DN5268 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec8))
type DN5267 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec7))
type DN5266 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec6))
type DN5265 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec5))
type DN5264 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec4))
type DN5263 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec3))
type DN5262 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec2))
type DN5261 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec1))
type DN5260 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec0))
type DN5259 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec9))
type DN5258 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec8))
type DN5257 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec7))
type DN5256 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec6))
type DN5255 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec5))
type DN5254 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec4))
type DN5253 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec3))
type DN5252 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec2))
type DN5251 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec1))
type DN5250 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec0))
type DN5249 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec9))
type DN5248 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec8))
type DN5247 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec7))
type DN5246 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec6))
type DN5245 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec5))
type DN5244 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec4))
type DN5243 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec3))
type DN5242 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec2))
type DN5241 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec1))
type DN5240 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec0))
type DN5239 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec9))
type DN5238 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec8))
type DN5237 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec7))
type DN5236 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec6))
type DN5235 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec5))
type DN5234 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec4))
type DN5233 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec3))
type DN5232 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec2))
type DN5231 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec1))
type DN5230 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec0))
type DN5229 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec9))
type DN5228 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec8))
type DN5227 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec7))
type DN5226 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec6))
type DN5225 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec5))
type DN5224 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec4))
type DN5223 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec3))
type DN5222 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec2))
type DN5221 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec1))
type DN5220 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec0))
type DN5219 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec9))
type DN5218 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec8))
type DN5217 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec7))
type DN5216 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec6))
type DN5215 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec5))
type DN5214 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec4))
type DN5213 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec3))
type DN5212 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec2))
type DN5211 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec1))
type DN5210 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec0))
type DN5209 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec9))
type DN5208 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec8))
type DN5207 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec7))
type DN5206 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec6))
type DN5205 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec5))
type DN5204 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec4))
type DN5203 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec3))
type DN5202 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec2))
type DN5201 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec1))
type DN5200 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec0))
type DN5199 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec9))
type DN5198 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec8))
type DN5197 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec7))
type DN5196 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec6))
type DN5195 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec5))
type DN5194 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec4))
type DN5193 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec3))
type DN5192 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec2))
type DN5191 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec1))
type DN5190 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec0))
type DN5189 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec9))
type DN5188 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec8))
type DN5187 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec7))
type DN5186 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec6))
type DN5185 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec5))
type DN5184 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec4))
type DN5183 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec3))
type DN5182 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec2))
type DN5181 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec1))
type DN5180 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec0))
type DN5179 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec9))
type DN5178 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec8))
type DN5177 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec7))
type DN5176 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec6))
type DN5175 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec5))
type DN5174 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec4))
type DN5173 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec3))
type DN5172 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec2))
type DN5171 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec1))
type DN5170 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec0))
type DN5169 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec9))
type DN5168 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec8))
type DN5167 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec7))
type DN5166 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec6))
type DN5165 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec5))
type DN5164 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec4))
type DN5163 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec3))
type DN5162 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec2))
type DN5161 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec1))
type DN5160 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec0))
type DN5159 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec9))
type DN5158 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec8))
type DN5157 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec7))
type DN5156 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec6))
type DN5155 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec5))
type DN5154 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec4))
type DN5153 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec3))
type DN5152 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec2))
type DN5151 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec1))
type DN5150 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec0))
type DN5149 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec9))
type DN5148 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec8))
type DN5147 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec7))
type DN5146 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec6))
type DN5145 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec5))
type DN5144 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec4))
type DN5143 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec3))
type DN5142 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec2))
type DN5141 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec1))
type DN5140 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec0))
type DN5139 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec9))
type DN5138 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec8))
type DN5137 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec7))
type DN5136 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec6))
type DN5135 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec5))
type DN5134 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec4))
type DN5133 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec3))
type DN5132 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec2))
type DN5131 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec1))
type DN5130 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec0))
type DN5129 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec9))
type DN5128 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec8))
type DN5127 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec7))
type DN5126 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec6))
type DN5125 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec5))
type DN5124 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec4))
type DN5123 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec3))
type DN5122 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec2))
type DN5121 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec1))
type DN5120 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec0))
type DN5119 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec9))
type DN5118 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec8))
type DN5117 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec7))
type DN5116 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec6))
type DN5115 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec5))
type DN5114 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec4))
type DN5113 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec3))
type DN5112 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec2))
type DN5111 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec1))
type DN5110 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec0))
type DN5109 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec9))
type DN5108 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec8))
type DN5107 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec7))
type DN5106 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec6))
type DN5105 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec5))
type DN5104 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec4))
type DN5103 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec3))
type DN5102 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec2))
type DN5101 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec1))
type DN5100 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec0))
type DN5099 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec9))
type DN5098 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec8))
type DN5097 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec7))
type DN5096 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec6))
type DN5095 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec5))
type DN5094 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec4))
type DN5093 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec3))
type DN5092 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec2))
type DN5091 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec1))
type DN5090 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec0))
type DN5089 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec9))
type DN5088 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec8))
type DN5087 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec7))
type DN5086 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec6))
type DN5085 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec5))
type DN5084 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec4))
type DN5083 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec3))
type DN5082 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec2))
type DN5081 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec1))
type DN5080 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec0))
type DN5079 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec9))
type DN5078 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec8))
type DN5077 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec7))
type DN5076 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec6))
type DN5075 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec5))
type DN5074 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec4))
type DN5073 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec3))
type DN5072 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec2))
type DN5071 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec1))
type DN5070 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec0))
type DN5069 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec9))
type DN5068 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec8))
type DN5067 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec7))
type DN5066 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec6))
type DN5065 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec5))
type DN5064 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec4))
type DN5063 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec3))
type DN5062 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec2))
type DN5061 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec1))
type DN5060 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec0))
type DN5059 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec9))
type DN5058 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec8))
type DN5057 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec7))
type DN5056 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec6))
type DN5055 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec5))
type DN5054 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec4))
type DN5053 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec3))
type DN5052 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec2))
type DN5051 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec1))
type DN5050 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec0))
type DN5049 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec9))
type DN5048 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec8))
type DN5047 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec7))
type DN5046 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec6))
type DN5045 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec5))
type DN5044 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec4))
type DN5043 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec3))
type DN5042 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec2))
type DN5041 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec1))
type DN5040 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec0))
type DN5039 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec9))
type DN5038 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec8))
type DN5037 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec7))
type DN5036 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec6))
type DN5035 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec5))
type DN5034 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec4))
type DN5033 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec3))
type DN5032 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec2))
type DN5031 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec1))
type DN5030 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec0))
type DN5029 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec9))
type DN5028 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec8))
type DN5027 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec7))
type DN5026 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec6))
type DN5025 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec5))
type DN5024 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec4))
type DN5023 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec3))
type DN5022 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec2))
type DN5021 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec1))
type DN5020 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec0))
type DN5019 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec9))
type DN5018 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec8))
type DN5017 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec7))
type DN5016 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec6))
type DN5015 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec5))
type DN5014 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec4))
type DN5013 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec3))
type DN5012 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec2))
type DN5011 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec1))
type DN5010 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec0))
type DN5009 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec9))
type DN5008 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec8))
type DN5007 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec7))
type DN5006 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec6))
type DN5005 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec5))
type DN5004 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec4))
type DN5003 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec3))
type DN5002 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec2))
type DN5001 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec1))
type DN5000 = Dec (Neg' (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec0))
type DN4999 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec9))
type DN4998 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec8))
type DN4997 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec7))
type DN4996 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec6))
type DN4995 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec5))
type DN4994 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec4))
type DN4993 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec3))
type DN4992 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec2))
type DN4991 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec1))
type DN4990 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec0))
type DN4989 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec9))
type DN4988 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec8))
type DN4987 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec7))
type DN4986 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec6))
type DN4985 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec5))
type DN4984 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec4))
type DN4983 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec3))
type DN4982 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec2))
type DN4981 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec1))
type DN4980 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec0))
type DN4979 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec9))
type DN4978 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec8))
type DN4977 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec7))
type DN4976 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec6))
type DN4975 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec5))
type DN4974 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec4))
type DN4973 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec3))
type DN4972 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec2))
type DN4971 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec1))
type DN4970 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec0))
type DN4969 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec9))
type DN4968 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec8))
type DN4967 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec7))
type DN4966 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec6))
type DN4965 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec5))
type DN4964 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec4))
type DN4963 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec3))
type DN4962 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec2))
type DN4961 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec1))
type DN4960 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec0))
type DN4959 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec9))
type DN4958 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec8))
type DN4957 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec7))
type DN4956 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec6))
type DN4955 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec5))
type DN4954 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec4))
type DN4953 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec3))
type DN4952 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec2))
type DN4951 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec1))
type DN4950 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec0))
type DN4949 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec9))
type DN4948 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec8))
type DN4947 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec7))
type DN4946 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec6))
type DN4945 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec5))
type DN4944 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec4))
type DN4943 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec3))
type DN4942 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec2))
type DN4941 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec1))
type DN4940 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec0))
type DN4939 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec9))
type DN4938 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec8))
type DN4937 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec7))
type DN4936 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec6))
type DN4935 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec5))
type DN4934 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec4))
type DN4933 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec3))
type DN4932 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec2))
type DN4931 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec1))
type DN4930 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec0))
type DN4929 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec9))
type DN4928 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec8))
type DN4927 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec7))
type DN4926 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec6))
type DN4925 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec5))
type DN4924 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec4))
type DN4923 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec3))
type DN4922 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec2))
type DN4921 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec1))
type DN4920 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec0))
type DN4919 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec9))
type DN4918 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec8))
type DN4917 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec7))
type DN4916 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec6))
type DN4915 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec5))
type DN4914 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec4))
type DN4913 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec3))
type DN4912 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec2))
type DN4911 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec1))
type DN4910 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec0))
type DN4909 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec9))
type DN4908 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec8))
type DN4907 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec7))
type DN4906 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec6))
type DN4905 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec5))
type DN4904 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec4))
type DN4903 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec3))
type DN4902 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec2))
type DN4901 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec1))
type DN4900 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec0))
type DN4899 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec9))
type DN4898 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec8))
type DN4897 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec7))
type DN4896 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec6))
type DN4895 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec5))
type DN4894 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec4))
type DN4893 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec3))
type DN4892 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec2))
type DN4891 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec1))
type DN4890 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec0))
type DN4889 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec9))
type DN4888 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec8))
type DN4887 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec7))
type DN4886 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec6))
type DN4885 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec5))
type DN4884 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec4))
type DN4883 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec3))
type DN4882 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec2))
type DN4881 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec1))
type DN4880 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec0))
type DN4879 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec9))
type DN4878 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec8))
type DN4877 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec7))
type DN4876 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec6))
type DN4875 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec5))
type DN4874 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec4))
type DN4873 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec3))
type DN4872 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec2))
type DN4871 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec1))
type DN4870 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec0))
type DN4869 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec9))
type DN4868 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec8))
type DN4867 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec7))
type DN4866 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec6))
type DN4865 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec5))
type DN4864 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec4))
type DN4863 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec3))
type DN4862 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec2))
type DN4861 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec1))
type DN4860 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec0))
type DN4859 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec9))
type DN4858 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec8))
type DN4857 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec7))
type DN4856 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec6))
type DN4855 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec5))
type DN4854 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec4))
type DN4853 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec3))
type DN4852 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec2))
type DN4851 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec1))
type DN4850 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec0))
type DN4849 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec9))
type DN4848 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec8))
type DN4847 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec7))
type DN4846 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec6))
type DN4845 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec5))
type DN4844 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec4))
type DN4843 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec3))
type DN4842 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec2))
type DN4841 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec1))
type DN4840 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec0))
type DN4839 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec9))
type DN4838 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec8))
type DN4837 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec7))
type DN4836 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec6))
type DN4835 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec5))
type DN4834 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec4))
type DN4833 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec3))
type DN4832 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec2))
type DN4831 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec1))
type DN4830 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec0))
type DN4829 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec9))
type DN4828 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec8))
type DN4827 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec7))
type DN4826 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec6))
type DN4825 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec5))
type DN4824 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec4))
type DN4823 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec3))
type DN4822 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec2))
type DN4821 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec1))
type DN4820 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec0))
type DN4819 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec9))
type DN4818 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec8))
type DN4817 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec7))
type DN4816 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec6))
type DN4815 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec5))
type DN4814 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec4))
type DN4813 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec3))
type DN4812 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec2))
type DN4811 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec1))
type DN4810 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec0))
type DN4809 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec9))
type DN4808 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec8))
type DN4807 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec7))
type DN4806 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec6))
type DN4805 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec5))
type DN4804 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec4))
type DN4803 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec3))
type DN4802 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec2))
type DN4801 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec1))
type DN4800 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec0))
type DN4799 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec9))
type DN4798 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec8))
type DN4797 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec7))
type DN4796 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec6))
type DN4795 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec5))
type DN4794 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec4))
type DN4793 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec3))
type DN4792 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec2))
type DN4791 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec1))
type DN4790 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec0))
type DN4789 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec9))
type DN4788 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec8))
type DN4787 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec7))
type DN4786 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec6))
type DN4785 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec5))
type DN4784 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec4))
type DN4783 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec3))
type DN4782 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec2))
type DN4781 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec1))
type DN4780 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec0))
type DN4779 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec9))
type DN4778 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec8))
type DN4777 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec7))
type DN4776 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec6))
type DN4775 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec5))
type DN4774 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec4))
type DN4773 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec3))
type DN4772 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec2))
type DN4771 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec1))
type DN4770 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec0))
type DN4769 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec9))
type DN4768 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec8))
type DN4767 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec7))
type DN4766 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec6))
type DN4765 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec5))
type DN4764 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec4))
type DN4763 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec3))
type DN4762 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec2))
type DN4761 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec1))
type DN4760 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec0))
type DN4759 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec9))
type DN4758 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec8))
type DN4757 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec7))
type DN4756 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec6))
type DN4755 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec5))
type DN4754 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec4))
type DN4753 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec3))
type DN4752 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec2))
type DN4751 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec1))
type DN4750 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec0))
type DN4749 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec9))
type DN4748 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec8))
type DN4747 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec7))
type DN4746 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec6))
type DN4745 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec5))
type DN4744 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec4))
type DN4743 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec3))
type DN4742 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec2))
type DN4741 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec1))
type DN4740 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec0))
type DN4739 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec9))
type DN4738 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec8))
type DN4737 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec7))
type DN4736 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec6))
type DN4735 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec5))
type DN4734 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec4))
type DN4733 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec3))
type DN4732 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec2))
type DN4731 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec1))
type DN4730 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec0))
type DN4729 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec9))
type DN4728 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec8))
type DN4727 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec7))
type DN4726 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec6))
type DN4725 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec5))
type DN4724 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec4))
type DN4723 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec3))
type DN4722 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec2))
type DN4721 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec1))
type DN4720 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec0))
type DN4719 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec9))
type DN4718 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec8))
type DN4717 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec7))
type DN4716 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec6))
type DN4715 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec5))
type DN4714 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec4))
type DN4713 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec3))
type DN4712 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec2))
type DN4711 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec1))
type DN4710 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec0))
type DN4709 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec9))
type DN4708 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec8))
type DN4707 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec7))
type DN4706 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec6))
type DN4705 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec5))
type DN4704 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec4))
type DN4703 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec3))
type DN4702 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec2))
type DN4701 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec1))
type DN4700 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec0))
type DN4699 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec9))
type DN4698 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec8))
type DN4697 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec7))
type DN4696 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec6))
type DN4695 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec5))
type DN4694 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec4))
type DN4693 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec3))
type DN4692 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec2))
type DN4691 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec1))
type DN4690 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec0))
type DN4689 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec9))
type DN4688 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec8))
type DN4687 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec7))
type DN4686 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec6))
type DN4685 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec5))
type DN4684 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec4))
type DN4683 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec3))
type DN4682 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec2))
type DN4681 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec1))
type DN4680 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec0))
type DN4679 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec9))
type DN4678 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec8))
type DN4677 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec7))
type DN4676 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec6))
type DN4675 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec5))
type DN4674 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec4))
type DN4673 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec3))
type DN4672 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec2))
type DN4671 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec1))
type DN4670 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec0))
type DN4669 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec9))
type DN4668 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec8))
type DN4667 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec7))
type DN4666 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec6))
type DN4665 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec5))
type DN4664 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec4))
type DN4663 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec3))
type DN4662 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec2))
type DN4661 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec1))
type DN4660 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec0))
type DN4659 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec9))
type DN4658 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec8))
type DN4657 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec7))
type DN4656 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec6))
type DN4655 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec5))
type DN4654 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec4))
type DN4653 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec3))
type DN4652 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec2))
type DN4651 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec1))
type DN4650 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec0))
type DN4649 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec9))
type DN4648 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec8))
type DN4647 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec7))
type DN4646 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec6))
type DN4645 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec5))
type DN4644 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec4))
type DN4643 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec3))
type DN4642 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec2))
type DN4641 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec1))
type DN4640 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec0))
type DN4639 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec9))
type DN4638 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec8))
type DN4637 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec7))
type DN4636 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec6))
type DN4635 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec5))
type DN4634 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec4))
type DN4633 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec3))
type DN4632 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec2))
type DN4631 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec1))
type DN4630 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec0))
type DN4629 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec9))
type DN4628 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec8))
type DN4627 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec7))
type DN4626 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec6))
type DN4625 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec5))
type DN4624 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec4))
type DN4623 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec3))
type DN4622 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec2))
type DN4621 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec1))
type DN4620 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec0))
type DN4619 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec9))
type DN4618 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec8))
type DN4617 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec7))
type DN4616 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec6))
type DN4615 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec5))
type DN4614 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec4))
type DN4613 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec3))
type DN4612 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec2))
type DN4611 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec1))
type DN4610 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec0))
type DN4609 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec9))
type DN4608 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec8))
type DN4607 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec7))
type DN4606 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec6))
type DN4605 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec5))
type DN4604 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec4))
type DN4603 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec3))
type DN4602 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec2))
type DN4601 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec1))
type DN4600 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec0))
type DN4599 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec9))
type DN4598 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec8))
type DN4597 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec7))
type DN4596 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec6))
type DN4595 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec5))
type DN4594 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec4))
type DN4593 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec3))
type DN4592 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec2))
type DN4591 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec1))
type DN4590 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec0))
type DN4589 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec9))
type DN4588 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec8))
type DN4587 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec7))
type DN4586 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec6))
type DN4585 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec5))
type DN4584 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec4))
type DN4583 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec3))
type DN4582 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec2))
type DN4581 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec1))
type DN4580 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec0))
type DN4579 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec9))
type DN4578 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec8))
type DN4577 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec7))
type DN4576 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec6))
type DN4575 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec5))
type DN4574 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec4))
type DN4573 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec3))
type DN4572 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec2))
type DN4571 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec1))
type DN4570 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec0))
type DN4569 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec9))
type DN4568 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec8))
type DN4567 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec7))
type DN4566 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec6))
type DN4565 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec5))
type DN4564 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec4))
type DN4563 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec3))
type DN4562 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec2))
type DN4561 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec1))
type DN4560 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec0))
type DN4559 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec9))
type DN4558 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec8))
type DN4557 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec7))
type DN4556 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec6))
type DN4555 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec5))
type DN4554 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec4))
type DN4553 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec3))
type DN4552 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec2))
type DN4551 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec1))
type DN4550 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec0))
type DN4549 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec9))
type DN4548 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec8))
type DN4547 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec7))
type DN4546 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec6))
type DN4545 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec5))
type DN4544 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec4))
type DN4543 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec3))
type DN4542 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec2))
type DN4541 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec1))
type DN4540 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec0))
type DN4539 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec9))
type DN4538 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec8))
type DN4537 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec7))
type DN4536 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec6))
type DN4535 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec5))
type DN4534 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec4))
type DN4533 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec3))
type DN4532 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec2))
type DN4531 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec1))
type DN4530 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec0))
type DN4529 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec9))
type DN4528 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec8))
type DN4527 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec7))
type DN4526 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec6))
type DN4525 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec5))
type DN4524 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec4))
type DN4523 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec3))
type DN4522 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec2))
type DN4521 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec1))
type DN4520 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec0))
type DN4519 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec9))
type DN4518 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec8))
type DN4517 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec7))
type DN4516 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec6))
type DN4515 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec5))
type DN4514 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec4))
type DN4513 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec3))
type DN4512 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec2))
type DN4511 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec1))
type DN4510 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec0))
type DN4509 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec9))
type DN4508 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec8))
type DN4507 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec7))
type DN4506 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec6))
type DN4505 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec5))
type DN4504 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec4))
type DN4503 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec3))
type DN4502 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec2))
type DN4501 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec1))
type DN4500 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec0))
type DN4499 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec9))
type DN4498 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec8))
type DN4497 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec7))
type DN4496 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec6))
type DN4495 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec5))
type DN4494 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec4))
type DN4493 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec3))
type DN4492 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec2))
type DN4491 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec1))
type DN4490 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec0))
type DN4489 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec9))
type DN4488 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec8))
type DN4487 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec7))
type DN4486 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec6))
type DN4485 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec5))
type DN4484 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec4))
type DN4483 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec3))
type DN4482 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec2))
type DN4481 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec1))
type DN4480 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec0))
type DN4479 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec9))
type DN4478 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec8))
type DN4477 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec7))
type DN4476 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec6))
type DN4475 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec5))
type DN4474 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec4))
type DN4473 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec3))
type DN4472 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec2))
type DN4471 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec1))
type DN4470 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec0))
type DN4469 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec9))
type DN4468 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec8))
type DN4467 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec7))
type DN4466 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec6))
type DN4465 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec5))
type DN4464 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec4))
type DN4463 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec3))
type DN4462 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec2))
type DN4461 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec1))
type DN4460 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec0))
type DN4459 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec9))
type DN4458 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec8))
type DN4457 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec7))
type DN4456 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec6))
type DN4455 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec5))
type DN4454 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec4))
type DN4453 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec3))
type DN4452 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec2))
type DN4451 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec1))
type DN4450 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec0))
type DN4449 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec9))
type DN4448 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec8))
type DN4447 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec7))
type DN4446 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec6))
type DN4445 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec5))
type DN4444 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec4))
type DN4443 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec3))
type DN4442 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec2))
type DN4441 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec1))
type DN4440 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec0))
type DN4439 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec9))
type DN4438 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec8))
type DN4437 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec7))
type DN4436 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec6))
type DN4435 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec5))
type DN4434 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec4))
type DN4433 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec3))
type DN4432 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec2))
type DN4431 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec1))
type DN4430 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec0))
type DN4429 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec9))
type DN4428 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec8))
type DN4427 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec7))
type DN4426 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec6))
type DN4425 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec5))
type DN4424 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec4))
type DN4423 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec3))
type DN4422 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec2))
type DN4421 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec1))
type DN4420 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec0))
type DN4419 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec9))
type DN4418 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec8))
type DN4417 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec7))
type DN4416 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec6))
type DN4415 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec5))
type DN4414 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec4))
type DN4413 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec3))
type DN4412 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec2))
type DN4411 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec1))
type DN4410 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec0))
type DN4409 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec9))
type DN4408 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec8))
type DN4407 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec7))
type DN4406 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec6))
type DN4405 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec5))
type DN4404 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec4))
type DN4403 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec3))
type DN4402 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec2))
type DN4401 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec1))
type DN4400 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec0))
type DN4399 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec9))
type DN4398 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec8))
type DN4397 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec7))
type DN4396 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec6))
type DN4395 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec5))
type DN4394 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec4))
type DN4393 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec3))
type DN4392 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec2))
type DN4391 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec1))
type DN4390 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec0))
type DN4389 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec9))
type DN4388 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec8))
type DN4387 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec7))
type DN4386 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec6))
type DN4385 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec5))
type DN4384 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec4))
type DN4383 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec3))
type DN4382 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec2))
type DN4381 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec1))
type DN4380 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec0))
type DN4379 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec9))
type DN4378 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec8))
type DN4377 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec7))
type DN4376 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec6))
type DN4375 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec5))
type DN4374 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec4))
type DN4373 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec3))
type DN4372 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec2))
type DN4371 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec1))
type DN4370 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec0))
type DN4369 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec9))
type DN4368 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec8))
type DN4367 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec7))
type DN4366 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec6))
type DN4365 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec5))
type DN4364 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec4))
type DN4363 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec3))
type DN4362 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec2))
type DN4361 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec1))
type DN4360 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec0))
type DN4359 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec9))
type DN4358 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec8))
type DN4357 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec7))
type DN4356 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec6))
type DN4355 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec5))
type DN4354 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec4))
type DN4353 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec3))
type DN4352 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec2))
type DN4351 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec1))
type DN4350 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec0))
type DN4349 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec9))
type DN4348 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec8))
type DN4347 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec7))
type DN4346 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec6))
type DN4345 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec5))
type DN4344 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec4))
type DN4343 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec3))
type DN4342 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec2))
type DN4341 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec1))
type DN4340 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec0))
type DN4339 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec9))
type DN4338 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec8))
type DN4337 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec7))
type DN4336 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec6))
type DN4335 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec5))
type DN4334 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec4))
type DN4333 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec3))
type DN4332 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec2))
type DN4331 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec1))
type DN4330 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec0))
type DN4329 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec9))
type DN4328 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec8))
type DN4327 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec7))
type DN4326 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec6))
type DN4325 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec5))
type DN4324 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec4))
type DN4323 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec3))
type DN4322 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec2))
type DN4321 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec1))
type DN4320 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec0))
type DN4319 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec9))
type DN4318 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec8))
type DN4317 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec7))
type DN4316 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec6))
type DN4315 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec5))
type DN4314 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec4))
type DN4313 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec3))
type DN4312 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec2))
type DN4311 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec1))
type DN4310 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec0))
type DN4309 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec9))
type DN4308 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec8))
type DN4307 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec7))
type DN4306 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec6))
type DN4305 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec5))
type DN4304 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec4))
type DN4303 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec3))
type DN4302 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec2))
type DN4301 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec1))
type DN4300 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec0))
type DN4299 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec9))
type DN4298 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec8))
type DN4297 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec7))
type DN4296 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec6))
type DN4295 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec5))
type DN4294 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec4))
type DN4293 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec3))
type DN4292 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec2))
type DN4291 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec1))
type DN4290 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec0))
type DN4289 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec9))
type DN4288 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec8))
type DN4287 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec7))
type DN4286 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec6))
type DN4285 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec5))
type DN4284 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec4))
type DN4283 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec3))
type DN4282 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec2))
type DN4281 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec1))
type DN4280 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec0))
type DN4279 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec9))
type DN4278 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec8))
type DN4277 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec7))
type DN4276 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec6))
type DN4275 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec5))
type DN4274 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec4))
type DN4273 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec3))
type DN4272 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec2))
type DN4271 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec1))
type DN4270 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec0))
type DN4269 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec9))
type DN4268 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec8))
type DN4267 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec7))
type DN4266 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec6))
type DN4265 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec5))
type DN4264 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec4))
type DN4263 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec3))
type DN4262 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec2))
type DN4261 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec1))
type DN4260 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec0))
type DN4259 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec9))
type DN4258 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec8))
type DN4257 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec7))
type DN4256 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec6))
type DN4255 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec5))
type DN4254 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec4))
type DN4253 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec3))
type DN4252 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec2))
type DN4251 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec1))
type DN4250 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec0))
type DN4249 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec9))
type DN4248 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec8))
type DN4247 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec7))
type DN4246 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec6))
type DN4245 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec5))
type DN4244 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec4))
type DN4243 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec3))
type DN4242 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec2))
type DN4241 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec1))
type DN4240 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec0))
type DN4239 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec9))
type DN4238 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec8))
type DN4237 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec7))
type DN4236 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec6))
type DN4235 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec5))
type DN4234 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec4))
type DN4233 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec3))
type DN4232 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec2))
type DN4231 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec1))
type DN4230 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec0))
type DN4229 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec9))
type DN4228 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec8))
type DN4227 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec7))
type DN4226 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec6))
type DN4225 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec5))
type DN4224 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec4))
type DN4223 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec3))
type DN4222 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec2))
type DN4221 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec1))
type DN4220 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec0))
type DN4219 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec9))
type DN4218 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec8))
type DN4217 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec7))
type DN4216 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec6))
type DN4215 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec5))
type DN4214 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec4))
type DN4213 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec3))
type DN4212 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec2))
type DN4211 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec1))
type DN4210 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec0))
type DN4209 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec9))
type DN4208 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec8))
type DN4207 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec7))
type DN4206 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec6))
type DN4205 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec5))
type DN4204 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec4))
type DN4203 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec3))
type DN4202 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec2))
type DN4201 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec1))
type DN4200 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec0))
type DN4199 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec9))
type DN4198 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec8))
type DN4197 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec7))
type DN4196 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec6))
type DN4195 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec5))
type DN4194 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec4))
type DN4193 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec3))
type DN4192 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec2))
type DN4191 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec1))
type DN4190 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec0))
type DN4189 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec9))
type DN4188 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec8))
type DN4187 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec7))
type DN4186 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec6))
type DN4185 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec5))
type DN4184 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec4))
type DN4183 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec3))
type DN4182 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec2))
type DN4181 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec1))
type DN4180 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec0))
type DN4179 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec9))
type DN4178 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec8))
type DN4177 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec7))
type DN4176 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec6))
type DN4175 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec5))
type DN4174 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec4))
type DN4173 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec3))
type DN4172 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec2))
type DN4171 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec1))
type DN4170 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec0))
type DN4169 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec9))
type DN4168 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec8))
type DN4167 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec7))
type DN4166 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec6))
type DN4165 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec5))
type DN4164 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec4))
type DN4163 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec3))
type DN4162 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec2))
type DN4161 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec1))
type DN4160 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec0))
type DN4159 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec9))
type DN4158 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec8))
type DN4157 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec7))
type DN4156 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec6))
type DN4155 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec5))
type DN4154 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec4))
type DN4153 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec3))
type DN4152 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec2))
type DN4151 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec1))
type DN4150 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec0))
type DN4149 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec9))
type DN4148 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec8))
type DN4147 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec7))
type DN4146 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec6))
type DN4145 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec5))
type DN4144 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec4))
type DN4143 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec3))
type DN4142 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec2))
type DN4141 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec1))
type DN4140 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec0))
type DN4139 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec9))
type DN4138 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec8))
type DN4137 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec7))
type DN4136 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec6))
type DN4135 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec5))
type DN4134 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec4))
type DN4133 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec3))
type DN4132 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec2))
type DN4131 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec1))
type DN4130 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec0))
type DN4129 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec9))
type DN4128 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec8))
type DN4127 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec7))
type DN4126 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec6))
type DN4125 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec5))
type DN4124 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec4))
type DN4123 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec3))
type DN4122 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec2))
type DN4121 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec1))
type DN4120 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec0))
type DN4119 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec9))
type DN4118 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec8))
type DN4117 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec7))
type DN4116 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec6))
type DN4115 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec5))
type DN4114 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec4))
type DN4113 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec3))
type DN4112 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec2))
type DN4111 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec1))
type DN4110 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec0))
type DN4109 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec9))
type DN4108 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec8))
type DN4107 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec7))
type DN4106 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec6))
type DN4105 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec5))
type DN4104 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec4))
type DN4103 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec3))
type DN4102 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec2))
type DN4101 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec1))
type DN4100 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec0))
type DN4099 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec9))
type DN4098 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec8))
type DN4097 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec7))
type DN4096 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec6))
type DN4095 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec5))
type DN4094 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec4))
type DN4093 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec3))
type DN4092 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec2))
type DN4091 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec1))
type DN4090 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec0))
type DN4089 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec9))
type DN4088 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec8))
type DN4087 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec7))
type DN4086 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec6))
type DN4085 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec5))
type DN4084 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec4))
type DN4083 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec3))
type DN4082 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec2))
type DN4081 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec1))
type DN4080 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec0))
type DN4079 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec9))
type DN4078 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec8))
type DN4077 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec7))
type DN4076 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec6))
type DN4075 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec5))
type DN4074 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec4))
type DN4073 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec3))
type DN4072 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec2))
type DN4071 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec1))
type DN4070 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec0))
type DN4069 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec9))
type DN4068 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec8))
type DN4067 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec7))
type DN4066 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec6))
type DN4065 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec5))
type DN4064 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec4))
type DN4063 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec3))
type DN4062 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec2))
type DN4061 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec1))
type DN4060 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec0))
type DN4059 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec9))
type DN4058 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec8))
type DN4057 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec7))
type DN4056 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec6))
type DN4055 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec5))
type DN4054 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec4))
type DN4053 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec3))
type DN4052 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec2))
type DN4051 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec1))
type DN4050 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec0))
type DN4049 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec9))
type DN4048 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec8))
type DN4047 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec7))
type DN4046 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec6))
type DN4045 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec5))
type DN4044 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec4))
type DN4043 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec3))
type DN4042 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec2))
type DN4041 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec1))
type DN4040 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec0))
type DN4039 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec9))
type DN4038 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec8))
type DN4037 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec7))
type DN4036 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec6))
type DN4035 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec5))
type DN4034 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec4))
type DN4033 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec3))
type DN4032 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec2))
type DN4031 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec1))
type DN4030 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec0))
type DN4029 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec9))
type DN4028 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec8))
type DN4027 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec7))
type DN4026 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec6))
type DN4025 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec5))
type DN4024 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec4))
type DN4023 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec3))
type DN4022 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec2))
type DN4021 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec1))
type DN4020 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec0))
type DN4019 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec9))
type DN4018 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec8))
type DN4017 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec7))
type DN4016 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec6))
type DN4015 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec5))
type DN4014 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec4))
type DN4013 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec3))
type DN4012 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec2))
type DN4011 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec1))
type DN4010 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec0))
type DN4009 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec9))
type DN4008 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec8))
type DN4007 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec7))
type DN4006 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec6))
type DN4005 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec5))
type DN4004 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec4))
type DN4003 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec3))
type DN4002 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec2))
type DN4001 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec1))
type DN4000 = Dec (Neg' (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec0))
type DN3999 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec9))
type DN3998 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec8))
type DN3997 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec7))
type DN3996 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec6))
type DN3995 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec5))
type DN3994 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec4))
type DN3993 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec3))
type DN3992 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec2))
type DN3991 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec1))
type DN3990 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec0))
type DN3989 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec9))
type DN3988 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec8))
type DN3987 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec7))
type DN3986 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec6))
type DN3985 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec5))
type DN3984 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec4))
type DN3983 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec3))
type DN3982 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec2))
type DN3981 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec1))
type DN3980 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec0))
type DN3979 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec9))
type DN3978 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec8))
type DN3977 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec7))
type DN3976 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec6))
type DN3975 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec5))
type DN3974 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec4))
type DN3973 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec3))
type DN3972 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec2))
type DN3971 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec1))
type DN3970 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec0))
type DN3969 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec9))
type DN3968 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec8))
type DN3967 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec7))
type DN3966 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec6))
type DN3965 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec5))
type DN3964 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec4))
type DN3963 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec3))
type DN3962 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec2))
type DN3961 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec1))
type DN3960 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec0))
type DN3959 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec9))
type DN3958 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec8))
type DN3957 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec7))
type DN3956 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec6))
type DN3955 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec5))
type DN3954 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec4))
type DN3953 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec3))
type DN3952 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec2))
type DN3951 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec1))
type DN3950 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec0))
type DN3949 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec9))
type DN3948 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec8))
type DN3947 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec7))
type DN3946 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec6))
type DN3945 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec5))
type DN3944 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec4))
type DN3943 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec3))
type DN3942 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec2))
type DN3941 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec1))
type DN3940 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec0))
type DN3939 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec9))
type DN3938 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec8))
type DN3937 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec7))
type DN3936 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec6))
type DN3935 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec5))
type DN3934 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec4))
type DN3933 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec3))
type DN3932 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec2))
type DN3931 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec1))
type DN3930 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec0))
type DN3929 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec9))
type DN3928 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec8))
type DN3927 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec7))
type DN3926 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec6))
type DN3925 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec5))
type DN3924 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec4))
type DN3923 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec3))
type DN3922 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec2))
type DN3921 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec1))
type DN3920 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec0))
type DN3919 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec9))
type DN3918 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec8))
type DN3917 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec7))
type DN3916 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec6))
type DN3915 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec5))
type DN3914 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec4))
type DN3913 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec3))
type DN3912 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec2))
type DN3911 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec1))
type DN3910 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec0))
type DN3909 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec9))
type DN3908 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec8))
type DN3907 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec7))
type DN3906 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec6))
type DN3905 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec5))
type DN3904 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec4))
type DN3903 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec3))
type DN3902 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec2))
type DN3901 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec1))
type DN3900 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec0))
type DN3899 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec9))
type DN3898 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec8))
type DN3897 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec7))
type DN3896 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec6))
type DN3895 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec5))
type DN3894 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec4))
type DN3893 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec3))
type DN3892 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec2))
type DN3891 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec1))
type DN3890 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec0))
type DN3889 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec9))
type DN3888 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec8))
type DN3887 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec7))
type DN3886 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec6))
type DN3885 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec5))
type DN3884 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec4))
type DN3883 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec3))
type DN3882 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec2))
type DN3881 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec1))
type DN3880 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec0))
type DN3879 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec9))
type DN3878 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec8))
type DN3877 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec7))
type DN3876 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec6))
type DN3875 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec5))
type DN3874 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec4))
type DN3873 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec3))
type DN3872 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec2))
type DN3871 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec1))
type DN3870 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec0))
type DN3869 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec9))
type DN3868 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec8))
type DN3867 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec7))
type DN3866 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec6))
type DN3865 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec5))
type DN3864 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec4))
type DN3863 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec3))
type DN3862 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec2))
type DN3861 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec1))
type DN3860 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec0))
type DN3859 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec9))
type DN3858 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec8))
type DN3857 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec7))
type DN3856 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec6))
type DN3855 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec5))
type DN3854 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec4))
type DN3853 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec3))
type DN3852 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec2))
type DN3851 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec1))
type DN3850 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec0))
type DN3849 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec9))
type DN3848 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec8))
type DN3847 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec7))
type DN3846 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec6))
type DN3845 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec5))
type DN3844 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec4))
type DN3843 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec3))
type DN3842 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec2))
type DN3841 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec1))
type DN3840 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec0))
type DN3839 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec9))
type DN3838 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec8))
type DN3837 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec7))
type DN3836 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec6))
type DN3835 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec5))
type DN3834 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec4))
type DN3833 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec3))
type DN3832 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec2))
type DN3831 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec1))
type DN3830 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec0))
type DN3829 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec9))
type DN3828 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec8))
type DN3827 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec7))
type DN3826 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec6))
type DN3825 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec5))
type DN3824 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec4))
type DN3823 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec3))
type DN3822 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec2))
type DN3821 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec1))
type DN3820 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec0))
type DN3819 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec9))
type DN3818 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec8))
type DN3817 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec7))
type DN3816 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec6))
type DN3815 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec5))
type DN3814 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec4))
type DN3813 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec3))
type DN3812 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec2))
type DN3811 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec1))
type DN3810 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec0))
type DN3809 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec9))
type DN3808 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec8))
type DN3807 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec7))
type DN3806 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec6))
type DN3805 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec5))
type DN3804 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec4))
type DN3803 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec3))
type DN3802 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec2))
type DN3801 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec1))
type DN3800 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec0))
type DN3799 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec9))
type DN3798 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec8))
type DN3797 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec7))
type DN3796 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec6))
type DN3795 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec5))
type DN3794 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec4))
type DN3793 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec3))
type DN3792 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec2))
type DN3791 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec1))
type DN3790 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec0))
type DN3789 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec9))
type DN3788 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec8))
type DN3787 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec7))
type DN3786 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec6))
type DN3785 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec5))
type DN3784 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec4))
type DN3783 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec3))
type DN3782 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec2))
type DN3781 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec1))
type DN3780 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec0))
type DN3779 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec9))
type DN3778 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec8))
type DN3777 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec7))
type DN3776 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec6))
type DN3775 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec5))
type DN3774 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec4))
type DN3773 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec3))
type DN3772 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec2))
type DN3771 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec1))
type DN3770 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec0))
type DN3769 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec9))
type DN3768 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec8))
type DN3767 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec7))
type DN3766 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec6))
type DN3765 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec5))
type DN3764 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec4))
type DN3763 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec3))
type DN3762 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec2))
type DN3761 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec1))
type DN3760 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec0))
type DN3759 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec9))
type DN3758 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec8))
type DN3757 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec7))
type DN3756 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec6))
type DN3755 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec5))
type DN3754 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec4))
type DN3753 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec3))
type DN3752 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec2))
type DN3751 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec1))
type DN3750 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec0))
type DN3749 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec9))
type DN3748 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec8))
type DN3747 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec7))
type DN3746 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec6))
type DN3745 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec5))
type DN3744 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec4))
type DN3743 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec3))
type DN3742 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec2))
type DN3741 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec1))
type DN3740 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec0))
type DN3739 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec9))
type DN3738 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec8))
type DN3737 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec7))
type DN3736 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec6))
type DN3735 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec5))
type DN3734 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec4))
type DN3733 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec3))
type DN3732 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec2))
type DN3731 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec1))
type DN3730 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec0))
type DN3729 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec9))
type DN3728 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec8))
type DN3727 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec7))
type DN3726 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec6))
type DN3725 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec5))
type DN3724 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec4))
type DN3723 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec3))
type DN3722 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec2))
type DN3721 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec1))
type DN3720 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec0))
type DN3719 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec9))
type DN3718 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec8))
type DN3717 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec7))
type DN3716 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec6))
type DN3715 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec5))
type DN3714 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec4))
type DN3713 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec3))
type DN3712 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec2))
type DN3711 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec1))
type DN3710 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec0))
type DN3709 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec9))
type DN3708 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec8))
type DN3707 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec7))
type DN3706 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec6))
type DN3705 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec5))
type DN3704 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec4))
type DN3703 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec3))
type DN3702 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec2))
type DN3701 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec1))
type DN3700 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec0))
type DN3699 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec9))
type DN3698 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec8))
type DN3697 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec7))
type DN3696 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec6))
type DN3695 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec5))
type DN3694 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec4))
type DN3693 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec3))
type DN3692 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec2))
type DN3691 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec1))
type DN3690 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec0))
type DN3689 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec9))
type DN3688 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec8))
type DN3687 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec7))
type DN3686 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec6))
type DN3685 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec5))
type DN3684 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec4))
type DN3683 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec3))
type DN3682 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec2))
type DN3681 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec1))
type DN3680 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec0))
type DN3679 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec9))
type DN3678 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec8))
type DN3677 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec7))
type DN3676 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec6))
type DN3675 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec5))
type DN3674 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec4))
type DN3673 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec3))
type DN3672 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec2))
type DN3671 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec1))
type DN3670 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec0))
type DN3669 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec9))
type DN3668 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec8))
type DN3667 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec7))
type DN3666 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec6))
type DN3665 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec5))
type DN3664 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec4))
type DN3663 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec3))
type DN3662 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec2))
type DN3661 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec1))
type DN3660 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec0))
type DN3659 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec9))
type DN3658 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec8))
type DN3657 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec7))
type DN3656 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec6))
type DN3655 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec5))
type DN3654 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec4))
type DN3653 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec3))
type DN3652 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec2))
type DN3651 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec1))
type DN3650 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec0))
type DN3649 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec9))
type DN3648 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec8))
type DN3647 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec7))
type DN3646 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec6))
type DN3645 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec5))
type DN3644 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec4))
type DN3643 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec3))
type DN3642 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec2))
type DN3641 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec1))
type DN3640 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec0))
type DN3639 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec9))
type DN3638 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec8))
type DN3637 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec7))
type DN3636 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec6))
type DN3635 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec5))
type DN3634 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec4))
type DN3633 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec3))
type DN3632 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec2))
type DN3631 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec1))
type DN3630 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec0))
type DN3629 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec9))
type DN3628 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec8))
type DN3627 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec7))
type DN3626 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec6))
type DN3625 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec5))
type DN3624 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec4))
type DN3623 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec3))
type DN3622 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec2))
type DN3621 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec1))
type DN3620 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec0))
type DN3619 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec9))
type DN3618 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec8))
type DN3617 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec7))
type DN3616 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec6))
type DN3615 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec5))
type DN3614 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec4))
type DN3613 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec3))
type DN3612 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec2))
type DN3611 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec1))
type DN3610 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec0))
type DN3609 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec9))
type DN3608 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec8))
type DN3607 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec7))
type DN3606 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec6))
type DN3605 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec5))
type DN3604 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec4))
type DN3603 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec3))
type DN3602 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec2))
type DN3601 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec1))
type DN3600 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec0))
type DN3599 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec9))
type DN3598 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec8))
type DN3597 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec7))
type DN3596 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec6))
type DN3595 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec5))
type DN3594 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec4))
type DN3593 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec3))
type DN3592 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec2))
type DN3591 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec1))
type DN3590 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec0))
type DN3589 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec9))
type DN3588 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec8))
type DN3587 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec7))
type DN3586 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec6))
type DN3585 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec5))
type DN3584 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec4))
type DN3583 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec3))
type DN3582 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec2))
type DN3581 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec1))
type DN3580 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec0))
type DN3579 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec9))
type DN3578 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec8))
type DN3577 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec7))
type DN3576 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec6))
type DN3575 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec5))
type DN3574 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec4))
type DN3573 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec3))
type DN3572 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec2))
type DN3571 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec1))
type DN3570 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec0))
type DN3569 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec9))
type DN3568 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec8))
type DN3567 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec7))
type DN3566 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec6))
type DN3565 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec5))
type DN3564 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec4))
type DN3563 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec3))
type DN3562 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec2))
type DN3561 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec1))
type DN3560 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec0))
type DN3559 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec9))
type DN3558 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec8))
type DN3557 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec7))
type DN3556 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec6))
type DN3555 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec5))
type DN3554 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec4))
type DN3553 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec3))
type DN3552 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec2))
type DN3551 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec1))
type DN3550 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec0))
type DN3549 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec9))
type DN3548 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec8))
type DN3547 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec7))
type DN3546 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec6))
type DN3545 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec5))
type DN3544 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec4))
type DN3543 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec3))
type DN3542 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec2))
type DN3541 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec1))
type DN3540 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec0))
type DN3539 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec9))
type DN3538 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec8))
type DN3537 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec7))
type DN3536 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec6))
type DN3535 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec5))
type DN3534 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec4))
type DN3533 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec3))
type DN3532 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec2))
type DN3531 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec1))
type DN3530 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec0))
type DN3529 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec9))
type DN3528 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec8))
type DN3527 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec7))
type DN3526 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec6))
type DN3525 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec5))
type DN3524 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec4))
type DN3523 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec3))
type DN3522 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec2))
type DN3521 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec1))
type DN3520 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec0))
type DN3519 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec9))
type DN3518 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec8))
type DN3517 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec7))
type DN3516 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec6))
type DN3515 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec5))
type DN3514 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec4))
type DN3513 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec3))
type DN3512 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec2))
type DN3511 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec1))
type DN3510 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec0))
type DN3509 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec9))
type DN3508 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec8))
type DN3507 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec7))
type DN3506 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec6))
type DN3505 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec5))
type DN3504 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec4))
type DN3503 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec3))
type DN3502 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec2))
type DN3501 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec1))
type DN3500 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec0))
type DN3499 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec9))
type DN3498 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec8))
type DN3497 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec7))
type DN3496 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec6))
type DN3495 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec5))
type DN3494 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec4))
type DN3493 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec3))
type DN3492 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec2))
type DN3491 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec1))
type DN3490 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec0))
type DN3489 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec9))
type DN3488 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec8))
type DN3487 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec7))
type DN3486 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec6))
type DN3485 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec5))
type DN3484 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec4))
type DN3483 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec3))
type DN3482 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec2))
type DN3481 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec1))
type DN3480 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec0))
type DN3479 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec9))
type DN3478 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec8))
type DN3477 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec7))
type DN3476 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec6))
type DN3475 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec5))
type DN3474 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec4))
type DN3473 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec3))
type DN3472 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec2))
type DN3471 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec1))
type DN3470 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec0))
type DN3469 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec9))
type DN3468 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec8))
type DN3467 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec7))
type DN3466 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec6))
type DN3465 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec5))
type DN3464 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec4))
type DN3463 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec3))
type DN3462 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec2))
type DN3461 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec1))
type DN3460 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec0))
type DN3459 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec9))
type DN3458 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec8))
type DN3457 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec7))
type DN3456 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec6))
type DN3455 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec5))
type DN3454 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec4))
type DN3453 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec3))
type DN3452 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec2))
type DN3451 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec1))
type DN3450 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec0))
type DN3449 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec9))
type DN3448 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec8))
type DN3447 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec7))
type DN3446 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec6))
type DN3445 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec5))
type DN3444 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec4))
type DN3443 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec3))
type DN3442 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec2))
type DN3441 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec1))
type DN3440 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec0))
type DN3439 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec9))
type DN3438 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec8))
type DN3437 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec7))
type DN3436 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec6))
type DN3435 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec5))
type DN3434 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec4))
type DN3433 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec3))
type DN3432 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec2))
type DN3431 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec1))
type DN3430 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec0))
type DN3429 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec9))
type DN3428 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec8))
type DN3427 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec7))
type DN3426 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec6))
type DN3425 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec5))
type DN3424 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec4))
type DN3423 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec3))
type DN3422 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec2))
type DN3421 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec1))
type DN3420 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec0))
type DN3419 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec9))
type DN3418 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec8))
type DN3417 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec7))
type DN3416 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec6))
type DN3415 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec5))
type DN3414 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec4))
type DN3413 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec3))
type DN3412 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec2))
type DN3411 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec1))
type DN3410 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec0))
type DN3409 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec9))
type DN3408 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec8))
type DN3407 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec7))
type DN3406 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec6))
type DN3405 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec5))
type DN3404 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec4))
type DN3403 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec3))
type DN3402 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec2))
type DN3401 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec1))
type DN3400 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec0))
type DN3399 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec9))
type DN3398 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec8))
type DN3397 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec7))
type DN3396 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec6))
type DN3395 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec5))
type DN3394 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec4))
type DN3393 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec3))
type DN3392 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec2))
type DN3391 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec1))
type DN3390 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec0))
type DN3389 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec9))
type DN3388 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec8))
type DN3387 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec7))
type DN3386 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec6))
type DN3385 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec5))
type DN3384 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec4))
type DN3383 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec3))
type DN3382 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec2))
type DN3381 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec1))
type DN3380 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec0))
type DN3379 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec9))
type DN3378 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec8))
type DN3377 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec7))
type DN3376 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec6))
type DN3375 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec5))
type DN3374 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec4))
type DN3373 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec3))
type DN3372 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec2))
type DN3371 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec1))
type DN3370 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec0))
type DN3369 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec9))
type DN3368 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec8))
type DN3367 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec7))
type DN3366 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec6))
type DN3365 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec5))
type DN3364 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec4))
type DN3363 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec3))
type DN3362 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec2))
type DN3361 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec1))
type DN3360 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec0))
type DN3359 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec9))
type DN3358 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec8))
type DN3357 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec7))
type DN3356 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec6))
type DN3355 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec5))
type DN3354 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec4))
type DN3353 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec3))
type DN3352 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec2))
type DN3351 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec1))
type DN3350 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec0))
type DN3349 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec9))
type DN3348 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec8))
type DN3347 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec7))
type DN3346 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec6))
type DN3345 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec5))
type DN3344 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec4))
type DN3343 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec3))
type DN3342 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec2))
type DN3341 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec1))
type DN3340 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec0))
type DN3339 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec9))
type DN3338 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec8))
type DN3337 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec7))
type DN3336 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec6))
type DN3335 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec5))
type DN3334 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec4))
type DN3333 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec3))
type DN3332 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec2))
type DN3331 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec1))
type DN3330 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec0))
type DN3329 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec9))
type DN3328 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec8))
type DN3327 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec7))
type DN3326 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec6))
type DN3325 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec5))
type DN3324 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec4))
type DN3323 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec3))
type DN3322 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec2))
type DN3321 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec1))
type DN3320 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec0))
type DN3319 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec9))
type DN3318 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec8))
type DN3317 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec7))
type DN3316 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec6))
type DN3315 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec5))
type DN3314 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec4))
type DN3313 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec3))
type DN3312 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec2))
type DN3311 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec1))
type DN3310 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec0))
type DN3309 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec9))
type DN3308 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec8))
type DN3307 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec7))
type DN3306 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec6))
type DN3305 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec5))
type DN3304 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec4))
type DN3303 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec3))
type DN3302 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec2))
type DN3301 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec1))
type DN3300 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec0))
type DN3299 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec9))
type DN3298 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec8))
type DN3297 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec7))
type DN3296 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec6))
type DN3295 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec5))
type DN3294 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec4))
type DN3293 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec3))
type DN3292 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec2))
type DN3291 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec1))
type DN3290 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec0))
type DN3289 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec9))
type DN3288 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec8))
type DN3287 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec7))
type DN3286 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec6))
type DN3285 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec5))
type DN3284 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec4))
type DN3283 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec3))
type DN3282 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec2))
type DN3281 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec1))
type DN3280 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec0))
type DN3279 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec9))
type DN3278 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec8))
type DN3277 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec7))
type DN3276 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec6))
type DN3275 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec5))
type DN3274 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec4))
type DN3273 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec3))
type DN3272 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec2))
type DN3271 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec1))
type DN3270 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec0))
type DN3269 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec9))
type DN3268 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec8))
type DN3267 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec7))
type DN3266 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec6))
type DN3265 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec5))
type DN3264 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec4))
type DN3263 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec3))
type DN3262 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec2))
type DN3261 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec1))
type DN3260 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec0))
type DN3259 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec9))
type DN3258 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec8))
type DN3257 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec7))
type DN3256 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec6))
type DN3255 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec5))
type DN3254 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec4))
type DN3253 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec3))
type DN3252 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec2))
type DN3251 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec1))
type DN3250 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec0))
type DN3249 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec9))
type DN3248 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec8))
type DN3247 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec7))
type DN3246 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec6))
type DN3245 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec5))
type DN3244 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec4))
type DN3243 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec3))
type DN3242 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec2))
type DN3241 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec1))
type DN3240 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec0))
type DN3239 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec9))
type DN3238 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec8))
type DN3237 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec7))
type DN3236 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec6))
type DN3235 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec5))
type DN3234 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec4))
type DN3233 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec3))
type DN3232 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec2))
type DN3231 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec1))
type DN3230 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec0))
type DN3229 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec9))
type DN3228 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec8))
type DN3227 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec7))
type DN3226 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec6))
type DN3225 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec5))
type DN3224 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec4))
type DN3223 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec3))
type DN3222 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec2))
type DN3221 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec1))
type DN3220 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec0))
type DN3219 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec9))
type DN3218 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec8))
type DN3217 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec7))
type DN3216 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec6))
type DN3215 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec5))
type DN3214 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec4))
type DN3213 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec3))
type DN3212 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec2))
type DN3211 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec1))
type DN3210 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec0))
type DN3209 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec9))
type DN3208 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec8))
type DN3207 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec7))
type DN3206 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec6))
type DN3205 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec5))
type DN3204 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec4))
type DN3203 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec3))
type DN3202 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec2))
type DN3201 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec1))
type DN3200 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec0))
type DN3199 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec9))
type DN3198 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec8))
type DN3197 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec7))
type DN3196 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec6))
type DN3195 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec5))
type DN3194 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec4))
type DN3193 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec3))
type DN3192 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec2))
type DN3191 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec1))
type DN3190 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec0))
type DN3189 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec9))
type DN3188 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec8))
type DN3187 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec7))
type DN3186 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec6))
type DN3185 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec5))
type DN3184 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec4))
type DN3183 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec3))
type DN3182 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec2))
type DN3181 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec1))
type DN3180 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec0))
type DN3179 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec9))
type DN3178 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec8))
type DN3177 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec7))
type DN3176 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec6))
type DN3175 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec5))
type DN3174 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec4))
type DN3173 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec3))
type DN3172 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec2))
type DN3171 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec1))
type DN3170 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec0))
type DN3169 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec9))
type DN3168 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec8))
type DN3167 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec7))
type DN3166 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec6))
type DN3165 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec5))
type DN3164 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec4))
type DN3163 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec3))
type DN3162 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec2))
type DN3161 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec1))
type DN3160 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec0))
type DN3159 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec9))
type DN3158 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec8))
type DN3157 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec7))
type DN3156 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec6))
type DN3155 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec5))
type DN3154 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec4))
type DN3153 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec3))
type DN3152 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec2))
type DN3151 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec1))
type DN3150 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec0))
type DN3149 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec9))
type DN3148 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec8))
type DN3147 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec7))
type DN3146 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec6))
type DN3145 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec5))
type DN3144 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec4))
type DN3143 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec3))
type DN3142 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec2))
type DN3141 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec1))
type DN3140 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec0))
type DN3139 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec9))
type DN3138 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec8))
type DN3137 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec7))
type DN3136 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec6))
type DN3135 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec5))
type DN3134 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec4))
type DN3133 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec3))
type DN3132 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec2))
type DN3131 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec1))
type DN3130 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec0))
type DN3129 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec9))
type DN3128 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec8))
type DN3127 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec7))
type DN3126 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec6))
type DN3125 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec5))
type DN3124 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec4))
type DN3123 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec3))
type DN3122 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec2))
type DN3121 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec1))
type DN3120 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec0))
type DN3119 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec9))
type DN3118 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec8))
type DN3117 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec7))
type DN3116 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec6))
type DN3115 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec5))
type DN3114 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec4))
type DN3113 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec3))
type DN3112 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec2))
type DN3111 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec1))
type DN3110 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec0))
type DN3109 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec9))
type DN3108 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec8))
type DN3107 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec7))
type DN3106 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec6))
type DN3105 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec5))
type DN3104 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec4))
type DN3103 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec3))
type DN3102 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec2))
type DN3101 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec1))
type DN3100 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec0))
type DN3099 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec9))
type DN3098 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec8))
type DN3097 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec7))
type DN3096 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec6))
type DN3095 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec5))
type DN3094 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec4))
type DN3093 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec3))
type DN3092 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec2))
type DN3091 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec1))
type DN3090 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec0))
type DN3089 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec9))
type DN3088 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec8))
type DN3087 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec7))
type DN3086 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec6))
type DN3085 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec5))
type DN3084 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec4))
type DN3083 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec3))
type DN3082 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec2))
type DN3081 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec1))
type DN3080 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec0))
type DN3079 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec9))
type DN3078 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec8))
type DN3077 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec7))
type DN3076 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec6))
type DN3075 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec5))
type DN3074 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec4))
type DN3073 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec3))
type DN3072 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec2))
type DN3071 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec1))
type DN3070 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec0))
type DN3069 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec9))
type DN3068 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec8))
type DN3067 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec7))
type DN3066 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec6))
type DN3065 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec5))
type DN3064 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec4))
type DN3063 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec3))
type DN3062 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec2))
type DN3061 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec1))
type DN3060 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec0))
type DN3059 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec9))
type DN3058 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec8))
type DN3057 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec7))
type DN3056 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec6))
type DN3055 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec5))
type DN3054 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec4))
type DN3053 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec3))
type DN3052 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec2))
type DN3051 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec1))
type DN3050 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec0))
type DN3049 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec9))
type DN3048 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec8))
type DN3047 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec7))
type DN3046 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec6))
type DN3045 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec5))
type DN3044 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec4))
type DN3043 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec3))
type DN3042 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec2))
type DN3041 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec1))
type DN3040 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec0))
type DN3039 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec9))
type DN3038 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec8))
type DN3037 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec7))
type DN3036 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec6))
type DN3035 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec5))
type DN3034 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec4))
type DN3033 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec3))
type DN3032 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec2))
type DN3031 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec1))
type DN3030 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec0))
type DN3029 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec9))
type DN3028 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec8))
type DN3027 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec7))
type DN3026 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec6))
type DN3025 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec5))
type DN3024 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec4))
type DN3023 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec3))
type DN3022 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec2))
type DN3021 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec1))
type DN3020 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec0))
type DN3019 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec9))
type DN3018 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec8))
type DN3017 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec7))
type DN3016 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec6))
type DN3015 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec5))
type DN3014 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec4))
type DN3013 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec3))
type DN3012 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec2))
type DN3011 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec1))
type DN3010 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec0))
type DN3009 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec9))
type DN3008 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec8))
type DN3007 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec7))
type DN3006 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec6))
type DN3005 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec5))
type DN3004 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec4))
type DN3003 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec3))
type DN3002 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec2))
type DN3001 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec1))
type DN3000 = Dec (Neg' (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec0))
type DN2999 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec9))
type DN2998 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec8))
type DN2997 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec7))
type DN2996 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec6))
type DN2995 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec5))
type DN2994 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec4))
type DN2993 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec3))
type DN2992 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec2))
type DN2991 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec1))
type DN2990 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec0))
type DN2989 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec9))
type DN2988 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec8))
type DN2987 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec7))
type DN2986 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec6))
type DN2985 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec5))
type DN2984 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec4))
type DN2983 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec3))
type DN2982 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec2))
type DN2981 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec1))
type DN2980 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec0))
type DN2979 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec9))
type DN2978 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec8))
type DN2977 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec7))
type DN2976 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec6))
type DN2975 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec5))
type DN2974 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec4))
type DN2973 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec3))
type DN2972 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec2))
type DN2971 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec1))
type DN2970 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec0))
type DN2969 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec9))
type DN2968 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec8))
type DN2967 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec7))
type DN2966 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec6))
type DN2965 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec5))
type DN2964 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec4))
type DN2963 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec3))
type DN2962 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec2))
type DN2961 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec1))
type DN2960 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec0))
type DN2959 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec9))
type DN2958 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec8))
type DN2957 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec7))
type DN2956 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec6))
type DN2955 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec5))
type DN2954 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec4))
type DN2953 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec3))
type DN2952 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec2))
type DN2951 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec1))
type DN2950 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec0))
type DN2949 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec9))
type DN2948 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec8))
type DN2947 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec7))
type DN2946 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec6))
type DN2945 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec5))
type DN2944 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec4))
type DN2943 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec3))
type DN2942 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec2))
type DN2941 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec1))
type DN2940 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec0))
type DN2939 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec9))
type DN2938 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec8))
type DN2937 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec7))
type DN2936 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec6))
type DN2935 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec5))
type DN2934 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec4))
type DN2933 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec3))
type DN2932 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec2))
type DN2931 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec1))
type DN2930 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec0))
type DN2929 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec9))
type DN2928 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec8))
type DN2927 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec7))
type DN2926 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec6))
type DN2925 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec5))
type DN2924 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec4))
type DN2923 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec3))
type DN2922 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec2))
type DN2921 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec1))
type DN2920 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec0))
type DN2919 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec9))
type DN2918 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec8))
type DN2917 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec7))
type DN2916 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec6))
type DN2915 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec5))
type DN2914 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec4))
type DN2913 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec3))
type DN2912 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec2))
type DN2911 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec1))
type DN2910 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec0))
type DN2909 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec9))
type DN2908 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec8))
type DN2907 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec7))
type DN2906 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec6))
type DN2905 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec5))
type DN2904 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec4))
type DN2903 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec3))
type DN2902 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec2))
type DN2901 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec1))
type DN2900 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec0))
type DN2899 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec9))
type DN2898 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec8))
type DN2897 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec7))
type DN2896 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec6))
type DN2895 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec5))
type DN2894 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec4))
type DN2893 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec3))
type DN2892 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec2))
type DN2891 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec1))
type DN2890 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec0))
type DN2889 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec9))
type DN2888 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec8))
type DN2887 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec7))
type DN2886 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec6))
type DN2885 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec5))
type DN2884 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec4))
type DN2883 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec3))
type DN2882 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec2))
type DN2881 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec1))
type DN2880 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec0))
type DN2879 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec9))
type DN2878 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec8))
type DN2877 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec7))
type DN2876 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec6))
type DN2875 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec5))
type DN2874 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec4))
type DN2873 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec3))
type DN2872 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec2))
type DN2871 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec1))
type DN2870 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec0))
type DN2869 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec9))
type DN2868 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec8))
type DN2867 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec7))
type DN2866 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec6))
type DN2865 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec5))
type DN2864 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec4))
type DN2863 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec3))
type DN2862 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec2))
type DN2861 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec1))
type DN2860 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec0))
type DN2859 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec9))
type DN2858 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec8))
type DN2857 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec7))
type DN2856 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec6))
type DN2855 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec5))
type DN2854 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec4))
type DN2853 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec3))
type DN2852 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec2))
type DN2851 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec1))
type DN2850 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec0))
type DN2849 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec9))
type DN2848 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec8))
type DN2847 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec7))
type DN2846 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec6))
type DN2845 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec5))
type DN2844 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec4))
type DN2843 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec3))
type DN2842 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec2))
type DN2841 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec1))
type DN2840 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec0))
type DN2839 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec9))
type DN2838 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec8))
type DN2837 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec7))
type DN2836 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec6))
type DN2835 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec5))
type DN2834 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec4))
type DN2833 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec3))
type DN2832 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec2))
type DN2831 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec1))
type DN2830 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec0))
type DN2829 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec9))
type DN2828 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec8))
type DN2827 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec7))
type DN2826 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec6))
type DN2825 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec5))
type DN2824 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec4))
type DN2823 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec3))
type DN2822 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec2))
type DN2821 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec1))
type DN2820 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec0))
type DN2819 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec9))
type DN2818 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec8))
type DN2817 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec7))
type DN2816 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec6))
type DN2815 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec5))
type DN2814 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec4))
type DN2813 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec3))
type DN2812 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec2))
type DN2811 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec1))
type DN2810 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec0))
type DN2809 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec9))
type DN2808 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec8))
type DN2807 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec7))
type DN2806 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec6))
type DN2805 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec5))
type DN2804 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec4))
type DN2803 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec3))
type DN2802 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec2))
type DN2801 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec1))
type DN2800 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec0))
type DN2799 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec9))
type DN2798 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec8))
type DN2797 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec7))
type DN2796 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec6))
type DN2795 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec5))
type DN2794 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec4))
type DN2793 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec3))
type DN2792 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec2))
type DN2791 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec1))
type DN2790 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec0))
type DN2789 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec9))
type DN2788 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec8))
type DN2787 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec7))
type DN2786 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec6))
type DN2785 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec5))
type DN2784 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec4))
type DN2783 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec3))
type DN2782 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec2))
type DN2781 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec1))
type DN2780 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec0))
type DN2779 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec9))
type DN2778 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec8))
type DN2777 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec7))
type DN2776 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec6))
type DN2775 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec5))
type DN2774 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec4))
type DN2773 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec3))
type DN2772 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec2))
type DN2771 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec1))
type DN2770 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec0))
type DN2769 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec9))
type DN2768 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec8))
type DN2767 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec7))
type DN2766 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec6))
type DN2765 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec5))
type DN2764 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec4))
type DN2763 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec3))
type DN2762 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec2))
type DN2761 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec1))
type DN2760 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec0))
type DN2759 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec9))
type DN2758 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec8))
type DN2757 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec7))
type DN2756 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec6))
type DN2755 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec5))
type DN2754 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec4))
type DN2753 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec3))
type DN2752 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec2))
type DN2751 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec1))
type DN2750 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec0))
type DN2749 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec9))
type DN2748 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec8))
type DN2747 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec7))
type DN2746 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec6))
type DN2745 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec5))
type DN2744 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec4))
type DN2743 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec3))
type DN2742 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec2))
type DN2741 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec1))
type DN2740 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec0))
type DN2739 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec9))
type DN2738 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec8))
type DN2737 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec7))
type DN2736 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec6))
type DN2735 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec5))
type DN2734 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec4))
type DN2733 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec3))
type DN2732 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec2))
type DN2731 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec1))
type DN2730 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec0))
type DN2729 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec9))
type DN2728 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec8))
type DN2727 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec7))
type DN2726 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec6))
type DN2725 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec5))
type DN2724 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec4))
type DN2723 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec3))
type DN2722 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec2))
type DN2721 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec1))
type DN2720 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec0))
type DN2719 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec9))
type DN2718 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec8))
type DN2717 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec7))
type DN2716 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec6))
type DN2715 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec5))
type DN2714 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec4))
type DN2713 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec3))
type DN2712 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec2))
type DN2711 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec1))
type DN2710 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec0))
type DN2709 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec9))
type DN2708 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec8))
type DN2707 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec7))
type DN2706 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec6))
type DN2705 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec5))
type DN2704 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec4))
type DN2703 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec3))
type DN2702 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec2))
type DN2701 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec1))
type DN2700 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec0))
type DN2699 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec9))
type DN2698 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec8))
type DN2697 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec7))
type DN2696 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec6))
type DN2695 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec5))
type DN2694 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec4))
type DN2693 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec3))
type DN2692 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec2))
type DN2691 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec1))
type DN2690 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec0))
type DN2689 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec9))
type DN2688 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec8))
type DN2687 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec7))
type DN2686 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec6))
type DN2685 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec5))
type DN2684 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec4))
type DN2683 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec3))
type DN2682 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec2))
type DN2681 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec1))
type DN2680 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec0))
type DN2679 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec9))
type DN2678 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec8))
type DN2677 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec7))
type DN2676 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec6))
type DN2675 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec5))
type DN2674 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec4))
type DN2673 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec3))
type DN2672 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec2))
type DN2671 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec1))
type DN2670 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec0))
type DN2669 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec9))
type DN2668 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec8))
type DN2667 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec7))
type DN2666 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec6))
type DN2665 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec5))
type DN2664 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec4))
type DN2663 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec3))
type DN2662 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec2))
type DN2661 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec1))
type DN2660 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec0))
type DN2659 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec9))
type DN2658 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec8))
type DN2657 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec7))
type DN2656 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec6))
type DN2655 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec5))
type DN2654 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec4))
type DN2653 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec3))
type DN2652 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec2))
type DN2651 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec1))
type DN2650 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec0))
type DN2649 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec9))
type DN2648 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec8))
type DN2647 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec7))
type DN2646 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec6))
type DN2645 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec5))
type DN2644 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec4))
type DN2643 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec3))
type DN2642 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec2))
type DN2641 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec1))
type DN2640 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec0))
type DN2639 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec9))
type DN2638 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec8))
type DN2637 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec7))
type DN2636 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec6))
type DN2635 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec5))
type DN2634 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec4))
type DN2633 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec3))
type DN2632 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec2))
type DN2631 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec1))
type DN2630 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec0))
type DN2629 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec9))
type DN2628 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec8))
type DN2627 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec7))
type DN2626 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec6))
type DN2625 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec5))
type DN2624 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec4))
type DN2623 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec3))
type DN2622 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec2))
type DN2621 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec1))
type DN2620 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec0))
type DN2619 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec9))
type DN2618 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec8))
type DN2617 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec7))
type DN2616 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec6))
type DN2615 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec5))
type DN2614 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec4))
type DN2613 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec3))
type DN2612 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec2))
type DN2611 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec1))
type DN2610 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec0))
type DN2609 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec9))
type DN2608 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec8))
type DN2607 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec7))
type DN2606 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec6))
type DN2605 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec5))
type DN2604 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec4))
type DN2603 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec3))
type DN2602 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec2))
type DN2601 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec1))
type DN2600 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec0))
type DN2599 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec9))
type DN2598 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec8))
type DN2597 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec7))
type DN2596 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec6))
type DN2595 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec5))
type DN2594 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec4))
type DN2593 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec3))
type DN2592 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec2))
type DN2591 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec1))
type DN2590 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec0))
type DN2589 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec9))
type DN2588 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec8))
type DN2587 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec7))
type DN2586 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec6))
type DN2585 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec5))
type DN2584 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec4))
type DN2583 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec3))
type DN2582 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec2))
type DN2581 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec1))
type DN2580 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec0))
type DN2579 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec9))
type DN2578 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec8))
type DN2577 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec7))
type DN2576 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec6))
type DN2575 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec5))
type DN2574 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec4))
type DN2573 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec3))
type DN2572 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec2))
type DN2571 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec1))
type DN2570 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec0))
type DN2569 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec9))
type DN2568 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec8))
type DN2567 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec7))
type DN2566 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec6))
type DN2565 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec5))
type DN2564 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec4))
type DN2563 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec3))
type DN2562 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec2))
type DN2561 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec1))
type DN2560 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec0))
type DN2559 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec9))
type DN2558 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec8))
type DN2557 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec7))
type DN2556 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec6))
type DN2555 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec5))
type DN2554 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec4))
type DN2553 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec3))
type DN2552 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec2))
type DN2551 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec1))
type DN2550 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec0))
type DN2549 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec9))
type DN2548 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec8))
type DN2547 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec7))
type DN2546 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec6))
type DN2545 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec5))
type DN2544 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec4))
type DN2543 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec3))
type DN2542 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec2))
type DN2541 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec1))
type DN2540 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec0))
type DN2539 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec9))
type DN2538 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec8))
type DN2537 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec7))
type DN2536 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec6))
type DN2535 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec5))
type DN2534 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec4))
type DN2533 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec3))
type DN2532 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec2))
type DN2531 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec1))
type DN2530 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec0))
type DN2529 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec9))
type DN2528 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec8))
type DN2527 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec7))
type DN2526 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec6))
type DN2525 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec5))
type DN2524 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec4))
type DN2523 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec3))
type DN2522 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec2))
type DN2521 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec1))
type DN2520 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec0))
type DN2519 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec9))
type DN2518 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec8))
type DN2517 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec7))
type DN2516 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec6))
type DN2515 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec5))
type DN2514 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec4))
type DN2513 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec3))
type DN2512 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec2))
type DN2511 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec1))
type DN2510 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec0))
type DN2509 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec9))
type DN2508 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec8))
type DN2507 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec7))
type DN2506 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec6))
type DN2505 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec5))
type DN2504 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec4))
type DN2503 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec3))
type DN2502 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec2))
type DN2501 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec1))
type DN2500 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec0))
type DN2499 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec9))
type DN2498 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec8))
type DN2497 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec7))
type DN2496 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec6))
type DN2495 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec5))
type DN2494 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec4))
type DN2493 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec3))
type DN2492 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec2))
type DN2491 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec1))
type DN2490 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec0))
type DN2489 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec9))
type DN2488 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec8))
type DN2487 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec7))
type DN2486 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec6))
type DN2485 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec5))
type DN2484 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec4))
type DN2483 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec3))
type DN2482 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec2))
type DN2481 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec1))
type DN2480 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec0))
type DN2479 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec9))
type DN2478 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec8))
type DN2477 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec7))
type DN2476 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec6))
type DN2475 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec5))
type DN2474 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec4))
type DN2473 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec3))
type DN2472 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec2))
type DN2471 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec1))
type DN2470 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec0))
type DN2469 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec9))
type DN2468 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec8))
type DN2467 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec7))
type DN2466 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec6))
type DN2465 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec5))
type DN2464 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec4))
type DN2463 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec3))
type DN2462 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec2))
type DN2461 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec1))
type DN2460 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec0))
type DN2459 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec9))
type DN2458 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec8))
type DN2457 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec7))
type DN2456 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec6))
type DN2455 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec5))
type DN2454 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec4))
type DN2453 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec3))
type DN2452 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec2))
type DN2451 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec1))
type DN2450 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec0))
type DN2449 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec9))
type DN2448 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec8))
type DN2447 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec7))
type DN2446 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec6))
type DN2445 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec5))
type DN2444 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec4))
type DN2443 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec3))
type DN2442 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec2))
type DN2441 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec1))
type DN2440 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec0))
type DN2439 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec9))
type DN2438 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec8))
type DN2437 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec7))
type DN2436 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec6))
type DN2435 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec5))
type DN2434 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec4))
type DN2433 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec3))
type DN2432 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec2))
type DN2431 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec1))
type DN2430 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec0))
type DN2429 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec9))
type DN2428 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec8))
type DN2427 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec7))
type DN2426 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec6))
type DN2425 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec5))
type DN2424 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec4))
type DN2423 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec3))
type DN2422 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec2))
type DN2421 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec1))
type DN2420 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec0))
type DN2419 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec9))
type DN2418 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec8))
type DN2417 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec7))
type DN2416 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec6))
type DN2415 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec5))
type DN2414 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec4))
type DN2413 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec3))
type DN2412 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec2))
type DN2411 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec1))
type DN2410 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec0))
type DN2409 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec9))
type DN2408 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec8))
type DN2407 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec7))
type DN2406 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec6))
type DN2405 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec5))
type DN2404 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec4))
type DN2403 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec3))
type DN2402 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec2))
type DN2401 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec1))
type DN2400 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec0))
type DN2399 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec9))
type DN2398 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec8))
type DN2397 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec7))
type DN2396 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec6))
type DN2395 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec5))
type DN2394 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec4))
type DN2393 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec3))
type DN2392 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec2))
type DN2391 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec1))
type DN2390 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec0))
type DN2389 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec9))
type DN2388 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec8))
type DN2387 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec7))
type DN2386 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec6))
type DN2385 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec5))
type DN2384 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec4))
type DN2383 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec3))
type DN2382 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec2))
type DN2381 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec1))
type DN2380 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec0))
type DN2379 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec9))
type DN2378 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec8))
type DN2377 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec7))
type DN2376 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec6))
type DN2375 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec5))
type DN2374 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec4))
type DN2373 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec3))
type DN2372 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec2))
type DN2371 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec1))
type DN2370 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec0))
type DN2369 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec9))
type DN2368 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec8))
type DN2367 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec7))
type DN2366 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec6))
type DN2365 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec5))
type DN2364 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec4))
type DN2363 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec3))
type DN2362 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec2))
type DN2361 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec1))
type DN2360 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec0))
type DN2359 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec9))
type DN2358 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec8))
type DN2357 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec7))
type DN2356 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec6))
type DN2355 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec5))
type DN2354 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec4))
type DN2353 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec3))
type DN2352 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec2))
type DN2351 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec1))
type DN2350 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec0))
type DN2349 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec9))
type DN2348 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec8))
type DN2347 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec7))
type DN2346 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec6))
type DN2345 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec5))
type DN2344 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec4))
type DN2343 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec3))
type DN2342 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec2))
type DN2341 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec1))
type DN2340 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec0))
type DN2339 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec9))
type DN2338 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec8))
type DN2337 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec7))
type DN2336 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec6))
type DN2335 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec5))
type DN2334 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec4))
type DN2333 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec3))
type DN2332 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec2))
type DN2331 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec1))
type DN2330 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec0))
type DN2329 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec9))
type DN2328 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec8))
type DN2327 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec7))
type DN2326 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec6))
type DN2325 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec5))
type DN2324 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec4))
type DN2323 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec3))
type DN2322 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec2))
type DN2321 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec1))
type DN2320 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec0))
type DN2319 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec9))
type DN2318 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec8))
type DN2317 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec7))
type DN2316 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec6))
type DN2315 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec5))
type DN2314 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec4))
type DN2313 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec3))
type DN2312 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec2))
type DN2311 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec1))
type DN2310 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec0))
type DN2309 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec9))
type DN2308 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec8))
type DN2307 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec7))
type DN2306 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec6))
type DN2305 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec5))
type DN2304 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec4))
type DN2303 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec3))
type DN2302 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec2))
type DN2301 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec1))
type DN2300 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec0))
type DN2299 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec9))
type DN2298 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec8))
type DN2297 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec7))
type DN2296 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec6))
type DN2295 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec5))
type DN2294 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec4))
type DN2293 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec3))
type DN2292 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec2))
type DN2291 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec1))
type DN2290 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec0))
type DN2289 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec9))
type DN2288 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec8))
type DN2287 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec7))
type DN2286 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec6))
type DN2285 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec5))
type DN2284 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec4))
type DN2283 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec3))
type DN2282 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec2))
type DN2281 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec1))
type DN2280 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec0))
type DN2279 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec9))
type DN2278 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec8))
type DN2277 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec7))
type DN2276 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec6))
type DN2275 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec5))
type DN2274 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec4))
type DN2273 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec3))
type DN2272 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec2))
type DN2271 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec1))
type DN2270 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec0))
type DN2269 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec9))
type DN2268 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec8))
type DN2267 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec7))
type DN2266 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec6))
type DN2265 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec5))
type DN2264 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec4))
type DN2263 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec3))
type DN2262 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec2))
type DN2261 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec1))
type DN2260 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec0))
type DN2259 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec9))
type DN2258 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec8))
type DN2257 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec7))
type DN2256 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec6))
type DN2255 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec5))
type DN2254 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec4))
type DN2253 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec3))
type DN2252 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec2))
type DN2251 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec1))
type DN2250 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec0))
type DN2249 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec9))
type DN2248 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec8))
type DN2247 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec7))
type DN2246 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec6))
type DN2245 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec5))
type DN2244 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec4))
type DN2243 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec3))
type DN2242 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec2))
type DN2241 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec1))
type DN2240 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec0))
type DN2239 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec9))
type DN2238 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec8))
type DN2237 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec7))
type DN2236 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec6))
type DN2235 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec5))
type DN2234 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec4))
type DN2233 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec3))
type DN2232 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec2))
type DN2231 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec1))
type DN2230 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec0))
type DN2229 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec9))
type DN2228 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec8))
type DN2227 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec7))
type DN2226 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec6))
type DN2225 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec5))
type DN2224 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec4))
type DN2223 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec3))
type DN2222 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec2))
type DN2221 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec1))
type DN2220 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec0))
type DN2219 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec9))
type DN2218 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec8))
type DN2217 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec7))
type DN2216 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec6))
type DN2215 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec5))
type DN2214 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec4))
type DN2213 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec3))
type DN2212 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec2))
type DN2211 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec1))
type DN2210 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec0))
type DN2209 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec9))
type DN2208 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec8))
type DN2207 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec7))
type DN2206 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec6))
type DN2205 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec5))
type DN2204 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec4))
type DN2203 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec3))
type DN2202 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec2))
type DN2201 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec1))
type DN2200 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec0))
type DN2199 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec9))
type DN2198 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec8))
type DN2197 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec7))
type DN2196 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec6))
type DN2195 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec5))
type DN2194 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec4))
type DN2193 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec3))
type DN2192 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec2))
type DN2191 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec1))
type DN2190 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec0))
type DN2189 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec9))
type DN2188 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec8))
type DN2187 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec7))
type DN2186 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec6))
type DN2185 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec5))
type DN2184 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec4))
type DN2183 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec3))
type DN2182 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec2))
type DN2181 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec1))
type DN2180 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec0))
type DN2179 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec9))
type DN2178 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec8))
type DN2177 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec7))
type DN2176 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec6))
type DN2175 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec5))
type DN2174 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec4))
type DN2173 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec3))
type DN2172 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec2))
type DN2171 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec1))
type DN2170 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec0))
type DN2169 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec9))
type DN2168 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec8))
type DN2167 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec7))
type DN2166 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec6))
type DN2165 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec5))
type DN2164 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec4))
type DN2163 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec3))
type DN2162 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec2))
type DN2161 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec1))
type DN2160 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec0))
type DN2159 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec9))
type DN2158 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec8))
type DN2157 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec7))
type DN2156 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec6))
type DN2155 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec5))
type DN2154 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec4))
type DN2153 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec3))
type DN2152 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec2))
type DN2151 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec1))
type DN2150 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec0))
type DN2149 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec9))
type DN2148 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec8))
type DN2147 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec7))
type DN2146 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec6))
type DN2145 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec5))
type DN2144 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec4))
type DN2143 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec3))
type DN2142 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec2))
type DN2141 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec1))
type DN2140 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec0))
type DN2139 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec9))
type DN2138 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec8))
type DN2137 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec7))
type DN2136 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec6))
type DN2135 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec5))
type DN2134 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec4))
type DN2133 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec3))
type DN2132 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec2))
type DN2131 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec1))
type DN2130 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec0))
type DN2129 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec9))
type DN2128 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec8))
type DN2127 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec7))
type DN2126 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec6))
type DN2125 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec5))
type DN2124 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec4))
type DN2123 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec3))
type DN2122 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec2))
type DN2121 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec1))
type DN2120 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec0))
type DN2119 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec9))
type DN2118 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec8))
type DN2117 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec7))
type DN2116 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec6))
type DN2115 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec5))
type DN2114 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec4))
type DN2113 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec3))
type DN2112 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec2))
type DN2111 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec1))
type DN2110 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec0))
type DN2109 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec9))
type DN2108 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec8))
type DN2107 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec7))
type DN2106 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec6))
type DN2105 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec5))
type DN2104 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec4))
type DN2103 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec3))
type DN2102 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec2))
type DN2101 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec1))
type DN2100 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec0))
type DN2099 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec9))
type DN2098 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec8))
type DN2097 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec7))
type DN2096 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec6))
type DN2095 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec5))
type DN2094 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec4))
type DN2093 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec3))
type DN2092 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec2))
type DN2091 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec1))
type DN2090 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec0))
type DN2089 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec9))
type DN2088 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec8))
type DN2087 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec7))
type DN2086 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec6))
type DN2085 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec5))
type DN2084 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec4))
type DN2083 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec3))
type DN2082 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec2))
type DN2081 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec1))
type DN2080 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec0))
type DN2079 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec9))
type DN2078 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec8))
type DN2077 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec7))
type DN2076 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec6))
type DN2075 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec5))
type DN2074 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec4))
type DN2073 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec3))
type DN2072 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec2))
type DN2071 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec1))
type DN2070 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec0))
type DN2069 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec9))
type DN2068 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec8))
type DN2067 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec7))
type DN2066 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec6))
type DN2065 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec5))
type DN2064 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec4))
type DN2063 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec3))
type DN2062 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec2))
type DN2061 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec1))
type DN2060 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec0))
type DN2059 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec9))
type DN2058 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec8))
type DN2057 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec7))
type DN2056 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec6))
type DN2055 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec5))
type DN2054 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec4))
type DN2053 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec3))
type DN2052 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec2))
type DN2051 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec1))
type DN2050 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec0))
type DN2049 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec9))
type DN2048 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec8))
type DN2047 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec7))
type DN2046 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec6))
type DN2045 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec5))
type DN2044 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec4))
type DN2043 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec3))
type DN2042 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec2))
type DN2041 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec1))
type DN2040 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec0))
type DN2039 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec9))
type DN2038 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec8))
type DN2037 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec7))
type DN2036 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec6))
type DN2035 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec5))
type DN2034 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec4))
type DN2033 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec3))
type DN2032 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec2))
type DN2031 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec1))
type DN2030 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec0))
type DN2029 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec9))
type DN2028 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec8))
type DN2027 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec7))
type DN2026 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec6))
type DN2025 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec5))
type DN2024 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec4))
type DN2023 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec3))
type DN2022 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec2))
type DN2021 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec1))
type DN2020 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec0))
type DN2019 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec9))
type DN2018 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec8))
type DN2017 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec7))
type DN2016 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec6))
type DN2015 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec5))
type DN2014 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec4))
type DN2013 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec3))
type DN2012 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec2))
type DN2011 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec1))
type DN2010 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec0))
type DN2009 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec9))
type DN2008 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec8))
type DN2007 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec7))
type DN2006 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec6))
type DN2005 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec5))
type DN2004 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec4))
type DN2003 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec3))
type DN2002 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec2))
type DN2001 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec1))
type DN2000 = Dec (Neg' (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec0))
type DN1999 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec9))
type DN1998 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec8))
type DN1997 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec7))
type DN1996 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec6))
type DN1995 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec5))
type DN1994 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec4))
type DN1993 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec3))
type DN1992 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec2))
type DN1991 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec1))
type DN1990 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec0))
type DN1989 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec9))
type DN1988 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec8))
type DN1987 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec7))
type DN1986 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec6))
type DN1985 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec5))
type DN1984 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec4))
type DN1983 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec3))
type DN1982 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec2))
type DN1981 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec1))
type DN1980 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec0))
type DN1979 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec9))
type DN1978 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec8))
type DN1977 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec7))
type DN1976 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec6))
type DN1975 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec5))
type DN1974 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec4))
type DN1973 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec3))
type DN1972 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec2))
type DN1971 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec1))
type DN1970 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec0))
type DN1969 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec9))
type DN1968 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec8))
type DN1967 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec7))
type DN1966 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec6))
type DN1965 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec5))
type DN1964 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec4))
type DN1963 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec3))
type DN1962 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec2))
type DN1961 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec1))
type DN1960 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec0))
type DN1959 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec9))
type DN1958 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec8))
type DN1957 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec7))
type DN1956 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec6))
type DN1955 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec5))
type DN1954 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec4))
type DN1953 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec3))
type DN1952 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec2))
type DN1951 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec1))
type DN1950 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec0))
type DN1949 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec9))
type DN1948 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec8))
type DN1947 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec7))
type DN1946 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec6))
type DN1945 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec5))
type DN1944 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec4))
type DN1943 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec3))
type DN1942 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec2))
type DN1941 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec1))
type DN1940 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec0))
type DN1939 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec9))
type DN1938 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec8))
type DN1937 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec7))
type DN1936 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec6))
type DN1935 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec5))
type DN1934 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec4))
type DN1933 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec3))
type DN1932 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec2))
type DN1931 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec1))
type DN1930 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec0))
type DN1929 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec9))
type DN1928 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec8))
type DN1927 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec7))
type DN1926 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec6))
type DN1925 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec5))
type DN1924 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec4))
type DN1923 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec3))
type DN1922 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec2))
type DN1921 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec1))
type DN1920 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec0))
type DN1919 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec9))
type DN1918 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec8))
type DN1917 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec7))
type DN1916 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec6))
type DN1915 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec5))
type DN1914 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec4))
type DN1913 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec3))
type DN1912 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec2))
type DN1911 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec1))
type DN1910 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec0))
type DN1909 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec9))
type DN1908 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec8))
type DN1907 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec7))
type DN1906 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec6))
type DN1905 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec5))
type DN1904 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec4))
type DN1903 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec3))
type DN1902 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec2))
type DN1901 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec1))
type DN1900 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec0))
type DN1899 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec9))
type DN1898 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec8))
type DN1897 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec7))
type DN1896 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec6))
type DN1895 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec5))
type DN1894 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec4))
type DN1893 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec3))
type DN1892 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec2))
type DN1891 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec1))
type DN1890 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec0))
type DN1889 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec9))
type DN1888 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec8))
type DN1887 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec7))
type DN1886 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec6))
type DN1885 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec5))
type DN1884 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec4))
type DN1883 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec3))
type DN1882 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec2))
type DN1881 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec1))
type DN1880 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec0))
type DN1879 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec9))
type DN1878 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec8))
type DN1877 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec7))
type DN1876 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec6))
type DN1875 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec5))
type DN1874 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec4))
type DN1873 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec3))
type DN1872 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec2))
type DN1871 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec1))
type DN1870 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec0))
type DN1869 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec9))
type DN1868 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec8))
type DN1867 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec7))
type DN1866 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec6))
type DN1865 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec5))
type DN1864 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec4))
type DN1863 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec3))
type DN1862 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec2))
type DN1861 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec1))
type DN1860 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec0))
type DN1859 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec9))
type DN1858 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec8))
type DN1857 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec7))
type DN1856 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec6))
type DN1855 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec5))
type DN1854 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec4))
type DN1853 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec3))
type DN1852 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec2))
type DN1851 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec1))
type DN1850 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec0))
type DN1849 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec9))
type DN1848 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec8))
type DN1847 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec7))
type DN1846 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec6))
type DN1845 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec5))
type DN1844 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec4))
type DN1843 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec3))
type DN1842 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec2))
type DN1841 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec1))
type DN1840 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec0))
type DN1839 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec9))
type DN1838 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec8))
type DN1837 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec7))
type DN1836 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec6))
type DN1835 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec5))
type DN1834 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec4))
type DN1833 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec3))
type DN1832 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec2))
type DN1831 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec1))
type DN1830 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec0))
type DN1829 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec9))
type DN1828 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec8))
type DN1827 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec7))
type DN1826 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec6))
type DN1825 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec5))
type DN1824 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec4))
type DN1823 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec3))
type DN1822 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec2))
type DN1821 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec1))
type DN1820 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec0))
type DN1819 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec9))
type DN1818 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec8))
type DN1817 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec7))
type DN1816 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec6))
type DN1815 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec5))
type DN1814 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec4))
type DN1813 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec3))
type DN1812 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec2))
type DN1811 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec1))
type DN1810 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec0))
type DN1809 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec9))
type DN1808 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec8))
type DN1807 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec7))
type DN1806 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec6))
type DN1805 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec5))
type DN1804 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec4))
type DN1803 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec3))
type DN1802 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec2))
type DN1801 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec1))
type DN1800 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec0))
type DN1799 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec9))
type DN1798 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec8))
type DN1797 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec7))
type DN1796 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec6))
type DN1795 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec5))
type DN1794 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec4))
type DN1793 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec3))
type DN1792 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec2))
type DN1791 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec1))
type DN1790 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec0))
type DN1789 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec9))
type DN1788 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec8))
type DN1787 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec7))
type DN1786 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec6))
type DN1785 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec5))
type DN1784 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec4))
type DN1783 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec3))
type DN1782 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec2))
type DN1781 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec1))
type DN1780 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec0))
type DN1779 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec9))
type DN1778 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec8))
type DN1777 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec7))
type DN1776 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec6))
type DN1775 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec5))
type DN1774 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec4))
type DN1773 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec3))
type DN1772 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec2))
type DN1771 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec1))
type DN1770 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec0))
type DN1769 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec9))
type DN1768 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec8))
type DN1767 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec7))
type DN1766 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec6))
type DN1765 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec5))
type DN1764 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec4))
type DN1763 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec3))
type DN1762 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec2))
type DN1761 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec1))
type DN1760 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec0))
type DN1759 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec9))
type DN1758 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec8))
type DN1757 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec7))
type DN1756 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec6))
type DN1755 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec5))
type DN1754 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec4))
type DN1753 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec3))
type DN1752 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec2))
type DN1751 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec1))
type DN1750 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec0))
type DN1749 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec9))
type DN1748 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec8))
type DN1747 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec7))
type DN1746 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec6))
type DN1745 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec5))
type DN1744 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec4))
type DN1743 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec3))
type DN1742 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec2))
type DN1741 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec1))
type DN1740 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec0))
type DN1739 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec9))
type DN1738 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec8))
type DN1737 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec7))
type DN1736 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec6))
type DN1735 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec5))
type DN1734 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec4))
type DN1733 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec3))
type DN1732 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec2))
type DN1731 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec1))
type DN1730 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec0))
type DN1729 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec9))
type DN1728 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec8))
type DN1727 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec7))
type DN1726 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec6))
type DN1725 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec5))
type DN1724 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec4))
type DN1723 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec3))
type DN1722 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec2))
type DN1721 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec1))
type DN1720 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec0))
type DN1719 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec9))
type DN1718 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec8))
type DN1717 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec7))
type DN1716 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec6))
type DN1715 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec5))
type DN1714 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec4))
type DN1713 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec3))
type DN1712 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec2))
type DN1711 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec1))
type DN1710 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec0))
type DN1709 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec9))
type DN1708 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec8))
type DN1707 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec7))
type DN1706 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec6))
type DN1705 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec5))
type DN1704 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec4))
type DN1703 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec3))
type DN1702 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec2))
type DN1701 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec1))
type DN1700 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec0))
type DN1699 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec9))
type DN1698 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec8))
type DN1697 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec7))
type DN1696 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec6))
type DN1695 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec5))
type DN1694 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec4))
type DN1693 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec3))
type DN1692 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec2))
type DN1691 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec1))
type DN1690 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec0))
type DN1689 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec9))
type DN1688 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec8))
type DN1687 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec7))
type DN1686 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec6))
type DN1685 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec5))
type DN1684 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec4))
type DN1683 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec3))
type DN1682 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec2))
type DN1681 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec1))
type DN1680 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec0))
type DN1679 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec9))
type DN1678 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec8))
type DN1677 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec7))
type DN1676 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec6))
type DN1675 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec5))
type DN1674 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec4))
type DN1673 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec3))
type DN1672 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec2))
type DN1671 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec1))
type DN1670 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec0))
type DN1669 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec9))
type DN1668 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec8))
type DN1667 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec7))
type DN1666 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec6))
type DN1665 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec5))
type DN1664 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec4))
type DN1663 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec3))
type DN1662 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec2))
type DN1661 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec1))
type DN1660 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec0))
type DN1659 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec9))
type DN1658 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec8))
type DN1657 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec7))
type DN1656 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec6))
type DN1655 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec5))
type DN1654 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec4))
type DN1653 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec3))
type DN1652 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec2))
type DN1651 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec1))
type DN1650 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec0))
type DN1649 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec9))
type DN1648 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec8))
type DN1647 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec7))
type DN1646 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec6))
type DN1645 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec5))
type DN1644 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec4))
type DN1643 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec3))
type DN1642 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec2))
type DN1641 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec1))
type DN1640 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec0))
type DN1639 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec9))
type DN1638 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec8))
type DN1637 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec7))
type DN1636 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec6))
type DN1635 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec5))
type DN1634 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec4))
type DN1633 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec3))
type DN1632 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec2))
type DN1631 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec1))
type DN1630 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec0))
type DN1629 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec9))
type DN1628 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec8))
type DN1627 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec7))
type DN1626 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec6))
type DN1625 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec5))
type DN1624 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec4))
type DN1623 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec3))
type DN1622 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec2))
type DN1621 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec1))
type DN1620 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec0))
type DN1619 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec9))
type DN1618 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec8))
type DN1617 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec7))
type DN1616 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec6))
type DN1615 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec5))
type DN1614 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec4))
type DN1613 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec3))
type DN1612 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec2))
type DN1611 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec1))
type DN1610 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec0))
type DN1609 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec9))
type DN1608 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec8))
type DN1607 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec7))
type DN1606 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec6))
type DN1605 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec5))
type DN1604 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec4))
type DN1603 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec3))
type DN1602 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec2))
type DN1601 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec1))
type DN1600 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec0))
type DN1599 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec9))
type DN1598 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec8))
type DN1597 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec7))
type DN1596 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec6))
type DN1595 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec5))
type DN1594 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec4))
type DN1593 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec3))
type DN1592 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec2))
type DN1591 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec1))
type DN1590 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec0))
type DN1589 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec9))
type DN1588 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec8))
type DN1587 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec7))
type DN1586 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec6))
type DN1585 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec5))
type DN1584 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec4))
type DN1583 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec3))
type DN1582 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec2))
type DN1581 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec1))
type DN1580 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec0))
type DN1579 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec9))
type DN1578 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec8))
type DN1577 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec7))
type DN1576 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec6))
type DN1575 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec5))
type DN1574 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec4))
type DN1573 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec3))
type DN1572 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec2))
type DN1571 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec1))
type DN1570 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec0))
type DN1569 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec9))
type DN1568 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec8))
type DN1567 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec7))
type DN1566 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec6))
type DN1565 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec5))
type DN1564 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec4))
type DN1563 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec3))
type DN1562 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec2))
type DN1561 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec1))
type DN1560 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec0))
type DN1559 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec9))
type DN1558 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec8))
type DN1557 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec7))
type DN1556 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec6))
type DN1555 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec5))
type DN1554 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec4))
type DN1553 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec3))
type DN1552 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec2))
type DN1551 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec1))
type DN1550 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec0))
type DN1549 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec9))
type DN1548 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec8))
type DN1547 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec7))
type DN1546 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec6))
type DN1545 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec5))
type DN1544 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec4))
type DN1543 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec3))
type DN1542 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec2))
type DN1541 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec1))
type DN1540 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec0))
type DN1539 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec9))
type DN1538 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec8))
type DN1537 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec7))
type DN1536 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec6))
type DN1535 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec5))
type DN1534 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec4))
type DN1533 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec3))
type DN1532 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec2))
type DN1531 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec1))
type DN1530 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec0))
type DN1529 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec9))
type DN1528 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec8))
type DN1527 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec7))
type DN1526 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec6))
type DN1525 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec5))
type DN1524 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec4))
type DN1523 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec3))
type DN1522 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec2))
type DN1521 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec1))
type DN1520 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec0))
type DN1519 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec9))
type DN1518 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec8))
type DN1517 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec7))
type DN1516 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec6))
type DN1515 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec5))
type DN1514 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec4))
type DN1513 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec3))
type DN1512 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec2))
type DN1511 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec1))
type DN1510 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec0))
type DN1509 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec9))
type DN1508 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec8))
type DN1507 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec7))
type DN1506 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec6))
type DN1505 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec5))
type DN1504 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec4))
type DN1503 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec3))
type DN1502 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec2))
type DN1501 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec1))
type DN1500 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec0))
type DN1499 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec9))
type DN1498 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec8))
type DN1497 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec7))
type DN1496 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec6))
type DN1495 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec5))
type DN1494 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec4))
type DN1493 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec3))
type DN1492 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec2))
type DN1491 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec1))
type DN1490 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec0))
type DN1489 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec9))
type DN1488 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec8))
type DN1487 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec7))
type DN1486 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec6))
type DN1485 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec5))
type DN1484 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec4))
type DN1483 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec3))
type DN1482 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec2))
type DN1481 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec1))
type DN1480 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec0))
type DN1479 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec9))
type DN1478 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec8))
type DN1477 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec7))
type DN1476 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec6))
type DN1475 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec5))
type DN1474 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec4))
type DN1473 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec3))
type DN1472 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec2))
type DN1471 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec1))
type DN1470 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec0))
type DN1469 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec9))
type DN1468 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec8))
type DN1467 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec7))
type DN1466 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec6))
type DN1465 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec5))
type DN1464 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec4))
type DN1463 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec3))
type DN1462 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec2))
type DN1461 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec1))
type DN1460 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec0))
type DN1459 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec9))
type DN1458 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec8))
type DN1457 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec7))
type DN1456 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec6))
type DN1455 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec5))
type DN1454 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec4))
type DN1453 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec3))
type DN1452 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec2))
type DN1451 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec1))
type DN1450 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec0))
type DN1449 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec9))
type DN1448 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec8))
type DN1447 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec7))
type DN1446 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec6))
type DN1445 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec5))
type DN1444 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec4))
type DN1443 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec3))
type DN1442 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec2))
type DN1441 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec1))
type DN1440 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec0))
type DN1439 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec9))
type DN1438 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec8))
type DN1437 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec7))
type DN1436 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec6))
type DN1435 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec5))
type DN1434 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec4))
type DN1433 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec3))
type DN1432 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec2))
type DN1431 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec1))
type DN1430 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec0))
type DN1429 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec9))
type DN1428 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec8))
type DN1427 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec7))
type DN1426 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec6))
type DN1425 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec5))
type DN1424 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec4))
type DN1423 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec3))
type DN1422 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec2))
type DN1421 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec1))
type DN1420 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec0))
type DN1419 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec9))
type DN1418 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec8))
type DN1417 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec7))
type DN1416 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec6))
type DN1415 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec5))
type DN1414 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec4))
type DN1413 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec3))
type DN1412 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec2))
type DN1411 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec1))
type DN1410 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec0))
type DN1409 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec9))
type DN1408 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec8))
type DN1407 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec7))
type DN1406 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec6))
type DN1405 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec5))
type DN1404 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec4))
type DN1403 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec3))
type DN1402 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec2))
type DN1401 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec1))
type DN1400 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec0))
type DN1399 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec9))
type DN1398 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec8))
type DN1397 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec7))
type DN1396 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec6))
type DN1395 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec5))
type DN1394 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec4))
type DN1393 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec3))
type DN1392 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec2))
type DN1391 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec1))
type DN1390 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec0))
type DN1389 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec9))
type DN1388 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec8))
type DN1387 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec7))
type DN1386 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec6))
type DN1385 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec5))
type DN1384 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec4))
type DN1383 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec3))
type DN1382 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec2))
type DN1381 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec1))
type DN1380 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec0))
type DN1379 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec9))
type DN1378 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec8))
type DN1377 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec7))
type DN1376 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec6))
type DN1375 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec5))
type DN1374 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec4))
type DN1373 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec3))
type DN1372 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec2))
type DN1371 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec1))
type DN1370 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec0))
type DN1369 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec9))
type DN1368 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec8))
type DN1367 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec7))
type DN1366 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec6))
type DN1365 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec5))
type DN1364 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec4))
type DN1363 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec3))
type DN1362 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec2))
type DN1361 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec1))
type DN1360 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec0))
type DN1359 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec9))
type DN1358 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec8))
type DN1357 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec7))
type DN1356 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec6))
type DN1355 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec5))
type DN1354 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec4))
type DN1353 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec3))
type DN1352 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec2))
type DN1351 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec1))
type DN1350 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec0))
type DN1349 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec9))
type DN1348 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec8))
type DN1347 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec7))
type DN1346 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec6))
type DN1345 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec5))
type DN1344 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec4))
type DN1343 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec3))
type DN1342 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec2))
type DN1341 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec1))
type DN1340 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec0))
type DN1339 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec9))
type DN1338 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec8))
type DN1337 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec7))
type DN1336 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec6))
type DN1335 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec5))
type DN1334 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec4))
type DN1333 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec3))
type DN1332 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec2))
type DN1331 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec1))
type DN1330 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec0))
type DN1329 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec9))
type DN1328 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec8))
type DN1327 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec7))
type DN1326 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec6))
type DN1325 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec5))
type DN1324 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec4))
type DN1323 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec3))
type DN1322 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec2))
type DN1321 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec1))
type DN1320 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec0))
type DN1319 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec9))
type DN1318 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec8))
type DN1317 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec7))
type DN1316 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec6))
type DN1315 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec5))
type DN1314 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec4))
type DN1313 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec3))
type DN1312 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec2))
type DN1311 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec1))
type DN1310 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec0))
type DN1309 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec9))
type DN1308 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec8))
type DN1307 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec7))
type DN1306 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec6))
type DN1305 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec5))
type DN1304 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec4))
type DN1303 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec3))
type DN1302 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec2))
type DN1301 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec1))
type DN1300 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec0))
type DN1299 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec9))
type DN1298 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec8))
type DN1297 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec7))
type DN1296 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec6))
type DN1295 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec5))
type DN1294 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec4))
type DN1293 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec3))
type DN1292 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec2))
type DN1291 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec1))
type DN1290 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec0))
type DN1289 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec9))
type DN1288 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec8))
type DN1287 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec7))
type DN1286 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec6))
type DN1285 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec5))
type DN1284 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec4))
type DN1283 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec3))
type DN1282 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec2))
type DN1281 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec1))
type DN1280 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec0))
type DN1279 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec9))
type DN1278 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec8))
type DN1277 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec7))
type DN1276 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec6))
type DN1275 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec5))
type DN1274 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec4))
type DN1273 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec3))
type DN1272 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec2))
type DN1271 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec1))
type DN1270 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec0))
type DN1269 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec9))
type DN1268 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec8))
type DN1267 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec7))
type DN1266 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec6))
type DN1265 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec5))
type DN1264 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec4))
type DN1263 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec3))
type DN1262 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec2))
type DN1261 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec1))
type DN1260 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec0))
type DN1259 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec9))
type DN1258 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec8))
type DN1257 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec7))
type DN1256 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec6))
type DN1255 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec5))
type DN1254 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec4))
type DN1253 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec3))
type DN1252 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec2))
type DN1251 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec1))
type DN1250 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec0))
type DN1249 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec9))
type DN1248 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec8))
type DN1247 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec7))
type DN1246 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec6))
type DN1245 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec5))
type DN1244 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec4))
type DN1243 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec3))
type DN1242 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec2))
type DN1241 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec1))
type DN1240 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec0))
type DN1239 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec9))
type DN1238 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec8))
type DN1237 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec7))
type DN1236 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec6))
type DN1235 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec5))
type DN1234 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec4))
type DN1233 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec3))
type DN1232 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec2))
type DN1231 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec1))
type DN1230 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec0))
type DN1229 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec9))
type DN1228 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec8))
type DN1227 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec7))
type DN1226 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec6))
type DN1225 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec5))
type DN1224 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec4))
type DN1223 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec3))
type DN1222 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec2))
type DN1221 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec1))
type DN1220 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec0))
type DN1219 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec9))
type DN1218 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec8))
type DN1217 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec7))
type DN1216 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec6))
type DN1215 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec5))
type DN1214 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec4))
type DN1213 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec3))
type DN1212 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec2))
type DN1211 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec1))
type DN1210 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec0))
type DN1209 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec9))
type DN1208 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec8))
type DN1207 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec7))
type DN1206 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec6))
type DN1205 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec5))
type DN1204 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec4))
type DN1203 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec3))
type DN1202 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec2))
type DN1201 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec1))
type DN1200 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec0))
type DN1199 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec9))
type DN1198 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec8))
type DN1197 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec7))
type DN1196 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec6))
type DN1195 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec5))
type DN1194 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec4))
type DN1193 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec3))
type DN1192 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec2))
type DN1191 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec1))
type DN1190 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec0))
type DN1189 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec9))
type DN1188 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec8))
type DN1187 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec7))
type DN1186 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec6))
type DN1185 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec5))
type DN1184 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec4))
type DN1183 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec3))
type DN1182 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec2))
type DN1181 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec1))
type DN1180 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec0))
type DN1179 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec9))
type DN1178 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec8))
type DN1177 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec7))
type DN1176 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec6))
type DN1175 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec5))
type DN1174 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec4))
type DN1173 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec3))
type DN1172 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec2))
type DN1171 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec1))
type DN1170 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec0))
type DN1169 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec9))
type DN1168 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec8))
type DN1167 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec7))
type DN1166 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec6))
type DN1165 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec5))
type DN1164 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec4))
type DN1163 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec3))
type DN1162 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec2))
type DN1161 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec1))
type DN1160 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec0))
type DN1159 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec9))
type DN1158 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec8))
type DN1157 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec7))
type DN1156 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec6))
type DN1155 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec5))
type DN1154 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec4))
type DN1153 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec3))
type DN1152 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec2))
type DN1151 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec1))
type DN1150 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec0))
type DN1149 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec9))
type DN1148 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec8))
type DN1147 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec7))
type DN1146 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec6))
type DN1145 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec5))
type DN1144 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec4))
type DN1143 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec3))
type DN1142 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec2))
type DN1141 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec1))
type DN1140 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec0))
type DN1139 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec9))
type DN1138 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec8))
type DN1137 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec7))
type DN1136 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec6))
type DN1135 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec5))
type DN1134 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec4))
type DN1133 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec3))
type DN1132 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec2))
type DN1131 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec1))
type DN1130 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec0))
type DN1129 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec9))
type DN1128 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec8))
type DN1127 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec7))
type DN1126 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec6))
type DN1125 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec5))
type DN1124 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec4))
type DN1123 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec3))
type DN1122 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec2))
type DN1121 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec1))
type DN1120 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec0))
type DN1119 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec9))
type DN1118 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec8))
type DN1117 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec7))
type DN1116 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec6))
type DN1115 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec5))
type DN1114 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec4))
type DN1113 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec3))
type DN1112 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec2))
type DN1111 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec1))
type DN1110 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec0))
type DN1109 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec9))
type DN1108 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec8))
type DN1107 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec7))
type DN1106 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec6))
type DN1105 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec5))
type DN1104 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec4))
type DN1103 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec3))
type DN1102 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec2))
type DN1101 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec1))
type DN1100 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec0))
type DN1099 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec9))
type DN1098 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec8))
type DN1097 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec7))
type DN1096 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec6))
type DN1095 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec5))
type DN1094 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec4))
type DN1093 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec3))
type DN1092 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec2))
type DN1091 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec1))
type DN1090 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec0))
type DN1089 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec9))
type DN1088 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec8))
type DN1087 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec7))
type DN1086 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec6))
type DN1085 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec5))
type DN1084 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec4))
type DN1083 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec3))
type DN1082 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec2))
type DN1081 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec1))
type DN1080 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec0))
type DN1079 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec9))
type DN1078 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec8))
type DN1077 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec7))
type DN1076 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec6))
type DN1075 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec5))
type DN1074 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec4))
type DN1073 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec3))
type DN1072 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec2))
type DN1071 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec1))
type DN1070 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec0))
type DN1069 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec9))
type DN1068 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec8))
type DN1067 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec7))
type DN1066 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec6))
type DN1065 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec5))
type DN1064 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec4))
type DN1063 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec3))
type DN1062 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec2))
type DN1061 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec1))
type DN1060 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec0))
type DN1059 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec9))
type DN1058 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec8))
type DN1057 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec7))
type DN1056 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec6))
type DN1055 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec5))
type DN1054 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec4))
type DN1053 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec3))
type DN1052 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec2))
type DN1051 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec1))
type DN1050 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec0))
type DN1049 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec9))
type DN1048 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec8))
type DN1047 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec7))
type DN1046 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec6))
type DN1045 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec5))
type DN1044 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec4))
type DN1043 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec3))
type DN1042 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec2))
type DN1041 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec1))
type DN1040 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec0))
type DN1039 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec9))
type DN1038 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec8))
type DN1037 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec7))
type DN1036 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec6))
type DN1035 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec5))
type DN1034 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec4))
type DN1033 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec3))
type DN1032 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec2))
type DN1031 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec1))
type DN1030 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec0))
type DN1029 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec9))
type DN1028 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec8))
type DN1027 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec7))
type DN1026 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec6))
type DN1025 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec5))
type DN1024 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec4))
type DN1023 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec3))
type DN1022 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec2))
type DN1021 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec1))
type DN1020 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec0))
type DN1019 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec9))
type DN1018 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec8))
type DN1017 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec7))
type DN1016 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec6))
type DN1015 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec5))
type DN1014 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec4))
type DN1013 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec3))
type DN1012 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec2))
type DN1011 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec1))
type DN1010 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec0))
type DN1009 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec9))
type DN1008 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec8))
type DN1007 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec7))
type DN1006 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec6))
type DN1005 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec5))
type DN1004 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec4))
type DN1003 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec3))
type DN1002 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec2))
type DN1001 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec1))
type DN1000 = Dec (Neg' (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec0))
type DN999 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec9))
type DN998 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec8))
type DN997 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec7))
type DN996 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec6))
type DN995 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec5))
type DN994 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec4))
type DN993 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec3))
type DN992 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec2))
type DN991 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec1))
type DN990 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec9) Dec0))
type DN989 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec9))
type DN988 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec8))
type DN987 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec7))
type DN986 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec6))
type DN985 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec5))
type DN984 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec4))
type DN983 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec3))
type DN982 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec2))
type DN981 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec1))
type DN980 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec8) Dec0))
type DN979 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec9))
type DN978 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec8))
type DN977 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec7))
type DN976 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec6))
type DN975 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec5))
type DN974 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec4))
type DN973 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec3))
type DN972 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec2))
type DN971 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec1))
type DN970 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec7) Dec0))
type DN969 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec9))
type DN968 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec8))
type DN967 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec7))
type DN966 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec6))
type DN965 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec5))
type DN964 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec4))
type DN963 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec3))
type DN962 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec2))
type DN961 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec1))
type DN960 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec6) Dec0))
type DN959 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec9))
type DN958 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec8))
type DN957 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec7))
type DN956 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec6))
type DN955 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec5))
type DN954 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec4))
type DN953 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec3))
type DN952 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec2))
type DN951 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec1))
type DN950 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec5) Dec0))
type DN949 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec9))
type DN948 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec8))
type DN947 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec7))
type DN946 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec6))
type DN945 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec5))
type DN944 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec4))
type DN943 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec3))
type DN942 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec2))
type DN941 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec1))
type DN940 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec4) Dec0))
type DN939 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec9))
type DN938 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec8))
type DN937 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec7))
type DN936 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec6))
type DN935 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec5))
type DN934 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec4))
type DN933 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec3))
type DN932 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec2))
type DN931 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec1))
type DN930 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec3) Dec0))
type DN929 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec9))
type DN928 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec8))
type DN927 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec7))
type DN926 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec6))
type DN925 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec5))
type DN924 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec4))
type DN923 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec3))
type DN922 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec2))
type DN921 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec1))
type DN920 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec2) Dec0))
type DN919 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec9))
type DN918 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec8))
type DN917 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec7))
type DN916 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec6))
type DN915 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec5))
type DN914 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec4))
type DN913 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec3))
type DN912 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec2))
type DN911 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec1))
type DN910 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec1) Dec0))
type DN909 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec9))
type DN908 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec8))
type DN907 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec7))
type DN906 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec6))
type DN905 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec5))
type DN904 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec4))
type DN903 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec3))
type DN902 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec2))
type DN901 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec1))
type DN900 = Dec (Neg' (:. (:. (:. DecN Dec9) Dec0) Dec0))
type DN899 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec9))
type DN898 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec8))
type DN897 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec7))
type DN896 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec6))
type DN895 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec5))
type DN894 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec4))
type DN893 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec3))
type DN892 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec2))
type DN891 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec1))
type DN890 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec9) Dec0))
type DN889 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec9))
type DN888 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec8))
type DN887 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec7))
type DN886 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec6))
type DN885 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec5))
type DN884 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec4))
type DN883 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec3))
type DN882 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec2))
type DN881 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec1))
type DN880 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec8) Dec0))
type DN879 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec9))
type DN878 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec8))
type DN877 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec7))
type DN876 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec6))
type DN875 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec5))
type DN874 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec4))
type DN873 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec3))
type DN872 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec2))
type DN871 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec1))
type DN870 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec7) Dec0))
type DN869 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec9))
type DN868 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec8))
type DN867 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec7))
type DN866 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec6))
type DN865 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec5))
type DN864 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec4))
type DN863 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec3))
type DN862 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec2))
type DN861 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec1))
type DN860 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec6) Dec0))
type DN859 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec9))
type DN858 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec8))
type DN857 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec7))
type DN856 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec6))
type DN855 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec5))
type DN854 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec4))
type DN853 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec3))
type DN852 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec2))
type DN851 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec1))
type DN850 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec5) Dec0))
type DN849 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec9))
type DN848 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec8))
type DN847 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec7))
type DN846 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec6))
type DN845 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec5))
type DN844 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec4))
type DN843 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec3))
type DN842 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec2))
type DN841 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec1))
type DN840 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec4) Dec0))
type DN839 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec9))
type DN838 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec8))
type DN837 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec7))
type DN836 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec6))
type DN835 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec5))
type DN834 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec4))
type DN833 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec3))
type DN832 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec2))
type DN831 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec1))
type DN830 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec3) Dec0))
type DN829 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec9))
type DN828 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec8))
type DN827 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec7))
type DN826 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec6))
type DN825 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec5))
type DN824 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec4))
type DN823 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec3))
type DN822 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec2))
type DN821 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec1))
type DN820 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec2) Dec0))
type DN819 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec9))
type DN818 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec8))
type DN817 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec7))
type DN816 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec6))
type DN815 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec5))
type DN814 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec4))
type DN813 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec3))
type DN812 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec2))
type DN811 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec1))
type DN810 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec1) Dec0))
type DN809 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec9))
type DN808 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec8))
type DN807 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec7))
type DN806 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec6))
type DN805 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec5))
type DN804 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec4))
type DN803 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec3))
type DN802 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec2))
type DN801 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec1))
type DN800 = Dec (Neg' (:. (:. (:. DecN Dec8) Dec0) Dec0))
type DN799 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec9))
type DN798 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec8))
type DN797 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec7))
type DN796 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec6))
type DN795 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec5))
type DN794 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec4))
type DN793 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec3))
type DN792 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec2))
type DN791 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec1))
type DN790 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec9) Dec0))
type DN789 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec9))
type DN788 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec8))
type DN787 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec7))
type DN786 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec6))
type DN785 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec5))
type DN784 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec4))
type DN783 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec3))
type DN782 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec2))
type DN781 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec1))
type DN780 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec8) Dec0))
type DN779 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec9))
type DN778 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec8))
type DN777 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec7))
type DN776 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec6))
type DN775 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec5))
type DN774 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec4))
type DN773 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec3))
type DN772 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec2))
type DN771 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec1))
type DN770 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec7) Dec0))
type DN769 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec9))
type DN768 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec8))
type DN767 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec7))
type DN766 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec6))
type DN765 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec5))
type DN764 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec4))
type DN763 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec3))
type DN762 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec2))
type DN761 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec1))
type DN760 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec6) Dec0))
type DN759 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec9))
type DN758 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec8))
type DN757 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec7))
type DN756 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec6))
type DN755 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec5))
type DN754 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec4))
type DN753 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec3))
type DN752 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec2))
type DN751 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec1))
type DN750 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec5) Dec0))
type DN749 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec9))
type DN748 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec8))
type DN747 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec7))
type DN746 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec6))
type DN745 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec5))
type DN744 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec4))
type DN743 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec3))
type DN742 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec2))
type DN741 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec1))
type DN740 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec4) Dec0))
type DN739 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec9))
type DN738 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec8))
type DN737 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec7))
type DN736 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec6))
type DN735 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec5))
type DN734 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec4))
type DN733 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec3))
type DN732 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec2))
type DN731 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec1))
type DN730 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec3) Dec0))
type DN729 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec9))
type DN728 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec8))
type DN727 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec7))
type DN726 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec6))
type DN725 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec5))
type DN724 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec4))
type DN723 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec3))
type DN722 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec2))
type DN721 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec1))
type DN720 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec2) Dec0))
type DN719 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec9))
type DN718 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec8))
type DN717 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec7))
type DN716 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec6))
type DN715 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec5))
type DN714 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec4))
type DN713 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec3))
type DN712 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec2))
type DN711 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec1))
type DN710 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec1) Dec0))
type DN709 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec9))
type DN708 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec8))
type DN707 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec7))
type DN706 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec6))
type DN705 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec5))
type DN704 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec4))
type DN703 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec3))
type DN702 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec2))
type DN701 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec1))
type DN700 = Dec (Neg' (:. (:. (:. DecN Dec7) Dec0) Dec0))
type DN699 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec9))
type DN698 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec8))
type DN697 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec7))
type DN696 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec6))
type DN695 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec5))
type DN694 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec4))
type DN693 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec3))
type DN692 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec2))
type DN691 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec1))
type DN690 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec9) Dec0))
type DN689 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec9))
type DN688 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec8))
type DN687 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec7))
type DN686 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec6))
type DN685 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec5))
type DN684 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec4))
type DN683 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec3))
type DN682 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec2))
type DN681 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec1))
type DN680 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec8) Dec0))
type DN679 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec9))
type DN678 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec8))
type DN677 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec7))
type DN676 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec6))
type DN675 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec5))
type DN674 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec4))
type DN673 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec3))
type DN672 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec2))
type DN671 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec1))
type DN670 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec7) Dec0))
type DN669 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec9))
type DN668 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec8))
type DN667 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec7))
type DN666 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec6))
type DN665 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec5))
type DN664 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec4))
type DN663 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec3))
type DN662 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec2))
type DN661 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec1))
type DN660 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec6) Dec0))
type DN659 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec9))
type DN658 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec8))
type DN657 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec7))
type DN656 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec6))
type DN655 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec5))
type DN654 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec4))
type DN653 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec3))
type DN652 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec2))
type DN651 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec1))
type DN650 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec5) Dec0))
type DN649 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec9))
type DN648 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec8))
type DN647 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec7))
type DN646 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec6))
type DN645 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec5))
type DN644 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec4))
type DN643 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec3))
type DN642 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec2))
type DN641 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec1))
type DN640 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec4) Dec0))
type DN639 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec9))
type DN638 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec8))
type DN637 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec7))
type DN636 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec6))
type DN635 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec5))
type DN634 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec4))
type DN633 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec3))
type DN632 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec2))
type DN631 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec1))
type DN630 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec3) Dec0))
type DN629 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec9))
type DN628 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec8))
type DN627 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec7))
type DN626 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec6))
type DN625 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec5))
type DN624 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec4))
type DN623 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec3))
type DN622 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec2))
type DN621 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec1))
type DN620 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec2) Dec0))
type DN619 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec9))
type DN618 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec8))
type DN617 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec7))
type DN616 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec6))
type DN615 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec5))
type DN614 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec4))
type DN613 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec3))
type DN612 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec2))
type DN611 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec1))
type DN610 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec1) Dec0))
type DN609 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec9))
type DN608 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec8))
type DN607 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec7))
type DN606 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec6))
type DN605 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec5))
type DN604 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec4))
type DN603 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec3))
type DN602 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec2))
type DN601 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec1))
type DN600 = Dec (Neg' (:. (:. (:. DecN Dec6) Dec0) Dec0))
type DN599 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec9))
type DN598 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec8))
type DN597 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec7))
type DN596 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec6))
type DN595 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec5))
type DN594 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec4))
type DN593 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec3))
type DN592 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec2))
type DN591 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec1))
type DN590 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec9) Dec0))
type DN589 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec9))
type DN588 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec8))
type DN587 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec7))
type DN586 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec6))
type DN585 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec5))
type DN584 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec4))
type DN583 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec3))
type DN582 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec2))
type DN581 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec1))
type DN580 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec8) Dec0))
type DN579 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec9))
type DN578 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec8))
type DN577 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec7))
type DN576 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec6))
type DN575 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec5))
type DN574 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec4))
type DN573 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec3))
type DN572 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec2))
type DN571 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec1))
type DN570 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec7) Dec0))
type DN569 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec9))
type DN568 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec8))
type DN567 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec7))
type DN566 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec6))
type DN565 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec5))
type DN564 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec4))
type DN563 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec3))
type DN562 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec2))
type DN561 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec1))
type DN560 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec6) Dec0))
type DN559 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec9))
type DN558 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec8))
type DN557 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec7))
type DN556 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec6))
type DN555 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec5))
type DN554 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec4))
type DN553 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec3))
type DN552 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec2))
type DN551 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec1))
type DN550 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec5) Dec0))
type DN549 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec9))
type DN548 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec8))
type DN547 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec7))
type DN546 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec6))
type DN545 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec5))
type DN544 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec4))
type DN543 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec3))
type DN542 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec2))
type DN541 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec1))
type DN540 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec4) Dec0))
type DN539 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec9))
type DN538 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec8))
type DN537 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec7))
type DN536 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec6))
type DN535 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec5))
type DN534 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec4))
type DN533 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec3))
type DN532 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec2))
type DN531 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec1))
type DN530 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec3) Dec0))
type DN529 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec9))
type DN528 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec8))
type DN527 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec7))
type DN526 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec6))
type DN525 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec5))
type DN524 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec4))
type DN523 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec3))
type DN522 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec2))
type DN521 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec1))
type DN520 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec2) Dec0))
type DN519 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec9))
type DN518 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec8))
type DN517 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec7))
type DN516 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec6))
type DN515 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec5))
type DN514 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec4))
type DN513 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec3))
type DN512 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec2))
type DN511 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec1))
type DN510 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec1) Dec0))
type DN509 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec9))
type DN508 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec8))
type DN507 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec7))
type DN506 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec6))
type DN505 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec5))
type DN504 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec4))
type DN503 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec3))
type DN502 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec2))
type DN501 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec1))
type DN500 = Dec (Neg' (:. (:. (:. DecN Dec5) Dec0) Dec0))
type DN499 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec9))
type DN498 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec8))
type DN497 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec7))
type DN496 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec6))
type DN495 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec5))
type DN494 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec4))
type DN493 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec3))
type DN492 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec2))
type DN491 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec1))
type DN490 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec9) Dec0))
type DN489 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec9))
type DN488 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec8))
type DN487 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec7))
type DN486 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec6))
type DN485 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec5))
type DN484 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec4))
type DN483 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec3))
type DN482 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec2))
type DN481 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec1))
type DN480 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec8) Dec0))
type DN479 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec9))
type DN478 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec8))
type DN477 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec7))
type DN476 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec6))
type DN475 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec5))
type DN474 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec4))
type DN473 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec3))
type DN472 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec2))
type DN471 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec1))
type DN470 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec7) Dec0))
type DN469 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec9))
type DN468 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec8))
type DN467 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec7))
type DN466 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec6))
type DN465 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec5))
type DN464 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec4))
type DN463 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec3))
type DN462 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec2))
type DN461 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec1))
type DN460 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec6) Dec0))
type DN459 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec9))
type DN458 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec8))
type DN457 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec7))
type DN456 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec6))
type DN455 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec5))
type DN454 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec4))
type DN453 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec3))
type DN452 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec2))
type DN451 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec1))
type DN450 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec5) Dec0))
type DN449 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec9))
type DN448 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec8))
type DN447 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec7))
type DN446 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec6))
type DN445 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec5))
type DN444 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec4))
type DN443 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec3))
type DN442 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec2))
type DN441 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec1))
type DN440 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec4) Dec0))
type DN439 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec9))
type DN438 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec8))
type DN437 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec7))
type DN436 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec6))
type DN435 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec5))
type DN434 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec4))
type DN433 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec3))
type DN432 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec2))
type DN431 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec1))
type DN430 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec3) Dec0))
type DN429 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec9))
type DN428 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec8))
type DN427 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec7))
type DN426 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec6))
type DN425 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec5))
type DN424 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec4))
type DN423 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec3))
type DN422 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec2))
type DN421 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec1))
type DN420 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec2) Dec0))
type DN419 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec9))
type DN418 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec8))
type DN417 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec7))
type DN416 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec6))
type DN415 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec5))
type DN414 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec4))
type DN413 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec3))
type DN412 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec2))
type DN411 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec1))
type DN410 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec1) Dec0))
type DN409 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec9))
type DN408 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec8))
type DN407 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec7))
type DN406 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec6))
type DN405 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec5))
type DN404 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec4))
type DN403 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec3))
type DN402 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec2))
type DN401 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec1))
type DN400 = Dec (Neg' (:. (:. (:. DecN Dec4) Dec0) Dec0))
type DN399 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec9))
type DN398 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec8))
type DN397 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec7))
type DN396 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec6))
type DN395 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec5))
type DN394 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec4))
type DN393 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec3))
type DN392 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec2))
type DN391 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec1))
type DN390 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec9) Dec0))
type DN389 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec9))
type DN388 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec8))
type DN387 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec7))
type DN386 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec6))
type DN385 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec5))
type DN384 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec4))
type DN383 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec3))
type DN382 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec2))
type DN381 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec1))
type DN380 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec8) Dec0))
type DN379 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec9))
type DN378 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec8))
type DN377 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec7))
type DN376 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec6))
type DN375 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec5))
type DN374 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec4))
type DN373 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec3))
type DN372 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec2))
type DN371 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec1))
type DN370 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec7) Dec0))
type DN369 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec9))
type DN368 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec8))
type DN367 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec7))
type DN366 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec6))
type DN365 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec5))
type DN364 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec4))
type DN363 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec3))
type DN362 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec2))
type DN361 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec1))
type DN360 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec6) Dec0))
type DN359 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec9))
type DN358 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec8))
type DN357 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec7))
type DN356 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec6))
type DN355 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec5))
type DN354 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec4))
type DN353 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec3))
type DN352 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec2))
type DN351 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec1))
type DN350 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec5) Dec0))
type DN349 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec9))
type DN348 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec8))
type DN347 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec7))
type DN346 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec6))
type DN345 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec5))
type DN344 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec4))
type DN343 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec3))
type DN342 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec2))
type DN341 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec1))
type DN340 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec4) Dec0))
type DN339 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec9))
type DN338 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec8))
type DN337 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec7))
type DN336 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec6))
type DN335 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec5))
type DN334 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec4))
type DN333 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec3))
type DN332 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec2))
type DN331 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec1))
type DN330 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec3) Dec0))
type DN329 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec9))
type DN328 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec8))
type DN327 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec7))
type DN326 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec6))
type DN325 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec5))
type DN324 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec4))
type DN323 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec3))
type DN322 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec2))
type DN321 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec1))
type DN320 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec2) Dec0))
type DN319 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec9))
type DN318 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec8))
type DN317 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec7))
type DN316 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec6))
type DN315 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec5))
type DN314 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec4))
type DN313 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec3))
type DN312 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec2))
type DN311 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec1))
type DN310 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec1) Dec0))
type DN309 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec9))
type DN308 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec8))
type DN307 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec7))
type DN306 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec6))
type DN305 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec5))
type DN304 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec4))
type DN303 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec3))
type DN302 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec2))
type DN301 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec1))
type DN300 = Dec (Neg' (:. (:. (:. DecN Dec3) Dec0) Dec0))
type DN299 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec9))
type DN298 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec8))
type DN297 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec7))
type DN296 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec6))
type DN295 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec5))
type DN294 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec4))
type DN293 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec3))
type DN292 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec2))
type DN291 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec1))
type DN290 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec9) Dec0))
type DN289 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec9))
type DN288 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec8))
type DN287 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec7))
type DN286 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec6))
type DN285 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec5))
type DN284 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec4))
type DN283 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec3))
type DN282 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec2))
type DN281 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec1))
type DN280 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec8) Dec0))
type DN279 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec9))
type DN278 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec8))
type DN277 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec7))
type DN276 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec6))
type DN275 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec5))
type DN274 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec4))
type DN273 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec3))
type DN272 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec2))
type DN271 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec1))
type DN270 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec7) Dec0))
type DN269 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec9))
type DN268 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec8))
type DN267 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec7))
type DN266 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec6))
type DN265 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec5))
type DN264 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec4))
type DN263 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec3))
type DN262 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec2))
type DN261 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec1))
type DN260 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec6) Dec0))
type DN259 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec9))
type DN258 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec8))
type DN257 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec7))
type DN256 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec6))
type DN255 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec5))
type DN254 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec4))
type DN253 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec3))
type DN252 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec2))
type DN251 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec1))
type DN250 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec5) Dec0))
type DN249 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec9))
type DN248 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec8))
type DN247 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec7))
type DN246 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec6))
type DN245 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec5))
type DN244 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec4))
type DN243 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec3))
type DN242 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec2))
type DN241 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec1))
type DN240 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec4) Dec0))
type DN239 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec9))
type DN238 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec8))
type DN237 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec7))
type DN236 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec6))
type DN235 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec5))
type DN234 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec4))
type DN233 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec3))
type DN232 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec2))
type DN231 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec1))
type DN230 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec3) Dec0))
type DN229 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec9))
type DN228 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec8))
type DN227 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec7))
type DN226 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec6))
type DN225 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec5))
type DN224 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec4))
type DN223 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec3))
type DN222 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec2))
type DN221 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec1))
type DN220 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec2) Dec0))
type DN219 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec9))
type DN218 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec8))
type DN217 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec7))
type DN216 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec6))
type DN215 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec5))
type DN214 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec4))
type DN213 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec3))
type DN212 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec2))
type DN211 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec1))
type DN210 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec1) Dec0))
type DN209 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec9))
type DN208 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec8))
type DN207 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec7))
type DN206 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec6))
type DN205 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec5))
type DN204 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec4))
type DN203 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec3))
type DN202 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec2))
type DN201 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec1))
type DN200 = Dec (Neg' (:. (:. (:. DecN Dec2) Dec0) Dec0))
type DN199 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec9))
type DN198 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec8))
type DN197 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec7))
type DN196 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec6))
type DN195 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec5))
type DN194 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec4))
type DN193 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec3))
type DN192 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec2))
type DN191 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec1))
type DN190 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec9) Dec0))
type DN189 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec9))
type DN188 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec8))
type DN187 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec7))
type DN186 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec6))
type DN185 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec5))
type DN184 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec4))
type DN183 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec3))
type DN182 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec2))
type DN181 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec1))
type DN180 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec8) Dec0))
type DN179 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec9))
type DN178 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec8))
type DN177 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec7))
type DN176 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec6))
type DN175 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec5))
type DN174 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec4))
type DN173 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec3))
type DN172 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec2))
type DN171 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec1))
type DN170 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec7) Dec0))
type DN169 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec9))
type DN168 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec8))
type DN167 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec7))
type DN166 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec6))
type DN165 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec5))
type DN164 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec4))
type DN163 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec3))
type DN162 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec2))
type DN161 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec1))
type DN160 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec6) Dec0))
type DN159 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec9))
type DN158 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec8))
type DN157 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec7))
type DN156 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec6))
type DN155 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec5))
type DN154 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec4))
type DN153 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec3))
type DN152 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec2))
type DN151 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec1))
type DN150 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec5) Dec0))
type DN149 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec9))
type DN148 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec8))
type DN147 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec7))
type DN146 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec6))
type DN145 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec5))
type DN144 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec4))
type DN143 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec3))
type DN142 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec2))
type DN141 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec1))
type DN140 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec4) Dec0))
type DN139 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec9))
type DN138 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec8))
type DN137 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec7))
type DN136 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec6))
type DN135 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec5))
type DN134 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec4))
type DN133 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec3))
type DN132 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec2))
type DN131 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec1))
type DN130 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec3) Dec0))
type DN129 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec9))
type DN128 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec8))
type DN127 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec7))
type DN126 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec6))
type DN125 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec5))
type DN124 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec4))
type DN123 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec3))
type DN122 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec2))
type DN121 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec1))
type DN120 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec2) Dec0))
type DN119 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec9))
type DN118 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec8))
type DN117 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec7))
type DN116 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec6))
type DN115 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec5))
type DN114 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec4))
type DN113 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec3))
type DN112 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec2))
type DN111 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec1))
type DN110 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec1) Dec0))
type DN109 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec9))
type DN108 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec8))
type DN107 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec7))
type DN106 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec6))
type DN105 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec5))
type DN104 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec4))
type DN103 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec3))
type DN102 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec2))
type DN101 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec1))
type DN100 = Dec (Neg' (:. (:. (:. DecN Dec1) Dec0) Dec0))
type DN99 = Dec (Neg' (:. (:. DecN Dec9) Dec9))
type DN98 = Dec (Neg' (:. (:. DecN Dec9) Dec8))
type DN97 = Dec (Neg' (:. (:. DecN Dec9) Dec7))
type DN96 = Dec (Neg' (:. (:. DecN Dec9) Dec6))
type DN95 = Dec (Neg' (:. (:. DecN Dec9) Dec5))
type DN94 = Dec (Neg' (:. (:. DecN Dec9) Dec4))
type DN93 = Dec (Neg' (:. (:. DecN Dec9) Dec3))
type DN92 = Dec (Neg' (:. (:. DecN Dec9) Dec2))
type DN91 = Dec (Neg' (:. (:. DecN Dec9) Dec1))
type DN90 = Dec (Neg' (:. (:. DecN Dec9) Dec0))
type DN89 = Dec (Neg' (:. (:. DecN Dec8) Dec9))
type DN88 = Dec (Neg' (:. (:. DecN Dec8) Dec8))
type DN87 = Dec (Neg' (:. (:. DecN Dec8) Dec7))
type DN86 = Dec (Neg' (:. (:. DecN Dec8) Dec6))
type DN85 = Dec (Neg' (:. (:. DecN Dec8) Dec5))
type DN84 = Dec (Neg' (:. (:. DecN Dec8) Dec4))
type DN83 = Dec (Neg' (:. (:. DecN Dec8) Dec3))
type DN82 = Dec (Neg' (:. (:. DecN Dec8) Dec2))
type DN81 = Dec (Neg' (:. (:. DecN Dec8) Dec1))
type DN80 = Dec (Neg' (:. (:. DecN Dec8) Dec0))
type DN79 = Dec (Neg' (:. (:. DecN Dec7) Dec9))
type DN78 = Dec (Neg' (:. (:. DecN Dec7) Dec8))
type DN77 = Dec (Neg' (:. (:. DecN Dec7) Dec7))
type DN76 = Dec (Neg' (:. (:. DecN Dec7) Dec6))
type DN75 = Dec (Neg' (:. (:. DecN Dec7) Dec5))
type DN74 = Dec (Neg' (:. (:. DecN Dec7) Dec4))
type DN73 = Dec (Neg' (:. (:. DecN Dec7) Dec3))
type DN72 = Dec (Neg' (:. (:. DecN Dec7) Dec2))
type DN71 = Dec (Neg' (:. (:. DecN Dec7) Dec1))
type DN70 = Dec (Neg' (:. (:. DecN Dec7) Dec0))
type DN69 = Dec (Neg' (:. (:. DecN Dec6) Dec9))
type DN68 = Dec (Neg' (:. (:. DecN Dec6) Dec8))
type DN67 = Dec (Neg' (:. (:. DecN Dec6) Dec7))
type DN66 = Dec (Neg' (:. (:. DecN Dec6) Dec6))
type DN65 = Dec (Neg' (:. (:. DecN Dec6) Dec5))
type DN64 = Dec (Neg' (:. (:. DecN Dec6) Dec4))
type DN63 = Dec (Neg' (:. (:. DecN Dec6) Dec3))
type DN62 = Dec (Neg' (:. (:. DecN Dec6) Dec2))
type DN61 = Dec (Neg' (:. (:. DecN Dec6) Dec1))
type DN60 = Dec (Neg' (:. (:. DecN Dec6) Dec0))
type DN59 = Dec (Neg' (:. (:. DecN Dec5) Dec9))
type DN58 = Dec (Neg' (:. (:. DecN Dec5) Dec8))
type DN57 = Dec (Neg' (:. (:. DecN Dec5) Dec7))
type DN56 = Dec (Neg' (:. (:. DecN Dec5) Dec6))
type DN55 = Dec (Neg' (:. (:. DecN Dec5) Dec5))
type DN54 = Dec (Neg' (:. (:. DecN Dec5) Dec4))
type DN53 = Dec (Neg' (:. (:. DecN Dec5) Dec3))
type DN52 = Dec (Neg' (:. (:. DecN Dec5) Dec2))
type DN51 = Dec (Neg' (:. (:. DecN Dec5) Dec1))
type DN50 = Dec (Neg' (:. (:. DecN Dec5) Dec0))
type DN49 = Dec (Neg' (:. (:. DecN Dec4) Dec9))
type DN48 = Dec (Neg' (:. (:. DecN Dec4) Dec8))
type DN47 = Dec (Neg' (:. (:. DecN Dec4) Dec7))
type DN46 = Dec (Neg' (:. (:. DecN Dec4) Dec6))
type DN45 = Dec (Neg' (:. (:. DecN Dec4) Dec5))
type DN44 = Dec (Neg' (:. (:. DecN Dec4) Dec4))
type DN43 = Dec (Neg' (:. (:. DecN Dec4) Dec3))
type DN42 = Dec (Neg' (:. (:. DecN Dec4) Dec2))
type DN41 = Dec (Neg' (:. (:. DecN Dec4) Dec1))
type DN40 = Dec (Neg' (:. (:. DecN Dec4) Dec0))
type DN39 = Dec (Neg' (:. (:. DecN Dec3) Dec9))
type DN38 = Dec (Neg' (:. (:. DecN Dec3) Dec8))
type DN37 = Dec (Neg' (:. (:. DecN Dec3) Dec7))
type DN36 = Dec (Neg' (:. (:. DecN Dec3) Dec6))
type DN35 = Dec (Neg' (:. (:. DecN Dec3) Dec5))
type DN34 = Dec (Neg' (:. (:. DecN Dec3) Dec4))
type DN33 = Dec (Neg' (:. (:. DecN Dec3) Dec3))
type DN32 = Dec (Neg' (:. (:. DecN Dec3) Dec2))
type DN31 = Dec (Neg' (:. (:. DecN Dec3) Dec1))
type DN30 = Dec (Neg' (:. (:. DecN Dec3) Dec0))
type DN29 = Dec (Neg' (:. (:. DecN Dec2) Dec9))
type DN28 = Dec (Neg' (:. (:. DecN Dec2) Dec8))
type DN27 = Dec (Neg' (:. (:. DecN Dec2) Dec7))
type DN26 = Dec (Neg' (:. (:. DecN Dec2) Dec6))
type DN25 = Dec (Neg' (:. (:. DecN Dec2) Dec5))
type DN24 = Dec (Neg' (:. (:. DecN Dec2) Dec4))
type DN23 = Dec (Neg' (:. (:. DecN Dec2) Dec3))
type DN22 = Dec (Neg' (:. (:. DecN Dec2) Dec2))
type DN21 = Dec (Neg' (:. (:. DecN Dec2) Dec1))
type DN20 = Dec (Neg' (:. (:. DecN Dec2) Dec0))
type DN19 = Dec (Neg' (:. (:. DecN Dec1) Dec9))
type DN18 = Dec (Neg' (:. (:. DecN Dec1) Dec8))
type DN17 = Dec (Neg' (:. (:. DecN Dec1) Dec7))
type DN16 = Dec (Neg' (:. (:. DecN Dec1) Dec6))
type DN15 = Dec (Neg' (:. (:. DecN Dec1) Dec5))
type DN14 = Dec (Neg' (:. (:. DecN Dec1) Dec4))
type DN13 = Dec (Neg' (:. (:. DecN Dec1) Dec3))
type DN12 = Dec (Neg' (:. (:. DecN Dec1) Dec2))
type DN11 = Dec (Neg' (:. (:. DecN Dec1) Dec1))
type DN10 = Dec (Neg' (:. (:. DecN Dec1) Dec0))
type DN9 = Dec (Neg' (:. DecN Dec9))
type DN8 = Dec (Neg' (:. DecN Dec8))
type DN7 = Dec (Neg' (:. DecN Dec7))
type DN6 = Dec (Neg' (:. DecN Dec6))
type DN5 = Dec (Neg' (:. DecN Dec5))
type DN4 = Dec (Neg' (:. DecN Dec4))
type DN3 = Dec (Neg' (:. DecN Dec3))
type DN2 = Dec (Neg' (:. DecN Dec2))
type DN1 = Dec (Neg' (:. DecN Dec1))
type D0 = Dec DecN
type D1 = Dec (:. DecN Dec1)
type D2 = Dec (:. DecN Dec2)
type D3 = Dec (:. DecN Dec3)
type D4 = Dec (:. DecN Dec4)
type D5 = Dec (:. DecN Dec5)
type D6 = Dec (:. DecN Dec6)
type D7 = Dec (:. DecN Dec7)
type D8 = Dec (:. DecN Dec8)
type D9 = Dec (:. DecN Dec9)
type D10 = Dec (:. (:. DecN Dec1) Dec0)
type D11 = Dec (:. (:. DecN Dec1) Dec1)
type D12 = Dec (:. (:. DecN Dec1) Dec2)
type D13 = Dec (:. (:. DecN Dec1) Dec3)
type D14 = Dec (:. (:. DecN Dec1) Dec4)
type D15 = Dec (:. (:. DecN Dec1) Dec5)
type D16 = Dec (:. (:. DecN Dec1) Dec6)
type D17 = Dec (:. (:. DecN Dec1) Dec7)
type D18 = Dec (:. (:. DecN Dec1) Dec8)
type D19 = Dec (:. (:. DecN Dec1) Dec9)
type D20 = Dec (:. (:. DecN Dec2) Dec0)
type D21 = Dec (:. (:. DecN Dec2) Dec1)
type D22 = Dec (:. (:. DecN Dec2) Dec2)
type D23 = Dec (:. (:. DecN Dec2) Dec3)
type D24 = Dec (:. (:. DecN Dec2) Dec4)
type D25 = Dec (:. (:. DecN Dec2) Dec5)
type D26 = Dec (:. (:. DecN Dec2) Dec6)
type D27 = Dec (:. (:. DecN Dec2) Dec7)
type D28 = Dec (:. (:. DecN Dec2) Dec8)
type D29 = Dec (:. (:. DecN Dec2) Dec9)
type D30 = Dec (:. (:. DecN Dec3) Dec0)
type D31 = Dec (:. (:. DecN Dec3) Dec1)
type D32 = Dec (:. (:. DecN Dec3) Dec2)
type D33 = Dec (:. (:. DecN Dec3) Dec3)
type D34 = Dec (:. (:. DecN Dec3) Dec4)
type D35 = Dec (:. (:. DecN Dec3) Dec5)
type D36 = Dec (:. (:. DecN Dec3) Dec6)
type D37 = Dec (:. (:. DecN Dec3) Dec7)
type D38 = Dec (:. (:. DecN Dec3) Dec8)
type D39 = Dec (:. (:. DecN Dec3) Dec9)
type D40 = Dec (:. (:. DecN Dec4) Dec0)
type D41 = Dec (:. (:. DecN Dec4) Dec1)
type D42 = Dec (:. (:. DecN Dec4) Dec2)
type D43 = Dec (:. (:. DecN Dec4) Dec3)
type D44 = Dec (:. (:. DecN Dec4) Dec4)
type D45 = Dec (:. (:. DecN Dec4) Dec5)
type D46 = Dec (:. (:. DecN Dec4) Dec6)
type D47 = Dec (:. (:. DecN Dec4) Dec7)
type D48 = Dec (:. (:. DecN Dec4) Dec8)
type D49 = Dec (:. (:. DecN Dec4) Dec9)
type D50 = Dec (:. (:. DecN Dec5) Dec0)
type D51 = Dec (:. (:. DecN Dec5) Dec1)
type D52 = Dec (:. (:. DecN Dec5) Dec2)
type D53 = Dec (:. (:. DecN Dec5) Dec3)
type D54 = Dec (:. (:. DecN Dec5) Dec4)
type D55 = Dec (:. (:. DecN Dec5) Dec5)
type D56 = Dec (:. (:. DecN Dec5) Dec6)
type D57 = Dec (:. (:. DecN Dec5) Dec7)
type D58 = Dec (:. (:. DecN Dec5) Dec8)
type D59 = Dec (:. (:. DecN Dec5) Dec9)
type D60 = Dec (:. (:. DecN Dec6) Dec0)
type D61 = Dec (:. (:. DecN Dec6) Dec1)
type D62 = Dec (:. (:. DecN Dec6) Dec2)
type D63 = Dec (:. (:. DecN Dec6) Dec3)
type D64 = Dec (:. (:. DecN Dec6) Dec4)
type D65 = Dec (:. (:. DecN Dec6) Dec5)
type D66 = Dec (:. (:. DecN Dec6) Dec6)
type D67 = Dec (:. (:. DecN Dec6) Dec7)
type D68 = Dec (:. (:. DecN Dec6) Dec8)
type D69 = Dec (:. (:. DecN Dec6) Dec9)
type D70 = Dec (:. (:. DecN Dec7) Dec0)
type D71 = Dec (:. (:. DecN Dec7) Dec1)
type D72 = Dec (:. (:. DecN Dec7) Dec2)
type D73 = Dec (:. (:. DecN Dec7) Dec3)
type D74 = Dec (:. (:. DecN Dec7) Dec4)
type D75 = Dec (:. (:. DecN Dec7) Dec5)
type D76 = Dec (:. (:. DecN Dec7) Dec6)
type D77 = Dec (:. (:. DecN Dec7) Dec7)
type D78 = Dec (:. (:. DecN Dec7) Dec8)
type D79 = Dec (:. (:. DecN Dec7) Dec9)
type D80 = Dec (:. (:. DecN Dec8) Dec0)
type D81 = Dec (:. (:. DecN Dec8) Dec1)
type D82 = Dec (:. (:. DecN Dec8) Dec2)
type D83 = Dec (:. (:. DecN Dec8) Dec3)
type D84 = Dec (:. (:. DecN Dec8) Dec4)
type D85 = Dec (:. (:. DecN Dec8) Dec5)
type D86 = Dec (:. (:. DecN Dec8) Dec6)
type D87 = Dec (:. (:. DecN Dec8) Dec7)
type D88 = Dec (:. (:. DecN Dec8) Dec8)
type D89 = Dec (:. (:. DecN Dec8) Dec9)
type D90 = Dec (:. (:. DecN Dec9) Dec0)
type D91 = Dec (:. (:. DecN Dec9) Dec1)
type D92 = Dec (:. (:. DecN Dec9) Dec2)
type D93 = Dec (:. (:. DecN Dec9) Dec3)
type D94 = Dec (:. (:. DecN Dec9) Dec4)
type D95 = Dec (:. (:. DecN Dec9) Dec5)
type D96 = Dec (:. (:. DecN Dec9) Dec6)
type D97 = Dec (:. (:. DecN Dec9) Dec7)
type D98 = Dec (:. (:. DecN Dec9) Dec8)
type D99 = Dec (:. (:. DecN Dec9) Dec9)
type D100 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec0)
type D101 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec1)
type D102 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec2)
type D103 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec3)
type D104 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec4)
type D105 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec5)
type D106 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec6)
type D107 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec7)
type D108 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec8)
type D109 = Dec (:. (:. (:. DecN Dec1) Dec0) Dec9)
type D110 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec0)
type D111 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec1)
type D112 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec2)
type D113 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec3)
type D114 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec4)
type D115 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec5)
type D116 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec6)
type D117 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec7)
type D118 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec8)
type D119 = Dec (:. (:. (:. DecN Dec1) Dec1) Dec9)
type D120 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec0)
type D121 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec1)
type D122 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec2)
type D123 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec3)
type D124 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec4)
type D125 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec5)
type D126 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec6)
type D127 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec7)
type D128 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec8)
type D129 = Dec (:. (:. (:. DecN Dec1) Dec2) Dec9)
type D130 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec0)
type D131 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec1)
type D132 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec2)
type D133 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec3)
type D134 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec4)
type D135 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec5)
type D136 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec6)
type D137 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec7)
type D138 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec8)
type D139 = Dec (:. (:. (:. DecN Dec1) Dec3) Dec9)
type D140 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec0)
type D141 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec1)
type D142 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec2)
type D143 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec3)
type D144 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec4)
type D145 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec5)
type D146 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec6)
type D147 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec7)
type D148 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec8)
type D149 = Dec (:. (:. (:. DecN Dec1) Dec4) Dec9)
type D150 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec0)
type D151 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec1)
type D152 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec2)
type D153 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec3)
type D154 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec4)
type D155 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec5)
type D156 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec6)
type D157 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec7)
type D158 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec8)
type D159 = Dec (:. (:. (:. DecN Dec1) Dec5) Dec9)
type D160 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec0)
type D161 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec1)
type D162 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec2)
type D163 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec3)
type D164 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec4)
type D165 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec5)
type D166 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec6)
type D167 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec7)
type D168 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec8)
type D169 = Dec (:. (:. (:. DecN Dec1) Dec6) Dec9)
type D170 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec0)
type D171 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec1)
type D172 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec2)
type D173 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec3)
type D174 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec4)
type D175 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec5)
type D176 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec6)
type D177 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec7)
type D178 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec8)
type D179 = Dec (:. (:. (:. DecN Dec1) Dec7) Dec9)
type D180 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec0)
type D181 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec1)
type D182 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec2)
type D183 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec3)
type D184 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec4)
type D185 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec5)
type D186 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec6)
type D187 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec7)
type D188 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec8)
type D189 = Dec (:. (:. (:. DecN Dec1) Dec8) Dec9)
type D190 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec0)
type D191 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec1)
type D192 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec2)
type D193 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec3)
type D194 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec4)
type D195 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec5)
type D196 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec6)
type D197 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec7)
type D198 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec8)
type D199 = Dec (:. (:. (:. DecN Dec1) Dec9) Dec9)
type D200 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec0)
type D201 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec1)
type D202 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec2)
type D203 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec3)
type D204 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec4)
type D205 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec5)
type D206 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec6)
type D207 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec7)
type D208 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec8)
type D209 = Dec (:. (:. (:. DecN Dec2) Dec0) Dec9)
type D210 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec0)
type D211 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec1)
type D212 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec2)
type D213 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec3)
type D214 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec4)
type D215 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec5)
type D216 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec6)
type D217 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec7)
type D218 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec8)
type D219 = Dec (:. (:. (:. DecN Dec2) Dec1) Dec9)
type D220 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec0)
type D221 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec1)
type D222 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec2)
type D223 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec3)
type D224 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec4)
type D225 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec5)
type D226 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec6)
type D227 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec7)
type D228 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec8)
type D229 = Dec (:. (:. (:. DecN Dec2) Dec2) Dec9)
type D230 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec0)
type D231 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec1)
type D232 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec2)
type D233 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec3)
type D234 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec4)
type D235 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec5)
type D236 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec6)
type D237 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec7)
type D238 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec8)
type D239 = Dec (:. (:. (:. DecN Dec2) Dec3) Dec9)
type D240 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec0)
type D241 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec1)
type D242 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec2)
type D243 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec3)
type D244 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec4)
type D245 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec5)
type D246 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec6)
type D247 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec7)
type D248 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec8)
type D249 = Dec (:. (:. (:. DecN Dec2) Dec4) Dec9)
type D250 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec0)
type D251 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec1)
type D252 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec2)
type D253 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec3)
type D254 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec4)
type D255 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec5)
type D256 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec6)
type D257 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec7)
type D258 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec8)
type D259 = Dec (:. (:. (:. DecN Dec2) Dec5) Dec9)
type D260 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec0)
type D261 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec1)
type D262 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec2)
type D263 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec3)
type D264 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec4)
type D265 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec5)
type D266 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec6)
type D267 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec7)
type D268 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec8)
type D269 = Dec (:. (:. (:. DecN Dec2) Dec6) Dec9)
type D270 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec0)
type D271 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec1)
type D272 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec2)
type D273 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec3)
type D274 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec4)
type D275 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec5)
type D276 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec6)
type D277 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec7)
type D278 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec8)
type D279 = Dec (:. (:. (:. DecN Dec2) Dec7) Dec9)
type D280 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec0)
type D281 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec1)
type D282 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec2)
type D283 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec3)
type D284 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec4)
type D285 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec5)
type D286 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec6)
type D287 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec7)
type D288 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec8)
type D289 = Dec (:. (:. (:. DecN Dec2) Dec8) Dec9)
type D290 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec0)
type D291 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec1)
type D292 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec2)
type D293 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec3)
type D294 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec4)
type D295 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec5)
type D296 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec6)
type D297 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec7)
type D298 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec8)
type D299 = Dec (:. (:. (:. DecN Dec2) Dec9) Dec9)
type D300 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec0)
type D301 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec1)
type D302 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec2)
type D303 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec3)
type D304 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec4)
type D305 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec5)
type D306 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec6)
type D307 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec7)
type D308 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec8)
type D309 = Dec (:. (:. (:. DecN Dec3) Dec0) Dec9)
type D310 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec0)
type D311 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec1)
type D312 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec2)
type D313 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec3)
type D314 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec4)
type D315 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec5)
type D316 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec6)
type D317 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec7)
type D318 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec8)
type D319 = Dec (:. (:. (:. DecN Dec3) Dec1) Dec9)
type D320 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec0)
type D321 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec1)
type D322 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec2)
type D323 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec3)
type D324 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec4)
type D325 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec5)
type D326 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec6)
type D327 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec7)
type D328 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec8)
type D329 = Dec (:. (:. (:. DecN Dec3) Dec2) Dec9)
type D330 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec0)
type D331 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec1)
type D332 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec2)
type D333 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec3)
type D334 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec4)
type D335 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec5)
type D336 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec6)
type D337 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec7)
type D338 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec8)
type D339 = Dec (:. (:. (:. DecN Dec3) Dec3) Dec9)
type D340 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec0)
type D341 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec1)
type D342 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec2)
type D343 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec3)
type D344 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec4)
type D345 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec5)
type D346 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec6)
type D347 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec7)
type D348 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec8)
type D349 = Dec (:. (:. (:. DecN Dec3) Dec4) Dec9)
type D350 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec0)
type D351 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec1)
type D352 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec2)
type D353 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec3)
type D354 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec4)
type D355 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec5)
type D356 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec6)
type D357 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec7)
type D358 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec8)
type D359 = Dec (:. (:. (:. DecN Dec3) Dec5) Dec9)
type D360 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec0)
type D361 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec1)
type D362 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec2)
type D363 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec3)
type D364 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec4)
type D365 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec5)
type D366 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec6)
type D367 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec7)
type D368 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec8)
type D369 = Dec (:. (:. (:. DecN Dec3) Dec6) Dec9)
type D370 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec0)
type D371 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec1)
type D372 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec2)
type D373 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec3)
type D374 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec4)
type D375 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec5)
type D376 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec6)
type D377 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec7)
type D378 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec8)
type D379 = Dec (:. (:. (:. DecN Dec3) Dec7) Dec9)
type D380 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec0)
type D381 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec1)
type D382 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec2)
type D383 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec3)
type D384 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec4)
type D385 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec5)
type D386 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec6)
type D387 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec7)
type D388 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec8)
type D389 = Dec (:. (:. (:. DecN Dec3) Dec8) Dec9)
type D390 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec0)
type D391 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec1)
type D392 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec2)
type D393 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec3)
type D394 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec4)
type D395 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec5)
type D396 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec6)
type D397 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec7)
type D398 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec8)
type D399 = Dec (:. (:. (:. DecN Dec3) Dec9) Dec9)
type D400 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec0)
type D401 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec1)
type D402 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec2)
type D403 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec3)
type D404 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec4)
type D405 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec5)
type D406 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec6)
type D407 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec7)
type D408 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec8)
type D409 = Dec (:. (:. (:. DecN Dec4) Dec0) Dec9)
type D410 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec0)
type D411 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec1)
type D412 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec2)
type D413 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec3)
type D414 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec4)
type D415 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec5)
type D416 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec6)
type D417 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec7)
type D418 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec8)
type D419 = Dec (:. (:. (:. DecN Dec4) Dec1) Dec9)
type D420 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec0)
type D421 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec1)
type D422 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec2)
type D423 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec3)
type D424 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec4)
type D425 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec5)
type D426 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec6)
type D427 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec7)
type D428 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec8)
type D429 = Dec (:. (:. (:. DecN Dec4) Dec2) Dec9)
type D430 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec0)
type D431 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec1)
type D432 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec2)
type D433 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec3)
type D434 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec4)
type D435 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec5)
type D436 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec6)
type D437 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec7)
type D438 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec8)
type D439 = Dec (:. (:. (:. DecN Dec4) Dec3) Dec9)
type D440 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec0)
type D441 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec1)
type D442 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec2)
type D443 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec3)
type D444 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec4)
type D445 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec5)
type D446 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec6)
type D447 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec7)
type D448 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec8)
type D449 = Dec (:. (:. (:. DecN Dec4) Dec4) Dec9)
type D450 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec0)
type D451 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec1)
type D452 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec2)
type D453 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec3)
type D454 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec4)
type D455 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec5)
type D456 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec6)
type D457 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec7)
type D458 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec8)
type D459 = Dec (:. (:. (:. DecN Dec4) Dec5) Dec9)
type D460 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec0)
type D461 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec1)
type D462 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec2)
type D463 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec3)
type D464 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec4)
type D465 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec5)
type D466 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec6)
type D467 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec7)
type D468 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec8)
type D469 = Dec (:. (:. (:. DecN Dec4) Dec6) Dec9)
type D470 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec0)
type D471 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec1)
type D472 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec2)
type D473 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec3)
type D474 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec4)
type D475 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec5)
type D476 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec6)
type D477 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec7)
type D478 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec8)
type D479 = Dec (:. (:. (:. DecN Dec4) Dec7) Dec9)
type D480 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec0)
type D481 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec1)
type D482 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec2)
type D483 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec3)
type D484 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec4)
type D485 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec5)
type D486 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec6)
type D487 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec7)
type D488 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec8)
type D489 = Dec (:. (:. (:. DecN Dec4) Dec8) Dec9)
type D490 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec0)
type D491 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec1)
type D492 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec2)
type D493 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec3)
type D494 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec4)
type D495 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec5)
type D496 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec6)
type D497 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec7)
type D498 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec8)
type D499 = Dec (:. (:. (:. DecN Dec4) Dec9) Dec9)
type D500 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec0)
type D501 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec1)
type D502 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec2)
type D503 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec3)
type D504 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec4)
type D505 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec5)
type D506 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec6)
type D507 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec7)
type D508 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec8)
type D509 = Dec (:. (:. (:. DecN Dec5) Dec0) Dec9)
type D510 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec0)
type D511 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec1)
type D512 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec2)
type D513 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec3)
type D514 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec4)
type D515 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec5)
type D516 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec6)
type D517 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec7)
type D518 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec8)
type D519 = Dec (:. (:. (:. DecN Dec5) Dec1) Dec9)
type D520 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec0)
type D521 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec1)
type D522 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec2)
type D523 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec3)
type D524 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec4)
type D525 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec5)
type D526 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec6)
type D527 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec7)
type D528 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec8)
type D529 = Dec (:. (:. (:. DecN Dec5) Dec2) Dec9)
type D530 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec0)
type D531 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec1)
type D532 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec2)
type D533 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec3)
type D534 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec4)
type D535 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec5)
type D536 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec6)
type D537 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec7)
type D538 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec8)
type D539 = Dec (:. (:. (:. DecN Dec5) Dec3) Dec9)
type D540 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec0)
type D541 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec1)
type D542 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec2)
type D543 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec3)
type D544 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec4)
type D545 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec5)
type D546 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec6)
type D547 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec7)
type D548 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec8)
type D549 = Dec (:. (:. (:. DecN Dec5) Dec4) Dec9)
type D550 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec0)
type D551 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec1)
type D552 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec2)
type D553 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec3)
type D554 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec4)
type D555 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec5)
type D556 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec6)
type D557 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec7)
type D558 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec8)
type D559 = Dec (:. (:. (:. DecN Dec5) Dec5) Dec9)
type D560 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec0)
type D561 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec1)
type D562 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec2)
type D563 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec3)
type D564 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec4)
type D565 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec5)
type D566 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec6)
type D567 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec7)
type D568 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec8)
type D569 = Dec (:. (:. (:. DecN Dec5) Dec6) Dec9)
type D570 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec0)
type D571 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec1)
type D572 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec2)
type D573 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec3)
type D574 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec4)
type D575 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec5)
type D576 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec6)
type D577 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec7)
type D578 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec8)
type D579 = Dec (:. (:. (:. DecN Dec5) Dec7) Dec9)
type D580 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec0)
type D581 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec1)
type D582 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec2)
type D583 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec3)
type D584 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec4)
type D585 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec5)
type D586 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec6)
type D587 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec7)
type D588 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec8)
type D589 = Dec (:. (:. (:. DecN Dec5) Dec8) Dec9)
type D590 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec0)
type D591 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec1)
type D592 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec2)
type D593 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec3)
type D594 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec4)
type D595 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec5)
type D596 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec6)
type D597 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec7)
type D598 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec8)
type D599 = Dec (:. (:. (:. DecN Dec5) Dec9) Dec9)
type D600 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec0)
type D601 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec1)
type D602 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec2)
type D603 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec3)
type D604 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec4)
type D605 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec5)
type D606 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec6)
type D607 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec7)
type D608 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec8)
type D609 = Dec (:. (:. (:. DecN Dec6) Dec0) Dec9)
type D610 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec0)
type D611 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec1)
type D612 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec2)
type D613 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec3)
type D614 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec4)
type D615 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec5)
type D616 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec6)
type D617 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec7)
type D618 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec8)
type D619 = Dec (:. (:. (:. DecN Dec6) Dec1) Dec9)
type D620 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec0)
type D621 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec1)
type D622 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec2)
type D623 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec3)
type D624 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec4)
type D625 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec5)
type D626 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec6)
type D627 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec7)
type D628 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec8)
type D629 = Dec (:. (:. (:. DecN Dec6) Dec2) Dec9)
type D630 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec0)
type D631 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec1)
type D632 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec2)
type D633 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec3)
type D634 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec4)
type D635 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec5)
type D636 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec6)
type D637 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec7)
type D638 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec8)
type D639 = Dec (:. (:. (:. DecN Dec6) Dec3) Dec9)
type D640 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec0)
type D641 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec1)
type D642 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec2)
type D643 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec3)
type D644 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec4)
type D645 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec5)
type D646 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec6)
type D647 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec7)
type D648 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec8)
type D649 = Dec (:. (:. (:. DecN Dec6) Dec4) Dec9)
type D650 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec0)
type D651 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec1)
type D652 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec2)
type D653 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec3)
type D654 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec4)
type D655 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec5)
type D656 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec6)
type D657 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec7)
type D658 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec8)
type D659 = Dec (:. (:. (:. DecN Dec6) Dec5) Dec9)
type D660 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec0)
type D661 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec1)
type D662 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec2)
type D663 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec3)
type D664 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec4)
type D665 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec5)
type D666 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec6)
type D667 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec7)
type D668 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec8)
type D669 = Dec (:. (:. (:. DecN Dec6) Dec6) Dec9)
type D670 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec0)
type D671 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec1)
type D672 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec2)
type D673 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec3)
type D674 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec4)
type D675 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec5)
type D676 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec6)
type D677 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec7)
type D678 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec8)
type D679 = Dec (:. (:. (:. DecN Dec6) Dec7) Dec9)
type D680 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec0)
type D681 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec1)
type D682 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec2)
type D683 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec3)
type D684 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec4)
type D685 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec5)
type D686 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec6)
type D687 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec7)
type D688 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec8)
type D689 = Dec (:. (:. (:. DecN Dec6) Dec8) Dec9)
type D690 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec0)
type D691 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec1)
type D692 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec2)
type D693 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec3)
type D694 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec4)
type D695 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec5)
type D696 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec6)
type D697 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec7)
type D698 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec8)
type D699 = Dec (:. (:. (:. DecN Dec6) Dec9) Dec9)
type D700 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec0)
type D701 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec1)
type D702 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec2)
type D703 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec3)
type D704 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec4)
type D705 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec5)
type D706 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec6)
type D707 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec7)
type D708 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec8)
type D709 = Dec (:. (:. (:. DecN Dec7) Dec0) Dec9)
type D710 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec0)
type D711 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec1)
type D712 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec2)
type D713 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec3)
type D714 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec4)
type D715 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec5)
type D716 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec6)
type D717 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec7)
type D718 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec8)
type D719 = Dec (:. (:. (:. DecN Dec7) Dec1) Dec9)
type D720 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec0)
type D721 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec1)
type D722 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec2)
type D723 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec3)
type D724 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec4)
type D725 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec5)
type D726 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec6)
type D727 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec7)
type D728 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec8)
type D729 = Dec (:. (:. (:. DecN Dec7) Dec2) Dec9)
type D730 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec0)
type D731 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec1)
type D732 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec2)
type D733 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec3)
type D734 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec4)
type D735 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec5)
type D736 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec6)
type D737 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec7)
type D738 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec8)
type D739 = Dec (:. (:. (:. DecN Dec7) Dec3) Dec9)
type D740 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec0)
type D741 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec1)
type D742 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec2)
type D743 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec3)
type D744 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec4)
type D745 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec5)
type D746 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec6)
type D747 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec7)
type D748 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec8)
type D749 = Dec (:. (:. (:. DecN Dec7) Dec4) Dec9)
type D750 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec0)
type D751 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec1)
type D752 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec2)
type D753 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec3)
type D754 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec4)
type D755 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec5)
type D756 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec6)
type D757 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec7)
type D758 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec8)
type D759 = Dec (:. (:. (:. DecN Dec7) Dec5) Dec9)
type D760 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec0)
type D761 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec1)
type D762 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec2)
type D763 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec3)
type D764 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec4)
type D765 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec5)
type D766 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec6)
type D767 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec7)
type D768 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec8)
type D769 = Dec (:. (:. (:. DecN Dec7) Dec6) Dec9)
type D770 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec0)
type D771 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec1)
type D772 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec2)
type D773 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec3)
type D774 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec4)
type D775 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec5)
type D776 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec6)
type D777 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec7)
type D778 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec8)
type D779 = Dec (:. (:. (:. DecN Dec7) Dec7) Dec9)
type D780 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec0)
type D781 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec1)
type D782 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec2)
type D783 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec3)
type D784 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec4)
type D785 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec5)
type D786 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec6)
type D787 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec7)
type D788 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec8)
type D789 = Dec (:. (:. (:. DecN Dec7) Dec8) Dec9)
type D790 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec0)
type D791 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec1)
type D792 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec2)
type D793 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec3)
type D794 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec4)
type D795 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec5)
type D796 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec6)
type D797 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec7)
type D798 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec8)
type D799 = Dec (:. (:. (:. DecN Dec7) Dec9) Dec9)
type D800 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec0)
type D801 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec1)
type D802 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec2)
type D803 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec3)
type D804 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec4)
type D805 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec5)
type D806 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec6)
type D807 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec7)
type D808 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec8)
type D809 = Dec (:. (:. (:. DecN Dec8) Dec0) Dec9)
type D810 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec0)
type D811 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec1)
type D812 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec2)
type D813 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec3)
type D814 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec4)
type D815 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec5)
type D816 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec6)
type D817 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec7)
type D818 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec8)
type D819 = Dec (:. (:. (:. DecN Dec8) Dec1) Dec9)
type D820 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec0)
type D821 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec1)
type D822 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec2)
type D823 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec3)
type D824 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec4)
type D825 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec5)
type D826 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec6)
type D827 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec7)
type D828 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec8)
type D829 = Dec (:. (:. (:. DecN Dec8) Dec2) Dec9)
type D830 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec0)
type D831 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec1)
type D832 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec2)
type D833 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec3)
type D834 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec4)
type D835 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec5)
type D836 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec6)
type D837 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec7)
type D838 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec8)
type D839 = Dec (:. (:. (:. DecN Dec8) Dec3) Dec9)
type D840 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec0)
type D841 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec1)
type D842 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec2)
type D843 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec3)
type D844 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec4)
type D845 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec5)
type D846 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec6)
type D847 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec7)
type D848 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec8)
type D849 = Dec (:. (:. (:. DecN Dec8) Dec4) Dec9)
type D850 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec0)
type D851 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec1)
type D852 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec2)
type D853 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec3)
type D854 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec4)
type D855 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec5)
type D856 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec6)
type D857 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec7)
type D858 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec8)
type D859 = Dec (:. (:. (:. DecN Dec8) Dec5) Dec9)
type D860 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec0)
type D861 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec1)
type D862 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec2)
type D863 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec3)
type D864 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec4)
type D865 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec5)
type D866 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec6)
type D867 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec7)
type D868 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec8)
type D869 = Dec (:. (:. (:. DecN Dec8) Dec6) Dec9)
type D870 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec0)
type D871 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec1)
type D872 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec2)
type D873 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec3)
type D874 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec4)
type D875 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec5)
type D876 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec6)
type D877 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec7)
type D878 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec8)
type D879 = Dec (:. (:. (:. DecN Dec8) Dec7) Dec9)
type D880 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec0)
type D881 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec1)
type D882 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec2)
type D883 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec3)
type D884 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec4)
type D885 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec5)
type D886 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec6)
type D887 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec7)
type D888 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec8)
type D889 = Dec (:. (:. (:. DecN Dec8) Dec8) Dec9)
type D890 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec0)
type D891 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec1)
type D892 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec2)
type D893 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec3)
type D894 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec4)
type D895 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec5)
type D896 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec6)
type D897 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec7)
type D898 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec8)
type D899 = Dec (:. (:. (:. DecN Dec8) Dec9) Dec9)
type D900 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec0)
type D901 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec1)
type D902 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec2)
type D903 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec3)
type D904 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec4)
type D905 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec5)
type D906 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec6)
type D907 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec7)
type D908 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec8)
type D909 = Dec (:. (:. (:. DecN Dec9) Dec0) Dec9)
type D910 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec0)
type D911 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec1)
type D912 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec2)
type D913 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec3)
type D914 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec4)
type D915 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec5)
type D916 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec6)
type D917 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec7)
type D918 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec8)
type D919 = Dec (:. (:. (:. DecN Dec9) Dec1) Dec9)
type D920 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec0)
type D921 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec1)
type D922 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec2)
type D923 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec3)
type D924 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec4)
type D925 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec5)
type D926 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec6)
type D927 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec7)
type D928 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec8)
type D929 = Dec (:. (:. (:. DecN Dec9) Dec2) Dec9)
type D930 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec0)
type D931 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec1)
type D932 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec2)
type D933 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec3)
type D934 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec4)
type D935 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec5)
type D936 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec6)
type D937 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec7)
type D938 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec8)
type D939 = Dec (:. (:. (:. DecN Dec9) Dec3) Dec9)
type D940 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec0)
type D941 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec1)
type D942 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec2)
type D943 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec3)
type D944 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec4)
type D945 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec5)
type D946 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec6)
type D947 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec7)
type D948 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec8)
type D949 = Dec (:. (:. (:. DecN Dec9) Dec4) Dec9)
type D950 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec0)
type D951 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec1)
type D952 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec2)
type D953 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec3)
type D954 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec4)
type D955 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec5)
type D956 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec6)
type D957 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec7)
type D958 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec8)
type D959 = Dec (:. (:. (:. DecN Dec9) Dec5) Dec9)
type D960 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec0)
type D961 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec1)
type D962 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec2)
type D963 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec3)
type D964 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec4)
type D965 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec5)
type D966 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec6)
type D967 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec7)
type D968 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec8)
type D969 = Dec (:. (:. (:. DecN Dec9) Dec6) Dec9)
type D970 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec0)
type D971 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec1)
type D972 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec2)
type D973 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec3)
type D974 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec4)
type D975 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec5)
type D976 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec6)
type D977 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec7)
type D978 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec8)
type D979 = Dec (:. (:. (:. DecN Dec9) Dec7) Dec9)
type D980 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec0)
type D981 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec1)
type D982 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec2)
type D983 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec3)
type D984 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec4)
type D985 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec5)
type D986 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec6)
type D987 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec7)
type D988 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec8)
type D989 = Dec (:. (:. (:. DecN Dec9) Dec8) Dec9)
type D990 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec0)
type D991 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec1)
type D992 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec2)
type D993 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec3)
type D994 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec4)
type D995 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec5)
type D996 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec6)
type D997 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec7)
type D998 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec8)
type D999 = Dec (:. (:. (:. DecN Dec9) Dec9) Dec9)
type D1000 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec0)
type D1001 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec1)
type D1002 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec2)
type D1003 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec3)
type D1004 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec4)
type D1005 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec5)
type D1006 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec6)
type D1007 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec7)
type D1008 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec8)
type D1009 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec9)
type D1010 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec0)
type D1011 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec1)
type D1012 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec2)
type D1013 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec3)
type D1014 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec4)
type D1015 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec5)
type D1016 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec6)
type D1017 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec7)
type D1018 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec8)
type D1019 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec1) Dec9)
type D1020 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec0)
type D1021 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec1)
type D1022 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec2)
type D1023 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec3)
type D1024 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec4)
type D1025 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec5)
type D1026 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec6)
type D1027 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec7)
type D1028 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec8)
type D1029 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec2) Dec9)
type D1030 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec0)
type D1031 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec1)
type D1032 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec2)
type D1033 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec3)
type D1034 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec4)
type D1035 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec5)
type D1036 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec6)
type D1037 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec7)
type D1038 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec8)
type D1039 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec3) Dec9)
type D1040 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec0)
type D1041 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec1)
type D1042 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec2)
type D1043 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec3)
type D1044 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec4)
type D1045 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec5)
type D1046 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec6)
type D1047 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec7)
type D1048 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec8)
type D1049 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec4) Dec9)
type D1050 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec0)
type D1051 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec1)
type D1052 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec2)
type D1053 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec3)
type D1054 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec4)
type D1055 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec5)
type D1056 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec6)
type D1057 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec7)
type D1058 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec8)
type D1059 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec5) Dec9)
type D1060 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec0)
type D1061 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec1)
type D1062 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec2)
type D1063 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec3)
type D1064 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec4)
type D1065 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec5)
type D1066 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec6)
type D1067 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec7)
type D1068 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec8)
type D1069 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec6) Dec9)
type D1070 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec0)
type D1071 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec1)
type D1072 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec2)
type D1073 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec3)
type D1074 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec4)
type D1075 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec5)
type D1076 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec6)
type D1077 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec7)
type D1078 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec8)
type D1079 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec7) Dec9)
type D1080 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec0)
type D1081 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec1)
type D1082 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec2)
type D1083 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec3)
type D1084 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec4)
type D1085 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec5)
type D1086 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec6)
type D1087 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec7)
type D1088 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec8)
type D1089 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec8) Dec9)
type D1090 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec0)
type D1091 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec1)
type D1092 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec2)
type D1093 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec3)
type D1094 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec4)
type D1095 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec5)
type D1096 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec6)
type D1097 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec7)
type D1098 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec8)
type D1099 = Dec (:. (:. (:. (:. DecN Dec1) Dec0) Dec9) Dec9)
type D1100 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec0)
type D1101 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec1)
type D1102 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec2)
type D1103 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec3)
type D1104 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec4)
type D1105 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec5)
type D1106 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec6)
type D1107 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec7)
type D1108 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec8)
type D1109 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec0) Dec9)
type D1110 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec0)
type D1111 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec1)
type D1112 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec2)
type D1113 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec3)
type D1114 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec4)
type D1115 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec5)
type D1116 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec6)
type D1117 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec7)
type D1118 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec8)
type D1119 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec1) Dec9)
type D1120 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec0)
type D1121 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec1)
type D1122 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec2)
type D1123 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec3)
type D1124 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec4)
type D1125 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec5)
type D1126 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec6)
type D1127 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec7)
type D1128 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec8)
type D1129 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec2) Dec9)
type D1130 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec0)
type D1131 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec1)
type D1132 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec2)
type D1133 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec3)
type D1134 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec4)
type D1135 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec5)
type D1136 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec6)
type D1137 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec7)
type D1138 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec8)
type D1139 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec3) Dec9)
type D1140 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec0)
type D1141 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec1)
type D1142 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec2)
type D1143 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec3)
type D1144 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec4)
type D1145 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec5)
type D1146 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec6)
type D1147 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec7)
type D1148 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec8)
type D1149 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec4) Dec9)
type D1150 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec0)
type D1151 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec1)
type D1152 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec2)
type D1153 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec3)
type D1154 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec4)
type D1155 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec5)
type D1156 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec6)
type D1157 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec7)
type D1158 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec8)
type D1159 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec5) Dec9)
type D1160 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec0)
type D1161 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec1)
type D1162 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec2)
type D1163 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec3)
type D1164 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec4)
type D1165 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec5)
type D1166 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec6)
type D1167 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec7)
type D1168 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec8)
type D1169 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec6) Dec9)
type D1170 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec0)
type D1171 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec1)
type D1172 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec2)
type D1173 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec3)
type D1174 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec4)
type D1175 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec5)
type D1176 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec6)
type D1177 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec7)
type D1178 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec8)
type D1179 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec7) Dec9)
type D1180 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec0)
type D1181 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec1)
type D1182 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec2)
type D1183 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec3)
type D1184 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec4)
type D1185 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec5)
type D1186 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec6)
type D1187 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec7)
type D1188 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec8)
type D1189 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec8) Dec9)
type D1190 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec0)
type D1191 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec1)
type D1192 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec2)
type D1193 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec3)
type D1194 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec4)
type D1195 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec5)
type D1196 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec6)
type D1197 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec7)
type D1198 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec8)
type D1199 = Dec (:. (:. (:. (:. DecN Dec1) Dec1) Dec9) Dec9)
type D1200 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec0)
type D1201 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec1)
type D1202 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec2)
type D1203 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec3)
type D1204 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec4)
type D1205 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec5)
type D1206 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec6)
type D1207 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec7)
type D1208 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec8)
type D1209 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec0) Dec9)
type D1210 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec0)
type D1211 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec1)
type D1212 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec2)
type D1213 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec3)
type D1214 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec4)
type D1215 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec5)
type D1216 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec6)
type D1217 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec7)
type D1218 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec8)
type D1219 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec1) Dec9)
type D1220 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec0)
type D1221 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec1)
type D1222 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec2)
type D1223 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec3)
type D1224 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec4)
type D1225 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec5)
type D1226 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec6)
type D1227 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec7)
type D1228 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec8)
type D1229 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec2) Dec9)
type D1230 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec0)
type D1231 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec1)
type D1232 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec2)
type D1233 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec3)
type D1234 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec4)
type D1235 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec5)
type D1236 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec6)
type D1237 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec7)
type D1238 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec8)
type D1239 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec3) Dec9)
type D1240 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec0)
type D1241 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec1)
type D1242 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec2)
type D1243 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec3)
type D1244 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec4)
type D1245 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec5)
type D1246 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec6)
type D1247 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec7)
type D1248 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec8)
type D1249 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec4) Dec9)
type D1250 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec0)
type D1251 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec1)
type D1252 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec2)
type D1253 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec3)
type D1254 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec4)
type D1255 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec5)
type D1256 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec6)
type D1257 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec7)
type D1258 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec8)
type D1259 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec5) Dec9)
type D1260 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec0)
type D1261 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec1)
type D1262 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec2)
type D1263 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec3)
type D1264 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec4)
type D1265 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec5)
type D1266 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec6)
type D1267 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec7)
type D1268 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec8)
type D1269 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec6) Dec9)
type D1270 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec0)
type D1271 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec1)
type D1272 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec2)
type D1273 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec3)
type D1274 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec4)
type D1275 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec5)
type D1276 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec6)
type D1277 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec7)
type D1278 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec8)
type D1279 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec7) Dec9)
type D1280 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec0)
type D1281 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec1)
type D1282 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec2)
type D1283 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec3)
type D1284 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec4)
type D1285 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec5)
type D1286 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec6)
type D1287 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec7)
type D1288 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec8)
type D1289 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec8) Dec9)
type D1290 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec0)
type D1291 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec1)
type D1292 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec2)
type D1293 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec3)
type D1294 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec4)
type D1295 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec5)
type D1296 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec6)
type D1297 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec7)
type D1298 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec8)
type D1299 = Dec (:. (:. (:. (:. DecN Dec1) Dec2) Dec9) Dec9)
type D1300 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec0)
type D1301 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec1)
type D1302 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec2)
type D1303 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec3)
type D1304 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec4)
type D1305 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec5)
type D1306 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec6)
type D1307 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec7)
type D1308 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec8)
type D1309 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec0) Dec9)
type D1310 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec0)
type D1311 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec1)
type D1312 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec2)
type D1313 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec3)
type D1314 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec4)
type D1315 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec5)
type D1316 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec6)
type D1317 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec7)
type D1318 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec8)
type D1319 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec1) Dec9)
type D1320 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec0)
type D1321 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec1)
type D1322 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec2)
type D1323 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec3)
type D1324 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec4)
type D1325 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec5)
type D1326 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec6)
type D1327 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec7)
type D1328 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec8)
type D1329 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec2) Dec9)
type D1330 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec0)
type D1331 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec1)
type D1332 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec2)
type D1333 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec3)
type D1334 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec4)
type D1335 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec5)
type D1336 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec6)
type D1337 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec7)
type D1338 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec8)
type D1339 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec3) Dec9)
type D1340 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec0)
type D1341 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec1)
type D1342 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec2)
type D1343 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec3)
type D1344 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec4)
type D1345 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec5)
type D1346 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec6)
type D1347 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec7)
type D1348 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec8)
type D1349 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec4) Dec9)
type D1350 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec0)
type D1351 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec1)
type D1352 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec2)
type D1353 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec3)
type D1354 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec4)
type D1355 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec5)
type D1356 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec6)
type D1357 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec7)
type D1358 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec8)
type D1359 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec5) Dec9)
type D1360 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec0)
type D1361 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec1)
type D1362 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec2)
type D1363 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec3)
type D1364 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec4)
type D1365 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec5)
type D1366 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec6)
type D1367 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec7)
type D1368 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec8)
type D1369 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec6) Dec9)
type D1370 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec0)
type D1371 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec1)
type D1372 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec2)
type D1373 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec3)
type D1374 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec4)
type D1375 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec5)
type D1376 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec6)
type D1377 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec7)
type D1378 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec8)
type D1379 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec7) Dec9)
type D1380 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec0)
type D1381 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec1)
type D1382 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec2)
type D1383 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec3)
type D1384 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec4)
type D1385 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec5)
type D1386 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec6)
type D1387 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec7)
type D1388 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec8)
type D1389 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec8) Dec9)
type D1390 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec0)
type D1391 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec1)
type D1392 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec2)
type D1393 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec3)
type D1394 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec4)
type D1395 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec5)
type D1396 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec6)
type D1397 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec7)
type D1398 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec8)
type D1399 = Dec (:. (:. (:. (:. DecN Dec1) Dec3) Dec9) Dec9)
type D1400 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec0)
type D1401 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec1)
type D1402 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec2)
type D1403 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec3)
type D1404 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec4)
type D1405 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec5)
type D1406 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec6)
type D1407 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec7)
type D1408 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec8)
type D1409 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec0) Dec9)
type D1410 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec0)
type D1411 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec1)
type D1412 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec2)
type D1413 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec3)
type D1414 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec4)
type D1415 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec5)
type D1416 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec6)
type D1417 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec7)
type D1418 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec8)
type D1419 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec1) Dec9)
type D1420 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec0)
type D1421 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec1)
type D1422 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec2)
type D1423 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec3)
type D1424 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec4)
type D1425 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec5)
type D1426 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec6)
type D1427 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec7)
type D1428 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec8)
type D1429 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec2) Dec9)
type D1430 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec0)
type D1431 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec1)
type D1432 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec2)
type D1433 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec3)
type D1434 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec4)
type D1435 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec5)
type D1436 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec6)
type D1437 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec7)
type D1438 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec8)
type D1439 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec3) Dec9)
type D1440 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec0)
type D1441 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec1)
type D1442 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec2)
type D1443 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec3)
type D1444 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec4)
type D1445 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec5)
type D1446 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec6)
type D1447 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec7)
type D1448 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec8)
type D1449 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec4) Dec9)
type D1450 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec0)
type D1451 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec1)
type D1452 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec2)
type D1453 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec3)
type D1454 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec4)
type D1455 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec5)
type D1456 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec6)
type D1457 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec7)
type D1458 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec8)
type D1459 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec5) Dec9)
type D1460 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec0)
type D1461 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec1)
type D1462 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec2)
type D1463 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec3)
type D1464 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec4)
type D1465 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec5)
type D1466 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec6)
type D1467 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec7)
type D1468 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec8)
type D1469 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec6) Dec9)
type D1470 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec0)
type D1471 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec1)
type D1472 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec2)
type D1473 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec3)
type D1474 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec4)
type D1475 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec5)
type D1476 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec6)
type D1477 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec7)
type D1478 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec8)
type D1479 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec7) Dec9)
type D1480 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec0)
type D1481 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec1)
type D1482 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec2)
type D1483 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec3)
type D1484 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec4)
type D1485 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec5)
type D1486 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec6)
type D1487 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec7)
type D1488 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec8)
type D1489 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec8) Dec9)
type D1490 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec0)
type D1491 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec1)
type D1492 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec2)
type D1493 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec3)
type D1494 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec4)
type D1495 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec5)
type D1496 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec6)
type D1497 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec7)
type D1498 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec8)
type D1499 = Dec (:. (:. (:. (:. DecN Dec1) Dec4) Dec9) Dec9)
type D1500 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec0)
type D1501 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec1)
type D1502 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec2)
type D1503 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec3)
type D1504 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec4)
type D1505 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec5)
type D1506 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec6)
type D1507 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec7)
type D1508 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec8)
type D1509 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec0) Dec9)
type D1510 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec0)
type D1511 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec1)
type D1512 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec2)
type D1513 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec3)
type D1514 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec4)
type D1515 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec5)
type D1516 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec6)
type D1517 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec7)
type D1518 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec8)
type D1519 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec1) Dec9)
type D1520 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec0)
type D1521 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec1)
type D1522 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec2)
type D1523 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec3)
type D1524 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec4)
type D1525 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec5)
type D1526 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec6)
type D1527 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec7)
type D1528 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec8)
type D1529 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec2) Dec9)
type D1530 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec0)
type D1531 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec1)
type D1532 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec2)
type D1533 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec3)
type D1534 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec4)
type D1535 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec5)
type D1536 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec6)
type D1537 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec7)
type D1538 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec8)
type D1539 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec3) Dec9)
type D1540 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec0)
type D1541 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec1)
type D1542 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec2)
type D1543 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec3)
type D1544 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec4)
type D1545 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec5)
type D1546 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec6)
type D1547 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec7)
type D1548 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec8)
type D1549 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec4) Dec9)
type D1550 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec0)
type D1551 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec1)
type D1552 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec2)
type D1553 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec3)
type D1554 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec4)
type D1555 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec5)
type D1556 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec6)
type D1557 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec7)
type D1558 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec8)
type D1559 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec5) Dec9)
type D1560 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec0)
type D1561 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec1)
type D1562 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec2)
type D1563 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec3)
type D1564 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec4)
type D1565 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec5)
type D1566 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec6)
type D1567 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec7)
type D1568 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec8)
type D1569 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec6) Dec9)
type D1570 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec0)
type D1571 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec1)
type D1572 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec2)
type D1573 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec3)
type D1574 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec4)
type D1575 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec5)
type D1576 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec6)
type D1577 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec7)
type D1578 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec8)
type D1579 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec7) Dec9)
type D1580 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec0)
type D1581 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec1)
type D1582 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec2)
type D1583 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec3)
type D1584 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec4)
type D1585 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec5)
type D1586 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec6)
type D1587 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec7)
type D1588 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec8)
type D1589 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec8) Dec9)
type D1590 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec0)
type D1591 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec1)
type D1592 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec2)
type D1593 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec3)
type D1594 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec4)
type D1595 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec5)
type D1596 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec6)
type D1597 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec7)
type D1598 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec8)
type D1599 = Dec (:. (:. (:. (:. DecN Dec1) Dec5) Dec9) Dec9)
type D1600 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec0)
type D1601 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec1)
type D1602 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec2)
type D1603 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec3)
type D1604 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec4)
type D1605 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec5)
type D1606 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec6)
type D1607 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec7)
type D1608 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec8)
type D1609 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec0) Dec9)
type D1610 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec0)
type D1611 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec1)
type D1612 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec2)
type D1613 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec3)
type D1614 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec4)
type D1615 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec5)
type D1616 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec6)
type D1617 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec7)
type D1618 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec8)
type D1619 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec1) Dec9)
type D1620 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec0)
type D1621 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec1)
type D1622 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec2)
type D1623 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec3)
type D1624 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec4)
type D1625 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec5)
type D1626 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec6)
type D1627 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec7)
type D1628 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec8)
type D1629 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec2) Dec9)
type D1630 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec0)
type D1631 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec1)
type D1632 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec2)
type D1633 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec3)
type D1634 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec4)
type D1635 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec5)
type D1636 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec6)
type D1637 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec7)
type D1638 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec8)
type D1639 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec3) Dec9)
type D1640 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec0)
type D1641 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec1)
type D1642 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec2)
type D1643 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec3)
type D1644 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec4)
type D1645 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec5)
type D1646 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec6)
type D1647 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec7)
type D1648 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec8)
type D1649 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec4) Dec9)
type D1650 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec0)
type D1651 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec1)
type D1652 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec2)
type D1653 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec3)
type D1654 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec4)
type D1655 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec5)
type D1656 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec6)
type D1657 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec7)
type D1658 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec8)
type D1659 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec5) Dec9)
type D1660 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec0)
type D1661 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec1)
type D1662 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec2)
type D1663 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec3)
type D1664 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec4)
type D1665 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec5)
type D1666 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec6)
type D1667 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec7)
type D1668 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec8)
type D1669 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec6) Dec9)
type D1670 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec0)
type D1671 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec1)
type D1672 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec2)
type D1673 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec3)
type D1674 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec4)
type D1675 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec5)
type D1676 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec6)
type D1677 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec7)
type D1678 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec8)
type D1679 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec7) Dec9)
type D1680 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec0)
type D1681 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec1)
type D1682 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec2)
type D1683 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec3)
type D1684 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec4)
type D1685 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec5)
type D1686 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec6)
type D1687 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec7)
type D1688 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec8)
type D1689 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec8) Dec9)
type D1690 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec0)
type D1691 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec1)
type D1692 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec2)
type D1693 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec3)
type D1694 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec4)
type D1695 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec5)
type D1696 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec6)
type D1697 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec7)
type D1698 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec8)
type D1699 = Dec (:. (:. (:. (:. DecN Dec1) Dec6) Dec9) Dec9)
type D1700 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec0)
type D1701 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec1)
type D1702 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec2)
type D1703 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec3)
type D1704 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec4)
type D1705 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec5)
type D1706 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec6)
type D1707 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec7)
type D1708 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec8)
type D1709 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec0) Dec9)
type D1710 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec0)
type D1711 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec1)
type D1712 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec2)
type D1713 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec3)
type D1714 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec4)
type D1715 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec5)
type D1716 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec6)
type D1717 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec7)
type D1718 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec8)
type D1719 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec1) Dec9)
type D1720 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec0)
type D1721 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec1)
type D1722 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec2)
type D1723 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec3)
type D1724 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec4)
type D1725 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec5)
type D1726 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec6)
type D1727 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec7)
type D1728 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec8)
type D1729 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec2) Dec9)
type D1730 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec0)
type D1731 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec1)
type D1732 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec2)
type D1733 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec3)
type D1734 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec4)
type D1735 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec5)
type D1736 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec6)
type D1737 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec7)
type D1738 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec8)
type D1739 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec3) Dec9)
type D1740 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec0)
type D1741 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec1)
type D1742 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec2)
type D1743 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec3)
type D1744 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec4)
type D1745 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec5)
type D1746 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec6)
type D1747 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec7)
type D1748 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec8)
type D1749 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec4) Dec9)
type D1750 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec0)
type D1751 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec1)
type D1752 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec2)
type D1753 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec3)
type D1754 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec4)
type D1755 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec5)
type D1756 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec6)
type D1757 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec7)
type D1758 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec8)
type D1759 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec5) Dec9)
type D1760 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec0)
type D1761 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec1)
type D1762 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec2)
type D1763 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec3)
type D1764 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec4)
type D1765 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec5)
type D1766 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec6)
type D1767 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec7)
type D1768 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec8)
type D1769 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec6) Dec9)
type D1770 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec0)
type D1771 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec1)
type D1772 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec2)
type D1773 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec3)
type D1774 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec4)
type D1775 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec5)
type D1776 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec6)
type D1777 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec7)
type D1778 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec8)
type D1779 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec7) Dec9)
type D1780 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec0)
type D1781 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec1)
type D1782 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec2)
type D1783 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec3)
type D1784 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec4)
type D1785 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec5)
type D1786 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec6)
type D1787 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec7)
type D1788 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec8)
type D1789 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec8) Dec9)
type D1790 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec0)
type D1791 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec1)
type D1792 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec2)
type D1793 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec3)
type D1794 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec4)
type D1795 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec5)
type D1796 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec6)
type D1797 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec7)
type D1798 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec8)
type D1799 = Dec (:. (:. (:. (:. DecN Dec1) Dec7) Dec9) Dec9)
type D1800 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec0)
type D1801 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec1)
type D1802 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec2)
type D1803 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec3)
type D1804 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec4)
type D1805 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec5)
type D1806 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec6)
type D1807 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec7)
type D1808 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec8)
type D1809 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec0) Dec9)
type D1810 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec0)
type D1811 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec1)
type D1812 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec2)
type D1813 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec3)
type D1814 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec4)
type D1815 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec5)
type D1816 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec6)
type D1817 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec7)
type D1818 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec8)
type D1819 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec1) Dec9)
type D1820 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec0)
type D1821 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec1)
type D1822 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec2)
type D1823 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec3)
type D1824 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec4)
type D1825 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec5)
type D1826 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec6)
type D1827 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec7)
type D1828 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec8)
type D1829 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec2) Dec9)
type D1830 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec0)
type D1831 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec1)
type D1832 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec2)
type D1833 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec3)
type D1834 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec4)
type D1835 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec5)
type D1836 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec6)
type D1837 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec7)
type D1838 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec8)
type D1839 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec3) Dec9)
type D1840 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec0)
type D1841 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec1)
type D1842 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec2)
type D1843 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec3)
type D1844 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec4)
type D1845 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec5)
type D1846 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec6)
type D1847 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec7)
type D1848 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec8)
type D1849 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec4) Dec9)
type D1850 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec0)
type D1851 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec1)
type D1852 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec2)
type D1853 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec3)
type D1854 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec4)
type D1855 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec5)
type D1856 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec6)
type D1857 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec7)
type D1858 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec8)
type D1859 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec5) Dec9)
type D1860 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec0)
type D1861 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec1)
type D1862 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec2)
type D1863 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec3)
type D1864 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec4)
type D1865 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec5)
type D1866 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec6)
type D1867 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec7)
type D1868 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec8)
type D1869 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec6) Dec9)
type D1870 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec0)
type D1871 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec1)
type D1872 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec2)
type D1873 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec3)
type D1874 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec4)
type D1875 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec5)
type D1876 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec6)
type D1877 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec7)
type D1878 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec8)
type D1879 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec7) Dec9)
type D1880 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec0)
type D1881 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec1)
type D1882 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec2)
type D1883 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec3)
type D1884 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec4)
type D1885 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec5)
type D1886 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec6)
type D1887 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec7)
type D1888 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec8)
type D1889 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec8) Dec9)
type D1890 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec0)
type D1891 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec1)
type D1892 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec2)
type D1893 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec3)
type D1894 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec4)
type D1895 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec5)
type D1896 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec6)
type D1897 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec7)
type D1898 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec8)
type D1899 = Dec (:. (:. (:. (:. DecN Dec1) Dec8) Dec9) Dec9)
type D1900 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec0)
type D1901 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec1)
type D1902 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec2)
type D1903 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec3)
type D1904 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec4)
type D1905 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec5)
type D1906 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec6)
type D1907 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec7)
type D1908 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec8)
type D1909 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec0) Dec9)
type D1910 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec0)
type D1911 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec1)
type D1912 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec2)
type D1913 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec3)
type D1914 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec4)
type D1915 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec5)
type D1916 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec6)
type D1917 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec7)
type D1918 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec8)
type D1919 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec1) Dec9)
type D1920 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec0)
type D1921 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec1)
type D1922 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec2)
type D1923 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec3)
type D1924 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec4)
type D1925 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec5)
type D1926 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec6)
type D1927 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec7)
type D1928 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec8)
type D1929 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec2) Dec9)
type D1930 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec0)
type D1931 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec1)
type D1932 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec2)
type D1933 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec3)
type D1934 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec4)
type D1935 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec5)
type D1936 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec6)
type D1937 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec7)
type D1938 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec8)
type D1939 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec3) Dec9)
type D1940 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec0)
type D1941 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec1)
type D1942 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec2)
type D1943 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec3)
type D1944 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec4)
type D1945 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec5)
type D1946 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec6)
type D1947 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec7)
type D1948 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec8)
type D1949 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec4) Dec9)
type D1950 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec0)
type D1951 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec1)
type D1952 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec2)
type D1953 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec3)
type D1954 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec4)
type D1955 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec5)
type D1956 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec6)
type D1957 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec7)
type D1958 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec8)
type D1959 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec5) Dec9)
type D1960 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec0)
type D1961 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec1)
type D1962 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec2)
type D1963 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec3)
type D1964 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec4)
type D1965 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec5)
type D1966 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec6)
type D1967 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec7)
type D1968 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec8)
type D1969 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec6) Dec9)
type D1970 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec0)
type D1971 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec1)
type D1972 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec2)
type D1973 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec3)
type D1974 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec4)
type D1975 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec5)
type D1976 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec6)
type D1977 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec7)
type D1978 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec8)
type D1979 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec7) Dec9)
type D1980 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec0)
type D1981 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec1)
type D1982 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec2)
type D1983 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec3)
type D1984 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec4)
type D1985 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec5)
type D1986 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec6)
type D1987 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec7)
type D1988 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec8)
type D1989 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec8) Dec9)
type D1990 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec0)
type D1991 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec1)
type D1992 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec2)
type D1993 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec3)
type D1994 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec4)
type D1995 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec5)
type D1996 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec6)
type D1997 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec7)
type D1998 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec8)
type D1999 = Dec (:. (:. (:. (:. DecN Dec1) Dec9) Dec9) Dec9)
type D2000 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec0)
type D2001 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec1)
type D2002 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec2)
type D2003 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec3)
type D2004 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec4)
type D2005 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec5)
type D2006 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec6)
type D2007 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec7)
type D2008 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec8)
type D2009 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec0) Dec9)
type D2010 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec0)
type D2011 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec1)
type D2012 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec2)
type D2013 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec3)
type D2014 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec4)
type D2015 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec5)
type D2016 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec6)
type D2017 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec7)
type D2018 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec8)
type D2019 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec1) Dec9)
type D2020 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec0)
type D2021 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec1)
type D2022 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec2)
type D2023 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec3)
type D2024 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec4)
type D2025 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec5)
type D2026 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec6)
type D2027 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec7)
type D2028 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec8)
type D2029 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec2) Dec9)
type D2030 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec0)
type D2031 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec1)
type D2032 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec2)
type D2033 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec3)
type D2034 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec4)
type D2035 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec5)
type D2036 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec6)
type D2037 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec7)
type D2038 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec8)
type D2039 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec3) Dec9)
type D2040 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec0)
type D2041 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec1)
type D2042 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec2)
type D2043 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec3)
type D2044 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec4)
type D2045 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec5)
type D2046 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec6)
type D2047 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec7)
type D2048 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec8)
type D2049 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec4) Dec9)
type D2050 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec0)
type D2051 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec1)
type D2052 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec2)
type D2053 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec3)
type D2054 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec4)
type D2055 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec5)
type D2056 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec6)
type D2057 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec7)
type D2058 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec8)
type D2059 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec5) Dec9)
type D2060 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec0)
type D2061 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec1)
type D2062 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec2)
type D2063 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec3)
type D2064 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec4)
type D2065 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec5)
type D2066 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec6)
type D2067 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec7)
type D2068 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec8)
type D2069 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec6) Dec9)
type D2070 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec0)
type D2071 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec1)
type D2072 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec2)
type D2073 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec3)
type D2074 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec4)
type D2075 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec5)
type D2076 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec6)
type D2077 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec7)
type D2078 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec8)
type D2079 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec7) Dec9)
type D2080 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec0)
type D2081 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec1)
type D2082 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec2)
type D2083 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec3)
type D2084 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec4)
type D2085 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec5)
type D2086 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec6)
type D2087 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec7)
type D2088 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec8)
type D2089 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec8) Dec9)
type D2090 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec0)
type D2091 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec1)
type D2092 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec2)
type D2093 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec3)
type D2094 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec4)
type D2095 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec5)
type D2096 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec6)
type D2097 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec7)
type D2098 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec8)
type D2099 = Dec (:. (:. (:. (:. DecN Dec2) Dec0) Dec9) Dec9)
type D2100 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec0)
type D2101 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec1)
type D2102 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec2)
type D2103 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec3)
type D2104 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec4)
type D2105 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec5)
type D2106 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec6)
type D2107 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec7)
type D2108 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec8)
type D2109 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec0) Dec9)
type D2110 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec0)
type D2111 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec1)
type D2112 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec2)
type D2113 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec3)
type D2114 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec4)
type D2115 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec5)
type D2116 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec6)
type D2117 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec7)
type D2118 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec8)
type D2119 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec1) Dec9)
type D2120 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec0)
type D2121 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec1)
type D2122 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec2)
type D2123 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec3)
type D2124 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec4)
type D2125 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec5)
type D2126 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec6)
type D2127 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec7)
type D2128 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec8)
type D2129 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec2) Dec9)
type D2130 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec0)
type D2131 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec1)
type D2132 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec2)
type D2133 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec3)
type D2134 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec4)
type D2135 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec5)
type D2136 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec6)
type D2137 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec7)
type D2138 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec8)
type D2139 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec3) Dec9)
type D2140 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec0)
type D2141 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec1)
type D2142 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec2)
type D2143 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec3)
type D2144 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec4)
type D2145 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec5)
type D2146 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec6)
type D2147 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec7)
type D2148 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec8)
type D2149 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec4) Dec9)
type D2150 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec0)
type D2151 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec1)
type D2152 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec2)
type D2153 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec3)
type D2154 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec4)
type D2155 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec5)
type D2156 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec6)
type D2157 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec7)
type D2158 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec8)
type D2159 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec5) Dec9)
type D2160 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec0)
type D2161 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec1)
type D2162 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec2)
type D2163 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec3)
type D2164 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec4)
type D2165 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec5)
type D2166 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec6)
type D2167 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec7)
type D2168 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec8)
type D2169 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec6) Dec9)
type D2170 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec0)
type D2171 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec1)
type D2172 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec2)
type D2173 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec3)
type D2174 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec4)
type D2175 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec5)
type D2176 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec6)
type D2177 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec7)
type D2178 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec8)
type D2179 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec7) Dec9)
type D2180 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec0)
type D2181 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec1)
type D2182 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec2)
type D2183 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec3)
type D2184 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec4)
type D2185 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec5)
type D2186 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec6)
type D2187 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec7)
type D2188 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec8)
type D2189 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec8) Dec9)
type D2190 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec0)
type D2191 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec1)
type D2192 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec2)
type D2193 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec3)
type D2194 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec4)
type D2195 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec5)
type D2196 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec6)
type D2197 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec7)
type D2198 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec8)
type D2199 = Dec (:. (:. (:. (:. DecN Dec2) Dec1) Dec9) Dec9)
type D2200 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec0)
type D2201 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec1)
type D2202 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec2)
type D2203 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec3)
type D2204 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec4)
type D2205 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec5)
type D2206 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec6)
type D2207 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec7)
type D2208 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec8)
type D2209 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec0) Dec9)
type D2210 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec0)
type D2211 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec1)
type D2212 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec2)
type D2213 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec3)
type D2214 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec4)
type D2215 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec5)
type D2216 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec6)
type D2217 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec7)
type D2218 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec8)
type D2219 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec1) Dec9)
type D2220 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec0)
type D2221 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec1)
type D2222 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec2)
type D2223 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec3)
type D2224 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec4)
type D2225 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec5)
type D2226 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec6)
type D2227 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec7)
type D2228 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec8)
type D2229 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec2) Dec9)
type D2230 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec0)
type D2231 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec1)
type D2232 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec2)
type D2233 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec3)
type D2234 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec4)
type D2235 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec5)
type D2236 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec6)
type D2237 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec7)
type D2238 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec8)
type D2239 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec3) Dec9)
type D2240 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec0)
type D2241 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec1)
type D2242 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec2)
type D2243 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec3)
type D2244 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec4)
type D2245 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec5)
type D2246 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec6)
type D2247 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec7)
type D2248 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec8)
type D2249 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec4) Dec9)
type D2250 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec0)
type D2251 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec1)
type D2252 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec2)
type D2253 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec3)
type D2254 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec4)
type D2255 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec5)
type D2256 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec6)
type D2257 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec7)
type D2258 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec8)
type D2259 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec5) Dec9)
type D2260 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec0)
type D2261 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec1)
type D2262 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec2)
type D2263 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec3)
type D2264 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec4)
type D2265 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec5)
type D2266 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec6)
type D2267 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec7)
type D2268 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec8)
type D2269 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec6) Dec9)
type D2270 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec0)
type D2271 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec1)
type D2272 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec2)
type D2273 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec3)
type D2274 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec4)
type D2275 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec5)
type D2276 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec6)
type D2277 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec7)
type D2278 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec8)
type D2279 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec7) Dec9)
type D2280 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec0)
type D2281 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec1)
type D2282 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec2)
type D2283 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec3)
type D2284 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec4)
type D2285 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec5)
type D2286 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec6)
type D2287 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec7)
type D2288 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec8)
type D2289 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec8) Dec9)
type D2290 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec0)
type D2291 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec1)
type D2292 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec2)
type D2293 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec3)
type D2294 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec4)
type D2295 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec5)
type D2296 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec6)
type D2297 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec7)
type D2298 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec8)
type D2299 = Dec (:. (:. (:. (:. DecN Dec2) Dec2) Dec9) Dec9)
type D2300 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec0)
type D2301 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec1)
type D2302 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec2)
type D2303 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec3)
type D2304 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec4)
type D2305 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec5)
type D2306 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec6)
type D2307 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec7)
type D2308 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec8)
type D2309 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec0) Dec9)
type D2310 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec0)
type D2311 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec1)
type D2312 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec2)
type D2313 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec3)
type D2314 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec4)
type D2315 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec5)
type D2316 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec6)
type D2317 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec7)
type D2318 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec8)
type D2319 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec1) Dec9)
type D2320 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec0)
type D2321 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec1)
type D2322 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec2)
type D2323 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec3)
type D2324 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec4)
type D2325 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec5)
type D2326 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec6)
type D2327 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec7)
type D2328 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec8)
type D2329 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec2) Dec9)
type D2330 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec0)
type D2331 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec1)
type D2332 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec2)
type D2333 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec3)
type D2334 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec4)
type D2335 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec5)
type D2336 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec6)
type D2337 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec7)
type D2338 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec8)
type D2339 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec3) Dec9)
type D2340 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec0)
type D2341 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec1)
type D2342 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec2)
type D2343 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec3)
type D2344 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec4)
type D2345 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec5)
type D2346 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec6)
type D2347 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec7)
type D2348 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec8)
type D2349 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec4) Dec9)
type D2350 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec0)
type D2351 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec1)
type D2352 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec2)
type D2353 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec3)
type D2354 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec4)
type D2355 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec5)
type D2356 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec6)
type D2357 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec7)
type D2358 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec8)
type D2359 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec5) Dec9)
type D2360 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec0)
type D2361 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec1)
type D2362 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec2)
type D2363 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec3)
type D2364 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec4)
type D2365 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec5)
type D2366 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec6)
type D2367 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec7)
type D2368 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec8)
type D2369 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec6) Dec9)
type D2370 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec0)
type D2371 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec1)
type D2372 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec2)
type D2373 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec3)
type D2374 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec4)
type D2375 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec5)
type D2376 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec6)
type D2377 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec7)
type D2378 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec8)
type D2379 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec7) Dec9)
type D2380 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec0)
type D2381 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec1)
type D2382 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec2)
type D2383 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec3)
type D2384 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec4)
type D2385 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec5)
type D2386 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec6)
type D2387 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec7)
type D2388 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec8)
type D2389 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec8) Dec9)
type D2390 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec0)
type D2391 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec1)
type D2392 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec2)
type D2393 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec3)
type D2394 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec4)
type D2395 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec5)
type D2396 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec6)
type D2397 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec7)
type D2398 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec8)
type D2399 = Dec (:. (:. (:. (:. DecN Dec2) Dec3) Dec9) Dec9)
type D2400 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec0)
type D2401 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec1)
type D2402 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec2)
type D2403 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec3)
type D2404 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec4)
type D2405 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec5)
type D2406 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec6)
type D2407 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec7)
type D2408 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec8)
type D2409 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec0) Dec9)
type D2410 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec0)
type D2411 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec1)
type D2412 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec2)
type D2413 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec3)
type D2414 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec4)
type D2415 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec5)
type D2416 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec6)
type D2417 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec7)
type D2418 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec8)
type D2419 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec1) Dec9)
type D2420 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec0)
type D2421 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec1)
type D2422 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec2)
type D2423 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec3)
type D2424 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec4)
type D2425 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec5)
type D2426 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec6)
type D2427 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec7)
type D2428 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec8)
type D2429 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec2) Dec9)
type D2430 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec0)
type D2431 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec1)
type D2432 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec2)
type D2433 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec3)
type D2434 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec4)
type D2435 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec5)
type D2436 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec6)
type D2437 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec7)
type D2438 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec8)
type D2439 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec3) Dec9)
type D2440 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec0)
type D2441 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec1)
type D2442 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec2)
type D2443 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec3)
type D2444 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec4)
type D2445 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec5)
type D2446 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec6)
type D2447 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec7)
type D2448 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec8)
type D2449 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec4) Dec9)
type D2450 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec0)
type D2451 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec1)
type D2452 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec2)
type D2453 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec3)
type D2454 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec4)
type D2455 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec5)
type D2456 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec6)
type D2457 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec7)
type D2458 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec8)
type D2459 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec5) Dec9)
type D2460 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec0)
type D2461 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec1)
type D2462 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec2)
type D2463 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec3)
type D2464 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec4)
type D2465 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec5)
type D2466 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec6)
type D2467 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec7)
type D2468 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec8)
type D2469 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec6) Dec9)
type D2470 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec0)
type D2471 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec1)
type D2472 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec2)
type D2473 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec3)
type D2474 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec4)
type D2475 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec5)
type D2476 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec6)
type D2477 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec7)
type D2478 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec8)
type D2479 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec7) Dec9)
type D2480 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec0)
type D2481 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec1)
type D2482 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec2)
type D2483 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec3)
type D2484 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec4)
type D2485 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec5)
type D2486 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec6)
type D2487 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec7)
type D2488 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec8)
type D2489 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec8) Dec9)
type D2490 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec0)
type D2491 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec1)
type D2492 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec2)
type D2493 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec3)
type D2494 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec4)
type D2495 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec5)
type D2496 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec6)
type D2497 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec7)
type D2498 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec8)
type D2499 = Dec (:. (:. (:. (:. DecN Dec2) Dec4) Dec9) Dec9)
type D2500 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec0)
type D2501 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec1)
type D2502 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec2)
type D2503 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec3)
type D2504 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec4)
type D2505 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec5)
type D2506 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec6)
type D2507 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec7)
type D2508 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec8)
type D2509 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec0) Dec9)
type D2510 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec0)
type D2511 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec1)
type D2512 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec2)
type D2513 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec3)
type D2514 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec4)
type D2515 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec5)
type D2516 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec6)
type D2517 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec7)
type D2518 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec8)
type D2519 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec1) Dec9)
type D2520 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec0)
type D2521 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec1)
type D2522 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec2)
type D2523 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec3)
type D2524 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec4)
type D2525 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec5)
type D2526 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec6)
type D2527 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec7)
type D2528 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec8)
type D2529 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec2) Dec9)
type D2530 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec0)
type D2531 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec1)
type D2532 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec2)
type D2533 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec3)
type D2534 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec4)
type D2535 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec5)
type D2536 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec6)
type D2537 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec7)
type D2538 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec8)
type D2539 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec3) Dec9)
type D2540 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec0)
type D2541 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec1)
type D2542 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec2)
type D2543 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec3)
type D2544 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec4)
type D2545 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec5)
type D2546 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec6)
type D2547 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec7)
type D2548 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec8)
type D2549 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec4) Dec9)
type D2550 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec0)
type D2551 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec1)
type D2552 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec2)
type D2553 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec3)
type D2554 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec4)
type D2555 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec5)
type D2556 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec6)
type D2557 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec7)
type D2558 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec8)
type D2559 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec5) Dec9)
type D2560 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec0)
type D2561 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec1)
type D2562 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec2)
type D2563 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec3)
type D2564 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec4)
type D2565 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec5)
type D2566 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec6)
type D2567 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec7)
type D2568 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec8)
type D2569 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec6) Dec9)
type D2570 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec0)
type D2571 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec1)
type D2572 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec2)
type D2573 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec3)
type D2574 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec4)
type D2575 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec5)
type D2576 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec6)
type D2577 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec7)
type D2578 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec8)
type D2579 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec7) Dec9)
type D2580 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec0)
type D2581 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec1)
type D2582 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec2)
type D2583 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec3)
type D2584 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec4)
type D2585 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec5)
type D2586 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec6)
type D2587 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec7)
type D2588 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec8)
type D2589 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec8) Dec9)
type D2590 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec0)
type D2591 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec1)
type D2592 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec2)
type D2593 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec3)
type D2594 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec4)
type D2595 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec5)
type D2596 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec6)
type D2597 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec7)
type D2598 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec8)
type D2599 = Dec (:. (:. (:. (:. DecN Dec2) Dec5) Dec9) Dec9)
type D2600 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec0)
type D2601 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec1)
type D2602 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec2)
type D2603 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec3)
type D2604 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec4)
type D2605 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec5)
type D2606 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec6)
type D2607 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec7)
type D2608 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec8)
type D2609 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec0) Dec9)
type D2610 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec0)
type D2611 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec1)
type D2612 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec2)
type D2613 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec3)
type D2614 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec4)
type D2615 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec5)
type D2616 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec6)
type D2617 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec7)
type D2618 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec8)
type D2619 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec1) Dec9)
type D2620 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec0)
type D2621 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec1)
type D2622 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec2)
type D2623 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec3)
type D2624 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec4)
type D2625 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec5)
type D2626 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec6)
type D2627 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec7)
type D2628 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec8)
type D2629 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec2) Dec9)
type D2630 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec0)
type D2631 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec1)
type D2632 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec2)
type D2633 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec3)
type D2634 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec4)
type D2635 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec5)
type D2636 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec6)
type D2637 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec7)
type D2638 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec8)
type D2639 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec3) Dec9)
type D2640 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec0)
type D2641 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec1)
type D2642 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec2)
type D2643 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec3)
type D2644 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec4)
type D2645 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec5)
type D2646 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec6)
type D2647 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec7)
type D2648 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec8)
type D2649 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec4) Dec9)
type D2650 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec0)
type D2651 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec1)
type D2652 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec2)
type D2653 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec3)
type D2654 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec4)
type D2655 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec5)
type D2656 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec6)
type D2657 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec7)
type D2658 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec8)
type D2659 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec5) Dec9)
type D2660 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec0)
type D2661 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec1)
type D2662 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec2)
type D2663 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec3)
type D2664 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec4)
type D2665 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec5)
type D2666 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec6)
type D2667 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec7)
type D2668 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec8)
type D2669 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec6) Dec9)
type D2670 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec0)
type D2671 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec1)
type D2672 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec2)
type D2673 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec3)
type D2674 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec4)
type D2675 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec5)
type D2676 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec6)
type D2677 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec7)
type D2678 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec8)
type D2679 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec7) Dec9)
type D2680 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec0)
type D2681 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec1)
type D2682 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec2)
type D2683 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec3)
type D2684 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec4)
type D2685 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec5)
type D2686 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec6)
type D2687 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec7)
type D2688 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec8)
type D2689 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec8) Dec9)
type D2690 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec0)
type D2691 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec1)
type D2692 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec2)
type D2693 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec3)
type D2694 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec4)
type D2695 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec5)
type D2696 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec6)
type D2697 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec7)
type D2698 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec8)
type D2699 = Dec (:. (:. (:. (:. DecN Dec2) Dec6) Dec9) Dec9)
type D2700 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec0)
type D2701 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec1)
type D2702 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec2)
type D2703 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec3)
type D2704 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec4)
type D2705 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec5)
type D2706 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec6)
type D2707 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec7)
type D2708 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec8)
type D2709 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec0) Dec9)
type D2710 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec0)
type D2711 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec1)
type D2712 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec2)
type D2713 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec3)
type D2714 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec4)
type D2715 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec5)
type D2716 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec6)
type D2717 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec7)
type D2718 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec8)
type D2719 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec1) Dec9)
type D2720 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec0)
type D2721 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec1)
type D2722 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec2)
type D2723 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec3)
type D2724 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec4)
type D2725 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec5)
type D2726 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec6)
type D2727 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec7)
type D2728 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec8)
type D2729 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec2) Dec9)
type D2730 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec0)
type D2731 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec1)
type D2732 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec2)
type D2733 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec3)
type D2734 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec4)
type D2735 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec5)
type D2736 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec6)
type D2737 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec7)
type D2738 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec8)
type D2739 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec3) Dec9)
type D2740 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec0)
type D2741 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec1)
type D2742 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec2)
type D2743 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec3)
type D2744 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec4)
type D2745 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec5)
type D2746 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec6)
type D2747 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec7)
type D2748 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec8)
type D2749 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec4) Dec9)
type D2750 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec0)
type D2751 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec1)
type D2752 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec2)
type D2753 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec3)
type D2754 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec4)
type D2755 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec5)
type D2756 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec6)
type D2757 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec7)
type D2758 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec8)
type D2759 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec5) Dec9)
type D2760 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec0)
type D2761 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec1)
type D2762 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec2)
type D2763 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec3)
type D2764 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec4)
type D2765 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec5)
type D2766 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec6)
type D2767 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec7)
type D2768 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec8)
type D2769 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec6) Dec9)
type D2770 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec0)
type D2771 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec1)
type D2772 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec2)
type D2773 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec3)
type D2774 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec4)
type D2775 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec5)
type D2776 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec6)
type D2777 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec7)
type D2778 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec8)
type D2779 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec7) Dec9)
type D2780 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec0)
type D2781 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec1)
type D2782 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec2)
type D2783 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec3)
type D2784 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec4)
type D2785 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec5)
type D2786 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec6)
type D2787 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec7)
type D2788 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec8)
type D2789 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec8) Dec9)
type D2790 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec0)
type D2791 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec1)
type D2792 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec2)
type D2793 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec3)
type D2794 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec4)
type D2795 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec5)
type D2796 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec6)
type D2797 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec7)
type D2798 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec8)
type D2799 = Dec (:. (:. (:. (:. DecN Dec2) Dec7) Dec9) Dec9)
type D2800 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec0)
type D2801 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec1)
type D2802 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec2)
type D2803 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec3)
type D2804 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec4)
type D2805 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec5)
type D2806 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec6)
type D2807 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec7)
type D2808 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec8)
type D2809 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec0) Dec9)
type D2810 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec0)
type D2811 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec1)
type D2812 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec2)
type D2813 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec3)
type D2814 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec4)
type D2815 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec5)
type D2816 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec6)
type D2817 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec7)
type D2818 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec8)
type D2819 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec1) Dec9)
type D2820 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec0)
type D2821 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec1)
type D2822 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec2)
type D2823 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec3)
type D2824 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec4)
type D2825 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec5)
type D2826 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec6)
type D2827 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec7)
type D2828 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec8)
type D2829 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec2) Dec9)
type D2830 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec0)
type D2831 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec1)
type D2832 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec2)
type D2833 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec3)
type D2834 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec4)
type D2835 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec5)
type D2836 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec6)
type D2837 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec7)
type D2838 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec8)
type D2839 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec3) Dec9)
type D2840 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec0)
type D2841 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec1)
type D2842 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec2)
type D2843 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec3)
type D2844 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec4)
type D2845 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec5)
type D2846 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec6)
type D2847 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec7)
type D2848 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec8)
type D2849 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec4) Dec9)
type D2850 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec0)
type D2851 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec1)
type D2852 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec2)
type D2853 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec3)
type D2854 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec4)
type D2855 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec5)
type D2856 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec6)
type D2857 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec7)
type D2858 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec8)
type D2859 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec5) Dec9)
type D2860 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec0)
type D2861 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec1)
type D2862 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec2)
type D2863 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec3)
type D2864 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec4)
type D2865 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec5)
type D2866 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec6)
type D2867 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec7)
type D2868 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec8)
type D2869 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec6) Dec9)
type D2870 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec0)
type D2871 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec1)
type D2872 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec2)
type D2873 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec3)
type D2874 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec4)
type D2875 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec5)
type D2876 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec6)
type D2877 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec7)
type D2878 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec8)
type D2879 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec7) Dec9)
type D2880 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec0)
type D2881 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec1)
type D2882 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec2)
type D2883 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec3)
type D2884 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec4)
type D2885 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec5)
type D2886 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec6)
type D2887 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec7)
type D2888 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec8)
type D2889 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec8) Dec9)
type D2890 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec0)
type D2891 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec1)
type D2892 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec2)
type D2893 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec3)
type D2894 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec4)
type D2895 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec5)
type D2896 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec6)
type D2897 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec7)
type D2898 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec8)
type D2899 = Dec (:. (:. (:. (:. DecN Dec2) Dec8) Dec9) Dec9)
type D2900 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec0)
type D2901 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec1)
type D2902 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec2)
type D2903 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec3)
type D2904 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec4)
type D2905 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec5)
type D2906 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec6)
type D2907 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec7)
type D2908 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec8)
type D2909 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec0) Dec9)
type D2910 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec0)
type D2911 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec1)
type D2912 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec2)
type D2913 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec3)
type D2914 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec4)
type D2915 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec5)
type D2916 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec6)
type D2917 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec7)
type D2918 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec8)
type D2919 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec1) Dec9)
type D2920 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec0)
type D2921 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec1)
type D2922 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec2)
type D2923 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec3)
type D2924 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec4)
type D2925 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec5)
type D2926 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec6)
type D2927 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec7)
type D2928 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec8)
type D2929 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec2) Dec9)
type D2930 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec0)
type D2931 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec1)
type D2932 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec2)
type D2933 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec3)
type D2934 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec4)
type D2935 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec5)
type D2936 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec6)
type D2937 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec7)
type D2938 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec8)
type D2939 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec3) Dec9)
type D2940 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec0)
type D2941 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec1)
type D2942 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec2)
type D2943 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec3)
type D2944 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec4)
type D2945 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec5)
type D2946 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec6)
type D2947 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec7)
type D2948 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec8)
type D2949 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec4) Dec9)
type D2950 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec0)
type D2951 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec1)
type D2952 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec2)
type D2953 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec3)
type D2954 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec4)
type D2955 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec5)
type D2956 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec6)
type D2957 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec7)
type D2958 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec8)
type D2959 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec5) Dec9)
type D2960 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec0)
type D2961 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec1)
type D2962 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec2)
type D2963 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec3)
type D2964 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec4)
type D2965 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec5)
type D2966 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec6)
type D2967 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec7)
type D2968 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec8)
type D2969 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec6) Dec9)
type D2970 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec0)
type D2971 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec1)
type D2972 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec2)
type D2973 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec3)
type D2974 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec4)
type D2975 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec5)
type D2976 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec6)
type D2977 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec7)
type D2978 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec8)
type D2979 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec7) Dec9)
type D2980 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec0)
type D2981 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec1)
type D2982 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec2)
type D2983 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec3)
type D2984 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec4)
type D2985 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec5)
type D2986 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec6)
type D2987 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec7)
type D2988 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec8)
type D2989 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec8) Dec9)
type D2990 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec0)
type D2991 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec1)
type D2992 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec2)
type D2993 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec3)
type D2994 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec4)
type D2995 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec5)
type D2996 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec6)
type D2997 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec7)
type D2998 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec8)
type D2999 = Dec (:. (:. (:. (:. DecN Dec2) Dec9) Dec9) Dec9)
type D3000 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec0)
type D3001 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec1)
type D3002 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec2)
type D3003 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec3)
type D3004 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec4)
type D3005 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec5)
type D3006 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec6)
type D3007 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec7)
type D3008 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec8)
type D3009 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec0) Dec9)
type D3010 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec0)
type D3011 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec1)
type D3012 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec2)
type D3013 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec3)
type D3014 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec4)
type D3015 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec5)
type D3016 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec6)
type D3017 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec7)
type D3018 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec8)
type D3019 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec1) Dec9)
type D3020 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec0)
type D3021 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec1)
type D3022 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec2)
type D3023 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec3)
type D3024 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec4)
type D3025 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec5)
type D3026 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec6)
type D3027 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec7)
type D3028 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec8)
type D3029 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec2) Dec9)
type D3030 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec0)
type D3031 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec1)
type D3032 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec2)
type D3033 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec3)
type D3034 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec4)
type D3035 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec5)
type D3036 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec6)
type D3037 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec7)
type D3038 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec8)
type D3039 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec3) Dec9)
type D3040 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec0)
type D3041 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec1)
type D3042 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec2)
type D3043 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec3)
type D3044 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec4)
type D3045 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec5)
type D3046 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec6)
type D3047 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec7)
type D3048 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec8)
type D3049 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec4) Dec9)
type D3050 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec0)
type D3051 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec1)
type D3052 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec2)
type D3053 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec3)
type D3054 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec4)
type D3055 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec5)
type D3056 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec6)
type D3057 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec7)
type D3058 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec8)
type D3059 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec5) Dec9)
type D3060 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec0)
type D3061 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec1)
type D3062 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec2)
type D3063 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec3)
type D3064 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec4)
type D3065 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec5)
type D3066 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec6)
type D3067 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec7)
type D3068 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec8)
type D3069 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec6) Dec9)
type D3070 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec0)
type D3071 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec1)
type D3072 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec2)
type D3073 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec3)
type D3074 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec4)
type D3075 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec5)
type D3076 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec6)
type D3077 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec7)
type D3078 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec8)
type D3079 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec7) Dec9)
type D3080 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec0)
type D3081 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec1)
type D3082 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec2)
type D3083 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec3)
type D3084 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec4)
type D3085 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec5)
type D3086 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec6)
type D3087 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec7)
type D3088 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec8)
type D3089 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec8) Dec9)
type D3090 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec0)
type D3091 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec1)
type D3092 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec2)
type D3093 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec3)
type D3094 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec4)
type D3095 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec5)
type D3096 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec6)
type D3097 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec7)
type D3098 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec8)
type D3099 = Dec (:. (:. (:. (:. DecN Dec3) Dec0) Dec9) Dec9)
type D3100 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec0)
type D3101 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec1)
type D3102 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec2)
type D3103 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec3)
type D3104 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec4)
type D3105 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec5)
type D3106 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec6)
type D3107 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec7)
type D3108 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec8)
type D3109 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec0) Dec9)
type D3110 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec0)
type D3111 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec1)
type D3112 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec2)
type D3113 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec3)
type D3114 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec4)
type D3115 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec5)
type D3116 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec6)
type D3117 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec7)
type D3118 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec8)
type D3119 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec1) Dec9)
type D3120 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec0)
type D3121 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec1)
type D3122 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec2)
type D3123 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec3)
type D3124 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec4)
type D3125 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec5)
type D3126 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec6)
type D3127 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec7)
type D3128 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec8)
type D3129 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec2) Dec9)
type D3130 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec0)
type D3131 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec1)
type D3132 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec2)
type D3133 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec3)
type D3134 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec4)
type D3135 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec5)
type D3136 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec6)
type D3137 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec7)
type D3138 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec8)
type D3139 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec3) Dec9)
type D3140 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec0)
type D3141 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec1)
type D3142 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec2)
type D3143 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec3)
type D3144 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec4)
type D3145 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec5)
type D3146 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec6)
type D3147 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec7)
type D3148 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec8)
type D3149 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec4) Dec9)
type D3150 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec0)
type D3151 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec1)
type D3152 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec2)
type D3153 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec3)
type D3154 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec4)
type D3155 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec5)
type D3156 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec6)
type D3157 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec7)
type D3158 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec8)
type D3159 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec5) Dec9)
type D3160 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec0)
type D3161 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec1)
type D3162 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec2)
type D3163 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec3)
type D3164 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec4)
type D3165 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec5)
type D3166 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec6)
type D3167 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec7)
type D3168 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec8)
type D3169 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec6) Dec9)
type D3170 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec0)
type D3171 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec1)
type D3172 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec2)
type D3173 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec3)
type D3174 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec4)
type D3175 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec5)
type D3176 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec6)
type D3177 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec7)
type D3178 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec8)
type D3179 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec7) Dec9)
type D3180 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec0)
type D3181 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec1)
type D3182 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec2)
type D3183 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec3)
type D3184 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec4)
type D3185 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec5)
type D3186 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec6)
type D3187 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec7)
type D3188 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec8)
type D3189 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec8) Dec9)
type D3190 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec0)
type D3191 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec1)
type D3192 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec2)
type D3193 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec3)
type D3194 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec4)
type D3195 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec5)
type D3196 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec6)
type D3197 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec7)
type D3198 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec8)
type D3199 = Dec (:. (:. (:. (:. DecN Dec3) Dec1) Dec9) Dec9)
type D3200 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec0)
type D3201 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec1)
type D3202 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec2)
type D3203 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec3)
type D3204 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec4)
type D3205 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec5)
type D3206 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec6)
type D3207 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec7)
type D3208 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec8)
type D3209 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec0) Dec9)
type D3210 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec0)
type D3211 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec1)
type D3212 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec2)
type D3213 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec3)
type D3214 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec4)
type D3215 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec5)
type D3216 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec6)
type D3217 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec7)
type D3218 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec8)
type D3219 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec1) Dec9)
type D3220 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec0)
type D3221 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec1)
type D3222 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec2)
type D3223 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec3)
type D3224 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec4)
type D3225 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec5)
type D3226 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec6)
type D3227 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec7)
type D3228 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec8)
type D3229 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec2) Dec9)
type D3230 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec0)
type D3231 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec1)
type D3232 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec2)
type D3233 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec3)
type D3234 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec4)
type D3235 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec5)
type D3236 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec6)
type D3237 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec7)
type D3238 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec8)
type D3239 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec3) Dec9)
type D3240 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec0)
type D3241 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec1)
type D3242 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec2)
type D3243 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec3)
type D3244 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec4)
type D3245 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec5)
type D3246 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec6)
type D3247 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec7)
type D3248 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec8)
type D3249 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec4) Dec9)
type D3250 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec0)
type D3251 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec1)
type D3252 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec2)
type D3253 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec3)
type D3254 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec4)
type D3255 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec5)
type D3256 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec6)
type D3257 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec7)
type D3258 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec8)
type D3259 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec5) Dec9)
type D3260 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec0)
type D3261 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec1)
type D3262 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec2)
type D3263 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec3)
type D3264 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec4)
type D3265 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec5)
type D3266 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec6)
type D3267 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec7)
type D3268 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec8)
type D3269 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec6) Dec9)
type D3270 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec0)
type D3271 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec1)
type D3272 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec2)
type D3273 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec3)
type D3274 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec4)
type D3275 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec5)
type D3276 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec6)
type D3277 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec7)
type D3278 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec8)
type D3279 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec7) Dec9)
type D3280 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec0)
type D3281 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec1)
type D3282 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec2)
type D3283 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec3)
type D3284 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec4)
type D3285 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec5)
type D3286 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec6)
type D3287 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec7)
type D3288 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec8)
type D3289 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec8) Dec9)
type D3290 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec0)
type D3291 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec1)
type D3292 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec2)
type D3293 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec3)
type D3294 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec4)
type D3295 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec5)
type D3296 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec6)
type D3297 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec7)
type D3298 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec8)
type D3299 = Dec (:. (:. (:. (:. DecN Dec3) Dec2) Dec9) Dec9)
type D3300 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec0)
type D3301 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec1)
type D3302 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec2)
type D3303 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec3)
type D3304 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec4)
type D3305 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec5)
type D3306 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec6)
type D3307 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec7)
type D3308 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec8)
type D3309 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec0) Dec9)
type D3310 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec0)
type D3311 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec1)
type D3312 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec2)
type D3313 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec3)
type D3314 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec4)
type D3315 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec5)
type D3316 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec6)
type D3317 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec7)
type D3318 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec8)
type D3319 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec1) Dec9)
type D3320 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec0)
type D3321 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec1)
type D3322 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec2)
type D3323 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec3)
type D3324 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec4)
type D3325 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec5)
type D3326 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec6)
type D3327 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec7)
type D3328 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec8)
type D3329 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec2) Dec9)
type D3330 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec0)
type D3331 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec1)
type D3332 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec2)
type D3333 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec3)
type D3334 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec4)
type D3335 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec5)
type D3336 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec6)
type D3337 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec7)
type D3338 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec8)
type D3339 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec3) Dec9)
type D3340 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec0)
type D3341 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec1)
type D3342 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec2)
type D3343 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec3)
type D3344 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec4)
type D3345 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec5)
type D3346 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec6)
type D3347 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec7)
type D3348 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec8)
type D3349 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec4) Dec9)
type D3350 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec0)
type D3351 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec1)
type D3352 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec2)
type D3353 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec3)
type D3354 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec4)
type D3355 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec5)
type D3356 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec6)
type D3357 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec7)
type D3358 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec8)
type D3359 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec5) Dec9)
type D3360 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec0)
type D3361 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec1)
type D3362 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec2)
type D3363 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec3)
type D3364 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec4)
type D3365 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec5)
type D3366 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec6)
type D3367 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec7)
type D3368 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec8)
type D3369 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec6) Dec9)
type D3370 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec0)
type D3371 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec1)
type D3372 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec2)
type D3373 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec3)
type D3374 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec4)
type D3375 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec5)
type D3376 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec6)
type D3377 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec7)
type D3378 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec8)
type D3379 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec7) Dec9)
type D3380 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec0)
type D3381 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec1)
type D3382 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec2)
type D3383 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec3)
type D3384 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec4)
type D3385 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec5)
type D3386 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec6)
type D3387 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec7)
type D3388 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec8)
type D3389 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec8) Dec9)
type D3390 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec0)
type D3391 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec1)
type D3392 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec2)
type D3393 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec3)
type D3394 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec4)
type D3395 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec5)
type D3396 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec6)
type D3397 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec7)
type D3398 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec8)
type D3399 = Dec (:. (:. (:. (:. DecN Dec3) Dec3) Dec9) Dec9)
type D3400 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec0)
type D3401 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec1)
type D3402 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec2)
type D3403 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec3)
type D3404 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec4)
type D3405 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec5)
type D3406 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec6)
type D3407 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec7)
type D3408 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec8)
type D3409 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec0) Dec9)
type D3410 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec0)
type D3411 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec1)
type D3412 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec2)
type D3413 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec3)
type D3414 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec4)
type D3415 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec5)
type D3416 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec6)
type D3417 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec7)
type D3418 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec8)
type D3419 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec1) Dec9)
type D3420 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec0)
type D3421 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec1)
type D3422 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec2)
type D3423 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec3)
type D3424 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec4)
type D3425 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec5)
type D3426 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec6)
type D3427 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec7)
type D3428 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec8)
type D3429 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec2) Dec9)
type D3430 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec0)
type D3431 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec1)
type D3432 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec2)
type D3433 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec3)
type D3434 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec4)
type D3435 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec5)
type D3436 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec6)
type D3437 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec7)
type D3438 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec8)
type D3439 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec3) Dec9)
type D3440 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec0)
type D3441 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec1)
type D3442 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec2)
type D3443 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec3)
type D3444 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec4)
type D3445 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec5)
type D3446 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec6)
type D3447 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec7)
type D3448 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec8)
type D3449 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec4) Dec9)
type D3450 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec0)
type D3451 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec1)
type D3452 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec2)
type D3453 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec3)
type D3454 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec4)
type D3455 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec5)
type D3456 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec6)
type D3457 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec7)
type D3458 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec8)
type D3459 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec5) Dec9)
type D3460 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec0)
type D3461 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec1)
type D3462 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec2)
type D3463 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec3)
type D3464 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec4)
type D3465 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec5)
type D3466 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec6)
type D3467 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec7)
type D3468 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec8)
type D3469 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec6) Dec9)
type D3470 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec0)
type D3471 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec1)
type D3472 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec2)
type D3473 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec3)
type D3474 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec4)
type D3475 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec5)
type D3476 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec6)
type D3477 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec7)
type D3478 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec8)
type D3479 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec7) Dec9)
type D3480 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec0)
type D3481 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec1)
type D3482 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec2)
type D3483 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec3)
type D3484 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec4)
type D3485 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec5)
type D3486 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec6)
type D3487 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec7)
type D3488 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec8)
type D3489 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec8) Dec9)
type D3490 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec0)
type D3491 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec1)
type D3492 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec2)
type D3493 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec3)
type D3494 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec4)
type D3495 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec5)
type D3496 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec6)
type D3497 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec7)
type D3498 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec8)
type D3499 = Dec (:. (:. (:. (:. DecN Dec3) Dec4) Dec9) Dec9)
type D3500 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec0)
type D3501 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec1)
type D3502 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec2)
type D3503 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec3)
type D3504 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec4)
type D3505 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec5)
type D3506 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec6)
type D3507 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec7)
type D3508 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec8)
type D3509 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec0) Dec9)
type D3510 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec0)
type D3511 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec1)
type D3512 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec2)
type D3513 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec3)
type D3514 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec4)
type D3515 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec5)
type D3516 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec6)
type D3517 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec7)
type D3518 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec8)
type D3519 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec1) Dec9)
type D3520 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec0)
type D3521 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec1)
type D3522 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec2)
type D3523 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec3)
type D3524 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec4)
type D3525 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec5)
type D3526 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec6)
type D3527 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec7)
type D3528 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec8)
type D3529 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec2) Dec9)
type D3530 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec0)
type D3531 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec1)
type D3532 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec2)
type D3533 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec3)
type D3534 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec4)
type D3535 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec5)
type D3536 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec6)
type D3537 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec7)
type D3538 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec8)
type D3539 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec3) Dec9)
type D3540 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec0)
type D3541 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec1)
type D3542 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec2)
type D3543 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec3)
type D3544 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec4)
type D3545 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec5)
type D3546 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec6)
type D3547 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec7)
type D3548 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec8)
type D3549 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec4) Dec9)
type D3550 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec0)
type D3551 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec1)
type D3552 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec2)
type D3553 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec3)
type D3554 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec4)
type D3555 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec5)
type D3556 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec6)
type D3557 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec7)
type D3558 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec8)
type D3559 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec5) Dec9)
type D3560 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec0)
type D3561 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec1)
type D3562 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec2)
type D3563 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec3)
type D3564 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec4)
type D3565 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec5)
type D3566 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec6)
type D3567 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec7)
type D3568 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec8)
type D3569 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec6) Dec9)
type D3570 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec0)
type D3571 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec1)
type D3572 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec2)
type D3573 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec3)
type D3574 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec4)
type D3575 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec5)
type D3576 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec6)
type D3577 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec7)
type D3578 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec8)
type D3579 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec7) Dec9)
type D3580 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec0)
type D3581 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec1)
type D3582 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec2)
type D3583 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec3)
type D3584 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec4)
type D3585 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec5)
type D3586 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec6)
type D3587 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec7)
type D3588 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec8)
type D3589 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec8) Dec9)
type D3590 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec0)
type D3591 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec1)
type D3592 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec2)
type D3593 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec3)
type D3594 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec4)
type D3595 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec5)
type D3596 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec6)
type D3597 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec7)
type D3598 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec8)
type D3599 = Dec (:. (:. (:. (:. DecN Dec3) Dec5) Dec9) Dec9)
type D3600 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec0)
type D3601 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec1)
type D3602 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec2)
type D3603 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec3)
type D3604 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec4)
type D3605 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec5)
type D3606 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec6)
type D3607 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec7)
type D3608 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec8)
type D3609 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec0) Dec9)
type D3610 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec0)
type D3611 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec1)
type D3612 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec2)
type D3613 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec3)
type D3614 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec4)
type D3615 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec5)
type D3616 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec6)
type D3617 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec7)
type D3618 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec8)
type D3619 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec1) Dec9)
type D3620 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec0)
type D3621 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec1)
type D3622 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec2)
type D3623 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec3)
type D3624 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec4)
type D3625 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec5)
type D3626 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec6)
type D3627 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec7)
type D3628 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec8)
type D3629 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec2) Dec9)
type D3630 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec0)
type D3631 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec1)
type D3632 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec2)
type D3633 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec3)
type D3634 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec4)
type D3635 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec5)
type D3636 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec6)
type D3637 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec7)
type D3638 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec8)
type D3639 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec3) Dec9)
type D3640 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec0)
type D3641 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec1)
type D3642 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec2)
type D3643 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec3)
type D3644 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec4)
type D3645 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec5)
type D3646 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec6)
type D3647 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec7)
type D3648 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec8)
type D3649 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec4) Dec9)
type D3650 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec0)
type D3651 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec1)
type D3652 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec2)
type D3653 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec3)
type D3654 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec4)
type D3655 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec5)
type D3656 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec6)
type D3657 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec7)
type D3658 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec8)
type D3659 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec5) Dec9)
type D3660 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec0)
type D3661 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec1)
type D3662 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec2)
type D3663 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec3)
type D3664 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec4)
type D3665 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec5)
type D3666 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec6)
type D3667 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec7)
type D3668 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec8)
type D3669 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec6) Dec9)
type D3670 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec0)
type D3671 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec1)
type D3672 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec2)
type D3673 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec3)
type D3674 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec4)
type D3675 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec5)
type D3676 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec6)
type D3677 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec7)
type D3678 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec8)
type D3679 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec7) Dec9)
type D3680 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec0)
type D3681 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec1)
type D3682 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec2)
type D3683 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec3)
type D3684 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec4)
type D3685 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec5)
type D3686 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec6)
type D3687 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec7)
type D3688 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec8)
type D3689 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec8) Dec9)
type D3690 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec0)
type D3691 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec1)
type D3692 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec2)
type D3693 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec3)
type D3694 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec4)
type D3695 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec5)
type D3696 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec6)
type D3697 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec7)
type D3698 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec8)
type D3699 = Dec (:. (:. (:. (:. DecN Dec3) Dec6) Dec9) Dec9)
type D3700 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec0)
type D3701 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec1)
type D3702 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec2)
type D3703 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec3)
type D3704 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec4)
type D3705 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec5)
type D3706 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec6)
type D3707 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec7)
type D3708 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec8)
type D3709 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec0) Dec9)
type D3710 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec0)
type D3711 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec1)
type D3712 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec2)
type D3713 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec3)
type D3714 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec4)
type D3715 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec5)
type D3716 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec6)
type D3717 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec7)
type D3718 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec8)
type D3719 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec1) Dec9)
type D3720 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec0)
type D3721 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec1)
type D3722 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec2)
type D3723 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec3)
type D3724 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec4)
type D3725 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec5)
type D3726 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec6)
type D3727 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec7)
type D3728 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec8)
type D3729 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec2) Dec9)
type D3730 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec0)
type D3731 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec1)
type D3732 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec2)
type D3733 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec3)
type D3734 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec4)
type D3735 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec5)
type D3736 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec6)
type D3737 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec7)
type D3738 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec8)
type D3739 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec3) Dec9)
type D3740 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec0)
type D3741 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec1)
type D3742 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec2)
type D3743 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec3)
type D3744 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec4)
type D3745 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec5)
type D3746 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec6)
type D3747 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec7)
type D3748 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec8)
type D3749 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec4) Dec9)
type D3750 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec0)
type D3751 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec1)
type D3752 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec2)
type D3753 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec3)
type D3754 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec4)
type D3755 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec5)
type D3756 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec6)
type D3757 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec7)
type D3758 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec8)
type D3759 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec5) Dec9)
type D3760 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec0)
type D3761 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec1)
type D3762 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec2)
type D3763 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec3)
type D3764 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec4)
type D3765 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec5)
type D3766 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec6)
type D3767 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec7)
type D3768 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec8)
type D3769 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec6) Dec9)
type D3770 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec0)
type D3771 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec1)
type D3772 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec2)
type D3773 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec3)
type D3774 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec4)
type D3775 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec5)
type D3776 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec6)
type D3777 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec7)
type D3778 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec8)
type D3779 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec7) Dec9)
type D3780 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec0)
type D3781 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec1)
type D3782 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec2)
type D3783 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec3)
type D3784 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec4)
type D3785 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec5)
type D3786 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec6)
type D3787 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec7)
type D3788 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec8)
type D3789 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec8) Dec9)
type D3790 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec0)
type D3791 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec1)
type D3792 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec2)
type D3793 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec3)
type D3794 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec4)
type D3795 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec5)
type D3796 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec6)
type D3797 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec7)
type D3798 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec8)
type D3799 = Dec (:. (:. (:. (:. DecN Dec3) Dec7) Dec9) Dec9)
type D3800 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec0)
type D3801 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec1)
type D3802 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec2)
type D3803 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec3)
type D3804 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec4)
type D3805 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec5)
type D3806 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec6)
type D3807 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec7)
type D3808 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec8)
type D3809 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec0) Dec9)
type D3810 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec0)
type D3811 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec1)
type D3812 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec2)
type D3813 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec3)
type D3814 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec4)
type D3815 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec5)
type D3816 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec6)
type D3817 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec7)
type D3818 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec8)
type D3819 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec1) Dec9)
type D3820 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec0)
type D3821 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec1)
type D3822 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec2)
type D3823 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec3)
type D3824 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec4)
type D3825 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec5)
type D3826 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec6)
type D3827 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec7)
type D3828 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec8)
type D3829 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec2) Dec9)
type D3830 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec0)
type D3831 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec1)
type D3832 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec2)
type D3833 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec3)
type D3834 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec4)
type D3835 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec5)
type D3836 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec6)
type D3837 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec7)
type D3838 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec8)
type D3839 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec3) Dec9)
type D3840 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec0)
type D3841 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec1)
type D3842 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec2)
type D3843 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec3)
type D3844 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec4)
type D3845 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec5)
type D3846 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec6)
type D3847 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec7)
type D3848 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec8)
type D3849 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec4) Dec9)
type D3850 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec0)
type D3851 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec1)
type D3852 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec2)
type D3853 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec3)
type D3854 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec4)
type D3855 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec5)
type D3856 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec6)
type D3857 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec7)
type D3858 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec8)
type D3859 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec5) Dec9)
type D3860 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec0)
type D3861 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec1)
type D3862 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec2)
type D3863 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec3)
type D3864 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec4)
type D3865 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec5)
type D3866 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec6)
type D3867 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec7)
type D3868 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec8)
type D3869 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec6) Dec9)
type D3870 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec0)
type D3871 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec1)
type D3872 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec2)
type D3873 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec3)
type D3874 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec4)
type D3875 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec5)
type D3876 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec6)
type D3877 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec7)
type D3878 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec8)
type D3879 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec7) Dec9)
type D3880 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec0)
type D3881 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec1)
type D3882 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec2)
type D3883 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec3)
type D3884 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec4)
type D3885 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec5)
type D3886 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec6)
type D3887 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec7)
type D3888 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec8)
type D3889 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec8) Dec9)
type D3890 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec0)
type D3891 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec1)
type D3892 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec2)
type D3893 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec3)
type D3894 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec4)
type D3895 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec5)
type D3896 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec6)
type D3897 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec7)
type D3898 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec8)
type D3899 = Dec (:. (:. (:. (:. DecN Dec3) Dec8) Dec9) Dec9)
type D3900 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec0)
type D3901 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec1)
type D3902 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec2)
type D3903 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec3)
type D3904 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec4)
type D3905 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec5)
type D3906 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec6)
type D3907 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec7)
type D3908 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec8)
type D3909 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec0) Dec9)
type D3910 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec0)
type D3911 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec1)
type D3912 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec2)
type D3913 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec3)
type D3914 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec4)
type D3915 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec5)
type D3916 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec6)
type D3917 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec7)
type D3918 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec8)
type D3919 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec1) Dec9)
type D3920 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec0)
type D3921 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec1)
type D3922 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec2)
type D3923 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec3)
type D3924 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec4)
type D3925 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec5)
type D3926 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec6)
type D3927 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec7)
type D3928 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec8)
type D3929 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec2) Dec9)
type D3930 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec0)
type D3931 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec1)
type D3932 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec2)
type D3933 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec3)
type D3934 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec4)
type D3935 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec5)
type D3936 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec6)
type D3937 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec7)
type D3938 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec8)
type D3939 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec3) Dec9)
type D3940 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec0)
type D3941 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec1)
type D3942 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec2)
type D3943 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec3)
type D3944 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec4)
type D3945 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec5)
type D3946 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec6)
type D3947 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec7)
type D3948 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec8)
type D3949 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec4) Dec9)
type D3950 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec0)
type D3951 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec1)
type D3952 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec2)
type D3953 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec3)
type D3954 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec4)
type D3955 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec5)
type D3956 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec6)
type D3957 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec7)
type D3958 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec8)
type D3959 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec5) Dec9)
type D3960 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec0)
type D3961 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec1)
type D3962 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec2)
type D3963 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec3)
type D3964 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec4)
type D3965 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec5)
type D3966 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec6)
type D3967 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec7)
type D3968 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec8)
type D3969 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec6) Dec9)
type D3970 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec0)
type D3971 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec1)
type D3972 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec2)
type D3973 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec3)
type D3974 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec4)
type D3975 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec5)
type D3976 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec6)
type D3977 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec7)
type D3978 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec8)
type D3979 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec7) Dec9)
type D3980 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec0)
type D3981 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec1)
type D3982 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec2)
type D3983 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec3)
type D3984 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec4)
type D3985 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec5)
type D3986 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec6)
type D3987 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec7)
type D3988 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec8)
type D3989 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec8) Dec9)
type D3990 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec0)
type D3991 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec1)
type D3992 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec2)
type D3993 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec3)
type D3994 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec4)
type D3995 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec5)
type D3996 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec6)
type D3997 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec7)
type D3998 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec8)
type D3999 = Dec (:. (:. (:. (:. DecN Dec3) Dec9) Dec9) Dec9)
type D4000 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec0)
type D4001 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec1)
type D4002 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec2)
type D4003 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec3)
type D4004 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec4)
type D4005 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec5)
type D4006 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec6)
type D4007 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec7)
type D4008 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec8)
type D4009 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec0) Dec9)
type D4010 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec0)
type D4011 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec1)
type D4012 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec2)
type D4013 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec3)
type D4014 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec4)
type D4015 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec5)
type D4016 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec6)
type D4017 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec7)
type D4018 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec8)
type D4019 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec1) Dec9)
type D4020 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec0)
type D4021 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec1)
type D4022 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec2)
type D4023 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec3)
type D4024 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec4)
type D4025 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec5)
type D4026 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec6)
type D4027 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec7)
type D4028 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec8)
type D4029 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec2) Dec9)
type D4030 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec0)
type D4031 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec1)
type D4032 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec2)
type D4033 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec3)
type D4034 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec4)
type D4035 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec5)
type D4036 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec6)
type D4037 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec7)
type D4038 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec8)
type D4039 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec3) Dec9)
type D4040 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec0)
type D4041 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec1)
type D4042 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec2)
type D4043 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec3)
type D4044 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec4)
type D4045 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec5)
type D4046 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec6)
type D4047 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec7)
type D4048 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec8)
type D4049 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec4) Dec9)
type D4050 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec0)
type D4051 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec1)
type D4052 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec2)
type D4053 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec3)
type D4054 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec4)
type D4055 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec5)
type D4056 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec6)
type D4057 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec7)
type D4058 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec8)
type D4059 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec5) Dec9)
type D4060 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec0)
type D4061 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec1)
type D4062 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec2)
type D4063 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec3)
type D4064 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec4)
type D4065 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec5)
type D4066 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec6)
type D4067 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec7)
type D4068 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec8)
type D4069 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec6) Dec9)
type D4070 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec0)
type D4071 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec1)
type D4072 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec2)
type D4073 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec3)
type D4074 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec4)
type D4075 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec5)
type D4076 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec6)
type D4077 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec7)
type D4078 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec8)
type D4079 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec7) Dec9)
type D4080 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec0)
type D4081 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec1)
type D4082 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec2)
type D4083 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec3)
type D4084 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec4)
type D4085 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec5)
type D4086 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec6)
type D4087 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec7)
type D4088 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec8)
type D4089 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec8) Dec9)
type D4090 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec0)
type D4091 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec1)
type D4092 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec2)
type D4093 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec3)
type D4094 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec4)
type D4095 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec5)
type D4096 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec6)
type D4097 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec7)
type D4098 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec8)
type D4099 = Dec (:. (:. (:. (:. DecN Dec4) Dec0) Dec9) Dec9)
type D4100 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec0)
type D4101 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec1)
type D4102 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec2)
type D4103 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec3)
type D4104 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec4)
type D4105 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec5)
type D4106 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec6)
type D4107 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec7)
type D4108 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec8)
type D4109 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec0) Dec9)
type D4110 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec0)
type D4111 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec1)
type D4112 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec2)
type D4113 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec3)
type D4114 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec4)
type D4115 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec5)
type D4116 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec6)
type D4117 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec7)
type D4118 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec8)
type D4119 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec1) Dec9)
type D4120 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec0)
type D4121 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec1)
type D4122 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec2)
type D4123 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec3)
type D4124 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec4)
type D4125 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec5)
type D4126 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec6)
type D4127 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec7)
type D4128 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec8)
type D4129 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec2) Dec9)
type D4130 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec0)
type D4131 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec1)
type D4132 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec2)
type D4133 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec3)
type D4134 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec4)
type D4135 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec5)
type D4136 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec6)
type D4137 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec7)
type D4138 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec8)
type D4139 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec3) Dec9)
type D4140 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec0)
type D4141 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec1)
type D4142 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec2)
type D4143 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec3)
type D4144 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec4)
type D4145 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec5)
type D4146 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec6)
type D4147 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec7)
type D4148 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec8)
type D4149 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec4) Dec9)
type D4150 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec0)
type D4151 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec1)
type D4152 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec2)
type D4153 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec3)
type D4154 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec4)
type D4155 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec5)
type D4156 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec6)
type D4157 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec7)
type D4158 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec8)
type D4159 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec5) Dec9)
type D4160 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec0)
type D4161 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec1)
type D4162 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec2)
type D4163 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec3)
type D4164 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec4)
type D4165 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec5)
type D4166 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec6)
type D4167 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec7)
type D4168 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec8)
type D4169 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec6) Dec9)
type D4170 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec0)
type D4171 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec1)
type D4172 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec2)
type D4173 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec3)
type D4174 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec4)
type D4175 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec5)
type D4176 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec6)
type D4177 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec7)
type D4178 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec8)
type D4179 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec7) Dec9)
type D4180 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec0)
type D4181 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec1)
type D4182 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec2)
type D4183 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec3)
type D4184 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec4)
type D4185 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec5)
type D4186 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec6)
type D4187 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec7)
type D4188 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec8)
type D4189 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec8) Dec9)
type D4190 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec0)
type D4191 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec1)
type D4192 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec2)
type D4193 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec3)
type D4194 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec4)
type D4195 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec5)
type D4196 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec6)
type D4197 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec7)
type D4198 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec8)
type D4199 = Dec (:. (:. (:. (:. DecN Dec4) Dec1) Dec9) Dec9)
type D4200 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec0)
type D4201 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec1)
type D4202 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec2)
type D4203 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec3)
type D4204 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec4)
type D4205 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec5)
type D4206 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec6)
type D4207 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec7)
type D4208 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec8)
type D4209 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec0) Dec9)
type D4210 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec0)
type D4211 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec1)
type D4212 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec2)
type D4213 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec3)
type D4214 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec4)
type D4215 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec5)
type D4216 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec6)
type D4217 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec7)
type D4218 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec8)
type D4219 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec1) Dec9)
type D4220 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec0)
type D4221 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec1)
type D4222 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec2)
type D4223 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec3)
type D4224 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec4)
type D4225 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec5)
type D4226 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec6)
type D4227 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec7)
type D4228 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec8)
type D4229 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec2) Dec9)
type D4230 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec0)
type D4231 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec1)
type D4232 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec2)
type D4233 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec3)
type D4234 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec4)
type D4235 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec5)
type D4236 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec6)
type D4237 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec7)
type D4238 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec8)
type D4239 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec3) Dec9)
type D4240 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec0)
type D4241 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec1)
type D4242 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec2)
type D4243 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec3)
type D4244 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec4)
type D4245 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec5)
type D4246 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec6)
type D4247 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec7)
type D4248 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec8)
type D4249 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec4) Dec9)
type D4250 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec0)
type D4251 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec1)
type D4252 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec2)
type D4253 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec3)
type D4254 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec4)
type D4255 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec5)
type D4256 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec6)
type D4257 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec7)
type D4258 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec8)
type D4259 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec5) Dec9)
type D4260 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec0)
type D4261 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec1)
type D4262 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec2)
type D4263 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec3)
type D4264 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec4)
type D4265 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec5)
type D4266 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec6)
type D4267 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec7)
type D4268 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec8)
type D4269 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec6) Dec9)
type D4270 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec0)
type D4271 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec1)
type D4272 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec2)
type D4273 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec3)
type D4274 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec4)
type D4275 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec5)
type D4276 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec6)
type D4277 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec7)
type D4278 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec8)
type D4279 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec7) Dec9)
type D4280 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec0)
type D4281 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec1)
type D4282 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec2)
type D4283 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec3)
type D4284 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec4)
type D4285 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec5)
type D4286 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec6)
type D4287 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec7)
type D4288 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec8)
type D4289 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec8) Dec9)
type D4290 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec0)
type D4291 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec1)
type D4292 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec2)
type D4293 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec3)
type D4294 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec4)
type D4295 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec5)
type D4296 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec6)
type D4297 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec7)
type D4298 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec8)
type D4299 = Dec (:. (:. (:. (:. DecN Dec4) Dec2) Dec9) Dec9)
type D4300 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec0)
type D4301 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec1)
type D4302 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec2)
type D4303 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec3)
type D4304 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec4)
type D4305 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec5)
type D4306 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec6)
type D4307 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec7)
type D4308 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec8)
type D4309 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec0) Dec9)
type D4310 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec0)
type D4311 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec1)
type D4312 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec2)
type D4313 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec3)
type D4314 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec4)
type D4315 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec5)
type D4316 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec6)
type D4317 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec7)
type D4318 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec8)
type D4319 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec1) Dec9)
type D4320 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec0)
type D4321 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec1)
type D4322 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec2)
type D4323 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec3)
type D4324 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec4)
type D4325 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec5)
type D4326 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec6)
type D4327 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec7)
type D4328 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec8)
type D4329 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec2) Dec9)
type D4330 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec0)
type D4331 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec1)
type D4332 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec2)
type D4333 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec3)
type D4334 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec4)
type D4335 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec5)
type D4336 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec6)
type D4337 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec7)
type D4338 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec8)
type D4339 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec3) Dec9)
type D4340 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec0)
type D4341 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec1)
type D4342 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec2)
type D4343 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec3)
type D4344 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec4)
type D4345 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec5)
type D4346 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec6)
type D4347 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec7)
type D4348 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec8)
type D4349 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec4) Dec9)
type D4350 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec0)
type D4351 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec1)
type D4352 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec2)
type D4353 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec3)
type D4354 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec4)
type D4355 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec5)
type D4356 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec6)
type D4357 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec7)
type D4358 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec8)
type D4359 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec5) Dec9)
type D4360 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec0)
type D4361 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec1)
type D4362 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec2)
type D4363 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec3)
type D4364 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec4)
type D4365 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec5)
type D4366 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec6)
type D4367 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec7)
type D4368 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec8)
type D4369 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec6) Dec9)
type D4370 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec0)
type D4371 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec1)
type D4372 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec2)
type D4373 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec3)
type D4374 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec4)
type D4375 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec5)
type D4376 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec6)
type D4377 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec7)
type D4378 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec8)
type D4379 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec7) Dec9)
type D4380 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec0)
type D4381 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec1)
type D4382 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec2)
type D4383 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec3)
type D4384 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec4)
type D4385 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec5)
type D4386 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec6)
type D4387 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec7)
type D4388 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec8)
type D4389 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec8) Dec9)
type D4390 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec0)
type D4391 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec1)
type D4392 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec2)
type D4393 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec3)
type D4394 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec4)
type D4395 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec5)
type D4396 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec6)
type D4397 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec7)
type D4398 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec8)
type D4399 = Dec (:. (:. (:. (:. DecN Dec4) Dec3) Dec9) Dec9)
type D4400 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec0)
type D4401 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec1)
type D4402 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec2)
type D4403 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec3)
type D4404 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec4)
type D4405 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec5)
type D4406 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec6)
type D4407 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec7)
type D4408 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec8)
type D4409 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec0) Dec9)
type D4410 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec0)
type D4411 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec1)
type D4412 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec2)
type D4413 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec3)
type D4414 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec4)
type D4415 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec5)
type D4416 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec6)
type D4417 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec7)
type D4418 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec8)
type D4419 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec1) Dec9)
type D4420 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec0)
type D4421 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec1)
type D4422 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec2)
type D4423 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec3)
type D4424 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec4)
type D4425 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec5)
type D4426 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec6)
type D4427 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec7)
type D4428 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec8)
type D4429 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec2) Dec9)
type D4430 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec0)
type D4431 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec1)
type D4432 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec2)
type D4433 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec3)
type D4434 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec4)
type D4435 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec5)
type D4436 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec6)
type D4437 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec7)
type D4438 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec8)
type D4439 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec3) Dec9)
type D4440 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec0)
type D4441 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec1)
type D4442 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec2)
type D4443 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec3)
type D4444 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec4)
type D4445 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec5)
type D4446 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec6)
type D4447 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec7)
type D4448 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec8)
type D4449 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec4) Dec9)
type D4450 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec0)
type D4451 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec1)
type D4452 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec2)
type D4453 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec3)
type D4454 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec4)
type D4455 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec5)
type D4456 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec6)
type D4457 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec7)
type D4458 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec8)
type D4459 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec5) Dec9)
type D4460 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec0)
type D4461 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec1)
type D4462 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec2)
type D4463 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec3)
type D4464 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec4)
type D4465 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec5)
type D4466 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec6)
type D4467 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec7)
type D4468 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec8)
type D4469 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec6) Dec9)
type D4470 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec0)
type D4471 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec1)
type D4472 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec2)
type D4473 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec3)
type D4474 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec4)
type D4475 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec5)
type D4476 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec6)
type D4477 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec7)
type D4478 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec8)
type D4479 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec7) Dec9)
type D4480 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec0)
type D4481 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec1)
type D4482 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec2)
type D4483 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec3)
type D4484 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec4)
type D4485 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec5)
type D4486 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec6)
type D4487 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec7)
type D4488 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec8)
type D4489 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec8) Dec9)
type D4490 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec0)
type D4491 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec1)
type D4492 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec2)
type D4493 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec3)
type D4494 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec4)
type D4495 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec5)
type D4496 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec6)
type D4497 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec7)
type D4498 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec8)
type D4499 = Dec (:. (:. (:. (:. DecN Dec4) Dec4) Dec9) Dec9)
type D4500 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec0)
type D4501 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec1)
type D4502 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec2)
type D4503 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec3)
type D4504 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec4)
type D4505 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec5)
type D4506 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec6)
type D4507 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec7)
type D4508 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec8)
type D4509 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec0) Dec9)
type D4510 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec0)
type D4511 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec1)
type D4512 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec2)
type D4513 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec3)
type D4514 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec4)
type D4515 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec5)
type D4516 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec6)
type D4517 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec7)
type D4518 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec8)
type D4519 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec1) Dec9)
type D4520 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec0)
type D4521 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec1)
type D4522 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec2)
type D4523 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec3)
type D4524 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec4)
type D4525 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec5)
type D4526 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec6)
type D4527 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec7)
type D4528 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec8)
type D4529 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec2) Dec9)
type D4530 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec0)
type D4531 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec1)
type D4532 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec2)
type D4533 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec3)
type D4534 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec4)
type D4535 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec5)
type D4536 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec6)
type D4537 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec7)
type D4538 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec8)
type D4539 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec3) Dec9)
type D4540 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec0)
type D4541 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec1)
type D4542 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec2)
type D4543 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec3)
type D4544 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec4)
type D4545 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec5)
type D4546 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec6)
type D4547 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec7)
type D4548 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec8)
type D4549 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec4) Dec9)
type D4550 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec0)
type D4551 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec1)
type D4552 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec2)
type D4553 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec3)
type D4554 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec4)
type D4555 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec5)
type D4556 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec6)
type D4557 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec7)
type D4558 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec8)
type D4559 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec5) Dec9)
type D4560 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec0)
type D4561 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec1)
type D4562 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec2)
type D4563 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec3)
type D4564 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec4)
type D4565 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec5)
type D4566 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec6)
type D4567 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec7)
type D4568 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec8)
type D4569 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec6) Dec9)
type D4570 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec0)
type D4571 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec1)
type D4572 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec2)
type D4573 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec3)
type D4574 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec4)
type D4575 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec5)
type D4576 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec6)
type D4577 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec7)
type D4578 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec8)
type D4579 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec7) Dec9)
type D4580 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec0)
type D4581 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec1)
type D4582 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec2)
type D4583 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec3)
type D4584 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec4)
type D4585 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec5)
type D4586 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec6)
type D4587 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec7)
type D4588 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec8)
type D4589 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec8) Dec9)
type D4590 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec0)
type D4591 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec1)
type D4592 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec2)
type D4593 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec3)
type D4594 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec4)
type D4595 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec5)
type D4596 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec6)
type D4597 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec7)
type D4598 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec8)
type D4599 = Dec (:. (:. (:. (:. DecN Dec4) Dec5) Dec9) Dec9)
type D4600 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec0)
type D4601 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec1)
type D4602 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec2)
type D4603 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec3)
type D4604 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec4)
type D4605 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec5)
type D4606 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec6)
type D4607 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec7)
type D4608 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec8)
type D4609 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec0) Dec9)
type D4610 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec0)
type D4611 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec1)
type D4612 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec2)
type D4613 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec3)
type D4614 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec4)
type D4615 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec5)
type D4616 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec6)
type D4617 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec7)
type D4618 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec8)
type D4619 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec1) Dec9)
type D4620 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec0)
type D4621 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec1)
type D4622 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec2)
type D4623 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec3)
type D4624 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec4)
type D4625 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec5)
type D4626 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec6)
type D4627 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec7)
type D4628 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec8)
type D4629 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec2) Dec9)
type D4630 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec0)
type D4631 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec1)
type D4632 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec2)
type D4633 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec3)
type D4634 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec4)
type D4635 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec5)
type D4636 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec6)
type D4637 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec7)
type D4638 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec8)
type D4639 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec3) Dec9)
type D4640 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec0)
type D4641 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec1)
type D4642 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec2)
type D4643 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec3)
type D4644 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec4)
type D4645 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec5)
type D4646 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec6)
type D4647 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec7)
type D4648 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec8)
type D4649 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec4) Dec9)
type D4650 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec0)
type D4651 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec1)
type D4652 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec2)
type D4653 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec3)
type D4654 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec4)
type D4655 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec5)
type D4656 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec6)
type D4657 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec7)
type D4658 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec8)
type D4659 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec5) Dec9)
type D4660 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec0)
type D4661 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec1)
type D4662 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec2)
type D4663 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec3)
type D4664 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec4)
type D4665 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec5)
type D4666 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec6)
type D4667 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec7)
type D4668 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec8)
type D4669 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec6) Dec9)
type D4670 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec0)
type D4671 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec1)
type D4672 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec2)
type D4673 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec3)
type D4674 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec4)
type D4675 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec5)
type D4676 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec6)
type D4677 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec7)
type D4678 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec8)
type D4679 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec7) Dec9)
type D4680 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec0)
type D4681 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec1)
type D4682 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec2)
type D4683 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec3)
type D4684 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec4)
type D4685 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec5)
type D4686 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec6)
type D4687 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec7)
type D4688 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec8)
type D4689 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec8) Dec9)
type D4690 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec0)
type D4691 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec1)
type D4692 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec2)
type D4693 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec3)
type D4694 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec4)
type D4695 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec5)
type D4696 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec6)
type D4697 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec7)
type D4698 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec8)
type D4699 = Dec (:. (:. (:. (:. DecN Dec4) Dec6) Dec9) Dec9)
type D4700 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec0)
type D4701 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec1)
type D4702 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec2)
type D4703 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec3)
type D4704 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec4)
type D4705 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec5)
type D4706 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec6)
type D4707 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec7)
type D4708 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec8)
type D4709 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec0) Dec9)
type D4710 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec0)
type D4711 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec1)
type D4712 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec2)
type D4713 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec3)
type D4714 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec4)
type D4715 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec5)
type D4716 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec6)
type D4717 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec7)
type D4718 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec8)
type D4719 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec1) Dec9)
type D4720 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec0)
type D4721 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec1)
type D4722 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec2)
type D4723 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec3)
type D4724 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec4)
type D4725 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec5)
type D4726 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec6)
type D4727 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec7)
type D4728 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec8)
type D4729 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec2) Dec9)
type D4730 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec0)
type D4731 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec1)
type D4732 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec2)
type D4733 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec3)
type D4734 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec4)
type D4735 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec5)
type D4736 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec6)
type D4737 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec7)
type D4738 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec8)
type D4739 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec3) Dec9)
type D4740 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec0)
type D4741 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec1)
type D4742 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec2)
type D4743 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec3)
type D4744 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec4)
type D4745 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec5)
type D4746 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec6)
type D4747 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec7)
type D4748 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec8)
type D4749 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec4) Dec9)
type D4750 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec0)
type D4751 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec1)
type D4752 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec2)
type D4753 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec3)
type D4754 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec4)
type D4755 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec5)
type D4756 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec6)
type D4757 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec7)
type D4758 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec8)
type D4759 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec5) Dec9)
type D4760 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec0)
type D4761 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec1)
type D4762 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec2)
type D4763 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec3)
type D4764 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec4)
type D4765 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec5)
type D4766 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec6)
type D4767 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec7)
type D4768 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec8)
type D4769 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec6) Dec9)
type D4770 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec0)
type D4771 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec1)
type D4772 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec2)
type D4773 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec3)
type D4774 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec4)
type D4775 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec5)
type D4776 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec6)
type D4777 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec7)
type D4778 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec8)
type D4779 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec7) Dec9)
type D4780 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec0)
type D4781 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec1)
type D4782 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec2)
type D4783 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec3)
type D4784 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec4)
type D4785 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec5)
type D4786 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec6)
type D4787 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec7)
type D4788 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec8)
type D4789 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec8) Dec9)
type D4790 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec0)
type D4791 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec1)
type D4792 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec2)
type D4793 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec3)
type D4794 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec4)
type D4795 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec5)
type D4796 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec6)
type D4797 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec7)
type D4798 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec8)
type D4799 = Dec (:. (:. (:. (:. DecN Dec4) Dec7) Dec9) Dec9)
type D4800 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec0)
type D4801 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec1)
type D4802 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec2)
type D4803 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec3)
type D4804 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec4)
type D4805 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec5)
type D4806 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec6)
type D4807 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec7)
type D4808 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec8)
type D4809 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec0) Dec9)
type D4810 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec0)
type D4811 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec1)
type D4812 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec2)
type D4813 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec3)
type D4814 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec4)
type D4815 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec5)
type D4816 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec6)
type D4817 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec7)
type D4818 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec8)
type D4819 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec1) Dec9)
type D4820 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec0)
type D4821 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec1)
type D4822 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec2)
type D4823 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec3)
type D4824 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec4)
type D4825 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec5)
type D4826 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec6)
type D4827 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec7)
type D4828 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec8)
type D4829 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec2) Dec9)
type D4830 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec0)
type D4831 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec1)
type D4832 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec2)
type D4833 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec3)
type D4834 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec4)
type D4835 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec5)
type D4836 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec6)
type D4837 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec7)
type D4838 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec8)
type D4839 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec3) Dec9)
type D4840 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec0)
type D4841 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec1)
type D4842 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec2)
type D4843 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec3)
type D4844 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec4)
type D4845 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec5)
type D4846 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec6)
type D4847 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec7)
type D4848 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec8)
type D4849 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec4) Dec9)
type D4850 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec0)
type D4851 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec1)
type D4852 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec2)
type D4853 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec3)
type D4854 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec4)
type D4855 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec5)
type D4856 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec6)
type D4857 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec7)
type D4858 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec8)
type D4859 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec5) Dec9)
type D4860 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec0)
type D4861 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec1)
type D4862 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec2)
type D4863 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec3)
type D4864 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec4)
type D4865 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec5)
type D4866 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec6)
type D4867 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec7)
type D4868 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec8)
type D4869 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec6) Dec9)
type D4870 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec0)
type D4871 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec1)
type D4872 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec2)
type D4873 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec3)
type D4874 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec4)
type D4875 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec5)
type D4876 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec6)
type D4877 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec7)
type D4878 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec8)
type D4879 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec7) Dec9)
type D4880 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec0)
type D4881 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec1)
type D4882 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec2)
type D4883 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec3)
type D4884 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec4)
type D4885 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec5)
type D4886 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec6)
type D4887 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec7)
type D4888 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec8)
type D4889 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec8) Dec9)
type D4890 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec0)
type D4891 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec1)
type D4892 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec2)
type D4893 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec3)
type D4894 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec4)
type D4895 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec5)
type D4896 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec6)
type D4897 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec7)
type D4898 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec8)
type D4899 = Dec (:. (:. (:. (:. DecN Dec4) Dec8) Dec9) Dec9)
type D4900 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec0)
type D4901 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec1)
type D4902 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec2)
type D4903 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec3)
type D4904 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec4)
type D4905 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec5)
type D4906 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec6)
type D4907 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec7)
type D4908 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec8)
type D4909 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec0) Dec9)
type D4910 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec0)
type D4911 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec1)
type D4912 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec2)
type D4913 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec3)
type D4914 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec4)
type D4915 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec5)
type D4916 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec6)
type D4917 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec7)
type D4918 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec8)
type D4919 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec1) Dec9)
type D4920 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec0)
type D4921 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec1)
type D4922 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec2)
type D4923 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec3)
type D4924 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec4)
type D4925 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec5)
type D4926 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec6)
type D4927 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec7)
type D4928 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec8)
type D4929 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec2) Dec9)
type D4930 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec0)
type D4931 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec1)
type D4932 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec2)
type D4933 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec3)
type D4934 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec4)
type D4935 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec5)
type D4936 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec6)
type D4937 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec7)
type D4938 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec8)
type D4939 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec3) Dec9)
type D4940 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec0)
type D4941 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec1)
type D4942 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec2)
type D4943 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec3)
type D4944 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec4)
type D4945 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec5)
type D4946 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec6)
type D4947 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec7)
type D4948 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec8)
type D4949 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec4) Dec9)
type D4950 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec0)
type D4951 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec1)
type D4952 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec2)
type D4953 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec3)
type D4954 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec4)
type D4955 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec5)
type D4956 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec6)
type D4957 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec7)
type D4958 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec8)
type D4959 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec5) Dec9)
type D4960 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec0)
type D4961 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec1)
type D4962 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec2)
type D4963 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec3)
type D4964 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec4)
type D4965 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec5)
type D4966 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec6)
type D4967 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec7)
type D4968 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec8)
type D4969 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec6) Dec9)
type D4970 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec0)
type D4971 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec1)
type D4972 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec2)
type D4973 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec3)
type D4974 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec4)
type D4975 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec5)
type D4976 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec6)
type D4977 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec7)
type D4978 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec8)
type D4979 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec7) Dec9)
type D4980 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec0)
type D4981 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec1)
type D4982 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec2)
type D4983 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec3)
type D4984 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec4)
type D4985 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec5)
type D4986 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec6)
type D4987 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec7)
type D4988 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec8)
type D4989 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec8) Dec9)
type D4990 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec0)
type D4991 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec1)
type D4992 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec2)
type D4993 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec3)
type D4994 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec4)
type D4995 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec5)
type D4996 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec6)
type D4997 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec7)
type D4998 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec8)
type D4999 = Dec (:. (:. (:. (:. DecN Dec4) Dec9) Dec9) Dec9)
type D5000 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec0)
type D5001 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec1)
type D5002 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec2)
type D5003 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec3)
type D5004 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec4)
type D5005 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec5)
type D5006 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec6)
type D5007 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec7)
type D5008 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec8)
type D5009 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec0) Dec9)
type D5010 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec0)
type D5011 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec1)
type D5012 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec2)
type D5013 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec3)
type D5014 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec4)
type D5015 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec5)
type D5016 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec6)
type D5017 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec7)
type D5018 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec8)
type D5019 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec1) Dec9)
type D5020 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec0)
type D5021 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec1)
type D5022 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec2)
type D5023 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec3)
type D5024 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec4)
type D5025 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec5)
type D5026 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec6)
type D5027 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec7)
type D5028 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec8)
type D5029 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec2) Dec9)
type D5030 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec0)
type D5031 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec1)
type D5032 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec2)
type D5033 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec3)
type D5034 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec4)
type D5035 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec5)
type D5036 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec6)
type D5037 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec7)
type D5038 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec8)
type D5039 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec3) Dec9)
type D5040 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec0)
type D5041 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec1)
type D5042 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec2)
type D5043 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec3)
type D5044 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec4)
type D5045 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec5)
type D5046 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec6)
type D5047 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec7)
type D5048 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec8)
type D5049 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec4) Dec9)
type D5050 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec0)
type D5051 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec1)
type D5052 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec2)
type D5053 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec3)
type D5054 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec4)
type D5055 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec5)
type D5056 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec6)
type D5057 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec7)
type D5058 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec8)
type D5059 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec5) Dec9)
type D5060 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec0)
type D5061 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec1)
type D5062 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec2)
type D5063 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec3)
type D5064 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec4)
type D5065 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec5)
type D5066 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec6)
type D5067 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec7)
type D5068 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec8)
type D5069 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec6) Dec9)
type D5070 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec0)
type D5071 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec1)
type D5072 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec2)
type D5073 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec3)
type D5074 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec4)
type D5075 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec5)
type D5076 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec6)
type D5077 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec7)
type D5078 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec8)
type D5079 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec7) Dec9)
type D5080 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec0)
type D5081 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec1)
type D5082 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec2)
type D5083 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec3)
type D5084 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec4)
type D5085 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec5)
type D5086 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec6)
type D5087 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec7)
type D5088 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec8)
type D5089 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec8) Dec9)
type D5090 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec0)
type D5091 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec1)
type D5092 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec2)
type D5093 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec3)
type D5094 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec4)
type D5095 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec5)
type D5096 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec6)
type D5097 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec7)
type D5098 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec8)
type D5099 = Dec (:. (:. (:. (:. DecN Dec5) Dec0) Dec9) Dec9)
type D5100 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec0)
type D5101 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec1)
type D5102 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec2)
type D5103 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec3)
type D5104 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec4)
type D5105 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec5)
type D5106 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec6)
type D5107 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec7)
type D5108 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec8)
type D5109 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec0) Dec9)
type D5110 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec0)
type D5111 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec1)
type D5112 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec2)
type D5113 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec3)
type D5114 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec4)
type D5115 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec5)
type D5116 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec6)
type D5117 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec7)
type D5118 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec8)
type D5119 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec1) Dec9)
type D5120 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec0)
type D5121 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec1)
type D5122 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec2)
type D5123 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec3)
type D5124 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec4)
type D5125 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec5)
type D5126 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec6)
type D5127 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec7)
type D5128 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec8)
type D5129 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec2) Dec9)
type D5130 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec0)
type D5131 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec1)
type D5132 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec2)
type D5133 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec3)
type D5134 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec4)
type D5135 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec5)
type D5136 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec6)
type D5137 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec7)
type D5138 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec8)
type D5139 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec3) Dec9)
type D5140 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec0)
type D5141 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec1)
type D5142 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec2)
type D5143 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec3)
type D5144 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec4)
type D5145 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec5)
type D5146 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec6)
type D5147 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec7)
type D5148 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec8)
type D5149 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec4) Dec9)
type D5150 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec0)
type D5151 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec1)
type D5152 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec2)
type D5153 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec3)
type D5154 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec4)
type D5155 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec5)
type D5156 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec6)
type D5157 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec7)
type D5158 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec8)
type D5159 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec5) Dec9)
type D5160 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec0)
type D5161 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec1)
type D5162 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec2)
type D5163 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec3)
type D5164 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec4)
type D5165 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec5)
type D5166 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec6)
type D5167 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec7)
type D5168 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec8)
type D5169 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec6) Dec9)
type D5170 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec0)
type D5171 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec1)
type D5172 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec2)
type D5173 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec3)
type D5174 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec4)
type D5175 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec5)
type D5176 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec6)
type D5177 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec7)
type D5178 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec8)
type D5179 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec7) Dec9)
type D5180 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec0)
type D5181 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec1)
type D5182 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec2)
type D5183 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec3)
type D5184 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec4)
type D5185 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec5)
type D5186 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec6)
type D5187 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec7)
type D5188 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec8)
type D5189 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec8) Dec9)
type D5190 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec0)
type D5191 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec1)
type D5192 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec2)
type D5193 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec3)
type D5194 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec4)
type D5195 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec5)
type D5196 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec6)
type D5197 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec7)
type D5198 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec8)
type D5199 = Dec (:. (:. (:. (:. DecN Dec5) Dec1) Dec9) Dec9)
type D5200 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec0)
type D5201 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec1)
type D5202 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec2)
type D5203 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec3)
type D5204 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec4)
type D5205 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec5)
type D5206 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec6)
type D5207 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec7)
type D5208 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec8)
type D5209 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec0) Dec9)
type D5210 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec0)
type D5211 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec1)
type D5212 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec2)
type D5213 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec3)
type D5214 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec4)
type D5215 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec5)
type D5216 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec6)
type D5217 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec7)
type D5218 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec8)
type D5219 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec1) Dec9)
type D5220 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec0)
type D5221 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec1)
type D5222 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec2)
type D5223 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec3)
type D5224 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec4)
type D5225 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec5)
type D5226 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec6)
type D5227 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec7)
type D5228 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec8)
type D5229 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec2) Dec9)
type D5230 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec0)
type D5231 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec1)
type D5232 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec2)
type D5233 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec3)
type D5234 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec4)
type D5235 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec5)
type D5236 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec6)
type D5237 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec7)
type D5238 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec8)
type D5239 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec3) Dec9)
type D5240 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec0)
type D5241 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec1)
type D5242 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec2)
type D5243 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec3)
type D5244 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec4)
type D5245 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec5)
type D5246 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec6)
type D5247 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec7)
type D5248 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec8)
type D5249 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec4) Dec9)
type D5250 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec0)
type D5251 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec1)
type D5252 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec2)
type D5253 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec3)
type D5254 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec4)
type D5255 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec5)
type D5256 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec6)
type D5257 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec7)
type D5258 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec8)
type D5259 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec5) Dec9)
type D5260 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec0)
type D5261 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec1)
type D5262 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec2)
type D5263 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec3)
type D5264 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec4)
type D5265 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec5)
type D5266 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec6)
type D5267 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec7)
type D5268 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec8)
type D5269 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec6) Dec9)
type D5270 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec0)
type D5271 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec1)
type D5272 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec2)
type D5273 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec3)
type D5274 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec4)
type D5275 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec5)
type D5276 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec6)
type D5277 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec7)
type D5278 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec8)
type D5279 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec7) Dec9)
type D5280 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec0)
type D5281 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec1)
type D5282 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec2)
type D5283 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec3)
type D5284 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec4)
type D5285 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec5)
type D5286 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec6)
type D5287 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec7)
type D5288 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec8)
type D5289 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec8) Dec9)
type D5290 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec0)
type D5291 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec1)
type D5292 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec2)
type D5293 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec3)
type D5294 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec4)
type D5295 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec5)
type D5296 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec6)
type D5297 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec7)
type D5298 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec8)
type D5299 = Dec (:. (:. (:. (:. DecN Dec5) Dec2) Dec9) Dec9)
type D5300 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec0)
type D5301 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec1)
type D5302 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec2)
type D5303 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec3)
type D5304 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec4)
type D5305 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec5)
type D5306 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec6)
type D5307 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec7)
type D5308 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec8)
type D5309 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec0) Dec9)
type D5310 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec0)
type D5311 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec1)
type D5312 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec2)
type D5313 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec3)
type D5314 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec4)
type D5315 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec5)
type D5316 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec6)
type D5317 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec7)
type D5318 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec8)
type D5319 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec1) Dec9)
type D5320 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec0)
type D5321 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec1)
type D5322 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec2)
type D5323 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec3)
type D5324 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec4)
type D5325 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec5)
type D5326 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec6)
type D5327 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec7)
type D5328 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec8)
type D5329 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec2) Dec9)
type D5330 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec0)
type D5331 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec1)
type D5332 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec2)
type D5333 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec3)
type D5334 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec4)
type D5335 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec5)
type D5336 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec6)
type D5337 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec7)
type D5338 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec8)
type D5339 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec3) Dec9)
type D5340 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec0)
type D5341 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec1)
type D5342 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec2)
type D5343 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec3)
type D5344 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec4)
type D5345 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec5)
type D5346 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec6)
type D5347 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec7)
type D5348 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec8)
type D5349 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec4) Dec9)
type D5350 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec0)
type D5351 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec1)
type D5352 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec2)
type D5353 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec3)
type D5354 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec4)
type D5355 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec5)
type D5356 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec6)
type D5357 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec7)
type D5358 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec8)
type D5359 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec5) Dec9)
type D5360 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec0)
type D5361 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec1)
type D5362 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec2)
type D5363 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec3)
type D5364 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec4)
type D5365 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec5)
type D5366 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec6)
type D5367 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec7)
type D5368 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec8)
type D5369 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec6) Dec9)
type D5370 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec0)
type D5371 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec1)
type D5372 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec2)
type D5373 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec3)
type D5374 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec4)
type D5375 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec5)
type D5376 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec6)
type D5377 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec7)
type D5378 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec8)
type D5379 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec7) Dec9)
type D5380 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec0)
type D5381 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec1)
type D5382 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec2)
type D5383 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec3)
type D5384 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec4)
type D5385 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec5)
type D5386 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec6)
type D5387 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec7)
type D5388 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec8)
type D5389 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec8) Dec9)
type D5390 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec0)
type D5391 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec1)
type D5392 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec2)
type D5393 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec3)
type D5394 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec4)
type D5395 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec5)
type D5396 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec6)
type D5397 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec7)
type D5398 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec8)
type D5399 = Dec (:. (:. (:. (:. DecN Dec5) Dec3) Dec9) Dec9)
type D5400 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec0)
type D5401 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec1)
type D5402 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec2)
type D5403 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec3)
type D5404 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec4)
type D5405 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec5)
type D5406 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec6)
type D5407 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec7)
type D5408 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec8)
type D5409 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec0) Dec9)
type D5410 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec0)
type D5411 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec1)
type D5412 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec2)
type D5413 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec3)
type D5414 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec4)
type D5415 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec5)
type D5416 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec6)
type D5417 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec7)
type D5418 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec8)
type D5419 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec1) Dec9)
type D5420 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec0)
type D5421 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec1)
type D5422 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec2)
type D5423 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec3)
type D5424 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec4)
type D5425 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec5)
type D5426 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec6)
type D5427 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec7)
type D5428 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec8)
type D5429 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec2) Dec9)
type D5430 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec0)
type D5431 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec1)
type D5432 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec2)
type D5433 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec3)
type D5434 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec4)
type D5435 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec5)
type D5436 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec6)
type D5437 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec7)
type D5438 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec8)
type D5439 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec3) Dec9)
type D5440 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec0)
type D5441 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec1)
type D5442 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec2)
type D5443 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec3)
type D5444 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec4)
type D5445 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec5)
type D5446 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec6)
type D5447 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec7)
type D5448 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec8)
type D5449 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec4) Dec9)
type D5450 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec0)
type D5451 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec1)
type D5452 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec2)
type D5453 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec3)
type D5454 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec4)
type D5455 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec5)
type D5456 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec6)
type D5457 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec7)
type D5458 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec8)
type D5459 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec5) Dec9)
type D5460 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec0)
type D5461 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec1)
type D5462 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec2)
type D5463 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec3)
type D5464 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec4)
type D5465 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec5)
type D5466 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec6)
type D5467 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec7)
type D5468 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec8)
type D5469 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec6) Dec9)
type D5470 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec0)
type D5471 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec1)
type D5472 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec2)
type D5473 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec3)
type D5474 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec4)
type D5475 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec5)
type D5476 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec6)
type D5477 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec7)
type D5478 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec8)
type D5479 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec7) Dec9)
type D5480 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec0)
type D5481 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec1)
type D5482 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec2)
type D5483 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec3)
type D5484 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec4)
type D5485 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec5)
type D5486 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec6)
type D5487 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec7)
type D5488 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec8)
type D5489 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec8) Dec9)
type D5490 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec0)
type D5491 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec1)
type D5492 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec2)
type D5493 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec3)
type D5494 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec4)
type D5495 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec5)
type D5496 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec6)
type D5497 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec7)
type D5498 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec8)
type D5499 = Dec (:. (:. (:. (:. DecN Dec5) Dec4) Dec9) Dec9)
type D5500 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec0)
type D5501 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec1)
type D5502 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec2)
type D5503 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec3)
type D5504 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec4)
type D5505 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec5)
type D5506 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec6)
type D5507 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec7)
type D5508 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec8)
type D5509 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec0) Dec9)
type D5510 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec0)
type D5511 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec1)
type D5512 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec2)
type D5513 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec3)
type D5514 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec4)
type D5515 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec5)
type D5516 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec6)
type D5517 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec7)
type D5518 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec8)
type D5519 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec1) Dec9)
type D5520 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec0)
type D5521 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec1)
type D5522 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec2)
type D5523 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec3)
type D5524 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec4)
type D5525 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec5)
type D5526 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec6)
type D5527 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec7)
type D5528 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec8)
type D5529 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec2) Dec9)
type D5530 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec0)
type D5531 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec1)
type D5532 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec2)
type D5533 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec3)
type D5534 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec4)
type D5535 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec5)
type D5536 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec6)
type D5537 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec7)
type D5538 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec8)
type D5539 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec3) Dec9)
type D5540 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec0)
type D5541 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec1)
type D5542 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec2)
type D5543 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec3)
type D5544 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec4)
type D5545 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec5)
type D5546 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec6)
type D5547 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec7)
type D5548 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec8)
type D5549 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec4) Dec9)
type D5550 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec0)
type D5551 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec1)
type D5552 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec2)
type D5553 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec3)
type D5554 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec4)
type D5555 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec5)
type D5556 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec6)
type D5557 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec7)
type D5558 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec8)
type D5559 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec5) Dec9)
type D5560 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec0)
type D5561 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec1)
type D5562 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec2)
type D5563 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec3)
type D5564 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec4)
type D5565 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec5)
type D5566 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec6)
type D5567 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec7)
type D5568 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec8)
type D5569 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec6) Dec9)
type D5570 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec0)
type D5571 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec1)
type D5572 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec2)
type D5573 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec3)
type D5574 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec4)
type D5575 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec5)
type D5576 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec6)
type D5577 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec7)
type D5578 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec8)
type D5579 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec7) Dec9)
type D5580 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec0)
type D5581 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec1)
type D5582 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec2)
type D5583 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec3)
type D5584 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec4)
type D5585 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec5)
type D5586 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec6)
type D5587 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec7)
type D5588 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec8)
type D5589 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec8) Dec9)
type D5590 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec0)
type D5591 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec1)
type D5592 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec2)
type D5593 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec3)
type D5594 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec4)
type D5595 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec5)
type D5596 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec6)
type D5597 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec7)
type D5598 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec8)
type D5599 = Dec (:. (:. (:. (:. DecN Dec5) Dec5) Dec9) Dec9)
type D5600 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec0)
type D5601 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec1)
type D5602 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec2)
type D5603 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec3)
type D5604 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec4)
type D5605 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec5)
type D5606 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec6)
type D5607 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec7)
type D5608 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec8)
type D5609 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec0) Dec9)
type D5610 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec0)
type D5611 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec1)
type D5612 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec2)
type D5613 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec3)
type D5614 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec4)
type D5615 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec5)
type D5616 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec6)
type D5617 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec7)
type D5618 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec8)
type D5619 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec1) Dec9)
type D5620 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec0)
type D5621 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec1)
type D5622 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec2)
type D5623 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec3)
type D5624 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec4)
type D5625 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec5)
type D5626 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec6)
type D5627 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec7)
type D5628 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec8)
type D5629 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec2) Dec9)
type D5630 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec0)
type D5631 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec1)
type D5632 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec2)
type D5633 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec3)
type D5634 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec4)
type D5635 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec5)
type D5636 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec6)
type D5637 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec7)
type D5638 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec8)
type D5639 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec3) Dec9)
type D5640 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec0)
type D5641 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec1)
type D5642 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec2)
type D5643 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec3)
type D5644 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec4)
type D5645 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec5)
type D5646 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec6)
type D5647 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec7)
type D5648 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec8)
type D5649 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec4) Dec9)
type D5650 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec0)
type D5651 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec1)
type D5652 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec2)
type D5653 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec3)
type D5654 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec4)
type D5655 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec5)
type D5656 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec6)
type D5657 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec7)
type D5658 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec8)
type D5659 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec5) Dec9)
type D5660 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec0)
type D5661 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec1)
type D5662 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec2)
type D5663 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec3)
type D5664 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec4)
type D5665 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec5)
type D5666 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec6)
type D5667 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec7)
type D5668 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec8)
type D5669 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec6) Dec9)
type D5670 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec0)
type D5671 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec1)
type D5672 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec2)
type D5673 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec3)
type D5674 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec4)
type D5675 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec5)
type D5676 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec6)
type D5677 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec7)
type D5678 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec8)
type D5679 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec7) Dec9)
type D5680 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec0)
type D5681 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec1)
type D5682 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec2)
type D5683 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec3)
type D5684 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec4)
type D5685 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec5)
type D5686 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec6)
type D5687 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec7)
type D5688 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec8)
type D5689 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec8) Dec9)
type D5690 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec0)
type D5691 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec1)
type D5692 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec2)
type D5693 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec3)
type D5694 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec4)
type D5695 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec5)
type D5696 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec6)
type D5697 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec7)
type D5698 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec8)
type D5699 = Dec (:. (:. (:. (:. DecN Dec5) Dec6) Dec9) Dec9)
type D5700 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec0)
type D5701 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec1)
type D5702 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec2)
type D5703 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec3)
type D5704 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec4)
type D5705 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec5)
type D5706 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec6)
type D5707 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec7)
type D5708 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec8)
type D5709 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec0) Dec9)
type D5710 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec0)
type D5711 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec1)
type D5712 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec2)
type D5713 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec3)
type D5714 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec4)
type D5715 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec5)
type D5716 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec6)
type D5717 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec7)
type D5718 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec8)
type D5719 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec1) Dec9)
type D5720 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec0)
type D5721 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec1)
type D5722 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec2)
type D5723 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec3)
type D5724 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec4)
type D5725 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec5)
type D5726 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec6)
type D5727 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec7)
type D5728 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec8)
type D5729 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec2) Dec9)
type D5730 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec0)
type D5731 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec1)
type D5732 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec2)
type D5733 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec3)
type D5734 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec4)
type D5735 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec5)
type D5736 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec6)
type D5737 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec7)
type D5738 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec8)
type D5739 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec3) Dec9)
type D5740 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec0)
type D5741 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec1)
type D5742 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec2)
type D5743 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec3)
type D5744 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec4)
type D5745 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec5)
type D5746 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec6)
type D5747 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec7)
type D5748 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec8)
type D5749 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec4) Dec9)
type D5750 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec0)
type D5751 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec1)
type D5752 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec2)
type D5753 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec3)
type D5754 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec4)
type D5755 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec5)
type D5756 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec6)
type D5757 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec7)
type D5758 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec8)
type D5759 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec5) Dec9)
type D5760 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec0)
type D5761 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec1)
type D5762 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec2)
type D5763 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec3)
type D5764 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec4)
type D5765 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec5)
type D5766 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec6)
type D5767 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec7)
type D5768 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec8)
type D5769 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec6) Dec9)
type D5770 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec0)
type D5771 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec1)
type D5772 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec2)
type D5773 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec3)
type D5774 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec4)
type D5775 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec5)
type D5776 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec6)
type D5777 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec7)
type D5778 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec8)
type D5779 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec7) Dec9)
type D5780 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec0)
type D5781 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec1)
type D5782 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec2)
type D5783 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec3)
type D5784 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec4)
type D5785 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec5)
type D5786 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec6)
type D5787 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec7)
type D5788 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec8)
type D5789 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec8) Dec9)
type D5790 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec0)
type D5791 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec1)
type D5792 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec2)
type D5793 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec3)
type D5794 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec4)
type D5795 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec5)
type D5796 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec6)
type D5797 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec7)
type D5798 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec8)
type D5799 = Dec (:. (:. (:. (:. DecN Dec5) Dec7) Dec9) Dec9)
type D5800 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec0)
type D5801 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec1)
type D5802 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec2)
type D5803 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec3)
type D5804 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec4)
type D5805 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec5)
type D5806 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec6)
type D5807 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec7)
type D5808 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec8)
type D5809 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec0) Dec9)
type D5810 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec0)
type D5811 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec1)
type D5812 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec2)
type D5813 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec3)
type D5814 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec4)
type D5815 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec5)
type D5816 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec6)
type D5817 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec7)
type D5818 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec8)
type D5819 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec1) Dec9)
type D5820 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec0)
type D5821 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec1)
type D5822 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec2)
type D5823 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec3)
type D5824 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec4)
type D5825 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec5)
type D5826 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec6)
type D5827 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec7)
type D5828 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec8)
type D5829 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec2) Dec9)
type D5830 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec0)
type D5831 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec1)
type D5832 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec2)
type D5833 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec3)
type D5834 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec4)
type D5835 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec5)
type D5836 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec6)
type D5837 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec7)
type D5838 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec8)
type D5839 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec3) Dec9)
type D5840 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec0)
type D5841 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec1)
type D5842 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec2)
type D5843 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec3)
type D5844 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec4)
type D5845 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec5)
type D5846 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec6)
type D5847 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec7)
type D5848 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec8)
type D5849 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec4) Dec9)
type D5850 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec0)
type D5851 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec1)
type D5852 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec2)
type D5853 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec3)
type D5854 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec4)
type D5855 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec5)
type D5856 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec6)
type D5857 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec7)
type D5858 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec8)
type D5859 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec5) Dec9)
type D5860 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec0)
type D5861 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec1)
type D5862 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec2)
type D5863 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec3)
type D5864 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec4)
type D5865 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec5)
type D5866 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec6)
type D5867 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec7)
type D5868 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec8)
type D5869 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec6) Dec9)
type D5870 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec0)
type D5871 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec1)
type D5872 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec2)
type D5873 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec3)
type D5874 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec4)
type D5875 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec5)
type D5876 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec6)
type D5877 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec7)
type D5878 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec8)
type D5879 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec7) Dec9)
type D5880 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec0)
type D5881 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec1)
type D5882 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec2)
type D5883 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec3)
type D5884 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec4)
type D5885 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec5)
type D5886 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec6)
type D5887 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec7)
type D5888 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec8)
type D5889 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec8) Dec9)
type D5890 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec0)
type D5891 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec1)
type D5892 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec2)
type D5893 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec3)
type D5894 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec4)
type D5895 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec5)
type D5896 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec6)
type D5897 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec7)
type D5898 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec8)
type D5899 = Dec (:. (:. (:. (:. DecN Dec5) Dec8) Dec9) Dec9)
type D5900 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec0)
type D5901 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec1)
type D5902 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec2)
type D5903 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec3)
type D5904 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec4)
type D5905 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec5)
type D5906 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec6)
type D5907 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec7)
type D5908 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec8)
type D5909 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec0) Dec9)
type D5910 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec0)
type D5911 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec1)
type D5912 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec2)
type D5913 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec3)
type D5914 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec4)
type D5915 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec5)
type D5916 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec6)
type D5917 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec7)
type D5918 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec8)
type D5919 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec1) Dec9)
type D5920 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec0)
type D5921 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec1)
type D5922 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec2)
type D5923 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec3)
type D5924 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec4)
type D5925 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec5)
type D5926 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec6)
type D5927 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec7)
type D5928 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec8)
type D5929 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec2) Dec9)
type D5930 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec0)
type D5931 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec1)
type D5932 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec2)
type D5933 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec3)
type D5934 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec4)
type D5935 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec5)
type D5936 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec6)
type D5937 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec7)
type D5938 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec8)
type D5939 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec3) Dec9)
type D5940 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec0)
type D5941 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec1)
type D5942 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec2)
type D5943 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec3)
type D5944 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec4)
type D5945 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec5)
type D5946 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec6)
type D5947 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec7)
type D5948 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec8)
type D5949 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec4) Dec9)
type D5950 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec0)
type D5951 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec1)
type D5952 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec2)
type D5953 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec3)
type D5954 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec4)
type D5955 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec5)
type D5956 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec6)
type D5957 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec7)
type D5958 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec8)
type D5959 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec5) Dec9)
type D5960 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec0)
type D5961 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec1)
type D5962 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec2)
type D5963 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec3)
type D5964 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec4)
type D5965 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec5)
type D5966 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec6)
type D5967 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec7)
type D5968 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec8)
type D5969 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec6) Dec9)
type D5970 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec0)
type D5971 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec1)
type D5972 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec2)
type D5973 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec3)
type D5974 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec4)
type D5975 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec5)
type D5976 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec6)
type D5977 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec7)
type D5978 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec8)
type D5979 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec7) Dec9)
type D5980 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec0)
type D5981 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec1)
type D5982 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec2)
type D5983 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec3)
type D5984 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec4)
type D5985 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec5)
type D5986 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec6)
type D5987 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec7)
type D5988 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec8)
type D5989 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec8) Dec9)
type D5990 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec0)
type D5991 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec1)
type D5992 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec2)
type D5993 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec3)
type D5994 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec4)
type D5995 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec5)
type D5996 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec6)
type D5997 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec7)
type D5998 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec8)
type D5999 = Dec (:. (:. (:. (:. DecN Dec5) Dec9) Dec9) Dec9)
type D6000 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec0)
type D6001 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec1)
type D6002 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec2)
type D6003 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec3)
type D6004 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec4)
type D6005 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec5)
type D6006 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec6)
type D6007 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec7)
type D6008 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec8)
type D6009 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec0) Dec9)
type D6010 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec0)
type D6011 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec1)
type D6012 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec2)
type D6013 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec3)
type D6014 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec4)
type D6015 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec5)
type D6016 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec6)
type D6017 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec7)
type D6018 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec8)
type D6019 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec1) Dec9)
type D6020 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec0)
type D6021 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec1)
type D6022 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec2)
type D6023 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec3)
type D6024 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec4)
type D6025 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec5)
type D6026 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec6)
type D6027 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec7)
type D6028 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec8)
type D6029 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec2) Dec9)
type D6030 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec0)
type D6031 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec1)
type D6032 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec2)
type D6033 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec3)
type D6034 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec4)
type D6035 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec5)
type D6036 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec6)
type D6037 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec7)
type D6038 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec8)
type D6039 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec3) Dec9)
type D6040 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec0)
type D6041 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec1)
type D6042 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec2)
type D6043 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec3)
type D6044 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec4)
type D6045 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec5)
type D6046 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec6)
type D6047 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec7)
type D6048 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec8)
type D6049 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec4) Dec9)
type D6050 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec0)
type D6051 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec1)
type D6052 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec2)
type D6053 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec3)
type D6054 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec4)
type D6055 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec5)
type D6056 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec6)
type D6057 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec7)
type D6058 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec8)
type D6059 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec5) Dec9)
type D6060 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec0)
type D6061 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec1)
type D6062 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec2)
type D6063 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec3)
type D6064 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec4)
type D6065 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec5)
type D6066 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec6)
type D6067 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec7)
type D6068 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec8)
type D6069 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec6) Dec9)
type D6070 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec0)
type D6071 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec1)
type D6072 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec2)
type D6073 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec3)
type D6074 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec4)
type D6075 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec5)
type D6076 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec6)
type D6077 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec7)
type D6078 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec8)
type D6079 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec7) Dec9)
type D6080 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec0)
type D6081 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec1)
type D6082 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec2)
type D6083 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec3)
type D6084 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec4)
type D6085 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec5)
type D6086 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec6)
type D6087 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec7)
type D6088 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec8)
type D6089 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec8) Dec9)
type D6090 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec0)
type D6091 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec1)
type D6092 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec2)
type D6093 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec3)
type D6094 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec4)
type D6095 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec5)
type D6096 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec6)
type D6097 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec7)
type D6098 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec8)
type D6099 = Dec (:. (:. (:. (:. DecN Dec6) Dec0) Dec9) Dec9)
type D6100 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec0)
type D6101 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec1)
type D6102 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec2)
type D6103 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec3)
type D6104 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec4)
type D6105 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec5)
type D6106 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec6)
type D6107 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec7)
type D6108 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec8)
type D6109 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec0) Dec9)
type D6110 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec0)
type D6111 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec1)
type D6112 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec2)
type D6113 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec3)
type D6114 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec4)
type D6115 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec5)
type D6116 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec6)
type D6117 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec7)
type D6118 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec8)
type D6119 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec1) Dec9)
type D6120 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec0)
type D6121 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec1)
type D6122 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec2)
type D6123 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec3)
type D6124 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec4)
type D6125 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec5)
type D6126 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec6)
type D6127 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec7)
type D6128 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec8)
type D6129 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec2) Dec9)
type D6130 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec0)
type D6131 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec1)
type D6132 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec2)
type D6133 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec3)
type D6134 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec4)
type D6135 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec5)
type D6136 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec6)
type D6137 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec7)
type D6138 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec8)
type D6139 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec3) Dec9)
type D6140 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec0)
type D6141 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec1)
type D6142 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec2)
type D6143 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec3)
type D6144 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec4)
type D6145 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec5)
type D6146 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec6)
type D6147 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec7)
type D6148 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec8)
type D6149 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec4) Dec9)
type D6150 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec0)
type D6151 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec1)
type D6152 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec2)
type D6153 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec3)
type D6154 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec4)
type D6155 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec5)
type D6156 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec6)
type D6157 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec7)
type D6158 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec8)
type D6159 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec5) Dec9)
type D6160 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec0)
type D6161 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec1)
type D6162 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec2)
type D6163 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec3)
type D6164 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec4)
type D6165 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec5)
type D6166 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec6)
type D6167 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec7)
type D6168 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec8)
type D6169 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec6) Dec9)
type D6170 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec0)
type D6171 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec1)
type D6172 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec2)
type D6173 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec3)
type D6174 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec4)
type D6175 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec5)
type D6176 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec6)
type D6177 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec7)
type D6178 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec8)
type D6179 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec7) Dec9)
type D6180 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec0)
type D6181 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec1)
type D6182 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec2)
type D6183 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec3)
type D6184 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec4)
type D6185 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec5)
type D6186 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec6)
type D6187 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec7)
type D6188 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec8)
type D6189 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec8) Dec9)
type D6190 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec0)
type D6191 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec1)
type D6192 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec2)
type D6193 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec3)
type D6194 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec4)
type D6195 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec5)
type D6196 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec6)
type D6197 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec7)
type D6198 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec8)
type D6199 = Dec (:. (:. (:. (:. DecN Dec6) Dec1) Dec9) Dec9)
type D6200 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec0)
type D6201 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec1)
type D6202 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec2)
type D6203 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec3)
type D6204 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec4)
type D6205 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec5)
type D6206 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec6)
type D6207 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec7)
type D6208 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec8)
type D6209 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec0) Dec9)
type D6210 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec0)
type D6211 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec1)
type D6212 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec2)
type D6213 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec3)
type D6214 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec4)
type D6215 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec5)
type D6216 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec6)
type D6217 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec7)
type D6218 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec8)
type D6219 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec1) Dec9)
type D6220 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec0)
type D6221 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec1)
type D6222 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec2)
type D6223 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec3)
type D6224 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec4)
type D6225 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec5)
type D6226 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec6)
type D6227 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec7)
type D6228 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec8)
type D6229 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec2) Dec9)
type D6230 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec0)
type D6231 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec1)
type D6232 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec2)
type D6233 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec3)
type D6234 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec4)
type D6235 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec5)
type D6236 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec6)
type D6237 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec7)
type D6238 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec8)
type D6239 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec3) Dec9)
type D6240 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec0)
type D6241 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec1)
type D6242 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec2)
type D6243 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec3)
type D6244 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec4)
type D6245 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec5)
type D6246 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec6)
type D6247 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec7)
type D6248 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec8)
type D6249 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec4) Dec9)
type D6250 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec0)
type D6251 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec1)
type D6252 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec2)
type D6253 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec3)
type D6254 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec4)
type D6255 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec5)
type D6256 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec6)
type D6257 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec7)
type D6258 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec8)
type D6259 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec5) Dec9)
type D6260 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec0)
type D6261 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec1)
type D6262 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec2)
type D6263 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec3)
type D6264 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec4)
type D6265 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec5)
type D6266 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec6)
type D6267 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec7)
type D6268 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec8)
type D6269 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec6) Dec9)
type D6270 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec0)
type D6271 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec1)
type D6272 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec2)
type D6273 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec3)
type D6274 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec4)
type D6275 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec5)
type D6276 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec6)
type D6277 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec7)
type D6278 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec8)
type D6279 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec7) Dec9)
type D6280 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec0)
type D6281 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec1)
type D6282 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec2)
type D6283 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec3)
type D6284 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec4)
type D6285 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec5)
type D6286 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec6)
type D6287 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec7)
type D6288 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec8)
type D6289 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec8) Dec9)
type D6290 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec0)
type D6291 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec1)
type D6292 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec2)
type D6293 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec3)
type D6294 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec4)
type D6295 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec5)
type D6296 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec6)
type D6297 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec7)
type D6298 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec8)
type D6299 = Dec (:. (:. (:. (:. DecN Dec6) Dec2) Dec9) Dec9)
type D6300 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec0)
type D6301 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec1)
type D6302 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec2)
type D6303 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec3)
type D6304 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec4)
type D6305 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec5)
type D6306 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec6)
type D6307 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec7)
type D6308 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec8)
type D6309 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec0) Dec9)
type D6310 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec0)
type D6311 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec1)
type D6312 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec2)
type D6313 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec3)
type D6314 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec4)
type D6315 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec5)
type D6316 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec6)
type D6317 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec7)
type D6318 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec8)
type D6319 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec1) Dec9)
type D6320 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec0)
type D6321 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec1)
type D6322 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec2)
type D6323 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec3)
type D6324 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec4)
type D6325 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec5)
type D6326 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec6)
type D6327 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec7)
type D6328 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec8)
type D6329 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec2) Dec9)
type D6330 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec0)
type D6331 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec1)
type D6332 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec2)
type D6333 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec3)
type D6334 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec4)
type D6335 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec5)
type D6336 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec6)
type D6337 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec7)
type D6338 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec8)
type D6339 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec3) Dec9)
type D6340 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec0)
type D6341 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec1)
type D6342 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec2)
type D6343 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec3)
type D6344 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec4)
type D6345 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec5)
type D6346 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec6)
type D6347 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec7)
type D6348 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec8)
type D6349 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec4) Dec9)
type D6350 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec0)
type D6351 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec1)
type D6352 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec2)
type D6353 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec3)
type D6354 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec4)
type D6355 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec5)
type D6356 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec6)
type D6357 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec7)
type D6358 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec8)
type D6359 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec5) Dec9)
type D6360 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec0)
type D6361 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec1)
type D6362 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec2)
type D6363 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec3)
type D6364 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec4)
type D6365 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec5)
type D6366 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec6)
type D6367 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec7)
type D6368 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec8)
type D6369 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec6) Dec9)
type D6370 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec0)
type D6371 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec1)
type D6372 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec2)
type D6373 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec3)
type D6374 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec4)
type D6375 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec5)
type D6376 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec6)
type D6377 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec7)
type D6378 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec8)
type D6379 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec7) Dec9)
type D6380 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec0)
type D6381 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec1)
type D6382 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec2)
type D6383 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec3)
type D6384 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec4)
type D6385 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec5)
type D6386 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec6)
type D6387 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec7)
type D6388 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec8)
type D6389 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec8) Dec9)
type D6390 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec0)
type D6391 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec1)
type D6392 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec2)
type D6393 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec3)
type D6394 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec4)
type D6395 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec5)
type D6396 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec6)
type D6397 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec7)
type D6398 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec8)
type D6399 = Dec (:. (:. (:. (:. DecN Dec6) Dec3) Dec9) Dec9)
type D6400 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec0)
type D6401 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec1)
type D6402 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec2)
type D6403 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec3)
type D6404 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec4)
type D6405 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec5)
type D6406 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec6)
type D6407 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec7)
type D6408 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec8)
type D6409 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec0) Dec9)
type D6410 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec0)
type D6411 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec1)
type D6412 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec2)
type D6413 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec3)
type D6414 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec4)
type D6415 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec5)
type D6416 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec6)
type D6417 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec7)
type D6418 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec8)
type D6419 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec1) Dec9)
type D6420 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec0)
type D6421 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec1)
type D6422 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec2)
type D6423 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec3)
type D6424 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec4)
type D6425 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec5)
type D6426 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec6)
type D6427 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec7)
type D6428 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec8)
type D6429 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec2) Dec9)
type D6430 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec0)
type D6431 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec1)
type D6432 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec2)
type D6433 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec3)
type D6434 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec4)
type D6435 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec5)
type D6436 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec6)
type D6437 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec7)
type D6438 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec8)
type D6439 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec3) Dec9)
type D6440 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec0)
type D6441 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec1)
type D6442 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec2)
type D6443 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec3)
type D6444 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec4)
type D6445 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec5)
type D6446 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec6)
type D6447 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec7)
type D6448 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec8)
type D6449 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec4) Dec9)
type D6450 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec0)
type D6451 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec1)
type D6452 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec2)
type D6453 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec3)
type D6454 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec4)
type D6455 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec5)
type D6456 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec6)
type D6457 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec7)
type D6458 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec8)
type D6459 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec5) Dec9)
type D6460 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec0)
type D6461 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec1)
type D6462 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec2)
type D6463 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec3)
type D6464 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec4)
type D6465 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec5)
type D6466 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec6)
type D6467 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec7)
type D6468 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec8)
type D6469 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec6) Dec9)
type D6470 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec0)
type D6471 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec1)
type D6472 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec2)
type D6473 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec3)
type D6474 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec4)
type D6475 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec5)
type D6476 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec6)
type D6477 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec7)
type D6478 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec8)
type D6479 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec7) Dec9)
type D6480 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec0)
type D6481 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec1)
type D6482 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec2)
type D6483 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec3)
type D6484 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec4)
type D6485 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec5)
type D6486 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec6)
type D6487 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec7)
type D6488 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec8)
type D6489 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec8) Dec9)
type D6490 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec0)
type D6491 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec1)
type D6492 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec2)
type D6493 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec3)
type D6494 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec4)
type D6495 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec5)
type D6496 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec6)
type D6497 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec7)
type D6498 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec8)
type D6499 = Dec (:. (:. (:. (:. DecN Dec6) Dec4) Dec9) Dec9)
type D6500 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec0)
type D6501 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec1)
type D6502 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec2)
type D6503 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec3)
type D6504 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec4)
type D6505 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec5)
type D6506 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec6)
type D6507 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec7)
type D6508 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec8)
type D6509 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec0) Dec9)
type D6510 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec0)
type D6511 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec1)
type D6512 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec2)
type D6513 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec3)
type D6514 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec4)
type D6515 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec5)
type D6516 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec6)
type D6517 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec7)
type D6518 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec8)
type D6519 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec1) Dec9)
type D6520 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec0)
type D6521 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec1)
type D6522 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec2)
type D6523 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec3)
type D6524 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec4)
type D6525 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec5)
type D6526 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec6)
type D6527 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec7)
type D6528 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec8)
type D6529 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec2) Dec9)
type D6530 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec0)
type D6531 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec1)
type D6532 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec2)
type D6533 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec3)
type D6534 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec4)
type D6535 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec5)
type D6536 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec6)
type D6537 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec7)
type D6538 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec8)
type D6539 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec3) Dec9)
type D6540 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec0)
type D6541 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec1)
type D6542 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec2)
type D6543 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec3)
type D6544 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec4)
type D6545 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec5)
type D6546 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec6)
type D6547 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec7)
type D6548 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec8)
type D6549 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec4) Dec9)
type D6550 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec0)
type D6551 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec1)
type D6552 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec2)
type D6553 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec3)
type D6554 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec4)
type D6555 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec5)
type D6556 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec6)
type D6557 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec7)
type D6558 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec8)
type D6559 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec5) Dec9)
type D6560 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec0)
type D6561 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec1)
type D6562 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec2)
type D6563 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec3)
type D6564 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec4)
type D6565 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec5)
type D6566 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec6)
type D6567 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec7)
type D6568 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec8)
type D6569 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec6) Dec9)
type D6570 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec0)
type D6571 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec1)
type D6572 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec2)
type D6573 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec3)
type D6574 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec4)
type D6575 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec5)
type D6576 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec6)
type D6577 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec7)
type D6578 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec8)
type D6579 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec7) Dec9)
type D6580 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec0)
type D6581 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec1)
type D6582 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec2)
type D6583 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec3)
type D6584 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec4)
type D6585 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec5)
type D6586 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec6)
type D6587 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec7)
type D6588 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec8)
type D6589 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec8) Dec9)
type D6590 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec0)
type D6591 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec1)
type D6592 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec2)
type D6593 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec3)
type D6594 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec4)
type D6595 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec5)
type D6596 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec6)
type D6597 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec7)
type D6598 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec8)
type D6599 = Dec (:. (:. (:. (:. DecN Dec6) Dec5) Dec9) Dec9)
type D6600 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec0)
type D6601 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec1)
type D6602 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec2)
type D6603 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec3)
type D6604 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec4)
type D6605 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec5)
type D6606 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec6)
type D6607 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec7)
type D6608 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec8)
type D6609 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec0) Dec9)
type D6610 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec0)
type D6611 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec1)
type D6612 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec2)
type D6613 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec3)
type D6614 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec4)
type D6615 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec5)
type D6616 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec6)
type D6617 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec7)
type D6618 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec8)
type D6619 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec1) Dec9)
type D6620 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec0)
type D6621 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec1)
type D6622 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec2)
type D6623 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec3)
type D6624 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec4)
type D6625 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec5)
type D6626 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec6)
type D6627 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec7)
type D6628 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec8)
type D6629 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec2) Dec9)
type D6630 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec0)
type D6631 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec1)
type D6632 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec2)
type D6633 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec3)
type D6634 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec4)
type D6635 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec5)
type D6636 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec6)
type D6637 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec7)
type D6638 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec8)
type D6639 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec3) Dec9)
type D6640 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec0)
type D6641 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec1)
type D6642 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec2)
type D6643 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec3)
type D6644 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec4)
type D6645 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec5)
type D6646 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec6)
type D6647 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec7)
type D6648 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec8)
type D6649 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec4) Dec9)
type D6650 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec0)
type D6651 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec1)
type D6652 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec2)
type D6653 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec3)
type D6654 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec4)
type D6655 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec5)
type D6656 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec6)
type D6657 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec7)
type D6658 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec8)
type D6659 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec5) Dec9)
type D6660 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec0)
type D6661 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec1)
type D6662 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec2)
type D6663 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec3)
type D6664 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec4)
type D6665 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec5)
type D6666 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec6)
type D6667 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec7)
type D6668 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec8)
type D6669 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec6) Dec9)
type D6670 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec0)
type D6671 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec1)
type D6672 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec2)
type D6673 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec3)
type D6674 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec4)
type D6675 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec5)
type D6676 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec6)
type D6677 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec7)
type D6678 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec8)
type D6679 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec7) Dec9)
type D6680 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec0)
type D6681 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec1)
type D6682 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec2)
type D6683 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec3)
type D6684 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec4)
type D6685 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec5)
type D6686 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec6)
type D6687 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec7)
type D6688 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec8)
type D6689 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec8) Dec9)
type D6690 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec0)
type D6691 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec1)
type D6692 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec2)
type D6693 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec3)
type D6694 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec4)
type D6695 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec5)
type D6696 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec6)
type D6697 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec7)
type D6698 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec8)
type D6699 = Dec (:. (:. (:. (:. DecN Dec6) Dec6) Dec9) Dec9)
type D6700 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec0)
type D6701 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec1)
type D6702 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec2)
type D6703 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec3)
type D6704 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec4)
type D6705 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec5)
type D6706 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec6)
type D6707 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec7)
type D6708 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec8)
type D6709 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec0) Dec9)
type D6710 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec0)
type D6711 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec1)
type D6712 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec2)
type D6713 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec3)
type D6714 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec4)
type D6715 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec5)
type D6716 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec6)
type D6717 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec7)
type D6718 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec8)
type D6719 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec1) Dec9)
type D6720 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec0)
type D6721 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec1)
type D6722 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec2)
type D6723 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec3)
type D6724 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec4)
type D6725 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec5)
type D6726 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec6)
type D6727 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec7)
type D6728 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec8)
type D6729 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec2) Dec9)
type D6730 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec0)
type D6731 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec1)
type D6732 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec2)
type D6733 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec3)
type D6734 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec4)
type D6735 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec5)
type D6736 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec6)
type D6737 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec7)
type D6738 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec8)
type D6739 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec3) Dec9)
type D6740 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec0)
type D6741 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec1)
type D6742 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec2)
type D6743 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec3)
type D6744 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec4)
type D6745 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec5)
type D6746 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec6)
type D6747 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec7)
type D6748 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec8)
type D6749 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec4) Dec9)
type D6750 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec0)
type D6751 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec1)
type D6752 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec2)
type D6753 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec3)
type D6754 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec4)
type D6755 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec5)
type D6756 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec6)
type D6757 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec7)
type D6758 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec8)
type D6759 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec5) Dec9)
type D6760 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec0)
type D6761 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec1)
type D6762 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec2)
type D6763 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec3)
type D6764 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec4)
type D6765 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec5)
type D6766 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec6)
type D6767 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec7)
type D6768 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec8)
type D6769 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec6) Dec9)
type D6770 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec0)
type D6771 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec1)
type D6772 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec2)
type D6773 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec3)
type D6774 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec4)
type D6775 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec5)
type D6776 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec6)
type D6777 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec7)
type D6778 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec8)
type D6779 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec7) Dec9)
type D6780 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec0)
type D6781 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec1)
type D6782 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec2)
type D6783 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec3)
type D6784 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec4)
type D6785 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec5)
type D6786 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec6)
type D6787 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec7)
type D6788 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec8)
type D6789 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec8) Dec9)
type D6790 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec0)
type D6791 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec1)
type D6792 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec2)
type D6793 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec3)
type D6794 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec4)
type D6795 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec5)
type D6796 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec6)
type D6797 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec7)
type D6798 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec8)
type D6799 = Dec (:. (:. (:. (:. DecN Dec6) Dec7) Dec9) Dec9)
type D6800 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec0)
type D6801 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec1)
type D6802 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec2)
type D6803 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec3)
type D6804 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec4)
type D6805 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec5)
type D6806 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec6)
type D6807 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec7)
type D6808 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec8)
type D6809 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec0) Dec9)
type D6810 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec0)
type D6811 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec1)
type D6812 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec2)
type D6813 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec3)
type D6814 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec4)
type D6815 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec5)
type D6816 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec6)
type D6817 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec7)
type D6818 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec8)
type D6819 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec1) Dec9)
type D6820 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec0)
type D6821 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec1)
type D6822 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec2)
type D6823 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec3)
type D6824 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec4)
type D6825 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec5)
type D6826 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec6)
type D6827 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec7)
type D6828 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec8)
type D6829 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec2) Dec9)
type D6830 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec0)
type D6831 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec1)
type D6832 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec2)
type D6833 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec3)
type D6834 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec4)
type D6835 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec5)
type D6836 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec6)
type D6837 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec7)
type D6838 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec8)
type D6839 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec3) Dec9)
type D6840 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec0)
type D6841 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec1)
type D6842 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec2)
type D6843 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec3)
type D6844 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec4)
type D6845 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec5)
type D6846 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec6)
type D6847 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec7)
type D6848 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec8)
type D6849 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec4) Dec9)
type D6850 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec0)
type D6851 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec1)
type D6852 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec2)
type D6853 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec3)
type D6854 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec4)
type D6855 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec5)
type D6856 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec6)
type D6857 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec7)
type D6858 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec8)
type D6859 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec5) Dec9)
type D6860 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec0)
type D6861 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec1)
type D6862 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec2)
type D6863 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec3)
type D6864 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec4)
type D6865 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec5)
type D6866 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec6)
type D6867 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec7)
type D6868 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec8)
type D6869 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec6) Dec9)
type D6870 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec0)
type D6871 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec1)
type D6872 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec2)
type D6873 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec3)
type D6874 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec4)
type D6875 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec5)
type D6876 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec6)
type D6877 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec7)
type D6878 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec8)
type D6879 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec7) Dec9)
type D6880 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec0)
type D6881 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec1)
type D6882 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec2)
type D6883 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec3)
type D6884 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec4)
type D6885 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec5)
type D6886 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec6)
type D6887 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec7)
type D6888 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec8)
type D6889 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec8) Dec9)
type D6890 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec0)
type D6891 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec1)
type D6892 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec2)
type D6893 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec3)
type D6894 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec4)
type D6895 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec5)
type D6896 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec6)
type D6897 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec7)
type D6898 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec8)
type D6899 = Dec (:. (:. (:. (:. DecN Dec6) Dec8) Dec9) Dec9)
type D6900 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec0)
type D6901 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec1)
type D6902 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec2)
type D6903 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec3)
type D6904 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec4)
type D6905 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec5)
type D6906 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec6)
type D6907 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec7)
type D6908 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec8)
type D6909 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec0) Dec9)
type D6910 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec0)
type D6911 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec1)
type D6912 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec2)
type D6913 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec3)
type D6914 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec4)
type D6915 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec5)
type D6916 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec6)
type D6917 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec7)
type D6918 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec8)
type D6919 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec1) Dec9)
type D6920 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec0)
type D6921 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec1)
type D6922 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec2)
type D6923 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec3)
type D6924 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec4)
type D6925 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec5)
type D6926 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec6)
type D6927 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec7)
type D6928 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec8)
type D6929 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec2) Dec9)
type D6930 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec0)
type D6931 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec1)
type D6932 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec2)
type D6933 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec3)
type D6934 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec4)
type D6935 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec5)
type D6936 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec6)
type D6937 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec7)
type D6938 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec8)
type D6939 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec3) Dec9)
type D6940 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec0)
type D6941 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec1)
type D6942 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec2)
type D6943 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec3)
type D6944 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec4)
type D6945 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec5)
type D6946 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec6)
type D6947 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec7)
type D6948 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec8)
type D6949 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec4) Dec9)
type D6950 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec0)
type D6951 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec1)
type D6952 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec2)
type D6953 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec3)
type D6954 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec4)
type D6955 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec5)
type D6956 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec6)
type D6957 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec7)
type D6958 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec8)
type D6959 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec5) Dec9)
type D6960 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec0)
type D6961 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec1)
type D6962 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec2)
type D6963 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec3)
type D6964 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec4)
type D6965 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec5)
type D6966 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec6)
type D6967 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec7)
type D6968 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec8)
type D6969 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec6) Dec9)
type D6970 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec0)
type D6971 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec1)
type D6972 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec2)
type D6973 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec3)
type D6974 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec4)
type D6975 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec5)
type D6976 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec6)
type D6977 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec7)
type D6978 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec8)
type D6979 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec7) Dec9)
type D6980 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec0)
type D6981 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec1)
type D6982 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec2)
type D6983 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec3)
type D6984 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec4)
type D6985 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec5)
type D6986 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec6)
type D6987 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec7)
type D6988 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec8)
type D6989 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec8) Dec9)
type D6990 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec0)
type D6991 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec1)
type D6992 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec2)
type D6993 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec3)
type D6994 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec4)
type D6995 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec5)
type D6996 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec6)
type D6997 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec7)
type D6998 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec8)
type D6999 = Dec (:. (:. (:. (:. DecN Dec6) Dec9) Dec9) Dec9)
type D7000 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec0)
type D7001 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec1)
type D7002 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec2)
type D7003 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec3)
type D7004 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec4)
type D7005 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec5)
type D7006 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec6)
type D7007 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec7)
type D7008 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec8)
type D7009 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec0) Dec9)
type D7010 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec0)
type D7011 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec1)
type D7012 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec2)
type D7013 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec3)
type D7014 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec4)
type D7015 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec5)
type D7016 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec6)
type D7017 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec7)
type D7018 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec8)
type D7019 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec1) Dec9)
type D7020 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec0)
type D7021 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec1)
type D7022 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec2)
type D7023 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec3)
type D7024 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec4)
type D7025 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec5)
type D7026 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec6)
type D7027 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec7)
type D7028 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec8)
type D7029 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec2) Dec9)
type D7030 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec0)
type D7031 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec1)
type D7032 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec2)
type D7033 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec3)
type D7034 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec4)
type D7035 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec5)
type D7036 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec6)
type D7037 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec7)
type D7038 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec8)
type D7039 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec3) Dec9)
type D7040 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec0)
type D7041 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec1)
type D7042 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec2)
type D7043 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec3)
type D7044 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec4)
type D7045 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec5)
type D7046 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec6)
type D7047 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec7)
type D7048 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec8)
type D7049 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec4) Dec9)
type D7050 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec0)
type D7051 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec1)
type D7052 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec2)
type D7053 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec3)
type D7054 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec4)
type D7055 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec5)
type D7056 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec6)
type D7057 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec7)
type D7058 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec8)
type D7059 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec5) Dec9)
type D7060 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec0)
type D7061 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec1)
type D7062 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec2)
type D7063 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec3)
type D7064 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec4)
type D7065 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec5)
type D7066 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec6)
type D7067 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec7)
type D7068 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec8)
type D7069 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec6) Dec9)
type D7070 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec0)
type D7071 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec1)
type D7072 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec2)
type D7073 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec3)
type D7074 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec4)
type D7075 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec5)
type D7076 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec6)
type D7077 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec7)
type D7078 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec8)
type D7079 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec7) Dec9)
type D7080 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec0)
type D7081 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec1)
type D7082 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec2)
type D7083 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec3)
type D7084 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec4)
type D7085 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec5)
type D7086 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec6)
type D7087 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec7)
type D7088 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec8)
type D7089 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec8) Dec9)
type D7090 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec0)
type D7091 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec1)
type D7092 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec2)
type D7093 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec3)
type D7094 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec4)
type D7095 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec5)
type D7096 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec6)
type D7097 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec7)
type D7098 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec8)
type D7099 = Dec (:. (:. (:. (:. DecN Dec7) Dec0) Dec9) Dec9)
type D7100 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec0)
type D7101 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec1)
type D7102 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec2)
type D7103 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec3)
type D7104 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec4)
type D7105 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec5)
type D7106 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec6)
type D7107 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec7)
type D7108 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec8)
type D7109 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec0) Dec9)
type D7110 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec0)
type D7111 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec1)
type D7112 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec2)
type D7113 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec3)
type D7114 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec4)
type D7115 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec5)
type D7116 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec6)
type D7117 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec7)
type D7118 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec8)
type D7119 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec1) Dec9)
type D7120 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec0)
type D7121 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec1)
type D7122 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec2)
type D7123 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec3)
type D7124 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec4)
type D7125 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec5)
type D7126 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec6)
type D7127 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec7)
type D7128 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec8)
type D7129 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec2) Dec9)
type D7130 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec0)
type D7131 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec1)
type D7132 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec2)
type D7133 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec3)
type D7134 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec4)
type D7135 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec5)
type D7136 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec6)
type D7137 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec7)
type D7138 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec8)
type D7139 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec3) Dec9)
type D7140 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec0)
type D7141 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec1)
type D7142 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec2)
type D7143 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec3)
type D7144 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec4)
type D7145 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec5)
type D7146 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec6)
type D7147 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec7)
type D7148 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec8)
type D7149 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec4) Dec9)
type D7150 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec0)
type D7151 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec1)
type D7152 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec2)
type D7153 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec3)
type D7154 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec4)
type D7155 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec5)
type D7156 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec6)
type D7157 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec7)
type D7158 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec8)
type D7159 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec5) Dec9)
type D7160 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec0)
type D7161 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec1)
type D7162 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec2)
type D7163 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec3)
type D7164 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec4)
type D7165 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec5)
type D7166 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec6)
type D7167 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec7)
type D7168 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec8)
type D7169 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec6) Dec9)
type D7170 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec0)
type D7171 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec1)
type D7172 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec2)
type D7173 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec3)
type D7174 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec4)
type D7175 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec5)
type D7176 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec6)
type D7177 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec7)
type D7178 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec8)
type D7179 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec7) Dec9)
type D7180 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec0)
type D7181 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec1)
type D7182 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec2)
type D7183 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec3)
type D7184 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec4)
type D7185 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec5)
type D7186 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec6)
type D7187 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec7)
type D7188 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec8)
type D7189 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec8) Dec9)
type D7190 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec0)
type D7191 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec1)
type D7192 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec2)
type D7193 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec3)
type D7194 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec4)
type D7195 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec5)
type D7196 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec6)
type D7197 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec7)
type D7198 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec8)
type D7199 = Dec (:. (:. (:. (:. DecN Dec7) Dec1) Dec9) Dec9)
type D7200 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec0)
type D7201 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec1)
type D7202 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec2)
type D7203 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec3)
type D7204 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec4)
type D7205 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec5)
type D7206 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec6)
type D7207 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec7)
type D7208 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec8)
type D7209 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec0) Dec9)
type D7210 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec0)
type D7211 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec1)
type D7212 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec2)
type D7213 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec3)
type D7214 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec4)
type D7215 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec5)
type D7216 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec6)
type D7217 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec7)
type D7218 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec8)
type D7219 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec1) Dec9)
type D7220 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec0)
type D7221 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec1)
type D7222 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec2)
type D7223 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec3)
type D7224 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec4)
type D7225 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec5)
type D7226 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec6)
type D7227 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec7)
type D7228 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec8)
type D7229 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec2) Dec9)
type D7230 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec0)
type D7231 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec1)
type D7232 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec2)
type D7233 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec3)
type D7234 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec4)
type D7235 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec5)
type D7236 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec6)
type D7237 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec7)
type D7238 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec8)
type D7239 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec3) Dec9)
type D7240 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec0)
type D7241 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec1)
type D7242 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec2)
type D7243 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec3)
type D7244 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec4)
type D7245 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec5)
type D7246 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec6)
type D7247 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec7)
type D7248 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec8)
type D7249 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec4) Dec9)
type D7250 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec0)
type D7251 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec1)
type D7252 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec2)
type D7253 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec3)
type D7254 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec4)
type D7255 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec5)
type D7256 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec6)
type D7257 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec7)
type D7258 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec8)
type D7259 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec5) Dec9)
type D7260 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec0)
type D7261 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec1)
type D7262 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec2)
type D7263 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec3)
type D7264 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec4)
type D7265 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec5)
type D7266 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec6)
type D7267 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec7)
type D7268 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec8)
type D7269 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec6) Dec9)
type D7270 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec0)
type D7271 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec1)
type D7272 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec2)
type D7273 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec3)
type D7274 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec4)
type D7275 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec5)
type D7276 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec6)
type D7277 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec7)
type D7278 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec8)
type D7279 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec7) Dec9)
type D7280 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec0)
type D7281 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec1)
type D7282 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec2)
type D7283 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec3)
type D7284 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec4)
type D7285 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec5)
type D7286 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec6)
type D7287 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec7)
type D7288 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec8)
type D7289 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec8) Dec9)
type D7290 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec0)
type D7291 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec1)
type D7292 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec2)
type D7293 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec3)
type D7294 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec4)
type D7295 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec5)
type D7296 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec6)
type D7297 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec7)
type D7298 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec8)
type D7299 = Dec (:. (:. (:. (:. DecN Dec7) Dec2) Dec9) Dec9)
type D7300 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec0)
type D7301 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec1)
type D7302 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec2)
type D7303 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec3)
type D7304 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec4)
type D7305 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec5)
type D7306 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec6)
type D7307 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec7)
type D7308 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec8)
type D7309 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec0) Dec9)
type D7310 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec0)
type D7311 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec1)
type D7312 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec2)
type D7313 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec3)
type D7314 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec4)
type D7315 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec5)
type D7316 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec6)
type D7317 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec7)
type D7318 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec8)
type D7319 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec1) Dec9)
type D7320 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec0)
type D7321 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec1)
type D7322 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec2)
type D7323 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec3)
type D7324 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec4)
type D7325 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec5)
type D7326 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec6)
type D7327 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec7)
type D7328 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec8)
type D7329 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec2) Dec9)
type D7330 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec0)
type D7331 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec1)
type D7332 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec2)
type D7333 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec3)
type D7334 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec4)
type D7335 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec5)
type D7336 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec6)
type D7337 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec7)
type D7338 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec8)
type D7339 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec3) Dec9)
type D7340 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec0)
type D7341 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec1)
type D7342 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec2)
type D7343 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec3)
type D7344 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec4)
type D7345 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec5)
type D7346 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec6)
type D7347 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec7)
type D7348 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec8)
type D7349 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec4) Dec9)
type D7350 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec0)
type D7351 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec1)
type D7352 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec2)
type D7353 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec3)
type D7354 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec4)
type D7355 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec5)
type D7356 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec6)
type D7357 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec7)
type D7358 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec8)
type D7359 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec5) Dec9)
type D7360 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec0)
type D7361 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec1)
type D7362 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec2)
type D7363 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec3)
type D7364 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec4)
type D7365 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec5)
type D7366 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec6)
type D7367 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec7)
type D7368 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec8)
type D7369 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec6) Dec9)
type D7370 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec0)
type D7371 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec1)
type D7372 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec2)
type D7373 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec3)
type D7374 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec4)
type D7375 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec5)
type D7376 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec6)
type D7377 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec7)
type D7378 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec8)
type D7379 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec7) Dec9)
type D7380 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec0)
type D7381 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec1)
type D7382 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec2)
type D7383 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec3)
type D7384 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec4)
type D7385 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec5)
type D7386 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec6)
type D7387 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec7)
type D7388 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec8)
type D7389 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec8) Dec9)
type D7390 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec0)
type D7391 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec1)
type D7392 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec2)
type D7393 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec3)
type D7394 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec4)
type D7395 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec5)
type D7396 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec6)
type D7397 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec7)
type D7398 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec8)
type D7399 = Dec (:. (:. (:. (:. DecN Dec7) Dec3) Dec9) Dec9)
type D7400 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec0)
type D7401 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec1)
type D7402 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec2)
type D7403 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec3)
type D7404 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec4)
type D7405 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec5)
type D7406 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec6)
type D7407 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec7)
type D7408 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec8)
type D7409 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec0) Dec9)
type D7410 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec0)
type D7411 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec1)
type D7412 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec2)
type D7413 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec3)
type D7414 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec4)
type D7415 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec5)
type D7416 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec6)
type D7417 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec7)
type D7418 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec8)
type D7419 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec1) Dec9)
type D7420 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec0)
type D7421 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec1)
type D7422 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec2)
type D7423 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec3)
type D7424 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec4)
type D7425 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec5)
type D7426 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec6)
type D7427 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec7)
type D7428 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec8)
type D7429 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec2) Dec9)
type D7430 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec0)
type D7431 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec1)
type D7432 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec2)
type D7433 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec3)
type D7434 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec4)
type D7435 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec5)
type D7436 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec6)
type D7437 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec7)
type D7438 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec8)
type D7439 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec3) Dec9)
type D7440 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec0)
type D7441 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec1)
type D7442 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec2)
type D7443 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec3)
type D7444 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec4)
type D7445 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec5)
type D7446 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec6)
type D7447 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec7)
type D7448 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec8)
type D7449 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec4) Dec9)
type D7450 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec0)
type D7451 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec1)
type D7452 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec2)
type D7453 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec3)
type D7454 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec4)
type D7455 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec5)
type D7456 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec6)
type D7457 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec7)
type D7458 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec8)
type D7459 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec5) Dec9)
type D7460 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec0)
type D7461 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec1)
type D7462 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec2)
type D7463 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec3)
type D7464 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec4)
type D7465 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec5)
type D7466 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec6)
type D7467 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec7)
type D7468 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec8)
type D7469 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec6) Dec9)
type D7470 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec0)
type D7471 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec1)
type D7472 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec2)
type D7473 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec3)
type D7474 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec4)
type D7475 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec5)
type D7476 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec6)
type D7477 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec7)
type D7478 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec8)
type D7479 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec7) Dec9)
type D7480 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec0)
type D7481 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec1)
type D7482 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec2)
type D7483 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec3)
type D7484 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec4)
type D7485 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec5)
type D7486 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec6)
type D7487 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec7)
type D7488 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec8)
type D7489 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec8) Dec9)
type D7490 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec0)
type D7491 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec1)
type D7492 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec2)
type D7493 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec3)
type D7494 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec4)
type D7495 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec5)
type D7496 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec6)
type D7497 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec7)
type D7498 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec8)
type D7499 = Dec (:. (:. (:. (:. DecN Dec7) Dec4) Dec9) Dec9)
type D7500 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec0)
type D7501 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec1)
type D7502 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec2)
type D7503 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec3)
type D7504 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec4)
type D7505 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec5)
type D7506 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec6)
type D7507 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec7)
type D7508 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec8)
type D7509 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec0) Dec9)
type D7510 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec0)
type D7511 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec1)
type D7512 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec2)
type D7513 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec3)
type D7514 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec4)
type D7515 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec5)
type D7516 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec6)
type D7517 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec7)
type D7518 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec8)
type D7519 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec1) Dec9)
type D7520 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec0)
type D7521 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec1)
type D7522 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec2)
type D7523 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec3)
type D7524 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec4)
type D7525 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec5)
type D7526 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec6)
type D7527 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec7)
type D7528 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec8)
type D7529 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec2) Dec9)
type D7530 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec0)
type D7531 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec1)
type D7532 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec2)
type D7533 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec3)
type D7534 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec4)
type D7535 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec5)
type D7536 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec6)
type D7537 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec7)
type D7538 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec8)
type D7539 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec3) Dec9)
type D7540 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec0)
type D7541 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec1)
type D7542 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec2)
type D7543 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec3)
type D7544 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec4)
type D7545 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec5)
type D7546 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec6)
type D7547 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec7)
type D7548 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec8)
type D7549 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec4) Dec9)
type D7550 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec0)
type D7551 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec1)
type D7552 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec2)
type D7553 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec3)
type D7554 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec4)
type D7555 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec5)
type D7556 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec6)
type D7557 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec7)
type D7558 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec8)
type D7559 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec5) Dec9)
type D7560 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec0)
type D7561 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec1)
type D7562 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec2)
type D7563 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec3)
type D7564 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec4)
type D7565 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec5)
type D7566 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec6)
type D7567 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec7)
type D7568 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec8)
type D7569 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec6) Dec9)
type D7570 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec0)
type D7571 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec1)
type D7572 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec2)
type D7573 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec3)
type D7574 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec4)
type D7575 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec5)
type D7576 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec6)
type D7577 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec7)
type D7578 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec8)
type D7579 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec7) Dec9)
type D7580 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec0)
type D7581 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec1)
type D7582 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec2)
type D7583 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec3)
type D7584 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec4)
type D7585 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec5)
type D7586 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec6)
type D7587 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec7)
type D7588 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec8)
type D7589 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec8) Dec9)
type D7590 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec0)
type D7591 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec1)
type D7592 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec2)
type D7593 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec3)
type D7594 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec4)
type D7595 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec5)
type D7596 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec6)
type D7597 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec7)
type D7598 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec8)
type D7599 = Dec (:. (:. (:. (:. DecN Dec7) Dec5) Dec9) Dec9)
type D7600 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec0)
type D7601 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec1)
type D7602 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec2)
type D7603 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec3)
type D7604 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec4)
type D7605 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec5)
type D7606 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec6)
type D7607 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec7)
type D7608 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec8)
type D7609 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec0) Dec9)
type D7610 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec0)
type D7611 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec1)
type D7612 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec2)
type D7613 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec3)
type D7614 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec4)
type D7615 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec5)
type D7616 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec6)
type D7617 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec7)
type D7618 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec8)
type D7619 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec1) Dec9)
type D7620 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec0)
type D7621 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec1)
type D7622 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec2)
type D7623 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec3)
type D7624 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec4)
type D7625 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec5)
type D7626 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec6)
type D7627 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec7)
type D7628 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec8)
type D7629 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec2) Dec9)
type D7630 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec0)
type D7631 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec1)
type D7632 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec2)
type D7633 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec3)
type D7634 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec4)
type D7635 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec5)
type D7636 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec6)
type D7637 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec7)
type D7638 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec8)
type D7639 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec3) Dec9)
type D7640 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec0)
type D7641 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec1)
type D7642 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec2)
type D7643 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec3)
type D7644 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec4)
type D7645 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec5)
type D7646 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec6)
type D7647 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec7)
type D7648 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec8)
type D7649 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec4) Dec9)
type D7650 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec0)
type D7651 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec1)
type D7652 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec2)
type D7653 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec3)
type D7654 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec4)
type D7655 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec5)
type D7656 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec6)
type D7657 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec7)
type D7658 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec8)
type D7659 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec5) Dec9)
type D7660 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec0)
type D7661 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec1)
type D7662 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec2)
type D7663 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec3)
type D7664 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec4)
type D7665 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec5)
type D7666 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec6)
type D7667 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec7)
type D7668 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec8)
type D7669 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec6) Dec9)
type D7670 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec0)
type D7671 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec1)
type D7672 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec2)
type D7673 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec3)
type D7674 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec4)
type D7675 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec5)
type D7676 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec6)
type D7677 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec7)
type D7678 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec8)
type D7679 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec7) Dec9)
type D7680 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec0)
type D7681 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec1)
type D7682 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec2)
type D7683 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec3)
type D7684 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec4)
type D7685 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec5)
type D7686 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec6)
type D7687 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec7)
type D7688 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec8)
type D7689 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec8) Dec9)
type D7690 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec0)
type D7691 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec1)
type D7692 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec2)
type D7693 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec3)
type D7694 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec4)
type D7695 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec5)
type D7696 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec6)
type D7697 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec7)
type D7698 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec8)
type D7699 = Dec (:. (:. (:. (:. DecN Dec7) Dec6) Dec9) Dec9)
type D7700 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec0)
type D7701 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec1)
type D7702 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec2)
type D7703 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec3)
type D7704 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec4)
type D7705 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec5)
type D7706 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec6)
type D7707 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec7)
type D7708 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec8)
type D7709 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec0) Dec9)
type D7710 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec0)
type D7711 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec1)
type D7712 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec2)
type D7713 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec3)
type D7714 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec4)
type D7715 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec5)
type D7716 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec6)
type D7717 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec7)
type D7718 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec8)
type D7719 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec1) Dec9)
type D7720 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec0)
type D7721 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec1)
type D7722 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec2)
type D7723 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec3)
type D7724 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec4)
type D7725 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec5)
type D7726 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec6)
type D7727 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec7)
type D7728 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec8)
type D7729 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec2) Dec9)
type D7730 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec0)
type D7731 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec1)
type D7732 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec2)
type D7733 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec3)
type D7734 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec4)
type D7735 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec5)
type D7736 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec6)
type D7737 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec7)
type D7738 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec8)
type D7739 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec3) Dec9)
type D7740 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec0)
type D7741 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec1)
type D7742 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec2)
type D7743 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec3)
type D7744 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec4)
type D7745 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec5)
type D7746 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec6)
type D7747 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec7)
type D7748 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec8)
type D7749 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec4) Dec9)
type D7750 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec0)
type D7751 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec1)
type D7752 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec2)
type D7753 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec3)
type D7754 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec4)
type D7755 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec5)
type D7756 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec6)
type D7757 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec7)
type D7758 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec8)
type D7759 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec5) Dec9)
type D7760 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec0)
type D7761 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec1)
type D7762 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec2)
type D7763 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec3)
type D7764 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec4)
type D7765 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec5)
type D7766 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec6)
type D7767 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec7)
type D7768 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec8)
type D7769 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec6) Dec9)
type D7770 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec0)
type D7771 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec1)
type D7772 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec2)
type D7773 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec3)
type D7774 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec4)
type D7775 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec5)
type D7776 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec6)
type D7777 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec7)
type D7778 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec8)
type D7779 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec7) Dec9)
type D7780 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec0)
type D7781 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec1)
type D7782 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec2)
type D7783 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec3)
type D7784 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec4)
type D7785 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec5)
type D7786 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec6)
type D7787 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec7)
type D7788 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec8)
type D7789 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec8) Dec9)
type D7790 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec0)
type D7791 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec1)
type D7792 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec2)
type D7793 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec3)
type D7794 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec4)
type D7795 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec5)
type D7796 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec6)
type D7797 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec7)
type D7798 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec8)
type D7799 = Dec (:. (:. (:. (:. DecN Dec7) Dec7) Dec9) Dec9)
type D7800 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec0)
type D7801 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec1)
type D7802 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec2)
type D7803 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec3)
type D7804 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec4)
type D7805 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec5)
type D7806 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec6)
type D7807 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec7)
type D7808 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec8)
type D7809 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec0) Dec9)
type D7810 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec0)
type D7811 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec1)
type D7812 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec2)
type D7813 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec3)
type D7814 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec4)
type D7815 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec5)
type D7816 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec6)
type D7817 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec7)
type D7818 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec8)
type D7819 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec1) Dec9)
type D7820 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec0)
type D7821 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec1)
type D7822 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec2)
type D7823 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec3)
type D7824 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec4)
type D7825 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec5)
type D7826 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec6)
type D7827 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec7)
type D7828 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec8)
type D7829 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec2) Dec9)
type D7830 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec0)
type D7831 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec1)
type D7832 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec2)
type D7833 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec3)
type D7834 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec4)
type D7835 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec5)
type D7836 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec6)
type D7837 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec7)
type D7838 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec8)
type D7839 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec3) Dec9)
type D7840 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec0)
type D7841 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec1)
type D7842 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec2)
type D7843 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec3)
type D7844 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec4)
type D7845 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec5)
type D7846 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec6)
type D7847 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec7)
type D7848 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec8)
type D7849 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec4) Dec9)
type D7850 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec0)
type D7851 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec1)
type D7852 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec2)
type D7853 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec3)
type D7854 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec4)
type D7855 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec5)
type D7856 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec6)
type D7857 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec7)
type D7858 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec8)
type D7859 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec5) Dec9)
type D7860 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec0)
type D7861 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec1)
type D7862 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec2)
type D7863 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec3)
type D7864 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec4)
type D7865 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec5)
type D7866 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec6)
type D7867 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec7)
type D7868 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec8)
type D7869 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec6) Dec9)
type D7870 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec0)
type D7871 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec1)
type D7872 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec2)
type D7873 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec3)
type D7874 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec4)
type D7875 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec5)
type D7876 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec6)
type D7877 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec7)
type D7878 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec8)
type D7879 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec7) Dec9)
type D7880 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec0)
type D7881 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec1)
type D7882 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec2)
type D7883 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec3)
type D7884 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec4)
type D7885 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec5)
type D7886 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec6)
type D7887 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec7)
type D7888 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec8)
type D7889 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec8) Dec9)
type D7890 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec0)
type D7891 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec1)
type D7892 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec2)
type D7893 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec3)
type D7894 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec4)
type D7895 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec5)
type D7896 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec6)
type D7897 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec7)
type D7898 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec8)
type D7899 = Dec (:. (:. (:. (:. DecN Dec7) Dec8) Dec9) Dec9)
type D7900 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec0)
type D7901 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec1)
type D7902 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec2)
type D7903 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec3)
type D7904 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec4)
type D7905 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec5)
type D7906 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec6)
type D7907 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec7)
type D7908 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec8)
type D7909 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec0) Dec9)
type D7910 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec0)
type D7911 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec1)
type D7912 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec2)
type D7913 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec3)
type D7914 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec4)
type D7915 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec5)
type D7916 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec6)
type D7917 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec7)
type D7918 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec8)
type D7919 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec1) Dec9)
type D7920 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec0)
type D7921 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec1)
type D7922 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec2)
type D7923 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec3)
type D7924 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec4)
type D7925 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec5)
type D7926 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec6)
type D7927 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec7)
type D7928 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec8)
type D7929 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec2) Dec9)
type D7930 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec0)
type D7931 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec1)
type D7932 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec2)
type D7933 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec3)
type D7934 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec4)
type D7935 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec5)
type D7936 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec6)
type D7937 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec7)
type D7938 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec8)
type D7939 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec3) Dec9)
type D7940 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec0)
type D7941 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec1)
type D7942 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec2)
type D7943 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec3)
type D7944 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec4)
type D7945 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec5)
type D7946 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec6)
type D7947 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec7)
type D7948 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec8)
type D7949 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec4) Dec9)
type D7950 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec0)
type D7951 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec1)
type D7952 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec2)
type D7953 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec3)
type D7954 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec4)
type D7955 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec5)
type D7956 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec6)
type D7957 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec7)
type D7958 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec8)
type D7959 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec5) Dec9)
type D7960 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec0)
type D7961 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec1)
type D7962 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec2)
type D7963 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec3)
type D7964 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec4)
type D7965 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec5)
type D7966 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec6)
type D7967 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec7)
type D7968 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec8)
type D7969 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec6) Dec9)
type D7970 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec0)
type D7971 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec1)
type D7972 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec2)
type D7973 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec3)
type D7974 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec4)
type D7975 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec5)
type D7976 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec6)
type D7977 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec7)
type D7978 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec8)
type D7979 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec7) Dec9)
type D7980 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec0)
type D7981 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec1)
type D7982 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec2)
type D7983 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec3)
type D7984 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec4)
type D7985 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec5)
type D7986 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec6)
type D7987 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec7)
type D7988 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec8)
type D7989 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec8) Dec9)
type D7990 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec0)
type D7991 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec1)
type D7992 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec2)
type D7993 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec3)
type D7994 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec4)
type D7995 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec5)
type D7996 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec6)
type D7997 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec7)
type D7998 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec8)
type D7999 = Dec (:. (:. (:. (:. DecN Dec7) Dec9) Dec9) Dec9)
type D8000 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec0)
type D8001 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec1)
type D8002 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec2)
type D8003 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec3)
type D8004 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec4)
type D8005 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec5)
type D8006 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec6)
type D8007 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec7)
type D8008 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec8)
type D8009 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec0) Dec9)
type D8010 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec0)
type D8011 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec1)
type D8012 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec2)
type D8013 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec3)
type D8014 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec4)
type D8015 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec5)
type D8016 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec6)
type D8017 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec7)
type D8018 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec8)
type D8019 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec1) Dec9)
type D8020 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec0)
type D8021 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec1)
type D8022 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec2)
type D8023 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec3)
type D8024 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec4)
type D8025 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec5)
type D8026 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec6)
type D8027 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec7)
type D8028 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec8)
type D8029 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec2) Dec9)
type D8030 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec0)
type D8031 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec1)
type D8032 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec2)
type D8033 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec3)
type D8034 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec4)
type D8035 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec5)
type D8036 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec6)
type D8037 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec7)
type D8038 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec8)
type D8039 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec3) Dec9)
type D8040 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec0)
type D8041 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec1)
type D8042 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec2)
type D8043 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec3)
type D8044 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec4)
type D8045 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec5)
type D8046 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec6)
type D8047 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec7)
type D8048 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec8)
type D8049 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec4) Dec9)
type D8050 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec0)
type D8051 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec1)
type D8052 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec2)
type D8053 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec3)
type D8054 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec4)
type D8055 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec5)
type D8056 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec6)
type D8057 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec7)
type D8058 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec8)
type D8059 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec5) Dec9)
type D8060 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec0)
type D8061 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec1)
type D8062 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec2)
type D8063 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec3)
type D8064 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec4)
type D8065 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec5)
type D8066 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec6)
type D8067 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec7)
type D8068 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec8)
type D8069 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec6) Dec9)
type D8070 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec0)
type D8071 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec1)
type D8072 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec2)
type D8073 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec3)
type D8074 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec4)
type D8075 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec5)
type D8076 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec6)
type D8077 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec7)
type D8078 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec8)
type D8079 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec7) Dec9)
type D8080 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec0)
type D8081 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec1)
type D8082 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec2)
type D8083 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec3)
type D8084 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec4)
type D8085 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec5)
type D8086 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec6)
type D8087 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec7)
type D8088 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec8)
type D8089 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec8) Dec9)
type D8090 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec0)
type D8091 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec1)
type D8092 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec2)
type D8093 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec3)
type D8094 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec4)
type D8095 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec5)
type D8096 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec6)
type D8097 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec7)
type D8098 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec8)
type D8099 = Dec (:. (:. (:. (:. DecN Dec8) Dec0) Dec9) Dec9)
type D8100 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec0)
type D8101 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec1)
type D8102 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec2)
type D8103 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec3)
type D8104 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec4)
type D8105 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec5)
type D8106 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec6)
type D8107 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec7)
type D8108 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec8)
type D8109 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec0) Dec9)
type D8110 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec0)
type D8111 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec1)
type D8112 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec2)
type D8113 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec3)
type D8114 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec4)
type D8115 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec5)
type D8116 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec6)
type D8117 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec7)
type D8118 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec8)
type D8119 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec1) Dec9)
type D8120 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec0)
type D8121 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec1)
type D8122 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec2)
type D8123 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec3)
type D8124 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec4)
type D8125 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec5)
type D8126 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec6)
type D8127 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec7)
type D8128 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec8)
type D8129 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec2) Dec9)
type D8130 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec0)
type D8131 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec1)
type D8132 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec2)
type D8133 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec3)
type D8134 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec4)
type D8135 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec5)
type D8136 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec6)
type D8137 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec7)
type D8138 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec8)
type D8139 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec3) Dec9)
type D8140 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec0)
type D8141 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec1)
type D8142 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec2)
type D8143 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec3)
type D8144 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec4)
type D8145 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec5)
type D8146 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec6)
type D8147 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec7)
type D8148 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec8)
type D8149 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec4) Dec9)
type D8150 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec0)
type D8151 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec1)
type D8152 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec2)
type D8153 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec3)
type D8154 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec4)
type D8155 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec5)
type D8156 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec6)
type D8157 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec7)
type D8158 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec8)
type D8159 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec5) Dec9)
type D8160 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec0)
type D8161 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec1)
type D8162 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec2)
type D8163 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec3)
type D8164 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec4)
type D8165 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec5)
type D8166 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec6)
type D8167 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec7)
type D8168 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec8)
type D8169 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec6) Dec9)
type D8170 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec0)
type D8171 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec1)
type D8172 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec2)
type D8173 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec3)
type D8174 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec4)
type D8175 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec5)
type D8176 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec6)
type D8177 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec7)
type D8178 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec8)
type D8179 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec7) Dec9)
type D8180 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec0)
type D8181 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec1)
type D8182 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec2)
type D8183 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec3)
type D8184 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec4)
type D8185 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec5)
type D8186 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec6)
type D8187 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec7)
type D8188 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec8)
type D8189 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec8) Dec9)
type D8190 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec0)
type D8191 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec1)
type D8192 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec2)
type D8193 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec3)
type D8194 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec4)
type D8195 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec5)
type D8196 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec6)
type D8197 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec7)
type D8198 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec8)
type D8199 = Dec (:. (:. (:. (:. DecN Dec8) Dec1) Dec9) Dec9)
type D8200 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec0)
type D8201 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec1)
type D8202 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec2)
type D8203 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec3)
type D8204 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec4)
type D8205 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec5)
type D8206 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec6)
type D8207 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec7)
type D8208 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec8)
type D8209 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec0) Dec9)
type D8210 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec0)
type D8211 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec1)
type D8212 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec2)
type D8213 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec3)
type D8214 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec4)
type D8215 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec5)
type D8216 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec6)
type D8217 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec7)
type D8218 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec8)
type D8219 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec1) Dec9)
type D8220 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec0)
type D8221 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec1)
type D8222 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec2)
type D8223 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec3)
type D8224 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec4)
type D8225 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec5)
type D8226 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec6)
type D8227 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec7)
type D8228 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec8)
type D8229 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec2) Dec9)
type D8230 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec0)
type D8231 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec1)
type D8232 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec2)
type D8233 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec3)
type D8234 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec4)
type D8235 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec5)
type D8236 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec6)
type D8237 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec7)
type D8238 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec8)
type D8239 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec3) Dec9)
type D8240 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec0)
type D8241 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec1)
type D8242 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec2)
type D8243 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec3)
type D8244 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec4)
type D8245 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec5)
type D8246 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec6)
type D8247 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec7)
type D8248 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec8)
type D8249 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec4) Dec9)
type D8250 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec0)
type D8251 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec1)
type D8252 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec2)
type D8253 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec3)
type D8254 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec4)
type D8255 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec5)
type D8256 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec6)
type D8257 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec7)
type D8258 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec8)
type D8259 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec5) Dec9)
type D8260 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec0)
type D8261 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec1)
type D8262 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec2)
type D8263 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec3)
type D8264 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec4)
type D8265 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec5)
type D8266 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec6)
type D8267 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec7)
type D8268 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec8)
type D8269 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec6) Dec9)
type D8270 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec0)
type D8271 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec1)
type D8272 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec2)
type D8273 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec3)
type D8274 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec4)
type D8275 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec5)
type D8276 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec6)
type D8277 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec7)
type D8278 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec8)
type D8279 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec7) Dec9)
type D8280 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec0)
type D8281 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec1)
type D8282 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec2)
type D8283 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec3)
type D8284 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec4)
type D8285 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec5)
type D8286 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec6)
type D8287 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec7)
type D8288 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec8)
type D8289 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec8) Dec9)
type D8290 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec0)
type D8291 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec1)
type D8292 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec2)
type D8293 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec3)
type D8294 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec4)
type D8295 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec5)
type D8296 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec6)
type D8297 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec7)
type D8298 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec8)
type D8299 = Dec (:. (:. (:. (:. DecN Dec8) Dec2) Dec9) Dec9)
type D8300 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec0)
type D8301 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec1)
type D8302 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec2)
type D8303 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec3)
type D8304 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec4)
type D8305 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec5)
type D8306 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec6)
type D8307 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec7)
type D8308 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec8)
type D8309 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec0) Dec9)
type D8310 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec0)
type D8311 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec1)
type D8312 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec2)
type D8313 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec3)
type D8314 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec4)
type D8315 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec5)
type D8316 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec6)
type D8317 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec7)
type D8318 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec8)
type D8319 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec1) Dec9)
type D8320 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec0)
type D8321 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec1)
type D8322 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec2)
type D8323 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec3)
type D8324 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec4)
type D8325 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec5)
type D8326 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec6)
type D8327 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec7)
type D8328 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec8)
type D8329 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec2) Dec9)
type D8330 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec0)
type D8331 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec1)
type D8332 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec2)
type D8333 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec3)
type D8334 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec4)
type D8335 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec5)
type D8336 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec6)
type D8337 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec7)
type D8338 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec8)
type D8339 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec3) Dec9)
type D8340 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec0)
type D8341 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec1)
type D8342 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec2)
type D8343 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec3)
type D8344 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec4)
type D8345 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec5)
type D8346 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec6)
type D8347 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec7)
type D8348 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec8)
type D8349 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec4) Dec9)
type D8350 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec0)
type D8351 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec1)
type D8352 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec2)
type D8353 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec3)
type D8354 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec4)
type D8355 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec5)
type D8356 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec6)
type D8357 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec7)
type D8358 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec8)
type D8359 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec5) Dec9)
type D8360 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec0)
type D8361 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec1)
type D8362 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec2)
type D8363 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec3)
type D8364 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec4)
type D8365 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec5)
type D8366 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec6)
type D8367 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec7)
type D8368 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec8)
type D8369 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec6) Dec9)
type D8370 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec0)
type D8371 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec1)
type D8372 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec2)
type D8373 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec3)
type D8374 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec4)
type D8375 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec5)
type D8376 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec6)
type D8377 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec7)
type D8378 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec8)
type D8379 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec7) Dec9)
type D8380 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec0)
type D8381 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec1)
type D8382 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec2)
type D8383 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec3)
type D8384 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec4)
type D8385 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec5)
type D8386 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec6)
type D8387 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec7)
type D8388 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec8)
type D8389 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec8) Dec9)
type D8390 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec0)
type D8391 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec1)
type D8392 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec2)
type D8393 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec3)
type D8394 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec4)
type D8395 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec5)
type D8396 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec6)
type D8397 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec7)
type D8398 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec8)
type D8399 = Dec (:. (:. (:. (:. DecN Dec8) Dec3) Dec9) Dec9)
type D8400 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec0)
type D8401 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec1)
type D8402 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec2)
type D8403 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec3)
type D8404 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec4)
type D8405 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec5)
type D8406 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec6)
type D8407 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec7)
type D8408 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec8)
type D8409 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec0) Dec9)
type D8410 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec0)
type D8411 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec1)
type D8412 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec2)
type D8413 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec3)
type D8414 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec4)
type D8415 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec5)
type D8416 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec6)
type D8417 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec7)
type D8418 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec8)
type D8419 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec1) Dec9)
type D8420 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec0)
type D8421 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec1)
type D8422 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec2)
type D8423 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec3)
type D8424 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec4)
type D8425 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec5)
type D8426 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec6)
type D8427 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec7)
type D8428 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec8)
type D8429 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec2) Dec9)
type D8430 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec0)
type D8431 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec1)
type D8432 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec2)
type D8433 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec3)
type D8434 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec4)
type D8435 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec5)
type D8436 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec6)
type D8437 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec7)
type D8438 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec8)
type D8439 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec3) Dec9)
type D8440 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec0)
type D8441 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec1)
type D8442 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec2)
type D8443 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec3)
type D8444 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec4)
type D8445 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec5)
type D8446 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec6)
type D8447 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec7)
type D8448 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec8)
type D8449 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec4) Dec9)
type D8450 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec0)
type D8451 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec1)
type D8452 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec2)
type D8453 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec3)
type D8454 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec4)
type D8455 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec5)
type D8456 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec6)
type D8457 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec7)
type D8458 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec8)
type D8459 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec5) Dec9)
type D8460 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec0)
type D8461 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec1)
type D8462 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec2)
type D8463 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec3)
type D8464 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec4)
type D8465 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec5)
type D8466 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec6)
type D8467 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec7)
type D8468 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec8)
type D8469 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec6) Dec9)
type D8470 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec0)
type D8471 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec1)
type D8472 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec2)
type D8473 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec3)
type D8474 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec4)
type D8475 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec5)
type D8476 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec6)
type D8477 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec7)
type D8478 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec8)
type D8479 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec7) Dec9)
type D8480 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec0)
type D8481 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec1)
type D8482 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec2)
type D8483 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec3)
type D8484 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec4)
type D8485 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec5)
type D8486 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec6)
type D8487 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec7)
type D8488 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec8)
type D8489 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec8) Dec9)
type D8490 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec0)
type D8491 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec1)
type D8492 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec2)
type D8493 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec3)
type D8494 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec4)
type D8495 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec5)
type D8496 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec6)
type D8497 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec7)
type D8498 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec8)
type D8499 = Dec (:. (:. (:. (:. DecN Dec8) Dec4) Dec9) Dec9)
type D8500 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec0)
type D8501 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec1)
type D8502 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec2)
type D8503 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec3)
type D8504 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec4)
type D8505 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec5)
type D8506 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec6)
type D8507 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec7)
type D8508 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec8)
type D8509 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec0) Dec9)
type D8510 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec0)
type D8511 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec1)
type D8512 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec2)
type D8513 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec3)
type D8514 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec4)
type D8515 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec5)
type D8516 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec6)
type D8517 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec7)
type D8518 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec8)
type D8519 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec1) Dec9)
type D8520 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec0)
type D8521 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec1)
type D8522 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec2)
type D8523 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec3)
type D8524 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec4)
type D8525 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec5)
type D8526 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec6)
type D8527 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec7)
type D8528 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec8)
type D8529 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec2) Dec9)
type D8530 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec0)
type D8531 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec1)
type D8532 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec2)
type D8533 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec3)
type D8534 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec4)
type D8535 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec5)
type D8536 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec6)
type D8537 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec7)
type D8538 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec8)
type D8539 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec3) Dec9)
type D8540 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec0)
type D8541 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec1)
type D8542 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec2)
type D8543 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec3)
type D8544 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec4)
type D8545 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec5)
type D8546 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec6)
type D8547 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec7)
type D8548 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec8)
type D8549 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec4) Dec9)
type D8550 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec0)
type D8551 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec1)
type D8552 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec2)
type D8553 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec3)
type D8554 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec4)
type D8555 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec5)
type D8556 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec6)
type D8557 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec7)
type D8558 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec8)
type D8559 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec5) Dec9)
type D8560 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec0)
type D8561 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec1)
type D8562 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec2)
type D8563 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec3)
type D8564 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec4)
type D8565 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec5)
type D8566 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec6)
type D8567 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec7)
type D8568 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec8)
type D8569 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec6) Dec9)
type D8570 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec0)
type D8571 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec1)
type D8572 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec2)
type D8573 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec3)
type D8574 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec4)
type D8575 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec5)
type D8576 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec6)
type D8577 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec7)
type D8578 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec8)
type D8579 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec7) Dec9)
type D8580 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec0)
type D8581 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec1)
type D8582 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec2)
type D8583 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec3)
type D8584 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec4)
type D8585 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec5)
type D8586 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec6)
type D8587 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec7)
type D8588 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec8)
type D8589 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec8) Dec9)
type D8590 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec0)
type D8591 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec1)
type D8592 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec2)
type D8593 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec3)
type D8594 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec4)
type D8595 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec5)
type D8596 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec6)
type D8597 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec7)
type D8598 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec8)
type D8599 = Dec (:. (:. (:. (:. DecN Dec8) Dec5) Dec9) Dec9)
type D8600 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec0)
type D8601 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec1)
type D8602 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec2)
type D8603 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec3)
type D8604 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec4)
type D8605 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec5)
type D8606 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec6)
type D8607 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec7)
type D8608 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec8)
type D8609 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec0) Dec9)
type D8610 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec0)
type D8611 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec1)
type D8612 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec2)
type D8613 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec3)
type D8614 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec4)
type D8615 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec5)
type D8616 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec6)
type D8617 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec7)
type D8618 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec8)
type D8619 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec1) Dec9)
type D8620 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec0)
type D8621 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec1)
type D8622 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec2)
type D8623 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec3)
type D8624 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec4)
type D8625 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec5)
type D8626 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec6)
type D8627 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec7)
type D8628 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec8)
type D8629 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec2) Dec9)
type D8630 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec0)
type D8631 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec1)
type D8632 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec2)
type D8633 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec3)
type D8634 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec4)
type D8635 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec5)
type D8636 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec6)
type D8637 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec7)
type D8638 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec8)
type D8639 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec3) Dec9)
type D8640 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec0)
type D8641 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec1)
type D8642 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec2)
type D8643 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec3)
type D8644 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec4)
type D8645 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec5)
type D8646 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec6)
type D8647 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec7)
type D8648 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec8)
type D8649 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec4) Dec9)
type D8650 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec0)
type D8651 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec1)
type D8652 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec2)
type D8653 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec3)
type D8654 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec4)
type D8655 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec5)
type D8656 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec6)
type D8657 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec7)
type D8658 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec8)
type D8659 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec5) Dec9)
type D8660 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec0)
type D8661 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec1)
type D8662 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec2)
type D8663 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec3)
type D8664 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec4)
type D8665 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec5)
type D8666 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec6)
type D8667 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec7)
type D8668 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec8)
type D8669 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec6) Dec9)
type D8670 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec0)
type D8671 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec1)
type D8672 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec2)
type D8673 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec3)
type D8674 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec4)
type D8675 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec5)
type D8676 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec6)
type D8677 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec7)
type D8678 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec8)
type D8679 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec7) Dec9)
type D8680 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec0)
type D8681 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec1)
type D8682 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec2)
type D8683 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec3)
type D8684 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec4)
type D8685 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec5)
type D8686 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec6)
type D8687 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec7)
type D8688 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec8)
type D8689 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec8) Dec9)
type D8690 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec0)
type D8691 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec1)
type D8692 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec2)
type D8693 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec3)
type D8694 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec4)
type D8695 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec5)
type D8696 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec6)
type D8697 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec7)
type D8698 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec8)
type D8699 = Dec (:. (:. (:. (:. DecN Dec8) Dec6) Dec9) Dec9)
type D8700 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec0)
type D8701 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec1)
type D8702 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec2)
type D8703 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec3)
type D8704 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec4)
type D8705 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec5)
type D8706 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec6)
type D8707 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec7)
type D8708 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec8)
type D8709 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec0) Dec9)
type D8710 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec0)
type D8711 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec1)
type D8712 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec2)
type D8713 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec3)
type D8714 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec4)
type D8715 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec5)
type D8716 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec6)
type D8717 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec7)
type D8718 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec8)
type D8719 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec1) Dec9)
type D8720 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec0)
type D8721 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec1)
type D8722 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec2)
type D8723 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec3)
type D8724 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec4)
type D8725 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec5)
type D8726 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec6)
type D8727 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec7)
type D8728 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec8)
type D8729 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec2) Dec9)
type D8730 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec0)
type D8731 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec1)
type D8732 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec2)
type D8733 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec3)
type D8734 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec4)
type D8735 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec5)
type D8736 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec6)
type D8737 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec7)
type D8738 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec8)
type D8739 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec3) Dec9)
type D8740 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec0)
type D8741 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec1)
type D8742 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec2)
type D8743 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec3)
type D8744 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec4)
type D8745 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec5)
type D8746 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec6)
type D8747 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec7)
type D8748 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec8)
type D8749 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec4) Dec9)
type D8750 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec0)
type D8751 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec1)
type D8752 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec2)
type D8753 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec3)
type D8754 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec4)
type D8755 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec5)
type D8756 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec6)
type D8757 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec7)
type D8758 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec8)
type D8759 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec5) Dec9)
type D8760 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec0)
type D8761 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec1)
type D8762 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec2)
type D8763 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec3)
type D8764 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec4)
type D8765 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec5)
type D8766 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec6)
type D8767 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec7)
type D8768 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec8)
type D8769 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec6) Dec9)
type D8770 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec0)
type D8771 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec1)
type D8772 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec2)
type D8773 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec3)
type D8774 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec4)
type D8775 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec5)
type D8776 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec6)
type D8777 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec7)
type D8778 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec8)
type D8779 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec7) Dec9)
type D8780 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec0)
type D8781 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec1)
type D8782 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec2)
type D8783 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec3)
type D8784 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec4)
type D8785 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec5)
type D8786 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec6)
type D8787 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec7)
type D8788 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec8)
type D8789 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec8) Dec9)
type D8790 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec0)
type D8791 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec1)
type D8792 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec2)
type D8793 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec3)
type D8794 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec4)
type D8795 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec5)
type D8796 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec6)
type D8797 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec7)
type D8798 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec8)
type D8799 = Dec (:. (:. (:. (:. DecN Dec8) Dec7) Dec9) Dec9)
type D8800 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec0)
type D8801 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec1)
type D8802 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec2)
type D8803 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec3)
type D8804 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec4)
type D8805 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec5)
type D8806 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec6)
type D8807 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec7)
type D8808 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec8)
type D8809 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec0) Dec9)
type D8810 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec0)
type D8811 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec1)
type D8812 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec2)
type D8813 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec3)
type D8814 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec4)
type D8815 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec5)
type D8816 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec6)
type D8817 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec7)
type D8818 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec8)
type D8819 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec1) Dec9)
type D8820 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec0)
type D8821 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec1)
type D8822 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec2)
type D8823 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec3)
type D8824 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec4)
type D8825 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec5)
type D8826 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec6)
type D8827 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec7)
type D8828 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec8)
type D8829 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec2) Dec9)
type D8830 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec0)
type D8831 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec1)
type D8832 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec2)
type D8833 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec3)
type D8834 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec4)
type D8835 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec5)
type D8836 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec6)
type D8837 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec7)
type D8838 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec8)
type D8839 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec3) Dec9)
type D8840 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec0)
type D8841 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec1)
type D8842 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec2)
type D8843 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec3)
type D8844 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec4)
type D8845 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec5)
type D8846 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec6)
type D8847 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec7)
type D8848 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec8)
type D8849 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec4) Dec9)
type D8850 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec0)
type D8851 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec1)
type D8852 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec2)
type D8853 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec3)
type D8854 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec4)
type D8855 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec5)
type D8856 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec6)
type D8857 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec7)
type D8858 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec8)
type D8859 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec5) Dec9)
type D8860 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec0)
type D8861 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec1)
type D8862 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec2)
type D8863 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec3)
type D8864 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec4)
type D8865 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec5)
type D8866 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec6)
type D8867 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec7)
type D8868 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec8)
type D8869 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec6) Dec9)
type D8870 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec0)
type D8871 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec1)
type D8872 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec2)
type D8873 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec3)
type D8874 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec4)
type D8875 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec5)
type D8876 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec6)
type D8877 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec7)
type D8878 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec8)
type D8879 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec7) Dec9)
type D8880 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec0)
type D8881 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec1)
type D8882 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec2)
type D8883 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec3)
type D8884 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec4)
type D8885 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec5)
type D8886 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec6)
type D8887 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec7)
type D8888 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec8)
type D8889 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec8) Dec9)
type D8890 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec0)
type D8891 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec1)
type D8892 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec2)
type D8893 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec3)
type D8894 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec4)
type D8895 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec5)
type D8896 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec6)
type D8897 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec7)
type D8898 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec8)
type D8899 = Dec (:. (:. (:. (:. DecN Dec8) Dec8) Dec9) Dec9)
type D8900 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec0)
type D8901 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec1)
type D8902 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec2)
type D8903 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec3)
type D8904 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec4)
type D8905 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec5)
type D8906 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec6)
type D8907 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec7)
type D8908 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec8)
type D8909 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec0) Dec9)
type D8910 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec0)
type D8911 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec1)
type D8912 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec2)
type D8913 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec3)
type D8914 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec4)
type D8915 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec5)
type D8916 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec6)
type D8917 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec7)
type D8918 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec8)
type D8919 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec1) Dec9)
type D8920 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec0)
type D8921 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec1)
type D8922 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec2)
type D8923 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec3)
type D8924 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec4)
type D8925 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec5)
type D8926 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec6)
type D8927 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec7)
type D8928 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec8)
type D8929 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec2) Dec9)
type D8930 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec0)
type D8931 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec1)
type D8932 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec2)
type D8933 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec3)
type D8934 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec4)
type D8935 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec5)
type D8936 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec6)
type D8937 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec7)
type D8938 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec8)
type D8939 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec3) Dec9)
type D8940 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec0)
type D8941 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec1)
type D8942 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec2)
type D8943 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec3)
type D8944 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec4)
type D8945 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec5)
type D8946 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec6)
type D8947 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec7)
type D8948 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec8)
type D8949 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec4) Dec9)
type D8950 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec0)
type D8951 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec1)
type D8952 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec2)
type D8953 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec3)
type D8954 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec4)
type D8955 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec5)
type D8956 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec6)
type D8957 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec7)
type D8958 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec8)
type D8959 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec5) Dec9)
type D8960 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec0)
type D8961 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec1)
type D8962 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec2)
type D8963 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec3)
type D8964 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec4)
type D8965 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec5)
type D8966 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec6)
type D8967 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec7)
type D8968 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec8)
type D8969 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec6) Dec9)
type D8970 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec0)
type D8971 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec1)
type D8972 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec2)
type D8973 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec3)
type D8974 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec4)
type D8975 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec5)
type D8976 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec6)
type D8977 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec7)
type D8978 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec8)
type D8979 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec7) Dec9)
type D8980 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec0)
type D8981 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec1)
type D8982 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec2)
type D8983 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec3)
type D8984 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec4)
type D8985 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec5)
type D8986 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec6)
type D8987 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec7)
type D8988 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec8)
type D8989 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec8) Dec9)
type D8990 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec0)
type D8991 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec1)
type D8992 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec2)
type D8993 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec3)
type D8994 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec4)
type D8995 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec5)
type D8996 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec6)
type D8997 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec7)
type D8998 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec8)
type D8999 = Dec (:. (:. (:. (:. DecN Dec8) Dec9) Dec9) Dec9)
type D9000 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec0)
type D9001 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec1)
type D9002 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec2)
type D9003 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec3)
type D9004 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec4)
type D9005 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec5)
type D9006 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec6)
type D9007 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec7)
type D9008 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec8)
type D9009 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec0) Dec9)
type D9010 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec0)
type D9011 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec1)
type D9012 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec2)
type D9013 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec3)
type D9014 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec4)
type D9015 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec5)
type D9016 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec6)
type D9017 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec7)
type D9018 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec8)
type D9019 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec1) Dec9)
type D9020 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec0)
type D9021 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec1)
type D9022 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec2)
type D9023 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec3)
type D9024 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec4)
type D9025 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec5)
type D9026 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec6)
type D9027 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec7)
type D9028 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec8)
type D9029 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec2) Dec9)
type D9030 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec0)
type D9031 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec1)
type D9032 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec2)
type D9033 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec3)
type D9034 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec4)
type D9035 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec5)
type D9036 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec6)
type D9037 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec7)
type D9038 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec8)
type D9039 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec3) Dec9)
type D9040 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec0)
type D9041 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec1)
type D9042 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec2)
type D9043 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec3)
type D9044 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec4)
type D9045 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec5)
type D9046 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec6)
type D9047 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec7)
type D9048 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec8)
type D9049 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec4) Dec9)
type D9050 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec0)
type D9051 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec1)
type D9052 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec2)
type D9053 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec3)
type D9054 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec4)
type D9055 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec5)
type D9056 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec6)
type D9057 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec7)
type D9058 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec8)
type D9059 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec5) Dec9)
type D9060 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec0)
type D9061 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec1)
type D9062 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec2)
type D9063 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec3)
type D9064 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec4)
type D9065 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec5)
type D9066 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec6)
type D9067 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec7)
type D9068 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec8)
type D9069 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec6) Dec9)
type D9070 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec0)
type D9071 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec1)
type D9072 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec2)
type D9073 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec3)
type D9074 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec4)
type D9075 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec5)
type D9076 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec6)
type D9077 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec7)
type D9078 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec8)
type D9079 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec7) Dec9)
type D9080 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec0)
type D9081 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec1)
type D9082 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec2)
type D9083 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec3)
type D9084 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec4)
type D9085 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec5)
type D9086 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec6)
type D9087 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec7)
type D9088 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec8)
type D9089 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec8) Dec9)
type D9090 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec0)
type D9091 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec1)
type D9092 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec2)
type D9093 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec3)
type D9094 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec4)
type D9095 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec5)
type D9096 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec6)
type D9097 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec7)
type D9098 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec8)
type D9099 = Dec (:. (:. (:. (:. DecN Dec9) Dec0) Dec9) Dec9)
type D9100 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec0)
type D9101 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec1)
type D9102 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec2)
type D9103 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec3)
type D9104 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec4)
type D9105 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec5)
type D9106 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec6)
type D9107 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec7)
type D9108 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec8)
type D9109 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec0) Dec9)
type D9110 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec0)
type D9111 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec1)
type D9112 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec2)
type D9113 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec3)
type D9114 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec4)
type D9115 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec5)
type D9116 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec6)
type D9117 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec7)
type D9118 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec8)
type D9119 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec1) Dec9)
type D9120 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec0)
type D9121 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec1)
type D9122 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec2)
type D9123 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec3)
type D9124 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec4)
type D9125 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec5)
type D9126 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec6)
type D9127 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec7)
type D9128 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec8)
type D9129 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec2) Dec9)
type D9130 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec0)
type D9131 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec1)
type D9132 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec2)
type D9133 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec3)
type D9134 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec4)
type D9135 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec5)
type D9136 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec6)
type D9137 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec7)
type D9138 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec8)
type D9139 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec3) Dec9)
type D9140 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec0)
type D9141 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec1)
type D9142 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec2)
type D9143 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec3)
type D9144 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec4)
type D9145 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec5)
type D9146 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec6)
type D9147 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec7)
type D9148 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec8)
type D9149 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec4) Dec9)
type D9150 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec0)
type D9151 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec1)
type D9152 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec2)
type D9153 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec3)
type D9154 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec4)
type D9155 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec5)
type D9156 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec6)
type D9157 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec7)
type D9158 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec8)
type D9159 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec5) Dec9)
type D9160 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec0)
type D9161 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec1)
type D9162 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec2)
type D9163 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec3)
type D9164 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec4)
type D9165 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec5)
type D9166 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec6)
type D9167 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec7)
type D9168 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec8)
type D9169 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec6) Dec9)
type D9170 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec0)
type D9171 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec1)
type D9172 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec2)
type D9173 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec3)
type D9174 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec4)
type D9175 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec5)
type D9176 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec6)
type D9177 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec7)
type D9178 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec8)
type D9179 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec7) Dec9)
type D9180 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec0)
type D9181 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec1)
type D9182 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec2)
type D9183 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec3)
type D9184 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec4)
type D9185 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec5)
type D9186 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec6)
type D9187 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec7)
type D9188 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec8)
type D9189 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec8) Dec9)
type D9190 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec0)
type D9191 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec1)
type D9192 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec2)
type D9193 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec3)
type D9194 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec4)
type D9195 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec5)
type D9196 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec6)
type D9197 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec7)
type D9198 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec8)
type D9199 = Dec (:. (:. (:. (:. DecN Dec9) Dec1) Dec9) Dec9)
type D9200 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec0)
type D9201 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec1)
type D9202 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec2)
type D9203 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec3)
type D9204 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec4)
type D9205 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec5)
type D9206 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec6)
type D9207 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec7)
type D9208 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec8)
type D9209 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec0) Dec9)
type D9210 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec0)
type D9211 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec1)
type D9212 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec2)
type D9213 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec3)
type D9214 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec4)
type D9215 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec5)
type D9216 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec6)
type D9217 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec7)
type D9218 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec8)
type D9219 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec1) Dec9)
type D9220 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec0)
type D9221 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec1)
type D9222 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec2)
type D9223 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec3)
type D9224 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec4)
type D9225 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec5)
type D9226 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec6)
type D9227 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec7)
type D9228 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec8)
type D9229 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec2) Dec9)
type D9230 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec0)
type D9231 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec1)
type D9232 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec2)
type D9233 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec3)
type D9234 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec4)
type D9235 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec5)
type D9236 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec6)
type D9237 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec7)
type D9238 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec8)
type D9239 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec3) Dec9)
type D9240 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec0)
type D9241 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec1)
type D9242 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec2)
type D9243 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec3)
type D9244 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec4)
type D9245 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec5)
type D9246 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec6)
type D9247 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec7)
type D9248 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec8)
type D9249 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec4) Dec9)
type D9250 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec0)
type D9251 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec1)
type D9252 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec2)
type D9253 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec3)
type D9254 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec4)
type D9255 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec5)
type D9256 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec6)
type D9257 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec7)
type D9258 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec8)
type D9259 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec5) Dec9)
type D9260 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec0)
type D9261 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec1)
type D9262 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec2)
type D9263 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec3)
type D9264 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec4)
type D9265 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec5)
type D9266 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec6)
type D9267 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec7)
type D9268 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec8)
type D9269 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec6) Dec9)
type D9270 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec0)
type D9271 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec1)
type D9272 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec2)
type D9273 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec3)
type D9274 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec4)
type D9275 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec5)
type D9276 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec6)
type D9277 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec7)
type D9278 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec8)
type D9279 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec7) Dec9)
type D9280 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec0)
type D9281 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec1)
type D9282 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec2)
type D9283 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec3)
type D9284 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec4)
type D9285 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec5)
type D9286 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec6)
type D9287 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec7)
type D9288 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec8)
type D9289 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec8) Dec9)
type D9290 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec0)
type D9291 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec1)
type D9292 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec2)
type D9293 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec3)
type D9294 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec4)
type D9295 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec5)
type D9296 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec6)
type D9297 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec7)
type D9298 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec8)
type D9299 = Dec (:. (:. (:. (:. DecN Dec9) Dec2) Dec9) Dec9)
type D9300 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec0)
type D9301 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec1)
type D9302 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec2)
type D9303 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec3)
type D9304 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec4)
type D9305 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec5)
type D9306 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec6)
type D9307 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec7)
type D9308 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec8)
type D9309 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec0) Dec9)
type D9310 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec0)
type D9311 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec1)
type D9312 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec2)
type D9313 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec3)
type D9314 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec4)
type D9315 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec5)
type D9316 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec6)
type D9317 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec7)
type D9318 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec8)
type D9319 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec1) Dec9)
type D9320 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec0)
type D9321 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec1)
type D9322 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec2)
type D9323 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec3)
type D9324 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec4)
type D9325 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec5)
type D9326 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec6)
type D9327 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec7)
type D9328 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec8)
type D9329 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec2) Dec9)
type D9330 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec0)
type D9331 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec1)
type D9332 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec2)
type D9333 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec3)
type D9334 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec4)
type D9335 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec5)
type D9336 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec6)
type D9337 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec7)
type D9338 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec8)
type D9339 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec3) Dec9)
type D9340 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec0)
type D9341 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec1)
type D9342 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec2)
type D9343 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec3)
type D9344 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec4)
type D9345 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec5)
type D9346 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec6)
type D9347 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec7)
type D9348 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec8)
type D9349 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec4) Dec9)
type D9350 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec0)
type D9351 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec1)
type D9352 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec2)
type D9353 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec3)
type D9354 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec4)
type D9355 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec5)
type D9356 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec6)
type D9357 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec7)
type D9358 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec8)
type D9359 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec5) Dec9)
type D9360 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec0)
type D9361 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec1)
type D9362 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec2)
type D9363 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec3)
type D9364 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec4)
type D9365 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec5)
type D9366 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec6)
type D9367 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec7)
type D9368 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec8)
type D9369 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec6) Dec9)
type D9370 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec0)
type D9371 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec1)
type D9372 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec2)
type D9373 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec3)
type D9374 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec4)
type D9375 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec5)
type D9376 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec6)
type D9377 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec7)
type D9378 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec8)
type D9379 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec7) Dec9)
type D9380 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec0)
type D9381 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec1)
type D9382 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec2)
type D9383 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec3)
type D9384 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec4)
type D9385 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec5)
type D9386 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec6)
type D9387 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec7)
type D9388 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec8)
type D9389 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec8) Dec9)
type D9390 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec0)
type D9391 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec1)
type D9392 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec2)
type D9393 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec3)
type D9394 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec4)
type D9395 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec5)
type D9396 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec6)
type D9397 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec7)
type D9398 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec8)
type D9399 = Dec (:. (:. (:. (:. DecN Dec9) Dec3) Dec9) Dec9)
type D9400 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec0)
type D9401 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec1)
type D9402 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec2)
type D9403 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec3)
type D9404 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec4)
type D9405 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec5)
type D9406 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec6)
type D9407 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec7)
type D9408 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec8)
type D9409 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec0) Dec9)
type D9410 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec0)
type D9411 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec1)
type D9412 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec2)
type D9413 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec3)
type D9414 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec4)
type D9415 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec5)
type D9416 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec6)
type D9417 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec7)
type D9418 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec8)
type D9419 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec1) Dec9)
type D9420 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec0)
type D9421 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec1)
type D9422 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec2)
type D9423 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec3)
type D9424 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec4)
type D9425 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec5)
type D9426 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec6)
type D9427 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec7)
type D9428 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec8)
type D9429 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec2) Dec9)
type D9430 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec0)
type D9431 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec1)
type D9432 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec2)
type D9433 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec3)
type D9434 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec4)
type D9435 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec5)
type D9436 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec6)
type D9437 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec7)
type D9438 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec8)
type D9439 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec3) Dec9)
type D9440 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec0)
type D9441 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec1)
type D9442 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec2)
type D9443 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec3)
type D9444 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec4)
type D9445 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec5)
type D9446 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec6)
type D9447 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec7)
type D9448 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec8)
type D9449 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec4) Dec9)
type D9450 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec0)
type D9451 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec1)
type D9452 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec2)
type D9453 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec3)
type D9454 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec4)
type D9455 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec5)
type D9456 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec6)
type D9457 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec7)
type D9458 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec8)
type D9459 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec5) Dec9)
type D9460 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec0)
type D9461 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec1)
type D9462 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec2)
type D9463 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec3)
type D9464 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec4)
type D9465 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec5)
type D9466 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec6)
type D9467 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec7)
type D9468 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec8)
type D9469 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec6) Dec9)
type D9470 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec0)
type D9471 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec1)
type D9472 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec2)
type D9473 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec3)
type D9474 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec4)
type D9475 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec5)
type D9476 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec6)
type D9477 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec7)
type D9478 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec8)
type D9479 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec7) Dec9)
type D9480 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec0)
type D9481 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec1)
type D9482 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec2)
type D9483 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec3)
type D9484 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec4)
type D9485 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec5)
type D9486 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec6)
type D9487 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec7)
type D9488 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec8)
type D9489 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec8) Dec9)
type D9490 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec0)
type D9491 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec1)
type D9492 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec2)
type D9493 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec3)
type D9494 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec4)
type D9495 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec5)
type D9496 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec6)
type D9497 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec7)
type D9498 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec8)
type D9499 = Dec (:. (:. (:. (:. DecN Dec9) Dec4) Dec9) Dec9)
type D9500 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec0)
type D9501 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec1)
type D9502 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec2)
type D9503 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec3)
type D9504 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec4)
type D9505 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec5)
type D9506 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec6)
type D9507 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec7)
type D9508 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec8)
type D9509 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec0) Dec9)
type D9510 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec0)
type D9511 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec1)
type D9512 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec2)
type D9513 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec3)
type D9514 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec4)
type D9515 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec5)
type D9516 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec6)
type D9517 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec7)
type D9518 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec8)
type D9519 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec1) Dec9)
type D9520 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec0)
type D9521 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec1)
type D9522 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec2)
type D9523 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec3)
type D9524 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec4)
type D9525 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec5)
type D9526 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec6)
type D9527 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec7)
type D9528 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec8)
type D9529 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec2) Dec9)
type D9530 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec0)
type D9531 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec1)
type D9532 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec2)
type D9533 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec3)
type D9534 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec4)
type D9535 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec5)
type D9536 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec6)
type D9537 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec7)
type D9538 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec8)
type D9539 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec3) Dec9)
type D9540 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec0)
type D9541 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec1)
type D9542 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec2)
type D9543 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec3)
type D9544 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec4)
type D9545 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec5)
type D9546 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec6)
type D9547 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec7)
type D9548 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec8)
type D9549 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec4) Dec9)
type D9550 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec0)
type D9551 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec1)
type D9552 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec2)
type D9553 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec3)
type D9554 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec4)
type D9555 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec5)
type D9556 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec6)
type D9557 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec7)
type D9558 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec8)
type D9559 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec5) Dec9)
type D9560 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec0)
type D9561 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec1)
type D9562 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec2)
type D9563 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec3)
type D9564 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec4)
type D9565 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec5)
type D9566 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec6)
type D9567 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec7)
type D9568 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec8)
type D9569 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec6) Dec9)
type D9570 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec0)
type D9571 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec1)
type D9572 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec2)
type D9573 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec3)
type D9574 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec4)
type D9575 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec5)
type D9576 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec6)
type D9577 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec7)
type D9578 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec8)
type D9579 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec7) Dec9)
type D9580 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec0)
type D9581 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec1)
type D9582 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec2)
type D9583 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec3)
type D9584 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec4)
type D9585 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec5)
type D9586 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec6)
type D9587 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec7)
type D9588 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec8)
type D9589 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec8) Dec9)
type D9590 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec0)
type D9591 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec1)
type D9592 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec2)
type D9593 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec3)
type D9594 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec4)
type D9595 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec5)
type D9596 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec6)
type D9597 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec7)
type D9598 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec8)
type D9599 = Dec (:. (:. (:. (:. DecN Dec9) Dec5) Dec9) Dec9)
type D9600 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec0)
type D9601 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec1)
type D9602 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec2)
type D9603 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec3)
type D9604 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec4)
type D9605 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec5)
type D9606 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec6)
type D9607 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec7)
type D9608 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec8)
type D9609 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec0) Dec9)
type D9610 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec0)
type D9611 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec1)
type D9612 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec2)
type D9613 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec3)
type D9614 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec4)
type D9615 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec5)
type D9616 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec6)
type D9617 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec7)
type D9618 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec8)
type D9619 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec1) Dec9)
type D9620 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec0)
type D9621 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec1)
type D9622 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec2)
type D9623 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec3)
type D9624 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec4)
type D9625 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec5)
type D9626 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec6)
type D9627 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec7)
type D9628 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec8)
type D9629 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec2) Dec9)
type D9630 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec0)
type D9631 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec1)
type D9632 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec2)
type D9633 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec3)
type D9634 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec4)
type D9635 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec5)
type D9636 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec6)
type D9637 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec7)
type D9638 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec8)
type D9639 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec3) Dec9)
type D9640 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec0)
type D9641 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec1)
type D9642 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec2)
type D9643 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec3)
type D9644 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec4)
type D9645 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec5)
type D9646 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec6)
type D9647 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec7)
type D9648 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec8)
type D9649 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec4) Dec9)
type D9650 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec0)
type D9651 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec1)
type D9652 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec2)
type D9653 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec3)
type D9654 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec4)
type D9655 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec5)
type D9656 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec6)
type D9657 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec7)
type D9658 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec8)
type D9659 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec5) Dec9)
type D9660 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec0)
type D9661 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec1)
type D9662 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec2)
type D9663 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec3)
type D9664 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec4)
type D9665 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec5)
type D9666 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec6)
type D9667 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec7)
type D9668 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec8)
type D9669 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec6) Dec9)
type D9670 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec0)
type D9671 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec1)
type D9672 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec2)
type D9673 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec3)
type D9674 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec4)
type D9675 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec5)
type D9676 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec6)
type D9677 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec7)
type D9678 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec8)
type D9679 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec7) Dec9)
type D9680 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec0)
type D9681 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec1)
type D9682 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec2)
type D9683 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec3)
type D9684 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec4)
type D9685 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec5)
type D9686 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec6)
type D9687 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec7)
type D9688 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec8)
type D9689 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec8) Dec9)
type D9690 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec0)
type D9691 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec1)
type D9692 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec2)
type D9693 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec3)
type D9694 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec4)
type D9695 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec5)
type D9696 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec6)
type D9697 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec7)
type D9698 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec8)
type D9699 = Dec (:. (:. (:. (:. DecN Dec9) Dec6) Dec9) Dec9)
type D9700 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec0)
type D9701 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec1)
type D9702 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec2)
type D9703 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec3)
type D9704 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec4)
type D9705 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec5)
type D9706 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec6)
type D9707 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec7)
type D9708 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec8)
type D9709 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec0) Dec9)
type D9710 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec0)
type D9711 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec1)
type D9712 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec2)
type D9713 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec3)
type D9714 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec4)
type D9715 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec5)
type D9716 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec6)
type D9717 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec7)
type D9718 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec8)
type D9719 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec1) Dec9)
type D9720 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec0)
type D9721 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec1)
type D9722 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec2)
type D9723 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec3)
type D9724 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec4)
type D9725 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec5)
type D9726 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec6)
type D9727 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec7)
type D9728 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec8)
type D9729 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec2) Dec9)
type D9730 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec0)
type D9731 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec1)
type D9732 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec2)
type D9733 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec3)
type D9734 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec4)
type D9735 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec5)
type D9736 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec6)
type D9737 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec7)
type D9738 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec8)
type D9739 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec3) Dec9)
type D9740 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec0)
type D9741 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec1)
type D9742 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec2)
type D9743 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec3)
type D9744 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec4)
type D9745 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec5)
type D9746 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec6)
type D9747 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec7)
type D9748 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec8)
type D9749 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec4) Dec9)
type D9750 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec0)
type D9751 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec1)
type D9752 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec2)
type D9753 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec3)
type D9754 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec4)
type D9755 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec5)
type D9756 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec6)
type D9757 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec7)
type D9758 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec8)
type D9759 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec5) Dec9)
type D9760 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec0)
type D9761 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec1)
type D9762 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec2)
type D9763 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec3)
type D9764 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec4)
type D9765 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec5)
type D9766 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec6)
type D9767 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec7)
type D9768 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec8)
type D9769 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec6) Dec9)
type D9770 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec0)
type D9771 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec1)
type D9772 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec2)
type D9773 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec3)
type D9774 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec4)
type D9775 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec5)
type D9776 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec6)
type D9777 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec7)
type D9778 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec8)
type D9779 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec7) Dec9)
type D9780 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec0)
type D9781 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec1)
type D9782 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec2)
type D9783 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec3)
type D9784 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec4)
type D9785 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec5)
type D9786 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec6)
type D9787 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec7)
type D9788 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec8)
type D9789 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec8) Dec9)
type D9790 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec0)
type D9791 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec1)
type D9792 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec2)
type D9793 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec3)
type D9794 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec4)
type D9795 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec5)
type D9796 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec6)
type D9797 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec7)
type D9798 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec8)
type D9799 = Dec (:. (:. (:. (:. DecN Dec9) Dec7) Dec9) Dec9)
type D9800 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec0)
type D9801 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec1)
type D9802 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec2)
type D9803 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec3)
type D9804 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec4)
type D9805 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec5)
type D9806 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec6)
type D9807 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec7)
type D9808 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec8)
type D9809 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec0) Dec9)
type D9810 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec0)
type D9811 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec1)
type D9812 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec2)
type D9813 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec3)
type D9814 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec4)
type D9815 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec5)
type D9816 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec6)
type D9817 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec7)
type D9818 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec8)
type D9819 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec1) Dec9)
type D9820 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec0)
type D9821 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec1)
type D9822 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec2)
type D9823 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec3)
type D9824 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec4)
type D9825 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec5)
type D9826 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec6)
type D9827 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec7)
type D9828 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec8)
type D9829 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec2) Dec9)
type D9830 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec0)
type D9831 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec1)
type D9832 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec2)
type D9833 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec3)
type D9834 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec4)
type D9835 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec5)
type D9836 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec6)
type D9837 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec7)
type D9838 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec8)
type D9839 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec3) Dec9)
type D9840 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec0)
type D9841 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec1)
type D9842 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec2)
type D9843 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec3)
type D9844 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec4)
type D9845 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec5)
type D9846 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec6)
type D9847 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec7)
type D9848 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec8)
type D9849 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec4) Dec9)
type D9850 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec0)
type D9851 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec1)
type D9852 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec2)
type D9853 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec3)
type D9854 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec4)
type D9855 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec5)
type D9856 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec6)
type D9857 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec7)
type D9858 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec8)
type D9859 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec5) Dec9)
type D9860 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec0)
type D9861 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec1)
type D9862 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec2)
type D9863 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec3)
type D9864 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec4)
type D9865 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec5)
type D9866 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec6)
type D9867 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec7)
type D9868 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec8)
type D9869 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec6) Dec9)
type D9870 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec0)
type D9871 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec1)
type D9872 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec2)
type D9873 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec3)
type D9874 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec4)
type D9875 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec5)
type D9876 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec6)
type D9877 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec7)
type D9878 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec8)
type D9879 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec7) Dec9)
type D9880 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec0)
type D9881 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec1)
type D9882 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec2)
type D9883 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec3)
type D9884 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec4)
type D9885 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec5)
type D9886 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec6)
type D9887 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec7)
type D9888 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec8)
type D9889 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec8) Dec9)
type D9890 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec0)
type D9891 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec1)
type D9892 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec2)
type D9893 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec3)
type D9894 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec4)
type D9895 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec5)
type D9896 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec6)
type D9897 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec7)
type D9898 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec8)
type D9899 = Dec (:. (:. (:. (:. DecN Dec9) Dec8) Dec9) Dec9)
type D9900 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec0)
type D9901 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec1)
type D9902 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec2)
type D9903 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec3)
type D9904 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec4)
type D9905 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec5)
type D9906 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec6)
type D9907 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec7)
type D9908 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec8)
type D9909 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec0) Dec9)
type D9910 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec0)
type D9911 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec1)
type D9912 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec2)
type D9913 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec3)
type D9914 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec4)
type D9915 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec5)
type D9916 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec6)
type D9917 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec7)
type D9918 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec8)
type D9919 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec1) Dec9)
type D9920 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec0)
type D9921 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec1)
type D9922 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec2)
type D9923 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec3)
type D9924 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec4)
type D9925 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec5)
type D9926 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec6)
type D9927 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec7)
type D9928 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec8)
type D9929 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec2) Dec9)
type D9930 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec0)
type D9931 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec1)
type D9932 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec2)
type D9933 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec3)
type D9934 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec4)
type D9935 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec5)
type D9936 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec6)
type D9937 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec7)
type D9938 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec8)
type D9939 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec3) Dec9)
type D9940 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec0)
type D9941 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec1)
type D9942 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec2)
type D9943 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec3)
type D9944 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec4)
type D9945 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec5)
type D9946 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec6)
type D9947 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec7)
type D9948 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec8)
type D9949 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec4) Dec9)
type D9950 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec0)
type D9951 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec1)
type D9952 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec2)
type D9953 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec3)
type D9954 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec4)
type D9955 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec5)
type D9956 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec6)
type D9957 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec7)
type D9958 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec8)
type D9959 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec5) Dec9)
type D9960 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec0)
type D9961 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec1)
type D9962 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec2)
type D9963 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec3)
type D9964 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec4)
type D9965 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec5)
type D9966 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec6)
type D9967 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec7)
type D9968 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec8)
type D9969 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec6) Dec9)
type D9970 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec0)
type D9971 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec1)
type D9972 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec2)
type D9973 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec3)
type D9974 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec4)
type D9975 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec5)
type D9976 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec6)
type D9977 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec7)
type D9978 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec8)
type D9979 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec7) Dec9)
type D9980 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec0)
type D9981 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec1)
type D9982 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec2)
type D9983 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec3)
type D9984 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec4)
type D9985 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec5)
type D9986 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec6)
type D9987 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec7)
type D9988 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec8)
type D9989 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec8) Dec9)
type D9990 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec0)
type D9991 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec1)
type D9992 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec2)
type D9993 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec3)
type D9994 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec4)
type D9995 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec5)
type D9996 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec6)
type D9997 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec7)
type D9998 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec8)
type D9999 = Dec (:. (:. (:. (:. DecN Dec9) Dec9) Dec9) Dec9)
type D10000 = Dec (:. (:. (:. (:. (:. DecN Dec1) Dec0) Dec0) Dec0) Dec0)
type ByteString = ByteString
type Address = SockAddr
type XFerT m address a = StateT (XFerState address) m a
type DCxt = [DPred]
type DStrictType = (Strict, DType)
type DVarStrictType = (Name, Strict, DType)
type DInstanceDec = DDec
type PatM q = WriterT [(Name, DExp)] q
type Field = (Name, Name, Either Int Name)
type GraphEdges node key = Map key (node, Set key)
type ItemID = Int
type Key = Text
type Body = ByteString
type Path = String
type RequestFunction = Path -> QueryText -> IO (Either Error Body)
type ItemID = Int
type Key = Text
type Proposition = Term
type User = String
type Email = String
type TheoremId = Int
type Chronicle c = ChronicleT c Identity
type Chronicle c = ChronicleT c Identity
type ActorM = ReaderT Context IO
type Actor = ActorM ()
type Id = String
type Subst = [(Tyvar, Type)]
type Class = ([Tyvar], [Pred], [Inst])
type Inst = Qual Pred
type EnvTransformer = ClassEnv -> Maybe ClassEnv
type Infer e t = ClassEnv -> [Assump] -> e -> TI ([Pred], t)
type Alt = ([Pat], Expr)
type Ambiguity = (Tyvar, [Pred])
type Expl = (Id, Scheme, [Alt])
type Impl = (Id, [Alt])
type BindGroup = ([Expl], [[Impl]])
type Program = [BindGroup]
type History a = (Maybe a, [a], [a])
type Record a signal = (History a, ThreadObject a signal)
type StateRecords a signal = ThreadObject (Record a signal) ()
type Result a = Either SomeException a
type SupervisorSpec = Supervisor_ Uninitialised
type Supervisor = Supervisor_ Initialised
type RestartAction = ThreadId -> IO ThreadId
type Handler a = a -> IO ()
type RemotePtr a = IORef (RemoteData a)
type Coupon = Text
type JSObject = RemotePtr JSPtr
type EventData = Value
type Attr x a = ReadWriteAttr x a a
type WriteAttr x i = ReadWriteAttr x i ()
type ReadAttr x o = ReadWriteAttr x () o
type Canvas = Element
type Vector = Point
type Point = (Double, Double)
type ColorStop = (Double, Color)
type DragData = String
type KeyCode = Int
type WriteBuffer = IORef Builder
type ReadBuffer = IORef ByteString
type TypeMap = HashMap Int16 (Text, ThriftType)
type LazyByteString = ByteString
type LazyText = Text
type StrictByteString = ByteString
type StrictText = Text
type POSIXTime = NominalDiffTime
type Month = Int
type DayOfMonth = Int
type Years = Int
type Months = Int
type Days = Int
type Year = Int
type Month = Int
type DayOfMonth = Int
type Minutes = Int
type Hours = Int
type Hour = Int
type Minute = Int
type Year = Int
type DayOfYear = Int
type Year = Int
type WeekOfYear = Int
type DayOfWeek = Int
type Year = Int
type Month = Int
type DayOfWeek = Int
type LeapSecondTable = Either UTCTime AbsoluteTime -> DiffTime
type Renderer a = String -> String -> [WindowSpaceInfo] -> [Window] -> WindowSet -> a
type MarkupRenderer = Renderer Markup
type ClientState = [Connection]
type Time = Rational
type Arc = (Time, Time)
type Event a = (Arc, Arc, a)
type ColourD = Colour Double
type OscMap = Map Param (Maybe Datum)
type OscPattern = Pattern OscMap
type RefMap k v = Map k (v k)
type HostName = String
type POSIXTime = NominalDiffTime
type LeapSecondTable = Day -> Integer
type NumericPadOption = Maybe Char
type IntervalSequence' t = IntervalSequence t t
type DatePattern = IntervalSequence' Day
type OptionedParser a = ReaderT Options Parser a
type TimerIO = Timer IO
type TimerIO = Timer IO
type Delay = Int64
type RenameM a b = ReaderT (Suggestor a b) (State (Map a b, Set b))
type Suggestor a b = a -> [b]
type ScopeM a = ScopeT a Identity
type FS = Function :+: Signature
type RenameMap a = Map (HsId a) (HsId String)
type RenameMap a = Map (HsId a) (HsId String)
type HashAndSignatureAlgorithm = (HashAlgorithm, SignatureAlgorithm)
type SessionID = ByteString
type Credential = (CertificateChain, PrivKey)
type CompressionID = Word8
type BulkBlock = BulkIV -> ByteString -> (ByteString, BulkIV)
type BulkAEAD = BulkNonce -> ByteString -> BulkAdditionalData -> (ByteString, AuthTag)
type CipherID = Word16
type BulkKey = ByteString
type BulkIV = ByteString
type BulkNonce = ByteString
type BulkAdditionalData = ByteString
type HDoc = Prec -> Exp
type Prec = Int
type Supply x = State [x]
type Name = String
type NameM = Supply Name
type 𝔹 = Bool
type Todo = Tree TodoItem
type TodoMap = Map String Todo
type Formatter c = Reader (PrintConfig c) [OutItem]
type Tokenizer s a = [Token s a]
type Token s a = (Regex s, Response s a)
type Pos = (Int, Int)
type Tokenizer = Text -> EitherList Text Text
type Tokenizer = String -> EitherList String String
type TCCMP' = Ptr CChar -> CInt -> Ptr CChar -> CInt -> Ptr Word8 -> IO CInt
type TDBQRYPROC' = Ptr Word8 -> CInt -> Ptr MAP -> Ptr Word8 -> IO CInt
type PtrLen = (Ptr Word8, CInt)
type SampleRate = Frequency
type BlockSize = Int
type Sample = Float
type AudioBlock = Vector Sample
type Value = Either TOML TOMLV
type Token = Either [ByteString] (ByteString, TOMLV)
type SearchPath = [FilePath]
type LocatedData a = (FilePath, a)
type Code a = (Int, a)
type ChunkLength = Int
type Matches a = a -> a -> Bool
type Tps = [Tp]
type List a = [a] -> [a]
type Trees a = [Tree a]
type Spreaded a = Map Int [a]
type Phased a = Map Int (List a)
type StateFix s = StateFixT s Identity
type MapSubstitution = Map Int Tp
type QuantorMap = [(Int, String)]
type Forall = Quantification Universal
type Exists = Quantification Existential
type TypeSynonyms = Map String (Int, Tps -> Tp)
type TypeSynonymOrdering = Map String Int
type OrderedTypeSynonyms = (TypeSynonymOrdering, TypeSynonyms)
type Predicates = [Predicate]
type ClassEnvironment = Map String Class
type Class = ([String], Instances)
type Instances = [Instance]
type Instance = (Predicate, Predicates)
type TpScheme = Forall QType
type QType = Qualification Predicates Tp
type Scheme qs = Forall (Qualification qs Tp)
type SigmaVar = Int
type TpSchemeMap = Map SigmaVar TpScheme
type SigmaPreds = Sigma Predicates
type Kind = Tp
type Kinds = [Kind]
type KindScheme = TpScheme
type VertexInfo = (VertexKind, Maybe Tp)
type TypeGraphPath info = Path (EdgeId, PathStep info)
type CliqueList = [Clique]
type Constraints m = [Constraint m]
type TypeClassDirectives info = [TypeClassDirective info]
type BasicMonad f = StateFixT (f ()) (Writer LogEntries)
type PathHeuristics info = Path (EdgeId, info) -> [Heuristic info]
type Chunks constraint = [Chunk constraint]
type Chunk constraint = (ChunkID, Tree constraint)
type ChunkID = Int
type Greedy info = BasicMonad (GreedyS info)
type GreedyS info = And (Fix (BasicState info)) (And (Simple (TIState info)) (And (Simple (GreedyState info)) (Simple (OverloadingState info))))
type GreedySimple info = BasicMonad (GreedySimpleS info)
type GreedySimpleS info = And (Fix (BasicState info)) (And (Simple (TIState info)) (And (Simple (SimpleState info)) (Simple (OverloadingState info))))
type TG info = BasicMonad (TGS info)
type TGS info = And (Fix (BasicState info)) (And (Simple (TIState info)) (And (Simple (TypeGraphState info)) (Simple (OverloadingState info))))
type FailReason = String
type Tests = [SomeTest]
type Failures = [SomeFailure]
type Subset s k = Reifies s (Set k)
type Subset s k = Reifies s (Set k)
type Subset s k = Reifies s (Set k)
type AsyncIO = Procedure (IO ()) ThreadId
type AsyncCmd = Procedure CreateProcess CmdHandles
type Results = [Result]
type Size = Int
type Score = Int
type GroupSize = Int
type Advancers = Int
type Matrix = [Block]
type Block = Map (Int, Int) Rational
type DenseMatrix = [DenseBlock]
type DenseBlock = [[Rational]]
type Model = Map String Double
type Vec e = GenericVec IOArray e
type UVec e = GenericVec IOUArray e
type Index = Int
type Value = Int
type Index = Int
type Index = Int
type Expr = [Term]
type ObjectiveFunction = (Maybe Label, Expr)
type Bounds = (BoundExpr, BoundExpr)
type Label = String
type Var = InternedString
type BoundExpr = Extended Rational
type Var = Int
type VarSet = IntSet
type VarMap = IntMap
type Model = UArray Var Bool
type Lit = Int
type LitSet = IntSet
type LitMap = IntMap
type Clause = [Lit]
type AtLeast = ([Lit], Int)
type PBLinTerm = (Integer, Lit)
type PBLinSum = [PBLinTerm]
type PBLinAtLeast = (PBLinSum, Integer)
type PBLinExactly = (PBLinSum, Integer)
type XORClause = ([Lit], Bool)
type US = LitSet
type MUS = LitSet
type CS = LitSet
type MCS = LitSet
type SS = LitSet
type MSS = LitSet
type GroupIndex = Int
type GClause = (GroupIndex, Clause)
type WeightedClause = (Weight, Clause)
type Weight = Integer
type Weight = Int
type Value = Rational
type Weight = Rational
type Value = Rational
type Var = Int
type Lit = Int
type Clause = [Lit]
type Model = UArray Var Bool
type Var = Int
type Var = String
type FSym = String
type PSym = String
type Lit = GenLit Atom
type Clause = [Lit]
type Formula = GenFormula Atom
type Entity = Int
type UPolynomial r = Polynomial r X
type UTerm k = Term k X
type UMonomial = Monomial X
type Term k v = (k, Monomial v)
type MonomialOrder v = Monomial v -> Monomial v -> Ordering
type Var = Int
type SturmChain = [UPolynomial Rational]
type Var = Int
type VarSet = IntSet
type VarMap = IntMap
type Model r = VarMap r
type Formula = BoolExpr Lit
type PBTerm = (Integer, [Lit])
type PBSum = [PBTerm]
type Formula a = BoolExpr a
type Sequent x = ([Formula x], [Formula x])
type Atom r = ArithRel (Expr r)
type BoundsEnv r = VarMap (Interval r)
type Tableau r = VarMap (Row r)
type RowIndex = Int
type ColIndex = Int
type Row r = (VarMap r, r)
type Model v = Map v AReal
type Atom c = ArithRel (Expr c)
type ExprZ = Expr Integer
type Bounds = ([Rat], [Rat], [Rat], [Rat])
type Rat = (ExprZ, Integer)
type ExprZ = Expr Integer
type QFFormula = BoolExpr Lit
type Model r = VarMap r
type ExprZ = Expr Integer
type QFFormula = BoolExpr Lit
type Model r = VarMap r
type Solver = GenericSolver Rational
type Var = Int
type Atom r = ArithRel (Expr r)
type Model = IntMap Rational
type RawModel v = IntMap v
type QFFormula = BoolExpr (Atom Rational)
type Model r = VarMap r
type Model r = VarMap r
type BoundsEnv r = VarMap (Interval r)
type Solver r = (Var, Tableau r, VarSet, VarMap (Expr r))
type LP r = State (Solver r)
type Contents = [Content Posn]
type Position = [Int]
type TRS v s = RS s (Term v s)
type SRS s = RS s [s]
type TES = TRS Identifier Identifier
type SES = SRS Identifier
type Parser = Parsec String ()
type TES = TRS Identifier Identifier
type Line = String
type Lines = String
type RelativePath = FilePath
type Context = ContextT IO
type Transformation a = [(Path a, Fix (WithRef a))]
type Path a = [Dir (PF a)]
type NiceTransformation a = [(Path a, RefRep a)]
type Path phi t i = Ctxs phi t (K0 ()) i
type Dir f t i = Ctx f t (K0 ()) i
type HWithRef phi top t = HFix (WithRef phi top) t
type MemoTable phi top ixs = HList (MemoTable' One phi top ixs)
type MemKey t = (Bool, t, t)
type MemVal phi top t = [Insert phi top t]
type Memo phi top a = State (MemoTable phi top (Ixs phi)) a
type ChildTable phi top ixs = MemoTable' Two phi top ixs
type Transformation phi top = [Insert phi top top]
type CallCC m a b = ((a -> m b) -> m a) -> m a
type Catch e m a = m a -> (e -> m a) -> m a
type Listen w m a = m a -> m (a, w)
type Pass w m a = m (a, w -> w) -> m a
type Cont r = ContT r Identity
type Reader r = ReaderT r Identity
type RWS r w s = RWST r w s Identity
type RWS r w s = RWST r w s Identity
type State s = StateT s Identity
type State s = StateT s Identity
type Errors e = Lift (Constant e)
type Except e = ExceptT e Identity
type Writer w = WriterT w Identity
type Writer w = WriterT w Identity
type Finish f α = FinishT f Identity α
type Abort e α = AbortT e Identity α
type Free f = FreeT f Identity
type Catch e (m :: * -> *) a = m a -> (e -> m a) -> m a
type Listen w (m :: * -> *) a = m a -> m (a, w)
type Pass w (m :: * -> *) a = m (a, w -> w) -> m a
type CallCC (m :: * -> *) a b = ((a -> m b) -> m a) -> m a
type Local r m a = (r -> r) -> m a -> m a
type Supply s a = SupplyT s Identity a
type Supply s a = SupplyT s Identity a
type Supply s a = SupplyT s Identity a
type TransM a = a -> Maybe a
type TransR a = a -> TransResult a
type TreeCounterIO = TreeCounter IORef
type TreeCounterSTM = TreeCounter TVar
type GenericLogTree a = Tree (Maybe (a, [[a]]), [Int], Int, DecimationType)
type CompNodeOutput a = (CompOp, [a])
type CompNode a = [CompNodeOutput a]
type Radix = Int
type DecompositionMode = (Radix, DecimationType)
type FFTTree = GenericLogTree (Complex PrettyDouble)
type TreiberStackIO a = TreiberStack IORef a
type TreiberStackSTM a = TreiberStack TVar a
type MicroTime = Word64
type TupleReader k v a = StateT [(k, v)] Maybe a
type MonotoneSegment = ([Int], [Int])
type Separation = (Ordering, Int, Int)
type TriangulationFunction = Vector V2 -> [(Int, Int, Int)]
type Lines = Array (Int, Int64) ([SGR], Char)
type Impossible t = HiddenEmptyClass t
type Operator a = a -> a -> a
type TropicalOperator a = Operator (Tropical a)
type TSessionId = Integer
type ForwardPtrs k a = TArray Int (Node k a)
type Dollars = Decimal
type Shares = Decimal
type TxnType = [String]
type BySourceBeginningBal = BySourceSummary
type BySourceGainLoss = BySourceSummary
type BySourceEndingBal = BySourceSummary
type FundName = [String]
type WildList a = [WildCard a]
type WildList a = [WildCard a]
type FinalEnv t usedef = Env t usedef usedef
type Tube a b = FreeT (TubeF a b)
type Source b m r = forall x. Tube x b m r
type Sink a m r = forall x. Tube a x m r
type Action m r = forall x. Tube x x m r
type Pump a b = CofreeT (PumpF a b)
type Tube a b = FreeT (TubeF a b)
type Source b m r = forall x. Tube x b m r
type Sink a m r = forall x. Tube a x m r
type Action m r = forall x. Tube x x m r
type Pump a b = CofreeT (PumpF a b)
type Packet = ByteString
type DevMAC = [Word8]
type Vec0 = Empty
type Vec1 = Cons Vec0
type Vec2 = Cons Vec1
type Vec3 = Cons Vec2
type Vec4 = Cons Vec3
type Vec5 = Cons Vec4
type Vec6 = Cons Vec5
type Vec7 = Cons Vec6
type Vec8 = Cons Vec7
type Vec9 = Cons Vec8
type ShortName = Char
type OX dom ran a b = Output dom ran a -> Output dom ran b
type TV src snk = Output src snk :*: Id
type TVFun src snk = OFun src snk ::*:: (->)
type RunTV src snk = forall a. TV src snk a -> IO ()
type CInput a = forall src. CommonIns src => Input src a
type CInputI a = a -> CInput a
type COutput a = forall src snk. (CommonIns src, CommonOuts snk) => Output src snk a
type CTV a = forall src snk. (CommonIns src, CommonOuts snk) => TV src snk a
type PromptInfo = (String, String)
type PanelContent = (String, Float, Float, [(String, [(String, Int)])], [PanelItem])
type PanelItem = (Int, String, PanelItemType, Float, Float, Float, Float)
type Pos = (Float, Float)
type Dimension = (Float, Float)
type Element = [Char]
type KeyboardButton = [Char]
type Name = [Char]
type Groupname = [Char]
type Color = (Float, Float, Float)
type Font = [Char]
type Relative = Bool
type Name = [Char]
type Groupname = [Char]
type Color = (Float, Float, Float)
type Font = [Char]
type Relative = Bool
type Pos = (Float, Float)
type Dimension = (Float, Float)
type Element = [Char]
type KeyboardButton = [Char]
type Name = [Char]
type Groupname = [Char]
type Color = (Float, Float, Float)
type Font = [Char]
type Relative = Bool
type Label = Char
type Weight = Float
type Node = (Label, Pos, ColorG)
type Edge = (Label, Label, ColorG, Weight)
type Pos = (Float, Float)
type KeyboardButton = [Char]
type Headers = [(CI ByteString, ByteString)]
type ServerApp = PendingConnection -> IO ()
type ServerProgram = Connection -> StdOutMutex -> ConnectionSendMutex -> IO ()
type StdOutMutex = Mutex [[Char]]
type ConnectionSendMutex = Mutex ()
type ClientApp a = Connection -> IO a
type Counter = IORef Int
type Capabilities = Set Capability
type Twilio = TwilioT IO
type Credentials = (AccountSID, AuthToken)
type Action = FilePath -> UTCTime -> IO ()
type FileTest = FilePath -> UTCTime -> Bool
type Dep = DepM ()
type APIQuery = [APIQueryItem]
type APIQueryItem = (ByteString, PV)
type APIQuery = [APIQueryItem]
type APIQueryItem = (ByteString, PV)
type TwitterBaseM m = MonadResource m
type TwitterBaseM m = MonadResource m
type TW m = ReaderT TWEnv m
type TwitterBaseM m = MonadResource m
type TW = ReaderT TWEnv IO
type DateString = String
type UserId = Integer
type Friends = [UserId]
type URLString = String
type UserName = Text
type StatusId = Integer
type LanguageCode = String
type UserId = Integer
type Friends = [UserId]
type URIString = Text
type UserName = Text
type StatusId = Integer
type LanguageCode = String
type EntityIndices = [Int]
type UserId = Integer
type Friends = [UserId]
type URIString = Text
type UserName = Text
type StatusId = Integer
type LanguageCode = String
type EntityIndices = [Int]
type FastTCQueue = ToCatQueue FastQueue
type Nand b1 b2 = Not (And b1 b2)
type Nor b1 b2 = Not (Or b1 b2)
type Universal fun = forall arg. Inhabitant (Domain fun) arg => WrappedApp fun arg
type D5000 = :* (:* (:* D5 D0) D0) D0
type D4999 = :* (:* (:* D4 D9) D9) D9
type D4998 = :* (:* (:* D4 D9) D9) D8
type D4997 = :* (:* (:* D4 D9) D9) D7
type D4996 = :* (:* (:* D4 D9) D9) D6
type D4995 = :* (:* (:* D4 D9) D9) D5
type D4994 = :* (:* (:* D4 D9) D9) D4
type D4993 = :* (:* (:* D4 D9) D9) D3
type D4992 = :* (:* (:* D4 D9) D9) D2
type D4991 = :* (:* (:* D4 D9) D9) D1
type D4990 = :* (:* (:* D4 D9) D9) D0
type D4989 = :* (:* (:* D4 D9) D8) D9
type D4988 = :* (:* (:* D4 D9) D8) D8
type D4987 = :* (:* (:* D4 D9) D8) D7
type D4986 = :* (:* (:* D4 D9) D8) D6
type D4985 = :* (:* (:* D4 D9) D8) D5
type D4984 = :* (:* (:* D4 D9) D8) D4
type D4983 = :* (:* (:* D4 D9) D8) D3
type D4982 = :* (:* (:* D4 D9) D8) D2
type D4981 = :* (:* (:* D4 D9) D8) D1
type D4980 = :* (:* (:* D4 D9) D8) D0
type D4979 = :* (:* (:* D4 D9) D7) D9
type D4978 = :* (:* (:* D4 D9) D7) D8
type D4977 = :* (:* (:* D4 D9) D7) D7
type D4976 = :* (:* (:* D4 D9) D7) D6
type D4975 = :* (:* (:* D4 D9) D7) D5
type D4974 = :* (:* (:* D4 D9) D7) D4
type D4973 = :* (:* (:* D4 D9) D7) D3
type D4972 = :* (:* (:* D4 D9) D7) D2
type D4971 = :* (:* (:* D4 D9) D7) D1
type D4970 = :* (:* (:* D4 D9) D7) D0
type D4969 = :* (:* (:* D4 D9) D6) D9
type D4968 = :* (:* (:* D4 D9) D6) D8
type D4967 = :* (:* (:* D4 D9) D6) D7
type D4966 = :* (:* (:* D4 D9) D6) D6
type D4965 = :* (:* (:* D4 D9) D6) D5
type D4964 = :* (:* (:* D4 D9) D6) D4
type D4963 = :* (:* (:* D4 D9) D6) D3
type D4962 = :* (:* (:* D4 D9) D6) D2
type D4961 = :* (:* (:* D4 D9) D6) D1
type D4960 = :* (:* (:* D4 D9) D6) D0
type D4959 = :* (:* (:* D4 D9) D5) D9
type D4958 = :* (:* (:* D4 D9) D5) D8
type D4957 = :* (:* (:* D4 D9) D5) D7
type D4956 = :* (:* (:* D4 D9) D5) D6
type D4955 = :* (:* (:* D4 D9) D5) D5
type D4954 = :* (:* (:* D4 D9) D5) D4
type D4953 = :* (:* (:* D4 D9) D5) D3
type D4952 = :* (:* (:* D4 D9) D5) D2
type D4951 = :* (:* (:* D4 D9) D5) D1
type D4950 = :* (:* (:* D4 D9) D5) D0
type D4949 = :* (:* (:* D4 D9) D4) D9
type D4948 = :* (:* (:* D4 D9) D4) D8
type D4947 = :* (:* (:* D4 D9) D4) D7
type D4946 = :* (:* (:* D4 D9) D4) D6
type D4945 = :* (:* (:* D4 D9) D4) D5
type D4944 = :* (:* (:* D4 D9) D4) D4
type D4943 = :* (:* (:* D4 D9) D4) D3
type D4942 = :* (:* (:* D4 D9) D4) D2
type D4941 = :* (:* (:* D4 D9) D4) D1
type D4940 = :* (:* (:* D4 D9) D4) D0
type D4939 = :* (:* (:* D4 D9) D3) D9
type D4938 = :* (:* (:* D4 D9) D3) D8
type D4937 = :* (:* (:* D4 D9) D3) D7
type D4936 = :* (:* (:* D4 D9) D3) D6
type D4935 = :* (:* (:* D4 D9) D3) D5
type D4934 = :* (:* (:* D4 D9) D3) D4
type D4933 = :* (:* (:* D4 D9) D3) D3
type D4932 = :* (:* (:* D4 D9) D3) D2
type D4931 = :* (:* (:* D4 D9) D3) D1
type D4930 = :* (:* (:* D4 D9) D3) D0
type D4929 = :* (:* (:* D4 D9) D2) D9
type D4928 = :* (:* (:* D4 D9) D2) D8
type D4927 = :* (:* (:* D4 D9) D2) D7
type D4926 = :* (:* (:* D4 D9) D2) D6
type D4925 = :* (:* (:* D4 D9) D2) D5
type D4924 = :* (:* (:* D4 D9) D2) D4
type D4923 = :* (:* (:* D4 D9) D2) D3
type D4922 = :* (:* (:* D4 D9) D2) D2
type D4921 = :* (:* (:* D4 D9) D2) D1
type D4920 = :* (:* (:* D4 D9) D2) D0
type D4919 = :* (:* (:* D4 D9) D1) D9
type D4918 = :* (:* (:* D4 D9) D1) D8
type D4917 = :* (:* (:* D4 D9) D1) D7
type D4916 = :* (:* (:* D4 D9) D1) D6
type D4915 = :* (:* (:* D4 D9) D1) D5
type D4914 = :* (:* (:* D4 D9) D1) D4
type D4913 = :* (:* (:* D4 D9) D1) D3
type D4912 = :* (:* (:* D4 D9) D1) D2
type D4911 = :* (:* (:* D4 D9) D1) D1
type D4910 = :* (:* (:* D4 D9) D1) D0
type D4909 = :* (:* (:* D4 D9) D0) D9
type D4908 = :* (:* (:* D4 D9) D0) D8
type D4907 = :* (:* (:* D4 D9) D0) D7
type D4906 = :* (:* (:* D4 D9) D0) D6
type D4905 = :* (:* (:* D4 D9) D0) D5
type D4904 = :* (:* (:* D4 D9) D0) D4
type D4903 = :* (:* (:* D4 D9) D0) D3
type D4902 = :* (:* (:* D4 D9) D0) D2
type D4901 = :* (:* (:* D4 D9) D0) D1
type D4900 = :* (:* (:* D4 D9) D0) D0
type D4899 = :* (:* (:* D4 D8) D9) D9
type D4898 = :* (:* (:* D4 D8) D9) D8
type D4897 = :* (:* (:* D4 D8) D9) D7
type D4896 = :* (:* (:* D4 D8) D9) D6
type D4895 = :* (:* (:* D4 D8) D9) D5
type D4894 = :* (:* (:* D4 D8) D9) D4
type D4893 = :* (:* (:* D4 D8) D9) D3
type D4892 = :* (:* (:* D4 D8) D9) D2
type D4891 = :* (:* (:* D4 D8) D9) D1
type D4890 = :* (:* (:* D4 D8) D9) D0
type D4889 = :* (:* (:* D4 D8) D8) D9
type D4888 = :* (:* (:* D4 D8) D8) D8
type D4887 = :* (:* (:* D4 D8) D8) D7
type D4886 = :* (:* (:* D4 D8) D8) D6
type D4885 = :* (:* (:* D4 D8) D8) D5
type D4884 = :* (:* (:* D4 D8) D8) D4
type D4883 = :* (:* (:* D4 D8) D8) D3
type D4882 = :* (:* (:* D4 D8) D8) D2
type D4881 = :* (:* (:* D4 D8) D8) D1
type D4880 = :* (:* (:* D4 D8) D8) D0
type D4879 = :* (:* (:* D4 D8) D7) D9
type D4878 = :* (:* (:* D4 D8) D7) D8
type D4877 = :* (:* (:* D4 D8) D7) D7
type D4876 = :* (:* (:* D4 D8) D7) D6
type D4875 = :* (:* (:* D4 D8) D7) D5
type D4874 = :* (:* (:* D4 D8) D7) D4
type D4873 = :* (:* (:* D4 D8) D7) D3
type D4872 = :* (:* (:* D4 D8) D7) D2
type D4871 = :* (:* (:* D4 D8) D7) D1
type D4870 = :* (:* (:* D4 D8) D7) D0
type D4869 = :* (:* (:* D4 D8) D6) D9
type D4868 = :* (:* (:* D4 D8) D6) D8
type D4867 = :* (:* (:* D4 D8) D6) D7
type D4866 = :* (:* (:* D4 D8) D6) D6
type D4865 = :* (:* (:* D4 D8) D6) D5
type D4864 = :* (:* (:* D4 D8) D6) D4
type D4863 = :* (:* (:* D4 D8) D6) D3
type D4862 = :* (:* (:* D4 D8) D6) D2
type D4861 = :* (:* (:* D4 D8) D6) D1
type D4860 = :* (:* (:* D4 D8) D6) D0
type D4859 = :* (:* (:* D4 D8) D5) D9
type D4858 = :* (:* (:* D4 D8) D5) D8
type D4857 = :* (:* (:* D4 D8) D5) D7
type D4856 = :* (:* (:* D4 D8) D5) D6
type D4855 = :* (:* (:* D4 D8) D5) D5
type D4854 = :* (:* (:* D4 D8) D5) D4
type D4853 = :* (:* (:* D4 D8) D5) D3
type D4852 = :* (:* (:* D4 D8) D5) D2
type D4851 = :* (:* (:* D4 D8) D5) D1
type D4850 = :* (:* (:* D4 D8) D5) D0
type D4849 = :* (:* (:* D4 D8) D4) D9
type D4848 = :* (:* (:* D4 D8) D4) D8
type D4847 = :* (:* (:* D4 D8) D4) D7
type D4846 = :* (:* (:* D4 D8) D4) D6
type D4845 = :* (:* (:* D4 D8) D4) D5
type D4844 = :* (:* (:* D4 D8) D4) D4
type D4843 = :* (:* (:* D4 D8) D4) D3
type D4842 = :* (:* (:* D4 D8) D4) D2
type D4841 = :* (:* (:* D4 D8) D4) D1
type D4840 = :* (:* (:* D4 D8) D4) D0
type D4839 = :* (:* (:* D4 D8) D3) D9
type D4838 = :* (:* (:* D4 D8) D3) D8
type D4837 = :* (:* (:* D4 D8) D3) D7
type D4836 = :* (:* (:* D4 D8) D3) D6
type D4835 = :* (:* (:* D4 D8) D3) D5
type D4834 = :* (:* (:* D4 D8) D3) D4
type D4833 = :* (:* (:* D4 D8) D3) D3
type D4832 = :* (:* (:* D4 D8) D3) D2
type D4831 = :* (:* (:* D4 D8) D3) D1
type D4830 = :* (:* (:* D4 D8) D3) D0
type D4829 = :* (:* (:* D4 D8) D2) D9
type D4828 = :* (:* (:* D4 D8) D2) D8
type D4827 = :* (:* (:* D4 D8) D2) D7
type D4826 = :* (:* (:* D4 D8) D2) D6
type D4825 = :* (:* (:* D4 D8) D2) D5
type D4824 = :* (:* (:* D4 D8) D2) D4
type D4823 = :* (:* (:* D4 D8) D2) D3
type D4822 = :* (:* (:* D4 D8) D2) D2
type D4821 = :* (:* (:* D4 D8) D2) D1
type D4820 = :* (:* (:* D4 D8) D2) D0
type D4819 = :* (:* (:* D4 D8) D1) D9
type D4818 = :* (:* (:* D4 D8) D1) D8
type D4817 = :* (:* (:* D4 D8) D1) D7
type D4816 = :* (:* (:* D4 D8) D1) D6
type D4815 = :* (:* (:* D4 D8) D1) D5
type D4814 = :* (:* (:* D4 D8) D1) D4
type D4813 = :* (:* (:* D4 D8) D1) D3
type D4812 = :* (:* (:* D4 D8) D1) D2
type D4811 = :* (:* (:* D4 D8) D1) D1
type D4810 = :* (:* (:* D4 D8) D1) D0
type D4809 = :* (:* (:* D4 D8) D0) D9
type D4808 = :* (:* (:* D4 D8) D0) D8
type D4807 = :* (:* (:* D4 D8) D0) D7
type D4806 = :* (:* (:* D4 D8) D0) D6
type D4805 = :* (:* (:* D4 D8) D0) D5
type D4804 = :* (:* (:* D4 D8) D0) D4
type D4803 = :* (:* (:* D4 D8) D0) D3
type D4802 = :* (:* (:* D4 D8) D0) D2
type D4801 = :* (:* (:* D4 D8) D0) D1
type D4800 = :* (:* (:* D4 D8) D0) D0
type D4799 = :* (:* (:* D4 D7) D9) D9
type D4798 = :* (:* (:* D4 D7) D9) D8
type D4797 = :* (:* (:* D4 D7) D9) D7
type D4796 = :* (:* (:* D4 D7) D9) D6
type D4795 = :* (:* (:* D4 D7) D9) D5
type D4794 = :* (:* (:* D4 D7) D9) D4
type D4793 = :* (:* (:* D4 D7) D9) D3
type D4792 = :* (:* (:* D4 D7) D9) D2
type D4791 = :* (:* (:* D4 D7) D9) D1
type D4790 = :* (:* (:* D4 D7) D9) D0
type D4789 = :* (:* (:* D4 D7) D8) D9
type D4788 = :* (:* (:* D4 D7) D8) D8
type D4787 = :* (:* (:* D4 D7) D8) D7
type D4786 = :* (:* (:* D4 D7) D8) D6
type D4785 = :* (:* (:* D4 D7) D8) D5
type D4784 = :* (:* (:* D4 D7) D8) D4
type D4783 = :* (:* (:* D4 D7) D8) D3
type D4782 = :* (:* (:* D4 D7) D8) D2
type D4781 = :* (:* (:* D4 D7) D8) D1
type D4780 = :* (:* (:* D4 D7) D8) D0
type D4779 = :* (:* (:* D4 D7) D7) D9
type D4778 = :* (:* (:* D4 D7) D7) D8
type D4777 = :* (:* (:* D4 D7) D7) D7
type D4776 = :* (:* (:* D4 D7) D7) D6
type D4775 = :* (:* (:* D4 D7) D7) D5
type D4774 = :* (:* (:* D4 D7) D7) D4
type D4773 = :* (:* (:* D4 D7) D7) D3
type D4772 = :* (:* (:* D4 D7) D7) D2
type D4771 = :* (:* (:* D4 D7) D7) D1
type D4770 = :* (:* (:* D4 D7) D7) D0
type D4769 = :* (:* (:* D4 D7) D6) D9
type D4768 = :* (:* (:* D4 D7) D6) D8
type D4767 = :* (:* (:* D4 D7) D6) D7
type D4766 = :* (:* (:* D4 D7) D6) D6
type D4765 = :* (:* (:* D4 D7) D6) D5
type D4764 = :* (:* (:* D4 D7) D6) D4
type D4763 = :* (:* (:* D4 D7) D6) D3
type D4762 = :* (:* (:* D4 D7) D6) D2
type D4761 = :* (:* (:* D4 D7) D6) D1
type D4760 = :* (:* (:* D4 D7) D6) D0
type D4759 = :* (:* (:* D4 D7) D5) D9
type D4758 = :* (:* (:* D4 D7) D5) D8
type D4757 = :* (:* (:* D4 D7) D5) D7
type D4756 = :* (:* (:* D4 D7) D5) D6
type D4755 = :* (:* (:* D4 D7) D5) D5
type D4754 = :* (:* (:* D4 D7) D5) D4
type D4753 = :* (:* (:* D4 D7) D5) D3
type D4752 = :* (:* (:* D4 D7) D5) D2
type D4751 = :* (:* (:* D4 D7) D5) D1
type D4750 = :* (:* (:* D4 D7) D5) D0
type D4749 = :* (:* (:* D4 D7) D4) D9
type D4748 = :* (:* (:* D4 D7) D4) D8
type D4747 = :* (:* (:* D4 D7) D4) D7
type D4746 = :* (:* (:* D4 D7) D4) D6
type D4745 = :* (:* (:* D4 D7) D4) D5
type D4744 = :* (:* (:* D4 D7) D4) D4
type D4743 = :* (:* (:* D4 D7) D4) D3
type D4742 = :* (:* (:* D4 D7) D4) D2
type D4741 = :* (:* (:* D4 D7) D4) D1
type D4740 = :* (:* (:* D4 D7) D4) D0
type D4739 = :* (:* (:* D4 D7) D3) D9
type D4738 = :* (:* (:* D4 D7) D3) D8
type D4737 = :* (:* (:* D4 D7) D3) D7
type D4736 = :* (:* (:* D4 D7) D3) D6
type D4735 = :* (:* (:* D4 D7) D3) D5
type D4734 = :* (:* (:* D4 D7) D3) D4
type D4733 = :* (:* (:* D4 D7) D3) D3
type D4732 = :* (:* (:* D4 D7) D3) D2
type D4731 = :* (:* (:* D4 D7) D3) D1
type D4730 = :* (:* (:* D4 D7) D3) D0
type D4729 = :* (:* (:* D4 D7) D2) D9
type D4728 = :* (:* (:* D4 D7) D2) D8
type D4727 = :* (:* (:* D4 D7) D2) D7
type D4726 = :* (:* (:* D4 D7) D2) D6
type D4725 = :* (:* (:* D4 D7) D2) D5
type D4724 = :* (:* (:* D4 D7) D2) D4
type D4723 = :* (:* (:* D4 D7) D2) D3
type D4722 = :* (:* (:* D4 D7) D2) D2
type D4721 = :* (:* (:* D4 D7) D2) D1
type D4720 = :* (:* (:* D4 D7) D2) D0
type D4719 = :* (:* (:* D4 D7) D1) D9
type D4718 = :* (:* (:* D4 D7) D1) D8
type D4717 = :* (:* (:* D4 D7) D1) D7
type D4716 = :* (:* (:* D4 D7) D1) D6
type D4715 = :* (:* (:* D4 D7) D1) D5
type D4714 = :* (:* (:* D4 D7) D1) D4
type D4713 = :* (:* (:* D4 D7) D1) D3
type D4712 = :* (:* (:* D4 D7) D1) D2
type D4711 = :* (:* (:* D4 D7) D1) D1
type D4710 = :* (:* (:* D4 D7) D1) D0
type D4709 = :* (:* (:* D4 D7) D0) D9
type D4708 = :* (:* (:* D4 D7) D0) D8
type D4707 = :* (:* (:* D4 D7) D0) D7
type D4706 = :* (:* (:* D4 D7) D0) D6
type D4705 = :* (:* (:* D4 D7) D0) D5
type D4704 = :* (:* (:* D4 D7) D0) D4
type D4703 = :* (:* (:* D4 D7) D0) D3
type D4702 = :* (:* (:* D4 D7) D0) D2
type D4701 = :* (:* (:* D4 D7) D0) D1
type D4700 = :* (:* (:* D4 D7) D0) D0
type D4699 = :* (:* (:* D4 D6) D9) D9
type D4698 = :* (:* (:* D4 D6) D9) D8
type D4697 = :* (:* (:* D4 D6) D9) D7
type D4696 = :* (:* (:* D4 D6) D9) D6
type D4695 = :* (:* (:* D4 D6) D9) D5
type D4694 = :* (:* (:* D4 D6) D9) D4
type D4693 = :* (:* (:* D4 D6) D9) D3
type D4692 = :* (:* (:* D4 D6) D9) D2
type D4691 = :* (:* (:* D4 D6) D9) D1
type D4690 = :* (:* (:* D4 D6) D9) D0
type D4689 = :* (:* (:* D4 D6) D8) D9
type D4688 = :* (:* (:* D4 D6) D8) D8
type D4687 = :* (:* (:* D4 D6) D8) D7
type D4686 = :* (:* (:* D4 D6) D8) D6
type D4685 = :* (:* (:* D4 D6) D8) D5
type D4684 = :* (:* (:* D4 D6) D8) D4
type D4683 = :* (:* (:* D4 D6) D8) D3
type D4682 = :* (:* (:* D4 D6) D8) D2
type D4681 = :* (:* (:* D4 D6) D8) D1
type D4680 = :* (:* (:* D4 D6) D8) D0
type D4679 = :* (:* (:* D4 D6) D7) D9
type D4678 = :* (:* (:* D4 D6) D7) D8
type D4677 = :* (:* (:* D4 D6) D7) D7
type D4676 = :* (:* (:* D4 D6) D7) D6
type D4675 = :* (:* (:* D4 D6) D7) D5
type D4674 = :* (:* (:* D4 D6) D7) D4
type D4673 = :* (:* (:* D4 D6) D7) D3
type D4672 = :* (:* (:* D4 D6) D7) D2
type D4671 = :* (:* (:* D4 D6) D7) D1
type D4670 = :* (:* (:* D4 D6) D7) D0
type D4669 = :* (:* (:* D4 D6) D6) D9
type D4668 = :* (:* (:* D4 D6) D6) D8
type D4667 = :* (:* (:* D4 D6) D6) D7
type D4666 = :* (:* (:* D4 D6) D6) D6
type D4665 = :* (:* (:* D4 D6) D6) D5
type D4664 = :* (:* (:* D4 D6) D6) D4
type D4663 = :* (:* (:* D4 D6) D6) D3
type D4662 = :* (:* (:* D4 D6) D6) D2
type D4661 = :* (:* (:* D4 D6) D6) D1
type D4660 = :* (:* (:* D4 D6) D6) D0
type D4659 = :* (:* (:* D4 D6) D5) D9
type D4658 = :* (:* (:* D4 D6) D5) D8
type D4657 = :* (:* (:* D4 D6) D5) D7
type D4656 = :* (:* (:* D4 D6) D5) D6
type D4655 = :* (:* (:* D4 D6) D5) D5
type D4654 = :* (:* (:* D4 D6) D5) D4
type D4653 = :* (:* (:* D4 D6) D5) D3
type D4652 = :* (:* (:* D4 D6) D5) D2
type D4651 = :* (:* (:* D4 D6) D5) D1
type D4650 = :* (:* (:* D4 D6) D5) D0
type D4649 = :* (:* (:* D4 D6) D4) D9
type D4648 = :* (:* (:* D4 D6) D4) D8
type D4647 = :* (:* (:* D4 D6) D4) D7
type D4646 = :* (:* (:* D4 D6) D4) D6
type D4645 = :* (:* (:* D4 D6) D4) D5
type D4644 = :* (:* (:* D4 D6) D4) D4
type D4643 = :* (:* (:* D4 D6) D4) D3
type D4642 = :* (:* (:* D4 D6) D4) D2
type D4641 = :* (:* (:* D4 D6) D4) D1
type D4640 = :* (:* (:* D4 D6) D4) D0
type D4639 = :* (:* (:* D4 D6) D3) D9
type D4638 = :* (:* (:* D4 D6) D3) D8
type D4637 = :* (:* (:* D4 D6) D3) D7
type D4636 = :* (:* (:* D4 D6) D3) D6
type D4635 = :* (:* (:* D4 D6) D3) D5
type D4634 = :* (:* (:* D4 D6) D3) D4
type D4633 = :* (:* (:* D4 D6) D3) D3
type D4632 = :* (:* (:* D4 D6) D3) D2
type D4631 = :* (:* (:* D4 D6) D3) D1
type D4630 = :* (:* (:* D4 D6) D3) D0
type D4629 = :* (:* (:* D4 D6) D2) D9
type D4628 = :* (:* (:* D4 D6) D2) D8
type D4627 = :* (:* (:* D4 D6) D2) D7
type D4626 = :* (:* (:* D4 D6) D2) D6
type D4625 = :* (:* (:* D4 D6) D2) D5
type D4624 = :* (:* (:* D4 D6) D2) D4
type D4623 = :* (:* (:* D4 D6) D2) D3
type D4622 = :* (:* (:* D4 D6) D2) D2
type D4621 = :* (:* (:* D4 D6) D2) D1
type D4620 = :* (:* (:* D4 D6) D2) D0
type D4619 = :* (:* (:* D4 D6) D1) D9
type D4618 = :* (:* (:* D4 D6) D1) D8
type D4617 = :* (:* (:* D4 D6) D1) D7
type D4616 = :* (:* (:* D4 D6) D1) D6
type D4615 = :* (:* (:* D4 D6) D1) D5
type D4614 = :* (:* (:* D4 D6) D1) D4
type D4613 = :* (:* (:* D4 D6) D1) D3
type D4612 = :* (:* (:* D4 D6) D1) D2
type D4611 = :* (:* (:* D4 D6) D1) D1
type D4610 = :* (:* (:* D4 D6) D1) D0
type D4609 = :* (:* (:* D4 D6) D0) D9
type D4608 = :* (:* (:* D4 D6) D0) D8
type D4607 = :* (:* (:* D4 D6) D0) D7
type D4606 = :* (:* (:* D4 D6) D0) D6
type D4605 = :* (:* (:* D4 D6) D0) D5
type D4604 = :* (:* (:* D4 D6) D0) D4
type D4603 = :* (:* (:* D4 D6) D0) D3
type D4602 = :* (:* (:* D4 D6) D0) D2
type D4601 = :* (:* (:* D4 D6) D0) D1
type D4600 = :* (:* (:* D4 D6) D0) D0
type D4599 = :* (:* (:* D4 D5) D9) D9
type D4598 = :* (:* (:* D4 D5) D9) D8
type D4597 = :* (:* (:* D4 D5) D9) D7
type D4596 = :* (:* (:* D4 D5) D9) D6
type D4595 = :* (:* (:* D4 D5) D9) D5
type D4594 = :* (:* (:* D4 D5) D9) D4
type D4593 = :* (:* (:* D4 D5) D9) D3
type D4592 = :* (:* (:* D4 D5) D9) D2
type D4591 = :* (:* (:* D4 D5) D9) D1
type D4590 = :* (:* (:* D4 D5) D9) D0
type D4589 = :* (:* (:* D4 D5) D8) D9
type D4588 = :* (:* (:* D4 D5) D8) D8
type D4587 = :* (:* (:* D4 D5) D8) D7
type D4586 = :* (:* (:* D4 D5) D8) D6
type D4585 = :* (:* (:* D4 D5) D8) D5
type D4584 = :* (:* (:* D4 D5) D8) D4
type D4583 = :* (:* (:* D4 D5) D8) D3
type D4582 = :* (:* (:* D4 D5) D8) D2
type D4581 = :* (:* (:* D4 D5) D8) D1
type D4580 = :* (:* (:* D4 D5) D8) D0
type D4579 = :* (:* (:* D4 D5) D7) D9
type D4578 = :* (:* (:* D4 D5) D7) D8
type D4577 = :* (:* (:* D4 D5) D7) D7
type D4576 = :* (:* (:* D4 D5) D7) D6
type D4575 = :* (:* (:* D4 D5) D7) D5
type D4574 = :* (:* (:* D4 D5) D7) D4
type D4573 = :* (:* (:* D4 D5) D7) D3
type D4572 = :* (:* (:* D4 D5) D7) D2
type D4571 = :* (:* (:* D4 D5) D7) D1
type D4570 = :* (:* (:* D4 D5) D7) D0
type D4569 = :* (:* (:* D4 D5) D6) D9
type D4568 = :* (:* (:* D4 D5) D6) D8
type D4567 = :* (:* (:* D4 D5) D6) D7
type D4566 = :* (:* (:* D4 D5) D6) D6
type D4565 = :* (:* (:* D4 D5) D6) D5
type D4564 = :* (:* (:* D4 D5) D6) D4
type D4563 = :* (:* (:* D4 D5) D6) D3
type D4562 = :* (:* (:* D4 D5) D6) D2
type D4561 = :* (:* (:* D4 D5) D6) D1
type D4560 = :* (:* (:* D4 D5) D6) D0
type D4559 = :* (:* (:* D4 D5) D5) D9
type D4558 = :* (:* (:* D4 D5) D5) D8
type D4557 = :* (:* (:* D4 D5) D5) D7
type D4556 = :* (:* (:* D4 D5) D5) D6
type D4555 = :* (:* (:* D4 D5) D5) D5
type D4554 = :* (:* (:* D4 D5) D5) D4
type D4553 = :* (:* (:* D4 D5) D5) D3
type D4552 = :* (:* (:* D4 D5) D5) D2
type D4551 = :* (:* (:* D4 D5) D5) D1
type D4550 = :* (:* (:* D4 D5) D5) D0
type D4549 = :* (:* (:* D4 D5) D4) D9
type D4548 = :* (:* (:* D4 D5) D4) D8
type D4547 = :* (:* (:* D4 D5) D4) D7
type D4546 = :* (:* (:* D4 D5) D4) D6
type D4545 = :* (:* (:* D4 D5) D4) D5
type D4544 = :* (:* (:* D4 D5) D4) D4
type D4543 = :* (:* (:* D4 D5) D4) D3
type D4542 = :* (:* (:* D4 D5) D4) D2
type D4541 = :* (:* (:* D4 D5) D4) D1
type D4540 = :* (:* (:* D4 D5) D4) D0
type D4539 = :* (:* (:* D4 D5) D3) D9
type D4538 = :* (:* (:* D4 D5) D3) D8
type D4537 = :* (:* (:* D4 D5) D3) D7
type D4536 = :* (:* (:* D4 D5) D3) D6
type D4535 = :* (:* (:* D4 D5) D3) D5
type D4534 = :* (:* (:* D4 D5) D3) D4
type D4533 = :* (:* (:* D4 D5) D3) D3
type D4532 = :* (:* (:* D4 D5) D3) D2
type D4531 = :* (:* (:* D4 D5) D3) D1
type D4530 = :* (:* (:* D4 D5) D3) D0
type D4529 = :* (:* (:* D4 D5) D2) D9
type D4528 = :* (:* (:* D4 D5) D2) D8
type D4527 = :* (:* (:* D4 D5) D2) D7
type D4526 = :* (:* (:* D4 D5) D2) D6
type D4525 = :* (:* (:* D4 D5) D2) D5
type D4524 = :* (:* (:* D4 D5) D2) D4
type D4523 = :* (:* (:* D4 D5) D2) D3
type D4522 = :* (:* (:* D4 D5) D2) D2
type D4521 = :* (:* (:* D4 D5) D2) D1
type D4520 = :* (:* (:* D4 D5) D2) D0
type D4519 = :* (:* (:* D4 D5) D1) D9
type D4518 = :* (:* (:* D4 D5) D1) D8
type D4517 = :* (:* (:* D4 D5) D1) D7
type D4516 = :* (:* (:* D4 D5) D1) D6
type D4515 = :* (:* (:* D4 D5) D1) D5
type D4514 = :* (:* (:* D4 D5) D1) D4
type D4513 = :* (:* (:* D4 D5) D1) D3
type D4512 = :* (:* (:* D4 D5) D1) D2
type D4511 = :* (:* (:* D4 D5) D1) D1
type D4510 = :* (:* (:* D4 D5) D1) D0
type D4509 = :* (:* (:* D4 D5) D0) D9
type D4508 = :* (:* (:* D4 D5) D0) D8
type D4507 = :* (:* (:* D4 D5) D0) D7
type D4506 = :* (:* (:* D4 D5) D0) D6
type D4505 = :* (:* (:* D4 D5) D0) D5
type D4504 = :* (:* (:* D4 D5) D0) D4
type D4503 = :* (:* (:* D4 D5) D0) D3
type D4502 = :* (:* (:* D4 D5) D0) D2
type D4501 = :* (:* (:* D4 D5) D0) D1
type D4500 = :* (:* (:* D4 D5) D0) D0
type D4499 = :* (:* (:* D4 D4) D9) D9
type D4498 = :* (:* (:* D4 D4) D9) D8
type D4497 = :* (:* (:* D4 D4) D9) D7
type D4496 = :* (:* (:* D4 D4) D9) D6
type D4495 = :* (:* (:* D4 D4) D9) D5
type D4494 = :* (:* (:* D4 D4) D9) D4
type D4493 = :* (:* (:* D4 D4) D9) D3
type D4492 = :* (:* (:* D4 D4) D9) D2
type D4491 = :* (:* (:* D4 D4) D9) D1
type D4490 = :* (:* (:* D4 D4) D9) D0
type D4489 = :* (:* (:* D4 D4) D8) D9
type D4488 = :* (:* (:* D4 D4) D8) D8
type D4487 = :* (:* (:* D4 D4) D8) D7
type D4486 = :* (:* (:* D4 D4) D8) D6
type D4485 = :* (:* (:* D4 D4) D8) D5
type D4484 = :* (:* (:* D4 D4) D8) D4
type D4483 = :* (:* (:* D4 D4) D8) D3
type D4482 = :* (:* (:* D4 D4) D8) D2
type D4481 = :* (:* (:* D4 D4) D8) D1
type D4480 = :* (:* (:* D4 D4) D8) D0
type D4479 = :* (:* (:* D4 D4) D7) D9
type D4478 = :* (:* (:* D4 D4) D7) D8
type D4477 = :* (:* (:* D4 D4) D7) D7
type D4476 = :* (:* (:* D4 D4) D7) D6
type D4475 = :* (:* (:* D4 D4) D7) D5
type D4474 = :* (:* (:* D4 D4) D7) D4
type D4473 = :* (:* (:* D4 D4) D7) D3
type D4472 = :* (:* (:* D4 D4) D7) D2
type D4471 = :* (:* (:* D4 D4) D7) D1
type D4470 = :* (:* (:* D4 D4) D7) D0
type D4469 = :* (:* (:* D4 D4) D6) D9
type D4468 = :* (:* (:* D4 D4) D6) D8
type D4467 = :* (:* (:* D4 D4) D6) D7
type D4466 = :* (:* (:* D4 D4) D6) D6
type D4465 = :* (:* (:* D4 D4) D6) D5
type D4464 = :* (:* (:* D4 D4) D6) D4
type D4463 = :* (:* (:* D4 D4) D6) D3
type D4462 = :* (:* (:* D4 D4) D6) D2
type D4461 = :* (:* (:* D4 D4) D6) D1
type D4460 = :* (:* (:* D4 D4) D6) D0
type D4459 = :* (:* (:* D4 D4) D5) D9
type D4458 = :* (:* (:* D4 D4) D5) D8
type D4457 = :* (:* (:* D4 D4) D5) D7
type D4456 = :* (:* (:* D4 D4) D5) D6
type D4455 = :* (:* (:* D4 D4) D5) D5
type D4454 = :* (:* (:* D4 D4) D5) D4
type D4453 = :* (:* (:* D4 D4) D5) D3
type D4452 = :* (:* (:* D4 D4) D5) D2
type D4451 = :* (:* (:* D4 D4) D5) D1
type D4450 = :* (:* (:* D4 D4) D5) D0
type D4449 = :* (:* (:* D4 D4) D4) D9
type D4448 = :* (:* (:* D4 D4) D4) D8
type D4447 = :* (:* (:* D4 D4) D4) D7
type D4446 = :* (:* (:* D4 D4) D4) D6
type D4445 = :* (:* (:* D4 D4) D4) D5
type D4444 = :* (:* (:* D4 D4) D4) D4
type D4443 = :* (:* (:* D4 D4) D4) D3
type D4442 = :* (:* (:* D4 D4) D4) D2
type D4441 = :* (:* (:* D4 D4) D4) D1
type D4440 = :* (:* (:* D4 D4) D4) D0
type D4439 = :* (:* (:* D4 D4) D3) D9
type D4438 = :* (:* (:* D4 D4) D3) D8
type D4437 = :* (:* (:* D4 D4) D3) D7
type D4436 = :* (:* (:* D4 D4) D3) D6
type D4435 = :* (:* (:* D4 D4) D3) D5
type D4434 = :* (:* (:* D4 D4) D3) D4
type D4433 = :* (:* (:* D4 D4) D3) D3
type D4432 = :* (:* (:* D4 D4) D3) D2
type D4431 = :* (:* (:* D4 D4) D3) D1
type D4430 = :* (:* (:* D4 D4) D3) D0
type D4429 = :* (:* (:* D4 D4) D2) D9
type D4428 = :* (:* (:* D4 D4) D2) D8
type D4427 = :* (:* (:* D4 D4) D2) D7
type D4426 = :* (:* (:* D4 D4) D2) D6
type D4425 = :* (:* (:* D4 D4) D2) D5
type D4424 = :* (:* (:* D4 D4) D2) D4
type D4423 = :* (:* (:* D4 D4) D2) D3
type D4422 = :* (:* (:* D4 D4) D2) D2
type D4421 = :* (:* (:* D4 D4) D2) D1
type D4420 = :* (:* (:* D4 D4) D2) D0
type D4419 = :* (:* (:* D4 D4) D1) D9
type D4418 = :* (:* (:* D4 D4) D1) D8
type D4417 = :* (:* (:* D4 D4) D1) D7
type D4416 = :* (:* (:* D4 D4) D1) D6
type D4415 = :* (:* (:* D4 D4) D1) D5
type D4414 = :* (:* (:* D4 D4) D1) D4
type D4413 = :* (:* (:* D4 D4) D1) D3
type D4412 = :* (:* (:* D4 D4) D1) D2
type D4411 = :* (:* (:* D4 D4) D1) D1
type D4410 = :* (:* (:* D4 D4) D1) D0
type D4409 = :* (:* (:* D4 D4) D0) D9
type D4408 = :* (:* (:* D4 D4) D0) D8
type D4407 = :* (:* (:* D4 D4) D0) D7
type D4406 = :* (:* (:* D4 D4) D0) D6
type D4405 = :* (:* (:* D4 D4) D0) D5
type D4404 = :* (:* (:* D4 D4) D0) D4
type D4403 = :* (:* (:* D4 D4) D0) D3
type D4402 = :* (:* (:* D4 D4) D0) D2
type D4401 = :* (:* (:* D4 D4) D0) D1
type D4400 = :* (:* (:* D4 D4) D0) D0
type D4399 = :* (:* (:* D4 D3) D9) D9
type D4398 = :* (:* (:* D4 D3) D9) D8
type D4397 = :* (:* (:* D4 D3) D9) D7
type D4396 = :* (:* (:* D4 D3) D9) D6
type D4395 = :* (:* (:* D4 D3) D9) D5
type D4394 = :* (:* (:* D4 D3) D9) D4
type D4393 = :* (:* (:* D4 D3) D9) D3
type D4392 = :* (:* (:* D4 D3) D9) D2
type D4391 = :* (:* (:* D4 D3) D9) D1
type D4390 = :* (:* (:* D4 D3) D9) D0
type D4389 = :* (:* (:* D4 D3) D8) D9
type D4388 = :* (:* (:* D4 D3) D8) D8
type D4387 = :* (:* (:* D4 D3) D8) D7
type D4386 = :* (:* (:* D4 D3) D8) D6
type D4385 = :* (:* (:* D4 D3) D8) D5
type D4384 = :* (:* (:* D4 D3) D8) D4
type D4383 = :* (:* (:* D4 D3) D8) D3
type D4382 = :* (:* (:* D4 D3) D8) D2
type D4381 = :* (:* (:* D4 D3) D8) D1
type D4380 = :* (:* (:* D4 D3) D8) D0
type D4379 = :* (:* (:* D4 D3) D7) D9
type D4378 = :* (:* (:* D4 D3) D7) D8
type D4377 = :* (:* (:* D4 D3) D7) D7
type D4376 = :* (:* (:* D4 D3) D7) D6
type D4375 = :* (:* (:* D4 D3) D7) D5
type D4374 = :* (:* (:* D4 D3) D7) D4
type D4373 = :* (:* (:* D4 D3) D7) D3
type D4372 = :* (:* (:* D4 D3) D7) D2
type D4371 = :* (:* (:* D4 D3) D7) D1
type D4370 = :* (:* (:* D4 D3) D7) D0
type D4369 = :* (:* (:* D4 D3) D6) D9
type D4368 = :* (:* (:* D4 D3) D6) D8
type D4367 = :* (:* (:* D4 D3) D6) D7
type D4366 = :* (:* (:* D4 D3) D6) D6
type D4365 = :* (:* (:* D4 D3) D6) D5
type D4364 = :* (:* (:* D4 D3) D6) D4
type D4363 = :* (:* (:* D4 D3) D6) D3
type D4362 = :* (:* (:* D4 D3) D6) D2
type D4361 = :* (:* (:* D4 D3) D6) D1
type D4360 = :* (:* (:* D4 D3) D6) D0
type D4359 = :* (:* (:* D4 D3) D5) D9
type D4358 = :* (:* (:* D4 D3) D5) D8
type D4357 = :* (:* (:* D4 D3) D5) D7
type D4356 = :* (:* (:* D4 D3) D5) D6
type D4355 = :* (:* (:* D4 D3) D5) D5
type D4354 = :* (:* (:* D4 D3) D5) D4
type D4353 = :* (:* (:* D4 D3) D5) D3
type D4352 = :* (:* (:* D4 D3) D5) D2
type D4351 = :* (:* (:* D4 D3) D5) D1
type D4350 = :* (:* (:* D4 D3) D5) D0
type D4349 = :* (:* (:* D4 D3) D4) D9
type D4348 = :* (:* (:* D4 D3) D4) D8
type D4347 = :* (:* (:* D4 D3) D4) D7
type D4346 = :* (:* (:* D4 D3) D4) D6
type D4345 = :* (:* (:* D4 D3) D4) D5
type D4344 = :* (:* (:* D4 D3) D4) D4
type D4343 = :* (:* (:* D4 D3) D4) D3
type D4342 = :* (:* (:* D4 D3) D4) D2
type D4341 = :* (:* (:* D4 D3) D4) D1
type D4340 = :* (:* (:* D4 D3) D4) D0
type D4339 = :* (:* (:* D4 D3) D3) D9
type D4338 = :* (:* (:* D4 D3) D3) D8
type D4337 = :* (:* (:* D4 D3) D3) D7
type D4336 = :* (:* (:* D4 D3) D3) D6
type D4335 = :* (:* (:* D4 D3) D3) D5
type D4334 = :* (:* (:* D4 D3) D3) D4
type D4333 = :* (:* (:* D4 D3) D3) D3
type D4332 = :* (:* (:* D4 D3) D3) D2
type D4331 = :* (:* (:* D4 D3) D3) D1
type D4330 = :* (:* (:* D4 D3) D3) D0
type D4329 = :* (:* (:* D4 D3) D2) D9
type D4328 = :* (:* (:* D4 D3) D2) D8
type D4327 = :* (:* (:* D4 D3) D2) D7
type D4326 = :* (:* (:* D4 D3) D2) D6
type D4325 = :* (:* (:* D4 D3) D2) D5
type D4324 = :* (:* (:* D4 D3) D2) D4
type D4323 = :* (:* (:* D4 D3) D2) D3
type D4322 = :* (:* (:* D4 D3) D2) D2
type D4321 = :* (:* (:* D4 D3) D2) D1
type D4320 = :* (:* (:* D4 D3) D2) D0
type D4319 = :* (:* (:* D4 D3) D1) D9
type D4318 = :* (:* (:* D4 D3) D1) D8
type D4317 = :* (:* (:* D4 D3) D1) D7
type D4316 = :* (:* (:* D4 D3) D1) D6
type D4315 = :* (:* (:* D4 D3) D1) D5
type D4314 = :* (:* (:* D4 D3) D1) D4
type D4313 = :* (:* (:* D4 D3) D1) D3
type D4312 = :* (:* (:* D4 D3) D1) D2
type D4311 = :* (:* (:* D4 D3) D1) D1
type D4310 = :* (:* (:* D4 D3) D1) D0
type D4309 = :* (:* (:* D4 D3) D0) D9
type D4308 = :* (:* (:* D4 D3) D0) D8
type D4307 = :* (:* (:* D4 D3) D0) D7
type D4306 = :* (:* (:* D4 D3) D0) D6
type D4305 = :* (:* (:* D4 D3) D0) D5
type D4304 = :* (:* (:* D4 D3) D0) D4
type D4303 = :* (:* (:* D4 D3) D0) D3
type D4302 = :* (:* (:* D4 D3) D0) D2
type D4301 = :* (:* (:* D4 D3) D0) D1
type D4300 = :* (:* (:* D4 D3) D0) D0
type D4299 = :* (:* (:* D4 D2) D9) D9
type D4298 = :* (:* (:* D4 D2) D9) D8
type D4297 = :* (:* (:* D4 D2) D9) D7
type D4296 = :* (:* (:* D4 D2) D9) D6
type D4295 = :* (:* (:* D4 D2) D9) D5
type D4294 = :* (:* (:* D4 D2) D9) D4
type D4293 = :* (:* (:* D4 D2) D9) D3
type D4292 = :* (:* (:* D4 D2) D9) D2
type D4291 = :* (:* (:* D4 D2) D9) D1
type D4290 = :* (:* (:* D4 D2) D9) D0
type D4289 = :* (:* (:* D4 D2) D8) D9
type D4288 = :* (:* (:* D4 D2) D8) D8
type D4287 = :* (:* (:* D4 D2) D8) D7
type D4286 = :* (:* (:* D4 D2) D8) D6
type D4285 = :* (:* (:* D4 D2) D8) D5
type D4284 = :* (:* (:* D4 D2) D8) D4
type D4283 = :* (:* (:* D4 D2) D8) D3
type D4282 = :* (:* (:* D4 D2) D8) D2
type D4281 = :* (:* (:* D4 D2) D8) D1
type D4280 = :* (:* (:* D4 D2) D8) D0
type D4279 = :* (:* (:* D4 D2) D7) D9
type D4278 = :* (:* (:* D4 D2) D7) D8
type D4277 = :* (:* (:* D4 D2) D7) D7
type D4276 = :* (:* (:* D4 D2) D7) D6
type D4275 = :* (:* (:* D4 D2) D7) D5
type D4274 = :* (:* (:* D4 D2) D7) D4
type D4273 = :* (:* (:* D4 D2) D7) D3
type D4272 = :* (:* (:* D4 D2) D7) D2
type D4271 = :* (:* (:* D4 D2) D7) D1
type D4270 = :* (:* (:* D4 D2) D7) D0
type D4269 = :* (:* (:* D4 D2) D6) D9
type D4268 = :* (:* (:* D4 D2) D6) D8
type D4267 = :* (:* (:* D4 D2) D6) D7
type D4266 = :* (:* (:* D4 D2) D6) D6
type D4265 = :* (:* (:* D4 D2) D6) D5
type D4264 = :* (:* (:* D4 D2) D6) D4
type D4263 = :* (:* (:* D4 D2) D6) D3
type D4262 = :* (:* (:* D4 D2) D6) D2
type D4261 = :* (:* (:* D4 D2) D6) D1
type D4260 = :* (:* (:* D4 D2) D6) D0
type D4259 = :* (:* (:* D4 D2) D5) D9
type D4258 = :* (:* (:* D4 D2) D5) D8
type D4257 = :* (:* (:* D4 D2) D5) D7
type D4256 = :* (:* (:* D4 D2) D5) D6
type D4255 = :* (:* (:* D4 D2) D5) D5
type D4254 = :* (:* (:* D4 D2) D5) D4
type D4253 = :* (:* (:* D4 D2) D5) D3
type D4252 = :* (:* (:* D4 D2) D5) D2
type D4251 = :* (:* (:* D4 D2) D5) D1
type D4250 = :* (:* (:* D4 D2) D5) D0
type D4249 = :* (:* (:* D4 D2) D4) D9
type D4248 = :* (:* (:* D4 D2) D4) D8
type D4247 = :* (:* (:* D4 D2) D4) D7
type D4246 = :* (:* (:* D4 D2) D4) D6
type D4245 = :* (:* (:* D4 D2) D4) D5
type D4244 = :* (:* (:* D4 D2) D4) D4
type D4243 = :* (:* (:* D4 D2) D4) D3
type D4242 = :* (:* (:* D4 D2) D4) D2
type D4241 = :* (:* (:* D4 D2) D4) D1
type D4240 = :* (:* (:* D4 D2) D4) D0
type D4239 = :* (:* (:* D4 D2) D3) D9
type D4238 = :* (:* (:* D4 D2) D3) D8
type D4237 = :* (:* (:* D4 D2) D3) D7
type D4236 = :* (:* (:* D4 D2) D3) D6
type D4235 = :* (:* (:* D4 D2) D3) D5
type D4234 = :* (:* (:* D4 D2) D3) D4
type D4233 = :* (:* (:* D4 D2) D3) D3
type D4232 = :* (:* (:* D4 D2) D3) D2
type D4231 = :* (:* (:* D4 D2) D3) D1
type D4230 = :* (:* (:* D4 D2) D3) D0
type D4229 = :* (:* (:* D4 D2) D2) D9
type D4228 = :* (:* (:* D4 D2) D2) D8
type D4227 = :* (:* (:* D4 D2) D2) D7
type D4226 = :* (:* (:* D4 D2) D2) D6
type D4225 = :* (:* (:* D4 D2) D2) D5
type D4224 = :* (:* (:* D4 D2) D2) D4
type D4223 = :* (:* (:* D4 D2) D2) D3
type D4222 = :* (:* (:* D4 D2) D2) D2
type D4221 = :* (:* (:* D4 D2) D2) D1
type D4220 = :* (:* (:* D4 D2) D2) D0
type D4219 = :* (:* (:* D4 D2) D1) D9
type D4218 = :* (:* (:* D4 D2) D1) D8
type D4217 = :* (:* (:* D4 D2) D1) D7
type D4216 = :* (:* (:* D4 D2) D1) D6
type D4215 = :* (:* (:* D4 D2) D1) D5
type D4214 = :* (:* (:* D4 D2) D1) D4
type D4213 = :* (:* (:* D4 D2) D1) D3
type D4212 = :* (:* (:* D4 D2) D1) D2
type D4211 = :* (:* (:* D4 D2) D1) D1
type D4210 = :* (:* (:* D4 D2) D1) D0
type D4209 = :* (:* (:* D4 D2) D0) D9
type D4208 = :* (:* (:* D4 D2) D0) D8
type D4207 = :* (:* (:* D4 D2) D0) D7
type D4206 = :* (:* (:* D4 D2) D0) D6
type D4205 = :* (:* (:* D4 D2) D0) D5
type D4204 = :* (:* (:* D4 D2) D0) D4
type D4203 = :* (:* (:* D4 D2) D0) D3
type D4202 = :* (:* (:* D4 D2) D0) D2
type D4201 = :* (:* (:* D4 D2) D0) D1
type D4200 = :* (:* (:* D4 D2) D0) D0
type D4199 = :* (:* (:* D4 D1) D9) D9
type D4198 = :* (:* (:* D4 D1) D9) D8
type D4197 = :* (:* (:* D4 D1) D9) D7
type D4196 = :* (:* (:* D4 D1) D9) D6
type D4195 = :* (:* (:* D4 D1) D9) D5
type D4194 = :* (:* (:* D4 D1) D9) D4
type D4193 = :* (:* (:* D4 D1) D9) D3
type D4192 = :* (:* (:* D4 D1) D9) D2
type D4191 = :* (:* (:* D4 D1) D9) D1
type D4190 = :* (:* (:* D4 D1) D9) D0
type D4189 = :* (:* (:* D4 D1) D8) D9
type D4188 = :* (:* (:* D4 D1) D8) D8
type D4187 = :* (:* (:* D4 D1) D8) D7
type D4186 = :* (:* (:* D4 D1) D8) D6
type D4185 = :* (:* (:* D4 D1) D8) D5
type D4184 = :* (:* (:* D4 D1) D8) D4
type D4183 = :* (:* (:* D4 D1) D8) D3
type D4182 = :* (:* (:* D4 D1) D8) D2
type D4181 = :* (:* (:* D4 D1) D8) D1
type D4180 = :* (:* (:* D4 D1) D8) D0
type D4179 = :* (:* (:* D4 D1) D7) D9
type D4178 = :* (:* (:* D4 D1) D7) D8
type D4177 = :* (:* (:* D4 D1) D7) D7
type D4176 = :* (:* (:* D4 D1) D7) D6
type D4175 = :* (:* (:* D4 D1) D7) D5
type D4174 = :* (:* (:* D4 D1) D7) D4
type D4173 = :* (:* (:* D4 D1) D7) D3
type D4172 = :* (:* (:* D4 D1) D7) D2
type D4171 = :* (:* (:* D4 D1) D7) D1
type D4170 = :* (:* (:* D4 D1) D7) D0
type D4169 = :* (:* (:* D4 D1) D6) D9
type D4168 = :* (:* (:* D4 D1) D6) D8
type D4167 = :* (:* (:* D4 D1) D6) D7
type D4166 = :* (:* (:* D4 D1) D6) D6
type D4165 = :* (:* (:* D4 D1) D6) D5
type D4164 = :* (:* (:* D4 D1) D6) D4
type D4163 = :* (:* (:* D4 D1) D6) D3
type D4162 = :* (:* (:* D4 D1) D6) D2
type D4161 = :* (:* (:* D4 D1) D6) D1
type D4160 = :* (:* (:* D4 D1) D6) D0
type D4159 = :* (:* (:* D4 D1) D5) D9
type D4158 = :* (:* (:* D4 D1) D5) D8
type D4157 = :* (:* (:* D4 D1) D5) D7
type D4156 = :* (:* (:* D4 D1) D5) D6
type D4155 = :* (:* (:* D4 D1) D5) D5
type D4154 = :* (:* (:* D4 D1) D5) D4
type D4153 = :* (:* (:* D4 D1) D5) D3
type D4152 = :* (:* (:* D4 D1) D5) D2
type D4151 = :* (:* (:* D4 D1) D5) D1
type D4150 = :* (:* (:* D4 D1) D5) D0
type D4149 = :* (:* (:* D4 D1) D4) D9
type D4148 = :* (:* (:* D4 D1) D4) D8
type D4147 = :* (:* (:* D4 D1) D4) D7
type D4146 = :* (:* (:* D4 D1) D4) D6
type D4145 = :* (:* (:* D4 D1) D4) D5
type D4144 = :* (:* (:* D4 D1) D4) D4
type D4143 = :* (:* (:* D4 D1) D4) D3
type D4142 = :* (:* (:* D4 D1) D4) D2
type D4141 = :* (:* (:* D4 D1) D4) D1
type D4140 = :* (:* (:* D4 D1) D4) D0
type D4139 = :* (:* (:* D4 D1) D3) D9
type D4138 = :* (:* (:* D4 D1) D3) D8
type D4137 = :* (:* (:* D4 D1) D3) D7
type D4136 = :* (:* (:* D4 D1) D3) D6
type D4135 = :* (:* (:* D4 D1) D3) D5
type D4134 = :* (:* (:* D4 D1) D3) D4
type D4133 = :* (:* (:* D4 D1) D3) D3
type D4132 = :* (:* (:* D4 D1) D3) D2
type D4131 = :* (:* (:* D4 D1) D3) D1
type D4130 = :* (:* (:* D4 D1) D3) D0
type D4129 = :* (:* (:* D4 D1) D2) D9
type D4128 = :* (:* (:* D4 D1) D2) D8
type D4127 = :* (:* (:* D4 D1) D2) D7
type D4126 = :* (:* (:* D4 D1) D2) D6
type D4125 = :* (:* (:* D4 D1) D2) D5
type D4124 = :* (:* (:* D4 D1) D2) D4
type D4123 = :* (:* (:* D4 D1) D2) D3
type D4122 = :* (:* (:* D4 D1) D2) D2
type D4121 = :* (:* (:* D4 D1) D2) D1
type D4120 = :* (:* (:* D4 D1) D2) D0
type D4119 = :* (:* (:* D4 D1) D1) D9
type D4118 = :* (:* (:* D4 D1) D1) D8
type D4117 = :* (:* (:* D4 D1) D1) D7
type D4116 = :* (:* (:* D4 D1) D1) D6
type D4115 = :* (:* (:* D4 D1) D1) D5
type D4114 = :* (:* (:* D4 D1) D1) D4
type D4113 = :* (:* (:* D4 D1) D1) D3
type D4112 = :* (:* (:* D4 D1) D1) D2
type D4111 = :* (:* (:* D4 D1) D1) D1
type D4110 = :* (:* (:* D4 D1) D1) D0
type D4109 = :* (:* (:* D4 D1) D0) D9
type D4108 = :* (:* (:* D4 D1) D0) D8
type D4107 = :* (:* (:* D4 D1) D0) D7
type D4106 = :* (:* (:* D4 D1) D0) D6
type D4105 = :* (:* (:* D4 D1) D0) D5
type D4104 = :* (:* (:* D4 D1) D0) D4
type D4103 = :* (:* (:* D4 D1) D0) D3
type D4102 = :* (:* (:* D4 D1) D0) D2
type D4101 = :* (:* (:* D4 D1) D0) D1
type D4100 = :* (:* (:* D4 D1) D0) D0
type D4099 = :* (:* (:* D4 D0) D9) D9
type D4098 = :* (:* (:* D4 D0) D9) D8
type D4097 = :* (:* (:* D4 D0) D9) D7
type H1000 = :* (:* (:* D4 D0) D9) D6
type D4096 = :* (:* (:* D4 D0) D9) D6
type O10000 = :* (:* (:* D4 D0) D9) D6
type HFFF = :* (:* (:* D4 D0) D9) D5
type D4095 = :* (:* (:* D4 D0) D9) D5
type O7777 = :* (:* (:* D4 D0) D9) D5
type HFFE = :* (:* (:* D4 D0) D9) D4
type D4094 = :* (:* (:* D4 D0) D9) D4
type O7776 = :* (:* (:* D4 D0) D9) D4
type HFFD = :* (:* (:* D4 D0) D9) D3
type D4093 = :* (:* (:* D4 D0) D9) D3
type O7775 = :* (:* (:* D4 D0) D9) D3
type HFFC = :* (:* (:* D4 D0) D9) D2
type D4092 = :* (:* (:* D4 D0) D9) D2
type O7774 = :* (:* (:* D4 D0) D9) D2
type HFFB = :* (:* (:* D4 D0) D9) D1
type D4091 = :* (:* (:* D4 D0) D9) D1
type O7773 = :* (:* (:* D4 D0) D9) D1
type HFFA = :* (:* (:* D4 D0) D9) D0
type D4090 = :* (:* (:* D4 D0) D9) D0
type O7772 = :* (:* (:* D4 D0) D9) D0
type HFF9 = :* (:* (:* D4 D0) D8) D9
type D4089 = :* (:* (:* D4 D0) D8) D9
type O7771 = :* (:* (:* D4 D0) D8) D9
type HFF8 = :* (:* (:* D4 D0) D8) D8
type D4088 = :* (:* (:* D4 D0) D8) D8
type O7770 = :* (:* (:* D4 D0) D8) D8
type HFF7 = :* (:* (:* D4 D0) D8) D7
type D4087 = :* (:* (:* D4 D0) D8) D7
type O7767 = :* (:* (:* D4 D0) D8) D7
type HFF6 = :* (:* (:* D4 D0) D8) D6
type D4086 = :* (:* (:* D4 D0) D8) D6
type O7766 = :* (:* (:* D4 D0) D8) D6
type HFF5 = :* (:* (:* D4 D0) D8) D5
type D4085 = :* (:* (:* D4 D0) D8) D5
type O7765 = :* (:* (:* D4 D0) D8) D5
type HFF4 = :* (:* (:* D4 D0) D8) D4
type D4084 = :* (:* (:* D4 D0) D8) D4
type O7764 = :* (:* (:* D4 D0) D8) D4
type HFF3 = :* (:* (:* D4 D0) D8) D3
type D4083 = :* (:* (:* D4 D0) D8) D3
type O7763 = :* (:* (:* D4 D0) D8) D3
type HFF2 = :* (:* (:* D4 D0) D8) D2
type D4082 = :* (:* (:* D4 D0) D8) D2
type O7762 = :* (:* (:* D4 D0) D8) D2
type HFF1 = :* (:* (:* D4 D0) D8) D1
type D4081 = :* (:* (:* D4 D0) D8) D1
type O7761 = :* (:* (:* D4 D0) D8) D1
type HFF0 = :* (:* (:* D4 D0) D8) D0
type D4080 = :* (:* (:* D4 D0) D8) D0
type O7760 = :* (:* (:* D4 D0) D8) D0
type HFEF = :* (:* (:* D4 D0) D7) D9
type D4079 = :* (:* (:* D4 D0) D7) D9
type O7757 = :* (:* (:* D4 D0) D7) D9
type HFEE = :* (:* (:* D4 D0) D7) D8
type D4078 = :* (:* (:* D4 D0) D7) D8
type O7756 = :* (:* (:* D4 D0) D7) D8
type HFED = :* (:* (:* D4 D0) D7) D7
type D4077 = :* (:* (:* D4 D0) D7) D7
type O7755 = :* (:* (:* D4 D0) D7) D7
type HFEC = :* (:* (:* D4 D0) D7) D6
type D4076 = :* (:* (:* D4 D0) D7) D6
type O7754 = :* (:* (:* D4 D0) D7) D6
type HFEB = :* (:* (:* D4 D0) D7) D5
type D4075 = :* (:* (:* D4 D0) D7) D5
type O7753 = :* (:* (:* D4 D0) D7) D5
type HFEA = :* (:* (:* D4 D0) D7) D4
type D4074 = :* (:* (:* D4 D0) D7) D4
type O7752 = :* (:* (:* D4 D0) D7) D4
type HFE9 = :* (:* (:* D4 D0) D7) D3
type D4073 = :* (:* (:* D4 D0) D7) D3
type O7751 = :* (:* (:* D4 D0) D7) D3
type HFE8 = :* (:* (:* D4 D0) D7) D2
type D4072 = :* (:* (:* D4 D0) D7) D2
type O7750 = :* (:* (:* D4 D0) D7) D2
type HFE7 = :* (:* (:* D4 D0) D7) D1
type D4071 = :* (:* (:* D4 D0) D7) D1
type O7747 = :* (:* (:* D4 D0) D7) D1
type HFE6 = :* (:* (:* D4 D0) D7) D0
type D4070 = :* (:* (:* D4 D0) D7) D0
type O7746 = :* (:* (:* D4 D0) D7) D0
type HFE5 = :* (:* (:* D4 D0) D6) D9
type D4069 = :* (:* (:* D4 D0) D6) D9
type O7745 = :* (:* (:* D4 D0) D6) D9
type HFE4 = :* (:* (:* D4 D0) D6) D8
type D4068 = :* (:* (:* D4 D0) D6) D8
type O7744 = :* (:* (:* D4 D0) D6) D8
type HFE3 = :* (:* (:* D4 D0) D6) D7
type D4067 = :* (:* (:* D4 D0) D6) D7
type O7743 = :* (:* (:* D4 D0) D6) D7
type HFE2 = :* (:* (:* D4 D0) D6) D6
type D4066 = :* (:* (:* D4 D0) D6) D6
type O7742 = :* (:* (:* D4 D0) D6) D6
type HFE1 = :* (:* (:* D4 D0) D6) D5
type D4065 = :* (:* (:* D4 D0) D6) D5
type O7741 = :* (:* (:* D4 D0) D6) D5
type HFE0 = :* (:* (:* D4 D0) D6) D4
type D4064 = :* (:* (:* D4 D0) D6) D4
type O7740 = :* (:* (:* D4 D0) D6) D4
type HFDF = :* (:* (:* D4 D0) D6) D3
type D4063 = :* (:* (:* D4 D0) D6) D3
type O7737 = :* (:* (:* D4 D0) D6) D3
type HFDE = :* (:* (:* D4 D0) D6) D2
type D4062 = :* (:* (:* D4 D0) D6) D2
type O7736 = :* (:* (:* D4 D0) D6) D2
type HFDD = :* (:* (:* D4 D0) D6) D1
type D4061 = :* (:* (:* D4 D0) D6) D1
type O7735 = :* (:* (:* D4 D0) D6) D1
type HFDC = :* (:* (:* D4 D0) D6) D0
type D4060 = :* (:* (:* D4 D0) D6) D0
type O7734 = :* (:* (:* D4 D0) D6) D0
type HFDB = :* (:* (:* D4 D0) D5) D9
type D4059 = :* (:* (:* D4 D0) D5) D9
type O7733 = :* (:* (:* D4 D0) D5) D9
type HFDA = :* (:* (:* D4 D0) D5) D8
type D4058 = :* (:* (:* D4 D0) D5) D8
type O7732 = :* (:* (:* D4 D0) D5) D8
type HFD9 = :* (:* (:* D4 D0) D5) D7
type D4057 = :* (:* (:* D4 D0) D5) D7
type O7731 = :* (:* (:* D4 D0) D5) D7
type HFD8 = :* (:* (:* D4 D0) D5) D6
type D4056 = :* (:* (:* D4 D0) D5) D6
type O7730 = :* (:* (:* D4 D0) D5) D6
type HFD7 = :* (:* (:* D4 D0) D5) D5
type D4055 = :* (:* (:* D4 D0) D5) D5
type O7727 = :* (:* (:* D4 D0) D5) D5
type HFD6 = :* (:* (:* D4 D0) D5) D4
type D4054 = :* (:* (:* D4 D0) D5) D4
type O7726 = :* (:* (:* D4 D0) D5) D4
type HFD5 = :* (:* (:* D4 D0) D5) D3
type D4053 = :* (:* (:* D4 D0) D5) D3
type O7725 = :* (:* (:* D4 D0) D5) D3
type HFD4 = :* (:* (:* D4 D0) D5) D2
type D4052 = :* (:* (:* D4 D0) D5) D2
type O7724 = :* (:* (:* D4 D0) D5) D2
type HFD3 = :* (:* (:* D4 D0) D5) D1
type D4051 = :* (:* (:* D4 D0) D5) D1
type O7723 = :* (:* (:* D4 D0) D5) D1
type HFD2 = :* (:* (:* D4 D0) D5) D0
type D4050 = :* (:* (:* D4 D0) D5) D0
type O7722 = :* (:* (:* D4 D0) D5) D0
type HFD1 = :* (:* (:* D4 D0) D4) D9
type D4049 = :* (:* (:* D4 D0) D4) D9
type O7721 = :* (:* (:* D4 D0) D4) D9
type HFD0 = :* (:* (:* D4 D0) D4) D8
type D4048 = :* (:* (:* D4 D0) D4) D8
type O7720 = :* (:* (:* D4 D0) D4) D8
type HFCF = :* (:* (:* D4 D0) D4) D7
type D4047 = :* (:* (:* D4 D0) D4) D7
type O7717 = :* (:* (:* D4 D0) D4) D7
type HFCE = :* (:* (:* D4 D0) D4) D6
type D4046 = :* (:* (:* D4 D0) D4) D6
type O7716 = :* (:* (:* D4 D0) D4) D6
type HFCD = :* (:* (:* D4 D0) D4) D5
type D4045 = :* (:* (:* D4 D0) D4) D5
type O7715 = :* (:* (:* D4 D0) D4) D5
type HFCC = :* (:* (:* D4 D0) D4) D4
type D4044 = :* (:* (:* D4 D0) D4) D4
type O7714 = :* (:* (:* D4 D0) D4) D4
type HFCB = :* (:* (:* D4 D0) D4) D3
type D4043 = :* (:* (:* D4 D0) D4) D3
type O7713 = :* (:* (:* D4 D0) D4) D3
type HFCA = :* (:* (:* D4 D0) D4) D2
type D4042 = :* (:* (:* D4 D0) D4) D2
type O7712 = :* (:* (:* D4 D0) D4) D2
type HFC9 = :* (:* (:* D4 D0) D4) D1
type D4041 = :* (:* (:* D4 D0) D4) D1
type O7711 = :* (:* (:* D4 D0) D4) D1
type HFC8 = :* (:* (:* D4 D0) D4) D0
type D4040 = :* (:* (:* D4 D0) D4) D0
type O7710 = :* (:* (:* D4 D0) D4) D0
type HFC7 = :* (:* (:* D4 D0) D3) D9
type D4039 = :* (:* (:* D4 D0) D3) D9
type O7707 = :* (:* (:* D4 D0) D3) D9
type HFC6 = :* (:* (:* D4 D0) D3) D8
type D4038 = :* (:* (:* D4 D0) D3) D8
type O7706 = :* (:* (:* D4 D0) D3) D8
type HFC5 = :* (:* (:* D4 D0) D3) D7
type D4037 = :* (:* (:* D4 D0) D3) D7
type O7705 = :* (:* (:* D4 D0) D3) D7
type HFC4 = :* (:* (:* D4 D0) D3) D6
type D4036 = :* (:* (:* D4 D0) D3) D6
type O7704 = :* (:* (:* D4 D0) D3) D6
type HFC3 = :* (:* (:* D4 D0) D3) D5
type D4035 = :* (:* (:* D4 D0) D3) D5
type O7703 = :* (:* (:* D4 D0) D3) D5
type HFC2 = :* (:* (:* D4 D0) D3) D4
type D4034 = :* (:* (:* D4 D0) D3) D4
type O7702 = :* (:* (:* D4 D0) D3) D4
type HFC1 = :* (:* (:* D4 D0) D3) D3
type D4033 = :* (:* (:* D4 D0) D3) D3
type O7701 = :* (:* (:* D4 D0) D3) D3
type HFC0 = :* (:* (:* D4 D0) D3) D2
type D4032 = :* (:* (:* D4 D0) D3) D2
type O7700 = :* (:* (:* D4 D0) D3) D2
type HFBF = :* (:* (:* D4 D0) D3) D1
type D4031 = :* (:* (:* D4 D0) D3) D1
type O7677 = :* (:* (:* D4 D0) D3) D1
type HFBE = :* (:* (:* D4 D0) D3) D0
type D4030 = :* (:* (:* D4 D0) D3) D0
type O7676 = :* (:* (:* D4 D0) D3) D0
type HFBD = :* (:* (:* D4 D0) D2) D9
type D4029 = :* (:* (:* D4 D0) D2) D9
type O7675 = :* (:* (:* D4 D0) D2) D9
type HFBC = :* (:* (:* D4 D0) D2) D8
type D4028 = :* (:* (:* D4 D0) D2) D8
type O7674 = :* (:* (:* D4 D0) D2) D8
type HFBB = :* (:* (:* D4 D0) D2) D7
type D4027 = :* (:* (:* D4 D0) D2) D7
type O7673 = :* (:* (:* D4 D0) D2) D7
type HFBA = :* (:* (:* D4 D0) D2) D6
type D4026 = :* (:* (:* D4 D0) D2) D6
type O7672 = :* (:* (:* D4 D0) D2) D6
type HFB9 = :* (:* (:* D4 D0) D2) D5
type D4025 = :* (:* (:* D4 D0) D2) D5
type O7671 = :* (:* (:* D4 D0) D2) D5
type HFB8 = :* (:* (:* D4 D0) D2) D4
type D4024 = :* (:* (:* D4 D0) D2) D4
type O7670 = :* (:* (:* D4 D0) D2) D4
type HFB7 = :* (:* (:* D4 D0) D2) D3
type D4023 = :* (:* (:* D4 D0) D2) D3
type O7667 = :* (:* (:* D4 D0) D2) D3
type HFB6 = :* (:* (:* D4 D0) D2) D2
type D4022 = :* (:* (:* D4 D0) D2) D2
type O7666 = :* (:* (:* D4 D0) D2) D2
type HFB5 = :* (:* (:* D4 D0) D2) D1
type D4021 = :* (:* (:* D4 D0) D2) D1
type O7665 = :* (:* (:* D4 D0) D2) D1
type HFB4 = :* (:* (:* D4 D0) D2) D0
type D4020 = :* (:* (:* D4 D0) D2) D0
type O7664 = :* (:* (:* D4 D0) D2) D0
type HFB3 = :* (:* (:* D4 D0) D1) D9
type D4019 = :* (:* (:* D4 D0) D1) D9
type O7663 = :* (:* (:* D4 D0) D1) D9
type HFB2 = :* (:* (:* D4 D0) D1) D8
type D4018 = :* (:* (:* D4 D0) D1) D8
type O7662 = :* (:* (:* D4 D0) D1) D8
type HFB1 = :* (:* (:* D4 D0) D1) D7
type D4017 = :* (:* (:* D4 D0) D1) D7
type O7661 = :* (:* (:* D4 D0) D1) D7
type HFB0 = :* (:* (:* D4 D0) D1) D6
type D4016 = :* (:* (:* D4 D0) D1) D6
type O7660 = :* (:* (:* D4 D0) D1) D6
type HFAF = :* (:* (:* D4 D0) D1) D5
type D4015 = :* (:* (:* D4 D0) D1) D5
type O7657 = :* (:* (:* D4 D0) D1) D5
type HFAE = :* (:* (:* D4 D0) D1) D4
type D4014 = :* (:* (:* D4 D0) D1) D4
type O7656 = :* (:* (:* D4 D0) D1) D4
type HFAD = :* (:* (:* D4 D0) D1) D3
type D4013 = :* (:* (:* D4 D0) D1) D3
type O7655 = :* (:* (:* D4 D0) D1) D3
type HFAC = :* (:* (:* D4 D0) D1) D2
type D4012 = :* (:* (:* D4 D0) D1) D2
type O7654 = :* (:* (:* D4 D0) D1) D2
type HFAB = :* (:* (:* D4 D0) D1) D1
type D4011 = :* (:* (:* D4 D0) D1) D1
type O7653 = :* (:* (:* D4 D0) D1) D1
type HFAA = :* (:* (:* D4 D0) D1) D0
type D4010 = :* (:* (:* D4 D0) D1) D0
type O7652 = :* (:* (:* D4 D0) D1) D0
type HFA9 = :* (:* (:* D4 D0) D0) D9
type D4009 = :* (:* (:* D4 D0) D0) D9
type O7651 = :* (:* (:* D4 D0) D0) D9
type HFA8 = :* (:* (:* D4 D0) D0) D8
type D4008 = :* (:* (:* D4 D0) D0) D8
type O7650 = :* (:* (:* D4 D0) D0) D8
type HFA7 = :* (:* (:* D4 D0) D0) D7
type D4007 = :* (:* (:* D4 D0) D0) D7
type O7647 = :* (:* (:* D4 D0) D0) D7
type HFA6 = :* (:* (:* D4 D0) D0) D6
type D4006 = :* (:* (:* D4 D0) D0) D6
type O7646 = :* (:* (:* D4 D0) D0) D6
type HFA5 = :* (:* (:* D4 D0) D0) D5
type D4005 = :* (:* (:* D4 D0) D0) D5
type O7645 = :* (:* (:* D4 D0) D0) D5
type HFA4 = :* (:* (:* D4 D0) D0) D4
type D4004 = :* (:* (:* D4 D0) D0) D4
type O7644 = :* (:* (:* D4 D0) D0) D4
type HFA3 = :* (:* (:* D4 D0) D0) D3
type D4003 = :* (:* (:* D4 D0) D0) D3
type O7643 = :* (:* (:* D4 D0) D0) D3
type HFA2 = :* (:* (:* D4 D0) D0) D2
type D4002 = :* (:* (:* D4 D0) D0) D2
type O7642 = :* (:* (:* D4 D0) D0) D2
type HFA1 = :* (:* (:* D4 D0) D0) D1
type D4001 = :* (:* (:* D4 D0) D0) D1
type O7641 = :* (:* (:* D4 D0) D0) D1
type HFA0 = :* (:* (:* D4 D0) D0) D0
type D4000 = :* (:* (:* D4 D0) D0) D0
type O7640 = :* (:* (:* D4 D0) D0) D0
type HF9F = :* (:* (:* D3 D9) D9) D9
type D3999 = :* (:* (:* D3 D9) D9) D9
type O7637 = :* (:* (:* D3 D9) D9) D9
type HF9E = :* (:* (:* D3 D9) D9) D8
type D3998 = :* (:* (:* D3 D9) D9) D8
type O7636 = :* (:* (:* D3 D9) D9) D8
type HF9D = :* (:* (:* D3 D9) D9) D7
type D3997 = :* (:* (:* D3 D9) D9) D7
type O7635 = :* (:* (:* D3 D9) D9) D7
type HF9C = :* (:* (:* D3 D9) D9) D6
type D3996 = :* (:* (:* D3 D9) D9) D6
type O7634 = :* (:* (:* D3 D9) D9) D6
type HF9B = :* (:* (:* D3 D9) D9) D5
type D3995 = :* (:* (:* D3 D9) D9) D5
type O7633 = :* (:* (:* D3 D9) D9) D5
type HF9A = :* (:* (:* D3 D9) D9) D4
type D3994 = :* (:* (:* D3 D9) D9) D4
type O7632 = :* (:* (:* D3 D9) D9) D4
type HF99 = :* (:* (:* D3 D9) D9) D3
type D3993 = :* (:* (:* D3 D9) D9) D3
type O7631 = :* (:* (:* D3 D9) D9) D3
type HF98 = :* (:* (:* D3 D9) D9) D2
type D3992 = :* (:* (:* D3 D9) D9) D2
type O7630 = :* (:* (:* D3 D9) D9) D2
type HF97 = :* (:* (:* D3 D9) D9) D1
type D3991 = :* (:* (:* D3 D9) D9) D1
type O7627 = :* (:* (:* D3 D9) D9) D1
type HF96 = :* (:* (:* D3 D9) D9) D0
type D3990 = :* (:* (:* D3 D9) D9) D0
type O7626 = :* (:* (:* D3 D9) D9) D0
type HF95 = :* (:* (:* D3 D9) D8) D9
type D3989 = :* (:* (:* D3 D9) D8) D9
type O7625 = :* (:* (:* D3 D9) D8) D9
type HF94 = :* (:* (:* D3 D9) D8) D8
type D3988 = :* (:* (:* D3 D9) D8) D8
type O7624 = :* (:* (:* D3 D9) D8) D8
type HF93 = :* (:* (:* D3 D9) D8) D7
type D3987 = :* (:* (:* D3 D9) D8) D7
type O7623 = :* (:* (:* D3 D9) D8) D7
type HF92 = :* (:* (:* D3 D9) D8) D6
type D3986 = :* (:* (:* D3 D9) D8) D6
type O7622 = :* (:* (:* D3 D9) D8) D6
type HF91 = :* (:* (:* D3 D9) D8) D5
type D3985 = :* (:* (:* D3 D9) D8) D5
type O7621 = :* (:* (:* D3 D9) D8) D5
type HF90 = :* (:* (:* D3 D9) D8) D4
type D3984 = :* (:* (:* D3 D9) D8) D4
type O7620 = :* (:* (:* D3 D9) D8) D4
type HF8F = :* (:* (:* D3 D9) D8) D3
type D3983 = :* (:* (:* D3 D9) D8) D3
type O7617 = :* (:* (:* D3 D9) D8) D3
type HF8E = :* (:* (:* D3 D9) D8) D2
type D3982 = :* (:* (:* D3 D9) D8) D2
type O7616 = :* (:* (:* D3 D9) D8) D2
type HF8D = :* (:* (:* D3 D9) D8) D1
type D3981 = :* (:* (:* D3 D9) D8) D1
type O7615 = :* (:* (:* D3 D9) D8) D1
type HF8C = :* (:* (:* D3 D9) D8) D0
type D3980 = :* (:* (:* D3 D9) D8) D0
type O7614 = :* (:* (:* D3 D9) D8) D0
type HF8B = :* (:* (:* D3 D9) D7) D9
type D3979 = :* (:* (:* D3 D9) D7) D9
type O7613 = :* (:* (:* D3 D9) D7) D9
type HF8A = :* (:* (:* D3 D9) D7) D8
type D3978 = :* (:* (:* D3 D9) D7) D8
type O7612 = :* (:* (:* D3 D9) D7) D8
type HF89 = :* (:* (:* D3 D9) D7) D7
type D3977 = :* (:* (:* D3 D9) D7) D7
type O7611 = :* (:* (:* D3 D9) D7) D7
type HF88 = :* (:* (:* D3 D9) D7) D6
type D3976 = :* (:* (:* D3 D9) D7) D6
type O7610 = :* (:* (:* D3 D9) D7) D6
type HF87 = :* (:* (:* D3 D9) D7) D5
type D3975 = :* (:* (:* D3 D9) D7) D5
type O7607 = :* (:* (:* D3 D9) D7) D5
type HF86 = :* (:* (:* D3 D9) D7) D4
type D3974 = :* (:* (:* D3 D9) D7) D4
type O7606 = :* (:* (:* D3 D9) D7) D4
type HF85 = :* (:* (:* D3 D9) D7) D3
type D3973 = :* (:* (:* D3 D9) D7) D3
type O7605 = :* (:* (:* D3 D9) D7) D3
type HF84 = :* (:* (:* D3 D9) D7) D2
type D3972 = :* (:* (:* D3 D9) D7) D2
type O7604 = :* (:* (:* D3 D9) D7) D2
type HF83 = :* (:* (:* D3 D9) D7) D1
type D3971 = :* (:* (:* D3 D9) D7) D1
type O7603 = :* (:* (:* D3 D9) D7) D1
type HF82 = :* (:* (:* D3 D9) D7) D0
type D3970 = :* (:* (:* D3 D9) D7) D0
type O7602 = :* (:* (:* D3 D9) D7) D0
type HF81 = :* (:* (:* D3 D9) D6) D9
type D3969 = :* (:* (:* D3 D9) D6) D9
type O7601 = :* (:* (:* D3 D9) D6) D9
type HF80 = :* (:* (:* D3 D9) D6) D8
type D3968 = :* (:* (:* D3 D9) D6) D8
type O7600 = :* (:* (:* D3 D9) D6) D8
type HF7F = :* (:* (:* D3 D9) D6) D7
type D3967 = :* (:* (:* D3 D9) D6) D7
type O7577 = :* (:* (:* D3 D9) D6) D7
type HF7E = :* (:* (:* D3 D9) D6) D6
type D3966 = :* (:* (:* D3 D9) D6) D6
type O7576 = :* (:* (:* D3 D9) D6) D6
type HF7D = :* (:* (:* D3 D9) D6) D5
type D3965 = :* (:* (:* D3 D9) D6) D5
type O7575 = :* (:* (:* D3 D9) D6) D5
type HF7C = :* (:* (:* D3 D9) D6) D4
type D3964 = :* (:* (:* D3 D9) D6) D4
type O7574 = :* (:* (:* D3 D9) D6) D4
type HF7B = :* (:* (:* D3 D9) D6) D3
type D3963 = :* (:* (:* D3 D9) D6) D3
type O7573 = :* (:* (:* D3 D9) D6) D3
type HF7A = :* (:* (:* D3 D9) D6) D2
type D3962 = :* (:* (:* D3 D9) D6) D2
type O7572 = :* (:* (:* D3 D9) D6) D2
type HF79 = :* (:* (:* D3 D9) D6) D1
type D3961 = :* (:* (:* D3 D9) D6) D1
type O7571 = :* (:* (:* D3 D9) D6) D1
type HF78 = :* (:* (:* D3 D9) D6) D0
type D3960 = :* (:* (:* D3 D9) D6) D0
type O7570 = :* (:* (:* D3 D9) D6) D0
type HF77 = :* (:* (:* D3 D9) D5) D9
type D3959 = :* (:* (:* D3 D9) D5) D9
type O7567 = :* (:* (:* D3 D9) D5) D9
type HF76 = :* (:* (:* D3 D9) D5) D8
type D3958 = :* (:* (:* D3 D9) D5) D8
type O7566 = :* (:* (:* D3 D9) D5) D8
type HF75 = :* (:* (:* D3 D9) D5) D7
type D3957 = :* (:* (:* D3 D9) D5) D7
type O7565 = :* (:* (:* D3 D9) D5) D7
type HF74 = :* (:* (:* D3 D9) D5) D6
type D3956 = :* (:* (:* D3 D9) D5) D6
type O7564 = :* (:* (:* D3 D9) D5) D6
type HF73 = :* (:* (:* D3 D9) D5) D5
type D3955 = :* (:* (:* D3 D9) D5) D5
type O7563 = :* (:* (:* D3 D9) D5) D5
type HF72 = :* (:* (:* D3 D9) D5) D4
type D3954 = :* (:* (:* D3 D9) D5) D4
type O7562 = :* (:* (:* D3 D9) D5) D4
type HF71 = :* (:* (:* D3 D9) D5) D3
type D3953 = :* (:* (:* D3 D9) D5) D3
type O7561 = :* (:* (:* D3 D9) D5) D3
type HF70 = :* (:* (:* D3 D9) D5) D2
type D3952 = :* (:* (:* D3 D9) D5) D2
type O7560 = :* (:* (:* D3 D9) D5) D2
type HF6F = :* (:* (:* D3 D9) D5) D1
type D3951 = :* (:* (:* D3 D9) D5) D1
type O7557 = :* (:* (:* D3 D9) D5) D1
type HF6E = :* (:* (:* D3 D9) D5) D0
type D3950 = :* (:* (:* D3 D9) D5) D0
type O7556 = :* (:* (:* D3 D9) D5) D0
type HF6D = :* (:* (:* D3 D9) D4) D9
type D3949 = :* (:* (:* D3 D9) D4) D9
type O7555 = :* (:* (:* D3 D9) D4) D9
type HF6C = :* (:* (:* D3 D9) D4) D8
type D3948 = :* (:* (:* D3 D9) D4) D8
type O7554 = :* (:* (:* D3 D9) D4) D8
type HF6B = :* (:* (:* D3 D9) D4) D7
type D3947 = :* (:* (:* D3 D9) D4) D7
type O7553 = :* (:* (:* D3 D9) D4) D7
type HF6A = :* (:* (:* D3 D9) D4) D6
type D3946 = :* (:* (:* D3 D9) D4) D6
type O7552 = :* (:* (:* D3 D9) D4) D6
type HF69 = :* (:* (:* D3 D9) D4) D5
type D3945 = :* (:* (:* D3 D9) D4) D5
type O7551 = :* (:* (:* D3 D9) D4) D5
type HF68 = :* (:* (:* D3 D9) D4) D4
type D3944 = :* (:* (:* D3 D9) D4) D4
type O7550 = :* (:* (:* D3 D9) D4) D4
type HF67 = :* (:* (:* D3 D9) D4) D3
type D3943 = :* (:* (:* D3 D9) D4) D3
type O7547 = :* (:* (:* D3 D9) D4) D3
type HF66 = :* (:* (:* D3 D9) D4) D2
type D3942 = :* (:* (:* D3 D9) D4) D2
type O7546 = :* (:* (:* D3 D9) D4) D2
type HF65 = :* (:* (:* D3 D9) D4) D1
type D3941 = :* (:* (:* D3 D9) D4) D1
type O7545 = :* (:* (:* D3 D9) D4) D1
type HF64 = :* (:* (:* D3 D9) D4) D0
type D3940 = :* (:* (:* D3 D9) D4) D0
type O7544 = :* (:* (:* D3 D9) D4) D0
type HF63 = :* (:* (:* D3 D9) D3) D9
type D3939 = :* (:* (:* D3 D9) D3) D9
type O7543 = :* (:* (:* D3 D9) D3) D9
type HF62 = :* (:* (:* D3 D9) D3) D8
type D3938 = :* (:* (:* D3 D9) D3) D8
type O7542 = :* (:* (:* D3 D9) D3) D8
type HF61 = :* (:* (:* D3 D9) D3) D7
type D3937 = :* (:* (:* D3 D9) D3) D7
type O7541 = :* (:* (:* D3 D9) D3) D7
type HF60 = :* (:* (:* D3 D9) D3) D6
type D3936 = :* (:* (:* D3 D9) D3) D6
type O7540 = :* (:* (:* D3 D9) D3) D6
type HF5F = :* (:* (:* D3 D9) D3) D5
type D3935 = :* (:* (:* D3 D9) D3) D5
type O7537 = :* (:* (:* D3 D9) D3) D5
type HF5E = :* (:* (:* D3 D9) D3) D4
type D3934 = :* (:* (:* D3 D9) D3) D4
type O7536 = :* (:* (:* D3 D9) D3) D4
type HF5D = :* (:* (:* D3 D9) D3) D3
type D3933 = :* (:* (:* D3 D9) D3) D3
type O7535 = :* (:* (:* D3 D9) D3) D3
type HF5C = :* (:* (:* D3 D9) D3) D2
type D3932 = :* (:* (:* D3 D9) D3) D2
type O7534 = :* (:* (:* D3 D9) D3) D2
type HF5B = :* (:* (:* D3 D9) D3) D1
type D3931 = :* (:* (:* D3 D9) D3) D1
type O7533 = :* (:* (:* D3 D9) D3) D1
type HF5A = :* (:* (:* D3 D9) D3) D0
type D3930 = :* (:* (:* D3 D9) D3) D0
type O7532 = :* (:* (:* D3 D9) D3) D0
type HF59 = :* (:* (:* D3 D9) D2) D9
type D3929 = :* (:* (:* D3 D9) D2) D9
type O7531 = :* (:* (:* D3 D9) D2) D9
type HF58 = :* (:* (:* D3 D9) D2) D8
type D3928 = :* (:* (:* D3 D9) D2) D8
type O7530 = :* (:* (:* D3 D9) D2) D8
type HF57 = :* (:* (:* D3 D9) D2) D7
type D3927 = :* (:* (:* D3 D9) D2) D7
type O7527 = :* (:* (:* D3 D9) D2) D7
type HF56 = :* (:* (:* D3 D9) D2) D6
type D3926 = :* (:* (:* D3 D9) D2) D6
type O7526 = :* (:* (:* D3 D9) D2) D6
type HF55 = :* (:* (:* D3 D9) D2) D5
type D3925 = :* (:* (:* D3 D9) D2) D5
type O7525 = :* (:* (:* D3 D9) D2) D5
type HF54 = :* (:* (:* D3 D9) D2) D4
type D3924 = :* (:* (:* D3 D9) D2) D4
type O7524 = :* (:* (:* D3 D9) D2) D4
type HF53 = :* (:* (:* D3 D9) D2) D3
type D3923 = :* (:* (:* D3 D9) D2) D3
type O7523 = :* (:* (:* D3 D9) D2) D3
type HF52 = :* (:* (:* D3 D9) D2) D2
type D3922 = :* (:* (:* D3 D9) D2) D2
type O7522 = :* (:* (:* D3 D9) D2) D2
type HF51 = :* (:* (:* D3 D9) D2) D1
type D3921 = :* (:* (:* D3 D9) D2) D1
type O7521 = :* (:* (:* D3 D9) D2) D1
type HF50 = :* (:* (:* D3 D9) D2) D0
type D3920 = :* (:* (:* D3 D9) D2) D0
type O7520 = :* (:* (:* D3 D9) D2) D0
type HF4F = :* (:* (:* D3 D9) D1) D9
type D3919 = :* (:* (:* D3 D9) D1) D9
type O7517 = :* (:* (:* D3 D9) D1) D9
type HF4E = :* (:* (:* D3 D9) D1) D8
type D3918 = :* (:* (:* D3 D9) D1) D8
type O7516 = :* (:* (:* D3 D9) D1) D8
type HF4D = :* (:* (:* D3 D9) D1) D7
type D3917 = :* (:* (:* D3 D9) D1) D7
type O7515 = :* (:* (:* D3 D9) D1) D7
type HF4C = :* (:* (:* D3 D9) D1) D6
type D3916 = :* (:* (:* D3 D9) D1) D6
type O7514 = :* (:* (:* D3 D9) D1) D6
type HF4B = :* (:* (:* D3 D9) D1) D5
type D3915 = :* (:* (:* D3 D9) D1) D5
type O7513 = :* (:* (:* D3 D9) D1) D5
type HF4A = :* (:* (:* D3 D9) D1) D4
type D3914 = :* (:* (:* D3 D9) D1) D4
type O7512 = :* (:* (:* D3 D9) D1) D4
type HF49 = :* (:* (:* D3 D9) D1) D3
type D3913 = :* (:* (:* D3 D9) D1) D3
type O7511 = :* (:* (:* D3 D9) D1) D3
type HF48 = :* (:* (:* D3 D9) D1) D2
type D3912 = :* (:* (:* D3 D9) D1) D2
type O7510 = :* (:* (:* D3 D9) D1) D2
type HF47 = :* (:* (:* D3 D9) D1) D1
type D3911 = :* (:* (:* D3 D9) D1) D1
type O7507 = :* (:* (:* D3 D9) D1) D1
type HF46 = :* (:* (:* D3 D9) D1) D0
type D3910 = :* (:* (:* D3 D9) D1) D0
type O7506 = :* (:* (:* D3 D9) D1) D0
type HF45 = :* (:* (:* D3 D9) D0) D9
type D3909 = :* (:* (:* D3 D9) D0) D9
type O7505 = :* (:* (:* D3 D9) D0) D9
type HF44 = :* (:* (:* D3 D9) D0) D8
type D3908 = :* (:* (:* D3 D9) D0) D8
type O7504 = :* (:* (:* D3 D9) D0) D8
type HF43 = :* (:* (:* D3 D9) D0) D7
type D3907 = :* (:* (:* D3 D9) D0) D7
type O7503 = :* (:* (:* D3 D9) D0) D7
type HF42 = :* (:* (:* D3 D9) D0) D6
type D3906 = :* (:* (:* D3 D9) D0) D6
type O7502 = :* (:* (:* D3 D9) D0) D6
type HF41 = :* (:* (:* D3 D9) D0) D5
type D3905 = :* (:* (:* D3 D9) D0) D5
type O7501 = :* (:* (:* D3 D9) D0) D5
type HF40 = :* (:* (:* D3 D9) D0) D4
type D3904 = :* (:* (:* D3 D9) D0) D4
type O7500 = :* (:* (:* D3 D9) D0) D4
type HF3F = :* (:* (:* D3 D9) D0) D3
type D3903 = :* (:* (:* D3 D9) D0) D3
type O7477 = :* (:* (:* D3 D9) D0) D3
type HF3E = :* (:* (:* D3 D9) D0) D2
type D3902 = :* (:* (:* D3 D9) D0) D2
type O7476 = :* (:* (:* D3 D9) D0) D2
type HF3D = :* (:* (:* D3 D9) D0) D1
type D3901 = :* (:* (:* D3 D9) D0) D1
type O7475 = :* (:* (:* D3 D9) D0) D1
type HF3C = :* (:* (:* D3 D9) D0) D0
type D3900 = :* (:* (:* D3 D9) D0) D0
type O7474 = :* (:* (:* D3 D9) D0) D0
type HF3B = :* (:* (:* D3 D8) D9) D9
type D3899 = :* (:* (:* D3 D8) D9) D9
type O7473 = :* (:* (:* D3 D8) D9) D9
type HF3A = :* (:* (:* D3 D8) D9) D8
type D3898 = :* (:* (:* D3 D8) D9) D8
type O7472 = :* (:* (:* D3 D8) D9) D8
type HF39 = :* (:* (:* D3 D8) D9) D7
type D3897 = :* (:* (:* D3 D8) D9) D7
type O7471 = :* (:* (:* D3 D8) D9) D7
type HF38 = :* (:* (:* D3 D8) D9) D6
type D3896 = :* (:* (:* D3 D8) D9) D6
type O7470 = :* (:* (:* D3 D8) D9) D6
type HF37 = :* (:* (:* D3 D8) D9) D5
type D3895 = :* (:* (:* D3 D8) D9) D5
type O7467 = :* (:* (:* D3 D8) D9) D5
type HF36 = :* (:* (:* D3 D8) D9) D4
type D3894 = :* (:* (:* D3 D8) D9) D4
type O7466 = :* (:* (:* D3 D8) D9) D4
type HF35 = :* (:* (:* D3 D8) D9) D3
type D3893 = :* (:* (:* D3 D8) D9) D3
type O7465 = :* (:* (:* D3 D8) D9) D3
type HF34 = :* (:* (:* D3 D8) D9) D2
type D3892 = :* (:* (:* D3 D8) D9) D2
type O7464 = :* (:* (:* D3 D8) D9) D2
type HF33 = :* (:* (:* D3 D8) D9) D1
type D3891 = :* (:* (:* D3 D8) D9) D1
type O7463 = :* (:* (:* D3 D8) D9) D1
type HF32 = :* (:* (:* D3 D8) D9) D0
type D3890 = :* (:* (:* D3 D8) D9) D0
type O7462 = :* (:* (:* D3 D8) D9) D0
type HF31 = :* (:* (:* D3 D8) D8) D9
type D3889 = :* (:* (:* D3 D8) D8) D9
type O7461 = :* (:* (:* D3 D8) D8) D9
type HF30 = :* (:* (:* D3 D8) D8) D8
type D3888 = :* (:* (:* D3 D8) D8) D8
type O7460 = :* (:* (:* D3 D8) D8) D8
type HF2F = :* (:* (:* D3 D8) D8) D7
type D3887 = :* (:* (:* D3 D8) D8) D7
type O7457 = :* (:* (:* D3 D8) D8) D7
type HF2E = :* (:* (:* D3 D8) D8) D6
type D3886 = :* (:* (:* D3 D8) D8) D6
type O7456 = :* (:* (:* D3 D8) D8) D6
type HF2D = :* (:* (:* D3 D8) D8) D5
type D3885 = :* (:* (:* D3 D8) D8) D5
type O7455 = :* (:* (:* D3 D8) D8) D5
type HF2C = :* (:* (:* D3 D8) D8) D4
type D3884 = :* (:* (:* D3 D8) D8) D4
type O7454 = :* (:* (:* D3 D8) D8) D4
type HF2B = :* (:* (:* D3 D8) D8) D3
type D3883 = :* (:* (:* D3 D8) D8) D3
type O7453 = :* (:* (:* D3 D8) D8) D3
type HF2A = :* (:* (:* D3 D8) D8) D2
type D3882 = :* (:* (:* D3 D8) D8) D2
type O7452 = :* (:* (:* D3 D8) D8) D2
type HF29 = :* (:* (:* D3 D8) D8) D1
type D3881 = :* (:* (:* D3 D8) D8) D1
type O7451 = :* (:* (:* D3 D8) D8) D1
type HF28 = :* (:* (:* D3 D8) D8) D0
type D3880 = :* (:* (:* D3 D8) D8) D0
type O7450 = :* (:* (:* D3 D8) D8) D0
type HF27 = :* (:* (:* D3 D8) D7) D9
type D3879 = :* (:* (:* D3 D8) D7) D9
type O7447 = :* (:* (:* D3 D8) D7) D9
type HF26 = :* (:* (:* D3 D8) D7) D8
type D3878 = :* (:* (:* D3 D8) D7) D8
type O7446 = :* (:* (:* D3 D8) D7) D8
type HF25 = :* (:* (:* D3 D8) D7) D7
type D3877 = :* (:* (:* D3 D8) D7) D7
type O7445 = :* (:* (:* D3 D8) D7) D7
type HF24 = :* (:* (:* D3 D8) D7) D6
type D3876 = :* (:* (:* D3 D8) D7) D6
type O7444 = :* (:* (:* D3 D8) D7) D6
type HF23 = :* (:* (:* D3 D8) D7) D5
type D3875 = :* (:* (:* D3 D8) D7) D5
type O7443 = :* (:* (:* D3 D8) D7) D5
type HF22 = :* (:* (:* D3 D8) D7) D4
type D3874 = :* (:* (:* D3 D8) D7) D4
type O7442 = :* (:* (:* D3 D8) D7) D4
type HF21 = :* (:* (:* D3 D8) D7) D3
type D3873 = :* (:* (:* D3 D8) D7) D3
type O7441 = :* (:* (:* D3 D8) D7) D3
type HF20 = :* (:* (:* D3 D8) D7) D2
type D3872 = :* (:* (:* D3 D8) D7) D2
type O7440 = :* (:* (:* D3 D8) D7) D2
type HF1F = :* (:* (:* D3 D8) D7) D1
type D3871 = :* (:* (:* D3 D8) D7) D1
type O7437 = :* (:* (:* D3 D8) D7) D1
type HF1E = :* (:* (:* D3 D8) D7) D0
type D3870 = :* (:* (:* D3 D8) D7) D0
type O7436 = :* (:* (:* D3 D8) D7) D0
type HF1D = :* (:* (:* D3 D8) D6) D9
type D3869 = :* (:* (:* D3 D8) D6) D9
type O7435 = :* (:* (:* D3 D8) D6) D9
type HF1C = :* (:* (:* D3 D8) D6) D8
type D3868 = :* (:* (:* D3 D8) D6) D8
type O7434 = :* (:* (:* D3 D8) D6) D8
type HF1B = :* (:* (:* D3 D8) D6) D7
type D3867 = :* (:* (:* D3 D8) D6) D7
type O7433 = :* (:* (:* D3 D8) D6) D7
type HF1A = :* (:* (:* D3 D8) D6) D6
type D3866 = :* (:* (:* D3 D8) D6) D6
type O7432 = :* (:* (:* D3 D8) D6) D6
type HF19 = :* (:* (:* D3 D8) D6) D5
type D3865 = :* (:* (:* D3 D8) D6) D5
type O7431 = :* (:* (:* D3 D8) D6) D5
type HF18 = :* (:* (:* D3 D8) D6) D4
type D3864 = :* (:* (:* D3 D8) D6) D4
type O7430 = :* (:* (:* D3 D8) D6) D4
type HF17 = :* (:* (:* D3 D8) D6) D3
type D3863 = :* (:* (:* D3 D8) D6) D3
type O7427 = :* (:* (:* D3 D8) D6) D3
type HF16 = :* (:* (:* D3 D8) D6) D2
type D3862 = :* (:* (:* D3 D8) D6) D2
type O7426 = :* (:* (:* D3 D8) D6) D2
type HF15 = :* (:* (:* D3 D8) D6) D1
type D3861 = :* (:* (:* D3 D8) D6) D1
type O7425 = :* (:* (:* D3 D8) D6) D1
type HF14 = :* (:* (:* D3 D8) D6) D0
type D3860 = :* (:* (:* D3 D8) D6) D0
type O7424 = :* (:* (:* D3 D8) D6) D0
type HF13 = :* (:* (:* D3 D8) D5) D9
type D3859 = :* (:* (:* D3 D8) D5) D9
type O7423 = :* (:* (:* D3 D8) D5) D9
type HF12 = :* (:* (:* D3 D8) D5) D8
type D3858 = :* (:* (:* D3 D8) D5) D8
type O7422 = :* (:* (:* D3 D8) D5) D8
type HF11 = :* (:* (:* D3 D8) D5) D7
type D3857 = :* (:* (:* D3 D8) D5) D7
type O7421 = :* (:* (:* D3 D8) D5) D7
type HF10 = :* (:* (:* D3 D8) D5) D6
type D3856 = :* (:* (:* D3 D8) D5) D6
type O7420 = :* (:* (:* D3 D8) D5) D6
type HF0F = :* (:* (:* D3 D8) D5) D5
type D3855 = :* (:* (:* D3 D8) D5) D5
type O7417 = :* (:* (:* D3 D8) D5) D5
type HF0E = :* (:* (:* D3 D8) D5) D4
type D3854 = :* (:* (:* D3 D8) D5) D4
type O7416 = :* (:* (:* D3 D8) D5) D4
type HF0D = :* (:* (:* D3 D8) D5) D3
type D3853 = :* (:* (:* D3 D8) D5) D3
type O7415 = :* (:* (:* D3 D8) D5) D3
type HF0C = :* (:* (:* D3 D8) D5) D2
type D3852 = :* (:* (:* D3 D8) D5) D2
type O7414 = :* (:* (:* D3 D8) D5) D2
type HF0B = :* (:* (:* D3 D8) D5) D1
type D3851 = :* (:* (:* D3 D8) D5) D1
type O7413 = :* (:* (:* D3 D8) D5) D1
type HF0A = :* (:* (:* D3 D8) D5) D0
type D3850 = :* (:* (:* D3 D8) D5) D0
type O7412 = :* (:* (:* D3 D8) D5) D0
type HF09 = :* (:* (:* D3 D8) D4) D9
type D3849 = :* (:* (:* D3 D8) D4) D9
type O7411 = :* (:* (:* D3 D8) D4) D9
type HF08 = :* (:* (:* D3 D8) D4) D8
type D3848 = :* (:* (:* D3 D8) D4) D8
type O7410 = :* (:* (:* D3 D8) D4) D8
type HF07 = :* (:* (:* D3 D8) D4) D7
type D3847 = :* (:* (:* D3 D8) D4) D7
type O7407 = :* (:* (:* D3 D8) D4) D7
type HF06 = :* (:* (:* D3 D8) D4) D6
type D3846 = :* (:* (:* D3 D8) D4) D6
type O7406 = :* (:* (:* D3 D8) D4) D6
type HF05 = :* (:* (:* D3 D8) D4) D5
type D3845 = :* (:* (:* D3 D8) D4) D5
type O7405 = :* (:* (:* D3 D8) D4) D5
type HF04 = :* (:* (:* D3 D8) D4) D4
type D3844 = :* (:* (:* D3 D8) D4) D4
type O7404 = :* (:* (:* D3 D8) D4) D4
type HF03 = :* (:* (:* D3 D8) D4) D3
type D3843 = :* (:* (:* D3 D8) D4) D3
type O7403 = :* (:* (:* D3 D8) D4) D3
type HF02 = :* (:* (:* D3 D8) D4) D2
type D3842 = :* (:* (:* D3 D8) D4) D2
type O7402 = :* (:* (:* D3 D8) D4) D2
type HF01 = :* (:* (:* D3 D8) D4) D1
type D3841 = :* (:* (:* D3 D8) D4) D1
type O7401 = :* (:* (:* D3 D8) D4) D1
type HF00 = :* (:* (:* D3 D8) D4) D0
type D3840 = :* (:* (:* D3 D8) D4) D0
type O7400 = :* (:* (:* D3 D8) D4) D0
type HEFF = :* (:* (:* D3 D8) D3) D9
type D3839 = :* (:* (:* D3 D8) D3) D9
type O7377 = :* (:* (:* D3 D8) D3) D9
type HEFE = :* (:* (:* D3 D8) D3) D8
type D3838 = :* (:* (:* D3 D8) D3) D8
type O7376 = :* (:* (:* D3 D8) D3) D8
type HEFD = :* (:* (:* D3 D8) D3) D7
type D3837 = :* (:* (:* D3 D8) D3) D7
type O7375 = :* (:* (:* D3 D8) D3) D7
type HEFC = :* (:* (:* D3 D8) D3) D6
type D3836 = :* (:* (:* D3 D8) D3) D6
type O7374 = :* (:* (:* D3 D8) D3) D6
type HEFB = :* (:* (:* D3 D8) D3) D5
type D3835 = :* (:* (:* D3 D8) D3) D5
type O7373 = :* (:* (:* D3 D8) D3) D5
type HEFA = :* (:* (:* D3 D8) D3) D4
type D3834 = :* (:* (:* D3 D8) D3) D4
type O7372 = :* (:* (:* D3 D8) D3) D4
type HEF9 = :* (:* (:* D3 D8) D3) D3
type D3833 = :* (:* (:* D3 D8) D3) D3
type O7371 = :* (:* (:* D3 D8) D3) D3
type HEF8 = :* (:* (:* D3 D8) D3) D2
type D3832 = :* (:* (:* D3 D8) D3) D2
type O7370 = :* (:* (:* D3 D8) D3) D2
type HEF7 = :* (:* (:* D3 D8) D3) D1
type D3831 = :* (:* (:* D3 D8) D3) D1
type O7367 = :* (:* (:* D3 D8) D3) D1
type HEF6 = :* (:* (:* D3 D8) D3) D0
type D3830 = :* (:* (:* D3 D8) D3) D0
type O7366 = :* (:* (:* D3 D8) D3) D0
type HEF5 = :* (:* (:* D3 D8) D2) D9
type D3829 = :* (:* (:* D3 D8) D2) D9
type O7365 = :* (:* (:* D3 D8) D2) D9
type HEF4 = :* (:* (:* D3 D8) D2) D8
type D3828 = :* (:* (:* D3 D8) D2) D8
type O7364 = :* (:* (:* D3 D8) D2) D8
type HEF3 = :* (:* (:* D3 D8) D2) D7
type D3827 = :* (:* (:* D3 D8) D2) D7
type O7363 = :* (:* (:* D3 D8) D2) D7
type HEF2 = :* (:* (:* D3 D8) D2) D6
type D3826 = :* (:* (:* D3 D8) D2) D6
type O7362 = :* (:* (:* D3 D8) D2) D6
type HEF1 = :* (:* (:* D3 D8) D2) D5
type D3825 = :* (:* (:* D3 D8) D2) D5
type O7361 = :* (:* (:* D3 D8) D2) D5
type HEF0 = :* (:* (:* D3 D8) D2) D4
type D3824 = :* (:* (:* D3 D8) D2) D4
type O7360 = :* (:* (:* D3 D8) D2) D4
type HEEF = :* (:* (:* D3 D8) D2) D3
type D3823 = :* (:* (:* D3 D8) D2) D3
type O7357 = :* (:* (:* D3 D8) D2) D3
type HEEE = :* (:* (:* D3 D8) D2) D2
type D3822 = :* (:* (:* D3 D8) D2) D2
type O7356 = :* (:* (:* D3 D8) D2) D2
type HEED = :* (:* (:* D3 D8) D2) D1
type D3821 = :* (:* (:* D3 D8) D2) D1
type O7355 = :* (:* (:* D3 D8) D2) D1
type HEEC = :* (:* (:* D3 D8) D2) D0
type D3820 = :* (:* (:* D3 D8) D2) D0
type O7354 = :* (:* (:* D3 D8) D2) D0
type HEEB = :* (:* (:* D3 D8) D1) D9
type D3819 = :* (:* (:* D3 D8) D1) D9
type O7353 = :* (:* (:* D3 D8) D1) D9
type HEEA = :* (:* (:* D3 D8) D1) D8
type D3818 = :* (:* (:* D3 D8) D1) D8
type O7352 = :* (:* (:* D3 D8) D1) D8
type HEE9 = :* (:* (:* D3 D8) D1) D7
type D3817 = :* (:* (:* D3 D8) D1) D7
type O7351 = :* (:* (:* D3 D8) D1) D7
type HEE8 = :* (:* (:* D3 D8) D1) D6
type D3816 = :* (:* (:* D3 D8) D1) D6
type O7350 = :* (:* (:* D3 D8) D1) D6
type HEE7 = :* (:* (:* D3 D8) D1) D5
type D3815 = :* (:* (:* D3 D8) D1) D5
type O7347 = :* (:* (:* D3 D8) D1) D5
type HEE6 = :* (:* (:* D3 D8) D1) D4
type D3814 = :* (:* (:* D3 D8) D1) D4
type O7346 = :* (:* (:* D3 D8) D1) D4
type HEE5 = :* (:* (:* D3 D8) D1) D3
type D3813 = :* (:* (:* D3 D8) D1) D3
type O7345 = :* (:* (:* D3 D8) D1) D3
type HEE4 = :* (:* (:* D3 D8) D1) D2
type D3812 = :* (:* (:* D3 D8) D1) D2
type O7344 = :* (:* (:* D3 D8) D1) D2
type HEE3 = :* (:* (:* D3 D8) D1) D1
type D3811 = :* (:* (:* D3 D8) D1) D1
type O7343 = :* (:* (:* D3 D8) D1) D1
type HEE2 = :* (:* (:* D3 D8) D1) D0
type D3810 = :* (:* (:* D3 D8) D1) D0
type O7342 = :* (:* (:* D3 D8) D1) D0
type HEE1 = :* (:* (:* D3 D8) D0) D9
type D3809 = :* (:* (:* D3 D8) D0) D9
type O7341 = :* (:* (:* D3 D8) D0) D9
type HEE0 = :* (:* (:* D3 D8) D0) D8
type D3808 = :* (:* (:* D3 D8) D0) D8
type O7340 = :* (:* (:* D3 D8) D0) D8
type HEDF = :* (:* (:* D3 D8) D0) D7
type D3807 = :* (:* (:* D3 D8) D0) D7
type O7337 = :* (:* (:* D3 D8) D0) D7
type HEDE = :* (:* (:* D3 D8) D0) D6
type D3806 = :* (:* (:* D3 D8) D0) D6
type O7336 = :* (:* (:* D3 D8) D0) D6
type HEDD = :* (:* (:* D3 D8) D0) D5
type D3805 = :* (:* (:* D3 D8) D0) D5
type O7335 = :* (:* (:* D3 D8) D0) D5
type HEDC = :* (:* (:* D3 D8) D0) D4
type D3804 = :* (:* (:* D3 D8) D0) D4
type O7334 = :* (:* (:* D3 D8) D0) D4
type HEDB = :* (:* (:* D3 D8) D0) D3
type D3803 = :* (:* (:* D3 D8) D0) D3
type O7333 = :* (:* (:* D3 D8) D0) D3
type HEDA = :* (:* (:* D3 D8) D0) D2
type D3802 = :* (:* (:* D3 D8) D0) D2
type O7332 = :* (:* (:* D3 D8) D0) D2
type HED9 = :* (:* (:* D3 D8) D0) D1
type D3801 = :* (:* (:* D3 D8) D0) D1
type O7331 = :* (:* (:* D3 D8) D0) D1
type HED8 = :* (:* (:* D3 D8) D0) D0
type D3800 = :* (:* (:* D3 D8) D0) D0
type O7330 = :* (:* (:* D3 D8) D0) D0
type HED7 = :* (:* (:* D3 D7) D9) D9
type D3799 = :* (:* (:* D3 D7) D9) D9
type O7327 = :* (:* (:* D3 D7) D9) D9
type HED6 = :* (:* (:* D3 D7) D9) D8
type D3798 = :* (:* (:* D3 D7) D9) D8
type O7326 = :* (:* (:* D3 D7) D9) D8
type HED5 = :* (:* (:* D3 D7) D9) D7
type D3797 = :* (:* (:* D3 D7) D9) D7
type O7325 = :* (:* (:* D3 D7) D9) D7
type HED4 = :* (:* (:* D3 D7) D9) D6
type D3796 = :* (:* (:* D3 D7) D9) D6
type O7324 = :* (:* (:* D3 D7) D9) D6
type HED3 = :* (:* (:* D3 D7) D9) D5
type D3795 = :* (:* (:* D3 D7) D9) D5
type O7323 = :* (:* (:* D3 D7) D9) D5
type HED2 = :* (:* (:* D3 D7) D9) D4
type D3794 = :* (:* (:* D3 D7) D9) D4
type O7322 = :* (:* (:* D3 D7) D9) D4
type HED1 = :* (:* (:* D3 D7) D9) D3
type D3793 = :* (:* (:* D3 D7) D9) D3
type O7321 = :* (:* (:* D3 D7) D9) D3
type HED0 = :* (:* (:* D3 D7) D9) D2
type D3792 = :* (:* (:* D3 D7) D9) D2
type O7320 = :* (:* (:* D3 D7) D9) D2
type HECF = :* (:* (:* D3 D7) D9) D1
type D3791 = :* (:* (:* D3 D7) D9) D1
type O7317 = :* (:* (:* D3 D7) D9) D1
type HECE = :* (:* (:* D3 D7) D9) D0
type D3790 = :* (:* (:* D3 D7) D9) D0
type O7316 = :* (:* (:* D3 D7) D9) D0
type HECD = :* (:* (:* D3 D7) D8) D9
type D3789 = :* (:* (:* D3 D7) D8) D9
type O7315 = :* (:* (:* D3 D7) D8) D9
type HECC = :* (:* (:* D3 D7) D8) D8
type D3788 = :* (:* (:* D3 D7) D8) D8
type O7314 = :* (:* (:* D3 D7) D8) D8
type HECB = :* (:* (:* D3 D7) D8) D7
type D3787 = :* (:* (:* D3 D7) D8) D7
type O7313 = :* (:* (:* D3 D7) D8) D7
type HECA = :* (:* (:* D3 D7) D8) D6
type D3786 = :* (:* (:* D3 D7) D8) D6
type O7312 = :* (:* (:* D3 D7) D8) D6
type HEC9 = :* (:* (:* D3 D7) D8) D5
type D3785 = :* (:* (:* D3 D7) D8) D5
type O7311 = :* (:* (:* D3 D7) D8) D5
type HEC8 = :* (:* (:* D3 D7) D8) D4
type D3784 = :* (:* (:* D3 D7) D8) D4
type O7310 = :* (:* (:* D3 D7) D8) D4
type HEC7 = :* (:* (:* D3 D7) D8) D3
type D3783 = :* (:* (:* D3 D7) D8) D3
type O7307 = :* (:* (:* D3 D7) D8) D3
type HEC6 = :* (:* (:* D3 D7) D8) D2
type D3782 = :* (:* (:* D3 D7) D8) D2
type O7306 = :* (:* (:* D3 D7) D8) D2
type HEC5 = :* (:* (:* D3 D7) D8) D1
type D3781 = :* (:* (:* D3 D7) D8) D1
type O7305 = :* (:* (:* D3 D7) D8) D1
type HEC4 = :* (:* (:* D3 D7) D8) D0
type D3780 = :* (:* (:* D3 D7) D8) D0
type O7304 = :* (:* (:* D3 D7) D8) D0
type HEC3 = :* (:* (:* D3 D7) D7) D9
type D3779 = :* (:* (:* D3 D7) D7) D9
type O7303 = :* (:* (:* D3 D7) D7) D9
type HEC2 = :* (:* (:* D3 D7) D7) D8
type D3778 = :* (:* (:* D3 D7) D7) D8
type O7302 = :* (:* (:* D3 D7) D7) D8
type HEC1 = :* (:* (:* D3 D7) D7) D7
type D3777 = :* (:* (:* D3 D7) D7) D7
type O7301 = :* (:* (:* D3 D7) D7) D7
type HEC0 = :* (:* (:* D3 D7) D7) D6
type D3776 = :* (:* (:* D3 D7) D7) D6
type O7300 = :* (:* (:* D3 D7) D7) D6
type HEBF = :* (:* (:* D3 D7) D7) D5
type D3775 = :* (:* (:* D3 D7) D7) D5
type O7277 = :* (:* (:* D3 D7) D7) D5
type HEBE = :* (:* (:* D3 D7) D7) D4
type D3774 = :* (:* (:* D3 D7) D7) D4
type O7276 = :* (:* (:* D3 D7) D7) D4
type HEBD = :* (:* (:* D3 D7) D7) D3
type D3773 = :* (:* (:* D3 D7) D7) D3
type O7275 = :* (:* (:* D3 D7) D7) D3
type HEBC = :* (:* (:* D3 D7) D7) D2
type D3772 = :* (:* (:* D3 D7) D7) D2
type O7274 = :* (:* (:* D3 D7) D7) D2
type HEBB = :* (:* (:* D3 D7) D7) D1
type D3771 = :* (:* (:* D3 D7) D7) D1
type O7273 = :* (:* (:* D3 D7) D7) D1
type HEBA = :* (:* (:* D3 D7) D7) D0
type D3770 = :* (:* (:* D3 D7) D7) D0
type O7272 = :* (:* (:* D3 D7) D7) D0
type HEB9 = :* (:* (:* D3 D7) D6) D9
type D3769 = :* (:* (:* D3 D7) D6) D9
type O7271 = :* (:* (:* D3 D7) D6) D9
type HEB8 = :* (:* (:* D3 D7) D6) D8
type D3768 = :* (:* (:* D3 D7) D6) D8
type O7270 = :* (:* (:* D3 D7) D6) D8
type HEB7 = :* (:* (:* D3 D7) D6) D7
type D3767 = :* (:* (:* D3 D7) D6) D7
type O7267 = :* (:* (:* D3 D7) D6) D7
type HEB6 = :* (:* (:* D3 D7) D6) D6
type D3766 = :* (:* (:* D3 D7) D6) D6
type O7266 = :* (:* (:* D3 D7) D6) D6
type HEB5 = :* (:* (:* D3 D7) D6) D5
type D3765 = :* (:* (:* D3 D7) D6) D5
type O7265 = :* (:* (:* D3 D7) D6) D5
type HEB4 = :* (:* (:* D3 D7) D6) D4
type D3764 = :* (:* (:* D3 D7) D6) D4
type O7264 = :* (:* (:* D3 D7) D6) D4
type HEB3 = :* (:* (:* D3 D7) D6) D3
type D3763 = :* (:* (:* D3 D7) D6) D3
type O7263 = :* (:* (:* D3 D7) D6) D3
type HEB2 = :* (:* (:* D3 D7) D6) D2
type D3762 = :* (:* (:* D3 D7) D6) D2
type O7262 = :* (:* (:* D3 D7) D6) D2
type HEB1 = :* (:* (:* D3 D7) D6) D1
type D3761 = :* (:* (:* D3 D7) D6) D1
type O7261 = :* (:* (:* D3 D7) D6) D1
type HEB0 = :* (:* (:* D3 D7) D6) D0
type D3760 = :* (:* (:* D3 D7) D6) D0
type O7260 = :* (:* (:* D3 D7) D6) D0
type HEAF = :* (:* (:* D3 D7) D5) D9
type D3759 = :* (:* (:* D3 D7) D5) D9
type O7257 = :* (:* (:* D3 D7) D5) D9
type HEAE = :* (:* (:* D3 D7) D5) D8
type D3758 = :* (:* (:* D3 D7) D5) D8
type O7256 = :* (:* (:* D3 D7) D5) D8
type HEAD = :* (:* (:* D3 D7) D5) D7
type D3757 = :* (:* (:* D3 D7) D5) D7
type O7255 = :* (:* (:* D3 D7) D5) D7
type HEAC = :* (:* (:* D3 D7) D5) D6
type D3756 = :* (:* (:* D3 D7) D5) D6
type O7254 = :* (:* (:* D3 D7) D5) D6
type HEAB = :* (:* (:* D3 D7) D5) D5
type D3755 = :* (:* (:* D3 D7) D5) D5
type O7253 = :* (:* (:* D3 D7) D5) D5
type HEAA = :* (:* (:* D3 D7) D5) D4
type D3754 = :* (:* (:* D3 D7) D5) D4
type O7252 = :* (:* (:* D3 D7) D5) D4
type HEA9 = :* (:* (:* D3 D7) D5) D3
type D3753 = :* (:* (:* D3 D7) D5) D3
type O7251 = :* (:* (:* D3 D7) D5) D3
type HEA8 = :* (:* (:* D3 D7) D5) D2
type D3752 = :* (:* (:* D3 D7) D5) D2
type O7250 = :* (:* (:* D3 D7) D5) D2
type HEA7 = :* (:* (:* D3 D7) D5) D1
type D3751 = :* (:* (:* D3 D7) D5) D1
type O7247 = :* (:* (:* D3 D7) D5) D1
type HEA6 = :* (:* (:* D3 D7) D5) D0
type D3750 = :* (:* (:* D3 D7) D5) D0
type O7246 = :* (:* (:* D3 D7) D5) D0
type HEA5 = :* (:* (:* D3 D7) D4) D9
type D3749 = :* (:* (:* D3 D7) D4) D9
type O7245 = :* (:* (:* D3 D7) D4) D9
type HEA4 = :* (:* (:* D3 D7) D4) D8
type D3748 = :* (:* (:* D3 D7) D4) D8
type O7244 = :* (:* (:* D3 D7) D4) D8
type HEA3 = :* (:* (:* D3 D7) D4) D7
type D3747 = :* (:* (:* D3 D7) D4) D7
type O7243 = :* (:* (:* D3 D7) D4) D7
type HEA2 = :* (:* (:* D3 D7) D4) D6
type D3746 = :* (:* (:* D3 D7) D4) D6
type O7242 = :* (:* (:* D3 D7) D4) D6
type HEA1 = :* (:* (:* D3 D7) D4) D5
type D3745 = :* (:* (:* D3 D7) D4) D5
type O7241 = :* (:* (:* D3 D7) D4) D5
type HEA0 = :* (:* (:* D3 D7) D4) D4
type D3744 = :* (:* (:* D3 D7) D4) D4
type O7240 = :* (:* (:* D3 D7) D4) D4
type HE9F = :* (:* (:* D3 D7) D4) D3
type D3743 = :* (:* (:* D3 D7) D4) D3
type O7237 = :* (:* (:* D3 D7) D4) D3
type HE9E = :* (:* (:* D3 D7) D4) D2
type D3742 = :* (:* (:* D3 D7) D4) D2
type O7236 = :* (:* (:* D3 D7) D4) D2
type HE9D = :* (:* (:* D3 D7) D4) D1
type D3741 = :* (:* (:* D3 D7) D4) D1
type O7235 = :* (:* (:* D3 D7) D4) D1
type HE9C = :* (:* (:* D3 D7) D4) D0
type D3740 = :* (:* (:* D3 D7) D4) D0
type O7234 = :* (:* (:* D3 D7) D4) D0
type HE9B = :* (:* (:* D3 D7) D3) D9
type D3739 = :* (:* (:* D3 D7) D3) D9
type O7233 = :* (:* (:* D3 D7) D3) D9
type HE9A = :* (:* (:* D3 D7) D3) D8
type D3738 = :* (:* (:* D3 D7) D3) D8
type O7232 = :* (:* (:* D3 D7) D3) D8
type HE99 = :* (:* (:* D3 D7) D3) D7
type D3737 = :* (:* (:* D3 D7) D3) D7
type O7231 = :* (:* (:* D3 D7) D3) D7
type HE98 = :* (:* (:* D3 D7) D3) D6
type D3736 = :* (:* (:* D3 D7) D3) D6
type O7230 = :* (:* (:* D3 D7) D3) D6
type HE97 = :* (:* (:* D3 D7) D3) D5
type D3735 = :* (:* (:* D3 D7) D3) D5
type O7227 = :* (:* (:* D3 D7) D3) D5
type HE96 = :* (:* (:* D3 D7) D3) D4
type D3734 = :* (:* (:* D3 D7) D3) D4
type O7226 = :* (:* (:* D3 D7) D3) D4
type HE95 = :* (:* (:* D3 D7) D3) D3
type D3733 = :* (:* (:* D3 D7) D3) D3
type O7225 = :* (:* (:* D3 D7) D3) D3
type HE94 = :* (:* (:* D3 D7) D3) D2
type D3732 = :* (:* (:* D3 D7) D3) D2
type O7224 = :* (:* (:* D3 D7) D3) D2
type HE93 = :* (:* (:* D3 D7) D3) D1
type D3731 = :* (:* (:* D3 D7) D3) D1
type O7223 = :* (:* (:* D3 D7) D3) D1
type HE92 = :* (:* (:* D3 D7) D3) D0
type D3730 = :* (:* (:* D3 D7) D3) D0
type O7222 = :* (:* (:* D3 D7) D3) D0
type HE91 = :* (:* (:* D3 D7) D2) D9
type D3729 = :* (:* (:* D3 D7) D2) D9
type O7221 = :* (:* (:* D3 D7) D2) D9
type HE90 = :* (:* (:* D3 D7) D2) D8
type D3728 = :* (:* (:* D3 D7) D2) D8
type O7220 = :* (:* (:* D3 D7) D2) D8
type HE8F = :* (:* (:* D3 D7) D2) D7
type D3727 = :* (:* (:* D3 D7) D2) D7
type O7217 = :* (:* (:* D3 D7) D2) D7
type HE8E = :* (:* (:* D3 D7) D2) D6
type D3726 = :* (:* (:* D3 D7) D2) D6
type O7216 = :* (:* (:* D3 D7) D2) D6
type HE8D = :* (:* (:* D3 D7) D2) D5
type D3725 = :* (:* (:* D3 D7) D2) D5
type O7215 = :* (:* (:* D3 D7) D2) D5
type HE8C = :* (:* (:* D3 D7) D2) D4
type D3724 = :* (:* (:* D3 D7) D2) D4
type O7214 = :* (:* (:* D3 D7) D2) D4
type HE8B = :* (:* (:* D3 D7) D2) D3
type D3723 = :* (:* (:* D3 D7) D2) D3
type O7213 = :* (:* (:* D3 D7) D2) D3
type HE8A = :* (:* (:* D3 D7) D2) D2
type D3722 = :* (:* (:* D3 D7) D2) D2
type O7212 = :* (:* (:* D3 D7) D2) D2
type HE89 = :* (:* (:* D3 D7) D2) D1
type D3721 = :* (:* (:* D3 D7) D2) D1
type O7211 = :* (:* (:* D3 D7) D2) D1
type HE88 = :* (:* (:* D3 D7) D2) D0
type D3720 = :* (:* (:* D3 D7) D2) D0
type O7210 = :* (:* (:* D3 D7) D2) D0
type HE87 = :* (:* (:* D3 D7) D1) D9
type D3719 = :* (:* (:* D3 D7) D1) D9
type O7207 = :* (:* (:* D3 D7) D1) D9
type HE86 = :* (:* (:* D3 D7) D1) D8
type D3718 = :* (:* (:* D3 D7) D1) D8
type O7206 = :* (:* (:* D3 D7) D1) D8
type HE85 = :* (:* (:* D3 D7) D1) D7
type D3717 = :* (:* (:* D3 D7) D1) D7
type O7205 = :* (:* (:* D3 D7) D1) D7
type HE84 = :* (:* (:* D3 D7) D1) D6
type D3716 = :* (:* (:* D3 D7) D1) D6
type O7204 = :* (:* (:* D3 D7) D1) D6
type HE83 = :* (:* (:* D3 D7) D1) D5
type D3715 = :* (:* (:* D3 D7) D1) D5
type O7203 = :* (:* (:* D3 D7) D1) D5
type HE82 = :* (:* (:* D3 D7) D1) D4
type D3714 = :* (:* (:* D3 D7) D1) D4
type O7202 = :* (:* (:* D3 D7) D1) D4
type HE81 = :* (:* (:* D3 D7) D1) D3
type D3713 = :* (:* (:* D3 D7) D1) D3
type O7201 = :* (:* (:* D3 D7) D1) D3
type HE80 = :* (:* (:* D3 D7) D1) D2
type D3712 = :* (:* (:* D3 D7) D1) D2
type O7200 = :* (:* (:* D3 D7) D1) D2
type HE7F = :* (:* (:* D3 D7) D1) D1
type D3711 = :* (:* (:* D3 D7) D1) D1
type O7177 = :* (:* (:* D3 D7) D1) D1
type HE7E = :* (:* (:* D3 D7) D1) D0
type D3710 = :* (:* (:* D3 D7) D1) D0
type O7176 = :* (:* (:* D3 D7) D1) D0
type HE7D = :* (:* (:* D3 D7) D0) D9
type D3709 = :* (:* (:* D3 D7) D0) D9
type O7175 = :* (:* (:* D3 D7) D0) D9
type HE7C = :* (:* (:* D3 D7) D0) D8
type D3708 = :* (:* (:* D3 D7) D0) D8
type O7174 = :* (:* (:* D3 D7) D0) D8
type HE7B = :* (:* (:* D3 D7) D0) D7
type D3707 = :* (:* (:* D3 D7) D0) D7
type O7173 = :* (:* (:* D3 D7) D0) D7
type HE7A = :* (:* (:* D3 D7) D0) D6
type D3706 = :* (:* (:* D3 D7) D0) D6
type O7172 = :* (:* (:* D3 D7) D0) D6
type HE79 = :* (:* (:* D3 D7) D0) D5
type D3705 = :* (:* (:* D3 D7) D0) D5
type O7171 = :* (:* (:* D3 D7) D0) D5
type HE78 = :* (:* (:* D3 D7) D0) D4
type D3704 = :* (:* (:* D3 D7) D0) D4
type O7170 = :* (:* (:* D3 D7) D0) D4
type HE77 = :* (:* (:* D3 D7) D0) D3
type D3703 = :* (:* (:* D3 D7) D0) D3
type O7167 = :* (:* (:* D3 D7) D0) D3
type HE76 = :* (:* (:* D3 D7) D0) D2
type D3702 = :* (:* (:* D3 D7) D0) D2
type O7166 = :* (:* (:* D3 D7) D0) D2
type HE75 = :* (:* (:* D3 D7) D0) D1
type D3701 = :* (:* (:* D3 D7) D0) D1
type O7165 = :* (:* (:* D3 D7) D0) D1
type HE74 = :* (:* (:* D3 D7) D0) D0
type D3700 = :* (:* (:* D3 D7) D0) D0
type O7164 = :* (:* (:* D3 D7) D0) D0
type HE73 = :* (:* (:* D3 D6) D9) D9
type D3699 = :* (:* (:* D3 D6) D9) D9
type O7163 = :* (:* (:* D3 D6) D9) D9
type HE72 = :* (:* (:* D3 D6) D9) D8
type D3698 = :* (:* (:* D3 D6) D9) D8
type O7162 = :* (:* (:* D3 D6) D9) D8
type HE71 = :* (:* (:* D3 D6) D9) D7
type D3697 = :* (:* (:* D3 D6) D9) D7
type O7161 = :* (:* (:* D3 D6) D9) D7
type HE70 = :* (:* (:* D3 D6) D9) D6
type D3696 = :* (:* (:* D3 D6) D9) D6
type O7160 = :* (:* (:* D3 D6) D9) D6
type HE6F = :* (:* (:* D3 D6) D9) D5
type D3695 = :* (:* (:* D3 D6) D9) D5
type O7157 = :* (:* (:* D3 D6) D9) D5
type HE6E = :* (:* (:* D3 D6) D9) D4
type D3694 = :* (:* (:* D3 D6) D9) D4
type O7156 = :* (:* (:* D3 D6) D9) D4
type HE6D = :* (:* (:* D3 D6) D9) D3
type D3693 = :* (:* (:* D3 D6) D9) D3
type O7155 = :* (:* (:* D3 D6) D9) D3
type HE6C = :* (:* (:* D3 D6) D9) D2
type D3692 = :* (:* (:* D3 D6) D9) D2
type O7154 = :* (:* (:* D3 D6) D9) D2
type HE6B = :* (:* (:* D3 D6) D9) D1
type D3691 = :* (:* (:* D3 D6) D9) D1
type O7153 = :* (:* (:* D3 D6) D9) D1
type HE6A = :* (:* (:* D3 D6) D9) D0
type D3690 = :* (:* (:* D3 D6) D9) D0
type O7152 = :* (:* (:* D3 D6) D9) D0
type HE69 = :* (:* (:* D3 D6) D8) D9
type D3689 = :* (:* (:* D3 D6) D8) D9
type O7151 = :* (:* (:* D3 D6) D8) D9
type HE68 = :* (:* (:* D3 D6) D8) D8
type D3688 = :* (:* (:* D3 D6) D8) D8
type O7150 = :* (:* (:* D3 D6) D8) D8
type HE67 = :* (:* (:* D3 D6) D8) D7
type D3687 = :* (:* (:* D3 D6) D8) D7
type O7147 = :* (:* (:* D3 D6) D8) D7
type HE66 = :* (:* (:* D3 D6) D8) D6
type D3686 = :* (:* (:* D3 D6) D8) D6
type O7146 = :* (:* (:* D3 D6) D8) D6
type HE65 = :* (:* (:* D3 D6) D8) D5
type D3685 = :* (:* (:* D3 D6) D8) D5
type O7145 = :* (:* (:* D3 D6) D8) D5
type HE64 = :* (:* (:* D3 D6) D8) D4
type D3684 = :* (:* (:* D3 D6) D8) D4
type O7144 = :* (:* (:* D3 D6) D8) D4
type HE63 = :* (:* (:* D3 D6) D8) D3
type D3683 = :* (:* (:* D3 D6) D8) D3
type O7143 = :* (:* (:* D3 D6) D8) D3
type HE62 = :* (:* (:* D3 D6) D8) D2
type D3682 = :* (:* (:* D3 D6) D8) D2
type O7142 = :* (:* (:* D3 D6) D8) D2
type HE61 = :* (:* (:* D3 D6) D8) D1
type D3681 = :* (:* (:* D3 D6) D8) D1
type O7141 = :* (:* (:* D3 D6) D8) D1
type HE60 = :* (:* (:* D3 D6) D8) D0
type D3680 = :* (:* (:* D3 D6) D8) D0
type O7140 = :* (:* (:* D3 D6) D8) D0
type HE5F = :* (:* (:* D3 D6) D7) D9
type D3679 = :* (:* (:* D3 D6) D7) D9
type O7137 = :* (:* (:* D3 D6) D7) D9
type HE5E = :* (:* (:* D3 D6) D7) D8
type D3678 = :* (:* (:* D3 D6) D7) D8
type O7136 = :* (:* (:* D3 D6) D7) D8
type HE5D = :* (:* (:* D3 D6) D7) D7
type D3677 = :* (:* (:* D3 D6) D7) D7
type O7135 = :* (:* (:* D3 D6) D7) D7
type HE5C = :* (:* (:* D3 D6) D7) D6
type D3676 = :* (:* (:* D3 D6) D7) D6
type O7134 = :* (:* (:* D3 D6) D7) D6
type HE5B = :* (:* (:* D3 D6) D7) D5
type D3675 = :* (:* (:* D3 D6) D7) D5
type O7133 = :* (:* (:* D3 D6) D7) D5
type HE5A = :* (:* (:* D3 D6) D7) D4
type D3674 = :* (:* (:* D3 D6) D7) D4
type O7132 = :* (:* (:* D3 D6) D7) D4
type HE59 = :* (:* (:* D3 D6) D7) D3
type D3673 = :* (:* (:* D3 D6) D7) D3
type O7131 = :* (:* (:* D3 D6) D7) D3
type HE58 = :* (:* (:* D3 D6) D7) D2
type D3672 = :* (:* (:* D3 D6) D7) D2
type O7130 = :* (:* (:* D3 D6) D7) D2
type HE57 = :* (:* (:* D3 D6) D7) D1
type D3671 = :* (:* (:* D3 D6) D7) D1
type O7127 = :* (:* (:* D3 D6) D7) D1
type HE56 = :* (:* (:* D3 D6) D7) D0
type D3670 = :* (:* (:* D3 D6) D7) D0
type O7126 = :* (:* (:* D3 D6) D7) D0
type HE55 = :* (:* (:* D3 D6) D6) D9
type D3669 = :* (:* (:* D3 D6) D6) D9
type O7125 = :* (:* (:* D3 D6) D6) D9
type HE54 = :* (:* (:* D3 D6) D6) D8
type D3668 = :* (:* (:* D3 D6) D6) D8
type O7124 = :* (:* (:* D3 D6) D6) D8
type HE53 = :* (:* (:* D3 D6) D6) D7
type D3667 = :* (:* (:* D3 D6) D6) D7
type O7123 = :* (:* (:* D3 D6) D6) D7
type HE52 = :* (:* (:* D3 D6) D6) D6
type D3666 = :* (:* (:* D3 D6) D6) D6
type O7122 = :* (:* (:* D3 D6) D6) D6
type HE51 = :* (:* (:* D3 D6) D6) D5
type D3665 = :* (:* (:* D3 D6) D6) D5
type O7121 = :* (:* (:* D3 D6) D6) D5
type HE50 = :* (:* (:* D3 D6) D6) D4
type D3664 = :* (:* (:* D3 D6) D6) D4
type O7120 = :* (:* (:* D3 D6) D6) D4
type HE4F = :* (:* (:* D3 D6) D6) D3
type D3663 = :* (:* (:* D3 D6) D6) D3
type O7117 = :* (:* (:* D3 D6) D6) D3
type HE4E = :* (:* (:* D3 D6) D6) D2
type D3662 = :* (:* (:* D3 D6) D6) D2
type O7116 = :* (:* (:* D3 D6) D6) D2
type HE4D = :* (:* (:* D3 D6) D6) D1
type D3661 = :* (:* (:* D3 D6) D6) D1
type O7115 = :* (:* (:* D3 D6) D6) D1
type HE4C = :* (:* (:* D3 D6) D6) D0
type D3660 = :* (:* (:* D3 D6) D6) D0
type O7114 = :* (:* (:* D3 D6) D6) D0
type HE4B = :* (:* (:* D3 D6) D5) D9
type D3659 = :* (:* (:* D3 D6) D5) D9
type O7113 = :* (:* (:* D3 D6) D5) D9
type HE4A = :* (:* (:* D3 D6) D5) D8
type D3658 = :* (:* (:* D3 D6) D5) D8
type O7112 = :* (:* (:* D3 D6) D5) D8
type HE49 = :* (:* (:* D3 D6) D5) D7
type D3657 = :* (:* (:* D3 D6) D5) D7
type O7111 = :* (:* (:* D3 D6) D5) D7
type HE48 = :* (:* (:* D3 D6) D5) D6
type D3656 = :* (:* (:* D3 D6) D5) D6
type O7110 = :* (:* (:* D3 D6) D5) D6
type HE47 = :* (:* (:* D3 D6) D5) D5
type D3655 = :* (:* (:* D3 D6) D5) D5
type O7107 = :* (:* (:* D3 D6) D5) D5
type HE46 = :* (:* (:* D3 D6) D5) D4
type D3654 = :* (:* (:* D3 D6) D5) D4
type O7106 = :* (:* (:* D3 D6) D5) D4
type HE45 = :* (:* (:* D3 D6) D5) D3
type D3653 = :* (:* (:* D3 D6) D5) D3
type O7105 = :* (:* (:* D3 D6) D5) D3
type HE44 = :* (:* (:* D3 D6) D5) D2
type D3652 = :* (:* (:* D3 D6) D5) D2
type O7104 = :* (:* (:* D3 D6) D5) D2
type HE43 = :* (:* (:* D3 D6) D5) D1
type D3651 = :* (:* (:* D3 D6) D5) D1
type O7103 = :* (:* (:* D3 D6) D5) D1
type HE42 = :* (:* (:* D3 D6) D5) D0
type D3650 = :* (:* (:* D3 D6) D5) D0
type O7102 = :* (:* (:* D3 D6) D5) D0
type HE41 = :* (:* (:* D3 D6) D4) D9
type D3649 = :* (:* (:* D3 D6) D4) D9
type O7101 = :* (:* (:* D3 D6) D4) D9
type HE40 = :* (:* (:* D3 D6) D4) D8
type D3648 = :* (:* (:* D3 D6) D4) D8
type O7100 = :* (:* (:* D3 D6) D4) D8
type HE3F = :* (:* (:* D3 D6) D4) D7
type D3647 = :* (:* (:* D3 D6) D4) D7
type O7077 = :* (:* (:* D3 D6) D4) D7
type HE3E = :* (:* (:* D3 D6) D4) D6
type D3646 = :* (:* (:* D3 D6) D4) D6
type O7076 = :* (:* (:* D3 D6) D4) D6
type HE3D = :* (:* (:* D3 D6) D4) D5
type D3645 = :* (:* (:* D3 D6) D4) D5
type O7075 = :* (:* (:* D3 D6) D4) D5
type HE3C = :* (:* (:* D3 D6) D4) D4
type D3644 = :* (:* (:* D3 D6) D4) D4
type O7074 = :* (:* (:* D3 D6) D4) D4
type HE3B = :* (:* (:* D3 D6) D4) D3
type D3643 = :* (:* (:* D3 D6) D4) D3
type O7073 = :* (:* (:* D3 D6) D4) D3
type HE3A = :* (:* (:* D3 D6) D4) D2
type D3642 = :* (:* (:* D3 D6) D4) D2
type O7072 = :* (:* (:* D3 D6) D4) D2
type HE39 = :* (:* (:* D3 D6) D4) D1
type D3641 = :* (:* (:* D3 D6) D4) D1
type O7071 = :* (:* (:* D3 D6) D4) D1
type HE38 = :* (:* (:* D3 D6) D4) D0
type D3640 = :* (:* (:* D3 D6) D4) D0
type O7070 = :* (:* (:* D3 D6) D4) D0
type HE37 = :* (:* (:* D3 D6) D3) D9
type D3639 = :* (:* (:* D3 D6) D3) D9
type O7067 = :* (:* (:* D3 D6) D3) D9
type HE36 = :* (:* (:* D3 D6) D3) D8
type D3638 = :* (:* (:* D3 D6) D3) D8
type O7066 = :* (:* (:* D3 D6) D3) D8
type HE35 = :* (:* (:* D3 D6) D3) D7
type D3637 = :* (:* (:* D3 D6) D3) D7
type O7065 = :* (:* (:* D3 D6) D3) D7
type HE34 = :* (:* (:* D3 D6) D3) D6
type D3636 = :* (:* (:* D3 D6) D3) D6
type O7064 = :* (:* (:* D3 D6) D3) D6
type HE33 = :* (:* (:* D3 D6) D3) D5
type D3635 = :* (:* (:* D3 D6) D3) D5
type O7063 = :* (:* (:* D3 D6) D3) D5
type HE32 = :* (:* (:* D3 D6) D3) D4
type D3634 = :* (:* (:* D3 D6) D3) D4
type O7062 = :* (:* (:* D3 D6) D3) D4
type HE31 = :* (:* (:* D3 D6) D3) D3
type D3633 = :* (:* (:* D3 D6) D3) D3
type O7061 = :* (:* (:* D3 D6) D3) D3
type HE30 = :* (:* (:* D3 D6) D3) D2
type D3632 = :* (:* (:* D3 D6) D3) D2
type O7060 = :* (:* (:* D3 D6) D3) D2
type HE2F = :* (:* (:* D3 D6) D3) D1
type D3631 = :* (:* (:* D3 D6) D3) D1
type O7057 = :* (:* (:* D3 D6) D3) D1
type HE2E = :* (:* (:* D3 D6) D3) D0
type D3630 = :* (:* (:* D3 D6) D3) D0
type O7056 = :* (:* (:* D3 D6) D3) D0
type HE2D = :* (:* (:* D3 D6) D2) D9
type D3629 = :* (:* (:* D3 D6) D2) D9
type O7055 = :* (:* (:* D3 D6) D2) D9
type HE2C = :* (:* (:* D3 D6) D2) D8
type D3628 = :* (:* (:* D3 D6) D2) D8
type O7054 = :* (:* (:* D3 D6) D2) D8
type HE2B = :* (:* (:* D3 D6) D2) D7
type D3627 = :* (:* (:* D3 D6) D2) D7
type O7053 = :* (:* (:* D3 D6) D2) D7
type HE2A = :* (:* (:* D3 D6) D2) D6
type D3626 = :* (:* (:* D3 D6) D2) D6
type O7052 = :* (:* (:* D3 D6) D2) D6
type HE29 = :* (:* (:* D3 D6) D2) D5
type D3625 = :* (:* (:* D3 D6) D2) D5
type O7051 = :* (:* (:* D3 D6) D2) D5
type HE28 = :* (:* (:* D3 D6) D2) D4
type D3624 = :* (:* (:* D3 D6) D2) D4
type O7050 = :* (:* (:* D3 D6) D2) D4
type HE27 = :* (:* (:* D3 D6) D2) D3
type D3623 = :* (:* (:* D3 D6) D2) D3
type O7047 = :* (:* (:* D3 D6) D2) D3
type HE26 = :* (:* (:* D3 D6) D2) D2
type D3622 = :* (:* (:* D3 D6) D2) D2
type O7046 = :* (:* (:* D3 D6) D2) D2
type HE25 = :* (:* (:* D3 D6) D2) D1
type D3621 = :* (:* (:* D3 D6) D2) D1
type O7045 = :* (:* (:* D3 D6) D2) D1
type HE24 = :* (:* (:* D3 D6) D2) D0
type D3620 = :* (:* (:* D3 D6) D2) D0
type O7044 = :* (:* (:* D3 D6) D2) D0
type HE23 = :* (:* (:* D3 D6) D1) D9
type D3619 = :* (:* (:* D3 D6) D1) D9
type O7043 = :* (:* (:* D3 D6) D1) D9
type HE22 = :* (:* (:* D3 D6) D1) D8
type D3618 = :* (:* (:* D3 D6) D1) D8
type O7042 = :* (:* (:* D3 D6) D1) D8
type HE21 = :* (:* (:* D3 D6) D1) D7
type D3617 = :* (:* (:* D3 D6) D1) D7
type O7041 = :* (:* (:* D3 D6) D1) D7
type HE20 = :* (:* (:* D3 D6) D1) D6
type D3616 = :* (:* (:* D3 D6) D1) D6
type O7040 = :* (:* (:* D3 D6) D1) D6
type HE1F = :* (:* (:* D3 D6) D1) D5
type D3615 = :* (:* (:* D3 D6) D1) D5
type O7037 = :* (:* (:* D3 D6) D1) D5
type HE1E = :* (:* (:* D3 D6) D1) D4
type D3614 = :* (:* (:* D3 D6) D1) D4
type O7036 = :* (:* (:* D3 D6) D1) D4
type HE1D = :* (:* (:* D3 D6) D1) D3
type D3613 = :* (:* (:* D3 D6) D1) D3
type O7035 = :* (:* (:* D3 D6) D1) D3
type HE1C = :* (:* (:* D3 D6) D1) D2
type D3612 = :* (:* (:* D3 D6) D1) D2
type O7034 = :* (:* (:* D3 D6) D1) D2
type HE1B = :* (:* (:* D3 D6) D1) D1
type D3611 = :* (:* (:* D3 D6) D1) D1
type O7033 = :* (:* (:* D3 D6) D1) D1
type HE1A = :* (:* (:* D3 D6) D1) D0
type D3610 = :* (:* (:* D3 D6) D1) D0
type O7032 = :* (:* (:* D3 D6) D1) D0
type HE19 = :* (:* (:* D3 D6) D0) D9
type D3609 = :* (:* (:* D3 D6) D0) D9
type O7031 = :* (:* (:* D3 D6) D0) D9
type HE18 = :* (:* (:* D3 D6) D0) D8
type D3608 = :* (:* (:* D3 D6) D0) D8
type O7030 = :* (:* (:* D3 D6) D0) D8
type HE17 = :* (:* (:* D3 D6) D0) D7
type D3607 = :* (:* (:* D3 D6) D0) D7
type O7027 = :* (:* (:* D3 D6) D0) D7
type HE16 = :* (:* (:* D3 D6) D0) D6
type D3606 = :* (:* (:* D3 D6) D0) D6
type O7026 = :* (:* (:* D3 D6) D0) D6
type HE15 = :* (:* (:* D3 D6) D0) D5
type D3605 = :* (:* (:* D3 D6) D0) D5
type O7025 = :* (:* (:* D3 D6) D0) D5
type HE14 = :* (:* (:* D3 D6) D0) D4
type D3604 = :* (:* (:* D3 D6) D0) D4
type O7024 = :* (:* (:* D3 D6) D0) D4
type HE13 = :* (:* (:* D3 D6) D0) D3
type D3603 = :* (:* (:* D3 D6) D0) D3
type O7023 = :* (:* (:* D3 D6) D0) D3
type HE12 = :* (:* (:* D3 D6) D0) D2
type D3602 = :* (:* (:* D3 D6) D0) D2
type O7022 = :* (:* (:* D3 D6) D0) D2
type HE11 = :* (:* (:* D3 D6) D0) D1
type D3601 = :* (:* (:* D3 D6) D0) D1
type O7021 = :* (:* (:* D3 D6) D0) D1
type HE10 = :* (:* (:* D3 D6) D0) D0
type D3600 = :* (:* (:* D3 D6) D0) D0
type O7020 = :* (:* (:* D3 D6) D0) D0
type HE0F = :* (:* (:* D3 D5) D9) D9
type D3599 = :* (:* (:* D3 D5) D9) D9
type O7017 = :* (:* (:* D3 D5) D9) D9
type HE0E = :* (:* (:* D3 D5) D9) D8
type D3598 = :* (:* (:* D3 D5) D9) D8
type O7016 = :* (:* (:* D3 D5) D9) D8
type HE0D = :* (:* (:* D3 D5) D9) D7
type D3597 = :* (:* (:* D3 D5) D9) D7
type O7015 = :* (:* (:* D3 D5) D9) D7
type HE0C = :* (:* (:* D3 D5) D9) D6
type D3596 = :* (:* (:* D3 D5) D9) D6
type O7014 = :* (:* (:* D3 D5) D9) D6
type HE0B = :* (:* (:* D3 D5) D9) D5
type D3595 = :* (:* (:* D3 D5) D9) D5
type O7013 = :* (:* (:* D3 D5) D9) D5
type HE0A = :* (:* (:* D3 D5) D9) D4
type D3594 = :* (:* (:* D3 D5) D9) D4
type O7012 = :* (:* (:* D3 D5) D9) D4
type HE09 = :* (:* (:* D3 D5) D9) D3
type D3593 = :* (:* (:* D3 D5) D9) D3
type O7011 = :* (:* (:* D3 D5) D9) D3
type HE08 = :* (:* (:* D3 D5) D9) D2
type D3592 = :* (:* (:* D3 D5) D9) D2
type O7010 = :* (:* (:* D3 D5) D9) D2
type HE07 = :* (:* (:* D3 D5) D9) D1
type D3591 = :* (:* (:* D3 D5) D9) D1
type O7007 = :* (:* (:* D3 D5) D9) D1
type HE06 = :* (:* (:* D3 D5) D9) D0
type D3590 = :* (:* (:* D3 D5) D9) D0
type O7006 = :* (:* (:* D3 D5) D9) D0
type HE05 = :* (:* (:* D3 D5) D8) D9
type D3589 = :* (:* (:* D3 D5) D8) D9
type O7005 = :* (:* (:* D3 D5) D8) D9
type HE04 = :* (:* (:* D3 D5) D8) D8
type D3588 = :* (:* (:* D3 D5) D8) D8
type O7004 = :* (:* (:* D3 D5) D8) D8
type HE03 = :* (:* (:* D3 D5) D8) D7
type D3587 = :* (:* (:* D3 D5) D8) D7
type O7003 = :* (:* (:* D3 D5) D8) D7
type HE02 = :* (:* (:* D3 D5) D8) D6
type D3586 = :* (:* (:* D3 D5) D8) D6
type O7002 = :* (:* (:* D3 D5) D8) D6
type HE01 = :* (:* (:* D3 D5) D8) D5
type D3585 = :* (:* (:* D3 D5) D8) D5
type O7001 = :* (:* (:* D3 D5) D8) D5
type HE00 = :* (:* (:* D3 D5) D8) D4
type D3584 = :* (:* (:* D3 D5) D8) D4
type O7000 = :* (:* (:* D3 D5) D8) D4
type HDFF = :* (:* (:* D3 D5) D8) D3
type D3583 = :* (:* (:* D3 D5) D8) D3
type O6777 = :* (:* (:* D3 D5) D8) D3
type HDFE = :* (:* (:* D3 D5) D8) D2
type D3582 = :* (:* (:* D3 D5) D8) D2
type O6776 = :* (:* (:* D3 D5) D8) D2
type HDFD = :* (:* (:* D3 D5) D8) D1
type D3581 = :* (:* (:* D3 D5) D8) D1
type O6775 = :* (:* (:* D3 D5) D8) D1
type HDFC = :* (:* (:* D3 D5) D8) D0
type D3580 = :* (:* (:* D3 D5) D8) D0
type O6774 = :* (:* (:* D3 D5) D8) D0
type HDFB = :* (:* (:* D3 D5) D7) D9
type D3579 = :* (:* (:* D3 D5) D7) D9
type O6773 = :* (:* (:* D3 D5) D7) D9
type HDFA = :* (:* (:* D3 D5) D7) D8
type D3578 = :* (:* (:* D3 D5) D7) D8
type O6772 = :* (:* (:* D3 D5) D7) D8
type HDF9 = :* (:* (:* D3 D5) D7) D7
type D3577 = :* (:* (:* D3 D5) D7) D7
type O6771 = :* (:* (:* D3 D5) D7) D7
type HDF8 = :* (:* (:* D3 D5) D7) D6
type D3576 = :* (:* (:* D3 D5) D7) D6
type O6770 = :* (:* (:* D3 D5) D7) D6
type HDF7 = :* (:* (:* D3 D5) D7) D5
type D3575 = :* (:* (:* D3 D5) D7) D5
type O6767 = :* (:* (:* D3 D5) D7) D5
type HDF6 = :* (:* (:* D3 D5) D7) D4
type D3574 = :* (:* (:* D3 D5) D7) D4
type O6766 = :* (:* (:* D3 D5) D7) D4
type HDF5 = :* (:* (:* D3 D5) D7) D3
type D3573 = :* (:* (:* D3 D5) D7) D3
type O6765 = :* (:* (:* D3 D5) D7) D3
type HDF4 = :* (:* (:* D3 D5) D7) D2
type D3572 = :* (:* (:* D3 D5) D7) D2
type O6764 = :* (:* (:* D3 D5) D7) D2
type HDF3 = :* (:* (:* D3 D5) D7) D1
type D3571 = :* (:* (:* D3 D5) D7) D1
type O6763 = :* (:* (:* D3 D5) D7) D1
type HDF2 = :* (:* (:* D3 D5) D7) D0
type D3570 = :* (:* (:* D3 D5) D7) D0
type O6762 = :* (:* (:* D3 D5) D7) D0
type HDF1 = :* (:* (:* D3 D5) D6) D9
type D3569 = :* (:* (:* D3 D5) D6) D9
type O6761 = :* (:* (:* D3 D5) D6) D9
type HDF0 = :* (:* (:* D3 D5) D6) D8
type D3568 = :* (:* (:* D3 D5) D6) D8
type O6760 = :* (:* (:* D3 D5) D6) D8
type HDEF = :* (:* (:* D3 D5) D6) D7
type D3567 = :* (:* (:* D3 D5) D6) D7
type O6757 = :* (:* (:* D3 D5) D6) D7
type HDEE = :* (:* (:* D3 D5) D6) D6
type D3566 = :* (:* (:* D3 D5) D6) D6
type O6756 = :* (:* (:* D3 D5) D6) D6
type HDED = :* (:* (:* D3 D5) D6) D5
type D3565 = :* (:* (:* D3 D5) D6) D5
type O6755 = :* (:* (:* D3 D5) D6) D5
type HDEC = :* (:* (:* D3 D5) D6) D4
type D3564 = :* (:* (:* D3 D5) D6) D4
type O6754 = :* (:* (:* D3 D5) D6) D4
type HDEB = :* (:* (:* D3 D5) D6) D3
type D3563 = :* (:* (:* D3 D5) D6) D3
type O6753 = :* (:* (:* D3 D5) D6) D3
type HDEA = :* (:* (:* D3 D5) D6) D2
type D3562 = :* (:* (:* D3 D5) D6) D2
type O6752 = :* (:* (:* D3 D5) D6) D2
type HDE9 = :* (:* (:* D3 D5) D6) D1
type D3561 = :* (:* (:* D3 D5) D6) D1
type O6751 = :* (:* (:* D3 D5) D6) D1
type HDE8 = :* (:* (:* D3 D5) D6) D0
type D3560 = :* (:* (:* D3 D5) D6) D0
type O6750 = :* (:* (:* D3 D5) D6) D0
type HDE7 = :* (:* (:* D3 D5) D5) D9
type D3559 = :* (:* (:* D3 D5) D5) D9
type O6747 = :* (:* (:* D3 D5) D5) D9
type HDE6 = :* (:* (:* D3 D5) D5) D8
type D3558 = :* (:* (:* D3 D5) D5) D8
type O6746 = :* (:* (:* D3 D5) D5) D8
type HDE5 = :* (:* (:* D3 D5) D5) D7
type D3557 = :* (:* (:* D3 D5) D5) D7
type O6745 = :* (:* (:* D3 D5) D5) D7
type HDE4 = :* (:* (:* D3 D5) D5) D6
type D3556 = :* (:* (:* D3 D5) D5) D6
type O6744 = :* (:* (:* D3 D5) D5) D6
type HDE3 = :* (:* (:* D3 D5) D5) D5
type D3555 = :* (:* (:* D3 D5) D5) D5
type O6743 = :* (:* (:* D3 D5) D5) D5
type HDE2 = :* (:* (:* D3 D5) D5) D4
type D3554 = :* (:* (:* D3 D5) D5) D4
type O6742 = :* (:* (:* D3 D5) D5) D4
type HDE1 = :* (:* (:* D3 D5) D5) D3
type D3553 = :* (:* (:* D3 D5) D5) D3
type O6741 = :* (:* (:* D3 D5) D5) D3
type HDE0 = :* (:* (:* D3 D5) D5) D2
type D3552 = :* (:* (:* D3 D5) D5) D2
type O6740 = :* (:* (:* D3 D5) D5) D2
type HDDF = :* (:* (:* D3 D5) D5) D1
type D3551 = :* (:* (:* D3 D5) D5) D1
type O6737 = :* (:* (:* D3 D5) D5) D1
type HDDE = :* (:* (:* D3 D5) D5) D0
type D3550 = :* (:* (:* D3 D5) D5) D0
type O6736 = :* (:* (:* D3 D5) D5) D0
type HDDD = :* (:* (:* D3 D5) D4) D9
type D3549 = :* (:* (:* D3 D5) D4) D9
type O6735 = :* (:* (:* D3 D5) D4) D9
type HDDC = :* (:* (:* D3 D5) D4) D8
type D3548 = :* (:* (:* D3 D5) D4) D8
type O6734 = :* (:* (:* D3 D5) D4) D8
type HDDB = :* (:* (:* D3 D5) D4) D7
type D3547 = :* (:* (:* D3 D5) D4) D7
type O6733 = :* (:* (:* D3 D5) D4) D7
type HDDA = :* (:* (:* D3 D5) D4) D6
type D3546 = :* (:* (:* D3 D5) D4) D6
type O6732 = :* (:* (:* D3 D5) D4) D6
type HDD9 = :* (:* (:* D3 D5) D4) D5
type D3545 = :* (:* (:* D3 D5) D4) D5
type O6731 = :* (:* (:* D3 D5) D4) D5
type HDD8 = :* (:* (:* D3 D5) D4) D4
type D3544 = :* (:* (:* D3 D5) D4) D4
type O6730 = :* (:* (:* D3 D5) D4) D4
type HDD7 = :* (:* (:* D3 D5) D4) D3
type D3543 = :* (:* (:* D3 D5) D4) D3
type O6727 = :* (:* (:* D3 D5) D4) D3
type HDD6 = :* (:* (:* D3 D5) D4) D2
type D3542 = :* (:* (:* D3 D5) D4) D2
type O6726 = :* (:* (:* D3 D5) D4) D2
type HDD5 = :* (:* (:* D3 D5) D4) D1
type D3541 = :* (:* (:* D3 D5) D4) D1
type O6725 = :* (:* (:* D3 D5) D4) D1
type HDD4 = :* (:* (:* D3 D5) D4) D0
type D3540 = :* (:* (:* D3 D5) D4) D0
type O6724 = :* (:* (:* D3 D5) D4) D0
type HDD3 = :* (:* (:* D3 D5) D3) D9
type D3539 = :* (:* (:* D3 D5) D3) D9
type O6723 = :* (:* (:* D3 D5) D3) D9
type HDD2 = :* (:* (:* D3 D5) D3) D8
type D3538 = :* (:* (:* D3 D5) D3) D8
type O6722 = :* (:* (:* D3 D5) D3) D8
type HDD1 = :* (:* (:* D3 D5) D3) D7
type D3537 = :* (:* (:* D3 D5) D3) D7
type O6721 = :* (:* (:* D3 D5) D3) D7
type HDD0 = :* (:* (:* D3 D5) D3) D6
type D3536 = :* (:* (:* D3 D5) D3) D6
type O6720 = :* (:* (:* D3 D5) D3) D6
type HDCF = :* (:* (:* D3 D5) D3) D5
type D3535 = :* (:* (:* D3 D5) D3) D5
type O6717 = :* (:* (:* D3 D5) D3) D5
type HDCE = :* (:* (:* D3 D5) D3) D4
type D3534 = :* (:* (:* D3 D5) D3) D4
type O6716 = :* (:* (:* D3 D5) D3) D4
type HDCD = :* (:* (:* D3 D5) D3) D3
type D3533 = :* (:* (:* D3 D5) D3) D3
type O6715 = :* (:* (:* D3 D5) D3) D3
type HDCC = :* (:* (:* D3 D5) D3) D2
type D3532 = :* (:* (:* D3 D5) D3) D2
type O6714 = :* (:* (:* D3 D5) D3) D2
type HDCB = :* (:* (:* D3 D5) D3) D1
type D3531 = :* (:* (:* D3 D5) D3) D1
type O6713 = :* (:* (:* D3 D5) D3) D1
type HDCA = :* (:* (:* D3 D5) D3) D0
type D3530 = :* (:* (:* D3 D5) D3) D0
type O6712 = :* (:* (:* D3 D5) D3) D0
type HDC9 = :* (:* (:* D3 D5) D2) D9
type D3529 = :* (:* (:* D3 D5) D2) D9
type O6711 = :* (:* (:* D3 D5) D2) D9
type HDC8 = :* (:* (:* D3 D5) D2) D8
type D3528 = :* (:* (:* D3 D5) D2) D8
type O6710 = :* (:* (:* D3 D5) D2) D8
type HDC7 = :* (:* (:* D3 D5) D2) D7
type D3527 = :* (:* (:* D3 D5) D2) D7
type O6707 = :* (:* (:* D3 D5) D2) D7
type HDC6 = :* (:* (:* D3 D5) D2) D6
type D3526 = :* (:* (:* D3 D5) D2) D6
type O6706 = :* (:* (:* D3 D5) D2) D6
type HDC5 = :* (:* (:* D3 D5) D2) D5
type D3525 = :* (:* (:* D3 D5) D2) D5
type O6705 = :* (:* (:* D3 D5) D2) D5
type HDC4 = :* (:* (:* D3 D5) D2) D4
type D3524 = :* (:* (:* D3 D5) D2) D4
type O6704 = :* (:* (:* D3 D5) D2) D4
type HDC3 = :* (:* (:* D3 D5) D2) D3
type D3523 = :* (:* (:* D3 D5) D2) D3
type O6703 = :* (:* (:* D3 D5) D2) D3
type HDC2 = :* (:* (:* D3 D5) D2) D2
type D3522 = :* (:* (:* D3 D5) D2) D2
type O6702 = :* (:* (:* D3 D5) D2) D2
type HDC1 = :* (:* (:* D3 D5) D2) D1
type D3521 = :* (:* (:* D3 D5) D2) D1
type O6701 = :* (:* (:* D3 D5) D2) D1
type HDC0 = :* (:* (:* D3 D5) D2) D0
type D3520 = :* (:* (:* D3 D5) D2) D0
type O6700 = :* (:* (:* D3 D5) D2) D0
type HDBF = :* (:* (:* D3 D5) D1) D9
type D3519 = :* (:* (:* D3 D5) D1) D9
type O6677 = :* (:* (:* D3 D5) D1) D9
type HDBE = :* (:* (:* D3 D5) D1) D8
type D3518 = :* (:* (:* D3 D5) D1) D8
type O6676 = :* (:* (:* D3 D5) D1) D8
type HDBD = :* (:* (:* D3 D5) D1) D7
type D3517 = :* (:* (:* D3 D5) D1) D7
type O6675 = :* (:* (:* D3 D5) D1) D7
type HDBC = :* (:* (:* D3 D5) D1) D6
type D3516 = :* (:* (:* D3 D5) D1) D6
type O6674 = :* (:* (:* D3 D5) D1) D6
type HDBB = :* (:* (:* D3 D5) D1) D5
type D3515 = :* (:* (:* D3 D5) D1) D5
type O6673 = :* (:* (:* D3 D5) D1) D5
type HDBA = :* (:* (:* D3 D5) D1) D4
type D3514 = :* (:* (:* D3 D5) D1) D4
type O6672 = :* (:* (:* D3 D5) D1) D4
type HDB9 = :* (:* (:* D3 D5) D1) D3
type D3513 = :* (:* (:* D3 D5) D1) D3
type O6671 = :* (:* (:* D3 D5) D1) D3
type HDB8 = :* (:* (:* D3 D5) D1) D2
type D3512 = :* (:* (:* D3 D5) D1) D2
type O6670 = :* (:* (:* D3 D5) D1) D2
type HDB7 = :* (:* (:* D3 D5) D1) D1
type D3511 = :* (:* (:* D3 D5) D1) D1
type O6667 = :* (:* (:* D3 D5) D1) D1
type HDB6 = :* (:* (:* D3 D5) D1) D0
type D3510 = :* (:* (:* D3 D5) D1) D0
type O6666 = :* (:* (:* D3 D5) D1) D0
type HDB5 = :* (:* (:* D3 D5) D0) D9
type D3509 = :* (:* (:* D3 D5) D0) D9
type O6665 = :* (:* (:* D3 D5) D0) D9
type HDB4 = :* (:* (:* D3 D5) D0) D8
type D3508 = :* (:* (:* D3 D5) D0) D8
type O6664 = :* (:* (:* D3 D5) D0) D8
type HDB3 = :* (:* (:* D3 D5) D0) D7
type D3507 = :* (:* (:* D3 D5) D0) D7
type O6663 = :* (:* (:* D3 D5) D0) D7
type HDB2 = :* (:* (:* D3 D5) D0) D6
type D3506 = :* (:* (:* D3 D5) D0) D6
type O6662 = :* (:* (:* D3 D5) D0) D6
type HDB1 = :* (:* (:* D3 D5) D0) D5
type D3505 = :* (:* (:* D3 D5) D0) D5
type O6661 = :* (:* (:* D3 D5) D0) D5
type HDB0 = :* (:* (:* D3 D5) D0) D4
type D3504 = :* (:* (:* D3 D5) D0) D4
type O6660 = :* (:* (:* D3 D5) D0) D4
type HDAF = :* (:* (:* D3 D5) D0) D3
type D3503 = :* (:* (:* D3 D5) D0) D3
type O6657 = :* (:* (:* D3 D5) D0) D3
type HDAE = :* (:* (:* D3 D5) D0) D2
type D3502 = :* (:* (:* D3 D5) D0) D2
type O6656 = :* (:* (:* D3 D5) D0) D2
type HDAD = :* (:* (:* D3 D5) D0) D1
type D3501 = :* (:* (:* D3 D5) D0) D1
type O6655 = :* (:* (:* D3 D5) D0) D1
type HDAC = :* (:* (:* D3 D5) D0) D0
type D3500 = :* (:* (:* D3 D5) D0) D0
type O6654 = :* (:* (:* D3 D5) D0) D0
type HDAB = :* (:* (:* D3 D4) D9) D9
type D3499 = :* (:* (:* D3 D4) D9) D9
type O6653 = :* (:* (:* D3 D4) D9) D9
type HDAA = :* (:* (:* D3 D4) D9) D8
type D3498 = :* (:* (:* D3 D4) D9) D8
type O6652 = :* (:* (:* D3 D4) D9) D8
type HDA9 = :* (:* (:* D3 D4) D9) D7
type D3497 = :* (:* (:* D3 D4) D9) D7
type O6651 = :* (:* (:* D3 D4) D9) D7
type HDA8 = :* (:* (:* D3 D4) D9) D6
type D3496 = :* (:* (:* D3 D4) D9) D6
type O6650 = :* (:* (:* D3 D4) D9) D6
type HDA7 = :* (:* (:* D3 D4) D9) D5
type D3495 = :* (:* (:* D3 D4) D9) D5
type O6647 = :* (:* (:* D3 D4) D9) D5
type HDA6 = :* (:* (:* D3 D4) D9) D4
type D3494 = :* (:* (:* D3 D4) D9) D4
type O6646 = :* (:* (:* D3 D4) D9) D4
type HDA5 = :* (:* (:* D3 D4) D9) D3
type D3493 = :* (:* (:* D3 D4) D9) D3
type O6645 = :* (:* (:* D3 D4) D9) D3
type HDA4 = :* (:* (:* D3 D4) D9) D2
type D3492 = :* (:* (:* D3 D4) D9) D2
type O6644 = :* (:* (:* D3 D4) D9) D2
type HDA3 = :* (:* (:* D3 D4) D9) D1
type D3491 = :* (:* (:* D3 D4) D9) D1
type O6643 = :* (:* (:* D3 D4) D9) D1
type HDA2 = :* (:* (:* D3 D4) D9) D0
type D3490 = :* (:* (:* D3 D4) D9) D0
type O6642 = :* (:* (:* D3 D4) D9) D0
type HDA1 = :* (:* (:* D3 D4) D8) D9
type D3489 = :* (:* (:* D3 D4) D8) D9
type O6641 = :* (:* (:* D3 D4) D8) D9
type HDA0 = :* (:* (:* D3 D4) D8) D8
type D3488 = :* (:* (:* D3 D4) D8) D8
type O6640 = :* (:* (:* D3 D4) D8) D8
type HD9F = :* (:* (:* D3 D4) D8) D7
type D3487 = :* (:* (:* D3 D4) D8) D7
type O6637 = :* (:* (:* D3 D4) D8) D7
type HD9E = :* (:* (:* D3 D4) D8) D6
type D3486 = :* (:* (:* D3 D4) D8) D6
type O6636 = :* (:* (:* D3 D4) D8) D6
type HD9D = :* (:* (:* D3 D4) D8) D5
type D3485 = :* (:* (:* D3 D4) D8) D5
type O6635 = :* (:* (:* D3 D4) D8) D5
type HD9C = :* (:* (:* D3 D4) D8) D4
type D3484 = :* (:* (:* D3 D4) D8) D4
type O6634 = :* (:* (:* D3 D4) D8) D4
type HD9B = :* (:* (:* D3 D4) D8) D3
type D3483 = :* (:* (:* D3 D4) D8) D3
type O6633 = :* (:* (:* D3 D4) D8) D3
type HD9A = :* (:* (:* D3 D4) D8) D2
type D3482 = :* (:* (:* D3 D4) D8) D2
type O6632 = :* (:* (:* D3 D4) D8) D2
type HD99 = :* (:* (:* D3 D4) D8) D1
type D3481 = :* (:* (:* D3 D4) D8) D1
type O6631 = :* (:* (:* D3 D4) D8) D1
type HD98 = :* (:* (:* D3 D4) D8) D0
type D3480 = :* (:* (:* D3 D4) D8) D0
type O6630 = :* (:* (:* D3 D4) D8) D0
type HD97 = :* (:* (:* D3 D4) D7) D9
type D3479 = :* (:* (:* D3 D4) D7) D9
type O6627 = :* (:* (:* D3 D4) D7) D9
type HD96 = :* (:* (:* D3 D4) D7) D8
type D3478 = :* (:* (:* D3 D4) D7) D8
type O6626 = :* (:* (:* D3 D4) D7) D8
type HD95 = :* (:* (:* D3 D4) D7) D7
type D3477 = :* (:* (:* D3 D4) D7) D7
type O6625 = :* (:* (:* D3 D4) D7) D7
type HD94 = :* (:* (:* D3 D4) D7) D6
type D3476 = :* (:* (:* D3 D4) D7) D6
type O6624 = :* (:* (:* D3 D4) D7) D6
type HD93 = :* (:* (:* D3 D4) D7) D5
type D3475 = :* (:* (:* D3 D4) D7) D5
type O6623 = :* (:* (:* D3 D4) D7) D5
type HD92 = :* (:* (:* D3 D4) D7) D4
type D3474 = :* (:* (:* D3 D4) D7) D4
type O6622 = :* (:* (:* D3 D4) D7) D4
type HD91 = :* (:* (:* D3 D4) D7) D3
type D3473 = :* (:* (:* D3 D4) D7) D3
type O6621 = :* (:* (:* D3 D4) D7) D3
type HD90 = :* (:* (:* D3 D4) D7) D2
type D3472 = :* (:* (:* D3 D4) D7) D2
type O6620 = :* (:* (:* D3 D4) D7) D2
type HD8F = :* (:* (:* D3 D4) D7) D1
type D3471 = :* (:* (:* D3 D4) D7) D1
type O6617 = :* (:* (:* D3 D4) D7) D1
type HD8E = :* (:* (:* D3 D4) D7) D0
type D3470 = :* (:* (:* D3 D4) D7) D0
type O6616 = :* (:* (:* D3 D4) D7) D0
type HD8D = :* (:* (:* D3 D4) D6) D9
type D3469 = :* (:* (:* D3 D4) D6) D9
type O6615 = :* (:* (:* D3 D4) D6) D9
type HD8C = :* (:* (:* D3 D4) D6) D8
type D3468 = :* (:* (:* D3 D4) D6) D8
type O6614 = :* (:* (:* D3 D4) D6) D8
type HD8B = :* (:* (:* D3 D4) D6) D7
type D3467 = :* (:* (:* D3 D4) D6) D7
type O6613 = :* (:* (:* D3 D4) D6) D7
type HD8A = :* (:* (:* D3 D4) D6) D6
type D3466 = :* (:* (:* D3 D4) D6) D6
type O6612 = :* (:* (:* D3 D4) D6) D6
type HD89 = :* (:* (:* D3 D4) D6) D5
type D3465 = :* (:* (:* D3 D4) D6) D5
type O6611 = :* (:* (:* D3 D4) D6) D5
type HD88 = :* (:* (:* D3 D4) D6) D4
type D3464 = :* (:* (:* D3 D4) D6) D4
type O6610 = :* (:* (:* D3 D4) D6) D4
type HD87 = :* (:* (:* D3 D4) D6) D3
type D3463 = :* (:* (:* D3 D4) D6) D3
type O6607 = :* (:* (:* D3 D4) D6) D3
type HD86 = :* (:* (:* D3 D4) D6) D2
type D3462 = :* (:* (:* D3 D4) D6) D2
type O6606 = :* (:* (:* D3 D4) D6) D2
type HD85 = :* (:* (:* D3 D4) D6) D1
type D3461 = :* (:* (:* D3 D4) D6) D1
type O6605 = :* (:* (:* D3 D4) D6) D1
type HD84 = :* (:* (:* D3 D4) D6) D0
type D3460 = :* (:* (:* D3 D4) D6) D0
type O6604 = :* (:* (:* D3 D4) D6) D0
type HD83 = :* (:* (:* D3 D4) D5) D9
type D3459 = :* (:* (:* D3 D4) D5) D9
type O6603 = :* (:* (:* D3 D4) D5) D9
type HD82 = :* (:* (:* D3 D4) D5) D8
type D3458 = :* (:* (:* D3 D4) D5) D8
type O6602 = :* (:* (:* D3 D4) D5) D8
type HD81 = :* (:* (:* D3 D4) D5) D7
type D3457 = :* (:* (:* D3 D4) D5) D7
type O6601 = :* (:* (:* D3 D4) D5) D7
type HD80 = :* (:* (:* D3 D4) D5) D6
type D3456 = :* (:* (:* D3 D4) D5) D6
type O6600 = :* (:* (:* D3 D4) D5) D6
type HD7F = :* (:* (:* D3 D4) D5) D5
type D3455 = :* (:* (:* D3 D4) D5) D5
type O6577 = :* (:* (:* D3 D4) D5) D5
type HD7E = :* (:* (:* D3 D4) D5) D4
type D3454 = :* (:* (:* D3 D4) D5) D4
type O6576 = :* (:* (:* D3 D4) D5) D4
type HD7D = :* (:* (:* D3 D4) D5) D3
type D3453 = :* (:* (:* D3 D4) D5) D3
type O6575 = :* (:* (:* D3 D4) D5) D3
type HD7C = :* (:* (:* D3 D4) D5) D2
type D3452 = :* (:* (:* D3 D4) D5) D2
type O6574 = :* (:* (:* D3 D4) D5) D2
type HD7B = :* (:* (:* D3 D4) D5) D1
type D3451 = :* (:* (:* D3 D4) D5) D1
type O6573 = :* (:* (:* D3 D4) D5) D1
type HD7A = :* (:* (:* D3 D4) D5) D0
type D3450 = :* (:* (:* D3 D4) D5) D0
type O6572 = :* (:* (:* D3 D4) D5) D0
type HD79 = :* (:* (:* D3 D4) D4) D9
type D3449 = :* (:* (:* D3 D4) D4) D9
type O6571 = :* (:* (:* D3 D4) D4) D9
type HD78 = :* (:* (:* D3 D4) D4) D8
type D3448 = :* (:* (:* D3 D4) D4) D8
type O6570 = :* (:* (:* D3 D4) D4) D8
type HD77 = :* (:* (:* D3 D4) D4) D7
type D3447 = :* (:* (:* D3 D4) D4) D7
type O6567 = :* (:* (:* D3 D4) D4) D7
type HD76 = :* (:* (:* D3 D4) D4) D6
type D3446 = :* (:* (:* D3 D4) D4) D6
type O6566 = :* (:* (:* D3 D4) D4) D6
type HD75 = :* (:* (:* D3 D4) D4) D5
type D3445 = :* (:* (:* D3 D4) D4) D5
type O6565 = :* (:* (:* D3 D4) D4) D5
type HD74 = :* (:* (:* D3 D4) D4) D4
type D3444 = :* (:* (:* D3 D4) D4) D4
type O6564 = :* (:* (:* D3 D4) D4) D4
type HD73 = :* (:* (:* D3 D4) D4) D3
type D3443 = :* (:* (:* D3 D4) D4) D3
type O6563 = :* (:* (:* D3 D4) D4) D3
type HD72 = :* (:* (:* D3 D4) D4) D2
type D3442 = :* (:* (:* D3 D4) D4) D2
type O6562 = :* (:* (:* D3 D4) D4) D2
type HD71 = :* (:* (:* D3 D4) D4) D1
type D3441 = :* (:* (:* D3 D4) D4) D1
type O6561 = :* (:* (:* D3 D4) D4) D1
type HD70 = :* (:* (:* D3 D4) D4) D0
type D3440 = :* (:* (:* D3 D4) D4) D0
type O6560 = :* (:* (:* D3 D4) D4) D0
type HD6F = :* (:* (:* D3 D4) D3) D9
type D3439 = :* (:* (:* D3 D4) D3) D9
type O6557 = :* (:* (:* D3 D4) D3) D9
type HD6E = :* (:* (:* D3 D4) D3) D8
type D3438 = :* (:* (:* D3 D4) D3) D8
type O6556 = :* (:* (:* D3 D4) D3) D8
type HD6D = :* (:* (:* D3 D4) D3) D7
type D3437 = :* (:* (:* D3 D4) D3) D7
type O6555 = :* (:* (:* D3 D4) D3) D7
type HD6C = :* (:* (:* D3 D4) D3) D6
type D3436 = :* (:* (:* D3 D4) D3) D6
type O6554 = :* (:* (:* D3 D4) D3) D6
type HD6B = :* (:* (:* D3 D4) D3) D5
type D3435 = :* (:* (:* D3 D4) D3) D5
type O6553 = :* (:* (:* D3 D4) D3) D5
type HD6A = :* (:* (:* D3 D4) D3) D4
type D3434 = :* (:* (:* D3 D4) D3) D4
type O6552 = :* (:* (:* D3 D4) D3) D4
type HD69 = :* (:* (:* D3 D4) D3) D3
type D3433 = :* (:* (:* D3 D4) D3) D3
type O6551 = :* (:* (:* D3 D4) D3) D3
type HD68 = :* (:* (:* D3 D4) D3) D2
type D3432 = :* (:* (:* D3 D4) D3) D2
type O6550 = :* (:* (:* D3 D4) D3) D2
type HD67 = :* (:* (:* D3 D4) D3) D1
type D3431 = :* (:* (:* D3 D4) D3) D1
type O6547 = :* (:* (:* D3 D4) D3) D1
type HD66 = :* (:* (:* D3 D4) D3) D0
type D3430 = :* (:* (:* D3 D4) D3) D0
type O6546 = :* (:* (:* D3 D4) D3) D0
type HD65 = :* (:* (:* D3 D4) D2) D9
type D3429 = :* (:* (:* D3 D4) D2) D9
type O6545 = :* (:* (:* D3 D4) D2) D9
type HD64 = :* (:* (:* D3 D4) D2) D8
type D3428 = :* (:* (:* D3 D4) D2) D8
type O6544 = :* (:* (:* D3 D4) D2) D8
type HD63 = :* (:* (:* D3 D4) D2) D7
type D3427 = :* (:* (:* D3 D4) D2) D7
type O6543 = :* (:* (:* D3 D4) D2) D7
type HD62 = :* (:* (:* D3 D4) D2) D6
type D3426 = :* (:* (:* D3 D4) D2) D6
type O6542 = :* (:* (:* D3 D4) D2) D6
type HD61 = :* (:* (:* D3 D4) D2) D5
type D3425 = :* (:* (:* D3 D4) D2) D5
type O6541 = :* (:* (:* D3 D4) D2) D5
type HD60 = :* (:* (:* D3 D4) D2) D4
type D3424 = :* (:* (:* D3 D4) D2) D4
type O6540 = :* (:* (:* D3 D4) D2) D4
type HD5F = :* (:* (:* D3 D4) D2) D3
type D3423 = :* (:* (:* D3 D4) D2) D3
type O6537 = :* (:* (:* D3 D4) D2) D3
type HD5E = :* (:* (:* D3 D4) D2) D2
type D3422 = :* (:* (:* D3 D4) D2) D2
type O6536 = :* (:* (:* D3 D4) D2) D2
type HD5D = :* (:* (:* D3 D4) D2) D1
type D3421 = :* (:* (:* D3 D4) D2) D1
type O6535 = :* (:* (:* D3 D4) D2) D1
type HD5C = :* (:* (:* D3 D4) D2) D0
type D3420 = :* (:* (:* D3 D4) D2) D0
type O6534 = :* (:* (:* D3 D4) D2) D0
type HD5B = :* (:* (:* D3 D4) D1) D9
type D3419 = :* (:* (:* D3 D4) D1) D9
type O6533 = :* (:* (:* D3 D4) D1) D9
type HD5A = :* (:* (:* D3 D4) D1) D8
type D3418 = :* (:* (:* D3 D4) D1) D8
type O6532 = :* (:* (:* D3 D4) D1) D8
type HD59 = :* (:* (:* D3 D4) D1) D7
type D3417 = :* (:* (:* D3 D4) D1) D7
type O6531 = :* (:* (:* D3 D4) D1) D7
type HD58 = :* (:* (:* D3 D4) D1) D6
type D3416 = :* (:* (:* D3 D4) D1) D6
type O6530 = :* (:* (:* D3 D4) D1) D6
type HD57 = :* (:* (:* D3 D4) D1) D5
type D3415 = :* (:* (:* D3 D4) D1) D5
type O6527 = :* (:* (:* D3 D4) D1) D5
type HD56 = :* (:* (:* D3 D4) D1) D4
type D3414 = :* (:* (:* D3 D4) D1) D4
type O6526 = :* (:* (:* D3 D4) D1) D4
type HD55 = :* (:* (:* D3 D4) D1) D3
type D3413 = :* (:* (:* D3 D4) D1) D3
type O6525 = :* (:* (:* D3 D4) D1) D3
type HD54 = :* (:* (:* D3 D4) D1) D2
type D3412 = :* (:* (:* D3 D4) D1) D2
type O6524 = :* (:* (:* D3 D4) D1) D2
type HD53 = :* (:* (:* D3 D4) D1) D1
type D3411 = :* (:* (:* D3 D4) D1) D1
type O6523 = :* (:* (:* D3 D4) D1) D1
type HD52 = :* (:* (:* D3 D4) D1) D0
type D3410 = :* (:* (:* D3 D4) D1) D0
type O6522 = :* (:* (:* D3 D4) D1) D0
type HD51 = :* (:* (:* D3 D4) D0) D9
type D3409 = :* (:* (:* D3 D4) D0) D9
type O6521 = :* (:* (:* D3 D4) D0) D9
type HD50 = :* (:* (:* D3 D4) D0) D8
type D3408 = :* (:* (:* D3 D4) D0) D8
type O6520 = :* (:* (:* D3 D4) D0) D8
type HD4F = :* (:* (:* D3 D4) D0) D7
type D3407 = :* (:* (:* D3 D4) D0) D7
type O6517 = :* (:* (:* D3 D4) D0) D7
type HD4E = :* (:* (:* D3 D4) D0) D6
type D3406 = :* (:* (:* D3 D4) D0) D6
type O6516 = :* (:* (:* D3 D4) D0) D6
type HD4D = :* (:* (:* D3 D4) D0) D5
type D3405 = :* (:* (:* D3 D4) D0) D5
type O6515 = :* (:* (:* D3 D4) D0) D5
type HD4C = :* (:* (:* D3 D4) D0) D4
type D3404 = :* (:* (:* D3 D4) D0) D4
type O6514 = :* (:* (:* D3 D4) D0) D4
type HD4B = :* (:* (:* D3 D4) D0) D3
type D3403 = :* (:* (:* D3 D4) D0) D3
type O6513 = :* (:* (:* D3 D4) D0) D3
type HD4A = :* (:* (:* D3 D4) D0) D2
type D3402 = :* (:* (:* D3 D4) D0) D2
type O6512 = :* (:* (:* D3 D4) D0) D2
type HD49 = :* (:* (:* D3 D4) D0) D1
type D3401 = :* (:* (:* D3 D4) D0) D1
type O6511 = :* (:* (:* D3 D4) D0) D1
type HD48 = :* (:* (:* D3 D4) D0) D0
type D3400 = :* (:* (:* D3 D4) D0) D0
type O6510 = :* (:* (:* D3 D4) D0) D0
type HD47 = :* (:* (:* D3 D3) D9) D9
type D3399 = :* (:* (:* D3 D3) D9) D9
type O6507 = :* (:* (:* D3 D3) D9) D9
type HD46 = :* (:* (:* D3 D3) D9) D8
type D3398 = :* (:* (:* D3 D3) D9) D8
type O6506 = :* (:* (:* D3 D3) D9) D8
type HD45 = :* (:* (:* D3 D3) D9) D7
type D3397 = :* (:* (:* D3 D3) D9) D7
type O6505 = :* (:* (:* D3 D3) D9) D7
type HD44 = :* (:* (:* D3 D3) D9) D6
type D3396 = :* (:* (:* D3 D3) D9) D6
type O6504 = :* (:* (:* D3 D3) D9) D6
type HD43 = :* (:* (:* D3 D3) D9) D5
type D3395 = :* (:* (:* D3 D3) D9) D5
type O6503 = :* (:* (:* D3 D3) D9) D5
type HD42 = :* (:* (:* D3 D3) D9) D4
type D3394 = :* (:* (:* D3 D3) D9) D4
type O6502 = :* (:* (:* D3 D3) D9) D4
type HD41 = :* (:* (:* D3 D3) D9) D3
type D3393 = :* (:* (:* D3 D3) D9) D3
type O6501 = :* (:* (:* D3 D3) D9) D3
type HD40 = :* (:* (:* D3 D3) D9) D2
type D3392 = :* (:* (:* D3 D3) D9) D2
type O6500 = :* (:* (:* D3 D3) D9) D2
type HD3F = :* (:* (:* D3 D3) D9) D1
type D3391 = :* (:* (:* D3 D3) D9) D1
type O6477 = :* (:* (:* D3 D3) D9) D1
type HD3E = :* (:* (:* D3 D3) D9) D0
type D3390 = :* (:* (:* D3 D3) D9) D0
type O6476 = :* (:* (:* D3 D3) D9) D0
type HD3D = :* (:* (:* D3 D3) D8) D9
type D3389 = :* (:* (:* D3 D3) D8) D9
type O6475 = :* (:* (:* D3 D3) D8) D9
type HD3C = :* (:* (:* D3 D3) D8) D8
type D3388 = :* (:* (:* D3 D3) D8) D8
type O6474 = :* (:* (:* D3 D3) D8) D8
type HD3B = :* (:* (:* D3 D3) D8) D7
type D3387 = :* (:* (:* D3 D3) D8) D7
type O6473 = :* (:* (:* D3 D3) D8) D7
type HD3A = :* (:* (:* D3 D3) D8) D6
type D3386 = :* (:* (:* D3 D3) D8) D6
type O6472 = :* (:* (:* D3 D3) D8) D6
type HD39 = :* (:* (:* D3 D3) D8) D5
type D3385 = :* (:* (:* D3 D3) D8) D5
type O6471 = :* (:* (:* D3 D3) D8) D5
type HD38 = :* (:* (:* D3 D3) D8) D4
type D3384 = :* (:* (:* D3 D3) D8) D4
type O6470 = :* (:* (:* D3 D3) D8) D4
type HD37 = :* (:* (:* D3 D3) D8) D3
type D3383 = :* (:* (:* D3 D3) D8) D3
type O6467 = :* (:* (:* D3 D3) D8) D3
type HD36 = :* (:* (:* D3 D3) D8) D2
type D3382 = :* (:* (:* D3 D3) D8) D2
type O6466 = :* (:* (:* D3 D3) D8) D2
type HD35 = :* (:* (:* D3 D3) D8) D1
type D3381 = :* (:* (:* D3 D3) D8) D1
type O6465 = :* (:* (:* D3 D3) D8) D1
type HD34 = :* (:* (:* D3 D3) D8) D0
type D3380 = :* (:* (:* D3 D3) D8) D0
type O6464 = :* (:* (:* D3 D3) D8) D0
type HD33 = :* (:* (:* D3 D3) D7) D9
type D3379 = :* (:* (:* D3 D3) D7) D9
type O6463 = :* (:* (:* D3 D3) D7) D9
type HD32 = :* (:* (:* D3 D3) D7) D8
type D3378 = :* (:* (:* D3 D3) D7) D8
type O6462 = :* (:* (:* D3 D3) D7) D8
type HD31 = :* (:* (:* D3 D3) D7) D7
type D3377 = :* (:* (:* D3 D3) D7) D7
type O6461 = :* (:* (:* D3 D3) D7) D7
type HD30 = :* (:* (:* D3 D3) D7) D6
type D3376 = :* (:* (:* D3 D3) D7) D6
type O6460 = :* (:* (:* D3 D3) D7) D6
type HD2F = :* (:* (:* D3 D3) D7) D5
type D3375 = :* (:* (:* D3 D3) D7) D5
type O6457 = :* (:* (:* D3 D3) D7) D5
type HD2E = :* (:* (:* D3 D3) D7) D4
type D3374 = :* (:* (:* D3 D3) D7) D4
type O6456 = :* (:* (:* D3 D3) D7) D4
type HD2D = :* (:* (:* D3 D3) D7) D3
type D3373 = :* (:* (:* D3 D3) D7) D3
type O6455 = :* (:* (:* D3 D3) D7) D3
type HD2C = :* (:* (:* D3 D3) D7) D2
type D3372 = :* (:* (:* D3 D3) D7) D2
type O6454 = :* (:* (:* D3 D3) D7) D2
type HD2B = :* (:* (:* D3 D3) D7) D1
type D3371 = :* (:* (:* D3 D3) D7) D1
type O6453 = :* (:* (:* D3 D3) D7) D1
type HD2A = :* (:* (:* D3 D3) D7) D0
type D3370 = :* (:* (:* D3 D3) D7) D0
type O6452 = :* (:* (:* D3 D3) D7) D0
type HD29 = :* (:* (:* D3 D3) D6) D9
type D3369 = :* (:* (:* D3 D3) D6) D9
type O6451 = :* (:* (:* D3 D3) D6) D9
type HD28 = :* (:* (:* D3 D3) D6) D8
type D3368 = :* (:* (:* D3 D3) D6) D8
type O6450 = :* (:* (:* D3 D3) D6) D8
type HD27 = :* (:* (:* D3 D3) D6) D7
type D3367 = :* (:* (:* D3 D3) D6) D7
type O6447 = :* (:* (:* D3 D3) D6) D7
type HD26 = :* (:* (:* D3 D3) D6) D6
type D3366 = :* (:* (:* D3 D3) D6) D6
type O6446 = :* (:* (:* D3 D3) D6) D6
type HD25 = :* (:* (:* D3 D3) D6) D5
type D3365 = :* (:* (:* D3 D3) D6) D5
type O6445 = :* (:* (:* D3 D3) D6) D5
type HD24 = :* (:* (:* D3 D3) D6) D4
type D3364 = :* (:* (:* D3 D3) D6) D4
type O6444 = :* (:* (:* D3 D3) D6) D4
type HD23 = :* (:* (:* D3 D3) D6) D3
type D3363 = :* (:* (:* D3 D3) D6) D3
type O6443 = :* (:* (:* D3 D3) D6) D3
type HD22 = :* (:* (:* D3 D3) D6) D2
type D3362 = :* (:* (:* D3 D3) D6) D2
type O6442 = :* (:* (:* D3 D3) D6) D2
type HD21 = :* (:* (:* D3 D3) D6) D1
type D3361 = :* (:* (:* D3 D3) D6) D1
type O6441 = :* (:* (:* D3 D3) D6) D1
type HD20 = :* (:* (:* D3 D3) D6) D0
type D3360 = :* (:* (:* D3 D3) D6) D0
type O6440 = :* (:* (:* D3 D3) D6) D0
type HD1F = :* (:* (:* D3 D3) D5) D9
type D3359 = :* (:* (:* D3 D3) D5) D9
type O6437 = :* (:* (:* D3 D3) D5) D9
type HD1E = :* (:* (:* D3 D3) D5) D8
type D3358 = :* (:* (:* D3 D3) D5) D8
type O6436 = :* (:* (:* D3 D3) D5) D8
type HD1D = :* (:* (:* D3 D3) D5) D7
type D3357 = :* (:* (:* D3 D3) D5) D7
type O6435 = :* (:* (:* D3 D3) D5) D7
type HD1C = :* (:* (:* D3 D3) D5) D6
type D3356 = :* (:* (:* D3 D3) D5) D6
type O6434 = :* (:* (:* D3 D3) D5) D6
type HD1B = :* (:* (:* D3 D3) D5) D5
type D3355 = :* (:* (:* D3 D3) D5) D5
type O6433 = :* (:* (:* D3 D3) D5) D5
type HD1A = :* (:* (:* D3 D3) D5) D4
type D3354 = :* (:* (:* D3 D3) D5) D4
type O6432 = :* (:* (:* D3 D3) D5) D4
type HD19 = :* (:* (:* D3 D3) D5) D3
type D3353 = :* (:* (:* D3 D3) D5) D3
type O6431 = :* (:* (:* D3 D3) D5) D3
type HD18 = :* (:* (:* D3 D3) D5) D2
type D3352 = :* (:* (:* D3 D3) D5) D2
type O6430 = :* (:* (:* D3 D3) D5) D2
type HD17 = :* (:* (:* D3 D3) D5) D1
type D3351 = :* (:* (:* D3 D3) D5) D1
type O6427 = :* (:* (:* D3 D3) D5) D1
type HD16 = :* (:* (:* D3 D3) D5) D0
type D3350 = :* (:* (:* D3 D3) D5) D0
type O6426 = :* (:* (:* D3 D3) D5) D0
type HD15 = :* (:* (:* D3 D3) D4) D9
type D3349 = :* (:* (:* D3 D3) D4) D9
type O6425 = :* (:* (:* D3 D3) D4) D9
type HD14 = :* (:* (:* D3 D3) D4) D8
type D3348 = :* (:* (:* D3 D3) D4) D8
type O6424 = :* (:* (:* D3 D3) D4) D8
type HD13 = :* (:* (:* D3 D3) D4) D7
type D3347 = :* (:* (:* D3 D3) D4) D7
type O6423 = :* (:* (:* D3 D3) D4) D7
type HD12 = :* (:* (:* D3 D3) D4) D6
type D3346 = :* (:* (:* D3 D3) D4) D6
type O6422 = :* (:* (:* D3 D3) D4) D6
type HD11 = :* (:* (:* D3 D3) D4) D5
type D3345 = :* (:* (:* D3 D3) D4) D5
type O6421 = :* (:* (:* D3 D3) D4) D5
type HD10 = :* (:* (:* D3 D3) D4) D4
type D3344 = :* (:* (:* D3 D3) D4) D4
type O6420 = :* (:* (:* D3 D3) D4) D4
type HD0F = :* (:* (:* D3 D3) D4) D3
type D3343 = :* (:* (:* D3 D3) D4) D3
type O6417 = :* (:* (:* D3 D3) D4) D3
type HD0E = :* (:* (:* D3 D3) D4) D2
type D3342 = :* (:* (:* D3 D3) D4) D2
type O6416 = :* (:* (:* D3 D3) D4) D2
type HD0D = :* (:* (:* D3 D3) D4) D1
type D3341 = :* (:* (:* D3 D3) D4) D1
type O6415 = :* (:* (:* D3 D3) D4) D1
type HD0C = :* (:* (:* D3 D3) D4) D0
type D3340 = :* (:* (:* D3 D3) D4) D0
type O6414 = :* (:* (:* D3 D3) D4) D0
type HD0B = :* (:* (:* D3 D3) D3) D9
type D3339 = :* (:* (:* D3 D3) D3) D9
type O6413 = :* (:* (:* D3 D3) D3) D9
type HD0A = :* (:* (:* D3 D3) D3) D8
type D3338 = :* (:* (:* D3 D3) D3) D8
type O6412 = :* (:* (:* D3 D3) D3) D8
type HD09 = :* (:* (:* D3 D3) D3) D7
type D3337 = :* (:* (:* D3 D3) D3) D7
type O6411 = :* (:* (:* D3 D3) D3) D7
type HD08 = :* (:* (:* D3 D3) D3) D6
type D3336 = :* (:* (:* D3 D3) D3) D6
type O6410 = :* (:* (:* D3 D3) D3) D6
type HD07 = :* (:* (:* D3 D3) D3) D5
type D3335 = :* (:* (:* D3 D3) D3) D5
type O6407 = :* (:* (:* D3 D3) D3) D5
type HD06 = :* (:* (:* D3 D3) D3) D4
type D3334 = :* (:* (:* D3 D3) D3) D4
type O6406 = :* (:* (:* D3 D3) D3) D4
type HD05 = :* (:* (:* D3 D3) D3) D3
type D3333 = :* (:* (:* D3 D3) D3) D3
type O6405 = :* (:* (:* D3 D3) D3) D3
type HD04 = :* (:* (:* D3 D3) D3) D2
type D3332 = :* (:* (:* D3 D3) D3) D2
type O6404 = :* (:* (:* D3 D3) D3) D2
type HD03 = :* (:* (:* D3 D3) D3) D1
type D3331 = :* (:* (:* D3 D3) D3) D1
type O6403 = :* (:* (:* D3 D3) D3) D1
type HD02 = :* (:* (:* D3 D3) D3) D0
type D3330 = :* (:* (:* D3 D3) D3) D0
type O6402 = :* (:* (:* D3 D3) D3) D0
type HD01 = :* (:* (:* D3 D3) D2) D9
type D3329 = :* (:* (:* D3 D3) D2) D9
type O6401 = :* (:* (:* D3 D3) D2) D9
type HD00 = :* (:* (:* D3 D3) D2) D8
type D3328 = :* (:* (:* D3 D3) D2) D8
type O6400 = :* (:* (:* D3 D3) D2) D8
type HCFF = :* (:* (:* D3 D3) D2) D7
type D3327 = :* (:* (:* D3 D3) D2) D7
type O6377 = :* (:* (:* D3 D3) D2) D7
type HCFE = :* (:* (:* D3 D3) D2) D6
type D3326 = :* (:* (:* D3 D3) D2) D6
type O6376 = :* (:* (:* D3 D3) D2) D6
type HCFD = :* (:* (:* D3 D3) D2) D5
type D3325 = :* (:* (:* D3 D3) D2) D5
type O6375 = :* (:* (:* D3 D3) D2) D5
type HCFC = :* (:* (:* D3 D3) D2) D4
type D3324 = :* (:* (:* D3 D3) D2) D4
type O6374 = :* (:* (:* D3 D3) D2) D4
type HCFB = :* (:* (:* D3 D3) D2) D3
type D3323 = :* (:* (:* D3 D3) D2) D3
type O6373 = :* (:* (:* D3 D3) D2) D3
type HCFA = :* (:* (:* D3 D3) D2) D2
type D3322 = :* (:* (:* D3 D3) D2) D2
type O6372 = :* (:* (:* D3 D3) D2) D2
type HCF9 = :* (:* (:* D3 D3) D2) D1
type D3321 = :* (:* (:* D3 D3) D2) D1
type O6371 = :* (:* (:* D3 D3) D2) D1
type HCF8 = :* (:* (:* D3 D3) D2) D0
type D3320 = :* (:* (:* D3 D3) D2) D0
type O6370 = :* (:* (:* D3 D3) D2) D0
type HCF7 = :* (:* (:* D3 D3) D1) D9
type D3319 = :* (:* (:* D3 D3) D1) D9
type O6367 = :* (:* (:* D3 D3) D1) D9
type HCF6 = :* (:* (:* D3 D3) D1) D8
type D3318 = :* (:* (:* D3 D3) D1) D8
type O6366 = :* (:* (:* D3 D3) D1) D8
type HCF5 = :* (:* (:* D3 D3) D1) D7
type D3317 = :* (:* (:* D3 D3) D1) D7
type O6365 = :* (:* (:* D3 D3) D1) D7
type HCF4 = :* (:* (:* D3 D3) D1) D6
type D3316 = :* (:* (:* D3 D3) D1) D6
type O6364 = :* (:* (:* D3 D3) D1) D6
type HCF3 = :* (:* (:* D3 D3) D1) D5
type D3315 = :* (:* (:* D3 D3) D1) D5
type O6363 = :* (:* (:* D3 D3) D1) D5
type HCF2 = :* (:* (:* D3 D3) D1) D4
type D3314 = :* (:* (:* D3 D3) D1) D4
type O6362 = :* (:* (:* D3 D3) D1) D4
type HCF1 = :* (:* (:* D3 D3) D1) D3
type D3313 = :* (:* (:* D3 D3) D1) D3
type O6361 = :* (:* (:* D3 D3) D1) D3
type HCF0 = :* (:* (:* D3 D3) D1) D2
type D3312 = :* (:* (:* D3 D3) D1) D2
type O6360 = :* (:* (:* D3 D3) D1) D2
type HCEF = :* (:* (:* D3 D3) D1) D1
type D3311 = :* (:* (:* D3 D3) D1) D1
type O6357 = :* (:* (:* D3 D3) D1) D1
type HCEE = :* (:* (:* D3 D3) D1) D0
type D3310 = :* (:* (:* D3 D3) D1) D0
type O6356 = :* (:* (:* D3 D3) D1) D0
type HCED = :* (:* (:* D3 D3) D0) D9
type D3309 = :* (:* (:* D3 D3) D0) D9
type O6355 = :* (:* (:* D3 D3) D0) D9
type HCEC = :* (:* (:* D3 D3) D0) D8
type D3308 = :* (:* (:* D3 D3) D0) D8
type O6354 = :* (:* (:* D3 D3) D0) D8
type HCEB = :* (:* (:* D3 D3) D0) D7
type D3307 = :* (:* (:* D3 D3) D0) D7
type O6353 = :* (:* (:* D3 D3) D0) D7
type HCEA = :* (:* (:* D3 D3) D0) D6
type D3306 = :* (:* (:* D3 D3) D0) D6
type O6352 = :* (:* (:* D3 D3) D0) D6
type HCE9 = :* (:* (:* D3 D3) D0) D5
type D3305 = :* (:* (:* D3 D3) D0) D5
type O6351 = :* (:* (:* D3 D3) D0) D5
type HCE8 = :* (:* (:* D3 D3) D0) D4
type D3304 = :* (:* (:* D3 D3) D0) D4
type O6350 = :* (:* (:* D3 D3) D0) D4
type HCE7 = :* (:* (:* D3 D3) D0) D3
type D3303 = :* (:* (:* D3 D3) D0) D3
type O6347 = :* (:* (:* D3 D3) D0) D3
type HCE6 = :* (:* (:* D3 D3) D0) D2
type D3302 = :* (:* (:* D3 D3) D0) D2
type O6346 = :* (:* (:* D3 D3) D0) D2
type HCE5 = :* (:* (:* D3 D3) D0) D1
type D3301 = :* (:* (:* D3 D3) D0) D1
type O6345 = :* (:* (:* D3 D3) D0) D1
type HCE4 = :* (:* (:* D3 D3) D0) D0
type D3300 = :* (:* (:* D3 D3) D0) D0
type O6344 = :* (:* (:* D3 D3) D0) D0
type HCE3 = :* (:* (:* D3 D2) D9) D9
type D3299 = :* (:* (:* D3 D2) D9) D9
type O6343 = :* (:* (:* D3 D2) D9) D9
type HCE2 = :* (:* (:* D3 D2) D9) D8
type D3298 = :* (:* (:* D3 D2) D9) D8
type O6342 = :* (:* (:* D3 D2) D9) D8
type HCE1 = :* (:* (:* D3 D2) D9) D7
type D3297 = :* (:* (:* D3 D2) D9) D7
type O6341 = :* (:* (:* D3 D2) D9) D7
type HCE0 = :* (:* (:* D3 D2) D9) D6
type D3296 = :* (:* (:* D3 D2) D9) D6
type O6340 = :* (:* (:* D3 D2) D9) D6
type HCDF = :* (:* (:* D3 D2) D9) D5
type D3295 = :* (:* (:* D3 D2) D9) D5
type O6337 = :* (:* (:* D3 D2) D9) D5
type HCDE = :* (:* (:* D3 D2) D9) D4
type D3294 = :* (:* (:* D3 D2) D9) D4
type O6336 = :* (:* (:* D3 D2) D9) D4
type HCDD = :* (:* (:* D3 D2) D9) D3
type D3293 = :* (:* (:* D3 D2) D9) D3
type O6335 = :* (:* (:* D3 D2) D9) D3
type HCDC = :* (:* (:* D3 D2) D9) D2
type D3292 = :* (:* (:* D3 D2) D9) D2
type O6334 = :* (:* (:* D3 D2) D9) D2
type HCDB = :* (:* (:* D3 D2) D9) D1
type D3291 = :* (:* (:* D3 D2) D9) D1
type O6333 = :* (:* (:* D3 D2) D9) D1
type HCDA = :* (:* (:* D3 D2) D9) D0
type D3290 = :* (:* (:* D3 D2) D9) D0
type O6332 = :* (:* (:* D3 D2) D9) D0
type HCD9 = :* (:* (:* D3 D2) D8) D9
type D3289 = :* (:* (:* D3 D2) D8) D9
type O6331 = :* (:* (:* D3 D2) D8) D9
type HCD8 = :* (:* (:* D3 D2) D8) D8
type D3288 = :* (:* (:* D3 D2) D8) D8
type O6330 = :* (:* (:* D3 D2) D8) D8
type HCD7 = :* (:* (:* D3 D2) D8) D7
type D3287 = :* (:* (:* D3 D2) D8) D7
type O6327 = :* (:* (:* D3 D2) D8) D7
type HCD6 = :* (:* (:* D3 D2) D8) D6
type D3286 = :* (:* (:* D3 D2) D8) D6
type O6326 = :* (:* (:* D3 D2) D8) D6
type HCD5 = :* (:* (:* D3 D2) D8) D5
type D3285 = :* (:* (:* D3 D2) D8) D5
type O6325 = :* (:* (:* D3 D2) D8) D5
type HCD4 = :* (:* (:* D3 D2) D8) D4
type D3284 = :* (:* (:* D3 D2) D8) D4
type O6324 = :* (:* (:* D3 D2) D8) D4
type HCD3 = :* (:* (:* D3 D2) D8) D3
type D3283 = :* (:* (:* D3 D2) D8) D3
type O6323 = :* (:* (:* D3 D2) D8) D3
type HCD2 = :* (:* (:* D3 D2) D8) D2
type D3282 = :* (:* (:* D3 D2) D8) D2
type O6322 = :* (:* (:* D3 D2) D8) D2
type HCD1 = :* (:* (:* D3 D2) D8) D1
type D3281 = :* (:* (:* D3 D2) D8) D1
type O6321 = :* (:* (:* D3 D2) D8) D1
type HCD0 = :* (:* (:* D3 D2) D8) D0
type D3280 = :* (:* (:* D3 D2) D8) D0
type O6320 = :* (:* (:* D3 D2) D8) D0
type HCCF = :* (:* (:* D3 D2) D7) D9
type D3279 = :* (:* (:* D3 D2) D7) D9
type O6317 = :* (:* (:* D3 D2) D7) D9
type HCCE = :* (:* (:* D3 D2) D7) D8
type D3278 = :* (:* (:* D3 D2) D7) D8
type O6316 = :* (:* (:* D3 D2) D7) D8
type HCCD = :* (:* (:* D3 D2) D7) D7
type D3277 = :* (:* (:* D3 D2) D7) D7
type O6315 = :* (:* (:* D3 D2) D7) D7
type HCCC = :* (:* (:* D3 D2) D7) D6
type D3276 = :* (:* (:* D3 D2) D7) D6
type O6314 = :* (:* (:* D3 D2) D7) D6
type HCCB = :* (:* (:* D3 D2) D7) D5
type D3275 = :* (:* (:* D3 D2) D7) D5
type O6313 = :* (:* (:* D3 D2) D7) D5
type HCCA = :* (:* (:* D3 D2) D7) D4
type D3274 = :* (:* (:* D3 D2) D7) D4
type O6312 = :* (:* (:* D3 D2) D7) D4
type HCC9 = :* (:* (:* D3 D2) D7) D3
type D3273 = :* (:* (:* D3 D2) D7) D3
type O6311 = :* (:* (:* D3 D2) D7) D3
type HCC8 = :* (:* (:* D3 D2) D7) D2
type D3272 = :* (:* (:* D3 D2) D7) D2
type O6310 = :* (:* (:* D3 D2) D7) D2
type HCC7 = :* (:* (:* D3 D2) D7) D1
type D3271 = :* (:* (:* D3 D2) D7) D1
type O6307 = :* (:* (:* D3 D2) D7) D1
type HCC6 = :* (:* (:* D3 D2) D7) D0
type D3270 = :* (:* (:* D3 D2) D7) D0
type O6306 = :* (:* (:* D3 D2) D7) D0
type HCC5 = :* (:* (:* D3 D2) D6) D9
type D3269 = :* (:* (:* D3 D2) D6) D9
type O6305 = :* (:* (:* D3 D2) D6) D9
type HCC4 = :* (:* (:* D3 D2) D6) D8
type D3268 = :* (:* (:* D3 D2) D6) D8
type O6304 = :* (:* (:* D3 D2) D6) D8
type HCC3 = :* (:* (:* D3 D2) D6) D7
type D3267 = :* (:* (:* D3 D2) D6) D7
type O6303 = :* (:* (:* D3 D2) D6) D7
type HCC2 = :* (:* (:* D3 D2) D6) D6
type D3266 = :* (:* (:* D3 D2) D6) D6
type O6302 = :* (:* (:* D3 D2) D6) D6
type HCC1 = :* (:* (:* D3 D2) D6) D5
type D3265 = :* (:* (:* D3 D2) D6) D5
type O6301 = :* (:* (:* D3 D2) D6) D5
type HCC0 = :* (:* (:* D3 D2) D6) D4
type D3264 = :* (:* (:* D3 D2) D6) D4
type O6300 = :* (:* (:* D3 D2) D6) D4
type HCBF = :* (:* (:* D3 D2) D6) D3
type D3263 = :* (:* (:* D3 D2) D6) D3
type O6277 = :* (:* (:* D3 D2) D6) D3
type HCBE = :* (:* (:* D3 D2) D6) D2
type D3262 = :* (:* (:* D3 D2) D6) D2
type O6276 = :* (:* (:* D3 D2) D6) D2
type HCBD = :* (:* (:* D3 D2) D6) D1
type D3261 = :* (:* (:* D3 D2) D6) D1
type O6275 = :* (:* (:* D3 D2) D6) D1
type HCBC = :* (:* (:* D3 D2) D6) D0
type D3260 = :* (:* (:* D3 D2) D6) D0
type O6274 = :* (:* (:* D3 D2) D6) D0
type HCBB = :* (:* (:* D3 D2) D5) D9
type D3259 = :* (:* (:* D3 D2) D5) D9
type O6273 = :* (:* (:* D3 D2) D5) D9
type HCBA = :* (:* (:* D3 D2) D5) D8
type D3258 = :* (:* (:* D3 D2) D5) D8
type O6272 = :* (:* (:* D3 D2) D5) D8
type HCB9 = :* (:* (:* D3 D2) D5) D7
type D3257 = :* (:* (:* D3 D2) D5) D7
type O6271 = :* (:* (:* D3 D2) D5) D7
type HCB8 = :* (:* (:* D3 D2) D5) D6
type D3256 = :* (:* (:* D3 D2) D5) D6
type O6270 = :* (:* (:* D3 D2) D5) D6
type HCB7 = :* (:* (:* D3 D2) D5) D5
type D3255 = :* (:* (:* D3 D2) D5) D5
type O6267 = :* (:* (:* D3 D2) D5) D5
type HCB6 = :* (:* (:* D3 D2) D5) D4
type D3254 = :* (:* (:* D3 D2) D5) D4
type O6266 = :* (:* (:* D3 D2) D5) D4
type HCB5 = :* (:* (:* D3 D2) D5) D3
type D3253 = :* (:* (:* D3 D2) D5) D3
type O6265 = :* (:* (:* D3 D2) D5) D3
type HCB4 = :* (:* (:* D3 D2) D5) D2
type D3252 = :* (:* (:* D3 D2) D5) D2
type O6264 = :* (:* (:* D3 D2) D5) D2
type HCB3 = :* (:* (:* D3 D2) D5) D1
type D3251 = :* (:* (:* D3 D2) D5) D1
type O6263 = :* (:* (:* D3 D2) D5) D1
type HCB2 = :* (:* (:* D3 D2) D5) D0
type D3250 = :* (:* (:* D3 D2) D5) D0
type O6262 = :* (:* (:* D3 D2) D5) D0
type HCB1 = :* (:* (:* D3 D2) D4) D9
type D3249 = :* (:* (:* D3 D2) D4) D9
type O6261 = :* (:* (:* D3 D2) D4) D9
type HCB0 = :* (:* (:* D3 D2) D4) D8
type D3248 = :* (:* (:* D3 D2) D4) D8
type O6260 = :* (:* (:* D3 D2) D4) D8
type HCAF = :* (:* (:* D3 D2) D4) D7
type D3247 = :* (:* (:* D3 D2) D4) D7
type O6257 = :* (:* (:* D3 D2) D4) D7
type HCAE = :* (:* (:* D3 D2) D4) D6
type D3246 = :* (:* (:* D3 D2) D4) D6
type O6256 = :* (:* (:* D3 D2) D4) D6
type HCAD = :* (:* (:* D3 D2) D4) D5
type D3245 = :* (:* (:* D3 D2) D4) D5
type O6255 = :* (:* (:* D3 D2) D4) D5
type HCAC = :* (:* (:* D3 D2) D4) D4
type D3244 = :* (:* (:* D3 D2) D4) D4
type O6254 = :* (:* (:* D3 D2) D4) D4
type HCAB = :* (:* (:* D3 D2) D4) D3
type D3243 = :* (:* (:* D3 D2) D4) D3
type O6253 = :* (:* (:* D3 D2) D4) D3
type HCAA = :* (:* (:* D3 D2) D4) D2
type D3242 = :* (:* (:* D3 D2) D4) D2
type O6252 = :* (:* (:* D3 D2) D4) D2
type HCA9 = :* (:* (:* D3 D2) D4) D1
type D3241 = :* (:* (:* D3 D2) D4) D1
type O6251 = :* (:* (:* D3 D2) D4) D1
type HCA8 = :* (:* (:* D3 D2) D4) D0
type D3240 = :* (:* (:* D3 D2) D4) D0
type O6250 = :* (:* (:* D3 D2) D4) D0
type HCA7 = :* (:* (:* D3 D2) D3) D9
type D3239 = :* (:* (:* D3 D2) D3) D9
type O6247 = :* (:* (:* D3 D2) D3) D9
type HCA6 = :* (:* (:* D3 D2) D3) D8
type D3238 = :* (:* (:* D3 D2) D3) D8
type O6246 = :* (:* (:* D3 D2) D3) D8
type HCA5 = :* (:* (:* D3 D2) D3) D7
type D3237 = :* (:* (:* D3 D2) D3) D7
type O6245 = :* (:* (:* D3 D2) D3) D7
type HCA4 = :* (:* (:* D3 D2) D3) D6
type D3236 = :* (:* (:* D3 D2) D3) D6
type O6244 = :* (:* (:* D3 D2) D3) D6
type HCA3 = :* (:* (:* D3 D2) D3) D5
type D3235 = :* (:* (:* D3 D2) D3) D5
type O6243 = :* (:* (:* D3 D2) D3) D5
type HCA2 = :* (:* (:* D3 D2) D3) D4
type D3234 = :* (:* (:* D3 D2) D3) D4
type O6242 = :* (:* (:* D3 D2) D3) D4
type HCA1 = :* (:* (:* D3 D2) D3) D3
type D3233 = :* (:* (:* D3 D2) D3) D3
type O6241 = :* (:* (:* D3 D2) D3) D3
type HCA0 = :* (:* (:* D3 D2) D3) D2
type D3232 = :* (:* (:* D3 D2) D3) D2
type O6240 = :* (:* (:* D3 D2) D3) D2
type HC9F = :* (:* (:* D3 D2) D3) D1
type D3231 = :* (:* (:* D3 D2) D3) D1
type O6237 = :* (:* (:* D3 D2) D3) D1
type HC9E = :* (:* (:* D3 D2) D3) D0
type D3230 = :* (:* (:* D3 D2) D3) D0
type O6236 = :* (:* (:* D3 D2) D3) D0
type HC9D = :* (:* (:* D3 D2) D2) D9
type D3229 = :* (:* (:* D3 D2) D2) D9
type O6235 = :* (:* (:* D3 D2) D2) D9
type HC9C = :* (:* (:* D3 D2) D2) D8
type D3228 = :* (:* (:* D3 D2) D2) D8
type O6234 = :* (:* (:* D3 D2) D2) D8
type HC9B = :* (:* (:* D3 D2) D2) D7
type D3227 = :* (:* (:* D3 D2) D2) D7
type O6233 = :* (:* (:* D3 D2) D2) D7
type HC9A = :* (:* (:* D3 D2) D2) D6
type D3226 = :* (:* (:* D3 D2) D2) D6
type O6232 = :* (:* (:* D3 D2) D2) D6
type HC99 = :* (:* (:* D3 D2) D2) D5
type D3225 = :* (:* (:* D3 D2) D2) D5
type O6231 = :* (:* (:* D3 D2) D2) D5
type HC98 = :* (:* (:* D3 D2) D2) D4
type D3224 = :* (:* (:* D3 D2) D2) D4
type O6230 = :* (:* (:* D3 D2) D2) D4
type HC97 = :* (:* (:* D3 D2) D2) D3
type D3223 = :* (:* (:* D3 D2) D2) D3
type O6227 = :* (:* (:* D3 D2) D2) D3
type HC96 = :* (:* (:* D3 D2) D2) D2
type D3222 = :* (:* (:* D3 D2) D2) D2
type O6226 = :* (:* (:* D3 D2) D2) D2
type HC95 = :* (:* (:* D3 D2) D2) D1
type D3221 = :* (:* (:* D3 D2) D2) D1
type O6225 = :* (:* (:* D3 D2) D2) D1
type HC94 = :* (:* (:* D3 D2) D2) D0
type D3220 = :* (:* (:* D3 D2) D2) D0
type O6224 = :* (:* (:* D3 D2) D2) D0
type HC93 = :* (:* (:* D3 D2) D1) D9
type D3219 = :* (:* (:* D3 D2) D1) D9
type O6223 = :* (:* (:* D3 D2) D1) D9
type HC92 = :* (:* (:* D3 D2) D1) D8
type D3218 = :* (:* (:* D3 D2) D1) D8
type O6222 = :* (:* (:* D3 D2) D1) D8
type HC91 = :* (:* (:* D3 D2) D1) D7
type D3217 = :* (:* (:* D3 D2) D1) D7
type O6221 = :* (:* (:* D3 D2) D1) D7
type HC90 = :* (:* (:* D3 D2) D1) D6
type D3216 = :* (:* (:* D3 D2) D1) D6
type O6220 = :* (:* (:* D3 D2) D1) D6
type HC8F = :* (:* (:* D3 D2) D1) D5
type D3215 = :* (:* (:* D3 D2) D1) D5
type O6217 = :* (:* (:* D3 D2) D1) D5
type HC8E = :* (:* (:* D3 D2) D1) D4
type D3214 = :* (:* (:* D3 D2) D1) D4
type O6216 = :* (:* (:* D3 D2) D1) D4
type HC8D = :* (:* (:* D3 D2) D1) D3
type D3213 = :* (:* (:* D3 D2) D1) D3
type O6215 = :* (:* (:* D3 D2) D1) D3
type HC8C = :* (:* (:* D3 D2) D1) D2
type D3212 = :* (:* (:* D3 D2) D1) D2
type O6214 = :* (:* (:* D3 D2) D1) D2
type HC8B = :* (:* (:* D3 D2) D1) D1
type D3211 = :* (:* (:* D3 D2) D1) D1
type O6213 = :* (:* (:* D3 D2) D1) D1
type HC8A = :* (:* (:* D3 D2) D1) D0
type D3210 = :* (:* (:* D3 D2) D1) D0
type O6212 = :* (:* (:* D3 D2) D1) D0
type HC89 = :* (:* (:* D3 D2) D0) D9
type D3209 = :* (:* (:* D3 D2) D0) D9
type O6211 = :* (:* (:* D3 D2) D0) D9
type HC88 = :* (:* (:* D3 D2) D0) D8
type D3208 = :* (:* (:* D3 D2) D0) D8
type O6210 = :* (:* (:* D3 D2) D0) D8
type HC87 = :* (:* (:* D3 D2) D0) D7
type D3207 = :* (:* (:* D3 D2) D0) D7
type O6207 = :* (:* (:* D3 D2) D0) D7
type HC86 = :* (:* (:* D3 D2) D0) D6
type D3206 = :* (:* (:* D3 D2) D0) D6
type O6206 = :* (:* (:* D3 D2) D0) D6
type HC85 = :* (:* (:* D3 D2) D0) D5
type D3205 = :* (:* (:* D3 D2) D0) D5
type O6205 = :* (:* (:* D3 D2) D0) D5
type HC84 = :* (:* (:* D3 D2) D0) D4
type D3204 = :* (:* (:* D3 D2) D0) D4
type O6204 = :* (:* (:* D3 D2) D0) D4
type HC83 = :* (:* (:* D3 D2) D0) D3
type D3203 = :* (:* (:* D3 D2) D0) D3
type O6203 = :* (:* (:* D3 D2) D0) D3
type HC82 = :* (:* (:* D3 D2) D0) D2
type D3202 = :* (:* (:* D3 D2) D0) D2
type O6202 = :* (:* (:* D3 D2) D0) D2
type HC81 = :* (:* (:* D3 D2) D0) D1
type D3201 = :* (:* (:* D3 D2) D0) D1
type O6201 = :* (:* (:* D3 D2) D0) D1
type HC80 = :* (:* (:* D3 D2) D0) D0
type D3200 = :* (:* (:* D3 D2) D0) D0
type O6200 = :* (:* (:* D3 D2) D0) D0
type HC7F = :* (:* (:* D3 D1) D9) D9
type D3199 = :* (:* (:* D3 D1) D9) D9
type O6177 = :* (:* (:* D3 D1) D9) D9
type HC7E = :* (:* (:* D3 D1) D9) D8
type D3198 = :* (:* (:* D3 D1) D9) D8
type O6176 = :* (:* (:* D3 D1) D9) D8
type HC7D = :* (:* (:* D3 D1) D9) D7
type D3197 = :* (:* (:* D3 D1) D9) D7
type O6175 = :* (:* (:* D3 D1) D9) D7
type HC7C = :* (:* (:* D3 D1) D9) D6
type D3196 = :* (:* (:* D3 D1) D9) D6
type O6174 = :* (:* (:* D3 D1) D9) D6
type HC7B = :* (:* (:* D3 D1) D9) D5
type D3195 = :* (:* (:* D3 D1) D9) D5
type O6173 = :* (:* (:* D3 D1) D9) D5
type HC7A = :* (:* (:* D3 D1) D9) D4
type D3194 = :* (:* (:* D3 D1) D9) D4
type O6172 = :* (:* (:* D3 D1) D9) D4
type HC79 = :* (:* (:* D3 D1) D9) D3
type D3193 = :* (:* (:* D3 D1) D9) D3
type O6171 = :* (:* (:* D3 D1) D9) D3
type HC78 = :* (:* (:* D3 D1) D9) D2
type D3192 = :* (:* (:* D3 D1) D9) D2
type O6170 = :* (:* (:* D3 D1) D9) D2
type HC77 = :* (:* (:* D3 D1) D9) D1
type D3191 = :* (:* (:* D3 D1) D9) D1
type O6167 = :* (:* (:* D3 D1) D9) D1
type HC76 = :* (:* (:* D3 D1) D9) D0
type D3190 = :* (:* (:* D3 D1) D9) D0
type O6166 = :* (:* (:* D3 D1) D9) D0
type HC75 = :* (:* (:* D3 D1) D8) D9
type D3189 = :* (:* (:* D3 D1) D8) D9
type O6165 = :* (:* (:* D3 D1) D8) D9
type HC74 = :* (:* (:* D3 D1) D8) D8
type D3188 = :* (:* (:* D3 D1) D8) D8
type O6164 = :* (:* (:* D3 D1) D8) D8
type HC73 = :* (:* (:* D3 D1) D8) D7
type D3187 = :* (:* (:* D3 D1) D8) D7
type O6163 = :* (:* (:* D3 D1) D8) D7
type HC72 = :* (:* (:* D3 D1) D8) D6
type D3186 = :* (:* (:* D3 D1) D8) D6
type O6162 = :* (:* (:* D3 D1) D8) D6
type HC71 = :* (:* (:* D3 D1) D8) D5
type D3185 = :* (:* (:* D3 D1) D8) D5
type O6161 = :* (:* (:* D3 D1) D8) D5
type HC70 = :* (:* (:* D3 D1) D8) D4
type D3184 = :* (:* (:* D3 D1) D8) D4
type O6160 = :* (:* (:* D3 D1) D8) D4
type HC6F = :* (:* (:* D3 D1) D8) D3
type D3183 = :* (:* (:* D3 D1) D8) D3
type O6157 = :* (:* (:* D3 D1) D8) D3
type HC6E = :* (:* (:* D3 D1) D8) D2
type D3182 = :* (:* (:* D3 D1) D8) D2
type O6156 = :* (:* (:* D3 D1) D8) D2
type HC6D = :* (:* (:* D3 D1) D8) D1
type D3181 = :* (:* (:* D3 D1) D8) D1
type O6155 = :* (:* (:* D3 D1) D8) D1
type HC6C = :* (:* (:* D3 D1) D8) D0
type D3180 = :* (:* (:* D3 D1) D8) D0
type O6154 = :* (:* (:* D3 D1) D8) D0
type HC6B = :* (:* (:* D3 D1) D7) D9
type D3179 = :* (:* (:* D3 D1) D7) D9
type O6153 = :* (:* (:* D3 D1) D7) D9
type HC6A = :* (:* (:* D3 D1) D7) D8
type D3178 = :* (:* (:* D3 D1) D7) D8
type O6152 = :* (:* (:* D3 D1) D7) D8
type HC69 = :* (:* (:* D3 D1) D7) D7
type D3177 = :* (:* (:* D3 D1) D7) D7
type O6151 = :* (:* (:* D3 D1) D7) D7
type HC68 = :* (:* (:* D3 D1) D7) D6
type D3176 = :* (:* (:* D3 D1) D7) D6
type O6150 = :* (:* (:* D3 D1) D7) D6
type HC67 = :* (:* (:* D3 D1) D7) D5
type D3175 = :* (:* (:* D3 D1) D7) D5
type O6147 = :* (:* (:* D3 D1) D7) D5
type HC66 = :* (:* (:* D3 D1) D7) D4
type D3174 = :* (:* (:* D3 D1) D7) D4
type O6146 = :* (:* (:* D3 D1) D7) D4
type HC65 = :* (:* (:* D3 D1) D7) D3
type D3173 = :* (:* (:* D3 D1) D7) D3
type O6145 = :* (:* (:* D3 D1) D7) D3
type HC64 = :* (:* (:* D3 D1) D7) D2
type D3172 = :* (:* (:* D3 D1) D7) D2
type O6144 = :* (:* (:* D3 D1) D7) D2
type HC63 = :* (:* (:* D3 D1) D7) D1
type D3171 = :* (:* (:* D3 D1) D7) D1
type O6143 = :* (:* (:* D3 D1) D7) D1
type HC62 = :* (:* (:* D3 D1) D7) D0
type D3170 = :* (:* (:* D3 D1) D7) D0
type O6142 = :* (:* (:* D3 D1) D7) D0
type HC61 = :* (:* (:* D3 D1) D6) D9
type D3169 = :* (:* (:* D3 D1) D6) D9
type O6141 = :* (:* (:* D3 D1) D6) D9
type HC60 = :* (:* (:* D3 D1) D6) D8
type D3168 = :* (:* (:* D3 D1) D6) D8
type O6140 = :* (:* (:* D3 D1) D6) D8
type HC5F = :* (:* (:* D3 D1) D6) D7
type D3167 = :* (:* (:* D3 D1) D6) D7
type O6137 = :* (:* (:* D3 D1) D6) D7
type HC5E = :* (:* (:* D3 D1) D6) D6
type D3166 = :* (:* (:* D3 D1) D6) D6
type O6136 = :* (:* (:* D3 D1) D6) D6
type HC5D = :* (:* (:* D3 D1) D6) D5
type D3165 = :* (:* (:* D3 D1) D6) D5
type O6135 = :* (:* (:* D3 D1) D6) D5
type HC5C = :* (:* (:* D3 D1) D6) D4
type D3164 = :* (:* (:* D3 D1) D6) D4
type O6134 = :* (:* (:* D3 D1) D6) D4
type HC5B = :* (:* (:* D3 D1) D6) D3
type D3163 = :* (:* (:* D3 D1) D6) D3
type O6133 = :* (:* (:* D3 D1) D6) D3
type HC5A = :* (:* (:* D3 D1) D6) D2
type D3162 = :* (:* (:* D3 D1) D6) D2
type O6132 = :* (:* (:* D3 D1) D6) D2
type HC59 = :* (:* (:* D3 D1) D6) D1
type D3161 = :* (:* (:* D3 D1) D6) D1
type O6131 = :* (:* (:* D3 D1) D6) D1
type HC58 = :* (:* (:* D3 D1) D6) D0
type D3160 = :* (:* (:* D3 D1) D6) D0
type O6130 = :* (:* (:* D3 D1) D6) D0
type HC57 = :* (:* (:* D3 D1) D5) D9
type D3159 = :* (:* (:* D3 D1) D5) D9
type O6127 = :* (:* (:* D3 D1) D5) D9
type HC56 = :* (:* (:* D3 D1) D5) D8
type D3158 = :* (:* (:* D3 D1) D5) D8
type O6126 = :* (:* (:* D3 D1) D5) D8
type HC55 = :* (:* (:* D3 D1) D5) D7
type D3157 = :* (:* (:* D3 D1) D5) D7
type O6125 = :* (:* (:* D3 D1) D5) D7
type HC54 = :* (:* (:* D3 D1) D5) D6
type D3156 = :* (:* (:* D3 D1) D5) D6
type O6124 = :* (:* (:* D3 D1) D5) D6
type HC53 = :* (:* (:* D3 D1) D5) D5
type D3155 = :* (:* (:* D3 D1) D5) D5
type O6123 = :* (:* (:* D3 D1) D5) D5
type HC52 = :* (:* (:* D3 D1) D5) D4
type D3154 = :* (:* (:* D3 D1) D5) D4
type O6122 = :* (:* (:* D3 D1) D5) D4
type HC51 = :* (:* (:* D3 D1) D5) D3
type D3153 = :* (:* (:* D3 D1) D5) D3
type O6121 = :* (:* (:* D3 D1) D5) D3
type HC50 = :* (:* (:* D3 D1) D5) D2
type D3152 = :* (:* (:* D3 D1) D5) D2
type O6120 = :* (:* (:* D3 D1) D5) D2
type HC4F = :* (:* (:* D3 D1) D5) D1
type D3151 = :* (:* (:* D3 D1) D5) D1
type O6117 = :* (:* (:* D3 D1) D5) D1
type HC4E = :* (:* (:* D3 D1) D5) D0
type D3150 = :* (:* (:* D3 D1) D5) D0
type O6116 = :* (:* (:* D3 D1) D5) D0
type HC4D = :* (:* (:* D3 D1) D4) D9
type D3149 = :* (:* (:* D3 D1) D4) D9
type O6115 = :* (:* (:* D3 D1) D4) D9
type HC4C = :* (:* (:* D3 D1) D4) D8
type D3148 = :* (:* (:* D3 D1) D4) D8
type O6114 = :* (:* (:* D3 D1) D4) D8
type HC4B = :* (:* (:* D3 D1) D4) D7
type D3147 = :* (:* (:* D3 D1) D4) D7
type O6113 = :* (:* (:* D3 D1) D4) D7
type HC4A = :* (:* (:* D3 D1) D4) D6
type D3146 = :* (:* (:* D3 D1) D4) D6
type O6112 = :* (:* (:* D3 D1) D4) D6
type HC49 = :* (:* (:* D3 D1) D4) D5
type D3145 = :* (:* (:* D3 D1) D4) D5
type O6111 = :* (:* (:* D3 D1) D4) D5
type HC48 = :* (:* (:* D3 D1) D4) D4
type D3144 = :* (:* (:* D3 D1) D4) D4
type O6110 = :* (:* (:* D3 D1) D4) D4
type HC47 = :* (:* (:* D3 D1) D4) D3
type D3143 = :* (:* (:* D3 D1) D4) D3
type O6107 = :* (:* (:* D3 D1) D4) D3
type HC46 = :* (:* (:* D3 D1) D4) D2
type D3142 = :* (:* (:* D3 D1) D4) D2
type O6106 = :* (:* (:* D3 D1) D4) D2
type HC45 = :* (:* (:* D3 D1) D4) D1
type D3141 = :* (:* (:* D3 D1) D4) D1
type O6105 = :* (:* (:* D3 D1) D4) D1
type HC44 = :* (:* (:* D3 D1) D4) D0
type D3140 = :* (:* (:* D3 D1) D4) D0
type O6104 = :* (:* (:* D3 D1) D4) D0
type HC43 = :* (:* (:* D3 D1) D3) D9
type D3139 = :* (:* (:* D3 D1) D3) D9
type O6103 = :* (:* (:* D3 D1) D3) D9
type HC42 = :* (:* (:* D3 D1) D3) D8
type D3138 = :* (:* (:* D3 D1) D3) D8
type O6102 = :* (:* (:* D3 D1) D3) D8
type HC41 = :* (:* (:* D3 D1) D3) D7
type D3137 = :* (:* (:* D3 D1) D3) D7
type O6101 = :* (:* (:* D3 D1) D3) D7
type HC40 = :* (:* (:* D3 D1) D3) D6
type D3136 = :* (:* (:* D3 D1) D3) D6
type O6100 = :* (:* (:* D3 D1) D3) D6
type HC3F = :* (:* (:* D3 D1) D3) D5
type D3135 = :* (:* (:* D3 D1) D3) D5
type O6077 = :* (:* (:* D3 D1) D3) D5
type HC3E = :* (:* (:* D3 D1) D3) D4
type D3134 = :* (:* (:* D3 D1) D3) D4
type O6076 = :* (:* (:* D3 D1) D3) D4
type HC3D = :* (:* (:* D3 D1) D3) D3
type D3133 = :* (:* (:* D3 D1) D3) D3
type O6075 = :* (:* (:* D3 D1) D3) D3
type HC3C = :* (:* (:* D3 D1) D3) D2
type D3132 = :* (:* (:* D3 D1) D3) D2
type O6074 = :* (:* (:* D3 D1) D3) D2
type HC3B = :* (:* (:* D3 D1) D3) D1
type D3131 = :* (:* (:* D3 D1) D3) D1
type O6073 = :* (:* (:* D3 D1) D3) D1
type HC3A = :* (:* (:* D3 D1) D3) D0
type D3130 = :* (:* (:* D3 D1) D3) D0
type O6072 = :* (:* (:* D3 D1) D3) D0
type HC39 = :* (:* (:* D3 D1) D2) D9
type D3129 = :* (:* (:* D3 D1) D2) D9
type O6071 = :* (:* (:* D3 D1) D2) D9
type HC38 = :* (:* (:* D3 D1) D2) D8
type D3128 = :* (:* (:* D3 D1) D2) D8
type O6070 = :* (:* (:* D3 D1) D2) D8
type HC37 = :* (:* (:* D3 D1) D2) D7
type D3127 = :* (:* (:* D3 D1) D2) D7
type O6067 = :* (:* (:* D3 D1) D2) D7
type HC36 = :* (:* (:* D3 D1) D2) D6
type D3126 = :* (:* (:* D3 D1) D2) D6
type O6066 = :* (:* (:* D3 D1) D2) D6
type HC35 = :* (:* (:* D3 D1) D2) D5
type D3125 = :* (:* (:* D3 D1) D2) D5
type O6065 = :* (:* (:* D3 D1) D2) D5
type HC34 = :* (:* (:* D3 D1) D2) D4
type D3124 = :* (:* (:* D3 D1) D2) D4
type O6064 = :* (:* (:* D3 D1) D2) D4
type HC33 = :* (:* (:* D3 D1) D2) D3
type D3123 = :* (:* (:* D3 D1) D2) D3
type O6063 = :* (:* (:* D3 D1) D2) D3
type HC32 = :* (:* (:* D3 D1) D2) D2
type D3122 = :* (:* (:* D3 D1) D2) D2
type O6062 = :* (:* (:* D3 D1) D2) D2
type HC31 = :* (:* (:* D3 D1) D2) D1
type D3121 = :* (:* (:* D3 D1) D2) D1
type O6061 = :* (:* (:* D3 D1) D2) D1
type HC30 = :* (:* (:* D3 D1) D2) D0
type D3120 = :* (:* (:* D3 D1) D2) D0
type O6060 = :* (:* (:* D3 D1) D2) D0
type HC2F = :* (:* (:* D3 D1) D1) D9
type D3119 = :* (:* (:* D3 D1) D1) D9
type O6057 = :* (:* (:* D3 D1) D1) D9
type HC2E = :* (:* (:* D3 D1) D1) D8
type D3118 = :* (:* (:* D3 D1) D1) D8
type O6056 = :* (:* (:* D3 D1) D1) D8
type HC2D = :* (:* (:* D3 D1) D1) D7
type D3117 = :* (:* (:* D3 D1) D1) D7
type O6055 = :* (:* (:* D3 D1) D1) D7
type HC2C = :* (:* (:* D3 D1) D1) D6
type D3116 = :* (:* (:* D3 D1) D1) D6
type O6054 = :* (:* (:* D3 D1) D1) D6
type HC2B = :* (:* (:* D3 D1) D1) D5
type D3115 = :* (:* (:* D3 D1) D1) D5
type O6053 = :* (:* (:* D3 D1) D1) D5
type HC2A = :* (:* (:* D3 D1) D1) D4
type D3114 = :* (:* (:* D3 D1) D1) D4
type O6052 = :* (:* (:* D3 D1) D1) D4
type HC29 = :* (:* (:* D3 D1) D1) D3
type D3113 = :* (:* (:* D3 D1) D1) D3
type O6051 = :* (:* (:* D3 D1) D1) D3
type HC28 = :* (:* (:* D3 D1) D1) D2
type D3112 = :* (:* (:* D3 D1) D1) D2
type O6050 = :* (:* (:* D3 D1) D1) D2
type HC27 = :* (:* (:* D3 D1) D1) D1
type D3111 = :* (:* (:* D3 D1) D1) D1
type O6047 = :* (:* (:* D3 D1) D1) D1
type HC26 = :* (:* (:* D3 D1) D1) D0
type D3110 = :* (:* (:* D3 D1) D1) D0
type O6046 = :* (:* (:* D3 D1) D1) D0
type HC25 = :* (:* (:* D3 D1) D0) D9
type D3109 = :* (:* (:* D3 D1) D0) D9
type O6045 = :* (:* (:* D3 D1) D0) D9
type HC24 = :* (:* (:* D3 D1) D0) D8
type D3108 = :* (:* (:* D3 D1) D0) D8
type O6044 = :* (:* (:* D3 D1) D0) D8
type HC23 = :* (:* (:* D3 D1) D0) D7
type D3107 = :* (:* (:* D3 D1) D0) D7
type O6043 = :* (:* (:* D3 D1) D0) D7
type HC22 = :* (:* (:* D3 D1) D0) D6
type D3106 = :* (:* (:* D3 D1) D0) D6
type O6042 = :* (:* (:* D3 D1) D0) D6
type HC21 = :* (:* (:* D3 D1) D0) D5
type D3105 = :* (:* (:* D3 D1) D0) D5
type O6041 = :* (:* (:* D3 D1) D0) D5
type HC20 = :* (:* (:* D3 D1) D0) D4
type D3104 = :* (:* (:* D3 D1) D0) D4
type O6040 = :* (:* (:* D3 D1) D0) D4
type HC1F = :* (:* (:* D3 D1) D0) D3
type D3103 = :* (:* (:* D3 D1) D0) D3
type O6037 = :* (:* (:* D3 D1) D0) D3
type HC1E = :* (:* (:* D3 D1) D0) D2
type D3102 = :* (:* (:* D3 D1) D0) D2
type O6036 = :* (:* (:* D3 D1) D0) D2
type HC1D = :* (:* (:* D3 D1) D0) D1
type D3101 = :* (:* (:* D3 D1) D0) D1
type O6035 = :* (:* (:* D3 D1) D0) D1
type HC1C = :* (:* (:* D3 D1) D0) D0
type D3100 = :* (:* (:* D3 D1) D0) D0
type O6034 = :* (:* (:* D3 D1) D0) D0
type HC1B = :* (:* (:* D3 D0) D9) D9
type D3099 = :* (:* (:* D3 D0) D9) D9
type O6033 = :* (:* (:* D3 D0) D9) D9
type HC1A = :* (:* (:* D3 D0) D9) D8
type D3098 = :* (:* (:* D3 D0) D9) D8
type O6032 = :* (:* (:* D3 D0) D9) D8
type HC19 = :* (:* (:* D3 D0) D9) D7
type D3097 = :* (:* (:* D3 D0) D9) D7
type O6031 = :* (:* (:* D3 D0) D9) D7
type HC18 = :* (:* (:* D3 D0) D9) D6
type D3096 = :* (:* (:* D3 D0) D9) D6
type O6030 = :* (:* (:* D3 D0) D9) D6
type HC17 = :* (:* (:* D3 D0) D9) D5
type D3095 = :* (:* (:* D3 D0) D9) D5
type O6027 = :* (:* (:* D3 D0) D9) D5
type HC16 = :* (:* (:* D3 D0) D9) D4
type D3094 = :* (:* (:* D3 D0) D9) D4
type O6026 = :* (:* (:* D3 D0) D9) D4
type HC15 = :* (:* (:* D3 D0) D9) D3
type D3093 = :* (:* (:* D3 D0) D9) D3
type O6025 = :* (:* (:* D3 D0) D9) D3
type HC14 = :* (:* (:* D3 D0) D9) D2
type D3092 = :* (:* (:* D3 D0) D9) D2
type O6024 = :* (:* (:* D3 D0) D9) D2
type HC13 = :* (:* (:* D3 D0) D9) D1
type D3091 = :* (:* (:* D3 D0) D9) D1
type O6023 = :* (:* (:* D3 D0) D9) D1
type HC12 = :* (:* (:* D3 D0) D9) D0
type D3090 = :* (:* (:* D3 D0) D9) D0
type O6022 = :* (:* (:* D3 D0) D9) D0
type HC11 = :* (:* (:* D3 D0) D8) D9
type D3089 = :* (:* (:* D3 D0) D8) D9
type O6021 = :* (:* (:* D3 D0) D8) D9
type HC10 = :* (:* (:* D3 D0) D8) D8
type D3088 = :* (:* (:* D3 D0) D8) D8
type O6020 = :* (:* (:* D3 D0) D8) D8
type HC0F = :* (:* (:* D3 D0) D8) D7
type D3087 = :* (:* (:* D3 D0) D8) D7
type O6017 = :* (:* (:* D3 D0) D8) D7
type HC0E = :* (:* (:* D3 D0) D8) D6
type D3086 = :* (:* (:* D3 D0) D8) D6
type O6016 = :* (:* (:* D3 D0) D8) D6
type HC0D = :* (:* (:* D3 D0) D8) D5
type D3085 = :* (:* (:* D3 D0) D8) D5
type O6015 = :* (:* (:* D3 D0) D8) D5
type HC0C = :* (:* (:* D3 D0) D8) D4
type D3084 = :* (:* (:* D3 D0) D8) D4
type O6014 = :* (:* (:* D3 D0) D8) D4
type HC0B = :* (:* (:* D3 D0) D8) D3
type D3083 = :* (:* (:* D3 D0) D8) D3
type O6013 = :* (:* (:* D3 D0) D8) D3
type HC0A = :* (:* (:* D3 D0) D8) D2
type D3082 = :* (:* (:* D3 D0) D8) D2
type O6012 = :* (:* (:* D3 D0) D8) D2
type HC09 = :* (:* (:* D3 D0) D8) D1
type D3081 = :* (:* (:* D3 D0) D8) D1
type O6011 = :* (:* (:* D3 D0) D8) D1
type HC08 = :* (:* (:* D3 D0) D8) D0
type D3080 = :* (:* (:* D3 D0) D8) D0
type O6010 = :* (:* (:* D3 D0) D8) D0
type HC07 = :* (:* (:* D3 D0) D7) D9
type D3079 = :* (:* (:* D3 D0) D7) D9
type O6007 = :* (:* (:* D3 D0) D7) D9
type HC06 = :* (:* (:* D3 D0) D7) D8
type D3078 = :* (:* (:* D3 D0) D7) D8
type O6006 = :* (:* (:* D3 D0) D7) D8
type HC05 = :* (:* (:* D3 D0) D7) D7
type D3077 = :* (:* (:* D3 D0) D7) D7
type O6005 = :* (:* (:* D3 D0) D7) D7
type HC04 = :* (:* (:* D3 D0) D7) D6
type D3076 = :* (:* (:* D3 D0) D7) D6
type O6004 = :* (:* (:* D3 D0) D7) D6
type HC03 = :* (:* (:* D3 D0) D7) D5
type D3075 = :* (:* (:* D3 D0) D7) D5
type O6003 = :* (:* (:* D3 D0) D7) D5
type HC02 = :* (:* (:* D3 D0) D7) D4
type D3074 = :* (:* (:* D3 D0) D7) D4
type O6002 = :* (:* (:* D3 D0) D7) D4
type HC01 = :* (:* (:* D3 D0) D7) D3
type D3073 = :* (:* (:* D3 D0) D7) D3
type O6001 = :* (:* (:* D3 D0) D7) D3
type HC00 = :* (:* (:* D3 D0) D7) D2
type D3072 = :* (:* (:* D3 D0) D7) D2
type O6000 = :* (:* (:* D3 D0) D7) D2
type HBFF = :* (:* (:* D3 D0) D7) D1
type D3071 = :* (:* (:* D3 D0) D7) D1
type O5777 = :* (:* (:* D3 D0) D7) D1
type HBFE = :* (:* (:* D3 D0) D7) D0
type D3070 = :* (:* (:* D3 D0) D7) D0
type O5776 = :* (:* (:* D3 D0) D7) D0
type HBFD = :* (:* (:* D3 D0) D6) D9
type D3069 = :* (:* (:* D3 D0) D6) D9
type O5775 = :* (:* (:* D3 D0) D6) D9
type HBFC = :* (:* (:* D3 D0) D6) D8
type D3068 = :* (:* (:* D3 D0) D6) D8
type O5774 = :* (:* (:* D3 D0) D6) D8
type HBFB = :* (:* (:* D3 D0) D6) D7
type D3067 = :* (:* (:* D3 D0) D6) D7
type O5773 = :* (:* (:* D3 D0) D6) D7
type HBFA = :* (:* (:* D3 D0) D6) D6
type D3066 = :* (:* (:* D3 D0) D6) D6
type O5772 = :* (:* (:* D3 D0) D6) D6
type HBF9 = :* (:* (:* D3 D0) D6) D5
type D3065 = :* (:* (:* D3 D0) D6) D5
type O5771 = :* (:* (:* D3 D0) D6) D5
type HBF8 = :* (:* (:* D3 D0) D6) D4
type D3064 = :* (:* (:* D3 D0) D6) D4
type O5770 = :* (:* (:* D3 D0) D6) D4
type HBF7 = :* (:* (:* D3 D0) D6) D3
type D3063 = :* (:* (:* D3 D0) D6) D3
type O5767 = :* (:* (:* D3 D0) D6) D3
type HBF6 = :* (:* (:* D3 D0) D6) D2
type D3062 = :* (:* (:* D3 D0) D6) D2
type O5766 = :* (:* (:* D3 D0) D6) D2
type HBF5 = :* (:* (:* D3 D0) D6) D1
type D3061 = :* (:* (:* D3 D0) D6) D1
type O5765 = :* (:* (:* D3 D0) D6) D1
type HBF4 = :* (:* (:* D3 D0) D6) D0
type D3060 = :* (:* (:* D3 D0) D6) D0
type O5764 = :* (:* (:* D3 D0) D6) D0
type HBF3 = :* (:* (:* D3 D0) D5) D9
type D3059 = :* (:* (:* D3 D0) D5) D9
type O5763 = :* (:* (:* D3 D0) D5) D9
type HBF2 = :* (:* (:* D3 D0) D5) D8
type D3058 = :* (:* (:* D3 D0) D5) D8
type O5762 = :* (:* (:* D3 D0) D5) D8
type HBF1 = :* (:* (:* D3 D0) D5) D7
type D3057 = :* (:* (:* D3 D0) D5) D7
type O5761 = :* (:* (:* D3 D0) D5) D7
type HBF0 = :* (:* (:* D3 D0) D5) D6
type D3056 = :* (:* (:* D3 D0) D5) D6
type O5760 = :* (:* (:* D3 D0) D5) D6
type HBEF = :* (:* (:* D3 D0) D5) D5
type D3055 = :* (:* (:* D3 D0) D5) D5
type O5757 = :* (:* (:* D3 D0) D5) D5
type HBEE = :* (:* (:* D3 D0) D5) D4
type D3054 = :* (:* (:* D3 D0) D5) D4
type O5756 = :* (:* (:* D3 D0) D5) D4
type HBED = :* (:* (:* D3 D0) D5) D3
type D3053 = :* (:* (:* D3 D0) D5) D3
type O5755 = :* (:* (:* D3 D0) D5) D3
type HBEC = :* (:* (:* D3 D0) D5) D2
type D3052 = :* (:* (:* D3 D0) D5) D2
type O5754 = :* (:* (:* D3 D0) D5) D2
type HBEB = :* (:* (:* D3 D0) D5) D1
type D3051 = :* (:* (:* D3 D0) D5) D1
type O5753 = :* (:* (:* D3 D0) D5) D1
type HBEA = :* (:* (:* D3 D0) D5) D0
type D3050 = :* (:* (:* D3 D0) D5) D0
type O5752 = :* (:* (:* D3 D0) D5) D0
type HBE9 = :* (:* (:* D3 D0) D4) D9
type D3049 = :* (:* (:* D3 D0) D4) D9
type O5751 = :* (:* (:* D3 D0) D4) D9
type HBE8 = :* (:* (:* D3 D0) D4) D8
type D3048 = :* (:* (:* D3 D0) D4) D8
type O5750 = :* (:* (:* D3 D0) D4) D8
type HBE7 = :* (:* (:* D3 D0) D4) D7
type D3047 = :* (:* (:* D3 D0) D4) D7
type O5747 = :* (:* (:* D3 D0) D4) D7
type HBE6 = :* (:* (:* D3 D0) D4) D6
type D3046 = :* (:* (:* D3 D0) D4) D6
type O5746 = :* (:* (:* D3 D0) D4) D6
type HBE5 = :* (:* (:* D3 D0) D4) D5
type D3045 = :* (:* (:* D3 D0) D4) D5
type O5745 = :* (:* (:* D3 D0) D4) D5
type HBE4 = :* (:* (:* D3 D0) D4) D4
type D3044 = :* (:* (:* D3 D0) D4) D4
type O5744 = :* (:* (:* D3 D0) D4) D4
type HBE3 = :* (:* (:* D3 D0) D4) D3
type D3043 = :* (:* (:* D3 D0) D4) D3
type O5743 = :* (:* (:* D3 D0) D4) D3
type HBE2 = :* (:* (:* D3 D0) D4) D2
type D3042 = :* (:* (:* D3 D0) D4) D2
type O5742 = :* (:* (:* D3 D0) D4) D2
type HBE1 = :* (:* (:* D3 D0) D4) D1
type D3041 = :* (:* (:* D3 D0) D4) D1
type O5741 = :* (:* (:* D3 D0) D4) D1
type HBE0 = :* (:* (:* D3 D0) D4) D0
type D3040 = :* (:* (:* D3 D0) D4) D0
type O5740 = :* (:* (:* D3 D0) D4) D0
type HBDF = :* (:* (:* D3 D0) D3) D9
type D3039 = :* (:* (:* D3 D0) D3) D9
type O5737 = :* (:* (:* D3 D0) D3) D9
type HBDE = :* (:* (:* D3 D0) D3) D8
type D3038 = :* (:* (:* D3 D0) D3) D8
type O5736 = :* (:* (:* D3 D0) D3) D8
type HBDD = :* (:* (:* D3 D0) D3) D7
type D3037 = :* (:* (:* D3 D0) D3) D7
type O5735 = :* (:* (:* D3 D0) D3) D7
type HBDC = :* (:* (:* D3 D0) D3) D6
type D3036 = :* (:* (:* D3 D0) D3) D6
type O5734 = :* (:* (:* D3 D0) D3) D6
type HBDB = :* (:* (:* D3 D0) D3) D5
type D3035 = :* (:* (:* D3 D0) D3) D5
type O5733 = :* (:* (:* D3 D0) D3) D5
type HBDA = :* (:* (:* D3 D0) D3) D4
type D3034 = :* (:* (:* D3 D0) D3) D4
type O5732 = :* (:* (:* D3 D0) D3) D4
type HBD9 = :* (:* (:* D3 D0) D3) D3
type D3033 = :* (:* (:* D3 D0) D3) D3
type O5731 = :* (:* (:* D3 D0) D3) D3
type HBD8 = :* (:* (:* D3 D0) D3) D2
type D3032 = :* (:* (:* D3 D0) D3) D2
type O5730 = :* (:* (:* D3 D0) D3) D2
type HBD7 = :* (:* (:* D3 D0) D3) D1
type D3031 = :* (:* (:* D3 D0) D3) D1
type O5727 = :* (:* (:* D3 D0) D3) D1
type HBD6 = :* (:* (:* D3 D0) D3) D0
type D3030 = :* (:* (:* D3 D0) D3) D0
type O5726 = :* (:* (:* D3 D0) D3) D0
type HBD5 = :* (:* (:* D3 D0) D2) D9
type D3029 = :* (:* (:* D3 D0) D2) D9
type O5725 = :* (:* (:* D3 D0) D2) D9
type HBD4 = :* (:* (:* D3 D0) D2) D8
type D3028 = :* (:* (:* D3 D0) D2) D8
type O5724 = :* (:* (:* D3 D0) D2) D8
type HBD3 = :* (:* (:* D3 D0) D2) D7
type D3027 = :* (:* (:* D3 D0) D2) D7
type O5723 = :* (:* (:* D3 D0) D2) D7
type HBD2 = :* (:* (:* D3 D0) D2) D6
type D3026 = :* (:* (:* D3 D0) D2) D6
type O5722 = :* (:* (:* D3 D0) D2) D6
type HBD1 = :* (:* (:* D3 D0) D2) D5
type D3025 = :* (:* (:* D3 D0) D2) D5
type O5721 = :* (:* (:* D3 D0) D2) D5
type HBD0 = :* (:* (:* D3 D0) D2) D4
type D3024 = :* (:* (:* D3 D0) D2) D4
type O5720 = :* (:* (:* D3 D0) D2) D4
type HBCF = :* (:* (:* D3 D0) D2) D3
type D3023 = :* (:* (:* D3 D0) D2) D3
type O5717 = :* (:* (:* D3 D0) D2) D3
type HBCE = :* (:* (:* D3 D0) D2) D2
type D3022 = :* (:* (:* D3 D0) D2) D2
type O5716 = :* (:* (:* D3 D0) D2) D2
type HBCD = :* (:* (:* D3 D0) D2) D1
type D3021 = :* (:* (:* D3 D0) D2) D1
type O5715 = :* (:* (:* D3 D0) D2) D1
type HBCC = :* (:* (:* D3 D0) D2) D0
type D3020 = :* (:* (:* D3 D0) D2) D0
type O5714 = :* (:* (:* D3 D0) D2) D0
type HBCB = :* (:* (:* D3 D0) D1) D9
type D3019 = :* (:* (:* D3 D0) D1) D9
type O5713 = :* (:* (:* D3 D0) D1) D9
type HBCA = :* (:* (:* D3 D0) D1) D8
type D3018 = :* (:* (:* D3 D0) D1) D8
type O5712 = :* (:* (:* D3 D0) D1) D8
type HBC9 = :* (:* (:* D3 D0) D1) D7
type D3017 = :* (:* (:* D3 D0) D1) D7
type O5711 = :* (:* (:* D3 D0) D1) D7
type HBC8 = :* (:* (:* D3 D0) D1) D6
type D3016 = :* (:* (:* D3 D0) D1) D6
type O5710 = :* (:* (:* D3 D0) D1) D6
type HBC7 = :* (:* (:* D3 D0) D1) D5
type D3015 = :* (:* (:* D3 D0) D1) D5
type O5707 = :* (:* (:* D3 D0) D1) D5
type HBC6 = :* (:* (:* D3 D0) D1) D4
type D3014 = :* (:* (:* D3 D0) D1) D4
type O5706 = :* (:* (:* D3 D0) D1) D4
type HBC5 = :* (:* (:* D3 D0) D1) D3
type D3013 = :* (:* (:* D3 D0) D1) D3
type O5705 = :* (:* (:* D3 D0) D1) D3
type HBC4 = :* (:* (:* D3 D0) D1) D2
type D3012 = :* (:* (:* D3 D0) D1) D2
type O5704 = :* (:* (:* D3 D0) D1) D2
type HBC3 = :* (:* (:* D3 D0) D1) D1
type D3011 = :* (:* (:* D3 D0) D1) D1
type O5703 = :* (:* (:* D3 D0) D1) D1
type HBC2 = :* (:* (:* D3 D0) D1) D0
type D3010 = :* (:* (:* D3 D0) D1) D0
type O5702 = :* (:* (:* D3 D0) D1) D0
type HBC1 = :* (:* (:* D3 D0) D0) D9
type D3009 = :* (:* (:* D3 D0) D0) D9
type O5701 = :* (:* (:* D3 D0) D0) D9
type HBC0 = :* (:* (:* D3 D0) D0) D8
type D3008 = :* (:* (:* D3 D0) D0) D8
type O5700 = :* (:* (:* D3 D0) D0) D8
type HBBF = :* (:* (:* D3 D0) D0) D7
type D3007 = :* (:* (:* D3 D0) D0) D7
type O5677 = :* (:* (:* D3 D0) D0) D7
type HBBE = :* (:* (:* D3 D0) D0) D6
type D3006 = :* (:* (:* D3 D0) D0) D6
type O5676 = :* (:* (:* D3 D0) D0) D6
type HBBD = :* (:* (:* D3 D0) D0) D5
type D3005 = :* (:* (:* D3 D0) D0) D5
type O5675 = :* (:* (:* D3 D0) D0) D5
type HBBC = :* (:* (:* D3 D0) D0) D4
type D3004 = :* (:* (:* D3 D0) D0) D4
type O5674 = :* (:* (:* D3 D0) D0) D4
type HBBB = :* (:* (:* D3 D0) D0) D3
type D3003 = :* (:* (:* D3 D0) D0) D3
type O5673 = :* (:* (:* D3 D0) D0) D3
type HBBA = :* (:* (:* D3 D0) D0) D2
type D3002 = :* (:* (:* D3 D0) D0) D2
type O5672 = :* (:* (:* D3 D0) D0) D2
type HBB9 = :* (:* (:* D3 D0) D0) D1
type D3001 = :* (:* (:* D3 D0) D0) D1
type O5671 = :* (:* (:* D3 D0) D0) D1
type HBB8 = :* (:* (:* D3 D0) D0) D0
type D3000 = :* (:* (:* D3 D0) D0) D0
type O5670 = :* (:* (:* D3 D0) D0) D0
type HBB7 = :* (:* (:* D2 D9) D9) D9
type D2999 = :* (:* (:* D2 D9) D9) D9
type O5667 = :* (:* (:* D2 D9) D9) D9
type HBB6 = :* (:* (:* D2 D9) D9) D8
type D2998 = :* (:* (:* D2 D9) D9) D8
type O5666 = :* (:* (:* D2 D9) D9) D8
type HBB5 = :* (:* (:* D2 D9) D9) D7
type D2997 = :* (:* (:* D2 D9) D9) D7
type O5665 = :* (:* (:* D2 D9) D9) D7
type HBB4 = :* (:* (:* D2 D9) D9) D6
type D2996 = :* (:* (:* D2 D9) D9) D6
type O5664 = :* (:* (:* D2 D9) D9) D6
type HBB3 = :* (:* (:* D2 D9) D9) D5
type D2995 = :* (:* (:* D2 D9) D9) D5
type O5663 = :* (:* (:* D2 D9) D9) D5
type HBB2 = :* (:* (:* D2 D9) D9) D4
type D2994 = :* (:* (:* D2 D9) D9) D4
type O5662 = :* (:* (:* D2 D9) D9) D4
type HBB1 = :* (:* (:* D2 D9) D9) D3
type D2993 = :* (:* (:* D2 D9) D9) D3
type O5661 = :* (:* (:* D2 D9) D9) D3
type HBB0 = :* (:* (:* D2 D9) D9) D2
type D2992 = :* (:* (:* D2 D9) D9) D2
type O5660 = :* (:* (:* D2 D9) D9) D2
type HBAF = :* (:* (:* D2 D9) D9) D1
type D2991 = :* (:* (:* D2 D9) D9) D1
type O5657 = :* (:* (:* D2 D9) D9) D1
type HBAE = :* (:* (:* D2 D9) D9) D0
type D2990 = :* (:* (:* D2 D9) D9) D0
type O5656 = :* (:* (:* D2 D9) D9) D0
type HBAD = :* (:* (:* D2 D9) D8) D9
type D2989 = :* (:* (:* D2 D9) D8) D9
type O5655 = :* (:* (:* D2 D9) D8) D9
type HBAC = :* (:* (:* D2 D9) D8) D8
type D2988 = :* (:* (:* D2 D9) D8) D8
type O5654 = :* (:* (:* D2 D9) D8) D8
type HBAB = :* (:* (:* D2 D9) D8) D7
type D2987 = :* (:* (:* D2 D9) D8) D7
type O5653 = :* (:* (:* D2 D9) D8) D7
type HBAA = :* (:* (:* D2 D9) D8) D6
type D2986 = :* (:* (:* D2 D9) D8) D6
type O5652 = :* (:* (:* D2 D9) D8) D6
type HBA9 = :* (:* (:* D2 D9) D8) D5
type D2985 = :* (:* (:* D2 D9) D8) D5
type O5651 = :* (:* (:* D2 D9) D8) D5
type HBA8 = :* (:* (:* D2 D9) D8) D4
type D2984 = :* (:* (:* D2 D9) D8) D4
type O5650 = :* (:* (:* D2 D9) D8) D4
type HBA7 = :* (:* (:* D2 D9) D8) D3
type D2983 = :* (:* (:* D2 D9) D8) D3
type O5647 = :* (:* (:* D2 D9) D8) D3
type HBA6 = :* (:* (:* D2 D9) D8) D2
type D2982 = :* (:* (:* D2 D9) D8) D2
type O5646 = :* (:* (:* D2 D9) D8) D2
type HBA5 = :* (:* (:* D2 D9) D8) D1
type D2981 = :* (:* (:* D2 D9) D8) D1
type O5645 = :* (:* (:* D2 D9) D8) D1
type HBA4 = :* (:* (:* D2 D9) D8) D0
type D2980 = :* (:* (:* D2 D9) D8) D0
type O5644 = :* (:* (:* D2 D9) D8) D0
type HBA3 = :* (:* (:* D2 D9) D7) D9
type D2979 = :* (:* (:* D2 D9) D7) D9
type O5643 = :* (:* (:* D2 D9) D7) D9
type HBA2 = :* (:* (:* D2 D9) D7) D8
type D2978 = :* (:* (:* D2 D9) D7) D8
type O5642 = :* (:* (:* D2 D9) D7) D8
type HBA1 = :* (:* (:* D2 D9) D7) D7
type D2977 = :* (:* (:* D2 D9) D7) D7
type O5641 = :* (:* (:* D2 D9) D7) D7
type HBA0 = :* (:* (:* D2 D9) D7) D6
type D2976 = :* (:* (:* D2 D9) D7) D6
type O5640 = :* (:* (:* D2 D9) D7) D6
type HB9F = :* (:* (:* D2 D9) D7) D5
type D2975 = :* (:* (:* D2 D9) D7) D5
type O5637 = :* (:* (:* D2 D9) D7) D5
type HB9E = :* (:* (:* D2 D9) D7) D4
type D2974 = :* (:* (:* D2 D9) D7) D4
type O5636 = :* (:* (:* D2 D9) D7) D4
type HB9D = :* (:* (:* D2 D9) D7) D3
type D2973 = :* (:* (:* D2 D9) D7) D3
type O5635 = :* (:* (:* D2 D9) D7) D3
type HB9C = :* (:* (:* D2 D9) D7) D2
type D2972 = :* (:* (:* D2 D9) D7) D2
type O5634 = :* (:* (:* D2 D9) D7) D2
type HB9B = :* (:* (:* D2 D9) D7) D1
type D2971 = :* (:* (:* D2 D9) D7) D1
type O5633 = :* (:* (:* D2 D9) D7) D1
type HB9A = :* (:* (:* D2 D9) D7) D0
type D2970 = :* (:* (:* D2 D9) D7) D0
type O5632 = :* (:* (:* D2 D9) D7) D0
type HB99 = :* (:* (:* D2 D9) D6) D9
type D2969 = :* (:* (:* D2 D9) D6) D9
type O5631 = :* (:* (:* D2 D9) D6) D9
type HB98 = :* (:* (:* D2 D9) D6) D8
type D2968 = :* (:* (:* D2 D9) D6) D8
type O5630 = :* (:* (:* D2 D9) D6) D8
type HB97 = :* (:* (:* D2 D9) D6) D7
type D2967 = :* (:* (:* D2 D9) D6) D7
type O5627 = :* (:* (:* D2 D9) D6) D7
type HB96 = :* (:* (:* D2 D9) D6) D6
type D2966 = :* (:* (:* D2 D9) D6) D6
type O5626 = :* (:* (:* D2 D9) D6) D6
type HB95 = :* (:* (:* D2 D9) D6) D5
type D2965 = :* (:* (:* D2 D9) D6) D5
type O5625 = :* (:* (:* D2 D9) D6) D5
type HB94 = :* (:* (:* D2 D9) D6) D4
type D2964 = :* (:* (:* D2 D9) D6) D4
type O5624 = :* (:* (:* D2 D9) D6) D4
type HB93 = :* (:* (:* D2 D9) D6) D3
type D2963 = :* (:* (:* D2 D9) D6) D3
type O5623 = :* (:* (:* D2 D9) D6) D3
type HB92 = :* (:* (:* D2 D9) D6) D2
type D2962 = :* (:* (:* D2 D9) D6) D2
type O5622 = :* (:* (:* D2 D9) D6) D2
type HB91 = :* (:* (:* D2 D9) D6) D1
type D2961 = :* (:* (:* D2 D9) D6) D1
type O5621 = :* (:* (:* D2 D9) D6) D1
type HB90 = :* (:* (:* D2 D9) D6) D0
type D2960 = :* (:* (:* D2 D9) D6) D0
type O5620 = :* (:* (:* D2 D9) D6) D0
type HB8F = :* (:* (:* D2 D9) D5) D9
type D2959 = :* (:* (:* D2 D9) D5) D9
type O5617 = :* (:* (:* D2 D9) D5) D9
type HB8E = :* (:* (:* D2 D9) D5) D8
type D2958 = :* (:* (:* D2 D9) D5) D8
type O5616 = :* (:* (:* D2 D9) D5) D8
type HB8D = :* (:* (:* D2 D9) D5) D7
type D2957 = :* (:* (:* D2 D9) D5) D7
type O5615 = :* (:* (:* D2 D9) D5) D7
type HB8C = :* (:* (:* D2 D9) D5) D6
type D2956 = :* (:* (:* D2 D9) D5) D6
type O5614 = :* (:* (:* D2 D9) D5) D6
type HB8B = :* (:* (:* D2 D9) D5) D5
type D2955 = :* (:* (:* D2 D9) D5) D5
type O5613 = :* (:* (:* D2 D9) D5) D5
type HB8A = :* (:* (:* D2 D9) D5) D4
type D2954 = :* (:* (:* D2 D9) D5) D4
type O5612 = :* (:* (:* D2 D9) D5) D4
type HB89 = :* (:* (:* D2 D9) D5) D3
type D2953 = :* (:* (:* D2 D9) D5) D3
type O5611 = :* (:* (:* D2 D9) D5) D3
type HB88 = :* (:* (:* D2 D9) D5) D2
type D2952 = :* (:* (:* D2 D9) D5) D2
type O5610 = :* (:* (:* D2 D9) D5) D2
type HB87 = :* (:* (:* D2 D9) D5) D1
type D2951 = :* (:* (:* D2 D9) D5) D1
type O5607 = :* (:* (:* D2 D9) D5) D1
type HB86 = :* (:* (:* D2 D9) D5) D0
type D2950 = :* (:* (:* D2 D9) D5) D0
type O5606 = :* (:* (:* D2 D9) D5) D0
type HB85 = :* (:* (:* D2 D9) D4) D9
type D2949 = :* (:* (:* D2 D9) D4) D9
type O5605 = :* (:* (:* D2 D9) D4) D9
type HB84 = :* (:* (:* D2 D9) D4) D8
type D2948 = :* (:* (:* D2 D9) D4) D8
type O5604 = :* (:* (:* D2 D9) D4) D8
type HB83 = :* (:* (:* D2 D9) D4) D7
type D2947 = :* (:* (:* D2 D9) D4) D7
type O5603 = :* (:* (:* D2 D9) D4) D7
type HB82 = :* (:* (:* D2 D9) D4) D6
type D2946 = :* (:* (:* D2 D9) D4) D6
type O5602 = :* (:* (:* D2 D9) D4) D6
type HB81 = :* (:* (:* D2 D9) D4) D5
type D2945 = :* (:* (:* D2 D9) D4) D5
type O5601 = :* (:* (:* D2 D9) D4) D5
type HB80 = :* (:* (:* D2 D9) D4) D4
type D2944 = :* (:* (:* D2 D9) D4) D4
type O5600 = :* (:* (:* D2 D9) D4) D4
type HB7F = :* (:* (:* D2 D9) D4) D3
type D2943 = :* (:* (:* D2 D9) D4) D3
type O5577 = :* (:* (:* D2 D9) D4) D3
type HB7E = :* (:* (:* D2 D9) D4) D2
type D2942 = :* (:* (:* D2 D9) D4) D2
type O5576 = :* (:* (:* D2 D9) D4) D2
type HB7D = :* (:* (:* D2 D9) D4) D1
type D2941 = :* (:* (:* D2 D9) D4) D1
type O5575 = :* (:* (:* D2 D9) D4) D1
type HB7C = :* (:* (:* D2 D9) D4) D0
type D2940 = :* (:* (:* D2 D9) D4) D0
type O5574 = :* (:* (:* D2 D9) D4) D0
type HB7B = :* (:* (:* D2 D9) D3) D9
type D2939 = :* (:* (:* D2 D9) D3) D9
type O5573 = :* (:* (:* D2 D9) D3) D9
type HB7A = :* (:* (:* D2 D9) D3) D8
type D2938 = :* (:* (:* D2 D9) D3) D8
type O5572 = :* (:* (:* D2 D9) D3) D8
type HB79 = :* (:* (:* D2 D9) D3) D7
type D2937 = :* (:* (:* D2 D9) D3) D7
type O5571 = :* (:* (:* D2 D9) D3) D7
type HB78 = :* (:* (:* D2 D9) D3) D6
type D2936 = :* (:* (:* D2 D9) D3) D6
type O5570 = :* (:* (:* D2 D9) D3) D6
type HB77 = :* (:* (:* D2 D9) D3) D5
type D2935 = :* (:* (:* D2 D9) D3) D5
type O5567 = :* (:* (:* D2 D9) D3) D5
type HB76 = :* (:* (:* D2 D9) D3) D4
type D2934 = :* (:* (:* D2 D9) D3) D4
type O5566 = :* (:* (:* D2 D9) D3) D4
type HB75 = :* (:* (:* D2 D9) D3) D3
type D2933 = :* (:* (:* D2 D9) D3) D3
type O5565 = :* (:* (:* D2 D9) D3) D3
type HB74 = :* (:* (:* D2 D9) D3) D2
type D2932 = :* (:* (:* D2 D9) D3) D2
type O5564 = :* (:* (:* D2 D9) D3) D2
type HB73 = :* (:* (:* D2 D9) D3) D1
type D2931 = :* (:* (:* D2 D9) D3) D1
type O5563 = :* (:* (:* D2 D9) D3) D1
type HB72 = :* (:* (:* D2 D9) D3) D0
type D2930 = :* (:* (:* D2 D9) D3) D0
type O5562 = :* (:* (:* D2 D9) D3) D0
type HB71 = :* (:* (:* D2 D9) D2) D9
type D2929 = :* (:* (:* D2 D9) D2) D9
type O5561 = :* (:* (:* D2 D9) D2) D9
type HB70 = :* (:* (:* D2 D9) D2) D8
type D2928 = :* (:* (:* D2 D9) D2) D8
type O5560 = :* (:* (:* D2 D9) D2) D8
type HB6F = :* (:* (:* D2 D9) D2) D7
type D2927 = :* (:* (:* D2 D9) D2) D7
type O5557 = :* (:* (:* D2 D9) D2) D7
type HB6E = :* (:* (:* D2 D9) D2) D6
type D2926 = :* (:* (:* D2 D9) D2) D6
type O5556 = :* (:* (:* D2 D9) D2) D6
type HB6D = :* (:* (:* D2 D9) D2) D5
type D2925 = :* (:* (:* D2 D9) D2) D5
type O5555 = :* (:* (:* D2 D9) D2) D5
type HB6C = :* (:* (:* D2 D9) D2) D4
type D2924 = :* (:* (:* D2 D9) D2) D4
type O5554 = :* (:* (:* D2 D9) D2) D4
type HB6B = :* (:* (:* D2 D9) D2) D3
type D2923 = :* (:* (:* D2 D9) D2) D3
type O5553 = :* (:* (:* D2 D9) D2) D3
type HB6A = :* (:* (:* D2 D9) D2) D2
type D2922 = :* (:* (:* D2 D9) D2) D2
type O5552 = :* (:* (:* D2 D9) D2) D2
type HB69 = :* (:* (:* D2 D9) D2) D1
type D2921 = :* (:* (:* D2 D9) D2) D1
type O5551 = :* (:* (:* D2 D9) D2) D1
type HB68 = :* (:* (:* D2 D9) D2) D0
type D2920 = :* (:* (:* D2 D9) D2) D0
type O5550 = :* (:* (:* D2 D9) D2) D0
type HB67 = :* (:* (:* D2 D9) D1) D9
type D2919 = :* (:* (:* D2 D9) D1) D9
type O5547 = :* (:* (:* D2 D9) D1) D9
type HB66 = :* (:* (:* D2 D9) D1) D8
type D2918 = :* (:* (:* D2 D9) D1) D8
type O5546 = :* (:* (:* D2 D9) D1) D8
type HB65 = :* (:* (:* D2 D9) D1) D7
type D2917 = :* (:* (:* D2 D9) D1) D7
type O5545 = :* (:* (:* D2 D9) D1) D7
type HB64 = :* (:* (:* D2 D9) D1) D6
type D2916 = :* (:* (:* D2 D9) D1) D6
type O5544 = :* (:* (:* D2 D9) D1) D6
type HB63 = :* (:* (:* D2 D9) D1) D5
type D2915 = :* (:* (:* D2 D9) D1) D5
type O5543 = :* (:* (:* D2 D9) D1) D5
type HB62 = :* (:* (:* D2 D9) D1) D4
type D2914 = :* (:* (:* D2 D9) D1) D4
type O5542 = :* (:* (:* D2 D9) D1) D4
type HB61 = :* (:* (:* D2 D9) D1) D3
type D2913 = :* (:* (:* D2 D9) D1) D3
type O5541 = :* (:* (:* D2 D9) D1) D3
type HB60 = :* (:* (:* D2 D9) D1) D2
type D2912 = :* (:* (:* D2 D9) D1) D2
type O5540 = :* (:* (:* D2 D9) D1) D2
type HB5F = :* (:* (:* D2 D9) D1) D1
type D2911 = :* (:* (:* D2 D9) D1) D1
type O5537 = :* (:* (:* D2 D9) D1) D1
type HB5E = :* (:* (:* D2 D9) D1) D0
type D2910 = :* (:* (:* D2 D9) D1) D0
type O5536 = :* (:* (:* D2 D9) D1) D0
type HB5D = :* (:* (:* D2 D9) D0) D9
type D2909 = :* (:* (:* D2 D9) D0) D9
type O5535 = :* (:* (:* D2 D9) D0) D9
type HB5C = :* (:* (:* D2 D9) D0) D8
type D2908 = :* (:* (:* D2 D9) D0) D8
type O5534 = :* (:* (:* D2 D9) D0) D8
type HB5B = :* (:* (:* D2 D9) D0) D7
type D2907 = :* (:* (:* D2 D9) D0) D7
type O5533 = :* (:* (:* D2 D9) D0) D7
type HB5A = :* (:* (:* D2 D9) D0) D6
type D2906 = :* (:* (:* D2 D9) D0) D6
type O5532 = :* (:* (:* D2 D9) D0) D6
type HB59 = :* (:* (:* D2 D9) D0) D5
type D2905 = :* (:* (:* D2 D9) D0) D5
type O5531 = :* (:* (:* D2 D9) D0) D5
type HB58 = :* (:* (:* D2 D9) D0) D4
type D2904 = :* (:* (:* D2 D9) D0) D4
type O5530 = :* (:* (:* D2 D9) D0) D4
type HB57 = :* (:* (:* D2 D9) D0) D3
type D2903 = :* (:* (:* D2 D9) D0) D3
type O5527 = :* (:* (:* D2 D9) D0) D3
type HB56 = :* (:* (:* D2 D9) D0) D2
type D2902 = :* (:* (:* D2 D9) D0) D2
type O5526 = :* (:* (:* D2 D9) D0) D2
type HB55 = :* (:* (:* D2 D9) D0) D1
type D2901 = :* (:* (:* D2 D9) D0) D1
type O5525 = :* (:* (:* D2 D9) D0) D1
type HB54 = :* (:* (:* D2 D9) D0) D0
type D2900 = :* (:* (:* D2 D9) D0) D0
type O5524 = :* (:* (:* D2 D9) D0) D0
type HB53 = :* (:* (:* D2 D8) D9) D9
type D2899 = :* (:* (:* D2 D8) D9) D9
type O5523 = :* (:* (:* D2 D8) D9) D9
type HB52 = :* (:* (:* D2 D8) D9) D8
type D2898 = :* (:* (:* D2 D8) D9) D8
type O5522 = :* (:* (:* D2 D8) D9) D8
type HB51 = :* (:* (:* D2 D8) D9) D7
type D2897 = :* (:* (:* D2 D8) D9) D7
type O5521 = :* (:* (:* D2 D8) D9) D7
type HB50 = :* (:* (:* D2 D8) D9) D6
type D2896 = :* (:* (:* D2 D8) D9) D6
type O5520 = :* (:* (:* D2 D8) D9) D6
type HB4F = :* (:* (:* D2 D8) D9) D5
type D2895 = :* (:* (:* D2 D8) D9) D5
type O5517 = :* (:* (:* D2 D8) D9) D5
type HB4E = :* (:* (:* D2 D8) D9) D4
type D2894 = :* (:* (:* D2 D8) D9) D4
type O5516 = :* (:* (:* D2 D8) D9) D4
type HB4D = :* (:* (:* D2 D8) D9) D3
type D2893 = :* (:* (:* D2 D8) D9) D3
type O5515 = :* (:* (:* D2 D8) D9) D3
type HB4C = :* (:* (:* D2 D8) D9) D2
type D2892 = :* (:* (:* D2 D8) D9) D2
type O5514 = :* (:* (:* D2 D8) D9) D2
type HB4B = :* (:* (:* D2 D8) D9) D1
type D2891 = :* (:* (:* D2 D8) D9) D1
type O5513 = :* (:* (:* D2 D8) D9) D1
type HB4A = :* (:* (:* D2 D8) D9) D0
type D2890 = :* (:* (:* D2 D8) D9) D0
type O5512 = :* (:* (:* D2 D8) D9) D0
type HB49 = :* (:* (:* D2 D8) D8) D9
type D2889 = :* (:* (:* D2 D8) D8) D9
type O5511 = :* (:* (:* D2 D8) D8) D9
type HB48 = :* (:* (:* D2 D8) D8) D8
type D2888 = :* (:* (:* D2 D8) D8) D8
type O5510 = :* (:* (:* D2 D8) D8) D8
type HB47 = :* (:* (:* D2 D8) D8) D7
type D2887 = :* (:* (:* D2 D8) D8) D7
type O5507 = :* (:* (:* D2 D8) D8) D7
type HB46 = :* (:* (:* D2 D8) D8) D6
type D2886 = :* (:* (:* D2 D8) D8) D6
type O5506 = :* (:* (:* D2 D8) D8) D6
type HB45 = :* (:* (:* D2 D8) D8) D5
type D2885 = :* (:* (:* D2 D8) D8) D5
type O5505 = :* (:* (:* D2 D8) D8) D5
type HB44 = :* (:* (:* D2 D8) D8) D4
type D2884 = :* (:* (:* D2 D8) D8) D4
type O5504 = :* (:* (:* D2 D8) D8) D4
type HB43 = :* (:* (:* D2 D8) D8) D3
type D2883 = :* (:* (:* D2 D8) D8) D3
type O5503 = :* (:* (:* D2 D8) D8) D3
type HB42 = :* (:* (:* D2 D8) D8) D2
type D2882 = :* (:* (:* D2 D8) D8) D2
type O5502 = :* (:* (:* D2 D8) D8) D2
type HB41 = :* (:* (:* D2 D8) D8) D1
type D2881 = :* (:* (:* D2 D8) D8) D1
type O5501 = :* (:* (:* D2 D8) D8) D1
type HB40 = :* (:* (:* D2 D8) D8) D0
type D2880 = :* (:* (:* D2 D8) D8) D0
type O5500 = :* (:* (:* D2 D8) D8) D0
type HB3F = :* (:* (:* D2 D8) D7) D9
type D2879 = :* (:* (:* D2 D8) D7) D9
type O5477 = :* (:* (:* D2 D8) D7) D9
type HB3E = :* (:* (:* D2 D8) D7) D8
type D2878 = :* (:* (:* D2 D8) D7) D8
type O5476 = :* (:* (:* D2 D8) D7) D8
type HB3D = :* (:* (:* D2 D8) D7) D7
type D2877 = :* (:* (:* D2 D8) D7) D7
type O5475 = :* (:* (:* D2 D8) D7) D7
type HB3C = :* (:* (:* D2 D8) D7) D6
type D2876 = :* (:* (:* D2 D8) D7) D6
type O5474 = :* (:* (:* D2 D8) D7) D6
type HB3B = :* (:* (:* D2 D8) D7) D5
type D2875 = :* (:* (:* D2 D8) D7) D5
type O5473 = :* (:* (:* D2 D8) D7) D5
type HB3A = :* (:* (:* D2 D8) D7) D4
type D2874 = :* (:* (:* D2 D8) D7) D4
type O5472 = :* (:* (:* D2 D8) D7) D4
type HB39 = :* (:* (:* D2 D8) D7) D3
type D2873 = :* (:* (:* D2 D8) D7) D3
type O5471 = :* (:* (:* D2 D8) D7) D3
type HB38 = :* (:* (:* D2 D8) D7) D2
type D2872 = :* (:* (:* D2 D8) D7) D2
type O5470 = :* (:* (:* D2 D8) D7) D2
type HB37 = :* (:* (:* D2 D8) D7) D1
type D2871 = :* (:* (:* D2 D8) D7) D1
type O5467 = :* (:* (:* D2 D8) D7) D1
type HB36 = :* (:* (:* D2 D8) D7) D0
type D2870 = :* (:* (:* D2 D8) D7) D0
type O5466 = :* (:* (:* D2 D8) D7) D0
type HB35 = :* (:* (:* D2 D8) D6) D9
type D2869 = :* (:* (:* D2 D8) D6) D9
type O5465 = :* (:* (:* D2 D8) D6) D9
type HB34 = :* (:* (:* D2 D8) D6) D8
type D2868 = :* (:* (:* D2 D8) D6) D8
type O5464 = :* (:* (:* D2 D8) D6) D8
type HB33 = :* (:* (:* D2 D8) D6) D7
type D2867 = :* (:* (:* D2 D8) D6) D7
type O5463 = :* (:* (:* D2 D8) D6) D7
type HB32 = :* (:* (:* D2 D8) D6) D6
type D2866 = :* (:* (:* D2 D8) D6) D6
type O5462 = :* (:* (:* D2 D8) D6) D6
type HB31 = :* (:* (:* D2 D8) D6) D5
type D2865 = :* (:* (:* D2 D8) D6) D5
type O5461 = :* (:* (:* D2 D8) D6) D5
type HB30 = :* (:* (:* D2 D8) D6) D4
type D2864 = :* (:* (:* D2 D8) D6) D4
type O5460 = :* (:* (:* D2 D8) D6) D4
type HB2F = :* (:* (:* D2 D8) D6) D3
type D2863 = :* (:* (:* D2 D8) D6) D3
type O5457 = :* (:* (:* D2 D8) D6) D3
type HB2E = :* (:* (:* D2 D8) D6) D2
type D2862 = :* (:* (:* D2 D8) D6) D2
type O5456 = :* (:* (:* D2 D8) D6) D2
type HB2D = :* (:* (:* D2 D8) D6) D1
type D2861 = :* (:* (:* D2 D8) D6) D1
type O5455 = :* (:* (:* D2 D8) D6) D1
type HB2C = :* (:* (:* D2 D8) D6) D0
type D2860 = :* (:* (:* D2 D8) D6) D0
type O5454 = :* (:* (:* D2 D8) D6) D0
type HB2B = :* (:* (:* D2 D8) D5) D9
type D2859 = :* (:* (:* D2 D8) D5) D9
type O5453 = :* (:* (:* D2 D8) D5) D9
type HB2A = :* (:* (:* D2 D8) D5) D8
type D2858 = :* (:* (:* D2 D8) D5) D8
type O5452 = :* (:* (:* D2 D8) D5) D8
type HB29 = :* (:* (:* D2 D8) D5) D7
type D2857 = :* (:* (:* D2 D8) D5) D7
type O5451 = :* (:* (:* D2 D8) D5) D7
type HB28 = :* (:* (:* D2 D8) D5) D6
type D2856 = :* (:* (:* D2 D8) D5) D6
type O5450 = :* (:* (:* D2 D8) D5) D6
type HB27 = :* (:* (:* D2 D8) D5) D5
type D2855 = :* (:* (:* D2 D8) D5) D5
type O5447 = :* (:* (:* D2 D8) D5) D5
type HB26 = :* (:* (:* D2 D8) D5) D4
type D2854 = :* (:* (:* D2 D8) D5) D4
type O5446 = :* (:* (:* D2 D8) D5) D4
type HB25 = :* (:* (:* D2 D8) D5) D3
type D2853 = :* (:* (:* D2 D8) D5) D3
type O5445 = :* (:* (:* D2 D8) D5) D3
type HB24 = :* (:* (:* D2 D8) D5) D2
type D2852 = :* (:* (:* D2 D8) D5) D2
type O5444 = :* (:* (:* D2 D8) D5) D2
type HB23 = :* (:* (:* D2 D8) D5) D1
type D2851 = :* (:* (:* D2 D8) D5) D1
type O5443 = :* (:* (:* D2 D8) D5) D1
type HB22 = :* (:* (:* D2 D8) D5) D0
type D2850 = :* (:* (:* D2 D8) D5) D0
type O5442 = :* (:* (:* D2 D8) D5) D0
type HB21 = :* (:* (:* D2 D8) D4) D9
type D2849 = :* (:* (:* D2 D8) D4) D9
type O5441 = :* (:* (:* D2 D8) D4) D9
type HB20 = :* (:* (:* D2 D8) D4) D8
type D2848 = :* (:* (:* D2 D8) D4) D8
type O5440 = :* (:* (:* D2 D8) D4) D8
type HB1F = :* (:* (:* D2 D8) D4) D7
type D2847 = :* (:* (:* D2 D8) D4) D7
type O5437 = :* (:* (:* D2 D8) D4) D7
type HB1E = :* (:* (:* D2 D8) D4) D6
type D2846 = :* (:* (:* D2 D8) D4) D6
type O5436 = :* (:* (:* D2 D8) D4) D6
type HB1D = :* (:* (:* D2 D8) D4) D5
type D2845 = :* (:* (:* D2 D8) D4) D5
type O5435 = :* (:* (:* D2 D8) D4) D5
type HB1C = :* (:* (:* D2 D8) D4) D4
type D2844 = :* (:* (:* D2 D8) D4) D4
type O5434 = :* (:* (:* D2 D8) D4) D4
type HB1B = :* (:* (:* D2 D8) D4) D3
type D2843 = :* (:* (:* D2 D8) D4) D3
type O5433 = :* (:* (:* D2 D8) D4) D3
type HB1A = :* (:* (:* D2 D8) D4) D2
type D2842 = :* (:* (:* D2 D8) D4) D2
type O5432 = :* (:* (:* D2 D8) D4) D2
type HB19 = :* (:* (:* D2 D8) D4) D1
type D2841 = :* (:* (:* D2 D8) D4) D1
type O5431 = :* (:* (:* D2 D8) D4) D1
type HB18 = :* (:* (:* D2 D8) D4) D0
type D2840 = :* (:* (:* D2 D8) D4) D0
type O5430 = :* (:* (:* D2 D8) D4) D0
type HB17 = :* (:* (:* D2 D8) D3) D9
type D2839 = :* (:* (:* D2 D8) D3) D9
type O5427 = :* (:* (:* D2 D8) D3) D9
type HB16 = :* (:* (:* D2 D8) D3) D8
type D2838 = :* (:* (:* D2 D8) D3) D8
type O5426 = :* (:* (:* D2 D8) D3) D8
type HB15 = :* (:* (:* D2 D8) D3) D7
type D2837 = :* (:* (:* D2 D8) D3) D7
type O5425 = :* (:* (:* D2 D8) D3) D7
type HB14 = :* (:* (:* D2 D8) D3) D6
type D2836 = :* (:* (:* D2 D8) D3) D6
type O5424 = :* (:* (:* D2 D8) D3) D6
type HB13 = :* (:* (:* D2 D8) D3) D5
type D2835 = :* (:* (:* D2 D8) D3) D5
type O5423 = :* (:* (:* D2 D8) D3) D5
type HB12 = :* (:* (:* D2 D8) D3) D4
type D2834 = :* (:* (:* D2 D8) D3) D4
type O5422 = :* (:* (:* D2 D8) D3) D4
type HB11 = :* (:* (:* D2 D8) D3) D3
type D2833 = :* (:* (:* D2 D8) D3) D3
type O5421 = :* (:* (:* D2 D8) D3) D3
type HB10 = :* (:* (:* D2 D8) D3) D2
type D2832 = :* (:* (:* D2 D8) D3) D2
type O5420 = :* (:* (:* D2 D8) D3) D2
type HB0F = :* (:* (:* D2 D8) D3) D1
type D2831 = :* (:* (:* D2 D8) D3) D1
type O5417 = :* (:* (:* D2 D8) D3) D1
type HB0E = :* (:* (:* D2 D8) D3) D0
type D2830 = :* (:* (:* D2 D8) D3) D0
type O5416 = :* (:* (:* D2 D8) D3) D0
type HB0D = :* (:* (:* D2 D8) D2) D9
type D2829 = :* (:* (:* D2 D8) D2) D9
type O5415 = :* (:* (:* D2 D8) D2) D9
type HB0C = :* (:* (:* D2 D8) D2) D8
type D2828 = :* (:* (:* D2 D8) D2) D8
type O5414 = :* (:* (:* D2 D8) D2) D8
type HB0B = :* (:* (:* D2 D8) D2) D7
type D2827 = :* (:* (:* D2 D8) D2) D7
type O5413 = :* (:* (:* D2 D8) D2) D7
type HB0A = :* (:* (:* D2 D8) D2) D6
type D2826 = :* (:* (:* D2 D8) D2) D6
type O5412 = :* (:* (:* D2 D8) D2) D6
type HB09 = :* (:* (:* D2 D8) D2) D5
type D2825 = :* (:* (:* D2 D8) D2) D5
type O5411 = :* (:* (:* D2 D8) D2) D5
type HB08 = :* (:* (:* D2 D8) D2) D4
type D2824 = :* (:* (:* D2 D8) D2) D4
type O5410 = :* (:* (:* D2 D8) D2) D4
type HB07 = :* (:* (:* D2 D8) D2) D3
type D2823 = :* (:* (:* D2 D8) D2) D3
type O5407 = :* (:* (:* D2 D8) D2) D3
type HB06 = :* (:* (:* D2 D8) D2) D2
type D2822 = :* (:* (:* D2 D8) D2) D2
type O5406 = :* (:* (:* D2 D8) D2) D2
type HB05 = :* (:* (:* D2 D8) D2) D1
type D2821 = :* (:* (:* D2 D8) D2) D1
type O5405 = :* (:* (:* D2 D8) D2) D1
type HB04 = :* (:* (:* D2 D8) D2) D0
type D2820 = :* (:* (:* D2 D8) D2) D0
type O5404 = :* (:* (:* D2 D8) D2) D0
type HB03 = :* (:* (:* D2 D8) D1) D9
type D2819 = :* (:* (:* D2 D8) D1) D9
type O5403 = :* (:* (:* D2 D8) D1) D9
type HB02 = :* (:* (:* D2 D8) D1) D8
type D2818 = :* (:* (:* D2 D8) D1) D8
type O5402 = :* (:* (:* D2 D8) D1) D8
type HB01 = :* (:* (:* D2 D8) D1) D7
type D2817 = :* (:* (:* D2 D8) D1) D7
type O5401 = :* (:* (:* D2 D8) D1) D7
type HB00 = :* (:* (:* D2 D8) D1) D6
type D2816 = :* (:* (:* D2 D8) D1) D6
type O5400 = :* (:* (:* D2 D8) D1) D6
type HAFF = :* (:* (:* D2 D8) D1) D5
type D2815 = :* (:* (:* D2 D8) D1) D5
type O5377 = :* (:* (:* D2 D8) D1) D5
type HAFE = :* (:* (:* D2 D8) D1) D4
type D2814 = :* (:* (:* D2 D8) D1) D4
type O5376 = :* (:* (:* D2 D8) D1) D4
type HAFD = :* (:* (:* D2 D8) D1) D3
type D2813 = :* (:* (:* D2 D8) D1) D3
type O5375 = :* (:* (:* D2 D8) D1) D3
type HAFC = :* (:* (:* D2 D8) D1) D2
type D2812 = :* (:* (:* D2 D8) D1) D2
type O5374 = :* (:* (:* D2 D8) D1) D2
type HAFB = :* (:* (:* D2 D8) D1) D1
type D2811 = :* (:* (:* D2 D8) D1) D1
type O5373 = :* (:* (:* D2 D8) D1) D1
type HAFA = :* (:* (:* D2 D8) D1) D0
type D2810 = :* (:* (:* D2 D8) D1) D0
type O5372 = :* (:* (:* D2 D8) D1) D0
type HAF9 = :* (:* (:* D2 D8) D0) D9
type D2809 = :* (:* (:* D2 D8) D0) D9
type O5371 = :* (:* (:* D2 D8) D0) D9
type HAF8 = :* (:* (:* D2 D8) D0) D8
type D2808 = :* (:* (:* D2 D8) D0) D8
type O5370 = :* (:* (:* D2 D8) D0) D8
type HAF7 = :* (:* (:* D2 D8) D0) D7
type D2807 = :* (:* (:* D2 D8) D0) D7
type O5367 = :* (:* (:* D2 D8) D0) D7
type HAF6 = :* (:* (:* D2 D8) D0) D6
type D2806 = :* (:* (:* D2 D8) D0) D6
type O5366 = :* (:* (:* D2 D8) D0) D6
type HAF5 = :* (:* (:* D2 D8) D0) D5
type D2805 = :* (:* (:* D2 D8) D0) D5
type O5365 = :* (:* (:* D2 D8) D0) D5
type HAF4 = :* (:* (:* D2 D8) D0) D4
type D2804 = :* (:* (:* D2 D8) D0) D4
type O5364 = :* (:* (:* D2 D8) D0) D4
type HAF3 = :* (:* (:* D2 D8) D0) D3
type D2803 = :* (:* (:* D2 D8) D0) D3
type O5363 = :* (:* (:* D2 D8) D0) D3
type HAF2 = :* (:* (:* D2 D8) D0) D2
type D2802 = :* (:* (:* D2 D8) D0) D2
type O5362 = :* (:* (:* D2 D8) D0) D2
type HAF1 = :* (:* (:* D2 D8) D0) D1
type D2801 = :* (:* (:* D2 D8) D0) D1
type O5361 = :* (:* (:* D2 D8) D0) D1
type HAF0 = :* (:* (:* D2 D8) D0) D0
type D2800 = :* (:* (:* D2 D8) D0) D0
type O5360 = :* (:* (:* D2 D8) D0) D0
type HAEF = :* (:* (:* D2 D7) D9) D9
type D2799 = :* (:* (:* D2 D7) D9) D9
type O5357 = :* (:* (:* D2 D7) D9) D9
type HAEE = :* (:* (:* D2 D7) D9) D8
type D2798 = :* (:* (:* D2 D7) D9) D8
type O5356 = :* (:* (:* D2 D7) D9) D8
type HAED = :* (:* (:* D2 D7) D9) D7
type D2797 = :* (:* (:* D2 D7) D9) D7
type O5355 = :* (:* (:* D2 D7) D9) D7
type HAEC = :* (:* (:* D2 D7) D9) D6
type D2796 = :* (:* (:* D2 D7) D9) D6
type O5354 = :* (:* (:* D2 D7) D9) D6
type HAEB = :* (:* (:* D2 D7) D9) D5
type D2795 = :* (:* (:* D2 D7) D9) D5
type O5353 = :* (:* (:* D2 D7) D9) D5
type HAEA = :* (:* (:* D2 D7) D9) D4
type D2794 = :* (:* (:* D2 D7) D9) D4
type O5352 = :* (:* (:* D2 D7) D9) D4
type HAE9 = :* (:* (:* D2 D7) D9) D3
type D2793 = :* (:* (:* D2 D7) D9) D3
type O5351 = :* (:* (:* D2 D7) D9) D3
type HAE8 = :* (:* (:* D2 D7) D9) D2
type D2792 = :* (:* (:* D2 D7) D9) D2
type O5350 = :* (:* (:* D2 D7) D9) D2
type HAE7 = :* (:* (:* D2 D7) D9) D1
type D2791 = :* (:* (:* D2 D7) D9) D1
type O5347 = :* (:* (:* D2 D7) D9) D1
type HAE6 = :* (:* (:* D2 D7) D9) D0
type D2790 = :* (:* (:* D2 D7) D9) D0
type O5346 = :* (:* (:* D2 D7) D9) D0
type HAE5 = :* (:* (:* D2 D7) D8) D9
type D2789 = :* (:* (:* D2 D7) D8) D9
type O5345 = :* (:* (:* D2 D7) D8) D9
type HAE4 = :* (:* (:* D2 D7) D8) D8
type D2788 = :* (:* (:* D2 D7) D8) D8
type O5344 = :* (:* (:* D2 D7) D8) D8
type HAE3 = :* (:* (:* D2 D7) D8) D7
type D2787 = :* (:* (:* D2 D7) D8) D7
type O5343 = :* (:* (:* D2 D7) D8) D7
type HAE2 = :* (:* (:* D2 D7) D8) D6
type D2786 = :* (:* (:* D2 D7) D8) D6
type O5342 = :* (:* (:* D2 D7) D8) D6
type HAE1 = :* (:* (:* D2 D7) D8) D5
type D2785 = :* (:* (:* D2 D7) D8) D5
type O5341 = :* (:* (:* D2 D7) D8) D5
type HAE0 = :* (:* (:* D2 D7) D8) D4
type D2784 = :* (:* (:* D2 D7) D8) D4
type O5340 = :* (:* (:* D2 D7) D8) D4
type HADF = :* (:* (:* D2 D7) D8) D3
type D2783 = :* (:* (:* D2 D7) D8) D3
type O5337 = :* (:* (:* D2 D7) D8) D3
type HADE = :* (:* (:* D2 D7) D8) D2
type D2782 = :* (:* (:* D2 D7) D8) D2
type O5336 = :* (:* (:* D2 D7) D8) D2
type HADD = :* (:* (:* D2 D7) D8) D1
type D2781 = :* (:* (:* D2 D7) D8) D1
type O5335 = :* (:* (:* D2 D7) D8) D1
type HADC = :* (:* (:* D2 D7) D8) D0
type D2780 = :* (:* (:* D2 D7) D8) D0
type O5334 = :* (:* (:* D2 D7) D8) D0
type HADB = :* (:* (:* D2 D7) D7) D9
type D2779 = :* (:* (:* D2 D7) D7) D9
type O5333 = :* (:* (:* D2 D7) D7) D9
type HADA = :* (:* (:* D2 D7) D7) D8
type D2778 = :* (:* (:* D2 D7) D7) D8
type O5332 = :* (:* (:* D2 D7) D7) D8
type HAD9 = :* (:* (:* D2 D7) D7) D7
type D2777 = :* (:* (:* D2 D7) D7) D7
type O5331 = :* (:* (:* D2 D7) D7) D7
type HAD8 = :* (:* (:* D2 D7) D7) D6
type D2776 = :* (:* (:* D2 D7) D7) D6
type O5330 = :* (:* (:* D2 D7) D7) D6
type HAD7 = :* (:* (:* D2 D7) D7) D5
type D2775 = :* (:* (:* D2 D7) D7) D5
type O5327 = :* (:* (:* D2 D7) D7) D5
type HAD6 = :* (:* (:* D2 D7) D7) D4
type D2774 = :* (:* (:* D2 D7) D7) D4
type O5326 = :* (:* (:* D2 D7) D7) D4
type HAD5 = :* (:* (:* D2 D7) D7) D3
type D2773 = :* (:* (:* D2 D7) D7) D3
type O5325 = :* (:* (:* D2 D7) D7) D3
type HAD4 = :* (:* (:* D2 D7) D7) D2
type D2772 = :* (:* (:* D2 D7) D7) D2
type O5324 = :* (:* (:* D2 D7) D7) D2
type HAD3 = :* (:* (:* D2 D7) D7) D1
type D2771 = :* (:* (:* D2 D7) D7) D1
type O5323 = :* (:* (:* D2 D7) D7) D1
type HAD2 = :* (:* (:* D2 D7) D7) D0
type D2770 = :* (:* (:* D2 D7) D7) D0
type O5322 = :* (:* (:* D2 D7) D7) D0
type HAD1 = :* (:* (:* D2 D7) D6) D9
type D2769 = :* (:* (:* D2 D7) D6) D9
type O5321 = :* (:* (:* D2 D7) D6) D9
type HAD0 = :* (:* (:* D2 D7) D6) D8
type D2768 = :* (:* (:* D2 D7) D6) D8
type O5320 = :* (:* (:* D2 D7) D6) D8
type HACF = :* (:* (:* D2 D7) D6) D7
type D2767 = :* (:* (:* D2 D7) D6) D7
type O5317 = :* (:* (:* D2 D7) D6) D7
type HACE = :* (:* (:* D2 D7) D6) D6
type D2766 = :* (:* (:* D2 D7) D6) D6
type O5316 = :* (:* (:* D2 D7) D6) D6
type HACD = :* (:* (:* D2 D7) D6) D5
type D2765 = :* (:* (:* D2 D7) D6) D5
type O5315 = :* (:* (:* D2 D7) D6) D5
type HACC = :* (:* (:* D2 D7) D6) D4
type D2764 = :* (:* (:* D2 D7) D6) D4
type O5314 = :* (:* (:* D2 D7) D6) D4
type HACB = :* (:* (:* D2 D7) D6) D3
type D2763 = :* (:* (:* D2 D7) D6) D3
type O5313 = :* (:* (:* D2 D7) D6) D3
type HACA = :* (:* (:* D2 D7) D6) D2
type D2762 = :* (:* (:* D2 D7) D6) D2
type O5312 = :* (:* (:* D2 D7) D6) D2
type HAC9 = :* (:* (:* D2 D7) D6) D1
type D2761 = :* (:* (:* D2 D7) D6) D1
type O5311 = :* (:* (:* D2 D7) D6) D1
type HAC8 = :* (:* (:* D2 D7) D6) D0
type D2760 = :* (:* (:* D2 D7) D6) D0
type O5310 = :* (:* (:* D2 D7) D6) D0
type HAC7 = :* (:* (:* D2 D7) D5) D9
type D2759 = :* (:* (:* D2 D7) D5) D9
type O5307 = :* (:* (:* D2 D7) D5) D9
type HAC6 = :* (:* (:* D2 D7) D5) D8
type D2758 = :* (:* (:* D2 D7) D5) D8
type O5306 = :* (:* (:* D2 D7) D5) D8
type HAC5 = :* (:* (:* D2 D7) D5) D7
type D2757 = :* (:* (:* D2 D7) D5) D7
type O5305 = :* (:* (:* D2 D7) D5) D7
type HAC4 = :* (:* (:* D2 D7) D5) D6
type D2756 = :* (:* (:* D2 D7) D5) D6
type O5304 = :* (:* (:* D2 D7) D5) D6
type HAC3 = :* (:* (:* D2 D7) D5) D5
type D2755 = :* (:* (:* D2 D7) D5) D5
type O5303 = :* (:* (:* D2 D7) D5) D5
type HAC2 = :* (:* (:* D2 D7) D5) D4
type D2754 = :* (:* (:* D2 D7) D5) D4
type O5302 = :* (:* (:* D2 D7) D5) D4
type HAC1 = :* (:* (:* D2 D7) D5) D3
type D2753 = :* (:* (:* D2 D7) D5) D3
type O5301 = :* (:* (:* D2 D7) D5) D3
type HAC0 = :* (:* (:* D2 D7) D5) D2
type D2752 = :* (:* (:* D2 D7) D5) D2
type O5300 = :* (:* (:* D2 D7) D5) D2
type HABF = :* (:* (:* D2 D7) D5) D1
type D2751 = :* (:* (:* D2 D7) D5) D1
type O5277 = :* (:* (:* D2 D7) D5) D1
type HABE = :* (:* (:* D2 D7) D5) D0
type D2750 = :* (:* (:* D2 D7) D5) D0
type O5276 = :* (:* (:* D2 D7) D5) D0
type HABD = :* (:* (:* D2 D7) D4) D9
type D2749 = :* (:* (:* D2 D7) D4) D9
type O5275 = :* (:* (:* D2 D7) D4) D9
type HABC = :* (:* (:* D2 D7) D4) D8
type D2748 = :* (:* (:* D2 D7) D4) D8
type O5274 = :* (:* (:* D2 D7) D4) D8
type HABB = :* (:* (:* D2 D7) D4) D7
type D2747 = :* (:* (:* D2 D7) D4) D7
type O5273 = :* (:* (:* D2 D7) D4) D7
type HABA = :* (:* (:* D2 D7) D4) D6
type D2746 = :* (:* (:* D2 D7) D4) D6
type O5272 = :* (:* (:* D2 D7) D4) D6
type HAB9 = :* (:* (:* D2 D7) D4) D5
type D2745 = :* (:* (:* D2 D7) D4) D5
type O5271 = :* (:* (:* D2 D7) D4) D5
type HAB8 = :* (:* (:* D2 D7) D4) D4
type D2744 = :* (:* (:* D2 D7) D4) D4
type O5270 = :* (:* (:* D2 D7) D4) D4
type HAB7 = :* (:* (:* D2 D7) D4) D3
type D2743 = :* (:* (:* D2 D7) D4) D3
type O5267 = :* (:* (:* D2 D7) D4) D3
type HAB6 = :* (:* (:* D2 D7) D4) D2
type D2742 = :* (:* (:* D2 D7) D4) D2
type O5266 = :* (:* (:* D2 D7) D4) D2
type HAB5 = :* (:* (:* D2 D7) D4) D1
type D2741 = :* (:* (:* D2 D7) D4) D1
type O5265 = :* (:* (:* D2 D7) D4) D1
type HAB4 = :* (:* (:* D2 D7) D4) D0
type D2740 = :* (:* (:* D2 D7) D4) D0
type O5264 = :* (:* (:* D2 D7) D4) D0
type HAB3 = :* (:* (:* D2 D7) D3) D9
type D2739 = :* (:* (:* D2 D7) D3) D9
type O5263 = :* (:* (:* D2 D7) D3) D9
type HAB2 = :* (:* (:* D2 D7) D3) D8
type D2738 = :* (:* (:* D2 D7) D3) D8
type O5262 = :* (:* (:* D2 D7) D3) D8
type HAB1 = :* (:* (:* D2 D7) D3) D7
type D2737 = :* (:* (:* D2 D7) D3) D7
type O5261 = :* (:* (:* D2 D7) D3) D7
type HAB0 = :* (:* (:* D2 D7) D3) D6
type D2736 = :* (:* (:* D2 D7) D3) D6
type O5260 = :* (:* (:* D2 D7) D3) D6
type HAAF = :* (:* (:* D2 D7) D3) D5
type D2735 = :* (:* (:* D2 D7) D3) D5
type O5257 = :* (:* (:* D2 D7) D3) D5
type HAAE = :* (:* (:* D2 D7) D3) D4
type D2734 = :* (:* (:* D2 D7) D3) D4
type O5256 = :* (:* (:* D2 D7) D3) D4
type HAAD = :* (:* (:* D2 D7) D3) D3
type D2733 = :* (:* (:* D2 D7) D3) D3
type O5255 = :* (:* (:* D2 D7) D3) D3
type HAAC = :* (:* (:* D2 D7) D3) D2
type D2732 = :* (:* (:* D2 D7) D3) D2
type O5254 = :* (:* (:* D2 D7) D3) D2
type HAAB = :* (:* (:* D2 D7) D3) D1
type D2731 = :* (:* (:* D2 D7) D3) D1
type O5253 = :* (:* (:* D2 D7) D3) D1
type HAAA = :* (:* (:* D2 D7) D3) D0
type D2730 = :* (:* (:* D2 D7) D3) D0
type O5252 = :* (:* (:* D2 D7) D3) D0
type HAA9 = :* (:* (:* D2 D7) D2) D9
type D2729 = :* (:* (:* D2 D7) D2) D9
type O5251 = :* (:* (:* D2 D7) D2) D9
type HAA8 = :* (:* (:* D2 D7) D2) D8
type D2728 = :* (:* (:* D2 D7) D2) D8
type O5250 = :* (:* (:* D2 D7) D2) D8
type HAA7 = :* (:* (:* D2 D7) D2) D7
type D2727 = :* (:* (:* D2 D7) D2) D7
type O5247 = :* (:* (:* D2 D7) D2) D7
type HAA6 = :* (:* (:* D2 D7) D2) D6
type D2726 = :* (:* (:* D2 D7) D2) D6
type O5246 = :* (:* (:* D2 D7) D2) D6
type HAA5 = :* (:* (:* D2 D7) D2) D5
type D2725 = :* (:* (:* D2 D7) D2) D5
type O5245 = :* (:* (:* D2 D7) D2) D5
type HAA4 = :* (:* (:* D2 D7) D2) D4
type D2724 = :* (:* (:* D2 D7) D2) D4
type O5244 = :* (:* (:* D2 D7) D2) D4
type HAA3 = :* (:* (:* D2 D7) D2) D3
type D2723 = :* (:* (:* D2 D7) D2) D3
type O5243 = :* (:* (:* D2 D7) D2) D3
type HAA2 = :* (:* (:* D2 D7) D2) D2
type D2722 = :* (:* (:* D2 D7) D2) D2
type O5242 = :* (:* (:* D2 D7) D2) D2
type HAA1 = :* (:* (:* D2 D7) D2) D1
type D2721 = :* (:* (:* D2 D7) D2) D1
type O5241 = :* (:* (:* D2 D7) D2) D1
type HAA0 = :* (:* (:* D2 D7) D2) D0
type D2720 = :* (:* (:* D2 D7) D2) D0
type O5240 = :* (:* (:* D2 D7) D2) D0
type HA9F = :* (:* (:* D2 D7) D1) D9
type D2719 = :* (:* (:* D2 D7) D1) D9
type O5237 = :* (:* (:* D2 D7) D1) D9
type HA9E = :* (:* (:* D2 D7) D1) D8
type D2718 = :* (:* (:* D2 D7) D1) D8
type O5236 = :* (:* (:* D2 D7) D1) D8
type HA9D = :* (:* (:* D2 D7) D1) D7
type D2717 = :* (:* (:* D2 D7) D1) D7
type O5235 = :* (:* (:* D2 D7) D1) D7
type HA9C = :* (:* (:* D2 D7) D1) D6
type D2716 = :* (:* (:* D2 D7) D1) D6
type O5234 = :* (:* (:* D2 D7) D1) D6
type HA9B = :* (:* (:* D2 D7) D1) D5
type D2715 = :* (:* (:* D2 D7) D1) D5
type O5233 = :* (:* (:* D2 D7) D1) D5
type HA9A = :* (:* (:* D2 D7) D1) D4
type D2714 = :* (:* (:* D2 D7) D1) D4
type O5232 = :* (:* (:* D2 D7) D1) D4
type HA99 = :* (:* (:* D2 D7) D1) D3
type D2713 = :* (:* (:* D2 D7) D1) D3
type O5231 = :* (:* (:* D2 D7) D1) D3
type HA98 = :* (:* (:* D2 D7) D1) D2
type D2712 = :* (:* (:* D2 D7) D1) D2
type O5230 = :* (:* (:* D2 D7) D1) D2
type HA97 = :* (:* (:* D2 D7) D1) D1
type D2711 = :* (:* (:* D2 D7) D1) D1
type O5227 = :* (:* (:* D2 D7) D1) D1
type HA96 = :* (:* (:* D2 D7) D1) D0
type D2710 = :* (:* (:* D2 D7) D1) D0
type O5226 = :* (:* (:* D2 D7) D1) D0
type HA95 = :* (:* (:* D2 D7) D0) D9
type D2709 = :* (:* (:* D2 D7) D0) D9
type O5225 = :* (:* (:* D2 D7) D0) D9
type HA94 = :* (:* (:* D2 D7) D0) D8
type D2708 = :* (:* (:* D2 D7) D0) D8
type O5224 = :* (:* (:* D2 D7) D0) D8
type HA93 = :* (:* (:* D2 D7) D0) D7
type D2707 = :* (:* (:* D2 D7) D0) D7
type O5223 = :* (:* (:* D2 D7) D0) D7
type HA92 = :* (:* (:* D2 D7) D0) D6
type D2706 = :* (:* (:* D2 D7) D0) D6
type O5222 = :* (:* (:* D2 D7) D0) D6
type HA91 = :* (:* (:* D2 D7) D0) D5
type D2705 = :* (:* (:* D2 D7) D0) D5
type O5221 = :* (:* (:* D2 D7) D0) D5
type HA90 = :* (:* (:* D2 D7) D0) D4
type D2704 = :* (:* (:* D2 D7) D0) D4
type O5220 = :* (:* (:* D2 D7) D0) D4
type HA8F = :* (:* (:* D2 D7) D0) D3
type D2703 = :* (:* (:* D2 D7) D0) D3
type O5217 = :* (:* (:* D2 D7) D0) D3
type HA8E = :* (:* (:* D2 D7) D0) D2
type D2702 = :* (:* (:* D2 D7) D0) D2
type O5216 = :* (:* (:* D2 D7) D0) D2
type HA8D = :* (:* (:* D2 D7) D0) D1
type D2701 = :* (:* (:* D2 D7) D0) D1
type O5215 = :* (:* (:* D2 D7) D0) D1
type HA8C = :* (:* (:* D2 D7) D0) D0
type D2700 = :* (:* (:* D2 D7) D0) D0
type O5214 = :* (:* (:* D2 D7) D0) D0
type HA8B = :* (:* (:* D2 D6) D9) D9
type D2699 = :* (:* (:* D2 D6) D9) D9
type O5213 = :* (:* (:* D2 D6) D9) D9
type HA8A = :* (:* (:* D2 D6) D9) D8
type D2698 = :* (:* (:* D2 D6) D9) D8
type O5212 = :* (:* (:* D2 D6) D9) D8
type HA89 = :* (:* (:* D2 D6) D9) D7
type D2697 = :* (:* (:* D2 D6) D9) D7
type O5211 = :* (:* (:* D2 D6) D9) D7
type HA88 = :* (:* (:* D2 D6) D9) D6
type D2696 = :* (:* (:* D2 D6) D9) D6
type O5210 = :* (:* (:* D2 D6) D9) D6
type HA87 = :* (:* (:* D2 D6) D9) D5
type D2695 = :* (:* (:* D2 D6) D9) D5
type O5207 = :* (:* (:* D2 D6) D9) D5
type HA86 = :* (:* (:* D2 D6) D9) D4
type D2694 = :* (:* (:* D2 D6) D9) D4
type O5206 = :* (:* (:* D2 D6) D9) D4
type HA85 = :* (:* (:* D2 D6) D9) D3
type D2693 = :* (:* (:* D2 D6) D9) D3
type O5205 = :* (:* (:* D2 D6) D9) D3
type HA84 = :* (:* (:* D2 D6) D9) D2
type D2692 = :* (:* (:* D2 D6) D9) D2
type O5204 = :* (:* (:* D2 D6) D9) D2
type HA83 = :* (:* (:* D2 D6) D9) D1
type D2691 = :* (:* (:* D2 D6) D9) D1
type O5203 = :* (:* (:* D2 D6) D9) D1
type HA82 = :* (:* (:* D2 D6) D9) D0
type D2690 = :* (:* (:* D2 D6) D9) D0
type O5202 = :* (:* (:* D2 D6) D9) D0
type HA81 = :* (:* (:* D2 D6) D8) D9
type D2689 = :* (:* (:* D2 D6) D8) D9
type O5201 = :* (:* (:* D2 D6) D8) D9
type HA80 = :* (:* (:* D2 D6) D8) D8
type D2688 = :* (:* (:* D2 D6) D8) D8
type O5200 = :* (:* (:* D2 D6) D8) D8
type HA7F = :* (:* (:* D2 D6) D8) D7
type D2687 = :* (:* (:* D2 D6) D8) D7
type O5177 = :* (:* (:* D2 D6) D8) D7
type HA7E = :* (:* (:* D2 D6) D8) D6
type D2686 = :* (:* (:* D2 D6) D8) D6
type O5176 = :* (:* (:* D2 D6) D8) D6
type HA7D = :* (:* (:* D2 D6) D8) D5
type D2685 = :* (:* (:* D2 D6) D8) D5
type O5175 = :* (:* (:* D2 D6) D8) D5
type HA7C = :* (:* (:* D2 D6) D8) D4
type D2684 = :* (:* (:* D2 D6) D8) D4
type O5174 = :* (:* (:* D2 D6) D8) D4
type HA7B = :* (:* (:* D2 D6) D8) D3
type D2683 = :* (:* (:* D2 D6) D8) D3
type O5173 = :* (:* (:* D2 D6) D8) D3
type HA7A = :* (:* (:* D2 D6) D8) D2
type D2682 = :* (:* (:* D2 D6) D8) D2
type O5172 = :* (:* (:* D2 D6) D8) D2
type HA79 = :* (:* (:* D2 D6) D8) D1
type D2681 = :* (:* (:* D2 D6) D8) D1
type O5171 = :* (:* (:* D2 D6) D8) D1
type HA78 = :* (:* (:* D2 D6) D8) D0
type D2680 = :* (:* (:* D2 D6) D8) D0
type O5170 = :* (:* (:* D2 D6) D8) D0
type HA77 = :* (:* (:* D2 D6) D7) D9
type D2679 = :* (:* (:* D2 D6) D7) D9
type O5167 = :* (:* (:* D2 D6) D7) D9
type HA76 = :* (:* (:* D2 D6) D7) D8
type D2678 = :* (:* (:* D2 D6) D7) D8
type O5166 = :* (:* (:* D2 D6) D7) D8
type HA75 = :* (:* (:* D2 D6) D7) D7
type D2677 = :* (:* (:* D2 D6) D7) D7
type O5165 = :* (:* (:* D2 D6) D7) D7
type HA74 = :* (:* (:* D2 D6) D7) D6
type D2676 = :* (:* (:* D2 D6) D7) D6
type O5164 = :* (:* (:* D2 D6) D7) D6
type HA73 = :* (:* (:* D2 D6) D7) D5
type D2675 = :* (:* (:* D2 D6) D7) D5
type O5163 = :* (:* (:* D2 D6) D7) D5
type HA72 = :* (:* (:* D2 D6) D7) D4
type D2674 = :* (:* (:* D2 D6) D7) D4
type O5162 = :* (:* (:* D2 D6) D7) D4
type HA71 = :* (:* (:* D2 D6) D7) D3
type D2673 = :* (:* (:* D2 D6) D7) D3
type O5161 = :* (:* (:* D2 D6) D7) D3
type HA70 = :* (:* (:* D2 D6) D7) D2
type D2672 = :* (:* (:* D2 D6) D7) D2
type O5160 = :* (:* (:* D2 D6) D7) D2
type HA6F = :* (:* (:* D2 D6) D7) D1
type D2671 = :* (:* (:* D2 D6) D7) D1
type O5157 = :* (:* (:* D2 D6) D7) D1
type HA6E = :* (:* (:* D2 D6) D7) D0
type D2670 = :* (:* (:* D2 D6) D7) D0
type O5156 = :* (:* (:* D2 D6) D7) D0
type HA6D = :* (:* (:* D2 D6) D6) D9
type D2669 = :* (:* (:* D2 D6) D6) D9
type O5155 = :* (:* (:* D2 D6) D6) D9
type HA6C = :* (:* (:* D2 D6) D6) D8
type D2668 = :* (:* (:* D2 D6) D6) D8
type O5154 = :* (:* (:* D2 D6) D6) D8
type HA6B = :* (:* (:* D2 D6) D6) D7
type D2667 = :* (:* (:* D2 D6) D6) D7
type O5153 = :* (:* (:* D2 D6) D6) D7
type HA6A = :* (:* (:* D2 D6) D6) D6
type D2666 = :* (:* (:* D2 D6) D6) D6
type O5152 = :* (:* (:* D2 D6) D6) D6
type HA69 = :* (:* (:* D2 D6) D6) D5
type D2665 = :* (:* (:* D2 D6) D6) D5
type O5151 = :* (:* (:* D2 D6) D6) D5
type HA68 = :* (:* (:* D2 D6) D6) D4
type D2664 = :* (:* (:* D2 D6) D6) D4
type O5150 = :* (:* (:* D2 D6) D6) D4
type HA67 = :* (:* (:* D2 D6) D6) D3
type D2663 = :* (:* (:* D2 D6) D6) D3
type O5147 = :* (:* (:* D2 D6) D6) D3
type HA66 = :* (:* (:* D2 D6) D6) D2
type D2662 = :* (:* (:* D2 D6) D6) D2
type O5146 = :* (:* (:* D2 D6) D6) D2
type HA65 = :* (:* (:* D2 D6) D6) D1
type D2661 = :* (:* (:* D2 D6) D6) D1
type O5145 = :* (:* (:* D2 D6) D6) D1
type HA64 = :* (:* (:* D2 D6) D6) D0
type D2660 = :* (:* (:* D2 D6) D6) D0
type O5144 = :* (:* (:* D2 D6) D6) D0
type HA63 = :* (:* (:* D2 D6) D5) D9
type D2659 = :* (:* (:* D2 D6) D5) D9
type O5143 = :* (:* (:* D2 D6) D5) D9
type HA62 = :* (:* (:* D2 D6) D5) D8
type D2658 = :* (:* (:* D2 D6) D5) D8
type O5142 = :* (:* (:* D2 D6) D5) D8
type HA61 = :* (:* (:* D2 D6) D5) D7
type D2657 = :* (:* (:* D2 D6) D5) D7
type O5141 = :* (:* (:* D2 D6) D5) D7
type HA60 = :* (:* (:* D2 D6) D5) D6
type D2656 = :* (:* (:* D2 D6) D5) D6
type O5140 = :* (:* (:* D2 D6) D5) D6
type HA5F = :* (:* (:* D2 D6) D5) D5
type D2655 = :* (:* (:* D2 D6) D5) D5
type O5137 = :* (:* (:* D2 D6) D5) D5
type HA5E = :* (:* (:* D2 D6) D5) D4
type D2654 = :* (:* (:* D2 D6) D5) D4
type O5136 = :* (:* (:* D2 D6) D5) D4
type HA5D = :* (:* (:* D2 D6) D5) D3
type D2653 = :* (:* (:* D2 D6) D5) D3
type O5135 = :* (:* (:* D2 D6) D5) D3
type HA5C = :* (:* (:* D2 D6) D5) D2
type D2652 = :* (:* (:* D2 D6) D5) D2
type O5134 = :* (:* (:* D2 D6) D5) D2
type HA5B = :* (:* (:* D2 D6) D5) D1
type D2651 = :* (:* (:* D2 D6) D5) D1
type O5133 = :* (:* (:* D2 D6) D5) D1
type HA5A = :* (:* (:* D2 D6) D5) D0
type D2650 = :* (:* (:* D2 D6) D5) D0
type O5132 = :* (:* (:* D2 D6) D5) D0
type HA59 = :* (:* (:* D2 D6) D4) D9
type D2649 = :* (:* (:* D2 D6) D4) D9
type O5131 = :* (:* (:* D2 D6) D4) D9
type HA58 = :* (:* (:* D2 D6) D4) D8
type D2648 = :* (:* (:* D2 D6) D4) D8
type O5130 = :* (:* (:* D2 D6) D4) D8
type HA57 = :* (:* (:* D2 D6) D4) D7
type D2647 = :* (:* (:* D2 D6) D4) D7
type O5127 = :* (:* (:* D2 D6) D4) D7
type HA56 = :* (:* (:* D2 D6) D4) D6
type D2646 = :* (:* (:* D2 D6) D4) D6
type O5126 = :* (:* (:* D2 D6) D4) D6
type HA55 = :* (:* (:* D2 D6) D4) D5
type D2645 = :* (:* (:* D2 D6) D4) D5
type O5125 = :* (:* (:* D2 D6) D4) D5
type HA54 = :* (:* (:* D2 D6) D4) D4
type D2644 = :* (:* (:* D2 D6) D4) D4
type O5124 = :* (:* (:* D2 D6) D4) D4
type HA53 = :* (:* (:* D2 D6) D4) D3
type D2643 = :* (:* (:* D2 D6) D4) D3
type O5123 = :* (:* (:* D2 D6) D4) D3
type HA52 = :* (:* (:* D2 D6) D4) D2
type D2642 = :* (:* (:* D2 D6) D4) D2
type O5122 = :* (:* (:* D2 D6) D4) D2
type HA51 = :* (:* (:* D2 D6) D4) D1
type D2641 = :* (:* (:* D2 D6) D4) D1
type O5121 = :* (:* (:* D2 D6) D4) D1
type HA50 = :* (:* (:* D2 D6) D4) D0
type D2640 = :* (:* (:* D2 D6) D4) D0
type O5120 = :* (:* (:* D2 D6) D4) D0
type HA4F = :* (:* (:* D2 D6) D3) D9
type D2639 = :* (:* (:* D2 D6) D3) D9
type O5117 = :* (:* (:* D2 D6) D3) D9
type HA4E = :* (:* (:* D2 D6) D3) D8
type D2638 = :* (:* (:* D2 D6) D3) D8
type O5116 = :* (:* (:* D2 D6) D3) D8
type HA4D = :* (:* (:* D2 D6) D3) D7
type D2637 = :* (:* (:* D2 D6) D3) D7
type O5115 = :* (:* (:* D2 D6) D3) D7
type HA4C = :* (:* (:* D2 D6) D3) D6
type D2636 = :* (:* (:* D2 D6) D3) D6
type O5114 = :* (:* (:* D2 D6) D3) D6
type HA4B = :* (:* (:* D2 D6) D3) D5
type D2635 = :* (:* (:* D2 D6) D3) D5
type O5113 = :* (:* (:* D2 D6) D3) D5
type HA4A = :* (:* (:* D2 D6) D3) D4
type D2634 = :* (:* (:* D2 D6) D3) D4
type O5112 = :* (:* (:* D2 D6) D3) D4
type HA49 = :* (:* (:* D2 D6) D3) D3
type D2633 = :* (:* (:* D2 D6) D3) D3
type O5111 = :* (:* (:* D2 D6) D3) D3
type HA48 = :* (:* (:* D2 D6) D3) D2
type D2632 = :* (:* (:* D2 D6) D3) D2
type O5110 = :* (:* (:* D2 D6) D3) D2
type HA47 = :* (:* (:* D2 D6) D3) D1
type D2631 = :* (:* (:* D2 D6) D3) D1
type O5107 = :* (:* (:* D2 D6) D3) D1
type HA46 = :* (:* (:* D2 D6) D3) D0
type D2630 = :* (:* (:* D2 D6) D3) D0
type O5106 = :* (:* (:* D2 D6) D3) D0
type HA45 = :* (:* (:* D2 D6) D2) D9
type D2629 = :* (:* (:* D2 D6) D2) D9
type O5105 = :* (:* (:* D2 D6) D2) D9
type HA44 = :* (:* (:* D2 D6) D2) D8
type D2628 = :* (:* (:* D2 D6) D2) D8
type O5104 = :* (:* (:* D2 D6) D2) D8
type HA43 = :* (:* (:* D2 D6) D2) D7
type D2627 = :* (:* (:* D2 D6) D2) D7
type O5103 = :* (:* (:* D2 D6) D2) D7
type HA42 = :* (:* (:* D2 D6) D2) D6
type D2626 = :* (:* (:* D2 D6) D2) D6
type O5102 = :* (:* (:* D2 D6) D2) D6
type HA41 = :* (:* (:* D2 D6) D2) D5
type D2625 = :* (:* (:* D2 D6) D2) D5
type O5101 = :* (:* (:* D2 D6) D2) D5
type HA40 = :* (:* (:* D2 D6) D2) D4
type D2624 = :* (:* (:* D2 D6) D2) D4
type O5100 = :* (:* (:* D2 D6) D2) D4
type HA3F = :* (:* (:* D2 D6) D2) D3
type D2623 = :* (:* (:* D2 D6) D2) D3
type O5077 = :* (:* (:* D2 D6) D2) D3
type HA3E = :* (:* (:* D2 D6) D2) D2
type D2622 = :* (:* (:* D2 D6) D2) D2
type O5076 = :* (:* (:* D2 D6) D2) D2
type HA3D = :* (:* (:* D2 D6) D2) D1
type D2621 = :* (:* (:* D2 D6) D2) D1
type O5075 = :* (:* (:* D2 D6) D2) D1
type HA3C = :* (:* (:* D2 D6) D2) D0
type D2620 = :* (:* (:* D2 D6) D2) D0
type O5074 = :* (:* (:* D2 D6) D2) D0
type HA3B = :* (:* (:* D2 D6) D1) D9
type D2619 = :* (:* (:* D2 D6) D1) D9
type O5073 = :* (:* (:* D2 D6) D1) D9
type HA3A = :* (:* (:* D2 D6) D1) D8
type D2618 = :* (:* (:* D2 D6) D1) D8
type O5072 = :* (:* (:* D2 D6) D1) D8
type HA39 = :* (:* (:* D2 D6) D1) D7
type D2617 = :* (:* (:* D2 D6) D1) D7
type O5071 = :* (:* (:* D2 D6) D1) D7
type HA38 = :* (:* (:* D2 D6) D1) D6
type D2616 = :* (:* (:* D2 D6) D1) D6
type O5070 = :* (:* (:* D2 D6) D1) D6
type HA37 = :* (:* (:* D2 D6) D1) D5
type D2615 = :* (:* (:* D2 D6) D1) D5
type O5067 = :* (:* (:* D2 D6) D1) D5
type HA36 = :* (:* (:* D2 D6) D1) D4
type D2614 = :* (:* (:* D2 D6) D1) D4
type O5066 = :* (:* (:* D2 D6) D1) D4
type HA35 = :* (:* (:* D2 D6) D1) D3
type D2613 = :* (:* (:* D2 D6) D1) D3
type O5065 = :* (:* (:* D2 D6) D1) D3
type HA34 = :* (:* (:* D2 D6) D1) D2
type D2612 = :* (:* (:* D2 D6) D1) D2
type O5064 = :* (:* (:* D2 D6) D1) D2
type HA33 = :* (:* (:* D2 D6) D1) D1
type D2611 = :* (:* (:* D2 D6) D1) D1
type O5063 = :* (:* (:* D2 D6) D1) D1
type HA32 = :* (:* (:* D2 D6) D1) D0
type D2610 = :* (:* (:* D2 D6) D1) D0
type O5062 = :* (:* (:* D2 D6) D1) D0
type HA31 = :* (:* (:* D2 D6) D0) D9
type D2609 = :* (:* (:* D2 D6) D0) D9
type O5061 = :* (:* (:* D2 D6) D0) D9
type HA30 = :* (:* (:* D2 D6) D0) D8
type D2608 = :* (:* (:* D2 D6) D0) D8
type O5060 = :* (:* (:* D2 D6) D0) D8
type HA2F = :* (:* (:* D2 D6) D0) D7
type D2607 = :* (:* (:* D2 D6) D0) D7
type O5057 = :* (:* (:* D2 D6) D0) D7
type HA2E = :* (:* (:* D2 D6) D0) D6
type D2606 = :* (:* (:* D2 D6) D0) D6
type O5056 = :* (:* (:* D2 D6) D0) D6
type HA2D = :* (:* (:* D2 D6) D0) D5
type D2605 = :* (:* (:* D2 D6) D0) D5
type O5055 = :* (:* (:* D2 D6) D0) D5
type HA2C = :* (:* (:* D2 D6) D0) D4
type D2604 = :* (:* (:* D2 D6) D0) D4
type O5054 = :* (:* (:* D2 D6) D0) D4
type HA2B = :* (:* (:* D2 D6) D0) D3
type D2603 = :* (:* (:* D2 D6) D0) D3
type O5053 = :* (:* (:* D2 D6) D0) D3
type HA2A = :* (:* (:* D2 D6) D0) D2
type D2602 = :* (:* (:* D2 D6) D0) D2
type O5052 = :* (:* (:* D2 D6) D0) D2
type HA29 = :* (:* (:* D2 D6) D0) D1
type D2601 = :* (:* (:* D2 D6) D0) D1
type O5051 = :* (:* (:* D2 D6) D0) D1
type HA28 = :* (:* (:* D2 D6) D0) D0
type D2600 = :* (:* (:* D2 D6) D0) D0
type O5050 = :* (:* (:* D2 D6) D0) D0
type HA27 = :* (:* (:* D2 D5) D9) D9
type D2599 = :* (:* (:* D2 D5) D9) D9
type O5047 = :* (:* (:* D2 D5) D9) D9
type HA26 = :* (:* (:* D2 D5) D9) D8
type D2598 = :* (:* (:* D2 D5) D9) D8
type O5046 = :* (:* (:* D2 D5) D9) D8
type HA25 = :* (:* (:* D2 D5) D9) D7
type D2597 = :* (:* (:* D2 D5) D9) D7
type O5045 = :* (:* (:* D2 D5) D9) D7
type HA24 = :* (:* (:* D2 D5) D9) D6
type D2596 = :* (:* (:* D2 D5) D9) D6
type O5044 = :* (:* (:* D2 D5) D9) D6
type HA23 = :* (:* (:* D2 D5) D9) D5
type D2595 = :* (:* (:* D2 D5) D9) D5
type O5043 = :* (:* (:* D2 D5) D9) D5
type HA22 = :* (:* (:* D2 D5) D9) D4
type D2594 = :* (:* (:* D2 D5) D9) D4
type O5042 = :* (:* (:* D2 D5) D9) D4
type HA21 = :* (:* (:* D2 D5) D9) D3
type D2593 = :* (:* (:* D2 D5) D9) D3
type O5041 = :* (:* (:* D2 D5) D9) D3
type HA20 = :* (:* (:* D2 D5) D9) D2
type D2592 = :* (:* (:* D2 D5) D9) D2
type O5040 = :* (:* (:* D2 D5) D9) D2
type HA1F = :* (:* (:* D2 D5) D9) D1
type D2591 = :* (:* (:* D2 D5) D9) D1
type O5037 = :* (:* (:* D2 D5) D9) D1
type HA1E = :* (:* (:* D2 D5) D9) D0
type D2590 = :* (:* (:* D2 D5) D9) D0
type O5036 = :* (:* (:* D2 D5) D9) D0
type HA1D = :* (:* (:* D2 D5) D8) D9
type D2589 = :* (:* (:* D2 D5) D8) D9
type O5035 = :* (:* (:* D2 D5) D8) D9
type HA1C = :* (:* (:* D2 D5) D8) D8
type D2588 = :* (:* (:* D2 D5) D8) D8
type O5034 = :* (:* (:* D2 D5) D8) D8
type HA1B = :* (:* (:* D2 D5) D8) D7
type D2587 = :* (:* (:* D2 D5) D8) D7
type O5033 = :* (:* (:* D2 D5) D8) D7
type HA1A = :* (:* (:* D2 D5) D8) D6
type D2586 = :* (:* (:* D2 D5) D8) D6
type O5032 = :* (:* (:* D2 D5) D8) D6
type HA19 = :* (:* (:* D2 D5) D8) D5
type D2585 = :* (:* (:* D2 D5) D8) D5
type O5031 = :* (:* (:* D2 D5) D8) D5
type HA18 = :* (:* (:* D2 D5) D8) D4
type D2584 = :* (:* (:* D2 D5) D8) D4
type O5030 = :* (:* (:* D2 D5) D8) D4
type HA17 = :* (:* (:* D2 D5) D8) D3
type D2583 = :* (:* (:* D2 D5) D8) D3
type O5027 = :* (:* (:* D2 D5) D8) D3
type HA16 = :* (:* (:* D2 D5) D8) D2
type D2582 = :* (:* (:* D2 D5) D8) D2
type O5026 = :* (:* (:* D2 D5) D8) D2
type HA15 = :* (:* (:* D2 D5) D8) D1
type D2581 = :* (:* (:* D2 D5) D8) D1
type O5025 = :* (:* (:* D2 D5) D8) D1
type HA14 = :* (:* (:* D2 D5) D8) D0
type D2580 = :* (:* (:* D2 D5) D8) D0
type O5024 = :* (:* (:* D2 D5) D8) D0
type HA13 = :* (:* (:* D2 D5) D7) D9
type D2579 = :* (:* (:* D2 D5) D7) D9
type O5023 = :* (:* (:* D2 D5) D7) D9
type HA12 = :* (:* (:* D2 D5) D7) D8
type D2578 = :* (:* (:* D2 D5) D7) D8
type O5022 = :* (:* (:* D2 D5) D7) D8
type HA11 = :* (:* (:* D2 D5) D7) D7
type D2577 = :* (:* (:* D2 D5) D7) D7
type O5021 = :* (:* (:* D2 D5) D7) D7
type HA10 = :* (:* (:* D2 D5) D7) D6
type D2576 = :* (:* (:* D2 D5) D7) D6
type O5020 = :* (:* (:* D2 D5) D7) D6
type HA0F = :* (:* (:* D2 D5) D7) D5
type D2575 = :* (:* (:* D2 D5) D7) D5
type O5017 = :* (:* (:* D2 D5) D7) D5
type HA0E = :* (:* (:* D2 D5) D7) D4
type D2574 = :* (:* (:* D2 D5) D7) D4
type O5016 = :* (:* (:* D2 D5) D7) D4
type HA0D = :* (:* (:* D2 D5) D7) D3
type D2573 = :* (:* (:* D2 D5) D7) D3
type O5015 = :* (:* (:* D2 D5) D7) D3
type HA0C = :* (:* (:* D2 D5) D7) D2
type D2572 = :* (:* (:* D2 D5) D7) D2
type O5014 = :* (:* (:* D2 D5) D7) D2
type HA0B = :* (:* (:* D2 D5) D7) D1
type D2571 = :* (:* (:* D2 D5) D7) D1
type O5013 = :* (:* (:* D2 D5) D7) D1
type HA0A = :* (:* (:* D2 D5) D7) D0
type D2570 = :* (:* (:* D2 D5) D7) D0
type O5012 = :* (:* (:* D2 D5) D7) D0
type HA09 = :* (:* (:* D2 D5) D6) D9
type D2569 = :* (:* (:* D2 D5) D6) D9
type O5011 = :* (:* (:* D2 D5) D6) D9
type HA08 = :* (:* (:* D2 D5) D6) D8
type D2568 = :* (:* (:* D2 D5) D6) D8
type O5010 = :* (:* (:* D2 D5) D6) D8
type HA07 = :* (:* (:* D2 D5) D6) D7
type D2567 = :* (:* (:* D2 D5) D6) D7
type O5007 = :* (:* (:* D2 D5) D6) D7
type HA06 = :* (:* (:* D2 D5) D6) D6
type D2566 = :* (:* (:* D2 D5) D6) D6
type O5006 = :* (:* (:* D2 D5) D6) D6
type HA05 = :* (:* (:* D2 D5) D6) D5
type D2565 = :* (:* (:* D2 D5) D6) D5
type O5005 = :* (:* (:* D2 D5) D6) D5
type HA04 = :* (:* (:* D2 D5) D6) D4
type D2564 = :* (:* (:* D2 D5) D6) D4
type O5004 = :* (:* (:* D2 D5) D6) D4
type HA03 = :* (:* (:* D2 D5) D6) D3
type D2563 = :* (:* (:* D2 D5) D6) D3
type O5003 = :* (:* (:* D2 D5) D6) D3
type HA02 = :* (:* (:* D2 D5) D6) D2
type D2562 = :* (:* (:* D2 D5) D6) D2
type O5002 = :* (:* (:* D2 D5) D6) D2
type HA01 = :* (:* (:* D2 D5) D6) D1
type D2561 = :* (:* (:* D2 D5) D6) D1
type O5001 = :* (:* (:* D2 D5) D6) D1
type HA00 = :* (:* (:* D2 D5) D6) D0
type D2560 = :* (:* (:* D2 D5) D6) D0
type O5000 = :* (:* (:* D2 D5) D6) D0
type H9FF = :* (:* (:* D2 D5) D5) D9
type D2559 = :* (:* (:* D2 D5) D5) D9
type O4777 = :* (:* (:* D2 D5) D5) D9
type H9FE = :* (:* (:* D2 D5) D5) D8
type D2558 = :* (:* (:* D2 D5) D5) D8
type O4776 = :* (:* (:* D2 D5) D5) D8
type H9FD = :* (:* (:* D2 D5) D5) D7
type D2557 = :* (:* (:* D2 D5) D5) D7
type O4775 = :* (:* (:* D2 D5) D5) D7
type H9FC = :* (:* (:* D2 D5) D5) D6
type D2556 = :* (:* (:* D2 D5) D5) D6
type O4774 = :* (:* (:* D2 D5) D5) D6
type H9FB = :* (:* (:* D2 D5) D5) D5
type D2555 = :* (:* (:* D2 D5) D5) D5
type O4773 = :* (:* (:* D2 D5) D5) D5
type H9FA = :* (:* (:* D2 D5) D5) D4
type D2554 = :* (:* (:* D2 D5) D5) D4
type O4772 = :* (:* (:* D2 D5) D5) D4
type H9F9 = :* (:* (:* D2 D5) D5) D3
type D2553 = :* (:* (:* D2 D5) D5) D3
type O4771 = :* (:* (:* D2 D5) D5) D3
type H9F8 = :* (:* (:* D2 D5) D5) D2
type D2552 = :* (:* (:* D2 D5) D5) D2
type O4770 = :* (:* (:* D2 D5) D5) D2
type H9F7 = :* (:* (:* D2 D5) D5) D1
type D2551 = :* (:* (:* D2 D5) D5) D1
type O4767 = :* (:* (:* D2 D5) D5) D1
type H9F6 = :* (:* (:* D2 D5) D5) D0
type D2550 = :* (:* (:* D2 D5) D5) D0
type O4766 = :* (:* (:* D2 D5) D5) D0
type H9F5 = :* (:* (:* D2 D5) D4) D9
type D2549 = :* (:* (:* D2 D5) D4) D9
type O4765 = :* (:* (:* D2 D5) D4) D9
type H9F4 = :* (:* (:* D2 D5) D4) D8
type D2548 = :* (:* (:* D2 D5) D4) D8
type O4764 = :* (:* (:* D2 D5) D4) D8
type H9F3 = :* (:* (:* D2 D5) D4) D7
type D2547 = :* (:* (:* D2 D5) D4) D7
type O4763 = :* (:* (:* D2 D5) D4) D7
type H9F2 = :* (:* (:* D2 D5) D4) D6
type D2546 = :* (:* (:* D2 D5) D4) D6
type O4762 = :* (:* (:* D2 D5) D4) D6
type H9F1 = :* (:* (:* D2 D5) D4) D5
type D2545 = :* (:* (:* D2 D5) D4) D5
type O4761 = :* (:* (:* D2 D5) D4) D5
type H9F0 = :* (:* (:* D2 D5) D4) D4
type D2544 = :* (:* (:* D2 D5) D4) D4
type O4760 = :* (:* (:* D2 D5) D4) D4
type H9EF = :* (:* (:* D2 D5) D4) D3
type D2543 = :* (:* (:* D2 D5) D4) D3
type O4757 = :* (:* (:* D2 D5) D4) D3
type H9EE = :* (:* (:* D2 D5) D4) D2
type D2542 = :* (:* (:* D2 D5) D4) D2
type O4756 = :* (:* (:* D2 D5) D4) D2
type H9ED = :* (:* (:* D2 D5) D4) D1
type D2541 = :* (:* (:* D2 D5) D4) D1
type O4755 = :* (:* (:* D2 D5) D4) D1
type H9EC = :* (:* (:* D2 D5) D4) D0
type D2540 = :* (:* (:* D2 D5) D4) D0
type O4754 = :* (:* (:* D2 D5) D4) D0
type H9EB = :* (:* (:* D2 D5) D3) D9
type D2539 = :* (:* (:* D2 D5) D3) D9
type O4753 = :* (:* (:* D2 D5) D3) D9
type H9EA = :* (:* (:* D2 D5) D3) D8
type D2538 = :* (:* (:* D2 D5) D3) D8
type O4752 = :* (:* (:* D2 D5) D3) D8
type H9E9 = :* (:* (:* D2 D5) D3) D7
type D2537 = :* (:* (:* D2 D5) D3) D7
type O4751 = :* (:* (:* D2 D5) D3) D7
type H9E8 = :* (:* (:* D2 D5) D3) D6
type D2536 = :* (:* (:* D2 D5) D3) D6
type O4750 = :* (:* (:* D2 D5) D3) D6
type H9E7 = :* (:* (:* D2 D5) D3) D5
type D2535 = :* (:* (:* D2 D5) D3) D5
type O4747 = :* (:* (:* D2 D5) D3) D5
type H9E6 = :* (:* (:* D2 D5) D3) D4
type D2534 = :* (:* (:* D2 D5) D3) D4
type O4746 = :* (:* (:* D2 D5) D3) D4
type H9E5 = :* (:* (:* D2 D5) D3) D3
type D2533 = :* (:* (:* D2 D5) D3) D3
type O4745 = :* (:* (:* D2 D5) D3) D3
type H9E4 = :* (:* (:* D2 D5) D3) D2
type D2532 = :* (:* (:* D2 D5) D3) D2
type O4744 = :* (:* (:* D2 D5) D3) D2
type H9E3 = :* (:* (:* D2 D5) D3) D1
type D2531 = :* (:* (:* D2 D5) D3) D1
type O4743 = :* (:* (:* D2 D5) D3) D1
type H9E2 = :* (:* (:* D2 D5) D3) D0
type D2530 = :* (:* (:* D2 D5) D3) D0
type O4742 = :* (:* (:* D2 D5) D3) D0
type H9E1 = :* (:* (:* D2 D5) D2) D9
type D2529 = :* (:* (:* D2 D5) D2) D9
type O4741 = :* (:* (:* D2 D5) D2) D9
type H9E0 = :* (:* (:* D2 D5) D2) D8
type D2528 = :* (:* (:* D2 D5) D2) D8
type O4740 = :* (:* (:* D2 D5) D2) D8
type H9DF = :* (:* (:* D2 D5) D2) D7
type D2527 = :* (:* (:* D2 D5) D2) D7
type O4737 = :* (:* (:* D2 D5) D2) D7
type H9DE = :* (:* (:* D2 D5) D2) D6
type D2526 = :* (:* (:* D2 D5) D2) D6
type O4736 = :* (:* (:* D2 D5) D2) D6
type H9DD = :* (:* (:* D2 D5) D2) D5
type D2525 = :* (:* (:* D2 D5) D2) D5
type O4735 = :* (:* (:* D2 D5) D2) D5
type H9DC = :* (:* (:* D2 D5) D2) D4
type D2524 = :* (:* (:* D2 D5) D2) D4
type O4734 = :* (:* (:* D2 D5) D2) D4
type H9DB = :* (:* (:* D2 D5) D2) D3
type D2523 = :* (:* (:* D2 D5) D2) D3
type O4733 = :* (:* (:* D2 D5) D2) D3
type H9DA = :* (:* (:* D2 D5) D2) D2
type D2522 = :* (:* (:* D2 D5) D2) D2
type O4732 = :* (:* (:* D2 D5) D2) D2
type H9D9 = :* (:* (:* D2 D5) D2) D1
type D2521 = :* (:* (:* D2 D5) D2) D1
type O4731 = :* (:* (:* D2 D5) D2) D1
type H9D8 = :* (:* (:* D2 D5) D2) D0
type D2520 = :* (:* (:* D2 D5) D2) D0
type O4730 = :* (:* (:* D2 D5) D2) D0
type H9D7 = :* (:* (:* D2 D5) D1) D9
type D2519 = :* (:* (:* D2 D5) D1) D9
type O4727 = :* (:* (:* D2 D5) D1) D9
type H9D6 = :* (:* (:* D2 D5) D1) D8
type D2518 = :* (:* (:* D2 D5) D1) D8
type O4726 = :* (:* (:* D2 D5) D1) D8
type H9D5 = :* (:* (:* D2 D5) D1) D7
type D2517 = :* (:* (:* D2 D5) D1) D7
type O4725 = :* (:* (:* D2 D5) D1) D7
type H9D4 = :* (:* (:* D2 D5) D1) D6
type D2516 = :* (:* (:* D2 D5) D1) D6
type O4724 = :* (:* (:* D2 D5) D1) D6
type H9D3 = :* (:* (:* D2 D5) D1) D5
type D2515 = :* (:* (:* D2 D5) D1) D5
type O4723 = :* (:* (:* D2 D5) D1) D5
type H9D2 = :* (:* (:* D2 D5) D1) D4
type D2514 = :* (:* (:* D2 D5) D1) D4
type O4722 = :* (:* (:* D2 D5) D1) D4
type H9D1 = :* (:* (:* D2 D5) D1) D3
type D2513 = :* (:* (:* D2 D5) D1) D3
type O4721 = :* (:* (:* D2 D5) D1) D3
type H9D0 = :* (:* (:* D2 D5) D1) D2
type D2512 = :* (:* (:* D2 D5) D1) D2
type O4720 = :* (:* (:* D2 D5) D1) D2
type H9CF = :* (:* (:* D2 D5) D1) D1
type D2511 = :* (:* (:* D2 D5) D1) D1
type O4717 = :* (:* (:* D2 D5) D1) D1
type H9CE = :* (:* (:* D2 D5) D1) D0
type D2510 = :* (:* (:* D2 D5) D1) D0
type O4716 = :* (:* (:* D2 D5) D1) D0
type H9CD = :* (:* (:* D2 D5) D0) D9
type D2509 = :* (:* (:* D2 D5) D0) D9
type O4715 = :* (:* (:* D2 D5) D0) D9
type H9CC = :* (:* (:* D2 D5) D0) D8
type D2508 = :* (:* (:* D2 D5) D0) D8
type O4714 = :* (:* (:* D2 D5) D0) D8
type H9CB = :* (:* (:* D2 D5) D0) D7
type D2507 = :* (:* (:* D2 D5) D0) D7
type O4713 = :* (:* (:* D2 D5) D0) D7
type H9CA = :* (:* (:* D2 D5) D0) D6
type D2506 = :* (:* (:* D2 D5) D0) D6
type O4712 = :* (:* (:* D2 D5) D0) D6
type H9C9 = :* (:* (:* D2 D5) D0) D5
type D2505 = :* (:* (:* D2 D5) D0) D5
type O4711 = :* (:* (:* D2 D5) D0) D5
type H9C8 = :* (:* (:* D2 D5) D0) D4
type D2504 = :* (:* (:* D2 D5) D0) D4
type O4710 = :* (:* (:* D2 D5) D0) D4
type H9C7 = :* (:* (:* D2 D5) D0) D3
type D2503 = :* (:* (:* D2 D5) D0) D3
type O4707 = :* (:* (:* D2 D5) D0) D3
type H9C6 = :* (:* (:* D2 D5) D0) D2
type D2502 = :* (:* (:* D2 D5) D0) D2
type O4706 = :* (:* (:* D2 D5) D0) D2
type H9C5 = :* (:* (:* D2 D5) D0) D1
type D2501 = :* (:* (:* D2 D5) D0) D1
type O4705 = :* (:* (:* D2 D5) D0) D1
type H9C4 = :* (:* (:* D2 D5) D0) D0
type D2500 = :* (:* (:* D2 D5) D0) D0
type O4704 = :* (:* (:* D2 D5) D0) D0
type H9C3 = :* (:* (:* D2 D4) D9) D9
type D2499 = :* (:* (:* D2 D4) D9) D9
type O4703 = :* (:* (:* D2 D4) D9) D9
type H9C2 = :* (:* (:* D2 D4) D9) D8
type D2498 = :* (:* (:* D2 D4) D9) D8
type O4702 = :* (:* (:* D2 D4) D9) D8
type H9C1 = :* (:* (:* D2 D4) D9) D7
type D2497 = :* (:* (:* D2 D4) D9) D7
type O4701 = :* (:* (:* D2 D4) D9) D7
type H9C0 = :* (:* (:* D2 D4) D9) D6
type D2496 = :* (:* (:* D2 D4) D9) D6
type O4700 = :* (:* (:* D2 D4) D9) D6
type H9BF = :* (:* (:* D2 D4) D9) D5
type D2495 = :* (:* (:* D2 D4) D9) D5
type O4677 = :* (:* (:* D2 D4) D9) D5
type H9BE = :* (:* (:* D2 D4) D9) D4
type D2494 = :* (:* (:* D2 D4) D9) D4
type O4676 = :* (:* (:* D2 D4) D9) D4
type H9BD = :* (:* (:* D2 D4) D9) D3
type D2493 = :* (:* (:* D2 D4) D9) D3
type O4675 = :* (:* (:* D2 D4) D9) D3
type H9BC = :* (:* (:* D2 D4) D9) D2
type D2492 = :* (:* (:* D2 D4) D9) D2
type O4674 = :* (:* (:* D2 D4) D9) D2
type H9BB = :* (:* (:* D2 D4) D9) D1
type D2491 = :* (:* (:* D2 D4) D9) D1
type O4673 = :* (:* (:* D2 D4) D9) D1
type H9BA = :* (:* (:* D2 D4) D9) D0
type D2490 = :* (:* (:* D2 D4) D9) D0
type O4672 = :* (:* (:* D2 D4) D9) D0
type H9B9 = :* (:* (:* D2 D4) D8) D9
type D2489 = :* (:* (:* D2 D4) D8) D9
type O4671 = :* (:* (:* D2 D4) D8) D9
type H9B8 = :* (:* (:* D2 D4) D8) D8
type D2488 = :* (:* (:* D2 D4) D8) D8
type O4670 = :* (:* (:* D2 D4) D8) D8
type H9B7 = :* (:* (:* D2 D4) D8) D7
type D2487 = :* (:* (:* D2 D4) D8) D7
type O4667 = :* (:* (:* D2 D4) D8) D7
type H9B6 = :* (:* (:* D2 D4) D8) D6
type D2486 = :* (:* (:* D2 D4) D8) D6
type O4666 = :* (:* (:* D2 D4) D8) D6
type H9B5 = :* (:* (:* D2 D4) D8) D5
type D2485 = :* (:* (:* D2 D4) D8) D5
type O4665 = :* (:* (:* D2 D4) D8) D5
type H9B4 = :* (:* (:* D2 D4) D8) D4
type D2484 = :* (:* (:* D2 D4) D8) D4
type O4664 = :* (:* (:* D2 D4) D8) D4
type H9B3 = :* (:* (:* D2 D4) D8) D3
type D2483 = :* (:* (:* D2 D4) D8) D3
type O4663 = :* (:* (:* D2 D4) D8) D3
type H9B2 = :* (:* (:* D2 D4) D8) D2
type D2482 = :* (:* (:* D2 D4) D8) D2
type O4662 = :* (:* (:* D2 D4) D8) D2
type H9B1 = :* (:* (:* D2 D4) D8) D1
type D2481 = :* (:* (:* D2 D4) D8) D1
type O4661 = :* (:* (:* D2 D4) D8) D1
type H9B0 = :* (:* (:* D2 D4) D8) D0
type D2480 = :* (:* (:* D2 D4) D8) D0
type O4660 = :* (:* (:* D2 D4) D8) D0
type H9AF = :* (:* (:* D2 D4) D7) D9
type D2479 = :* (:* (:* D2 D4) D7) D9
type O4657 = :* (:* (:* D2 D4) D7) D9
type H9AE = :* (:* (:* D2 D4) D7) D8
type D2478 = :* (:* (:* D2 D4) D7) D8
type O4656 = :* (:* (:* D2 D4) D7) D8
type H9AD = :* (:* (:* D2 D4) D7) D7
type D2477 = :* (:* (:* D2 D4) D7) D7
type O4655 = :* (:* (:* D2 D4) D7) D7
type H9AC = :* (:* (:* D2 D4) D7) D6
type D2476 = :* (:* (:* D2 D4) D7) D6
type O4654 = :* (:* (:* D2 D4) D7) D6
type H9AB = :* (:* (:* D2 D4) D7) D5
type D2475 = :* (:* (:* D2 D4) D7) D5
type O4653 = :* (:* (:* D2 D4) D7) D5
type H9AA = :* (:* (:* D2 D4) D7) D4
type D2474 = :* (:* (:* D2 D4) D7) D4
type O4652 = :* (:* (:* D2 D4) D7) D4
type H9A9 = :* (:* (:* D2 D4) D7) D3
type D2473 = :* (:* (:* D2 D4) D7) D3
type O4651 = :* (:* (:* D2 D4) D7) D3
type H9A8 = :* (:* (:* D2 D4) D7) D2
type D2472 = :* (:* (:* D2 D4) D7) D2
type O4650 = :* (:* (:* D2 D4) D7) D2
type H9A7 = :* (:* (:* D2 D4) D7) D1
type D2471 = :* (:* (:* D2 D4) D7) D1
type O4647 = :* (:* (:* D2 D4) D7) D1
type H9A6 = :* (:* (:* D2 D4) D7) D0
type D2470 = :* (:* (:* D2 D4) D7) D0
type O4646 = :* (:* (:* D2 D4) D7) D0
type H9A5 = :* (:* (:* D2 D4) D6) D9
type D2469 = :* (:* (:* D2 D4) D6) D9
type O4645 = :* (:* (:* D2 D4) D6) D9
type H9A4 = :* (:* (:* D2 D4) D6) D8
type D2468 = :* (:* (:* D2 D4) D6) D8
type O4644 = :* (:* (:* D2 D4) D6) D8
type H9A3 = :* (:* (:* D2 D4) D6) D7
type D2467 = :* (:* (:* D2 D4) D6) D7
type O4643 = :* (:* (:* D2 D4) D6) D7
type H9A2 = :* (:* (:* D2 D4) D6) D6
type D2466 = :* (:* (:* D2 D4) D6) D6
type O4642 = :* (:* (:* D2 D4) D6) D6
type H9A1 = :* (:* (:* D2 D4) D6) D5
type D2465 = :* (:* (:* D2 D4) D6) D5
type O4641 = :* (:* (:* D2 D4) D6) D5
type H9A0 = :* (:* (:* D2 D4) D6) D4
type D2464 = :* (:* (:* D2 D4) D6) D4
type O4640 = :* (:* (:* D2 D4) D6) D4
type H99F = :* (:* (:* D2 D4) D6) D3
type D2463 = :* (:* (:* D2 D4) D6) D3
type O4637 = :* (:* (:* D2 D4) D6) D3
type H99E = :* (:* (:* D2 D4) D6) D2
type D2462 = :* (:* (:* D2 D4) D6) D2
type O4636 = :* (:* (:* D2 D4) D6) D2
type H99D = :* (:* (:* D2 D4) D6) D1
type D2461 = :* (:* (:* D2 D4) D6) D1
type O4635 = :* (:* (:* D2 D4) D6) D1
type H99C = :* (:* (:* D2 D4) D6) D0
type D2460 = :* (:* (:* D2 D4) D6) D0
type O4634 = :* (:* (:* D2 D4) D6) D0
type H99B = :* (:* (:* D2 D4) D5) D9
type D2459 = :* (:* (:* D2 D4) D5) D9
type O4633 = :* (:* (:* D2 D4) D5) D9
type H99A = :* (:* (:* D2 D4) D5) D8
type D2458 = :* (:* (:* D2 D4) D5) D8
type O4632 = :* (:* (:* D2 D4) D5) D8
type H999 = :* (:* (:* D2 D4) D5) D7
type D2457 = :* (:* (:* D2 D4) D5) D7
type O4631 = :* (:* (:* D2 D4) D5) D7
type H998 = :* (:* (:* D2 D4) D5) D6
type D2456 = :* (:* (:* D2 D4) D5) D6
type O4630 = :* (:* (:* D2 D4) D5) D6
type H997 = :* (:* (:* D2 D4) D5) D5
type D2455 = :* (:* (:* D2 D4) D5) D5
type O4627 = :* (:* (:* D2 D4) D5) D5
type H996 = :* (:* (:* D2 D4) D5) D4
type D2454 = :* (:* (:* D2 D4) D5) D4
type O4626 = :* (:* (:* D2 D4) D5) D4
type H995 = :* (:* (:* D2 D4) D5) D3
type D2453 = :* (:* (:* D2 D4) D5) D3
type O4625 = :* (:* (:* D2 D4) D5) D3
type H994 = :* (:* (:* D2 D4) D5) D2
type D2452 = :* (:* (:* D2 D4) D5) D2
type O4624 = :* (:* (:* D2 D4) D5) D2
type H993 = :* (:* (:* D2 D4) D5) D1
type D2451 = :* (:* (:* D2 D4) D5) D1
type O4623 = :* (:* (:* D2 D4) D5) D1
type H992 = :* (:* (:* D2 D4) D5) D0
type D2450 = :* (:* (:* D2 D4) D5) D0
type O4622 = :* (:* (:* D2 D4) D5) D0
type H991 = :* (:* (:* D2 D4) D4) D9
type D2449 = :* (:* (:* D2 D4) D4) D9
type O4621 = :* (:* (:* D2 D4) D4) D9
type H990 = :* (:* (:* D2 D4) D4) D8
type D2448 = :* (:* (:* D2 D4) D4) D8
type O4620 = :* (:* (:* D2 D4) D4) D8
type H98F = :* (:* (:* D2 D4) D4) D7
type D2447 = :* (:* (:* D2 D4) D4) D7
type O4617 = :* (:* (:* D2 D4) D4) D7
type H98E = :* (:* (:* D2 D4) D4) D6
type D2446 = :* (:* (:* D2 D4) D4) D6
type O4616 = :* (:* (:* D2 D4) D4) D6
type H98D = :* (:* (:* D2 D4) D4) D5
type D2445 = :* (:* (:* D2 D4) D4) D5
type O4615 = :* (:* (:* D2 D4) D4) D5
type H98C = :* (:* (:* D2 D4) D4) D4
type D2444 = :* (:* (:* D2 D4) D4) D4
type O4614 = :* (:* (:* D2 D4) D4) D4
type H98B = :* (:* (:* D2 D4) D4) D3
type D2443 = :* (:* (:* D2 D4) D4) D3
type O4613 = :* (:* (:* D2 D4) D4) D3
type H98A = :* (:* (:* D2 D4) D4) D2
type D2442 = :* (:* (:* D2 D4) D4) D2
type O4612 = :* (:* (:* D2 D4) D4) D2
type H989 = :* (:* (:* D2 D4) D4) D1
type D2441 = :* (:* (:* D2 D4) D4) D1
type O4611 = :* (:* (:* D2 D4) D4) D1
type H988 = :* (:* (:* D2 D4) D4) D0
type D2440 = :* (:* (:* D2 D4) D4) D0
type O4610 = :* (:* (:* D2 D4) D4) D0
type H987 = :* (:* (:* D2 D4) D3) D9
type D2439 = :* (:* (:* D2 D4) D3) D9
type O4607 = :* (:* (:* D2 D4) D3) D9
type H986 = :* (:* (:* D2 D4) D3) D8
type D2438 = :* (:* (:* D2 D4) D3) D8
type O4606 = :* (:* (:* D2 D4) D3) D8
type H985 = :* (:* (:* D2 D4) D3) D7
type D2437 = :* (:* (:* D2 D4) D3) D7
type O4605 = :* (:* (:* D2 D4) D3) D7
type H984 = :* (:* (:* D2 D4) D3) D6
type D2436 = :* (:* (:* D2 D4) D3) D6
type O4604 = :* (:* (:* D2 D4) D3) D6
type H983 = :* (:* (:* D2 D4) D3) D5
type D2435 = :* (:* (:* D2 D4) D3) D5
type O4603 = :* (:* (:* D2 D4) D3) D5
type H982 = :* (:* (:* D2 D4) D3) D4
type D2434 = :* (:* (:* D2 D4) D3) D4
type O4602 = :* (:* (:* D2 D4) D3) D4
type H981 = :* (:* (:* D2 D4) D3) D3
type D2433 = :* (:* (:* D2 D4) D3) D3
type O4601 = :* (:* (:* D2 D4) D3) D3
type H980 = :* (:* (:* D2 D4) D3) D2
type D2432 = :* (:* (:* D2 D4) D3) D2
type O4600 = :* (:* (:* D2 D4) D3) D2
type H97F = :* (:* (:* D2 D4) D3) D1
type D2431 = :* (:* (:* D2 D4) D3) D1
type O4577 = :* (:* (:* D2 D4) D3) D1
type H97E = :* (:* (:* D2 D4) D3) D0
type D2430 = :* (:* (:* D2 D4) D3) D0
type O4576 = :* (:* (:* D2 D4) D3) D0
type H97D = :* (:* (:* D2 D4) D2) D9
type D2429 = :* (:* (:* D2 D4) D2) D9
type O4575 = :* (:* (:* D2 D4) D2) D9
type H97C = :* (:* (:* D2 D4) D2) D8
type D2428 = :* (:* (:* D2 D4) D2) D8
type O4574 = :* (:* (:* D2 D4) D2) D8
type H97B = :* (:* (:* D2 D4) D2) D7
type D2427 = :* (:* (:* D2 D4) D2) D7
type O4573 = :* (:* (:* D2 D4) D2) D7
type H97A = :* (:* (:* D2 D4) D2) D6
type D2426 = :* (:* (:* D2 D4) D2) D6
type O4572 = :* (:* (:* D2 D4) D2) D6
type H979 = :* (:* (:* D2 D4) D2) D5
type D2425 = :* (:* (:* D2 D4) D2) D5
type O4571 = :* (:* (:* D2 D4) D2) D5
type H978 = :* (:* (:* D2 D4) D2) D4
type D2424 = :* (:* (:* D2 D4) D2) D4
type O4570 = :* (:* (:* D2 D4) D2) D4
type H977 = :* (:* (:* D2 D4) D2) D3
type D2423 = :* (:* (:* D2 D4) D2) D3
type O4567 = :* (:* (:* D2 D4) D2) D3
type H976 = :* (:* (:* D2 D4) D2) D2
type D2422 = :* (:* (:* D2 D4) D2) D2
type O4566 = :* (:* (:* D2 D4) D2) D2
type H975 = :* (:* (:* D2 D4) D2) D1
type D2421 = :* (:* (:* D2 D4) D2) D1
type O4565 = :* (:* (:* D2 D4) D2) D1
type H974 = :* (:* (:* D2 D4) D2) D0
type D2420 = :* (:* (:* D2 D4) D2) D0
type O4564 = :* (:* (:* D2 D4) D2) D0
type H973 = :* (:* (:* D2 D4) D1) D9
type D2419 = :* (:* (:* D2 D4) D1) D9
type O4563 = :* (:* (:* D2 D4) D1) D9
type H972 = :* (:* (:* D2 D4) D1) D8
type D2418 = :* (:* (:* D2 D4) D1) D8
type O4562 = :* (:* (:* D2 D4) D1) D8
type H971 = :* (:* (:* D2 D4) D1) D7
type D2417 = :* (:* (:* D2 D4) D1) D7
type O4561 = :* (:* (:* D2 D4) D1) D7
type H970 = :* (:* (:* D2 D4) D1) D6
type D2416 = :* (:* (:* D2 D4) D1) D6
type O4560 = :* (:* (:* D2 D4) D1) D6
type H96F = :* (:* (:* D2 D4) D1) D5
type D2415 = :* (:* (:* D2 D4) D1) D5
type O4557 = :* (:* (:* D2 D4) D1) D5
type H96E = :* (:* (:* D2 D4) D1) D4
type D2414 = :* (:* (:* D2 D4) D1) D4
type O4556 = :* (:* (:* D2 D4) D1) D4
type H96D = :* (:* (:* D2 D4) D1) D3
type D2413 = :* (:* (:* D2 D4) D1) D3
type O4555 = :* (:* (:* D2 D4) D1) D3
type H96C = :* (:* (:* D2 D4) D1) D2
type D2412 = :* (:* (:* D2 D4) D1) D2
type O4554 = :* (:* (:* D2 D4) D1) D2
type H96B = :* (:* (:* D2 D4) D1) D1
type D2411 = :* (:* (:* D2 D4) D1) D1
type O4553 = :* (:* (:* D2 D4) D1) D1
type H96A = :* (:* (:* D2 D4) D1) D0
type D2410 = :* (:* (:* D2 D4) D1) D0
type O4552 = :* (:* (:* D2 D4) D1) D0
type H969 = :* (:* (:* D2 D4) D0) D9
type D2409 = :* (:* (:* D2 D4) D0) D9
type O4551 = :* (:* (:* D2 D4) D0) D9
type H968 = :* (:* (:* D2 D4) D0) D8
type D2408 = :* (:* (:* D2 D4) D0) D8
type O4550 = :* (:* (:* D2 D4) D0) D8
type H967 = :* (:* (:* D2 D4) D0) D7
type D2407 = :* (:* (:* D2 D4) D0) D7
type O4547 = :* (:* (:* D2 D4) D0) D7
type H966 = :* (:* (:* D2 D4) D0) D6
type D2406 = :* (:* (:* D2 D4) D0) D6
type O4546 = :* (:* (:* D2 D4) D0) D6
type H965 = :* (:* (:* D2 D4) D0) D5
type D2405 = :* (:* (:* D2 D4) D0) D5
type O4545 = :* (:* (:* D2 D4) D0) D5
type H964 = :* (:* (:* D2 D4) D0) D4
type D2404 = :* (:* (:* D2 D4) D0) D4
type O4544 = :* (:* (:* D2 D4) D0) D4
type H963 = :* (:* (:* D2 D4) D0) D3
type D2403 = :* (:* (:* D2 D4) D0) D3
type O4543 = :* (:* (:* D2 D4) D0) D3
type H962 = :* (:* (:* D2 D4) D0) D2
type D2402 = :* (:* (:* D2 D4) D0) D2
type O4542 = :* (:* (:* D2 D4) D0) D2
type H961 = :* (:* (:* D2 D4) D0) D1
type D2401 = :* (:* (:* D2 D4) D0) D1
type O4541 = :* (:* (:* D2 D4) D0) D1
type H960 = :* (:* (:* D2 D4) D0) D0
type D2400 = :* (:* (:* D2 D4) D0) D0
type O4540 = :* (:* (:* D2 D4) D0) D0
type H95F = :* (:* (:* D2 D3) D9) D9
type D2399 = :* (:* (:* D2 D3) D9) D9
type O4537 = :* (:* (:* D2 D3) D9) D9
type H95E = :* (:* (:* D2 D3) D9) D8
type D2398 = :* (:* (:* D2 D3) D9) D8
type O4536 = :* (:* (:* D2 D3) D9) D8
type H95D = :* (:* (:* D2 D3) D9) D7
type D2397 = :* (:* (:* D2 D3) D9) D7
type O4535 = :* (:* (:* D2 D3) D9) D7
type H95C = :* (:* (:* D2 D3) D9) D6
type D2396 = :* (:* (:* D2 D3) D9) D6
type O4534 = :* (:* (:* D2 D3) D9) D6
type H95B = :* (:* (:* D2 D3) D9) D5
type D2395 = :* (:* (:* D2 D3) D9) D5
type O4533 = :* (:* (:* D2 D3) D9) D5
type H95A = :* (:* (:* D2 D3) D9) D4
type D2394 = :* (:* (:* D2 D3) D9) D4
type O4532 = :* (:* (:* D2 D3) D9) D4
type H959 = :* (:* (:* D2 D3) D9) D3
type D2393 = :* (:* (:* D2 D3) D9) D3
type O4531 = :* (:* (:* D2 D3) D9) D3
type H958 = :* (:* (:* D2 D3) D9) D2
type D2392 = :* (:* (:* D2 D3) D9) D2
type O4530 = :* (:* (:* D2 D3) D9) D2
type H957 = :* (:* (:* D2 D3) D9) D1
type D2391 = :* (:* (:* D2 D3) D9) D1
type O4527 = :* (:* (:* D2 D3) D9) D1
type H956 = :* (:* (:* D2 D3) D9) D0
type D2390 = :* (:* (:* D2 D3) D9) D0
type O4526 = :* (:* (:* D2 D3) D9) D0
type H955 = :* (:* (:* D2 D3) D8) D9
type D2389 = :* (:* (:* D2 D3) D8) D9
type O4525 = :* (:* (:* D2 D3) D8) D9
type H954 = :* (:* (:* D2 D3) D8) D8
type D2388 = :* (:* (:* D2 D3) D8) D8
type O4524 = :* (:* (:* D2 D3) D8) D8
type H953 = :* (:* (:* D2 D3) D8) D7
type D2387 = :* (:* (:* D2 D3) D8) D7
type O4523 = :* (:* (:* D2 D3) D8) D7
type H952 = :* (:* (:* D2 D3) D8) D6
type D2386 = :* (:* (:* D2 D3) D8) D6
type O4522 = :* (:* (:* D2 D3) D8) D6
type H951 = :* (:* (:* D2 D3) D8) D5
type D2385 = :* (:* (:* D2 D3) D8) D5
type O4521 = :* (:* (:* D2 D3) D8) D5
type H950 = :* (:* (:* D2 D3) D8) D4
type D2384 = :* (:* (:* D2 D3) D8) D4
type O4520 = :* (:* (:* D2 D3) D8) D4
type H94F = :* (:* (:* D2 D3) D8) D3
type D2383 = :* (:* (:* D2 D3) D8) D3
type O4517 = :* (:* (:* D2 D3) D8) D3
type H94E = :* (:* (:* D2 D3) D8) D2
type D2382 = :* (:* (:* D2 D3) D8) D2
type O4516 = :* (:* (:* D2 D3) D8) D2
type H94D = :* (:* (:* D2 D3) D8) D1
type D2381 = :* (:* (:* D2 D3) D8) D1
type O4515 = :* (:* (:* D2 D3) D8) D1
type H94C = :* (:* (:* D2 D3) D8) D0
type D2380 = :* (:* (:* D2 D3) D8) D0
type O4514 = :* (:* (:* D2 D3) D8) D0
type H94B = :* (:* (:* D2 D3) D7) D9
type D2379 = :* (:* (:* D2 D3) D7) D9
type O4513 = :* (:* (:* D2 D3) D7) D9
type H94A = :* (:* (:* D2 D3) D7) D8
type D2378 = :* (:* (:* D2 D3) D7) D8
type O4512 = :* (:* (:* D2 D3) D7) D8
type H949 = :* (:* (:* D2 D3) D7) D7
type D2377 = :* (:* (:* D2 D3) D7) D7
type O4511 = :* (:* (:* D2 D3) D7) D7
type H948 = :* (:* (:* D2 D3) D7) D6
type D2376 = :* (:* (:* D2 D3) D7) D6
type O4510 = :* (:* (:* D2 D3) D7) D6
type H947 = :* (:* (:* D2 D3) D7) D5
type D2375 = :* (:* (:* D2 D3) D7) D5
type O4507 = :* (:* (:* D2 D3) D7) D5
type H946 = :* (:* (:* D2 D3) D7) D4
type D2374 = :* (:* (:* D2 D3) D7) D4
type O4506 = :* (:* (:* D2 D3) D7) D4
type H945 = :* (:* (:* D2 D3) D7) D3
type D2373 = :* (:* (:* D2 D3) D7) D3
type O4505 = :* (:* (:* D2 D3) D7) D3
type H944 = :* (:* (:* D2 D3) D7) D2
type D2372 = :* (:* (:* D2 D3) D7) D2
type O4504 = :* (:* (:* D2 D3) D7) D2
type H943 = :* (:* (:* D2 D3) D7) D1
type D2371 = :* (:* (:* D2 D3) D7) D1
type O4503 = :* (:* (:* D2 D3) D7) D1
type H942 = :* (:* (:* D2 D3) D7) D0
type D2370 = :* (:* (:* D2 D3) D7) D0
type O4502 = :* (:* (:* D2 D3) D7) D0
type H941 = :* (:* (:* D2 D3) D6) D9
type D2369 = :* (:* (:* D2 D3) D6) D9
type O4501 = :* (:* (:* D2 D3) D6) D9
type H940 = :* (:* (:* D2 D3) D6) D8
type D2368 = :* (:* (:* D2 D3) D6) D8
type O4500 = :* (:* (:* D2 D3) D6) D8
type H93F = :* (:* (:* D2 D3) D6) D7
type D2367 = :* (:* (:* D2 D3) D6) D7
type O4477 = :* (:* (:* D2 D3) D6) D7
type H93E = :* (:* (:* D2 D3) D6) D6
type D2366 = :* (:* (:* D2 D3) D6) D6
type O4476 = :* (:* (:* D2 D3) D6) D6
type H93D = :* (:* (:* D2 D3) D6) D5
type D2365 = :* (:* (:* D2 D3) D6) D5
type O4475 = :* (:* (:* D2 D3) D6) D5
type H93C = :* (:* (:* D2 D3) D6) D4
type D2364 = :* (:* (:* D2 D3) D6) D4
type O4474 = :* (:* (:* D2 D3) D6) D4
type H93B = :* (:* (:* D2 D3) D6) D3
type D2363 = :* (:* (:* D2 D3) D6) D3
type O4473 = :* (:* (:* D2 D3) D6) D3
type H93A = :* (:* (:* D2 D3) D6) D2
type D2362 = :* (:* (:* D2 D3) D6) D2
type O4472 = :* (:* (:* D2 D3) D6) D2
type H939 = :* (:* (:* D2 D3) D6) D1
type D2361 = :* (:* (:* D2 D3) D6) D1
type O4471 = :* (:* (:* D2 D3) D6) D1
type H938 = :* (:* (:* D2 D3) D6) D0
type D2360 = :* (:* (:* D2 D3) D6) D0
type O4470 = :* (:* (:* D2 D3) D6) D0
type H937 = :* (:* (:* D2 D3) D5) D9
type D2359 = :* (:* (:* D2 D3) D5) D9
type O4467 = :* (:* (:* D2 D3) D5) D9
type H936 = :* (:* (:* D2 D3) D5) D8
type D2358 = :* (:* (:* D2 D3) D5) D8
type O4466 = :* (:* (:* D2 D3) D5) D8
type H935 = :* (:* (:* D2 D3) D5) D7
type D2357 = :* (:* (:* D2 D3) D5) D7
type O4465 = :* (:* (:* D2 D3) D5) D7
type H934 = :* (:* (:* D2 D3) D5) D6
type D2356 = :* (:* (:* D2 D3) D5) D6
type O4464 = :* (:* (:* D2 D3) D5) D6
type H933 = :* (:* (:* D2 D3) D5) D5
type D2355 = :* (:* (:* D2 D3) D5) D5
type O4463 = :* (:* (:* D2 D3) D5) D5
type H932 = :* (:* (:* D2 D3) D5) D4
type D2354 = :* (:* (:* D2 D3) D5) D4
type O4462 = :* (:* (:* D2 D3) D5) D4
type H931 = :* (:* (:* D2 D3) D5) D3
type D2353 = :* (:* (:* D2 D3) D5) D3
type O4461 = :* (:* (:* D2 D3) D5) D3
type H930 = :* (:* (:* D2 D3) D5) D2
type D2352 = :* (:* (:* D2 D3) D5) D2
type O4460 = :* (:* (:* D2 D3) D5) D2
type H92F = :* (:* (:* D2 D3) D5) D1
type D2351 = :* (:* (:* D2 D3) D5) D1
type O4457 = :* (:* (:* D2 D3) D5) D1
type H92E = :* (:* (:* D2 D3) D5) D0
type D2350 = :* (:* (:* D2 D3) D5) D0
type O4456 = :* (:* (:* D2 D3) D5) D0
type H92D = :* (:* (:* D2 D3) D4) D9
type D2349 = :* (:* (:* D2 D3) D4) D9
type O4455 = :* (:* (:* D2 D3) D4) D9
type H92C = :* (:* (:* D2 D3) D4) D8
type D2348 = :* (:* (:* D2 D3) D4) D8
type O4454 = :* (:* (:* D2 D3) D4) D8
type H92B = :* (:* (:* D2 D3) D4) D7
type D2347 = :* (:* (:* D2 D3) D4) D7
type O4453 = :* (:* (:* D2 D3) D4) D7
type H92A = :* (:* (:* D2 D3) D4) D6
type D2346 = :* (:* (:* D2 D3) D4) D6
type O4452 = :* (:* (:* D2 D3) D4) D6
type H929 = :* (:* (:* D2 D3) D4) D5
type D2345 = :* (:* (:* D2 D3) D4) D5
type O4451 = :* (:* (:* D2 D3) D4) D5
type H928 = :* (:* (:* D2 D3) D4) D4
type D2344 = :* (:* (:* D2 D3) D4) D4
type O4450 = :* (:* (:* D2 D3) D4) D4
type H927 = :* (:* (:* D2 D3) D4) D3
type D2343 = :* (:* (:* D2 D3) D4) D3
type O4447 = :* (:* (:* D2 D3) D4) D3
type H926 = :* (:* (:* D2 D3) D4) D2
type D2342 = :* (:* (:* D2 D3) D4) D2
type O4446 = :* (:* (:* D2 D3) D4) D2
type H925 = :* (:* (:* D2 D3) D4) D1
type D2341 = :* (:* (:* D2 D3) D4) D1
type O4445 = :* (:* (:* D2 D3) D4) D1
type H924 = :* (:* (:* D2 D3) D4) D0
type D2340 = :* (:* (:* D2 D3) D4) D0
type O4444 = :* (:* (:* D2 D3) D4) D0
type H923 = :* (:* (:* D2 D3) D3) D9
type D2339 = :* (:* (:* D2 D3) D3) D9
type O4443 = :* (:* (:* D2 D3) D3) D9
type H922 = :* (:* (:* D2 D3) D3) D8
type D2338 = :* (:* (:* D2 D3) D3) D8
type O4442 = :* (:* (:* D2 D3) D3) D8
type H921 = :* (:* (:* D2 D3) D3) D7
type D2337 = :* (:* (:* D2 D3) D3) D7
type O4441 = :* (:* (:* D2 D3) D3) D7
type H920 = :* (:* (:* D2 D3) D3) D6
type D2336 = :* (:* (:* D2 D3) D3) D6
type O4440 = :* (:* (:* D2 D3) D3) D6
type H91F = :* (:* (:* D2 D3) D3) D5
type D2335 = :* (:* (:* D2 D3) D3) D5
type O4437 = :* (:* (:* D2 D3) D3) D5
type H91E = :* (:* (:* D2 D3) D3) D4
type D2334 = :* (:* (:* D2 D3) D3) D4
type O4436 = :* (:* (:* D2 D3) D3) D4
type H91D = :* (:* (:* D2 D3) D3) D3
type D2333 = :* (:* (:* D2 D3) D3) D3
type O4435 = :* (:* (:* D2 D3) D3) D3
type H91C = :* (:* (:* D2 D3) D3) D2
type D2332 = :* (:* (:* D2 D3) D3) D2
type O4434 = :* (:* (:* D2 D3) D3) D2
type H91B = :* (:* (:* D2 D3) D3) D1
type D2331 = :* (:* (:* D2 D3) D3) D1
type O4433 = :* (:* (:* D2 D3) D3) D1
type H91A = :* (:* (:* D2 D3) D3) D0
type D2330 = :* (:* (:* D2 D3) D3) D0
type O4432 = :* (:* (:* D2 D3) D3) D0
type H919 = :* (:* (:* D2 D3) D2) D9
type D2329 = :* (:* (:* D2 D3) D2) D9
type O4431 = :* (:* (:* D2 D3) D2) D9
type H918 = :* (:* (:* D2 D3) D2) D8
type D2328 = :* (:* (:* D2 D3) D2) D8
type O4430 = :* (:* (:* D2 D3) D2) D8
type H917 = :* (:* (:* D2 D3) D2) D7
type D2327 = :* (:* (:* D2 D3) D2) D7
type O4427 = :* (:* (:* D2 D3) D2) D7
type H916 = :* (:* (:* D2 D3) D2) D6
type D2326 = :* (:* (:* D2 D3) D2) D6
type O4426 = :* (:* (:* D2 D3) D2) D6
type H915 = :* (:* (:* D2 D3) D2) D5
type D2325 = :* (:* (:* D2 D3) D2) D5
type O4425 = :* (:* (:* D2 D3) D2) D5
type H914 = :* (:* (:* D2 D3) D2) D4
type D2324 = :* (:* (:* D2 D3) D2) D4
type O4424 = :* (:* (:* D2 D3) D2) D4
type H913 = :* (:* (:* D2 D3) D2) D3
type D2323 = :* (:* (:* D2 D3) D2) D3
type O4423 = :* (:* (:* D2 D3) D2) D3
type H912 = :* (:* (:* D2 D3) D2) D2
type D2322 = :* (:* (:* D2 D3) D2) D2
type O4422 = :* (:* (:* D2 D3) D2) D2
type H911 = :* (:* (:* D2 D3) D2) D1
type D2321 = :* (:* (:* D2 D3) D2) D1
type O4421 = :* (:* (:* D2 D3) D2) D1
type H910 = :* (:* (:* D2 D3) D2) D0
type D2320 = :* (:* (:* D2 D3) D2) D0
type O4420 = :* (:* (:* D2 D3) D2) D0
type H90F = :* (:* (:* D2 D3) D1) D9
type D2319 = :* (:* (:* D2 D3) D1) D9
type O4417 = :* (:* (:* D2 D3) D1) D9
type H90E = :* (:* (:* D2 D3) D1) D8
type D2318 = :* (:* (:* D2 D3) D1) D8
type O4416 = :* (:* (:* D2 D3) D1) D8
type H90D = :* (:* (:* D2 D3) D1) D7
type D2317 = :* (:* (:* D2 D3) D1) D7
type O4415 = :* (:* (:* D2 D3) D1) D7
type H90C = :* (:* (:* D2 D3) D1) D6
type D2316 = :* (:* (:* D2 D3) D1) D6
type O4414 = :* (:* (:* D2 D3) D1) D6
type H90B = :* (:* (:* D2 D3) D1) D5
type D2315 = :* (:* (:* D2 D3) D1) D5
type O4413 = :* (:* (:* D2 D3) D1) D5
type H90A = :* (:* (:* D2 D3) D1) D4
type D2314 = :* (:* (:* D2 D3) D1) D4
type O4412 = :* (:* (:* D2 D3) D1) D4
type H909 = :* (:* (:* D2 D3) D1) D3
type D2313 = :* (:* (:* D2 D3) D1) D3
type O4411 = :* (:* (:* D2 D3) D1) D3
type H908 = :* (:* (:* D2 D3) D1) D2
type D2312 = :* (:* (:* D2 D3) D1) D2
type O4410 = :* (:* (:* D2 D3) D1) D2
type H907 = :* (:* (:* D2 D3) D1) D1
type D2311 = :* (:* (:* D2 D3) D1) D1
type O4407 = :* (:* (:* D2 D3) D1) D1
type H906 = :* (:* (:* D2 D3) D1) D0
type D2310 = :* (:* (:* D2 D3) D1) D0
type O4406 = :* (:* (:* D2 D3) D1) D0
type H905 = :* (:* (:* D2 D3) D0) D9
type D2309 = :* (:* (:* D2 D3) D0) D9
type O4405 = :* (:* (:* D2 D3) D0) D9
type H904 = :* (:* (:* D2 D3) D0) D8
type D2308 = :* (:* (:* D2 D3) D0) D8
type O4404 = :* (:* (:* D2 D3) D0) D8
type H903 = :* (:* (:* D2 D3) D0) D7
type D2307 = :* (:* (:* D2 D3) D0) D7
type O4403 = :* (:* (:* D2 D3) D0) D7
type H902 = :* (:* (:* D2 D3) D0) D6
type D2306 = :* (:* (:* D2 D3) D0) D6
type O4402 = :* (:* (:* D2 D3) D0) D6
type H901 = :* (:* (:* D2 D3) D0) D5
type D2305 = :* (:* (:* D2 D3) D0) D5
type O4401 = :* (:* (:* D2 D3) D0) D5
type H900 = :* (:* (:* D2 D3) D0) D4
type D2304 = :* (:* (:* D2 D3) D0) D4
type O4400 = :* (:* (:* D2 D3) D0) D4
type H8FF = :* (:* (:* D2 D3) D0) D3
type D2303 = :* (:* (:* D2 D3) D0) D3
type O4377 = :* (:* (:* D2 D3) D0) D3
type H8FE = :* (:* (:* D2 D3) D0) D2
type D2302 = :* (:* (:* D2 D3) D0) D2
type O4376 = :* (:* (:* D2 D3) D0) D2
type H8FD = :* (:* (:* D2 D3) D0) D1
type D2301 = :* (:* (:* D2 D3) D0) D1
type O4375 = :* (:* (:* D2 D3) D0) D1
type H8FC = :* (:* (:* D2 D3) D0) D0
type D2300 = :* (:* (:* D2 D3) D0) D0
type O4374 = :* (:* (:* D2 D3) D0) D0
type H8FB = :* (:* (:* D2 D2) D9) D9
type D2299 = :* (:* (:* D2 D2) D9) D9
type O4373 = :* (:* (:* D2 D2) D9) D9
type H8FA = :* (:* (:* D2 D2) D9) D8
type D2298 = :* (:* (:* D2 D2) D9) D8
type O4372 = :* (:* (:* D2 D2) D9) D8
type H8F9 = :* (:* (:* D2 D2) D9) D7
type D2297 = :* (:* (:* D2 D2) D9) D7
type O4371 = :* (:* (:* D2 D2) D9) D7
type H8F8 = :* (:* (:* D2 D2) D9) D6
type D2296 = :* (:* (:* D2 D2) D9) D6
type O4370 = :* (:* (:* D2 D2) D9) D6
type H8F7 = :* (:* (:* D2 D2) D9) D5
type D2295 = :* (:* (:* D2 D2) D9) D5
type O4367 = :* (:* (:* D2 D2) D9) D5
type H8F6 = :* (:* (:* D2 D2) D9) D4
type D2294 = :* (:* (:* D2 D2) D9) D4
type O4366 = :* (:* (:* D2 D2) D9) D4
type H8F5 = :* (:* (:* D2 D2) D9) D3
type D2293 = :* (:* (:* D2 D2) D9) D3
type O4365 = :* (:* (:* D2 D2) D9) D3
type H8F4 = :* (:* (:* D2 D2) D9) D2
type D2292 = :* (:* (:* D2 D2) D9) D2
type O4364 = :* (:* (:* D2 D2) D9) D2
type H8F3 = :* (:* (:* D2 D2) D9) D1
type D2291 = :* (:* (:* D2 D2) D9) D1
type O4363 = :* (:* (:* D2 D2) D9) D1
type H8F2 = :* (:* (:* D2 D2) D9) D0
type D2290 = :* (:* (:* D2 D2) D9) D0
type O4362 = :* (:* (:* D2 D2) D9) D0
type H8F1 = :* (:* (:* D2 D2) D8) D9
type D2289 = :* (:* (:* D2 D2) D8) D9
type O4361 = :* (:* (:* D2 D2) D8) D9
type H8F0 = :* (:* (:* D2 D2) D8) D8
type D2288 = :* (:* (:* D2 D2) D8) D8
type O4360 = :* (:* (:* D2 D2) D8) D8
type H8EF = :* (:* (:* D2 D2) D8) D7
type D2287 = :* (:* (:* D2 D2) D8) D7
type O4357 = :* (:* (:* D2 D2) D8) D7
type H8EE = :* (:* (:* D2 D2) D8) D6
type D2286 = :* (:* (:* D2 D2) D8) D6
type O4356 = :* (:* (:* D2 D2) D8) D6
type H8ED = :* (:* (:* D2 D2) D8) D5
type D2285 = :* (:* (:* D2 D2) D8) D5
type O4355 = :* (:* (:* D2 D2) D8) D5
type H8EC = :* (:* (:* D2 D2) D8) D4
type D2284 = :* (:* (:* D2 D2) D8) D4
type O4354 = :* (:* (:* D2 D2) D8) D4
type H8EB = :* (:* (:* D2 D2) D8) D3
type D2283 = :* (:* (:* D2 D2) D8) D3
type O4353 = :* (:* (:* D2 D2) D8) D3
type H8EA = :* (:* (:* D2 D2) D8) D2
type D2282 = :* (:* (:* D2 D2) D8) D2
type O4352 = :* (:* (:* D2 D2) D8) D2
type H8E9 = :* (:* (:* D2 D2) D8) D1
type D2281 = :* (:* (:* D2 D2) D8) D1
type O4351 = :* (:* (:* D2 D2) D8) D1
type H8E8 = :* (:* (:* D2 D2) D8) D0
type D2280 = :* (:* (:* D2 D2) D8) D0
type O4350 = :* (:* (:* D2 D2) D8) D0
type H8E7 = :* (:* (:* D2 D2) D7) D9
type D2279 = :* (:* (:* D2 D2) D7) D9
type O4347 = :* (:* (:* D2 D2) D7) D9
type H8E6 = :* (:* (:* D2 D2) D7) D8
type D2278 = :* (:* (:* D2 D2) D7) D8
type O4346 = :* (:* (:* D2 D2) D7) D8
type H8E5 = :* (:* (:* D2 D2) D7) D7
type D2277 = :* (:* (:* D2 D2) D7) D7
type O4345 = :* (:* (:* D2 D2) D7) D7
type H8E4 = :* (:* (:* D2 D2) D7) D6
type D2276 = :* (:* (:* D2 D2) D7) D6
type O4344 = :* (:* (:* D2 D2) D7) D6
type H8E3 = :* (:* (:* D2 D2) D7) D5
type D2275 = :* (:* (:* D2 D2) D7) D5
type O4343 = :* (:* (:* D2 D2) D7) D5
type H8E2 = :* (:* (:* D2 D2) D7) D4
type D2274 = :* (:* (:* D2 D2) D7) D4
type O4342 = :* (:* (:* D2 D2) D7) D4
type H8E1 = :* (:* (:* D2 D2) D7) D3
type D2273 = :* (:* (:* D2 D2) D7) D3
type O4341 = :* (:* (:* D2 D2) D7) D3
type H8E0 = :* (:* (:* D2 D2) D7) D2
type D2272 = :* (:* (:* D2 D2) D7) D2
type O4340 = :* (:* (:* D2 D2) D7) D2
type H8DF = :* (:* (:* D2 D2) D7) D1
type D2271 = :* (:* (:* D2 D2) D7) D1
type O4337 = :* (:* (:* D2 D2) D7) D1
type H8DE = :* (:* (:* D2 D2) D7) D0
type D2270 = :* (:* (:* D2 D2) D7) D0
type O4336 = :* (:* (:* D2 D2) D7) D0
type H8DD = :* (:* (:* D2 D2) D6) D9
type D2269 = :* (:* (:* D2 D2) D6) D9
type O4335 = :* (:* (:* D2 D2) D6) D9
type H8DC = :* (:* (:* D2 D2) D6) D8
type D2268 = :* (:* (:* D2 D2) D6) D8
type O4334 = :* (:* (:* D2 D2) D6) D8
type H8DB = :* (:* (:* D2 D2) D6) D7
type D2267 = :* (:* (:* D2 D2) D6) D7
type O4333 = :* (:* (:* D2 D2) D6) D7
type H8DA = :* (:* (:* D2 D2) D6) D6
type D2266 = :* (:* (:* D2 D2) D6) D6
type O4332 = :* (:* (:* D2 D2) D6) D6
type H8D9 = :* (:* (:* D2 D2) D6) D5
type D2265 = :* (:* (:* D2 D2) D6) D5
type O4331 = :* (:* (:* D2 D2) D6) D5
type H8D8 = :* (:* (:* D2 D2) D6) D4
type D2264 = :* (:* (:* D2 D2) D6) D4
type O4330 = :* (:* (:* D2 D2) D6) D4
type H8D7 = :* (:* (:* D2 D2) D6) D3
type D2263 = :* (:* (:* D2 D2) D6) D3
type O4327 = :* (:* (:* D2 D2) D6) D3
type H8D6 = :* (:* (:* D2 D2) D6) D2
type D2262 = :* (:* (:* D2 D2) D6) D2
type O4326 = :* (:* (:* D2 D2) D6) D2
type H8D5 = :* (:* (:* D2 D2) D6) D1
type D2261 = :* (:* (:* D2 D2) D6) D1
type O4325 = :* (:* (:* D2 D2) D6) D1
type H8D4 = :* (:* (:* D2 D2) D6) D0
type D2260 = :* (:* (:* D2 D2) D6) D0
type O4324 = :* (:* (:* D2 D2) D6) D0
type H8D3 = :* (:* (:* D2 D2) D5) D9
type D2259 = :* (:* (:* D2 D2) D5) D9
type O4323 = :* (:* (:* D2 D2) D5) D9
type H8D2 = :* (:* (:* D2 D2) D5) D8
type D2258 = :* (:* (:* D2 D2) D5) D8
type O4322 = :* (:* (:* D2 D2) D5) D8
type H8D1 = :* (:* (:* D2 D2) D5) D7
type D2257 = :* (:* (:* D2 D2) D5) D7
type O4321 = :* (:* (:* D2 D2) D5) D7
type H8D0 = :* (:* (:* D2 D2) D5) D6
type D2256 = :* (:* (:* D2 D2) D5) D6
type O4320 = :* (:* (:* D2 D2) D5) D6
type H8CF = :* (:* (:* D2 D2) D5) D5
type D2255 = :* (:* (:* D2 D2) D5) D5
type O4317 = :* (:* (:* D2 D2) D5) D5
type H8CE = :* (:* (:* D2 D2) D5) D4
type D2254 = :* (:* (:* D2 D2) D5) D4
type O4316 = :* (:* (:* D2 D2) D5) D4
type H8CD = :* (:* (:* D2 D2) D5) D3
type D2253 = :* (:* (:* D2 D2) D5) D3
type O4315 = :* (:* (:* D2 D2) D5) D3
type H8CC = :* (:* (:* D2 D2) D5) D2
type D2252 = :* (:* (:* D2 D2) D5) D2
type O4314 = :* (:* (:* D2 D2) D5) D2
type H8CB = :* (:* (:* D2 D2) D5) D1
type D2251 = :* (:* (:* D2 D2) D5) D1
type O4313 = :* (:* (:* D2 D2) D5) D1
type H8CA = :* (:* (:* D2 D2) D5) D0
type D2250 = :* (:* (:* D2 D2) D5) D0
type O4312 = :* (:* (:* D2 D2) D5) D0
type H8C9 = :* (:* (:* D2 D2) D4) D9
type D2249 = :* (:* (:* D2 D2) D4) D9
type O4311 = :* (:* (:* D2 D2) D4) D9
type H8C8 = :* (:* (:* D2 D2) D4) D8
type D2248 = :* (:* (:* D2 D2) D4) D8
type O4310 = :* (:* (:* D2 D2) D4) D8
type H8C7 = :* (:* (:* D2 D2) D4) D7
type D2247 = :* (:* (:* D2 D2) D4) D7
type O4307 = :* (:* (:* D2 D2) D4) D7
type H8C6 = :* (:* (:* D2 D2) D4) D6
type D2246 = :* (:* (:* D2 D2) D4) D6
type O4306 = :* (:* (:* D2 D2) D4) D6
type H8C5 = :* (:* (:* D2 D2) D4) D5
type D2245 = :* (:* (:* D2 D2) D4) D5
type O4305 = :* (:* (:* D2 D2) D4) D5
type H8C4 = :* (:* (:* D2 D2) D4) D4
type D2244 = :* (:* (:* D2 D2) D4) D4
type O4304 = :* (:* (:* D2 D2) D4) D4
type H8C3 = :* (:* (:* D2 D2) D4) D3
type D2243 = :* (:* (:* D2 D2) D4) D3
type O4303 = :* (:* (:* D2 D2) D4) D3
type H8C2 = :* (:* (:* D2 D2) D4) D2
type D2242 = :* (:* (:* D2 D2) D4) D2
type O4302 = :* (:* (:* D2 D2) D4) D2
type H8C1 = :* (:* (:* D2 D2) D4) D1
type D2241 = :* (:* (:* D2 D2) D4) D1
type O4301 = :* (:* (:* D2 D2) D4) D1
type H8C0 = :* (:* (:* D2 D2) D4) D0
type D2240 = :* (:* (:* D2 D2) D4) D0
type O4300 = :* (:* (:* D2 D2) D4) D0
type H8BF = :* (:* (:* D2 D2) D3) D9
type D2239 = :* (:* (:* D2 D2) D3) D9
type O4277 = :* (:* (:* D2 D2) D3) D9
type H8BE = :* (:* (:* D2 D2) D3) D8
type D2238 = :* (:* (:* D2 D2) D3) D8
type O4276 = :* (:* (:* D2 D2) D3) D8
type H8BD = :* (:* (:* D2 D2) D3) D7
type D2237 = :* (:* (:* D2 D2) D3) D7
type O4275 = :* (:* (:* D2 D2) D3) D7
type H8BC = :* (:* (:* D2 D2) D3) D6
type D2236 = :* (:* (:* D2 D2) D3) D6
type O4274 = :* (:* (:* D2 D2) D3) D6
type H8BB = :* (:* (:* D2 D2) D3) D5
type D2235 = :* (:* (:* D2 D2) D3) D5
type O4273 = :* (:* (:* D2 D2) D3) D5
type H8BA = :* (:* (:* D2 D2) D3) D4
type D2234 = :* (:* (:* D2 D2) D3) D4
type O4272 = :* (:* (:* D2 D2) D3) D4
type H8B9 = :* (:* (:* D2 D2) D3) D3
type D2233 = :* (:* (:* D2 D2) D3) D3
type O4271 = :* (:* (:* D2 D2) D3) D3
type H8B8 = :* (:* (:* D2 D2) D3) D2
type D2232 = :* (:* (:* D2 D2) D3) D2
type O4270 = :* (:* (:* D2 D2) D3) D2
type H8B7 = :* (:* (:* D2 D2) D3) D1
type D2231 = :* (:* (:* D2 D2) D3) D1
type O4267 = :* (:* (:* D2 D2) D3) D1
type H8B6 = :* (:* (:* D2 D2) D3) D0
type D2230 = :* (:* (:* D2 D2) D3) D0
type O4266 = :* (:* (:* D2 D2) D3) D0
type H8B5 = :* (:* (:* D2 D2) D2) D9
type D2229 = :* (:* (:* D2 D2) D2) D9
type O4265 = :* (:* (:* D2 D2) D2) D9
type H8B4 = :* (:* (:* D2 D2) D2) D8
type D2228 = :* (:* (:* D2 D2) D2) D8
type O4264 = :* (:* (:* D2 D2) D2) D8
type H8B3 = :* (:* (:* D2 D2) D2) D7
type D2227 = :* (:* (:* D2 D2) D2) D7
type O4263 = :* (:* (:* D2 D2) D2) D7
type H8B2 = :* (:* (:* D2 D2) D2) D6
type D2226 = :* (:* (:* D2 D2) D2) D6
type O4262 = :* (:* (:* D2 D2) D2) D6
type H8B1 = :* (:* (:* D2 D2) D2) D5
type D2225 = :* (:* (:* D2 D2) D2) D5
type O4261 = :* (:* (:* D2 D2) D2) D5
type H8B0 = :* (:* (:* D2 D2) D2) D4
type D2224 = :* (:* (:* D2 D2) D2) D4
type O4260 = :* (:* (:* D2 D2) D2) D4
type H8AF = :* (:* (:* D2 D2) D2) D3
type D2223 = :* (:* (:* D2 D2) D2) D3
type O4257 = :* (:* (:* D2 D2) D2) D3
type H8AE = :* (:* (:* D2 D2) D2) D2
type D2222 = :* (:* (:* D2 D2) D2) D2
type O4256 = :* (:* (:* D2 D2) D2) D2
type H8AD = :* (:* (:* D2 D2) D2) D1
type D2221 = :* (:* (:* D2 D2) D2) D1
type O4255 = :* (:* (:* D2 D2) D2) D1
type H8AC = :* (:* (:* D2 D2) D2) D0
type D2220 = :* (:* (:* D2 D2) D2) D0
type O4254 = :* (:* (:* D2 D2) D2) D0
type H8AB = :* (:* (:* D2 D2) D1) D9
type D2219 = :* (:* (:* D2 D2) D1) D9
type O4253 = :* (:* (:* D2 D2) D1) D9
type H8AA = :* (:* (:* D2 D2) D1) D8
type D2218 = :* (:* (:* D2 D2) D1) D8
type O4252 = :* (:* (:* D2 D2) D1) D8
type H8A9 = :* (:* (:* D2 D2) D1) D7
type D2217 = :* (:* (:* D2 D2) D1) D7
type O4251 = :* (:* (:* D2 D2) D1) D7
type H8A8 = :* (:* (:* D2 D2) D1) D6
type D2216 = :* (:* (:* D2 D2) D1) D6
type O4250 = :* (:* (:* D2 D2) D1) D6
type H8A7 = :* (:* (:* D2 D2) D1) D5
type D2215 = :* (:* (:* D2 D2) D1) D5
type O4247 = :* (:* (:* D2 D2) D1) D5
type H8A6 = :* (:* (:* D2 D2) D1) D4
type D2214 = :* (:* (:* D2 D2) D1) D4
type O4246 = :* (:* (:* D2 D2) D1) D4
type H8A5 = :* (:* (:* D2 D2) D1) D3
type D2213 = :* (:* (:* D2 D2) D1) D3
type O4245 = :* (:* (:* D2 D2) D1) D3
type H8A4 = :* (:* (:* D2 D2) D1) D2
type D2212 = :* (:* (:* D2 D2) D1) D2
type O4244 = :* (:* (:* D2 D2) D1) D2
type H8A3 = :* (:* (:* D2 D2) D1) D1
type D2211 = :* (:* (:* D2 D2) D1) D1
type O4243 = :* (:* (:* D2 D2) D1) D1
type H8A2 = :* (:* (:* D2 D2) D1) D0
type D2210 = :* (:* (:* D2 D2) D1) D0
type O4242 = :* (:* (:* D2 D2) D1) D0
type H8A1 = :* (:* (:* D2 D2) D0) D9
type D2209 = :* (:* (:* D2 D2) D0) D9
type O4241 = :* (:* (:* D2 D2) D0) D9
type H8A0 = :* (:* (:* D2 D2) D0) D8
type D2208 = :* (:* (:* D2 D2) D0) D8
type O4240 = :* (:* (:* D2 D2) D0) D8
type H89F = :* (:* (:* D2 D2) D0) D7
type D2207 = :* (:* (:* D2 D2) D0) D7
type O4237 = :* (:* (:* D2 D2) D0) D7
type H89E = :* (:* (:* D2 D2) D0) D6
type D2206 = :* (:* (:* D2 D2) D0) D6
type O4236 = :* (:* (:* D2 D2) D0) D6
type H89D = :* (:* (:* D2 D2) D0) D5
type D2205 = :* (:* (:* D2 D2) D0) D5
type O4235 = :* (:* (:* D2 D2) D0) D5
type H89C = :* (:* (:* D2 D2) D0) D4
type D2204 = :* (:* (:* D2 D2) D0) D4
type O4234 = :* (:* (:* D2 D2) D0) D4
type H89B = :* (:* (:* D2 D2) D0) D3
type D2203 = :* (:* (:* D2 D2) D0) D3
type O4233 = :* (:* (:* D2 D2) D0) D3
type H89A = :* (:* (:* D2 D2) D0) D2
type D2202 = :* (:* (:* D2 D2) D0) D2
type O4232 = :* (:* (:* D2 D2) D0) D2
type H899 = :* (:* (:* D2 D2) D0) D1
type D2201 = :* (:* (:* D2 D2) D0) D1
type O4231 = :* (:* (:* D2 D2) D0) D1
type H898 = :* (:* (:* D2 D2) D0) D0
type D2200 = :* (:* (:* D2 D2) D0) D0
type O4230 = :* (:* (:* D2 D2) D0) D0
type H897 = :* (:* (:* D2 D1) D9) D9
type D2199 = :* (:* (:* D2 D1) D9) D9
type O4227 = :* (:* (:* D2 D1) D9) D9
type H896 = :* (:* (:* D2 D1) D9) D8
type D2198 = :* (:* (:* D2 D1) D9) D8
type O4226 = :* (:* (:* D2 D1) D9) D8
type H895 = :* (:* (:* D2 D1) D9) D7
type D2197 = :* (:* (:* D2 D1) D9) D7
type O4225 = :* (:* (:* D2 D1) D9) D7
type H894 = :* (:* (:* D2 D1) D9) D6
type D2196 = :* (:* (:* D2 D1) D9) D6
type O4224 = :* (:* (:* D2 D1) D9) D6
type H893 = :* (:* (:* D2 D1) D9) D5
type D2195 = :* (:* (:* D2 D1) D9) D5
type O4223 = :* (:* (:* D2 D1) D9) D5
type H892 = :* (:* (:* D2 D1) D9) D4
type D2194 = :* (:* (:* D2 D1) D9) D4
type O4222 = :* (:* (:* D2 D1) D9) D4
type H891 = :* (:* (:* D2 D1) D9) D3
type D2193 = :* (:* (:* D2 D1) D9) D3
type O4221 = :* (:* (:* D2 D1) D9) D3
type H890 = :* (:* (:* D2 D1) D9) D2
type D2192 = :* (:* (:* D2 D1) D9) D2
type O4220 = :* (:* (:* D2 D1) D9) D2
type H88F = :* (:* (:* D2 D1) D9) D1
type D2191 = :* (:* (:* D2 D1) D9) D1
type O4217 = :* (:* (:* D2 D1) D9) D1
type H88E = :* (:* (:* D2 D1) D9) D0
type D2190 = :* (:* (:* D2 D1) D9) D0
type O4216 = :* (:* (:* D2 D1) D9) D0
type H88D = :* (:* (:* D2 D1) D8) D9
type D2189 = :* (:* (:* D2 D1) D8) D9
type O4215 = :* (:* (:* D2 D1) D8) D9
type H88C = :* (:* (:* D2 D1) D8) D8
type D2188 = :* (:* (:* D2 D1) D8) D8
type O4214 = :* (:* (:* D2 D1) D8) D8
type H88B = :* (:* (:* D2 D1) D8) D7
type D2187 = :* (:* (:* D2 D1) D8) D7
type O4213 = :* (:* (:* D2 D1) D8) D7
type H88A = :* (:* (:* D2 D1) D8) D6
type D2186 = :* (:* (:* D2 D1) D8) D6
type O4212 = :* (:* (:* D2 D1) D8) D6
type H889 = :* (:* (:* D2 D1) D8) D5
type D2185 = :* (:* (:* D2 D1) D8) D5
type O4211 = :* (:* (:* D2 D1) D8) D5
type H888 = :* (:* (:* D2 D1) D8) D4
type D2184 = :* (:* (:* D2 D1) D8) D4
type O4210 = :* (:* (:* D2 D1) D8) D4
type H887 = :* (:* (:* D2 D1) D8) D3
type D2183 = :* (:* (:* D2 D1) D8) D3
type O4207 = :* (:* (:* D2 D1) D8) D3
type H886 = :* (:* (:* D2 D1) D8) D2
type D2182 = :* (:* (:* D2 D1) D8) D2
type O4206 = :* (:* (:* D2 D1) D8) D2
type H885 = :* (:* (:* D2 D1) D8) D1
type D2181 = :* (:* (:* D2 D1) D8) D1
type O4205 = :* (:* (:* D2 D1) D8) D1
type H884 = :* (:* (:* D2 D1) D8) D0
type D2180 = :* (:* (:* D2 D1) D8) D0
type O4204 = :* (:* (:* D2 D1) D8) D0
type H883 = :* (:* (:* D2 D1) D7) D9
type D2179 = :* (:* (:* D2 D1) D7) D9
type O4203 = :* (:* (:* D2 D1) D7) D9
type H882 = :* (:* (:* D2 D1) D7) D8
type D2178 = :* (:* (:* D2 D1) D7) D8
type O4202 = :* (:* (:* D2 D1) D7) D8
type H881 = :* (:* (:* D2 D1) D7) D7
type D2177 = :* (:* (:* D2 D1) D7) D7
type O4201 = :* (:* (:* D2 D1) D7) D7
type H880 = :* (:* (:* D2 D1) D7) D6
type D2176 = :* (:* (:* D2 D1) D7) D6
type O4200 = :* (:* (:* D2 D1) D7) D6
type H87F = :* (:* (:* D2 D1) D7) D5
type D2175 = :* (:* (:* D2 D1) D7) D5
type O4177 = :* (:* (:* D2 D1) D7) D5
type H87E = :* (:* (:* D2 D1) D7) D4
type D2174 = :* (:* (:* D2 D1) D7) D4
type O4176 = :* (:* (:* D2 D1) D7) D4
type H87D = :* (:* (:* D2 D1) D7) D3
type D2173 = :* (:* (:* D2 D1) D7) D3
type O4175 = :* (:* (:* D2 D1) D7) D3
type H87C = :* (:* (:* D2 D1) D7) D2
type D2172 = :* (:* (:* D2 D1) D7) D2
type O4174 = :* (:* (:* D2 D1) D7) D2
type H87B = :* (:* (:* D2 D1) D7) D1
type D2171 = :* (:* (:* D2 D1) D7) D1
type O4173 = :* (:* (:* D2 D1) D7) D1
type H87A = :* (:* (:* D2 D1) D7) D0
type D2170 = :* (:* (:* D2 D1) D7) D0
type O4172 = :* (:* (:* D2 D1) D7) D0
type H879 = :* (:* (:* D2 D1) D6) D9
type D2169 = :* (:* (:* D2 D1) D6) D9
type O4171 = :* (:* (:* D2 D1) D6) D9
type H878 = :* (:* (:* D2 D1) D6) D8
type D2168 = :* (:* (:* D2 D1) D6) D8
type O4170 = :* (:* (:* D2 D1) D6) D8
type H877 = :* (:* (:* D2 D1) D6) D7
type D2167 = :* (:* (:* D2 D1) D6) D7
type O4167 = :* (:* (:* D2 D1) D6) D7
type H876 = :* (:* (:* D2 D1) D6) D6
type D2166 = :* (:* (:* D2 D1) D6) D6
type O4166 = :* (:* (:* D2 D1) D6) D6
type H875 = :* (:* (:* D2 D1) D6) D5
type D2165 = :* (:* (:* D2 D1) D6) D5
type O4165 = :* (:* (:* D2 D1) D6) D5
type H874 = :* (:* (:* D2 D1) D6) D4
type D2164 = :* (:* (:* D2 D1) D6) D4
type O4164 = :* (:* (:* D2 D1) D6) D4
type H873 = :* (:* (:* D2 D1) D6) D3
type D2163 = :* (:* (:* D2 D1) D6) D3
type O4163 = :* (:* (:* D2 D1) D6) D3
type H872 = :* (:* (:* D2 D1) D6) D2
type D2162 = :* (:* (:* D2 D1) D6) D2
type O4162 = :* (:* (:* D2 D1) D6) D2
type H871 = :* (:* (:* D2 D1) D6) D1
type D2161 = :* (:* (:* D2 D1) D6) D1
type O4161 = :* (:* (:* D2 D1) D6) D1
type H870 = :* (:* (:* D2 D1) D6) D0
type D2160 = :* (:* (:* D2 D1) D6) D0
type O4160 = :* (:* (:* D2 D1) D6) D0
type H86F = :* (:* (:* D2 D1) D5) D9
type D2159 = :* (:* (:* D2 D1) D5) D9
type O4157 = :* (:* (:* D2 D1) D5) D9
type H86E = :* (:* (:* D2 D1) D5) D8
type D2158 = :* (:* (:* D2 D1) D5) D8
type O4156 = :* (:* (:* D2 D1) D5) D8
type H86D = :* (:* (:* D2 D1) D5) D7
type D2157 = :* (:* (:* D2 D1) D5) D7
type O4155 = :* (:* (:* D2 D1) D5) D7
type H86C = :* (:* (:* D2 D1) D5) D6
type D2156 = :* (:* (:* D2 D1) D5) D6
type O4154 = :* (:* (:* D2 D1) D5) D6
type H86B = :* (:* (:* D2 D1) D5) D5
type D2155 = :* (:* (:* D2 D1) D5) D5
type O4153 = :* (:* (:* D2 D1) D5) D5
type H86A = :* (:* (:* D2 D1) D5) D4
type D2154 = :* (:* (:* D2 D1) D5) D4
type O4152 = :* (:* (:* D2 D1) D5) D4
type H869 = :* (:* (:* D2 D1) D5) D3
type D2153 = :* (:* (:* D2 D1) D5) D3
type O4151 = :* (:* (:* D2 D1) D5) D3
type H868 = :* (:* (:* D2 D1) D5) D2
type D2152 = :* (:* (:* D2 D1) D5) D2
type O4150 = :* (:* (:* D2 D1) D5) D2
type H867 = :* (:* (:* D2 D1) D5) D1
type D2151 = :* (:* (:* D2 D1) D5) D1
type O4147 = :* (:* (:* D2 D1) D5) D1
type H866 = :* (:* (:* D2 D1) D5) D0
type D2150 = :* (:* (:* D2 D1) D5) D0
type O4146 = :* (:* (:* D2 D1) D5) D0
type H865 = :* (:* (:* D2 D1) D4) D9
type D2149 = :* (:* (:* D2 D1) D4) D9
type O4145 = :* (:* (:* D2 D1) D4) D9
type H864 = :* (:* (:* D2 D1) D4) D8
type D2148 = :* (:* (:* D2 D1) D4) D8
type O4144 = :* (:* (:* D2 D1) D4) D8
type H863 = :* (:* (:* D2 D1) D4) D7
type D2147 = :* (:* (:* D2 D1) D4) D7
type O4143 = :* (:* (:* D2 D1) D4) D7
type H862 = :* (:* (:* D2 D1) D4) D6
type D2146 = :* (:* (:* D2 D1) D4) D6
type O4142 = :* (:* (:* D2 D1) D4) D6
type H861 = :* (:* (:* D2 D1) D4) D5
type D2145 = :* (:* (:* D2 D1) D4) D5
type O4141 = :* (:* (:* D2 D1) D4) D5
type H860 = :* (:* (:* D2 D1) D4) D4
type D2144 = :* (:* (:* D2 D1) D4) D4
type O4140 = :* (:* (:* D2 D1) D4) D4
type H85F = :* (:* (:* D2 D1) D4) D3
type D2143 = :* (:* (:* D2 D1) D4) D3
type O4137 = :* (:* (:* D2 D1) D4) D3
type H85E = :* (:* (:* D2 D1) D4) D2
type D2142 = :* (:* (:* D2 D1) D4) D2
type O4136 = :* (:* (:* D2 D1) D4) D2
type H85D = :* (:* (:* D2 D1) D4) D1
type D2141 = :* (:* (:* D2 D1) D4) D1
type O4135 = :* (:* (:* D2 D1) D4) D1
type H85C = :* (:* (:* D2 D1) D4) D0
type D2140 = :* (:* (:* D2 D1) D4) D0
type O4134 = :* (:* (:* D2 D1) D4) D0
type H85B = :* (:* (:* D2 D1) D3) D9
type D2139 = :* (:* (:* D2 D1) D3) D9
type O4133 = :* (:* (:* D2 D1) D3) D9
type H85A = :* (:* (:* D2 D1) D3) D8
type D2138 = :* (:* (:* D2 D1) D3) D8
type O4132 = :* (:* (:* D2 D1) D3) D8
type H859 = :* (:* (:* D2 D1) D3) D7
type D2137 = :* (:* (:* D2 D1) D3) D7
type O4131 = :* (:* (:* D2 D1) D3) D7
type H858 = :* (:* (:* D2 D1) D3) D6
type D2136 = :* (:* (:* D2 D1) D3) D6
type O4130 = :* (:* (:* D2 D1) D3) D6
type H857 = :* (:* (:* D2 D1) D3) D5
type D2135 = :* (:* (:* D2 D1) D3) D5
type O4127 = :* (:* (:* D2 D1) D3) D5
type H856 = :* (:* (:* D2 D1) D3) D4
type D2134 = :* (:* (:* D2 D1) D3) D4
type O4126 = :* (:* (:* D2 D1) D3) D4
type H855 = :* (:* (:* D2 D1) D3) D3
type D2133 = :* (:* (:* D2 D1) D3) D3
type O4125 = :* (:* (:* D2 D1) D3) D3
type H854 = :* (:* (:* D2 D1) D3) D2
type D2132 = :* (:* (:* D2 D1) D3) D2
type O4124 = :* (:* (:* D2 D1) D3) D2
type H853 = :* (:* (:* D2 D1) D3) D1
type D2131 = :* (:* (:* D2 D1) D3) D1
type O4123 = :* (:* (:* D2 D1) D3) D1
type H852 = :* (:* (:* D2 D1) D3) D0
type D2130 = :* (:* (:* D2 D1) D3) D0
type O4122 = :* (:* (:* D2 D1) D3) D0
type H851 = :* (:* (:* D2 D1) D2) D9
type D2129 = :* (:* (:* D2 D1) D2) D9
type O4121 = :* (:* (:* D2 D1) D2) D9
type H850 = :* (:* (:* D2 D1) D2) D8
type D2128 = :* (:* (:* D2 D1) D2) D8
type O4120 = :* (:* (:* D2 D1) D2) D8
type H84F = :* (:* (:* D2 D1) D2) D7
type D2127 = :* (:* (:* D2 D1) D2) D7
type O4117 = :* (:* (:* D2 D1) D2) D7
type H84E = :* (:* (:* D2 D1) D2) D6
type D2126 = :* (:* (:* D2 D1) D2) D6
type O4116 = :* (:* (:* D2 D1) D2) D6
type H84D = :* (:* (:* D2 D1) D2) D5
type D2125 = :* (:* (:* D2 D1) D2) D5
type O4115 = :* (:* (:* D2 D1) D2) D5
type H84C = :* (:* (:* D2 D1) D2) D4
type D2124 = :* (:* (:* D2 D1) D2) D4
type O4114 = :* (:* (:* D2 D1) D2) D4
type H84B = :* (:* (:* D2 D1) D2) D3
type D2123 = :* (:* (:* D2 D1) D2) D3
type O4113 = :* (:* (:* D2 D1) D2) D3
type H84A = :* (:* (:* D2 D1) D2) D2
type D2122 = :* (:* (:* D2 D1) D2) D2
type O4112 = :* (:* (:* D2 D1) D2) D2
type H849 = :* (:* (:* D2 D1) D2) D1
type D2121 = :* (:* (:* D2 D1) D2) D1
type O4111 = :* (:* (:* D2 D1) D2) D1
type H848 = :* (:* (:* D2 D1) D2) D0
type D2120 = :* (:* (:* D2 D1) D2) D0
type O4110 = :* (:* (:* D2 D1) D2) D0
type H847 = :* (:* (:* D2 D1) D1) D9
type D2119 = :* (:* (:* D2 D1) D1) D9
type O4107 = :* (:* (:* D2 D1) D1) D9
type H846 = :* (:* (:* D2 D1) D1) D8
type D2118 = :* (:* (:* D2 D1) D1) D8
type O4106 = :* (:* (:* D2 D1) D1) D8
type H845 = :* (:* (:* D2 D1) D1) D7
type D2117 = :* (:* (:* D2 D1) D1) D7
type O4105 = :* (:* (:* D2 D1) D1) D7
type H844 = :* (:* (:* D2 D1) D1) D6
type D2116 = :* (:* (:* D2 D1) D1) D6
type O4104 = :* (:* (:* D2 D1) D1) D6
type H843 = :* (:* (:* D2 D1) D1) D5
type D2115 = :* (:* (:* D2 D1) D1) D5
type O4103 = :* (:* (:* D2 D1) D1) D5
type H842 = :* (:* (:* D2 D1) D1) D4
type D2114 = :* (:* (:* D2 D1) D1) D4
type O4102 = :* (:* (:* D2 D1) D1) D4
type H841 = :* (:* (:* D2 D1) D1) D3
type D2113 = :* (:* (:* D2 D1) D1) D3
type O4101 = :* (:* (:* D2 D1) D1) D3
type H840 = :* (:* (:* D2 D1) D1) D2
type D2112 = :* (:* (:* D2 D1) D1) D2
type O4100 = :* (:* (:* D2 D1) D1) D2
type H83F = :* (:* (:* D2 D1) D1) D1
type D2111 = :* (:* (:* D2 D1) D1) D1
type O4077 = :* (:* (:* D2 D1) D1) D1
type H83E = :* (:* (:* D2 D1) D1) D0
type D2110 = :* (:* (:* D2 D1) D1) D0
type O4076 = :* (:* (:* D2 D1) D1) D0
type H83D = :* (:* (:* D2 D1) D0) D9
type D2109 = :* (:* (:* D2 D1) D0) D9
type O4075 = :* (:* (:* D2 D1) D0) D9
type H83C = :* (:* (:* D2 D1) D0) D8
type D2108 = :* (:* (:* D2 D1) D0) D8
type O4074 = :* (:* (:* D2 D1) D0) D8
type H83B = :* (:* (:* D2 D1) D0) D7
type D2107 = :* (:* (:* D2 D1) D0) D7
type O4073 = :* (:* (:* D2 D1) D0) D7
type H83A = :* (:* (:* D2 D1) D0) D6
type D2106 = :* (:* (:* D2 D1) D0) D6
type O4072 = :* (:* (:* D2 D1) D0) D6
type H839 = :* (:* (:* D2 D1) D0) D5
type D2105 = :* (:* (:* D2 D1) D0) D5
type O4071 = :* (:* (:* D2 D1) D0) D5
type H838 = :* (:* (:* D2 D1) D0) D4
type D2104 = :* (:* (:* D2 D1) D0) D4
type O4070 = :* (:* (:* D2 D1) D0) D4
type H837 = :* (:* (:* D2 D1) D0) D3
type D2103 = :* (:* (:* D2 D1) D0) D3
type O4067 = :* (:* (:* D2 D1) D0) D3
type H836 = :* (:* (:* D2 D1) D0) D2
type D2102 = :* (:* (:* D2 D1) D0) D2
type O4066 = :* (:* (:* D2 D1) D0) D2
type H835 = :* (:* (:* D2 D1) D0) D1
type D2101 = :* (:* (:* D2 D1) D0) D1
type O4065 = :* (:* (:* D2 D1) D0) D1
type H834 = :* (:* (:* D2 D1) D0) D0
type D2100 = :* (:* (:* D2 D1) D0) D0
type O4064 = :* (:* (:* D2 D1) D0) D0
type H833 = :* (:* (:* D2 D0) D9) D9
type D2099 = :* (:* (:* D2 D0) D9) D9
type O4063 = :* (:* (:* D2 D0) D9) D9
type H832 = :* (:* (:* D2 D0) D9) D8
type D2098 = :* (:* (:* D2 D0) D9) D8
type O4062 = :* (:* (:* D2 D0) D9) D8
type H831 = :* (:* (:* D2 D0) D9) D7
type D2097 = :* (:* (:* D2 D0) D9) D7
type O4061 = :* (:* (:* D2 D0) D9) D7
type H830 = :* (:* (:* D2 D0) D9) D6
type D2096 = :* (:* (:* D2 D0) D9) D6
type O4060 = :* (:* (:* D2 D0) D9) D6
type H82F = :* (:* (:* D2 D0) D9) D5
type D2095 = :* (:* (:* D2 D0) D9) D5
type O4057 = :* (:* (:* D2 D0) D9) D5
type H82E = :* (:* (:* D2 D0) D9) D4
type D2094 = :* (:* (:* D2 D0) D9) D4
type O4056 = :* (:* (:* D2 D0) D9) D4
type H82D = :* (:* (:* D2 D0) D9) D3
type D2093 = :* (:* (:* D2 D0) D9) D3
type O4055 = :* (:* (:* D2 D0) D9) D3
type H82C = :* (:* (:* D2 D0) D9) D2
type D2092 = :* (:* (:* D2 D0) D9) D2
type O4054 = :* (:* (:* D2 D0) D9) D2
type H82B = :* (:* (:* D2 D0) D9) D1
type D2091 = :* (:* (:* D2 D0) D9) D1
type O4053 = :* (:* (:* D2 D0) D9) D1
type H82A = :* (:* (:* D2 D0) D9) D0
type D2090 = :* (:* (:* D2 D0) D9) D0
type O4052 = :* (:* (:* D2 D0) D9) D0
type H829 = :* (:* (:* D2 D0) D8) D9
type D2089 = :* (:* (:* D2 D0) D8) D9
type O4051 = :* (:* (:* D2 D0) D8) D9
type H828 = :* (:* (:* D2 D0) D8) D8
type D2088 = :* (:* (:* D2 D0) D8) D8
type O4050 = :* (:* (:* D2 D0) D8) D8
type H827 = :* (:* (:* D2 D0) D8) D7
type D2087 = :* (:* (:* D2 D0) D8) D7
type O4047 = :* (:* (:* D2 D0) D8) D7
type H826 = :* (:* (:* D2 D0) D8) D6
type D2086 = :* (:* (:* D2 D0) D8) D6
type O4046 = :* (:* (:* D2 D0) D8) D6
type H825 = :* (:* (:* D2 D0) D8) D5
type D2085 = :* (:* (:* D2 D0) D8) D5
type O4045 = :* (:* (:* D2 D0) D8) D5
type H824 = :* (:* (:* D2 D0) D8) D4
type D2084 = :* (:* (:* D2 D0) D8) D4
type O4044 = :* (:* (:* D2 D0) D8) D4
type H823 = :* (:* (:* D2 D0) D8) D3
type D2083 = :* (:* (:* D2 D0) D8) D3
type O4043 = :* (:* (:* D2 D0) D8) D3
type H822 = :* (:* (:* D2 D0) D8) D2
type D2082 = :* (:* (:* D2 D0) D8) D2
type O4042 = :* (:* (:* D2 D0) D8) D2
type H821 = :* (:* (:* D2 D0) D8) D1
type D2081 = :* (:* (:* D2 D0) D8) D1
type O4041 = :* (:* (:* D2 D0) D8) D1
type H820 = :* (:* (:* D2 D0) D8) D0
type D2080 = :* (:* (:* D2 D0) D8) D0
type O4040 = :* (:* (:* D2 D0) D8) D0
type H81F = :* (:* (:* D2 D0) D7) D9
type D2079 = :* (:* (:* D2 D0) D7) D9
type O4037 = :* (:* (:* D2 D0) D7) D9
type H81E = :* (:* (:* D2 D0) D7) D8
type D2078 = :* (:* (:* D2 D0) D7) D8
type O4036 = :* (:* (:* D2 D0) D7) D8
type H81D = :* (:* (:* D2 D0) D7) D7
type D2077 = :* (:* (:* D2 D0) D7) D7
type O4035 = :* (:* (:* D2 D0) D7) D7
type H81C = :* (:* (:* D2 D0) D7) D6
type D2076 = :* (:* (:* D2 D0) D7) D6
type O4034 = :* (:* (:* D2 D0) D7) D6
type H81B = :* (:* (:* D2 D0) D7) D5
type D2075 = :* (:* (:* D2 D0) D7) D5
type O4033 = :* (:* (:* D2 D0) D7) D5
type H81A = :* (:* (:* D2 D0) D7) D4
type D2074 = :* (:* (:* D2 D0) D7) D4
type O4032 = :* (:* (:* D2 D0) D7) D4
type H819 = :* (:* (:* D2 D0) D7) D3
type D2073 = :* (:* (:* D2 D0) D7) D3
type O4031 = :* (:* (:* D2 D0) D7) D3
type H818 = :* (:* (:* D2 D0) D7) D2
type D2072 = :* (:* (:* D2 D0) D7) D2
type O4030 = :* (:* (:* D2 D0) D7) D2
type H817 = :* (:* (:* D2 D0) D7) D1
type D2071 = :* (:* (:* D2 D0) D7) D1
type O4027 = :* (:* (:* D2 D0) D7) D1
type H816 = :* (:* (:* D2 D0) D7) D0
type D2070 = :* (:* (:* D2 D0) D7) D0
type O4026 = :* (:* (:* D2 D0) D7) D0
type H815 = :* (:* (:* D2 D0) D6) D9
type D2069 = :* (:* (:* D2 D0) D6) D9
type O4025 = :* (:* (:* D2 D0) D6) D9
type H814 = :* (:* (:* D2 D0) D6) D8
type D2068 = :* (:* (:* D2 D0) D6) D8
type O4024 = :* (:* (:* D2 D0) D6) D8
type H813 = :* (:* (:* D2 D0) D6) D7
type D2067 = :* (:* (:* D2 D0) D6) D7
type O4023 = :* (:* (:* D2 D0) D6) D7
type H812 = :* (:* (:* D2 D0) D6) D6
type D2066 = :* (:* (:* D2 D0) D6) D6
type O4022 = :* (:* (:* D2 D0) D6) D6
type H811 = :* (:* (:* D2 D0) D6) D5
type D2065 = :* (:* (:* D2 D0) D6) D5
type O4021 = :* (:* (:* D2 D0) D6) D5
type H810 = :* (:* (:* D2 D0) D6) D4
type D2064 = :* (:* (:* D2 D0) D6) D4
type O4020 = :* (:* (:* D2 D0) D6) D4
type H80F = :* (:* (:* D2 D0) D6) D3
type D2063 = :* (:* (:* D2 D0) D6) D3
type O4017 = :* (:* (:* D2 D0) D6) D3
type H80E = :* (:* (:* D2 D0) D6) D2
type D2062 = :* (:* (:* D2 D0) D6) D2
type O4016 = :* (:* (:* D2 D0) D6) D2
type H80D = :* (:* (:* D2 D0) D6) D1
type D2061 = :* (:* (:* D2 D0) D6) D1
type O4015 = :* (:* (:* D2 D0) D6) D1
type H80C = :* (:* (:* D2 D0) D6) D0
type D2060 = :* (:* (:* D2 D0) D6) D0
type O4014 = :* (:* (:* D2 D0) D6) D0
type H80B = :* (:* (:* D2 D0) D5) D9
type D2059 = :* (:* (:* D2 D0) D5) D9
type O4013 = :* (:* (:* D2 D0) D5) D9
type H80A = :* (:* (:* D2 D0) D5) D8
type D2058 = :* (:* (:* D2 D0) D5) D8
type O4012 = :* (:* (:* D2 D0) D5) D8
type H809 = :* (:* (:* D2 D0) D5) D7
type D2057 = :* (:* (:* D2 D0) D5) D7
type O4011 = :* (:* (:* D2 D0) D5) D7
type H808 = :* (:* (:* D2 D0) D5) D6
type D2056 = :* (:* (:* D2 D0) D5) D6
type O4010 = :* (:* (:* D2 D0) D5) D6
type H807 = :* (:* (:* D2 D0) D5) D5
type D2055 = :* (:* (:* D2 D0) D5) D5
type O4007 = :* (:* (:* D2 D0) D5) D5
type H806 = :* (:* (:* D2 D0) D5) D4
type D2054 = :* (:* (:* D2 D0) D5) D4
type O4006 = :* (:* (:* D2 D0) D5) D4
type H805 = :* (:* (:* D2 D0) D5) D3
type D2053 = :* (:* (:* D2 D0) D5) D3
type O4005 = :* (:* (:* D2 D0) D5) D3
type H804 = :* (:* (:* D2 D0) D5) D2
type D2052 = :* (:* (:* D2 D0) D5) D2
type O4004 = :* (:* (:* D2 D0) D5) D2
type H803 = :* (:* (:* D2 D0) D5) D1
type D2051 = :* (:* (:* D2 D0) D5) D1
type O4003 = :* (:* (:* D2 D0) D5) D1
type H802 = :* (:* (:* D2 D0) D5) D0
type D2050 = :* (:* (:* D2 D0) D5) D0
type O4002 = :* (:* (:* D2 D0) D5) D0
type H801 = :* (:* (:* D2 D0) D4) D9
type D2049 = :* (:* (:* D2 D0) D4) D9
type O4001 = :* (:* (:* D2 D0) D4) D9
type H800 = :* (:* (:* D2 D0) D4) D8
type D2048 = :* (:* (:* D2 D0) D4) D8
type O4000 = :* (:* (:* D2 D0) D4) D8
type H7FF = :* (:* (:* D2 D0) D4) D7
type D2047 = :* (:* (:* D2 D0) D4) D7
type O3777 = :* (:* (:* D2 D0) D4) D7
type H7FE = :* (:* (:* D2 D0) D4) D6
type D2046 = :* (:* (:* D2 D0) D4) D6
type O3776 = :* (:* (:* D2 D0) D4) D6
type H7FD = :* (:* (:* D2 D0) D4) D5
type D2045 = :* (:* (:* D2 D0) D4) D5
type O3775 = :* (:* (:* D2 D0) D4) D5
type H7FC = :* (:* (:* D2 D0) D4) D4
type D2044 = :* (:* (:* D2 D0) D4) D4
type O3774 = :* (:* (:* D2 D0) D4) D4
type H7FB = :* (:* (:* D2 D0) D4) D3
type D2043 = :* (:* (:* D2 D0) D4) D3
type O3773 = :* (:* (:* D2 D0) D4) D3
type H7FA = :* (:* (:* D2 D0) D4) D2
type D2042 = :* (:* (:* D2 D0) D4) D2
type O3772 = :* (:* (:* D2 D0) D4) D2
type H7F9 = :* (:* (:* D2 D0) D4) D1
type D2041 = :* (:* (:* D2 D0) D4) D1
type O3771 = :* (:* (:* D2 D0) D4) D1
type H7F8 = :* (:* (:* D2 D0) D4) D0
type D2040 = :* (:* (:* D2 D0) D4) D0
type O3770 = :* (:* (:* D2 D0) D4) D0
type H7F7 = :* (:* (:* D2 D0) D3) D9
type D2039 = :* (:* (:* D2 D0) D3) D9
type O3767 = :* (:* (:* D2 D0) D3) D9
type H7F6 = :* (:* (:* D2 D0) D3) D8
type D2038 = :* (:* (:* D2 D0) D3) D8
type O3766 = :* (:* (:* D2 D0) D3) D8
type H7F5 = :* (:* (:* D2 D0) D3) D7
type D2037 = :* (:* (:* D2 D0) D3) D7
type O3765 = :* (:* (:* D2 D0) D3) D7
type H7F4 = :* (:* (:* D2 D0) D3) D6
type D2036 = :* (:* (:* D2 D0) D3) D6
type O3764 = :* (:* (:* D2 D0) D3) D6
type H7F3 = :* (:* (:* D2 D0) D3) D5
type D2035 = :* (:* (:* D2 D0) D3) D5
type O3763 = :* (:* (:* D2 D0) D3) D5
type H7F2 = :* (:* (:* D2 D0) D3) D4
type D2034 = :* (:* (:* D2 D0) D3) D4
type O3762 = :* (:* (:* D2 D0) D3) D4
type H7F1 = :* (:* (:* D2 D0) D3) D3
type D2033 = :* (:* (:* D2 D0) D3) D3
type O3761 = :* (:* (:* D2 D0) D3) D3
type H7F0 = :* (:* (:* D2 D0) D3) D2
type D2032 = :* (:* (:* D2 D0) D3) D2
type O3760 = :* (:* (:* D2 D0) D3) D2
type H7EF = :* (:* (:* D2 D0) D3) D1
type D2031 = :* (:* (:* D2 D0) D3) D1
type O3757 = :* (:* (:* D2 D0) D3) D1
type H7EE = :* (:* (:* D2 D0) D3) D0
type D2030 = :* (:* (:* D2 D0) D3) D0
type O3756 = :* (:* (:* D2 D0) D3) D0
type H7ED = :* (:* (:* D2 D0) D2) D9
type D2029 = :* (:* (:* D2 D0) D2) D9
type O3755 = :* (:* (:* D2 D0) D2) D9
type H7EC = :* (:* (:* D2 D0) D2) D8
type D2028 = :* (:* (:* D2 D0) D2) D8
type O3754 = :* (:* (:* D2 D0) D2) D8
type H7EB = :* (:* (:* D2 D0) D2) D7
type D2027 = :* (:* (:* D2 D0) D2) D7
type O3753 = :* (:* (:* D2 D0) D2) D7
type H7EA = :* (:* (:* D2 D0) D2) D6
type D2026 = :* (:* (:* D2 D0) D2) D6
type O3752 = :* (:* (:* D2 D0) D2) D6
type H7E9 = :* (:* (:* D2 D0) D2) D5
type D2025 = :* (:* (:* D2 D0) D2) D5
type O3751 = :* (:* (:* D2 D0) D2) D5
type H7E8 = :* (:* (:* D2 D0) D2) D4
type D2024 = :* (:* (:* D2 D0) D2) D4
type O3750 = :* (:* (:* D2 D0) D2) D4
type H7E7 = :* (:* (:* D2 D0) D2) D3
type D2023 = :* (:* (:* D2 D0) D2) D3
type O3747 = :* (:* (:* D2 D0) D2) D3
type H7E6 = :* (:* (:* D2 D0) D2) D2
type D2022 = :* (:* (:* D2 D0) D2) D2
type O3746 = :* (:* (:* D2 D0) D2) D2
type H7E5 = :* (:* (:* D2 D0) D2) D1
type D2021 = :* (:* (:* D2 D0) D2) D1
type O3745 = :* (:* (:* D2 D0) D2) D1
type H7E4 = :* (:* (:* D2 D0) D2) D0
type D2020 = :* (:* (:* D2 D0) D2) D0
type O3744 = :* (:* (:* D2 D0) D2) D0
type H7E3 = :* (:* (:* D2 D0) D1) D9
type D2019 = :* (:* (:* D2 D0) D1) D9
type O3743 = :* (:* (:* D2 D0) D1) D9
type H7E2 = :* (:* (:* D2 D0) D1) D8
type D2018 = :* (:* (:* D2 D0) D1) D8
type O3742 = :* (:* (:* D2 D0) D1) D8
type H7E1 = :* (:* (:* D2 D0) D1) D7
type D2017 = :* (:* (:* D2 D0) D1) D7
type O3741 = :* (:* (:* D2 D0) D1) D7
type H7E0 = :* (:* (:* D2 D0) D1) D6
type D2016 = :* (:* (:* D2 D0) D1) D6
type O3740 = :* (:* (:* D2 D0) D1) D6
type H7DF = :* (:* (:* D2 D0) D1) D5
type D2015 = :* (:* (:* D2 D0) D1) D5
type O3737 = :* (:* (:* D2 D0) D1) D5
type H7DE = :* (:* (:* D2 D0) D1) D4
type D2014 = :* (:* (:* D2 D0) D1) D4
type O3736 = :* (:* (:* D2 D0) D1) D4
type H7DD = :* (:* (:* D2 D0) D1) D3
type D2013 = :* (:* (:* D2 D0) D1) D3
type O3735 = :* (:* (:* D2 D0) D1) D3
type H7DC = :* (:* (:* D2 D0) D1) D2
type D2012 = :* (:* (:* D2 D0) D1) D2
type O3734 = :* (:* (:* D2 D0) D1) D2
type H7DB = :* (:* (:* D2 D0) D1) D1
type D2011 = :* (:* (:* D2 D0) D1) D1
type O3733 = :* (:* (:* D2 D0) D1) D1
type H7DA = :* (:* (:* D2 D0) D1) D0
type D2010 = :* (:* (:* D2 D0) D1) D0
type O3732 = :* (:* (:* D2 D0) D1) D0
type H7D9 = :* (:* (:* D2 D0) D0) D9
type D2009 = :* (:* (:* D2 D0) D0) D9
type O3731 = :* (:* (:* D2 D0) D0) D9
type H7D8 = :* (:* (:* D2 D0) D0) D8
type D2008 = :* (:* (:* D2 D0) D0) D8
type O3730 = :* (:* (:* D2 D0) D0) D8
type H7D7 = :* (:* (:* D2 D0) D0) D7
type D2007 = :* (:* (:* D2 D0) D0) D7
type O3727 = :* (:* (:* D2 D0) D0) D7
type H7D6 = :* (:* (:* D2 D0) D0) D6
type D2006 = :* (:* (:* D2 D0) D0) D6
type O3726 = :* (:* (:* D2 D0) D0) D6
type H7D5 = :* (:* (:* D2 D0) D0) D5
type D2005 = :* (:* (:* D2 D0) D0) D5
type O3725 = :* (:* (:* D2 D0) D0) D5
type H7D4 = :* (:* (:* D2 D0) D0) D4
type D2004 = :* (:* (:* D2 D0) D0) D4
type O3724 = :* (:* (:* D2 D0) D0) D4
type H7D3 = :* (:* (:* D2 D0) D0) D3
type D2003 = :* (:* (:* D2 D0) D0) D3
type O3723 = :* (:* (:* D2 D0) D0) D3
type H7D2 = :* (:* (:* D2 D0) D0) D2
type D2002 = :* (:* (:* D2 D0) D0) D2
type O3722 = :* (:* (:* D2 D0) D0) D2
type H7D1 = :* (:* (:* D2 D0) D0) D1
type D2001 = :* (:* (:* D2 D0) D0) D1
type O3721 = :* (:* (:* D2 D0) D0) D1
type H7D0 = :* (:* (:* D2 D0) D0) D0
type D2000 = :* (:* (:* D2 D0) D0) D0
type O3720 = :* (:* (:* D2 D0) D0) D0
type H7CF = :* (:* (:* D1 D9) D9) D9
type D1999 = :* (:* (:* D1 D9) D9) D9
type O3717 = :* (:* (:* D1 D9) D9) D9
type H7CE = :* (:* (:* D1 D9) D9) D8
type D1998 = :* (:* (:* D1 D9) D9) D8
type O3716 = :* (:* (:* D1 D9) D9) D8
type H7CD = :* (:* (:* D1 D9) D9) D7
type D1997 = :* (:* (:* D1 D9) D9) D7
type O3715 = :* (:* (:* D1 D9) D9) D7
type H7CC = :* (:* (:* D1 D9) D9) D6
type D1996 = :* (:* (:* D1 D9) D9) D6
type O3714 = :* (:* (:* D1 D9) D9) D6
type H7CB = :* (:* (:* D1 D9) D9) D5
type D1995 = :* (:* (:* D1 D9) D9) D5
type O3713 = :* (:* (:* D1 D9) D9) D5
type H7CA = :* (:* (:* D1 D9) D9) D4
type D1994 = :* (:* (:* D1 D9) D9) D4
type O3712 = :* (:* (:* D1 D9) D9) D4
type H7C9 = :* (:* (:* D1 D9) D9) D3
type D1993 = :* (:* (:* D1 D9) D9) D3
type O3711 = :* (:* (:* D1 D9) D9) D3
type H7C8 = :* (:* (:* D1 D9) D9) D2
type D1992 = :* (:* (:* D1 D9) D9) D2
type O3710 = :* (:* (:* D1 D9) D9) D2
type H7C7 = :* (:* (:* D1 D9) D9) D1
type D1991 = :* (:* (:* D1 D9) D9) D1
type O3707 = :* (:* (:* D1 D9) D9) D1
type H7C6 = :* (:* (:* D1 D9) D9) D0
type D1990 = :* (:* (:* D1 D9) D9) D0
type O3706 = :* (:* (:* D1 D9) D9) D0
type H7C5 = :* (:* (:* D1 D9) D8) D9
type D1989 = :* (:* (:* D1 D9) D8) D9
type O3705 = :* (:* (:* D1 D9) D8) D9
type H7C4 = :* (:* (:* D1 D9) D8) D8
type D1988 = :* (:* (:* D1 D9) D8) D8
type O3704 = :* (:* (:* D1 D9) D8) D8
type H7C3 = :* (:* (:* D1 D9) D8) D7
type D1987 = :* (:* (:* D1 D9) D8) D7
type O3703 = :* (:* (:* D1 D9) D8) D7
type H7C2 = :* (:* (:* D1 D9) D8) D6
type D1986 = :* (:* (:* D1 D9) D8) D6
type O3702 = :* (:* (:* D1 D9) D8) D6
type H7C1 = :* (:* (:* D1 D9) D8) D5
type D1985 = :* (:* (:* D1 D9) D8) D5
type O3701 = :* (:* (:* D1 D9) D8) D5
type H7C0 = :* (:* (:* D1 D9) D8) D4
type D1984 = :* (:* (:* D1 D9) D8) D4
type O3700 = :* (:* (:* D1 D9) D8) D4
type H7BF = :* (:* (:* D1 D9) D8) D3
type D1983 = :* (:* (:* D1 D9) D8) D3
type O3677 = :* (:* (:* D1 D9) D8) D3
type H7BE = :* (:* (:* D1 D9) D8) D2
type D1982 = :* (:* (:* D1 D9) D8) D2
type O3676 = :* (:* (:* D1 D9) D8) D2
type H7BD = :* (:* (:* D1 D9) D8) D1
type D1981 = :* (:* (:* D1 D9) D8) D1
type O3675 = :* (:* (:* D1 D9) D8) D1
type H7BC = :* (:* (:* D1 D9) D8) D0
type D1980 = :* (:* (:* D1 D9) D8) D0
type O3674 = :* (:* (:* D1 D9) D8) D0
type H7BB = :* (:* (:* D1 D9) D7) D9
type D1979 = :* (:* (:* D1 D9) D7) D9
type O3673 = :* (:* (:* D1 D9) D7) D9
type H7BA = :* (:* (:* D1 D9) D7) D8
type D1978 = :* (:* (:* D1 D9) D7) D8
type O3672 = :* (:* (:* D1 D9) D7) D8
type H7B9 = :* (:* (:* D1 D9) D7) D7
type D1977 = :* (:* (:* D1 D9) D7) D7
type O3671 = :* (:* (:* D1 D9) D7) D7
type H7B8 = :* (:* (:* D1 D9) D7) D6
type D1976 = :* (:* (:* D1 D9) D7) D6
type O3670 = :* (:* (:* D1 D9) D7) D6
type H7B7 = :* (:* (:* D1 D9) D7) D5
type D1975 = :* (:* (:* D1 D9) D7) D5
type O3667 = :* (:* (:* D1 D9) D7) D5
type H7B6 = :* (:* (:* D1 D9) D7) D4
type D1974 = :* (:* (:* D1 D9) D7) D4
type O3666 = :* (:* (:* D1 D9) D7) D4
type H7B5 = :* (:* (:* D1 D9) D7) D3
type D1973 = :* (:* (:* D1 D9) D7) D3
type O3665 = :* (:* (:* D1 D9) D7) D3
type H7B4 = :* (:* (:* D1 D9) D7) D2
type D1972 = :* (:* (:* D1 D9) D7) D2
type O3664 = :* (:* (:* D1 D9) D7) D2
type H7B3 = :* (:* (:* D1 D9) D7) D1
type D1971 = :* (:* (:* D1 D9) D7) D1
type O3663 = :* (:* (:* D1 D9) D7) D1
type H7B2 = :* (:* (:* D1 D9) D7) D0
type D1970 = :* (:* (:* D1 D9) D7) D0
type O3662 = :* (:* (:* D1 D9) D7) D0
type H7B1 = :* (:* (:* D1 D9) D6) D9
type D1969 = :* (:* (:* D1 D9) D6) D9
type O3661 = :* (:* (:* D1 D9) D6) D9
type H7B0 = :* (:* (:* D1 D9) D6) D8
type D1968 = :* (:* (:* D1 D9) D6) D8
type O3660 = :* (:* (:* D1 D9) D6) D8
type H7AF = :* (:* (:* D1 D9) D6) D7
type D1967 = :* (:* (:* D1 D9) D6) D7
type O3657 = :* (:* (:* D1 D9) D6) D7
type H7AE = :* (:* (:* D1 D9) D6) D6
type D1966 = :* (:* (:* D1 D9) D6) D6
type O3656 = :* (:* (:* D1 D9) D6) D6
type H7AD = :* (:* (:* D1 D9) D6) D5
type D1965 = :* (:* (:* D1 D9) D6) D5
type O3655 = :* (:* (:* D1 D9) D6) D5
type H7AC = :* (:* (:* D1 D9) D6) D4
type D1964 = :* (:* (:* D1 D9) D6) D4
type O3654 = :* (:* (:* D1 D9) D6) D4
type H7AB = :* (:* (:* D1 D9) D6) D3
type D1963 = :* (:* (:* D1 D9) D6) D3
type O3653 = :* (:* (:* D1 D9) D6) D3
type H7AA = :* (:* (:* D1 D9) D6) D2
type D1962 = :* (:* (:* D1 D9) D6) D2
type O3652 = :* (:* (:* D1 D9) D6) D2
type H7A9 = :* (:* (:* D1 D9) D6) D1
type D1961 = :* (:* (:* D1 D9) D6) D1
type O3651 = :* (:* (:* D1 D9) D6) D1
type H7A8 = :* (:* (:* D1 D9) D6) D0
type D1960 = :* (:* (:* D1 D9) D6) D0
type O3650 = :* (:* (:* D1 D9) D6) D0
type H7A7 = :* (:* (:* D1 D9) D5) D9
type D1959 = :* (:* (:* D1 D9) D5) D9
type O3647 = :* (:* (:* D1 D9) D5) D9
type H7A6 = :* (:* (:* D1 D9) D5) D8
type D1958 = :* (:* (:* D1 D9) D5) D8
type O3646 = :* (:* (:* D1 D9) D5) D8
type H7A5 = :* (:* (:* D1 D9) D5) D7
type D1957 = :* (:* (:* D1 D9) D5) D7
type O3645 = :* (:* (:* D1 D9) D5) D7
type H7A4 = :* (:* (:* D1 D9) D5) D6
type D1956 = :* (:* (:* D1 D9) D5) D6
type O3644 = :* (:* (:* D1 D9) D5) D6
type H7A3 = :* (:* (:* D1 D9) D5) D5
type D1955 = :* (:* (:* D1 D9) D5) D5
type O3643 = :* (:* (:* D1 D9) D5) D5
type H7A2 = :* (:* (:* D1 D9) D5) D4
type D1954 = :* (:* (:* D1 D9) D5) D4
type O3642 = :* (:* (:* D1 D9) D5) D4
type H7A1 = :* (:* (:* D1 D9) D5) D3
type D1953 = :* (:* (:* D1 D9) D5) D3
type O3641 = :* (:* (:* D1 D9) D5) D3
type H7A0 = :* (:* (:* D1 D9) D5) D2
type D1952 = :* (:* (:* D1 D9) D5) D2
type O3640 = :* (:* (:* D1 D9) D5) D2
type H79F = :* (:* (:* D1 D9) D5) D1
type D1951 = :* (:* (:* D1 D9) D5) D1
type O3637 = :* (:* (:* D1 D9) D5) D1
type H79E = :* (:* (:* D1 D9) D5) D0
type D1950 = :* (:* (:* D1 D9) D5) D0
type O3636 = :* (:* (:* D1 D9) D5) D0
type H79D = :* (:* (:* D1 D9) D4) D9
type D1949 = :* (:* (:* D1 D9) D4) D9
type O3635 = :* (:* (:* D1 D9) D4) D9
type H79C = :* (:* (:* D1 D9) D4) D8
type D1948 = :* (:* (:* D1 D9) D4) D8
type O3634 = :* (:* (:* D1 D9) D4) D8
type H79B = :* (:* (:* D1 D9) D4) D7
type D1947 = :* (:* (:* D1 D9) D4) D7
type O3633 = :* (:* (:* D1 D9) D4) D7
type H79A = :* (:* (:* D1 D9) D4) D6
type D1946 = :* (:* (:* D1 D9) D4) D6
type O3632 = :* (:* (:* D1 D9) D4) D6
type H799 = :* (:* (:* D1 D9) D4) D5
type D1945 = :* (:* (:* D1 D9) D4) D5
type O3631 = :* (:* (:* D1 D9) D4) D5
type H798 = :* (:* (:* D1 D9) D4) D4
type D1944 = :* (:* (:* D1 D9) D4) D4
type O3630 = :* (:* (:* D1 D9) D4) D4
type H797 = :* (:* (:* D1 D9) D4) D3
type D1943 = :* (:* (:* D1 D9) D4) D3
type O3627 = :* (:* (:* D1 D9) D4) D3
type H796 = :* (:* (:* D1 D9) D4) D2
type D1942 = :* (:* (:* D1 D9) D4) D2
type O3626 = :* (:* (:* D1 D9) D4) D2
type H795 = :* (:* (:* D1 D9) D4) D1
type D1941 = :* (:* (:* D1 D9) D4) D1
type O3625 = :* (:* (:* D1 D9) D4) D1
type H794 = :* (:* (:* D1 D9) D4) D0
type D1940 = :* (:* (:* D1 D9) D4) D0
type O3624 = :* (:* (:* D1 D9) D4) D0
type H793 = :* (:* (:* D1 D9) D3) D9
type D1939 = :* (:* (:* D1 D9) D3) D9
type O3623 = :* (:* (:* D1 D9) D3) D9
type H792 = :* (:* (:* D1 D9) D3) D8
type D1938 = :* (:* (:* D1 D9) D3) D8
type O3622 = :* (:* (:* D1 D9) D3) D8
type H791 = :* (:* (:* D1 D9) D3) D7
type D1937 = :* (:* (:* D1 D9) D3) D7
type O3621 = :* (:* (:* D1 D9) D3) D7
type H790 = :* (:* (:* D1 D9) D3) D6
type D1936 = :* (:* (:* D1 D9) D3) D6
type O3620 = :* (:* (:* D1 D9) D3) D6
type H78F = :* (:* (:* D1 D9) D3) D5
type D1935 = :* (:* (:* D1 D9) D3) D5
type O3617 = :* (:* (:* D1 D9) D3) D5
type H78E = :* (:* (:* D1 D9) D3) D4
type D1934 = :* (:* (:* D1 D9) D3) D4
type O3616 = :* (:* (:* D1 D9) D3) D4
type H78D = :* (:* (:* D1 D9) D3) D3
type D1933 = :* (:* (:* D1 D9) D3) D3
type O3615 = :* (:* (:* D1 D9) D3) D3
type H78C = :* (:* (:* D1 D9) D3) D2
type D1932 = :* (:* (:* D1 D9) D3) D2
type O3614 = :* (:* (:* D1 D9) D3) D2
type H78B = :* (:* (:* D1 D9) D3) D1
type D1931 = :* (:* (:* D1 D9) D3) D1
type O3613 = :* (:* (:* D1 D9) D3) D1
type H78A = :* (:* (:* D1 D9) D3) D0
type D1930 = :* (:* (:* D1 D9) D3) D0
type O3612 = :* (:* (:* D1 D9) D3) D0
type H789 = :* (:* (:* D1 D9) D2) D9
type D1929 = :* (:* (:* D1 D9) D2) D9
type O3611 = :* (:* (:* D1 D9) D2) D9
type H788 = :* (:* (:* D1 D9) D2) D8
type D1928 = :* (:* (:* D1 D9) D2) D8
type O3610 = :* (:* (:* D1 D9) D2) D8
type H787 = :* (:* (:* D1 D9) D2) D7
type D1927 = :* (:* (:* D1 D9) D2) D7
type O3607 = :* (:* (:* D1 D9) D2) D7
type H786 = :* (:* (:* D1 D9) D2) D6
type D1926 = :* (:* (:* D1 D9) D2) D6
type O3606 = :* (:* (:* D1 D9) D2) D6
type H785 = :* (:* (:* D1 D9) D2) D5
type D1925 = :* (:* (:* D1 D9) D2) D5
type O3605 = :* (:* (:* D1 D9) D2) D5
type H784 = :* (:* (:* D1 D9) D2) D4
type D1924 = :* (:* (:* D1 D9) D2) D4
type O3604 = :* (:* (:* D1 D9) D2) D4
type H783 = :* (:* (:* D1 D9) D2) D3
type D1923 = :* (:* (:* D1 D9) D2) D3
type O3603 = :* (:* (:* D1 D9) D2) D3
type H782 = :* (:* (:* D1 D9) D2) D2
type D1922 = :* (:* (:* D1 D9) D2) D2
type O3602 = :* (:* (:* D1 D9) D2) D2
type H781 = :* (:* (:* D1 D9) D2) D1
type D1921 = :* (:* (:* D1 D9) D2) D1
type O3601 = :* (:* (:* D1 D9) D2) D1
type H780 = :* (:* (:* D1 D9) D2) D0
type D1920 = :* (:* (:* D1 D9) D2) D0
type O3600 = :* (:* (:* D1 D9) D2) D0
type H77F = :* (:* (:* D1 D9) D1) D9
type D1919 = :* (:* (:* D1 D9) D1) D9
type O3577 = :* (:* (:* D1 D9) D1) D9
type H77E = :* (:* (:* D1 D9) D1) D8
type D1918 = :* (:* (:* D1 D9) D1) D8
type O3576 = :* (:* (:* D1 D9) D1) D8
type H77D = :* (:* (:* D1 D9) D1) D7
type D1917 = :* (:* (:* D1 D9) D1) D7
type O3575 = :* (:* (:* D1 D9) D1) D7
type H77C = :* (:* (:* D1 D9) D1) D6
type D1916 = :* (:* (:* D1 D9) D1) D6
type O3574 = :* (:* (:* D1 D9) D1) D6
type H77B = :* (:* (:* D1 D9) D1) D5
type D1915 = :* (:* (:* D1 D9) D1) D5
type O3573 = :* (:* (:* D1 D9) D1) D5
type H77A = :* (:* (:* D1 D9) D1) D4
type D1914 = :* (:* (:* D1 D9) D1) D4
type O3572 = :* (:* (:* D1 D9) D1) D4
type H779 = :* (:* (:* D1 D9) D1) D3
type D1913 = :* (:* (:* D1 D9) D1) D3
type O3571 = :* (:* (:* D1 D9) D1) D3
type H778 = :* (:* (:* D1 D9) D1) D2
type D1912 = :* (:* (:* D1 D9) D1) D2
type O3570 = :* (:* (:* D1 D9) D1) D2
type H777 = :* (:* (:* D1 D9) D1) D1
type D1911 = :* (:* (:* D1 D9) D1) D1
type O3567 = :* (:* (:* D1 D9) D1) D1
type H776 = :* (:* (:* D1 D9) D1) D0
type D1910 = :* (:* (:* D1 D9) D1) D0
type O3566 = :* (:* (:* D1 D9) D1) D0
type H775 = :* (:* (:* D1 D9) D0) D9
type D1909 = :* (:* (:* D1 D9) D0) D9
type O3565 = :* (:* (:* D1 D9) D0) D9
type H774 = :* (:* (:* D1 D9) D0) D8
type D1908 = :* (:* (:* D1 D9) D0) D8
type O3564 = :* (:* (:* D1 D9) D0) D8
type H773 = :* (:* (:* D1 D9) D0) D7
type D1907 = :* (:* (:* D1 D9) D0) D7
type O3563 = :* (:* (:* D1 D9) D0) D7
type H772 = :* (:* (:* D1 D9) D0) D6
type D1906 = :* (:* (:* D1 D9) D0) D6
type O3562 = :* (:* (:* D1 D9) D0) D6
type H771 = :* (:* (:* D1 D9) D0) D5
type D1905 = :* (:* (:* D1 D9) D0) D5
type O3561 = :* (:* (:* D1 D9) D0) D5
type H770 = :* (:* (:* D1 D9) D0) D4
type D1904 = :* (:* (:* D1 D9) D0) D4
type O3560 = :* (:* (:* D1 D9) D0) D4
type H76F = :* (:* (:* D1 D9) D0) D3
type D1903 = :* (:* (:* D1 D9) D0) D3
type O3557 = :* (:* (:* D1 D9) D0) D3
type H76E = :* (:* (:* D1 D9) D0) D2
type D1902 = :* (:* (:* D1 D9) D0) D2
type O3556 = :* (:* (:* D1 D9) D0) D2
type H76D = :* (:* (:* D1 D9) D0) D1
type D1901 = :* (:* (:* D1 D9) D0) D1
type O3555 = :* (:* (:* D1 D9) D0) D1
type H76C = :* (:* (:* D1 D9) D0) D0
type D1900 = :* (:* (:* D1 D9) D0) D0
type O3554 = :* (:* (:* D1 D9) D0) D0
type H76B = :* (:* (:* D1 D8) D9) D9
type D1899 = :* (:* (:* D1 D8) D9) D9
type O3553 = :* (:* (:* D1 D8) D9) D9
type H76A = :* (:* (:* D1 D8) D9) D8
type D1898 = :* (:* (:* D1 D8) D9) D8
type O3552 = :* (:* (:* D1 D8) D9) D8
type H769 = :* (:* (:* D1 D8) D9) D7
type D1897 = :* (:* (:* D1 D8) D9) D7
type O3551 = :* (:* (:* D1 D8) D9) D7
type H768 = :* (:* (:* D1 D8) D9) D6
type D1896 = :* (:* (:* D1 D8) D9) D6
type O3550 = :* (:* (:* D1 D8) D9) D6
type H767 = :* (:* (:* D1 D8) D9) D5
type D1895 = :* (:* (:* D1 D8) D9) D5
type O3547 = :* (:* (:* D1 D8) D9) D5
type H766 = :* (:* (:* D1 D8) D9) D4
type D1894 = :* (:* (:* D1 D8) D9) D4
type O3546 = :* (:* (:* D1 D8) D9) D4
type H765 = :* (:* (:* D1 D8) D9) D3
type D1893 = :* (:* (:* D1 D8) D9) D3
type O3545 = :* (:* (:* D1 D8) D9) D3
type H764 = :* (:* (:* D1 D8) D9) D2
type D1892 = :* (:* (:* D1 D8) D9) D2
type O3544 = :* (:* (:* D1 D8) D9) D2
type H763 = :* (:* (:* D1 D8) D9) D1
type D1891 = :* (:* (:* D1 D8) D9) D1
type O3543 = :* (:* (:* D1 D8) D9) D1
type H762 = :* (:* (:* D1 D8) D9) D0
type D1890 = :* (:* (:* D1 D8) D9) D0
type O3542 = :* (:* (:* D1 D8) D9) D0
type H761 = :* (:* (:* D1 D8) D8) D9
type D1889 = :* (:* (:* D1 D8) D8) D9
type O3541 = :* (:* (:* D1 D8) D8) D9
type H760 = :* (:* (:* D1 D8) D8) D8
type D1888 = :* (:* (:* D1 D8) D8) D8
type O3540 = :* (:* (:* D1 D8) D8) D8
type H75F = :* (:* (:* D1 D8) D8) D7
type D1887 = :* (:* (:* D1 D8) D8) D7
type O3537 = :* (:* (:* D1 D8) D8) D7
type H75E = :* (:* (:* D1 D8) D8) D6
type D1886 = :* (:* (:* D1 D8) D8) D6
type O3536 = :* (:* (:* D1 D8) D8) D6
type H75D = :* (:* (:* D1 D8) D8) D5
type D1885 = :* (:* (:* D1 D8) D8) D5
type O3535 = :* (:* (:* D1 D8) D8) D5
type H75C = :* (:* (:* D1 D8) D8) D4
type D1884 = :* (:* (:* D1 D8) D8) D4
type O3534 = :* (:* (:* D1 D8) D8) D4
type H75B = :* (:* (:* D1 D8) D8) D3
type D1883 = :* (:* (:* D1 D8) D8) D3
type O3533 = :* (:* (:* D1 D8) D8) D3
type H75A = :* (:* (:* D1 D8) D8) D2
type D1882 = :* (:* (:* D1 D8) D8) D2
type O3532 = :* (:* (:* D1 D8) D8) D2
type H759 = :* (:* (:* D1 D8) D8) D1
type D1881 = :* (:* (:* D1 D8) D8) D1
type O3531 = :* (:* (:* D1 D8) D8) D1
type H758 = :* (:* (:* D1 D8) D8) D0
type D1880 = :* (:* (:* D1 D8) D8) D0
type O3530 = :* (:* (:* D1 D8) D8) D0
type H757 = :* (:* (:* D1 D8) D7) D9
type D1879 = :* (:* (:* D1 D8) D7) D9
type O3527 = :* (:* (:* D1 D8) D7) D9
type H756 = :* (:* (:* D1 D8) D7) D8
type D1878 = :* (:* (:* D1 D8) D7) D8
type O3526 = :* (:* (:* D1 D8) D7) D8
type H755 = :* (:* (:* D1 D8) D7) D7
type D1877 = :* (:* (:* D1 D8) D7) D7
type O3525 = :* (:* (:* D1 D8) D7) D7
type H754 = :* (:* (:* D1 D8) D7) D6
type D1876 = :* (:* (:* D1 D8) D7) D6
type O3524 = :* (:* (:* D1 D8) D7) D6
type H753 = :* (:* (:* D1 D8) D7) D5
type D1875 = :* (:* (:* D1 D8) D7) D5
type O3523 = :* (:* (:* D1 D8) D7) D5
type H752 = :* (:* (:* D1 D8) D7) D4
type D1874 = :* (:* (:* D1 D8) D7) D4
type O3522 = :* (:* (:* D1 D8) D7) D4
type H751 = :* (:* (:* D1 D8) D7) D3
type D1873 = :* (:* (:* D1 D8) D7) D3
type O3521 = :* (:* (:* D1 D8) D7) D3
type H750 = :* (:* (:* D1 D8) D7) D2
type D1872 = :* (:* (:* D1 D8) D7) D2
type O3520 = :* (:* (:* D1 D8) D7) D2
type H74F = :* (:* (:* D1 D8) D7) D1
type D1871 = :* (:* (:* D1 D8) D7) D1
type O3517 = :* (:* (:* D1 D8) D7) D1
type H74E = :* (:* (:* D1 D8) D7) D0
type D1870 = :* (:* (:* D1 D8) D7) D0
type O3516 = :* (:* (:* D1 D8) D7) D0
type H74D = :* (:* (:* D1 D8) D6) D9
type D1869 = :* (:* (:* D1 D8) D6) D9
type O3515 = :* (:* (:* D1 D8) D6) D9
type H74C = :* (:* (:* D1 D8) D6) D8
type D1868 = :* (:* (:* D1 D8) D6) D8
type O3514 = :* (:* (:* D1 D8) D6) D8
type H74B = :* (:* (:* D1 D8) D6) D7
type D1867 = :* (:* (:* D1 D8) D6) D7
type O3513 = :* (:* (:* D1 D8) D6) D7
type H74A = :* (:* (:* D1 D8) D6) D6
type D1866 = :* (:* (:* D1 D8) D6) D6
type O3512 = :* (:* (:* D1 D8) D6) D6
type H749 = :* (:* (:* D1 D8) D6) D5
type D1865 = :* (:* (:* D1 D8) D6) D5
type O3511 = :* (:* (:* D1 D8) D6) D5
type H748 = :* (:* (:* D1 D8) D6) D4
type D1864 = :* (:* (:* D1 D8) D6) D4
type O3510 = :* (:* (:* D1 D8) D6) D4
type H747 = :* (:* (:* D1 D8) D6) D3
type D1863 = :* (:* (:* D1 D8) D6) D3
type O3507 = :* (:* (:* D1 D8) D6) D3
type H746 = :* (:* (:* D1 D8) D6) D2
type D1862 = :* (:* (:* D1 D8) D6) D2
type O3506 = :* (:* (:* D1 D8) D6) D2
type H745 = :* (:* (:* D1 D8) D6) D1
type D1861 = :* (:* (:* D1 D8) D6) D1
type O3505 = :* (:* (:* D1 D8) D6) D1
type H744 = :* (:* (:* D1 D8) D6) D0
type D1860 = :* (:* (:* D1 D8) D6) D0
type O3504 = :* (:* (:* D1 D8) D6) D0
type H743 = :* (:* (:* D1 D8) D5) D9
type D1859 = :* (:* (:* D1 D8) D5) D9
type O3503 = :* (:* (:* D1 D8) D5) D9
type H742 = :* (:* (:* D1 D8) D5) D8
type D1858 = :* (:* (:* D1 D8) D5) D8
type O3502 = :* (:* (:* D1 D8) D5) D8
type H741 = :* (:* (:* D1 D8) D5) D7
type D1857 = :* (:* (:* D1 D8) D5) D7
type O3501 = :* (:* (:* D1 D8) D5) D7
type H740 = :* (:* (:* D1 D8) D5) D6
type D1856 = :* (:* (:* D1 D8) D5) D6
type O3500 = :* (:* (:* D1 D8) D5) D6
type H73F = :* (:* (:* D1 D8) D5) D5
type D1855 = :* (:* (:* D1 D8) D5) D5
type O3477 = :* (:* (:* D1 D8) D5) D5
type H73E = :* (:* (:* D1 D8) D5) D4
type D1854 = :* (:* (:* D1 D8) D5) D4
type O3476 = :* (:* (:* D1 D8) D5) D4
type H73D = :* (:* (:* D1 D8) D5) D3
type D1853 = :* (:* (:* D1 D8) D5) D3
type O3475 = :* (:* (:* D1 D8) D5) D3
type H73C = :* (:* (:* D1 D8) D5) D2
type D1852 = :* (:* (:* D1 D8) D5) D2
type O3474 = :* (:* (:* D1 D8) D5) D2
type H73B = :* (:* (:* D1 D8) D5) D1
type D1851 = :* (:* (:* D1 D8) D5) D1
type O3473 = :* (:* (:* D1 D8) D5) D1
type H73A = :* (:* (:* D1 D8) D5) D0
type D1850 = :* (:* (:* D1 D8) D5) D0
type O3472 = :* (:* (:* D1 D8) D5) D0
type H739 = :* (:* (:* D1 D8) D4) D9
type D1849 = :* (:* (:* D1 D8) D4) D9
type O3471 = :* (:* (:* D1 D8) D4) D9
type H738 = :* (:* (:* D1 D8) D4) D8
type D1848 = :* (:* (:* D1 D8) D4) D8
type O3470 = :* (:* (:* D1 D8) D4) D8
type H737 = :* (:* (:* D1 D8) D4) D7
type D1847 = :* (:* (:* D1 D8) D4) D7
type O3467 = :* (:* (:* D1 D8) D4) D7
type H736 = :* (:* (:* D1 D8) D4) D6
type D1846 = :* (:* (:* D1 D8) D4) D6
type O3466 = :* (:* (:* D1 D8) D4) D6
type H735 = :* (:* (:* D1 D8) D4) D5
type D1845 = :* (:* (:* D1 D8) D4) D5
type O3465 = :* (:* (:* D1 D8) D4) D5
type H734 = :* (:* (:* D1 D8) D4) D4
type D1844 = :* (:* (:* D1 D8) D4) D4
type O3464 = :* (:* (:* D1 D8) D4) D4
type H733 = :* (:* (:* D1 D8) D4) D3
type D1843 = :* (:* (:* D1 D8) D4) D3
type O3463 = :* (:* (:* D1 D8) D4) D3
type H732 = :* (:* (:* D1 D8) D4) D2
type D1842 = :* (:* (:* D1 D8) D4) D2
type O3462 = :* (:* (:* D1 D8) D4) D2
type H731 = :* (:* (:* D1 D8) D4) D1
type D1841 = :* (:* (:* D1 D8) D4) D1
type O3461 = :* (:* (:* D1 D8) D4) D1
type H730 = :* (:* (:* D1 D8) D4) D0
type D1840 = :* (:* (:* D1 D8) D4) D0
type O3460 = :* (:* (:* D1 D8) D4) D0
type H72F = :* (:* (:* D1 D8) D3) D9
type D1839 = :* (:* (:* D1 D8) D3) D9
type O3457 = :* (:* (:* D1 D8) D3) D9
type H72E = :* (:* (:* D1 D8) D3) D8
type D1838 = :* (:* (:* D1 D8) D3) D8
type O3456 = :* (:* (:* D1 D8) D3) D8
type H72D = :* (:* (:* D1 D8) D3) D7
type D1837 = :* (:* (:* D1 D8) D3) D7
type O3455 = :* (:* (:* D1 D8) D3) D7
type H72C = :* (:* (:* D1 D8) D3) D6
type D1836 = :* (:* (:* D1 D8) D3) D6
type O3454 = :* (:* (:* D1 D8) D3) D6
type H72B = :* (:* (:* D1 D8) D3) D5
type D1835 = :* (:* (:* D1 D8) D3) D5
type O3453 = :* (:* (:* D1 D8) D3) D5
type H72A = :* (:* (:* D1 D8) D3) D4
type D1834 = :* (:* (:* D1 D8) D3) D4
type O3452 = :* (:* (:* D1 D8) D3) D4
type H729 = :* (:* (:* D1 D8) D3) D3
type D1833 = :* (:* (:* D1 D8) D3) D3
type O3451 = :* (:* (:* D1 D8) D3) D3
type H728 = :* (:* (:* D1 D8) D3) D2
type D1832 = :* (:* (:* D1 D8) D3) D2
type O3450 = :* (:* (:* D1 D8) D3) D2
type H727 = :* (:* (:* D1 D8) D3) D1
type D1831 = :* (:* (:* D1 D8) D3) D1
type O3447 = :* (:* (:* D1 D8) D3) D1
type H726 = :* (:* (:* D1 D8) D3) D0
type D1830 = :* (:* (:* D1 D8) D3) D0
type O3446 = :* (:* (:* D1 D8) D3) D0
type H725 = :* (:* (:* D1 D8) D2) D9
type D1829 = :* (:* (:* D1 D8) D2) D9
type O3445 = :* (:* (:* D1 D8) D2) D9
type H724 = :* (:* (:* D1 D8) D2) D8
type D1828 = :* (:* (:* D1 D8) D2) D8
type O3444 = :* (:* (:* D1 D8) D2) D8
type H723 = :* (:* (:* D1 D8) D2) D7
type D1827 = :* (:* (:* D1 D8) D2) D7
type O3443 = :* (:* (:* D1 D8) D2) D7
type H722 = :* (:* (:* D1 D8) D2) D6
type D1826 = :* (:* (:* D1 D8) D2) D6
type O3442 = :* (:* (:* D1 D8) D2) D6
type H721 = :* (:* (:* D1 D8) D2) D5
type D1825 = :* (:* (:* D1 D8) D2) D5
type O3441 = :* (:* (:* D1 D8) D2) D5
type H720 = :* (:* (:* D1 D8) D2) D4
type D1824 = :* (:* (:* D1 D8) D2) D4
type O3440 = :* (:* (:* D1 D8) D2) D4
type H71F = :* (:* (:* D1 D8) D2) D3
type D1823 = :* (:* (:* D1 D8) D2) D3
type O3437 = :* (:* (:* D1 D8) D2) D3
type H71E = :* (:* (:* D1 D8) D2) D2
type D1822 = :* (:* (:* D1 D8) D2) D2
type O3436 = :* (:* (:* D1 D8) D2) D2
type H71D = :* (:* (:* D1 D8) D2) D1
type D1821 = :* (:* (:* D1 D8) D2) D1
type O3435 = :* (:* (:* D1 D8) D2) D1
type H71C = :* (:* (:* D1 D8) D2) D0
type D1820 = :* (:* (:* D1 D8) D2) D0
type O3434 = :* (:* (:* D1 D8) D2) D0
type H71B = :* (:* (:* D1 D8) D1) D9
type D1819 = :* (:* (:* D1 D8) D1) D9
type O3433 = :* (:* (:* D1 D8) D1) D9
type H71A = :* (:* (:* D1 D8) D1) D8
type D1818 = :* (:* (:* D1 D8) D1) D8
type O3432 = :* (:* (:* D1 D8) D1) D8
type H719 = :* (:* (:* D1 D8) D1) D7
type D1817 = :* (:* (:* D1 D8) D1) D7
type O3431 = :* (:* (:* D1 D8) D1) D7
type H718 = :* (:* (:* D1 D8) D1) D6
type D1816 = :* (:* (:* D1 D8) D1) D6
type O3430 = :* (:* (:* D1 D8) D1) D6
type H717 = :* (:* (:* D1 D8) D1) D5
type D1815 = :* (:* (:* D1 D8) D1) D5
type O3427 = :* (:* (:* D1 D8) D1) D5
type H716 = :* (:* (:* D1 D8) D1) D4
type D1814 = :* (:* (:* D1 D8) D1) D4
type O3426 = :* (:* (:* D1 D8) D1) D4
type H715 = :* (:* (:* D1 D8) D1) D3
type D1813 = :* (:* (:* D1 D8) D1) D3
type O3425 = :* (:* (:* D1 D8) D1) D3
type H714 = :* (:* (:* D1 D8) D1) D2
type D1812 = :* (:* (:* D1 D8) D1) D2
type O3424 = :* (:* (:* D1 D8) D1) D2
type H713 = :* (:* (:* D1 D8) D1) D1
type D1811 = :* (:* (:* D1 D8) D1) D1
type O3423 = :* (:* (:* D1 D8) D1) D1
type H712 = :* (:* (:* D1 D8) D1) D0
type D1810 = :* (:* (:* D1 D8) D1) D0
type O3422 = :* (:* (:* D1 D8) D1) D0
type H711 = :* (:* (:* D1 D8) D0) D9
type D1809 = :* (:* (:* D1 D8) D0) D9
type O3421 = :* (:* (:* D1 D8) D0) D9
type H710 = :* (:* (:* D1 D8) D0) D8
type D1808 = :* (:* (:* D1 D8) D0) D8
type O3420 = :* (:* (:* D1 D8) D0) D8
type H70F = :* (:* (:* D1 D8) D0) D7
type D1807 = :* (:* (:* D1 D8) D0) D7
type O3417 = :* (:* (:* D1 D8) D0) D7
type H70E = :* (:* (:* D1 D8) D0) D6
type D1806 = :* (:* (:* D1 D8) D0) D6
type O3416 = :* (:* (:* D1 D8) D0) D6
type H70D = :* (:* (:* D1 D8) D0) D5
type D1805 = :* (:* (:* D1 D8) D0) D5
type O3415 = :* (:* (:* D1 D8) D0) D5
type H70C = :* (:* (:* D1 D8) D0) D4
type D1804 = :* (:* (:* D1 D8) D0) D4
type O3414 = :* (:* (:* D1 D8) D0) D4
type H70B = :* (:* (:* D1 D8) D0) D3
type D1803 = :* (:* (:* D1 D8) D0) D3
type O3413 = :* (:* (:* D1 D8) D0) D3
type H70A = :* (:* (:* D1 D8) D0) D2
type D1802 = :* (:* (:* D1 D8) D0) D2
type O3412 = :* (:* (:* D1 D8) D0) D2
type H709 = :* (:* (:* D1 D8) D0) D1
type D1801 = :* (:* (:* D1 D8) D0) D1
type O3411 = :* (:* (:* D1 D8) D0) D1
type H708 = :* (:* (:* D1 D8) D0) D0
type D1800 = :* (:* (:* D1 D8) D0) D0
type O3410 = :* (:* (:* D1 D8) D0) D0
type H707 = :* (:* (:* D1 D7) D9) D9
type D1799 = :* (:* (:* D1 D7) D9) D9
type O3407 = :* (:* (:* D1 D7) D9) D9
type H706 = :* (:* (:* D1 D7) D9) D8
type D1798 = :* (:* (:* D1 D7) D9) D8
type O3406 = :* (:* (:* D1 D7) D9) D8
type H705 = :* (:* (:* D1 D7) D9) D7
type D1797 = :* (:* (:* D1 D7) D9) D7
type O3405 = :* (:* (:* D1 D7) D9) D7
type H704 = :* (:* (:* D1 D7) D9) D6
type D1796 = :* (:* (:* D1 D7) D9) D6
type O3404 = :* (:* (:* D1 D7) D9) D6
type H703 = :* (:* (:* D1 D7) D9) D5
type D1795 = :* (:* (:* D1 D7) D9) D5
type O3403 = :* (:* (:* D1 D7) D9) D5
type H702 = :* (:* (:* D1 D7) D9) D4
type D1794 = :* (:* (:* D1 D7) D9) D4
type O3402 = :* (:* (:* D1 D7) D9) D4
type H701 = :* (:* (:* D1 D7) D9) D3
type D1793 = :* (:* (:* D1 D7) D9) D3
type O3401 = :* (:* (:* D1 D7) D9) D3
type H700 = :* (:* (:* D1 D7) D9) D2
type D1792 = :* (:* (:* D1 D7) D9) D2
type O3400 = :* (:* (:* D1 D7) D9) D2
type H6FF = :* (:* (:* D1 D7) D9) D1
type D1791 = :* (:* (:* D1 D7) D9) D1
type O3377 = :* (:* (:* D1 D7) D9) D1
type H6FE = :* (:* (:* D1 D7) D9) D0
type D1790 = :* (:* (:* D1 D7) D9) D0
type O3376 = :* (:* (:* D1 D7) D9) D0
type H6FD = :* (:* (:* D1 D7) D8) D9
type D1789 = :* (:* (:* D1 D7) D8) D9
type O3375 = :* (:* (:* D1 D7) D8) D9
type H6FC = :* (:* (:* D1 D7) D8) D8
type D1788 = :* (:* (:* D1 D7) D8) D8
type O3374 = :* (:* (:* D1 D7) D8) D8
type H6FB = :* (:* (:* D1 D7) D8) D7
type D1787 = :* (:* (:* D1 D7) D8) D7
type O3373 = :* (:* (:* D1 D7) D8) D7
type H6FA = :* (:* (:* D1 D7) D8) D6
type D1786 = :* (:* (:* D1 D7) D8) D6
type O3372 = :* (:* (:* D1 D7) D8) D6
type H6F9 = :* (:* (:* D1 D7) D8) D5
type D1785 = :* (:* (:* D1 D7) D8) D5
type O3371 = :* (:* (:* D1 D7) D8) D5
type H6F8 = :* (:* (:* D1 D7) D8) D4
type D1784 = :* (:* (:* D1 D7) D8) D4
type O3370 = :* (:* (:* D1 D7) D8) D4
type H6F7 = :* (:* (:* D1 D7) D8) D3
type D1783 = :* (:* (:* D1 D7) D8) D3
type O3367 = :* (:* (:* D1 D7) D8) D3
type H6F6 = :* (:* (:* D1 D7) D8) D2
type D1782 = :* (:* (:* D1 D7) D8) D2
type O3366 = :* (:* (:* D1 D7) D8) D2
type H6F5 = :* (:* (:* D1 D7) D8) D1
type D1781 = :* (:* (:* D1 D7) D8) D1
type O3365 = :* (:* (:* D1 D7) D8) D1
type H6F4 = :* (:* (:* D1 D7) D8) D0
type D1780 = :* (:* (:* D1 D7) D8) D0
type O3364 = :* (:* (:* D1 D7) D8) D0
type H6F3 = :* (:* (:* D1 D7) D7) D9
type D1779 = :* (:* (:* D1 D7) D7) D9
type O3363 = :* (:* (:* D1 D7) D7) D9
type H6F2 = :* (:* (:* D1 D7) D7) D8
type D1778 = :* (:* (:* D1 D7) D7) D8
type O3362 = :* (:* (:* D1 D7) D7) D8
type H6F1 = :* (:* (:* D1 D7) D7) D7
type D1777 = :* (:* (:* D1 D7) D7) D7
type O3361 = :* (:* (:* D1 D7) D7) D7
type H6F0 = :* (:* (:* D1 D7) D7) D6
type D1776 = :* (:* (:* D1 D7) D7) D6
type O3360 = :* (:* (:* D1 D7) D7) D6
type H6EF = :* (:* (:* D1 D7) D7) D5
type D1775 = :* (:* (:* D1 D7) D7) D5
type O3357 = :* (:* (:* D1 D7) D7) D5
type H6EE = :* (:* (:* D1 D7) D7) D4
type D1774 = :* (:* (:* D1 D7) D7) D4
type O3356 = :* (:* (:* D1 D7) D7) D4
type H6ED = :* (:* (:* D1 D7) D7) D3
type D1773 = :* (:* (:* D1 D7) D7) D3
type O3355 = :* (:* (:* D1 D7) D7) D3
type H6EC = :* (:* (:* D1 D7) D7) D2
type D1772 = :* (:* (:* D1 D7) D7) D2
type O3354 = :* (:* (:* D1 D7) D7) D2
type H6EB = :* (:* (:* D1 D7) D7) D1
type D1771 = :* (:* (:* D1 D7) D7) D1
type O3353 = :* (:* (:* D1 D7) D7) D1
type H6EA = :* (:* (:* D1 D7) D7) D0
type D1770 = :* (:* (:* D1 D7) D7) D0
type O3352 = :* (:* (:* D1 D7) D7) D0
type H6E9 = :* (:* (:* D1 D7) D6) D9
type D1769 = :* (:* (:* D1 D7) D6) D9
type O3351 = :* (:* (:* D1 D7) D6) D9
type H6E8 = :* (:* (:* D1 D7) D6) D8
type D1768 = :* (:* (:* D1 D7) D6) D8
type O3350 = :* (:* (:* D1 D7) D6) D8
type H6E7 = :* (:* (:* D1 D7) D6) D7
type D1767 = :* (:* (:* D1 D7) D6) D7
type O3347 = :* (:* (:* D1 D7) D6) D7
type H6E6 = :* (:* (:* D1 D7) D6) D6
type D1766 = :* (:* (:* D1 D7) D6) D6
type O3346 = :* (:* (:* D1 D7) D6) D6
type H6E5 = :* (:* (:* D1 D7) D6) D5
type D1765 = :* (:* (:* D1 D7) D6) D5
type O3345 = :* (:* (:* D1 D7) D6) D5
type H6E4 = :* (:* (:* D1 D7) D6) D4
type D1764 = :* (:* (:* D1 D7) D6) D4
type O3344 = :* (:* (:* D1 D7) D6) D4
type H6E3 = :* (:* (:* D1 D7) D6) D3
type D1763 = :* (:* (:* D1 D7) D6) D3
type O3343 = :* (:* (:* D1 D7) D6) D3
type H6E2 = :* (:* (:* D1 D7) D6) D2
type D1762 = :* (:* (:* D1 D7) D6) D2
type O3342 = :* (:* (:* D1 D7) D6) D2
type H6E1 = :* (:* (:* D1 D7) D6) D1
type D1761 = :* (:* (:* D1 D7) D6) D1
type O3341 = :* (:* (:* D1 D7) D6) D1
type H6E0 = :* (:* (:* D1 D7) D6) D0
type D1760 = :* (:* (:* D1 D7) D6) D0
type O3340 = :* (:* (:* D1 D7) D6) D0
type H6DF = :* (:* (:* D1 D7) D5) D9
type D1759 = :* (:* (:* D1 D7) D5) D9
type O3337 = :* (:* (:* D1 D7) D5) D9
type H6DE = :* (:* (:* D1 D7) D5) D8
type D1758 = :* (:* (:* D1 D7) D5) D8
type O3336 = :* (:* (:* D1 D7) D5) D8
type H6DD = :* (:* (:* D1 D7) D5) D7
type D1757 = :* (:* (:* D1 D7) D5) D7
type O3335 = :* (:* (:* D1 D7) D5) D7
type H6DC = :* (:* (:* D1 D7) D5) D6
type D1756 = :* (:* (:* D1 D7) D5) D6
type O3334 = :* (:* (:* D1 D7) D5) D6
type H6DB = :* (:* (:* D1 D7) D5) D5
type D1755 = :* (:* (:* D1 D7) D5) D5
type O3333 = :* (:* (:* D1 D7) D5) D5
type H6DA = :* (:* (:* D1 D7) D5) D4
type D1754 = :* (:* (:* D1 D7) D5) D4
type O3332 = :* (:* (:* D1 D7) D5) D4
type H6D9 = :* (:* (:* D1 D7) D5) D3
type D1753 = :* (:* (:* D1 D7) D5) D3
type O3331 = :* (:* (:* D1 D7) D5) D3
type H6D8 = :* (:* (:* D1 D7) D5) D2
type D1752 = :* (:* (:* D1 D7) D5) D2
type O3330 = :* (:* (:* D1 D7) D5) D2
type H6D7 = :* (:* (:* D1 D7) D5) D1
type D1751 = :* (:* (:* D1 D7) D5) D1
type O3327 = :* (:* (:* D1 D7) D5) D1
type H6D6 = :* (:* (:* D1 D7) D5) D0
type D1750 = :* (:* (:* D1 D7) D5) D0
type O3326 = :* (:* (:* D1 D7) D5) D0
type H6D5 = :* (:* (:* D1 D7) D4) D9
type D1749 = :* (:* (:* D1 D7) D4) D9
type O3325 = :* (:* (:* D1 D7) D4) D9
type H6D4 = :* (:* (:* D1 D7) D4) D8
type D1748 = :* (:* (:* D1 D7) D4) D8
type O3324 = :* (:* (:* D1 D7) D4) D8
type H6D3 = :* (:* (:* D1 D7) D4) D7
type D1747 = :* (:* (:* D1 D7) D4) D7
type O3323 = :* (:* (:* D1 D7) D4) D7
type H6D2 = :* (:* (:* D1 D7) D4) D6
type D1746 = :* (:* (:* D1 D7) D4) D6
type O3322 = :* (:* (:* D1 D7) D4) D6
type H6D1 = :* (:* (:* D1 D7) D4) D5
type D1745 = :* (:* (:* D1 D7) D4) D5
type O3321 = :* (:* (:* D1 D7) D4) D5
type H6D0 = :* (:* (:* D1 D7) D4) D4
type D1744 = :* (:* (:* D1 D7) D4) D4
type O3320 = :* (:* (:* D1 D7) D4) D4
type H6CF = :* (:* (:* D1 D7) D4) D3
type D1743 = :* (:* (:* D1 D7) D4) D3
type O3317 = :* (:* (:* D1 D7) D4) D3
type H6CE = :* (:* (:* D1 D7) D4) D2
type D1742 = :* (:* (:* D1 D7) D4) D2
type O3316 = :* (:* (:* D1 D7) D4) D2
type H6CD = :* (:* (:* D1 D7) D4) D1
type D1741 = :* (:* (:* D1 D7) D4) D1
type O3315 = :* (:* (:* D1 D7) D4) D1
type H6CC = :* (:* (:* D1 D7) D4) D0
type D1740 = :* (:* (:* D1 D7) D4) D0
type O3314 = :* (:* (:* D1 D7) D4) D0
type H6CB = :* (:* (:* D1 D7) D3) D9
type D1739 = :* (:* (:* D1 D7) D3) D9
type O3313 = :* (:* (:* D1 D7) D3) D9
type H6CA = :* (:* (:* D1 D7) D3) D8
type D1738 = :* (:* (:* D1 D7) D3) D8
type O3312 = :* (:* (:* D1 D7) D3) D8
type H6C9 = :* (:* (:* D1 D7) D3) D7
type D1737 = :* (:* (:* D1 D7) D3) D7
type O3311 = :* (:* (:* D1 D7) D3) D7
type H6C8 = :* (:* (:* D1 D7) D3) D6
type D1736 = :* (:* (:* D1 D7) D3) D6
type O3310 = :* (:* (:* D1 D7) D3) D6
type H6C7 = :* (:* (:* D1 D7) D3) D5
type D1735 = :* (:* (:* D1 D7) D3) D5
type O3307 = :* (:* (:* D1 D7) D3) D5
type H6C6 = :* (:* (:* D1 D7) D3) D4
type D1734 = :* (:* (:* D1 D7) D3) D4
type O3306 = :* (:* (:* D1 D7) D3) D4
type H6C5 = :* (:* (:* D1 D7) D3) D3
type D1733 = :* (:* (:* D1 D7) D3) D3
type O3305 = :* (:* (:* D1 D7) D3) D3
type H6C4 = :* (:* (:* D1 D7) D3) D2
type D1732 = :* (:* (:* D1 D7) D3) D2
type O3304 = :* (:* (:* D1 D7) D3) D2
type H6C3 = :* (:* (:* D1 D7) D3) D1
type D1731 = :* (:* (:* D1 D7) D3) D1
type O3303 = :* (:* (:* D1 D7) D3) D1
type H6C2 = :* (:* (:* D1 D7) D3) D0
type D1730 = :* (:* (:* D1 D7) D3) D0
type O3302 = :* (:* (:* D1 D7) D3) D0
type H6C1 = :* (:* (:* D1 D7) D2) D9
type D1729 = :* (:* (:* D1 D7) D2) D9
type O3301 = :* (:* (:* D1 D7) D2) D9
type H6C0 = :* (:* (:* D1 D7) D2) D8
type D1728 = :* (:* (:* D1 D7) D2) D8
type O3300 = :* (:* (:* D1 D7) D2) D8
type H6BF = :* (:* (:* D1 D7) D2) D7
type D1727 = :* (:* (:* D1 D7) D2) D7
type O3277 = :* (:* (:* D1 D7) D2) D7
type H6BE = :* (:* (:* D1 D7) D2) D6
type D1726 = :* (:* (:* D1 D7) D2) D6
type O3276 = :* (:* (:* D1 D7) D2) D6
type H6BD = :* (:* (:* D1 D7) D2) D5
type D1725 = :* (:* (:* D1 D7) D2) D5
type O3275 = :* (:* (:* D1 D7) D2) D5
type H6BC = :* (:* (:* D1 D7) D2) D4
type D1724 = :* (:* (:* D1 D7) D2) D4
type O3274 = :* (:* (:* D1 D7) D2) D4
type H6BB = :* (:* (:* D1 D7) D2) D3
type D1723 = :* (:* (:* D1 D7) D2) D3
type O3273 = :* (:* (:* D1 D7) D2) D3
type H6BA = :* (:* (:* D1 D7) D2) D2
type D1722 = :* (:* (:* D1 D7) D2) D2
type O3272 = :* (:* (:* D1 D7) D2) D2
type H6B9 = :* (:* (:* D1 D7) D2) D1
type D1721 = :* (:* (:* D1 D7) D2) D1
type O3271 = :* (:* (:* D1 D7) D2) D1
type H6B8 = :* (:* (:* D1 D7) D2) D0
type D1720 = :* (:* (:* D1 D7) D2) D0
type O3270 = :* (:* (:* D1 D7) D2) D0
type H6B7 = :* (:* (:* D1 D7) D1) D9
type D1719 = :* (:* (:* D1 D7) D1) D9
type O3267 = :* (:* (:* D1 D7) D1) D9
type H6B6 = :* (:* (:* D1 D7) D1) D8
type D1718 = :* (:* (:* D1 D7) D1) D8
type O3266 = :* (:* (:* D1 D7) D1) D8
type H6B5 = :* (:* (:* D1 D7) D1) D7
type D1717 = :* (:* (:* D1 D7) D1) D7
type O3265 = :* (:* (:* D1 D7) D1) D7
type H6B4 = :* (:* (:* D1 D7) D1) D6
type D1716 = :* (:* (:* D1 D7) D1) D6
type O3264 = :* (:* (:* D1 D7) D1) D6
type H6B3 = :* (:* (:* D1 D7) D1) D5
type D1715 = :* (:* (:* D1 D7) D1) D5
type O3263 = :* (:* (:* D1 D7) D1) D5
type H6B2 = :* (:* (:* D1 D7) D1) D4
type D1714 = :* (:* (:* D1 D7) D1) D4
type O3262 = :* (:* (:* D1 D7) D1) D4
type H6B1 = :* (:* (:* D1 D7) D1) D3
type D1713 = :* (:* (:* D1 D7) D1) D3
type O3261 = :* (:* (:* D1 D7) D1) D3
type H6B0 = :* (:* (:* D1 D7) D1) D2
type D1712 = :* (:* (:* D1 D7) D1) D2
type O3260 = :* (:* (:* D1 D7) D1) D2
type H6AF = :* (:* (:* D1 D7) D1) D1
type D1711 = :* (:* (:* D1 D7) D1) D1
type O3257 = :* (:* (:* D1 D7) D1) D1
type H6AE = :* (:* (:* D1 D7) D1) D0
type D1710 = :* (:* (:* D1 D7) D1) D0
type O3256 = :* (:* (:* D1 D7) D1) D0
type H6AD = :* (:* (:* D1 D7) D0) D9
type D1709 = :* (:* (:* D1 D7) D0) D9
type O3255 = :* (:* (:* D1 D7) D0) D9
type H6AC = :* (:* (:* D1 D7) D0) D8
type D1708 = :* (:* (:* D1 D7) D0) D8
type O3254 = :* (:* (:* D1 D7) D0) D8
type H6AB = :* (:* (:* D1 D7) D0) D7
type D1707 = :* (:* (:* D1 D7) D0) D7
type O3253 = :* (:* (:* D1 D7) D0) D7
type H6AA = :* (:* (:* D1 D7) D0) D6
type D1706 = :* (:* (:* D1 D7) D0) D6
type O3252 = :* (:* (:* D1 D7) D0) D6
type H6A9 = :* (:* (:* D1 D7) D0) D5
type D1705 = :* (:* (:* D1 D7) D0) D5
type O3251 = :* (:* (:* D1 D7) D0) D5
type H6A8 = :* (:* (:* D1 D7) D0) D4
type D1704 = :* (:* (:* D1 D7) D0) D4
type O3250 = :* (:* (:* D1 D7) D0) D4
type H6A7 = :* (:* (:* D1 D7) D0) D3
type D1703 = :* (:* (:* D1 D7) D0) D3
type O3247 = :* (:* (:* D1 D7) D0) D3
type H6A6 = :* (:* (:* D1 D7) D0) D2
type D1702 = :* (:* (:* D1 D7) D0) D2
type O3246 = :* (:* (:* D1 D7) D0) D2
type H6A5 = :* (:* (:* D1 D7) D0) D1
type D1701 = :* (:* (:* D1 D7) D0) D1
type O3245 = :* (:* (:* D1 D7) D0) D1
type H6A4 = :* (:* (:* D1 D7) D0) D0
type D1700 = :* (:* (:* D1 D7) D0) D0
type O3244 = :* (:* (:* D1 D7) D0) D0
type H6A3 = :* (:* (:* D1 D6) D9) D9
type D1699 = :* (:* (:* D1 D6) D9) D9
type O3243 = :* (:* (:* D1 D6) D9) D9
type H6A2 = :* (:* (:* D1 D6) D9) D8
type D1698 = :* (:* (:* D1 D6) D9) D8
type O3242 = :* (:* (:* D1 D6) D9) D8
type H6A1 = :* (:* (:* D1 D6) D9) D7
type D1697 = :* (:* (:* D1 D6) D9) D7
type O3241 = :* (:* (:* D1 D6) D9) D7
type H6A0 = :* (:* (:* D1 D6) D9) D6
type D1696 = :* (:* (:* D1 D6) D9) D6
type O3240 = :* (:* (:* D1 D6) D9) D6
type H69F = :* (:* (:* D1 D6) D9) D5
type D1695 = :* (:* (:* D1 D6) D9) D5
type O3237 = :* (:* (:* D1 D6) D9) D5
type H69E = :* (:* (:* D1 D6) D9) D4
type D1694 = :* (:* (:* D1 D6) D9) D4
type O3236 = :* (:* (:* D1 D6) D9) D4
type H69D = :* (:* (:* D1 D6) D9) D3
type D1693 = :* (:* (:* D1 D6) D9) D3
type O3235 = :* (:* (:* D1 D6) D9) D3
type H69C = :* (:* (:* D1 D6) D9) D2
type D1692 = :* (:* (:* D1 D6) D9) D2
type O3234 = :* (:* (:* D1 D6) D9) D2
type H69B = :* (:* (:* D1 D6) D9) D1
type D1691 = :* (:* (:* D1 D6) D9) D1
type O3233 = :* (:* (:* D1 D6) D9) D1
type H69A = :* (:* (:* D1 D6) D9) D0
type D1690 = :* (:* (:* D1 D6) D9) D0
type O3232 = :* (:* (:* D1 D6) D9) D0
type H699 = :* (:* (:* D1 D6) D8) D9
type D1689 = :* (:* (:* D1 D6) D8) D9
type O3231 = :* (:* (:* D1 D6) D8) D9
type H698 = :* (:* (:* D1 D6) D8) D8
type D1688 = :* (:* (:* D1 D6) D8) D8
type O3230 = :* (:* (:* D1 D6) D8) D8
type H697 = :* (:* (:* D1 D6) D8) D7
type D1687 = :* (:* (:* D1 D6) D8) D7
type O3227 = :* (:* (:* D1 D6) D8) D7
type H696 = :* (:* (:* D1 D6) D8) D6
type D1686 = :* (:* (:* D1 D6) D8) D6
type O3226 = :* (:* (:* D1 D6) D8) D6
type H695 = :* (:* (:* D1 D6) D8) D5
type D1685 = :* (:* (:* D1 D6) D8) D5
type O3225 = :* (:* (:* D1 D6) D8) D5
type H694 = :* (:* (:* D1 D6) D8) D4
type D1684 = :* (:* (:* D1 D6) D8) D4
type O3224 = :* (:* (:* D1 D6) D8) D4
type H693 = :* (:* (:* D1 D6) D8) D3
type D1683 = :* (:* (:* D1 D6) D8) D3
type O3223 = :* (:* (:* D1 D6) D8) D3
type H692 = :* (:* (:* D1 D6) D8) D2
type D1682 = :* (:* (:* D1 D6) D8) D2
type O3222 = :* (:* (:* D1 D6) D8) D2
type H691 = :* (:* (:* D1 D6) D8) D1
type D1681 = :* (:* (:* D1 D6) D8) D1
type O3221 = :* (:* (:* D1 D6) D8) D1
type H690 = :* (:* (:* D1 D6) D8) D0
type D1680 = :* (:* (:* D1 D6) D8) D0
type O3220 = :* (:* (:* D1 D6) D8) D0
type H68F = :* (:* (:* D1 D6) D7) D9
type D1679 = :* (:* (:* D1 D6) D7) D9
type O3217 = :* (:* (:* D1 D6) D7) D9
type H68E = :* (:* (:* D1 D6) D7) D8
type D1678 = :* (:* (:* D1 D6) D7) D8
type O3216 = :* (:* (:* D1 D6) D7) D8
type H68D = :* (:* (:* D1 D6) D7) D7
type D1677 = :* (:* (:* D1 D6) D7) D7
type O3215 = :* (:* (:* D1 D6) D7) D7
type H68C = :* (:* (:* D1 D6) D7) D6
type D1676 = :* (:* (:* D1 D6) D7) D6
type O3214 = :* (:* (:* D1 D6) D7) D6
type H68B = :* (:* (:* D1 D6) D7) D5
type D1675 = :* (:* (:* D1 D6) D7) D5
type O3213 = :* (:* (:* D1 D6) D7) D5
type H68A = :* (:* (:* D1 D6) D7) D4
type D1674 = :* (:* (:* D1 D6) D7) D4
type O3212 = :* (:* (:* D1 D6) D7) D4
type H689 = :* (:* (:* D1 D6) D7) D3
type D1673 = :* (:* (:* D1 D6) D7) D3
type O3211 = :* (:* (:* D1 D6) D7) D3
type H688 = :* (:* (:* D1 D6) D7) D2
type D1672 = :* (:* (:* D1 D6) D7) D2
type O3210 = :* (:* (:* D1 D6) D7) D2
type H687 = :* (:* (:* D1 D6) D7) D1
type D1671 = :* (:* (:* D1 D6) D7) D1
type O3207 = :* (:* (:* D1 D6) D7) D1
type H686 = :* (:* (:* D1 D6) D7) D0
type D1670 = :* (:* (:* D1 D6) D7) D0
type O3206 = :* (:* (:* D1 D6) D7) D0
type H685 = :* (:* (:* D1 D6) D6) D9
type D1669 = :* (:* (:* D1 D6) D6) D9
type O3205 = :* (:* (:* D1 D6) D6) D9
type H684 = :* (:* (:* D1 D6) D6) D8
type D1668 = :* (:* (:* D1 D6) D6) D8
type O3204 = :* (:* (:* D1 D6) D6) D8
type H683 = :* (:* (:* D1 D6) D6) D7
type D1667 = :* (:* (:* D1 D6) D6) D7
type O3203 = :* (:* (:* D1 D6) D6) D7
type H682 = :* (:* (:* D1 D6) D6) D6
type D1666 = :* (:* (:* D1 D6) D6) D6
type O3202 = :* (:* (:* D1 D6) D6) D6
type H681 = :* (:* (:* D1 D6) D6) D5
type D1665 = :* (:* (:* D1 D6) D6) D5
type O3201 = :* (:* (:* D1 D6) D6) D5
type H680 = :* (:* (:* D1 D6) D6) D4
type D1664 = :* (:* (:* D1 D6) D6) D4
type O3200 = :* (:* (:* D1 D6) D6) D4
type H67F = :* (:* (:* D1 D6) D6) D3
type D1663 = :* (:* (:* D1 D6) D6) D3
type O3177 = :* (:* (:* D1 D6) D6) D3
type H67E = :* (:* (:* D1 D6) D6) D2
type D1662 = :* (:* (:* D1 D6) D6) D2
type O3176 = :* (:* (:* D1 D6) D6) D2
type H67D = :* (:* (:* D1 D6) D6) D1
type D1661 = :* (:* (:* D1 D6) D6) D1
type O3175 = :* (:* (:* D1 D6) D6) D1
type H67C = :* (:* (:* D1 D6) D6) D0
type D1660 = :* (:* (:* D1 D6) D6) D0
type O3174 = :* (:* (:* D1 D6) D6) D0
type H67B = :* (:* (:* D1 D6) D5) D9
type D1659 = :* (:* (:* D1 D6) D5) D9
type O3173 = :* (:* (:* D1 D6) D5) D9
type H67A = :* (:* (:* D1 D6) D5) D8
type D1658 = :* (:* (:* D1 D6) D5) D8
type O3172 = :* (:* (:* D1 D6) D5) D8
type H679 = :* (:* (:* D1 D6) D5) D7
type D1657 = :* (:* (:* D1 D6) D5) D7
type O3171 = :* (:* (:* D1 D6) D5) D7
type H678 = :* (:* (:* D1 D6) D5) D6
type D1656 = :* (:* (:* D1 D6) D5) D6
type O3170 = :* (:* (:* D1 D6) D5) D6
type H677 = :* (:* (:* D1 D6) D5) D5
type D1655 = :* (:* (:* D1 D6) D5) D5
type O3167 = :* (:* (:* D1 D6) D5) D5
type H676 = :* (:* (:* D1 D6) D5) D4
type D1654 = :* (:* (:* D1 D6) D5) D4
type O3166 = :* (:* (:* D1 D6) D5) D4
type H675 = :* (:* (:* D1 D6) D5) D3
type D1653 = :* (:* (:* D1 D6) D5) D3
type O3165 = :* (:* (:* D1 D6) D5) D3
type H674 = :* (:* (:* D1 D6) D5) D2
type D1652 = :* (:* (:* D1 D6) D5) D2
type O3164 = :* (:* (:* D1 D6) D5) D2
type H673 = :* (:* (:* D1 D6) D5) D1
type D1651 = :* (:* (:* D1 D6) D5) D1
type O3163 = :* (:* (:* D1 D6) D5) D1
type H672 = :* (:* (:* D1 D6) D5) D0
type D1650 = :* (:* (:* D1 D6) D5) D0
type O3162 = :* (:* (:* D1 D6) D5) D0
type H671 = :* (:* (:* D1 D6) D4) D9
type D1649 = :* (:* (:* D1 D6) D4) D9
type O3161 = :* (:* (:* D1 D6) D4) D9
type H670 = :* (:* (:* D1 D6) D4) D8
type D1648 = :* (:* (:* D1 D6) D4) D8
type O3160 = :* (:* (:* D1 D6) D4) D8
type H66F = :* (:* (:* D1 D6) D4) D7
type D1647 = :* (:* (:* D1 D6) D4) D7
type O3157 = :* (:* (:* D1 D6) D4) D7
type H66E = :* (:* (:* D1 D6) D4) D6
type D1646 = :* (:* (:* D1 D6) D4) D6
type O3156 = :* (:* (:* D1 D6) D4) D6
type H66D = :* (:* (:* D1 D6) D4) D5
type D1645 = :* (:* (:* D1 D6) D4) D5
type O3155 = :* (:* (:* D1 D6) D4) D5
type H66C = :* (:* (:* D1 D6) D4) D4
type D1644 = :* (:* (:* D1 D6) D4) D4
type O3154 = :* (:* (:* D1 D6) D4) D4
type H66B = :* (:* (:* D1 D6) D4) D3
type D1643 = :* (:* (:* D1 D6) D4) D3
type O3153 = :* (:* (:* D1 D6) D4) D3
type H66A = :* (:* (:* D1 D6) D4) D2
type D1642 = :* (:* (:* D1 D6) D4) D2
type O3152 = :* (:* (:* D1 D6) D4) D2
type H669 = :* (:* (:* D1 D6) D4) D1
type D1641 = :* (:* (:* D1 D6) D4) D1
type O3151 = :* (:* (:* D1 D6) D4) D1
type H668 = :* (:* (:* D1 D6) D4) D0
type D1640 = :* (:* (:* D1 D6) D4) D0
type O3150 = :* (:* (:* D1 D6) D4) D0
type H667 = :* (:* (:* D1 D6) D3) D9
type D1639 = :* (:* (:* D1 D6) D3) D9
type O3147 = :* (:* (:* D1 D6) D3) D9
type H666 = :* (:* (:* D1 D6) D3) D8
type D1638 = :* (:* (:* D1 D6) D3) D8
type O3146 = :* (:* (:* D1 D6) D3) D8
type H665 = :* (:* (:* D1 D6) D3) D7
type D1637 = :* (:* (:* D1 D6) D3) D7
type O3145 = :* (:* (:* D1 D6) D3) D7
type H664 = :* (:* (:* D1 D6) D3) D6
type D1636 = :* (:* (:* D1 D6) D3) D6
type O3144 = :* (:* (:* D1 D6) D3) D6
type H663 = :* (:* (:* D1 D6) D3) D5
type D1635 = :* (:* (:* D1 D6) D3) D5
type O3143 = :* (:* (:* D1 D6) D3) D5
type H662 = :* (:* (:* D1 D6) D3) D4
type D1634 = :* (:* (:* D1 D6) D3) D4
type O3142 = :* (:* (:* D1 D6) D3) D4
type H661 = :* (:* (:* D1 D6) D3) D3
type D1633 = :* (:* (:* D1 D6) D3) D3
type O3141 = :* (:* (:* D1 D6) D3) D3
type H660 = :* (:* (:* D1 D6) D3) D2
type D1632 = :* (:* (:* D1 D6) D3) D2
type O3140 = :* (:* (:* D1 D6) D3) D2
type H65F = :* (:* (:* D1 D6) D3) D1
type D1631 = :* (:* (:* D1 D6) D3) D1
type O3137 = :* (:* (:* D1 D6) D3) D1
type H65E = :* (:* (:* D1 D6) D3) D0
type D1630 = :* (:* (:* D1 D6) D3) D0
type O3136 = :* (:* (:* D1 D6) D3) D0
type H65D = :* (:* (:* D1 D6) D2) D9
type D1629 = :* (:* (:* D1 D6) D2) D9
type O3135 = :* (:* (:* D1 D6) D2) D9
type H65C = :* (:* (:* D1 D6) D2) D8
type D1628 = :* (:* (:* D1 D6) D2) D8
type O3134 = :* (:* (:* D1 D6) D2) D8
type H65B = :* (:* (:* D1 D6) D2) D7
type D1627 = :* (:* (:* D1 D6) D2) D7
type O3133 = :* (:* (:* D1 D6) D2) D7
type H65A = :* (:* (:* D1 D6) D2) D6
type D1626 = :* (:* (:* D1 D6) D2) D6
type O3132 = :* (:* (:* D1 D6) D2) D6
type H659 = :* (:* (:* D1 D6) D2) D5
type D1625 = :* (:* (:* D1 D6) D2) D5
type O3131 = :* (:* (:* D1 D6) D2) D5
type H658 = :* (:* (:* D1 D6) D2) D4
type D1624 = :* (:* (:* D1 D6) D2) D4
type O3130 = :* (:* (:* D1 D6) D2) D4
type H657 = :* (:* (:* D1 D6) D2) D3
type D1623 = :* (:* (:* D1 D6) D2) D3
type O3127 = :* (:* (:* D1 D6) D2) D3
type H656 = :* (:* (:* D1 D6) D2) D2
type D1622 = :* (:* (:* D1 D6) D2) D2
type O3126 = :* (:* (:* D1 D6) D2) D2
type H655 = :* (:* (:* D1 D6) D2) D1
type D1621 = :* (:* (:* D1 D6) D2) D1
type O3125 = :* (:* (:* D1 D6) D2) D1
type H654 = :* (:* (:* D1 D6) D2) D0
type D1620 = :* (:* (:* D1 D6) D2) D0
type O3124 = :* (:* (:* D1 D6) D2) D0
type H653 = :* (:* (:* D1 D6) D1) D9
type D1619 = :* (:* (:* D1 D6) D1) D9
type O3123 = :* (:* (:* D1 D6) D1) D9
type H652 = :* (:* (:* D1 D6) D1) D8
type D1618 = :* (:* (:* D1 D6) D1) D8
type O3122 = :* (:* (:* D1 D6) D1) D8
type H651 = :* (:* (:* D1 D6) D1) D7
type D1617 = :* (:* (:* D1 D6) D1) D7
type O3121 = :* (:* (:* D1 D6) D1) D7
type H650 = :* (:* (:* D1 D6) D1) D6
type D1616 = :* (:* (:* D1 D6) D1) D6
type O3120 = :* (:* (:* D1 D6) D1) D6
type H64F = :* (:* (:* D1 D6) D1) D5
type D1615 = :* (:* (:* D1 D6) D1) D5
type O3117 = :* (:* (:* D1 D6) D1) D5
type H64E = :* (:* (:* D1 D6) D1) D4
type D1614 = :* (:* (:* D1 D6) D1) D4
type O3116 = :* (:* (:* D1 D6) D1) D4
type H64D = :* (:* (:* D1 D6) D1) D3
type D1613 = :* (:* (:* D1 D6) D1) D3
type O3115 = :* (:* (:* D1 D6) D1) D3
type H64C = :* (:* (:* D1 D6) D1) D2
type D1612 = :* (:* (:* D1 D6) D1) D2
type O3114 = :* (:* (:* D1 D6) D1) D2
type H64B = :* (:* (:* D1 D6) D1) D1
type D1611 = :* (:* (:* D1 D6) D1) D1
type O3113 = :* (:* (:* D1 D6) D1) D1
type H64A = :* (:* (:* D1 D6) D1) D0
type D1610 = :* (:* (:* D1 D6) D1) D0
type O3112 = :* (:* (:* D1 D6) D1) D0
type H649 = :* (:* (:* D1 D6) D0) D9
type D1609 = :* (:* (:* D1 D6) D0) D9
type O3111 = :* (:* (:* D1 D6) D0) D9
type H648 = :* (:* (:* D1 D6) D0) D8
type D1608 = :* (:* (:* D1 D6) D0) D8
type O3110 = :* (:* (:* D1 D6) D0) D8
type H647 = :* (:* (:* D1 D6) D0) D7
type D1607 = :* (:* (:* D1 D6) D0) D7
type O3107 = :* (:* (:* D1 D6) D0) D7
type H646 = :* (:* (:* D1 D6) D0) D6
type D1606 = :* (:* (:* D1 D6) D0) D6
type O3106 = :* (:* (:* D1 D6) D0) D6
type H645 = :* (:* (:* D1 D6) D0) D5
type D1605 = :* (:* (:* D1 D6) D0) D5
type O3105 = :* (:* (:* D1 D6) D0) D5
type H644 = :* (:* (:* D1 D6) D0) D4
type D1604 = :* (:* (:* D1 D6) D0) D4
type O3104 = :* (:* (:* D1 D6) D0) D4
type H643 = :* (:* (:* D1 D6) D0) D3
type D1603 = :* (:* (:* D1 D6) D0) D3
type O3103 = :* (:* (:* D1 D6) D0) D3
type H642 = :* (:* (:* D1 D6) D0) D2
type D1602 = :* (:* (:* D1 D6) D0) D2
type O3102 = :* (:* (:* D1 D6) D0) D2
type H641 = :* (:* (:* D1 D6) D0) D1
type D1601 = :* (:* (:* D1 D6) D0) D1
type O3101 = :* (:* (:* D1 D6) D0) D1
type H640 = :* (:* (:* D1 D6) D0) D0
type D1600 = :* (:* (:* D1 D6) D0) D0
type O3100 = :* (:* (:* D1 D6) D0) D0
type H63F = :* (:* (:* D1 D5) D9) D9
type D1599 = :* (:* (:* D1 D5) D9) D9
type O3077 = :* (:* (:* D1 D5) D9) D9
type H63E = :* (:* (:* D1 D5) D9) D8
type D1598 = :* (:* (:* D1 D5) D9) D8
type O3076 = :* (:* (:* D1 D5) D9) D8
type H63D = :* (:* (:* D1 D5) D9) D7
type D1597 = :* (:* (:* D1 D5) D9) D7
type O3075 = :* (:* (:* D1 D5) D9) D7
type H63C = :* (:* (:* D1 D5) D9) D6
type D1596 = :* (:* (:* D1 D5) D9) D6
type O3074 = :* (:* (:* D1 D5) D9) D6
type H63B = :* (:* (:* D1 D5) D9) D5
type D1595 = :* (:* (:* D1 D5) D9) D5
type O3073 = :* (:* (:* D1 D5) D9) D5
type H63A = :* (:* (:* D1 D5) D9) D4
type D1594 = :* (:* (:* D1 D5) D9) D4
type O3072 = :* (:* (:* D1 D5) D9) D4
type H639 = :* (:* (:* D1 D5) D9) D3
type D1593 = :* (:* (:* D1 D5) D9) D3
type O3071 = :* (:* (:* D1 D5) D9) D3
type H638 = :* (:* (:* D1 D5) D9) D2
type D1592 = :* (:* (:* D1 D5) D9) D2
type O3070 = :* (:* (:* D1 D5) D9) D2
type H637 = :* (:* (:* D1 D5) D9) D1
type D1591 = :* (:* (:* D1 D5) D9) D1
type O3067 = :* (:* (:* D1 D5) D9) D1
type H636 = :* (:* (:* D1 D5) D9) D0
type D1590 = :* (:* (:* D1 D5) D9) D0
type O3066 = :* (:* (:* D1 D5) D9) D0
type H635 = :* (:* (:* D1 D5) D8) D9
type D1589 = :* (:* (:* D1 D5) D8) D9
type O3065 = :* (:* (:* D1 D5) D8) D9
type H634 = :* (:* (:* D1 D5) D8) D8
type D1588 = :* (:* (:* D1 D5) D8) D8
type O3064 = :* (:* (:* D1 D5) D8) D8
type H633 = :* (:* (:* D1 D5) D8) D7
type D1587 = :* (:* (:* D1 D5) D8) D7
type O3063 = :* (:* (:* D1 D5) D8) D7
type H632 = :* (:* (:* D1 D5) D8) D6
type D1586 = :* (:* (:* D1 D5) D8) D6
type O3062 = :* (:* (:* D1 D5) D8) D6
type H631 = :* (:* (:* D1 D5) D8) D5
type D1585 = :* (:* (:* D1 D5) D8) D5
type O3061 = :* (:* (:* D1 D5) D8) D5
type H630 = :* (:* (:* D1 D5) D8) D4
type D1584 = :* (:* (:* D1 D5) D8) D4
type O3060 = :* (:* (:* D1 D5) D8) D4
type H62F = :* (:* (:* D1 D5) D8) D3
type D1583 = :* (:* (:* D1 D5) D8) D3
type O3057 = :* (:* (:* D1 D5) D8) D3
type H62E = :* (:* (:* D1 D5) D8) D2
type D1582 = :* (:* (:* D1 D5) D8) D2
type O3056 = :* (:* (:* D1 D5) D8) D2
type H62D = :* (:* (:* D1 D5) D8) D1
type D1581 = :* (:* (:* D1 D5) D8) D1
type O3055 = :* (:* (:* D1 D5) D8) D1
type H62C = :* (:* (:* D1 D5) D8) D0
type D1580 = :* (:* (:* D1 D5) D8) D0
type O3054 = :* (:* (:* D1 D5) D8) D0
type H62B = :* (:* (:* D1 D5) D7) D9
type D1579 = :* (:* (:* D1 D5) D7) D9
type O3053 = :* (:* (:* D1 D5) D7) D9
type H62A = :* (:* (:* D1 D5) D7) D8
type D1578 = :* (:* (:* D1 D5) D7) D8
type O3052 = :* (:* (:* D1 D5) D7) D8
type H629 = :* (:* (:* D1 D5) D7) D7
type D1577 = :* (:* (:* D1 D5) D7) D7
type O3051 = :* (:* (:* D1 D5) D7) D7
type H628 = :* (:* (:* D1 D5) D7) D6
type D1576 = :* (:* (:* D1 D5) D7) D6
type O3050 = :* (:* (:* D1 D5) D7) D6
type H627 = :* (:* (:* D1 D5) D7) D5
type D1575 = :* (:* (:* D1 D5) D7) D5
type O3047 = :* (:* (:* D1 D5) D7) D5
type H626 = :* (:* (:* D1 D5) D7) D4
type D1574 = :* (:* (:* D1 D5) D7) D4
type O3046 = :* (:* (:* D1 D5) D7) D4
type H625 = :* (:* (:* D1 D5) D7) D3
type D1573 = :* (:* (:* D1 D5) D7) D3
type O3045 = :* (:* (:* D1 D5) D7) D3
type H624 = :* (:* (:* D1 D5) D7) D2
type D1572 = :* (:* (:* D1 D5) D7) D2
type O3044 = :* (:* (:* D1 D5) D7) D2
type H623 = :* (:* (:* D1 D5) D7) D1
type D1571 = :* (:* (:* D1 D5) D7) D1
type O3043 = :* (:* (:* D1 D5) D7) D1
type H622 = :* (:* (:* D1 D5) D7) D0
type D1570 = :* (:* (:* D1 D5) D7) D0
type O3042 = :* (:* (:* D1 D5) D7) D0
type H621 = :* (:* (:* D1 D5) D6) D9
type D1569 = :* (:* (:* D1 D5) D6) D9
type O3041 = :* (:* (:* D1 D5) D6) D9
type H620 = :* (:* (:* D1 D5) D6) D8
type D1568 = :* (:* (:* D1 D5) D6) D8
type O3040 = :* (:* (:* D1 D5) D6) D8
type H61F = :* (:* (:* D1 D5) D6) D7
type D1567 = :* (:* (:* D1 D5) D6) D7
type O3037 = :* (:* (:* D1 D5) D6) D7
type H61E = :* (:* (:* D1 D5) D6) D6
type D1566 = :* (:* (:* D1 D5) D6) D6
type O3036 = :* (:* (:* D1 D5) D6) D6
type H61D = :* (:* (:* D1 D5) D6) D5
type D1565 = :* (:* (:* D1 D5) D6) D5
type O3035 = :* (:* (:* D1 D5) D6) D5
type H61C = :* (:* (:* D1 D5) D6) D4
type D1564 = :* (:* (:* D1 D5) D6) D4
type O3034 = :* (:* (:* D1 D5) D6) D4
type H61B = :* (:* (:* D1 D5) D6) D3
type D1563 = :* (:* (:* D1 D5) D6) D3
type O3033 = :* (:* (:* D1 D5) D6) D3
type H61A = :* (:* (:* D1 D5) D6) D2
type D1562 = :* (:* (:* D1 D5) D6) D2
type O3032 = :* (:* (:* D1 D5) D6) D2
type H619 = :* (:* (:* D1 D5) D6) D1
type D1561 = :* (:* (:* D1 D5) D6) D1
type O3031 = :* (:* (:* D1 D5) D6) D1
type H618 = :* (:* (:* D1 D5) D6) D0
type D1560 = :* (:* (:* D1 D5) D6) D0
type O3030 = :* (:* (:* D1 D5) D6) D0
type H617 = :* (:* (:* D1 D5) D5) D9
type D1559 = :* (:* (:* D1 D5) D5) D9
type O3027 = :* (:* (:* D1 D5) D5) D9
type H616 = :* (:* (:* D1 D5) D5) D8
type D1558 = :* (:* (:* D1 D5) D5) D8
type O3026 = :* (:* (:* D1 D5) D5) D8
type H615 = :* (:* (:* D1 D5) D5) D7
type D1557 = :* (:* (:* D1 D5) D5) D7
type O3025 = :* (:* (:* D1 D5) D5) D7
type H614 = :* (:* (:* D1 D5) D5) D6
type D1556 = :* (:* (:* D1 D5) D5) D6
type O3024 = :* (:* (:* D1 D5) D5) D6
type H613 = :* (:* (:* D1 D5) D5) D5
type D1555 = :* (:* (:* D1 D5) D5) D5
type O3023 = :* (:* (:* D1 D5) D5) D5
type H612 = :* (:* (:* D1 D5) D5) D4
type D1554 = :* (:* (:* D1 D5) D5) D4
type O3022 = :* (:* (:* D1 D5) D5) D4
type H611 = :* (:* (:* D1 D5) D5) D3
type D1553 = :* (:* (:* D1 D5) D5) D3
type O3021 = :* (:* (:* D1 D5) D5) D3
type H610 = :* (:* (:* D1 D5) D5) D2
type D1552 = :* (:* (:* D1 D5) D5) D2
type O3020 = :* (:* (:* D1 D5) D5) D2
type H60F = :* (:* (:* D1 D5) D5) D1
type D1551 = :* (:* (:* D1 D5) D5) D1
type O3017 = :* (:* (:* D1 D5) D5) D1
type H60E = :* (:* (:* D1 D5) D5) D0
type D1550 = :* (:* (:* D1 D5) D5) D0
type O3016 = :* (:* (:* D1 D5) D5) D0
type H60D = :* (:* (:* D1 D5) D4) D9
type D1549 = :* (:* (:* D1 D5) D4) D9
type O3015 = :* (:* (:* D1 D5) D4) D9
type H60C = :* (:* (:* D1 D5) D4) D8
type D1548 = :* (:* (:* D1 D5) D4) D8
type O3014 = :* (:* (:* D1 D5) D4) D8
type H60B = :* (:* (:* D1 D5) D4) D7
type D1547 = :* (:* (:* D1 D5) D4) D7
type O3013 = :* (:* (:* D1 D5) D4) D7
type H60A = :* (:* (:* D1 D5) D4) D6
type D1546 = :* (:* (:* D1 D5) D4) D6
type O3012 = :* (:* (:* D1 D5) D4) D6
type H609 = :* (:* (:* D1 D5) D4) D5
type D1545 = :* (:* (:* D1 D5) D4) D5
type O3011 = :* (:* (:* D1 D5) D4) D5
type H608 = :* (:* (:* D1 D5) D4) D4
type D1544 = :* (:* (:* D1 D5) D4) D4
type O3010 = :* (:* (:* D1 D5) D4) D4
type H607 = :* (:* (:* D1 D5) D4) D3
type D1543 = :* (:* (:* D1 D5) D4) D3
type O3007 = :* (:* (:* D1 D5) D4) D3
type H606 = :* (:* (:* D1 D5) D4) D2
type D1542 = :* (:* (:* D1 D5) D4) D2
type O3006 = :* (:* (:* D1 D5) D4) D2
type H605 = :* (:* (:* D1 D5) D4) D1
type D1541 = :* (:* (:* D1 D5) D4) D1
type O3005 = :* (:* (:* D1 D5) D4) D1
type H604 = :* (:* (:* D1 D5) D4) D0
type D1540 = :* (:* (:* D1 D5) D4) D0
type O3004 = :* (:* (:* D1 D5) D4) D0
type H603 = :* (:* (:* D1 D5) D3) D9
type D1539 = :* (:* (:* D1 D5) D3) D9
type O3003 = :* (:* (:* D1 D5) D3) D9
type H602 = :* (:* (:* D1 D5) D3) D8
type D1538 = :* (:* (:* D1 D5) D3) D8
type O3002 = :* (:* (:* D1 D5) D3) D8
type H601 = :* (:* (:* D1 D5) D3) D7
type D1537 = :* (:* (:* D1 D5) D3) D7
type O3001 = :* (:* (:* D1 D5) D3) D7
type H600 = :* (:* (:* D1 D5) D3) D6
type D1536 = :* (:* (:* D1 D5) D3) D6
type O3000 = :* (:* (:* D1 D5) D3) D6
type H5FF = :* (:* (:* D1 D5) D3) D5
type D1535 = :* (:* (:* D1 D5) D3) D5
type O2777 = :* (:* (:* D1 D5) D3) D5
type H5FE = :* (:* (:* D1 D5) D3) D4
type D1534 = :* (:* (:* D1 D5) D3) D4
type O2776 = :* (:* (:* D1 D5) D3) D4
type H5FD = :* (:* (:* D1 D5) D3) D3
type D1533 = :* (:* (:* D1 D5) D3) D3
type O2775 = :* (:* (:* D1 D5) D3) D3
type H5FC = :* (:* (:* D1 D5) D3) D2
type D1532 = :* (:* (:* D1 D5) D3) D2
type O2774 = :* (:* (:* D1 D5) D3) D2
type H5FB = :* (:* (:* D1 D5) D3) D1
type D1531 = :* (:* (:* D1 D5) D3) D1
type O2773 = :* (:* (:* D1 D5) D3) D1
type H5FA = :* (:* (:* D1 D5) D3) D0
type D1530 = :* (:* (:* D1 D5) D3) D0
type O2772 = :* (:* (:* D1 D5) D3) D0
type H5F9 = :* (:* (:* D1 D5) D2) D9
type D1529 = :* (:* (:* D1 D5) D2) D9
type O2771 = :* (:* (:* D1 D5) D2) D9
type H5F8 = :* (:* (:* D1 D5) D2) D8
type D1528 = :* (:* (:* D1 D5) D2) D8
type O2770 = :* (:* (:* D1 D5) D2) D8
type H5F7 = :* (:* (:* D1 D5) D2) D7
type D1527 = :* (:* (:* D1 D5) D2) D7
type O2767 = :* (:* (:* D1 D5) D2) D7
type H5F6 = :* (:* (:* D1 D5) D2) D6
type D1526 = :* (:* (:* D1 D5) D2) D6
type O2766 = :* (:* (:* D1 D5) D2) D6
type H5F5 = :* (:* (:* D1 D5) D2) D5
type D1525 = :* (:* (:* D1 D5) D2) D5
type O2765 = :* (:* (:* D1 D5) D2) D5
type H5F4 = :* (:* (:* D1 D5) D2) D4
type D1524 = :* (:* (:* D1 D5) D2) D4
type O2764 = :* (:* (:* D1 D5) D2) D4
type H5F3 = :* (:* (:* D1 D5) D2) D3
type D1523 = :* (:* (:* D1 D5) D2) D3
type O2763 = :* (:* (:* D1 D5) D2) D3
type H5F2 = :* (:* (:* D1 D5) D2) D2
type D1522 = :* (:* (:* D1 D5) D2) D2
type O2762 = :* (:* (:* D1 D5) D2) D2
type H5F1 = :* (:* (:* D1 D5) D2) D1
type D1521 = :* (:* (:* D1 D5) D2) D1
type O2761 = :* (:* (:* D1 D5) D2) D1
type H5F0 = :* (:* (:* D1 D5) D2) D0
type D1520 = :* (:* (:* D1 D5) D2) D0
type O2760 = :* (:* (:* D1 D5) D2) D0
type H5EF = :* (:* (:* D1 D5) D1) D9
type D1519 = :* (:* (:* D1 D5) D1) D9
type O2757 = :* (:* (:* D1 D5) D1) D9
type H5EE = :* (:* (:* D1 D5) D1) D8
type D1518 = :* (:* (:* D1 D5) D1) D8
type O2756 = :* (:* (:* D1 D5) D1) D8
type H5ED = :* (:* (:* D1 D5) D1) D7
type D1517 = :* (:* (:* D1 D5) D1) D7
type O2755 = :* (:* (:* D1 D5) D1) D7
type H5EC = :* (:* (:* D1 D5) D1) D6
type D1516 = :* (:* (:* D1 D5) D1) D6
type O2754 = :* (:* (:* D1 D5) D1) D6
type H5EB = :* (:* (:* D1 D5) D1) D5
type D1515 = :* (:* (:* D1 D5) D1) D5
type O2753 = :* (:* (:* D1 D5) D1) D5
type H5EA = :* (:* (:* D1 D5) D1) D4
type D1514 = :* (:* (:* D1 D5) D1) D4
type O2752 = :* (:* (:* D1 D5) D1) D4
type H5E9 = :* (:* (:* D1 D5) D1) D3
type D1513 = :* (:* (:* D1 D5) D1) D3
type O2751 = :* (:* (:* D1 D5) D1) D3
type H5E8 = :* (:* (:* D1 D5) D1) D2
type D1512 = :* (:* (:* D1 D5) D1) D2
type O2750 = :* (:* (:* D1 D5) D1) D2
type H5E7 = :* (:* (:* D1 D5) D1) D1
type D1511 = :* (:* (:* D1 D5) D1) D1
type O2747 = :* (:* (:* D1 D5) D1) D1
type H5E6 = :* (:* (:* D1 D5) D1) D0
type D1510 = :* (:* (:* D1 D5) D1) D0
type O2746 = :* (:* (:* D1 D5) D1) D0
type H5E5 = :* (:* (:* D1 D5) D0) D9
type D1509 = :* (:* (:* D1 D5) D0) D9
type O2745 = :* (:* (:* D1 D5) D0) D9
type H5E4 = :* (:* (:* D1 D5) D0) D8
type D1508 = :* (:* (:* D1 D5) D0) D8
type O2744 = :* (:* (:* D1 D5) D0) D8
type H5E3 = :* (:* (:* D1 D5) D0) D7
type D1507 = :* (:* (:* D1 D5) D0) D7
type O2743 = :* (:* (:* D1 D5) D0) D7
type H5E2 = :* (:* (:* D1 D5) D0) D6
type D1506 = :* (:* (:* D1 D5) D0) D6
type O2742 = :* (:* (:* D1 D5) D0) D6
type H5E1 = :* (:* (:* D1 D5) D0) D5
type D1505 = :* (:* (:* D1 D5) D0) D5
type O2741 = :* (:* (:* D1 D5) D0) D5
type H5E0 = :* (:* (:* D1 D5) D0) D4
type D1504 = :* (:* (:* D1 D5) D0) D4
type O2740 = :* (:* (:* D1 D5) D0) D4
type H5DF = :* (:* (:* D1 D5) D0) D3
type D1503 = :* (:* (:* D1 D5) D0) D3
type O2737 = :* (:* (:* D1 D5) D0) D3
type H5DE = :* (:* (:* D1 D5) D0) D2
type D1502 = :* (:* (:* D1 D5) D0) D2
type O2736 = :* (:* (:* D1 D5) D0) D2
type H5DD = :* (:* (:* D1 D5) D0) D1
type D1501 = :* (:* (:* D1 D5) D0) D1
type O2735 = :* (:* (:* D1 D5) D0) D1
type H5DC = :* (:* (:* D1 D5) D0) D0
type D1500 = :* (:* (:* D1 D5) D0) D0
type O2734 = :* (:* (:* D1 D5) D0) D0
type H5DB = :* (:* (:* D1 D4) D9) D9
type D1499 = :* (:* (:* D1 D4) D9) D9
type O2733 = :* (:* (:* D1 D4) D9) D9
type H5DA = :* (:* (:* D1 D4) D9) D8
type D1498 = :* (:* (:* D1 D4) D9) D8
type O2732 = :* (:* (:* D1 D4) D9) D8
type H5D9 = :* (:* (:* D1 D4) D9) D7
type D1497 = :* (:* (:* D1 D4) D9) D7
type O2731 = :* (:* (:* D1 D4) D9) D7
type H5D8 = :* (:* (:* D1 D4) D9) D6
type D1496 = :* (:* (:* D1 D4) D9) D6
type O2730 = :* (:* (:* D1 D4) D9) D6
type H5D7 = :* (:* (:* D1 D4) D9) D5
type D1495 = :* (:* (:* D1 D4) D9) D5
type O2727 = :* (:* (:* D1 D4) D9) D5
type H5D6 = :* (:* (:* D1 D4) D9) D4
type D1494 = :* (:* (:* D1 D4) D9) D4
type O2726 = :* (:* (:* D1 D4) D9) D4
type H5D5 = :* (:* (:* D1 D4) D9) D3
type D1493 = :* (:* (:* D1 D4) D9) D3
type O2725 = :* (:* (:* D1 D4) D9) D3
type H5D4 = :* (:* (:* D1 D4) D9) D2
type D1492 = :* (:* (:* D1 D4) D9) D2
type O2724 = :* (:* (:* D1 D4) D9) D2
type H5D3 = :* (:* (:* D1 D4) D9) D1
type D1491 = :* (:* (:* D1 D4) D9) D1
type O2723 = :* (:* (:* D1 D4) D9) D1
type H5D2 = :* (:* (:* D1 D4) D9) D0
type D1490 = :* (:* (:* D1 D4) D9) D0
type O2722 = :* (:* (:* D1 D4) D9) D0
type H5D1 = :* (:* (:* D1 D4) D8) D9
type D1489 = :* (:* (:* D1 D4) D8) D9
type O2721 = :* (:* (:* D1 D4) D8) D9
type H5D0 = :* (:* (:* D1 D4) D8) D8
type D1488 = :* (:* (:* D1 D4) D8) D8
type O2720 = :* (:* (:* D1 D4) D8) D8
type H5CF = :* (:* (:* D1 D4) D8) D7
type D1487 = :* (:* (:* D1 D4) D8) D7
type O2717 = :* (:* (:* D1 D4) D8) D7
type H5CE = :* (:* (:* D1 D4) D8) D6
type D1486 = :* (:* (:* D1 D4) D8) D6
type O2716 = :* (:* (:* D1 D4) D8) D6
type H5CD = :* (:* (:* D1 D4) D8) D5
type D1485 = :* (:* (:* D1 D4) D8) D5
type O2715 = :* (:* (:* D1 D4) D8) D5
type H5CC = :* (:* (:* D1 D4) D8) D4
type D1484 = :* (:* (:* D1 D4) D8) D4
type O2714 = :* (:* (:* D1 D4) D8) D4
type H5CB = :* (:* (:* D1 D4) D8) D3
type D1483 = :* (:* (:* D1 D4) D8) D3
type O2713 = :* (:* (:* D1 D4) D8) D3
type H5CA = :* (:* (:* D1 D4) D8) D2
type D1482 = :* (:* (:* D1 D4) D8) D2
type O2712 = :* (:* (:* D1 D4) D8) D2
type H5C9 = :* (:* (:* D1 D4) D8) D1
type D1481 = :* (:* (:* D1 D4) D8) D1
type O2711 = :* (:* (:* D1 D4) D8) D1
type H5C8 = :* (:* (:* D1 D4) D8) D0
type D1480 = :* (:* (:* D1 D4) D8) D0
type O2710 = :* (:* (:* D1 D4) D8) D0
type H5C7 = :* (:* (:* D1 D4) D7) D9
type D1479 = :* (:* (:* D1 D4) D7) D9
type O2707 = :* (:* (:* D1 D4) D7) D9
type H5C6 = :* (:* (:* D1 D4) D7) D8
type D1478 = :* (:* (:* D1 D4) D7) D8
type O2706 = :* (:* (:* D1 D4) D7) D8
type H5C5 = :* (:* (:* D1 D4) D7) D7
type D1477 = :* (:* (:* D1 D4) D7) D7
type O2705 = :* (:* (:* D1 D4) D7) D7
type H5C4 = :* (:* (:* D1 D4) D7) D6
type D1476 = :* (:* (:* D1 D4) D7) D6
type O2704 = :* (:* (:* D1 D4) D7) D6
type H5C3 = :* (:* (:* D1 D4) D7) D5
type D1475 = :* (:* (:* D1 D4) D7) D5
type O2703 = :* (:* (:* D1 D4) D7) D5
type H5C2 = :* (:* (:* D1 D4) D7) D4
type D1474 = :* (:* (:* D1 D4) D7) D4
type O2702 = :* (:* (:* D1 D4) D7) D4
type H5C1 = :* (:* (:* D1 D4) D7) D3
type D1473 = :* (:* (:* D1 D4) D7) D3
type O2701 = :* (:* (:* D1 D4) D7) D3
type H5C0 = :* (:* (:* D1 D4) D7) D2
type D1472 = :* (:* (:* D1 D4) D7) D2
type O2700 = :* (:* (:* D1 D4) D7) D2
type H5BF = :* (:* (:* D1 D4) D7) D1
type D1471 = :* (:* (:* D1 D4) D7) D1
type O2677 = :* (:* (:* D1 D4) D7) D1
type H5BE = :* (:* (:* D1 D4) D7) D0
type D1470 = :* (:* (:* D1 D4) D7) D0
type O2676 = :* (:* (:* D1 D4) D7) D0
type H5BD = :* (:* (:* D1 D4) D6) D9
type D1469 = :* (:* (:* D1 D4) D6) D9
type O2675 = :* (:* (:* D1 D4) D6) D9
type H5BC = :* (:* (:* D1 D4) D6) D8
type D1468 = :* (:* (:* D1 D4) D6) D8
type O2674 = :* (:* (:* D1 D4) D6) D8
type H5BB = :* (:* (:* D1 D4) D6) D7
type D1467 = :* (:* (:* D1 D4) D6) D7
type O2673 = :* (:* (:* D1 D4) D6) D7
type H5BA = :* (:* (:* D1 D4) D6) D6
type D1466 = :* (:* (:* D1 D4) D6) D6
type O2672 = :* (:* (:* D1 D4) D6) D6
type H5B9 = :* (:* (:* D1 D4) D6) D5
type D1465 = :* (:* (:* D1 D4) D6) D5
type O2671 = :* (:* (:* D1 D4) D6) D5
type H5B8 = :* (:* (:* D1 D4) D6) D4
type D1464 = :* (:* (:* D1 D4) D6) D4
type O2670 = :* (:* (:* D1 D4) D6) D4
type H5B7 = :* (:* (:* D1 D4) D6) D3
type D1463 = :* (:* (:* D1 D4) D6) D3
type O2667 = :* (:* (:* D1 D4) D6) D3
type H5B6 = :* (:* (:* D1 D4) D6) D2
type D1462 = :* (:* (:* D1 D4) D6) D2
type O2666 = :* (:* (:* D1 D4) D6) D2
type H5B5 = :* (:* (:* D1 D4) D6) D1
type D1461 = :* (:* (:* D1 D4) D6) D1
type O2665 = :* (:* (:* D1 D4) D6) D1
type H5B4 = :* (:* (:* D1 D4) D6) D0
type D1460 = :* (:* (:* D1 D4) D6) D0
type O2664 = :* (:* (:* D1 D4) D6) D0
type H5B3 = :* (:* (:* D1 D4) D5) D9
type D1459 = :* (:* (:* D1 D4) D5) D9
type O2663 = :* (:* (:* D1 D4) D5) D9
type H5B2 = :* (:* (:* D1 D4) D5) D8
type D1458 = :* (:* (:* D1 D4) D5) D8
type O2662 = :* (:* (:* D1 D4) D5) D8
type H5B1 = :* (:* (:* D1 D4) D5) D7
type D1457 = :* (:* (:* D1 D4) D5) D7
type O2661 = :* (:* (:* D1 D4) D5) D7
type H5B0 = :* (:* (:* D1 D4) D5) D6
type D1456 = :* (:* (:* D1 D4) D5) D6
type O2660 = :* (:* (:* D1 D4) D5) D6
type H5AF = :* (:* (:* D1 D4) D5) D5
type D1455 = :* (:* (:* D1 D4) D5) D5
type O2657 = :* (:* (:* D1 D4) D5) D5
type H5AE = :* (:* (:* D1 D4) D5) D4
type D1454 = :* (:* (:* D1 D4) D5) D4
type O2656 = :* (:* (:* D1 D4) D5) D4
type H5AD = :* (:* (:* D1 D4) D5) D3
type D1453 = :* (:* (:* D1 D4) D5) D3
type O2655 = :* (:* (:* D1 D4) D5) D3
type H5AC = :* (:* (:* D1 D4) D5) D2
type D1452 = :* (:* (:* D1 D4) D5) D2
type O2654 = :* (:* (:* D1 D4) D5) D2
type H5AB = :* (:* (:* D1 D4) D5) D1
type D1451 = :* (:* (:* D1 D4) D5) D1
type O2653 = :* (:* (:* D1 D4) D5) D1
type H5AA = :* (:* (:* D1 D4) D5) D0
type D1450 = :* (:* (:* D1 D4) D5) D0
type O2652 = :* (:* (:* D1 D4) D5) D0
type H5A9 = :* (:* (:* D1 D4) D4) D9
type D1449 = :* (:* (:* D1 D4) D4) D9
type O2651 = :* (:* (:* D1 D4) D4) D9
type H5A8 = :* (:* (:* D1 D4) D4) D8
type D1448 = :* (:* (:* D1 D4) D4) D8
type O2650 = :* (:* (:* D1 D4) D4) D8
type H5A7 = :* (:* (:* D1 D4) D4) D7
type D1447 = :* (:* (:* D1 D4) D4) D7
type O2647 = :* (:* (:* D1 D4) D4) D7
type H5A6 = :* (:* (:* D1 D4) D4) D6
type D1446 = :* (:* (:* D1 D4) D4) D6
type O2646 = :* (:* (:* D1 D4) D4) D6
type H5A5 = :* (:* (:* D1 D4) D4) D5
type D1445 = :* (:* (:* D1 D4) D4) D5
type O2645 = :* (:* (:* D1 D4) D4) D5
type H5A4 = :* (:* (:* D1 D4) D4) D4
type D1444 = :* (:* (:* D1 D4) D4) D4
type O2644 = :* (:* (:* D1 D4) D4) D4
type H5A3 = :* (:* (:* D1 D4) D4) D3
type D1443 = :* (:* (:* D1 D4) D4) D3
type O2643 = :* (:* (:* D1 D4) D4) D3
type H5A2 = :* (:* (:* D1 D4) D4) D2
type D1442 = :* (:* (:* D1 D4) D4) D2
type O2642 = :* (:* (:* D1 D4) D4) D2
type H5A1 = :* (:* (:* D1 D4) D4) D1
type D1441 = :* (:* (:* D1 D4) D4) D1
type O2641 = :* (:* (:* D1 D4) D4) D1
type H5A0 = :* (:* (:* D1 D4) D4) D0
type D1440 = :* (:* (:* D1 D4) D4) D0
type O2640 = :* (:* (:* D1 D4) D4) D0
type H59F = :* (:* (:* D1 D4) D3) D9
type D1439 = :* (:* (:* D1 D4) D3) D9
type O2637 = :* (:* (:* D1 D4) D3) D9
type H59E = :* (:* (:* D1 D4) D3) D8
type D1438 = :* (:* (:* D1 D4) D3) D8
type O2636 = :* (:* (:* D1 D4) D3) D8
type H59D = :* (:* (:* D1 D4) D3) D7
type D1437 = :* (:* (:* D1 D4) D3) D7
type O2635 = :* (:* (:* D1 D4) D3) D7
type H59C = :* (:* (:* D1 D4) D3) D6
type D1436 = :* (:* (:* D1 D4) D3) D6
type O2634 = :* (:* (:* D1 D4) D3) D6
type H59B = :* (:* (:* D1 D4) D3) D5
type D1435 = :* (:* (:* D1 D4) D3) D5
type O2633 = :* (:* (:* D1 D4) D3) D5
type H59A = :* (:* (:* D1 D4) D3) D4
type D1434 = :* (:* (:* D1 D4) D3) D4
type O2632 = :* (:* (:* D1 D4) D3) D4
type H599 = :* (:* (:* D1 D4) D3) D3
type D1433 = :* (:* (:* D1 D4) D3) D3
type O2631 = :* (:* (:* D1 D4) D3) D3
type H598 = :* (:* (:* D1 D4) D3) D2
type D1432 = :* (:* (:* D1 D4) D3) D2
type O2630 = :* (:* (:* D1 D4) D3) D2
type H597 = :* (:* (:* D1 D4) D3) D1
type D1431 = :* (:* (:* D1 D4) D3) D1
type O2627 = :* (:* (:* D1 D4) D3) D1
type H596 = :* (:* (:* D1 D4) D3) D0
type D1430 = :* (:* (:* D1 D4) D3) D0
type O2626 = :* (:* (:* D1 D4) D3) D0
type H595 = :* (:* (:* D1 D4) D2) D9
type D1429 = :* (:* (:* D1 D4) D2) D9
type O2625 = :* (:* (:* D1 D4) D2) D9
type H594 = :* (:* (:* D1 D4) D2) D8
type D1428 = :* (:* (:* D1 D4) D2) D8
type O2624 = :* (:* (:* D1 D4) D2) D8
type H593 = :* (:* (:* D1 D4) D2) D7
type D1427 = :* (:* (:* D1 D4) D2) D7
type O2623 = :* (:* (:* D1 D4) D2) D7
type H592 = :* (:* (:* D1 D4) D2) D6
type D1426 = :* (:* (:* D1 D4) D2) D6
type O2622 = :* (:* (:* D1 D4) D2) D6
type H591 = :* (:* (:* D1 D4) D2) D5
type D1425 = :* (:* (:* D1 D4) D2) D5
type O2621 = :* (:* (:* D1 D4) D2) D5
type H590 = :* (:* (:* D1 D4) D2) D4
type D1424 = :* (:* (:* D1 D4) D2) D4
type O2620 = :* (:* (:* D1 D4) D2) D4
type H58F = :* (:* (:* D1 D4) D2) D3
type D1423 = :* (:* (:* D1 D4) D2) D3
type O2617 = :* (:* (:* D1 D4) D2) D3
type H58E = :* (:* (:* D1 D4) D2) D2
type D1422 = :* (:* (:* D1 D4) D2) D2
type O2616 = :* (:* (:* D1 D4) D2) D2
type H58D = :* (:* (:* D1 D4) D2) D1
type D1421 = :* (:* (:* D1 D4) D2) D1
type O2615 = :* (:* (:* D1 D4) D2) D1
type H58C = :* (:* (:* D1 D4) D2) D0
type D1420 = :* (:* (:* D1 D4) D2) D0
type O2614 = :* (:* (:* D1 D4) D2) D0
type H58B = :* (:* (:* D1 D4) D1) D9
type D1419 = :* (:* (:* D1 D4) D1) D9
type O2613 = :* (:* (:* D1 D4) D1) D9
type H58A = :* (:* (:* D1 D4) D1) D8
type D1418 = :* (:* (:* D1 D4) D1) D8
type O2612 = :* (:* (:* D1 D4) D1) D8
type H589 = :* (:* (:* D1 D4) D1) D7
type D1417 = :* (:* (:* D1 D4) D1) D7
type O2611 = :* (:* (:* D1 D4) D1) D7
type H588 = :* (:* (:* D1 D4) D1) D6
type D1416 = :* (:* (:* D1 D4) D1) D6
type O2610 = :* (:* (:* D1 D4) D1) D6
type H587 = :* (:* (:* D1 D4) D1) D5
type D1415 = :* (:* (:* D1 D4) D1) D5
type O2607 = :* (:* (:* D1 D4) D1) D5
type H586 = :* (:* (:* D1 D4) D1) D4
type D1414 = :* (:* (:* D1 D4) D1) D4
type O2606 = :* (:* (:* D1 D4) D1) D4
type H585 = :* (:* (:* D1 D4) D1) D3
type D1413 = :* (:* (:* D1 D4) D1) D3
type O2605 = :* (:* (:* D1 D4) D1) D3
type H584 = :* (:* (:* D1 D4) D1) D2
type D1412 = :* (:* (:* D1 D4) D1) D2
type O2604 = :* (:* (:* D1 D4) D1) D2
type H583 = :* (:* (:* D1 D4) D1) D1
type D1411 = :* (:* (:* D1 D4) D1) D1
type O2603 = :* (:* (:* D1 D4) D1) D1
type H582 = :* (:* (:* D1 D4) D1) D0
type D1410 = :* (:* (:* D1 D4) D1) D0
type O2602 = :* (:* (:* D1 D4) D1) D0
type H581 = :* (:* (:* D1 D4) D0) D9
type D1409 = :* (:* (:* D1 D4) D0) D9
type O2601 = :* (:* (:* D1 D4) D0) D9
type H580 = :* (:* (:* D1 D4) D0) D8
type D1408 = :* (:* (:* D1 D4) D0) D8
type O2600 = :* (:* (:* D1 D4) D0) D8
type H57F = :* (:* (:* D1 D4) D0) D7
type D1407 = :* (:* (:* D1 D4) D0) D7
type O2577 = :* (:* (:* D1 D4) D0) D7
type H57E = :* (:* (:* D1 D4) D0) D6
type D1406 = :* (:* (:* D1 D4) D0) D6
type O2576 = :* (:* (:* D1 D4) D0) D6
type H57D = :* (:* (:* D1 D4) D0) D5
type D1405 = :* (:* (:* D1 D4) D0) D5
type O2575 = :* (:* (:* D1 D4) D0) D5
type H57C = :* (:* (:* D1 D4) D0) D4
type D1404 = :* (:* (:* D1 D4) D0) D4
type O2574 = :* (:* (:* D1 D4) D0) D4
type H57B = :* (:* (:* D1 D4) D0) D3
type D1403 = :* (:* (:* D1 D4) D0) D3
type O2573 = :* (:* (:* D1 D4) D0) D3
type H57A = :* (:* (:* D1 D4) D0) D2
type D1402 = :* (:* (:* D1 D4) D0) D2
type O2572 = :* (:* (:* D1 D4) D0) D2
type H579 = :* (:* (:* D1 D4) D0) D1
type D1401 = :* (:* (:* D1 D4) D0) D1
type O2571 = :* (:* (:* D1 D4) D0) D1
type H578 = :* (:* (:* D1 D4) D0) D0
type D1400 = :* (:* (:* D1 D4) D0) D0
type O2570 = :* (:* (:* D1 D4) D0) D0
type H577 = :* (:* (:* D1 D3) D9) D9
type D1399 = :* (:* (:* D1 D3) D9) D9
type O2567 = :* (:* (:* D1 D3) D9) D9
type H576 = :* (:* (:* D1 D3) D9) D8
type D1398 = :* (:* (:* D1 D3) D9) D8
type O2566 = :* (:* (:* D1 D3) D9) D8
type H575 = :* (:* (:* D1 D3) D9) D7
type D1397 = :* (:* (:* D1 D3) D9) D7
type O2565 = :* (:* (:* D1 D3) D9) D7
type H574 = :* (:* (:* D1 D3) D9) D6
type D1396 = :* (:* (:* D1 D3) D9) D6
type O2564 = :* (:* (:* D1 D3) D9) D6
type H573 = :* (:* (:* D1 D3) D9) D5
type D1395 = :* (:* (:* D1 D3) D9) D5
type O2563 = :* (:* (:* D1 D3) D9) D5
type H572 = :* (:* (:* D1 D3) D9) D4
type D1394 = :* (:* (:* D1 D3) D9) D4
type O2562 = :* (:* (:* D1 D3) D9) D4
type H571 = :* (:* (:* D1 D3) D9) D3
type D1393 = :* (:* (:* D1 D3) D9) D3
type O2561 = :* (:* (:* D1 D3) D9) D3
type H570 = :* (:* (:* D1 D3) D9) D2
type D1392 = :* (:* (:* D1 D3) D9) D2
type O2560 = :* (:* (:* D1 D3) D9) D2
type H56F = :* (:* (:* D1 D3) D9) D1
type D1391 = :* (:* (:* D1 D3) D9) D1
type O2557 = :* (:* (:* D1 D3) D9) D1
type H56E = :* (:* (:* D1 D3) D9) D0
type D1390 = :* (:* (:* D1 D3) D9) D0
type O2556 = :* (:* (:* D1 D3) D9) D0
type H56D = :* (:* (:* D1 D3) D8) D9
type D1389 = :* (:* (:* D1 D3) D8) D9
type O2555 = :* (:* (:* D1 D3) D8) D9
type H56C = :* (:* (:* D1 D3) D8) D8
type D1388 = :* (:* (:* D1 D3) D8) D8
type O2554 = :* (:* (:* D1 D3) D8) D8
type H56B = :* (:* (:* D1 D3) D8) D7
type D1387 = :* (:* (:* D1 D3) D8) D7
type O2553 = :* (:* (:* D1 D3) D8) D7
type H56A = :* (:* (:* D1 D3) D8) D6
type D1386 = :* (:* (:* D1 D3) D8) D6
type O2552 = :* (:* (:* D1 D3) D8) D6
type H569 = :* (:* (:* D1 D3) D8) D5
type D1385 = :* (:* (:* D1 D3) D8) D5
type O2551 = :* (:* (:* D1 D3) D8) D5
type H568 = :* (:* (:* D1 D3) D8) D4
type D1384 = :* (:* (:* D1 D3) D8) D4
type O2550 = :* (:* (:* D1 D3) D8) D4
type H567 = :* (:* (:* D1 D3) D8) D3
type D1383 = :* (:* (:* D1 D3) D8) D3
type O2547 = :* (:* (:* D1 D3) D8) D3
type H566 = :* (:* (:* D1 D3) D8) D2
type D1382 = :* (:* (:* D1 D3) D8) D2
type O2546 = :* (:* (:* D1 D3) D8) D2
type H565 = :* (:* (:* D1 D3) D8) D1
type D1381 = :* (:* (:* D1 D3) D8) D1
type O2545 = :* (:* (:* D1 D3) D8) D1
type H564 = :* (:* (:* D1 D3) D8) D0
type D1380 = :* (:* (:* D1 D3) D8) D0
type O2544 = :* (:* (:* D1 D3) D8) D0
type H563 = :* (:* (:* D1 D3) D7) D9
type D1379 = :* (:* (:* D1 D3) D7) D9
type O2543 = :* (:* (:* D1 D3) D7) D9
type H562 = :* (:* (:* D1 D3) D7) D8
type D1378 = :* (:* (:* D1 D3) D7) D8
type O2542 = :* (:* (:* D1 D3) D7) D8
type H561 = :* (:* (:* D1 D3) D7) D7
type D1377 = :* (:* (:* D1 D3) D7) D7
type O2541 = :* (:* (:* D1 D3) D7) D7
type H560 = :* (:* (:* D1 D3) D7) D6
type D1376 = :* (:* (:* D1 D3) D7) D6
type O2540 = :* (:* (:* D1 D3) D7) D6
type H55F = :* (:* (:* D1 D3) D7) D5
type D1375 = :* (:* (:* D1 D3) D7) D5
type O2537 = :* (:* (:* D1 D3) D7) D5
type H55E = :* (:* (:* D1 D3) D7) D4
type D1374 = :* (:* (:* D1 D3) D7) D4
type O2536 = :* (:* (:* D1 D3) D7) D4
type H55D = :* (:* (:* D1 D3) D7) D3
type D1373 = :* (:* (:* D1 D3) D7) D3
type O2535 = :* (:* (:* D1 D3) D7) D3
type H55C = :* (:* (:* D1 D3) D7) D2
type D1372 = :* (:* (:* D1 D3) D7) D2
type O2534 = :* (:* (:* D1 D3) D7) D2
type H55B = :* (:* (:* D1 D3) D7) D1
type D1371 = :* (:* (:* D1 D3) D7) D1
type O2533 = :* (:* (:* D1 D3) D7) D1
type H55A = :* (:* (:* D1 D3) D7) D0
type D1370 = :* (:* (:* D1 D3) D7) D0
type O2532 = :* (:* (:* D1 D3) D7) D0
type H559 = :* (:* (:* D1 D3) D6) D9
type D1369 = :* (:* (:* D1 D3) D6) D9
type O2531 = :* (:* (:* D1 D3) D6) D9
type H558 = :* (:* (:* D1 D3) D6) D8
type D1368 = :* (:* (:* D1 D3) D6) D8
type O2530 = :* (:* (:* D1 D3) D6) D8
type H557 = :* (:* (:* D1 D3) D6) D7
type D1367 = :* (:* (:* D1 D3) D6) D7
type O2527 = :* (:* (:* D1 D3) D6) D7
type H556 = :* (:* (:* D1 D3) D6) D6
type D1366 = :* (:* (:* D1 D3) D6) D6
type O2526 = :* (:* (:* D1 D3) D6) D6
type H555 = :* (:* (:* D1 D3) D6) D5
type D1365 = :* (:* (:* D1 D3) D6) D5
type O2525 = :* (:* (:* D1 D3) D6) D5
type H554 = :* (:* (:* D1 D3) D6) D4
type D1364 = :* (:* (:* D1 D3) D6) D4
type O2524 = :* (:* (:* D1 D3) D6) D4
type H553 = :* (:* (:* D1 D3) D6) D3
type D1363 = :* (:* (:* D1 D3) D6) D3
type O2523 = :* (:* (:* D1 D3) D6) D3
type H552 = :* (:* (:* D1 D3) D6) D2
type D1362 = :* (:* (:* D1 D3) D6) D2
type O2522 = :* (:* (:* D1 D3) D6) D2
type H551 = :* (:* (:* D1 D3) D6) D1
type D1361 = :* (:* (:* D1 D3) D6) D1
type O2521 = :* (:* (:* D1 D3) D6) D1
type H550 = :* (:* (:* D1 D3) D6) D0
type D1360 = :* (:* (:* D1 D3) D6) D0
type O2520 = :* (:* (:* D1 D3) D6) D0
type H54F = :* (:* (:* D1 D3) D5) D9
type D1359 = :* (:* (:* D1 D3) D5) D9
type O2517 = :* (:* (:* D1 D3) D5) D9
type H54E = :* (:* (:* D1 D3) D5) D8
type D1358 = :* (:* (:* D1 D3) D5) D8
type O2516 = :* (:* (:* D1 D3) D5) D8
type H54D = :* (:* (:* D1 D3) D5) D7
type D1357 = :* (:* (:* D1 D3) D5) D7
type O2515 = :* (:* (:* D1 D3) D5) D7
type H54C = :* (:* (:* D1 D3) D5) D6
type D1356 = :* (:* (:* D1 D3) D5) D6
type O2514 = :* (:* (:* D1 D3) D5) D6
type H54B = :* (:* (:* D1 D3) D5) D5
type D1355 = :* (:* (:* D1 D3) D5) D5
type O2513 = :* (:* (:* D1 D3) D5) D5
type H54A = :* (:* (:* D1 D3) D5) D4
type D1354 = :* (:* (:* D1 D3) D5) D4
type O2512 = :* (:* (:* D1 D3) D5) D4
type H549 = :* (:* (:* D1 D3) D5) D3
type D1353 = :* (:* (:* D1 D3) D5) D3
type O2511 = :* (:* (:* D1 D3) D5) D3
type H548 = :* (:* (:* D1 D3) D5) D2
type D1352 = :* (:* (:* D1 D3) D5) D2
type O2510 = :* (:* (:* D1 D3) D5) D2
type H547 = :* (:* (:* D1 D3) D5) D1
type D1351 = :* (:* (:* D1 D3) D5) D1
type O2507 = :* (:* (:* D1 D3) D5) D1
type H546 = :* (:* (:* D1 D3) D5) D0
type D1350 = :* (:* (:* D1 D3) D5) D0
type O2506 = :* (:* (:* D1 D3) D5) D0
type H545 = :* (:* (:* D1 D3) D4) D9
type D1349 = :* (:* (:* D1 D3) D4) D9
type O2505 = :* (:* (:* D1 D3) D4) D9
type H544 = :* (:* (:* D1 D3) D4) D8
type D1348 = :* (:* (:* D1 D3) D4) D8
type O2504 = :* (:* (:* D1 D3) D4) D8
type H543 = :* (:* (:* D1 D3) D4) D7
type D1347 = :* (:* (:* D1 D3) D4) D7
type O2503 = :* (:* (:* D1 D3) D4) D7
type H542 = :* (:* (:* D1 D3) D4) D6
type D1346 = :* (:* (:* D1 D3) D4) D6
type O2502 = :* (:* (:* D1 D3) D4) D6
type H541 = :* (:* (:* D1 D3) D4) D5
type D1345 = :* (:* (:* D1 D3) D4) D5
type O2501 = :* (:* (:* D1 D3) D4) D5
type H540 = :* (:* (:* D1 D3) D4) D4
type D1344 = :* (:* (:* D1 D3) D4) D4
type O2500 = :* (:* (:* D1 D3) D4) D4
type H53F = :* (:* (:* D1 D3) D4) D3
type D1343 = :* (:* (:* D1 D3) D4) D3
type O2477 = :* (:* (:* D1 D3) D4) D3
type H53E = :* (:* (:* D1 D3) D4) D2
type D1342 = :* (:* (:* D1 D3) D4) D2
type O2476 = :* (:* (:* D1 D3) D4) D2
type H53D = :* (:* (:* D1 D3) D4) D1
type D1341 = :* (:* (:* D1 D3) D4) D1
type O2475 = :* (:* (:* D1 D3) D4) D1
type H53C = :* (:* (:* D1 D3) D4) D0
type D1340 = :* (:* (:* D1 D3) D4) D0
type O2474 = :* (:* (:* D1 D3) D4) D0
type H53B = :* (:* (:* D1 D3) D3) D9
type D1339 = :* (:* (:* D1 D3) D3) D9
type O2473 = :* (:* (:* D1 D3) D3) D9
type H53A = :* (:* (:* D1 D3) D3) D8
type D1338 = :* (:* (:* D1 D3) D3) D8
type O2472 = :* (:* (:* D1 D3) D3) D8
type H539 = :* (:* (:* D1 D3) D3) D7
type D1337 = :* (:* (:* D1 D3) D3) D7
type O2471 = :* (:* (:* D1 D3) D3) D7
type H538 = :* (:* (:* D1 D3) D3) D6
type D1336 = :* (:* (:* D1 D3) D3) D6
type O2470 = :* (:* (:* D1 D3) D3) D6
type H537 = :* (:* (:* D1 D3) D3) D5
type D1335 = :* (:* (:* D1 D3) D3) D5
type O2467 = :* (:* (:* D1 D3) D3) D5
type H536 = :* (:* (:* D1 D3) D3) D4
type D1334 = :* (:* (:* D1 D3) D3) D4
type O2466 = :* (:* (:* D1 D3) D3) D4
type H535 = :* (:* (:* D1 D3) D3) D3
type D1333 = :* (:* (:* D1 D3) D3) D3
type O2465 = :* (:* (:* D1 D3) D3) D3
type H534 = :* (:* (:* D1 D3) D3) D2
type D1332 = :* (:* (:* D1 D3) D3) D2
type O2464 = :* (:* (:* D1 D3) D3) D2
type H533 = :* (:* (:* D1 D3) D3) D1
type D1331 = :* (:* (:* D1 D3) D3) D1
type O2463 = :* (:* (:* D1 D3) D3) D1
type H532 = :* (:* (:* D1 D3) D3) D0
type D1330 = :* (:* (:* D1 D3) D3) D0
type O2462 = :* (:* (:* D1 D3) D3) D0
type H531 = :* (:* (:* D1 D3) D2) D9
type D1329 = :* (:* (:* D1 D3) D2) D9
type O2461 = :* (:* (:* D1 D3) D2) D9
type H530 = :* (:* (:* D1 D3) D2) D8
type D1328 = :* (:* (:* D1 D3) D2) D8
type O2460 = :* (:* (:* D1 D3) D2) D8
type H52F = :* (:* (:* D1 D3) D2) D7
type D1327 = :* (:* (:* D1 D3) D2) D7
type O2457 = :* (:* (:* D1 D3) D2) D7
type H52E = :* (:* (:* D1 D3) D2) D6
type D1326 = :* (:* (:* D1 D3) D2) D6
type O2456 = :* (:* (:* D1 D3) D2) D6
type H52D = :* (:* (:* D1 D3) D2) D5
type D1325 = :* (:* (:* D1 D3) D2) D5
type O2455 = :* (:* (:* D1 D3) D2) D5
type H52C = :* (:* (:* D1 D3) D2) D4
type D1324 = :* (:* (:* D1 D3) D2) D4
type O2454 = :* (:* (:* D1 D3) D2) D4
type H52B = :* (:* (:* D1 D3) D2) D3
type D1323 = :* (:* (:* D1 D3) D2) D3
type O2453 = :* (:* (:* D1 D3) D2) D3
type H52A = :* (:* (:* D1 D3) D2) D2
type D1322 = :* (:* (:* D1 D3) D2) D2
type O2452 = :* (:* (:* D1 D3) D2) D2
type H529 = :* (:* (:* D1 D3) D2) D1
type D1321 = :* (:* (:* D1 D3) D2) D1
type O2451 = :* (:* (:* D1 D3) D2) D1
type H528 = :* (:* (:* D1 D3) D2) D0
type D1320 = :* (:* (:* D1 D3) D2) D0
type O2450 = :* (:* (:* D1 D3) D2) D0
type H527 = :* (:* (:* D1 D3) D1) D9
type D1319 = :* (:* (:* D1 D3) D1) D9
type O2447 = :* (:* (:* D1 D3) D1) D9
type H526 = :* (:* (:* D1 D3) D1) D8
type D1318 = :* (:* (:* D1 D3) D1) D8
type O2446 = :* (:* (:* D1 D3) D1) D8
type H525 = :* (:* (:* D1 D3) D1) D7
type D1317 = :* (:* (:* D1 D3) D1) D7
type O2445 = :* (:* (:* D1 D3) D1) D7
type H524 = :* (:* (:* D1 D3) D1) D6
type D1316 = :* (:* (:* D1 D3) D1) D6
type O2444 = :* (:* (:* D1 D3) D1) D6
type H523 = :* (:* (:* D1 D3) D1) D5
type D1315 = :* (:* (:* D1 D3) D1) D5
type O2443 = :* (:* (:* D1 D3) D1) D5
type H522 = :* (:* (:* D1 D3) D1) D4
type D1314 = :* (:* (:* D1 D3) D1) D4
type O2442 = :* (:* (:* D1 D3) D1) D4
type H521 = :* (:* (:* D1 D3) D1) D3
type D1313 = :* (:* (:* D1 D3) D1) D3
type O2441 = :* (:* (:* D1 D3) D1) D3
type H520 = :* (:* (:* D1 D3) D1) D2
type D1312 = :* (:* (:* D1 D3) D1) D2
type O2440 = :* (:* (:* D1 D3) D1) D2
type H51F = :* (:* (:* D1 D3) D1) D1
type D1311 = :* (:* (:* D1 D3) D1) D1
type O2437 = :* (:* (:* D1 D3) D1) D1
type H51E = :* (:* (:* D1 D3) D1) D0
type D1310 = :* (:* (:* D1 D3) D1) D0
type O2436 = :* (:* (:* D1 D3) D1) D0
type H51D = :* (:* (:* D1 D3) D0) D9
type D1309 = :* (:* (:* D1 D3) D0) D9
type O2435 = :* (:* (:* D1 D3) D0) D9
type H51C = :* (:* (:* D1 D3) D0) D8
type D1308 = :* (:* (:* D1 D3) D0) D8
type O2434 = :* (:* (:* D1 D3) D0) D8
type H51B = :* (:* (:* D1 D3) D0) D7
type D1307 = :* (:* (:* D1 D3) D0) D7
type O2433 = :* (:* (:* D1 D3) D0) D7
type H51A = :* (:* (:* D1 D3) D0) D6
type D1306 = :* (:* (:* D1 D3) D0) D6
type O2432 = :* (:* (:* D1 D3) D0) D6
type H519 = :* (:* (:* D1 D3) D0) D5
type D1305 = :* (:* (:* D1 D3) D0) D5
type O2431 = :* (:* (:* D1 D3) D0) D5
type H518 = :* (:* (:* D1 D3) D0) D4
type D1304 = :* (:* (:* D1 D3) D0) D4
type O2430 = :* (:* (:* D1 D3) D0) D4
type H517 = :* (:* (:* D1 D3) D0) D3
type D1303 = :* (:* (:* D1 D3) D0) D3
type O2427 = :* (:* (:* D1 D3) D0) D3
type H516 = :* (:* (:* D1 D3) D0) D2
type D1302 = :* (:* (:* D1 D3) D0) D2
type O2426 = :* (:* (:* D1 D3) D0) D2
type H515 = :* (:* (:* D1 D3) D0) D1
type D1301 = :* (:* (:* D1 D3) D0) D1
type O2425 = :* (:* (:* D1 D3) D0) D1
type H514 = :* (:* (:* D1 D3) D0) D0
type D1300 = :* (:* (:* D1 D3) D0) D0
type O2424 = :* (:* (:* D1 D3) D0) D0
type H513 = :* (:* (:* D1 D2) D9) D9
type D1299 = :* (:* (:* D1 D2) D9) D9
type O2423 = :* (:* (:* D1 D2) D9) D9
type H512 = :* (:* (:* D1 D2) D9) D8
type D1298 = :* (:* (:* D1 D2) D9) D8
type O2422 = :* (:* (:* D1 D2) D9) D8
type H511 = :* (:* (:* D1 D2) D9) D7
type D1297 = :* (:* (:* D1 D2) D9) D7
type O2421 = :* (:* (:* D1 D2) D9) D7
type H510 = :* (:* (:* D1 D2) D9) D6
type D1296 = :* (:* (:* D1 D2) D9) D6
type O2420 = :* (:* (:* D1 D2) D9) D6
type H50F = :* (:* (:* D1 D2) D9) D5
type D1295 = :* (:* (:* D1 D2) D9) D5
type O2417 = :* (:* (:* D1 D2) D9) D5
type H50E = :* (:* (:* D1 D2) D9) D4
type D1294 = :* (:* (:* D1 D2) D9) D4
type O2416 = :* (:* (:* D1 D2) D9) D4
type H50D = :* (:* (:* D1 D2) D9) D3
type D1293 = :* (:* (:* D1 D2) D9) D3
type O2415 = :* (:* (:* D1 D2) D9) D3
type H50C = :* (:* (:* D1 D2) D9) D2
type D1292 = :* (:* (:* D1 D2) D9) D2
type O2414 = :* (:* (:* D1 D2) D9) D2
type H50B = :* (:* (:* D1 D2) D9) D1
type D1291 = :* (:* (:* D1 D2) D9) D1
type O2413 = :* (:* (:* D1 D2) D9) D1
type H50A = :* (:* (:* D1 D2) D9) D0
type D1290 = :* (:* (:* D1 D2) D9) D0
type O2412 = :* (:* (:* D1 D2) D9) D0
type H509 = :* (:* (:* D1 D2) D8) D9
type D1289 = :* (:* (:* D1 D2) D8) D9
type O2411 = :* (:* (:* D1 D2) D8) D9
type H508 = :* (:* (:* D1 D2) D8) D8
type D1288 = :* (:* (:* D1 D2) D8) D8
type O2410 = :* (:* (:* D1 D2) D8) D8
type H507 = :* (:* (:* D1 D2) D8) D7
type D1287 = :* (:* (:* D1 D2) D8) D7
type O2407 = :* (:* (:* D1 D2) D8) D7
type H506 = :* (:* (:* D1 D2) D8) D6
type D1286 = :* (:* (:* D1 D2) D8) D6
type O2406 = :* (:* (:* D1 D2) D8) D6
type H505 = :* (:* (:* D1 D2) D8) D5
type D1285 = :* (:* (:* D1 D2) D8) D5
type O2405 = :* (:* (:* D1 D2) D8) D5
type H504 = :* (:* (:* D1 D2) D8) D4
type D1284 = :* (:* (:* D1 D2) D8) D4
type O2404 = :* (:* (:* D1 D2) D8) D4
type H503 = :* (:* (:* D1 D2) D8) D3
type D1283 = :* (:* (:* D1 D2) D8) D3
type O2403 = :* (:* (:* D1 D2) D8) D3
type H502 = :* (:* (:* D1 D2) D8) D2
type D1282 = :* (:* (:* D1 D2) D8) D2
type O2402 = :* (:* (:* D1 D2) D8) D2
type H501 = :* (:* (:* D1 D2) D8) D1
type D1281 = :* (:* (:* D1 D2) D8) D1
type O2401 = :* (:* (:* D1 D2) D8) D1
type H500 = :* (:* (:* D1 D2) D8) D0
type D1280 = :* (:* (:* D1 D2) D8) D0
type O2400 = :* (:* (:* D1 D2) D8) D0
type H4FF = :* (:* (:* D1 D2) D7) D9
type D1279 = :* (:* (:* D1 D2) D7) D9
type O2377 = :* (:* (:* D1 D2) D7) D9
type H4FE = :* (:* (:* D1 D2) D7) D8
type D1278 = :* (:* (:* D1 D2) D7) D8
type O2376 = :* (:* (:* D1 D2) D7) D8
type H4FD = :* (:* (:* D1 D2) D7) D7
type D1277 = :* (:* (:* D1 D2) D7) D7
type O2375 = :* (:* (:* D1 D2) D7) D7
type H4FC = :* (:* (:* D1 D2) D7) D6
type D1276 = :* (:* (:* D1 D2) D7) D6
type O2374 = :* (:* (:* D1 D2) D7) D6
type H4FB = :* (:* (:* D1 D2) D7) D5
type D1275 = :* (:* (:* D1 D2) D7) D5
type O2373 = :* (:* (:* D1 D2) D7) D5
type H4FA = :* (:* (:* D1 D2) D7) D4
type D1274 = :* (:* (:* D1 D2) D7) D4
type O2372 = :* (:* (:* D1 D2) D7) D4
type H4F9 = :* (:* (:* D1 D2) D7) D3
type D1273 = :* (:* (:* D1 D2) D7) D3
type O2371 = :* (:* (:* D1 D2) D7) D3
type H4F8 = :* (:* (:* D1 D2) D7) D2
type D1272 = :* (:* (:* D1 D2) D7) D2
type O2370 = :* (:* (:* D1 D2) D7) D2
type H4F7 = :* (:* (:* D1 D2) D7) D1
type D1271 = :* (:* (:* D1 D2) D7) D1
type O2367 = :* (:* (:* D1 D2) D7) D1
type H4F6 = :* (:* (:* D1 D2) D7) D0
type D1270 = :* (:* (:* D1 D2) D7) D0
type O2366 = :* (:* (:* D1 D2) D7) D0
type H4F5 = :* (:* (:* D1 D2) D6) D9
type D1269 = :* (:* (:* D1 D2) D6) D9
type O2365 = :* (:* (:* D1 D2) D6) D9
type H4F4 = :* (:* (:* D1 D2) D6) D8
type D1268 = :* (:* (:* D1 D2) D6) D8
type O2364 = :* (:* (:* D1 D2) D6) D8
type H4F3 = :* (:* (:* D1 D2) D6) D7
type D1267 = :* (:* (:* D1 D2) D6) D7
type O2363 = :* (:* (:* D1 D2) D6) D7
type H4F2 = :* (:* (:* D1 D2) D6) D6
type D1266 = :* (:* (:* D1 D2) D6) D6
type O2362 = :* (:* (:* D1 D2) D6) D6
type H4F1 = :* (:* (:* D1 D2) D6) D5
type D1265 = :* (:* (:* D1 D2) D6) D5
type O2361 = :* (:* (:* D1 D2) D6) D5
type H4F0 = :* (:* (:* D1 D2) D6) D4
type D1264 = :* (:* (:* D1 D2) D6) D4
type O2360 = :* (:* (:* D1 D2) D6) D4
type H4EF = :* (:* (:* D1 D2) D6) D3
type D1263 = :* (:* (:* D1 D2) D6) D3
type O2357 = :* (:* (:* D1 D2) D6) D3
type H4EE = :* (:* (:* D1 D2) D6) D2
type D1262 = :* (:* (:* D1 D2) D6) D2
type O2356 = :* (:* (:* D1 D2) D6) D2
type H4ED = :* (:* (:* D1 D2) D6) D1
type D1261 = :* (:* (:* D1 D2) D6) D1
type O2355 = :* (:* (:* D1 D2) D6) D1
type H4EC = :* (:* (:* D1 D2) D6) D0
type D1260 = :* (:* (:* D1 D2) D6) D0
type O2354 = :* (:* (:* D1 D2) D6) D0
type H4EB = :* (:* (:* D1 D2) D5) D9
type D1259 = :* (:* (:* D1 D2) D5) D9
type O2353 = :* (:* (:* D1 D2) D5) D9
type H4EA = :* (:* (:* D1 D2) D5) D8
type D1258 = :* (:* (:* D1 D2) D5) D8
type O2352 = :* (:* (:* D1 D2) D5) D8
type H4E9 = :* (:* (:* D1 D2) D5) D7
type D1257 = :* (:* (:* D1 D2) D5) D7
type O2351 = :* (:* (:* D1 D2) D5) D7
type H4E8 = :* (:* (:* D1 D2) D5) D6
type D1256 = :* (:* (:* D1 D2) D5) D6
type O2350 = :* (:* (:* D1 D2) D5) D6
type H4E7 = :* (:* (:* D1 D2) D5) D5
type D1255 = :* (:* (:* D1 D2) D5) D5
type O2347 = :* (:* (:* D1 D2) D5) D5
type H4E6 = :* (:* (:* D1 D2) D5) D4
type D1254 = :* (:* (:* D1 D2) D5) D4
type O2346 = :* (:* (:* D1 D2) D5) D4
type H4E5 = :* (:* (:* D1 D2) D5) D3
type D1253 = :* (:* (:* D1 D2) D5) D3
type O2345 = :* (:* (:* D1 D2) D5) D3
type H4E4 = :* (:* (:* D1 D2) D5) D2
type D1252 = :* (:* (:* D1 D2) D5) D2
type O2344 = :* (:* (:* D1 D2) D5) D2
type H4E3 = :* (:* (:* D1 D2) D5) D1
type D1251 = :* (:* (:* D1 D2) D5) D1
type O2343 = :* (:* (:* D1 D2) D5) D1
type H4E2 = :* (:* (:* D1 D2) D5) D0
type D1250 = :* (:* (:* D1 D2) D5) D0
type O2342 = :* (:* (:* D1 D2) D5) D0
type H4E1 = :* (:* (:* D1 D2) D4) D9
type D1249 = :* (:* (:* D1 D2) D4) D9
type O2341 = :* (:* (:* D1 D2) D4) D9
type H4E0 = :* (:* (:* D1 D2) D4) D8
type D1248 = :* (:* (:* D1 D2) D4) D8
type O2340 = :* (:* (:* D1 D2) D4) D8
type H4DF = :* (:* (:* D1 D2) D4) D7
type D1247 = :* (:* (:* D1 D2) D4) D7
type O2337 = :* (:* (:* D1 D2) D4) D7
type H4DE = :* (:* (:* D1 D2) D4) D6
type D1246 = :* (:* (:* D1 D2) D4) D6
type O2336 = :* (:* (:* D1 D2) D4) D6
type H4DD = :* (:* (:* D1 D2) D4) D5
type D1245 = :* (:* (:* D1 D2) D4) D5
type O2335 = :* (:* (:* D1 D2) D4) D5
type H4DC = :* (:* (:* D1 D2) D4) D4
type D1244 = :* (:* (:* D1 D2) D4) D4
type O2334 = :* (:* (:* D1 D2) D4) D4
type H4DB = :* (:* (:* D1 D2) D4) D3
type D1243 = :* (:* (:* D1 D2) D4) D3
type O2333 = :* (:* (:* D1 D2) D4) D3
type H4DA = :* (:* (:* D1 D2) D4) D2
type D1242 = :* (:* (:* D1 D2) D4) D2
type O2332 = :* (:* (:* D1 D2) D4) D2
type H4D9 = :* (:* (:* D1 D2) D4) D1
type D1241 = :* (:* (:* D1 D2) D4) D1
type O2331 = :* (:* (:* D1 D2) D4) D1
type H4D8 = :* (:* (:* D1 D2) D4) D0
type D1240 = :* (:* (:* D1 D2) D4) D0
type O2330 = :* (:* (:* D1 D2) D4) D0
type H4D7 = :* (:* (:* D1 D2) D3) D9
type D1239 = :* (:* (:* D1 D2) D3) D9
type O2327 = :* (:* (:* D1 D2) D3) D9
type H4D6 = :* (:* (:* D1 D2) D3) D8
type D1238 = :* (:* (:* D1 D2) D3) D8
type O2326 = :* (:* (:* D1 D2) D3) D8
type H4D5 = :* (:* (:* D1 D2) D3) D7
type D1237 = :* (:* (:* D1 D2) D3) D7
type O2325 = :* (:* (:* D1 D2) D3) D7
type H4D4 = :* (:* (:* D1 D2) D3) D6
type D1236 = :* (:* (:* D1 D2) D3) D6
type O2324 = :* (:* (:* D1 D2) D3) D6
type H4D3 = :* (:* (:* D1 D2) D3) D5
type D1235 = :* (:* (:* D1 D2) D3) D5
type O2323 = :* (:* (:* D1 D2) D3) D5
type H4D2 = :* (:* (:* D1 D2) D3) D4
type D1234 = :* (:* (:* D1 D2) D3) D4
type O2322 = :* (:* (:* D1 D2) D3) D4
type H4D1 = :* (:* (:* D1 D2) D3) D3
type D1233 = :* (:* (:* D1 D2) D3) D3
type O2321 = :* (:* (:* D1 D2) D3) D3
type H4D0 = :* (:* (:* D1 D2) D3) D2
type D1232 = :* (:* (:* D1 D2) D3) D2
type O2320 = :* (:* (:* D1 D2) D3) D2
type H4CF = :* (:* (:* D1 D2) D3) D1
type D1231 = :* (:* (:* D1 D2) D3) D1
type O2317 = :* (:* (:* D1 D2) D3) D1
type H4CE = :* (:* (:* D1 D2) D3) D0
type D1230 = :* (:* (:* D1 D2) D3) D0
type O2316 = :* (:* (:* D1 D2) D3) D0
type H4CD = :* (:* (:* D1 D2) D2) D9
type D1229 = :* (:* (:* D1 D2) D2) D9
type O2315 = :* (:* (:* D1 D2) D2) D9
type H4CC = :* (:* (:* D1 D2) D2) D8
type D1228 = :* (:* (:* D1 D2) D2) D8
type O2314 = :* (:* (:* D1 D2) D2) D8
type H4CB = :* (:* (:* D1 D2) D2) D7
type D1227 = :* (:* (:* D1 D2) D2) D7
type O2313 = :* (:* (:* D1 D2) D2) D7
type H4CA = :* (:* (:* D1 D2) D2) D6
type D1226 = :* (:* (:* D1 D2) D2) D6
type O2312 = :* (:* (:* D1 D2) D2) D6
type H4C9 = :* (:* (:* D1 D2) D2) D5
type D1225 = :* (:* (:* D1 D2) D2) D5
type O2311 = :* (:* (:* D1 D2) D2) D5
type H4C8 = :* (:* (:* D1 D2) D2) D4
type D1224 = :* (:* (:* D1 D2) D2) D4
type O2310 = :* (:* (:* D1 D2) D2) D4
type H4C7 = :* (:* (:* D1 D2) D2) D3
type D1223 = :* (:* (:* D1 D2) D2) D3
type O2307 = :* (:* (:* D1 D2) D2) D3
type H4C6 = :* (:* (:* D1 D2) D2) D2
type D1222 = :* (:* (:* D1 D2) D2) D2
type O2306 = :* (:* (:* D1 D2) D2) D2
type H4C5 = :* (:* (:* D1 D2) D2) D1
type D1221 = :* (:* (:* D1 D2) D2) D1
type O2305 = :* (:* (:* D1 D2) D2) D1
type H4C4 = :* (:* (:* D1 D2) D2) D0
type D1220 = :* (:* (:* D1 D2) D2) D0
type O2304 = :* (:* (:* D1 D2) D2) D0
type H4C3 = :* (:* (:* D1 D2) D1) D9
type D1219 = :* (:* (:* D1 D2) D1) D9
type O2303 = :* (:* (:* D1 D2) D1) D9
type H4C2 = :* (:* (:* D1 D2) D1) D8
type D1218 = :* (:* (:* D1 D2) D1) D8
type O2302 = :* (:* (:* D1 D2) D1) D8
type H4C1 = :* (:* (:* D1 D2) D1) D7
type D1217 = :* (:* (:* D1 D2) D1) D7
type O2301 = :* (:* (:* D1 D2) D1) D7
type H4C0 = :* (:* (:* D1 D2) D1) D6
type D1216 = :* (:* (:* D1 D2) D1) D6
type O2300 = :* (:* (:* D1 D2) D1) D6
type H4BF = :* (:* (:* D1 D2) D1) D5
type D1215 = :* (:* (:* D1 D2) D1) D5
type O2277 = :* (:* (:* D1 D2) D1) D5
type H4BE = :* (:* (:* D1 D2) D1) D4
type D1214 = :* (:* (:* D1 D2) D1) D4
type O2276 = :* (:* (:* D1 D2) D1) D4
type H4BD = :* (:* (:* D1 D2) D1) D3
type D1213 = :* (:* (:* D1 D2) D1) D3
type O2275 = :* (:* (:* D1 D2) D1) D3
type H4BC = :* (:* (:* D1 D2) D1) D2
type D1212 = :* (:* (:* D1 D2) D1) D2
type O2274 = :* (:* (:* D1 D2) D1) D2
type H4BB = :* (:* (:* D1 D2) D1) D1
type D1211 = :* (:* (:* D1 D2) D1) D1
type O2273 = :* (:* (:* D1 D2) D1) D1
type H4BA = :* (:* (:* D1 D2) D1) D0
type D1210 = :* (:* (:* D1 D2) D1) D0
type O2272 = :* (:* (:* D1 D2) D1) D0
type H4B9 = :* (:* (:* D1 D2) D0) D9
type D1209 = :* (:* (:* D1 D2) D0) D9
type O2271 = :* (:* (:* D1 D2) D0) D9
type H4B8 = :* (:* (:* D1 D2) D0) D8
type D1208 = :* (:* (:* D1 D2) D0) D8
type O2270 = :* (:* (:* D1 D2) D0) D8
type H4B7 = :* (:* (:* D1 D2) D0) D7
type D1207 = :* (:* (:* D1 D2) D0) D7
type O2267 = :* (:* (:* D1 D2) D0) D7
type H4B6 = :* (:* (:* D1 D2) D0) D6
type D1206 = :* (:* (:* D1 D2) D0) D6
type O2266 = :* (:* (:* D1 D2) D0) D6
type H4B5 = :* (:* (:* D1 D2) D0) D5
type D1205 = :* (:* (:* D1 D2) D0) D5
type O2265 = :* (:* (:* D1 D2) D0) D5
type H4B4 = :* (:* (:* D1 D2) D0) D4
type D1204 = :* (:* (:* D1 D2) D0) D4
type O2264 = :* (:* (:* D1 D2) D0) D4
type H4B3 = :* (:* (:* D1 D2) D0) D3
type D1203 = :* (:* (:* D1 D2) D0) D3
type O2263 = :* (:* (:* D1 D2) D0) D3
type H4B2 = :* (:* (:* D1 D2) D0) D2
type D1202 = :* (:* (:* D1 D2) D0) D2
type O2262 = :* (:* (:* D1 D2) D0) D2
type H4B1 = :* (:* (:* D1 D2) D0) D1
type D1201 = :* (:* (:* D1 D2) D0) D1
type O2261 = :* (:* (:* D1 D2) D0) D1
type H4B0 = :* (:* (:* D1 D2) D0) D0
type D1200 = :* (:* (:* D1 D2) D0) D0
type O2260 = :* (:* (:* D1 D2) D0) D0
type H4AF = :* (:* (:* D1 D1) D9) D9
type D1199 = :* (:* (:* D1 D1) D9) D9
type O2257 = :* (:* (:* D1 D1) D9) D9
type H4AE = :* (:* (:* D1 D1) D9) D8
type D1198 = :* (:* (:* D1 D1) D9) D8
type O2256 = :* (:* (:* D1 D1) D9) D8
type H4AD = :* (:* (:* D1 D1) D9) D7
type D1197 = :* (:* (:* D1 D1) D9) D7
type O2255 = :* (:* (:* D1 D1) D9) D7
type H4AC = :* (:* (:* D1 D1) D9) D6
type D1196 = :* (:* (:* D1 D1) D9) D6
type O2254 = :* (:* (:* D1 D1) D9) D6
type H4AB = :* (:* (:* D1 D1) D9) D5
type D1195 = :* (:* (:* D1 D1) D9) D5
type O2253 = :* (:* (:* D1 D1) D9) D5
type H4AA = :* (:* (:* D1 D1) D9) D4
type D1194 = :* (:* (:* D1 D1) D9) D4
type O2252 = :* (:* (:* D1 D1) D9) D4
type H4A9 = :* (:* (:* D1 D1) D9) D3
type D1193 = :* (:* (:* D1 D1) D9) D3
type O2251 = :* (:* (:* D1 D1) D9) D3
type H4A8 = :* (:* (:* D1 D1) D9) D2
type D1192 = :* (:* (:* D1 D1) D9) D2
type O2250 = :* (:* (:* D1 D1) D9) D2
type H4A7 = :* (:* (:* D1 D1) D9) D1
type D1191 = :* (:* (:* D1 D1) D9) D1
type O2247 = :* (:* (:* D1 D1) D9) D1
type H4A6 = :* (:* (:* D1 D1) D9) D0
type D1190 = :* (:* (:* D1 D1) D9) D0
type O2246 = :* (:* (:* D1 D1) D9) D0
type H4A5 = :* (:* (:* D1 D1) D8) D9
type D1189 = :* (:* (:* D1 D1) D8) D9
type O2245 = :* (:* (:* D1 D1) D8) D9
type H4A4 = :* (:* (:* D1 D1) D8) D8
type D1188 = :* (:* (:* D1 D1) D8) D8
type O2244 = :* (:* (:* D1 D1) D8) D8
type H4A3 = :* (:* (:* D1 D1) D8) D7
type D1187 = :* (:* (:* D1 D1) D8) D7
type O2243 = :* (:* (:* D1 D1) D8) D7
type H4A2 = :* (:* (:* D1 D1) D8) D6
type D1186 = :* (:* (:* D1 D1) D8) D6
type O2242 = :* (:* (:* D1 D1) D8) D6
type H4A1 = :* (:* (:* D1 D1) D8) D5
type D1185 = :* (:* (:* D1 D1) D8) D5
type O2241 = :* (:* (:* D1 D1) D8) D5
type H4A0 = :* (:* (:* D1 D1) D8) D4
type D1184 = :* (:* (:* D1 D1) D8) D4
type O2240 = :* (:* (:* D1 D1) D8) D4
type H49F = :* (:* (:* D1 D1) D8) D3
type D1183 = :* (:* (:* D1 D1) D8) D3
type O2237 = :* (:* (:* D1 D1) D8) D3
type H49E = :* (:* (:* D1 D1) D8) D2
type D1182 = :* (:* (:* D1 D1) D8) D2
type O2236 = :* (:* (:* D1 D1) D8) D2
type H49D = :* (:* (:* D1 D1) D8) D1
type D1181 = :* (:* (:* D1 D1) D8) D1
type O2235 = :* (:* (:* D1 D1) D8) D1
type H49C = :* (:* (:* D1 D1) D8) D0
type D1180 = :* (:* (:* D1 D1) D8) D0
type O2234 = :* (:* (:* D1 D1) D8) D0
type H49B = :* (:* (:* D1 D1) D7) D9
type D1179 = :* (:* (:* D1 D1) D7) D9
type O2233 = :* (:* (:* D1 D1) D7) D9
type H49A = :* (:* (:* D1 D1) D7) D8
type D1178 = :* (:* (:* D1 D1) D7) D8
type O2232 = :* (:* (:* D1 D1) D7) D8
type H499 = :* (:* (:* D1 D1) D7) D7
type D1177 = :* (:* (:* D1 D1) D7) D7
type O2231 = :* (:* (:* D1 D1) D7) D7
type H498 = :* (:* (:* D1 D1) D7) D6
type D1176 = :* (:* (:* D1 D1) D7) D6
type O2230 = :* (:* (:* D1 D1) D7) D6
type H497 = :* (:* (:* D1 D1) D7) D5
type D1175 = :* (:* (:* D1 D1) D7) D5
type O2227 = :* (:* (:* D1 D1) D7) D5
type H496 = :* (:* (:* D1 D1) D7) D4
type D1174 = :* (:* (:* D1 D1) D7) D4
type O2226 = :* (:* (:* D1 D1) D7) D4
type H495 = :* (:* (:* D1 D1) D7) D3
type D1173 = :* (:* (:* D1 D1) D7) D3
type O2225 = :* (:* (:* D1 D1) D7) D3
type H494 = :* (:* (:* D1 D1) D7) D2
type D1172 = :* (:* (:* D1 D1) D7) D2
type O2224 = :* (:* (:* D1 D1) D7) D2
type H493 = :* (:* (:* D1 D1) D7) D1
type D1171 = :* (:* (:* D1 D1) D7) D1
type O2223 = :* (:* (:* D1 D1) D7) D1
type H492 = :* (:* (:* D1 D1) D7) D0
type D1170 = :* (:* (:* D1 D1) D7) D0
type O2222 = :* (:* (:* D1 D1) D7) D0
type H491 = :* (:* (:* D1 D1) D6) D9
type D1169 = :* (:* (:* D1 D1) D6) D9
type O2221 = :* (:* (:* D1 D1) D6) D9
type H490 = :* (:* (:* D1 D1) D6) D8
type D1168 = :* (:* (:* D1 D1) D6) D8
type O2220 = :* (:* (:* D1 D1) D6) D8
type H48F = :* (:* (:* D1 D1) D6) D7
type D1167 = :* (:* (:* D1 D1) D6) D7
type O2217 = :* (:* (:* D1 D1) D6) D7
type H48E = :* (:* (:* D1 D1) D6) D6
type D1166 = :* (:* (:* D1 D1) D6) D6
type O2216 = :* (:* (:* D1 D1) D6) D6
type H48D = :* (:* (:* D1 D1) D6) D5
type D1165 = :* (:* (:* D1 D1) D6) D5
type O2215 = :* (:* (:* D1 D1) D6) D5
type H48C = :* (:* (:* D1 D1) D6) D4
type D1164 = :* (:* (:* D1 D1) D6) D4
type O2214 = :* (:* (:* D1 D1) D6) D4
type H48B = :* (:* (:* D1 D1) D6) D3
type D1163 = :* (:* (:* D1 D1) D6) D3
type O2213 = :* (:* (:* D1 D1) D6) D3
type H48A = :* (:* (:* D1 D1) D6) D2
type D1162 = :* (:* (:* D1 D1) D6) D2
type O2212 = :* (:* (:* D1 D1) D6) D2
type H489 = :* (:* (:* D1 D1) D6) D1
type D1161 = :* (:* (:* D1 D1) D6) D1
type O2211 = :* (:* (:* D1 D1) D6) D1
type H488 = :* (:* (:* D1 D1) D6) D0
type D1160 = :* (:* (:* D1 D1) D6) D0
type O2210 = :* (:* (:* D1 D1) D6) D0
type H487 = :* (:* (:* D1 D1) D5) D9
type D1159 = :* (:* (:* D1 D1) D5) D9
type O2207 = :* (:* (:* D1 D1) D5) D9
type H486 = :* (:* (:* D1 D1) D5) D8
type D1158 = :* (:* (:* D1 D1) D5) D8
type O2206 = :* (:* (:* D1 D1) D5) D8
type H485 = :* (:* (:* D1 D1) D5) D7
type D1157 = :* (:* (:* D1 D1) D5) D7
type O2205 = :* (:* (:* D1 D1) D5) D7
type H484 = :* (:* (:* D1 D1) D5) D6
type D1156 = :* (:* (:* D1 D1) D5) D6
type O2204 = :* (:* (:* D1 D1) D5) D6
type H483 = :* (:* (:* D1 D1) D5) D5
type D1155 = :* (:* (:* D1 D1) D5) D5
type O2203 = :* (:* (:* D1 D1) D5) D5
type H482 = :* (:* (:* D1 D1) D5) D4
type D1154 = :* (:* (:* D1 D1) D5) D4
type O2202 = :* (:* (:* D1 D1) D5) D4
type H481 = :* (:* (:* D1 D1) D5) D3
type D1153 = :* (:* (:* D1 D1) D5) D3
type O2201 = :* (:* (:* D1 D1) D5) D3
type H480 = :* (:* (:* D1 D1) D5) D2
type D1152 = :* (:* (:* D1 D1) D5) D2
type O2200 = :* (:* (:* D1 D1) D5) D2
type H47F = :* (:* (:* D1 D1) D5) D1
type D1151 = :* (:* (:* D1 D1) D5) D1
type O2177 = :* (:* (:* D1 D1) D5) D1
type H47E = :* (:* (:* D1 D1) D5) D0
type D1150 = :* (:* (:* D1 D1) D5) D0
type O2176 = :* (:* (:* D1 D1) D5) D0
type H47D = :* (:* (:* D1 D1) D4) D9
type D1149 = :* (:* (:* D1 D1) D4) D9
type O2175 = :* (:* (:* D1 D1) D4) D9
type H47C = :* (:* (:* D1 D1) D4) D8
type D1148 = :* (:* (:* D1 D1) D4) D8
type O2174 = :* (:* (:* D1 D1) D4) D8
type H47B = :* (:* (:* D1 D1) D4) D7
type D1147 = :* (:* (:* D1 D1) D4) D7
type O2173 = :* (:* (:* D1 D1) D4) D7
type H47A = :* (:* (:* D1 D1) D4) D6
type D1146 = :* (:* (:* D1 D1) D4) D6
type O2172 = :* (:* (:* D1 D1) D4) D6
type H479 = :* (:* (:* D1 D1) D4) D5
type D1145 = :* (:* (:* D1 D1) D4) D5
type O2171 = :* (:* (:* D1 D1) D4) D5
type H478 = :* (:* (:* D1 D1) D4) D4
type D1144 = :* (:* (:* D1 D1) D4) D4
type O2170 = :* (:* (:* D1 D1) D4) D4
type H477 = :* (:* (:* D1 D1) D4) D3
type D1143 = :* (:* (:* D1 D1) D4) D3
type O2167 = :* (:* (:* D1 D1) D4) D3
type H476 = :* (:* (:* D1 D1) D4) D2
type D1142 = :* (:* (:* D1 D1) D4) D2
type O2166 = :* (:* (:* D1 D1) D4) D2
type H475 = :* (:* (:* D1 D1) D4) D1
type D1141 = :* (:* (:* D1 D1) D4) D1
type O2165 = :* (:* (:* D1 D1) D4) D1
type H474 = :* (:* (:* D1 D1) D4) D0
type D1140 = :* (:* (:* D1 D1) D4) D0
type O2164 = :* (:* (:* D1 D1) D4) D0
type H473 = :* (:* (:* D1 D1) D3) D9
type D1139 = :* (:* (:* D1 D1) D3) D9
type O2163 = :* (:* (:* D1 D1) D3) D9
type H472 = :* (:* (:* D1 D1) D3) D8
type D1138 = :* (:* (:* D1 D1) D3) D8
type O2162 = :* (:* (:* D1 D1) D3) D8
type H471 = :* (:* (:* D1 D1) D3) D7
type D1137 = :* (:* (:* D1 D1) D3) D7
type O2161 = :* (:* (:* D1 D1) D3) D7
type H470 = :* (:* (:* D1 D1) D3) D6
type D1136 = :* (:* (:* D1 D1) D3) D6
type O2160 = :* (:* (:* D1 D1) D3) D6
type H46F = :* (:* (:* D1 D1) D3) D5
type D1135 = :* (:* (:* D1 D1) D3) D5
type O2157 = :* (:* (:* D1 D1) D3) D5
type H46E = :* (:* (:* D1 D1) D3) D4
type D1134 = :* (:* (:* D1 D1) D3) D4
type O2156 = :* (:* (:* D1 D1) D3) D4
type H46D = :* (:* (:* D1 D1) D3) D3
type D1133 = :* (:* (:* D1 D1) D3) D3
type O2155 = :* (:* (:* D1 D1) D3) D3
type H46C = :* (:* (:* D1 D1) D3) D2
type D1132 = :* (:* (:* D1 D1) D3) D2
type O2154 = :* (:* (:* D1 D1) D3) D2
type H46B = :* (:* (:* D1 D1) D3) D1
type D1131 = :* (:* (:* D1 D1) D3) D1
type O2153 = :* (:* (:* D1 D1) D3) D1
type H46A = :* (:* (:* D1 D1) D3) D0
type D1130 = :* (:* (:* D1 D1) D3) D0
type O2152 = :* (:* (:* D1 D1) D3) D0
type H469 = :* (:* (:* D1 D1) D2) D9
type D1129 = :* (:* (:* D1 D1) D2) D9
type O2151 = :* (:* (:* D1 D1) D2) D9
type H468 = :* (:* (:* D1 D1) D2) D8
type D1128 = :* (:* (:* D1 D1) D2) D8
type O2150 = :* (:* (:* D1 D1) D2) D8
type H467 = :* (:* (:* D1 D1) D2) D7
type D1127 = :* (:* (:* D1 D1) D2) D7
type O2147 = :* (:* (:* D1 D1) D2) D7
type H466 = :* (:* (:* D1 D1) D2) D6
type D1126 = :* (:* (:* D1 D1) D2) D6
type O2146 = :* (:* (:* D1 D1) D2) D6
type H465 = :* (:* (:* D1 D1) D2) D5
type D1125 = :* (:* (:* D1 D1) D2) D5
type O2145 = :* (:* (:* D1 D1) D2) D5
type H464 = :* (:* (:* D1 D1) D2) D4
type D1124 = :* (:* (:* D1 D1) D2) D4
type O2144 = :* (:* (:* D1 D1) D2) D4
type H463 = :* (:* (:* D1 D1) D2) D3
type D1123 = :* (:* (:* D1 D1) D2) D3
type O2143 = :* (:* (:* D1 D1) D2) D3
type H462 = :* (:* (:* D1 D1) D2) D2
type D1122 = :* (:* (:* D1 D1) D2) D2
type O2142 = :* (:* (:* D1 D1) D2) D2
type H461 = :* (:* (:* D1 D1) D2) D1
type D1121 = :* (:* (:* D1 D1) D2) D1
type O2141 = :* (:* (:* D1 D1) D2) D1
type H460 = :* (:* (:* D1 D1) D2) D0
type D1120 = :* (:* (:* D1 D1) D2) D0
type O2140 = :* (:* (:* D1 D1) D2) D0
type H45F = :* (:* (:* D1 D1) D1) D9
type D1119 = :* (:* (:* D1 D1) D1) D9
type O2137 = :* (:* (:* D1 D1) D1) D9
type H45E = :* (:* (:* D1 D1) D1) D8
type D1118 = :* (:* (:* D1 D1) D1) D8
type O2136 = :* (:* (:* D1 D1) D1) D8
type H45D = :* (:* (:* D1 D1) D1) D7
type D1117 = :* (:* (:* D1 D1) D1) D7
type O2135 = :* (:* (:* D1 D1) D1) D7
type H45C = :* (:* (:* D1 D1) D1) D6
type D1116 = :* (:* (:* D1 D1) D1) D6
type O2134 = :* (:* (:* D1 D1) D1) D6
type H45B = :* (:* (:* D1 D1) D1) D5
type D1115 = :* (:* (:* D1 D1) D1) D5
type O2133 = :* (:* (:* D1 D1) D1) D5
type H45A = :* (:* (:* D1 D1) D1) D4
type D1114 = :* (:* (:* D1 D1) D1) D4
type O2132 = :* (:* (:* D1 D1) D1) D4
type H459 = :* (:* (:* D1 D1) D1) D3
type D1113 = :* (:* (:* D1 D1) D1) D3
type O2131 = :* (:* (:* D1 D1) D1) D3
type H458 = :* (:* (:* D1 D1) D1) D2
type D1112 = :* (:* (:* D1 D1) D1) D2
type O2130 = :* (:* (:* D1 D1) D1) D2
type H457 = :* (:* (:* D1 D1) D1) D1
type D1111 = :* (:* (:* D1 D1) D1) D1
type O2127 = :* (:* (:* D1 D1) D1) D1
type H456 = :* (:* (:* D1 D1) D1) D0
type D1110 = :* (:* (:* D1 D1) D1) D0
type O2126 = :* (:* (:* D1 D1) D1) D0
type H455 = :* (:* (:* D1 D1) D0) D9
type D1109 = :* (:* (:* D1 D1) D0) D9
type O2125 = :* (:* (:* D1 D1) D0) D9
type H454 = :* (:* (:* D1 D1) D0) D8
type D1108 = :* (:* (:* D1 D1) D0) D8
type O2124 = :* (:* (:* D1 D1) D0) D8
type H453 = :* (:* (:* D1 D1) D0) D7
type D1107 = :* (:* (:* D1 D1) D0) D7
type O2123 = :* (:* (:* D1 D1) D0) D7
type H452 = :* (:* (:* D1 D1) D0) D6
type D1106 = :* (:* (:* D1 D1) D0) D6
type O2122 = :* (:* (:* D1 D1) D0) D6
type H451 = :* (:* (:* D1 D1) D0) D5
type D1105 = :* (:* (:* D1 D1) D0) D5
type O2121 = :* (:* (:* D1 D1) D0) D5
type H450 = :* (:* (:* D1 D1) D0) D4
type D1104 = :* (:* (:* D1 D1) D0) D4
type O2120 = :* (:* (:* D1 D1) D0) D4
type H44F = :* (:* (:* D1 D1) D0) D3
type D1103 = :* (:* (:* D1 D1) D0) D3
type O2117 = :* (:* (:* D1 D1) D0) D3
type H44E = :* (:* (:* D1 D1) D0) D2
type D1102 = :* (:* (:* D1 D1) D0) D2
type O2116 = :* (:* (:* D1 D1) D0) D2
type H44D = :* (:* (:* D1 D1) D0) D1
type D1101 = :* (:* (:* D1 D1) D0) D1
type O2115 = :* (:* (:* D1 D1) D0) D1
type H44C = :* (:* (:* D1 D1) D0) D0
type D1100 = :* (:* (:* D1 D1) D0) D0
type O2114 = :* (:* (:* D1 D1) D0) D0
type H44B = :* (:* (:* D1 D0) D9) D9
type D1099 = :* (:* (:* D1 D0) D9) D9
type O2113 = :* (:* (:* D1 D0) D9) D9
type H44A = :* (:* (:* D1 D0) D9) D8
type D1098 = :* (:* (:* D1 D0) D9) D8
type O2112 = :* (:* (:* D1 D0) D9) D8
type H449 = :* (:* (:* D1 D0) D9) D7
type D1097 = :* (:* (:* D1 D0) D9) D7
type O2111 = :* (:* (:* D1 D0) D9) D7
type H448 = :* (:* (:* D1 D0) D9) D6
type D1096 = :* (:* (:* D1 D0) D9) D6
type O2110 = :* (:* (:* D1 D0) D9) D6
type H447 = :* (:* (:* D1 D0) D9) D5
type D1095 = :* (:* (:* D1 D0) D9) D5
type O2107 = :* (:* (:* D1 D0) D9) D5
type H446 = :* (:* (:* D1 D0) D9) D4
type D1094 = :* (:* (:* D1 D0) D9) D4
type O2106 = :* (:* (:* D1 D0) D9) D4
type H445 = :* (:* (:* D1 D0) D9) D3
type D1093 = :* (:* (:* D1 D0) D9) D3
type O2105 = :* (:* (:* D1 D0) D9) D3
type H444 = :* (:* (:* D1 D0) D9) D2
type D1092 = :* (:* (:* D1 D0) D9) D2
type O2104 = :* (:* (:* D1 D0) D9) D2
type H443 = :* (:* (:* D1 D0) D9) D1
type D1091 = :* (:* (:* D1 D0) D9) D1
type O2103 = :* (:* (:* D1 D0) D9) D1
type H442 = :* (:* (:* D1 D0) D9) D0
type D1090 = :* (:* (:* D1 D0) D9) D0
type O2102 = :* (:* (:* D1 D0) D9) D0
type H441 = :* (:* (:* D1 D0) D8) D9
type D1089 = :* (:* (:* D1 D0) D8) D9
type O2101 = :* (:* (:* D1 D0) D8) D9
type H440 = :* (:* (:* D1 D0) D8) D8
type D1088 = :* (:* (:* D1 D0) D8) D8
type O2100 = :* (:* (:* D1 D0) D8) D8
type H43F = :* (:* (:* D1 D0) D8) D7
type D1087 = :* (:* (:* D1 D0) D8) D7
type O2077 = :* (:* (:* D1 D0) D8) D7
type H43E = :* (:* (:* D1 D0) D8) D6
type D1086 = :* (:* (:* D1 D0) D8) D6
type O2076 = :* (:* (:* D1 D0) D8) D6
type H43D = :* (:* (:* D1 D0) D8) D5
type D1085 = :* (:* (:* D1 D0) D8) D5
type O2075 = :* (:* (:* D1 D0) D8) D5
type H43C = :* (:* (:* D1 D0) D8) D4
type D1084 = :* (:* (:* D1 D0) D8) D4
type O2074 = :* (:* (:* D1 D0) D8) D4
type H43B = :* (:* (:* D1 D0) D8) D3
type D1083 = :* (:* (:* D1 D0) D8) D3
type O2073 = :* (:* (:* D1 D0) D8) D3
type H43A = :* (:* (:* D1 D0) D8) D2
type D1082 = :* (:* (:* D1 D0) D8) D2
type O2072 = :* (:* (:* D1 D0) D8) D2
type H439 = :* (:* (:* D1 D0) D8) D1
type D1081 = :* (:* (:* D1 D0) D8) D1
type O2071 = :* (:* (:* D1 D0) D8) D1
type H438 = :* (:* (:* D1 D0) D8) D0
type D1080 = :* (:* (:* D1 D0) D8) D0
type O2070 = :* (:* (:* D1 D0) D8) D0
type H437 = :* (:* (:* D1 D0) D7) D9
type D1079 = :* (:* (:* D1 D0) D7) D9
type O2067 = :* (:* (:* D1 D0) D7) D9
type H436 = :* (:* (:* D1 D0) D7) D8
type D1078 = :* (:* (:* D1 D0) D7) D8
type O2066 = :* (:* (:* D1 D0) D7) D8
type H435 = :* (:* (:* D1 D0) D7) D7
type D1077 = :* (:* (:* D1 D0) D7) D7
type O2065 = :* (:* (:* D1 D0) D7) D7
type H434 = :* (:* (:* D1 D0) D7) D6
type D1076 = :* (:* (:* D1 D0) D7) D6
type O2064 = :* (:* (:* D1 D0) D7) D6
type H433 = :* (:* (:* D1 D0) D7) D5
type D1075 = :* (:* (:* D1 D0) D7) D5
type O2063 = :* (:* (:* D1 D0) D7) D5
type H432 = :* (:* (:* D1 D0) D7) D4
type D1074 = :* (:* (:* D1 D0) D7) D4
type O2062 = :* (:* (:* D1 D0) D7) D4
type H431 = :* (:* (:* D1 D0) D7) D3
type D1073 = :* (:* (:* D1 D0) D7) D3
type O2061 = :* (:* (:* D1 D0) D7) D3
type H430 = :* (:* (:* D1 D0) D7) D2
type D1072 = :* (:* (:* D1 D0) D7) D2
type O2060 = :* (:* (:* D1 D0) D7) D2
type H42F = :* (:* (:* D1 D0) D7) D1
type D1071 = :* (:* (:* D1 D0) D7) D1
type O2057 = :* (:* (:* D1 D0) D7) D1
type H42E = :* (:* (:* D1 D0) D7) D0
type D1070 = :* (:* (:* D1 D0) D7) D0
type O2056 = :* (:* (:* D1 D0) D7) D0
type H42D = :* (:* (:* D1 D0) D6) D9
type D1069 = :* (:* (:* D1 D0) D6) D9
type O2055 = :* (:* (:* D1 D0) D6) D9
type H42C = :* (:* (:* D1 D0) D6) D8
type D1068 = :* (:* (:* D1 D0) D6) D8
type O2054 = :* (:* (:* D1 D0) D6) D8
type H42B = :* (:* (:* D1 D0) D6) D7
type D1067 = :* (:* (:* D1 D0) D6) D7
type O2053 = :* (:* (:* D1 D0) D6) D7
type H42A = :* (:* (:* D1 D0) D6) D6
type D1066 = :* (:* (:* D1 D0) D6) D6
type O2052 = :* (:* (:* D1 D0) D6) D6
type H429 = :* (:* (:* D1 D0) D6) D5
type D1065 = :* (:* (:* D1 D0) D6) D5
type O2051 = :* (:* (:* D1 D0) D6) D5
type H428 = :* (:* (:* D1 D0) D6) D4
type D1064 = :* (:* (:* D1 D0) D6) D4
type O2050 = :* (:* (:* D1 D0) D6) D4
type H427 = :* (:* (:* D1 D0) D6) D3
type D1063 = :* (:* (:* D1 D0) D6) D3
type O2047 = :* (:* (:* D1 D0) D6) D3
type H426 = :* (:* (:* D1 D0) D6) D2
type D1062 = :* (:* (:* D1 D0) D6) D2
type O2046 = :* (:* (:* D1 D0) D6) D2
type H425 = :* (:* (:* D1 D0) D6) D1
type D1061 = :* (:* (:* D1 D0) D6) D1
type O2045 = :* (:* (:* D1 D0) D6) D1
type H424 = :* (:* (:* D1 D0) D6) D0
type D1060 = :* (:* (:* D1 D0) D6) D0
type O2044 = :* (:* (:* D1 D0) D6) D0
type H423 = :* (:* (:* D1 D0) D5) D9
type D1059 = :* (:* (:* D1 D0) D5) D9
type O2043 = :* (:* (:* D1 D0) D5) D9
type H422 = :* (:* (:* D1 D0) D5) D8
type D1058 = :* (:* (:* D1 D0) D5) D8
type O2042 = :* (:* (:* D1 D0) D5) D8
type H421 = :* (:* (:* D1 D0) D5) D7
type D1057 = :* (:* (:* D1 D0) D5) D7
type O2041 = :* (:* (:* D1 D0) D5) D7
type H420 = :* (:* (:* D1 D0) D5) D6
type D1056 = :* (:* (:* D1 D0) D5) D6
type O2040 = :* (:* (:* D1 D0) D5) D6
type H41F = :* (:* (:* D1 D0) D5) D5
type D1055 = :* (:* (:* D1 D0) D5) D5
type O2037 = :* (:* (:* D1 D0) D5) D5
type H41E = :* (:* (:* D1 D0) D5) D4
type D1054 = :* (:* (:* D1 D0) D5) D4
type O2036 = :* (:* (:* D1 D0) D5) D4
type H41D = :* (:* (:* D1 D0) D5) D3
type D1053 = :* (:* (:* D1 D0) D5) D3
type O2035 = :* (:* (:* D1 D0) D5) D3
type H41C = :* (:* (:* D1 D0) D5) D2
type D1052 = :* (:* (:* D1 D0) D5) D2
type O2034 = :* (:* (:* D1 D0) D5) D2
type H41B = :* (:* (:* D1 D0) D5) D1
type D1051 = :* (:* (:* D1 D0) D5) D1
type O2033 = :* (:* (:* D1 D0) D5) D1
type H41A = :* (:* (:* D1 D0) D5) D0
type D1050 = :* (:* (:* D1 D0) D5) D0
type O2032 = :* (:* (:* D1 D0) D5) D0
type H419 = :* (:* (:* D1 D0) D4) D9
type D1049 = :* (:* (:* D1 D0) D4) D9
type O2031 = :* (:* (:* D1 D0) D4) D9
type H418 = :* (:* (:* D1 D0) D4) D8
type D1048 = :* (:* (:* D1 D0) D4) D8
type O2030 = :* (:* (:* D1 D0) D4) D8
type H417 = :* (:* (:* D1 D0) D4) D7
type D1047 = :* (:* (:* D1 D0) D4) D7
type O2027 = :* (:* (:* D1 D0) D4) D7
type H416 = :* (:* (:* D1 D0) D4) D6
type D1046 = :* (:* (:* D1 D0) D4) D6
type O2026 = :* (:* (:* D1 D0) D4) D6
type H415 = :* (:* (:* D1 D0) D4) D5
type D1045 = :* (:* (:* D1 D0) D4) D5
type O2025 = :* (:* (:* D1 D0) D4) D5
type H414 = :* (:* (:* D1 D0) D4) D4
type D1044 = :* (:* (:* D1 D0) D4) D4
type O2024 = :* (:* (:* D1 D0) D4) D4
type H413 = :* (:* (:* D1 D0) D4) D3
type D1043 = :* (:* (:* D1 D0) D4) D3
type O2023 = :* (:* (:* D1 D0) D4) D3
type H412 = :* (:* (:* D1 D0) D4) D2
type D1042 = :* (:* (:* D1 D0) D4) D2
type O2022 = :* (:* (:* D1 D0) D4) D2
type H411 = :* (:* (:* D1 D0) D4) D1
type D1041 = :* (:* (:* D1 D0) D4) D1
type O2021 = :* (:* (:* D1 D0) D4) D1
type H410 = :* (:* (:* D1 D0) D4) D0
type D1040 = :* (:* (:* D1 D0) D4) D0
type O2020 = :* (:* (:* D1 D0) D4) D0
type H40F = :* (:* (:* D1 D0) D3) D9
type D1039 = :* (:* (:* D1 D0) D3) D9
type O2017 = :* (:* (:* D1 D0) D3) D9
type H40E = :* (:* (:* D1 D0) D3) D8
type D1038 = :* (:* (:* D1 D0) D3) D8
type O2016 = :* (:* (:* D1 D0) D3) D8
type H40D = :* (:* (:* D1 D0) D3) D7
type D1037 = :* (:* (:* D1 D0) D3) D7
type O2015 = :* (:* (:* D1 D0) D3) D7
type H40C = :* (:* (:* D1 D0) D3) D6
type D1036 = :* (:* (:* D1 D0) D3) D6
type O2014 = :* (:* (:* D1 D0) D3) D6
type H40B = :* (:* (:* D1 D0) D3) D5
type D1035 = :* (:* (:* D1 D0) D3) D5
type O2013 = :* (:* (:* D1 D0) D3) D5
type H40A = :* (:* (:* D1 D0) D3) D4
type D1034 = :* (:* (:* D1 D0) D3) D4
type O2012 = :* (:* (:* D1 D0) D3) D4
type H409 = :* (:* (:* D1 D0) D3) D3
type D1033 = :* (:* (:* D1 D0) D3) D3
type O2011 = :* (:* (:* D1 D0) D3) D3
type H408 = :* (:* (:* D1 D0) D3) D2
type D1032 = :* (:* (:* D1 D0) D3) D2
type O2010 = :* (:* (:* D1 D0) D3) D2
type H407 = :* (:* (:* D1 D0) D3) D1
type D1031 = :* (:* (:* D1 D0) D3) D1
type O2007 = :* (:* (:* D1 D0) D3) D1
type H406 = :* (:* (:* D1 D0) D3) D0
type D1030 = :* (:* (:* D1 D0) D3) D0
type O2006 = :* (:* (:* D1 D0) D3) D0
type H405 = :* (:* (:* D1 D0) D2) D9
type D1029 = :* (:* (:* D1 D0) D2) D9
type O2005 = :* (:* (:* D1 D0) D2) D9
type H404 = :* (:* (:* D1 D0) D2) D8
type D1028 = :* (:* (:* D1 D0) D2) D8
type O2004 = :* (:* (:* D1 D0) D2) D8
type H403 = :* (:* (:* D1 D0) D2) D7
type D1027 = :* (:* (:* D1 D0) D2) D7
type O2003 = :* (:* (:* D1 D0) D2) D7
type H402 = :* (:* (:* D1 D0) D2) D6
type D1026 = :* (:* (:* D1 D0) D2) D6
type O2002 = :* (:* (:* D1 D0) D2) D6
type H401 = :* (:* (:* D1 D0) D2) D5
type D1025 = :* (:* (:* D1 D0) D2) D5
type O2001 = :* (:* (:* D1 D0) D2) D5
type H400 = :* (:* (:* D1 D0) D2) D4
type D1024 = :* (:* (:* D1 D0) D2) D4
type O2000 = :* (:* (:* D1 D0) D2) D4
type B10000000000 = :* (:* (:* D1 D0) D2) D4
type H3FF = :* (:* (:* D1 D0) D2) D3
type D1023 = :* (:* (:* D1 D0) D2) D3
type O1777 = :* (:* (:* D1 D0) D2) D3
type B1111111111 = :* (:* (:* D1 D0) D2) D3
type H3FE = :* (:* (:* D1 D0) D2) D2
type D1022 = :* (:* (:* D1 D0) D2) D2
type O1776 = :* (:* (:* D1 D0) D2) D2
type B1111111110 = :* (:* (:* D1 D0) D2) D2
type H3FD = :* (:* (:* D1 D0) D2) D1
type D1021 = :* (:* (:* D1 D0) D2) D1
type O1775 = :* (:* (:* D1 D0) D2) D1
type B1111111101 = :* (:* (:* D1 D0) D2) D1
type H3FC = :* (:* (:* D1 D0) D2) D0
type D1020 = :* (:* (:* D1 D0) D2) D0
type O1774 = :* (:* (:* D1 D0) D2) D0
type B1111111100 = :* (:* (:* D1 D0) D2) D0
type H3FB = :* (:* (:* D1 D0) D1) D9
type D1019 = :* (:* (:* D1 D0) D1) D9
type O1773 = :* (:* (:* D1 D0) D1) D9
type B1111111011 = :* (:* (:* D1 D0) D1) D9
type H3FA = :* (:* (:* D1 D0) D1) D8
type D1018 = :* (:* (:* D1 D0) D1) D8
type O1772 = :* (:* (:* D1 D0) D1) D8
type B1111111010 = :* (:* (:* D1 D0) D1) D8
type H3F9 = :* (:* (:* D1 D0) D1) D7
type D1017 = :* (:* (:* D1 D0) D1) D7
type O1771 = :* (:* (:* D1 D0) D1) D7
type B1111111001 = :* (:* (:* D1 D0) D1) D7
type H3F8 = :* (:* (:* D1 D0) D1) D6
type D1016 = :* (:* (:* D1 D0) D1) D6
type O1770 = :* (:* (:* D1 D0) D1) D6
type B1111111000 = :* (:* (:* D1 D0) D1) D6
type H3F7 = :* (:* (:* D1 D0) D1) D5
type D1015 = :* (:* (:* D1 D0) D1) D5
type O1767 = :* (:* (:* D1 D0) D1) D5
type B1111110111 = :* (:* (:* D1 D0) D1) D5
type H3F6 = :* (:* (:* D1 D0) D1) D4
type D1014 = :* (:* (:* D1 D0) D1) D4
type O1766 = :* (:* (:* D1 D0) D1) D4
type B1111110110 = :* (:* (:* D1 D0) D1) D4
type H3F5 = :* (:* (:* D1 D0) D1) D3
type D1013 = :* (:* (:* D1 D0) D1) D3
type O1765 = :* (:* (:* D1 D0) D1) D3
type B1111110101 = :* (:* (:* D1 D0) D1) D3
type H3F4 = :* (:* (:* D1 D0) D1) D2
type D1012 = :* (:* (:* D1 D0) D1) D2
type O1764 = :* (:* (:* D1 D0) D1) D2
type B1111110100 = :* (:* (:* D1 D0) D1) D2
type H3F3 = :* (:* (:* D1 D0) D1) D1
type D1011 = :* (:* (:* D1 D0) D1) D1
type O1763 = :* (:* (:* D1 D0) D1) D1
type B1111110011 = :* (:* (:* D1 D0) D1) D1
type H3F2 = :* (:* (:* D1 D0) D1) D0
type D1010 = :* (:* (:* D1 D0) D1) D0
type O1762 = :* (:* (:* D1 D0) D1) D0
type B1111110010 = :* (:* (:* D1 D0) D1) D0
type H3F1 = :* (:* (:* D1 D0) D0) D9
type D1009 = :* (:* (:* D1 D0) D0) D9
type O1761 = :* (:* (:* D1 D0) D0) D9
type B1111110001 = :* (:* (:* D1 D0) D0) D9
type H3F0 = :* (:* (:* D1 D0) D0) D8
type D1008 = :* (:* (:* D1 D0) D0) D8
type O1760 = :* (:* (:* D1 D0) D0) D8
type B1111110000 = :* (:* (:* D1 D0) D0) D8
type H3EF = :* (:* (:* D1 D0) D0) D7
type D1007 = :* (:* (:* D1 D0) D0) D7
type O1757 = :* (:* (:* D1 D0) D0) D7
type B1111101111 = :* (:* (:* D1 D0) D0) D7
type H3EE = :* (:* (:* D1 D0) D0) D6
type D1006 = :* (:* (:* D1 D0) D0) D6
type O1756 = :* (:* (:* D1 D0) D0) D6
type B1111101110 = :* (:* (:* D1 D0) D0) D6
type H3ED = :* (:* (:* D1 D0) D0) D5
type D1005 = :* (:* (:* D1 D0) D0) D5
type O1755 = :* (:* (:* D1 D0) D0) D5
type B1111101101 = :* (:* (:* D1 D0) D0) D5
type H3EC = :* (:* (:* D1 D0) D0) D4
type D1004 = :* (:* (:* D1 D0) D0) D4
type O1754 = :* (:* (:* D1 D0) D0) D4
type B1111101100 = :* (:* (:* D1 D0) D0) D4
type H3EB = :* (:* (:* D1 D0) D0) D3
type D1003 = :* (:* (:* D1 D0) D0) D3
type O1753 = :* (:* (:* D1 D0) D0) D3
type B1111101011 = :* (:* (:* D1 D0) D0) D3
type H3EA = :* (:* (:* D1 D0) D0) D2
type D1002 = :* (:* (:* D1 D0) D0) D2
type O1752 = :* (:* (:* D1 D0) D0) D2
type B1111101010 = :* (:* (:* D1 D0) D0) D2
type H3E9 = :* (:* (:* D1 D0) D0) D1
type D1001 = :* (:* (:* D1 D0) D0) D1
type O1751 = :* (:* (:* D1 D0) D0) D1
type B1111101001 = :* (:* (:* D1 D0) D0) D1
type H3E8 = :* (:* (:* D1 D0) D0) D0
type D1000 = :* (:* (:* D1 D0) D0) D0
type O1750 = :* (:* (:* D1 D0) D0) D0
type B1111101000 = :* (:* (:* D1 D0) D0) D0
type H3E7 = :* (:* D9 D9) D9
type D999 = :* (:* D9 D9) D9
type O1747 = :* (:* D9 D9) D9
type B1111100111 = :* (:* D9 D9) D9
type H3E6 = :* (:* D9 D9) D8
type D998 = :* (:* D9 D9) D8
type O1746 = :* (:* D9 D9) D8
type B1111100110 = :* (:* D9 D9) D8
type H3E5 = :* (:* D9 D9) D7
type D997 = :* (:* D9 D9) D7
type O1745 = :* (:* D9 D9) D7
type B1111100101 = :* (:* D9 D9) D7
type H3E4 = :* (:* D9 D9) D6
type D996 = :* (:* D9 D9) D6
type O1744 = :* (:* D9 D9) D6
type B1111100100 = :* (:* D9 D9) D6
type H3E3 = :* (:* D9 D9) D5
type D995 = :* (:* D9 D9) D5
type O1743 = :* (:* D9 D9) D5
type B1111100011 = :* (:* D9 D9) D5
type H3E2 = :* (:* D9 D9) D4
type D994 = :* (:* D9 D9) D4
type O1742 = :* (:* D9 D9) D4
type B1111100010 = :* (:* D9 D9) D4
type H3E1 = :* (:* D9 D9) D3
type D993 = :* (:* D9 D9) D3
type O1741 = :* (:* D9 D9) D3
type B1111100001 = :* (:* D9 D9) D3
type H3E0 = :* (:* D9 D9) D2
type D992 = :* (:* D9 D9) D2
type O1740 = :* (:* D9 D9) D2
type B1111100000 = :* (:* D9 D9) D2
type H3DF = :* (:* D9 D9) D1
type D991 = :* (:* D9 D9) D1
type O1737 = :* (:* D9 D9) D1
type B1111011111 = :* (:* D9 D9) D1
type H3DE = :* (:* D9 D9) D0
type D990 = :* (:* D9 D9) D0
type O1736 = :* (:* D9 D9) D0
type B1111011110 = :* (:* D9 D9) D0
type H3DD = :* (:* D9 D8) D9
type D989 = :* (:* D9 D8) D9
type O1735 = :* (:* D9 D8) D9
type B1111011101 = :* (:* D9 D8) D9
type H3DC = :* (:* D9 D8) D8
type D988 = :* (:* D9 D8) D8
type O1734 = :* (:* D9 D8) D8
type B1111011100 = :* (:* D9 D8) D8
type H3DB = :* (:* D9 D8) D7
type D987 = :* (:* D9 D8) D7
type O1733 = :* (:* D9 D8) D7
type B1111011011 = :* (:* D9 D8) D7
type H3DA = :* (:* D9 D8) D6
type D986 = :* (:* D9 D8) D6
type O1732 = :* (:* D9 D8) D6
type B1111011010 = :* (:* D9 D8) D6
type H3D9 = :* (:* D9 D8) D5
type D985 = :* (:* D9 D8) D5
type O1731 = :* (:* D9 D8) D5
type B1111011001 = :* (:* D9 D8) D5
type H3D8 = :* (:* D9 D8) D4
type D984 = :* (:* D9 D8) D4
type O1730 = :* (:* D9 D8) D4
type B1111011000 = :* (:* D9 D8) D4
type H3D7 = :* (:* D9 D8) D3
type D983 = :* (:* D9 D8) D3
type O1727 = :* (:* D9 D8) D3
type B1111010111 = :* (:* D9 D8) D3
type H3D6 = :* (:* D9 D8) D2
type D982 = :* (:* D9 D8) D2
type O1726 = :* (:* D9 D8) D2
type B1111010110 = :* (:* D9 D8) D2
type H3D5 = :* (:* D9 D8) D1
type D981 = :* (:* D9 D8) D1
type O1725 = :* (:* D9 D8) D1
type B1111010101 = :* (:* D9 D8) D1
type H3D4 = :* (:* D9 D8) D0
type D980 = :* (:* D9 D8) D0
type O1724 = :* (:* D9 D8) D0
type B1111010100 = :* (:* D9 D8) D0
type H3D3 = :* (:* D9 D7) D9
type D979 = :* (:* D9 D7) D9
type O1723 = :* (:* D9 D7) D9
type B1111010011 = :* (:* D9 D7) D9
type H3D2 = :* (:* D9 D7) D8
type D978 = :* (:* D9 D7) D8
type O1722 = :* (:* D9 D7) D8
type B1111010010 = :* (:* D9 D7) D8
type H3D1 = :* (:* D9 D7) D7
type D977 = :* (:* D9 D7) D7
type O1721 = :* (:* D9 D7) D7
type B1111010001 = :* (:* D9 D7) D7
type H3D0 = :* (:* D9 D7) D6
type D976 = :* (:* D9 D7) D6
type O1720 = :* (:* D9 D7) D6
type B1111010000 = :* (:* D9 D7) D6
type H3CF = :* (:* D9 D7) D5
type D975 = :* (:* D9 D7) D5
type O1717 = :* (:* D9 D7) D5
type B1111001111 = :* (:* D9 D7) D5
type H3CE = :* (:* D9 D7) D4
type D974 = :* (:* D9 D7) D4
type O1716 = :* (:* D9 D7) D4
type B1111001110 = :* (:* D9 D7) D4
type H3CD = :* (:* D9 D7) D3
type D973 = :* (:* D9 D7) D3
type O1715 = :* (:* D9 D7) D3
type B1111001101 = :* (:* D9 D7) D3
type H3CC = :* (:* D9 D7) D2
type D972 = :* (:* D9 D7) D2
type O1714 = :* (:* D9 D7) D2
type B1111001100 = :* (:* D9 D7) D2
type H3CB = :* (:* D9 D7) D1
type D971 = :* (:* D9 D7) D1
type O1713 = :* (:* D9 D7) D1
type B1111001011 = :* (:* D9 D7) D1
type H3CA = :* (:* D9 D7) D0
type D970 = :* (:* D9 D7) D0
type O1712 = :* (:* D9 D7) D0
type B1111001010 = :* (:* D9 D7) D0
type H3C9 = :* (:* D9 D6) D9
type D969 = :* (:* D9 D6) D9
type O1711 = :* (:* D9 D6) D9
type B1111001001 = :* (:* D9 D6) D9
type H3C8 = :* (:* D9 D6) D8
type D968 = :* (:* D9 D6) D8
type O1710 = :* (:* D9 D6) D8
type B1111001000 = :* (:* D9 D6) D8
type H3C7 = :* (:* D9 D6) D7
type D967 = :* (:* D9 D6) D7
type O1707 = :* (:* D9 D6) D7
type B1111000111 = :* (:* D9 D6) D7
type H3C6 = :* (:* D9 D6) D6
type D966 = :* (:* D9 D6) D6
type O1706 = :* (:* D9 D6) D6
type B1111000110 = :* (:* D9 D6) D6
type H3C5 = :* (:* D9 D6) D5
type D965 = :* (:* D9 D6) D5
type O1705 = :* (:* D9 D6) D5
type B1111000101 = :* (:* D9 D6) D5
type H3C4 = :* (:* D9 D6) D4
type D964 = :* (:* D9 D6) D4
type O1704 = :* (:* D9 D6) D4
type B1111000100 = :* (:* D9 D6) D4
type H3C3 = :* (:* D9 D6) D3
type D963 = :* (:* D9 D6) D3
type O1703 = :* (:* D9 D6) D3
type B1111000011 = :* (:* D9 D6) D3
type H3C2 = :* (:* D9 D6) D2
type D962 = :* (:* D9 D6) D2
type O1702 = :* (:* D9 D6) D2
type B1111000010 = :* (:* D9 D6) D2
type H3C1 = :* (:* D9 D6) D1
type D961 = :* (:* D9 D6) D1
type O1701 = :* (:* D9 D6) D1
type B1111000001 = :* (:* D9 D6) D1
type H3C0 = :* (:* D9 D6) D0
type D960 = :* (:* D9 D6) D0
type O1700 = :* (:* D9 D6) D0
type B1111000000 = :* (:* D9 D6) D0
type H3BF = :* (:* D9 D5) D9
type D959 = :* (:* D9 D5) D9
type O1677 = :* (:* D9 D5) D9
type B1110111111 = :* (:* D9 D5) D9
type H3BE = :* (:* D9 D5) D8
type D958 = :* (:* D9 D5) D8
type O1676 = :* (:* D9 D5) D8
type B1110111110 = :* (:* D9 D5) D8
type H3BD = :* (:* D9 D5) D7
type D957 = :* (:* D9 D5) D7
type O1675 = :* (:* D9 D5) D7
type B1110111101 = :* (:* D9 D5) D7
type H3BC = :* (:* D9 D5) D6
type D956 = :* (:* D9 D5) D6
type O1674 = :* (:* D9 D5) D6
type B1110111100 = :* (:* D9 D5) D6
type H3BB = :* (:* D9 D5) D5
type D955 = :* (:* D9 D5) D5
type O1673 = :* (:* D9 D5) D5
type B1110111011 = :* (:* D9 D5) D5
type H3BA = :* (:* D9 D5) D4
type D954 = :* (:* D9 D5) D4
type O1672 = :* (:* D9 D5) D4
type B1110111010 = :* (:* D9 D5) D4
type H3B9 = :* (:* D9 D5) D3
type D953 = :* (:* D9 D5) D3
type O1671 = :* (:* D9 D5) D3
type B1110111001 = :* (:* D9 D5) D3
type H3B8 = :* (:* D9 D5) D2
type D952 = :* (:* D9 D5) D2
type O1670 = :* (:* D9 D5) D2
type B1110111000 = :* (:* D9 D5) D2
type H3B7 = :* (:* D9 D5) D1
type D951 = :* (:* D9 D5) D1
type O1667 = :* (:* D9 D5) D1
type B1110110111 = :* (:* D9 D5) D1
type H3B6 = :* (:* D9 D5) D0
type D950 = :* (:* D9 D5) D0
type O1666 = :* (:* D9 D5) D0
type B1110110110 = :* (:* D9 D5) D0
type H3B5 = :* (:* D9 D4) D9
type D949 = :* (:* D9 D4) D9
type O1665 = :* (:* D9 D4) D9
type B1110110101 = :* (:* D9 D4) D9
type H3B4 = :* (:* D9 D4) D8
type D948 = :* (:* D9 D4) D8
type O1664 = :* (:* D9 D4) D8
type B1110110100 = :* (:* D9 D4) D8
type H3B3 = :* (:* D9 D4) D7
type D947 = :* (:* D9 D4) D7
type O1663 = :* (:* D9 D4) D7
type B1110110011 = :* (:* D9 D4) D7
type H3B2 = :* (:* D9 D4) D6
type D946 = :* (:* D9 D4) D6
type O1662 = :* (:* D9 D4) D6
type B1110110010 = :* (:* D9 D4) D6
type H3B1 = :* (:* D9 D4) D5
type D945 = :* (:* D9 D4) D5
type O1661 = :* (:* D9 D4) D5
type B1110110001 = :* (:* D9 D4) D5
type H3B0 = :* (:* D9 D4) D4
type D944 = :* (:* D9 D4) D4
type O1660 = :* (:* D9 D4) D4
type B1110110000 = :* (:* D9 D4) D4
type H3AF = :* (:* D9 D4) D3
type D943 = :* (:* D9 D4) D3
type O1657 = :* (:* D9 D4) D3
type B1110101111 = :* (:* D9 D4) D3
type H3AE = :* (:* D9 D4) D2
type D942 = :* (:* D9 D4) D2
type O1656 = :* (:* D9 D4) D2
type B1110101110 = :* (:* D9 D4) D2
type H3AD = :* (:* D9 D4) D1
type D941 = :* (:* D9 D4) D1
type O1655 = :* (:* D9 D4) D1
type B1110101101 = :* (:* D9 D4) D1
type H3AC = :* (:* D9 D4) D0
type D940 = :* (:* D9 D4) D0
type O1654 = :* (:* D9 D4) D0
type B1110101100 = :* (:* D9 D4) D0
type H3AB = :* (:* D9 D3) D9
type D939 = :* (:* D9 D3) D9
type O1653 = :* (:* D9 D3) D9
type B1110101011 = :* (:* D9 D3) D9
type H3AA = :* (:* D9 D3) D8
type D938 = :* (:* D9 D3) D8
type O1652 = :* (:* D9 D3) D8
type B1110101010 = :* (:* D9 D3) D8
type H3A9 = :* (:* D9 D3) D7
type D937 = :* (:* D9 D3) D7
type O1651 = :* (:* D9 D3) D7
type B1110101001 = :* (:* D9 D3) D7
type H3A8 = :* (:* D9 D3) D6
type D936 = :* (:* D9 D3) D6
type O1650 = :* (:* D9 D3) D6
type B1110101000 = :* (:* D9 D3) D6
type H3A7 = :* (:* D9 D3) D5
type D935 = :* (:* D9 D3) D5
type O1647 = :* (:* D9 D3) D5
type B1110100111 = :* (:* D9 D3) D5
type H3A6 = :* (:* D9 D3) D4
type D934 = :* (:* D9 D3) D4
type O1646 = :* (:* D9 D3) D4
type B1110100110 = :* (:* D9 D3) D4
type H3A5 = :* (:* D9 D3) D3
type D933 = :* (:* D9 D3) D3
type O1645 = :* (:* D9 D3) D3
type B1110100101 = :* (:* D9 D3) D3
type H3A4 = :* (:* D9 D3) D2
type D932 = :* (:* D9 D3) D2
type O1644 = :* (:* D9 D3) D2
type B1110100100 = :* (:* D9 D3) D2
type H3A3 = :* (:* D9 D3) D1
type D931 = :* (:* D9 D3) D1
type O1643 = :* (:* D9 D3) D1
type B1110100011 = :* (:* D9 D3) D1
type H3A2 = :* (:* D9 D3) D0
type D930 = :* (:* D9 D3) D0
type O1642 = :* (:* D9 D3) D0
type B1110100010 = :* (:* D9 D3) D0
type H3A1 = :* (:* D9 D2) D9
type D929 = :* (:* D9 D2) D9
type O1641 = :* (:* D9 D2) D9
type B1110100001 = :* (:* D9 D2) D9
type H3A0 = :* (:* D9 D2) D8
type D928 = :* (:* D9 D2) D8
type O1640 = :* (:* D9 D2) D8
type B1110100000 = :* (:* D9 D2) D8
type H39F = :* (:* D9 D2) D7
type D927 = :* (:* D9 D2) D7
type O1637 = :* (:* D9 D2) D7
type B1110011111 = :* (:* D9 D2) D7
type H39E = :* (:* D9 D2) D6
type D926 = :* (:* D9 D2) D6
type O1636 = :* (:* D9 D2) D6
type B1110011110 = :* (:* D9 D2) D6
type H39D = :* (:* D9 D2) D5
type D925 = :* (:* D9 D2) D5
type O1635 = :* (:* D9 D2) D5
type B1110011101 = :* (:* D9 D2) D5
type H39C = :* (:* D9 D2) D4
type D924 = :* (:* D9 D2) D4
type O1634 = :* (:* D9 D2) D4
type B1110011100 = :* (:* D9 D2) D4
type H39B = :* (:* D9 D2) D3
type D923 = :* (:* D9 D2) D3
type O1633 = :* (:* D9 D2) D3
type B1110011011 = :* (:* D9 D2) D3
type H39A = :* (:* D9 D2) D2
type D922 = :* (:* D9 D2) D2
type O1632 = :* (:* D9 D2) D2
type B1110011010 = :* (:* D9 D2) D2
type H399 = :* (:* D9 D2) D1
type D921 = :* (:* D9 D2) D1
type O1631 = :* (:* D9 D2) D1
type B1110011001 = :* (:* D9 D2) D1
type H398 = :* (:* D9 D2) D0
type D920 = :* (:* D9 D2) D0
type O1630 = :* (:* D9 D2) D0
type B1110011000 = :* (:* D9 D2) D0
type H397 = :* (:* D9 D1) D9
type D919 = :* (:* D9 D1) D9
type O1627 = :* (:* D9 D1) D9
type B1110010111 = :* (:* D9 D1) D9
type H396 = :* (:* D9 D1) D8
type D918 = :* (:* D9 D1) D8
type O1626 = :* (:* D9 D1) D8
type B1110010110 = :* (:* D9 D1) D8
type H395 = :* (:* D9 D1) D7
type D917 = :* (:* D9 D1) D7
type O1625 = :* (:* D9 D1) D7
type B1110010101 = :* (:* D9 D1) D7
type H394 = :* (:* D9 D1) D6
type D916 = :* (:* D9 D1) D6
type O1624 = :* (:* D9 D1) D6
type B1110010100 = :* (:* D9 D1) D6
type H393 = :* (:* D9 D1) D5
type D915 = :* (:* D9 D1) D5
type O1623 = :* (:* D9 D1) D5
type B1110010011 = :* (:* D9 D1) D5
type H392 = :* (:* D9 D1) D4
type D914 = :* (:* D9 D1) D4
type O1622 = :* (:* D9 D1) D4
type B1110010010 = :* (:* D9 D1) D4
type H391 = :* (:* D9 D1) D3
type D913 = :* (:* D9 D1) D3
type O1621 = :* (:* D9 D1) D3
type B1110010001 = :* (:* D9 D1) D3
type H390 = :* (:* D9 D1) D2
type D912 = :* (:* D9 D1) D2
type O1620 = :* (:* D9 D1) D2
type B1110010000 = :* (:* D9 D1) D2
type H38F = :* (:* D9 D1) D1
type D911 = :* (:* D9 D1) D1
type O1617 = :* (:* D9 D1) D1
type B1110001111 = :* (:* D9 D1) D1
type H38E = :* (:* D9 D1) D0
type D910 = :* (:* D9 D1) D0
type O1616 = :* (:* D9 D1) D0
type B1110001110 = :* (:* D9 D1) D0
type H38D = :* (:* D9 D0) D9
type D909 = :* (:* D9 D0) D9
type O1615 = :* (:* D9 D0) D9
type B1110001101 = :* (:* D9 D0) D9
type H38C = :* (:* D9 D0) D8
type D908 = :* (:* D9 D0) D8
type O1614 = :* (:* D9 D0) D8
type B1110001100 = :* (:* D9 D0) D8
type H38B = :* (:* D9 D0) D7
type D907 = :* (:* D9 D0) D7
type O1613 = :* (:* D9 D0) D7
type B1110001011 = :* (:* D9 D0) D7
type H38A = :* (:* D9 D0) D6
type D906 = :* (:* D9 D0) D6
type O1612 = :* (:* D9 D0) D6
type B1110001010 = :* (:* D9 D0) D6
type H389 = :* (:* D9 D0) D5
type D905 = :* (:* D9 D0) D5
type O1611 = :* (:* D9 D0) D5
type B1110001001 = :* (:* D9 D0) D5
type H388 = :* (:* D9 D0) D4
type D904 = :* (:* D9 D0) D4
type O1610 = :* (:* D9 D0) D4
type B1110001000 = :* (:* D9 D0) D4
type H387 = :* (:* D9 D0) D3
type D903 = :* (:* D9 D0) D3
type O1607 = :* (:* D9 D0) D3
type B1110000111 = :* (:* D9 D0) D3
type H386 = :* (:* D9 D0) D2
type D902 = :* (:* D9 D0) D2
type O1606 = :* (:* D9 D0) D2
type B1110000110 = :* (:* D9 D0) D2
type H385 = :* (:* D9 D0) D1
type D901 = :* (:* D9 D0) D1
type O1605 = :* (:* D9 D0) D1
type B1110000101 = :* (:* D9 D0) D1
type H384 = :* (:* D9 D0) D0
type D900 = :* (:* D9 D0) D0
type O1604 = :* (:* D9 D0) D0
type B1110000100 = :* (:* D9 D0) D0
type H383 = :* (:* D8 D9) D9
type D899 = :* (:* D8 D9) D9
type O1603 = :* (:* D8 D9) D9
type B1110000011 = :* (:* D8 D9) D9
type H382 = :* (:* D8 D9) D8
type D898 = :* (:* D8 D9) D8
type O1602 = :* (:* D8 D9) D8
type B1110000010 = :* (:* D8 D9) D8
type H381 = :* (:* D8 D9) D7
type D897 = :* (:* D8 D9) D7
type O1601 = :* (:* D8 D9) D7
type B1110000001 = :* (:* D8 D9) D7
type H380 = :* (:* D8 D9) D6
type D896 = :* (:* D8 D9) D6
type O1600 = :* (:* D8 D9) D6
type B1110000000 = :* (:* D8 D9) D6
type H37F = :* (:* D8 D9) D5
type D895 = :* (:* D8 D9) D5
type O1577 = :* (:* D8 D9) D5
type B1101111111 = :* (:* D8 D9) D5
type H37E = :* (:* D8 D9) D4
type D894 = :* (:* D8 D9) D4
type O1576 = :* (:* D8 D9) D4
type B1101111110 = :* (:* D8 D9) D4
type H37D = :* (:* D8 D9) D3
type D893 = :* (:* D8 D9) D3
type O1575 = :* (:* D8 D9) D3
type B1101111101 = :* (:* D8 D9) D3
type H37C = :* (:* D8 D9) D2
type D892 = :* (:* D8 D9) D2
type O1574 = :* (:* D8 D9) D2
type B1101111100 = :* (:* D8 D9) D2
type H37B = :* (:* D8 D9) D1
type D891 = :* (:* D8 D9) D1
type O1573 = :* (:* D8 D9) D1
type B1101111011 = :* (:* D8 D9) D1
type H37A = :* (:* D8 D9) D0
type D890 = :* (:* D8 D9) D0
type O1572 = :* (:* D8 D9) D0
type B1101111010 = :* (:* D8 D9) D0
type H379 = :* (:* D8 D8) D9
type D889 = :* (:* D8 D8) D9
type O1571 = :* (:* D8 D8) D9
type B1101111001 = :* (:* D8 D8) D9
type H378 = :* (:* D8 D8) D8
type D888 = :* (:* D8 D8) D8
type O1570 = :* (:* D8 D8) D8
type B1101111000 = :* (:* D8 D8) D8
type H377 = :* (:* D8 D8) D7
type D887 = :* (:* D8 D8) D7
type O1567 = :* (:* D8 D8) D7
type B1101110111 = :* (:* D8 D8) D7
type H376 = :* (:* D8 D8) D6
type D886 = :* (:* D8 D8) D6
type O1566 = :* (:* D8 D8) D6
type B1101110110 = :* (:* D8 D8) D6
type H375 = :* (:* D8 D8) D5
type D885 = :* (:* D8 D8) D5
type O1565 = :* (:* D8 D8) D5
type B1101110101 = :* (:* D8 D8) D5
type H374 = :* (:* D8 D8) D4
type D884 = :* (:* D8 D8) D4
type O1564 = :* (:* D8 D8) D4
type B1101110100 = :* (:* D8 D8) D4
type H373 = :* (:* D8 D8) D3
type D883 = :* (:* D8 D8) D3
type O1563 = :* (:* D8 D8) D3
type B1101110011 = :* (:* D8 D8) D3
type H372 = :* (:* D8 D8) D2
type D882 = :* (:* D8 D8) D2
type O1562 = :* (:* D8 D8) D2
type B1101110010 = :* (:* D8 D8) D2
type H371 = :* (:* D8 D8) D1
type D881 = :* (:* D8 D8) D1
type O1561 = :* (:* D8 D8) D1
type B1101110001 = :* (:* D8 D8) D1
type H370 = :* (:* D8 D8) D0
type D880 = :* (:* D8 D8) D0
type O1560 = :* (:* D8 D8) D0
type B1101110000 = :* (:* D8 D8) D0
type H36F = :* (:* D8 D7) D9
type D879 = :* (:* D8 D7) D9
type O1557 = :* (:* D8 D7) D9
type B1101101111 = :* (:* D8 D7) D9
type H36E = :* (:* D8 D7) D8
type D878 = :* (:* D8 D7) D8
type O1556 = :* (:* D8 D7) D8
type B1101101110 = :* (:* D8 D7) D8
type H36D = :* (:* D8 D7) D7
type D877 = :* (:* D8 D7) D7
type O1555 = :* (:* D8 D7) D7
type B1101101101 = :* (:* D8 D7) D7
type H36C = :* (:* D8 D7) D6
type D876 = :* (:* D8 D7) D6
type O1554 = :* (:* D8 D7) D6
type B1101101100 = :* (:* D8 D7) D6
type H36B = :* (:* D8 D7) D5
type D875 = :* (:* D8 D7) D5
type O1553 = :* (:* D8 D7) D5
type B1101101011 = :* (:* D8 D7) D5
type H36A = :* (:* D8 D7) D4
type D874 = :* (:* D8 D7) D4
type O1552 = :* (:* D8 D7) D4
type B1101101010 = :* (:* D8 D7) D4
type H369 = :* (:* D8 D7) D3
type D873 = :* (:* D8 D7) D3
type O1551 = :* (:* D8 D7) D3
type B1101101001 = :* (:* D8 D7) D3
type H368 = :* (:* D8 D7) D2
type D872 = :* (:* D8 D7) D2
type O1550 = :* (:* D8 D7) D2
type B1101101000 = :* (:* D8 D7) D2
type H367 = :* (:* D8 D7) D1
type D871 = :* (:* D8 D7) D1
type O1547 = :* (:* D8 D7) D1
type B1101100111 = :* (:* D8 D7) D1
type H366 = :* (:* D8 D7) D0
type D870 = :* (:* D8 D7) D0
type O1546 = :* (:* D8 D7) D0
type B1101100110 = :* (:* D8 D7) D0
type H365 = :* (:* D8 D6) D9
type D869 = :* (:* D8 D6) D9
type O1545 = :* (:* D8 D6) D9
type B1101100101 = :* (:* D8 D6) D9
type H364 = :* (:* D8 D6) D8
type D868 = :* (:* D8 D6) D8
type O1544 = :* (:* D8 D6) D8
type B1101100100 = :* (:* D8 D6) D8
type H363 = :* (:* D8 D6) D7
type D867 = :* (:* D8 D6) D7
type O1543 = :* (:* D8 D6) D7
type B1101100011 = :* (:* D8 D6) D7
type H362 = :* (:* D8 D6) D6
type D866 = :* (:* D8 D6) D6
type O1542 = :* (:* D8 D6) D6
type B1101100010 = :* (:* D8 D6) D6
type H361 = :* (:* D8 D6) D5
type D865 = :* (:* D8 D6) D5
type O1541 = :* (:* D8 D6) D5
type B1101100001 = :* (:* D8 D6) D5
type H360 = :* (:* D8 D6) D4
type D864 = :* (:* D8 D6) D4
type O1540 = :* (:* D8 D6) D4
type B1101100000 = :* (:* D8 D6) D4
type H35F = :* (:* D8 D6) D3
type D863 = :* (:* D8 D6) D3
type O1537 = :* (:* D8 D6) D3
type B1101011111 = :* (:* D8 D6) D3
type H35E = :* (:* D8 D6) D2
type D862 = :* (:* D8 D6) D2
type O1536 = :* (:* D8 D6) D2
type B1101011110 = :* (:* D8 D6) D2
type H35D = :* (:* D8 D6) D1
type D861 = :* (:* D8 D6) D1
type O1535 = :* (:* D8 D6) D1
type B1101011101 = :* (:* D8 D6) D1
type H35C = :* (:* D8 D6) D0
type D860 = :* (:* D8 D6) D0
type O1534 = :* (:* D8 D6) D0
type B1101011100 = :* (:* D8 D6) D0
type H35B = :* (:* D8 D5) D9
type D859 = :* (:* D8 D5) D9
type O1533 = :* (:* D8 D5) D9
type B1101011011 = :* (:* D8 D5) D9
type H35A = :* (:* D8 D5) D8
type D858 = :* (:* D8 D5) D8
type O1532 = :* (:* D8 D5) D8
type B1101011010 = :* (:* D8 D5) D8
type H359 = :* (:* D8 D5) D7
type D857 = :* (:* D8 D5) D7
type O1531 = :* (:* D8 D5) D7
type B1101011001 = :* (:* D8 D5) D7
type H358 = :* (:* D8 D5) D6
type D856 = :* (:* D8 D5) D6
type O1530 = :* (:* D8 D5) D6
type B1101011000 = :* (:* D8 D5) D6
type H357 = :* (:* D8 D5) D5
type D855 = :* (:* D8 D5) D5
type O1527 = :* (:* D8 D5) D5
type B1101010111 = :* (:* D8 D5) D5
type H356 = :* (:* D8 D5) D4
type D854 = :* (:* D8 D5) D4
type O1526 = :* (:* D8 D5) D4
type B1101010110 = :* (:* D8 D5) D4
type H355 = :* (:* D8 D5) D3
type D853 = :* (:* D8 D5) D3
type O1525 = :* (:* D8 D5) D3
type B1101010101 = :* (:* D8 D5) D3
type H354 = :* (:* D8 D5) D2
type D852 = :* (:* D8 D5) D2
type O1524 = :* (:* D8 D5) D2
type B1101010100 = :* (:* D8 D5) D2
type H353 = :* (:* D8 D5) D1
type D851 = :* (:* D8 D5) D1
type O1523 = :* (:* D8 D5) D1
type B1101010011 = :* (:* D8 D5) D1
type H352 = :* (:* D8 D5) D0
type D850 = :* (:* D8 D5) D0
type O1522 = :* (:* D8 D5) D0
type B1101010010 = :* (:* D8 D5) D0
type H351 = :* (:* D8 D4) D9
type D849 = :* (:* D8 D4) D9
type O1521 = :* (:* D8 D4) D9
type B1101010001 = :* (:* D8 D4) D9
type H350 = :* (:* D8 D4) D8
type D848 = :* (:* D8 D4) D8
type O1520 = :* (:* D8 D4) D8
type B1101010000 = :* (:* D8 D4) D8
type H34F = :* (:* D8 D4) D7
type D847 = :* (:* D8 D4) D7
type O1517 = :* (:* D8 D4) D7
type B1101001111 = :* (:* D8 D4) D7
type H34E = :* (:* D8 D4) D6
type D846 = :* (:* D8 D4) D6
type O1516 = :* (:* D8 D4) D6
type B1101001110 = :* (:* D8 D4) D6
type H34D = :* (:* D8 D4) D5
type D845 = :* (:* D8 D4) D5
type O1515 = :* (:* D8 D4) D5
type B1101001101 = :* (:* D8 D4) D5
type H34C = :* (:* D8 D4) D4
type D844 = :* (:* D8 D4) D4
type O1514 = :* (:* D8 D4) D4
type B1101001100 = :* (:* D8 D4) D4
type H34B = :* (:* D8 D4) D3
type D843 = :* (:* D8 D4) D3
type O1513 = :* (:* D8 D4) D3
type B1101001011 = :* (:* D8 D4) D3
type H34A = :* (:* D8 D4) D2
type D842 = :* (:* D8 D4) D2
type O1512 = :* (:* D8 D4) D2
type B1101001010 = :* (:* D8 D4) D2
type H349 = :* (:* D8 D4) D1
type D841 = :* (:* D8 D4) D1
type O1511 = :* (:* D8 D4) D1
type B1101001001 = :* (:* D8 D4) D1
type H348 = :* (:* D8 D4) D0
type D840 = :* (:* D8 D4) D0
type O1510 = :* (:* D8 D4) D0
type B1101001000 = :* (:* D8 D4) D0
type H347 = :* (:* D8 D3) D9
type D839 = :* (:* D8 D3) D9
type O1507 = :* (:* D8 D3) D9
type B1101000111 = :* (:* D8 D3) D9
type H346 = :* (:* D8 D3) D8
type D838 = :* (:* D8 D3) D8
type O1506 = :* (:* D8 D3) D8
type B1101000110 = :* (:* D8 D3) D8
type H345 = :* (:* D8 D3) D7
type D837 = :* (:* D8 D3) D7
type O1505 = :* (:* D8 D3) D7
type B1101000101 = :* (:* D8 D3) D7
type H344 = :* (:* D8 D3) D6
type D836 = :* (:* D8 D3) D6
type O1504 = :* (:* D8 D3) D6
type B1101000100 = :* (:* D8 D3) D6
type H343 = :* (:* D8 D3) D5
type D835 = :* (:* D8 D3) D5
type O1503 = :* (:* D8 D3) D5
type B1101000011 = :* (:* D8 D3) D5
type H342 = :* (:* D8 D3) D4
type D834 = :* (:* D8 D3) D4
type O1502 = :* (:* D8 D3) D4
type B1101000010 = :* (:* D8 D3) D4
type H341 = :* (:* D8 D3) D3
type D833 = :* (:* D8 D3) D3
type O1501 = :* (:* D8 D3) D3
type B1101000001 = :* (:* D8 D3) D3
type H340 = :* (:* D8 D3) D2
type D832 = :* (:* D8 D3) D2
type O1500 = :* (:* D8 D3) D2
type B1101000000 = :* (:* D8 D3) D2
type H33F = :* (:* D8 D3) D1
type D831 = :* (:* D8 D3) D1
type O1477 = :* (:* D8 D3) D1
type B1100111111 = :* (:* D8 D3) D1
type H33E = :* (:* D8 D3) D0
type D830 = :* (:* D8 D3) D0
type O1476 = :* (:* D8 D3) D0
type B1100111110 = :* (:* D8 D3) D0
type H33D = :* (:* D8 D2) D9
type D829 = :* (:* D8 D2) D9
type O1475 = :* (:* D8 D2) D9
type B1100111101 = :* (:* D8 D2) D9
type H33C = :* (:* D8 D2) D8
type D828 = :* (:* D8 D2) D8
type O1474 = :* (:* D8 D2) D8
type B1100111100 = :* (:* D8 D2) D8
type H33B = :* (:* D8 D2) D7
type D827 = :* (:* D8 D2) D7
type O1473 = :* (:* D8 D2) D7
type B1100111011 = :* (:* D8 D2) D7
type H33A = :* (:* D8 D2) D6
type D826 = :* (:* D8 D2) D6
type O1472 = :* (:* D8 D2) D6
type B1100111010 = :* (:* D8 D2) D6
type H339 = :* (:* D8 D2) D5
type D825 = :* (:* D8 D2) D5
type O1471 = :* (:* D8 D2) D5
type B1100111001 = :* (:* D8 D2) D5
type H338 = :* (:* D8 D2) D4
type D824 = :* (:* D8 D2) D4
type O1470 = :* (:* D8 D2) D4
type B1100111000 = :* (:* D8 D2) D4
type H337 = :* (:* D8 D2) D3
type D823 = :* (:* D8 D2) D3
type O1467 = :* (:* D8 D2) D3
type B1100110111 = :* (:* D8 D2) D3
type H336 = :* (:* D8 D2) D2
type D822 = :* (:* D8 D2) D2
type O1466 = :* (:* D8 D2) D2
type B1100110110 = :* (:* D8 D2) D2
type H335 = :* (:* D8 D2) D1
type D821 = :* (:* D8 D2) D1
type O1465 = :* (:* D8 D2) D1
type B1100110101 = :* (:* D8 D2) D1
type H334 = :* (:* D8 D2) D0
type D820 = :* (:* D8 D2) D0
type O1464 = :* (:* D8 D2) D0
type B1100110100 = :* (:* D8 D2) D0
type H333 = :* (:* D8 D1) D9
type D819 = :* (:* D8 D1) D9
type O1463 = :* (:* D8 D1) D9
type B1100110011 = :* (:* D8 D1) D9
type H332 = :* (:* D8 D1) D8
type D818 = :* (:* D8 D1) D8
type O1462 = :* (:* D8 D1) D8
type B1100110010 = :* (:* D8 D1) D8
type H331 = :* (:* D8 D1) D7
type D817 = :* (:* D8 D1) D7
type O1461 = :* (:* D8 D1) D7
type B1100110001 = :* (:* D8 D1) D7
type H330 = :* (:* D8 D1) D6
type D816 = :* (:* D8 D1) D6
type O1460 = :* (:* D8 D1) D6
type B1100110000 = :* (:* D8 D1) D6
type H32F = :* (:* D8 D1) D5
type D815 = :* (:* D8 D1) D5
type O1457 = :* (:* D8 D1) D5
type B1100101111 = :* (:* D8 D1) D5
type H32E = :* (:* D8 D1) D4
type D814 = :* (:* D8 D1) D4
type O1456 = :* (:* D8 D1) D4
type B1100101110 = :* (:* D8 D1) D4
type H32D = :* (:* D8 D1) D3
type D813 = :* (:* D8 D1) D3
type O1455 = :* (:* D8 D1) D3
type B1100101101 = :* (:* D8 D1) D3
type H32C = :* (:* D8 D1) D2
type D812 = :* (:* D8 D1) D2
type O1454 = :* (:* D8 D1) D2
type B1100101100 = :* (:* D8 D1) D2
type H32B = :* (:* D8 D1) D1
type D811 = :* (:* D8 D1) D1
type O1453 = :* (:* D8 D1) D1
type B1100101011 = :* (:* D8 D1) D1
type H32A = :* (:* D8 D1) D0
type D810 = :* (:* D8 D1) D0
type O1452 = :* (:* D8 D1) D0
type B1100101010 = :* (:* D8 D1) D0
type H329 = :* (:* D8 D0) D9
type D809 = :* (:* D8 D0) D9
type O1451 = :* (:* D8 D0) D9
type B1100101001 = :* (:* D8 D0) D9
type H328 = :* (:* D8 D0) D8
type D808 = :* (:* D8 D0) D8
type O1450 = :* (:* D8 D0) D8
type B1100101000 = :* (:* D8 D0) D8
type H327 = :* (:* D8 D0) D7
type D807 = :* (:* D8 D0) D7
type O1447 = :* (:* D8 D0) D7
type B1100100111 = :* (:* D8 D0) D7
type H326 = :* (:* D8 D0) D6
type D806 = :* (:* D8 D0) D6
type O1446 = :* (:* D8 D0) D6
type B1100100110 = :* (:* D8 D0) D6
type H325 = :* (:* D8 D0) D5
type D805 = :* (:* D8 D0) D5
type O1445 = :* (:* D8 D0) D5
type B1100100101 = :* (:* D8 D0) D5
type H324 = :* (:* D8 D0) D4
type D804 = :* (:* D8 D0) D4
type O1444 = :* (:* D8 D0) D4
type B1100100100 = :* (:* D8 D0) D4
type H323 = :* (:* D8 D0) D3
type D803 = :* (:* D8 D0) D3
type O1443 = :* (:* D8 D0) D3
type B1100100011 = :* (:* D8 D0) D3
type H322 = :* (:* D8 D0) D2
type D802 = :* (:* D8 D0) D2
type O1442 = :* (:* D8 D0) D2
type B1100100010 = :* (:* D8 D0) D2
type H321 = :* (:* D8 D0) D1
type D801 = :* (:* D8 D0) D1
type O1441 = :* (:* D8 D0) D1
type B1100100001 = :* (:* D8 D0) D1
type H320 = :* (:* D8 D0) D0
type D800 = :* (:* D8 D0) D0
type O1440 = :* (:* D8 D0) D0
type B1100100000 = :* (:* D8 D0) D0
type H31F = :* (:* D7 D9) D9
type D799 = :* (:* D7 D9) D9
type O1437 = :* (:* D7 D9) D9
type B1100011111 = :* (:* D7 D9) D9
type H31E = :* (:* D7 D9) D8
type D798 = :* (:* D7 D9) D8
type O1436 = :* (:* D7 D9) D8
type B1100011110 = :* (:* D7 D9) D8
type H31D = :* (:* D7 D9) D7
type D797 = :* (:* D7 D9) D7
type O1435 = :* (:* D7 D9) D7
type B1100011101 = :* (:* D7 D9) D7
type H31C = :* (:* D7 D9) D6
type D796 = :* (:* D7 D9) D6
type O1434 = :* (:* D7 D9) D6
type B1100011100 = :* (:* D7 D9) D6
type H31B = :* (:* D7 D9) D5
type D795 = :* (:* D7 D9) D5
type O1433 = :* (:* D7 D9) D5
type B1100011011 = :* (:* D7 D9) D5
type H31A = :* (:* D7 D9) D4
type D794 = :* (:* D7 D9) D4
type O1432 = :* (:* D7 D9) D4
type B1100011010 = :* (:* D7 D9) D4
type H319 = :* (:* D7 D9) D3
type D793 = :* (:* D7 D9) D3
type O1431 = :* (:* D7 D9) D3
type B1100011001 = :* (:* D7 D9) D3
type H318 = :* (:* D7 D9) D2
type D792 = :* (:* D7 D9) D2
type O1430 = :* (:* D7 D9) D2
type B1100011000 = :* (:* D7 D9) D2
type H317 = :* (:* D7 D9) D1
type D791 = :* (:* D7 D9) D1
type O1427 = :* (:* D7 D9) D1
type B1100010111 = :* (:* D7 D9) D1
type H316 = :* (:* D7 D9) D0
type D790 = :* (:* D7 D9) D0
type O1426 = :* (:* D7 D9) D0
type B1100010110 = :* (:* D7 D9) D0
type H315 = :* (:* D7 D8) D9
type D789 = :* (:* D7 D8) D9
type O1425 = :* (:* D7 D8) D9
type B1100010101 = :* (:* D7 D8) D9
type H314 = :* (:* D7 D8) D8
type D788 = :* (:* D7 D8) D8
type O1424 = :* (:* D7 D8) D8
type B1100010100 = :* (:* D7 D8) D8
type H313 = :* (:* D7 D8) D7
type D787 = :* (:* D7 D8) D7
type O1423 = :* (:* D7 D8) D7
type B1100010011 = :* (:* D7 D8) D7
type H312 = :* (:* D7 D8) D6
type D786 = :* (:* D7 D8) D6
type O1422 = :* (:* D7 D8) D6
type B1100010010 = :* (:* D7 D8) D6
type H311 = :* (:* D7 D8) D5
type D785 = :* (:* D7 D8) D5
type O1421 = :* (:* D7 D8) D5
type B1100010001 = :* (:* D7 D8) D5
type H310 = :* (:* D7 D8) D4
type D784 = :* (:* D7 D8) D4
type O1420 = :* (:* D7 D8) D4
type B1100010000 = :* (:* D7 D8) D4
type H30F = :* (:* D7 D8) D3
type D783 = :* (:* D7 D8) D3
type O1417 = :* (:* D7 D8) D3
type B1100001111 = :* (:* D7 D8) D3
type H30E = :* (:* D7 D8) D2
type D782 = :* (:* D7 D8) D2
type O1416 = :* (:* D7 D8) D2
type B1100001110 = :* (:* D7 D8) D2
type H30D = :* (:* D7 D8) D1
type D781 = :* (:* D7 D8) D1
type O1415 = :* (:* D7 D8) D1
type B1100001101 = :* (:* D7 D8) D1
type H30C = :* (:* D7 D8) D0
type D780 = :* (:* D7 D8) D0
type O1414 = :* (:* D7 D8) D0
type B1100001100 = :* (:* D7 D8) D0
type H30B = :* (:* D7 D7) D9
type D779 = :* (:* D7 D7) D9
type O1413 = :* (:* D7 D7) D9
type B1100001011 = :* (:* D7 D7) D9
type H30A = :* (:* D7 D7) D8
type D778 = :* (:* D7 D7) D8
type O1412 = :* (:* D7 D7) D8
type B1100001010 = :* (:* D7 D7) D8
type H309 = :* (:* D7 D7) D7
type D777 = :* (:* D7 D7) D7
type O1411 = :* (:* D7 D7) D7
type B1100001001 = :* (:* D7 D7) D7
type H308 = :* (:* D7 D7) D6
type D776 = :* (:* D7 D7) D6
type O1410 = :* (:* D7 D7) D6
type B1100001000 = :* (:* D7 D7) D6
type H307 = :* (:* D7 D7) D5
type D775 = :* (:* D7 D7) D5
type O1407 = :* (:* D7 D7) D5
type B1100000111 = :* (:* D7 D7) D5
type H306 = :* (:* D7 D7) D4
type D774 = :* (:* D7 D7) D4
type O1406 = :* (:* D7 D7) D4
type B1100000110 = :* (:* D7 D7) D4
type H305 = :* (:* D7 D7) D3
type D773 = :* (:* D7 D7) D3
type O1405 = :* (:* D7 D7) D3
type B1100000101 = :* (:* D7 D7) D3
type H304 = :* (:* D7 D7) D2
type D772 = :* (:* D7 D7) D2
type O1404 = :* (:* D7 D7) D2
type B1100000100 = :* (:* D7 D7) D2
type H303 = :* (:* D7 D7) D1
type D771 = :* (:* D7 D7) D1
type O1403 = :* (:* D7 D7) D1
type B1100000011 = :* (:* D7 D7) D1
type H302 = :* (:* D7 D7) D0
type D770 = :* (:* D7 D7) D0
type O1402 = :* (:* D7 D7) D0
type B1100000010 = :* (:* D7 D7) D0
type H301 = :* (:* D7 D6) D9
type D769 = :* (:* D7 D6) D9
type O1401 = :* (:* D7 D6) D9
type B1100000001 = :* (:* D7 D6) D9
type H300 = :* (:* D7 D6) D8
type D768 = :* (:* D7 D6) D8
type O1400 = :* (:* D7 D6) D8
type B1100000000 = :* (:* D7 D6) D8
type H2FF = :* (:* D7 D6) D7
type D767 = :* (:* D7 D6) D7
type O1377 = :* (:* D7 D6) D7
type B1011111111 = :* (:* D7 D6) D7
type H2FE = :* (:* D7 D6) D6
type D766 = :* (:* D7 D6) D6
type O1376 = :* (:* D7 D6) D6
type B1011111110 = :* (:* D7 D6) D6
type H2FD = :* (:* D7 D6) D5
type D765 = :* (:* D7 D6) D5
type O1375 = :* (:* D7 D6) D5
type B1011111101 = :* (:* D7 D6) D5
type H2FC = :* (:* D7 D6) D4
type D764 = :* (:* D7 D6) D4
type O1374 = :* (:* D7 D6) D4
type B1011111100 = :* (:* D7 D6) D4
type H2FB = :* (:* D7 D6) D3
type D763 = :* (:* D7 D6) D3
type O1373 = :* (:* D7 D6) D3
type B1011111011 = :* (:* D7 D6) D3
type H2FA = :* (:* D7 D6) D2
type D762 = :* (:* D7 D6) D2
type O1372 = :* (:* D7 D6) D2
type B1011111010 = :* (:* D7 D6) D2
type H2F9 = :* (:* D7 D6) D1
type D761 = :* (:* D7 D6) D1
type O1371 = :* (:* D7 D6) D1
type B1011111001 = :* (:* D7 D6) D1
type H2F8 = :* (:* D7 D6) D0
type D760 = :* (:* D7 D6) D0
type O1370 = :* (:* D7 D6) D0
type B1011111000 = :* (:* D7 D6) D0
type H2F7 = :* (:* D7 D5) D9
type D759 = :* (:* D7 D5) D9
type O1367 = :* (:* D7 D5) D9
type B1011110111 = :* (:* D7 D5) D9
type H2F6 = :* (:* D7 D5) D8
type D758 = :* (:* D7 D5) D8
type O1366 = :* (:* D7 D5) D8
type B1011110110 = :* (:* D7 D5) D8
type H2F5 = :* (:* D7 D5) D7
type D757 = :* (:* D7 D5) D7
type O1365 = :* (:* D7 D5) D7
type B1011110101 = :* (:* D7 D5) D7
type H2F4 = :* (:* D7 D5) D6
type D756 = :* (:* D7 D5) D6
type O1364 = :* (:* D7 D5) D6
type B1011110100 = :* (:* D7 D5) D6
type H2F3 = :* (:* D7 D5) D5
type D755 = :* (:* D7 D5) D5
type O1363 = :* (:* D7 D5) D5
type B1011110011 = :* (:* D7 D5) D5
type H2F2 = :* (:* D7 D5) D4
type D754 = :* (:* D7 D5) D4
type O1362 = :* (:* D7 D5) D4
type B1011110010 = :* (:* D7 D5) D4
type H2F1 = :* (:* D7 D5) D3
type D753 = :* (:* D7 D5) D3
type O1361 = :* (:* D7 D5) D3
type B1011110001 = :* (:* D7 D5) D3
type H2F0 = :* (:* D7 D5) D2
type D752 = :* (:* D7 D5) D2
type O1360 = :* (:* D7 D5) D2
type B1011110000 = :* (:* D7 D5) D2
type H2EF = :* (:* D7 D5) D1
type D751 = :* (:* D7 D5) D1
type O1357 = :* (:* D7 D5) D1
type B1011101111 = :* (:* D7 D5) D1
type H2EE = :* (:* D7 D5) D0
type D750 = :* (:* D7 D5) D0
type O1356 = :* (:* D7 D5) D0
type B1011101110 = :* (:* D7 D5) D0
type H2ED = :* (:* D7 D4) D9
type D749 = :* (:* D7 D4) D9
type O1355 = :* (:* D7 D4) D9
type B1011101101 = :* (:* D7 D4) D9
type H2EC = :* (:* D7 D4) D8
type D748 = :* (:* D7 D4) D8
type O1354 = :* (:* D7 D4) D8
type B1011101100 = :* (:* D7 D4) D8
type H2EB = :* (:* D7 D4) D7
type D747 = :* (:* D7 D4) D7
type O1353 = :* (:* D7 D4) D7
type B1011101011 = :* (:* D7 D4) D7
type H2EA = :* (:* D7 D4) D6
type D746 = :* (:* D7 D4) D6
type O1352 = :* (:* D7 D4) D6
type B1011101010 = :* (:* D7 D4) D6
type H2E9 = :* (:* D7 D4) D5
type D745 = :* (:* D7 D4) D5
type O1351 = :* (:* D7 D4) D5
type B1011101001 = :* (:* D7 D4) D5
type H2E8 = :* (:* D7 D4) D4
type D744 = :* (:* D7 D4) D4
type O1350 = :* (:* D7 D4) D4
type B1011101000 = :* (:* D7 D4) D4
type H2E7 = :* (:* D7 D4) D3
type D743 = :* (:* D7 D4) D3
type O1347 = :* (:* D7 D4) D3
type B1011100111 = :* (:* D7 D4) D3
type H2E6 = :* (:* D7 D4) D2
type D742 = :* (:* D7 D4) D2
type O1346 = :* (:* D7 D4) D2
type B1011100110 = :* (:* D7 D4) D2
type H2E5 = :* (:* D7 D4) D1
type D741 = :* (:* D7 D4) D1
type O1345 = :* (:* D7 D4) D1
type B1011100101 = :* (:* D7 D4) D1
type H2E4 = :* (:* D7 D4) D0
type D740 = :* (:* D7 D4) D0
type O1344 = :* (:* D7 D4) D0
type B1011100100 = :* (:* D7 D4) D0
type H2E3 = :* (:* D7 D3) D9
type D739 = :* (:* D7 D3) D9
type O1343 = :* (:* D7 D3) D9
type B1011100011 = :* (:* D7 D3) D9
type H2E2 = :* (:* D7 D3) D8
type D738 = :* (:* D7 D3) D8
type O1342 = :* (:* D7 D3) D8
type B1011100010 = :* (:* D7 D3) D8
type H2E1 = :* (:* D7 D3) D7
type D737 = :* (:* D7 D3) D7
type O1341 = :* (:* D7 D3) D7
type B1011100001 = :* (:* D7 D3) D7
type H2E0 = :* (:* D7 D3) D6
type D736 = :* (:* D7 D3) D6
type O1340 = :* (:* D7 D3) D6
type B1011100000 = :* (:* D7 D3) D6
type H2DF = :* (:* D7 D3) D5
type D735 = :* (:* D7 D3) D5
type O1337 = :* (:* D7 D3) D5
type B1011011111 = :* (:* D7 D3) D5
type H2DE = :* (:* D7 D3) D4
type D734 = :* (:* D7 D3) D4
type O1336 = :* (:* D7 D3) D4
type B1011011110 = :* (:* D7 D3) D4
type H2DD = :* (:* D7 D3) D3
type D733 = :* (:* D7 D3) D3
type O1335 = :* (:* D7 D3) D3
type B1011011101 = :* (:* D7 D3) D3
type H2DC = :* (:* D7 D3) D2
type D732 = :* (:* D7 D3) D2
type O1334 = :* (:* D7 D3) D2
type B1011011100 = :* (:* D7 D3) D2
type H2DB = :* (:* D7 D3) D1
type D731 = :* (:* D7 D3) D1
type O1333 = :* (:* D7 D3) D1
type B1011011011 = :* (:* D7 D3) D1
type H2DA = :* (:* D7 D3) D0
type D730 = :* (:* D7 D3) D0
type O1332 = :* (:* D7 D3) D0
type B1011011010 = :* (:* D7 D3) D0
type H2D9 = :* (:* D7 D2) D9
type D729 = :* (:* D7 D2) D9
type O1331 = :* (:* D7 D2) D9
type B1011011001 = :* (:* D7 D2) D9
type H2D8 = :* (:* D7 D2) D8
type D728 = :* (:* D7 D2) D8
type O1330 = :* (:* D7 D2) D8
type B1011011000 = :* (:* D7 D2) D8
type H2D7 = :* (:* D7 D2) D7
type D727 = :* (:* D7 D2) D7
type O1327 = :* (:* D7 D2) D7
type B1011010111 = :* (:* D7 D2) D7
type H2D6 = :* (:* D7 D2) D6
type D726 = :* (:* D7 D2) D6
type O1326 = :* (:* D7 D2) D6
type B1011010110 = :* (:* D7 D2) D6
type H2D5 = :* (:* D7 D2) D5
type D725 = :* (:* D7 D2) D5
type O1325 = :* (:* D7 D2) D5
type B1011010101 = :* (:* D7 D2) D5
type H2D4 = :* (:* D7 D2) D4
type D724 = :* (:* D7 D2) D4
type O1324 = :* (:* D7 D2) D4
type B1011010100 = :* (:* D7 D2) D4
type H2D3 = :* (:* D7 D2) D3
type D723 = :* (:* D7 D2) D3
type O1323 = :* (:* D7 D2) D3
type B1011010011 = :* (:* D7 D2) D3
type H2D2 = :* (:* D7 D2) D2
type D722 = :* (:* D7 D2) D2
type O1322 = :* (:* D7 D2) D2
type B1011010010 = :* (:* D7 D2) D2
type H2D1 = :* (:* D7 D2) D1
type D721 = :* (:* D7 D2) D1
type O1321 = :* (:* D7 D2) D1
type B1011010001 = :* (:* D7 D2) D1
type H2D0 = :* (:* D7 D2) D0
type D720 = :* (:* D7 D2) D0
type O1320 = :* (:* D7 D2) D0
type B1011010000 = :* (:* D7 D2) D0
type H2CF = :* (:* D7 D1) D9
type D719 = :* (:* D7 D1) D9
type O1317 = :* (:* D7 D1) D9
type B1011001111 = :* (:* D7 D1) D9
type H2CE = :* (:* D7 D1) D8
type D718 = :* (:* D7 D1) D8
type O1316 = :* (:* D7 D1) D8
type B1011001110 = :* (:* D7 D1) D8
type H2CD = :* (:* D7 D1) D7
type D717 = :* (:* D7 D1) D7
type O1315 = :* (:* D7 D1) D7
type B1011001101 = :* (:* D7 D1) D7
type H2CC = :* (:* D7 D1) D6
type D716 = :* (:* D7 D1) D6
type O1314 = :* (:* D7 D1) D6
type B1011001100 = :* (:* D7 D1) D6
type H2CB = :* (:* D7 D1) D5
type D715 = :* (:* D7 D1) D5
type O1313 = :* (:* D7 D1) D5
type B1011001011 = :* (:* D7 D1) D5
type H2CA = :* (:* D7 D1) D4
type D714 = :* (:* D7 D1) D4
type O1312 = :* (:* D7 D1) D4
type B1011001010 = :* (:* D7 D1) D4
type H2C9 = :* (:* D7 D1) D3
type D713 = :* (:* D7 D1) D3
type O1311 = :* (:* D7 D1) D3
type B1011001001 = :* (:* D7 D1) D3
type H2C8 = :* (:* D7 D1) D2
type D712 = :* (:* D7 D1) D2
type O1310 = :* (:* D7 D1) D2
type B1011001000 = :* (:* D7 D1) D2
type H2C7 = :* (:* D7 D1) D1
type D711 = :* (:* D7 D1) D1
type O1307 = :* (:* D7 D1) D1
type B1011000111 = :* (:* D7 D1) D1
type H2C6 = :* (:* D7 D1) D0
type D710 = :* (:* D7 D1) D0
type O1306 = :* (:* D7 D1) D0
type B1011000110 = :* (:* D7 D1) D0
type H2C5 = :* (:* D7 D0) D9
type D709 = :* (:* D7 D0) D9
type O1305 = :* (:* D7 D0) D9
type B1011000101 = :* (:* D7 D0) D9
type H2C4 = :* (:* D7 D0) D8
type D708 = :* (:* D7 D0) D8
type O1304 = :* (:* D7 D0) D8
type B1011000100 = :* (:* D7 D0) D8
type H2C3 = :* (:* D7 D0) D7
type D707 = :* (:* D7 D0) D7
type O1303 = :* (:* D7 D0) D7
type B1011000011 = :* (:* D7 D0) D7
type H2C2 = :* (:* D7 D0) D6
type D706 = :* (:* D7 D0) D6
type O1302 = :* (:* D7 D0) D6
type B1011000010 = :* (:* D7 D0) D6
type H2C1 = :* (:* D7 D0) D5
type D705 = :* (:* D7 D0) D5
type O1301 = :* (:* D7 D0) D5
type B1011000001 = :* (:* D7 D0) D5
type H2C0 = :* (:* D7 D0) D4
type D704 = :* (:* D7 D0) D4
type O1300 = :* (:* D7 D0) D4
type B1011000000 = :* (:* D7 D0) D4
type H2BF = :* (:* D7 D0) D3
type D703 = :* (:* D7 D0) D3
type O1277 = :* (:* D7 D0) D3
type B1010111111 = :* (:* D7 D0) D3
type H2BE = :* (:* D7 D0) D2
type D702 = :* (:* D7 D0) D2
type O1276 = :* (:* D7 D0) D2
type B1010111110 = :* (:* D7 D0) D2
type H2BD = :* (:* D7 D0) D1
type D701 = :* (:* D7 D0) D1
type O1275 = :* (:* D7 D0) D1
type B1010111101 = :* (:* D7 D0) D1
type H2BC = :* (:* D7 D0) D0
type D700 = :* (:* D7 D0) D0
type O1274 = :* (:* D7 D0) D0
type B1010111100 = :* (:* D7 D0) D0
type H2BB = :* (:* D6 D9) D9
type D699 = :* (:* D6 D9) D9
type O1273 = :* (:* D6 D9) D9
type B1010111011 = :* (:* D6 D9) D9
type H2BA = :* (:* D6 D9) D8
type D698 = :* (:* D6 D9) D8
type O1272 = :* (:* D6 D9) D8
type B1010111010 = :* (:* D6 D9) D8
type H2B9 = :* (:* D6 D9) D7
type D697 = :* (:* D6 D9) D7
type O1271 = :* (:* D6 D9) D7
type B1010111001 = :* (:* D6 D9) D7
type H2B8 = :* (:* D6 D9) D6
type D696 = :* (:* D6 D9) D6
type O1270 = :* (:* D6 D9) D6
type B1010111000 = :* (:* D6 D9) D6
type H2B7 = :* (:* D6 D9) D5
type D695 = :* (:* D6 D9) D5
type O1267 = :* (:* D6 D9) D5
type B1010110111 = :* (:* D6 D9) D5
type H2B6 = :* (:* D6 D9) D4
type D694 = :* (:* D6 D9) D4
type O1266 = :* (:* D6 D9) D4
type B1010110110 = :* (:* D6 D9) D4
type H2B5 = :* (:* D6 D9) D3
type D693 = :* (:* D6 D9) D3
type O1265 = :* (:* D6 D9) D3
type B1010110101 = :* (:* D6 D9) D3
type H2B4 = :* (:* D6 D9) D2
type D692 = :* (:* D6 D9) D2
type O1264 = :* (:* D6 D9) D2
type B1010110100 = :* (:* D6 D9) D2
type H2B3 = :* (:* D6 D9) D1
type D691 = :* (:* D6 D9) D1
type O1263 = :* (:* D6 D9) D1
type B1010110011 = :* (:* D6 D9) D1
type H2B2 = :* (:* D6 D9) D0
type D690 = :* (:* D6 D9) D0
type O1262 = :* (:* D6 D9) D0
type B1010110010 = :* (:* D6 D9) D0
type H2B1 = :* (:* D6 D8) D9
type D689 = :* (:* D6 D8) D9
type O1261 = :* (:* D6 D8) D9
type B1010110001 = :* (:* D6 D8) D9
type H2B0 = :* (:* D6 D8) D8
type D688 = :* (:* D6 D8) D8
type O1260 = :* (:* D6 D8) D8
type B1010110000 = :* (:* D6 D8) D8
type H2AF = :* (:* D6 D8) D7
type D687 = :* (:* D6 D8) D7
type O1257 = :* (:* D6 D8) D7
type B1010101111 = :* (:* D6 D8) D7
type H2AE = :* (:* D6 D8) D6
type D686 = :* (:* D6 D8) D6
type O1256 = :* (:* D6 D8) D6
type B1010101110 = :* (:* D6 D8) D6
type H2AD = :* (:* D6 D8) D5
type D685 = :* (:* D6 D8) D5
type O1255 = :* (:* D6 D8) D5
type B1010101101 = :* (:* D6 D8) D5
type H2AC = :* (:* D6 D8) D4
type D684 = :* (:* D6 D8) D4
type O1254 = :* (:* D6 D8) D4
type B1010101100 = :* (:* D6 D8) D4
type H2AB = :* (:* D6 D8) D3
type D683 = :* (:* D6 D8) D3
type O1253 = :* (:* D6 D8) D3
type B1010101011 = :* (:* D6 D8) D3
type H2AA = :* (:* D6 D8) D2
type D682 = :* (:* D6 D8) D2
type O1252 = :* (:* D6 D8) D2
type B1010101010 = :* (:* D6 D8) D2
type H2A9 = :* (:* D6 D8) D1
type D681 = :* (:* D6 D8) D1
type O1251 = :* (:* D6 D8) D1
type B1010101001 = :* (:* D6 D8) D1
type H2A8 = :* (:* D6 D8) D0
type D680 = :* (:* D6 D8) D0
type O1250 = :* (:* D6 D8) D0
type B1010101000 = :* (:* D6 D8) D0
type H2A7 = :* (:* D6 D7) D9
type D679 = :* (:* D6 D7) D9
type O1247 = :* (:* D6 D7) D9
type B1010100111 = :* (:* D6 D7) D9
type H2A6 = :* (:* D6 D7) D8
type D678 = :* (:* D6 D7) D8
type O1246 = :* (:* D6 D7) D8
type B1010100110 = :* (:* D6 D7) D8
type H2A5 = :* (:* D6 D7) D7
type D677 = :* (:* D6 D7) D7
type O1245 = :* (:* D6 D7) D7
type B1010100101 = :* (:* D6 D7) D7
type H2A4 = :* (:* D6 D7) D6
type D676 = :* (:* D6 D7) D6
type O1244 = :* (:* D6 D7) D6
type B1010100100 = :* (:* D6 D7) D6
type H2A3 = :* (:* D6 D7) D5
type D675 = :* (:* D6 D7) D5
type O1243 = :* (:* D6 D7) D5
type B1010100011 = :* (:* D6 D7) D5
type H2A2 = :* (:* D6 D7) D4
type D674 = :* (:* D6 D7) D4
type O1242 = :* (:* D6 D7) D4
type B1010100010 = :* (:* D6 D7) D4
type H2A1 = :* (:* D6 D7) D3
type D673 = :* (:* D6 D7) D3
type O1241 = :* (:* D6 D7) D3
type B1010100001 = :* (:* D6 D7) D3
type H2A0 = :* (:* D6 D7) D2
type D672 = :* (:* D6 D7) D2
type O1240 = :* (:* D6 D7) D2
type B1010100000 = :* (:* D6 D7) D2
type H29F = :* (:* D6 D7) D1
type D671 = :* (:* D6 D7) D1
type O1237 = :* (:* D6 D7) D1
type B1010011111 = :* (:* D6 D7) D1
type H29E = :* (:* D6 D7) D0
type D670 = :* (:* D6 D7) D0
type O1236 = :* (:* D6 D7) D0
type B1010011110 = :* (:* D6 D7) D0
type H29D = :* (:* D6 D6) D9
type D669 = :* (:* D6 D6) D9
type O1235 = :* (:* D6 D6) D9
type B1010011101 = :* (:* D6 D6) D9
type H29C = :* (:* D6 D6) D8
type D668 = :* (:* D6 D6) D8
type O1234 = :* (:* D6 D6) D8
type B1010011100 = :* (:* D6 D6) D8
type H29B = :* (:* D6 D6) D7
type D667 = :* (:* D6 D6) D7
type O1233 = :* (:* D6 D6) D7
type B1010011011 = :* (:* D6 D6) D7
type H29A = :* (:* D6 D6) D6
type D666 = :* (:* D6 D6) D6
type O1232 = :* (:* D6 D6) D6
type B1010011010 = :* (:* D6 D6) D6
type H299 = :* (:* D6 D6) D5
type D665 = :* (:* D6 D6) D5
type O1231 = :* (:* D6 D6) D5
type B1010011001 = :* (:* D6 D6) D5
type H298 = :* (:* D6 D6) D4
type D664 = :* (:* D6 D6) D4
type O1230 = :* (:* D6 D6) D4
type B1010011000 = :* (:* D6 D6) D4
type H297 = :* (:* D6 D6) D3
type D663 = :* (:* D6 D6) D3
type O1227 = :* (:* D6 D6) D3
type B1010010111 = :* (:* D6 D6) D3
type H296 = :* (:* D6 D6) D2
type D662 = :* (:* D6 D6) D2
type O1226 = :* (:* D6 D6) D2
type B1010010110 = :* (:* D6 D6) D2
type H295 = :* (:* D6 D6) D1
type D661 = :* (:* D6 D6) D1
type O1225 = :* (:* D6 D6) D1
type B1010010101 = :* (:* D6 D6) D1
type H294 = :* (:* D6 D6) D0
type D660 = :* (:* D6 D6) D0
type O1224 = :* (:* D6 D6) D0
type B1010010100 = :* (:* D6 D6) D0
type H293 = :* (:* D6 D5) D9
type D659 = :* (:* D6 D5) D9
type O1223 = :* (:* D6 D5) D9
type B1010010011 = :* (:* D6 D5) D9
type H292 = :* (:* D6 D5) D8
type D658 = :* (:* D6 D5) D8
type O1222 = :* (:* D6 D5) D8
type B1010010010 = :* (:* D6 D5) D8
type H291 = :* (:* D6 D5) D7
type D657 = :* (:* D6 D5) D7
type O1221 = :* (:* D6 D5) D7
type B1010010001 = :* (:* D6 D5) D7
type H290 = :* (:* D6 D5) D6
type D656 = :* (:* D6 D5) D6
type O1220 = :* (:* D6 D5) D6
type B1010010000 = :* (:* D6 D5) D6
type H28F = :* (:* D6 D5) D5
type D655 = :* (:* D6 D5) D5
type O1217 = :* (:* D6 D5) D5
type B1010001111 = :* (:* D6 D5) D5
type H28E = :* (:* D6 D5) D4
type D654 = :* (:* D6 D5) D4
type O1216 = :* (:* D6 D5) D4
type B1010001110 = :* (:* D6 D5) D4
type H28D = :* (:* D6 D5) D3
type D653 = :* (:* D6 D5) D3
type O1215 = :* (:* D6 D5) D3
type B1010001101 = :* (:* D6 D5) D3
type H28C = :* (:* D6 D5) D2
type D652 = :* (:* D6 D5) D2
type O1214 = :* (:* D6 D5) D2
type B1010001100 = :* (:* D6 D5) D2
type H28B = :* (:* D6 D5) D1
type D651 = :* (:* D6 D5) D1
type O1213 = :* (:* D6 D5) D1
type B1010001011 = :* (:* D6 D5) D1
type H28A = :* (:* D6 D5) D0
type D650 = :* (:* D6 D5) D0
type O1212 = :* (:* D6 D5) D0
type B1010001010 = :* (:* D6 D5) D0
type H289 = :* (:* D6 D4) D9
type D649 = :* (:* D6 D4) D9
type O1211 = :* (:* D6 D4) D9
type B1010001001 = :* (:* D6 D4) D9
type H288 = :* (:* D6 D4) D8
type D648 = :* (:* D6 D4) D8
type O1210 = :* (:* D6 D4) D8
type B1010001000 = :* (:* D6 D4) D8
type H287 = :* (:* D6 D4) D7
type D647 = :* (:* D6 D4) D7
type O1207 = :* (:* D6 D4) D7
type B1010000111 = :* (:* D6 D4) D7
type H286 = :* (:* D6 D4) D6
type D646 = :* (:* D6 D4) D6
type O1206 = :* (:* D6 D4) D6
type B1010000110 = :* (:* D6 D4) D6
type H285 = :* (:* D6 D4) D5
type D645 = :* (:* D6 D4) D5
type O1205 = :* (:* D6 D4) D5
type B1010000101 = :* (:* D6 D4) D5
type H284 = :* (:* D6 D4) D4
type D644 = :* (:* D6 D4) D4
type O1204 = :* (:* D6 D4) D4
type B1010000100 = :* (:* D6 D4) D4
type H283 = :* (:* D6 D4) D3
type D643 = :* (:* D6 D4) D3
type O1203 = :* (:* D6 D4) D3
type B1010000011 = :* (:* D6 D4) D3
type H282 = :* (:* D6 D4) D2
type D642 = :* (:* D6 D4) D2
type O1202 = :* (:* D6 D4) D2
type B1010000010 = :* (:* D6 D4) D2
type H281 = :* (:* D6 D4) D1
type D641 = :* (:* D6 D4) D1
type O1201 = :* (:* D6 D4) D1
type B1010000001 = :* (:* D6 D4) D1
type H280 = :* (:* D6 D4) D0
type D640 = :* (:* D6 D4) D0
type O1200 = :* (:* D6 D4) D0
type B1010000000 = :* (:* D6 D4) D0
type H27F = :* (:* D6 D3) D9
type D639 = :* (:* D6 D3) D9
type O1177 = :* (:* D6 D3) D9
type B1001111111 = :* (:* D6 D3) D9
type H27E = :* (:* D6 D3) D8
type D638 = :* (:* D6 D3) D8
type O1176 = :* (:* D6 D3) D8
type B1001111110 = :* (:* D6 D3) D8
type H27D = :* (:* D6 D3) D7
type D637 = :* (:* D6 D3) D7
type O1175 = :* (:* D6 D3) D7
type B1001111101 = :* (:* D6 D3) D7
type H27C = :* (:* D6 D3) D6
type D636 = :* (:* D6 D3) D6
type O1174 = :* (:* D6 D3) D6
type B1001111100 = :* (:* D6 D3) D6
type H27B = :* (:* D6 D3) D5
type D635 = :* (:* D6 D3) D5
type O1173 = :* (:* D6 D3) D5
type B1001111011 = :* (:* D6 D3) D5
type H27A = :* (:* D6 D3) D4
type D634 = :* (:* D6 D3) D4
type O1172 = :* (:* D6 D3) D4
type B1001111010 = :* (:* D6 D3) D4
type H279 = :* (:* D6 D3) D3
type D633 = :* (:* D6 D3) D3
type O1171 = :* (:* D6 D3) D3
type B1001111001 = :* (:* D6 D3) D3
type H278 = :* (:* D6 D3) D2
type D632 = :* (:* D6 D3) D2
type O1170 = :* (:* D6 D3) D2
type B1001111000 = :* (:* D6 D3) D2
type H277 = :* (:* D6 D3) D1
type D631 = :* (:* D6 D3) D1
type O1167 = :* (:* D6 D3) D1
type B1001110111 = :* (:* D6 D3) D1
type H276 = :* (:* D6 D3) D0
type D630 = :* (:* D6 D3) D0
type O1166 = :* (:* D6 D3) D0
type B1001110110 = :* (:* D6 D3) D0
type H275 = :* (:* D6 D2) D9
type D629 = :* (:* D6 D2) D9
type O1165 = :* (:* D6 D2) D9
type B1001110101 = :* (:* D6 D2) D9
type H274 = :* (:* D6 D2) D8
type D628 = :* (:* D6 D2) D8
type O1164 = :* (:* D6 D2) D8
type B1001110100 = :* (:* D6 D2) D8
type H273 = :* (:* D6 D2) D7
type D627 = :* (:* D6 D2) D7
type O1163 = :* (:* D6 D2) D7
type B1001110011 = :* (:* D6 D2) D7
type H272 = :* (:* D6 D2) D6
type D626 = :* (:* D6 D2) D6
type O1162 = :* (:* D6 D2) D6
type B1001110010 = :* (:* D6 D2) D6
type H271 = :* (:* D6 D2) D5
type D625 = :* (:* D6 D2) D5
type O1161 = :* (:* D6 D2) D5
type B1001110001 = :* (:* D6 D2) D5
type H270 = :* (:* D6 D2) D4
type D624 = :* (:* D6 D2) D4
type O1160 = :* (:* D6 D2) D4
type B1001110000 = :* (:* D6 D2) D4
type H26F = :* (:* D6 D2) D3
type D623 = :* (:* D6 D2) D3
type O1157 = :* (:* D6 D2) D3
type B1001101111 = :* (:* D6 D2) D3
type H26E = :* (:* D6 D2) D2
type D622 = :* (:* D6 D2) D2
type O1156 = :* (:* D6 D2) D2
type B1001101110 = :* (:* D6 D2) D2
type H26D = :* (:* D6 D2) D1
type D621 = :* (:* D6 D2) D1
type O1155 = :* (:* D6 D2) D1
type B1001101101 = :* (:* D6 D2) D1
type H26C = :* (:* D6 D2) D0
type D620 = :* (:* D6 D2) D0
type O1154 = :* (:* D6 D2) D0
type B1001101100 = :* (:* D6 D2) D0
type H26B = :* (:* D6 D1) D9
type D619 = :* (:* D6 D1) D9
type O1153 = :* (:* D6 D1) D9
type B1001101011 = :* (:* D6 D1) D9
type H26A = :* (:* D6 D1) D8
type D618 = :* (:* D6 D1) D8
type O1152 = :* (:* D6 D1) D8
type B1001101010 = :* (:* D6 D1) D8
type H269 = :* (:* D6 D1) D7
type D617 = :* (:* D6 D1) D7
type O1151 = :* (:* D6 D1) D7
type B1001101001 = :* (:* D6 D1) D7
type H268 = :* (:* D6 D1) D6
type D616 = :* (:* D6 D1) D6
type O1150 = :* (:* D6 D1) D6
type B1001101000 = :* (:* D6 D1) D6
type H267 = :* (:* D6 D1) D5
type D615 = :* (:* D6 D1) D5
type O1147 = :* (:* D6 D1) D5
type B1001100111 = :* (:* D6 D1) D5
type H266 = :* (:* D6 D1) D4
type D614 = :* (:* D6 D1) D4
type O1146 = :* (:* D6 D1) D4
type B1001100110 = :* (:* D6 D1) D4
type H265 = :* (:* D6 D1) D3
type D613 = :* (:* D6 D1) D3
type O1145 = :* (:* D6 D1) D3
type B1001100101 = :* (:* D6 D1) D3
type H264 = :* (:* D6 D1) D2
type D612 = :* (:* D6 D1) D2
type O1144 = :* (:* D6 D1) D2
type B1001100100 = :* (:* D6 D1) D2
type H263 = :* (:* D6 D1) D1
type D611 = :* (:* D6 D1) D1
type O1143 = :* (:* D6 D1) D1
type B1001100011 = :* (:* D6 D1) D1
type H262 = :* (:* D6 D1) D0
type D610 = :* (:* D6 D1) D0
type O1142 = :* (:* D6 D1) D0
type B1001100010 = :* (:* D6 D1) D0
type H261 = :* (:* D6 D0) D9
type D609 = :* (:* D6 D0) D9
type O1141 = :* (:* D6 D0) D9
type B1001100001 = :* (:* D6 D0) D9
type H260 = :* (:* D6 D0) D8
type D608 = :* (:* D6 D0) D8
type O1140 = :* (:* D6 D0) D8
type B1001100000 = :* (:* D6 D0) D8
type H25F = :* (:* D6 D0) D7
type D607 = :* (:* D6 D0) D7
type O1137 = :* (:* D6 D0) D7
type B1001011111 = :* (:* D6 D0) D7
type H25E = :* (:* D6 D0) D6
type D606 = :* (:* D6 D0) D6
type O1136 = :* (:* D6 D0) D6
type B1001011110 = :* (:* D6 D0) D6
type H25D = :* (:* D6 D0) D5
type D605 = :* (:* D6 D0) D5
type O1135 = :* (:* D6 D0) D5
type B1001011101 = :* (:* D6 D0) D5
type H25C = :* (:* D6 D0) D4
type D604 = :* (:* D6 D0) D4
type O1134 = :* (:* D6 D0) D4
type B1001011100 = :* (:* D6 D0) D4
type H25B = :* (:* D6 D0) D3
type D603 = :* (:* D6 D0) D3
type O1133 = :* (:* D6 D0) D3
type B1001011011 = :* (:* D6 D0) D3
type H25A = :* (:* D6 D0) D2
type D602 = :* (:* D6 D0) D2
type O1132 = :* (:* D6 D0) D2
type B1001011010 = :* (:* D6 D0) D2
type H259 = :* (:* D6 D0) D1
type D601 = :* (:* D6 D0) D1
type O1131 = :* (:* D6 D0) D1
type B1001011001 = :* (:* D6 D0) D1
type H258 = :* (:* D6 D0) D0
type D600 = :* (:* D6 D0) D0
type O1130 = :* (:* D6 D0) D0
type B1001011000 = :* (:* D6 D0) D0
type H257 = :* (:* D5 D9) D9
type D599 = :* (:* D5 D9) D9
type O1127 = :* (:* D5 D9) D9
type B1001010111 = :* (:* D5 D9) D9
type H256 = :* (:* D5 D9) D8
type D598 = :* (:* D5 D9) D8
type O1126 = :* (:* D5 D9) D8
type B1001010110 = :* (:* D5 D9) D8
type H255 = :* (:* D5 D9) D7
type D597 = :* (:* D5 D9) D7
type O1125 = :* (:* D5 D9) D7
type B1001010101 = :* (:* D5 D9) D7
type H254 = :* (:* D5 D9) D6
type D596 = :* (:* D5 D9) D6
type O1124 = :* (:* D5 D9) D6
type B1001010100 = :* (:* D5 D9) D6
type H253 = :* (:* D5 D9) D5
type D595 = :* (:* D5 D9) D5
type O1123 = :* (:* D5 D9) D5
type B1001010011 = :* (:* D5 D9) D5
type H252 = :* (:* D5 D9) D4
type D594 = :* (:* D5 D9) D4
type O1122 = :* (:* D5 D9) D4
type B1001010010 = :* (:* D5 D9) D4
type H251 = :* (:* D5 D9) D3
type D593 = :* (:* D5 D9) D3
type O1121 = :* (:* D5 D9) D3
type B1001010001 = :* (:* D5 D9) D3
type H250 = :* (:* D5 D9) D2
type D592 = :* (:* D5 D9) D2
type O1120 = :* (:* D5 D9) D2
type B1001010000 = :* (:* D5 D9) D2
type H24F = :* (:* D5 D9) D1
type D591 = :* (:* D5 D9) D1
type O1117 = :* (:* D5 D9) D1
type B1001001111 = :* (:* D5 D9) D1
type H24E = :* (:* D5 D9) D0
type D590 = :* (:* D5 D9) D0
type O1116 = :* (:* D5 D9) D0
type B1001001110 = :* (:* D5 D9) D0
type H24D = :* (:* D5 D8) D9
type D589 = :* (:* D5 D8) D9
type O1115 = :* (:* D5 D8) D9
type B1001001101 = :* (:* D5 D8) D9
type H24C = :* (:* D5 D8) D8
type D588 = :* (:* D5 D8) D8
type O1114 = :* (:* D5 D8) D8
type B1001001100 = :* (:* D5 D8) D8
type H24B = :* (:* D5 D8) D7
type D587 = :* (:* D5 D8) D7
type O1113 = :* (:* D5 D8) D7
type B1001001011 = :* (:* D5 D8) D7
type H24A = :* (:* D5 D8) D6
type D586 = :* (:* D5 D8) D6
type O1112 = :* (:* D5 D8) D6
type B1001001010 = :* (:* D5 D8) D6
type H249 = :* (:* D5 D8) D5
type D585 = :* (:* D5 D8) D5
type O1111 = :* (:* D5 D8) D5
type B1001001001 = :* (:* D5 D8) D5
type H248 = :* (:* D5 D8) D4
type D584 = :* (:* D5 D8) D4
type O1110 = :* (:* D5 D8) D4
type B1001001000 = :* (:* D5 D8) D4
type H247 = :* (:* D5 D8) D3
type D583 = :* (:* D5 D8) D3
type O1107 = :* (:* D5 D8) D3
type B1001000111 = :* (:* D5 D8) D3
type H246 = :* (:* D5 D8) D2
type D582 = :* (:* D5 D8) D2
type O1106 = :* (:* D5 D8) D2
type B1001000110 = :* (:* D5 D8) D2
type H245 = :* (:* D5 D8) D1
type D581 = :* (:* D5 D8) D1
type O1105 = :* (:* D5 D8) D1
type B1001000101 = :* (:* D5 D8) D1
type H244 = :* (:* D5 D8) D0
type D580 = :* (:* D5 D8) D0
type O1104 = :* (:* D5 D8) D0
type B1001000100 = :* (:* D5 D8) D0
type H243 = :* (:* D5 D7) D9
type D579 = :* (:* D5 D7) D9
type O1103 = :* (:* D5 D7) D9
type B1001000011 = :* (:* D5 D7) D9
type H242 = :* (:* D5 D7) D8
type D578 = :* (:* D5 D7) D8
type O1102 = :* (:* D5 D7) D8
type B1001000010 = :* (:* D5 D7) D8
type H241 = :* (:* D5 D7) D7
type D577 = :* (:* D5 D7) D7
type O1101 = :* (:* D5 D7) D7
type B1001000001 = :* (:* D5 D7) D7
type H240 = :* (:* D5 D7) D6
type D576 = :* (:* D5 D7) D6
type O1100 = :* (:* D5 D7) D6
type B1001000000 = :* (:* D5 D7) D6
type H23F = :* (:* D5 D7) D5
type D575 = :* (:* D5 D7) D5
type O1077 = :* (:* D5 D7) D5
type B1000111111 = :* (:* D5 D7) D5
type H23E = :* (:* D5 D7) D4
type D574 = :* (:* D5 D7) D4
type O1076 = :* (:* D5 D7) D4
type B1000111110 = :* (:* D5 D7) D4
type H23D = :* (:* D5 D7) D3
type D573 = :* (:* D5 D7) D3
type O1075 = :* (:* D5 D7) D3
type B1000111101 = :* (:* D5 D7) D3
type H23C = :* (:* D5 D7) D2
type D572 = :* (:* D5 D7) D2
type O1074 = :* (:* D5 D7) D2
type B1000111100 = :* (:* D5 D7) D2
type H23B = :* (:* D5 D7) D1
type D571 = :* (:* D5 D7) D1
type O1073 = :* (:* D5 D7) D1
type B1000111011 = :* (:* D5 D7) D1
type H23A = :* (:* D5 D7) D0
type D570 = :* (:* D5 D7) D0
type O1072 = :* (:* D5 D7) D0
type B1000111010 = :* (:* D5 D7) D0
type H239 = :* (:* D5 D6) D9
type D569 = :* (:* D5 D6) D9
type O1071 = :* (:* D5 D6) D9
type B1000111001 = :* (:* D5 D6) D9
type H238 = :* (:* D5 D6) D8
type D568 = :* (:* D5 D6) D8
type O1070 = :* (:* D5 D6) D8
type B1000111000 = :* (:* D5 D6) D8
type H237 = :* (:* D5 D6) D7
type D567 = :* (:* D5 D6) D7
type O1067 = :* (:* D5 D6) D7
type B1000110111 = :* (:* D5 D6) D7
type H236 = :* (:* D5 D6) D6
type D566 = :* (:* D5 D6) D6
type O1066 = :* (:* D5 D6) D6
type B1000110110 = :* (:* D5 D6) D6
type H235 = :* (:* D5 D6) D5
type D565 = :* (:* D5 D6) D5
type O1065 = :* (:* D5 D6) D5
type B1000110101 = :* (:* D5 D6) D5
type H234 = :* (:* D5 D6) D4
type D564 = :* (:* D5 D6) D4
type O1064 = :* (:* D5 D6) D4
type B1000110100 = :* (:* D5 D6) D4
type H233 = :* (:* D5 D6) D3
type D563 = :* (:* D5 D6) D3
type O1063 = :* (:* D5 D6) D3
type B1000110011 = :* (:* D5 D6) D3
type H232 = :* (:* D5 D6) D2
type D562 = :* (:* D5 D6) D2
type O1062 = :* (:* D5 D6) D2
type B1000110010 = :* (:* D5 D6) D2
type H231 = :* (:* D5 D6) D1
type D561 = :* (:* D5 D6) D1
type O1061 = :* (:* D5 D6) D1
type B1000110001 = :* (:* D5 D6) D1
type H230 = :* (:* D5 D6) D0
type D560 = :* (:* D5 D6) D0
type O1060 = :* (:* D5 D6) D0
type B1000110000 = :* (:* D5 D6) D0
type H22F = :* (:* D5 D5) D9
type D559 = :* (:* D5 D5) D9
type O1057 = :* (:* D5 D5) D9
type B1000101111 = :* (:* D5 D5) D9
type H22E = :* (:* D5 D5) D8
type D558 = :* (:* D5 D5) D8
type O1056 = :* (:* D5 D5) D8
type B1000101110 = :* (:* D5 D5) D8
type H22D = :* (:* D5 D5) D7
type D557 = :* (:* D5 D5) D7
type O1055 = :* (:* D5 D5) D7
type B1000101101 = :* (:* D5 D5) D7
type H22C = :* (:* D5 D5) D6
type D556 = :* (:* D5 D5) D6
type O1054 = :* (:* D5 D5) D6
type B1000101100 = :* (:* D5 D5) D6
type H22B = :* (:* D5 D5) D5
type D555 = :* (:* D5 D5) D5
type O1053 = :* (:* D5 D5) D5
type B1000101011 = :* (:* D5 D5) D5
type H22A = :* (:* D5 D5) D4
type D554 = :* (:* D5 D5) D4
type O1052 = :* (:* D5 D5) D4
type B1000101010 = :* (:* D5 D5) D4
type H229 = :* (:* D5 D5) D3
type D553 = :* (:* D5 D5) D3
type O1051 = :* (:* D5 D5) D3
type B1000101001 = :* (:* D5 D5) D3
type H228 = :* (:* D5 D5) D2
type D552 = :* (:* D5 D5) D2
type O1050 = :* (:* D5 D5) D2
type B1000101000 = :* (:* D5 D5) D2
type H227 = :* (:* D5 D5) D1
type D551 = :* (:* D5 D5) D1
type O1047 = :* (:* D5 D5) D1
type B1000100111 = :* (:* D5 D5) D1
type H226 = :* (:* D5 D5) D0
type D550 = :* (:* D5 D5) D0
type O1046 = :* (:* D5 D5) D0
type B1000100110 = :* (:* D5 D5) D0
type H225 = :* (:* D5 D4) D9
type D549 = :* (:* D5 D4) D9
type O1045 = :* (:* D5 D4) D9
type B1000100101 = :* (:* D5 D4) D9
type H224 = :* (:* D5 D4) D8
type D548 = :* (:* D5 D4) D8
type O1044 = :* (:* D5 D4) D8
type B1000100100 = :* (:* D5 D4) D8
type H223 = :* (:* D5 D4) D7
type D547 = :* (:* D5 D4) D7
type O1043 = :* (:* D5 D4) D7
type B1000100011 = :* (:* D5 D4) D7
type H222 = :* (:* D5 D4) D6
type D546 = :* (:* D5 D4) D6
type O1042 = :* (:* D5 D4) D6
type B1000100010 = :* (:* D5 D4) D6
type H221 = :* (:* D5 D4) D5
type D545 = :* (:* D5 D4) D5
type O1041 = :* (:* D5 D4) D5
type B1000100001 = :* (:* D5 D4) D5
type H220 = :* (:* D5 D4) D4
type D544 = :* (:* D5 D4) D4
type O1040 = :* (:* D5 D4) D4
type B1000100000 = :* (:* D5 D4) D4
type H21F = :* (:* D5 D4) D3
type D543 = :* (:* D5 D4) D3
type O1037 = :* (:* D5 D4) D3
type B1000011111 = :* (:* D5 D4) D3
type H21E = :* (:* D5 D4) D2
type D542 = :* (:* D5 D4) D2
type O1036 = :* (:* D5 D4) D2
type B1000011110 = :* (:* D5 D4) D2
type H21D = :* (:* D5 D4) D1
type D541 = :* (:* D5 D4) D1
type O1035 = :* (:* D5 D4) D1
type B1000011101 = :* (:* D5 D4) D1
type H21C = :* (:* D5 D4) D0
type D540 = :* (:* D5 D4) D0
type O1034 = :* (:* D5 D4) D0
type B1000011100 = :* (:* D5 D4) D0
type H21B = :* (:* D5 D3) D9
type D539 = :* (:* D5 D3) D9
type O1033 = :* (:* D5 D3) D9
type B1000011011 = :* (:* D5 D3) D9
type H21A = :* (:* D5 D3) D8
type D538 = :* (:* D5 D3) D8
type O1032 = :* (:* D5 D3) D8
type B1000011010 = :* (:* D5 D3) D8
type H219 = :* (:* D5 D3) D7
type D537 = :* (:* D5 D3) D7
type O1031 = :* (:* D5 D3) D7
type B1000011001 = :* (:* D5 D3) D7
type H218 = :* (:* D5 D3) D6
type D536 = :* (:* D5 D3) D6
type O1030 = :* (:* D5 D3) D6
type B1000011000 = :* (:* D5 D3) D6
type H217 = :* (:* D5 D3) D5
type D535 = :* (:* D5 D3) D5
type O1027 = :* (:* D5 D3) D5
type B1000010111 = :* (:* D5 D3) D5
type H216 = :* (:* D5 D3) D4
type D534 = :* (:* D5 D3) D4
type O1026 = :* (:* D5 D3) D4
type B1000010110 = :* (:* D5 D3) D4
type H215 = :* (:* D5 D3) D3
type D533 = :* (:* D5 D3) D3
type O1025 = :* (:* D5 D3) D3
type B1000010101 = :* (:* D5 D3) D3
type H214 = :* (:* D5 D3) D2
type D532 = :* (:* D5 D3) D2
type O1024 = :* (:* D5 D3) D2
type B1000010100 = :* (:* D5 D3) D2
type H213 = :* (:* D5 D3) D1
type D531 = :* (:* D5 D3) D1
type O1023 = :* (:* D5 D3) D1
type B1000010011 = :* (:* D5 D3) D1
type H212 = :* (:* D5 D3) D0
type D530 = :* (:* D5 D3) D0
type O1022 = :* (:* D5 D3) D0
type B1000010010 = :* (:* D5 D3) D0
type H211 = :* (:* D5 D2) D9
type D529 = :* (:* D5 D2) D9
type O1021 = :* (:* D5 D2) D9
type B1000010001 = :* (:* D5 D2) D9
type H210 = :* (:* D5 D2) D8
type D528 = :* (:* D5 D2) D8
type O1020 = :* (:* D5 D2) D8
type B1000010000 = :* (:* D5 D2) D8
type H20F = :* (:* D5 D2) D7
type D527 = :* (:* D5 D2) D7
type O1017 = :* (:* D5 D2) D7
type B1000001111 = :* (:* D5 D2) D7
type H20E = :* (:* D5 D2) D6
type D526 = :* (:* D5 D2) D6
type O1016 = :* (:* D5 D2) D6
type B1000001110 = :* (:* D5 D2) D6
type H20D = :* (:* D5 D2) D5
type D525 = :* (:* D5 D2) D5
type O1015 = :* (:* D5 D2) D5
type B1000001101 = :* (:* D5 D2) D5
type H20C = :* (:* D5 D2) D4
type D524 = :* (:* D5 D2) D4
type O1014 = :* (:* D5 D2) D4
type B1000001100 = :* (:* D5 D2) D4
type H20B = :* (:* D5 D2) D3
type D523 = :* (:* D5 D2) D3
type O1013 = :* (:* D5 D2) D3
type B1000001011 = :* (:* D5 D2) D3
type H20A = :* (:* D5 D2) D2
type D522 = :* (:* D5 D2) D2
type O1012 = :* (:* D5 D2) D2
type B1000001010 = :* (:* D5 D2) D2
type H209 = :* (:* D5 D2) D1
type D521 = :* (:* D5 D2) D1
type O1011 = :* (:* D5 D2) D1
type B1000001001 = :* (:* D5 D2) D1
type H208 = :* (:* D5 D2) D0
type D520 = :* (:* D5 D2) D0
type O1010 = :* (:* D5 D2) D0
type B1000001000 = :* (:* D5 D2) D0
type H207 = :* (:* D5 D1) D9
type D519 = :* (:* D5 D1) D9
type O1007 = :* (:* D5 D1) D9
type B1000000111 = :* (:* D5 D1) D9
type H206 = :* (:* D5 D1) D8
type D518 = :* (:* D5 D1) D8
type O1006 = :* (:* D5 D1) D8
type B1000000110 = :* (:* D5 D1) D8
type H205 = :* (:* D5 D1) D7
type D517 = :* (:* D5 D1) D7
type O1005 = :* (:* D5 D1) D7
type B1000000101 = :* (:* D5 D1) D7
type H204 = :* (:* D5 D1) D6
type D516 = :* (:* D5 D1) D6
type O1004 = :* (:* D5 D1) D6
type B1000000100 = :* (:* D5 D1) D6
type H203 = :* (:* D5 D1) D5
type D515 = :* (:* D5 D1) D5
type O1003 = :* (:* D5 D1) D5
type B1000000011 = :* (:* D5 D1) D5
type H202 = :* (:* D5 D1) D4
type D514 = :* (:* D5 D1) D4
type O1002 = :* (:* D5 D1) D4
type B1000000010 = :* (:* D5 D1) D4
type H201 = :* (:* D5 D1) D3
type D513 = :* (:* D5 D1) D3
type O1001 = :* (:* D5 D1) D3
type B1000000001 = :* (:* D5 D1) D3
type H200 = :* (:* D5 D1) D2
type D512 = :* (:* D5 D1) D2
type O1000 = :* (:* D5 D1) D2
type B1000000000 = :* (:* D5 D1) D2
type H1FF = :* (:* D5 D1) D1
type D511 = :* (:* D5 D1) D1
type O777 = :* (:* D5 D1) D1
type B111111111 = :* (:* D5 D1) D1
type H1FE = :* (:* D5 D1) D0
type D510 = :* (:* D5 D1) D0
type O776 = :* (:* D5 D1) D0
type B111111110 = :* (:* D5 D1) D0
type H1FD = :* (:* D5 D0) D9
type D509 = :* (:* D5 D0) D9
type O775 = :* (:* D5 D0) D9
type B111111101 = :* (:* D5 D0) D9
type H1FC = :* (:* D5 D0) D8
type D508 = :* (:* D5 D0) D8
type O774 = :* (:* D5 D0) D8
type B111111100 = :* (:* D5 D0) D8
type H1FB = :* (:* D5 D0) D7
type D507 = :* (:* D5 D0) D7
type O773 = :* (:* D5 D0) D7
type B111111011 = :* (:* D5 D0) D7
type H1FA = :* (:* D5 D0) D6
type D506 = :* (:* D5 D0) D6
type O772 = :* (:* D5 D0) D6
type B111111010 = :* (:* D5 D0) D6
type H1F9 = :* (:* D5 D0) D5
type D505 = :* (:* D5 D0) D5
type O771 = :* (:* D5 D0) D5
type B111111001 = :* (:* D5 D0) D5
type H1F8 = :* (:* D5 D0) D4
type D504 = :* (:* D5 D0) D4
type O770 = :* (:* D5 D0) D4
type B111111000 = :* (:* D5 D0) D4
type H1F7 = :* (:* D5 D0) D3
type D503 = :* (:* D5 D0) D3
type O767 = :* (:* D5 D0) D3
type B111110111 = :* (:* D5 D0) D3
type H1F6 = :* (:* D5 D0) D2
type D502 = :* (:* D5 D0) D2
type O766 = :* (:* D5 D0) D2
type B111110110 = :* (:* D5 D0) D2
type H1F5 = :* (:* D5 D0) D1
type D501 = :* (:* D5 D0) D1
type O765 = :* (:* D5 D0) D1
type B111110101 = :* (:* D5 D0) D1
type H1F4 = :* (:* D5 D0) D0
type D500 = :* (:* D5 D0) D0
type O764 = :* (:* D5 D0) D0
type B111110100 = :* (:* D5 D0) D0
type H1F3 = :* (:* D4 D9) D9
type D499 = :* (:* D4 D9) D9
type O763 = :* (:* D4 D9) D9
type B111110011 = :* (:* D4 D9) D9
type H1F2 = :* (:* D4 D9) D8
type D498 = :* (:* D4 D9) D8
type O762 = :* (:* D4 D9) D8
type B111110010 = :* (:* D4 D9) D8
type H1F1 = :* (:* D4 D9) D7
type D497 = :* (:* D4 D9) D7
type O761 = :* (:* D4 D9) D7
type B111110001 = :* (:* D4 D9) D7
type H1F0 = :* (:* D4 D9) D6
type D496 = :* (:* D4 D9) D6
type O760 = :* (:* D4 D9) D6
type B111110000 = :* (:* D4 D9) D6
type H1EF = :* (:* D4 D9) D5
type D495 = :* (:* D4 D9) D5
type O757 = :* (:* D4 D9) D5
type B111101111 = :* (:* D4 D9) D5
type H1EE = :* (:* D4 D9) D4
type D494 = :* (:* D4 D9) D4
type O756 = :* (:* D4 D9) D4
type B111101110 = :* (:* D4 D9) D4
type H1ED = :* (:* D4 D9) D3
type D493 = :* (:* D4 D9) D3
type O755 = :* (:* D4 D9) D3
type B111101101 = :* (:* D4 D9) D3
type H1EC = :* (:* D4 D9) D2
type D492 = :* (:* D4 D9) D2
type O754 = :* (:* D4 D9) D2
type B111101100 = :* (:* D4 D9) D2
type H1EB = :* (:* D4 D9) D1
type D491 = :* (:* D4 D9) D1
type O753 = :* (:* D4 D9) D1
type B111101011 = :* (:* D4 D9) D1
type H1EA = :* (:* D4 D9) D0
type D490 = :* (:* D4 D9) D0
type O752 = :* (:* D4 D9) D0
type B111101010 = :* (:* D4 D9) D0
type H1E9 = :* (:* D4 D8) D9
type D489 = :* (:* D4 D8) D9
type O751 = :* (:* D4 D8) D9
type B111101001 = :* (:* D4 D8) D9
type H1E8 = :* (:* D4 D8) D8
type D488 = :* (:* D4 D8) D8
type O750 = :* (:* D4 D8) D8
type B111101000 = :* (:* D4 D8) D8
type H1E7 = :* (:* D4 D8) D7
type D487 = :* (:* D4 D8) D7
type O747 = :* (:* D4 D8) D7
type B111100111 = :* (:* D4 D8) D7
type H1E6 = :* (:* D4 D8) D6
type D486 = :* (:* D4 D8) D6
type O746 = :* (:* D4 D8) D6
type B111100110 = :* (:* D4 D8) D6
type H1E5 = :* (:* D4 D8) D5
type D485 = :* (:* D4 D8) D5
type O745 = :* (:* D4 D8) D5
type B111100101 = :* (:* D4 D8) D5
type H1E4 = :* (:* D4 D8) D4
type D484 = :* (:* D4 D8) D4
type O744 = :* (:* D4 D8) D4
type B111100100 = :* (:* D4 D8) D4
type H1E3 = :* (:* D4 D8) D3
type D483 = :* (:* D4 D8) D3
type O743 = :* (:* D4 D8) D3
type B111100011 = :* (:* D4 D8) D3
type H1E2 = :* (:* D4 D8) D2
type D482 = :* (:* D4 D8) D2
type O742 = :* (:* D4 D8) D2
type B111100010 = :* (:* D4 D8) D2
type H1E1 = :* (:* D4 D8) D1
type D481 = :* (:* D4 D8) D1
type O741 = :* (:* D4 D8) D1
type B111100001 = :* (:* D4 D8) D1
type H1E0 = :* (:* D4 D8) D0
type D480 = :* (:* D4 D8) D0
type O740 = :* (:* D4 D8) D0
type B111100000 = :* (:* D4 D8) D0
type H1DF = :* (:* D4 D7) D9
type D479 = :* (:* D4 D7) D9
type O737 = :* (:* D4 D7) D9
type B111011111 = :* (:* D4 D7) D9
type H1DE = :* (:* D4 D7) D8
type D478 = :* (:* D4 D7) D8
type O736 = :* (:* D4 D7) D8
type B111011110 = :* (:* D4 D7) D8
type H1DD = :* (:* D4 D7) D7
type D477 = :* (:* D4 D7) D7
type O735 = :* (:* D4 D7) D7
type B111011101 = :* (:* D4 D7) D7
type H1DC = :* (:* D4 D7) D6
type D476 = :* (:* D4 D7) D6
type O734 = :* (:* D4 D7) D6
type B111011100 = :* (:* D4 D7) D6
type H1DB = :* (:* D4 D7) D5
type D475 = :* (:* D4 D7) D5
type O733 = :* (:* D4 D7) D5
type B111011011 = :* (:* D4 D7) D5
type H1DA = :* (:* D4 D7) D4
type D474 = :* (:* D4 D7) D4
type O732 = :* (:* D4 D7) D4
type B111011010 = :* (:* D4 D7) D4
type H1D9 = :* (:* D4 D7) D3
type D473 = :* (:* D4 D7) D3
type O731 = :* (:* D4 D7) D3
type B111011001 = :* (:* D4 D7) D3
type H1D8 = :* (:* D4 D7) D2
type D472 = :* (:* D4 D7) D2
type O730 = :* (:* D4 D7) D2
type B111011000 = :* (:* D4 D7) D2
type H1D7 = :* (:* D4 D7) D1
type D471 = :* (:* D4 D7) D1
type O727 = :* (:* D4 D7) D1
type B111010111 = :* (:* D4 D7) D1
type H1D6 = :* (:* D4 D7) D0
type D470 = :* (:* D4 D7) D0
type O726 = :* (:* D4 D7) D0
type B111010110 = :* (:* D4 D7) D0
type H1D5 = :* (:* D4 D6) D9
type D469 = :* (:* D4 D6) D9
type O725 = :* (:* D4 D6) D9
type B111010101 = :* (:* D4 D6) D9
type H1D4 = :* (:* D4 D6) D8
type D468 = :* (:* D4 D6) D8
type O724 = :* (:* D4 D6) D8
type B111010100 = :* (:* D4 D6) D8
type H1D3 = :* (:* D4 D6) D7
type D467 = :* (:* D4 D6) D7
type O723 = :* (:* D4 D6) D7
type B111010011 = :* (:* D4 D6) D7
type H1D2 = :* (:* D4 D6) D6
type D466 = :* (:* D4 D6) D6
type O722 = :* (:* D4 D6) D6
type B111010010 = :* (:* D4 D6) D6
type H1D1 = :* (:* D4 D6) D5
type D465 = :* (:* D4 D6) D5
type O721 = :* (:* D4 D6) D5
type B111010001 = :* (:* D4 D6) D5
type H1D0 = :* (:* D4 D6) D4
type D464 = :* (:* D4 D6) D4
type O720 = :* (:* D4 D6) D4
type B111010000 = :* (:* D4 D6) D4
type H1CF = :* (:* D4 D6) D3
type D463 = :* (:* D4 D6) D3
type O717 = :* (:* D4 D6) D3
type B111001111 = :* (:* D4 D6) D3
type H1CE = :* (:* D4 D6) D2
type D462 = :* (:* D4 D6) D2
type O716 = :* (:* D4 D6) D2
type B111001110 = :* (:* D4 D6) D2
type H1CD = :* (:* D4 D6) D1
type D461 = :* (:* D4 D6) D1
type O715 = :* (:* D4 D6) D1
type B111001101 = :* (:* D4 D6) D1
type H1CC = :* (:* D4 D6) D0
type D460 = :* (:* D4 D6) D0
type O714 = :* (:* D4 D6) D0
type B111001100 = :* (:* D4 D6) D0
type H1CB = :* (:* D4 D5) D9
type D459 = :* (:* D4 D5) D9
type O713 = :* (:* D4 D5) D9
type B111001011 = :* (:* D4 D5) D9
type H1CA = :* (:* D4 D5) D8
type D458 = :* (:* D4 D5) D8
type O712 = :* (:* D4 D5) D8
type B111001010 = :* (:* D4 D5) D8
type H1C9 = :* (:* D4 D5) D7
type D457 = :* (:* D4 D5) D7
type O711 = :* (:* D4 D5) D7
type B111001001 = :* (:* D4 D5) D7
type H1C8 = :* (:* D4 D5) D6
type D456 = :* (:* D4 D5) D6
type O710 = :* (:* D4 D5) D6
type B111001000 = :* (:* D4 D5) D6
type H1C7 = :* (:* D4 D5) D5
type D455 = :* (:* D4 D5) D5
type O707 = :* (:* D4 D5) D5
type B111000111 = :* (:* D4 D5) D5
type H1C6 = :* (:* D4 D5) D4
type D454 = :* (:* D4 D5) D4
type O706 = :* (:* D4 D5) D4
type B111000110 = :* (:* D4 D5) D4
type H1C5 = :* (:* D4 D5) D3
type D453 = :* (:* D4 D5) D3
type O705 = :* (:* D4 D5) D3
type B111000101 = :* (:* D4 D5) D3
type H1C4 = :* (:* D4 D5) D2
type D452 = :* (:* D4 D5) D2
type O704 = :* (:* D4 D5) D2
type B111000100 = :* (:* D4 D5) D2
type H1C3 = :* (:* D4 D5) D1
type D451 = :* (:* D4 D5) D1
type O703 = :* (:* D4 D5) D1
type B111000011 = :* (:* D4 D5) D1
type H1C2 = :* (:* D4 D5) D0
type D450 = :* (:* D4 D5) D0
type O702 = :* (:* D4 D5) D0
type B111000010 = :* (:* D4 D5) D0
type H1C1 = :* (:* D4 D4) D9
type D449 = :* (:* D4 D4) D9
type O701 = :* (:* D4 D4) D9
type B111000001 = :* (:* D4 D4) D9
type H1C0 = :* (:* D4 D4) D8
type D448 = :* (:* D4 D4) D8
type O700 = :* (:* D4 D4) D8
type B111000000 = :* (:* D4 D4) D8
type H1BF = :* (:* D4 D4) D7
type D447 = :* (:* D4 D4) D7
type O677 = :* (:* D4 D4) D7
type B110111111 = :* (:* D4 D4) D7
type H1BE = :* (:* D4 D4) D6
type D446 = :* (:* D4 D4) D6
type O676 = :* (:* D4 D4) D6
type B110111110 = :* (:* D4 D4) D6
type H1BD = :* (:* D4 D4) D5
type D445 = :* (:* D4 D4) D5
type O675 = :* (:* D4 D4) D5
type B110111101 = :* (:* D4 D4) D5
type H1BC = :* (:* D4 D4) D4
type D444 = :* (:* D4 D4) D4
type O674 = :* (:* D4 D4) D4
type B110111100 = :* (:* D4 D4) D4
type H1BB = :* (:* D4 D4) D3
type D443 = :* (:* D4 D4) D3
type O673 = :* (:* D4 D4) D3
type B110111011 = :* (:* D4 D4) D3
type H1BA = :* (:* D4 D4) D2
type D442 = :* (:* D4 D4) D2
type O672 = :* (:* D4 D4) D2
type B110111010 = :* (:* D4 D4) D2
type H1B9 = :* (:* D4 D4) D1
type D441 = :* (:* D4 D4) D1
type O671 = :* (:* D4 D4) D1
type B110111001 = :* (:* D4 D4) D1
type H1B8 = :* (:* D4 D4) D0
type D440 = :* (:* D4 D4) D0
type O670 = :* (:* D4 D4) D0
type B110111000 = :* (:* D4 D4) D0
type H1B7 = :* (:* D4 D3) D9
type D439 = :* (:* D4 D3) D9
type O667 = :* (:* D4 D3) D9
type B110110111 = :* (:* D4 D3) D9
type H1B6 = :* (:* D4 D3) D8
type D438 = :* (:* D4 D3) D8
type O666 = :* (:* D4 D3) D8
type B110110110 = :* (:* D4 D3) D8
type H1B5 = :* (:* D4 D3) D7
type D437 = :* (:* D4 D3) D7
type O665 = :* (:* D4 D3) D7
type B110110101 = :* (:* D4 D3) D7
type H1B4 = :* (:* D4 D3) D6
type D436 = :* (:* D4 D3) D6
type O664 = :* (:* D4 D3) D6
type B110110100 = :* (:* D4 D3) D6
type H1B3 = :* (:* D4 D3) D5
type D435 = :* (:* D4 D3) D5
type O663 = :* (:* D4 D3) D5
type B110110011 = :* (:* D4 D3) D5
type H1B2 = :* (:* D4 D3) D4
type D434 = :* (:* D4 D3) D4
type O662 = :* (:* D4 D3) D4
type B110110010 = :* (:* D4 D3) D4
type H1B1 = :* (:* D4 D3) D3
type D433 = :* (:* D4 D3) D3
type O661 = :* (:* D4 D3) D3
type B110110001 = :* (:* D4 D3) D3
type H1B0 = :* (:* D4 D3) D2
type D432 = :* (:* D4 D3) D2
type O660 = :* (:* D4 D3) D2
type B110110000 = :* (:* D4 D3) D2
type H1AF = :* (:* D4 D3) D1
type D431 = :* (:* D4 D3) D1
type O657 = :* (:* D4 D3) D1
type B110101111 = :* (:* D4 D3) D1
type H1AE = :* (:* D4 D3) D0
type D430 = :* (:* D4 D3) D0
type O656 = :* (:* D4 D3) D0
type B110101110 = :* (:* D4 D3) D0
type H1AD = :* (:* D4 D2) D9
type D429 = :* (:* D4 D2) D9
type O655 = :* (:* D4 D2) D9
type B110101101 = :* (:* D4 D2) D9
type H1AC = :* (:* D4 D2) D8
type D428 = :* (:* D4 D2) D8
type O654 = :* (:* D4 D2) D8
type B110101100 = :* (:* D4 D2) D8
type H1AB = :* (:* D4 D2) D7
type D427 = :* (:* D4 D2) D7
type O653 = :* (:* D4 D2) D7
type B110101011 = :* (:* D4 D2) D7
type H1AA = :* (:* D4 D2) D6
type D426 = :* (:* D4 D2) D6
type O652 = :* (:* D4 D2) D6
type B110101010 = :* (:* D4 D2) D6
type H1A9 = :* (:* D4 D2) D5
type D425 = :* (:* D4 D2) D5
type O651 = :* (:* D4 D2) D5
type B110101001 = :* (:* D4 D2) D5
type H1A8 = :* (:* D4 D2) D4
type D424 = :* (:* D4 D2) D4
type O650 = :* (:* D4 D2) D4
type B110101000 = :* (:* D4 D2) D4
type H1A7 = :* (:* D4 D2) D3
type D423 = :* (:* D4 D2) D3
type O647 = :* (:* D4 D2) D3
type B110100111 = :* (:* D4 D2) D3
type H1A6 = :* (:* D4 D2) D2
type D422 = :* (:* D4 D2) D2
type O646 = :* (:* D4 D2) D2
type B110100110 = :* (:* D4 D2) D2
type H1A5 = :* (:* D4 D2) D1
type D421 = :* (:* D4 D2) D1
type O645 = :* (:* D4 D2) D1
type B110100101 = :* (:* D4 D2) D1
type H1A4 = :* (:* D4 D2) D0
type D420 = :* (:* D4 D2) D0
type O644 = :* (:* D4 D2) D0
type B110100100 = :* (:* D4 D2) D0
type H1A3 = :* (:* D4 D1) D9
type D419 = :* (:* D4 D1) D9
type O643 = :* (:* D4 D1) D9
type B110100011 = :* (:* D4 D1) D9
type H1A2 = :* (:* D4 D1) D8
type D418 = :* (:* D4 D1) D8
type O642 = :* (:* D4 D1) D8
type B110100010 = :* (:* D4 D1) D8
type H1A1 = :* (:* D4 D1) D7
type D417 = :* (:* D4 D1) D7
type O641 = :* (:* D4 D1) D7
type B110100001 = :* (:* D4 D1) D7
type H1A0 = :* (:* D4 D1) D6
type D416 = :* (:* D4 D1) D6
type O640 = :* (:* D4 D1) D6
type B110100000 = :* (:* D4 D1) D6
type H19F = :* (:* D4 D1) D5
type D415 = :* (:* D4 D1) D5
type O637 = :* (:* D4 D1) D5
type B110011111 = :* (:* D4 D1) D5
type H19E = :* (:* D4 D1) D4
type D414 = :* (:* D4 D1) D4
type O636 = :* (:* D4 D1) D4
type B110011110 = :* (:* D4 D1) D4
type H19D = :* (:* D4 D1) D3
type D413 = :* (:* D4 D1) D3
type O635 = :* (:* D4 D1) D3
type B110011101 = :* (:* D4 D1) D3
type H19C = :* (:* D4 D1) D2
type D412 = :* (:* D4 D1) D2
type O634 = :* (:* D4 D1) D2
type B110011100 = :* (:* D4 D1) D2
type H19B = :* (:* D4 D1) D1
type D411 = :* (:* D4 D1) D1
type O633 = :* (:* D4 D1) D1
type B110011011 = :* (:* D4 D1) D1
type H19A = :* (:* D4 D1) D0
type D410 = :* (:* D4 D1) D0
type O632 = :* (:* D4 D1) D0
type B110011010 = :* (:* D4 D1) D0
type H199 = :* (:* D4 D0) D9
type D409 = :* (:* D4 D0) D9
type O631 = :* (:* D4 D0) D9
type B110011001 = :* (:* D4 D0) D9
type H198 = :* (:* D4 D0) D8
type D408 = :* (:* D4 D0) D8
type O630 = :* (:* D4 D0) D8
type B110011000 = :* (:* D4 D0) D8
type H197 = :* (:* D4 D0) D7
type D407 = :* (:* D4 D0) D7
type O627 = :* (:* D4 D0) D7
type B110010111 = :* (:* D4 D0) D7
type H196 = :* (:* D4 D0) D6
type D406 = :* (:* D4 D0) D6
type O626 = :* (:* D4 D0) D6
type B110010110 = :* (:* D4 D0) D6
type H195 = :* (:* D4 D0) D5
type D405 = :* (:* D4 D0) D5
type O625 = :* (:* D4 D0) D5
type B110010101 = :* (:* D4 D0) D5
type H194 = :* (:* D4 D0) D4
type D404 = :* (:* D4 D0) D4
type O624 = :* (:* D4 D0) D4
type B110010100 = :* (:* D4 D0) D4
type H193 = :* (:* D4 D0) D3
type D403 = :* (:* D4 D0) D3
type O623 = :* (:* D4 D0) D3
type B110010011 = :* (:* D4 D0) D3
type H192 = :* (:* D4 D0) D2
type D402 = :* (:* D4 D0) D2
type O622 = :* (:* D4 D0) D2
type B110010010 = :* (:* D4 D0) D2
type H191 = :* (:* D4 D0) D1
type D401 = :* (:* D4 D0) D1
type O621 = :* (:* D4 D0) D1
type B110010001 = :* (:* D4 D0) D1
type H190 = :* (:* D4 D0) D0
type D400 = :* (:* D4 D0) D0
type O620 = :* (:* D4 D0) D0
type B110010000 = :* (:* D4 D0) D0
type H18F = :* (:* D3 D9) D9
type D399 = :* (:* D3 D9) D9
type O617 = :* (:* D3 D9) D9
type B110001111 = :* (:* D3 D9) D9
type H18E = :* (:* D3 D9) D8
type D398 = :* (:* D3 D9) D8
type O616 = :* (:* D3 D9) D8
type B110001110 = :* (:* D3 D9) D8
type H18D = :* (:* D3 D9) D7
type D397 = :* (:* D3 D9) D7
type O615 = :* (:* D3 D9) D7
type B110001101 = :* (:* D3 D9) D7
type H18C = :* (:* D3 D9) D6
type D396 = :* (:* D3 D9) D6
type O614 = :* (:* D3 D9) D6
type B110001100 = :* (:* D3 D9) D6
type H18B = :* (:* D3 D9) D5
type D395 = :* (:* D3 D9) D5
type O613 = :* (:* D3 D9) D5
type B110001011 = :* (:* D3 D9) D5
type H18A = :* (:* D3 D9) D4
type D394 = :* (:* D3 D9) D4
type O612 = :* (:* D3 D9) D4
type B110001010 = :* (:* D3 D9) D4
type H189 = :* (:* D3 D9) D3
type D393 = :* (:* D3 D9) D3
type O611 = :* (:* D3 D9) D3
type B110001001 = :* (:* D3 D9) D3
type H188 = :* (:* D3 D9) D2
type D392 = :* (:* D3 D9) D2
type O610 = :* (:* D3 D9) D2
type B110001000 = :* (:* D3 D9) D2
type H187 = :* (:* D3 D9) D1
type D391 = :* (:* D3 D9) D1
type O607 = :* (:* D3 D9) D1
type B110000111 = :* (:* D3 D9) D1
type H186 = :* (:* D3 D9) D0
type D390 = :* (:* D3 D9) D0
type O606 = :* (:* D3 D9) D0
type B110000110 = :* (:* D3 D9) D0
type H185 = :* (:* D3 D8) D9
type D389 = :* (:* D3 D8) D9
type O605 = :* (:* D3 D8) D9
type B110000101 = :* (:* D3 D8) D9
type H184 = :* (:* D3 D8) D8
type D388 = :* (:* D3 D8) D8
type O604 = :* (:* D3 D8) D8
type B110000100 = :* (:* D3 D8) D8
type H183 = :* (:* D3 D8) D7
type D387 = :* (:* D3 D8) D7
type O603 = :* (:* D3 D8) D7
type B110000011 = :* (:* D3 D8) D7
type H182 = :* (:* D3 D8) D6
type D386 = :* (:* D3 D8) D6
type O602 = :* (:* D3 D8) D6
type B110000010 = :* (:* D3 D8) D6
type H181 = :* (:* D3 D8) D5
type D385 = :* (:* D3 D8) D5
type O601 = :* (:* D3 D8) D5
type B110000001 = :* (:* D3 D8) D5
type H180 = :* (:* D3 D8) D4
type D384 = :* (:* D3 D8) D4
type O600 = :* (:* D3 D8) D4
type B110000000 = :* (:* D3 D8) D4
type H17F = :* (:* D3 D8) D3
type D383 = :* (:* D3 D8) D3
type O577 = :* (:* D3 D8) D3
type B101111111 = :* (:* D3 D8) D3
type H17E = :* (:* D3 D8) D2
type D382 = :* (:* D3 D8) D2
type O576 = :* (:* D3 D8) D2
type B101111110 = :* (:* D3 D8) D2
type H17D = :* (:* D3 D8) D1
type D381 = :* (:* D3 D8) D1
type O575 = :* (:* D3 D8) D1
type B101111101 = :* (:* D3 D8) D1
type H17C = :* (:* D3 D8) D0
type D380 = :* (:* D3 D8) D0
type O574 = :* (:* D3 D8) D0
type B101111100 = :* (:* D3 D8) D0
type H17B = :* (:* D3 D7) D9
type D379 = :* (:* D3 D7) D9
type O573 = :* (:* D3 D7) D9
type B101111011 = :* (:* D3 D7) D9
type H17A = :* (:* D3 D7) D8
type D378 = :* (:* D3 D7) D8
type O572 = :* (:* D3 D7) D8
type B101111010 = :* (:* D3 D7) D8
type H179 = :* (:* D3 D7) D7
type D377 = :* (:* D3 D7) D7
type O571 = :* (:* D3 D7) D7
type B101111001 = :* (:* D3 D7) D7
type H178 = :* (:* D3 D7) D6
type D376 = :* (:* D3 D7) D6
type O570 = :* (:* D3 D7) D6
type B101111000 = :* (:* D3 D7) D6
type H177 = :* (:* D3 D7) D5
type D375 = :* (:* D3 D7) D5
type O567 = :* (:* D3 D7) D5
type B101110111 = :* (:* D3 D7) D5
type H176 = :* (:* D3 D7) D4
type D374 = :* (:* D3 D7) D4
type O566 = :* (:* D3 D7) D4
type B101110110 = :* (:* D3 D7) D4
type H175 = :* (:* D3 D7) D3
type D373 = :* (:* D3 D7) D3
type O565 = :* (:* D3 D7) D3
type B101110101 = :* (:* D3 D7) D3
type H174 = :* (:* D3 D7) D2
type D372 = :* (:* D3 D7) D2
type O564 = :* (:* D3 D7) D2
type B101110100 = :* (:* D3 D7) D2
type H173 = :* (:* D3 D7) D1
type D371 = :* (:* D3 D7) D1
type O563 = :* (:* D3 D7) D1
type B101110011 = :* (:* D3 D7) D1
type H172 = :* (:* D3 D7) D0
type D370 = :* (:* D3 D7) D0
type O562 = :* (:* D3 D7) D0
type B101110010 = :* (:* D3 D7) D0
type H171 = :* (:* D3 D6) D9
type D369 = :* (:* D3 D6) D9
type O561 = :* (:* D3 D6) D9
type B101110001 = :* (:* D3 D6) D9
type H170 = :* (:* D3 D6) D8
type D368 = :* (:* D3 D6) D8
type O560 = :* (:* D3 D6) D8
type B101110000 = :* (:* D3 D6) D8
type H16F = :* (:* D3 D6) D7
type D367 = :* (:* D3 D6) D7
type O557 = :* (:* D3 D6) D7
type B101101111 = :* (:* D3 D6) D7
type H16E = :* (:* D3 D6) D6
type D366 = :* (:* D3 D6) D6
type O556 = :* (:* D3 D6) D6
type B101101110 = :* (:* D3 D6) D6
type H16D = :* (:* D3 D6) D5
type D365 = :* (:* D3 D6) D5
type O555 = :* (:* D3 D6) D5
type B101101101 = :* (:* D3 D6) D5
type H16C = :* (:* D3 D6) D4
type D364 = :* (:* D3 D6) D4
type O554 = :* (:* D3 D6) D4
type B101101100 = :* (:* D3 D6) D4
type H16B = :* (:* D3 D6) D3
type D363 = :* (:* D3 D6) D3
type O553 = :* (:* D3 D6) D3
type B101101011 = :* (:* D3 D6) D3
type H16A = :* (:* D3 D6) D2
type D362 = :* (:* D3 D6) D2
type O552 = :* (:* D3 D6) D2
type B101101010 = :* (:* D3 D6) D2
type H169 = :* (:* D3 D6) D1
type D361 = :* (:* D3 D6) D1
type O551 = :* (:* D3 D6) D1
type B101101001 = :* (:* D3 D6) D1
type H168 = :* (:* D3 D6) D0
type D360 = :* (:* D3 D6) D0
type O550 = :* (:* D3 D6) D0
type B101101000 = :* (:* D3 D6) D0
type H167 = :* (:* D3 D5) D9
type D359 = :* (:* D3 D5) D9
type O547 = :* (:* D3 D5) D9
type B101100111 = :* (:* D3 D5) D9
type H166 = :* (:* D3 D5) D8
type D358 = :* (:* D3 D5) D8
type O546 = :* (:* D3 D5) D8
type B101100110 = :* (:* D3 D5) D8
type H165 = :* (:* D3 D5) D7
type D357 = :* (:* D3 D5) D7
type O545 = :* (:* D3 D5) D7
type B101100101 = :* (:* D3 D5) D7
type H164 = :* (:* D3 D5) D6
type D356 = :* (:* D3 D5) D6
type O544 = :* (:* D3 D5) D6
type B101100100 = :* (:* D3 D5) D6
type H163 = :* (:* D3 D5) D5
type D355 = :* (:* D3 D5) D5
type O543 = :* (:* D3 D5) D5
type B101100011 = :* (:* D3 D5) D5
type H162 = :* (:* D3 D5) D4
type D354 = :* (:* D3 D5) D4
type O542 = :* (:* D3 D5) D4
type B101100010 = :* (:* D3 D5) D4
type H161 = :* (:* D3 D5) D3
type D353 = :* (:* D3 D5) D3
type O541 = :* (:* D3 D5) D3
type B101100001 = :* (:* D3 D5) D3
type H160 = :* (:* D3 D5) D2
type D352 = :* (:* D3 D5) D2
type O540 = :* (:* D3 D5) D2
type B101100000 = :* (:* D3 D5) D2
type H15F = :* (:* D3 D5) D1
type D351 = :* (:* D3 D5) D1
type O537 = :* (:* D3 D5) D1
type B101011111 = :* (:* D3 D5) D1
type H15E = :* (:* D3 D5) D0
type D350 = :* (:* D3 D5) D0
type O536 = :* (:* D3 D5) D0
type B101011110 = :* (:* D3 D5) D0
type H15D = :* (:* D3 D4) D9
type D349 = :* (:* D3 D4) D9
type O535 = :* (:* D3 D4) D9
type B101011101 = :* (:* D3 D4) D9
type H15C = :* (:* D3 D4) D8
type D348 = :* (:* D3 D4) D8
type O534 = :* (:* D3 D4) D8
type B101011100 = :* (:* D3 D4) D8
type H15B = :* (:* D3 D4) D7
type D347 = :* (:* D3 D4) D7
type O533 = :* (:* D3 D4) D7
type B101011011 = :* (:* D3 D4) D7
type H15A = :* (:* D3 D4) D6
type D346 = :* (:* D3 D4) D6
type O532 = :* (:* D3 D4) D6
type B101011010 = :* (:* D3 D4) D6
type H159 = :* (:* D3 D4) D5
type D345 = :* (:* D3 D4) D5
type O531 = :* (:* D3 D4) D5
type B101011001 = :* (:* D3 D4) D5
type H158 = :* (:* D3 D4) D4
type D344 = :* (:* D3 D4) D4
type O530 = :* (:* D3 D4) D4
type B101011000 = :* (:* D3 D4) D4
type H157 = :* (:* D3 D4) D3
type D343 = :* (:* D3 D4) D3
type O527 = :* (:* D3 D4) D3
type B101010111 = :* (:* D3 D4) D3
type H156 = :* (:* D3 D4) D2
type D342 = :* (:* D3 D4) D2
type O526 = :* (:* D3 D4) D2
type B101010110 = :* (:* D3 D4) D2
type H155 = :* (:* D3 D4) D1
type D341 = :* (:* D3 D4) D1
type O525 = :* (:* D3 D4) D1
type B101010101 = :* (:* D3 D4) D1
type H154 = :* (:* D3 D4) D0
type D340 = :* (:* D3 D4) D0
type O524 = :* (:* D3 D4) D0
type B101010100 = :* (:* D3 D4) D0
type H153 = :* (:* D3 D3) D9
type D339 = :* (:* D3 D3) D9
type O523 = :* (:* D3 D3) D9
type B101010011 = :* (:* D3 D3) D9
type H152 = :* (:* D3 D3) D8
type D338 = :* (:* D3 D3) D8
type O522 = :* (:* D3 D3) D8
type B101010010 = :* (:* D3 D3) D8
type H151 = :* (:* D3 D3) D7
type D337 = :* (:* D3 D3) D7
type O521 = :* (:* D3 D3) D7
type B101010001 = :* (:* D3 D3) D7
type H150 = :* (:* D3 D3) D6
type D336 = :* (:* D3 D3) D6
type O520 = :* (:* D3 D3) D6
type B101010000 = :* (:* D3 D3) D6
type H14F = :* (:* D3 D3) D5
type D335 = :* (:* D3 D3) D5
type O517 = :* (:* D3 D3) D5
type B101001111 = :* (:* D3 D3) D5
type H14E = :* (:* D3 D3) D4
type D334 = :* (:* D3 D3) D4
type O516 = :* (:* D3 D3) D4
type B101001110 = :* (:* D3 D3) D4
type H14D = :* (:* D3 D3) D3
type D333 = :* (:* D3 D3) D3
type O515 = :* (:* D3 D3) D3
type B101001101 = :* (:* D3 D3) D3
type H14C = :* (:* D3 D3) D2
type D332 = :* (:* D3 D3) D2
type O514 = :* (:* D3 D3) D2
type B101001100 = :* (:* D3 D3) D2
type H14B = :* (:* D3 D3) D1
type D331 = :* (:* D3 D3) D1
type O513 = :* (:* D3 D3) D1
type B101001011 = :* (:* D3 D3) D1
type H14A = :* (:* D3 D3) D0
type D330 = :* (:* D3 D3) D0
type O512 = :* (:* D3 D3) D0
type B101001010 = :* (:* D3 D3) D0
type H149 = :* (:* D3 D2) D9
type D329 = :* (:* D3 D2) D9
type O511 = :* (:* D3 D2) D9
type B101001001 = :* (:* D3 D2) D9
type H148 = :* (:* D3 D2) D8
type D328 = :* (:* D3 D2) D8
type O510 = :* (:* D3 D2) D8
type B101001000 = :* (:* D3 D2) D8
type H147 = :* (:* D3 D2) D7
type D327 = :* (:* D3 D2) D7
type O507 = :* (:* D3 D2) D7
type B101000111 = :* (:* D3 D2) D7
type H146 = :* (:* D3 D2) D6
type D326 = :* (:* D3 D2) D6
type O506 = :* (:* D3 D2) D6
type B101000110 = :* (:* D3 D2) D6
type H145 = :* (:* D3 D2) D5
type D325 = :* (:* D3 D2) D5
type O505 = :* (:* D3 D2) D5
type B101000101 = :* (:* D3 D2) D5
type H144 = :* (:* D3 D2) D4
type D324 = :* (:* D3 D2) D4
type O504 = :* (:* D3 D2) D4
type B101000100 = :* (:* D3 D2) D4
type H143 = :* (:* D3 D2) D3
type D323 = :* (:* D3 D2) D3
type O503 = :* (:* D3 D2) D3
type B101000011 = :* (:* D3 D2) D3
type H142 = :* (:* D3 D2) D2
type D322 = :* (:* D3 D2) D2
type O502 = :* (:* D3 D2) D2
type B101000010 = :* (:* D3 D2) D2
type H141 = :* (:* D3 D2) D1
type D321 = :* (:* D3 D2) D1
type O501 = :* (:* D3 D2) D1
type B101000001 = :* (:* D3 D2) D1
type H140 = :* (:* D3 D2) D0
type D320 = :* (:* D3 D2) D0
type O500 = :* (:* D3 D2) D0
type B101000000 = :* (:* D3 D2) D0
type H13F = :* (:* D3 D1) D9
type D319 = :* (:* D3 D1) D9
type O477 = :* (:* D3 D1) D9
type B100111111 = :* (:* D3 D1) D9
type H13E = :* (:* D3 D1) D8
type D318 = :* (:* D3 D1) D8
type O476 = :* (:* D3 D1) D8
type B100111110 = :* (:* D3 D1) D8
type H13D = :* (:* D3 D1) D7
type D317 = :* (:* D3 D1) D7
type O475 = :* (:* D3 D1) D7
type B100111101 = :* (:* D3 D1) D7
type H13C = :* (:* D3 D1) D6
type D316 = :* (:* D3 D1) D6
type O474 = :* (:* D3 D1) D6
type B100111100 = :* (:* D3 D1) D6
type H13B = :* (:* D3 D1) D5
type D315 = :* (:* D3 D1) D5
type O473 = :* (:* D3 D1) D5
type B100111011 = :* (:* D3 D1) D5
type H13A = :* (:* D3 D1) D4
type D314 = :* (:* D3 D1) D4
type O472 = :* (:* D3 D1) D4
type B100111010 = :* (:* D3 D1) D4
type H139 = :* (:* D3 D1) D3
type D313 = :* (:* D3 D1) D3
type O471 = :* (:* D3 D1) D3
type B100111001 = :* (:* D3 D1) D3
type H138 = :* (:* D3 D1) D2
type D312 = :* (:* D3 D1) D2
type O470 = :* (:* D3 D1) D2
type B100111000 = :* (:* D3 D1) D2
type H137 = :* (:* D3 D1) D1
type D311 = :* (:* D3 D1) D1
type O467 = :* (:* D3 D1) D1
type B100110111 = :* (:* D3 D1) D1
type H136 = :* (:* D3 D1) D0
type D310 = :* (:* D3 D1) D0
type O466 = :* (:* D3 D1) D0
type B100110110 = :* (:* D3 D1) D0
type H135 = :* (:* D3 D0) D9
type D309 = :* (:* D3 D0) D9
type O465 = :* (:* D3 D0) D9
type B100110101 = :* (:* D3 D0) D9
type H134 = :* (:* D3 D0) D8
type D308 = :* (:* D3 D0) D8
type O464 = :* (:* D3 D0) D8
type B100110100 = :* (:* D3 D0) D8
type H133 = :* (:* D3 D0) D7
type D307 = :* (:* D3 D0) D7
type O463 = :* (:* D3 D0) D7
type B100110011 = :* (:* D3 D0) D7
type H132 = :* (:* D3 D0) D6
type D306 = :* (:* D3 D0) D6
type O462 = :* (:* D3 D0) D6
type B100110010 = :* (:* D3 D0) D6
type H131 = :* (:* D3 D0) D5
type D305 = :* (:* D3 D0) D5
type O461 = :* (:* D3 D0) D5
type B100110001 = :* (:* D3 D0) D5
type H130 = :* (:* D3 D0) D4
type D304 = :* (:* D3 D0) D4
type O460 = :* (:* D3 D0) D4
type B100110000 = :* (:* D3 D0) D4
type H12F = :* (:* D3 D0) D3
type D303 = :* (:* D3 D0) D3
type O457 = :* (:* D3 D0) D3
type B100101111 = :* (:* D3 D0) D3
type H12E = :* (:* D3 D0) D2
type D302 = :* (:* D3 D0) D2
type O456 = :* (:* D3 D0) D2
type B100101110 = :* (:* D3 D0) D2
type H12D = :* (:* D3 D0) D1
type D301 = :* (:* D3 D0) D1
type O455 = :* (:* D3 D0) D1
type B100101101 = :* (:* D3 D0) D1
type H12C = :* (:* D3 D0) D0
type D300 = :* (:* D3 D0) D0
type O454 = :* (:* D3 D0) D0
type B100101100 = :* (:* D3 D0) D0
type H12B = :* (:* D2 D9) D9
type D299 = :* (:* D2 D9) D9
type O453 = :* (:* D2 D9) D9
type B100101011 = :* (:* D2 D9) D9
type H12A = :* (:* D2 D9) D8
type D298 = :* (:* D2 D9) D8
type O452 = :* (:* D2 D9) D8
type B100101010 = :* (:* D2 D9) D8
type H129 = :* (:* D2 D9) D7
type D297 = :* (:* D2 D9) D7
type O451 = :* (:* D2 D9) D7
type B100101001 = :* (:* D2 D9) D7
type H128 = :* (:* D2 D9) D6
type D296 = :* (:* D2 D9) D6
type O450 = :* (:* D2 D9) D6
type B100101000 = :* (:* D2 D9) D6
type H127 = :* (:* D2 D9) D5
type D295 = :* (:* D2 D9) D5
type O447 = :* (:* D2 D9) D5
type B100100111 = :* (:* D2 D9) D5
type H126 = :* (:* D2 D9) D4
type D294 = :* (:* D2 D9) D4
type O446 = :* (:* D2 D9) D4
type B100100110 = :* (:* D2 D9) D4
type H125 = :* (:* D2 D9) D3
type D293 = :* (:* D2 D9) D3
type O445 = :* (:* D2 D9) D3
type B100100101 = :* (:* D2 D9) D3
type H124 = :* (:* D2 D9) D2
type D292 = :* (:* D2 D9) D2
type O444 = :* (:* D2 D9) D2
type B100100100 = :* (:* D2 D9) D2
type H123 = :* (:* D2 D9) D1
type D291 = :* (:* D2 D9) D1
type O443 = :* (:* D2 D9) D1
type B100100011 = :* (:* D2 D9) D1
type H122 = :* (:* D2 D9) D0
type D290 = :* (:* D2 D9) D0
type O442 = :* (:* D2 D9) D0
type B100100010 = :* (:* D2 D9) D0
type H121 = :* (:* D2 D8) D9
type D289 = :* (:* D2 D8) D9
type O441 = :* (:* D2 D8) D9
type B100100001 = :* (:* D2 D8) D9
type H120 = :* (:* D2 D8) D8
type D288 = :* (:* D2 D8) D8
type O440 = :* (:* D2 D8) D8
type B100100000 = :* (:* D2 D8) D8
type H11F = :* (:* D2 D8) D7
type D287 = :* (:* D2 D8) D7
type O437 = :* (:* D2 D8) D7
type B100011111 = :* (:* D2 D8) D7
type H11E = :* (:* D2 D8) D6
type D286 = :* (:* D2 D8) D6
type O436 = :* (:* D2 D8) D6
type B100011110 = :* (:* D2 D8) D6
type H11D = :* (:* D2 D8) D5
type D285 = :* (:* D2 D8) D5
type O435 = :* (:* D2 D8) D5
type B100011101 = :* (:* D2 D8) D5
type H11C = :* (:* D2 D8) D4
type D284 = :* (:* D2 D8) D4
type O434 = :* (:* D2 D8) D4
type B100011100 = :* (:* D2 D8) D4
type H11B = :* (:* D2 D8) D3
type D283 = :* (:* D2 D8) D3
type O433 = :* (:* D2 D8) D3
type B100011011 = :* (:* D2 D8) D3
type H11A = :* (:* D2 D8) D2
type D282 = :* (:* D2 D8) D2
type O432 = :* (:* D2 D8) D2
type B100011010 = :* (:* D2 D8) D2
type H119 = :* (:* D2 D8) D1
type D281 = :* (:* D2 D8) D1
type O431 = :* (:* D2 D8) D1
type B100011001 = :* (:* D2 D8) D1
type H118 = :* (:* D2 D8) D0
type D280 = :* (:* D2 D8) D0
type O430 = :* (:* D2 D8) D0
type B100011000 = :* (:* D2 D8) D0
type H117 = :* (:* D2 D7) D9
type D279 = :* (:* D2 D7) D9
type O427 = :* (:* D2 D7) D9
type B100010111 = :* (:* D2 D7) D9
type H116 = :* (:* D2 D7) D8
type D278 = :* (:* D2 D7) D8
type O426 = :* (:* D2 D7) D8
type B100010110 = :* (:* D2 D7) D8
type H115 = :* (:* D2 D7) D7
type D277 = :* (:* D2 D7) D7
type O425 = :* (:* D2 D7) D7
type B100010101 = :* (:* D2 D7) D7
type H114 = :* (:* D2 D7) D6
type D276 = :* (:* D2 D7) D6
type O424 = :* (:* D2 D7) D6
type B100010100 = :* (:* D2 D7) D6
type H113 = :* (:* D2 D7) D5
type D275 = :* (:* D2 D7) D5
type O423 = :* (:* D2 D7) D5
type B100010011 = :* (:* D2 D7) D5
type H112 = :* (:* D2 D7) D4
type D274 = :* (:* D2 D7) D4
type O422 = :* (:* D2 D7) D4
type B100010010 = :* (:* D2 D7) D4
type H111 = :* (:* D2 D7) D3
type D273 = :* (:* D2 D7) D3
type O421 = :* (:* D2 D7) D3
type B100010001 = :* (:* D2 D7) D3
type H110 = :* (:* D2 D7) D2
type D272 = :* (:* D2 D7) D2
type O420 = :* (:* D2 D7) D2
type B100010000 = :* (:* D2 D7) D2
type H10F = :* (:* D2 D7) D1
type D271 = :* (:* D2 D7) D1
type O417 = :* (:* D2 D7) D1
type B100001111 = :* (:* D2 D7) D1
type H10E = :* (:* D2 D7) D0
type D270 = :* (:* D2 D7) D0
type O416 = :* (:* D2 D7) D0
type B100001110 = :* (:* D2 D7) D0
type H10D = :* (:* D2 D6) D9
type D269 = :* (:* D2 D6) D9
type O415 = :* (:* D2 D6) D9
type B100001101 = :* (:* D2 D6) D9
type H10C = :* (:* D2 D6) D8
type D268 = :* (:* D2 D6) D8
type O414 = :* (:* D2 D6) D8
type B100001100 = :* (:* D2 D6) D8
type H10B = :* (:* D2 D6) D7
type D267 = :* (:* D2 D6) D7
type O413 = :* (:* D2 D6) D7
type B100001011 = :* (:* D2 D6) D7
type H10A = :* (:* D2 D6) D6
type D266 = :* (:* D2 D6) D6
type O412 = :* (:* D2 D6) D6
type B100001010 = :* (:* D2 D6) D6
type H109 = :* (:* D2 D6) D5
type D265 = :* (:* D2 D6) D5
type O411 = :* (:* D2 D6) D5
type B100001001 = :* (:* D2 D6) D5
type H108 = :* (:* D2 D6) D4
type D264 = :* (:* D2 D6) D4
type O410 = :* (:* D2 D6) D4
type B100001000 = :* (:* D2 D6) D4
type H107 = :* (:* D2 D6) D3
type D263 = :* (:* D2 D6) D3
type O407 = :* (:* D2 D6) D3
type B100000111 = :* (:* D2 D6) D3
type H106 = :* (:* D2 D6) D2
type D262 = :* (:* D2 D6) D2
type O406 = :* (:* D2 D6) D2
type B100000110 = :* (:* D2 D6) D2
type H105 = :* (:* D2 D6) D1
type D261 = :* (:* D2 D6) D1
type O405 = :* (:* D2 D6) D1
type B100000101 = :* (:* D2 D6) D1
type H104 = :* (:* D2 D6) D0
type D260 = :* (:* D2 D6) D0
type O404 = :* (:* D2 D6) D0
type B100000100 = :* (:* D2 D6) D0
type H103 = :* (:* D2 D5) D9
type D259 = :* (:* D2 D5) D9
type O403 = :* (:* D2 D5) D9
type B100000011 = :* (:* D2 D5) D9
type H102 = :* (:* D2 D5) D8
type D258 = :* (:* D2 D5) D8
type O402 = :* (:* D2 D5) D8
type B100000010 = :* (:* D2 D5) D8
type H101 = :* (:* D2 D5) D7
type D257 = :* (:* D2 D5) D7
type O401 = :* (:* D2 D5) D7
type B100000001 = :* (:* D2 D5) D7
type H100 = :* (:* D2 D5) D6
type D256 = :* (:* D2 D5) D6
type O400 = :* (:* D2 D5) D6
type B100000000 = :* (:* D2 D5) D6
type HFF = :* (:* D2 D5) D5
type D255 = :* (:* D2 D5) D5
type O377 = :* (:* D2 D5) D5
type B11111111 = :* (:* D2 D5) D5
type HFE = :* (:* D2 D5) D4
type D254 = :* (:* D2 D5) D4
type O376 = :* (:* D2 D5) D4
type B11111110 = :* (:* D2 D5) D4
type HFD = :* (:* D2 D5) D3
type D253 = :* (:* D2 D5) D3
type O375 = :* (:* D2 D5) D3
type B11111101 = :* (:* D2 D5) D3
type HFC = :* (:* D2 D5) D2
type D252 = :* (:* D2 D5) D2
type O374 = :* (:* D2 D5) D2
type B11111100 = :* (:* D2 D5) D2
type HFB = :* (:* D2 D5) D1
type D251 = :* (:* D2 D5) D1
type O373 = :* (:* D2 D5) D1
type B11111011 = :* (:* D2 D5) D1
type HFA = :* (:* D2 D5) D0
type D250 = :* (:* D2 D5) D0
type O372 = :* (:* D2 D5) D0
type B11111010 = :* (:* D2 D5) D0
type HF9 = :* (:* D2 D4) D9
type D249 = :* (:* D2 D4) D9
type O371 = :* (:* D2 D4) D9
type B11111001 = :* (:* D2 D4) D9
type HF8 = :* (:* D2 D4) D8
type D248 = :* (:* D2 D4) D8
type O370 = :* (:* D2 D4) D8
type B11111000 = :* (:* D2 D4) D8
type HF7 = :* (:* D2 D4) D7
type D247 = :* (:* D2 D4) D7
type O367 = :* (:* D2 D4) D7
type B11110111 = :* (:* D2 D4) D7
type HF6 = :* (:* D2 D4) D6
type D246 = :* (:* D2 D4) D6
type O366 = :* (:* D2 D4) D6
type B11110110 = :* (:* D2 D4) D6
type HF5 = :* (:* D2 D4) D5
type D245 = :* (:* D2 D4) D5
type O365 = :* (:* D2 D4) D5
type B11110101 = :* (:* D2 D4) D5
type HF4 = :* (:* D2 D4) D4
type D244 = :* (:* D2 D4) D4
type O364 = :* (:* D2 D4) D4
type B11110100 = :* (:* D2 D4) D4
type HF3 = :* (:* D2 D4) D3
type D243 = :* (:* D2 D4) D3
type O363 = :* (:* D2 D4) D3
type B11110011 = :* (:* D2 D4) D3
type HF2 = :* (:* D2 D4) D2
type D242 = :* (:* D2 D4) D2
type O362 = :* (:* D2 D4) D2
type B11110010 = :* (:* D2 D4) D2
type HF1 = :* (:* D2 D4) D1
type D241 = :* (:* D2 D4) D1
type O361 = :* (:* D2 D4) D1
type B11110001 = :* (:* D2 D4) D1
type HF0 = :* (:* D2 D4) D0
type D240 = :* (:* D2 D4) D0
type O360 = :* (:* D2 D4) D0
type B11110000 = :* (:* D2 D4) D0
type HEF = :* (:* D2 D3) D9
type D239 = :* (:* D2 D3) D9
type O357 = :* (:* D2 D3) D9
type B11101111 = :* (:* D2 D3) D9
type HEE = :* (:* D2 D3) D8
type D238 = :* (:* D2 D3) D8
type O356 = :* (:* D2 D3) D8
type B11101110 = :* (:* D2 D3) D8
type HED = :* (:* D2 D3) D7
type D237 = :* (:* D2 D3) D7
type O355 = :* (:* D2 D3) D7
type B11101101 = :* (:* D2 D3) D7
type HEC = :* (:* D2 D3) D6
type D236 = :* (:* D2 D3) D6
type O354 = :* (:* D2 D3) D6
type B11101100 = :* (:* D2 D3) D6
type HEB = :* (:* D2 D3) D5
type D235 = :* (:* D2 D3) D5
type O353 = :* (:* D2 D3) D5
type B11101011 = :* (:* D2 D3) D5
type HEA = :* (:* D2 D3) D4
type D234 = :* (:* D2 D3) D4
type O352 = :* (:* D2 D3) D4
type B11101010 = :* (:* D2 D3) D4
type HE9 = :* (:* D2 D3) D3
type D233 = :* (:* D2 D3) D3
type O351 = :* (:* D2 D3) D3
type B11101001 = :* (:* D2 D3) D3
type HE8 = :* (:* D2 D3) D2
type D232 = :* (:* D2 D3) D2
type O350 = :* (:* D2 D3) D2
type B11101000 = :* (:* D2 D3) D2
type HE7 = :* (:* D2 D3) D1
type D231 = :* (:* D2 D3) D1
type O347 = :* (:* D2 D3) D1
type B11100111 = :* (:* D2 D3) D1
type HE6 = :* (:* D2 D3) D0
type D230 = :* (:* D2 D3) D0
type O346 = :* (:* D2 D3) D0
type B11100110 = :* (:* D2 D3) D0
type HE5 = :* (:* D2 D2) D9
type D229 = :* (:* D2 D2) D9
type O345 = :* (:* D2 D2) D9
type B11100101 = :* (:* D2 D2) D9
type HE4 = :* (:* D2 D2) D8
type D228 = :* (:* D2 D2) D8
type O344 = :* (:* D2 D2) D8
type B11100100 = :* (:* D2 D2) D8
type HE3 = :* (:* D2 D2) D7
type D227 = :* (:* D2 D2) D7
type O343 = :* (:* D2 D2) D7
type B11100011 = :* (:* D2 D2) D7
type HE2 = :* (:* D2 D2) D6
type D226 = :* (:* D2 D2) D6
type O342 = :* (:* D2 D2) D6
type B11100010 = :* (:* D2 D2) D6
type HE1 = :* (:* D2 D2) D5
type D225 = :* (:* D2 D2) D5
type O341 = :* (:* D2 D2) D5
type B11100001 = :* (:* D2 D2) D5
type HE0 = :* (:* D2 D2) D4
type D224 = :* (:* D2 D2) D4
type O340 = :* (:* D2 D2) D4
type B11100000 = :* (:* D2 D2) D4
type HDF = :* (:* D2 D2) D3
type D223 = :* (:* D2 D2) D3
type O337 = :* (:* D2 D2) D3
type B11011111 = :* (:* D2 D2) D3
type HDE = :* (:* D2 D2) D2
type D222 = :* (:* D2 D2) D2
type O336 = :* (:* D2 D2) D2
type B11011110 = :* (:* D2 D2) D2
type HDD = :* (:* D2 D2) D1
type D221 = :* (:* D2 D2) D1
type O335 = :* (:* D2 D2) D1
type B11011101 = :* (:* D2 D2) D1
type HDC = :* (:* D2 D2) D0
type D220 = :* (:* D2 D2) D0
type O334 = :* (:* D2 D2) D0
type B11011100 = :* (:* D2 D2) D0
type HDB = :* (:* D2 D1) D9
type D219 = :* (:* D2 D1) D9
type O333 = :* (:* D2 D1) D9
type B11011011 = :* (:* D2 D1) D9
type HDA = :* (:* D2 D1) D8
type D218 = :* (:* D2 D1) D8
type O332 = :* (:* D2 D1) D8
type B11011010 = :* (:* D2 D1) D8
type HD9 = :* (:* D2 D1) D7
type D217 = :* (:* D2 D1) D7
type O331 = :* (:* D2 D1) D7
type B11011001 = :* (:* D2 D1) D7
type HD8 = :* (:* D2 D1) D6
type D216 = :* (:* D2 D1) D6
type O330 = :* (:* D2 D1) D6
type B11011000 = :* (:* D2 D1) D6
type HD7 = :* (:* D2 D1) D5
type D215 = :* (:* D2 D1) D5
type O327 = :* (:* D2 D1) D5
type B11010111 = :* (:* D2 D1) D5
type HD6 = :* (:* D2 D1) D4
type D214 = :* (:* D2 D1) D4
type O326 = :* (:* D2 D1) D4
type B11010110 = :* (:* D2 D1) D4
type HD5 = :* (:* D2 D1) D3
type D213 = :* (:* D2 D1) D3
type O325 = :* (:* D2 D1) D3
type B11010101 = :* (:* D2 D1) D3
type HD4 = :* (:* D2 D1) D2
type D212 = :* (:* D2 D1) D2
type O324 = :* (:* D2 D1) D2
type B11010100 = :* (:* D2 D1) D2
type HD3 = :* (:* D2 D1) D1
type D211 = :* (:* D2 D1) D1
type O323 = :* (:* D2 D1) D1
type B11010011 = :* (:* D2 D1) D1
type HD2 = :* (:* D2 D1) D0
type D210 = :* (:* D2 D1) D0
type O322 = :* (:* D2 D1) D0
type B11010010 = :* (:* D2 D1) D0
type HD1 = :* (:* D2 D0) D9
type D209 = :* (:* D2 D0) D9
type O321 = :* (:* D2 D0) D9
type B11010001 = :* (:* D2 D0) D9
type HD0 = :* (:* D2 D0) D8
type D208 = :* (:* D2 D0) D8
type O320 = :* (:* D2 D0) D8
type B11010000 = :* (:* D2 D0) D8
type HCF = :* (:* D2 D0) D7
type D207 = :* (:* D2 D0) D7
type O317 = :* (:* D2 D0) D7
type B11001111 = :* (:* D2 D0) D7
type HCE = :* (:* D2 D0) D6
type D206 = :* (:* D2 D0) D6
type O316 = :* (:* D2 D0) D6
type B11001110 = :* (:* D2 D0) D6
type HCD = :* (:* D2 D0) D5
type D205 = :* (:* D2 D0) D5
type O315 = :* (:* D2 D0) D5
type B11001101 = :* (:* D2 D0) D5
type HCC = :* (:* D2 D0) D4
type D204 = :* (:* D2 D0) D4
type O314 = :* (:* D2 D0) D4
type B11001100 = :* (:* D2 D0) D4
type HCB = :* (:* D2 D0) D3
type D203 = :* (:* D2 D0) D3
type O313 = :* (:* D2 D0) D3
type B11001011 = :* (:* D2 D0) D3
type HCA = :* (:* D2 D0) D2
type D202 = :* (:* D2 D0) D2
type O312 = :* (:* D2 D0) D2
type B11001010 = :* (:* D2 D0) D2
type HC9 = :* (:* D2 D0) D1
type D201 = :* (:* D2 D0) D1
type O311 = :* (:* D2 D0) D1
type B11001001 = :* (:* D2 D0) D1
type HC8 = :* (:* D2 D0) D0
type D200 = :* (:* D2 D0) D0
type O310 = :* (:* D2 D0) D0
type B11001000 = :* (:* D2 D0) D0
type HC7 = :* (:* D1 D9) D9
type D199 = :* (:* D1 D9) D9
type O307 = :* (:* D1 D9) D9
type B11000111 = :* (:* D1 D9) D9
type HC6 = :* (:* D1 D9) D8
type D198 = :* (:* D1 D9) D8
type O306 = :* (:* D1 D9) D8
type B11000110 = :* (:* D1 D9) D8
type HC5 = :* (:* D1 D9) D7
type D197 = :* (:* D1 D9) D7
type O305 = :* (:* D1 D9) D7
type B11000101 = :* (:* D1 D9) D7
type HC4 = :* (:* D1 D9) D6
type D196 = :* (:* D1 D9) D6
type O304 = :* (:* D1 D9) D6
type B11000100 = :* (:* D1 D9) D6
type HC3 = :* (:* D1 D9) D5
type D195 = :* (:* D1 D9) D5
type O303 = :* (:* D1 D9) D5
type B11000011 = :* (:* D1 D9) D5
type HC2 = :* (:* D1 D9) D4
type D194 = :* (:* D1 D9) D4
type O302 = :* (:* D1 D9) D4
type B11000010 = :* (:* D1 D9) D4
type HC1 = :* (:* D1 D9) D3
type D193 = :* (:* D1 D9) D3
type O301 = :* (:* D1 D9) D3
type B11000001 = :* (:* D1 D9) D3
type HC0 = :* (:* D1 D9) D2
type D192 = :* (:* D1 D9) D2
type O300 = :* (:* D1 D9) D2
type B11000000 = :* (:* D1 D9) D2
type HBF = :* (:* D1 D9) D1
type D191 = :* (:* D1 D9) D1
type O277 = :* (:* D1 D9) D1
type B10111111 = :* (:* D1 D9) D1
type HBE = :* (:* D1 D9) D0
type D190 = :* (:* D1 D9) D0
type O276 = :* (:* D1 D9) D0
type B10111110 = :* (:* D1 D9) D0
type HBD = :* (:* D1 D8) D9
type D189 = :* (:* D1 D8) D9
type O275 = :* (:* D1 D8) D9
type B10111101 = :* (:* D1 D8) D9
type HBC = :* (:* D1 D8) D8
type D188 = :* (:* D1 D8) D8
type O274 = :* (:* D1 D8) D8
type B10111100 = :* (:* D1 D8) D8
type HBB = :* (:* D1 D8) D7
type D187 = :* (:* D1 D8) D7
type O273 = :* (:* D1 D8) D7
type B10111011 = :* (:* D1 D8) D7
type HBA = :* (:* D1 D8) D6
type D186 = :* (:* D1 D8) D6
type O272 = :* (:* D1 D8) D6
type B10111010 = :* (:* D1 D8) D6
type HB9 = :* (:* D1 D8) D5
type D185 = :* (:* D1 D8) D5
type O271 = :* (:* D1 D8) D5
type B10111001 = :* (:* D1 D8) D5
type HB8 = :* (:* D1 D8) D4
type D184 = :* (:* D1 D8) D4
type O270 = :* (:* D1 D8) D4
type B10111000 = :* (:* D1 D8) D4
type HB7 = :* (:* D1 D8) D3
type D183 = :* (:* D1 D8) D3
type O267 = :* (:* D1 D8) D3
type B10110111 = :* (:* D1 D8) D3
type HB6 = :* (:* D1 D8) D2
type D182 = :* (:* D1 D8) D2
type O266 = :* (:* D1 D8) D2
type B10110110 = :* (:* D1 D8) D2
type HB5 = :* (:* D1 D8) D1
type D181 = :* (:* D1 D8) D1
type O265 = :* (:* D1 D8) D1
type B10110101 = :* (:* D1 D8) D1
type HB4 = :* (:* D1 D8) D0
type D180 = :* (:* D1 D8) D0
type O264 = :* (:* D1 D8) D0
type B10110100 = :* (:* D1 D8) D0
type HB3 = :* (:* D1 D7) D9
type D179 = :* (:* D1 D7) D9
type O263 = :* (:* D1 D7) D9
type B10110011 = :* (:* D1 D7) D9
type HB2 = :* (:* D1 D7) D8
type D178 = :* (:* D1 D7) D8
type O262 = :* (:* D1 D7) D8
type B10110010 = :* (:* D1 D7) D8
type HB1 = :* (:* D1 D7) D7
type D177 = :* (:* D1 D7) D7
type O261 = :* (:* D1 D7) D7
type B10110001 = :* (:* D1 D7) D7
type HB0 = :* (:* D1 D7) D6
type D176 = :* (:* D1 D7) D6
type O260 = :* (:* D1 D7) D6
type B10110000 = :* (:* D1 D7) D6
type HAF = :* (:* D1 D7) D5
type D175 = :* (:* D1 D7) D5
type O257 = :* (:* D1 D7) D5
type B10101111 = :* (:* D1 D7) D5
type HAE = :* (:* D1 D7) D4
type D174 = :* (:* D1 D7) D4
type O256 = :* (:* D1 D7) D4
type B10101110 = :* (:* D1 D7) D4
type HAD = :* (:* D1 D7) D3
type D173 = :* (:* D1 D7) D3
type O255 = :* (:* D1 D7) D3
type B10101101 = :* (:* D1 D7) D3
type HAC = :* (:* D1 D7) D2
type D172 = :* (:* D1 D7) D2
type O254 = :* (:* D1 D7) D2
type B10101100 = :* (:* D1 D7) D2
type HAB = :* (:* D1 D7) D1
type D171 = :* (:* D1 D7) D1
type O253 = :* (:* D1 D7) D1
type B10101011 = :* (:* D1 D7) D1
type HAA = :* (:* D1 D7) D0
type D170 = :* (:* D1 D7) D0
type O252 = :* (:* D1 D7) D0
type B10101010 = :* (:* D1 D7) D0
type HA9 = :* (:* D1 D6) D9
type D169 = :* (:* D1 D6) D9
type O251 = :* (:* D1 D6) D9
type B10101001 = :* (:* D1 D6) D9
type HA8 = :* (:* D1 D6) D8
type D168 = :* (:* D1 D6) D8
type O250 = :* (:* D1 D6) D8
type B10101000 = :* (:* D1 D6) D8
type HA7 = :* (:* D1 D6) D7
type D167 = :* (:* D1 D6) D7
type O247 = :* (:* D1 D6) D7
type B10100111 = :* (:* D1 D6) D7
type HA6 = :* (:* D1 D6) D6
type D166 = :* (:* D1 D6) D6
type O246 = :* (:* D1 D6) D6
type B10100110 = :* (:* D1 D6) D6
type HA5 = :* (:* D1 D6) D5
type D165 = :* (:* D1 D6) D5
type O245 = :* (:* D1 D6) D5
type B10100101 = :* (:* D1 D6) D5
type HA4 = :* (:* D1 D6) D4
type D164 = :* (:* D1 D6) D4
type O244 = :* (:* D1 D6) D4
type B10100100 = :* (:* D1 D6) D4
type HA3 = :* (:* D1 D6) D3
type D163 = :* (:* D1 D6) D3
type O243 = :* (:* D1 D6) D3
type B10100011 = :* (:* D1 D6) D3
type HA2 = :* (:* D1 D6) D2
type D162 = :* (:* D1 D6) D2
type O242 = :* (:* D1 D6) D2
type B10100010 = :* (:* D1 D6) D2
type HA1 = :* (:* D1 D6) D1
type D161 = :* (:* D1 D6) D1
type O241 = :* (:* D1 D6) D1
type B10100001 = :* (:* D1 D6) D1
type HA0 = :* (:* D1 D6) D0
type D160 = :* (:* D1 D6) D0
type O240 = :* (:* D1 D6) D0
type B10100000 = :* (:* D1 D6) D0
type H9F = :* (:* D1 D5) D9
type D159 = :* (:* D1 D5) D9
type O237 = :* (:* D1 D5) D9
type B10011111 = :* (:* D1 D5) D9
type H9E = :* (:* D1 D5) D8
type D158 = :* (:* D1 D5) D8
type O236 = :* (:* D1 D5) D8
type B10011110 = :* (:* D1 D5) D8
type H9D = :* (:* D1 D5) D7
type D157 = :* (:* D1 D5) D7
type O235 = :* (:* D1 D5) D7
type B10011101 = :* (:* D1 D5) D7
type H9C = :* (:* D1 D5) D6
type D156 = :* (:* D1 D5) D6
type O234 = :* (:* D1 D5) D6
type B10011100 = :* (:* D1 D5) D6
type H9B = :* (:* D1 D5) D5
type D155 = :* (:* D1 D5) D5
type O233 = :* (:* D1 D5) D5
type B10011011 = :* (:* D1 D5) D5
type H9A = :* (:* D1 D5) D4
type D154 = :* (:* D1 D5) D4
type O232 = :* (:* D1 D5) D4
type B10011010 = :* (:* D1 D5) D4
type H99 = :* (:* D1 D5) D3
type D153 = :* (:* D1 D5) D3
type O231 = :* (:* D1 D5) D3
type B10011001 = :* (:* D1 D5) D3
type H98 = :* (:* D1 D5) D2
type D152 = :* (:* D1 D5) D2
type O230 = :* (:* D1 D5) D2
type B10011000 = :* (:* D1 D5) D2
type H97 = :* (:* D1 D5) D1
type D151 = :* (:* D1 D5) D1
type O227 = :* (:* D1 D5) D1
type B10010111 = :* (:* D1 D5) D1
type H96 = :* (:* D1 D5) D0
type D150 = :* (:* D1 D5) D0
type O226 = :* (:* D1 D5) D0
type B10010110 = :* (:* D1 D5) D0
type H95 = :* (:* D1 D4) D9
type D149 = :* (:* D1 D4) D9
type O225 = :* (:* D1 D4) D9
type B10010101 = :* (:* D1 D4) D9
type H94 = :* (:* D1 D4) D8
type D148 = :* (:* D1 D4) D8
type O224 = :* (:* D1 D4) D8
type B10010100 = :* (:* D1 D4) D8
type H93 = :* (:* D1 D4) D7
type D147 = :* (:* D1 D4) D7
type O223 = :* (:* D1 D4) D7
type B10010011 = :* (:* D1 D4) D7
type H92 = :* (:* D1 D4) D6
type D146 = :* (:* D1 D4) D6
type O222 = :* (:* D1 D4) D6
type B10010010 = :* (:* D1 D4) D6
type H91 = :* (:* D1 D4) D5
type D145 = :* (:* D1 D4) D5
type O221 = :* (:* D1 D4) D5
type B10010001 = :* (:* D1 D4) D5
type H90 = :* (:* D1 D4) D4
type D144 = :* (:* D1 D4) D4
type O220 = :* (:* D1 D4) D4
type B10010000 = :* (:* D1 D4) D4
type H8F = :* (:* D1 D4) D3
type D143 = :* (:* D1 D4) D3
type O217 = :* (:* D1 D4) D3
type B10001111 = :* (:* D1 D4) D3
type H8E = :* (:* D1 D4) D2
type D142 = :* (:* D1 D4) D2
type O216 = :* (:* D1 D4) D2
type B10001110 = :* (:* D1 D4) D2
type H8D = :* (:* D1 D4) D1
type D141 = :* (:* D1 D4) D1
type O215 = :* (:* D1 D4) D1
type B10001101 = :* (:* D1 D4) D1
type H8C = :* (:* D1 D4) D0
type D140 = :* (:* D1 D4) D0
type O214 = :* (:* D1 D4) D0
type B10001100 = :* (:* D1 D4) D0
type H8B = :* (:* D1 D3) D9
type D139 = :* (:* D1 D3) D9
type O213 = :* (:* D1 D3) D9
type B10001011 = :* (:* D1 D3) D9
type H8A = :* (:* D1 D3) D8
type D138 = :* (:* D1 D3) D8
type O212 = :* (:* D1 D3) D8
type B10001010 = :* (:* D1 D3) D8
type H89 = :* (:* D1 D3) D7
type D137 = :* (:* D1 D3) D7
type O211 = :* (:* D1 D3) D7
type B10001001 = :* (:* D1 D3) D7
type H88 = :* (:* D1 D3) D6
type D136 = :* (:* D1 D3) D6
type O210 = :* (:* D1 D3) D6
type B10001000 = :* (:* D1 D3) D6
type H87 = :* (:* D1 D3) D5
type D135 = :* (:* D1 D3) D5
type O207 = :* (:* D1 D3) D5
type B10000111 = :* (:* D1 D3) D5
type H86 = :* (:* D1 D3) D4
type D134 = :* (:* D1 D3) D4
type O206 = :* (:* D1 D3) D4
type B10000110 = :* (:* D1 D3) D4
type H85 = :* (:* D1 D3) D3
type D133 = :* (:* D1 D3) D3
type O205 = :* (:* D1 D3) D3
type B10000101 = :* (:* D1 D3) D3
type H84 = :* (:* D1 D3) D2
type D132 = :* (:* D1 D3) D2
type O204 = :* (:* D1 D3) D2
type B10000100 = :* (:* D1 D3) D2
type H83 = :* (:* D1 D3) D1
type D131 = :* (:* D1 D3) D1
type O203 = :* (:* D1 D3) D1
type B10000011 = :* (:* D1 D3) D1
type H82 = :* (:* D1 D3) D0
type D130 = :* (:* D1 D3) D0
type O202 = :* (:* D1 D3) D0
type B10000010 = :* (:* D1 D3) D0
type H81 = :* (:* D1 D2) D9
type D129 = :* (:* D1 D2) D9
type O201 = :* (:* D1 D2) D9
type B10000001 = :* (:* D1 D2) D9
type H80 = :* (:* D1 D2) D8
type D128 = :* (:* D1 D2) D8
type O200 = :* (:* D1 D2) D8
type B10000000 = :* (:* D1 D2) D8
type H7F = :* (:* D1 D2) D7
type D127 = :* (:* D1 D2) D7
type O177 = :* (:* D1 D2) D7
type B1111111 = :* (:* D1 D2) D7
type H7E = :* (:* D1 D2) D6
type D126 = :* (:* D1 D2) D6
type O176 = :* (:* D1 D2) D6
type B1111110 = :* (:* D1 D2) D6
type H7D = :* (:* D1 D2) D5
type D125 = :* (:* D1 D2) D5
type O175 = :* (:* D1 D2) D5
type B1111101 = :* (:* D1 D2) D5
type H7C = :* (:* D1 D2) D4
type D124 = :* (:* D1 D2) D4
type O174 = :* (:* D1 D2) D4
type B1111100 = :* (:* D1 D2) D4
type H7B = :* (:* D1 D2) D3
type D123 = :* (:* D1 D2) D3
type O173 = :* (:* D1 D2) D3
type B1111011 = :* (:* D1 D2) D3
type H7A = :* (:* D1 D2) D2
type D122 = :* (:* D1 D2) D2
type O172 = :* (:* D1 D2) D2
type B1111010 = :* (:* D1 D2) D2
type H79 = :* (:* D1 D2) D1
type D121 = :* (:* D1 D2) D1
type O171 = :* (:* D1 D2) D1
type B1111001 = :* (:* D1 D2) D1
type H78 = :* (:* D1 D2) D0
type D120 = :* (:* D1 D2) D0
type O170 = :* (:* D1 D2) D0
type B1111000 = :* (:* D1 D2) D0
type H77 = :* (:* D1 D1) D9
type D119 = :* (:* D1 D1) D9
type O167 = :* (:* D1 D1) D9
type B1110111 = :* (:* D1 D1) D9
type H76 = :* (:* D1 D1) D8
type D118 = :* (:* D1 D1) D8
type O166 = :* (:* D1 D1) D8
type B1110110 = :* (:* D1 D1) D8
type H75 = :* (:* D1 D1) D7
type D117 = :* (:* D1 D1) D7
type O165 = :* (:* D1 D1) D7
type B1110101 = :* (:* D1 D1) D7
type H74 = :* (:* D1 D1) D6
type D116 = :* (:* D1 D1) D6
type O164 = :* (:* D1 D1) D6
type B1110100 = :* (:* D1 D1) D6
type H73 = :* (:* D1 D1) D5
type D115 = :* (:* D1 D1) D5
type O163 = :* (:* D1 D1) D5
type B1110011 = :* (:* D1 D1) D5
type H72 = :* (:* D1 D1) D4
type D114 = :* (:* D1 D1) D4
type O162 = :* (:* D1 D1) D4
type B1110010 = :* (:* D1 D1) D4
type H71 = :* (:* D1 D1) D3
type D113 = :* (:* D1 D1) D3
type O161 = :* (:* D1 D1) D3
type B1110001 = :* (:* D1 D1) D3
type H70 = :* (:* D1 D1) D2
type D112 = :* (:* D1 D1) D2
type O160 = :* (:* D1 D1) D2
type B1110000 = :* (:* D1 D1) D2
type H6F = :* (:* D1 D1) D1
type D111 = :* (:* D1 D1) D1
type O157 = :* (:* D1 D1) D1
type B1101111 = :* (:* D1 D1) D1
type H6E = :* (:* D1 D1) D0
type D110 = :* (:* D1 D1) D0
type O156 = :* (:* D1 D1) D0
type B1101110 = :* (:* D1 D1) D0
type H6D = :* (:* D1 D0) D9
type D109 = :* (:* D1 D0) D9
type O155 = :* (:* D1 D0) D9
type B1101101 = :* (:* D1 D0) D9
type H6C = :* (:* D1 D0) D8
type D108 = :* (:* D1 D0) D8
type O154 = :* (:* D1 D0) D8
type B1101100 = :* (:* D1 D0) D8
type H6B = :* (:* D1 D0) D7
type D107 = :* (:* D1 D0) D7
type O153 = :* (:* D1 D0) D7
type B1101011 = :* (:* D1 D0) D7
type H6A = :* (:* D1 D0) D6
type D106 = :* (:* D1 D0) D6
type O152 = :* (:* D1 D0) D6
type B1101010 = :* (:* D1 D0) D6
type H69 = :* (:* D1 D0) D5
type D105 = :* (:* D1 D0) D5
type O151 = :* (:* D1 D0) D5
type B1101001 = :* (:* D1 D0) D5
type H68 = :* (:* D1 D0) D4
type D104 = :* (:* D1 D0) D4
type O150 = :* (:* D1 D0) D4
type B1101000 = :* (:* D1 D0) D4
type H67 = :* (:* D1 D0) D3
type D103 = :* (:* D1 D0) D3
type O147 = :* (:* D1 D0) D3
type B1100111 = :* (:* D1 D0) D3
type H66 = :* (:* D1 D0) D2
type D102 = :* (:* D1 D0) D2
type O146 = :* (:* D1 D0) D2
type B1100110 = :* (:* D1 D0) D2
type H65 = :* (:* D1 D0) D1
type D101 = :* (:* D1 D0) D1
type O145 = :* (:* D1 D0) D1
type B1100101 = :* (:* D1 D0) D1
type H64 = :* (:* D1 D0) D0
type D100 = :* (:* D1 D0) D0
type O144 = :* (:* D1 D0) D0
type B1100100 = :* (:* D1 D0) D0
type H63 = :* D9 D9
type D99 = :* D9 D9
type O143 = :* D9 D9
type B1100011 = :* D9 D9
type H62 = :* D9 D8
type D98 = :* D9 D8
type O142 = :* D9 D8
type B1100010 = :* D9 D8
type H61 = :* D9 D7
type D97 = :* D9 D7
type O141 = :* D9 D7
type B1100001 = :* D9 D7
type H60 = :* D9 D6
type D96 = :* D9 D6
type O140 = :* D9 D6
type B1100000 = :* D9 D6
type H5F = :* D9 D5
type D95 = :* D9 D5
type O137 = :* D9 D5
type B1011111 = :* D9 D5
type H5E = :* D9 D4
type D94 = :* D9 D4
type O136 = :* D9 D4
type B1011110 = :* D9 D4
type H5D = :* D9 D3
type D93 = :* D9 D3
type O135 = :* D9 D3
type B1011101 = :* D9 D3
type H5C = :* D9 D2
type D92 = :* D9 D2
type O134 = :* D9 D2
type B1011100 = :* D9 D2
type H5B = :* D9 D1
type D91 = :* D9 D1
type O133 = :* D9 D1
type B1011011 = :* D9 D1
type H5A = :* D9 D0
type D90 = :* D9 D0
type O132 = :* D9 D0
type B1011010 = :* D9 D0
type H59 = :* D8 D9
type D89 = :* D8 D9
type O131 = :* D8 D9
type B1011001 = :* D8 D9
type H58 = :* D8 D8
type D88 = :* D8 D8
type O130 = :* D8 D8
type B1011000 = :* D8 D8
type H57 = :* D8 D7
type D87 = :* D8 D7
type O127 = :* D8 D7
type B1010111 = :* D8 D7
type H56 = :* D8 D6
type D86 = :* D8 D6
type O126 = :* D8 D6
type B1010110 = :* D8 D6
type H55 = :* D8 D5
type D85 = :* D8 D5
type O125 = :* D8 D5
type B1010101 = :* D8 D5
type H54 = :* D8 D4
type D84 = :* D8 D4
type O124 = :* D8 D4
type B1010100 = :* D8 D4
type H53 = :* D8 D3
type D83 = :* D8 D3
type O123 = :* D8 D3
type B1010011 = :* D8 D3
type H52 = :* D8 D2
type D82 = :* D8 D2
type O122 = :* D8 D2
type B1010010 = :* D8 D2
type H51 = :* D8 D1
type D81 = :* D8 D1
type O121 = :* D8 D1
type B1010001 = :* D8 D1
type H50 = :* D8 D0
type D80 = :* D8 D0
type O120 = :* D8 D0
type B1010000 = :* D8 D0
type H4F = :* D7 D9
type D79 = :* D7 D9
type O117 = :* D7 D9
type B1001111 = :* D7 D9
type H4E = :* D7 D8
type D78 = :* D7 D8
type O116 = :* D7 D8
type B1001110 = :* D7 D8
type H4D = :* D7 D7
type D77 = :* D7 D7
type O115 = :* D7 D7
type B1001101 = :* D7 D7
type H4C = :* D7 D6
type D76 = :* D7 D6
type O114 = :* D7 D6
type B1001100 = :* D7 D6
type H4B = :* D7 D5
type D75 = :* D7 D5
type O113 = :* D7 D5
type B1001011 = :* D7 D5
type H4A = :* D7 D4
type D74 = :* D7 D4
type O112 = :* D7 D4
type B1001010 = :* D7 D4
type H49 = :* D7 D3
type D73 = :* D7 D3
type O111 = :* D7 D3
type B1001001 = :* D7 D3
type H48 = :* D7 D2
type D72 = :* D7 D2
type O110 = :* D7 D2
type B1001000 = :* D7 D2
type H47 = :* D7 D1
type D71 = :* D7 D1
type O107 = :* D7 D1
type B1000111 = :* D7 D1
type H46 = :* D7 D0
type D70 = :* D7 D0
type O106 = :* D7 D0
type B1000110 = :* D7 D0
type H45 = :* D6 D9
type D69 = :* D6 D9
type O105 = :* D6 D9
type B1000101 = :* D6 D9
type H44 = :* D6 D8
type D68 = :* D6 D8
type O104 = :* D6 D8
type B1000100 = :* D6 D8
type H43 = :* D6 D7
type D67 = :* D6 D7
type O103 = :* D6 D7
type B1000011 = :* D6 D7
type H42 = :* D6 D6
type D66 = :* D6 D6
type O102 = :* D6 D6
type B1000010 = :* D6 D6
type H41 = :* D6 D5
type D65 = :* D6 D5
type O101 = :* D6 D5
type B1000001 = :* D6 D5
type H40 = :* D6 D4
type D64 = :* D6 D4
type O100 = :* D6 D4
type B1000000 = :* D6 D4
type H3F = :* D6 D3
type D63 = :* D6 D3
type O77 = :* D6 D3
type B111111 = :* D6 D3
type H3E = :* D6 D2
type D62 = :* D6 D2
type O76 = :* D6 D2
type B111110 = :* D6 D2
type H3D = :* D6 D1
type D61 = :* D6 D1
type O75 = :* D6 D1
type B111101 = :* D6 D1
type H3C = :* D6 D0
type D60 = :* D6 D0
type O74 = :* D6 D0
type B111100 = :* D6 D0
type H3B = :* D5 D9
type D59 = :* D5 D9
type O73 = :* D5 D9
type B111011 = :* D5 D9
type H3A = :* D5 D8
type D58 = :* D5 D8
type O72 = :* D5 D8
type B111010 = :* D5 D8
type H39 = :* D5 D7
type D57 = :* D5 D7
type O71 = :* D5 D7
type B111001 = :* D5 D7
type H38 = :* D5 D6
type D56 = :* D5 D6
type O70 = :* D5 D6
type B111000 = :* D5 D6
type H37 = :* D5 D5
type D55 = :* D5 D5
type O67 = :* D5 D5
type B110111 = :* D5 D5
type H36 = :* D5 D4
type D54 = :* D5 D4
type O66 = :* D5 D4
type B110110 = :* D5 D4
type H35 = :* D5 D3
type D53 = :* D5 D3
type O65 = :* D5 D3
type B110101 = :* D5 D3
type H34 = :* D5 D2
type D52 = :* D5 D2
type O64 = :* D5 D2
type B110100 = :* D5 D2
type H33 = :* D5 D1
type D51 = :* D5 D1
type O63 = :* D5 D1
type B110011 = :* D5 D1
type H32 = :* D5 D0
type D50 = :* D5 D0
type O62 = :* D5 D0
type B110010 = :* D5 D0
type H31 = :* D4 D9
type D49 = :* D4 D9
type O61 = :* D4 D9
type B110001 = :* D4 D9
type H30 = :* D4 D8
type D48 = :* D4 D8
type O60 = :* D4 D8
type B110000 = :* D4 D8
type H2F = :* D4 D7
type D47 = :* D4 D7
type O57 = :* D4 D7
type B101111 = :* D4 D7
type H2E = :* D4 D6
type D46 = :* D4 D6
type O56 = :* D4 D6
type B101110 = :* D4 D6
type H2D = :* D4 D5
type D45 = :* D4 D5
type O55 = :* D4 D5
type B101101 = :* D4 D5
type H2C = :* D4 D4
type D44 = :* D4 D4
type O54 = :* D4 D4
type B101100 = :* D4 D4
type H2B = :* D4 D3
type D43 = :* D4 D3
type O53 = :* D4 D3
type B101011 = :* D4 D3
type H2A = :* D4 D2
type D42 = :* D4 D2
type O52 = :* D4 D2
type B101010 = :* D4 D2
type H29 = :* D4 D1
type D41 = :* D4 D1
type O51 = :* D4 D1
type B101001 = :* D4 D1
type H28 = :* D4 D0
type D40 = :* D4 D0
type O50 = :* D4 D0
type B101000 = :* D4 D0
type H27 = :* D3 D9
type D39 = :* D3 D9
type O47 = :* D3 D9
type B100111 = :* D3 D9
type H26 = :* D3 D8
type D38 = :* D3 D8
type O46 = :* D3 D8
type B100110 = :* D3 D8
type H25 = :* D3 D7
type D37 = :* D3 D7
type O45 = :* D3 D7
type B100101 = :* D3 D7
type H24 = :* D3 D6
type D36 = :* D3 D6
type O44 = :* D3 D6
type B100100 = :* D3 D6
type H23 = :* D3 D5
type D35 = :* D3 D5
type O43 = :* D3 D5
type B100011 = :* D3 D5
type H22 = :* D3 D4
type D34 = :* D3 D4
type O42 = :* D3 D4
type B100010 = :* D3 D4
type H21 = :* D3 D3
type D33 = :* D3 D3
type O41 = :* D3 D3
type B100001 = :* D3 D3
type H20 = :* D3 D2
type D32 = :* D3 D2
type O40 = :* D3 D2
type B100000 = :* D3 D2
type H1F = :* D3 D1
type D31 = :* D3 D1
type O37 = :* D3 D1
type B11111 = :* D3 D1
type H1E = :* D3 D0
type D30 = :* D3 D0
type O36 = :* D3 D0
type B11110 = :* D3 D0
type H1D = :* D2 D9
type D29 = :* D2 D9
type O35 = :* D2 D9
type B11101 = :* D2 D9
type H1C = :* D2 D8
type D28 = :* D2 D8
type O34 = :* D2 D8
type B11100 = :* D2 D8
type H1B = :* D2 D7
type D27 = :* D2 D7
type O33 = :* D2 D7
type B11011 = :* D2 D7
type H1A = :* D2 D6
type D26 = :* D2 D6
type O32 = :* D2 D6
type B11010 = :* D2 D6
type H19 = :* D2 D5
type D25 = :* D2 D5
type O31 = :* D2 D5
type B11001 = :* D2 D5
type H18 = :* D2 D4
type D24 = :* D2 D4
type O30 = :* D2 D4
type B11000 = :* D2 D4
type H17 = :* D2 D3
type D23 = :* D2 D3
type O27 = :* D2 D3
type B10111 = :* D2 D3
type H16 = :* D2 D2
type D22 = :* D2 D2
type O26 = :* D2 D2
type B10110 = :* D2 D2
type H15 = :* D2 D1
type D21 = :* D2 D1
type O25 = :* D2 D1
type B10101 = :* D2 D1
type H14 = :* D2 D0
type D20 = :* D2 D0
type O24 = :* D2 D0
type B10100 = :* D2 D0
type H13 = :* D1 D9
type D19 = :* D1 D9
type O23 = :* D1 D9
type B10011 = :* D1 D9
type H12 = :* D1 D8
type D18 = :* D1 D8
type O22 = :* D1 D8
type B10010 = :* D1 D8
type H11 = :* D1 D7
type D17 = :* D1 D7
type O21 = :* D1 D7
type B10001 = :* D1 D7
type H10 = :* D1 D6
type D16 = :* D1 D6
type O20 = :* D1 D6
type B10000 = :* D1 D6
type HF = :* D1 D5
type D15 = :* D1 D5
type O17 = :* D1 D5
type B1111 = :* D1 D5
type HE = :* D1 D4
type D14 = :* D1 D4
type O16 = :* D1 D4
type B1110 = :* D1 D4
type HD = :* D1 D3
type D13 = :* D1 D3
type O15 = :* D1 D3
type B1101 = :* D1 D3
type HC = :* D1 D2
type D12 = :* D1 D2
type O14 = :* D1 D2
type B1100 = :* D1 D2
type HB = :* D1 D1
type D11 = :* D1 D1
type O13 = :* D1 D1
type B1011 = :* D1 D1
type HA = :* D1 D0
type D10 = :* D1 D0
type O12 = :* D1 D0
type B1010 = :* D1 D0
type H9 = D9
type O11 = D9
type B1001 = D9
type H8 = D8
type O10 = D8
type B1000 = D8
type H7 = D7
type O7 = D7
type B111 = D7
type H6 = D6
type O6 = D6
type B110 = D6
type H5 = D5
type O5 = D5
type B101 = D5
type H4 = D4
type O4 = D4
type B100 = D4
type H3 = D3
type O3 = D3
type B11 = D3
type H2 = D2
type O2 = D2
type B10 = D2
type H1 = D1
type O1 = D1
type B1 = D1
type H0 = D0
type O0 = D0
type B0 = D0
type (|>) = Item
type With key = forall a. a -> Item key a
type N0 = Zero
type N1 = SuccessorTo N0
type N2 = SuccessorTo N1
type N3 = SuccessorTo N2
type N4 = SuccessorTo N3
type N5 = SuccessorTo N4
type N6 = SuccessorTo N5
type N7 = SuccessorTo N6
type N8 = SuccessorTo N7
type N9 = SuccessorTo N8
type N10 = SuccessorTo N9
type N11 = SuccessorTo N10
type N12 = SuccessorTo N11
type N13 = SuccessorTo N12
type N14 = SuccessorTo N13
type N15 = SuccessorTo N14
type One = N1
type Two = N2
type Three = N3
type Four = N4
type Five = N5
type Six = N6
type Seven = N7
type Eight = N8
type Nine = N9
type Ten = N10
type Eleven = N11
type Twelve = N12
type Thirteen = N13
type Fourteen = N14
type Fifteen = N15
type N0 = Z
type N1 = I Z
type N2 = O (I Z)
type N3 = I (I Z)
type N4 = O (O (I Z))
type N5 = I (O (I Z))
type N6 = O (I (I Z))
type N7 = I (I (I Z))
type N8 = O (O (O (I Z)))
type N9 = I (O (O (I Z)))
type D5000 = :* (:* (:* D5 D0) D0) D0
type D4999 = :* (:* (:* D4 D9) D9) D9
type D4998 = :* (:* (:* D4 D9) D9) D8
type D4997 = :* (:* (:* D4 D9) D9) D7
type D4996 = :* (:* (:* D4 D9) D9) D6
type D4995 = :* (:* (:* D4 D9) D9) D5
type D4994 = :* (:* (:* D4 D9) D9) D4
type D4993 = :* (:* (:* D4 D9) D9) D3
type D4992 = :* (:* (:* D4 D9) D9) D2
type D4991 = :* (:* (:* D4 D9) D9) D1
type D4990 = :* (:* (:* D4 D9) D9) D0
type D4989 = :* (:* (:* D4 D9) D8) D9
type D4988 = :* (:* (:* D4 D9) D8) D8
type D4987 = :* (:* (:* D4 D9) D8) D7
type D4986 = :* (:* (:* D4 D9) D8) D6
type D4985 = :* (:* (:* D4 D9) D8) D5
type D4984 = :* (:* (:* D4 D9) D8) D4
type D4983 = :* (:* (:* D4 D9) D8) D3
type D4982 = :* (:* (:* D4 D9) D8) D2
type D4981 = :* (:* (:* D4 D9) D8) D1
type D4980 = :* (:* (:* D4 D9) D8) D0
type D4979 = :* (:* (:* D4 D9) D7) D9
type D4978 = :* (:* (:* D4 D9) D7) D8
type D4977 = :* (:* (:* D4 D9) D7) D7
type D4976 = :* (:* (:* D4 D9) D7) D6
type D4975 = :* (:* (:* D4 D9) D7) D5
type D4974 = :* (:* (:* D4 D9) D7) D4
type D4973 = :* (:* (:* D4 D9) D7) D3
type D4972 = :* (:* (:* D4 D9) D7) D2
type D4971 = :* (:* (:* D4 D9) D7) D1
type D4970 = :* (:* (:* D4 D9) D7) D0
type D4969 = :* (:* (:* D4 D9) D6) D9
type D4968 = :* (:* (:* D4 D9) D6) D8
type D4967 = :* (:* (:* D4 D9) D6) D7
type D4966 = :* (:* (:* D4 D9) D6) D6
type D4965 = :* (:* (:* D4 D9) D6) D5
type D4964 = :* (:* (:* D4 D9) D6) D4
type D4963 = :* (:* (:* D4 D9) D6) D3
type D4962 = :* (:* (:* D4 D9) D6) D2
type D4961 = :* (:* (:* D4 D9) D6) D1
type D4960 = :* (:* (:* D4 D9) D6) D0
type D4959 = :* (:* (:* D4 D9) D5) D9
type D4958 = :* (:* (:* D4 D9) D5) D8
type D4957 = :* (:* (:* D4 D9) D5) D7
type D4956 = :* (:* (:* D4 D9) D5) D6
type D4955 = :* (:* (:* D4 D9) D5) D5
type D4954 = :* (:* (:* D4 D9) D5) D4
type D4953 = :* (:* (:* D4 D9) D5) D3
type D4952 = :* (:* (:* D4 D9) D5) D2
type D4951 = :* (:* (:* D4 D9) D5) D1
type D4950 = :* (:* (:* D4 D9) D5) D0
type D4949 = :* (:* (:* D4 D9) D4) D9
type D4948 = :* (:* (:* D4 D9) D4) D8
type D4947 = :* (:* (:* D4 D9) D4) D7
type D4946 = :* (:* (:* D4 D9) D4) D6
type D4945 = :* (:* (:* D4 D9) D4) D5
type D4944 = :* (:* (:* D4 D9) D4) D4
type D4943 = :* (:* (:* D4 D9) D4) D3
type D4942 = :* (:* (:* D4 D9) D4) D2
type D4941 = :* (:* (:* D4 D9) D4) D1
type D4940 = :* (:* (:* D4 D9) D4) D0
type D4939 = :* (:* (:* D4 D9) D3) D9
type D4938 = :* (:* (:* D4 D9) D3) D8
type D4937 = :* (:* (:* D4 D9) D3) D7
type D4936 = :* (:* (:* D4 D9) D3) D6
type D4935 = :* (:* (:* D4 D9) D3) D5
type D4934 = :* (:* (:* D4 D9) D3) D4
type D4933 = :* (:* (:* D4 D9) D3) D3
type D4932 = :* (:* (:* D4 D9) D3) D2
type D4931 = :* (:* (:* D4 D9) D3) D1
type D4930 = :* (:* (:* D4 D9) D3) D0
type D4929 = :* (:* (:* D4 D9) D2) D9
type D4928 = :* (:* (:* D4 D9) D2) D8
type D4927 = :* (:* (:* D4 D9) D2) D7
type D4926 = :* (:* (:* D4 D9) D2) D6
type D4925 = :* (:* (:* D4 D9) D2) D5
type D4924 = :* (:* (:* D4 D9) D2) D4
type D4923 = :* (:* (:* D4 D9) D2) D3
type D4922 = :* (:* (:* D4 D9) D2) D2
type D4921 = :* (:* (:* D4 D9) D2) D1
type D4920 = :* (:* (:* D4 D9) D2) D0
type D4919 = :* (:* (:* D4 D9) D1) D9
type D4918 = :* (:* (:* D4 D9) D1) D8
type D4917 = :* (:* (:* D4 D9) D1) D7
type D4916 = :* (:* (:* D4 D9) D1) D6
type D4915 = :* (:* (:* D4 D9) D1) D5
type D4914 = :* (:* (:* D4 D9) D1) D4
type D4913 = :* (:* (:* D4 D9) D1) D3
type D4912 = :* (:* (:* D4 D9) D1) D2
type D4911 = :* (:* (:* D4 D9) D1) D1
type D4910 = :* (:* (:* D4 D9) D1) D0
type D4909 = :* (:* (:* D4 D9) D0) D9
type D4908 = :* (:* (:* D4 D9) D0) D8
type D4907 = :* (:* (:* D4 D9) D0) D7
type D4906 = :* (:* (:* D4 D9) D0) D6
type D4905 = :* (:* (:* D4 D9) D0) D5
type D4904 = :* (:* (:* D4 D9) D0) D4
type D4903 = :* (:* (:* D4 D9) D0) D3
type D4902 = :* (:* (:* D4 D9) D0) D2
type D4901 = :* (:* (:* D4 D9) D0) D1
type D4900 = :* (:* (:* D4 D9) D0) D0
type D4899 = :* (:* (:* D4 D8) D9) D9
type D4898 = :* (:* (:* D4 D8) D9) D8
type D4897 = :* (:* (:* D4 D8) D9) D7
type D4896 = :* (:* (:* D4 D8) D9) D6
type D4895 = :* (:* (:* D4 D8) D9) D5
type D4894 = :* (:* (:* D4 D8) D9) D4
type D4893 = :* (:* (:* D4 D8) D9) D3
type D4892 = :* (:* (:* D4 D8) D9) D2
type D4891 = :* (:* (:* D4 D8) D9) D1
type D4890 = :* (:* (:* D4 D8) D9) D0
type D4889 = :* (:* (:* D4 D8) D8) D9
type D4888 = :* (:* (:* D4 D8) D8) D8
type D4887 = :* (:* (:* D4 D8) D8) D7
type D4886 = :* (:* (:* D4 D8) D8) D6
type D4885 = :* (:* (:* D4 D8) D8) D5
type D4884 = :* (:* (:* D4 D8) D8) D4
type D4883 = :* (:* (:* D4 D8) D8) D3
type D4882 = :* (:* (:* D4 D8) D8) D2
type D4881 = :* (:* (:* D4 D8) D8) D1
type D4880 = :* (:* (:* D4 D8) D8) D0
type D4879 = :* (:* (:* D4 D8) D7) D9
type D4878 = :* (:* (:* D4 D8) D7) D8
type D4877 = :* (:* (:* D4 D8) D7) D7
type D4876 = :* (:* (:* D4 D8) D7) D6
type D4875 = :* (:* (:* D4 D8) D7) D5
type D4874 = :* (:* (:* D4 D8) D7) D4
type D4873 = :* (:* (:* D4 D8) D7) D3
type D4872 = :* (:* (:* D4 D8) D7) D2
type D4871 = :* (:* (:* D4 D8) D7) D1
type D4870 = :* (:* (:* D4 D8) D7) D0
type D4869 = :* (:* (:* D4 D8) D6) D9
type D4868 = :* (:* (:* D4 D8) D6) D8
type D4867 = :* (:* (:* D4 D8) D6) D7
type D4866 = :* (:* (:* D4 D8) D6) D6
type D4865 = :* (:* (:* D4 D8) D6) D5
type D4864 = :* (:* (:* D4 D8) D6) D4
type D4863 = :* (:* (:* D4 D8) D6) D3
type D4862 = :* (:* (:* D4 D8) D6) D2
type D4861 = :* (:* (:* D4 D8) D6) D1
type D4860 = :* (:* (:* D4 D8) D6) D0
type D4859 = :* (:* (:* D4 D8) D5) D9
type D4858 = :* (:* (:* D4 D8) D5) D8
type D4857 = :* (:* (:* D4 D8) D5) D7
type D4856 = :* (:* (:* D4 D8) D5) D6
type D4855 = :* (:* (:* D4 D8) D5) D5
type D4854 = :* (:* (:* D4 D8) D5) D4
type D4853 = :* (:* (:* D4 D8) D5) D3
type D4852 = :* (:* (:* D4 D8) D5) D2
type D4851 = :* (:* (:* D4 D8) D5) D1
type D4850 = :* (:* (:* D4 D8) D5) D0
type D4849 = :* (:* (:* D4 D8) D4) D9
type D4848 = :* (:* (:* D4 D8) D4) D8
type D4847 = :* (:* (:* D4 D8) D4) D7
type D4846 = :* (:* (:* D4 D8) D4) D6
type D4845 = :* (:* (:* D4 D8) D4) D5
type D4844 = :* (:* (:* D4 D8) D4) D4
type D4843 = :* (:* (:* D4 D8) D4) D3
type D4842 = :* (:* (:* D4 D8) D4) D2
type D4841 = :* (:* (:* D4 D8) D4) D1
type D4840 = :* (:* (:* D4 D8) D4) D0
type D4839 = :* (:* (:* D4 D8) D3) D9
type D4838 = :* (:* (:* D4 D8) D3) D8
type D4837 = :* (:* (:* D4 D8) D3) D7
type D4836 = :* (:* (:* D4 D8) D3) D6
type D4835 = :* (:* (:* D4 D8) D3) D5
type D4834 = :* (:* (:* D4 D8) D3) D4
type D4833 = :* (:* (:* D4 D8) D3) D3
type D4832 = :* (:* (:* D4 D8) D3) D2
type D4831 = :* (:* (:* D4 D8) D3) D1
type D4830 = :* (:* (:* D4 D8) D3) D0
type D4829 = :* (:* (:* D4 D8) D2) D9
type D4828 = :* (:* (:* D4 D8) D2) D8
type D4827 = :* (:* (:* D4 D8) D2) D7
type D4826 = :* (:* (:* D4 D8) D2) D6
type D4825 = :* (:* (:* D4 D8) D2) D5
type D4824 = :* (:* (:* D4 D8) D2) D4
type D4823 = :* (:* (:* D4 D8) D2) D3
type D4822 = :* (:* (:* D4 D8) D2) D2
type D4821 = :* (:* (:* D4 D8) D2) D1
type D4820 = :* (:* (:* D4 D8) D2) D0
type D4819 = :* (:* (:* D4 D8) D1) D9
type D4818 = :* (:* (:* D4 D8) D1) D8
type D4817 = :* (:* (:* D4 D8) D1) D7
type D4816 = :* (:* (:* D4 D8) D1) D6
type D4815 = :* (:* (:* D4 D8) D1) D5
type D4814 = :* (:* (:* D4 D8) D1) D4
type D4813 = :* (:* (:* D4 D8) D1) D3
type D4812 = :* (:* (:* D4 D8) D1) D2
type D4811 = :* (:* (:* D4 D8) D1) D1
type D4810 = :* (:* (:* D4 D8) D1) D0
type D4809 = :* (:* (:* D4 D8) D0) D9
type D4808 = :* (:* (:* D4 D8) D0) D8
type D4807 = :* (:* (:* D4 D8) D0) D7
type D4806 = :* (:* (:* D4 D8) D0) D6
type D4805 = :* (:* (:* D4 D8) D0) D5
type D4804 = :* (:* (:* D4 D8) D0) D4
type D4803 = :* (:* (:* D4 D8) D0) D3
type D4802 = :* (:* (:* D4 D8) D0) D2
type D4801 = :* (:* (:* D4 D8) D0) D1
type D4800 = :* (:* (:* D4 D8) D0) D0
type D4799 = :* (:* (:* D4 D7) D9) D9
type D4798 = :* (:* (:* D4 D7) D9) D8
type D4797 = :* (:* (:* D4 D7) D9) D7
type D4796 = :* (:* (:* D4 D7) D9) D6
type D4795 = :* (:* (:* D4 D7) D9) D5
type D4794 = :* (:* (:* D4 D7) D9) D4
type D4793 = :* (:* (:* D4 D7) D9) D3
type D4792 = :* (:* (:* D4 D7) D9) D2
type D4791 = :* (:* (:* D4 D7) D9) D1
type D4790 = :* (:* (:* D4 D7) D9) D0
type D4789 = :* (:* (:* D4 D7) D8) D9
type D4788 = :* (:* (:* D4 D7) D8) D8
type D4787 = :* (:* (:* D4 D7) D8) D7
type D4786 = :* (:* (:* D4 D7) D8) D6
type D4785 = :* (:* (:* D4 D7) D8) D5
type D4784 = :* (:* (:* D4 D7) D8) D4
type D4783 = :* (:* (:* D4 D7) D8) D3
type D4782 = :* (:* (:* D4 D7) D8) D2
type D4781 = :* (:* (:* D4 D7) D8) D1
type D4780 = :* (:* (:* D4 D7) D8) D0
type D4779 = :* (:* (:* D4 D7) D7) D9
type D4778 = :* (:* (:* D4 D7) D7) D8
type D4777 = :* (:* (:* D4 D7) D7) D7
type D4776 = :* (:* (:* D4 D7) D7) D6
type D4775 = :* (:* (:* D4 D7) D7) D5
type D4774 = :* (:* (:* D4 D7) D7) D4
type D4773 = :* (:* (:* D4 D7) D7) D3
type D4772 = :* (:* (:* D4 D7) D7) D2
type D4771 = :* (:* (:* D4 D7) D7) D1
type D4770 = :* (:* (:* D4 D7) D7) D0
type D4769 = :* (:* (:* D4 D7) D6) D9
type D4768 = :* (:* (:* D4 D7) D6) D8
type D4767 = :* (:* (:* D4 D7) D6) D7
type D4766 = :* (:* (:* D4 D7) D6) D6
type D4765 = :* (:* (:* D4 D7) D6) D5
type D4764 = :* (:* (:* D4 D7) D6) D4
type D4763 = :* (:* (:* D4 D7) D6) D3
type D4762 = :* (:* (:* D4 D7) D6) D2
type D4761 = :* (:* (:* D4 D7) D6) D1
type D4760 = :* (:* (:* D4 D7) D6) D0
type D4759 = :* (:* (:* D4 D7) D5) D9
type D4758 = :* (:* (:* D4 D7) D5) D8
type D4757 = :* (:* (:* D4 D7) D5) D7
type D4756 = :* (:* (:* D4 D7) D5) D6
type D4755 = :* (:* (:* D4 D7) D5) D5
type D4754 = :* (:* (:* D4 D7) D5) D4
type D4753 = :* (:* (:* D4 D7) D5) D3
type D4752 = :* (:* (:* D4 D7) D5) D2
type D4751 = :* (:* (:* D4 D7) D5) D1
type D4750 = :* (:* (:* D4 D7) D5) D0
type D4749 = :* (:* (:* D4 D7) D4) D9
type D4748 = :* (:* (:* D4 D7) D4) D8
type D4747 = :* (:* (:* D4 D7) D4) D7
type D4746 = :* (:* (:* D4 D7) D4) D6
type D4745 = :* (:* (:* D4 D7) D4) D5
type D4744 = :* (:* (:* D4 D7) D4) D4
type D4743 = :* (:* (:* D4 D7) D4) D3
type D4742 = :* (:* (:* D4 D7) D4) D2
type D4741 = :* (:* (:* D4 D7) D4) D1
type D4740 = :* (:* (:* D4 D7) D4) D0
type D4739 = :* (:* (:* D4 D7) D3) D9
type D4738 = :* (:* (:* D4 D7) D3) D8
type D4737 = :* (:* (:* D4 D7) D3) D7
type D4736 = :* (:* (:* D4 D7) D3) D6
type D4735 = :* (:* (:* D4 D7) D3) D5
type D4734 = :* (:* (:* D4 D7) D3) D4
type D4733 = :* (:* (:* D4 D7) D3) D3
type D4732 = :* (:* (:* D4 D7) D3) D2
type D4731 = :* (:* (:* D4 D7) D3) D1
type D4730 = :* (:* (:* D4 D7) D3) D0
type D4729 = :* (:* (:* D4 D7) D2) D9
type D4728 = :* (:* (:* D4 D7) D2) D8
type D4727 = :* (:* (:* D4 D7) D2) D7
type D4726 = :* (:* (:* D4 D7) D2) D6
type D4725 = :* (:* (:* D4 D7) D2) D5
type D4724 = :* (:* (:* D4 D7) D2) D4
type D4723 = :* (:* (:* D4 D7) D2) D3
type D4722 = :* (:* (:* D4 D7) D2) D2
type D4721 = :* (:* (:* D4 D7) D2) D1
type D4720 = :* (:* (:* D4 D7) D2) D0
type D4719 = :* (:* (:* D4 D7) D1) D9
type D4718 = :* (:* (:* D4 D7) D1) D8
type D4717 = :* (:* (:* D4 D7) D1) D7
type D4716 = :* (:* (:* D4 D7) D1) D6
type D4715 = :* (:* (:* D4 D7) D1) D5
type D4714 = :* (:* (:* D4 D7) D1) D4
type D4713 = :* (:* (:* D4 D7) D1) D3
type D4712 = :* (:* (:* D4 D7) D1) D2
type D4711 = :* (:* (:* D4 D7) D1) D1
type D4710 = :* (:* (:* D4 D7) D1) D0
type D4709 = :* (:* (:* D4 D7) D0) D9
type D4708 = :* (:* (:* D4 D7) D0) D8
type D4707 = :* (:* (:* D4 D7) D0) D7
type D4706 = :* (:* (:* D4 D7) D0) D6
type D4705 = :* (:* (:* D4 D7) D0) D5
type D4704 = :* (:* (:* D4 D7) D0) D4
type D4703 = :* (:* (:* D4 D7) D0) D3
type D4702 = :* (:* (:* D4 D7) D0) D2
type D4701 = :* (:* (:* D4 D7) D0) D1
type D4700 = :* (:* (:* D4 D7) D0) D0
type D4699 = :* (:* (:* D4 D6) D9) D9
type D4698 = :* (:* (:* D4 D6) D9) D8
type D4697 = :* (:* (:* D4 D6) D9) D7
type D4696 = :* (:* (:* D4 D6) D9) D6
type D4695 = :* (:* (:* D4 D6) D9) D5
type D4694 = :* (:* (:* D4 D6) D9) D4
type D4693 = :* (:* (:* D4 D6) D9) D3
type D4692 = :* (:* (:* D4 D6) D9) D2
type D4691 = :* (:* (:* D4 D6) D9) D1
type D4690 = :* (:* (:* D4 D6) D9) D0
type D4689 = :* (:* (:* D4 D6) D8) D9
type D4688 = :* (:* (:* D4 D6) D8) D8
type D4687 = :* (:* (:* D4 D6) D8) D7
type D4686 = :* (:* (:* D4 D6) D8) D6
type D4685 = :* (:* (:* D4 D6) D8) D5
type D4684 = :* (:* (:* D4 D6) D8) D4
type D4683 = :* (:* (:* D4 D6) D8) D3
type D4682 = :* (:* (:* D4 D6) D8) D2
type D4681 = :* (:* (:* D4 D6) D8) D1
type D4680 = :* (:* (:* D4 D6) D8) D0
type D4679 = :* (:* (:* D4 D6) D7) D9
type D4678 = :* (:* (:* D4 D6) D7) D8
type D4677 = :* (:* (:* D4 D6) D7) D7
type D4676 = :* (:* (:* D4 D6) D7) D6
type D4675 = :* (:* (:* D4 D6) D7) D5
type D4674 = :* (:* (:* D4 D6) D7) D4
type D4673 = :* (:* (:* D4 D6) D7) D3
type D4672 = :* (:* (:* D4 D6) D7) D2
type D4671 = :* (:* (:* D4 D6) D7) D1
type D4670 = :* (:* (:* D4 D6) D7) D0
type D4669 = :* (:* (:* D4 D6) D6) D9
type D4668 = :* (:* (:* D4 D6) D6) D8
type D4667 = :* (:* (:* D4 D6) D6) D7
type D4666 = :* (:* (:* D4 D6) D6) D6
type D4665 = :* (:* (:* D4 D6) D6) D5
type D4664 = :* (:* (:* D4 D6) D6) D4
type D4663 = :* (:* (:* D4 D6) D6) D3
type D4662 = :* (:* (:* D4 D6) D6) D2
type D4661 = :* (:* (:* D4 D6) D6) D1
type D4660 = :* (:* (:* D4 D6) D6) D0
type D4659 = :* (:* (:* D4 D6) D5) D9
type D4658 = :* (:* (:* D4 D6) D5) D8
type D4657 = :* (:* (:* D4 D6) D5) D7
type D4656 = :* (:* (:* D4 D6) D5) D6
type D4655 = :* (:* (:* D4 D6) D5) D5
type D4654 = :* (:* (:* D4 D6) D5) D4
type D4653 = :* (:* (:* D4 D6) D5) D3
type D4652 = :* (:* (:* D4 D6) D5) D2
type D4651 = :* (:* (:* D4 D6) D5) D1
type D4650 = :* (:* (:* D4 D6) D5) D0
type D4649 = :* (:* (:* D4 D6) D4) D9
type D4648 = :* (:* (:* D4 D6) D4) D8
type D4647 = :* (:* (:* D4 D6) D4) D7
type D4646 = :* (:* (:* D4 D6) D4) D6
type D4645 = :* (:* (:* D4 D6) D4) D5
type D4644 = :* (:* (:* D4 D6) D4) D4
type D4643 = :* (:* (:* D4 D6) D4) D3
type D4642 = :* (:* (:* D4 D6) D4) D2
type D4641 = :* (:* (:* D4 D6) D4) D1
type D4640 = :* (:* (:* D4 D6) D4) D0
type D4639 = :* (:* (:* D4 D6) D3) D9
type D4638 = :* (:* (:* D4 D6) D3) D8
type D4637 = :* (:* (:* D4 D6) D3) D7
type D4636 = :* (:* (:* D4 D6) D3) D6
type D4635 = :* (:* (:* D4 D6) D3) D5
type D4634 = :* (:* (:* D4 D6) D3) D4
type D4633 = :* (:* (:* D4 D6) D3) D3
type D4632 = :* (:* (:* D4 D6) D3) D2
type D4631 = :* (:* (:* D4 D6) D3) D1
type D4630 = :* (:* (:* D4 D6) D3) D0
type D4629 = :* (:* (:* D4 D6) D2) D9
type D4628 = :* (:* (:* D4 D6) D2) D8
type D4627 = :* (:* (:* D4 D6) D2) D7
type D4626 = :* (:* (:* D4 D6) D2) D6
type D4625 = :* (:* (:* D4 D6) D2) D5
type D4624 = :* (:* (:* D4 D6) D2) D4
type D4623 = :* (:* (:* D4 D6) D2) D3
type D4622 = :* (:* (:* D4 D6) D2) D2
type D4621 = :* (:* (:* D4 D6) D2) D1
type D4620 = :* (:* (:* D4 D6) D2) D0
type D4619 = :* (:* (:* D4 D6) D1) D9
type D4618 = :* (:* (:* D4 D6) D1) D8
type D4617 = :* (:* (:* D4 D6) D1) D7
type D4616 = :* (:* (:* D4 D6) D1) D6
type D4615 = :* (:* (:* D4 D6) D1) D5
type D4614 = :* (:* (:* D4 D6) D1) D4
type D4613 = :* (:* (:* D4 D6) D1) D3
type D4612 = :* (:* (:* D4 D6) D1) D2
type D4611 = :* (:* (:* D4 D6) D1) D1
type D4610 = :* (:* (:* D4 D6) D1) D0
type D4609 = :* (:* (:* D4 D6) D0) D9
type D4608 = :* (:* (:* D4 D6) D0) D8
type D4607 = :* (:* (:* D4 D6) D0) D7
type D4606 = :* (:* (:* D4 D6) D0) D6
type D4605 = :* (:* (:* D4 D6) D0) D5
type D4604 = :* (:* (:* D4 D6) D0) D4
type D4603 = :* (:* (:* D4 D6) D0) D3
type D4602 = :* (:* (:* D4 D6) D0) D2
type D4601 = :* (:* (:* D4 D6) D0) D1
type D4600 = :* (:* (:* D4 D6) D0) D0
type D4599 = :* (:* (:* D4 D5) D9) D9
type D4598 = :* (:* (:* D4 D5) D9) D8
type D4597 = :* (:* (:* D4 D5) D9) D7
type D4596 = :* (:* (:* D4 D5) D9) D6
type D4595 = :* (:* (:* D4 D5) D9) D5
type D4594 = :* (:* (:* D4 D5) D9) D4
type D4593 = :* (:* (:* D4 D5) D9) D3
type D4592 = :* (:* (:* D4 D5) D9) D2
type D4591 = :* (:* (:* D4 D5) D9) D1
type D4590 = :* (:* (:* D4 D5) D9) D0
type D4589 = :* (:* (:* D4 D5) D8) D9
type D4588 = :* (:* (:* D4 D5) D8) D8
type D4587 = :* (:* (:* D4 D5) D8) D7
type D4586 = :* (:* (:* D4 D5) D8) D6
type D4585 = :* (:* (:* D4 D5) D8) D5
type D4584 = :* (:* (:* D4 D5) D8) D4
type D4583 = :* (:* (:* D4 D5) D8) D3
type D4582 = :* (:* (:* D4 D5) D8) D2
type D4581 = :* (:* (:* D4 D5) D8) D1
type D4580 = :* (:* (:* D4 D5) D8) D0
type D4579 = :* (:* (:* D4 D5) D7) D9
type D4578 = :* (:* (:* D4 D5) D7) D8
type D4577 = :* (:* (:* D4 D5) D7) D7
type D4576 = :* (:* (:* D4 D5) D7) D6
type D4575 = :* (:* (:* D4 D5) D7) D5
type D4574 = :* (:* (:* D4 D5) D7) D4
type D4573 = :* (:* (:* D4 D5) D7) D3
type D4572 = :* (:* (:* D4 D5) D7) D2
type D4571 = :* (:* (:* D4 D5) D7) D1
type D4570 = :* (:* (:* D4 D5) D7) D0
type D4569 = :* (:* (:* D4 D5) D6) D9
type D4568 = :* (:* (:* D4 D5) D6) D8
type D4567 = :* (:* (:* D4 D5) D6) D7
type D4566 = :* (:* (:* D4 D5) D6) D6
type D4565 = :* (:* (:* D4 D5) D6) D5
type D4564 = :* (:* (:* D4 D5) D6) D4
type D4563 = :* (:* (:* D4 D5) D6) D3
type D4562 = :* (:* (:* D4 D5) D6) D2
type D4561 = :* (:* (:* D4 D5) D6) D1
type D4560 = :* (:* (:* D4 D5) D6) D0
type D4559 = :* (:* (:* D4 D5) D5) D9
type D4558 = :* (:* (:* D4 D5) D5) D8
type D4557 = :* (:* (:* D4 D5) D5) D7
type D4556 = :* (:* (:* D4 D5) D5) D6
type D4555 = :* (:* (:* D4 D5) D5) D5
type D4554 = :* (:* (:* D4 D5) D5) D4
type D4553 = :* (:* (:* D4 D5) D5) D3
type D4552 = :* (:* (:* D4 D5) D5) D2
type D4551 = :* (:* (:* D4 D5) D5) D1
type D4550 = :* (:* (:* D4 D5) D5) D0
type D4549 = :* (:* (:* D4 D5) D4) D9
type D4548 = :* (:* (:* D4 D5) D4) D8
type D4547 = :* (:* (:* D4 D5) D4) D7
type D4546 = :* (:* (:* D4 D5) D4) D6
type D4545 = :* (:* (:* D4 D5) D4) D5
type D4544 = :* (:* (:* D4 D5) D4) D4
type D4543 = :* (:* (:* D4 D5) D4) D3
type D4542 = :* (:* (:* D4 D5) D4) D2
type D4541 = :* (:* (:* D4 D5) D4) D1
type D4540 = :* (:* (:* D4 D5) D4) D0
type D4539 = :* (:* (:* D4 D5) D3) D9
type D4538 = :* (:* (:* D4 D5) D3) D8
type D4537 = :* (:* (:* D4 D5) D3) D7
type D4536 = :* (:* (:* D4 D5) D3) D6
type D4535 = :* (:* (:* D4 D5) D3) D5
type D4534 = :* (:* (:* D4 D5) D3) D4
type D4533 = :* (:* (:* D4 D5) D3) D3
type D4532 = :* (:* (:* D4 D5) D3) D2
type D4531 = :* (:* (:* D4 D5) D3) D1
type D4530 = :* (:* (:* D4 D5) D3) D0
type D4529 = :* (:* (:* D4 D5) D2) D9
type D4528 = :* (:* (:* D4 D5) D2) D8
type D4527 = :* (:* (:* D4 D5) D2) D7
type D4526 = :* (:* (:* D4 D5) D2) D6
type D4525 = :* (:* (:* D4 D5) D2) D5
type D4524 = :* (:* (:* D4 D5) D2) D4
type D4523 = :* (:* (:* D4 D5) D2) D3
type D4522 = :* (:* (:* D4 D5) D2) D2
type D4521 = :* (:* (:* D4 D5) D2) D1
type D4520 = :* (:* (:* D4 D5) D2) D0
type D4519 = :* (:* (:* D4 D5) D1) D9
type D4518 = :* (:* (:* D4 D5) D1) D8
type D4517 = :* (:* (:* D4 D5) D1) D7
type D4516 = :* (:* (:* D4 D5) D1) D6
type D4515 = :* (:* (:* D4 D5) D1) D5
type D4514 = :* (:* (:* D4 D5) D1) D4
type D4513 = :* (:* (:* D4 D5) D1) D3
type D4512 = :* (:* (:* D4 D5) D1) D2
type D4511 = :* (:* (:* D4 D5) D1) D1
type D4510 = :* (:* (:* D4 D5) D1) D0
type D4509 = :* (:* (:* D4 D5) D0) D9
type D4508 = :* (:* (:* D4 D5) D0) D8
type D4507 = :* (:* (:* D4 D5) D0) D7
type D4506 = :* (:* (:* D4 D5) D0) D6
type D4505 = :* (:* (:* D4 D5) D0) D5
type D4504 = :* (:* (:* D4 D5) D0) D4
type D4503 = :* (:* (:* D4 D5) D0) D3
type D4502 = :* (:* (:* D4 D5) D0) D2
type D4501 = :* (:* (:* D4 D5) D0) D1
type D4500 = :* (:* (:* D4 D5) D0) D0
type D4499 = :* (:* (:* D4 D4) D9) D9
type D4498 = :* (:* (:* D4 D4) D9) D8
type D4497 = :* (:* (:* D4 D4) D9) D7
type D4496 = :* (:* (:* D4 D4) D9) D6
type D4495 = :* (:* (:* D4 D4) D9) D5
type D4494 = :* (:* (:* D4 D4) D9) D4
type D4493 = :* (:* (:* D4 D4) D9) D3
type D4492 = :* (:* (:* D4 D4) D9) D2
type D4491 = :* (:* (:* D4 D4) D9) D1
type D4490 = :* (:* (:* D4 D4) D9) D0
type D4489 = :* (:* (:* D4 D4) D8) D9
type D4488 = :* (:* (:* D4 D4) D8) D8
type D4487 = :* (:* (:* D4 D4) D8) D7
type D4486 = :* (:* (:* D4 D4) D8) D6
type D4485 = :* (:* (:* D4 D4) D8) D5
type D4484 = :* (:* (:* D4 D4) D8) D4
type D4483 = :* (:* (:* D4 D4) D8) D3
type D4482 = :* (:* (:* D4 D4) D8) D2
type D4481 = :* (:* (:* D4 D4) D8) D1
type D4480 = :* (:* (:* D4 D4) D8) D0
type D4479 = :* (:* (:* D4 D4) D7) D9
type D4478 = :* (:* (:* D4 D4) D7) D8
type D4477 = :* (:* (:* D4 D4) D7) D7
type D4476 = :* (:* (:* D4 D4) D7) D6
type D4475 = :* (:* (:* D4 D4) D7) D5
type D4474 = :* (:* (:* D4 D4) D7) D4
type D4473 = :* (:* (:* D4 D4) D7) D3
type D4472 = :* (:* (:* D4 D4) D7) D2
type D4471 = :* (:* (:* D4 D4) D7) D1
type D4470 = :* (:* (:* D4 D4) D7) D0
type D4469 = :* (:* (:* D4 D4) D6) D9
type D4468 = :* (:* (:* D4 D4) D6) D8
type D4467 = :* (:* (:* D4 D4) D6) D7
type D4466 = :* (:* (:* D4 D4) D6) D6
type D4465 = :* (:* (:* D4 D4) D6) D5
type D4464 = :* (:* (:* D4 D4) D6) D4
type D4463 = :* (:* (:* D4 D4) D6) D3
type D4462 = :* (:* (:* D4 D4) D6) D2
type D4461 = :* (:* (:* D4 D4) D6) D1
type D4460 = :* (:* (:* D4 D4) D6) D0
type D4459 = :* (:* (:* D4 D4) D5) D9
type D4458 = :* (:* (:* D4 D4) D5) D8
type D4457 = :* (:* (:* D4 D4) D5) D7
type D4456 = :* (:* (:* D4 D4) D5) D6
type D4455 = :* (:* (:* D4 D4) D5) D5
type D4454 = :* (:* (:* D4 D4) D5) D4
type D4453 = :* (:* (:* D4 D4) D5) D3
type D4452 = :* (:* (:* D4 D4) D5) D2
type D4451 = :* (:* (:* D4 D4) D5) D1
type D4450 = :* (:* (:* D4 D4) D5) D0
type D4449 = :* (:* (:* D4 D4) D4) D9
type D4448 = :* (:* (:* D4 D4) D4) D8
type D4447 = :* (:* (:* D4 D4) D4) D7
type D4446 = :* (:* (:* D4 D4) D4) D6
type D4445 = :* (:* (:* D4 D4) D4) D5
type D4444 = :* (:* (:* D4 D4) D4) D4
type D4443 = :* (:* (:* D4 D4) D4) D3
type D4442 = :* (:* (:* D4 D4) D4) D2
type D4441 = :* (:* (:* D4 D4) D4) D1
type D4440 = :* (:* (:* D4 D4) D4) D0
type D4439 = :* (:* (:* D4 D4) D3) D9
type D4438 = :* (:* (:* D4 D4) D3) D8
type D4437 = :* (:* (:* D4 D4) D3) D7
type D4436 = :* (:* (:* D4 D4) D3) D6
type D4435 = :* (:* (:* D4 D4) D3) D5
type D4434 = :* (:* (:* D4 D4) D3) D4
type D4433 = :* (:* (:* D4 D4) D3) D3
type D4432 = :* (:* (:* D4 D4) D3) D2
type D4431 = :* (:* (:* D4 D4) D3) D1
type D4430 = :* (:* (:* D4 D4) D3) D0
type D4429 = :* (:* (:* D4 D4) D2) D9
type D4428 = :* (:* (:* D4 D4) D2) D8
type D4427 = :* (:* (:* D4 D4) D2) D7
type D4426 = :* (:* (:* D4 D4) D2) D6
type D4425 = :* (:* (:* D4 D4) D2) D5
type D4424 = :* (:* (:* D4 D4) D2) D4
type D4423 = :* (:* (:* D4 D4) D2) D3
type D4422 = :* (:* (:* D4 D4) D2) D2
type D4421 = :* (:* (:* D4 D4) D2) D1
type D4420 = :* (:* (:* D4 D4) D2) D0
type D4419 = :* (:* (:* D4 D4) D1) D9
type D4418 = :* (:* (:* D4 D4) D1) D8
type D4417 = :* (:* (:* D4 D4) D1) D7
type D4416 = :* (:* (:* D4 D4) D1) D6
type D4415 = :* (:* (:* D4 D4) D1) D5
type D4414 = :* (:* (:* D4 D4) D1) D4
type D4413 = :* (:* (:* D4 D4) D1) D3
type D4412 = :* (:* (:* D4 D4) D1) D2
type D4411 = :* (:* (:* D4 D4) D1) D1
type D4410 = :* (:* (:* D4 D4) D1) D0
type D4409 = :* (:* (:* D4 D4) D0) D9
type D4408 = :* (:* (:* D4 D4) D0) D8
type D4407 = :* (:* (:* D4 D4) D0) D7
type D4406 = :* (:* (:* D4 D4) D0) D6
type D4405 = :* (:* (:* D4 D4) D0) D5
type D4404 = :* (:* (:* D4 D4) D0) D4
type D4403 = :* (:* (:* D4 D4) D0) D3
type D4402 = :* (:* (:* D4 D4) D0) D2
type D4401 = :* (:* (:* D4 D4) D0) D1
type D4400 = :* (:* (:* D4 D4) D0) D0
type D4399 = :* (:* (:* D4 D3) D9) D9
type D4398 = :* (:* (:* D4 D3) D9) D8
type D4397 = :* (:* (:* D4 D3) D9) D7
type D4396 = :* (:* (:* D4 D3) D9) D6
type D4395 = :* (:* (:* D4 D3) D9) D5
type D4394 = :* (:* (:* D4 D3) D9) D4
type D4393 = :* (:* (:* D4 D3) D9) D3
type D4392 = :* (:* (:* D4 D3) D9) D2
type D4391 = :* (:* (:* D4 D3) D9) D1
type D4390 = :* (:* (:* D4 D3) D9) D0
type D4389 = :* (:* (:* D4 D3) D8) D9
type D4388 = :* (:* (:* D4 D3) D8) D8
type D4387 = :* (:* (:* D4 D3) D8) D7
type D4386 = :* (:* (:* D4 D3) D8) D6
type D4385 = :* (:* (:* D4 D3) D8) D5
type D4384 = :* (:* (:* D4 D3) D8) D4
type D4383 = :* (:* (:* D4 D3) D8) D3
type D4382 = :* (:* (:* D4 D3) D8) D2
type D4381 = :* (:* (:* D4 D3) D8) D1
type D4380 = :* (:* (:* D4 D3) D8) D0
type D4379 = :* (:* (:* D4 D3) D7) D9
type D4378 = :* (:* (:* D4 D3) D7) D8
type D4377 = :* (:* (:* D4 D3) D7) D7
type D4376 = :* (:* (:* D4 D3) D7) D6
type D4375 = :* (:* (:* D4 D3) D7) D5
type D4374 = :* (:* (:* D4 D3) D7) D4
type D4373 = :* (:* (:* D4 D3) D7) D3
type D4372 = :* (:* (:* D4 D3) D7) D2
type D4371 = :* (:* (:* D4 D3) D7) D1
type D4370 = :* (:* (:* D4 D3) D7) D0
type D4369 = :* (:* (:* D4 D3) D6) D9
type D4368 = :* (:* (:* D4 D3) D6) D8
type D4367 = :* (:* (:* D4 D3) D6) D7
type D4366 = :* (:* (:* D4 D3) D6) D6
type D4365 = :* (:* (:* D4 D3) D6) D5
type D4364 = :* (:* (:* D4 D3) D6) D4
type D4363 = :* (:* (:* D4 D3) D6) D3
type D4362 = :* (:* (:* D4 D3) D6) D2
type D4361 = :* (:* (:* D4 D3) D6) D1
type D4360 = :* (:* (:* D4 D3) D6) D0
type D4359 = :* (:* (:* D4 D3) D5) D9
type D4358 = :* (:* (:* D4 D3) D5) D8
type D4357 = :* (:* (:* D4 D3) D5) D7
type D4356 = :* (:* (:* D4 D3) D5) D6
type D4355 = :* (:* (:* D4 D3) D5) D5
type D4354 = :* (:* (:* D4 D3) D5) D4
type D4353 = :* (:* (:* D4 D3) D5) D3
type D4352 = :* (:* (:* D4 D3) D5) D2
type D4351 = :* (:* (:* D4 D3) D5) D1
type D4350 = :* (:* (:* D4 D3) D5) D0
type D4349 = :* (:* (:* D4 D3) D4) D9
type D4348 = :* (:* (:* D4 D3) D4) D8
type D4347 = :* (:* (:* D4 D3) D4) D7
type D4346 = :* (:* (:* D4 D3) D4) D6
type D4345 = :* (:* (:* D4 D3) D4) D5
type D4344 = :* (:* (:* D4 D3) D4) D4
type D4343 = :* (:* (:* D4 D3) D4) D3
type D4342 = :* (:* (:* D4 D3) D4) D2
type D4341 = :* (:* (:* D4 D3) D4) D1
type D4340 = :* (:* (:* D4 D3) D4) D0
type D4339 = :* (:* (:* D4 D3) D3) D9
type D4338 = :* (:* (:* D4 D3) D3) D8
type D4337 = :* (:* (:* D4 D3) D3) D7
type D4336 = :* (:* (:* D4 D3) D3) D6
type D4335 = :* (:* (:* D4 D3) D3) D5
type D4334 = :* (:* (:* D4 D3) D3) D4
type D4333 = :* (:* (:* D4 D3) D3) D3
type D4332 = :* (:* (:* D4 D3) D3) D2
type D4331 = :* (:* (:* D4 D3) D3) D1
type D4330 = :* (:* (:* D4 D3) D3) D0
type D4329 = :* (:* (:* D4 D3) D2) D9
type D4328 = :* (:* (:* D4 D3) D2) D8
type D4327 = :* (:* (:* D4 D3) D2) D7
type D4326 = :* (:* (:* D4 D3) D2) D6
type D4325 = :* (:* (:* D4 D3) D2) D5
type D4324 = :* (:* (:* D4 D3) D2) D4
type D4323 = :* (:* (:* D4 D3) D2) D3
type D4322 = :* (:* (:* D4 D3) D2) D2
type D4321 = :* (:* (:* D4 D3) D2) D1
type D4320 = :* (:* (:* D4 D3) D2) D0
type D4319 = :* (:* (:* D4 D3) D1) D9
type D4318 = :* (:* (:* D4 D3) D1) D8
type D4317 = :* (:* (:* D4 D3) D1) D7
type D4316 = :* (:* (:* D4 D3) D1) D6
type D4315 = :* (:* (:* D4 D3) D1) D5
type D4314 = :* (:* (:* D4 D3) D1) D4
type D4313 = :* (:* (:* D4 D3) D1) D3
type D4312 = :* (:* (:* D4 D3) D1) D2
type D4311 = :* (:* (:* D4 D3) D1) D1
type D4310 = :* (:* (:* D4 D3) D1) D0
type D4309 = :* (:* (:* D4 D3) D0) D9
type D4308 = :* (:* (:* D4 D3) D0) D8
type D4307 = :* (:* (:* D4 D3) D0) D7
type D4306 = :* (:* (:* D4 D3) D0) D6
type D4305 = :* (:* (:* D4 D3) D0) D5
type D4304 = :* (:* (:* D4 D3) D0) D4
type D4303 = :* (:* (:* D4 D3) D0) D3
type D4302 = :* (:* (:* D4 D3) D0) D2
type D4301 = :* (:* (:* D4 D3) D0) D1
type D4300 = :* (:* (:* D4 D3) D0) D0
type D4299 = :* (:* (:* D4 D2) D9) D9
type D4298 = :* (:* (:* D4 D2) D9) D8
type D4297 = :* (:* (:* D4 D2) D9) D7
type D4296 = :* (:* (:* D4 D2) D9) D6
type D4295 = :* (:* (:* D4 D2) D9) D5
type D4294 = :* (:* (:* D4 D2) D9) D4
type D4293 = :* (:* (:* D4 D2) D9) D3
type D4292 = :* (:* (:* D4 D2) D9) D2
type D4291 = :* (:* (:* D4 D2) D9) D1
type D4290 = :* (:* (:* D4 D2) D9) D0
type D4289 = :* (:* (:* D4 D2) D8) D9
type D4288 = :* (:* (:* D4 D2) D8) D8
type D4287 = :* (:* (:* D4 D2) D8) D7
type D4286 = :* (:* (:* D4 D2) D8) D6
type D4285 = :* (:* (:* D4 D2) D8) D5
type D4284 = :* (:* (:* D4 D2) D8) D4
type D4283 = :* (:* (:* D4 D2) D8) D3
type D4282 = :* (:* (:* D4 D2) D8) D2
type D4281 = :* (:* (:* D4 D2) D8) D1
type D4280 = :* (:* (:* D4 D2) D8) D0
type D4279 = :* (:* (:* D4 D2) D7) D9
type D4278 = :* (:* (:* D4 D2) D7) D8
type D4277 = :* (:* (:* D4 D2) D7) D7
type D4276 = :* (:* (:* D4 D2) D7) D6
type D4275 = :* (:* (:* D4 D2) D7) D5
type D4274 = :* (:* (:* D4 D2) D7) D4
type D4273 = :* (:* (:* D4 D2) D7) D3
type D4272 = :* (:* (:* D4 D2) D7) D2
type D4271 = :* (:* (:* D4 D2) D7) D1
type D4270 = :* (:* (:* D4 D2) D7) D0
type D4269 = :* (:* (:* D4 D2) D6) D9
type D4268 = :* (:* (:* D4 D2) D6) D8
type D4267 = :* (:* (:* D4 D2) D6) D7
type D4266 = :* (:* (:* D4 D2) D6) D6
type D4265 = :* (:* (:* D4 D2) D6) D5
type D4264 = :* (:* (:* D4 D2) D6) D4
type D4263 = :* (:* (:* D4 D2) D6) D3
type D4262 = :* (:* (:* D4 D2) D6) D2
type D4261 = :* (:* (:* D4 D2) D6) D1
type D4260 = :* (:* (:* D4 D2) D6) D0
type D4259 = :* (:* (:* D4 D2) D5) D9
type D4258 = :* (:* (:* D4 D2) D5) D8
type D4257 = :* (:* (:* D4 D2) D5) D7
type D4256 = :* (:* (:* D4 D2) D5) D6
type D4255 = :* (:* (:* D4 D2) D5) D5
type D4254 = :* (:* (:* D4 D2) D5) D4
type D4253 = :* (:* (:* D4 D2) D5) D3
type D4252 = :* (:* (:* D4 D2) D5) D2
type D4251 = :* (:* (:* D4 D2) D5) D1
type D4250 = :* (:* (:* D4 D2) D5) D0
type D4249 = :* (:* (:* D4 D2) D4) D9
type D4248 = :* (:* (:* D4 D2) D4) D8
type D4247 = :* (:* (:* D4 D2) D4) D7
type D4246 = :* (:* (:* D4 D2) D4) D6
type D4245 = :* (:* (:* D4 D2) D4) D5
type D4244 = :* (:* (:* D4 D2) D4) D4
type D4243 = :* (:* (:* D4 D2) D4) D3
type D4242 = :* (:* (:* D4 D2) D4) D2
type D4241 = :* (:* (:* D4 D2) D4) D1
type D4240 = :* (:* (:* D4 D2) D4) D0
type D4239 = :* (:* (:* D4 D2) D3) D9
type D4238 = :* (:* (:* D4 D2) D3) D8
type D4237 = :* (:* (:* D4 D2) D3) D7
type D4236 = :* (:* (:* D4 D2) D3) D6
type D4235 = :* (:* (:* D4 D2) D3) D5
type D4234 = :* (:* (:* D4 D2) D3) D4
type D4233 = :* (:* (:* D4 D2) D3) D3
type D4232 = :* (:* (:* D4 D2) D3) D2
type D4231 = :* (:* (:* D4 D2) D3) D1
type D4230 = :* (:* (:* D4 D2) D3) D0
type D4229 = :* (:* (:* D4 D2) D2) D9
type D4228 = :* (:* (:* D4 D2) D2) D8
type D4227 = :* (:* (:* D4 D2) D2) D7
type D4226 = :* (:* (:* D4 D2) D2) D6
type D4225 = :* (:* (:* D4 D2) D2) D5
type D4224 = :* (:* (:* D4 D2) D2) D4
type D4223 = :* (:* (:* D4 D2) D2) D3
type D4222 = :* (:* (:* D4 D2) D2) D2
type D4221 = :* (:* (:* D4 D2) D2) D1
type D4220 = :* (:* (:* D4 D2) D2) D0
type D4219 = :* (:* (:* D4 D2) D1) D9
type D4218 = :* (:* (:* D4 D2) D1) D8
type D4217 = :* (:* (:* D4 D2) D1) D7
type D4216 = :* (:* (:* D4 D2) D1) D6
type D4215 = :* (:* (:* D4 D2) D1) D5
type D4214 = :* (:* (:* D4 D2) D1) D4
type D4213 = :* (:* (:* D4 D2) D1) D3
type D4212 = :* (:* (:* D4 D2) D1) D2
type D4211 = :* (:* (:* D4 D2) D1) D1
type D4210 = :* (:* (:* D4 D2) D1) D0
type D4209 = :* (:* (:* D4 D2) D0) D9
type D4208 = :* (:* (:* D4 D2) D0) D8
type D4207 = :* (:* (:* D4 D2) D0) D7
type D4206 = :* (:* (:* D4 D2) D0) D6
type D4205 = :* (:* (:* D4 D2) D0) D5
type D4204 = :* (:* (:* D4 D2) D0) D4
type D4203 = :* (:* (:* D4 D2) D0) D3
type D4202 = :* (:* (:* D4 D2) D0) D2
type D4201 = :* (:* (:* D4 D2) D0) D1
type D4200 = :* (:* (:* D4 D2) D0) D0
type D4199 = :* (:* (:* D4 D1) D9) D9
type D4198 = :* (:* (:* D4 D1) D9) D8
type D4197 = :* (:* (:* D4 D1) D9) D7
type D4196 = :* (:* (:* D4 D1) D9) D6
type D4195 = :* (:* (:* D4 D1) D9) D5
type D4194 = :* (:* (:* D4 D1) D9) D4
type D4193 = :* (:* (:* D4 D1) D9) D3
type D4192 = :* (:* (:* D4 D1) D9) D2
type D4191 = :* (:* (:* D4 D1) D9) D1
type D4190 = :* (:* (:* D4 D1) D9) D0
type D4189 = :* (:* (:* D4 D1) D8) D9
type D4188 = :* (:* (:* D4 D1) D8) D8
type D4187 = :* (:* (:* D4 D1) D8) D7
type D4186 = :* (:* (:* D4 D1) D8) D6
type D4185 = :* (:* (:* D4 D1) D8) D5
type D4184 = :* (:* (:* D4 D1) D8) D4
type D4183 = :* (:* (:* D4 D1) D8) D3
type D4182 = :* (:* (:* D4 D1) D8) D2
type D4181 = :* (:* (:* D4 D1) D8) D1
type D4180 = :* (:* (:* D4 D1) D8) D0
type D4179 = :* (:* (:* D4 D1) D7) D9
type D4178 = :* (:* (:* D4 D1) D7) D8
type D4177 = :* (:* (:* D4 D1) D7) D7
type D4176 = :* (:* (:* D4 D1) D7) D6
type D4175 = :* (:* (:* D4 D1) D7) D5
type D4174 = :* (:* (:* D4 D1) D7) D4
type D4173 = :* (:* (:* D4 D1) D7) D3
type D4172 = :* (:* (:* D4 D1) D7) D2
type D4171 = :* (:* (:* D4 D1) D7) D1
type D4170 = :* (:* (:* D4 D1) D7) D0
type D4169 = :* (:* (:* D4 D1) D6) D9
type D4168 = :* (:* (:* D4 D1) D6) D8
type D4167 = :* (:* (:* D4 D1) D6) D7
type D4166 = :* (:* (:* D4 D1) D6) D6
type D4165 = :* (:* (:* D4 D1) D6) D5
type D4164 = :* (:* (:* D4 D1) D6) D4
type D4163 = :* (:* (:* D4 D1) D6) D3
type D4162 = :* (:* (:* D4 D1) D6) D2
type D4161 = :* (:* (:* D4 D1) D6) D1
type D4160 = :* (:* (:* D4 D1) D6) D0
type D4159 = :* (:* (:* D4 D1) D5) D9
type D4158 = :* (:* (:* D4 D1) D5) D8
type D4157 = :* (:* (:* D4 D1) D5) D7
type D4156 = :* (:* (:* D4 D1) D5) D6
type D4155 = :* (:* (:* D4 D1) D5) D5
type D4154 = :* (:* (:* D4 D1) D5) D4
type D4153 = :* (:* (:* D4 D1) D5) D3
type D4152 = :* (:* (:* D4 D1) D5) D2
type D4151 = :* (:* (:* D4 D1) D5) D1
type D4150 = :* (:* (:* D4 D1) D5) D0
type D4149 = :* (:* (:* D4 D1) D4) D9
type D4148 = :* (:* (:* D4 D1) D4) D8
type D4147 = :* (:* (:* D4 D1) D4) D7
type D4146 = :* (:* (:* D4 D1) D4) D6
type D4145 = :* (:* (:* D4 D1) D4) D5
type D4144 = :* (:* (:* D4 D1) D4) D4
type D4143 = :* (:* (:* D4 D1) D4) D3
type D4142 = :* (:* (:* D4 D1) D4) D2
type D4141 = :* (:* (:* D4 D1) D4) D1
type D4140 = :* (:* (:* D4 D1) D4) D0
type D4139 = :* (:* (:* D4 D1) D3) D9
type D4138 = :* (:* (:* D4 D1) D3) D8
type D4137 = :* (:* (:* D4 D1) D3) D7
type D4136 = :* (:* (:* D4 D1) D3) D6
type D4135 = :* (:* (:* D4 D1) D3) D5
type D4134 = :* (:* (:* D4 D1) D3) D4
type D4133 = :* (:* (:* D4 D1) D3) D3
type D4132 = :* (:* (:* D4 D1) D3) D2
type D4131 = :* (:* (:* D4 D1) D3) D1
type D4130 = :* (:* (:* D4 D1) D3) D0
type D4129 = :* (:* (:* D4 D1) D2) D9
type D4128 = :* (:* (:* D4 D1) D2) D8
type D4127 = :* (:* (:* D4 D1) D2) D7
type D4126 = :* (:* (:* D4 D1) D2) D6
type D4125 = :* (:* (:* D4 D1) D2) D5
type D4124 = :* (:* (:* D4 D1) D2) D4
type D4123 = :* (:* (:* D4 D1) D2) D3
type D4122 = :* (:* (:* D4 D1) D2) D2
type D4121 = :* (:* (:* D4 D1) D2) D1
type D4120 = :* (:* (:* D4 D1) D2) D0
type D4119 = :* (:* (:* D4 D1) D1) D9
type D4118 = :* (:* (:* D4 D1) D1) D8
type D4117 = :* (:* (:* D4 D1) D1) D7
type D4116 = :* (:* (:* D4 D1) D1) D6
type D4115 = :* (:* (:* D4 D1) D1) D5
type D4114 = :* (:* (:* D4 D1) D1) D4
type D4113 = :* (:* (:* D4 D1) D1) D3
type D4112 = :* (:* (:* D4 D1) D1) D2
type D4111 = :* (:* (:* D4 D1) D1) D1
type D4110 = :* (:* (:* D4 D1) D1) D0
type D4109 = :* (:* (:* D4 D1) D0) D9
type D4108 = :* (:* (:* D4 D1) D0) D8
type D4107 = :* (:* (:* D4 D1) D0) D7
type D4106 = :* (:* (:* D4 D1) D0) D6
type D4105 = :* (:* (:* D4 D1) D0) D5
type D4104 = :* (:* (:* D4 D1) D0) D4
type D4103 = :* (:* (:* D4 D1) D0) D3
type D4102 = :* (:* (:* D4 D1) D0) D2
type D4101 = :* (:* (:* D4 D1) D0) D1
type D4100 = :* (:* (:* D4 D1) D0) D0
type D4099 = :* (:* (:* D4 D0) D9) D9
type D4098 = :* (:* (:* D4 D0) D9) D8
type D4097 = :* (:* (:* D4 D0) D9) D7
type H1000 = :* (:* (:* D4 D0) D9) D6
type D4096 = :* (:* (:* D4 D0) D9) D6
type O10000 = :* (:* (:* D4 D0) D9) D6
type HFFF = :* (:* (:* D4 D0) D9) D5
type D4095 = :* (:* (:* D4 D0) D9) D5
type O7777 = :* (:* (:* D4 D0) D9) D5
type HFFE = :* (:* (:* D4 D0) D9) D4
type D4094 = :* (:* (:* D4 D0) D9) D4
type O7776 = :* (:* (:* D4 D0) D9) D4
type HFFD = :* (:* (:* D4 D0) D9) D3
type D4093 = :* (:* (:* D4 D0) D9) D3
type O7775 = :* (:* (:* D4 D0) D9) D3
type HFFC = :* (:* (:* D4 D0) D9) D2
type D4092 = :* (:* (:* D4 D0) D9) D2
type O7774 = :* (:* (:* D4 D0) D9) D2
type HFFB = :* (:* (:* D4 D0) D9) D1
type D4091 = :* (:* (:* D4 D0) D9) D1
type O7773 = :* (:* (:* D4 D0) D9) D1
type HFFA = :* (:* (:* D4 D0) D9) D0
type D4090 = :* (:* (:* D4 D0) D9) D0
type O7772 = :* (:* (:* D4 D0) D9) D0
type HFF9 = :* (:* (:* D4 D0) D8) D9
type D4089 = :* (:* (:* D4 D0) D8) D9
type O7771 = :* (:* (:* D4 D0) D8) D9
type HFF8 = :* (:* (:* D4 D0) D8) D8
type D4088 = :* (:* (:* D4 D0) D8) D8
type O7770 = :* (:* (:* D4 D0) D8) D8
type HFF7 = :* (:* (:* D4 D0) D8) D7
type D4087 = :* (:* (:* D4 D0) D8) D7
type O7767 = :* (:* (:* D4 D0) D8) D7
type HFF6 = :* (:* (:* D4 D0) D8) D6
type D4086 = :* (:* (:* D4 D0) D8) D6
type O7766 = :* (:* (:* D4 D0) D8) D6
type HFF5 = :* (:* (:* D4 D0) D8) D5
type D4085 = :* (:* (:* D4 D0) D8) D5
type O7765 = :* (:* (:* D4 D0) D8) D5
type HFF4 = :* (:* (:* D4 D0) D8) D4
type D4084 = :* (:* (:* D4 D0) D8) D4
type O7764 = :* (:* (:* D4 D0) D8) D4
type HFF3 = :* (:* (:* D4 D0) D8) D3
type D4083 = :* (:* (:* D4 D0) D8) D3
type O7763 = :* (:* (:* D4 D0) D8) D3
type HFF2 = :* (:* (:* D4 D0) D8) D2
type D4082 = :* (:* (:* D4 D0) D8) D2
type O7762 = :* (:* (:* D4 D0) D8) D2
type HFF1 = :* (:* (:* D4 D0) D8) D1
type D4081 = :* (:* (:* D4 D0) D8) D1
type O7761 = :* (:* (:* D4 D0) D8) D1
type HFF0 = :* (:* (:* D4 D0) D8) D0
type D4080 = :* (:* (:* D4 D0) D8) D0
type O7760 = :* (:* (:* D4 D0) D8) D0
type HFEF = :* (:* (:* D4 D0) D7) D9
type D4079 = :* (:* (:* D4 D0) D7) D9
type O7757 = :* (:* (:* D4 D0) D7) D9
type HFEE = :* (:* (:* D4 D0) D7) D8
type D4078 = :* (:* (:* D4 D0) D7) D8
type O7756 = :* (:* (:* D4 D0) D7) D8
type HFED = :* (:* (:* D4 D0) D7) D7
type D4077 = :* (:* (:* D4 D0) D7) D7
type O7755 = :* (:* (:* D4 D0) D7) D7
type HFEC = :* (:* (:* D4 D0) D7) D6
type D4076 = :* (:* (:* D4 D0) D7) D6
type O7754 = :* (:* (:* D4 D0) D7) D6
type HFEB = :* (:* (:* D4 D0) D7) D5
type D4075 = :* (:* (:* D4 D0) D7) D5
type O7753 = :* (:* (:* D4 D0) D7) D5
type HFEA = :* (:* (:* D4 D0) D7) D4
type D4074 = :* (:* (:* D4 D0) D7) D4
type O7752 = :* (:* (:* D4 D0) D7) D4
type HFE9 = :* (:* (:* D4 D0) D7) D3
type D4073 = :* (:* (:* D4 D0) D7) D3
type O7751 = :* (:* (:* D4 D0) D7) D3
type HFE8 = :* (:* (:* D4 D0) D7) D2
type D4072 = :* (:* (:* D4 D0) D7) D2
type O7750 = :* (:* (:* D4 D0) D7) D2
type HFE7 = :* (:* (:* D4 D0) D7) D1
type D4071 = :* (:* (:* D4 D0) D7) D1
type O7747 = :* (:* (:* D4 D0) D7) D1
type HFE6 = :* (:* (:* D4 D0) D7) D0
type D4070 = :* (:* (:* D4 D0) D7) D0
type O7746 = :* (:* (:* D4 D0) D7) D0
type HFE5 = :* (:* (:* D4 D0) D6) D9
type D4069 = :* (:* (:* D4 D0) D6) D9
type O7745 = :* (:* (:* D4 D0) D6) D9
type HFE4 = :* (:* (:* D4 D0) D6) D8
type D4068 = :* (:* (:* D4 D0) D6) D8
type O7744 = :* (:* (:* D4 D0) D6) D8
type HFE3 = :* (:* (:* D4 D0) D6) D7
type D4067 = :* (:* (:* D4 D0) D6) D7
type O7743 = :* (:* (:* D4 D0) D6) D7
type HFE2 = :* (:* (:* D4 D0) D6) D6
type D4066 = :* (:* (:* D4 D0) D6) D6
type O7742 = :* (:* (:* D4 D0) D6) D6
type HFE1 = :* (:* (:* D4 D0) D6) D5
type D4065 = :* (:* (:* D4 D0) D6) D5
type O7741 = :* (:* (:* D4 D0) D6) D5
type HFE0 = :* (:* (:* D4 D0) D6) D4
type D4064 = :* (:* (:* D4 D0) D6) D4
type O7740 = :* (:* (:* D4 D0) D6) D4
type HFDF = :* (:* (:* D4 D0) D6) D3
type D4063 = :* (:* (:* D4 D0) D6) D3
type O7737 = :* (:* (:* D4 D0) D6) D3
type HFDE = :* (:* (:* D4 D0) D6) D2
type D4062 = :* (:* (:* D4 D0) D6) D2
type O7736 = :* (:* (:* D4 D0) D6) D2
type HFDD = :* (:* (:* D4 D0) D6) D1
type D4061 = :* (:* (:* D4 D0) D6) D1
type O7735 = :* (:* (:* D4 D0) D6) D1
type HFDC = :* (:* (:* D4 D0) D6) D0
type D4060 = :* (:* (:* D4 D0) D6) D0
type O7734 = :* (:* (:* D4 D0) D6) D0
type HFDB = :* (:* (:* D4 D0) D5) D9
type D4059 = :* (:* (:* D4 D0) D5) D9
type O7733 = :* (:* (:* D4 D0) D5) D9
type HFDA = :* (:* (:* D4 D0) D5) D8
type D4058 = :* (:* (:* D4 D0) D5) D8
type O7732 = :* (:* (:* D4 D0) D5) D8
type HFD9 = :* (:* (:* D4 D0) D5) D7
type D4057 = :* (:* (:* D4 D0) D5) D7
type O7731 = :* (:* (:* D4 D0) D5) D7
type HFD8 = :* (:* (:* D4 D0) D5) D6
type D4056 = :* (:* (:* D4 D0) D5) D6
type O7730 = :* (:* (:* D4 D0) D5) D6
type HFD7 = :* (:* (:* D4 D0) D5) D5
type D4055 = :* (:* (:* D4 D0) D5) D5
type O7727 = :* (:* (:* D4 D0) D5) D5
type HFD6 = :* (:* (:* D4 D0) D5) D4
type D4054 = :* (:* (:* D4 D0) D5) D4
type O7726 = :* (:* (:* D4 D0) D5) D4
type HFD5 = :* (:* (:* D4 D0) D5) D3
type D4053 = :* (:* (:* D4 D0) D5) D3
type O7725 = :* (:* (:* D4 D0) D5) D3
type HFD4 = :* (:* (:* D4 D0) D5) D2
type D4052 = :* (:* (:* D4 D0) D5) D2
type O7724 = :* (:* (:* D4 D0) D5) D2
type HFD3 = :* (:* (:* D4 D0) D5) D1
type D4051 = :* (:* (:* D4 D0) D5) D1
type O7723 = :* (:* (:* D4 D0) D5) D1
type HFD2 = :* (:* (:* D4 D0) D5) D0
type D4050 = :* (:* (:* D4 D0) D5) D0
type O7722 = :* (:* (:* D4 D0) D5) D0
type HFD1 = :* (:* (:* D4 D0) D4) D9
type D4049 = :* (:* (:* D4 D0) D4) D9
type O7721 = :* (:* (:* D4 D0) D4) D9
type HFD0 = :* (:* (:* D4 D0) D4) D8
type D4048 = :* (:* (:* D4 D0) D4) D8
type O7720 = :* (:* (:* D4 D0) D4) D8
type HFCF = :* (:* (:* D4 D0) D4) D7
type D4047 = :* (:* (:* D4 D0) D4) D7
type O7717 = :* (:* (:* D4 D0) D4) D7
type HFCE = :* (:* (:* D4 D0) D4) D6
type D4046 = :* (:* (:* D4 D0) D4) D6
type O7716 = :* (:* (:* D4 D0) D4) D6
type HFCD = :* (:* (:* D4 D0) D4) D5
type D4045 = :* (:* (:* D4 D0) D4) D5
type O7715 = :* (:* (:* D4 D0) D4) D5
type HFCC = :* (:* (:* D4 D0) D4) D4
type D4044 = :* (:* (:* D4 D0) D4) D4
type O7714 = :* (:* (:* D4 D0) D4) D4
type HFCB = :* (:* (:* D4 D0) D4) D3
type D4043 = :* (:* (:* D4 D0) D4) D3
type O7713 = :* (:* (:* D4 D0) D4) D3
type HFCA = :* (:* (:* D4 D0) D4) D2
type D4042 = :* (:* (:* D4 D0) D4) D2
type O7712 = :* (:* (:* D4 D0) D4) D2
type HFC9 = :* (:* (:* D4 D0) D4) D1
type D4041 = :* (:* (:* D4 D0) D4) D1
type O7711 = :* (:* (:* D4 D0) D4) D1
type HFC8 = :* (:* (:* D4 D0) D4) D0
type D4040 = :* (:* (:* D4 D0) D4) D0
type O7710 = :* (:* (:* D4 D0) D4) D0
type HFC7 = :* (:* (:* D4 D0) D3) D9
type D4039 = :* (:* (:* D4 D0) D3) D9
type O7707 = :* (:* (:* D4 D0) D3) D9
type HFC6 = :* (:* (:* D4 D0) D3) D8
type D4038 = :* (:* (:* D4 D0) D3) D8
type O7706 = :* (:* (:* D4 D0) D3) D8
type HFC5 = :* (:* (:* D4 D0) D3) D7
type D4037 = :* (:* (:* D4 D0) D3) D7
type O7705 = :* (:* (:* D4 D0) D3) D7
type HFC4 = :* (:* (:* D4 D0) D3) D6
type D4036 = :* (:* (:* D4 D0) D3) D6
type O7704 = :* (:* (:* D4 D0) D3) D6
type HFC3 = :* (:* (:* D4 D0) D3) D5
type D4035 = :* (:* (:* D4 D0) D3) D5
type O7703 = :* (:* (:* D4 D0) D3) D5
type HFC2 = :* (:* (:* D4 D0) D3) D4
type D4034 = :* (:* (:* D4 D0) D3) D4
type O7702 = :* (:* (:* D4 D0) D3) D4
type HFC1 = :* (:* (:* D4 D0) D3) D3
type D4033 = :* (:* (:* D4 D0) D3) D3
type O7701 = :* (:* (:* D4 D0) D3) D3
type HFC0 = :* (:* (:* D4 D0) D3) D2
type D4032 = :* (:* (:* D4 D0) D3) D2
type O7700 = :* (:* (:* D4 D0) D3) D2
type HFBF = :* (:* (:* D4 D0) D3) D1
type D4031 = :* (:* (:* D4 D0) D3) D1
type O7677 = :* (:* (:* D4 D0) D3) D1
type HFBE = :* (:* (:* D4 D0) D3) D0
type D4030 = :* (:* (:* D4 D0) D3) D0
type O7676 = :* (:* (:* D4 D0) D3) D0
type HFBD = :* (:* (:* D4 D0) D2) D9
type D4029 = :* (:* (:* D4 D0) D2) D9
type O7675 = :* (:* (:* D4 D0) D2) D9
type HFBC = :* (:* (:* D4 D0) D2) D8
type D4028 = :* (:* (:* D4 D0) D2) D8
type O7674 = :* (:* (:* D4 D0) D2) D8
type HFBB = :* (:* (:* D4 D0) D2) D7
type D4027 = :* (:* (:* D4 D0) D2) D7
type O7673 = :* (:* (:* D4 D0) D2) D7
type HFBA = :* (:* (:* D4 D0) D2) D6
type D4026 = :* (:* (:* D4 D0) D2) D6
type O7672 = :* (:* (:* D4 D0) D2) D6
type HFB9 = :* (:* (:* D4 D0) D2) D5
type D4025 = :* (:* (:* D4 D0) D2) D5
type O7671 = :* (:* (:* D4 D0) D2) D5
type HFB8 = :* (:* (:* D4 D0) D2) D4
type D4024 = :* (:* (:* D4 D0) D2) D4
type O7670 = :* (:* (:* D4 D0) D2) D4
type HFB7 = :* (:* (:* D4 D0) D2) D3
type D4023 = :* (:* (:* D4 D0) D2) D3
type O7667 = :* (:* (:* D4 D0) D2) D3
type HFB6 = :* (:* (:* D4 D0) D2) D2
type D4022 = :* (:* (:* D4 D0) D2) D2
type O7666 = :* (:* (:* D4 D0) D2) D2
type HFB5 = :* (:* (:* D4 D0) D2) D1
type D4021 = :* (:* (:* D4 D0) D2) D1
type O7665 = :* (:* (:* D4 D0) D2) D1
type HFB4 = :* (:* (:* D4 D0) D2) D0
type D4020 = :* (:* (:* D4 D0) D2) D0
type O7664 = :* (:* (:* D4 D0) D2) D0
type HFB3 = :* (:* (:* D4 D0) D1) D9
type D4019 = :* (:* (:* D4 D0) D1) D9
type O7663 = :* (:* (:* D4 D0) D1) D9
type HFB2 = :* (:* (:* D4 D0) D1) D8
type D4018 = :* (:* (:* D4 D0) D1) D8
type O7662 = :* (:* (:* D4 D0) D1) D8
type HFB1 = :* (:* (:* D4 D0) D1) D7
type D4017 = :* (:* (:* D4 D0) D1) D7
type O7661 = :* (:* (:* D4 D0) D1) D7
type HFB0 = :* (:* (:* D4 D0) D1) D6
type D4016 = :* (:* (:* D4 D0) D1) D6
type O7660 = :* (:* (:* D4 D0) D1) D6
type HFAF = :* (:* (:* D4 D0) D1) D5
type D4015 = :* (:* (:* D4 D0) D1) D5
type O7657 = :* (:* (:* D4 D0) D1) D5
type HFAE = :* (:* (:* D4 D0) D1) D4
type D4014 = :* (:* (:* D4 D0) D1) D4
type O7656 = :* (:* (:* D4 D0) D1) D4
type HFAD = :* (:* (:* D4 D0) D1) D3
type D4013 = :* (:* (:* D4 D0) D1) D3
type O7655 = :* (:* (:* D4 D0) D1) D3
type HFAC = :* (:* (:* D4 D0) D1) D2
type D4012 = :* (:* (:* D4 D0) D1) D2
type O7654 = :* (:* (:* D4 D0) D1) D2
type HFAB = :* (:* (:* D4 D0) D1) D1
type D4011 = :* (:* (:* D4 D0) D1) D1
type O7653 = :* (:* (:* D4 D0) D1) D1
type HFAA = :* (:* (:* D4 D0) D1) D0
type D4010 = :* (:* (:* D4 D0) D1) D0
type O7652 = :* (:* (:* D4 D0) D1) D0
type HFA9 = :* (:* (:* D4 D0) D0) D9
type D4009 = :* (:* (:* D4 D0) D0) D9
type O7651 = :* (:* (:* D4 D0) D0) D9
type HFA8 = :* (:* (:* D4 D0) D0) D8
type D4008 = :* (:* (:* D4 D0) D0) D8
type O7650 = :* (:* (:* D4 D0) D0) D8
type HFA7 = :* (:* (:* D4 D0) D0) D7
type D4007 = :* (:* (:* D4 D0) D0) D7
type O7647 = :* (:* (:* D4 D0) D0) D7
type HFA6 = :* (:* (:* D4 D0) D0) D6
type D4006 = :* (:* (:* D4 D0) D0) D6
type O7646 = :* (:* (:* D4 D0) D0) D6
type HFA5 = :* (:* (:* D4 D0) D0) D5
type D4005 = :* (:* (:* D4 D0) D0) D5
type O7645 = :* (:* (:* D4 D0) D0) D5
type HFA4 = :* (:* (:* D4 D0) D0) D4
type D4004 = :* (:* (:* D4 D0) D0) D4
type O7644 = :* (:* (:* D4 D0) D0) D4
type HFA3 = :* (:* (:* D4 D0) D0) D3
type D4003 = :* (:* (:* D4 D0) D0) D3
type O7643 = :* (:* (:* D4 D0) D0) D3
type HFA2 = :* (:* (:* D4 D0) D0) D2
type D4002 = :* (:* (:* D4 D0) D0) D2
type O7642 = :* (:* (:* D4 D0) D0) D2
type HFA1 = :* (:* (:* D4 D0) D0) D1
type D4001 = :* (:* (:* D4 D0) D0) D1
type O7641 = :* (:* (:* D4 D0) D0) D1
type HFA0 = :* (:* (:* D4 D0) D0) D0
type D4000 = :* (:* (:* D4 D0) D0) D0
type O7640 = :* (:* (:* D4 D0) D0) D0
type HF9F = :* (:* (:* D3 D9) D9) D9
type D3999 = :* (:* (:* D3 D9) D9) D9
type O7637 = :* (:* (:* D3 D9) D9) D9
type HF9E = :* (:* (:* D3 D9) D9) D8
type D3998 = :* (:* (:* D3 D9) D9) D8
type O7636 = :* (:* (:* D3 D9) D9) D8
type HF9D = :* (:* (:* D3 D9) D9) D7
type D3997 = :* (:* (:* D3 D9) D9) D7
type O7635 = :* (:* (:* D3 D9) D9) D7
type HF9C = :* (:* (:* D3 D9) D9) D6
type D3996 = :* (:* (:* D3 D9) D9) D6
type O7634 = :* (:* (:* D3 D9) D9) D6
type HF9B = :* (:* (:* D3 D9) D9) D5
type D3995 = :* (:* (:* D3 D9) D9) D5
type O7633 = :* (:* (:* D3 D9) D9) D5
type HF9A = :* (:* (:* D3 D9) D9) D4
type D3994 = :* (:* (:* D3 D9) D9) D4
type O7632 = :* (:* (:* D3 D9) D9) D4
type HF99 = :* (:* (:* D3 D9) D9) D3
type D3993 = :* (:* (:* D3 D9) D9) D3
type O7631 = :* (:* (:* D3 D9) D9) D3
type HF98 = :* (:* (:* D3 D9) D9) D2
type D3992 = :* (:* (:* D3 D9) D9) D2
type O7630 = :* (:* (:* D3 D9) D9) D2
type HF97 = :* (:* (:* D3 D9) D9) D1
type D3991 = :* (:* (:* D3 D9) D9) D1
type O7627 = :* (:* (:* D3 D9) D9) D1
type HF96 = :* (:* (:* D3 D9) D9) D0
type D3990 = :* (:* (:* D3 D9) D9) D0
type O7626 = :* (:* (:* D3 D9) D9) D0
type HF95 = :* (:* (:* D3 D9) D8) D9
type D3989 = :* (:* (:* D3 D9) D8) D9
type O7625 = :* (:* (:* D3 D9) D8) D9
type HF94 = :* (:* (:* D3 D9) D8) D8
type D3988 = :* (:* (:* D3 D9) D8) D8
type O7624 = :* (:* (:* D3 D9) D8) D8
type HF93 = :* (:* (:* D3 D9) D8) D7
type D3987 = :* (:* (:* D3 D9) D8) D7
type O7623 = :* (:* (:* D3 D9) D8) D7
type HF92 = :* (:* (:* D3 D9) D8) D6
type D3986 = :* (:* (:* D3 D9) D8) D6
type O7622 = :* (:* (:* D3 D9) D8) D6
type HF91 = :* (:* (:* D3 D9) D8) D5
type D3985 = :* (:* (:* D3 D9) D8) D5
type O7621 = :* (:* (:* D3 D9) D8) D5
type HF90 = :* (:* (:* D3 D9) D8) D4
type D3984 = :* (:* (:* D3 D9) D8) D4
type O7620 = :* (:* (:* D3 D9) D8) D4
type HF8F = :* (:* (:* D3 D9) D8) D3
type D3983 = :* (:* (:* D3 D9) D8) D3
type O7617 = :* (:* (:* D3 D9) D8) D3
type HF8E = :* (:* (:* D3 D9) D8) D2
type D3982 = :* (:* (:* D3 D9) D8) D2
type O7616 = :* (:* (:* D3 D9) D8) D2
type HF8D = :* (:* (:* D3 D9) D8) D1
type D3981 = :* (:* (:* D3 D9) D8) D1
type O7615 = :* (:* (:* D3 D9) D8) D1
type HF8C = :* (:* (:* D3 D9) D8) D0
type D3980 = :* (:* (:* D3 D9) D8) D0
type O7614 = :* (:* (:* D3 D9) D8) D0
type HF8B = :* (:* (:* D3 D9) D7) D9
type D3979 = :* (:* (:* D3 D9) D7) D9
type O7613 = :* (:* (:* D3 D9) D7) D9
type HF8A = :* (:* (:* D3 D9) D7) D8
type D3978 = :* (:* (:* D3 D9) D7) D8
type O7612 = :* (:* (:* D3 D9) D7) D8
type HF89 = :* (:* (:* D3 D9) D7) D7
type D3977 = :* (:* (:* D3 D9) D7) D7
type O7611 = :* (:* (:* D3 D9) D7) D7
type HF88 = :* (:* (:* D3 D9) D7) D6
type D3976 = :* (:* (:* D3 D9) D7) D6
type O7610 = :* (:* (:* D3 D9) D7) D6
type HF87 = :* (:* (:* D3 D9) D7) D5
type D3975 = :* (:* (:* D3 D9) D7) D5
type O7607 = :* (:* (:* D3 D9) D7) D5
type HF86 = :* (:* (:* D3 D9) D7) D4
type D3974 = :* (:* (:* D3 D9) D7) D4
type O7606 = :* (:* (:* D3 D9) D7) D4
type HF85 = :* (:* (:* D3 D9) D7) D3
type D3973 = :* (:* (:* D3 D9) D7) D3
type O7605 = :* (:* (:* D3 D9) D7) D3
type HF84 = :* (:* (:* D3 D9) D7) D2
type D3972 = :* (:* (:* D3 D9) D7) D2
type O7604 = :* (:* (:* D3 D9) D7) D2
type HF83 = :* (:* (:* D3 D9) D7) D1
type D3971 = :* (:* (:* D3 D9) D7) D1
type O7603 = :* (:* (:* D3 D9) D7) D1
type HF82 = :* (:* (:* D3 D9) D7) D0
type D3970 = :* (:* (:* D3 D9) D7) D0
type O7602 = :* (:* (:* D3 D9) D7) D0
type HF81 = :* (:* (:* D3 D9) D6) D9
type D3969 = :* (:* (:* D3 D9) D6) D9
type O7601 = :* (:* (:* D3 D9) D6) D9
type HF80 = :* (:* (:* D3 D9) D6) D8
type D3968 = :* (:* (:* D3 D9) D6) D8
type O7600 = :* (:* (:* D3 D9) D6) D8
type HF7F = :* (:* (:* D3 D9) D6) D7
type D3967 = :* (:* (:* D3 D9) D6) D7
type O7577 = :* (:* (:* D3 D9) D6) D7
type HF7E = :* (:* (:* D3 D9) D6) D6
type D3966 = :* (:* (:* D3 D9) D6) D6
type O7576 = :* (:* (:* D3 D9) D6) D6
type HF7D = :* (:* (:* D3 D9) D6) D5
type D3965 = :* (:* (:* D3 D9) D6) D5
type O7575 = :* (:* (:* D3 D9) D6) D5
type HF7C = :* (:* (:* D3 D9) D6) D4
type D3964 = :* (:* (:* D3 D9) D6) D4
type O7574 = :* (:* (:* D3 D9) D6) D4
type HF7B = :* (:* (:* D3 D9) D6) D3
type D3963 = :* (:* (:* D3 D9) D6) D3
type O7573 = :* (:* (:* D3 D9) D6) D3
type HF7A = :* (:* (:* D3 D9) D6) D2
type D3962 = :* (:* (:* D3 D9) D6) D2
type O7572 = :* (:* (:* D3 D9) D6) D2
type HF79 = :* (:* (:* D3 D9) D6) D1
type D3961 = :* (:* (:* D3 D9) D6) D1
type O7571 = :* (:* (:* D3 D9) D6) D1
type HF78 = :* (:* (:* D3 D9) D6) D0
type D3960 = :* (:* (:* D3 D9) D6) D0
type O7570 = :* (:* (:* D3 D9) D6) D0
type HF77 = :* (:* (:* D3 D9) D5) D9
type D3959 = :* (:* (:* D3 D9) D5) D9
type O7567 = :* (:* (:* D3 D9) D5) D9
type HF76 = :* (:* (:* D3 D9) D5) D8
type D3958 = :* (:* (:* D3 D9) D5) D8
type O7566 = :* (:* (:* D3 D9) D5) D8
type HF75 = :* (:* (:* D3 D9) D5) D7
type D3957 = :* (:* (:* D3 D9) D5) D7
type O7565 = :* (:* (:* D3 D9) D5) D7
type HF74 = :* (:* (:* D3 D9) D5) D6
type D3956 = :* (:* (:* D3 D9) D5) D6
type O7564 = :* (:* (:* D3 D9) D5) D6
type HF73 = :* (:* (:* D3 D9) D5) D5
type D3955 = :* (:* (:* D3 D9) D5) D5
type O7563 = :* (:* (:* D3 D9) D5) D5
type HF72 = :* (:* (:* D3 D9) D5) D4
type D3954 = :* (:* (:* D3 D9) D5) D4
type O7562 = :* (:* (:* D3 D9) D5) D4
type HF71 = :* (:* (:* D3 D9) D5) D3
type D3953 = :* (:* (:* D3 D9) D5) D3
type O7561 = :* (:* (:* D3 D9) D5) D3
type HF70 = :* (:* (:* D3 D9) D5) D2
type D3952 = :* (:* (:* D3 D9) D5) D2
type O7560 = :* (:* (:* D3 D9) D5) D2
type HF6F = :* (:* (:* D3 D9) D5) D1
type D3951 = :* (:* (:* D3 D9) D5) D1
type O7557 = :* (:* (:* D3 D9) D5) D1
type HF6E = :* (:* (:* D3 D9) D5) D0
type D3950 = :* (:* (:* D3 D9) D5) D0
type O7556 = :* (:* (:* D3 D9) D5) D0
type HF6D = :* (:* (:* D3 D9) D4) D9
type D3949 = :* (:* (:* D3 D9) D4) D9
type O7555 = :* (:* (:* D3 D9) D4) D9
type HF6C = :* (:* (:* D3 D9) D4) D8
type D3948 = :* (:* (:* D3 D9) D4) D8
type O7554 = :* (:* (:* D3 D9) D4) D8
type HF6B = :* (:* (:* D3 D9) D4) D7
type D3947 = :* (:* (:* D3 D9) D4) D7
type O7553 = :* (:* (:* D3 D9) D4) D7
type HF6A = :* (:* (:* D3 D9) D4) D6
type D3946 = :* (:* (:* D3 D9) D4) D6
type O7552 = :* (:* (:* D3 D9) D4) D6
type HF69 = :* (:* (:* D3 D9) D4) D5
type D3945 = :* (:* (:* D3 D9) D4) D5
type O7551 = :* (:* (:* D3 D9) D4) D5
type HF68 = :* (:* (:* D3 D9) D4) D4
type D3944 = :* (:* (:* D3 D9) D4) D4
type O7550 = :* (:* (:* D3 D9) D4) D4
type HF67 = :* (:* (:* D3 D9) D4) D3
type D3943 = :* (:* (:* D3 D9) D4) D3
type O7547 = :* (:* (:* D3 D9) D4) D3
type HF66 = :* (:* (:* D3 D9) D4) D2
type D3942 = :* (:* (:* D3 D9) D4) D2
type O7546 = :* (:* (:* D3 D9) D4) D2
type HF65 = :* (:* (:* D3 D9) D4) D1
type D3941 = :* (:* (:* D3 D9) D4) D1
type O7545 = :* (:* (:* D3 D9) D4) D1
type HF64 = :* (:* (:* D3 D9) D4) D0
type D3940 = :* (:* (:* D3 D9) D4) D0
type O7544 = :* (:* (:* D3 D9) D4) D0
type HF63 = :* (:* (:* D3 D9) D3) D9
type D3939 = :* (:* (:* D3 D9) D3) D9
type O7543 = :* (:* (:* D3 D9) D3) D9
type HF62 = :* (:* (:* D3 D9) D3) D8
type D3938 = :* (:* (:* D3 D9) D3) D8
type O7542 = :* (:* (:* D3 D9) D3) D8
type HF61 = :* (:* (:* D3 D9) D3) D7
type D3937 = :* (:* (:* D3 D9) D3) D7
type O7541 = :* (:* (:* D3 D9) D3) D7
type HF60 = :* (:* (:* D3 D9) D3) D6
type D3936 = :* (:* (:* D3 D9) D3) D6
type O7540 = :* (:* (:* D3 D9) D3) D6
type HF5F = :* (:* (:* D3 D9) D3) D5
type D3935 = :* (:* (:* D3 D9) D3) D5
type O7537 = :* (:* (:* D3 D9) D3) D5
type HF5E = :* (:* (:* D3 D9) D3) D4
type D3934 = :* (:* (:* D3 D9) D3) D4
type O7536 = :* (:* (:* D3 D9) D3) D4
type HF5D = :* (:* (:* D3 D9) D3) D3
type D3933 = :* (:* (:* D3 D9) D3) D3
type O7535 = :* (:* (:* D3 D9) D3) D3
type HF5C = :* (:* (:* D3 D9) D3) D2
type D3932 = :* (:* (:* D3 D9) D3) D2
type O7534 = :* (:* (:* D3 D9) D3) D2
type HF5B = :* (:* (:* D3 D9) D3) D1
type D3931 = :* (:* (:* D3 D9) D3) D1
type O7533 = :* (:* (:* D3 D9) D3) D1
type HF5A = :* (:* (:* D3 D9) D3) D0
type D3930 = :* (:* (:* D3 D9) D3) D0
type O7532 = :* (:* (:* D3 D9) D3) D0
type HF59 = :* (:* (:* D3 D9) D2) D9
type D3929 = :* (:* (:* D3 D9) D2) D9
type O7531 = :* (:* (:* D3 D9) D2) D9
type HF58 = :* (:* (:* D3 D9) D2) D8
type D3928 = :* (:* (:* D3 D9) D2) D8
type O7530 = :* (:* (:* D3 D9) D2) D8
type HF57 = :* (:* (:* D3 D9) D2) D7
type D3927 = :* (:* (:* D3 D9) D2) D7
type O7527 = :* (:* (:* D3 D9) D2) D7
type HF56 = :* (:* (:* D3 D9) D2) D6
type D3926 = :* (:* (:* D3 D9) D2) D6
type O7526 = :* (:* (:* D3 D9) D2) D6
type HF55 = :* (:* (:* D3 D9) D2) D5
type D3925 = :* (:* (:* D3 D9) D2) D5
type O7525 = :* (:* (:* D3 D9) D2) D5
type HF54 = :* (:* (:* D3 D9) D2) D4
type D3924 = :* (:* (:* D3 D9) D2) D4
type O7524 = :* (:* (:* D3 D9) D2) D4
type HF53 = :* (:* (:* D3 D9) D2) D3
type D3923 = :* (:* (:* D3 D9) D2) D3
type O7523 = :* (:* (:* D3 D9) D2) D3
type HF52 = :* (:* (:* D3 D9) D2) D2
type D3922 = :* (:* (:* D3 D9) D2) D2
type O7522 = :* (:* (:* D3 D9) D2) D2
type HF51 = :* (:* (:* D3 D9) D2) D1
type D3921 = :* (:* (:* D3 D9) D2) D1
type O7521 = :* (:* (:* D3 D9) D2) D1
type HF50 = :* (:* (:* D3 D9) D2) D0
type D3920 = :* (:* (:* D3 D9) D2) D0
type O7520 = :* (:* (:* D3 D9) D2) D0
type HF4F = :* (:* (:* D3 D9) D1) D9
type D3919 = :* (:* (:* D3 D9) D1) D9
type O7517 = :* (:* (:* D3 D9) D1) D9
type HF4E = :* (:* (:* D3 D9) D1) D8
type D3918 = :* (:* (:* D3 D9) D1) D8
type O7516 = :* (:* (:* D3 D9) D1) D8
type HF4D = :* (:* (:* D3 D9) D1) D7
type D3917 = :* (:* (:* D3 D9) D1) D7
type O7515 = :* (:* (:* D3 D9) D1) D7
type HF4C = :* (:* (:* D3 D9) D1) D6
type D3916 = :* (:* (:* D3 D9) D1) D6
type O7514 = :* (:* (:* D3 D9) D1) D6
type HF4B = :* (:* (:* D3 D9) D1) D5
type D3915 = :* (:* (:* D3 D9) D1) D5
type O7513 = :* (:* (:* D3 D9) D1) D5
type HF4A = :* (:* (:* D3 D9) D1) D4
type D3914 = :* (:* (:* D3 D9) D1) D4
type O7512 = :* (:* (:* D3 D9) D1) D4
type HF49 = :* (:* (:* D3 D9) D1) D3
type D3913 = :* (:* (:* D3 D9) D1) D3
type O7511 = :* (:* (:* D3 D9) D1) D3
type HF48 = :* (:* (:* D3 D9) D1) D2
type D3912 = :* (:* (:* D3 D9) D1) D2
type O7510 = :* (:* (:* D3 D9) D1) D2
type HF47 = :* (:* (:* D3 D9) D1) D1
type D3911 = :* (:* (:* D3 D9) D1) D1
type O7507 = :* (:* (:* D3 D9) D1) D1
type HF46 = :* (:* (:* D3 D9) D1) D0
type D3910 = :* (:* (:* D3 D9) D1) D0
type O7506 = :* (:* (:* D3 D9) D1) D0
type HF45 = :* (:* (:* D3 D9) D0) D9
type D3909 = :* (:* (:* D3 D9) D0) D9
type O7505 = :* (:* (:* D3 D9) D0) D9
type HF44 = :* (:* (:* D3 D9) D0) D8
type D3908 = :* (:* (:* D3 D9) D0) D8
type O7504 = :* (:* (:* D3 D9) D0) D8
type HF43 = :* (:* (:* D3 D9) D0) D7
type D3907 = :* (:* (:* D3 D9) D0) D7
type O7503 = :* (:* (:* D3 D9) D0) D7
type HF42 = :* (:* (:* D3 D9) D0) D6
type D3906 = :* (:* (:* D3 D9) D0) D6
type O7502 = :* (:* (:* D3 D9) D0) D6
type HF41 = :* (:* (:* D3 D9) D0) D5
type D3905 = :* (:* (:* D3 D9) D0) D5
type O7501 = :* (:* (:* D3 D9) D0) D5
type HF40 = :* (:* (:* D3 D9) D0) D4
type D3904 = :* (:* (:* D3 D9) D0) D4
type O7500 = :* (:* (:* D3 D9) D0) D4
type HF3F = :* (:* (:* D3 D9) D0) D3
type D3903 = :* (:* (:* D3 D9) D0) D3
type O7477 = :* (:* (:* D3 D9) D0) D3
type HF3E = :* (:* (:* D3 D9) D0) D2
type D3902 = :* (:* (:* D3 D9) D0) D2
type O7476 = :* (:* (:* D3 D9) D0) D2
type HF3D = :* (:* (:* D3 D9) D0) D1
type D3901 = :* (:* (:* D3 D9) D0) D1
type O7475 = :* (:* (:* D3 D9) D0) D1
type HF3C = :* (:* (:* D3 D9) D0) D0
type D3900 = :* (:* (:* D3 D9) D0) D0
type O7474 = :* (:* (:* D3 D9) D0) D0
type HF3B = :* (:* (:* D3 D8) D9) D9
type D3899 = :* (:* (:* D3 D8) D9) D9
type O7473 = :* (:* (:* D3 D8) D9) D9
type HF3A = :* (:* (:* D3 D8) D9) D8
type D3898 = :* (:* (:* D3 D8) D9) D8
type O7472 = :* (:* (:* D3 D8) D9) D8
type HF39 = :* (:* (:* D3 D8) D9) D7
type D3897 = :* (:* (:* D3 D8) D9) D7
type O7471 = :* (:* (:* D3 D8) D9) D7
type HF38 = :* (:* (:* D3 D8) D9) D6
type D3896 = :* (:* (:* D3 D8) D9) D6
type O7470 = :* (:* (:* D3 D8) D9) D6
type HF37 = :* (:* (:* D3 D8) D9) D5
type D3895 = :* (:* (:* D3 D8) D9) D5
type O7467 = :* (:* (:* D3 D8) D9) D5
type HF36 = :* (:* (:* D3 D8) D9) D4
type D3894 = :* (:* (:* D3 D8) D9) D4
type O7466 = :* (:* (:* D3 D8) D9) D4
type HF35 = :* (:* (:* D3 D8) D9) D3
type D3893 = :* (:* (:* D3 D8) D9) D3
type O7465 = :* (:* (:* D3 D8) D9) D3
type HF34 = :* (:* (:* D3 D8) D9) D2
type D3892 = :* (:* (:* D3 D8) D9) D2
type O7464 = :* (:* (:* D3 D8) D9) D2
type HF33 = :* (:* (:* D3 D8) D9) D1
type D3891 = :* (:* (:* D3 D8) D9) D1
type O7463 = :* (:* (:* D3 D8) D9) D1
type HF32 = :* (:* (:* D3 D8) D9) D0
type D3890 = :* (:* (:* D3 D8) D9) D0
type O7462 = :* (:* (:* D3 D8) D9) D0
type HF31 = :* (:* (:* D3 D8) D8) D9
type D3889 = :* (:* (:* D3 D8) D8) D9
type O7461 = :* (:* (:* D3 D8) D8) D9
type HF30 = :* (:* (:* D3 D8) D8) D8
type D3888 = :* (:* (:* D3 D8) D8) D8
type O7460 = :* (:* (:* D3 D8) D8) D8
type HF2F = :* (:* (:* D3 D8) D8) D7
type D3887 = :* (:* (:* D3 D8) D8) D7
type O7457 = :* (:* (:* D3 D8) D8) D7
type HF2E = :* (:* (:* D3 D8) D8) D6
type D3886 = :* (:* (:* D3 D8) D8) D6
type O7456 = :* (:* (:* D3 D8) D8) D6
type HF2D = :* (:* (:* D3 D8) D8) D5
type D3885 = :* (:* (:* D3 D8) D8) D5
type O7455 = :* (:* (:* D3 D8) D8) D5
type HF2C = :* (:* (:* D3 D8) D8) D4
type D3884 = :* (:* (:* D3 D8) D8) D4
type O7454 = :* (:* (:* D3 D8) D8) D4
type HF2B = :* (:* (:* D3 D8) D8) D3
type D3883 = :* (:* (:* D3 D8) D8) D3
type O7453 = :* (:* (:* D3 D8) D8) D3
type HF2A = :* (:* (:* D3 D8) D8) D2
type D3882 = :* (:* (:* D3 D8) D8) D2
type O7452 = :* (:* (:* D3 D8) D8) D2
type HF29 = :* (:* (:* D3 D8) D8) D1
type D3881 = :* (:* (:* D3 D8) D8) D1
type O7451 = :* (:* (:* D3 D8) D8) D1
type HF28 = :* (:* (:* D3 D8) D8) D0
type D3880 = :* (:* (:* D3 D8) D8) D0
type O7450 = :* (:* (:* D3 D8) D8) D0
type HF27 = :* (:* (:* D3 D8) D7) D9
type D3879 = :* (:* (:* D3 D8) D7) D9
type O7447 = :* (:* (:* D3 D8) D7) D9
type HF26 = :* (:* (:* D3 D8) D7) D8
type D3878 = :* (:* (:* D3 D8) D7) D8
type O7446 = :* (:* (:* D3 D8) D7) D8
type HF25 = :* (:* (:* D3 D8) D7) D7
type D3877 = :* (:* (:* D3 D8) D7) D7
type O7445 = :* (:* (:* D3 D8) D7) D7
type HF24 = :* (:* (:* D3 D8) D7) D6
type D3876 = :* (:* (:* D3 D8) D7) D6
type O7444 = :* (:* (:* D3 D8) D7) D6
type HF23 = :* (:* (:* D3 D8) D7) D5
type D3875 = :* (:* (:* D3 D8) D7) D5
type O7443 = :* (:* (:* D3 D8) D7) D5
type HF22 = :* (:* (:* D3 D8) D7) D4
type D3874 = :* (:* (:* D3 D8) D7) D4
type O7442 = :* (:* (:* D3 D8) D7) D4
type HF21 = :* (:* (:* D3 D8) D7) D3
type D3873 = :* (:* (:* D3 D8) D7) D3
type O7441 = :* (:* (:* D3 D8) D7) D3
type HF20 = :* (:* (:* D3 D8) D7) D2
type D3872 = :* (:* (:* D3 D8) D7) D2
type O7440 = :* (:* (:* D3 D8) D7) D2
type HF1F = :* (:* (:* D3 D8) D7) D1
type D3871 = :* (:* (:* D3 D8) D7) D1
type O7437 = :* (:* (:* D3 D8) D7) D1
type HF1E = :* (:* (:* D3 D8) D7) D0
type D3870 = :* (:* (:* D3 D8) D7) D0
type O7436 = :* (:* (:* D3 D8) D7) D0
type HF1D = :* (:* (:* D3 D8) D6) D9
type D3869 = :* (:* (:* D3 D8) D6) D9
type O7435 = :* (:* (:* D3 D8) D6) D9
type HF1C = :* (:* (:* D3 D8) D6) D8
type D3868 = :* (:* (:* D3 D8) D6) D8
type O7434 = :* (:* (:* D3 D8) D6) D8
type HF1B = :* (:* (:* D3 D8) D6) D7
type D3867 = :* (:* (:* D3 D8) D6) D7
type O7433 = :* (:* (:* D3 D8) D6) D7
type HF1A = :* (:* (:* D3 D8) D6) D6
type D3866 = :* (:* (:* D3 D8) D6) D6
type O7432 = :* (:* (:* D3 D8) D6) D6
type HF19 = :* (:* (:* D3 D8) D6) D5
type D3865 = :* (:* (:* D3 D8) D6) D5
type O7431 = :* (:* (:* D3 D8) D6) D5
type HF18 = :* (:* (:* D3 D8) D6) D4
type D3864 = :* (:* (:* D3 D8) D6) D4
type O7430 = :* (:* (:* D3 D8) D6) D4
type HF17 = :* (:* (:* D3 D8) D6) D3
type D3863 = :* (:* (:* D3 D8) D6) D3
type O7427 = :* (:* (:* D3 D8) D6) D3
type HF16 = :* (:* (:* D3 D8) D6) D2
type D3862 = :* (:* (:* D3 D8) D6) D2
type O7426 = :* (:* (:* D3 D8) D6) D2
type HF15 = :* (:* (:* D3 D8) D6) D1
type D3861 = :* (:* (:* D3 D8) D6) D1
type O7425 = :* (:* (:* D3 D8) D6) D1
type HF14 = :* (:* (:* D3 D8) D6) D0
type D3860 = :* (:* (:* D3 D8) D6) D0
type O7424 = :* (:* (:* D3 D8) D6) D0
type HF13 = :* (:* (:* D3 D8) D5) D9
type D3859 = :* (:* (:* D3 D8) D5) D9
type O7423 = :* (:* (:* D3 D8) D5) D9
type HF12 = :* (:* (:* D3 D8) D5) D8
type D3858 = :* (:* (:* D3 D8) D5) D8
type O7422 = :* (:* (:* D3 D8) D5) D8
type HF11 = :* (:* (:* D3 D8) D5) D7
type D3857 = :* (:* (:* D3 D8) D5) D7
type O7421 = :* (:* (:* D3 D8) D5) D7
type HF10 = :* (:* (:* D3 D8) D5) D6
type D3856 = :* (:* (:* D3 D8) D5) D6
type O7420 = :* (:* (:* D3 D8) D5) D6
type HF0F = :* (:* (:* D3 D8) D5) D5
type D3855 = :* (:* (:* D3 D8) D5) D5
type O7417 = :* (:* (:* D3 D8) D5) D5
type HF0E = :* (:* (:* D3 D8) D5) D4
type D3854 = :* (:* (:* D3 D8) D5) D4
type O7416 = :* (:* (:* D3 D8) D5) D4
type HF0D = :* (:* (:* D3 D8) D5) D3
type D3853 = :* (:* (:* D3 D8) D5) D3
type O7415 = :* (:* (:* D3 D8) D5) D3
type HF0C = :* (:* (:* D3 D8) D5) D2
type D3852 = :* (:* (:* D3 D8) D5) D2
type O7414 = :* (:* (:* D3 D8) D5) D2
type HF0B = :* (:* (:* D3 D8) D5) D1
type D3851 = :* (:* (:* D3 D8) D5) D1
type O7413 = :* (:* (:* D3 D8) D5) D1
type HF0A = :* (:* (:* D3 D8) D5) D0
type D3850 = :* (:* (:* D3 D8) D5) D0
type O7412 = :* (:* (:* D3 D8) D5) D0
type HF09 = :* (:* (:* D3 D8) D4) D9
type D3849 = :* (:* (:* D3 D8) D4) D9
type O7411 = :* (:* (:* D3 D8) D4) D9
type HF08 = :* (:* (:* D3 D8) D4) D8
type D3848 = :* (:* (:* D3 D8) D4) D8
type O7410 = :* (:* (:* D3 D8) D4) D8
type HF07 = :* (:* (:* D3 D8) D4) D7
type D3847 = :* (:* (:* D3 D8) D4) D7
type O7407 = :* (:* (:* D3 D8) D4) D7
type HF06 = :* (:* (:* D3 D8) D4) D6
type D3846 = :* (:* (:* D3 D8) D4) D6
type O7406 = :* (:* (:* D3 D8) D4) D6
type HF05 = :* (:* (:* D3 D8) D4) D5
type D3845 = :* (:* (:* D3 D8) D4) D5
type O7405 = :* (:* (:* D3 D8) D4) D5
type HF04 = :* (:* (:* D3 D8) D4) D4
type D3844 = :* (:* (:* D3 D8) D4) D4
type O7404 = :* (:* (:* D3 D8) D4) D4
type HF03 = :* (:* (:* D3 D8) D4) D3
type D3843 = :* (:* (:* D3 D8) D4) D3
type O7403 = :* (:* (:* D3 D8) D4) D3
type HF02 = :* (:* (:* D3 D8) D4) D2
type D3842 = :* (:* (:* D3 D8) D4) D2
type O7402 = :* (:* (:* D3 D8) D4) D2
type HF01 = :* (:* (:* D3 D8) D4) D1
type D3841 = :* (:* (:* D3 D8) D4) D1
type O7401 = :* (:* (:* D3 D8) D4) D1
type HF00 = :* (:* (:* D3 D8) D4) D0
type D3840 = :* (:* (:* D3 D8) D4) D0
type O7400 = :* (:* (:* D3 D8) D4) D0
type HEFF = :* (:* (:* D3 D8) D3) D9
type D3839 = :* (:* (:* D3 D8) D3) D9
type O7377 = :* (:* (:* D3 D8) D3) D9
type HEFE = :* (:* (:* D3 D8) D3) D8
type D3838 = :* (:* (:* D3 D8) D3) D8
type O7376 = :* (:* (:* D3 D8) D3) D8
type HEFD = :* (:* (:* D3 D8) D3) D7
type D3837 = :* (:* (:* D3 D8) D3) D7
type O7375 = :* (:* (:* D3 D8) D3) D7
type HEFC = :* (:* (:* D3 D8) D3) D6
type D3836 = :* (:* (:* D3 D8) D3) D6
type O7374 = :* (:* (:* D3 D8) D3) D6
type HEFB = :* (:* (:* D3 D8) D3) D5
type D3835 = :* (:* (:* D3 D8) D3) D5
type O7373 = :* (:* (:* D3 D8) D3) D5
type HEFA = :* (:* (:* D3 D8) D3) D4
type D3834 = :* (:* (:* D3 D8) D3) D4
type O7372 = :* (:* (:* D3 D8) D3) D4
type HEF9 = :* (:* (:* D3 D8) D3) D3
type D3833 = :* (:* (:* D3 D8) D3) D3
type O7371 = :* (:* (:* D3 D8) D3) D3
type HEF8 = :* (:* (:* D3 D8) D3) D2
type D3832 = :* (:* (:* D3 D8) D3) D2
type O7370 = :* (:* (:* D3 D8) D3) D2
type HEF7 = :* (:* (:* D3 D8) D3) D1
type D3831 = :* (:* (:* D3 D8) D3) D1
type O7367 = :* (:* (:* D3 D8) D3) D1
type HEF6 = :* (:* (:* D3 D8) D3) D0
type D3830 = :* (:* (:* D3 D8) D3) D0
type O7366 = :* (:* (:* D3 D8) D3) D0
type HEF5 = :* (:* (:* D3 D8) D2) D9
type D3829 = :* (:* (:* D3 D8) D2) D9
type O7365 = :* (:* (:* D3 D8) D2) D9
type HEF4 = :* (:* (:* D3 D8) D2) D8
type D3828 = :* (:* (:* D3 D8) D2) D8
type O7364 = :* (:* (:* D3 D8) D2) D8
type HEF3 = :* (:* (:* D3 D8) D2) D7
type D3827 = :* (:* (:* D3 D8) D2) D7
type O7363 = :* (:* (:* D3 D8) D2) D7
type HEF2 = :* (:* (:* D3 D8) D2) D6
type D3826 = :* (:* (:* D3 D8) D2) D6
type O7362 = :* (:* (:* D3 D8) D2) D6
type HEF1 = :* (:* (:* D3 D8) D2) D5
type D3825 = :* (:* (:* D3 D8) D2) D5
type O7361 = :* (:* (:* D3 D8) D2) D5
type HEF0 = :* (:* (:* D3 D8) D2) D4
type D3824 = :* (:* (:* D3 D8) D2) D4
type O7360 = :* (:* (:* D3 D8) D2) D4
type HEEF = :* (:* (:* D3 D8) D2) D3
type D3823 = :* (:* (:* D3 D8) D2) D3
type O7357 = :* (:* (:* D3 D8) D2) D3
type HEEE = :* (:* (:* D3 D8) D2) D2
type D3822 = :* (:* (:* D3 D8) D2) D2
type O7356 = :* (:* (:* D3 D8) D2) D2
type HEED = :* (:* (:* D3 D8) D2) D1
type D3821 = :* (:* (:* D3 D8) D2) D1
type O7355 = :* (:* (:* D3 D8) D2) D1
type HEEC = :* (:* (:* D3 D8) D2) D0
type D3820 = :* (:* (:* D3 D8) D2) D0
type O7354 = :* (:* (:* D3 D8) D2) D0
type HEEB = :* (:* (:* D3 D8) D1) D9
type D3819 = :* (:* (:* D3 D8) D1) D9
type O7353 = :* (:* (:* D3 D8) D1) D9
type HEEA = :* (:* (:* D3 D8) D1) D8
type D3818 = :* (:* (:* D3 D8) D1) D8
type O7352 = :* (:* (:* D3 D8) D1) D8
type HEE9 = :* (:* (:* D3 D8) D1) D7
type D3817 = :* (:* (:* D3 D8) D1) D7
type O7351 = :* (:* (:* D3 D8) D1) D7
type HEE8 = :* (:* (:* D3 D8) D1) D6
type D3816 = :* (:* (:* D3 D8) D1) D6
type O7350 = :* (:* (:* D3 D8) D1) D6
type HEE7 = :* (:* (:* D3 D8) D1) D5
type D3815 = :* (:* (:* D3 D8) D1) D5
type O7347 = :* (:* (:* D3 D8) D1) D5
type HEE6 = :* (:* (:* D3 D8) D1) D4
type D3814 = :* (:* (:* D3 D8) D1) D4
type O7346 = :* (:* (:* D3 D8) D1) D4
type HEE5 = :* (:* (:* D3 D8) D1) D3
type D3813 = :* (:* (:* D3 D8) D1) D3
type O7345 = :* (:* (:* D3 D8) D1) D3
type HEE4 = :* (:* (:* D3 D8) D1) D2
type D3812 = :* (:* (:* D3 D8) D1) D2
type O7344 = :* (:* (:* D3 D8) D1) D2
type HEE3 = :* (:* (:* D3 D8) D1) D1
type D3811 = :* (:* (:* D3 D8) D1) D1
type O7343 = :* (:* (:* D3 D8) D1) D1
type HEE2 = :* (:* (:* D3 D8) D1) D0
type D3810 = :* (:* (:* D3 D8) D1) D0
type O7342 = :* (:* (:* D3 D8) D1) D0
type HEE1 = :* (:* (:* D3 D8) D0) D9
type D3809 = :* (:* (:* D3 D8) D0) D9
type O7341 = :* (:* (:* D3 D8) D0) D9
type HEE0 = :* (:* (:* D3 D8) D0) D8
type D3808 = :* (:* (:* D3 D8) D0) D8
type O7340 = :* (:* (:* D3 D8) D0) D8
type HEDF = :* (:* (:* D3 D8) D0) D7
type D3807 = :* (:* (:* D3 D8) D0) D7
type O7337 = :* (:* (:* D3 D8) D0) D7
type HEDE = :* (:* (:* D3 D8) D0) D6
type D3806 = :* (:* (:* D3 D8) D0) D6
type O7336 = :* (:* (:* D3 D8) D0) D6
type HEDD = :* (:* (:* D3 D8) D0) D5
type D3805 = :* (:* (:* D3 D8) D0) D5
type O7335 = :* (:* (:* D3 D8) D0) D5
type HEDC = :* (:* (:* D3 D8) D0) D4
type D3804 = :* (:* (:* D3 D8) D0) D4
type O7334 = :* (:* (:* D3 D8) D0) D4
type HEDB = :* (:* (:* D3 D8) D0) D3
type D3803 = :* (:* (:* D3 D8) D0) D3
type O7333 = :* (:* (:* D3 D8) D0) D3
type HEDA = :* (:* (:* D3 D8) D0) D2
type D3802 = :* (:* (:* D3 D8) D0) D2
type O7332 = :* (:* (:* D3 D8) D0) D2
type HED9 = :* (:* (:* D3 D8) D0) D1
type D3801 = :* (:* (:* D3 D8) D0) D1
type O7331 = :* (:* (:* D3 D8) D0) D1
type HED8 = :* (:* (:* D3 D8) D0) D0
type D3800 = :* (:* (:* D3 D8) D0) D0
type O7330 = :* (:* (:* D3 D8) D0) D0
type HED7 = :* (:* (:* D3 D7) D9) D9
type D3799 = :* (:* (:* D3 D7) D9) D9
type O7327 = :* (:* (:* D3 D7) D9) D9
type HED6 = :* (:* (:* D3 D7) D9) D8
type D3798 = :* (:* (:* D3 D7) D9) D8
type O7326 = :* (:* (:* D3 D7) D9) D8
type HED5 = :* (:* (:* D3 D7) D9) D7
type D3797 = :* (:* (:* D3 D7) D9) D7
type O7325 = :* (:* (:* D3 D7) D9) D7
type HED4 = :* (:* (:* D3 D7) D9) D6
type D3796 = :* (:* (:* D3 D7) D9) D6
type O7324 = :* (:* (:* D3 D7) D9) D6
type HED3 = :* (:* (:* D3 D7) D9) D5
type D3795 = :* (:* (:* D3 D7) D9) D5
type O7323 = :* (:* (:* D3 D7) D9) D5
type HED2 = :* (:* (:* D3 D7) D9) D4
type D3794 = :* (:* (:* D3 D7) D9) D4
type O7322 = :* (:* (:* D3 D7) D9) D4
type HED1 = :* (:* (:* D3 D7) D9) D3
type D3793 = :* (:* (:* D3 D7) D9) D3
type O7321 = :* (:* (:* D3 D7) D9) D3
type HED0 = :* (:* (:* D3 D7) D9) D2
type D3792 = :* (:* (:* D3 D7) D9) D2
type O7320 = :* (:* (:* D3 D7) D9) D2
type HECF = :* (:* (:* D3 D7) D9) D1
type D3791 = :* (:* (:* D3 D7) D9) D1
type O7317 = :* (:* (:* D3 D7) D9) D1
type HECE = :* (:* (:* D3 D7) D9) D0
type D3790 = :* (:* (:* D3 D7) D9) D0
type O7316 = :* (:* (:* D3 D7) D9) D0
type HECD = :* (:* (:* D3 D7) D8) D9
type D3789 = :* (:* (:* D3 D7) D8) D9
type O7315 = :* (:* (:* D3 D7) D8) D9
type HECC = :* (:* (:* D3 D7) D8) D8
type D3788 = :* (:* (:* D3 D7) D8) D8
type O7314 = :* (:* (:* D3 D7) D8) D8
type HECB = :* (:* (:* D3 D7) D8) D7
type D3787 = :* (:* (:* D3 D7) D8) D7
type O7313 = :* (:* (:* D3 D7) D8) D7
type HECA = :* (:* (:* D3 D7) D8) D6
type D3786 = :* (:* (:* D3 D7) D8) D6
type O7312 = :* (:* (:* D3 D7) D8) D6
type HEC9 = :* (:* (:* D3 D7) D8) D5
type D3785 = :* (:* (:* D3 D7) D8) D5
type O7311 = :* (:* (:* D3 D7) D8) D5
type HEC8 = :* (:* (:* D3 D7) D8) D4
type D3784 = :* (:* (:* D3 D7) D8) D4
type O7310 = :* (:* (:* D3 D7) D8) D4
type HEC7 = :* (:* (:* D3 D7) D8) D3
type D3783 = :* (:* (:* D3 D7) D8) D3
type O7307 = :* (:* (:* D3 D7) D8) D3
type HEC6 = :* (:* (:* D3 D7) D8) D2
type D3782 = :* (:* (:* D3 D7) D8) D2
type O7306 = :* (:* (:* D3 D7) D8) D2
type HEC5 = :* (:* (:* D3 D7) D8) D1
type D3781 = :* (:* (:* D3 D7) D8) D1
type O7305 = :* (:* (:* D3 D7) D8) D1
type HEC4 = :* (:* (:* D3 D7) D8) D0
type D3780 = :* (:* (:* D3 D7) D8) D0
type O7304 = :* (:* (:* D3 D7) D8) D0
type HEC3 = :* (:* (:* D3 D7) D7) D9
type D3779 = :* (:* (:* D3 D7) D7) D9
type O7303 = :* (:* (:* D3 D7) D7) D9
type HEC2 = :* (:* (:* D3 D7) D7) D8
type D3778 = :* (:* (:* D3 D7) D7) D8
type O7302 = :* (:* (:* D3 D7) D7) D8
type HEC1 = :* (:* (:* D3 D7) D7) D7
type D3777 = :* (:* (:* D3 D7) D7) D7
type O7301 = :* (:* (:* D3 D7) D7) D7
type HEC0 = :* (:* (:* D3 D7) D7) D6
type D3776 = :* (:* (:* D3 D7) D7) D6
type O7300 = :* (:* (:* D3 D7) D7) D6
type HEBF = :* (:* (:* D3 D7) D7) D5
type D3775 = :* (:* (:* D3 D7) D7) D5
type O7277 = :* (:* (:* D3 D7) D7) D5
type HEBE = :* (:* (:* D3 D7) D7) D4
type D3774 = :* (:* (:* D3 D7) D7) D4
type O7276 = :* (:* (:* D3 D7) D7) D4
type HEBD = :* (:* (:* D3 D7) D7) D3
type D3773 = :* (:* (:* D3 D7) D7) D3
type O7275 = :* (:* (:* D3 D7) D7) D3
type HEBC = :* (:* (:* D3 D7) D7) D2
type D3772 = :* (:* (:* D3 D7) D7) D2
type O7274 = :* (:* (:* D3 D7) D7) D2
type HEBB = :* (:* (:* D3 D7) D7) D1
type D3771 = :* (:* (:* D3 D7) D7) D1
type O7273 = :* (:* (:* D3 D7) D7) D1
type HEBA = :* (:* (:* D3 D7) D7) D0
type D3770 = :* (:* (:* D3 D7) D7) D0
type O7272 = :* (:* (:* D3 D7) D7) D0
type HEB9 = :* (:* (:* D3 D7) D6) D9
type D3769 = :* (:* (:* D3 D7) D6) D9
type O7271 = :* (:* (:* D3 D7) D6) D9
type HEB8 = :* (:* (:* D3 D7) D6) D8
type D3768 = :* (:* (:* D3 D7) D6) D8
type O7270 = :* (:* (:* D3 D7) D6) D8
type HEB7 = :* (:* (:* D3 D7) D6) D7
type D3767 = :* (:* (:* D3 D7) D6) D7
type O7267 = :* (:* (:* D3 D7) D6) D7
type HEB6 = :* (:* (:* D3 D7) D6) D6
type D3766 = :* (:* (:* D3 D7) D6) D6
type O7266 = :* (:* (:* D3 D7) D6) D6
type HEB5 = :* (:* (:* D3 D7) D6) D5
type D3765 = :* (:* (:* D3 D7) D6) D5
type O7265 = :* (:* (:* D3 D7) D6) D5
type HEB4 = :* (:* (:* D3 D7) D6) D4
type D3764 = :* (:* (:* D3 D7) D6) D4
type O7264 = :* (:* (:* D3 D7) D6) D4
type HEB3 = :* (:* (:* D3 D7) D6) D3
type D3763 = :* (:* (:* D3 D7) D6) D3
type O7263 = :* (:* (:* D3 D7) D6) D3
type HEB2 = :* (:* (:* D3 D7) D6) D2
type D3762 = :* (:* (:* D3 D7) D6) D2
type O7262 = :* (:* (:* D3 D7) D6) D2
type HEB1 = :* (:* (:* D3 D7) D6) D1
type D3761 = :* (:* (:* D3 D7) D6) D1
type O7261 = :* (:* (:* D3 D7) D6) D1
type HEB0 = :* (:* (:* D3 D7) D6) D0
type D3760 = :* (:* (:* D3 D7) D6) D0
type O7260 = :* (:* (:* D3 D7) D6) D0
type HEAF = :* (:* (:* D3 D7) D5) D9
type D3759 = :* (:* (:* D3 D7) D5) D9
type O7257 = :* (:* (:* D3 D7) D5) D9
type HEAE = :* (:* (:* D3 D7) D5) D8
type D3758 = :* (:* (:* D3 D7) D5) D8
type O7256 = :* (:* (:* D3 D7) D5) D8
type HEAD = :* (:* (:* D3 D7) D5) D7
type D3757 = :* (:* (:* D3 D7) D5) D7
type O7255 = :* (:* (:* D3 D7) D5) D7
type HEAC = :* (:* (:* D3 D7) D5) D6
type D3756 = :* (:* (:* D3 D7) D5) D6
type O7254 = :* (:* (:* D3 D7) D5) D6
type HEAB = :* (:* (:* D3 D7) D5) D5
type D3755 = :* (:* (:* D3 D7) D5) D5
type O7253 = :* (:* (:* D3 D7) D5) D5
type HEAA = :* (:* (:* D3 D7) D5) D4
type D3754 = :* (:* (:* D3 D7) D5) D4
type O7252 = :* (:* (:* D3 D7) D5) D4
type HEA9 = :* (:* (:* D3 D7) D5) D3
type D3753 = :* (:* (:* D3 D7) D5) D3
type O7251 = :* (:* (:* D3 D7) D5) D3
type HEA8 = :* (:* (:* D3 D7) D5) D2
type D3752 = :* (:* (:* D3 D7) D5) D2
type O7250 = :* (:* (:* D3 D7) D5) D2
type HEA7 = :* (:* (:* D3 D7) D5) D1
type D3751 = :* (:* (:* D3 D7) D5) D1
type O7247 = :* (:* (:* D3 D7) D5) D1
type HEA6 = :* (:* (:* D3 D7) D5) D0
type D3750 = :* (:* (:* D3 D7) D5) D0
type O7246 = :* (:* (:* D3 D7) D5) D0
type HEA5 = :* (:* (:* D3 D7) D4) D9
type D3749 = :* (:* (:* D3 D7) D4) D9
type O7245 = :* (:* (:* D3 D7) D4) D9
type HEA4 = :* (:* (:* D3 D7) D4) D8
type D3748 = :* (:* (:* D3 D7) D4) D8
type O7244 = :* (:* (:* D3 D7) D4) D8
type HEA3 = :* (:* (:* D3 D7) D4) D7
type D3747 = :* (:* (:* D3 D7) D4) D7
type O7243 = :* (:* (:* D3 D7) D4) D7
type HEA2 = :* (:* (:* D3 D7) D4) D6
type D3746 = :* (:* (:* D3 D7) D4) D6
type O7242 = :* (:* (:* D3 D7) D4) D6
type HEA1 = :* (:* (:* D3 D7) D4) D5
type D3745 = :* (:* (:* D3 D7) D4) D5
type O7241 = :* (:* (:* D3 D7) D4) D5
type HEA0 = :* (:* (:* D3 D7) D4) D4
type D3744 = :* (:* (:* D3 D7) D4) D4
type O7240 = :* (:* (:* D3 D7) D4) D4
type HE9F = :* (:* (:* D3 D7) D4) D3
type D3743 = :* (:* (:* D3 D7) D4) D3
type O7237 = :* (:* (:* D3 D7) D4) D3
type HE9E = :* (:* (:* D3 D7) D4) D2
type D3742 = :* (:* (:* D3 D7) D4) D2
type O7236 = :* (:* (:* D3 D7) D4) D2
type HE9D = :* (:* (:* D3 D7) D4) D1
type D3741 = :* (:* (:* D3 D7) D4) D1
type O7235 = :* (:* (:* D3 D7) D4) D1
type HE9C = :* (:* (:* D3 D7) D4) D0
type D3740 = :* (:* (:* D3 D7) D4) D0
type O7234 = :* (:* (:* D3 D7) D4) D0
type HE9B = :* (:* (:* D3 D7) D3) D9
type D3739 = :* (:* (:* D3 D7) D3) D9
type O7233 = :* (:* (:* D3 D7) D3) D9
type HE9A = :* (:* (:* D3 D7) D3) D8
type D3738 = :* (:* (:* D3 D7) D3) D8
type O7232 = :* (:* (:* D3 D7) D3) D8
type HE99 = :* (:* (:* D3 D7) D3) D7
type D3737 = :* (:* (:* D3 D7) D3) D7
type O7231 = :* (:* (:* D3 D7) D3) D7
type HE98 = :* (:* (:* D3 D7) D3) D6
type D3736 = :* (:* (:* D3 D7) D3) D6
type O7230 = :* (:* (:* D3 D7) D3) D6
type HE97 = :* (:* (:* D3 D7) D3) D5
type D3735 = :* (:* (:* D3 D7) D3) D5
type O7227 = :* (:* (:* D3 D7) D3) D5
type HE96 = :* (:* (:* D3 D7) D3) D4
type D3734 = :* (:* (:* D3 D7) D3) D4
type O7226 = :* (:* (:* D3 D7) D3) D4
type HE95 = :* (:* (:* D3 D7) D3) D3
type D3733 = :* (:* (:* D3 D7) D3) D3
type O7225 = :* (:* (:* D3 D7) D3) D3
type HE94 = :* (:* (:* D3 D7) D3) D2
type D3732 = :* (:* (:* D3 D7) D3) D2
type O7224 = :* (:* (:* D3 D7) D3) D2
type HE93 = :* (:* (:* D3 D7) D3) D1
type D3731 = :* (:* (:* D3 D7) D3) D1
type O7223 = :* (:* (:* D3 D7) D3) D1
type HE92 = :* (:* (:* D3 D7) D3) D0
type D3730 = :* (:* (:* D3 D7) D3) D0
type O7222 = :* (:* (:* D3 D7) D3) D0
type HE91 = :* (:* (:* D3 D7) D2) D9
type D3729 = :* (:* (:* D3 D7) D2) D9
type O7221 = :* (:* (:* D3 D7) D2) D9
type HE90 = :* (:* (:* D3 D7) D2) D8
type D3728 = :* (:* (:* D3 D7) D2) D8
type O7220 = :* (:* (:* D3 D7) D2) D8
type HE8F = :* (:* (:* D3 D7) D2) D7
type D3727 = :* (:* (:* D3 D7) D2) D7
type O7217 = :* (:* (:* D3 D7) D2) D7
type HE8E = :* (:* (:* D3 D7) D2) D6
type D3726 = :* (:* (:* D3 D7) D2) D6
type O7216 = :* (:* (:* D3 D7) D2) D6
type HE8D = :* (:* (:* D3 D7) D2) D5
type D3725 = :* (:* (:* D3 D7) D2) D5
type O7215 = :* (:* (:* D3 D7) D2) D5
type HE8C = :* (:* (:* D3 D7) D2) D4
type D3724 = :* (:* (:* D3 D7) D2) D4
type O7214 = :* (:* (:* D3 D7) D2) D4
type HE8B = :* (:* (:* D3 D7) D2) D3
type D3723 = :* (:* (:* D3 D7) D2) D3
type O7213 = :* (:* (:* D3 D7) D2) D3
type HE8A = :* (:* (:* D3 D7) D2) D2
type D3722 = :* (:* (:* D3 D7) D2) D2
type O7212 = :* (:* (:* D3 D7) D2) D2
type HE89 = :* (:* (:* D3 D7) D2) D1
type D3721 = :* (:* (:* D3 D7) D2) D1
type O7211 = :* (:* (:* D3 D7) D2) D1
type HE88 = :* (:* (:* D3 D7) D2) D0
type D3720 = :* (:* (:* D3 D7) D2) D0
type O7210 = :* (:* (:* D3 D7) D2) D0
type HE87 = :* (:* (:* D3 D7) D1) D9
type D3719 = :* (:* (:* D3 D7) D1) D9
type O7207 = :* (:* (:* D3 D7) D1) D9
type HE86 = :* (:* (:* D3 D7) D1) D8
type D3718 = :* (:* (:* D3 D7) D1) D8
type O7206 = :* (:* (:* D3 D7) D1) D8
type HE85 = :* (:* (:* D3 D7) D1) D7
type D3717 = :* (:* (:* D3 D7) D1) D7
type O7205 = :* (:* (:* D3 D7) D1) D7
type HE84 = :* (:* (:* D3 D7) D1) D6
type D3716 = :* (:* (:* D3 D7) D1) D6
type O7204 = :* (:* (:* D3 D7) D1) D6
type HE83 = :* (:* (:* D3 D7) D1) D5
type D3715 = :* (:* (:* D3 D7) D1) D5
type O7203 = :* (:* (:* D3 D7) D1) D5
type HE82 = :* (:* (:* D3 D7) D1) D4
type D3714 = :* (:* (:* D3 D7) D1) D4
type O7202 = :* (:* (:* D3 D7) D1) D4
type HE81 = :* (:* (:* D3 D7) D1) D3
type D3713 = :* (:* (:* D3 D7) D1) D3
type O7201 = :* (:* (:* D3 D7) D1) D3
type HE80 = :* (:* (:* D3 D7) D1) D2
type D3712 = :* (:* (:* D3 D7) D1) D2
type O7200 = :* (:* (:* D3 D7) D1) D2
type HE7F = :* (:* (:* D3 D7) D1) D1
type D3711 = :* (:* (:* D3 D7) D1) D1
type O7177 = :* (:* (:* D3 D7) D1) D1
type HE7E = :* (:* (:* D3 D7) D1) D0
type D3710 = :* (:* (:* D3 D7) D1) D0
type O7176 = :* (:* (:* D3 D7) D1) D0
type HE7D = :* (:* (:* D3 D7) D0) D9
type D3709 = :* (:* (:* D3 D7) D0) D9
type O7175 = :* (:* (:* D3 D7) D0) D9
type HE7C = :* (:* (:* D3 D7) D0) D8
type D3708 = :* (:* (:* D3 D7) D0) D8
type O7174 = :* (:* (:* D3 D7) D0) D8
type HE7B = :* (:* (:* D3 D7) D0) D7
type D3707 = :* (:* (:* D3 D7) D0) D7
type O7173 = :* (:* (:* D3 D7) D0) D7
type HE7A = :* (:* (:* D3 D7) D0) D6
type D3706 = :* (:* (:* D3 D7) D0) D6
type O7172 = :* (:* (:* D3 D7) D0) D6
type HE79 = :* (:* (:* D3 D7) D0) D5
type D3705 = :* (:* (:* D3 D7) D0) D5
type O7171 = :* (:* (:* D3 D7) D0) D5
type HE78 = :* (:* (:* D3 D7) D0) D4
type D3704 = :* (:* (:* D3 D7) D0) D4
type O7170 = :* (:* (:* D3 D7) D0) D4
type HE77 = :* (:* (:* D3 D7) D0) D3
type D3703 = :* (:* (:* D3 D7) D0) D3
type O7167 = :* (:* (:* D3 D7) D0) D3
type HE76 = :* (:* (:* D3 D7) D0) D2
type D3702 = :* (:* (:* D3 D7) D0) D2
type O7166 = :* (:* (:* D3 D7) D0) D2
type HE75 = :* (:* (:* D3 D7) D0) D1
type D3701 = :* (:* (:* D3 D7) D0) D1
type O7165 = :* (:* (:* D3 D7) D0) D1
type HE74 = :* (:* (:* D3 D7) D0) D0
type D3700 = :* (:* (:* D3 D7) D0) D0
type O7164 = :* (:* (:* D3 D7) D0) D0
type HE73 = :* (:* (:* D3 D6) D9) D9
type D3699 = :* (:* (:* D3 D6) D9) D9
type O7163 = :* (:* (:* D3 D6) D9) D9
type HE72 = :* (:* (:* D3 D6) D9) D8
type D3698 = :* (:* (:* D3 D6) D9) D8
type O7162 = :* (:* (:* D3 D6) D9) D8
type HE71 = :* (:* (:* D3 D6) D9) D7
type D3697 = :* (:* (:* D3 D6) D9) D7
type O7161 = :* (:* (:* D3 D6) D9) D7
type HE70 = :* (:* (:* D3 D6) D9) D6
type D3696 = :* (:* (:* D3 D6) D9) D6
type O7160 = :* (:* (:* D3 D6) D9) D6
type HE6F = :* (:* (:* D3 D6) D9) D5
type D3695 = :* (:* (:* D3 D6) D9) D5
type O7157 = :* (:* (:* D3 D6) D9) D5
type HE6E = :* (:* (:* D3 D6) D9) D4
type D3694 = :* (:* (:* D3 D6) D9) D4
type O7156 = :* (:* (:* D3 D6) D9) D4
type HE6D = :* (:* (:* D3 D6) D9) D3
type D3693 = :* (:* (:* D3 D6) D9) D3
type O7155 = :* (:* (:* D3 D6) D9) D3
type HE6C = :* (:* (:* D3 D6) D9) D2
type D3692 = :* (:* (:* D3 D6) D9) D2
type O7154 = :* (:* (:* D3 D6) D9) D2
type HE6B = :* (:* (:* D3 D6) D9) D1
type D3691 = :* (:* (:* D3 D6) D9) D1
type O7153 = :* (:* (:* D3 D6) D9) D1
type HE6A = :* (:* (:* D3 D6) D9) D0
type D3690 = :* (:* (:* D3 D6) D9) D0
type O7152 = :* (:* (:* D3 D6) D9) D0
type HE69 = :* (:* (:* D3 D6) D8) D9
type D3689 = :* (:* (:* D3 D6) D8) D9
type O7151 = :* (:* (:* D3 D6) D8) D9
type HE68 = :* (:* (:* D3 D6) D8) D8
type D3688 = :* (:* (:* D3 D6) D8) D8
type O7150 = :* (:* (:* D3 D6) D8) D8
type HE67 = :* (:* (:* D3 D6) D8) D7
type D3687 = :* (:* (:* D3 D6) D8) D7
type O7147 = :* (:* (:* D3 D6) D8) D7
type HE66 = :* (:* (:* D3 D6) D8) D6
type D3686 = :* (:* (:* D3 D6) D8) D6
type O7146 = :* (:* (:* D3 D6) D8) D6
type HE65 = :* (:* (:* D3 D6) D8) D5
type D3685 = :* (:* (:* D3 D6) D8) D5
type O7145 = :* (:* (:* D3 D6) D8) D5
type HE64 = :* (:* (:* D3 D6) D8) D4
type D3684 = :* (:* (:* D3 D6) D8) D4
type O7144 = :* (:* (:* D3 D6) D8) D4
type HE63 = :* (:* (:* D3 D6) D8) D3
type D3683 = :* (:* (:* D3 D6) D8) D3
type O7143 = :* (:* (:* D3 D6) D8) D3
type HE62 = :* (:* (:* D3 D6) D8) D2
type D3682 = :* (:* (:* D3 D6) D8) D2
type O7142 = :* (:* (:* D3 D6) D8) D2
type HE61 = :* (:* (:* D3 D6) D8) D1
type D3681 = :* (:* (:* D3 D6) D8) D1
type O7141 = :* (:* (:* D3 D6) D8) D1
type HE60 = :* (:* (:* D3 D6) D8) D0
type D3680 = :* (:* (:* D3 D6) D8) D0
type O7140 = :* (:* (:* D3 D6) D8) D0
type HE5F = :* (:* (:* D3 D6) D7) D9
type D3679 = :* (:* (:* D3 D6) D7) D9
type O7137 = :* (:* (:* D3 D6) D7) D9
type HE5E = :* (:* (:* D3 D6) D7) D8
type D3678 = :* (:* (:* D3 D6) D7) D8
type O7136 = :* (:* (:* D3 D6) D7) D8
type HE5D = :* (:* (:* D3 D6) D7) D7
type D3677 = :* (:* (:* D3 D6) D7) D7
type O7135 = :* (:* (:* D3 D6) D7) D7
type HE5C = :* (:* (:* D3 D6) D7) D6
type D3676 = :* (:* (:* D3 D6) D7) D6
type O7134 = :* (:* (:* D3 D6) D7) D6
type HE5B = :* (:* (:* D3 D6) D7) D5
type D3675 = :* (:* (:* D3 D6) D7) D5
type O7133 = :* (:* (:* D3 D6) D7) D5
type HE5A = :* (:* (:* D3 D6) D7) D4
type D3674 = :* (:* (:* D3 D6) D7) D4
type O7132 = :* (:* (:* D3 D6) D7) D4
type HE59 = :* (:* (:* D3 D6) D7) D3
type D3673 = :* (:* (:* D3 D6) D7) D3
type O7131 = :* (:* (:* D3 D6) D7) D3
type HE58 = :* (:* (:* D3 D6) D7) D2
type D3672 = :* (:* (:* D3 D6) D7) D2
type O7130 = :* (:* (:* D3 D6) D7) D2
type HE57 = :* (:* (:* D3 D6) D7) D1
type D3671 = :* (:* (:* D3 D6) D7) D1
type O7127 = :* (:* (:* D3 D6) D7) D1
type HE56 = :* (:* (:* D3 D6) D7) D0
type D3670 = :* (:* (:* D3 D6) D7) D0
type O7126 = :* (:* (:* D3 D6) D7) D0
type HE55 = :* (:* (:* D3 D6) D6) D9
type D3669 = :* (:* (:* D3 D6) D6) D9
type O7125 = :* (:* (:* D3 D6) D6) D9
type HE54 = :* (:* (:* D3 D6) D6) D8
type D3668 = :* (:* (:* D3 D6) D6) D8
type O7124 = :* (:* (:* D3 D6) D6) D8
type HE53 = :* (:* (:* D3 D6) D6) D7
type D3667 = :* (:* (:* D3 D6) D6) D7
type O7123 = :* (:* (:* D3 D6) D6) D7
type HE52 = :* (:* (:* D3 D6) D6) D6
type D3666 = :* (:* (:* D3 D6) D6) D6
type O7122 = :* (:* (:* D3 D6) D6) D6
type HE51 = :* (:* (:* D3 D6) D6) D5
type D3665 = :* (:* (:* D3 D6) D6) D5
type O7121 = :* (:* (:* D3 D6) D6) D5
type HE50 = :* (:* (:* D3 D6) D6) D4
type D3664 = :* (:* (:* D3 D6) D6) D4
type O7120 = :* (:* (:* D3 D6) D6) D4
type HE4F = :* (:* (:* D3 D6) D6) D3
type D3663 = :* (:* (:* D3 D6) D6) D3
type O7117 = :* (:* (:* D3 D6) D6) D3
type HE4E = :* (:* (:* D3 D6) D6) D2
type D3662 = :* (:* (:* D3 D6) D6) D2
type O7116 = :* (:* (:* D3 D6) D6) D2
type HE4D = :* (:* (:* D3 D6) D6) D1
type D3661 = :* (:* (:* D3 D6) D6) D1
type O7115 = :* (:* (:* D3 D6) D6) D1
type HE4C = :* (:* (:* D3 D6) D6) D0
type D3660 = :* (:* (:* D3 D6) D6) D0
type O7114 = :* (:* (:* D3 D6) D6) D0
type HE4B = :* (:* (:* D3 D6) D5) D9
type D3659 = :* (:* (:* D3 D6) D5) D9
type O7113 = :* (:* (:* D3 D6) D5) D9
type HE4A = :* (:* (:* D3 D6) D5) D8
type D3658 = :* (:* (:* D3 D6) D5) D8
type O7112 = :* (:* (:* D3 D6) D5) D8
type HE49 = :* (:* (:* D3 D6) D5) D7
type D3657 = :* (:* (:* D3 D6) D5) D7
type O7111 = :* (:* (:* D3 D6) D5) D7
type HE48 = :* (:* (:* D3 D6) D5) D6
type D3656 = :* (:* (:* D3 D6) D5) D6
type O7110 = :* (:* (:* D3 D6) D5) D6
type HE47 = :* (:* (:* D3 D6) D5) D5
type D3655 = :* (:* (:* D3 D6) D5) D5
type O7107 = :* (:* (:* D3 D6) D5) D5
type HE46 = :* (:* (:* D3 D6) D5) D4
type D3654 = :* (:* (:* D3 D6) D5) D4
type O7106 = :* (:* (:* D3 D6) D5) D4
type HE45 = :* (:* (:* D3 D6) D5) D3
type D3653 = :* (:* (:* D3 D6) D5) D3
type O7105 = :* (:* (:* D3 D6) D5) D3
type HE44 = :* (:* (:* D3 D6) D5) D2
type D3652 = :* (:* (:* D3 D6) D5) D2
type O7104 = :* (:* (:* D3 D6) D5) D2
type HE43 = :* (:* (:* D3 D6) D5) D1
type D3651 = :* (:* (:* D3 D6) D5) D1
type O7103 = :* (:* (:* D3 D6) D5) D1
type HE42 = :* (:* (:* D3 D6) D5) D0
type D3650 = :* (:* (:* D3 D6) D5) D0
type O7102 = :* (:* (:* D3 D6) D5) D0
type HE41 = :* (:* (:* D3 D6) D4) D9
type D3649 = :* (:* (:* D3 D6) D4) D9
type O7101 = :* (:* (:* D3 D6) D4) D9
type HE40 = :* (:* (:* D3 D6) D4) D8
type D3648 = :* (:* (:* D3 D6) D4) D8
type O7100 = :* (:* (:* D3 D6) D4) D8
type HE3F = :* (:* (:* D3 D6) D4) D7
type D3647 = :* (:* (:* D3 D6) D4) D7
type O7077 = :* (:* (:* D3 D6) D4) D7
type HE3E = :* (:* (:* D3 D6) D4) D6
type D3646 = :* (:* (:* D3 D6) D4) D6
type O7076 = :* (:* (:* D3 D6) D4) D6
type HE3D = :* (:* (:* D3 D6) D4) D5
type D3645 = :* (:* (:* D3 D6) D4) D5
type O7075 = :* (:* (:* D3 D6) D4) D5
type HE3C = :* (:* (:* D3 D6) D4) D4
type D3644 = :* (:* (:* D3 D6) D4) D4
type O7074 = :* (:* (:* D3 D6) D4) D4
type HE3B = :* (:* (:* D3 D6) D4) D3
type D3643 = :* (:* (:* D3 D6) D4) D3
type O7073 = :* (:* (:* D3 D6) D4) D3
type HE3A = :* (:* (:* D3 D6) D4) D2
type D3642 = :* (:* (:* D3 D6) D4) D2
type O7072 = :* (:* (:* D3 D6) D4) D2
type HE39 = :* (:* (:* D3 D6) D4) D1
type D3641 = :* (:* (:* D3 D6) D4) D1
type O7071 = :* (:* (:* D3 D6) D4) D1
type HE38 = :* (:* (:* D3 D6) D4) D0
type D3640 = :* (:* (:* D3 D6) D4) D0
type O7070 = :* (:* (:* D3 D6) D4) D0
type HE37 = :* (:* (:* D3 D6) D3) D9
type D3639 = :* (:* (:* D3 D6) D3) D9
type O7067 = :* (:* (:* D3 D6) D3) D9
type HE36 = :* (:* (:* D3 D6) D3) D8
type D3638 = :* (:* (:* D3 D6) D3) D8
type O7066 = :* (:* (:* D3 D6) D3) D8
type HE35 = :* (:* (:* D3 D6) D3) D7
type D3637 = :* (:* (:* D3 D6) D3) D7
type O7065 = :* (:* (:* D3 D6) D3) D7
type HE34 = :* (:* (:* D3 D6) D3) D6
type D3636 = :* (:* (:* D3 D6) D3) D6
type O7064 = :* (:* (:* D3 D6) D3) D6
type HE33 = :* (:* (:* D3 D6) D3) D5
type D3635 = :* (:* (:* D3 D6) D3) D5
type O7063 = :* (:* (:* D3 D6) D3) D5
type HE32 = :* (:* (:* D3 D6) D3) D4
type D3634 = :* (:* (:* D3 D6) D3) D4
type O7062 = :* (:* (:* D3 D6) D3) D4
type HE31 = :* (:* (:* D3 D6) D3) D3
type D3633 = :* (:* (:* D3 D6) D3) D3
type O7061 = :* (:* (:* D3 D6) D3) D3
type HE30 = :* (:* (:* D3 D6) D3) D2
type D3632 = :* (:* (:* D3 D6) D3) D2
type O7060 = :* (:* (:* D3 D6) D3) D2
type HE2F = :* (:* (:* D3 D6) D3) D1
type D3631 = :* (:* (:* D3 D6) D3) D1
type O7057 = :* (:* (:* D3 D6) D3) D1
type HE2E = :* (:* (:* D3 D6) D3) D0
type D3630 = :* (:* (:* D3 D6) D3) D0
type O7056 = :* (:* (:* D3 D6) D3) D0
type HE2D = :* (:* (:* D3 D6) D2) D9
type D3629 = :* (:* (:* D3 D6) D2) D9
type O7055 = :* (:* (:* D3 D6) D2) D9
type HE2C = :* (:* (:* D3 D6) D2) D8
type D3628 = :* (:* (:* D3 D6) D2) D8
type O7054 = :* (:* (:* D3 D6) D2) D8
type HE2B = :* (:* (:* D3 D6) D2) D7
type D3627 = :* (:* (:* D3 D6) D2) D7
type O7053 = :* (:* (:* D3 D6) D2) D7
type HE2A = :* (:* (:* D3 D6) D2) D6
type D3626 = :* (:* (:* D3 D6) D2) D6
type O7052 = :* (:* (:* D3 D6) D2) D6
type HE29 = :* (:* (:* D3 D6) D2) D5
type D3625 = :* (:* (:* D3 D6) D2) D5
type O7051 = :* (:* (:* D3 D6) D2) D5
type HE28 = :* (:* (:* D3 D6) D2) D4
type D3624 = :* (:* (:* D3 D6) D2) D4
type O7050 = :* (:* (:* D3 D6) D2) D4
type HE27 = :* (:* (:* D3 D6) D2) D3
type D3623 = :* (:* (:* D3 D6) D2) D3
type O7047 = :* (:* (:* D3 D6) D2) D3
type HE26 = :* (:* (:* D3 D6) D2) D2
type D3622 = :* (:* (:* D3 D6) D2) D2
type O7046 = :* (:* (:* D3 D6) D2) D2
type HE25 = :* (:* (:* D3 D6) D2) D1
type D3621 = :* (:* (:* D3 D6) D2) D1
type O7045 = :* (:* (:* D3 D6) D2) D1
type HE24 = :* (:* (:* D3 D6) D2) D0
type D3620 = :* (:* (:* D3 D6) D2) D0
type O7044 = :* (:* (:* D3 D6) D2) D0
type HE23 = :* (:* (:* D3 D6) D1) D9
type D3619 = :* (:* (:* D3 D6) D1) D9
type O7043 = :* (:* (:* D3 D6) D1) D9
type HE22 = :* (:* (:* D3 D6) D1) D8
type D3618 = :* (:* (:* D3 D6) D1) D8
type O7042 = :* (:* (:* D3 D6) D1) D8
type HE21 = :* (:* (:* D3 D6) D1) D7
type D3617 = :* (:* (:* D3 D6) D1) D7
type O7041 = :* (:* (:* D3 D6) D1) D7
type HE20 = :* (:* (:* D3 D6) D1) D6
type D3616 = :* (:* (:* D3 D6) D1) D6
type O7040 = :* (:* (:* D3 D6) D1) D6
type HE1F = :* (:* (:* D3 D6) D1) D5
type D3615 = :* (:* (:* D3 D6) D1) D5
type O7037 = :* (:* (:* D3 D6) D1) D5
type HE1E = :* (:* (:* D3 D6) D1) D4
type D3614 = :* (:* (:* D3 D6) D1) D4
type O7036 = :* (:* (:* D3 D6) D1) D4
type HE1D = :* (:* (:* D3 D6) D1) D3
type D3613 = :* (:* (:* D3 D6) D1) D3
type O7035 = :* (:* (:* D3 D6) D1) D3
type HE1C = :* (:* (:* D3 D6) D1) D2
type D3612 = :* (:* (:* D3 D6) D1) D2
type O7034 = :* (:* (:* D3 D6) D1) D2
type HE1B = :* (:* (:* D3 D6) D1) D1
type D3611 = :* (:* (:* D3 D6) D1) D1
type O7033 = :* (:* (:* D3 D6) D1) D1
type HE1A = :* (:* (:* D3 D6) D1) D0
type D3610 = :* (:* (:* D3 D6) D1) D0
type O7032 = :* (:* (:* D3 D6) D1) D0
type HE19 = :* (:* (:* D3 D6) D0) D9
type D3609 = :* (:* (:* D3 D6) D0) D9
type O7031 = :* (:* (:* D3 D6) D0) D9
type HE18 = :* (:* (:* D3 D6) D0) D8
type D3608 = :* (:* (:* D3 D6) D0) D8
type O7030 = :* (:* (:* D3 D6) D0) D8
type HE17 = :* (:* (:* D3 D6) D0) D7
type D3607 = :* (:* (:* D3 D6) D0) D7
type O7027 = :* (:* (:* D3 D6) D0) D7
type HE16 = :* (:* (:* D3 D6) D0) D6
type D3606 = :* (:* (:* D3 D6) D0) D6
type O7026 = :* (:* (:* D3 D6) D0) D6
type HE15 = :* (:* (:* D3 D6) D0) D5
type D3605 = :* (:* (:* D3 D6) D0) D5
type O7025 = :* (:* (:* D3 D6) D0) D5
type HE14 = :* (:* (:* D3 D6) D0) D4
type D3604 = :* (:* (:* D3 D6) D0) D4
type O7024 = :* (:* (:* D3 D6) D0) D4
type HE13 = :* (:* (:* D3 D6) D0) D3
type D3603 = :* (:* (:* D3 D6) D0) D3
type O7023 = :* (:* (:* D3 D6) D0) D3
type HE12 = :* (:* (:* D3 D6) D0) D2
type D3602 = :* (:* (:* D3 D6) D0) D2
type O7022 = :* (:* (:* D3 D6) D0) D2
type HE11 = :* (:* (:* D3 D6) D0) D1
type D3601 = :* (:* (:* D3 D6) D0) D1
type O7021 = :* (:* (:* D3 D6) D0) D1
type HE10 = :* (:* (:* D3 D6) D0) D0
type D3600 = :* (:* (:* D3 D6) D0) D0
type O7020 = :* (:* (:* D3 D6) D0) D0
type HE0F = :* (:* (:* D3 D5) D9) D9
type D3599 = :* (:* (:* D3 D5) D9) D9
type O7017 = :* (:* (:* D3 D5) D9) D9
type HE0E = :* (:* (:* D3 D5) D9) D8
type D3598 = :* (:* (:* D3 D5) D9) D8
type O7016 = :* (:* (:* D3 D5) D9) D8
type HE0D = :* (:* (:* D3 D5) D9) D7
type D3597 = :* (:* (:* D3 D5) D9) D7
type O7015 = :* (:* (:* D3 D5) D9) D7
type HE0C = :* (:* (:* D3 D5) D9) D6
type D3596 = :* (:* (:* D3 D5) D9) D6
type O7014 = :* (:* (:* D3 D5) D9) D6
type HE0B = :* (:* (:* D3 D5) D9) D5
type D3595 = :* (:* (:* D3 D5) D9) D5
type O7013 = :* (:* (:* D3 D5) D9) D5
type HE0A = :* (:* (:* D3 D5) D9) D4
type D3594 = :* (:* (:* D3 D5) D9) D4
type O7012 = :* (:* (:* D3 D5) D9) D4
type HE09 = :* (:* (:* D3 D5) D9) D3
type D3593 = :* (:* (:* D3 D5) D9) D3
type O7011 = :* (:* (:* D3 D5) D9) D3
type HE08 = :* (:* (:* D3 D5) D9) D2
type D3592 = :* (:* (:* D3 D5) D9) D2
type O7010 = :* (:* (:* D3 D5) D9) D2
type HE07 = :* (:* (:* D3 D5) D9) D1
type D3591 = :* (:* (:* D3 D5) D9) D1
type O7007 = :* (:* (:* D3 D5) D9) D1
type HE06 = :* (:* (:* D3 D5) D9) D0
type D3590 = :* (:* (:* D3 D5) D9) D0
type O7006 = :* (:* (:* D3 D5) D9) D0
type HE05 = :* (:* (:* D3 D5) D8) D9
type D3589 = :* (:* (:* D3 D5) D8) D9
type O7005 = :* (:* (:* D3 D5) D8) D9
type HE04 = :* (:* (:* D3 D5) D8) D8
type D3588 = :* (:* (:* D3 D5) D8) D8
type O7004 = :* (:* (:* D3 D5) D8) D8
type HE03 = :* (:* (:* D3 D5) D8) D7
type D3587 = :* (:* (:* D3 D5) D8) D7
type O7003 = :* (:* (:* D3 D5) D8) D7
type HE02 = :* (:* (:* D3 D5) D8) D6
type D3586 = :* (:* (:* D3 D5) D8) D6
type O7002 = :* (:* (:* D3 D5) D8) D6
type HE01 = :* (:* (:* D3 D5) D8) D5
type D3585 = :* (:* (:* D3 D5) D8) D5
type O7001 = :* (:* (:* D3 D5) D8) D5
type HE00 = :* (:* (:* D3 D5) D8) D4
type D3584 = :* (:* (:* D3 D5) D8) D4
type O7000 = :* (:* (:* D3 D5) D8) D4
type HDFF = :* (:* (:* D3 D5) D8) D3
type D3583 = :* (:* (:* D3 D5) D8) D3
type O6777 = :* (:* (:* D3 D5) D8) D3
type HDFE = :* (:* (:* D3 D5) D8) D2
type D3582 = :* (:* (:* D3 D5) D8) D2
type O6776 = :* (:* (:* D3 D5) D8) D2
type HDFD = :* (:* (:* D3 D5) D8) D1
type D3581 = :* (:* (:* D3 D5) D8) D1
type O6775 = :* (:* (:* D3 D5) D8) D1
type HDFC = :* (:* (:* D3 D5) D8) D0
type D3580 = :* (:* (:* D3 D5) D8) D0
type O6774 = :* (:* (:* D3 D5) D8) D0
type HDFB = :* (:* (:* D3 D5) D7) D9
type D3579 = :* (:* (:* D3 D5) D7) D9
type O6773 = :* (:* (:* D3 D5) D7) D9
type HDFA = :* (:* (:* D3 D5) D7) D8
type D3578 = :* (:* (:* D3 D5) D7) D8
type O6772 = :* (:* (:* D3 D5) D7) D8
type HDF9 = :* (:* (:* D3 D5) D7) D7
type D3577 = :* (:* (:* D3 D5) D7) D7
type O6771 = :* (:* (:* D3 D5) D7) D7
type HDF8 = :* (:* (:* D3 D5) D7) D6
type D3576 = :* (:* (:* D3 D5) D7) D6
type O6770 = :* (:* (:* D3 D5) D7) D6
type HDF7 = :* (:* (:* D3 D5) D7) D5
type D3575 = :* (:* (:* D3 D5) D7) D5
type O6767 = :* (:* (:* D3 D5) D7) D5
type HDF6 = :* (:* (:* D3 D5) D7) D4
type D3574 = :* (:* (:* D3 D5) D7) D4
type O6766 = :* (:* (:* D3 D5) D7) D4
type HDF5 = :* (:* (:* D3 D5) D7) D3
type D3573 = :* (:* (:* D3 D5) D7) D3
type O6765 = :* (:* (:* D3 D5) D7) D3
type HDF4 = :* (:* (:* D3 D5) D7) D2
type D3572 = :* (:* (:* D3 D5) D7) D2
type O6764 = :* (:* (:* D3 D5) D7) D2
type HDF3 = :* (:* (:* D3 D5) D7) D1
type D3571 = :* (:* (:* D3 D5) D7) D1
type O6763 = :* (:* (:* D3 D5) D7) D1
type HDF2 = :* (:* (:* D3 D5) D7) D0
type D3570 = :* (:* (:* D3 D5) D7) D0
type O6762 = :* (:* (:* D3 D5) D7) D0
type HDF1 = :* (:* (:* D3 D5) D6) D9
type D3569 = :* (:* (:* D3 D5) D6) D9
type O6761 = :* (:* (:* D3 D5) D6) D9
type HDF0 = :* (:* (:* D3 D5) D6) D8
type D3568 = :* (:* (:* D3 D5) D6) D8
type O6760 = :* (:* (:* D3 D5) D6) D8
type HDEF = :* (:* (:* D3 D5) D6) D7
type D3567 = :* (:* (:* D3 D5) D6) D7
type O6757 = :* (:* (:* D3 D5) D6) D7
type HDEE = :* (:* (:* D3 D5) D6) D6
type D3566 = :* (:* (:* D3 D5) D6) D6
type O6756 = :* (:* (:* D3 D5) D6) D6
type HDED = :* (:* (:* D3 D5) D6) D5
type D3565 = :* (:* (:* D3 D5) D6) D5
type O6755 = :* (:* (:* D3 D5) D6) D5
type HDEC = :* (:* (:* D3 D5) D6) D4
type D3564 = :* (:* (:* D3 D5) D6) D4
type O6754 = :* (:* (:* D3 D5) D6) D4
type HDEB = :* (:* (:* D3 D5) D6) D3
type D3563 = :* (:* (:* D3 D5) D6) D3
type O6753 = :* (:* (:* D3 D5) D6) D3
type HDEA = :* (:* (:* D3 D5) D6) D2
type D3562 = :* (:* (:* D3 D5) D6) D2
type O6752 = :* (:* (:* D3 D5) D6) D2
type HDE9 = :* (:* (:* D3 D5) D6) D1
type D3561 = :* (:* (:* D3 D5) D6) D1
type O6751 = :* (:* (:* D3 D5) D6) D1
type HDE8 = :* (:* (:* D3 D5) D6) D0
type D3560 = :* (:* (:* D3 D5) D6) D0
type O6750 = :* (:* (:* D3 D5) D6) D0
type HDE7 = :* (:* (:* D3 D5) D5) D9
type D3559 = :* (:* (:* D3 D5) D5) D9
type O6747 = :* (:* (:* D3 D5) D5) D9
type HDE6 = :* (:* (:* D3 D5) D5) D8
type D3558 = :* (:* (:* D3 D5) D5) D8
type O6746 = :* (:* (:* D3 D5) D5) D8
type HDE5 = :* (:* (:* D3 D5) D5) D7
type D3557 = :* (:* (:* D3 D5) D5) D7
type O6745 = :* (:* (:* D3 D5) D5) D7
type HDE4 = :* (:* (:* D3 D5) D5) D6
type D3556 = :* (:* (:* D3 D5) D5) D6
type O6744 = :* (:* (:* D3 D5) D5) D6
type HDE3 = :* (:* (:* D3 D5) D5) D5
type D3555 = :* (:* (:* D3 D5) D5) D5
type O6743 = :* (:* (:* D3 D5) D5) D5
type HDE2 = :* (:* (:* D3 D5) D5) D4
type D3554 = :* (:* (:* D3 D5) D5) D4
type O6742 = :* (:* (:* D3 D5) D5) D4
type HDE1 = :* (:* (:* D3 D5) D5) D3
type D3553 = :* (:* (:* D3 D5) D5) D3
type O6741 = :* (:* (:* D3 D5) D5) D3
type HDE0 = :* (:* (:* D3 D5) D5) D2
type D3552 = :* (:* (:* D3 D5) D5) D2
type O6740 = :* (:* (:* D3 D5) D5) D2
type HDDF = :* (:* (:* D3 D5) D5) D1
type D3551 = :* (:* (:* D3 D5) D5) D1
type O6737 = :* (:* (:* D3 D5) D5) D1
type HDDE = :* (:* (:* D3 D5) D5) D0
type D3550 = :* (:* (:* D3 D5) D5) D0
type O6736 = :* (:* (:* D3 D5) D5) D0
type HDDD = :* (:* (:* D3 D5) D4) D9
type D3549 = :* (:* (:* D3 D5) D4) D9
type O6735 = :* (:* (:* D3 D5) D4) D9
type HDDC = :* (:* (:* D3 D5) D4) D8
type D3548 = :* (:* (:* D3 D5) D4) D8
type O6734 = :* (:* (:* D3 D5) D4) D8
type HDDB = :* (:* (:* D3 D5) D4) D7
type D3547 = :* (:* (:* D3 D5) D4) D7
type O6733 = :* (:* (:* D3 D5) D4) D7
type HDDA = :* (:* (:* D3 D5) D4) D6
type D3546 = :* (:* (:* D3 D5) D4) D6
type O6732 = :* (:* (:* D3 D5) D4) D6
type HDD9 = :* (:* (:* D3 D5) D4) D5
type D3545 = :* (:* (:* D3 D5) D4) D5
type O6731 = :* (:* (:* D3 D5) D4) D5
type HDD8 = :* (:* (:* D3 D5) D4) D4
type D3544 = :* (:* (:* D3 D5) D4) D4
type O6730 = :* (:* (:* D3 D5) D4) D4
type HDD7 = :* (:* (:* D3 D5) D4) D3
type D3543 = :* (:* (:* D3 D5) D4) D3
type O6727 = :* (:* (:* D3 D5) D4) D3
type HDD6 = :* (:* (:* D3 D5) D4) D2
type D3542 = :* (:* (:* D3 D5) D4) D2
type O6726 = :* (:* (:* D3 D5) D4) D2
type HDD5 = :* (:* (:* D3 D5) D4) D1
type D3541 = :* (:* (:* D3 D5) D4) D1
type O6725 = :* (:* (:* D3 D5) D4) D1
type HDD4 = :* (:* (:* D3 D5) D4) D0
type D3540 = :* (:* (:* D3 D5) D4) D0
type O6724 = :* (:* (:* D3 D5) D4) D0
type HDD3 = :* (:* (:* D3 D5) D3) D9
type D3539 = :* (:* (:* D3 D5) D3) D9
type O6723 = :* (:* (:* D3 D5) D3) D9
type HDD2 = :* (:* (:* D3 D5) D3) D8
type D3538 = :* (:* (:* D3 D5) D3) D8
type O6722 = :* (:* (:* D3 D5) D3) D8
type HDD1 = :* (:* (:* D3 D5) D3) D7
type D3537 = :* (:* (:* D3 D5) D3) D7
type O6721 = :* (:* (:* D3 D5) D3) D7
type HDD0 = :* (:* (:* D3 D5) D3) D6
type D3536 = :* (:* (:* D3 D5) D3) D6
type O6720 = :* (:* (:* D3 D5) D3) D6
type HDCF = :* (:* (:* D3 D5) D3) D5
type D3535 = :* (:* (:* D3 D5) D3) D5
type O6717 = :* (:* (:* D3 D5) D3) D5
type HDCE = :* (:* (:* D3 D5) D3) D4
type D3534 = :* (:* (:* D3 D5) D3) D4
type O6716 = :* (:* (:* D3 D5) D3) D4
type HDCD = :* (:* (:* D3 D5) D3) D3
type D3533 = :* (:* (:* D3 D5) D3) D3
type O6715 = :* (:* (:* D3 D5) D3) D3
type HDCC = :* (:* (:* D3 D5) D3) D2
type D3532 = :* (:* (:* D3 D5) D3) D2
type O6714 = :* (:* (:* D3 D5) D3) D2
type HDCB = :* (:* (:* D3 D5) D3) D1
type D3531 = :* (:* (:* D3 D5) D3) D1
type O6713 = :* (:* (:* D3 D5) D3) D1
type HDCA = :* (:* (:* D3 D5) D3) D0
type D3530 = :* (:* (:* D3 D5) D3) D0
type O6712 = :* (:* (:* D3 D5) D3) D0
type HDC9 = :* (:* (:* D3 D5) D2) D9
type D3529 = :* (:* (:* D3 D5) D2) D9
type O6711 = :* (:* (:* D3 D5) D2) D9
type HDC8 = :* (:* (:* D3 D5) D2) D8
type D3528 = :* (:* (:* D3 D5) D2) D8
type O6710 = :* (:* (:* D3 D5) D2) D8
type HDC7 = :* (:* (:* D3 D5) D2) D7
type D3527 = :* (:* (:* D3 D5) D2) D7
type O6707 = :* (:* (:* D3 D5) D2) D7
type HDC6 = :* (:* (:* D3 D5) D2) D6
type D3526 = :* (:* (:* D3 D5) D2) D6
type O6706 = :* (:* (:* D3 D5) D2) D6
type HDC5 = :* (:* (:* D3 D5) D2) D5
type D3525 = :* (:* (:* D3 D5) D2) D5
type O6705 = :* (:* (:* D3 D5) D2) D5
type HDC4 = :* (:* (:* D3 D5) D2) D4
type D3524 = :* (:* (:* D3 D5) D2) D4
type O6704 = :* (:* (:* D3 D5) D2) D4
type HDC3 = :* (:* (:* D3 D5) D2) D3
type D3523 = :* (:* (:* D3 D5) D2) D3
type O6703 = :* (:* (:* D3 D5) D2) D3
type HDC2 = :* (:* (:* D3 D5) D2) D2
type D3522 = :* (:* (:* D3 D5) D2) D2
type O6702 = :* (:* (:* D3 D5) D2) D2
type HDC1 = :* (:* (:* D3 D5) D2) D1
type D3521 = :* (:* (:* D3 D5) D2) D1
type O6701 = :* (:* (:* D3 D5) D2) D1
type HDC0 = :* (:* (:* D3 D5) D2) D0
type D3520 = :* (:* (:* D3 D5) D2) D0
type O6700 = :* (:* (:* D3 D5) D2) D0
type HDBF = :* (:* (:* D3 D5) D1) D9
type D3519 = :* (:* (:* D3 D5) D1) D9
type O6677 = :* (:* (:* D3 D5) D1) D9
type HDBE = :* (:* (:* D3 D5) D1) D8
type D3518 = :* (:* (:* D3 D5) D1) D8
type O6676 = :* (:* (:* D3 D5) D1) D8
type HDBD = :* (:* (:* D3 D5) D1) D7
type D3517 = :* (:* (:* D3 D5) D1) D7
type O6675 = :* (:* (:* D3 D5) D1) D7
type HDBC = :* (:* (:* D3 D5) D1) D6
type D3516 = :* (:* (:* D3 D5) D1) D6
type O6674 = :* (:* (:* D3 D5) D1) D6
type HDBB = :* (:* (:* D3 D5) D1) D5
type D3515 = :* (:* (:* D3 D5) D1) D5
type O6673 = :* (:* (:* D3 D5) D1) D5
type HDBA = :* (:* (:* D3 D5) D1) D4
type D3514 = :* (:* (:* D3 D5) D1) D4
type O6672 = :* (:* (:* D3 D5) D1) D4
type HDB9 = :* (:* (:* D3 D5) D1) D3
type D3513 = :* (:* (:* D3 D5) D1) D3
type O6671 = :* (:* (:* D3 D5) D1) D3
type HDB8 = :* (:* (:* D3 D5) D1) D2
type D3512 = :* (:* (:* D3 D5) D1) D2
type O6670 = :* (:* (:* D3 D5) D1) D2
type HDB7 = :* (:* (:* D3 D5) D1) D1
type D3511 = :* (:* (:* D3 D5) D1) D1
type O6667 = :* (:* (:* D3 D5) D1) D1
type HDB6 = :* (:* (:* D3 D5) D1) D0
type D3510 = :* (:* (:* D3 D5) D1) D0
type O6666 = :* (:* (:* D3 D5) D1) D0
type HDB5 = :* (:* (:* D3 D5) D0) D9
type D3509 = :* (:* (:* D3 D5) D0) D9
type O6665 = :* (:* (:* D3 D5) D0) D9
type HDB4 = :* (:* (:* D3 D5) D0) D8
type D3508 = :* (:* (:* D3 D5) D0) D8
type O6664 = :* (:* (:* D3 D5) D0) D8
type HDB3 = :* (:* (:* D3 D5) D0) D7
type D3507 = :* (:* (:* D3 D5) D0) D7
type O6663 = :* (:* (:* D3 D5) D0) D7
type HDB2 = :* (:* (:* D3 D5) D0) D6
type D3506 = :* (:* (:* D3 D5) D0) D6
type O6662 = :* (:* (:* D3 D5) D0) D6
type HDB1 = :* (:* (:* D3 D5) D0) D5
type D3505 = :* (:* (:* D3 D5) D0) D5
type O6661 = :* (:* (:* D3 D5) D0) D5
type HDB0 = :* (:* (:* D3 D5) D0) D4
type D3504 = :* (:* (:* D3 D5) D0) D4
type O6660 = :* (:* (:* D3 D5) D0) D4
type HDAF = :* (:* (:* D3 D5) D0) D3
type D3503 = :* (:* (:* D3 D5) D0) D3
type O6657 = :* (:* (:* D3 D5) D0) D3
type HDAE = :* (:* (:* D3 D5) D0) D2
type D3502 = :* (:* (:* D3 D5) D0) D2
type O6656 = :* (:* (:* D3 D5) D0) D2
type HDAD = :* (:* (:* D3 D5) D0) D1
type D3501 = :* (:* (:* D3 D5) D0) D1
type O6655 = :* (:* (:* D3 D5) D0) D1
type HDAC = :* (:* (:* D3 D5) D0) D0
type D3500 = :* (:* (:* D3 D5) D0) D0
type O6654 = :* (:* (:* D3 D5) D0) D0
type HDAB = :* (:* (:* D3 D4) D9) D9
type D3499 = :* (:* (:* D3 D4) D9) D9
type O6653 = :* (:* (:* D3 D4) D9) D9
type HDAA = :* (:* (:* D3 D4) D9) D8
type D3498 = :* (:* (:* D3 D4) D9) D8
type O6652 = :* (:* (:* D3 D4) D9) D8
type HDA9 = :* (:* (:* D3 D4) D9) D7
type D3497 = :* (:* (:* D3 D4) D9) D7
type O6651 = :* (:* (:* D3 D4) D9) D7
type HDA8 = :* (:* (:* D3 D4) D9) D6
type D3496 = :* (:* (:* D3 D4) D9) D6
type O6650 = :* (:* (:* D3 D4) D9) D6
type HDA7 = :* (:* (:* D3 D4) D9) D5
type D3495 = :* (:* (:* D3 D4) D9) D5
type O6647 = :* (:* (:* D3 D4) D9) D5
type HDA6 = :* (:* (:* D3 D4) D9) D4
type D3494 = :* (:* (:* D3 D4) D9) D4
type O6646 = :* (:* (:* D3 D4) D9) D4
type HDA5 = :* (:* (:* D3 D4) D9) D3
type D3493 = :* (:* (:* D3 D4) D9) D3
type O6645 = :* (:* (:* D3 D4) D9) D3
type HDA4 = :* (:* (:* D3 D4) D9) D2
type D3492 = :* (:* (:* D3 D4) D9) D2
type O6644 = :* (:* (:* D3 D4) D9) D2
type HDA3 = :* (:* (:* D3 D4) D9) D1
type D3491 = :* (:* (:* D3 D4) D9) D1
type O6643 = :* (:* (:* D3 D4) D9) D1
type HDA2 = :* (:* (:* D3 D4) D9) D0
type D3490 = :* (:* (:* D3 D4) D9) D0
type O6642 = :* (:* (:* D3 D4) D9) D0
type HDA1 = :* (:* (:* D3 D4) D8) D9
type D3489 = :* (:* (:* D3 D4) D8) D9
type O6641 = :* (:* (:* D3 D4) D8) D9
type HDA0 = :* (:* (:* D3 D4) D8) D8
type D3488 = :* (:* (:* D3 D4) D8) D8
type O6640 = :* (:* (:* D3 D4) D8) D8
type HD9F = :* (:* (:* D3 D4) D8) D7
type D3487 = :* (:* (:* D3 D4) D8) D7
type O6637 = :* (:* (:* D3 D4) D8) D7
type HD9E = :* (:* (:* D3 D4) D8) D6
type D3486 = :* (:* (:* D3 D4) D8) D6
type O6636 = :* (:* (:* D3 D4) D8) D6
type HD9D = :* (:* (:* D3 D4) D8) D5
type D3485 = :* (:* (:* D3 D4) D8) D5
type O6635 = :* (:* (:* D3 D4) D8) D5
type HD9C = :* (:* (:* D3 D4) D8) D4
type D3484 = :* (:* (:* D3 D4) D8) D4
type O6634 = :* (:* (:* D3 D4) D8) D4
type HD9B = :* (:* (:* D3 D4) D8) D3
type D3483 = :* (:* (:* D3 D4) D8) D3
type O6633 = :* (:* (:* D3 D4) D8) D3
type HD9A = :* (:* (:* D3 D4) D8) D2
type D3482 = :* (:* (:* D3 D4) D8) D2
type O6632 = :* (:* (:* D3 D4) D8) D2
type HD99 = :* (:* (:* D3 D4) D8) D1
type D3481 = :* (:* (:* D3 D4) D8) D1
type O6631 = :* (:* (:* D3 D4) D8) D1
type HD98 = :* (:* (:* D3 D4) D8) D0
type D3480 = :* (:* (:* D3 D4) D8) D0
type O6630 = :* (:* (:* D3 D4) D8) D0
type HD97 = :* (:* (:* D3 D4) D7) D9
type D3479 = :* (:* (:* D3 D4) D7) D9
type O6627 = :* (:* (:* D3 D4) D7) D9
type HD96 = :* (:* (:* D3 D4) D7) D8
type D3478 = :* (:* (:* D3 D4) D7) D8
type O6626 = :* (:* (:* D3 D4) D7) D8
type HD95 = :* (:* (:* D3 D4) D7) D7
type D3477 = :* (:* (:* D3 D4) D7) D7
type O6625 = :* (:* (:* D3 D4) D7) D7
type HD94 = :* (:* (:* D3 D4) D7) D6
type D3476 = :* (:* (:* D3 D4) D7) D6
type O6624 = :* (:* (:* D3 D4) D7) D6
type HD93 = :* (:* (:* D3 D4) D7) D5
type D3475 = :* (:* (:* D3 D4) D7) D5
type O6623 = :* (:* (:* D3 D4) D7) D5
type HD92 = :* (:* (:* D3 D4) D7) D4
type D3474 = :* (:* (:* D3 D4) D7) D4
type O6622 = :* (:* (:* D3 D4) D7) D4
type HD91 = :* (:* (:* D3 D4) D7) D3
type D3473 = :* (:* (:* D3 D4) D7) D3
type O6621 = :* (:* (:* D3 D4) D7) D3
type HD90 = :* (:* (:* D3 D4) D7) D2
type D3472 = :* (:* (:* D3 D4) D7) D2
type O6620 = :* (:* (:* D3 D4) D7) D2
type HD8F = :* (:* (:* D3 D4) D7) D1
type D3471 = :* (:* (:* D3 D4) D7) D1
type O6617 = :* (:* (:* D3 D4) D7) D1
type HD8E = :* (:* (:* D3 D4) D7) D0
type D3470 = :* (:* (:* D3 D4) D7) D0
type O6616 = :* (:* (:* D3 D4) D7) D0
type HD8D = :* (:* (:* D3 D4) D6) D9
type D3469 = :* (:* (:* D3 D4) D6) D9
type O6615 = :* (:* (:* D3 D4) D6) D9
type HD8C = :* (:* (:* D3 D4) D6) D8
type D3468 = :* (:* (:* D3 D4) D6) D8
type O6614 = :* (:* (:* D3 D4) D6) D8
type HD8B = :* (:* (:* D3 D4) D6) D7
type D3467 = :* (:* (:* D3 D4) D6) D7
type O6613 = :* (:* (:* D3 D4) D6) D7
type HD8A = :* (:* (:* D3 D4) D6) D6
type D3466 = :* (:* (:* D3 D4) D6) D6
type O6612 = :* (:* (:* D3 D4) D6) D6
type HD89 = :* (:* (:* D3 D4) D6) D5
type D3465 = :* (:* (:* D3 D4) D6) D5
type O6611 = :* (:* (:* D3 D4) D6) D5
type HD88 = :* (:* (:* D3 D4) D6) D4
type D3464 = :* (:* (:* D3 D4) D6) D4
type O6610 = :* (:* (:* D3 D4) D6) D4
type HD87 = :* (:* (:* D3 D4) D6) D3
type D3463 = :* (:* (:* D3 D4) D6) D3
type O6607 = :* (:* (:* D3 D4) D6) D3
type HD86 = :* (:* (:* D3 D4) D6) D2
type D3462 = :* (:* (:* D3 D4) D6) D2
type O6606 = :* (:* (:* D3 D4) D6) D2
type HD85 = :* (:* (:* D3 D4) D6) D1
type D3461 = :* (:* (:* D3 D4) D6) D1
type O6605 = :* (:* (:* D3 D4) D6) D1
type HD84 = :* (:* (:* D3 D4) D6) D0
type D3460 = :* (:* (:* D3 D4) D6) D0
type O6604 = :* (:* (:* D3 D4) D6) D0
type HD83 = :* (:* (:* D3 D4) D5) D9
type D3459 = :* (:* (:* D3 D4) D5) D9
type O6603 = :* (:* (:* D3 D4) D5) D9
type HD82 = :* (:* (:* D3 D4) D5) D8
type D3458 = :* (:* (:* D3 D4) D5) D8
type O6602 = :* (:* (:* D3 D4) D5) D8
type HD81 = :* (:* (:* D3 D4) D5) D7
type D3457 = :* (:* (:* D3 D4) D5) D7
type O6601 = :* (:* (:* D3 D4) D5) D7
type HD80 = :* (:* (:* D3 D4) D5) D6
type D3456 = :* (:* (:* D3 D4) D5) D6
type O6600 = :* (:* (:* D3 D4) D5) D6
type HD7F = :* (:* (:* D3 D4) D5) D5
type D3455 = :* (:* (:* D3 D4) D5) D5
type O6577 = :* (:* (:* D3 D4) D5) D5
type HD7E = :* (:* (:* D3 D4) D5) D4
type D3454 = :* (:* (:* D3 D4) D5) D4
type O6576 = :* (:* (:* D3 D4) D5) D4
type HD7D = :* (:* (:* D3 D4) D5) D3
type D3453 = :* (:* (:* D3 D4) D5) D3
type O6575 = :* (:* (:* D3 D4) D5) D3
type HD7C = :* (:* (:* D3 D4) D5) D2
type D3452 = :* (:* (:* D3 D4) D5) D2
type O6574 = :* (:* (:* D3 D4) D5) D2
type HD7B = :* (:* (:* D3 D4) D5) D1
type D3451 = :* (:* (:* D3 D4) D5) D1
type O6573 = :* (:* (:* D3 D4) D5) D1
type HD7A = :* (:* (:* D3 D4) D5) D0
type D3450 = :* (:* (:* D3 D4) D5) D0
type O6572 = :* (:* (:* D3 D4) D5) D0
type HD79 = :* (:* (:* D3 D4) D4) D9
type D3449 = :* (:* (:* D3 D4) D4) D9
type O6571 = :* (:* (:* D3 D4) D4) D9
type HD78 = :* (:* (:* D3 D4) D4) D8
type D3448 = :* (:* (:* D3 D4) D4) D8
type O6570 = :* (:* (:* D3 D4) D4) D8
type HD77 = :* (:* (:* D3 D4) D4) D7
type D3447 = :* (:* (:* D3 D4) D4) D7
type O6567 = :* (:* (:* D3 D4) D4) D7
type HD76 = :* (:* (:* D3 D4) D4) D6
type D3446 = :* (:* (:* D3 D4) D4) D6
type O6566 = :* (:* (:* D3 D4) D4) D6
type HD75 = :* (:* (:* D3 D4) D4) D5
type D3445 = :* (:* (:* D3 D4) D4) D5
type O6565 = :* (:* (:* D3 D4) D4) D5
type HD74 = :* (:* (:* D3 D4) D4) D4
type D3444 = :* (:* (:* D3 D4) D4) D4
type O6564 = :* (:* (:* D3 D4) D4) D4
type HD73 = :* (:* (:* D3 D4) D4) D3
type D3443 = :* (:* (:* D3 D4) D4) D3
type O6563 = :* (:* (:* D3 D4) D4) D3
type HD72 = :* (:* (:* D3 D4) D4) D2
type D3442 = :* (:* (:* D3 D4) D4) D2
type O6562 = :* (:* (:* D3 D4) D4) D2
type HD71 = :* (:* (:* D3 D4) D4) D1
type D3441 = :* (:* (:* D3 D4) D4) D1
type O6561 = :* (:* (:* D3 D4) D4) D1
type HD70 = :* (:* (:* D3 D4) D4) D0
type D3440 = :* (:* (:* D3 D4) D4) D0
type O6560 = :* (:* (:* D3 D4) D4) D0
type HD6F = :* (:* (:* D3 D4) D3) D9
type D3439 = :* (:* (:* D3 D4) D3) D9
type O6557 = :* (:* (:* D3 D4) D3) D9
type HD6E = :* (:* (:* D3 D4) D3) D8
type D3438 = :* (:* (:* D3 D4) D3) D8
type O6556 = :* (:* (:* D3 D4) D3) D8
type HD6D = :* (:* (:* D3 D4) D3) D7
type D3437 = :* (:* (:* D3 D4) D3) D7
type O6555 = :* (:* (:* D3 D4) D3) D7
type HD6C = :* (:* (:* D3 D4) D3) D6
type D3436 = :* (:* (:* D3 D4) D3) D6
type O6554 = :* (:* (:* D3 D4) D3) D6
type HD6B = :* (:* (:* D3 D4) D3) D5
type D3435 = :* (:* (:* D3 D4) D3) D5
type O6553 = :* (:* (:* D3 D4) D3) D5
type HD6A = :* (:* (:* D3 D4) D3) D4
type D3434 = :* (:* (:* D3 D4) D3) D4
type O6552 = :* (:* (:* D3 D4) D3) D4
type HD69 = :* (:* (:* D3 D4) D3) D3
type D3433 = :* (:* (:* D3 D4) D3) D3
type O6551 = :* (:* (:* D3 D4) D3) D3
type HD68 = :* (:* (:* D3 D4) D3) D2
type D3432 = :* (:* (:* D3 D4) D3) D2
type O6550 = :* (:* (:* D3 D4) D3) D2
type HD67 = :* (:* (:* D3 D4) D3) D1
type D3431 = :* (:* (:* D3 D4) D3) D1
type O6547 = :* (:* (:* D3 D4) D3) D1
type HD66 = :* (:* (:* D3 D4) D3) D0
type D3430 = :* (:* (:* D3 D4) D3) D0
type O6546 = :* (:* (:* D3 D4) D3) D0
type HD65 = :* (:* (:* D3 D4) D2) D9
type D3429 = :* (:* (:* D3 D4) D2) D9
type O6545 = :* (:* (:* D3 D4) D2) D9
type HD64 = :* (:* (:* D3 D4) D2) D8
type D3428 = :* (:* (:* D3 D4) D2) D8
type O6544 = :* (:* (:* D3 D4) D2) D8
type HD63 = :* (:* (:* D3 D4) D2) D7
type D3427 = :* (:* (:* D3 D4) D2) D7
type O6543 = :* (:* (:* D3 D4) D2) D7
type HD62 = :* (:* (:* D3 D4) D2) D6
type D3426 = :* (:* (:* D3 D4) D2) D6
type O6542 = :* (:* (:* D3 D4) D2) D6
type HD61 = :* (:* (:* D3 D4) D2) D5
type D3425 = :* (:* (:* D3 D4) D2) D5
type O6541 = :* (:* (:* D3 D4) D2) D5
type HD60 = :* (:* (:* D3 D4) D2) D4
type D3424 = :* (:* (:* D3 D4) D2) D4
type O6540 = :* (:* (:* D3 D4) D2) D4
type HD5F = :* (:* (:* D3 D4) D2) D3
type D3423 = :* (:* (:* D3 D4) D2) D3
type O6537 = :* (:* (:* D3 D4) D2) D3
type HD5E = :* (:* (:* D3 D4) D2) D2
type D3422 = :* (:* (:* D3 D4) D2) D2
type O6536 = :* (:* (:* D3 D4) D2) D2
type HD5D = :* (:* (:* D3 D4) D2) D1
type D3421 = :* (:* (:* D3 D4) D2) D1
type O6535 = :* (:* (:* D3 D4) D2) D1
type HD5C = :* (:* (:* D3 D4) D2) D0
type D3420 = :* (:* (:* D3 D4) D2) D0
type O6534 = :* (:* (:* D3 D4) D2) D0
type HD5B = :* (:* (:* D3 D4) D1) D9
type D3419 = :* (:* (:* D3 D4) D1) D9
type O6533 = :* (:* (:* D3 D4) D1) D9
type HD5A = :* (:* (:* D3 D4) D1) D8
type D3418 = :* (:* (:* D3 D4) D1) D8
type O6532 = :* (:* (:* D3 D4) D1) D8
type HD59 = :* (:* (:* D3 D4) D1) D7
type D3417 = :* (:* (:* D3 D4) D1) D7
type O6531 = :* (:* (:* D3 D4) D1) D7
type HD58 = :* (:* (:* D3 D4) D1) D6
type D3416 = :* (:* (:* D3 D4) D1) D6
type O6530 = :* (:* (:* D3 D4) D1) D6
type HD57 = :* (:* (:* D3 D4) D1) D5
type D3415 = :* (:* (:* D3 D4) D1) D5
type O6527 = :* (:* (:* D3 D4) D1) D5
type HD56 = :* (:* (:* D3 D4) D1) D4
type D3414 = :* (:* (:* D3 D4) D1) D4
type O6526 = :* (:* (:* D3 D4) D1) D4
type HD55 = :* (:* (:* D3 D4) D1) D3
type D3413 = :* (:* (:* D3 D4) D1) D3
type O6525 = :* (:* (:* D3 D4) D1) D3
type HD54 = :* (:* (:* D3 D4) D1) D2
type D3412 = :* (:* (:* D3 D4) D1) D2
type O6524 = :* (:* (:* D3 D4) D1) D2
type HD53 = :* (:* (:* D3 D4) D1) D1
type D3411 = :* (:* (:* D3 D4) D1) D1
type O6523 = :* (:* (:* D3 D4) D1) D1
type HD52 = :* (:* (:* D3 D4) D1) D0
type D3410 = :* (:* (:* D3 D4) D1) D0
type O6522 = :* (:* (:* D3 D4) D1) D0
type HD51 = :* (:* (:* D3 D4) D0) D9
type D3409 = :* (:* (:* D3 D4) D0) D9
type O6521 = :* (:* (:* D3 D4) D0) D9
type HD50 = :* (:* (:* D3 D4) D0) D8
type D3408 = :* (:* (:* D3 D4) D0) D8
type O6520 = :* (:* (:* D3 D4) D0) D8
type HD4F = :* (:* (:* D3 D4) D0) D7
type D3407 = :* (:* (:* D3 D4) D0) D7
type O6517 = :* (:* (:* D3 D4) D0) D7
type HD4E = :* (:* (:* D3 D4) D0) D6
type D3406 = :* (:* (:* D3 D4) D0) D6
type O6516 = :* (:* (:* D3 D4) D0) D6
type HD4D = :* (:* (:* D3 D4) D0) D5
type D3405 = :* (:* (:* D3 D4) D0) D5
type O6515 = :* (:* (:* D3 D4) D0) D5
type HD4C = :* (:* (:* D3 D4) D0) D4
type D3404 = :* (:* (:* D3 D4) D0) D4
type O6514 = :* (:* (:* D3 D4) D0) D4
type HD4B = :* (:* (:* D3 D4) D0) D3
type D3403 = :* (:* (:* D3 D4) D0) D3
type O6513 = :* (:* (:* D3 D4) D0) D3
type HD4A = :* (:* (:* D3 D4) D0) D2
type D3402 = :* (:* (:* D3 D4) D0) D2
type O6512 = :* (:* (:* D3 D4) D0) D2
type HD49 = :* (:* (:* D3 D4) D0) D1
type D3401 = :* (:* (:* D3 D4) D0) D1
type O6511 = :* (:* (:* D3 D4) D0) D1
type HD48 = :* (:* (:* D3 D4) D0) D0
type D3400 = :* (:* (:* D3 D4) D0) D0
type O6510 = :* (:* (:* D3 D4) D0) D0
type HD47 = :* (:* (:* D3 D3) D9) D9
type D3399 = :* (:* (:* D3 D3) D9) D9
type O6507 = :* (:* (:* D3 D3) D9) D9
type HD46 = :* (:* (:* D3 D3) D9) D8
type D3398 = :* (:* (:* D3 D3) D9) D8
type O6506 = :* (:* (:* D3 D3) D9) D8
type HD45 = :* (:* (:* D3 D3) D9) D7
type D3397 = :* (:* (:* D3 D3) D9) D7
type O6505 = :* (:* (:* D3 D3) D9) D7
type HD44 = :* (:* (:* D3 D3) D9) D6
type D3396 = :* (:* (:* D3 D3) D9) D6
type O6504 = :* (:* (:* D3 D3) D9) D6
type HD43 = :* (:* (:* D3 D3) D9) D5
type D3395 = :* (:* (:* D3 D3) D9) D5
type O6503 = :* (:* (:* D3 D3) D9) D5
type HD42 = :* (:* (:* D3 D3) D9) D4
type D3394 = :* (:* (:* D3 D3) D9) D4
type O6502 = :* (:* (:* D3 D3) D9) D4
type HD41 = :* (:* (:* D3 D3) D9) D3
type D3393 = :* (:* (:* D3 D3) D9) D3
type O6501 = :* (:* (:* D3 D3) D9) D3
type HD40 = :* (:* (:* D3 D3) D9) D2
type D3392 = :* (:* (:* D3 D3) D9) D2
type O6500 = :* (:* (:* D3 D3) D9) D2
type HD3F = :* (:* (:* D3 D3) D9) D1
type D3391 = :* (:* (:* D3 D3) D9) D1
type O6477 = :* (:* (:* D3 D3) D9) D1
type HD3E = :* (:* (:* D3 D3) D9) D0
type D3390 = :* (:* (:* D3 D3) D9) D0
type O6476 = :* (:* (:* D3 D3) D9) D0
type HD3D = :* (:* (:* D3 D3) D8) D9
type D3389 = :* (:* (:* D3 D3) D8) D9
type O6475 = :* (:* (:* D3 D3) D8) D9
type HD3C = :* (:* (:* D3 D3) D8) D8
type D3388 = :* (:* (:* D3 D3) D8) D8
type O6474 = :* (:* (:* D3 D3) D8) D8
type HD3B = :* (:* (:* D3 D3) D8) D7
type D3387 = :* (:* (:* D3 D3) D8) D7
type O6473 = :* (:* (:* D3 D3) D8) D7
type HD3A = :* (:* (:* D3 D3) D8) D6
type D3386 = :* (:* (:* D3 D3) D8) D6
type O6472 = :* (:* (:* D3 D3) D8) D6
type HD39 = :* (:* (:* D3 D3) D8) D5
type D3385 = :* (:* (:* D3 D3) D8) D5
type O6471 = :* (:* (:* D3 D3) D8) D5
type HD38 = :* (:* (:* D3 D3) D8) D4
type D3384 = :* (:* (:* D3 D3) D8) D4
type O6470 = :* (:* (:* D3 D3) D8) D4
type HD37 = :* (:* (:* D3 D3) D8) D3
type D3383 = :* (:* (:* D3 D3) D8) D3
type O6467 = :* (:* (:* D3 D3) D8) D3
type HD36 = :* (:* (:* D3 D3) D8) D2
type D3382 = :* (:* (:* D3 D3) D8) D2
type O6466 = :* (:* (:* D3 D3) D8) D2
type HD35 = :* (:* (:* D3 D3) D8) D1
type D3381 = :* (:* (:* D3 D3) D8) D1
type O6465 = :* (:* (:* D3 D3) D8) D1
type HD34 = :* (:* (:* D3 D3) D8) D0
type D3380 = :* (:* (:* D3 D3) D8) D0
type O6464 = :* (:* (:* D3 D3) D8) D0
type HD33 = :* (:* (:* D3 D3) D7) D9
type D3379 = :* (:* (:* D3 D3) D7) D9
type O6463 = :* (:* (:* D3 D3) D7) D9
type HD32 = :* (:* (:* D3 D3) D7) D8
type D3378 = :* (:* (:* D3 D3) D7) D8
type O6462 = :* (:* (:* D3 D3) D7) D8
type HD31 = :* (:* (:* D3 D3) D7) D7
type D3377 = :* (:* (:* D3 D3) D7) D7
type O6461 = :* (:* (:* D3 D3) D7) D7
type HD30 = :* (:* (:* D3 D3) D7) D6
type D3376 = :* (:* (:* D3 D3) D7) D6
type O6460 = :* (:* (:* D3 D3) D7) D6
type HD2F = :* (:* (:* D3 D3) D7) D5
type D3375 = :* (:* (:* D3 D3) D7) D5
type O6457 = :* (:* (:* D3 D3) D7) D5
type HD2E = :* (:* (:* D3 D3) D7) D4
type D3374 = :* (:* (:* D3 D3) D7) D4
type O6456 = :* (:* (:* D3 D3) D7) D4
type HD2D = :* (:* (:* D3 D3) D7) D3
type D3373 = :* (:* (:* D3 D3) D7) D3
type O6455 = :* (:* (:* D3 D3) D7) D3
type HD2C = :* (:* (:* D3 D3) D7) D2
type D3372 = :* (:* (:* D3 D3) D7) D2
type O6454 = :* (:* (:* D3 D3) D7) D2
type HD2B = :* (:* (:* D3 D3) D7) D1
type D3371 = :* (:* (:* D3 D3) D7) D1
type O6453 = :* (:* (:* D3 D3) D7) D1
type HD2A = :* (:* (:* D3 D3) D7) D0
type D3370 = :* (:* (:* D3 D3) D7) D0
type O6452 = :* (:* (:* D3 D3) D7) D0
type HD29 = :* (:* (:* D3 D3) D6) D9
type D3369 = :* (:* (:* D3 D3) D6) D9
type O6451 = :* (:* (:* D3 D3) D6) D9
type HD28 = :* (:* (:* D3 D3) D6) D8
type D3368 = :* (:* (:* D3 D3) D6) D8
type O6450 = :* (:* (:* D3 D3) D6) D8
type HD27 = :* (:* (:* D3 D3) D6) D7
type D3367 = :* (:* (:* D3 D3) D6) D7
type O6447 = :* (:* (:* D3 D3) D6) D7
type HD26 = :* (:* (:* D3 D3) D6) D6
type D3366 = :* (:* (:* D3 D3) D6) D6
type O6446 = :* (:* (:* D3 D3) D6) D6
type HD25 = :* (:* (:* D3 D3) D6) D5
type D3365 = :* (:* (:* D3 D3) D6) D5
type O6445 = :* (:* (:* D3 D3) D6) D5
type HD24 = :* (:* (:* D3 D3) D6) D4
type D3364 = :* (:* (:* D3 D3) D6) D4
type O6444 = :* (:* (:* D3 D3) D6) D4
type HD23 = :* (:* (:* D3 D3) D6) D3
type D3363 = :* (:* (:* D3 D3) D6) D3
type O6443 = :* (:* (:* D3 D3) D6) D3
type HD22 = :* (:* (:* D3 D3) D6) D2
type D3362 = :* (:* (:* D3 D3) D6) D2
type O6442 = :* (:* (:* D3 D3) D6) D2
type HD21 = :* (:* (:* D3 D3) D6) D1
type D3361 = :* (:* (:* D3 D3) D6) D1
type O6441 = :* (:* (:* D3 D3) D6) D1
type HD20 = :* (:* (:* D3 D3) D6) D0
type D3360 = :* (:* (:* D3 D3) D6) D0
type O6440 = :* (:* (:* D3 D3) D6) D0
type HD1F = :* (:* (:* D3 D3) D5) D9
type D3359 = :* (:* (:* D3 D3) D5) D9
type O6437 = :* (:* (:* D3 D3) D5) D9
type HD1E = :* (:* (:* D3 D3) D5) D8
type D3358 = :* (:* (:* D3 D3) D5) D8
type O6436 = :* (:* (:* D3 D3) D5) D8
type HD1D = :* (:* (:* D3 D3) D5) D7
type D3357 = :* (:* (:* D3 D3) D5) D7
type O6435 = :* (:* (:* D3 D3) D5) D7
type HD1C = :* (:* (:* D3 D3) D5) D6
type D3356 = :* (:* (:* D3 D3) D5) D6
type O6434 = :* (:* (:* D3 D3) D5) D6
type HD1B = :* (:* (:* D3 D3) D5) D5
type D3355 = :* (:* (:* D3 D3) D5) D5
type O6433 = :* (:* (:* D3 D3) D5) D5
type HD1A = :* (:* (:* D3 D3) D5) D4
type D3354 = :* (:* (:* D3 D3) D5) D4
type O6432 = :* (:* (:* D3 D3) D5) D4
type HD19 = :* (:* (:* D3 D3) D5) D3
type D3353 = :* (:* (:* D3 D3) D5) D3
type O6431 = :* (:* (:* D3 D3) D5) D3
type HD18 = :* (:* (:* D3 D3) D5) D2
type D3352 = :* (:* (:* D3 D3) D5) D2
type O6430 = :* (:* (:* D3 D3) D5) D2
type HD17 = :* (:* (:* D3 D3) D5) D1
type D3351 = :* (:* (:* D3 D3) D5) D1
type O6427 = :* (:* (:* D3 D3) D5) D1
type HD16 = :* (:* (:* D3 D3) D5) D0
type D3350 = :* (:* (:* D3 D3) D5) D0
type O6426 = :* (:* (:* D3 D3) D5) D0
type HD15 = :* (:* (:* D3 D3) D4) D9
type D3349 = :* (:* (:* D3 D3) D4) D9
type O6425 = :* (:* (:* D3 D3) D4) D9
type HD14 = :* (:* (:* D3 D3) D4) D8
type D3348 = :* (:* (:* D3 D3) D4) D8
type O6424 = :* (:* (:* D3 D3) D4) D8
type HD13 = :* (:* (:* D3 D3) D4) D7
type D3347 = :* (:* (:* D3 D3) D4) D7
type O6423 = :* (:* (:* D3 D3) D4) D7
type HD12 = :* (:* (:* D3 D3) D4) D6
type D3346 = :* (:* (:* D3 D3) D4) D6
type O6422 = :* (:* (:* D3 D3) D4) D6
type HD11 = :* (:* (:* D3 D3) D4) D5
type D3345 = :* (:* (:* D3 D3) D4) D5
type O6421 = :* (:* (:* D3 D3) D4) D5
type HD10 = :* (:* (:* D3 D3) D4) D4
type D3344 = :* (:* (:* D3 D3) D4) D4
type O6420 = :* (:* (:* D3 D3) D4) D4
type HD0F = :* (:* (:* D3 D3) D4) D3
type D3343 = :* (:* (:* D3 D3) D4) D3
type O6417 = :* (:* (:* D3 D3) D4) D3
type HD0E = :* (:* (:* D3 D3) D4) D2
type D3342 = :* (:* (:* D3 D3) D4) D2
type O6416 = :* (:* (:* D3 D3) D4) D2
type HD0D = :* (:* (:* D3 D3) D4) D1
type D3341 = :* (:* (:* D3 D3) D4) D1
type O6415 = :* (:* (:* D3 D3) D4) D1
type HD0C = :* (:* (:* D3 D3) D4) D0
type D3340 = :* (:* (:* D3 D3) D4) D0
type O6414 = :* (:* (:* D3 D3) D4) D0
type HD0B = :* (:* (:* D3 D3) D3) D9
type D3339 = :* (:* (:* D3 D3) D3) D9
type O6413 = :* (:* (:* D3 D3) D3) D9
type HD0A = :* (:* (:* D3 D3) D3) D8
type D3338 = :* (:* (:* D3 D3) D3) D8
type O6412 = :* (:* (:* D3 D3) D3) D8
type HD09 = :* (:* (:* D3 D3) D3) D7
type D3337 = :* (:* (:* D3 D3) D3) D7
type O6411 = :* (:* (:* D3 D3) D3) D7
type HD08 = :* (:* (:* D3 D3) D3) D6
type D3336 = :* (:* (:* D3 D3) D3) D6
type O6410 = :* (:* (:* D3 D3) D3) D6
type HD07 = :* (:* (:* D3 D3) D3) D5
type D3335 = :* (:* (:* D3 D3) D3) D5
type O6407 = :* (:* (:* D3 D3) D3) D5
type HD06 = :* (:* (:* D3 D3) D3) D4
type D3334 = :* (:* (:* D3 D3) D3) D4
type O6406 = :* (:* (:* D3 D3) D3) D4
type HD05 = :* (:* (:* D3 D3) D3) D3
type D3333 = :* (:* (:* D3 D3) D3) D3
type O6405 = :* (:* (:* D3 D3) D3) D3
type HD04 = :* (:* (:* D3 D3) D3) D2
type D3332 = :* (:* (:* D3 D3) D3) D2
type O6404 = :* (:* (:* D3 D3) D3) D2
type HD03 = :* (:* (:* D3 D3) D3) D1
type D3331 = :* (:* (:* D3 D3) D3) D1
type O6403 = :* (:* (:* D3 D3) D3) D1
type HD02 = :* (:* (:* D3 D3) D3) D0
type D3330 = :* (:* (:* D3 D3) D3) D0
type O6402 = :* (:* (:* D3 D3) D3) D0
type HD01 = :* (:* (:* D3 D3) D2) D9
type D3329 = :* (:* (:* D3 D3) D2) D9
type O6401 = :* (:* (:* D3 D3) D2) D9
type HD00 = :* (:* (:* D3 D3) D2) D8
type D3328 = :* (:* (:* D3 D3) D2) D8
type O6400 = :* (:* (:* D3 D3) D2) D8
type HCFF = :* (:* (:* D3 D3) D2) D7
type D3327 = :* (:* (:* D3 D3) D2) D7
type O6377 = :* (:* (:* D3 D3) D2) D7
type HCFE = :* (:* (:* D3 D3) D2) D6
type D3326 = :* (:* (:* D3 D3) D2) D6
type O6376 = :* (:* (:* D3 D3) D2) D6
type HCFD = :* (:* (:* D3 D3) D2) D5
type D3325 = :* (:* (:* D3 D3) D2) D5
type O6375 = :* (:* (:* D3 D3) D2) D5
type HCFC = :* (:* (:* D3 D3) D2) D4
type D3324 = :* (:* (:* D3 D3) D2) D4
type O6374 = :* (:* (:* D3 D3) D2) D4
type HCFB = :* (:* (:* D3 D3) D2) D3
type D3323 = :* (:* (:* D3 D3) D2) D3
type O6373 = :* (:* (:* D3 D3) D2) D3
type HCFA = :* (:* (:* D3 D3) D2) D2
type D3322 = :* (:* (:* D3 D3) D2) D2
type O6372 = :* (:* (:* D3 D3) D2) D2
type HCF9 = :* (:* (:* D3 D3) D2) D1
type D3321 = :* (:* (:* D3 D3) D2) D1
type O6371 = :* (:* (:* D3 D3) D2) D1
type HCF8 = :* (:* (:* D3 D3) D2) D0
type D3320 = :* (:* (:* D3 D3) D2) D0
type O6370 = :* (:* (:* D3 D3) D2) D0
type HCF7 = :* (:* (:* D3 D3) D1) D9
type D3319 = :* (:* (:* D3 D3) D1) D9
type O6367 = :* (:* (:* D3 D3) D1) D9
type HCF6 = :* (:* (:* D3 D3) D1) D8
type D3318 = :* (:* (:* D3 D3) D1) D8
type O6366 = :* (:* (:* D3 D3) D1) D8
type HCF5 = :* (:* (:* D3 D3) D1) D7
type D3317 = :* (:* (:* D3 D3) D1) D7
type O6365 = :* (:* (:* D3 D3) D1) D7
type HCF4 = :* (:* (:* D3 D3) D1) D6
type D3316 = :* (:* (:* D3 D3) D1) D6
type O6364 = :* (:* (:* D3 D3) D1) D6
type HCF3 = :* (:* (:* D3 D3) D1) D5
type D3315 = :* (:* (:* D3 D3) D1) D5
type O6363 = :* (:* (:* D3 D3) D1) D5
type HCF2 = :* (:* (:* D3 D3) D1) D4
type D3314 = :* (:* (:* D3 D3) D1) D4
type O6362 = :* (:* (:* D3 D3) D1) D4
type HCF1 = :* (:* (:* D3 D3) D1) D3
type D3313 = :* (:* (:* D3 D3) D1) D3
type O6361 = :* (:* (:* D3 D3) D1) D3
type HCF0 = :* (:* (:* D3 D3) D1) D2
type D3312 = :* (:* (:* D3 D3) D1) D2
type O6360 = :* (:* (:* D3 D3) D1) D2
type HCEF = :* (:* (:* D3 D3) D1) D1
type D3311 = :* (:* (:* D3 D3) D1) D1
type O6357 = :* (:* (:* D3 D3) D1) D1
type HCEE = :* (:* (:* D3 D3) D1) D0
type D3310 = :* (:* (:* D3 D3) D1) D0
type O6356 = :* (:* (:* D3 D3) D1) D0
type HCED = :* (:* (:* D3 D3) D0) D9
type D3309 = :* (:* (:* D3 D3) D0) D9
type O6355 = :* (:* (:* D3 D3) D0) D9
type HCEC = :* (:* (:* D3 D3) D0) D8
type D3308 = :* (:* (:* D3 D3) D0) D8
type O6354 = :* (:* (:* D3 D3) D0) D8
type HCEB = :* (:* (:* D3 D3) D0) D7
type D3307 = :* (:* (:* D3 D3) D0) D7
type O6353 = :* (:* (:* D3 D3) D0) D7
type HCEA = :* (:* (:* D3 D3) D0) D6
type D3306 = :* (:* (:* D3 D3) D0) D6
type O6352 = :* (:* (:* D3 D3) D0) D6
type HCE9 = :* (:* (:* D3 D3) D0) D5
type D3305 = :* (:* (:* D3 D3) D0) D5
type O6351 = :* (:* (:* D3 D3) D0) D5
type HCE8 = :* (:* (:* D3 D3) D0) D4
type D3304 = :* (:* (:* D3 D3) D0) D4
type O6350 = :* (:* (:* D3 D3) D0) D4
type HCE7 = :* (:* (:* D3 D3) D0) D3
type D3303 = :* (:* (:* D3 D3) D0) D3
type O6347 = :* (:* (:* D3 D3) D0) D3
type HCE6 = :* (:* (:* D3 D3) D0) D2
type D3302 = :* (:* (:* D3 D3) D0) D2
type O6346 = :* (:* (:* D3 D3) D0) D2
type HCE5 = :* (:* (:* D3 D3) D0) D1
type D3301 = :* (:* (:* D3 D3) D0) D1
type O6345 = :* (:* (:* D3 D3) D0) D1
type HCE4 = :* (:* (:* D3 D3) D0) D0
type D3300 = :* (:* (:* D3 D3) D0) D0
type O6344 = :* (:* (:* D3 D3) D0) D0
type HCE3 = :* (:* (:* D3 D2) D9) D9
type D3299 = :* (:* (:* D3 D2) D9) D9
type O6343 = :* (:* (:* D3 D2) D9) D9
type HCE2 = :* (:* (:* D3 D2) D9) D8
type D3298 = :* (:* (:* D3 D2) D9) D8
type O6342 = :* (:* (:* D3 D2) D9) D8
type HCE1 = :* (:* (:* D3 D2) D9) D7
type D3297 = :* (:* (:* D3 D2) D9) D7
type O6341 = :* (:* (:* D3 D2) D9) D7
type HCE0 = :* (:* (:* D3 D2) D9) D6
type D3296 = :* (:* (:* D3 D2) D9) D6
type O6340 = :* (:* (:* D3 D2) D9) D6
type HCDF = :* (:* (:* D3 D2) D9) D5
type D3295 = :* (:* (:* D3 D2) D9) D5
type O6337 = :* (:* (:* D3 D2) D9) D5
type HCDE = :* (:* (:* D3 D2) D9) D4
type D3294 = :* (:* (:* D3 D2) D9) D4
type O6336 = :* (:* (:* D3 D2) D9) D4
type HCDD = :* (:* (:* D3 D2) D9) D3
type D3293 = :* (:* (:* D3 D2) D9) D3
type O6335 = :* (:* (:* D3 D2) D9) D3
type HCDC = :* (:* (:* D3 D2) D9) D2
type D3292 = :* (:* (:* D3 D2) D9) D2
type O6334 = :* (:* (:* D3 D2) D9) D2
type HCDB = :* (:* (:* D3 D2) D9) D1
type D3291 = :* (:* (:* D3 D2) D9) D1
type O6333 = :* (:* (:* D3 D2) D9) D1
type HCDA = :* (:* (:* D3 D2) D9) D0
type D3290 = :* (:* (:* D3 D2) D9) D0
type O6332 = :* (:* (:* D3 D2) D9) D0
type HCD9 = :* (:* (:* D3 D2) D8) D9
type D3289 = :* (:* (:* D3 D2) D8) D9
type O6331 = :* (:* (:* D3 D2) D8) D9
type HCD8 = :* (:* (:* D3 D2) D8) D8
type D3288 = :* (:* (:* D3 D2) D8) D8
type O6330 = :* (:* (:* D3 D2) D8) D8
type HCD7 = :* (:* (:* D3 D2) D8) D7
type D3287 = :* (:* (:* D3 D2) D8) D7
type O6327 = :* (:* (:* D3 D2) D8) D7
type HCD6 = :* (:* (:* D3 D2) D8) D6
type D3286 = :* (:* (:* D3 D2) D8) D6
type O6326 = :* (:* (:* D3 D2) D8) D6
type HCD5 = :* (:* (:* D3 D2) D8) D5
type D3285 = :* (:* (:* D3 D2) D8) D5
type O6325 = :* (:* (:* D3 D2) D8) D5
type HCD4 = :* (:* (:* D3 D2) D8) D4
type D3284 = :* (:* (:* D3 D2) D8) D4
type O6324 = :* (:* (:* D3 D2) D8) D4
type HCD3 = :* (:* (:* D3 D2) D8) D3
type D3283 = :* (:* (:* D3 D2) D8) D3
type O6323 = :* (:* (:* D3 D2) D8) D3
type HCD2 = :* (:* (:* D3 D2) D8) D2
type D3282 = :* (:* (:* D3 D2) D8) D2
type O6322 = :* (:* (:* D3 D2) D8) D2
type HCD1 = :* (:* (:* D3 D2) D8) D1
type D3281 = :* (:* (:* D3 D2) D8) D1
type O6321 = :* (:* (:* D3 D2) D8) D1
type HCD0 = :* (:* (:* D3 D2) D8) D0
type D3280 = :* (:* (:* D3 D2) D8) D0
type O6320 = :* (:* (:* D3 D2) D8) D0
type HCCF = :* (:* (:* D3 D2) D7) D9
type D3279 = :* (:* (:* D3 D2) D7) D9
type O6317 = :* (:* (:* D3 D2) D7) D9
type HCCE = :* (:* (:* D3 D2) D7) D8
type D3278 = :* (:* (:* D3 D2) D7) D8
type O6316 = :* (:* (:* D3 D2) D7) D8
type HCCD = :* (:* (:* D3 D2) D7) D7
type D3277 = :* (:* (:* D3 D2) D7) D7
type O6315 = :* (:* (:* D3 D2) D7) D7
type HCCC = :* (:* (:* D3 D2) D7) D6
type D3276 = :* (:* (:* D3 D2) D7) D6
type O6314 = :* (:* (:* D3 D2) D7) D6
type HCCB = :* (:* (:* D3 D2) D7) D5
type D3275 = :* (:* (:* D3 D2) D7) D5
type O6313 = :* (:* (:* D3 D2) D7) D5
type HCCA = :* (:* (:* D3 D2) D7) D4
type D3274 = :* (:* (:* D3 D2) D7) D4
type O6312 = :* (:* (:* D3 D2) D7) D4
type HCC9 = :* (:* (:* D3 D2) D7) D3
type D3273 = :* (:* (:* D3 D2) D7) D3
type O6311 = :* (:* (:* D3 D2) D7) D3
type HCC8 = :* (:* (:* D3 D2) D7) D2
type D3272 = :* (:* (:* D3 D2) D7) D2
type O6310 = :* (:* (:* D3 D2) D7) D2
type HCC7 = :* (:* (:* D3 D2) D7) D1
type D3271 = :* (:* (:* D3 D2) D7) D1
type O6307 = :* (:* (:* D3 D2) D7) D1
type HCC6 = :* (:* (:* D3 D2) D7) D0
type D3270 = :* (:* (:* D3 D2) D7) D0
type O6306 = :* (:* (:* D3 D2) D7) D0
type HCC5 = :* (:* (:* D3 D2) D6) D9
type D3269 = :* (:* (:* D3 D2) D6) D9
type O6305 = :* (:* (:* D3 D2) D6) D9
type HCC4 = :* (:* (:* D3 D2) D6) D8
type D3268 = :* (:* (:* D3 D2) D6) D8
type O6304 = :* (:* (:* D3 D2) D6) D8
type HCC3 = :* (:* (:* D3 D2) D6) D7
type D3267 = :* (:* (:* D3 D2) D6) D7
type O6303 = :* (:* (:* D3 D2) D6) D7
type HCC2 = :* (:* (:* D3 D2) D6) D6
type D3266 = :* (:* (:* D3 D2) D6) D6
type O6302 = :* (:* (:* D3 D2) D6) D6
type HCC1 = :* (:* (:* D3 D2) D6) D5
type D3265 = :* (:* (:* D3 D2) D6) D5
type O6301 = :* (:* (:* D3 D2) D6) D5
type HCC0 = :* (:* (:* D3 D2) D6) D4
type D3264 = :* (:* (:* D3 D2) D6) D4
type O6300 = :* (:* (:* D3 D2) D6) D4
type HCBF = :* (:* (:* D3 D2) D6) D3
type D3263 = :* (:* (:* D3 D2) D6) D3
type O6277 = :* (:* (:* D3 D2) D6) D3
type HCBE = :* (:* (:* D3 D2) D6) D2
type D3262 = :* (:* (:* D3 D2) D6) D2
type O6276 = :* (:* (:* D3 D2) D6) D2
type HCBD = :* (:* (:* D3 D2) D6) D1
type D3261 = :* (:* (:* D3 D2) D6) D1
type O6275 = :* (:* (:* D3 D2) D6) D1
type HCBC = :* (:* (:* D3 D2) D6) D0
type D3260 = :* (:* (:* D3 D2) D6) D0
type O6274 = :* (:* (:* D3 D2) D6) D0
type HCBB = :* (:* (:* D3 D2) D5) D9
type D3259 = :* (:* (:* D3 D2) D5) D9
type O6273 = :* (:* (:* D3 D2) D5) D9
type HCBA = :* (:* (:* D3 D2) D5) D8
type D3258 = :* (:* (:* D3 D2) D5) D8
type O6272 = :* (:* (:* D3 D2) D5) D8
type HCB9 = :* (:* (:* D3 D2) D5) D7
type D3257 = :* (:* (:* D3 D2) D5) D7
type O6271 = :* (:* (:* D3 D2) D5) D7
type HCB8 = :* (:* (:* D3 D2) D5) D6
type D3256 = :* (:* (:* D3 D2) D5) D6
type O6270 = :* (:* (:* D3 D2) D5) D6
type HCB7 = :* (:* (:* D3 D2) D5) D5
type D3255 = :* (:* (:* D3 D2) D5) D5
type O6267 = :* (:* (:* D3 D2) D5) D5
type HCB6 = :* (:* (:* D3 D2) D5) D4
type D3254 = :* (:* (:* D3 D2) D5) D4
type O6266 = :* (:* (:* D3 D2) D5) D4
type HCB5 = :* (:* (:* D3 D2) D5) D3
type D3253 = :* (:* (:* D3 D2) D5) D3
type O6265 = :* (:* (:* D3 D2) D5) D3
type HCB4 = :* (:* (:* D3 D2) D5) D2
type D3252 = :* (:* (:* D3 D2) D5) D2
type O6264 = :* (:* (:* D3 D2) D5) D2
type HCB3 = :* (:* (:* D3 D2) D5) D1
type D3251 = :* (:* (:* D3 D2) D5) D1
type O6263 = :* (:* (:* D3 D2) D5) D1
type HCB2 = :* (:* (:* D3 D2) D5) D0
type D3250 = :* (:* (:* D3 D2) D5) D0
type O6262 = :* (:* (:* D3 D2) D5) D0
type HCB1 = :* (:* (:* D3 D2) D4) D9
type D3249 = :* (:* (:* D3 D2) D4) D9
type O6261 = :* (:* (:* D3 D2) D4) D9
type HCB0 = :* (:* (:* D3 D2) D4) D8
type D3248 = :* (:* (:* D3 D2) D4) D8
type O6260 = :* (:* (:* D3 D2) D4) D8
type HCAF = :* (:* (:* D3 D2) D4) D7
type D3247 = :* (:* (:* D3 D2) D4) D7
type O6257 = :* (:* (:* D3 D2) D4) D7
type HCAE = :* (:* (:* D3 D2) D4) D6
type D3246 = :* (:* (:* D3 D2) D4) D6
type O6256 = :* (:* (:* D3 D2) D4) D6
type HCAD = :* (:* (:* D3 D2) D4) D5
type D3245 = :* (:* (:* D3 D2) D4) D5
type O6255 = :* (:* (:* D3 D2) D4) D5
type HCAC = :* (:* (:* D3 D2) D4) D4
type D3244 = :* (:* (:* D3 D2) D4) D4
type O6254 = :* (:* (:* D3 D2) D4) D4
type HCAB = :* (:* (:* D3 D2) D4) D3
type D3243 = :* (:* (:* D3 D2) D4) D3
type O6253 = :* (:* (:* D3 D2) D4) D3
type HCAA = :* (:* (:* D3 D2) D4) D2
type D3242 = :* (:* (:* D3 D2) D4) D2
type O6252 = :* (:* (:* D3 D2) D4) D2
type HCA9 = :* (:* (:* D3 D2) D4) D1
type D3241 = :* (:* (:* D3 D2) D4) D1
type O6251 = :* (:* (:* D3 D2) D4) D1
type HCA8 = :* (:* (:* D3 D2) D4) D0
type D3240 = :* (:* (:* D3 D2) D4) D0
type O6250 = :* (:* (:* D3 D2) D4) D0
type HCA7 = :* (:* (:* D3 D2) D3) D9
type D3239 = :* (:* (:* D3 D2) D3) D9
type O6247 = :* (:* (:* D3 D2) D3) D9
type HCA6 = :* (:* (:* D3 D2) D3) D8
type D3238 = :* (:* (:* D3 D2) D3) D8
type O6246 = :* (:* (:* D3 D2) D3) D8
type HCA5 = :* (:* (:* D3 D2) D3) D7
type D3237 = :* (:* (:* D3 D2) D3) D7
type O6245 = :* (:* (:* D3 D2) D3) D7
type HCA4 = :* (:* (:* D3 D2) D3) D6
type D3236 = :* (:* (:* D3 D2) D3) D6
type O6244 = :* (:* (:* D3 D2) D3) D6
type HCA3 = :* (:* (:* D3 D2) D3) D5
type D3235 = :* (:* (:* D3 D2) D3) D5
type O6243 = :* (:* (:* D3 D2) D3) D5
type HCA2 = :* (:* (:* D3 D2) D3) D4
type D3234 = :* (:* (:* D3 D2) D3) D4
type O6242 = :* (:* (:* D3 D2) D3) D4
type HCA1 = :* (:* (:* D3 D2) D3) D3
type D3233 = :* (:* (:* D3 D2) D3) D3
type O6241 = :* (:* (:* D3 D2) D3) D3
type HCA0 = :* (:* (:* D3 D2) D3) D2
type D3232 = :* (:* (:* D3 D2) D3) D2
type O6240 = :* (:* (:* D3 D2) D3) D2
type HC9F = :* (:* (:* D3 D2) D3) D1
type D3231 = :* (:* (:* D3 D2) D3) D1
type O6237 = :* (:* (:* D3 D2) D3) D1
type HC9E = :* (:* (:* D3 D2) D3) D0
type D3230 = :* (:* (:* D3 D2) D3) D0
type O6236 = :* (:* (:* D3 D2) D3) D0
type HC9D = :* (:* (:* D3 D2) D2) D9
type D3229 = :* (:* (:* D3 D2) D2) D9
type O6235 = :* (:* (:* D3 D2) D2) D9
type HC9C = :* (:* (:* D3 D2) D2) D8
type D3228 = :* (:* (:* D3 D2) D2) D8
type O6234 = :* (:* (:* D3 D2) D2) D8
type HC9B = :* (:* (:* D3 D2) D2) D7
type D3227 = :* (:* (:* D3 D2) D2) D7
type O6233 = :* (:* (:* D3 D2) D2) D7
type HC9A = :* (:* (:* D3 D2) D2) D6
type D3226 = :* (:* (:* D3 D2) D2) D6
type O6232 = :* (:* (:* D3 D2) D2) D6
type HC99 = :* (:* (:* D3 D2) D2) D5
type D3225 = :* (:* (:* D3 D2) D2) D5
type O6231 = :* (:* (:* D3 D2) D2) D5
type HC98 = :* (:* (:* D3 D2) D2) D4
type D3224 = :* (:* (:* D3 D2) D2) D4
type O6230 = :* (:* (:* D3 D2) D2) D4
type HC97 = :* (:* (:* D3 D2) D2) D3
type D3223 = :* (:* (:* D3 D2) D2) D3
type O6227 = :* (:* (:* D3 D2) D2) D3
type HC96 = :* (:* (:* D3 D2) D2) D2
type D3222 = :* (:* (:* D3 D2) D2) D2
type O6226 = :* (:* (:* D3 D2) D2) D2
type HC95 = :* (:* (:* D3 D2) D2) D1
type D3221 = :* (:* (:* D3 D2) D2) D1
type O6225 = :* (:* (:* D3 D2) D2) D1
type HC94 = :* (:* (:* D3 D2) D2) D0
type D3220 = :* (:* (:* D3 D2) D2) D0
type O6224 = :* (:* (:* D3 D2) D2) D0
type HC93 = :* (:* (:* D3 D2) D1) D9
type D3219 = :* (:* (:* D3 D2) D1) D9
type O6223 = :* (:* (:* D3 D2) D1) D9
type HC92 = :* (:* (:* D3 D2) D1) D8
type D3218 = :* (:* (:* D3 D2) D1) D8
type O6222 = :* (:* (:* D3 D2) D1) D8
type HC91 = :* (:* (:* D3 D2) D1) D7
type D3217 = :* (:* (:* D3 D2) D1) D7
type O6221 = :* (:* (:* D3 D2) D1) D7
type HC90 = :* (:* (:* D3 D2) D1) D6
type D3216 = :* (:* (:* D3 D2) D1) D6
type O6220 = :* (:* (:* D3 D2) D1) D6
type HC8F = :* (:* (:* D3 D2) D1) D5
type D3215 = :* (:* (:* D3 D2) D1) D5
type O6217 = :* (:* (:* D3 D2) D1) D5
type HC8E = :* (:* (:* D3 D2) D1) D4
type D3214 = :* (:* (:* D3 D2) D1) D4
type O6216 = :* (:* (:* D3 D2) D1) D4
type HC8D = :* (:* (:* D3 D2) D1) D3
type D3213 = :* (:* (:* D3 D2) D1) D3
type O6215 = :* (:* (:* D3 D2) D1) D3
type HC8C = :* (:* (:* D3 D2) D1) D2
type D3212 = :* (:* (:* D3 D2) D1) D2
type O6214 = :* (:* (:* D3 D2) D1) D2
type HC8B = :* (:* (:* D3 D2) D1) D1
type D3211 = :* (:* (:* D3 D2) D1) D1
type O6213 = :* (:* (:* D3 D2) D1) D1
type HC8A = :* (:* (:* D3 D2) D1) D0
type D3210 = :* (:* (:* D3 D2) D1) D0
type O6212 = :* (:* (:* D3 D2) D1) D0
type HC89 = :* (:* (:* D3 D2) D0) D9
type D3209 = :* (:* (:* D3 D2) D0) D9
type O6211 = :* (:* (:* D3 D2) D0) D9
type HC88 = :* (:* (:* D3 D2) D0) D8
type D3208 = :* (:* (:* D3 D2) D0) D8
type O6210 = :* (:* (:* D3 D2) D0) D8
type HC87 = :* (:* (:* D3 D2) D0) D7
type D3207 = :* (:* (:* D3 D2) D0) D7
type O6207 = :* (:* (:* D3 D2) D0) D7
type HC86 = :* (:* (:* D3 D2) D0) D6
type D3206 = :* (:* (:* D3 D2) D0) D6
type O6206 = :* (:* (:* D3 D2) D0) D6
type HC85 = :* (:* (:* D3 D2) D0) D5
type D3205 = :* (:* (:* D3 D2) D0) D5
type O6205 = :* (:* (:* D3 D2) D0) D5
type HC84 = :* (:* (:* D3 D2) D0) D4
type D3204 = :* (:* (:* D3 D2) D0) D4
type O6204 = :* (:* (:* D3 D2) D0) D4
type HC83 = :* (:* (:* D3 D2) D0) D3
type D3203 = :* (:* (:* D3 D2) D0) D3
type O6203 = :* (:* (:* D3 D2) D0) D3
type HC82 = :* (:* (:* D3 D2) D0) D2
type D3202 = :* (:* (:* D3 D2) D0) D2
type O6202 = :* (:* (:* D3 D2) D0) D2
type HC81 = :* (:* (:* D3 D2) D0) D1
type D3201 = :* (:* (:* D3 D2) D0) D1
type O6201 = :* (:* (:* D3 D2) D0) D1
type HC80 = :* (:* (:* D3 D2) D0) D0
type D3200 = :* (:* (:* D3 D2) D0) D0
type O6200 = :* (:* (:* D3 D2) D0) D0
type HC7F = :* (:* (:* D3 D1) D9) D9
type D3199 = :* (:* (:* D3 D1) D9) D9
type O6177 = :* (:* (:* D3 D1) D9) D9
type HC7E = :* (:* (:* D3 D1) D9) D8
type D3198 = :* (:* (:* D3 D1) D9) D8
type O6176 = :* (:* (:* D3 D1) D9) D8
type HC7D = :* (:* (:* D3 D1) D9) D7
type D3197 = :* (:* (:* D3 D1) D9) D7
type O6175 = :* (:* (:* D3 D1) D9) D7
type HC7C = :* (:* (:* D3 D1) D9) D6
type D3196 = :* (:* (:* D3 D1) D9) D6
type O6174 = :* (:* (:* D3 D1) D9) D6
type HC7B = :* (:* (:* D3 D1) D9) D5
type D3195 = :* (:* (:* D3 D1) D9) D5
type O6173 = :* (:* (:* D3 D1) D9) D5
type HC7A = :* (:* (:* D3 D1) D9) D4
type D3194 = :* (:* (:* D3 D1) D9) D4
type O6172 = :* (:* (:* D3 D1) D9) D4
type HC79 = :* (:* (:* D3 D1) D9) D3
type D3193 = :* (:* (:* D3 D1) D9) D3
type O6171 = :* (:* (:* D3 D1) D9) D3
type HC78 = :* (:* (:* D3 D1) D9) D2
type D3192 = :* (:* (:* D3 D1) D9) D2
type O6170 = :* (:* (:* D3 D1) D9) D2
type HC77 = :* (:* (:* D3 D1) D9) D1
type D3191 = :* (:* (:* D3 D1) D9) D1
type O6167 = :* (:* (:* D3 D1) D9) D1
type HC76 = :* (:* (:* D3 D1) D9) D0
type D3190 = :* (:* (:* D3 D1) D9) D0
type O6166 = :* (:* (:* D3 D1) D9) D0
type HC75 = :* (:* (:* D3 D1) D8) D9
type D3189 = :* (:* (:* D3 D1) D8) D9
type O6165 = :* (:* (:* D3 D1) D8) D9
type HC74 = :* (:* (:* D3 D1) D8) D8
type D3188 = :* (:* (:* D3 D1) D8) D8
type O6164 = :* (:* (:* D3 D1) D8) D8
type HC73 = :* (:* (:* D3 D1) D8) D7
type D3187 = :* (:* (:* D3 D1) D8) D7
type O6163 = :* (:* (:* D3 D1) D8) D7
type HC72 = :* (:* (:* D3 D1) D8) D6
type D3186 = :* (:* (:* D3 D1) D8) D6
type O6162 = :* (:* (:* D3 D1) D8) D6
type HC71 = :* (:* (:* D3 D1) D8) D5
type D3185 = :* (:* (:* D3 D1) D8) D5
type O6161 = :* (:* (:* D3 D1) D8) D5
type HC70 = :* (:* (:* D3 D1) D8) D4
type D3184 = :* (:* (:* D3 D1) D8) D4
type O6160 = :* (:* (:* D3 D1) D8) D4
type HC6F = :* (:* (:* D3 D1) D8) D3
type D3183 = :* (:* (:* D3 D1) D8) D3
type O6157 = :* (:* (:* D3 D1) D8) D3
type HC6E = :* (:* (:* D3 D1) D8) D2
type D3182 = :* (:* (:* D3 D1) D8) D2
type O6156 = :* (:* (:* D3 D1) D8) D2
type HC6D = :* (:* (:* D3 D1) D8) D1
type D3181 = :* (:* (:* D3 D1) D8) D1
type O6155 = :* (:* (:* D3 D1) D8) D1
type HC6C = :* (:* (:* D3 D1) D8) D0
type D3180 = :* (:* (:* D3 D1) D8) D0
type O6154 = :* (:* (:* D3 D1) D8) D0
type HC6B = :* (:* (:* D3 D1) D7) D9
type D3179 = :* (:* (:* D3 D1) D7) D9
type O6153 = :* (:* (:* D3 D1) D7) D9
type HC6A = :* (:* (:* D3 D1) D7) D8
type D3178 = :* (:* (:* D3 D1) D7) D8
type O6152 = :* (:* (:* D3 D1) D7) D8
type HC69 = :* (:* (:* D3 D1) D7) D7
type D3177 = :* (:* (:* D3 D1) D7) D7
type O6151 = :* (:* (:* D3 D1) D7) D7
type HC68 = :* (:* (:* D3 D1) D7) D6
type D3176 = :* (:* (:* D3 D1) D7) D6
type O6150 = :* (:* (:* D3 D1) D7) D6
type HC67 = :* (:* (:* D3 D1) D7) D5
type D3175 = :* (:* (:* D3 D1) D7) D5
type O6147 = :* (:* (:* D3 D1) D7) D5
type HC66 = :* (:* (:* D3 D1) D7) D4
type D3174 = :* (:* (:* D3 D1) D7) D4
type O6146 = :* (:* (:* D3 D1) D7) D4
type HC65 = :* (:* (:* D3 D1) D7) D3
type D3173 = :* (:* (:* D3 D1) D7) D3
type O6145 = :* (:* (:* D3 D1) D7) D3
type HC64 = :* (:* (:* D3 D1) D7) D2
type D3172 = :* (:* (:* D3 D1) D7) D2
type O6144 = :* (:* (:* D3 D1) D7) D2
type HC63 = :* (:* (:* D3 D1) D7) D1
type D3171 = :* (:* (:* D3 D1) D7) D1
type O6143 = :* (:* (:* D3 D1) D7) D1
type HC62 = :* (:* (:* D3 D1) D7) D0
type D3170 = :* (:* (:* D3 D1) D7) D0
type O6142 = :* (:* (:* D3 D1) D7) D0
type HC61 = :* (:* (:* D3 D1) D6) D9
type D3169 = :* (:* (:* D3 D1) D6) D9
type O6141 = :* (:* (:* D3 D1) D6) D9
type HC60 = :* (:* (:* D3 D1) D6) D8
type D3168 = :* (:* (:* D3 D1) D6) D8
type O6140 = :* (:* (:* D3 D1) D6) D8
type HC5F = :* (:* (:* D3 D1) D6) D7
type D3167 = :* (:* (:* D3 D1) D6) D7
type O6137 = :* (:* (:* D3 D1) D6) D7
type HC5E = :* (:* (:* D3 D1) D6) D6
type D3166 = :* (:* (:* D3 D1) D6) D6
type O6136 = :* (:* (:* D3 D1) D6) D6
type HC5D = :* (:* (:* D3 D1) D6) D5
type D3165 = :* (:* (:* D3 D1) D6) D5
type O6135 = :* (:* (:* D3 D1) D6) D5
type HC5C = :* (:* (:* D3 D1) D6) D4
type D3164 = :* (:* (:* D3 D1) D6) D4
type O6134 = :* (:* (:* D3 D1) D6) D4
type HC5B = :* (:* (:* D3 D1) D6) D3
type D3163 = :* (:* (:* D3 D1) D6) D3
type O6133 = :* (:* (:* D3 D1) D6) D3
type HC5A = :* (:* (:* D3 D1) D6) D2
type D3162 = :* (:* (:* D3 D1) D6) D2
type O6132 = :* (:* (:* D3 D1) D6) D2
type HC59 = :* (:* (:* D3 D1) D6) D1
type D3161 = :* (:* (:* D3 D1) D6) D1
type O6131 = :* (:* (:* D3 D1) D6) D1
type HC58 = :* (:* (:* D3 D1) D6) D0
type D3160 = :* (:* (:* D3 D1) D6) D0
type O6130 = :* (:* (:* D3 D1) D6) D0
type HC57 = :* (:* (:* D3 D1) D5) D9
type D3159 = :* (:* (:* D3 D1) D5) D9
type O6127 = :* (:* (:* D3 D1) D5) D9
type HC56 = :* (:* (:* D3 D1) D5) D8
type D3158 = :* (:* (:* D3 D1) D5) D8
type O6126 = :* (:* (:* D3 D1) D5) D8
type HC55 = :* (:* (:* D3 D1) D5) D7
type D3157 = :* (:* (:* D3 D1) D5) D7
type O6125 = :* (:* (:* D3 D1) D5) D7
type HC54 = :* (:* (:* D3 D1) D5) D6
type D3156 = :* (:* (:* D3 D1) D5) D6
type O6124 = :* (:* (:* D3 D1) D5) D6
type HC53 = :* (:* (:* D3 D1) D5) D5
type D3155 = :* (:* (:* D3 D1) D5) D5
type O6123 = :* (:* (:* D3 D1) D5) D5
type HC52 = :* (:* (:* D3 D1) D5) D4
type D3154 = :* (:* (:* D3 D1) D5) D4
type O6122 = :* (:* (:* D3 D1) D5) D4
type HC51 = :* (:* (:* D3 D1) D5) D3
type D3153 = :* (:* (:* D3 D1) D5) D3
type O6121 = :* (:* (:* D3 D1) D5) D3
type HC50 = :* (:* (:* D3 D1) D5) D2
type D3152 = :* (:* (:* D3 D1) D5) D2
type O6120 = :* (:* (:* D3 D1) D5) D2
type HC4F = :* (:* (:* D3 D1) D5) D1
type D3151 = :* (:* (:* D3 D1) D5) D1
type O6117 = :* (:* (:* D3 D1) D5) D1
type HC4E = :* (:* (:* D3 D1) D5) D0
type D3150 = :* (:* (:* D3 D1) D5) D0
type O6116 = :* (:* (:* D3 D1) D5) D0
type HC4D = :* (:* (:* D3 D1) D4) D9
type D3149 = :* (:* (:* D3 D1) D4) D9
type O6115 = :* (:* (:* D3 D1) D4) D9
type HC4C = :* (:* (:* D3 D1) D4) D8
type D3148 = :* (:* (:* D3 D1) D4) D8
type O6114 = :* (:* (:* D3 D1) D4) D8
type HC4B = :* (:* (:* D3 D1) D4) D7
type D3147 = :* (:* (:* D3 D1) D4) D7
type O6113 = :* (:* (:* D3 D1) D4) D7
type HC4A = :* (:* (:* D3 D1) D4) D6
type D3146 = :* (:* (:* D3 D1) D4) D6
type O6112 = :* (:* (:* D3 D1) D4) D6
type HC49 = :* (:* (:* D3 D1) D4) D5
type D3145 = :* (:* (:* D3 D1) D4) D5
type O6111 = :* (:* (:* D3 D1) D4) D5
type HC48 = :* (:* (:* D3 D1) D4) D4
type D3144 = :* (:* (:* D3 D1) D4) D4
type O6110 = :* (:* (:* D3 D1) D4) D4
type HC47 = :* (:* (:* D3 D1) D4) D3
type D3143 = :* (:* (:* D3 D1) D4) D3
type O6107 = :* (:* (:* D3 D1) D4) D3
type HC46 = :* (:* (:* D3 D1) D4) D2
type D3142 = :* (:* (:* D3 D1) D4) D2
type O6106 = :* (:* (:* D3 D1) D4) D2
type HC45 = :* (:* (:* D3 D1) D4) D1
type D3141 = :* (:* (:* D3 D1) D4) D1
type O6105 = :* (:* (:* D3 D1) D4) D1
type HC44 = :* (:* (:* D3 D1) D4) D0
type D3140 = :* (:* (:* D3 D1) D4) D0
type O6104 = :* (:* (:* D3 D1) D4) D0
type HC43 = :* (:* (:* D3 D1) D3) D9
type D3139 = :* (:* (:* D3 D1) D3) D9
type O6103 = :* (:* (:* D3 D1) D3) D9
type HC42 = :* (:* (:* D3 D1) D3) D8
type D3138 = :* (:* (:* D3 D1) D3) D8
type O6102 = :* (:* (:* D3 D1) D3) D8
type HC41 = :* (:* (:* D3 D1) D3) D7
type D3137 = :* (:* (:* D3 D1) D3) D7
type O6101 = :* (:* (:* D3 D1) D3) D7
type HC40 = :* (:* (:* D3 D1) D3) D6
type D3136 = :* (:* (:* D3 D1) D3) D6
type O6100 = :* (:* (:* D3 D1) D3) D6
type HC3F = :* (:* (:* D3 D1) D3) D5
type D3135 = :* (:* (:* D3 D1) D3) D5
type O6077 = :* (:* (:* D3 D1) D3) D5
type HC3E = :* (:* (:* D3 D1) D3) D4
type D3134 = :* (:* (:* D3 D1) D3) D4
type O6076 = :* (:* (:* D3 D1) D3) D4
type HC3D = :* (:* (:* D3 D1) D3) D3
type D3133 = :* (:* (:* D3 D1) D3) D3
type O6075 = :* (:* (:* D3 D1) D3) D3
type HC3C = :* (:* (:* D3 D1) D3) D2
type D3132 = :* (:* (:* D3 D1) D3) D2
type O6074 = :* (:* (:* D3 D1) D3) D2
type HC3B = :* (:* (:* D3 D1) D3) D1
type D3131 = :* (:* (:* D3 D1) D3) D1
type O6073 = :* (:* (:* D3 D1) D3) D1
type HC3A = :* (:* (:* D3 D1) D3) D0
type D3130 = :* (:* (:* D3 D1) D3) D0
type O6072 = :* (:* (:* D3 D1) D3) D0
type HC39 = :* (:* (:* D3 D1) D2) D9
type D3129 = :* (:* (:* D3 D1) D2) D9
type O6071 = :* (:* (:* D3 D1) D2) D9
type HC38 = :* (:* (:* D3 D1) D2) D8
type D3128 = :* (:* (:* D3 D1) D2) D8
type O6070 = :* (:* (:* D3 D1) D2) D8
type HC37 = :* (:* (:* D3 D1) D2) D7
type D3127 = :* (:* (:* D3 D1) D2) D7
type O6067 = :* (:* (:* D3 D1) D2) D7
type HC36 = :* (:* (:* D3 D1) D2) D6
type D3126 = :* (:* (:* D3 D1) D2) D6
type O6066 = :* (:* (:* D3 D1) D2) D6
type HC35 = :* (:* (:* D3 D1) D2) D5
type D3125 = :* (:* (:* D3 D1) D2) D5
type O6065 = :* (:* (:* D3 D1) D2) D5
type HC34 = :* (:* (:* D3 D1) D2) D4
type D3124 = :* (:* (:* D3 D1) D2) D4
type O6064 = :* (:* (:* D3 D1) D2) D4
type HC33 = :* (:* (:* D3 D1) D2) D3
type D3123 = :* (:* (:* D3 D1) D2) D3
type O6063 = :* (:* (:* D3 D1) D2) D3
type HC32 = :* (:* (:* D3 D1) D2) D2
type D3122 = :* (:* (:* D3 D1) D2) D2
type O6062 = :* (:* (:* D3 D1) D2) D2
type HC31 = :* (:* (:* D3 D1) D2) D1
type D3121 = :* (:* (:* D3 D1) D2) D1
type O6061 = :* (:* (:* D3 D1) D2) D1
type HC30 = :* (:* (:* D3 D1) D2) D0
type D3120 = :* (:* (:* D3 D1) D2) D0
type O6060 = :* (:* (:* D3 D1) D2) D0
type HC2F = :* (:* (:* D3 D1) D1) D9
type D3119 = :* (:* (:* D3 D1) D1) D9
type O6057 = :* (:* (:* D3 D1) D1) D9
type HC2E = :* (:* (:* D3 D1) D1) D8
type D3118 = :* (:* (:* D3 D1) D1) D8
type O6056 = :* (:* (:* D3 D1) D1) D8
type HC2D = :* (:* (:* D3 D1) D1) D7
type D3117 = :* (:* (:* D3 D1) D1) D7
type O6055 = :* (:* (:* D3 D1) D1) D7
type HC2C = :* (:* (:* D3 D1) D1) D6
type D3116 = :* (:* (:* D3 D1) D1) D6
type O6054 = :* (:* (:* D3 D1) D1) D6
type HC2B = :* (:* (:* D3 D1) D1) D5
type D3115 = :* (:* (:* D3 D1) D1) D5
type O6053 = :* (:* (:* D3 D1) D1) D5
type HC2A = :* (:* (:* D3 D1) D1) D4
type D3114 = :* (:* (:* D3 D1) D1) D4
type O6052 = :* (:* (:* D3 D1) D1) D4
type HC29 = :* (:* (:* D3 D1) D1) D3
type D3113 = :* (:* (:* D3 D1) D1) D3
type O6051 = :* (:* (:* D3 D1) D1) D3
type HC28 = :* (:* (:* D3 D1) D1) D2
type D3112 = :* (:* (:* D3 D1) D1) D2
type O6050 = :* (:* (:* D3 D1) D1) D2
type HC27 = :* (:* (:* D3 D1) D1) D1
type D3111 = :* (:* (:* D3 D1) D1) D1
type O6047 = :* (:* (:* D3 D1) D1) D1
type HC26 = :* (:* (:* D3 D1) D1) D0
type D3110 = :* (:* (:* D3 D1) D1) D0
type O6046 = :* (:* (:* D3 D1) D1) D0
type HC25 = :* (:* (:* D3 D1) D0) D9
type D3109 = :* (:* (:* D3 D1) D0) D9
type O6045 = :* (:* (:* D3 D1) D0) D9
type HC24 = :* (:* (:* D3 D1) D0) D8
type D3108 = :* (:* (:* D3 D1) D0) D8
type O6044 = :* (:* (:* D3 D1) D0) D8
type HC23 = :* (:* (:* D3 D1) D0) D7
type D3107 = :* (:* (:* D3 D1) D0) D7
type O6043 = :* (:* (:* D3 D1) D0) D7
type HC22 = :* (:* (:* D3 D1) D0) D6
type D3106 = :* (:* (:* D3 D1) D0) D6
type O6042 = :* (:* (:* D3 D1) D0) D6
type HC21 = :* (:* (:* D3 D1) D0) D5
type D3105 = :* (:* (:* D3 D1) D0) D5
type O6041 = :* (:* (:* D3 D1) D0) D5
type HC20 = :* (:* (:* D3 D1) D0) D4
type D3104 = :* (:* (:* D3 D1) D0) D4
type O6040 = :* (:* (:* D3 D1) D0) D4
type HC1F = :* (:* (:* D3 D1) D0) D3
type D3103 = :* (:* (:* D3 D1) D0) D3
type O6037 = :* (:* (:* D3 D1) D0) D3
type HC1E = :* (:* (:* D3 D1) D0) D2
type D3102 = :* (:* (:* D3 D1) D0) D2
type O6036 = :* (:* (:* D3 D1) D0) D2
type HC1D = :* (:* (:* D3 D1) D0) D1
type D3101 = :* (:* (:* D3 D1) D0) D1
type O6035 = :* (:* (:* D3 D1) D0) D1
type HC1C = :* (:* (:* D3 D1) D0) D0
type D3100 = :* (:* (:* D3 D1) D0) D0
type O6034 = :* (:* (:* D3 D1) D0) D0
type HC1B = :* (:* (:* D3 D0) D9) D9
type D3099 = :* (:* (:* D3 D0) D9) D9
type O6033 = :* (:* (:* D3 D0) D9) D9
type HC1A = :* (:* (:* D3 D0) D9) D8
type D3098 = :* (:* (:* D3 D0) D9) D8
type O6032 = :* (:* (:* D3 D0) D9) D8
type HC19 = :* (:* (:* D3 D0) D9) D7
type D3097 = :* (:* (:* D3 D0) D9) D7
type O6031 = :* (:* (:* D3 D0) D9) D7
type HC18 = :* (:* (:* D3 D0) D9) D6
type D3096 = :* (:* (:* D3 D0) D9) D6
type O6030 = :* (:* (:* D3 D0) D9) D6
type HC17 = :* (:* (:* D3 D0) D9) D5
type D3095 = :* (:* (:* D3 D0) D9) D5
type O6027 = :* (:* (:* D3 D0) D9) D5
type HC16 = :* (:* (:* D3 D0) D9) D4
type D3094 = :* (:* (:* D3 D0) D9) D4
type O6026 = :* (:* (:* D3 D0) D9) D4
type HC15 = :* (:* (:* D3 D0) D9) D3
type D3093 = :* (:* (:* D3 D0) D9) D3
type O6025 = :* (:* (:* D3 D0) D9) D3
type HC14 = :* (:* (:* D3 D0) D9) D2
type D3092 = :* (:* (:* D3 D0) D9) D2
type O6024 = :* (:* (:* D3 D0) D9) D2
type HC13 = :* (:* (:* D3 D0) D9) D1
type D3091 = :* (:* (:* D3 D0) D9) D1
type O6023 = :* (:* (:* D3 D0) D9) D1
type HC12 = :* (:* (:* D3 D0) D9) D0
type D3090 = :* (:* (:* D3 D0) D9) D0
type O6022 = :* (:* (:* D3 D0) D9) D0
type HC11 = :* (:* (:* D3 D0) D8) D9
type D3089 = :* (:* (:* D3 D0) D8) D9
type O6021 = :* (:* (:* D3 D0) D8) D9
type HC10 = :* (:* (:* D3 D0) D8) D8
type D3088 = :* (:* (:* D3 D0) D8) D8
type O6020 = :* (:* (:* D3 D0) D8) D8
type HC0F = :* (:* (:* D3 D0) D8) D7
type D3087 = :* (:* (:* D3 D0) D8) D7
type O6017 = :* (:* (:* D3 D0) D8) D7
type HC0E = :* (:* (:* D3 D0) D8) D6
type D3086 = :* (:* (:* D3 D0) D8) D6
type O6016 = :* (:* (:* D3 D0) D8) D6
type HC0D = :* (:* (:* D3 D0) D8) D5
type D3085 = :* (:* (:* D3 D0) D8) D5
type O6015 = :* (:* (:* D3 D0) D8) D5
type HC0C = :* (:* (:* D3 D0) D8) D4
type D3084 = :* (:* (:* D3 D0) D8) D4
type O6014 = :* (:* (:* D3 D0) D8) D4
type HC0B = :* (:* (:* D3 D0) D8) D3
type D3083 = :* (:* (:* D3 D0) D8) D3
type O6013 = :* (:* (:* D3 D0) D8) D3
type HC0A = :* (:* (:* D3 D0) D8) D2
type D3082 = :* (:* (:* D3 D0) D8) D2
type O6012 = :* (:* (:* D3 D0) D8) D2
type HC09 = :* (:* (:* D3 D0) D8) D1
type D3081 = :* (:* (:* D3 D0) D8) D1
type O6011 = :* (:* (:* D3 D0) D8) D1
type HC08 = :* (:* (:* D3 D0) D8) D0
type D3080 = :* (:* (:* D3 D0) D8) D0
type O6010 = :* (:* (:* D3 D0) D8) D0
type HC07 = :* (:* (:* D3 D0) D7) D9
type D3079 = :* (:* (:* D3 D0) D7) D9
type O6007 = :* (:* (:* D3 D0) D7) D9
type HC06 = :* (:* (:* D3 D0) D7) D8
type D3078 = :* (:* (:* D3 D0) D7) D8
type O6006 = :* (:* (:* D3 D0) D7) D8
type HC05 = :* (:* (:* D3 D0) D7) D7
type D3077 = :* (:* (:* D3 D0) D7) D7
type O6005 = :* (:* (:* D3 D0) D7) D7
type HC04 = :* (:* (:* D3 D0) D7) D6
type D3076 = :* (:* (:* D3 D0) D7) D6
type O6004 = :* (:* (:* D3 D0) D7) D6
type HC03 = :* (:* (:* D3 D0) D7) D5
type D3075 = :* (:* (:* D3 D0) D7) D5
type O6003 = :* (:* (:* D3 D0) D7) D5
type HC02 = :* (:* (:* D3 D0) D7) D4
type D3074 = :* (:* (:* D3 D0) D7) D4
type O6002 = :* (:* (:* D3 D0) D7) D4
type HC01 = :* (:* (:* D3 D0) D7) D3
type D3073 = :* (:* (:* D3 D0) D7) D3
type O6001 = :* (:* (:* D3 D0) D7) D3
type HC00 = :* (:* (:* D3 D0) D7) D2
type D3072 = :* (:* (:* D3 D0) D7) D2
type O6000 = :* (:* (:* D3 D0) D7) D2
type HBFF = :* (:* (:* D3 D0) D7) D1
type D3071 = :* (:* (:* D3 D0) D7) D1
type O5777 = :* (:* (:* D3 D0) D7) D1
type HBFE = :* (:* (:* D3 D0) D7) D0
type D3070 = :* (:* (:* D3 D0) D7) D0
type O5776 = :* (:* (:* D3 D0) D7) D0
type HBFD = :* (:* (:* D3 D0) D6) D9
type D3069 = :* (:* (:* D3 D0) D6) D9
type O5775 = :* (:* (:* D3 D0) D6) D9
type HBFC = :* (:* (:* D3 D0) D6) D8
type D3068 = :* (:* (:* D3 D0) D6) D8
type O5774 = :* (:* (:* D3 D0) D6) D8
type HBFB = :* (:* (:* D3 D0) D6) D7
type D3067 = :* (:* (:* D3 D0) D6) D7
type O5773 = :* (:* (:* D3 D0) D6) D7
type HBFA = :* (:* (:* D3 D0) D6) D6
type D3066 = :* (:* (:* D3 D0) D6) D6
type O5772 = :* (:* (:* D3 D0) D6) D6
type HBF9 = :* (:* (:* D3 D0) D6) D5
type D3065 = :* (:* (:* D3 D0) D6) D5
type O5771 = :* (:* (:* D3 D0) D6) D5
type HBF8 = :* (:* (:* D3 D0) D6) D4
type D3064 = :* (:* (:* D3 D0) D6) D4
type O5770 = :* (:* (:* D3 D0) D6) D4
type HBF7 = :* (:* (:* D3 D0) D6) D3
type D3063 = :* (:* (:* D3 D0) D6) D3
type O5767 = :* (:* (:* D3 D0) D6) D3
type HBF6 = :* (:* (:* D3 D0) D6) D2
type D3062 = :* (:* (:* D3 D0) D6) D2
type O5766 = :* (:* (:* D3 D0) D6) D2
type HBF5 = :* (:* (:* D3 D0) D6) D1
type D3061 = :* (:* (:* D3 D0) D6) D1
type O5765 = :* (:* (:* D3 D0) D6) D1
type HBF4 = :* (:* (:* D3 D0) D6) D0
type D3060 = :* (:* (:* D3 D0) D6) D0
type O5764 = :* (:* (:* D3 D0) D6) D0
type HBF3 = :* (:* (:* D3 D0) D5) D9
type D3059 = :* (:* (:* D3 D0) D5) D9
type O5763 = :* (:* (:* D3 D0) D5) D9
type HBF2 = :* (:* (:* D3 D0) D5) D8
type D3058 = :* (:* (:* D3 D0) D5) D8
type O5762 = :* (:* (:* D3 D0) D5) D8
type HBF1 = :* (:* (:* D3 D0) D5) D7
type D3057 = :* (:* (:* D3 D0) D5) D7
type O5761 = :* (:* (:* D3 D0) D5) D7
type HBF0 = :* (:* (:* D3 D0) D5) D6
type D3056 = :* (:* (:* D3 D0) D5) D6
type O5760 = :* (:* (:* D3 D0) D5) D6
type HBEF = :* (:* (:* D3 D0) D5) D5
type D3055 = :* (:* (:* D3 D0) D5) D5
type O5757 = :* (:* (:* D3 D0) D5) D5
type HBEE = :* (:* (:* D3 D0) D5) D4
type D3054 = :* (:* (:* D3 D0) D5) D4
type O5756 = :* (:* (:* D3 D0) D5) D4
type HBED = :* (:* (:* D3 D0) D5) D3
type D3053 = :* (:* (:* D3 D0) D5) D3
type O5755 = :* (:* (:* D3 D0) D5) D3
type HBEC = :* (:* (:* D3 D0) D5) D2
type D3052 = :* (:* (:* D3 D0) D5) D2
type O5754 = :* (:* (:* D3 D0) D5) D2
type HBEB = :* (:* (:* D3 D0) D5) D1
type D3051 = :* (:* (:* D3 D0) D5) D1
type O5753 = :* (:* (:* D3 D0) D5) D1
type HBEA = :* (:* (:* D3 D0) D5) D0
type D3050 = :* (:* (:* D3 D0) D5) D0
type O5752 = :* (:* (:* D3 D0) D5) D0
type HBE9 = :* (:* (:* D3 D0) D4) D9
type D3049 = :* (:* (:* D3 D0) D4) D9
type O5751 = :* (:* (:* D3 D0) D4) D9
type HBE8 = :* (:* (:* D3 D0) D4) D8
type D3048 = :* (:* (:* D3 D0) D4) D8
type O5750 = :* (:* (:* D3 D0) D4) D8
type HBE7 = :* (:* (:* D3 D0) D4) D7
type D3047 = :* (:* (:* D3 D0) D4) D7
type O5747 = :* (:* (:* D3 D0) D4) D7
type HBE6 = :* (:* (:* D3 D0) D4) D6
type D3046 = :* (:* (:* D3 D0) D4) D6
type O5746 = :* (:* (:* D3 D0) D4) D6
type HBE5 = :* (:* (:* D3 D0) D4) D5
type D3045 = :* (:* (:* D3 D0) D4) D5
type O5745 = :* (:* (:* D3 D0) D4) D5
type HBE4 = :* (:* (:* D3 D0) D4) D4
type D3044 = :* (:* (:* D3 D0) D4) D4
type O5744 = :* (:* (:* D3 D0) D4) D4
type HBE3 = :* (:* (:* D3 D0) D4) D3
type D3043 = :* (:* (:* D3 D0) D4) D3
type O5743 = :* (:* (:* D3 D0) D4) D3
type HBE2 = :* (:* (:* D3 D0) D4) D2
type D3042 = :* (:* (:* D3 D0) D4) D2
type O5742 = :* (:* (:* D3 D0) D4) D2
type HBE1 = :* (:* (:* D3 D0) D4) D1
type D3041 = :* (:* (:* D3 D0) D4) D1
type O5741 = :* (:* (:* D3 D0) D4) D1
type HBE0 = :* (:* (:* D3 D0) D4) D0
type D3040 = :* (:* (:* D3 D0) D4) D0
type O5740 = :* (:* (:* D3 D0) D4) D0
type HBDF = :* (:* (:* D3 D0) D3) D9
type D3039 = :* (:* (:* D3 D0) D3) D9
type O5737 = :* (:* (:* D3 D0) D3) D9
type HBDE = :* (:* (:* D3 D0) D3) D8
type D3038 = :* (:* (:* D3 D0) D3) D8
type O5736 = :* (:* (:* D3 D0) D3) D8
type HBDD = :* (:* (:* D3 D0) D3) D7
type D3037 = :* (:* (:* D3 D0) D3) D7
type O5735 = :* (:* (:* D3 D0) D3) D7
type HBDC = :* (:* (:* D3 D0) D3) D6
type D3036 = :* (:* (:* D3 D0) D3) D6
type O5734 = :* (:* (:* D3 D0) D3) D6
type HBDB = :* (:* (:* D3 D0) D3) D5
type D3035 = :* (:* (:* D3 D0) D3) D5
type O5733 = :* (:* (:* D3 D0) D3) D5
type HBDA = :* (:* (:* D3 D0) D3) D4
type D3034 = :* (:* (:* D3 D0) D3) D4
type O5732 = :* (:* (:* D3 D0) D3) D4
type HBD9 = :* (:* (:* D3 D0) D3) D3
type D3033 = :* (:* (:* D3 D0) D3) D3
type O5731 = :* (:* (:* D3 D0) D3) D3
type HBD8 = :* (:* (:* D3 D0) D3) D2
type D3032 = :* (:* (:* D3 D0) D3) D2
type O5730 = :* (:* (:* D3 D0) D3) D2
type HBD7 = :* (:* (:* D3 D0) D3) D1
type D3031 = :* (:* (:* D3 D0) D3) D1
type O5727 = :* (:* (:* D3 D0) D3) D1
type HBD6 = :* (:* (:* D3 D0) D3) D0
type D3030 = :* (:* (:* D3 D0) D3) D0
type O5726 = :* (:* (:* D3 D0) D3) D0
type HBD5 = :* (:* (:* D3 D0) D2) D9
type D3029 = :* (:* (:* D3 D0) D2) D9
type O5725 = :* (:* (:* D3 D0) D2) D9
type HBD4 = :* (:* (:* D3 D0) D2) D8
type D3028 = :* (:* (:* D3 D0) D2) D8
type O5724 = :* (:* (:* D3 D0) D2) D8
type HBD3 = :* (:* (:* D3 D0) D2) D7
type D3027 = :* (:* (:* D3 D0) D2) D7
type O5723 = :* (:* (:* D3 D0) D2) D7
type HBD2 = :* (:* (:* D3 D0) D2) D6
type D3026 = :* (:* (:* D3 D0) D2) D6
type O5722 = :* (:* (:* D3 D0) D2) D6
type HBD1 = :* (:* (:* D3 D0) D2) D5
type D3025 = :* (:* (:* D3 D0) D2) D5
type O5721 = :* (:* (:* D3 D0) D2) D5
type HBD0 = :* (:* (:* D3 D0) D2) D4
type D3024 = :* (:* (:* D3 D0) D2) D4
type O5720 = :* (:* (:* D3 D0) D2) D4
type HBCF = :* (:* (:* D3 D0) D2) D3
type D3023 = :* (:* (:* D3 D0) D2) D3
type O5717 = :* (:* (:* D3 D0) D2) D3
type HBCE = :* (:* (:* D3 D0) D2) D2
type D3022 = :* (:* (:* D3 D0) D2) D2
type O5716 = :* (:* (:* D3 D0) D2) D2
type HBCD = :* (:* (:* D3 D0) D2) D1
type D3021 = :* (:* (:* D3 D0) D2) D1
type O5715 = :* (:* (:* D3 D0) D2) D1
type HBCC = :* (:* (:* D3 D0) D2) D0
type D3020 = :* (:* (:* D3 D0) D2) D0
type O5714 = :* (:* (:* D3 D0) D2) D0
type HBCB = :* (:* (:* D3 D0) D1) D9
type D3019 = :* (:* (:* D3 D0) D1) D9
type O5713 = :* (:* (:* D3 D0) D1) D9
type HBCA = :* (:* (:* D3 D0) D1) D8
type D3018 = :* (:* (:* D3 D0) D1) D8
type O5712 = :* (:* (:* D3 D0) D1) D8
type HBC9 = :* (:* (:* D3 D0) D1) D7
type D3017 = :* (:* (:* D3 D0) D1) D7
type O5711 = :* (:* (:* D3 D0) D1) D7
type HBC8 = :* (:* (:* D3 D0) D1) D6
type D3016 = :* (:* (:* D3 D0) D1) D6
type O5710 = :* (:* (:* D3 D0) D1) D6
type HBC7 = :* (:* (:* D3 D0) D1) D5
type D3015 = :* (:* (:* D3 D0) D1) D5
type O5707 = :* (:* (:* D3 D0) D1) D5
type HBC6 = :* (:* (:* D3 D0) D1) D4
type D3014 = :* (:* (:* D3 D0) D1) D4
type O5706 = :* (:* (:* D3 D0) D1) D4
type HBC5 = :* (:* (:* D3 D0) D1) D3
type D3013 = :* (:* (:* D3 D0) D1) D3
type O5705 = :* (:* (:* D3 D0) D1) D3
type HBC4 = :* (:* (:* D3 D0) D1) D2
type D3012 = :* (:* (:* D3 D0) D1) D2
type O5704 = :* (:* (:* D3 D0) D1) D2
type HBC3 = :* (:* (:* D3 D0) D1) D1
type D3011 = :* (:* (:* D3 D0) D1) D1
type O5703 = :* (:* (:* D3 D0) D1) D1
type HBC2 = :* (:* (:* D3 D0) D1) D0
type D3010 = :* (:* (:* D3 D0) D1) D0
type O5702 = :* (:* (:* D3 D0) D1) D0
type HBC1 = :* (:* (:* D3 D0) D0) D9
type D3009 = :* (:* (:* D3 D0) D0) D9
type O5701 = :* (:* (:* D3 D0) D0) D9
type HBC0 = :* (:* (:* D3 D0) D0) D8
type D3008 = :* (:* (:* D3 D0) D0) D8
type O5700 = :* (:* (:* D3 D0) D0) D8
type HBBF = :* (:* (:* D3 D0) D0) D7
type D3007 = :* (:* (:* D3 D0) D0) D7
type O5677 = :* (:* (:* D3 D0) D0) D7
type HBBE = :* (:* (:* D3 D0) D0) D6
type D3006 = :* (:* (:* D3 D0) D0) D6
type O5676 = :* (:* (:* D3 D0) D0) D6
type HBBD = :* (:* (:* D3 D0) D0) D5
type D3005 = :* (:* (:* D3 D0) D0) D5
type O5675 = :* (:* (:* D3 D0) D0) D5
type HBBC = :* (:* (:* D3 D0) D0) D4
type D3004 = :* (:* (:* D3 D0) D0) D4
type O5674 = :* (:* (:* D3 D0) D0) D4
type HBBB = :* (:* (:* D3 D0) D0) D3
type D3003 = :* (:* (:* D3 D0) D0) D3
type O5673 = :* (:* (:* D3 D0) D0) D3
type HBBA = :* (:* (:* D3 D0) D0) D2
type D3002 = :* (:* (:* D3 D0) D0) D2
type O5672 = :* (:* (:* D3 D0) D0) D2
type HBB9 = :* (:* (:* D3 D0) D0) D1
type D3001 = :* (:* (:* D3 D0) D0) D1
type O5671 = :* (:* (:* D3 D0) D0) D1
type HBB8 = :* (:* (:* D3 D0) D0) D0
type D3000 = :* (:* (:* D3 D0) D0) D0
type O5670 = :* (:* (:* D3 D0) D0) D0
type HBB7 = :* (:* (:* D2 D9) D9) D9
type D2999 = :* (:* (:* D2 D9) D9) D9
type O5667 = :* (:* (:* D2 D9) D9) D9
type HBB6 = :* (:* (:* D2 D9) D9) D8
type D2998 = :* (:* (:* D2 D9) D9) D8
type O5666 = :* (:* (:* D2 D9) D9) D8
type HBB5 = :* (:* (:* D2 D9) D9) D7
type D2997 = :* (:* (:* D2 D9) D9) D7
type O5665 = :* (:* (:* D2 D9) D9) D7
type HBB4 = :* (:* (:* D2 D9) D9) D6
type D2996 = :* (:* (:* D2 D9) D9) D6
type O5664 = :* (:* (:* D2 D9) D9) D6
type HBB3 = :* (:* (:* D2 D9) D9) D5
type D2995 = :* (:* (:* D2 D9) D9) D5
type O5663 = :* (:* (:* D2 D9) D9) D5
type HBB2 = :* (:* (:* D2 D9) D9) D4
type D2994 = :* (:* (:* D2 D9) D9) D4
type O5662 = :* (:* (:* D2 D9) D9) D4
type HBB1 = :* (:* (:* D2 D9) D9) D3
type D2993 = :* (:* (:* D2 D9) D9) D3
type O5661 = :* (:* (:* D2 D9) D9) D3
type HBB0 = :* (:* (:* D2 D9) D9) D2
type D2992 = :* (:* (:* D2 D9) D9) D2
type O5660 = :* (:* (:* D2 D9) D9) D2
type HBAF = :* (:* (:* D2 D9) D9) D1
type D2991 = :* (:* (:* D2 D9) D9) D1
type O5657 = :* (:* (:* D2 D9) D9) D1
type HBAE = :* (:* (:* D2 D9) D9) D0
type D2990 = :* (:* (:* D2 D9) D9) D0
type O5656 = :* (:* (:* D2 D9) D9) D0
type HBAD = :* (:* (:* D2 D9) D8) D9
type D2989 = :* (:* (:* D2 D9) D8) D9
type O5655 = :* (:* (:* D2 D9) D8) D9
type HBAC = :* (:* (:* D2 D9) D8) D8
type D2988 = :* (:* (:* D2 D9) D8) D8
type O5654 = :* (:* (:* D2 D9) D8) D8
type HBAB = :* (:* (:* D2 D9) D8) D7
type D2987 = :* (:* (:* D2 D9) D8) D7
type O5653 = :* (:* (:* D2 D9) D8) D7
type HBAA = :* (:* (:* D2 D9) D8) D6
type D2986 = :* (:* (:* D2 D9) D8) D6
type O5652 = :* (:* (:* D2 D9) D8) D6
type HBA9 = :* (:* (:* D2 D9) D8) D5
type D2985 = :* (:* (:* D2 D9) D8) D5
type O5651 = :* (:* (:* D2 D9) D8) D5
type HBA8 = :* (:* (:* D2 D9) D8) D4
type D2984 = :* (:* (:* D2 D9) D8) D4
type O5650 = :* (:* (:* D2 D9) D8) D4
type HBA7 = :* (:* (:* D2 D9) D8) D3
type D2983 = :* (:* (:* D2 D9) D8) D3
type O5647 = :* (:* (:* D2 D9) D8) D3
type HBA6 = :* (:* (:* D2 D9) D8) D2
type D2982 = :* (:* (:* D2 D9) D8) D2
type O5646 = :* (:* (:* D2 D9) D8) D2
type HBA5 = :* (:* (:* D2 D9) D8) D1
type D2981 = :* (:* (:* D2 D9) D8) D1
type O5645 = :* (:* (:* D2 D9) D8) D1
type HBA4 = :* (:* (:* D2 D9) D8) D0
type D2980 = :* (:* (:* D2 D9) D8) D0
type O5644 = :* (:* (:* D2 D9) D8) D0
type HBA3 = :* (:* (:* D2 D9) D7) D9
type D2979 = :* (:* (:* D2 D9) D7) D9
type O5643 = :* (:* (:* D2 D9) D7) D9
type HBA2 = :* (:* (:* D2 D9) D7) D8
type D2978 = :* (:* (:* D2 D9) D7) D8
type O5642 = :* (:* (:* D2 D9) D7) D8
type HBA1 = :* (:* (:* D2 D9) D7) D7
type D2977 = :* (:* (:* D2 D9) D7) D7
type O5641 = :* (:* (:* D2 D9) D7) D7
type HBA0 = :* (:* (:* D2 D9) D7) D6
type D2976 = :* (:* (:* D2 D9) D7) D6
type O5640 = :* (:* (:* D2 D9) D7) D6
type HB9F = :* (:* (:* D2 D9) D7) D5
type D2975 = :* (:* (:* D2 D9) D7) D5
type O5637 = :* (:* (:* D2 D9) D7) D5
type HB9E = :* (:* (:* D2 D9) D7) D4
type D2974 = :* (:* (:* D2 D9) D7) D4
type O5636 = :* (:* (:* D2 D9) D7) D4
type HB9D = :* (:* (:* D2 D9) D7) D3
type D2973 = :* (:* (:* D2 D9) D7) D3
type O5635 = :* (:* (:* D2 D9) D7) D3
type HB9C = :* (:* (:* D2 D9) D7) D2
type D2972 = :* (:* (:* D2 D9) D7) D2
type O5634 = :* (:* (:* D2 D9) D7) D2
type HB9B = :* (:* (:* D2 D9) D7) D1
type D2971 = :* (:* (:* D2 D9) D7) D1
type O5633 = :* (:* (:* D2 D9) D7) D1
type HB9A = :* (:* (:* D2 D9) D7) D0
type D2970 = :* (:* (:* D2 D9) D7) D0
type O5632 = :* (:* (:* D2 D9) D7) D0
type HB99 = :* (:* (:* D2 D9) D6) D9
type D2969 = :* (:* (:* D2 D9) D6) D9
type O5631 = :* (:* (:* D2 D9) D6) D9
type HB98 = :* (:* (:* D2 D9) D6) D8
type D2968 = :* (:* (:* D2 D9) D6) D8
type O5630 = :* (:* (:* D2 D9) D6) D8
type HB97 = :* (:* (:* D2 D9) D6) D7
type D2967 = :* (:* (:* D2 D9) D6) D7
type O5627 = :* (:* (:* D2 D9) D6) D7
type HB96 = :* (:* (:* D2 D9) D6) D6
type D2966 = :* (:* (:* D2 D9) D6) D6
type O5626 = :* (:* (:* D2 D9) D6) D6
type HB95 = :* (:* (:* D2 D9) D6) D5
type D2965 = :* (:* (:* D2 D9) D6) D5
type O5625 = :* (:* (:* D2 D9) D6) D5
type HB94 = :* (:* (:* D2 D9) D6) D4
type D2964 = :* (:* (:* D2 D9) D6) D4
type O5624 = :* (:* (:* D2 D9) D6) D4
type HB93 = :* (:* (:* D2 D9) D6) D3
type D2963 = :* (:* (:* D2 D9) D6) D3
type O5623 = :* (:* (:* D2 D9) D6) D3
type HB92 = :* (:* (:* D2 D9) D6) D2
type D2962 = :* (:* (:* D2 D9) D6) D2
type O5622 = :* (:* (:* D2 D9) D6) D2
type HB91 = :* (:* (:* D2 D9) D6) D1
type D2961 = :* (:* (:* D2 D9) D6) D1
type O5621 = :* (:* (:* D2 D9) D6) D1
type HB90 = :* (:* (:* D2 D9) D6) D0
type D2960 = :* (:* (:* D2 D9) D6) D0
type O5620 = :* (:* (:* D2 D9) D6) D0
type HB8F = :* (:* (:* D2 D9) D5) D9
type D2959 = :* (:* (:* D2 D9) D5) D9
type O5617 = :* (:* (:* D2 D9) D5) D9
type HB8E = :* (:* (:* D2 D9) D5) D8
type D2958 = :* (:* (:* D2 D9) D5) D8
type O5616 = :* (:* (:* D2 D9) D5) D8
type HB8D = :* (:* (:* D2 D9) D5) D7
type D2957 = :* (:* (:* D2 D9) D5) D7
type O5615 = :* (:* (:* D2 D9) D5) D7
type HB8C = :* (:* (:* D2 D9) D5) D6
type D2956 = :* (:* (:* D2 D9) D5) D6
type O5614 = :* (:* (:* D2 D9) D5) D6
type HB8B = :* (:* (:* D2 D9) D5) D5
type D2955 = :* (:* (:* D2 D9) D5) D5
type O5613 = :* (:* (:* D2 D9) D5) D5
type HB8A = :* (:* (:* D2 D9) D5) D4
type D2954 = :* (:* (:* D2 D9) D5) D4
type O5612 = :* (:* (:* D2 D9) D5) D4
type HB89 = :* (:* (:* D2 D9) D5) D3
type D2953 = :* (:* (:* D2 D9) D5) D3
type O5611 = :* (:* (:* D2 D9) D5) D3
type HB88 = :* (:* (:* D2 D9) D5) D2
type D2952 = :* (:* (:* D2 D9) D5) D2
type O5610 = :* (:* (:* D2 D9) D5) D2
type HB87 = :* (:* (:* D2 D9) D5) D1
type D2951 = :* (:* (:* D2 D9) D5) D1
type O5607 = :* (:* (:* D2 D9) D5) D1
type HB86 = :* (:* (:* D2 D9) D5) D0
type D2950 = :* (:* (:* D2 D9) D5) D0
type O5606 = :* (:* (:* D2 D9) D5) D0
type HB85 = :* (:* (:* D2 D9) D4) D9
type D2949 = :* (:* (:* D2 D9) D4) D9
type O5605 = :* (:* (:* D2 D9) D4) D9
type HB84 = :* (:* (:* D2 D9) D4) D8
type D2948 = :* (:* (:* D2 D9) D4) D8
type O5604 = :* (:* (:* D2 D9) D4) D8
type HB83 = :* (:* (:* D2 D9) D4) D7
type D2947 = :* (:* (:* D2 D9) D4) D7
type O5603 = :* (:* (:* D2 D9) D4) D7
type HB82 = :* (:* (:* D2 D9) D4) D6
type D2946 = :* (:* (:* D2 D9) D4) D6
type O5602 = :* (:* (:* D2 D9) D4) D6
type HB81 = :* (:* (:* D2 D9) D4) D5
type D2945 = :* (:* (:* D2 D9) D4) D5
type O5601 = :* (:* (:* D2 D9) D4) D5
type HB80 = :* (:* (:* D2 D9) D4) D4
type D2944 = :* (:* (:* D2 D9) D4) D4
type O5600 = :* (:* (:* D2 D9) D4) D4
type HB7F = :* (:* (:* D2 D9) D4) D3
type D2943 = :* (:* (:* D2 D9) D4) D3
type O5577 = :* (:* (:* D2 D9) D4) D3
type HB7E = :* (:* (:* D2 D9) D4) D2
type D2942 = :* (:* (:* D2 D9) D4) D2
type O5576 = :* (:* (:* D2 D9) D4) D2
type HB7D = :* (:* (:* D2 D9) D4) D1
type D2941 = :* (:* (:* D2 D9) D4) D1
type O5575 = :* (:* (:* D2 D9) D4) D1
type HB7C = :* (:* (:* D2 D9) D4) D0
type D2940 = :* (:* (:* D2 D9) D4) D0
type O5574 = :* (:* (:* D2 D9) D4) D0
type HB7B = :* (:* (:* D2 D9) D3) D9
type D2939 = :* (:* (:* D2 D9) D3) D9
type O5573 = :* (:* (:* D2 D9) D3) D9
type HB7A = :* (:* (:* D2 D9) D3) D8
type D2938 = :* (:* (:* D2 D9) D3) D8
type O5572 = :* (:* (:* D2 D9) D3) D8
type HB79 = :* (:* (:* D2 D9) D3) D7
type D2937 = :* (:* (:* D2 D9) D3) D7
type O5571 = :* (:* (:* D2 D9) D3) D7
type HB78 = :* (:* (:* D2 D9) D3) D6
type D2936 = :* (:* (:* D2 D9) D3) D6
type O5570 = :* (:* (:* D2 D9) D3) D6
type HB77 = :* (:* (:* D2 D9) D3) D5
type D2935 = :* (:* (:* D2 D9) D3) D5
type O5567 = :* (:* (:* D2 D9) D3) D5
type HB76 = :* (:* (:* D2 D9) D3) D4
type D2934 = :* (:* (:* D2 D9) D3) D4
type O5566 = :* (:* (:* D2 D9) D3) D4
type HB75 = :* (:* (:* D2 D9) D3) D3
type D2933 = :* (:* (:* D2 D9) D3) D3
type O5565 = :* (:* (:* D2 D9) D3) D3
type HB74 = :* (:* (:* D2 D9) D3) D2
type D2932 = :* (:* (:* D2 D9) D3) D2
type O5564 = :* (:* (:* D2 D9) D3) D2
type HB73 = :* (:* (:* D2 D9) D3) D1
type D2931 = :* (:* (:* D2 D9) D3) D1
type O5563 = :* (:* (:* D2 D9) D3) D1
type HB72 = :* (:* (:* D2 D9) D3) D0
type D2930 = :* (:* (:* D2 D9) D3) D0
type O5562 = :* (:* (:* D2 D9) D3) D0
type HB71 = :* (:* (:* D2 D9) D2) D9
type D2929 = :* (:* (:* D2 D9) D2) D9
type O5561 = :* (:* (:* D2 D9) D2) D9
type HB70 = :* (:* (:* D2 D9) D2) D8
type D2928 = :* (:* (:* D2 D9) D2) D8
type O5560 = :* (:* (:* D2 D9) D2) D8
type HB6F = :* (:* (:* D2 D9) D2) D7
type D2927 = :* (:* (:* D2 D9) D2) D7
type O5557 = :* (:* (:* D2 D9) D2) D7
type HB6E = :* (:* (:* D2 D9) D2) D6
type D2926 = :* (:* (:* D2 D9) D2) D6
type O5556 = :* (:* (:* D2 D9) D2) D6
type HB6D = :* (:* (:* D2 D9) D2) D5
type D2925 = :* (:* (:* D2 D9) D2) D5
type O5555 = :* (:* (:* D2 D9) D2) D5
type HB6C = :* (:* (:* D2 D9) D2) D4
type D2924 = :* (:* (:* D2 D9) D2) D4
type O5554 = :* (:* (:* D2 D9) D2) D4
type HB6B = :* (:* (:* D2 D9) D2) D3
type D2923 = :* (:* (:* D2 D9) D2) D3
type O5553 = :* (:* (:* D2 D9) D2) D3
type HB6A = :* (:* (:* D2 D9) D2) D2
type D2922 = :* (:* (:* D2 D9) D2) D2
type O5552 = :* (:* (:* D2 D9) D2) D2
type HB69 = :* (:* (:* D2 D9) D2) D1
type D2921 = :* (:* (:* D2 D9) D2) D1
type O5551 = :* (:* (:* D2 D9) D2) D1
type HB68 = :* (:* (:* D2 D9) D2) D0
type D2920 = :* (:* (:* D2 D9) D2) D0
type O5550 = :* (:* (:* D2 D9) D2) D0
type HB67 = :* (:* (:* D2 D9) D1) D9
type D2919 = :* (:* (:* D2 D9) D1) D9
type O5547 = :* (:* (:* D2 D9) D1) D9
type HB66 = :* (:* (:* D2 D9) D1) D8
type D2918 = :* (:* (:* D2 D9) D1) D8
type O5546 = :* (:* (:* D2 D9) D1) D8
type HB65 = :* (:* (:* D2 D9) D1) D7
type D2917 = :* (:* (:* D2 D9) D1) D7
type O5545 = :* (:* (:* D2 D9) D1) D7
type HB64 = :* (:* (:* D2 D9) D1) D6
type D2916 = :* (:* (:* D2 D9) D1) D6
type O5544 = :* (:* (:* D2 D9) D1) D6
type HB63 = :* (:* (:* D2 D9) D1) D5
type D2915 = :* (:* (:* D2 D9) D1) D5
type O5543 = :* (:* (:* D2 D9) D1) D5
type HB62 = :* (:* (:* D2 D9) D1) D4
type D2914 = :* (:* (:* D2 D9) D1) D4
type O5542 = :* (:* (:* D2 D9) D1) D4
type HB61 = :* (:* (:* D2 D9) D1) D3
type D2913 = :* (:* (:* D2 D9) D1) D3
type O5541 = :* (:* (:* D2 D9) D1) D3
type HB60 = :* (:* (:* D2 D9) D1) D2
type D2912 = :* (:* (:* D2 D9) D1) D2
type O5540 = :* (:* (:* D2 D9) D1) D2
type HB5F = :* (:* (:* D2 D9) D1) D1
type D2911 = :* (:* (:* D2 D9) D1) D1
type O5537 = :* (:* (:* D2 D9) D1) D1
type HB5E = :* (:* (:* D2 D9) D1) D0
type D2910 = :* (:* (:* D2 D9) D1) D0
type O5536 = :* (:* (:* D2 D9) D1) D0
type HB5D = :* (:* (:* D2 D9) D0) D9
type D2909 = :* (:* (:* D2 D9) D0) D9
type O5535 = :* (:* (:* D2 D9) D0) D9
type HB5C = :* (:* (:* D2 D9) D0) D8
type D2908 = :* (:* (:* D2 D9) D0) D8
type O5534 = :* (:* (:* D2 D9) D0) D8
type HB5B = :* (:* (:* D2 D9) D0) D7
type D2907 = :* (:* (:* D2 D9) D0) D7
type O5533 = :* (:* (:* D2 D9) D0) D7
type HB5A = :* (:* (:* D2 D9) D0) D6
type D2906 = :* (:* (:* D2 D9) D0) D6
type O5532 = :* (:* (:* D2 D9) D0) D6
type HB59 = :* (:* (:* D2 D9) D0) D5
type D2905 = :* (:* (:* D2 D9) D0) D5
type O5531 = :* (:* (:* D2 D9) D0) D5
type HB58 = :* (:* (:* D2 D9) D0) D4
type D2904 = :* (:* (:* D2 D9) D0) D4
type O5530 = :* (:* (:* D2 D9) D0) D4
type HB57 = :* (:* (:* D2 D9) D0) D3
type D2903 = :* (:* (:* D2 D9) D0) D3
type O5527 = :* (:* (:* D2 D9) D0) D3
type HB56 = :* (:* (:* D2 D9) D0) D2
type D2902 = :* (:* (:* D2 D9) D0) D2
type O5526 = :* (:* (:* D2 D9) D0) D2
type HB55 = :* (:* (:* D2 D9) D0) D1
type D2901 = :* (:* (:* D2 D9) D0) D1
type O5525 = :* (:* (:* D2 D9) D0) D1
type HB54 = :* (:* (:* D2 D9) D0) D0
type D2900 = :* (:* (:* D2 D9) D0) D0
type O5524 = :* (:* (:* D2 D9) D0) D0
type HB53 = :* (:* (:* D2 D8) D9) D9
type D2899 = :* (:* (:* D2 D8) D9) D9
type O5523 = :* (:* (:* D2 D8) D9) D9
type HB52 = :* (:* (:* D2 D8) D9) D8
type D2898 = :* (:* (:* D2 D8) D9) D8
type O5522 = :* (:* (:* D2 D8) D9) D8
type HB51 = :* (:* (:* D2 D8) D9) D7
type D2897 = :* (:* (:* D2 D8) D9) D7
type O5521 = :* (:* (:* D2 D8) D9) D7
type HB50 = :* (:* (:* D2 D8) D9) D6
type D2896 = :* (:* (:* D2 D8) D9) D6
type O5520 = :* (:* (:* D2 D8) D9) D6
type HB4F = :* (:* (:* D2 D8) D9) D5
type D2895 = :* (:* (:* D2 D8) D9) D5
type O5517 = :* (:* (:* D2 D8) D9) D5
type HB4E = :* (:* (:* D2 D8) D9) D4
type D2894 = :* (:* (:* D2 D8) D9) D4
type O5516 = :* (:* (:* D2 D8) D9) D4
type HB4D = :* (:* (:* D2 D8) D9) D3
type D2893 = :* (:* (:* D2 D8) D9) D3
type O5515 = :* (:* (:* D2 D8) D9) D3
type HB4C = :* (:* (:* D2 D8) D9) D2
type D2892 = :* (:* (:* D2 D8) D9) D2
type O5514 = :* (:* (:* D2 D8) D9) D2
type HB4B = :* (:* (:* D2 D8) D9) D1
type D2891 = :* (:* (:* D2 D8) D9) D1
type O5513 = :* (:* (:* D2 D8) D9) D1
type HB4A = :* (:* (:* D2 D8) D9) D0
type D2890 = :* (:* (:* D2 D8) D9) D0
type O5512 = :* (:* (:* D2 D8) D9) D0
type HB49 = :* (:* (:* D2 D8) D8) D9
type D2889 = :* (:* (:* D2 D8) D8) D9
type O5511 = :* (:* (:* D2 D8) D8) D9
type HB48 = :* (:* (:* D2 D8) D8) D8
type D2888 = :* (:* (:* D2 D8) D8) D8
type O5510 = :* (:* (:* D2 D8) D8) D8
type HB47 = :* (:* (:* D2 D8) D8) D7
type D2887 = :* (:* (:* D2 D8) D8) D7
type O5507 = :* (:* (:* D2 D8) D8) D7
type HB46 = :* (:* (:* D2 D8) D8) D6
type D2886 = :* (:* (:* D2 D8) D8) D6
type O5506 = :* (:* (:* D2 D8) D8) D6
type HB45 = :* (:* (:* D2 D8) D8) D5
type D2885 = :* (:* (:* D2 D8) D8) D5
type O5505 = :* (:* (:* D2 D8) D8) D5
type HB44 = :* (:* (:* D2 D8) D8) D4
type D2884 = :* (:* (:* D2 D8) D8) D4
type O5504 = :* (:* (:* D2 D8) D8) D4
type HB43 = :* (:* (:* D2 D8) D8) D3
type D2883 = :* (:* (:* D2 D8) D8) D3
type O5503 = :* (:* (:* D2 D8) D8) D3
type HB42 = :* (:* (:* D2 D8) D8) D2
type D2882 = :* (:* (:* D2 D8) D8) D2
type O5502 = :* (:* (:* D2 D8) D8) D2
type HB41 = :* (:* (:* D2 D8) D8) D1
type D2881 = :* (:* (:* D2 D8) D8) D1
type O5501 = :* (:* (:* D2 D8) D8) D1
type HB40 = :* (:* (:* D2 D8) D8) D0
type D2880 = :* (:* (:* D2 D8) D8) D0
type O5500 = :* (:* (:* D2 D8) D8) D0
type HB3F = :* (:* (:* D2 D8) D7) D9
type D2879 = :* (:* (:* D2 D8) D7) D9
type O5477 = :* (:* (:* D2 D8) D7) D9
type HB3E = :* (:* (:* D2 D8) D7) D8
type D2878 = :* (:* (:* D2 D8) D7) D8
type O5476 = :* (:* (:* D2 D8) D7) D8
type HB3D = :* (:* (:* D2 D8) D7) D7
type D2877 = :* (:* (:* D2 D8) D7) D7
type O5475 = :* (:* (:* D2 D8) D7) D7
type HB3C = :* (:* (:* D2 D8) D7) D6
type D2876 = :* (:* (:* D2 D8) D7) D6
type O5474 = :* (:* (:* D2 D8) D7) D6
type HB3B = :* (:* (:* D2 D8) D7) D5
type D2875 = :* (:* (:* D2 D8) D7) D5
type O5473 = :* (:* (:* D2 D8) D7) D5
type HB3A = :* (:* (:* D2 D8) D7) D4
type D2874 = :* (:* (:* D2 D8) D7) D4
type O5472 = :* (:* (:* D2 D8) D7) D4
type HB39 = :* (:* (:* D2 D8) D7) D3
type D2873 = :* (:* (:* D2 D8) D7) D3
type O5471 = :* (:* (:* D2 D8) D7) D3
type HB38 = :* (:* (:* D2 D8) D7) D2
type D2872 = :* (:* (:* D2 D8) D7) D2
type O5470 = :* (:* (:* D2 D8) D7) D2
type HB37 = :* (:* (:* D2 D8) D7) D1
type D2871 = :* (:* (:* D2 D8) D7) D1
type O5467 = :* (:* (:* D2 D8) D7) D1
type HB36 = :* (:* (:* D2 D8) D7) D0
type D2870 = :* (:* (:* D2 D8) D7) D0
type O5466 = :* (:* (:* D2 D8) D7) D0
type HB35 = :* (:* (:* D2 D8) D6) D9
type D2869 = :* (:* (:* D2 D8) D6) D9
type O5465 = :* (:* (:* D2 D8) D6) D9
type HB34 = :* (:* (:* D2 D8) D6) D8
type D2868 = :* (:* (:* D2 D8) D6) D8
type O5464 = :* (:* (:* D2 D8) D6) D8
type HB33 = :* (:* (:* D2 D8) D6) D7
type D2867 = :* (:* (:* D2 D8) D6) D7
type O5463 = :* (:* (:* D2 D8) D6) D7
type HB32 = :* (:* (:* D2 D8) D6) D6
type D2866 = :* (:* (:* D2 D8) D6) D6
type O5462 = :* (:* (:* D2 D8) D6) D6
type HB31 = :* (:* (:* D2 D8) D6) D5
type D2865 = :* (:* (:* D2 D8) D6) D5
type O5461 = :* (:* (:* D2 D8) D6) D5
type HB30 = :* (:* (:* D2 D8) D6) D4
type D2864 = :* (:* (:* D2 D8) D6) D4
type O5460 = :* (:* (:* D2 D8) D6) D4
type HB2F = :* (:* (:* D2 D8) D6) D3
type D2863 = :* (:* (:* D2 D8) D6) D3
type O5457 = :* (:* (:* D2 D8) D6) D3
type HB2E = :* (:* (:* D2 D8) D6) D2
type D2862 = :* (:* (:* D2 D8) D6) D2
type O5456 = :* (:* (:* D2 D8) D6) D2
type HB2D = :* (:* (:* D2 D8) D6) D1
type D2861 = :* (:* (:* D2 D8) D6) D1
type O5455 = :* (:* (:* D2 D8) D6) D1
type HB2C = :* (:* (:* D2 D8) D6) D0
type D2860 = :* (:* (:* D2 D8) D6) D0
type O5454 = :* (:* (:* D2 D8) D6) D0
type HB2B = :* (:* (:* D2 D8) D5) D9
type D2859 = :* (:* (:* D2 D8) D5) D9
type O5453 = :* (:* (:* D2 D8) D5) D9
type HB2A = :* (:* (:* D2 D8) D5) D8
type D2858 = :* (:* (:* D2 D8) D5) D8
type O5452 = :* (:* (:* D2 D8) D5) D8
type HB29 = :* (:* (:* D2 D8) D5) D7
type D2857 = :* (:* (:* D2 D8) D5) D7
type O5451 = :* (:* (:* D2 D8) D5) D7
type HB28 = :* (:* (:* D2 D8) D5) D6
type D2856 = :* (:* (:* D2 D8) D5) D6
type O5450 = :* (:* (:* D2 D8) D5) D6
type HB27 = :* (:* (:* D2 D8) D5) D5
type D2855 = :* (:* (:* D2 D8) D5) D5
type O5447 = :* (:* (:* D2 D8) D5) D5
type HB26 = :* (:* (:* D2 D8) D5) D4
type D2854 = :* (:* (:* D2 D8) D5) D4
type O5446 = :* (:* (:* D2 D8) D5) D4
type HB25 = :* (:* (:* D2 D8) D5) D3
type D2853 = :* (:* (:* D2 D8) D5) D3
type O5445 = :* (:* (:* D2 D8) D5) D3
type HB24 = :* (:* (:* D2 D8) D5) D2
type D2852 = :* (:* (:* D2 D8) D5) D2
type O5444 = :* (:* (:* D2 D8) D5) D2
type HB23 = :* (:* (:* D2 D8) D5) D1
type D2851 = :* (:* (:* D2 D8) D5) D1
type O5443 = :* (:* (:* D2 D8) D5) D1
type HB22 = :* (:* (:* D2 D8) D5) D0
type D2850 = :* (:* (:* D2 D8) D5) D0
type O5442 = :* (:* (:* D2 D8) D5) D0
type HB21 = :* (:* (:* D2 D8) D4) D9
type D2849 = :* (:* (:* D2 D8) D4) D9
type O5441 = :* (:* (:* D2 D8) D4) D9
type HB20 = :* (:* (:* D2 D8) D4) D8
type D2848 = :* (:* (:* D2 D8) D4) D8
type O5440 = :* (:* (:* D2 D8) D4) D8
type HB1F = :* (:* (:* D2 D8) D4) D7
type D2847 = :* (:* (:* D2 D8) D4) D7
type O5437 = :* (:* (:* D2 D8) D4) D7
type HB1E = :* (:* (:* D2 D8) D4) D6
type D2846 = :* (:* (:* D2 D8) D4) D6
type O5436 = :* (:* (:* D2 D8) D4) D6
type HB1D = :* (:* (:* D2 D8) D4) D5
type D2845 = :* (:* (:* D2 D8) D4) D5
type O5435 = :* (:* (:* D2 D8) D4) D5
type HB1C = :* (:* (:* D2 D8) D4) D4
type D2844 = :* (:* (:* D2 D8) D4) D4
type O5434 = :* (:* (:* D2 D8) D4) D4
type HB1B = :* (:* (:* D2 D8) D4) D3
type D2843 = :* (:* (:* D2 D8) D4) D3
type O5433 = :* (:* (:* D2 D8) D4) D3
type HB1A = :* (:* (:* D2 D8) D4) D2
type D2842 = :* (:* (:* D2 D8) D4) D2
type O5432 = :* (:* (:* D2 D8) D4) D2
type HB19 = :* (:* (:* D2 D8) D4) D1
type D2841 = :* (:* (:* D2 D8) D4) D1
type O5431 = :* (:* (:* D2 D8) D4) D1
type HB18 = :* (:* (:* D2 D8) D4) D0
type D2840 = :* (:* (:* D2 D8) D4) D0
type O5430 = :* (:* (:* D2 D8) D4) D0
type HB17 = :* (:* (:* D2 D8) D3) D9
type D2839 = :* (:* (:* D2 D8) D3) D9
type O5427 = :* (:* (:* D2 D8) D3) D9
type HB16 = :* (:* (:* D2 D8) D3) D8
type D2838 = :* (:* (:* D2 D8) D3) D8
type O5426 = :* (:* (:* D2 D8) D3) D8
type HB15 = :* (:* (:* D2 D8) D3) D7
type D2837 = :* (:* (:* D2 D8) D3) D7
type O5425 = :* (:* (:* D2 D8) D3) D7
type HB14 = :* (:* (:* D2 D8) D3) D6
type D2836 = :* (:* (:* D2 D8) D3) D6
type O5424 = :* (:* (:* D2 D8) D3) D6
type HB13 = :* (:* (:* D2 D8) D3) D5
type D2835 = :* (:* (:* D2 D8) D3) D5
type O5423 = :* (:* (:* D2 D8) D3) D5
type HB12 = :* (:* (:* D2 D8) D3) D4
type D2834 = :* (:* (:* D2 D8) D3) D4
type O5422 = :* (:* (:* D2 D8) D3) D4
type HB11 = :* (:* (:* D2 D8) D3) D3
type D2833 = :* (:* (:* D2 D8) D3) D3
type O5421 = :* (:* (:* D2 D8) D3) D3
type HB10 = :* (:* (:* D2 D8) D3) D2
type D2832 = :* (:* (:* D2 D8) D3) D2
type O5420 = :* (:* (:* D2 D8) D3) D2
type HB0F = :* (:* (:* D2 D8) D3) D1
type D2831 = :* (:* (:* D2 D8) D3) D1
type O5417 = :* (:* (:* D2 D8) D3) D1
type HB0E = :* (:* (:* D2 D8) D3) D0
type D2830 = :* (:* (:* D2 D8) D3) D0
type O5416 = :* (:* (:* D2 D8) D3) D0
type HB0D = :* (:* (:* D2 D8) D2) D9
type D2829 = :* (:* (:* D2 D8) D2) D9
type O5415 = :* (:* (:* D2 D8) D2) D9
type HB0C = :* (:* (:* D2 D8) D2) D8
type D2828 = :* (:* (:* D2 D8) D2) D8
type O5414 = :* (:* (:* D2 D8) D2) D8
type HB0B = :* (:* (:* D2 D8) D2) D7
type D2827 = :* (:* (:* D2 D8) D2) D7
type O5413 = :* (:* (:* D2 D8) D2) D7
type HB0A = :* (:* (:* D2 D8) D2) D6
type D2826 = :* (:* (:* D2 D8) D2) D6
type O5412 = :* (:* (:* D2 D8) D2) D6
type HB09 = :* (:* (:* D2 D8) D2) D5
type D2825 = :* (:* (:* D2 D8) D2) D5
type O5411 = :* (:* (:* D2 D8) D2) D5
type HB08 = :* (:* (:* D2 D8) D2) D4
type D2824 = :* (:* (:* D2 D8) D2) D4
type O5410 = :* (:* (:* D2 D8) D2) D4
type HB07 = :* (:* (:* D2 D8) D2) D3
type D2823 = :* (:* (:* D2 D8) D2) D3
type O5407 = :* (:* (:* D2 D8) D2) D3
type HB06 = :* (:* (:* D2 D8) D2) D2
type D2822 = :* (:* (:* D2 D8) D2) D2
type O5406 = :* (:* (:* D2 D8) D2) D2
type HB05 = :* (:* (:* D2 D8) D2) D1
type D2821 = :* (:* (:* D2 D8) D2) D1
type O5405 = :* (:* (:* D2 D8) D2) D1
type HB04 = :* (:* (:* D2 D8) D2) D0
type D2820 = :* (:* (:* D2 D8) D2) D0
type O5404 = :* (:* (:* D2 D8) D2) D0
type HB03 = :* (:* (:* D2 D8) D1) D9
type D2819 = :* (:* (:* D2 D8) D1) D9
type O5403 = :* (:* (:* D2 D8) D1) D9
type HB02 = :* (:* (:* D2 D8) D1) D8
type D2818 = :* (:* (:* D2 D8) D1) D8
type O5402 = :* (:* (:* D2 D8) D1) D8
type HB01 = :* (:* (:* D2 D8) D1) D7
type D2817 = :* (:* (:* D2 D8) D1) D7
type O5401 = :* (:* (:* D2 D8) D1) D7
type HB00 = :* (:* (:* D2 D8) D1) D6
type D2816 = :* (:* (:* D2 D8) D1) D6
type O5400 = :* (:* (:* D2 D8) D1) D6
type HAFF = :* (:* (:* D2 D8) D1) D5
type D2815 = :* (:* (:* D2 D8) D1) D5
type O5377 = :* (:* (:* D2 D8) D1) D5
type HAFE = :* (:* (:* D2 D8) D1) D4
type D2814 = :* (:* (:* D2 D8) D1) D4
type O5376 = :* (:* (:* D2 D8) D1) D4
type HAFD = :* (:* (:* D2 D8) D1) D3
type D2813 = :* (:* (:* D2 D8) D1) D3
type O5375 = :* (:* (:* D2 D8) D1) D3
type HAFC = :* (:* (:* D2 D8) D1) D2
type D2812 = :* (:* (:* D2 D8) D1) D2
type O5374 = :* (:* (:* D2 D8) D1) D2
type HAFB = :* (:* (:* D2 D8) D1) D1
type D2811 = :* (:* (:* D2 D8) D1) D1
type O5373 = :* (:* (:* D2 D8) D1) D1
type HAFA = :* (:* (:* D2 D8) D1) D0
type D2810 = :* (:* (:* D2 D8) D1) D0
type O5372 = :* (:* (:* D2 D8) D1) D0
type HAF9 = :* (:* (:* D2 D8) D0) D9
type D2809 = :* (:* (:* D2 D8) D0) D9
type O5371 = :* (:* (:* D2 D8) D0) D9
type HAF8 = :* (:* (:* D2 D8) D0) D8
type D2808 = :* (:* (:* D2 D8) D0) D8
type O5370 = :* (:* (:* D2 D8) D0) D8
type HAF7 = :* (:* (:* D2 D8) D0) D7
type D2807 = :* (:* (:* D2 D8) D0) D7
type O5367 = :* (:* (:* D2 D8) D0) D7
type HAF6 = :* (:* (:* D2 D8) D0) D6
type D2806 = :* (:* (:* D2 D8) D0) D6
type O5366 = :* (:* (:* D2 D8) D0) D6
type HAF5 = :* (:* (:* D2 D8) D0) D5
type D2805 = :* (:* (:* D2 D8) D0) D5
type O5365 = :* (:* (:* D2 D8) D0) D5
type HAF4 = :* (:* (:* D2 D8) D0) D4
type D2804 = :* (:* (:* D2 D8) D0) D4
type O5364 = :* (:* (:* D2 D8) D0) D4
type HAF3 = :* (:* (:* D2 D8) D0) D3
type D2803 = :* (:* (:* D2 D8) D0) D3
type O5363 = :* (:* (:* D2 D8) D0) D3
type HAF2 = :* (:* (:* D2 D8) D0) D2
type D2802 = :* (:* (:* D2 D8) D0) D2
type O5362 = :* (:* (:* D2 D8) D0) D2
type HAF1 = :* (:* (:* D2 D8) D0) D1
type D2801 = :* (:* (:* D2 D8) D0) D1
type O5361 = :* (:* (:* D2 D8) D0) D1
type HAF0 = :* (:* (:* D2 D8) D0) D0
type D2800 = :* (:* (:* D2 D8) D0) D0
type O5360 = :* (:* (:* D2 D8) D0) D0
type HAEF = :* (:* (:* D2 D7) D9) D9
type D2799 = :* (:* (:* D2 D7) D9) D9
type O5357 = :* (:* (:* D2 D7) D9) D9
type HAEE = :* (:* (:* D2 D7) D9) D8
type D2798 = :* (:* (:* D2 D7) D9) D8
type O5356 = :* (:* (:* D2 D7) D9) D8
type HAED = :* (:* (:* D2 D7) D9) D7
type D2797 = :* (:* (:* D2 D7) D9) D7
type O5355 = :* (:* (:* D2 D7) D9) D7
type HAEC = :* (:* (:* D2 D7) D9) D6
type D2796 = :* (:* (:* D2 D7) D9) D6
type O5354 = :* (:* (:* D2 D7) D9) D6
type HAEB = :* (:* (:* D2 D7) D9) D5
type D2795 = :* (:* (:* D2 D7) D9) D5
type O5353 = :* (:* (:* D2 D7) D9) D5
type HAEA = :* (:* (:* D2 D7) D9) D4
type D2794 = :* (:* (:* D2 D7) D9) D4
type O5352 = :* (:* (:* D2 D7) D9) D4
type HAE9 = :* (:* (:* D2 D7) D9) D3
type D2793 = :* (:* (:* D2 D7) D9) D3
type O5351 = :* (:* (:* D2 D7) D9) D3
type HAE8 = :* (:* (:* D2 D7) D9) D2
type D2792 = :* (:* (:* D2 D7) D9) D2
type O5350 = :* (:* (:* D2 D7) D9) D2
type HAE7 = :* (:* (:* D2 D7) D9) D1
type D2791 = :* (:* (:* D2 D7) D9) D1
type O5347 = :* (:* (:* D2 D7) D9) D1
type HAE6 = :* (:* (:* D2 D7) D9) D0
type D2790 = :* (:* (:* D2 D7) D9) D0
type O5346 = :* (:* (:* D2 D7) D9) D0
type HAE5 = :* (:* (:* D2 D7) D8) D9
type D2789 = :* (:* (:* D2 D7) D8) D9
type O5345 = :* (:* (:* D2 D7) D8) D9
type HAE4 = :* (:* (:* D2 D7) D8) D8
type D2788 = :* (:* (:* D2 D7) D8) D8
type O5344 = :* (:* (:* D2 D7) D8) D8
type HAE3 = :* (:* (:* D2 D7) D8) D7
type D2787 = :* (:* (:* D2 D7) D8) D7
type O5343 = :* (:* (:* D2 D7) D8) D7
type HAE2 = :* (:* (:* D2 D7) D8) D6
type D2786 = :* (:* (:* D2 D7) D8) D6
type O5342 = :* (:* (:* D2 D7) D8) D6
type HAE1 = :* (:* (:* D2 D7) D8) D5
type D2785 = :* (:* (:* D2 D7) D8) D5
type O5341 = :* (:* (:* D2 D7) D8) D5
type HAE0 = :* (:* (:* D2 D7) D8) D4
type D2784 = :* (:* (:* D2 D7) D8) D4
type O5340 = :* (:* (:* D2 D7) D8) D4
type HADF = :* (:* (:* D2 D7) D8) D3
type D2783 = :* (:* (:* D2 D7) D8) D3
type O5337 = :* (:* (:* D2 D7) D8) D3
type HADE = :* (:* (:* D2 D7) D8) D2
type D2782 = :* (:* (:* D2 D7) D8) D2
type O5336 = :* (:* (:* D2 D7) D8) D2
type HADD = :* (:* (:* D2 D7) D8) D1
type D2781 = :* (:* (:* D2 D7) D8) D1
type O5335 = :* (:* (:* D2 D7) D8) D1
type HADC = :* (:* (:* D2 D7) D8) D0
type D2780 = :* (:* (:* D2 D7) D8) D0
type O5334 = :* (:* (:* D2 D7) D8) D0
type HADB = :* (:* (:* D2 D7) D7) D9
type D2779 = :* (:* (:* D2 D7) D7) D9
type O5333 = :* (:* (:* D2 D7) D7) D9
type HADA = :* (:* (:* D2 D7) D7) D8
type D2778 = :* (:* (:* D2 D7) D7) D8
type O5332 = :* (:* (:* D2 D7) D7) D8
type HAD9 = :* (:* (:* D2 D7) D7) D7
type D2777 = :* (:* (:* D2 D7) D7) D7
type O5331 = :* (:* (:* D2 D7) D7) D7
type HAD8 = :* (:* (:* D2 D7) D7) D6
type D2776 = :* (:* (:* D2 D7) D7) D6
type O5330 = :* (:* (:* D2 D7) D7) D6
type HAD7 = :* (:* (:* D2 D7) D7) D5
type D2775 = :* (:* (:* D2 D7) D7) D5
type O5327 = :* (:* (:* D2 D7) D7) D5
type HAD6 = :* (:* (:* D2 D7) D7) D4
type D2774 = :* (:* (:* D2 D7) D7) D4
type O5326 = :* (:* (:* D2 D7) D7) D4
type HAD5 = :* (:* (:* D2 D7) D7) D3
type D2773 = :* (:* (:* D2 D7) D7) D3
type O5325 = :* (:* (:* D2 D7) D7) D3
type HAD4 = :* (:* (:* D2 D7) D7) D2
type D2772 = :* (:* (:* D2 D7) D7) D2
type O5324 = :* (:* (:* D2 D7) D7) D2
type HAD3 = :* (:* (:* D2 D7) D7) D1
type D2771 = :* (:* (:* D2 D7) D7) D1
type O5323 = :* (:* (:* D2 D7) D7) D1
type HAD2 = :* (:* (:* D2 D7) D7) D0
type D2770 = :* (:* (:* D2 D7) D7) D0
type O5322 = :* (:* (:* D2 D7) D7) D0
type HAD1 = :* (:* (:* D2 D7) D6) D9
type D2769 = :* (:* (:* D2 D7) D6) D9
type O5321 = :* (:* (:* D2 D7) D6) D9
type HAD0 = :* (:* (:* D2 D7) D6) D8
type D2768 = :* (:* (:* D2 D7) D6) D8
type O5320 = :* (:* (:* D2 D7) D6) D8
type HACF = :* (:* (:* D2 D7) D6) D7
type D2767 = :* (:* (:* D2 D7) D6) D7
type O5317 = :* (:* (:* D2 D7) D6) D7
type HACE = :* (:* (:* D2 D7) D6) D6
type D2766 = :* (:* (:* D2 D7) D6) D6
type O5316 = :* (:* (:* D2 D7) D6) D6
type HACD = :* (:* (:* D2 D7) D6) D5
type D2765 = :* (:* (:* D2 D7) D6) D5
type O5315 = :* (:* (:* D2 D7) D6) D5
type HACC = :* (:* (:* D2 D7) D6) D4
type D2764 = :* (:* (:* D2 D7) D6) D4
type O5314 = :* (:* (:* D2 D7) D6) D4
type HACB = :* (:* (:* D2 D7) D6) D3
type D2763 = :* (:* (:* D2 D7) D6) D3
type O5313 = :* (:* (:* D2 D7) D6) D3
type HACA = :* (:* (:* D2 D7) D6) D2
type D2762 = :* (:* (:* D2 D7) D6) D2
type O5312 = :* (:* (:* D2 D7) D6) D2
type HAC9 = :* (:* (:* D2 D7) D6) D1
type D2761 = :* (:* (:* D2 D7) D6) D1
type O5311 = :* (:* (:* D2 D7) D6) D1
type HAC8 = :* (:* (:* D2 D7) D6) D0
type D2760 = :* (:* (:* D2 D7) D6) D0
type O5310 = :* (:* (:* D2 D7) D6) D0
type HAC7 = :* (:* (:* D2 D7) D5) D9
type D2759 = :* (:* (:* D2 D7) D5) D9
type O5307 = :* (:* (:* D2 D7) D5) D9
type HAC6 = :* (:* (:* D2 D7) D5) D8
type D2758 = :* (:* (:* D2 D7) D5) D8
type O5306 = :* (:* (:* D2 D7) D5) D8
type HAC5 = :* (:* (:* D2 D7) D5) D7
type D2757 = :* (:* (:* D2 D7) D5) D7
type O5305 = :* (:* (:* D2 D7) D5) D7
type HAC4 = :* (:* (:* D2 D7) D5) D6
type D2756 = :* (:* (:* D2 D7) D5) D6
type O5304 = :* (:* (:* D2 D7) D5) D6
type HAC3 = :* (:* (:* D2 D7) D5) D5
type D2755 = :* (:* (:* D2 D7) D5) D5
type O5303 = :* (:* (:* D2 D7) D5) D5
type HAC2 = :* (:* (:* D2 D7) D5) D4
type D2754 = :* (:* (:* D2 D7) D5) D4
type O5302 = :* (:* (:* D2 D7) D5) D4
type HAC1 = :* (:* (:* D2 D7) D5) D3
type D2753 = :* (:* (:* D2 D7) D5) D3
type O5301 = :* (:* (:* D2 D7) D5) D3
type HAC0 = :* (:* (:* D2 D7) D5) D2
type D2752 = :* (:* (:* D2 D7) D5) D2
type O5300 = :* (:* (:* D2 D7) D5) D2
type HABF = :* (:* (:* D2 D7) D5) D1
type D2751 = :* (:* (:* D2 D7) D5) D1
type O5277 = :* (:* (:* D2 D7) D5) D1
type HABE = :* (:* (:* D2 D7) D5) D0
type D2750 = :* (:* (:* D2 D7) D5) D0
type O5276 = :* (:* (:* D2 D7) D5) D0
type HABD = :* (:* (:* D2 D7) D4) D9
type D2749 = :* (:* (:* D2 D7) D4) D9
type O5275 = :* (:* (:* D2 D7) D4) D9
type HABC = :* (:* (:* D2 D7) D4) D8
type D2748 = :* (:* (:* D2 D7) D4) D8
type O5274 = :* (:* (:* D2 D7) D4) D8
type HABB = :* (:* (:* D2 D7) D4) D7
type D2747 = :* (:* (:* D2 D7) D4) D7
type O5273 = :* (:* (:* D2 D7) D4) D7
type HABA = :* (:* (:* D2 D7) D4) D6
type D2746 = :* (:* (:* D2 D7) D4) D6
type O5272 = :* (:* (:* D2 D7) D4) D6
type HAB9 = :* (:* (:* D2 D7) D4) D5
type D2745 = :* (:* (:* D2 D7) D4) D5
type O5271 = :* (:* (:* D2 D7) D4) D5
type HAB8 = :* (:* (:* D2 D7) D4) D4
type D2744 = :* (:* (:* D2 D7) D4) D4
type O5270 = :* (:* (:* D2 D7) D4) D4
type HAB7 = :* (:* (:* D2 D7) D4) D3
type D2743 = :* (:* (:* D2 D7) D4) D3
type O5267 = :* (:* (:* D2 D7) D4) D3
type HAB6 = :* (:* (:* D2 D7) D4) D2
type D2742 = :* (:* (:* D2 D7) D4) D2
type O5266 = :* (:* (:* D2 D7) D4) D2
type HAB5 = :* (:* (:* D2 D7) D4) D1
type D2741 = :* (:* (:* D2 D7) D4) D1
type O5265 = :* (:* (:* D2 D7) D4) D1
type HAB4 = :* (:* (:* D2 D7) D4) D0
type D2740 = :* (:* (:* D2 D7) D4) D0
type O5264 = :* (:* (:* D2 D7) D4) D0
type HAB3 = :* (:* (:* D2 D7) D3) D9
type D2739 = :* (:* (:* D2 D7) D3) D9
type O5263 = :* (:* (:* D2 D7) D3) D9
type HAB2 = :* (:* (:* D2 D7) D3) D8
type D2738 = :* (:* (:* D2 D7) D3) D8
type O5262 = :* (:* (:* D2 D7) D3) D8
type HAB1 = :* (:* (:* D2 D7) D3) D7
type D2737 = :* (:* (:* D2 D7) D3) D7
type O5261 = :* (:* (:* D2 D7) D3) D7
type HAB0 = :* (:* (:* D2 D7) D3) D6
type D2736 = :* (:* (:* D2 D7) D3) D6
type O5260 = :* (:* (:* D2 D7) D3) D6
type HAAF = :* (:* (:* D2 D7) D3) D5
type D2735 = :* (:* (:* D2 D7) D3) D5
type O5257 = :* (:* (:* D2 D7) D3) D5
type HAAE = :* (:* (:* D2 D7) D3) D4
type D2734 = :* (:* (:* D2 D7) D3) D4
type O5256 = :* (:* (:* D2 D7) D3) D4
type HAAD = :* (:* (:* D2 D7) D3) D3
type D2733 = :* (:* (:* D2 D7) D3) D3
type O5255 = :* (:* (:* D2 D7) D3) D3
type HAAC = :* (:* (:* D2 D7) D3) D2
type D2732 = :* (:* (:* D2 D7) D3) D2
type O5254 = :* (:* (:* D2 D7) D3) D2
type HAAB = :* (:* (:* D2 D7) D3) D1
type D2731 = :* (:* (:* D2 D7) D3) D1
type O5253 = :* (:* (:* D2 D7) D3) D1
type HAAA = :* (:* (:* D2 D7) D3) D0
type D2730 = :* (:* (:* D2 D7) D3) D0
type O5252 = :* (:* (:* D2 D7) D3) D0
type HAA9 = :* (:* (:* D2 D7) D2) D9
type D2729 = :* (:* (:* D2 D7) D2) D9
type O5251 = :* (:* (:* D2 D7) D2) D9
type HAA8 = :* (:* (:* D2 D7) D2) D8
type D2728 = :* (:* (:* D2 D7) D2) D8
type O5250 = :* (:* (:* D2 D7) D2) D8
type HAA7 = :* (:* (:* D2 D7) D2) D7
type D2727 = :* (:* (:* D2 D7) D2) D7
type O5247 = :* (:* (:* D2 D7) D2) D7
type HAA6 = :* (:* (:* D2 D7) D2) D6
type D2726 = :* (:* (:* D2 D7) D2) D6
type O5246 = :* (:* (:* D2 D7) D2) D6
type HAA5 = :* (:* (:* D2 D7) D2) D5
type D2725 = :* (:* (:* D2 D7) D2) D5
type O5245 = :* (:* (:* D2 D7) D2) D5
type HAA4 = :* (:* (:* D2 D7) D2) D4
type D2724 = :* (:* (:* D2 D7) D2) D4
type O5244 = :* (:* (:* D2 D7) D2) D4
type HAA3 = :* (:* (:* D2 D7) D2) D3
type D2723 = :* (:* (:* D2 D7) D2) D3
type O5243 = :* (:* (:* D2 D7) D2) D3
type HAA2 = :* (:* (:* D2 D7) D2) D2
type D2722 = :* (:* (:* D2 D7) D2) D2
type O5242 = :* (:* (:* D2 D7) D2) D2
type HAA1 = :* (:* (:* D2 D7) D2) D1
type D2721 = :* (:* (:* D2 D7) D2) D1
type O5241 = :* (:* (:* D2 D7) D2) D1
type HAA0 = :* (:* (:* D2 D7) D2) D0
type D2720 = :* (:* (:* D2 D7) D2) D0
type O5240 = :* (:* (:* D2 D7) D2) D0
type HA9F = :* (:* (:* D2 D7) D1) D9
type D2719 = :* (:* (:* D2 D7) D1) D9
type O5237 = :* (:* (:* D2 D7) D1) D9
type HA9E = :* (:* (:* D2 D7) D1) D8
type D2718 = :* (:* (:* D2 D7) D1) D8
type O5236 = :* (:* (:* D2 D7) D1) D8
type HA9D = :* (:* (:* D2 D7) D1) D7
type D2717 = :* (:* (:* D2 D7) D1) D7
type O5235 = :* (:* (:* D2 D7) D1) D7
type HA9C = :* (:* (:* D2 D7) D1) D6
type D2716 = :* (:* (:* D2 D7) D1) D6
type O5234 = :* (:* (:* D2 D7) D1) D6
type HA9B = :* (:* (:* D2 D7) D1) D5
type D2715 = :* (:* (:* D2 D7) D1) D5
type O5233 = :* (:* (:* D2 D7) D1) D5
type HA9A = :* (:* (:* D2 D7) D1) D4
type D2714 = :* (:* (:* D2 D7) D1) D4
type O5232 = :* (:* (:* D2 D7) D1) D4
type HA99 = :* (:* (:* D2 D7) D1) D3
type D2713 = :* (:* (:* D2 D7) D1) D3
type O5231 = :* (:* (:* D2 D7) D1) D3
type HA98 = :* (:* (:* D2 D7) D1) D2
type D2712 = :* (:* (:* D2 D7) D1) D2
type O5230 = :* (:* (:* D2 D7) D1) D2
type HA97 = :* (:* (:* D2 D7) D1) D1
type D2711 = :* (:* (:* D2 D7) D1) D1
type O5227 = :* (:* (:* D2 D7) D1) D1
type HA96 = :* (:* (:* D2 D7) D1) D0
type D2710 = :* (:* (:* D2 D7) D1) D0
type O5226 = :* (:* (:* D2 D7) D1) D0
type HA95 = :* (:* (:* D2 D7) D0) D9
type D2709 = :* (:* (:* D2 D7) D0) D9
type O5225 = :* (:* (:* D2 D7) D0) D9
type HA94 = :* (:* (:* D2 D7) D0) D8
type D2708 = :* (:* (:* D2 D7) D0) D8
type O5224 = :* (:* (:* D2 D7) D0) D8
type HA93 = :* (:* (:* D2 D7) D0) D7
type D2707 = :* (:* (:* D2 D7) D0) D7
type O5223 = :* (:* (:* D2 D7) D0) D7
type HA92 = :* (:* (:* D2 D7) D0) D6
type D2706 = :* (:* (:* D2 D7) D0) D6
type O5222 = :* (:* (:* D2 D7) D0) D6
type HA91 = :* (:* (:* D2 D7) D0) D5
type D2705 = :* (:* (:* D2 D7) D0) D5
type O5221 = :* (:* (:* D2 D7) D0) D5
type HA90 = :* (:* (:* D2 D7) D0) D4
type D2704 = :* (:* (:* D2 D7) D0) D4
type O5220 = :* (:* (:* D2 D7) D0) D4
type HA8F = :* (:* (:* D2 D7) D0) D3
type D2703 = :* (:* (:* D2 D7) D0) D3
type O5217 = :* (:* (:* D2 D7) D0) D3
type HA8E = :* (:* (:* D2 D7) D0) D2
type D2702 = :* (:* (:* D2 D7) D0) D2
type O5216 = :* (:* (:* D2 D7) D0) D2
type HA8D = :* (:* (:* D2 D7) D0) D1
type D2701 = :* (:* (:* D2 D7) D0) D1
type O5215 = :* (:* (:* D2 D7) D0) D1
type HA8C = :* (:* (:* D2 D7) D0) D0
type D2700 = :* (:* (:* D2 D7) D0) D0
type O5214 = :* (:* (:* D2 D7) D0) D0
type HA8B = :* (:* (:* D2 D6) D9) D9
type D2699 = :* (:* (:* D2 D6) D9) D9
type O5213 = :* (:* (:* D2 D6) D9) D9
type HA8A = :* (:* (:* D2 D6) D9) D8
type D2698 = :* (:* (:* D2 D6) D9) D8
type O5212 = :* (:* (:* D2 D6) D9) D8
type HA89 = :* (:* (:* D2 D6) D9) D7
type D2697 = :* (:* (:* D2 D6) D9) D7
type O5211 = :* (:* (:* D2 D6) D9) D7
type HA88 = :* (:* (:* D2 D6) D9) D6
type D2696 = :* (:* (:* D2 D6) D9) D6
type O5210 = :* (:* (:* D2 D6) D9) D6
type HA87 = :* (:* (:* D2 D6) D9) D5
type D2695 = :* (:* (:* D2 D6) D9) D5
type O5207 = :* (:* (:* D2 D6) D9) D5
type HA86 = :* (:* (:* D2 D6) D9) D4
type D2694 = :* (:* (:* D2 D6) D9) D4
type O5206 = :* (:* (:* D2 D6) D9) D4
type HA85 = :* (:* (:* D2 D6) D9) D3
type D2693 = :* (:* (:* D2 D6) D9) D3
type O5205 = :* (:* (:* D2 D6) D9) D3
type HA84 = :* (:* (:* D2 D6) D9) D2
type D2692 = :* (:* (:* D2 D6) D9) D2
type O5204 = :* (:* (:* D2 D6) D9) D2
type HA83 = :* (:* (:* D2 D6) D9) D1
type D2691 = :* (:* (:* D2 D6) D9) D1
type O5203 = :* (:* (:* D2 D6) D9) D1
type HA82 = :* (:* (:* D2 D6) D9) D0
type D2690 = :* (:* (:* D2 D6) D9) D0
type O5202 = :* (:* (:* D2 D6) D9) D0
type HA81 = :* (:* (:* D2 D6) D8) D9
type D2689 = :* (:* (:* D2 D6) D8) D9
type O5201 = :* (:* (:* D2 D6) D8) D9
type HA80 = :* (:* (:* D2 D6) D8) D8
type D2688 = :* (:* (:* D2 D6) D8) D8
type O5200 = :* (:* (:* D2 D6) D8) D8
type HA7F = :* (:* (:* D2 D6) D8) D7
type D2687 = :* (:* (:* D2 D6) D8) D7
type O5177 = :* (:* (:* D2 D6) D8) D7
type HA7E = :* (:* (:* D2 D6) D8) D6
type D2686 = :* (:* (:* D2 D6) D8) D6
type O5176 = :* (:* (:* D2 D6) D8) D6
type HA7D = :* (:* (:* D2 D6) D8) D5
type D2685 = :* (:* (:* D2 D6) D8) D5
type O5175 = :* (:* (:* D2 D6) D8) D5
type HA7C = :* (:* (:* D2 D6) D8) D4
type D2684 = :* (:* (:* D2 D6) D8) D4
type O5174 = :* (:* (:* D2 D6) D8) D4
type HA7B = :* (:* (:* D2 D6) D8) D3
type D2683 = :* (:* (:* D2 D6) D8) D3
type O5173 = :* (:* (:* D2 D6) D8) D3
type HA7A = :* (:* (:* D2 D6) D8) D2
type D2682 = :* (:* (:* D2 D6) D8) D2
type O5172 = :* (:* (:* D2 D6) D8) D2
type HA79 = :* (:* (:* D2 D6) D8) D1
type D2681 = :* (:* (:* D2 D6) D8) D1
type O5171 = :* (:* (:* D2 D6) D8) D1
type HA78 = :* (:* (:* D2 D6) D8) D0
type D2680 = :* (:* (:* D2 D6) D8) D0
type O5170 = :* (:* (:* D2 D6) D8) D0
type HA77 = :* (:* (:* D2 D6) D7) D9
type D2679 = :* (:* (:* D2 D6) D7) D9
type O5167 = :* (:* (:* D2 D6) D7) D9
type HA76 = :* (:* (:* D2 D6) D7) D8
type D2678 = :* (:* (:* D2 D6) D7) D8
type O5166 = :* (:* (:* D2 D6) D7) D8
type HA75 = :* (:* (:* D2 D6) D7) D7
type D2677 = :* (:* (:* D2 D6) D7) D7
type O5165 = :* (:* (:* D2 D6) D7) D7
type HA74 = :* (:* (:* D2 D6) D7) D6
type D2676 = :* (:* (:* D2 D6) D7) D6
type O5164 = :* (:* (:* D2 D6) D7) D6
type HA73 = :* (:* (:* D2 D6) D7) D5
type D2675 = :* (:* (:* D2 D6) D7) D5
type O5163 = :* (:* (:* D2 D6) D7) D5
type HA72 = :* (:* (:* D2 D6) D7) D4
type D2674 = :* (:* (:* D2 D6) D7) D4
type O5162 = :* (:* (:* D2 D6) D7) D4
type HA71 = :* (:* (:* D2 D6) D7) D3
type D2673 = :* (:* (:* D2 D6) D7) D3
type O5161 = :* (:* (:* D2 D6) D7) D3
type HA70 = :* (:* (:* D2 D6) D7) D2
type D2672 = :* (:* (:* D2 D6) D7) D2
type O5160 = :* (:* (:* D2 D6) D7) D2
type HA6F = :* (:* (:* D2 D6) D7) D1
type D2671 = :* (:* (:* D2 D6) D7) D1
type O5157 = :* (:* (:* D2 D6) D7) D1
type HA6E = :* (:* (:* D2 D6) D7) D0
type D2670 = :* (:* (:* D2 D6) D7) D0
type O5156 = :* (:* (:* D2 D6) D7) D0
type HA6D = :* (:* (:* D2 D6) D6) D9
type D2669 = :* (:* (:* D2 D6) D6) D9
type O5155 = :* (:* (:* D2 D6) D6) D9
type HA6C = :* (:* (:* D2 D6) D6) D8
type D2668 = :* (:* (:* D2 D6) D6) D8
type O5154 = :* (:* (:* D2 D6) D6) D8
type HA6B = :* (:* (:* D2 D6) D6) D7
type D2667 = :* (:* (:* D2 D6) D6) D7
type O5153 = :* (:* (:* D2 D6) D6) D7
type HA6A = :* (:* (:* D2 D6) D6) D6
type D2666 = :* (:* (:* D2 D6) D6) D6
type O5152 = :* (:* (:* D2 D6) D6) D6
type HA69 = :* (:* (:* D2 D6) D6) D5
type D2665 = :* (:* (:* D2 D6) D6) D5
type O5151 = :* (:* (:* D2 D6) D6) D5
type HA68 = :* (:* (:* D2 D6) D6) D4
type D2664 = :* (:* (:* D2 D6) D6) D4
type O5150 = :* (:* (:* D2 D6) D6) D4
type HA67 = :* (:* (:* D2 D6) D6) D3
type D2663 = :* (:* (:* D2 D6) D6) D3
type O5147 = :* (:* (:* D2 D6) D6) D3
type HA66 = :* (:* (:* D2 D6) D6) D2
type D2662 = :* (:* (:* D2 D6) D6) D2
type O5146 = :* (:* (:* D2 D6) D6) D2
type HA65 = :* (:* (:* D2 D6) D6) D1
type D2661 = :* (:* (:* D2 D6) D6) D1
type O5145 = :* (:* (:* D2 D6) D6) D1
type HA64 = :* (:* (:* D2 D6) D6) D0
type D2660 = :* (:* (:* D2 D6) D6) D0
type O5144 = :* (:* (:* D2 D6) D6) D0
type HA63 = :* (:* (:* D2 D6) D5) D9
type D2659 = :* (:* (:* D2 D6) D5) D9
type O5143 = :* (:* (:* D2 D6) D5) D9
type HA62 = :* (:* (:* D2 D6) D5) D8
type D2658 = :* (:* (:* D2 D6) D5) D8
type O5142 = :* (:* (:* D2 D6) D5) D8
type HA61 = :* (:* (:* D2 D6) D5) D7
type D2657 = :* (:* (:* D2 D6) D5) D7
type O5141 = :* (:* (:* D2 D6) D5) D7
type HA60 = :* (:* (:* D2 D6) D5) D6
type D2656 = :* (:* (:* D2 D6) D5) D6
type O5140 = :* (:* (:* D2 D6) D5) D6
type HA5F = :* (:* (:* D2 D6) D5) D5
type D2655 = :* (:* (:* D2 D6) D5) D5
type O5137 = :* (:* (:* D2 D6) D5) D5
type HA5E = :* (:* (:* D2 D6) D5) D4
type D2654 = :* (:* (:* D2 D6) D5) D4
type O5136 = :* (:* (:* D2 D6) D5) D4
type HA5D = :* (:* (:* D2 D6) D5) D3
type D2653 = :* (:* (:* D2 D6) D5) D3
type O5135 = :* (:* (:* D2 D6) D5) D3
type HA5C = :* (:* (:* D2 D6) D5) D2
type D2652 = :* (:* (:* D2 D6) D5) D2
type O5134 = :* (:* (:* D2 D6) D5) D2
type HA5B = :* (:* (:* D2 D6) D5) D1
type D2651 = :* (:* (:* D2 D6) D5) D1
type O5133 = :* (:* (:* D2 D6) D5) D1
type HA5A = :* (:* (:* D2 D6) D5) D0
type D2650 = :* (:* (:* D2 D6) D5) D0
type O5132 = :* (:* (:* D2 D6) D5) D0
type HA59 = :* (:* (:* D2 D6) D4) D9
type D2649 = :* (:* (:* D2 D6) D4) D9
type O5131 = :* (:* (:* D2 D6) D4) D9
type HA58 = :* (:* (:* D2 D6) D4) D8
type D2648 = :* (:* (:* D2 D6) D4) D8
type O5130 = :* (:* (:* D2 D6) D4) D8
type HA57 = :* (:* (:* D2 D6) D4) D7
type D2647 = :* (:* (:* D2 D6) D4) D7
type O5127 = :* (:* (:* D2 D6) D4) D7
type HA56 = :* (:* (:* D2 D6) D4) D6
type D2646 = :* (:* (:* D2 D6) D4) D6
type O5126 = :* (:* (:* D2 D6) D4) D6
type HA55 = :* (:* (:* D2 D6) D4) D5
type D2645 = :* (:* (:* D2 D6) D4) D5
type O5125 = :* (:* (:* D2 D6) D4) D5
type HA54 = :* (:* (:* D2 D6) D4) D4
type D2644 = :* (:* (:* D2 D6) D4) D4
type O5124 = :* (:* (:* D2 D6) D4) D4
type HA53 = :* (:* (:* D2 D6) D4) D3
type D2643 = :* (:* (:* D2 D6) D4) D3
type O5123 = :* (:* (:* D2 D6) D4) D3
type HA52 = :* (:* (:* D2 D6) D4) D2
type D2642 = :* (:* (:* D2 D6) D4) D2
type O5122 = :* (:* (:* D2 D6) D4) D2
type HA51 = :* (:* (:* D2 D6) D4) D1
type D2641 = :* (:* (:* D2 D6) D4) D1
type O5121 = :* (:* (:* D2 D6) D4) D1
type HA50 = :* (:* (:* D2 D6) D4) D0
type D2640 = :* (:* (:* D2 D6) D4) D0
type O5120 = :* (:* (:* D2 D6) D4) D0
type HA4F = :* (:* (:* D2 D6) D3) D9
type D2639 = :* (:* (:* D2 D6) D3) D9
type O5117 = :* (:* (:* D2 D6) D3) D9
type HA4E = :* (:* (:* D2 D6) D3) D8
type D2638 = :* (:* (:* D2 D6) D3) D8
type O5116 = :* (:* (:* D2 D6) D3) D8
type HA4D = :* (:* (:* D2 D6) D3) D7
type D2637 = :* (:* (:* D2 D6) D3) D7
type O5115 = :* (:* (:* D2 D6) D3) D7
type HA4C = :* (:* (:* D2 D6) D3) D6
type D2636 = :* (:* (:* D2 D6) D3) D6
type O5114 = :* (:* (:* D2 D6) D3) D6
type HA4B = :* (:* (:* D2 D6) D3) D5
type D2635 = :* (:* (:* D2 D6) D3) D5
type O5113 = :* (:* (:* D2 D6) D3) D5
type HA4A = :* (:* (:* D2 D6) D3) D4
type D2634 = :* (:* (:* D2 D6) D3) D4
type O5112 = :* (:* (:* D2 D6) D3) D4
type HA49 = :* (:* (:* D2 D6) D3) D3
type D2633 = :* (:* (:* D2 D6) D3) D3
type O5111 = :* (:* (:* D2 D6) D3) D3
type HA48 = :* (:* (:* D2 D6) D3) D2
type D2632 = :* (:* (:* D2 D6) D3) D2
type O5110 = :* (:* (:* D2 D6) D3) D2
type HA47 = :* (:* (:* D2 D6) D3) D1
type D2631 = :* (:* (:* D2 D6) D3) D1
type O5107 = :* (:* (:* D2 D6) D3) D1
type HA46 = :* (:* (:* D2 D6) D3) D0
type D2630 = :* (:* (:* D2 D6) D3) D0
type O5106 = :* (:* (:* D2 D6) D3) D0
type HA45 = :* (:* (:* D2 D6) D2) D9
type D2629 = :* (:* (:* D2 D6) D2) D9
type O5105 = :* (:* (:* D2 D6) D2) D9
type HA44 = :* (:* (:* D2 D6) D2) D8
type D2628 = :* (:* (:* D2 D6) D2) D8
type O5104 = :* (:* (:* D2 D6) D2) D8
type HA43 = :* (:* (:* D2 D6) D2) D7
type D2627 = :* (:* (:* D2 D6) D2) D7
type O5103 = :* (:* (:* D2 D6) D2) D7
type HA42 = :* (:* (:* D2 D6) D2) D6
type D2626 = :* (:* (:* D2 D6) D2) D6
type O5102 = :* (:* (:* D2 D6) D2) D6
type HA41 = :* (:* (:* D2 D6) D2) D5
type D2625 = :* (:* (:* D2 D6) D2) D5
type O5101 = :* (:* (:* D2 D6) D2) D5
type HA40 = :* (:* (:* D2 D6) D2) D4
type D2624 = :* (:* (:* D2 D6) D2) D4
type O5100 = :* (:* (:* D2 D6) D2) D4
type HA3F = :* (:* (:* D2 D6) D2) D3
type D2623 = :* (:* (:* D2 D6) D2) D3
type O5077 = :* (:* (:* D2 D6) D2) D3
type HA3E = :* (:* (:* D2 D6) D2) D2
type D2622 = :* (:* (:* D2 D6) D2) D2
type O5076 = :* (:* (:* D2 D6) D2) D2
type HA3D = :* (:* (:* D2 D6) D2) D1
type D2621 = :* (:* (:* D2 D6) D2) D1
type O5075 = :* (:* (:* D2 D6) D2) D1
type HA3C = :* (:* (:* D2 D6) D2) D0
type D2620 = :* (:* (:* D2 D6) D2) D0
type O5074 = :* (:* (:* D2 D6) D2) D0
type HA3B = :* (:* (:* D2 D6) D1) D9
type D2619 = :* (:* (:* D2 D6) D1) D9
type O5073 = :* (:* (:* D2 D6) D1) D9
type HA3A = :* (:* (:* D2 D6) D1) D8
type D2618 = :* (:* (:* D2 D6) D1) D8
type O5072 = :* (:* (:* D2 D6) D1) D8
type HA39 = :* (:* (:* D2 D6) D1) D7
type D2617 = :* (:* (:* D2 D6) D1) D7
type O5071 = :* (:* (:* D2 D6) D1) D7
type HA38 = :* (:* (:* D2 D6) D1) D6
type D2616 = :* (:* (:* D2 D6) D1) D6
type O5070 = :* (:* (:* D2 D6) D1) D6
type HA37 = :* (:* (:* D2 D6) D1) D5
type D2615 = :* (:* (:* D2 D6) D1) D5
type O5067 = :* (:* (:* D2 D6) D1) D5
type HA36 = :* (:* (:* D2 D6) D1) D4
type D2614 = :* (:* (:* D2 D6) D1) D4
type O5066 = :* (:* (:* D2 D6) D1) D4
type HA35 = :* (:* (:* D2 D6) D1) D3
type D2613 = :* (:* (:* D2 D6) D1) D3
type O5065 = :* (:* (:* D2 D6) D1) D3
type HA34 = :* (:* (:* D2 D6) D1) D2
type D2612 = :* (:* (:* D2 D6) D1) D2
type O5064 = :* (:* (:* D2 D6) D1) D2
type HA33 = :* (:* (:* D2 D6) D1) D1
type D2611 = :* (:* (:* D2 D6) D1) D1
type O5063 = :* (:* (:* D2 D6) D1) D1
type HA32 = :* (:* (:* D2 D6) D1) D0
type D2610 = :* (:* (:* D2 D6) D1) D0
type O5062 = :* (:* (:* D2 D6) D1) D0
type HA31 = :* (:* (:* D2 D6) D0) D9
type D2609 = :* (:* (:* D2 D6) D0) D9
type O5061 = :* (:* (:* D2 D6) D0) D9
type HA30 = :* (:* (:* D2 D6) D0) D8
type D2608 = :* (:* (:* D2 D6) D0) D8
type O5060 = :* (:* (:* D2 D6) D0) D8
type HA2F = :* (:* (:* D2 D6) D0) D7
type D2607 = :* (:* (:* D2 D6) D0) D7
type O5057 = :* (:* (:* D2 D6) D0) D7
type HA2E = :* (:* (:* D2 D6) D0) D6
type D2606 = :* (:* (:* D2 D6) D0) D6
type O5056 = :* (:* (:* D2 D6) D0) D6
type HA2D = :* (:* (:* D2 D6) D0) D5
type D2605 = :* (:* (:* D2 D6) D0) D5
type O5055 = :* (:* (:* D2 D6) D0) D5
type HA2C = :* (:* (:* D2 D6) D0) D4
type D2604 = :* (:* (:* D2 D6) D0) D4
type O5054 = :* (:* (:* D2 D6) D0) D4
type HA2B = :* (:* (:* D2 D6) D0) D3
type D2603 = :* (:* (:* D2 D6) D0) D3
type O5053 = :* (:* (:* D2 D6) D0) D3
type HA2A = :* (:* (:* D2 D6) D0) D2
type D2602 = :* (:* (:* D2 D6) D0) D2
type O5052 = :* (:* (:* D2 D6) D0) D2
type HA29 = :* (:* (:* D2 D6) D0) D1
type D2601 = :* (:* (:* D2 D6) D0) D1
type O5051 = :* (:* (:* D2 D6) D0) D1
type HA28 = :* (:* (:* D2 D6) D0) D0
type D2600 = :* (:* (:* D2 D6) D0) D0
type O5050 = :* (:* (:* D2 D6) D0) D0
type HA27 = :* (:* (:* D2 D5) D9) D9
type D2599 = :* (:* (:* D2 D5) D9) D9
type O5047 = :* (:* (:* D2 D5) D9) D9
type HA26 = :* (:* (:* D2 D5) D9) D8
type D2598 = :* (:* (:* D2 D5) D9) D8
type O5046 = :* (:* (:* D2 D5) D9) D8
type HA25 = :* (:* (:* D2 D5) D9) D7
type D2597 = :* (:* (:* D2 D5) D9) D7
type O5045 = :* (:* (:* D2 D5) D9) D7
type HA24 = :* (:* (:* D2 D5) D9) D6
type D2596 = :* (:* (:* D2 D5) D9) D6
type O5044 = :* (:* (:* D2 D5) D9) D6
type HA23 = :* (:* (:* D2 D5) D9) D5
type D2595 = :* (:* (:* D2 D5) D9) D5
type O5043 = :* (:* (:* D2 D5) D9) D5
type HA22 = :* (:* (:* D2 D5) D9) D4
type D2594 = :* (:* (:* D2 D5) D9) D4
type O5042 = :* (:* (:* D2 D5) D9) D4
type HA21 = :* (:* (:* D2 D5) D9) D3
type D2593 = :* (:* (:* D2 D5) D9) D3
type O5041 = :* (:* (:* D2 D5) D9) D3
type HA20 = :* (:* (:* D2 D5) D9) D2
type D2592 = :* (:* (:* D2 D5) D9) D2
type O5040 = :* (:* (:* D2 D5) D9) D2
type HA1F = :* (:* (:* D2 D5) D9) D1
type D2591 = :* (:* (:* D2 D5) D9) D1
type O5037 = :* (:* (:* D2 D5) D9) D1
type HA1E = :* (:* (:* D2 D5) D9) D0
type D2590 = :* (:* (:* D2 D5) D9) D0
type O5036 = :* (:* (:* D2 D5) D9) D0
type HA1D = :* (:* (:* D2 D5) D8) D9
type D2589 = :* (:* (:* D2 D5) D8) D9
type O5035 = :* (:* (:* D2 D5) D8) D9
type HA1C = :* (:* (:* D2 D5) D8) D8
type D2588 = :* (:* (:* D2 D5) D8) D8
type O5034 = :* (:* (:* D2 D5) D8) D8
type HA1B = :* (:* (:* D2 D5) D8) D7
type D2587 = :* (:* (:* D2 D5) D8) D7
type O5033 = :* (:* (:* D2 D5) D8) D7
type HA1A = :* (:* (:* D2 D5) D8) D6
type D2586 = :* (:* (:* D2 D5) D8) D6
type O5032 = :* (:* (:* D2 D5) D8) D6
type HA19 = :* (:* (:* D2 D5) D8) D5
type D2585 = :* (:* (:* D2 D5) D8) D5
type O5031 = :* (:* (:* D2 D5) D8) D5
type HA18 = :* (:* (:* D2 D5) D8) D4
type D2584 = :* (:* (:* D2 D5) D8) D4
type O5030 = :* (:* (:* D2 D5) D8) D4
type HA17 = :* (:* (:* D2 D5) D8) D3
type D2583 = :* (:* (:* D2 D5) D8) D3
type O5027 = :* (:* (:* D2 D5) D8) D3
type HA16 = :* (:* (:* D2 D5) D8) D2
type D2582 = :* (:* (:* D2 D5) D8) D2
type O5026 = :* (:* (:* D2 D5) D8) D2
type HA15 = :* (:* (:* D2 D5) D8) D1
type D2581 = :* (:* (:* D2 D5) D8) D1
type O5025 = :* (:* (:* D2 D5) D8) D1
type HA14 = :* (:* (:* D2 D5) D8) D0
type D2580 = :* (:* (:* D2 D5) D8) D0
type O5024 = :* (:* (:* D2 D5) D8) D0
type HA13 = :* (:* (:* D2 D5) D7) D9
type D2579 = :* (:* (:* D2 D5) D7) D9
type O5023 = :* (:* (:* D2 D5) D7) D9
type HA12 = :* (:* (:* D2 D5) D7) D8
type D2578 = :* (:* (:* D2 D5) D7) D8
type O5022 = :* (:* (:* D2 D5) D7) D8
type HA11 = :* (:* (:* D2 D5) D7) D7
type D2577 = :* (:* (:* D2 D5) D7) D7
type O5021 = :* (:* (:* D2 D5) D7) D7
type HA10 = :* (:* (:* D2 D5) D7) D6
type D2576 = :* (:* (:* D2 D5) D7) D6
type O5020 = :* (:* (:* D2 D5) D7) D6
type HA0F = :* (:* (:* D2 D5) D7) D5
type D2575 = :* (:* (:* D2 D5) D7) D5
type O5017 = :* (:* (:* D2 D5) D7) D5
type HA0E = :* (:* (:* D2 D5) D7) D4
type D2574 = :* (:* (:* D2 D5) D7) D4
type O5016 = :* (:* (:* D2 D5) D7) D4
type HA0D = :* (:* (:* D2 D5) D7) D3
type D2573 = :* (:* (:* D2 D5) D7) D3
type O5015 = :* (:* (:* D2 D5) D7) D3
type HA0C = :* (:* (:* D2 D5) D7) D2
type D2572 = :* (:* (:* D2 D5) D7) D2
type O5014 = :* (:* (:* D2 D5) D7) D2
type HA0B = :* (:* (:* D2 D5) D7) D1
type D2571 = :* (:* (:* D2 D5) D7) D1
type O5013 = :* (:* (:* D2 D5) D7) D1
type HA0A = :* (:* (:* D2 D5) D7) D0
type D2570 = :* (:* (:* D2 D5) D7) D0
type O5012 = :* (:* (:* D2 D5) D7) D0
type HA09 = :* (:* (:* D2 D5) D6) D9
type D2569 = :* (:* (:* D2 D5) D6) D9
type O5011 = :* (:* (:* D2 D5) D6) D9
type HA08 = :* (:* (:* D2 D5) D6) D8
type D2568 = :* (:* (:* D2 D5) D6) D8
type O5010 = :* (:* (:* D2 D5) D6) D8
type HA07 = :* (:* (:* D2 D5) D6) D7
type D2567 = :* (:* (:* D2 D5) D6) D7
type O5007 = :* (:* (:* D2 D5) D6) D7
type HA06 = :* (:* (:* D2 D5) D6) D6
type D2566 = :* (:* (:* D2 D5) D6) D6
type O5006 = :* (:* (:* D2 D5) D6) D6
type HA05 = :* (:* (:* D2 D5) D6) D5
type D2565 = :* (:* (:* D2 D5) D6) D5
type O5005 = :* (:* (:* D2 D5) D6) D5
type HA04 = :* (:* (:* D2 D5) D6) D4
type D2564 = :* (:* (:* D2 D5) D6) D4
type O5004 = :* (:* (:* D2 D5) D6) D4
type HA03 = :* (:* (:* D2 D5) D6) D3
type D2563 = :* (:* (:* D2 D5) D6) D3
type O5003 = :* (:* (:* D2 D5) D6) D3
type HA02 = :* (:* (:* D2 D5) D6) D2
type D2562 = :* (:* (:* D2 D5) D6) D2
type O5002 = :* (:* (:* D2 D5) D6) D2
type HA01 = :* (:* (:* D2 D5) D6) D1
type D2561 = :* (:* (:* D2 D5) D6) D1
type O5001 = :* (:* (:* D2 D5) D6) D1
type HA00 = :* (:* (:* D2 D5) D6) D0
type D2560 = :* (:* (:* D2 D5) D6) D0
type O5000 = :* (:* (:* D2 D5) D6) D0
type H9FF = :* (:* (:* D2 D5) D5) D9
type D2559 = :* (:* (:* D2 D5) D5) D9
type O4777 = :* (:* (:* D2 D5) D5) D9
type H9FE = :* (:* (:* D2 D5) D5) D8
type D2558 = :* (:* (:* D2 D5) D5) D8
type O4776 = :* (:* (:* D2 D5) D5) D8
type H9FD = :* (:* (:* D2 D5) D5) D7
type D2557 = :* (:* (:* D2 D5) D5) D7
type O4775 = :* (:* (:* D2 D5) D5) D7
type H9FC = :* (:* (:* D2 D5) D5) D6
type D2556 = :* (:* (:* D2 D5) D5) D6
type O4774 = :* (:* (:* D2 D5) D5) D6
type H9FB = :* (:* (:* D2 D5) D5) D5
type D2555 = :* (:* (:* D2 D5) D5) D5
type O4773 = :* (:* (:* D2 D5) D5) D5
type H9FA = :* (:* (:* D2 D5) D5) D4
type D2554 = :* (:* (:* D2 D5) D5) D4
type O4772 = :* (:* (:* D2 D5) D5) D4
type H9F9 = :* (:* (:* D2 D5) D5) D3
type D2553 = :* (:* (:* D2 D5) D5) D3
type O4771 = :* (:* (:* D2 D5) D5) D3
type H9F8 = :* (:* (:* D2 D5) D5) D2
type D2552 = :* (:* (:* D2 D5) D5) D2
type O4770 = :* (:* (:* D2 D5) D5) D2
type H9F7 = :* (:* (:* D2 D5) D5) D1
type D2551 = :* (:* (:* D2 D5) D5) D1
type O4767 = :* (:* (:* D2 D5) D5) D1
type H9F6 = :* (:* (:* D2 D5) D5) D0
type D2550 = :* (:* (:* D2 D5) D5) D0
type O4766 = :* (:* (:* D2 D5) D5) D0
type H9F5 = :* (:* (:* D2 D5) D4) D9
type D2549 = :* (:* (:* D2 D5) D4) D9
type O4765 = :* (:* (:* D2 D5) D4) D9
type H9F4 = :* (:* (:* D2 D5) D4) D8
type D2548 = :* (:* (:* D2 D5) D4) D8
type O4764 = :* (:* (:* D2 D5) D4) D8
type H9F3 = :* (:* (:* D2 D5) D4) D7
type D2547 = :* (:* (:* D2 D5) D4) D7
type O4763 = :* (:* (:* D2 D5) D4) D7
type H9F2 = :* (:* (:* D2 D5) D4) D6
type D2546 = :* (:* (:* D2 D5) D4) D6
type O4762 = :* (:* (:* D2 D5) D4) D6
type H9F1 = :* (:* (:* D2 D5) D4) D5
type D2545 = :* (:* (:* D2 D5) D4) D5
type O4761 = :* (:* (:* D2 D5) D4) D5
type H9F0 = :* (:* (:* D2 D5) D4) D4
type D2544 = :* (:* (:* D2 D5) D4) D4
type O4760 = :* (:* (:* D2 D5) D4) D4
type H9EF = :* (:* (:* D2 D5) D4) D3
type D2543 = :* (:* (:* D2 D5) D4) D3
type O4757 = :* (:* (:* D2 D5) D4) D3
type H9EE = :* (:* (:* D2 D5) D4) D2
type D2542 = :* (:* (:* D2 D5) D4) D2
type O4756 = :* (:* (:* D2 D5) D4) D2
type H9ED = :* (:* (:* D2 D5) D4) D1
type D2541 = :* (:* (:* D2 D5) D4) D1
type O4755 = :* (:* (:* D2 D5) D4) D1
type H9EC = :* (:* (:* D2 D5) D4) D0
type D2540 = :* (:* (:* D2 D5) D4) D0
type O4754 = :* (:* (:* D2 D5) D4) D0
type H9EB = :* (:* (:* D2 D5) D3) D9
type D2539 = :* (:* (:* D2 D5) D3) D9
type O4753 = :* (:* (:* D2 D5) D3) D9
type H9EA = :* (:* (:* D2 D5) D3) D8
type D2538 = :* (:* (:* D2 D5) D3) D8
type O4752 = :* (:* (:* D2 D5) D3) D8
type H9E9 = :* (:* (:* D2 D5) D3) D7
type D2537 = :* (:* (:* D2 D5) D3) D7
type O4751 = :* (:* (:* D2 D5) D3) D7
type H9E8 = :* (:* (:* D2 D5) D3) D6
type D2536 = :* (:* (:* D2 D5) D3) D6
type O4750 = :* (:* (:* D2 D5) D3) D6
type H9E7 = :* (:* (:* D2 D5) D3) D5
type D2535 = :* (:* (:* D2 D5) D3) D5
type O4747 = :* (:* (:* D2 D5) D3) D5
type H9E6 = :* (:* (:* D2 D5) D3) D4
type D2534 = :* (:* (:* D2 D5) D3) D4
type O4746 = :* (:* (:* D2 D5) D3) D4
type H9E5 = :* (:* (:* D2 D5) D3) D3
type D2533 = :* (:* (:* D2 D5) D3) D3
type O4745 = :* (:* (:* D2 D5) D3) D3
type H9E4 = :* (:* (:* D2 D5) D3) D2
type D2532 = :* (:* (:* D2 D5) D3) D2
type O4744 = :* (:* (:* D2 D5) D3) D2
type H9E3 = :* (:* (:* D2 D5) D3) D1
type D2531 = :* (:* (:* D2 D5) D3) D1
type O4743 = :* (:* (:* D2 D5) D3) D1
type H9E2 = :* (:* (:* D2 D5) D3) D0
type D2530 = :* (:* (:* D2 D5) D3) D0
type O4742 = :* (:* (:* D2 D5) D3) D0
type H9E1 = :* (:* (:* D2 D5) D2) D9
type D2529 = :* (:* (:* D2 D5) D2) D9
type O4741 = :* (:* (:* D2 D5) D2) D9
type H9E0 = :* (:* (:* D2 D5) D2) D8
type D2528 = :* (:* (:* D2 D5) D2) D8
type O4740 = :* (:* (:* D2 D5) D2) D8
type H9DF = :* (:* (:* D2 D5) D2) D7
type D2527 = :* (:* (:* D2 D5) D2) D7
type O4737 = :* (:* (:* D2 D5) D2) D7
type H9DE = :* (:* (:* D2 D5) D2) D6
type D2526 = :* (:* (:* D2 D5) D2) D6
type O4736 = :* (:* (:* D2 D5) D2) D6
type H9DD = :* (:* (:* D2 D5) D2) D5
type D2525 = :* (:* (:* D2 D5) D2) D5
type O4735 = :* (:* (:* D2 D5) D2) D5
type H9DC = :* (:* (:* D2 D5) D2) D4
type D2524 = :* (:* (:* D2 D5) D2) D4
type O4734 = :* (:* (:* D2 D5) D2) D4
type H9DB = :* (:* (:* D2 D5) D2) D3
type D2523 = :* (:* (:* D2 D5) D2) D3
type O4733 = :* (:* (:* D2 D5) D2) D3
type H9DA = :* (:* (:* D2 D5) D2) D2
type D2522 = :* (:* (:* D2 D5) D2) D2
type O4732 = :* (:* (:* D2 D5) D2) D2
type H9D9 = :* (:* (:* D2 D5) D2) D1
type D2521 = :* (:* (:* D2 D5) D2) D1
type O4731 = :* (:* (:* D2 D5) D2) D1
type H9D8 = :* (:* (:* D2 D5) D2) D0
type D2520 = :* (:* (:* D2 D5) D2) D0
type O4730 = :* (:* (:* D2 D5) D2) D0
type H9D7 = :* (:* (:* D2 D5) D1) D9
type D2519 = :* (:* (:* D2 D5) D1) D9
type O4727 = :* (:* (:* D2 D5) D1) D9
type H9D6 = :* (:* (:* D2 D5) D1) D8
type D2518 = :* (:* (:* D2 D5) D1) D8
type O4726 = :* (:* (:* D2 D5) D1) D8
type H9D5 = :* (:* (:* D2 D5) D1) D7
type D2517 = :* (:* (:* D2 D5) D1) D7
type O4725 = :* (:* (:* D2 D5) D1) D7
type H9D4 = :* (:* (:* D2 D5) D1) D6
type D2516 = :* (:* (:* D2 D5) D1) D6
type O4724 = :* (:* (:* D2 D5) D1) D6
type H9D3 = :* (:* (:* D2 D5) D1) D5
type D2515 = :* (:* (:* D2 D5) D1) D5
type O4723 = :* (:* (:* D2 D5) D1) D5
type H9D2 = :* (:* (:* D2 D5) D1) D4
type D2514 = :* (:* (:* D2 D5) D1) D4
type O4722 = :* (:* (:* D2 D5) D1) D4
type H9D1 = :* (:* (:* D2 D5) D1) D3
type D2513 = :* (:* (:* D2 D5) D1) D3
type O4721 = :* (:* (:* D2 D5) D1) D3
type H9D0 = :* (:* (:* D2 D5) D1) D2
type D2512 = :* (:* (:* D2 D5) D1) D2
type O4720 = :* (:* (:* D2 D5) D1) D2
type H9CF = :* (:* (:* D2 D5) D1) D1
type D2511 = :* (:* (:* D2 D5) D1) D1
type O4717 = :* (:* (:* D2 D5) D1) D1
type H9CE = :* (:* (:* D2 D5) D1) D0
type D2510 = :* (:* (:* D2 D5) D1) D0
type O4716 = :* (:* (:* D2 D5) D1) D0
type H9CD = :* (:* (:* D2 D5) D0) D9
type D2509 = :* (:* (:* D2 D5) D0) D9
type O4715 = :* (:* (:* D2 D5) D0) D9
type H9CC = :* (:* (:* D2 D5) D0) D8
type D2508 = :* (:* (:* D2 D5) D0) D8
type O4714 = :* (:* (:* D2 D5) D0) D8
type H9CB = :* (:* (:* D2 D5) D0) D7
type D2507 = :* (:* (:* D2 D5) D0) D7
type O4713 = :* (:* (:* D2 D5) D0) D7
type H9CA = :* (:* (:* D2 D5) D0) D6
type D2506 = :* (:* (:* D2 D5) D0) D6
type O4712 = :* (:* (:* D2 D5) D0) D6
type H9C9 = :* (:* (:* D2 D5) D0) D5
type D2505 = :* (:* (:* D2 D5) D0) D5
type O4711 = :* (:* (:* D2 D5) D0) D5
type H9C8 = :* (:* (:* D2 D5) D0) D4
type D2504 = :* (:* (:* D2 D5) D0) D4
type O4710 = :* (:* (:* D2 D5) D0) D4
type H9C7 = :* (:* (:* D2 D5) D0) D3
type D2503 = :* (:* (:* D2 D5) D0) D3
type O4707 = :* (:* (:* D2 D5) D0) D3
type H9C6 = :* (:* (:* D2 D5) D0) D2
type D2502 = :* (:* (:* D2 D5) D0) D2
type O4706 = :* (:* (:* D2 D5) D0) D2
type H9C5 = :* (:* (:* D2 D5) D0) D1
type D2501 = :* (:* (:* D2 D5) D0) D1
type O4705 = :* (:* (:* D2 D5) D0) D1
type H9C4 = :* (:* (:* D2 D5) D0) D0
type D2500 = :* (:* (:* D2 D5) D0) D0
type O4704 = :* (:* (:* D2 D5) D0) D0
type H9C3 = :* (:* (:* D2 D4) D9) D9
type D2499 = :* (:* (:* D2 D4) D9) D9
type O4703 = :* (:* (:* D2 D4) D9) D9
type H9C2 = :* (:* (:* D2 D4) D9) D8
type D2498 = :* (:* (:* D2 D4) D9) D8
type O4702 = :* (:* (:* D2 D4) D9) D8
type H9C1 = :* (:* (:* D2 D4) D9) D7
type D2497 = :* (:* (:* D2 D4) D9) D7
type O4701 = :* (:* (:* D2 D4) D9) D7
type H9C0 = :* (:* (:* D2 D4) D9) D6
type D2496 = :* (:* (:* D2 D4) D9) D6
type O4700 = :* (:* (:* D2 D4) D9) D6
type H9BF = :* (:* (:* D2 D4) D9) D5
type D2495 = :* (:* (:* D2 D4) D9) D5
type O4677 = :* (:* (:* D2 D4) D9) D5
type H9BE = :* (:* (:* D2 D4) D9) D4
type D2494 = :* (:* (:* D2 D4) D9) D4
type O4676 = :* (:* (:* D2 D4) D9) D4
type H9BD = :* (:* (:* D2 D4) D9) D3
type D2493 = :* (:* (:* D2 D4) D9) D3
type O4675 = :* (:* (:* D2 D4) D9) D3
type H9BC = :* (:* (:* D2 D4) D9) D2
type D2492 = :* (:* (:* D2 D4) D9) D2
type O4674 = :* (:* (:* D2 D4) D9) D2
type H9BB = :* (:* (:* D2 D4) D9) D1
type D2491 = :* (:* (:* D2 D4) D9) D1
type O4673 = :* (:* (:* D2 D4) D9) D1
type H9BA = :* (:* (:* D2 D4) D9) D0
type D2490 = :* (:* (:* D2 D4) D9) D0
type O4672 = :* (:* (:* D2 D4) D9) D0
type H9B9 = :* (:* (:* D2 D4) D8) D9
type D2489 = :* (:* (:* D2 D4) D8) D9
type O4671 = :* (:* (:* D2 D4) D8) D9
type H9B8 = :* (:* (:* D2 D4) D8) D8
type D2488 = :* (:* (:* D2 D4) D8) D8
type O4670 = :* (:* (:* D2 D4) D8) D8
type H9B7 = :* (:* (:* D2 D4) D8) D7
type D2487 = :* (:* (:* D2 D4) D8) D7
type O4667 = :* (:* (:* D2 D4) D8) D7
type H9B6 = :* (:* (:* D2 D4) D8) D6
type D2486 = :* (:* (:* D2 D4) D8) D6
type O4666 = :* (:* (:* D2 D4) D8) D6
type H9B5 = :* (:* (:* D2 D4) D8) D5
type D2485 = :* (:* (:* D2 D4) D8) D5
type O4665 = :* (:* (:* D2 D4) D8) D5
type H9B4 = :* (:* (:* D2 D4) D8) D4
type D2484 = :* (:* (:* D2 D4) D8) D4
type O4664 = :* (:* (:* D2 D4) D8) D4
type H9B3 = :* (:* (:* D2 D4) D8) D3
type D2483 = :* (:* (:* D2 D4) D8) D3
type O4663 = :* (:* (:* D2 D4) D8) D3
type H9B2 = :* (:* (:* D2 D4) D8) D2
type D2482 = :* (:* (:* D2 D4) D8) D2
type O4662 = :* (:* (:* D2 D4) D8) D2
type H9B1 = :* (:* (:* D2 D4) D8) D1
type D2481 = :* (:* (:* D2 D4) D8) D1
type O4661 = :* (:* (:* D2 D4) D8) D1
type H9B0 = :* (:* (:* D2 D4) D8) D0
type D2480 = :* (:* (:* D2 D4) D8) D0
type O4660 = :* (:* (:* D2 D4) D8) D0
type H9AF = :* (:* (:* D2 D4) D7) D9
type D2479 = :* (:* (:* D2 D4) D7) D9
type O4657 = :* (:* (:* D2 D4) D7) D9
type H9AE = :* (:* (:* D2 D4) D7) D8
type D2478 = :* (:* (:* D2 D4) D7) D8
type O4656 = :* (:* (:* D2 D4) D7) D8
type H9AD = :* (:* (:* D2 D4) D7) D7
type D2477 = :* (:* (:* D2 D4) D7) D7
type O4655 = :* (:* (:* D2 D4) D7) D7
type H9AC = :* (:* (:* D2 D4) D7) D6
type D2476 = :* (:* (:* D2 D4) D7) D6
type O4654 = :* (:* (:* D2 D4) D7) D6
type H9AB = :* (:* (:* D2 D4) D7) D5
type D2475 = :* (:* (:* D2 D4) D7) D5
type O4653 = :* (:* (:* D2 D4) D7) D5
type H9AA = :* (:* (:* D2 D4) D7) D4
type D2474 = :* (:* (:* D2 D4) D7) D4
type O4652 = :* (:* (:* D2 D4) D7) D4
type H9A9 = :* (:* (:* D2 D4) D7) D3
type D2473 = :* (:* (:* D2 D4) D7) D3
type O4651 = :* (:* (:* D2 D4) D7) D3
type H9A8 = :* (:* (:* D2 D4) D7) D2
type D2472 = :* (:* (:* D2 D4) D7) D2
type O4650 = :* (:* (:* D2 D4) D7) D2
type H9A7 = :* (:* (:* D2 D4) D7) D1
type D2471 = :* (:* (:* D2 D4) D7) D1
type O4647 = :* (:* (:* D2 D4) D7) D1
type H9A6 = :* (:* (:* D2 D4) D7) D0
type D2470 = :* (:* (:* D2 D4) D7) D0
type O4646 = :* (:* (:* D2 D4) D7) D0
type H9A5 = :* (:* (:* D2 D4) D6) D9
type D2469 = :* (:* (:* D2 D4) D6) D9
type O4645 = :* (:* (:* D2 D4) D6) D9
type H9A4 = :* (:* (:* D2 D4) D6) D8
type D2468 = :* (:* (:* D2 D4) D6) D8
type O4644 = :* (:* (:* D2 D4) D6) D8
type H9A3 = :* (:* (:* D2 D4) D6) D7
type D2467 = :* (:* (:* D2 D4) D6) D7
type O4643 = :* (:* (:* D2 D4) D6) D7
type H9A2 = :* (:* (:* D2 D4) D6) D6
type D2466 = :* (:* (:* D2 D4) D6) D6
type O4642 = :* (:* (:* D2 D4) D6) D6
type H9A1 = :* (:* (:* D2 D4) D6) D5
type D2465 = :* (:* (:* D2 D4) D6) D5
type O4641 = :* (:* (:* D2 D4) D6) D5
type H9A0 = :* (:* (:* D2 D4) D6) D4
type D2464 = :* (:* (:* D2 D4) D6) D4
type O4640 = :* (:* (:* D2 D4) D6) D4
type H99F = :* (:* (:* D2 D4) D6) D3
type D2463 = :* (:* (:* D2 D4) D6) D3
type O4637 = :* (:* (:* D2 D4) D6) D3
type H99E = :* (:* (:* D2 D4) D6) D2
type D2462 = :* (:* (:* D2 D4) D6) D2
type O4636 = :* (:* (:* D2 D4) D6) D2
type H99D = :* (:* (:* D2 D4) D6) D1
type D2461 = :* (:* (:* D2 D4) D6) D1
type O4635 = :* (:* (:* D2 D4) D6) D1
type H99C = :* (:* (:* D2 D4) D6) D0
type D2460 = :* (:* (:* D2 D4) D6) D0
type O4634 = :* (:* (:* D2 D4) D6) D0
type H99B = :* (:* (:* D2 D4) D5) D9
type D2459 = :* (:* (:* D2 D4) D5) D9
type O4633 = :* (:* (:* D2 D4) D5) D9
type H99A = :* (:* (:* D2 D4) D5) D8
type D2458 = :* (:* (:* D2 D4) D5) D8
type O4632 = :* (:* (:* D2 D4) D5) D8
type H999 = :* (:* (:* D2 D4) D5) D7
type D2457 = :* (:* (:* D2 D4) D5) D7
type O4631 = :* (:* (:* D2 D4) D5) D7
type H998 = :* (:* (:* D2 D4) D5) D6
type D2456 = :* (:* (:* D2 D4) D5) D6
type O4630 = :* (:* (:* D2 D4) D5) D6
type H997 = :* (:* (:* D2 D4) D5) D5
type D2455 = :* (:* (:* D2 D4) D5) D5
type O4627 = :* (:* (:* D2 D4) D5) D5
type H996 = :* (:* (:* D2 D4) D5) D4
type D2454 = :* (:* (:* D2 D4) D5) D4
type O4626 = :* (:* (:* D2 D4) D5) D4
type H995 = :* (:* (:* D2 D4) D5) D3
type D2453 = :* (:* (:* D2 D4) D5) D3
type O4625 = :* (:* (:* D2 D4) D5) D3
type H994 = :* (:* (:* D2 D4) D5) D2
type D2452 = :* (:* (:* D2 D4) D5) D2
type O4624 = :* (:* (:* D2 D4) D5) D2
type H993 = :* (:* (:* D2 D4) D5) D1
type D2451 = :* (:* (:* D2 D4) D5) D1
type O4623 = :* (:* (:* D2 D4) D5) D1
type H992 = :* (:* (:* D2 D4) D5) D0
type D2450 = :* (:* (:* D2 D4) D5) D0
type O4622 = :* (:* (:* D2 D4) D5) D0
type H991 = :* (:* (:* D2 D4) D4) D9
type D2449 = :* (:* (:* D2 D4) D4) D9
type O4621 = :* (:* (:* D2 D4) D4) D9
type H990 = :* (:* (:* D2 D4) D4) D8
type D2448 = :* (:* (:* D2 D4) D4) D8
type O4620 = :* (:* (:* D2 D4) D4) D8
type H98F = :* (:* (:* D2 D4) D4) D7
type D2447 = :* (:* (:* D2 D4) D4) D7
type O4617 = :* (:* (:* D2 D4) D4) D7
type H98E = :* (:* (:* D2 D4) D4) D6
type D2446 = :* (:* (:* D2 D4) D4) D6
type O4616 = :* (:* (:* D2 D4) D4) D6
type H98D = :* (:* (:* D2 D4) D4) D5
type D2445 = :* (:* (:* D2 D4) D4) D5
type O4615 = :* (:* (:* D2 D4) D4) D5
type H98C = :* (:* (:* D2 D4) D4) D4
type D2444 = :* (:* (:* D2 D4) D4) D4
type O4614 = :* (:* (:* D2 D4) D4) D4
type H98B = :* (:* (:* D2 D4) D4) D3
type D2443 = :* (:* (:* D2 D4) D4) D3
type O4613 = :* (:* (:* D2 D4) D4) D3
type H98A = :* (:* (:* D2 D4) D4) D2
type D2442 = :* (:* (:* D2 D4) D4) D2
type O4612 = :* (:* (:* D2 D4) D4) D2
type H989 = :* (:* (:* D2 D4) D4) D1
type D2441 = :* (:* (:* D2 D4) D4) D1
type O4611 = :* (:* (:* D2 D4) D4) D1
type H988 = :* (:* (:* D2 D4) D4) D0
type D2440 = :* (:* (:* D2 D4) D4) D0
type O4610 = :* (:* (:* D2 D4) D4) D0
type H987 = :* (:* (:* D2 D4) D3) D9
type D2439 = :* (:* (:* D2 D4) D3) D9
type O4607 = :* (:* (:* D2 D4) D3) D9
type H986 = :* (:* (:* D2 D4) D3) D8
type D2438 = :* (:* (:* D2 D4) D3) D8
type O4606 = :* (:* (:* D2 D4) D3) D8
type H985 = :* (:* (:* D2 D4) D3) D7
type D2437 = :* (:* (:* D2 D4) D3) D7
type O4605 = :* (:* (:* D2 D4) D3) D7
type H984 = :* (:* (:* D2 D4) D3) D6
type D2436 = :* (:* (:* D2 D4) D3) D6
type O4604 = :* (:* (:* D2 D4) D3) D6
type H983 = :* (:* (:* D2 D4) D3) D5
type D2435 = :* (:* (:* D2 D4) D3) D5
type O4603 = :* (:* (:* D2 D4) D3) D5
type H982 = :* (:* (:* D2 D4) D3) D4
type D2434 = :* (:* (:* D2 D4) D3) D4
type O4602 = :* (:* (:* D2 D4) D3) D4
type H981 = :* (:* (:* D2 D4) D3) D3
type D2433 = :* (:* (:* D2 D4) D3) D3
type O4601 = :* (:* (:* D2 D4) D3) D3
type H980 = :* (:* (:* D2 D4) D3) D2
type D2432 = :* (:* (:* D2 D4) D3) D2
type O4600 = :* (:* (:* D2 D4) D3) D2
type H97F = :* (:* (:* D2 D4) D3) D1
type D2431 = :* (:* (:* D2 D4) D3) D1
type O4577 = :* (:* (:* D2 D4) D3) D1
type H97E = :* (:* (:* D2 D4) D3) D0
type D2430 = :* (:* (:* D2 D4) D3) D0
type O4576 = :* (:* (:* D2 D4) D3) D0
type H97D = :* (:* (:* D2 D4) D2) D9
type D2429 = :* (:* (:* D2 D4) D2) D9
type O4575 = :* (:* (:* D2 D4) D2) D9
type H97C = :* (:* (:* D2 D4) D2) D8
type D2428 = :* (:* (:* D2 D4) D2) D8
type O4574 = :* (:* (:* D2 D4) D2) D8
type H97B = :* (:* (:* D2 D4) D2) D7
type D2427 = :* (:* (:* D2 D4) D2) D7
type O4573 = :* (:* (:* D2 D4) D2) D7
type H97A = :* (:* (:* D2 D4) D2) D6
type D2426 = :* (:* (:* D2 D4) D2) D6
type O4572 = :* (:* (:* D2 D4) D2) D6
type H979 = :* (:* (:* D2 D4) D2) D5
type D2425 = :* (:* (:* D2 D4) D2) D5
type O4571 = :* (:* (:* D2 D4) D2) D5
type H978 = :* (:* (:* D2 D4) D2) D4
type D2424 = :* (:* (:* D2 D4) D2) D4
type O4570 = :* (:* (:* D2 D4) D2) D4
type H977 = :* (:* (:* D2 D4) D2) D3
type D2423 = :* (:* (:* D2 D4) D2) D3
type O4567 = :* (:* (:* D2 D4) D2) D3
type H976 = :* (:* (:* D2 D4) D2) D2
type D2422 = :* (:* (:* D2 D4) D2) D2
type O4566 = :* (:* (:* D2 D4) D2) D2
type H975 = :* (:* (:* D2 D4) D2) D1
type D2421 = :* (:* (:* D2 D4) D2) D1
type O4565 = :* (:* (:* D2 D4) D2) D1
type H974 = :* (:* (:* D2 D4) D2) D0
type D2420 = :* (:* (:* D2 D4) D2) D0
type O4564 = :* (:* (:* D2 D4) D2) D0
type H973 = :* (:* (:* D2 D4) D1) D9
type D2419 = :* (:* (:* D2 D4) D1) D9
type O4563 = :* (:* (:* D2 D4) D1) D9
type H972 = :* (:* (:* D2 D4) D1) D8
type D2418 = :* (:* (:* D2 D4) D1) D8
type O4562 = :* (:* (:* D2 D4) D1) D8
type H971 = :* (:* (:* D2 D4) D1) D7
type D2417 = :* (:* (:* D2 D4) D1) D7
type O4561 = :* (:* (:* D2 D4) D1) D7
type H970 = :* (:* (:* D2 D4) D1) D6
type D2416 = :* (:* (:* D2 D4) D1) D6
type O4560 = :* (:* (:* D2 D4) D1) D6
type H96F = :* (:* (:* D2 D4) D1) D5
type D2415 = :* (:* (:* D2 D4) D1) D5
type O4557 = :* (:* (:* D2 D4) D1) D5
type H96E = :* (:* (:* D2 D4) D1) D4
type D2414 = :* (:* (:* D2 D4) D1) D4
type O4556 = :* (:* (:* D2 D4) D1) D4
type H96D = :* (:* (:* D2 D4) D1) D3
type D2413 = :* (:* (:* D2 D4) D1) D3
type O4555 = :* (:* (:* D2 D4) D1) D3
type H96C = :* (:* (:* D2 D4) D1) D2
type D2412 = :* (:* (:* D2 D4) D1) D2
type O4554 = :* (:* (:* D2 D4) D1) D2
type H96B = :* (:* (:* D2 D4) D1) D1
type D2411 = :* (:* (:* D2 D4) D1) D1
type O4553 = :* (:* (:* D2 D4) D1) D1
type H96A = :* (:* (:* D2 D4) D1) D0
type D2410 = :* (:* (:* D2 D4) D1) D0
type O4552 = :* (:* (:* D2 D4) D1) D0
type H969 = :* (:* (:* D2 D4) D0) D9
type D2409 = :* (:* (:* D2 D4) D0) D9
type O4551 = :* (:* (:* D2 D4) D0) D9
type H968 = :* (:* (:* D2 D4) D0) D8
type D2408 = :* (:* (:* D2 D4) D0) D8
type O4550 = :* (:* (:* D2 D4) D0) D8
type H967 = :* (:* (:* D2 D4) D0) D7
type D2407 = :* (:* (:* D2 D4) D0) D7
type O4547 = :* (:* (:* D2 D4) D0) D7
type H966 = :* (:* (:* D2 D4) D0) D6
type D2406 = :* (:* (:* D2 D4) D0) D6
type O4546 = :* (:* (:* D2 D4) D0) D6
type H965 = :* (:* (:* D2 D4) D0) D5
type D2405 = :* (:* (:* D2 D4) D0) D5
type O4545 = :* (:* (:* D2 D4) D0) D5
type H964 = :* (:* (:* D2 D4) D0) D4
type D2404 = :* (:* (:* D2 D4) D0) D4
type O4544 = :* (:* (:* D2 D4) D0) D4
type H963 = :* (:* (:* D2 D4) D0) D3
type D2403 = :* (:* (:* D2 D4) D0) D3
type O4543 = :* (:* (:* D2 D4) D0) D3
type H962 = :* (:* (:* D2 D4) D0) D2
type D2402 = :* (:* (:* D2 D4) D0) D2
type O4542 = :* (:* (:* D2 D4) D0) D2
type H961 = :* (:* (:* D2 D4) D0) D1
type D2401 = :* (:* (:* D2 D4) D0) D1
type O4541 = :* (:* (:* D2 D4) D0) D1
type H960 = :* (:* (:* D2 D4) D0) D0
type D2400 = :* (:* (:* D2 D4) D0) D0
type O4540 = :* (:* (:* D2 D4) D0) D0
type H95F = :* (:* (:* D2 D3) D9) D9
type D2399 = :* (:* (:* D2 D3) D9) D9
type O4537 = :* (:* (:* D2 D3) D9) D9
type H95E = :* (:* (:* D2 D3) D9) D8
type D2398 = :* (:* (:* D2 D3) D9) D8
type O4536 = :* (:* (:* D2 D3) D9) D8
type H95D = :* (:* (:* D2 D3) D9) D7
type D2397 = :* (:* (:* D2 D3) D9) D7
type O4535 = :* (:* (:* D2 D3) D9) D7
type H95C = :* (:* (:* D2 D3) D9) D6
type D2396 = :* (:* (:* D2 D3) D9) D6
type O4534 = :* (:* (:* D2 D3) D9) D6
type H95B = :* (:* (:* D2 D3) D9) D5
type D2395 = :* (:* (:* D2 D3) D9) D5
type O4533 = :* (:* (:* D2 D3) D9) D5
type H95A = :* (:* (:* D2 D3) D9) D4
type D2394 = :* (:* (:* D2 D3) D9) D4
type O4532 = :* (:* (:* D2 D3) D9) D4
type H959 = :* (:* (:* D2 D3) D9) D3
type D2393 = :* (:* (:* D2 D3) D9) D3
type O4531 = :* (:* (:* D2 D3) D9) D3
type H958 = :* (:* (:* D2 D3) D9) D2
type D2392 = :* (:* (:* D2 D3) D9) D2
type O4530 = :* (:* (:* D2 D3) D9) D2
type H957 = :* (:* (:* D2 D3) D9) D1
type D2391 = :* (:* (:* D2 D3) D9) D1
type O4527 = :* (:* (:* D2 D3) D9) D1
type H956 = :* (:* (:* D2 D3) D9) D0
type D2390 = :* (:* (:* D2 D3) D9) D0
type O4526 = :* (:* (:* D2 D3) D9) D0
type H955 = :* (:* (:* D2 D3) D8) D9
type D2389 = :* (:* (:* D2 D3) D8) D9
type O4525 = :* (:* (:* D2 D3) D8) D9
type H954 = :* (:* (:* D2 D3) D8) D8
type D2388 = :* (:* (:* D2 D3) D8) D8
type O4524 = :* (:* (:* D2 D3) D8) D8
type H953 = :* (:* (:* D2 D3) D8) D7
type D2387 = :* (:* (:* D2 D3) D8) D7
type O4523 = :* (:* (:* D2 D3) D8) D7
type H952 = :* (:* (:* D2 D3) D8) D6
type D2386 = :* (:* (:* D2 D3) D8) D6
type O4522 = :* (:* (:* D2 D3) D8) D6
type H951 = :* (:* (:* D2 D3) D8) D5
type D2385 = :* (:* (:* D2 D3) D8) D5
type O4521 = :* (:* (:* D2 D3) D8) D5
type H950 = :* (:* (:* D2 D3) D8) D4
type D2384 = :* (:* (:* D2 D3) D8) D4
type O4520 = :* (:* (:* D2 D3) D8) D4
type H94F = :* (:* (:* D2 D3) D8) D3
type D2383 = :* (:* (:* D2 D3) D8) D3
type O4517 = :* (:* (:* D2 D3) D8) D3
type H94E = :* (:* (:* D2 D3) D8) D2
type D2382 = :* (:* (:* D2 D3) D8) D2
type O4516 = :* (:* (:* D2 D3) D8) D2
type H94D = :* (:* (:* D2 D3) D8) D1
type D2381 = :* (:* (:* D2 D3) D8) D1
type O4515 = :* (:* (:* D2 D3) D8) D1
type H94C = :* (:* (:* D2 D3) D8) D0
type D2380 = :* (:* (:* D2 D3) D8) D0
type O4514 = :* (:* (:* D2 D3) D8) D0
type H94B = :* (:* (:* D2 D3) D7) D9
type D2379 = :* (:* (:* D2 D3) D7) D9
type O4513 = :* (:* (:* D2 D3) D7) D9
type H94A = :* (:* (:* D2 D3) D7) D8
type D2378 = :* (:* (:* D2 D3) D7) D8
type O4512 = :* (:* (:* D2 D3) D7) D8
type H949 = :* (:* (:* D2 D3) D7) D7
type D2377 = :* (:* (:* D2 D3) D7) D7
type O4511 = :* (:* (:* D2 D3) D7) D7
type H948 = :* (:* (:* D2 D3) D7) D6
type D2376 = :* (:* (:* D2 D3) D7) D6
type O4510 = :* (:* (:* D2 D3) D7) D6
type H947 = :* (:* (:* D2 D3) D7) D5
type D2375 = :* (:* (:* D2 D3) D7) D5
type O4507 = :* (:* (:* D2 D3) D7) D5
type H946 = :* (:* (:* D2 D3) D7) D4
type D2374 = :* (:* (:* D2 D3) D7) D4
type O4506 = :* (:* (:* D2 D3) D7) D4
type H945 = :* (:* (:* D2 D3) D7) D3
type D2373 = :* (:* (:* D2 D3) D7) D3
type O4505 = :* (:* (:* D2 D3) D7) D3
type H944 = :* (:* (:* D2 D3) D7) D2
type D2372 = :* (:* (:* D2 D3) D7) D2
type O4504 = :* (:* (:* D2 D3) D7) D2
type H943 = :* (:* (:* D2 D3) D7) D1
type D2371 = :* (:* (:* D2 D3) D7) D1
type O4503 = :* (:* (:* D2 D3) D7) D1
type H942 = :* (:* (:* D2 D3) D7) D0
type D2370 = :* (:* (:* D2 D3) D7) D0
type O4502 = :* (:* (:* D2 D3) D7) D0
type H941 = :* (:* (:* D2 D3) D6) D9
type D2369 = :* (:* (:* D2 D3) D6) D9
type O4501 = :* (:* (:* D2 D3) D6) D9
type H940 = :* (:* (:* D2 D3) D6) D8
type D2368 = :* (:* (:* D2 D3) D6) D8
type O4500 = :* (:* (:* D2 D3) D6) D8
type H93F = :* (:* (:* D2 D3) D6) D7
type D2367 = :* (:* (:* D2 D3) D6) D7
type O4477 = :* (:* (:* D2 D3) D6) D7
type H93E = :* (:* (:* D2 D3) D6) D6
type D2366 = :* (:* (:* D2 D3) D6) D6
type O4476 = :* (:* (:* D2 D3) D6) D6
type H93D = :* (:* (:* D2 D3) D6) D5
type D2365 = :* (:* (:* D2 D3) D6) D5
type O4475 = :* (:* (:* D2 D3) D6) D5
type H93C = :* (:* (:* D2 D3) D6) D4
type D2364 = :* (:* (:* D2 D3) D6) D4
type O4474 = :* (:* (:* D2 D3) D6) D4
type H93B = :* (:* (:* D2 D3) D6) D3
type D2363 = :* (:* (:* D2 D3) D6) D3
type O4473 = :* (:* (:* D2 D3) D6) D3
type H93A = :* (:* (:* D2 D3) D6) D2
type D2362 = :* (:* (:* D2 D3) D6) D2
type O4472 = :* (:* (:* D2 D3) D6) D2
type H939 = :* (:* (:* D2 D3) D6) D1
type D2361 = :* (:* (:* D2 D3) D6) D1
type O4471 = :* (:* (:* D2 D3) D6) D1
type H938 = :* (:* (:* D2 D3) D6) D0
type D2360 = :* (:* (:* D2 D3) D6) D0
type O4470 = :* (:* (:* D2 D3) D6) D0
type H937 = :* (:* (:* D2 D3) D5) D9
type D2359 = :* (:* (:* D2 D3) D5) D9
type O4467 = :* (:* (:* D2 D3) D5) D9
type H936 = :* (:* (:* D2 D3) D5) D8
type D2358 = :* (:* (:* D2 D3) D5) D8
type O4466 = :* (:* (:* D2 D3) D5) D8
type H935 = :* (:* (:* D2 D3) D5) D7
type D2357 = :* (:* (:* D2 D3) D5) D7
type O4465 = :* (:* (:* D2 D3) D5) D7
type H934 = :* (:* (:* D2 D3) D5) D6
type D2356 = :* (:* (:* D2 D3) D5) D6
type O4464 = :* (:* (:* D2 D3) D5) D6
type H933 = :* (:* (:* D2 D3) D5) D5
type D2355 = :* (:* (:* D2 D3) D5) D5
type O4463 = :* (:* (:* D2 D3) D5) D5
type H932 = :* (:* (:* D2 D3) D5) D4
type D2354 = :* (:* (:* D2 D3) D5) D4
type O4462 = :* (:* (:* D2 D3) D5) D4
type H931 = :* (:* (:* D2 D3) D5) D3
type D2353 = :* (:* (:* D2 D3) D5) D3
type O4461 = :* (:* (:* D2 D3) D5) D3
type H930 = :* (:* (:* D2 D3) D5) D2
type D2352 = :* (:* (:* D2 D3) D5) D2
type O4460 = :* (:* (:* D2 D3) D5) D2
type H92F = :* (:* (:* D2 D3) D5) D1
type D2351 = :* (:* (:* D2 D3) D5) D1
type O4457 = :* (:* (:* D2 D3) D5) D1
type H92E = :* (:* (:* D2 D3) D5) D0
type D2350 = :* (:* (:* D2 D3) D5) D0
type O4456 = :* (:* (:* D2 D3) D5) D0
type H92D = :* (:* (:* D2 D3) D4) D9
type D2349 = :* (:* (:* D2 D3) D4) D9
type O4455 = :* (:* (:* D2 D3) D4) D9
type H92C = :* (:* (:* D2 D3) D4) D8
type D2348 = :* (:* (:* D2 D3) D4) D8
type O4454 = :* (:* (:* D2 D3) D4) D8
type H92B = :* (:* (:* D2 D3) D4) D7
type D2347 = :* (:* (:* D2 D3) D4) D7
type O4453 = :* (:* (:* D2 D3) D4) D7
type H92A = :* (:* (:* D2 D3) D4) D6
type D2346 = :* (:* (:* D2 D3) D4) D6
type O4452 = :* (:* (:* D2 D3) D4) D6
type H929 = :* (:* (:* D2 D3) D4) D5
type D2345 = :* (:* (:* D2 D3) D4) D5
type O4451 = :* (:* (:* D2 D3) D4) D5
type H928 = :* (:* (:* D2 D3) D4) D4
type D2344 = :* (:* (:* D2 D3) D4) D4
type O4450 = :* (:* (:* D2 D3) D4) D4
type H927 = :* (:* (:* D2 D3) D4) D3
type D2343 = :* (:* (:* D2 D3) D4) D3
type O4447 = :* (:* (:* D2 D3) D4) D3
type H926 = :* (:* (:* D2 D3) D4) D2
type D2342 = :* (:* (:* D2 D3) D4) D2
type O4446 = :* (:* (:* D2 D3) D4) D2
type H925 = :* (:* (:* D2 D3) D4) D1
type D2341 = :* (:* (:* D2 D3) D4) D1
type O4445 = :* (:* (:* D2 D3) D4) D1
type H924 = :* (:* (:* D2 D3) D4) D0
type D2340 = :* (:* (:* D2 D3) D4) D0
type O4444 = :* (:* (:* D2 D3) D4) D0
type H923 = :* (:* (:* D2 D3) D3) D9
type D2339 = :* (:* (:* D2 D3) D3) D9
type O4443 = :* (:* (:* D2 D3) D3) D9
type H922 = :* (:* (:* D2 D3) D3) D8
type D2338 = :* (:* (:* D2 D3) D3) D8
type O4442 = :* (:* (:* D2 D3) D3) D8
type H921 = :* (:* (:* D2 D3) D3) D7
type D2337 = :* (:* (:* D2 D3) D3) D7
type O4441 = :* (:* (:* D2 D3) D3) D7
type H920 = :* (:* (:* D2 D3) D3) D6
type D2336 = :* (:* (:* D2 D3) D3) D6
type O4440 = :* (:* (:* D2 D3) D3) D6
type H91F = :* (:* (:* D2 D3) D3) D5
type D2335 = :* (:* (:* D2 D3) D3) D5
type O4437 = :* (:* (:* D2 D3) D3) D5
type H91E = :* (:* (:* D2 D3) D3) D4
type D2334 = :* (:* (:* D2 D3) D3) D4
type O4436 = :* (:* (:* D2 D3) D3) D4
type H91D = :* (:* (:* D2 D3) D3) D3
type D2333 = :* (:* (:* D2 D3) D3) D3
type O4435 = :* (:* (:* D2 D3) D3) D3
type H91C = :* (:* (:* D2 D3) D3) D2
type D2332 = :* (:* (:* D2 D3) D3) D2
type O4434 = :* (:* (:* D2 D3) D3) D2
type H91B = :* (:* (:* D2 D3) D3) D1
type D2331 = :* (:* (:* D2 D3) D3) D1
type O4433 = :* (:* (:* D2 D3) D3) D1
type H91A = :* (:* (:* D2 D3) D3) D0
type D2330 = :* (:* (:* D2 D3) D3) D0
type O4432 = :* (:* (:* D2 D3) D3) D0
type H919 = :* (:* (:* D2 D3) D2) D9
type D2329 = :* (:* (:* D2 D3) D2) D9
type O4431 = :* (:* (:* D2 D3) D2) D9
type H918 = :* (:* (:* D2 D3) D2) D8
type D2328 = :* (:* (:* D2 D3) D2) D8
type O4430 = :* (:* (:* D2 D3) D2) D8
type H917 = :* (:* (:* D2 D3) D2) D7
type D2327 = :* (:* (:* D2 D3) D2) D7
type O4427 = :* (:* (:* D2 D3) D2) D7
type H916 = :* (:* (:* D2 D3) D2) D6
type D2326 = :* (:* (:* D2 D3) D2) D6
type O4426 = :* (:* (:* D2 D3) D2) D6
type H915 = :* (:* (:* D2 D3) D2) D5
type D2325 = :* (:* (:* D2 D3) D2) D5
type O4425 = :* (:* (:* D2 D3) D2) D5
type H914 = :* (:* (:* D2 D3) D2) D4
type D2324 = :* (:* (:* D2 D3) D2) D4
type O4424 = :* (:* (:* D2 D3) D2) D4
type H913 = :* (:* (:* D2 D3) D2) D3
type D2323 = :* (:* (:* D2 D3) D2) D3
type O4423 = :* (:* (:* D2 D3) D2) D3
type H912 = :* (:* (:* D2 D3) D2) D2
type D2322 = :* (:* (:* D2 D3) D2) D2
type O4422 = :* (:* (:* D2 D3) D2) D2
type H911 = :* (:* (:* D2 D3) D2) D1
type D2321 = :* (:* (:* D2 D3) D2) D1
type O4421 = :* (:* (:* D2 D3) D2) D1
type H910 = :* (:* (:* D2 D3) D2) D0
type D2320 = :* (:* (:* D2 D3) D2) D0
type O4420 = :* (:* (:* D2 D3) D2) D0
type H90F = :* (:* (:* D2 D3) D1) D9
type D2319 = :* (:* (:* D2 D3) D1) D9
type O4417 = :* (:* (:* D2 D3) D1) D9
type H90E = :* (:* (:* D2 D3) D1) D8
type D2318 = :* (:* (:* D2 D3) D1) D8
type O4416 = :* (:* (:* D2 D3) D1) D8
type H90D = :* (:* (:* D2 D3) D1) D7
type D2317 = :* (:* (:* D2 D3) D1) D7
type O4415 = :* (:* (:* D2 D3) D1) D7
type H90C = :* (:* (:* D2 D3) D1) D6
type D2316 = :* (:* (:* D2 D3) D1) D6
type O4414 = :* (:* (:* D2 D3) D1) D6
type H90B = :* (:* (:* D2 D3) D1) D5
type D2315 = :* (:* (:* D2 D3) D1) D5
type O4413 = :* (:* (:* D2 D3) D1) D5
type H90A = :* (:* (:* D2 D3) D1) D4
type D2314 = :* (:* (:* D2 D3) D1) D4
type O4412 = :* (:* (:* D2 D3) D1) D4
type H909 = :* (:* (:* D2 D3) D1) D3
type D2313 = :* (:* (:* D2 D3) D1) D3
type O4411 = :* (:* (:* D2 D3) D1) D3
type H908 = :* (:* (:* D2 D3) D1) D2
type D2312 = :* (:* (:* D2 D3) D1) D2
type O4410 = :* (:* (:* D2 D3) D1) D2
type H907 = :* (:* (:* D2 D3) D1) D1
type D2311 = :* (:* (:* D2 D3) D1) D1
type O4407 = :* (:* (:* D2 D3) D1) D1
type H906 = :* (:* (:* D2 D3) D1) D0
type D2310 = :* (:* (:* D2 D3) D1) D0
type O4406 = :* (:* (:* D2 D3) D1) D0
type H905 = :* (:* (:* D2 D3) D0) D9
type D2309 = :* (:* (:* D2 D3) D0) D9
type O4405 = :* (:* (:* D2 D3) D0) D9
type H904 = :* (:* (:* D2 D3) D0) D8
type D2308 = :* (:* (:* D2 D3) D0) D8
type O4404 = :* (:* (:* D2 D3) D0) D8
type H903 = :* (:* (:* D2 D3) D0) D7
type D2307 = :* (:* (:* D2 D3) D0) D7
type O4403 = :* (:* (:* D2 D3) D0) D7
type H902 = :* (:* (:* D2 D3) D0) D6
type D2306 = :* (:* (:* D2 D3) D0) D6
type O4402 = :* (:* (:* D2 D3) D0) D6
type H901 = :* (:* (:* D2 D3) D0) D5
type D2305 = :* (:* (:* D2 D3) D0) D5
type O4401 = :* (:* (:* D2 D3) D0) D5
type H900 = :* (:* (:* D2 D3) D0) D4
type D2304 = :* (:* (:* D2 D3) D0) D4
type O4400 = :* (:* (:* D2 D3) D0) D4
type H8FF = :* (:* (:* D2 D3) D0) D3
type D2303 = :* (:* (:* D2 D3) D0) D3
type O4377 = :* (:* (:* D2 D3) D0) D3
type H8FE = :* (:* (:* D2 D3) D0) D2
type D2302 = :* (:* (:* D2 D3) D0) D2
type O4376 = :* (:* (:* D2 D3) D0) D2
type H8FD = :* (:* (:* D2 D3) D0) D1
type D2301 = :* (:* (:* D2 D3) D0) D1
type O4375 = :* (:* (:* D2 D3) D0) D1
type H8FC = :* (:* (:* D2 D3) D0) D0
type D2300 = :* (:* (:* D2 D3) D0) D0
type O4374 = :* (:* (:* D2 D3) D0) D0
type H8FB = :* (:* (:* D2 D2) D9) D9
type D2299 = :* (:* (:* D2 D2) D9) D9
type O4373 = :* (:* (:* D2 D2) D9) D9
type H8FA = :* (:* (:* D2 D2) D9) D8
type D2298 = :* (:* (:* D2 D2) D9) D8
type O4372 = :* (:* (:* D2 D2) D9) D8
type H8F9 = :* (:* (:* D2 D2) D9) D7
type D2297 = :* (:* (:* D2 D2) D9) D7
type O4371 = :* (:* (:* D2 D2) D9) D7
type H8F8 = :* (:* (:* D2 D2) D9) D6
type D2296 = :* (:* (:* D2 D2) D9) D6
type O4370 = :* (:* (:* D2 D2) D9) D6
type H8F7 = :* (:* (:* D2 D2) D9) D5
type D2295 = :* (:* (:* D2 D2) D9) D5
type O4367 = :* (:* (:* D2 D2) D9) D5
type H8F6 = :* (:* (:* D2 D2) D9) D4
type D2294 = :* (:* (:* D2 D2) D9) D4
type O4366 = :* (:* (:* D2 D2) D9) D4
type H8F5 = :* (:* (:* D2 D2) D9) D3
type D2293 = :* (:* (:* D2 D2) D9) D3
type O4365 = :* (:* (:* D2 D2) D9) D3
type H8F4 = :* (:* (:* D2 D2) D9) D2
type D2292 = :* (:* (:* D2 D2) D9) D2
type O4364 = :* (:* (:* D2 D2) D9) D2
type H8F3 = :* (:* (:* D2 D2) D9) D1
type D2291 = :* (:* (:* D2 D2) D9) D1
type O4363 = :* (:* (:* D2 D2) D9) D1
type H8F2 = :* (:* (:* D2 D2) D9) D0
type D2290 = :* (:* (:* D2 D2) D9) D0
type O4362 = :* (:* (:* D2 D2) D9) D0
type H8F1 = :* (:* (:* D2 D2) D8) D9
type D2289 = :* (:* (:* D2 D2) D8) D9
type O4361 = :* (:* (:* D2 D2) D8) D9
type H8F0 = :* (:* (:* D2 D2) D8) D8
type D2288 = :* (:* (:* D2 D2) D8) D8
type O4360 = :* (:* (:* D2 D2) D8) D8
type H8EF = :* (:* (:* D2 D2) D8) D7
type D2287 = :* (:* (:* D2 D2) D8) D7
type O4357 = :* (:* (:* D2 D2) D8) D7
type H8EE = :* (:* (:* D2 D2) D8) D6
type D2286 = :* (:* (:* D2 D2) D8) D6
type O4356 = :* (:* (:* D2 D2) D8) D6
type H8ED = :* (:* (:* D2 D2) D8) D5
type D2285 = :* (:* (:* D2 D2) D8) D5
type O4355 = :* (:* (:* D2 D2) D8) D5
type H8EC = :* (:* (:* D2 D2) D8) D4
type D2284 = :* (:* (:* D2 D2) D8) D4
type O4354 = :* (:* (:* D2 D2) D8) D4
type H8EB = :* (:* (:* D2 D2) D8) D3
type D2283 = :* (:* (:* D2 D2) D8) D3
type O4353 = :* (:* (:* D2 D2) D8) D3
type H8EA = :* (:* (:* D2 D2) D8) D2
type D2282 = :* (:* (:* D2 D2) D8) D2
type O4352 = :* (:* (:* D2 D2) D8) D2
type H8E9 = :* (:* (:* D2 D2) D8) D1
type D2281 = :* (:* (:* D2 D2) D8) D1
type O4351 = :* (:* (:* D2 D2) D8) D1
type H8E8 = :* (:* (:* D2 D2) D8) D0
type D2280 = :* (:* (:* D2 D2) D8) D0
type O4350 = :* (:* (:* D2 D2) D8) D0
type H8E7 = :* (:* (:* D2 D2) D7) D9
type D2279 = :* (:* (:* D2 D2) D7) D9
type O4347 = :* (:* (:* D2 D2) D7) D9
type H8E6 = :* (:* (:* D2 D2) D7) D8
type D2278 = :* (:* (:* D2 D2) D7) D8
type O4346 = :* (:* (:* D2 D2) D7) D8
type H8E5 = :* (:* (:* D2 D2) D7) D7
type D2277 = :* (:* (:* D2 D2) D7) D7
type O4345 = :* (:* (:* D2 D2) D7) D7
type H8E4 = :* (:* (:* D2 D2) D7) D6
type D2276 = :* (:* (:* D2 D2) D7) D6
type O4344 = :* (:* (:* D2 D2) D7) D6
type H8E3 = :* (:* (:* D2 D2) D7) D5
type D2275 = :* (:* (:* D2 D2) D7) D5
type O4343 = :* (:* (:* D2 D2) D7) D5
type H8E2 = :* (:* (:* D2 D2) D7) D4
type D2274 = :* (:* (:* D2 D2) D7) D4
type O4342 = :* (:* (:* D2 D2) D7) D4
type H8E1 = :* (:* (:* D2 D2) D7) D3
type D2273 = :* (:* (:* D2 D2) D7) D3
type O4341 = :* (:* (:* D2 D2) D7) D3
type H8E0 = :* (:* (:* D2 D2) D7) D2
type D2272 = :* (:* (:* D2 D2) D7) D2
type O4340 = :* (:* (:* D2 D2) D7) D2
type H8DF = :* (:* (:* D2 D2) D7) D1
type D2271 = :* (:* (:* D2 D2) D7) D1
type O4337 = :* (:* (:* D2 D2) D7) D1
type H8DE = :* (:* (:* D2 D2) D7) D0
type D2270 = :* (:* (:* D2 D2) D7) D0
type O4336 = :* (:* (:* D2 D2) D7) D0
type H8DD = :* (:* (:* D2 D2) D6) D9
type D2269 = :* (:* (:* D2 D2) D6) D9
type O4335 = :* (:* (:* D2 D2) D6) D9
type H8DC = :* (:* (:* D2 D2) D6) D8
type D2268 = :* (:* (:* D2 D2) D6) D8
type O4334 = :* (:* (:* D2 D2) D6) D8
type H8DB = :* (:* (:* D2 D2) D6) D7
type D2267 = :* (:* (:* D2 D2) D6) D7
type O4333 = :* (:* (:* D2 D2) D6) D7
type H8DA = :* (:* (:* D2 D2) D6) D6
type D2266 = :* (:* (:* D2 D2) D6) D6
type O4332 = :* (:* (:* D2 D2) D6) D6
type H8D9 = :* (:* (:* D2 D2) D6) D5
type D2265 = :* (:* (:* D2 D2) D6) D5
type O4331 = :* (:* (:* D2 D2) D6) D5
type H8D8 = :* (:* (:* D2 D2) D6) D4
type D2264 = :* (:* (:* D2 D2) D6) D4
type O4330 = :* (:* (:* D2 D2) D6) D4
type H8D7 = :* (:* (:* D2 D2) D6) D3
type D2263 = :* (:* (:* D2 D2) D6) D3
type O4327 = :* (:* (:* D2 D2) D6) D3
type H8D6 = :* (:* (:* D2 D2) D6) D2
type D2262 = :* (:* (:* D2 D2) D6) D2
type O4326 = :* (:* (:* D2 D2) D6) D2
type H8D5 = :* (:* (:* D2 D2) D6) D1
type D2261 = :* (:* (:* D2 D2) D6) D1
type O4325 = :* (:* (:* D2 D2) D6) D1
type H8D4 = :* (:* (:* D2 D2) D6) D0
type D2260 = :* (:* (:* D2 D2) D6) D0
type O4324 = :* (:* (:* D2 D2) D6) D0
type H8D3 = :* (:* (:* D2 D2) D5) D9
type D2259 = :* (:* (:* D2 D2) D5) D9
type O4323 = :* (:* (:* D2 D2) D5) D9
type H8D2 = :* (:* (:* D2 D2) D5) D8
type D2258 = :* (:* (:* D2 D2) D5) D8
type O4322 = :* (:* (:* D2 D2) D5) D8
type H8D1 = :* (:* (:* D2 D2) D5) D7
type D2257 = :* (:* (:* D2 D2) D5) D7
type O4321 = :* (:* (:* D2 D2) D5) D7
type H8D0 = :* (:* (:* D2 D2) D5) D6
type D2256 = :* (:* (:* D2 D2) D5) D6
type O4320 = :* (:* (:* D2 D2) D5) D6
type H8CF = :* (:* (:* D2 D2) D5) D5
type D2255 = :* (:* (:* D2 D2) D5) D5
type O4317 = :* (:* (:* D2 D2) D5) D5
type H8CE = :* (:* (:* D2 D2) D5) D4
type D2254 = :* (:* (:* D2 D2) D5) D4
type O4316 = :* (:* (:* D2 D2) D5) D4
type H8CD = :* (:* (:* D2 D2) D5) D3
type D2253 = :* (:* (:* D2 D2) D5) D3
type O4315 = :* (:* (:* D2 D2) D5) D3
type H8CC = :* (:* (:* D2 D2) D5) D2
type D2252 = :* (:* (:* D2 D2) D5) D2
type O4314 = :* (:* (:* D2 D2) D5) D2
type H8CB = :* (:* (:* D2 D2) D5) D1
type D2251 = :* (:* (:* D2 D2) D5) D1
type O4313 = :* (:* (:* D2 D2) D5) D1
type H8CA = :* (:* (:* D2 D2) D5) D0
type D2250 = :* (:* (:* D2 D2) D5) D0
type O4312 = :* (:* (:* D2 D2) D5) D0
type H8C9 = :* (:* (:* D2 D2) D4) D9
type D2249 = :* (:* (:* D2 D2) D4) D9
type O4311 = :* (:* (:* D2 D2) D4) D9
type H8C8 = :* (:* (:* D2 D2) D4) D8
type D2248 = :* (:* (:* D2 D2) D4) D8
type O4310 = :* (:* (:* D2 D2) D4) D8
type H8C7 = :* (:* (:* D2 D2) D4) D7
type D2247 = :* (:* (:* D2 D2) D4) D7
type O4307 = :* (:* (:* D2 D2) D4) D7
type H8C6 = :* (:* (:* D2 D2) D4) D6
type D2246 = :* (:* (:* D2 D2) D4) D6
type O4306 = :* (:* (:* D2 D2) D4) D6
type H8C5 = :* (:* (:* D2 D2) D4) D5
type D2245 = :* (:* (:* D2 D2) D4) D5
type O4305 = :* (:* (:* D2 D2) D4) D5
type H8C4 = :* (:* (:* D2 D2) D4) D4
type D2244 = :* (:* (:* D2 D2) D4) D4
type O4304 = :* (:* (:* D2 D2) D4) D4
type H8C3 = :* (:* (:* D2 D2) D4) D3
type D2243 = :* (:* (:* D2 D2) D4) D3
type O4303 = :* (:* (:* D2 D2) D4) D3
type H8C2 = :* (:* (:* D2 D2) D4) D2
type D2242 = :* (:* (:* D2 D2) D4) D2
type O4302 = :* (:* (:* D2 D2) D4) D2
type H8C1 = :* (:* (:* D2 D2) D4) D1
type D2241 = :* (:* (:* D2 D2) D4) D1
type O4301 = :* (:* (:* D2 D2) D4) D1
type H8C0 = :* (:* (:* D2 D2) D4) D0
type D2240 = :* (:* (:* D2 D2) D4) D0
type O4300 = :* (:* (:* D2 D2) D4) D0
type H8BF = :* (:* (:* D2 D2) D3) D9
type D2239 = :* (:* (:* D2 D2) D3) D9
type O4277 = :* (:* (:* D2 D2) D3) D9
type H8BE = :* (:* (:* D2 D2) D3) D8
type D2238 = :* (:* (:* D2 D2) D3) D8
type O4276 = :* (:* (:* D2 D2) D3) D8
type H8BD = :* (:* (:* D2 D2) D3) D7
type D2237 = :* (:* (:* D2 D2) D3) D7
type O4275 = :* (:* (:* D2 D2) D3) D7
type H8BC = :* (:* (:* D2 D2) D3) D6
type D2236 = :* (:* (:* D2 D2) D3) D6
type O4274 = :* (:* (:* D2 D2) D3) D6
type H8BB = :* (:* (:* D2 D2) D3) D5
type D2235 = :* (:* (:* D2 D2) D3) D5
type O4273 = :* (:* (:* D2 D2) D3) D5
type H8BA = :* (:* (:* D2 D2) D3) D4
type D2234 = :* (:* (:* D2 D2) D3) D4
type O4272 = :* (:* (:* D2 D2) D3) D4
type H8B9 = :* (:* (:* D2 D2) D3) D3
type D2233 = :* (:* (:* D2 D2) D3) D3
type O4271 = :* (:* (:* D2 D2) D3) D3
type H8B8 = :* (:* (:* D2 D2) D3) D2
type D2232 = :* (:* (:* D2 D2) D3) D2
type O4270 = :* (:* (:* D2 D2) D3) D2
type H8B7 = :* (:* (:* D2 D2) D3) D1
type D2231 = :* (:* (:* D2 D2) D3) D1
type O4267 = :* (:* (:* D2 D2) D3) D1
type H8B6 = :* (:* (:* D2 D2) D3) D0
type D2230 = :* (:* (:* D2 D2) D3) D0
type O4266 = :* (:* (:* D2 D2) D3) D0
type H8B5 = :* (:* (:* D2 D2) D2) D9
type D2229 = :* (:* (:* D2 D2) D2) D9
type O4265 = :* (:* (:* D2 D2) D2) D9
type H8B4 = :* (:* (:* D2 D2) D2) D8
type D2228 = :* (:* (:* D2 D2) D2) D8
type O4264 = :* (:* (:* D2 D2) D2) D8
type H8B3 = :* (:* (:* D2 D2) D2) D7
type D2227 = :* (:* (:* D2 D2) D2) D7
type O4263 = :* (:* (:* D2 D2) D2) D7
type H8B2 = :* (:* (:* D2 D2) D2) D6
type D2226 = :* (:* (:* D2 D2) D2) D6
type O4262 = :* (:* (:* D2 D2) D2) D6
type H8B1 = :* (:* (:* D2 D2) D2) D5
type D2225 = :* (:* (:* D2 D2) D2) D5
type O4261 = :* (:* (:* D2 D2) D2) D5
type H8B0 = :* (:* (:* D2 D2) D2) D4
type D2224 = :* (:* (:* D2 D2) D2) D4
type O4260 = :* (:* (:* D2 D2) D2) D4
type H8AF = :* (:* (:* D2 D2) D2) D3
type D2223 = :* (:* (:* D2 D2) D2) D3
type O4257 = :* (:* (:* D2 D2) D2) D3
type H8AE = :* (:* (:* D2 D2) D2) D2
type D2222 = :* (:* (:* D2 D2) D2) D2
type O4256 = :* (:* (:* D2 D2) D2) D2
type H8AD = :* (:* (:* D2 D2) D2) D1
type D2221 = :* (:* (:* D2 D2) D2) D1
type O4255 = :* (:* (:* D2 D2) D2) D1
type H8AC = :* (:* (:* D2 D2) D2) D0
type D2220 = :* (:* (:* D2 D2) D2) D0
type O4254 = :* (:* (:* D2 D2) D2) D0
type H8AB = :* (:* (:* D2 D2) D1) D9
type D2219 = :* (:* (:* D2 D2) D1) D9
type O4253 = :* (:* (:* D2 D2) D1) D9
type H8AA = :* (:* (:* D2 D2) D1) D8
type D2218 = :* (:* (:* D2 D2) D1) D8
type O4252 = :* (:* (:* D2 D2) D1) D8
type H8A9 = :* (:* (:* D2 D2) D1) D7
type D2217 = :* (:* (:* D2 D2) D1) D7
type O4251 = :* (:* (:* D2 D2) D1) D7
type H8A8 = :* (:* (:* D2 D2) D1) D6
type D2216 = :* (:* (:* D2 D2) D1) D6
type O4250 = :* (:* (:* D2 D2) D1) D6
type H8A7 = :* (:* (:* D2 D2) D1) D5
type D2215 = :* (:* (:* D2 D2) D1) D5
type O4247 = :* (:* (:* D2 D2) D1) D5
type H8A6 = :* (:* (:* D2 D2) D1) D4
type D2214 = :* (:* (:* D2 D2) D1) D4
type O4246 = :* (:* (:* D2 D2) D1) D4
type H8A5 = :* (:* (:* D2 D2) D1) D3
type D2213 = :* (:* (:* D2 D2) D1) D3
type O4245 = :* (:* (:* D2 D2) D1) D3
type H8A4 = :* (:* (:* D2 D2) D1) D2
type D2212 = :* (:* (:* D2 D2) D1) D2
type O4244 = :* (:* (:* D2 D2) D1) D2
type H8A3 = :* (:* (:* D2 D2) D1) D1
type D2211 = :* (:* (:* D2 D2) D1) D1
type O4243 = :* (:* (:* D2 D2) D1) D1
type H8A2 = :* (:* (:* D2 D2) D1) D0
type D2210 = :* (:* (:* D2 D2) D1) D0
type O4242 = :* (:* (:* D2 D2) D1) D0
type H8A1 = :* (:* (:* D2 D2) D0) D9
type D2209 = :* (:* (:* D2 D2) D0) D9
type O4241 = :* (:* (:* D2 D2) D0) D9
type H8A0 = :* (:* (:* D2 D2) D0) D8
type D2208 = :* (:* (:* D2 D2) D0) D8
type O4240 = :* (:* (:* D2 D2) D0) D8
type H89F = :* (:* (:* D2 D2) D0) D7
type D2207 = :* (:* (:* D2 D2) D0) D7
type O4237 = :* (:* (:* D2 D2) D0) D7
type H89E = :* (:* (:* D2 D2) D0) D6
type D2206 = :* (:* (:* D2 D2) D0) D6
type O4236 = :* (:* (:* D2 D2) D0) D6
type H89D = :* (:* (:* D2 D2) D0) D5
type D2205 = :* (:* (:* D2 D2) D0) D5
type O4235 = :* (:* (:* D2 D2) D0) D5
type H89C = :* (:* (:* D2 D2) D0) D4
type D2204 = :* (:* (:* D2 D2) D0) D4
type O4234 = :* (:* (:* D2 D2) D0) D4
type H89B = :* (:* (:* D2 D2) D0) D3
type D2203 = :* (:* (:* D2 D2) D0) D3
type O4233 = :* (:* (:* D2 D2) D0) D3
type H89A = :* (:* (:* D2 D2) D0) D2
type D2202 = :* (:* (:* D2 D2) D0) D2
type O4232 = :* (:* (:* D2 D2) D0) D2
type H899 = :* (:* (:* D2 D2) D0) D1
type D2201 = :* (:* (:* D2 D2) D0) D1
type O4231 = :* (:* (:* D2 D2) D0) D1
type H898 = :* (:* (:* D2 D2) D0) D0
type D2200 = :* (:* (:* D2 D2) D0) D0
type O4230 = :* (:* (:* D2 D2) D0) D0
type H897 = :* (:* (:* D2 D1) D9) D9
type D2199 = :* (:* (:* D2 D1) D9) D9
type O4227 = :* (:* (:* D2 D1) D9) D9
type H896 = :* (:* (:* D2 D1) D9) D8
type D2198 = :* (:* (:* D2 D1) D9) D8
type O4226 = :* (:* (:* D2 D1) D9) D8
type H895 = :* (:* (:* D2 D1) D9) D7
type D2197 = :* (:* (:* D2 D1) D9) D7
type O4225 = :* (:* (:* D2 D1) D9) D7
type H894 = :* (:* (:* D2 D1) D9) D6
type D2196 = :* (:* (:* D2 D1) D9) D6
type O4224 = :* (:* (:* D2 D1) D9) D6
type H893 = :* (:* (:* D2 D1) D9) D5
type D2195 = :* (:* (:* D2 D1) D9) D5
type O4223 = :* (:* (:* D2 D1) D9) D5
type H892 = :* (:* (:* D2 D1) D9) D4
type D2194 = :* (:* (:* D2 D1) D9) D4
type O4222 = :* (:* (:* D2 D1) D9) D4
type H891 = :* (:* (:* D2 D1) D9) D3
type D2193 = :* (:* (:* D2 D1) D9) D3
type O4221 = :* (:* (:* D2 D1) D9) D3
type H890 = :* (:* (:* D2 D1) D9) D2
type D2192 = :* (:* (:* D2 D1) D9) D2
type O4220 = :* (:* (:* D2 D1) D9) D2
type H88F = :* (:* (:* D2 D1) D9) D1
type D2191 = :* (:* (:* D2 D1) D9) D1
type O4217 = :* (:* (:* D2 D1) D9) D1
type H88E = :* (:* (:* D2 D1) D9) D0
type D2190 = :* (:* (:* D2 D1) D9) D0
type O4216 = :* (:* (:* D2 D1) D9) D0
type H88D = :* (:* (:* D2 D1) D8) D9
type D2189 = :* (:* (:* D2 D1) D8) D9
type O4215 = :* (:* (:* D2 D1) D8) D9
type H88C = :* (:* (:* D2 D1) D8) D8
type D2188 = :* (:* (:* D2 D1) D8) D8
type O4214 = :* (:* (:* D2 D1) D8) D8
type H88B = :* (:* (:* D2 D1) D8) D7
type D2187 = :* (:* (:* D2 D1) D8) D7
type O4213 = :* (:* (:* D2 D1) D8) D7
type H88A = :* (:* (:* D2 D1) D8) D6
type D2186 = :* (:* (:* D2 D1) D8) D6
type O4212 = :* (:* (:* D2 D1) D8) D6
type H889 = :* (:* (:* D2 D1) D8) D5
type D2185 = :* (:* (:* D2 D1) D8) D5
type O4211 = :* (:* (:* D2 D1) D8) D5
type H888 = :* (:* (:* D2 D1) D8) D4
type D2184 = :* (:* (:* D2 D1) D8) D4
type O4210 = :* (:* (:* D2 D1) D8) D4
type H887 = :* (:* (:* D2 D1) D8) D3
type D2183 = :* (:* (:* D2 D1) D8) D3
type O4207 = :* (:* (:* D2 D1) D8) D3
type H886 = :* (:* (:* D2 D1) D8) D2
type D2182 = :* (:* (:* D2 D1) D8) D2
type O4206 = :* (:* (:* D2 D1) D8) D2
type H885 = :* (:* (:* D2 D1) D8) D1
type D2181 = :* (:* (:* D2 D1) D8) D1
type O4205 = :* (:* (:* D2 D1) D8) D1
type H884 = :* (:* (:* D2 D1) D8) D0
type D2180 = :* (:* (:* D2 D1) D8) D0
type O4204 = :* (:* (:* D2 D1) D8) D0
type H883 = :* (:* (:* D2 D1) D7) D9
type D2179 = :* (:* (:* D2 D1) D7) D9
type O4203 = :* (:* (:* D2 D1) D7) D9
type H882 = :* (:* (:* D2 D1) D7) D8
type D2178 = :* (:* (:* D2 D1) D7) D8
type O4202 = :* (:* (:* D2 D1) D7) D8
type H881 = :* (:* (:* D2 D1) D7) D7
type D2177 = :* (:* (:* D2 D1) D7) D7
type O4201 = :* (:* (:* D2 D1) D7) D7
type H880 = :* (:* (:* D2 D1) D7) D6
type D2176 = :* (:* (:* D2 D1) D7) D6
type O4200 = :* (:* (:* D2 D1) D7) D6
type H87F = :* (:* (:* D2 D1) D7) D5
type D2175 = :* (:* (:* D2 D1) D7) D5
type O4177 = :* (:* (:* D2 D1) D7) D5
type H87E = :* (:* (:* D2 D1) D7) D4
type D2174 = :* (:* (:* D2 D1) D7) D4
type O4176 = :* (:* (:* D2 D1) D7) D4
type H87D = :* (:* (:* D2 D1) D7) D3
type D2173 = :* (:* (:* D2 D1) D7) D3
type O4175 = :* (:* (:* D2 D1) D7) D3
type H87C = :* (:* (:* D2 D1) D7) D2
type D2172 = :* (:* (:* D2 D1) D7) D2
type O4174 = :* (:* (:* D2 D1) D7) D2
type H87B = :* (:* (:* D2 D1) D7) D1
type D2171 = :* (:* (:* D2 D1) D7) D1
type O4173 = :* (:* (:* D2 D1) D7) D1
type H87A = :* (:* (:* D2 D1) D7) D0
type D2170 = :* (:* (:* D2 D1) D7) D0
type O4172 = :* (:* (:* D2 D1) D7) D0
type H879 = :* (:* (:* D2 D1) D6) D9
type D2169 = :* (:* (:* D2 D1) D6) D9
type O4171 = :* (:* (:* D2 D1) D6) D9
type H878 = :* (:* (:* D2 D1) D6) D8
type D2168 = :* (:* (:* D2 D1) D6) D8
type O4170 = :* (:* (:* D2 D1) D6) D8
type H877 = :* (:* (:* D2 D1) D6) D7
type D2167 = :* (:* (:* D2 D1) D6) D7
type O4167 = :* (:* (:* D2 D1) D6) D7
type H876 = :* (:* (:* D2 D1) D6) D6
type D2166 = :* (:* (:* D2 D1) D6) D6
type O4166 = :* (:* (:* D2 D1) D6) D6
type H875 = :* (:* (:* D2 D1) D6) D5
type D2165 = :* (:* (:* D2 D1) D6) D5
type O4165 = :* (:* (:* D2 D1) D6) D5
type H874 = :* (:* (:* D2 D1) D6) D4
type D2164 = :* (:* (:* D2 D1) D6) D4
type O4164 = :* (:* (:* D2 D1) D6) D4
type H873 = :* (:* (:* D2 D1) D6) D3
type D2163 = :* (:* (:* D2 D1) D6) D3
type O4163 = :* (:* (:* D2 D1) D6) D3
type H872 = :* (:* (:* D2 D1) D6) D2
type D2162 = :* (:* (:* D2 D1) D6) D2
type O4162 = :* (:* (:* D2 D1) D6) D2
type H871 = :* (:* (:* D2 D1) D6) D1
type D2161 = :* (:* (:* D2 D1) D6) D1
type O4161 = :* (:* (:* D2 D1) D6) D1
type H870 = :* (:* (:* D2 D1) D6) D0
type D2160 = :* (:* (:* D2 D1) D6) D0
type O4160 = :* (:* (:* D2 D1) D6) D0
type H86F = :* (:* (:* D2 D1) D5) D9
type D2159 = :* (:* (:* D2 D1) D5) D9
type O4157 = :* (:* (:* D2 D1) D5) D9
type H86E = :* (:* (:* D2 D1) D5) D8
type D2158 = :* (:* (:* D2 D1) D5) D8
type O4156 = :* (:* (:* D2 D1) D5) D8
type H86D = :* (:* (:* D2 D1) D5) D7
type D2157 = :* (:* (:* D2 D1) D5) D7
type O4155 = :* (:* (:* D2 D1) D5) D7
type H86C = :* (:* (:* D2 D1) D5) D6
type D2156 = :* (:* (:* D2 D1) D5) D6
type O4154 = :* (:* (:* D2 D1) D5) D6
type H86B = :* (:* (:* D2 D1) D5) D5
type D2155 = :* (:* (:* D2 D1) D5) D5
type O4153 = :* (:* (:* D2 D1) D5) D5
type H86A = :* (:* (:* D2 D1) D5) D4
type D2154 = :* (:* (:* D2 D1) D5) D4
type O4152 = :* (:* (:* D2 D1) D5) D4
type H869 = :* (:* (:* D2 D1) D5) D3
type D2153 = :* (:* (:* D2 D1) D5) D3
type O4151 = :* (:* (:* D2 D1) D5) D3
type H868 = :* (:* (:* D2 D1) D5) D2
type D2152 = :* (:* (:* D2 D1) D5) D2
type O4150 = :* (:* (:* D2 D1) D5) D2
type H867 = :* (:* (:* D2 D1) D5) D1
type D2151 = :* (:* (:* D2 D1) D5) D1
type O4147 = :* (:* (:* D2 D1) D5) D1
type H866 = :* (:* (:* D2 D1) D5) D0
type D2150 = :* (:* (:* D2 D1) D5) D0
type O4146 = :* (:* (:* D2 D1) D5) D0
type H865 = :* (:* (:* D2 D1) D4) D9
type D2149 = :* (:* (:* D2 D1) D4) D9
type O4145 = :* (:* (:* D2 D1) D4) D9
type H864 = :* (:* (:* D2 D1) D4) D8
type D2148 = :* (:* (:* D2 D1) D4) D8
type O4144 = :* (:* (:* D2 D1) D4) D8
type H863 = :* (:* (:* D2 D1) D4) D7
type D2147 = :* (:* (:* D2 D1) D4) D7
type O4143 = :* (:* (:* D2 D1) D4) D7
type H862 = :* (:* (:* D2 D1) D4) D6
type D2146 = :* (:* (:* D2 D1) D4) D6
type O4142 = :* (:* (:* D2 D1) D4) D6
type H861 = :* (:* (:* D2 D1) D4) D5
type D2145 = :* (:* (:* D2 D1) D4) D5
type O4141 = :* (:* (:* D2 D1) D4) D5
type H860 = :* (:* (:* D2 D1) D4) D4
type D2144 = :* (:* (:* D2 D1) D4) D4
type O4140 = :* (:* (:* D2 D1) D4) D4
type H85F = :* (:* (:* D2 D1) D4) D3
type D2143 = :* (:* (:* D2 D1) D4) D3
type O4137 = :* (:* (:* D2 D1) D4) D3
type H85E = :* (:* (:* D2 D1) D4) D2
type D2142 = :* (:* (:* D2 D1) D4) D2
type O4136 = :* (:* (:* D2 D1) D4) D2
type H85D = :* (:* (:* D2 D1) D4) D1
type D2141 = :* (:* (:* D2 D1) D4) D1
type O4135 = :* (:* (:* D2 D1) D4) D1
type H85C = :* (:* (:* D2 D1) D4) D0
type D2140 = :* (:* (:* D2 D1) D4) D0
type O4134 = :* (:* (:* D2 D1) D4) D0
type H85B = :* (:* (:* D2 D1) D3) D9
type D2139 = :* (:* (:* D2 D1) D3) D9
type O4133 = :* (:* (:* D2 D1) D3) D9
type H85A = :* (:* (:* D2 D1) D3) D8
type D2138 = :* (:* (:* D2 D1) D3) D8
type O4132 = :* (:* (:* D2 D1) D3) D8
type H859 = :* (:* (:* D2 D1) D3) D7
type D2137 = :* (:* (:* D2 D1) D3) D7
type O4131 = :* (:* (:* D2 D1) D3) D7
type H858 = :* (:* (:* D2 D1) D3) D6
type D2136 = :* (:* (:* D2 D1) D3) D6
type O4130 = :* (:* (:* D2 D1) D3) D6
type H857 = :* (:* (:* D2 D1) D3) D5
type D2135 = :* (:* (:* D2 D1) D3) D5
type O4127 = :* (:* (:* D2 D1) D3) D5
type H856 = :* (:* (:* D2 D1) D3) D4
type D2134 = :* (:* (:* D2 D1) D3) D4
type O4126 = :* (:* (:* D2 D1) D3) D4
type H855 = :* (:* (:* D2 D1) D3) D3
type D2133 = :* (:* (:* D2 D1) D3) D3
type O4125 = :* (:* (:* D2 D1) D3) D3
type H854 = :* (:* (:* D2 D1) D3) D2
type D2132 = :* (:* (:* D2 D1) D3) D2
type O4124 = :* (:* (:* D2 D1) D3) D2
type H853 = :* (:* (:* D2 D1) D3) D1
type D2131 = :* (:* (:* D2 D1) D3) D1
type O4123 = :* (:* (:* D2 D1) D3) D1
type H852 = :* (:* (:* D2 D1) D3) D0
type D2130 = :* (:* (:* D2 D1) D3) D0
type O4122 = :* (:* (:* D2 D1) D3) D0
type H851 = :* (:* (:* D2 D1) D2) D9
type D2129 = :* (:* (:* D2 D1) D2) D9
type O4121 = :* (:* (:* D2 D1) D2) D9
type H850 = :* (:* (:* D2 D1) D2) D8
type D2128 = :* (:* (:* D2 D1) D2) D8
type O4120 = :* (:* (:* D2 D1) D2) D8
type H84F = :* (:* (:* D2 D1) D2) D7
type D2127 = :* (:* (:* D2 D1) D2) D7
type O4117 = :* (:* (:* D2 D1) D2) D7
type H84E = :* (:* (:* D2 D1) D2) D6
type D2126 = :* (:* (:* D2 D1) D2) D6
type O4116 = :* (:* (:* D2 D1) D2) D6
type H84D = :* (:* (:* D2 D1) D2) D5
type D2125 = :* (:* (:* D2 D1) D2) D5
type O4115 = :* (:* (:* D2 D1) D2) D5
type H84C = :* (:* (:* D2 D1) D2) D4
type D2124 = :* (:* (:* D2 D1) D2) D4
type O4114 = :* (:* (:* D2 D1) D2) D4
type H84B = :* (:* (:* D2 D1) D2) D3
type D2123 = :* (:* (:* D2 D1) D2) D3
type O4113 = :* (:* (:* D2 D1) D2) D3
type H84A = :* (:* (:* D2 D1) D2) D2
type D2122 = :* (:* (:* D2 D1) D2) D2
type O4112 = :* (:* (:* D2 D1) D2) D2
type H849 = :* (:* (:* D2 D1) D2) D1
type D2121 = :* (:* (:* D2 D1) D2) D1
type O4111 = :* (:* (:* D2 D1) D2) D1
type H848 = :* (:* (:* D2 D1) D2) D0
type D2120 = :* (:* (:* D2 D1) D2) D0
type O4110 = :* (:* (:* D2 D1) D2) D0
type H847 = :* (:* (:* D2 D1) D1) D9
type D2119 = :* (:* (:* D2 D1) D1) D9
type O4107 = :* (:* (:* D2 D1) D1) D9
type H846 = :* (:* (:* D2 D1) D1) D8
type D2118 = :* (:* (:* D2 D1) D1) D8
type O4106 = :* (:* (:* D2 D1) D1) D8
type H845 = :* (:* (:* D2 D1) D1) D7
type D2117 = :* (:* (:* D2 D1) D1) D7
type O4105 = :* (:* (:* D2 D1) D1) D7
type H844 = :* (:* (:* D2 D1) D1) D6
type D2116 = :* (:* (:* D2 D1) D1) D6
type O4104 = :* (:* (:* D2 D1) D1) D6
type H843 = :* (:* (:* D2 D1) D1) D5
type D2115 = :* (:* (:* D2 D1) D1) D5
type O4103 = :* (:* (:* D2 D1) D1) D5
type H842 = :* (:* (:* D2 D1) D1) D4
type D2114 = :* (:* (:* D2 D1) D1) D4
type O4102 = :* (:* (:* D2 D1) D1) D4
type H841 = :* (:* (:* D2 D1) D1) D3
type D2113 = :* (:* (:* D2 D1) D1) D3
type O4101 = :* (:* (:* D2 D1) D1) D3
type H840 = :* (:* (:* D2 D1) D1) D2
type D2112 = :* (:* (:* D2 D1) D1) D2
type O4100 = :* (:* (:* D2 D1) D1) D2
type H83F = :* (:* (:* D2 D1) D1) D1
type D2111 = :* (:* (:* D2 D1) D1) D1
type O4077 = :* (:* (:* D2 D1) D1) D1
type H83E = :* (:* (:* D2 D1) D1) D0
type D2110 = :* (:* (:* D2 D1) D1) D0
type O4076 = :* (:* (:* D2 D1) D1) D0
type H83D = :* (:* (:* D2 D1) D0) D9
type D2109 = :* (:* (:* D2 D1) D0) D9
type O4075 = :* (:* (:* D2 D1) D0) D9
type H83C = :* (:* (:* D2 D1) D0) D8
type D2108 = :* (:* (:* D2 D1) D0) D8
type O4074 = :* (:* (:* D2 D1) D0) D8
type H83B = :* (:* (:* D2 D1) D0) D7
type D2107 = :* (:* (:* D2 D1) D0) D7
type O4073 = :* (:* (:* D2 D1) D0) D7
type H83A = :* (:* (:* D2 D1) D0) D6
type D2106 = :* (:* (:* D2 D1) D0) D6
type O4072 = :* (:* (:* D2 D1) D0) D6
type H839 = :* (:* (:* D2 D1) D0) D5
type D2105 = :* (:* (:* D2 D1) D0) D5
type O4071 = :* (:* (:* D2 D1) D0) D5
type H838 = :* (:* (:* D2 D1) D0) D4
type D2104 = :* (:* (:* D2 D1) D0) D4
type O4070 = :* (:* (:* D2 D1) D0) D4
type H837 = :* (:* (:* D2 D1) D0) D3
type D2103 = :* (:* (:* D2 D1) D0) D3
type O4067 = :* (:* (:* D2 D1) D0) D3
type H836 = :* (:* (:* D2 D1) D0) D2
type D2102 = :* (:* (:* D2 D1) D0) D2
type O4066 = :* (:* (:* D2 D1) D0) D2
type H835 = :* (:* (:* D2 D1) D0) D1
type D2101 = :* (:* (:* D2 D1) D0) D1
type O4065 = :* (:* (:* D2 D1) D0) D1
type H834 = :* (:* (:* D2 D1) D0) D0
type D2100 = :* (:* (:* D2 D1) D0) D0
type O4064 = :* (:* (:* D2 D1) D0) D0
type H833 = :* (:* (:* D2 D0) D9) D9
type D2099 = :* (:* (:* D2 D0) D9) D9
type O4063 = :* (:* (:* D2 D0) D9) D9
type H832 = :* (:* (:* D2 D0) D9) D8
type D2098 = :* (:* (:* D2 D0) D9) D8
type O4062 = :* (:* (:* D2 D0) D9) D8
type H831 = :* (:* (:* D2 D0) D9) D7
type D2097 = :* (:* (:* D2 D0) D9) D7
type O4061 = :* (:* (:* D2 D0) D9) D7
type H830 = :* (:* (:* D2 D0) D9) D6
type D2096 = :* (:* (:* D2 D0) D9) D6
type O4060 = :* (:* (:* D2 D0) D9) D6
type H82F = :* (:* (:* D2 D0) D9) D5
type D2095 = :* (:* (:* D2 D0) D9) D5
type O4057 = :* (:* (:* D2 D0) D9) D5
type H82E = :* (:* (:* D2 D0) D9) D4
type D2094 = :* (:* (:* D2 D0) D9) D4
type O4056 = :* (:* (:* D2 D0) D9) D4
type H82D = :* (:* (:* D2 D0) D9) D3
type D2093 = :* (:* (:* D2 D0) D9) D3
type O4055 = :* (:* (:* D2 D0) D9) D3
type H82C = :* (:* (:* D2 D0) D9) D2
type D2092 = :* (:* (:* D2 D0) D9) D2
type O4054 = :* (:* (:* D2 D0) D9) D2
type H82B = :* (:* (:* D2 D0) D9) D1
type D2091 = :* (:* (:* D2 D0) D9) D1
type O4053 = :* (:* (:* D2 D0) D9) D1
type H82A = :* (:* (:* D2 D0) D9) D0
type D2090 = :* (:* (:* D2 D0) D9) D0
type O4052 = :* (:* (:* D2 D0) D9) D0
type H829 = :* (:* (:* D2 D0) D8) D9
type D2089 = :* (:* (:* D2 D0) D8) D9
type O4051 = :* (:* (:* D2 D0) D8) D9
type H828 = :* (:* (:* D2 D0) D8) D8
type D2088 = :* (:* (:* D2 D0) D8) D8
type O4050 = :* (:* (:* D2 D0) D8) D8
type H827 = :* (:* (:* D2 D0) D8) D7
type D2087 = :* (:* (:* D2 D0) D8) D7
type O4047 = :* (:* (:* D2 D0) D8) D7
type H826 = :* (:* (:* D2 D0) D8) D6
type D2086 = :* (:* (:* D2 D0) D8) D6
type O4046 = :* (:* (:* D2 D0) D8) D6
type H825 = :* (:* (:* D2 D0) D8) D5
type D2085 = :* (:* (:* D2 D0) D8) D5
type O4045 = :* (:* (:* D2 D0) D8) D5
type H824 = :* (:* (:* D2 D0) D8) D4
type D2084 = :* (:* (:* D2 D0) D8) D4
type O4044 = :* (:* (:* D2 D0) D8) D4
type H823 = :* (:* (:* D2 D0) D8) D3
type D2083 = :* (:* (:* D2 D0) D8) D3
type O4043 = :* (:* (:* D2 D0) D8) D3
type H822 = :* (:* (:* D2 D0) D8) D2
type D2082 = :* (:* (:* D2 D0) D8) D2
type O4042 = :* (:* (:* D2 D0) D8) D2
type H821 = :* (:* (:* D2 D0) D8) D1
type D2081 = :* (:* (:* D2 D0) D8) D1
type O4041 = :* (:* (:* D2 D0) D8) D1
type H820 = :* (:* (:* D2 D0) D8) D0
type D2080 = :* (:* (:* D2 D0) D8) D0
type O4040 = :* (:* (:* D2 D0) D8) D0
type H81F = :* (:* (:* D2 D0) D7) D9
type D2079 = :* (:* (:* D2 D0) D7) D9
type O4037 = :* (:* (:* D2 D0) D7) D9
type H81E = :* (:* (:* D2 D0) D7) D8
type D2078 = :* (:* (:* D2 D0) D7) D8
type O4036 = :* (:* (:* D2 D0) D7) D8
type H81D = :* (:* (:* D2 D0) D7) D7
type D2077 = :* (:* (:* D2 D0) D7) D7
type O4035 = :* (:* (:* D2 D0) D7) D7
type H81C = :* (:* (:* D2 D0) D7) D6
type D2076 = :* (:* (:* D2 D0) D7) D6
type O4034 = :* (:* (:* D2 D0) D7) D6
type H81B = :* (:* (:* D2 D0) D7) D5
type D2075 = :* (:* (:* D2 D0) D7) D5
type O4033 = :* (:* (:* D2 D0) D7) D5
type H81A = :* (:* (:* D2 D0) D7) D4
type D2074 = :* (:* (:* D2 D0) D7) D4
type O4032 = :* (:* (:* D2 D0) D7) D4
type H819 = :* (:* (:* D2 D0) D7) D3
type D2073 = :* (:* (:* D2 D0) D7) D3
type O4031 = :* (:* (:* D2 D0) D7) D3
type H818 = :* (:* (:* D2 D0) D7) D2
type D2072 = :* (:* (:* D2 D0) D7) D2
type O4030 = :* (:* (:* D2 D0) D7) D2
type H817 = :* (:* (:* D2 D0) D7) D1
type D2071 = :* (:* (:* D2 D0) D7) D1
type O4027 = :* (:* (:* D2 D0) D7) D1
type H816 = :* (:* (:* D2 D0) D7) D0
type D2070 = :* (:* (:* D2 D0) D7) D0
type O4026 = :* (:* (:* D2 D0) D7) D0
type H815 = :* (:* (:* D2 D0) D6) D9
type D2069 = :* (:* (:* D2 D0) D6) D9
type O4025 = :* (:* (:* D2 D0) D6) D9
type H814 = :* (:* (:* D2 D0) D6) D8
type D2068 = :* (:* (:* D2 D0) D6) D8
type O4024 = :* (:* (:* D2 D0) D6) D8
type H813 = :* (:* (:* D2 D0) D6) D7
type D2067 = :* (:* (:* D2 D0) D6) D7
type O4023 = :* (:* (:* D2 D0) D6) D7
type H812 = :* (:* (:* D2 D0) D6) D6
type D2066 = :* (:* (:* D2 D0) D6) D6
type O4022 = :* (:* (:* D2 D0) D6) D6
type H811 = :* (:* (:* D2 D0) D6) D5
type D2065 = :* (:* (:* D2 D0) D6) D5
type O4021 = :* (:* (:* D2 D0) D6) D5
type H810 = :* (:* (:* D2 D0) D6) D4
type D2064 = :* (:* (:* D2 D0) D6) D4
type O4020 = :* (:* (:* D2 D0) D6) D4
type H80F = :* (:* (:* D2 D0) D6) D3
type D2063 = :* (:* (:* D2 D0) D6) D3
type O4017 = :* (:* (:* D2 D0) D6) D3
type H80E = :* (:* (:* D2 D0) D6) D2
type D2062 = :* (:* (:* D2 D0) D6) D2
type O4016 = :* (:* (:* D2 D0) D6) D2
type H80D = :* (:* (:* D2 D0) D6) D1
type D2061 = :* (:* (:* D2 D0) D6) D1
type O4015 = :* (:* (:* D2 D0) D6) D1
type H80C = :* (:* (:* D2 D0) D6) D0
type D2060 = :* (:* (:* D2 D0) D6) D0
type O4014 = :* (:* (:* D2 D0) D6) D0
type H80B = :* (:* (:* D2 D0) D5) D9
type D2059 = :* (:* (:* D2 D0) D5) D9
type O4013 = :* (:* (:* D2 D0) D5) D9
type H80A = :* (:* (:* D2 D0) D5) D8
type D2058 = :* (:* (:* D2 D0) D5) D8
type O4012 = :* (:* (:* D2 D0) D5) D8
type H809 = :* (:* (:* D2 D0) D5) D7
type D2057 = :* (:* (:* D2 D0) D5) D7
type O4011 = :* (:* (:* D2 D0) D5) D7
type H808 = :* (:* (:* D2 D0) D5) D6
type D2056 = :* (:* (:* D2 D0) D5) D6
type O4010 = :* (:* (:* D2 D0) D5) D6
type H807 = :* (:* (:* D2 D0) D5) D5
type D2055 = :* (:* (:* D2 D0) D5) D5
type O4007 = :* (:* (:* D2 D0) D5) D5
type H806 = :* (:* (:* D2 D0) D5) D4
type D2054 = :* (:* (:* D2 D0) D5) D4
type O4006 = :* (:* (:* D2 D0) D5) D4
type H805 = :* (:* (:* D2 D0) D5) D3
type D2053 = :* (:* (:* D2 D0) D5) D3
type O4005 = :* (:* (:* D2 D0) D5) D3
type H804 = :* (:* (:* D2 D0) D5) D2
type D2052 = :* (:* (:* D2 D0) D5) D2
type O4004 = :* (:* (:* D2 D0) D5) D2
type H803 = :* (:* (:* D2 D0) D5) D1
type D2051 = :* (:* (:* D2 D0) D5) D1
type O4003 = :* (:* (:* D2 D0) D5) D1
type H802 = :* (:* (:* D2 D0) D5) D0
type D2050 = :* (:* (:* D2 D0) D5) D0
type O4002 = :* (:* (:* D2 D0) D5) D0
type H801 = :* (:* (:* D2 D0) D4) D9
type D2049 = :* (:* (:* D2 D0) D4) D9
type O4001 = :* (:* (:* D2 D0) D4) D9
type H800 = :* (:* (:* D2 D0) D4) D8
type D2048 = :* (:* (:* D2 D0) D4) D8
type O4000 = :* (:* (:* D2 D0) D4) D8
type H7FF = :* (:* (:* D2 D0) D4) D7
type D2047 = :* (:* (:* D2 D0) D4) D7
type O3777 = :* (:* (:* D2 D0) D4) D7
type H7FE = :* (:* (:* D2 D0) D4) D6
type D2046 = :* (:* (:* D2 D0) D4) D6
type O3776 = :* (:* (:* D2 D0) D4) D6
type H7FD = :* (:* (:* D2 D0) D4) D5
type D2045 = :* (:* (:* D2 D0) D4) D5
type O3775 = :* (:* (:* D2 D0) D4) D5
type H7FC = :* (:* (:* D2 D0) D4) D4
type D2044 = :* (:* (:* D2 D0) D4) D4
type O3774 = :* (:* (:* D2 D0) D4) D4
type H7FB = :* (:* (:* D2 D0) D4) D3
type D2043 = :* (:* (:* D2 D0) D4) D3
type O3773 = :* (:* (:* D2 D0) D4) D3
type H7FA = :* (:* (:* D2 D0) D4) D2
type D2042 = :* (:* (:* D2 D0) D4) D2
type O3772 = :* (:* (:* D2 D0) D4) D2
type H7F9 = :* (:* (:* D2 D0) D4) D1
type D2041 = :* (:* (:* D2 D0) D4) D1
type O3771 = :* (:* (:* D2 D0) D4) D1
type H7F8 = :* (:* (:* D2 D0) D4) D0
type D2040 = :* (:* (:* D2 D0) D4) D0
type O3770 = :* (:* (:* D2 D0) D4) D0
type H7F7 = :* (:* (:* D2 D0) D3) D9
type D2039 = :* (:* (:* D2 D0) D3) D9
type O3767 = :* (:* (:* D2 D0) D3) D9
type H7F6 = :* (:* (:* D2 D0) D3) D8
type D2038 = :* (:* (:* D2 D0) D3) D8
type O3766 = :* (:* (:* D2 D0) D3) D8
type H7F5 = :* (:* (:* D2 D0) D3) D7
type D2037 = :* (:* (:* D2 D0) D3) D7
type O3765 = :* (:* (:* D2 D0) D3) D7
type H7F4 = :* (:* (:* D2 D0) D3) D6
type D2036 = :* (:* (:* D2 D0) D3) D6
type O3764 = :* (:* (:* D2 D0) D3) D6
type H7F3 = :* (:* (:* D2 D0) D3) D5
type D2035 = :* (:* (:* D2 D0) D3) D5
type O3763 = :* (:* (:* D2 D0) D3) D5
type H7F2 = :* (:* (:* D2 D0) D3) D4
type D2034 = :* (:* (:* D2 D0) D3) D4
type O3762 = :* (:* (:* D2 D0) D3) D4
type H7F1 = :* (:* (:* D2 D0) D3) D3
type D2033 = :* (:* (:* D2 D0) D3) D3
type O3761 = :* (:* (:* D2 D0) D3) D3
type H7F0 = :* (:* (:* D2 D0) D3) D2
type D2032 = :* (:* (:* D2 D0) D3) D2
type O3760 = :* (:* (:* D2 D0) D3) D2
type H7EF = :* (:* (:* D2 D0) D3) D1
type D2031 = :* (:* (:* D2 D0) D3) D1
type O3757 = :* (:* (:* D2 D0) D3) D1
type H7EE = :* (:* (:* D2 D0) D3) D0
type D2030 = :* (:* (:* D2 D0) D3) D0
type O3756 = :* (:* (:* D2 D0) D3) D0
type H7ED = :* (:* (:* D2 D0) D2) D9
type D2029 = :* (:* (:* D2 D0) D2) D9
type O3755 = :* (:* (:* D2 D0) D2) D9
type H7EC = :* (:* (:* D2 D0) D2) D8
type D2028 = :* (:* (:* D2 D0) D2) D8
type O3754 = :* (:* (:* D2 D0) D2) D8
type H7EB = :* (:* (:* D2 D0) D2) D7
type D2027 = :* (:* (:* D2 D0) D2) D7
type O3753 = :* (:* (:* D2 D0) D2) D7
type H7EA = :* (:* (:* D2 D0) D2) D6
type D2026 = :* (:* (:* D2 D0) D2) D6
type O3752 = :* (:* (:* D2 D0) D2) D6
type H7E9 = :* (:* (:* D2 D0) D2) D5
type D2025 = :* (:* (:* D2 D0) D2) D5
type O3751 = :* (:* (:* D2 D0) D2) D5
type H7E8 = :* (:* (:* D2 D0) D2) D4
type D2024 = :* (:* (:* D2 D0) D2) D4
type O3750 = :* (:* (:* D2 D0) D2) D4
type H7E7 = :* (:* (:* D2 D0) D2) D3
type D2023 = :* (:* (:* D2 D0) D2) D3
type O3747 = :* (:* (:* D2 D0) D2) D3
type H7E6 = :* (:* (:* D2 D0) D2) D2
type D2022 = :* (:* (:* D2 D0) D2) D2
type O3746 = :* (:* (:* D2 D0) D2) D2
type H7E5 = :* (:* (:* D2 D0) D2) D1
type D2021 = :* (:* (:* D2 D0) D2) D1
type O3745 = :* (:* (:* D2 D0) D2) D1
type H7E4 = :* (:* (:* D2 D0) D2) D0
type D2020 = :* (:* (:* D2 D0) D2) D0
type O3744 = :* (:* (:* D2 D0) D2) D0
type H7E3 = :* (:* (:* D2 D0) D1) D9
type D2019 = :* (:* (:* D2 D0) D1) D9
type O3743 = :* (:* (:* D2 D0) D1) D9
type H7E2 = :* (:* (:* D2 D0) D1) D8
type D2018 = :* (:* (:* D2 D0) D1) D8
type O3742 = :* (:* (:* D2 D0) D1) D8
type H7E1 = :* (:* (:* D2 D0) D1) D7
type D2017 = :* (:* (:* D2 D0) D1) D7
type O3741 = :* (:* (:* D2 D0) D1) D7
type H7E0 = :* (:* (:* D2 D0) D1) D6
type D2016 = :* (:* (:* D2 D0) D1) D6
type O3740 = :* (:* (:* D2 D0) D1) D6
type H7DF = :* (:* (:* D2 D0) D1) D5
type D2015 = :* (:* (:* D2 D0) D1) D5
type O3737 = :* (:* (:* D2 D0) D1) D5
type H7DE = :* (:* (:* D2 D0) D1) D4
type D2014 = :* (:* (:* D2 D0) D1) D4
type O3736 = :* (:* (:* D2 D0) D1) D4
type H7DD = :* (:* (:* D2 D0) D1) D3
type D2013 = :* (:* (:* D2 D0) D1) D3
type O3735 = :* (:* (:* D2 D0) D1) D3
type H7DC = :* (:* (:* D2 D0) D1) D2
type D2012 = :* (:* (:* D2 D0) D1) D2
type O3734 = :* (:* (:* D2 D0) D1) D2
type H7DB = :* (:* (:* D2 D0) D1) D1
type D2011 = :* (:* (:* D2 D0) D1) D1
type O3733 = :* (:* (:* D2 D0) D1) D1
type H7DA = :* (:* (:* D2 D0) D1) D0
type D2010 = :* (:* (:* D2 D0) D1) D0
type O3732 = :* (:* (:* D2 D0) D1) D0
type H7D9 = :* (:* (:* D2 D0) D0) D9
type D2009 = :* (:* (:* D2 D0) D0) D9
type O3731 = :* (:* (:* D2 D0) D0) D9
type H7D8 = :* (:* (:* D2 D0) D0) D8
type D2008 = :* (:* (:* D2 D0) D0) D8
type O3730 = :* (:* (:* D2 D0) D0) D8
type H7D7 = :* (:* (:* D2 D0) D0) D7
type D2007 = :* (:* (:* D2 D0) D0) D7
type O3727 = :* (:* (:* D2 D0) D0) D7
type H7D6 = :* (:* (:* D2 D0) D0) D6
type D2006 = :* (:* (:* D2 D0) D0) D6
type O3726 = :* (:* (:* D2 D0) D0) D6
type H7D5 = :* (:* (:* D2 D0) D0) D5
type D2005 = :* (:* (:* D2 D0) D0) D5
type O3725 = :* (:* (:* D2 D0) D0) D5
type H7D4 = :* (:* (:* D2 D0) D0) D4
type D2004 = :* (:* (:* D2 D0) D0) D4
type O3724 = :* (:* (:* D2 D0) D0) D4
type H7D3 = :* (:* (:* D2 D0) D0) D3
type D2003 = :* (:* (:* D2 D0) D0) D3
type O3723 = :* (:* (:* D2 D0) D0) D3
type H7D2 = :* (:* (:* D2 D0) D0) D2
type D2002 = :* (:* (:* D2 D0) D0) D2
type O3722 = :* (:* (:* D2 D0) D0) D2
type H7D1 = :* (:* (:* D2 D0) D0) D1
type D2001 = :* (:* (:* D2 D0) D0) D1
type O3721 = :* (:* (:* D2 D0) D0) D1
type H7D0 = :* (:* (:* D2 D0) D0) D0
type D2000 = :* (:* (:* D2 D0) D0) D0
type O3720 = :* (:* (:* D2 D0) D0) D0
type H7CF = :* (:* (:* D1 D9) D9) D9
type D1999 = :* (:* (:* D1 D9) D9) D9
type O3717 = :* (:* (:* D1 D9) D9) D9
type H7CE = :* (:* (:* D1 D9) D9) D8
type D1998 = :* (:* (:* D1 D9) D9) D8
type O3716 = :* (:* (:* D1 D9) D9) D8
type H7CD = :* (:* (:* D1 D9) D9) D7
type D1997 = :* (:* (:* D1 D9) D9) D7
type O3715 = :* (:* (:* D1 D9) D9) D7
type H7CC = :* (:* (:* D1 D9) D9) D6
type D1996 = :* (:* (:* D1 D9) D9) D6
type O3714 = :* (:* (:* D1 D9) D9) D6
type H7CB = :* (:* (:* D1 D9) D9) D5
type D1995 = :* (:* (:* D1 D9) D9) D5
type O3713 = :* (:* (:* D1 D9) D9) D5
type H7CA = :* (:* (:* D1 D9) D9) D4
type D1994 = :* (:* (:* D1 D9) D9) D4
type O3712 = :* (:* (:* D1 D9) D9) D4
type H7C9 = :* (:* (:* D1 D9) D9) D3
type D1993 = :* (:* (:* D1 D9) D9) D3
type O3711 = :* (:* (:* D1 D9) D9) D3
type H7C8 = :* (:* (:* D1 D9) D9) D2
type D1992 = :* (:* (:* D1 D9) D9) D2
type O3710 = :* (:* (:* D1 D9) D9) D2
type H7C7 = :* (:* (:* D1 D9) D9) D1
type D1991 = :* (:* (:* D1 D9) D9) D1
type O3707 = :* (:* (:* D1 D9) D9) D1
type H7C6 = :* (:* (:* D1 D9) D9) D0
type D1990 = :* (:* (:* D1 D9) D9) D0
type O3706 = :* (:* (:* D1 D9) D9) D0
type H7C5 = :* (:* (:* D1 D9) D8) D9
type D1989 = :* (:* (:* D1 D9) D8) D9
type O3705 = :* (:* (:* D1 D9) D8) D9
type H7C4 = :* (:* (:* D1 D9) D8) D8
type D1988 = :* (:* (:* D1 D9) D8) D8
type O3704 = :* (:* (:* D1 D9) D8) D8
type H7C3 = :* (:* (:* D1 D9) D8) D7
type D1987 = :* (:* (:* D1 D9) D8) D7
type O3703 = :* (:* (:* D1 D9) D8) D7
type H7C2 = :* (:* (:* D1 D9) D8) D6
type D1986 = :* (:* (:* D1 D9) D8) D6
type O3702 = :* (:* (:* D1 D9) D8) D6
type H7C1 = :* (:* (:* D1 D9) D8) D5
type D1985 = :* (:* (:* D1 D9) D8) D5
type O3701 = :* (:* (:* D1 D9) D8) D5
type H7C0 = :* (:* (:* D1 D9) D8) D4
type D1984 = :* (:* (:* D1 D9) D8) D4
type O3700 = :* (:* (:* D1 D9) D8) D4
type H7BF = :* (:* (:* D1 D9) D8) D3
type D1983 = :* (:* (:* D1 D9) D8) D3
type O3677 = :* (:* (:* D1 D9) D8) D3
type H7BE = :* (:* (:* D1 D9) D8) D2
type D1982 = :* (:* (:* D1 D9) D8) D2
type O3676 = :* (:* (:* D1 D9) D8) D2
type H7BD = :* (:* (:* D1 D9) D8) D1
type D1981 = :* (:* (:* D1 D9) D8) D1
type O3675 = :* (:* (:* D1 D9) D8) D1
type H7BC = :* (:* (:* D1 D9) D8) D0
type D1980 = :* (:* (:* D1 D9) D8) D0
type O3674 = :* (:* (:* D1 D9) D8) D0
type H7BB = :* (:* (:* D1 D9) D7) D9
type D1979 = :* (:* (:* D1 D9) D7) D9
type O3673 = :* (:* (:* D1 D9) D7) D9
type H7BA = :* (:* (:* D1 D9) D7) D8
type D1978 = :* (:* (:* D1 D9) D7) D8
type O3672 = :* (:* (:* D1 D9) D7) D8
type H7B9 = :* (:* (:* D1 D9) D7) D7
type D1977 = :* (:* (:* D1 D9) D7) D7
type O3671 = :* (:* (:* D1 D9) D7) D7
type H7B8 = :* (:* (:* D1 D9) D7) D6
type D1976 = :* (:* (:* D1 D9) D7) D6
type O3670 = :* (:* (:* D1 D9) D7) D6
type H7B7 = :* (:* (:* D1 D9) D7) D5
type D1975 = :* (:* (:* D1 D9) D7) D5
type O3667 = :* (:* (:* D1 D9) D7) D5
type H7B6 = :* (:* (:* D1 D9) D7) D4
type D1974 = :* (:* (:* D1 D9) D7) D4
type O3666 = :* (:* (:* D1 D9) D7) D4
type H7B5 = :* (:* (:* D1 D9) D7) D3
type D1973 = :* (:* (:* D1 D9) D7) D3
type O3665 = :* (:* (:* D1 D9) D7) D3
type H7B4 = :* (:* (:* D1 D9) D7) D2
type D1972 = :* (:* (:* D1 D9) D7) D2
type O3664 = :* (:* (:* D1 D9) D7) D2
type H7B3 = :* (:* (:* D1 D9) D7) D1
type D1971 = :* (:* (:* D1 D9) D7) D1
type O3663 = :* (:* (:* D1 D9) D7) D1
type H7B2 = :* (:* (:* D1 D9) D7) D0
type D1970 = :* (:* (:* D1 D9) D7) D0
type O3662 = :* (:* (:* D1 D9) D7) D0
type H7B1 = :* (:* (:* D1 D9) D6) D9
type D1969 = :* (:* (:* D1 D9) D6) D9
type O3661 = :* (:* (:* D1 D9) D6) D9
type H7B0 = :* (:* (:* D1 D9) D6) D8
type D1968 = :* (:* (:* D1 D9) D6) D8
type O3660 = :* (:* (:* D1 D9) D6) D8
type H7AF = :* (:* (:* D1 D9) D6) D7
type D1967 = :* (:* (:* D1 D9) D6) D7
type O3657 = :* (:* (:* D1 D9) D6) D7
type H7AE = :* (:* (:* D1 D9) D6) D6
type D1966 = :* (:* (:* D1 D9) D6) D6
type O3656 = :* (:* (:* D1 D9) D6) D6
type H7AD = :* (:* (:* D1 D9) D6) D5
type D1965 = :* (:* (:* D1 D9) D6) D5
type O3655 = :* (:* (:* D1 D9) D6) D5
type H7AC = :* (:* (:* D1 D9) D6) D4
type D1964 = :* (:* (:* D1 D9) D6) D4
type O3654 = :* (:* (:* D1 D9) D6) D4
type H7AB = :* (:* (:* D1 D9) D6) D3
type D1963 = :* (:* (:* D1 D9) D6) D3
type O3653 = :* (:* (:* D1 D9) D6) D3
type H7AA = :* (:* (:* D1 D9) D6) D2
type D1962 = :* (:* (:* D1 D9) D6) D2
type O3652 = :* (:* (:* D1 D9) D6) D2
type H7A9 = :* (:* (:* D1 D9) D6) D1
type D1961 = :* (:* (:* D1 D9) D6) D1
type O3651 = :* (:* (:* D1 D9) D6) D1
type H7A8 = :* (:* (:* D1 D9) D6) D0
type D1960 = :* (:* (:* D1 D9) D6) D0
type O3650 = :* (:* (:* D1 D9) D6) D0
type H7A7 = :* (:* (:* D1 D9) D5) D9
type D1959 = :* (:* (:* D1 D9) D5) D9
type O3647 = :* (:* (:* D1 D9) D5) D9
type H7A6 = :* (:* (:* D1 D9) D5) D8
type D1958 = :* (:* (:* D1 D9) D5) D8
type O3646 = :* (:* (:* D1 D9) D5) D8
type H7A5 = :* (:* (:* D1 D9) D5) D7
type D1957 = :* (:* (:* D1 D9) D5) D7
type O3645 = :* (:* (:* D1 D9) D5) D7
type H7A4 = :* (:* (:* D1 D9) D5) D6
type D1956 = :* (:* (:* D1 D9) D5) D6
type O3644 = :* (:* (:* D1 D9) D5) D6
type H7A3 = :* (:* (:* D1 D9) D5) D5
type D1955 = :* (:* (:* D1 D9) D5) D5
type O3643 = :* (:* (:* D1 D9) D5) D5
type H7A2 = :* (:* (:* D1 D9) D5) D4
type D1954 = :* (:* (:* D1 D9) D5) D4
type O3642 = :* (:* (:* D1 D9) D5) D4
type H7A1 = :* (:* (:* D1 D9) D5) D3
type D1953 = :* (:* (:* D1 D9) D5) D3
type O3641 = :* (:* (:* D1 D9) D5) D3
type H7A0 = :* (:* (:* D1 D9) D5) D2
type D1952 = :* (:* (:* D1 D9) D5) D2
type O3640 = :* (:* (:* D1 D9) D5) D2
type H79F = :* (:* (:* D1 D9) D5) D1
type D1951 = :* (:* (:* D1 D9) D5) D1
type O3637 = :* (:* (:* D1 D9) D5) D1
type H79E = :* (:* (:* D1 D9) D5) D0
type D1950 = :* (:* (:* D1 D9) D5) D0
type O3636 = :* (:* (:* D1 D9) D5) D0
type H79D = :* (:* (:* D1 D9) D4) D9
type D1949 = :* (:* (:* D1 D9) D4) D9
type O3635 = :* (:* (:* D1 D9) D4) D9
type H79C = :* (:* (:* D1 D9) D4) D8
type D1948 = :* (:* (:* D1 D9) D4) D8
type O3634 = :* (:* (:* D1 D9) D4) D8
type H79B = :* (:* (:* D1 D9) D4) D7
type D1947 = :* (:* (:* D1 D9) D4) D7
type O3633 = :* (:* (:* D1 D9) D4) D7
type H79A = :* (:* (:* D1 D9) D4) D6
type D1946 = :* (:* (:* D1 D9) D4) D6
type O3632 = :* (:* (:* D1 D9) D4) D6
type H799 = :* (:* (:* D1 D9) D4) D5
type D1945 = :* (:* (:* D1 D9) D4) D5
type O3631 = :* (:* (:* D1 D9) D4) D5
type H798 = :* (:* (:* D1 D9) D4) D4
type D1944 = :* (:* (:* D1 D9) D4) D4
type O3630 = :* (:* (:* D1 D9) D4) D4
type H797 = :* (:* (:* D1 D9) D4) D3
type D1943 = :* (:* (:* D1 D9) D4) D3
type O3627 = :* (:* (:* D1 D9) D4) D3
type H796 = :* (:* (:* D1 D9) D4) D2
type D1942 = :* (:* (:* D1 D9) D4) D2
type O3626 = :* (:* (:* D1 D9) D4) D2
type H795 = :* (:* (:* D1 D9) D4) D1
type D1941 = :* (:* (:* D1 D9) D4) D1
type O3625 = :* (:* (:* D1 D9) D4) D1
type H794 = :* (:* (:* D1 D9) D4) D0
type D1940 = :* (:* (:* D1 D9) D4) D0
type O3624 = :* (:* (:* D1 D9) D4) D0
type H793 = :* (:* (:* D1 D9) D3) D9
type D1939 = :* (:* (:* D1 D9) D3) D9
type O3623 = :* (:* (:* D1 D9) D3) D9
type H792 = :* (:* (:* D1 D9) D3) D8
type D1938 = :* (:* (:* D1 D9) D3) D8
type O3622 = :* (:* (:* D1 D9) D3) D8
type H791 = :* (:* (:* D1 D9) D3) D7
type D1937 = :* (:* (:* D1 D9) D3) D7
type O3621 = :* (:* (:* D1 D9) D3) D7
type H790 = :* (:* (:* D1 D9) D3) D6
type D1936 = :* (:* (:* D1 D9) D3) D6
type O3620 = :* (:* (:* D1 D9) D3) D6
type H78F = :* (:* (:* D1 D9) D3) D5
type D1935 = :* (:* (:* D1 D9) D3) D5
type O3617 = :* (:* (:* D1 D9) D3) D5
type H78E = :* (:* (:* D1 D9) D3) D4
type D1934 = :* (:* (:* D1 D9) D3) D4
type O3616 = :* (:* (:* D1 D9) D3) D4
type H78D = :* (:* (:* D1 D9) D3) D3
type D1933 = :* (:* (:* D1 D9) D3) D3
type O3615 = :* (:* (:* D1 D9) D3) D3
type H78C = :* (:* (:* D1 D9) D3) D2
type D1932 = :* (:* (:* D1 D9) D3) D2
type O3614 = :* (:* (:* D1 D9) D3) D2
type H78B = :* (:* (:* D1 D9) D3) D1
type D1931 = :* (:* (:* D1 D9) D3) D1
type O3613 = :* (:* (:* D1 D9) D3) D1
type H78A = :* (:* (:* D1 D9) D3) D0
type D1930 = :* (:* (:* D1 D9) D3) D0
type O3612 = :* (:* (:* D1 D9) D3) D0
type H789 = :* (:* (:* D1 D9) D2) D9
type D1929 = :* (:* (:* D1 D9) D2) D9
type O3611 = :* (:* (:* D1 D9) D2) D9
type H788 = :* (:* (:* D1 D9) D2) D8
type D1928 = :* (:* (:* D1 D9) D2) D8
type O3610 = :* (:* (:* D1 D9) D2) D8
type H787 = :* (:* (:* D1 D9) D2) D7
type D1927 = :* (:* (:* D1 D9) D2) D7
type O3607 = :* (:* (:* D1 D9) D2) D7
type H786 = :* (:* (:* D1 D9) D2) D6
type D1926 = :* (:* (:* D1 D9) D2) D6
type O3606 = :* (:* (:* D1 D9) D2) D6
type H785 = :* (:* (:* D1 D9) D2) D5
type D1925 = :* (:* (:* D1 D9) D2) D5
type O3605 = :* (:* (:* D1 D9) D2) D5
type H784 = :* (:* (:* D1 D9) D2) D4
type D1924 = :* (:* (:* D1 D9) D2) D4
type O3604 = :* (:* (:* D1 D9) D2) D4
type H783 = :* (:* (:* D1 D9) D2) D3
type D1923 = :* (:* (:* D1 D9) D2) D3
type O3603 = :* (:* (:* D1 D9) D2) D3
type H782 = :* (:* (:* D1 D9) D2) D2
type D1922 = :* (:* (:* D1 D9) D2) D2
type O3602 = :* (:* (:* D1 D9) D2) D2
type H781 = :* (:* (:* D1 D9) D2) D1
type D1921 = :* (:* (:* D1 D9) D2) D1
type O3601 = :* (:* (:* D1 D9) D2) D1
type H780 = :* (:* (:* D1 D9) D2) D0
type D1920 = :* (:* (:* D1 D9) D2) D0
type O3600 = :* (:* (:* D1 D9) D2) D0
type H77F = :* (:* (:* D1 D9) D1) D9
type D1919 = :* (:* (:* D1 D9) D1) D9
type O3577 = :* (:* (:* D1 D9) D1) D9
type H77E = :* (:* (:* D1 D9) D1) D8
type D1918 = :* (:* (:* D1 D9) D1) D8
type O3576 = :* (:* (:* D1 D9) D1) D8
type H77D = :* (:* (:* D1 D9) D1) D7
type D1917 = :* (:* (:* D1 D9) D1) D7
type O3575 = :* (:* (:* D1 D9) D1) D7
type H77C = :* (:* (:* D1 D9) D1) D6
type D1916 = :* (:* (:* D1 D9) D1) D6
type O3574 = :* (:* (:* D1 D9) D1) D6
type H77B = :* (:* (:* D1 D9) D1) D5
type D1915 = :* (:* (:* D1 D9) D1) D5
type O3573 = :* (:* (:* D1 D9) D1) D5
type H77A = :* (:* (:* D1 D9) D1) D4
type D1914 = :* (:* (:* D1 D9) D1) D4
type O3572 = :* (:* (:* D1 D9) D1) D4
type H779 = :* (:* (:* D1 D9) D1) D3
type D1913 = :* (:* (:* D1 D9) D1) D3
type O3571 = :* (:* (:* D1 D9) D1) D3
type H778 = :* (:* (:* D1 D9) D1) D2
type D1912 = :* (:* (:* D1 D9) D1) D2
type O3570 = :* (:* (:* D1 D9) D1) D2
type H777 = :* (:* (:* D1 D9) D1) D1
type D1911 = :* (:* (:* D1 D9) D1) D1
type O3567 = :* (:* (:* D1 D9) D1) D1
type H776 = :* (:* (:* D1 D9) D1) D0
type D1910 = :* (:* (:* D1 D9) D1) D0
type O3566 = :* (:* (:* D1 D9) D1) D0
type H775 = :* (:* (:* D1 D9) D0) D9
type D1909 = :* (:* (:* D1 D9) D0) D9
type O3565 = :* (:* (:* D1 D9) D0) D9
type H774 = :* (:* (:* D1 D9) D0) D8
type D1908 = :* (:* (:* D1 D9) D0) D8
type O3564 = :* (:* (:* D1 D9) D0) D8
type H773 = :* (:* (:* D1 D9) D0) D7
type D1907 = :* (:* (:* D1 D9) D0) D7
type O3563 = :* (:* (:* D1 D9) D0) D7
type H772 = :* (:* (:* D1 D9) D0) D6
type D1906 = :* (:* (:* D1 D9) D0) D6
type O3562 = :* (:* (:* D1 D9) D0) D6
type H771 = :* (:* (:* D1 D9) D0) D5
type D1905 = :* (:* (:* D1 D9) D0) D5
type O3561 = :* (:* (:* D1 D9) D0) D5
type H770 = :* (:* (:* D1 D9) D0) D4
type D1904 = :* (:* (:* D1 D9) D0) D4
type O3560 = :* (:* (:* D1 D9) D0) D4
type H76F = :* (:* (:* D1 D9) D0) D3
type D1903 = :* (:* (:* D1 D9) D0) D3
type O3557 = :* (:* (:* D1 D9) D0) D3
type H76E = :* (:* (:* D1 D9) D0) D2
type D1902 = :* (:* (:* D1 D9) D0) D2
type O3556 = :* (:* (:* D1 D9) D0) D2
type H76D = :* (:* (:* D1 D9) D0) D1
type D1901 = :* (:* (:* D1 D9) D0) D1
type O3555 = :* (:* (:* D1 D9) D0) D1
type H76C = :* (:* (:* D1 D9) D0) D0
type D1900 = :* (:* (:* D1 D9) D0) D0
type O3554 = :* (:* (:* D1 D9) D0) D0
type H76B = :* (:* (:* D1 D8) D9) D9
type D1899 = :* (:* (:* D1 D8) D9) D9
type O3553 = :* (:* (:* D1 D8) D9) D9
type H76A = :* (:* (:* D1 D8) D9) D8
type D1898 = :* (:* (:* D1 D8) D9) D8
type O3552 = :* (:* (:* D1 D8) D9) D8
type H769 = :* (:* (:* D1 D8) D9) D7
type D1897 = :* (:* (:* D1 D8) D9) D7
type O3551 = :* (:* (:* D1 D8) D9) D7
type H768 = :* (:* (:* D1 D8) D9) D6
type D1896 = :* (:* (:* D1 D8) D9) D6
type O3550 = :* (:* (:* D1 D8) D9) D6
type H767 = :* (:* (:* D1 D8) D9) D5
type D1895 = :* (:* (:* D1 D8) D9) D5
type O3547 = :* (:* (:* D1 D8) D9) D5
type H766 = :* (:* (:* D1 D8) D9) D4
type D1894 = :* (:* (:* D1 D8) D9) D4
type O3546 = :* (:* (:* D1 D8) D9) D4
type H765 = :* (:* (:* D1 D8) D9) D3
type D1893 = :* (:* (:* D1 D8) D9) D3
type O3545 = :* (:* (:* D1 D8) D9) D3
type H764 = :* (:* (:* D1 D8) D9) D2
type D1892 = :* (:* (:* D1 D8) D9) D2
type O3544 = :* (:* (:* D1 D8) D9) D2
type H763 = :* (:* (:* D1 D8) D9) D1
type D1891 = :* (:* (:* D1 D8) D9) D1
type O3543 = :* (:* (:* D1 D8) D9) D1
type H762 = :* (:* (:* D1 D8) D9) D0
type D1890 = :* (:* (:* D1 D8) D9) D0
type O3542 = :* (:* (:* D1 D8) D9) D0
type H761 = :* (:* (:* D1 D8) D8) D9
type D1889 = :* (:* (:* D1 D8) D8) D9
type O3541 = :* (:* (:* D1 D8) D8) D9
type H760 = :* (:* (:* D1 D8) D8) D8
type D1888 = :* (:* (:* D1 D8) D8) D8
type O3540 = :* (:* (:* D1 D8) D8) D8
type H75F = :* (:* (:* D1 D8) D8) D7
type D1887 = :* (:* (:* D1 D8) D8) D7
type O3537 = :* (:* (:* D1 D8) D8) D7
type H75E = :* (:* (:* D1 D8) D8) D6
type D1886 = :* (:* (:* D1 D8) D8) D6
type O3536 = :* (:* (:* D1 D8) D8) D6
type H75D = :* (:* (:* D1 D8) D8) D5
type D1885 = :* (:* (:* D1 D8) D8) D5
type O3535 = :* (:* (:* D1 D8) D8) D5
type H75C = :* (:* (:* D1 D8) D8) D4
type D1884 = :* (:* (:* D1 D8) D8) D4
type O3534 = :* (:* (:* D1 D8) D8) D4
type H75B = :* (:* (:* D1 D8) D8) D3
type D1883 = :* (:* (:* D1 D8) D8) D3
type O3533 = :* (:* (:* D1 D8) D8) D3
type H75A = :* (:* (:* D1 D8) D8) D2
type D1882 = :* (:* (:* D1 D8) D8) D2
type O3532 = :* (:* (:* D1 D8) D8) D2
type H759 = :* (:* (:* D1 D8) D8) D1
type D1881 = :* (:* (:* D1 D8) D8) D1
type O3531 = :* (:* (:* D1 D8) D8) D1
type H758 = :* (:* (:* D1 D8) D8) D0
type D1880 = :* (:* (:* D1 D8) D8) D0
type O3530 = :* (:* (:* D1 D8) D8) D0
type H757 = :* (:* (:* D1 D8) D7) D9
type D1879 = :* (:* (:* D1 D8) D7) D9
type O3527 = :* (:* (:* D1 D8) D7) D9
type H756 = :* (:* (:* D1 D8) D7) D8
type D1878 = :* (:* (:* D1 D8) D7) D8
type O3526 = :* (:* (:* D1 D8) D7) D8
type H755 = :* (:* (:* D1 D8) D7) D7
type D1877 = :* (:* (:* D1 D8) D7) D7
type O3525 = :* (:* (:* D1 D8) D7) D7
type H754 = :* (:* (:* D1 D8) D7) D6
type D1876 = :* (:* (:* D1 D8) D7) D6
type O3524 = :* (:* (:* D1 D8) D7) D6
type H753 = :* (:* (:* D1 D8) D7) D5
type D1875 = :* (:* (:* D1 D8) D7) D5
type O3523 = :* (:* (:* D1 D8) D7) D5
type H752 = :* (:* (:* D1 D8) D7) D4
type D1874 = :* (:* (:* D1 D8) D7) D4
type O3522 = :* (:* (:* D1 D8) D7) D4
type H751 = :* (:* (:* D1 D8) D7) D3
type D1873 = :* (:* (:* D1 D8) D7) D3
type O3521 = :* (:* (:* D1 D8) D7) D3
type H750 = :* (:* (:* D1 D8) D7) D2
type D1872 = :* (:* (:* D1 D8) D7) D2
type O3520 = :* (:* (:* D1 D8) D7) D2
type H74F = :* (:* (:* D1 D8) D7) D1
type D1871 = :* (:* (:* D1 D8) D7) D1
type O3517 = :* (:* (:* D1 D8) D7) D1
type H74E = :* (:* (:* D1 D8) D7) D0
type D1870 = :* (:* (:* D1 D8) D7) D0
type O3516 = :* (:* (:* D1 D8) D7) D0
type H74D = :* (:* (:* D1 D8) D6) D9
type D1869 = :* (:* (:* D1 D8) D6) D9
type O3515 = :* (:* (:* D1 D8) D6) D9
type H74C = :* (:* (:* D1 D8) D6) D8
type D1868 = :* (:* (:* D1 D8) D6) D8
type O3514 = :* (:* (:* D1 D8) D6) D8
type H74B = :* (:* (:* D1 D8) D6) D7
type D1867 = :* (:* (:* D1 D8) D6) D7
type O3513 = :* (:* (:* D1 D8) D6) D7
type H74A = :* (:* (:* D1 D8) D6) D6
type D1866 = :* (:* (:* D1 D8) D6) D6
type O3512 = :* (:* (:* D1 D8) D6) D6
type H749 = :* (:* (:* D1 D8) D6) D5
type D1865 = :* (:* (:* D1 D8) D6) D5
type O3511 = :* (:* (:* D1 D8) D6) D5
type H748 = :* (:* (:* D1 D8) D6) D4
type D1864 = :* (:* (:* D1 D8) D6) D4
type O3510 = :* (:* (:* D1 D8) D6) D4
type H747 = :* (:* (:* D1 D8) D6) D3
type D1863 = :* (:* (:* D1 D8) D6) D3
type O3507 = :* (:* (:* D1 D8) D6) D3
type H746 = :* (:* (:* D1 D8) D6) D2
type D1862 = :* (:* (:* D1 D8) D6) D2
type O3506 = :* (:* (:* D1 D8) D6) D2
type H745 = :* (:* (:* D1 D8) D6) D1
type D1861 = :* (:* (:* D1 D8) D6) D1
type O3505 = :* (:* (:* D1 D8) D6) D1
type H744 = :* (:* (:* D1 D8) D6) D0
type D1860 = :* (:* (:* D1 D8) D6) D0
type O3504 = :* (:* (:* D1 D8) D6) D0
type H743 = :* (:* (:* D1 D8) D5) D9
type D1859 = :* (:* (:* D1 D8) D5) D9
type O3503 = :* (:* (:* D1 D8) D5) D9
type H742 = :* (:* (:* D1 D8) D5) D8
type D1858 = :* (:* (:* D1 D8) D5) D8
type O3502 = :* (:* (:* D1 D8) D5) D8
type H741 = :* (:* (:* D1 D8) D5) D7
type D1857 = :* (:* (:* D1 D8) D5) D7
type O3501 = :* (:* (:* D1 D8) D5) D7
type H740 = :* (:* (:* D1 D8) D5) D6
type D1856 = :* (:* (:* D1 D8) D5) D6
type O3500 = :* (:* (:* D1 D8) D5) D6
type H73F = :* (:* (:* D1 D8) D5) D5
type D1855 = :* (:* (:* D1 D8) D5) D5
type O3477 = :* (:* (:* D1 D8) D5) D5
type H73E = :* (:* (:* D1 D8) D5) D4
type D1854 = :* (:* (:* D1 D8) D5) D4
type O3476 = :* (:* (:* D1 D8) D5) D4
type H73D = :* (:* (:* D1 D8) D5) D3
type D1853 = :* (:* (:* D1 D8) D5) D3
type O3475 = :* (:* (:* D1 D8) D5) D3
type H73C = :* (:* (:* D1 D8) D5) D2
type D1852 = :* (:* (:* D1 D8) D5) D2
type O3474 = :* (:* (:* D1 D8) D5) D2
type H73B = :* (:* (:* D1 D8) D5) D1
type D1851 = :* (:* (:* D1 D8) D5) D1
type O3473 = :* (:* (:* D1 D8) D5) D1
type H73A = :* (:* (:* D1 D8) D5) D0
type D1850 = :* (:* (:* D1 D8) D5) D0
type O3472 = :* (:* (:* D1 D8) D5) D0
type H739 = :* (:* (:* D1 D8) D4) D9
type D1849 = :* (:* (:* D1 D8) D4) D9
type O3471 = :* (:* (:* D1 D8) D4) D9
type H738 = :* (:* (:* D1 D8) D4) D8
type D1848 = :* (:* (:* D1 D8) D4) D8
type O3470 = :* (:* (:* D1 D8) D4) D8
type H737 = :* (:* (:* D1 D8) D4) D7
type D1847 = :* (:* (:* D1 D8) D4) D7
type O3467 = :* (:* (:* D1 D8) D4) D7
type H736 = :* (:* (:* D1 D8) D4) D6
type D1846 = :* (:* (:* D1 D8) D4) D6
type O3466 = :* (:* (:* D1 D8) D4) D6
type H735 = :* (:* (:* D1 D8) D4) D5
type D1845 = :* (:* (:* D1 D8) D4) D5
type O3465 = :* (:* (:* D1 D8) D4) D5
type H734 = :* (:* (:* D1 D8) D4) D4
type D1844 = :* (:* (:* D1 D8) D4) D4
type O3464 = :* (:* (:* D1 D8) D4) D4
type H733 = :* (:* (:* D1 D8) D4) D3
type D1843 = :* (:* (:* D1 D8) D4) D3
type O3463 = :* (:* (:* D1 D8) D4) D3
type H732 = :* (:* (:* D1 D8) D4) D2
type D1842 = :* (:* (:* D1 D8) D4) D2
type O3462 = :* (:* (:* D1 D8) D4) D2
type H731 = :* (:* (:* D1 D8) D4) D1
type D1841 = :* (:* (:* D1 D8) D4) D1
type O3461 = :* (:* (:* D1 D8) D4) D1
type H730 = :* (:* (:* D1 D8) D4) D0
type D1840 = :* (:* (:* D1 D8) D4) D0
type O3460 = :* (:* (:* D1 D8) D4) D0
type H72F = :* (:* (:* D1 D8) D3) D9
type D1839 = :* (:* (:* D1 D8) D3) D9
type O3457 = :* (:* (:* D1 D8) D3) D9
type H72E = :* (:* (:* D1 D8) D3) D8
type D1838 = :* (:* (:* D1 D8) D3) D8
type O3456 = :* (:* (:* D1 D8) D3) D8
type H72D = :* (:* (:* D1 D8) D3) D7
type D1837 = :* (:* (:* D1 D8) D3) D7
type O3455 = :* (:* (:* D1 D8) D3) D7
type H72C = :* (:* (:* D1 D8) D3) D6
type D1836 = :* (:* (:* D1 D8) D3) D6
type O3454 = :* (:* (:* D1 D8) D3) D6
type H72B = :* (:* (:* D1 D8) D3) D5
type D1835 = :* (:* (:* D1 D8) D3) D5
type O3453 = :* (:* (:* D1 D8) D3) D5
type H72A = :* (:* (:* D1 D8) D3) D4
type D1834 = :* (:* (:* D1 D8) D3) D4
type O3452 = :* (:* (:* D1 D8) D3) D4
type H729 = :* (:* (:* D1 D8) D3) D3
type D1833 = :* (:* (:* D1 D8) D3) D3
type O3451 = :* (:* (:* D1 D8) D3) D3
type H728 = :* (:* (:* D1 D8) D3) D2
type D1832 = :* (:* (:* D1 D8) D3) D2
type O3450 = :* (:* (:* D1 D8) D3) D2
type H727 = :* (:* (:* D1 D8) D3) D1
type D1831 = :* (:* (:* D1 D8) D3) D1
type O3447 = :* (:* (:* D1 D8) D3) D1
type H726 = :* (:* (:* D1 D8) D3) D0
type D1830 = :* (:* (:* D1 D8) D3) D0
type O3446 = :* (:* (:* D1 D8) D3) D0
type H725 = :* (:* (:* D1 D8) D2) D9
type D1829 = :* (:* (:* D1 D8) D2) D9
type O3445 = :* (:* (:* D1 D8) D2) D9
type H724 = :* (:* (:* D1 D8) D2) D8
type D1828 = :* (:* (:* D1 D8) D2) D8
type O3444 = :* (:* (:* D1 D8) D2) D8
type H723 = :* (:* (:* D1 D8) D2) D7
type D1827 = :* (:* (:* D1 D8) D2) D7
type O3443 = :* (:* (:* D1 D8) D2) D7
type H722 = :* (:* (:* D1 D8) D2) D6
type D1826 = :* (:* (:* D1 D8) D2) D6
type O3442 = :* (:* (:* D1 D8) D2) D6
type H721 = :* (:* (:* D1 D8) D2) D5
type D1825 = :* (:* (:* D1 D8) D2) D5
type O3441 = :* (:* (:* D1 D8) D2) D5
type H720 = :* (:* (:* D1 D8) D2) D4
type D1824 = :* (:* (:* D1 D8) D2) D4
type O3440 = :* (:* (:* D1 D8) D2) D4
type H71F = :* (:* (:* D1 D8) D2) D3
type D1823 = :* (:* (:* D1 D8) D2) D3
type O3437 = :* (:* (:* D1 D8) D2) D3
type H71E = :* (:* (:* D1 D8) D2) D2
type D1822 = :* (:* (:* D1 D8) D2) D2
type O3436 = :* (:* (:* D1 D8) D2) D2
type H71D = :* (:* (:* D1 D8) D2) D1
type D1821 = :* (:* (:* D1 D8) D2) D1
type O3435 = :* (:* (:* D1 D8) D2) D1
type H71C = :* (:* (:* D1 D8) D2) D0
type D1820 = :* (:* (:* D1 D8) D2) D0
type O3434 = :* (:* (:* D1 D8) D2) D0
type H71B = :* (:* (:* D1 D8) D1) D9
type D1819 = :* (:* (:* D1 D8) D1) D9
type O3433 = :* (:* (:* D1 D8) D1) D9
type H71A = :* (:* (:* D1 D8) D1) D8
type D1818 = :* (:* (:* D1 D8) D1) D8
type O3432 = :* (:* (:* D1 D8) D1) D8
type H719 = :* (:* (:* D1 D8) D1) D7
type D1817 = :* (:* (:* D1 D8) D1) D7
type O3431 = :* (:* (:* D1 D8) D1) D7
type H718 = :* (:* (:* D1 D8) D1) D6
type D1816 = :* (:* (:* D1 D8) D1) D6
type O3430 = :* (:* (:* D1 D8) D1) D6
type H717 = :* (:* (:* D1 D8) D1) D5
type D1815 = :* (:* (:* D1 D8) D1) D5
type O3427 = :* (:* (:* D1 D8) D1) D5
type H716 = :* (:* (:* D1 D8) D1) D4
type D1814 = :* (:* (:* D1 D8) D1) D4
type O3426 = :* (:* (:* D1 D8) D1) D4
type H715 = :* (:* (:* D1 D8) D1) D3
type D1813 = :* (:* (:* D1 D8) D1) D3
type O3425 = :* (:* (:* D1 D8) D1) D3
type H714 = :* (:* (:* D1 D8) D1) D2
type D1812 = :* (:* (:* D1 D8) D1) D2
type O3424 = :* (:* (:* D1 D8) D1) D2
type H713 = :* (:* (:* D1 D8) D1) D1
type D1811 = :* (:* (:* D1 D8) D1) D1
type O3423 = :* (:* (:* D1 D8) D1) D1
type H712 = :* (:* (:* D1 D8) D1) D0
type D1810 = :* (:* (:* D1 D8) D1) D0
type O3422 = :* (:* (:* D1 D8) D1) D0
type H711 = :* (:* (:* D1 D8) D0) D9
type D1809 = :* (:* (:* D1 D8) D0) D9
type O3421 = :* (:* (:* D1 D8) D0) D9
type H710 = :* (:* (:* D1 D8) D0) D8
type D1808 = :* (:* (:* D1 D8) D0) D8
type O3420 = :* (:* (:* D1 D8) D0) D8
type H70F = :* (:* (:* D1 D8) D0) D7
type D1807 = :* (:* (:* D1 D8) D0) D7
type O3417 = :* (:* (:* D1 D8) D0) D7
type H70E = :* (:* (:* D1 D8) D0) D6
type D1806 = :* (:* (:* D1 D8) D0) D6
type O3416 = :* (:* (:* D1 D8) D0) D6
type H70D = :* (:* (:* D1 D8) D0) D5
type D1805 = :* (:* (:* D1 D8) D0) D5
type O3415 = :* (:* (:* D1 D8) D0) D5
type H70C = :* (:* (:* D1 D8) D0) D4
type D1804 = :* (:* (:* D1 D8) D0) D4
type O3414 = :* (:* (:* D1 D8) D0) D4
type H70B = :* (:* (:* D1 D8) D0) D3
type D1803 = :* (:* (:* D1 D8) D0) D3
type O3413 = :* (:* (:* D1 D8) D0) D3
type H70A = :* (:* (:* D1 D8) D0) D2
type D1802 = :* (:* (:* D1 D8) D0) D2
type O3412 = :* (:* (:* D1 D8) D0) D2
type H709 = :* (:* (:* D1 D8) D0) D1
type D1801 = :* (:* (:* D1 D8) D0) D1
type O3411 = :* (:* (:* D1 D8) D0) D1
type H708 = :* (:* (:* D1 D8) D0) D0
type D1800 = :* (:* (:* D1 D8) D0) D0
type O3410 = :* (:* (:* D1 D8) D0) D0
type H707 = :* (:* (:* D1 D7) D9) D9
type D1799 = :* (:* (:* D1 D7) D9) D9
type O3407 = :* (:* (:* D1 D7) D9) D9
type H706 = :* (:* (:* D1 D7) D9) D8
type D1798 = :* (:* (:* D1 D7) D9) D8
type O3406 = :* (:* (:* D1 D7) D9) D8
type H705 = :* (:* (:* D1 D7) D9) D7
type D1797 = :* (:* (:* D1 D7) D9) D7
type O3405 = :* (:* (:* D1 D7) D9) D7
type H704 = :* (:* (:* D1 D7) D9) D6
type D1796 = :* (:* (:* D1 D7) D9) D6
type O3404 = :* (:* (:* D1 D7) D9) D6
type H703 = :* (:* (:* D1 D7) D9) D5
type D1795 = :* (:* (:* D1 D7) D9) D5
type O3403 = :* (:* (:* D1 D7) D9) D5
type H702 = :* (:* (:* D1 D7) D9) D4
type D1794 = :* (:* (:* D1 D7) D9) D4
type O3402 = :* (:* (:* D1 D7) D9) D4
type H701 = :* (:* (:* D1 D7) D9) D3
type D1793 = :* (:* (:* D1 D7) D9) D3
type O3401 = :* (:* (:* D1 D7) D9) D3
type H700 = :* (:* (:* D1 D7) D9) D2
type D1792 = :* (:* (:* D1 D7) D9) D2
type O3400 = :* (:* (:* D1 D7) D9) D2
type H6FF = :* (:* (:* D1 D7) D9) D1
type D1791 = :* (:* (:* D1 D7) D9) D1
type O3377 = :* (:* (:* D1 D7) D9) D1
type H6FE = :* (:* (:* D1 D7) D9) D0
type D1790 = :* (:* (:* D1 D7) D9) D0
type O3376 = :* (:* (:* D1 D7) D9) D0
type H6FD = :* (:* (:* D1 D7) D8) D9
type D1789 = :* (:* (:* D1 D7) D8) D9
type O3375 = :* (:* (:* D1 D7) D8) D9
type H6FC = :* (:* (:* D1 D7) D8) D8
type D1788 = :* (:* (:* D1 D7) D8) D8
type O3374 = :* (:* (:* D1 D7) D8) D8
type H6FB = :* (:* (:* D1 D7) D8) D7
type D1787 = :* (:* (:* D1 D7) D8) D7
type O3373 = :* (:* (:* D1 D7) D8) D7
type H6FA = :* (:* (:* D1 D7) D8) D6
type D1786 = :* (:* (:* D1 D7) D8) D6
type O3372 = :* (:* (:* D1 D7) D8) D6
type H6F9 = :* (:* (:* D1 D7) D8) D5
type D1785 = :* (:* (:* D1 D7) D8) D5
type O3371 = :* (:* (:* D1 D7) D8) D5
type H6F8 = :* (:* (:* D1 D7) D8) D4
type D1784 = :* (:* (:* D1 D7) D8) D4
type O3370 = :* (:* (:* D1 D7) D8) D4
type H6F7 = :* (:* (:* D1 D7) D8) D3
type D1783 = :* (:* (:* D1 D7) D8) D3
type O3367 = :* (:* (:* D1 D7) D8) D3
type H6F6 = :* (:* (:* D1 D7) D8) D2
type D1782 = :* (:* (:* D1 D7) D8) D2
type O3366 = :* (:* (:* D1 D7) D8) D2
type H6F5 = :* (:* (:* D1 D7) D8) D1
type D1781 = :* (:* (:* D1 D7) D8) D1
type O3365 = :* (:* (:* D1 D7) D8) D1
type H6F4 = :* (:* (:* D1 D7) D8) D0
type D1780 = :* (:* (:* D1 D7) D8) D0
type O3364 = :* (:* (:* D1 D7) D8) D0
type H6F3 = :* (:* (:* D1 D7) D7) D9
type D1779 = :* (:* (:* D1 D7) D7) D9
type O3363 = :* (:* (:* D1 D7) D7) D9
type H6F2 = :* (:* (:* D1 D7) D7) D8
type D1778 = :* (:* (:* D1 D7) D7) D8
type O3362 = :* (:* (:* D1 D7) D7) D8
type H6F1 = :* (:* (:* D1 D7) D7) D7
type D1777 = :* (:* (:* D1 D7) D7) D7
type O3361 = :* (:* (:* D1 D7) D7) D7
type H6F0 = :* (:* (:* D1 D7) D7) D6
type D1776 = :* (:* (:* D1 D7) D7) D6
type O3360 = :* (:* (:* D1 D7) D7) D6
type H6EF = :* (:* (:* D1 D7) D7) D5
type D1775 = :* (:* (:* D1 D7) D7) D5
type O3357 = :* (:* (:* D1 D7) D7) D5
type H6EE = :* (:* (:* D1 D7) D7) D4
type D1774 = :* (:* (:* D1 D7) D7) D4
type O3356 = :* (:* (:* D1 D7) D7) D4
type H6ED = :* (:* (:* D1 D7) D7) D3
type D1773 = :* (:* (:* D1 D7) D7) D3
type O3355 = :* (:* (:* D1 D7) D7) D3
type H6EC = :* (:* (:* D1 D7) D7) D2
type D1772 = :* (:* (:* D1 D7) D7) D2
type O3354 = :* (:* (:* D1 D7) D7) D2
type H6EB = :* (:* (:* D1 D7) D7) D1
type D1771 = :* (:* (:* D1 D7) D7) D1
type O3353 = :* (:* (:* D1 D7) D7) D1
type H6EA = :* (:* (:* D1 D7) D7) D0
type D1770 = :* (:* (:* D1 D7) D7) D0
type O3352 = :* (:* (:* D1 D7) D7) D0
type H6E9 = :* (:* (:* D1 D7) D6) D9
type D1769 = :* (:* (:* D1 D7) D6) D9
type O3351 = :* (:* (:* D1 D7) D6) D9
type H6E8 = :* (:* (:* D1 D7) D6) D8
type D1768 = :* (:* (:* D1 D7) D6) D8
type O3350 = :* (:* (:* D1 D7) D6) D8
type H6E7 = :* (:* (:* D1 D7) D6) D7
type D1767 = :* (:* (:* D1 D7) D6) D7
type O3347 = :* (:* (:* D1 D7) D6) D7
type H6E6 = :* (:* (:* D1 D7) D6) D6
type D1766 = :* (:* (:* D1 D7) D6) D6
type O3346 = :* (:* (:* D1 D7) D6) D6
type H6E5 = :* (:* (:* D1 D7) D6) D5
type D1765 = :* (:* (:* D1 D7) D6) D5
type O3345 = :* (:* (:* D1 D7) D6) D5
type H6E4 = :* (:* (:* D1 D7) D6) D4
type D1764 = :* (:* (:* D1 D7) D6) D4
type O3344 = :* (:* (:* D1 D7) D6) D4
type H6E3 = :* (:* (:* D1 D7) D6) D3
type D1763 = :* (:* (:* D1 D7) D6) D3
type O3343 = :* (:* (:* D1 D7) D6) D3
type H6E2 = :* (:* (:* D1 D7) D6) D2
type D1762 = :* (:* (:* D1 D7) D6) D2
type O3342 = :* (:* (:* D1 D7) D6) D2
type H6E1 = :* (:* (:* D1 D7) D6) D1
type D1761 = :* (:* (:* D1 D7) D6) D1
type O3341 = :* (:* (:* D1 D7) D6) D1
type H6E0 = :* (:* (:* D1 D7) D6) D0
type D1760 = :* (:* (:* D1 D7) D6) D0
type O3340 = :* (:* (:* D1 D7) D6) D0
type H6DF = :* (:* (:* D1 D7) D5) D9
type D1759 = :* (:* (:* D1 D7) D5) D9
type O3337 = :* (:* (:* D1 D7) D5) D9
type H6DE = :* (:* (:* D1 D7) D5) D8
type D1758 = :* (:* (:* D1 D7) D5) D8
type O3336 = :* (:* (:* D1 D7) D5) D8
type H6DD = :* (:* (:* D1 D7) D5) D7
type D1757 = :* (:* (:* D1 D7) D5) D7
type O3335 = :* (:* (:* D1 D7) D5) D7
type H6DC = :* (:* (:* D1 D7) D5) D6
type D1756 = :* (:* (:* D1 D7) D5) D6
type O3334 = :* (:* (:* D1 D7) D5) D6
type H6DB = :* (:* (:* D1 D7) D5) D5
type D1755 = :* (:* (:* D1 D7) D5) D5
type O3333 = :* (:* (:* D1 D7) D5) D5
type H6DA = :* (:* (:* D1 D7) D5) D4
type D1754 = :* (:* (:* D1 D7) D5) D4
type O3332 = :* (:* (:* D1 D7) D5) D4
type H6D9 = :* (:* (:* D1 D7) D5) D3
type D1753 = :* (:* (:* D1 D7) D5) D3
type O3331 = :* (:* (:* D1 D7) D5) D3
type H6D8 = :* (:* (:* D1 D7) D5) D2
type D1752 = :* (:* (:* D1 D7) D5) D2
type O3330 = :* (:* (:* D1 D7) D5) D2
type H6D7 = :* (:* (:* D1 D7) D5) D1
type D1751 = :* (:* (:* D1 D7) D5) D1
type O3327 = :* (:* (:* D1 D7) D5) D1
type H6D6 = :* (:* (:* D1 D7) D5) D0
type D1750 = :* (:* (:* D1 D7) D5) D0
type O3326 = :* (:* (:* D1 D7) D5) D0
type H6D5 = :* (:* (:* D1 D7) D4) D9
type D1749 = :* (:* (:* D1 D7) D4) D9
type O3325 = :* (:* (:* D1 D7) D4) D9
type H6D4 = :* (:* (:* D1 D7) D4) D8
type D1748 = :* (:* (:* D1 D7) D4) D8
type O3324 = :* (:* (:* D1 D7) D4) D8
type H6D3 = :* (:* (:* D1 D7) D4) D7
type D1747 = :* (:* (:* D1 D7) D4) D7
type O3323 = :* (:* (:* D1 D7) D4) D7
type H6D2 = :* (:* (:* D1 D7) D4) D6
type D1746 = :* (:* (:* D1 D7) D4) D6
type O3322 = :* (:* (:* D1 D7) D4) D6
type H6D1 = :* (:* (:* D1 D7) D4) D5
type D1745 = :* (:* (:* D1 D7) D4) D5
type O3321 = :* (:* (:* D1 D7) D4) D5
type H6D0 = :* (:* (:* D1 D7) D4) D4
type D1744 = :* (:* (:* D1 D7) D4) D4
type O3320 = :* (:* (:* D1 D7) D4) D4
type H6CF = :* (:* (:* D1 D7) D4) D3
type D1743 = :* (:* (:* D1 D7) D4) D3
type O3317 = :* (:* (:* D1 D7) D4) D3
type H6CE = :* (:* (:* D1 D7) D4) D2
type D1742 = :* (:* (:* D1 D7) D4) D2
type O3316 = :* (:* (:* D1 D7) D4) D2
type H6CD = :* (:* (:* D1 D7) D4) D1
type D1741 = :* (:* (:* D1 D7) D4) D1
type O3315 = :* (:* (:* D1 D7) D4) D1
type H6CC = :* (:* (:* D1 D7) D4) D0
type D1740 = :* (:* (:* D1 D7) D4) D0
type O3314 = :* (:* (:* D1 D7) D4) D0
type H6CB = :* (:* (:* D1 D7) D3) D9
type D1739 = :* (:* (:* D1 D7) D3) D9
type O3313 = :* (:* (:* D1 D7) D3) D9
type H6CA = :* (:* (:* D1 D7) D3) D8
type D1738 = :* (:* (:* D1 D7) D3) D8
type O3312 = :* (:* (:* D1 D7) D3) D8
type H6C9 = :* (:* (:* D1 D7) D3) D7
type D1737 = :* (:* (:* D1 D7) D3) D7
type O3311 = :* (:* (:* D1 D7) D3) D7
type H6C8 = :* (:* (:* D1 D7) D3) D6
type D1736 = :* (:* (:* D1 D7) D3) D6
type O3310 = :* (:* (:* D1 D7) D3) D6
type H6C7 = :* (:* (:* D1 D7) D3) D5
type D1735 = :* (:* (:* D1 D7) D3) D5
type O3307 = :* (:* (:* D1 D7) D3) D5
type H6C6 = :* (:* (:* D1 D7) D3) D4
type D1734 = :* (:* (:* D1 D7) D3) D4
type O3306 = :* (:* (:* D1 D7) D3) D4
type H6C5 = :* (:* (:* D1 D7) D3) D3
type D1733 = :* (:* (:* D1 D7) D3) D3
type O3305 = :* (:* (:* D1 D7) D3) D3
type H6C4 = :* (:* (:* D1 D7) D3) D2
type D1732 = :* (:* (:* D1 D7) D3) D2
type O3304 = :* (:* (:* D1 D7) D3) D2
type H6C3 = :* (:* (:* D1 D7) D3) D1
type D1731 = :* (:* (:* D1 D7) D3) D1
type O3303 = :* (:* (:* D1 D7) D3) D1
type H6C2 = :* (:* (:* D1 D7) D3) D0
type D1730 = :* (:* (:* D1 D7) D3) D0
type O3302 = :* (:* (:* D1 D7) D3) D0
type H6C1 = :* (:* (:* D1 D7) D2) D9
type D1729 = :* (:* (:* D1 D7) D2) D9
type O3301 = :* (:* (:* D1 D7) D2) D9
type H6C0 = :* (:* (:* D1 D7) D2) D8
type D1728 = :* (:* (:* D1 D7) D2) D8
type O3300 = :* (:* (:* D1 D7) D2) D8
type H6BF = :* (:* (:* D1 D7) D2) D7
type D1727 = :* (:* (:* D1 D7) D2) D7
type O3277 = :* (:* (:* D1 D7) D2) D7
type H6BE = :* (:* (:* D1 D7) D2) D6
type D1726 = :* (:* (:* D1 D7) D2) D6
type O3276 = :* (:* (:* D1 D7) D2) D6
type H6BD = :* (:* (:* D1 D7) D2) D5
type D1725 = :* (:* (:* D1 D7) D2) D5
type O3275 = :* (:* (:* D1 D7) D2) D5
type H6BC = :* (:* (:* D1 D7) D2) D4
type D1724 = :* (:* (:* D1 D7) D2) D4
type O3274 = :* (:* (:* D1 D7) D2) D4
type H6BB = :* (:* (:* D1 D7) D2) D3
type D1723 = :* (:* (:* D1 D7) D2) D3
type O3273 = :* (:* (:* D1 D7) D2) D3
type H6BA = :* (:* (:* D1 D7) D2) D2
type D1722 = :* (:* (:* D1 D7) D2) D2
type O3272 = :* (:* (:* D1 D7) D2) D2
type H6B9 = :* (:* (:* D1 D7) D2) D1
type D1721 = :* (:* (:* D1 D7) D2) D1
type O3271 = :* (:* (:* D1 D7) D2) D1
type H6B8 = :* (:* (:* D1 D7) D2) D0
type D1720 = :* (:* (:* D1 D7) D2) D0
type O3270 = :* (:* (:* D1 D7) D2) D0
type H6B7 = :* (:* (:* D1 D7) D1) D9
type D1719 = :* (:* (:* D1 D7) D1) D9
type O3267 = :* (:* (:* D1 D7) D1) D9
type H6B6 = :* (:* (:* D1 D7) D1) D8
type D1718 = :* (:* (:* D1 D7) D1) D8
type O3266 = :* (:* (:* D1 D7) D1) D8
type H6B5 = :* (:* (:* D1 D7) D1) D7
type D1717 = :* (:* (:* D1 D7) D1) D7
type O3265 = :* (:* (:* D1 D7) D1) D7
type H6B4 = :* (:* (:* D1 D7) D1) D6
type D1716 = :* (:* (:* D1 D7) D1) D6
type O3264 = :* (:* (:* D1 D7) D1) D6
type H6B3 = :* (:* (:* D1 D7) D1) D5
type D1715 = :* (:* (:* D1 D7) D1) D5
type O3263 = :* (:* (:* D1 D7) D1) D5
type H6B2 = :* (:* (:* D1 D7) D1) D4
type D1714 = :* (:* (:* D1 D7) D1) D4
type O3262 = :* (:* (:* D1 D7) D1) D4
type H6B1 = :* (:* (:* D1 D7) D1) D3
type D1713 = :* (:* (:* D1 D7) D1) D3
type O3261 = :* (:* (:* D1 D7) D1) D3
type H6B0 = :* (:* (:* D1 D7) D1) D2
type D1712 = :* (:* (:* D1 D7) D1) D2
type O3260 = :* (:* (:* D1 D7) D1) D2
type H6AF = :* (:* (:* D1 D7) D1) D1
type D1711 = :* (:* (:* D1 D7) D1) D1
type O3257 = :* (:* (:* D1 D7) D1) D1
type H6AE = :* (:* (:* D1 D7) D1) D0
type D1710 = :* (:* (:* D1 D7) D1) D0
type O3256 = :* (:* (:* D1 D7) D1) D0
type H6AD = :* (:* (:* D1 D7) D0) D9
type D1709 = :* (:* (:* D1 D7) D0) D9
type O3255 = :* (:* (:* D1 D7) D0) D9
type H6AC = :* (:* (:* D1 D7) D0) D8
type D1708 = :* (:* (:* D1 D7) D0) D8
type O3254 = :* (:* (:* D1 D7) D0) D8
type H6AB = :* (:* (:* D1 D7) D0) D7
type D1707 = :* (:* (:* D1 D7) D0) D7
type O3253 = :* (:* (:* D1 D7) D0) D7
type H6AA = :* (:* (:* D1 D7) D0) D6
type D1706 = :* (:* (:* D1 D7) D0) D6
type O3252 = :* (:* (:* D1 D7) D0) D6
type H6A9 = :* (:* (:* D1 D7) D0) D5
type D1705 = :* (:* (:* D1 D7) D0) D5
type O3251 = :* (:* (:* D1 D7) D0) D5
type H6A8 = :* (:* (:* D1 D7) D0) D4
type D1704 = :* (:* (:* D1 D7) D0) D4
type O3250 = :* (:* (:* D1 D7) D0) D4
type H6A7 = :* (:* (:* D1 D7) D0) D3
type D1703 = :* (:* (:* D1 D7) D0) D3
type O3247 = :* (:* (:* D1 D7) D0) D3
type H6A6 = :* (:* (:* D1 D7) D0) D2
type D1702 = :* (:* (:* D1 D7) D0) D2
type O3246 = :* (:* (:* D1 D7) D0) D2
type H6A5 = :* (:* (:* D1 D7) D0) D1
type D1701 = :* (:* (:* D1 D7) D0) D1
type O3245 = :* (:* (:* D1 D7) D0) D1
type H6A4 = :* (:* (:* D1 D7) D0) D0
type D1700 = :* (:* (:* D1 D7) D0) D0
type O3244 = :* (:* (:* D1 D7) D0) D0
type H6A3 = :* (:* (:* D1 D6) D9) D9
type D1699 = :* (:* (:* D1 D6) D9) D9
type O3243 = :* (:* (:* D1 D6) D9) D9
type H6A2 = :* (:* (:* D1 D6) D9) D8
type D1698 = :* (:* (:* D1 D6) D9) D8
type O3242 = :* (:* (:* D1 D6) D9) D8
type H6A1 = :* (:* (:* D1 D6) D9) D7
type D1697 = :* (:* (:* D1 D6) D9) D7
type O3241 = :* (:* (:* D1 D6) D9) D7
type H6A0 = :* (:* (:* D1 D6) D9) D6
type D1696 = :* (:* (:* D1 D6) D9) D6
type O3240 = :* (:* (:* D1 D6) D9) D6
type H69F = :* (:* (:* D1 D6) D9) D5
type D1695 = :* (:* (:* D1 D6) D9) D5
type O3237 = :* (:* (:* D1 D6) D9) D5
type H69E = :* (:* (:* D1 D6) D9) D4
type D1694 = :* (:* (:* D1 D6) D9) D4
type O3236 = :* (:* (:* D1 D6) D9) D4
type H69D = :* (:* (:* D1 D6) D9) D3
type D1693 = :* (:* (:* D1 D6) D9) D3
type O3235 = :* (:* (:* D1 D6) D9) D3
type H69C = :* (:* (:* D1 D6) D9) D2
type D1692 = :* (:* (:* D1 D6) D9) D2
type O3234 = :* (:* (:* D1 D6) D9) D2
type H69B = :* (:* (:* D1 D6) D9) D1
type D1691 = :* (:* (:* D1 D6) D9) D1
type O3233 = :* (:* (:* D1 D6) D9) D1
type H69A = :* (:* (:* D1 D6) D9) D0
type D1690 = :* (:* (:* D1 D6) D9) D0
type O3232 = :* (:* (:* D1 D6) D9) D0
type H699 = :* (:* (:* D1 D6) D8) D9
type D1689 = :* (:* (:* D1 D6) D8) D9
type O3231 = :* (:* (:* D1 D6) D8) D9
type H698 = :* (:* (:* D1 D6) D8) D8
type D1688 = :* (:* (:* D1 D6) D8) D8
type O3230 = :* (:* (:* D1 D6) D8) D8
type H697 = :* (:* (:* D1 D6) D8) D7
type D1687 = :* (:* (:* D1 D6) D8) D7
type O3227 = :* (:* (:* D1 D6) D8) D7
type H696 = :* (:* (:* D1 D6) D8) D6
type D1686 = :* (:* (:* D1 D6) D8) D6
type O3226 = :* (:* (:* D1 D6) D8) D6
type H695 = :* (:* (:* D1 D6) D8) D5
type D1685 = :* (:* (:* D1 D6) D8) D5
type O3225 = :* (:* (:* D1 D6) D8) D5
type H694 = :* (:* (:* D1 D6) D8) D4
type D1684 = :* (:* (:* D1 D6) D8) D4
type O3224 = :* (:* (:* D1 D6) D8) D4
type H693 = :* (:* (:* D1 D6) D8) D3
type D1683 = :* (:* (:* D1 D6) D8) D3
type O3223 = :* (:* (:* D1 D6) D8) D3
type H692 = :* (:* (:* D1 D6) D8) D2
type D1682 = :* (:* (:* D1 D6) D8) D2
type O3222 = :* (:* (:* D1 D6) D8) D2
type H691 = :* (:* (:* D1 D6) D8) D1
type D1681 = :* (:* (:* D1 D6) D8) D1
type O3221 = :* (:* (:* D1 D6) D8) D1
type H690 = :* (:* (:* D1 D6) D8) D0
type D1680 = :* (:* (:* D1 D6) D8) D0
type O3220 = :* (:* (:* D1 D6) D8) D0
type H68F = :* (:* (:* D1 D6) D7) D9
type D1679 = :* (:* (:* D1 D6) D7) D9
type O3217 = :* (:* (:* D1 D6) D7) D9
type H68E = :* (:* (:* D1 D6) D7) D8
type D1678 = :* (:* (:* D1 D6) D7) D8
type O3216 = :* (:* (:* D1 D6) D7) D8
type H68D = :* (:* (:* D1 D6) D7) D7
type D1677 = :* (:* (:* D1 D6) D7) D7
type O3215 = :* (:* (:* D1 D6) D7) D7
type H68C = :* (:* (:* D1 D6) D7) D6
type D1676 = :* (:* (:* D1 D6) D7) D6
type O3214 = :* (:* (:* D1 D6) D7) D6
type H68B = :* (:* (:* D1 D6) D7) D5
type D1675 = :* (:* (:* D1 D6) D7) D5
type O3213 = :* (:* (:* D1 D6) D7) D5
type H68A = :* (:* (:* D1 D6) D7) D4
type D1674 = :* (:* (:* D1 D6) D7) D4
type O3212 = :* (:* (:* D1 D6) D7) D4
type H689 = :* (:* (:* D1 D6) D7) D3
type D1673 = :* (:* (:* D1 D6) D7) D3
type O3211 = :* (:* (:* D1 D6) D7) D3
type H688 = :* (:* (:* D1 D6) D7) D2
type D1672 = :* (:* (:* D1 D6) D7) D2
type O3210 = :* (:* (:* D1 D6) D7) D2
type H687 = :* (:* (:* D1 D6) D7) D1
type D1671 = :* (:* (:* D1 D6) D7) D1
type O3207 = :* (:* (:* D1 D6) D7) D1
type H686 = :* (:* (:* D1 D6) D7) D0
type D1670 = :* (:* (:* D1 D6) D7) D0
type O3206 = :* (:* (:* D1 D6) D7) D0
type H685 = :* (:* (:* D1 D6) D6) D9
type D1669 = :* (:* (:* D1 D6) D6) D9
type O3205 = :* (:* (:* D1 D6) D6) D9
type H684 = :* (:* (:* D1 D6) D6) D8
type D1668 = :* (:* (:* D1 D6) D6) D8
type O3204 = :* (:* (:* D1 D6) D6) D8
type H683 = :* (:* (:* D1 D6) D6) D7
type D1667 = :* (:* (:* D1 D6) D6) D7
type O3203 = :* (:* (:* D1 D6) D6) D7
type H682 = :* (:* (:* D1 D6) D6) D6
type D1666 = :* (:* (:* D1 D6) D6) D6
type O3202 = :* (:* (:* D1 D6) D6) D6
type H681 = :* (:* (:* D1 D6) D6) D5
type D1665 = :* (:* (:* D1 D6) D6) D5
type O3201 = :* (:* (:* D1 D6) D6) D5
type H680 = :* (:* (:* D1 D6) D6) D4
type D1664 = :* (:* (:* D1 D6) D6) D4
type O3200 = :* (:* (:* D1 D6) D6) D4
type H67F = :* (:* (:* D1 D6) D6) D3
type D1663 = :* (:* (:* D1 D6) D6) D3
type O3177 = :* (:* (:* D1 D6) D6) D3
type H67E = :* (:* (:* D1 D6) D6) D2
type D1662 = :* (:* (:* D1 D6) D6) D2
type O3176 = :* (:* (:* D1 D6) D6) D2
type H67D = :* (:* (:* D1 D6) D6) D1
type D1661 = :* (:* (:* D1 D6) D6) D1
type O3175 = :* (:* (:* D1 D6) D6) D1
type H67C = :* (:* (:* D1 D6) D6) D0
type D1660 = :* (:* (:* D1 D6) D6) D0
type O3174 = :* (:* (:* D1 D6) D6) D0
type H67B = :* (:* (:* D1 D6) D5) D9
type D1659 = :* (:* (:* D1 D6) D5) D9
type O3173 = :* (:* (:* D1 D6) D5) D9
type H67A = :* (:* (:* D1 D6) D5) D8
type D1658 = :* (:* (:* D1 D6) D5) D8
type O3172 = :* (:* (:* D1 D6) D5) D8
type H679 = :* (:* (:* D1 D6) D5) D7
type D1657 = :* (:* (:* D1 D6) D5) D7
type O3171 = :* (:* (:* D1 D6) D5) D7
type H678 = :* (:* (:* D1 D6) D5) D6
type D1656 = :* (:* (:* D1 D6) D5) D6
type O3170 = :* (:* (:* D1 D6) D5) D6
type H677 = :* (:* (:* D1 D6) D5) D5
type D1655 = :* (:* (:* D1 D6) D5) D5
type O3167 = :* (:* (:* D1 D6) D5) D5
type H676 = :* (:* (:* D1 D6) D5) D4
type D1654 = :* (:* (:* D1 D6) D5) D4
type O3166 = :* (:* (:* D1 D6) D5) D4
type H675 = :* (:* (:* D1 D6) D5) D3
type D1653 = :* (:* (:* D1 D6) D5) D3
type O3165 = :* (:* (:* D1 D6) D5) D3
type H674 = :* (:* (:* D1 D6) D5) D2
type D1652 = :* (:* (:* D1 D6) D5) D2
type O3164 = :* (:* (:* D1 D6) D5) D2
type H673 = :* (:* (:* D1 D6) D5) D1
type D1651 = :* (:* (:* D1 D6) D5) D1
type O3163 = :* (:* (:* D1 D6) D5) D1
type H672 = :* (:* (:* D1 D6) D5) D0
type D1650 = :* (:* (:* D1 D6) D5) D0
type O3162 = :* (:* (:* D1 D6) D5) D0
type H671 = :* (:* (:* D1 D6) D4) D9
type D1649 = :* (:* (:* D1 D6) D4) D9
type O3161 = :* (:* (:* D1 D6) D4) D9
type H670 = :* (:* (:* D1 D6) D4) D8
type D1648 = :* (:* (:* D1 D6) D4) D8
type O3160 = :* (:* (:* D1 D6) D4) D8
type H66F = :* (:* (:* D1 D6) D4) D7
type D1647 = :* (:* (:* D1 D6) D4) D7
type O3157 = :* (:* (:* D1 D6) D4) D7
type H66E = :* (:* (:* D1 D6) D4) D6
type D1646 = :* (:* (:* D1 D6) D4) D6
type O3156 = :* (:* (:* D1 D6) D4) D6
type H66D = :* (:* (:* D1 D6) D4) D5
type D1645 = :* (:* (:* D1 D6) D4) D5
type O3155 = :* (:* (:* D1 D6) D4) D5
type H66C = :* (:* (:* D1 D6) D4) D4
type D1644 = :* (:* (:* D1 D6) D4) D4
type O3154 = :* (:* (:* D1 D6) D4) D4
type H66B = :* (:* (:* D1 D6) D4) D3
type D1643 = :* (:* (:* D1 D6) D4) D3
type O3153 = :* (:* (:* D1 D6) D4) D3
type H66A = :* (:* (:* D1 D6) D4) D2
type D1642 = :* (:* (:* D1 D6) D4) D2
type O3152 = :* (:* (:* D1 D6) D4) D2
type H669 = :* (:* (:* D1 D6) D4) D1
type D1641 = :* (:* (:* D1 D6) D4) D1
type O3151 = :* (:* (:* D1 D6) D4) D1
type H668 = :* (:* (:* D1 D6) D4) D0
type D1640 = :* (:* (:* D1 D6) D4) D0
type O3150 = :* (:* (:* D1 D6) D4) D0
type H667 = :* (:* (:* D1 D6) D3) D9
type D1639 = :* (:* (:* D1 D6) D3) D9
type O3147 = :* (:* (:* D1 D6) D3) D9
type H666 = :* (:* (:* D1 D6) D3) D8
type D1638 = :* (:* (:* D1 D6) D3) D8
type O3146 = :* (:* (:* D1 D6) D3) D8
type H665 = :* (:* (:* D1 D6) D3) D7
type D1637 = :* (:* (:* D1 D6) D3) D7
type O3145 = :* (:* (:* D1 D6) D3) D7
type H664 = :* (:* (:* D1 D6) D3) D6
type D1636 = :* (:* (:* D1 D6) D3) D6
type O3144 = :* (:* (:* D1 D6) D3) D6
type H663 = :* (:* (:* D1 D6) D3) D5
type D1635 = :* (:* (:* D1 D6) D3) D5
type O3143 = :* (:* (:* D1 D6) D3) D5
type H662 = :* (:* (:* D1 D6) D3) D4
type D1634 = :* (:* (:* D1 D6) D3) D4
type O3142 = :* (:* (:* D1 D6) D3) D4
type H661 = :* (:* (:* D1 D6) D3) D3
type D1633 = :* (:* (:* D1 D6) D3) D3
type O3141 = :* (:* (:* D1 D6) D3) D3
type H660 = :* (:* (:* D1 D6) D3) D2
type D1632 = :* (:* (:* D1 D6) D3) D2
type O3140 = :* (:* (:* D1 D6) D3) D2
type H65F = :* (:* (:* D1 D6) D3) D1
type D1631 = :* (:* (:* D1 D6) D3) D1
type O3137 = :* (:* (:* D1 D6) D3) D1
type H65E = :* (:* (:* D1 D6) D3) D0
type D1630 = :* (:* (:* D1 D6) D3) D0
type O3136 = :* (:* (:* D1 D6) D3) D0
type H65D = :* (:* (:* D1 D6) D2) D9
type D1629 = :* (:* (:* D1 D6) D2) D9
type O3135 = :* (:* (:* D1 D6) D2) D9
type H65C = :* (:* (:* D1 D6) D2) D8
type D1628 = :* (:* (:* D1 D6) D2) D8
type O3134 = :* (:* (:* D1 D6) D2) D8
type H65B = :* (:* (:* D1 D6) D2) D7
type D1627 = :* (:* (:* D1 D6) D2) D7
type O3133 = :* (:* (:* D1 D6) D2) D7
type H65A = :* (:* (:* D1 D6) D2) D6
type D1626 = :* (:* (:* D1 D6) D2) D6
type O3132 = :* (:* (:* D1 D6) D2) D6
type H659 = :* (:* (:* D1 D6) D2) D5
type D1625 = :* (:* (:* D1 D6) D2) D5
type O3131 = :* (:* (:* D1 D6) D2) D5
type H658 = :* (:* (:* D1 D6) D2) D4
type D1624 = :* (:* (:* D1 D6) D2) D4
type O3130 = :* (:* (:* D1 D6) D2) D4
type H657 = :* (:* (:* D1 D6) D2) D3
type D1623 = :* (:* (:* D1 D6) D2) D3
type O3127 = :* (:* (:* D1 D6) D2) D3
type H656 = :* (:* (:* D1 D6) D2) D2
type D1622 = :* (:* (:* D1 D6) D2) D2
type O3126 = :* (:* (:* D1 D6) D2) D2
type H655 = :* (:* (:* D1 D6) D2) D1
type D1621 = :* (:* (:* D1 D6) D2) D1
type O3125 = :* (:* (:* D1 D6) D2) D1
type H654 = :* (:* (:* D1 D6) D2) D0
type D1620 = :* (:* (:* D1 D6) D2) D0
type O3124 = :* (:* (:* D1 D6) D2) D0
type H653 = :* (:* (:* D1 D6) D1) D9
type D1619 = :* (:* (:* D1 D6) D1) D9
type O3123 = :* (:* (:* D1 D6) D1) D9
type H652 = :* (:* (:* D1 D6) D1) D8
type D1618 = :* (:* (:* D1 D6) D1) D8
type O3122 = :* (:* (:* D1 D6) D1) D8
type H651 = :* (:* (:* D1 D6) D1) D7
type D1617 = :* (:* (:* D1 D6) D1) D7
type O3121 = :* (:* (:* D1 D6) D1) D7
type H650 = :* (:* (:* D1 D6) D1) D6
type D1616 = :* (:* (:* D1 D6) D1) D6
type O3120 = :* (:* (:* D1 D6) D1) D6
type H64F = :* (:* (:* D1 D6) D1) D5
type D1615 = :* (:* (:* D1 D6) D1) D5
type O3117 = :* (:* (:* D1 D6) D1) D5
type H64E = :* (:* (:* D1 D6) D1) D4
type D1614 = :* (:* (:* D1 D6) D1) D4
type O3116 = :* (:* (:* D1 D6) D1) D4
type H64D = :* (:* (:* D1 D6) D1) D3
type D1613 = :* (:* (:* D1 D6) D1) D3
type O3115 = :* (:* (:* D1 D6) D1) D3
type H64C = :* (:* (:* D1 D6) D1) D2
type D1612 = :* (:* (:* D1 D6) D1) D2
type O3114 = :* (:* (:* D1 D6) D1) D2
type H64B = :* (:* (:* D1 D6) D1) D1
type D1611 = :* (:* (:* D1 D6) D1) D1
type O3113 = :* (:* (:* D1 D6) D1) D1
type H64A = :* (:* (:* D1 D6) D1) D0
type D1610 = :* (:* (:* D1 D6) D1) D0
type O3112 = :* (:* (:* D1 D6) D1) D0
type H649 = :* (:* (:* D1 D6) D0) D9
type D1609 = :* (:* (:* D1 D6) D0) D9
type O3111 = :* (:* (:* D1 D6) D0) D9
type H648 = :* (:* (:* D1 D6) D0) D8
type D1608 = :* (:* (:* D1 D6) D0) D8
type O3110 = :* (:* (:* D1 D6) D0) D8
type H647 = :* (:* (:* D1 D6) D0) D7
type D1607 = :* (:* (:* D1 D6) D0) D7
type O3107 = :* (:* (:* D1 D6) D0) D7
type H646 = :* (:* (:* D1 D6) D0) D6
type D1606 = :* (:* (:* D1 D6) D0) D6
type O3106 = :* (:* (:* D1 D6) D0) D6
type H645 = :* (:* (:* D1 D6) D0) D5
type D1605 = :* (:* (:* D1 D6) D0) D5
type O3105 = :* (:* (:* D1 D6) D0) D5
type H644 = :* (:* (:* D1 D6) D0) D4
type D1604 = :* (:* (:* D1 D6) D0) D4
type O3104 = :* (:* (:* D1 D6) D0) D4
type H643 = :* (:* (:* D1 D6) D0) D3
type D1603 = :* (:* (:* D1 D6) D0) D3
type O3103 = :* (:* (:* D1 D6) D0) D3
type H642 = :* (:* (:* D1 D6) D0) D2
type D1602 = :* (:* (:* D1 D6) D0) D2
type O3102 = :* (:* (:* D1 D6) D0) D2
type H641 = :* (:* (:* D1 D6) D0) D1
type D1601 = :* (:* (:* D1 D6) D0) D1
type O3101 = :* (:* (:* D1 D6) D0) D1
type H640 = :* (:* (:* D1 D6) D0) D0
type D1600 = :* (:* (:* D1 D6) D0) D0
type O3100 = :* (:* (:* D1 D6) D0) D0
type H63F = :* (:* (:* D1 D5) D9) D9
type D1599 = :* (:* (:* D1 D5) D9) D9
type O3077 = :* (:* (:* D1 D5) D9) D9
type H63E = :* (:* (:* D1 D5) D9) D8
type D1598 = :* (:* (:* D1 D5) D9) D8
type O3076 = :* (:* (:* D1 D5) D9) D8
type H63D = :* (:* (:* D1 D5) D9) D7
type D1597 = :* (:* (:* D1 D5) D9) D7
type O3075 = :* (:* (:* D1 D5) D9) D7
type H63C = :* (:* (:* D1 D5) D9) D6
type D1596 = :* (:* (:* D1 D5) D9) D6
type O3074 = :* (:* (:* D1 D5) D9) D6
type H63B = :* (:* (:* D1 D5) D9) D5
type D1595 = :* (:* (:* D1 D5) D9) D5
type O3073 = :* (:* (:* D1 D5) D9) D5
type H63A = :* (:* (:* D1 D5) D9) D4
type D1594 = :* (:* (:* D1 D5) D9) D4
type O3072 = :* (:* (:* D1 D5) D9) D4
type H639 = :* (:* (:* D1 D5) D9) D3
type D1593 = :* (:* (:* D1 D5) D9) D3
type O3071 = :* (:* (:* D1 D5) D9) D3
type H638 = :* (:* (:* D1 D5) D9) D2
type D1592 = :* (:* (:* D1 D5) D9) D2
type O3070 = :* (:* (:* D1 D5) D9) D2
type H637 = :* (:* (:* D1 D5) D9) D1
type D1591 = :* (:* (:* D1 D5) D9) D1
type O3067 = :* (:* (:* D1 D5) D9) D1
type H636 = :* (:* (:* D1 D5) D9) D0
type D1590 = :* (:* (:* D1 D5) D9) D0
type O3066 = :* (:* (:* D1 D5) D9) D0
type H635 = :* (:* (:* D1 D5) D8) D9
type D1589 = :* (:* (:* D1 D5) D8) D9
type O3065 = :* (:* (:* D1 D5) D8) D9
type H634 = :* (:* (:* D1 D5) D8) D8
type D1588 = :* (:* (:* D1 D5) D8) D8
type O3064 = :* (:* (:* D1 D5) D8) D8
type H633 = :* (:* (:* D1 D5) D8) D7
type D1587 = :* (:* (:* D1 D5) D8) D7
type O3063 = :* (:* (:* D1 D5) D8) D7
type H632 = :* (:* (:* D1 D5) D8) D6
type D1586 = :* (:* (:* D1 D5) D8) D6
type O3062 = :* (:* (:* D1 D5) D8) D6
type H631 = :* (:* (:* D1 D5) D8) D5
type D1585 = :* (:* (:* D1 D5) D8) D5
type O3061 = :* (:* (:* D1 D5) D8) D5
type H630 = :* (:* (:* D1 D5) D8) D4
type D1584 = :* (:* (:* D1 D5) D8) D4
type O3060 = :* (:* (:* D1 D5) D8) D4
type H62F = :* (:* (:* D1 D5) D8) D3
type D1583 = :* (:* (:* D1 D5) D8) D3
type O3057 = :* (:* (:* D1 D5) D8) D3
type H62E = :* (:* (:* D1 D5) D8) D2
type D1582 = :* (:* (:* D1 D5) D8) D2
type O3056 = :* (:* (:* D1 D5) D8) D2
type H62D = :* (:* (:* D1 D5) D8) D1
type D1581 = :* (:* (:* D1 D5) D8) D1
type O3055 = :* (:* (:* D1 D5) D8) D1
type H62C = :* (:* (:* D1 D5) D8) D0
type D1580 = :* (:* (:* D1 D5) D8) D0
type O3054 = :* (:* (:* D1 D5) D8) D0
type H62B = :* (:* (:* D1 D5) D7) D9
type D1579 = :* (:* (:* D1 D5) D7) D9
type O3053 = :* (:* (:* D1 D5) D7) D9
type H62A = :* (:* (:* D1 D5) D7) D8
type D1578 = :* (:* (:* D1 D5) D7) D8
type O3052 = :* (:* (:* D1 D5) D7) D8
type H629 = :* (:* (:* D1 D5) D7) D7
type D1577 = :* (:* (:* D1 D5) D7) D7
type O3051 = :* (:* (:* D1 D5) D7) D7
type H628 = :* (:* (:* D1 D5) D7) D6
type D1576 = :* (:* (:* D1 D5) D7) D6
type O3050 = :* (:* (:* D1 D5) D7) D6
type H627 = :* (:* (:* D1 D5) D7) D5
type D1575 = :* (:* (:* D1 D5) D7) D5
type O3047 = :* (:* (:* D1 D5) D7) D5
type H626 = :* (:* (:* D1 D5) D7) D4
type D1574 = :* (:* (:* D1 D5) D7) D4
type O3046 = :* (:* (:* D1 D5) D7) D4
type H625 = :* (:* (:* D1 D5) D7) D3
type D1573 = :* (:* (:* D1 D5) D7) D3
type O3045 = :* (:* (:* D1 D5) D7) D3
type H624 = :* (:* (:* D1 D5) D7) D2
type D1572 = :* (:* (:* D1 D5) D7) D2
type O3044 = :* (:* (:* D1 D5) D7) D2
type H623 = :* (:* (:* D1 D5) D7) D1
type D1571 = :* (:* (:* D1 D5) D7) D1
type O3043 = :* (:* (:* D1 D5) D7) D1
type H622 = :* (:* (:* D1 D5) D7) D0
type D1570 = :* (:* (:* D1 D5) D7) D0
type O3042 = :* (:* (:* D1 D5) D7) D0
type H621 = :* (:* (:* D1 D5) D6) D9
type D1569 = :* (:* (:* D1 D5) D6) D9
type O3041 = :* (:* (:* D1 D5) D6) D9
type H620 = :* (:* (:* D1 D5) D6) D8
type D1568 = :* (:* (:* D1 D5) D6) D8
type O3040 = :* (:* (:* D1 D5) D6) D8
type H61F = :* (:* (:* D1 D5) D6) D7
type D1567 = :* (:* (:* D1 D5) D6) D7
type O3037 = :* (:* (:* D1 D5) D6) D7
type H61E = :* (:* (:* D1 D5) D6) D6
type D1566 = :* (:* (:* D1 D5) D6) D6
type O3036 = :* (:* (:* D1 D5) D6) D6
type H61D = :* (:* (:* D1 D5) D6) D5
type D1565 = :* (:* (:* D1 D5) D6) D5
type O3035 = :* (:* (:* D1 D5) D6) D5
type H61C = :* (:* (:* D1 D5) D6) D4
type D1564 = :* (:* (:* D1 D5) D6) D4
type O3034 = :* (:* (:* D1 D5) D6) D4
type H61B = :* (:* (:* D1 D5) D6) D3
type D1563 = :* (:* (:* D1 D5) D6) D3
type O3033 = :* (:* (:* D1 D5) D6) D3
type H61A = :* (:* (:* D1 D5) D6) D2
type D1562 = :* (:* (:* D1 D5) D6) D2
type O3032 = :* (:* (:* D1 D5) D6) D2
type H619 = :* (:* (:* D1 D5) D6) D1
type D1561 = :* (:* (:* D1 D5) D6) D1
type O3031 = :* (:* (:* D1 D5) D6) D1
type H618 = :* (:* (:* D1 D5) D6) D0
type D1560 = :* (:* (:* D1 D5) D6) D0
type O3030 = :* (:* (:* D1 D5) D6) D0
type H617 = :* (:* (:* D1 D5) D5) D9
type D1559 = :* (:* (:* D1 D5) D5) D9
type O3027 = :* (:* (:* D1 D5) D5) D9
type H616 = :* (:* (:* D1 D5) D5) D8
type D1558 = :* (:* (:* D1 D5) D5) D8
type O3026 = :* (:* (:* D1 D5) D5) D8
type H615 = :* (:* (:* D1 D5) D5) D7
type D1557 = :* (:* (:* D1 D5) D5) D7
type O3025 = :* (:* (:* D1 D5) D5) D7
type H614 = :* (:* (:* D1 D5) D5) D6
type D1556 = :* (:* (:* D1 D5) D5) D6
type O3024 = :* (:* (:* D1 D5) D5) D6
type H613 = :* (:* (:* D1 D5) D5) D5
type D1555 = :* (:* (:* D1 D5) D5) D5
type O3023 = :* (:* (:* D1 D5) D5) D5
type H612 = :* (:* (:* D1 D5) D5) D4
type D1554 = :* (:* (:* D1 D5) D5) D4
type O3022 = :* (:* (:* D1 D5) D5) D4
type H611 = :* (:* (:* D1 D5) D5) D3
type D1553 = :* (:* (:* D1 D5) D5) D3
type O3021 = :* (:* (:* D1 D5) D5) D3
type H610 = :* (:* (:* D1 D5) D5) D2
type D1552 = :* (:* (:* D1 D5) D5) D2
type O3020 = :* (:* (:* D1 D5) D5) D2
type H60F = :* (:* (:* D1 D5) D5) D1
type D1551 = :* (:* (:* D1 D5) D5) D1
type O3017 = :* (:* (:* D1 D5) D5) D1
type H60E = :* (:* (:* D1 D5) D5) D0
type D1550 = :* (:* (:* D1 D5) D5) D0
type O3016 = :* (:* (:* D1 D5) D5) D0
type H60D = :* (:* (:* D1 D5) D4) D9
type D1549 = :* (:* (:* D1 D5) D4) D9
type O3015 = :* (:* (:* D1 D5) D4) D9
type H60C = :* (:* (:* D1 D5) D4) D8
type D1548 = :* (:* (:* D1 D5) D4) D8
type O3014 = :* (:* (:* D1 D5) D4) D8
type H60B = :* (:* (:* D1 D5) D4) D7
type D1547 = :* (:* (:* D1 D5) D4) D7
type O3013 = :* (:* (:* D1 D5) D4) D7
type H60A = :* (:* (:* D1 D5) D4) D6
type D1546 = :* (:* (:* D1 D5) D4) D6
type O3012 = :* (:* (:* D1 D5) D4) D6
type H609 = :* (:* (:* D1 D5) D4) D5
type D1545 = :* (:* (:* D1 D5) D4) D5
type O3011 = :* (:* (:* D1 D5) D4) D5
type H608 = :* (:* (:* D1 D5) D4) D4
type D1544 = :* (:* (:* D1 D5) D4) D4
type O3010 = :* (:* (:* D1 D5) D4) D4
type H607 = :* (:* (:* D1 D5) D4) D3
type D1543 = :* (:* (:* D1 D5) D4) D3
type O3007 = :* (:* (:* D1 D5) D4) D3
type H606 = :* (:* (:* D1 D5) D4) D2
type D1542 = :* (:* (:* D1 D5) D4) D2
type O3006 = :* (:* (:* D1 D5) D4) D2
type H605 = :* (:* (:* D1 D5) D4) D1
type D1541 = :* (:* (:* D1 D5) D4) D1
type O3005 = :* (:* (:* D1 D5) D4) D1
type H604 = :* (:* (:* D1 D5) D4) D0
type D1540 = :* (:* (:* D1 D5) D4) D0
type O3004 = :* (:* (:* D1 D5) D4) D0
type H603 = :* (:* (:* D1 D5) D3) D9
type D1539 = :* (:* (:* D1 D5) D3) D9
type O3003 = :* (:* (:* D1 D5) D3) D9
type H602 = :* (:* (:* D1 D5) D3) D8
type D1538 = :* (:* (:* D1 D5) D3) D8
type O3002 = :* (:* (:* D1 D5) D3) D8
type H601 = :* (:* (:* D1 D5) D3) D7
type D1537 = :* (:* (:* D1 D5) D3) D7
type O3001 = :* (:* (:* D1 D5) D3) D7
type H600 = :* (:* (:* D1 D5) D3) D6
type D1536 = :* (:* (:* D1 D5) D3) D6
type O3000 = :* (:* (:* D1 D5) D3) D6
type H5FF = :* (:* (:* D1 D5) D3) D5
type D1535 = :* (:* (:* D1 D5) D3) D5
type O2777 = :* (:* (:* D1 D5) D3) D5
type H5FE = :* (:* (:* D1 D5) D3) D4
type D1534 = :* (:* (:* D1 D5) D3) D4
type O2776 = :* (:* (:* D1 D5) D3) D4
type H5FD = :* (:* (:* D1 D5) D3) D3
type D1533 = :* (:* (:* D1 D5) D3) D3
type O2775 = :* (:* (:* D1 D5) D3) D3
type H5FC = :* (:* (:* D1 D5) D3) D2
type D1532 = :* (:* (:* D1 D5) D3) D2
type O2774 = :* (:* (:* D1 D5) D3) D2
type H5FB = :* (:* (:* D1 D5) D3) D1
type D1531 = :* (:* (:* D1 D5) D3) D1
type O2773 = :* (:* (:* D1 D5) D3) D1
type H5FA = :* (:* (:* D1 D5) D3) D0
type D1530 = :* (:* (:* D1 D5) D3) D0
type O2772 = :* (:* (:* D1 D5) D3) D0
type H5F9 = :* (:* (:* D1 D5) D2) D9
type D1529 = :* (:* (:* D1 D5) D2) D9
type O2771 = :* (:* (:* D1 D5) D2) D9
type H5F8 = :* (:* (:* D1 D5) D2) D8
type D1528 = :* (:* (:* D1 D5) D2) D8
type O2770 = :* (:* (:* D1 D5) D2) D8
type H5F7 = :* (:* (:* D1 D5) D2) D7
type D1527 = :* (:* (:* D1 D5) D2) D7
type O2767 = :* (:* (:* D1 D5) D2) D7
type H5F6 = :* (:* (:* D1 D5) D2) D6
type D1526 = :* (:* (:* D1 D5) D2) D6
type O2766 = :* (:* (:* D1 D5) D2) D6
type H5F5 = :* (:* (:* D1 D5) D2) D5
type D1525 = :* (:* (:* D1 D5) D2) D5
type O2765 = :* (:* (:* D1 D5) D2) D5
type H5F4 = :* (:* (:* D1 D5) D2) D4
type D1524 = :* (:* (:* D1 D5) D2) D4
type O2764 = :* (:* (:* D1 D5) D2) D4
type H5F3 = :* (:* (:* D1 D5) D2) D3
type D1523 = :* (:* (:* D1 D5) D2) D3
type O2763 = :* (:* (:* D1 D5) D2) D3
type H5F2 = :* (:* (:* D1 D5) D2) D2
type D1522 = :* (:* (:* D1 D5) D2) D2
type O2762 = :* (:* (:* D1 D5) D2) D2
type H5F1 = :* (:* (:* D1 D5) D2) D1
type D1521 = :* (:* (:* D1 D5) D2) D1
type O2761 = :* (:* (:* D1 D5) D2) D1
type H5F0 = :* (:* (:* D1 D5) D2) D0
type D1520 = :* (:* (:* D1 D5) D2) D0
type O2760 = :* (:* (:* D1 D5) D2) D0
type H5EF = :* (:* (:* D1 D5) D1) D9
type D1519 = :* (:* (:* D1 D5) D1) D9
type O2757 = :* (:* (:* D1 D5) D1) D9
type H5EE = :* (:* (:* D1 D5) D1) D8
type D1518 = :* (:* (:* D1 D5) D1) D8
type O2756 = :* (:* (:* D1 D5) D1) D8
type H5ED = :* (:* (:* D1 D5) D1) D7
type D1517 = :* (:* (:* D1 D5) D1) D7
type O2755 = :* (:* (:* D1 D5) D1) D7
type H5EC = :* (:* (:* D1 D5) D1) D6
type D1516 = :* (:* (:* D1 D5) D1) D6
type O2754 = :* (:* (:* D1 D5) D1) D6
type H5EB = :* (:* (:* D1 D5) D1) D5
type D1515 = :* (:* (:* D1 D5) D1) D5
type O2753 = :* (:* (:* D1 D5) D1) D5
type H5EA = :* (:* (:* D1 D5) D1) D4
type D1514 = :* (:* (:* D1 D5) D1) D4
type O2752 = :* (:* (:* D1 D5) D1) D4
type H5E9 = :* (:* (:* D1 D5) D1) D3
type D1513 = :* (:* (:* D1 D5) D1) D3
type O2751 = :* (:* (:* D1 D5) D1) D3
type H5E8 = :* (:* (:* D1 D5) D1) D2
type D1512 = :* (:* (:* D1 D5) D1) D2
type O2750 = :* (:* (:* D1 D5) D1) D2
type H5E7 = :* (:* (:* D1 D5) D1) D1
type D1511 = :* (:* (:* D1 D5) D1) D1
type O2747 = :* (:* (:* D1 D5) D1) D1
type H5E6 = :* (:* (:* D1 D5) D1) D0
type D1510 = :* (:* (:* D1 D5) D1) D0
type O2746 = :* (:* (:* D1 D5) D1) D0
type H5E5 = :* (:* (:* D1 D5) D0) D9
type D1509 = :* (:* (:* D1 D5) D0) D9
type O2745 = :* (:* (:* D1 D5) D0) D9
type H5E4 = :* (:* (:* D1 D5) D0) D8
type D1508 = :* (:* (:* D1 D5) D0) D8
type O2744 = :* (:* (:* D1 D5) D0) D8
type H5E3 = :* (:* (:* D1 D5) D0) D7
type D1507 = :* (:* (:* D1 D5) D0) D7
type O2743 = :* (:* (:* D1 D5) D0) D7
type H5E2 = :* (:* (:* D1 D5) D0) D6
type D1506 = :* (:* (:* D1 D5) D0) D6
type O2742 = :* (:* (:* D1 D5) D0) D6
type H5E1 = :* (:* (:* D1 D5) D0) D5
type D1505 = :* (:* (:* D1 D5) D0) D5
type O2741 = :* (:* (:* D1 D5) D0) D5
type H5E0 = :* (:* (:* D1 D5) D0) D4
type D1504 = :* (:* (:* D1 D5) D0) D4
type O2740 = :* (:* (:* D1 D5) D0) D4
type H5DF = :* (:* (:* D1 D5) D0) D3
type D1503 = :* (:* (:* D1 D5) D0) D3
type O2737 = :* (:* (:* D1 D5) D0) D3
type H5DE = :* (:* (:* D1 D5) D0) D2
type D1502 = :* (:* (:* D1 D5) D0) D2
type O2736 = :* (:* (:* D1 D5) D0) D2
type H5DD = :* (:* (:* D1 D5) D0) D1
type D1501 = :* (:* (:* D1 D5) D0) D1
type O2735 = :* (:* (:* D1 D5) D0) D1
type H5DC = :* (:* (:* D1 D5) D0) D0
type D1500 = :* (:* (:* D1 D5) D0) D0
type O2734 = :* (:* (:* D1 D5) D0) D0
type H5DB = :* (:* (:* D1 D4) D9) D9
type D1499 = :* (:* (:* D1 D4) D9) D9
type O2733 = :* (:* (:* D1 D4) D9) D9
type H5DA = :* (:* (:* D1 D4) D9) D8
type D1498 = :* (:* (:* D1 D4) D9) D8
type O2732 = :* (:* (:* D1 D4) D9) D8
type H5D9 = :* (:* (:* D1 D4) D9) D7
type D1497 = :* (:* (:* D1 D4) D9) D7
type O2731 = :* (:* (:* D1 D4) D9) D7
type H5D8 = :* (:* (:* D1 D4) D9) D6
type D1496 = :* (:* (:* D1 D4) D9) D6
type O2730 = :* (:* (:* D1 D4) D9) D6
type H5D7 = :* (:* (:* D1 D4) D9) D5
type D1495 = :* (:* (:* D1 D4) D9) D5
type O2727 = :* (:* (:* D1 D4) D9) D5
type H5D6 = :* (:* (:* D1 D4) D9) D4
type D1494 = :* (:* (:* D1 D4) D9) D4
type O2726 = :* (:* (:* D1 D4) D9) D4
type H5D5 = :* (:* (:* D1 D4) D9) D3
type D1493 = :* (:* (:* D1 D4) D9) D3
type O2725 = :* (:* (:* D1 D4) D9) D3
type H5D4 = :* (:* (:* D1 D4) D9) D2
type D1492 = :* (:* (:* D1 D4) D9) D2
type O2724 = :* (:* (:* D1 D4) D9) D2
type H5D3 = :* (:* (:* D1 D4) D9) D1
type D1491 = :* (:* (:* D1 D4) D9) D1
type O2723 = :* (:* (:* D1 D4) D9) D1
type H5D2 = :* (:* (:* D1 D4) D9) D0
type D1490 = :* (:* (:* D1 D4) D9) D0
type O2722 = :* (:* (:* D1 D4) D9) D0
type H5D1 = :* (:* (:* D1 D4) D8) D9
type D1489 = :* (:* (:* D1 D4) D8) D9
type O2721 = :* (:* (:* D1 D4) D8) D9
type H5D0 = :* (:* (:* D1 D4) D8) D8
type D1488 = :* (:* (:* D1 D4) D8) D8
type O2720 = :* (:* (:* D1 D4) D8) D8
type H5CF = :* (:* (:* D1 D4) D8) D7
type D1487 = :* (:* (:* D1 D4) D8) D7
type O2717 = :* (:* (:* D1 D4) D8) D7
type H5CE = :* (:* (:* D1 D4) D8) D6
type D1486 = :* (:* (:* D1 D4) D8) D6
type O2716 = :* (:* (:* D1 D4) D8) D6
type H5CD = :* (:* (:* D1 D4) D8) D5
type D1485 = :* (:* (:* D1 D4) D8) D5
type O2715 = :* (:* (:* D1 D4) D8) D5
type H5CC = :* (:* (:* D1 D4) D8) D4
type D1484 = :* (:* (:* D1 D4) D8) D4
type O2714 = :* (:* (:* D1 D4) D8) D4
type H5CB = :* (:* (:* D1 D4) D8) D3
type D1483 = :* (:* (:* D1 D4) D8) D3
type O2713 = :* (:* (:* D1 D4) D8) D3
type H5CA = :* (:* (:* D1 D4) D8) D2
type D1482 = :* (:* (:* D1 D4) D8) D2
type O2712 = :* (:* (:* D1 D4) D8) D2
type H5C9 = :* (:* (:* D1 D4) D8) D1
type D1481 = :* (:* (:* D1 D4) D8) D1
type O2711 = :* (:* (:* D1 D4) D8) D1
type H5C8 = :* (:* (:* D1 D4) D8) D0
type D1480 = :* (:* (:* D1 D4) D8) D0
type O2710 = :* (:* (:* D1 D4) D8) D0
type H5C7 = :* (:* (:* D1 D4) D7) D9
type D1479 = :* (:* (:* D1 D4) D7) D9
type O2707 = :* (:* (:* D1 D4) D7) D9
type H5C6 = :* (:* (:* D1 D4) D7) D8
type D1478 = :* (:* (:* D1 D4) D7) D8
type O2706 = :* (:* (:* D1 D4) D7) D8
type H5C5 = :* (:* (:* D1 D4) D7) D7
type D1477 = :* (:* (:* D1 D4) D7) D7
type O2705 = :* (:* (:* D1 D4) D7) D7
type H5C4 = :* (:* (:* D1 D4) D7) D6
type D1476 = :* (:* (:* D1 D4) D7) D6
type O2704 = :* (:* (:* D1 D4) D7) D6
type H5C3 = :* (:* (:* D1 D4) D7) D5
type D1475 = :* (:* (:* D1 D4) D7) D5
type O2703 = :* (:* (:* D1 D4) D7) D5
type H5C2 = :* (:* (:* D1 D4) D7) D4
type D1474 = :* (:* (:* D1 D4) D7) D4
type O2702 = :* (:* (:* D1 D4) D7) D4
type H5C1 = :* (:* (:* D1 D4) D7) D3
type D1473 = :* (:* (:* D1 D4) D7) D3
type O2701 = :* (:* (:* D1 D4) D7) D3
type H5C0 = :* (:* (:* D1 D4) D7) D2
type D1472 = :* (:* (:* D1 D4) D7) D2
type O2700 = :* (:* (:* D1 D4) D7) D2
type H5BF = :* (:* (:* D1 D4) D7) D1
type D1471 = :* (:* (:* D1 D4) D7) D1
type O2677 = :* (:* (:* D1 D4) D7) D1
type H5BE = :* (:* (:* D1 D4) D7) D0
type D1470 = :* (:* (:* D1 D4) D7) D0
type O2676 = :* (:* (:* D1 D4) D7) D0
type H5BD = :* (:* (:* D1 D4) D6) D9
type D1469 = :* (:* (:* D1 D4) D6) D9
type O2675 = :* (:* (:* D1 D4) D6) D9
type H5BC = :* (:* (:* D1 D4) D6) D8
type D1468 = :* (:* (:* D1 D4) D6) D8
type O2674 = :* (:* (:* D1 D4) D6) D8
type H5BB = :* (:* (:* D1 D4) D6) D7
type D1467 = :* (:* (:* D1 D4) D6) D7
type O2673 = :* (:* (:* D1 D4) D6) D7
type H5BA = :* (:* (:* D1 D4) D6) D6
type D1466 = :* (:* (:* D1 D4) D6) D6
type O2672 = :* (:* (:* D1 D4) D6) D6
type H5B9 = :* (:* (:* D1 D4) D6) D5
type D1465 = :* (:* (:* D1 D4) D6) D5
type O2671 = :* (:* (:* D1 D4) D6) D5
type H5B8 = :* (:* (:* D1 D4) D6) D4
type D1464 = :* (:* (:* D1 D4) D6) D4
type O2670 = :* (:* (:* D1 D4) D6) D4
type H5B7 = :* (:* (:* D1 D4) D6) D3
type D1463 = :* (:* (:* D1 D4) D6) D3
type O2667 = :* (:* (:* D1 D4) D6) D3
type H5B6 = :* (:* (:* D1 D4) D6) D2
type D1462 = :* (:* (:* D1 D4) D6) D2
type O2666 = :* (:* (:* D1 D4) D6) D2
type H5B5 = :* (:* (:* D1 D4) D6) D1
type D1461 = :* (:* (:* D1 D4) D6) D1
type O2665 = :* (:* (:* D1 D4) D6) D1
type H5B4 = :* (:* (:* D1 D4) D6) D0
type D1460 = :* (:* (:* D1 D4) D6) D0
type O2664 = :* (:* (:* D1 D4) D6) D0
type H5B3 = :* (:* (:* D1 D4) D5) D9
type D1459 = :* (:* (:* D1 D4) D5) D9
type O2663 = :* (:* (:* D1 D4) D5) D9
type H5B2 = :* (:* (:* D1 D4) D5) D8
type D1458 = :* (:* (:* D1 D4) D5) D8
type O2662 = :* (:* (:* D1 D4) D5) D8
type H5B1 = :* (:* (:* D1 D4) D5) D7
type D1457 = :* (:* (:* D1 D4) D5) D7
type O2661 = :* (:* (:* D1 D4) D5) D7
type H5B0 = :* (:* (:* D1 D4) D5) D6
type D1456 = :* (:* (:* D1 D4) D5) D6
type O2660 = :* (:* (:* D1 D4) D5) D6
type H5AF = :* (:* (:* D1 D4) D5) D5
type D1455 = :* (:* (:* D1 D4) D5) D5
type O2657 = :* (:* (:* D1 D4) D5) D5
type H5AE = :* (:* (:* D1 D4) D5) D4
type D1454 = :* (:* (:* D1 D4) D5) D4
type O2656 = :* (:* (:* D1 D4) D5) D4
type H5AD = :* (:* (:* D1 D4) D5) D3
type D1453 = :* (:* (:* D1 D4) D5) D3
type O2655 = :* (:* (:* D1 D4) D5) D3
type H5AC = :* (:* (:* D1 D4) D5) D2
type D1452 = :* (:* (:* D1 D4) D5) D2
type O2654 = :* (:* (:* D1 D4) D5) D2
type H5AB = :* (:* (:* D1 D4) D5) D1
type D1451 = :* (:* (:* D1 D4) D5) D1
type O2653 = :* (:* (:* D1 D4) D5) D1
type H5AA = :* (:* (:* D1 D4) D5) D0
type D1450 = :* (:* (:* D1 D4) D5) D0
type O2652 = :* (:* (:* D1 D4) D5) D0
type H5A9 = :* (:* (:* D1 D4) D4) D9
type D1449 = :* (:* (:* D1 D4) D4) D9
type O2651 = :* (:* (:* D1 D4) D4) D9
type H5A8 = :* (:* (:* D1 D4) D4) D8
type D1448 = :* (:* (:* D1 D4) D4) D8
type O2650 = :* (:* (:* D1 D4) D4) D8
type H5A7 = :* (:* (:* D1 D4) D4) D7
type D1447 = :* (:* (:* D1 D4) D4) D7
type O2647 = :* (:* (:* D1 D4) D4) D7
type H5A6 = :* (:* (:* D1 D4) D4) D6
type D1446 = :* (:* (:* D1 D4) D4) D6
type O2646 = :* (:* (:* D1 D4) D4) D6
type H5A5 = :* (:* (:* D1 D4) D4) D5
type D1445 = :* (:* (:* D1 D4) D4) D5
type O2645 = :* (:* (:* D1 D4) D4) D5
type H5A4 = :* (:* (:* D1 D4) D4) D4
type D1444 = :* (:* (:* D1 D4) D4) D4
type O2644 = :* (:* (:* D1 D4) D4) D4
type H5A3 = :* (:* (:* D1 D4) D4) D3
type D1443 = :* (:* (:* D1 D4) D4) D3
type O2643 = :* (:* (:* D1 D4) D4) D3
type H5A2 = :* (:* (:* D1 D4) D4) D2
type D1442 = :* (:* (:* D1 D4) D4) D2
type O2642 = :* (:* (:* D1 D4) D4) D2
type H5A1 = :* (:* (:* D1 D4) D4) D1
type D1441 = :* (:* (:* D1 D4) D4) D1
type O2641 = :* (:* (:* D1 D4) D4) D1
type H5A0 = :* (:* (:* D1 D4) D4) D0
type D1440 = :* (:* (:* D1 D4) D4) D0
type O2640 = :* (:* (:* D1 D4) D4) D0
type H59F = :* (:* (:* D1 D4) D3) D9
type D1439 = :* (:* (:* D1 D4) D3) D9
type O2637 = :* (:* (:* D1 D4) D3) D9
type H59E = :* (:* (:* D1 D4) D3) D8
type D1438 = :* (:* (:* D1 D4) D3) D8
type O2636 = :* (:* (:* D1 D4) D3) D8
type H59D = :* (:* (:* D1 D4) D3) D7
type D1437 = :* (:* (:* D1 D4) D3) D7
type O2635 = :* (:* (:* D1 D4) D3) D7
type H59C = :* (:* (:* D1 D4) D3) D6
type D1436 = :* (:* (:* D1 D4) D3) D6
type O2634 = :* (:* (:* D1 D4) D3) D6
type H59B = :* (:* (:* D1 D4) D3) D5
type D1435 = :* (:* (:* D1 D4) D3) D5
type O2633 = :* (:* (:* D1 D4) D3) D5
type H59A = :* (:* (:* D1 D4) D3) D4
type D1434 = :* (:* (:* D1 D4) D3) D4
type O2632 = :* (:* (:* D1 D4) D3) D4
type H599 = :* (:* (:* D1 D4) D3) D3
type D1433 = :* (:* (:* D1 D4) D3) D3
type O2631 = :* (:* (:* D1 D4) D3) D3
type H598 = :* (:* (:* D1 D4) D3) D2
type D1432 = :* (:* (:* D1 D4) D3) D2
type O2630 = :* (:* (:* D1 D4) D3) D2
type H597 = :* (:* (:* D1 D4) D3) D1
type D1431 = :* (:* (:* D1 D4) D3) D1
type O2627 = :* (:* (:* D1 D4) D3) D1
type H596 = :* (:* (:* D1 D4) D3) D0
type D1430 = :* (:* (:* D1 D4) D3) D0
type O2626 = :* (:* (:* D1 D4) D3) D0
type H595 = :* (:* (:* D1 D4) D2) D9
type D1429 = :* (:* (:* D1 D4) D2) D9
type O2625 = :* (:* (:* D1 D4) D2) D9
type H594 = :* (:* (:* D1 D4) D2) D8
type D1428 = :* (:* (:* D1 D4) D2) D8
type O2624 = :* (:* (:* D1 D4) D2) D8
type H593 = :* (:* (:* D1 D4) D2) D7
type D1427 = :* (:* (:* D1 D4) D2) D7
type O2623 = :* (:* (:* D1 D4) D2) D7
type H592 = :* (:* (:* D1 D4) D2) D6
type D1426 = :* (:* (:* D1 D4) D2) D6
type O2622 = :* (:* (:* D1 D4) D2) D6
type H591 = :* (:* (:* D1 D4) D2) D5
type D1425 = :* (:* (:* D1 D4) D2) D5
type O2621 = :* (:* (:* D1 D4) D2) D5
type H590 = :* (:* (:* D1 D4) D2) D4
type D1424 = :* (:* (:* D1 D4) D2) D4
type O2620 = :* (:* (:* D1 D4) D2) D4
type H58F = :* (:* (:* D1 D4) D2) D3
type D1423 = :* (:* (:* D1 D4) D2) D3
type O2617 = :* (:* (:* D1 D4) D2) D3
type H58E = :* (:* (:* D1 D4) D2) D2
type D1422 = :* (:* (:* D1 D4) D2) D2
type O2616 = :* (:* (:* D1 D4) D2) D2
type H58D = :* (:* (:* D1 D4) D2) D1
type D1421 = :* (:* (:* D1 D4) D2) D1
type O2615 = :* (:* (:* D1 D4) D2) D1
type H58C = :* (:* (:* D1 D4) D2) D0
type D1420 = :* (:* (:* D1 D4) D2) D0
type O2614 = :* (:* (:* D1 D4) D2) D0
type H58B = :* (:* (:* D1 D4) D1) D9
type D1419 = :* (:* (:* D1 D4) D1) D9
type O2613 = :* (:* (:* D1 D4) D1) D9
type H58A = :* (:* (:* D1 D4) D1) D8
type D1418 = :* (:* (:* D1 D4) D1) D8
type O2612 = :* (:* (:* D1 D4) D1) D8
type H589 = :* (:* (:* D1 D4) D1) D7
type D1417 = :* (:* (:* D1 D4) D1) D7
type O2611 = :* (:* (:* D1 D4) D1) D7
type H588 = :* (:* (:* D1 D4) D1) D6
type D1416 = :* (:* (:* D1 D4) D1) D6
type O2610 = :* (:* (:* D1 D4) D1) D6
type H587 = :* (:* (:* D1 D4) D1) D5
type D1415 = :* (:* (:* D1 D4) D1) D5
type O2607 = :* (:* (:* D1 D4) D1) D5
type H586 = :* (:* (:* D1 D4) D1) D4
type D1414 = :* (:* (:* D1 D4) D1) D4
type O2606 = :* (:* (:* D1 D4) D1) D4
type H585 = :* (:* (:* D1 D4) D1) D3
type D1413 = :* (:* (:* D1 D4) D1) D3
type O2605 = :* (:* (:* D1 D4) D1) D3
type H584 = :* (:* (:* D1 D4) D1) D2
type D1412 = :* (:* (:* D1 D4) D1) D2
type O2604 = :* (:* (:* D1 D4) D1) D2
type H583 = :* (:* (:* D1 D4) D1) D1
type D1411 = :* (:* (:* D1 D4) D1) D1
type O2603 = :* (:* (:* D1 D4) D1) D1
type H582 = :* (:* (:* D1 D4) D1) D0
type D1410 = :* (:* (:* D1 D4) D1) D0
type O2602 = :* (:* (:* D1 D4) D1) D0
type H581 = :* (:* (:* D1 D4) D0) D9
type D1409 = :* (:* (:* D1 D4) D0) D9
type O2601 = :* (:* (:* D1 D4) D0) D9
type H580 = :* (:* (:* D1 D4) D0) D8
type D1408 = :* (:* (:* D1 D4) D0) D8
type O2600 = :* (:* (:* D1 D4) D0) D8
type H57F = :* (:* (:* D1 D4) D0) D7
type D1407 = :* (:* (:* D1 D4) D0) D7
type O2577 = :* (:* (:* D1 D4) D0) D7
type H57E = :* (:* (:* D1 D4) D0) D6
type D1406 = :* (:* (:* D1 D4) D0) D6
type O2576 = :* (:* (:* D1 D4) D0) D6
type H57D = :* (:* (:* D1 D4) D0) D5
type D1405 = :* (:* (:* D1 D4) D0) D5
type O2575 = :* (:* (:* D1 D4) D0) D5
type H57C = :* (:* (:* D1 D4) D0) D4
type D1404 = :* (:* (:* D1 D4) D0) D4
type O2574 = :* (:* (:* D1 D4) D0) D4
type H57B = :* (:* (:* D1 D4) D0) D3
type D1403 = :* (:* (:* D1 D4) D0) D3
type O2573 = :* (:* (:* D1 D4) D0) D3
type H57A = :* (:* (:* D1 D4) D0) D2
type D1402 = :* (:* (:* D1 D4) D0) D2
type O2572 = :* (:* (:* D1 D4) D0) D2
type H579 = :* (:* (:* D1 D4) D0) D1
type D1401 = :* (:* (:* D1 D4) D0) D1
type O2571 = :* (:* (:* D1 D4) D0) D1
type H578 = :* (:* (:* D1 D4) D0) D0
type D1400 = :* (:* (:* D1 D4) D0) D0
type O2570 = :* (:* (:* D1 D4) D0) D0
type H577 = :* (:* (:* D1 D3) D9) D9
type D1399 = :* (:* (:* D1 D3) D9) D9
type O2567 = :* (:* (:* D1 D3) D9) D9
type H576 = :* (:* (:* D1 D3) D9) D8
type D1398 = :* (:* (:* D1 D3) D9) D8
type O2566 = :* (:* (:* D1 D3) D9) D8
type H575 = :* (:* (:* D1 D3) D9) D7
type D1397 = :* (:* (:* D1 D3) D9) D7
type O2565 = :* (:* (:* D1 D3) D9) D7
type H574 = :* (:* (:* D1 D3) D9) D6
type D1396 = :* (:* (:* D1 D3) D9) D6
type O2564 = :* (:* (:* D1 D3) D9) D6
type H573 = :* (:* (:* D1 D3) D9) D5
type D1395 = :* (:* (:* D1 D3) D9) D5
type O2563 = :* (:* (:* D1 D3) D9) D5
type H572 = :* (:* (:* D1 D3) D9) D4
type D1394 = :* (:* (:* D1 D3) D9) D4
type O2562 = :* (:* (:* D1 D3) D9) D4
type H571 = :* (:* (:* D1 D3) D9) D3
type D1393 = :* (:* (:* D1 D3) D9) D3
type O2561 = :* (:* (:* D1 D3) D9) D3
type H570 = :* (:* (:* D1 D3) D9) D2
type D1392 = :* (:* (:* D1 D3) D9) D2
type O2560 = :* (:* (:* D1 D3) D9) D2
type H56F = :* (:* (:* D1 D3) D9) D1
type D1391 = :* (:* (:* D1 D3) D9) D1
type O2557 = :* (:* (:* D1 D3) D9) D1
type H56E = :* (:* (:* D1 D3) D9) D0
type D1390 = :* (:* (:* D1 D3) D9) D0
type O2556 = :* (:* (:* D1 D3) D9) D0
type H56D = :* (:* (:* D1 D3) D8) D9
type D1389 = :* (:* (:* D1 D3) D8) D9
type O2555 = :* (:* (:* D1 D3) D8) D9
type H56C = :* (:* (:* D1 D3) D8) D8
type D1388 = :* (:* (:* D1 D3) D8) D8
type O2554 = :* (:* (:* D1 D3) D8) D8
type H56B = :* (:* (:* D1 D3) D8) D7
type D1387 = :* (:* (:* D1 D3) D8) D7
type O2553 = :* (:* (:* D1 D3) D8) D7
type H56A = :* (:* (:* D1 D3) D8) D6
type D1386 = :* (:* (:* D1 D3) D8) D6
type O2552 = :* (:* (:* D1 D3) D8) D6
type H569 = :* (:* (:* D1 D3) D8) D5
type D1385 = :* (:* (:* D1 D3) D8) D5
type O2551 = :* (:* (:* D1 D3) D8) D5
type H568 = :* (:* (:* D1 D3) D8) D4
type D1384 = :* (:* (:* D1 D3) D8) D4
type O2550 = :* (:* (:* D1 D3) D8) D4
type H567 = :* (:* (:* D1 D3) D8) D3
type D1383 = :* (:* (:* D1 D3) D8) D3
type O2547 = :* (:* (:* D1 D3) D8) D3
type H566 = :* (:* (:* D1 D3) D8) D2
type D1382 = :* (:* (:* D1 D3) D8) D2
type O2546 = :* (:* (:* D1 D3) D8) D2
type H565 = :* (:* (:* D1 D3) D8) D1
type D1381 = :* (:* (:* D1 D3) D8) D1
type O2545 = :* (:* (:* D1 D3) D8) D1
type H564 = :* (:* (:* D1 D3) D8) D0
type D1380 = :* (:* (:* D1 D3) D8) D0
type O2544 = :* (:* (:* D1 D3) D8) D0
type H563 = :* (:* (:* D1 D3) D7) D9
type D1379 = :* (:* (:* D1 D3) D7) D9
type O2543 = :* (:* (:* D1 D3) D7) D9
type H562 = :* (:* (:* D1 D3) D7) D8
type D1378 = :* (:* (:* D1 D3) D7) D8
type O2542 = :* (:* (:* D1 D3) D7) D8
type H561 = :* (:* (:* D1 D3) D7) D7
type D1377 = :* (:* (:* D1 D3) D7) D7
type O2541 = :* (:* (:* D1 D3) D7) D7
type H560 = :* (:* (:* D1 D3) D7) D6
type D1376 = :* (:* (:* D1 D3) D7) D6
type O2540 = :* (:* (:* D1 D3) D7) D6
type H55F = :* (:* (:* D1 D3) D7) D5
type D1375 = :* (:* (:* D1 D3) D7) D5
type O2537 = :* (:* (:* D1 D3) D7) D5
type H55E = :* (:* (:* D1 D3) D7) D4
type D1374 = :* (:* (:* D1 D3) D7) D4
type O2536 = :* (:* (:* D1 D3) D7) D4
type H55D = :* (:* (:* D1 D3) D7) D3
type D1373 = :* (:* (:* D1 D3) D7) D3
type O2535 = :* (:* (:* D1 D3) D7) D3
type H55C = :* (:* (:* D1 D3) D7) D2
type D1372 = :* (:* (:* D1 D3) D7) D2
type O2534 = :* (:* (:* D1 D3) D7) D2
type H55B = :* (:* (:* D1 D3) D7) D1
type D1371 = :* (:* (:* D1 D3) D7) D1
type O2533 = :* (:* (:* D1 D3) D7) D1
type H55A = :* (:* (:* D1 D3) D7) D0
type D1370 = :* (:* (:* D1 D3) D7) D0
type O2532 = :* (:* (:* D1 D3) D7) D0
type H559 = :* (:* (:* D1 D3) D6) D9
type D1369 = :* (:* (:* D1 D3) D6) D9
type O2531 = :* (:* (:* D1 D3) D6) D9
type H558 = :* (:* (:* D1 D3) D6) D8
type D1368 = :* (:* (:* D1 D3) D6) D8
type O2530 = :* (:* (:* D1 D3) D6) D8
type H557 = :* (:* (:* D1 D3) D6) D7
type D1367 = :* (:* (:* D1 D3) D6) D7
type O2527 = :* (:* (:* D1 D3) D6) D7
type H556 = :* (:* (:* D1 D3) D6) D6
type D1366 = :* (:* (:* D1 D3) D6) D6
type O2526 = :* (:* (:* D1 D3) D6) D6
type H555 = :* (:* (:* D1 D3) D6) D5
type D1365 = :* (:* (:* D1 D3) D6) D5
type O2525 = :* (:* (:* D1 D3) D6) D5
type H554 = :* (:* (:* D1 D3) D6) D4
type D1364 = :* (:* (:* D1 D3) D6) D4
type O2524 = :* (:* (:* D1 D3) D6) D4
type H553 = :* (:* (:* D1 D3) D6) D3
type D1363 = :* (:* (:* D1 D3) D6) D3
type O2523 = :* (:* (:* D1 D3) D6) D3
type H552 = :* (:* (:* D1 D3) D6) D2
type D1362 = :* (:* (:* D1 D3) D6) D2
type O2522 = :* (:* (:* D1 D3) D6) D2
type H551 = :* (:* (:* D1 D3) D6) D1
type D1361 = :* (:* (:* D1 D3) D6) D1
type O2521 = :* (:* (:* D1 D3) D6) D1
type H550 = :* (:* (:* D1 D3) D6) D0
type D1360 = :* (:* (:* D1 D3) D6) D0
type O2520 = :* (:* (:* D1 D3) D6) D0
type H54F = :* (:* (:* D1 D3) D5) D9
type D1359 = :* (:* (:* D1 D3) D5) D9
type O2517 = :* (:* (:* D1 D3) D5) D9
type H54E = :* (:* (:* D1 D3) D5) D8
type D1358 = :* (:* (:* D1 D3) D5) D8
type O2516 = :* (:* (:* D1 D3) D5) D8
type H54D = :* (:* (:* D1 D3) D5) D7
type D1357 = :* (:* (:* D1 D3) D5) D7
type O2515 = :* (:* (:* D1 D3) D5) D7
type H54C = :* (:* (:* D1 D3) D5) D6
type D1356 = :* (:* (:* D1 D3) D5) D6
type O2514 = :* (:* (:* D1 D3) D5) D6
type H54B = :* (:* (:* D1 D3) D5) D5
type D1355 = :* (:* (:* D1 D3) D5) D5
type O2513 = :* (:* (:* D1 D3) D5) D5
type H54A = :* (:* (:* D1 D3) D5) D4
type D1354 = :* (:* (:* D1 D3) D5) D4
type O2512 = :* (:* (:* D1 D3) D5) D4
type H549 = :* (:* (:* D1 D3) D5) D3
type D1353 = :* (:* (:* D1 D3) D5) D3
type O2511 = :* (:* (:* D1 D3) D5) D3
type H548 = :* (:* (:* D1 D3) D5) D2
type D1352 = :* (:* (:* D1 D3) D5) D2
type O2510 = :* (:* (:* D1 D3) D5) D2
type H547 = :* (:* (:* D1 D3) D5) D1
type D1351 = :* (:* (:* D1 D3) D5) D1
type O2507 = :* (:* (:* D1 D3) D5) D1
type H546 = :* (:* (:* D1 D3) D5) D0
type D1350 = :* (:* (:* D1 D3) D5) D0
type O2506 = :* (:* (:* D1 D3) D5) D0
type H545 = :* (:* (:* D1 D3) D4) D9
type D1349 = :* (:* (:* D1 D3) D4) D9
type O2505 = :* (:* (:* D1 D3) D4) D9
type H544 = :* (:* (:* D1 D3) D4) D8
type D1348 = :* (:* (:* D1 D3) D4) D8
type O2504 = :* (:* (:* D1 D3) D4) D8
type H543 = :* (:* (:* D1 D3) D4) D7
type D1347 = :* (:* (:* D1 D3) D4) D7
type O2503 = :* (:* (:* D1 D3) D4) D7
type H542 = :* (:* (:* D1 D3) D4) D6
type D1346 = :* (:* (:* D1 D3) D4) D6
type O2502 = :* (:* (:* D1 D3) D4) D6
type H541 = :* (:* (:* D1 D3) D4) D5
type D1345 = :* (:* (:* D1 D3) D4) D5
type O2501 = :* (:* (:* D1 D3) D4) D5
type H540 = :* (:* (:* D1 D3) D4) D4
type D1344 = :* (:* (:* D1 D3) D4) D4
type O2500 = :* (:* (:* D1 D3) D4) D4
type H53F = :* (:* (:* D1 D3) D4) D3
type D1343 = :* (:* (:* D1 D3) D4) D3
type O2477 = :* (:* (:* D1 D3) D4) D3
type H53E = :* (:* (:* D1 D3) D4) D2
type D1342 = :* (:* (:* D1 D3) D4) D2
type O2476 = :* (:* (:* D1 D3) D4) D2
type H53D = :* (:* (:* D1 D3) D4) D1
type D1341 = :* (:* (:* D1 D3) D4) D1
type O2475 = :* (:* (:* D1 D3) D4) D1
type H53C = :* (:* (:* D1 D3) D4) D0
type D1340 = :* (:* (:* D1 D3) D4) D0
type O2474 = :* (:* (:* D1 D3) D4) D0
type H53B = :* (:* (:* D1 D3) D3) D9
type D1339 = :* (:* (:* D1 D3) D3) D9
type O2473 = :* (:* (:* D1 D3) D3) D9
type H53A = :* (:* (:* D1 D3) D3) D8
type D1338 = :* (:* (:* D1 D3) D3) D8
type O2472 = :* (:* (:* D1 D3) D3) D8
type H539 = :* (:* (:* D1 D3) D3) D7
type D1337 = :* (:* (:* D1 D3) D3) D7
type O2471 = :* (:* (:* D1 D3) D3) D7
type H538 = :* (:* (:* D1 D3) D3) D6
type D1336 = :* (:* (:* D1 D3) D3) D6
type O2470 = :* (:* (:* D1 D3) D3) D6
type H537 = :* (:* (:* D1 D3) D3) D5
type D1335 = :* (:* (:* D1 D3) D3) D5
type O2467 = :* (:* (:* D1 D3) D3) D5
type H536 = :* (:* (:* D1 D3) D3) D4
type D1334 = :* (:* (:* D1 D3) D3) D4
type O2466 = :* (:* (:* D1 D3) D3) D4
type H535 = :* (:* (:* D1 D3) D3) D3
type D1333 = :* (:* (:* D1 D3) D3) D3
type O2465 = :* (:* (:* D1 D3) D3) D3
type H534 = :* (:* (:* D1 D3) D3) D2
type D1332 = :* (:* (:* D1 D3) D3) D2
type O2464 = :* (:* (:* D1 D3) D3) D2
type H533 = :* (:* (:* D1 D3) D3) D1
type D1331 = :* (:* (:* D1 D3) D3) D1
type O2463 = :* (:* (:* D1 D3) D3) D1
type H532 = :* (:* (:* D1 D3) D3) D0
type D1330 = :* (:* (:* D1 D3) D3) D0
type O2462 = :* (:* (:* D1 D3) D3) D0
type H531 = :* (:* (:* D1 D3) D2) D9
type D1329 = :* (:* (:* D1 D3) D2) D9
type O2461 = :* (:* (:* D1 D3) D2) D9
type H530 = :* (:* (:* D1 D3) D2) D8
type D1328 = :* (:* (:* D1 D3) D2) D8
type O2460 = :* (:* (:* D1 D3) D2) D8
type H52F = :* (:* (:* D1 D3) D2) D7
type D1327 = :* (:* (:* D1 D3) D2) D7
type O2457 = :* (:* (:* D1 D3) D2) D7
type H52E = :* (:* (:* D1 D3) D2) D6
type D1326 = :* (:* (:* D1 D3) D2) D6
type O2456 = :* (:* (:* D1 D3) D2) D6
type H52D = :* (:* (:* D1 D3) D2) D5
type D1325 = :* (:* (:* D1 D3) D2) D5
type O2455 = :* (:* (:* D1 D3) D2) D5
type H52C = :* (:* (:* D1 D3) D2) D4
type D1324 = :* (:* (:* D1 D3) D2) D4
type O2454 = :* (:* (:* D1 D3) D2) D4
type H52B = :* (:* (:* D1 D3) D2) D3
type D1323 = :* (:* (:* D1 D3) D2) D3
type O2453 = :* (:* (:* D1 D3) D2) D3
type H52A = :* (:* (:* D1 D3) D2) D2
type D1322 = :* (:* (:* D1 D3) D2) D2
type O2452 = :* (:* (:* D1 D3) D2) D2
type H529 = :* (:* (:* D1 D3) D2) D1
type D1321 = :* (:* (:* D1 D3) D2) D1
type O2451 = :* (:* (:* D1 D3) D2) D1
type H528 = :* (:* (:* D1 D3) D2) D0
type D1320 = :* (:* (:* D1 D3) D2) D0
type O2450 = :* (:* (:* D1 D3) D2) D0
type H527 = :* (:* (:* D1 D3) D1) D9
type D1319 = :* (:* (:* D1 D3) D1) D9
type O2447 = :* (:* (:* D1 D3) D1) D9
type H526 = :* (:* (:* D1 D3) D1) D8
type D1318 = :* (:* (:* D1 D3) D1) D8
type O2446 = :* (:* (:* D1 D3) D1) D8
type H525 = :* (:* (:* D1 D3) D1) D7
type D1317 = :* (:* (:* D1 D3) D1) D7
type O2445 = :* (:* (:* D1 D3) D1) D7
type H524 = :* (:* (:* D1 D3) D1) D6
type D1316 = :* (:* (:* D1 D3) D1) D6
type O2444 = :* (:* (:* D1 D3) D1) D6
type H523 = :* (:* (:* D1 D3) D1) D5
type D1315 = :* (:* (:* D1 D3) D1) D5
type O2443 = :* (:* (:* D1 D3) D1) D5
type H522 = :* (:* (:* D1 D3) D1) D4
type D1314 = :* (:* (:* D1 D3) D1) D4
type O2442 = :* (:* (:* D1 D3) D1) D4
type H521 = :* (:* (:* D1 D3) D1) D3
type D1313 = :* (:* (:* D1 D3) D1) D3
type O2441 = :* (:* (:* D1 D3) D1) D3
type H520 = :* (:* (:* D1 D3) D1) D2
type D1312 = :* (:* (:* D1 D3) D1) D2
type O2440 = :* (:* (:* D1 D3) D1) D2
type H51F = :* (:* (:* D1 D3) D1) D1
type D1311 = :* (:* (:* D1 D3) D1) D1
type O2437 = :* (:* (:* D1 D3) D1) D1
type H51E = :* (:* (:* D1 D3) D1) D0
type D1310 = :* (:* (:* D1 D3) D1) D0
type O2436 = :* (:* (:* D1 D3) D1) D0
type H51D = :* (:* (:* D1 D3) D0) D9
type D1309 = :* (:* (:* D1 D3) D0) D9
type O2435 = :* (:* (:* D1 D3) D0) D9
type H51C = :* (:* (:* D1 D3) D0) D8
type D1308 = :* (:* (:* D1 D3) D0) D8
type O2434 = :* (:* (:* D1 D3) D0) D8
type H51B = :* (:* (:* D1 D3) D0) D7
type D1307 = :* (:* (:* D1 D3) D0) D7
type O2433 = :* (:* (:* D1 D3) D0) D7
type H51A = :* (:* (:* D1 D3) D0) D6
type D1306 = :* (:* (:* D1 D3) D0) D6
type O2432 = :* (:* (:* D1 D3) D0) D6
type H519 = :* (:* (:* D1 D3) D0) D5
type D1305 = :* (:* (:* D1 D3) D0) D5
type O2431 = :* (:* (:* D1 D3) D0) D5
type H518 = :* (:* (:* D1 D3) D0) D4
type D1304 = :* (:* (:* D1 D3) D0) D4
type O2430 = :* (:* (:* D1 D3) D0) D4
type H517 = :* (:* (:* D1 D3) D0) D3
type D1303 = :* (:* (:* D1 D3) D0) D3
type O2427 = :* (:* (:* D1 D3) D0) D3
type H516 = :* (:* (:* D1 D3) D0) D2
type D1302 = :* (:* (:* D1 D3) D0) D2
type O2426 = :* (:* (:* D1 D3) D0) D2
type H515 = :* (:* (:* D1 D3) D0) D1
type D1301 = :* (:* (:* D1 D3) D0) D1
type O2425 = :* (:* (:* D1 D3) D0) D1
type H514 = :* (:* (:* D1 D3) D0) D0
type D1300 = :* (:* (:* D1 D3) D0) D0
type O2424 = :* (:* (:* D1 D3) D0) D0
type H513 = :* (:* (:* D1 D2) D9) D9
type D1299 = :* (:* (:* D1 D2) D9) D9
type O2423 = :* (:* (:* D1 D2) D9) D9
type H512 = :* (:* (:* D1 D2) D9) D8
type D1298 = :* (:* (:* D1 D2) D9) D8
type O2422 = :* (:* (:* D1 D2) D9) D8
type H511 = :* (:* (:* D1 D2) D9) D7
type D1297 = :* (:* (:* D1 D2) D9) D7
type O2421 = :* (:* (:* D1 D2) D9) D7
type H510 = :* (:* (:* D1 D2) D9) D6
type D1296 = :* (:* (:* D1 D2) D9) D6
type O2420 = :* (:* (:* D1 D2) D9) D6
type H50F = :* (:* (:* D1 D2) D9) D5
type D1295 = :* (:* (:* D1 D2) D9) D5
type O2417 = :* (:* (:* D1 D2) D9) D5
type H50E = :* (:* (:* D1 D2) D9) D4
type D1294 = :* (:* (:* D1 D2) D9) D4
type O2416 = :* (:* (:* D1 D2) D9) D4
type H50D = :* (:* (:* D1 D2) D9) D3
type D1293 = :* (:* (:* D1 D2) D9) D3
type O2415 = :* (:* (:* D1 D2) D9) D3
type H50C = :* (:* (:* D1 D2) D9) D2
type D1292 = :* (:* (:* D1 D2) D9) D2
type O2414 = :* (:* (:* D1 D2) D9) D2
type H50B = :* (:* (:* D1 D2) D9) D1
type D1291 = :* (:* (:* D1 D2) D9) D1
type O2413 = :* (:* (:* D1 D2) D9) D1
type H50A = :* (:* (:* D1 D2) D9) D0
type D1290 = :* (:* (:* D1 D2) D9) D0
type O2412 = :* (:* (:* D1 D2) D9) D0
type H509 = :* (:* (:* D1 D2) D8) D9
type D1289 = :* (:* (:* D1 D2) D8) D9
type O2411 = :* (:* (:* D1 D2) D8) D9
type H508 = :* (:* (:* D1 D2) D8) D8
type D1288 = :* (:* (:* D1 D2) D8) D8
type O2410 = :* (:* (:* D1 D2) D8) D8
type H507 = :* (:* (:* D1 D2) D8) D7
type D1287 = :* (:* (:* D1 D2) D8) D7
type O2407 = :* (:* (:* D1 D2) D8) D7
type H506 = :* (:* (:* D1 D2) D8) D6
type D1286 = :* (:* (:* D1 D2) D8) D6
type O2406 = :* (:* (:* D1 D2) D8) D6
type H505 = :* (:* (:* D1 D2) D8) D5
type D1285 = :* (:* (:* D1 D2) D8) D5
type O2405 = :* (:* (:* D1 D2) D8) D5
type H504 = :* (:* (:* D1 D2) D8) D4
type D1284 = :* (:* (:* D1 D2) D8) D4
type O2404 = :* (:* (:* D1 D2) D8) D4
type H503 = :* (:* (:* D1 D2) D8) D3
type D1283 = :* (:* (:* D1 D2) D8) D3
type O2403 = :* (:* (:* D1 D2) D8) D3
type H502 = :* (:* (:* D1 D2) D8) D2
type D1282 = :* (:* (:* D1 D2) D8) D2
type O2402 = :* (:* (:* D1 D2) D8) D2
type H501 = :* (:* (:* D1 D2) D8) D1
type D1281 = :* (:* (:* D1 D2) D8) D1
type O2401 = :* (:* (:* D1 D2) D8) D1
type H500 = :* (:* (:* D1 D2) D8) D0
type D1280 = :* (:* (:* D1 D2) D8) D0
type O2400 = :* (:* (:* D1 D2) D8) D0
type H4FF = :* (:* (:* D1 D2) D7) D9
type D1279 = :* (:* (:* D1 D2) D7) D9
type O2377 = :* (:* (:* D1 D2) D7) D9
type H4FE = :* (:* (:* D1 D2) D7) D8
type D1278 = :* (:* (:* D1 D2) D7) D8
type O2376 = :* (:* (:* D1 D2) D7) D8
type H4FD = :* (:* (:* D1 D2) D7) D7
type D1277 = :* (:* (:* D1 D2) D7) D7
type O2375 = :* (:* (:* D1 D2) D7) D7
type H4FC = :* (:* (:* D1 D2) D7) D6
type D1276 = :* (:* (:* D1 D2) D7) D6
type O2374 = :* (:* (:* D1 D2) D7) D6
type H4FB = :* (:* (:* D1 D2) D7) D5
type D1275 = :* (:* (:* D1 D2) D7) D5
type O2373 = :* (:* (:* D1 D2) D7) D5
type H4FA = :* (:* (:* D1 D2) D7) D4
type D1274 = :* (:* (:* D1 D2) D7) D4
type O2372 = :* (:* (:* D1 D2) D7) D4
type H4F9 = :* (:* (:* D1 D2) D7) D3
type D1273 = :* (:* (:* D1 D2) D7) D3
type O2371 = :* (:* (:* D1 D2) D7) D3
type H4F8 = :* (:* (:* D1 D2) D7) D2
type D1272 = :* (:* (:* D1 D2) D7) D2
type O2370 = :* (:* (:* D1 D2) D7) D2
type H4F7 = :* (:* (:* D1 D2) D7) D1
type D1271 = :* (:* (:* D1 D2) D7) D1
type O2367 = :* (:* (:* D1 D2) D7) D1
type H4F6 = :* (:* (:* D1 D2) D7) D0
type D1270 = :* (:* (:* D1 D2) D7) D0
type O2366 = :* (:* (:* D1 D2) D7) D0
type H4F5 = :* (:* (:* D1 D2) D6) D9
type D1269 = :* (:* (:* D1 D2) D6) D9
type O2365 = :* (:* (:* D1 D2) D6) D9
type H4F4 = :* (:* (:* D1 D2) D6) D8
type D1268 = :* (:* (:* D1 D2) D6) D8
type O2364 = :* (:* (:* D1 D2) D6) D8
type H4F3 = :* (:* (:* D1 D2) D6) D7
type D1267 = :* (:* (:* D1 D2) D6) D7
type O2363 = :* (:* (:* D1 D2) D6) D7
type H4F2 = :* (:* (:* D1 D2) D6) D6
type D1266 = :* (:* (:* D1 D2) D6) D6
type O2362 = :* (:* (:* D1 D2) D6) D6
type H4F1 = :* (:* (:* D1 D2) D6) D5
type D1265 = :* (:* (:* D1 D2) D6) D5
type O2361 = :* (:* (:* D1 D2) D6) D5
type H4F0 = :* (:* (:* D1 D2) D6) D4
type D1264 = :* (:* (:* D1 D2) D6) D4
type O2360 = :* (:* (:* D1 D2) D6) D4
type H4EF = :* (:* (:* D1 D2) D6) D3
type D1263 = :* (:* (:* D1 D2) D6) D3
type O2357 = :* (:* (:* D1 D2) D6) D3
type H4EE = :* (:* (:* D1 D2) D6) D2
type D1262 = :* (:* (:* D1 D2) D6) D2
type O2356 = :* (:* (:* D1 D2) D6) D2
type H4ED = :* (:* (:* D1 D2) D6) D1
type D1261 = :* (:* (:* D1 D2) D6) D1
type O2355 = :* (:* (:* D1 D2) D6) D1
type H4EC = :* (:* (:* D1 D2) D6) D0
type D1260 = :* (:* (:* D1 D2) D6) D0
type O2354 = :* (:* (:* D1 D2) D6) D0
type H4EB = :* (:* (:* D1 D2) D5) D9
type D1259 = :* (:* (:* D1 D2) D5) D9
type O2353 = :* (:* (:* D1 D2) D5) D9
type H4EA = :* (:* (:* D1 D2) D5) D8
type D1258 = :* (:* (:* D1 D2) D5) D8
type O2352 = :* (:* (:* D1 D2) D5) D8
type H4E9 = :* (:* (:* D1 D2) D5) D7
type D1257 = :* (:* (:* D1 D2) D5) D7
type O2351 = :* (:* (:* D1 D2) D5) D7
type H4E8 = :* (:* (:* D1 D2) D5) D6
type D1256 = :* (:* (:* D1 D2) D5) D6
type O2350 = :* (:* (:* D1 D2) D5) D6
type H4E7 = :* (:* (:* D1 D2) D5) D5
type D1255 = :* (:* (:* D1 D2) D5) D5
type O2347 = :* (:* (:* D1 D2) D5) D5
type H4E6 = :* (:* (:* D1 D2) D5) D4
type D1254 = :* (:* (:* D1 D2) D5) D4
type O2346 = :* (:* (:* D1 D2) D5) D4
type H4E5 = :* (:* (:* D1 D2) D5) D3
type D1253 = :* (:* (:* D1 D2) D5) D3
type O2345 = :* (:* (:* D1 D2) D5) D3
type H4E4 = :* (:* (:* D1 D2) D5) D2
type D1252 = :* (:* (:* D1 D2) D5) D2
type O2344 = :* (:* (:* D1 D2) D5) D2
type H4E3 = :* (:* (:* D1 D2) D5) D1
type D1251 = :* (:* (:* D1 D2) D5) D1
type O2343 = :* (:* (:* D1 D2) D5) D1
type H4E2 = :* (:* (:* D1 D2) D5) D0
type D1250 = :* (:* (:* D1 D2) D5) D0
type O2342 = :* (:* (:* D1 D2) D5) D0
type H4E1 = :* (:* (:* D1 D2) D4) D9
type D1249 = :* (:* (:* D1 D2) D4) D9
type O2341 = :* (:* (:* D1 D2) D4) D9
type H4E0 = :* (:* (:* D1 D2) D4) D8
type D1248 = :* (:* (:* D1 D2) D4) D8
type O2340 = :* (:* (:* D1 D2) D4) D8
type H4DF = :* (:* (:* D1 D2) D4) D7
type D1247 = :* (:* (:* D1 D2) D4) D7
type O2337 = :* (:* (:* D1 D2) D4) D7
type H4DE = :* (:* (:* D1 D2) D4) D6
type D1246 = :* (:* (:* D1 D2) D4) D6
type O2336 = :* (:* (:* D1 D2) D4) D6
type H4DD = :* (:* (:* D1 D2) D4) D5
type D1245 = :* (:* (:* D1 D2) D4) D5
type O2335 = :* (:* (:* D1 D2) D4) D5
type H4DC = :* (:* (:* D1 D2) D4) D4
type D1244 = :* (:* (:* D1 D2) D4) D4
type O2334 = :* (:* (:* D1 D2) D4) D4
type H4DB = :* (:* (:* D1 D2) D4) D3
type D1243 = :* (:* (:* D1 D2) D4) D3
type O2333 = :* (:* (:* D1 D2) D4) D3
type H4DA = :* (:* (:* D1 D2) D4) D2
type D1242 = :* (:* (:* D1 D2) D4) D2
type O2332 = :* (:* (:* D1 D2) D4) D2
type H4D9 = :* (:* (:* D1 D2) D4) D1
type D1241 = :* (:* (:* D1 D2) D4) D1
type O2331 = :* (:* (:* D1 D2) D4) D1
type H4D8 = :* (:* (:* D1 D2) D4) D0
type D1240 = :* (:* (:* D1 D2) D4) D0
type O2330 = :* (:* (:* D1 D2) D4) D0
type H4D7 = :* (:* (:* D1 D2) D3) D9
type D1239 = :* (:* (:* D1 D2) D3) D9
type O2327 = :* (:* (:* D1 D2) D3) D9
type H4D6 = :* (:* (:* D1 D2) D3) D8
type D1238 = :* (:* (:* D1 D2) D3) D8
type O2326 = :* (:* (:* D1 D2) D3) D8
type H4D5 = :* (:* (:* D1 D2) D3) D7
type D1237 = :* (:* (:* D1 D2) D3) D7
type O2325 = :* (:* (:* D1 D2) D3) D7
type H4D4 = :* (:* (:* D1 D2) D3) D6
type D1236 = :* (:* (:* D1 D2) D3) D6
type O2324 = :* (:* (:* D1 D2) D3) D6
type H4D3 = :* (:* (:* D1 D2) D3) D5
type D1235 = :* (:* (:* D1 D2) D3) D5
type O2323 = :* (:* (:* D1 D2) D3) D5
type H4D2 = :* (:* (:* D1 D2) D3) D4
type D1234 = :* (:* (:* D1 D2) D3) D4
type O2322 = :* (:* (:* D1 D2) D3) D4
type H4D1 = :* (:* (:* D1 D2) D3) D3
type D1233 = :* (:* (:* D1 D2) D3) D3
type O2321 = :* (:* (:* D1 D2) D3) D3
type H4D0 = :* (:* (:* D1 D2) D3) D2
type D1232 = :* (:* (:* D1 D2) D3) D2
type O2320 = :* (:* (:* D1 D2) D3) D2
type H4CF = :* (:* (:* D1 D2) D3) D1
type D1231 = :* (:* (:* D1 D2) D3) D1
type O2317 = :* (:* (:* D1 D2) D3) D1
type H4CE = :* (:* (:* D1 D2) D3) D0
type D1230 = :* (:* (:* D1 D2) D3) D0
type O2316 = :* (:* (:* D1 D2) D3) D0
type H4CD = :* (:* (:* D1 D2) D2) D9
type D1229 = :* (:* (:* D1 D2) D2) D9
type O2315 = :* (:* (:* D1 D2) D2) D9
type H4CC = :* (:* (:* D1 D2) D2) D8
type D1228 = :* (:* (:* D1 D2) D2) D8
type O2314 = :* (:* (:* D1 D2) D2) D8
type H4CB = :* (:* (:* D1 D2) D2) D7
type D1227 = :* (:* (:* D1 D2) D2) D7
type O2313 = :* (:* (:* D1 D2) D2) D7
type H4CA = :* (:* (:* D1 D2) D2) D6
type D1226 = :* (:* (:* D1 D2) D2) D6
type O2312 = :* (:* (:* D1 D2) D2) D6
type H4C9 = :* (:* (:* D1 D2) D2) D5
type D1225 = :* (:* (:* D1 D2) D2) D5
type O2311 = :* (:* (:* D1 D2) D2) D5
type H4C8 = :* (:* (:* D1 D2) D2) D4
type D1224 = :* (:* (:* D1 D2) D2) D4
type O2310 = :* (:* (:* D1 D2) D2) D4
type H4C7 = :* (:* (:* D1 D2) D2) D3
type D1223 = :* (:* (:* D1 D2) D2) D3
type O2307 = :* (:* (:* D1 D2) D2) D3
type H4C6 = :* (:* (:* D1 D2) D2) D2
type D1222 = :* (:* (:* D1 D2) D2) D2
type O2306 = :* (:* (:* D1 D2) D2) D2
type H4C5 = :* (:* (:* D1 D2) D2) D1
type D1221 = :* (:* (:* D1 D2) D2) D1
type O2305 = :* (:* (:* D1 D2) D2) D1
type H4C4 = :* (:* (:* D1 D2) D2) D0
type D1220 = :* (:* (:* D1 D2) D2) D0
type O2304 = :* (:* (:* D1 D2) D2) D0
type H4C3 = :* (:* (:* D1 D2) D1) D9
type D1219 = :* (:* (:* D1 D2) D1) D9
type O2303 = :* (:* (:* D1 D2) D1) D9
type H4C2 = :* (:* (:* D1 D2) D1) D8
type D1218 = :* (:* (:* D1 D2) D1) D8
type O2302 = :* (:* (:* D1 D2) D1) D8
type H4C1 = :* (:* (:* D1 D2) D1) D7
type D1217 = :* (:* (:* D1 D2) D1) D7
type O2301 = :* (:* (:* D1 D2) D1) D7
type H4C0 = :* (:* (:* D1 D2) D1) D6
type D1216 = :* (:* (:* D1 D2) D1) D6
type O2300 = :* (:* (:* D1 D2) D1) D6
type H4BF = :* (:* (:* D1 D2) D1) D5
type D1215 = :* (:* (:* D1 D2) D1) D5
type O2277 = :* (:* (:* D1 D2) D1) D5
type H4BE = :* (:* (:* D1 D2) D1) D4
type D1214 = :* (:* (:* D1 D2) D1) D4
type O2276 = :* (:* (:* D1 D2) D1) D4
type H4BD = :* (:* (:* D1 D2) D1) D3
type D1213 = :* (:* (:* D1 D2) D1) D3
type O2275 = :* (:* (:* D1 D2) D1) D3
type H4BC = :* (:* (:* D1 D2) D1) D2
type D1212 = :* (:* (:* D1 D2) D1) D2
type O2274 = :* (:* (:* D1 D2) D1) D2
type H4BB = :* (:* (:* D1 D2) D1) D1
type D1211 = :* (:* (:* D1 D2) D1) D1
type O2273 = :* (:* (:* D1 D2) D1) D1
type H4BA = :* (:* (:* D1 D2) D1) D0
type D1210 = :* (:* (:* D1 D2) D1) D0
type O2272 = :* (:* (:* D1 D2) D1) D0
type H4B9 = :* (:* (:* D1 D2) D0) D9
type D1209 = :* (:* (:* D1 D2) D0) D9
type O2271 = :* (:* (:* D1 D2) D0) D9
type H4B8 = :* (:* (:* D1 D2) D0) D8
type D1208 = :* (:* (:* D1 D2) D0) D8
type O2270 = :* (:* (:* D1 D2) D0) D8
type H4B7 = :* (:* (:* D1 D2) D0) D7
type D1207 = :* (:* (:* D1 D2) D0) D7
type O2267 = :* (:* (:* D1 D2) D0) D7
type H4B6 = :* (:* (:* D1 D2) D0) D6
type D1206 = :* (:* (:* D1 D2) D0) D6
type O2266 = :* (:* (:* D1 D2) D0) D6
type H4B5 = :* (:* (:* D1 D2) D0) D5
type D1205 = :* (:* (:* D1 D2) D0) D5
type O2265 = :* (:* (:* D1 D2) D0) D5
type H4B4 = :* (:* (:* D1 D2) D0) D4
type D1204 = :* (:* (:* D1 D2) D0) D4
type O2264 = :* (:* (:* D1 D2) D0) D4
type H4B3 = :* (:* (:* D1 D2) D0) D3
type D1203 = :* (:* (:* D1 D2) D0) D3
type O2263 = :* (:* (:* D1 D2) D0) D3
type H4B2 = :* (:* (:* D1 D2) D0) D2
type D1202 = :* (:* (:* D1 D2) D0) D2
type O2262 = :* (:* (:* D1 D2) D0) D2
type H4B1 = :* (:* (:* D1 D2) D0) D1
type D1201 = :* (:* (:* D1 D2) D0) D1
type O2261 = :* (:* (:* D1 D2) D0) D1
type H4B0 = :* (:* (:* D1 D2) D0) D0
type D1200 = :* (:* (:* D1 D2) D0) D0
type O2260 = :* (:* (:* D1 D2) D0) D0
type H4AF = :* (:* (:* D1 D1) D9) D9
type D1199 = :* (:* (:* D1 D1) D9) D9
type O2257 = :* (:* (:* D1 D1) D9) D9
type H4AE = :* (:* (:* D1 D1) D9) D8
type D1198 = :* (:* (:* D1 D1) D9) D8
type O2256 = :* (:* (:* D1 D1) D9) D8
type H4AD = :* (:* (:* D1 D1) D9) D7
type D1197 = :* (:* (:* D1 D1) D9) D7
type O2255 = :* (:* (:* D1 D1) D9) D7
type H4AC = :* (:* (:* D1 D1) D9) D6
type D1196 = :* (:* (:* D1 D1) D9) D6
type O2254 = :* (:* (:* D1 D1) D9) D6
type H4AB = :* (:* (:* D1 D1) D9) D5
type D1195 = :* (:* (:* D1 D1) D9) D5
type O2253 = :* (:* (:* D1 D1) D9) D5
type H4AA = :* (:* (:* D1 D1) D9) D4
type D1194 = :* (:* (:* D1 D1) D9) D4
type O2252 = :* (:* (:* D1 D1) D9) D4
type H4A9 = :* (:* (:* D1 D1) D9) D3
type D1193 = :* (:* (:* D1 D1) D9) D3
type O2251 = :* (:* (:* D1 D1) D9) D3
type H4A8 = :* (:* (:* D1 D1) D9) D2
type D1192 = :* (:* (:* D1 D1) D9) D2
type O2250 = :* (:* (:* D1 D1) D9) D2
type H4A7 = :* (:* (:* D1 D1) D9) D1
type D1191 = :* (:* (:* D1 D1) D9) D1
type O2247 = :* (:* (:* D1 D1) D9) D1
type H4A6 = :* (:* (:* D1 D1) D9) D0
type D1190 = :* (:* (:* D1 D1) D9) D0
type O2246 = :* (:* (:* D1 D1) D9) D0
type H4A5 = :* (:* (:* D1 D1) D8) D9
type D1189 = :* (:* (:* D1 D1) D8) D9
type O2245 = :* (:* (:* D1 D1) D8) D9
type H4A4 = :* (:* (:* D1 D1) D8) D8
type D1188 = :* (:* (:* D1 D1) D8) D8
type O2244 = :* (:* (:* D1 D1) D8) D8
type H4A3 = :* (:* (:* D1 D1) D8) D7
type D1187 = :* (:* (:* D1 D1) D8) D7
type O2243 = :* (:* (:* D1 D1) D8) D7
type H4A2 = :* (:* (:* D1 D1) D8) D6
type D1186 = :* (:* (:* D1 D1) D8) D6
type O2242 = :* (:* (:* D1 D1) D8) D6
type H4A1 = :* (:* (:* D1 D1) D8) D5
type D1185 = :* (:* (:* D1 D1) D8) D5
type O2241 = :* (:* (:* D1 D1) D8) D5
type H4A0 = :* (:* (:* D1 D1) D8) D4
type D1184 = :* (:* (:* D1 D1) D8) D4
type O2240 = :* (:* (:* D1 D1) D8) D4
type H49F = :* (:* (:* D1 D1) D8) D3
type D1183 = :* (:* (:* D1 D1) D8) D3
type O2237 = :* (:* (:* D1 D1) D8) D3
type H49E = :* (:* (:* D1 D1) D8) D2
type D1182 = :* (:* (:* D1 D1) D8) D2
type O2236 = :* (:* (:* D1 D1) D8) D2
type H49D = :* (:* (:* D1 D1) D8) D1
type D1181 = :* (:* (:* D1 D1) D8) D1
type O2235 = :* (:* (:* D1 D1) D8) D1
type H49C = :* (:* (:* D1 D1) D8) D0
type D1180 = :* (:* (:* D1 D1) D8) D0
type O2234 = :* (:* (:* D1 D1) D8) D0
type H49B = :* (:* (:* D1 D1) D7) D9
type D1179 = :* (:* (:* D1 D1) D7) D9
type O2233 = :* (:* (:* D1 D1) D7) D9
type H49A = :* (:* (:* D1 D1) D7) D8
type D1178 = :* (:* (:* D1 D1) D7) D8
type O2232 = :* (:* (:* D1 D1) D7) D8
type H499 = :* (:* (:* D1 D1) D7) D7
type D1177 = :* (:* (:* D1 D1) D7) D7
type O2231 = :* (:* (:* D1 D1) D7) D7
type H498 = :* (:* (:* D1 D1) D7) D6
type D1176 = :* (:* (:* D1 D1) D7) D6
type O2230 = :* (:* (:* D1 D1) D7) D6
type H497 = :* (:* (:* D1 D1) D7) D5
type D1175 = :* (:* (:* D1 D1) D7) D5
type O2227 = :* (:* (:* D1 D1) D7) D5
type H496 = :* (:* (:* D1 D1) D7) D4
type D1174 = :* (:* (:* D1 D1) D7) D4
type O2226 = :* (:* (:* D1 D1) D7) D4
type H495 = :* (:* (:* D1 D1) D7) D3
type D1173 = :* (:* (:* D1 D1) D7) D3
type O2225 = :* (:* (:* D1 D1) D7) D3
type H494 = :* (:* (:* D1 D1) D7) D2
type D1172 = :* (:* (:* D1 D1) D7) D2
type O2224 = :* (:* (:* D1 D1) D7) D2
type H493 = :* (:* (:* D1 D1) D7) D1
type D1171 = :* (:* (:* D1 D1) D7) D1
type O2223 = :* (:* (:* D1 D1) D7) D1
type H492 = :* (:* (:* D1 D1) D7) D0
type D1170 = :* (:* (:* D1 D1) D7) D0
type O2222 = :* (:* (:* D1 D1) D7) D0
type H491 = :* (:* (:* D1 D1) D6) D9
type D1169 = :* (:* (:* D1 D1) D6) D9
type O2221 = :* (:* (:* D1 D1) D6) D9
type H490 = :* (:* (:* D1 D1) D6) D8
type D1168 = :* (:* (:* D1 D1) D6) D8
type O2220 = :* (:* (:* D1 D1) D6) D8
type H48F = :* (:* (:* D1 D1) D6) D7
type D1167 = :* (:* (:* D1 D1) D6) D7
type O2217 = :* (:* (:* D1 D1) D6) D7
type H48E = :* (:* (:* D1 D1) D6) D6
type D1166 = :* (:* (:* D1 D1) D6) D6
type O2216 = :* (:* (:* D1 D1) D6) D6
type H48D = :* (:* (:* D1 D1) D6) D5
type D1165 = :* (:* (:* D1 D1) D6) D5
type O2215 = :* (:* (:* D1 D1) D6) D5
type H48C = :* (:* (:* D1 D1) D6) D4
type D1164 = :* (:* (:* D1 D1) D6) D4
type O2214 = :* (:* (:* D1 D1) D6) D4
type H48B = :* (:* (:* D1 D1) D6) D3
type D1163 = :* (:* (:* D1 D1) D6) D3
type O2213 = :* (:* (:* D1 D1) D6) D3
type H48A = :* (:* (:* D1 D1) D6) D2
type D1162 = :* (:* (:* D1 D1) D6) D2
type O2212 = :* (:* (:* D1 D1) D6) D2
type H489 = :* (:* (:* D1 D1) D6) D1
type D1161 = :* (:* (:* D1 D1) D6) D1
type O2211 = :* (:* (:* D1 D1) D6) D1
type H488 = :* (:* (:* D1 D1) D6) D0
type D1160 = :* (:* (:* D1 D1) D6) D0
type O2210 = :* (:* (:* D1 D1) D6) D0
type H487 = :* (:* (:* D1 D1) D5) D9
type D1159 = :* (:* (:* D1 D1) D5) D9
type O2207 = :* (:* (:* D1 D1) D5) D9
type H486 = :* (:* (:* D1 D1) D5) D8
type D1158 = :* (:* (:* D1 D1) D5) D8
type O2206 = :* (:* (:* D1 D1) D5) D8
type H485 = :* (:* (:* D1 D1) D5) D7
type D1157 = :* (:* (:* D1 D1) D5) D7
type O2205 = :* (:* (:* D1 D1) D5) D7
type H484 = :* (:* (:* D1 D1) D5) D6
type D1156 = :* (:* (:* D1 D1) D5) D6
type O2204 = :* (:* (:* D1 D1) D5) D6
type H483 = :* (:* (:* D1 D1) D5) D5
type D1155 = :* (:* (:* D1 D1) D5) D5
type O2203 = :* (:* (:* D1 D1) D5) D5
type H482 = :* (:* (:* D1 D1) D5) D4
type D1154 = :* (:* (:* D1 D1) D5) D4
type O2202 = :* (:* (:* D1 D1) D5) D4
type H481 = :* (:* (:* D1 D1) D5) D3
type D1153 = :* (:* (:* D1 D1) D5) D3
type O2201 = :* (:* (:* D1 D1) D5) D3
type H480 = :* (:* (:* D1 D1) D5) D2
type D1152 = :* (:* (:* D1 D1) D5) D2
type O2200 = :* (:* (:* D1 D1) D5) D2
type H47F = :* (:* (:* D1 D1) D5) D1
type D1151 = :* (:* (:* D1 D1) D5) D1
type O2177 = :* (:* (:* D1 D1) D5) D1
type H47E = :* (:* (:* D1 D1) D5) D0
type D1150 = :* (:* (:* D1 D1) D5) D0
type O2176 = :* (:* (:* D1 D1) D5) D0
type H47D = :* (:* (:* D1 D1) D4) D9
type D1149 = :* (:* (:* D1 D1) D4) D9
type O2175 = :* (:* (:* D1 D1) D4) D9
type H47C = :* (:* (:* D1 D1) D4) D8
type D1148 = :* (:* (:* D1 D1) D4) D8
type O2174 = :* (:* (:* D1 D1) D4) D8
type H47B = :* (:* (:* D1 D1) D4) D7
type D1147 = :* (:* (:* D1 D1) D4) D7
type O2173 = :* (:* (:* D1 D1) D4) D7
type H47A = :* (:* (:* D1 D1) D4) D6
type D1146 = :* (:* (:* D1 D1) D4) D6
type O2172 = :* (:* (:* D1 D1) D4) D6
type H479 = :* (:* (:* D1 D1) D4) D5
type D1145 = :* (:* (:* D1 D1) D4) D5
type O2171 = :* (:* (:* D1 D1) D4) D5
type H478 = :* (:* (:* D1 D1) D4) D4
type D1144 = :* (:* (:* D1 D1) D4) D4
type O2170 = :* (:* (:* D1 D1) D4) D4
type H477 = :* (:* (:* D1 D1) D4) D3
type D1143 = :* (:* (:* D1 D1) D4) D3
type O2167 = :* (:* (:* D1 D1) D4) D3
type H476 = :* (:* (:* D1 D1) D4) D2
type D1142 = :* (:* (:* D1 D1) D4) D2
type O2166 = :* (:* (:* D1 D1) D4) D2
type H475 = :* (:* (:* D1 D1) D4) D1
type D1141 = :* (:* (:* D1 D1) D4) D1
type O2165 = :* (:* (:* D1 D1) D4) D1
type H474 = :* (:* (:* D1 D1) D4) D0
type D1140 = :* (:* (:* D1 D1) D4) D0
type O2164 = :* (:* (:* D1 D1) D4) D0
type H473 = :* (:* (:* D1 D1) D3) D9
type D1139 = :* (:* (:* D1 D1) D3) D9
type O2163 = :* (:* (:* D1 D1) D3) D9
type H472 = :* (:* (:* D1 D1) D3) D8
type D1138 = :* (:* (:* D1 D1) D3) D8
type O2162 = :* (:* (:* D1 D1) D3) D8
type H471 = :* (:* (:* D1 D1) D3) D7
type D1137 = :* (:* (:* D1 D1) D3) D7
type O2161 = :* (:* (:* D1 D1) D3) D7
type H470 = :* (:* (:* D1 D1) D3) D6
type D1136 = :* (:* (:* D1 D1) D3) D6
type O2160 = :* (:* (:* D1 D1) D3) D6
type H46F = :* (:* (:* D1 D1) D3) D5
type D1135 = :* (:* (:* D1 D1) D3) D5
type O2157 = :* (:* (:* D1 D1) D3) D5
type H46E = :* (:* (:* D1 D1) D3) D4
type D1134 = :* (:* (:* D1 D1) D3) D4
type O2156 = :* (:* (:* D1 D1) D3) D4
type H46D = :* (:* (:* D1 D1) D3) D3
type D1133 = :* (:* (:* D1 D1) D3) D3
type O2155 = :* (:* (:* D1 D1) D3) D3
type H46C = :* (:* (:* D1 D1) D3) D2
type D1132 = :* (:* (:* D1 D1) D3) D2
type O2154 = :* (:* (:* D1 D1) D3) D2
type H46B = :* (:* (:* D1 D1) D3) D1
type D1131 = :* (:* (:* D1 D1) D3) D1
type O2153 = :* (:* (:* D1 D1) D3) D1
type H46A = :* (:* (:* D1 D1) D3) D0
type D1130 = :* (:* (:* D1 D1) D3) D0
type O2152 = :* (:* (:* D1 D1) D3) D0
type H469 = :* (:* (:* D1 D1) D2) D9
type D1129 = :* (:* (:* D1 D1) D2) D9
type O2151 = :* (:* (:* D1 D1) D2) D9
type H468 = :* (:* (:* D1 D1) D2) D8
type D1128 = :* (:* (:* D1 D1) D2) D8
type O2150 = :* (:* (:* D1 D1) D2) D8
type H467 = :* (:* (:* D1 D1) D2) D7
type D1127 = :* (:* (:* D1 D1) D2) D7
type O2147 = :* (:* (:* D1 D1) D2) D7
type H466 = :* (:* (:* D1 D1) D2) D6
type D1126 = :* (:* (:* D1 D1) D2) D6
type O2146 = :* (:* (:* D1 D1) D2) D6
type H465 = :* (:* (:* D1 D1) D2) D5
type D1125 = :* (:* (:* D1 D1) D2) D5
type O2145 = :* (:* (:* D1 D1) D2) D5
type H464 = :* (:* (:* D1 D1) D2) D4
type D1124 = :* (:* (:* D1 D1) D2) D4
type O2144 = :* (:* (:* D1 D1) D2) D4
type H463 = :* (:* (:* D1 D1) D2) D3
type D1123 = :* (:* (:* D1 D1) D2) D3
type O2143 = :* (:* (:* D1 D1) D2) D3
type H462 = :* (:* (:* D1 D1) D2) D2
type D1122 = :* (:* (:* D1 D1) D2) D2
type O2142 = :* (:* (:* D1 D1) D2) D2
type H461 = :* (:* (:* D1 D1) D2) D1
type D1121 = :* (:* (:* D1 D1) D2) D1
type O2141 = :* (:* (:* D1 D1) D2) D1
type H460 = :* (:* (:* D1 D1) D2) D0
type D1120 = :* (:* (:* D1 D1) D2) D0
type O2140 = :* (:* (:* D1 D1) D2) D0
type H45F = :* (:* (:* D1 D1) D1) D9
type D1119 = :* (:* (:* D1 D1) D1) D9
type O2137 = :* (:* (:* D1 D1) D1) D9
type H45E = :* (:* (:* D1 D1) D1) D8
type D1118 = :* (:* (:* D1 D1) D1) D8
type O2136 = :* (:* (:* D1 D1) D1) D8
type H45D = :* (:* (:* D1 D1) D1) D7
type D1117 = :* (:* (:* D1 D1) D1) D7
type O2135 = :* (:* (:* D1 D1) D1) D7
type H45C = :* (:* (:* D1 D1) D1) D6
type D1116 = :* (:* (:* D1 D1) D1) D6
type O2134 = :* (:* (:* D1 D1) D1) D6
type H45B = :* (:* (:* D1 D1) D1) D5
type D1115 = :* (:* (:* D1 D1) D1) D5
type O2133 = :* (:* (:* D1 D1) D1) D5
type H45A = :* (:* (:* D1 D1) D1) D4
type D1114 = :* (:* (:* D1 D1) D1) D4
type O2132 = :* (:* (:* D1 D1) D1) D4
type H459 = :* (:* (:* D1 D1) D1) D3
type D1113 = :* (:* (:* D1 D1) D1) D3
type O2131 = :* (:* (:* D1 D1) D1) D3
type H458 = :* (:* (:* D1 D1) D1) D2
type D1112 = :* (:* (:* D1 D1) D1) D2
type O2130 = :* (:* (:* D1 D1) D1) D2
type H457 = :* (:* (:* D1 D1) D1) D1
type D1111 = :* (:* (:* D1 D1) D1) D1
type O2127 = :* (:* (:* D1 D1) D1) D1
type H456 = :* (:* (:* D1 D1) D1) D0
type D1110 = :* (:* (:* D1 D1) D1) D0
type O2126 = :* (:* (:* D1 D1) D1) D0
type H455 = :* (:* (:* D1 D1) D0) D9
type D1109 = :* (:* (:* D1 D1) D0) D9
type O2125 = :* (:* (:* D1 D1) D0) D9
type H454 = :* (:* (:* D1 D1) D0) D8
type D1108 = :* (:* (:* D1 D1) D0) D8
type O2124 = :* (:* (:* D1 D1) D0) D8
type H453 = :* (:* (:* D1 D1) D0) D7
type D1107 = :* (:* (:* D1 D1) D0) D7
type O2123 = :* (:* (:* D1 D1) D0) D7
type H452 = :* (:* (:* D1 D1) D0) D6
type D1106 = :* (:* (:* D1 D1) D0) D6
type O2122 = :* (:* (:* D1 D1) D0) D6
type H451 = :* (:* (:* D1 D1) D0) D5
type D1105 = :* (:* (:* D1 D1) D0) D5
type O2121 = :* (:* (:* D1 D1) D0) D5
type H450 = :* (:* (:* D1 D1) D0) D4
type D1104 = :* (:* (:* D1 D1) D0) D4
type O2120 = :* (:* (:* D1 D1) D0) D4
type H44F = :* (:* (:* D1 D1) D0) D3
type D1103 = :* (:* (:* D1 D1) D0) D3
type O2117 = :* (:* (:* D1 D1) D0) D3
type H44E = :* (:* (:* D1 D1) D0) D2
type D1102 = :* (:* (:* D1 D1) D0) D2
type O2116 = :* (:* (:* D1 D1) D0) D2
type H44D = :* (:* (:* D1 D1) D0) D1
type D1101 = :* (:* (:* D1 D1) D0) D1
type O2115 = :* (:* (:* D1 D1) D0) D1
type H44C = :* (:* (:* D1 D1) D0) D0
type D1100 = :* (:* (:* D1 D1) D0) D0
type O2114 = :* (:* (:* D1 D1) D0) D0
type H44B = :* (:* (:* D1 D0) D9) D9
type D1099 = :* (:* (:* D1 D0) D9) D9
type O2113 = :* (:* (:* D1 D0) D9) D9
type H44A = :* (:* (:* D1 D0) D9) D8
type D1098 = :* (:* (:* D1 D0) D9) D8
type O2112 = :* (:* (:* D1 D0) D9) D8
type H449 = :* (:* (:* D1 D0) D9) D7
type D1097 = :* (:* (:* D1 D0) D9) D7
type O2111 = :* (:* (:* D1 D0) D9) D7
type H448 = :* (:* (:* D1 D0) D9) D6
type D1096 = :* (:* (:* D1 D0) D9) D6
type O2110 = :* (:* (:* D1 D0) D9) D6
type H447 = :* (:* (:* D1 D0) D9) D5
type D1095 = :* (:* (:* D1 D0) D9) D5
type O2107 = :* (:* (:* D1 D0) D9) D5
type H446 = :* (:* (:* D1 D0) D9) D4
type D1094 = :* (:* (:* D1 D0) D9) D4
type O2106 = :* (:* (:* D1 D0) D9) D4
type H445 = :* (:* (:* D1 D0) D9) D3
type D1093 = :* (:* (:* D1 D0) D9) D3
type O2105 = :* (:* (:* D1 D0) D9) D3
type H444 = :* (:* (:* D1 D0) D9) D2
type D1092 = :* (:* (:* D1 D0) D9) D2
type O2104 = :* (:* (:* D1 D0) D9) D2
type H443 = :* (:* (:* D1 D0) D9) D1
type D1091 = :* (:* (:* D1 D0) D9) D1
type O2103 = :* (:* (:* D1 D0) D9) D1
type H442 = :* (:* (:* D1 D0) D9) D0
type D1090 = :* (:* (:* D1 D0) D9) D0
type O2102 = :* (:* (:* D1 D0) D9) D0
type H441 = :* (:* (:* D1 D0) D8) D9
type D1089 = :* (:* (:* D1 D0) D8) D9
type O2101 = :* (:* (:* D1 D0) D8) D9
type H440 = :* (:* (:* D1 D0) D8) D8
type D1088 = :* (:* (:* D1 D0) D8) D8
type O2100 = :* (:* (:* D1 D0) D8) D8
type H43F = :* (:* (:* D1 D0) D8) D7
type D1087 = :* (:* (:* D1 D0) D8) D7
type O2077 = :* (:* (:* D1 D0) D8) D7
type H43E = :* (:* (:* D1 D0) D8) D6
type D1086 = :* (:* (:* D1 D0) D8) D6
type O2076 = :* (:* (:* D1 D0) D8) D6
type H43D = :* (:* (:* D1 D0) D8) D5
type D1085 = :* (:* (:* D1 D0) D8) D5
type O2075 = :* (:* (:* D1 D0) D8) D5
type H43C = :* (:* (:* D1 D0) D8) D4
type D1084 = :* (:* (:* D1 D0) D8) D4
type O2074 = :* (:* (:* D1 D0) D8) D4
type H43B = :* (:* (:* D1 D0) D8) D3
type D1083 = :* (:* (:* D1 D0) D8) D3
type O2073 = :* (:* (:* D1 D0) D8) D3
type H43A = :* (:* (:* D1 D0) D8) D2
type D1082 = :* (:* (:* D1 D0) D8) D2
type O2072 = :* (:* (:* D1 D0) D8) D2
type H439 = :* (:* (:* D1 D0) D8) D1
type D1081 = :* (:* (:* D1 D0) D8) D1
type O2071 = :* (:* (:* D1 D0) D8) D1
type H438 = :* (:* (:* D1 D0) D8) D0
type D1080 = :* (:* (:* D1 D0) D8) D0
type O2070 = :* (:* (:* D1 D0) D8) D0
type H437 = :* (:* (:* D1 D0) D7) D9
type D1079 = :* (:* (:* D1 D0) D7) D9
type O2067 = :* (:* (:* D1 D0) D7) D9
type H436 = :* (:* (:* D1 D0) D7) D8
type D1078 = :* (:* (:* D1 D0) D7) D8
type O2066 = :* (:* (:* D1 D0) D7) D8
type H435 = :* (:* (:* D1 D0) D7) D7
type D1077 = :* (:* (:* D1 D0) D7) D7
type O2065 = :* (:* (:* D1 D0) D7) D7
type H434 = :* (:* (:* D1 D0) D7) D6
type D1076 = :* (:* (:* D1 D0) D7) D6
type O2064 = :* (:* (:* D1 D0) D7) D6
type H433 = :* (:* (:* D1 D0) D7) D5
type D1075 = :* (:* (:* D1 D0) D7) D5
type O2063 = :* (:* (:* D1 D0) D7) D5
type H432 = :* (:* (:* D1 D0) D7) D4
type D1074 = :* (:* (:* D1 D0) D7) D4
type O2062 = :* (:* (:* D1 D0) D7) D4
type H431 = :* (:* (:* D1 D0) D7) D3
type D1073 = :* (:* (:* D1 D0) D7) D3
type O2061 = :* (:* (:* D1 D0) D7) D3
type H430 = :* (:* (:* D1 D0) D7) D2
type D1072 = :* (:* (:* D1 D0) D7) D2
type O2060 = :* (:* (:* D1 D0) D7) D2
type H42F = :* (:* (:* D1 D0) D7) D1
type D1071 = :* (:* (:* D1 D0) D7) D1
type O2057 = :* (:* (:* D1 D0) D7) D1
type H42E = :* (:* (:* D1 D0) D7) D0
type D1070 = :* (:* (:* D1 D0) D7) D0
type O2056 = :* (:* (:* D1 D0) D7) D0
type H42D = :* (:* (:* D1 D0) D6) D9
type D1069 = :* (:* (:* D1 D0) D6) D9
type O2055 = :* (:* (:* D1 D0) D6) D9
type H42C = :* (:* (:* D1 D0) D6) D8
type D1068 = :* (:* (:* D1 D0) D6) D8
type O2054 = :* (:* (:* D1 D0) D6) D8
type H42B = :* (:* (:* D1 D0) D6) D7
type D1067 = :* (:* (:* D1 D0) D6) D7
type O2053 = :* (:* (:* D1 D0) D6) D7
type H42A = :* (:* (:* D1 D0) D6) D6
type D1066 = :* (:* (:* D1 D0) D6) D6
type O2052 = :* (:* (:* D1 D0) D6) D6
type H429 = :* (:* (:* D1 D0) D6) D5
type D1065 = :* (:* (:* D1 D0) D6) D5
type O2051 = :* (:* (:* D1 D0) D6) D5
type H428 = :* (:* (:* D1 D0) D6) D4
type D1064 = :* (:* (:* D1 D0) D6) D4
type O2050 = :* (:* (:* D1 D0) D6) D4
type H427 = :* (:* (:* D1 D0) D6) D3
type D1063 = :* (:* (:* D1 D0) D6) D3
type O2047 = :* (:* (:* D1 D0) D6) D3
type H426 = :* (:* (:* D1 D0) D6) D2
type D1062 = :* (:* (:* D1 D0) D6) D2
type O2046 = :* (:* (:* D1 D0) D6) D2
type H425 = :* (:* (:* D1 D0) D6) D1
type D1061 = :* (:* (:* D1 D0) D6) D1
type O2045 = :* (:* (:* D1 D0) D6) D1
type H424 = :* (:* (:* D1 D0) D6) D0
type D1060 = :* (:* (:* D1 D0) D6) D0
type O2044 = :* (:* (:* D1 D0) D6) D0
type H423 = :* (:* (:* D1 D0) D5) D9
type D1059 = :* (:* (:* D1 D0) D5) D9
type O2043 = :* (:* (:* D1 D0) D5) D9
type H422 = :* (:* (:* D1 D0) D5) D8
type D1058 = :* (:* (:* D1 D0) D5) D8
type O2042 = :* (:* (:* D1 D0) D5) D8
type H421 = :* (:* (:* D1 D0) D5) D7
type D1057 = :* (:* (:* D1 D0) D5) D7
type O2041 = :* (:* (:* D1 D0) D5) D7
type H420 = :* (:* (:* D1 D0) D5) D6
type D1056 = :* (:* (:* D1 D0) D5) D6
type O2040 = :* (:* (:* D1 D0) D5) D6
type H41F = :* (:* (:* D1 D0) D5) D5
type D1055 = :* (:* (:* D1 D0) D5) D5
type O2037 = :* (:* (:* D1 D0) D5) D5
type H41E = :* (:* (:* D1 D0) D5) D4
type D1054 = :* (:* (:* D1 D0) D5) D4
type O2036 = :* (:* (:* D1 D0) D5) D4
type H41D = :* (:* (:* D1 D0) D5) D3
type D1053 = :* (:* (:* D1 D0) D5) D3
type O2035 = :* (:* (:* D1 D0) D5) D3
type H41C = :* (:* (:* D1 D0) D5) D2
type D1052 = :* (:* (:* D1 D0) D5) D2
type O2034 = :* (:* (:* D1 D0) D5) D2
type H41B = :* (:* (:* D1 D0) D5) D1
type D1051 = :* (:* (:* D1 D0) D5) D1
type O2033 = :* (:* (:* D1 D0) D5) D1
type H41A = :* (:* (:* D1 D0) D5) D0
type D1050 = :* (:* (:* D1 D0) D5) D0
type O2032 = :* (:* (:* D1 D0) D5) D0
type H419 = :* (:* (:* D1 D0) D4) D9
type D1049 = :* (:* (:* D1 D0) D4) D9
type O2031 = :* (:* (:* D1 D0) D4) D9
type H418 = :* (:* (:* D1 D0) D4) D8
type D1048 = :* (:* (:* D1 D0) D4) D8
type O2030 = :* (:* (:* D1 D0) D4) D8
type H417 = :* (:* (:* D1 D0) D4) D7
type D1047 = :* (:* (:* D1 D0) D4) D7
type O2027 = :* (:* (:* D1 D0) D4) D7
type H416 = :* (:* (:* D1 D0) D4) D6
type D1046 = :* (:* (:* D1 D0) D4) D6
type O2026 = :* (:* (:* D1 D0) D4) D6
type H415 = :* (:* (:* D1 D0) D4) D5
type D1045 = :* (:* (:* D1 D0) D4) D5
type O2025 = :* (:* (:* D1 D0) D4) D5
type H414 = :* (:* (:* D1 D0) D4) D4
type D1044 = :* (:* (:* D1 D0) D4) D4
type O2024 = :* (:* (:* D1 D0) D4) D4
type H413 = :* (:* (:* D1 D0) D4) D3
type D1043 = :* (:* (:* D1 D0) D4) D3
type O2023 = :* (:* (:* D1 D0) D4) D3
type H412 = :* (:* (:* D1 D0) D4) D2
type D1042 = :* (:* (:* D1 D0) D4) D2
type O2022 = :* (:* (:* D1 D0) D4) D2
type H411 = :* (:* (:* D1 D0) D4) D1
type D1041 = :* (:* (:* D1 D0) D4) D1
type O2021 = :* (:* (:* D1 D0) D4) D1
type H410 = :* (:* (:* D1 D0) D4) D0
type D1040 = :* (:* (:* D1 D0) D4) D0
type O2020 = :* (:* (:* D1 D0) D4) D0
type H40F = :* (:* (:* D1 D0) D3) D9
type D1039 = :* (:* (:* D1 D0) D3) D9
type O2017 = :* (:* (:* D1 D0) D3) D9
type H40E = :* (:* (:* D1 D0) D3) D8
type D1038 = :* (:* (:* D1 D0) D3) D8
type O2016 = :* (:* (:* D1 D0) D3) D8
type H40D = :* (:* (:* D1 D0) D3) D7
type D1037 = :* (:* (:* D1 D0) D3) D7
type O2015 = :* (:* (:* D1 D0) D3) D7
type H40C = :* (:* (:* D1 D0) D3) D6
type D1036 = :* (:* (:* D1 D0) D3) D6
type O2014 = :* (:* (:* D1 D0) D3) D6
type H40B = :* (:* (:* D1 D0) D3) D5
type D1035 = :* (:* (:* D1 D0) D3) D5
type O2013 = :* (:* (:* D1 D0) D3) D5
type H40A = :* (:* (:* D1 D0) D3) D4
type D1034 = :* (:* (:* D1 D0) D3) D4
type O2012 = :* (:* (:* D1 D0) D3) D4
type H409 = :* (:* (:* D1 D0) D3) D3
type D1033 = :* (:* (:* D1 D0) D3) D3
type O2011 = :* (:* (:* D1 D0) D3) D3
type H408 = :* (:* (:* D1 D0) D3) D2
type D1032 = :* (:* (:* D1 D0) D3) D2
type O2010 = :* (:* (:* D1 D0) D3) D2
type H407 = :* (:* (:* D1 D0) D3) D1
type D1031 = :* (:* (:* D1 D0) D3) D1
type O2007 = :* (:* (:* D1 D0) D3) D1
type H406 = :* (:* (:* D1 D0) D3) D0
type D1030 = :* (:* (:* D1 D0) D3) D0
type O2006 = :* (:* (:* D1 D0) D3) D0
type H405 = :* (:* (:* D1 D0) D2) D9
type D1029 = :* (:* (:* D1 D0) D2) D9
type O2005 = :* (:* (:* D1 D0) D2) D9
type H404 = :* (:* (:* D1 D0) D2) D8
type D1028 = :* (:* (:* D1 D0) D2) D8
type O2004 = :* (:* (:* D1 D0) D2) D8
type H403 = :* (:* (:* D1 D0) D2) D7
type D1027 = :* (:* (:* D1 D0) D2) D7
type O2003 = :* (:* (:* D1 D0) D2) D7
type H402 = :* (:* (:* D1 D0) D2) D6
type D1026 = :* (:* (:* D1 D0) D2) D6
type O2002 = :* (:* (:* D1 D0) D2) D6
type H401 = :* (:* (:* D1 D0) D2) D5
type D1025 = :* (:* (:* D1 D0) D2) D5
type O2001 = :* (:* (:* D1 D0) D2) D5
type H400 = :* (:* (:* D1 D0) D2) D4
type D1024 = :* (:* (:* D1 D0) D2) D4
type O2000 = :* (:* (:* D1 D0) D2) D4
type B10000000000 = :* (:* (:* D1 D0) D2) D4
type H3FF = :* (:* (:* D1 D0) D2) D3
type D1023 = :* (:* (:* D1 D0) D2) D3
type O1777 = :* (:* (:* D1 D0) D2) D3
type B1111111111 = :* (:* (:* D1 D0) D2) D3
type H3FE = :* (:* (:* D1 D0) D2) D2
type D1022 = :* (:* (:* D1 D0) D2) D2
type O1776 = :* (:* (:* D1 D0) D2) D2
type B1111111110 = :* (:* (:* D1 D0) D2) D2
type H3FD = :* (:* (:* D1 D0) D2) D1
type D1021 = :* (:* (:* D1 D0) D2) D1
type O1775 = :* (:* (:* D1 D0) D2) D1
type B1111111101 = :* (:* (:* D1 D0) D2) D1
type H3FC = :* (:* (:* D1 D0) D2) D0
type D1020 = :* (:* (:* D1 D0) D2) D0
type O1774 = :* (:* (:* D1 D0) D2) D0
type B1111111100 = :* (:* (:* D1 D0) D2) D0
type H3FB = :* (:* (:* D1 D0) D1) D9
type D1019 = :* (:* (:* D1 D0) D1) D9
type O1773 = :* (:* (:* D1 D0) D1) D9
type B1111111011 = :* (:* (:* D1 D0) D1) D9
type H3FA = :* (:* (:* D1 D0) D1) D8
type D1018 = :* (:* (:* D1 D0) D1) D8
type O1772 = :* (:* (:* D1 D0) D1) D8
type B1111111010 = :* (:* (:* D1 D0) D1) D8
type H3F9 = :* (:* (:* D1 D0) D1) D7
type D1017 = :* (:* (:* D1 D0) D1) D7
type O1771 = :* (:* (:* D1 D0) D1) D7
type B1111111001 = :* (:* (:* D1 D0) D1) D7
type H3F8 = :* (:* (:* D1 D0) D1) D6
type D1016 = :* (:* (:* D1 D0) D1) D6
type O1770 = :* (:* (:* D1 D0) D1) D6
type B1111111000 = :* (:* (:* D1 D0) D1) D6
type H3F7 = :* (:* (:* D1 D0) D1) D5
type D1015 = :* (:* (:* D1 D0) D1) D5
type O1767 = :* (:* (:* D1 D0) D1) D5
type B1111110111 = :* (:* (:* D1 D0) D1) D5
type H3F6 = :* (:* (:* D1 D0) D1) D4
type D1014 = :* (:* (:* D1 D0) D1) D4
type O1766 = :* (:* (:* D1 D0) D1) D4
type B1111110110 = :* (:* (:* D1 D0) D1) D4
type H3F5 = :* (:* (:* D1 D0) D1) D3
type D1013 = :* (:* (:* D1 D0) D1) D3
type O1765 = :* (:* (:* D1 D0) D1) D3
type B1111110101 = :* (:* (:* D1 D0) D1) D3
type H3F4 = :* (:* (:* D1 D0) D1) D2
type D1012 = :* (:* (:* D1 D0) D1) D2
type O1764 = :* (:* (:* D1 D0) D1) D2
type B1111110100 = :* (:* (:* D1 D0) D1) D2
type H3F3 = :* (:* (:* D1 D0) D1) D1
type D1011 = :* (:* (:* D1 D0) D1) D1
type O1763 = :* (:* (:* D1 D0) D1) D1
type B1111110011 = :* (:* (:* D1 D0) D1) D1
type H3F2 = :* (:* (:* D1 D0) D1) D0
type D1010 = :* (:* (:* D1 D0) D1) D0
type O1762 = :* (:* (:* D1 D0) D1) D0
type B1111110010 = :* (:* (:* D1 D0) D1) D0
type H3F1 = :* (:* (:* D1 D0) D0) D9
type D1009 = :* (:* (:* D1 D0) D0) D9
type O1761 = :* (:* (:* D1 D0) D0) D9
type B1111110001 = :* (:* (:* D1 D0) D0) D9
type H3F0 = :* (:* (:* D1 D0) D0) D8
type D1008 = :* (:* (:* D1 D0) D0) D8
type O1760 = :* (:* (:* D1 D0) D0) D8
type B1111110000 = :* (:* (:* D1 D0) D0) D8
type H3EF = :* (:* (:* D1 D0) D0) D7
type D1007 = :* (:* (:* D1 D0) D0) D7
type O1757 = :* (:* (:* D1 D0) D0) D7
type B1111101111 = :* (:* (:* D1 D0) D0) D7
type H3EE = :* (:* (:* D1 D0) D0) D6
type D1006 = :* (:* (:* D1 D0) D0) D6
type O1756 = :* (:* (:* D1 D0) D0) D6
type B1111101110 = :* (:* (:* D1 D0) D0) D6
type H3ED = :* (:* (:* D1 D0) D0) D5
type D1005 = :* (:* (:* D1 D0) D0) D5
type O1755 = :* (:* (:* D1 D0) D0) D5
type B1111101101 = :* (:* (:* D1 D0) D0) D5
type H3EC = :* (:* (:* D1 D0) D0) D4
type D1004 = :* (:* (:* D1 D0) D0) D4
type O1754 = :* (:* (:* D1 D0) D0) D4
type B1111101100 = :* (:* (:* D1 D0) D0) D4
type H3EB = :* (:* (:* D1 D0) D0) D3
type D1003 = :* (:* (:* D1 D0) D0) D3
type O1753 = :* (:* (:* D1 D0) D0) D3
type B1111101011 = :* (:* (:* D1 D0) D0) D3
type H3EA = :* (:* (:* D1 D0) D0) D2
type D1002 = :* (:* (:* D1 D0) D0) D2
type O1752 = :* (:* (:* D1 D0) D0) D2
type B1111101010 = :* (:* (:* D1 D0) D0) D2
type H3E9 = :* (:* (:* D1 D0) D0) D1
type D1001 = :* (:* (:* D1 D0) D0) D1
type O1751 = :* (:* (:* D1 D0) D0) D1
type B1111101001 = :* (:* (:* D1 D0) D0) D1
type H3E8 = :* (:* (:* D1 D0) D0) D0
type D1000 = :* (:* (:* D1 D0) D0) D0
type O1750 = :* (:* (:* D1 D0) D0) D0
type B1111101000 = :* (:* (:* D1 D0) D0) D0
type H3E7 = :* (:* D9 D9) D9
type D999 = :* (:* D9 D9) D9
type O1747 = :* (:* D9 D9) D9
type B1111100111 = :* (:* D9 D9) D9
type H3E6 = :* (:* D9 D9) D8
type D998 = :* (:* D9 D9) D8
type O1746 = :* (:* D9 D9) D8
type B1111100110 = :* (:* D9 D9) D8
type H3E5 = :* (:* D9 D9) D7
type D997 = :* (:* D9 D9) D7
type O1745 = :* (:* D9 D9) D7
type B1111100101 = :* (:* D9 D9) D7
type H3E4 = :* (:* D9 D9) D6
type D996 = :* (:* D9 D9) D6
type O1744 = :* (:* D9 D9) D6
type B1111100100 = :* (:* D9 D9) D6
type H3E3 = :* (:* D9 D9) D5
type D995 = :* (:* D9 D9) D5
type O1743 = :* (:* D9 D9) D5
type B1111100011 = :* (:* D9 D9) D5
type H3E2 = :* (:* D9 D9) D4
type D994 = :* (:* D9 D9) D4
type O1742 = :* (:* D9 D9) D4
type B1111100010 = :* (:* D9 D9) D4
type H3E1 = :* (:* D9 D9) D3
type D993 = :* (:* D9 D9) D3
type O1741 = :* (:* D9 D9) D3
type B1111100001 = :* (:* D9 D9) D3
type H3E0 = :* (:* D9 D9) D2
type D992 = :* (:* D9 D9) D2
type O1740 = :* (:* D9 D9) D2
type B1111100000 = :* (:* D9 D9) D2
type H3DF = :* (:* D9 D9) D1
type D991 = :* (:* D9 D9) D1
type O1737 = :* (:* D9 D9) D1
type B1111011111 = :* (:* D9 D9) D1
type H3DE = :* (:* D9 D9) D0
type D990 = :* (:* D9 D9) D0
type O1736 = :* (:* D9 D9) D0
type B1111011110 = :* (:* D9 D9) D0
type H3DD = :* (:* D9 D8) D9
type D989 = :* (:* D9 D8) D9
type O1735 = :* (:* D9 D8) D9
type B1111011101 = :* (:* D9 D8) D9
type H3DC = :* (:* D9 D8) D8
type D988 = :* (:* D9 D8) D8
type O1734 = :* (:* D9 D8) D8
type B1111011100 = :* (:* D9 D8) D8
type H3DB = :* (:* D9 D8) D7
type D987 = :* (:* D9 D8) D7
type O1733 = :* (:* D9 D8) D7
type B1111011011 = :* (:* D9 D8) D7
type H3DA = :* (:* D9 D8) D6
type D986 = :* (:* D9 D8) D6
type O1732 = :* (:* D9 D8) D6
type B1111011010 = :* (:* D9 D8) D6
type H3D9 = :* (:* D9 D8) D5
type D985 = :* (:* D9 D8) D5
type O1731 = :* (:* D9 D8) D5
type B1111011001 = :* (:* D9 D8) D5
type H3D8 = :* (:* D9 D8) D4
type D984 = :* (:* D9 D8) D4
type O1730 = :* (:* D9 D8) D4
type B1111011000 = :* (:* D9 D8) D4
type H3D7 = :* (:* D9 D8) D3
type D983 = :* (:* D9 D8) D3
type O1727 = :* (:* D9 D8) D3
type B1111010111 = :* (:* D9 D8) D3
type H3D6 = :* (:* D9 D8) D2
type D982 = :* (:* D9 D8) D2
type O1726 = :* (:* D9 D8) D2
type B1111010110 = :* (:* D9 D8) D2
type H3D5 = :* (:* D9 D8) D1
type D981 = :* (:* D9 D8) D1
type O1725 = :* (:* D9 D8) D1
type B1111010101 = :* (:* D9 D8) D1
type H3D4 = :* (:* D9 D8) D0
type D980 = :* (:* D9 D8) D0
type O1724 = :* (:* D9 D8) D0
type B1111010100 = :* (:* D9 D8) D0
type H3D3 = :* (:* D9 D7) D9
type D979 = :* (:* D9 D7) D9
type O1723 = :* (:* D9 D7) D9
type B1111010011 = :* (:* D9 D7) D9
type H3D2 = :* (:* D9 D7) D8
type D978 = :* (:* D9 D7) D8
type O1722 = :* (:* D9 D7) D8
type B1111010010 = :* (:* D9 D7) D8
type H3D1 = :* (:* D9 D7) D7
type D977 = :* (:* D9 D7) D7
type O1721 = :* (:* D9 D7) D7
type B1111010001 = :* (:* D9 D7) D7
type H3D0 = :* (:* D9 D7) D6
type D976 = :* (:* D9 D7) D6
type O1720 = :* (:* D9 D7) D6
type B1111010000 = :* (:* D9 D7) D6
type H3CF = :* (:* D9 D7) D5
type D975 = :* (:* D9 D7) D5
type O1717 = :* (:* D9 D7) D5
type B1111001111 = :* (:* D9 D7) D5
type H3CE = :* (:* D9 D7) D4
type D974 = :* (:* D9 D7) D4
type O1716 = :* (:* D9 D7) D4
type B1111001110 = :* (:* D9 D7) D4
type H3CD = :* (:* D9 D7) D3
type D973 = :* (:* D9 D7) D3
type O1715 = :* (:* D9 D7) D3
type B1111001101 = :* (:* D9 D7) D3
type H3CC = :* (:* D9 D7) D2
type D972 = :* (:* D9 D7) D2
type O1714 = :* (:* D9 D7) D2
type B1111001100 = :* (:* D9 D7) D2
type H3CB = :* (:* D9 D7) D1
type D971 = :* (:* D9 D7) D1
type O1713 = :* (:* D9 D7) D1
type B1111001011 = :* (:* D9 D7) D1
type H3CA = :* (:* D9 D7) D0
type D970 = :* (:* D9 D7) D0
type O1712 = :* (:* D9 D7) D0
type B1111001010 = :* (:* D9 D7) D0
type H3C9 = :* (:* D9 D6) D9
type D969 = :* (:* D9 D6) D9
type O1711 = :* (:* D9 D6) D9
type B1111001001 = :* (:* D9 D6) D9
type H3C8 = :* (:* D9 D6) D8
type D968 = :* (:* D9 D6) D8
type O1710 = :* (:* D9 D6) D8
type B1111001000 = :* (:* D9 D6) D8
type H3C7 = :* (:* D9 D6) D7
type D967 = :* (:* D9 D6) D7
type O1707 = :* (:* D9 D6) D7
type B1111000111 = :* (:* D9 D6) D7
type H3C6 = :* (:* D9 D6) D6
type D966 = :* (:* D9 D6) D6
type O1706 = :* (:* D9 D6) D6
type B1111000110 = :* (:* D9 D6) D6
type H3C5 = :* (:* D9 D6) D5
type D965 = :* (:* D9 D6) D5
type O1705 = :* (:* D9 D6) D5
type B1111000101 = :* (:* D9 D6) D5
type H3C4 = :* (:* D9 D6) D4
type D964 = :* (:* D9 D6) D4
type O1704 = :* (:* D9 D6) D4
type B1111000100 = :* (:* D9 D6) D4
type H3C3 = :* (:* D9 D6) D3
type D963 = :* (:* D9 D6) D3
type O1703 = :* (:* D9 D6) D3
type B1111000011 = :* (:* D9 D6) D3
type H3C2 = :* (:* D9 D6) D2
type D962 = :* (:* D9 D6) D2
type O1702 = :* (:* D9 D6) D2
type B1111000010 = :* (:* D9 D6) D2
type H3C1 = :* (:* D9 D6) D1
type D961 = :* (:* D9 D6) D1
type O1701 = :* (:* D9 D6) D1
type B1111000001 = :* (:* D9 D6) D1
type H3C0 = :* (:* D9 D6) D0
type D960 = :* (:* D9 D6) D0
type O1700 = :* (:* D9 D6) D0
type B1111000000 = :* (:* D9 D6) D0
type H3BF = :* (:* D9 D5) D9
type D959 = :* (:* D9 D5) D9
type O1677 = :* (:* D9 D5) D9
type B1110111111 = :* (:* D9 D5) D9
type H3BE = :* (:* D9 D5) D8
type D958 = :* (:* D9 D5) D8
type O1676 = :* (:* D9 D5) D8
type B1110111110 = :* (:* D9 D5) D8
type H3BD = :* (:* D9 D5) D7
type D957 = :* (:* D9 D5) D7
type O1675 = :* (:* D9 D5) D7
type B1110111101 = :* (:* D9 D5) D7
type H3BC = :* (:* D9 D5) D6
type D956 = :* (:* D9 D5) D6
type O1674 = :* (:* D9 D5) D6
type B1110111100 = :* (:* D9 D5) D6
type H3BB = :* (:* D9 D5) D5
type D955 = :* (:* D9 D5) D5
type O1673 = :* (:* D9 D5) D5
type B1110111011 = :* (:* D9 D5) D5
type H3BA = :* (:* D9 D5) D4
type D954 = :* (:* D9 D5) D4
type O1672 = :* (:* D9 D5) D4
type B1110111010 = :* (:* D9 D5) D4
type H3B9 = :* (:* D9 D5) D3
type D953 = :* (:* D9 D5) D3
type O1671 = :* (:* D9 D5) D3
type B1110111001 = :* (:* D9 D5) D3
type H3B8 = :* (:* D9 D5) D2
type D952 = :* (:* D9 D5) D2
type O1670 = :* (:* D9 D5) D2
type B1110111000 = :* (:* D9 D5) D2
type H3B7 = :* (:* D9 D5) D1
type D951 = :* (:* D9 D5) D1
type O1667 = :* (:* D9 D5) D1
type B1110110111 = :* (:* D9 D5) D1
type H3B6 = :* (:* D9 D5) D0
type D950 = :* (:* D9 D5) D0
type O1666 = :* (:* D9 D5) D0
type B1110110110 = :* (:* D9 D5) D0
type H3B5 = :* (:* D9 D4) D9
type D949 = :* (:* D9 D4) D9
type O1665 = :* (:* D9 D4) D9
type B1110110101 = :* (:* D9 D4) D9
type H3B4 = :* (:* D9 D4) D8
type D948 = :* (:* D9 D4) D8
type O1664 = :* (:* D9 D4) D8
type B1110110100 = :* (:* D9 D4) D8
type H3B3 = :* (:* D9 D4) D7
type D947 = :* (:* D9 D4) D7
type O1663 = :* (:* D9 D4) D7
type B1110110011 = :* (:* D9 D4) D7
type H3B2 = :* (:* D9 D4) D6
type D946 = :* (:* D9 D4) D6
type O1662 = :* (:* D9 D4) D6
type B1110110010 = :* (:* D9 D4) D6
type H3B1 = :* (:* D9 D4) D5
type D945 = :* (:* D9 D4) D5
type O1661 = :* (:* D9 D4) D5
type B1110110001 = :* (:* D9 D4) D5
type H3B0 = :* (:* D9 D4) D4
type D944 = :* (:* D9 D4) D4
type O1660 = :* (:* D9 D4) D4
type B1110110000 = :* (:* D9 D4) D4
type H3AF = :* (:* D9 D4) D3
type D943 = :* (:* D9 D4) D3
type O1657 = :* (:* D9 D4) D3
type B1110101111 = :* (:* D9 D4) D3
type H3AE = :* (:* D9 D4) D2
type D942 = :* (:* D9 D4) D2
type O1656 = :* (:* D9 D4) D2
type B1110101110 = :* (:* D9 D4) D2
type H3AD = :* (:* D9 D4) D1
type D941 = :* (:* D9 D4) D1
type O1655 = :* (:* D9 D4) D1
type B1110101101 = :* (:* D9 D4) D1
type H3AC = :* (:* D9 D4) D0
type D940 = :* (:* D9 D4) D0
type O1654 = :* (:* D9 D4) D0
type B1110101100 = :* (:* D9 D4) D0
type H3AB = :* (:* D9 D3) D9
type D939 = :* (:* D9 D3) D9
type O1653 = :* (:* D9 D3) D9
type B1110101011 = :* (:* D9 D3) D9
type H3AA = :* (:* D9 D3) D8
type D938 = :* (:* D9 D3) D8
type O1652 = :* (:* D9 D3) D8
type B1110101010 = :* (:* D9 D3) D8
type H3A9 = :* (:* D9 D3) D7
type D937 = :* (:* D9 D3) D7
type O1651 = :* (:* D9 D3) D7
type B1110101001 = :* (:* D9 D3) D7
type H3A8 = :* (:* D9 D3) D6
type D936 = :* (:* D9 D3) D6
type O1650 = :* (:* D9 D3) D6
type B1110101000 = :* (:* D9 D3) D6
type H3A7 = :* (:* D9 D3) D5
type D935 = :* (:* D9 D3) D5
type O1647 = :* (:* D9 D3) D5
type B1110100111 = :* (:* D9 D3) D5
type H3A6 = :* (:* D9 D3) D4
type D934 = :* (:* D9 D3) D4
type O1646 = :* (:* D9 D3) D4
type B1110100110 = :* (:* D9 D3) D4
type H3A5 = :* (:* D9 D3) D3
type D933 = :* (:* D9 D3) D3
type O1645 = :* (:* D9 D3) D3
type B1110100101 = :* (:* D9 D3) D3
type H3A4 = :* (:* D9 D3) D2
type D932 = :* (:* D9 D3) D2
type O1644 = :* (:* D9 D3) D2
type B1110100100 = :* (:* D9 D3) D2
type H3A3 = :* (:* D9 D3) D1
type D931 = :* (:* D9 D3) D1
type O1643 = :* (:* D9 D3) D1
type B1110100011 = :* (:* D9 D3) D1
type H3A2 = :* (:* D9 D3) D0
type D930 = :* (:* D9 D3) D0
type O1642 = :* (:* D9 D3) D0
type B1110100010 = :* (:* D9 D3) D0
type H3A1 = :* (:* D9 D2) D9
type D929 = :* (:* D9 D2) D9
type O1641 = :* (:* D9 D2) D9
type B1110100001 = :* (:* D9 D2) D9
type H3A0 = :* (:* D9 D2) D8
type D928 = :* (:* D9 D2) D8
type O1640 = :* (:* D9 D2) D8
type B1110100000 = :* (:* D9 D2) D8
type H39F = :* (:* D9 D2) D7
type D927 = :* (:* D9 D2) D7
type O1637 = :* (:* D9 D2) D7
type B1110011111 = :* (:* D9 D2) D7
type H39E = :* (:* D9 D2) D6
type D926 = :* (:* D9 D2) D6
type O1636 = :* (:* D9 D2) D6
type B1110011110 = :* (:* D9 D2) D6
type H39D = :* (:* D9 D2) D5
type D925 = :* (:* D9 D2) D5
type O1635 = :* (:* D9 D2) D5
type B1110011101 = :* (:* D9 D2) D5
type H39C = :* (:* D9 D2) D4
type D924 = :* (:* D9 D2) D4
type O1634 = :* (:* D9 D2) D4
type B1110011100 = :* (:* D9 D2) D4
type H39B = :* (:* D9 D2) D3
type D923 = :* (:* D9 D2) D3
type O1633 = :* (:* D9 D2) D3
type B1110011011 = :* (:* D9 D2) D3
type H39A = :* (:* D9 D2) D2
type D922 = :* (:* D9 D2) D2
type O1632 = :* (:* D9 D2) D2
type B1110011010 = :* (:* D9 D2) D2
type H399 = :* (:* D9 D2) D1
type D921 = :* (:* D9 D2) D1
type O1631 = :* (:* D9 D2) D1
type B1110011001 = :* (:* D9 D2) D1
type H398 = :* (:* D9 D2) D0
type D920 = :* (:* D9 D2) D0
type O1630 = :* (:* D9 D2) D0
type B1110011000 = :* (:* D9 D2) D0
type H397 = :* (:* D9 D1) D9
type D919 = :* (:* D9 D1) D9
type O1627 = :* (:* D9 D1) D9
type B1110010111 = :* (:* D9 D1) D9
type H396 = :* (:* D9 D1) D8
type D918 = :* (:* D9 D1) D8
type O1626 = :* (:* D9 D1) D8
type B1110010110 = :* (:* D9 D1) D8
type H395 = :* (:* D9 D1) D7
type D917 = :* (:* D9 D1) D7
type O1625 = :* (:* D9 D1) D7
type B1110010101 = :* (:* D9 D1) D7
type H394 = :* (:* D9 D1) D6
type D916 = :* (:* D9 D1) D6
type O1624 = :* (:* D9 D1) D6
type B1110010100 = :* (:* D9 D1) D6
type H393 = :* (:* D9 D1) D5
type D915 = :* (:* D9 D1) D5
type O1623 = :* (:* D9 D1) D5
type B1110010011 = :* (:* D9 D1) D5
type H392 = :* (:* D9 D1) D4
type D914 = :* (:* D9 D1) D4
type O1622 = :* (:* D9 D1) D4
type B1110010010 = :* (:* D9 D1) D4
type H391 = :* (:* D9 D1) D3
type D913 = :* (:* D9 D1) D3
type O1621 = :* (:* D9 D1) D3
type B1110010001 = :* (:* D9 D1) D3
type H390 = :* (:* D9 D1) D2
type D912 = :* (:* D9 D1) D2
type O1620 = :* (:* D9 D1) D2
type B1110010000 = :* (:* D9 D1) D2
type H38F = :* (:* D9 D1) D1
type D911 = :* (:* D9 D1) D1
type O1617 = :* (:* D9 D1) D1
type B1110001111 = :* (:* D9 D1) D1
type H38E = :* (:* D9 D1) D0
type D910 = :* (:* D9 D1) D0
type O1616 = :* (:* D9 D1) D0
type B1110001110 = :* (:* D9 D1) D0
type H38D = :* (:* D9 D0) D9
type D909 = :* (:* D9 D0) D9
type O1615 = :* (:* D9 D0) D9
type B1110001101 = :* (:* D9 D0) D9
type H38C = :* (:* D9 D0) D8
type D908 = :* (:* D9 D0) D8
type O1614 = :* (:* D9 D0) D8
type B1110001100 = :* (:* D9 D0) D8
type H38B = :* (:* D9 D0) D7
type D907 = :* (:* D9 D0) D7
type O1613 = :* (:* D9 D0) D7
type B1110001011 = :* (:* D9 D0) D7
type H38A = :* (:* D9 D0) D6
type D906 = :* (:* D9 D0) D6
type O1612 = :* (:* D9 D0) D6
type B1110001010 = :* (:* D9 D0) D6
type H389 = :* (:* D9 D0) D5
type D905 = :* (:* D9 D0) D5
type O1611 = :* (:* D9 D0) D5
type B1110001001 = :* (:* D9 D0) D5
type H388 = :* (:* D9 D0) D4
type D904 = :* (:* D9 D0) D4
type O1610 = :* (:* D9 D0) D4
type B1110001000 = :* (:* D9 D0) D4
type H387 = :* (:* D9 D0) D3
type D903 = :* (:* D9 D0) D3
type O1607 = :* (:* D9 D0) D3
type B1110000111 = :* (:* D9 D0) D3
type H386 = :* (:* D9 D0) D2
type D902 = :* (:* D9 D0) D2
type O1606 = :* (:* D9 D0) D2
type B1110000110 = :* (:* D9 D0) D2
type H385 = :* (:* D9 D0) D1
type D901 = :* (:* D9 D0) D1
type O1605 = :* (:* D9 D0) D1
type B1110000101 = :* (:* D9 D0) D1
type H384 = :* (:* D9 D0) D0
type D900 = :* (:* D9 D0) D0
type O1604 = :* (:* D9 D0) D0
type B1110000100 = :* (:* D9 D0) D0
type H383 = :* (:* D8 D9) D9
type D899 = :* (:* D8 D9) D9
type O1603 = :* (:* D8 D9) D9
type B1110000011 = :* (:* D8 D9) D9
type H382 = :* (:* D8 D9) D8
type D898 = :* (:* D8 D9) D8
type O1602 = :* (:* D8 D9) D8
type B1110000010 = :* (:* D8 D9) D8
type H381 = :* (:* D8 D9) D7
type D897 = :* (:* D8 D9) D7
type O1601 = :* (:* D8 D9) D7
type B1110000001 = :* (:* D8 D9) D7
type H380 = :* (:* D8 D9) D6
type D896 = :* (:* D8 D9) D6
type O1600 = :* (:* D8 D9) D6
type B1110000000 = :* (:* D8 D9) D6
type H37F = :* (:* D8 D9) D5
type D895 = :* (:* D8 D9) D5
type O1577 = :* (:* D8 D9) D5
type B1101111111 = :* (:* D8 D9) D5
type H37E = :* (:* D8 D9) D4
type D894 = :* (:* D8 D9) D4
type O1576 = :* (:* D8 D9) D4
type B1101111110 = :* (:* D8 D9) D4
type H37D = :* (:* D8 D9) D3
type D893 = :* (:* D8 D9) D3
type O1575 = :* (:* D8 D9) D3
type B1101111101 = :* (:* D8 D9) D3
type H37C = :* (:* D8 D9) D2
type D892 = :* (:* D8 D9) D2
type O1574 = :* (:* D8 D9) D2
type B1101111100 = :* (:* D8 D9) D2
type H37B = :* (:* D8 D9) D1
type D891 = :* (:* D8 D9) D1
type O1573 = :* (:* D8 D9) D1
type B1101111011 = :* (:* D8 D9) D1
type H37A = :* (:* D8 D9) D0
type D890 = :* (:* D8 D9) D0
type O1572 = :* (:* D8 D9) D0
type B1101111010 = :* (:* D8 D9) D0
type H379 = :* (:* D8 D8) D9
type D889 = :* (:* D8 D8) D9
type O1571 = :* (:* D8 D8) D9
type B1101111001 = :* (:* D8 D8) D9
type H378 = :* (:* D8 D8) D8
type D888 = :* (:* D8 D8) D8
type O1570 = :* (:* D8 D8) D8
type B1101111000 = :* (:* D8 D8) D8
type H377 = :* (:* D8 D8) D7
type D887 = :* (:* D8 D8) D7
type O1567 = :* (:* D8 D8) D7
type B1101110111 = :* (:* D8 D8) D7
type H376 = :* (:* D8 D8) D6
type D886 = :* (:* D8 D8) D6
type O1566 = :* (:* D8 D8) D6
type B1101110110 = :* (:* D8 D8) D6
type H375 = :* (:* D8 D8) D5
type D885 = :* (:* D8 D8) D5
type O1565 = :* (:* D8 D8) D5
type B1101110101 = :* (:* D8 D8) D5
type H374 = :* (:* D8 D8) D4
type D884 = :* (:* D8 D8) D4
type O1564 = :* (:* D8 D8) D4
type B1101110100 = :* (:* D8 D8) D4
type H373 = :* (:* D8 D8) D3
type D883 = :* (:* D8 D8) D3
type O1563 = :* (:* D8 D8) D3
type B1101110011 = :* (:* D8 D8) D3
type H372 = :* (:* D8 D8) D2
type D882 = :* (:* D8 D8) D2
type O1562 = :* (:* D8 D8) D2
type B1101110010 = :* (:* D8 D8) D2
type H371 = :* (:* D8 D8) D1
type D881 = :* (:* D8 D8) D1
type O1561 = :* (:* D8 D8) D1
type B1101110001 = :* (:* D8 D8) D1
type H370 = :* (:* D8 D8) D0
type D880 = :* (:* D8 D8) D0
type O1560 = :* (:* D8 D8) D0
type B1101110000 = :* (:* D8 D8) D0
type H36F = :* (:* D8 D7) D9
type D879 = :* (:* D8 D7) D9
type O1557 = :* (:* D8 D7) D9
type B1101101111 = :* (:* D8 D7) D9
type H36E = :* (:* D8 D7) D8
type D878 = :* (:* D8 D7) D8
type O1556 = :* (:* D8 D7) D8
type B1101101110 = :* (:* D8 D7) D8
type H36D = :* (:* D8 D7) D7
type D877 = :* (:* D8 D7) D7
type O1555 = :* (:* D8 D7) D7
type B1101101101 = :* (:* D8 D7) D7
type H36C = :* (:* D8 D7) D6
type D876 = :* (:* D8 D7) D6
type O1554 = :* (:* D8 D7) D6
type B1101101100 = :* (:* D8 D7) D6
type H36B = :* (:* D8 D7) D5
type D875 = :* (:* D8 D7) D5
type O1553 = :* (:* D8 D7) D5
type B1101101011 = :* (:* D8 D7) D5
type H36A = :* (:* D8 D7) D4
type D874 = :* (:* D8 D7) D4
type O1552 = :* (:* D8 D7) D4
type B1101101010 = :* (:* D8 D7) D4
type H369 = :* (:* D8 D7) D3
type D873 = :* (:* D8 D7) D3
type O1551 = :* (:* D8 D7) D3
type B1101101001 = :* (:* D8 D7) D3
type H368 = :* (:* D8 D7) D2
type D872 = :* (:* D8 D7) D2
type O1550 = :* (:* D8 D7) D2
type B1101101000 = :* (:* D8 D7) D2
type H367 = :* (:* D8 D7) D1
type D871 = :* (:* D8 D7) D1
type O1547 = :* (:* D8 D7) D1
type B1101100111 = :* (:* D8 D7) D1
type H366 = :* (:* D8 D7) D0
type D870 = :* (:* D8 D7) D0
type O1546 = :* (:* D8 D7) D0
type B1101100110 = :* (:* D8 D7) D0
type H365 = :* (:* D8 D6) D9
type D869 = :* (:* D8 D6) D9
type O1545 = :* (:* D8 D6) D9
type B1101100101 = :* (:* D8 D6) D9
type H364 = :* (:* D8 D6) D8
type D868 = :* (:* D8 D6) D8
type O1544 = :* (:* D8 D6) D8
type B1101100100 = :* (:* D8 D6) D8
type H363 = :* (:* D8 D6) D7
type D867 = :* (:* D8 D6) D7
type O1543 = :* (:* D8 D6) D7
type B1101100011 = :* (:* D8 D6) D7
type H362 = :* (:* D8 D6) D6
type D866 = :* (:* D8 D6) D6
type O1542 = :* (:* D8 D6) D6
type B1101100010 = :* (:* D8 D6) D6
type H361 = :* (:* D8 D6) D5
type D865 = :* (:* D8 D6) D5
type O1541 = :* (:* D8 D6) D5
type B1101100001 = :* (:* D8 D6) D5
type H360 = :* (:* D8 D6) D4
type D864 = :* (:* D8 D6) D4
type O1540 = :* (:* D8 D6) D4
type B1101100000 = :* (:* D8 D6) D4
type H35F = :* (:* D8 D6) D3
type D863 = :* (:* D8 D6) D3
type O1537 = :* (:* D8 D6) D3
type B1101011111 = :* (:* D8 D6) D3
type H35E = :* (:* D8 D6) D2
type D862 = :* (:* D8 D6) D2
type O1536 = :* (:* D8 D6) D2
type B1101011110 = :* (:* D8 D6) D2
type H35D = :* (:* D8 D6) D1
type D861 = :* (:* D8 D6) D1
type O1535 = :* (:* D8 D6) D1
type B1101011101 = :* (:* D8 D6) D1
type H35C = :* (:* D8 D6) D0
type D860 = :* (:* D8 D6) D0
type O1534 = :* (:* D8 D6) D0
type B1101011100 = :* (:* D8 D6) D0
type H35B = :* (:* D8 D5) D9
type D859 = :* (:* D8 D5) D9
type O1533 = :* (:* D8 D5) D9
type B1101011011 = :* (:* D8 D5) D9
type H35A = :* (:* D8 D5) D8
type D858 = :* (:* D8 D5) D8
type O1532 = :* (:* D8 D5) D8
type B1101011010 = :* (:* D8 D5) D8
type H359 = :* (:* D8 D5) D7
type D857 = :* (:* D8 D5) D7
type O1531 = :* (:* D8 D5) D7
type B1101011001 = :* (:* D8 D5) D7
type H358 = :* (:* D8 D5) D6
type D856 = :* (:* D8 D5) D6
type O1530 = :* (:* D8 D5) D6
type B1101011000 = :* (:* D8 D5) D6
type H357 = :* (:* D8 D5) D5
type D855 = :* (:* D8 D5) D5
type O1527 = :* (:* D8 D5) D5
type B1101010111 = :* (:* D8 D5) D5
type H356 = :* (:* D8 D5) D4
type D854 = :* (:* D8 D5) D4
type O1526 = :* (:* D8 D5) D4
type B1101010110 = :* (:* D8 D5) D4
type H355 = :* (:* D8 D5) D3
type D853 = :* (:* D8 D5) D3
type O1525 = :* (:* D8 D5) D3
type B1101010101 = :* (:* D8 D5) D3
type H354 = :* (:* D8 D5) D2
type D852 = :* (:* D8 D5) D2
type O1524 = :* (:* D8 D5) D2
type B1101010100 = :* (:* D8 D5) D2
type H353 = :* (:* D8 D5) D1
type D851 = :* (:* D8 D5) D1
type O1523 = :* (:* D8 D5) D1
type B1101010011 = :* (:* D8 D5) D1
type H352 = :* (:* D8 D5) D0
type D850 = :* (:* D8 D5) D0
type O1522 = :* (:* D8 D5) D0
type B1101010010 = :* (:* D8 D5) D0
type H351 = :* (:* D8 D4) D9
type D849 = :* (:* D8 D4) D9
type O1521 = :* (:* D8 D4) D9
type B1101010001 = :* (:* D8 D4) D9
type H350 = :* (:* D8 D4) D8
type D848 = :* (:* D8 D4) D8
type O1520 = :* (:* D8 D4) D8
type B1101010000 = :* (:* D8 D4) D8
type H34F = :* (:* D8 D4) D7
type D847 = :* (:* D8 D4) D7
type O1517 = :* (:* D8 D4) D7
type B1101001111 = :* (:* D8 D4) D7
type H34E = :* (:* D8 D4) D6
type D846 = :* (:* D8 D4) D6
type O1516 = :* (:* D8 D4) D6
type B1101001110 = :* (:* D8 D4) D6
type H34D = :* (:* D8 D4) D5
type D845 = :* (:* D8 D4) D5
type O1515 = :* (:* D8 D4) D5
type B1101001101 = :* (:* D8 D4) D5
type H34C = :* (:* D8 D4) D4
type D844 = :* (:* D8 D4) D4
type O1514 = :* (:* D8 D4) D4
type B1101001100 = :* (:* D8 D4) D4
type H34B = :* (:* D8 D4) D3
type D843 = :* (:* D8 D4) D3
type O1513 = :* (:* D8 D4) D3
type B1101001011 = :* (:* D8 D4) D3
type H34A = :* (:* D8 D4) D2
type D842 = :* (:* D8 D4) D2
type O1512 = :* (:* D8 D4) D2
type B1101001010 = :* (:* D8 D4) D2
type H349 = :* (:* D8 D4) D1
type D841 = :* (:* D8 D4) D1
type O1511 = :* (:* D8 D4) D1
type B1101001001 = :* (:* D8 D4) D1
type H348 = :* (:* D8 D4) D0
type D840 = :* (:* D8 D4) D0
type O1510 = :* (:* D8 D4) D0
type B1101001000 = :* (:* D8 D4) D0
type H347 = :* (:* D8 D3) D9
type D839 = :* (:* D8 D3) D9
type O1507 = :* (:* D8 D3) D9
type B1101000111 = :* (:* D8 D3) D9
type H346 = :* (:* D8 D3) D8
type D838 = :* (:* D8 D3) D8
type O1506 = :* (:* D8 D3) D8
type B1101000110 = :* (:* D8 D3) D8
type H345 = :* (:* D8 D3) D7
type D837 = :* (:* D8 D3) D7
type O1505 = :* (:* D8 D3) D7
type B1101000101 = :* (:* D8 D3) D7
type H344 = :* (:* D8 D3) D6
type D836 = :* (:* D8 D3) D6
type O1504 = :* (:* D8 D3) D6
type B1101000100 = :* (:* D8 D3) D6
type H343 = :* (:* D8 D3) D5
type D835 = :* (:* D8 D3) D5
type O1503 = :* (:* D8 D3) D5
type B1101000011 = :* (:* D8 D3) D5
type H342 = :* (:* D8 D3) D4
type D834 = :* (:* D8 D3) D4
type O1502 = :* (:* D8 D3) D4
type B1101000010 = :* (:* D8 D3) D4
type H341 = :* (:* D8 D3) D3
type D833 = :* (:* D8 D3) D3
type O1501 = :* (:* D8 D3) D3
type B1101000001 = :* (:* D8 D3) D3
type H340 = :* (:* D8 D3) D2
type D832 = :* (:* D8 D3) D2
type O1500 = :* (:* D8 D3) D2
type B1101000000 = :* (:* D8 D3) D2
type H33F = :* (:* D8 D3) D1
type D831 = :* (:* D8 D3) D1
type O1477 = :* (:* D8 D3) D1
type B1100111111 = :* (:* D8 D3) D1
type H33E = :* (:* D8 D3) D0
type D830 = :* (:* D8 D3) D0
type O1476 = :* (:* D8 D3) D0
type B1100111110 = :* (:* D8 D3) D0
type H33D = :* (:* D8 D2) D9
type D829 = :* (:* D8 D2) D9
type O1475 = :* (:* D8 D2) D9
type B1100111101 = :* (:* D8 D2) D9
type H33C = :* (:* D8 D2) D8
type D828 = :* (:* D8 D2) D8
type O1474 = :* (:* D8 D2) D8
type B1100111100 = :* (:* D8 D2) D8
type H33B = :* (:* D8 D2) D7
type D827 = :* (:* D8 D2) D7
type O1473 = :* (:* D8 D2) D7
type B1100111011 = :* (:* D8 D2) D7
type H33A = :* (:* D8 D2) D6
type D826 = :* (:* D8 D2) D6
type O1472 = :* (:* D8 D2) D6
type B1100111010 = :* (:* D8 D2) D6
type H339 = :* (:* D8 D2) D5
type D825 = :* (:* D8 D2) D5
type O1471 = :* (:* D8 D2) D5
type B1100111001 = :* (:* D8 D2) D5
type H338 = :* (:* D8 D2) D4
type D824 = :* (:* D8 D2) D4
type O1470 = :* (:* D8 D2) D4
type B1100111000 = :* (:* D8 D2) D4
type H337 = :* (:* D8 D2) D3
type D823 = :* (:* D8 D2) D3
type O1467 = :* (:* D8 D2) D3
type B1100110111 = :* (:* D8 D2) D3
type H336 = :* (:* D8 D2) D2
type D822 = :* (:* D8 D2) D2
type O1466 = :* (:* D8 D2) D2
type B1100110110 = :* (:* D8 D2) D2
type H335 = :* (:* D8 D2) D1
type D821 = :* (:* D8 D2) D1
type O1465 = :* (:* D8 D2) D1
type B1100110101 = :* (:* D8 D2) D1
type H334 = :* (:* D8 D2) D0
type D820 = :* (:* D8 D2) D0
type O1464 = :* (:* D8 D2) D0
type B1100110100 = :* (:* D8 D2) D0
type H333 = :* (:* D8 D1) D9
type D819 = :* (:* D8 D1) D9
type O1463 = :* (:* D8 D1) D9
type B1100110011 = :* (:* D8 D1) D9
type H332 = :* (:* D8 D1) D8
type D818 = :* (:* D8 D1) D8
type O1462 = :* (:* D8 D1) D8
type B1100110010 = :* (:* D8 D1) D8
type H331 = :* (:* D8 D1) D7
type D817 = :* (:* D8 D1) D7
type O1461 = :* (:* D8 D1) D7
type B1100110001 = :* (:* D8 D1) D7
type H330 = :* (:* D8 D1) D6
type D816 = :* (:* D8 D1) D6
type O1460 = :* (:* D8 D1) D6
type B1100110000 = :* (:* D8 D1) D6
type H32F = :* (:* D8 D1) D5
type D815 = :* (:* D8 D1) D5
type O1457 = :* (:* D8 D1) D5
type B1100101111 = :* (:* D8 D1) D5
type H32E = :* (:* D8 D1) D4
type D814 = :* (:* D8 D1) D4
type O1456 = :* (:* D8 D1) D4
type B1100101110 = :* (:* D8 D1) D4
type H32D = :* (:* D8 D1) D3
type D813 = :* (:* D8 D1) D3
type O1455 = :* (:* D8 D1) D3
type B1100101101 = :* (:* D8 D1) D3
type H32C = :* (:* D8 D1) D2
type D812 = :* (:* D8 D1) D2
type O1454 = :* (:* D8 D1) D2
type B1100101100 = :* (:* D8 D1) D2
type H32B = :* (:* D8 D1) D1
type D811 = :* (:* D8 D1) D1
type O1453 = :* (:* D8 D1) D1
type B1100101011 = :* (:* D8 D1) D1
type H32A = :* (:* D8 D1) D0
type D810 = :* (:* D8 D1) D0
type O1452 = :* (:* D8 D1) D0
type B1100101010 = :* (:* D8 D1) D0
type H329 = :* (:* D8 D0) D9
type D809 = :* (:* D8 D0) D9
type O1451 = :* (:* D8 D0) D9
type B1100101001 = :* (:* D8 D0) D9
type H328 = :* (:* D8 D0) D8
type D808 = :* (:* D8 D0) D8
type O1450 = :* (:* D8 D0) D8
type B1100101000 = :* (:* D8 D0) D8
type H327 = :* (:* D8 D0) D7
type D807 = :* (:* D8 D0) D7
type O1447 = :* (:* D8 D0) D7
type B1100100111 = :* (:* D8 D0) D7
type H326 = :* (:* D8 D0) D6
type D806 = :* (:* D8 D0) D6
type O1446 = :* (:* D8 D0) D6
type B1100100110 = :* (:* D8 D0) D6
type H325 = :* (:* D8 D0) D5
type D805 = :* (:* D8 D0) D5
type O1445 = :* (:* D8 D0) D5
type B1100100101 = :* (:* D8 D0) D5
type H324 = :* (:* D8 D0) D4
type D804 = :* (:* D8 D0) D4
type O1444 = :* (:* D8 D0) D4
type B1100100100 = :* (:* D8 D0) D4
type H323 = :* (:* D8 D0) D3
type D803 = :* (:* D8 D0) D3
type O1443 = :* (:* D8 D0) D3
type B1100100011 = :* (:* D8 D0) D3
type H322 = :* (:* D8 D0) D2
type D802 = :* (:* D8 D0) D2
type O1442 = :* (:* D8 D0) D2
type B1100100010 = :* (:* D8 D0) D2
type H321 = :* (:* D8 D0) D1
type D801 = :* (:* D8 D0) D1
type O1441 = :* (:* D8 D0) D1
type B1100100001 = :* (:* D8 D0) D1
type H320 = :* (:* D8 D0) D0
type D800 = :* (:* D8 D0) D0
type O1440 = :* (:* D8 D0) D0
type B1100100000 = :* (:* D8 D0) D0
type H31F = :* (:* D7 D9) D9
type D799 = :* (:* D7 D9) D9
type O1437 = :* (:* D7 D9) D9
type B1100011111 = :* (:* D7 D9) D9
type H31E = :* (:* D7 D9) D8
type D798 = :* (:* D7 D9) D8
type O1436 = :* (:* D7 D9) D8
type B1100011110 = :* (:* D7 D9) D8
type H31D = :* (:* D7 D9) D7
type D797 = :* (:* D7 D9) D7
type O1435 = :* (:* D7 D9) D7
type B1100011101 = :* (:* D7 D9) D7
type H31C = :* (:* D7 D9) D6
type D796 = :* (:* D7 D9) D6
type O1434 = :* (:* D7 D9) D6
type B1100011100 = :* (:* D7 D9) D6
type H31B = :* (:* D7 D9) D5
type D795 = :* (:* D7 D9) D5
type O1433 = :* (:* D7 D9) D5
type B1100011011 = :* (:* D7 D9) D5
type H31A = :* (:* D7 D9) D4
type D794 = :* (:* D7 D9) D4
type O1432 = :* (:* D7 D9) D4
type B1100011010 = :* (:* D7 D9) D4
type H319 = :* (:* D7 D9) D3
type D793 = :* (:* D7 D9) D3
type O1431 = :* (:* D7 D9) D3
type B1100011001 = :* (:* D7 D9) D3
type H318 = :* (:* D7 D9) D2
type D792 = :* (:* D7 D9) D2
type O1430 = :* (:* D7 D9) D2
type B1100011000 = :* (:* D7 D9) D2
type H317 = :* (:* D7 D9) D1
type D791 = :* (:* D7 D9) D1
type O1427 = :* (:* D7 D9) D1
type B1100010111 = :* (:* D7 D9) D1
type H316 = :* (:* D7 D9) D0
type D790 = :* (:* D7 D9) D0
type O1426 = :* (:* D7 D9) D0
type B1100010110 = :* (:* D7 D9) D0
type H315 = :* (:* D7 D8) D9
type D789 = :* (:* D7 D8) D9
type O1425 = :* (:* D7 D8) D9
type B1100010101 = :* (:* D7 D8) D9
type H314 = :* (:* D7 D8) D8
type D788 = :* (:* D7 D8) D8
type O1424 = :* (:* D7 D8) D8
type B1100010100 = :* (:* D7 D8) D8
type H313 = :* (:* D7 D8) D7
type D787 = :* (:* D7 D8) D7
type O1423 = :* (:* D7 D8) D7
type B1100010011 = :* (:* D7 D8) D7
type H312 = :* (:* D7 D8) D6
type D786 = :* (:* D7 D8) D6
type O1422 = :* (:* D7 D8) D6
type B1100010010 = :* (:* D7 D8) D6
type H311 = :* (:* D7 D8) D5
type D785 = :* (:* D7 D8) D5
type O1421 = :* (:* D7 D8) D5
type B1100010001 = :* (:* D7 D8) D5
type H310 = :* (:* D7 D8) D4
type D784 = :* (:* D7 D8) D4
type O1420 = :* (:* D7 D8) D4
type B1100010000 = :* (:* D7 D8) D4
type H30F = :* (:* D7 D8) D3
type D783 = :* (:* D7 D8) D3
type O1417 = :* (:* D7 D8) D3
type B1100001111 = :* (:* D7 D8) D3
type H30E = :* (:* D7 D8) D2
type D782 = :* (:* D7 D8) D2
type O1416 = :* (:* D7 D8) D2
type B1100001110 = :* (:* D7 D8) D2
type H30D = :* (:* D7 D8) D1
type D781 = :* (:* D7 D8) D1
type O1415 = :* (:* D7 D8) D1
type B1100001101 = :* (:* D7 D8) D1
type H30C = :* (:* D7 D8) D0
type D780 = :* (:* D7 D8) D0
type O1414 = :* (:* D7 D8) D0
type B1100001100 = :* (:* D7 D8) D0
type H30B = :* (:* D7 D7) D9
type D779 = :* (:* D7 D7) D9
type O1413 = :* (:* D7 D7) D9
type B1100001011 = :* (:* D7 D7) D9
type H30A = :* (:* D7 D7) D8
type D778 = :* (:* D7 D7) D8
type O1412 = :* (:* D7 D7) D8
type B1100001010 = :* (:* D7 D7) D8
type H309 = :* (:* D7 D7) D7
type D777 = :* (:* D7 D7) D7
type O1411 = :* (:* D7 D7) D7
type B1100001001 = :* (:* D7 D7) D7
type H308 = :* (:* D7 D7) D6
type D776 = :* (:* D7 D7) D6
type O1410 = :* (:* D7 D7) D6
type B1100001000 = :* (:* D7 D7) D6
type H307 = :* (:* D7 D7) D5
type D775 = :* (:* D7 D7) D5
type O1407 = :* (:* D7 D7) D5
type B1100000111 = :* (:* D7 D7) D5
type H306 = :* (:* D7 D7) D4
type D774 = :* (:* D7 D7) D4
type O1406 = :* (:* D7 D7) D4
type B1100000110 = :* (:* D7 D7) D4
type H305 = :* (:* D7 D7) D3
type D773 = :* (:* D7 D7) D3
type O1405 = :* (:* D7 D7) D3
type B1100000101 = :* (:* D7 D7) D3
type H304 = :* (:* D7 D7) D2
type D772 = :* (:* D7 D7) D2
type O1404 = :* (:* D7 D7) D2
type B1100000100 = :* (:* D7 D7) D2
type H303 = :* (:* D7 D7) D1
type D771 = :* (:* D7 D7) D1
type O1403 = :* (:* D7 D7) D1
type B1100000011 = :* (:* D7 D7) D1
type H302 = :* (:* D7 D7) D0
type D770 = :* (:* D7 D7) D0
type O1402 = :* (:* D7 D7) D0
type B1100000010 = :* (:* D7 D7) D0
type H301 = :* (:* D7 D6) D9
type D769 = :* (:* D7 D6) D9
type O1401 = :* (:* D7 D6) D9
type B1100000001 = :* (:* D7 D6) D9
type H300 = :* (:* D7 D6) D8
type D768 = :* (:* D7 D6) D8
type O1400 = :* (:* D7 D6) D8
type B1100000000 = :* (:* D7 D6) D8
type H2FF = :* (:* D7 D6) D7
type D767 = :* (:* D7 D6) D7
type O1377 = :* (:* D7 D6) D7
type B1011111111 = :* (:* D7 D6) D7
type H2FE = :* (:* D7 D6) D6
type D766 = :* (:* D7 D6) D6
type O1376 = :* (:* D7 D6) D6
type B1011111110 = :* (:* D7 D6) D6
type H2FD = :* (:* D7 D6) D5
type D765 = :* (:* D7 D6) D5
type O1375 = :* (:* D7 D6) D5
type B1011111101 = :* (:* D7 D6) D5
type H2FC = :* (:* D7 D6) D4
type D764 = :* (:* D7 D6) D4
type O1374 = :* (:* D7 D6) D4
type B1011111100 = :* (:* D7 D6) D4
type H2FB = :* (:* D7 D6) D3
type D763 = :* (:* D7 D6) D3
type O1373 = :* (:* D7 D6) D3
type B1011111011 = :* (:* D7 D6) D3
type H2FA = :* (:* D7 D6) D2
type D762 = :* (:* D7 D6) D2
type O1372 = :* (:* D7 D6) D2
type B1011111010 = :* (:* D7 D6) D2
type H2F9 = :* (:* D7 D6) D1
type D761 = :* (:* D7 D6) D1
type O1371 = :* (:* D7 D6) D1
type B1011111001 = :* (:* D7 D6) D1
type H2F8 = :* (:* D7 D6) D0
type D760 = :* (:* D7 D6) D0
type O1370 = :* (:* D7 D6) D0
type B1011111000 = :* (:* D7 D6) D0
type H2F7 = :* (:* D7 D5) D9
type D759 = :* (:* D7 D5) D9
type O1367 = :* (:* D7 D5) D9
type B1011110111 = :* (:* D7 D5) D9
type H2F6 = :* (:* D7 D5) D8
type D758 = :* (:* D7 D5) D8
type O1366 = :* (:* D7 D5) D8
type B1011110110 = :* (:* D7 D5) D8
type H2F5 = :* (:* D7 D5) D7
type D757 = :* (:* D7 D5) D7
type O1365 = :* (:* D7 D5) D7
type B1011110101 = :* (:* D7 D5) D7
type H2F4 = :* (:* D7 D5) D6
type D756 = :* (:* D7 D5) D6
type O1364 = :* (:* D7 D5) D6
type B1011110100 = :* (:* D7 D5) D6
type H2F3 = :* (:* D7 D5) D5
type D755 = :* (:* D7 D5) D5
type O1363 = :* (:* D7 D5) D5
type B1011110011 = :* (:* D7 D5) D5
type H2F2 = :* (:* D7 D5) D4
type D754 = :* (:* D7 D5) D4
type O1362 = :* (:* D7 D5) D4
type B1011110010 = :* (:* D7 D5) D4
type H2F1 = :* (:* D7 D5) D3
type D753 = :* (:* D7 D5) D3
type O1361 = :* (:* D7 D5) D3
type B1011110001 = :* (:* D7 D5) D3
type H2F0 = :* (:* D7 D5) D2
type D752 = :* (:* D7 D5) D2
type O1360 = :* (:* D7 D5) D2
type B1011110000 = :* (:* D7 D5) D2
type H2EF = :* (:* D7 D5) D1
type D751 = :* (:* D7 D5) D1
type O1357 = :* (:* D7 D5) D1
type B1011101111 = :* (:* D7 D5) D1
type H2EE = :* (:* D7 D5) D0
type D750 = :* (:* D7 D5) D0
type O1356 = :* (:* D7 D5) D0
type B1011101110 = :* (:* D7 D5) D0
type H2ED = :* (:* D7 D4) D9
type D749 = :* (:* D7 D4) D9
type O1355 = :* (:* D7 D4) D9
type B1011101101 = :* (:* D7 D4) D9
type H2EC = :* (:* D7 D4) D8
type D748 = :* (:* D7 D4) D8
type O1354 = :* (:* D7 D4) D8
type B1011101100 = :* (:* D7 D4) D8
type H2EB = :* (:* D7 D4) D7
type D747 = :* (:* D7 D4) D7
type O1353 = :* (:* D7 D4) D7
type B1011101011 = :* (:* D7 D4) D7
type H2EA = :* (:* D7 D4) D6
type D746 = :* (:* D7 D4) D6
type O1352 = :* (:* D7 D4) D6
type B1011101010 = :* (:* D7 D4) D6
type H2E9 = :* (:* D7 D4) D5
type D745 = :* (:* D7 D4) D5
type O1351 = :* (:* D7 D4) D5
type B1011101001 = :* (:* D7 D4) D5
type H2E8 = :* (:* D7 D4) D4
type D744 = :* (:* D7 D4) D4
type O1350 = :* (:* D7 D4) D4
type B1011101000 = :* (:* D7 D4) D4
type H2E7 = :* (:* D7 D4) D3
type D743 = :* (:* D7 D4) D3
type O1347 = :* (:* D7 D4) D3
type B1011100111 = :* (:* D7 D4) D3
type H2E6 = :* (:* D7 D4) D2
type D742 = :* (:* D7 D4) D2
type O1346 = :* (:* D7 D4) D2
type B1011100110 = :* (:* D7 D4) D2
type H2E5 = :* (:* D7 D4) D1
type D741 = :* (:* D7 D4) D1
type O1345 = :* (:* D7 D4) D1
type B1011100101 = :* (:* D7 D4) D1
type H2E4 = :* (:* D7 D4) D0
type D740 = :* (:* D7 D4) D0
type O1344 = :* (:* D7 D4) D0
type B1011100100 = :* (:* D7 D4) D0
type H2E3 = :* (:* D7 D3) D9
type D739 = :* (:* D7 D3) D9
type O1343 = :* (:* D7 D3) D9
type B1011100011 = :* (:* D7 D3) D9
type H2E2 = :* (:* D7 D3) D8
type D738 = :* (:* D7 D3) D8
type O1342 = :* (:* D7 D3) D8
type B1011100010 = :* (:* D7 D3) D8
type H2E1 = :* (:* D7 D3) D7
type D737 = :* (:* D7 D3) D7
type O1341 = :* (:* D7 D3) D7
type B1011100001 = :* (:* D7 D3) D7
type H2E0 = :* (:* D7 D3) D6
type D736 = :* (:* D7 D3) D6
type O1340 = :* (:* D7 D3) D6
type B1011100000 = :* (:* D7 D3) D6
type H2DF = :* (:* D7 D3) D5
type D735 = :* (:* D7 D3) D5
type O1337 = :* (:* D7 D3) D5
type B1011011111 = :* (:* D7 D3) D5
type H2DE = :* (:* D7 D3) D4
type D734 = :* (:* D7 D3) D4
type O1336 = :* (:* D7 D3) D4
type B1011011110 = :* (:* D7 D3) D4
type H2DD = :* (:* D7 D3) D3
type D733 = :* (:* D7 D3) D3
type O1335 = :* (:* D7 D3) D3
type B1011011101 = :* (:* D7 D3) D3
type H2DC = :* (:* D7 D3) D2
type D732 = :* (:* D7 D3) D2
type O1334 = :* (:* D7 D3) D2
type B1011011100 = :* (:* D7 D3) D2
type H2DB = :* (:* D7 D3) D1
type D731 = :* (:* D7 D3) D1
type O1333 = :* (:* D7 D3) D1
type B1011011011 = :* (:* D7 D3) D1
type H2DA = :* (:* D7 D3) D0
type D730 = :* (:* D7 D3) D0
type O1332 = :* (:* D7 D3) D0
type B1011011010 = :* (:* D7 D3) D0
type H2D9 = :* (:* D7 D2) D9
type D729 = :* (:* D7 D2) D9
type O1331 = :* (:* D7 D2) D9
type B1011011001 = :* (:* D7 D2) D9
type H2D8 = :* (:* D7 D2) D8
type D728 = :* (:* D7 D2) D8
type O1330 = :* (:* D7 D2) D8
type B1011011000 = :* (:* D7 D2) D8
type H2D7 = :* (:* D7 D2) D7
type D727 = :* (:* D7 D2) D7
type O1327 = :* (:* D7 D2) D7
type B1011010111 = :* (:* D7 D2) D7
type H2D6 = :* (:* D7 D2) D6
type D726 = :* (:* D7 D2) D6
type O1326 = :* (:* D7 D2) D6
type B1011010110 = :* (:* D7 D2) D6
type H2D5 = :* (:* D7 D2) D5
type D725 = :* (:* D7 D2) D5
type O1325 = :* (:* D7 D2) D5
type B1011010101 = :* (:* D7 D2) D5
type H2D4 = :* (:* D7 D2) D4
type D724 = :* (:* D7 D2) D4
type O1324 = :* (:* D7 D2) D4
type B1011010100 = :* (:* D7 D2) D4
type H2D3 = :* (:* D7 D2) D3
type D723 = :* (:* D7 D2) D3
type O1323 = :* (:* D7 D2) D3
type B1011010011 = :* (:* D7 D2) D3
type H2D2 = :* (:* D7 D2) D2
type D722 = :* (:* D7 D2) D2
type O1322 = :* (:* D7 D2) D2
type B1011010010 = :* (:* D7 D2) D2
type H2D1 = :* (:* D7 D2) D1
type D721 = :* (:* D7 D2) D1
type O1321 = :* (:* D7 D2) D1
type B1011010001 = :* (:* D7 D2) D1
type H2D0 = :* (:* D7 D2) D0
type D720 = :* (:* D7 D2) D0
type O1320 = :* (:* D7 D2) D0
type B1011010000 = :* (:* D7 D2) D0
type H2CF = :* (:* D7 D1) D9
type D719 = :* (:* D7 D1) D9
type O1317 = :* (:* D7 D1) D9
type B1011001111 = :* (:* D7 D1) D9
type H2CE = :* (:* D7 D1) D8
type D718 = :* (:* D7 D1) D8
type O1316 = :* (:* D7 D1) D8
type B1011001110 = :* (:* D7 D1) D8
type H2CD = :* (:* D7 D1) D7
type D717 = :* (:* D7 D1) D7
type O1315 = :* (:* D7 D1) D7
type B1011001101 = :* (:* D7 D1) D7
type H2CC = :* (:* D7 D1) D6
type D716 = :* (:* D7 D1) D6
type O1314 = :* (:* D7 D1) D6
type B1011001100 = :* (:* D7 D1) D6
type H2CB = :* (:* D7 D1) D5
type D715 = :* (:* D7 D1) D5
type O1313 = :* (:* D7 D1) D5
type B1011001011 = :* (:* D7 D1) D5
type H2CA = :* (:* D7 D1) D4
type D714 = :* (:* D7 D1) D4
type O1312 = :* (:* D7 D1) D4
type B1011001010 = :* (:* D7 D1) D4
type H2C9 = :* (:* D7 D1) D3
type D713 = :* (:* D7 D1) D3
type O1311 = :* (:* D7 D1) D3
type B1011001001 = :* (:* D7 D1) D3
type H2C8 = :* (:* D7 D1) D2
type D712 = :* (:* D7 D1) D2
type O1310 = :* (:* D7 D1) D2
type B1011001000 = :* (:* D7 D1) D2
type H2C7 = :* (:* D7 D1) D1
type D711 = :* (:* D7 D1) D1
type O1307 = :* (:* D7 D1) D1
type B1011000111 = :* (:* D7 D1) D1
type H2C6 = :* (:* D7 D1) D0
type D710 = :* (:* D7 D1) D0
type O1306 = :* (:* D7 D1) D0
type B1011000110 = :* (:* D7 D1) D0
type H2C5 = :* (:* D7 D0) D9
type D709 = :* (:* D7 D0) D9
type O1305 = :* (:* D7 D0) D9
type B1011000101 = :* (:* D7 D0) D9
type H2C4 = :* (:* D7 D0) D8
type D708 = :* (:* D7 D0) D8
type O1304 = :* (:* D7 D0) D8
type B1011000100 = :* (:* D7 D0) D8
type H2C3 = :* (:* D7 D0) D7
type D707 = :* (:* D7 D0) D7
type O1303 = :* (:* D7 D0) D7
type B1011000011 = :* (:* D7 D0) D7
type H2C2 = :* (:* D7 D0) D6
type D706 = :* (:* D7 D0) D6
type O1302 = :* (:* D7 D0) D6
type B1011000010 = :* (:* D7 D0) D6
type H2C1 = :* (:* D7 D0) D5
type D705 = :* (:* D7 D0) D5
type O1301 = :* (:* D7 D0) D5
type B1011000001 = :* (:* D7 D0) D5
type H2C0 = :* (:* D7 D0) D4
type D704 = :* (:* D7 D0) D4
type O1300 = :* (:* D7 D0) D4
type B1011000000 = :* (:* D7 D0) D4
type H2BF = :* (:* D7 D0) D3
type D703 = :* (:* D7 D0) D3
type O1277 = :* (:* D7 D0) D3
type B1010111111 = :* (:* D7 D0) D3
type H2BE = :* (:* D7 D0) D2
type D702 = :* (:* D7 D0) D2
type O1276 = :* (:* D7 D0) D2
type B1010111110 = :* (:* D7 D0) D2
type H2BD = :* (:* D7 D0) D1
type D701 = :* (:* D7 D0) D1
type O1275 = :* (:* D7 D0) D1
type B1010111101 = :* (:* D7 D0) D1
type H2BC = :* (:* D7 D0) D0
type D700 = :* (:* D7 D0) D0
type O1274 = :* (:* D7 D0) D0
type B1010111100 = :* (:* D7 D0) D0
type H2BB = :* (:* D6 D9) D9
type D699 = :* (:* D6 D9) D9
type O1273 = :* (:* D6 D9) D9
type B1010111011 = :* (:* D6 D9) D9
type H2BA = :* (:* D6 D9) D8
type D698 = :* (:* D6 D9) D8
type O1272 = :* (:* D6 D9) D8
type B1010111010 = :* (:* D6 D9) D8
type H2B9 = :* (:* D6 D9) D7
type D697 = :* (:* D6 D9) D7
type O1271 = :* (:* D6 D9) D7
type B1010111001 = :* (:* D6 D9) D7
type H2B8 = :* (:* D6 D9) D6
type D696 = :* (:* D6 D9) D6
type O1270 = :* (:* D6 D9) D6
type B1010111000 = :* (:* D6 D9) D6
type H2B7 = :* (:* D6 D9) D5
type D695 = :* (:* D6 D9) D5
type O1267 = :* (:* D6 D9) D5
type B1010110111 = :* (:* D6 D9) D5
type H2B6 = :* (:* D6 D9) D4
type D694 = :* (:* D6 D9) D4
type O1266 = :* (:* D6 D9) D4
type B1010110110 = :* (:* D6 D9) D4
type H2B5 = :* (:* D6 D9) D3
type D693 = :* (:* D6 D9) D3
type O1265 = :* (:* D6 D9) D3
type B1010110101 = :* (:* D6 D9) D3
type H2B4 = :* (:* D6 D9) D2
type D692 = :* (:* D6 D9) D2
type O1264 = :* (:* D6 D9) D2
type B1010110100 = :* (:* D6 D9) D2
type H2B3 = :* (:* D6 D9) D1
type D691 = :* (:* D6 D9) D1
type O1263 = :* (:* D6 D9) D1
type B1010110011 = :* (:* D6 D9) D1
type H2B2 = :* (:* D6 D9) D0
type D690 = :* (:* D6 D9) D0
type O1262 = :* (:* D6 D9) D0
type B1010110010 = :* (:* D6 D9) D0
type H2B1 = :* (:* D6 D8) D9
type D689 = :* (:* D6 D8) D9
type O1261 = :* (:* D6 D8) D9
type B1010110001 = :* (:* D6 D8) D9
type H2B0 = :* (:* D6 D8) D8
type D688 = :* (:* D6 D8) D8
type O1260 = :* (:* D6 D8) D8
type B1010110000 = :* (:* D6 D8) D8
type H2AF = :* (:* D6 D8) D7
type D687 = :* (:* D6 D8) D7
type O1257 = :* (:* D6 D8) D7
type B1010101111 = :* (:* D6 D8) D7
type H2AE = :* (:* D6 D8) D6
type D686 = :* (:* D6 D8) D6
type O1256 = :* (:* D6 D8) D6
type B1010101110 = :* (:* D6 D8) D6
type H2AD = :* (:* D6 D8) D5
type D685 = :* (:* D6 D8) D5
type O1255 = :* (:* D6 D8) D5
type B1010101101 = :* (:* D6 D8) D5
type H2AC = :* (:* D6 D8) D4
type D684 = :* (:* D6 D8) D4
type O1254 = :* (:* D6 D8) D4
type B1010101100 = :* (:* D6 D8) D4
type H2AB = :* (:* D6 D8) D3
type D683 = :* (:* D6 D8) D3
type O1253 = :* (:* D6 D8) D3
type B1010101011 = :* (:* D6 D8) D3
type H2AA = :* (:* D6 D8) D2
type D682 = :* (:* D6 D8) D2
type O1252 = :* (:* D6 D8) D2
type B1010101010 = :* (:* D6 D8) D2
type H2A9 = :* (:* D6 D8) D1
type D681 = :* (:* D6 D8) D1
type O1251 = :* (:* D6 D8) D1
type B1010101001 = :* (:* D6 D8) D1
type H2A8 = :* (:* D6 D8) D0
type D680 = :* (:* D6 D8) D0
type O1250 = :* (:* D6 D8) D0
type B1010101000 = :* (:* D6 D8) D0
type H2A7 = :* (:* D6 D7) D9
type D679 = :* (:* D6 D7) D9
type O1247 = :* (:* D6 D7) D9
type B1010100111 = :* (:* D6 D7) D9
type H2A6 = :* (:* D6 D7) D8
type D678 = :* (:* D6 D7) D8
type O1246 = :* (:* D6 D7) D8
type B1010100110 = :* (:* D6 D7) D8
type H2A5 = :* (:* D6 D7) D7
type D677 = :* (:* D6 D7) D7
type O1245 = :* (:* D6 D7) D7
type B1010100101 = :* (:* D6 D7) D7
type H2A4 = :* (:* D6 D7) D6
type D676 = :* (:* D6 D7) D6
type O1244 = :* (:* D6 D7) D6
type B1010100100 = :* (:* D6 D7) D6
type H2A3 = :* (:* D6 D7) D5
type D675 = :* (:* D6 D7) D5
type O1243 = :* (:* D6 D7) D5
type B1010100011 = :* (:* D6 D7) D5
type H2A2 = :* (:* D6 D7) D4
type D674 = :* (:* D6 D7) D4
type O1242 = :* (:* D6 D7) D4
type B1010100010 = :* (:* D6 D7) D4
type H2A1 = :* (:* D6 D7) D3
type D673 = :* (:* D6 D7) D3
type O1241 = :* (:* D6 D7) D3
type B1010100001 = :* (:* D6 D7) D3
type H2A0 = :* (:* D6 D7) D2
type D672 = :* (:* D6 D7) D2
type O1240 = :* (:* D6 D7) D2
type B1010100000 = :* (:* D6 D7) D2
type H29F = :* (:* D6 D7) D1
type D671 = :* (:* D6 D7) D1
type O1237 = :* (:* D6 D7) D1
type B1010011111 = :* (:* D6 D7) D1
type H29E = :* (:* D6 D7) D0
type D670 = :* (:* D6 D7) D0
type O1236 = :* (:* D6 D7) D0
type B1010011110 = :* (:* D6 D7) D0
type H29D = :* (:* D6 D6) D9
type D669 = :* (:* D6 D6) D9
type O1235 = :* (:* D6 D6) D9
type B1010011101 = :* (:* D6 D6) D9
type H29C = :* (:* D6 D6) D8
type D668 = :* (:* D6 D6) D8
type O1234 = :* (:* D6 D6) D8
type B1010011100 = :* (:* D6 D6) D8
type H29B = :* (:* D6 D6) D7
type D667 = :* (:* D6 D6) D7
type O1233 = :* (:* D6 D6) D7
type B1010011011 = :* (:* D6 D6) D7
type H29A = :* (:* D6 D6) D6
type D666 = :* (:* D6 D6) D6
type O1232 = :* (:* D6 D6) D6
type B1010011010 = :* (:* D6 D6) D6
type H299 = :* (:* D6 D6) D5
type D665 = :* (:* D6 D6) D5
type O1231 = :* (:* D6 D6) D5
type B1010011001 = :* (:* D6 D6) D5
type H298 = :* (:* D6 D6) D4
type D664 = :* (:* D6 D6) D4
type O1230 = :* (:* D6 D6) D4
type B1010011000 = :* (:* D6 D6) D4
type H297 = :* (:* D6 D6) D3
type D663 = :* (:* D6 D6) D3
type O1227 = :* (:* D6 D6) D3
type B1010010111 = :* (:* D6 D6) D3
type H296 = :* (:* D6 D6) D2
type D662 = :* (:* D6 D6) D2
type O1226 = :* (:* D6 D6) D2
type B1010010110 = :* (:* D6 D6) D2
type H295 = :* (:* D6 D6) D1
type D661 = :* (:* D6 D6) D1
type O1225 = :* (:* D6 D6) D1
type B1010010101 = :* (:* D6 D6) D1
type H294 = :* (:* D6 D6) D0
type D660 = :* (:* D6 D6) D0
type O1224 = :* (:* D6 D6) D0
type B1010010100 = :* (:* D6 D6) D0
type H293 = :* (:* D6 D5) D9
type D659 = :* (:* D6 D5) D9
type O1223 = :* (:* D6 D5) D9
type B1010010011 = :* (:* D6 D5) D9
type H292 = :* (:* D6 D5) D8
type D658 = :* (:* D6 D5) D8
type O1222 = :* (:* D6 D5) D8
type B1010010010 = :* (:* D6 D5) D8
type H291 = :* (:* D6 D5) D7
type D657 = :* (:* D6 D5) D7
type O1221 = :* (:* D6 D5) D7
type B1010010001 = :* (:* D6 D5) D7
type H290 = :* (:* D6 D5) D6
type D656 = :* (:* D6 D5) D6
type O1220 = :* (:* D6 D5) D6
type B1010010000 = :* (:* D6 D5) D6
type H28F = :* (:* D6 D5) D5
type D655 = :* (:* D6 D5) D5
type O1217 = :* (:* D6 D5) D5
type B1010001111 = :* (:* D6 D5) D5
type H28E = :* (:* D6 D5) D4
type D654 = :* (:* D6 D5) D4
type O1216 = :* (:* D6 D5) D4
type B1010001110 = :* (:* D6 D5) D4
type H28D = :* (:* D6 D5) D3
type D653 = :* (:* D6 D5) D3
type O1215 = :* (:* D6 D5) D3
type B1010001101 = :* (:* D6 D5) D3
type H28C = :* (:* D6 D5) D2
type D652 = :* (:* D6 D5) D2
type O1214 = :* (:* D6 D5) D2
type B1010001100 = :* (:* D6 D5) D2
type H28B = :* (:* D6 D5) D1
type D651 = :* (:* D6 D5) D1
type O1213 = :* (:* D6 D5) D1
type B1010001011 = :* (:* D6 D5) D1
type H28A = :* (:* D6 D5) D0
type D650 = :* (:* D6 D5) D0
type O1212 = :* (:* D6 D5) D0
type B1010001010 = :* (:* D6 D5) D0
type H289 = :* (:* D6 D4) D9
type D649 = :* (:* D6 D4) D9
type O1211 = :* (:* D6 D4) D9
type B1010001001 = :* (:* D6 D4) D9
type H288 = :* (:* D6 D4) D8
type D648 = :* (:* D6 D4) D8
type O1210 = :* (:* D6 D4) D8
type B1010001000 = :* (:* D6 D4) D8
type H287 = :* (:* D6 D4) D7
type D647 = :* (:* D6 D4) D7
type O1207 = :* (:* D6 D4) D7
type B1010000111 = :* (:* D6 D4) D7
type H286 = :* (:* D6 D4) D6
type D646 = :* (:* D6 D4) D6
type O1206 = :* (:* D6 D4) D6
type B1010000110 = :* (:* D6 D4) D6
type H285 = :* (:* D6 D4) D5
type D645 = :* (:* D6 D4) D5
type O1205 = :* (:* D6 D4) D5
type B1010000101 = :* (:* D6 D4) D5
type H284 = :* (:* D6 D4) D4
type D644 = :* (:* D6 D4) D4
type O1204 = :* (:* D6 D4) D4
type B1010000100 = :* (:* D6 D4) D4
type H283 = :* (:* D6 D4) D3
type D643 = :* (:* D6 D4) D3
type O1203 = :* (:* D6 D4) D3
type B1010000011 = :* (:* D6 D4) D3
type H282 = :* (:* D6 D4) D2
type D642 = :* (:* D6 D4) D2
type O1202 = :* (:* D6 D4) D2
type B1010000010 = :* (:* D6 D4) D2
type H281 = :* (:* D6 D4) D1
type D641 = :* (:* D6 D4) D1
type O1201 = :* (:* D6 D4) D1
type B1010000001 = :* (:* D6 D4) D1
type H280 = :* (:* D6 D4) D0
type D640 = :* (:* D6 D4) D0
type O1200 = :* (:* D6 D4) D0
type B1010000000 = :* (:* D6 D4) D0
type H27F = :* (:* D6 D3) D9
type D639 = :* (:* D6 D3) D9
type O1177 = :* (:* D6 D3) D9
type B1001111111 = :* (:* D6 D3) D9
type H27E = :* (:* D6 D3) D8
type D638 = :* (:* D6 D3) D8
type O1176 = :* (:* D6 D3) D8
type B1001111110 = :* (:* D6 D3) D8
type H27D = :* (:* D6 D3) D7
type D637 = :* (:* D6 D3) D7
type O1175 = :* (:* D6 D3) D7
type B1001111101 = :* (:* D6 D3) D7
type H27C = :* (:* D6 D3) D6
type D636 = :* (:* D6 D3) D6
type O1174 = :* (:* D6 D3) D6
type B1001111100 = :* (:* D6 D3) D6
type H27B = :* (:* D6 D3) D5
type D635 = :* (:* D6 D3) D5
type O1173 = :* (:* D6 D3) D5
type B1001111011 = :* (:* D6 D3) D5
type H27A = :* (:* D6 D3) D4
type D634 = :* (:* D6 D3) D4
type O1172 = :* (:* D6 D3) D4
type B1001111010 = :* (:* D6 D3) D4
type H279 = :* (:* D6 D3) D3
type D633 = :* (:* D6 D3) D3
type O1171 = :* (:* D6 D3) D3
type B1001111001 = :* (:* D6 D3) D3
type H278 = :* (:* D6 D3) D2
type D632 = :* (:* D6 D3) D2
type O1170 = :* (:* D6 D3) D2
type B1001111000 = :* (:* D6 D3) D2
type H277 = :* (:* D6 D3) D1
type D631 = :* (:* D6 D3) D1
type O1167 = :* (:* D6 D3) D1
type B1001110111 = :* (:* D6 D3) D1
type H276 = :* (:* D6 D3) D0
type D630 = :* (:* D6 D3) D0
type O1166 = :* (:* D6 D3) D0
type B1001110110 = :* (:* D6 D3) D0
type H275 = :* (:* D6 D2) D9
type D629 = :* (:* D6 D2) D9
type O1165 = :* (:* D6 D2) D9
type B1001110101 = :* (:* D6 D2) D9
type H274 = :* (:* D6 D2) D8
type D628 = :* (:* D6 D2) D8
type O1164 = :* (:* D6 D2) D8
type B1001110100 = :* (:* D6 D2) D8
type H273 = :* (:* D6 D2) D7
type D627 = :* (:* D6 D2) D7
type O1163 = :* (:* D6 D2) D7
type B1001110011 = :* (:* D6 D2) D7
type H272 = :* (:* D6 D2) D6
type D626 = :* (:* D6 D2) D6
type O1162 = :* (:* D6 D2) D6
type B1001110010 = :* (:* D6 D2) D6
type H271 = :* (:* D6 D2) D5
type D625 = :* (:* D6 D2) D5
type O1161 = :* (:* D6 D2) D5
type B1001110001 = :* (:* D6 D2) D5
type H270 = :* (:* D6 D2) D4
type D624 = :* (:* D6 D2) D4
type O1160 = :* (:* D6 D2) D4
type B1001110000 = :* (:* D6 D2) D4
type H26F = :* (:* D6 D2) D3
type D623 = :* (:* D6 D2) D3
type O1157 = :* (:* D6 D2) D3
type B1001101111 = :* (:* D6 D2) D3
type H26E = :* (:* D6 D2) D2
type D622 = :* (:* D6 D2) D2
type O1156 = :* (:* D6 D2) D2
type B1001101110 = :* (:* D6 D2) D2
type H26D = :* (:* D6 D2) D1
type D621 = :* (:* D6 D2) D1
type O1155 = :* (:* D6 D2) D1
type B1001101101 = :* (:* D6 D2) D1
type H26C = :* (:* D6 D2) D0
type D620 = :* (:* D6 D2) D0
type O1154 = :* (:* D6 D2) D0
type B1001101100 = :* (:* D6 D2) D0
type H26B = :* (:* D6 D1) D9
type D619 = :* (:* D6 D1) D9
type O1153 = :* (:* D6 D1) D9
type B1001101011 = :* (:* D6 D1) D9
type H26A = :* (:* D6 D1) D8
type D618 = :* (:* D6 D1) D8
type O1152 = :* (:* D6 D1) D8
type B1001101010 = :* (:* D6 D1) D8
type H269 = :* (:* D6 D1) D7
type D617 = :* (:* D6 D1) D7
type O1151 = :* (:* D6 D1) D7
type B1001101001 = :* (:* D6 D1) D7
type H268 = :* (:* D6 D1) D6
type D616 = :* (:* D6 D1) D6
type O1150 = :* (:* D6 D1) D6
type B1001101000 = :* (:* D6 D1) D6
type H267 = :* (:* D6 D1) D5
type D615 = :* (:* D6 D1) D5
type O1147 = :* (:* D6 D1) D5
type B1001100111 = :* (:* D6 D1) D5
type H266 = :* (:* D6 D1) D4
type D614 = :* (:* D6 D1) D4
type O1146 = :* (:* D6 D1) D4
type B1001100110 = :* (:* D6 D1) D4
type H265 = :* (:* D6 D1) D3
type D613 = :* (:* D6 D1) D3
type O1145 = :* (:* D6 D1) D3
type B1001100101 = :* (:* D6 D1) D3
type H264 = :* (:* D6 D1) D2
type D612 = :* (:* D6 D1) D2
type O1144 = :* (:* D6 D1) D2
type B1001100100 = :* (:* D6 D1) D2
type H263 = :* (:* D6 D1) D1
type D611 = :* (:* D6 D1) D1
type O1143 = :* (:* D6 D1) D1
type B1001100011 = :* (:* D6 D1) D1
type H262 = :* (:* D6 D1) D0
type D610 = :* (:* D6 D1) D0
type O1142 = :* (:* D6 D1) D0
type B1001100010 = :* (:* D6 D1) D0
type H261 = :* (:* D6 D0) D9
type D609 = :* (:* D6 D0) D9
type O1141 = :* (:* D6 D0) D9
type B1001100001 = :* (:* D6 D0) D9
type H260 = :* (:* D6 D0) D8
type D608 = :* (:* D6 D0) D8
type O1140 = :* (:* D6 D0) D8
type B1001100000 = :* (:* D6 D0) D8
type H25F = :* (:* D6 D0) D7
type D607 = :* (:* D6 D0) D7
type O1137 = :* (:* D6 D0) D7
type B1001011111 = :* (:* D6 D0) D7
type H25E = :* (:* D6 D0) D6
type D606 = :* (:* D6 D0) D6
type O1136 = :* (:* D6 D0) D6
type B1001011110 = :* (:* D6 D0) D6
type H25D = :* (:* D6 D0) D5
type D605 = :* (:* D6 D0) D5
type O1135 = :* (:* D6 D0) D5
type B1001011101 = :* (:* D6 D0) D5
type H25C = :* (:* D6 D0) D4
type D604 = :* (:* D6 D0) D4
type O1134 = :* (:* D6 D0) D4
type B1001011100 = :* (:* D6 D0) D4
type H25B = :* (:* D6 D0) D3
type D603 = :* (:* D6 D0) D3
type O1133 = :* (:* D6 D0) D3
type B1001011011 = :* (:* D6 D0) D3
type H25A = :* (:* D6 D0) D2
type D602 = :* (:* D6 D0) D2
type O1132 = :* (:* D6 D0) D2
type B1001011010 = :* (:* D6 D0) D2
type H259 = :* (:* D6 D0) D1
type D601 = :* (:* D6 D0) D1
type O1131 = :* (:* D6 D0) D1
type B1001011001 = :* (:* D6 D0) D1
type H258 = :* (:* D6 D0) D0
type D600 = :* (:* D6 D0) D0
type O1130 = :* (:* D6 D0) D0
type B1001011000 = :* (:* D6 D0) D0
type H257 = :* (:* D5 D9) D9
type D599 = :* (:* D5 D9) D9
type O1127 = :* (:* D5 D9) D9
type B1001010111 = :* (:* D5 D9) D9
type H256 = :* (:* D5 D9) D8
type D598 = :* (:* D5 D9) D8
type O1126 = :* (:* D5 D9) D8
type B1001010110 = :* (:* D5 D9) D8
type H255 = :* (:* D5 D9) D7
type D597 = :* (:* D5 D9) D7
type O1125 = :* (:* D5 D9) D7
type B1001010101 = :* (:* D5 D9) D7
type H254 = :* (:* D5 D9) D6
type D596 = :* (:* D5 D9) D6
type O1124 = :* (:* D5 D9) D6
type B1001010100 = :* (:* D5 D9) D6
type H253 = :* (:* D5 D9) D5
type D595 = :* (:* D5 D9) D5
type O1123 = :* (:* D5 D9) D5
type B1001010011 = :* (:* D5 D9) D5
type H252 = :* (:* D5 D9) D4
type D594 = :* (:* D5 D9) D4
type O1122 = :* (:* D5 D9) D4
type B1001010010 = :* (:* D5 D9) D4
type H251 = :* (:* D5 D9) D3
type D593 = :* (:* D5 D9) D3
type O1121 = :* (:* D5 D9) D3
type B1001010001 = :* (:* D5 D9) D3
type H250 = :* (:* D5 D9) D2
type D592 = :* (:* D5 D9) D2
type O1120 = :* (:* D5 D9) D2
type B1001010000 = :* (:* D5 D9) D2
type H24F = :* (:* D5 D9) D1
type D591 = :* (:* D5 D9) D1
type O1117 = :* (:* D5 D9) D1
type B1001001111 = :* (:* D5 D9) D1
type H24E = :* (:* D5 D9) D0
type D590 = :* (:* D5 D9) D0
type O1116 = :* (:* D5 D9) D0
type B1001001110 = :* (:* D5 D9) D0
type H24D = :* (:* D5 D8) D9
type D589 = :* (:* D5 D8) D9
type O1115 = :* (:* D5 D8) D9
type B1001001101 = :* (:* D5 D8) D9
type H24C = :* (:* D5 D8) D8
type D588 = :* (:* D5 D8) D8
type O1114 = :* (:* D5 D8) D8
type B1001001100 = :* (:* D5 D8) D8
type H24B = :* (:* D5 D8) D7
type D587 = :* (:* D5 D8) D7
type O1113 = :* (:* D5 D8) D7
type B1001001011 = :* (:* D5 D8) D7
type H24A = :* (:* D5 D8) D6
type D586 = :* (:* D5 D8) D6
type O1112 = :* (:* D5 D8) D6
type B1001001010 = :* (:* D5 D8) D6
type H249 = :* (:* D5 D8) D5
type D585 = :* (:* D5 D8) D5
type O1111 = :* (:* D5 D8) D5
type B1001001001 = :* (:* D5 D8) D5
type H248 = :* (:* D5 D8) D4
type D584 = :* (:* D5 D8) D4
type O1110 = :* (:* D5 D8) D4
type B1001001000 = :* (:* D5 D8) D4
type H247 = :* (:* D5 D8) D3
type D583 = :* (:* D5 D8) D3
type O1107 = :* (:* D5 D8) D3
type B1001000111 = :* (:* D5 D8) D3
type H246 = :* (:* D5 D8) D2
type D582 = :* (:* D5 D8) D2
type O1106 = :* (:* D5 D8) D2
type B1001000110 = :* (:* D5 D8) D2
type H245 = :* (:* D5 D8) D1
type D581 = :* (:* D5 D8) D1
type O1105 = :* (:* D5 D8) D1
type B1001000101 = :* (:* D5 D8) D1
type H244 = :* (:* D5 D8) D0
type D580 = :* (:* D5 D8) D0
type O1104 = :* (:* D5 D8) D0
type B1001000100 = :* (:* D5 D8) D0
type H243 = :* (:* D5 D7) D9
type D579 = :* (:* D5 D7) D9
type O1103 = :* (:* D5 D7) D9
type B1001000011 = :* (:* D5 D7) D9
type H242 = :* (:* D5 D7) D8
type D578 = :* (:* D5 D7) D8
type O1102 = :* (:* D5 D7) D8
type B1001000010 = :* (:* D5 D7) D8
type H241 = :* (:* D5 D7) D7
type D577 = :* (:* D5 D7) D7
type O1101 = :* (:* D5 D7) D7
type B1001000001 = :* (:* D5 D7) D7
type H240 = :* (:* D5 D7) D6
type D576 = :* (:* D5 D7) D6
type O1100 = :* (:* D5 D7) D6
type B1001000000 = :* (:* D5 D7) D6
type H23F = :* (:* D5 D7) D5
type D575 = :* (:* D5 D7) D5
type O1077 = :* (:* D5 D7) D5
type B1000111111 = :* (:* D5 D7) D5
type H23E = :* (:* D5 D7) D4
type D574 = :* (:* D5 D7) D4
type O1076 = :* (:* D5 D7) D4
type B1000111110 = :* (:* D5 D7) D4
type H23D = :* (:* D5 D7) D3
type D573 = :* (:* D5 D7) D3
type O1075 = :* (:* D5 D7) D3
type B1000111101 = :* (:* D5 D7) D3
type H23C = :* (:* D5 D7) D2
type D572 = :* (:* D5 D7) D2
type O1074 = :* (:* D5 D7) D2
type B1000111100 = :* (:* D5 D7) D2
type H23B = :* (:* D5 D7) D1
type D571 = :* (:* D5 D7) D1
type O1073 = :* (:* D5 D7) D1
type B1000111011 = :* (:* D5 D7) D1
type H23A = :* (:* D5 D7) D0
type D570 = :* (:* D5 D7) D0
type O1072 = :* (:* D5 D7) D0
type B1000111010 = :* (:* D5 D7) D0
type H239 = :* (:* D5 D6) D9
type D569 = :* (:* D5 D6) D9
type O1071 = :* (:* D5 D6) D9
type B1000111001 = :* (:* D5 D6) D9
type H238 = :* (:* D5 D6) D8
type D568 = :* (:* D5 D6) D8
type O1070 = :* (:* D5 D6) D8
type B1000111000 = :* (:* D5 D6) D8
type H237 = :* (:* D5 D6) D7
type D567 = :* (:* D5 D6) D7
type O1067 = :* (:* D5 D6) D7
type B1000110111 = :* (:* D5 D6) D7
type H236 = :* (:* D5 D6) D6
type D566 = :* (:* D5 D6) D6
type O1066 = :* (:* D5 D6) D6
type B1000110110 = :* (:* D5 D6) D6
type H235 = :* (:* D5 D6) D5
type D565 = :* (:* D5 D6) D5
type O1065 = :* (:* D5 D6) D5
type B1000110101 = :* (:* D5 D6) D5
type H234 = :* (:* D5 D6) D4
type D564 = :* (:* D5 D6) D4
type O1064 = :* (:* D5 D6) D4
type B1000110100 = :* (:* D5 D6) D4
type H233 = :* (:* D5 D6) D3
type D563 = :* (:* D5 D6) D3
type O1063 = :* (:* D5 D6) D3
type B1000110011 = :* (:* D5 D6) D3
type H232 = :* (:* D5 D6) D2
type D562 = :* (:* D5 D6) D2
type O1062 = :* (:* D5 D6) D2
type B1000110010 = :* (:* D5 D6) D2
type H231 = :* (:* D5 D6) D1
type D561 = :* (:* D5 D6) D1
type O1061 = :* (:* D5 D6) D1
type B1000110001 = :* (:* D5 D6) D1
type H230 = :* (:* D5 D6) D0
type D560 = :* (:* D5 D6) D0
type O1060 = :* (:* D5 D6) D0
type B1000110000 = :* (:* D5 D6) D0
type H22F = :* (:* D5 D5) D9
type D559 = :* (:* D5 D5) D9
type O1057 = :* (:* D5 D5) D9
type B1000101111 = :* (:* D5 D5) D9
type H22E = :* (:* D5 D5) D8
type D558 = :* (:* D5 D5) D8
type O1056 = :* (:* D5 D5) D8
type B1000101110 = :* (:* D5 D5) D8
type H22D = :* (:* D5 D5) D7
type D557 = :* (:* D5 D5) D7
type O1055 = :* (:* D5 D5) D7
type B1000101101 = :* (:* D5 D5) D7
type H22C = :* (:* D5 D5) D6
type D556 = :* (:* D5 D5) D6
type O1054 = :* (:* D5 D5) D6
type B1000101100 = :* (:* D5 D5) D6
type H22B = :* (:* D5 D5) D5
type D555 = :* (:* D5 D5) D5
type O1053 = :* (:* D5 D5) D5
type B1000101011 = :* (:* D5 D5) D5
type H22A = :* (:* D5 D5) D4
type D554 = :* (:* D5 D5) D4
type O1052 = :* (:* D5 D5) D4
type B1000101010 = :* (:* D5 D5) D4
type H229 = :* (:* D5 D5) D3
type D553 = :* (:* D5 D5) D3
type O1051 = :* (:* D5 D5) D3
type B1000101001 = :* (:* D5 D5) D3
type H228 = :* (:* D5 D5) D2
type D552 = :* (:* D5 D5) D2
type O1050 = :* (:* D5 D5) D2
type B1000101000 = :* (:* D5 D5) D2
type H227 = :* (:* D5 D5) D1
type D551 = :* (:* D5 D5) D1
type O1047 = :* (:* D5 D5) D1
type B1000100111 = :* (:* D5 D5) D1
type H226 = :* (:* D5 D5) D0
type D550 = :* (:* D5 D5) D0
type O1046 = :* (:* D5 D5) D0
type B1000100110 = :* (:* D5 D5) D0
type H225 = :* (:* D5 D4) D9
type D549 = :* (:* D5 D4) D9
type O1045 = :* (:* D5 D4) D9
type B1000100101 = :* (:* D5 D4) D9
type H224 = :* (:* D5 D4) D8
type D548 = :* (:* D5 D4) D8
type O1044 = :* (:* D5 D4) D8
type B1000100100 = :* (:* D5 D4) D8
type H223 = :* (:* D5 D4) D7
type D547 = :* (:* D5 D4) D7
type O1043 = :* (:* D5 D4) D7
type B1000100011 = :* (:* D5 D4) D7
type H222 = :* (:* D5 D4) D6
type D546 = :* (:* D5 D4) D6
type O1042 = :* (:* D5 D4) D6
type B1000100010 = :* (:* D5 D4) D6
type H221 = :* (:* D5 D4) D5
type D545 = :* (:* D5 D4) D5
type O1041 = :* (:* D5 D4) D5
type B1000100001 = :* (:* D5 D4) D5
type H220 = :* (:* D5 D4) D4
type D544 = :* (:* D5 D4) D4
type O1040 = :* (:* D5 D4) D4
type B1000100000 = :* (:* D5 D4) D4
type H21F = :* (:* D5 D4) D3
type D543 = :* (:* D5 D4) D3
type O1037 = :* (:* D5 D4) D3
type B1000011111 = :* (:* D5 D4) D3
type H21E = :* (:* D5 D4) D2
type D542 = :* (:* D5 D4) D2
type O1036 = :* (:* D5 D4) D2
type B1000011110 = :* (:* D5 D4) D2
type H21D = :* (:* D5 D4) D1
type D541 = :* (:* D5 D4) D1
type O1035 = :* (:* D5 D4) D1
type B1000011101 = :* (:* D5 D4) D1
type H21C = :* (:* D5 D4) D0
type D540 = :* (:* D5 D4) D0
type O1034 = :* (:* D5 D4) D0
type B1000011100 = :* (:* D5 D4) D0
type H21B = :* (:* D5 D3) D9
type D539 = :* (:* D5 D3) D9
type O1033 = :* (:* D5 D3) D9
type B1000011011 = :* (:* D5 D3) D9
type H21A = :* (:* D5 D3) D8
type D538 = :* (:* D5 D3) D8
type O1032 = :* (:* D5 D3) D8
type B1000011010 = :* (:* D5 D3) D8
type H219 = :* (:* D5 D3) D7
type D537 = :* (:* D5 D3) D7
type O1031 = :* (:* D5 D3) D7
type B1000011001 = :* (:* D5 D3) D7
type H218 = :* (:* D5 D3) D6
type D536 = :* (:* D5 D3) D6
type O1030 = :* (:* D5 D3) D6
type B1000011000 = :* (:* D5 D3) D6
type H217 = :* (:* D5 D3) D5
type D535 = :* (:* D5 D3) D5
type O1027 = :* (:* D5 D3) D5
type B1000010111 = :* (:* D5 D3) D5
type H216 = :* (:* D5 D3) D4
type D534 = :* (:* D5 D3) D4
type O1026 = :* (:* D5 D3) D4
type B1000010110 = :* (:* D5 D3) D4
type H215 = :* (:* D5 D3) D3
type D533 = :* (:* D5 D3) D3
type O1025 = :* (:* D5 D3) D3
type B1000010101 = :* (:* D5 D3) D3
type H214 = :* (:* D5 D3) D2
type D532 = :* (:* D5 D3) D2
type O1024 = :* (:* D5 D3) D2
type B1000010100 = :* (:* D5 D3) D2
type H213 = :* (:* D5 D3) D1
type D531 = :* (:* D5 D3) D1
type O1023 = :* (:* D5 D3) D1
type B1000010011 = :* (:* D5 D3) D1
type H212 = :* (:* D5 D3) D0
type D530 = :* (:* D5 D3) D0
type O1022 = :* (:* D5 D3) D0
type B1000010010 = :* (:* D5 D3) D0
type H211 = :* (:* D5 D2) D9
type D529 = :* (:* D5 D2) D9
type O1021 = :* (:* D5 D2) D9
type B1000010001 = :* (:* D5 D2) D9
type H210 = :* (:* D5 D2) D8
type D528 = :* (:* D5 D2) D8
type O1020 = :* (:* D5 D2) D8
type B1000010000 = :* (:* D5 D2) D8
type H20F = :* (:* D5 D2) D7
type D527 = :* (:* D5 D2) D7
type O1017 = :* (:* D5 D2) D7
type B1000001111 = :* (:* D5 D2) D7
type H20E = :* (:* D5 D2) D6
type D526 = :* (:* D5 D2) D6
type O1016 = :* (:* D5 D2) D6
type B1000001110 = :* (:* D5 D2) D6
type H20D = :* (:* D5 D2) D5
type D525 = :* (:* D5 D2) D5
type O1015 = :* (:* D5 D2) D5
type B1000001101 = :* (:* D5 D2) D5
type H20C = :* (:* D5 D2) D4
type D524 = :* (:* D5 D2) D4
type O1014 = :* (:* D5 D2) D4
type B1000001100 = :* (:* D5 D2) D4
type H20B = :* (:* D5 D2) D3
type D523 = :* (:* D5 D2) D3
type O1013 = :* (:* D5 D2) D3
type B1000001011 = :* (:* D5 D2) D3
type H20A = :* (:* D5 D2) D2
type D522 = :* (:* D5 D2) D2
type O1012 = :* (:* D5 D2) D2
type B1000001010 = :* (:* D5 D2) D2
type H209 = :* (:* D5 D2) D1
type D521 = :* (:* D5 D2) D1
type O1011 = :* (:* D5 D2) D1
type B1000001001 = :* (:* D5 D2) D1
type H208 = :* (:* D5 D2) D0
type D520 = :* (:* D5 D2) D0
type O1010 = :* (:* D5 D2) D0
type B1000001000 = :* (:* D5 D2) D0
type H207 = :* (:* D5 D1) D9
type D519 = :* (:* D5 D1) D9
type O1007 = :* (:* D5 D1) D9
type B1000000111 = :* (:* D5 D1) D9
type H206 = :* (:* D5 D1) D8
type D518 = :* (:* D5 D1) D8
type O1006 = :* (:* D5 D1) D8
type B1000000110 = :* (:* D5 D1) D8
type H205 = :* (:* D5 D1) D7
type D517 = :* (:* D5 D1) D7
type O1005 = :* (:* D5 D1) D7
type B1000000101 = :* (:* D5 D1) D7
type H204 = :* (:* D5 D1) D6
type D516 = :* (:* D5 D1) D6
type O1004 = :* (:* D5 D1) D6
type B1000000100 = :* (:* D5 D1) D6
type H203 = :* (:* D5 D1) D5
type D515 = :* (:* D5 D1) D5
type O1003 = :* (:* D5 D1) D5
type B1000000011 = :* (:* D5 D1) D5
type H202 = :* (:* D5 D1) D4
type D514 = :* (:* D5 D1) D4
type O1002 = :* (:* D5 D1) D4
type B1000000010 = :* (:* D5 D1) D4
type H201 = :* (:* D5 D1) D3
type D513 = :* (:* D5 D1) D3
type O1001 = :* (:* D5 D1) D3
type B1000000001 = :* (:* D5 D1) D3
type H200 = :* (:* D5 D1) D2
type D512 = :* (:* D5 D1) D2
type O1000 = :* (:* D5 D1) D2
type B1000000000 = :* (:* D5 D1) D2
type H1FF = :* (:* D5 D1) D1
type D511 = :* (:* D5 D1) D1
type O777 = :* (:* D5 D1) D1
type B111111111 = :* (:* D5 D1) D1
type H1FE = :* (:* D5 D1) D0
type D510 = :* (:* D5 D1) D0
type O776 = :* (:* D5 D1) D0
type B111111110 = :* (:* D5 D1) D0
type H1FD = :* (:* D5 D0) D9
type D509 = :* (:* D5 D0) D9
type O775 = :* (:* D5 D0) D9
type B111111101 = :* (:* D5 D0) D9
type H1FC = :* (:* D5 D0) D8
type D508 = :* (:* D5 D0) D8
type O774 = :* (:* D5 D0) D8
type B111111100 = :* (:* D5 D0) D8
type H1FB = :* (:* D5 D0) D7
type D507 = :* (:* D5 D0) D7
type O773 = :* (:* D5 D0) D7
type B111111011 = :* (:* D5 D0) D7
type H1FA = :* (:* D5 D0) D6
type D506 = :* (:* D5 D0) D6
type O772 = :* (:* D5 D0) D6
type B111111010 = :* (:* D5 D0) D6
type H1F9 = :* (:* D5 D0) D5
type D505 = :* (:* D5 D0) D5
type O771 = :* (:* D5 D0) D5
type B111111001 = :* (:* D5 D0) D5
type H1F8 = :* (:* D5 D0) D4
type D504 = :* (:* D5 D0) D4
type O770 = :* (:* D5 D0) D4
type B111111000 = :* (:* D5 D0) D4
type H1F7 = :* (:* D5 D0) D3
type D503 = :* (:* D5 D0) D3
type O767 = :* (:* D5 D0) D3
type B111110111 = :* (:* D5 D0) D3
type H1F6 = :* (:* D5 D0) D2
type D502 = :* (:* D5 D0) D2
type O766 = :* (:* D5 D0) D2
type B111110110 = :* (:* D5 D0) D2
type H1F5 = :* (:* D5 D0) D1
type D501 = :* (:* D5 D0) D1
type O765 = :* (:* D5 D0) D1
type B111110101 = :* (:* D5 D0) D1
type H1F4 = :* (:* D5 D0) D0
type D500 = :* (:* D5 D0) D0
type O764 = :* (:* D5 D0) D0
type B111110100 = :* (:* D5 D0) D0
type H1F3 = :* (:* D4 D9) D9
type D499 = :* (:* D4 D9) D9
type O763 = :* (:* D4 D9) D9
type B111110011 = :* (:* D4 D9) D9
type H1F2 = :* (:* D4 D9) D8
type D498 = :* (:* D4 D9) D8
type O762 = :* (:* D4 D9) D8
type B111110010 = :* (:* D4 D9) D8
type H1F1 = :* (:* D4 D9) D7
type D497 = :* (:* D4 D9) D7
type O761 = :* (:* D4 D9) D7
type B111110001 = :* (:* D4 D9) D7
type H1F0 = :* (:* D4 D9) D6
type D496 = :* (:* D4 D9) D6
type O760 = :* (:* D4 D9) D6
type B111110000 = :* (:* D4 D9) D6
type H1EF = :* (:* D4 D9) D5
type D495 = :* (:* D4 D9) D5
type O757 = :* (:* D4 D9) D5
type B111101111 = :* (:* D4 D9) D5
type H1EE = :* (:* D4 D9) D4
type D494 = :* (:* D4 D9) D4
type O756 = :* (:* D4 D9) D4
type B111101110 = :* (:* D4 D9) D4
type H1ED = :* (:* D4 D9) D3
type D493 = :* (:* D4 D9) D3
type O755 = :* (:* D4 D9) D3
type B111101101 = :* (:* D4 D9) D3
type H1EC = :* (:* D4 D9) D2
type D492 = :* (:* D4 D9) D2
type O754 = :* (:* D4 D9) D2
type B111101100 = :* (:* D4 D9) D2
type H1EB = :* (:* D4 D9) D1
type D491 = :* (:* D4 D9) D1
type O753 = :* (:* D4 D9) D1
type B111101011 = :* (:* D4 D9) D1
type H1EA = :* (:* D4 D9) D0
type D490 = :* (:* D4 D9) D0
type O752 = :* (:* D4 D9) D0
type B111101010 = :* (:* D4 D9) D0
type H1E9 = :* (:* D4 D8) D9
type D489 = :* (:* D4 D8) D9
type O751 = :* (:* D4 D8) D9
type B111101001 = :* (:* D4 D8) D9
type H1E8 = :* (:* D4 D8) D8
type D488 = :* (:* D4 D8) D8
type O750 = :* (:* D4 D8) D8
type B111101000 = :* (:* D4 D8) D8
type H1E7 = :* (:* D4 D8) D7
type D487 = :* (:* D4 D8) D7
type O747 = :* (:* D4 D8) D7
type B111100111 = :* (:* D4 D8) D7
type H1E6 = :* (:* D4 D8) D6
type D486 = :* (:* D4 D8) D6
type O746 = :* (:* D4 D8) D6
type B111100110 = :* (:* D4 D8) D6
type H1E5 = :* (:* D4 D8) D5
type D485 = :* (:* D4 D8) D5
type O745 = :* (:* D4 D8) D5
type B111100101 = :* (:* D4 D8) D5
type H1E4 = :* (:* D4 D8) D4
type D484 = :* (:* D4 D8) D4
type O744 = :* (:* D4 D8) D4
type B111100100 = :* (:* D4 D8) D4
type H1E3 = :* (:* D4 D8) D3
type D483 = :* (:* D4 D8) D3
type O743 = :* (:* D4 D8) D3
type B111100011 = :* (:* D4 D8) D3
type H1E2 = :* (:* D4 D8) D2
type D482 = :* (:* D4 D8) D2
type O742 = :* (:* D4 D8) D2
type B111100010 = :* (:* D4 D8) D2
type H1E1 = :* (:* D4 D8) D1
type D481 = :* (:* D4 D8) D1
type O741 = :* (:* D4 D8) D1
type B111100001 = :* (:* D4 D8) D1
type H1E0 = :* (:* D4 D8) D0
type D480 = :* (:* D4 D8) D0
type O740 = :* (:* D4 D8) D0
type B111100000 = :* (:* D4 D8) D0
type H1DF = :* (:* D4 D7) D9
type D479 = :* (:* D4 D7) D9
type O737 = :* (:* D4 D7) D9
type B111011111 = :* (:* D4 D7) D9
type H1DE = :* (:* D4 D7) D8
type D478 = :* (:* D4 D7) D8
type O736 = :* (:* D4 D7) D8
type B111011110 = :* (:* D4 D7) D8
type H1DD = :* (:* D4 D7) D7
type D477 = :* (:* D4 D7) D7
type O735 = :* (:* D4 D7) D7
type B111011101 = :* (:* D4 D7) D7
type H1DC = :* (:* D4 D7) D6
type D476 = :* (:* D4 D7) D6
type O734 = :* (:* D4 D7) D6
type B111011100 = :* (:* D4 D7) D6
type H1DB = :* (:* D4 D7) D5
type D475 = :* (:* D4 D7) D5
type O733 = :* (:* D4 D7) D5
type B111011011 = :* (:* D4 D7) D5
type H1DA = :* (:* D4 D7) D4
type D474 = :* (:* D4 D7) D4
type O732 = :* (:* D4 D7) D4
type B111011010 = :* (:* D4 D7) D4
type H1D9 = :* (:* D4 D7) D3
type D473 = :* (:* D4 D7) D3
type O731 = :* (:* D4 D7) D3
type B111011001 = :* (:* D4 D7) D3
type H1D8 = :* (:* D4 D7) D2
type D472 = :* (:* D4 D7) D2
type O730 = :* (:* D4 D7) D2
type B111011000 = :* (:* D4 D7) D2
type H1D7 = :* (:* D4 D7) D1
type D471 = :* (:* D4 D7) D1
type O727 = :* (:* D4 D7) D1
type B111010111 = :* (:* D4 D7) D1
type H1D6 = :* (:* D4 D7) D0
type D470 = :* (:* D4 D7) D0
type O726 = :* (:* D4 D7) D0
type B111010110 = :* (:* D4 D7) D0
type H1D5 = :* (:* D4 D6) D9
type D469 = :* (:* D4 D6) D9
type O725 = :* (:* D4 D6) D9
type B111010101 = :* (:* D4 D6) D9
type H1D4 = :* (:* D4 D6) D8
type D468 = :* (:* D4 D6) D8
type O724 = :* (:* D4 D6) D8
type B111010100 = :* (:* D4 D6) D8
type H1D3 = :* (:* D4 D6) D7
type D467 = :* (:* D4 D6) D7
type O723 = :* (:* D4 D6) D7
type B111010011 = :* (:* D4 D6) D7
type H1D2 = :* (:* D4 D6) D6
type D466 = :* (:* D4 D6) D6
type O722 = :* (:* D4 D6) D6
type B111010010 = :* (:* D4 D6) D6
type H1D1 = :* (:* D4 D6) D5
type D465 = :* (:* D4 D6) D5
type O721 = :* (:* D4 D6) D5
type B111010001 = :* (:* D4 D6) D5
type H1D0 = :* (:* D4 D6) D4
type D464 = :* (:* D4 D6) D4
type O720 = :* (:* D4 D6) D4
type B111010000 = :* (:* D4 D6) D4
type H1CF = :* (:* D4 D6) D3
type D463 = :* (:* D4 D6) D3
type O717 = :* (:* D4 D6) D3
type B111001111 = :* (:* D4 D6) D3
type H1CE = :* (:* D4 D6) D2
type D462 = :* (:* D4 D6) D2
type O716 = :* (:* D4 D6) D2
type B111001110 = :* (:* D4 D6) D2
type H1CD = :* (:* D4 D6) D1
type D461 = :* (:* D4 D6) D1
type O715 = :* (:* D4 D6) D1
type B111001101 = :* (:* D4 D6) D1
type H1CC = :* (:* D4 D6) D0
type D460 = :* (:* D4 D6) D0
type O714 = :* (:* D4 D6) D0
type B111001100 = :* (:* D4 D6) D0
type H1CB = :* (:* D4 D5) D9
type D459 = :* (:* D4 D5) D9
type O713 = :* (:* D4 D5) D9
type B111001011 = :* (:* D4 D5) D9
type H1CA = :* (:* D4 D5) D8
type D458 = :* (:* D4 D5) D8
type O712 = :* (:* D4 D5) D8
type B111001010 = :* (:* D4 D5) D8
type H1C9 = :* (:* D4 D5) D7
type D457 = :* (:* D4 D5) D7
type O711 = :* (:* D4 D5) D7
type B111001001 = :* (:* D4 D5) D7
type H1C8 = :* (:* D4 D5) D6
type D456 = :* (:* D4 D5) D6
type O710 = :* (:* D4 D5) D6
type B111001000 = :* (:* D4 D5) D6
type H1C7 = :* (:* D4 D5) D5
type D455 = :* (:* D4 D5) D5
type O707 = :* (:* D4 D5) D5
type B111000111 = :* (:* D4 D5) D5
type H1C6 = :* (:* D4 D5) D4
type D454 = :* (:* D4 D5) D4
type O706 = :* (:* D4 D5) D4
type B111000110 = :* (:* D4 D5) D4
type H1C5 = :* (:* D4 D5) D3
type D453 = :* (:* D4 D5) D3
type O705 = :* (:* D4 D5) D3
type B111000101 = :* (:* D4 D5) D3
type H1C4 = :* (:* D4 D5) D2
type D452 = :* (:* D4 D5) D2
type O704 = :* (:* D4 D5) D2
type B111000100 = :* (:* D4 D5) D2
type H1C3 = :* (:* D4 D5) D1
type D451 = :* (:* D4 D5) D1
type O703 = :* (:* D4 D5) D1
type B111000011 = :* (:* D4 D5) D1
type H1C2 = :* (:* D4 D5) D0
type D450 = :* (:* D4 D5) D0
type O702 = :* (:* D4 D5) D0
type B111000010 = :* (:* D4 D5) D0
type H1C1 = :* (:* D4 D4) D9
type D449 = :* (:* D4 D4) D9
type O701 = :* (:* D4 D4) D9
type B111000001 = :* (:* D4 D4) D9
type H1C0 = :* (:* D4 D4) D8
type D448 = :* (:* D4 D4) D8
type O700 = :* (:* D4 D4) D8
type B111000000 = :* (:* D4 D4) D8
type H1BF = :* (:* D4 D4) D7
type D447 = :* (:* D4 D4) D7
type O677 = :* (:* D4 D4) D7
type B110111111 = :* (:* D4 D4) D7
type H1BE = :* (:* D4 D4) D6
type D446 = :* (:* D4 D4) D6
type O676 = :* (:* D4 D4) D6
type B110111110 = :* (:* D4 D4) D6
type H1BD = :* (:* D4 D4) D5
type D445 = :* (:* D4 D4) D5
type O675 = :* (:* D4 D4) D5
type B110111101 = :* (:* D4 D4) D5
type H1BC = :* (:* D4 D4) D4
type D444 = :* (:* D4 D4) D4
type O674 = :* (:* D4 D4) D4
type B110111100 = :* (:* D4 D4) D4
type H1BB = :* (:* D4 D4) D3
type D443 = :* (:* D4 D4) D3
type O673 = :* (:* D4 D4) D3
type B110111011 = :* (:* D4 D4) D3
type H1BA = :* (:* D4 D4) D2
type D442 = :* (:* D4 D4) D2
type O672 = :* (:* D4 D4) D2
type B110111010 = :* (:* D4 D4) D2
type H1B9 = :* (:* D4 D4) D1
type D441 = :* (:* D4 D4) D1
type O671 = :* (:* D4 D4) D1
type B110111001 = :* (:* D4 D4) D1
type H1B8 = :* (:* D4 D4) D0
type D440 = :* (:* D4 D4) D0
type O670 = :* (:* D4 D4) D0
type B110111000 = :* (:* D4 D4) D0
type H1B7 = :* (:* D4 D3) D9
type D439 = :* (:* D4 D3) D9
type O667 = :* (:* D4 D3) D9
type B110110111 = :* (:* D4 D3) D9
type H1B6 = :* (:* D4 D3) D8
type D438 = :* (:* D4 D3) D8
type O666 = :* (:* D4 D3) D8
type B110110110 = :* (:* D4 D3) D8
type H1B5 = :* (:* D4 D3) D7
type D437 = :* (:* D4 D3) D7
type O665 = :* (:* D4 D3) D7
type B110110101 = :* (:* D4 D3) D7
type H1B4 = :* (:* D4 D3) D6
type D436 = :* (:* D4 D3) D6
type O664 = :* (:* D4 D3) D6
type B110110100 = :* (:* D4 D3) D6
type H1B3 = :* (:* D4 D3) D5
type D435 = :* (:* D4 D3) D5
type O663 = :* (:* D4 D3) D5
type B110110011 = :* (:* D4 D3) D5
type H1B2 = :* (:* D4 D3) D4
type D434 = :* (:* D4 D3) D4
type O662 = :* (:* D4 D3) D4
type B110110010 = :* (:* D4 D3) D4
type H1B1 = :* (:* D4 D3) D3
type D433 = :* (:* D4 D3) D3
type O661 = :* (:* D4 D3) D3
type B110110001 = :* (:* D4 D3) D3
type H1B0 = :* (:* D4 D3) D2
type D432 = :* (:* D4 D3) D2
type O660 = :* (:* D4 D3) D2
type B110110000 = :* (:* D4 D3) D2
type H1AF = :* (:* D4 D3) D1
type D431 = :* (:* D4 D3) D1
type O657 = :* (:* D4 D3) D1
type B110101111 = :* (:* D4 D3) D1
type H1AE = :* (:* D4 D3) D0
type D430 = :* (:* D4 D3) D0
type O656 = :* (:* D4 D3) D0
type B110101110 = :* (:* D4 D3) D0
type H1AD = :* (:* D4 D2) D9
type D429 = :* (:* D4 D2) D9
type O655 = :* (:* D4 D2) D9
type B110101101 = :* (:* D4 D2) D9
type H1AC = :* (:* D4 D2) D8
type D428 = :* (:* D4 D2) D8
type O654 = :* (:* D4 D2) D8
type B110101100 = :* (:* D4 D2) D8
type H1AB = :* (:* D4 D2) D7
type D427 = :* (:* D4 D2) D7
type O653 = :* (:* D4 D2) D7
type B110101011 = :* (:* D4 D2) D7
type H1AA = :* (:* D4 D2) D6
type D426 = :* (:* D4 D2) D6
type O652 = :* (:* D4 D2) D6
type B110101010 = :* (:* D4 D2) D6
type H1A9 = :* (:* D4 D2) D5
type D425 = :* (:* D4 D2) D5
type O651 = :* (:* D4 D2) D5
type B110101001 = :* (:* D4 D2) D5
type H1A8 = :* (:* D4 D2) D4
type D424 = :* (:* D4 D2) D4
type O650 = :* (:* D4 D2) D4
type B110101000 = :* (:* D4 D2) D4
type H1A7 = :* (:* D4 D2) D3
type D423 = :* (:* D4 D2) D3
type O647 = :* (:* D4 D2) D3
type B110100111 = :* (:* D4 D2) D3
type H1A6 = :* (:* D4 D2) D2
type D422 = :* (:* D4 D2) D2
type O646 = :* (:* D4 D2) D2
type B110100110 = :* (:* D4 D2) D2
type H1A5 = :* (:* D4 D2) D1
type D421 = :* (:* D4 D2) D1
type O645 = :* (:* D4 D2) D1
type B110100101 = :* (:* D4 D2) D1
type H1A4 = :* (:* D4 D2) D0
type D420 = :* (:* D4 D2) D0
type O644 = :* (:* D4 D2) D0
type B110100100 = :* (:* D4 D2) D0
type H1A3 = :* (:* D4 D1) D9
type D419 = :* (:* D4 D1) D9
type O643 = :* (:* D4 D1) D9
type B110100011 = :* (:* D4 D1) D9
type H1A2 = :* (:* D4 D1) D8
type D418 = :* (:* D4 D1) D8
type O642 = :* (:* D4 D1) D8
type B110100010 = :* (:* D4 D1) D8
type H1A1 = :* (:* D4 D1) D7
type D417 = :* (:* D4 D1) D7
type O641 = :* (:* D4 D1) D7
type B110100001 = :* (:* D4 D1) D7
type H1A0 = :* (:* D4 D1) D6
type D416 = :* (:* D4 D1) D6
type O640 = :* (:* D4 D1) D6
type B110100000 = :* (:* D4 D1) D6
type H19F = :* (:* D4 D1) D5
type D415 = :* (:* D4 D1) D5
type O637 = :* (:* D4 D1) D5
type B110011111 = :* (:* D4 D1) D5
type H19E = :* (:* D4 D1) D4
type D414 = :* (:* D4 D1) D4
type O636 = :* (:* D4 D1) D4
type B110011110 = :* (:* D4 D1) D4
type H19D = :* (:* D4 D1) D3
type D413 = :* (:* D4 D1) D3
type O635 = :* (:* D4 D1) D3
type B110011101 = :* (:* D4 D1) D3
type H19C = :* (:* D4 D1) D2
type D412 = :* (:* D4 D1) D2
type O634 = :* (:* D4 D1) D2
type B110011100 = :* (:* D4 D1) D2
type H19B = :* (:* D4 D1) D1
type D411 = :* (:* D4 D1) D1
type O633 = :* (:* D4 D1) D1
type B110011011 = :* (:* D4 D1) D1
type H19A = :* (:* D4 D1) D0
type D410 = :* (:* D4 D1) D0
type O632 = :* (:* D4 D1) D0
type B110011010 = :* (:* D4 D1) D0
type H199 = :* (:* D4 D0) D9
type D409 = :* (:* D4 D0) D9
type O631 = :* (:* D4 D0) D9
type B110011001 = :* (:* D4 D0) D9
type H198 = :* (:* D4 D0) D8
type D408 = :* (:* D4 D0) D8
type O630 = :* (:* D4 D0) D8
type B110011000 = :* (:* D4 D0) D8
type H197 = :* (:* D4 D0) D7
type D407 = :* (:* D4 D0) D7
type O627 = :* (:* D4 D0) D7
type B110010111 = :* (:* D4 D0) D7
type H196 = :* (:* D4 D0) D6
type D406 = :* (:* D4 D0) D6
type O626 = :* (:* D4 D0) D6
type B110010110 = :* (:* D4 D0) D6
type H195 = :* (:* D4 D0) D5
type D405 = :* (:* D4 D0) D5
type O625 = :* (:* D4 D0) D5
type B110010101 = :* (:* D4 D0) D5
type H194 = :* (:* D4 D0) D4
type D404 = :* (:* D4 D0) D4
type O624 = :* (:* D4 D0) D4
type B110010100 = :* (:* D4 D0) D4
type H193 = :* (:* D4 D0) D3
type D403 = :* (:* D4 D0) D3
type O623 = :* (:* D4 D0) D3
type B110010011 = :* (:* D4 D0) D3
type H192 = :* (:* D4 D0) D2
type D402 = :* (:* D4 D0) D2
type O622 = :* (:* D4 D0) D2
type B110010010 = :* (:* D4 D0) D2
type H191 = :* (:* D4 D0) D1
type D401 = :* (:* D4 D0) D1
type O621 = :* (:* D4 D0) D1
type B110010001 = :* (:* D4 D0) D1
type H190 = :* (:* D4 D0) D0
type D400 = :* (:* D4 D0) D0
type O620 = :* (:* D4 D0) D0
type B110010000 = :* (:* D4 D0) D0
type H18F = :* (:* D3 D9) D9
type D399 = :* (:* D3 D9) D9
type O617 = :* (:* D3 D9) D9
type B110001111 = :* (:* D3 D9) D9
type H18E = :* (:* D3 D9) D8
type D398 = :* (:* D3 D9) D8
type O616 = :* (:* D3 D9) D8
type B110001110 = :* (:* D3 D9) D8
type H18D = :* (:* D3 D9) D7
type D397 = :* (:* D3 D9) D7
type O615 = :* (:* D3 D9) D7
type B110001101 = :* (:* D3 D9) D7
type H18C = :* (:* D3 D9) D6
type D396 = :* (:* D3 D9) D6
type O614 = :* (:* D3 D9) D6
type B110001100 = :* (:* D3 D9) D6
type H18B = :* (:* D3 D9) D5
type D395 = :* (:* D3 D9) D5
type O613 = :* (:* D3 D9) D5
type B110001011 = :* (:* D3 D9) D5
type H18A = :* (:* D3 D9) D4
type D394 = :* (:* D3 D9) D4
type O612 = :* (:* D3 D9) D4
type B110001010 = :* (:* D3 D9) D4
type H189 = :* (:* D3 D9) D3
type D393 = :* (:* D3 D9) D3
type O611 = :* (:* D3 D9) D3
type B110001001 = :* (:* D3 D9) D3
type H188 = :* (:* D3 D9) D2
type D392 = :* (:* D3 D9) D2
type O610 = :* (:* D3 D9) D2
type B110001000 = :* (:* D3 D9) D2
type H187 = :* (:* D3 D9) D1
type D391 = :* (:* D3 D9) D1
type O607 = :* (:* D3 D9) D1
type B110000111 = :* (:* D3 D9) D1
type H186 = :* (:* D3 D9) D0
type D390 = :* (:* D3 D9) D0
type O606 = :* (:* D3 D9) D0
type B110000110 = :* (:* D3 D9) D0
type H185 = :* (:* D3 D8) D9
type D389 = :* (:* D3 D8) D9
type O605 = :* (:* D3 D8) D9
type B110000101 = :* (:* D3 D8) D9
type H184 = :* (:* D3 D8) D8
type D388 = :* (:* D3 D8) D8
type O604 = :* (:* D3 D8) D8
type B110000100 = :* (:* D3 D8) D8
type H183 = :* (:* D3 D8) D7
type D387 = :* (:* D3 D8) D7
type O603 = :* (:* D3 D8) D7
type B110000011 = :* (:* D3 D8) D7
type H182 = :* (:* D3 D8) D6
type D386 = :* (:* D3 D8) D6
type O602 = :* (:* D3 D8) D6
type B110000010 = :* (:* D3 D8) D6
type H181 = :* (:* D3 D8) D5
type D385 = :* (:* D3 D8) D5
type O601 = :* (:* D3 D8) D5
type B110000001 = :* (:* D3 D8) D5
type H180 = :* (:* D3 D8) D4
type D384 = :* (:* D3 D8) D4
type O600 = :* (:* D3 D8) D4
type B110000000 = :* (:* D3 D8) D4
type H17F = :* (:* D3 D8) D3
type D383 = :* (:* D3 D8) D3
type O577 = :* (:* D3 D8) D3
type B101111111 = :* (:* D3 D8) D3
type H17E = :* (:* D3 D8) D2
type D382 = :* (:* D3 D8) D2
type O576 = :* (:* D3 D8) D2
type B101111110 = :* (:* D3 D8) D2
type H17D = :* (:* D3 D8) D1
type D381 = :* (:* D3 D8) D1
type O575 = :* (:* D3 D8) D1
type B101111101 = :* (:* D3 D8) D1
type H17C = :* (:* D3 D8) D0
type D380 = :* (:* D3 D8) D0
type O574 = :* (:* D3 D8) D0
type B101111100 = :* (:* D3 D8) D0
type H17B = :* (:* D3 D7) D9
type D379 = :* (:* D3 D7) D9
type O573 = :* (:* D3 D7) D9
type B101111011 = :* (:* D3 D7) D9
type H17A = :* (:* D3 D7) D8
type D378 = :* (:* D3 D7) D8
type O572 = :* (:* D3 D7) D8
type B101111010 = :* (:* D3 D7) D8
type H179 = :* (:* D3 D7) D7
type D377 = :* (:* D3 D7) D7
type O571 = :* (:* D3 D7) D7
type B101111001 = :* (:* D3 D7) D7
type H178 = :* (:* D3 D7) D6
type D376 = :* (:* D3 D7) D6
type O570 = :* (:* D3 D7) D6
type B101111000 = :* (:* D3 D7) D6
type H177 = :* (:* D3 D7) D5
type D375 = :* (:* D3 D7) D5
type O567 = :* (:* D3 D7) D5
type B101110111 = :* (:* D3 D7) D5
type H176 = :* (:* D3 D7) D4
type D374 = :* (:* D3 D7) D4
type O566 = :* (:* D3 D7) D4
type B101110110 = :* (:* D3 D7) D4
type H175 = :* (:* D3 D7) D3
type D373 = :* (:* D3 D7) D3
type O565 = :* (:* D3 D7) D3
type B101110101 = :* (:* D3 D7) D3
type H174 = :* (:* D3 D7) D2
type D372 = :* (:* D3 D7) D2
type O564 = :* (:* D3 D7) D2
type B101110100 = :* (:* D3 D7) D2
type H173 = :* (:* D3 D7) D1
type D371 = :* (:* D3 D7) D1
type O563 = :* (:* D3 D7) D1
type B101110011 = :* (:* D3 D7) D1
type H172 = :* (:* D3 D7) D0
type D370 = :* (:* D3 D7) D0
type O562 = :* (:* D3 D7) D0
type B101110010 = :* (:* D3 D7) D0
type H171 = :* (:* D3 D6) D9
type D369 = :* (:* D3 D6) D9
type O561 = :* (:* D3 D6) D9
type B101110001 = :* (:* D3 D6) D9
type H170 = :* (:* D3 D6) D8
type D368 = :* (:* D3 D6) D8
type O560 = :* (:* D3 D6) D8
type B101110000 = :* (:* D3 D6) D8
type H16F = :* (:* D3 D6) D7
type D367 = :* (:* D3 D6) D7
type O557 = :* (:* D3 D6) D7
type B101101111 = :* (:* D3 D6) D7
type H16E = :* (:* D3 D6) D6
type D366 = :* (:* D3 D6) D6
type O556 = :* (:* D3 D6) D6
type B101101110 = :* (:* D3 D6) D6
type H16D = :* (:* D3 D6) D5
type D365 = :* (:* D3 D6) D5
type O555 = :* (:* D3 D6) D5
type B101101101 = :* (:* D3 D6) D5
type H16C = :* (:* D3 D6) D4
type D364 = :* (:* D3 D6) D4
type O554 = :* (:* D3 D6) D4
type B101101100 = :* (:* D3 D6) D4
type H16B = :* (:* D3 D6) D3
type D363 = :* (:* D3 D6) D3
type O553 = :* (:* D3 D6) D3
type B101101011 = :* (:* D3 D6) D3
type H16A = :* (:* D3 D6) D2
type D362 = :* (:* D3 D6) D2
type O552 = :* (:* D3 D6) D2
type B101101010 = :* (:* D3 D6) D2
type H169 = :* (:* D3 D6) D1
type D361 = :* (:* D3 D6) D1
type O551 = :* (:* D3 D6) D1
type B101101001 = :* (:* D3 D6) D1
type H168 = :* (:* D3 D6) D0
type D360 = :* (:* D3 D6) D0
type O550 = :* (:* D3 D6) D0
type B101101000 = :* (:* D3 D6) D0
type H167 = :* (:* D3 D5) D9
type D359 = :* (:* D3 D5) D9
type O547 = :* (:* D3 D5) D9
type B101100111 = :* (:* D3 D5) D9
type H166 = :* (:* D3 D5) D8
type D358 = :* (:* D3 D5) D8
type O546 = :* (:* D3 D5) D8
type B101100110 = :* (:* D3 D5) D8
type H165 = :* (:* D3 D5) D7
type D357 = :* (:* D3 D5) D7
type O545 = :* (:* D3 D5) D7
type B101100101 = :* (:* D3 D5) D7
type H164 = :* (:* D3 D5) D6
type D356 = :* (:* D3 D5) D6
type O544 = :* (:* D3 D5) D6
type B101100100 = :* (:* D3 D5) D6
type H163 = :* (:* D3 D5) D5
type D355 = :* (:* D3 D5) D5
type O543 = :* (:* D3 D5) D5
type B101100011 = :* (:* D3 D5) D5
type H162 = :* (:* D3 D5) D4
type D354 = :* (:* D3 D5) D4
type O542 = :* (:* D3 D5) D4
type B101100010 = :* (:* D3 D5) D4
type H161 = :* (:* D3 D5) D3
type D353 = :* (:* D3 D5) D3
type O541 = :* (:* D3 D5) D3
type B101100001 = :* (:* D3 D5) D3
type H160 = :* (:* D3 D5) D2
type D352 = :* (:* D3 D5) D2
type O540 = :* (:* D3 D5) D2
type B101100000 = :* (:* D3 D5) D2
type H15F = :* (:* D3 D5) D1
type D351 = :* (:* D3 D5) D1
type O537 = :* (:* D3 D5) D1
type B101011111 = :* (:* D3 D5) D1
type H15E = :* (:* D3 D5) D0
type D350 = :* (:* D3 D5) D0
type O536 = :* (:* D3 D5) D0
type B101011110 = :* (:* D3 D5) D0
type H15D = :* (:* D3 D4) D9
type D349 = :* (:* D3 D4) D9
type O535 = :* (:* D3 D4) D9
type B101011101 = :* (:* D3 D4) D9
type H15C = :* (:* D3 D4) D8
type D348 = :* (:* D3 D4) D8
type O534 = :* (:* D3 D4) D8
type B101011100 = :* (:* D3 D4) D8
type H15B = :* (:* D3 D4) D7
type D347 = :* (:* D3 D4) D7
type O533 = :* (:* D3 D4) D7
type B101011011 = :* (:* D3 D4) D7
type H15A = :* (:* D3 D4) D6
type D346 = :* (:* D3 D4) D6
type O532 = :* (:* D3 D4) D6
type B101011010 = :* (:* D3 D4) D6
type H159 = :* (:* D3 D4) D5
type D345 = :* (:* D3 D4) D5
type O531 = :* (:* D3 D4) D5
type B101011001 = :* (:* D3 D4) D5
type H158 = :* (:* D3 D4) D4
type D344 = :* (:* D3 D4) D4
type O530 = :* (:* D3 D4) D4
type B101011000 = :* (:* D3 D4) D4
type H157 = :* (:* D3 D4) D3
type D343 = :* (:* D3 D4) D3
type O527 = :* (:* D3 D4) D3
type B101010111 = :* (:* D3 D4) D3
type H156 = :* (:* D3 D4) D2
type D342 = :* (:* D3 D4) D2
type O526 = :* (:* D3 D4) D2
type B101010110 = :* (:* D3 D4) D2
type H155 = :* (:* D3 D4) D1
type D341 = :* (:* D3 D4) D1
type O525 = :* (:* D3 D4) D1
type B101010101 = :* (:* D3 D4) D1
type H154 = :* (:* D3 D4) D0
type D340 = :* (:* D3 D4) D0
type O524 = :* (:* D3 D4) D0
type B101010100 = :* (:* D3 D4) D0
type H153 = :* (:* D3 D3) D9
type D339 = :* (:* D3 D3) D9
type O523 = :* (:* D3 D3) D9
type B101010011 = :* (:* D3 D3) D9
type H152 = :* (:* D3 D3) D8
type D338 = :* (:* D3 D3) D8
type O522 = :* (:* D3 D3) D8
type B101010010 = :* (:* D3 D3) D8
type H151 = :* (:* D3 D3) D7
type D337 = :* (:* D3 D3) D7
type O521 = :* (:* D3 D3) D7
type B101010001 = :* (:* D3 D3) D7
type H150 = :* (:* D3 D3) D6
type D336 = :* (:* D3 D3) D6
type O520 = :* (:* D3 D3) D6
type B101010000 = :* (:* D3 D3) D6
type H14F = :* (:* D3 D3) D5
type D335 = :* (:* D3 D3) D5
type O517 = :* (:* D3 D3) D5
type B101001111 = :* (:* D3 D3) D5
type H14E = :* (:* D3 D3) D4
type D334 = :* (:* D3 D3) D4
type O516 = :* (:* D3 D3) D4
type B101001110 = :* (:* D3 D3) D4
type H14D = :* (:* D3 D3) D3
type D333 = :* (:* D3 D3) D3
type O515 = :* (:* D3 D3) D3
type B101001101 = :* (:* D3 D3) D3
type H14C = :* (:* D3 D3) D2
type D332 = :* (:* D3 D3) D2
type O514 = :* (:* D3 D3) D2
type B101001100 = :* (:* D3 D3) D2
type H14B = :* (:* D3 D3) D1
type D331 = :* (:* D3 D3) D1
type O513 = :* (:* D3 D3) D1
type B101001011 = :* (:* D3 D3) D1
type H14A = :* (:* D3 D3) D0
type D330 = :* (:* D3 D3) D0
type O512 = :* (:* D3 D3) D0
type B101001010 = :* (:* D3 D3) D0
type H149 = :* (:* D3 D2) D9
type D329 = :* (:* D3 D2) D9
type O511 = :* (:* D3 D2) D9
type B101001001 = :* (:* D3 D2) D9
type H148 = :* (:* D3 D2) D8
type D328 = :* (:* D3 D2) D8
type O510 = :* (:* D3 D2) D8
type B101001000 = :* (:* D3 D2) D8
type H147 = :* (:* D3 D2) D7
type D327 = :* (:* D3 D2) D7
type O507 = :* (:* D3 D2) D7
type B101000111 = :* (:* D3 D2) D7
type H146 = :* (:* D3 D2) D6
type D326 = :* (:* D3 D2) D6
type O506 = :* (:* D3 D2) D6
type B101000110 = :* (:* D3 D2) D6
type H145 = :* (:* D3 D2) D5
type D325 = :* (:* D3 D2) D5
type O505 = :* (:* D3 D2) D5
type B101000101 = :* (:* D3 D2) D5
type H144 = :* (:* D3 D2) D4
type D324 = :* (:* D3 D2) D4
type O504 = :* (:* D3 D2) D4
type B101000100 = :* (:* D3 D2) D4
type H143 = :* (:* D3 D2) D3
type D323 = :* (:* D3 D2) D3
type O503 = :* (:* D3 D2) D3
type B101000011 = :* (:* D3 D2) D3
type H142 = :* (:* D3 D2) D2
type D322 = :* (:* D3 D2) D2
type O502 = :* (:* D3 D2) D2
type B101000010 = :* (:* D3 D2) D2
type H141 = :* (:* D3 D2) D1
type D321 = :* (:* D3 D2) D1
type O501 = :* (:* D3 D2) D1
type B101000001 = :* (:* D3 D2) D1
type H140 = :* (:* D3 D2) D0
type D320 = :* (:* D3 D2) D0
type O500 = :* (:* D3 D2) D0
type B101000000 = :* (:* D3 D2) D0
type H13F = :* (:* D3 D1) D9
type D319 = :* (:* D3 D1) D9
type O477 = :* (:* D3 D1) D9
type B100111111 = :* (:* D3 D1) D9
type H13E = :* (:* D3 D1) D8
type D318 = :* (:* D3 D1) D8
type O476 = :* (:* D3 D1) D8
type B100111110 = :* (:* D3 D1) D8
type H13D = :* (:* D3 D1) D7
type D317 = :* (:* D3 D1) D7
type O475 = :* (:* D3 D1) D7
type B100111101 = :* (:* D3 D1) D7
type H13C = :* (:* D3 D1) D6
type D316 = :* (:* D3 D1) D6
type O474 = :* (:* D3 D1) D6
type B100111100 = :* (:* D3 D1) D6
type H13B = :* (:* D3 D1) D5
type D315 = :* (:* D3 D1) D5
type O473 = :* (:* D3 D1) D5
type B100111011 = :* (:* D3 D1) D5
type H13A = :* (:* D3 D1) D4
type D314 = :* (:* D3 D1) D4
type O472 = :* (:* D3 D1) D4
type B100111010 = :* (:* D3 D1) D4
type H139 = :* (:* D3 D1) D3
type D313 = :* (:* D3 D1) D3
type O471 = :* (:* D3 D1) D3
type B100111001 = :* (:* D3 D1) D3
type H138 = :* (:* D3 D1) D2
type D312 = :* (:* D3 D1) D2
type O470 = :* (:* D3 D1) D2
type B100111000 = :* (:* D3 D1) D2
type H137 = :* (:* D3 D1) D1
type D311 = :* (:* D3 D1) D1
type O467 = :* (:* D3 D1) D1
type B100110111 = :* (:* D3 D1) D1
type H136 = :* (:* D3 D1) D0
type D310 = :* (:* D3 D1) D0
type O466 = :* (:* D3 D1) D0
type B100110110 = :* (:* D3 D1) D0
type H135 = :* (:* D3 D0) D9
type D309 = :* (:* D3 D0) D9
type O465 = :* (:* D3 D0) D9
type B100110101 = :* (:* D3 D0) D9
type H134 = :* (:* D3 D0) D8
type D308 = :* (:* D3 D0) D8
type O464 = :* (:* D3 D0) D8
type B100110100 = :* (:* D3 D0) D8
type H133 = :* (:* D3 D0) D7
type D307 = :* (:* D3 D0) D7
type O463 = :* (:* D3 D0) D7
type B100110011 = :* (:* D3 D0) D7
type H132 = :* (:* D3 D0) D6
type D306 = :* (:* D3 D0) D6
type O462 = :* (:* D3 D0) D6
type B100110010 = :* (:* D3 D0) D6
type H131 = :* (:* D3 D0) D5
type D305 = :* (:* D3 D0) D5
type O461 = :* (:* D3 D0) D5
type B100110001 = :* (:* D3 D0) D5
type H130 = :* (:* D3 D0) D4
type D304 = :* (:* D3 D0) D4
type O460 = :* (:* D3 D0) D4
type B100110000 = :* (:* D3 D0) D4
type H12F = :* (:* D3 D0) D3
type D303 = :* (:* D3 D0) D3
type O457 = :* (:* D3 D0) D3
type B100101111 = :* (:* D3 D0) D3
type H12E = :* (:* D3 D0) D2
type D302 = :* (:* D3 D0) D2
type O456 = :* (:* D3 D0) D2
type B100101110 = :* (:* D3 D0) D2
type H12D = :* (:* D3 D0) D1
type D301 = :* (:* D3 D0) D1
type O455 = :* (:* D3 D0) D1
type B100101101 = :* (:* D3 D0) D1
type H12C = :* (:* D3 D0) D0
type D300 = :* (:* D3 D0) D0
type O454 = :* (:* D3 D0) D0
type B100101100 = :* (:* D3 D0) D0
type H12B = :* (:* D2 D9) D9
type D299 = :* (:* D2 D9) D9
type O453 = :* (:* D2 D9) D9
type B100101011 = :* (:* D2 D9) D9
type H12A = :* (:* D2 D9) D8
type D298 = :* (:* D2 D9) D8
type O452 = :* (:* D2 D9) D8
type B100101010 = :* (:* D2 D9) D8
type H129 = :* (:* D2 D9) D7
type D297 = :* (:* D2 D9) D7
type O451 = :* (:* D2 D9) D7
type B100101001 = :* (:* D2 D9) D7
type H128 = :* (:* D2 D9) D6
type D296 = :* (:* D2 D9) D6
type O450 = :* (:* D2 D9) D6
type B100101000 = :* (:* D2 D9) D6
type H127 = :* (:* D2 D9) D5
type D295 = :* (:* D2 D9) D5
type O447 = :* (:* D2 D9) D5
type B100100111 = :* (:* D2 D9) D5
type H126 = :* (:* D2 D9) D4
type D294 = :* (:* D2 D9) D4
type O446 = :* (:* D2 D9) D4
type B100100110 = :* (:* D2 D9) D4
type H125 = :* (:* D2 D9) D3
type D293 = :* (:* D2 D9) D3
type O445 = :* (:* D2 D9) D3
type B100100101 = :* (:* D2 D9) D3
type H124 = :* (:* D2 D9) D2
type D292 = :* (:* D2 D9) D2
type O444 = :* (:* D2 D9) D2
type B100100100 = :* (:* D2 D9) D2
type H123 = :* (:* D2 D9) D1
type D291 = :* (:* D2 D9) D1
type O443 = :* (:* D2 D9) D1
type B100100011 = :* (:* D2 D9) D1
type H122 = :* (:* D2 D9) D0
type D290 = :* (:* D2 D9) D0
type O442 = :* (:* D2 D9) D0
type B100100010 = :* (:* D2 D9) D0
type H121 = :* (:* D2 D8) D9
type D289 = :* (:* D2 D8) D9
type O441 = :* (:* D2 D8) D9
type B100100001 = :* (:* D2 D8) D9
type H120 = :* (:* D2 D8) D8
type D288 = :* (:* D2 D8) D8
type O440 = :* (:* D2 D8) D8
type B100100000 = :* (:* D2 D8) D8
type H11F = :* (:* D2 D8) D7
type D287 = :* (:* D2 D8) D7
type O437 = :* (:* D2 D8) D7
type B100011111 = :* (:* D2 D8) D7
type H11E = :* (:* D2 D8) D6
type D286 = :* (:* D2 D8) D6
type O436 = :* (:* D2 D8) D6
type B100011110 = :* (:* D2 D8) D6
type H11D = :* (:* D2 D8) D5
type D285 = :* (:* D2 D8) D5
type O435 = :* (:* D2 D8) D5
type B100011101 = :* (:* D2 D8) D5
type H11C = :* (:* D2 D8) D4
type D284 = :* (:* D2 D8) D4
type O434 = :* (:* D2 D8) D4
type B100011100 = :* (:* D2 D8) D4
type H11B = :* (:* D2 D8) D3
type D283 = :* (:* D2 D8) D3
type O433 = :* (:* D2 D8) D3
type B100011011 = :* (:* D2 D8) D3
type H11A = :* (:* D2 D8) D2
type D282 = :* (:* D2 D8) D2
type O432 = :* (:* D2 D8) D2
type B100011010 = :* (:* D2 D8) D2
type H119 = :* (:* D2 D8) D1
type D281 = :* (:* D2 D8) D1
type O431 = :* (:* D2 D8) D1
type B100011001 = :* (:* D2 D8) D1
type H118 = :* (:* D2 D8) D0
type D280 = :* (:* D2 D8) D0
type O430 = :* (:* D2 D8) D0
type B100011000 = :* (:* D2 D8) D0
type H117 = :* (:* D2 D7) D9
type D279 = :* (:* D2 D7) D9
type O427 = :* (:* D2 D7) D9
type B100010111 = :* (:* D2 D7) D9
type H116 = :* (:* D2 D7) D8
type D278 = :* (:* D2 D7) D8
type O426 = :* (:* D2 D7) D8
type B100010110 = :* (:* D2 D7) D8
type H115 = :* (:* D2 D7) D7
type D277 = :* (:* D2 D7) D7
type O425 = :* (:* D2 D7) D7
type B100010101 = :* (:* D2 D7) D7
type H114 = :* (:* D2 D7) D6
type D276 = :* (:* D2 D7) D6
type O424 = :* (:* D2 D7) D6
type B100010100 = :* (:* D2 D7) D6
type H113 = :* (:* D2 D7) D5
type D275 = :* (:* D2 D7) D5
type O423 = :* (:* D2 D7) D5
type B100010011 = :* (:* D2 D7) D5
type H112 = :* (:* D2 D7) D4
type D274 = :* (:* D2 D7) D4
type O422 = :* (:* D2 D7) D4
type B100010010 = :* (:* D2 D7) D4
type H111 = :* (:* D2 D7) D3
type D273 = :* (:* D2 D7) D3
type O421 = :* (:* D2 D7) D3
type B100010001 = :* (:* D2 D7) D3
type H110 = :* (:* D2 D7) D2
type D272 = :* (:* D2 D7) D2
type O420 = :* (:* D2 D7) D2
type B100010000 = :* (:* D2 D7) D2
type H10F = :* (:* D2 D7) D1
type D271 = :* (:* D2 D7) D1
type O417 = :* (:* D2 D7) D1
type B100001111 = :* (:* D2 D7) D1
type H10E = :* (:* D2 D7) D0
type D270 = :* (:* D2 D7) D0
type O416 = :* (:* D2 D7) D0
type B100001110 = :* (:* D2 D7) D0
type H10D = :* (:* D2 D6) D9
type D269 = :* (:* D2 D6) D9
type O415 = :* (:* D2 D6) D9
type B100001101 = :* (:* D2 D6) D9
type H10C = :* (:* D2 D6) D8
type D268 = :* (:* D2 D6) D8
type O414 = :* (:* D2 D6) D8
type B100001100 = :* (:* D2 D6) D8
type H10B = :* (:* D2 D6) D7
type D267 = :* (:* D2 D6) D7
type O413 = :* (:* D2 D6) D7
type B100001011 = :* (:* D2 D6) D7
type H10A = :* (:* D2 D6) D6
type D266 = :* (:* D2 D6) D6
type O412 = :* (:* D2 D6) D6
type B100001010 = :* (:* D2 D6) D6
type H109 = :* (:* D2 D6) D5
type D265 = :* (:* D2 D6) D5
type O411 = :* (:* D2 D6) D5
type B100001001 = :* (:* D2 D6) D5
type H108 = :* (:* D2 D6) D4
type D264 = :* (:* D2 D6) D4
type O410 = :* (:* D2 D6) D4
type B100001000 = :* (:* D2 D6) D4
type H107 = :* (:* D2 D6) D3
type D263 = :* (:* D2 D6) D3
type O407 = :* (:* D2 D6) D3
type B100000111 = :* (:* D2 D6) D3
type H106 = :* (:* D2 D6) D2
type D262 = :* (:* D2 D6) D2
type O406 = :* (:* D2 D6) D2
type B100000110 = :* (:* D2 D6) D2
type H105 = :* (:* D2 D6) D1
type D261 = :* (:* D2 D6) D1
type O405 = :* (:* D2 D6) D1
type B100000101 = :* (:* D2 D6) D1
type H104 = :* (:* D2 D6) D0
type D260 = :* (:* D2 D6) D0
type O404 = :* (:* D2 D6) D0
type B100000100 = :* (:* D2 D6) D0
type H103 = :* (:* D2 D5) D9
type D259 = :* (:* D2 D5) D9
type O403 = :* (:* D2 D5) D9
type B100000011 = :* (:* D2 D5) D9
type H102 = :* (:* D2 D5) D8
type D258 = :* (:* D2 D5) D8
type O402 = :* (:* D2 D5) D8
type B100000010 = :* (:* D2 D5) D8
type H101 = :* (:* D2 D5) D7
type D257 = :* (:* D2 D5) D7
type O401 = :* (:* D2 D5) D7
type B100000001 = :* (:* D2 D5) D7
type H100 = :* (:* D2 D5) D6
type D256 = :* (:* D2 D5) D6
type O400 = :* (:* D2 D5) D6
type B100000000 = :* (:* D2 D5) D6
type HFF = :* (:* D2 D5) D5
type D255 = :* (:* D2 D5) D5
type O377 = :* (:* D2 D5) D5
type B11111111 = :* (:* D2 D5) D5
type HFE = :* (:* D2 D5) D4
type D254 = :* (:* D2 D5) D4
type O376 = :* (:* D2 D5) D4
type B11111110 = :* (:* D2 D5) D4
type HFD = :* (:* D2 D5) D3
type D253 = :* (:* D2 D5) D3
type O375 = :* (:* D2 D5) D3
type B11111101 = :* (:* D2 D5) D3
type HFC = :* (:* D2 D5) D2
type D252 = :* (:* D2 D5) D2
type O374 = :* (:* D2 D5) D2
type B11111100 = :* (:* D2 D5) D2
type HFB = :* (:* D2 D5) D1
type D251 = :* (:* D2 D5) D1
type O373 = :* (:* D2 D5) D1
type B11111011 = :* (:* D2 D5) D1
type HFA = :* (:* D2 D5) D0
type D250 = :* (:* D2 D5) D0
type O372 = :* (:* D2 D5) D0
type B11111010 = :* (:* D2 D5) D0
type HF9 = :* (:* D2 D4) D9
type D249 = :* (:* D2 D4) D9
type O371 = :* (:* D2 D4) D9
type B11111001 = :* (:* D2 D4) D9
type HF8 = :* (:* D2 D4) D8
type D248 = :* (:* D2 D4) D8
type O370 = :* (:* D2 D4) D8
type B11111000 = :* (:* D2 D4) D8
type HF7 = :* (:* D2 D4) D7
type D247 = :* (:* D2 D4) D7
type O367 = :* (:* D2 D4) D7
type B11110111 = :* (:* D2 D4) D7
type HF6 = :* (:* D2 D4) D6
type D246 = :* (:* D2 D4) D6
type O366 = :* (:* D2 D4) D6
type B11110110 = :* (:* D2 D4) D6
type HF5 = :* (:* D2 D4) D5
type D245 = :* (:* D2 D4) D5
type O365 = :* (:* D2 D4) D5
type B11110101 = :* (:* D2 D4) D5
type HF4 = :* (:* D2 D4) D4
type D244 = :* (:* D2 D4) D4
type O364 = :* (:* D2 D4) D4
type B11110100 = :* (:* D2 D4) D4
type HF3 = :* (:* D2 D4) D3
type D243 = :* (:* D2 D4) D3
type O363 = :* (:* D2 D4) D3
type B11110011 = :* (:* D2 D4) D3
type HF2 = :* (:* D2 D4) D2
type D242 = :* (:* D2 D4) D2
type O362 = :* (:* D2 D4) D2
type B11110010 = :* (:* D2 D4) D2
type HF1 = :* (:* D2 D4) D1
type D241 = :* (:* D2 D4) D1
type O361 = :* (:* D2 D4) D1
type B11110001 = :* (:* D2 D4) D1
type HF0 = :* (:* D2 D4) D0
type D240 = :* (:* D2 D4) D0
type O360 = :* (:* D2 D4) D0
type B11110000 = :* (:* D2 D4) D0
type HEF = :* (:* D2 D3) D9
type D239 = :* (:* D2 D3) D9
type O357 = :* (:* D2 D3) D9
type B11101111 = :* (:* D2 D3) D9
type HEE = :* (:* D2 D3) D8
type D238 = :* (:* D2 D3) D8
type O356 = :* (:* D2 D3) D8
type B11101110 = :* (:* D2 D3) D8
type HED = :* (:* D2 D3) D7
type D237 = :* (:* D2 D3) D7
type O355 = :* (:* D2 D3) D7
type B11101101 = :* (:* D2 D3) D7
type HEC = :* (:* D2 D3) D6
type D236 = :* (:* D2 D3) D6
type O354 = :* (:* D2 D3) D6
type B11101100 = :* (:* D2 D3) D6
type HEB = :* (:* D2 D3) D5
type D235 = :* (:* D2 D3) D5
type O353 = :* (:* D2 D3) D5
type B11101011 = :* (:* D2 D3) D5
type HEA = :* (:* D2 D3) D4
type D234 = :* (:* D2 D3) D4
type O352 = :* (:* D2 D3) D4
type B11101010 = :* (:* D2 D3) D4
type HE9 = :* (:* D2 D3) D3
type D233 = :* (:* D2 D3) D3
type O351 = :* (:* D2 D3) D3
type B11101001 = :* (:* D2 D3) D3
type HE8 = :* (:* D2 D3) D2
type D232 = :* (:* D2 D3) D2
type O350 = :* (:* D2 D3) D2
type B11101000 = :* (:* D2 D3) D2
type HE7 = :* (:* D2 D3) D1
type D231 = :* (:* D2 D3) D1
type O347 = :* (:* D2 D3) D1
type B11100111 = :* (:* D2 D3) D1
type HE6 = :* (:* D2 D3) D0
type D230 = :* (:* D2 D3) D0
type O346 = :* (:* D2 D3) D0
type B11100110 = :* (:* D2 D3) D0
type HE5 = :* (:* D2 D2) D9
type D229 = :* (:* D2 D2) D9
type O345 = :* (:* D2 D2) D9
type B11100101 = :* (:* D2 D2) D9
type HE4 = :* (:* D2 D2) D8
type D228 = :* (:* D2 D2) D8
type O344 = :* (:* D2 D2) D8
type B11100100 = :* (:* D2 D2) D8
type HE3 = :* (:* D2 D2) D7
type D227 = :* (:* D2 D2) D7
type O343 = :* (:* D2 D2) D7
type B11100011 = :* (:* D2 D2) D7
type HE2 = :* (:* D2 D2) D6
type D226 = :* (:* D2 D2) D6
type O342 = :* (:* D2 D2) D6
type B11100010 = :* (:* D2 D2) D6
type HE1 = :* (:* D2 D2) D5
type D225 = :* (:* D2 D2) D5
type O341 = :* (:* D2 D2) D5
type B11100001 = :* (:* D2 D2) D5
type HE0 = :* (:* D2 D2) D4
type D224 = :* (:* D2 D2) D4
type O340 = :* (:* D2 D2) D4
type B11100000 = :* (:* D2 D2) D4
type HDF = :* (:* D2 D2) D3
type D223 = :* (:* D2 D2) D3
type O337 = :* (:* D2 D2) D3
type B11011111 = :* (:* D2 D2) D3
type HDE = :* (:* D2 D2) D2
type D222 = :* (:* D2 D2) D2
type O336 = :* (:* D2 D2) D2
type B11011110 = :* (:* D2 D2) D2
type HDD = :* (:* D2 D2) D1
type D221 = :* (:* D2 D2) D1
type O335 = :* (:* D2 D2) D1
type B11011101 = :* (:* D2 D2) D1
type HDC = :* (:* D2 D2) D0
type D220 = :* (:* D2 D2) D0
type O334 = :* (:* D2 D2) D0
type B11011100 = :* (:* D2 D2) D0
type HDB = :* (:* D2 D1) D9
type D219 = :* (:* D2 D1) D9
type O333 = :* (:* D2 D1) D9
type B11011011 = :* (:* D2 D1) D9
type HDA = :* (:* D2 D1) D8
type D218 = :* (:* D2 D1) D8
type O332 = :* (:* D2 D1) D8
type B11011010 = :* (:* D2 D1) D8
type HD9 = :* (:* D2 D1) D7
type D217 = :* (:* D2 D1) D7
type O331 = :* (:* D2 D1) D7
type B11011001 = :* (:* D2 D1) D7
type HD8 = :* (:* D2 D1) D6
type D216 = :* (:* D2 D1) D6
type O330 = :* (:* D2 D1) D6
type B11011000 = :* (:* D2 D1) D6
type HD7 = :* (:* D2 D1) D5
type D215 = :* (:* D2 D1) D5
type O327 = :* (:* D2 D1) D5
type B11010111 = :* (:* D2 D1) D5
type HD6 = :* (:* D2 D1) D4
type D214 = :* (:* D2 D1) D4
type O326 = :* (:* D2 D1) D4
type B11010110 = :* (:* D2 D1) D4
type HD5 = :* (:* D2 D1) D3
type D213 = :* (:* D2 D1) D3
type O325 = :* (:* D2 D1) D3
type B11010101 = :* (:* D2 D1) D3
type HD4 = :* (:* D2 D1) D2
type D212 = :* (:* D2 D1) D2
type O324 = :* (:* D2 D1) D2
type B11010100 = :* (:* D2 D1) D2
type HD3 = :* (:* D2 D1) D1
type D211 = :* (:* D2 D1) D1
type O323 = :* (:* D2 D1) D1
type B11010011 = :* (:* D2 D1) D1
type HD2 = :* (:* D2 D1) D0
type D210 = :* (:* D2 D1) D0
type O322 = :* (:* D2 D1) D0
type B11010010 = :* (:* D2 D1) D0
type HD1 = :* (:* D2 D0) D9
type D209 = :* (:* D2 D0) D9
type O321 = :* (:* D2 D0) D9
type B11010001 = :* (:* D2 D0) D9
type HD0 = :* (:* D2 D0) D8
type D208 = :* (:* D2 D0) D8
type O320 = :* (:* D2 D0) D8
type B11010000 = :* (:* D2 D0) D8
type HCF = :* (:* D2 D0) D7
type D207 = :* (:* D2 D0) D7
type O317 = :* (:* D2 D0) D7
type B11001111 = :* (:* D2 D0) D7
type HCE = :* (:* D2 D0) D6
type D206 = :* (:* D2 D0) D6
type O316 = :* (:* D2 D0) D6
type B11001110 = :* (:* D2 D0) D6
type HCD = :* (:* D2 D0) D5
type D205 = :* (:* D2 D0) D5
type O315 = :* (:* D2 D0) D5
type B11001101 = :* (:* D2 D0) D5
type HCC = :* (:* D2 D0) D4
type D204 = :* (:* D2 D0) D4
type O314 = :* (:* D2 D0) D4
type B11001100 = :* (:* D2 D0) D4
type HCB = :* (:* D2 D0) D3
type D203 = :* (:* D2 D0) D3
type O313 = :* (:* D2 D0) D3
type B11001011 = :* (:* D2 D0) D3
type HCA = :* (:* D2 D0) D2
type D202 = :* (:* D2 D0) D2
type O312 = :* (:* D2 D0) D2
type B11001010 = :* (:* D2 D0) D2
type HC9 = :* (:* D2 D0) D1
type D201 = :* (:* D2 D0) D1
type O311 = :* (:* D2 D0) D1
type B11001001 = :* (:* D2 D0) D1
type HC8 = :* (:* D2 D0) D0
type D200 = :* (:* D2 D0) D0
type O310 = :* (:* D2 D0) D0
type B11001000 = :* (:* D2 D0) D0
type HC7 = :* (:* D1 D9) D9
type D199 = :* (:* D1 D9) D9
type O307 = :* (:* D1 D9) D9
type B11000111 = :* (:* D1 D9) D9
type HC6 = :* (:* D1 D9) D8
type D198 = :* (:* D1 D9) D8
type O306 = :* (:* D1 D9) D8
type B11000110 = :* (:* D1 D9) D8
type HC5 = :* (:* D1 D9) D7
type D197 = :* (:* D1 D9) D7
type O305 = :* (:* D1 D9) D7
type B11000101 = :* (:* D1 D9) D7
type HC4 = :* (:* D1 D9) D6
type D196 = :* (:* D1 D9) D6
type O304 = :* (:* D1 D9) D6
type B11000100 = :* (:* D1 D9) D6
type HC3 = :* (:* D1 D9) D5
type D195 = :* (:* D1 D9) D5
type O303 = :* (:* D1 D9) D5
type B11000011 = :* (:* D1 D9) D5
type HC2 = :* (:* D1 D9) D4
type D194 = :* (:* D1 D9) D4
type O302 = :* (:* D1 D9) D4
type B11000010 = :* (:* D1 D9) D4
type HC1 = :* (:* D1 D9) D3
type D193 = :* (:* D1 D9) D3
type O301 = :* (:* D1 D9) D3
type B11000001 = :* (:* D1 D9) D3
type HC0 = :* (:* D1 D9) D2
type D192 = :* (:* D1 D9) D2
type O300 = :* (:* D1 D9) D2
type B11000000 = :* (:* D1 D9) D2
type HBF = :* (:* D1 D9) D1
type D191 = :* (:* D1 D9) D1
type O277 = :* (:* D1 D9) D1
type B10111111 = :* (:* D1 D9) D1
type HBE = :* (:* D1 D9) D0
type D190 = :* (:* D1 D9) D0
type O276 = :* (:* D1 D9) D0
type B10111110 = :* (:* D1 D9) D0
type HBD = :* (:* D1 D8) D9
type D189 = :* (:* D1 D8) D9
type O275 = :* (:* D1 D8) D9
type B10111101 = :* (:* D1 D8) D9
type HBC = :* (:* D1 D8) D8
type D188 = :* (:* D1 D8) D8
type O274 = :* (:* D1 D8) D8
type B10111100 = :* (:* D1 D8) D8
type HBB = :* (:* D1 D8) D7
type D187 = :* (:* D1 D8) D7
type O273 = :* (:* D1 D8) D7
type B10111011 = :* (:* D1 D8) D7
type HBA = :* (:* D1 D8) D6
type D186 = :* (:* D1 D8) D6
type O272 = :* (:* D1 D8) D6
type B10111010 = :* (:* D1 D8) D6
type HB9 = :* (:* D1 D8) D5
type D185 = :* (:* D1 D8) D5
type O271 = :* (:* D1 D8) D5
type B10111001 = :* (:* D1 D8) D5
type HB8 = :* (:* D1 D8) D4
type D184 = :* (:* D1 D8) D4
type O270 = :* (:* D1 D8) D4
type B10111000 = :* (:* D1 D8) D4
type HB7 = :* (:* D1 D8) D3
type D183 = :* (:* D1 D8) D3
type O267 = :* (:* D1 D8) D3
type B10110111 = :* (:* D1 D8) D3
type HB6 = :* (:* D1 D8) D2
type D182 = :* (:* D1 D8) D2
type O266 = :* (:* D1 D8) D2
type B10110110 = :* (:* D1 D8) D2
type HB5 = :* (:* D1 D8) D1
type D181 = :* (:* D1 D8) D1
type O265 = :* (:* D1 D8) D1
type B10110101 = :* (:* D1 D8) D1
type HB4 = :* (:* D1 D8) D0
type D180 = :* (:* D1 D8) D0
type O264 = :* (:* D1 D8) D0
type B10110100 = :* (:* D1 D8) D0
type HB3 = :* (:* D1 D7) D9
type D179 = :* (:* D1 D7) D9
type O263 = :* (:* D1 D7) D9
type B10110011 = :* (:* D1 D7) D9
type HB2 = :* (:* D1 D7) D8
type D178 = :* (:* D1 D7) D8
type O262 = :* (:* D1 D7) D8
type B10110010 = :* (:* D1 D7) D8
type HB1 = :* (:* D1 D7) D7
type D177 = :* (:* D1 D7) D7
type O261 = :* (:* D1 D7) D7
type B10110001 = :* (:* D1 D7) D7
type HB0 = :* (:* D1 D7) D6
type D176 = :* (:* D1 D7) D6
type O260 = :* (:* D1 D7) D6
type B10110000 = :* (:* D1 D7) D6
type HAF = :* (:* D1 D7) D5
type D175 = :* (:* D1 D7) D5
type O257 = :* (:* D1 D7) D5
type B10101111 = :* (:* D1 D7) D5
type HAE = :* (:* D1 D7) D4
type D174 = :* (:* D1 D7) D4
type O256 = :* (:* D1 D7) D4
type B10101110 = :* (:* D1 D7) D4
type HAD = :* (:* D1 D7) D3
type D173 = :* (:* D1 D7) D3
type O255 = :* (:* D1 D7) D3
type B10101101 = :* (:* D1 D7) D3
type HAC = :* (:* D1 D7) D2
type D172 = :* (:* D1 D7) D2
type O254 = :* (:* D1 D7) D2
type B10101100 = :* (:* D1 D7) D2
type HAB = :* (:* D1 D7) D1
type D171 = :* (:* D1 D7) D1
type O253 = :* (:* D1 D7) D1
type B10101011 = :* (:* D1 D7) D1
type HAA = :* (:* D1 D7) D0
type D170 = :* (:* D1 D7) D0
type O252 = :* (:* D1 D7) D0
type B10101010 = :* (:* D1 D7) D0
type HA9 = :* (:* D1 D6) D9
type D169 = :* (:* D1 D6) D9
type O251 = :* (:* D1 D6) D9
type B10101001 = :* (:* D1 D6) D9
type HA8 = :* (:* D1 D6) D8
type D168 = :* (:* D1 D6) D8
type O250 = :* (:* D1 D6) D8
type B10101000 = :* (:* D1 D6) D8
type HA7 = :* (:* D1 D6) D7
type D167 = :* (:* D1 D6) D7
type O247 = :* (:* D1 D6) D7
type B10100111 = :* (:* D1 D6) D7
type HA6 = :* (:* D1 D6) D6
type D166 = :* (:* D1 D6) D6
type O246 = :* (:* D1 D6) D6
type B10100110 = :* (:* D1 D6) D6
type HA5 = :* (:* D1 D6) D5
type D165 = :* (:* D1 D6) D5
type O245 = :* (:* D1 D6) D5
type B10100101 = :* (:* D1 D6) D5
type HA4 = :* (:* D1 D6) D4
type D164 = :* (:* D1 D6) D4
type O244 = :* (:* D1 D6) D4
type B10100100 = :* (:* D1 D6) D4
type HA3 = :* (:* D1 D6) D3
type D163 = :* (:* D1 D6) D3
type O243 = :* (:* D1 D6) D3
type B10100011 = :* (:* D1 D6) D3
type HA2 = :* (:* D1 D6) D2
type D162 = :* (:* D1 D6) D2
type O242 = :* (:* D1 D6) D2
type B10100010 = :* (:* D1 D6) D2
type HA1 = :* (:* D1 D6) D1
type D161 = :* (:* D1 D6) D1
type O241 = :* (:* D1 D6) D1
type B10100001 = :* (:* D1 D6) D1
type HA0 = :* (:* D1 D6) D0
type D160 = :* (:* D1 D6) D0
type O240 = :* (:* D1 D6) D0
type B10100000 = :* (:* D1 D6) D0
type H9F = :* (:* D1 D5) D9
type D159 = :* (:* D1 D5) D9
type O237 = :* (:* D1 D5) D9
type B10011111 = :* (:* D1 D5) D9
type H9E = :* (:* D1 D5) D8
type D158 = :* (:* D1 D5) D8
type O236 = :* (:* D1 D5) D8
type B10011110 = :* (:* D1 D5) D8
type H9D = :* (:* D1 D5) D7
type D157 = :* (:* D1 D5) D7
type O235 = :* (:* D1 D5) D7
type B10011101 = :* (:* D1 D5) D7
type H9C = :* (:* D1 D5) D6
type D156 = :* (:* D1 D5) D6
type O234 = :* (:* D1 D5) D6
type B10011100 = :* (:* D1 D5) D6
type H9B = :* (:* D1 D5) D5
type D155 = :* (:* D1 D5) D5
type O233 = :* (:* D1 D5) D5
type B10011011 = :* (:* D1 D5) D5
type H9A = :* (:* D1 D5) D4
type D154 = :* (:* D1 D5) D4
type O232 = :* (:* D1 D5) D4
type B10011010 = :* (:* D1 D5) D4
type H99 = :* (:* D1 D5) D3
type D153 = :* (:* D1 D5) D3
type O231 = :* (:* D1 D5) D3
type B10011001 = :* (:* D1 D5) D3
type H98 = :* (:* D1 D5) D2
type D152 = :* (:* D1 D5) D2
type O230 = :* (:* D1 D5) D2
type B10011000 = :* (:* D1 D5) D2
type H97 = :* (:* D1 D5) D1
type D151 = :* (:* D1 D5) D1
type O227 = :* (:* D1 D5) D1
type B10010111 = :* (:* D1 D5) D1
type H96 = :* (:* D1 D5) D0
type D150 = :* (:* D1 D5) D0
type O226 = :* (:* D1 D5) D0
type B10010110 = :* (:* D1 D5) D0
type H95 = :* (:* D1 D4) D9
type D149 = :* (:* D1 D4) D9
type O225 = :* (:* D1 D4) D9
type B10010101 = :* (:* D1 D4) D9
type H94 = :* (:* D1 D4) D8
type D148 = :* (:* D1 D4) D8
type O224 = :* (:* D1 D4) D8
type B10010100 = :* (:* D1 D4) D8
type H93 = :* (:* D1 D4) D7
type D147 = :* (:* D1 D4) D7
type O223 = :* (:* D1 D4) D7
type B10010011 = :* (:* D1 D4) D7
type H92 = :* (:* D1 D4) D6
type D146 = :* (:* D1 D4) D6
type O222 = :* (:* D1 D4) D6
type B10010010 = :* (:* D1 D4) D6
type H91 = :* (:* D1 D4) D5
type D145 = :* (:* D1 D4) D5
type O221 = :* (:* D1 D4) D5
type B10010001 = :* (:* D1 D4) D5
type H90 = :* (:* D1 D4) D4
type D144 = :* (:* D1 D4) D4
type O220 = :* (:* D1 D4) D4
type B10010000 = :* (:* D1 D4) D4
type H8F = :* (:* D1 D4) D3
type D143 = :* (:* D1 D4) D3
type O217 = :* (:* D1 D4) D3
type B10001111 = :* (:* D1 D4) D3
type H8E = :* (:* D1 D4) D2
type D142 = :* (:* D1 D4) D2
type O216 = :* (:* D1 D4) D2
type B10001110 = :* (:* D1 D4) D2
type H8D = :* (:* D1 D4) D1
type D141 = :* (:* D1 D4) D1
type O215 = :* (:* D1 D4) D1
type B10001101 = :* (:* D1 D4) D1
type H8C = :* (:* D1 D4) D0
type D140 = :* (:* D1 D4) D0
type O214 = :* (:* D1 D4) D0
type B10001100 = :* (:* D1 D4) D0
type H8B = :* (:* D1 D3) D9
type D139 = :* (:* D1 D3) D9
type O213 = :* (:* D1 D3) D9
type B10001011 = :* (:* D1 D3) D9
type H8A = :* (:* D1 D3) D8
type D138 = :* (:* D1 D3) D8
type O212 = :* (:* D1 D3) D8
type B10001010 = :* (:* D1 D3) D8
type H89 = :* (:* D1 D3) D7
type D137 = :* (:* D1 D3) D7
type O211 = :* (:* D1 D3) D7
type B10001001 = :* (:* D1 D3) D7
type H88 = :* (:* D1 D3) D6
type D136 = :* (:* D1 D3) D6
type O210 = :* (:* D1 D3) D6
type B10001000 = :* (:* D1 D3) D6
type H87 = :* (:* D1 D3) D5
type D135 = :* (:* D1 D3) D5
type O207 = :* (:* D1 D3) D5
type B10000111 = :* (:* D1 D3) D5
type H86 = :* (:* D1 D3) D4
type D134 = :* (:* D1 D3) D4
type O206 = :* (:* D1 D3) D4
type B10000110 = :* (:* D1 D3) D4
type H85 = :* (:* D1 D3) D3
type D133 = :* (:* D1 D3) D3
type O205 = :* (:* D1 D3) D3
type B10000101 = :* (:* D1 D3) D3
type H84 = :* (:* D1 D3) D2
type D132 = :* (:* D1 D3) D2
type O204 = :* (:* D1 D3) D2
type B10000100 = :* (:* D1 D3) D2
type H83 = :* (:* D1 D3) D1
type D131 = :* (:* D1 D3) D1
type O203 = :* (:* D1 D3) D1
type B10000011 = :* (:* D1 D3) D1
type H82 = :* (:* D1 D3) D0
type D130 = :* (:* D1 D3) D0
type O202 = :* (:* D1 D3) D0
type B10000010 = :* (:* D1 D3) D0
type H81 = :* (:* D1 D2) D9
type D129 = :* (:* D1 D2) D9
type O201 = :* (:* D1 D2) D9
type B10000001 = :* (:* D1 D2) D9
type H80 = :* (:* D1 D2) D8
type D128 = :* (:* D1 D2) D8
type O200 = :* (:* D1 D2) D8
type B10000000 = :* (:* D1 D2) D8
type H7F = :* (:* D1 D2) D7
type D127 = :* (:* D1 D2) D7
type O177 = :* (:* D1 D2) D7
type B1111111 = :* (:* D1 D2) D7
type H7E = :* (:* D1 D2) D6
type D126 = :* (:* D1 D2) D6
type O176 = :* (:* D1 D2) D6
type B1111110 = :* (:* D1 D2) D6
type H7D = :* (:* D1 D2) D5
type D125 = :* (:* D1 D2) D5
type O175 = :* (:* D1 D2) D5
type B1111101 = :* (:* D1 D2) D5
type H7C = :* (:* D1 D2) D4
type D124 = :* (:* D1 D2) D4
type O174 = :* (:* D1 D2) D4
type B1111100 = :* (:* D1 D2) D4
type H7B = :* (:* D1 D2) D3
type D123 = :* (:* D1 D2) D3
type O173 = :* (:* D1 D2) D3
type B1111011 = :* (:* D1 D2) D3
type H7A = :* (:* D1 D2) D2
type D122 = :* (:* D1 D2) D2
type O172 = :* (:* D1 D2) D2
type B1111010 = :* (:* D1 D2) D2
type H79 = :* (:* D1 D2) D1
type D121 = :* (:* D1 D2) D1
type O171 = :* (:* D1 D2) D1
type B1111001 = :* (:* D1 D2) D1
type H78 = :* (:* D1 D2) D0
type D120 = :* (:* D1 D2) D0
type O170 = :* (:* D1 D2) D0
type B1111000 = :* (:* D1 D2) D0
type H77 = :* (:* D1 D1) D9
type D119 = :* (:* D1 D1) D9
type O167 = :* (:* D1 D1) D9
type B1110111 = :* (:* D1 D1) D9
type H76 = :* (:* D1 D1) D8
type D118 = :* (:* D1 D1) D8
type O166 = :* (:* D1 D1) D8
type B1110110 = :* (:* D1 D1) D8
type H75 = :* (:* D1 D1) D7
type D117 = :* (:* D1 D1) D7
type O165 = :* (:* D1 D1) D7
type B1110101 = :* (:* D1 D1) D7
type H74 = :* (:* D1 D1) D6
type D116 = :* (:* D1 D1) D6
type O164 = :* (:* D1 D1) D6
type B1110100 = :* (:* D1 D1) D6
type H73 = :* (:* D1 D1) D5
type D115 = :* (:* D1 D1) D5
type O163 = :* (:* D1 D1) D5
type B1110011 = :* (:* D1 D1) D5
type H72 = :* (:* D1 D1) D4
type D114 = :* (:* D1 D1) D4
type O162 = :* (:* D1 D1) D4
type B1110010 = :* (:* D1 D1) D4
type H71 = :* (:* D1 D1) D3
type D113 = :* (:* D1 D1) D3
type O161 = :* (:* D1 D1) D3
type B1110001 = :* (:* D1 D1) D3
type H70 = :* (:* D1 D1) D2
type D112 = :* (:* D1 D1) D2
type O160 = :* (:* D1 D1) D2
type B1110000 = :* (:* D1 D1) D2
type H6F = :* (:* D1 D1) D1
type D111 = :* (:* D1 D1) D1
type O157 = :* (:* D1 D1) D1
type B1101111 = :* (:* D1 D1) D1
type H6E = :* (:* D1 D1) D0
type D110 = :* (:* D1 D1) D0
type O156 = :* (:* D1 D1) D0
type B1101110 = :* (:* D1 D1) D0
type H6D = :* (:* D1 D0) D9
type D109 = :* (:* D1 D0) D9
type O155 = :* (:* D1 D0) D9
type B1101101 = :* (:* D1 D0) D9
type H6C = :* (:* D1 D0) D8
type D108 = :* (:* D1 D0) D8
type O154 = :* (:* D1 D0) D8
type B1101100 = :* (:* D1 D0) D8
type H6B = :* (:* D1 D0) D7
type D107 = :* (:* D1 D0) D7
type O153 = :* (:* D1 D0) D7
type B1101011 = :* (:* D1 D0) D7
type H6A = :* (:* D1 D0) D6
type D106 = :* (:* D1 D0) D6
type O152 = :* (:* D1 D0) D6
type B1101010 = :* (:* D1 D0) D6
type H69 = :* (:* D1 D0) D5
type D105 = :* (:* D1 D0) D5
type O151 = :* (:* D1 D0) D5
type B1101001 = :* (:* D1 D0) D5
type H68 = :* (:* D1 D0) D4
type D104 = :* (:* D1 D0) D4
type O150 = :* (:* D1 D0) D4
type B1101000 = :* (:* D1 D0) D4
type H67 = :* (:* D1 D0) D3
type D103 = :* (:* D1 D0) D3
type O147 = :* (:* D1 D0) D3
type B1100111 = :* (:* D1 D0) D3
type H66 = :* (:* D1 D0) D2
type D102 = :* (:* D1 D0) D2
type O146 = :* (:* D1 D0) D2
type B1100110 = :* (:* D1 D0) D2
type H65 = :* (:* D1 D0) D1
type D101 = :* (:* D1 D0) D1
type O145 = :* (:* D1 D0) D1
type B1100101 = :* (:* D1 D0) D1
type H64 = :* (:* D1 D0) D0
type D100 = :* (:* D1 D0) D0
type O144 = :* (:* D1 D0) D0
type B1100100 = :* (:* D1 D0) D0
type H63 = :* D9 D9
type D99 = :* D9 D9
type O143 = :* D9 D9
type B1100011 = :* D9 D9
type H62 = :* D9 D8
type D98 = :* D9 D8
type O142 = :* D9 D8
type B1100010 = :* D9 D8
type H61 = :* D9 D7
type D97 = :* D9 D7
type O141 = :* D9 D7
type B1100001 = :* D9 D7
type H60 = :* D9 D6
type D96 = :* D9 D6
type O140 = :* D9 D6
type B1100000 = :* D9 D6
type H5F = :* D9 D5
type D95 = :* D9 D5
type O137 = :* D9 D5
type B1011111 = :* D9 D5
type H5E = :* D9 D4
type D94 = :* D9 D4
type O136 = :* D9 D4
type B1011110 = :* D9 D4
type H5D = :* D9 D3
type D93 = :* D9 D3
type O135 = :* D9 D3
type B1011101 = :* D9 D3
type H5C = :* D9 D2
type D92 = :* D9 D2
type O134 = :* D9 D2
type B1011100 = :* D9 D2
type H5B = :* D9 D1
type D91 = :* D9 D1
type O133 = :* D9 D1
type B1011011 = :* D9 D1
type H5A = :* D9 D0
type D90 = :* D9 D0
type O132 = :* D9 D0
type B1011010 = :* D9 D0
type H59 = :* D8 D9
type D89 = :* D8 D9
type O131 = :* D8 D9
type B1011001 = :* D8 D9
type H58 = :* D8 D8
type D88 = :* D8 D8
type O130 = :* D8 D8
type B1011000 = :* D8 D8
type H57 = :* D8 D7
type D87 = :* D8 D7
type O127 = :* D8 D7
type B1010111 = :* D8 D7
type H56 = :* D8 D6
type D86 = :* D8 D6
type O126 = :* D8 D6
type B1010110 = :* D8 D6
type H55 = :* D8 D5
type D85 = :* D8 D5
type O125 = :* D8 D5
type B1010101 = :* D8 D5
type H54 = :* D8 D4
type D84 = :* D8 D4
type O124 = :* D8 D4
type B1010100 = :* D8 D4
type H53 = :* D8 D3
type D83 = :* D8 D3
type O123 = :* D8 D3
type B1010011 = :* D8 D3
type H52 = :* D8 D2
type D82 = :* D8 D2
type O122 = :* D8 D2
type B1010010 = :* D8 D2
type H51 = :* D8 D1
type D81 = :* D8 D1
type O121 = :* D8 D1
type B1010001 = :* D8 D1
type H50 = :* D8 D0
type D80 = :* D8 D0
type O120 = :* D8 D0
type B1010000 = :* D8 D0
type H4F = :* D7 D9
type D79 = :* D7 D9
type O117 = :* D7 D9
type B1001111 = :* D7 D9
type H4E = :* D7 D8
type D78 = :* D7 D8
type O116 = :* D7 D8
type B1001110 = :* D7 D8
type H4D = :* D7 D7
type D77 = :* D7 D7
type O115 = :* D7 D7
type B1001101 = :* D7 D7
type H4C = :* D7 D6
type D76 = :* D7 D6
type O114 = :* D7 D6
type B1001100 = :* D7 D6
type H4B = :* D7 D5
type D75 = :* D7 D5
type O113 = :* D7 D5
type B1001011 = :* D7 D5
type H4A = :* D7 D4
type D74 = :* D7 D4
type O112 = :* D7 D4
type B1001010 = :* D7 D4
type H49 = :* D7 D3
type D73 = :* D7 D3
type O111 = :* D7 D3
type B1001001 = :* D7 D3
type H48 = :* D7 D2
type D72 = :* D7 D2
type O110 = :* D7 D2
type B1001000 = :* D7 D2
type H47 = :* D7 D1
type D71 = :* D7 D1
type O107 = :* D7 D1
type B1000111 = :* D7 D1
type H46 = :* D7 D0
type D70 = :* D7 D0
type O106 = :* D7 D0
type B1000110 = :* D7 D0
type H45 = :* D6 D9
type D69 = :* D6 D9
type O105 = :* D6 D9
type B1000101 = :* D6 D9
type H44 = :* D6 D8
type D68 = :* D6 D8
type O104 = :* D6 D8
type B1000100 = :* D6 D8
type H43 = :* D6 D7
type D67 = :* D6 D7
type O103 = :* D6 D7
type B1000011 = :* D6 D7
type H42 = :* D6 D6
type D66 = :* D6 D6
type O102 = :* D6 D6
type B1000010 = :* D6 D6
type H41 = :* D6 D5
type D65 = :* D6 D5
type O101 = :* D6 D5
type B1000001 = :* D6 D5
type H40 = :* D6 D4
type D64 = :* D6 D4
type O100 = :* D6 D4
type B1000000 = :* D6 D4
type H3F = :* D6 D3
type D63 = :* D6 D3
type O77 = :* D6 D3
type B111111 = :* D6 D3
type H3E = :* D6 D2
type D62 = :* D6 D2
type O76 = :* D6 D2
type B111110 = :* D6 D2
type H3D = :* D6 D1
type D61 = :* D6 D1
type O75 = :* D6 D1
type B111101 = :* D6 D1
type H3C = :* D6 D0
type D60 = :* D6 D0
type O74 = :* D6 D0
type B111100 = :* D6 D0
type H3B = :* D5 D9
type D59 = :* D5 D9
type O73 = :* D5 D9
type B111011 = :* D5 D9
type H3A = :* D5 D8
type D58 = :* D5 D8
type O72 = :* D5 D8
type B111010 = :* D5 D8
type H39 = :* D5 D7
type D57 = :* D5 D7
type O71 = :* D5 D7
type B111001 = :* D5 D7
type H38 = :* D5 D6
type D56 = :* D5 D6
type O70 = :* D5 D6
type B111000 = :* D5 D6
type H37 = :* D5 D5
type D55 = :* D5 D5
type O67 = :* D5 D5
type B110111 = :* D5 D5
type H36 = :* D5 D4
type D54 = :* D5 D4
type O66 = :* D5 D4
type B110110 = :* D5 D4
type H35 = :* D5 D3
type D53 = :* D5 D3
type O65 = :* D5 D3
type B110101 = :* D5 D3
type H34 = :* D5 D2
type D52 = :* D5 D2
type O64 = :* D5 D2
type B110100 = :* D5 D2
type H33 = :* D5 D1
type D51 = :* D5 D1
type O63 = :* D5 D1
type B110011 = :* D5 D1
type H32 = :* D5 D0
type D50 = :* D5 D0
type O62 = :* D5 D0
type B110010 = :* D5 D0
type H31 = :* D4 D9
type D49 = :* D4 D9
type O61 = :* D4 D9
type B110001 = :* D4 D9
type H30 = :* D4 D8
type D48 = :* D4 D8
type O60 = :* D4 D8
type B110000 = :* D4 D8
type H2F = :* D4 D7
type D47 = :* D4 D7
type O57 = :* D4 D7
type B101111 = :* D4 D7
type H2E = :* D4 D6
type D46 = :* D4 D6
type O56 = :* D4 D6
type B101110 = :* D4 D6
type H2D = :* D4 D5
type D45 = :* D4 D5
type O55 = :* D4 D5
type B101101 = :* D4 D5
type H2C = :* D4 D4
type D44 = :* D4 D4
type O54 = :* D4 D4
type B101100 = :* D4 D4
type H2B = :* D4 D3
type D43 = :* D4 D3
type O53 = :* D4 D3
type B101011 = :* D4 D3
type H2A = :* D4 D2
type D42 = :* D4 D2
type O52 = :* D4 D2
type B101010 = :* D4 D2
type H29 = :* D4 D1
type D41 = :* D4 D1
type O51 = :* D4 D1
type B101001 = :* D4 D1
type H28 = :* D4 D0
type D40 = :* D4 D0
type O50 = :* D4 D0
type B101000 = :* D4 D0
type H27 = :* D3 D9
type D39 = :* D3 D9
type O47 = :* D3 D9
type B100111 = :* D3 D9
type H26 = :* D3 D8
type D38 = :* D3 D8
type O46 = :* D3 D8
type B100110 = :* D3 D8
type H25 = :* D3 D7
type D37 = :* D3 D7
type O45 = :* D3 D7
type B100101 = :* D3 D7
type H24 = :* D3 D6
type D36 = :* D3 D6
type O44 = :* D3 D6
type B100100 = :* D3 D6
type H23 = :* D3 D5
type D35 = :* D3 D5
type O43 = :* D3 D5
type B100011 = :* D3 D5
type H22 = :* D3 D4
type D34 = :* D3 D4
type O42 = :* D3 D4
type B100010 = :* D3 D4
type H21 = :* D3 D3
type D33 = :* D3 D3
type O41 = :* D3 D3
type B100001 = :* D3 D3
type H20 = :* D3 D2
type D32 = :* D3 D2
type O40 = :* D3 D2
type B100000 = :* D3 D2
type H1F = :* D3 D1
type D31 = :* D3 D1
type O37 = :* D3 D1
type B11111 = :* D3 D1
type H1E = :* D3 D0
type D30 = :* D3 D0
type O36 = :* D3 D0
type B11110 = :* D3 D0
type H1D = :* D2 D9
type D29 = :* D2 D9
type O35 = :* D2 D9
type B11101 = :* D2 D9
type H1C = :* D2 D8
type D28 = :* D2 D8
type O34 = :* D2 D8
type B11100 = :* D2 D8
type H1B = :* D2 D7
type D27 = :* D2 D7
type O33 = :* D2 D7
type B11011 = :* D2 D7
type H1A = :* D2 D6
type D26 = :* D2 D6
type O32 = :* D2 D6
type B11010 = :* D2 D6
type H19 = :* D2 D5
type D25 = :* D2 D5
type O31 = :* D2 D5
type B11001 = :* D2 D5
type H18 = :* D2 D4
type D24 = :* D2 D4
type O30 = :* D2 D4
type B11000 = :* D2 D4
type H17 = :* D2 D3
type D23 = :* D2 D3
type O27 = :* D2 D3
type B10111 = :* D2 D3
type H16 = :* D2 D2
type D22 = :* D2 D2
type O26 = :* D2 D2
type B10110 = :* D2 D2
type H15 = :* D2 D1
type D21 = :* D2 D1
type O25 = :* D2 D1
type B10101 = :* D2 D1
type H14 = :* D2 D0
type D20 = :* D2 D0
type O24 = :* D2 D0
type B10100 = :* D2 D0
type H13 = :* D1 D9
type D19 = :* D1 D9
type O23 = :* D1 D9
type B10011 = :* D1 D9
type H12 = :* D1 D8
type D18 = :* D1 D8
type O22 = :* D1 D8
type B10010 = :* D1 D8
type H11 = :* D1 D7
type D17 = :* D1 D7
type O21 = :* D1 D7
type B10001 = :* D1 D7
type H10 = :* D1 D6
type D16 = :* D1 D6
type O20 = :* D1 D6
type B10000 = :* D1 D6
type HF = :* D1 D5
type D15 = :* D1 D5
type O17 = :* D1 D5
type B1111 = :* D1 D5
type HE = :* D1 D4
type D14 = :* D1 D4
type O16 = :* D1 D4
type B1110 = :* D1 D4
type HD = :* D1 D3
type D13 = :* D1 D3
type O15 = :* D1 D3
type B1101 = :* D1 D3
type HC = :* D1 D2
type D12 = :* D1 D2
type O14 = :* D1 D2
type B1100 = :* D1 D2
type HB = :* D1 D1
type D11 = :* D1 D1
type O13 = :* D1 D1
type B1011 = :* D1 D1
type HA = :* D1 D0
type D10 = :* D1 D0
type O12 = :* D1 D0
type B1010 = :* D1 D0
type H9 = D9
type O11 = D9
type B1001 = D9
type H8 = D8
type O10 = D8
type B1000 = D8
type H7 = D7
type O7 = D7
type B111 = D7
type H6 = D6
type O6 = D6
type B110 = D6
type H5 = D5
type O5 = D5
type B101 = D5
type H4 = D4
type O4 = D4
type B100 = D4
type H3 = D3
type O3 = D3
type B11 = D3
type H2 = D2
type O2 = D2
type B10 = D2
type H1 = D1
type O1 = D1
type B1 = D1
type H0 = D0
type O0 = D0
type B0 = D0
type SSym1 (t_abVh :: Nat) = S t_abVh
type ZSym0 = Z
type SNat (z_abVk :: Nat) = Sing z_abVk
type MinSym2 (t_acqs :: Nat) (t_acqt :: Nat) = Min t_acqs t_acqt
type MaxSym2 (t_acqf :: Nat) (t_acqg :: Nat) = Max t_acqf t_acqg
type (:+:) n m = n :+ m
type (:+$$$) (t_acRL :: Nat) (t_acRM :: Nat) = (:+) t_acRL t_acRM
type (:*:) n m = n :* m
type (:*$$$) (t_acRX :: Nat) (t_acRY :: Nat) = (:*) t_acRX t_acRY
type (:-:) n m = n :- m
type (:**:) n m = n :** m
type (:-$$$) (t_acRy :: Nat) (t_acRz :: Nat) = (:-) t_acRy t_acRz
type (:<<=$$$) (t_adQ7 :: Nat) (t_adQ8 :: Nat) = (:<<=) t_adQ7 t_adQ8
type LeqInstance n m = Dict (n :<= m)
type LeqTrueInstance a b = Dict ((a :<<= b) ~ True)
type Zero = (ZSym0 :: Nat)
type One = (Apply SSym0 ZeroSym0 :: Nat)
type Two = (Apply SSym0 OneSym0 :: Nat)
type Three = (Apply SSym0 TwoSym0 :: Nat)
type Four = (Apply SSym0 ThreeSym0 :: Nat)
type Five = (Apply SSym0 FourSym0 :: Nat)
type Six = (Apply SSym0 FiveSym0 :: Nat)
type Seven = (Apply SSym0 SixSym0 :: Nat)
type Eight = (Apply SSym0 SevenSym0 :: Nat)
type Nine = (Apply SSym0 EightSym0 :: Nat)
type Ten = (Apply SSym0 NineSym0 :: Nat)
type Eleven = (Apply SSym0 TenSym0 :: Nat)
type Twelve = (Apply SSym0 ElevenSym0 :: Nat)
type Thirteen = (Apply SSym0 TwelveSym0 :: Nat)
type Fourteen = (Apply SSym0 ThirteenSym0 :: Nat)
type Fifteen = (Apply SSym0 FourteenSym0 :: Nat)
type Sixteen = (Apply SSym0 FifteenSym0 :: Nat)
type Seventeen = (Apply SSym0 SixteenSym0 :: Nat)
type Eighteen = (Apply SSym0 SeventeenSym0 :: Nat)
type Nineteen = (Apply SSym0 EighteenSym0 :: Nat)
type Twenty = (Apply SSym0 NineteenSym0 :: Nat)
type ZeroSym0 = Zero
type OneSym0 = One
type TwoSym0 = Two
type ThreeSym0 = Three
type FourSym0 = Four
type FiveSym0 = Five
type SixSym0 = Six
type SevenSym0 = Seven
type EightSym0 = Eight
type NineSym0 = Nine
type TenSym0 = Ten
type ElevenSym0 = Eleven
type TwelveSym0 = Twelve
type ThirteenSym0 = Thirteen
type FourteenSym0 = Fourteen
type FifteenSym0 = Fifteen
type SixteenSym0 = Sixteen
type SeventeenSym0 = Seventeen
type EighteenSym0 = Eighteen
type NineteenSym0 = Nineteen
type TwentySym0 = Twenty
type N0 = (ZeroSym0 :: Nat)
type N1 = (OneSym0 :: Nat)
type N2 = (TwoSym0 :: Nat)
type N3 = (ThreeSym0 :: Nat)
type N4 = (FourSym0 :: Nat)
type N5 = (FiveSym0 :: Nat)
type N6 = (SixSym0 :: Nat)
type N7 = (SevenSym0 :: Nat)
type N8 = (EightSym0 :: Nat)
type N9 = (NineSym0 :: Nat)
type N10 = (TenSym0 :: Nat)
type N11 = (ElevenSym0 :: Nat)
type N12 = (TwelveSym0 :: Nat)
type N13 = (ThirteenSym0 :: Nat)
type N14 = (FourteenSym0 :: Nat)
type N15 = (FifteenSym0 :: Nat)
type N16 = (SixteenSym0 :: Nat)
type N17 = (SeventeenSym0 :: Nat)
type N18 = (EighteenSym0 :: Nat)
type N19 = (NineteenSym0 :: Nat)
type N20 = (TwentySym0 :: Nat)
type N0Sym0 = N0
type N1Sym0 = N1
type N2Sym0 = N2
type N3Sym0 = N3
type N4Sym0 = N4
type N5Sym0 = N5
type N6Sym0 = N6
type N7Sym0 = N7
type N8Sym0 = N8
type N9Sym0 = N9
type N10Sym0 = N10
type N11Sym0 = N11
type N12Sym0 = N12
type N13Sym0 = N13
type N14Sym0 = N14
type N15Sym0 = N15
type N16Sym0 = N16
type N17Sym0 = N17
type N18Sym0 = N18
type N19Sym0 = N19
type N20Sym0 = N20
type OrdCase x a b c = OrdCase_ x a b c
type IsEQ t = OrdCase t False True False
type IsLT t = OrdCase t True False False
type IsGT t = OrdCase t False False True
type SpineCompare l r = Compare (Spine l) (Spine r)
type Compare l r = SpineCompare l r
type Not a = a -> Falsity
type COr r a b = Cont r (Either a b)
type :∈: a set = set a
type Subset = :⊆:
type Singleton a = :=: a
type Union = :∪:
type Inter = :∩:
type DependentSum = Σ
type Disjoint s1 s2 = (s1 :∩: s2) :⊆: Empty
type Prod = :×:
type ::∈: a set = set (Lower a)
type Total dom f = forall a :: *. a :∈: dom -> ExSnd f a
type Sval f = forall a b1 b2 r. (a, b1) :∈: f -> (a, b2) :∈: f -> (b1 ~ b2 => r) -> r
type :~~>: dom cod = Lower1 (dom :~>: cod)
type Id dom = Incl dom dom
type EqualiserIncl s f1 f2 = Incl (Equaliser f1 f2) s
type ExampleSet = (TypeableType :∩: IntegralType) :∪: (Singleton String)
type Graph = (Type, Dictionary)
type TypeVar = Name
type TypeCon = (Namespace, Name)
type Name = Text
type Namespace = Text
type Dictionary = [(TypeCon, Declaration)]
type Constructor = (Name, [Type])
type Result a = Either String a
type N0 = Z
type N1 = S N0
type N2 = S N1
type N3 = S N2
type N4 = S N3
type N5 = S N4
type N6 = S N5
type N7 = S N6
type N8 = S N7
type N9 = S N8
type N10 = S N9
type N11 = S N10
type N12 = S N11
type N13 = S N12
type N14 = S N13
type N15 = S N14
type N16 = S N15
type Vec0 = Vec N0
type Vec1 = Vec N1
type Vec2 = Vec N2
type Vec3 = Vec N3
type Vec4 = Vec N4
type Vec5 = Vec N5
type Vec6 = Vec N6
type Vec7 = Vec N7
type Vec8 = Vec N8
type Vec9 = Vec N9
type Vec10 = Vec N10
type Vec11 = Vec N11
type Vec12 = Vec N12
type Vec13 = Vec N13
type Vec14 = Vec N14
type Vec15 = Vec N15
type Vec16 = Vec N16
type (:<->:) a b = Bijection (->) a b
type Unop a = a -> a
type Binop a = a -> a -> a
type O = :.
type OI = Flip (->) (IO ())
type App = :$
type (:->:) = Arrw (->)
type MonoidDict a = (a, a -> a -> a)
type PairTy f = forall a b. f a -> f b -> f (a, b)
type UnpairTy f = forall a b. f (a, b) -> (f a, f b)
type ZipTy f = forall a b. f a -> f b -> f (a, b)
type UnzipTy f = forall a b. f (a, b) -> (f a, f b)
type Partial = Endo
type PartialX a b = Partial a -> Partial b
type LambdaTy src snk = forall a b. src a -> snk b -> snk (a -> b)
type Vec0 = Vec
type Vec1 = :~ Vec0
type Vec2 = :~ Vec1
type Vec3 = :~ Vec2
type Vec4 = :~ Vec3
type Vec5 = :~ Vec4
type Vec6 = :~ Vec5
type Vec7 = :~ Vec6
type Vec8 = :~ Vec7
type Vec9 = :~ Vec8
type Vec10 = :~ Vec9
type Zero = Z
type One = S Z
type Two = S One
type Three = S Two
type Four = S Three
type Five = S Four
type Six = S Five
type Seven = S Six
type Eight = S Seven
type Nine = S Eight
type Ten = S Nine
type N1 = HNil
type N2 = B0 :#: HNil
type N3 = B1 :#: HNil
type N4 = B0 :#: N2
type TZDescription = Either (ByteString, ByteString) (ByteString, TZLabel, ByteString)
type EncodingName = String
type Serial = Word32
type SignatureElem = Type
type Signature = [Type]
type Signature = [Type]
type SignatureElem = Type
type Signalback = BusName -> Signature -> Body -> IO ()
type Callback = Serial -> Signature -> Body -> IO ()
type DispatchTable a = Map Member [(Interface, a)]
type Doc = String
type FileSuffMp = [(FileSuffix, FileSuffInitState, Bool)]
type GetOptCmdLineOpts = [OptDescr (EHCOpts -> EHCOpts)]
type StringPath = [String]
type FileLocPath = [FileLoc]
type FileSearchLoc = FileLoc
type PkgKey = (PkgKey1, PkgKey2)
type PkgKey1 = PkgName
type PkgKey2 = Maybe Version
type PackageCfgKeyVals = Map String String
type PackageMp = Map PkgKey1 (Map PkgKey2 [PackageInfo])
type Module2PackageMp = Map HsName [PkgKey]
type MbExp = Maybe (Exp)
type Bind = Exp
type CRArray x = Vector x
type VarLookupFix k v = k -> Maybe v
type VarLookupCmbFix m1 m2 = m1 -> m2 -> m2
type MetaLev = Int
type Rel a b = Set (a, b)
type PP_Doc = Doc
type PlainParser tok gp = forall p. IsParser p tok => p gp
type LayoutParser tok ep = forall i o p. (IsParser (OffsideParser i o tok p) tok, InputState i tok p, OutputState o, Position p) => OffsideParser i o tok p ep
type LayoutParser2 tok ep = forall i o p. (IsParser (OffsideParser i o tok p) tok, InputState i tok p, OutputState o, Position p) => OffsideParser i o tok p ep -> OffsideParser i o tok p ep
type ClockTime = UTCTime
type SearchPath = [String]
type FileSuffixes = [FileSuffix]
type FileSuffix = Maybe String
type (:->) f o = Lens Total f o
type Lens a b = a :-> b
type Seq a = FastSeq a
type SPut = State SPutS ()
type SGet x = StateT SGetS Get x
type PP_DocL = [PP_Doc]
type CompilePhase n u i e a = StateT (CompileRun n u i e) IO a
type CompilePhase n u i e a = CompilePhaseT n u i e Identity a
type Nm = Nm' String
type Assoc k v = (k, v)
type AssocL k v = [Assoc k v]
type MetaLev = Int
type HttpCode = Int
type ReqURI = ByteString
type HostPort = ByteString
type MsgHeader = ByteString
type App config = ReaderT (AppContext config) IO
type SEvent = Maybe
type Time = Double
type DeltaT = Double
type Tempo = Double
type Title = String
type Size = (Int, Int)
type RGB = Color3 GLfloat
type RGBA = Color4 GLfloat
type Point = (Int, Int)
type Angle = GLfloat
type TerminationProc = Maybe (IO ())
type Dimension = (Int, Int)
type Rect = (Point, Dimension)
type DirtyBit = Bool
type Focus = (WidgetID, FocusInfo)
type WidgetID = Int
type Dimension = (Int, Int)
type Database a = [a]
type FreshM = FreshMT Identity
type LFreshM = LFreshMT Identity
type Bind p t = GenBind StrictOrder StrictCard p t
type SetBind p t = GenBind RelaxedOrder StrictCard p t
type SetPlusBind p t = GenBind RelaxedOrder RelaxedCard p t
type Bind p t = GenBind StrictOrder StrictCard p t
type FreshM = FreshMT Identity
type LFreshM = LFreshMT Identity
type Getting r s a = (a -> Const r a) -> s -> Const r s
type Fold s a = forall f. (Contravariant f, Applicative f) => (a -> f a) -> s -> f s
type Traversal' s a = forall f. Applicative f => (a -> f a) -> s -> f s
type Iso s t a b = forall p f. (Profunctor p, Functor f) => p a (f b) -> p s (f t)
type AnIso s t a b = Exchange a b a (Identity b) -> Exchange a b s (Identity t)
type FreshM = FreshMT Identity
type LFreshM = LFreshMT Identity
type NthPatFind = Integer -> Either Integer AnyName
type NamePatFind = AnyName -> Either Integer Integer
type UIO = UnexceptionalIO
type Split = Int -> [(Int, Int)]
type GQ guardQueue value = guardQueue (GuardInfo value)
type VQ valueQueue = valueQueue ValueInfo
type NullGuardedChannel value = GuardedChannel () value
type EqGuardedChannel key value = GuardedChannel (EqMatch key) (key, value)
type GraphConnection nodeLabel nodeTypeLabel arcLabel arcTypeLabel = (Update nodeLabel nodeTypeLabel arcLabel arcTypeLabel -> IO ()) -> IO (GraphConnectionData nodeLabel nodeTypeLabel arcLabel arcTypeLabel)
type Displayable graph = graph String (NodeTypeAttributes Node) () ArcTypeAttributes
type DisplayableUpdate = Update String (NodeTypeAttributes Node) () ArcTypeAttributes
type DisplayableGraphConnection = GraphConnection String (NodeTypeAttributes Node) () ArcTypeAttributes
type DisplayableCannedGraph = CannedGraph String (NodeTypeAttributes Node) () ArcTypeAttributes
type Size = (Distance, Distance)
type Coord = [Position]
type Position = (Distance, Distance)
type Geometry = (Distance, Distance, Distance, Distance)
type CreationConfig w = IO String
type TclCmd = String
type TclScript = [TclCmd]
type ConfigID = String
type ConfigOption = (ConfigID, GUIVALUE)
type TclCmd = String
type TclScript = [TclCmd]
type ConfigOption = (ConfigID, GUIVALUE)
type ConfigID = String
type Display = String
type Fraction = Double
type ScrollRegion = (Position, Position)
type ChildrenFun a = TreeListObject a -> IO [TreeListObject a]
type TreeListState a = [TreeListExportItem a]
type NotepadState c = [NotepadExportItem c]
type GenGUIState c = [NewItem c]
type Separator = Frame
type ToolStatus = Maybe ExitCode
type StateBinArea = StateT BinArea IO
type Answer a = Either SomeException a
type Config w = w -> IO w
type Dyn = Dynamic
type BreakFn = forall other. String -> other
type Duration = Int
type UntypedRegistry from = Untyped Registry from
type UntypedLockedRegistry from = Untyped LockedRegistry from
type UnsafeRegistry from = Unsafe Registry from
type MangledName = String
type VariableSetSource x = Source [x] (VariableSetUpdate x)
type UChar = Word16
type UErrorCode = CInt
type UBool = CChar
type :× a b = (a, b)
type Key = Int
type UniplateType on = on -> ([on], [on] -> on)
type BiplateType from to = from -> ([to], [to] -> from)
type UniplateType on = on -> (Str on, Str on -> on)
type BiplateType from to = from -> (Str to, Str to -> from)
type Assigns = [Assign]
type Name = String
type Name = String
type Variable s a = Variable IdentityT s a
type T = T IdentityT
type Variable w = Variable (WriterT w)
type T w = T (WriterT w)
type Assigns = [Assign]
type Variable s = Variable Assigns s T
type Assigns = [Assign]
type Variable s = Variable Track s (TrackedNumber Rational)
type SZ (z_a6O3 :: Z) = Sing z_a6O3
type ZeroSym0 = Zero
type SSym1 (t_a6NX :: Z) = S t_a6NX
type PSym1 (t_a6O0 :: Z) = P t_a6O0
type One = S Zero
type Two = S One
type Three = S Two
type Four = S Three
type Five = S Four
type MOne = P Zero
type MTwo = P MOne
type MThree = P MTwo
type MFour = P MThree
type MFive = P MFour
type CanonicalUnit (unit :: *) = CanonicalUnit' (BaseUnit unit) unit
type MkQu_D dim = Qu (DimFactorsOf dim) DefaultLCSU Double
type MkQu_DLN dim = Qu (DimFactorsOf dim)
type MkQu_U unit = Qu (DimFactorsOf (DimOfUnit unit)) DefaultLCSU Double
type MkQu_ULN unit = Qu (DimFactorsOf (DimOfUnit unit))
type Count = MkQu_ULN Number
type One = S Zero
type Two = S One
type Three = S Two
type Four = S Three
type Five = S Four
type MOne = P Zero
type MTwo = P MOne
type MThree = P MTwo
type MFour = P MThree
type MFive = P MFour
type MkQu_D dim = Qu (DimFactorsOf dim) DefaultLCSU Double
type MkQu_DLN dim = Qu (DimFactorsOf dim)
type MkQu_U unit = Qu (DimFactorsOf (DimOfUnit unit)) DefaultLCSU Double
type MkQu_ULN unit = Qu (DimFactorsOf (DimOfUnit unit))
type Count = MkQu_ULN Number
type One = S Zero
type Two = S One
type Three = S Two
type Four = S Three
type Five = S Four
type MOne = P Zero
type MTwo = P MOne
type MThree = P MTwo
type MFour = P MThree
type MFive = P MFour
type QuantityQu t = MkQu_ULN (QuantityUnit t) (QuantityLCSU t) (QuantityRep t)
type Count = MkQu_U Number
type Area = Length :^ Two
type Volume = Length :^ Three
type Velocity = Length :/ Time
type Acceleration = Velocity :/ Time
type Wavenumber = Length :^ MOne
type Density = Mass :/ Volume
type SurfaceDensity = Mass :/ Area
type SpecificVolume = Volume :/ Mass
type CurrentDensity = Current :/ Area
type MagneticStrength = Current :/ Length
type Concentration = AmountOfSubstance :/ Volume
type Luminance = LuminousIntensity :/ Area
type Frequency = Time :^ MOne
type Force = Mass :* Acceleration
type Pressure = Force :/ Area
type Energy = Force :* Length
type Power = Energy :/ Time
type Charge = Current :* Time
type ElectricPotential = Power :/ Current
type Capacitance = Charge :/ ElectricPotential
type Resistance = ElectricPotential :/ Current
type Conductance = Current :/ ElectricPotential
type MagneticFlux = ElectricPotential :* Time
type MagneticFluxDensity = MagneticFlux :/ Area
type Inductance = MagneticFlux :/ Current
type LuminousFlux = LuminousIntensity
type Illuminance = LuminousIntensity :/ Area
type Kerma = Area :/ (Time :^ Two)
type CatalyticActivity = AmountOfSubstance :/ Time
type Momentum = Mass :* Velocity
type Length = MkQu_D Length
type Mass = MkQu_D Mass
type Time = MkQu_D Time
type Current = MkQu_D Current
type Temperature = MkQu_D Temperature
type AmountOfSubstance = MkQu_D AmountOfSubstance
type LuminousIntensity = MkQu_D LuminousIntensity
type Area = MkQu_D Area
type Volume = MkQu_D Volume
type Velocity = MkQu_D Velocity
type Acceleration = MkQu_D Acceleration
type Wavenumber = MkQu_D Wavenumber
type Density = MkQu_D Density
type SurfaceDensity = MkQu_D SurfaceDensity
type SpecificVolume = MkQu_D SpecificVolume
type CurrentDensity = MkQu_D CurrentDensity
type MagneticStrength = MkQu_D MagneticStrength
type Concentration = MkQu_D Concentration
type Luminance = MkQu_D Luminance
type Frequency = MkQu_D Frequency
type Force = MkQu_D Force
type Pressure = MkQu_D Pressure
type Energy = MkQu_D Energy
type Power = MkQu_D Power
type Charge = MkQu_D Charge
type ElectricPotential = MkQu_D ElectricPotential
type Capacitance = MkQu_D Capacitance
type Resistance = MkQu_D Resistance
type Conductance = MkQu_D Conductance
type MagneticFlux = MkQu_D MagneticFlux
type MagneticFluxDensity = MkQu_D MagneticFluxDensity
type Inductance = MkQu_D Inductance
type LuminousFlux = MkQu_D LuminousFlux
type Illuminance = MkQu_D Illuminance
type Kerma = MkQu_D Kerma
type CatalyticActivity = MkQu_D CatalyticActivity
type Momentum = MkQu_D Momentum
type Metre = Meter
type Gramme = Gram
type Litre = Liter
type Tonne = Ton
type Centimeter = Centi :@ Meter
type Centimetre = Centimeter
type Length = MkQu_DLN Length
type Mass = MkQu_DLN Mass
type Time = MkQu_DLN Time
type Current = MkQu_DLN Current
type Temperature = MkQu_DLN Temperature
type AmountOfSubstance = MkQu_DLN AmountOfSubstance
type LuminousIntensity = MkQu_DLN LuminousIntensity
type Area = MkQu_DLN Area
type Volume = MkQu_DLN Volume
type Velocity = MkQu_DLN Velocity
type Acceleration = MkQu_DLN Acceleration
type Wavenumber = MkQu_DLN Wavenumber
type Density = MkQu_DLN Density
type SurfaceDensity = MkQu_DLN SurfaceDensity
type SpecificVolume = MkQu_DLN SpecificVolume
type CurrentDensity = MkQu_DLN CurrentDensity
type MagneticStrength = MkQu_DLN MagneticStrength
type Concentration = MkQu_DLN Concentration
type Luminance = MkQu_DLN Luminance
type Frequency = MkQu_DLN Frequency
type Force = MkQu_DLN Force
type Pressure = MkQu_DLN Pressure
type Energy = MkQu_DLN Energy
type Power = MkQu_DLN Power
type Charge = MkQu_DLN Charge
type ElectricPotential = MkQu_DLN ElectricPotential
type Capacitance = MkQu_DLN Capacitance
type Resistance = MkQu_DLN Resistance
type Conductance = MkQu_DLN Conductance
type MagneticFlux = MkQu_DLN MagneticFlux
type MagneticFluxDensity = MkQu_DLN MagneticFluxDensity
type Inductance = MkQu_DLN Inductance
type LuminousFlux = MkQu_DLN LuminousFlux
type Illuminance = MkQu_DLN Illuminance
type Kerma = MkQu_DLN Kerma
type CatalyticActivity = MkQu_DLN CatalyticActivity
type Momentum = MkQu_DLN Momentum
type SI = MkLCSU '[(Length, Meter), (Mass, Kilo :@ Gram), (Time, Second), (Current, Ampere), (Temperature, Kelvin), (AmountOfSubstance, Mole), (LuminousIntensity, Lumen)]
type PrefixTable pre = Map String pre
type UnitTable u = String -> Maybe u
type NoDimension = UnitNil
type POne = Pos One
type PTwo = Pos (Suc One)
type PThree = Pos (Suc (Suc One))
type PFour = Pos (Suc (Suc (Suc One)))
type PFive = Pos (Suc (Suc (Suc (Suc One))))
type PSix = Pos (Suc (Suc (Suc (Suc (Suc One)))))
type NOne = Neg One
type NTwo = Neg (Suc One)
type NThree = Neg (Suc (Suc One))
type NFour = Neg (Suc (Suc (Suc One)))
type LengthDimension = UnitCons Length (Pos One) UnitNil
type TimeDimension = UnitCons Time (Pos One) UnitNil
type MassDimension = UnitCons Mass (Pos One) UnitNil
type TemperatureDimension = UnitCons Temperature (Pos One) UnitNil
type CurrentDimension = UnitCons Current (Pos One) UnitNil
type LuminousDimension = UnitCons Luminous (Pos One) UnitNil
type CurrencyUnit = UnitCons Currency (Pos One) UnitNil
type Speed = UnitCons Time NOne (UnitCons Length POne UnitNil)
type Acceleration = UnitCons Time NTwo (UnitCons Length POne UnitNil)
type Force = UnitCons Time NTwo (UnitCons Mass POne (UnitCons Length POne UnitNil))
type Energy = UnitCons Time NTwo (UnitCons Mass POne (UnitCons Length PTwo UnitNil))
type Power = UnitCons Time NThree (UnitCons Length PTwo (UnitCons Mass POne UnitNil))
type Pressure = UnitCons Time NTwo (UnitCons Mass POne (UnitCons Length NOne UnitNil))
type Charge = UnitCons Time POne (UnitCons Current POne UnitNil)
type Potential = UnitCons Current NOne (UnitCons Mass POne (UnitCons Length PTwo (UnitCons Time NThree UnitNil)))
type Capacitance = UnitCons Current PTwo (UnitCons Mass NOne (UnitCons Length NTwo (UnitCons Time PFour UnitNil)))
type Resistance = UnitCons Current NTwo (UnitCons Time NThree (UnitCons Length PTwo (UnitCons Mass POne UnitNil)))
type Conductance = UnitCons Current PTwo (UnitCons Mass NOne (UnitCons Length NTwo (UnitCons Time PThree UnitNil)))
type Flux = UnitCons Current NOne (UnitCons Length PTwo (UnitCons Mass POne (UnitCons Time NTwo UnitNil)))
type FluxDensity = UnitCons Time NTwo (UnitCons Mass POne (UnitCons Current NOne UnitNil))
type Inductance = UnitCons Current NTwo (UnitCons Time NTwo (UnitCons Mass POne (UnitCons Length PTwo UnitNil)))
type DataUnit = UnitCons Data (Pos One) UnitNil
type AreaUnit = UnitCons Length (Pos (Suc One)) UnitNil
type VolumeUnit = UnitCons Length (Pos (Suc (Suc One))) UnitNil
type Universe = [(Name, Dec)]
type RawFilePath = ByteString
type FileLock = (LockRequest, SeekMode, FileOffset, FileOffset)
type FileLock = (LockRequest, SeekMode, FileOffset, FileOffset)
type Signal = CInt
type RawFilePath = ByteString
type CMajor = CUInt
type CMinor = CUInt
type Format = ByteString
type Cont a = (Maybe Char, Int) -> a -> IO Exp
type Style = [Delim]
type Lang = String
type Style = [Delim]
type Lang = Text
type PixelOp px = Int -> Int -> px
type GrayImage = BoxedImage Gray
type Gray = Double
type ColorImage = BoxedImage Color
type ComplexImage = BoxedImage Complex
type Complex = Complex Double
type :~> arg = UnpackedReaderT arg Identity
type SchemeMap = Map Text Scheme
type SchemeMap m = Map Text (Scheme m)
type URITemplate = String
type URIString = String
type UriTemplate = [TemplateSegment]
type StringBuilder = Writer (DList Char)
type BoundValue = (String, WrappedValue)
type UriTemplate = [TemplateSegment]
type Parse a = Maybe a
type RelativeUrl h b = RelativeUrlT h Identity b
type GroundedUrl h b = GroundedUrlT h Identity b
type AbsoluteUrl h b = AbsoluteUrlT h Identity b
type Link = String
type HotplugCallback = Device -> HotplugEvent -> IO CallbackRegistrationStatus
type ConfigValue = Word8
type InterfaceNumber = Word8
type InterfaceAltSetting = Word8
type ReleaseNumber = (Int, Int, Int, Int)
type VendorId = Word16
type ProductId = Word16
type ConfigAttribs = DeviceStatus
type Interface = Vector InterfaceDesc
type EndpointAttribs = TransferType
type LangId = (PrimaryLangId, SubLangId)
type PrimaryLangId = Word16
type SubLangId = Word16
type StrIx = Word8
type ReadAction = Size -> Timeout -> IO (ByteString, Status)
type ReadExactAction = Size -> Timeout -> IO ByteString
type WriteAction = ByteString -> Timeout -> IO (Size, Status)
type WriteExactAction = ByteString -> Timeout -> IO ()
type Size = Int
type Timeout = Int
type Request = Word8
type Value = Word16
type Index = Word16
type HIDEffort = Int
type HIDPreference = Int
type DescriptorIndex = Word8
type HIDInterfaceNumber = Word16
type Duration = Word8
type ReportID = Word8
type Report = ByteString
type ReadAction r = Size -> Timeout -> r (ByteString, Status)
type WriteAction r = ByteString -> Timeout -> r (Size, Status)
type ControlAction α = RequestType -> Recipient -> Request -> Value -> Index -> α
type LoginId = Key Login
type Con = String
type Cost = Int
type Progress = Int
type Strings = [String]
type Parser a = (IsLocationUpdatedBy loc Char, ListLike state Char) => P (Str Char state loc) a
type ParserTrafo a b = (IsLocationUpdatedBy loc Char, ListLike state Char) => P (Str Char state loc) a -> P (Str Char state loc) b
type Parser a = P (Str Char String LineColPos) a
type Parser s r = [s] -> [(r, [s])]
type NontermIdent = Identifier
type AGDiagram b = Diagram b R2
type Html = Markup
type Line = Int
type Column = Int
type Filename = String
type Token = GenToken String EnumValToken String
type Parser s = AnaParser [s] Pair s (Maybe s)
type CharParser = AnaParser Input Pair Char Pos
type Comparison e = e -> e -> Ordering
type Comparison e = e -> e -> Ordering
type Comparison e = e -> e -> Ordering
type Comparison e = e -> e -> Ordering
type Comparison e = e -> e -> Ordering
type Variable = String
type Constructor = String
type HValue = Any
type HalfWord = Word32
type ItblCode = Word8
type HNodeId = Int
type HNodeId = Int
type HValue = Any
type Test e a b = Maybe a -> Input e (Maybe b)
type ValidationM e = ValidationT e Identity
type ValidationRule e a = ValidationRuleT e Identity a
type ValidationRuleT e m a = a -> ValidationT e m a
type Validation' err a = ValidationT err Identity a
type Checker error a b = a -> Either error b
type MonadicChecker error monad a b = a -> monad (Either error b)
type Lens a s = Functor f => (a -> f a) -> s -> f s
type ListRepDefault t = GCons (Rep t) Nil
type Field1 a = Find N0 (ToList a)
type Field2 a = Find N1 (ToList a)
type Field3 a = Find N2 (ToList a)
type Field4 a = Find N3 (ToList a)
type Field5 a = Find N4 (ToList a)
type Field6 a = Find N5 (ToList a)
type Field7 a = Find N6 (ToList a)
type Field8 a = Find N7 (ToList a)
type Field9 a = Find N8 (ToList a)
type IOVar = IORef
type STVar = STRef
type N16 = SuccessorTo N15
type N17 = SuccessorTo N16
type N18 = SuccessorTo N17
type N19 = SuccessorTo N18
type N20 = SuccessorTo N19
type N21 = SuccessorTo N20
type N22 = SuccessorTo N21
type N23 = SuccessorTo N22
type N24 = SuccessorTo N23
type N25 = SuccessorTo N24
type N26 = SuccessorTo N25
type N27 = SuccessorTo N26
type N28 = SuccessorTo N27
type N29 = SuccessorTo N28
type N30 = SuccessorTo N29
type N31 = SuccessorTo N30
type N32 = SuccessorTo N31
type N33 = SuccessorTo N32
type N34 = SuccessorTo N33
type N35 = SuccessorTo N34
type N36 = SuccessorTo N35
type N37 = SuccessorTo N36
type N38 = SuccessorTo N37
type N39 = SuccessorTo N38
type N40 = SuccessorTo N39
type N41 = SuccessorTo N40
type N42 = SuccessorTo N41
type N43 = SuccessorTo N42
type N44 = SuccessorTo N43
type N45 = SuccessorTo N44
type N46 = SuccessorTo N45
type N47 = SuccessorTo N46
type N48 = SuccessorTo N47
type N49 = SuccessorTo N48
type N50 = SuccessorTo N49
type N51 = SuccessorTo N50
type N52 = SuccessorTo N51
type N53 = SuccessorTo N52
type F = VFloat
type X = VFixed
type C = VComplex
type CF = C F
type CX = C X
type F8 = F N8
type F16 = F N16
type F24 = F N24
type F32 = F N32
type F40 = F N40
type F48 = F N48
type F53 = F N53
type X8 = X N8
type X16 = X N16
type X24 = X N24
type X32 = X N32
type X40 = X N40
type X48 = X N48
type X53 = X N53
type CF8 = CF N8
type CF16 = CF N16
type CF24 = CF N24
type CF32 = CF N32
type CF40 = CF N40
type CF48 = CF N48
type CF53 = CF N53
type CX8 = CX N8
type CX16 = CX N16
type CX24 = CX N24
type CX32 = CX N32
type CX40 = CX N40
type CX48 = CX N48
type CX53 = CX N53
type Vault = Vault RealWorld
type Key = Key RealWorld
type Locker = Locker RealWorld
type Vault = Vault RealWorld
type Key = Key RealWorld
type Locker = Locker RealWorld
type Epoch = Word64
type NumBuckets = Word64
type Children a = Array Word8 (Child a)
type Child a = Maybe (VRef (Node a))
type DerefNode a = VRef (Node a) -> Node a
type VCardValue = Value ExtraValue
type VProperty = Property ExtraValue
type SourceName = String
type MergeToolSetter = MergeTool -> IO ()
type Handler = (Maybe (Bool, Maybe Text)) -> Ctx ()
type IsLocked = Bool
type IsLocked = Bool
type IsLocked = Bool
type IsLocked = Bool
type N1 = Succ N0
type N2 = Succ N1
type N3 = Succ N2
type N4 = Succ N3
type N5 = Succ N4
type N6 = Succ N5
type N7 = Succ N6
type N8 = Succ N7
type N9 = Succ N8
type N10 = Succ N9
type N11 = Succ N10
type N12 = Succ N11
type N13 = Succ N12
type N14 = Succ N13
type N15 = Succ N14
type N16 = Succ N15
type N17 = Succ N16
type N18 = Succ N17
type N19 = Succ N18
type Vec2 a = a :. (a :. ())
type Vec3 a = a :. (Vec2 a)
type Vec4 a = a :. (Vec3 a)
type Vec5 a = a :. (Vec4 a)
type Vec6 a = a :. (Vec5 a)
type Vec7 a = a :. (Vec6 a)
type Vec8 a = a :. (Vec7 a)
type Vec9 a = a :. (Vec8 a)
type Vec10 a = a :. (Vec9 a)
type Vec11 a = a :. (Vec10 a)
type Vec12 a = a :. (Vec11 a)
type Vec13 a = a :. (Vec12 a)
type Vec14 a = a :. (Vec13 a)
type Vec15 a = a :. (Vec14 a)
type Vec16 a = a :. (Vec15 a)
type Vec17 a = a :. (Vec16 a)
type Vec18 a = a :. (Vec17 a)
type Vec19 a = a :. (Vec18 a)
type Mat22 a = Vec2 (Vec2 a)
type Mat23 a = Vec2 (Vec3 a)
type Mat24 a = Vec2 (Vec4 a)
type Mat32 a = Vec3 (Vec2 a)
type Mat33 a = Vec3 (Vec3 a)
type Mat34 a = Vec3 (Vec4 a)
type Mat35 a = Vec3 (Vec5 a)
type Mat36 a = Vec3 (Vec6 a)
type Mat42 a = Vec4 (Vec2 a)
type Mat43 a = Vec4 (Vec3 a)
type Mat44 a = Vec4 (Vec4 a)
type Mat45 a = Vec4 (Vec5 a)
type Mat46 a = Vec4 (Vec6 a)
type Mat47 a = Vec4 (Vec7 a)
type Mat48 a = Vec4 (Vec8 a)
type Vec2B = Packed (Vec2 Bool)
type Vec3B = Packed (Vec3 Bool)
type Vec4B = Packed (Vec4 Bool)
type Vec2I = Packed (Vec2 Int)
type Vec3I = Packed (Vec3 Int)
type Vec4I = Packed (Vec4 Int)
type Vec2F = Packed (Vec2 Float)
type Vec3F = Packed (Vec3 Float)
type Vec4F = Packed (Vec4 Float)
type Vec2D = Packed (Vec2 Double)
type Vec3D = Packed (Vec3 Double)
type Vec4D = Packed (Vec4 Double)
type Vec2CF = Packed (Vec2 CFloat)
type Vec3CF = Packed (Vec3 CFloat)
type Vec4CF = Packed (Vec4 CFloat)
type Vec2CI = Packed (Vec2 CInt)
type Vec3CI = Packed (Vec3 CInt)
type Vec4CI = Packed (Vec4 CInt)
type Vec2CD = Packed (Vec2 CDouble)
type Vec3CD = Packed (Vec3 CDouble)
type Vec4CD = Packed (Vec4 CDouble)
type Mat22D = Vec2 (Vec2D)
type Mat23D = Vec2 (Vec3D)
type Mat24D = Vec2 (Vec4D)
type Mat33D = Vec3 (Vec3D)
type Mat34D = Vec3 (Vec4D)
type Mat44D = Vec4 (Vec4D)
type Q = Quaternion
type U = UnitQuaternion
type Q = Quaternion
type U = UnitQuaternion
type Q = Quaternion
type U = UnitQuaternion
type GLflt = GLdouble
type GLflt = GLfloat
type Bundle = Bundle Id
type MBundle = Bundle
type IOVector = MVector RealWorld
type STVector s = MVector s
type IOVector = MVector RealWorld
type STVector s = MVector s
type IOVector = MVector RealWorld
type STVector s = MVector s
type IOVector = MVector RealWorld
type STVector s = MVector s
type Comparison e = e -> e -> Ordering
type Comparison e = e -> e -> Ordering
type Comparison e = e -> e -> Ordering
type Comparison e = e -> e -> Ordering
type Comparison e = e -> e -> Ordering
type Comparison e = e -> e -> Ordering
type ByteString = Vector Word8
type ByteString = Vector Word8
type ByteString = Vector Word8
type IOVector = MVector RealWorld
type STVector s = MVector s
type (:~>) a b = a -> (a :> b)
type One s = s
type Two s = (s, s)
type Three s = (s, s, s)
type Identifier = String
type PortBinding = (Identifier, Maybe Expr)
type Case = ([Expr], Stmt)
type Range = (Expr, Expr)
type Verilog a = StateT (Int, a, [ModuleItem]) Id
type DiskGeometryCylinders = Word16
type DiskGeometryHeads = Word8
type DiskGeometrySectorsPerTrack = Word8
type PhysicalByteAddress = Word64
type PhysicalByteCount = Word64
type PhysicalSectorAddress = Word32
type PhysicalSectorCount = Word32
type VirtualBlockCount = Word32
type VirtualByteCount = Word64
type VirtualSectorAddress = Word32
type VirtualSectorCount = Word32
type VersionMajor = Word16
type VersionMinor = Word16
type TypeMark = SimpleName
type PackageBodyDecItem = SubProgBody
type Constraint = IndexConstraint
type DiscreteRange = Range
type SimpleName = VHDLId
type Prefix = VHDLName
type Label = VHDLId
type FormalPart = SimpleName
type ActualPart = ActualDesig
type Literal = String
type (:.) f g = Compose f g
type FieldRec = Rec ElField
type HList = Rec Identity
type LazyHList = Rec Thunk
type REquivalent rs ss is js = (RSubset rs ss is, RSubset ss rs js)
type (∈) r rs = RElem r rs (RIndex r rs)
type (⊆) rs ss = RSubset rs ss (RImage rs ss)
type (≅) rs ss = REquivalent rs ss (RImage rs ss) (RImage ss rs)
type (<:) rs ss = rs ⊆ ss
type (:~:) rs ss = rs ≅ ss
type (∈) r rs = RElem r rs (RIndex r rs)
type (⊆) rs ss = RSubset rs ss (RImage rs ss)
type (≅) rs ss = REquivalent rs ss (RImage rs ss) (RImage ss rs)
type (<:) rs ss = rs ⊆ ss
type (:~:) rs ss = rs ≅ ss
type SDState = State ([Int], SynthDef)
type HostedZones = [HostedZone]
type Nameserver = Domain
type Nameservers = [Nameserver]
type ResourceRecordSets = [ResourceRecordSet]
type ResourceRecords = [ResourceRecord]
type AccessToken = (String, String, String)
type ClientId = String
type ObserveExecHandler = ByteString -> [ByteString] -> [(ByteString, ByteString)] -> ByteString -> ByteString -> ProcessID -> ProcessID -> IO ()
type ObserveExitHandler = ExitCode -> ProcessID -> ProcessID -> IO ()
type ObserveOpenHandler = ByteString -> Int -> FileMode -> ByteString -> Int -> ProcessID -> IO ()
type ObserveCloseHandler = Int -> Int -> ProcessID -> IO ()
type VteSelect = Int -> Int -> Bool
type ClassifyMap = [(String, Event)]
type Style = Word8
type DisplayText = Text
type DisplayRegion = (Int, Int)
type SpanOps = Vector SpanOp
type DisplayOps = Vector SpanOps
type SpanConstructLog = [SpanConstructEvent]
type ImageConstructLog = [ImageConstructEvent]
type ImageEndo = Image -> Image
type MRowOps s = MVector s SpanOps
type MSpanOps s = MVector s SpanOp
type BlitM s a = ReaderT (BlitEnv s) (StateT BlitState (ST s)) a
type MockData = IORef (UTF8 ByteString)
type InputMap = [(Maybe String, String, Event)]
type ConfigParser s a = ParsecT s () (Writer Config) a
type DisplayRegion = (Int, Int)
type InlineM v = State Attr v
type Handler a = a -> IO ()
type Widget a = IORef (WidgetImpl a)
type RadioGroup = IORef RadioGroupData
type ListItem a b = (a, Widget b)
type DirBrowserWidgetType = Box (Box (Box FormattedText FormattedText) HFill) (Box (List [Char] (Box FormattedText FormattedText)) (Box (Box (Box FormattedText FormattedText) HFill) FormattedText))
type Collection = IORef CollectionData
type EntryHide = IO ()
type EntryShow = IO ()
type LumpName = ByteString
type Blocklist = [Int16]
type StreamingBody = (Builder -> IO ()) -> IO () -> IO ()
type Application = Request -> (Response -> IO ResponseReceived) -> IO ResponseReceived
type Middleware = Application -> Application
type StreamingBody = (Builder -> IO ()) -> IO () -> IO ()
type Pieces = [Piece]
type FolderName = Piece
type Listing = Pieces -> Folder -> IO Builder
type ETagLookup = FilePath -> IO (Maybe ByteString)
type Etag = Text
type Origin = ByteString
type Session = ReaderT Application (StateT ClientState IO)
type ClientCookies = Map ByteString SetCookie
type UrlMap = UrlMap' Application
type CheckCreds = ByteString -> ByteString -> IO Bool
type BackEnd a = ByteString -> FileInfo () -> IO ByteString -> IO a
type Param = (ByteString, ByteString)
type File y = (ByteString, FileInfo y)
type OutputFormatter = ZonedDate -> Request -> Status -> Maybe Integer -> LogStr
type Callback = LogStr -> IO ()
type AppHolder = MVar (Application, MVar ())
type AppRunner = Application -> IO ()
type WithAppRunner = AppRunner -> IO ()
type MuContext (m :: * -> *) = ByteString -> MuType m
type HasReqConf alg m = (HashAlgorithm alg, MonadReader (RequestConfig alg) m, Functor m)
type AuthErrorsM m = MonadError AuthFailure m
type WriteChunks m = MonadWriter (Seq ByteString) m
type HmacState alg m = (Functor m, Applicative m, HashAlgorithm alg, MonadState (HMACContext alg) m)
type Controller = ReaderT ControllerState (ResourceT IO)
type RESTController = RESTControllerM ()
type Controller = ReaderT ControllerState (ResourceT IO)
type RESTController = RESTControllerM ()
type ApacheLogger = Request -> Status -> Maybe Integer -> IO ()
type ZonedDate = ByteString
type DateCacheGetter = IO ZonedDate
type DateCacheUpdater = IO ()
type LogController = [ProcessID] -> IO ()
type LogFlusher = IO ()
type CacheBackend = Application -> Request -> ResourceT IO (Maybe Response)
type Predicate a f t = a -> Result f t
type EnvMap k v = Map k v
type ParamMap a = EnvMap Text (Maybe Text)
type Reason = Text
type Reason = Text
type Handler m = [(ByteString, ByteString)] -> Request -> (Response -> m ResponseReceived) -> m ResponseReceived
type Route = [Text] -> Maybe Application
type CheckOverlap = Bool
type Handler master = HandlerS master master
type HandlerS sub master = Env sub master -> App sub
type ResponseHandler = (Response -> IO ResponseReceived) -> IO ResponseReceived
type HandlerM sub master a = HandlerMI sub master IO a
type Handler master = HandlerS master master
type HandlerS sub master = Env sub master -> App sub
type HandlerM sub master a = HandlerMI sub master IO a
type App m = RoutingReq -> Continue m -> m ResponseReceived
type Continue m = Response -> m ResponseReceived
type Renderer = Error -> Maybe (ByteString, ResponseHeaders)
type Session m k v = (k -> m (Maybe v), k -> v -> m ())
type SessionStore m k v = Maybe ByteString -> IO (Session m k v, IO ByteString)
type Session = ReaderT Application (StateT ClientState IO)
type :*: e l = HCons e l
type AbstractThreadId = Int
type Path = String
type Buffer = Ptr Word8
type BufSize = Int
type Manager = Reaper [Handle] Handle
type TimeoutAction = IO ()
type Port = Int
type HeaderValue = ByteString
type IndexedHeader = Array Int (Maybe HeaderValue)
type MutableFdCache = Reaper FdCache (Hash, FdEntry)
type Refresh = IO ()
type DateCache = IO GMTDate
type GMTDate = ByteString
type Group = String
type User = String
type DayOfWeek = Int
type Element = ELEMENT_
type Attributes = [Attribute]
type Attribute = ATTR_
type HTMLCons x y m a = WithHTML x m a -> WithHTML y m a
type Element = ELEMENT_
type Attributes = [Attribute]
type Attribute = ATTR_
type HTMLCons x y m a = WithHTML x m a -> WithHTML y m a
type Pixel = (Int, Int, Int)
type Color = (Int, Int, Int)
type Templates = [Template]
type Template = [TemplateItem]
type CGIOptions = [CGIOption]
type CGIProgram = CGIInfo -> CGIParameters -> IO ()
type CGIParameter = (String, CGIValue)
type CGIParameters = [CGIParameter]
type CGIValue = String
type CGIProgram = CGIInfo -> CGIParameters -> IO ()
type CGIOptions = [CGIOption]
type CGIAction a = CGIState -> IO (a, CGIState)
type StateID = (String, String)
type HTMLField cgi x y a = WithHTML x cgi () -> WithHTML y cgi a
type Pixel = (Int, Int, Int)
type CGIImage = IO CGIImage'
type ActionFun = Int -> Int -> Maybe (CGI ())
type HTMLField cgi x y a = WithHTML x cgi () -> WithHTML y cgi a
type CGIOptions = [CGIOption]
type HTMLField cgi x y a = WithHTML x cgi () -> WithHTML y cgi a
type CGIOptions = [CGIOption]
type HTMLField cgi x y a = WithHTML x cgi () -> WithHTML y cgi a
type CGIOptions = [CGIOption]
type WatchdogLogger = String -> Maybe Int -> IO ()
type Handler = Action -> FilePath -> IO ()
type WAVESample = Int32
type WAVESamples = [[WAVESample]]
type Time = Double
type DTime = Time
type Label = ByteString
type Attribute = (Label, Maybe Label)
type Result a = Either ParseError a
type IntegralWaveChannel = Vector Int64
type FloatingWaveChannel = Vector Double
type WaveParseError = String
type ByteOffset = Int64
type ApiResponse = Either ApiError Weather
type ApiKey = String
type Header a = (a, a, SomeMap a)
type MonadWidget k url = MonadWriter (Widget k url)
type WidgetWriter k url a = forall m. MonadWidget k url m => m a
type PluginName = Text
type URLParser a = GenParser Text () a
type Router a b = Boomerang TextsError [Text] a b
type Strings = [String]
type THResource = (String, Pieces)
type Strings = [String]
type (</) k v = HasKey k v ~ AlreadyHasKey k
type Method = ByteString
type Raw m d d' = Store d -> [Text] -> m (Store d', [Text])
type ParsedStatement = Statement SourcePos
type ParsedExpression = Expression SourcePos
type StatementParser state = CharParser state ParsedStatement
type ExpressionParser state = CharParser state ParsedExpression
type HtmlId = String
type AttributeValue = String
type RawHtml = Html SourcePos RawScript
type JsHtml a = Html SourcePos (JavaScript a)
type ParsedJavaScript = JavaScript SourcePos
type ParsedJsHtml = JsHtml SourcePos
type ParsedStatement = Statement SourcePos
type ContForm a = XHtmlForm Identity a
type Encoding = CI ByteString
type Charset = CI ByteString
type HeadersMap = HashMap HeaderName [ByteString]
type Body = ByteString
type WaiResource m = Resource (WaiCrankT m)
type Method = ByteString
type LogType = String
type LogType = String
type Method = ByteString
type LogType = String
type LogType = String
type IDLSpecification = [IDLDefinition]
type Signal target callback = target -> callback -> IO (IO ())
type EventM e t a = ReaderT (t, e) IO a
type JSContextGroupRef = Ptr (OpaqueJSContextGroup)
type JSContextRef = Ptr (OpaqueJSContext)
type JSGlobalContextRef = Ptr (OpaqueJSContext)
type JSStringRef = Ptr (OpaqueJSString)
type JSClassRef = Ptr (OpaqueJSClass)
type JSPropertyNameArrayRef = Ptr (OpaqueJSPropertyNameArray)
type JSPropertyNameAccumulatorRef = Ptr (OpaqueJSPropertyNameAccumulator)
type JSValueRef = Ptr (OpaqueJSValue)
type JSObjectRef = Ptr (OpaqueJSValue)
type JSValueRefRef = Ptr (JSValueRef)
type JSStringRefRef = Ptr (JSStringRef)
type JSCSize = CULong
type JSPropertyAttributes = CUInt
type JSClassAttributes = CUInt
type JSObjectInitializeCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> (IO ())))
type JSObjectFinalizeCallback = FunPtr ((Ptr OpaqueJSValue) -> (IO ()))
type JSObjectHasPropertyCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSString) -> (IO CUChar))))
type JSObjectGetPropertyCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSString) -> ((Ptr JSValueRef) -> (IO (Ptr OpaqueJSValue))))))
type JSObjectSetPropertyCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSString) -> ((Ptr OpaqueJSValue) -> ((Ptr JSValueRef) -> (IO CUChar))))))
type JSObjectDeletePropertyCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSString) -> ((Ptr JSValueRef) -> (IO CUChar)))))
type JSObjectGetPropertyNamesCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSPropertyNameAccumulator) -> (IO ()))))
type JSObjectCallAsFunctionCallback' = JSContextRef -> JSObjectRef -> JSObjectRef -> JSCSize -> JSValueRefRef -> JSValueRefRef -> IO JSValueRef
type JSObjectCallAsFunctionCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSValue) -> (CULong -> ((Ptr JSValueRef) -> ((Ptr JSValueRef) -> (IO (Ptr OpaqueJSValue))))))))
type JSObjectCallAsConstructorCallback' = JSContextRef -> JSObjectRef -> JSCSize -> JSValueRefRef -> JSValueRefRef -> IO JSValueRef
type JSObjectCallAsConstructorCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> (CULong -> ((Ptr JSValueRef) -> ((Ptr JSValueRef) -> (IO (Ptr OpaqueJSValue)))))))
type JSObjectHasInstanceCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSValue) -> ((Ptr JSValueRef) -> (IO CUChar)))))
type JSObjectConvertToTypeCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> (CInt -> ((Ptr JSValueRef) -> (IO (Ptr OpaqueJSValue))))))
type JSStaticValueRef = Ptr ()
type JSStaticFunctionRef = Ptr ()
type JSClassDefinitionRef = Ptr ()
type JSChar = CUShort
type JSCharRef = Ptr (JSChar)
type Signal target callback = target -> callback -> IO (IO ())
type EventM e t a = ReaderT (t, e) IO a
type JSContextGroupRef = Ptr (OpaqueJSContextGroup)
type JSContextRef = Ptr (OpaqueJSContext)
type JSGlobalContextRef = Ptr (OpaqueJSContext)
type JSStringRef = Ptr (OpaqueJSString)
type JSClassRef = Ptr (OpaqueJSClass)
type JSPropertyNameArrayRef = Ptr (OpaqueJSPropertyNameArray)
type JSPropertyNameAccumulatorRef = Ptr (OpaqueJSPropertyNameAccumulator)
type JSValueRef = Ptr (OpaqueJSValue)
type JSObjectRef = Ptr (OpaqueJSValue)
type JSValueRefRef = Ptr (JSValueRef)
type JSStringRefRef = Ptr (JSStringRef)
type JSCSize = CULong
type JSPropertyAttributes = CUInt
type JSClassAttributes = CUInt
type JSObjectInitializeCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> (IO ())))
type JSObjectFinalizeCallback = FunPtr ((Ptr OpaqueJSValue) -> (IO ()))
type JSObjectHasPropertyCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSString) -> (IO CUChar))))
type JSObjectGetPropertyCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSString) -> ((Ptr JSValueRef) -> (IO (Ptr OpaqueJSValue))))))
type JSObjectSetPropertyCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSString) -> ((Ptr OpaqueJSValue) -> ((Ptr JSValueRef) -> (IO CUChar))))))
type JSObjectDeletePropertyCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSString) -> ((Ptr JSValueRef) -> (IO CUChar)))))
type JSObjectGetPropertyNamesCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSPropertyNameAccumulator) -> (IO ()))))
type JSObjectCallAsFunctionCallback' = JSContextRef -> JSObjectRef -> JSObjectRef -> JSCSize -> JSValueRefRef -> JSValueRefRef -> IO JSValueRef
type JSObjectCallAsFunctionCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSValue) -> (CULong -> ((Ptr JSValueRef) -> ((Ptr JSValueRef) -> (IO (Ptr OpaqueJSValue))))))))
type JSObjectCallAsConstructorCallback' = JSContextRef -> JSObjectRef -> JSCSize -> JSValueRefRef -> JSValueRefRef -> IO JSValueRef
type JSObjectCallAsConstructorCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> (CULong -> ((Ptr JSValueRef) -> ((Ptr JSValueRef) -> (IO (Ptr OpaqueJSValue)))))))
type JSObjectHasInstanceCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> ((Ptr OpaqueJSValue) -> ((Ptr JSValueRef) -> (IO CUChar)))))
type JSObjectConvertToTypeCallback = FunPtr ((Ptr OpaqueJSContext) -> ((Ptr OpaqueJSValue) -> (CInt -> ((Ptr JSValueRef) -> (IO (Ptr OpaqueJSValue))))))
type JSStaticValueRef = Ptr ()
type JSStaticFunctionRef = Ptr ()
type JSClassDefinitionRef = Ptr ()
type JSChar = CUShort
type JSCharRef = Ptr (JSChar)
type Logger m = String -> m ()
type Loggers m = (Logger m, Logger m, Logger m)
type NodePath a = [(a, Int)]
type HttpDate = ByteString
type FieldValue = ByteString
type CT = ByteString
type WebServer = Maybe Request -> IO Response
type Headers = [(CI ByteString, ByteString)]
type ServerApp = PendingConnection -> IO ()
type ClientApp a = Connection -> IO a
type WebWire site = Wire (StateT (WebConfig site) IO)
type SimpleWire = WebWire ()
type WebSession = ByteString
type EResponse = Either WhebError Response
type CSettings = Map Text SettingsValue
type WhebHandler g s = WhebT g s IO HandlerResponse
type WhebHandlerT g s m = WhebT g s m HandlerResponse
type WhebMiddleware g s m = WhebT g s m (Maybe HandlerResponse)
type WhebSocket g s m = Connection -> WhebT g s m ()
type MinWheb a = WhebT () () IO a
type MinHandler = MinWheb HandlerResponse
type MinOpts = WhebOptions () () IO
type RouteParamList = [(Text, ParsedChunk)]
type MethodMatch = StdMethod -> Bool
type UserKey = Text
type Password = Text
type PwHash = Text
type Varname = String
type WindowAttributes = (Int, Int, Int, Int)
type Coord = (Int, Int)
type FetchingState = (Int, Int)
type FetchingMethod = URL -> IO String
type BOOL = Bool
type BYTE = Word8
type UCHAR = CUChar
type USHORT = Word16
type UINT = Word32
type INT = Int32
type WORD = Word16
type DWORD = Word32
type LONG = Int32
type FLOAT = Float
type LARGE_INTEGER = Int64
type DDWORD = Word64
type MbString = Maybe String
type MbINT = Maybe INT
type ATOM = UINT
type WPARAM = UINT
type LPARAM = LONG
type LRESULT = LONG
type SIZE_T = DWORD
type MbATOM = Maybe ATOM
type HRESULT = LONG
type Addr = Ptr ()
type LPVOID = Ptr ()
type LPBOOL = Ptr BOOL
type LPBYTE = Ptr BYTE
type PUCHAR = Ptr UCHAR
type LPDWORD = Ptr DWORD
type LPSTR = Ptr CChar
type LPCSTR = LPSTR
type LPWSTR = Ptr CWchar
type LPCWSTR = LPWSTR
type LPTSTR = Ptr TCHAR
type LPCTSTR = LPTSTR
type LPCTSTR_ = LPCTSTR
type MbLPVOID = Maybe LPVOID
type MbLPCSTR = Maybe LPCSTR
type MbLPCTSTR = Maybe LPCTSTR
type TCHAR = CWchar
type HANDLE = Ptr ()
type ForeignHANDLE = ForeignPtr ()
type HKEY = ForeignHANDLE
type PKEY = HANDLE
type MbHANDLE = Maybe HANDLE
type HINSTANCE = Ptr ()
type MbHINSTANCE = Maybe HINSTANCE
type HMODULE = Ptr ()
type MbHMODULE = Maybe HMODULE
type ErrCode = DWORD
type LCID = DWORD
type LANGID = WORD
type SortID = WORD
type SubLANGID = WORD
type PrimaryLANGID = WORD
type WindowMessage = DWORD
type ResourceImageType = UINT
type HRSRC = Ptr ()
type HGLOBAL = Ptr ()
type ResourceType = LPCTSTR
type ResourceSize = Int
type LoadImageFlags = UINT
type LoadLibraryFlags = DWORD
type SystemColor = UINT
type SMSetting = UINT
type HGLOBAL = Addr
type GlobalAllocFlags = UINT
type HeapAllocFlags = DWORD
type VirtualAllocFlags = DWORD
type ProtectFlags = DWORD
type FreeFlags = DWORD
type CodePage = UINT
type LCTYPE = UINT
type LCMapFlags = DWORD
type LocaleTestFlags = DWORD
type LCID = DWORD
type LANGID = WORD
type SortID = WORD
type SubLANGID = WORD
type PrimaryLANGID = WORD
type GetTimeFormatFlags = DWORD
type AccessMode = UINT
type ShareMode = UINT
type CreateMode = UINT
type FileAttributeOrFlag = UINT
type MoveFileFlag = DWORD
type FilePtrDirection = DWORD
type DriveType = UINT
type DefineDosDeviceFlags = DWORD
type BinaryType = DWORD
type FileNotificationFlag = DWORD
type FileType = DWORD
type LPSECURITY_ATTRIBUTES = Ptr ()
type MbLPSECURITY_ATTRIBUTES = Maybe LPSECURITY_ATTRIBUTES
type LPOVERLAPPED = Ptr ()
type MbLPOVERLAPPED = Maybe LPOVERLAPPED
type WIN32_FIND_DATA = ()
type ProtectSectionFlags = DWORD
type FileMapAccess = DWORD
type ProcessId = DWORD
type ProcessHandle = HANDLE
type ProcessAccessRights = DWORD
type Th32SnapHandle = HANDLE
type Th32SnapFlags = DWORD
type ProcessEntry32 = (ProcessId, Int, ProcessId, LONG, String)
type RegCreateOptions = DWORD
type REGSAM = Word32
type RegNotifyOptions = DWORD
type RegRestoreFlags = DWORD
type RegValueType = DWORD
type CtrlEvent = DWORD
type PSID = Ptr SID
type PACL = Ptr ACL
type SECURITY_DESCRIPTOR_CONTROL = WORD
type SECURITY_INFORMATION = DWORD
type PID = DWORD
type TID = DWORD
type DebugEventId = (PID, TID)
type ForeignAddress = Word32
type PHANDLE = Ptr ()
type THANDLE = Ptr ()
type ThreadInfo = (THANDLE, ForeignAddress, ForeignAddress)
type ImageInfo = (HANDLE, ForeignAddress, DWORD, DWORD, ForeignAddress)
type ExceptionInfo = (Bool, Bool, ForeignAddress)
type DebugEvent = (DebugEventId, DebugEventInfo)
type POINT = (LONG, LONG)
type RECT = (LONG, LONG, LONG, LONG)
type SIZE = (LONG, LONG)
type LPRECT = Ptr RECT
type MbLPRECT = Maybe LPRECT
type HBITMAP = HANDLE
type MbHBITMAP = Maybe HBITMAP
type HFONT = HANDLE
type MbHFONT = Maybe HFONT
type HCURSOR = HICON
type MbHCURSOR = Maybe HCURSOR
type HICON = HANDLE
type MbHICON = Maybe HICON
type HRGN = ForeignHANDLE
type PRGN = HANDLE
type MbHRGN = Maybe HRGN
type HPALETTE = HANDLE
type MbHPALETTE = Maybe HPALETTE
type HBRUSH = HANDLE
type MbHBRUSH = Maybe HBRUSH
type HPEN = HANDLE
type MbHPEN = Maybe HPEN
type HACCEL = HANDLE
type HDC = HANDLE
type MbHDC = Maybe HDC
type HDWP = HANDLE
type MbHDWP = Maybe HDWP
type HWND = HANDLE
type MbHWND = Maybe HWND
type HMENU = HANDLE
type MbHMENU = Maybe HMENU
type COLORREF = Word32
type RasterOp3 = Word32
type RasterOp4 = Word32
type PolyFillMode = INT
type ArcDirection = INT
type MbArcDirection = Maybe ArcDirection
type GraphicsMode = DWORD
type MbGraphicsMode = Maybe GraphicsMode
type BackgroundMode = INT
type HatchStyle = INT
type StretchBltMode = INT
type TextAlignment = UINT
type ClippingMode = INT
type RegionType = INT
type VKey = DWORD
type MenuName = LPCTSTR
type MenuState = MenuFlag
type GMDIFlag = UINT
type MenuFlag = UINT
type MenuItem = UINT
type TrackMenuFlag = UINT
type SystemMenuCommand = UINT
type MenuID = UINT
type MenuItemMask = UINT
type Menu = LPCTSTR
type TPMPARAMS = ()
type Accelerator = LPCTSTR
type Cursor = LPTSTR
type Icon = LPTSTR
type MBStyle = UINT
type MBStatus = UINT
type StdHandleId = DWORD
type ExitOption = UINT
type Beep = UINT
type MbBeep = Maybe Beep
type Duration = Int
type MbDuration = Maybe Duration
type TimerId = UINT
type TIMERPROC = FunPtr (HWND -> UINT -> TimerId -> DWORD -> IO ())
type MilliSeconds = DWORD
type ClassName = LPCTSTR
type ClassStyle = UINT
type WNDCLASS = (ClassStyle, HINSTANCE, Maybe HICON, Maybe HCURSOR, Maybe HBRUSH, Maybe LPCTSTR, ClassName)
type WindowStyle = DWORD
type WindowStyleEx = DWORD
type Pos = Int
type MbPos = Maybe Pos
type WindowClosure = HWND -> WindowMessage -> WPARAM -> LPARAM -> IO LRESULT
type PAINTSTRUCT = (HDC, Bool, RECT)
type LPPAINTSTRUCT = Addr
type ShowWindowControl = DWORD
type SetWindowPosFlags = UINT
type GetDCExFlags = DWORD
type LPMSG = Addr
type ButtonStyle = WindowStyle
type ButtonState = UINT
type ComboBoxStyle = WindowStyle
type EditStyle = WindowStyle
type ListBoxStyle = WindowStyle
type ScrollbarStyle = WindowStyle
type StaticControlStyle = WindowStyle
type DTemplate = LPCTSTR
type DTemplateMem = Ptr Stub_DTM
type DialogStyle = WindowStyle
type ResourceID = Int
type DialogProc = HWND -> WindowMessage -> WPARAM -> LPARAM -> IO Int
type CSIDL = CInt
type SHGetFolderPathFlags = DWORD
type ULONG = DWORD
type LHANDLE = ULONG
type MapiFlag = ULONG
type MapiLogonType = ULONG -> LPSTR -> LPSTR -> MapiFlag -> ULONG -> Ptr LHANDLE -> IO ULONG
type MapiLogoffType = LHANDLE -> ULONG -> MapiFlag -> ULONG -> IO ULONG
type MapiResolveNameType = LHANDLE -> ULONG -> LPSTR -> MapiFlag -> ULONG -> Ptr (Ptr MapiRecipDesc) -> IO ULONG
type MapiFreeBufferType = Ptr () -> IO ULONG
type MapiSendMailType = LHANDLE -> ULONG -> Ptr Message -> MapiFlag -> ULONG -> IO ULONG
type MapiLoaded = (MapiFuncs, ForeignPtr ())
type Recipients = [(RecipientClass, Recipient)]
type Attachments = [Attachment]
type StockPen = INT
type PenStyle = INT
type StockPalette = WORD
type CharSet = UINT
type PitchAndFamily = UINT
type OutPrecision = UINT
type ClipPrecision = UINT
type FontQuality = UINT
type FontWeight = Word32
type FaceName = String
type StockFont = WORD
type ClipboardFormat = UINT
type StockBrush = INT
type RasterOp3 = Word32
type RasterOp4 = Word32
type BITMAP = (INT, INT, INT, INT, WORD, WORD, LPVOID)
type LPBITMAP = Ptr BITMAP
type BitmapCompression = DWORD
type ColorFormat = DWORD
type LPBITMAPINFO = Ptr ()
type BITMAPINFOHEADER = (DWORD, LONG, LONG, WORD, WORD, BitmapCompression, DWORD, LONG, LONG, Maybe DWORD, Maybe DWORD)
type LPBITMAPINFOHEADER = Ptr BITMAPINFOHEADER
type BITMAPFILEHEADER = (WORD, DWORD, WORD, WORD, DWORD)
type LPBITMAPFILEHEADER = Ptr BITMAPFILEHEADER
type HandlerFunction = HANDLE -> SERVICE_CONTROL -> IO Bool
type ServiceMainFunction = String -> [String] -> HANDLE -> IO ()
type AppID = String
type DelegationToken = String
type RefreshToken = String
type Name = String
type Tag = String
type XPos = Length
type YPos = Length
type Width = Length
type Height = Length
type Layer = Int
type Delay = Time
type Position = (XPos, YPos)
type Size = (Width, Height)
type Orientation = (Bool, Direction)
type RelBlock s b = Block Distance s b
type AbsBlock s b = Block (Angle, Length) s b
type AbsFloorplan s b = [(Position, AbsBlock s b)]
type Color = (Float, Float, Float)
type Postscript = ShowS
type Name = String
type Tag = String
type XPos = Length
type YPos = Length
type Width = Length
type Height = Length
type Layer = Int
type Delay = Time
type InterpDesignDB lib x = (DesignDB lib, Map Signal x)
type Guide = (Signal, Layer_, Direction, Length)
type Wired lib = LayoutT Guide CellId (Lava lib)
type InterpDesignDB lib x = (DesignDB lib, Map Signal x)
type Wired lib = LayoutT Guide CellId (Lava lib)
type FilterLike f s t a b = (a -> f (Maybe b)) -> s -> f t
type Filter s t a b = forall f. Applicative f => FilterLike f s t a b
type FilterLike' f s a = FilterLike f s s a a
type Filter' s a = forall f. Applicative f => FilterLike' f s a
type MapWitness cc w1 w2 = forall r v1. w1 v1 -> (forall v2. w2 v2 -> (cc v1 v2) -> r) -> r
type PromptString = String
type PromptString = String
type PureState = ([String], Seq Char)
type TermDoc = Doc Effect
type SimpleTermDoc = SimpleDoc Effect
type TermDoc = Doc Effect
type SimpleTermDoc = SimpleDoc Effect
type Log = [String]
type Conn a = ReaderT Connection IO a
type Uid = Text
type Name = Text
type Version = Text
type Queue = Text
type Token = Text
type Timeout = Text
type Metadata = Maybe Text
type Artifact = (Text, Digest SHA256, Int64, ByteString)
type MonadFlow m = (MonadBaseControl IO m, MonadCatch m, MonadIO m, MonadLogger m, MonadReader FlowEnv m, MonadError FlowError m)
type Words a = [Word a]
type Wordpairs a = [Wordpair a]
type WN a = ?wne :: WordNetEnv => a
type Word = String
type WN a = ?wne :: WordNetEnv => a
type Word = String
type WordSet = Set Text
type WordList = Vector Text
type PosIndex = Integer
type Workflow m = WF Stat m
type WorkflowList m a b = Map String (a -> Workflow m b)
type WM = WrapMap
type WP = WrapPoint
type Name = String
type Filter name str = T name str -> T name str
type T = [Atom]
type EmbeddedExceptions = [Exceptional String Char]
type Atom = T
type Encoding = String
type Encoded = String
type T = [Atom]
type Atom = T
type T i branch leaf = (i, Elem i branch leaf)
type AttributePlain = (String, String)
type Filter i name str = T i name str -> T i name str
type FilterA m i name str = T i name str -> m (T i name str)
type T i name str = [[[T i name str]]]
type PosTag = (T, Tag)
type XmlTree name string = T T name string
type Parser i a = Parser (i, Tag) a
type ErrorMsg = (Int, String)
type XmlDoc = T T
type StatusChecker = Status -> ResponseHeaders -> CookieJar -> Maybe SomeException
type ContentType = ByteString
type Run body = Req -> IO (Response body)
type StatusChecker = Status -> ResponseHeaders -> CookieJar -> Maybe SomeException
type StatusChecker = Status -> ResponseHeaders -> CookieJar -> Maybe SomeException
type ContentType = ByteString
type Run body = Req -> IO (Response body)
type StatusChecker = Status -> ResponseHeaders -> CookieJar -> Maybe SomeException
type CharParser a = Parser Char a
type CharResult a = Result Char a
type ParseError = String
type H a = [a] -> [a]
type Anchor u = Point2 u
type FontName = String
type CodePoint = Int
type CharWidthLookup = CodePoint -> Vec2 Double
type FontLoadMsg = String
type PSCharCode = Int
type PSEncodingScheme = String
type AfmBoundingBox = BoundingBox AfmUnit
type AfmKey = String
type GlobalInfo = Map AfmKey String
type KernChar u = (u, EscapedChar)
type DrawingContextF = DrawingContext -> DrawingContext
type PrimResult u a = (a, CatPrim)
type PointDisplace u = Point2 u -> Point2 u
type ThetaPointDisplace u = Radian -> Point2 u -> Point2 u
type Graphic u = Image u (UNil u)
type DImage a = Image Double a
type DGraphic = Graphic Double
type ConnectorGraphic u = ConnectorImage u (UNil u)
type DConnectorImage a = ConnectorImage Double a
type DConnectorGraphic = ConnectorGraphic Double
type LocGraphic u = LocImage u (UNil u)
type DLocImage a = LocImage Double a
type DLocGraphic = LocGraphic Double
type LocDrawing u a = GenLocDrawing () u a
type LocTrace u a = GenLocTrace () u a
type TraceDrawing u a = GenTraceDrawing () u a
type DTraceDrawing a = TraceDrawing Double a
type AdvanceVec u = Vec2 u
type DAdvObject a = AdvObject Double a
type AdvGraphic u = AdvObject u (UNil u)
type DAdvGraphic = AdvGraphic Double
type LocThetaGraphic u = LocThetaImage u (UNil u)
type DLocThetaGraphic = LocThetaGraphic Double
type DLocThetaImage a = LocThetaImage Double a
type GenPosGraphic st u = GenPosObject st u (UNil u)
type PosObject u a = GenPosObject () u a
type DPosObject a = PosObject Double a
type PosGraphic u = PosObject u (UNil u)
type DPosGraphic = PosGraphic Double
type BoundedGraphic u = Image u (BoundingBox u)
type BoundedLocGraphic u = LocImage u (BoundingBox u)
type BoundedLocThetaGraphic u = LocThetaImage u (BoundingBox u)
type Chain u a = GenChain () u a
type DChain a = Chain Double a
type FontLoader = [Either FontDef FontFamily] -> IO FontLoadResult
type EncodingVector = IntMap String
type DVec2 = Vec2 Double
type DPoint2 = Point2 Double
type DMatrix3'3 = Matrix3'3 Double
type DBoundingBox = BoundingBox Double
type FontSize = Int
type CharCount = Int
type KerningChar = (Double, EscapedChar)
type Doc u a = GenDoc () u a
type GenDocGraphic st u = GenDoc st u (UNil u)
type DocGraphic u = Doc u (UNil u)
type ConnectorBox u = ConnectorGraphic u
type GridContextF = GridProps -> GridProps
type DAbsPath = AbsPath Double
type DPathViewL = PathViewL Double
type DPathViewR = PathViewR Double
type DPathSegment = PathSegment Double
type DotLocImage u = LocImage u (DotAnchor u)
type DDotLocImage = DotLocImage Double
type PathSpec u a = GenPathSpec () u a
type ConnectorPathQuery u = ConnectorQuery u (AbsPath u)
type SpacingProjection u = ConnectorProps -> Point2 u -> Point2 u -> Query u (Point2 u)
type ArrowConnector u = ConnectorImage u (AbsPath u)
type DShape t = Shape t Double
type DCircle = Circle Double
type DDiamond = Diamond Double
type DEllipse = Ellipse Double
type DParallelogram = Parallelogram Double
type DRectangle = Rectangle Double
type DSemicircle = Semicircle Double
type DInvSemicircle = InvSemicircle Double
type DSemiellipse = Semiellipse Double
type DInvSemiellipse = InvSemiellipse Double
type DTrapezium = Trapezium Double
type DTriangle = Triangle Double
type DInvTriangle = InvTriangle Double
type DrawWordF = RGBi -> Double -> Double -> Int -> DLocGraphic
type RenderScalingCtx = ScalingContext Int Int Double
type Height = Int
type GreekText = (Height, [[Tile]])
type Height = Int
type OTMAnchorConn node u = TreeDirection -> u -> node -> [node] -> Graphic u
type CoordTree a = Tree (Point2 UW, a)
type TreeSpec ix u a = Tree (AnnoNode ix u a)
type Id = Int
type Var a = TVar a
type Style = Int
type EventId = Int
type Point = Point2 Int
type Size = Size2D Int
type Vector = Vector2 Int
type Rect = Rect2D Int
type ReadAttr w a = Attr w a
type WriteAttr w a = Attr w a
type CreateAttr w a = Attr w a
type Window a = EvtHandler (CWindow a)
type ScrolledWindow a = Panel (CScrolledWindow a)
type Frame a = TopLevelWindow (CFrame a)
type MDIParentFrame a = Frame (CMDIParentFrame a)
type MDIChildFrame a = Frame (CMDIChildFrame a)
type Panel a = Window (CPanel a)
type Notebook a = Control (CNotebook a)
type Button a = Control (CButton a)
type BitmapButton a = Button (CBitmapButton a)
type TextCtrl a = Control (CTextCtrl a)
type CheckBox a = Control (CCheckBox a)
type Choice a = Control (CChoice a)
type ComboBox a = Choice (CComboBox a)
type ListBox a = Control (CListBox a)
type SingleListBox a = ListBox (CSingleListBox a)
type MultiListBox a = ListBox (CMultiListBox a)
type RadioBox a = Control (CRadioBox a)
type SpinCtrl a = Control (CSpinCtrl a)
type Slider a = Control (CSlider a)
type Gauge a = Control (CGauge a)
type ToggleButton a = Control (CToggleButton a)
type BitmapToggleButton a = ToggleButton (CBitmapToggleButton a)
type TreeCtrl a = Control (CTreeCtrl a)
type ListCtrl a = Control (CListCtrl a)
type StaticText a = Control (CStaticText a)
type SplitterWindow a = Window (CSplitterWindow a)
type ImageList a = WxObject (CImageList a)
type MediaCtrl a = Window (CMediaCtrl a)
type StyledTextCtrl a = Control (CStyledTextCtrl a)
type PropertyGrid a = Control (CPropertyGrid a)
type Dialog a = TopLevelWindow (CDialog a)
type Timer = TimerEx ()
type MenuBar a = EvtHandler (CMenuBar a)
type Menu a = EvtHandler (CMenu a)
type MenuItem a = WxObject (CMenuItem a)
type ToolBar a = ToolBarBase (CToolBar a)
type DC a = WxObject (CDC a)
type Bitmap a = GDIObject (CBitmap a)
type ManagedPtr a = Ptr (CManagedPtr a)
type TManagedPtr a = CManagedPtr a
type AcceleratorEntry a = Object (CAcceleratorEntry a)
type TAcceleratorEntry a = CAcceleratorEntry a
type AcceleratorTable a = Object (CAcceleratorTable a)
type TAcceleratorTable a = CAcceleratorTable a
type ActivateEvent a = Event (CActivateEvent a)
type TActivateEvent a = TEvent (CActivateEvent a)
type App a = EvtHandler (CApp a)
type TApp a = TEvtHandler (CApp a)
type ArrayString a = WxArray (CArrayString a)
type TArrayString a = TWxArray (CArrayString a)
type ArtProvider a = WxObject (CArtProvider a)
type TArtProvider a = TWxObject (CArtProvider a)
type AutoBufferedPaintDC a = DC (CAutoBufferedPaintDC a)
type TAutoBufferedPaintDC a = TDC (CAutoBufferedPaintDC a)
type AutomationObject a = WxObject (CAutomationObject a)
type TAutomationObject a = TWxObject (CAutomationObject a)
type Bitmap a = GDIObject (CBitmap a)
type TBitmap a = TGDIObject (CBitmap a)
type BitmapButton a = Button (CBitmapButton a)
type TBitmapButton a = TButton (CBitmapButton a)
type BitmapDataObject a = DataObjectSimple (CBitmapDataObject a)
type TBitmapDataObject a = TDataObjectSimple (CBitmapDataObject a)
type BitmapHandler a = WxObject (CBitmapHandler a)
type TBitmapHandler a = TWxObject (CBitmapHandler a)
type BitmapToggleButton a = ToggleButton (CBitmapToggleButton a)
type TBitmapToggleButton a = TToggleButton (CBitmapToggleButton a)
type BoolProperty a = PGProperty (CBoolProperty a)
type TBoolProperty a = TPGProperty (CBoolProperty a)
type BoxSizer a = Sizer (CBoxSizer a)
type TBoxSizer a = TSizer (CBoxSizer a)
type Brush a = GDIObject (CBrush a)
type TBrush a = TGDIObject (CBrush a)
type BrushList a = List (CBrushList a)
type TBrushList a = TList (CBrushList a)
type BufferedDC a = DC (CBufferedDC a)
type TBufferedDC a = TDC (CBufferedDC a)
type BufferedInputStream a = FilterInputStream (CBufferedInputStream a)
type TBufferedInputStream a = TFilterInputStream (CBufferedInputStream a)
type BufferedOutputStream a = FilterOutputStream (CBufferedOutputStream a)
type TBufferedOutputStream a = TFilterOutputStream (CBufferedOutputStream a)
type BufferedPaintDC a = DC (CBufferedPaintDC a)
type TBufferedPaintDC a = TDC (CBufferedPaintDC a)
type BusyCursor a = Object (CBusyCursor a)
type TBusyCursor a = CBusyCursor a
type BusyInfo a = Object (CBusyInfo a)
type TBusyInfo a = CBusyInfo a
type Button a = Control (CButton a)
type TButton a = TControl (CButton a)
type CSConv a = MBConv (CCSConv a)
type TCSConv a = TMBConv (CCSConv a)
type CalculateLayoutEvent a = Event (CCalculateLayoutEvent a)
type TCalculateLayoutEvent a = TEvent (CCalculateLayoutEvent a)
type CalendarCtrl a = Control (CCalendarCtrl a)
type TCalendarCtrl a = TControl (CCalendarCtrl a)
type CalendarDateAttr a = Object (CCalendarDateAttr a)
type TCalendarDateAttr a = CCalendarDateAttr a
type CalendarEvent a = CommandEvent (CCalendarEvent a)
type TCalendarEvent a = TCommandEvent (CCalendarEvent a)
type Caret a = Object (CCaret a)
type TCaret a = CCaret a
type CbAntiflickerPlugin a = CbPluginBase (CCbAntiflickerPlugin a)
type TCbAntiflickerPlugin a = TCbPluginBase (CCbAntiflickerPlugin a)
type CbBarDragPlugin a = CbPluginBase (CCbBarDragPlugin a)
type TCbBarDragPlugin a = TCbPluginBase (CCbBarDragPlugin a)
type CbBarHintsPlugin a = CbPluginBase (CCbBarHintsPlugin a)
type TCbBarHintsPlugin a = TCbPluginBase (CCbBarHintsPlugin a)
type CbBarInfo a = WxObject (CCbBarInfo a)
type TCbBarInfo a = TWxObject (CCbBarInfo a)
type CbBarSpy a = EvtHandler (CCbBarSpy a)
type TCbBarSpy a = TEvtHandler (CCbBarSpy a)
type CbCloseBox a = CbMiniButton (CCbCloseBox a)
type TCbCloseBox a = TCbMiniButton (CCbCloseBox a)
type CbCollapseBox a = CbMiniButton (CCbCollapseBox a)
type TCbCollapseBox a = TCbMiniButton (CCbCollapseBox a)
type CbCommonPaneProperties a = WxObject (CCbCommonPaneProperties a)
type TCbCommonPaneProperties a = TWxObject (CCbCommonPaneProperties a)
type CbCustomizeBarEvent a = CbPluginEvent (CCbCustomizeBarEvent a)
type TCbCustomizeBarEvent a = TCbPluginEvent (CCbCustomizeBarEvent a)
type CbCustomizeLayoutEvent a = CbPluginEvent (CCbCustomizeLayoutEvent a)
type TCbCustomizeLayoutEvent a = TCbPluginEvent (CCbCustomizeLayoutEvent a)
type CbDimHandlerBase a = WxObject (CCbDimHandlerBase a)
type TCbDimHandlerBase a = TWxObject (CCbDimHandlerBase a)
type CbDimInfo a = WxObject (CCbDimInfo a)
type TCbDimInfo a = TWxObject (CCbDimInfo a)
type CbDockBox a = CbMiniButton (CCbDockBox a)
type TCbDockBox a = TCbMiniButton (CCbDockBox a)
type CbDockPane a = WxObject (CCbDockPane a)
type TCbDockPane a = TWxObject (CCbDockPane a)
type CbDrawBarDecorEvent a = CbPluginEvent (CCbDrawBarDecorEvent a)
type TCbDrawBarDecorEvent a = TCbPluginEvent (CCbDrawBarDecorEvent a)
type CbDrawBarHandlesEvent a = CbPluginEvent (CCbDrawBarHandlesEvent a)
type TCbDrawBarHandlesEvent a = TCbPluginEvent (CCbDrawBarHandlesEvent a)
type CbDrawHintRectEvent a = CbPluginEvent (CCbDrawHintRectEvent a)
type TCbDrawHintRectEvent a = TCbPluginEvent (CCbDrawHintRectEvent a)
type CbDrawPaneBkGroundEvent a = CbPluginEvent (CCbDrawPaneBkGroundEvent a)
type TCbDrawPaneBkGroundEvent a = TCbPluginEvent (CCbDrawPaneBkGroundEvent a)
type CbDrawPaneDecorEvent a = CbPluginEvent (CCbDrawPaneDecorEvent a)
type TCbDrawPaneDecorEvent a = TCbPluginEvent (CCbDrawPaneDecorEvent a)
type CbDrawRowBkGroundEvent a = CbPluginEvent (CCbDrawRowBkGroundEvent a)
type TCbDrawRowBkGroundEvent a = TCbPluginEvent (CCbDrawRowBkGroundEvent a)
type CbDrawRowDecorEvent a = CbPluginEvent (CCbDrawRowDecorEvent a)
type TCbDrawRowDecorEvent a = TCbPluginEvent (CCbDrawRowDecorEvent a)
type CbDrawRowHandlesEvent a = CbPluginEvent (CCbDrawRowHandlesEvent a)
type TCbDrawRowHandlesEvent a = TCbPluginEvent (CCbDrawRowHandlesEvent a)
type CbDynToolBarDimHandler a = CbDimHandlerBase (CCbDynToolBarDimHandler a)
type TCbDynToolBarDimHandler a = TCbDimHandlerBase (CCbDynToolBarDimHandler a)
type CbFinishDrawInAreaEvent a = CbPluginEvent (CCbFinishDrawInAreaEvent a)
type TCbFinishDrawInAreaEvent a = TCbPluginEvent (CCbFinishDrawInAreaEvent a)
type CbFloatedBarWindow a = ToolWindow (CCbFloatedBarWindow a)
type TCbFloatedBarWindow a = TToolWindow (CCbFloatedBarWindow a)
type CbGCUpdatesMgr a = CbSimpleUpdatesMgr (CCbGCUpdatesMgr a)
type TCbGCUpdatesMgr a = TCbSimpleUpdatesMgr (CCbGCUpdatesMgr a)
type CbHintAnimationPlugin a = CbPluginBase (CCbHintAnimationPlugin a)
type TCbHintAnimationPlugin a = TCbPluginBase (CCbHintAnimationPlugin a)
type CbInsertBarEvent a = CbPluginEvent (CCbInsertBarEvent a)
type TCbInsertBarEvent a = TCbPluginEvent (CCbInsertBarEvent a)
type CbLayoutRowEvent a = CbPluginEvent (CCbLayoutRowEvent a)
type TCbLayoutRowEvent a = TCbPluginEvent (CCbLayoutRowEvent a)
type CbLeftDClickEvent a = CbPluginEvent (CCbLeftDClickEvent a)
type TCbLeftDClickEvent a = TCbPluginEvent (CCbLeftDClickEvent a)
type CbLeftDownEvent a = CbPluginEvent (CCbLeftDownEvent a)
type TCbLeftDownEvent a = TCbPluginEvent (CCbLeftDownEvent a)
type CbLeftUpEvent a = CbPluginEvent (CCbLeftUpEvent a)
type TCbLeftUpEvent a = TCbPluginEvent (CCbLeftUpEvent a)
type CbMiniButton a = WxObject (CCbMiniButton a)
type TCbMiniButton a = TWxObject (CCbMiniButton a)
type CbMotionEvent a = CbPluginEvent (CCbMotionEvent a)
type TCbMotionEvent a = TCbPluginEvent (CCbMotionEvent a)
type CbPaneDrawPlugin a = CbPluginBase (CCbPaneDrawPlugin a)
type TCbPaneDrawPlugin a = TCbPluginBase (CCbPaneDrawPlugin a)
type CbPluginBase a = EvtHandler (CCbPluginBase a)
type TCbPluginBase a = TEvtHandler (CCbPluginBase a)
type CbPluginEvent a = Event (CCbPluginEvent a)
type TCbPluginEvent a = TEvent (CCbPluginEvent a)
type CbRemoveBarEvent a = CbPluginEvent (CCbRemoveBarEvent a)
type TCbRemoveBarEvent a = TCbPluginEvent (CCbRemoveBarEvent a)
type CbResizeBarEvent a = CbPluginEvent (CCbResizeBarEvent a)
type TCbResizeBarEvent a = TCbPluginEvent (CCbResizeBarEvent a)
type CbResizeRowEvent a = CbPluginEvent (CCbResizeRowEvent a)
type TCbResizeRowEvent a = TCbPluginEvent (CCbResizeRowEvent a)
type CbRightDownEvent a = CbPluginEvent (CCbRightDownEvent a)
type TCbRightDownEvent a = TCbPluginEvent (CCbRightDownEvent a)
type CbRightUpEvent a = CbPluginEvent (CCbRightUpEvent a)
type TCbRightUpEvent a = TCbPluginEvent (CCbRightUpEvent a)
type CbRowDragPlugin a = CbPluginBase (CCbRowDragPlugin a)
type TCbRowDragPlugin a = TCbPluginBase (CCbRowDragPlugin a)
type CbRowInfo a = WxObject (CCbRowInfo a)
type TCbRowInfo a = TWxObject (CCbRowInfo a)
type CbRowLayoutPlugin a = CbPluginBase (CCbRowLayoutPlugin a)
type TCbRowLayoutPlugin a = TCbPluginBase (CCbRowLayoutPlugin a)
type CbSimpleCustomizationPlugin a = CbPluginBase (CCbSimpleCustomizationPlugin a)
type TCbSimpleCustomizationPlugin a = TCbPluginBase (CCbSimpleCustomizationPlugin a)
type CbSimpleUpdatesMgr a = CbUpdatesManagerBase (CCbSimpleUpdatesMgr a)
type TCbSimpleUpdatesMgr a = TCbUpdatesManagerBase (CCbSimpleUpdatesMgr a)
type CbSizeBarWndEvent a = CbPluginEvent (CCbSizeBarWndEvent a)
type TCbSizeBarWndEvent a = TCbPluginEvent (CCbSizeBarWndEvent a)
type CbStartBarDraggingEvent a = CbPluginEvent (CCbStartBarDraggingEvent a)
type TCbStartBarDraggingEvent a = TCbPluginEvent (CCbStartBarDraggingEvent a)
type CbStartDrawInAreaEvent a = CbPluginEvent (CCbStartDrawInAreaEvent a)
type TCbStartDrawInAreaEvent a = TCbPluginEvent (CCbStartDrawInAreaEvent a)
type CbUpdatesManagerBase a = WxObject (CCbUpdatesManagerBase a)
type TCbUpdatesManagerBase a = TWxObject (CCbUpdatesManagerBase a)
type CheckBox a = Control (CCheckBox a)
type TCheckBox a = TControl (CCheckBox a)
type CheckListBox a = ListBox (CCheckListBox a)
type TCheckListBox a = TListBox (CCheckListBox a)
type Choice a = Control (CChoice a)
type TChoice a = TControl (CChoice a)
type ClassInfo a = Object (CClassInfo a)
type TClassInfo a = CClassInfo a
type Client a = ClientBase (CClient a)
type TClient a = TClientBase (CClient a)
type ClientBase a = WxObject (CClientBase a)
type TClientBase a = TWxObject (CClientBase a)
type ClientDC a = WindowDC (CClientDC a)
type TClientDC a = TWindowDC (CClientDC a)
type ClientData a = Object (CClientData a)
type TClientData a = CClientData a
type ClientDataContainer a = Object (CClientDataContainer a)
type TClientDataContainer a = CClientDataContainer a
type Clipboard a = WxObject (CClipboard a)
type TClipboard a = TWxObject (CClipboard a)
type CloseEvent a = Event (CCloseEvent a)
type TCloseEvent a = TEvent (CCloseEvent a)
type Closure a = WxObject (CClosure a)
type TClosure a = TWxObject (CClosure a)
type Colour a = WxObject (CColour a)
type TColour a = TWxObject (CColour a)
type ColourData a = WxObject (CColourData a)
type TColourData a = TWxObject (CColourData a)
type ColourDatabase a = List (CColourDatabase a)
type TColourDatabase a = TList (CColourDatabase a)
type ColourDialog a = Dialog (CColourDialog a)
type TColourDialog a = TDialog (CColourDialog a)
type ComboBox a = Choice (CComboBox a)
type TComboBox a = TChoice (CComboBox a)
type Command a = WxObject (CCommand a)
type TCommand a = TWxObject (CCommand a)
type CommandEvent a = Event (CCommandEvent a)
type TCommandEvent a = TEvent (CCommandEvent a)
type CommandLineParser a = Object (CCommandLineParser a)
type TCommandLineParser a = CCommandLineParser a
type CommandProcessor a = WxObject (CCommandProcessor a)
type TCommandProcessor a = TWxObject (CCommandProcessor a)
type Condition a = Object (CCondition a)
type TCondition a = CCondition a
type ConfigBase a = Object (CConfigBase a)
type TConfigBase a = CConfigBase a
type Connection a = ConnectionBase (CConnection a)
type TConnection a = TConnectionBase (CConnection a)
type ConnectionBase a = WxObject (CConnectionBase a)
type TConnectionBase a = TWxObject (CConnectionBase a)
type ContextHelp a = WxObject (CContextHelp a)
type TContextHelp a = TWxObject (CContextHelp a)
type ContextHelpButton a = BitmapButton (CContextHelpButton a)
type TContextHelpButton a = TBitmapButton (CContextHelpButton a)
type Control a = Window (CControl a)
type TControl a = TWindow (CControl a)
type CountingOutputStream a = OutputStream (CCountingOutputStream a)
type TCountingOutputStream a = TOutputStream (CCountingOutputStream a)
type CriticalSection a = Object (CCriticalSection a)
type TCriticalSection a = CCriticalSection a
type CriticalSectionLocker a = Object (CCriticalSectionLocker a)
type TCriticalSectionLocker a = CCriticalSectionLocker a
type Cursor a = Bitmap (CCursor a)
type TCursor a = TBitmap (CCursor a)
type CustomDataObject a = DataObjectSimple (CCustomDataObject a)
type TCustomDataObject a = TDataObjectSimple (CCustomDataObject a)
type DC a = WxObject (CDC a)
type TDC a = TWxObject (CDC a)
type DCClipper a = Object (CDCClipper a)
type TDCClipper a = CDCClipper a
type DDEClient a = ClientBase (CDDEClient a)
type TDDEClient a = TClientBase (CDDEClient a)
type DDEConnection a = ConnectionBase (CDDEConnection a)
type TDDEConnection a = TConnectionBase (CDDEConnection a)
type DDEServer a = ServerBase (CDDEServer a)
type TDDEServer a = TServerBase (CDDEServer a)
type DataFormat a = Object (CDataFormat a)
type TDataFormat a = CDataFormat a
type DataInputStream a = Object (CDataInputStream a)
type TDataInputStream a = CDataInputStream a
type DataObject a = Object (CDataObject a)
type TDataObject a = CDataObject a
type DataObjectComposite a = DataObject (CDataObjectComposite a)
type TDataObjectComposite a = TDataObject (CDataObjectComposite a)
type DataObjectSimple a = DataObject (CDataObjectSimple a)
type TDataObjectSimple a = TDataObject (CDataObjectSimple a)
type DataOutputStream a = Object (CDataOutputStream a)
type TDataOutputStream a = CDataOutputStream a
type Database a = WxObject (CDatabase a)
type TDatabase a = TWxObject (CDatabase a)
type DateProperty a = PGProperty (CDateProperty a)
type TDateProperty a = TPGProperty (CDateProperty a)
type DateTime a = Object (CDateTime a)
type TDateTime a = CDateTime a
type Db a = Object (CDb a)
type TDb a = CDb a
type DbColDef a = Object (CDbColDef a)
type TDbColDef a = CDbColDef a
type DbColFor a = Object (CDbColFor a)
type TDbColFor a = CDbColFor a
type DbColInf a = Object (CDbColInf a)
type TDbColInf a = CDbColInf a
type DbConnectInf a = Object (CDbConnectInf a)
type TDbConnectInf a = CDbConnectInf a
type DbInf a = Object (CDbInf a)
type TDbInf a = CDbInf a
type DbSqlTypeInfo a = Object (CDbSqlTypeInfo a)
type TDbSqlTypeInfo a = CDbSqlTypeInfo a
type DbTable a = Object (CDbTable a)
type TDbTable a = CDbTable a
type DbTableInfo a = Object (CDbTableInfo a)
type TDbTableInfo a = CDbTableInfo a
type DebugContext a = Object (CDebugContext a)
type TDebugContext a = CDebugContext a
type DialUpEvent a = Event (CDialUpEvent a)
type TDialUpEvent a = TEvent (CDialUpEvent a)
type DialUpManager a = Object (CDialUpManager a)
type TDialUpManager a = CDialUpManager a
type Dialog a = TopLevelWindow (CDialog a)
type TDialog a = TTopLevelWindow (CDialog a)
type DirDialog a = Dialog (CDirDialog a)
type TDirDialog a = TDialog (CDirDialog a)
type DirTraverser a = Object (CDirTraverser a)
type TDirTraverser a = CDirTraverser a
type DocChildFrame a = Frame (CDocChildFrame a)
type TDocChildFrame a = TFrame (CDocChildFrame a)
type DocMDIChildFrame a = MDIChildFrame (CDocMDIChildFrame a)
type TDocMDIChildFrame a = TMDIChildFrame (CDocMDIChildFrame a)
type DocMDIParentFrame a = MDIParentFrame (CDocMDIParentFrame a)
type TDocMDIParentFrame a = TMDIParentFrame (CDocMDIParentFrame a)
type DocManager a = EvtHandler (CDocManager a)
type TDocManager a = TEvtHandler (CDocManager a)
type DocParentFrame a = Frame (CDocParentFrame a)
type TDocParentFrame a = TFrame (CDocParentFrame a)
type DocTemplate a = WxObject (CDocTemplate a)
type TDocTemplate a = TWxObject (CDocTemplate a)
type Document a = EvtHandler (CDocument a)
type TDocument a = TEvtHandler (CDocument a)
type DragImage a = WxObject (CDragImage a)
type TDragImage a = TWxObject (CDragImage a)
type DrawControl a = Control (CDrawControl a)
type TDrawControl a = TControl (CDrawControl a)
type DrawWindow a = Window (CDrawWindow a)
type TDrawWindow a = TWindow (CDrawWindow a)
type DropFilesEvent a = Event (CDropFilesEvent a)
type TDropFilesEvent a = TEvent (CDropFilesEvent a)
type DropSource a = Object (CDropSource a)
type TDropSource a = CDropSource a
type DropTarget a = Object (CDropTarget a)
type TDropTarget a = CDropTarget a
type DynToolInfo a = ToolLayoutItem (CDynToolInfo a)
type TDynToolInfo a = TToolLayoutItem (CDynToolInfo a)
type DynamicLibrary a = Object (CDynamicLibrary a)
type TDynamicLibrary a = CDynamicLibrary a
type DynamicSashWindow a = Window (CDynamicSashWindow a)
type TDynamicSashWindow a = TWindow (CDynamicSashWindow a)
type DynamicToolBar a = ToolBarBase (CDynamicToolBar a)
type TDynamicToolBar a = TToolBarBase (CDynamicToolBar a)
type EditableListBox a = Panel (CEditableListBox a)
type TEditableListBox a = TPanel (CEditableListBox a)
type EncodingConverter a = WxObject (CEncodingConverter a)
type TEncodingConverter a = TWxObject (CEncodingConverter a)
type EraseEvent a = Event (CEraseEvent a)
type TEraseEvent a = TEvent (CEraseEvent a)
type Event a = WxObject (CEvent a)
type TEvent a = TWxObject (CEvent a)
type EvtHandler a = WxObject (CEvtHandler a)
type TEvtHandler a = TWxObject (CEvtHandler a)
type ExprDatabase a = List (CExprDatabase a)
type TExprDatabase a = TList (CExprDatabase a)
type FFile a = Object (CFFile a)
type TFFile a = CFFile a
type FFileInputStream a = InputStream (CFFileInputStream a)
type TFFileInputStream a = TInputStream (CFFileInputStream a)
type FFileOutputStream a = OutputStream (CFFileOutputStream a)
type TFFileOutputStream a = TOutputStream (CFFileOutputStream a)
type FSFile a = WxObject (CFSFile a)
type TFSFile a = TWxObject (CFSFile a)
type FTP a = Protocol (CFTP a)
type TFTP a = TProtocol (CFTP a)
type FileConfig a = ConfigBase (CFileConfig a)
type TFileConfig a = TConfigBase (CFileConfig a)
type FileDataObject a = DataObjectSimple (CFileDataObject a)
type TFileDataObject a = TDataObjectSimple (CFileDataObject a)
type FileDialog a = Dialog (CFileDialog a)
type TFileDialog a = TDialog (CFileDialog a)
type FileDropTarget a = DropTarget (CFileDropTarget a)
type TFileDropTarget a = TDropTarget (CFileDropTarget a)
type FileHistory a = WxObject (CFileHistory a)
type TFileHistory a = TWxObject (CFileHistory a)
type FileInputStream a = InputStream (CFileInputStream a)
type TFileInputStream a = TInputStream (CFileInputStream a)
type FileName a = Object (CFileName a)
type TFileName a = CFileName a
type FileOutputStream a = OutputStream (CFileOutputStream a)
type TFileOutputStream a = TOutputStream (CFileOutputStream a)
type FileProperty a = PGProperty (CFileProperty a)
type TFileProperty a = TPGProperty (CFileProperty a)
type FileSystem a = WxObject (CFileSystem a)
type TFileSystem a = TWxObject (CFileSystem a)
type FileSystemHandler a = WxObject (CFileSystemHandler a)
type TFileSystemHandler a = TWxObject (CFileSystemHandler a)
type FileType a = Object (CFileType a)
type TFileType a = CFileType a
type FilterInputStream a = InputStream (CFilterInputStream a)
type TFilterInputStream a = TInputStream (CFilterInputStream a)
type FilterOutputStream a = OutputStream (CFilterOutputStream a)
type TFilterOutputStream a = TOutputStream (CFilterOutputStream a)
type FindDialogEvent a = CommandEvent (CFindDialogEvent a)
type TFindDialogEvent a = TCommandEvent (CFindDialogEvent a)
type FindReplaceData a = WxObject (CFindReplaceData a)
type TFindReplaceData a = TWxObject (CFindReplaceData a)
type FindReplaceDialog a = Dialog (CFindReplaceDialog a)
type TFindReplaceDialog a = TDialog (CFindReplaceDialog a)
type FlexGridSizer a = GridSizer (CFlexGridSizer a)
type TFlexGridSizer a = TGridSizer (CFlexGridSizer a)
type FloatProperty a = PGProperty (CFloatProperty a)
type TFloatProperty a = TPGProperty (CFloatProperty a)
type FocusEvent a = Event (CFocusEvent a)
type TFocusEvent a = TEvent (CFocusEvent a)
type Font a = GDIObject (CFont a)
type TFont a = TGDIObject (CFont a)
type FontData a = WxObject (CFontData a)
type TFontData a = TWxObject (CFontData a)
type FontDialog a = Dialog (CFontDialog a)
type TFontDialog a = TDialog (CFontDialog a)
type FontEnumerator a = Object (CFontEnumerator a)
type TFontEnumerator a = CFontEnumerator a
type FontList a = List (CFontList a)
type TFontList a = TList (CFontList a)
type FontMapper a = Object (CFontMapper a)
type TFontMapper a = CFontMapper a
type Frame a = TopLevelWindow (CFrame a)
type TFrame a = TTopLevelWindow (CFrame a)
type FrameLayout a = EvtHandler (CFrameLayout a)
type TFrameLayout a = TEvtHandler (CFrameLayout a)
type GDIObject a = WxObject (CGDIObject a)
type TGDIObject a = TWxObject (CGDIObject a)
type GLCanvas a = Window (CGLCanvas a)
type TGLCanvas a = TWindow (CGLCanvas a)
type GLContext a = WxObject (CGLContext a)
type TGLContext a = TWxObject (CGLContext a)
type Gauge a = Control (CGauge a)
type TGauge a = TControl (CGauge a)
type Gauge95 a = Gauge (CGauge95 a)
type TGauge95 a = TGauge (CGauge95 a)
type GaugeMSW a = Gauge (CGaugeMSW a)
type TGaugeMSW a = TGauge (CGaugeMSW a)
type GenericDirCtrl a = Control (CGenericDirCtrl a)
type TGenericDirCtrl a = TControl (CGenericDirCtrl a)
type GenericDragImage a = DragImage (CGenericDragImage a)
type TGenericDragImage a = TDragImage (CGenericDragImage a)
type GenericValidator a = Validator (CGenericValidator a)
type TGenericValidator a = TValidator (CGenericValidator a)
type GraphicsBrush a = GraphicsObject (CGraphicsBrush a)
type TGraphicsBrush a = TGraphicsObject (CGraphicsBrush a)
type GraphicsContext a = GraphicsObject (CGraphicsContext a)
type TGraphicsContext a = TGraphicsObject (CGraphicsContext a)
type GraphicsFont a = GraphicsObject (CGraphicsFont a)
type TGraphicsFont a = TGraphicsObject (CGraphicsFont a)
type GraphicsMatrix a = GraphicsObject (CGraphicsMatrix a)
type TGraphicsMatrix a = TGraphicsObject (CGraphicsMatrix a)
type GraphicsObject a = WxObject (CGraphicsObject a)
type TGraphicsObject a = TWxObject (CGraphicsObject a)
type GraphicsPath a = GraphicsObject (CGraphicsPath a)
type TGraphicsPath a = TGraphicsObject (CGraphicsPath a)
type GraphicsPen a = GraphicsObject (CGraphicsPen a)
type TGraphicsPen a = TGraphicsObject (CGraphicsPen a)
type GraphicsRenderer a = GraphicsObject (CGraphicsRenderer a)
type TGraphicsRenderer a = TGraphicsObject (CGraphicsRenderer a)
type Grid a = ScrolledWindow (CGrid a)
type TGrid a = TScrolledWindow (CGrid a)
type GridCellAttr a = Object (CGridCellAttr a)
type TGridCellAttr a = CGridCellAttr a
type GridCellAutoWrapStringRenderer a = GridCellStringRenderer (CGridCellAutoWrapStringRenderer a)
type TGridCellAutoWrapStringRenderer a = TGridCellStringRenderer (CGridCellAutoWrapStringRenderer a)
type GridCellBoolEditor a = GridCellEditor (CGridCellBoolEditor a)
type TGridCellBoolEditor a = TGridCellEditor (CGridCellBoolEditor a)
type GridCellBoolRenderer a = GridCellRenderer (CGridCellBoolRenderer a)
type TGridCellBoolRenderer a = TGridCellRenderer (CGridCellBoolRenderer a)
type GridCellChoiceEditor a = GridCellEditor (CGridCellChoiceEditor a)
type TGridCellChoiceEditor a = TGridCellEditor (CGridCellChoiceEditor a)
type GridCellCoordsArray a = Object (CGridCellCoordsArray a)
type TGridCellCoordsArray a = CGridCellCoordsArray a
type GridCellEditor a = GridCellWorker (CGridCellEditor a)
type TGridCellEditor a = TGridCellWorker (CGridCellEditor a)
type GridCellFloatEditor a = GridCellTextEditor (CGridCellFloatEditor a)
type TGridCellFloatEditor a = TGridCellTextEditor (CGridCellFloatEditor a)
type GridCellFloatRenderer a = GridCellStringRenderer (CGridCellFloatRenderer a)
type TGridCellFloatRenderer a = TGridCellStringRenderer (CGridCellFloatRenderer a)
type GridCellNumberEditor a = GridCellTextEditor (CGridCellNumberEditor a)
type TGridCellNumberEditor a = TGridCellTextEditor (CGridCellNumberEditor a)
type GridCellNumberRenderer a = GridCellStringRenderer (CGridCellNumberRenderer a)
type TGridCellNumberRenderer a = TGridCellStringRenderer (CGridCellNumberRenderer a)
type GridCellRenderer a = GridCellWorker (CGridCellRenderer a)
type TGridCellRenderer a = TGridCellWorker (CGridCellRenderer a)
type GridCellStringRenderer a = GridCellRenderer (CGridCellStringRenderer a)
type TGridCellStringRenderer a = TGridCellRenderer (CGridCellStringRenderer a)
type GridCellTextEditor a = GridCellEditor (CGridCellTextEditor a)
type TGridCellTextEditor a = TGridCellEditor (CGridCellTextEditor a)
type GridCellTextEnterEditor a = GridCellTextEditor (CGridCellTextEnterEditor a)
type TGridCellTextEnterEditor a = TGridCellTextEditor (CGridCellTextEnterEditor a)
type GridCellWorker a = Object (CGridCellWorker a)
type TGridCellWorker a = CGridCellWorker a
type GridEditorCreatedEvent a = CommandEvent (CGridEditorCreatedEvent a)
type TGridEditorCreatedEvent a = TCommandEvent (CGridEditorCreatedEvent a)
type GridEvent a = NotifyEvent (CGridEvent a)
type TGridEvent a = TNotifyEvent (CGridEvent a)
type GridRangeSelectEvent a = NotifyEvent (CGridRangeSelectEvent a)
type TGridRangeSelectEvent a = TNotifyEvent (CGridRangeSelectEvent a)
type GridSizeEvent a = NotifyEvent (CGridSizeEvent a)
type TGridSizeEvent a = TNotifyEvent (CGridSizeEvent a)
type GridSizer a = Sizer (CGridSizer a)
type TGridSizer a = TSizer (CGridSizer a)
type GridTableBase a = WxObject (CGridTableBase a)
type TGridTableBase a = TWxObject (CGridTableBase a)
type HTTP a = Protocol (CHTTP a)
type THTTP a = TProtocol (CHTTP a)
type HashMap a = Object (CHashMap a)
type THashMap a = CHashMap a
type HelpController a = HelpControllerBase (CHelpController a)
type THelpController a = THelpControllerBase (CHelpController a)
type HelpControllerBase a = WxObject (CHelpControllerBase a)
type THelpControllerBase a = TWxObject (CHelpControllerBase a)
type HelpControllerHelpProvider a = SimpleHelpProvider (CHelpControllerHelpProvider a)
type THelpControllerHelpProvider a = TSimpleHelpProvider (CHelpControllerHelpProvider a)
type HelpEvent a = CommandEvent (CHelpEvent a)
type THelpEvent a = TCommandEvent (CHelpEvent a)
type HelpProvider a = Object (CHelpProvider a)
type THelpProvider a = CHelpProvider a
type HtmlCell a = WxObject (CHtmlCell a)
type THtmlCell a = TWxObject (CHtmlCell a)
type HtmlColourCell a = HtmlCell (CHtmlColourCell a)
type THtmlColourCell a = THtmlCell (CHtmlColourCell a)
type HtmlContainerCell a = HtmlCell (CHtmlContainerCell a)
type THtmlContainerCell a = THtmlCell (CHtmlContainerCell a)
type HtmlDCRenderer a = WxObject (CHtmlDCRenderer a)
type THtmlDCRenderer a = TWxObject (CHtmlDCRenderer a)
type HtmlEasyPrinting a = WxObject (CHtmlEasyPrinting a)
type THtmlEasyPrinting a = TWxObject (CHtmlEasyPrinting a)
type HtmlFilter a = WxObject (CHtmlFilter a)
type THtmlFilter a = TWxObject (CHtmlFilter a)
type HtmlHelpController a = HelpControllerBase (CHtmlHelpController a)
type THtmlHelpController a = THelpControllerBase (CHtmlHelpController a)
type HtmlHelpData a = WxObject (CHtmlHelpData a)
type THtmlHelpData a = TWxObject (CHtmlHelpData a)
type HtmlHelpFrame a = Frame (CHtmlHelpFrame a)
type THtmlHelpFrame a = TFrame (CHtmlHelpFrame a)
type HtmlLinkInfo a = WxObject (CHtmlLinkInfo a)
type THtmlLinkInfo a = TWxObject (CHtmlLinkInfo a)
type HtmlParser a = WxObject (CHtmlParser a)
type THtmlParser a = TWxObject (CHtmlParser a)
type HtmlPrintout a = Printout (CHtmlPrintout a)
type THtmlPrintout a = TPrintout (CHtmlPrintout a)
type HtmlTag a = WxObject (CHtmlTag a)
type THtmlTag a = TWxObject (CHtmlTag a)
type HtmlTagHandler a = WxObject (CHtmlTagHandler a)
type THtmlTagHandler a = TWxObject (CHtmlTagHandler a)
type HtmlTagsModule a = Module (CHtmlTagsModule a)
type THtmlTagsModule a = TModule (CHtmlTagsModule a)
type HtmlWidgetCell a = HtmlCell (CHtmlWidgetCell a)
type THtmlWidgetCell a = THtmlCell (CHtmlWidgetCell a)
type HtmlWinParser a = HtmlParser (CHtmlWinParser a)
type THtmlWinParser a = THtmlParser (CHtmlWinParser a)
type HtmlWinTagHandler a = HtmlTagHandler (CHtmlWinTagHandler a)
type THtmlWinTagHandler a = THtmlTagHandler (CHtmlWinTagHandler a)
type HtmlWindow a = ScrolledWindow (CHtmlWindow a)
type THtmlWindow a = TScrolledWindow (CHtmlWindow a)
type IPV4address a = SockAddress (CIPV4address a)
type TIPV4address a = TSockAddress (CIPV4address a)
type Icon a = Bitmap (CIcon a)
type TIcon a = TBitmap (CIcon a)
type IconBundle a = Object (CIconBundle a)
type TIconBundle a = CIconBundle a
type IconizeEvent a = Event (CIconizeEvent a)
type TIconizeEvent a = TEvent (CIconizeEvent a)
type IdleEvent a = Event (CIdleEvent a)
type TIdleEvent a = TEvent (CIdleEvent a)
type Image a = WxObject (CImage a)
type TImage a = TWxObject (CImage a)
type ImageHandler a = WxObject (CImageHandler a)
type TImageHandler a = TWxObject (CImageHandler a)
type ImageList a = WxObject (CImageList a)
type TImageList a = TWxObject (CImageList a)
type IndividualLayoutConstraint a = WxObject (CIndividualLayoutConstraint a)
type TIndividualLayoutConstraint a = TWxObject (CIndividualLayoutConstraint a)
type InitDialogEvent a = Event (CInitDialogEvent a)
type TInitDialogEvent a = TEvent (CInitDialogEvent a)
type InputSink a = Thread (CInputSink a)
type TInputSink a = TThread (CInputSink a)
type InputSinkEvent a = Event (CInputSinkEvent a)
type TInputSinkEvent a = TEvent (CInputSinkEvent a)
type InputStream a = StreamBase (CInputStream a)
type TInputStream a = TStreamBase (CInputStream a)
type IntProperty a = PGProperty (CIntProperty a)
type TIntProperty a = TPGProperty (CIntProperty a)
type Joystick a = WxObject (CJoystick a)
type TJoystick a = TWxObject (CJoystick a)
type JoystickEvent a = Event (CJoystickEvent a)
type TJoystickEvent a = TEvent (CJoystickEvent a)
type KeyEvent a = Event (CKeyEvent a)
type TKeyEvent a = TEvent (CKeyEvent a)
type LEDNumberCtrl a = Control (CLEDNumberCtrl a)
type TLEDNumberCtrl a = TControl (CLEDNumberCtrl a)
type LayoutAlgorithm a = WxObject (CLayoutAlgorithm a)
type TLayoutAlgorithm a = TWxObject (CLayoutAlgorithm a)
type LayoutConstraints a = WxObject (CLayoutConstraints a)
type TLayoutConstraints a = TWxObject (CLayoutConstraints a)
type List a = WxObject (CList a)
type TList a = TWxObject (CList a)
type ListBox a = Control (CListBox a)
type TListBox a = TControl (CListBox a)
type ListCtrl a = Control (CListCtrl a)
type TListCtrl a = TControl (CListCtrl a)
type ListEvent a = NotifyEvent (CListEvent a)
type TListEvent a = TNotifyEvent (CListEvent a)
type ListItem a = WxObject (CListItem a)
type TListItem a = TWxObject (CListItem a)
type Locale a = Object (CLocale a)
type TLocale a = CLocale a
type Log a = Object (CLog a)
type TLog a = CLog a
type LogChain a = Log (CLogChain a)
type TLogChain a = TLog (CLogChain a)
type LogGUI a = Log (CLogGUI a)
type TLogGUI a = TLog (CLogGUI a)
type LogNull a = Log (CLogNull a)
type TLogNull a = TLog (CLogNull a)
type LogPassThrough a = LogChain (CLogPassThrough a)
type TLogPassThrough a = TLogChain (CLogPassThrough a)
type LogStderr a = Log (CLogStderr a)
type TLogStderr a = TLog (CLogStderr a)
type LogStream a = Log (CLogStream a)
type TLogStream a = TLog (CLogStream a)
type LogTextCtrl a = Log (CLogTextCtrl a)
type TLogTextCtrl a = TLog (CLogTextCtrl a)
type LogWindow a = LogPassThrough (CLogWindow a)
type TLogWindow a = TLogPassThrough (CLogWindow a)
type LongLong a = Object (CLongLong a)
type TLongLong a = CLongLong a
type MBConv a = Object (CMBConv a)
type TMBConv a = CMBConv a
type MBConvFile a = MBConv (CMBConvFile a)
type TMBConvFile a = TMBConv (CMBConvFile a)
type MBConvUTF7 a = MBConv (CMBConvUTF7 a)
type TMBConvUTF7 a = TMBConv (CMBConvUTF7 a)
type MBConvUTF8 a = MBConv (CMBConvUTF8 a)
type TMBConvUTF8 a = TMBConv (CMBConvUTF8 a)
type MDIChildFrame a = Frame (CMDIChildFrame a)
type TMDIChildFrame a = TFrame (CMDIChildFrame a)
type MDIClientWindow a = Window (CMDIClientWindow a)
type TMDIClientWindow a = TWindow (CMDIClientWindow a)
type MDIParentFrame a = Frame (CMDIParentFrame a)
type TMDIParentFrame a = TFrame (CMDIParentFrame a)
type Mask a = WxObject (CMask a)
type TMask a = TWxObject (CMask a)
type MaximizeEvent a = Event (CMaximizeEvent a)
type TMaximizeEvent a = TEvent (CMaximizeEvent a)
type MediaCtrl a = Window (CMediaCtrl a)
type TMediaCtrl a = TWindow (CMediaCtrl a)
type MediaEvent a = NotifyEvent (CMediaEvent a)
type TMediaEvent a = TNotifyEvent (CMediaEvent a)
type MemoryBuffer a = Object (CMemoryBuffer a)
type TMemoryBuffer a = CMemoryBuffer a
type MemoryDC a = DC (CMemoryDC a)
type TMemoryDC a = TDC (CMemoryDC a)
type MemoryFSHandler a = FileSystemHandler (CMemoryFSHandler a)
type TMemoryFSHandler a = TFileSystemHandler (CMemoryFSHandler a)
type MemoryInputStream a = InputStream (CMemoryInputStream a)
type TMemoryInputStream a = TInputStream (CMemoryInputStream a)
type MemoryOutputStream a = OutputStream (CMemoryOutputStream a)
type TMemoryOutputStream a = TOutputStream (CMemoryOutputStream a)
type Menu a = EvtHandler (CMenu a)
type TMenu a = TEvtHandler (CMenu a)
type MenuBar a = EvtHandler (CMenuBar a)
type TMenuBar a = TEvtHandler (CMenuBar a)
type MenuEvent a = Event (CMenuEvent a)
type TMenuEvent a = TEvent (CMenuEvent a)
type MenuItem a = WxObject (CMenuItem a)
type TMenuItem a = TWxObject (CMenuItem a)
type MessageDialog a = Dialog (CMessageDialog a)
type TMessageDialog a = TDialog (CMessageDialog a)
type Metafile a = WxObject (CMetafile a)
type TMetafile a = TWxObject (CMetafile a)
type MetafileDC a = DC (CMetafileDC a)
type TMetafileDC a = TDC (CMetafileDC a)
type MimeTypesManager a = Object (CMimeTypesManager a)
type TMimeTypesManager a = CMimeTypesManager a
type MiniFrame a = Frame (CMiniFrame a)
type TMiniFrame a = TFrame (CMiniFrame a)
type MirrorDC a = DC (CMirrorDC a)
type TMirrorDC a = TDC (CMirrorDC a)
type Module a = WxObject (CModule a)
type TModule a = TWxObject (CModule a)
type MouseCaptureChangedEvent a = Event (CMouseCaptureChangedEvent a)
type TMouseCaptureChangedEvent a = TEvent (CMouseCaptureChangedEvent a)
type MouseEvent a = Event (CMouseEvent a)
type TMouseEvent a = TEvent (CMouseEvent a)
type MoveEvent a = Event (CMoveEvent a)
type TMoveEvent a = TEvent (CMoveEvent a)
type MultiCellCanvas a = FlexGridSizer (CMultiCellCanvas a)
type TMultiCellCanvas a = TFlexGridSizer (CMultiCellCanvas a)
type MultiCellItemHandle a = WxObject (CMultiCellItemHandle a)
type TMultiCellItemHandle a = TWxObject (CMultiCellItemHandle a)
type MultiCellSizer a = Sizer (CMultiCellSizer a)
type TMultiCellSizer a = TSizer (CMultiCellSizer a)
type Mutex a = Object (CMutex a)
type TMutex a = CMutex a
type MutexLocker a = Object (CMutexLocker a)
type TMutexLocker a = CMutexLocker a
type NavigationKeyEvent a = Event (CNavigationKeyEvent a)
type TNavigationKeyEvent a = TEvent (CNavigationKeyEvent a)
type NewBitmapButton a = Panel (CNewBitmapButton a)
type TNewBitmapButton a = TPanel (CNewBitmapButton a)
type NodeBase a = Object (CNodeBase a)
type TNodeBase a = CNodeBase a
type Notebook a = Control (CNotebook a)
type TNotebook a = TControl (CNotebook a)
type NotebookEvent a = NotifyEvent (CNotebookEvent a)
type TNotebookEvent a = TNotifyEvent (CNotebookEvent a)
type NotifyEvent a = CommandEvent (CNotifyEvent a)
type TNotifyEvent a = TCommandEvent (CNotifyEvent a)
type ObjectRefData a = Object (CObjectRefData a)
type TObjectRefData a = CObjectRefData a
type OutputStream a = StreamBase (COutputStream a)
type TOutputStream a = TStreamBase (COutputStream a)
type PGProperty a = WxObject (CPGProperty a)
type TPGProperty a = TWxObject (CPGProperty a)
type PageSetupDialog a = Dialog (CPageSetupDialog a)
type TPageSetupDialog a = TDialog (CPageSetupDialog a)
type PageSetupDialogData a = WxObject (CPageSetupDialogData a)
type TPageSetupDialogData a = TWxObject (CPageSetupDialogData a)
type PaintDC a = WindowDC (CPaintDC a)
type TPaintDC a = TWindowDC (CPaintDC a)
type PaintEvent a = Event (CPaintEvent a)
type TPaintEvent a = TEvent (CPaintEvent a)
type Palette a = GDIObject (CPalette a)
type TPalette a = TGDIObject (CPalette a)
type PaletteChangedEvent a = Event (CPaletteChangedEvent a)
type TPaletteChangedEvent a = TEvent (CPaletteChangedEvent a)
type Panel a = Window (CPanel a)
type TPanel a = TWindow (CPanel a)
type PathList a = List (CPathList a)
type TPathList a = TList (CPathList a)
type Pen a = GDIObject (CPen a)
type TPen a = TGDIObject (CPen a)
type PenList a = List (CPenList a)
type TPenList a = TList (CPenList a)
type PlotCurve a = WxObject (CPlotCurve a)
type TPlotCurve a = TWxObject (CPlotCurve a)
type PlotEvent a = NotifyEvent (CPlotEvent a)
type TPlotEvent a = TNotifyEvent (CPlotEvent a)
type PlotOnOffCurve a = WxObject (CPlotOnOffCurve a)
type TPlotOnOffCurve a = TWxObject (CPlotOnOffCurve a)
type PlotWindow a = ScrolledWindow (CPlotWindow a)
type TPlotWindow a = TScrolledWindow (CPlotWindow a)
type PopupTransientWindow a = PopupWindow (CPopupTransientWindow a)
type TPopupTransientWindow a = TPopupWindow (CPopupTransientWindow a)
type PopupWindow a = Window (CPopupWindow a)
type TPopupWindow a = TWindow (CPopupWindow a)
type PostScriptDC a = DC (CPostScriptDC a)
type TPostScriptDC a = TDC (CPostScriptDC a)
type PostScriptPrintNativeData a = WxObject (CPostScriptPrintNativeData a)
type TPostScriptPrintNativeData a = TWxObject (CPostScriptPrintNativeData a)
type PreviewCanvas a = ScrolledWindow (CPreviewCanvas a)
type TPreviewCanvas a = TScrolledWindow (CPreviewCanvas a)
type PreviewControlBar a = Panel (CPreviewControlBar a)
type TPreviewControlBar a = TPanel (CPreviewControlBar a)
type PreviewFrame a = Frame (CPreviewFrame a)
type TPreviewFrame a = TFrame (CPreviewFrame a)
type PrintData a = WxObject (CPrintData a)
type TPrintData a = TWxObject (CPrintData a)
type PrintDialog a = Dialog (CPrintDialog a)
type TPrintDialog a = TDialog (CPrintDialog a)
type PrintDialogData a = WxObject (CPrintDialogData a)
type TPrintDialogData a = TWxObject (CPrintDialogData a)
type PrintPreview a = WxObject (CPrintPreview a)
type TPrintPreview a = TWxObject (CPrintPreview a)
type Printer a = WxObject (CPrinter a)
type TPrinter a = TWxObject (CPrinter a)
type PrinterDC a = DC (CPrinterDC a)
type TPrinterDC a = TDC (CPrinterDC a)
type Printout a = WxObject (CPrintout a)
type TPrintout a = TWxObject (CPrintout a)
type PrivateDropTarget a = DropTarget (CPrivateDropTarget a)
type TPrivateDropTarget a = TDropTarget (CPrivateDropTarget a)
type Process a = EvtHandler (CProcess a)
type TProcess a = TEvtHandler (CProcess a)
type ProcessEvent a = Event (CProcessEvent a)
type TProcessEvent a = TEvent (CProcessEvent a)
type ProgressDialog a = Frame (CProgressDialog a)
type TProgressDialog a = TFrame (CProgressDialog a)
type PropertyCategory a = PGProperty (CPropertyCategory a)
type TPropertyCategory a = TPGProperty (CPropertyCategory a)
type PropertyGrid a = Control (CPropertyGrid a)
type TPropertyGrid a = TControl (CPropertyGrid a)
type PropertyGridEvent a = NotifyEvent (CPropertyGridEvent a)
type TPropertyGridEvent a = TNotifyEvent (CPropertyGridEvent a)
type Protocol a = SocketClient (CProtocol a)
type TProtocol a = TSocketClient (CProtocol a)
type Quantize a = WxObject (CQuantize a)
type TQuantize a = TWxObject (CQuantize a)
type QueryCol a = WxObject (CQueryCol a)
type TQueryCol a = TWxObject (CQueryCol a)
type QueryField a = WxObject (CQueryField a)
type TQueryField a = TWxObject (CQueryField a)
type QueryLayoutInfoEvent a = Event (CQueryLayoutInfoEvent a)
type TQueryLayoutInfoEvent a = TEvent (CQueryLayoutInfoEvent a)
type QueryNewPaletteEvent a = Event (CQueryNewPaletteEvent a)
type TQueryNewPaletteEvent a = TEvent (CQueryNewPaletteEvent a)
type RadioBox a = Control (CRadioBox a)
type TRadioBox a = TControl (CRadioBox a)
type RadioButton a = Control (CRadioButton a)
type TRadioButton a = TControl (CRadioButton a)
type RealPoint a = Object (CRealPoint a)
type TRealPoint a = CRealPoint a
type RecordSet a = WxObject (CRecordSet a)
type TRecordSet a = TWxObject (CRecordSet a)
type RegEx a = Object (CRegEx a)
type TRegEx a = CRegEx a
type Region a = GDIObject (CRegion a)
type TRegion a = TGDIObject (CRegion a)
type RegionIterator a = WxObject (CRegionIterator a)
type TRegionIterator a = TWxObject (CRegionIterator a)
type RemotelyScrolledTreeCtrl a = TreeCtrl (CRemotelyScrolledTreeCtrl a)
type TRemotelyScrolledTreeCtrl a = TTreeCtrl (CRemotelyScrolledTreeCtrl a)
type STCDoc a = Object (CSTCDoc a)
type TSTCDoc a = CSTCDoc a
type SVGFileDC a = DC (CSVGFileDC a)
type TSVGFileDC a = TDC (CSVGFileDC a)
type SashEvent a = Event (CSashEvent a)
type TSashEvent a = TEvent (CSashEvent a)
type SashLayoutWindow a = SashWindow (CSashLayoutWindow a)
type TSashLayoutWindow a = TSashWindow (CSashLayoutWindow a)
type SashWindow a = Window (CSashWindow a)
type TSashWindow a = TWindow (CSashWindow a)
type ScopedArray a = Object (CScopedArray a)
type TScopedArray a = CScopedArray a
type ScopedPtr a = Object (CScopedPtr a)
type TScopedPtr a = CScopedPtr a
type ScreenDC a = DC (CScreenDC a)
type TScreenDC a = TDC (CScreenDC a)
type ScrollBar a = Control (CScrollBar a)
type TScrollBar a = TControl (CScrollBar a)
type ScrollEvent a = Event (CScrollEvent a)
type TScrollEvent a = TEvent (CScrollEvent a)
type ScrollWinEvent a = Event (CScrollWinEvent a)
type TScrollWinEvent a = TEvent (CScrollWinEvent a)
type ScrolledWindow a = Panel (CScrolledWindow a)
type TScrolledWindow a = TPanel (CScrolledWindow a)
type Semaphore a = Object (CSemaphore a)
type TSemaphore a = CSemaphore a
type Server a = ServerBase (CServer a)
type TServer a = TServerBase (CServer a)
type ServerBase a = WxObject (CServerBase a)
type TServerBase a = TWxObject (CServerBase a)
type SetCursorEvent a = Event (CSetCursorEvent a)
type TSetCursorEvent a = TEvent (CSetCursorEvent a)
type ShowEvent a = Event (CShowEvent a)
type TShowEvent a = TEvent (CShowEvent a)
type SimpleHelpProvider a = HelpProvider (CSimpleHelpProvider a)
type TSimpleHelpProvider a = THelpProvider (CSimpleHelpProvider a)
type SingleChoiceDialog a = Dialog (CSingleChoiceDialog a)
type TSingleChoiceDialog a = TDialog (CSingleChoiceDialog a)
type SingleInstanceChecker a = Object (CSingleInstanceChecker a)
type TSingleInstanceChecker a = CSingleInstanceChecker a
type SizeEvent a = Event (CSizeEvent a)
type TSizeEvent a = TEvent (CSizeEvent a)
type Sizer a = WxObject (CSizer a)
type TSizer a = TWxObject (CSizer a)
type SizerItem a = WxObject (CSizerItem a)
type TSizerItem a = TWxObject (CSizerItem a)
type Slider a = Control (CSlider a)
type TSlider a = TControl (CSlider a)
type Slider95 a = Slider (CSlider95 a)
type TSlider95 a = TSlider (CSlider95 a)
type SliderMSW a = Slider (CSliderMSW a)
type TSliderMSW a = TSlider (CSliderMSW a)
type SockAddress a = WxObject (CSockAddress a)
type TSockAddress a = TWxObject (CSockAddress a)
type SocketBase a = WxObject (CSocketBase a)
type TSocketBase a = TWxObject (CSocketBase a)
type SocketClient a = SocketBase (CSocketClient a)
type TSocketClient a = TSocketBase (CSocketClient a)
type SocketEvent a = Event (CSocketEvent a)
type TSocketEvent a = TEvent (CSocketEvent a)
type SocketInputStream a = InputStream (CSocketInputStream a)
type TSocketInputStream a = TInputStream (CSocketInputStream a)
type SocketOutputStream a = OutputStream (CSocketOutputStream a)
type TSocketOutputStream a = TOutputStream (CSocketOutputStream a)
type SocketServer a = SocketBase (CSocketServer a)
type TSocketServer a = TSocketBase (CSocketServer a)
type Sound a = WxObject (CSound a)
type TSound a = TWxObject (CSound a)
type SpinButton a = Control (CSpinButton a)
type TSpinButton a = TControl (CSpinButton a)
type SpinCtrl a = Control (CSpinCtrl a)
type TSpinCtrl a = TControl (CSpinCtrl a)
type SpinEvent a = NotifyEvent (CSpinEvent a)
type TSpinEvent a = TNotifyEvent (CSpinEvent a)
type SplashScreen a = Frame (CSplashScreen a)
type TSplashScreen a = TFrame (CSplashScreen a)
type SplitterEvent a = NotifyEvent (CSplitterEvent a)
type TSplitterEvent a = TNotifyEvent (CSplitterEvent a)
type SplitterScrolledWindow a = ScrolledWindow (CSplitterScrolledWindow a)
type TSplitterScrolledWindow a = TScrolledWindow (CSplitterScrolledWindow a)
type SplitterWindow a = Window (CSplitterWindow a)
type TSplitterWindow a = TWindow (CSplitterWindow a)
type StaticBitmap a = Control (CStaticBitmap a)
type TStaticBitmap a = TControl (CStaticBitmap a)
type StaticBox a = Control (CStaticBox a)
type TStaticBox a = TControl (CStaticBox a)
type StaticBoxSizer a = BoxSizer (CStaticBoxSizer a)
type TStaticBoxSizer a = TBoxSizer (CStaticBoxSizer a)
type StaticLine a = Control (CStaticLine a)
type TStaticLine a = TControl (CStaticLine a)
type StaticText a = Control (CStaticText a)
type TStaticText a = TControl (CStaticText a)
type StatusBar a = Window (CStatusBar a)
type TStatusBar a = TWindow (CStatusBar a)
type StopWatch a = Object (CStopWatch a)
type TStopWatch a = CStopWatch a
type StreamBase a = Object (CStreamBase a)
type TStreamBase a = CStreamBase a
type StreamBuffer a = Object (CStreamBuffer a)
type TStreamBuffer a = CStreamBuffer a
type StreamToTextRedirector a = Object (CStreamToTextRedirector a)
type TStreamToTextRedirector a = CStreamToTextRedirector a
type StringBuffer a = Object (CStringBuffer a)
type TStringBuffer a = CStringBuffer a
type StringClientData a = ClientData (CStringClientData a)
type TStringClientData a = TClientData (CStringClientData a)
type StringList a = List (CStringList a)
type TStringList a = TList (CStringList a)
type StringProperty a = PGProperty (CStringProperty a)
type TStringProperty a = TPGProperty (CStringProperty a)
type StringTokenizer a = WxObject (CStringTokenizer a)
type TStringTokenizer a = TWxObject (CStringTokenizer a)
type StyledTextCtrl a = Control (CStyledTextCtrl a)
type TStyledTextCtrl a = TControl (CStyledTextCtrl a)
type StyledTextEvent a = CommandEvent (CStyledTextEvent a)
type TStyledTextEvent a = TCommandEvent (CStyledTextEvent a)
type SysColourChangedEvent a = Event (CSysColourChangedEvent a)
type TSysColourChangedEvent a = TEvent (CSysColourChangedEvent a)
type SystemOptions a = WxObject (CSystemOptions a)
type TSystemOptions a = TWxObject (CSystemOptions a)
type SystemSettings a = WxObject (CSystemSettings a)
type TSystemSettings a = TWxObject (CSystemSettings a)
type TabCtrl a = Control (CTabCtrl a)
type TTabCtrl a = TControl (CTabCtrl a)
type TabEvent a = CommandEvent (CTabEvent a)
type TTabEvent a = TCommandEvent (CTabEvent a)
type TablesInUse a = WxObject (CTablesInUse a)
type TTablesInUse a = TWxObject (CTablesInUse a)
type TaskBarIcon a = EvtHandler (CTaskBarIcon a)
type TTaskBarIcon a = TEvtHandler (CTaskBarIcon a)
type TempFile a = Object (CTempFile a)
type TTempFile a = CTempFile a
type TextAttr a = Object (CTextAttr a)
type TTextAttr a = CTextAttr a
type TextCtrl a = Control (CTextCtrl a)
type TTextCtrl a = TControl (CTextCtrl a)
type TextDataObject a = DataObjectSimple (CTextDataObject a)
type TTextDataObject a = TDataObjectSimple (CTextDataObject a)
type TextDropTarget a = DropTarget (CTextDropTarget a)
type TTextDropTarget a = TDropTarget (CTextDropTarget a)
type TextEntryDialog a = Dialog (CTextEntryDialog a)
type TTextEntryDialog a = TDialog (CTextEntryDialog a)
type TextFile a = Object (CTextFile a)
type TTextFile a = CTextFile a
type TextInputStream a = Object (CTextInputStream a)
type TTextInputStream a = CTextInputStream a
type TextOutputStream a = Object (CTextOutputStream a)
type TTextOutputStream a = CTextOutputStream a
type TextValidator a = Validator (CTextValidator a)
type TTextValidator a = TValidator (CTextValidator a)
type ThinSplitterWindow a = SplitterWindow (CThinSplitterWindow a)
type TThinSplitterWindow a = TSplitterWindow (CThinSplitterWindow a)
type Thread a = Object (CThread a)
type TThread a = CThread a
type Time a = WxObject (CTime a)
type TTime a = TWxObject (CTime a)
type TimeSpan a = Object (CTimeSpan a)
type TTimeSpan a = CTimeSpan a
type Timer a = WxObject (CTimer a)
type TTimer a = TWxObject (CTimer a)
type TimerBase a = WxObject (CTimerBase a)
type TTimerBase a = TWxObject (CTimerBase a)
type TimerEvent a = Event (CTimerEvent a)
type TTimerEvent a = TEvent (CTimerEvent a)
type TimerEx a = Timer (CTimerEx a)
type TTimerEx a = TTimer (CTimerEx a)
type TimerRunner a = Object (CTimerRunner a)
type TTimerRunner a = CTimerRunner a
type TipProvider a = Object (CTipProvider a)
type TTipProvider a = CTipProvider a
type TipWindow a = PopupTransientWindow (CTipWindow a)
type TTipWindow a = TPopupTransientWindow (CTipWindow a)
type ToggleButton a = Control (CToggleButton a)
type TToggleButton a = TControl (CToggleButton a)
type ToolBar a = ToolBarBase (CToolBar a)
type TToolBar a = TToolBarBase (CToolBar a)
type ToolBarBase a = Control (CToolBarBase a)
type TToolBarBase a = TControl (CToolBarBase a)
type ToolLayoutItem a = WxObject (CToolLayoutItem a)
type TToolLayoutItem a = TWxObject (CToolLayoutItem a)
type ToolTip a = WxObject (CToolTip a)
type TToolTip a = TWxObject (CToolTip a)
type ToolWindow a = Frame (CToolWindow a)
type TToolWindow a = TFrame (CToolWindow a)
type TopLevelWindow a = Window (CTopLevelWindow a)
type TTopLevelWindow a = TWindow (CTopLevelWindow a)
type TreeCompanionWindow a = Window (CTreeCompanionWindow a)
type TTreeCompanionWindow a = TWindow (CTreeCompanionWindow a)
type TreeCtrl a = Control (CTreeCtrl a)
type TTreeCtrl a = TControl (CTreeCtrl a)
type TreeEvent a = NotifyEvent (CTreeEvent a)
type TTreeEvent a = TNotifyEvent (CTreeEvent a)
type TreeItemData a = ClientData (CTreeItemData a)
type TTreeItemData a = TClientData (CTreeItemData a)
type TreeItemId a = Object (CTreeItemId a)
type TTreeItemId a = CTreeItemId a
type TreeLayout a = WxObject (CTreeLayout a)
type TTreeLayout a = TWxObject (CTreeLayout a)
type TreeLayoutStored a = TreeLayout (CTreeLayoutStored a)
type TTreeLayoutStored a = TTreeLayout (CTreeLayoutStored a)
type URL a = WxObject (CURL a)
type TURL a = TWxObject (CURL a)
type UpdateUIEvent a = Event (CUpdateUIEvent a)
type TUpdateUIEvent a = TEvent (CUpdateUIEvent a)
type Validator a = EvtHandler (CValidator a)
type TValidator a = TEvtHandler (CValidator a)
type Variant a = WxObject (CVariant a)
type TVariant a = TWxObject (CVariant a)
type VariantData a = WxObject (CVariantData a)
type TVariantData a = TWxObject (CVariantData a)
type View a = EvtHandler (CView a)
type TView a = TEvtHandler (CView a)
type WXCApp a = App (CWXCApp a)
type TWXCApp a = TApp (CWXCApp a)
type WXCArtProv a = ArtProvider (CWXCArtProv a)
type TWXCArtProv a = TArtProvider (CWXCArtProv a)
type WXCClient a = Client (CWXCClient a)
type TWXCClient a = TClient (CWXCClient a)
type WXCCommand a = Command (CWXCCommand a)
type TWXCCommand a = TCommand (CWXCCommand a)
type WXCConnection a = Connection (CWXCConnection a)
type TWXCConnection a = TConnection (CWXCConnection a)
type WXCDragDataObject a = Object (CWXCDragDataObject a)
type TWXCDragDataObject a = CWXCDragDataObject a
type WXCDropTarget a = DropTarget (CWXCDropTarget a)
type TWXCDropTarget a = TDropTarget (CWXCDropTarget a)
type WXCFileDropTarget a = FileDropTarget (CWXCFileDropTarget a)
type TWXCFileDropTarget a = TFileDropTarget (CWXCFileDropTarget a)
type WXCGridTable a = GridTableBase (CWXCGridTable a)
type TWXCGridTable a = TGridTableBase (CWXCGridTable a)
type WXCHtmlEvent a = CommandEvent (CWXCHtmlEvent a)
type TWXCHtmlEvent a = TCommandEvent (CWXCHtmlEvent a)
type WXCHtmlWindow a = HtmlWindow (CWXCHtmlWindow a)
type TWXCHtmlWindow a = THtmlWindow (CWXCHtmlWindow a)
type WXCLocale a = Locale (CWXCLocale a)
type TWXCLocale a = TLocale (CWXCLocale a)
type WXCLog a = Log (CWXCLog a)
type TWXCLog a = TLog (CWXCLog a)
type WXCMessageParameters a = Object (CWXCMessageParameters a)
type TWXCMessageParameters a = CWXCMessageParameters a
type WXCPlotCurve a = PlotCurve (CWXCPlotCurve a)
type TWXCPlotCurve a = TPlotCurve (CWXCPlotCurve a)
type WXCPreviewControlBar a = PreviewControlBar (CWXCPreviewControlBar a)
type TWXCPreviewControlBar a = TPreviewControlBar (CWXCPreviewControlBar a)
type WXCPreviewFrame a = PreviewFrame (CWXCPreviewFrame a)
type TWXCPreviewFrame a = TPreviewFrame (CWXCPreviewFrame a)
type WXCPrintEvent a = Event (CWXCPrintEvent a)
type TWXCPrintEvent a = TEvent (CWXCPrintEvent a)
type WXCPrintout a = Printout (CWXCPrintout a)
type TWXCPrintout a = TPrintout (CWXCPrintout a)
type WXCPrintoutHandler a = EvtHandler (CWXCPrintoutHandler a)
type TWXCPrintoutHandler a = TEvtHandler (CWXCPrintoutHandler a)
type WXCServer a = Server (CWXCServer a)
type TWXCServer a = TServer (CWXCServer a)
type WXCTextDropTarget a = TextDropTarget (CWXCTextDropTarget a)
type TWXCTextDropTarget a = TTextDropTarget (CWXCTextDropTarget a)
type WXCTextValidator a = TextValidator (CWXCTextValidator a)
type TWXCTextValidator a = TTextValidator (CWXCTextValidator a)
type WXCTreeItemData a = TreeItemData (CWXCTreeItemData a)
type TWXCTreeItemData a = TTreeItemData (CWXCTreeItemData a)
type Window a = EvtHandler (CWindow a)
type TWindow a = TEvtHandler (CWindow a)
type WindowCreateEvent a = CommandEvent (CWindowCreateEvent a)
type TWindowCreateEvent a = TCommandEvent (CWindowCreateEvent a)
type WindowDC a = DC (CWindowDC a)
type TWindowDC a = TDC (CWindowDC a)
type WindowDestroyEvent a = CommandEvent (CWindowDestroyEvent a)
type TWindowDestroyEvent a = TCommandEvent (CWindowDestroyEvent a)
type WindowDisabler a = Object (CWindowDisabler a)
type TWindowDisabler a = CWindowDisabler a
type Wizard a = Dialog (CWizard a)
type TWizard a = TDialog (CWizard a)
type WizardEvent a = NotifyEvent (CWizardEvent a)
type TWizardEvent a = TNotifyEvent (CWizardEvent a)
type WizardPage a = Panel (CWizardPage a)
type TWizardPage a = TPanel (CWizardPage a)
type WizardPageSimple a = WizardPage (CWizardPageSimple a)
type TWizardPageSimple a = TWizardPage (CWizardPageSimple a)
type WxArray a = Object (CWxArray a)
type TWxArray a = CWxArray a
type WxDllLoader a = Object (CWxDllLoader a)
type TWxDllLoader a = CWxDllLoader a
type WxExpr a = Object (CWxExpr a)
type TWxExpr a = CWxExpr a
type WxManagedPtr a = Object (CWxManagedPtr a)
type TWxManagedPtr a = CWxManagedPtr a
type WxObject a = Object (CWxObject a)
type TWxObject a = CWxObject a
type WxPoint a = Object (CWxPoint a)
type TWxPoint a = CWxPoint a
type WxRect a = Object (CWxRect a)
type TWxRect a = CWxRect a
type WxSize a = Object (CWxSize a)
type TWxSize a = CWxSize a
type WxString a = Object (CWxString a)
type TWxString a = CWxString a
type XmlResource a = WxObject (CXmlResource a)
type TXmlResource a = TWxObject (CXmlResource a)
type XmlResourceHandler a = WxObject (CXmlResourceHandler a)
type TXmlResourceHandler a = TWxObject (CXmlResourceHandler a)
type ZipInputStream a = InputStream (CZipInputStream a)
type TZipInputStream a = TInputStream (CZipInputStream a)
type ZlibInputStream a = FilterInputStream (CZlibInputStream a)
type TZlibInputStream a = TFilterInputStream (CZlibInputStream a)
type ZlibOutputStream a = FilterOutputStream (CZlibOutputStream a)
type TZlibOutputStream a = TFilterOutputStream (CZlibOutputStream a)
type Id = Int
type Style = Int
type EventId = Int
type Point = Point2 Int
type Size = Size2D Int
type Vector = Vector2 Int
type Rect = Rect2D Int
type CString = Ptr CChar
type CWString = Ptr CWchar
type CBool = CInt
type BitFlag = Int
type Id = Int
type Var a = TVar a
type Style = Int
type EventId = Int
type Point = Point2 Int
type Size = Size2D Int
type Vector = Vector2 Int
type Rect = Rect2D Int
type ListIndex = Int
type Row = Int
type Column = Int
type KeyCode = Int
type OnEvent = (Bool -> IO ()) -> (Event () -> IO ()) -> IO ()
type OnReceive = String -> StreamStatus -> IO ()
type OnEndProcess = Int -> IO ()
type PageFunction = PageInfo -> PrintInfo -> Size -> (Int, Int)
type PrintFunction = PageInfo -> PrintInfo -> Size -> DC () -> Int -> IO ()
type TabPage = (String, Bitmap (), Layout)
type Widget a b = SF (WXRawInput, Event WXWidgetResp, a) (Event WXWidgetReq, b)
type WXButtonConf = WXButtonState -> WXButtonState
type WXTextConf = WXTextState -> WXTextState
type WXSliderConf = WXSliderState -> WXSliderState
type WXPictureConf = WXPictureState -> WXPictureState
type WXPicture = [Prop (DC ())] -> DC () -> Rect -> IO ()
type WXPath = [Bool]
type WXGUIState = (Frame (), Int, WXContents)
type WXGUIRef = IORef WXGUIState
type WXRHandle = ReactHandle (WXRawInput, Event WXWidgetResp, ()) (Event WXWidgetReq, ())
type JoinLayout = String -> FromWxGenLayout Layout
type SizedLayout = (Int, Layout)
type CompositeInherit super = Composite (Inherit super)
type GenWidIO a = forall w. Parms w -> IO (GenWid a)
type RType = (Integer, Integer)
type RType = (Integer, Integer)
type XID = Word64
type Mask = Word64
type Atom = Word64
type VisualID = Word64
type Time = Word64
type Window = XID
type Drawable = XID
type Font = XID
type Pixmap = XID
type Cursor = XID
type Colormap = XID
type GContext = XID
type KeyCode = Word8
type SizeID = Word16
type SubpixelOrder = Word16
type Connection = Word16
type RROutput = Word64
type RRCrtc = Word64
type RRMode = Word64
type XRRModeFlags = Word64
type KeySym = XID
type EventMask = Mask
type EventType = Word32
type Modifier = CUInt
type KeyMask = Modifier
type ButtonMask = Modifier
type Button = Word32
type NotifyMode = CInt
type NotifyDetail = CInt
type Visibility = CInt
type Place = CInt
type Protocol = CInt
type PropertyNotification = CInt
type ColormapNotification = CInt
type GrabMode = CInt
type GrabStatus = CInt
type AllowEvents = CInt
type FocusMode = CInt
type ErrorCode = CInt
type Status = CInt
type WindowClass = CInt
type AttributeMask = Mask
type CloseDownMode = CInt
type QueryBestSizeClass = CInt
type GXFunction = CInt
type LineStyle = CInt
type CapStyle = CInt
type JoinStyle = CInt
type FillStyle = CInt
type FillRule = CInt
type SubWindowMode = CInt
type CoordinateMode = CInt
type PolygonShape = CInt
type ArcMode = CInt
type GCMask = CInt
type CirculationDirection = CInt
type ByteOrder = CInt
type ColormapAlloc = CInt
type MappingRequest = CInt
type ChangeSaveSetMode = CInt
type BitGravity = CInt
type WindowGravity = CInt
type BackingStore = CInt
type FontDirection = CInt
type ImageFormat = CInt
type Rotation = Word16
type Reflection = Word16
type Pixel = Word64
type Position = Int32
type Dimension = Word32
type Angle = CInt
type ScreenNumber = Word32
type Buffer = CInt
type QueuedMode = CInt
type XEventPtr = Ptr XEvent
type XKeyEvent = (Window, Window, Time, CInt, CInt, CInt, CInt, Modifier, KeyCode, Bool)
type XKeyEventPtr = Ptr XKeyEvent
type XButtonEvent = (Window, Window, Time, CInt, CInt, CInt, CInt, Modifier, Button, Bool)
type XMotionEvent = (Window, Window, Time, CInt, CInt, CInt, CInt, Modifier, NotifyMode, Bool)
type XExposeEvent = (Position, Position, Dimension, Dimension, CInt)
type XMappingEvent = (MappingRequest, KeyCode, CInt)
type XConfigureEvent = (Position, Position, Dimension, Dimension)
type Glyph = Word16
type CharStruct = (CInt, CInt, CInt, CInt, CInt)
type RectInRegionResult = CInt
type AllowExposuresMode = CInt
type PreferBlankingMode = CInt
type ScreenSaverMode = CInt
type VisualInfoMask = CLong
type Rotation = Word16
type Reflection = Word16
type SizeID = Word16
type Pixel = Word64
type Position = Int32
type Dimension = Word32
type Angle = CInt
type ScreenNumber = Word32
type Buffer = CInt
type XErrorEventPtr = Ptr ()
type CXErrorHandler = Display -> XErrorEventPtr -> IO CInt
type XErrorHandler = Display -> XErrorEventPtr -> IO ()
type XScreenSaverNotifyEvent = (Window, Window, CInt, CInt, Bool, Time)
type DamageReportLevel = CInt
type Damage = XID
type Region = XID
type WindowRegion = CInt
type Opcode = CInt
type EventMaskPtr = Ptr (EventMask)
type EventCookiePtr = Ptr (EventCookie)
type EventPtr = Ptr (Event)
type DeviceID = CInt
type DeviceInfoPtr = Ptr (DeviceInfo)
type GDeviceClassPtr = Ptr (GDeviceClass)
type Mask = [CUChar]
type ButtonStatePtr = Ptr (ButtonState)
type ModifierStatePtr = Ptr (ModifierState)
type GroupState = ModifierState
type ValuatorState = Map Int Double
type ValuatorStatePtr = Ptr (ValuatorState)
type GrabModifiersPtr = Ptr (GrabModifiers)
type SignedCertificate = SignedExact Certificate
type SignedCRL = SignedExact CRL
type ServiceID = (HostName, ByteString)
type HostName = String
type ValidationCacheQueryCallback = ServiceID -> Fingerprint -> Certificate -> IO ValidationCacheResult
type ValidationCacheAddCallback = ServiceID -> Fingerprint -> Certificate -> IO ()
type AttrName = String
type AttrValue = ByteString
type XHeader = GenXHeader Type
type XDecl = GenXDecl Type
type StructElem = GenStructElem Type
type XEnumElem = EnumElem Type
type BitCase = GenBitCase Type
type XidUnionElem = GenXidUnionElem Type
type XReply = GenXReply Type
type XExpression = Expression Type
type GenXReply typ = [GenStructElem typ]
type EnumVals typ = typ
type MaskVals typ = typ
type Name = String
type Ref = String
type MaskName = Name
type ListName = Name
type MaskPadding = Int
type Hook a b c d = XChatPlugin a -> (d -> a -> IO (Eating, a)) -> (a -> IO (b, a)) -> IO (b, XChatHook a b c)
type NBool = Bool
type AddressMap = Map String Word32
type IPAddress = String
type Point = (Double, Double)
type Rectangle = (Double, Double, Double, Double)
type XsPath = ByteString
type XsData = ByteString
type XsWatchCallback = XsPath -> IO ()
type VISUALID = Word32
type TIMESTAMP = Word32
type KEYSYM = Word32
type KEYCODE = Word8
type BUTTON = Word8
type ExtensionId = String
type RequestOpCode = Word8
type FLOAT32 = CFloat
type FLOAT64 = CDouble
type BOOL32 = Word32
type CONTEXT_TAG = Word32
type GLYPH = Word32
type FIXED = Int32
type ElementHeader = Word8
type ClientSpec = Word32
type OP = Word8
type KIND = Word8
type KeyCode = Word8
type EventClass = Word32
type STRING8 = CChar
type AtomName = String
type EwmhT = AtomCacheT
type EwmhCtx m = (Applicative m, MonadIO m, AtomCacheCtx m)
type EwmhErrorCtx m = (MonadError SomeError m, EwmhCtx m)
type URL = String
type URL = String
type URL = String
type XHtmlT t x = XHtmlMT x t ()
type XHtml x = XHtmlT Identity x
type Attrs = [Attr]
type DrivenPorts = [(String, String)]
type Out a = State Netlist a
type Bit = Int
type BitVec = (Int, Dir, Int)
type Out a = State Netlist a
type Bit = Int
type MRL = String
type MRL = String
type StreamId = Int
type RequestToken = Credential
type Verifier = ByteString
type AccessToken = Credential
type URL = ByteString
type UserId = Text
type PhotoUrls = Map Text Text
type Language = Text
type Skill = Text
type Cell = (CellValue, Maybe Text)
type Row = Int -> Markup
type CellMap = Map (Int, Int) Cell
type TemplateDataRow = Map Text TemplateValue
type Line = Integer
type LChar = (Line, Char)
type LString = [LChar]
type Path = [([Content], Tag, [Content])]
type FileName = String
type Row = Int
type Column = Int
type Name = String
type Name = String
type Encoded = String
type Encoded = String
type Catalog = Map PubSys URI
type Axis node = Cursor node -> [Cursor node]
type DecodeEntities = Text -> Content
type EventPos = (Maybe PositionRange, Event)
type Cursor = Cursor Node
type Axis = Cursor -> [Cursor]
type XML = Writer (DList Node) ()
type Axis node = Cursor node -> [Cursor node]
type DecodeEntities = Text -> Content
type Cursor = Cursor Node
type Axis = Cursor -> [Cursor]
type Path = [String]
type ElementExtractor a = ReaderT (Path, Element) (ResultT ExtractionErr Identity) a
type ContentsExtractor a = StateT Ctx (ResultT ExtractionErr Identity) a
type Path = [String]
type Xml e s a = XmlT e s Identity a
type XMLParser a = GenParser (Content Posn) () a
type Attribute = (Name, [Content])
type XEQName = (ByteString, ByteString)
type Xmlns = (ByteString, ByteString)
type QName = ((ByteString, Maybe ByteString), ByteString)
type TlsArgsCl = TlsArgs
type TlsArgsSv = TlsArgs
type TlsArgsCl = TlsArgs
type TlsArgsSv = TlsArgs
type Stack = [(Text, Element)]
type Builder = State Stack ()
type Prefix = Text
type Uri = Text
type Name = Text
type TextContent = Text
type Connection = ForeignPtr C_xmmsc_connection
type Result = ForeignPtr C_xmmsc_result
type WindowSet = StackSet WorkspaceId (Layout Window) Window ScreenId ScreenDetail
type WindowSpace = Workspace WorkspaceId (Layout Window) Window
type WorkspaceId = String
type ManageHook = Query (Endo WindowSet)
type D = (Dimension, Dimension)
type WindowSet = StackSet WorkspaceId (Layout Window) Window ScreenId ScreenDetail
type WindowSpace = Workspace WorkspaceId (Layout Window) Window
type WorkspaceId = String
type ManageHook = Query (Endo WindowSet)
type D = (Dimension, Dimension)
type StringProp = String
type Params = Map Window Param
type Zipper a = Maybe (Stack a)
type ModifySpec = forall l. WithID l Window -> Zipper (Group l Window) -> Zipper (Group l Window)
type XPropMatch = ([(Atom, [String] -> Bool)], Window -> X (WindowSet -> WindowSet))
type FadeHook = Query Opacity
type SmartBorder = ConfigurableBorder Ambiguity
type MaybeManageHook = Query (Maybe (Endo WindowSet))
type TimerId = Int
type DzenConfig = (Int, [String]) -> X (Int, [String])
type P = (Position, Position)
type G = (Rational, Rational)
type Reflected l = ModifiedLayout Reflect l
type Interval = Rational
type OrigWin = (Window, Rectangle)
type RectWithBorders = (Rectangle, [BorderInfo])
type WorkspaceCompare = WorkspaceId -> WorkspaceId -> Ordering
type WorkspaceSort = [WindowSpace] -> [WindowSpace]
type XPMode = XPType
type XP = StateT XPState IO
type ComplFunction = String -> IO [String]
type WSGroupId = String
type ExtensionActions = Map String (String -> X ())
type Browser = FilePath
type Site = String -> String
type Query = String
type Name = String
type Application = String
type Topic = WorkspaceId
type Dir = FilePath
type DynamicStatusBar = ScreenId -> IO Handle
type DynamicStatusBarCleanup = IO ()
type VirtualWorkspace = WorkspaceId
type PhysicalWorkspace = WorkspaceId
type Logger = X (Maybe String)
type NamedScratchpads = [NamedScratchpad]
type WNState = Map WorkspaceId Point
type GapSpec = [(Direction2D, Int)]
type TwoDPosition = (Integer, Integer)
type StringProp = String
type XPropMatch = ([(Atom, [String] -> Bool)], Window -> X (WindowSet -> WindowSet))
type TimerId = Int
type MaybeManageHook = Query (Maybe (Endo WindowSet))
type WorkspaceCompare = WorkspaceId -> WorkspaceId -> Ordering
type WorkspaceSort = [WindowSpace] -> [WindowSpace]
type XP = StateT XPState IO
type ComplFunction = String -> IO [String]
type NamedScratchpads = [NamedScratchpad]
type WSGroupId = String
type Topic = WorkspaceId
type Dir = FilePath
type VirtualWorkspace = WorkspaceId
type PhysicalWorkspace = WorkspaceId
type Logger = X (Maybe String)
type GapSpec = [(Direction2D, Int)]
type NavigateMap = Map (KeyMask, KeySym) (TwoDPosition -> TwoDPosition)
type TwoDPosition = (Integer, Integer)
type RunMPD = forall a. MPD a -> IO (Response a)
type Feature = XmlNode
type Feature = XmlNode
type StanzaPredicate = XMLElem -> Bool
type StanzaHandler = XMLElem -> XMPP ()
type Nick = String
type JID = String
type Xorshift = Xorshift32
type XOSD = Ptr XOSD_
type XOSD = Ptr XOSD_
type StrokeHitted = AlterList (NotHitted StrokeBBox) (Hitted StrokeBBox)
type TAlterHitted a = AlterList [a] (Hitted a)
type TLayerSelect a = GLayer TEitherAlterHitted (StrokeTypeFromLayer a)
type TLayerSelectBuf a = GLayerBuf (BufTypeFromLayer a) TEitherAlterHitted (StrokeTypeFromLayer a)
type TTempPageSelect = GPage Background (TLayerSelectInPage []) TLayerBBox
type TTempXournalSelect = GSelect (IntMap TPageBBoxMap) (Maybe (Int, TTempPageSelect))
type TPageBBoxMapPDF = TPageBBoxMapBkg BackgroundPDFDrawable
type TXournalBBoxMapPDF = TXournalBBoxMapBkg BackgroundPDFDrawable
type TTempPageSelectPDF = GPage BackgroundPDFDrawable (TLayerSelectInPage []) TLayerBBox
type TTempXournalSelectPDF = GSelect (IntMap TPageBBoxMapPDF) (Maybe (Int, TTempPageSelectPDF))
type TPageBBoxMapPDFBuf = TPageBBoxMapBkgBuf BackgroundPDFDrawable LyBuf
type TXournalBBoxMapPDFBuf = TXournalBBoxMapBkgBuf BackgroundPDFDrawable LyBuf
type TTempPageSelectPDFBuf = GPage BackgroundPDFDrawable (TLayerSelectInPageBuf ZipperSelect) (TLayerBBoxBuf LyBuf)
type TTempXournalSelectPDFBuf = GSelect (IntMap TPageBBoxMapPDFBuf) (Maybe (Int, TTempPageSelectPDFBuf))
type Title = ByteString
type TLayerSimple = GLayer [] Stroke
type TPageSimple = GPage Background [] TLayerSimple
type TXournalSimple = GXournal [] TPageSimple
type TLayerBBox = GLayer [] StrokeBBox
type TPageBBox = GPage Background [] TLayerBBox
type TXournalBBox = GXournal [] TPageBBox
type TPageMap = GPage Background IntMap TLayerSimple
type TXournalMap = GXournal [] TPageMap
type TPageBBoxMap = GPage Background IntMap TLayerBBox
type TXournalBBoxMap = GXournal IntMap TPageBBoxMap
type TPageBBoxMapBkg b = GPage b IntMap TLayerBBox
type TXournalBBoxMapBkg b = GXournal IntMap (TPageBBoxMapBkg b)
type TLayerBBoxBuf buf = GLayerBuf buf [] StrokeBBox
type TPageBBoxMapBkgBuf bkg buf = GPage bkg ZipperSelect (TLayerBBoxBuf buf)
type TXournalBBoxMapBkgBuf bkg buf = GXournal IntMap (TPageBBoxMapBkgBuf bkg buf)
Binary file ./hoogle-data/xsact/1.6/doc/html/xsact.txt matches
type Atto = Fixed E18
type Regs = (N, N, N, N, N)
type RadioView x b = RadioBox (CRadioView x b)
type ListView a b = SingleListBox (CListView a b)
type MultiListView a b = MultiListBox (CMultiListView a b)
type ChoiceView a b = Choice (CChoiceView a b)
type ValueEntry x b = TextCtrl (CValueEntry x b)
type :<-> a b = Iso Identity Identity a b
type :<~> a b = Iso Maybe Maybe a b
type :-> = LensM Identity
type :~> = LensM Maybe
type LensM = Lens Identity
type :-> = LensM Identity
type :~> = LensM Maybe
type Memo t a b = a -> State (t a b) b
type AnchorName = String
type Anchor = Maybe AnchorName
type Object = HashMap Text Value
type Array = Vector Value
type AnchorMap = Map AnchorName YamlValue
type Key = Text
type Key = Text
type ValueFn m = Value -> m Value
type Dispatcher m = Text -> Maybe (ValueFn m)
type Tokenizer = String -> ByteString -> Bool -> [Token]
type ReactHandle a b = IORef (ReactState a b)
type Time = Double
type DTime = Double
type ReactHandle a b = IORef (ReactState a b)
type Time = Double
type ReactHandle a b = IORef (ReactState a b)
type Time = Double
type DTime = Double
type ReactHandle a b = IORef (ReactState a b)
type Time = Double
type Reaction = SF (Event UI) (Event Action)
type Rational = Ratio Integer
type N7 = S N6
type N8 = S N7
type Work sh a = sh -> sh -> IO a
type Walk sh a = sh -> sh -> IO a
type Fill sh a = (sh -> IO a) -> (sh -> a -> IO ()) -> Work sh ()
type StatefulWalk sh a s = IO s -> (sh -> IO a) -> Walk sh s
type Foldl sh a b = (b -> sh -> a -> IO b) -> StatefulWalk sh a b
type Foldr sh a b = (sh -> a -> b -> IO b) -> StatefulWalk sh a b
type Block sh = (sh, sh)
type Dim1 = Int
type Dim2 = (Int, Int)
type Dim3 = (Int, Int, Int)
type Threads = IO Int
type Fill sh a = (sh -> IO a) -> (sh -> a -> IO ()) -> Work sh ()
type StatefulWalk sh a s = IO s -> (sh -> IO a) -> Walk sh s
type Foldl sh a b = (b -> sh -> a -> IO b) -> StatefulWalk sh a b
type Foldr sh a b = (sh -> a -> b -> IO b) -> StatefulWalk sh a b
type Dim1 = Int
type Dim2 = (Int, Int)
type Dim3 = (Int, Int, Int)
type N1 = S Z
type N2 = S N1
type N3 = S N2
type N4 = S N3
type Editor c = EditorC (Container c)
type Pos = (Int, Int)
type Keybind c = Event -> EventMonad Event (Editor c) ()
type Cmdbind c = String -> EventMonad Event (Editor c) ()
type CoreAnnotations = Map String (Map String String)
type LogFunc = Loc -> LogSource -> LogLevel -> LogStr -> IO ()
type AngularT site = WriterT (AngularWriter site) (HandlerT site IO)
type AuthRoute = Route Auth
type AuthHandler master a = YesodAuth master => HandlerT Auth (HandlerT master IO) a
type Email = Text
type VerKey = Text
type VerUrl = Text
type SaltedPass = Text
type VerStatus = Bool
type Identifier = Text
type Username = Text
type Username = Text
type SiteuserId = Key Siteuser
type DeskComCustomField = (Text, Text)
type JavaScriptCall = Text
type User = UserGeneric SqlBackend
type UserId = Key User
type CommentId = Int
type ThreadId = Text
type CheckOverlap = Bool
type SessionMap = Map Text ByteString
type SaveSession = SessionMap -> IO [Header]
type RequestBodyContents = ([(Text, Text)], [(Text, FileInfo)])
type ResolvedApproot = Text
type BottomOfHeadAsync master = [Text] -> Maybe (HtmlUrl (Route master)) -> (HtmlUrl (Route master))
type Texts = [Text]
type ParentRunner parent m = m TypedContent -> YesodRunnerEnv parent -> Maybe (Route parent) -> Application
type YesodApp = YesodRequest -> ResourceT IO YesodResponse
type RY master = Route master -> [(Text, Text)] -> Text
type RepHtml = Html
type ContentType = ByteString
type CssBuilderUrl a = (a -> [(Text, Text)] -> Text) -> Builder
type ContentType = ByteString
type RepHtml = Html
type RequestBodyContents = ([(Text, Text)], [(Text, FileInfo)])
type SessionMap = Map Text ByteString
type Texts = [Text]
type BottomOfHeadAsync master = [Text] -> Maybe (HtmlUrl (Route master)) -> (HtmlUrl (Route master))
type LiteHandler = HandlerT LiteApp IO
type LiteWidget = WidgetT LiteApp IO
type Application = Request -> (Response -> IO ResponseReceived) -> IO ResponseReceived
type HtmlUrl url = Render url -> Html
type JavascriptUrl url = (url -> [(Text, Text)] -> Text) -> Javascript
type CssUrl url = (url -> [(Text, Text)] -> Text) -> Css
type CrudHandler sub = HandlerT (CrudSubsite sub) (SiteHandler sub)
type SiteHandler sub = HandlerT (Site sub) IO
type CrudWidget sub = WidgetT (Site sub) IO ()
type CrudForm sub = Html -> MForm (SiteHandler sub) (FormResult (Obj sub), CrudWidget sub)
type Ent sub = (ObjId sub, Obj sub)
type SortC k = (Eq k, Enum k, Bounded k)
type ToEntityField k f = forall a. k -> (forall t. EntityField f t -> a) -> a
type CrudTVarMap sub = Map CrudTVarKey (Obj sub)
type ColumnName = Text
type RegexFlag = Bool
type ColumnName = Text
type ClassName = String
type ParamName = String
type EntityName = String
type EnumName = String
type EnumValue = String
type FunctionName = String
type FieldName = String
type RowNum = Int
type ColNum = Int
type VariableName = String
type MaybeLevel = Int
type EntityRef = Either EntityName Entity
type UseParamFlag = Bool
type IfFilterParams = (ParamName, [Join], BoolExpr, UseParamFlag)
type MaybeFlag = Bool
type FieldRefMapping = (ParamName, FieldRef, Maybe FunctionName)
type DefaultValue = String
type IsListFlag = Bool
type TypeName = String
type ParserMonad = StateT ParserState IO
type FayFile = String -> Q Exp
type CommandHandler master = forall s. (forall a. Data a => Returns a -> a -> HandlerT master IO s) -> Value -> HandlerT master IO s
type Env = Map Text [Text]
type FileEnv = Map Text [FileInfo]
type MForm m a = RWST (Maybe (Env, FileEnv), HandlerSite m, [Lang]) Enctype Ints m a
type FieldViewFunc m a = Text -> Text -> [(Text, Text)] -> Either Text a -> Bool -> WidgetT (HandlerSite m) IO ()
type FormRender m a = AForm m a -> Markup -> MForm m (FormResult a, WidgetT (HandlerSite m) IO ())
type AutoFocus = Bool
type Email = Text
type PageWidget m = Int -> Int -> Int -> WidgetT m IO ()
type YesodDB site = ReaderT (YesodPersistBackend site) (HandlerT site IO)
type RouteParse master = [Text] -> Maybe (Route master)
type RouteDispatch master = Text -> Route master -> Maybe (GHandler master master ChooseRep)
type HandlerHint = Text
type Handler = Text
type Path = Text
type Method = Text
type ResponseCode = Text
type ContentType = Text
type Dispatch res = [Text] -> Maybe res
type CheckOverlap = Bool
type Location = String
type Generator = Q [Entry]
type Location = String
type StaticRoute = Route Static
type GTableHandler val = GGHandler (TableSubsite val) (TableSite val)
type GTableWidget val = GGWidget (TableSubsite val) (TableSite val)
type TableHandler val = GHandler (TableSubsite val) (TableSite val)
type TableWidget val = GWidget (TableSubsite val) (TableSite val)
type HtmlLBS = ByteString
type Query = Text
type YesodSpec site = Writer [YesodSpecTree site] ()
type YesodExample site = StateT (YesodExampleData site) IO
type RequestBuilder site = StateT (RequestBuilderData site) IO
type APIFunction = ByteString -> [Text] -> Maybe Value -> Session SResponse
type Session = ReaderT Application (StateT ClientState IO)
type Assertion = IO ()
type LogFunc = Loc -> LogSource -> LogLevel -> LogStr -> IO ()
type ParamsResult = Either ParamsError TransloaditParams
type Signature = Text
type WebSocketsT = ReaderT Connection
type JobQueue a = TVar (Seq a)
type LogLabel = (Text, Text)
type LogScope = [LogLabel]
type LoggerBackend a = Either (LogMessage Text) (LogMessage a) -> IO ()
type LogFunction a m = LogLevel -> a -> m ()
type LogFunctionIO a = LogLevel -> a -> IO ()
type LoggerT a = LoggerCtxT (Logger a)
type LoggerT a = LoggerCtxT (Logger a)
type CoreVarName = String
type CoreFuncName = String
type CoreDataName = String
type CoreCtorName = String
type CoreFieldName = String
type CoreFuncMap = Map CoreFuncName CoreFunc
type State t lexState = (IState t, AlexState lexState)
type State st token result = (st, Process token result)
type P s a = Parser s a
type JumpList = Maybe (PointedList Jump)
type DividerPosition = Double
type DividerRef = Int
type RelativeSize = Double
type SubprocessId = Integer
type TabRef = Int
type Path = [Int]
type PModule = Exp
type PModuleDecl = Exp
type PImport = Exp
type Tree = PModule
type Expr t = [Tree t]
type TT = Tok Token
type Expr t = [Tree t]
type BList a = [a]
type Tree t = BList (Statement t)
type Semicolon t = Maybe t
type Interact ev a = I ev Action a
type KeymapM a = Interact Event a
type Keymap = KeymapM ()
type KeymapEndo = Keymap -> Keymap
type KeymapProcess = P Event Action
type WinMarks = MarkSet Mark
type Status = ([Text], StyleName)
type Statuses = DelayList Status
type UIBoot = Config -> ([Event] -> IO ()) -> ([Action] -> IO ()) -> Editor -> IO (UI Editor)
type WinMarks = MarkSet Mark
type UIBoot = Config -> ([Event] -> IO ()) -> ([Action] -> IO ()) -> Editor -> IO (UI Editor)
type Field a = Lens' Config a
type Interact ev a = I ev Action a
type KeymapM a = Interact Event a
type Keymap = KeymapM ()
type KeymapEndo = Keymap -> Keymap
type KeymapProcess = P Event Action
type Article = ByteString
type Field a = Lens' Config a
type SearchMatch = Region
type RegisterName = Char
type TokenBasedMode tok = Mode (Tree (Tok tok))
type UnivArgument = Maybe Int
type SnippetCmd = RWST (Int, Int) [MarkInfo] () BufferM
type TabBarDescr = PointedList TabDescr
type Field a = Lens' Config a
type Style = Endo Attributes
type StyleName = UIStyle -> Style
type Theme = Proto UIStyle
type Length = Int
type Stroke = Span StyleName
type Byte = Word8
type IndexedStr = [(Point, Char)]
type AlexInput = (Char, [Byte], IndexedStr)
type Action hlState token = IndexedStr -> hlState -> (hlState, token)
type ASI s = (AlexState s, AlexInput)
type TokenLexer l s t i = (l s, i) -> Maybe (t, (l s, i))
type CharScanner = Scanner Point Char
type StyleLexerASI s t = StyleLexer AlexState s t AlexInput
type Stroke = Span StyleName
type TT = Tok Token
type HlState = Int
type Token = StyleName
type TT = Tok Token
type HlState = Int
type Token = StyleName
type TT = Tok Token
type HlState = Int
type HlState = Int
type YicesIPC = (Maybe Handle, Maybe Handle, Maybe Handle, ProcessHandle)
type CommandList = [(String, Command)]
type Mud = StateT MudState IO
type RunMud = forall a. Mud a -> IO a
type Output = Destination -> String -> IO ()
type Pattern = String
type Reload = Mud ()
type Interval = Int
type Logger = (Hook, Hook)
type Equal a b = IsEQ (SpineCompare a b)
type Each = Each_
type Equal a b = IsEQ (SpineCompare a b)
type N0 = Z
type N1 = S N0
type N2 = S N1
type N3 = S N2
type N4 = S N3
type N5 = S N4
type N6 = S N5
type N7 = S N6
type N8 = S N7
type N9 = S N8
type N10 = S N9
type N11 = S N10
type N12 = S N11
type N13 = S N12
type N14 = S N13
type N15 = S N14
type N16 = S N15
type N17 = S N16
type N18 = S N17
type N19 = S N18
type N20 = S N19
type N21 = S N20
type N22 = S N21
type N23 = S N22
type N24 = S N23
type N25 = S N24
type N26 = S N25
type N27 = S N26
type N28 = S N27
type N29 = S N28
type N30 = S N29
type N31 = S N30
type N32 = S N31
type N33 = S N32
type N34 = S N33
type N35 = S N34
type N36 = S N35
type N37 = S N36
type N38 = S N37
type N39 = S N38
type N40 = S N39
type N41 = S N40
type N42 = S N41
type N43 = S N42
type N44 = S N43
type N45 = S N44
type N46 = S N45
type N47 = S N46
type N48 = S N47
type N49 = S N48
type N50 = S N49
type N51 = S N50
type N52 = S N51
type N53 = S N52
type N54 = S N53
type N55 = S N54
type N56 = S N55
type N57 = S N56
type N58 = S N57
type N59 = S N58
type N60 = S N59
type N61 = S N60
type N62 = S N61
type N63 = S N62
type N64 = S N63
type N65 = S N64
type N66 = S N65
type N67 = S N66
type N68 = S N67
type N69 = S N68
type N70 = S N69
type N71 = S N70
type N72 = S N71
type N73 = S N72
type N74 = S N73
type N75 = S N74
type N76 = S N75
type N77 = S N76
type N78 = S N77
type N79 = S N78
type N80 = S N79
type N81 = S N80
type N82 = S N81
type N83 = S N82
type N84 = S N83
type N85 = S N84
type N86 = S N85
type N87 = S N86
type N88 = S N87
type N89 = S N88
type N90 = S N89
type N91 = S N90
type N92 = S N91
type N93 = S N92
type N94 = S N93
type N95 = S N94
type N96 = S N95
type N97 = S N96
type N98 = S N97
type N99 = S N98
type N100 = S N99
type N101 = S N100
type N102 = S N101
type N103 = S N102
type N104 = S N103
type N105 = S N104
type N106 = S N105
type N107 = S N106
type N108 = S N107
type N109 = S N108
type N110 = S N109
type N111 = S N110
type N112 = S N111
type N113 = S N112
type N114 = S N113
type N115 = S N114
type N116 = S N115
type N117 = S N116
type N118 = S N117
type N119 = S N118
type N120 = S N119
type N121 = S N120
type N122 = S N121
type N123 = S N122
type N124 = S N123
type N125 = S N124
type N126 = S N125
type N127 = S N126
type N128 = S N127
type N129 = S N128
type N130 = S N129
type N131 = S N130
type N132 = S N131
type N133 = S N132
type N134 = S N133
type N135 = S N134
type N136 = S N135
type N137 = S N136
type N138 = S N137
type N139 = S N138
type N140 = S N139
type N141 = S N140
type N142 = S N141
type N143 = S N142
type N144 = S N143
type N145 = S N144
type N146 = S N145
type N147 = S N146
type N148 = S N147
type N149 = S N148
type N150 = S N149
type N151 = S N150
type N152 = S N151
type N153 = S N152
type N154 = S N153
type N155 = S N154
type N156 = S N155
type N157 = S N156
type N158 = S N157
type N159 = S N158
type N160 = S N159
type N161 = S N160
type N162 = S N161
type N163 = S N162
type N164 = S N163
type N165 = S N164
type N166 = S N165
type N167 = S N166
type N168 = S N167
type N169 = S N168
type N170 = S N169
type N171 = S N170
type N172 = S N171
type N173 = S N172
type N174 = S N173
type N175 = S N174
type N176 = S N175
type N177 = S N176
type N178 = S N177
type N179 = S N178
type N180 = S N179
type N181 = S N180
type N182 = S N181
type N183 = S N182
type N184 = S N183
type N185 = S N184
type N186 = S N185
type N187 = S N186
type N188 = S N187
type N189 = S N188
type N190 = S N189
type N191 = S N190
type N192 = S N191
type N193 = S N192
type N194 = S N193
type N195 = S N194
type N196 = S N195
type N197 = S N196
type N198 = S N197
type N199 = S N198
type N200 = S N199
type N201 = S N200
type N202 = S N201
type N203 = S N202
type N204 = S N203
type N205 = S N204
type N206 = S N205
type N207 = S N206
type N208 = S N207
type N209 = S N208
type N210 = S N209
type N211 = S N210
type N212 = S N211
type N213 = S N212
type N214 = S N213
type N215 = S N214
type N216 = S N215
type N217 = S N216
type N218 = S N217
type N219 = S N218
type N220 = S N219
type N221 = S N220
type N222 = S N221
type N223 = S N222
type N224 = S N223
type N225 = S N224
type N226 = S N225
type N227 = S N226
type N228 = S N227
type N229 = S N228
type N230 = S N229
type N231 = S N230
type N232 = S N231
type N233 = S N232
type N234 = S N233
type N235 = S N234
type N236 = S N235
type N237 = S N236
type N238 = S N237
type N239 = S N238
type N240 = S N239
type N241 = S N240
type N242 = S N241
type N243 = S N242
type N244 = S N243
type N245 = S N244
type N246 = S N245
type N247 = S N246
type N248 = S N247
type N249 = S N248
type N250 = S N249
type N251 = S N250
type N252 = S N251
type N253 = S N252
type N254 = S N253
type N255 = S N254
type BitContainer a = (JList Bit, JList Bit -> a)
type Signal = [Bool]
type InstanceId = Int
type OutputNumber = Int
type Wire = (InstanceId, OutputNumber)
type Word n = Vec n Bit
type Unsigned n = Word n
type New a = RWS Schedule (Bit, Recipe) VarId a
type YQLM = StateT YQL IO
type CssInlineDecl = (String, [(String, String)])
type NonCxML = CxML ()
type GridElement a = GridNode (CxML a)
type Z3_error_handler = Ptr Z3_context -> Z3_error_code -> IO ()
type Z3_string = CString
type Z3_ast_print_mode = CInt
type Z3_error_code = CInt
type Z3_ast_kind = CInt
type EvalAst a = Model -> AST -> IO (Maybe a)
type EvalAst m a = Model -> AST -> m (Maybe a)
type UserString = String
type EncodedString = String
type Size = Word
type Timeout = Int64
type FileName = String
type FileCont = String
type FSZipper r m = DZipper r m Term Path
type UnitK r m = CCT r m () -> CCT r m (OSReq r m)
type ReadK r m = CCT r m String -> CCT r m (OSReq r m)
type FDSET = CUInt
type TIMEVAL = CLong
type AnalogChannelMask = Word8
type BroadcastRadius = Word8
type ClusterId = Word8
type CommandOptions = Word8
type CommandStatus = Word8
type DeviceType = Word8
type DeliveryStatus = Word8
type DestinationEndpoint = Word8
type DigitalChannelMask = Word16
type DiscoveryStatus = Word8
type FrameId = Word8
type ManufacturerId = Word8
type ModemStatusByte = Word8
type ParentNetworkAddress = NetworkAddress
type ProfileId = Word8
type ReceiveOptions = Word8
type RemoteAddress = Address
type RemoteNetworkAddress = NetworkAddress
type SampleCount = Word8
type SourceAction = Word8
type SourceEndpoint = Word8
type TransmitOptions = Word8
type TransmitRetryCount = Word8
type XBeeSensorMask = Word8
type Archive = StateT Zip IO
type FoldLC b = WithCont (FoldL b)
type FoldLC' b = WithCont' (FoldL b)
type FoldRC b = WithCont (FoldR b)
type SymbolTable = [(String, Zipper Root)]
type SymbolTable = [(String, String)]
type ZStream' = Ptr ZStreamStruct
type Popper = IO (Maybe ByteString)
type TagByte = Word8
type MidiMessage = (DeltaTime, MidiEvent)
type Pos = Int
type ErrMsg = String
type Voice = [Timed ScoreEvent]
type TickMap = IntMap Time
type Context = ForeignPtr CContext
type TrackNo = Int
type TrackMap = IntMap TrackSpec
type IdentifyCodec = ByteString -> Maybe Codec
type ZoomW = StateT ZoomWHandle IO
type IdentifyCodec = ByteString -> Maybe Codec
type ZoomW = StateT ZoomWHandle IO
type TrackNo = Int
type TrackNo = Int
type IdentifyCodec = ByteString -> Maybe Codec
type TrackMap = IntMap TrackSpec
type ZoomW = StateT ZoomWHandle IO
