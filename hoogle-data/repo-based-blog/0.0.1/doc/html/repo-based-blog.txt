-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Blogging module using blaze html for markup
--   
--   This package contains a module that can be used in web applications.
--   It's use cases are only limited by the use of blaze for the markup of
--   pages. If anynoe cares to abstract that away, I would not stand in the
--   way.
--   
--   This package also contains an executable that uses the dyre library to
--   allow a configuration of a web application in the way xmonad or yi
--   does. An examle can be fount in the <a>RBB</a> module.
--   
--   The blog contents are managed via a version control system. The
--   filestore library has been used as a backend for this and hence the
--   supported repository types mainly depend on the filestore version
--   used. Thes currently suppored repository types are git, mercurial and
--   darcs. The entries are rendered using the pandoc library.
--   
--   For more information see the haddock documentation of the exported
--   modules or the README.md included in this package.
@package repo-based-blog
@version 0.0.1


-- | This module provides some functions and data types that can be used to
--   manage search and query data for a list of <a>Entry</a> values.
module Web.RBB.Blog.Query

-- | The request data provided inside a URL.
--   
--   Example: <tt>?id=42&amp;sortBy=Identifier</tt>
--   
--   Example backend implementation using the Happstack package:
--   
--   <pre>
--   import Happstack.Server (look, HasRqData, ServerPartT)
--   
--   maybeLookAndRead :: (Monad m, Read a, Alternative m, HasRqData m)
--                    =&gt; a -&gt; String -&gt; m a
--   maybeLookAndRead a qry = do
--       l &lt;- optional $ look qry
--       return $ fromMaybe a (maybe (Just a) readMaybe l)
--   
--   -- | Parse the supported request data and present it in a data type.
--   parseQueryRqData :: ServerPartT IO EntryQuery
--   parseQueryRqData = EntryQuery
--       &lt;$&gt; (sortMethodToComparator
--           &lt;$&gt; maybeLookAndRead Update "sortBy"
--           &lt;*&gt; maybeLookAndRead Descending "sortOrder")
--   </pre>
data EntryQuery
EntryQuery :: (Entry -> Entry -> Ordering) -> EntryQuery

-- | The method entries are sorted by.
eqSortBy :: EntryQuery -> Entry -> Entry -> Ordering

-- | Simple enum that provides Show and read instances so that a parser can
--   convert the sting directly to a value of this type.
data SortMethod
Update :: SortMethod
Identifier :: SortMethod
Author :: SortMethod
data SortOrder
Ascending :: SortOrder
Descending :: SortOrder

-- | Convert a <a>SortMethod</a> value to a sorting function that can be
--   used in confunction with functions <tt>sortBy</tt> from
--   <a>Data.List</a>.
sortMethodToComparator :: SortMethod -> SortOrder -> (Entry -> Entry -> Ordering)
instance Show SortMethod
instance Read SortMethod
instance Eq SortMethod
instance Ord SortMethod
instance Enum SortMethod
instance Show SortOrder
instance Read SortOrder
instance Eq SortOrder
instance Ord SortOrder
instance Enum SortOrder
instance Default EntryQuery


module Web.RBB

-- | Basic configuration of the blog. The <tt>m</tt> type variable is just
--   a context in which the functions can operate on. It can be as simple
--   as the <tt>Identity</tt> functor but also more complex to play nice
--   with libraries such as boomerang (which provides type-safe URLs).
--   These functions are usually called in an <a>IO</a> context and hence
--   the context can be some <a>IO</a> type as well.
data BlogConfig m
BlogConfig :: m Text -> (BlogConfig m -> [(Entry, Html)] -> m Html) -> (UTCTime -> Text) -> FilePath -> Integer -> BlogConfig m

-- | The base URL of the website such as
--   <a>https://github.com/saep/repo-based-blog</a>.
baseURL :: BlogConfig m -> m Text

-- | This field describes how the content of a blog entry is being
--   rendered. The <a>Html</a> content is the blog content rendered with
--   the pandoc library. You can take a look at the implementation of the
--   the module <a>RBB.Templates.Default</a> on how to define this
--   function.
entryRenderer :: BlogConfig m -> BlogConfig m -> [(Entry, Html)] -> m Html

-- | Function that converts time entries to printable <a>Text</a>.
timeFormatter :: BlogConfig m -> UTCTime -> Text

-- | Path to the repository that contains the blog entries.
--   
--   The path may as well point to a directory within a repository.
entryPath :: BlogConfig m -> FilePath

-- | Interval in minutes at which the entry repository should be queried
--   for new content. Will default to 10 for entries smaller than 1.
updateInterval :: BlogConfig m -> Integer

-- | Given the path to the blog entries, create a <tt>BlogConfig</tt> value
--   that can be used as an overrideable template with most fields using
--   default values.
createDefaultBlogConfig :: Monad m => FilePath -> BlogConfig m

-- | A value of this type contains all the data needed for the blog module
--   to operate.
data Blog m

-- | Retrieve the <a>BlogConfig</a> from the <a>Blog</a> value. Due to the
--   resuorce managmeent that the <a>Blog</a> data type encapsulates, this
--   function only works inside an <a>IO</a> monad.
getBlogConfig :: (Functor io, MonadIO io) => Blog m -> io (Maybe (BlogConfig m))

-- | Create a <a>Blog</a> object by providing a <a>BlogConfig</a> value.
--   This function also starts threads which will handle the resource
--   management with some configurable settings that can be defined in the
--   <a>BlogConfig</a>.
withBlog :: BlogConfig m -> (Blog m -> IO ()) -> IO ()

-- | Retrieve an <a>IxSet</a> of blog <a>Entry</a> values. If
blogEntries :: (Functor io, MonadIO io, Monad m) => Blog m -> EntryQuery -> Maybe (IxSet Entry -> IxSet Entry) -> io (m Html)

-- | This function wrapping is needed to let the dyre library detect
--   changes to the configuration and recompile everything. Simply define
--   your main in <tt>~/.config/repo-based-blog/rbb.hs</tt> as follows:
--   
--   <pre>
--   importWeb.RBB
--   
--   main = rbb $ do
--       putStrLn "Hello, World!"
--   </pre>
rbb :: IO () -> IO ()

-- | Metadata for a blog entry.
data Entry
entryId :: Lens' Entry Integer
title :: Lens' Entry Text
author :: Lens' Entry Text
authorEmail :: Lens' Entry Text
tags :: Lens' Entry (Set Text)
fileType :: Lens' Entry FileType

-- | Newtype for <a>Text</a>
newtype Title
Title :: Text -> Title
getTitle :: Title -> Text

-- | Newtype for <a>Text</a>
newtype AuthorName
AuthorName :: Text -> AuthorName
getAuthorName :: AuthorName -> Text

-- | Newtype for <a>Text</a>
newtype AuthorEmail
AuthorEmail :: Text -> AuthorEmail
getAuthorEmail :: AuthorEmail -> Text

-- | Newtype for <a>Set</a> <a>Text</a>
newtype Tags
Tags :: Set Text -> Tags
getTags :: Tags -> Set Text

-- | Newtype for <a>Integer</a>
newtype Index
Index :: Integer -> Index
getIndex :: Index -> Integer

-- | Enumeration that contains all supported file type extensions for blog
--   entries.
data FileType
PandocMarkdown :: FileType
LiterateHaskell :: FileType

-- | The default value for this type.
def :: Default a => a
