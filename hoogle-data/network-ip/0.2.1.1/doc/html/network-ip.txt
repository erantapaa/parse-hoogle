-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Internet Protocol data structures
--   
--   This package provides Internet Protocol data structures
@package network-ip
@version 0.2.1.1


-- | Internet Protocol addressing.
module Network.IP.Addr

-- | IPv4 address.
newtype IP4
IP4 :: Word32 -> IP4
unIP4 :: IP4 -> Word32

-- | <a>IP4</a> proxy value.
anIP4 :: Proxy IP4

-- | The octets of an IPv4 address.
ip4ToOctets :: IP4 -> (Word8, Word8, Word8, Word8)

-- | List the octets of an IPv4 address.
ip4ToOctetList :: IP4 -> [Word8]

-- | Assemble IPv4 address from the octets.
ip4FromOctets :: Word8 -> Word8 -> Word8 -> Word8 -> IP4

-- | Assemble IPv4 address from the octet list.
ip4FromOctetList :: [Word8] -> Maybe IP4

-- | IPv4 address <tt>0.0.0.0</tt>.
anyIP4 :: IP4

-- | IPv4 address <tt>127.0.0.1</tt>.
loopbackIP4 :: IP4

-- | IPv4 address <tt>255.255.255.255</tt>.
broadcastIP4 :: IP4

-- | IPv4 address range classification (per RFC6890).
data Range4

-- | General IPv4 address.
GeneralIP4 :: Range4

-- | This host on this network.
ThisHostIP4 :: Range4

-- | Private-Use networks.
PrivateUseIP4 :: Range4

-- | Shared address space.
SharedSpaceIP4 :: Range4

-- | Loopback address.
LoopbackIP4 :: Range4

-- | Link local address.
LinkLocalIP4 :: Range4

-- | Reserved address.
ReservedIP4 :: Range4

-- | Dual-Stack Lite.
DSLiteIP4 :: Range4

-- | Reserved for documentation.
DocumentationIP4 :: Range4

-- | 6to4.
IP6To4IP4 :: Range4

-- | Benchmark testing.
BenchmarkingIP4 :: Range4

-- | Multicast address.
MulticastIP4 :: Range4

-- | Future use.
FutureUseIP4 :: Range4

-- | Limited broadcast.
BroadcastIP4 :: Range4

-- | Determine the address range type.
ip4Range :: IP4 -> Range4

-- | IPv6 address.
newtype IP6
IP6 :: Word128 -> IP6
unIP6 :: IP6 -> Word128

-- | <a>IP6</a> proxy value.
anIP6 :: Proxy IP6

-- | The 16-bit pieces of an IPv6 address.
ip6ToWords :: IP6 -> (Word16, Word16, Word16, Word16, Word16, Word16, Word16, Word16)

-- | List the 16-bit pieces of an IPv6 address.
ip6ToWordList :: IP6 -> [Word16]

-- | Assemble IPv6 address from the 16-bit pieces.
ip6FromWords :: Word16 -> Word16 -> Word16 -> Word16 -> Word16 -> Word16 -> Word16 -> Word16 -> IP6

-- | Assemble IPv6 address from the list of 16-bit pieces.
ip6FromWordList :: [Word16] -> Maybe IP6

-- | IPv6 address <tt>::</tt>.
anyIP6 :: IP6

-- | IPv6 address <tt>::1</tt>.
loopbackIP6 :: IP6

-- | IPv6 address range classification (per RFC6890).
data Range6

-- | General IPv6 address.
GeneralIP6 :: Range6

-- | Unspecified address.
AnyIP6 :: Range6

-- | Loopback address.
LoopbackIP6 :: Range6

-- | Mapped IPv4 address.
IP4MappedIP6 :: Range6

-- | Embedded IPv4 address.
IP4EmbeddedIP6 :: Range6

-- | Discard address.
DiscardIP6 :: Range6

-- | Reserved address.
ReservedIP6 :: Range6

-- | Teredo address.
TeredoIP6 :: Range6

-- | Benchmark testing.
BenchmarkingIP6 :: Range6

-- | Reserved for documentation.
DocumentationIP6 :: Range6

-- | ORCHID address.
OrchidIP6 :: Range6

-- | 6to4.
IP6To4IP6 :: Range6

-- | Unique local address.
UniqueLocalIP6 :: Range6

-- | Link local address.
LinkLocalIP6 :: Range6

-- | Multicast address.
MulticastIP6 :: Range6

-- | Determine the address range type.
ip6Range :: IP6 -> Range6
data IP
IPv4 :: {-# UNPACK #-} !IP4 -> IP
IPv6 :: {-# UNPACK #-} !IP6 -> IP

-- | <a>IP</a> proxy value.
anIP :: Proxy IP

-- | Network address.
class IsNetAddr n where type family NetHost n
netHost :: IsNetAddr n => n -> NetHost n
netHostIx :: IsNetAddr n => n -> NetHost n
netPrefix :: IsNetAddr n => n -> NetHost n
netMask :: IsNetAddr n => n -> NetHost n
netLength :: IsNetAddr n => n -> Word8
netAddr :: IsNetAddr n => NetHost n -> Word8 -> n
inNetwork :: IsNetAddr n => NetHost n -> n -> Bool
type Net4Addr = NetAddr IP4
type Net6Addr = NetAddr IP6

-- | Network address: host address + network mask length.
data NetAddr a

-- | <a>NetAddr</a> proxy value.
aNetAddr :: Proxy NetAddr

-- | <a>NetAddr</a> <i>a</i> proxy value.
aNetAddrOf :: Proxy a -> Proxy (NetAddr a)

-- | <a>Net4Addr</a> proxy value.
aNet4Addr :: Proxy Net4Addr

-- | <a>Net6Addr</a> proxy value.
aNet6Addr :: Proxy Net6Addr

-- | <a>NetAddr</a> <a>IP</a> proxy value.
aNetAddrIP :: Proxy (NetAddr IP)
net4Addr :: IP4 -> Word8 -> Net4Addr
net6Addr :: IP6 -> Word8 -> Net6Addr

-- | Print network address (CIDR notation).
printNetAddr :: (IsNetAddr n, Printable (NetHost n), Printer p) => n -> p

-- | IPv4 network address parser (CIDR notation).
net4Parser :: (CharParsing μ, Monad μ, IsNetAddr n, NetHost n ~ IP4) => μ n

-- | IPv6 network address parser (CIDR notation).
net6Parser :: (CharParsing μ, Monad μ, IsNetAddr n, NetHost n ~ IP6) => μ n

-- | IP network address parser (CIDR notation).
netParser :: (IsNetAddr n, NetHost n ~ IP, CharParsing μ, Monad μ) => μ n

-- | Port number.
newtype InetPort
InetPort :: Word16 -> InetPort
unInetPort :: InetPort -> Word16

-- | <a>InetPort</a> proxy value.
anInetPort :: Proxy InetPort

-- | Socket address: host address + port number.
data InetAddr a
InetAddr :: a -> {-# UNPACK #-} !InetPort -> InetAddr a
inetHost :: InetAddr a -> a
inetPort :: InetAddr a -> {-# UNPACK #-} !InetPort
type Inet4Addr = InetAddr IP4
type Inet6Addr = InetAddr IP6

-- | <a>InetAddr</a> proxy value.
anInetAddr :: Proxy InetAddr

-- | <a>InetAddr</a> <i>a</i> proxy value.
anInetAddrOf :: Proxy a -> Proxy (InetAddr a)

-- | <a>Inet4Addr</a> proxy value.
anInet4Addr :: Proxy Inet4Addr

-- | <a>Inet6Addr</a> proxy value.
anInet6Addr :: Proxy Inet6Addr

-- | <a>InetAddr</a> <a>IP</a> proxy value.
anInetAddrIP :: Proxy (InetAddr IP)
instance Typeable IP4
instance Typeable Range4
instance Typeable IP6
instance Typeable Range6
instance Typeable IP
instance Typeable1 NetAddr
instance Typeable InetPort
instance Typeable1 InetAddr
instance Eq IP4
instance Ord IP4
instance Bounded IP4
instance Enum IP4
instance Ix IP4
instance Num IP4
instance Bits IP4
instance Hashable IP4
instance Binary IP4
instance Serialize IP4
instance Show Range4
instance Read Range4
instance Eq Range4
instance Ord Range4
instance Enum Range4
instance Eq IP6
instance Ord IP6
instance Bounded IP6
instance Enum IP6
instance Ix IP6
instance Num IP6
instance Bits IP6
instance Hashable IP6
instance Show Range6
instance Read Range6
instance Eq Range6
instance Ord Range6
instance Enum Range6
instance Eq IP
instance Ord IP
instance Show IP
instance Read IP
instance Eq a => Eq (NetAddr a)
instance Eq InetPort
instance Ord InetPort
instance Bounded InetPort
instance Enum InetPort
instance Ix InetPort
instance Num InetPort
instance Real InetPort
instance Integral InetPort
instance Bits InetPort
instance Hashable InetPort
instance Binary InetPort
instance Serialize InetPort
instance Printable InetPort
instance Eq a => Eq (InetAddr a)
instance Ord a => Ord (InetAddr a)
instance Show a => Show (InetAddr a)
instance Read a => Read (InetAddr a)
instance Serialize a => Serialize (InetAddr a)
instance Binary a => Binary (InetAddr a)
instance Hashable a => Hashable (InetAddr a)
instance Textual (InetAddr IP)
instance Textual Inet6Addr
instance Textual Inet4Addr
instance Printable (InetAddr IP)
instance Printable Inet6Addr
instance Printable Inet4Addr
instance Functor InetAddr
instance Storable InetPort
instance Textual InetPort
instance Read InetPort
instance Show InetPort
instance IsNetAddr (NetAddr IP)
instance IsNetAddr Net6Addr
instance IsNetAddr Net4Addr
instance Serialize (NetAddr IP)
instance Serialize Net6Addr
instance Serialize Net4Addr
instance Binary (NetAddr IP)
instance Binary Net6Addr
instance Binary Net4Addr
instance Textual (NetAddr IP)
instance Textual Net6Addr
instance Textual Net4Addr
instance Printable a => Printable (NetAddr a)
instance Read (NetAddr IP)
instance Read Net6Addr
instance Read Net4Addr
instance Show a => Show (NetAddr a)
instance Serialize IP
instance Binary IP
instance Textual IP
instance Printable IP
instance Default IP6
instance Serialize IP6
instance Binary IP6
instance Storable IP6
instance Textual IP6
instance Printable IP6
instance Read IP6
instance Show IP6
instance Default IP4
instance Storable IP4
instance Textual IP4
instance Printable IP4
instance Read IP4
instance Show IP4
