-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Disciplined Disciple Compiler intermediate language.
--   
--   Disciplined Disciple Compiler intermediate language with internalized
--   effect judgement.
@package ddc-core-tetra
@version 0.4.1.3

module DDC.Core.Tetra.Prim

-- | Names of things used in Disciple Core Tetra.
data Name

-- | User defined variables.
NameVar :: String -> Name

-- | A user defined constructor.
NameCon :: String -> Name

-- | Baked-in type constructors.
NameTyConTetra :: TyConTetra -> Name

-- | Baked-in data constructors.
NameDaConTetra :: DaConTetra -> Name

-- | Baked-in operators.
NameOpStore :: OpStore -> Name

-- | A primitive type constructor.
NamePrimTyCon :: PrimTyCon -> Name

-- | Primitive arithmetic, logic, comparison and bit-wise operators.
NamePrimArith :: PrimArith -> Name

-- | Primitive numeric casting operators.
NamePrimCast :: PrimCast -> Name

-- | A boolean literal.
NameLitBool :: Bool -> Name

-- | A natural literal.
NameLitNat :: Integer -> Name

-- | An integer literal.
NameLitInt :: Integer -> Name

-- | A word literal.
NameLitWord :: Integer -> Int -> Name

-- | Hole used during type inference.
NameHole :: Name

-- | Check whether a name is <a>NameHole</a>.
isNameHole :: Name -> Bool

-- | Check whether a name represents some literal value.
isNameLit :: Name -> Bool

-- | Read the name of a variable, constructor or literal.
readName :: String -> Maybe Name

-- | Get the type associated with a literal name.
takeTypeOfLitName :: Name -> Maybe (Type Name)

-- | Take the type of a primitive operator.
takeTypeOfPrimOpName :: Name -> Maybe (Type Name)

-- | Baked-in type constructors.
data TyConTetra

-- | <tt>Ref#</tt>. Mutable reference.
TyConTetraRef :: TyConTetra

-- | <tt>TupleN#</tt>. Tuples.
TyConTetraTuple :: Int -> TyConTetra

-- | <tt>B#</tt>. Boxing type constructor. Used to represent boxed numeric
--   values.
TyConTetraB :: TyConTetra

-- | <tt>U#</tt>. Unboxed type constructor. Used to represent unboxed
--   numeric values.
TyConTetraU :: TyConTetra

-- | Read the name of a baked-in type constructor.
readTyConTetra :: String -> Maybe TyConTetra

-- | Take the kind of a baked-in type constructor.
kindTyConTetra :: TyConTetra -> Type Name

-- | Data Constructors.
data DaConTetra

-- | <tt>TN#</tt>. Tuple data constructors.
DaConTetraTuple :: Int -> DaConTetra

-- | Read the name of a baked-in data constructor.
readDaConTetra :: String -> Maybe DaConTetra

-- | Yield the type of a baked-in data constructor.
typeDaConTetra :: DaConTetra -> Type Name

-- | Mutable References.
data OpStore

-- | Allocate a reference.
OpStoreAllocRef :: OpStore

-- | Read a reference.
OpStoreReadRef :: OpStore

-- | Write to a reference.
OpStoreWriteRef :: OpStore

-- | Read a primitive store operator.
readOpStore :: String -> Maybe OpStore

-- | Take the type of a primitive store operator.
typeOpStore :: OpStore -> Type Name

-- | Primitive type constructors.
data PrimTyCon :: *

-- | <tt>Void#</tt> the Void type has no values.
PrimTyConVoid :: PrimTyCon

-- | <tt>Bool#</tt> unboxed booleans.
PrimTyConBool :: PrimTyCon

-- | <tt>Nat#</tt> natural numbers. Enough precision to count every object
--   in the heap, but NOT enough precision to count every byte of memory.
PrimTyConNat :: PrimTyCon

-- | <tt>Int#</tt> signed integers. Enough precision to count every object
--   in the heap, but NOT enough precision to count every byte of memory.
--   If N is the total number of objects that can exist in the heap, then
--   the range of <tt>Int#</tt> is at least (-N .. +N) inclusive.
PrimTyConInt :: PrimTyCon

-- | <tt>WordN#</tt> machine words of the given width.
PrimTyConWord :: Int -> PrimTyCon

-- | <tt>FloatN#</tt> floating point numbers of the given width.
PrimTyConFloat :: Int -> PrimTyCon

-- | <tt>VecN#</tt> a packed vector of N values. This is intended to have
--   kind (Data -&gt; Data), so we use concrete vector types like
--   <tt>Vec4</tt>.
PrimTyConVec :: Int -> PrimTyCon

-- | <tt>Addr#</tt> a relative or absolute machine address. Enough
--   precision to count every byte of memory. Unlike pointers below, an
--   absolute <tt>Addr#</tt> need not refer to memory owned by the current
--   process.
PrimTyConAddr :: PrimTyCon

-- | <tt>Ptr#</tt> should point to a well-formed object owned by the
--   current process.
PrimTyConPtr :: PrimTyCon

-- | <tt>Tag#</tt> data constructor tags. Enough precision to count every
--   possible alternative of an enumerated type.
PrimTyConTag :: PrimTyCon

-- | <tt>String#</tt> of UTF8 characters.
--   
--   These are primitive until we can define our own unboxed types.
PrimTyConString :: PrimTyCon

-- | Read a primitive type constructor.
--   
--   Words are limited to 8, 16, 32, or 64 bits.
--   
--   Floats are limited to 32 or 64 bits.
readPrimTyCon :: String -> Maybe PrimTyCon

-- | Yield the kind of a type constructor.
kindPrimTyCon :: PrimTyCon -> Kind Name

-- | Primitive arithmetic, logic, and comparison opretors. We expect the
--   backend/machine to be able to implement these directly.
--   
--   For the Shift Right operator, the type that it is used at determines
--   whether it is an arithmetic (with sign-extension) or logical (no
--   sign-extension) shift.
data PrimArith :: *

-- | Negation
PrimArithNeg :: PrimArith

-- | Addition
PrimArithAdd :: PrimArith

-- | Subtraction
PrimArithSub :: PrimArith

-- | Multiplication
PrimArithMul :: PrimArith

-- | Division
PrimArithDiv :: PrimArith

-- | Modulus
PrimArithMod :: PrimArith

-- | Remainder
PrimArithRem :: PrimArith

-- | Equality
PrimArithEq :: PrimArith

-- | Negated Equality
PrimArithNeq :: PrimArith

-- | Greater Than
PrimArithGt :: PrimArith

-- | Greater Than or Equal
PrimArithGe :: PrimArith

-- | Less Than
PrimArithLt :: PrimArith

-- | Less Than or Equal
PrimArithLe :: PrimArith

-- | Boolean And
PrimArithAnd :: PrimArith

-- | Boolean Or
PrimArithOr :: PrimArith

-- | Shift Left
PrimArithShl :: PrimArith

-- | Shift Right
PrimArithShr :: PrimArith

-- | Bit-wise And
PrimArithBAnd :: PrimArith

-- | Bit-wise Or
PrimArithBOr :: PrimArith

-- | Bit-wise eXclusive Or
PrimArithBXOr :: PrimArith

-- | Read a primitive operator.
readPrimArith :: String -> Maybe PrimArith

-- | Take the type of a primitive arithmetic operator.
typePrimArith :: PrimArith -> Type Name

-- | Primitive cast between two types.
--   
--   The exact set of available casts is determined by the target platform.
--   For example, you can only promote a <tt>Nat#</tt> to a
--   <tt>Word32#</tt> on a 32-bit system. On a 64-bit system the
--   <tt>Nat#</tt> type is 64-bits wide, so casting it to a
--   <tt>Word32#</tt> would be a truncation.
data PrimCast :: *

-- | Convert a value to a new representation with the same precision.
PrimCastConvert :: PrimCast

-- | Promote a value to one of similar or larger width, without loss of
--   precision.
PrimCastPromote :: PrimCast

-- | Truncate a value to a new width, possibly losing precision.
PrimCastTruncate :: PrimCast
readPrimCast :: String -> Maybe PrimCast

-- | Take the type of a primitive numeric cast operator.
typePrimCast :: PrimCast -> Type Name
instance Pretty Name
instance NFData Name

module DDC.Core.Tetra.Compounds

-- | Primitive <a>Bool</a> type.
tBool :: Type Name

-- | Primitive <tt>Nat</tt> type.
tNat :: Type Name

-- | Primitive <a>Int</a> type.
tInt :: Type Name

-- | Primitive <tt>WordN</tt> type of the given width.
tWord :: Int -> Type Name

-- | Construct a boxed representation type.
tBoxed :: Type Name -> Type Name

-- | Construct an unboxed representation type.
tUnboxed :: Type Name -> Type Name
xCastConvert :: a -> Type Name -> Type Name -> Exp a Name -> Exp a Name

module DDC.Core.Tetra.Env

-- | Data type definitions
--   
--   <pre>
--   Type                         Constructors
--   ----                ------------------------------
--   Bool                True False
--   Nat                 0 1 2 ...
--   Int                 ... -2i -1i 0i 1i 2i ...
--   Word{8,16,32,64}#   42w8 123w64 ...
--   </pre>
primDataDefs :: DataDefs Name

-- | Sort environment containing sorts of primitive kinds.
primSortEnv :: Env Name

-- | Kind environment containing kinds of primitive data types.
primKindEnv :: Env Name

-- | Type environment containing types of primitive operators.
primTypeEnv :: Env Name


-- | Conversion of Disciple Lite to Disciple Salt.
module DDC.Core.Tetra.Convert

-- | Convert a Core Tetra module to Core Salt.
--   
--   The input module needs to be: well typed, fully named with no deBruijn
--   indices, have all functions defined at top-level, have type
--   annotations on every bound variable and constructor, be a-normalised,
--   have saturated function applications, not have over-applied function
--   applications. If not then <a>Error</a>.
--   
--   The output code contains: debruijn indices. These then need to be
--   eliminated before it will pass the Salt fragment checks.
saltOfTetraModule :: Show a => Platform -> Config -> DataDefs Name -> KindEnv Name -> TypeEnv Name -> Module (AnTEC a Name) Name -> Either (Error a) (Module a Name)

-- | Things that can go wrong during the conversion.
data Error a

-- | The <tt>Main</tt> module has no <tt>main</tt> function.
ErrorMainHasNoMain :: Error a

-- | Found unexpected AST node, like <a>LWithRegion</a>.
ErrorMalformed :: String -> Error a

-- | The program is definately not well typed.
ErrorMistyped :: (Exp (AnTEC a Name) Name) -> Error a

-- | The program wasn't normalised, or we don't support the feature.
ErrorUnsupported :: (Exp (AnTEC a Name) Name) -> Doc -> Error a

-- | The program has bottom (missing) type annotations.
ErrorBotAnnot :: Error a

-- | Found an unexpected type sum.
ErrorUnexpectedSum :: Error a

-- | An invalid name used in a binding position
ErrorInvalidBinder :: Name -> Error a

-- | An invalid name used in a bound position
ErrorInvalidBound :: (Bound Name) -> Error a

-- | An invalid data constructor name.
ErrorInvalidDaCon :: (DaCon Name) -> Error a

-- | An invalid name used for the constructor of an alternative.
ErrorInvalidAlt :: Error a

module DDC.Core.Tetra

-- | Language profile for Disciple Core Tetra.
profile :: Profile Name

-- | Lex a string to tokens, using primitive names.
--   
--   The first argument gives the starting source line number.
lexModuleString :: String -> Int -> String -> [Token (Tok Name)]

-- | Lex a string to tokens, using primitive names.
--   
--   The first argument gives the starting source line number.
lexExpString :: String -> Int -> String -> [Token (Tok Name)]

-- | Perform Core Tetra specific checks on a module.
checkModule :: Module a Name -> Maybe (Error a)

-- | Convert a Core Tetra module to Core Salt.
--   
--   The input module needs to be: well typed, fully named with no deBruijn
--   indices, have all functions defined at top-level, have type
--   annotations on every bound variable and constructor, be a-normalised,
--   have saturated function applications, not have over-applied function
--   applications. If not then <a>Error</a>.
--   
--   The output code contains: debruijn indices. These then need to be
--   eliminated before it will pass the Salt fragment checks.
saltOfTetraModule :: Show a => Platform -> Config -> DataDefs Name -> KindEnv Name -> TypeEnv Name -> Module (AnTEC a Name) Name -> Either (Error a) (Module a Name)

-- | Names of things used in Disciple Core Tetra.
data Name

-- | User defined variables.
NameVar :: String -> Name

-- | A user defined constructor.
NameCon :: String -> Name

-- | Baked-in type constructors.
NameTyConTetra :: TyConTetra -> Name

-- | Baked-in data constructors.
NameDaConTetra :: DaConTetra -> Name

-- | Baked-in operators.
NameOpStore :: OpStore -> Name

-- | A primitive type constructor.
NamePrimTyCon :: PrimTyCon -> Name

-- | Primitive arithmetic, logic, comparison and bit-wise operators.
NamePrimArith :: PrimArith -> Name

-- | Primitive numeric casting operators.
NamePrimCast :: PrimCast -> Name

-- | A boolean literal.
NameLitBool :: Bool -> Name

-- | A natural literal.
NameLitNat :: Integer -> Name

-- | An integer literal.
NameLitInt :: Integer -> Name

-- | A word literal.
NameLitWord :: Integer -> Int -> Name

-- | Hole used during type inference.
NameHole :: Name

-- | Baked-in type constructors.
data TyConTetra

-- | <tt>Ref#</tt>. Mutable reference.
TyConTetraRef :: TyConTetra

-- | <tt>TupleN#</tt>. Tuples.
TyConTetraTuple :: Int -> TyConTetra

-- | <tt>B#</tt>. Boxing type constructor. Used to represent boxed numeric
--   values.
TyConTetraB :: TyConTetra

-- | <tt>U#</tt>. Unboxed type constructor. Used to represent unboxed
--   numeric values.
TyConTetraU :: TyConTetra

-- | Data Constructors.
data DaConTetra

-- | <tt>TN#</tt>. Tuple data constructors.
DaConTetraTuple :: Int -> DaConTetra

-- | Mutable References.
data OpStore

-- | Allocate a reference.
OpStoreAllocRef :: OpStore

-- | Read a reference.
OpStoreReadRef :: OpStore

-- | Write to a reference.
OpStoreWriteRef :: OpStore

-- | Primitive type constructors.
data PrimTyCon :: *

-- | <tt>Void#</tt> the Void type has no values.
PrimTyConVoid :: PrimTyCon

-- | <tt>Bool#</tt> unboxed booleans.
PrimTyConBool :: PrimTyCon

-- | <tt>Nat#</tt> natural numbers. Enough precision to count every object
--   in the heap, but NOT enough precision to count every byte of memory.
PrimTyConNat :: PrimTyCon

-- | <tt>Int#</tt> signed integers. Enough precision to count every object
--   in the heap, but NOT enough precision to count every byte of memory.
--   If N is the total number of objects that can exist in the heap, then
--   the range of <tt>Int#</tt> is at least (-N .. +N) inclusive.
PrimTyConInt :: PrimTyCon

-- | <tt>WordN#</tt> machine words of the given width.
PrimTyConWord :: Int -> PrimTyCon

-- | <tt>FloatN#</tt> floating point numbers of the given width.
PrimTyConFloat :: Int -> PrimTyCon

-- | <tt>VecN#</tt> a packed vector of N values. This is intended to have
--   kind (Data -&gt; Data), so we use concrete vector types like
--   <tt>Vec4</tt>.
PrimTyConVec :: Int -> PrimTyCon

-- | <tt>Addr#</tt> a relative or absolute machine address. Enough
--   precision to count every byte of memory. Unlike pointers below, an
--   absolute <tt>Addr#</tt> need not refer to memory owned by the current
--   process.
PrimTyConAddr :: PrimTyCon

-- | <tt>Ptr#</tt> should point to a well-formed object owned by the
--   current process.
PrimTyConPtr :: PrimTyCon

-- | <tt>Tag#</tt> data constructor tags. Enough precision to count every
--   possible alternative of an enumerated type.
PrimTyConTag :: PrimTyCon

-- | <tt>String#</tt> of UTF8 characters.
--   
--   These are primitive until we can define our own unboxed types.
PrimTyConString :: PrimTyCon

-- | Primitive arithmetic, logic, and comparison opretors. We expect the
--   backend/machine to be able to implement these directly.
--   
--   For the Shift Right operator, the type that it is used at determines
--   whether it is an arithmetic (with sign-extension) or logical (no
--   sign-extension) shift.
data PrimArith :: *

-- | Negation
PrimArithNeg :: PrimArith

-- | Addition
PrimArithAdd :: PrimArith

-- | Subtraction
PrimArithSub :: PrimArith

-- | Multiplication
PrimArithMul :: PrimArith

-- | Division
PrimArithDiv :: PrimArith

-- | Modulus
PrimArithMod :: PrimArith

-- | Remainder
PrimArithRem :: PrimArith

-- | Equality
PrimArithEq :: PrimArith

-- | Negated Equality
PrimArithNeq :: PrimArith

-- | Greater Than
PrimArithGt :: PrimArith

-- | Greater Than or Equal
PrimArithGe :: PrimArith

-- | Less Than
PrimArithLt :: PrimArith

-- | Less Than or Equal
PrimArithLe :: PrimArith

-- | Boolean And
PrimArithAnd :: PrimArith

-- | Boolean Or
PrimArithOr :: PrimArith

-- | Shift Left
PrimArithShl :: PrimArith

-- | Shift Right
PrimArithShr :: PrimArith

-- | Bit-wise And
PrimArithBAnd :: PrimArith

-- | Bit-wise Or
PrimArithBOr :: PrimArith

-- | Bit-wise eXclusive Or
PrimArithBXOr :: PrimArith

-- | Read the name of a variable, constructor or literal.
readName :: String -> Maybe Name

-- | Read the name of a baked-in type constructor.
readTyConTetra :: String -> Maybe TyConTetra

-- | Read the name of a baked-in data constructor.
readDaConTetra :: String -> Maybe DaConTetra

-- | Read a primitive store operator.
readOpStore :: String -> Maybe OpStore

-- | Read a primitive type constructor.
--   
--   Words are limited to 8, 16, 32, or 64 bits.
--   
--   Floats are limited to 32 or 64 bits.
readPrimTyCon :: String -> Maybe PrimTyCon

-- | Read a primitive operator.
readPrimArith :: String -> Maybe PrimArith

-- | Create a new type variable name that is not in the given environment.
freshT :: Env Name -> Bind Name -> State Int Name

-- | Create a new value variable name that is not in the given environment.
freshX :: Env Name -> Bind Name -> State Int Name

-- | Fragment specific errors.
data Error a

-- | Main module does not export a <tt>main</tt> function.
ErrorMainMissing :: Error a

-- | Main module exports a <tt>main</tt> function in an invalid way.
ErrorMainInvalidMode :: Error a

-- | Main module exports a <tt>main</tt> function with an invalid type.
ErrorMainInvalidType :: (Type Name) -> Error a

module DDC.Core.Tetra.Transform.Boxing

-- | Manage boxing of numeric values in a module.
boxingModule :: Show a => Module a Name -> Module a Name
