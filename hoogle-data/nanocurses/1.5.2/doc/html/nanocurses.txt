-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple Curses binding
--   
--   This is a simple binding to the Curses library, a common Unix library
--   which allows you to use a terminal as a canvas on which your paint are
--   characters (instead of line by line output); Curses is probably most
--   useful for rogue-like interfaces.
--   
--   Nanocurses differs from Hscurses and Mage in that it is intended to be
--   portable to Curses libraries other than Ncurses, such as Ocurses,
--   Irix's curses, and so on. So it may not have all their features. (It
--   does not differ significantly from Hmp3's Curses binding, as the
--   Curses.hsc in Nanocurses is essentially extracted from Hmp3.)
@package nanocurses
@version 1.5.2


-- | Binding to the [wn]curses library. From the ncurses man page:
--   
--   <pre>
--   The curses library routines give the user a terminal-inde-
--   pendent method of updating character screens with  reason-
--   able  optimization.
--   </pre>
--   
--   Sections of the quoted documentation are from the OpenBSD man pages,
--   which are distributed under a BSD license.
--   
--   A useful reference is: <i>Writing Programs with NCURSES</i>, by Eric
--   S. Raymond and Zeyd M. Ben-Halim,
--   <a>http://dickey.his.com/ncurses/</a>
--   
--   attrs dont work with Irix curses.h. This should be fixed.
module UI.Nanocurses.Curses

-- | Start it all up
initCurses :: IO () -> IO ()

-- | A bunch of settings we need
resetParams :: IO ()

-- | The standard screen
stdScr :: Window

-- | <pre>
--   The program must call endwin for each terminal being used before
--   exiting from curses.
--   </pre>
endWin :: IO ()

-- | Enable the keypad of the user's terminal.
keypad :: Window -> Bool -> IO ()

-- | get the dimensions of the screen
scrSize :: IO (Int, Int)

-- | refresh curses windows and lines. curs_refresh(3)
refresh :: IO ()

-- | read a character from the window
--   
--   When ESC followed by another key is pressed before the ESC timeout,
--   that second character is not returned until a third character is
--   pressed. wtimeout, nodelay and timeout don't appear to change this
--   behaviour.
--   
--   On emacs, we really would want Alt to be our meta key, I think.
--   
--   Be warned, getCh will block the whole process without noDelay
getCh :: IO Char
waddnstr :: Window -> CString -> CInt -> IO CInt
bkgrndSet :: Attr -> Pair -> IO ()
clrToEol :: IO ()

-- | <pre>
--   move the cursor associated with the window
--   to line y and column x.  This routine does  not  move  the
--   physical  cursor  of the terminal until refresh is called.
--   The position specified is relative to the upper  left-hand
--   corner of the window, which is (0,0).
--   </pre>
wMove :: Window -> Int -> Int -> IO ()
keyBackspace :: Char
keyUp :: Char

-- | Some constants for easy symbolic manipulation. NB we don't map keys to
--   an abstract type anymore, as we can't use Alex lexers then.
keyDown :: Char
keyNPage :: Char
keyHome :: Char
keyPPage :: Char
keyEnd :: Char
keyLeft :: Char
keyRight :: Char
keyResize :: Char
data CursorVisibility
CursorInvisible :: CursorVisibility
CursorVisible :: CursorVisibility
CursorVeryVisible :: CursorVisibility

-- | Set the cursor state
--   
--   <pre>
--   The curs_set routine sets  the  cursor  state  is  set  to
--   invisible, normal, or very visible for visibility equal to
--   0, 1, or 2 respectively.  If  the  terminal  supports  the
--   visibility   requested,   the  previous  cursor  state  is
--   returned; otherwise, ERR is returned.
--   </pre>
cursSet :: CInt -> IO CInt

-- | Get the current cursor coordinates
getYX :: Window -> IO (Int, Int)
newtype Pair
Pair :: Int -> Pair
data Color

-- | <pre>
--   curses support color attributes  on  terminals  with  that
--   capability.   To  use  these  routines start_color must be
--   called, usually right after initscr.   Colors  are  always
--   used  in pairs (referred to as color-pairs).  A color-pair
--   consists of a foreground  color  (for  characters)  and  a
--   background color (for the blank field on which the charac-
--   ters are displayed).  A programmer  initializes  a  color-
--   pair  with  the routine init_pair.  After it has been ini-
--   tialized, COLOR_PAIR(n), a macro  defined  in  &lt;curses.h&gt;,
--   can be used as a new video attribute.
--   </pre>
--   
--   <pre>
--   If  a  terminal  is capable of redefining colors, the pro-
--   grammer can use the routine init_color to change the defi-
--   nition   of   a   color.
--   </pre>
--   
--   <pre>
--   The init_pair routine changes the definition of  a  color-
--   pair.   It takes three arguments: the number of the color-
--   pair to be changed, the foreground color number,  and  the
--   background color number.  For portable applications:
--   </pre>
--   
--   <pre>
--   -  The value of the first argument must be between 1 and
--      COLOR_PAIRS-1.
--   </pre>
--   
--   <pre>
--   -  The value of the second and third arguments  must  be
--      between  0  and  COLORS (the 0 color pair is wired to
--      white on black and cannot be changed).
--   </pre>
initPair :: Pair -> Color -> Color -> IO ()
color :: String -> Maybe Color
hasColors :: IO Bool
data Attr
attr0 :: Attr
setBold :: Attr -> Bool -> Attr
setReverse :: Attr -> Bool -> Attr
attrSet :: Attr -> Pair -> IO ()
attrPlus :: Attr -> Attr -> Attr

-- | Discard result
throwIfErr_ :: (Num a) => ByteString -> IO a -> IO ()
