-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generic action log snaplet for the Snap Framework
--   
--   This snaplet contains support for logging website actions. Common
--   actions are creating, updating, and deleting records.
@package snaplet-actionlog
@version 0.2.0.1

module Snap.Snaplet.ActionLog

-- | Opaque data type holding any state needed by the action log snaplet.
data ActionLog

-- | Initializer for the action log snaplet. It sets up templates, routes,
--   and compiled and interpreted splices.
--   
--   Includes two built-in top level splices: actionLogListing and
--   actionLogFilterForm
initActionLog :: (HasActionLog (Handler b b), HasHeist b) => Snaplet (Heist b) -> SnapletInit b ActionLog

-- | Type class that must be implemented to have an action log. You do not
--   have to have any custom splices. If you don't need to add splices to
--   what the snaplet provides by default, just have the custom splice
--   functions return an empty list.
--   
--   One potential use for the custom splices might be if you want to
--   display your own custom information in action log lists. Maybe you
--   want to display a user email address in addition to their name, or
--   maybe instead of displaying raw entity IDs you want to do some DB
--   query to get a different field for display. The custom splices allow
--   you to make any runtime function of a LoggedAction into a splice that
--   can be displayed in action log templates.
class HasPersistPool m => HasActionLog m
alGetTenantId :: HasActionLog m => m Int
alGetAuthUserId :: HasActionLog m => m Int
alGetTime :: HasActionLog m => m UTCTime
alGetName :: HasActionLog m => Int -> m Text
alCustomCSplices :: HasActionLog m => [(Text, Promise (Entity LoggedAction) -> Splice m)]
alCustomISplices :: HasActionLog m => Entity LoggedAction -> [(Text, Splice m)]

-- | Enumeration of possible actions in the action log.
data ActionType
CreateAction :: ActionType
UpdateAction :: ActionType
DeleteAction :: ActionType

-- | Converts an ActionType into an Int to be stored in the database. We
--   don't want to use fromEnum here because that will make the numbers
--   sensitive to the ordering of the data type and easier to screw up.
actionToInt :: ActionType -> Int

-- | Converts an Int into an ActionType. Again, we want this to be explicit
--   rather than implied by toEnum.
intToAction :: Int -> Either Text ActionType

-- | To store deltas, you need to be able to get Text representations of
--   each field.
class DeltaField a
toBS :: DeltaField a => a -> ByteString
class CanDelta a
deltaFields :: CanDelta a => [(Text, a -> ByteString)]

-- | Calculates a list of fields that changed along with ByteString
--   representations of their old and new values.
storeDeltas :: (HasPersistPool m, CanDelta a) => LoggedActionId -> a -> a -> m ()

-- | Calculates a list of fields that changed along with ByteString
--   representations of their old and new values.
getDeltas :: CanDelta a => a -> a -> [(Text, ByteString, ByteString)]

-- | Gets the LoggedAction entry for the specified entity and id.
getLoggedAction :: HasPersistPool m => LoggedActionId -> m (Maybe LoggedAction)

-- | Gets the LoggedAction entry for the specified entity and id.
getEntityActions :: HasPersistPool m => Text -> Int -> m [Entity LoggedAction]

-- | Gets all the actions in the action log. In multi-tenant applications
--   you probably want this to only be accessible by the administrator of
--   the whole site.
getAllActions :: HasPersistPool m => m [Entity LoggedAction]

-- | Gets all the logged actions for the current tenant.
getTenantActions :: HasActionLog m => [Filter LoggedAction] -> [SelectOpt LoggedAction] -> m [Entity LoggedAction]

-- | Gets a list of all entities for a specific tenant.
getTenantEntities :: HasActionLog m => m [Text]

-- | Gets a list of all uids for a specific tenant.
getTenantUids :: HasActionLog m => m [Int]

-- | Low level function for logging an action. Usually you will want to use
--   one of the other functions like <a>loggedInsert</a>. But when those
--   aren't sufficient, this function provides you maximum control to log
--   actions as you see fit.
logAction :: HasActionLog m => Text -> Int -> ActionType -> m (Key LoggedAction)

-- | Performs a logged insert into the database. Just about everything
--   should be inserted using this function instead of <tt>runPersist' .
--   insert</tt>
loggedInsert :: (PersistEntity a, HasActionLog m, PersistEntityBackend a ~ SqlBackend) => a -> m (Key a)

-- | Performs a logged replace of a database record.
loggedReplace :: (PersistEntity a, CanDelta a, HasActionLog m, PersistEntityBackend a ~ SqlBackend) => Key a -> a -> m ()

-- | Performs a logged update of a database record.
loggedUpdate :: (PersistEntity a, CanDelta a, HasActionLog m, PersistEntityBackend a ~ SqlBackend) => Key a -> [Update a] -> m ()

-- | Performs a logged delete of an entity in the database.
loggedDelete :: (HasActionLog m, PersistEntity a, PersistEntityBackend a ~ SqlBackend) => Entity a -> m ()

-- | Performs a logged delete of a key in the database.
loggedDeleteKey :: (PersistEntity a, HasActionLog m, PersistEntityBackend a ~ SqlBackend) => Key a -> m ()

-- | The list of entity definitions this snaplet exposes. You need them so
--   that you can append to your application's list of entity definitions
--   and perform the migration in one block.
--   
--   Here's an example of how to combine your app's own entity definitions
--   and the action log's in one migration block:
--   
--   <pre>
--   share [mkMigrate "migrateAll"] $
--      actionLogEntityDefs ++
--      $(persistFileWith lowerCaseSettings "schema.txt")
--   </pre>
actionLogEntityDefs :: [EntityDef SqlType]
migrateActionLog :: (MonadBaseControl IO m, MonadIO m, MonadLogger m) => Migration (SqlPersistT m)
data LoggedActionGeneric backend
LoggedAction :: !Int -> !Int -> !Text -> !Int -> !ActionType -> !UTCTime -> LoggedActionGeneric backend
loggedActionTenantId :: LoggedActionGeneric backend -> !Int
loggedActionUserId :: LoggedActionGeneric backend -> !Int
loggedActionEntityName :: LoggedActionGeneric backend -> !Text
loggedActionEntityId :: LoggedActionGeneric backend -> !Int
loggedActionAction :: LoggedActionGeneric backend -> !ActionType
loggedActionAt :: LoggedActionGeneric backend -> !UTCTime
type LoggedAction = LoggedActionGeneric SqlBackend
type LoggedActionId = KeyBackend SqlBackend LoggedAction
data LoggedActionDetailsGeneric backend
LoggedActionDetails :: !(KeyBackend backend (LoggedActionGeneric backend)) -> !Text -> !Text -> !Text -> LoggedActionDetailsGeneric backend
loggedActionDetailsActionId :: LoggedActionDetailsGeneric backend -> !(KeyBackend backend (LoggedActionGeneric backend))
loggedActionDetailsFieldName :: LoggedActionDetailsGeneric backend -> !Text
loggedActionDetailsOldValue :: LoggedActionDetailsGeneric backend -> !Text
loggedActionDetailsNewValue :: LoggedActionDetailsGeneric backend -> !Text
type LoggedActionDetails = LoggedActionDetailsGeneric SqlBackend
type LoggedActionDetailsId = KeyBackend SqlBackend LoggedActionDetails
