-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Image Filters (contrast, brightness, gaussian blur, etc)
--   
--   This package brings image filters comparable to PHP's imagefilter
--   functions. In the current release, these filters may only be used with
--   the GD Haskell extension library, but in the future it may support
--   other image management libraries, such as the new JuicyPixels library.
--   
--   imagefilters also supplies functionality for creating custom filters
--   by using the <a>pixelTransform</a> function for per-pixel
--   transformations, or the <a>convolute</a> function for the application
--   of convolution matrices
@package imagefilters
@version 0.1

module Graphics.Filters.Util
type RGBA = (Int, Int, Int, Int)

-- | Utility function for clamping a value between a minimum and maximum
--   value
clamp :: (Ord a, Num a) => a -> a -> a -> a

-- | Function for converting RGBA from an Int 0-255 range to a Float
--   0.0-1.0 range
normalizeRGBA :: RGBA -> (Float, Float, Float, Float)

module Graphics.Filters.GD

-- | Applies the supplied brightness adjustment to the image. The range of
--   the brightness argument is -255 to +255
brightness :: Image -> Int -> IO ()

-- | Applies the supplied color transformation to the image. The range of
--   the passed RGB values are -255 to +255, and the range of the A value
--   is -127 to +127.
colorize :: Image -> RGBA -> IO ()

-- | Applies the supplied contrast adjustment to the image. The range of
--   the contrast argument is -100 to +100, with -100 being maximum
--   contrast, and +100 being minimum contrast
contrast :: Image -> Int -> IO ()

-- | Applies Gaussian blur to the image
gaussianBlur :: Image -> IO ()

-- | Converts an image to grayscale
grayscale :: Image -> IO ()

-- | Applies Edge Detection to the image
edgeDetect :: Image -> IO ()

-- | Applies an Emboss effect to the image
emboss :: Image -> IO ()

-- | Applies a Mean Removal effect to the image
meanRemoval :: Image -> IO ()

-- | Inverts the image's color.
negative :: Image -> IO ()

-- | Applies weighted Smoothing to the image. The smoothing amount is
--   technically unbounded, but larger values produce a less noticeable
--   result
smoothing :: Image -> Float -> IO ()

-- | Performs the supplied transform function on every pixel of the image.
--   The transform function should take as it's argument a quadruple of
--   Ints (RGBA) and returns a new RGBA quadruple which is will be the new
--   RGBA values of the the pixel.
--   
--   For example, the <a>colorize</a> filter's inner workings are
--   implemented with this as the transform function:
--   
--   <pre>
--   (\(r,g,b,a) -&gt; let
--         nr = clamp 0 255 (r+ar)
--         ng = clamp 0 255 (g+ag)
--         nb = clamp 0 255 (b+ab)
--         na = clamp 0 127 (a+aa)
--     in (nr,ng,nb,na))
--   </pre>
pixelTransform :: Image -> (RGBA -> RGBA) -> IO ()

-- | Performs the convolution matrix on each pixel of the original image.
--   After the matrix has been applied, the resulting RGBA value has each
--   of it's elements divided by the Divisor argument and then the Offset
--   argument is added to each element
--   
--   For example, the <a>emboss</a> filter is implemented with the
--   following convolution:
--   
--   <pre>
--   emboss img = convolute img [[1.5,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,-1.5]] 1 127
--   </pre>
convolute :: Image -> [[Float]] -> Float -> Float -> IO ()
