-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Webmachine-inspired HTTP library
--   
@package airship
@version 0.3.0.0

module Airship.Types
data ETag
Strong :: ByteString -> ETag
Weak :: ByteString -> ETag
data Webmachine s m a

-- | A convenience synonym that writes the <tt>Monad</tt> type constraint
--   for you.
type Handler s m a = Monad m => Webmachine s m a

-- | Very similar to WAI's <tt>Request</tt> type, except generalized to an
--   arbitrary monad <tt>m</tt>.
data Request m
Request :: Method -> HttpVersion -> ByteString -> ByteString -> RequestHeaders -> Bool -> SockAddr -> [Text] -> Query -> m ByteString -> RequestBodyLength -> Maybe ByteString -> Maybe ByteString -> Request m

-- | The request method -- <tt>GET</tt>, <tt>POST</tt>, <tt>DELETE</tt>, et
--   cetera.
requestMethod :: Request m -> Method

-- | The HTTP version (usually 1.1; hopefully someday 2.0).
httpVersion :: Request m -> HttpVersion

-- | The unparsed path information yielded from the WAI server. You
--   probably want <a>pathInfo</a>.
rawPathInfo :: Request m -> ByteString

-- | The query string, if any, yielded from the WAI server. You probably
--   want <a>queryString</a>.
rawQueryString :: Request m -> ByteString

-- | An association list of (headername, value) pairs. See
--   <a>Network.HTTP.Types.Header</a> for the possible values.
requestHeaders :: Request m -> RequestHeaders

-- | Was this request made over SSL/TLS?
isSecure :: Request m -> Bool

-- | The address information of the client.
remoteHost :: Request m -> SockAddr

-- | The URL, stripped of hostname and port, split on forward-slashes
pathInfo :: Request m -> [Text]

-- | Parsed query string information.
queryString :: Request m -> Query

-- | A monadic action that extracts a (possibly-empty) chunk of the request
--   body.
requestBody :: Request m -> m ByteString

-- | Either <tt>ChunkedBody</tt> or a <tt>KnownLength <tt>Word64</tt></tt>.
requestBodyLength :: Request m -> RequestBodyLength

-- | Contains the Host header.
requestHeaderHost :: Request m -> Maybe ByteString

-- | Contains the Range header.
requestHeaderRange :: Request m -> Maybe ByteString
data Response m
Response :: Status -> ResponseHeaders -> ResponseBody m -> Response m
_responseStatus :: Response m -> Status
_responseHeaders :: Response m -> ResponseHeaders
_responseBody :: Response m -> ResponseBody m
data ResponseState s m
ResponseState :: s -> ResponseHeaders -> ResponseBody m -> HashMap Text Text -> [Text] -> ResponseState s m
stateUser :: ResponseState s m -> s
stateHeaders :: ResponseState s m -> ResponseHeaders
stateBody :: ResponseState s m -> ResponseBody m
_params :: ResponseState s m -> HashMap Text Text
_dispatchPath :: ResponseState s m -> [Text]

-- | Basically Wai's unexported <a>Response</a> type, but generalized to
--   any monad, <tt>m</tt>.
data ResponseBody m
ResponseFile :: FilePath -> (Maybe FilePart) -> ResponseBody m
ResponseBuilder :: Builder -> ResponseBody m
ResponseStream :: (StreamingBody m) -> ResponseBody m
Empty :: ResponseBody m
defaultRequest :: Monad m => Request m

-- | Reads the entirety of the request body in a single string. This turns
--   the chunks obtained from repeated invocations of <a>requestBody</a>
--   into a lazy <a>ByteString</a>.
entireRequestBody :: Monad m => Request m -> m ByteString
etagToByteString :: ETag -> ByteString
eitherResponse :: Monad m => UTCTime -> HashMap Text Text -> [Text] -> Request m -> s -> Handler s m (Response m) -> m (Response m, Trace)

-- | Helper function for building a <a>ResponseBuilder</a> out of
--   HTML-escaped text.
escapedResponse :: Text -> ResponseBody m
runWebmachine :: Monad m => UTCTime -> HashMap Text Text -> [Text] -> Request m -> s -> Handler s m a -> m (Either (Response m) a, Trace)

-- | Returns the <a>Request</a> that this <a>Handler</a> is currently
--   processing.
request :: Handler s m (Request m)

-- | Returns the time at which this request began processing.
requestTime :: Handler s m UTCTime

-- | Returns the user state (of type <tt>s</tt>) in the provided
--   <tt><a>Handler</a> s m</tt>.
getState :: Handler s m s

-- | Sets the user state.
putState :: s -> Handler s m ()

-- | Applies the provided function to the user state.
modifyState :: (s -> s) -> Handler s m ()

-- | Returns the <a>ResponseHeaders</a> stored in the current
--   <a>Handler</a>.
getResponseHeaders :: Handler s m ResponseHeaders

-- | Returns the current <a>ResponseBody</a> that this <a>Handler</a> is
--   storing.
getResponseBody :: Handler s m (ResponseBody m)

-- | Returns the bound routing parameters extracted from the routing system
--   (see <a>Airship.Route</a>).
params :: Handler s m (HashMap Text Text)
dispatchPath :: Handler s m [Text]

-- | Given a new <a>ResponseBody</a>, replaces the stored body with the new
--   one.
putResponseBody :: ResponseBody m -> Handler s m ()

-- | Stores the provided <a>ByteString</a> as the responseBody. This is a
--   shortcut for creating a response body with a <a>ResponseBuilder</a>
--   and a bytestring <a>Builder</a>.
putResponseBS :: ByteString -> Handler s m ()

-- | Immediately halts processing with the provided <a>Status</a> code. The
--   contents of the <tt>Handler'</tt>s response body will be streamed back
--   to the client. This is a shortcut for constructing a <a>Response</a>
--   with <a>getResponseHeaders</a> and <a>getResponseBody</a> and passing
--   that response to <a>finishWith</a>.
halt :: Status -> Handler m s a

-- | Immediately halts processing and writes the provided <a>Response</a>
--   back to the client.
finishWith :: Response m -> Handler s m a

-- | The <tt>#&gt;</tt> operator provides syntactic sugar for the
--   construction of association lists. For example, the following assoc
--   list:
--   
--   <pre>
--   [("run", "jewels"), ("blue", "suede"), ("zion", "wolf")]
--   </pre>
--   
--   can be represented as such:
--   
--   <pre>
--   execWriter $ do
--     "run" #&gt; "jewels"
--     "blue" #&gt; "suede"
--     "zion" #&gt; "wolf"
--   </pre>
--   
--   It used in <tt>RoutingSpec</tt> declarations to indicate that a
--   particular <tt>Route</tt> maps to a given <tt>Resource</tt>, but can
--   be used in many other places where association lists are expected,
--   such as <tt>contentTypesProvided</tt>.
(#>) :: MonadWriter [(k, v)] m => k -> v -> m ()
instance Eq ETag
instance Ord ETag
instance Monad m => Functor (Webmachine s m)
instance Monad m => Applicative (Webmachine s m)
instance Monad m => Monad (Webmachine s m)
instance MonadIO m => MonadIO (Webmachine s m)
instance MonadBase b m => MonadBase b (Webmachine s m)
instance Monad m => MonadReader (RequestReader m) (Webmachine s m)
instance Monad m => MonadWriter Trace (Webmachine s m)
instance Monad m => MonadState (ResponseState s m) (Webmachine s m)
instance MonadBaseControl b m => MonadBaseControl b (Webmachine s m)
instance MonadTrans (Webmachine s)
instance Show ETag

module Airship.Headers

-- | Adds a given <a>Header</a> to this handler's <a>ResponseState</a>.
addResponseHeader :: Header -> Handler s m ()

-- | Applies the given function to the <a>ResponseHeaders</a> present in
--   this <tt>Handler'</tt>s <a>ResponseState</a>.
modifyResponseHeaders :: (ResponseHeaders -> ResponseHeaders) -> Handler s m ()

module Airship.Resource
data Resource s m
Resource :: Handler s m Bool -> Handler s m [Method] -> Handler s m [(MediaType, Handler s m ())] -> Handler s m [(MediaType, Webmachine s m (ResponseBody m))] -> Handler s m Bool -> Handler s m Bool -> Handler s m Bool -> Handler s m Bool -> Handler s m (Maybe ETag) -> Handler s m Bool -> Handler s m Bool -> Handler s m Bool -> Handler s m Bool -> Handler s m (Maybe UTCTime) -> Handler s m Bool -> Handler s m Bool -> Handler s m (Maybe ByteString) -> Handler s m (Maybe ByteString) -> Handler s m Bool -> Handler s m Bool -> Handler s m (PostResponse s m) -> Handler s m Bool -> Handler s m Bool -> Handler s m Bool -> Handler s m Bool -> Resource s m

-- | Whether to allow HTTP POSTs to a missing resource. Default: false.
allowMissingPost :: Resource s m -> Handler s m Bool

-- | The set of HTTP methods that this resource allows. Default:
--   <tt>GET</tt> and <tt>HEAD</tt>. If a request arrives with an HTTP
--   method not included herein, <tt>501 Not Implemented</tt> is returned.
allowedMethods :: Resource s m -> Handler s m [Method]

-- | An association list of <a>MediaType</a>s and <a>Handler</a> actions
--   that correspond to the accepted <tt>Content-Type</tt> values that this
--   resource can accept in a request body. If a <tt>Content-Type</tt>
--   header is present but not accounted for in
--   <a>contentTypesAccepted</a>, processing will halt with <tt>415
--   Unsupported Media Type</tt>. Otherwise, the corresponding
--   <a>Handler</a> action will be executed and processing will continue.
contentTypesAccepted :: Resource s m -> Handler s m [(MediaType, Handler s m ())]

-- | An association list of <a>MediaType</a> values and <a>ResponseBody</a>
--   values. The response will be chosen by looking up the <a>MediaType</a>
--   that most closely matches the <tt>Content-Type</tt> header. Should
--   there be no match, processing will halt with <tt>406 Not
--   Acceptable</tt>.
contentTypesProvided :: Resource s m -> Handler s m [(MediaType, Webmachine s m (ResponseBody m))]

-- | When a <tt>DELETE</tt> request is enacted (via a <tt>True</tt> value
--   returned from <a>deleteResource</a>), a <tt>False</tt> value returns a
--   <tt>202 Accepted</tt> response. Returning <tt>True</tt> will continue
--   processing, usually ending up with a <tt>204 No Content</tt> response.
--   Default: False.
deleteCompleted :: Resource s m -> Handler s m Bool

-- | When processing a <tt>DELETE</tt> request, a <tt>True</tt> value
--   allows processing to continue. Returns <tt>500 Forbidden</tt> if
--   False. Default: false.
deleteResource :: Resource s m -> Handler s m Bool

-- | Returns <tt>413 Request Entity Too Large</tt> if true. Default: false.
entityTooLarge :: Resource s m -> Handler s m Bool

-- | Checks if the given request is allowed to access this resource.
--   Returns <tt>403 Forbidden</tt> if true. Default: false.
forbidden :: Resource s m -> Handler s m Bool

-- | If this returns a non-<a>Nothing</a> <a>ETag</a>, its value will be
--   added to every HTTP response in the <tt>ETag:</tt> field.
generateETag :: Resource s m -> Handler s m (Maybe ETag)

-- | Checks if this resource has actually implemented a handler for a given
--   HTTP method. Returns <tt>501 Not Implemented</tt> if false. Default:
--   true.
implemented :: Resource s m -> Handler s m Bool

-- | Returns <tt>401 Unauthorized</tt> if false. Default: true.
isAuthorized :: Resource s m -> Handler s m Bool

-- | When processing <tt>PUT</tt> requests, a <tt>True</tt> value returned
--   here will halt processing with a <tt>409 Created</tt>.
isConflict :: Resource s m -> Handler s m Bool

-- | Returns <tt>415 Unsupported Media Type</tt> if false. We recommend you
--   use the <tt>contentTypeMatches</tt> helper function, which accepts a
--   list of <a>MediaType</a> values, so as to simplify proper MIME type
--   handling. Default: true.
knownContentType :: Resource s m -> Handler s m Bool

-- | In the presence of an <tt>If-Modified-Since</tt> header, returning a
--   <tt>Just</tt> value from <tt>lastModifed</tt> allows the server to
--   halt with <tt>304 Not Modified</tt> if appropriate.
lastModified :: Resource s m -> Handler s m (Maybe UTCTime)

-- | If an <tt>Accept-Language</tt> value is present in the HTTP request,
--   and this function returns <tt>False</tt>, processing will halt with
--   <tt>406 Not Acceptable</tt>.
languageAvailable :: Resource s m -> Handler s m Bool

-- | Returns <tt>400 Bad Request</tt> if true. Default: false.
malformedRequest :: Resource s m -> Handler s m Bool

-- | When processing a resource for which <a>resourceExists</a> returned
--   <tt>False</tt>, returning a <tt>Just</tt> value halts with a <tt>301
--   Moved Permanently</tt> response. The contained <a>ByteString</a> will
--   be added to the HTTP response under the <tt>Location:</tt> header.
movedPermanently :: Resource s m -> Handler s m (Maybe ByteString)

-- | Like <a>movedPermanently</a>, except with a <tt>307 Moved
--   Temporarily</tt> response.
movedTemporarily :: Resource s m -> Handler s m (Maybe ByteString)

-- | When handling a <tt>PUT</tt> request, returning <tt>True</tt> here
--   halts processing with <tt>300 Multiple Choices</tt>. Default: False.
multipleChoices :: Resource s m -> Handler s m Bool

-- | When processing a request for which <a>resourceExists</a> returned
--   <tt>False</tt>, returning <tt>True</tt> here allows the
--   <a>movedPermanently</a> and <a>movedTemporarily</a> functions to
--   process the request.
previouslyExisted :: Resource s m -> Handler s m Bool

-- | When handling <tt>POST</tt> requests, the value returned determines
--   whether to treat the request as a <tt>PUT</tt>, a <tt>PUT</tt> and a
--   redirect, or a plain <tt>POST</tt>. See the documentation for
--   <a>PostResponse</a> for more information. The default implemetation
--   returns a <a>PostProcess</a> with an empty handler.
processPost :: Resource s m -> Handler s m (PostResponse s m)

-- | Does the resource at this path exist? Returning false from this
--   usually entails a <tt>404 Not Found</tt> response. (If
--   <a>allowMissingPost</a> returns <tt>True</tt> or an <tt>If-Match:
--   *</tt> header is present, it may not).
resourceExists :: Resource s m -> Handler s m Bool

-- | Returns <tt>503 Service Unavailable</tt> if false. Default: true.
serviceAvailable :: Resource s m -> Handler s m Bool

-- | Returns <tt>414 Request URI Too Long</tt> if true. Default: false.
uriTooLong :: Resource s m -> Handler s m Bool

-- | Returns <tt>501 Not Implemented</tt> if false. Default: true.
validContentHeaders :: Resource s m -> Handler s m Bool

-- | Used when processing POST requests so as to handle the outcome of the
--   binary decisions between handling a POST as a create request and
--   whether to redirect after the POST is done. Credit for this idea goes
--   to Richard Wallace (purefn) on Webcrank.
data PostResponse s m

-- | Treat this request as a PUT.
PostCreate :: [Text] -> PostResponse s m

-- | Treat this request as a PUT, then redirect.
PostCreateRedirect :: [Text] -> PostResponse s m

-- | Process as a POST, but don't redirect.
PostProcess :: (Handler s m ()) -> PostResponse s m

-- | Process and redirect.
PostProcessRedirect :: (Handler s m ByteString) -> PostResponse s m

-- | A helper function that terminates execution with <tt>500 Internal
--   Server Error</tt>.
serverError :: Handler m s a

-- | The default Airship resource, with "sensible" values filled in for
--   each entry. You construct new resources by extending the default
--   resource with your own handlers.
defaultResource :: Resource s m

module Airship.Resource.Static
data FileInfo
FileInfo :: FilePath -> Integer -> UTCTime -> ETag -> FileInfo
_path :: FileInfo -> FilePath
_size :: FileInfo -> Integer
_lastModified :: FileInfo -> UTCTime
_etag :: FileInfo -> ETag
data StaticOptions
Cache :: StaticOptions
NoCache :: StaticOptions
staticResource :: StaticOptions -> FilePath -> IO (Resource s m)
allFilesAtRoot :: FilePath -> IO [FilePath]
epochToUTCTime :: EpochTime -> UTCTime
directoryTree :: FilePath -> IO FileTree
instance Show FileInfo
instance Eq FileInfo
instance Ord FileInfo
instance Eq StaticOptions

module Airship.Route

-- | <a>Route</a>s represent chunks of text used to match over URLs. You
--   match hardcoded paths with string literals (and the
--   <tt>-XOverloadedStrings</tt> extension), named variables with the
--   <a>var</a> combinator, and wildcards with <a>star</a>.
data Route

-- | Represents a fully-specified set of routes that map paths (represented
--   as <a>Route</a>s) to <a>Resource</a>s. <a>RoutingSpec</a>s are
--   declared with do-notation, to wit:
--   
--   <pre>
--   myRoutes :: RoutingSpec MyState IO ()
--   myRoutes = do
--     root                                 #&gt; myRootResource
--     "blog" <a>&lt;/&gt;</a> var "date" <a>&lt;/&gt;</a> var "post" #&gt; blogPostResource
--     "about"                              #&gt; aboutResource
--     "anything" <a>&lt;/&gt;</a> star                  #&gt; wildcardResource
--   </pre>
data RoutingSpec s m a

-- | Represents the root resource (<tt>/</tt>). This should usually be the
--   first path declared in a <a>RoutingSpec</a>.
root :: Route

-- | Captures a named in a route and adds it to the <tt>routingParams</tt>
--   hashmap under the provided <a>Text</a> value. For example,
--   
--   <pre>
--   "blog" <a>&lt;/&gt;</a> <a>var</a> "date" <a>&lt;/&gt;</a> <a>var</a> "post"
--   </pre>
--   
--   will capture all URLs of the form <tt>/blog/$date/$post</tt>, and add
--   <tt>date</tt> and <tt>post</tt> to the <tt>routingParams</tt>
--   contained within the resource this route maps to.
var :: Text -> Route

-- | Captures a wildcard route. For example,
--   
--   <pre>
--   "emcees" <a>&lt;/&gt;</a> star
--   </pre>
--   
--   will match <tt>/emcees</tt>, <tt>/emcees/biggie</tt>,
--   <tt>/emcees/earl/vince</tt>, and so on and so forth.
star :: Route

-- | <tt>a <a>&lt;/&gt;</a> b</tt> separates the path components <tt>a</tt>
--   and <tt>b</tt> with a slash. This is actually just a synonym for
--   <a>mappend</a>.
(</>) :: Route -> Route -> Route

-- | The <tt>#&gt;</tt> operator provides syntactic sugar for the
--   construction of association lists. For example, the following assoc
--   list:
--   
--   <pre>
--   [("run", "jewels"), ("blue", "suede"), ("zion", "wolf")]
--   </pre>
--   
--   can be represented as such:
--   
--   <pre>
--   execWriter $ do
--     "run" #&gt; "jewels"
--     "blue" #&gt; "suede"
--     "zion" #&gt; "wolf"
--   </pre>
--   
--   It used in <tt>RoutingSpec</tt> declarations to indicate that a
--   particular <tt>Route</tt> maps to a given <tt>Resource</tt>, but can
--   be used in many other places where association lists are expected,
--   such as <tt>contentTypesProvided</tt>.
(#>) :: MonadWriter [(k, v)] m => k -> v -> m ()

module Airship.Helpers

-- | Returns <tt>True</tt> if the request's <tt>Content-Type</tt> header is
--   one of the provided media types. If the <tt>Content-Type</tt> header
--   is not present, this function will return True.
contentTypeMatches :: [MediaType] -> Handler s m Bool

-- | Construct an Airship <a>Request</a> from a WAI request.
fromWaiRequest :: Request -> Request IO

-- | Given a <a>RoutingSpec</a>, a 404 resource, and a user state
--   <tt>s</tt>, construct a WAI <tt>Application</tt>.
resourceToWai :: RoutingSpec s IO () -> Resource s IO -> s -> Application

module Airship
