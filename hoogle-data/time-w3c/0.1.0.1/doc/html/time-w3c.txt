-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parse, format and convert W3C Date and Time
--   
--   This package provides functionalities to parse and format W3C Date and
--   Time. The package can also be used to convert it from/to
--   <a>Data.Time.Calendar.Day</a> and
--   <a>Data.Time.LocalTime.ZonedTime</a>. See:
--   <a>http://www.w3.org/TR/NOTE-datetime</a>
@package time-w3c
@version 0.1.0.1


-- | Data types defined by this package.
module Data.Time.W3C.Types

-- | <a>W3CDateTime</a> represents a W3C Date and Time format.
--   
--   The field <a>w3cYear</a> is mandatory while other fields are optional.
--   But you should be careful about combinations of such optional fields.
--   No combinations are allowed except for the following list:
--   
--   <ul>
--   <li>YYYY</li>
--   <li>YYYY-MM</li>
--   <li>YYYY-MM-DD</li>
--   <li>YYYY-MM-DDThh:mmTZD</li>
--   <li>YYYY-MM-DDThh:mm:ss.sTZD</li>
--   </ul>
--   
--   This data type is <i>partially ordered</i> so we can't make it an
--   instance of Ord (e.g. <tt>"2010"</tt> and <tt>"2010-01"</tt> can't be
--   compared).
data W3CDateTime
W3CDateTime :: !Integer -> !Maybe Int -> !Maybe Int -> !Maybe Int -> !Maybe Int -> !Maybe Pico -> !Maybe TimeZone -> W3CDateTime
w3cYear :: W3CDateTime -> !Integer
w3cMonth :: W3CDateTime -> !Maybe Int
w3cDay :: W3CDateTime -> !Maybe Int
w3cHour :: W3CDateTime -> !Maybe Int
w3cMinute :: W3CDateTime -> !Maybe Int
w3cSecond :: W3CDateTime -> !Maybe Pico
w3cTimeZone :: W3CDateTime -> !Maybe TimeZone
instance Typeable W3CDateTime
instance Show W3CDateTime
instance Eq W3CDateTime
instance Convertible W3CDateTime ZonedTime
instance Convertible ZonedTime W3CDateTime
instance Convertible W3CDateTime Day
instance Convertible Day W3CDateTime
instance Convertible W3CDateTime W3CDateTime


-- | W3C Date and Time parser combinator for <a>Text.Parsec</a>.
module Data.Time.W3C.Parser.Parsec

-- | This is a parser combinator for <a>Text.Parsec</a>.
w3cDateTime :: Stream s m Char => ParsecT s u m W3CDateTime


-- | Parse W3C Date and Time string.
module Data.Time.W3C.Parser

-- | Parse W3C Date and Time string to anything convertible from
--   <a>W3CDateTime</a> type. The most obvious acceptable type is the
--   <a>W3CDateTime</a> itself. If the given string is ill-formatted,
--   <a>parse</a> returns <a>Nothing</a>.
parse :: Convertible W3CDateTime t => String -> Maybe t


-- | Format W3C Date and Time strings.
module Data.Time.W3C.Format

-- | Format W3C Date and Time string from anything convertible to
--   <a>W3CDateTime</a> type. The most obvious acceptable type is the
--   <a>W3CDateTime</a> itself.
format :: Convertible t W3CDateTime => t -> String


-- | This package provides functionalities to parse and format W3C Date and
--   Time. The package can also be used to convert it from/to
--   <tt>Data.Time.Calendar.Day</tt> and
--   <tt>Data.Time.LocalTime.ZonedTime</tt>.
--   
--   See: <a>http://www.w3.org/TR/NOTE-datetime</a>
module Data.Time.W3C

-- | <a>W3CDateTime</a> represents a W3C Date and Time format.
--   
--   The field <a>w3cYear</a> is mandatory while other fields are optional.
--   But you should be careful about combinations of such optional fields.
--   No combinations are allowed except for the following list:
--   
--   <ul>
--   <li>YYYY</li>
--   <li>YYYY-MM</li>
--   <li>YYYY-MM-DD</li>
--   <li>YYYY-MM-DDThh:mmTZD</li>
--   <li>YYYY-MM-DDThh:mm:ss.sTZD</li>
--   </ul>
--   
--   This data type is <i>partially ordered</i> so we can't make it an
--   instance of Ord (e.g. <tt>"2010"</tt> and <tt>"2010-01"</tt> can't be
--   compared).
data W3CDateTime
W3CDateTime :: !Integer -> !Maybe Int -> !Maybe Int -> !Maybe Int -> !Maybe Int -> !Maybe Pico -> !Maybe TimeZone -> W3CDateTime
w3cYear :: W3CDateTime -> !Integer
w3cMonth :: W3CDateTime -> !Maybe Int
w3cDay :: W3CDateTime -> !Maybe Int
w3cHour :: W3CDateTime -> !Maybe Int
w3cMinute :: W3CDateTime -> !Maybe Int
w3cSecond :: W3CDateTime -> !Maybe Pico
w3cTimeZone :: W3CDateTime -> !Maybe TimeZone

-- | Format W3C Date and Time string from anything convertible to
--   <a>W3CDateTime</a> type. The most obvious acceptable type is the
--   <a>W3CDateTime</a> itself.
format :: Convertible t W3CDateTime => t -> String

-- | Parse W3C Date and Time string to anything convertible from
--   <a>W3CDateTime</a> type. The most obvious acceptable type is the
--   <a>W3CDateTime</a> itself. If the given string is ill-formatted,
--   <a>parse</a> returns <a>Nothing</a>.
parse :: Convertible W3CDateTime t => String -> Maybe t
