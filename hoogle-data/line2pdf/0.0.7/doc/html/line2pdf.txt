-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple command-line utility to convert text into PDF
--   
--   Simple command-line utility to convert text into PDF
@package line2pdf
@version 0.0.7

module Text.LineToPDF.Internals
__POS__ :: IORef Int
__OBJ__ :: IORef Int
__LOC__ :: IORef (IntMap String)
__PAGE__ :: IORef [Obj]
data Encoding
Latin :: Encoding
Big5 :: Encoding
GBK :: Encoding
EUC_JP :: Encoding
EUC_KR :: Encoding
ShiftJIS :: Encoding
data AppConfig
MkAppConfig :: Int -> Int -> Float -> [Encoding] -> [a] -> (a -> IO ()) -> (Char -> a -> a) -> (a -> Int) -> (a -> Char) -> AppConfig
pageWidth :: AppConfig -> Int
pageHeight :: AppConfig -> Int
ptSize :: AppConfig -> Float
encodings :: AppConfig -> [Encoding]
srcLines :: AppConfig -> [a]
srcPut :: AppConfig -> a -> IO ()
srcEscape :: AppConfig -> Char -> a -> a
srcLength :: AppConfig -> a -> Int
srcHead :: AppConfig -> a -> Char
defaultConfig :: Encoding -> ByteString -> AppConfig
type M = IO
type Obj = Int
lineToPDF :: AppConfig -> IO ()
writeObj :: Obj -> M a -> M a
writeLocations :: M ()
printObj :: String -> M Obj
writeHeader :: [Encoding] -> M (Obj, Obj, Obj, Obj)
baseFonts :: [String]
pr :: String -> M ()
currentLocation :: IO Int
newRef :: a -> M (IORef a)
readRef :: IORef a -> M a
writeRef :: IORef a -> a -> M ()
modifyRef :: IORef a -> (a -> a) -> M ()
incrObj :: M Obj
markObj :: (Obj -> M a) -> M a
markLocation :: Obj -> M ()
fontOf :: Encoding -> String
startPage :: (?tPages :: Obj, ?resources :: Obj) => AppConfig -> M Int
endPage :: Int -> M ()
writePages :: (?tPages :: Obj, ?resources :: Obj) => AppConfig -> M [Obj]
strDefaultEncoding :: String
data FontConfig
MkFontConfig :: String -> String -> String -> String -> String -> String -> FontConfig
encoding :: FontConfig -> String
cidFontType :: FontConfig -> String
ordering :: FontConfig -> String
supplement :: FontConfig -> String
wBox :: FontConfig -> String
descriptor :: FontConfig -> String
writeFontsShiftJIS :: M [String]
writeFontsEUC_JP :: M [String]
writeFontsEUC_KR :: M [String]
writeFontsGBK :: M [String]
writeFontsBig5 :: M [String]
fontFamily :: Int -> String -> [(Int, String)]
fontsEUC_JP :: [(Int, String)]
fontsShiftJIS :: [(Int, String)]
fontsBig5 :: [(Int, String)]
fontsGBK :: [(Int, String)]
fontsEUC_KR :: [(Int, String)]

module Text.LineToPDF
