-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | OpenGL support for the `vect' low-dimensional linear algebra library.
--   
--   OpenGL support for the <a>vect</a> low-dimensional linear algebra
--   library.
@package vect-opengl
@version 0.4.6


-- | OpenGL support, including <a>Vertex</a>, <a>TexCoord</a>, etc
--   instances for <a>Vec2</a>, <a>Vec3</a> and <a>Vec4</a>.
module Data.Vect.Double.OpenGL
type GLflt = GLdouble
glflt :: Double -> GLflt
unflt :: GLflt -> Double

-- | There should be a big warning here about the different conventions,
--   hidden transpositions, and all the confusion this will inevitably
--   cause...
--   
--   As it stands,
--   
--   <pre>
--   glRotate t1 axis1 &gt;&gt; glRotate t2 axis2 &gt;&gt; glRotate t3 axis3
--   </pre>
--   
--   has the same result as
--   
--   <pre>
--   multMatrix (rotMatrixProj4 t3 axis3 .*. rotMatrixProj4 t2 axis2 .*. rotMatrixProj4 t1 axis1)
--   </pre>
--   
--   because at the interface of OpenGL and this library there is a
--   transposition to compensate for the different conventions. (This
--   transposition is implicit in the code, because the way the matrices
--   are stored in the memory is also different: OpenGL stores them
--   column-major, and we store them row-major).
class ToOpenGLMatrix m
makeGLMatrix :: ToOpenGLMatrix m => m -> IO (GLmatrix GLflt)
class FromOpenGLMatrix m
peekGLMatrix :: FromOpenGLMatrix m => GLmatrix GLflt -> IO m
setMatrix :: ToOpenGLMatrix m => Maybe MatrixMode -> m -> IO ()
getMatrix :: FromOpenGLMatrix m => Maybe MatrixMode -> IO m
matrix :: (ToOpenGLMatrix m, FromOpenGLMatrix m) => Maybe MatrixMode -> StateVar m
currentMatrix :: (ToOpenGLMatrix m, FromOpenGLMatrix m) => StateVar m
multMatrix :: ToOpenGLMatrix m => m -> IO ()
radianToDegrees :: RealFrac a => a -> a
degreesToRadian :: Floating a => a -> a

-- | The angle is in radians. (WARNING: OpenGL uses degrees!)
glRotate :: Double -> Vec3 -> IO ()
glTranslate :: Vec3 -> IO ()
glScale3 :: Vec3 -> IO ()
glScale :: Double -> IO ()

-- | "Orthogonal projecton" matrix, a la OpenGL (the corresponding
--   functionality is removed in OpenGL 3.1)
orthoMatrix :: (Double, Double) -> (Double, Double) -> (Double, Double) -> Mat4

-- | The same as <a>orthoMatrix</a>, but with a different parametrization.
orthoMatrix2 :: Vec3 -> Vec3 -> Mat4

-- | "Perspective projecton" matrix, a la OpenGL (the corresponding
--   functionality is removed in OpenGL 3.1).
frustumMatrix :: (Double, Double) -> (Double, Double) -> (Double, Double) -> Mat4

-- | The same as <a>frustumMatrix</a>, but with a different
--   parametrization.
frustumMatrix2 :: Vec3 -> Vec3 -> Mat4

-- | Inverse of <a>frustumMatrix</a>.
inverseFrustumMatrix :: (Double, Double) -> (Double, Double) -> (Double, Double) -> Mat4
class VertexAttrib' a
vertexAttrib :: VertexAttrib' a => AttribLocation -> a -> IO ()
instance VertexAttrib' Normal4
instance VertexAttrib' Normal3
instance VertexAttrib' Normal2
instance VertexAttrib' Vec4
instance VertexAttrib' Vec3
instance VertexAttrib' Vec2
instance VertexAttrib' Double
instance TexCoord Vec4
instance TexCoord Vec3
instance TexCoord Vec2
instance SecondaryColor Vec3
instance Color Vec4
instance Color Vec3
instance Normal Vec3
instance Normal Normal3
instance Vertex Vec4
instance Vertex Vec3
instance Vertex Vec2
instance ToOpenGLMatrix Proj3
instance ToOpenGLMatrix Proj4
instance ToOpenGLMatrix Ortho2
instance ToOpenGLMatrix Ortho3
instance ToOpenGLMatrix Ortho4
instance ToOpenGLMatrix Mat2
instance ToOpenGLMatrix Mat3
instance FromOpenGLMatrix Mat4
instance ToOpenGLMatrix Mat4


-- | OpenGL support, including <a>Vertex</a>, <a>TexCoord</a>, etc
--   instances for <a>Vec2</a>, <a>Vec3</a> and <a>Vec4</a>.
module Data.Vect.Float.OpenGL
type GLflt = GLfloat
glflt :: Float -> GLflt
unflt :: GLflt -> Float

-- | There should be a big warning here about the different conventions,
--   hidden transpositions, and all the confusion this will inevitably
--   cause...
--   
--   As it stands,
--   
--   <pre>
--   glRotate t1 axis1 &gt;&gt; glRotate t2 axis2 &gt;&gt; glRotate t3 axis3
--   </pre>
--   
--   has the same result as
--   
--   <pre>
--   multMatrix (rotMatrixProj4 t3 axis3 .*. rotMatrixProj4 t2 axis2 .*. rotMatrixProj4 t1 axis1)
--   </pre>
--   
--   because at the interface of OpenGL and this library there is a
--   transposition to compensate for the different conventions. (This
--   transposition is implicit in the code, because the way the matrices
--   are stored in the memory is also different: OpenGL stores them
--   column-major, and we store them row-major).
class ToOpenGLMatrix m
makeGLMatrix :: ToOpenGLMatrix m => m -> IO (GLmatrix GLflt)
class FromOpenGLMatrix m
peekGLMatrix :: FromOpenGLMatrix m => GLmatrix GLflt -> IO m
setMatrix :: ToOpenGLMatrix m => Maybe MatrixMode -> m -> IO ()
getMatrix :: FromOpenGLMatrix m => Maybe MatrixMode -> IO m
matrix :: (ToOpenGLMatrix m, FromOpenGLMatrix m) => Maybe MatrixMode -> StateVar m
currentMatrix :: (ToOpenGLMatrix m, FromOpenGLMatrix m) => StateVar m
multMatrix :: ToOpenGLMatrix m => m -> IO ()
radianToDegrees :: RealFrac a => a -> a
degreesToRadian :: Floating a => a -> a

-- | The angle is in radians. (WARNING: OpenGL uses degrees!)
glRotate :: Float -> Vec3 -> IO ()
glTranslate :: Vec3 -> IO ()
glScale3 :: Vec3 -> IO ()
glScale :: Float -> IO ()

-- | "Orthogonal projecton" matrix, a la OpenGL (the corresponding
--   functionality is removed in OpenGL 3.1)
orthoMatrix :: (Float, Float) -> (Float, Float) -> (Float, Float) -> Mat4

-- | The same as <a>orthoMatrix</a>, but with a different parametrization.
orthoMatrix2 :: Vec3 -> Vec3 -> Mat4

-- | "Perspective projecton" matrix, a la OpenGL (the corresponding
--   functionality is removed in OpenGL 3.1).
frustumMatrix :: (Float, Float) -> (Float, Float) -> (Float, Float) -> Mat4

-- | The same as <a>frustumMatrix</a>, but with a different
--   parametrization.
frustumMatrix2 :: Vec3 -> Vec3 -> Mat4

-- | Inverse of <a>frustumMatrix</a>.
inverseFrustumMatrix :: (Float, Float) -> (Float, Float) -> (Float, Float) -> Mat4
class VertexAttrib' a
vertexAttrib :: VertexAttrib' a => AttribLocation -> a -> IO ()
instance Uniform Vec4
instance Uniform Vec3
instance Uniform Vec2
instance Uniform Float
instance VertexAttrib' Normal4
instance VertexAttrib' Normal3
instance VertexAttrib' Normal2
instance VertexAttrib' Vec4
instance VertexAttrib' Vec3
instance VertexAttrib' Vec2
instance VertexAttrib' Float
instance TexCoord Vec4
instance TexCoord Vec3
instance TexCoord Vec2
instance SecondaryColor Vec3
instance Color Vec4
instance Color Vec3
instance Normal Vec3
instance Normal Normal3
instance Vertex Vec4
instance Vertex Vec3
instance Vertex Vec2
instance ToOpenGLMatrix Proj3
instance ToOpenGLMatrix Proj4
instance ToOpenGLMatrix Ortho2
instance ToOpenGLMatrix Ortho3
instance ToOpenGLMatrix Ortho4
instance ToOpenGLMatrix Mat2
instance ToOpenGLMatrix Mat3
instance FromOpenGLMatrix Mat4
instance ToOpenGLMatrix Mat4
