-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell 98 invariant functors
--   
@package invariant
@version 0.1.2

module Data.Functor.Invariant

-- | Any <tt>*-&gt;*</tt> type parametric in the argument permits an
--   instance of <tt>Invariant</tt>.
--   
--   Instances should satisfy the following laws:
--   
--   <pre>
--   invmap id id = id
--   invmap f2 f2' . invmap f1 f1' = invmap (f2 . f1) (f1' . f2')
--   </pre>
class Invariant f
invmap :: Invariant f => (a -> b) -> (b -> a) -> f a -> f b

-- | Any <tt>*-&gt;*-&gt;*</tt> type parametric in both arguments permits
--   an instance of <tt>Invariant2</tt>.
--   
--   Instances should satisfy the following laws:
--   
--   <pre>
--   invmap2 id id id id = id
--   invmap2 f2 f2' g2 g2' . invmap2 f1 f1' g1 g1' =
--     invmap2 (f2 . f1) (f1' . f2') (g2 . g1) (g1' . g2')
--   </pre>
class Invariant2 f
invmap2 :: Invariant2 f => (a -> c) -> (c -> a) -> (b -> d) -> (d -> b) -> f a b -> f c d
instance (Invariant f, Invariant g) => Invariant (ComposeFC f g)
instance (Invariant f, Invariant g) => Invariant (ComposeCF f g)
instance (Invariant f, Invariant g) => Invariant (Compose f g)
instance Invariant2 Op
instance Invariant (Op a)
instance Invariant Equivalence
instance Invariant Comparison
instance Invariant Predicate
instance Invariant Endo
instance Invariant Dual
instance Arrow arr => Invariant2 (WrappedArrow arr)
instance Invariant2 Const
instance Arrow arr => Invariant (WrappedArrow arr a)
instance Monad m => Invariant (WrappedMonad m)
instance Invariant ZipList
instance Invariant (Const a)
instance Invariant2 ((,,,,) a b c)
instance Invariant2 ((,,,) a b)
instance Invariant2 ((,,) a)
instance Invariant2 (,)
instance Invariant2 Either
instance Invariant2 (->)
instance Invariant ((,,,,) a b c d)
instance Invariant ((,,,) a b c)
instance Invariant ((,,) a b)
instance Invariant ((,) a)
instance Invariant (Either a)
instance Invariant ((->) a)
instance Invariant ReadPrec
instance Invariant ReadP
instance Invariant (ST s)
instance Invariant IO
instance Invariant []
instance Invariant Maybe
