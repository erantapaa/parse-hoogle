-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wrapper over xml to extract data from parsed xml
--   
@package xml-extractors
@version 0.4.0.0

module Text.XML.Light.Extractors.Internal.Result

-- | <a>Result</a> is like <a>Either</a> but with two error states,
--   <a>Fail</a> and <a>Fatal</a>.
--   
--   <a>Fail</a> is precisely analogous to <a>Left</a> while <a>Fatal</a>
--   has short cut semantics for <a>Alternative</a>.
--   
--   The idea is that <a>Fatal</a> errors cannot be circumvented by
--   <a>&lt;|&gt;</a> etc.
data Result e a
Fatal :: e -> Result e a
Fail :: e -> Result e a
Ok :: a -> Result e a

-- | Maps <a>Fail</a> and <a>Fatal</a> to <a>Left</a>.
toEither :: Result a b -> Either a b

-- | Maps <a>Fail</a> to <a>Fatal</a>.
escalate :: Result e a -> Result e a
data ResultT e m a
runResultT :: ResultT e m a -> m (Result e a)
throwError :: (Error e, Monad m) => e -> ResultT e m a
throwFatal :: (Error e, Monad m) => e -> ResultT e m a
mapResult :: (Functor m, Monad m) => (Result e1 a1 -> Result e a) -> ResultT e1 m a1 -> ResultT e m a

-- | Lift a computation from the argument monad to the constructed monad.
lift :: MonadTrans t => forall (m :: * -> *) a. Monad m => m a -> t m a
instance (Show e, Show a) => Show (Result e a)
instance Error e => MonadTrans (ResultT e)
instance (Functor m, Monad m, Error e) => Alternative (ResultT e m)
instance (Monad m, Error e) => Monad (ResultT e m)
instance (Error e, Monad m) => MonadPlus (ResultT e m)
instance (Functor m, Monad m) => Applicative (ResultT e m)
instance Functor m => Functor (ResultT e m)
instance Monad (Result e)
instance Error e => Alternative (Result e)
instance Applicative (Result e)
instance Functor (Result e)

module Text.XML.Light.Extractors.Internal

-- | Location for some content.
--   
--   For now it is a reversed list of content indices (starting at 1) and
--   element names. This may change to something less "stringly typed".
type Path = [String]

-- | Extraction errors.
data Err

-- | Some expected content is missing
ErrExpectContent :: String -> Content -> Err
expectedContent :: Err -> String
foundContent :: Err -> Content

-- | An expected attribute is missing
ErrExpectAttrib :: String -> Element -> Err

-- | name of expected attribute
expectedAttrib :: Err -> String

-- | element with missing attribute
atElement :: Err -> Element

-- | An attribute value was bad
ErrAttribValue :: String -> String -> Element -> Err

-- | description of expected value
expectedValue :: Err -> String

-- | the value found
foundValue :: Err -> String

-- | element with missing attribute
atElement :: Err -> Element

-- | Expected end of contents
ErrEnd :: Content -> Err
foundContent :: Err -> Content

-- | Unexpected end of contents
ErrNull :: String -> Err
expectedContent :: Err -> String
ErrMsg :: String -> Err

-- | Error with a context.
data ExtractionErr
ExtractionErr :: Err -> Path -> ExtractionErr
err :: ExtractionErr -> Err
context :: ExtractionErr -> Path
type ElementExtractor a = ReaderT (Path, Element) (ResultT ExtractionErr Identity) a
runElementExtractor :: ElementExtractor a -> Element -> Path -> Result ExtractionErr a
attrib :: String -> ElementExtractor String
attribAs :: String -> (String -> Either String a) -> ElementExtractor a
children :: ContentsExtractor a -> ElementExtractor a
contents :: ContentsExtractor a -> ElementExtractor a
type ContentsExtractor a = StateT Ctx (ResultT ExtractionErr Identity) a
runContentsExtractor :: ContentsExtractor a -> [Content] -> Int -> Path -> Result ExtractionErr (a, Ctx)
element :: String -> ElementExtractor a -> ContentsExtractor a
text :: ContentsExtractor String
textAs :: (String -> Either Err a) -> ContentsExtractor a
anyContent :: ContentsExtractor Content
eoc :: ContentsExtractor ()
instance Show Err
instance Show ExtractionErr
instance Error ExtractionErr


-- | This module provides functions to translate errors into strings.
module Text.XML.Light.Extractors.ShowErr

-- | Converts an extraction error to a multi line string message.
--   
--   Paths are shown according to <a>showPath</a>.
showExtractionErr :: ExtractionErr -> String
showErr :: Err -> String

-- | Paths will show like this:
--   
--   <pre>
--   1/foo/2/bar/@x
--   </pre>
--   
--   which represents the "x" attribute of the "bar" element, which is the
--   second content of the "foo" element which is the first content from
--   the root.
showPath :: Path -> String

module Text.XML.Light.Extractors.Extra

-- | Reads a floating point value or return <tt><a>Left</a> "float"</tt> if
--   the read fails.
float :: (Floating a, Read a) => String -> Either String a

-- | Reads an integer value or return <tt><a>Left</a> "integer"</tt> if the
--   read fails.
integer :: (Integral a, Read a) => String -> Either String a


-- | Functions to extract data from parsed XML.
--   
--   <h1>Example</h1>
--   
--   Suppose you have an xml file of books like this:
--   
--   <pre>
--   &lt;?xml version="1.0"?&gt;
--   &lt;library&gt;
--     &lt;book id="1" isbn="23234-1"&gt;
--       &lt;author&gt;John Doe&lt;/author&gt;
--       &lt;title&gt;Some book&lt;/title&gt;
--     &lt;/book&gt;
--     &lt;book id="2"&gt;
--       &lt;author&gt;You&lt;/author&gt;
--       &lt;title&gt;The Great Event&lt;/title&gt;
--     &lt;/book&gt;
--     ...
--   &lt;/library&gt;
--   </pre>
--   
--   And a data type for a book:
--   
--   <pre>
--   data Book = Book { bookId        :: Int
--                    , isbn          :: Maybe String
--                    , author, title :: String
--                    }
--   </pre>
--   
--   You can parse the xml file into a generic tree structure using
--   <a>parseXMLDoc</a> from the <tt>xml</tt> package.
--   
--   Using this library one can define extractors to extract data from the
--   generic tree.
--   
--   <pre>
--   library = <a>element</a> "library" $ <a>children</a> $ <a>only</a> $ <a>many</a> book
--   
--   book = <a>element</a> "book" $ do
--            i &lt;- <a>attribAs</a> "id" <a>integer</a>
--            s &lt;- <a>optional</a> (<a>attrib</a> "isbn")
--            <a>children</a> $ do
--              a &lt;- <a>element</a> "author" $ <a>contents</a> $ <a>text</a>
--              t &lt;- <a>element</a> "title" $ <a>contents</a> $ <a>text</a>
--              return $ Book { bookId = i, author = a, title = t, isbn = s }
--   
--   extractLibrary :: <a>Element</a> -&gt; <a>Either</a> <a>ExtractionErr</a> [Book]
--   extractLibrary = <a>extractDocContents</a> library
--   </pre>
--   
--   <h1>Notes</h1>
--   
--   <ul>
--   <li>The <a>only</a> combinator can be used to exhaustively extract
--   contents.</li>
--   <li>The <a>Control.Applicative</a> module contains some useful
--   combinators like <a>optional</a>, <a>many</a> and
--   <a>&lt;|&gt;</a>.</li>
--   <li>The <a>Text.XML.Light.Extractors.ShowErr</a> contains some
--   predefined functions to convert error values to strings.</li>
--   </ul>
module Text.XML.Light.Extractors

-- | Location for some content.
--   
--   For now it is a reversed list of content indices (starting at 1) and
--   element names. This may change to something less "stringly typed".
type Path = [String]

-- | Extraction errors.
data Err

-- | Some expected content is missing
ErrExpectContent :: String -> Content -> Err
expectedContent :: Err -> String
foundContent :: Err -> Content

-- | An expected attribute is missing
ErrExpectAttrib :: String -> Element -> Err

-- | name of expected attribute
expectedAttrib :: Err -> String

-- | element with missing attribute
atElement :: Err -> Element

-- | An attribute value was bad
ErrAttribValue :: String -> String -> Element -> Err

-- | description of expected value
expectedValue :: Err -> String

-- | the value found
foundValue :: Err -> String

-- | element with missing attribute
atElement :: Err -> Element

-- | Expected end of contents
ErrEnd :: Content -> Err
foundContent :: Err -> Content

-- | Unexpected end of contents
ErrNull :: String -> Err
expectedContent :: Err -> String
ErrMsg :: String -> Err

-- | Error with a context.
data ExtractionErr
ExtractionErr :: Err -> Path -> ExtractionErr
err :: ExtractionErr -> Err
context :: ExtractionErr -> Path
data ElementExtractor a

-- | <tt>extractElement p element</tt> extracts <tt>element</tt> with
--   <tt>p</tt>.
extractElement :: ElementExtractor a -> Element -> Either ExtractionErr a

-- | <tt>attrib name</tt> extracts the value of attribute <tt>name</tt>.
attrib :: String -> ElementExtractor String

-- | <tt>attribAs name f</tt> extracts the value of attribute <tt>name</tt>
--   and runs it through a conversion/validation function.
--   
--   The conversion function takes a string with the value and returns
--   either a description of the expected format of the value or the
--   converted value.
attribAs :: String -> (String -> Either String a) -> ElementExtractor a

-- | <tt>children p</tt> extract only child elements with <tt>p</tt>.
children :: ContentsExtractor a -> ElementExtractor a

-- | <tt>contents p</tt> extract contents with <tt>p</tt>.
contents :: ContentsExtractor a -> ElementExtractor a
data ContentsExtractor a

-- | <tt>extractContents p contents</tt> extracts the contents with
--   <tt>p</tt>.
extractContents :: ContentsExtractor a -> [Content] -> Either ExtractionErr a

-- | Using <a>parseXMLDoc</a> produces a single <a>Element</a>. Such an
--   element can be extracted using this function.
extractDocContents :: ContentsExtractor a -> Element -> Either ExtractionErr a

-- | <tt>element name p</tt> extracts a <tt>name</tt> element with
--   <tt>p</tt>.
element :: String -> ElementExtractor a -> ContentsExtractor a

-- | Extracts text.
text :: ContentsExtractor String

-- | Extracts text applied to a conversion function.
textAs :: (String -> Either Err a) -> ContentsExtractor a

-- | Extracts first matching.
choice :: [ContentsExtractor a] -> ContentsExtractor a

-- | Extracts one <a>Content</a> item.
anyContent :: ContentsExtractor Content

-- | Succeeds only when there is no more content.
eoc :: ContentsExtractor ()

-- | <tt>only p</tt> fails if there is more contents than extracted by
--   <tt>p</tt>.
--   
--   <pre>
--   only p = p &lt;* eoc
--   </pre>
only :: ContentsExtractor a -> ContentsExtractor a

-- | Converts an extraction error to a multi line string message.
--   
--   Paths are shown according to <a>showPath</a>.
showExtractionErr :: ExtractionErr -> String

-- | Convenience function to convert extraction errors to string messages
--   using <a>showExtractionErr</a>.
--   
--   <pre>
--   eitherMessageOrValue = either (Left . showExtractionErr) Right
--   </pre>
eitherMessageOrValue :: Either ExtractionErr a -> Either String a

-- | Reads an integer value or return <tt><a>Left</a> "integer"</tt> if the
--   read fails.
integer :: (Integral a, Read a) => String -> Either String a

-- | Reads a floating point value or return <tt><a>Left</a> "float"</tt> if
--   the read fails.
float :: (Floating a, Read a) => String -> Either String a
instance Applicative ElementExtractor
instance Alternative ElementExtractor
instance Functor ElementExtractor
instance Monad ElementExtractor
instance Applicative ContentsExtractor
instance Alternative ContentsExtractor
instance Functor ContentsExtractor
instance Monad ContentsExtractor
