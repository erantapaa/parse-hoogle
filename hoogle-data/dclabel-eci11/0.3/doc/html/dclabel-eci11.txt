-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The Disjunction Category Label Format.
--   
--   A package that provides dynamic labels in the form of conjunctions of
--   disjunctions of principals. This package is intended to only be used
--   at the computer science school ECI 2011 (Buenos Aires, Argentina)
--   <a>http://www.dc.uba.ar/events/eci/2011/index_html</a>. Please, refer
--   to the official release of dclabels if you plan to use it for other
--   purposes. The <i>DC Label</i> (DCLabel) library provides dynamic
--   information flow control label format in the form of conjunctions of
--   disjunctions of principals. Most code should import module
--   <a>DCLabel.Safe</a>; trusted code should import <a>DCLabel.TCB</a>.
--   The core functionality of the library is documented in
--   <a>DCLabel.Core</a>, while the small EDSL used to create labels is
--   documented in <a>DCLabel.NanoEDSL</a>. DCLabel was implemented by
--   David Mazieres (<a>http://www.scs.stanford.edu/~dm/</a>), Deian Stefan
--   (<a>http://www.scs.stanford.edu/~deian/</a>), and Alejandro Russo
--   (<a>http://www.cse.chalmers.se/~russo/</a>). To obtain the latest
--   experimental source code, run: <tt>git clone
--   http://www.scs.stanford.edu/~deian/dclabel.git</tt>
@package dclabel-eci11
@version 0.3


-- | This module implements Disjunction Category labels.
--   
--   A DCLabel is a pair of <a>secrecy</a> and <a>integrity</a> category
--   sets (of type <a>Label</a>). A category set (of type <a>Conj</a>) is a
--   conjunction of categories (of type <a>Disj</a>). Each category, in
--   turn, is a disjunction of <a>Principal</a>s, where a <a>Principal</a>
--   is just a <a>String</a> whose meaning is up to the application.
--   
--   A category imposes an information flow restriction. In the case of
--   secrecy, a category restricts who can read, receive, or propagate the
--   information, while in the case of integrity it restricts who can
--   modify a piece of data. The principals constructing a category are
--   said to <i>own</i> the category.
--   
--   For information to flow from a source labeled <tt>L_1</tt> to a sink
--   <tt>L_2</tt>, the restrictions imposed by the categories of
--   <tt>L_2</tt> must at least as restrictive as all the restrictions
--   imposed by the categories of <tt>L_1</tt> (hence the conjunction) in
--   the case of secrecy, and at least as permissive in the case of
--   integrity. More specifically, for information to flow from
--   <tt>L_1</tt> to <tt>L_2</tt>, the labels must satisfy the
--   "can-flow-to" relation: <tt>L_1 ⊑ L_2</tt>. The ⊑ label check is
--   implemented by the <a>canflowto</a> function. For labels
--   <tt>L_1=&lt;S_1, I_1&gt;</tt>, <tt>L_2=&lt;S_2, I_2&gt;</tt> the
--   can-flow-to relation is satisfied if the secrecy category set
--   <tt>S_2</tt> <a>implies</a> <tt>S_1</tt> and <tt>I_1</tt>
--   <a>implies</a> <tt>I_2</tt> (recall that a category set is a
--   conjunction of disjunctions of principals). For example, <tt>&lt;{[P_1
--   ⋁ P_2]},{}&gt; ⊑ &lt;{[P_1]},{}&gt;</tt> because data that can be read
--   by <tt>P_1</tt> is more restricting than that readable by <tt>P_1</tt>
--   or <tt>P_2</tt>. Conversely, <tt>&lt;{{},[P_1]}&gt; ⊑ &lt;{},[P_1 ⋁
--   P_2]},{}&gt;</tt> because data vouched for by <tt>P_1</tt> or
--   <tt>P_2</tt> is more permissive than just <tt>P_1</tt> (note the same
--   idea holds when writing to sinks with such labeling).
--   
--   A piece of a code running with a privilege object (of type
--   <a>TCBPriv</a>), i.e., owning a <a>Principal</a> confers the right to
--   modify labels by removing any <a>secrecy</a> categories containing
--   that <a>Principal</a> and adding any <a>integrity</a> categories
--   containing the <a>Principal</a> (hence the name disjunction
--   categories: the category <tt>[P1 ⋁ P2]</tt> can be <i>downgraded</i>
--   by either <a>Principal</a> <tt>P1</tt> or <tt>P2</tt>). More
--   specifically, privileges can be used to bypass information flow
--   restrictions by using the more permissive "can-flow-to given
--   permission" relation:⊑ᵨ. The label check function implementing this
--   restriction is <a>canflowto_p</a>, taking an additional argument (of
--   type <a>TCBPriv</a>). For example, if <tt>L_1=&lt;{[P_1 ⋁ P_2] ⋀
--   [P_3]},{}&gt;</tt>, and <tt>L_2=&lt;{[P_1]},{}&gt;</tt>, then <tt>L_1
--   ⋢ L_2</tt>, but given a privilege object corresponding to
--   <tt>[P_3]</tt> the <tt>L_1 ⊑ᵨ L_2</tt> holds.
--   
--   To construct DC labels and privilege objects the constructors exported
--   by this module may be used, but we strongly suggest using
--   <a>DCLabel.NanoEDSL</a> as exported by <a>DCLabel.TCB</a> and
--   <a>DCLabel.Safe</a>. The former is to be used by trusted code only,
--   while the latter module should be imported by untrusted code as it
--   prevents the creation of arbitrary privileges.
module DCLabel.Core

-- | A category, i.e., disjunction, of <a>Principal</a>s. The empty list
--   '[]' corresponds to the disjunction of all principals. Conceptually,
--   <tt>[] = [P_1 ⋁ P_2 ⋁ ...]</tt>
newtype Disj
MkDisj :: [Principal] -> Disj
disj :: Disj -> [Principal]

-- | A category set, i.e., a conjunction of disjunctions. The empty list
--   '[]' corresponds to the single disjunction of all principals. In other
--   words, conceptually, <tt>[] = {[P_1 ⋁ P_2 ⋁ ...]}</tt>
newtype Conj
MkConj :: [Disj] -> Conj
conj :: Conj -> [Disj]

-- | A label is a conjunction of disjunctions, where <tt>MkLabelAll</tt> is
--   the constructor that is associated with the conjunction of all
--   possible disjunctions.
data Label
MkLabelAll :: Label
MkLabel :: Conj -> Label
label :: Label -> Conj

-- | A label without any disjunctions or conjunctions. This label,
--   conceptually corresponds to the label consisting of a single category
--   containing all principals. Conceptually, <tt>emptyLabel = &lt;{[P_1 ⋁
--   P_2 ⋁ ...]}&gt;</tt>
emptyLabel :: Label

-- | The dual of <a>emptyLabel</a>, <a>allLabel</a> consists of the
--   conjunction of all possible disjunctions, i.e., it is the label that
--   implies all other labels. Conceptually, <tt>allLabel = &lt;{[P_1] ⋀
--   [P_2] ⋀ ...}&gt;</tt>
allLabel :: Label

-- | Labels forma a partial order according to the ⊑ relation.
--   Specifically, this means that for any two labels <tt>L_1</tt> and
--   <tt>L_2</tt> there is a unique label <tt>L_3 = L_1 ⊔ L_2</tt>, known
--   as the <i>join</i>, such that <tt>L_1 ⊑ L_3</tt> and <tt>L_2 ⊑
--   L_3</tt>. Similarly, there is a unique label <tt>L_3' = L_1 ⊓
--   L_2</tt>, known as the <i>meet</i>, such that <tt>L_3 ⊑ L_1</tt> and
--   <tt>L_3 ⊑ L_2</tt>. This class defines a <i>bounded</i> lattice, which
--   further requires the definition of the <i>bottom</i> ⊥ and <i>top</i>
--   ⊤ elements of the lattice, such that <tt>⊥ ⊑ L</tt> and <tt>L ⊑ ⊤</tt>
--   for any label <tt>L</tt>.
class Eq a => Lattice a
bottom :: Lattice a => a
top :: Lattice a => a
join :: Lattice a => a -> a -> a
meet :: Lattice a => a -> a -> a
canflowto :: Lattice a => a -> a -> Bool

-- | Class used to reduce labels to a unique label normal form (LNF), which
--   corresponds to conjunctive normal form of principals. We use this
--   class to overload the reduce function used by the <a>Label</a>,
--   <a>DCLabel</a>, etc.
class ToLNF a
toLNF :: ToLNF a => a -> a

-- | A <tt>DCLabel</tt> is a pair of secrecy and integrity category sets,
--   i.e., a pair of <a>Label</a>s.
data DCLabel
MkDCLabel :: Label -> Label -> DCLabel

-- | Integrity category set.
secrecy :: DCLabel -> Label

-- | Secrecy category set.
integrity :: DCLabel -> Label

-- | Principal is a simple string representing a source of authority. Any
--   piece of code can create principals, regarless of how untrusted it is.
--   However, for principals to be used in integrity labels or be ignoerd a
--   corresponding privilege (<a>TCBPriv</a>) must be created (by trusted
--   code) or delegated.
newtype Principal
MkPrincipal :: String -> Principal
name :: Principal -> String

-- | Generates a principal from an string.
principal :: String -> Principal

-- | Privilege object is just a conjunction of disjunctions, i.e., a
--   <a>Label</a>. A trusted privileged object must be introduced by
--   trusted code, after which trusted privileged objects can be created by
--   delegation.
data TCBPriv
MkTCBPriv :: Label -> TCBPriv
priv :: TCBPriv -> Label

-- | Untrusted privileged object, which can be converted to a
--   <a>TCBPriv</a> with <a>delegatePriv</a>.
type Priv = Label

-- | Class extending <a>Lattice</a>, by allowing for the more relaxed label
--   comparison <tt>canflowto_p</tt>.
class Lattice a => RelaxedLattice a
canflowto_p :: RelaxedLattice a => TCBPriv -> a -> a -> Bool

-- | Privilege object corresponding to no privileges.
noPriv :: TCBPriv

-- | Privilege object corresponding to the "root", or all privileges. Any
--   other privilege may be delegated using this privilege object and it
--   must therefore not be exported to untrusted code.
rootPrivTCB :: TCBPriv

-- | Given trusted privilege and a "desired" untrusted privilege, return a
--   trusted version of the untrusted privilege, if the provided (trusted)
--   privilege implies it.
delegatePriv :: TCBPriv -> Priv -> Maybe TCBPriv

-- | This function creates any privilege object given an untrusted
--   privilege <a>Priv</a>. Note that this function should not be exported
--   to untrusted code.
createPrivTCB :: Priv -> TCBPriv

-- | Class used for checking if a computation can use a privilege in place
--   of the other. This notion is similar to the DLM "can-act-for".
class CanDelegate a b
canDelegate :: CanDelegate a b => a -> b -> Bool

-- | We say a <a>TCBPriv</a> privilege object owns a category when the
--   privileges allow code to bypass restrictions implied by the category.
--   This is the case if and only if the <a>TCBPriv</a> object contains one
--   of the <a>Principal</a>s in the <a>Disj</a>. This class is used to
--   check ownership
class Owns a
owns :: Owns a => TCBPriv -> a -> Bool

-- | Given two labels, take the union of the disjunctions, i.e., simply
--   perform an "and". Note the new label is not necessarily in LNF.
and_label :: Label -> Label -> Label

-- | Given two labels, perform an "or". Note that the new label is not
--   necessarily in LNF.
or_label :: Label -> Label -> Label

-- | Removes any duplicate principals from categories, and any duplicate
--   categories from the label. To return a clean label, it sorts the label
--   and removes empty disjunctions.
cleanLabel :: Label -> Label

-- | Determines if a label implies (in the logical sense) another label. In
--   other words, d_1 ⋀ ... ⋀ d_n =&gt; d_1' ⋀ ... ⋀ d_n'.
--   
--   Properties:
--   
--   <ul>
--   <li>∀ X, <a>allLabel</a> `<a>implies</a>` X := True</li>
--   <li>∀ X≠<a>allLabel</a>, X `<a>implies</a>` <a>allLabel</a> :=
--   False</li>
--   <li>∀ X, X `<a>implies</a>` <a>emptyLabel</a> := True</li>
--   <li>∀ X≠<a>emptyLabel</a>, <a>emptyLabel</a> `<a>implies</a>` X :=
--   False</li>
--   </ul>
implies :: Label -> Label -> Bool

-- | Class used to convert list of principals to a disjunction category and
--   vice versa.
class DisjToFromList a
listToDisj :: DisjToFromList a => [a] -> Disj
disjToList :: DisjToFromList a => Disj -> [a]

-- | Given a list of categories, return a label.
listToLabel :: [Disj] -> Label

-- | Given a label return a list of categories.
labelToList :: Label -> [Disj]
instance Eq Principal
instance Ord Principal
instance Show Principal
instance Read Principal
instance Eq Disj
instance Ord Disj
instance Show Disj
instance Read Disj
instance Eq Conj
instance Ord Conj
instance Show Conj
instance Read Conj
instance Show Label
instance Read Label
instance Eq DCLabel
instance Show DCLabel
instance Read DCLabel
instance Eq TCBPriv
instance Show TCBPriv
instance DisjToFromList String
instance DisjToFromList Principal
instance Owns Label
instance Owns Disj
instance CanDelegate TCBPriv TCBPriv
instance CanDelegate TCBPriv Priv
instance CanDelegate Priv TCBPriv
instance CanDelegate Priv Priv
instance Monoid TCBPriv
instance RelaxedLattice DCLabel
instance Lattice DCLabel
instance ToLNF DCLabel
instance ToLNF Label
instance Eq Label


-- | This module implements a `<tt>nano</tt>`, very simple, embedded domain
--   specific language to create <a>Label</a>s and <a>Priv</a>ilages from
--   conjunctions of principal disjunctions.
--   
--   A 'Label'/'Priv' is created using the (<a>.\/.</a>) and (<a>./\.</a>)
--   operators. The disjunction operator (<a>.\/.</a>) is used to create a
--   category from <a>Principal</a>s, <a>String</a>s, or a disjunctive
--   sub-expression. For example:
--   
--   <pre>
--   p1 = <a>principal</a> "p1"
--   p2 = <a>principal</a> "p2"
--   p3 = <a>principal</a> "p3"
--   e1 = p1 <a>.\/.</a> p2
--   e2 = e1 <a>.\/.</a> "p4"
--   </pre>
--   
--   Similarly, the conjunction operator (<a>./\.</a>) is used to create
--   category-sets from <tt>Principals</tt>, <tt>Strings</tt>, and
--   conjunctive or disjunctive sub-expressions. For example:
--   
--   <pre>
--   e3 = p1 <a>.\/.</a> p2
--   e4 = e1 <a>./\.</a> "p4" <a>./\.</a> p3
--   </pre>
--   
--   <i>Note</i> that because a category consists of a disjunction of
--   principals, and a category set is composed of the conjunction of
--   categories, (<a>.\/.</a>) binds more tightly than (<a>./\.</a>).
--   
--   Given two <a>Label</a>s, one for secrecy and one for integrity, you
--   can create a <a>DCLabel</a> with <a>newDC</a>. And, similarly, given a
--   <a>TCBPriv</a> and <a>Priv</a> you can create a new minted privilege
--   with <a>newTCBPriv</a>.
--   
--   Consider the following, example:
--   
--   <pre>
--   l1 = "Alice" <a>.\/.</a> "Bob" <a>./\.</a> "Carla" 
--   l2 = "Alice" <a>./\.</a> "Carla" 
--   dc1 = <a>newDC</a> l1 l2
--   dc2 = <a>newDC</a> "Deian" "Alice"
--   pr = <a>createPrivTCB</a> $ <a>newPriv</a> ("Alice" <a>./\.</a> "Carla")
--   </pre>
--   
--   where
--   
--   <ul>
--   <li><pre> dc1 = &lt;{["Alice" ⋁ "Bob"] ⋀ ["Carla"]} , {["Alice"] ⋀
--   ["Carla"]}&gt;</pre></li>
--   <li><pre> dc2 = &lt;{["Deian"]} , {["Alice"]}&gt;</pre></li>
--   <li><pre> <a>canflowto</a> dc1 dc2 = False</pre></li>
--   <li><pre> <a>canflowto_p</a> pr dc1 dc2 = True</pre></li>
--   </ul>
module DCLabel.NanoEDSL
(.\/.) :: DisjunctionOf a b => a -> b -> Label
(./\.) :: ConjunctionOf a b => a -> b -> Label

-- | Empty label.
(<>) :: Label

-- | All label.
(><) :: Label
newDC :: NewDC a b => a -> b -> DCLabel

-- | Given element create privilege.
newPriv :: NewPriv a => a -> Priv

-- | Given privilege and new element, create (maybe) trusted privileged
--   object.
newTCBPriv :: NewPriv a => TCBPriv -> a -> Maybe TCBPriv
instance NewPriv String
instance NewPriv Principal
instance NewPriv Label
instance NewDC String String
instance NewDC Label String
instance NewDC String Label
instance NewDC Principal Principal
instance NewDC Label Principal
instance NewDC Principal Label
instance NewDC Label Label
instance ConjunctionOf Disj String
instance ConjunctionOf String Disj
instance ConjunctionOf Disj Principal
instance ConjunctionOf Principal Disj
instance ConjunctionOf Label Disj
instance ConjunctionOf Disj Label
instance ConjunctionOf Disj Disj
instance ConjunctionOf Label String
instance ConjunctionOf String Label
instance ConjunctionOf String String
instance ConjunctionOf Label Label
instance ConjunctionOf Label Principal
instance ConjunctionOf Principal Label
instance ConjunctionOf Principal Principal
instance DisjunctionOf Label String
instance DisjunctionOf String Label
instance DisjunctionOf String String
instance DisjunctionOf Label Label
instance DisjunctionOf Label Principal
instance DisjunctionOf Principal Label
instance DisjunctionOf Principal Principal
instance Singleton String
instance Singleton Principal


-- | This module exports an unsafe-subset of <a>DCLabel.Core</a>,
--   implementing Disjunction Category Labels. A subset of the exported
--   functions and constructors shoul not be exposed to untrusted code;
--   instead, untursted code should import the <a>DCLabel.Safe</a> module.
module DCLabel.TCB

module DCLabel.Secrecy

-- | A secrecy-only DC label.
newtype SLabel
MkSLabel :: DCLabel -> SLabel
instance Eq SLabel
instance Show SLabel
instance Read SLabel
instance RelaxedLattice SLabel
instance Lattice SLabel
instance ToLNF SLabel

module DCLabel.Integrity

-- | An integrity-only DC label.
newtype ILabel
MkILabel :: DCLabel -> ILabel
instance Eq ILabel
instance Show ILabel
instance Read ILabel
instance RelaxedLattice ILabel
instance Lattice ILabel
instance ToLNF ILabel


-- | This module exports a function <a>prettyShow</a> that pretty prints
--   <a>Principal</a>s, <a>Disj</a>unctions, <a>Conj</a>unctions,
--   <a>Label</a>s and <a>DCLabel</a>s.
module DCLabel.PrettyShow

-- | Class used to create a <a>Doc</a> type of DCLabel-related types
class PrettyShow a
pShow :: PrettyShow a => a -> Doc

-- | Render a <a>PrettyShow</a> type to a string.
prettyShow :: PrettyShow a => a -> String
instance PrettyShow ILabel
instance PrettyShow SLabel
instance PrettyShow TCBPriv
instance PrettyShow Principal
instance PrettyShow DCLabel
instance PrettyShow Label
instance PrettyShow Conj
instance PrettyShow Disj


-- | This module exports a safe-subset of <a>DCLabel.Core</a>, implementing
--   Disjunction Category Labels. The exported functions and constructors
--   may be used by untrusted code, guaranteeing that they cannot perform
--   anything unsafe.
module DCLabel.Safe
join :: Lattice a => a -> a -> a
meet :: Lattice a => a -> a -> a
top :: Lattice a => a
bottom :: Lattice a => a
canflowto :: Lattice a => a -> a -> Bool

-- | A label is a conjunction of disjunctions, where <tt>MkLabelAll</tt> is
--   the constructor that is associated with the conjunction of all
--   possible disjunctions.
data Label

-- | A <tt>DCLabel</tt> is a pair of secrecy and integrity category sets,
--   i.e., a pair of <a>Label</a>s.
data DCLabel

-- | Integrity category set.
secrecy :: DCLabel -> Label

-- | Secrecy category set.
integrity :: DCLabel -> Label

-- | Generates a principal from an string.
principal :: String -> Principal
listToDisj :: DisjToFromList a => [a] -> Disj
disjToList :: DisjToFromList a => Disj -> [a]

-- | Given a list of categories, return a label.
listToLabel :: [Disj] -> Label

-- | Given a label return a list of categories.
labelToList :: Label -> [Disj]
(.\/.) :: DisjunctionOf a b => a -> b -> Label
(./\.) :: ConjunctionOf a b => a -> b -> Label

-- | Empty label.
(<>) :: Label

-- | All label.
(><) :: Label
newDC :: NewDC a b => a -> b -> DCLabel

-- | Privilege object is just a conjunction of disjunctions, i.e., a
--   <a>Label</a>. A trusted privileged object must be introduced by
--   trusted code, after which trusted privileged objects can be created by
--   delegation.
data TCBPriv

-- | Untrusted privileged object, which can be converted to a
--   <a>TCBPriv</a> with <a>delegatePriv</a>.
type Priv = Label

-- | Relaxed partial-order relation
canflowto_p :: RelaxedLattice a => TCBPriv -> a -> a -> Bool

-- | Given trusted privilege and a "desired" untrusted privilege, return a
--   trusted version of the untrusted privilege, if the provided (trusted)
--   privilege implies it.
delegatePriv :: TCBPriv -> Priv -> Maybe TCBPriv

-- | Can use first privilege in place of second.
canDelegate :: CanDelegate a b => a -> b -> Bool

-- | Checks if category restriction can be bypassed given the privilege.
owns :: Owns a => TCBPriv -> a -> Bool

-- | Given element create privilege.
newPriv :: NewPriv a => a -> Priv

-- | Given privilege and new element, create (maybe) trusted privileged
--   object.
newTCBPriv :: NewPriv a => TCBPriv -> a -> Maybe TCBPriv
