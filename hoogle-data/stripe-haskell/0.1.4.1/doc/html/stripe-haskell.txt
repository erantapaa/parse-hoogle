-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Stripe API for Haskell
--   
@package stripe-haskell
@version 0.1.4.1


-- | <a>https://stripe.com/docs/api#application_fees</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.ApplicationFee
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ getApplicationFee (FeeId "fee_4xtEGZhPNDEt3w")
--     case result of
--       Right applicationFee -&gt; print applicationFee
--       Left stripeError     -&gt; print stripeError
--   </pre>
module Web.Stripe.ApplicationFee

-- | <a>ApplicationFee</a> retrieval
getApplicationFee :: FeeId -> Stripe ApplicationFee

-- | <a>ApplicationFee</a> retrieval with <a>ExpandParams</a>
getApplicationFeeExpanded :: FeeId -> ExpandParams -> Stripe ApplicationFee

-- | <a>ApplicationFee</a>s retrieval
getApplicationFees :: Maybe Limit -> StartingAfter FeeId -> EndingBefore FeeId -> Stripe (StripeList ApplicationFee)

-- | <a>ApplicationFee</a>s retrieval with <a>ExpandParams</a>
getApplicationFeesExpanded :: Maybe Limit -> StartingAfter FeeId -> EndingBefore FeeId -> ExpandParams -> Stripe (StripeList ApplicationFee)

-- | <a>ApplicationId</a> object
newtype ApplicationId
ApplicationId :: Text -> ApplicationId

-- | ApplicationFee Object
data ApplicationFee
ApplicationFee :: Text -> Text -> UTCTime -> Bool -> Int -> Currency -> Bool -> Int -> StripeList Refund -> TransactionId -> AccountId -> ApplicationId -> ChargeId -> MetaData -> ApplicationFee
applicationFeeId :: ApplicationFee -> Text
applicationFeeObjecet :: ApplicationFee -> Text
applicationFeeCreated :: ApplicationFee -> UTCTime
applicationFeeLiveMode :: ApplicationFee -> Bool
applicationFeeAmount :: ApplicationFee -> Int
applicationFeeCurrency :: ApplicationFee -> Currency
applicationFeeRefunded :: ApplicationFee -> Bool
applicationFeeAmountRefunded :: ApplicationFee -> Int
applicationFeeRefunds :: ApplicationFee -> StripeList Refund
applicationFeeBalanceTransaction :: ApplicationFee -> TransactionId
applicationFeeAccountId :: ApplicationFee -> AccountId
applicationFeeApplicationId :: ApplicationFee -> ApplicationId
applicationFeeChargeId :: ApplicationFee -> ChargeId
applicationFeeMetaData :: ApplicationFee -> MetaData

-- | <a>FeeId</a> for objects with Fees
newtype FeeId
FeeId :: Text -> FeeId

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | Pagination Option for <a>StripeList</a>
type EndingBefore a = Maybe a

-- | Pagination Option for <a>StripeList</a>
type StartingAfter a = Maybe a

-- | Pagination Option for <a>StripeList</a>
type Limit = Maybe Int

-- | Type of Expansion Parameters for use on <tt>Stripe</tt> objects
type ExpandParams = [Text]

-- | Connect Application
data ConnectApp
ConnectApp :: Maybe Text -> Text -> Text -> ConnectApp
connectAppId :: ConnectApp -> Maybe Text
connectAppObject :: ConnectApp -> Text
connectAppName :: ConnectApp -> Text


-- | <a>https://stripe.com/docs/api#fee_refunds</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.ApplicationFeeRefund
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ getApplicationFeeRefund (FeeId "fee_id") (RefundId "refund_id")
--     case result of
--       Right applicationFeeRefund -&gt; print applicationFeeRefund
--       Left stripeError           -&gt; print stripeError
--   </pre>
module Web.Stripe.ApplicationFeeRefund

-- | Create a new <a>ApplicationFeeRefund</a>
createApplicationFeeRefund :: FeeId -> Maybe Amount -> MetaData -> Stripe ApplicationFeeRefund

-- | Retrieve an existing <a>ApplicationFeeRefund</a>
getApplicationFeeRefund :: FeeId -> RefundId -> Stripe ApplicationFeeRefund

-- | Retrieve an existing <a>ApplicationFeeRefund</a>
getApplicationFeeRefundExpandable :: FeeId -> RefundId -> ExpandParams -> Stripe ApplicationFeeRefund

-- | Retrieve a list of all <a>ApplicationFeeRefund</a>s for a given
--   Application <a>FeeId</a>
getApplicationFeeRefunds :: FeeId -> Limit -> StartingAfter FeeId -> EndingBefore FeeId -> Stripe (StripeList ApplicationFeeRefund)

-- | Retrieve a list of all <a>ApplicationFeeRefund</a>s for a given
--   Application <a>FeeId</a>
getApplicationFeeRefundsExpandable :: FeeId -> Limit -> StartingAfter FeeId -> EndingBefore FeeId -> ExpandParams -> Stripe (StripeList ApplicationFeeRefund)

-- | Update an <a>ApplicationFeeRefund</a> for a given Application
--   <a>FeeId</a> and <a>RefundId</a>
updateApplicationFeeRefund :: FeeId -> RefundId -> MetaData -> Stripe (StripeList ApplicationFeeRefund)

-- | <a>FeeId</a> for objects with Fees
newtype FeeId
FeeId :: Text -> FeeId

-- | <a>RefundId</a> for <a>Refund</a>
newtype RefundId
RefundId :: Text -> RefundId

-- | ApplicationFee Object
data ApplicationFee
ApplicationFee :: Text -> Text -> UTCTime -> Bool -> Int -> Currency -> Bool -> Int -> StripeList Refund -> TransactionId -> AccountId -> ApplicationId -> ChargeId -> MetaData -> ApplicationFee
applicationFeeId :: ApplicationFee -> Text
applicationFeeObjecet :: ApplicationFee -> Text
applicationFeeCreated :: ApplicationFee -> UTCTime
applicationFeeLiveMode :: ApplicationFee -> Bool
applicationFeeAmount :: ApplicationFee -> Int
applicationFeeCurrency :: ApplicationFee -> Currency
applicationFeeRefunded :: ApplicationFee -> Bool
applicationFeeAmountRefunded :: ApplicationFee -> Int
applicationFeeRefunds :: ApplicationFee -> StripeList Refund
applicationFeeBalanceTransaction :: ApplicationFee -> TransactionId
applicationFeeAccountId :: ApplicationFee -> AccountId
applicationFeeApplicationId :: ApplicationFee -> ApplicationId
applicationFeeChargeId :: ApplicationFee -> ChargeId
applicationFeeMetaData :: ApplicationFee -> MetaData

-- | Application Fee Refunds
data ApplicationFeeRefund
ApplicationFeeRefund :: RefundId -> Int -> Currency -> UTCTime -> Text -> Maybe TransactionId -> FeeId -> MetaData -> ApplicationFeeRefund
applicationFeeRefundId :: ApplicationFeeRefund -> RefundId
applicationFeeRefundAmount :: ApplicationFeeRefund -> Int
applicationFeeRefundCurrency :: ApplicationFeeRefund -> Currency
applicationFeeRefundCreated :: ApplicationFeeRefund -> UTCTime
applicationFeeRefundObject :: ApplicationFeeRefund -> Text
applicationFeeRefundBalanceTransaction :: ApplicationFeeRefund -> Maybe TransactionId
applicationFeeRefundFee :: ApplicationFeeRefund -> FeeId
applicationFeeRefundMetaData :: ApplicationFeeRefund -> MetaData

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | Pagination Option for <a>StripeList</a>
type EndingBefore a = Maybe a

-- | Pagination Option for <a>StripeList</a>
type StartingAfter a = Maybe a

-- | Pagination Option for <a>StripeList</a>
type Limit = Maybe Int

-- | Type of Expansion Parameters for use on <tt>Stripe</tt> objects
type ExpandParams = [Text]

-- | Type of MetaData for use on <tt>Stripe</tt> objects
type MetaData = [(Text, Text)]

-- | Amount representing a monetary value. Stripe represents pennies as
--   whole numbers i.e. 100 = $1
type Amount = Int


-- | <a>https://stripe.com/docs/api#balance</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Balance (getBalance)
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config getBalance
--     case result of
--       Right balance    -&gt; print balance 
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Balance

-- | Retrieve the current <a>Balance</a> for your Stripe account
getBalance :: Stripe Balance

-- | Retrieve a <a>BalanceTransaction</a> by <a>TransactionId</a>
getBalanceTransaction :: TransactionId -> Stripe BalanceTransaction

-- | Retrieve a <a>BalanceTransaction</a> by <a>TransactionId</a> with
--   <a>ExpandParams</a>
getBalanceTransactionExpandable :: TransactionId -> ExpandParams -> Stripe BalanceTransaction

-- | Retrieve the history of <a>BalanceTransaction</a>s
getBalanceTransactionHistory :: Limit -> StartingAfter TransactionId -> EndingBefore TransactionId -> Stripe (StripeList BalanceTransaction)

-- | <a>Balance</a> Object
data Balance
Balance :: [BalanceAmount] -> [BalanceAmount] -> Bool -> Text -> Balance
balancePending :: Balance -> [BalanceAmount]
balanceAvailable :: Balance -> [BalanceAmount]
balanceLiveMode :: Balance -> Bool
balanceObject :: Balance -> Text

-- | <a>TransactionId</a> of a <tt>Transaction</tt>
data TransactionId
TransactionId :: Text -> TransactionId
ExpandedTransaction :: BalanceTransaction -> TransactionId

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | Pagination Option for <a>StripeList</a>
type EndingBefore a = Maybe a

-- | Pagination Option for <a>StripeList</a>
type StartingAfter a = Maybe a

-- | Pagination Option for <a>StripeList</a>
type Limit = Maybe Int

-- | <a>BalanceTransaction</a> Object
data BalanceTransaction

-- | <a>BalanceAmount</a> Object
data BalanceAmount


-- | <a>https://stripe.com/docs/api#bitcoin_receivers</a>
--   <a>https://stripe.com/docs/guides/bitcoin</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Bitcoin
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config listAllReceivers
--     case result of
--       Right receivers  -&gt; print receivers
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Bitcoin

-- | Retrieve the object that represents your Stripe account
createReceiver :: Integer -> Email -> Stripe BitcoinReceiver

-- | Retrieve a <a>BitcoinReceiver</a>
getReceiver :: BitcoinReceiverId -> Stripe BitcoinReceiver

-- | Retrieve a list of <a>BitcoinReceiver</a>s
listReceivers :: Maybe Limit -> StartingAfter BitcoinReceiverId -> EndingBefore BitcoinReceiverId -> Stripe (StripeList BitcoinReceiver)

-- | BTC ReceiverObject
data BitcoinReceiver
BitcoinReceiver :: BitcoinReceiverId -> Text -> UTCTime -> Bool -> Bool -> Integer -> Integer -> Integer -> Integer -> Text -> Currency -> Bool -> Text -> Bool -> Maybe Text -> Text -> MetaData -> Maybe Text -> Maybe Transactions -> Maybe PaymentId -> Maybe CustomerId -> BitcoinReceiver
btcId :: BitcoinReceiver -> BitcoinReceiverId
btcObject :: BitcoinReceiver -> Text
btcCreated :: BitcoinReceiver -> UTCTime
btcLiveMode :: BitcoinReceiver -> Bool
btcActive :: BitcoinReceiver -> Bool
btcAmount :: BitcoinReceiver -> Integer
btcAmountReceived :: BitcoinReceiver -> Integer
btcBitcoinAmount :: BitcoinReceiver -> Integer
btcBitcoinAmountReceived :: BitcoinReceiver -> Integer
btcBitcoinUri :: BitcoinReceiver -> Text
btcCurrency :: BitcoinReceiver -> Currency
btcFilled :: BitcoinReceiver -> Bool
btcInboundAddress :: BitcoinReceiver -> Text
btcUncapturedFunds :: BitcoinReceiver -> Bool
btcDescription :: BitcoinReceiver -> Maybe Text
btcEmail :: BitcoinReceiver -> Text
btcMetadata :: BitcoinReceiver -> MetaData
btcRefundAddress :: BitcoinReceiver -> Maybe Text
btcTransactions :: BitcoinReceiver -> Maybe Transactions
btcPayment :: BitcoinReceiver -> Maybe PaymentId
btcCustomer :: BitcoinReceiver -> Maybe CustomerId

-- | BTC ReceiverId
newtype BitcoinReceiverId
BitcoinReceiverId :: Text -> BitcoinReceiverId

-- | Bitcoin Transaction
data BitcoinTransaction
BitcoinTransaction :: BitcoinTransactionId -> Text -> UTCTime -> Integer -> Integer -> Currency -> BitcoinReceiverId -> BitcoinTransaction
btcTransactionId :: BitcoinTransaction -> BitcoinTransactionId
btcTransactionObject :: BitcoinTransaction -> Text
btcTransactionCreated :: BitcoinTransaction -> UTCTime
btcTransactionAmount :: BitcoinTransaction -> Integer
btcTransactionBitcoinAmount :: BitcoinTransaction -> Integer
btcTransactionCurrency :: BitcoinTransaction -> Currency
btcTransactionReceiver :: BitcoinTransaction -> BitcoinReceiverId

-- | BitcoinTransactionId
newtype BitcoinTransactionId
BitcoinTransactionId :: Text -> BitcoinTransactionId

-- | <a>Email</a> associated with a <a>Customer</a>, <a>Recipient</a> or
--   <a>Charge</a>
newtype Email
Email :: Text -> Email

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool


-- | <a>https://stripe.com/docs/api#cards</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Customer 
--   import Web.Stripe.Card
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--         credit = CardNumber "4242424242424242"
--         em  = ExpMonth 12
--         ey  = ExpYear 2015
--         cvc = CVC "123"
--     result &lt;- stripe config $ do
--            Customer { customerId = cid } &lt;- createEmptyCustomer
--            card &lt;- createCustomerCard cid credit em ey cvc
--            return card
--     case result of
--       Right card -&gt; print card
--       Left  stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Card

-- | Add a <a>Card</a> on a <a>Customer</a>
createCustomerCard :: CustomerId -> CardNumber -> ExpMonth -> ExpYear -> CVC -> Stripe Card

-- | Create a <a>Customer</a> card using a <a>Token</a>
createCustomerCardByToken :: CustomerId -> TokenId -> Stripe Card

-- | Get card by <a>CustomerId</a> and <a>CardId</a>
getCustomerCard :: CustomerId -> CardId -> Stripe Card

-- | Get card by <a>CustomerId</a> and <a>CardId</a> with
--   <a>ExpandParams</a>
getCustomerCardExpandable :: CustomerId -> CardId -> ExpandParams -> Stripe Card

-- | Retrieve all cards associated with a <a>Customer</a>
getCustomerCards :: CustomerId -> Maybe Limit -> StartingAfter CardId -> EndingBefore CardId -> Stripe (StripeList Card)

-- | Retrieve all cards associated with a <a>Customer</a>
getCustomerCardsExpandable :: CustomerId -> Maybe Limit -> StartingAfter CardId -> EndingBefore CardId -> ExpandParams -> Stripe (StripeList Card)

-- | Update a <a>Customer</a> <a>Card</a>
updateCustomerCard :: CustomerId -> CardId -> Maybe Name -> Maybe AddressCity -> Maybe AddressCountry -> Maybe AddressLine1 -> Maybe AddressLine2 -> Maybe AddressState -> Maybe AddressZip -> Stripe Card

-- | Removes a card from a <a>Customer</a>
deleteCustomerCard :: CustomerId -> CardId -> Stripe StripeDeleteResult

-- | Create a <a>Recipient</a> <a>Card</a> by <a>CardNumber</a>
createRecipientCard :: RecipientId -> CardNumber -> ExpMonth -> ExpYear -> CVC -> Stripe RecipientCard

-- | Create a <a>Recipient</a> card using a <a>Token</a>
createRecipientCardByToken :: RecipientId -> TokenId -> Stripe RecipientCard

-- | Get card by <a>RecipientId</a> and <a>CardId</a>
getRecipientCard :: RecipientId -> RecipientCardId -> Stripe RecipientCard

-- | Get card by <a>RecipientId</a> and <a>CardId</a>
getRecipientCardExpandable :: RecipientId -> RecipientCardId -> ExpandParams -> Stripe RecipientCard

-- | Retrieve all cards associated with a <a>Recipient</a>
getRecipientCards :: RecipientId -> Maybe Limit -> StartingAfter RecipientCardId -> EndingBefore RecipientCardId -> Stripe (StripeList RecipientCard)

-- | Retrieve all cards associated with a <a>Recipient</a>
getRecipientCardsExpandable :: RecipientId -> Maybe Limit -> StartingAfter RecipientCardId -> EndingBefore RecipientCardId -> ExpandParams -> Stripe (StripeList RecipientCard)

-- | Update a <a>Recipient</a> <a>Card</a>
updateRecipientCard :: RecipientId -> RecipientCardId -> Maybe Name -> Maybe AddressCity -> Maybe AddressCountry -> Maybe AddressLine1 -> Maybe AddressLine2 -> Maybe AddressState -> Maybe AddressZip -> Stripe RecipientCard

-- | Removes a card from a <a>Customer</a>
deleteRecipientCard :: RecipientId -> RecipientCardId -> Stripe StripeDeleteResult

-- | Credit / Debit Card Brand
data Brand
Visa :: Brand
AMEX :: Brand
MasterCard :: Brand
Discover :: Brand
JCB :: Brand
DinersClub :: Brand
Unknown :: Brand

-- | <a>Card</a> Object
data Card
Card :: CardId -> Text -> Text -> Brand -> Text -> ExpMonth -> ExpYear -> Text -> Text -> Maybe Name -> Maybe AddressLine1 -> Maybe AddressLine2 -> Maybe AddressCity -> Maybe AddressState -> Maybe AddressZip -> Maybe AddressCountry -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe CustomerId -> Card
cardId :: Card -> CardId
cardObject :: Card -> Text
cardLastFour :: Card -> Text
cardBrand :: Card -> Brand
cardFunding :: Card -> Text
cardExpMonth :: Card -> ExpMonth
cardExpYear :: Card -> ExpYear
cardFingerprint :: Card -> Text
cardCountry :: Card -> Text
cardName :: Card -> Maybe Name
cardAddressLine1 :: Card -> Maybe AddressLine1
cardAddressLine2 :: Card -> Maybe AddressLine2
cardAddressCity :: Card -> Maybe AddressCity
cardAddressState :: Card -> Maybe AddressState
cardAddressZip :: Card -> Maybe AddressZip
cardAddressCountry :: Card -> Maybe AddressCountry
cardCVCCheck :: Card -> Maybe Text
cardAddressLine1Check :: Card -> Maybe Text
cardAddressZipCheck :: Card -> Maybe Text
cardCustomerId :: Card -> Maybe CustomerId

-- | <a>RecipientCard</a> object
data RecipientCard
RecipientCard :: RecipientCardId -> Text -> Brand -> Text -> ExpMonth -> ExpYear -> Text -> Country -> Maybe Name -> Maybe AddressLine1 -> Maybe AddressLine2 -> Maybe AddressCity -> Maybe AddressState -> Maybe AddressZip -> Maybe AddressCountry -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe RecipientId -> RecipientCard
recipientCardId :: RecipientCard -> RecipientCardId
recipientCardLastFour :: RecipientCard -> Text
recipientCardBrand :: RecipientCard -> Brand
recipientCardFunding :: RecipientCard -> Text
recipientCardExpMonth :: RecipientCard -> ExpMonth
recipientCardExpYear :: RecipientCard -> ExpYear
recipientCardFingerprint :: RecipientCard -> Text
recipientCardCountry :: RecipientCard -> Country
recipientCardName :: RecipientCard -> Maybe Name
recipientCardAddressLine1 :: RecipientCard -> Maybe AddressLine1
recipientCardAddressLine2 :: RecipientCard -> Maybe AddressLine2
recipientCardAddressCity :: RecipientCard -> Maybe AddressCity
recipientCardAddressState :: RecipientCard -> Maybe AddressState
recipientCardAddressZip :: RecipientCard -> Maybe AddressZip
recipientCardAddressCountry :: RecipientCard -> Maybe AddressCountry
recipientCardCVCCheck :: RecipientCard -> Maybe Text
recipientCardAddressLine1Check :: RecipientCard -> Maybe Text
recipientCardAddressZipCheck :: RecipientCard -> Maybe Text
recipientCardRecipientId :: RecipientCard -> Maybe RecipientId

-- | CardId for a <a>Customer</a>
data CardId
CardId :: Text -> CardId
ExpandedCard :: Card -> CardId

-- | CardId for a <a>Recipient</a>
data RecipientCardId
RecipientCardId :: Text -> RecipientCardId
ExpandedRecipientCard :: RecipientCard -> RecipientCardId

-- | Number associated with a <a>Card</a>
newtype CardNumber
CardNumber :: Text -> CardNumber

-- | Expiration Month for a <a>Card</a>
newtype ExpMonth
ExpMonth :: Int -> ExpMonth

-- | Expiration Year for a <a>Card</a>
newtype ExpYear
ExpYear :: Int -> ExpYear

-- | CVC for a <a>Card</a>
newtype CVC
CVC :: Text -> CVC

-- | Generic URL for use in constructing API Calls
type Name = Text

-- | Address Line One for a <a>Card</a>
newtype AddressLine1
AddressLine1 :: Text -> AddressLine1

-- | Address Line Two for a <a>Card</a>
newtype AddressLine2
AddressLine2 :: Text -> AddressLine2

-- | City address for a <a>Card</a>
newtype AddressCity
AddressCity :: Text -> AddressCity

-- | Country address for a <a>Card</a>
newtype AddressCountry
AddressCountry :: Text -> AddressCountry

-- | Address State for a <a>Card</a>
newtype AddressState
AddressState :: Text -> AddressState

-- | Address Zip Code for a <a>Card</a>
newtype AddressZip
AddressZip :: Text -> AddressZip

-- | <a>RecipientId</a> for a <a>Recipient</a>
data RecipientId
RecipientId :: Text -> RecipientId
ExpandedRecipient :: Recipient -> RecipientId


-- | <a>https://stripe.com/docs/api#charges</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Customer 
--   import Web.Stripe.Charge
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--         credit = CardNumber "4242424242424242"
--         em  = ExpMonth 12
--         ey  = ExpYear 2015
--         cvc = CVC "123"
--     result &lt;- stripe config $ do
--           Customer { customerId = cid } &lt;- createCustomerByCard cn em ey cvc
--           charge &lt;- chargeCustomer cid USD 100 Nothing
--           return charge
--     case result of
--       Right charge      -&gt; print charge
--       Left  stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Charge

-- | Charge <a>Customer</a>`s by <a>CustomerId</a>, will charge the default
--   <tt>Card</tt> if exists
chargeCustomer :: CustomerId -> Currency -> Amount -> Maybe Description -> Stripe Charge

-- | Charge a card by a <a>TokenId</a>
chargeCardByToken :: TokenId -> Currency -> Amount -> Maybe Description -> Stripe Charge

-- | Charge <a>Customer</a>s by <a>CustomerId</a>
chargeCustomerByCardId :: CustomerId -> CardId -> Currency -> Amount -> Maybe Description -> Stripe Charge

-- | Charge a card by <a>CardNumber</a>
chargeCard :: CardNumber -> ExpMonth -> ExpYear -> CVC -> Currency -> Amount -> Maybe Description -> Stripe Charge

-- | Base method for creating a <a>Charge</a>
chargeBase :: Amount -> Currency -> Maybe Description -> Maybe CustomerId -> Maybe TokenId -> Maybe StatementDescription -> Maybe Email -> Capture -> Maybe CardNumber -> Maybe ExpMonth -> Maybe ExpYear -> Maybe CVC -> MetaData -> Stripe Charge

-- | Retrieve a <a>Charge</a> by <a>ChargeId</a>
getCharge :: ChargeId -> Stripe Charge

-- | Retrieve a <a>Charge</a> by <a>ChargeId</a> with <a>ExpandParams</a>
getChargeExpandable :: ChargeId -> ExpandParams -> Stripe Charge

-- | Retrieve all <a>Charge</a>s
getCharges :: Limit -> StartingAfter ChargeId -> EndingBefore ChargeId -> Stripe (StripeList Charge)

-- | Retrieve all <a>Charge</a>s
getChargesExpandable :: Limit -> StartingAfter ChargeId -> EndingBefore ChargeId -> ExpandParams -> Stripe (StripeList Charge)

-- | Retrieve all <a>Charge</a>s for a specified <a>Customer</a>
getCustomerCharges :: CustomerId -> Limit -> StartingAfter ChargeId -> EndingBefore ChargeId -> Stripe (StripeList Charge)

-- | Retrieve all <a>Charge</a>s for a specified <a>Customer</a> with
--   <a>ExpandParams</a>
getCustomerChargesExpandable :: CustomerId -> Limit -> StartingAfter ChargeId -> EndingBefore ChargeId -> ExpandParams -> Stripe (StripeList Charge)

-- | A <a>Charge</a> to be updated
updateCharge :: ChargeId -> Description -> MetaData -> Stripe Charge

-- | a <a>Charge</a> to be captured
captureCharge :: ChargeId -> Maybe Amount -> Maybe Email -> Stripe Charge

-- | <a>Charge</a> object in <tt>Stripe</tt> API
data Charge
Charge :: ChargeId -> Text -> UTCTime -> Bool -> Bool -> Int -> Currency -> Bool -> Card -> Bool -> StripeList Refund -> Maybe TransactionId -> Maybe Text -> Maybe Text -> Int -> Maybe CustomerId -> Maybe InvoiceId -> Maybe Description -> Maybe Dispute -> MetaData -> Maybe Description -> Maybe Text -> Maybe Text -> Charge
chargeId :: Charge -> ChargeId
chargeObject :: Charge -> Text
chargeCreated :: Charge -> UTCTime
chargeLiveMode :: Charge -> Bool
chargePaid :: Charge -> Bool
chargeAmount :: Charge -> Int
chargeCurrency :: Charge -> Currency
chargeRefunded :: Charge -> Bool
chargeCreditCard :: Charge -> Card
chargeCaptured :: Charge -> Bool
chargeRefunds :: Charge -> StripeList Refund
chargeBalanceTransaction :: Charge -> Maybe TransactionId
chargeFailureMessage :: Charge -> Maybe Text
chargeFailureCode :: Charge -> Maybe Text
chargeAmountRefunded :: Charge -> Int
chargeCustomerId :: Charge -> Maybe CustomerId
chargeInvoice :: Charge -> Maybe InvoiceId
chargeDescription :: Charge -> Maybe Description
chargeDispute :: Charge -> Maybe Dispute
chargeMetaData :: Charge -> MetaData
chargeStatementDescription :: Charge -> Maybe Description
chargeReceiptEmail :: Charge -> Maybe Text
chargeReceiptNumber :: Charge -> Maybe Text

-- | <a>TokenId</a> of a <a>Token</a>
newtype TokenId
TokenId :: Text -> TokenId

-- | <a>ChargeId</a> associated with a <a>Charge</a>
data ChargeId
ChargeId :: Text -> ChargeId
ExpandedCharge :: Charge -> ChargeId

-- | <a>CustomerId</a> for a <a>Customer</a>
data CustomerId
CustomerId :: Text -> CustomerId
ExpandedCustomer :: Customer -> CustomerId

-- | <a>Customer</a> object
data Customer
Customer :: Text -> UTCTime -> CustomerId -> Bool -> Maybe Description -> Maybe Email -> Bool -> StripeList Subscription -> Maybe Discount -> Int -> StripeList Card -> Maybe Currency -> Maybe CardId -> MetaData -> Customer
customerObject :: Customer -> Text
customerCreated :: Customer -> UTCTime
customerId :: Customer -> CustomerId
customerLiveMode :: Customer -> Bool
customerDescription :: Customer -> Maybe Description
customerEmail :: Customer -> Maybe Email
customerDelinquent :: Customer -> Bool
customerSubscriptions :: Customer -> StripeList Subscription
customerDiscount :: Customer -> Maybe Discount
customerAccountBalance :: Customer -> Int
customerCards :: Customer -> StripeList Card
customerCurrency :: Customer -> Maybe Currency
customerDefaultCard :: Customer -> Maybe CardId
customerMetaData :: Customer -> MetaData
DeletedCustomer :: Maybe Bool -> CustomerId -> Customer
deletedCustomer :: Customer -> Maybe Bool
deletedCustomerId :: Customer -> CustomerId

-- | Stripe supports 138 currencies
data Currency

-- | United Arab Emirates Dirham
AED :: Currency

-- | Afghan Afghani
AFN :: Currency

-- | Albanian Lek
ALL :: Currency

-- | Armenian Dram
AMD :: Currency

-- | Netherlands Antillean Gulden
ANG :: Currency

-- | Angolan Kwanza
AOA :: Currency

-- | Argentine Peso
ARS :: Currency

-- | Australian Dollar
AUD :: Currency

-- | Aruban Florin
AWG :: Currency

-- | Azerbaijani Manat
AZN :: Currency

-- | Bosnia &amp; Herzegovina Convertible Mark
BAM :: Currency

-- | Barbadian Dollar
BBD :: Currency

-- | Bangladeshi Taka
BDT :: Currency

-- | Bulgarian Lev
BGN :: Currency

-- | Burundian Franc
BIF :: Currency

-- | Bermudian Dollar
BMD :: Currency

-- | Brunei Dollar
BND :: Currency

-- | Bolivian Boliviano
BOB :: Currency

-- | Brazilian Real
BRL :: Currency

-- | Bahamian Dollar
BSD :: Currency

-- | Botswana Pula
BWP :: Currency

-- | Belize Dollar
BZD :: Currency

-- | Canadian Dollar
CAD :: Currency

-- | Congolese Franc
CDF :: Currency

-- | Swiss Franc
CHF :: Currency

-- | Chilean Peso
CLP :: Currency

-- | Chinese Renminbi Yuan
CNY :: Currency

-- | Colombian Peso
COP :: Currency

-- | Costa Rican Colón
CRC :: Currency

-- | Cape Verdean Escudo
CVE :: Currency

-- | Czech Koruna
CZK :: Currency

-- | Djiboutian Franc
DJF :: Currency

-- | Danish Krone
DKK :: Currency

-- | Dominican Peso
DOP :: Currency

-- | Algerian Dinar
DZD :: Currency

-- | Estonian Kroon
EEK :: Currency

-- | Egyptian Pound
EGP :: Currency

-- | Ethiopian Birr
ETB :: Currency

-- | Euro
EUR :: Currency

-- | Fijian Dollar
FJD :: Currency

-- | Falkland Islands Pound
FKP :: Currency

-- | British Pound
GBP :: Currency

-- | Georgian Lari
GEL :: Currency

-- | Gibraltar Pound
GIP :: Currency

-- | Gambian Dalasi
GMD :: Currency

-- | Guinean Franc
GNF :: Currency

-- | Guatemalan Quetzal
GTQ :: Currency

-- | Guyanese Dollar
GYD :: Currency

-- | Hong Kong Dollar
HKD :: Currency

-- | Honduran Lempira
HNL :: Currency

-- | Croatian Kuna
HRK :: Currency

-- | Haitian Gourde
HTG :: Currency

-- | Hungarian Forint
HUF :: Currency

-- | Indonesian Rupiah
IDR :: Currency

-- | Israeli New Sheqel
ILS :: Currency

-- | Indian Rupee
INR :: Currency

-- | Icelandic Króna
ISK :: Currency

-- | Jamaican Dollar
JMD :: Currency

-- | Japanese Yen
JPY :: Currency

-- | Kenyan Shilling
KES :: Currency

-- | Kyrgyzstani Som
KGS :: Currency

-- | Cambodian Riel
KHR :: Currency

-- | Comorian Franc
KMF :: Currency

-- | South Korean Won
KRW :: Currency

-- | Cayman Islands Dollar
KYD :: Currency

-- | Kazakhstani Tenge
KZT :: Currency

-- | Lao Kip
LAK :: Currency

-- | Lebanese Pound
LBP :: Currency

-- | Sri Lankan Rupee
LKR :: Currency

-- | Liberian Dollar
LRD :: Currency

-- | Lesotho Loti
LSL :: Currency

-- | Lithuanian Litas
LTL :: Currency

-- | Latvian Lats
LVL :: Currency

-- | Moroccan Dirham
MAD :: Currency

-- | Moldovan Leu
MDL :: Currency

-- | Malagasy Ariary
MGA :: Currency

-- | Macedonian Denar
MKD :: Currency

-- | Mongolian Tögrög
MNT :: Currency

-- | Macanese Pataca
MOP :: Currency

-- | Mauritanian Ouguiya
MRO :: Currency

-- | Mauritian Rupee
MUR :: Currency

-- | Maldivian Rufiyaa
MVR :: Currency

-- | Malawian Kwacha
MWK :: Currency

-- | Mexican Peso
MXN :: Currency

-- | Malaysian Ringgit
MYR :: Currency

-- | Mozambican Metical
MZN :: Currency

-- | Namibian Dollar
NAD :: Currency

-- | Nigerian Naira
NGN :: Currency

-- | Nicaraguan Córdoba
NIO :: Currency

-- | Norwegian Krone
NOK :: Currency

-- | Nepalese Rupee
NPR :: Currency

-- | New Zealand Dollar
NZD :: Currency

-- | Panamanian Balboa
PAB :: Currency

-- | Peruvian Nuevo Sol
PEN :: Currency

-- | Papua New Guinean Kina
PGK :: Currency

-- | Philippine Peso
PHP :: Currency

-- | Pakistani Rupee
PKR :: Currency

-- | Polish Złoty
PLN :: Currency

-- | Paraguayan Guaraní
PYG :: Currency

-- | Qatari Riyal
QAR :: Currency

-- | Romanian Leu
RON :: Currency

-- | Serbian Dinar
RSD :: Currency

-- | Russian Ruble
RUB :: Currency

-- | Rwandan Franc
RWF :: Currency

-- | Saudi Riyal
SAR :: Currency

-- | Solomon Islands Dollar
SBD :: Currency

-- | Seychellois Rupee
SCR :: Currency

-- | Swedish Krona
SEK :: Currency

-- | Singapore Dollar
SGD :: Currency

-- | Saint Helenian Pound
SHP :: Currency

-- | Sierra Leonean Leone
SLL :: Currency

-- | Somali Shilling
SOS :: Currency

-- | Surinamese Dollar
SRD :: Currency

-- | São Tomé and Príncipe Dobra
STD :: Currency

-- | Salvadoran Colón
SVC :: Currency

-- | Swazi Lilangeni
SZL :: Currency

-- | Thai Baht
THB :: Currency

-- | Tajikistani Somoni
TJS :: Currency

-- | Tongan Paʻanga
TOP :: Currency

-- | Turkish Lira
TRY :: Currency

-- | Trinidad and Tobago Dollar
TTD :: Currency

-- | New Taiwan Dollar
TWD :: Currency

-- | Tanzanian Shilling
TZS :: Currency

-- | Ukrainian Hryvnia
UAH :: Currency

-- | Ugandan Shilling
UGX :: Currency

-- | United States Dollar
USD :: Currency

-- | Uruguayan Peso
UYU :: Currency

-- | Uzbekistani Som
UZS :: Currency

-- | Vietnamese Đồng
VND :: Currency

-- | Vanuatu Vatu
VUV :: Currency

-- | Samoan Tala
WST :: Currency

-- | Central African Cfa Franc
XAF :: Currency

-- | East Caribbean Dollar
XCD :: Currency

-- | West African Cfa Franc
XOF :: Currency

-- | Cfp Franc
XPF :: Currency

-- | Yemeni Rial
YER :: Currency

-- | South African Rand
ZAR :: Currency

-- | Zambian Kwacha
ZMW :: Currency

-- | Unknown Currency
UnknownCurrency :: Currency

-- | Number associated with a <a>Card</a>
newtype CardNumber
CardNumber :: Text -> CardNumber

-- | CVC for a <a>Card</a>
newtype CVC
CVC :: Text -> CVC

-- | Expiration Month for a <a>Card</a>
newtype ExpMonth
ExpMonth :: Int -> ExpMonth

-- | Expiration Year for a <a>Card</a>
newtype ExpYear
ExpYear :: Int -> ExpYear

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | <a>Email</a> associated with a <a>Customer</a>, <a>Recipient</a> or
--   <a>Charge</a>
newtype Email
Email :: Text -> Email

-- | Generic Description for use in constructing API Calls
type Description = Text

-- | <a>StatementDescription</a> to be added to a <a>Charge</a>
data StatementDescription

-- | Amount representing a monetary value. Stripe represents pennies as
--   whole numbers i.e. 100 = $1
type Amount = Int

-- | Capture for <a>Charge</a>
type Capture = Bool


-- | <a>https://stripe.com/docs/api#coupons</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Coupon
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- createCoupon
--              (Just $ CouponId "$1 Off!")
--              Once
--              (Just $ AmountOff 1)
--              (Just USD)
--              Nothing
--              Nothing
--              Nothing
--              Nothing
--              []
--     case result of
--       Right coupon      -&gt; print coupon
--       Left  stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Coupon

-- | <a>Coupon</a> creation
createCoupon :: Maybe CouponId -> Duration -> Maybe AmountOff -> Maybe Currency -> Maybe DurationInMonths -> Maybe MaxRedemptions -> Maybe PercentOff -> Maybe RedeemBy -> MetaData -> Stripe Coupon

-- | Retrieve a <a>Coupon</a> by <a>CouponId</a>
getCoupon :: CouponId -> Stripe Coupon

-- | Retrieve a list of <a>Coupon</a>s
getCoupons :: Maybe Limit -> StartingAfter CouponId -> EndingBefore CouponId -> Stripe (StripeList Coupon)

-- | Update <a>Coupon</a>
updateCoupon :: CouponId -> MetaData -> Stripe Coupon

-- | Delete 'Coupon" by <a>CouponId</a>
deleteCoupon :: CouponId -> Stripe StripeDeleteResult

-- | <a>Coupon</a> Duration
data Duration
Forever :: Duration
Once :: Duration
Repeating :: Duration

-- | <a>AmountOff</a> for a <a>Coupon</a>
newtype AmountOff
AmountOff :: Int -> AmountOff

-- | <a>CouponId</a> for a <a>Coupon</a>
newtype CouponId
CouponId :: Text -> CouponId

-- | <a>Coupon</a> Object
data Coupon
Coupon :: CouponId -> UTCTime -> Maybe Int -> Maybe Int -> Maybe Currency -> Bool -> Duration -> Maybe UTCTime -> Maybe Int -> Maybe Int -> Maybe Int -> Bool -> MetaData -> Coupon
couponId :: Coupon -> CouponId
couponCreated :: Coupon -> UTCTime
couponPercentOff :: Coupon -> Maybe Int
couponAmountOff :: Coupon -> Maybe Int
couponCurrency :: Coupon -> Maybe Currency
couponLiveMode :: Coupon -> Bool
couponDuration :: Coupon -> Duration
couponRedeemBy :: Coupon -> Maybe UTCTime
couponMaxRedemptions :: Coupon -> Maybe Int
couponTimesRedeemed :: Coupon -> Maybe Int
couponDurationInMonths :: Coupon -> Maybe Int
couponValid :: Coupon -> Bool
couponMetaData :: Coupon -> MetaData

-- | Stripe supports 138 currencies
data Currency

-- | United Arab Emirates Dirham
AED :: Currency

-- | Afghan Afghani
AFN :: Currency

-- | Albanian Lek
ALL :: Currency

-- | Armenian Dram
AMD :: Currency

-- | Netherlands Antillean Gulden
ANG :: Currency

-- | Angolan Kwanza
AOA :: Currency

-- | Argentine Peso
ARS :: Currency

-- | Australian Dollar
AUD :: Currency

-- | Aruban Florin
AWG :: Currency

-- | Azerbaijani Manat
AZN :: Currency

-- | Bosnia &amp; Herzegovina Convertible Mark
BAM :: Currency

-- | Barbadian Dollar
BBD :: Currency

-- | Bangladeshi Taka
BDT :: Currency

-- | Bulgarian Lev
BGN :: Currency

-- | Burundian Franc
BIF :: Currency

-- | Bermudian Dollar
BMD :: Currency

-- | Brunei Dollar
BND :: Currency

-- | Bolivian Boliviano
BOB :: Currency

-- | Brazilian Real
BRL :: Currency

-- | Bahamian Dollar
BSD :: Currency

-- | Botswana Pula
BWP :: Currency

-- | Belize Dollar
BZD :: Currency

-- | Canadian Dollar
CAD :: Currency

-- | Congolese Franc
CDF :: Currency

-- | Swiss Franc
CHF :: Currency

-- | Chilean Peso
CLP :: Currency

-- | Chinese Renminbi Yuan
CNY :: Currency

-- | Colombian Peso
COP :: Currency

-- | Costa Rican Colón
CRC :: Currency

-- | Cape Verdean Escudo
CVE :: Currency

-- | Czech Koruna
CZK :: Currency

-- | Djiboutian Franc
DJF :: Currency

-- | Danish Krone
DKK :: Currency

-- | Dominican Peso
DOP :: Currency

-- | Algerian Dinar
DZD :: Currency

-- | Estonian Kroon
EEK :: Currency

-- | Egyptian Pound
EGP :: Currency

-- | Ethiopian Birr
ETB :: Currency

-- | Euro
EUR :: Currency

-- | Fijian Dollar
FJD :: Currency

-- | Falkland Islands Pound
FKP :: Currency

-- | British Pound
GBP :: Currency

-- | Georgian Lari
GEL :: Currency

-- | Gibraltar Pound
GIP :: Currency

-- | Gambian Dalasi
GMD :: Currency

-- | Guinean Franc
GNF :: Currency

-- | Guatemalan Quetzal
GTQ :: Currency

-- | Guyanese Dollar
GYD :: Currency

-- | Hong Kong Dollar
HKD :: Currency

-- | Honduran Lempira
HNL :: Currency

-- | Croatian Kuna
HRK :: Currency

-- | Haitian Gourde
HTG :: Currency

-- | Hungarian Forint
HUF :: Currency

-- | Indonesian Rupiah
IDR :: Currency

-- | Israeli New Sheqel
ILS :: Currency

-- | Indian Rupee
INR :: Currency

-- | Icelandic Króna
ISK :: Currency

-- | Jamaican Dollar
JMD :: Currency

-- | Japanese Yen
JPY :: Currency

-- | Kenyan Shilling
KES :: Currency

-- | Kyrgyzstani Som
KGS :: Currency

-- | Cambodian Riel
KHR :: Currency

-- | Comorian Franc
KMF :: Currency

-- | South Korean Won
KRW :: Currency

-- | Cayman Islands Dollar
KYD :: Currency

-- | Kazakhstani Tenge
KZT :: Currency

-- | Lao Kip
LAK :: Currency

-- | Lebanese Pound
LBP :: Currency

-- | Sri Lankan Rupee
LKR :: Currency

-- | Liberian Dollar
LRD :: Currency

-- | Lesotho Loti
LSL :: Currency

-- | Lithuanian Litas
LTL :: Currency

-- | Latvian Lats
LVL :: Currency

-- | Moroccan Dirham
MAD :: Currency

-- | Moldovan Leu
MDL :: Currency

-- | Malagasy Ariary
MGA :: Currency

-- | Macedonian Denar
MKD :: Currency

-- | Mongolian Tögrög
MNT :: Currency

-- | Macanese Pataca
MOP :: Currency

-- | Mauritanian Ouguiya
MRO :: Currency

-- | Mauritian Rupee
MUR :: Currency

-- | Maldivian Rufiyaa
MVR :: Currency

-- | Malawian Kwacha
MWK :: Currency

-- | Mexican Peso
MXN :: Currency

-- | Malaysian Ringgit
MYR :: Currency

-- | Mozambican Metical
MZN :: Currency

-- | Namibian Dollar
NAD :: Currency

-- | Nigerian Naira
NGN :: Currency

-- | Nicaraguan Córdoba
NIO :: Currency

-- | Norwegian Krone
NOK :: Currency

-- | Nepalese Rupee
NPR :: Currency

-- | New Zealand Dollar
NZD :: Currency

-- | Panamanian Balboa
PAB :: Currency

-- | Peruvian Nuevo Sol
PEN :: Currency

-- | Papua New Guinean Kina
PGK :: Currency

-- | Philippine Peso
PHP :: Currency

-- | Pakistani Rupee
PKR :: Currency

-- | Polish Złoty
PLN :: Currency

-- | Paraguayan Guaraní
PYG :: Currency

-- | Qatari Riyal
QAR :: Currency

-- | Romanian Leu
RON :: Currency

-- | Serbian Dinar
RSD :: Currency

-- | Russian Ruble
RUB :: Currency

-- | Rwandan Franc
RWF :: Currency

-- | Saudi Riyal
SAR :: Currency

-- | Solomon Islands Dollar
SBD :: Currency

-- | Seychellois Rupee
SCR :: Currency

-- | Swedish Krona
SEK :: Currency

-- | Singapore Dollar
SGD :: Currency

-- | Saint Helenian Pound
SHP :: Currency

-- | Sierra Leonean Leone
SLL :: Currency

-- | Somali Shilling
SOS :: Currency

-- | Surinamese Dollar
SRD :: Currency

-- | São Tomé and Príncipe Dobra
STD :: Currency

-- | Salvadoran Colón
SVC :: Currency

-- | Swazi Lilangeni
SZL :: Currency

-- | Thai Baht
THB :: Currency

-- | Tajikistani Somoni
TJS :: Currency

-- | Tongan Paʻanga
TOP :: Currency

-- | Turkish Lira
TRY :: Currency

-- | Trinidad and Tobago Dollar
TTD :: Currency

-- | New Taiwan Dollar
TWD :: Currency

-- | Tanzanian Shilling
TZS :: Currency

-- | Ukrainian Hryvnia
UAH :: Currency

-- | Ugandan Shilling
UGX :: Currency

-- | United States Dollar
USD :: Currency

-- | Uruguayan Peso
UYU :: Currency

-- | Uzbekistani Som
UZS :: Currency

-- | Vietnamese Đồng
VND :: Currency

-- | Vanuatu Vatu
VUV :: Currency

-- | Samoan Tala
WST :: Currency

-- | Central African Cfa Franc
XAF :: Currency

-- | East Caribbean Dollar
XCD :: Currency

-- | West African Cfa Franc
XOF :: Currency

-- | Cfp Franc
XPF :: Currency

-- | Yemeni Rial
YER :: Currency

-- | South African Rand
ZAR :: Currency

-- | Zambian Kwacha
ZMW :: Currency

-- | Unknown Currency
UnknownCurrency :: Currency

-- | <a>DurationInMonths</a> for a <a>Coupon</a>
newtype DurationInMonths
DurationInMonths :: Int -> DurationInMonths

-- | <a>MaxRedemptions</a> for a <a>Coupon</a>
newtype MaxRedemptions
MaxRedemptions :: Int -> MaxRedemptions

-- | <a>PercentOff</a> for a <a>Coupon</a>
newtype PercentOff
PercentOff :: Int -> PercentOff

-- | <a>RedeemBy</a> date for a <a>Coupon</a>
newtype RedeemBy
RedeemBy :: UTCTime -> RedeemBy

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | JSON returned from a <tt>Stripe</tt> deletion request
data StripeDeleteResult
StripeDeleteResult :: Bool -> Maybe Text -> StripeDeleteResult
deleted :: StripeDeleteResult -> Bool
deletedId :: StripeDeleteResult -> Maybe Text


-- | <a>https://stripe.com/docs/api#customers</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Customer
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config createEmptyCustomer
--     case result of
--       Right customer    -&gt; print customer
--       Left  stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Customer

-- | Creates a blank customer
createEmptyCustomer :: Stripe Customer

-- | Creates a customer by his/her email
createCustomerByEmail :: Email -> Stripe Customer

-- | Creates a customer by a Token created from stripe.js or the stripe
--   API.
createCustomerByToken :: TokenId -> Stripe Customer

-- | Creates a <a>Customer</a> with a <tt>Card</tt>
createCustomerByCard :: CardNumber -> ExpMonth -> ExpYear -> CVC -> Stripe Customer

-- | The base request for customer creation
createCustomerBase :: Maybe AccountBalance -> Maybe TokenId -> Maybe CardNumber -> Maybe ExpMonth -> Maybe ExpYear -> Maybe CVC -> Maybe CouponId -> Maybe Description -> Maybe Email -> Maybe PlanId -> Maybe Quantity -> Maybe TrialPeriod -> MetaData -> Stripe Customer

-- | Updates a customer
updateCustomerBase :: CustomerId -> Maybe AccountBalance -> Maybe TokenId -> Maybe CardNumber -> Maybe ExpMonth -> Maybe ExpYear -> Maybe CVC -> Maybe CouponId -> Maybe CardId -> Maybe Description -> Maybe Email -> MetaData -> Stripe Customer

-- | Update Customer Account Balance
updateCustomerAccountBalance :: CustomerId -> AccountBalance -> Stripe Customer

-- | Update Customer Account Balance
updateCustomerDefaultCard :: CustomerId -> CardId -> Stripe Customer

-- | Deletes the specified customer
deleteCustomer :: CustomerId -> Stripe StripeDeleteResult

-- | Retrieves a customer by his/her ID.
getCustomer :: CustomerId -> Stripe Customer

-- | Retrieves a customer by his/her <tt>CustomerID</tt> with
--   <a>ExpandParams</a>
getCustomerExpandable :: CustomerId -> ExpandParams -> Stripe Customer

-- | Retrieve up to 100 customers at a time
getCustomers :: Limit -> StartingAfter CustomerId -> EndingBefore CustomerId -> Stripe (StripeList Customer)

-- | Retrieve up to 100 customers at a time
getCustomersExpandable :: Limit -> StartingAfter CustomerId -> EndingBefore CustomerId -> ExpandParams -> Stripe (StripeList Customer)

-- | <a>Customer</a> object
data Customer
Customer :: Text -> UTCTime -> CustomerId -> Bool -> Maybe Description -> Maybe Email -> Bool -> StripeList Subscription -> Maybe Discount -> Int -> StripeList Card -> Maybe Currency -> Maybe CardId -> MetaData -> Customer
customerObject :: Customer -> Text
customerCreated :: Customer -> UTCTime
customerId :: Customer -> CustomerId
customerLiveMode :: Customer -> Bool
customerDescription :: Customer -> Maybe Description
customerEmail :: Customer -> Maybe Email
customerDelinquent :: Customer -> Bool
customerSubscriptions :: Customer -> StripeList Subscription
customerDiscount :: Customer -> Maybe Discount
customerAccountBalance :: Customer -> Int
customerCards :: Customer -> StripeList Card
customerCurrency :: Customer -> Maybe Currency
customerDefaultCard :: Customer -> Maybe CardId
customerMetaData :: Customer -> MetaData
DeletedCustomer :: Maybe Bool -> CustomerId -> Customer
deletedCustomer :: Customer -> Maybe Bool
deletedCustomerId :: Customer -> CustomerId

-- | <a>CustomerId</a> for a <a>Customer</a>
data CustomerId
CustomerId :: Text -> CustomerId
ExpandedCustomer :: Customer -> CustomerId

-- | CardId for a <a>Customer</a>
data CardId
CardId :: Text -> CardId
ExpandedCard :: Card -> CardId

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | <a>TokenId</a> of a <a>Token</a>
newtype TokenId
TokenId :: Text -> TokenId

-- | Number associated with a <a>Card</a>
newtype CardNumber
CardNumber :: Text -> CardNumber

-- | Expiration Month for a <a>Card</a>
newtype ExpMonth
ExpMonth :: Int -> ExpMonth

-- | Expiration Year for a <a>Card</a>
newtype ExpYear
ExpYear :: Int -> ExpYear

-- | CVC for a <a>Card</a>
newtype CVC
CVC :: Text -> CVC

-- | <a>CouponId</a> for a <a>Coupon</a>
newtype CouponId
CouponId :: Text -> CouponId

-- | <a>Email</a> associated with a <a>Customer</a>, <a>Recipient</a> or
--   <a>Charge</a>
newtype Email
Email :: Text -> Email

-- | <a>PlanId</a> for a <a>Plan</a>
newtype PlanId
PlanId :: Text -> PlanId

-- | Generic <a>Quantity</a> type to be used with <a>Customer</a>,
--   <a>Subscription</a> and <a>InvoiceLineItem</a> API requests
newtype Quantity
Quantity :: Int -> Quantity

-- | JSON returned from a <tt>Stripe</tt> deletion request
data StripeDeleteResult
StripeDeleteResult :: Bool -> Maybe Text -> StripeDeleteResult
deleted :: StripeDeleteResult -> Bool
deletedId :: StripeDeleteResult -> Maybe Text

-- | <a>TrialPeriod</a> for a Plan
newtype TrialPeriod
TrialPeriod :: UTCTime -> TrialPeriod

-- | Generic Description for use in constructing API Calls
type Description = Text

-- | AccountBalance for a <a>Customer</a>
type AccountBalance = Int

-- | Pagination Option for <a>StripeList</a>
type Limit = Maybe Int


-- | <a>https://stripe.com/docs/api#discounts</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Discount
--   import Web.Stripe.Customer
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ deleteCustomerDiscount (CustomerId "customer_id")
--     case result of
--       Right deleteResult -&gt; print deleteResult
--       Left  stripeError  -&gt; print stripeError
--   </pre>
module Web.Stripe.Discount

-- | Delete <tt>Customer</tt> <a>Discount</a> by <a>CustomerId</a>
deleteCustomerDiscount :: CustomerId -> Stripe StripeDeleteResult

-- | Delete <tt>Subscription</tt> <a>Discount</a> by <a>CustomerId</a> and
--   <a>SubscriptionId</a>
deleteSubscriptionDiscount :: CustomerId -> SubscriptionId -> Stripe StripeDeleteResult

-- | JSON returned from a <tt>Stripe</tt> deletion request
data StripeDeleteResult
StripeDeleteResult :: Bool -> Maybe Text -> StripeDeleteResult
deleted :: StripeDeleteResult -> Bool
deletedId :: StripeDeleteResult -> Maybe Text

-- | <a>CustomerId</a> for a <a>Customer</a>
data CustomerId
CustomerId :: Text -> CustomerId
ExpandedCustomer :: Customer -> CustomerId

-- | <a>SubscriptionId</a> for a <a>Subscription</a>
newtype SubscriptionId
SubscriptionId :: Text -> SubscriptionId

-- | <a>Discount</a> for <a>Coupon</a>
data Discount
Discount :: Coupon -> UTCTime -> Maybe UTCTime -> CustomerId -> Text -> Maybe SubscriptionId -> Discount
discountCoupon :: Discount -> Coupon
discountStart :: Discount -> UTCTime
discountEnd :: Discount -> Maybe UTCTime
discountCustomer :: Discount -> CustomerId
discountObject :: Discount -> Text
discountSubscription :: Discount -> Maybe SubscriptionId


-- | <a>https://stripe.com/docs/api#diputes</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Charge
--   import Web.Stripe.Dispute
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ do
--       Charge { chargeDispute = dispute } &lt;- getCharge (ChargeId "charge_id")
--       return dispute
--     case result of
--       Right (Just dispute) -&gt; print dispute
--       Right Nothing        -&gt; print "no dispute on this charge"
--       Left  stripeError    -&gt; print stripeError
--   </pre>
module Web.Stripe.Dispute

-- | <a>Dispute</a> to be updated
updateDispute :: ChargeId -> Maybe Evidence -> MetaData -> Stripe Dispute

-- | <a>Dispute</a> to be closed
closeDispute :: ChargeId -> Stripe Dispute

-- | <a>ChargeId</a> associated with a <a>Charge</a>
data ChargeId
ChargeId :: Text -> ChargeId
ExpandedCharge :: Charge -> ChargeId

-- | <a>Dispute</a> Object
data Dispute
Dispute :: ChargeId -> Int -> UTCTime -> DisputeStatus -> Bool -> Currency -> Text -> DisputeReason -> Bool -> [BalanceTransaction] -> UTCTime -> Maybe Evidence -> MetaData -> Dispute
disputeChargeId :: Dispute -> ChargeId
disputeAmount :: Dispute -> Int
disputeCreated :: Dispute -> UTCTime
disputeStatus :: Dispute -> DisputeStatus
disputeLiveMode :: Dispute -> Bool
disputeCurrency :: Dispute -> Currency
disputeObject :: Dispute -> Text
disputeReason :: Dispute -> DisputeReason
disputeIsChargeRefundable :: Dispute -> Bool
disputeBalanceTransactions :: Dispute -> [BalanceTransaction]
disputeEvidenceDueBy :: Dispute -> UTCTime
disputeEvidence :: Dispute -> Maybe Evidence
disputeMetaData :: Dispute -> MetaData

-- | Reason of a <a>Dispute</a>
data DisputeReason
Duplicate :: DisputeReason
Fraudulent :: DisputeReason
SubscriptionCanceled :: DisputeReason
ProductUnacceptable :: DisputeReason
ProductNotReceived :: DisputeReason
Unrecognized :: DisputeReason
CreditNotProcessed :: DisputeReason
General :: DisputeReason

-- | Status of a <a>Dispute</a>
data DisputeStatus
WarningNeedsResponse :: DisputeStatus
WarningUnderReview :: DisputeStatus
NeedsResponse :: DisputeStatus
UnderReview :: DisputeStatus
ChargeRefunded :: DisputeStatus
Won :: DisputeStatus
Lost :: DisputeStatus

-- | <a>Evidence</a> associated with a <a>Dispute</a>
newtype Evidence
Evidence :: Text -> Evidence


-- | <a>https://stripe.com/docs/api#events</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Event
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ getEvents Nothing Nothing Nothing
--     case result of
--       Right events     -&gt; print events
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Event

-- | <a>Event</a> to retrieve by <a>EventId</a>
getEvent :: EventId -> Stripe Event

-- | <a>StripeList</a> of <a>Event</a>s to retrieve
getEvents :: Maybe Limit -> StartingAfter EventId -> EndingBefore EventId -> Stripe (StripeList Event)

-- | <a>EventId</a> of an <a>Event</a>
newtype EventId
EventId :: Text -> EventId

-- | <a>Event</a> Object
data Event
Event :: Maybe EventId -> UTCTime -> Bool -> EventType -> EventData -> Text -> Int -> Maybe Text -> Event
eventId :: Event -> Maybe EventId
eventCreated :: Event -> UTCTime
eventLiveMode :: Event -> Bool
eventType :: Event -> EventType
eventData :: Event -> EventData
eventObject :: Event -> Text
eventPendingWebHooks :: Event -> Int
eventRequest :: Event -> Maybe Text

-- | EventData
data EventData
TransferEvent :: Transfer -> EventData
AccountEvent :: Account -> EventData
AccountApplicationEvent :: ConnectApp -> EventData
ApplicationFeeEvent :: ApplicationFee -> EventData
InvoiceEvent :: Invoice -> EventData
PlanEvent :: Plan -> EventData
RecipientEvent :: Recipient -> EventData
CouponEvent :: Coupon -> EventData
BalanceEvent :: Balance -> EventData
ChargeEvent :: Charge -> EventData
DisputeEvent :: Dispute -> EventData
CustomerEvent :: Customer -> EventData
CardEvent :: Card -> EventData
SubscriptionEvent :: Subscription -> EventData
DiscountEvent :: Discount -> EventData
InvoiceItemEvent :: InvoiceItem -> EventData
UnknownEventData :: EventData
Ping :: EventData

-- | <a>Event</a> Types
data EventType
AccountUpdatedEvent :: EventType
AccountApplicationDeauthorizedEvent :: EventType
ApplicationFeeCreatedEvent :: EventType
ApplicationFeeRefundedEvent :: EventType
BalanceAvailableEvent :: EventType
ChargeSucceededEvent :: EventType
ChargeFailedEvent :: EventType
ChargeRefundedEvent :: EventType
ChargeCapturedEvent :: EventType
ChargeUpdatedEvent :: EventType
ChargeDisputeCreatedEvent :: EventType
ChargeDisputeUpdatedEvent :: EventType
ChargeDisputeClosedEvent :: EventType
ChargeDisputeFundsWithdrawnEvent :: EventType
ChargeDisputeFundsReinstatedEvent :: EventType
CustomerCreatedEvent :: EventType
CustomerUpdatedEvent :: EventType
CustomerDeletedEvent :: EventType
CustomerCardCreatedEvent :: EventType
CustomerCardUpdatedEvent :: EventType
CustomerCardDeletedEvent :: EventType
CustomerSubscriptionCreatedEvent :: EventType
CustomerSubscriptionUpdatedEvent :: EventType
CustomerSubscriptionDeletedEvent :: EventType
CustomerSubscriptionTrialWillEndEvent :: EventType
CustomerDiscountCreatedEvent :: EventType
CustomerDiscountUpdatedEvent :: EventType
CustomerDiscountDeletedEvent :: EventType
InvoiceCreatedEvent :: EventType
InvoiceUpdatedEvent :: EventType
InvoicePaymentSucceededEvent :: EventType
InvoicePaymentFailedEvent :: EventType
InvoiceItemCreatedEvent :: EventType
InvoiceItemUpdatedEvent :: EventType
InvoiceItemDeletedEvent :: EventType
PlanCreatedEvent :: EventType
PlanUpdatedEvent :: EventType
PlanDeletedEvent :: EventType
CouponCreatedEvent :: EventType
CouponUpdatedEvent :: EventType
CouponDeletedEvent :: EventType
RecipientCreatedEvent :: EventType
RecipientUpdatedEvent :: EventType
RecipientDeletedEvent :: EventType
TransferCreatedEvent :: EventType
TransferUpdatedEvent :: EventType
TransferCanceledEvent :: EventType
TransferPaidEvent :: EventType
TransferFailedEvent :: EventType
PingEvent :: EventType
UnknownEvent :: EventType

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | Pagination Option for <a>StripeList</a>
type Limit = Maybe Int


-- | <a>https://stripe.com/docs/api#invoices</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Customer
--   import Web.Stripe.Invoice
--   import Web.Stripe.InvoiceItem
--   import Web.Stripe.Plan
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ do
--        Customer { customerId = cid } &lt;- createEmptyCustomer
--        Plan { } &lt;- createPlan (PlanId "planid") 20 USD Day "testplan" []
--        InvoiceItem { } &lt;- createInvoiceItem cid 100 USD Nothing Nothing Nothing []
--        createInvoice cid []
--     case result of
--       Right invoice -&gt; print invoice
--       Left  stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Invoice

-- | The <a>Invoice</a> to be created for a <a>Customer</a>
createInvoice :: CustomerId -> MetaData -> Stripe Invoice

-- | Retrieve an <a>Invoice</a> by <a>InvoiceId</a>
getInvoice :: InvoiceId -> Stripe Invoice

-- | Retrieve an <a>Invoice</a> by <a>InvoiceId</a> with
--   <a>ExpandParams</a>
getInvoiceExpandable :: InvoiceId -> ExpandParams -> Stripe Invoice

-- | Retrieve a <a>StripeList</a> of <a>Invoice</a>s
getInvoices :: Maybe Limit -> StartingAfter InvoiceItemId -> EndingBefore InvoiceItemId -> Stripe (StripeList Invoice)

-- | Retrieve a <a>StripeList</a> of <a>Invoice</a>s with
--   <a>ExpandParams</a>
getInvoicesExpandable :: Maybe Limit -> StartingAfter InvoiceItemId -> EndingBefore InvoiceItemId -> ExpandParams -> Stripe (StripeList Invoice)

-- | Retrieve an <a>Invoice</a> by <a>InvoiceId</a>
getInvoiceLineItems :: InvoiceId -> Limit -> StartingAfter InvoiceLineItemId -> EndingBefore InvoiceLineItemId -> Stripe (StripeList InvoiceLineItem)

-- | Retrieve an upcoming <a>Invoice</a> for a <a>Customer</a> by
--   <a>CustomerId</a>
getUpcomingInvoice :: CustomerId -> Stripe Invoice

-- | Retrieve a <a>StripeList</a> of <a>Invoice</a>s
getUpcomingInvoices :: CustomerId -> Stripe (StripeList Invoice)

-- | Update <a>Invoice</a> by <a>InvoiceId</a>
updateInvoice :: InvoiceId -> MetaData -> Stripe Invoice

-- | Pay <a>Invoice</a> by <a>InvoiceId</a>
payInvoice :: InvoiceId -> Stripe Invoice

-- | <a>Invoice</a> Object
data Invoice
Invoice :: UTCTime -> Maybe InvoiceId -> UTCTime -> UTCTime -> StripeList InvoiceLineItem -> Int -> Int -> CustomerId -> Text -> Bool -> Bool -> Bool -> Bool -> Bool -> Int -> Int -> Currency -> Int -> Maybe Int -> Maybe UTCTime -> Maybe UTCTime -> Maybe ChargeId -> Maybe Discount -> Maybe FeeId -> Maybe SubscriptionId -> Maybe Description -> Maybe Description -> MetaData -> Invoice
invoiceDate :: Invoice -> UTCTime

-- | If upcoming no ID will exist
invoiceId :: Invoice -> Maybe InvoiceId
invoicePeriodStart :: Invoice -> UTCTime
invoicePeriodEnd :: Invoice -> UTCTime
invoiceLineItems :: Invoice -> StripeList InvoiceLineItem
invoiceSubTotal :: Invoice -> Int
invoiceTotal :: Invoice -> Int
invoiceCustomer :: Invoice -> CustomerId
invoiceObject :: Invoice -> Text
invoiceAttempted :: Invoice -> Bool
invoiceClosed :: Invoice -> Bool
invoiceForgiven :: Invoice -> Bool
invoicePaid :: Invoice -> Bool
invoiceLiveMode :: Invoice -> Bool
invoiceAttemptCount :: Invoice -> Int
invoiceAmountDue :: Invoice -> Int
invoiceCurrency :: Invoice -> Currency
invoiceStartingBalance :: Invoice -> Int
invoiceEndingBalance :: Invoice -> Maybe Int
invoiceNextPaymentAttempt :: Invoice -> Maybe UTCTime
invoiceWebHooksDeliveredAt :: Invoice -> Maybe UTCTime
invoiceCharge :: Invoice -> Maybe ChargeId
invoiceDiscount :: Invoice -> Maybe Discount
invoiceApplicateFee :: Invoice -> Maybe FeeId
invoiceSubscription :: Invoice -> Maybe SubscriptionId
invoiceStatementDescription :: Invoice -> Maybe Description
invoiceDescription :: Invoice -> Maybe Description
invoiceMetaData :: Invoice -> MetaData

-- | <a>Invoice</a> for a <a>Coupon</a>
data InvoiceId
InvoiceId :: Text -> InvoiceId
ExpandedInvoice :: Invoice -> InvoiceId

-- | <a>InvoiceLineItem</a> Object
data InvoiceLineItem
InvoiceLineItem :: InvoiceLineItemId -> Text -> InvoiceLineItemType -> Bool -> Int -> Currency -> Bool -> Period -> Maybe Quantity -> Maybe Plan -> Maybe Description -> MetaData -> InvoiceLineItem
invoiceLineItemId :: InvoiceLineItem -> InvoiceLineItemId
invoiceLineItemObject :: InvoiceLineItem -> Text
invoiceLineItemType :: InvoiceLineItem -> InvoiceLineItemType
invoiceLineItemLiveMode :: InvoiceLineItem -> Bool
invoiceLineItemAmount :: InvoiceLineItem -> Int
invoiceLineItemCurrency :: InvoiceLineItem -> Currency
invoiceLineItemProration :: InvoiceLineItem -> Bool
invoiceLineItemPeriod :: InvoiceLineItem -> Period
invoiceLineItemQuantity :: InvoiceLineItem -> Maybe Quantity
invoiceLineItemPlan :: InvoiceLineItem -> Maybe Plan
invoiceLineItemDescription :: InvoiceLineItem -> Maybe Description
invoiceLineItemMetaData :: InvoiceLineItem -> MetaData

-- | <a>InvoiceLineItemId</a> for an <a>InvoiceLineItem</a>
newtype InvoiceLineItemId
InvoiceLineItemId :: Text -> InvoiceLineItemId

-- | Type of <a>InvoiceItem</a>
data InvoiceLineItemType
InvoiceItemType :: InvoiceLineItemType
SubscriptionItemType :: InvoiceLineItemType

-- | <a>Discount</a> for <a>Coupon</a>
data Discount
Discount :: Coupon -> UTCTime -> Maybe UTCTime -> CustomerId -> Text -> Maybe SubscriptionId -> Discount
discountCoupon :: Discount -> Coupon
discountStart :: Discount -> UTCTime
discountEnd :: Discount -> Maybe UTCTime
discountCustomer :: Discount -> CustomerId
discountObject :: Discount -> Text
discountSubscription :: Discount -> Maybe SubscriptionId

-- | Period for an <a>InvoiceLineItem</a>
data Period
Period :: UTCTime -> UTCTime -> Period
start :: Period -> UTCTime
end :: Period -> UTCTime


-- | <a>https://stripe.com/docs/api#invoiceitems</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Customer
--   import Web.Stripe.InvoiceItem
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ do
--       Customer { customerId = cid } &lt;- createEmptyCustomer
--       createInvoiceItem cid 100 USD Nothing Nothing (Just "description") []
--     case result of
--       Right invoiceitem -&gt; print invoiceitem
--       Left  stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.InvoiceItem

-- | Create an invoice for a Customer
createInvoiceItem :: CustomerId -> Amount -> Currency -> Maybe InvoiceId -> Maybe SubscriptionId -> Maybe Description -> MetaData -> Stripe InvoiceItem

-- | Retrieve an <a>InvoiceItem</a> by <a>InvoiceItemId</a>
getInvoiceItem :: InvoiceItemId -> Stripe InvoiceItem

-- | Retrieve an <a>InvoiceItem</a> by <a>InvoiceItemId</a>
getInvoiceItemExpandable :: InvoiceItemId -> ExpandParams -> Stripe InvoiceItem

-- | Retrieve an <a>InvoiceItem</a> by <a>InvoiceItemId</a>
getInvoiceItems :: Maybe CustomerId -> Limit -> StartingAfter InvoiceItemId -> EndingBefore InvoiceItemId -> Stripe (StripeList InvoiceItem)

-- | Retrieve an <a>InvoiceItem</a> by <a>InvoiceItemId</a> with
--   <a>ExpandParams</a>
getInvoiceItemsExpandable :: Maybe CustomerId -> Limit -> StartingAfter InvoiceItemId -> EndingBefore InvoiceItemId -> ExpandParams -> Stripe (StripeList InvoiceItem)

-- | Update an <a>InvoiceItem</a> by <a>InvoiceItemId</a>
updateInvoiceItem :: InvoiceItemId -> Maybe Amount -> Maybe Description -> MetaData -> Stripe InvoiceItem

-- | Delete an <a>InvoiceItem</a> by <a>InvoiceItemId</a>
deleteInvoiceItem :: InvoiceItemId -> Stripe StripeDeleteResult

-- | <a>InvoiceItemId</a> for <a>InvoiceItem</a>
data InvoiceItemId
InvoiceItemId :: Text -> InvoiceItemId
ExpandedInvoiceItem :: InvoiceItem -> InvoiceItemId

-- | <a>InvoiceItem</a> object
data InvoiceItem
InvoiceItem :: Text -> InvoiceItemId -> UTCTime -> Int -> Bool -> Bool -> Currency -> CustomerId -> Maybe Description -> Maybe InvoiceId -> Maybe Quantity -> Maybe Subscription -> MetaData -> InvoiceItem
invoiceItemObject :: InvoiceItem -> Text
invoiceItemId :: InvoiceItem -> InvoiceItemId
invoiceItemDate :: InvoiceItem -> UTCTime
invoiceItemAmount :: InvoiceItem -> Int
invoiceItemLiveMode :: InvoiceItem -> Bool
invoiceItemProration :: InvoiceItem -> Bool
invoiceItemCurrency :: InvoiceItem -> Currency
invoiceItemCustomer :: InvoiceItem -> CustomerId
invoiceItemDescription :: InvoiceItem -> Maybe Description
invoiceItemInvoice :: InvoiceItem -> Maybe InvoiceId
invoiceItemQuantity :: InvoiceItem -> Maybe Quantity
invoiceItemSubscription :: InvoiceItem -> Maybe Subscription
invoiceItemMetaData :: InvoiceItem -> MetaData

-- | <a>CustomerId</a> for a <a>Customer</a>
data CustomerId
CustomerId :: Text -> CustomerId
ExpandedCustomer :: Customer -> CustomerId

-- | Stripe supports 138 currencies
data Currency

-- | United Arab Emirates Dirham
AED :: Currency

-- | Afghan Afghani
AFN :: Currency

-- | Albanian Lek
ALL :: Currency

-- | Armenian Dram
AMD :: Currency

-- | Netherlands Antillean Gulden
ANG :: Currency

-- | Angolan Kwanza
AOA :: Currency

-- | Argentine Peso
ARS :: Currency

-- | Australian Dollar
AUD :: Currency

-- | Aruban Florin
AWG :: Currency

-- | Azerbaijani Manat
AZN :: Currency

-- | Bosnia &amp; Herzegovina Convertible Mark
BAM :: Currency

-- | Barbadian Dollar
BBD :: Currency

-- | Bangladeshi Taka
BDT :: Currency

-- | Bulgarian Lev
BGN :: Currency

-- | Burundian Franc
BIF :: Currency

-- | Bermudian Dollar
BMD :: Currency

-- | Brunei Dollar
BND :: Currency

-- | Bolivian Boliviano
BOB :: Currency

-- | Brazilian Real
BRL :: Currency

-- | Bahamian Dollar
BSD :: Currency

-- | Botswana Pula
BWP :: Currency

-- | Belize Dollar
BZD :: Currency

-- | Canadian Dollar
CAD :: Currency

-- | Congolese Franc
CDF :: Currency

-- | Swiss Franc
CHF :: Currency

-- | Chilean Peso
CLP :: Currency

-- | Chinese Renminbi Yuan
CNY :: Currency

-- | Colombian Peso
COP :: Currency

-- | Costa Rican Colón
CRC :: Currency

-- | Cape Verdean Escudo
CVE :: Currency

-- | Czech Koruna
CZK :: Currency

-- | Djiboutian Franc
DJF :: Currency

-- | Danish Krone
DKK :: Currency

-- | Dominican Peso
DOP :: Currency

-- | Algerian Dinar
DZD :: Currency

-- | Estonian Kroon
EEK :: Currency

-- | Egyptian Pound
EGP :: Currency

-- | Ethiopian Birr
ETB :: Currency

-- | Euro
EUR :: Currency

-- | Fijian Dollar
FJD :: Currency

-- | Falkland Islands Pound
FKP :: Currency

-- | British Pound
GBP :: Currency

-- | Georgian Lari
GEL :: Currency

-- | Gibraltar Pound
GIP :: Currency

-- | Gambian Dalasi
GMD :: Currency

-- | Guinean Franc
GNF :: Currency

-- | Guatemalan Quetzal
GTQ :: Currency

-- | Guyanese Dollar
GYD :: Currency

-- | Hong Kong Dollar
HKD :: Currency

-- | Honduran Lempira
HNL :: Currency

-- | Croatian Kuna
HRK :: Currency

-- | Haitian Gourde
HTG :: Currency

-- | Hungarian Forint
HUF :: Currency

-- | Indonesian Rupiah
IDR :: Currency

-- | Israeli New Sheqel
ILS :: Currency

-- | Indian Rupee
INR :: Currency

-- | Icelandic Króna
ISK :: Currency

-- | Jamaican Dollar
JMD :: Currency

-- | Japanese Yen
JPY :: Currency

-- | Kenyan Shilling
KES :: Currency

-- | Kyrgyzstani Som
KGS :: Currency

-- | Cambodian Riel
KHR :: Currency

-- | Comorian Franc
KMF :: Currency

-- | South Korean Won
KRW :: Currency

-- | Cayman Islands Dollar
KYD :: Currency

-- | Kazakhstani Tenge
KZT :: Currency

-- | Lao Kip
LAK :: Currency

-- | Lebanese Pound
LBP :: Currency

-- | Sri Lankan Rupee
LKR :: Currency

-- | Liberian Dollar
LRD :: Currency

-- | Lesotho Loti
LSL :: Currency

-- | Lithuanian Litas
LTL :: Currency

-- | Latvian Lats
LVL :: Currency

-- | Moroccan Dirham
MAD :: Currency

-- | Moldovan Leu
MDL :: Currency

-- | Malagasy Ariary
MGA :: Currency

-- | Macedonian Denar
MKD :: Currency

-- | Mongolian Tögrög
MNT :: Currency

-- | Macanese Pataca
MOP :: Currency

-- | Mauritanian Ouguiya
MRO :: Currency

-- | Mauritian Rupee
MUR :: Currency

-- | Maldivian Rufiyaa
MVR :: Currency

-- | Malawian Kwacha
MWK :: Currency

-- | Mexican Peso
MXN :: Currency

-- | Malaysian Ringgit
MYR :: Currency

-- | Mozambican Metical
MZN :: Currency

-- | Namibian Dollar
NAD :: Currency

-- | Nigerian Naira
NGN :: Currency

-- | Nicaraguan Córdoba
NIO :: Currency

-- | Norwegian Krone
NOK :: Currency

-- | Nepalese Rupee
NPR :: Currency

-- | New Zealand Dollar
NZD :: Currency

-- | Panamanian Balboa
PAB :: Currency

-- | Peruvian Nuevo Sol
PEN :: Currency

-- | Papua New Guinean Kina
PGK :: Currency

-- | Philippine Peso
PHP :: Currency

-- | Pakistani Rupee
PKR :: Currency

-- | Polish Złoty
PLN :: Currency

-- | Paraguayan Guaraní
PYG :: Currency

-- | Qatari Riyal
QAR :: Currency

-- | Romanian Leu
RON :: Currency

-- | Serbian Dinar
RSD :: Currency

-- | Russian Ruble
RUB :: Currency

-- | Rwandan Franc
RWF :: Currency

-- | Saudi Riyal
SAR :: Currency

-- | Solomon Islands Dollar
SBD :: Currency

-- | Seychellois Rupee
SCR :: Currency

-- | Swedish Krona
SEK :: Currency

-- | Singapore Dollar
SGD :: Currency

-- | Saint Helenian Pound
SHP :: Currency

-- | Sierra Leonean Leone
SLL :: Currency

-- | Somali Shilling
SOS :: Currency

-- | Surinamese Dollar
SRD :: Currency

-- | São Tomé and Príncipe Dobra
STD :: Currency

-- | Salvadoran Colón
SVC :: Currency

-- | Swazi Lilangeni
SZL :: Currency

-- | Thai Baht
THB :: Currency

-- | Tajikistani Somoni
TJS :: Currency

-- | Tongan Paʻanga
TOP :: Currency

-- | Turkish Lira
TRY :: Currency

-- | Trinidad and Tobago Dollar
TTD :: Currency

-- | New Taiwan Dollar
TWD :: Currency

-- | Tanzanian Shilling
TZS :: Currency

-- | Ukrainian Hryvnia
UAH :: Currency

-- | Ugandan Shilling
UGX :: Currency

-- | United States Dollar
USD :: Currency

-- | Uruguayan Peso
UYU :: Currency

-- | Uzbekistani Som
UZS :: Currency

-- | Vietnamese Đồng
VND :: Currency

-- | Vanuatu Vatu
VUV :: Currency

-- | Samoan Tala
WST :: Currency

-- | Central African Cfa Franc
XAF :: Currency

-- | East Caribbean Dollar
XCD :: Currency

-- | West African Cfa Franc
XOF :: Currency

-- | Cfp Franc
XPF :: Currency

-- | Yemeni Rial
YER :: Currency

-- | South African Rand
ZAR :: Currency

-- | Zambian Kwacha
ZMW :: Currency

-- | Unknown Currency
UnknownCurrency :: Currency

-- | <a>Invoice</a> for a <a>Coupon</a>
data InvoiceId
InvoiceId :: Text -> InvoiceId
ExpandedInvoice :: Invoice -> InvoiceId

-- | <a>Invoice</a> Object
data Invoice
Invoice :: UTCTime -> Maybe InvoiceId -> UTCTime -> UTCTime -> StripeList InvoiceLineItem -> Int -> Int -> CustomerId -> Text -> Bool -> Bool -> Bool -> Bool -> Bool -> Int -> Int -> Currency -> Int -> Maybe Int -> Maybe UTCTime -> Maybe UTCTime -> Maybe ChargeId -> Maybe Discount -> Maybe FeeId -> Maybe SubscriptionId -> Maybe Description -> Maybe Description -> MetaData -> Invoice
invoiceDate :: Invoice -> UTCTime

-- | If upcoming no ID will exist
invoiceId :: Invoice -> Maybe InvoiceId
invoicePeriodStart :: Invoice -> UTCTime
invoicePeriodEnd :: Invoice -> UTCTime
invoiceLineItems :: Invoice -> StripeList InvoiceLineItem
invoiceSubTotal :: Invoice -> Int
invoiceTotal :: Invoice -> Int
invoiceCustomer :: Invoice -> CustomerId
invoiceObject :: Invoice -> Text
invoiceAttempted :: Invoice -> Bool
invoiceClosed :: Invoice -> Bool
invoiceForgiven :: Invoice -> Bool
invoicePaid :: Invoice -> Bool
invoiceLiveMode :: Invoice -> Bool
invoiceAttemptCount :: Invoice -> Int
invoiceAmountDue :: Invoice -> Int
invoiceCurrency :: Invoice -> Currency
invoiceStartingBalance :: Invoice -> Int
invoiceEndingBalance :: Invoice -> Maybe Int
invoiceNextPaymentAttempt :: Invoice -> Maybe UTCTime
invoiceWebHooksDeliveredAt :: Invoice -> Maybe UTCTime
invoiceCharge :: Invoice -> Maybe ChargeId
invoiceDiscount :: Invoice -> Maybe Discount
invoiceApplicateFee :: Invoice -> Maybe FeeId
invoiceSubscription :: Invoice -> Maybe SubscriptionId
invoiceStatementDescription :: Invoice -> Maybe Description
invoiceDescription :: Invoice -> Maybe Description
invoiceMetaData :: Invoice -> MetaData

-- | <a>SubscriptionId</a> for a <a>Subscription</a>
newtype SubscriptionId
SubscriptionId :: Text -> SubscriptionId

-- | JSON returned from a <tt>Stripe</tt> deletion request
data StripeDeleteResult
StripeDeleteResult :: Bool -> Maybe Text -> StripeDeleteResult
deleted :: StripeDeleteResult -> Bool
deletedId :: StripeDeleteResult -> Maybe Text

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | Generic Description for use in constructing API Calls
type Description = Text

-- | Amount representing a monetary value. Stripe represents pennies as
--   whole numbers i.e. 100 = $1
type Amount = Int


-- | <a>https://stripe.com/docs/api#plans</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Plan
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ do
--         createPlan (PlanId "free plan")
--                    (0 :: Amount) 
--                    (USD :: Currency)
--                    (Month :: Interval)
--                    ("a sample free plan" :: Name)
--                    ([] :: MetaData)
--     case result of
--       Right plan     -&gt; print plan
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Plan

-- | Create a <a>Plan</a>
createPlan :: PlanId -> Amount -> Currency -> Interval -> Name -> MetaData -> Stripe Plan

-- | Create a <a>Plan</a> with a specified <a>IntervalCount</a>
createPlanIntervalCount :: PlanId -> Amount -> Currency -> Interval -> Name -> IntervalCount -> Stripe Plan

-- | Create a <a>Plan</a> with a specified number of <a>TrialPeriodDays</a>
createPlanTrialPeriodDays :: PlanId -> Amount -> Currency -> Interval -> Name -> TrialPeriodDays -> Stripe Plan

-- | Base Request for creating a <a>Plan</a>, useful for making custom
--   <a>Plan</a> creation requests
createPlanBase :: PlanId -> Amount -> Currency -> Interval -> Name -> Maybe IntervalCount -> Maybe TrialPeriodDays -> Maybe Description -> MetaData -> Stripe Plan

-- | Retrieve a <a>Plan</a>
getPlan :: PlanId -> Stripe Plan

-- | Retrieve a <a>Plan</a>
getPlans :: Limit -> StartingAfter PlanId -> EndingBefore PlanId -> Stripe (StripeList Plan)

-- | Update a <a>Plan</a> <a>Name</a>
updatePlanName :: PlanId -> Description -> Stripe Plan

-- | Update a <a>Plan</a> <a>Description</a>
updatePlanDescription :: PlanId -> Description -> Stripe Plan

-- | Base Request for updating a <a>Plan</a>, useful for creating customer
--   <a>Plan</a> update functions
updatePlanBase :: PlanId -> Maybe Name -> Maybe Description -> MetaData -> Stripe Plan

-- | Delete a <a>Plan</a>
deletePlan :: PlanId -> Stripe StripeDeleteResult

-- | <a>PlanId</a> for a <a>Plan</a>
newtype PlanId
PlanId :: Text -> PlanId

-- | Plan object
data Plan
Plan :: Interval -> Text -> UTCTime -> Int -> Currency -> PlanId -> Text -> Bool -> Maybe Int -> Maybe Int -> MetaData -> Maybe Description -> Plan
planInterval :: Plan -> Interval
planName :: Plan -> Text
planCreated :: Plan -> UTCTime
planAmount :: Plan -> Int
planCurrency :: Plan -> Currency
planId :: Plan -> PlanId
planObject :: Plan -> Text
planLiveMode :: Plan -> Bool
planIntervalCount :: Plan -> Maybe Int
planTrialPeriodDays :: Plan -> Maybe Int
planMetaData :: Plan -> MetaData
planDescription :: Plan -> Maybe Description

-- | Interval for <a>Plan</a>s
data Interval
Day :: Interval
Week :: Interval
Month :: Interval
Year :: Interval

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | <a>IntervalCount</a> for a <a>Coupon</a>
newtype IntervalCount
IntervalCount :: Int -> IntervalCount

-- | <a>TrialPeriodDays</a> for a <a>Coupon</a>
newtype TrialPeriodDays
TrialPeriodDays :: Int -> TrialPeriodDays

-- | JSON returned from a <tt>Stripe</tt> deletion request
data StripeDeleteResult
StripeDeleteResult :: Bool -> Maybe Text -> StripeDeleteResult
deleted :: StripeDeleteResult -> Bool
deletedId :: StripeDeleteResult -> Maybe Text

-- | Stripe supports 138 currencies
data Currency

-- | United Arab Emirates Dirham
AED :: Currency

-- | Afghan Afghani
AFN :: Currency

-- | Albanian Lek
ALL :: Currency

-- | Armenian Dram
AMD :: Currency

-- | Netherlands Antillean Gulden
ANG :: Currency

-- | Angolan Kwanza
AOA :: Currency

-- | Argentine Peso
ARS :: Currency

-- | Australian Dollar
AUD :: Currency

-- | Aruban Florin
AWG :: Currency

-- | Azerbaijani Manat
AZN :: Currency

-- | Bosnia &amp; Herzegovina Convertible Mark
BAM :: Currency

-- | Barbadian Dollar
BBD :: Currency

-- | Bangladeshi Taka
BDT :: Currency

-- | Bulgarian Lev
BGN :: Currency

-- | Burundian Franc
BIF :: Currency

-- | Bermudian Dollar
BMD :: Currency

-- | Brunei Dollar
BND :: Currency

-- | Bolivian Boliviano
BOB :: Currency

-- | Brazilian Real
BRL :: Currency

-- | Bahamian Dollar
BSD :: Currency

-- | Botswana Pula
BWP :: Currency

-- | Belize Dollar
BZD :: Currency

-- | Canadian Dollar
CAD :: Currency

-- | Congolese Franc
CDF :: Currency

-- | Swiss Franc
CHF :: Currency

-- | Chilean Peso
CLP :: Currency

-- | Chinese Renminbi Yuan
CNY :: Currency

-- | Colombian Peso
COP :: Currency

-- | Costa Rican Colón
CRC :: Currency

-- | Cape Verdean Escudo
CVE :: Currency

-- | Czech Koruna
CZK :: Currency

-- | Djiboutian Franc
DJF :: Currency

-- | Danish Krone
DKK :: Currency

-- | Dominican Peso
DOP :: Currency

-- | Algerian Dinar
DZD :: Currency

-- | Estonian Kroon
EEK :: Currency

-- | Egyptian Pound
EGP :: Currency

-- | Ethiopian Birr
ETB :: Currency

-- | Euro
EUR :: Currency

-- | Fijian Dollar
FJD :: Currency

-- | Falkland Islands Pound
FKP :: Currency

-- | British Pound
GBP :: Currency

-- | Georgian Lari
GEL :: Currency

-- | Gibraltar Pound
GIP :: Currency

-- | Gambian Dalasi
GMD :: Currency

-- | Guinean Franc
GNF :: Currency

-- | Guatemalan Quetzal
GTQ :: Currency

-- | Guyanese Dollar
GYD :: Currency

-- | Hong Kong Dollar
HKD :: Currency

-- | Honduran Lempira
HNL :: Currency

-- | Croatian Kuna
HRK :: Currency

-- | Haitian Gourde
HTG :: Currency

-- | Hungarian Forint
HUF :: Currency

-- | Indonesian Rupiah
IDR :: Currency

-- | Israeli New Sheqel
ILS :: Currency

-- | Indian Rupee
INR :: Currency

-- | Icelandic Króna
ISK :: Currency

-- | Jamaican Dollar
JMD :: Currency

-- | Japanese Yen
JPY :: Currency

-- | Kenyan Shilling
KES :: Currency

-- | Kyrgyzstani Som
KGS :: Currency

-- | Cambodian Riel
KHR :: Currency

-- | Comorian Franc
KMF :: Currency

-- | South Korean Won
KRW :: Currency

-- | Cayman Islands Dollar
KYD :: Currency

-- | Kazakhstani Tenge
KZT :: Currency

-- | Lao Kip
LAK :: Currency

-- | Lebanese Pound
LBP :: Currency

-- | Sri Lankan Rupee
LKR :: Currency

-- | Liberian Dollar
LRD :: Currency

-- | Lesotho Loti
LSL :: Currency

-- | Lithuanian Litas
LTL :: Currency

-- | Latvian Lats
LVL :: Currency

-- | Moroccan Dirham
MAD :: Currency

-- | Moldovan Leu
MDL :: Currency

-- | Malagasy Ariary
MGA :: Currency

-- | Macedonian Denar
MKD :: Currency

-- | Mongolian Tögrög
MNT :: Currency

-- | Macanese Pataca
MOP :: Currency

-- | Mauritanian Ouguiya
MRO :: Currency

-- | Mauritian Rupee
MUR :: Currency

-- | Maldivian Rufiyaa
MVR :: Currency

-- | Malawian Kwacha
MWK :: Currency

-- | Mexican Peso
MXN :: Currency

-- | Malaysian Ringgit
MYR :: Currency

-- | Mozambican Metical
MZN :: Currency

-- | Namibian Dollar
NAD :: Currency

-- | Nigerian Naira
NGN :: Currency

-- | Nicaraguan Córdoba
NIO :: Currency

-- | Norwegian Krone
NOK :: Currency

-- | Nepalese Rupee
NPR :: Currency

-- | New Zealand Dollar
NZD :: Currency

-- | Panamanian Balboa
PAB :: Currency

-- | Peruvian Nuevo Sol
PEN :: Currency

-- | Papua New Guinean Kina
PGK :: Currency

-- | Philippine Peso
PHP :: Currency

-- | Pakistani Rupee
PKR :: Currency

-- | Polish Złoty
PLN :: Currency

-- | Paraguayan Guaraní
PYG :: Currency

-- | Qatari Riyal
QAR :: Currency

-- | Romanian Leu
RON :: Currency

-- | Serbian Dinar
RSD :: Currency

-- | Russian Ruble
RUB :: Currency

-- | Rwandan Franc
RWF :: Currency

-- | Saudi Riyal
SAR :: Currency

-- | Solomon Islands Dollar
SBD :: Currency

-- | Seychellois Rupee
SCR :: Currency

-- | Swedish Krona
SEK :: Currency

-- | Singapore Dollar
SGD :: Currency

-- | Saint Helenian Pound
SHP :: Currency

-- | Sierra Leonean Leone
SLL :: Currency

-- | Somali Shilling
SOS :: Currency

-- | Surinamese Dollar
SRD :: Currency

-- | São Tomé and Príncipe Dobra
STD :: Currency

-- | Salvadoran Colón
SVC :: Currency

-- | Swazi Lilangeni
SZL :: Currency

-- | Thai Baht
THB :: Currency

-- | Tajikistani Somoni
TJS :: Currency

-- | Tongan Paʻanga
TOP :: Currency

-- | Turkish Lira
TRY :: Currency

-- | Trinidad and Tobago Dollar
TTD :: Currency

-- | New Taiwan Dollar
TWD :: Currency

-- | Tanzanian Shilling
TZS :: Currency

-- | Ukrainian Hryvnia
UAH :: Currency

-- | Ugandan Shilling
UGX :: Currency

-- | United States Dollar
USD :: Currency

-- | Uruguayan Peso
UYU :: Currency

-- | Uzbekistani Som
UZS :: Currency

-- | Vietnamese Đồng
VND :: Currency

-- | Vanuatu Vatu
VUV :: Currency

-- | Samoan Tala
WST :: Currency

-- | Central African Cfa Franc
XAF :: Currency

-- | East Caribbean Dollar
XCD :: Currency

-- | West African Cfa Franc
XOF :: Currency

-- | Cfp Franc
XPF :: Currency

-- | Yemeni Rial
YER :: Currency

-- | South African Rand
ZAR :: Currency

-- | Zambian Kwacha
ZMW :: Currency

-- | Unknown Currency
UnknownCurrency :: Currency

-- | <a>Email</a> associated with a <a>Customer</a>, <a>Recipient</a> or
--   <a>Charge</a>
newtype Email
Email :: Text -> Email

-- | Pagination Option for <a>StripeList</a>
type Limit = Maybe Int

-- | Pagination Option for <a>StripeList</a>
type StartingAfter a = Maybe a

-- | Pagination Option for <a>StripeList</a>
type EndingBefore a = Maybe a

-- | Generic URL for use in constructing API Calls
type Name = Text

-- | Amount representing a monetary value. Stripe represents pennies as
--   whole numbers i.e. 100 = $1
type Amount = Int

-- | Generic Description for use in constructing API Calls
type Description = Text

-- | Type of MetaData for use on <tt>Stripe</tt> objects
type MetaData = [(Text, Text)]


-- | <a>https://stripe.com/docs/api#recipients</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Recipient
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ 
--         createRecipient (FirstName "simon")
--                         (LastName "marlow")
--                         Nothing -- What is Simon Marlow's middle initial?
--                         (Invidiual :: RecipientType)
--     case result of
--       Right recipient  -&gt; print recipient
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Recipient

-- | Create a <a>Recipient</a>
createRecipient :: FirstName -> LastName -> Maybe MiddleInitial -> RecipientType -> Stripe Recipient

-- | Create a <a>Recipient</a> by a <tt>Card</tt>
createRecipientByCard :: FirstName -> LastName -> Maybe MiddleInitial -> RecipientType -> CardNumber -> ExpMonth -> ExpYear -> CVC -> Stripe Recipient

-- | Create a <a>Recipient</a> by specifying a <a>TokenId</a>
createRecipientByToken :: FirstName -> LastName -> Maybe MiddleInitial -> RecipientType -> TokenId -> Stripe Recipient

-- | Create a <a>Recipient</a> with a <a>BankAccount</a>
createRecipientByBank :: FirstName -> LastName -> Maybe MiddleInitial -> RecipientType -> Country -> RoutingNumber -> AccountNumber -> Stripe Recipient

-- | Base Request for issues create <a>Recipient</a> requests
createRecipientBase :: FirstName -> LastName -> Maybe MiddleInitial -> RecipientType -> Maybe TaxID -> Maybe Country -> Maybe RoutingNumber -> Maybe AccountNumber -> Maybe TokenId -> Maybe CardNumber -> Maybe ExpMonth -> Maybe ExpYear -> Maybe CVC -> Maybe Email -> Maybe Description -> MetaData -> Stripe Recipient

-- | Retrieve a <a>Recipient</a>
getRecipient :: RecipientId -> Stripe Recipient

-- | Retrieve a <a>Recipient</a>
getRecipientExpandable :: RecipientId -> ExpandParams -> Stripe Recipient

-- | Retrieve multiple <a>Recipient</a>s
getRecipients :: Limit -> StartingAfter RecipientId -> EndingBefore RecipientId -> Stripe (StripeList Recipient)

-- | Retrieve multiple <a>Recipient</a>s with <a>ExpandParams</a>
getRecipientsExpandable :: Limit -> StartingAfter RecipientId -> EndingBefore RecipientId -> ExpandParams -> Stripe (StripeList Recipient)

-- | Update a <a>Recipient</a> <a>FirstName</a>, <a>LastName</a> and/or
--   <a>MiddleInitial</a>
updateRecipientName :: RecipientId -> FirstName -> LastName -> MiddleInitial -> Stripe Recipient

-- | Update a <a>Recipient</a> <a>TaxID</a>
updateRecipientTaxID :: RecipientId -> TaxID -> Stripe Recipient

-- | Update a <a>Recipient</a> <a>BankAccount</a>
updateRecipientBankAccount :: RecipientId -> Country -> RoutingNumber -> AccountNumber -> Stripe Recipient

-- | Update a <a>Recipient</a> <tt>Card</tt> by <a>TokenId</a>
updateRecipientTokenID :: RecipientId -> TokenId -> Stripe Recipient

-- | Update default <tt>Card</tt> of <a>Recipient</a>
updateRecipientDefaultCard :: RecipientId -> CardId -> Stripe Recipient

-- | Update a <a>Recipient</a> <a>Email</a> Address
updateRecipientEmail :: RecipientId -> Email -> Stripe Recipient

-- | Update a <a>Recipient</a> <a>Description</a>
updateRecipientDescription :: RecipientId -> Description -> Stripe Recipient

-- | Update a <a>Recipient</a> <a>MetaData</a>
updateRecipientMetaData :: RecipientId -> MetaData -> Stripe Recipient

-- | Base Request for updating a <a>Recipient</a>, useful for creating
--   custom <a>Recipient</a> update functions
updateRecipientBase :: RecipientId -> Maybe FirstName -> Maybe LastName -> Maybe MiddleInitial -> Maybe TaxID -> Maybe Country -> Maybe RoutingNumber -> Maybe AccountNumber -> Maybe TokenId -> Maybe CardNumber -> Maybe ExpMonth -> Maybe ExpYear -> Maybe CVC -> Maybe CardId -> Maybe Email -> Maybe Description -> MetaData -> Stripe Recipient

-- | Delete a <a>Recipient</a>
deleteRecipient :: RecipientId -> Stripe StripeDeleteResult

-- | Recipient Object
data Recipient
Recipient :: RecipientId -> Text -> UTCTime -> Bool -> RecipientType -> Maybe Description -> Maybe Email -> Name -> Bool -> Maybe BankAccount -> StripeList RecipientCard -> Maybe RecipientCardId -> Recipient
recipientId :: Recipient -> RecipientId
recipientObject :: Recipient -> Text
recipientCreated :: Recipient -> UTCTime
recipientLiveMode :: Recipient -> Bool
recipientType :: Recipient -> RecipientType
recipientDescription :: Recipient -> Maybe Description
recipientEmail :: Recipient -> Maybe Email
recipientName :: Recipient -> Name
recipientVerified :: Recipient -> Bool
recipientActiveAccount :: Recipient -> Maybe BankAccount
recipientCards :: Recipient -> StripeList RecipientCard
recipientDefaultCard :: Recipient -> Maybe RecipientCardId
DeletedRecipient :: Maybe Bool -> RecipientId -> Recipient
deletedRecipient :: Recipient -> Maybe Bool
deletedRecipientId :: Recipient -> RecipientId

-- | <a>RecipientId</a> for a <a>Recipient</a>
data RecipientId
RecipientId :: Text -> RecipientId
ExpandedRecipient :: Recipient -> RecipientId

-- | Recipients
--   
--   <a>FirstName</a> of a <a>Recipient</a>
newtype FirstName
FirstName :: Text -> FirstName

-- | <a>LastName</a> of a <a>Recipient</a>
newtype LastName
LastName :: Text -> LastName

-- | Middle Initial of a <a>Recipient</a>
type MiddleInitial = Char

-- | Type of <a>Recipient</a>
data RecipientType
Individual :: RecipientType
Corporation :: RecipientType

-- | <a>TaxID</a> of <a>Recipient</a>
type TaxID = Text

-- | <a>BankAccount</a> Object
data BankAccount
BankAccount :: BankAccountId -> Text -> Text -> Country -> Currency -> Maybe BankAccountStatus -> Maybe Text -> Text -> BankAccount
bankAccountId :: BankAccount -> BankAccountId
bankAccountObject :: BankAccount -> Text
bankAccountLast4 :: BankAccount -> Text
bankAccountCountry :: BankAccount -> Country
bankAccountCurrency :: BankAccount -> Currency
bankAccountStatus :: BankAccount -> Maybe BankAccountStatus
bankAccountFingerprint :: BankAccount -> Maybe Text
bankAccountName :: BankAccount -> Text

-- | <a>TokenId</a> of a <a>Token</a>
data TokenId

-- | Number associated with a <a>Card</a>
data CardNumber

-- | Expiration Month for a <a>Card</a>
data ExpMonth

-- | <a>Email</a> associated with a <a>Customer</a>, <a>Recipient</a> or
--   <a>Charge</a>
newtype Email
Email :: Text -> Email

-- | Expiration Year for a <a>Card</a>
data ExpYear

-- | CVC for a <a>Card</a>
data CVC

-- | Generic Description for use in constructing API Calls
type Description = Text

-- | Pagination Option for <a>StripeList</a>
type Limit = Maybe Int

-- | JSON returned from a <tt>Stripe</tt> deletion request
data StripeDeleteResult
StripeDeleteResult :: Bool -> Maybe Text -> StripeDeleteResult
deleted :: StripeDeleteResult -> Bool
deletedId :: StripeDeleteResult -> Maybe Text

-- | Routing Number for Bank Account
newtype RoutingNumber
RoutingNumber :: Text -> RoutingNumber

-- | Account Number of a Bank Account
newtype AccountNumber
AccountNumber :: Text -> AccountNumber

-- | Country
newtype Country
Country :: Text -> Country

-- | City address for a <a>Card</a>
newtype AddressCity
AddressCity :: Text -> AddressCity

-- | Country address for a <a>Card</a>
newtype AddressCountry
AddressCountry :: Text -> AddressCountry

-- | Address Line One for a <a>Card</a>
newtype AddressLine1
AddressLine1 :: Text -> AddressLine1

-- | Address Line Two for a <a>Card</a>
newtype AddressLine2
AddressLine2 :: Text -> AddressLine2

-- | Address State for a <a>Card</a>
newtype AddressState
AddressState :: Text -> AddressState

-- | Address Zip Code for a <a>Card</a>
newtype AddressZip
AddressZip :: Text -> AddressZip

-- | <a>BankAccountId</a> for <a>BankAccount</a>
newtype BankAccountId
BankAccountId :: Text -> BankAccountId

-- | <a>BankAccountStatus</a> Object
data BankAccountStatus
New :: BankAccountStatus
Validated :: BankAccountStatus
Verified :: BankAccountStatus
Errored :: BankAccountStatus


-- | <a>https://stripe.com/docs/api#refunds</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Customer
--   import Web.Stripe.Charge
--   import Web.Stripe.Refund
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--         credit = CardNumber "4242424242424242"
--         em  = ExpMonth 12
--         ey  = ExpYear 2015
--         cvc = CVC "123"
--     result &lt;- stripe config $ do
--       Customer { customerId = cid }  &lt;- createCustomerByCard cn em ey cvc
--       Charge   { chargeId   = chid } &lt;- chargeCustomer cid USD 100 Nothing
--       createRefund chid ([] :: MetaData)
--     case result of
--       Right refund     -&gt; print refund
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Refund

-- | <a>Refund</a> a <a>Charge</a>
createRefund :: ChargeId -> MetaData -> Stripe Refund

-- | Retrieve a <a>Refund</a> by <a>ChargeId</a> and <a>RefundId</a>
getRefund :: ChargeId -> RefundId -> Stripe Refund

-- | Retrieve a <a>Refund</a> by <a>ChargeId</a> and <a>RefundId</a> with
--   <a>ExpandParams</a>
getRefundExpandable :: ChargeId -> RefundId -> ExpandParams -> Stripe Refund

-- | Retrieve a lot of Refunds by <a>ChargeId</a>
getRefunds :: ChargeId -> Limit -> StartingAfter RefundId -> EndingBefore RefundId -> Stripe (StripeList Refund)

-- | Retrieve a lot of Refunds by <a>ChargeId</a> with <a>ExpandParams</a>
getRefundsExpandable :: ChargeId -> Limit -> StartingAfter RefundId -> EndingBefore RefundId -> ExpandParams -> Stripe (StripeList Refund)

-- | Update a <a>Refund</a> by <a>ChargeId</a> and <a>RefundId</a>
updateRefund :: ChargeId -> RefundId -> MetaData -> Stripe Refund

-- | <a>Refund</a> Object
data Refund
Refund :: RefundId -> Int -> Currency -> UTCTime -> Text -> ChargeId -> TransactionId -> MetaData -> Refund
refundId :: Refund -> RefundId
refundAmount :: Refund -> Int
refundCurrency :: Refund -> Currency
refundCreated :: Refund -> UTCTime
refundObject :: Refund -> Text
refundCharge :: Refund -> ChargeId
refundBalanceTransaction :: Refund -> TransactionId
refundMetaData :: Refund -> MetaData

-- | <a>RefundId</a> for <a>Refund</a>
newtype RefundId
RefundId :: Text -> RefundId

-- | <a>ChargeId</a> associated with a <a>Charge</a>
data ChargeId
ChargeId :: Text -> ChargeId
ExpandedCharge :: Charge -> ChargeId

-- | <a>Charge</a> object in <tt>Stripe</tt> API
data Charge
Charge :: ChargeId -> Text -> UTCTime -> Bool -> Bool -> Int -> Currency -> Bool -> Card -> Bool -> StripeList Refund -> Maybe TransactionId -> Maybe Text -> Maybe Text -> Int -> Maybe CustomerId -> Maybe InvoiceId -> Maybe Description -> Maybe Dispute -> MetaData -> Maybe Description -> Maybe Text -> Maybe Text -> Charge
chargeId :: Charge -> ChargeId
chargeObject :: Charge -> Text
chargeCreated :: Charge -> UTCTime
chargeLiveMode :: Charge -> Bool
chargePaid :: Charge -> Bool
chargeAmount :: Charge -> Int
chargeCurrency :: Charge -> Currency
chargeRefunded :: Charge -> Bool
chargeCreditCard :: Charge -> Card
chargeCaptured :: Charge -> Bool
chargeRefunds :: Charge -> StripeList Refund
chargeBalanceTransaction :: Charge -> Maybe TransactionId
chargeFailureMessage :: Charge -> Maybe Text
chargeFailureCode :: Charge -> Maybe Text
chargeAmountRefunded :: Charge -> Int
chargeCustomerId :: Charge -> Maybe CustomerId
chargeInvoice :: Charge -> Maybe InvoiceId
chargeDescription :: Charge -> Maybe Description
chargeDispute :: Charge -> Maybe Dispute
chargeMetaData :: Charge -> MetaData
chargeStatementDescription :: Charge -> Maybe Description
chargeReceiptEmail :: Charge -> Maybe Text
chargeReceiptNumber :: Charge -> Maybe Text

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool


-- | <a>https://stripe.com/docs/api#subscriptions</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Subscription
--   import Web.Stripe.Customer
--   import Web.Stripe.Plan
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ do
--       Customer { customerId = cid } &lt;- createEmptyCustomer
--       Plan { planId = pid } &lt;- createPlan (PlanId "free plan")
--                        (0 :: Amount) -- free plan
--                        (USD :: Currency)
--                        (Month :: Inteval)
--                        ("sample plan" :: Name)
--                        ([] :: MetaData)
--     createSubscription cid pid ([] :: MetaData)
--     case result of
--       Right subscription -&gt; print subscription
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Subscription

-- | Create a <a>Subscription</a> by <a>CustomerId</a> and <a>PlanId</a>
createSubscription :: CustomerId -> PlanId -> MetaData -> Stripe Subscription

-- | Retrieve a <a>Subscription</a> by <a>CustomerId</a> and
--   <a>SubscriptionId</a>
getSubscription :: CustomerId -> SubscriptionId -> Stripe Subscription

-- | Retrieve a <a>Subscription</a> by <a>CustomerId</a> and
--   <a>SubscriptionId</a> with <a>ExpandParams</a>
getSubscriptionExpandable :: CustomerId -> SubscriptionId -> ExpandParams -> Stripe Subscription

-- | Retrieve active <a>Subscription</a>s
getSubscriptions :: CustomerId -> Limit -> StartingAfter SubscriptionId -> EndingBefore SubscriptionId -> Stripe (StripeList Subscription)

-- | Retrieve active <a>Subscription</a>s
getSubscriptionsExpandable :: CustomerId -> Limit -> StartingAfter SubscriptionId -> EndingBefore SubscriptionId -> ExpandParams -> Stripe (StripeList Subscription)

-- | Update a <a>Subscription</a> by <a>CustomerId</a> and
--   <a>SubscriptionId</a>
updateSubscription :: CustomerId -> SubscriptionId -> Maybe CouponId -> Maybe PlanId -> MetaData -> Stripe Subscription

-- | Delete a <a>Subscription</a> by <a>CustomerId</a> and
--   <a>SubscriptionId</a>
cancelSubscription :: CustomerId -> SubscriptionId -> Bool -> Stripe Subscription

-- | Subscription Object
data Subscription
Subscription :: SubscriptionId -> Plan -> Text -> UTCTime -> SubscriptionStatus -> CustomerId -> Bool -> UTCTime -> UTCTime -> Maybe UTCTime -> Maybe UTCTime -> Maybe UTCTime -> Maybe UTCTime -> Quantity -> Maybe Double -> Maybe Discount -> MetaData -> Subscription
subscriptionId :: Subscription -> SubscriptionId
subscriptionPlan :: Subscription -> Plan
subscriptionObject :: Subscription -> Text
subscriptionStart :: Subscription -> UTCTime
subscriptionStatus :: Subscription -> SubscriptionStatus
subscriptionCustomerId :: Subscription -> CustomerId
subscriptionCancelAtPeriodEnd :: Subscription -> Bool
subscriptionCurrentPeriodStart :: Subscription -> UTCTime
subscriptionCurrentPeriodEnd :: Subscription -> UTCTime
subscriptionEndedAt :: Subscription -> Maybe UTCTime
subscriptionTrialStart :: Subscription -> Maybe UTCTime
subscriptionTrialEnd :: Subscription -> Maybe UTCTime
subscriptionCanceledAt :: Subscription -> Maybe UTCTime
subscriptionQuantity :: Subscription -> Quantity
subscriptionApplicationFeePercent :: Subscription -> Maybe Double
subscriptionDiscount :: Subscription -> Maybe Discount
subscriptionMetaData :: Subscription -> MetaData

-- | <a>SubscriptionId</a> for a <a>Subscription</a>
newtype SubscriptionId
SubscriptionId :: Text -> SubscriptionId

-- | Status of a <a>Subscription</a>
data SubscriptionStatus
Trialing :: SubscriptionStatus
Active :: SubscriptionStatus
PastDue :: SubscriptionStatus
Canceled :: SubscriptionStatus
UnPaid :: SubscriptionStatus

-- | <a>CustomerId</a> for a <a>Customer</a>
data CustomerId
CustomerId :: Text -> CustomerId
ExpandedCustomer :: Customer -> CustomerId

-- | <a>CouponId</a> for a <a>Coupon</a>
newtype CouponId
CouponId :: Text -> CouponId

-- | <a>Coupon</a> Object
data Coupon
Coupon :: CouponId -> UTCTime -> Maybe Int -> Maybe Int -> Maybe Currency -> Bool -> Duration -> Maybe UTCTime -> Maybe Int -> Maybe Int -> Maybe Int -> Bool -> MetaData -> Coupon
couponId :: Coupon -> CouponId
couponCreated :: Coupon -> UTCTime
couponPercentOff :: Coupon -> Maybe Int
couponAmountOff :: Coupon -> Maybe Int
couponCurrency :: Coupon -> Maybe Currency
couponLiveMode :: Coupon -> Bool
couponDuration :: Coupon -> Duration
couponRedeemBy :: Coupon -> Maybe UTCTime
couponMaxRedemptions :: Coupon -> Maybe Int
couponTimesRedeemed :: Coupon -> Maybe Int
couponDurationInMonths :: Coupon -> Maybe Int
couponValid :: Coupon -> Bool
couponMetaData :: Coupon -> MetaData

-- | <a>PlanId</a> for a <a>Plan</a>
newtype PlanId
PlanId :: Text -> PlanId

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool


-- | <a>https://stripe.com/docs/api#tokens</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Token
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--         credit = CardNumber "4242424242424242"
--         em  = ExpMonth 12
--         ey  = ExpYear 2015
--         cvc = CVC "123"
--     result &lt;- stripe config $ createCardToken cn em ey cvc
--     case result of
--       Right token -&gt; print token
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Token

-- | Create a <a>Token</a> by specifiying Credit <a>Card</a> information
createCardToken :: CardNumber -> ExpMonth -> ExpYear -> CVC -> Stripe (Token Card)

-- | Create a <a>Token</a> for a specific <a>BankAccount</a>
createBankAccountToken :: Country -> RoutingNumber -> AccountNumber -> Stripe (Token BankAccount)

-- | Retrieve a <a>Token</a> by <a>TokenId</a>
getCardToken :: TokenId -> Stripe (Token Card)

-- | Retrieve a <a>Token</a> by <a>TokenId</a>
getBankAccountToken :: TokenId -> Stripe (Token BankAccount)

-- | Number associated with a <a>Card</a>
newtype CardNumber
CardNumber :: Text -> CardNumber

-- | Expiration Month for a <a>Card</a>
newtype ExpMonth
ExpMonth :: Int -> ExpMonth

-- | Expiration Year for a <a>Card</a>
newtype ExpYear
ExpYear :: Int -> ExpYear

-- | CVC for a <a>Card</a>
newtype CVC
CVC :: Text -> CVC

-- | <a>Token</a> Object
data Token a
Token :: TokenId -> Bool -> UTCTime -> Bool -> Text -> TokenType -> a -> Token a
tokenId :: Token a -> TokenId
tokenLiveMode :: Token a -> Bool
tokenCreated :: Token a -> UTCTime
tokenUsed :: Token a -> Bool
tokenObject :: Token a -> Text
tokenType :: Token a -> TokenType
tokenData :: Token a -> a

-- | <a>TokenId</a> of a <a>Token</a>
newtype TokenId
TokenId :: Text -> TokenId

-- | Type of <a>Token</a>
data TokenType
TokenCard :: TokenType
TokenBankAccount :: TokenType

-- | Country
newtype Country
Country :: Text -> Country

-- | Routing Number for Bank Account
newtype RoutingNumber
RoutingNumber :: Text -> RoutingNumber

-- | Account Number of a Bank Account
newtype AccountNumber
AccountNumber :: Text -> AccountNumber

-- | <a>Account</a> Object
data Account
Account :: AccountId -> Email -> Maybe Description -> Maybe Text -> Text -> Bool -> Bool -> Bool -> [Currency] -> Currency -> Text -> Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Account
accountId :: Account -> AccountId
accountEmail :: Account -> Email
accountStatementDescriptor :: Account -> Maybe Description
accountDisplayName :: Account -> Maybe Text
accountTimeZone :: Account -> Text
accountDetailsSubmitted :: Account -> Bool
accountChargeEnabled :: Account -> Bool
accountTransferEnabled :: Account -> Bool
accountCurrenciesSupported :: Account -> [Currency]
accountDefaultCurrency :: Account -> Currency
accountCountry :: Account -> Text
accountObject :: Account -> Text
accountBusinessName :: Account -> Maybe Text
accountBusinessURL :: Account -> Maybe Text
accountBusinessLogo :: Account -> Maybe Text
accountSupportPhone :: Account -> Maybe Text


-- | <a>https://stripe.com/docs/api#transfers</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Transfer
--   import Web.Stripe.Recipient
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config $ do
--       Recipient { recipientId = recipientid } &lt;- getRecipient (RecipientId "recipient_id")
--       createTransfer recipientid (100 :: Amount) USD ([] :: MetaData)
--     case result of
--       Right transfer    -&gt; print transfer
--       Left  stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Transfer

-- | Create a <a>Transfer</a>
createTransfer :: RecipientId -> Amount -> Currency -> MetaData -> Stripe Transfer

-- | Retrieve a <a>Transfer</a>
getTransfer :: TransferId -> Stripe Transfer

-- | Retrieve a <a>Transfer</a> with <a>ExpandParams</a>
getTransferExpandable :: TransferId -> ExpandParams -> Stripe Transfer

-- | Retrieve StripeList of <tt>Transfers</tt>
getTransfers :: Limit -> StartingAfter TransferId -> EndingBefore TransferId -> Stripe (StripeList Transfer)

-- | Retrieve StripeList of <tt>Transfers</tt> with <a>ExpandParams</a>
getTransfersExpandable :: Limit -> StartingAfter TransferId -> EndingBefore TransferId -> ExpandParams -> Stripe (StripeList Transfer)

-- | Update a <a>Transfer</a>
updateTransfer :: TransferId -> Maybe Description -> MetaData -> Stripe Transfer

-- | Cancel a <a>Transfer</a>
cancelTransfer :: TransferId -> Stripe Transfer

-- | <a>Transfer</a> Object
data Transfer
Transfer :: TransferId -> Text -> UTCTime -> UTCTime -> Bool -> Int -> Currency -> TransferStatus -> TransferType -> TransactionId -> Maybe Description -> Maybe BankAccount -> Maybe Text -> Maybe Text -> Maybe Description -> Maybe RecipientId -> MetaData -> Transfer
transferId :: Transfer -> TransferId
transferObject :: Transfer -> Text
transferCreated :: Transfer -> UTCTime
transferDate :: Transfer -> UTCTime
transferLiveMode :: Transfer -> Bool
transferAmount :: Transfer -> Int
transferCurrency :: Transfer -> Currency
transferStatus :: Transfer -> TransferStatus
transferType :: Transfer -> TransferType
transferBalanceTransaction :: Transfer -> TransactionId
transferDescription :: Transfer -> Maybe Description
transferBankAccount :: Transfer -> Maybe BankAccount
transferFailureMessage :: Transfer -> Maybe Text
transferFailureCode :: Transfer -> Maybe Text
transferStatementDescription :: Transfer -> Maybe Description
transferRecipient :: Transfer -> Maybe RecipientId
transferMetaData :: Transfer -> MetaData

-- | <a>TransferId</a>
newtype TransferId
TransferId :: Text -> TransferId

-- | Status of a <a>Transfer</a>
data TransferStatus
TransferPaid :: TransferStatus
TransferPending :: TransferStatus
TransferCanceled :: TransferStatus
TransferFailed :: TransferStatus

-- | Type of a <a>Transfer</a>
data TransferType
CardTransfer :: TransferType
BankAccountTransfer :: TransferType

-- | <a>RecipientId</a> for a <a>Recipient</a>
data RecipientId
RecipientId :: Text -> RecipientId
ExpandedRecipient :: Recipient -> RecipientId

-- | Recipient Object
data Recipient
Recipient :: RecipientId -> Text -> UTCTime -> Bool -> RecipientType -> Maybe Description -> Maybe Email -> Name -> Bool -> Maybe BankAccount -> StripeList RecipientCard -> Maybe RecipientCardId -> Recipient
recipientId :: Recipient -> RecipientId
recipientObject :: Recipient -> Text
recipientCreated :: Recipient -> UTCTime
recipientLiveMode :: Recipient -> Bool
recipientType :: Recipient -> RecipientType
recipientDescription :: Recipient -> Maybe Description
recipientEmail :: Recipient -> Maybe Email
recipientName :: Recipient -> Name
recipientVerified :: Recipient -> Bool
recipientActiveAccount :: Recipient -> Maybe BankAccount
recipientCards :: Recipient -> StripeList RecipientCard
recipientDefaultCard :: Recipient -> Maybe RecipientCardId
DeletedRecipient :: Maybe Bool -> RecipientId -> Recipient
deletedRecipient :: Recipient -> Maybe Bool
deletedRecipientId :: Recipient -> RecipientId

-- | Generic handling of Stripe JSON arrays
data StripeList a
StripeList :: [a] -> Text -> Text -> Maybe Int -> Bool -> StripeList a
list :: StripeList a -> [a]
stripeUrl :: StripeList a -> Text
object :: StripeList a -> Text
totalCount :: StripeList a -> Maybe Int
hasMore :: StripeList a -> Bool

-- | Stripe supports 138 currencies
data Currency

-- | United Arab Emirates Dirham
AED :: Currency

-- | Afghan Afghani
AFN :: Currency

-- | Albanian Lek
ALL :: Currency

-- | Armenian Dram
AMD :: Currency

-- | Netherlands Antillean Gulden
ANG :: Currency

-- | Angolan Kwanza
AOA :: Currency

-- | Argentine Peso
ARS :: Currency

-- | Australian Dollar
AUD :: Currency

-- | Aruban Florin
AWG :: Currency

-- | Azerbaijani Manat
AZN :: Currency

-- | Bosnia &amp; Herzegovina Convertible Mark
BAM :: Currency

-- | Barbadian Dollar
BBD :: Currency

-- | Bangladeshi Taka
BDT :: Currency

-- | Bulgarian Lev
BGN :: Currency

-- | Burundian Franc
BIF :: Currency

-- | Bermudian Dollar
BMD :: Currency

-- | Brunei Dollar
BND :: Currency

-- | Bolivian Boliviano
BOB :: Currency

-- | Brazilian Real
BRL :: Currency

-- | Bahamian Dollar
BSD :: Currency

-- | Botswana Pula
BWP :: Currency

-- | Belize Dollar
BZD :: Currency

-- | Canadian Dollar
CAD :: Currency

-- | Congolese Franc
CDF :: Currency

-- | Swiss Franc
CHF :: Currency

-- | Chilean Peso
CLP :: Currency

-- | Chinese Renminbi Yuan
CNY :: Currency

-- | Colombian Peso
COP :: Currency

-- | Costa Rican Colón
CRC :: Currency

-- | Cape Verdean Escudo
CVE :: Currency

-- | Czech Koruna
CZK :: Currency

-- | Djiboutian Franc
DJF :: Currency

-- | Danish Krone
DKK :: Currency

-- | Dominican Peso
DOP :: Currency

-- | Algerian Dinar
DZD :: Currency

-- | Estonian Kroon
EEK :: Currency

-- | Egyptian Pound
EGP :: Currency

-- | Ethiopian Birr
ETB :: Currency

-- | Euro
EUR :: Currency

-- | Fijian Dollar
FJD :: Currency

-- | Falkland Islands Pound
FKP :: Currency

-- | British Pound
GBP :: Currency

-- | Georgian Lari
GEL :: Currency

-- | Gibraltar Pound
GIP :: Currency

-- | Gambian Dalasi
GMD :: Currency

-- | Guinean Franc
GNF :: Currency

-- | Guatemalan Quetzal
GTQ :: Currency

-- | Guyanese Dollar
GYD :: Currency

-- | Hong Kong Dollar
HKD :: Currency

-- | Honduran Lempira
HNL :: Currency

-- | Croatian Kuna
HRK :: Currency

-- | Haitian Gourde
HTG :: Currency

-- | Hungarian Forint
HUF :: Currency

-- | Indonesian Rupiah
IDR :: Currency

-- | Israeli New Sheqel
ILS :: Currency

-- | Indian Rupee
INR :: Currency

-- | Icelandic Króna
ISK :: Currency

-- | Jamaican Dollar
JMD :: Currency

-- | Japanese Yen
JPY :: Currency

-- | Kenyan Shilling
KES :: Currency

-- | Kyrgyzstani Som
KGS :: Currency

-- | Cambodian Riel
KHR :: Currency

-- | Comorian Franc
KMF :: Currency

-- | South Korean Won
KRW :: Currency

-- | Cayman Islands Dollar
KYD :: Currency

-- | Kazakhstani Tenge
KZT :: Currency

-- | Lao Kip
LAK :: Currency

-- | Lebanese Pound
LBP :: Currency

-- | Sri Lankan Rupee
LKR :: Currency

-- | Liberian Dollar
LRD :: Currency

-- | Lesotho Loti
LSL :: Currency

-- | Lithuanian Litas
LTL :: Currency

-- | Latvian Lats
LVL :: Currency

-- | Moroccan Dirham
MAD :: Currency

-- | Moldovan Leu
MDL :: Currency

-- | Malagasy Ariary
MGA :: Currency

-- | Macedonian Denar
MKD :: Currency

-- | Mongolian Tögrög
MNT :: Currency

-- | Macanese Pataca
MOP :: Currency

-- | Mauritanian Ouguiya
MRO :: Currency

-- | Mauritian Rupee
MUR :: Currency

-- | Maldivian Rufiyaa
MVR :: Currency

-- | Malawian Kwacha
MWK :: Currency

-- | Mexican Peso
MXN :: Currency

-- | Malaysian Ringgit
MYR :: Currency

-- | Mozambican Metical
MZN :: Currency

-- | Namibian Dollar
NAD :: Currency

-- | Nigerian Naira
NGN :: Currency

-- | Nicaraguan Córdoba
NIO :: Currency

-- | Norwegian Krone
NOK :: Currency

-- | Nepalese Rupee
NPR :: Currency

-- | New Zealand Dollar
NZD :: Currency

-- | Panamanian Balboa
PAB :: Currency

-- | Peruvian Nuevo Sol
PEN :: Currency

-- | Papua New Guinean Kina
PGK :: Currency

-- | Philippine Peso
PHP :: Currency

-- | Pakistani Rupee
PKR :: Currency

-- | Polish Złoty
PLN :: Currency

-- | Paraguayan Guaraní
PYG :: Currency

-- | Qatari Riyal
QAR :: Currency

-- | Romanian Leu
RON :: Currency

-- | Serbian Dinar
RSD :: Currency

-- | Russian Ruble
RUB :: Currency

-- | Rwandan Franc
RWF :: Currency

-- | Saudi Riyal
SAR :: Currency

-- | Solomon Islands Dollar
SBD :: Currency

-- | Seychellois Rupee
SCR :: Currency

-- | Swedish Krona
SEK :: Currency

-- | Singapore Dollar
SGD :: Currency

-- | Saint Helenian Pound
SHP :: Currency

-- | Sierra Leonean Leone
SLL :: Currency

-- | Somali Shilling
SOS :: Currency

-- | Surinamese Dollar
SRD :: Currency

-- | São Tomé and Príncipe Dobra
STD :: Currency

-- | Salvadoran Colón
SVC :: Currency

-- | Swazi Lilangeni
SZL :: Currency

-- | Thai Baht
THB :: Currency

-- | Tajikistani Somoni
TJS :: Currency

-- | Tongan Paʻanga
TOP :: Currency

-- | Turkish Lira
TRY :: Currency

-- | Trinidad and Tobago Dollar
TTD :: Currency

-- | New Taiwan Dollar
TWD :: Currency

-- | Tanzanian Shilling
TZS :: Currency

-- | Ukrainian Hryvnia
UAH :: Currency

-- | Ugandan Shilling
UGX :: Currency

-- | United States Dollar
USD :: Currency

-- | Uruguayan Peso
UYU :: Currency

-- | Uzbekistani Som
UZS :: Currency

-- | Vietnamese Đồng
VND :: Currency

-- | Vanuatu Vatu
VUV :: Currency

-- | Samoan Tala
WST :: Currency

-- | Central African Cfa Franc
XAF :: Currency

-- | East Caribbean Dollar
XCD :: Currency

-- | West African Cfa Franc
XOF :: Currency

-- | Cfp Franc
XPF :: Currency

-- | Yemeni Rial
YER :: Currency

-- | South African Rand
ZAR :: Currency

-- | Zambian Kwacha
ZMW :: Currency

-- | Unknown Currency
UnknownCurrency :: Currency

-- | Amount representing a monetary value. Stripe represents pennies as
--   whole numbers i.e. 100 = $1
type Amount = Int

-- | Pagination Option for <a>StripeList</a>
type Limit = Maybe Int


-- | <a>https://stripe.com/docs/api#account</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Account
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config getAccountDetails
--     case result of
--       Right account    -&gt; print account
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe.Account

-- | Retrieve the object that represents your Stripe account
getAccountDetails :: Stripe Account

-- | <a>Account</a> Object
data Account
Account :: AccountId -> Email -> Maybe Description -> Maybe Text -> Text -> Bool -> Bool -> Bool -> [Currency] -> Currency -> Text -> Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Account
accountId :: Account -> AccountId
accountEmail :: Account -> Email
accountStatementDescriptor :: Account -> Maybe Description
accountDisplayName :: Account -> Maybe Text
accountTimeZone :: Account -> Text
accountDetailsSubmitted :: Account -> Bool
accountChargeEnabled :: Account -> Bool
accountTransferEnabled :: Account -> Bool
accountCurrenciesSupported :: Account -> [Currency]
accountDefaultCurrency :: Account -> Currency
accountCountry :: Account -> Text
accountObject :: Account -> Text
accountBusinessName :: Account -> Maybe Text
accountBusinessURL :: Account -> Maybe Text
accountBusinessLogo :: Account -> Maybe Text
accountSupportPhone :: Account -> Maybe Text

-- | <a>AccountId</a> of an <a>Account</a>
data AccountId
AccountId :: Text -> AccountId
ExpandedAccount :: Account -> AccountId


-- | <a>https://stripe.com/docs/api</a>
--   
--   <pre>
--   import Web.Stripe         
--   import Web.Stripe.Account
--   
--   main :: IO ()
--   main = do
--     let config = SecretKey "secret_key"
--     result &lt;- stripe config getAccountDetails
--     case result of
--       Right details -&gt; print details
--       Left stripeError -&gt; print stripeError
--   </pre>
module Web.Stripe

-- | Create a request to <a>Stripe</a>'s API
stripe :: FromJSON a => StripeConfig -> Stripe a -> IO (Either StripeError a)

-- | Create a custom request to <a>Stripe</a>'s API, Build your own! Useful
--   if you're using an old api) !
stripeRaw :: FromJSON a => StripeConfig -> StripeRequest -> IO (Either StripeError a)

-- | The <a>Stripe</a> Monad
type Stripe = EitherT StripeError (ReaderT (StripeConfig, Connection) IO)

-- | Stripe secret key
data StripeConfig
StripeConfig :: ByteString -> StripeConfig
secretKey :: StripeConfig -> ByteString

-- | Stripe Request holding <a>Method</a>, URL and <a>Params</a> for a
--   Request
data StripeRequest
StripeRequest :: Method -> Text -> Params -> StripeRequest

-- | Method of StripeRequest (i.e. <tt>GET</tt>, <tt>PUT</tt>,
--   <tt>POST</tt>, <tt>PUT</tt>)
method :: StripeRequest -> Method

-- | Endpoint of StripeRequest
endpoint :: StripeRequest -> Text

-- | Query Parameters of StripeRequest
queryParams :: StripeRequest -> Params

-- | Error Codes for HTTP Responses
data StripeErrorHTTPCode

-- | 400
BadRequest :: StripeErrorHTTPCode

-- | 401
UnAuthorized :: StripeErrorHTTPCode

-- | 402
RequestFailed :: StripeErrorHTTPCode

-- | 404
NotFound :: StripeErrorHTTPCode

-- | (&gt;=500)
StripeServerError :: StripeErrorHTTPCode

-- | All other codes
UnknownHTTPCode :: StripeErrorHTTPCode

-- | Stripe Error Types
data StripeErrorType
InvalidRequest :: StripeErrorType
APIError :: StripeErrorType
CardError :: StripeErrorType
ConnectionFailure :: StripeErrorType
ParseFailure :: StripeErrorType
UnknownErrorType :: StripeErrorType

-- | Stripe Error Codes
data StripeErrorCode
IncorrectNumber :: StripeErrorCode
InvalidNumber :: StripeErrorCode
InvalidExpiryMonth :: StripeErrorCode
InvalidExpiryYear :: StripeErrorCode
InvalidCVC :: StripeErrorCode
ExpiredCard :: StripeErrorCode
IncorrectCVC :: StripeErrorCode
IncorrectZIP :: StripeErrorCode
CardDeclined :: StripeErrorCode
Missing :: StripeErrorCode
ProcessingError :: StripeErrorCode
RateLimit :: StripeErrorCode
UnknownError :: StripeErrorCode

-- | Stripe Error
data StripeError
StripeError :: StripeErrorType -> Text -> Maybe StripeErrorCode -> Maybe Text -> Maybe StripeErrorHTTPCode -> StripeError
errorType :: StripeError -> StripeErrorType
errorMsg :: StripeError -> Text
errorCode :: StripeError -> Maybe StripeErrorCode
errorParam :: StripeError -> Maybe Text
errorHTTP :: StripeError -> Maybe StripeErrorHTTPCode
