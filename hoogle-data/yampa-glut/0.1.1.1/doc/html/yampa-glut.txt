-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Connects Yampa and GLUT
--   
@package yampa-glut
@version 0.1.1.1

module FRP.Yampa.GLUT.UI
data UI

-- | Re-display request from GLUT
redisplay :: SF (Event UI) (Event ())

-- | Re-shape request from GLUT
reshaped :: SF (Event UI) (Event Size)

-- | Window size
windowSize :: SF (Event UI) Size

-- | Latest mouse position in window
mousePosition :: SF (Event UI) Position

-- | Latest mouse position in window with simple coord transform (i.e.
--   unit)
simpleMousePosition :: Fractional a => SF (Event UI) (Vector2 a)

-- | Key action events
keyAction :: SF (Event UI) (Event (KeyState, Either Char SpecialKey))

-- | Mouse buttons action events
mouseButtonAction :: SF (Event UI) (Event (KeyState, MouseButton))

-- | State of modifiers associated with keyboard/mouse event
modifiers :: SF (Event UI) (Event Modifiers)

-- | Key press events
keyPress :: SF (Event UI) (Event (Either Char SpecialKey))

-- | Key pressed state for specific key
keyPressed :: Either Char SpecialKey -> SF (Event UI) Bool

-- | Mouse button pressed state for specific button
mouseButtonPressed :: MouseButton -> SF (Event UI) Bool

-- | Crossing/leaving event
crossing :: SF (Event UI) (Event Crossing)

module FRP.Yampa.GLUT.Adapter

-- | Adapter to connect <tt>FRP.Yampa</tt> with <tt>Graphics.UI.GLUT</tt>
--   and does <tt>simpleInit</tt>.
adaptSimple :: String -> IO () -> Reaction -> IO ()

-- | Adapter to connect <tt>FRP.Yampa</tt> with <tt>Graphics.UI.GLUT</tt>.
--   Assumes that GLUT have been initialized.
adapt :: IO () -> Reaction -> IO ()

-- | Simple initialization of GLUT with fixed frame rate 60 fps
simpleInit :: String -> IO ()

-- | Action to perform in response to something
data Action

-- | Top level reaction signal function
type Reaction = SF (Event UI) (Event Action)

-- | Simple IO action that do not control mainLoop life-time
actionIO :: IO () -> Action

-- | Terminate mainLoop action
actionExit :: Action
instance Monoid b => Monoid (SF a b)
instance Monoid a => Monoid (Event a)
instance Monoid Action
instance Newtype Action (IO ())
