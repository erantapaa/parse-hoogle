-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Table view for Yesod applications
--   
--   Table view for Yesod applications.
@package yesod-tableview
@version 0.2.1


-- | Little form for selecting the number of entries to show.
module Yesod.TableView.NumEntriesForm

-- | Run the number of entries form with the given prompt, options, initial
--   value and route function. If POST data is present, redirects to the
--   given route with the specified limit, otherwise just returns the form
--   widget.
runNumEntriesForm :: Bool -> String -> [Int] -> Int -> (Int -> Route s) -> GHandler sub s (GWidget sub s ())


-- | Class for datatypes displayable in a table view as widgets.
module Yesod.TableView.Widget

-- | This class defines how types will be rendered in the table view.
class TableViewWidget val where { type family TableSite val; type family TableSubsite val; }
tableHeader :: TableViewWidget val => val -> TableWidget val ()
tableRecord :: TableViewWidget val => Int -> Key val -> val -> TableWidget val ()
type GTableHandler val = GGHandler (TableSubsite val) (TableSite val)
type GTableWidget val = GGWidget (TableSubsite val) (TableSite val)
type TableHandler val = GHandler (TableSubsite val) (TableSite val)
type TableWidget val = GWidget (TableSubsite val) (TableSite val)


-- | Table-like view for tabular data.
module Yesod.TableView

-- | Table view settings. Defaults are given in parentheses.
data TableView val
TableView :: [Filter val] -> Maybe String -> [Order val] -> (Int -> Int -> Route (TableSite val)) -> Bool -> Bool -> Int -> Int -> String -> [Int] -> Maybe Int -> Maybe Int -> TableView val

-- | Table filter.
tableFilter :: TableView val -> [Filter val]

-- | HTML table id.
tableId :: TableView val -> Maybe String

-- | Table sorting order.
tableOrder :: TableView val -> [Order val]

-- | Table route.
tableRoute :: TableView val -> Int -> Int -> Route (TableSite val)

-- | Show table header?
tableShowHead :: TableView val -> Bool

-- | Add CSS styles?
tableStyled :: TableView val -> Bool

-- | Current pager limit.
tableCurrentLimit :: TableView val -> Int

-- | Current offset.
tableCurrentOffset :: TableView val -> Int

-- | Prompt in limit form.
tableLimitPrompt :: TableView val -> String

-- | Selectable limits (<tt>[10, 20, 50, 100]</tt>).
tableLimits :: TableView val -> [Int]

-- | Minimum pager limit (<tt>Just 10</tt>).
tableMinLimit :: TableView val -> Maybe Int

-- | Maximum pager limit (<tt>Just 100</tt>).
tableMaxLimit :: TableView val -> Maybe Int

-- | Default values for most fields. The following fields will be left
--   undefined: <a>tableRoute</a>, <a>tableCurrentLimit</a> and
--   <a>tableCurrentOffset</a>.
defTableView :: TableView val

-- | Simple smart constructor for common table view configurations.
makeTableView :: [Filter val] -> [Order val] -> Int -> Int -> (Int -> Int -> Route (TableSite val)) -> TableView val

-- | Generate a table view widget from the given configuration.
tableView :: (PersistBackend (YesodDB (TableSite val) (GTableHandler val IO)), PersistEntity val, TableViewWidget val, YesodPersist (TableSite val)) => TableView val -> TableHandler val (TableWidget val ())
