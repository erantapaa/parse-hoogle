-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A source code editor aiming for the convenience of use
--   
--   A simple command based code editor being developed for the mouse-free
--   workflow.
@package hob
@version 0.0.1.0

module Hob.DirectoryTree
type DirectoryForest = Forest DirectoryTreeElement
type DirectoryTreeLoader = FilePath -> IO DirectoryForest
type DirectoryReader = FilePath -> IO [FilePath]
type IsDirectoryCheck = FilePath -> IO Bool
data DirectoryTreeElement
DirectoryTreeElement :: String -> FilePath -> IsDirectory -> DirectoryTreeElement
elementLabel :: DirectoryTreeElement -> String
elementPath :: DirectoryTreeElement -> FilePath
isDirectory :: DirectoryTreeElement -> IsDirectory
fileTreeGenerator :: DirectoryReader -> IsDirectoryCheck -> DirectoryTreeLoader
instance Eq DirectoryTreeElement
instance Show DirectoryTreeElement

module Hob.Control
maybeDo :: Monad b => (a -> b ()) -> Maybe a -> b ()
flushEvents :: IO ()

module Hob.Ui.Editor.Search
highlightSearchPreview :: SourceView -> String -> IO ()
resetSearchPreview :: SourceView -> IO ()
findFirstFromCursor :: SourceView -> String -> IO ()
findNext :: SourceView -> IO ()
findPrevious :: SourceView -> IO ()
resetSearch :: SourceView -> IO ()
getEditorSearchString :: SourceView -> IO (Maybe String)
startReplace :: SourceView -> String -> String -> IO ()
replaceNext :: SourceView -> IO ()
resetReplace :: SourceView -> IO ()

module Hob.Context.UiContext
data UiContext
UiContext :: Window -> Notebook -> Entry -> TreeView -> Entry -> Label -> UiContext
mainWindow :: UiContext -> Window
mainNotebook :: UiContext -> Notebook
commandEntry :: UiContext -> Entry
sidebarTree :: UiContext -> TreeView
sidebarTreeSearch :: UiContext -> Entry
activeModesLabel :: UiContext -> Label

module Hob.Context.StyleContext
data StyleContext
defaultStyleContext :: FilePath -> IO StyleContext
uiFile :: StyleContext -> FilePath
uiTheme :: StyleContext -> FilePath
sourceStyleScheme :: StyleContext -> Maybe FilePath -> IO (Maybe SourceStyleScheme)
sourceStyleFont :: StyleContext -> Maybe FilePath -> IO (Maybe FontDescription)

module Hob.Context.FileContext
data FileContext
FileContext :: SourceLanguageManager -> FileLoader -> FileWriter -> FileTreeLoader -> FileContext
contextLanguageManager :: FileContext -> SourceLanguageManager
contextFileLoader :: FileContext -> FileLoader
contextFileWriter :: FileContext -> FileWriter
contextFileTreeLoader :: FileContext -> FileTreeLoader
type FileLoader = FilePath -> IO (Maybe Text)
type FileWriter = FilePath -> Text -> IO ()
type FileTreeLoader = IO (Forest DirectoryTreeElement)
defaultFileContext :: FileLoader -> FileWriter -> FileTreeLoader -> IO FileContext
sourceLanguage :: FileContext -> FilePath -> IO (Maybe SourceLanguage)

module Hob.Context.Types
type App = ReaderT Context IO
data EventBus
EventBus :: (Event -> App () -> IO ()) -> (Event -> IO [App ()]) -> EventBus
addListener :: EventBus -> Event -> App () -> IO ()
listenersForEvent :: EventBus -> Event -> IO [App ()]
data Context
Context :: StyleContext -> FileContext -> UiContext -> TreeStore DirectoryTreeElement -> CommandMatcher -> EditorList -> (Context -> Message -> IO ()) -> EventBus -> IO Int -> Context
styleContext :: Context -> StyleContext
fileContext :: Context -> FileContext
uiContext :: Context -> UiContext
fileTreeStore :: Context -> TreeStore DirectoryTreeElement
baseCommands :: Context -> CommandMatcher
editors :: Context -> EditorList
messageLoop :: Context -> Context -> Message -> IO ()
eventBus :: Context -> EventBus
idGenerator :: Context -> IO Int
data PreviewCommandHandler
PreviewCommandHandler :: App () -> App () -> PreviewCommandHandler
previewExecute :: PreviewCommandHandler -> App ()
previewReset :: PreviewCommandHandler -> App ()
data CommandHandler
CommandHandler :: Maybe PreviewCommandHandler -> App () -> CommandHandler
commandPreview :: CommandHandler -> Maybe PreviewCommandHandler
commandExecute :: CommandHandler -> App ()
data CommandMatcher
CommandMatcher :: KeyCommandMatcher -> TextCommandMatcher -> CommandMatcher
matchKeyBinding :: CommandMatcher -> KeyCommandMatcher
matchCommand :: CommandMatcher -> TextCommandMatcher
data Message
AppAction :: (App ()) -> Message
type KeyboardBinding = ([Modifier], String)
type KeyCommandMatcher = SingleCommandMatcher KeyboardBinding
type TextCommandMatcher = SingleCommandMatcher String
data Mode
Mode :: String -> CommandMatcher -> App () -> Mode
modeName :: Mode -> String
commandMatcher :: Mode -> CommandMatcher
cleanup :: Mode -> App ()
newtype Event
Event :: String -> Event
data Editor
Editor :: (Editor -> App Int) -> (Editor -> Mode -> App Editor) -> (Editor -> App Editor) -> (Editor -> App [Mode]) -> (Editor -> App Bool) -> Editor
editorId :: Editor -> Editor -> App Int
enterEditorMode :: Editor -> Editor -> Mode -> App Editor
exitLastEditorMode :: Editor -> Editor -> App Editor
modeStack :: Editor -> Editor -> App [Mode]
isCurrentlyActive :: Editor -> Editor -> App Bool
data EditorList
EditorList :: (([Editor] -> IO [Editor]) -> IO ()) -> IO [Editor] -> EditorList
updateEditors :: EditorList -> ([Editor] -> IO [Editor]) -> IO ()
getEditors :: EditorList -> IO [Editor]
fromContext :: MonadReader r m => (r -> a) -> m a
instance Eq Event
instance Show Event
instance Monoid CommandMatcher

module Hob.Context.CommandMatcher
createMatcherForPrefix :: String -> (String -> CommandHandler) -> CommandMatcher
createMatcherForCommand :: String -> CommandHandler -> CommandMatcher
createMatcherForKeyBinding :: KeyboardBinding -> CommandHandler -> CommandMatcher

module Hob.Context.Events
initEventBus :: IO EventBus
registerEventHandler :: Event -> App () -> App ()
emitEvent :: Event -> App ()

module Hob.Context.Editor
initEditors :: IO EditorList
runOnEditor :: (Editor -> Editor -> a) -> Editor -> a
enterMode :: Mode -> App ()
exitLastMode :: App ()
activeModes :: App (Maybe [Mode])
getActiveCommands :: App CommandMatcher

module Hob.Context
type App = ReaderT Context IO
data Context
Context :: StyleContext -> FileContext -> UiContext -> TreeStore DirectoryTreeElement -> CommandMatcher -> EditorList -> (Context -> Message -> IO ()) -> EventBus -> IO Int -> Context
styleContext :: Context -> StyleContext
fileContext :: Context -> FileContext
uiContext :: Context -> UiContext
fileTreeStore :: Context -> TreeStore DirectoryTreeElement
baseCommands :: Context -> CommandMatcher
editors :: Context -> EditorList
messageLoop :: Context -> Context -> Message -> IO ()
eventBus :: Context -> EventBus
idGenerator :: Context -> IO Int
data PreviewCommandHandler
PreviewCommandHandler :: App () -> App () -> PreviewCommandHandler
previewExecute :: PreviewCommandHandler -> App ()
previewReset :: PreviewCommandHandler -> App ()
data CommandHandler
CommandHandler :: Maybe PreviewCommandHandler -> App () -> CommandHandler
commandPreview :: CommandHandler -> Maybe PreviewCommandHandler
commandExecute :: CommandHandler -> App ()
data CommandMatcher
CommandMatcher :: KeyCommandMatcher -> TextCommandMatcher -> CommandMatcher
matchKeyBinding :: CommandMatcher -> KeyCommandMatcher
matchCommand :: CommandMatcher -> TextCommandMatcher
type KeyboardBinding = ([Modifier], String)
type KeyCommandMatcher = SingleCommandMatcher KeyboardBinding
type TextCommandMatcher = SingleCommandMatcher String
data Mode
Mode :: String -> CommandMatcher -> App () -> Mode
modeName :: Mode -> String
commandMatcher :: Mode -> CommandMatcher
cleanup :: Mode -> App ()
newtype Event
Event :: String -> Event
data Editor
Editor :: (Editor -> App Int) -> (Editor -> Mode -> App Editor) -> (Editor -> App Editor) -> (Editor -> App [Mode]) -> (Editor -> App Bool) -> Editor
editorId :: Editor -> Editor -> App Int
enterEditorMode :: Editor -> Editor -> Mode -> App Editor
exitLastEditorMode :: Editor -> Editor -> App Editor
modeStack :: Editor -> Editor -> App [Mode]
isCurrentlyActive :: Editor -> Editor -> App Bool
data EditorList
EditorList :: (([Editor] -> IO [Editor]) -> IO ()) -> IO [Editor] -> EditorList
updateEditors :: EditorList -> ([Editor] -> IO [Editor]) -> IO ()
getEditors :: EditorList -> IO [Editor]
initContext :: StyleContext -> FileContext -> UiContext -> TreeStore DirectoryTreeElement -> CommandMatcher -> IO Context
runOnEditor :: (Editor -> Editor -> a) -> Editor -> a
enterMode :: Mode -> App ()
exitLastMode :: App ()
activeModes :: App (Maybe [Mode])
deferredRunner :: Context -> App () -> IO ()
registerEventHandler :: Event -> App () -> App ()
emitEvent :: Event -> App ()
createMatcherForPrefix :: String -> (String -> CommandHandler) -> CommandMatcher
createMatcherForCommand :: String -> CommandHandler -> CommandMatcher
createMatcherForKeyBinding :: KeyboardBinding -> CommandHandler -> CommandMatcher
fromContext :: MonadReader r m => (r -> a) -> m a
runApp :: Context -> App a -> IO a
getActiveCommands :: App CommandMatcher

module Hob.Ui.CommandEntry
newCommandEntry :: Entry -> App ()
newCommandEntryDetached :: Entry -> App (App (), App ())

module Hob.Ui.Editor
newEditorForText :: Notebook -> Maybe FilePath -> Text -> App ()
getActiveEditorText :: Context -> IO (Maybe Text)
getActiveEditorTab :: Context -> IO (Maybe Widget)
getActiveEditor :: Context -> IO (Maybe SourceView)
invokeOnActiveEditor :: (SourceView -> IO ()) -> App ()
getEditorText :: TextViewClass a => a -> IO Text
getEditorFilePath :: SourceView -> IO (Maybe FilePath)
setEditorFilePath :: SourceView -> Maybe FilePath -> IO ()
getEditorFromNotebookTab :: Widget -> IO (Maybe SourceView)
updateEditorTitle :: SourceView -> IO ()

module Hob.Command.SaveCurrentTab
type NewFileNameChooser = IO (Maybe FilePath)
saveCurrentEditorTab :: CommandHandler
saveCurrentEditorTabHandler :: NewFileNameChooser -> App ()

module Hob.Command.NewTab
launchNewFileEditor :: Context -> Notebook -> NewFileEditorLauncher
editNewFile :: App ()
editNewFileCommandHandler :: CommandHandler
type NewFileEditorLauncher = FilePath -> IO ()

module Hob.Ui.Sidebar
newSideBarFileTree :: Context -> TreeView -> NewFileEditorLauncher -> IO ()
reloadSidebarTree :: App ()
activateSidebarPath :: TreeViewClass tv => tv -> TreePath -> IO ()
syncPathToSidebar :: FilePath -> App ()
nameColumn :: ColumnId row String
pathColumn :: ColumnId row FilePath

module Hob.Command.ReloadSidebarTree
reloadSidebarTreeCommandHandler :: CommandHandler

module Hob.Ui.SidebarSearch
newSideBarFileTreeSearch :: Context -> IO ()
startSidebarSearch :: Context -> String -> IO ()
updateSidebarSearch :: DirectorySearchIndex -> App ()
continueSidebarSearch :: DirectorySearchIndex -> App ()
continueSidebarSearchBackwards :: DirectorySearchIndex -> App ()
initFileTreeIndex :: App DirectorySearchIndex
instance Show LetterIndex
instance Show a => Show (SearchIndexNode a)
instance Eq a => Eq (SearchIndexNode a)

module Hob.Command.FocusSidebar
focusSidebarCommandHandler :: CommandHandler
syncFocusSidebarCommandHandler :: CommandHandler

module Hob.Command.FocusPreviousTab
focusPreviousTabCommandHandler :: CommandHandler

module Hob.Command.FocusNumberedTab
focusNumberedTabCommandHandler :: Int -> CommandHandler

module Hob.Command.FocusNextTab
focusNextTabCommandHandler :: CommandHandler

module Hob.Command.FocusCommandEntry
toggleFocusOnCommandEntryCommandHandler :: CommandHandler
focusActiveEditorAndExitLastModeCommandHandler :: CommandHandler
focusCommandEntryCommandHandler :: CommandHandler

module Hob.Command.FindText
searchCommandHandler :: String -> CommandHandler
searchNextCommandHandler :: CommandHandler
searchBackwardsCommandHandler :: CommandHandler
searchPreview :: String -> App ()
searchResetPreview :: App ()
searchMode :: Mode

module Hob.Command.ReplaceText
createMatcherForReplace :: Char -> (String -> String -> CommandHandler) -> CommandMatcher
replaceCommandHandler :: String -> String -> CommandHandler
replaceNextCommandHandler :: CommandHandler

module Hob.Command.CloseCurrentTab
closeCurrentEditorTab :: CommandHandler

module Hob.Ui
loadGui :: FileContext -> StyleContext -> IO Context
getActiveEditorText :: Context -> IO (Maybe Text)
getActiveEditorTab :: Context -> IO (Maybe Widget)
getEditorText :: TextViewClass a => a -> IO Text
getActiveEditor :: Context -> IO (Maybe SourceView)
