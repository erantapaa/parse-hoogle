-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Additional utilities to work with Yhc Core.
--   
--   Additional utilities for Yhc Core developed as by-products of front-
--   and back-ends, also for possible inclusion to the Yhc Core package.
@package ycextra
@version 0.1

module Yhc.Core.Selector

-- | Given an expr (normally a CoreApp) tell if it is an application of a
--   selector function to a data object. Selector functions consist of a
--   single CoreCase statement with the only alternative. Application must
--   be exactly to one argument. The case alternative must be a constructor
--   application to field selectors, and the return value must be one of
--   the selectors. If the analysis condition is satisfied, constructor
--   name and a field index are returned. Otherwise empty string and -1 are
--   returned. The index returned is zero-based.
coreSelectorIndex :: Core -> CoreFuncName -> (CoreCtorName, Int)

module Yhc.Core.Annotation

-- | Annotations database: a two-level map to hold property mappings for
--   each of annotated objects.
type CoreAnnotations = Map String (Map String String)

-- | For each annotable object, unique key should be generated, to be used
--   with the top level map in the annotations database.
class CoreAnnotable a
toAnnotationKey :: (CoreAnnotable a) => a -> String

-- | For each property, an encoding (to String) and decoding (from String)
--   functions should be defined.
class CoreProperty p
toAnnString :: (CoreProperty p) => p -> String
fromAnnString :: (CoreProperty p, Monad m) => String -> m p

-- | Given an annotable object, append a property with given name and value
--   to the existing annotations database.
addAnnotation :: (CoreAnnotable a, CoreProperty p) => a -> (String, p) -> CoreAnnotations -> CoreAnnotations
getAnnotation :: (CoreAnnotable a, CoreProperty p) => a -> String -> CoreAnnotations -> Maybe p

-- | Given the two annotation sets, combine them into one. If the same
--   object is annotated in both sets, annotations are combines for such
--   object, and left annotations take precedence.
combineAnnotations :: CoreAnnotations -> CoreAnnotations -> CoreAnnotations

module Yhc.Core.AnnotatePrims

-- | Build a map of primitive specifications given the list of primitive
--   description records. This as well may be used by frontends.
buildPrimSpecMap :: [[String]] -> Map String [String]

-- | Specifications map of normal primitives
normPrimSpecMap :: Map String [String]
newtype CoreStrictness
CoreStrictness :: [Bool] -> CoreStrictness
newtype CoreTypeSig
CoreTypeSig :: String -> CoreTypeSig

-- | Given the linked Core, build annotations for all primitives defined
--   that belong to the given set of primitives, that is, their names are
--   member keys of the given primitives specification map.
buildPrimAnno :: Map String [String] -> Core -> CoreAnnotations

-- | Given the linked Core, build annotations for all normal primitives
--   that is, belonging to the <a>normPrimSpecMap</a>.
buildNormPrimAnno :: Core -> CoreAnnotations
instance CoreProperty CoreTypeSig
instance CoreProperty CoreStrictness
instance CoreAnnotable CoreFunc

module Yhc.Core.StrictAnno

-- | Given a function, return a list of arguments. True is strict in that
--   argument, False is not. [] is unknown strictness
coreStrictAnno :: CoreAnnotations -> Core -> (CoreFuncName -> [Bool])

module Yhc.Core.Unreachable

-- | Determine missing (unreachable) functions. <i>All functions called</i>
--   except <i>All functions defined</i>
coreUnreachableFuncs :: Core -> [CoreFuncName]

-- | Determine missing (unreachable) data constructors. <i>All ctors
--   called\</i>used in patterns<i> except </i>All ctors defined/
coreUnreachableDatas :: Core -> [CoreCtorName]


-- | Rename all functions and data constructors given a map of names
module Yhc.Core.MapNames

-- | Rename all functions in the Core given the map of old to new names.
mapFunNames :: Map CoreFuncName CoreFuncName -> Core -> Core

-- | Rename all data objects (LHS of data XXX) given the map of old to new
--   names.
mapDataNames :: Map CoreDataName CoreDataName -> Core -> Core

-- | Rename all data constructors in the Core given the map of old to new
--   names.
mapConNames :: Map CoreCtorName CoreCtorName -> Core -> Core

module Yhc.Core.Extra

-- | Non-crashing version of coreCtor
coreCtorMaybe :: Core -> CoreCtorName -> Maybe CoreCtor

-- | Non-crashing version of coreData
coreDataMaybe :: Core -> CoreDataName -> Maybe CoreData
