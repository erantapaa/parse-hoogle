-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | User-facing operations for dealing with texts
--   
@package texts
@version 0.3.2


-- | Handy data types for strict and lazy texts, with conversion functions
--   to/from each.
module Texts.Types

-- | Lazy text.
type LText = Text

-- | Strict text.
type SText = Text

-- | A class for converting to Text.
class ToText a
toText :: ToText a => a -> SText
toLazyText :: ToText a => a -> LText

-- | A class for converting from Text.
class FromText a
fromText :: FromText a => SText -> Maybe a
fromLazyText :: FromText a => LText -> Maybe a
instance FromText String
instance ToText String
instance ToText SText


-- | English-focused text operations.
module Texts.English

-- | Given an integral number, give it a vague English description which
--   makes it seem better than it is. Examples: &lt;3 -&gt; a couple,
--   &lt;1000 -&gt; hundreds, etc.
bigUp :: Integral a => a -> SText

-- | Display a time span as one time relative to another.
relativeTimes :: UTCTime -> UTCTime -> Bool -> SText

-- | Limit the length of the string and ellipsize it.
ellipsize :: Int -> SText -> SText

-- | Add a suffix to an integral, e.g. 1st, 2nd, 3rd, 21st.
ordSuffix :: Integral n => n -> SText

-- | The indefinite article to be used before a word, e.g. "An" elephant,
--   "a" car, etc.
indefinite :: SText -> SText

-- | Is a character a vowel?
isVowel :: Char -> Bool

-- | Is a character a consonant?
isConsonant :: Char -> Bool


-- | Text operations for web programming.
module Texts.Web

-- | Explode a text into its constituent links.
explodeLinks :: SText -> [Either URI SText]


-- | Re-exports operations for dealing with texts.
module Texts
