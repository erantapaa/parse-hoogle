-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A generic comments interface for a Yesod application
--   
--   A generic comments interface for a Yesod application
@package yesod-comments
@version 0.9.1


module Yesod.Comments.Core
class YesodAuthPersist m => YesodComments m where editRoute = Nothing deleteRoute = Nothing
commentStorage :: YesodComments m => CommentStorage s m
userDetails :: YesodComments m => AuthId m -> HandlerT m IO (Maybe UserDetails)
threadRoute :: YesodComments m => ThreadId -> Route m
editRoute :: YesodComments m => Maybe (ThreadId -> CommentId -> Route m)
deleteRoute :: YesodComments m => Maybe (ThreadId -> CommentId -> Route m)
type CommentId = Int
type ThreadId = Text

-- | The core data type, a Comment
data Comment
Comment :: CommentId -> ThreadId -> UTCTime -> Text -> Text -> Text -> Markdown -> Bool -> Comment
commentId :: Comment -> CommentId
cThreadId :: Comment -> ThreadId
cTimeStamp :: Comment -> UTCTime
cIpAddress :: Comment -> Text
cUserName :: Comment -> Text
cUserEmail :: Comment -> Text
cContent :: Comment -> Markdown

-- | compatability field, always true
cIsAuth :: Comment -> Bool

-- | Information about the User needed to store comments.
data UserDetails
UserDetails :: Text -> Text -> Text -> UserDetails

-- | Text version of a user id, <tt>toPathPiece userId</tt> is recommended.
--   Comments are stored using this value so users can freely change names
--   without losing comments.
textUserId :: UserDetails -> Text

-- | The name that's actually displayed
friendlyName :: UserDetails -> Text

-- | Not shown but stored
emailAddress :: UserDetails -> Text

-- | How to save and restore comments from persistent storage. All
--   necessary actions are accomplished through these 5 functions.
--   Currently, only <tt>persistStorage</tt> is available.
data CommentStorage s m
CommentStorage :: (ThreadId -> CommentId -> HandlerT m IO (Maybe Comment)) -> (Comment -> HandlerT m IO ()) -> (Comment -> Comment -> HandlerT m IO ()) -> (Comment -> HandlerT m IO ()) -> (Maybe ThreadId -> HandlerT m IO [Comment]) -> CommentStorage s m
csGet :: CommentStorage s m -> ThreadId -> CommentId -> HandlerT m IO (Maybe Comment)
csStore :: CommentStorage s m -> Comment -> HandlerT m IO ()
csUpdate :: CommentStorage s m -> Comment -> Comment -> HandlerT m IO ()
csDelete :: CommentStorage s m -> Comment -> HandlerT m IO ()

-- | Pass <tt>Nothing</tt> to get all comments site-wide.
csLoad :: CommentStorage s m -> Maybe ThreadId -> HandlerT m IO [Comment]
instance Eq UserDetails
instance Eq Comment


module Yesod.Comments.Utils

-- | Map the commenter's id to user details or return defaults.
commentUserDetails :: YesodComments m => Comment -> HandlerT m IO UserDetails

-- | Returns <tt>Nothing</tt> if user is not authenticated
currentUserDetails :: YesodComments m => HandlerT m IO (Maybe UserDetails)

-- | Halts with <tt>permissionDenied</tt> if user is not authenticated
requireUserDetails :: YesodComments m => HandlerT m IO (UserDetails)

-- | For a comment that was not authenticated or cannot be mapped, the
--   default details are the id and email stored directly on the comment.
defaultUserDetails :: Comment -> UserDetails
isCommentingUser :: YesodComments m => Comment -> HandlerT m IO Bool

-- | Given pixel size and email, return the gravatar url
gravatar :: Int -> Text -> String


module Yesod.Comments.Form
data CommentForm
CommentForm :: UserDetails -> ThreadId -> Markdown -> CommentForm
formUser :: CommentForm -> UserDetails
formThread :: CommentForm -> ThreadId
formComment :: CommentForm -> Markdown
commentForm :: RenderMessage m FormMessage => ThreadId -> UserDetails -> Maybe Comment -> Form m CommentForm
commentFromForm :: YesodComments m => CommentForm -> HandlerT m IO Comment

-- | Run the form and stores the comment on successful submission
runForm :: YesodComments m => ThreadId -> Maybe UserDetails -> WidgetT m IO ()

-- | Both handle form submission and present form HTML. On
--   <tt>FormSuccess</tt>, run the given function on the submitted value.
runFormWith :: YesodComments m => Maybe Comment -> (CommentForm -> HandlerT m IO ()) -> ThreadId -> Maybe UserDetails -> WidgetT m IO ()


module Yesod.Comments.View
showComments :: YesodComments m => [Comment] -> WidgetT m IO ()
showComment :: YesodComments m => Comment -> WidgetT m IO ()


module Yesod.Comments.Storage

-- | Store comments in an instance of YesodPersit with a SQL backend
persistStorage :: (YesodPersist m, YesodPersistBackend m ~ SqlPersist) => CommentStorage s m
migrateComments :: (MonadBaseControl IO m, MonadIO m, MonadLogger m) => Migration (SqlPersistT m)
instance PersistEntity (SqlCommentGeneric backend)
instance PersistFieldSql (SqlCommentGeneric backend)
instance PersistField (SqlCommentGeneric backend)


module Yesod.Comments.Management.Routes
data CommentsAdmin
CommentsAdmin :: CommentsAdmin
resourcesCommentsAdmin :: [ResourceTree String]
instance Show (Route CommentsAdmin)
instance Eq (Route CommentsAdmin)
instance Read (Route CommentsAdmin)
instance RouteAttrs CommentsAdmin
instance RenderRoute CommentsAdmin
instance ParseRoute CommentsAdmin


-- | <pre>
--   /comments CommentsAdminR CommentsAdmin getCommentsAdmin
--   </pre>
module Yesod.Comments.Management
getCommentsAdmin :: a -> CommentsAdmin
instance YesodComments master => YesodSubDispatch CommentsAdmin (HandlerT master IO)


-- | A generic Comments interface for a Yesod application.
module Yesod.Comments
addComments :: (RenderMessage m FormMessage, YesodComments m) => ThreadId -> WidgetT m IO ()
