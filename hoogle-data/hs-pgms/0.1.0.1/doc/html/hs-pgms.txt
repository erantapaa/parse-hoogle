-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Programmer's Mine Sweeper in Haskell
--   
--   This package allows people to code Minesweeper strategies in Haskell
--   and run them in a graphical UI. Inspired by
--   <a>http://www.ccs.neu.edu/home/ramsdell/pgms/index.html</a>.
@package hs-pgms
@version 0.1.0.1


-- | This module is part of Haskell PGMS.
--   
--   It provides types and a monad for implementing and running Minesweeper
--   strategies. It's the core of PGMS.
module Mine

-- | Description of a mine sweeper configuration (or difficulty).
data Config
Config :: Pos -> Int -> Config

-- | the board size
cSize :: Config -> Pos

-- | the number of mines placed on the board
cMines :: Config -> Int

-- | Check validity of a config.
--   
--   The width and height must be at least 2, and the number of mines must
--   be between 1 and the number of cells on the board, minus 1.
validConfig :: Config -> Bool

-- | Default config: 9x9 with 10 mines
beginner :: Config

-- | Default config: 16x16 with 40 mines
intermediate :: Config

-- | Default config: 30x16 with 99 mines
expert :: Config

-- | A point in 2D space with integer coordinates.
--   
--   Used to adress cells on a Minesweeper board, and also to describe
--   board sizes.
data Pos
Pos :: Int -> Int -> Pos
pX :: Pos -> Int
pY :: Pos -> Int

-- | A cell on a Minesweeper board.
data Cell

-- | a hidden cell
Hidden :: Cell

-- | a marked cell
Marked :: Cell

-- | oops, you stepped on a mine here!
Exploded :: Cell

-- | an exposed cell with a count of neighbours
Exposed :: Int -> Cell

-- | A complete Minesweeper board, including hidden state.
data Board
Board :: Config -> Array Pos Bool -> View -> Int -> Board

-- | board size etc.
bConfig :: Board -> Config

-- | array indicating the position of the mines
bMines :: Board -> Array Pos Bool

-- | current view
bView :: Board -> View

-- | number of mines left to find
bTodo :: Board -> Int

-- | A view of the Minesweeper board.
type View = Array Pos Cell

-- | Find the neighbouring cells of a given cell.
--   
--   The <a>Config</a> parameter is used to find the boundaries of the
--   board.
neighbours :: Config -> Pos -> [Pos]

-- | The monad for implementing Minesweeper strategies.
data StrategyM a

-- | A strategy with some meta-information.
--   
--   It's advisable to define your own strategies in terms of
--   <a>defaultStrategy</a> so that future additions to that record don't
--   break your code.
data Strategy
Strategy :: String -> String -> String -> (StdGen -> StrategyM String) -> Strategy

-- | The strategy's name. It should be ASCII and not contain spaces.
sName :: Strategy -> String

-- | The strategy's author.
sAuthor :: Strategy -> String

-- | A description of the strategy.
sDescription :: Strategy -> String

-- | The strategy's implementation.
sRun :: Strategy -> StdGen -> StrategyM String

-- | Default values for <a>Strategy</a>.
--   
--   <pre>
--   myStrategy :: Strategy
--   myStrategy = defaultStrategy {
--       sName = "Hiho",
--       sRun  = \_ -&gt; return "I don't want to play anymore, see you!"
--   }
--   </pre>
defaultStrategy :: Strategy

-- | Reveal a cell. Returns the number of mines in the neighbourhood.
--   
--   Note: Revealing a cell with a mine beneath will lose the game.
move :: Pos -> StrategyM Int

-- | Like <a>move</a>, but with no return value.
move_ :: Pos -> StrategyM ()

-- | Mark a cell.
--   
--   Note: Marking a cell without a mine beneath will lose the game. This
--   is a deviation from standard Minesweeper.
mark :: Pos -> StrategyM ()

-- | Get a view of the current board.
getView :: StrategyM View

-- | Get the current board's config.
--   
--   Note: the config will never change throughout a game.
getConfig :: StrategyM Config

-- | Provide a debug message.
--   
--   These will be displayed in the status line in the GUI or on the
--   terminal when running the command line version in verbose mode.
traceMine :: String -> StrategyM ()

-- | A game result.
data Result a

-- | The game was won.
Won :: Result a

-- | The strategy implementation finished before the game was over.
Unfinished :: a -> Result a

-- | The game was lost.
Lost :: Result a

-- | A pure version of <a>playGameP</a>.
playGame :: Config -> StdGen -> StrategyM a -> (Result a, Board)

-- | UI interface
--   
--   These are actions for the <a>MonadPrompt</a> monad.
--   
--   <ul>
--   <li><a>Start</a> - A new game just started.</li>
--   <li><a>Update</a> - A move was made, and the indicated cell
--   changed</li>
--   <li><a>Trace</a> - The strategy provided a trace message.</li>
--   </ul>
data Play a
Start :: Board -> Play ()
Update :: Pos -> Board -> Play ()
Trace :: String -> Board -> Play ()

-- | Play a game.
--   
--   The result is a <a>Prompt</a> action, which is suitable for
--   implementing a UI that displays the game's progress.
playGameP :: Config -> StdGen -> StrategyM a -> Prompt Play (Result a, Board)
instance (Show a) => Show (Result a)
instance (Eq a) => Eq (Result a)
instance Monad StrategyM
instance Eq Config
instance Show Config
instance Eq Cell
instance Show Cell
instance Show Pos
instance Ord Pos
instance Eq Pos
instance Ix Pos
instance Show Board
