-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parser for darkplaces colorful text
--   
@package darkplaces-text
@version 0.2.1

module DarkPlaces.Text.Types
data DPTextToken a
SimpleColor :: Int -> DPTextToken a
HexColor :: Int -> DPTextToken a
DPNewline :: DPTextToken a
DPString :: a -> DPTextToken a
newtype DPText a
DPText :: [DPTextToken a] -> DPText a
type BinaryDPText = DPText ByteString
type DecodedDPText = DPText Text
data DecodeType
Utf8Lenient :: DecodeType
Utf8Ignore :: DecodeType
Utf8Strict :: DecodeType
NexuizDecode :: DecodeType
type DecodeFun a b = DPText a -> DPText b
data DPStreamState a
DPStreamState :: a -> DPTextToken a -> DPStreamState a
streamLeft :: DPStreamState a -> a
streamColor :: DPStreamState a -> DPTextToken a
type BinStreamState = DPStreamState ByteString
defaultStreamState :: BinStreamState
simpleColor :: ByteString -> DPTextToken a
hexColor :: ByteString -> DPTextToken a
isString :: DPTextToken a -> Bool
isColor :: DPTextToken a -> Bool
isNewline :: DPTextToken a -> Bool
isTextData :: DPTextToken a -> Bool
mapToken :: (a -> b) -> DPTextToken a -> DPTextToken b
mapDPText :: (a -> b) -> DPText a -> DPText b
mapDPTextStream :: (a -> b) -> DPStreamState a -> DPStreamState b
putDPText' :: Printable a => (Handle -> IO ()) -> Handle -> DPText a -> IO ()
putDPText'' :: Printable a => Handle -> DPText a -> IO ()
putDPTextNoReset :: Printable a => Handle -> DPText a -> IO ()
toText :: (Monoid a, IsString a) => DPText a -> a
optimizeDPText :: Monoid a => DPText a -> DPText a
instance Show a => Show (DPTextToken a)
instance Eq a => Eq (DPTextToken a)
instance Show a => Show (DPText a)
instance Eq a => Eq (DPText a)
instance Show DecodeType
instance Read DecodeType
instance Eq DecodeType
instance Ord DecodeType
instance Enum DecodeType
instance Bounded DecodeType
instance Show a => Show (DPStreamState a)
instance Eq a => Eq (DPStreamState a)
instance Monoid (DPText a)
instance Printable a => Printable (DPText a)

module DarkPlaces.Text
newtype DPText a
DPText :: [DPTextToken a] -> DPText a
data DPTextToken a
SimpleColor :: Int -> DPTextToken a
HexColor :: Int -> DPTextToken a
DPNewline :: DPTextToken a
DPString :: a -> DPTextToken a
data DecodeType
Utf8Lenient :: DecodeType
Utf8Ignore :: DecodeType
Utf8Strict :: DecodeType
NexuizDecode :: DecodeType
data DPStreamState a
DPStreamState :: a -> DPTextToken a -> DPStreamState a
streamLeft :: DPStreamState a -> a
streamColor :: DPStreamState a -> DPTextToken a
type BinStreamState = DPStreamState ByteString
data PrintStreamArgs
PrintStreamArgs :: Bool -> BinStreamState -> DecodeFun ByteString Text -> PrintStreamArgs
withColor :: PrintStreamArgs -> Bool
streamState :: PrintStreamArgs -> BinStreamState
decodeFun :: PrintStreamArgs -> DecodeFun ByteString Text
type BinaryDPText = DPText ByteString
type DecodedDPText = DPText Text

-- | convert lazy <a>ByteString</a> to <a>BinaryDPText</a>
parseDPText :: ByteString -> BinaryDPText
defaultStreamState :: BinStreamState
defaultPrintStreamArgs :: PrintStreamArgs

-- | Removes colors from `DPText a`
stripColors :: DPText a -> DPText a
minimizeColors :: Eq a => DPText a -> DPText a
simplifyColors :: DPText a -> DPText a

-- | Will print color message if first arg is True | or if handle is
--   terminal device
hPrintDPText :: (Printable a, Eq a) => Handle -> DecodeFun ByteString a -> Bool -> ByteString -> IO ()
printDPText :: (Printable a, Eq a) => DecodeFun ByteString a -> Bool -> ByteString -> IO ()
hPrintStreamDPText :: Handle -> PrintStreamArgs -> ByteString -> IO BinStreamState
printStreamDPText :: PrintStreamArgs -> ByteString -> IO BinStreamState
hStreamEnd :: Handle -> Bool -> BinStreamState -> IO ()
streamEnd :: Bool -> BinStreamState -> IO ()
toUTF :: DecodeType -> BinaryDPText -> DecodedDPText
toASCII :: DecodeType -> BinaryDPText -> DecodedDPText
hSupportColors :: Handle -> IO Bool
supportColors :: IO Bool
hPutDPText :: (Printable a, Eq a) => Handle -> DPText a -> IO ()
hPutDPTextLn :: (Printable a, Eq a) => Handle -> DPText a -> IO ()

-- | prints <a>DPText</a> to console using utf8 encoding
putDPText :: (Printable a, Eq a) => DPText a -> IO ()

-- | same as <tt>putStrUtf</tt> but with newline break at the end
putDPTextLn :: (Printable a, Eq a) => DPText a -> IO ()
instance IsString (DPText ByteString)
