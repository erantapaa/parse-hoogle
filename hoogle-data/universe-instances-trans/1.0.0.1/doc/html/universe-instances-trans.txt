-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Universe instances for types from the transformers and mtl packages
--   
--   Universe instances for types from the transformers and mtl packages
@package universe-instances-trans
@version 1.0.0.1

module Data.Universe.Instances.Trans

-- | Creating an instance of this class is a declaration that your type is
--   recursively enumerable (and that <a>universe</a> is that enumeration).
--   In particular, you promise that any finite inhabitant has a finite
--   index in <a>universe</a>, and that no inhabitant appears at two
--   different finite indices.
class Universe a
universe :: Universe a => [a]

-- | Creating an instance of this class is a declaration that your
--   <a>universe</a> eventually ends. Minimal definition: no methods
--   defined. By default, <tt>universeF = universe</tt>, but for some types
--   (like <a>Either</a>) the <a>universeF</a> method may have a more
--   intuitive ordering.
class Universe a => Finite a
universeF :: Finite a => [a]
instance (Finite (f a), Finite (g a)) => Finite (Product f g a)
instance Finite (f (g a)) => Finite (Compose f g a)
instance (Finite e, Ord e, Finite (m a)) => Finite (ReaderT e m a)
instance Finite (f a) => Finite (IdentityT f a)
instance Finite a => Finite (Identity a)
instance (Universe (f a), Universe (g a)) => Universe (Product f g a)
instance Universe (f (g a)) => Universe (Compose f g a)
instance (Finite e, Ord e, Universe (m a)) => Universe (ReaderT e m a)
instance Universe (f a) => Universe (IdentityT f a)
instance Universe a => Universe (Identity a)
