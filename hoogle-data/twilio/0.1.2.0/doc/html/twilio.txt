-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Twilio REST API library for Haskell
--   
@package twilio
@version 0.1.2.0

module Twilio.Types.PriceUnit
data PriceUnit
USD :: PriceUnit
EUR :: PriceUnit
JPY :: PriceUnit
OtherPriceUnit :: !Text -> PriceUnit
instance Eq PriceUnit
instance FromJSON PriceUnit
instance Show PriceUnit

module Twilio.Types.List
class FromJSON b => List a b | a -> b where parseJSONToList o@(Object v) = unwrap (getListWrapper :: Wrapper (Maybe PagingInformation -> [b] -> a)) <$> maybePagingInformation <*> (v .: getConst (getPlural :: Const Text (a, b)) :: Parser [b]) where maybePagingInformation = case fromJSON o of { Success pagingInformation -> return $ Just pagingInformation _ -> return Nothing } parseJSONToList v = trace (show v) mzero
getListWrapper :: List a b => Wrapper (Maybe PagingInformation -> [b] -> a)
getList :: List a b => a -> [b]
getPlural :: List a b => Const Text (a, b)
parseJSONToList :: List a b => Value -> Parser a
data PagingInformation
PagingInformation :: !Integer -> !Integer -> !Integer -> !Integer -> !Integer -> !Integer -> !(Maybe URI) -> !(Maybe URI) -> !(Maybe URI) -> !(Maybe URI) -> !(Maybe URI) -> PagingInformation

-- | The current page number. Zero-indexed, so the first page is 0.
pageNumber :: PagingInformation -> !Integer

-- | The total number of pages.
numberOfPages :: PagingInformation -> !Integer

-- | How many items are in each page.
pageSize :: PagingInformation -> !Integer

-- | The total number of items in the list.
total :: PagingInformation -> !Integer

-- | The position in the overall list of the first item in this page.
start :: PagingInformation -> !Integer

-- | The position in the overall list of the last item in this page.
end :: PagingInformation -> !Integer

-- | The <a>URI</a> of the current page.
pageURI :: PagingInformation -> !(Maybe URI)

-- | The <a>URI</a> for the first page of this list.
firstPageURI :: PagingInformation -> !(Maybe URI)

-- | The <a>URI</a> for the next page of this list.
nextPageURI :: PagingInformation -> !(Maybe URI)

-- | The <a>URI</a> for the previous page of this list.
previousPageURI :: PagingInformation -> !(Maybe URI)

-- | The <a>URI</a> for the last page of this list.
lastPageURI :: PagingInformation -> !(Maybe URI)
data Wrapper a

-- | <a>wrap</a>s a value so as not to break encapsulation.
wrap :: a -> Wrapper a
instance Show PagingInformation
instance Eq PagingInformation
instance Ord PagingInformation
instance FromJSON PagingInformation

module Twilio.Types.ISOCountryCode

-- | Country codes in ISO 3166-1 alpha-2 format supported by Twilio.
data ISOCountryCode

-- | Australia
AU :: ISOCountryCode

-- | Austria
AT :: ISOCountryCode

-- | Bahrain
BH :: ISOCountryCode

-- | Belgium
BE :: ISOCountryCode

-- | Brazil
BR :: ISOCountryCode

-- | Bulgaria
BG :: ISOCountryCode

-- | Canada
CA :: ISOCountryCode

-- | Cyprus
CY :: ISOCountryCode

-- | Czech Republic
CZ :: ISOCountryCode

-- | Denmark
DK :: ISOCountryCode

-- | Dominican Republic
DO :: ISOCountryCode

-- | El Salvador
SV :: ISOCountryCode

-- | Estonia
EE :: ISOCountryCode

-- | Finland
FI :: ISOCountryCode

-- | France
FR :: ISOCountryCode

-- | Greece
GR :: ISOCountryCode

-- | Hong Kong
HK :: ISOCountryCode

-- | Ireland
IE :: ISOCountryCode

-- | Israel
IL :: ISOCountryCode

-- | Italy
IT :: ISOCountryCode

-- | Japan
JP :: ISOCountryCode

-- | Latvia
LV :: ISOCountryCode

-- | Lithuania
LT :: ISOCountryCode

-- | Luxembourg
LU :: ISOCountryCode

-- | Malta
MT :: ISOCountryCode

-- | Mexico
MX :: ISOCountryCode

-- | The Netherlands
NL :: ISOCountryCode

-- | Norway
NO :: ISOCountryCode

-- | New Zealand
NZ :: ISOCountryCode

-- | Peru
PE :: ISOCountryCode

-- | Poland
PL :: ISOCountryCode

-- | Portugal
PT :: ISOCountryCode

-- | Puerto Rico
PR :: ISOCountryCode

-- | Romania
RO :: ISOCountryCode

-- | Slovakia
SK :: ISOCountryCode

-- | South Africa
ZA :: ISOCountryCode

-- | Spain
ES :: ISOCountryCode

-- | Sweden
SE :: ISOCountryCode

-- | Switzerland
CH :: ISOCountryCode

-- | United Kingdom
GB :: ISOCountryCode

-- | United States
US :: ISOCountryCode
instance Bounded ISOCountryCode
instance Enum ISOCountryCode
instance Eq ISOCountryCode
instance Ord ISOCountryCode
instance Read ISOCountryCode
instance Show ISOCountryCode
instance FromJSON ISOCountryCode

module Twilio.Types.Capability
type Capabilities = Set Capability
data Capability
Voice :: Capability
SMS :: Capability
MMS :: Capability
instance Bounded Capability
instance Enum Capability
instance Eq Capability
instance Ord Capability
instance Read Capability
instance Show Capability
instance FromJSON Capabilities

module Twilio.Types.AddressRequirement
data AddressRequirement
None :: AddressRequirement
Any :: AddressRequirement
Local :: AddressRequirement
Foreign :: AddressRequirement
instance Bounded AddressRequirement
instance Enum AddressRequirement
instance Eq AddressRequirement
instance Ord AddressRequirement
instance FromJSON AddressRequirement
instance Show AddressRequirement
instance Read AddressRequirement

module Twilio.Internal.Parser
(<&>) :: Functor f => f a -> (a -> b) -> f b
maybeReturn' :: Maybe (Maybe a) -> Parser (Maybe a)
maybeReturn'' :: Maybe (Maybe (Maybe a)) -> Parser (Maybe a)
filterEmpty :: Text -> Maybe Text
parseDate :: (Monad m, MonadPlus m) => Text -> m UTCTime
parseDateTime :: (Monad m, MonadPlus m) => Text -> m UTCTime
maybeReturn :: (Monad m, MonadPlus m) => Maybe a -> m a
newtype NonEmptyText
NonEmptyText :: Maybe Text -> NonEmptyText
getNonEmptyText :: NonEmptyText -> Maybe Text

-- | Note that the parser only returns Nothing if the input is Nothing. If
--   the input is an incorrectly formatted Text the parse will fail.
parseMaybeDateTime :: Maybe Text -> Parser (Maybe UTCTime)
valueToText :: Value -> Maybe Text
instance FromJSON NonEmptyText

module Twilio.Types.SID
class SID s where getSID = (gGetSID :: Rep s () -> Text) . from makeSID = to . (gMakeSID :: Text -> Rep s ()) parseSID = getConst . parseSID'
getSID :: SID s => s -> Text
parseSID :: SID s => Text -> Maybe s
data AccountSID
data AddressSID
data ApplicationSID
data CallSID
data ConnectAppSID
data MessageSID
data PhoneNumberSID
data RecordingSID
data TranscriptionSID
data UsageTriggerSID
instance Typeable AccountSID
instance Typeable AddressSID
instance Typeable ApplicationSID
instance Typeable CallSID
instance Typeable ConnectAppSID
instance Typeable MessageSID
instance Typeable PhoneNumberSID
instance Typeable RecordingSID
instance Typeable TranscriptionSID
instance Typeable UsageTriggerSID
instance Eq AccountSID
instance Generic AccountSID
instance Ord AccountSID
instance Read AccountSID
instance Show AccountSID
instance Eq AddressSID
instance Generic AddressSID
instance Ord AddressSID
instance Read AddressSID
instance Show AddressSID
instance Eq ApplicationSID
instance Generic ApplicationSID
instance Ord ApplicationSID
instance Read ApplicationSID
instance Show ApplicationSID
instance Eq CallSID
instance Generic CallSID
instance Ord CallSID
instance Read CallSID
instance Show CallSID
instance Eq ConnectAppSID
instance Generic ConnectAppSID
instance Ord ConnectAppSID
instance Read ConnectAppSID
instance Show ConnectAppSID
instance Eq MessageSID
instance Generic MessageSID
instance Ord MessageSID
instance Read MessageSID
instance Show MessageSID
instance Eq PhoneNumberSID
instance Generic PhoneNumberSID
instance Ord PhoneNumberSID
instance Read PhoneNumberSID
instance Show PhoneNumberSID
instance Eq RecordingSID
instance Generic RecordingSID
instance Ord RecordingSID
instance Read RecordingSID
instance Show RecordingSID
instance Eq TranscriptionSID
instance Generic TranscriptionSID
instance Ord TranscriptionSID
instance Read TranscriptionSID
instance Show TranscriptionSID
instance Eq UsageTriggerSID
instance Generic UsageTriggerSID
instance Ord UsageTriggerSID
instance Read UsageTriggerSID
instance Show UsageTriggerSID
instance Datatype D1AccountSID
instance Constructor C1_0AccountSID
instance Selector S1_0_0AccountSID
instance Datatype D1AddressSID
instance Constructor C1_0AddressSID
instance Selector S1_0_0AddressSID
instance Datatype D1ApplicationSID
instance Constructor C1_0ApplicationSID
instance Selector S1_0_0ApplicationSID
instance Datatype D1CallSID
instance Constructor C1_0CallSID
instance Selector S1_0_0CallSID
instance Datatype D1ConnectAppSID
instance Constructor C1_0ConnectAppSID
instance Selector S1_0_0ConnectAppSID
instance Datatype D1MessageSID
instance Constructor C1_0MessageSID
instance Selector S1_0_0MessageSID
instance Datatype D1PhoneNumberSID
instance Constructor C1_0PhoneNumberSID
instance Selector S1_0_0PhoneNumberSID
instance Datatype D1RecordingSID
instance Constructor C1_0RecordingSID
instance Selector S1_0_0RecordingSID
instance Datatype D1TranscriptionSID
instance Constructor C1_0TranscriptionSID
instance Selector S1_0_0TranscriptionSID
instance Datatype D1UsageTriggerSID
instance Constructor C1_0UsageTriggerSID
instance Selector S1_0_0UsageTriggerSID
instance GSID (D1 a (C1 b (S1 c (Rec0 Text))) ())
instance ToJSON UsageTriggerSID
instance FromJSON UsageTriggerSID
instance SID UsageTriggerSID
instance ToJSON TranscriptionSID
instance FromJSON TranscriptionSID
instance SID TranscriptionSID
instance ToJSON RecordingSID
instance FromJSON RecordingSID
instance SID RecordingSID
instance ToJSON PhoneNumberSID
instance FromJSON PhoneNumberSID
instance SID PhoneNumberSID
instance ToJSON MessageSID
instance FromJSON MessageSID
instance SID MessageSID
instance ToJSON ConnectAppSID
instance FromJSON ConnectAppSID
instance SID ConnectAppSID
instance ToJSON CallSID
instance FromJSON CallSID
instance SID CallSID
instance ToJSON ApplicationSID
instance FromJSON ApplicationSID
instance SID ApplicationSID
instance ToJSON AddressSID
instance FromJSON AddressSID
instance SID AddressSID
instance ToJSON AccountSID
instance FromJSON AccountSID
instance SID AccountSID

module Twilio.Types.AuthToken

-- | Your authentication token is used to make authenticated REST API
--   requests to your Twilio account.
data AuthToken

-- | Get the <a>Text</a> representation of an <a>AuthToken</a>.
getAuthToken :: AuthToken -> Text

-- | Parse a <a>Text</a> to an <a>AuthToken</a>.
parseAuthToken :: Text -> Maybe AuthToken
instance Show AuthToken
instance Eq AuthToken
instance Ord AuthToken
instance FromJSON AuthToken

module Twilio.Internal.Request

-- | <a>RequestF</a> represents an HTTP request and stores a continuaton
--   for the eventual <a>Response</a> to the request.
newtype RequestF a
RequestF :: (Request, Response ByteString -> a) -> RequestF a

-- | <tt><a>RequestT</a> m a</tt> augments an existing monad <tt>m</tt>
--   with the ability to perform HTTP requests for <tt>Resource</tt>s.
newtype RequestT m a
RequestT :: FreeT RequestF m a -> RequestT m a
runRequestT :: RequestT m a -> FreeT RequestF m a
class Monad m => MonadRequest m
request :: MonadRequest m => (Response ByteString -> m a) -> Request -> m a

-- | A dummy interpreter
baseURL :: Text
runRequest' :: (Monad m, MonadIO m) => (Text, Text) -> RequestT m a -> m a
instance Typeable RequestF
instance Typeable RequestT
instance Functor RequestF
instance Generic (RequestF a)
instance Monad m => Applicative (RequestT m)
instance Monad m => Functor (RequestT m)
instance Generic (RequestT m a)
instance Monad m => Monad (RequestT m)
instance MonadIO m => MonadIO (RequestT m)
instance MonadTrans RequestT
instance Datatype D1RequestF
instance Constructor C1_0RequestF
instance Datatype D1RequestT
instance Constructor C1_0RequestT
instance Selector S1_0_0RequestT
instance Monad m => MonadRequest (RequestT m)

module Control.Monad.Twilio

-- | This monad allows you to make authenticated REST API requests to
--   Twilio using your <a>AccountSID</a> and <a>AuthToken</a>.
type Twilio = TwilioT IO

-- | Run zero or more REST API requests to Twilio.
runTwilio :: Credentials -> Twilio a -> IO a

-- | Parse an <a>AccountSID</a> and <a>AuthToken</a> before running zero or
--   more REST API requests to Twilio.
--   
--   For example, you can fetch the <tt>Calls</tt> resource in the
--   <a>IO</a> monad as follows:
--   
--   <pre>
--   module Main where
--   
--   import Control.Monad.IO.Class (liftIO)
--   import System.Environment (getEnv)
--   import Twilio.Calls as Calls
--   import Twilio.Types
--   
--   -- | Print calls.
--   main :: IO ()
--   main = runTwilio' (getEnv "ACCOUNT_SID")
--                     (getEnv "AUTH_TOKEN")
--        $ Calls.get &gt;&gt;= liftIO . print
--   </pre>
runTwilio' :: IO String -> IO String -> Twilio a -> IO a

-- | This monad transformer allows you to make authenticated REST API
--   requests to Twilio using your <a>AccountSID</a> and <a>AuthToken</a>.
newtype TwilioT m a
TwilioT :: (Monad m => (Credentials, AccountSID) -> RequestT m a) -> TwilioT m a

-- | Run zero or more REST API requests to Twilio, unwrapping the inner
--   monad <tt>m</tt>.
runTwilioT :: MonadIO m => Credentials -> TwilioT m a -> m a

-- | Parse an <a>AccountSID</a> and <a>AuthToken</a> before running zero or
--   more REST API requests to Twilio, unwrapping the inner monad
--   <tt>m</tt>.
runTwilioT' :: (Functor m, MonadThrow m, MonadIO m) => m String -> m String -> TwilioT m a -> m a

-- | Your <a>AccountSID</a> and <a>AuthToken</a> are used to make
--   authenticated REST API requests to Twilio.
type Credentials = (AccountSID, AuthToken)

-- | The set of <a>Exception</a>s that may be thrown when attempting to
--   make requests against Twilio's REST API.
data TwilioException
InvalidSID :: !Text -> TwilioException
InvalidAuthToken :: !Text -> TwilioException
InvalidCredentials :: TwilioException
UnexpectedResponse :: !(Response ByteString) -> TwilioException
instance Typeable TwilioException
instance Show TwilioException
instance Eq TwilioException
instance Exception TwilioException
instance MonadIO m => MonadIO (TwilioT m)
instance MonadTrans TwilioT
instance MonadThrow m => MonadThrow (TwilioT m)
instance Monad m => MonadReader (Credentials, AccountSID) (TwilioT m)
instance Monad m => Monad (TwilioT m)
instance Applicative m => Applicative (TwilioT m)
instance Functor (TwilioT m)
instance Monad m => MonadRequest (TwilioT m)

module Twilio.Types
data APIVersion
API_2010_04_01 :: APIVersion
API_2008_08_01 :: APIVersion
makeTwilioRequest :: Monad m => Text -> TwilioT m Request
makeTwilioRequest' :: Monad m => Text -> TwilioT m Request
makeTwilioPOSTRequest :: Monad m => Text -> [(ByteString, ByteString)] -> TwilioT m Request
makeTwilioPOSTRequest' :: Monad m => Text -> [(ByteString, ByteString)] -> TwilioT m Request
instance Eq APIVersion
instance FromJSON APIVersion
instance Show APIVersion
instance Read APIVersion

module Twilio.AvailablePhoneNumber
data AvailablePhoneNumber
AvailablePhoneNumber :: !Text -> !Text -> !(Maybe Integer) -> !(Maybe Text) -> !(Maybe Double) -> !(Maybe Double) -> !Text -> !(Maybe Integer) -> !ISOCountryCode -> !(Maybe AddressRequirement) -> !Capabilities -> AvailablePhoneNumber
friendlyName :: AvailablePhoneNumber -> !Text
phoneNumber :: AvailablePhoneNumber -> !Text
lata :: AvailablePhoneNumber -> !(Maybe Integer)
rateCenter :: AvailablePhoneNumber -> !(Maybe Text)
latitude :: AvailablePhoneNumber -> !(Maybe Double)
longitude :: AvailablePhoneNumber -> !(Maybe Double)
region :: AvailablePhoneNumber -> !Text
postalCode :: AvailablePhoneNumber -> !(Maybe Integer)
isoCountry :: AvailablePhoneNumber -> !ISOCountryCode
addressRequirements :: AvailablePhoneNumber -> !(Maybe AddressRequirement)
capabilities :: AvailablePhoneNumber -> !Capabilities
instance Eq AvailablePhoneNumber
instance Show AvailablePhoneNumber
instance FromJSON AvailablePhoneNumber

module Twilio.UsageRecord
data UsageRecord
UsageRecord :: !Text -> !Text -> !AccountSID -> !UTCTime -> !UTCTime -> !Double -> !Text -> !(Maybe Double) -> !(Maybe Text) -> !Double -> !PriceUnit -> !URI -> UsageRecord
category :: UsageRecord -> !Text
description :: UsageRecord -> !Text
accountSID :: UsageRecord -> !AccountSID
startDate :: UsageRecord -> !UTCTime
endDate :: UsageRecord -> !UTCTime
usage :: UsageRecord -> !Double
usageUnit :: UsageRecord -> !Text
count :: UsageRecord -> !(Maybe Double)
countUnit :: UsageRecord -> !(Maybe Text)
price :: UsageRecord -> !Double
priceUnit :: UsageRecord -> !PriceUnit
uri :: UsageRecord -> !URI
instance Show UsageRecord
instance Eq UsageRecord
instance FromJSON UsageRecord

module Twilio.Internal.Resource

-- | <a>Get</a> represents REST resources that support HTTP GET requests
--   with any number of arguments.
class Get r
get :: Get r => r

-- | <a>Get0</a> represents REST resources that support HTTP GET requests
--   with 0 arguments.
class Get0 r
get0 :: (Get0 r, MonadThrow m) => TwilioT m r

-- | <a>Get1</a> represents REST resources that support HTTP GET requests
--   with 1 argument.
class Get1 a r
get1 :: (Get1 a r, MonadThrow m) => a -> TwilioT m r

-- | <a>Post</a> represents REST resources that support HTTP POST requests
--   with any number of arguments.
class Post r
post :: Post r => r

-- | <a>Post0</a> represents REST resources that support HTTP POST requests
--   with 0 arguments.
class Post0 r
post0 :: (Post0 r, MonadThrow m) => TwilioT m r

-- | <a>Post1</a> represents REST resources that support HTTP POST requests
--   with 1 argument.
class Post1 a r
post1 :: (Post1 a r, MonadThrow m) => a -> TwilioT m r

-- | <a>Post2</a> represents REST resources that support HTTP POST requests
--   with 2 arguments.
class Post2 a b r
post2 :: (Post2 a b r, MonadThrow m) => a -> b -> TwilioT m r

-- | <a>Post3</a> represents REST resources that support HTTP POST requests
--   with 3 arguments.
class Post3 a b c r
post3 :: (Post3 a b c r, MonadThrow m) => a -> b -> c -> TwilioT m r
parseJSONFromResponse :: (FromJSON a, MonadThrow m) => Response ByteString -> m a
instance [overlap ok] (MonadThrow m, Post3 a b c r) => Post (a -> b -> c -> TwilioT m r)
instance [overlap ok] (MonadThrow m, Post2 a b r) => Post (a -> b -> TwilioT m r)
instance [overlap ok] (MonadThrow m, Post1 a r) => Post (a -> TwilioT m r)
instance [overlap ok] (MonadThrow m, Post0 r) => Post (TwilioT m r)
instance [overlap ok] (MonadThrow m, Get1 a r) => Get (a -> TwilioT m r)
instance [overlap ok] (MonadThrow m, Get0 r) => Get (TwilioT m r)

module Twilio.Account
data Account
Account :: !AccountSID -> !UTCTime -> !UTCTime -> !Text -> !Type -> !Status -> !AuthToken -> !URI -> !(Maybe AccountSID) -> Account
sid :: Account -> !AccountSID
dateCreated :: Account -> !UTCTime
dateUpdated :: Account -> !UTCTime
friendlyName :: Account -> !Text
type' :: Account -> !Type
status :: Account -> !Status
authToken :: Account -> !AuthToken
uri :: Account -> !URI
ownerAccountSID :: Account -> !(Maybe AccountSID)
data AccountSID
get :: MonadThrow m => AccountSID -> TwilioT m Account

-- | Suspends a subaccount by POST-ing the parameter <a>status</a> with the
--   value <a>Suspended</a>.
suspend :: Monad m => AccountSID -> TwilioT m ()
unsuspend :: Monad m => AccountSID -> TwilioT m ()
close :: Monad m => AccountSID -> TwilioT m ()
data Status
Active :: Status
Suspended :: Status
Closed :: Status
data Type
Full :: Type
Trial :: Type
instance Show Status
instance Read Status
instance Eq Status
instance Ord Status
instance Enum Status
instance Bounded Status
instance Show Type
instance Read Type
instance Eq Type
instance Ord Type
instance Enum Type
instance Bounded Type
instance Show Account
instance Eq Account
instance Ord Account
instance FromJSON Type
instance FromJSON Status
instance Get1 AccountSID Account
instance FromJSON Account

module Twilio.Accounts
data Accounts
Accounts :: !PagingInformation -> ![Account] -> Accounts
pagingInformation :: Accounts -> !PagingInformation
list :: Accounts -> ![Account]

-- | Get <a>Accounts</a>.
--   
--   For example, you can fetch the <a>Accounts</a> resource in the
--   <a>IO</a> monad as follows:
--   
--   <pre>
--   module Main where
--   
--   import Control.Monad.IO.Class (liftIO)
--   import System.Environment (getEnv)
--   import Twilio.Accounts as Accounts
--   import Twilio.Types
--   
--   -- | Print accounts.
--   main :: IO ()
--   main = runTwilio' (getEnv "ACCOUNT_SID")
--                     (getEnv "AUTH_TOKEN")
--        $ Accounts.get &gt;&gt;= liftIO . print
--   </pre>
get :: MonadThrow m => TwilioT m Accounts
post :: MonadThrow m => Maybe Text -> TwilioT m Account

-- | Create a new <a>Account</a> instance resource as a subaccount of the
--   one used to make the request.
--   
--   For example, you can create a subaccount, "foo", as follows:
--   
--   <pre>
--   module Main where
--   
--   import Control.Monad.IO.Class (liftIO)
--   import System.Environment (getEnv)
--   import Twilio.Accounts (createSubAccount)
--   import Twilio.Types
--   
--   -- | Create and print a subaccount, "foo".
--   main :: IO ()
--   main = runTwilio' (getEnv "ACCOUNT_SID")
--                     (getEnv "AUTH_TOKEN")
--        $ createSubAccount (Just "foo") &gt;&gt;= liftIO . print
--   </pre>
createSubAccount :: MonadThrow m => Maybe Text -> TwilioT m Account
instance Show Accounts
instance Eq Accounts
instance Ord Accounts
instance Post1 (Maybe Text) Account
instance Post1 Text Account
instance Post0 Account
instance Get0 Accounts
instance FromJSON Accounts
instance List Accounts Account

module Twilio.Address
data Address
Address :: !AddressSID -> !AccountSID -> !Text -> !Text -> !Text -> !Text -> !Text -> !(Maybe Integer) -> !ISOCountryCode -> Address
sid :: Address -> !AddressSID
accountSID :: Address -> !AccountSID
friendlyName :: Address -> !Text
customerName :: Address -> !Text
street :: Address -> !Text
city :: Address -> !Text
region :: Address -> !Text
postalCode :: Address -> !(Maybe Integer)
isoCountry :: Address -> !ISOCountryCode

-- | Get an <a>Address</a> by <a>AddressSID</a>.
get :: MonadThrow m => AddressSID -> TwilioT m Address
instance Eq Address
instance Show Address
instance Get1 AddressSID Address
instance FromJSON Address

module Twilio.Addresses
data Addresses
Addresses :: PagingInformation -> [Address] -> Addresses
addressesPagingInformation :: Addresses -> PagingInformation
addressList :: Addresses -> [Address]
get :: MonadThrow m => TwilioT m Addresses
instance Show Addresses
instance Eq Addresses
instance Get0 Addresses
instance FromJSON Addresses
instance List Addresses Address

module Twilio.Application
data Application
Application :: !ApplicationSID -> !UTCTime -> !UTCTime -> !Text -> !AccountSID -> !APIVersion -> !(Maybe URI) -> !(Maybe Method) -> !(Maybe URI) -> !(Maybe Method) -> !(Maybe URI) -> !(Maybe Method) -> !Bool -> !(Maybe URI) -> !(Maybe Method) -> !(Maybe URI) -> !(Maybe Method) -> !(Maybe URI) -> !(Maybe URI) -> !URI -> Application
sid :: Application -> !ApplicationSID
dateCreated :: Application -> !UTCTime
dateUpdated :: Application -> !UTCTime
friendlyName :: Application -> !Text
accountSID :: Application -> !AccountSID
apiVersion :: Application -> !APIVersion
voiceURL :: Application -> !(Maybe URI)
voiceMethod :: Application -> !(Maybe Method)
voiceFallbackURL :: Application -> !(Maybe URI)
voiceFallbackMethod :: Application -> !(Maybe Method)
statusCallback :: Application -> !(Maybe URI)
statusCallbackMethod :: Application -> !(Maybe Method)
voiceCallerIDLookup :: Application -> !Bool
smsURL :: Application -> !(Maybe URI)
smsMethod :: Application -> !(Maybe Method)
smsFallbackURL :: Application -> !(Maybe URI)
smsFallbackMethod :: Application -> !(Maybe Method)
smsStatusCallback :: Application -> !(Maybe URI)
messageStatusCallback :: Application -> !(Maybe URI)
uri :: Application -> !URI
data ApplicationSID

-- | Get an <a>Application</a> by <a>ApplicationSID</a>.
get :: MonadThrow m => ApplicationSID -> TwilioT m Application
data Method
GET :: Method
POST :: Method
instance Show Method
instance Eq Method
instance Show Application
instance Eq Application
instance FromJSON Method
instance Get1 ApplicationSID Application
instance FromJSON Application

module Twilio.Applications
data Applications
Applications :: PagingInformation -> [Application] -> Applications
applicationsPagingInformation :: Applications -> PagingInformation
applicationList :: Applications -> [Application]

-- | Get the <a>Applications</a> for your account.
--   
--   For example, you can fetch the <a>Applications</a> resource in the
--   <a>IO</a> monad as follows:
--   
--   <pre>
--   module Main where
--   
--   import Control.Monad.IO.Class (liftIO)
--   import System.Environment (getEnv)
--   import Twilio.Applications as Applications
--   import Twilio.Types
--   
--   -- | Print applications.
--   main :: IO ()
--   main = runTwilio' (getEnv "ACCOUNT_SID")
--                     (getEnv "AUTH_TOKEN")
--        $ Applications.get &gt;&gt;= liftIO . print
--   </pre>
get :: MonadThrow m => TwilioT m Applications
instance Show Applications
instance Eq Applications
instance Get0 Applications
instance FromJSON Applications
instance List Applications Application

module Twilio.AuthorizedConnectApp
data AuthorizedConnectApp
AuthorizedConnectApp :: !UTCTime -> !UTCTime -> !AccountSID -> !ConnectAppSID -> !Text -> !Text -> !Text -> !(Maybe URI) -> !URI -> AuthorizedConnectApp
dateCreated :: AuthorizedConnectApp -> !UTCTime
dateUpdated :: AuthorizedConnectApp -> !UTCTime
accountSID :: AuthorizedConnectApp -> !AccountSID
sid :: AuthorizedConnectApp -> !ConnectAppSID
friendlyName :: AuthorizedConnectApp -> !Text
description :: AuthorizedConnectApp -> !Text
companyName :: AuthorizedConnectApp -> !Text
homepageURL :: AuthorizedConnectApp -> !(Maybe URI)
uri :: AuthorizedConnectApp -> !URI
data ConnectAppSID

-- | Get an <a>AuthorizedConnectApp</a> by <a>ConnectAppSID</a>.
get :: MonadThrow m => ConnectAppSID -> TwilioT m AuthorizedConnectApp
instance Show AuthorizedConnectApp
instance Eq AuthorizedConnectApp
instance Get1 ConnectAppSID AuthorizedConnectApp
instance FromJSON AuthorizedConnectApp

module Twilio.AuthorizedConnectApps
data AuthorizedConnectApps
AuthorizedConnectApps :: PagingInformation -> [AuthorizedConnectApp] -> AuthorizedConnectApps
authorizedConnectAppsPagingInformation :: AuthorizedConnectApps -> PagingInformation
authorizedConnectAppList :: AuthorizedConnectApps -> [AuthorizedConnectApp]

-- | Get <a>AuthorizedConnectApps</a>.
get :: MonadThrow m => TwilioT m AuthorizedConnectApps
instance Show AuthorizedConnectApps
instance Eq AuthorizedConnectApps
instance Get0 AuthorizedConnectApps
instance FromJSON AuthorizedConnectApps
instance List AuthorizedConnectApps AuthorizedConnectApp

module Twilio.AvailablePhoneNumbers
data AvailablePhoneNumbers
AvailablePhoneNumbers :: [AvailablePhoneNumber] -> AvailablePhoneNumbers
availablePhoneNumberList :: AvailablePhoneNumbers -> [AvailablePhoneNumber]

-- | Get <a>AvailablePhoneNumbers</a> for a particular country.
get :: MonadThrow m => ISOCountryCode -> TwilioT m AvailablePhoneNumbers
instance Show AvailablePhoneNumbers
instance Eq AvailablePhoneNumbers
instance Get1 ISOCountryCode AvailablePhoneNumbers
instance FromJSON AvailablePhoneNumbers
instance List AvailablePhoneNumbers AvailablePhoneNumber

module Twilio.Call
data Call
Call :: !CallSID -> !(Maybe CallSID) -> !(Maybe UTCTime) -> !(Maybe UTCTime) -> !AccountSID -> !(Maybe Text) -> !Text -> !(Maybe PhoneNumberSID) -> !CallStatus -> !(Maybe UTCTime) -> !(Maybe UTCTime) -> !(Maybe Int) -> !(Maybe Double) -> !(Maybe PriceUnit) -> !(Maybe CallDirection) -> !(Maybe AnsweredBy) -> !(Maybe Text) -> !(Maybe Text) -> !URI -> !APIVersion -> Call
sid :: Call -> !CallSID
parentCallSID :: Call -> !(Maybe CallSID)
dateCreated :: Call -> !(Maybe UTCTime)
dateUpdated :: Call -> !(Maybe UTCTime)
accountSID :: Call -> !AccountSID
to :: Call -> !(Maybe Text)
from :: Call -> !Text
phoneNumberSID :: Call -> !(Maybe PhoneNumberSID)
status :: Call -> !CallStatus
startTime :: Call -> !(Maybe UTCTime)
endTime :: Call -> !(Maybe UTCTime)
duration :: Call -> !(Maybe Int)
price :: Call -> !(Maybe Double)
priceUnit :: Call -> !(Maybe PriceUnit)
direction :: Call -> !(Maybe CallDirection)
answeredBy :: Call -> !(Maybe AnsweredBy)
forwardedFrom :: Call -> !(Maybe Text)
callerName :: Call -> !(Maybe Text)
uri :: Call -> !URI
apiVersion :: Call -> !APIVersion
data CallSID

-- | Get a <a>Call</a> by <a>CallSID</a>.
get :: MonadThrow m => CallSID -> TwilioT m Call
data AnsweredBy
Human :: AnsweredBy
Machine :: AnsweredBy
data CallDirection
Inbound :: CallDirection
OutboundAPI :: CallDirection
OutboundDial :: CallDirection
data CallStatus
Queued :: CallStatus
Ringing :: CallStatus
InProgress :: CallStatus
Canceled :: CallStatus
Completed :: CallStatus
Failed :: CallStatus
Busy :: CallStatus
NoAnswer :: CallStatus
instance Eq AnsweredBy
instance Eq CallDirection
instance Bounded CallStatus
instance Enum CallStatus
instance Eq CallStatus
instance Ord CallStatus
instance Read CallStatus
instance Show CallStatus
instance Show Call
instance Eq Call
instance FromJSON CallStatus
instance FromJSON CallDirection
instance Show CallDirection
instance FromJSON AnsweredBy
instance Show AnsweredBy
instance Get1 CallSID Call
instance FromJSON Call

module Twilio.Calls
data Calls
Calls :: PagingInformation -> [Call] -> Calls
callsPagingInformation :: Calls -> PagingInformation
callList :: Calls -> [Call]

-- | Get <a>Calls</a>.
--   
--   For example, you can fetch the <a>Calls</a> resource in the <a>IO</a>
--   monad as follows:
--   
--   <pre>
--   module Main where
--   
--   import Control.Monad.IO.Class (liftIO)
--   import System.Environment (getEnv)
--   import Twilio.Calls as Calls
--   import Twilio.Types
--   
--   -- | Print calls.
--   main :: IO ()
--   main = runTwilio' (getEnv "ACCOUNT_SID")
--                     (getEnv "AUTH_TOKEN")
--        $ Calls.get &gt;&gt;= liftIO . print
--   </pre>
get :: MonadThrow m => TwilioT m Calls
post :: MonadThrow m => PostCalls -> TwilioT m Call
data PostCalls
PostCalls :: !Text -> !Text -> !(Either URI ApplicationSID) -> !(Maybe Text) -> !(Maybe URI) -> !(Maybe Text) -> !(Maybe URI) -> !(Maybe Text) -> !(Maybe Text) -> !(Maybe IfMachine) -> !(Maybe Integer) -> !(Maybe Bool) -> PostCalls
from :: PostCalls -> !Text
to :: PostCalls -> !Text
urlOrApplicationSID :: PostCalls -> !(Either URI ApplicationSID)
method :: PostCalls -> !(Maybe Text)
fallbackURL :: PostCalls -> !(Maybe URI)
fallbackMethod :: PostCalls -> !(Maybe Text)
statusCallback :: PostCalls -> !(Maybe URI)
statusCallbackMethod :: PostCalls -> !(Maybe Text)
sendDigits :: PostCalls -> !(Maybe Text)
ifMachine :: PostCalls -> !(Maybe IfMachine)
timeout :: PostCalls -> !(Maybe Integer)
record :: PostCalls -> !(Maybe Bool)
data IfMachine
Continue :: IfMachine
Hangup :: IfMachine
instance Show Calls
instance Eq Calls
instance Bounded IfMachine
instance Enum IfMachine
instance Eq IfMachine
instance Ord IfMachine
instance Read IfMachine
instance Show IfMachine
instance Show PostCalls
instance Eq PostCalls
instance ToJSON IfMachine
instance FromJSON IfMachine
instance Post3 Text Text URI Call
instance Post1 PostCalls Call
instance Get0 Calls
instance FromJSON Calls
instance List Calls Call

module Twilio.ConnectApp
data ConnectApp
ConnectApp :: !ConnectAppSID -> !AccountSID -> !Text -> !Text -> !Text -> !(Maybe URI) -> !(Maybe URI) -> !(Maybe URI) -> !URI -> ConnectApp
sid :: ConnectApp -> !ConnectAppSID
accountSID :: ConnectApp -> !AccountSID
friendlyName :: ConnectApp -> !Text
description :: ConnectApp -> !Text
companyName :: ConnectApp -> !Text
homepageURL :: ConnectApp -> !(Maybe URI)
authorizeRedirectURL :: ConnectApp -> !(Maybe URI)
deauthorizeCallbackURL :: ConnectApp -> !(Maybe URI)
uri :: ConnectApp -> !URI
data ConnectAppSID

-- | Get a <a>ConnectApp</a> by <a>ConnectAppSID</a>.
get :: MonadThrow m => ConnectAppSID -> TwilioT m ConnectApp
instance Show ConnectApp
instance Eq ConnectApp
instance Get1 ConnectAppSID ConnectApp
instance FromJSON ConnectApp

module Twilio.ConnectApps
data ConnectApps
ConnectApps :: PagingInformation -> [ConnectApp] -> ConnectApps
connectAppsPagingInformation :: ConnectApps -> PagingInformation
connectAppList :: ConnectApps -> [ConnectApp]

-- | Get <a>ConnectApps</a>.
get :: MonadThrow m => TwilioT m ConnectApps
instance Show ConnectApps
instance Eq ConnectApps
instance Get0 ConnectApps
instance FromJSON ConnectApps
instance List ConnectApps ConnectApp

module Twilio.IncomingPhoneNumber
data IncomingPhoneNumber
IncomingPhoneNumber :: !PhoneNumberSID -> !UTCTime -> !UTCTime -> !Text -> !AccountSID -> !Text -> !APIVersion -> !Bool -> !(Maybe Text) -> !Text -> !(Maybe Text) -> !Text -> !(Maybe Text) -> !Text -> !(Maybe ApplicationSID) -> !(Maybe Text) -> !Text -> !(Maybe Text) -> !Text -> !(Maybe ApplicationSID) -> !Capabilities -> !AddressRequirement -> !URI -> IncomingPhoneNumber
sid :: IncomingPhoneNumber -> !PhoneNumberSID
dateCreated :: IncomingPhoneNumber -> !UTCTime
dateUpdated :: IncomingPhoneNumber -> !UTCTime
friendlyName :: IncomingPhoneNumber -> !Text
accountSID :: IncomingPhoneNumber -> !AccountSID
phoneNumber :: IncomingPhoneNumber -> !Text
apiVersion :: IncomingPhoneNumber -> !APIVersion
voiceCallerIDLookup :: IncomingPhoneNumber -> !Bool
voiceURL :: IncomingPhoneNumber -> !(Maybe Text)
voiceMethod :: IncomingPhoneNumber -> !Text
voiceFallbackURL :: IncomingPhoneNumber -> !(Maybe Text)
voiceFallbackMethod :: IncomingPhoneNumber -> !Text
statusCallback :: IncomingPhoneNumber -> !(Maybe Text)
statusCallbackMethod :: IncomingPhoneNumber -> !Text
voiceApplicationSID :: IncomingPhoneNumber -> !(Maybe ApplicationSID)
smsURL :: IncomingPhoneNumber -> !(Maybe Text)
smsMethod :: IncomingPhoneNumber -> !Text
smsFallbackURL :: IncomingPhoneNumber -> !(Maybe Text)
smsFallbackMethod :: IncomingPhoneNumber -> !Text
smsApplicationSID :: IncomingPhoneNumber -> !(Maybe ApplicationSID)
capabilities :: IncomingPhoneNumber -> !Capabilities
addressRequirements :: IncomingPhoneNumber -> !AddressRequirement
uri :: IncomingPhoneNumber -> !URI

-- | Get an <a>IncomingPhoneNumber</a> by <a>PhoneNumberSID</a>.
get :: MonadThrow m => PhoneNumberSID -> TwilioT m IncomingPhoneNumber
instance Eq IncomingPhoneNumber
instance Show IncomingPhoneNumber
instance Get1 PhoneNumberSID IncomingPhoneNumber
instance FromJSON IncomingPhoneNumber

module Twilio.IncomingPhoneNumbers
data IncomingPhoneNumbers
IncomingPhoneNumbers :: [IncomingPhoneNumber] -> IncomingPhoneNumbers
incomingPhoneNumberList :: IncomingPhoneNumbers -> [IncomingPhoneNumber]

-- | Get <a>IncomingPhoneNumbers</a> for a particular country.
get :: MonadThrow m => TwilioT m IncomingPhoneNumbers
instance Show IncomingPhoneNumbers
instance Eq IncomingPhoneNumbers
instance Get0 IncomingPhoneNumbers
instance FromJSON IncomingPhoneNumbers
instance List IncomingPhoneNumbers IncomingPhoneNumber

module Twilio.Message
data Message
Message :: !MessageSID -> !UTCTime -> !UTCTime -> !(Maybe UTCTime) -> !AccountSID -> !Text -> !Text -> !Text -> !MessageStatus -> !MessageDirection -> !PriceUnit -> !APIVersion -> !URI -> Message
sid :: Message -> !MessageSID
dateCreated :: Message -> !UTCTime
dateUpdated :: Message -> !UTCTime

-- | This will be Nothing if Twilio hasn't sent the message yet.
dateSent :: Message -> !(Maybe UTCTime)
accountSID :: Message -> !AccountSID
to :: Message -> !Text
from :: Message -> !Text
body :: Message -> !Text
status :: Message -> !MessageStatus
direction :: Message -> !MessageDirection
priceUnit :: Message -> !PriceUnit
apiVersion :: Message -> !APIVersion
uri :: Message -> !URI

-- | Get a <a>Message</a> by <a>MessageSID</a>.
get :: MonadThrow m => MessageSID -> TwilioT m Message
data MessageDirection
Inbound :: MessageDirection
OutboundAPI :: MessageDirection
OutboundCall :: MessageDirection
OutboundReply :: MessageDirection
data MessageStatus
Queued :: MessageStatus
Sending :: MessageStatus
Sent :: MessageStatus
Failed :: MessageStatus
Received :: MessageStatus
Delivered :: MessageStatus
Undelivered :: MessageStatus
instance Eq MessageDirection
instance Eq MessageStatus
instance Show Message
instance Eq Message
instance FromJSON MessageStatus
instance Show MessageStatus
instance FromJSON MessageDirection
instance Show MessageDirection
instance Get1 MessageSID Message
instance FromJSON Message

module Twilio.Messages
data Messages
Messages :: PagingInformation -> [Message] -> Messages
messagesPagingInformation :: Messages -> PagingInformation
messageList :: Messages -> [Message]
data PostMessage
PostMessage :: !Text -> !Text -> !Text -> PostMessage
sendTo :: PostMessage -> !Text
sendFrom :: PostMessage -> !Text
sendBody :: PostMessage -> !Text

-- | Get <a>Messages</a>.
get :: MonadThrow m => TwilioT m Messages

-- | Send a text message.
post :: MonadThrow m => PostMessage -> TwilioT m Message
instance Show Messages
instance Eq Messages
instance Show PostMessage
instance Eq PostMessage
instance Post1 PostMessage Message
instance Get0 Messages
instance FromJSON Messages
instance List Messages Message

module Twilio.OutgoingCallerID
data OutgoingCallerID
OutgoingCallerID :: !PhoneNumberSID -> !UTCTime -> !UTCTime -> !Text -> !AccountSID -> !Text -> !URI -> OutgoingCallerID
sid :: OutgoingCallerID -> !PhoneNumberSID
dateCreated :: OutgoingCallerID -> !UTCTime
dateUpdated :: OutgoingCallerID -> !UTCTime
friendlyName :: OutgoingCallerID -> !Text
accountSID :: OutgoingCallerID -> !AccountSID
phoneNumber :: OutgoingCallerID -> !Text
uri :: OutgoingCallerID -> !URI
data PhoneNumberSID

-- | Get an <a>OutgoingCallerID</a> by <a>PhoneNumberSID</a>
get :: MonadThrow m => PhoneNumberSID -> TwilioT m OutgoingCallerID
instance Show OutgoingCallerID
instance Eq OutgoingCallerID
instance Get1 PhoneNumberSID OutgoingCallerID
instance FromJSON OutgoingCallerID

module Twilio.OutgoingCallerIDs
data OutgoingCallerIDs
OutgoingCallerIDs :: !PagingInformation -> [OutgoingCallerID] -> OutgoingCallerIDs
outgoingCallerIDsPagingInformation :: OutgoingCallerIDs -> !PagingInformation
outgoingCallerIDList :: OutgoingCallerIDs -> [OutgoingCallerID]

-- | Get <a>OutgoingCallerIDs</a>.
get :: MonadThrow m => TwilioT m OutgoingCallerIDs
instance Show OutgoingCallerIDs
instance Eq OutgoingCallerIDs
instance Get0 OutgoingCallerIDs
instance FromJSON OutgoingCallerIDs
instance List OutgoingCallerIDs OutgoingCallerID

module Twilio.Tokens
data Token
Token :: !AccountSID -> !UTCTime -> !UTCTime -> [IceServer] -> !Text -> !Integer -> !Text -> Token
accountSID :: Token -> !AccountSID
dateCreated :: Token -> !UTCTime
dateUpdated :: Token -> !UTCTime
iceServers :: Token -> [IceServer]
password :: Token -> !Text
ttl :: Token -> !Integer
username :: Token -> !Text
data IceServer
StunServer :: !URI -> IceServer
stunURL :: IceServer -> !URI
TurnServer :: !URI -> !Text -> !Text -> IceServer
turnURL :: IceServer -> !URI
turnCredential :: IceServer -> !Text
turnUsername :: IceServer -> !Text
post :: MonadThrow m => Maybe Integer -> TwilioT m Token
instance Eq IceServer
instance Show IceServer
instance Eq Token
instance Show Token
instance Post1 (Maybe Integer) Token
instance Post1 Integer Token
instance Post0 Token
instance FromJSON IceServer
instance FromJSON Token

module Twilio.Recording
data Recording
Recording :: !RecordingSID -> !UTCTime -> !UTCTime -> !AccountSID -> !CallSID -> !(Maybe Int) -> !APIVersion -> !URI -> Recording
sid :: Recording -> !RecordingSID
dateCreated :: Recording -> !UTCTime
dateUpdated :: Recording -> !UTCTime
accountSID :: Recording -> !AccountSID
callSID :: Recording -> !CallSID
duration :: Recording -> !(Maybe Int)
apiVersion :: Recording -> !APIVersion
uri :: Recording -> !URI

-- | Get a <a>Recording</a> by <a>RecordingSID</a>.
get :: MonadThrow m => RecordingSID -> TwilioT m Recording
instance Show Recording
instance Eq Recording
instance Get1 RecordingSID Recording
instance FromJSON Recording

module Twilio.Recordings
data Recordings
Recordings :: PagingInformation -> [Recording] -> Recordings
recordingsPagingInformation :: Recordings -> PagingInformation
recordingList :: Recordings -> [Recording]

-- | Get <a>Recordings</a>.
get :: MonadThrow m => TwilioT m Recordings
instance Show Recordings
instance Eq Recordings
instance Get0 Recordings
instance FromJSON Recordings
instance List Recordings Recording

module Twilio.Transcription
data Transcription
Transcription :: !TranscriptionSID -> !UTCTime -> !UTCTime -> !AccountSID -> !TranscriptionStatus -> !RecordingSID -> !(Maybe Int) -> !Text -> !(Maybe Double) -> !PriceUnit -> !APIVersion -> !URI -> Transcription
sid :: Transcription -> !TranscriptionSID
dateCreated :: Transcription -> !UTCTime
dateUpdated :: Transcription -> !UTCTime
accountSID :: Transcription -> !AccountSID
status :: Transcription -> !TranscriptionStatus
recordingSID :: Transcription -> !RecordingSID
duration :: Transcription -> !(Maybe Int)
transcriptionText :: Transcription -> !Text
price :: Transcription -> !(Maybe Double)
priceUnit :: Transcription -> !PriceUnit
apiVersion :: Transcription -> !APIVersion
uri :: Transcription -> !URI

-- | Get a <a>Transcription</a> by <a>TranscriptionSID</a>.
get :: MonadThrow m => TranscriptionSID -> TwilioT m Transcription
data PriceUnit
USD :: PriceUnit
EUR :: PriceUnit
JPY :: PriceUnit
OtherPriceUnit :: !Text -> PriceUnit
data TranscriptionStatus
InProgress :: TranscriptionStatus
Completed :: TranscriptionStatus
Failed :: TranscriptionStatus
instance Eq TranscriptionStatus
instance Show Transcription
instance Eq Transcription
instance FromJSON TranscriptionStatus
instance Show TranscriptionStatus
instance Get1 TranscriptionSID Transcription
instance FromJSON Transcription

module Twilio.Transcriptions
data Transcriptions
Transcriptions :: PagingInformation -> [Transcription] -> Transcriptions
transcriptionsPagingInformation :: Transcriptions -> PagingInformation
transcriptionList :: Transcriptions -> [Transcription]

-- | Get <a>Transcriptions</a>.
get :: MonadThrow m => TwilioT m Transcriptions
instance Show Transcriptions
instance Eq Transcriptions
instance Get0 Transcriptions
instance FromJSON Transcriptions
instance List Transcriptions Transcription

module Twilio.UsageRecords
data UsageRecords
UsageRecords :: PagingInformation -> [UsageRecord] -> UsageRecords
usageRecordsPagingInformation :: UsageRecords -> PagingInformation
usageRecordList :: UsageRecords -> [UsageRecord]

-- | Get <a>UsageRecords</a>.
get :: MonadThrow m => TwilioT m UsageRecords
instance Show UsageRecords
instance Eq UsageRecords
instance Get0 UsageRecords
instance FromJSON UsageRecords
instance List UsageRecords UsageRecord

module Twilio.UsageTrigger
data UsageTrigger
UsageTrigger :: !UsageTriggerSID -> !UTCTime -> !UTCTime -> !AccountSID -> !Text -> !(Maybe Text) -> !Text -> !Text -> !Text -> !Text -> !URI -> !(Maybe Text) -> !Text -> !(Maybe Text) -> !URI -> UsageTrigger
sid :: UsageTrigger -> !UsageTriggerSID
dateCreated :: UsageTrigger -> !UTCTime
dateUpdated :: UsageTrigger -> !UTCTime
accountSID :: UsageTrigger -> !AccountSID
friendlyName :: UsageTrigger -> !Text
recurring :: UsageTrigger -> !(Maybe Text)
usageCategory :: UsageTrigger -> !Text
triggerBy :: UsageTrigger -> !Text
triggerValue :: UsageTrigger -> !Text
currentValue :: UsageTrigger -> !Text
usageRecordURI :: UsageTrigger -> !URI
callbackURL :: UsageTrigger -> !(Maybe Text)
callbackMethod :: UsageTrigger -> !Text
dateFired :: UsageTrigger -> !(Maybe Text)
uri :: UsageTrigger -> !URI

-- | Get a <a>UsageTrigger</a> by <a>UsageTriggerSID</a>.
get :: MonadThrow m => UsageTriggerSID -> TwilioT m UsageTrigger
instance Eq UsageTrigger
instance Show UsageTrigger
instance Get1 UsageTriggerSID UsageTrigger
instance FromJSON UsageTrigger

module Twilio.UsageTriggers
data UsageTriggers
UsageTriggers :: PagingInformation -> [UsageTrigger] -> UsageTriggers
usageTriggersPagingInformation :: UsageTriggers -> PagingInformation
usageTriggerList :: UsageTriggers -> [UsageTrigger]

-- | Get <a>UsageTriggers</a>.
get :: MonadThrow m => TwilioT m UsageTriggers
instance Show UsageTriggers
instance Eq UsageTriggers
instance Get0 UsageTriggers
instance FromJSON UsageTriggers
instance List UsageTriggers UsageTrigger

module Twilio
