-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Support for using Fay with Happstack
--   
--   Fay is strict subset of Happstack which can be compiled to Javascript.
--   This library provides some utilities for client-server communication,
--   client-side HTML generation, and more.
--   
--   This package provides the server-side libraries for happstack-fay
@package happstack-fay
@version 0.2.0


-- | The server-side half of a typed AJAX communication channel.
--   
--   To use this library, you could start by defining a type in a file that
--   can be shared between the Haskell Server and Fay client. For example:
--   
--   <pre>
--   data Command
--       = SendGuess Guess (ResponseType (Maybe Row))
--       | FetchBoard (ResponseType (Maybe Board))
--       deriving (Read, Show, Data, Typeable)
--   instance Foreign Command
--   </pre>
--   
--   The <a>ResponseType</a> argument specifies what type each command
--   should return. Using GADTs would be cleaner, but Fay does not support
--   GADTs yet.
--   
--   In the server, you would then have a route that handles ajax requests
--   such as:
--   
--   <pre>
--   , dir <a>ajax</a>     $ handleCommand (commandR acid)
--   </pre>
--   
--   <tt>commandR</tt> would then call functions to handle the various
--   requests:
--   
--   <pre>
--   -- | handle an AJAX request
--   commandR :: AcidState Games
--            -&gt; Command
--            -&gt; ServerPart Response
--   commandR acid cmd =
--       case cmd of
--         (SendGuess guess rt) -&gt; fayResponse rt $ sendGuessC acid guess
--         (FetchBoard rt)      -&gt; fayResponse rt $ fetchBoardC acid
--   </pre>
--   
--   <tt>commandR</tt> uses <a>fayResponse</a> to convert the value
--   returned by each command handler to a valid Fay value. Note that it
--   takes <a>ResponseType</a> argument and passes it to
--   <a>fayResponse</a>. This is how we ensure that each commend handler is
--   returning the right type.
--   
--   See also <tt>AJAX</tt> from the <tt>happstack-client-fay</tt> package.
module Happstack.Fay

-- | decode the <tt>cmd</tt> and call the response handler.
--   
--   See also: <a>fayResponse</a>
handleCommand :: (Data cmd, Show cmd, Happstack m) => (cmd -> m Response) -> m Response

-- | convert the return value to a fay response.
fayResponse :: (Happstack m, Show a) => ResponseType a -> m a -> m Response
