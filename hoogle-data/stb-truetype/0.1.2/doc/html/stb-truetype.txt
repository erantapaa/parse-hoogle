-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A wrapper around Sean Barrett's TrueType rasterizer library.
--   
--   A wrapper around Sean Barrett's TrueType rasterizer library.
@package stb-truetype
@version 0.1.2


-- | This is a wrapper around Sean Barrett's TrueType font rasterizer code.
--   The original can be found at
--   <a>http://nothings.org/stb/stb_truetype.h</a>. The version of
--   <tt>stb-truetype</tt> used here is <tt>0.3</tt>.
module Graphics.Rendering.TrueType.STB

-- | A TrueType font file (containing maybe multiple font sets) loaded into
--   memory.
newtype TrueType
TrueType :: ByteString -> TrueType

-- | A font offset inside a TrueType font file.
data Offset
data Font

-- | A glyph inside a font.
data Glyph
loadTTF :: FilePath -> IO TrueType
withTTF :: FilePath -> (TrueType -> IO a) -> IO a

-- | Enumerates the fonts found in a TrueType file. Often there is only
--   one, but there may be more.
enumerateFonts :: TrueType -> IO [Offset]
initFont :: TrueType -> Offset -> IO Font

-- | Note: this is cached.
findGlyph :: Font -> Char -> IO (Maybe Glyph)
type Unscaled = Int
data HorizontalMetrics a
HMetrics :: a -> a -> HorizontalMetrics a
advanceWidth :: HorizontalMetrics a -> a
leftSideBearing :: HorizontalMetrics a -> a

-- | <a>ascent</a> is the coordinate above the baseline the font extends;
--   <a>descent</a> is the coordinate below the baseline the font extends
--   (i.e. it is typically negative) <a>lineGap</a> is the spacing between
--   one row's descent and the next row's ascent... so you should advance
--   the vertical position by <tt>ascent - descent + lineGap</tt>
data VerticalMetrics a
VMetrics :: a -> a -> a -> VerticalMetrics a
ascent :: VerticalMetrics a -> a
descent :: VerticalMetrics a -> a
lineGap :: VerticalMetrics a -> a

-- | The convention is <tt>BBox (x0,y0) (x1,y1)</tt>.
data BoundingBox a
BBox :: (a, a) -> (a, a) -> BoundingBox a

-- | As calculated by <tt>(ascent - descent + lineGap)</tt>.
lineAdvance :: Num a => VerticalMetrics a -> a

-- | As calculated by <tt>(ascent - descent)</tt>.
verticalSize :: Num a => VerticalMetrics a -> a
scaleForPixelHeight :: VerticalMetrics Unscaled -> Float -> Float
getFontVerticalMetrics :: Font -> IO (VerticalMetrics Unscaled)
getGlyphHorizontalMetrics :: Font -> Glyph -> IO (HorizontalMetrics Unscaled)

-- | This is not yet implemented in <tt>stb_truetype</tt>; it always
--   returns 0.
getGlyphKernAdvance :: Font -> Glyph -> Glyph -> IO Unscaled
getGlyphBoundingBox :: Font -> Glyph -> IO (BoundingBox Unscaled)
type Scaling = (Float, Float)

-- | A 8-bit grayscale bitmap.
data Bitmap
Bitmap :: (Int, Int) -> ForeignPtr Word8 -> Bitmap
bitmapSize :: Bitmap -> (Int, Int)
bitmapPtr :: Bitmap -> ForeignPtr Word8
newBitmap :: (Int, Int) -> IO Bitmap
withBitmap :: Bitmap -> (Int -> Int -> Ptr Word8 -> IO a) -> IO a

-- | Flips the bitmap vertically (leaving the original unchanged)
flipBitmap :: Bitmap -> IO Bitmap

-- | An offset (for example the pivot of the glyph)
type BitmapOfs = (Int, Int)

-- | Returns the size of the bitmap (in pixels) needed to render the glyph
--   with the given scaling.
--   
--   The box is centered around the glyph origin; so the bitmap width is
--   <tt>x1-x0</tt>, height is <tt>y1-y0</tt>, and location to place the
--   bitmap top left is <tt>(leftSideBearing*scale,y0)</tt>. Note that the
--   bitmap uses <i>y-increases-down</i>, but the shape uses
--   <i>y-increases-up</i>, so the results of <a>getGlyphBitmapBox</a> and
--   <a>getGlyphBoundingBox</a> are inverted.
getGlyphBitmapBox :: Font -> Glyph -> Scaling -> IO (BoundingBox Int)

-- | Creates a new bitmap just enough to fit the glyph with the given
--   scaling, and renders the glyph into it. The offset returned is the
--   offset in pixel space <i>from</i> the glyph origin <i>to</i> the
--   top-left of the bitmap (so it's almost always negative).
newGlyphBitmap :: Font -> Glyph -> Scaling -> IO (Bitmap, BitmapOfs)

-- | The offset is the <i>top-left corner</i> of the bounding box of the
--   glyph, and must be nonnegative (otherwise nothing will happen).
renderGlyphIntoBitmap' :: Font -> Glyph -> Scaling -> Bitmap -> BitmapOfs -> IO ()

-- | The offset is the <i>origin</i> of the glyph. If the glyph extends
--   from the bitmap in the positive direction, it is clipped; however, if
--   it extends in the negative direction, no drawing will happen!
renderGlyphIntoBitmap :: Font -> Glyph -> Scaling -> Bitmap -> BitmapOfs -> IO ()

-- | NOTE: because of the way Haskell indexes rectangular arrays, the
--   resulting array is indexed with <tt>(y,x)</tt>, as opposed to what you
--   would expect.
bitmapArray :: Bitmap -> IO (UArray (Int, Int) Word8)
bitmapFloatArray :: Bitmap -> IO (UArray (Int, Int) Float)

-- | Note: the metrics are scaled!
data CachedBitmap
CBM :: Bitmap -> BitmapOfs -> (HorizontalMetrics Float) -> CachedBitmap

-- | A "bitmap cache".
data BitmapCache

-- | Note: these metrics are scaled!
bmcVerticalMetrics :: BitmapCache -> VerticalMetrics Float
bmcScaling :: BitmapCache -> Scaling

-- | Creates a new cache where glyph bitmaps with the given scaling will be
--   stored. The second argument is whether the resulting bitmaps should be
--   flipped vertically or not (this is useful with OpenGL).
newBitmapCache :: Font -> Bool -> (Float, Float) -> IO BitmapCache

-- | Fetches a rendered glyph bitmap from the cache (rendering it first if
--   it was not present in the cache before).
getCachedBitmap :: BitmapCache -> Char -> IO (Maybe CachedBitmap)
instance Show a => Show (BoundingBox a)
instance Show a => Show (HorizontalMetrics a)
instance Show a => Show (VerticalMetrics a)
instance Eq Glyph
instance Ord Glyph
instance Show Glyph
instance Eq Offset
instance Ord Offset
instance Show Offset
instance Storable CFontInfo
instance Storable TableLoc
instance Functor HorizontalMetrics
instance Functor VerticalMetrics
