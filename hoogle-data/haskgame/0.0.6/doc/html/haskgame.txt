-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell game library.
--   
--   HaskGame is meant to provide a video<i>audio</i>event handling library
--   suitable for creating games or GUI's. Currently it incompletely wraps
--   the SDL so the SDL must be used. In the future, it will abstract SDL
--   completely and perhaps will also have GLUT/OpenGL or X backends.
--   
--   Project wiki page: <a>http://haskell.org/haskellwiki/HaskGame</a>
--   
--   Git repository is at: <a>http://github.com/Peaker/haskgame</a>
--   
--   Â© 2009 by Eyal Lotem; BSD3 license.
@package haskgame
@version 0.0.6

module Graphics.UI.HaskGame.Key
keyOfEvent :: Keysym -> ModKey
data ModKey
ModKey :: Mods -> SDLKey -> ModKey
data KeyGroup
KeyGroup :: String -> Set ModKey -> KeyGroup
keyGroupName :: KeyGroup -> String
keyGroupKeys :: KeyGroup -> Set ModKey
singletonKeyGroup :: ModKey -> KeyGroup
asKeyGroup :: Mods -> SDLKey -> KeyGroup
keyName :: ModKey -> String
data Mods
MkMods :: Bool -> Bool -> Bool -> Mods
isShift :: Mods -> Bool
isCtrl :: Mods -> Bool
isAlt :: Mods -> Bool
noMods :: Mods
shift :: Mods
ctrl :: Mods
alt :: Mods
type Keysym = Keysym
instance Eq KeyGroup
instance Ord KeyGroup
instance Show KeyGroup
instance Eq ModKey
instance Ord ModKey
instance Show ModKey
instance Eq Mods
instance Ord Mods
instance Show Mods
instance Read Mods

module Graphics.UI.HaskGame.Keys
data KeyGroup
KeyGroup :: String -> Set ModKey -> KeyGroup
keyGroupName :: KeyGroup -> String
keyGroupKeys :: KeyGroup -> Set ModKey
allGroups :: [KeyGroup]
groupsOfKey :: ModKey -> [KeyGroup]
keysUnicode :: Map ModKey String
printableGroup :: KeyGroup
digitsGroup :: KeyGroup
lettersGroup :: KeyGroup
upperCaseGroup :: KeyGroup
lowerCaseGroup :: KeyGroup
arrowsGroup :: KeyGroup

module Graphics.UI.HaskGame.Vector2
data Vector2 a
Vector2 :: !a -> !a -> Vector2 a
vector2 :: (a -> a -> b) -> Vector2 a -> b
first :: Endo a -> Endo (Vector2 a)
second :: Endo a -> Endo (Vector2 a)
(***) :: Endo a -> Endo a -> Endo (Vector2 a)
both :: Endo a -> Endo (Vector2 a)
fst :: Vector2 a -> a
snd :: Vector2 a -> a
instance Eq a => Eq (Vector2 a)
instance Ord a => Ord (Vector2 a)
instance Show a => Show (Vector2 a)
instance Read a => Read (Vector2 a)
instance (Eq a, Show a, Num a) => Num (Vector2 a)
instance Applicative Vector2
instance Functor Vector2

module Graphics.UI.HaskGame.Color
data Color
Color :: Word8 -> Word8 -> Word8 -> Color
colorRed :: Color -> Word8
colorGreen :: Color -> Word8
colorBlue :: Color -> Word8

module Graphics.UI.HaskGame.Font
type Font = Font
renderText :: Font -> String -> Color -> IO Surface
textSize :: Font -> String -> Vector2 Int
defaultFont :: Int -> IO Font
withInit :: IO () -> IO ()

module Graphics.UI.HaskGame.Rect
data Rect :: *
Rect :: Int -> Int -> Int -> Int -> Rect
toVectors :: Rect -> Two (Vector2 Int)
fromVectors :: Two (Vector2 Int) -> Rect
make :: Vector2 Int -> Vector2 Int -> Rect
getTopLeft :: Rect -> Vector2 Int
getSize :: Rect -> Vector2 Int
getBottomRight :: Rect -> Vector2 Int
vectorsToPVectors :: Endo (Two (Vector2 Int))
pVectorsToVectors :: Endo (Two (Vector2 Int))
toPVectors :: Rect -> Two (Vector2 Int)
inRect :: Endo (Two (Vector2 Int)) -> Endo Rect
pos :: Endo (Vector2 Int) -> Endo Rect
size :: Endo (Vector2 Int) -> Endo Rect
x :: Endo Int -> Endo Rect
y :: Endo Int -> Endo Rect
w :: Endo Int -> Endo Rect
h :: Endo Int -> Endo Rect
makeFromPos :: Vector2 Int -> Rect
makeFromSize :: Vector2 Int -> Rect
posInside :: Vector2 Int -> Rect -> Bool
trunc :: Rect -> Rect
union :: Rect -> Rect -> Rect
intersect :: Rect -> Rect -> Rect

module Graphics.UI.HaskGame
type Surface = Surface
type Event = Event
createRGBSurface :: Vector2 Int -> IO Surface
blit :: Surface -> Vector2 Int -> Surface -> IO ()
blitPart :: Surface -> Vector2 Int -> Surface -> Rect -> IO ()
fillRect :: Surface -> Rect -> Color -> IO ()
fillSurface :: Surface -> Color -> IO ()
withInit :: IO () -> IO ()
getEvents :: IO [Event]
surfaceSize :: Surface -> Vector2 Int
setVideoMode :: Vector2 Int -> Int -> IO Surface
