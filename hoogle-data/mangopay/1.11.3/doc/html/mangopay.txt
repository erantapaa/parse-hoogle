-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to the MangoPay API
--   
@package mangopay
@version 1.11.3


-- | API entry point
module Web.MangoPay

-- | the mangopay monad transformer this encapsulates the data necessary to
--   pass the app credentials, etc
data MangoPayT m a

-- | Run a computation in the <a>MangoPayT</a> monad transformer with your
--   credentials.
runMangoPayT :: Credentials -> Manager -> AccessPoint -> MangoPayT m a -> m a

-- | Run a <tt>ResourceT</tt> inside a <a>MangoPayT</a>.
runResourceInMp :: MPUsableMonad m => MangoPayT (ResourceT m) a -> MangoPayT m a

-- | an exception that a call to MangoPay may throw
data MpException

-- | get all items, hiding the pagination system
getAll :: (MPUsableMonad m, FromJSON v) => (Maybe Pagination -> AccessToken -> MangoPayT m (PagedList v)) -> AccessToken -> MangoPayT m [v]

-- | the app credentials
data Credentials
Credentials :: Text -> Text -> Text -> Maybe Text -> Credentials

-- | client id
cClientId :: Credentials -> Text

-- | the name
cName :: Credentials -> Text

-- | the email
cEmail :: Credentials -> Text

-- | client secret, maybe be Nothing if we haven't generated it
cClientSecret :: Credentials -> Maybe Text

-- | the MangoPay access point
data AccessPoint
Sandbox :: AccessPoint
Production :: AccessPoint
Custom :: ByteString -> AccessPoint

-- | the access token is simply a Text
newtype AccessToken
AccessToken :: ByteString -> AccessToken

-- | the oauth token returned after authentication
data OAuthToken
OAuthToken :: Text -> Text -> Int -> OAuthToken

-- | the access token
oaAccessToken :: OAuthToken -> Text

-- | the token type
oaTokenType :: OAuthToken -> Text

-- | expiration
oaExpires :: OAuthToken -> Int

-- | Pagination info for searches
--   <a>http://docs.mangopay.com/api-references/pagination/</a>
data Pagination
Pagination :: Integer -> Integer -> Pagination
pPage :: Pagination -> Integer
pPerPage :: Pagination -> Integer

-- | A partial list with pagination information.
data PagedList a
PagedList :: [a] -> Integer -> Integer -> PagedList a
plData :: PagedList a -> [a]
plItemCount :: PagedList a -> Integer
plPageCount :: PagedList a -> Integer

-- | put our constraints in one synonym
type MPUsableMonad m = (MonadBaseControl IO m, MonadResource m, MonadLogger m)

-- | simple class used to hide the serialization of parameters and simplify
--   the calling code
class ToHtQuery a
(?+) :: ToHtQuery a => ByteString -> a -> (ByteString, Maybe ByteString)

-- | the expiration date of a card
data CardExpiration
CardExpiration :: Int -> Int -> CardExpiration
ceMonth :: CardExpiration -> Int
ceYear :: CardExpiration -> Int

-- | read Card Expiration from text representation (MMYY)
readCardExpiration :: Reader CardExpiration

-- | write card expiration
writeCardExpiration :: CardExpiration -> Text

-- | the kind of authentication data the user has provided
data KindOfAuthentication
Light :: KindOfAuthentication
Regular :: KindOfAuthentication
Strong :: KindOfAuthentication

-- | Sort direction for list retrieval
data SortDirection
ASC :: SortDirection
DESC :: SortDirection

-- | Sort transactions
data GenericSort
NoSort :: GenericSort
ByCreationDate :: SortDirection -> GenericSort

-- | Populate the passphrase for our clientId IFF we don't have one.
createCredentialsSecret :: MPUsableMonad m => MangoPayT m Credentials

-- | Login with given user name and password. Returns the OAuth token that
--   can be used to generate the opaque AccessToken and carries the
--   expiration delay.
oauthLogin :: MPUsableMonad m => Text -> Text -> MangoPayT m OAuthToken

-- | build the access token from the OAuthToken
toAccessToken :: OAuthToken -> AccessToken

-- | a natural user
--   <a>http://docs.mangopay.com/api-references/users/natural-users/</a>
data NaturalUser
NaturalUser :: Maybe NaturalUserId -> Maybe POSIXTime -> Text -> Text -> Text -> Maybe Text -> POSIXTime -> CountryCode -> CountryCode -> Maybe Text -> Maybe IncomeRange -> Maybe Text -> Maybe Text -> Maybe Text -> NaturalUser

-- | The Id of the object
uId :: NaturalUser -> Maybe NaturalUserId

-- | The creation date of the user object
uCreationDate :: NaturalUser -> Maybe POSIXTime

-- | User’s e-mail
uEmail :: NaturalUser -> Text

-- | User’s firstname
uFirstName :: NaturalUser -> Text

-- | User’s lastname
uLastName :: NaturalUser -> Text

-- | User’s address
uAddress :: NaturalUser -> Maybe Text

-- | User’s birthdate
uBirthday :: NaturalUser -> POSIXTime

-- | User’s Nationality
uNationality :: NaturalUser -> CountryCode

-- | User’s country of residence
uCountryOfResidence :: NaturalUser -> CountryCode

-- | User’s occupation (ie. Work)
uOccupation :: NaturalUser -> Maybe Text

-- | User’s income range
uIncomeRange :: NaturalUser -> Maybe IncomeRange

-- | Custom data
uTag :: NaturalUser -> Maybe Text
uProofOfIdentity :: NaturalUser -> Maybe Text
uProofOfAddress :: NaturalUser -> Maybe Text

-- | supported income ranges
data IncomeRange
IncomeRange1 :: IncomeRange
IncomeRange2 :: IncomeRange
IncomeRange3 :: IncomeRange
IncomeRange4 :: IncomeRange
IncomeRange5 :: IncomeRange
IncomeRange6 :: IncomeRange

-- | bounds in euros for income range
incomeBounds :: IncomeRange -> (Amount, Amount)

-- | get Income Range for given Euro amount
incomeRange :: Amount -> IncomeRange

-- | User Id
type NaturalUserId = Text

-- | a legal user
--   <a>http://docs.mangopay.com/api-references/users/legal-users/</a>
data LegalUser
LegalUser :: Maybe Text -> Maybe POSIXTime -> Text -> Text -> LegalUserType -> Maybe Text -> Text -> Text -> Maybe Text -> Maybe Text -> POSIXTime -> CountryCode -> CountryCode -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> LegalUser

-- | The Id of the object
lId :: LegalUser -> Maybe Text

-- | The creation date of the user object
lCreationDate :: LegalUser -> Maybe POSIXTime

-- | The email of the company or the organization
lEmail :: LegalUser -> Text

-- | The name of the company or the organization
lName :: LegalUser -> Text

-- | The type of the legal user (‘BUSINESS’ or ’ORGANIZATION’)
lLegalPersonType :: LegalUser -> LegalUserType

-- | The address of the company’s headquarters
lHeadquartersAddress :: LegalUser -> Maybe Text

-- | The firstname of the company’s Legal representative person
lLegalRepresentativeFirstName :: LegalUser -> Text

-- | The lastname of the company’s Legal representative person
lLegalRepresentativeLastName :: LegalUser -> Text

-- | The address of the company’s Legal representative person
lLegalRepresentativeAddress :: LegalUser -> Maybe Text

-- | The email of the company’s Legal representative person
lLegalRepresentativeEmail :: LegalUser -> Maybe Text

-- | The birthdate of the company’s Legal representative person
lLegalRepresentativeBirthday :: LegalUser -> POSIXTime

-- | the nationality of the company’s Legal representative person
lLegalRepresentativeNationality :: LegalUser -> CountryCode

-- | The country of residence of the company’s Legal representative person
lLegalRepresentativeCountryOfResidence :: LegalUser -> CountryCode

-- | The business statute of the company
lStatute :: LegalUser -> Maybe Text

-- | Custom data
lTag :: LegalUser -> Maybe Text

-- | The proof of registration of the company
lProofOfRegistration :: LegalUser -> Maybe Text

-- | The shareholder declaration of the company
lShareholderDeclaration :: LegalUser -> Maybe Text

-- | the type of legal user
data LegalUserType
Business :: LegalUserType
Organization :: LegalUserType

-- | User Id
type LegalUserId = Text

-- | a short user reference
data UserRef
UserRef :: AnyUserId -> POSIXTime -> PersonType -> Text -> Maybe Text -> UserRef
urId :: UserRef -> AnyUserId
urCreationDate :: UserRef -> POSIXTime
urPersonType :: UserRef -> PersonType
urEmail :: UserRef -> Text
urTag :: UserRef -> Maybe Text

-- | Type of user.
data PersonType
Natural :: PersonType
Legal :: PersonType

-- | Id for any kind of user
type AnyUserId = Text

-- | create a natural user
createNaturalUser :: MPUsableMonad m => NaturalUser -> AccessToken -> MangoPayT m NaturalUser

-- | modify a natural user
modifyNaturalUser :: MPUsableMonad m => NaturalUser -> AccessToken -> MangoPayT m NaturalUser

-- | fetch a natural user from her Id
fetchNaturalUser :: MPUsableMonad m => NaturalUserId -> AccessToken -> MangoPayT m NaturalUser

-- | create a legal user
createLegalUser :: MPUsableMonad m => LegalUser -> AccessToken -> MangoPayT m LegalUser

-- | modify a legal user
modifyLegalUser :: MPUsableMonad m => LegalUser -> AccessToken -> MangoPayT m LegalUser

-- | fetch a natural user from her Id
fetchLegalUser :: MPUsableMonad m => LegalUserId -> AccessToken -> MangoPayT m LegalUser

-- | get a user, natural or legal
getUser :: MPUsableMonad m => AnyUserId -> AccessToken -> MangoPayT m (Either NaturalUser LegalUser)

-- | list all user references
listUsers :: MPUsableMonad m => GenericSort -> Maybe Pagination -> AccessToken -> MangoPayT m (PagedList UserRef)

-- | Convenience function to extract the user Id of an EXISTING user (one
--   with an id).
getExistingUserId :: Either NaturalUser LegalUser -> AnyUserId

-- | a wallet
data Wallet
Wallet :: Maybe WalletId -> Maybe POSIXTime -> Maybe Text -> [Text] -> Text -> Currency -> Maybe Amount -> Wallet

-- | The Id of the wallet
wId :: Wallet -> Maybe WalletId

-- | The creation date of the object
wCreationDate :: Wallet -> Maybe POSIXTime

-- | Custom data
wTag :: Wallet -> Maybe Text

-- | The owner of the wallet
wOwners :: Wallet -> [Text]

-- | A description of the wallet
wDescription :: Wallet -> Text

-- | Currency of the wallet
wCurrency :: Wallet -> Currency

-- | The amount held on the wallet
wBalance :: Wallet -> Maybe Amount

-- | currency amount
data Amount
Amount :: Currency -> Integer -> Amount
aCurrency :: Amount -> Currency

-- | all amounts should be in cents!
aAmount :: Amount -> Integer

-- | Id of a wallet
type WalletId = Text

-- | alias for Currency
type Currency = Text

-- | create a wallet
createWallet :: MPUsableMonad m => Wallet -> AccessToken -> MangoPayT m Wallet

-- | modify a wallet
modifyWallet :: MPUsableMonad m => Wallet -> AccessToken -> MangoPayT m Wallet

-- | fetch a wallet from its Id
fetchWallet :: MPUsableMonad m => WalletId -> AccessToken -> MangoPayT m Wallet

-- | list all wallets for a given user
listWallets :: MPUsableMonad m => AnyUserId -> GenericSort -> Maybe Pagination -> AccessToken -> MangoPayT m (PagedList Wallet)

-- | transfer between wallets
data Transfer
Transfer :: Maybe TransferId -> Maybe POSIXTime -> Maybe Text -> AnyUserId -> Maybe AnyUserId -> Amount -> Amount -> WalletId -> WalletId -> Maybe Amount -> Maybe TransferStatus -> Maybe Text -> Maybe Text -> Maybe POSIXTime -> Transfer

-- | Id of the transfer
tId :: Transfer -> Maybe TransferId

-- | The creation date of the object
tCreationDate :: Transfer -> Maybe POSIXTime

-- | Custom data
tTag :: Transfer -> Maybe Text

-- | The Id of the author
tAuthorId :: Transfer -> AnyUserId

-- | The Id of the user owner of the credited wallet
tCreditedUserId :: Transfer -> Maybe AnyUserId

-- | The funds debited from the « debited wallet »DebitedFunds – Fees =
--   CreditedFunds (amount received on wallet)
tDebitedFunds :: Transfer -> Amount

-- | The fees taken on the transfer.DebitedFunds – Fees = CreditedFunds
--   (amount received on wallet)
tFees :: Transfer -> Amount

-- | The debited wallet (where the funds are held before the transfer)
tDebitedWalletId :: Transfer -> WalletId

-- | The credited wallet (where the funds will be held after the transfer)
tCreditedWalletId :: Transfer -> WalletId

-- | The funds credited on the « credited wallet »DebitedFunds – Fees =
--   CreditedFunds (amount received on wallet)
tCreditedFunds :: Transfer -> Maybe Amount

-- | The status of the transfer:
tStatus :: Transfer -> Maybe TransferStatus

-- | The transaction result code
tResultCode :: Transfer -> Maybe Text

-- | The transaction result message
tResultMessage :: Transfer -> Maybe Text

-- | The execution date of the transfer
tExecutionDate :: Transfer -> Maybe POSIXTime

-- | Id of a transfer
type TransferId = Text

-- | status of a transfer
data TransferStatus
Created :: TransferStatus
Succeeded :: TransferStatus
Failed :: TransferStatus

-- | any transaction
data Transaction
Transaction :: Maybe TransactionId -> Maybe POSIXTime -> Maybe Text -> AnyUserId -> Maybe AnyUserId -> Amount -> Amount -> Maybe WalletId -> Maybe WalletId -> Maybe Amount -> Maybe TransferStatus -> Maybe Text -> Maybe Text -> Maybe POSIXTime -> TransactionType -> TransactionNature -> Transaction

-- | Id of the transfer
txId :: Transaction -> Maybe TransactionId

-- | The creation date of the object
txCreationDate :: Transaction -> Maybe POSIXTime

-- | Custom data
txTag :: Transaction -> Maybe Text

-- | The Id of the author
txAuthorId :: Transaction -> AnyUserId

-- | The Id of the user owner of the credited wallet
txCreditedUserId :: Transaction -> Maybe AnyUserId

-- | The funds debited from the « debited wallet »DebitedFunds – Fees =
--   CreditedFunds (amount received on wallet)
txDebitedFunds :: Transaction -> Amount

-- | The fees taken on the transfer.DebitedFunds – Fees = CreditedFunds
--   (amount received on wallet)
txFees :: Transaction -> Amount

-- | The debited wallet (where the funds are held before the transfer)
txDebitedWalletId :: Transaction -> Maybe WalletId

-- | The credited wallet (where the funds will be held after the transfer)
txCreditedWalletId :: Transaction -> Maybe WalletId

-- | The funds credited on the « credited wallet »DebitedFunds – Fees =
--   CreditedFunds (amount received on wallet)
txCreditedFunds :: Transaction -> Maybe Amount

-- | The status of the transfer:
txStatus :: Transaction -> Maybe TransferStatus

-- | The transaction result code
txResultCode :: Transaction -> Maybe Text

-- | The transaction result message
txResultMessage :: Transaction -> Maybe Text

-- | The execution date of the transfer
txExecutionDate :: Transaction -> Maybe POSIXTime

-- | The type of the transaction
txType :: Transaction -> TransactionType

-- | The nature of the transaction:
txNature :: Transaction -> TransactionNature
type TransactionId = Text

-- | type of transaction
data TransactionType
PAYIN :: TransactionType
PAYOUT :: TransactionType
TRANSFER :: TransactionType
data TransactionNature

-- | just as you created the object
REGULAR :: TransactionNature

-- | the transaction has been refunded
REFUND :: TransactionNature

-- | the transaction has been repudiated
REPUDIATION :: TransactionNature

-- | A filter for transaction lists.
data TransactionFilter
TransactionFilter :: Maybe POSIXTime -> Maybe POSIXTime -> Maybe TransactionNature -> Maybe TransferStatus -> Maybe TransactionType -> TransactionFilter
tfBefore :: TransactionFilter -> Maybe POSIXTime
tfAfter :: TransactionFilter -> Maybe POSIXTime
tfNature :: TransactionFilter -> Maybe TransactionNature
tfStatus :: TransactionFilter -> Maybe TransferStatus
tfType :: TransactionFilter -> Maybe TransactionType

-- | Sort transactions
data TransactionSort
TxNoSort :: TransactionSort
TxByCreationDate :: SortDirection -> TransactionSort
TxByExecutionDate :: SortDirection -> TransactionSort

-- | create a new fund transfer
createTransfer :: MPUsableMonad m => Transfer -> AccessToken -> MangoPayT m Transfer

-- | fetch a transfer from its Id
fetchTransfer :: MPUsableMonad m => TransferId -> AccessToken -> MangoPayT m Transfer

-- | list transfers for a given wallet
listTransactions :: MPUsableMonad m => WalletId -> TransactionFilter -> TransactionSort -> Maybe Pagination -> AccessToken -> MangoPayT m (PagedList Transaction)

-- | list transfer for a given user
listTransactionsForUser :: MPUsableMonad m => AnyUserId -> TransactionFilter -> TransactionSort -> Maybe Pagination -> AccessToken -> MangoPayT m (PagedList Transaction)

-- | a event
data Event
Event :: Text -> EventType -> POSIXTime -> Event
eResourceId :: Event -> Text
eEventType :: Event -> EventType
eDate :: Event -> POSIXTime

-- | Event type
data EventType
PAYIN_NORMAL_CREATED :: EventType
PAYIN_NORMAL_SUCCEEDED :: EventType
PAYIN_NORMAL_FAILED :: EventType
PAYOUT_NORMAL_CREATED :: EventType
PAYOUT_NORMAL_SUCCEEDED :: EventType
PAYOUT_NORMAL_FAILED :: EventType
TRANSFER_NORMAL_CREATED :: EventType
TRANSFER_NORMAL_SUCCEEDED :: EventType
TRANSFER_NORMAL_FAILED :: EventType
PAYIN_REFUND_CREATED :: EventType
PAYIN_REFUND_SUCCEEDED :: EventType
PAYIN_REFUND_FAILED :: EventType
PAYOUT_REFUND_CREATED :: EventType
PAYOUT_REFUND_SUCCEEDED :: EventType
PAYOUT_REFUND_FAILED :: EventType
TRANSFER_REFUND_CREATED :: EventType
TRANSFER_REFUND_SUCCEEDED :: EventType
TRANSFER_REFUND_FAILED :: EventType
KYC_CREATED :: EventType
KYC_VALIDATION_ASKED :: EventType
KYC_SUCCEEDED :: EventType
KYC_FAILED :: EventType

-- | search parameters for events
data EventSearchParams
EventSearchParams :: Maybe EventType -> Maybe POSIXTime -> Maybe POSIXTime -> Maybe Pagination -> Maybe SortDirection -> EventSearchParams
espEventType :: EventSearchParams -> Maybe EventType
espBeforeDate :: EventSearchParams -> Maybe POSIXTime
espAfterDate :: EventSearchParams -> Maybe POSIXTime
espPagination :: EventSearchParams -> Maybe Pagination
espSortByDate :: EventSearchParams -> Maybe SortDirection

-- | search events, returns a paginated list
searchEvents :: MPUsableMonad m => EventSearchParams -> AccessToken -> MangoPayT m (PagedList Event)

-- | search events, returns the full result
searchAllEvents :: MPUsableMonad m => EventSearchParams -> AccessToken -> MangoPayT m [Event]

-- | Check if an event came from MangoPay. Since notifications are not
--   authenticated, you're advised to always check if the event really
--   comes from MangoPay (cf.
--   <a>https://mangopay.desk.com/customer/portal/questions/6493147</a>).
checkEvent :: MPUsableMonad m => Event -> AccessToken -> MangoPayT m Bool

-- | status of notification hook
data HookStatus
Enabled :: HookStatus
Disabled :: HookStatus

-- | validity of notification hook
data HookValidity
Valid :: HookValidity
Invalid :: HookValidity

-- | id for hook
type HookId = Text

-- | a notification hook
data Hook
Hook :: Maybe HookId -> Maybe POSIXTime -> Maybe Text -> Text -> HookStatus -> Maybe HookValidity -> EventType -> Hook

-- | The Id of the hook details
hId :: Hook -> Maybe HookId
hCreationDate :: Hook -> Maybe POSIXTime

-- | Custom data
hTag :: Hook -> Maybe Text

-- | This is the URL where you receive notification for each EventType
hUrl :: Hook -> Text
hStatus :: Hook -> HookStatus
hValidity :: Hook -> Maybe HookValidity
hEventType :: Hook -> EventType

-- | create a hook
createHook :: MPUsableMonad m => Hook -> AccessToken -> MangoPayT m Hook

-- | modify a hook
modifyHook :: MPUsableMonad m => Hook -> AccessToken -> MangoPayT m Hook

-- | fetch a wallet from its Id
fetchHook :: MPUsableMonad m => HookId -> AccessToken -> MangoPayT m Hook

-- | list all wallets for a given user
listHooks :: MPUsableMonad m => Maybe Pagination -> AccessToken -> MangoPayT m (PagedList Hook)

-- | parse an event from the query string the MangoPay is not very clear on
--   notifications, but see v1
--   <a>http://docs.mangopay.com/v1-api-references/notifications/</a> v2
--   works the same, the event is passed via parameters of the query string
eventFromQueryString :: Query -> Maybe Event

-- | parse an event from the query string represented as Text the MangoPay
--   is not very clear on notifications, but see v1
--   <a>http://docs.mangopay.com/v1-api-references/notifications/</a> v2
--   works the same, the event is passed via parameters of the query string
eventFromQueryStringT :: [(Text, Text)] -> Maybe Event

-- | a document
data Document
Document :: Maybe DocumentId -> Maybe POSIXTime -> Maybe Text -> DocumentType -> Maybe DocumentStatus -> Maybe Text -> Maybe Text -> Document
dId :: Document -> Maybe DocumentId
dCreationDate :: Document -> Maybe POSIXTime

-- | custom data for client
dTag :: Document -> Maybe Text
dType :: Document -> DocumentType
dStatus :: Document -> Maybe DocumentStatus
dRefusedReasonType :: Document -> Maybe Text
dRefusedReasonMessage :: Document -> Maybe Text

-- | Id of a document
type DocumentId = Text

-- | type of the document
data DocumentType

-- | For legal and natural users
IDENTITY_PROOF :: DocumentType

-- | Only for legal users
REGISTRATION_PROOF :: DocumentType

-- | Only for legal users
ARTICLES_OF_ASSOCIATION :: DocumentType

-- | Only for legal users
SHAREHOLDER_DECLARATION :: DocumentType

-- | For legal and natural users
ADDRESS_PROOF :: DocumentType

-- | status of a document
data DocumentStatus
CREATED :: DocumentStatus
VALIDATION_ASKED :: DocumentStatus
VALIDATED :: DocumentStatus
REFUSED :: DocumentStatus

-- | A filter for document lists.
data DocumentFilter
DocumentFilter :: Maybe POSIXTime -> Maybe POSIXTime -> Maybe DocumentStatus -> Maybe DocumentType -> DocumentFilter
dfBefore :: DocumentFilter -> Maybe POSIXTime
dfAfter :: DocumentFilter -> Maybe POSIXTime
dfStatus :: DocumentFilter -> Maybe DocumentStatus
dfType :: DocumentFilter -> Maybe DocumentType

-- | create a document
createDocument :: MPUsableMonad m => AnyUserId -> Document -> AccessToken -> MangoPayT m Document
modifyDocument :: MPUsableMonad m => AnyUserId -> Document -> AccessToken -> MangoPayT m Document

-- | fetch a document from its Id
fetchDocument :: MPUsableMonad m => AnyUserId -> DocumentId -> AccessToken -> MangoPayT m Document

-- | create a page note that per the MangoPay API the document HAS to be in
--   CREATED status should we check it here? Since MangoPay returns a 500
--   Internal Server Error if the document is in another status...
createPage :: MPUsableMonad m => AnyUserId -> DocumentId -> ByteString -> AccessToken -> MangoPayT m ()

-- | Calculate the MangoPay authentication level.
--   <a>http://docs.mangopay.com/api-references/kyc-rules/</a>
getKindOfAuthentication :: Either NaturalUser LegalUser -> [Document] -> KindOfAuthentication

-- | Get the document types that may be required from the given user to
--   enhance authorization level.
getRequiredDocumentTypes :: Either NaturalUser LegalUser -> [DocumentType]

-- | List all documents uploaded for a user. Since
--   <a>http://docs.mangopay.com/release-hamster/</a>
listDocuments :: MPUsableMonad m => AnyUserId -> DocumentFilter -> GenericSort -> Maybe Pagination -> AccessToken -> MangoPayT m (PagedList Document)

-- | List all documents uploaded. Since
--   <a>http://docs.mangopay.com/release-hamster/</a>
listAllDocuments :: MPUsableMonad m => DocumentFilter -> GenericSort -> Maybe Pagination -> AccessToken -> MangoPayT m (PagedList Document)

-- | bank account details
data BankAccount
BankAccount :: Maybe BankAccountId -> Maybe POSIXTime -> Maybe AnyUserId -> Maybe Text -> BankAccountDetails -> Text -> Maybe Text -> BankAccount
baId :: BankAccount -> Maybe BankAccountId
baCreationDate :: BankAccount -> Maybe POSIXTime
baUserId :: BankAccount -> Maybe AnyUserId
baTag :: BankAccount -> Maybe Text
baDetails :: BankAccount -> BankAccountDetails
baOwnerName :: BankAccount -> Text
baOwnerAddress :: BankAccount -> Maybe Text

-- | Id of a bank account
type BankAccountId = Text

-- | account details, depending on the type
data BankAccountDetails
IBAN :: Text -> Maybe Text -> BankAccountDetails
atIBAN :: BankAccountDetails -> Text
atBIC :: BankAccountDetails -> Maybe Text
GB :: Text -> Text -> BankAccountDetails
atAccountNumber :: BankAccountDetails -> Text
atSortCode :: BankAccountDetails -> Text
US :: Text -> Text -> BankAccountDetails
atAccountNumber :: BankAccountDetails -> Text
atABA :: BankAccountDetails -> Text
CA :: Text -> Text -> Text -> Text -> BankAccountDetails
atAccountNumber :: BankAccountDetails -> Text
atBankName :: BankAccountDetails -> Text
atInstitutionNumber :: BankAccountDetails -> Text
atBranchCode :: BankAccountDetails -> Text
Other :: Text -> Maybe Text -> CountryCode -> BankAccountDetails
atAccountNumber :: BankAccountDetails -> Text
atBIC :: BankAccountDetails -> Maybe Text
atCountry :: BankAccountDetails -> CountryCode

-- | type of payment
data PaymentType
CARD :: PaymentType
BANK_WIRE :: PaymentType
AUTOMATIC_DEBIT :: PaymentType
DIRECT_DEBIT :: PaymentType

-- | create an account
createAccount :: MPUsableMonad m => BankAccount -> AccessToken -> MangoPayT m BankAccount

-- | fetch an account from its Id
fetchAccount :: MPUsableMonad m => AnyUserId -> BankAccountId -> AccessToken -> MangoPayT m BankAccount

-- | list all accounts for a given user
listAccounts :: MPUsableMonad m => AnyUserId -> GenericSort -> Maybe Pagination -> AccessToken -> MangoPayT m (PagedList BankAccount)

-- | Get the country for a BankAccount
accountCountry :: BankAccount -> Maybe CountryCode

-- | Type of payment execution.
data PaymentExecution

-- | through a web interface
WEB :: PaymentExecution

-- | with a tokenized card
DIRECT :: PaymentExecution

-- | id of a bankwire
type BankWireId = Text

-- | a bank wire there are a lot of common fields between all kinds of
--   payments so this could probably become a <a>Payment</a> type
data BankWire
BankWire :: Maybe BankWireId -> Maybe POSIXTime -> Maybe Text -> AnyUserId -> AnyUserId -> Maybe Amount -> WalletId -> Maybe WalletId -> Maybe Amount -> Maybe Amount -> Amount -> Amount -> Maybe Text -> Maybe BankAccount -> Maybe TransferStatus -> Maybe Text -> Maybe Text -> Maybe POSIXTime -> Maybe TransactionType -> Maybe TransactionNature -> Maybe PaymentType -> Maybe PaymentExecution -> BankWire
bwId :: BankWire -> Maybe BankWireId
bwCreationDate :: BankWire -> Maybe POSIXTime

-- | custom data
bwTag :: BankWire -> Maybe Text

-- | The user Id of the author
bwAuthorId :: BankWire -> AnyUserId

-- | It represents the amount credited on the targeted e-wallet.
bwCreditedUserId :: BankWire -> AnyUserId

-- | It represents your fees taken on the DebitedFundsDebitedFunds – Fees =
--   CreditedFunds (amount received on wallet)
bwFees :: BankWire -> Maybe Amount

-- | The Id of the credited wallet
bwCreditedWalletId :: BankWire -> WalletId

-- | The Id of the debited wallet
bwDebitedWalletId :: BankWire -> Maybe WalletId

-- | It represents the amount debited from the bank account.
bwDebitedFunds :: BankWire -> Maybe Amount

-- | It represents the amount credited on the targeted e-wallet.
bwCreditedFunds :: BankWire -> Maybe Amount

-- | It represents the expected amount by the platform before that the user
--   makes the payment.
bwDeclaredDebitedFunds :: BankWire -> Amount

-- | It represents the expected fees amount by the platform before that the
--   user makes the payment.
bwDeclaredFees :: BankWire -> Amount

-- | It is a reference generated by MANGOPAY and displayed to the user by
--   the platform. The user have to indicate it into the bank wire.
bwWireReference :: BankWire -> Maybe Text

-- | The bank account is generated by MANGOPAY and displayed to the user.
bwBankAccount :: BankWire -> Maybe BankAccount

-- | The status of the payment
bwStatus :: BankWire -> Maybe TransferStatus

-- | The transaction result code
bwResultCode :: BankWire -> Maybe Text

-- | The transaction result Message
bwResultMessage :: BankWire -> Maybe Text

-- | The date when the payment is processed
bwExecutionDate :: BankWire -> Maybe POSIXTime

-- | The type of the transaction
bwType :: BankWire -> Maybe TransactionType

-- | The nature of the transaction:
bwNature :: BankWire -> Maybe TransactionNature

-- | The type of the payment (which type of mean of payment is used).
bwPaymentType :: BankWire -> Maybe PaymentType

-- | How the payment has been executed:
bwExecutionType :: BankWire -> Maybe PaymentExecution

-- | create a bankwire pay-in
createBankWirePayIn :: MPUsableMonad m => BankWire -> AccessToken -> MangoPayT m BankWire

-- | fetch a bank wire pay-in from its Id
fetchBankWirePayIn :: MPUsableMonad m => BankWireId -> AccessToken -> MangoPayT m BankWire

-- | helper function to create a new bank wire with the needed information
mkBankWire :: AnyUserId -> AnyUserId -> WalletId -> Amount -> Amount -> BankWire

-- | Id of a direct pay in
type CardPayinId = Text

-- | direct pay in via registered card
data CardPayin
CardPayin :: Maybe CardPayinId -> Maybe POSIXTime -> Maybe Text -> AnyUserId -> AnyUserId -> Amount -> WalletId -> Maybe WalletId -> Amount -> Maybe Amount -> Maybe Text -> Maybe Text -> Maybe Text -> CardId -> Maybe TransferStatus -> Maybe Text -> Maybe Text -> Maybe POSIXTime -> Maybe TransactionType -> Maybe TransactionNature -> Maybe Text -> Maybe PaymentExecution -> CardPayin
cpId :: CardPayin -> Maybe CardPayinId
cpCreationDate :: CardPayin -> Maybe POSIXTime

-- | custom data
cpTag :: CardPayin -> Maybe Text

-- | The user Id of the author
cpAuthorId :: CardPayin -> AnyUserId

-- | The user Id of the owner of the credited wallet
cpCreditedUserId :: CardPayin -> AnyUserId

-- | It represents your fees taken on the DebitedFundsDebitedFunds – Fees =
--   CreditedFunds (amount received on wallet)
cpFees :: CardPayin -> Amount

-- | The Id of the credited wallet
cpCreditedWalletId :: CardPayin -> WalletId

-- | The Id of the debited wallet
cpDebitedWalletId :: CardPayin -> Maybe WalletId

-- | It represents the amount debited from the bank account.
cpDebitedFunds :: CardPayin -> Amount

-- | It represents the amount credited on the targeted e-wallet.
cpCreditedFunds :: CardPayin -> Maybe Amount

-- | This URL will be used in case the SecureMode is activated.
cpSecureModeReturnURL :: CardPayin -> Maybe Text

-- | The SecureMode correspond to « 3D secure » for CB Visa and MasterCard
--   or « Amex Safe Key » for American Express. This field lets you
--   activate it manually.
cpSecureMode :: CardPayin -> Maybe Text

-- | This URL will be used in case the SecureMode is activated.
cpSecureModeRedirectURL :: CardPayin -> Maybe Text

-- | The Id of the registered card (Got through CardRegistration object)
cpCardId :: CardPayin -> CardId

-- | The status of the payment
cpStatus :: CardPayin -> Maybe TransferStatus

-- | The transaction result code
cpResultCode :: CardPayin -> Maybe Text

-- | The transaction result Message
cpResultMessage :: CardPayin -> Maybe Text
cpExecutionDate :: CardPayin -> Maybe POSIXTime

-- | The type of the transaction
cpType :: CardPayin -> Maybe TransactionType

-- | The nature of the transaction:
cpNature :: CardPayin -> Maybe TransactionNature

-- | The type of the payment (which type of mean of payment is used).
cpPaymentType :: CardPayin -> Maybe Text

-- | How the payment has been executed:
cpExecutionType :: CardPayin -> Maybe PaymentExecution

-- | create a direct card pay in
createCardPayin :: MPUsableMonad m => CardPayin -> AccessToken -> MangoPayT m CardPayin

-- | fetch a direct card pay in from its Id
fetchCardPayin :: MPUsableMonad m => CardPayinId -> AccessToken -> MangoPayT m CardPayin

-- | helper function to create a new direct payin with the needed
--   information | the url is only used in secure mode but is REQUIRED by
--   MangoPay
mkCardPayin :: AnyUserId -> AnyUserId -> WalletId -> Amount -> Amount -> Text -> CardId -> CardPayin

-- | id of payout
type PayoutId = Text

-- | payout
data Payout
Payout :: Maybe PayoutId -> Maybe POSIXTime -> Maybe Text -> AnyUserId -> WalletId -> Amount -> Amount -> BankAccountId -> Maybe AnyUserId -> Maybe Amount -> Maybe TransferStatus -> Maybe Text -> Maybe Text -> Maybe POSIXTime -> Maybe TransactionType -> Maybe TransactionNature -> Maybe PaymentType -> Maybe PaymentType -> Maybe Text -> Payout
ptId :: Payout -> Maybe PayoutId
ptCreationDate :: Payout -> Maybe POSIXTime

-- | custom data for client
ptTag :: Payout -> Maybe Text

-- | The user Id of the author
ptAuthorId :: Payout -> AnyUserId
ptDebitedWalletId :: Payout -> WalletId
ptDebitedFunds :: Payout -> Amount
ptFees :: Payout -> Amount

-- | The ID of the bank account object
ptBankAccountId :: Payout -> BankAccountId
ptCreditedUserId :: Payout -> Maybe AnyUserId
ptCreditedFunds :: Payout -> Maybe Amount
ptStatus :: Payout -> Maybe TransferStatus

-- | The transaction result code
ptResultCode :: Payout -> Maybe Text

-- | The transaction result code
ptResultMessage :: Payout -> Maybe Text
ptExecutionDate :: Payout -> Maybe POSIXTime
ptType :: Payout -> Maybe TransactionType
ptNature :: Payout -> Maybe TransactionNature
ptPaymentType :: Payout -> Maybe PaymentType

-- | « BANK_WIRE »,
ptMeanOfPaymentType :: Payout -> Maybe PaymentType

-- | A custom reference you wish to appear on the user’s bank statement
--   (your ClientId is already shown) since
--   <a>http://docs.mangopay.com/release-hamster/</a>
ptBankWireRef :: Payout -> Maybe Text

-- | make a simple payout for creation
mkPayout :: AnyUserId -> WalletId -> Amount -> Amount -> BankAccountId -> Payout

-- | create a payout
createPayout :: MPUsableMonad m => Payout -> AccessToken -> MangoPayT m Payout

-- | fetch an payout from its Id
fetchPayout :: MPUsableMonad m => PayoutId -> AccessToken -> MangoPayT m Payout

-- | a card registration
data CardRegistration
CardRegistration :: Maybe CardRegistrationId -> Maybe POSIXTime -> Maybe Text -> AnyUserId -> Currency -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe CardId -> Maybe Text -> Maybe Text -> Maybe DocumentStatus -> CardRegistration

-- | The Id of the object
crId :: CardRegistration -> Maybe CardRegistrationId

-- | The creation date of the object
crCreationDate :: CardRegistration -> Maybe POSIXTime

-- | Custom data
crTag :: CardRegistration -> Maybe Text

-- | The Id of the author
crUserId :: CardRegistration -> AnyUserId

-- | The currency of the card registrated
crCurrency :: CardRegistration -> Currency

-- | This key has to be sent with the card details and the
--   PreregistrationData
crAccessKey :: CardRegistration -> Maybe Text

-- | This passphrase has to be sent with the card details and the AccessKey
crPreregistrationData :: CardRegistration -> Maybe Text

-- | The URL where to POST the card details, the AccessKey and
--   PreregistrationData
crCardRegistrationURL :: CardRegistration -> Maybe Text

-- | You get the CardRegistrationData once you posted the card details, the
--   AccessKey and PreregistrationData
crRegistrationData :: CardRegistration -> Maybe Text

-- | « CB_VISA_MASTERCARD » is the only value available yet
crCardType :: CardRegistration -> Maybe Text

-- | You get the CardId (to process payments) once you edited the
--   CardRegistration Object with the RegistrationData
crCardId :: CardRegistration -> Maybe CardId

-- | The result code of the object
crResultCode :: CardRegistration -> Maybe Text

-- | The message explaining the result code
crResultMessage :: CardRegistration -> Maybe Text

-- | The status of the object.
crStatus :: CardRegistration -> Maybe DocumentStatus

-- | card registration Id
type CardRegistrationId = Text

-- | Id of a card
type CardId = Text

-- | credit card information
data CardInfo
CardInfo :: Text -> CardExpiration -> Text -> CardInfo
ciNumber :: CardInfo -> Text
ciExpire :: CardInfo -> CardExpiration
ciCSC :: CardInfo -> Text

-- | a registered card
data Card
Card :: CardId -> POSIXTime -> Maybe Text -> CardExpiration -> Text -> Text -> Text -> Maybe Text -> Maybe Text -> Bool -> Currency -> CardValidity -> Text -> AnyUserId -> Card
cId :: Card -> CardId
cCreationDate :: Card -> POSIXTime
cTag :: Card -> Maybe Text

-- | MMYY
cExpirationDate :: Card -> CardExpiration

-- | Example: 497010XXXXXX4414
cAlias :: Card -> Text

-- | The card provider, it could be « CB », « VISA », « MASTERCARD », etc.
cCardProvider :: Card -> Text

-- | « CB_VISA_MASTERCARD » is the only value available yet
cCardType :: Card -> Text
cProduct :: Card -> Maybe Text
cBankCode :: Card -> Maybe Text
cActive :: Card -> Bool
cCurrency :: Card -> Currency

-- | Once we proceed (or attempted to process) a payment with the card we
--   are able to indicate if it is « valid » or « invalid ». If we didn’t
--   process a payment yet the « Validity » stay at « unknown ».
cValidity :: Card -> CardValidity
cCountry :: Card -> Text
cUserId :: Card -> AnyUserId

-- | validity of a card
data CardValidity
UNKNOWN :: CardValidity
VALID :: CardValidity
INVALID :: CardValidity

-- | helper function to create a new card registration
mkCardRegistration :: AnyUserId -> Currency -> CardRegistration

-- | create a card registration
createCardRegistration :: MPUsableMonad m => CardRegistration -> AccessToken -> MangoPayT m CardRegistration

-- | modify a card registration
modifyCardRegistration :: MPUsableMonad m => CardRegistration -> AccessToken -> MangoPayT m CardRegistration

-- | fetch a card from its Id
fetchCard :: MPUsableMonad m => CardId -> AccessToken -> MangoPayT m Card

-- | list all cards for a given user
listCards :: MPUsableMonad m => AnyUserId -> GenericSort -> Maybe Pagination -> AccessToken -> MangoPayT m (PagedList Card)

-- | id of a refund
type RefundId = Text

-- | refund of a transfer
data Refund
Refund :: RefundId -> POSIXTime -> Maybe Text -> AnyUserId -> Amount -> Amount -> Amount -> TransferStatus -> Text -> Maybe Text -> Maybe POSIXTime -> TransactionType -> TransactionNature -> Maybe AnyUserId -> TransactionId -> TransactionType -> WalletId -> Maybe WalletId -> RefundReason -> Refund

-- | Id of the refund
rId :: Refund -> RefundId
rCreationDate :: Refund -> POSIXTime

-- | Custom data
rTag :: Refund -> Maybe Text

-- | The user Id of the author
rAuthorId :: Refund -> AnyUserId

-- | Strictly positive amount. In cents.
rDebitedFunds :: Refund -> Amount

-- | In cents
rFees :: Refund -> Amount

-- | In cents
rCreditedFunds :: Refund -> Amount
rStatus :: Refund -> TransferStatus

-- | The transaction result code
rResultCode :: Refund -> Text

-- | The transaction result Message
rResultMessage :: Refund -> Maybe Text
rExecutionDate :: Refund -> Maybe POSIXTime
rType :: Refund -> TransactionType
rNature :: Refund -> TransactionNature

-- | Id of the user owner of the credited wallet
rCreditedUserId :: Refund -> Maybe AnyUserId

-- | Id of the transaction being refunded
rInitialTransactionId :: Refund -> TransactionId

-- | The type of the transaction before being refunded (PayIn, Refund)
rInitialTransactionType :: Refund -> TransactionType

-- | The Id of the debited Wallet
rDebitedWalletId :: Refund -> WalletId

-- | The Id of the credited Wallet
rCreditedWalletId :: Refund -> Maybe WalletId

-- | The reason from the refund, since
--   <a>http://docs.mangopay.com/release-lapin/</a>
rReason :: Refund -> RefundReason

-- | refund request
data RefundRequest
RefundRequest :: AnyUserId -> Maybe Amount -> Maybe Amount -> RefundRequest

-- | The user Id of the author
rrAuthorId :: RefundRequest -> AnyUserId

-- | Strictly positive amount. In cents.
rrDebitedFunds :: RefundRequest -> Maybe Amount

-- | In cents
rrFees :: RefundRequest -> Maybe Amount

-- | Reason for a refund, since
--   <a>http://docs.mangopay.com/release-lapin/</a>.
data RefundReason
RefundReason :: Maybe Text -> RefundReasonType -> RefundReason
rrMessage :: RefundReason -> Maybe Text
rrType :: RefundReason -> RefundReasonType

-- | Type for redund reason, since
--   <a>http://docs.mangopay.com/release-lapin/</a>.
data RefundReasonType
BANKACCOUNT_HAS_BEEN_CLOSED :: RefundReasonType
INITIALIZED_BY_CLIENT :: RefundReasonType
OTHER :: RefundReasonType

-- | refund a transfer
refundTransfer :: MPUsableMonad m => TransferId -> AnyUserId -> AccessToken -> MangoPayT m Refund

-- | refund a pay-in
refundPayin :: MPUsableMonad m => AnyPayinId -> RefundRequest -> AccessToken -> MangoPayT m Refund

-- | fetch a refund from its Id
fetchRefund :: MPUsableMonad m => RefundId -> AccessToken -> MangoPayT m Refund

module Web.MangoPay.TestUtils

-- | Creates and initializes the MangoPay infrastructure needed to use the
--   test helpers from this module. Tears down the server at the end.
--   
--   You may want to use <a>ensureNoEvents</a> at the end of your action
--   before tearing down the server.
--   
--   This module uses global, shared state. You have to wrap your entire
--   test suite with this function, and you can't use
--   <tt>withMangoPayTests</tt> more than once.
--   
--   Reads two files from the current directory:
--   
--   <ul>
--   <li><tt>client.test.conf</tt> (can be generated by
--   mangopay-passphrase).</li>
--   <li><tt>hook.test.conf</tt>, json file containing object with
--   <a>Url</a> and <a>Port</a> fields. The first is the URL used to access
--   this server's root, while the second is the port this server should
--   listen to.</li>
--   </ul>
withMangoPayTestUtils :: (Credentials -> AccessToken -> Manager -> IO a) -> IO a

-- | A test card.
testCardInfo1 :: CardInfo

-- | Test MangoPay API call, logging in with the client credentials.
--   Expects a file called <tt>client.test.conf</tt> containing the JSON of
--   client credentials in the current directory.
testMP :: (AccessToken -> MangoPayT (LoggingT (ResourceT IO)) b) -> IO b

-- | Run the given test, then check that we've received events of the given
--   types which reference resource id returned by the test.
testEventTypes :: [EventType] -> IO (Maybe Text) -> Assertion

-- | Same as <a>testEventTypes</a>, but also return the resource id.
testEventTypes' :: [EventType] -> IO (Maybe Text) -> IO (Maybe Text)

-- | Perform the full registration of a card.
--   
--   This function is UNSAFE, because if you use this, YOU handle the
--   user's credit card details so you need to be PCI compliant!
unsafeFullRegistration :: MPUsableMonad m => AnyUserId -> Currency -> CardInfo -> AccessToken -> MangoPayT m CardRegistration

-- | Register a card with the registration URL.
--   
--   This function is UNSAFE, because if you use this, YOU handle the
--   user's credit card details so you need to be PCI compliant!
--   
--   XXX This is not working anymore.
unsafeRegisterCard :: CardInfo -> CardRegistration -> IO CardRegistration

-- | Wait for the given number of seconds and check if any MangoPay event
--   has arrived. Fails if so. Use this function at the end of your test
--   run to ensure that you're aware of every MangoPay event.
ensureNoEvents :: Int -> Assertion

-- | Same as <a>withManager</a>, but without TLS 1.2 support.
--   
--   As of 2014-11-22, there's a bug on the <tt>tls</tt> package that
--   prevents connections to be made to the MangoPay servers. For some
--   reason, disabling TLS 1.2 works around this problem. Cf.
--   <a>https://github.com/vincenthz/hs-tls/issues/87</a>.
--   
--   This function isn't named <tt>withTLS11Manager</tt> because it will
--   eventually be changed to be the same as <a>withManager</a> as soon as
--   this bug is fixed.
withWorkaroundManager :: (MonadIO m, MonadBaseControl IO m) => (Manager -> ResourceT m a) -> m a

-- | Create a new <a>Manager</a> with the same workarounds as
--   <a>withWorkaroundManager</a>, but does not automatically release it so
--   that you have full control of its life cycle.
newWorkaroundManager :: MonadIO m => m Manager
instance Typeable EventResult
instance Typeable HookEndPoint
instance Show EventResult
instance Eq EventResult
instance Ord EventResult
instance Show HookEndPoint
instance Read HookEndPoint
instance Eq HookEndPoint
instance Ord HookEndPoint
instance FromJSON HookEndPoint
instance ToJSON HookEndPoint
