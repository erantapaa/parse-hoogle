-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generation and traversal of highly compressed directed acyclic word graphs.
--   
@package packed-dawg
@version 0.2.0.7


-- | Fully minimized and bit-packed directed acyclic word graphs.
--   
--   This implementation mainly focuses on compactness (&lt;500 Kb space
--   for ~150000 word dictionaries) rather than genericity or dynamic
--   usage. There are no insertion or deletion operations.
--   
--   A DAWG node is stored in four bytes, using 22 bits for indexing and 8
--   bits for data storage. This implies that
--   
--   <ul>
--   <li>The number of nodes shouldn't exceed 2^22, or 4194304.</li>
--   <li>Input characters should be mapped to the 0-255 range.</li>
--   </ul>
module Data.DAWG.Packed

-- | This data type points to a prefix in the DAWG. When a node is the root
--   node it represents the whole DAWG. When it is non-root, it can be used
--   to access the suffixes of the prefix pointed to by the node.
data Node

-- | Create a DAWG from a list of words.
fromList :: [String] -> Node

-- | Allows for faster DAWG generation than <a>fromList</a>. The input list
--   must be in ascending order, but this is not checked.
fromAscList :: [String] -> Node

-- | Read a DAWG previously serialized with <a>toFile</a> from a file.
fromFile :: FilePath -> IO Node

-- | Get the character of a node. The root nodes have the null character.
char :: Node -> Char

-- | Indicates whether a prefix pointed to by the node is a valid word.
endOfWord :: Node -> Bool

-- | Get the root node from a node.
root :: Node -> Node

-- | Generate a list of the direct children of a node.
children :: Node -> [Node]

-- | Lookup a prefix by memberwise applying a comparison function. It is
--   useful for setting case sensitivity, e.g. <tt>insensitiveLookup =
--   lookupPrefixBy (comparing toLower)</tt>
lookupPrefixBy :: (Char -> Char -> Ordering) -> String -> Node -> Maybe Node

-- | <pre>
--   lookupPrefix = lookupPrefixBy (==)
--   </pre>
lookupPrefix :: String -> Node -> Maybe Node

-- | Test for membership with a memberwise comparison function.
memberBy :: (Char -> Char -> Ordering) -> String -> Node -> Bool

-- | <pre>
--   member = memberBy (==)
--   </pre>
member :: String -> Node -> Bool

-- | Get the list of all suffixes that end on a valid word ending. When
--   used on the root node this function enlists the original words. The
--   resulting list is unsorted.
toList :: Node -> [String]

-- | Serialize a DAWG.
toFile :: FilePath -> Node -> IO ()

-- | Create a bit-packed <a>Word32</a>.
pack :: Char -> Bool -> Bool -> Int -> Word32

-- | Create a node from a <a>Word32</a> and a <a>NodeVector</a>.
unpack :: Word32 -> NodeVector -> Node

-- | The underlying container of the DAWG data. Modifying it will most
--   likely result in an invalid DAWG.
--   
--   Each <a>Word32</a> represents a node. The format of a node is the
--   following:
--   
--   <ul>
--   <li>22 bits: the index of the first child.</li>
--   <li>8 bits: character data.</li>
--   <li>1 bit: end-of-word flag.</li>
--   <li>1 bit: end-of-childlist flag.</li>
--   </ul>
--   
--   The children of a node are laid out next to each other, so they can be
--   iterated over by starting from the first child and incrementing the
--   index until a node with the end-of-childlist flag is found.
type NodeVector = Vector Word32

-- | Get the underlying vector from a node.
nodeVector :: Node -> NodeVector

-- | Indicates whether a node is the last in a list of children nodes.
endOfList :: Node -> Bool

-- | Get the index of a node's first child node.
childIndex :: Node -> Word32

-- | Create a node from some member of a <a>NodeVector</a>.
getNodeAt :: NodeVector -> Word32 -> Node
instance Eq Node
instance NFData Node
instance Binary Node
instance Show Node
