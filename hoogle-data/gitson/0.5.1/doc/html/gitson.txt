-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A document store library for Git + JSON.
--   
@package gitson
@version 0.5.1


-- | Various functions used inside Gitson.
module Gitson.Util

-- | Combines two paths and adds the .json extension.
--   
--   <pre>
--   &gt;&gt;&gt; documentPath "things" "document"
--   "things/document.json"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; documentPath "things/" "document"
--   "things/document.json"
--   </pre>
documentPath :: FilePath -> String -> FilePath

-- | Path to the transaction lock file, relative to the repo root.
lockPath :: FilePath

-- | Turns a list of filenames into a list of keys, ignoring non-JSON
--   files.
--   
--   <pre>
--   &gt;&gt;&gt; filterFilenamesAsKeys [".", "..", "k1.json", "unrelated.file"]
--   ["k1"]
--   </pre>
filterFilenamesAsKeys :: [FilePath] -> [String]

-- | Filters a list of file paths, leaving only paths to existing
--   non-hidden directories.
filterDirs :: [FilePath] -> IO [FilePath]

-- | Returns an IO action that switches the current directory to a given
--   path, executes the given IO action and switches the current directory
--   back.
insideDirectory :: MonadIO i => FilePath -> i a -> i a

-- | Returns the message of the last git commit in the repo where the
--   current directory is located.
lastCommitText :: IO String

-- | Runs a shell command with stdin, stdout and stderr set to
--   <i>dev</i>null.
shell :: MonadIO i => String -> [String] -> i ()

-- | Appends a value to a functor, making the inside a tuple if it's a
--   single value.
--   
--   <pre>
--   &gt;&gt;&gt; intoFunctor (Just 1) 2
--   Just (1,2)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; intoFunctor Nothing 2
--   Nothing
--   </pre>
intoFunctor :: Functor f => f a -> b -> f (a, b)

-- | Tries to extract the first int out of a string.
--   
--   <pre>
--   &gt;&gt;&gt; maybeReadIntString "0123-hell0w0rld"
--   Just (123,"-hell0w0rld")
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; maybeReadIntString "1"
--   Just (1,"")
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; maybeReadIntString "hello"
--   Nothing
--   </pre>
maybeReadIntString :: String -> Maybe (Int, String)

-- | Returns the next numeric id in a sequence of keys.
--   
--   <pre>
--   &gt;&gt;&gt; nextKeyId []
--   1
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; nextKeyId ["aaaaarrrrrrrrrrr"]
--   1
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; nextKeyId ["1-hell0-w0rld-123456.json", "002-my-second-post.json"]
--   3
--   </pre>
nextKeyId :: [String] -> Int


-- | Gitson is a simple document store library for Git + JSON.
module Gitson

-- | A transaction monad.
type TransactionWriter = WriterT [IO ()]

-- | Creates a git repository under a given path.
createRepo :: FilePath -> IO ()

-- | Executes a blocking transaction on a repository, committing the
--   results to git.
transaction :: (MonadIO i, Functor i, MonadBaseControl IO i) => FilePath -> TransactionWriter i () -> i ()

-- | Adds a write action to a transaction.
saveDocument :: (MonadIO i, Functor i, ToJSON a) => FilePath -> FileName -> a -> TransactionWriter i ()

-- | Adds a write action to a transaction. The key will start with a
--   numeric id, incremented from the last id in the collection.
saveNextDocument :: (MonadIO i, Functor i, ToJSON a) => FilePath -> FileName -> a -> TransactionWriter i ()

-- | Adds a write action to a transaction. Will update the document with
--   the given numeric id.
saveDocumentById :: (MonadIO i, Functor i, ToJSON a) => FilePath -> Int -> a -> TransactionWriter i ()

-- | Adds a write action to a transaction. Will update the document with
--   the given numeric id.
saveDocumentByName :: (MonadIO i, Functor i, ToJSON a) => FilePath -> String -> a -> TransactionWriter i ()

-- | Lists collections in the current repository.
listCollections :: (MonadIO i, Functor i) => i [FilePath]

-- | Lists document keys in a collection.
listDocumentKeys :: (MonadIO i, Functor i) => FilePath -> i [FileName]

-- | Lists entries in a collection.
listEntries :: (MonadIO i, Functor i, FromJSON a) => FilePath -> i [a]

-- | Reads a document from a collection by key.
readDocument :: (MonadIO i, Functor i, FromJSON a) => FilePath -> FileName -> i (Maybe a)

-- | Reads a document from a collection by numeric id (for example, key
--   "00001-hello" has id 1).
readDocumentById :: (MonadIO i, Functor i, FromJSON a) => FilePath -> Int -> i (Maybe a)

-- | Reads a document from a collection by name (for example, key
--   "00001-hello" has name "hello").
readDocumentByName :: (MonadIO i, Functor i, FromJSON a) => FilePath -> String -> i (Maybe a)

-- | Returns a document's id by name (for example, "hello" will return 23
--   when key "00023-hello" exists). Does not read the document!
documentIdFromName :: (MonadIO i, Functor i) => FilePath -> String -> i (Maybe Int)

-- | Returns a document's name by id (for example, 23 will return "hello"
--   when key "00023-hello" exists). Does not read the document!
documentNameFromId :: (MonadIO i, Functor i) => FilePath -> Int -> i (Maybe String)
