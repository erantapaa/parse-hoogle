-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simplistic D&D style dice-rolling system.
--   
--   Simplistic D&amp;D style dice-rolling system.
@package dice
@version 0.1

module Data.Random.Dice
data Expr a
Const :: String -> a -> Expr a
Plus :: (Expr a) -> (Expr a) -> Expr a
Minus :: (Expr a) -> (Expr a) -> Expr a
Times :: (Expr a) -> (Expr a) -> Expr a
Divide :: (Expr a) -> (Expr a) -> Expr a
foldExpr :: (String -> t -> t1) -> (t1 -> t1 -> t1) -> (t1 -> t1 -> t1) -> (t1 -> t1 -> t1) -> (t1 -> t1 -> t1) -> Expr t -> t1
evalExprWithDiv :: (Num a, Monad m) => (a -> a -> m a) -> Expr a -> m a
evalFractionalExpr :: (Eq a, Fractional a, Monad m) => Expr a -> m a
evalIntegralExpr :: (Integral a, Monad m) => Expr a -> m a
commute :: Monad m => (Expr a -> Expr a1 -> b) -> Expr (m a) -> Expr (m a1) -> m b
runExpr :: Monad m => Expr (m a) -> m (Expr a)
fmtIntegralExpr :: (Show a, Integral a) => Expr a -> String
fmtIntegralListExpr :: (Show a, Integral a) => Expr [a] -> String
fmtSimple :: (Integral a, Show a) => Expr [a] -> String
fmtSimpleRational :: Expr [Integer] -> String
showScalarConst :: Show a => String -> a -> t -> String -> String
showListConst :: Show a => String -> a -> t -> String -> String
showSimpleConst :: (Num a, Ord a) => (a -> a1 -> ShowS) -> t -> [a1] -> a -> ShowS
showSimpleListConst :: Show a => String -> [a] -> Int -> ShowS
showSimpleRationalConst :: t -> [Ratio Integer] -> Integer -> ShowS
showError :: Show a => ErrorT String Identity a -> ShowS
showErrorWith :: (t -> ShowS) -> ErrorT String Identity t -> ShowS
showDouble :: Double -> ShowS
showRational :: (Integral a1, Num a, Ord a, Show a1) => a -> Ratio a1 -> ShowS
showRationalWithDouble :: Ratio Integer -> ShowS
fmtExprPrec :: (String -> a -> Int -> ShowS) -> Expr a -> Int -> ShowS
rollEm :: String -> IO (Either ParseError String)
summarizeRollsOver :: Num a => Int -> [a] -> [a]
roll :: Integral a => a -> a -> RVar [a]
parseExpr :: Integral a => String -> String -> Either ParseError (Expr (RVar [a]))
diceLang :: TokenParser st
expr :: Integral a => CharParser Bool (Expr (RVar [a]))
term :: Integral a => CharParser Bool (Expr (RVar [a]))
primExp :: Integral a => CharParser Bool (Expr (RVar [a]))
dieExp :: Integral a => CharParser Bool (Expr (RVar [a]))
numExp :: Num a => CharParser st (Expr (RVar [a]))
number :: CharParser st (String, Integer)
positiveNumber :: CharParser st (String, Integer)
instance Show a => Show (Expr a)
instance Functor Expr
