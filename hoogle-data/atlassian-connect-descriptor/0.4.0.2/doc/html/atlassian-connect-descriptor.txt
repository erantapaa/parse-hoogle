-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Code that helps you create a valid Atlassian Connect Descriptor.
--   
@package atlassian-connect-descriptor
@version 0.4.0.2


-- | This module provides the data types to let you write your own typesafe
--   Atlassian Connect descriptor and it comes with Aeson bindings so that
--   you can easily convert into json: the format that the Atlassian
--   Connect framework expects.
--   
--   Atlassian Connect is a framework for writing Add-on's that can run
--   inside the Atlassian Cloud products. You can find more information
--   from the Atlassian Connect documentation
--   <a>https://developer.atlassian.com/static/connect/docs/guides/introduction.html</a>.
--   
--   The plugin descriptor is defined by the <a>Plugin</a> class. The end
--   result of using this Haskell Module should be for you to end up with a
--   valid <a>Plugin</a>. To turn your plugin into JSON that the Atlassian
--   marketplace can accept just use the <a>encode</a> function from the
--   Aeson library. For example, here in an example Atlassian Connect
--   Descriptor:
--   
--   <pre>
--   pluginToJsonString :: Plugin -&gt; ByteString
--   pluginToJsonString = encode
--   
--   exampleDescriptor :: Plugin
--   exampleDescriptor = (pluginDescriptor (PluginKey "my-example-connect") baseURL (Authentication Jwt))
--       { pluginName = Just . Name $ "My Example Connect Addon"
--       , pluginDescription = Just "This is an example connect descriptor."
--       , vendor = Just $ Vendor (Name "Awesome Devs") (toURI "http://awesome-devs.com")
--       , lifecycle = Just defaultLifecycle
--       , modules = Just exampleModules
--       , enableLicensing = Just False
--       , links = HM.fromList
--           [ ("documentation", toURI "http://awesome-devs.com/docs")
--           , ("source", toURI "http://bitbucket.org/awesome-devs/connect-addon")
--           ]
--       , scopes = Just [Read, Admin]
--       }
--   
--   exampleModules :: Modules
--   exampleModules = Modules exampleJIRAModules emptyConfluenceModules
--   
--   exampleJIRAModules :: JIRAModules
--   exampleJIRAModules = emptyJIRAModules
--       { jmWebPanels = Just
--           [ WebPanel
--               { wpKey = "test-web-panel"
--               , wpName = simpleText "Test Web Panel"
--               , wpTooltip = Just $ simpleText "This is a test web panel..."
--               , wpLocation = "some-location-in-jira"
--               , wpUrl = "/panel/location/for"
--               , wpConditions = [staticJiraCondition UserIsAdminJiraCondition]
--               , wpWeight = Nothing
--               , wpLayout = Nothing
--               , wpParams = noParams
--               }
--           ]
--       , jmGeneralPages = Just
--           [ JIRAPage
--               { jiraPageKey = "test-general-page"
--               , jiraPageName = simpleText "Test General Page"
--               , jiraPageLocation = Just "some-other-location-in-jira"
--               , jiraPageWeight = Just 1234
--               , jiraPageUrl = "/panel/general-page"
--               , jiraPageIcon = Just IconDetails
--                   { iconUrl = "/static/path/to/icon.png"
--                   , iconWidth = Just 20
--                   , iconHeight = Just 40
--                   }
--               , jiraPageConditions = [staticJiraCondition UserHasIssueHistoryJiraCondition]
--               , jiraPageParams = noParams
--               }
--           ]
--       , jmWebhooks = Just
--           [ Webhook
--               { webhookEvent = JiraIssueDeleted
--               , webhookUrl = "/webhook/handle-deletion"
--               }
--           ]
--       }
--   </pre>
--   
--   You can use this library to make your own. This library will
--   experience change whenever the Atlassian Connect descriptor changes.
--   There are likely to be many breaking changes but we will keep track of
--   them using the standard Haskell version structure.
module Data.Connect.Descriptor

-- | A <a>Plugin</a> is the end result of an Atlassian Connect descriptor.
--   It is what you should provide to the Atlassian Marketplace in order to
--   register your plugin and it is what your Atlassian Cloud customers
--   will download to install your Add-on via the Atlassian UPM (Universal
--   Plugin Manager). Only a very small number of fields are strictly
--   required to generate a valid Atlassian Connect plugin descriptor.
--   Everything that is optional is marked by a maybe type.
--   
--   Even though we provide documentation here you shoucd check the
--   Atlassian Connect Descriptor documentation if you want to get accurate
--   information on the contents of a plugin:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/</a>
data Plugin
Plugin :: PluginKey -> URI -> Authentication -> Maybe (Name Plugin) -> Maybe Text -> Maybe Vendor -> Maybe Lifecycle -> Maybe Modules -> Maybe Text -> Maybe Bool -> HashMap Text URI -> Maybe [ProductScope] -> Plugin

-- | Plugin keys are required. The important detail about this key is that
--   it should be unique across the Atlassian Marketplace. For example, a
--   good key might be <tt>com.yourcompanyorpersonalname.youraddonname</tt>
--   because it would be unique in the marketplace.
pluginKey :: Plugin -> PluginKey

-- | Every plugin must specify a base url where all other relative URI's in
--   the plugin will call to in production. This is the url that the
--   Atlassian Marketplace will query for your descriptor and the url that
--   your customers will come in on. This is especially important for load
--   balanced applications and will also likely be different in your
--   staging and production environments.
pluginBaseUrl :: Plugin -> URI

-- | The authentication type that you plugin requires. See
--   <a>Authentication</a> for more details.
authentication :: Plugin -> Authentication

-- | While your add-on does not require a name it is strongly recommended
--   as this is the human readable name that will appear in the UPM amongst
--   other places.
pluginName :: Plugin -> Maybe (Name Plugin)

-- | You should give your add-on a description. This description will
--   appear in multiple locations on the Atlassian Marketplace and UPM and
--   will be used to explain what your add-on does.
pluginDescription :: Plugin -> Maybe Text

-- | You are the <a>Vendor</a>. Put your details here!
vendor :: Plugin -> Maybe Vendor

-- | Atlassian Connect addon's have a lifecycle. Register your handlers for
--   the <a>Lifecycle</a> events here so that you can tell, for example,
--   when your addon is installed or enabled.
lifecycle :: Plugin -> Maybe Lifecycle

-- | The modules that your Atlassian Connect add-on provides to the Cloud
--   application. Look at the <a>Modules</a> documentaiton for more
--   information.
modules :: Plugin -> Maybe Modules

-- | Required if you wish to provide new versions of your addon to a subset
--   of beta customers.
apiVersion :: Plugin -> Maybe Text

-- | If you are giving away a free add-on then you can set this to false,
--   otherwise set it to true.
enableLicensing :: Plugin -> Maybe Bool

-- | A collection of custom links that you wish to publish with your
--   add-on. Like documentation or bug-tracking links.
links :: Plugin -> HashMap Text URI

-- | The scopes that your add-on requires. See <a>ProductScope</a> for more
--   information.
scopes :: Plugin -> Maybe [ProductScope]

-- | A helper method to generate a bare-bones Atlassian Connect add-on by
--   providing only the absolutely required fields. You can then use
--   Haskell record syntax to update the plugin with more details. For
--   example:
--   
--   <pre>
--   (pluginDescriptor (PluginKey . pack $ "com.company.mycoolplugin") (fromJust . parseURI $ "http://mycoolplugin.company.com") (Authentication Jwt))
--      { pluginName = Just . Name . pack $ "My Cool Plugin"
--      , pluginDescription = Just . pack $ "Chil and be cool, you have a plugin descriptor."
--      }
--   </pre>
pluginDescriptor :: PluginKey -> URI -> Authentication -> Plugin

-- | This data type represents a Key for a particular data type.
data Key t a
Key :: t -> Key t a

-- | This data type represents an Atlassian Connect Add-on key.
data PluginKey
PluginKey :: Text -> PluginKey

-- | Represents a timeout in seconds.
newtype Timeout
Timeout :: Second -> Timeout

-- | Represents the Vendor of the add-on; which will be you. Put your
--   details in this structure.
data Vendor
Vendor :: Name Vendor -> URI -> Vendor

-- | Your name as a Vendor. Might be your personal name or your business
--   name.
vendorName :: Vendor -> Name Vendor

-- | A URL to a website that represents you as a vendor.
vendorUrl :: Vendor -> URI

-- | If your Atlassian Connect addon wants to perform any server side
--   communication with the host product then you will need to use
--   authentication. Otherwise you should specify that you don't need
--   authentication.
data Authentication
Authentication :: AuthType -> Authentication

-- | The authentication type that you wish to use.
authType :: Authentication -> AuthType

-- | The authentication type that you wish to use in your Add-on.
data AuthType

-- | If you need to communicate with the host product then you will want to
--   request JWT authentication.
Jwt :: AuthType

-- | If you do not need to communicate the host product then you should
--   request None for authentication.
None :: AuthType

-- | Represents an arbitrary icon. Potentially for an Atlassian Connect
--   module or for the entire add-on itself.
data IconDetails
IconDetails :: Text -> Maybe Integer -> Maybe Integer -> IconDetails

-- | The URI to the icon.
iconUrl :: IconDetails -> Text

-- | The width of the icon.
iconWidth :: IconDetails -> Maybe Integer

-- | The height of the icon.
iconHeight :: IconDetails -> Maybe Integer

-- | Atlassian Connect descriptors contain many names: module names, add-on
--   names, vendor names etc. We want to make sure that these names don't
--   get put in places that they do not belong. Or, if they do get moved
--   around, they get moved around specifically. We are just adding type
--   saefty to names.
data Name a
Name :: Text -> Name a

-- | Represents a standard text type in the descriptor than may be
--   Internationalised in the future. However, currently there is no I18n
--   support: <a>http://goo.gl/9vJEsW</a>
data I18nText
I18nText :: Text -> Maybe Text -> I18nText

-- | The raw text value that will show.
dValue :: I18nText -> Text

-- | The potential i18n key that will be used when we eventually have I18n
--   support: <a>http://goo.gl/9vJEsW</a>
dI18n :: I18nText -> Maybe Text

-- | Since there is currently no I18n support (<a>http://goo.gl/9vJEsW</a>)
--   we have this helper method to quickly create an <a>I18nText</a> from a
--   standard <a>Text</a> object.
simpleText :: Text -> I18nText

-- | This represents a URL wrapped as an object instead of as a plain text
--   element.
data URLBean
URLBean :: Text -> URLBean

-- | The raw URL.
ubUrl :: URLBean -> Text

-- | Wrap a regular <a>Text</a> based URL inside a URLBean.
toUrl :: Text -> URLBean

-- | A basic length type for HTML elements. Useful for <tt>WebPanel</tt>s
--   and other modules that may require length specifications.
data Length

-- | Specify a length in pixels
Pixels :: Integer -> Length

-- | Specify a length as a percentage in the range [0-100].
Percentage :: Integer -> Length

-- | Represents the weight of an element in a menu.
type Weight = Integer

-- | The standard representation for module parameters.
type ModuleParams = HashMap Text Text

-- | No parameters. A useful helper when you don't want to pass any
--   parameters to a module.
noParams :: ModuleParams

-- | Every Atlassian Connect add-on can be installed, uninstalled, enabled
--   and disabled. These are known as <a>Lifecycle</a> events. These events
--   will fire on each and every Cloud instance that your add-on is
--   installed on. You can request in your Atlassian Connect add-on
--   descriptor to be alerted of lifecycle events. When the event fires, if
--   you have requested it, you will be given the details of the event in a
--   JSON blob by the host application.
--   
--   The lifecycle events are documented fully in the Atlassian Connect
--   documentation:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/lifecycle.html</a>
--   
--   It is important to note that the installed event is particularily
--   important to any Atlassian Connect add-on that needs to use
--   <tt>Jwt</tt> auth tokens because the installed handler will come with
--   the shared secret for your add-on on that particular instance.
data Lifecycle
Lifecycle :: Maybe URI -> Maybe URI -> Maybe URI -> Maybe URI -> Lifecycle

-- | Potential relative URI to call every time an add-on is installed on an
--   instance.
installed :: Lifecycle -> Maybe URI

-- | Potential relative URI to call every time an add-on is uninstalled on
--   an instance.
uninstalled :: Lifecycle -> Maybe URI

-- | Potential relative URI to call every time an add-on is enabled on an
--   instance.
enabled :: Lifecycle -> Maybe URI

-- | Potential relative URI to call every time an add-on is disabled on an
--   instance.
disabled :: Lifecycle -> Maybe URI

-- | The empty <a>Lifecycle</a> allowing you to specify exactly which
--   events you wish to handle with Haskell record syntax.
emptyLifecycle :: Lifecycle

-- | The default <a>Lifecycle</a> where installed goes to /installed and so
--   on and so forth for every lifecycle event. You can choose to disclude
--   certain events by <a>Nothing</a> them out.
defaultLifecycle :: Lifecycle

-- | <a>Modules</a> are perhaps the most important part of your Atlassian
--   Connect descriptor. They specify which parts of the host application
--   you wish to inject content into. They provide your entry point into
--   the host application.
--   
--   Atlassian Connect provides a large set of pre-defined entry points
--   into the host application. Some of which are common to every
--   application and some of which are unique to the particular application
--   that you are targeting:
--   
--   <ul>
--   <li>To see the JIRA modules:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/index.html</a></li>
--   <li>To see the Confluence modules:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/confluence/index.html</a></li>
--   </ul>
--   
--   Note: One important point about modules: they must all have a key and
--   that key must be unique inside the same Atlassian Connect addon.
data Modules
Modules :: JIRAModules -> ConfluenceModules -> Modules

-- | All of the JIRA Modules that you wish to define.
jiraModules :: Modules -> JIRAModules

-- | All of the Confluence modules that you wish to define.
confluenceModules :: Modules -> ConfluenceModules

-- | A collection of all of the JIRA Modules that you can define. For more
--   documentation on which Modules are supported the Atlassian Connect
--   framework please see <a>Modules</a>. You can also find more
--   documentation on each of the modules.
data JIRAModules
JIRAModules :: Maybe [JIRAWebSection] -> Maybe [WebItem] -> Maybe [WebPanel] -> Maybe [JIRAPage] -> Maybe [JIRAPage] -> Maybe JIRAPage -> Maybe [JIRASearchRequestView] -> Maybe [JIRAGenericTabPanel] -> Maybe [JIRAGenericTabPanel] -> Maybe [JIRAGenericTabPanel] -> Maybe [JIRAProjectAdminTabPanel] -> Maybe [JIRAGenericTabPanel] -> Maybe [JIRAGenericTabPanel] -> Maybe [JIRAReport] -> Maybe [Webhook] -> Maybe [JIRAWorkflowPostFunction] -> Maybe [JIRAEntityProperties] -> JIRAModules
jmWebSections :: JIRAModules -> Maybe [JIRAWebSection]
jmWebItems :: JIRAModules -> Maybe [WebItem]
jmWebPanels :: JIRAModules -> Maybe [WebPanel]
jmGeneralPages :: JIRAModules -> Maybe [JIRAPage]
jmAdminPages :: JIRAModules -> Maybe [JIRAPage]
jmConfigurePage :: JIRAModules -> Maybe JIRAPage
jmJiraSearchRequestViews :: JIRAModules -> Maybe [JIRASearchRequestView]
jmJiraProfileTabPanels :: JIRAModules -> Maybe [JIRAGenericTabPanel]
jmJiraVersionTabPanels :: JIRAModules -> Maybe [JIRAGenericTabPanel]
jmJiraProjectTabPanels :: JIRAModules -> Maybe [JIRAGenericTabPanel]
jmJiraProjectAdminTabPanels :: JIRAModules -> Maybe [JIRAProjectAdminTabPanel]
jmJiraIssueTabPanels :: JIRAModules -> Maybe [JIRAGenericTabPanel]
jmJiraComponentTabPanels :: JIRAModules -> Maybe [JIRAGenericTabPanel]
jmJiraReports :: JIRAModules -> Maybe [JIRAReport]
jmWebhooks :: JIRAModules -> Maybe [Webhook]
jmJiraWorkflowPostFunctions :: JIRAModules -> Maybe [JIRAWorkflowPostFunction]
jmJiraEntityProperties :: JIRAModules -> Maybe [JIRAEntityProperties]

-- | Empty JIRA Modules; useful when you only want to define a few modules
--   via Haskell record syntax.
emptyJIRAModules :: JIRAModules

-- | A collection of all of the Confluence Modules that you can define. For
--   more documentation on which Modules are supported the Atlassian
--   Connect framework please see <a>Modules</a>. You can also find more
--   documentation on each of the modules.
data ConfluenceModules
ConfluenceModules :: Maybe [WebPanel] -> ConfluenceModules
confluenceWebPanels :: ConfluenceModules -> Maybe [WebPanel]

-- | Empty Confluence Modules; useful when you only want to define a few
--   modules via Haskell record syntax.
emptyConfluenceModules :: ConfluenceModules

-- | A <a>JIRAWebSection</a> represents a location in the host application
--   that you can add <a>WebItem</a>s to. In this way you can give your
--   add-on sections to inject content into.
--   
--   For more information read the Atlassian Connect documentation:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/web-section.html</a>
data JIRAWebSection
JIRAWebSection :: Text -> I18nText -> Text -> Maybe I18nText -> [Condition] -> Maybe Weight -> ModuleParams -> JIRAWebSection

-- | The add-on unique key for this module.
jwsKey :: JIRAWebSection -> Text

-- | The name of this section, likely to appear in the User Interface.
jwsName :: JIRAWebSection -> I18nText

-- | The location in the application interface where the web section should
--   appear.
jwsLocation :: JIRAWebSection -> Text

-- | The internationalised text to be used in the link's tooltip.
jwsTooltip :: JIRAWebSection -> Maybe I18nText

-- | The conditions under which to show this web section.
jwsConditions :: JIRAWebSection -> [Condition]

-- | The higher the weight the lower down the menu it will appear.
jwsWeight :: JIRAWebSection -> Maybe Weight

-- | Optional parameters to pass to the web section.
jwsParams :: JIRAWebSection -> ModuleParams

-- | A <a>WebItem</a> is a like that can be placed in one of an Atlassian
--   Products many menus. Currently the WebItem has the same structure for
--   both JIRA and Confluence. You can read their documentation here:
--   
--   <ul>
--   <li>JIRA Web Items:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/web-item.html</a></li>
--   <li>Confluence Web Items:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/confluence/web-item.html</a></li>
--   </ul>
--   
--   Web items are very useful for providing links to your Atlassian
--   Connect pages. See <tt>GeneralPage</tt> or <tt>AdminPage</tt> for more
--   information.
data WebItem
WebItem :: Text -> I18nText -> Text -> Text -> Maybe I18nText -> Maybe IconDetails -> Maybe Weight -> Maybe Target -> [Text] -> Maybe WebItemContext -> [Condition] -> ModuleParams -> WebItem

-- | The add-on unique key for this module.
wiKey :: WebItem -> Text

-- | The name of this web item. It will appear as the text of the link.
wiName :: WebItem -> I18nText

-- | Where in the product UI this web item will appear.
wiLocation :: WebItem -> Text

-- | The URL to direct the user to. May be relative to the host Product or
--   the Addon depending on the context.
wiUrl :: WebItem -> Text

-- | An optional tooltip for the link.
wiTooltip :: WebItem -> Maybe I18nText

-- | An optional icon to display with the link text or as the link
wiIcon :: WebItem -> Maybe IconDetails

-- | The higher the weight the lower down in the location menu this web
--   item will appear.
wiWeight :: WebItem -> Maybe Weight

-- | Determines the way the link is opened. In the page, in a dialog or in
--   an inline dialog.
wiTarget :: WebItem -> Maybe Target

-- | Specifies custom styles for the web item target page
wiStyleClasses :: WebItem -> [Text]

-- | Determines if the url is relative to the page, product or connect
--   addon.
wiContext :: WebItem -> Maybe WebItemContext

-- | Determines the conditions under which to show this link.
wiConditions :: WebItem -> [Condition]

-- | Optional parameters that you can pass to the web item.
wiParams :: WebItem -> ModuleParams

-- | Wether to open the url relative to the current page, the current addon
--   or the current product. This lets you control where Atlassian Connect
--   web items point to.
data WebItemContext
PageContext :: WebItemContext
AddonContext :: WebItemContext
ProductContext :: WebItemContext

-- | A <a>WebPanel</a> is an injectable segment of the host application
--   that you can place content inside. Currently the WebPanel has the same
--   structure for both JIRA and Confluence but, potentially, that could
--   change in the future. You can read their Atlassian Connect
--   documentation here:
--   
--   <ul>
--   <li>JIRA Web panels:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/web-panel.html</a></li>
--   <li>Confluence Web panels:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/confluence/web-panel.html</a></li>
--   </ul>
--   
--   Here is what an example Hello World web panel might look like:
--   
--   <pre>
--   helloWorldWebPanel = WebPanel
--      { wpKey = "hello-world"
--      , wpName = Name "Hello world!"
--      , wpUrl = "/panel/show-hello-world"
--      , wpLocation = "atl.jira.view.issue.right.context"
--      , wpConditions = [staticJiraCondition UserIsLoggedInJiraCondition]
--      }
--      where
--         toURI = fromJust . parseRelativeReference
--   </pre>
--   
--   WebPanels are a great way to inject your add-on's content into the
--   host application.
data WebPanel
WebPanel :: Text -> I18nText -> Text -> Text -> [Condition] -> Maybe I18nText -> Maybe Weight -> Maybe WebPanelLayout -> ModuleParams -> WebPanel

-- | The add-on unique key for this module.
wpKey :: WebPanel -> Text

-- | The name of this panel, likely to appear in the User Interface.
wpName :: WebPanel -> I18nText

-- | The relative URI that the host product will hit to get HTML content.
wpUrl :: WebPanel -> Text

-- | The location that this content should be injected in the host product.
wpLocation :: WebPanel -> Text

-- | The <a>Condition</a>s that need to be met for this module to be
--   displayed.
wpConditions :: WebPanel -> [Condition]

-- | A tooltip that explains what this is for.
wpTooltip :: WebPanel -> Maybe I18nText

-- | Web panels can be ordered and a higher weight makes you appear lower
--   down the page.
wpWeight :: WebPanel -> Maybe Weight

-- | You can specify the dimensions of this panel. This will only be
--   considered in certain locations.
wpLayout :: WebPanel -> Maybe WebPanelLayout

-- | You can pass parameters to the web panel.
wpParams :: WebPanel -> ModuleParams

-- | A <a>WebPanelLayout</a> allows you to specify the dimensions of your
--   Web Panel if that is required.
data WebPanelLayout
WebPanelLayout :: Length -> Length -> WebPanelLayout
wplWidth :: WebPanelLayout -> Length
wplHeight :: WebPanelLayout -> Length

-- | A <a>JIRAPage</a> is gives you a location in the host product that you
--   addon can present content and behave just like any other host product
--   page. The main types of pages in JIRA are:
--   
--   <ul>
--   <li>General pages: for just getting a geniric chunk of realestate to
--   display your content.</li>
--   <li>Admin pages: for getting a page in the admin seciton of JIRA to
--   display your content.</li>
--   <li>Configuration page: Every Atlassian Connect plugin can have a
--   configuration page to configure the plugin when installed.</li>
--   </ul>
--   
--   This is very useful for pages like Configuration screens or Statistics
--   pages where you really want the user to be immersed in working with
--   your add-on inside the host product.
--   
--   General pages, like Web Panels, are common to JIRA and Confluence and
--   share the same json format. However they have separate documentation:
--   
--   <ul>
--   <li>JIRA General Page:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/general-page.html</a></li>
--   <li>Confluence General Page:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/confluence/general-page.html</a></li>
--   </ul>
--   
--   Even though, at this point in time, the documentation looks identical.
--   You can find the Admin page and Configure page documentation in the
--   official Atlassian Connect documentation too.
data JIRAPage
JIRAPage :: Text -> I18nText -> Text -> Maybe Text -> Maybe Weight -> Maybe IconDetails -> [Condition] -> ModuleParams -> JIRAPage

-- | The add-on unique key for this module.
jiraPageKey :: JIRAPage -> Text

-- | The name of this JIRA page. Likely to be used in the page title.
jiraPageName :: JIRAPage -> I18nText

-- | The relative URI that the host product will hit to get the HTML
--   content for the page.
jiraPageUrl :: JIRAPage -> Text

-- | The location for this General Page to display; see the docs for your
--   options.
jiraPageLocation :: JIRAPage -> Maybe Text

-- | Determines the order that this item appears in any menu or list. Lower
--   numbers mean that it will appear higher in the list.
jiraPageWeight :: JIRAPage -> Maybe Weight

-- | The optional icon to use for this JIRA page.
jiraPageIcon :: JIRAPage -> Maybe IconDetails

-- | The <a>Condition</a>s that need to be met for this page to be
--   displayed.
jiraPageConditions :: JIRAPage -> [Condition]

-- | Optional parameters for the page.
jiraPageParams :: JIRAPage -> ModuleParams

-- | JIRA has the concept of a TabPanel which is a panel where you can
--   inject content along with a <a>WebItem</a> that is automatically
--   created for you so that you can navigate to the tab panel in question.
--   Tab panels often have a common format and this
--   <a>JIRAGenericTabPanel</a> encapsulates that common format and allows
--   you to apply it to many different scenarios.
data JIRAGenericTabPanel
JIRAGenericTabPanel :: Text -> I18nText -> Text -> [Condition] -> Maybe Weight -> ModuleParams -> JIRAGenericTabPanel

-- | The add-on unique key for this module.
jtpKey :: JIRAGenericTabPanel -> Text

-- | The user facing name of this panel. Likely to appear as the name of
--   the link to the tab panel.
jtpName :: JIRAGenericTabPanel -> I18nText

-- | The URL to your addon where you will provide the content for the
--   panel.
jtpUrl :: JIRAGenericTabPanel -> Text

-- | The conditions under which this tapb panel should be displayed.
jtpConditions :: JIRAGenericTabPanel -> [Condition]

-- | The higher the weight the lower down in the list of tabs the link to
--   this tab panel will be displayed.
jtpWeight :: JIRAGenericTabPanel -> Maybe Weight

-- | Optional parameters for the tab panel.
jtpParams :: JIRAGenericTabPanel -> ModuleParams

-- | A <a>JIRAProjectAdminTabPanel</a> is useful for when you want to add a
--   page to the administration screens of a project. This module will
--   create a web item in the sidebar of every project for you and provide
--   a web panel in the JIRA Project Admin section.
data JIRAProjectAdminTabPanel
JIRAProjectAdminTabPanel :: Text -> I18nText -> Text -> Text -> [Condition] -> Maybe Weight -> ModuleParams -> JIRAProjectAdminTabPanel

-- | The add-on unique key for this module.
jpatpKey :: JIRAProjectAdminTabPanel -> Text

-- | The user facing name of this panel. Likely to appear as the name of
--   the link to the tab panel.
jpatpName :: JIRAProjectAdminTabPanel -> I18nText

-- | The URL to your addon where you will provide the content for the
--   panel.
jpatpUrl :: JIRAProjectAdminTabPanel -> Text

-- | The location in JIRA Admin that you wish the link to this panel to
--   appear.
jpatpLocation :: JIRAProjectAdminTabPanel -> Text

-- | The conditions under which this panel should be displayed.
--   UserIsAdminCondition is redundant.
jpatpConditions :: JIRAProjectAdminTabPanel -> [Condition]

-- | The higher the weight the lower down in the list of tabs the link to
--   this tab panel will be displayed.
jpatpWeight :: JIRAProjectAdminTabPanel -> Maybe Weight

-- | Optional parameters for the tab panel.
jpatpParams :: JIRAProjectAdminTabPanel -> ModuleParams

-- | A Search Request View allows you to render a custom representation of
--   a search result. Rendering a custom XML format is a common example.
--   
--   For more information read the Atlassian Connect documentation:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/search-request-view.html</a>
data JIRASearchRequestView
JIRASearchRequestView :: Text -> I18nText -> Text -> Maybe I18nText -> Maybe Weight -> [Condition] -> ModuleParams -> JIRASearchRequestView

-- | The add-on unique key for this module.
jsrvKey :: JIRASearchRequestView -> Text

-- | The name of this Search Request View. Will appear in the Export menu.
jsrvName :: JIRASearchRequestView -> I18nText

-- | This URL will render the search results.
jsrvUrl :: JIRASearchRequestView -> Text

-- | The description of this view.
jsrvDescription :: JIRASearchRequestView -> Maybe I18nText

-- | A higher weight puts the link further down the export menu.
jsrvWeight :: JIRASearchRequestView -> Maybe Weight

-- | The conditions under which this option should show.
jsrvConditions :: JIRASearchRequestView -> [Condition]

-- | The optional parameters to this search request view.
jsrvParams :: JIRASearchRequestView -> ModuleParams

-- | A <a>JIRAReport</a> will provide a report on the JIRA issues in the
--   project. It allows you to write custom reporting for JIRA.
--   
--   For more information read the Atlassian Connect documentation:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/report.html</a>
data JIRAReport
JIRAReport :: Text -> I18nText -> Text -> I18nText -> Maybe JIRAReportCategory -> Maybe Weight -> Maybe Text -> JIRAReport

-- | The add-on unique key for this module.
jrKey :: JIRAReport -> Text

-- | The user facing name of this report.
jrName :: JIRAReport -> I18nText

-- | The URL that will render the report back to the user.
jrUrl :: JIRAReport -> Text

-- | The required user facing description of this report.
jrDescription :: JIRAReport -> I18nText

-- | The category that this report should be placed inside.
jrReportCategory :: JIRAReport -> Maybe JIRAReportCategory

-- | A higher weight will push this report further down the list of
--   reports.
jrWeight :: JIRAReport -> Maybe Weight

-- | A thumbnail that gives a gist of what this report is supposed to
--   accomplish.
jrThumbnailUrl :: JIRAReport -> Maybe Text

-- | The report category for a <a>JIRAReport</a>. Useful in organising the
--   different types of reports.
data JIRAReportCategory

-- | This report is visible to agile customers.
AgileRC :: JIRAReportCategory

-- | This report does issue analysis.
IssueAnalysisRC :: JIRAReportCategory

-- | This report considers future of the project state.
ForecastManagementRC :: JIRAReportCategory

-- | Any report that does not fit into the other categories goes here.
OtherRC :: JIRAReportCategory

-- | A <a>Target</a> represents the location that a link will be opened
--   into.
data Target

-- | Open the link into the current page.
TargetPage :: Target

-- | Open the link into a dialog on the page with the given options.
TargetDialog :: (Maybe DialogOptions) -> Target

-- | Open the link into an inline dialog with the given options.
TargetInlineDialog :: (Maybe InlineDialogOptions) -> Target

-- | A <a>JIRAWorkflowPostFunction</a> carries out any additional
--   processing required after a JIRA workflow transition is executed.
--   
--   For more information read the Atlassian Connect documentation:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/workflow-post-function.html</a>
--   
--   Or you could read the JIRA documentation on Workflow Post Functions to
--   learn more:
--   <a>https://confluence.atlassian.com/display/Cloud/Advanced+Workflow+Configuration#AdvancedWorkflowConfiguration-postfunctions</a>
data JIRAWorkflowPostFunction
JIRAWorkflowPostFunction :: Text -> I18nText -> URLBean -> Maybe I18nText -> Maybe URLBean -> Maybe URLBean -> Maybe URLBean -> JIRAWorkflowPostFunction

-- | The add-on unique key for this module.
jwpfKey :: JIRAWorkflowPostFunction -> Text

-- | The user facing name of this workflow post function.
jwpfName :: JIRAWorkflowPostFunction -> I18nText

-- | The add-on URL to hit when the post function is triggered. The URL
--   will be POST'ed to and you should read the Atlassian Connect docs for
--   more details.
jwpfTriggered :: JIRAWorkflowPostFunction -> URLBean

-- | The user facing description of this post function.
jwpfDescription :: JIRAWorkflowPostFunction -> Maybe I18nText

-- | The add-on URL to the configuration page for the post function when it
--   is created.
jwpfCreate :: JIRAWorkflowPostFunction -> Maybe URLBean

-- | The add-on URL to the configuration edit page of the post function.
jwpfEdit :: JIRAWorkflowPostFunction -> Maybe URLBean

-- | The add-on URL to the view page for the read-only view of the
--   configuration.
jwpfView :: JIRAWorkflowPostFunction -> Maybe URLBean

-- | Options for a dialog that a link may be opened into.
data DialogOptions
DialogOptions :: Maybe Integer -> Maybe Integer -> Maybe Bool -> DialogOptions

-- | The height of the dialog on the page.
doHeight :: DialogOptions -> Maybe Integer

-- | The width of the dialog on the page.
doWidth :: DialogOptions -> Maybe Integer

-- | Whether the dialog should contain the AUI header and buttons. Default
--   is true
doChrome :: DialogOptions -> Maybe Bool

-- | Options for an inline dialog that a link may be opened into.
data InlineDialogOptions
InlineDialogOptions :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Integer -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> InlineDialogOptions

-- | Sets how wide the inline-dialog is in pixels
idoWidth :: InlineDialogOptions -> Maybe Text

-- | Determines if the dialog should be shown above the trigger or not
idoOnTop :: InlineDialogOptions -> Maybe Bool

-- | Determines if the dialog should be shown relative to where the mouse
--   is at the time of the event trigger
idoIsRelativeToMouse :: InlineDialogOptions -> Maybe Bool

-- | Determines how long in milliseconds after a show trigger is fired
--   until the dialog is shown
idoShowDelay :: InlineDialogOptions -> Maybe Integer

-- | Determines whether the inline-Dialog will show on a mouseOver or
--   mouseClick of the trigger
idoOnHover :: InlineDialogOptions -> Maybe Bool

-- | Sets an offset distance of the inline-dialog from the trigger element
--   along the x-axis in pixels
idoOffsetX :: InlineDialogOptions -> Maybe Text

-- | Sets an offset distance of the inline-dialog from the trigger element
--   along the y-axis in pixels
idoOffsetY :: InlineDialogOptions -> Maybe Text

-- | This option, ignores the <tt>closeOthers</tt> option
idoPersistent :: InlineDialogOptions -> Maybe Bool

-- | Cetermines if all other dialogs on the screen are closed when this one
--   is opened
idoCloseOthers :: InlineDialogOptions -> Maybe Bool

-- | <a>JIRAEntityProperties</a> are used to set Key / Value pair
--   information on JIRA Issues that can be searched via JQL and are
--   indexed by JIRA. The can also be accessed directly via rest api so
--   they allow you to store data in client-only Atlassian Connect plugins.
--   Very handy!
--   
--   The data stored as entity properties is in the JSON data format so
--   multiple values can be stored against the one property.
--   
--   For more information read the JIRA Documentation on the topic:
--   <a>https://developer.atlassian.com/display/JIRADEV/JIRA+Entity+Properties+Overview</a>
--   
--   Or read the Atlassian Connect documentation on the topic:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/entity-property.html</a>
data JIRAEntityProperties
JIRAEntityProperties :: Text -> I18nText -> Maybe EntityType -> [KeyConfiguration] -> JIRAEntityProperties

-- | The add-on unique key for this module.
jepKey :: JIRAEntityProperties -> Text

-- | The user facing name of this entity property.
jepName :: JIRAEntityProperties -> I18nText

-- | The entity type that you want to attach this property to. Issue by
--   default.
jepEntityType :: JIRAEntityProperties -> Maybe EntityType

-- | The list of key configurations that you wish to define.
jepKeyConfigurations :: JIRAEntityProperties -> [KeyConfiguration]

-- | An <a>EntityType</a> represents the type of entity that the JIRA
--   Entity Property should be attatched to. By default entity types are
--   attatched to issues.
data EntityType
IssueEntityType :: EntityType

-- | A <a>KeyConfiguration</a> is the key for this particular property and
--   the JSON flattened paths to the elements that should be extracted from
--   this property. For more information see the Atlassian Connect
--   documentation:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/fragment/index-key-configuration.html</a>
data KeyConfiguration
KeyConfiguration :: Text -> [Extraction] -> KeyConfiguration

-- | The name of the JIRA Entity Property
kcPropertyKey :: KeyConfiguration -> Text

-- | All of the data extractions from the property that should be indexed.
kcExtractions :: KeyConfiguration -> [Extraction]

-- | An <a>Extraction</a> represents a snippet of data that should be
--   extracted from a <a>KeyConfiguration</a> such that it is Indexed by
--   JIRA and capable of being searched in JQL.
data Extraction
Extraction :: Text -> ExtractionType -> Extraction
extractionObjectName :: Extraction -> Text
extractionType :: Extraction -> ExtractionType

-- | The style in which the data should be extracted and indexed. For
--   example, you may want the data to be treated as a Date or as a Number.
data ExtractionType

-- | Index the data as a numeric type.
ExtractionTypeNumber :: ExtractionType

-- | Index the data as a text based type, with words.
ExtractionTypeText :: ExtractionType

-- | Index the data as an exact string.
ExtractionTypeString :: ExtractionType

-- | Index the data as a Date.
ExtractionTypeDate :: ExtractionType

-- | When users of the host application perform updates your Atlassian
--   Connect add-on will not be alerted <i>unless</i> it listens to the
--   <a>WebhookEvent</a>s coming from that application. Webhooks are the
--   way to close the issue recency loop in the Atlassian products. It is
--   important to note that Webhooks are 'best effort' and that there is no
--   guarantee that the webhook will make it to your Atlassian Connect
--   application.
--   
--   The Atlassian connect webhook documentation explains this in more
--   detail:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/jira/webhook.html</a>
data Webhook
Webhook :: WebhookEvent -> Text -> Webhook

-- | The event that you want your Atlassian Connect add-on to watch.
webhookEvent :: Webhook -> WebhookEvent

-- | The relative URI that you wish to handle the webhook response.
webhookUrl :: Webhook -> Text

-- | The webhook event that you wish to watch from your Atlassian Connect
--   add-on.
data WebhookEvent
ConnectAddonDisabled :: WebhookEvent
ConnectAddonEnabled :: WebhookEvent
JiraWebhookPostFunction :: WebhookEvent
JiraIssueCreated :: WebhookEvent
JiraIssueDeleted :: WebhookEvent
JiraIssueUpdated :: WebhookEvent
JiraWorklogUpdated :: WebhookEvent
JiraPluginEnabled :: WebhookEvent
JiraPluginsUpgraded :: WebhookEvent
JiraRemoteIssueLinkAggregateClearedEvent :: WebhookEvent
JiraRemoteWorkflowPostFunction :: WebhookEvent
ConfluenceAttachmentCreated :: WebhookEvent
ConfluenceAttachmentRemoved :: WebhookEvent
ConfluenceAttachmentUpdated :: WebhookEvent
ConfluenceAttachmentViewed :: WebhookEvent
ConfluenceBlogCreated :: WebhookEvent
ConfluenceBlogRemoved :: WebhookEvent
ConfluenceBlogRestored :: WebhookEvent
ConfluenceBlogTrashed :: WebhookEvent
ConfluenceBlogUpdated :: WebhookEvent
ConfluenceBlogViewed :: WebhookEvent
ConfluenceCacheStatisticsChanged :: WebhookEvent
ConfluenceCommentCreated :: WebhookEvent
ConfluenceCommentRemoved :: WebhookEvent
ConfluenceCommentUpdated :: WebhookEvent
ConfluenceContentPermissionsUpdated :: WebhookEvent
ConfluenceLabelAdded :: WebhookEvent
ConfluenceLabelCreated :: WebhookEvent
ConfluenceLabelDeleted :: WebhookEvent
ConfluenceLabelRemoved :: WebhookEvent
ConfluenceLogin :: WebhookEvent
ConfluenceLoginFailed :: WebhookEvent
ConfluenceLogout :: WebhookEvent
ConfluencePageChildrenReordered :: WebhookEvent
ConfluencePageCreated :: WebhookEvent
ConfluencePageMoved :: WebhookEvent
ConfluencePageRemoved :: WebhookEvent
ConfluencePageRestored :: WebhookEvent
ConfluencePageTrashed :: WebhookEvent
ConfluencePageUpdated :: WebhookEvent
ConfluencePageViewed :: WebhookEvent
ConfluenceSearchPerformed :: WebhookEvent
ConfluenceSpaceCreated :: WebhookEvent
ConfluenceSpaceLogoUpdated :: WebhookEvent
ConfluenceSpacePermissionsUpdated :: WebhookEvent
ConfluenceSpaceRemoved :: WebhookEvent
ConfluenceSpaceUpdated :: WebhookEvent
ConfluenceStatusCleared :: WebhookEvent
ConfluenceStatusCreated :: WebhookEvent
ConfluenceStatusRemoved :: WebhookEvent
ConfluenceUserCreated :: WebhookEvent
ConfluenceUserDeactivated :: WebhookEvent
ConfluenceUserFollowed :: WebhookEvent
ConfluenceUserReactivated :: WebhookEvent
ConfluenceUserRemoved :: WebhookEvent
ConfluenceGroupCreated :: WebhookEvent
ConfluenceGroupRemoved :: WebhookEvent
ServerUpgraded :: WebhookEvent

-- | A <a>Condition</a> can be placed on an Atlassian Connect Module to
--   cause it to display or not based on the result it returns. For
--   example, you can choose not to show a WebPanel if the user viewing the
--   page is not logged in. Conditions are very useful in curating when
--   your modules will appear to your users.
--   
--   The Atlassian Connect documentation describes conditions fully:
--   <a>https://developer.atlassian.com/static/connect/docs/concepts/conditions.html</a>
data Condition

-- | A single condition based on a source.
SingleCondition :: ConditionSource -> Bool -> HashMap String String -> Condition

-- | The source of this condition.
conditionSource :: Condition -> ConditionSource

-- | If you should invert the condition. For example, only show if user is
--   NOT logged in.
conditionInverted :: Condition -> Bool

-- | Extra parameters to pass with the condition to give it context.
conditionParams :: Condition -> HashMap String String

-- | A condition that is the composition of one or more conditions. The
--   <a>ConditionType</a> decides the way in which the conditions are
--   composed
CompositeCondition :: [Condition] -> ConditionType -> Condition

-- | The conditions that will be merged together.
subConditions :: Condition -> [Condition]

-- | The way in which the conditions will be merged together.
conditionType :: Condition -> ConditionType

-- | Composite Conditions can be joined together to behave as a single
--   condition. The way that you can join them together is decided by the
--   condition type.
data ConditionType

-- | The boolean intersection of the conditions.
AndCondition :: ConditionType

-- | The boolean union of the conditions.
OrCondition :: ConditionType

-- | Conditions can be specified by the Host application or by the
--   Atlassian Connect add-on itself. This means that the source of the
--   condition needs to be specified and that is what you can use this data
--   type to do.
data ConditionSource

-- | A static JIRA condition.
StaticJIRACondition :: JIRACondition -> ConditionSource

-- | A static Confluence condition.
StaticConfluenceCondition :: ConfluenceCondition -> ConditionSource

-- | A remote condition defined by your Atlassian Connect application.
RemoteCondition :: String -> ConditionSource

-- | The relative URI that you should hit in your Atlassian Connect
--   application to get the condition result. This URI, when hit, should
--   return a JSON response in the format:
--   
--   <pre>
--   { "shouldDisplay": &lt;true|false&gt; }
--   </pre>
remoteConditionPath :: ConditionSource -> String

-- | Given a URI that defines a remote condition convert it into a regular
--   <a>Condition</a>.
remoteCondition :: String -> Condition

-- | The conditions that have been provided by JIRA. Please see the single
--   condition documentation for more details:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/fragment/single-condition.html</a>
data JIRACondition
CanAttachFileToIssueJiraCondition :: JIRACondition
CanManageAttachmentsJiraCondition :: JIRACondition
FeatureFlagJiraCondition :: JIRACondition
HasIssuePermissionJiraCondition :: JIRACondition

-- | Returns true if there is a selected project and the user has project
--   admin to it.
HasProjectPermissionJiraCondition :: JIRACondition
HasSelectedProjectPermissionJiraCondition :: JIRACondition
HasSubTasksAvaliableJiraCondition :: JIRACondition
HasVotedForIssueJiraCondition :: JIRACondition
IsAdminModeJiraCondition :: JIRACondition
IsIssueAssignedToCurrentUserJiraCondition :: JIRACondition
IsIssueEditableJiraCondition :: JIRACondition
IsIssueReportedByCurrentUserJiraCondition :: JIRACondition
IsIssueUnresolvedJiraCondition :: JIRACondition
IsSubTaskJiraCondition :: JIRACondition
IsWatchingIssueJiraCondition :: JIRACondition
LinkingEnabledJiraCondition :: JIRACondition
SubTasksEnabledJiraCondition :: JIRACondition
TimeTrackingEnabledJiraCondition :: JIRACondition
UserHasIssueHistoryJiraCondition :: JIRACondition
UserIsAdminJiraCondition :: JIRACondition
UserIsLoggedInJiraCondition :: JIRACondition
UserIsProjectAdminJiraCondition :: JIRACondition
UserIsSysadminJiraCondition :: JIRACondition
UserIsTheLoggedInUserJiraCondition :: JIRACondition
VotingEnabledJiraCondition :: JIRACondition
WatchingEnabledJiraCondition :: JIRACondition

-- | Turn a standard JIRA Condition into a regular <a>Condition</a>.
staticJiraCondition :: JIRACondition -> Condition

-- | The conditions that have been provided by Confluence. Please see the
--   single condition documentation for more details:
--   <a>https://developer.atlassian.com/static/connect/docs/modules/fragment/single-condition.html</a>
data ConfluenceCondition
ActiveThemeConfluenceCondition :: ConfluenceCondition
CanEditSpaceStylesConfluenceCondition :: ConfluenceCondition
CanSignupConfluenceCondition :: ConfluenceCondition
ContentHasAnyPermissionsSetConfluenceCondition :: ConfluenceCondition
CreateContentConfluenceCondition :: ConfluenceCondition
EmailAddressPublicConfluenceCondition :: ConfluenceCondition
FavouritePageConfluenceCondition :: ConfluenceCondition
FavouriteSpaceConfluenceCondition :: ConfluenceCondition
FeatureFlagConfluenceCondition :: ConfluenceCondition
FollowingTargetUserConfluenceCondition :: ConfluenceCondition
HasAttachmentConfluenceCondition :: ConfluenceCondition
HasBlogPostConfluenceCondition :: ConfluenceCondition
HasPageConfluenceCondition :: ConfluenceCondition
HasSpaceConfluenceCondition :: ConfluenceCondition
HasTemplateConfluenceCondition :: ConfluenceCondition
LatestVersionConfluenceCondition :: ConfluenceCondition
NotPersonalSpaceConfluenceCondition :: ConfluenceCondition
PrintableVersionConfluenceCondition :: ConfluenceCondition
ShowingPageAttachmentsConfluenceCondition :: ConfluenceCondition
SpaceFunctionPermissionConfluenceCondition :: ConfluenceCondition
SpaceSidebarConfluenceCondition :: ConfluenceCondition
TargetUserCanSetStatusConfluenceCondition :: ConfluenceCondition
TargetUserHasPersonalBlogConfluenceCondition :: ConfluenceCondition
TargetUserHasPersonalSpaceConfluenceCondition :: ConfluenceCondition
ThreadedCommentsConfluenceCondition :: ConfluenceCondition
TinyUrlSupportedConfluenceCondition :: ConfluenceCondition
UserCanCreatePersonalSpaceConfluenceCondition :: ConfluenceCondition
UserCanUpdateUserStatusConfluenceCondition :: ConfluenceCondition
UserCanUseConfluenceConfluenceCondition :: ConfluenceCondition
UserFavouritingTargetUserPersonalSpaceConfluenceCondition :: ConfluenceCondition
UserHasPersonalBlogConfluenceCondition :: ConfluenceCondition
UserHasPersonalSpaceConfluenceCondition :: ConfluenceCondition
UserIsAdminConfluenceCondition :: ConfluenceCondition
UserIsConfluenceAdministratorConfluenceCondition :: ConfluenceCondition
UserIsLoggedInConfluenceCondition :: ConfluenceCondition
UserIsSysadminConfluenceCondition :: ConfluenceCondition
UserLoggedInEditableConfluenceCondition :: ConfluenceCondition
UserWatchingPageConfluenceCondition :: ConfluenceCondition
UserWatchingSpaceConfluenceCondition :: ConfluenceCondition
UserWatchingSpaceForContentTypeConfluenceCondition :: ConfluenceCondition
ViewingContentConfluenceCondition :: ConfluenceCondition
ViewingOwnProfileConfluenceCondition :: ConfluenceCondition

-- | Turn a standard Confluence Condition into a regular <a>Condition</a>.
staticConfluenceCondition :: ConfluenceCondition -> Condition

-- | Invert the given condition.
invertCondition :: Condition -> Condition

-- | Scopes are an Atlassian Connect concept that declare how much access
--   your addon requires to any give Cloud instance. These scopes can be
--   thought of as permissions are are well documented:
--   <a>https://developer.atlassian.com/static/connect/docs/scopes/scopes.html</a>
--   
--   It is important to note that these scopes only give you restricted
--   access to certain REST resources. You can not query any REST url as
--   you would with an Atlassian Server plugin. The restricted set of REST
--   resources per application can be found in the Atlassian Connect
--   documentation.
data ProductScope

-- | The read scope means that you can pull data from the Cloud
--   application.
Read :: ProductScope

-- | The write scope gives you the same access as a regular user of the
--   Atlassian connect application.
Write :: ProductScope

-- | The delete scope is required if you want to perform potentially
--   destructive operations on data.
Delete :: ProductScope

-- | A JIRA specific scope. Lets your add-on administer a project in JIRA.
ProjectAdmin :: ProductScope

-- | A Confluence specific scope. Lets your add-on administer a space in
--   Confluence.
SpaceAdmin :: ProductScope

-- | Gives your Atlassian Connect add-on administrative rights to the Cloud
--   instance. (But NOT system administrator permission. Happily you cannot
--   request that level of access.)
Admin :: ProductScope
instance Show Plugin
instance Generic Plugin
instance Datatype D1Plugin
instance Constructor C1_0Plugin
instance Selector S1_0_0Plugin
instance Selector S1_0_1Plugin
instance Selector S1_0_2Plugin
instance Selector S1_0_3Plugin
instance Selector S1_0_4Plugin
instance Selector S1_0_5Plugin
instance Selector S1_0_6Plugin
instance Selector S1_0_7Plugin
instance Selector S1_0_8Plugin
instance Selector S1_0_9Plugin
instance Selector S1_0_10Plugin
instance Selector S1_0_11Plugin
instance ToJSON Plugin
instance ToJSON (Name Plugin)
