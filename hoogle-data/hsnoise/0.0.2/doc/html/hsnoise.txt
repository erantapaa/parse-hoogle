-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A coherent 3d noise library.
--   
--   A coherent 3d noise library loosely based on libnoise. Currently has
--   an implementation of Perlin noise and ridged multi-fractal noise. Will
--   eventually support other noise types as well as noise function
--   combinations.
--   
--   Code examples included in package.
--   
--   Example of Perlin noise output image:
--   <a>http://i.imgur.com/cPOZ2.png</a>
@package hsnoise
@version 0.0.2


-- | Contains <a>Noise</a> class as well as a general coherent noise
--   generating function which the specific noise implementations are based
--   on.
module Numeric.Noise

-- | A point in 3-space.
type Point = (Double, Double, Double)

-- | A seed for a random function.
type Seed = Int

-- | Class of noise functions.
class Noise a
noiseValue :: Noise a => a -> Point -> Double

-- | Map a function on a <a>Point</a>.
pmap :: (Double -> Double) -> Point -> Point

-- | Returns a clamped value between a min and max value.
clamp :: Ord a => a -> a -> a -> a

-- | Returns a coherent noise value between -1 and 1 given a seed and a
--   point in 3-space.
coherentNoise :: Seed -> Point -> Double


-- | Implementation of Perlin noise.
--   
--   Example of use:
--   
--   <pre>
--   main = putStrLn ("Noise value at (1, 2, 3): " ++ show x)
--       where seed        = 1
--             octaves     = 5
--             scale       = 0.05
--             persistance = 0.5
--             perlinNoise = perlin seed octaves scale persistance
--             x           = noiseValue perlinNoise (1, 2, 3)
--   </pre>
module Numeric.Noise.Perlin

-- | A Perlin noise function.
data Perlin

-- | Constructs a Perlin noise function given a seed, number of octaves,
--   scale, and persistance.
perlin :: Seed -> Int -> Double -> Double -> Perlin

-- | Maps 3-space points to a noise value between -1 and 1 for the given
--   noise function.
noiseValue :: Noise a => a -> Point -> Double
instance Noise Perlin


-- | A simple implementation of a pure linear congruential psuedo-random
--   number generator.
--   
--   Example of use:
--   
--   <pre>
--   main = do
--       let seed = 1
--       let (r, seed') = randomInt seed
--       putStrLn ("Random number 1: " ++ show r)
--       let (r', seed'') = randomInt seed'
--       putStrLn ("Random number 2: " ++ show r')
--       putStrLn ("Random int list: " ++ show (randomInts 10 seed))
--       putStrLn ("Shuffled list: " ++ show (shuffle [1..10] seed))
--   </pre>
module Numeric.Noise.Random

-- | Returns a random <a>Int</a> and the next seed given a seed.
randomInt :: Seed -> (Int, Seed)

-- | Returns a random sequence of <a>Int</a>s given a seed and the number
--   of <a>Int</a>s to generate.
randomInts :: Seed -> Int -> [Int]

-- | Returns a shuffled list containing the same elements as the given list
--   given a seed.
shuffle :: [a] -> Seed -> [a]


-- | Implementation of ridged multi-fractal noise.
--   
--   Example of use:
--   
--   <pre>
--   main = putStrLn ("Noise value at (1, 2, 3): " ++ show x)
--       where seed        = 1
--             octaves     = 5
--             scale       = 0.005
--             frequency   = 1
--             lacunarity  = 2
--             ridgedNoise = ridged seed octaves scale frequency lacunarity
--             x           = noiseValue ridgedNoise (1, 2, 3)
--   </pre>
module Numeric.Noise.Ridged

-- | A ridged multi-fractal noise function.
data Ridged

-- | Constructs a ridged multi-fractal noise function given a seed, number
--   of octaves, scale, frequency, and lacunarity.
ridged :: Seed -> Int -> Double -> Double -> Double -> Ridged

-- | Maps 3-space points to a noise value between -1 and 1 for the given
--   noise function.
noiseValue :: Noise a => a -> Point -> Double
instance Noise Ridged
