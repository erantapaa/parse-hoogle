-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An undead monad
--   
@package monad-skeleton
@version 0.1.2.1

module Control.Monad.Skeleton
data MonadView t m x
Return :: a -> MonadView t m a
(:>>=) :: t a -> (a -> m b) -> MonadView t m b
hoistMV :: (forall x. s x -> t x) -> (m a -> n a) -> MonadView s m a -> MonadView t n a
iterMV :: Monad m => (t a -> MonadView m t a) -> t a -> m a

-- | <tt><a>Skeleton</a> t</tt> is a monadic skeleton (operational monad)
--   made out of <tt>t</tt>. Skeletons can be fleshed out by getting
--   transformed to other monads. The implementation is based on
--   <a>Reflection without Remorse</a> so it provides efficient
--   (<a>&gt;&gt;=</a>) and <a>debone</a>, monadic reflection.
data Skeleton t a

-- | A skeleton that has only one bone.
bone :: t a -> Skeleton t a

-- | Pick a bone from a <a>Skeleton</a>.
debone :: Skeleton t a -> MonadView t (Skeleton t) a

-- | Uncommon synonym for <a>debone</a>.
unbone :: Skeleton t a -> MonadView t (Skeleton t) a

-- | Re-add a bone.
boned :: MonadView t (Skeleton t) a -> Skeleton t a

-- | Lift a transformation between bones into transformation between
--   skeletons.
hoistSkeleton :: (forall x. s x -> t x) -> Skeleton s a -> Skeleton t a
instance Monad (Skeleton t)
instance Applicative (Skeleton t)
instance Functor (Skeleton t)
instance Category (Cat k2)
instance Functor m => Functor (MonadView t m)
