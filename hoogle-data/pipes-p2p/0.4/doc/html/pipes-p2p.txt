-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | P2P network nodes with pipes
--   
@package pipes-p2p
@version 0.4


-- | Use <a>node</a> to create a <a>Node</a> with your desired settings and
--   then <a>launch</a> it.
module Pipes.Network.P2P

-- | A P2P node.
--   
--   The constructor is exported for pattern matching purposes. Under
--   normal circumstances, you should use <a>node</a> for <a>Node</a>
--   creation.
data Node a
Node :: Int -> SockAddr -> Handlers a -> Mailbox a -> Node a

-- | Magic bytes.
magic :: Node a -> Int

-- | Listening address.
address :: Node a -> SockAddr

-- | Functions to define the behavior of the <a>Node</a>.
handlers :: Node a -> Handlers a

-- | <tt>MailBox</tt> to relay internal messages.
broadcaster :: Node a -> Mailbox a

-- | Smart constructor to create a <a>Node</a>.
node :: (Functor m, Applicative m, MonadIO m, Binary a, Show a) => Int -> SockAddr -> Handlers a -> m (Node a)

-- | Convenient data type to put together a <a>Node</a> and a
--   <a>Connection</a>.
data NodeConn a
NodeConn :: (Node a) -> (Connection) -> NodeConn a

-- | Convenient wrapper for a <a>ReaderT</a> monad containing a
--   <a>NodeConn</a>.
data NodeConnT a m r

-- | Convenient data type to put together a network address and its
--   corresponding socket.
data Connection
Connection :: SockAddr -> Socket -> Connection

-- | Functions to define the behavior of a <a>Node</a>.
data Handlers a
Handlers :: HandShaker a -> HandShaker a -> Handler a -> Handler a -> (forall m. (MonadIO m, MonadMask m) => a -> Consumer (Either (Relay a) a) (NodeConnT a m) ()) -> Handlers a

-- | What to do for an outgoing connection handshake.
ohandshake :: Handlers a -> HandShaker a

-- | What to do for an incoming connection handshake.
ihandshake :: Handlers a -> HandShaker a

-- | Action to perform after a connection has been established.
onConnect :: Handlers a -> Handler a

-- | Action to perform after a connection has ended.
onDisconnect :: Handlers a -> Handler a

-- | This consumes incoming messages either from other connections in the
--   node, as <tt><a>Left</a> (<a>Relay</a> a)</tt>, or from the current
--   connected socket, as <tt><a>Right</a> a</tt>. This is only used after
--   a handshake has been successful.
msgConsumer :: Handlers a -> forall m. (MonadIO m, MonadMask m) => a -> Consumer (Either (Relay a) a) (NodeConnT a m) ()

-- | Launch a <a>Node</a>.
launch :: (Functor m, Applicative m, MonadIO m, MonadMask m, Binary a) => Node a -> [SockAddr] -> m ()

-- | Connect a <a>Node</a> to the given pair of <a>SockAddr</a>,
--   <a>Socket</a>.
runNodeConn :: (Functor m, MonadIO m, MonadMask m, Binary a) => Node a -> Bool -> SockAddr -> Socket -> m ()

-- | Send an expected message.
--   
--   The message is automatically serialized and prepended with the magic
--   bytes.
deliver :: (Binary a, MonadIO m) => a -> MaybeT (NodeConnT a m) ()

-- | Receive a message and make sure it's the same as the expected message.
--   
--   The message is automatically deserialized and checked for the correct
--   magic bytes.
expect :: (MonadIO m, Binary a, Eq a) => a -> MaybeT (NodeConnT a m) ()

-- | Fetch next message.
--   
--   The message is automatically deserialized and checked for the correct
--   magic bytes. Uses the length bytes in the header to pull the exact
--   number of bytes of the message.
fetch :: (MonadIO m, Binary a) => MaybeT (NodeConnT a m) a

-- | Internal message to relay to the rest of connections in the node.
data Relay a
Relay :: ThreadId -> a -> Relay a

-- | Serializes and prepends a <a>Header</a> to a message.
serialize :: Binary a => Int -> a -> ByteString

-- | Monads in which <a>IO</a> computations may be embedded. Any monad
--   built by applying a sequence of monad transformers to the <a>IO</a>
--   monad will be an instance of this class.
--   
--   Instances should satisfy the following laws, which state that
--   <a>liftIO</a> is a transformer of monads:
--   
--   <ul>
--   <li><pre><a>liftIO</a> . <a>return</a> = <a>return</a></pre></li>
--   <li><pre><a>liftIO</a> (m &gt;&gt;= f) = <a>liftIO</a> m &gt;&gt;=
--   (<a>liftIO</a> . f)</pre></li>
--   </ul>
class Monad m => MonadIO (m :: * -> *)
liftIO :: MonadIO m => IO a -> m a

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => forall a. IO a -> m a
instance Show a => Show (Relay a)
instance Functor m => Functor (NodeConnT a m)
instance Applicative m => Applicative (NodeConnT a m)
instance Monad m => Monad (NodeConnT a m)
instance MonadIO m => MonadIO (NodeConnT a m)
instance MonadThrow m => MonadThrow (NodeConnT a m)
instance MonadCatch m => MonadCatch (NodeConnT a m)
instance MonadMask m => MonadMask (NodeConnT a m)
instance Monad m => MonadReader (NodeConn a) (NodeConnT a m)
instance Show Header
instance Generic Header
instance Datatype D1Header
instance Constructor C1_0Header
instance Binary Header
