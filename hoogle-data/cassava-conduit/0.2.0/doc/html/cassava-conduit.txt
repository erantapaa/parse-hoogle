-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Conduit interface for cassava package
--   
--   Conduit interface for cassava package
@package cassava-conduit
@version 0.2.0


-- | Conduit interface for cassava
module Data.Csv.Conduit
data CsvParseError
CsvParseError :: ByteString -> String -> CsvParseError
IncrementalError :: String -> CsvParseError

-- | Streams parsed records, Errors are not received in the stream but
--   instead after the pipeline is executed, If you want to handle errors
--   as they come and resume, see <a>fromCsvStreamError</a>
fromCsv :: (FromRecord a, MonadError CsvParseError m) => DecodeOptions -> HasHeader -> Conduit ByteString m a

-- | Sometimes your pipeline will involve an error type other than
--   <a>CsvParseError</a>, in which case if you provide a function to
--   project it into your custom error type, you can use this instead of
--   <a>fromCsv</a>
fromCsvLiftError :: (FromRecord a, MonadError e m) => (CsvParseError -> e) -> DecodeOptions -> HasHeader -> Conduit ByteString m a

-- | Parses an instance of <a>FromNamedRecord</a>, this conduit drops the
--   Header
--   
--   Errors are not seen in the pipeline but rather at the end after
--   executing the pipeline, if you want to handle the errors as they
--   occur, try <a>fromNamedCsvStreamError</a> instead.
fromNamedCsv :: (FromNamedRecord a, MonadError CsvParseError m) => DecodeOptions -> Conduit ByteString m a

-- | Sometimes your pipeline will involve an error type other than
--   <a>CsvParseError</a>, in which case if you provide a function to
--   project it into your custom error type, you can use this instead of
--   <a>fromCsv</a>
fromNamedCsvLiftError :: (FromNamedRecord a, MonadError e m) => (CsvParseError -> e) -> DecodeOptions -> Conduit ByteString m a

-- | Same as <a>fromCsv</a> but allows for errors to be handled in the
--   pipeline instead
fromCsvStreamError :: (Monad m, FromRecord a) => DecodeOptions -> HasHeader -> Conduit ByteString m (Either CsvParseError a)

-- | Like <tt>fromNamedCsvStream</tt> but allows for errors to be handled
--   in the pipeline itself.
fromNamedCsvStreamError :: (Monad m, FromNamedRecord a) => DecodeOptions -> Conduit ByteString m (Either CsvParseError a)

-- | Streams from csv to text, does not create headers...
toCsv :: (Monad m, ToRecord a) => EncodeOptions -> Conduit a m ByteString
