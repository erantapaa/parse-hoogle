-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Data types for programs for xournal file format
--   
@package xournal-types
@version 0.5.1


module Data.Xournal.Predefined
predefinedPenShapeAspectXY :: (Double, Double)
hexToRGBA :: Integer -> (Double, Double, Double, Double)
rgbaToHEX :: (Double, Double, Double, Double) -> String
predefined_highlighter_opacity :: Double
predefined_pencolor :: Map ByteString (Double, Double, Double, Double)
predefined_bkgcolor :: Map ByteString (Double, Double, Double, Double)
predefined_veryfine :: Double
predefined_fine :: Double
predefined_medium :: Double
predefined_thick :: Double
predefined_verythick :: Double
predefined_ultrathick :: Double
predefined_highlighter_veryfine :: Double
predefined_highlighter_fine :: Double
predefined_highlighter_medium :: Double
predefined_highlighter_thick :: Double
predefined_highlighter_verythick :: Double
predefined_highlighter_ultrathick :: Double
predefined_eraser_veryfine :: Double
predefined_eraser_fine :: Double
predefined_eraser_medium :: Double
predefined_eraser_thick :: Double
predefined_eraser_verythick :: Double
predefined_eraser_ultrathick :: Double
predefined_RULING_MARGIN_COLOR :: (Double, Double, Double, Double)
predefined_RULING_COLOR :: (Double, Double, Double, Double)
predefined_RULING_THICKNESS :: Double
predefined_RULING_LEFTMARGIN :: Double
predefined_RULING_TOPMARGIN :: Double
predefined_RULING_SPACING :: Double
predefined_RULING_BOTTOMMARGIN :: Double
predefined_RULING_GRAPHSPACING :: Double


module Data.Xournal.Util
fst3 :: (a, b, c) -> a
snd3 :: (a, b, c) -> b
trd3 :: (a, b, c) -> c


module Data.Xournal.Simple
type Title = ByteString
data Stroke
Stroke :: !ByteString -> !ByteString -> !Double -> ![Pair Double Double] -> Stroke
stroke_tool :: Stroke -> !ByteString
stroke_color :: Stroke -> !ByteString
stroke_width :: Stroke -> !Double
stroke_data :: Stroke -> ![Pair Double Double]
VWStroke :: ByteString -> ByteString -> [(Double, Double, Double)] -> Stroke
stroke_tool :: Stroke -> ByteString
stroke_color :: Stroke -> ByteString
stroke_vwdata :: Stroke -> [(Double, Double, Double)]
data Dimension
Dim :: !Double -> !Double -> Dimension
dim_width :: Dimension -> !Double
dim_height :: Dimension -> !Double
data Background
Background :: !ByteString -> !ByteString -> !ByteString -> Background
bkg_type :: Background -> !ByteString
bkg_color :: Background -> !ByteString
bkg_style :: Background -> !ByteString
BackgroundPdf :: ByteString -> Maybe ByteString -> Maybe ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_domain :: Background -> Maybe ByteString
bkg_filename :: Background -> Maybe ByteString
bkg_pageno :: Background -> Int
data Xournal
Xournal :: !Title -> ![Page] -> Xournal
xoj_title :: Xournal -> !Title
xoj_pages :: Xournal -> ![Page]
data Page
Page :: !Dimension -> !Background -> ![Layer] -> Page
page_dim :: Page -> !Dimension
page_bkg :: Page -> !Background
page_layers :: Page -> ![Layer]
data Layer
Layer :: ![Stroke] -> Layer
layer_strokes :: Layer -> ![Stroke]
getXYtuples :: Stroke -> [(Double, Double)]
s_tool :: Simple Lens Stroke ByteString
s_color :: Simple Lens Stroke ByteString
s_title :: Simple Lens Xournal Title
s_pages :: Simple Lens Xournal [Page]
s_dim :: Simple Lens Page Dimension
s_bkg :: Simple Lens Page Background
s_layers :: Simple Lens Page [Layer]
s_strokes :: Simple Lens Layer [Stroke]
emptyXournal :: Xournal
emptyLayer :: Layer
emptyStroke :: Stroke
defaultBackground :: Background
defaultLayer :: Layer
defaultPage :: Page
defaultXournal :: Xournal
newPageFromOld :: Page -> Page
instance Show Stroke
instance Eq Stroke
instance Ord Stroke
instance Show Dimension
instance Show Background
instance Show Layer
instance Show Page
instance Show Xournal
instance (Serialize a, Serialize b) => Serialize (Pair a b)
instance Serialize Stroke


module Data.Xournal.Generic
data GXournal s a
GXournal :: ByteString -> s a -> GXournal s a
gtitle :: GXournal s a -> ByteString
gpages :: GXournal s a -> s a
data GPage b s a
GPage :: Dimension -> b -> s a -> GPage b s a
gdimension :: GPage b s a -> Dimension
gbackground :: GPage b s a -> b
glayers :: GPage b s a -> s a
data GLayer s a
GLayer :: s a -> GLayer s a
gstrokes :: GLayer s a -> s a
data GLayerBuf b s a
GLayerBuf :: b -> s a -> GLayerBuf b s a
gbuffer :: GLayerBuf b s a -> b
gbstrokes :: GLayerBuf b s a -> s a
class GCast a b
gcast :: GCast a b => a -> b
data GSelect a b
GSelect :: ByteString -> a -> b -> GSelect a b
gselectTitle :: GSelect a b -> ByteString
gselectAll :: GSelect a b -> a
gselectSelected :: GSelect a b -> b
type TLayerSimple = GLayer [] Stroke
type TPageSimple = GPage Background [] TLayerSimple
type TXournalSimple = GXournal [] TPageSimple
class GStrokeable a
gFromStroke :: GStrokeable a => Stroke -> a
gToStroke :: GStrokeable a => a -> Stroke
class GListable s
gFromList :: GListable s => [a] -> s a
gToList :: GListable s => s a -> [a]
class GBackgroundable b
gFromBackground :: GBackgroundable b => Background -> b
gToBackground :: GBackgroundable b => b -> Background
fromLayer :: (GStrokeable a, GListable s) => Layer -> GLayer s a
fromPage :: (GStrokeable a, GBackgroundable b, GListable s, GListable s') => Page -> GPage b s' (GLayer s a)
class SListable m
chgStreamToList :: (SListable m, GListable s) => m s a -> m [] a
g_title :: Simple Lens (GXournal s a) ByteString
g_pages :: Simple Lens (GXournal s a) (s a)
g_dimension :: Simple Lens (GPage b s a) Dimension
g_background :: Simple Lens (GPage b s a) b
g_layers :: Simple Lens (GPage b s a) (s a)
g_strokes :: Simple Lens (GLayer s a) (s a)
g_bstrokes :: Simple Lens (GLayerBuf b s a) (s a)
g_buffer :: Simple Lens (GLayerBuf b s a) b
g_selectTitle :: Simple Lens (GSelect a b) ByteString
g_selectAll :: Simple Lens (GSelect a b) a
g_selectSelected :: Simple Lens (GSelect a b) b
toLayer :: (GStrokeable a, GListable s) => GLayer s a -> Layer
toNoBufferLayer :: GLayerBuf b s a -> GLayer s a
toPage :: (GStrokeable a, GBackgroundable b, GListable s, GListable s', Functor s') => (b -> Background) -> GPage b s' (GLayer s a) -> Page
toPageFromBuf :: (GStrokeable a, GBackgroundable b, GListable s, GListable s', Functor s') => (b -> Background) -> GPage b s' (GLayerBuf buf s a) -> Page
bkgchange :: (b -> b') -> GPage b s a -> GPage b' s a
mkTLayerSimpleFromLayer :: Layer -> TLayerSimple
mkTPageSimpleFromPage :: Page -> TPageSimple
mkTXournalSimpleFromXournal :: Xournal -> TXournalSimple
layerFromTLayerSimple :: TLayerSimple -> Layer
pageFromTPageSimple :: TPageSimple -> Page
xournalFromTXournalSimple :: TXournalSimple -> Xournal
emptyPageFromOldPage :: GListable s => GPage b s a -> GPage b s a
printLayerStructureInPage :: GListable s => GPage b s (GLayerBuf buf [] a) -> IO ()
instance SListable GXournal
instance SListable (GPage b)
instance SListable GLayer
instance GBackgroundable Background
instance GListable IntMap
instance GListable []
instance GStrokeable Stroke
instance Functor s => Functor (GXournal s)
instance Functor s => Functor (GPage b s)
instance Functor s => Functor (GLayerBuf b s)
instance Functor s => Functor (GLayer s)


module Data.Xournal.BBox

-- | bounding box type
data BBox
BBox :: (Double, Double) -> (Double, Double) -> BBox
bbox_upperleft :: BBox -> (Double, Double)
bbox_lowerright :: BBox -> (Double, Double)
data StrokeBBox
StrokeBBox :: Stroke -> BBox -> StrokeBBox
strokebbox_stroke :: StrokeBBox -> Stroke
strokebbox_bbox :: StrokeBBox -> BBox
type TLayerBBox = GLayer [] StrokeBBox
type TPageBBox = GPage Background [] TLayerBBox
type TXournalBBox = GXournal [] TPageBBox
mkbbox :: [Pair Double Double] -> BBox
mkbboxF :: (Foldable m, Functor m) => m (Double, Double) -> BBox
bboxFromStroke :: Stroke -> BBox
dimToBBox :: Dimension -> BBox

-- | transform BBox
xformBBox :: ((Double, Double) -> (Double, Double)) -> BBox -> BBox
inflate :: BBox -> Double -> BBox
moveBBoxToOrigin :: BBox -> BBox
moveBBoxByOffset :: (Double, Double) -> BBox -> BBox
moveBBoxULCornerTo :: (Double, Double) -> BBox -> BBox
intersectBBox :: BBox -> BBox -> Maybe BBox
unionBBox :: BBox -> BBox -> BBox
data ULMaybe a
Bottom :: ULMaybe a
Middle :: a -> ULMaybe a
Top :: ULMaybe a
newtype IntersectBBox
Intersect :: ULMaybe BBox -> IntersectBBox
unIntersect :: IntersectBBox -> ULMaybe BBox
newtype UnionBBox
Union :: ULMaybe BBox -> UnionBBox
unUnion :: UnionBBox -> ULMaybe BBox
class Maybeable a where type family ElemType a :: *
toMaybe :: Maybeable a => a -> Maybe (ElemType a)
fromMaybe :: Maybeable a => Maybe (ElemType a) -> a
mkStrokeBBoxFromStroke :: Stroke -> StrokeBBox
strokeFromStrokeBBox :: StrokeBBox -> Stroke
instance Eq a => Eq (ULMaybe a)
instance Show a => Show (ULMaybe a)
instance Show BBox
instance Eq BBox
instance Ord BBox
instance Show StrokeBBox
instance Eq StrokeBBox
instance Ord StrokeBBox
instance Show IntersectBBox
instance Eq IntersectBBox
instance Show UnionBBox
instance Eq UnionBBox
instance Maybeable UnionBBox
instance Maybeable IntersectBBox
instance Monoid UnionBBox
instance Monoid IntersectBBox
instance GStrokeable StrokeBBox
instance Serialize StrokeBBox
instance Serialize BBox


module Data.Xournal.Map
type TPageMap = GPage Background IntMap TLayerSimple
type TXournalMap = GXournal [] TPageMap
type TPageBBoxMap = GPage Background IntMap TLayerBBox
type TXournalBBoxMap = GXournal IntMap TPageBBoxMap
type TPageBBoxMapBkg b = GPage b IntMap TLayerBBox
type TXournalBBoxMapBkg b = GXournal IntMap (TPageBBoxMapBkg b)
emptyGXournalMap :: GXournal IntMap a


-- | representing selection of xournal type
module Data.Xournal.Select
newtype SeqZipper a
SZ :: (a, (Seq a, Seq a)) -> SeqZipper a
unSZ :: SeqZipper a -> (a, (Seq a, Seq a))
singletonSZ :: a -> SeqZipper a
lengthSZ :: SeqZipper a -> Int
currIndex :: SeqZipper a -> Int
appendGoLast :: SeqZipper a -> a -> SeqZipper a
chopFirst :: SeqZipper a -> Maybe (SeqZipper a)
moveLeft :: SeqZipper a -> Maybe (SeqZipper a)
moveRight :: SeqZipper a -> Maybe (SeqZipper a)
moveTo :: Int -> SeqZipper a -> Maybe (SeqZipper a)
goFirst :: SeqZipper a -> SeqZipper a
goLast :: SeqZipper a -> SeqZipper a
current :: SeqZipper a -> a
prev :: SeqZipper a -> Maybe a
next :: SeqZipper a -> Maybe a
replace :: a -> SeqZipper a -> SeqZipper a
deleteCurrent :: SeqZipper a -> Maybe (SeqZipper a)
data ZipperSelect a
NoSelect :: [a] -> ZipperSelect a
allelems :: ZipperSelect a -> [a]
Select :: (Maybe :. SeqZipper) a -> ZipperSelect a
zipper :: ZipperSelect a -> (Maybe :. SeqZipper) a
selectFirst :: ZipperSelect a -> ZipperSelect a
instance Traversable ZipperSelect
instance Foldable ZipperSelect
instance Functor ZipperSelect
instance Traversable SeqZipper
instance Foldable SeqZipper
instance Functor SeqZipper
instance GListable ZipperSelect
instance GListable (Maybe :. SeqZipper)
instance Applicative SeqZipper


module Data.Xournal.Buffer
type TLayerBBoxBuf buf = GLayerBuf buf [] StrokeBBox
type TPageBBoxMapBkgBuf bkg buf = GPage bkg ZipperSelect (TLayerBBoxBuf buf)
type TXournalBBoxMapBkgBuf bkg buf = GXournal IntMap (TPageBBoxMapBkgBuf bkg buf)
