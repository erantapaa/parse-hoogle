-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | D-Bus
--   
--   D-Bus protocol library
@package network-dbus
@version 0.0

module Network.DBus.Type
data DBasicType
DTypeByte :: DBasicType
DTypeBoolean :: DBasicType
DTypeInt16 :: DBasicType
DTypeInt32 :: DBasicType
DTypeInt64 :: DBasicType
DTypeUInt16 :: DBasicType
DTypeUInt32 :: DBasicType
DTypeUInt64 :: DBasicType
DTypeDouble :: DBasicType
DTypeString :: DBasicType
DTypeObjectPath :: DBasicType
DTypeSignature :: DBasicType
data DType
DBasicType :: DBasicType -> DType
DTypeArray :: DType -> DType
DTypeStruct :: DType -> [DType] -> DType
DTypeVariant :: DType
DTypeDictEntry :: DBasicType -> DType -> DType
newtype Signature
Signature :: [DType] -> Signature
hasExcessiveNesting :: DType -> Bool
prettyType :: (PrettyType t) => t -> String
instance Typeable Signature
instance Typeable DType
instance Typeable DBasicType
instance Eq Signature
instance Ord Signature
instance Eq DType
instance Ord DType
instance Eq DBasicType
instance Ord DBasicType
instance PrettyType DType
instance PrettyType DBasicType
instance Read DType
instance Show DType
instance Show DBasicType
instance Read Signature
instance Show Signature

module Network.DBus.Value
data Endianness
LittleEndian :: Endianness
BigEndian :: Endianness
class (Eq a, Show a, Typeable a) => DValue a
dtype :: (DValue a) => a -> DType
alignment :: (DValue a) => a -> Bytes
serializer :: (DValue a) => a -> Serializer
deserializer :: (DValue a) => Deserializer a
class (DValue a, Ord a) => DBasicTypedValue a
dbasictype :: (DBasicTypedValue a) => a -> DBasicType
data ObjectPath
mkObjectPath :: (Monad m) => String -> m ObjectPath
getPath :: ObjectPath -> String
data DString
mkDString :: (Monad m) => String -> m DString
mkDString0 :: String -> DString
getString :: DString -> String
data Variant
Variant :: v -> Variant
unVariant :: Variant -> v
fromVariant :: (Typeable a) => Variant -> Maybe a
type Bytes = Int
type Serializer = ReaderT Endianness (StateT Bytes PutM) ()
runSerializer :: Endianness -> Serializer -> ByteString
advanceBy :: Bytes -> Serializer
padTo :: Bytes -> Serializer
type Deserializer a = ReaderT Endianness Get a
runDeserializer :: Endianness -> Deserializer a -> ByteString -> a
skipTo :: Bytes -> Deserializer ()
deserializeAs :: Signature -> Deserializer [Variant]
instance Typeable Variant
instance Typeable DString
instance Typeable ObjectPath
instance Eq DString
instance Ord DString
instance Eq ObjectPath
instance Ord ObjectPath
instance Show Endianness
instance (DValue a, DValue b, DValue c, DValue d, DValue e) => DValue (a, b, c, d, e)
instance (DValue a, DValue b, DValue c, DValue d) => DValue (a, b, c, d)
instance (DValue a, DValue b, DValue c) => DValue (a, b, c)
instance (DValue a, DValue b) => DValue (a, b)
instance (DValue a) => DValue [a]
instance (DBasicTypedValue k, DValue v) => DValue (Map k v)
instance DValue Variant
instance Eq Variant
instance Show Variant
instance DValue Signature
instance DBasicTypedValue Signature
instance DValue DString
instance DBasicTypedValue DString
instance DValue Double
instance DBasicTypedValue Double
instance DValue Int64
instance DBasicTypedValue Int64
instance DValue Int32
instance DBasicTypedValue Int32
instance DValue Int16
instance DBasicTypedValue Int16
instance DValue Word64
instance DBasicTypedValue Word64
instance DValue Word32
instance DBasicTypedValue Word32
instance DValue Word16
instance DBasicTypedValue Word16
instance DValue Word8
instance DBasicTypedValue Word8
instance DValue Char
instance DBasicTypedValue Char
instance DValue Bool
instance DBasicTypedValue Bool
instance DValue ObjectPath
instance DBasicTypedValue ObjectPath
instance Show DString
instance Show ObjectPath

module Network.DBus.Message
data Message
Message :: MessageType -> [Flag] -> Word32 -> Maybe ObjectPath -> Maybe DString -> Maybe DString -> Maybe DString -> Maybe Word32 -> Maybe DString -> Maybe DString -> [Variant] -> Message
mType :: Message -> MessageType
mFlags :: Message -> [Flag]
mSerial :: Message -> Word32
mPath :: Message -> Maybe ObjectPath
mInterface :: Message -> Maybe DString
mMember :: Message -> Maybe DString
mErrorName :: Message -> Maybe DString
mReplySerial :: Message -> Maybe Word32
mDestination :: Message -> Maybe DString
mSender :: Message -> Maybe DString
mBody :: Message -> [Variant]
data MessageType
MethodCall :: MessageType
MethodReturn :: MessageType
Error :: MessageType
Signal :: MessageType
data Flag
NoReplyExpected :: Flag
NoAutoStart :: Flag
dbusProtocolVersion :: Word8
endiannessValue :: Endianness -> Word8
readMessage :: Handle -> IO Message
writeMessage :: Handle -> Message -> IO ()
deserializeMessage :: ByteString -> (Message, ByteString)
serializeMessage :: Message -> ByteString
methodCall :: DString -> DString -> DString -> ObjectPath -> [Variant] -> Message
instance Eq Message
instance Show Message
instance Eq Flag
instance Show Flag
instance Show MessageType
instance Enum MessageType
instance Eq MessageType

module Network.DBus.Connection
data Connection
data ConnectionAddress
Unix :: String -> Maybe String -> ConnectionAddress
addrPath :: ConnectionAddress -> String
addrGuid :: ConnectionAddress -> Maybe String
UnixAbstract :: String -> Maybe String -> ConnectionAddress
addrPath :: ConnectionAddress -> String
addrGuid :: ConnectionAddress -> Maybe String
type Handler = Message -> IO ()
data MatchClause
MatchType :: MessageType -> MatchClause
MatchSender :: DString -> MatchClause
MatchInterface :: DString -> MatchClause
MatchMember :: DString -> MatchClause
MatchPath :: ObjectPath -> MatchClause
MatchDestination :: DString -> MatchClause
MatchArg :: Int -> DString -> MatchClause
type MatchRule = [MatchClause]
connectToBus :: ConnectionAddress -> IO Connection
getSessionBusAddress :: IO (Maybe ConnectionAddress)
getSystemBusAddress :: IO (Maybe ConnectionAddress)
parseAddress :: String -> Maybe ConnectionAddress
sendMessage :: Connection -> Message -> IO Word32
sendAndWait :: Connection -> Message -> IO Message
addHandler :: Connection -> Maybe MatchRule -> Handler -> IO Int
removeHandler :: Connection -> Int -> IO ()
uniqueName :: Connection -> DString
instance Show ConnectionAddress
instance Show MatchClause
