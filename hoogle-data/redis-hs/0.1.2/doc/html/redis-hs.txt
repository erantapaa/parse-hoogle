-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple Redis library for Haskell
--   
--   This package provides access to Redis stores using
--   Data.ByteString.UTF8 for consistent handling of UTF8 encoding. The
--   function set is almost complete.
@package redis-hs
@version 0.1.2


-- | This module processes requests and replies, and contains some utility
--   functions. The methods by which requests are processed are
--   stylistically modified versions of those found in Alexander Bogdanov's
--   <tt>redis</tt> package, which can be found on hackage at
--   <a>http://hackage.haskell.org/package/redis</a> I have found them
--   faster for operations on UTF8 encoded text than <tt>redis</tt>
--   package, but your mileage may vary.
module Database.Redis.Internal
data RedisReply
RedisSingle :: ByteString -> RedisReply
RedisError :: ByteString -> RedisReply
RedisInteger :: Int -> RedisReply
RedisBulk :: [Maybe RedisReply] -> RedisReply

-- | A space-efficient representation of a Word8 vector, supporting many
--   efficient operations. A <a>ByteString</a> contains 8-bit characters
--   only.
--   
--   Instances of Eq, Ord, Read, Show, Data, Typeable
data ByteString :: *

-- | Formats and sends the request
request :: Handle -> [ByteString] -> IO (Maybe RedisReply)

-- | Shorthand for "rn". Redis uses CRLF.
crlf :: String

-- | Not strictly necessary, but can add readability
toUTF8 :: String -> ByteString

-- | Not strictly necessary, but can add readability
fromUTF8 :: ByteString -> String

-- | Turns a list of pair tuples into a list
pairsToList :: [(a, a)] -> [a]
instance Eq RedisReply
instance Show RedisReply


-- | This module corresponds to the transaction commands introduced in
--   Redis 2.0, explained at
--   <a>http://code.google.com/p/redis/wiki/MultiExecCommand</a>
module Database.Redis.Transaction

-- | MULTI, begin a transaction
multi :: Handle -> IO (Maybe RedisReply)

-- | EXEC, execute the transaction
exec :: Handle -> IO (Maybe RedisReply)

module Database.Redis.Hash

-- | Calls <tt>HSET</tt> with <a>String</a> arguments
hashSet :: Handle -> String -> String -> String -> IO (Maybe RedisReply)

-- | Calls <tt>HSET</tt> with <a>ByteString</a> arguments
hashSetB :: Handle -> ByteString -> ByteString -> ByteString -> IO (Maybe RedisReply)

-- | Calls <tt>HGET</tt> with <a>ByteString</a> arguments
hashGet :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | Calls <tt>HGET</tt> with <a>ByteString</a> arguments
hashGetB :: Handle -> ByteString -> ByteString -> IO (Maybe RedisReply)

-- | Calls <tt>HMGET</tt>
--   <a>http://code.google.com/p/redis/wiki/HmgetCommand</a> with a list of
--   <a>String</a>s
hashMultiGet :: Handle -> String -> [String] -> IO (Maybe RedisReply)

-- | Calls <tt>HMSET</tt>
--   <a>http://code.google.com/p/redis/wiki/HmsetCommand</a> with a list of
--   tuples (key, value)
hashMultiSet :: Handle -> String -> [(String, String)] -> IO (Maybe RedisReply)

-- | Calls <tt>HINCRBY</tt> with <a>String</a> and <a>Int</a> arguments
hashIncrementBy :: Handle -> String -> String -> Int -> IO (Maybe RedisReply)

-- | Calls <tt>HEXISTS</tt>
--   (<a>http://code.google.com/p/redis/wiki/HexistsCommand</a>) with
--   <a>String</a> arguments
hashExists :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | Calls <tt>HDEL</tt>
--   (<a>http://code.google.com/p/redis/wiki/HdelCommand</a>) with
--   <a>String</a> arguments
hashDelete :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | Calls <tt>HLEN</tt>
--   (<a>http://code.google.com/p/redis/wiki/HlenCommand</a>) with
--   <a>String</a> arguments
hashLength :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | Calls <tt>HKEYS</tt>
--   (<a>http://code.google.com/p/redis/wiki/HkeysCommand</a>) with a
--   <a>String</a> argument. N.B. despite its name, it returns fields.
hashKeys :: Handle -> String -> IO (Maybe RedisReply)

-- | Calls <tt>HVALS</tt>
--   (<a>http://code.google.com/p/redis/wiki/HvalsCommand</a>) with a
--   <a>String</a> argument.
hashValues :: Handle -> String -> IO (Maybe RedisReply)

-- | Calls <tt>HGETALL</tt>
--   (<a>http://code.google.com/p/redis/wiki/HgetallCommand</a>) with a
--   <a>String</a> argument.
hashGetAll :: Handle -> String -> IO (Maybe RedisReply)

module Database.Redis.SortedSet

-- | ZADD
zSetAdd :: Handle -> String -> String -> String -> IO (Maybe RedisReply)

-- | ZADD
zSetAddB :: Handle -> ByteString -> ByteString -> ByteString -> IO (Maybe RedisReply)

-- | ZREM
zSetRemove :: Handle -> String -> IO (Maybe RedisReply)

-- | ZINCRBY
zSetIncrementBy :: Handle -> String -> Int -> String -> IO (Maybe RedisReply)

-- | ZRANK
zSetRank :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | ZREVRANK
zSetReverseRank :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | ZRANGE (does not yet include WITHSCORES)
zSetRange :: Handle -> String -> Int -> Int -> IO (Maybe RedisReply)

-- | ZREVRANGE (does not yet include WITHSCORES)
zSetReverseRange :: Handle -> String -> Int -> Int -> IO (Maybe RedisReply)

-- | ZRANGEBYSCORE
zSetRangeByScore :: Handle -> String -> Int -> Int -> IO (Maybe RedisReply)

-- | ZCOUNT
zSetCount :: Handle -> String -> Int -> Int -> IO (Maybe RedisReply)

-- | ZCARD
zSetCardinality :: Handle -> String -> IO (Maybe RedisReply)

-- | ZSCORE
zSetScore :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | ZREMRANGEBYRANK
zSetRemRangeByRank :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | ZREMRANGEBYSCORE
zSetRemRangeByScore :: Handle -> String -> Int -> Int -> IO (Maybe RedisReply)

module Database.Redis.Set

-- | SADD
setAdd :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | SADD
setAddB :: Handle -> ByteString -> ByteString -> IO (Maybe RedisReply)

-- | SREM
setRemove :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | SREM
setRemoveB :: Handle -> ByteString -> ByteString -> IO (Maybe RedisReply)

-- | SPOP
setPop :: Handle -> String -> IO (Maybe RedisReply)

-- | SMOVE
setMove :: Handle -> String -> String -> String -> IO (Maybe RedisReply)

-- | SCARD
setCardinality :: Handle -> String -> IO (Maybe RedisReply)

-- | SISMEMBER
setIsMember :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | SISMEMBER
setIsMemberB :: Handle -> ByteString -> ByteString -> IO (Maybe RedisReply)

-- | SINTER
setIntersect :: Handle -> [String] -> IO (Maybe RedisReply)

-- | SINTERSTORE
setIntersectStore :: Handle -> String -> [String] -> IO (Maybe RedisReply)

-- | SUNION
setUnion :: Handle -> [String] -> IO (Maybe RedisReply)

-- | SUNIONSTORE
setUnionStore :: Handle -> String -> [String] -> IO (Maybe RedisReply)

-- | SDIFF
setDiff :: Handle -> [String] -> IO (Maybe RedisReply)

-- | SDIFFSTORE
setDiffStore :: Handle -> String -> [String] -> IO (Maybe RedisReply)

-- | SMEMBERS
setMembers :: Handle -> String -> IO (Maybe RedisReply)

-- | SMEMBERS
setMembersB :: Handle -> ByteString -> IO (Maybe RedisReply)

-- | SRANDMEMBER
setRandMember :: Handle -> String -> IO (Maybe RedisReply)

-- | SRANDMEMBER
setRandMemberB :: Handle -> ByteString -> IO (Maybe RedisReply)

module Database.Redis.List

-- | Calls <tt>RPUSH</tt> with <a>String</a> arguments
listRightPush :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | Calls <tt>RPUSH</tt> with <a>ByteString</a> arguments
listRightPushB :: Handle -> ByteString -> ByteString -> IO (Maybe RedisReply)

-- | Calls <tt>LPUSH</tt> with <a>String</a> arguments
listLeftPush :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | Calls <tt>LPUSH</tt> with <a>ByteString</a> arguments
listLeftPushB :: Handle -> ByteString -> ByteString -> IO (Maybe RedisReply)

-- | Calls <tt>LLEN</tt> with a <a>String</a> argument
listLength :: Handle -> String -> IO (Maybe RedisReply)

-- | Calls <tt>LLEN</tt> with a <a>ByteString</a> argument
listLengthB :: Handle -> ByteString -> IO (Maybe RedisReply)

-- | Calls <tt>LRANGE</tt> with a <a>String</a> argument
listRange :: Handle -> String -> Int -> Int -> IO (Maybe RedisReply)

-- | Calls <tt>LRANGE</tt> with a <a>ByteString</a> argument
listRangeB :: Handle -> ByteString -> Int -> Int -> IO (Maybe RedisReply)

-- | Calls <tt>LINDEX</tt> with <a>String</a> and <a>Int</a> arguments
listIndex :: Handle -> String -> Int -> IO (Maybe RedisReply)

-- | Calls <tt>LINDEX</tt> with <a>ByteString</a> and <a>Int</a> arguments
listIndexB :: Handle -> ByteString -> Int -> IO (Maybe RedisReply)

-- | Calls <tt>LREM</tt> with <a>String</a> and <a>Int</a> arguments. This
--   command deletes values matching the <tt>value</tt> parameter. A
--   negative <a>Int</a> argument deletes starting at the tail and moving
--   towards the head (or from right to left, after the push commands). A
--   positive argument deletes from left to right. Zero deletes all the
--   elements. Returns the number of elements deleted (which should match
--   the number) or 0 on failure.
listRemove :: Handle -> String -> Int -> String -> IO (Maybe RedisReply)

-- | Calls <tt>LREM</tt> with <a>ByteString</a> and <a>Int</a> arguments.
listRemoveB :: Handle -> ByteString -> Int -> ByteString -> IO (Maybe RedisReply)

-- | LTRIM
listTrim :: Handle -> String -> Int -> Int -> IO (Maybe RedisReply)
listSet :: Handle -> String -> Int -> String -> IO (Maybe RedisReply)

-- | LPOP
listHeadPop :: Handle -> String -> IO (Maybe RedisReply)

-- | RPOP
listTailPop :: Handle -> String -> IO (Maybe RedisReply)

-- | BLPOP
listBlockHeadPop :: Handle -> String -> IO (Maybe RedisReply)

-- | BRPOP
listBlockTailPop :: Handle -> String -> IO (Maybe RedisReply)

-- | RPOPLPUSH
listRPopLPush :: Handle -> String -> String -> IO (Maybe RedisReply)


-- | This module has nothing to do with Haskell <tt>String</tt>s; the Redis
--   Command Reference
--   (<a>http://code.google.com/p/redis/wiki/CommandReference</a>)
--   confusingly refers to its simple key/value pairing as strings, even
--   when those strings can be incremented. Unfortunately, I can't think of
--   a better name.
module Database.Redis.String

-- | SET for <tt>String</tt> arguments
--   <a>http://code.google.com/p/redis/wiki/SetCommand</a>
itemSet :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | SET for ByteString input
itemSetB :: Handle -> ByteString -> ByteString -> IO (Maybe RedisReply)

-- | SETNX for <tt>String</tt> arguments
--   <a>http://code.google.com/p/redis/wiki/SetnxCommand</a>
itemSetNX :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | SETEX
itemSetEX :: Handle -> String -> Int -> String -> IO (Maybe RedisReply)

-- | GET for a <tt>String</tt> argument
--   <a>http://code.google.com/p/redis/wiki/GetCommand</a>
itemGet :: Handle -> String -> IO (Maybe RedisReply)

-- | GET for a <a>ByteString</a> argument
itemGetB :: Handle -> ByteString -> IO (Maybe RedisReply)

-- | Calls <tt>MSET</tt>
--   <a>http://code.google.com/p/redis/wiki/MsetCommand</a> with a list of
--   tuples (key, value)
multiSet :: Handle -> [(String, String)] -> IO (Maybe RedisReply)
multiGet :: Handle -> [String] -> IO (Maybe RedisReply)

-- | Calls <tt>MSETNX</tt>
--   (<a>http://code.google.com/p/redis/wiki/MsetnxCommand</a>) with a list
--   of tuples (key, value)
multiSetNX :: Handle -> [(String, String)] -> IO (Maybe RedisReply)

-- | INCR
increment :: Handle -> String -> IO (Maybe RedisReply)

-- | INCRBY
incrementBy :: Handle -> String -> Int -> IO (Maybe RedisReply)

-- | DECR
decrement :: Handle -> String -> IO (Maybe RedisReply)
decrementBy :: Handle -> String -> Int -> IO (Maybe RedisReply)

-- | GETSET for <tt>String</tt> arguments
--   <a>http://code.google.com/p/redis/wiki/GetsetCommand</a>
itemGetSet :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | APPEND for <tt>String</tt> arguments
--   <a>http://code.google.com/p/redis/wiki/AppendCommand</a>
itemAppend :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | SUBSTR
substring :: Handle -> String -> Int -> Int -> IO (Maybe RedisReply)

module Database.Redis.General

-- | Calls <tt>EXISTS</tt>
--   (<a>http://code.google.com/p/redis/wiki/ExistsCommand</a>) with a
--   <a>String</a> argument
keyExists :: Handle -> String -> IO (Maybe RedisReply)

-- | Calls <tt>EXISTS</tt> with a <a>ByteString</a> argument
keyExistsB :: Handle -> ByteString -> IO (Maybe RedisReply)

-- | Calls <tt>DEL</tt>
--   (<a>http://code.google.com/p/redis/wiki/DelCommand</a>) with a list of
--   <a>String</a> arguments.
keyDelete :: Handle -> [String] -> IO (Maybe RedisReply)

-- | Calls <tt>DEL</tt> with a list of <a>ByteString</a> arguments.
keyDeleteB :: Handle -> [ByteString] -> IO (Maybe RedisReply)

-- | Calls <tt>TYPE</tt>
--   (<a>http://code.google.com/p/redis/wiki/TypeCommand</a>) with a
--   <a>String</a> argument.
keyType :: Handle -> String -> IO (Maybe RedisReply)

-- | Calls <tt>TYPE</tt>
--   (<a>http://code.google.com/p/redis/wiki/TypeCommand</a>) with a
--   <a>ByteString</a> argument.
keyTypeB :: Handle -> ByteString -> IO (Maybe RedisReply)

-- | Calls <tt>KEYS</tt>
--   (<a>http://code.google.com/p/redis/wiki/KeysCommand</a>) with a
--   <a>String</a> argument
keys :: Handle -> String -> IO (Maybe RedisReply)

-- | Calls <tt>KEYS</tt> with a <a>ByteString</a> argument
keysB :: Handle -> ByteString -> IO (Maybe RedisReply)

-- | Calls <tt>RANDOMKEY</tt>
--   (<a>http://code.google.com/p/redis/wiki/RandomkeyCommand</a>)
keyRandom :: Handle -> IO (Maybe RedisReply)

-- | Calls <tt>RENAME</tt>
--   (<a>http://code.google.com/p/redis/wiki/RenameCommand</a>) with
--   <a>String</a> arguments.
keyRename :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | Calls <tt>RENAMENX</tt>
--   (<a>http://code.google.com/p/redis/wiki/RenamenxCommand</a>) with
--   <a>String</a> arguments.
keyRenameNX :: Handle -> String -> String -> IO (Maybe RedisReply)

-- | DBSIZE
databaseSize :: Handle -> IO (Maybe RedisReply)
keyTimeToLive :: Handle -> String -> IO (Maybe RedisReply)

-- | EXPIRE
keyExpire :: Handle -> String -> Int -> IO (Maybe RedisReply)

-- | EXPIREAT
keyExpireAt :: Handle -> String -> Int -> IO (Maybe RedisReply)

-- | PERSIST
keyPersist :: Handle -> String -> IO (Maybe RedisReply)
keyMove :: Handle -> String -> Int -> IO (Maybe RedisReply)

-- | FLUSHDB
flushDB :: Handle -> IO (Maybe RedisReply)

-- | FLUSHALL
flushAll :: Handle -> IO (Maybe RedisReply)

-- | Calls <tt>SELECT</tt>
--   (<a>http://code.google.com/p/redis/wiki/SelectCommand</a>) with an
--   <a>Int</a> argument
select :: Handle -> Int -> IO (Maybe RedisReply)

-- | The PING command should return PONG
ping :: Handle -> IO (Maybe RedisReply)

-- | Placeholder for a better-designed function
unwrapReply :: Maybe RedisReply -> [String]


-- | Module containing all the functions necessary to make a connection to
--   an active Redis server.
module Database.Redis.Connection

-- | The number <tt>6379</tt> as a Network <a>PortNumber</a>
defaultPort :: PortNumber

-- | The string <tt>127.0.0.1</tt> as a Network <a>HostName</a>
localhost :: HostName
connect :: HostName -> PortNumber -> IO Handle
disconnect :: Handle -> IO ()

module Database.Redis
