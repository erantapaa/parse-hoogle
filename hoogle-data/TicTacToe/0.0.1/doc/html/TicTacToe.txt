-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A sub-project (exercise) for a functional programming course
--   
--   A sub-project (exercise) for a functional programming course
@package TicTacToe
@version 0.0.1


-- | A player is either player 1 or player 2 <i>(isomorphic to Bool)</i>.
module Data.TicTacToe.Player

-- | A player.
data Player

-- | Folds a player.
player :: x -> x -> Player -> x

-- | Player 1.
player1 :: Player

-- | Player 2.
player2 :: Player

-- | Returns whether or not the player is player 1.
isPlayer1 :: Player -> Bool

-- | Returns whether or not the player is player 2.
isPlayer2 :: Player -> Bool

-- | Switches a player from player 1 to player 2 or vice versa.
alternate :: Player -> Player

-- | Returns a character symbol denoting each player.
toSymbol :: Player -> Char
instance Eq Player
instance Ord Player
instance Enum Player
instance Show Player


-- | A game result is one of
--   
--   <ul>
--   <li>Player 1 wins</li>
--   <li>Player 2 wins</li>
--   <li>Neither player wins (draw)</li>
--   </ul>
module Data.TicTacToe.GameResult

-- | A game result.
data GameResult

-- | Fold a game result.
gameResult :: (Player -> x) -> x -> GameResult -> x

-- | Fold a game result.
playerGameResult :: x -> x -> x -> GameResult -> x

-- | Construct a game result with a win for the given player.
win :: Player -> GameResult

-- | Construct a game result with a win for player 1.
player1Wins :: GameResult

-- | Construct a game result with a win for player 2.
player2Wins :: GameResult

-- | Construct a game result that is a draw.
draw :: GameResult

-- | Returns whether or not player 1 won for the game result.
isPlayer1Wins :: GameResult -> Bool

-- | Returns whether or not player 2 won for the game result.
isPlayer2Wins :: GameResult -> Bool

-- | Returns whether the game result is a draw.
isDraw :: GameResult -> Bool
instance Eq GameResult
instance Show GameResult

module Test.Data.TicTacToe.Player
main :: IO ()
playerTests :: [Test]
instance Arbitrary Player

module Test.Data.TicTacToe.GameResult
main :: IO ()
gameResultTests :: [Test]
instance Arbitrary GameResult


-- | A position is one of the nine places on a tic-tac-toe grid.
module Data.TicTacToe.Position
data Position

-- | North-west (top left).
NW :: Position

-- | North (top centre).
N :: Position

-- | North-east (top right).
NE :: Position

-- | West (middle left).
W :: Position

-- | Centre.
C :: Position

-- | East (middle right)
E :: Position

-- | South-west (bottom left).
SW :: Position

-- | South (bottom centre).
S :: Position

-- | South-east (bottom right).
SE :: Position
instance Eq Position
instance Ord Position
instance Enum Position
instance Bounded Position
instance Show Position

module Test.Data.TicTacToe.Position
main :: IO ()
positionTests :: [Test]
instance Arbitrary Position


-- | A tic-tac-toe board is one of nine positions, each position occupied
--   by either player 1, player 2 or neither and with invariants specific
--   to the rules of tic-tac-toe.
--   
--   For example, the number of positions occupied by player 1 is equal to,
--   or one more, than the positions occupied by player 2.
module Data.TicTacToe.Board
data EmptyBoard

-- | A tic-tac-toe board.
data Board

-- | A finished board is a completed tic-tac-toe game and does not accept
--   any more moves.
data FinishedBoard

-- | Start an empty tic-tac-toe board.
empty :: EmptyBoard

-- | Return the result of a completed tic-tac-toe game.
getResult :: FinishedBoard -> GameResult
class Move from to | from -> to
(-->) :: Move from to => Position -> from -> to
(-?->) :: Position -> MoveResult -> MoveResult

-- | The result of making a move on a tic-tac-toe board.
data MoveResult

-- | Deconstruct a move result.
foldMoveResult :: a -> (Board -> a) -> (FinishedBoard -> a) -> MoveResult -> a

-- | Return the value after function application to the board to keep
--   playing.
keepPlayingOr :: a -> (Board -> a) -> MoveResult -> a

-- | Return the possible board from a move result. A board is returned if
--   the result is to continue play.
keepPlaying :: MoveResult -> Maybe Board
class TakeBack to from | to -> from
takeBack :: TakeBack to from => to -> from
data TakenBack
foldTakenBack :: a -> (Board -> a) -> TakenBack -> a
takenBackBoard :: TakenBack -> Maybe Board

-- | Functions that work on boards that are in play or have completed.
--   
--   This class specifically does not specify moving on a board, since this
--   is illegal on a completed board.
class BoardLike b
whoseTurn :: BoardLike b => b -> Player
whoseNotTurn :: BoardLike b => b -> Player
isEmpty :: BoardLike b => b -> Bool
occupiedPositions :: BoardLike b => b -> Set Position
moves :: BoardLike b => b -> Int
isSubboardOf :: BoardLike b => b -> b -> Bool
isProperSubboardOf :: BoardLike b => b -> b -> Bool
playerAt :: BoardLike b => b -> Position -> Maybe Player
playerAtOr :: BoardLike b => b -> Position -> Player -> Player
isOccupied :: BoardLike b => b -> Position -> Bool
isNotOccupied :: BoardLike b => b -> Position -> Bool
printBoard :: BoardLike b => b -> IO ()

-- | Prints out a board using ASCII notation and substituting the returned
--   string for each position.
printEachPosition :: (Position -> String) -> IO ()
instance Eq FinishedBoard
instance Eq Board
instance Eq TakenBack
instance Eq MoveResult
instance BoardLike FinishedBoard
instance BoardLike Board
instance BoardLike EmptyBoard
instance Show FinishedBoard
instance Show Board
instance TakeBack Board TakenBack
instance TakeBack FinishedBoard Board
instance Show MoveResult
instance Move Board MoveResult
instance Move EmptyBoard Board


-- | Play tic-tac-toe interactively.
module Data.TicTacToe.Interact

-- | Play tic-tac-toe interactively.
tictactoe :: IO ()

module Test.Data.TicTacToe.Board
main :: IO ()
boardTests :: [Test]
instance Arbitrary Board

module Test.Data.TicTacToe
main :: IO ()
tictactoeTests :: [Test]

module Data.TicTacToe
