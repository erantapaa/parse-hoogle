-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Streaming IRC message library using conduits.
--   
--   IRC messages consist of an optional identifying prefix, a command
--   name, and a list of arguments. The <a>irc</a> package provides a
--   low-level decoding and encoding scheme for messages in terms of
--   ByteStrings, but using this relies on matching names of commands as
--   strings, and unpacking this decoded structure yourself. This package
--   takes it a little further, providing an ADT for IRC messages and
--   sources, and conduits which attempt to decode and encode messages
--   appropriately.
--   
--   In addition to providing conduits for automatically handling streaming
--   messages, there are also helper functions for connecting to an IRC
--   server and hooking up conduits to the socket.
@package irc-conduit
@version 0.1.1.2


-- | Conduits for serialising and deserialising IRC messages.
--   
--   The <a>Event</a>, <a>Message</a>, and <a>Source</a> types are
--   parameterised on the underlying representation, and are functors.
--   Decoding and encoding only work in terms of <a>ByteString</a>s, but
--   the generality is provided so that programs using this library can
--   operate in terms of <tt>Text</tt>, or some other more useful
--   representation, with great ease.
module Network.IRC.Conduit
type ChannelName a = a
type NickName a = a
type ServerName a = a
type Reason a = Maybe a
type IsModeSet = Bool
type ModeFlag a = a
type ModeArg a = a
type NumericArg a = a

-- | The target of a message. Will be a nick or channel name.
type Target a = a
type IrcEvent = Event ByteString
type IrcSource = Source ByteString
type IrcMessage = Message ByteString

-- | A decoded IRC message + source.
data Event a
Event :: ByteString -> Source a -> Message a -> Event a

-- | The message as a bytestring.
_raw :: Event a -> ByteString

-- | The source of the message (user, channel, or server).
_source :: Event a -> Source a

-- | The decoded message. This will never be a <a>RawMsg</a>.
_message :: Event a -> Message a

-- | The source of an IRC message.
data Source a

-- | The message comes directly from a user.
User :: (NickName a) -> Source a

-- | The message comes from a user in a channel.
Channel :: (ChannelName a) -> (NickName a) -> Source a

-- | The message comes directly from the server.
Server :: (ServerName a) -> Source a

-- | A decoded IRC message.
data Message a

-- | A message, either from a user or to a channel the client is in. CTCPs
--   are distinguished by starting and ending with a \001 (SOH).
Privmsg :: (Target a) -> (Either CTCPByteString a) -> Message a

-- | Like a privmsg, but should not provoke an automatic response.
Notice :: (Target a) -> (Either CTCPByteString a) -> Message a

-- | Someone has updated their nick.
Nick :: (NickName a) -> Message a

-- | Someone has joined a channel.
Join :: (ChannelName a) -> Message a

-- | Someone has left a channel.
Part :: (ChannelName a) -> (Reason a) -> Message a

-- | Someone has left the network.
Quit :: (Reason a) -> Message a

-- | Someone has set some channel modes or user modes.
Mode :: (Target a) -> IsModeSet -> [ModeFlag a] -> [ModeArg a] -> Message a

-- | Someone has set the topic of a channel.
Topic :: (ChannelName a) -> a -> Message a

-- | The client has been invited to a channel.
Invite :: (ChannelName a) -> (NickName a) -> Message a

-- | Someone has been kicked from a channel.
Kick :: (ChannelName a) -> (NickName a) -> (Reason a) -> Message a

-- | The client has received a server ping, and should send a pong asap.
Ping :: (ServerName a) -> (Maybe (ServerName a)) -> Message a

-- | A pong sent to the named server.
Pong :: (ServerName a) -> Message a

-- | One of the many server numeric responses.
Numeric :: Int -> [NumericArg a] -> Message a

-- | Never produced by decoding, but can be used to send arbitrary
--   bytestrings to the IRC server. Naturally, this should only be used
--   when you are confident that the produced bytestring will be a valid
--   IRC message.
RawMsg :: a -> Message a

-- | A conduit which takes as input bytestrings representing encoded IRC
--   messages, and decodes them to events. If decoding fails, the original
--   bytestring is just passed through.
ircDecoder :: Monad m => Conduit ByteString m (Either ByteString IrcEvent)

-- | Like <a>ircDecoder</a>, but discards messages which could not be
--   decoded.
ircLossyDecoder :: Monad m => Conduit ByteString m IrcEvent

-- | A conduit which takes as input irc messages, and produces as output
--   the encoded bytestring representation.
ircEncoder :: Monad m => Conduit IrcMessage m ByteString

-- | A conduit which rate limits output sent downstream. Awaiting on this
--   conduit will block, even if there is output ready, until the time
--   limit has passed.
floodProtector :: MonadIO m => NominalDiffTime -> IO (Conduit a m a)

-- | Connect to a network server, without TLS, and concurrently run the
--   producer and consumer.
ircClient :: Int -> ByteString -> IO () -> Consumer (Either ByteString IrcEvent) IO () -> Producer IO IrcMessage -> IO ()

-- | Like <a>ircClient</a>, but with TLS.
ircTLSClient :: Int -> ByteString -> IO () -> Consumer (Either ByteString IrcEvent) IO () -> Producer IO IrcMessage -> IO ()

-- | Run the IRC conduits using a provided connection.
ircWithConn :: ((AppData -> IO ()) -> IO ()) -> IO () -> Consumer (Either ByteString IrcEvent) IO () -> Producer IO IrcMessage -> IO ()

-- | Construct a raw message.
rawMessage :: ByteString -> [ByteString] -> IrcMessage

-- | Encode an IRC message into a single bytestring suitable for sending to
--   the server.
toByteString :: IrcMessage -> ByteString
