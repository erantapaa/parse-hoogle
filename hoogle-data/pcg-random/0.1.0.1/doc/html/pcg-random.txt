-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings to the PCG random number generator.
--   
--   PCG is a family of simple fast space-efficient statistically good
--   algorithms for random number generation with better-than-typical
--   cryptographic security.
--   
--   This library implements bindings to the standard C implementation.
--   This includes the standard, unique, fast and single variants in the
--   pcg family. There is a pure implementation that can be used as a
--   generator with the random package as well as a faster primitive api
--   that includes functions for generating common types.
--   
--   The generators in this module are suitable for use in parallel but
--   make sure threads don't share the same generator or things will go
--   horribly wrong.
@package pcg-random
@version 0.1.0.1


-- | Classes for working with random numbers along with utility functions.
--   In a future release this module may disappear and use another module
--   for this functionality.
module System.Random.PCG.Class
class Monad m => Generator g m
uniform1 :: Generator g m => (Word32 -> a) -> g -> m a
uniform2 :: Generator g m => (Word32 -> Word32 -> a) -> g -> m a
class Variate a
uniform :: (Variate a, Generator g m) => g -> m a
uniformR :: (Variate a, Generator g m) => (a, a) -> g -> m a
uniformW8 :: Generator g m => g -> m Word8
uniformW16 :: Generator g m => g -> m Word16
uniformW32 :: Generator g m => g -> m Word32
uniformW64 :: Generator g m => g -> m Word64
uniformI8 :: Generator g m => g -> m Int8
uniformI16 :: Generator g m => g -> m Int16
uniformI32 :: Generator g m => g -> m Int32
uniformI64 :: Generator g m => g -> m Int64
uniformF :: Generator g m => g -> m Float
uniformD :: Generator g m => g -> m Double
uniformBool :: Generator g m => g -> m Bool
wordsTo64Bit :: Integral a => Word32 -> Word32 -> a
wordToBool :: Word32 -> Bool
wordToFloat :: Word32 -> Float
wordsToDouble :: Word32 -> Word32 -> Double

-- | Get a random number from system source. If "<tt>/dev/urandom</tt>" is
--   not found return inferior random number from time.
sysRandom :: IO Word64
instance (Variate a, Variate b, Variate c, Variate d) => Variate (a, b, c, d)
instance (Variate a, Variate b, Variate c) => Variate (a, b, c)
instance (Variate a, Variate b) => Variate (a, b)
instance Variate Int
instance Variate Word
instance Variate Double
instance Variate Float
instance Variate Bool
instance Variate Word64
instance Variate Word32
instance Variate Word16
instance Variate Word8
instance Variate Int64
instance Variate Int32
instance Variate Int16
instance Variate Int8


-- | Fast variant of the PCG random number generator. This module performs
--   around 20% faster than the multiple streams version but produces
--   slightly lower quality (still good) random numbers.
--   
--   See <a>http://www.pcg-random.org</a> for details.
--   
--   <pre>
--   import Control.Monad.ST
--   import System.Random.PCG.Fast
--   
--   three :: [Double]
--   three = runST $ do
--     g &lt;- create
--     a &lt;- uniform g
--     b &lt;- uniform g
--     c &lt;- uniform g
--     return [a,b,c]
--   </pre>
module System.Random.PCG.Fast

-- | State of the random number generator
data Gen s
type GenIO = Gen RealWorld
type GenST = Gen

-- | Create a <a>Gen</a> from a fixed initial seed.
create :: PrimMonad m => m (Gen (PrimState m))

-- | Seed a PRNG with data from the system's fast source of pseudo-random
--   numbers. All the caveats of <a>withSystemRandom</a> apply here as
--   well.
createSystemRandom :: IO GenIO

-- | Initialize a generator a single word.
--   
--   <pre>
--   &gt;&gt;&gt; initialize 0 &gt;&gt;= save
--   FrozenGen 1
--   </pre>
initialize :: PrimMonad m => Word64 -> m (Gen (PrimState m))

-- | Seed with system random number. ("<tt>/dev/urandom</tt>" on Unix-like
--   systems, time otherwise).
withSystemRandom :: PrimMonad m => (Gen (PrimState m) -> m a) -> IO a
class Variate a
uniform :: (Variate a, Generator g m) => g -> m a
uniformR :: (Variate a, Generator g m) => (a, a) -> g -> m a

-- | Advance the given generator n steps in log(n) time. (Note that a
--   "step" is a single random 32-bit (or less) <a>Variate</a>. Data types
--   such as <a>Double</a> or <a>Word64</a> require two "steps".)
--   
--   <pre>
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; replicateM_ 1000 (uniformW32 g) &gt;&gt; uniformW32 g
--   3725702568
--   
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; replicateM_ 500 (uniformD g) &gt;&gt; uniformW32 g
--   3725702568
--   
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; advance 1000 g &gt;&gt; uniformW32 g
--   3725702568
--   </pre>
advance :: PrimMonad m => Word64 -> Gen (PrimState m) -> m ()

-- | Retract the given generator n steps in log(2^64-n) time. This is just
--   <tt>advance (-n)</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; replicateM 3 (uniformW32 g)
--   [2951688802,2698927131,361549788]
--   
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; retract 1 g &gt;&gt; replicateM 3 (uniformW32 g)
--   [954135925,2951688802,2698927131]
--   </pre>
retract :: PrimMonad m => Word64 -> Gen (PrimState m) -> m ()

-- | Immutable state of a random number generator. Suitable for storing for
--   later use.
data FrozenGen

-- | Save the state of a <a>Gen</a> in a <tt>Seed</tt>.
save :: PrimMonad m => Gen (PrimState m) -> m FrozenGen

-- | Restore a <a>Gen</a> from a <tt>Seed</tt>.
restore :: PrimMonad m => FrozenGen -> m (Gen (PrimState m))

-- | Standard initial seed.
seed :: FrozenGen

-- | Generate a new seed using single <a>Word64</a>.
--   
--   <pre>
--   &gt;&gt;&gt; initFrozen 0
--   FrozenGen 1
--   </pre>
initFrozen :: Word64 -> FrozenGen
uniformW8 :: Generator g m => g -> m Word8
uniformW16 :: Generator g m => g -> m Word16
uniformW32 :: Generator g m => g -> m Word32
uniformW64 :: Generator g m => g -> m Word64
uniformI8 :: Generator g m => g -> m Int8
uniformI16 :: Generator g m => g -> m Int16
uniformI32 :: Generator g m => g -> m Int32
uniformI64 :: Generator g m => g -> m Int64
uniformF :: Generator g m => g -> m Float
uniformD :: Generator g m => g -> m Double
uniformBool :: Generator g m => g -> m Bool
instance Typeable FrozenGen
instance Show FrozenGen
instance Eq FrozenGen
instance Ord FrozenGen
instance Storable FrozenGen
instance Data FrozenGen
instance Generic FrozenGen
instance Eq (Gen s)
instance Ord (Gen s)
instance Datatype D1FrozenGen
instance Constructor C1_0FrozenGen
instance RandomGen FrozenGen
instance (PrimMonad m, s ~ PrimState m) => Generator (Gen s) m


-- | Unique variant of the PCG random number generator. Guarantees the
--   sequence to be unique by using the pointer address to select the
--   output sequence.
--   
--   There is no way to freeze the state because then it wouldn't be unique
--   anymore. Also, generators can't be initialized in ST because we don't
--   know what pointer reference they'll get.
--   
--   See <a>http://www.pcg-random.org</a> for details.
--   
--   <pre>
--   import System.Random.PCG.Unique
--   
--   three :: IO [Double]
--   three = do
--     g &lt;- create
--     a &lt;- uniform g
--     b &lt;- uniform g
--     c &lt;- uniform g
--     return [a,b,c]
--   </pre>
module System.Random.PCG.Unique

-- | State of the random number generator
data Gen

-- | Create a <a>Gen</a> from a fixed initial seed.
create :: IO Gen

-- | Seed a PRNG with data from the system's fast source of pseudo-random
--   numbers. All the caveats of <a>withSystemRandom</a> apply here as
--   well.
createSystemRandom :: IO Gen

-- | Create a generator from two words. Note: this is not the same as the
--   two words in a <tt>Seed</tt>.
initialize :: Word64 -> IO Gen

-- | Seed with system random number. ("<tt>/dev/urandom</tt>" on Unix-like
--   systems, time otherwise).
withSystemRandom :: (Gen -> IO a) -> IO a
class Variate a
uniform :: (Variate a, Generator g m) => g -> m a
uniformR :: (Variate a, Generator g m) => (a, a) -> g -> m a

-- | Advance the given generator n steps in log(n) time.
advance :: Word64 -> Gen -> IO ()

-- | Retract the given generator n steps in log(2^64-n) time. This is just
--   <tt>advance (-n)</tt>.
retract :: Word64 -> Gen -> IO ()
uniformW8 :: Generator g m => g -> m Word8
uniformW16 :: Generator g m => g -> m Word16
uniformW32 :: Generator g m => g -> m Word32
uniformW64 :: Generator g m => g -> m Word64
uniformI8 :: Generator g m => g -> m Int8
uniformI16 :: Generator g m => g -> m Int16
uniformI32 :: Generator g m => g -> m Int32
uniformI64 :: Generator g m => g -> m Int64
uniformF :: Generator g m => g -> m Float
uniformD :: Generator g m => g -> m Double
uniformBool :: Generator g m => g -> m Bool
instance Eq Gen
instance Ord Gen
instance Generator Gen IO


-- | Single variant of the PCG random number generator. This module only
--   uses a single stream. See <a>http://www.pcg-random.org</a> for
--   details.
--   
--   <pre>
--   import Control.Monad.ST
--   import System.Random.PCG.Single
--   
--   three :: [Double]
--   three = runST $ do
--     g &lt;- create
--     a &lt;- uniform g
--     b &lt;- uniform g
--     c &lt;- uniform g
--     return [a,b,c]
--   </pre>
module System.Random.PCG.Single

-- | State of the random number generator
data Gen s
type GenIO = Gen RealWorld
type GenST = Gen

-- | Create a <a>Gen</a> from a fixed initial seed.
create :: PrimMonad m => m (Gen (PrimState m))

-- | Seed a PRNG with data from the system's fast source of pseudo-random
--   numbers. All the caveats of <a>withSystemRandom</a> apply here as
--   well.
createSystemRandom :: IO GenIO

-- | Initialize a generator a single word.
--   
--   <pre>
--   &gt;&gt;&gt; initialize 0 &gt;&gt;= save
--   FrozenGen 1876011003808476466
--   </pre>
initialize :: PrimMonad m => Word64 -> m (Gen (PrimState m))

-- | Seed with system random number. ("<tt>/dev/urandom</tt>" on Unix-like
--   systems, time otherwise).
withSystemRandom :: (GenIO -> IO a) -> IO a
class Variate a
uniform :: (Variate a, Generator g m) => g -> m a
uniformR :: (Variate a, Generator g m) => (a, a) -> g -> m a

-- | Advance the given generator n steps in log(n) time. (Note that a
--   "step" is a single random 32-bit (or less) <a>Variate</a>. Data types
--   such as <a>Double</a> or <a>Word64</a> require two "steps".)
--   
--   <pre>
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; replicateM_ 1000 (uniformW32 g) &gt;&gt; uniformW32 g
--   787992099
--   
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; replicateM_ 500 (uniformD g) &gt;&gt; uniformW32 g
--   787992099
--   
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; advance 1000 g &gt;&gt; uniformW32 g
--   787992099
--   </pre>
advance :: PrimMonad m => Word64 -> Gen (PrimState m) -> m ()

-- | Retract the given generator n steps in log(2^64-n) time. This is just
--   <tt>advance (-n)</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; replicateM 3 (uniformW32 g)
--   [1499251125,2252584727,2021901712]
--   
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; retract 1 g &gt;&gt; replicateM 3 (uniformW32 g)
--   [4031155981,1499251125,2252584727]
--   </pre>
retract :: PrimMonad m => Word64 -> Gen (PrimState m) -> m ()
data FrozenGen

-- | Save the state of a <a>Gen</a> in a <tt>Seed</tt>.
save :: PrimMonad m => Gen (PrimState m) -> m FrozenGen

-- | Restore a <a>Gen</a> from a <tt>Seed</tt>.
restore :: PrimMonad m => FrozenGen -> m (Gen (PrimState m))

-- | Standard initial seed.
seed :: FrozenGen

-- | Generate a new seed using single <a>Word64</a>.
--   
--   <pre>
--   &gt;&gt;&gt; initFrozen 0
--   FrozenGen 1876011003808476466
--   </pre>
initFrozen :: Word64 -> FrozenGen
uniformW8 :: Generator g m => g -> m Word8
uniformW16 :: Generator g m => g -> m Word16
uniformW32 :: Generator g m => g -> m Word32
uniformW64 :: Generator g m => g -> m Word64
uniformI8 :: Generator g m => g -> m Int8
uniformI16 :: Generator g m => g -> m Int16
uniformI32 :: Generator g m => g -> m Int32
uniformI64 :: Generator g m => g -> m Int64
uniformF :: Generator g m => g -> m Float
uniformD :: Generator g m => g -> m Double
uniformBool :: Generator g m => g -> m Bool
instance Typeable FrozenGen
instance Show FrozenGen
instance Eq FrozenGen
instance Ord FrozenGen
instance Storable FrozenGen
instance Data FrozenGen
instance Generic FrozenGen
instance Eq (Gen s)
instance Ord (Gen s)
instance Datatype D1FrozenGen
instance Constructor C1_0FrozenGen
instance RandomGen FrozenGen
instance (PrimMonad m, s ~ PrimState m) => Generator (Gen s) m


-- | Standard PCG Random Number Generator with chosen streams. See
--   <a>http://www.pcg-random.org</a> for details.
--   
--   <pre>
--   import Control.Monad.ST
--   import System.Random.PCG
--   
--   three :: [Double]
--   three = runST $ do
--     g &lt;- create
--     a &lt;- uniform g
--     b &lt;- uniform g
--     c &lt;- uniform g
--     return [a,b,c]
--   </pre>
module System.Random.PCG

-- | State of the random number generator
data Gen s

-- | Type alias of <a>Gen</a> specialized to <a>IO</a>.
type GenIO = Gen RealWorld

-- | Type alias of <a>Gen</a> specialized to <tt>ST</tt>. (
type GenST s = Gen s

-- | Create a <a>Gen</a> from a fixed initial <a>seed</a>.
create :: PrimMonad m => m (Gen (PrimState m))

-- | Seed a PRNG with data from the system's fast source of pseudo-random
--   numbers. All the caveats of <a>withSystemRandom</a> apply here as
--   well.
createSystemRandom :: IO GenIO

-- | Initialize a generator with two words.
--   
--   <pre>
--   &gt;&gt;&gt; initialize 0 0 &gt;&gt;= save
--   FrozenGen 6364136223846793006 1
--   </pre>
initialize :: PrimMonad m => Word64 -> Word64 -> m (Gen (PrimState m))

-- | Seed with system random number. ("<tt>/dev/urandom</tt>" on Unix-like
--   systems, time otherwise).
withSystemRandom :: PrimMonad m => (Gen (PrimState m) -> m a) -> IO a
class Variate a
uniform :: (Variate a, Generator g m) => g -> m a
uniformR :: (Variate a, Generator g m) => (a, a) -> g -> m a

-- | Advance the given generator n steps in log(n) time. (Note that a
--   "step" is a single random 32-bit (or less) <a>Variate</a>. Data types
--   such as <a>Double</a> or <a>Word64</a> require two "steps".)
--   
--   <pre>
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; replicateM_ 1000 (uniformW32 g) &gt;&gt; uniformW32 g
--   3640764222
--   
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; replicateM_ 500 (uniformD g) &gt;&gt; uniformW32 g
--   3640764222
--   
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; advance 1000 g &gt;&gt; uniformW32 g
--   3640764222
--   </pre>
advance :: PrimMonad m => Word64 -> Gen (PrimState m) -> m ()

-- | Retract the given generator n steps in log(2^64-n) time. This is just
--   <tt>advance (-n)</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; replicateM 3 (uniformW32 g)
--   [355248013,41705475,3406281715]
--   
--   &gt;&gt;&gt; create &gt;&gt;= \g -&gt; retract 1 g &gt;&gt; replicateM 3 (uniformW32 g)
--   [19683962,355248013,41705475]
--   </pre>
retract :: PrimMonad m => Word64 -> Gen (PrimState m) -> m ()

-- | Immutable snapshot of the state of a <a>Gen</a>.
data FrozenGen

-- | Save the state of a <a>Gen</a> in a <a>FrozenGen</a>.
save :: PrimMonad m => Gen (PrimState m) -> m FrozenGen

-- | Restore a <a>Gen</a> from a <a>FrozenGen</a>.
restore :: PrimMonad m => FrozenGen -> m (Gen (PrimState m))

-- | Fixed seed.
seed :: FrozenGen

-- | Generate a new seed using two <a>Word64</a>s.
--   
--   <pre>
--   &gt;&gt;&gt; initFrozen 0 0
--   FrozenGen 6364136223846793006 1
--   </pre>
initFrozen :: Word64 -> Word64 -> FrozenGen
uniformW8 :: Generator g m => g -> m Word8
uniformW16 :: Generator g m => g -> m Word16
uniformW32 :: Generator g m => g -> m Word32
uniformW64 :: Generator g m => g -> m Word64
uniformI8 :: Generator g m => g -> m Int8
uniformI16 :: Generator g m => g -> m Int16
uniformI32 :: Generator g m => g -> m Int32
uniformI64 :: Generator g m => g -> m Int64
uniformF :: Generator g m => g -> m Float
uniformD :: Generator g m => g -> m Double
uniformBool :: Generator g m => g -> m Bool
instance Typeable FrozenGen
instance Show FrozenGen
instance Eq FrozenGen
instance Ord FrozenGen
instance Data FrozenGen
instance Generic FrozenGen
instance Eq (Gen s)
instance Ord (Gen s)
instance Datatype D1FrozenGen
instance Constructor C1_0FrozenGen
instance RandomGen FrozenGen
instance (PrimMonad m, s ~ PrimState m) => Generator (Gen s) m
instance Storable FrozenGen
