-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | GUI functions as used in the book "The Haskell School of Expression".
--   
--   An alternative implementation of the graphics library used in the book
--   The Haskell School of Expression, by Paul Hudak,
--   &lt;http:<i></i>www.haskell.org<i>soe</i> This library builds on top
--   of Gtk+.
@package soegtk
@version 0.11.1


-- | An alternative implementation of the graphics library used in The
--   Haskell School of Expression, by Paul Hudak, &lt;http:
--   
--   It has exaclty the same interface as the original implementation
--   <a>Graphics.SOE</a>. See the original for an API reference.
module Graphics.SOE.Gtk
runGraphics :: IO () -> IO ()
type Title = String
type Size = (Int, Int)
data Window
openWindow :: Title -> Size -> IO Window
getWindowSize :: Window -> IO Size
clearWindow :: Window -> IO ()
drawInWindow :: Window -> Graphic -> IO ()
drawInWindowNow :: Window -> Graphic -> IO ()
setGraphic :: Window -> Graphic -> IO ()
closeWindow :: Window -> IO ()
openWindowEx :: Title -> Maybe Point -> Maybe Size -> RedrawMode -> IO Window
data RedrawMode
drawGraphic :: RedrawMode
drawBufferedGraphic :: RedrawMode
data Graphic
emptyGraphic :: Graphic
overGraphic :: Graphic -> Graphic -> Graphic
overGraphics :: [Graphic] -> Graphic
data Color
Black :: Color
Blue :: Color
Green :: Color
Cyan :: Color
Red :: Color
Magenta :: Color
Yellow :: Color
White :: Color
withColor :: Color -> Graphic -> Graphic
text :: Point -> String -> Graphic
type Point = (Int, Int)
ellipse :: Point -> Point -> Graphic
shearEllipse :: Point -> Point -> Point -> Graphic
line :: Point -> Point -> Graphic
polygon :: [Point] -> Graphic
polyline :: [Point] -> Graphic
polyBezier :: [Point] -> Graphic
type Angle = Float
arc :: Point -> Point -> Angle -> Angle -> Graphic
data Region
createRectangle :: Point -> Point -> Region
createEllipse :: Point -> Point -> Region
createPolygon :: [Point] -> Region
andRegion :: Region -> Region -> Region
orRegion :: Region -> Region -> Region
xorRegion :: Region -> Region -> Region
diffRegion :: Region -> Region -> Region
drawRegion :: Region -> Graphic
getKey :: Window -> IO Char
getLBP :: Window -> IO Point
getRBP :: Window -> IO Point
data Event
Key :: Char -> Bool -> Event
char :: Event -> Char
isDown :: Event -> Bool
Button :: Point -> Bool -> Bool -> Event
pt :: Event -> Point
isLeft :: Event -> Bool
isDown :: Event -> Bool
MouseMove :: Point -> Event
pt :: Event -> Point
Resize :: Event
Closed :: Event
maybeGetWindowEvent :: Window -> IO (Maybe Event)
getWindowEvent :: Window -> IO Event

-- | 32-bit unsigned integer type
data Word32 :: *
timeGetTime :: IO Word32
word32ToInt :: Word32 -> Int
instance Show Event
instance Eq Color
instance Ord Color
instance Bounded Color
instance Enum Color
instance Ix Color
instance Show Color
instance Read Color
