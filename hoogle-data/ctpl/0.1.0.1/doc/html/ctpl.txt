-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A programming language for text modification.
--   
@package ctpl
@version 0.1.0.1

module Text.CTPL0
data BufferState
BufferState :: String -> Char -> String -> BufferState
leftBehind :: BufferState -> String
thisChar :: BufferState -> Char
rightPending :: BufferState -> String
data RegisterState
RegisterState :: Integer -> [String] -> [Int] -> [Int] -> Bool -> RegisterState
ax :: RegisterState -> Integer
mk :: RegisterState -> [String]
rk :: RegisterState -> [Int]
ck :: RegisterState -> [Int]
cp :: RegisterState -> Bool
data InfoState
InfoState :: AVL (Char, Int) -> InfoState
instrStats :: InfoState -> AVL (Char, Int)
data CTPL0State
CTPL0State :: BufferState -> BufferState -> RegisterState -> InfoState -> CTPL0State
bufferState :: CTPL0State -> BufferState
programState :: CTPL0State -> BufferState
registerState :: CTPL0State -> RegisterState
infoState :: CTPL0State -> InfoState
data Exec a
Succ :: a -> Exec a
Expired :: Exec a
ConfViol :: Exec a
SynViol :: Exec a
newtype CTPL0 a
CTPL0 :: (Int -> CTPL0State -> Exec (a, CTPL0State, Int)) -> CTPL0 a
runCTPL0 :: CTPL0 a -> Int -> CTPL0State -> Exec (a, CTPL0State, Int)
getState :: (CTPL0State -> a) -> CTPL0 a
modState :: (CTPL0State -> CTPL0State) -> CTPL0 ()
consumeTime :: CTPL0 ()
confViol :: CTPL0 a
synViol :: CTPL0 a
modBufferState :: (BufferState -> BufferState) -> CTPL0 ()
modProgramState :: (BufferState -> BufferState) -> CTPL0 ()
modRegisterState :: (RegisterState -> RegisterState) -> CTPL0 ()
walkBuffer :: Int -> BufferState -> BufferState
getInstr :: CTPL0 Char
endOfInstr :: CTPL0 Bool
instrNumArg :: CTPL0 Int
instrDelimArg :: CTPL0 String
getIP :: CTPL0 Int
getCP :: CTPL0 Int
canRelJump :: Int -> CTPL0 Bool
canRelWalk :: Int -> CTPL0 Bool
provided :: CTPL0 a -> CTPL0 Bool -> CTPL0 a
sx :: RegisterState -> Integer
setSX :: Integer -> RegisterState -> RegisterState
singleInstr :: CTPL0 ()
singleCond :: CTPL0 Bool
procInstrs :: CTPL0 ()
evalCTPL0' :: String -> String -> Int -> Exec (String, Int, Integer, Int, [] (Char, Int))
evalCTPL0 :: String -> String -> Int -> Exec String
unetx :: String -> String
appendBeforeETX :: String -> String -> String
instance Show a => Show (Exec a)
instance Monad CTPL0

module Text.CTPL
data Procedure
Procedure :: String -> Instruction -> Int -> Procedure
procName :: Procedure -> String
procInstr :: Procedure -> Instruction
procAddr :: Procedure -> Int
data CTPLState
CTPLState :: [Procedure] -> CTPLState
definedProcs :: CTPLState -> [Procedure]
data Exec a
Succ :: a -> Exec a
NoSuchProc :: String -> Exec a
SyntaxFault :: Exec a
data CTPL a
CTPL :: (CTPLState -> Exec (a, CTPLState, String -> String)) -> CTPL a
runCTPL :: CTPL a -> CTPLState -> Exec (a, CTPLState, String -> String)
getState :: (CTPLState -> a) -> CTPL a
modState :: (CTPLState -> CTPLState) -> CTPL ()
emit :: String -> CTPL ()
getProc :: String -> (Procedure -> a) -> CTPL a
catchEmission :: CTPL () -> CTPL String
discardEmission :: CTPL a -> CTPL a
data NumSource
AX :: Int -> NumSource
CK0 :: Int -> NumSource
Buf :: NumSource -> Int -> NumSource
Const :: Int -> NumSource
Len :: Int -> NumSource
CP :: Int -> NumSource
data Instruction
SetAX :: NumSource -> Instruction
SetCK0 :: NumSource -> Instruction
SetBuf :: NumSource -> NumSource -> Instruction
Call :: String -> Instruction
PopAX :: Instruction
PopCK :: Instruction
PushAX :: Instruction
PushCK :: Instruction
AXToTape :: Instruction
CK0ToTape :: Instruction
AXFromTape :: Instruction
CK0FromTape :: Instruction
PushTape :: Instruction
PopTape :: Instruction
Walk :: NumSource -> Instruction
Remove :: NumSource -> Instruction
Insert :: NumSource -> String -> Instruction
Return :: Instruction
IfThenElse :: Condition -> Instruction -> Instruction -> Instruction
UntilDo :: Condition -> Instruction -> Instruction
Compound :: [Instruction] -> Instruction
data Condition
EqAX :: NumSource -> Condition
EqCK0 :: NumSource -> Condition
LtAX :: NumSource -> Condition
LtCK0 :: NumSource -> Condition
GtAX :: NumSource -> Condition
GtCK0 :: NumSource -> Condition
IsUpper :: NumSource -> Condition
IsLower :: NumSource -> Condition
IsDigit :: NumSource -> Condition
IsEob :: NumSource -> Condition
Negation :: Condition -> Condition
EqCh :: NumSource -> [Char] -> Condition
allocProcs :: Int -> [Procedure] -> CTPL [Procedure]
dumpIncop :: String -> Int -> CTPL ()
dumpAddr :: Int -> CTPL ()
predictSpace :: Instruction -> CTPL Int
splitStr :: String -> [String]
arepl :: Int -> [Char]
dumpInstr :: Instruction -> CTPL ()
dumpCond :: Condition -> String -> CTPL String
compile :: [Procedure] -> Instruction -> Exec String
multiParse :: ChParser m => m ([Procedure], [Instruction])
parseInstr :: ChParser m => m Instruction
parseString :: ChParser m => m String
parseReturn :: ChParser m => m Instruction
parseInsert :: ChParser m => m Instruction
parseRemove :: ChParser m => m Instruction
parseWalk :: ChParser m => m Instruction
parseCall :: ChParser m => m Instruction
parseAssignment :: ChParser m => m Instruction
parseNumSource :: ChParser m => m NumSource
parseProc :: ChParser m => m Procedure
parseIf :: ChParser m => m Instruction
parseLoop :: ChParser m => m Instruction
parseFor :: ChParser m => m Instruction
parseCond :: ChParser m => m Condition
parse :: String -> [] ([Procedure], [Instruction])
compileCTPL :: String -> Exec String
evalCTPL :: String -> String -> Int -> Exec String
instance Show a => Show (Exec a)
instance Show NumSource
instance Show Condition
instance Show Instruction
instance Monad CTPL
instance Monad Exec
