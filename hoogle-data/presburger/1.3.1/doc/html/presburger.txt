-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A decision procedure for quantifier-free linear arithmetic.
--   
@package presburger
@version 1.3.1


-- | This module implements a decision procedure for quantifier-free linear
--   arithmetic. The algorithm is based on the following paper:
--   
--   An Online Proof-Producing Decision Procedure for Mixed-Integer Linear
--   Arithmetic by Sergey Berezin, Vijay Ganesh, and David L. Dill
module Data.Integer.SAT

-- | A collection of propositions.
data PropSet

-- | An empty collection of propositions.
noProps :: PropSet

-- | Extract a model from a consistent set of propositions. Returns
--   <a>Nothing</a> if the assertions have no model. If a variable does not
--   appear in the assignment, then it is 0 (?).
checkSat :: PropSet -> Maybe [(Int, Integer)]

-- | Add a new proposition to an existing collection.
assert :: Prop -> PropSet -> PropSet

-- | The type of proposition.
data Prop
PTrue :: Prop
PFalse :: Prop
(:||) :: Prop -> Prop -> Prop
(:&&) :: Prop -> Prop -> Prop
Not :: Prop -> Prop
(:==) :: Expr -> Expr -> Prop
(:/=) :: Expr -> Expr -> Prop
(:<) :: Expr -> Expr -> Prop
(:>) :: Expr -> Expr -> Prop
(:<=) :: Expr -> Expr -> Prop
(:>=) :: Expr -> Expr -> Prop

-- | The type of integer expressions. Variable names must be non-negative.
data Expr

-- | Addition
(:+) :: Expr -> Expr -> Expr

-- | Subtraction
(:-) :: Expr -> Expr -> Expr

-- | Multiplication by a constant
(:*) :: Integer -> Expr -> Expr

-- | Negation
Negate :: Expr -> Expr

-- | Variable
Var :: Name -> Expr

-- | Constant
K :: Integer -> Expr

-- | A conditional expression
If :: Prop -> Expr -> Expr -> Expr

-- | Division, rounds down
Div :: Expr -> Integer -> Expr

-- | Non-negative remainder
Mod :: Expr -> Integer -> Expr
data BoundType
Lower :: BoundType
Upper :: BoundType

-- | Computes bounds on the expression that are compatible with the model.
--   Returns <a>Nothing</a> if the bound is not known.
getExprBound :: BoundType -> Expr -> PropSet -> Maybe Integer

-- | Compute the range of possible values for an expression. Returns
--   <a>Nothing</a> if the bound is not known.
getExprRange :: Expr -> PropSet -> Maybe [Integer]
data Name
toName :: Int -> Name
fromName :: Name -> Maybe Int
allSolutions :: PropSet -> [Solutions]
slnCurrent :: Solutions -> [(Int, Integer)]
slnNextVal :: Solutions -> Maybe Solutions
slnNextVar :: Solutions -> Maybe Solutions
slnEnumerate :: Solutions -> [Solutions]
dotPropSet :: PropSet -> Doc
sizePropSet :: PropSet -> (Integer, Integer, Integer)
allInerts :: PropSet -> [Inerts]
ppInerts :: Inerts -> Doc
iPickBounded :: BoundType -> [Bound] -> Maybe Integer
data Bound

-- | The integer is strictly positive
Bound :: Integer -> Term -> Bound

-- | A constant term.
tConst :: Integer -> Term
instance Show BoundType
instance Show a => Show (Answer a)
instance Read Name
instance Show Name
instance Eq Name
instance Ord Name
instance Read Expr
instance Show Expr
instance Read Prop
instance Show Prop
instance Eq Term
instance Ord Term
instance Show Bound
instance Show Inerts
instance Show Solutions
instance Show RW
instance Show PropSet
instance Show Term
instance Applicative S
instance Functor S
instance MonadPlus S
instance Alternative S
instance Monad S
instance Applicative Answer
instance Functor Answer
instance MonadPlus Answer
instance Alternative Answer
instance Monad Answer
