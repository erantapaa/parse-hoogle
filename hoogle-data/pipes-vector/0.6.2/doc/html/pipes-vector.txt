-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Various proxies for streaming data into vectors
--   
@package pipes-vector
@version 0.6.2


-- | Pipes for interfacing with <a>Data.Vector</a>.
--   
--   Note that this only provides functionality for building
--   <tt>Vectors</tt> from Pipes; as <tt>Vectors</tt> are <tt>Foldable</tt>
--   the inverse can be accomplished with "Pipes.each".
module Pipes.Vector

-- | Consume items from a Pipe and place them into a vector
--   
--   For efficient filling, the vector is grown geometrically up to a
--   maximum chunk size.
toVector :: (PrimMonad m, MVector (Mutable v) e) => Consumer' e (ToVector v e m) r

-- | Extract and freeze the constructed vector
runToVectorP :: (PrimMonad m, Vector v e) => Proxy a' a b' b (ToVector v e m) r -> Proxy a' a b' b m (v e)
runToVector :: (PrimMonad m, Vector v e) => ToVector v e m r -> m (v e)
fromProducer :: (Vector v e, PrimMonad m) => Producer e (ToVector v e m) r -> m (v e)
data ToVector v e m r
instance Functor m => Functor (ToVector v e m)
instance (Monad m, Functor m) => Applicative (ToVector v e m)
instance Monad m => Monad (ToVector v e m)
instance MonadIO m => MonadIO (ToVector v e m)
instance MonadPrim m => MonadPrim (ToVector v e m)
instance MonadPrim m => MonadPrim (Proxy a' a b' b m)
instance PrimMonad m => PrimMonad (Proxy a' a b' b m)
instance PrimMonad m => PrimMonad (ToVector v e m)
instance MonadTrans (ToVector v e)
