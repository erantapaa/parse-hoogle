-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Sets and functions-as-relations in the type system
--   
--   Type classes can express sets and functions on the type level, but
--   they are not first-class. This package expresses type-level sets and
--   functions as <i>types</i> instead.
--   
--   Instances are replaced by value-level proofs which can be directly
--   manipulated; this makes quite a bit of (constructive) set theory
--   expressible; for example, we have:
--   
--   <ul>
--   <li>Subsets and extensional set equality</li>
--   <li>Unions (binary or of sets of sets), intersections, cartesian
--   products, powersets, and a sort of dependent sum and product</li>
--   <li>Functions and their composition, images, preimages,
--   injectivity</li>
--   </ul>
--   
--   The proposition-types (derived from the <a>:=:</a> equality type)
--   aren't meaningful purely by convention; they relate to the rest of
--   Haskell as follows: A proof of <tt>A :=: B</tt> gives us a safe
--   coercion operator <tt>A -&gt; B</tt> (while the logic is inevitably
--   inconsistent <i>at compile-time</i> since <a>undefined</a> proves
--   anything, I think that we still have the property that if the
--   <a>Refl</a> value is successfully pattern-matched, then the two
--   parameters in its type are actually equal).
@package type-settheory
@version 0.1.3.1

module Data.Typeable.Extras
dynEq :: (Typeable a, Typeable b, Eq b) => a -> b -> Bool
dynCompare :: (Typeable b, Typeable a, Ord b) => a -> b -> Ordering

module Type.Dummies

-- | "Kind-cast" <tt> (* -&gt; *) </tt> to <tt>*</tt>
data Lower a :: (* -> *)

-- | "Kind-cast" <tt> ((* -&gt; *) -&gt; *) </tt> to <tt> (* -&gt; *)
--   </tt>. Also lower elements using <a>Lower</a>.
data Lower1 a :: ((* -> *) -> *) :: * -> *
LowerElement :: u x -> Lower1 u (Lower x)

-- | "Kind-cast" <tt> (((* -&gt; *) -&gt; *) -&gt; *) </tt> to <tt> ((*
--   -&gt; *) -&gt; *) </tt>. Also lower elements using <a>Lower1</a>.
data Lower2 a :: (((* -> *) -> *) -> *) :: (* -> *) -> *
Lower1Element :: u x -> Lower2 u (Lower1 x)

-- | "Kind-cast" <tt> ((((* -&gt; *) -&gt; *) -&gt; *) -&gt; *) </tt> to
--   <tt> (((* -&gt; *) -&gt; *) -&gt; *) </tt>. Also lower elements using
--   <a>Lower2</a>.
data Lower3 a :: ((((* -> *) -> *) -> *) -> *) :: ((* -> *) -> *) -> *
Lower2Element :: u x -> Lower3 u (Lower2 x)

-- | Pair of types of kind <tt> (* -&gt; *) </tt>
data PAIR a :: (* -> *) b :: (* -> *) x

-- | Pair of types of kind <tt> ((* -&gt; *) -&gt; *) </tt>
data PAIR1 a :: ((* -> *) -> *) b :: ((* -> *) -> *) x :: (* -> *)

-- | Pair of types of kind <tt> (((* -&gt; *) -&gt; *) -&gt; *) </tt>
data PAIR2 a :: (((* -> *) -> *) -> *) b :: (((* -> *) -> *) -> *) x :: ((* -> *) -> *)

-- | Pair of types of kind <tt> ((((* -&gt; *) -&gt; *) -&gt; *) -&gt; *)
--   </tt>
data PAIR3 a :: ((((* -> *) -> *) -> *) -> *) b :: ((((* -> *) -> *) -> *) -> *) x :: (((* -> *) -> *) -> *)
data Bool0
data Bool1
data BOOL :: * -> *
Bool0 :: BOOL Bool0
Bool1 :: BOOL Bool1
elimBOOL :: BOOL a -> r Bool0 -> r Bool1 -> r a
kelimBOOL :: BOOL a -> r -> r -> r


-- | Propositions as types (of kind <tt>*</tt>), proofs as values
module Type.Logic
newtype Falsity
Falsity :: (forall a. a) -> Falsity
elimFalsity :: Falsity -> forall a. a
data Truth
TruthProof :: Truth
type Not a = a -> Falsity

-- | This class collects lemmas. It plays no foundational role.
class Fact a
auto :: Fact a => a
class Decidable a
decide :: Decidable a => Either (Not a) a

-- | Existential quantification
data Ex p
Ex :: p b -> Ex p
exElim :: (forall b. p b -> r) -> Ex p -> r

-- | Universal quantification
newtype All p
All :: (forall b. p b) -> All p
allElim :: All p -> forall b. p b

-- | Unique existence
data ExUniq p
ExUniq :: p b -> (forall b'. p b' -> b :=: b') -> ExUniq p
type COr r a b = Cont r (Either a b)
lem :: COr r (a -> r) a
elimCor :: COr r a b -> (a -> r) -> (b -> r) -> r
class Decidable1 s
decide1 :: Decidable1 s => Either (Not (s a)) (s a)
class Finite s
enum :: Finite s => [Ex s]
instance [incoherent] Typeable Truth
instance [incoherent] Typeable Falsity
instance [incoherent] Typeable2 :=:
instance [incoherent] Show Truth
instance [incoherent] Finite s => Decidable (Ex s)
instance [incoherent] Show (a :=: b)
instance [incoherent] Fact (ExUniq p -> p b -> p b' -> b :=: b')
instance [incoherent] Fact (ExUniq p -> Ex p)
instance [incoherent] Fact (All p -> p b)
instance [incoherent] Fact (p a) => Fact (Ex p)
instance [incoherent] Decidable a => Decidable (Not a)
instance [incoherent] (Decidable a, Decidable b) => Decidable (a -> b)
instance [incoherent] (Decidable a, Decidable b) => Decidable (Either a b)
instance [incoherent] (Decidable a, Decidable b) => Decidable (a, b)
instance [incoherent] Decidable Truth
instance [incoherent] Decidable Falsity
instance [incoherent] Fact (a -> Not (Not a))
instance [incoherent] (Fact (a -> c), Fact (b -> c)) => Fact (Either a b -> c)
instance [incoherent] Fact (b -> Either a b)
instance [incoherent] Fact (a -> Either a b)
instance [incoherent] (Fact a, Fact b) => Fact (a, b)
instance [incoherent] Fact ((a, b) -> b)
instance [incoherent] Fact ((a, b) -> a)
instance [incoherent] Fact (Falsity -> a)
instance [incoherent] Fact Truth
instance [incoherent] Typeable a => Show (a -> Falsity)


-- | <ul>
--   <li>Sets are encoded as certain types of kind <tt>* -&gt; *</tt></li>
--   <li>A value of type <tt>S X</tt> is a proof that the type <tt>X</tt>
--   is a member of <tt>S</tt></li>
--   </ul>
module Type.Set
type :∈: a set = set a

-- | Represents a proof that <tt>set1</tt> is a subset of <tt>set2</tt>
data (:⊆:) set1 :: (* -> *) set2 :: (* -> *)
Subset :: (forall a. a :∈: set1 -> a :∈: set2) -> set1 :⊆: set2

-- | Coercion from subset to superset
scoerce :: (set1 :⊆: set2) -> a :∈: set1 -> a :∈: set2
type Subset = :⊆:

-- | Extensional equality of sets
data (:==:) set1 :: (* -> *) set2 :: (* -> *)
SetEq :: (set1 :⊆: set2) -> (set2 :⊆: set1) -> :==:

-- | Coercion using a set equality
ecoerce :: (s1 :==: s2) -> a :∈: s1 -> a :∈: s2

-- | Coercion using a set equality (flipped)
ecoerceFlip :: (s1 :==: s2) -> a :∈: s2 -> a :∈: s1
subsetRefl :: s :⊆: s
subsetTrans :: s1 :⊆: s2 -> s2 :⊆: s3 -> s1 :⊆: s3
setEqRefl :: s :==: s
setEqSym :: s1 :==: s2 -> s2 :==: s1
setEqTrans :: s1 :==: s2 -> s2 :==: s3 -> s1 :==: s3
type Singleton a = :=: a

-- | Binary union
data (:∪:) s1 :: (* -> *) s2 :: (* -> *) :: * -> *
Union :: Either (a :∈: s1) (a :∈: s2) -> (s1 :∪: s2) a
elimUnion :: a :∈: (s1 :∪: s2) -> Either (a :∈: s1) (a :∈: s2)
type Union = :∪:
unionL :: s1 :⊆: (s1 :∪: s2)
unionR :: s2 :⊆: (s1 :∪: s2)
unionMinimal :: s1 :⊆: t -> s2 :⊆: t -> (s1 :∪: s2) :⊆: t
unionIdempotent :: (s :∪: s) :==: s

-- | Binary intersection
data (:∩:) s1 :: (* -> *) s2 :: (* -> *) :: * -> *
Inter :: a :∈: s1 -> a :∈: s2 -> (s1 :∩: s2) a
elimInter :: a :∈: (s1 :∩: s2) -> (a :∈: s1, a :∈: s2)
interFst :: (s1 :∩: s2) :⊆: s1
interSnd :: (s1 :∩: s2) :⊆: s2
type Inter = :∩:
interMaximal :: t :⊆: s1 -> t :⊆: s2 -> t :⊆: (s1 :∩: s2)
interIdempotent :: (s :∩: s) :==: s

-- | Union of a family
data Unions fam :: (* -> *) :: * -> *
Unions :: Lower s :∈: fam -> a :∈: s -> Unions fam a
elimUnions :: Unions fam a -> (forall s. Lower s :∈: fam -> a :∈: s -> r) -> r

-- | Dependent sum
data Σ fam :: (* -> *) :: * -> *
Σ :: Lower s :∈: fam -> a :∈: s -> Σ fam (Lower s, a)
type DependentSum = Σ

-- | Intersection of a family
data Inters fam :: (* -> *) :: * -> *
Inters :: (forall s. (Lower s) :∈: fam -> a :∈: s) -> Inters fam a
elimInters :: Inters fam a -> (Lower s) :∈: fam -> s a

-- | Complement
data Complement s :: (* -> *) :: * -> *
Complement :: Not (a :∈: s) -> Complement s a
elimComplement :: a :∈: Complement s -> Not (a :∈: s)
type Disjoint s1 s2 = (s1 :∩: s2) :⊆: Empty
complContradiction :: Not (s a, Complement s a)
complEmpty :: Disjoint s (Complement s)
complMaximal :: Disjoint s t -> (t :⊆: Complement s)

-- | Set difference
data Diff s :: (* -> *) t :: (* -> *) :: * -> *
Diff :: a :∈: s -> Not (a :∈: t) -> Diff s t a
elimDiff :: a :∈: Diff s t -> (a :∈: s, Not (a :∈: t))

-- | Binary products
data (:×:) s1 :: (* -> *) s2 :: (* -> *) :: * -> *
(:×:) :: a :∈: s1 -> b :∈: s2 -> (s1 :×: s2) (a, b)
type Prod = :×:
fstPrf :: (a, b) :∈: (s1 :×: s2) -> a :∈: s1
sndPrf :: (a, b) :∈: (s1 :×: s2) -> b :∈: s2

-- | Product is monotonic wrt. subset inclusion
prodMonotonic :: s1 :⊆: t1 -> s2 :⊆: t2 -> (s1 :×: s2) :⊆: (t1 :×: t2)

-- | Empty set (barring cheating with <a>undefined</a>)
data Empty :: * -> *
Empty :: (forall b. b) -> Empty a
elimEmpty :: Empty a -> b
emptySubset :: Empty :⊆: s

-- | Set of <i>all</i> types of kind *
data Univ :: * -> *
Univ :: Univ a
univSubset :: s :⊆: Univ
data FunctionType :: * -> *
FunctionType :: FunctionType (a -> b)
functionType :: (a -> b) :∈: FunctionType
data KleisliType m :: * -> *
KleisliType :: KleisliType m (a -> m b)
kleisliType :: (a -> m b) :∈: (KleisliType m)
data CoKleisliType w :: * -> *
CoKleisliType :: CoKleisliType w (w a -> b)
coKleisliType :: (w a -> b) :∈: (CoKleisliType w)
data ShowType :: * -> *
ShowType :: ShowType a

-- | Example application
getShow :: a :∈: ShowType -> a -> String
data ReadType :: * -> *
ReadType :: ReadType a
data EqType :: * -> *
EqType :: EqType a
getEq :: a :∈: EqType -> a -> a -> Bool
data OrdType :: * -> *
OrdType :: OrdType a
getCompare :: a :∈: OrdType -> a -> a -> Ordering
data EnumType :: * -> *
EnumType :: EnumType a
data BoundedType :: * -> *
BoundedType :: BoundedType a
data NumType :: * -> *
NumType :: NumType a
data IntegralType :: * -> *
IntegralType :: IntegralType a
data MonoidType :: * -> *
MonoidType :: MonoidType a
data FractionalType :: * -> *
FractionalType :: FractionalType a
data TypeableType :: * -> *
TypeableType :: TypeableType a
data DataType :: * -> *
DataType :: DataType a
data FunctorType :: * -> *
FunctorType :: FunctorType (Lower a)
getFmap :: Lower f :∈: FunctorType -> (a -> b) -> (f a -> f b)
data MonadType :: * -> *
MonadType :: MonadType (Lower a)
data MonadPlusType :: * -> *
MonadPlusType :: MonadPlusType (Lower a)
data ApplicativeType :: * -> *
ApplicativeType :: ApplicativeType (Lower a)

-- | Membership of a set in a set representing a set of sets
type ::∈: a set = set (Lower a)

-- | Powerset
data Powerset u :: (* -> *) :: * -> *
Powerset :: s :⊆: u -> Powerset u (Lower s)
powersetWholeset :: u ::∈: Powerset u
powersetEmpty :: Empty ::∈: Powerset u
powersetUnion :: s1 ::∈: Powerset u -> s2 ::∈: Powerset u -> (s1 :∪: s2) ::∈: Powerset u
powersetInter :: s1 ::∈: Powerset u -> s2 ::∈: Powerset u -> (s1 :∩: s2) ::∈: Powerset u
powersetMonotonic :: (u1 :⊆: u2) -> s ::∈: Powerset u1 -> s ::∈: Powerset u2
powersetClosedDownwards :: (s1 :⊆: s2) -> s2 ::∈: Powerset u -> s1 ::∈: Powerset u
autosubset :: Fact (s :⊆: t) => s :⊆: t
autoequality :: Fact (s :==: t) => s :==: t
data ProofSet s :: (* -> *) :: * -> *
ProofSet :: s x -> ProofSet s (s x)

-- | Unique existence, unlowered
data ExUniq1 p :: ((* -> *) -> *)
ExUniq1 :: p b -> (forall b'. p b' -> b :==: b') -> ExUniq1 p

-- | <tt>V s</tt> is the sum of all types <tt>x</tt> such that <tt>s x</tt>
--   is provable.
data V s :: (* -> *)
V :: s x -> x -> V s
liftEq :: (s :⊆: EqType) -> (s :⊆: TypeableType) -> (V s -> V s -> Bool)
liftCompare :: (s :⊆: OrdType) -> (s :⊆: TypeableType) -> (V s -> V s -> Ordering)
liftShowsPrec :: Typeable1 s => (s :⊆: ShowType) -> (s :⊆: TypeableType) -> (Int -> V s -> ShowS)
instance [incoherent] Fact (s2 :⊆: (s1 :∪: s2))
instance [incoherent] Fact (s1 :⊆: (s1 :∪: s2))
instance [incoherent] Fact ((s1 :∩: s2) :⊆: s2)
instance [incoherent] Fact ((s1 :∩: s2) :⊆: s1)
instance [incoherent] Fact ((w a -> b) :∈: CoKleisliType w)
instance [incoherent] Fact ((a -> m b) :∈: KleisliType m)
instance [incoherent] Fact ((a -> b) :∈: FunctionType)
instance [incoherent] Fact ((s1 :⊆: t) -> (s2 :⊆: t) -> (s1 :∪: s2) :⊆: t)
instance [incoherent] Fact ((t :⊆: s1) -> (t :⊆: s2) -> t :⊆: (s1 :∩: s2))
instance [incoherent] Fact ((u1 :⊆: u2) -> (s ::∈: Powerset u1) -> s ::∈: Powerset u2)
instance [incoherent] Fact ((s1 :⊆: s2) -> (s2 ::∈: Powerset u) -> s1 ::∈: Powerset u)
instance [incoherent] Fact (Disjoint s t -> t :⊆: Complement s)
instance [incoherent] Fact (s :⊆: Univ)
instance [incoherent] Fact ((s1 :==: s2) -> (s2 :==: s3) -> s1 :==: s3)
instance [incoherent] Fact ((s1 :==: s2) -> s2 :==: s1)
instance [incoherent] Fact (s :==: s)
instance [incoherent] Fact ((s1 :⊆: s2) -> (s2 :⊆: s3) -> s1 :⊆: s3)
instance [incoherent] Fact (s :⊆: s)
instance [incoherent] Fact ((s1 :==: s2) -> (a :∈: s2) -> a :∈: s1)
instance [incoherent] Fact ((s1 :==: s2) -> (a :∈: s1) -> a :∈: s2)
instance [incoherent] Fact (Empty :⊆: s)
instance [incoherent] Fact (Empty a -> b)
instance [incoherent] Fact (Not (s a, Complement s a))
instance [incoherent] Fact (Disjoint s (Complement s))
instance [incoherent] Fact ((s1 :⊆: t1) -> (s2 :⊆: t2) -> (s1 :×: s2) :⊆: (t1 :×: t2))
instance [incoherent] Fact (((a, b) :∈: (s1 :×: s2)) -> b :∈: s2)
instance [incoherent] Fact (((a, b) :∈: (s1 :×: s2)) -> a :∈: s1)
instance [incoherent] (Fact (s :⊆: OrdType), Fact (s :⊆: TypeableType), Eq (V s)) => Ord (V s)
instance [incoherent] (Fact (s :⊆: EqType), Fact (s :⊆: TypeableType)) => Eq (V s)
instance [incoherent] Fact (MonadPlusType :⊆: MonadType)
instance [incoherent] Fact (IntegralType :⊆: NumType)
instance [incoherent] Fact (NumType :⊆: EqType)
instance [incoherent] Fact (OrdType :⊆: EqType)
instance [incoherent] Applicative a => Fact (Lower a :∈: ApplicativeType)
instance [incoherent] MonadPlus a => Fact (Lower a :∈: MonadPlusType)
instance [incoherent] Monad a => Fact (Lower a :∈: MonadType)
instance [incoherent] Functor a => Fact (Lower a :∈: FunctorType)
instance [incoherent] Data a => Fact (a :∈: DataType)
instance [incoherent] Typeable a => Fact (a :∈: TypeableType)
instance [incoherent] Fractional a => Fact (a :∈: FractionalType)
instance [incoherent] Monoid a => Fact (a :∈: MonoidType)
instance [incoherent] Integral a => Fact (a :∈: IntegralType)
instance [incoherent] Num a => Fact (a :∈: NumType)
instance [incoherent] Bounded a => Fact (a :∈: BoundedType)
instance [incoherent] Enum a => Fact (a :∈: EnumType)
instance [incoherent] Ord a => Fact (a :∈: OrdType)
instance [incoherent] Eq a => Fact (a :∈: EqType)
instance [incoherent] Read a => Fact (a :∈: ReadType)
instance [incoherent] Show a => Fact (a :∈: ShowType)
instance [incoherent] Fact ((Lower s :∈: fam) -> Inters fam :⊆: s)
instance [incoherent] Fact ((Lower s :∈: fam) -> s :⊆: Unions fam)
instance [incoherent] (Fact (t :⊆: s1), Fact (t :⊆: s2)) => Fact (t :⊆: (s1 :∩: s2))
instance [incoherent] (Fact (s1 :⊆: t), Fact (s2 :⊆: t)) => Fact ((s1 :∪: s2) :⊆: t)
instance [incoherent] Fact (a :∈: set) => Fact (Singleton a :⊆: set)
instance [incoherent] Fact (Singleton a a)
instance [incoherent] Fact ((set1 :⊆: set2) -> (a :∈: set1) -> a :∈: set2)


-- | Notes
--   
--   <ul>
--   <li>Functions are coded as functional relations (in particular,
--   functions are sets)</li>
--   <li>Extensional equality of functions coincedes with extensional
--   equality of sets.</li>
--   </ul>
module Type.Function

-- | Existential quantification over the first component of a pair
data ExSnd f :: (* -> *) a :: * :: *
ExSnd :: (a, ex) :∈: f -> ExSnd f a

-- | Totality
type Total dom f = forall a :: *. a :∈: dom -> ExSnd f a

-- | Single-valuedness (CPS)
type Sval f = forall a b1 b2 r. (a, b1) :∈: f -> (a, b2) :∈: f -> (b1 ~ b2 => r) -> r

-- | Functions are encoded as functional relations; the three arguments to
--   the construcor are:
--   
--   <ul>
--   <li>Is a relation</li>
--   <li>Totality</li>
--   <li>Single-valuedness (CPS-encoded; using <a>:=:</a> would work just
--   as well. I hope that the CPS variant makes the optimizer more happy,
--   but this is pure speculation)</li>
--   </ul>
data (:~>:) dom :: (* -> *) cod :: (* -> *) :: (* -> *) -> *
IsFun :: (f :⊆: (dom :×: cod)) -> Total dom f -> Sval f -> (dom :~>: cod) f

-- | Functions are relations
relation :: (dom :~>: cod) f -> f :⊆: (dom :×: cod)

-- | Functions are total
total :: (dom :~>: cod) f -> a :∈: dom -> ExSnd f a

-- | <i>The detailed type variable names help debugging proofs</i>
totalCPS :: (dom :~>: cod) f -> a :∈: dom -> (forall totalCPS_y. (a, totalCPS_y) :∈: f -> totalCPS_return) -> totalCPS_return

-- | Functions are single-valued (reified equality version)
sval :: (dom :~>: cod) f -> (a, b1) :∈: f -> (a, b2) :∈: f -> b1 :=: b2

-- | Perform coercion using the single-valuedness
svalCoerce :: (dom :~>: cod) f -> (a, b1) :∈: f -> (a, b2) :∈: f -> b1 -> b2

-- | Functions are single-valued (CPS version)
svalCPS :: (dom :~>: cod) f -> (a, b1) :∈: f -> (a, b2) :∈: f -> (b1 ~ b2 => r) -> r
svalCPS' :: (dom :~>: cod) f -> (a, b1) :∈: f -> (a, b2) :∈: f -> (b1 :=: b2 -> r) -> r

-- | Shortcut for unpacking <a>relation</a>
rel :: (dom :~>: cod) f -> pair :∈: f -> pair :∈: (dom :×: cod)
relCPS :: (dom :~>: cod) f -> pair :∈: f -> (forall relCPS_x relCPS_y. pair ~ (relCPS_x, relCPS_y) => dom relCPS_x -> cod relCPS_y -> relCPS_return) -> relCPS_return

-- | If <tt>f a = b</tt>, then <tt>a</tt> is in the domain of <tt>f</tt>
inDom :: (dom :~>: cod) f -> (a, b) :∈: f -> a :∈: dom

-- | If <tt>f a = b</tt>, then <tt>b</tt> is in the codomain of <tt>f</tt>
inCod :: (dom :~>: cod) f -> (a, b) :∈: f -> b :∈: cod

-- | The domain of a function is uniquely determined
domUniq :: (dom :~>: cod) f -> (dom2 :~>: cod) f -> dom :==: dom2

-- | Kind-casted variant (function space as a set)
--   
--   Convention: Instances of <a>Fact</a> should always prove
--   <a>:~&gt;:</a> rather than this type.
type :~~>: dom cod = Lower1 (dom :~>: cod)
lowerFun :: (dom :~>: cod) f -> (dom :~~>: cod) (Lower f)
raiseFun :: (dom :~~>: cod) (Lower f) -> (dom :~>: cod) f

-- | This is stronger than <a>raiseFun</a> since it introduces the
--   knowledge that <tt>lf</tt> is of the form <tt>Lower f</tt>, rather
--   than assuming it.
raiseFunCPS :: (dom :~~>: cod) lf -> (forall f. lf ~ (Lower f) => (dom :~>: cod) f -> r) -> r

-- | Image of a set under the function
data Image f :: (* -> *) s :: (* -> *) :: * -> *
Image :: a :∈: s -> (a, b) :∈: f -> Image f s b

-- | Every image is a subset of every possible codomain
imageCod :: (dom :~>: cod) f -> Image f s :⊆: cod

-- | The full image is a codomain
setCodToImage :: (dom :~>: cod) f -> (dom :~>: Image f dom) f

-- | Change the codomain by proving that the full image is included in the
--   new codomain
adjustCod :: (dom :~>: cod) f -> (Image f dom :⊆: cod') -> (dom :~>: cod') f

-- | Enlargen the codomain
extendCod :: (dom :~>: cod) f -> (cod :⊆: cod') -> (dom :~>: cod') f
imageMonotonic :: (s1 :⊆: s2) -> Image f s1 :⊆: Image f s2
imageEmpty :: Image f Empty :==: Empty
imageOfInclusion :: Image (Incl dom cod) s :==: (s :∩: dom)
fullImageOfInclusion :: dom :⊆: cod -> Image (Incl dom cod) dom :==: dom

-- | Image distributes over union (in general not over intersection)
imageUnion :: (dom :~>: cod) f -> (Image f (s1 :∪: s2)) :==: (Image f s1 :∪: Image f s2)

-- | Very useful lemma for proving equality of functions.
--   
--   Given the properties of functions, it is enough to show that
--   <tt>f</tt> is a subset of <tt>f'</tt> to prove <tt>f = f'</tt>.
funEq :: (dom :~>: cod) f -> (dom :~>: cod') f' -> f :⊆: f' -> f :==: f'

-- | <a>funEq</a> with the inclusion argument flipped
funEq' :: (dom :~>: cod) f -> (dom :~>: cod') f' -> f' :⊆: f -> f :==: f'

-- | Expresses the fact that <i>f = f' ==&gt; f x = f' x</i>
equal_f :: (d :~>: c) f' -> f :==: f' -> (x, y) :∈: f -> (x, y') :∈: f' -> y :=: y'

-- | Perform coercion using a function equality
equal_f_coerce :: (d :~>: c) f' -> f :==: f' -> (x, y) :∈: f -> (x, y') :∈: f' -> y -> y'
isFun_congruence :: (d :~>: c) f -> f :==: f' -> (d :~>: c) f'

-- | Inclusion function of a subset
--   
--   Inclusions <i>do</i> know their codomain (somewhat arbitrary design
--   decision)
data Incl dom :: (* -> *) cod :: (* -> *) :: * -> *
Incl :: dom a -> Incl dom cod (a, a)

-- | Identity function on <tt>dom</tt>
type Id dom = Incl dom dom

-- | Inclusion is a function
inclusionIsFun :: dom :⊆: cod -> (dom :~>: cod) (Incl dom cod)

-- | Id is a function
idIsFun :: (dom :~>: dom) (Id dom)

-- | Composition
data (:○:) g :: (* -> *) f :: (* -> *) :: * -> *
Compo :: (b, c) :∈: g -> (a, b) :∈: f -> (g :○: f) (a, c)

-- | The composition is a function
compoIsFun :: (s2 :~>: s3) g -> (s1 :~>: s2) f -> (s1 :~>: s3) (g :○: f)

-- | <a>Id</a> is a left identity for composition
compo_idl :: (d :~>: c) f -> (Id c :○: f) :==: f

-- | <a>Id</a> is a right identity for composition
compo_idr :: (d :~>: c) f -> (f :○: Id d) :==: f
compo_assoc :: :~>: s2 cod g -> :~>: s21 s2 f -> :~>: dom s21 f1 -> ((g :○: f) :○: f1) :==: (g :○: (f :○: f1))

-- | Equalisers :D
--   
--   In our category, the equaliser of two parallel functions <tt>f1</tt>
--   and <tt>f2</tt> is the set of types on which <tt>f1</tt> and
--   <tt>f2</tt> agree; that is:
--   
--   <i>Equaliser f1 f2 = { x | f1 x = f2 x }</i>
data Equaliser f1 :: (* -> *) f2 :: (* -> *) :: * -> *
Equaliser :: (a, b) :∈: f1 -> (a, b) :∈: f2 -> Equaliser f1 f2 a

-- | Inclusion of the equaliser into the domain of the parallel functions
type EqualiserIncl s f1 f2 = Incl (Equaliser f1 f2) s

-- | The equaliser is a subset of the domain of the parallel functions
equaliserSubset :: (s :~>: t) f1 -> (Equaliser f1 f2) :⊆: s

-- | The equaliser inclusion is a function
equaliserIsFun :: (s :~>: t) f1 -> ((Equaliser f1 f2) :~>: s) (EqualiserIncl s f1 f2)

-- | Universal property of equalisers:
--   
--   <tt>f1 . g = f2 . g</tt> ==&gt; <tt>g</tt> factors uniquely through
--   <tt>Equaliser f1 f2</tt>
--   
--   Uniqueness is trivial in our case because the function into the
--   equaliser is identical to <tt>g</tt> (our functions don't know their
--   codomain)
equaliserUni :: (s0 :~>: s) g -> (s :~>: t) f1 -> (f1 :○: g) :==: (f2 :○: g) -> (s0 :~>: (Equaliser f1 f2)) g

-- | Injective functions
--   
--   (NB: Surjectivity is meaningless here because our functions don't know
--   their codomain, but we have <a>Image</a>)
data Injective f :: (* -> *) :: *
Injective :: (forall a1 a2 b r. (a1, b) :∈: f -> (a2, b) :∈: f -> (a1 ~ a2 => r) -> r) -> Injective f
injective :: Injective f -> ((a1, b) :∈: f) -> ((a2, b) :∈: f) -> a1 :=: a2
inclusion_Injective :: Injective (Incl dom cod)
data Preimage f :: (* -> *) s :: (* -> *) :: * -> *
Preimage :: (a, b) :∈: f -> b :∈: s -> Preimage f s a
preimage_Image :: (dom :~>: cod) f -> set :⊆: dom -> set :⊆: Preimage f (Image f set)
image_Preimage :: (dom :~>: cod) f -> Image f (Preimage f set) :⊆: set
data Fst s1 :: (* -> *) s2 :: (* -> *) :: * -> *
Fst :: a :∈: s1 -> b :∈: s2 -> Fst s1 s2 ((,) ((,) a b) a)
data Snd s1 :: (* -> *) s2 :: (* -> *) :: * -> *
Snd :: a :∈: s1 -> b :∈: s2 -> Snd s1 s2 ((,) ((,) a b) b)

-- | Analogous to <a>***</a>
data (:***:) f1 :: (* -> *) f2 :: (* -> *) :: * -> *
(:***:) :: ((,) a b1) :∈: f1 -> ((,) a b2) :∈: f2 -> (f1 :***: f2) (a, (,) b1 b2)
fstIsFun :: ((s1 :×: s2) :~>: s1) (Fst s1 s2)
sndIsFun :: ((s1 :×: s2) :~>: s2) (Snd s1 s2)
targetTuplingIsFun :: (dom :~>: cod1) f1 -> (dom :~>: cod2) f2 -> (dom :~>: (cod1 :×: cod2)) (f1 :***: f2)
fst_tupling :: (dom :~>: cod1) f1 -> (dom :~>: cod2) f2 -> (Fst cod1 cod2 :○: (f1 :***: f2)) :==: f1
snd_tupling :: (dom :~>: cod1) f1 -> (dom :~>: cod2) f2 -> (Snd cod1 cod2 :○: (f1 :***: f2)) :==: f2
tupling_eta :: (dom :~>: (cod1 :×: cod2)) f -> ((Fst cod1 cod2 :○: f) :***: (Snd cod1 cod2 :○: f)) :==: f

-- | The type-level function:
--   
--   <i>HaskFun(a,b) = (a -&gt; b)</i>
data HaskFun :: * -> *
HaskFun :: HaskFun ((,) ((,) a b) (a -> b))
haskFunIsFun :: ((Univ :×: Univ) :~>: FunctionType) HaskFun
haskFunInjective :: Injective HaskFun

-- | The type-level function:
--   
--   <i>KleisliHom(a,b) = (a -&gt; m b)</i>
data KleisliHom m :: (* -> *) :: * -> *
KleisliHom :: KleisliHom m ((,) ((,) a b) (a -> m b))
kleisliHomIsFun :: ((Univ :×: Univ) :~>: (KleisliType m)) (KleisliHom m)
kleisliHomInjective :: Injective (KleisliHom m)

-- | Graph of a <tt>(* -&gt; *)</tt> type constructor
data Graph f :: * -> *
Graph :: Graph f (a, f a)
graphIsFun :: (Univ :~>: Univ) (Graph f)
graphCPS :: pair :∈: Graph f -> (forall a. pair ~ (a, f a) => r) -> r

-- | Type constructors are injective
graphInjective :: Injective (Graph f)
imageGraphList :: [a] :∈: Image (Graph []) Univ
data ToTyCon f :: (* -> *) x
ToTyCon :: ((x, y) :∈: f) -> y -> ToTyCon x
introToTyCon :: ((x, y) :∈: f) -> y -> ToTyCon f x

-- | NB: this is stronger than the straightforward unpacking function -- we
--   can use the single-valuedness
elimToTyCon :: (dom :~>: cod) f -> ToTyCon f x -> ((x, z) :∈: f) -> z
toTCG :: f x -> ToTyCon (Graph f) x
fromTCG :: ToTyCon (Graph f) x -> f x

-- | Graph of a <tt>(* -&gt; * -&gt; *)</tt> type constructor
data BiGraph f :: * -> *
BiGraph :: BiGraph f ((a, b), f a b)
biGraphIsFun :: ((Univ :×: Univ) :~>: Univ) (BiGraph f)

-- | Type constructors are injective
biGraphInjective :: Injective (BiGraph f)

-- | Example of an extensional equation between functions
biGraph_eq_HaskFun :: BiGraph (->) :==: HaskFun
data Const dom x :: * -> *
Const :: a :∈: dom -> Const dom x (a, x)
constIsFun :: x :∈: cod -> (dom :~>: cod) (Const dom x)
constEq :: Ex dom -> Const dom x :==: Const dom' x' -> x :=: x'

-- | NB: <tt>fam</tt> must be a function mapping some set to a set of sets,
--   or the second condition in the constructor is vacuous
data Π fam :: (* -> *) f :: (* -> *)
Π :: (base :~>: Unions fam) f -> (forall x y s. (x, y) :∈: f -> (x, Lower s) :∈: fam -> x :∈: s) -> Π fam f

-- | Expresses that <tt>f</tt> is a section of <tt>bundleMap</tt>
data Section bundleMap :: (* -> *) f :: (* -> *)
Section :: (forall x y. (x, y) :∈: f -> (y, x) :∈: bundleMap) -> Section bundleMap f

-- | Lemma for proving a function equal to the identity
idLemma :: ((dom :~>: dom) f) -> (forall x y. (x, y) :∈: f -> x :=: y) -> (Id dom :==: f)

-- | Is section ==&gt; composition is <i>id</i>
section_CompoId :: (total :~>: base) bun -> (base :~>: total) f -> (Section bun f) -> ((bun :○: f) :==: Id base)

-- | Composition is <i>id</i> ==&gt; is section
compoId_Section :: ((total :~>: base) bun) -> ((base :~>: total) f) -> ((bun :○: f) :==: Id base) -> (Section bun f)
data Inv f :: (* -> *) :: * -> *
Inv :: (a, b) :∈: f -> Inv f (b, a)
invInv0 :: Inv (Inv f) :⊆: f
invInv :: (dom :~>: cod) f -> (Inv (Inv f)) :==: f

-- | An injective function has an inverse, with domain the image
injective_Inv :: (dom :~>: cod) f -> Injective f -> (Image f dom :~>: dom) (Inv f)
invId :: Inv (Id dom) :==: Id dom
instance [incoherent] Fact ((:~>:) dom (cod1 :×: cod2) f -> ((Fst cod1 cod2 :○: f) :***: (Snd cod1 cod2 :○: f)) :==: f)
instance [incoherent] Fact ((:~>:) dom cod1 f1 -> (:~>:) dom cod2 f2 -> (Snd cod1 cod2 :○: (f1 :***: f2)) :==: f2)
instance [incoherent] Fact ((:~>:) dom cod1 f1 -> (:~>:) dom cod2 f2 -> (Fst cod1 cod2 :○: (f1 :***: f2)) :==: f1)
instance [incoherent] Fact ((:~>:) s2 cod g -> (:~>:) s21 s2 f -> (:~>:) dom s21 f1 -> ((g :○: f) :○: f1) :==: (g :○: (f :○: f1)))
instance [incoherent] Fact ((:~>:) dom cod f -> Image f (Preimage f set) :⊆: set)
instance [incoherent] Fact ((:~>:) dom cod f -> (set :⊆: dom) -> set :⊆: Preimage f (Image f set))
instance [incoherent] Fact (Inv (Id dom) :==: Id dom)
instance [incoherent] Fact (Injective (Incl dom cod))
instance [incoherent] Fact ((:~>:) dom cod f -> Injective f -> (:~>:) (Image f dom) dom (Inv f))
instance [incoherent] Fact ((:~>:) total base bun -> (:~>:) base total f -> ((bun :○: f) :==: Id base) -> Section bun f)
instance [incoherent] Fact ((:~>:) total base bun -> (:~>:) base total f -> Section bun f -> (bun :○: f) :==: Id base)
instance [incoherent] Fact (Ex dom -> (Const dom x :==: Const dom' x') -> x :=: x')
instance [incoherent] Fact ((x :∈: cod) -> (:~>:) dom cod (Const dom x))
instance [incoherent] Fact ((:~~>:) dom cod (Lower f) -> (:~>:) dom cod f)
instance [incoherent] Fact ((:~>:) dom cod f -> (:~~>:) dom cod (Lower f))
instance [incoherent] Fact ((:~>:) d c f -> (f :○: Id d) :==: f)
instance [incoherent] Fact ((:~>:) d c f -> (Id c :○: f) :==: f)
instance [incoherent] Fact ((:~>:) dom cod f -> Image f (s1 :∪: s2) :==: (Image f s1 :∪: Image f s2))
instance [incoherent] Fact ((:~>:) dom cod f -> (:~>:) dom2 cod f -> dom :==: dom2)
instance [incoherent] Fact ((:~>:) dom cod f -> ((a, b) :∈: f) -> b :∈: cod)
instance [incoherent] Fact ((:~>:) dom cod f -> ((a, b) :∈: f) -> a :∈: dom)
instance [incoherent] Fact ((:~>:) d c f' -> (f :==: f') -> ((x, y) :∈: f) -> ((x, y') :∈: f') -> y :=: y')
instance [incoherent] Fact ((:~>:) s t f1 -> (:~>:) (Equaliser f1 f2) s (EqualiserIncl s f1 f2))
instance [incoherent] Fact ((:~>:) s0 s g -> (:~>:) s t f1 -> ((f1 :○: g) :==: (f2 :○: g)) -> (:~>:) s0 (Equaliser f1 f2) g)
instance [incoherent] Fact ((:~>:) s t f1 -> Equaliser f1 f2 :⊆: s)
instance [incoherent] Fact ((:~>:) dom cod f -> (cod :⊆: cod') -> (:~>:) dom cod' f)
instance [incoherent] Fact ((:~>:) dom cod f -> (:~>:) dom cod' f' -> (f :⊆: f') -> f :==: f')
instance [incoherent] Fact ((:~>:) (Univ :×: Univ) Univ (BiGraph f))
instance [incoherent] Fact (Injective (BiGraph f))
instance [incoherent] Fact ((:~>:) Univ Univ (Graph f))
instance [incoherent] Fact (Injective (Graph f))
instance [incoherent] Fact ((:~>:) dom cod f -> (a :∈: dom) -> ExSnd f a)
instance [incoherent] Fact ((:~>:) dom cod f -> (pair :∈: f) -> pair :∈: (dom :×: cod))
instance [incoherent] Fact ((:~>:) dom cod f -> f :⊆: (dom :×: cod))
instance [incoherent] Fact ((:~>:) dom cod f -> ((a, b1) :∈: f) -> ((a, b2) :∈: f) -> b1 :=: b2)
instance [incoherent] Fact ((dom :⊆: cod) -> (:~>:) dom cod (Incl dom cod))
instance [incoherent] Fact ((:~>:) dom dom (Id dom))
instance [incoherent] Fact ((:~>:) s2 s3 g -> (:~>:) s1 s2 f -> (:~>:) s1 s3 (g :○: f))
instance [incoherent] Fact (Injective (KleisliHom m))
instance [incoherent] Fact ((:~>:) (Univ :×: Univ) (KleisliType m) (KleisliHom m))
instance [incoherent] Fact (Injective HaskFun)
instance [incoherent] Fact ((:~>:) (Univ :×: Univ) FunctionType HaskFun)
instance [incoherent] Fact ((:~>:) (s1 :×: s2) s2 (Snd s1 s2))
instance [incoherent] Fact ((:~>:) (s1 :×: s2) s1 (Fst s1 s2))
instance [incoherent] Fact ((:~>:) dom cod1 f1 -> (:~>:) dom cod2 f2 -> (:~>:) dom (cod1 :×: cod2) (f1 :***: f2))
instance [incoherent] (a ~ a_copy, b ~ b_copy) => Fact (((a_copy, b_copy), f a b) :∈: BiGraph f)
instance [incoherent] a ~ a_copy => Fact ((a_copy, f a) :∈: Graph f)
instance [incoherent] (a1 ~ a, b1 ~ b, m1 ~ m) => Fact (((a1, b1), a -> m1 b) :∈: KleisliHom m)
instance [incoherent] (a_copy ~ a, b_copy ~ b) => Fact (((a_copy, b_copy), a -> b) :∈: HaskFun)
instance [incoherent] (Fact ((:~>:) dom cod1 f1), Fact ((:~>:) dom cod2 f2)) => Fact ((:~>:) dom (cod1 :×: cod2) (f1 :***: f2))
instance [incoherent] (Fact ((:~>:) s2 s3 g), Fact ((:~>:) s1 s2 f)) => Fact ((:~>:) s1 s3 (g :○: f))
instance [incoherent] Fact (dom :⊆: cod) => Fact ((:~>:) dom cod (Incl dom cod))
instance [incoherent] (cod' ~ cod'_copy, Fact ((:~>:) dom cod f)) => Fact ((cod :⊆: cod'_copy) -> (:~>:) dom cod' f)
instance [incoherent] (Lower f ~ lf, Fact ((:~>:) dom cod f)) => Fact ((:~~>:) dom cod lf)

module Type.Set.Example

-- | A <tt>Map</tt> whose keys are taken from any type which is a member of
--   <i>set</i>
newtype SMap set a
SMap :: (Map (V set) a) -> SMap set a
singleton :: (Fact (set :⊆: OrdType), Fact (set :⊆: TypeableType), Fact (set :⊆: EqType)) => k :∈: set -> k -> a -> SMap set a
insert :: (Fact (set :⊆: OrdType), Fact (set :⊆: TypeableType), Fact (set :⊆: EqType)) => k :∈: set -> k -> a -> SMap set a -> SMap set a
lookup :: (Fact (set :⊆: OrdType), Fact (set :⊆: TypeableType), Fact (set :⊆: EqType)) => k :∈: set -> k -> SMap set a -> Maybe a

-- | Either <tt>Typeable</tt> <a>Integral</a>s, or <a>String</a>s
type ExampleSet = (TypeableType :∩: IntegralType) :∪: (Singleton String)
stringInExampleSet :: String :∈: ExampleSet
intInExampleSet :: Int :∈: ExampleSet
test :: SMap ExampleSet Integer
instance [incoherent] Fact (ExampleSet :⊆: EqType)
instance [incoherent] Fact (ExampleSet :⊆: OrdType)
instance [incoherent] Fact (ExampleSet :⊆: TypeableType)


-- | TODO
--   
--   <ul>
--   <li>Prove that <a>Initor</a> is an <a>NMorphism</a></li>
--   <li>Prove that it is uniquely so</li>
--   </ul>
module Type.Nat

-- | Sets equipped with a constant and a function to itself
data NStructure set z succ
NStructure :: z :∈: set -> (set :~>: set) succ -> NStructure set z succ

-- | Structure-preserving maps of <a>NStructure</a>s
data NMorphism set1 z1 succ1 set2 z2 succ2 f :: (* -> *)
NMorphism :: NStructure set1 z1 succ1 -> NStructure set2 z2 succ2 -> (set1 :~>: set2) f -> (f z1 :=: z2) -> ((f :○: succ1) :==: (succ2 :○: f)) -> NMorphism set1 z1 succ1 z2 set2 succ2 f

-- | Expresses that <tt>(set1,z1,succ1)</tt> is initial in the cat of
--   <a>NStructure</a>s, in other words, that it is isomorphic to the
--   natural numbers
data NInitial set1 z1 succ1
NInitial :: (forall z2 set2 succ2. ExUniq1 (NMorphism set1 z1 succ1 z2 set2 succ2)) -> NInitial set1 z1 succ1

-- | Actually any pair of (nullary type, unary type constructor) gives us a
--   copy of the naturals; let's call these <i>TNats</i>
data TNat z s :: * -> *
IsZ :: TNat z s z
IsS :: TNat z s n -> TNat z s (s n)

-- | Successor function made from a unary type constructor
data Succ z s :: * -> *
Succ :: n :∈: TNat z s -> Succ z s (n, s n)
succFun :: (TNat z s :~>: TNat z s) (Succ z s)
tyconNStruct :: NStructure (TNat z s) z (Succ z s)

-- | The unique morphism from an <a>TNat</a> to any <a>NStructure</a>
--   
--   NB: <tt>s</tt> is a type constructor, but <tt>succ2</tt> is a Function
--   (<a>IsFun</a>)
data Initor z s z2 succ2 :: * -> *
InitorZ :: Initor z s z2 succ2 (z, z2)
InitorS :: Initor z s z2 succ2 (n1, n2) -> (n2, sn2) :∈: succ2 -> Initor z s z2 succ2 (s n1, sn2)
initorFun :: NStructure set2 z2 succ2 -> (TNat z s :~>: set2) (Initor z s z2 succ2)
