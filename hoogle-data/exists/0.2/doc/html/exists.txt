-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Existential datatypes holding evidence of constraints
--   
--   This package contains:
--   
--   <ul>
--   <li>Existential datatypes for holding evidence of constraints on types
--   of kind <tt>*</tt> and <tt>* -&gt; *</tt>;</li>
--   <li>Type classes for existential datatypes holding evidence of
--   constraints on types of kind <tt>*</tt> and <tt>* -&gt; *</tt>;</li>
--   <li>Completely useless existential datatypes holding evidence of no
--   constraint on types of kind <tt>*</tt> and <tt>* -&gt; *</tt>;</li>
--   <li>Assorted type class instances for the above;</li>
--   <li>A type-level combinator for combining constraint
--   constructors.</li>
--   </ul>
--   
--   (Some of these might be better off as separate packages.)
--   
--   <a>Data.Exists</a> has most of the important things.
--   
--   Minimum GHC: 7.4
--   
--   Changes in 0.2:
--   
--   <ul>
--   <li>Removed <tt>Comonad</tt>-related things (they were probably
--   useless anyways)</li>
--   <li>Added <tt>Data.Exists.CPS</tt></li>
--   </ul>
@package exists
@version 0.2


-- | Default functions which can be used as method implementations when
--   writing type class instances for existential datatypes.
module Data.Exists.Defaults
showDefault :: ExistentialWith Show e => e -> String
showsPrecDefault :: ExistentialWith Show e => Int -> e -> ShowS
fmapDefault :: ExistentialWith1 Functor e => (a -> b) -> e a -> e b
foldDefault :: (ExistentialWith1 Foldable e, Monoid m) => e m -> m
foldMapDefault :: (ExistentialWith1 Foldable e, Monoid m) => (a -> m) -> e a -> m
foldrDefault :: ExistentialWith1 Foldable e => (a -> b -> b) -> b -> e a -> b
foldlDefault :: ExistentialWith1 Foldable e => (a -> b -> a) -> a -> e b -> a
foldr1Default :: ExistentialWith1 Foldable e => (a -> a -> a) -> e a -> a
foldl1Default :: ExistentialWith1 Foldable e => (a -> a -> a) -> e a -> a
traverseDefault :: (ExistentialWith1 Traversable e, Applicative f) => (a -> f b) -> e a -> f (e b)
sequenceADefault :: (ExistentialWith1 Traversable e, Applicative f) => e (f a) -> f (e a)
mapMDefault :: (ExistentialWith1 Traversable e, Monad m) => (a -> m b) -> e a -> m (e b)
sequenceDefault :: (ExistentialWith1 Traversable e, Monad m) => e (m a) -> m (e a)
contramapDefault :: ExistentialWith1 Contravariant e => (a -> b) -> e b -> e a


-- | This module contains a type-level combinator for combining constraint
--   constructors.
--   
--   This is useful because you can't otherwise write an
--   <tt><a>Exists</a></tt> type or <tt><a>Existential</a></tt> instance
--   referencing more than one at the same time.
module Control.Constraint.Combine

-- | Combine two constraint constructors of kind <tt>χ -&gt;
--   <a>Constraint</a></tt>, where <tt>χ</tt> is any kind.
--   
--   This is the same as
--   
--   <pre>
--   type (c :&amp;: d) a = (c a, d a)
--   </pre>
--   
--   except that it can be partially applied.
--   
--   <pre>
--   f :: ((Eq :&amp;: Enum :&amp;: Bounded) a) =&gt; a -&gt; Bool
--   </pre>
--   
--   is equivalent to
--   
--   <pre>
--   f :: (Eq a, Enum a, Bounded a) =&gt; a -&gt; Bool
--   </pre>
class (c a, d a) => :&: c d a

-- | The same as <tt><a>:&amp;:</a></tt>.
type And c d = c :&: d

-- | An empty constraint, which implies nothing.
--   
--   <tt><a>:&amp;:</a></tt> and <tt><a>Empty</a></tt> form a type-level
--   monoid with <tt><a>Empty</a></tt> as the identity element.
class Empty a
instance Empty k a
instance (c a, d a) => (:&:) k c d a


-- | CPS-transformed versions of <tt>Exists</tt> and <tt>Exists1</tt>,
--   provided for completeness and curiosity.
module Data.Exists.CPS
newtype Exists c
Exists :: (forall r. (forall a. c a => a -> r) -> r) -> Exists c
withExists :: Exists c -> forall r. (forall a. c a => a -> r) -> r
newtype Exists1 c a
Exists1 :: (forall r. (forall f. c f => f a -> r) -> r) -> Exists1 c a
withExists1 :: Exists1 c a -> forall r. (forall f. c f => f a -> r) -> r
instance Existential1 (Exists1 c)
instance Existential (Exists c)


-- | Useless existential datatypes holding evidence of no constraint.
module Data.Anything

-- | A datatype containing anything. You can't do anything with it.
data Anything
Anything :: a -> Anything

-- | A datatype containing any <tt>* -&gt; *</tt> kinded type constructor
--   applied to <tt>a</tt>. You can't do anything with it.
data Anything1 a
Anything1 :: f a -> Anything1 a
instance Typeable Anything
instance Typeable1 Anything1
instance Show (Anything1 a)
instance Show Anything


-- | Existential datatypes holding evidence of constraints, and type
--   classes for existential datatypes.
module Data.Exists

-- | A datatype which holds a value of a type satisfying the constraint
--   <tt>c</tt>, hiding the type, and evidence for the constraint, so that
--   it can be retrieved by pattern matching later.
--   
--   Example:
--   
--   <pre>
--   foo :: Exists Show
--   foo = Exists (Just 9 :: Maybe Int)
--   
--   printExists :: Exists Show -&gt; IO ()
--   printExists (Exists e) = print e
--   
--   main = printExists foo -- prints "Just 9"
--   </pre>
data Exists c
Exists :: a -> Exists c

-- | A type class to abstract over existential datatypes.
--   
--   Example:
--   
--   <pre>
--   data EShow where
--        EShow :: Show a =&gt; a -&gt; EShow
--   
--   instance Existential EShow where
--       type ConstraintOf EShow = Show
--       exists = EShow
--       apply f (EShow a) = f a
--   
--   foo :: EShow
--   foo = exists (Just 9 :: Maybe Int)
--   
--   main = apply print foo -- prints "Just 9"
--   </pre>
--   
--   Note that had we given <tt>foo</tt> the type signature
--   
--   <pre>
--   foo :: (Existential e, ConstraintOf e ~ Show) =&gt; e
--   </pre>
--   
--   GHC would have given us an error message, because the instance of
--   <tt><a>Existential</a></tt> to use would have been ambiguous. (The
--   <tt><a>apply</a> f . <a>exists</a></tt> problem is the same as the
--   <tt><a>show</a> . <a>read</a></tt> problem.)
class Existential e where type family ConstraintOf e :: * -> Constraint
exists :: (Existential e, (ConstraintOf e) a) => a -> e
apply :: Existential e => (forall a. (ConstraintOf e) a => a -> r) -> e -> r

-- | An alias for convenience.
--   
--   <pre>
--   foo :: ExistentialWith Show e =&gt; e -&gt; IO ()
--   </pre>
--   
--   is equivalent to
--   
--   <pre>
--   foo :: (Existential e, ConstraintOf e ~ Show) =&gt; e -&gt; IO ()
--   </pre>
class (Existential e, c ~ ConstraintOf e) => ExistentialWith c e

-- | Translate between different existential datatypes holding evidence for
--   the same constraint.
translate :: (ExistentialWith c e1, ExistentialWith c e2) => e1 -> e2

-- | A <tt>* -&gt; *</tt> kinded version of <tt><a>Exists</a></tt> which
--   holds a value of a type constructor applied to a type, hiding the type
--   constructor, and evidence for a constraint on the type constructor.
data Exists1 c a
Exists1 :: f a -> Exists1 c a

-- | A version of <tt><a>Existential</a></tt> for kind <tt>* -&gt; *</tt>.
class Existential1 e where type family ConstraintOf1 e :: (* -> *) -> Constraint
exists1 :: (Existential1 e, (ConstraintOf1 e) f) => f a -> e a
apply1 :: Existential1 e => (forall f. (ConstraintOf1 e) f => f a -> r) -> e a -> r

-- | An alias for convenience. A version of <a>ExistentialWith</a> for kind
--   <tt>* -&gt; *</tt>.
class (Existential1 e, c ~ ConstraintOf1 e) => ExistentialWith1 c e

-- | Translate between different existential datatypes holding evidence for
--   the same constraint on a <tt>* -&gt; *</tt> kinded type constructor.
translate1 :: (ExistentialWith1 c e1, ExistentialWith1 c e2) => e1 a -> e2 a
data Constraint :: BOX
instance Contravariant (Exists1 Contravariant)
instance Traversable (Exists1 Traversable)
instance Foldable (Exists1 Traversable)
instance Functor (Exists1 Traversable)
instance Foldable (Exists1 Foldable)
instance Functor (Exists1 Functor)
instance Show (Exists Show)
instance Existential SomeException
instance Existential Dynamic
instance Existential1 Anything1
instance Existential Anything
instance Existential1 (Any (* -> *))
instance Existential (Any *)
