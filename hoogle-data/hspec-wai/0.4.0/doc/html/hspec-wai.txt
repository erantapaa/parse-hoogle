-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Experimental Hspec support for testing WAI applications (depends on hspec2!)
--   
--   Experimental Hspec support for testing WAI applications (depends on
--   hspec2!)
@package hspec-wai
@version 0.4.0

module Test.Hspec.Wai.Internal

-- | An expectation in the <a>WaiSession</a> monad. Failing expectations
--   are communicated through exceptions (similar to <a>Expectation</a> and
--   <a>Assertion</a>).
type WaiExpectation = WaiSession ()

-- | A <a>WAI</a> test session that carries the <a>Application</a> under
--   test an some client state.
newtype WaiSession a
WaiSession :: Session a -> WaiSession a
unWaiSession :: WaiSession a -> Session a
runWaiSession :: WaiSession a -> Application -> IO a
getApp :: WaiSession Application
instance Functor WaiSession
instance Applicative WaiSession
instance Monad WaiSession
instance MonadIO WaiSession
instance Example WaiExpectation


-- | Have a look at the <a>README</a> for an example of how to use this
--   library.
module Test.Hspec.Wai

-- | A <a>WAI</a> test session that carries the <a>Application</a> under
--   test an some client state.
data WaiSession a

-- | An expectation in the <a>WaiSession</a> monad. Failing expectations
--   are communicated through exceptions (similar to <a>Expectation</a> and
--   <a>Assertion</a>).
type WaiExpectation = WaiSession ()

-- | Perform a <tt>GET</tt> request to the application under test.
get :: ByteString -> WaiSession SResponse

-- | Perform a <tt>POST</tt> request to the application under test.
post :: ByteString -> ByteString -> WaiSession SResponse

-- | Perform a <tt>PUT</tt> request to the application under test.
put :: ByteString -> ByteString -> WaiSession SResponse

-- | Perform a <tt>PATCH</tt> request to the application under test.
patch :: ByteString -> ByteString -> WaiSession SResponse

-- | Perform a <tt>DELETE</tt> request to the application under test.
delete :: ByteString -> WaiSession SResponse

-- | Perform a request to the application under test, with specified HTTP
--   method, request path, headers and body.
request :: Method -> ByteString -> [Header] -> ByteString -> WaiSession SResponse

-- | Set the expectation that a response matches a specified
--   <a>ResponseMatcher</a>.
--   
--   A <tt>ResponseMatcher</tt> matches a response if:
--   
--   <ul>
--   <li>the specified status matches the HTTP response status code</li>
--   <li>the specified body (if any) matches the response body</li>
--   <li>the response has all of the specified <a>Header</a> fields (the
--   response may have arbitrary additional <a>Header</a> fields)</li>
--   </ul>
--   
--   You can use <tt>ResponseMatcher</tt>'s (broken) <a>Num</a> instance to
--   match for a HTTP status code:
--   
--   <pre>
--   get "/" `shouldRespondWith` 200
--   -- matches if status is 200
--   </pre>
--   
--   You can use <tt>ResponseMatcher</tt>'s <tt>IsString</tt> instance to
--   match for a HTTP status <tt>200</tt> and a body:
--   
--   <pre>
--   get "/" `shouldRespondWith` "foo"
--   -- matches if body is "foo" and status is 200
--   </pre>
--   
--   If you want to match for a different HTTP status, you can use record
--   update notation to specify <a>matchStatus</a> explicitly:
--   
--   <pre>
--   get "/" `shouldRespondWith` "foo" {matchStatus = 404}
--   -- matches if body is "foo" and status is 404
--   </pre>
--   
--   If you want to require a specific header field you can specify
--   <a>matchHeaders</a>:
--   
--   <pre>
--   get "/" `shouldRespondWith` "foo" {matchHeaders = "Content-Type: text/plain"}
--   -- matches if body is "foo", status is 200 and ther is a header field "Content-Type: text/plain"
--   </pre>
shouldRespondWith :: WaiSession SResponse -> ResponseMatcher -> WaiExpectation
data ResponseMatcher
ResponseMatcher :: Int -> [Header] -> Maybe ByteString -> ResponseMatcher
matchStatus :: ResponseMatcher -> Int
matchHeaders :: ResponseMatcher -> [Header]
matchBody :: ResponseMatcher -> Maybe ByteString

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => forall a. IO a -> m a

-- | An alias for <a>before</a>.
with :: IO a -> SpecWith a -> Spec

module Test.Hspec.Wai.JSON

-- | A <a>QuasiQuoter</a> for constructing JSON values.
--   
--   The constructed value is polymorph and unifies to instances of
--   <a>FromValue</a>.
--   
--   When used as a <a>ResponseMatcher</a> it matches a response with
--   
--   <ul>
--   <li>a status code of <tt>200</tt></li>
--   <li>a <tt>Content-Type</tt> header with value
--   <tt>application/json</tt></li>
--   <li>the specified JSON as response body</li>
--   </ul>
--   
--   When used as a <tt>ByteString</tt> it creates a ByteString from the
--   specified JSON that can be used as a request body for e.g.
--   <tt>POST</tt> and <tt>PUT</tt> requests.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; L.putStrLn [json|[23, {foo: 42}]|]
--   [23,{"foo":42}]
--   </pre>
json :: QuasiQuoter
class FromValue a
fromValue :: FromValue a => Value -> a
instance FromValue ByteString
instance FromValue ResponseMatcher
