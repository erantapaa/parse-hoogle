-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | simple 1-to-N interprocess communication
--   
--   This module provides interprocess communication channels. This is
--   meant to be used by logger-like programs that want to send status
--   reports to N listeners (where N &gt;= 0).
@package miniplex
@version 0.3.4


-- | Synchronous message receiving.
module System.Miniplex.Source
data Source

-- | <tt><a>attach</a> tag</tt> returns a message source connected to the
--   sink created by a call to <tt><tt>System.Miniplex.Sink.create</tt>
--   tag</tt>. If no such sink exists, an exception is thrown.
attach :: String -> IO Source

-- | Similar to <a>attach</a>, but if the specified sink doesn't exist,
--   <a>attachWait</a> blocks until it becomes available.
attachWait :: String -> IO Source

-- | Synchronously reads a message from a source (i.e. it blocks if there
--   is currently no message available).
read :: Source -> IO String

-- | Returns a lazy list of all messages arriving at a source (like
--   <tt><tt>System.IO.hGetContents</tt></tt>).
getMsgs :: Source -> IO [String]

-- | Disconnects from a message sink. The detached source becomes invalid
--   and must not be used again.
detach :: Source -> IO ()

-- | Helper function to simplify resource handling. <tt><a>withSource</a>
--   tag body</tt> creates a source, calls <tt>body</tt>, then disconnects
--   the source, even if <tt>body</tt> throws an exception.
withSource :: String -> (Source -> IO a) -> IO a

-- | Similar to <a>withSource</a>, but calls <a>attachWait</a> instead of
--   <a>attach</a>.
withSourceWait :: String -> (Source -> IO a) -> IO a
instance Typeable Source


-- | Asynchronous message broadcasting.
module System.Miniplex.Sink
data Sink

-- | <tt><a>create</a> tag</tt> creates a message sink. <tt>tag</tt> is
--   used to uniquely identify this sink. The set of allowed characters for
--   <tt>tag</tt> includes letters, digits, <tt>_</tt>, <tt>-</tt> and
--   <tt>+</tt>.
--   
--   (Implementation detail: This function actually creates a named socket
--   in your <tt>~/.miniplex/</tt>.)
create :: String -> IO Sink

-- | <tt><a>write</a> si msg</tt> asynchronously writes <tt>msg</tt> to
--   <tt>si</tt>, where it will be received by all currently connected
--   readers.
write :: Sink -> String -> IO ()

-- | Deallocates a sink. The destroyed sink must not be used again.
--   
--   (Implementation detail: This function closes and removes the socket
--   from the file system. If you forget to call it, you'll leave a stale
--   entry in <tt>~/.miniplex/</tt>, which will cause calls to
--   <a>create</a> with the same tag to fail.)
destroy :: Sink -> IO ()

-- | Helper function to simplify resource handling. <tt><a>withSink</a> tag
--   body</tt> creates a sink, calls <tt>body</tt>, then destroys the sink,
--   even if <tt>body</tt> throws an exception.
withSink :: String -> (Sink -> IO a) -> IO a
instance Typeable Sink


-- | Semisynchronous interprocess communication.
module System.Miniplex
