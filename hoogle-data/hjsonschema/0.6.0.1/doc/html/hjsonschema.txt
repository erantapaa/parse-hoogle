-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | JSON Schema Draft 4 library
--   
@package hjsonschema
@version 0.6.0.1


-- | TODO: The code handling resolution scope updates is hacky and needs
--   improvement.
module Data.JsonSchema.Reference
combineIdAndRef :: Text -> Text -> Text
combineIds :: Text -> Text -> Text
newResolutionScope :: Text -> HashMap Text Value -> Text
refAndPointer :: Text -> Maybe (Text, Text)
fetchRef :: Text -> IO (Either Text (HashMap Text Value))
safeGet :: Text -> IO (Either Text ByteString)

module Data.JsonSchema.Helpers
noEm :: EmbeddedSchemas
objEmbed :: EmbeddedSchemas
arrayEmbed :: EmbeddedSchemas
objOrArrayEmbed :: EmbeddedSchemas
objMembersEmbed :: EmbeddedSchemas
patternPropertiesMatches :: Spec -> Graph -> RawSchema -> Value -> Maybe (Value -> (Vector ValErr, Value))
isJsonType :: Value -> Vector Text -> Vector ValErr
vLefts :: Vector (Either a b) -> Vector a
vRights :: Vector (Either a b) -> Vector b
eitherToMaybe :: Either a b -> Maybe b
vectorOfElems :: HashMap k a -> Vector a
hmToVector :: HashMap k a -> Vector (k, a)
vectorToHm :: (Eq k, Hashable k) => Vector (k, a) -> HashMap k a
runMaybeVal :: Maybe Validator -> Value -> Vector ValErr
runMaybeVal' :: Maybe (Value -> (Vector ValErr, Value)) -> Value -> (Vector ValErr, Value)
allUnique :: Eq a => Vector a -> Bool
toObj :: Value -> Maybe (HashMap Text Value)
fromJSONInt :: Value -> Maybe Int
toTxt :: Value -> Maybe Text
greaterThanZero :: (Num a, Ord a) => a -> Maybe ()
tshow :: Show a => a -> Text


-- | This is generally meant to be an internal module. It's only exposed in
--   case you want to make your own <a>Spec</a>. If you just want to use
--   JSON Schema Draft 4 use the preassembled <a>draft4</a> instead.
module Data.JsonSchema.Validators
multipleOf :: ValidatorGen
maximumVal :: ValidatorGen
minimumVal :: ValidatorGen
maxLength :: ValidatorGen
minLength :: ValidatorGen
pattern :: ValidatorGen

-- | Also covers additionalItems.
items :: ValidatorGen

-- | Not included directly in the <tt>draft4</tt> spec hashmap because it
--   always validates data unless <a>items</a> is also present. This is
--   because <a>items</a> defaults to {}.
additionalItems :: ValidatorGen
maxItems :: ValidatorGen
minItems :: ValidatorGen
uniqueItems :: ValidatorGen
maxProperties :: ValidatorGen
minProperties :: ValidatorGen
required :: ValidatorGen
properties :: ValidatorGen
patternProperties :: ValidatorGen

-- | An implementation of the "additionalProperties" keyword that never
--   disables itself. Not included directly in the <tt>draft4</tt> spec
--   hashmap.
runAdditionalProperties :: ValidatorGen
additionalProperties :: ValidatorGen
dependencies :: ValidatorGen

-- | 
--   <a>http://json-schema.org/latest/json-schema-validation.html#anchor76</a>
--   
--   <pre>
--   The value of this keyword MUST be an array.
--   This array MUST have at least one element.
--   Elements in the array MUST be unique.
--   
--   Elements in the array MAY be of any type, including null.
--   </pre>
--   
--   NOTE: We actually respect this, and don't build the validator if any
--   of the elements aren't unique.
enum :: ValidatorGen
typeVal :: ValidatorGen
allOf :: ValidatorGen
anyOf :: ValidatorGen
oneOf :: ValidatorGen
notValidator :: ValidatorGen
ref :: ValidatorGen
noVal :: ValidatorGen

module Data.JsonSchema
compile :: Spec -> Graph -> RawSchema -> Schema
validate :: Schema -> Value -> Either (Vector ValErr) Value
newtype Spec
Spec :: HashMap Text (ValidatorGen, EmbeddedSchemas) -> Spec
_unSpec :: Spec -> HashMap Text (ValidatorGen, EmbeddedSchemas)

-- | Set of potentially mutually recursive schemas.
type Graph = HashMap Text (HashMap Text Value)
type ValErr = Text
newtype Schema
Schema :: [Validator] -> Schema
_unSchema :: Schema -> [Validator]
type Validator = Value -> Vector ValErr
type ValidatorGen = Spec -> Graph -> RawSchema -> Value -> Maybe Validator

-- | Return a schema's immediate subschemas.
--   
--   This is used by <a>fetchRefs</a> to find all the subschemas in a
--   document. This allows it to process only "$ref"s and "id"s that are
--   actual schema keywords.
type EmbeddedSchemas = Text -> Value -> Vector RawSchema
data RawSchema
RawSchema :: Text -> HashMap Text Value -> RawSchema
_rsURI :: RawSchema -> Text
_rsObject :: RawSchema -> HashMap Text Value
draft4 :: Spec

-- | Check if a <a>RawSchema</a> is valid Draft 4 schema.
--   
--   This is just a convenience function built by preloading
--   <a>validate</a> with the spec schema that describes valid Draft 4
--   schemas.
--   
--   NOTE: It's not actually required to run <a>isValidSchema</a> on
--   prospective draft 4 schemas at all. However, it's a good way to catch
--   unintentional mistakes in schema documents.
isValidSchema :: RawSchema -> Either (Vector ValErr) Value

-- | Check that a <a>RawSchema</a> conforms to the JSON Schema Draft 4
--   master schema document. Compile it if it does.
--   
--   This is just a convenience function built by combining
--   <a>isValidSchema</a> and <a>compile</a>.
compileDraft4 :: Graph -> RawSchema -> Either (Vector ValErr) Schema

-- | Take a schema. Retrieve every document either it or its subschemas
--   include via the "$ref" keyword. Load a <a>Graph</a> out with them.
--   
--   TODO: This function's URL processing is hacky and needs improvement.
fetchRefs :: Spec -> RawSchema -> Graph -> IO (Either Text Graph)
