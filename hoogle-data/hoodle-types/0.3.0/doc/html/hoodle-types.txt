-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Data types for programs for hoodle file format
--   
@package hoodle-types
@version 0.3.0


-- | primitive types for hoodle
module Data.Hoodle.Primitive


module Data.Hoodle.Predefined
predefinedPenShapeAspectXY :: (Double, Double)
hexToRGBA :: Integer -> (Double, Double, Double, Double)
rgbaToHEX :: (Double, Double, Double, Double) -> String
predefined_highlighter_opacity :: Double
predefined_pencolor :: Map ByteString (Double, Double, Double, Double)

-- | need to be refined.
getPenColor :: ByteString -> Maybe (Double, Double, Double, Double)
predefined_bkgcolor :: Map ByteString (Double, Double, Double, Double)
predefined_veryfine :: Double
predefined_fine :: Double
predefined_medium :: Double
predefined_thick :: Double
predefined_verythick :: Double
predefined_ultrathick :: Double
predefined_highlighter_veryfine :: Double
predefined_highlighter_fine :: Double
predefined_highlighter_medium :: Double
predefined_highlighter_thick :: Double
predefined_highlighter_verythick :: Double
predefined_highlighter_ultrathick :: Double
predefined_eraser_veryfine :: Double
predefined_eraser_fine :: Double
predefined_eraser_medium :: Double
predefined_eraser_thick :: Double
predefined_eraser_verythick :: Double
predefined_eraser_ultrathick :: Double
predefined_RULING_MARGIN_COLOR :: (Double, Double, Double, Double)
predefined_RULING_COLOR :: (Double, Double, Double, Double)
predefined_RULING_THICKNESS :: Double
predefined_RULING_LEFTMARGIN :: Double
predefined_RULING_TOPMARGIN :: Double
predefined_RULING_SPACING :: Double
predefined_RULING_BOTTOMMARGIN :: Double
predefined_RULING_GRAPHSPACING :: Double


module Data.Hoodle.Util
fst3 :: (a, b, c) -> a
snd3 :: (a, b, c) -> b
trd3 :: (a, b, c) -> c


module Data.Hoodle.Hashed
type Title = ByteString

-- | wrapper of object embeddable in Layer
data Item
ItemStroke :: Stroke -> Item
ItemImage :: Image -> Item
ItemSVG :: SVG -> Item
ItemLink :: Link -> Item
ItemAnchor :: Anchor -> Item

-- | Pen stroke item
data Stroke
Stroke :: !ByteString -> !ByteString -> !Double -> ![Pair Double Double] -> Stroke
stroke_tool :: Stroke -> !ByteString
stroke_color :: Stroke -> !ByteString
stroke_width :: Stroke -> !Double
stroke_data :: Stroke -> ![Pair Double Double]
VWStroke :: ByteString -> ByteString -> [(Double, Double, Double)] -> Stroke
stroke_tool :: Stroke -> ByteString
stroke_color :: Stroke -> ByteString
stroke_vwdata :: Stroke -> [(Double, Double, Double)]

-- | Image item
data Image
Image :: ByteString -> (Double, Double) -> !Dimension -> Image
img_src :: Image -> ByteString
img_pos :: Image -> (Double, Double)
img_dim :: Image -> !Dimension
data SVG
SVG :: Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> SVG
svg_text :: SVG -> Maybe ByteString
svg_command :: SVG -> Maybe ByteString
svg_render :: SVG -> ByteString
svg_pos :: SVG -> (Double, Double)
svg_dim :: SVG -> !Dimension
data Link
Link :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_type :: Link -> ByteString
link_location :: Link -> ByteString
link_text :: Link -> Maybe ByteString
link_command :: Link -> Maybe ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
LinkDocID :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_linkeddocid :: Link -> ByteString
link_location :: Link -> ByteString
link_text :: Link -> Maybe ByteString
link_command :: Link -> Maybe ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
LinkAnchor :: ByteString -> ByteString -> ByteString -> ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_linkeddocid :: Link -> ByteString
link_location :: Link -> ByteString
link_anchorid :: Link -> ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
data Anchor
Anchor :: ByteString -> ByteString -> (Double, Double) -> !Dimension -> Anchor
anchor_id :: Anchor -> ByteString
anchor_render :: Anchor -> ByteString
anchor_pos :: Anchor -> (Double, Double)
anchor_dim :: Anchor -> !Dimension
data Dimension
Dim :: !Double -> !Double -> Dimension
dim_width :: Dimension -> !Double
dim_height :: Dimension -> !Double
data Background
Background :: !ByteString -> !ByteString -> !ByteString -> Background
bkg_type :: Background -> !ByteString
bkg_color :: Background -> !ByteString
bkg_style :: Background -> !ByteString
BackgroundPdf :: ByteString -> Maybe ByteString -> Maybe ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_domain :: Background -> Maybe ByteString
bkg_filename :: Background -> Maybe ByteString
bkg_pageno :: Background -> Int
BackgroundEmbedPdf :: ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_pageno :: Background -> Int
data Revision
Revision :: !ByteString -> !ByteString -> Revision
_revmd5 :: Revision -> !ByteString
_revtxt :: Revision -> !ByteString
RevisionInk :: !ByteString -> [Stroke] -> Revision
_revmd5 :: Revision -> !ByteString
_revink :: Revision -> [Stroke]
data Hoodle
Hoodle :: ByteString -> !Title -> [Revision] -> Maybe ByteString -> Maybe Text -> ![Page] -> Hoodle
hoodle_id :: Hoodle -> ByteString
hoodle_title :: Hoodle -> !Title
hoodle_revisions :: Hoodle -> [Revision]
hoodle_embeddedpdf :: Hoodle -> Maybe ByteString
hoodle_embeddedtext :: Hoodle -> Maybe Text
hoodle_pages :: Hoodle -> ![Page]
data Page
Page :: !Dimension -> !Background -> ![Layer] -> Page
page_dim :: Page -> !Dimension
page_bkg :: Page -> !Background
page_layers :: Page -> ![Layer]
data Layer
Layer :: ![Item] -> Layer
layer_items :: Layer -> ![Item]
getXYtuples :: Stroke -> [(Double, Double)]
tool :: Simple Lens Stroke ByteString
color :: Simple Lens Stroke ByteString
hoodleID :: Simple Lens Hoodle ByteString
title :: Simple Lens Hoodle Title
revisions :: Simple Lens Hoodle [Revision]
revmd5 :: Simple Lens Revision ByteString
embeddedPdf :: Simple Lens Hoodle (Maybe ByteString)
embeddedText :: Simple Lens Hoodle (Maybe Text)
pages :: Simple Lens Hoodle [Page]
dimension :: Simple Lens Page Dimension
background :: Simple Lens Page Background
layers :: Simple Lens Page [Layer]
items :: Simple Lens Layer [Item]
emptyHoodle :: IO Hoodle
emptyLayer :: Layer
emptyStroke :: Stroke
defaultBackground :: Background
defaultPage :: Page
defaultHoodle :: IO Hoodle
newPageFromOld :: Page -> Page
instance Show Stroke
instance Eq Stroke
instance Ord Stroke
instance Show Dimension
instance Eq Dimension
instance Ord Dimension
instance Show Anchor
instance Eq Anchor
instance Ord Anchor
instance Show Link
instance Eq Link
instance Ord Link
instance Show SVG
instance Eq SVG
instance Ord SVG
instance Show Image
instance Eq Image
instance Ord Image
instance Show Item
instance Eq Item
instance Ord Item
instance Show Background
instance Show Revision
instance Show Layer
instance Show Page
instance Show Hoodle
instance Serialize Dimension
instance (Serialize a, Serialize b) => Serialize (Pair a b)
instance Serialize Item
instance Serialize Anchor
instance Serialize Link
instance Serialize SVG
instance Serialize Image
instance Serialize Stroke


-- | Hoodle version 0.1.1 format
module Data.Hoodle.Simple.V0_1_1
type Title = ByteString

-- | wrapper of object embeddable in Layer
data Item
ItemStroke :: Stroke -> Item
ItemImage :: Image -> Item
ItemSVG :: SVG -> Item

-- | Pen stroke item
data Stroke
Stroke :: !ByteString -> !ByteString -> !Double -> ![Pair Double Double] -> Stroke
stroke_tool :: Stroke -> !ByteString
stroke_color :: Stroke -> !ByteString
stroke_width :: Stroke -> !Double
stroke_data :: Stroke -> ![Pair Double Double]
VWStroke :: ByteString -> ByteString -> [(Double, Double, Double)] -> Stroke
stroke_tool :: Stroke -> ByteString
stroke_color :: Stroke -> ByteString
stroke_vwdata :: Stroke -> [(Double, Double, Double)]

-- | Image item
data Image
Image :: ByteString -> (Double, Double) -> !Dimension -> Image
img_src :: Image -> ByteString
img_pos :: Image -> (Double, Double)
img_dim :: Image -> !Dimension
data SVG
SVG :: Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> SVG
svg_text :: SVG -> Maybe ByteString
svg_command :: SVG -> Maybe ByteString
svg_render :: SVG -> ByteString
svg_pos :: SVG -> (Double, Double)
svg_dim :: SVG -> !Dimension
data Dimension
Dim :: !Double -> !Double -> Dimension
dim_width :: Dimension -> !Double
dim_height :: Dimension -> !Double
data Background
Background :: !ByteString -> !ByteString -> !ByteString -> Background
bkg_type :: Background -> !ByteString
bkg_color :: Background -> !ByteString
bkg_style :: Background -> !ByteString
BackgroundPdf :: ByteString -> Maybe ByteString -> Maybe ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_domain :: Background -> Maybe ByteString
bkg_filename :: Background -> Maybe ByteString
bkg_pageno :: Background -> Int
data Hoodle
Hoodle :: !Title -> ![Page] -> Hoodle
hoodle_title :: Hoodle -> !Title
hoodle_pages :: Hoodle -> ![Page]
data Page
Page :: !Dimension -> !Background -> ![Layer] -> Page
page_dim :: Page -> !Dimension
page_bkg :: Page -> !Background
page_layers :: Page -> ![Layer]
data Layer
Layer :: ![Item] -> Layer
layer_items :: Layer -> ![Item]
getXYtuples :: Stroke -> [(Double, Double)]
tool :: Simple Lens Stroke ByteString
color :: Simple Lens Stroke ByteString
title :: Simple Lens Hoodle Title
pages :: Simple Lens Hoodle [Page]
dimension :: Simple Lens Page Dimension
background :: Simple Lens Page Background
layers :: Simple Lens Page [Layer]
items :: Simple Lens Layer [Item]
emptyHoodle :: Hoodle
emptyLayer :: Layer
emptyStroke :: Stroke
defaultBackground :: Background
defaultPage :: Page
defaultHoodle :: Hoodle
newPageFromOld :: Page -> Page
instance Show Stroke
instance Eq Stroke
instance Ord Stroke
instance Show Dimension
instance Eq Dimension
instance Ord Dimension
instance Show SVG
instance Eq SVG
instance Ord SVG
instance Show Image
instance Eq Image
instance Ord Image
instance Show Item
instance Eq Item
instance Ord Item
instance Show Background
instance Show Layer
instance Show Page
instance Show Hoodle
instance Serialize Dimension
instance (Serialize a, Serialize b) => Serialize (Pair a b)
instance Serialize Item
instance Serialize SVG
instance Serialize Image
instance Serialize Stroke


module Data.Hoodle.Simple.V0_2_2
type Title = ByteString

-- | wrapper of object embeddable in Layer
data Item
ItemStroke :: Stroke -> Item
ItemImage :: Image -> Item
ItemSVG :: SVG -> Item
ItemLink :: Link -> Item

-- | Pen stroke item
data Stroke
Stroke :: !ByteString -> !ByteString -> !Double -> ![Pair Double Double] -> Stroke
stroke_tool :: Stroke -> !ByteString
stroke_color :: Stroke -> !ByteString
stroke_width :: Stroke -> !Double
stroke_data :: Stroke -> ![Pair Double Double]
VWStroke :: ByteString -> ByteString -> [(Double, Double, Double)] -> Stroke
stroke_tool :: Stroke -> ByteString
stroke_color :: Stroke -> ByteString
stroke_vwdata :: Stroke -> [(Double, Double, Double)]

-- | Image item
data Image
Image :: ByteString -> (Double, Double) -> !Dimension -> Image
img_src :: Image -> ByteString
img_pos :: Image -> (Double, Double)
img_dim :: Image -> !Dimension
data SVG
SVG :: Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> SVG
svg_text :: SVG -> Maybe ByteString
svg_command :: SVG -> Maybe ByteString
svg_render :: SVG -> ByteString
svg_pos :: SVG -> (Double, Double)
svg_dim :: SVG -> !Dimension
data Link
Link :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_type :: Link -> ByteString
link_location :: Link -> ByteString
link_text :: Link -> Maybe ByteString
link_command :: Link -> Maybe ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
LinkDocID :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_linkeddocid :: Link -> ByteString
link_location :: Link -> ByteString
link_text :: Link -> Maybe ByteString
link_command :: Link -> Maybe ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
data Dimension
Dim :: !Double -> !Double -> Dimension
dim_width :: Dimension -> !Double
dim_height :: Dimension -> !Double
data Background
Background :: !ByteString -> !ByteString -> !ByteString -> Background
bkg_type :: Background -> !ByteString
bkg_color :: Background -> !ByteString
bkg_style :: Background -> !ByteString
BackgroundPdf :: ByteString -> Maybe ByteString -> Maybe ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_domain :: Background -> Maybe ByteString
bkg_filename :: Background -> Maybe ByteString
bkg_pageno :: Background -> Int
BackgroundEmbedPdf :: ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_pageno :: Background -> Int
data Revision
Revision :: !ByteString -> !ByteString -> Revision
_revmd5 :: Revision -> !ByteString
_revtxt :: Revision -> !ByteString
RevisionInk :: !ByteString -> [Stroke] -> Revision
_revmd5 :: Revision -> !ByteString
_revink :: Revision -> [Stroke]
data Hoodle
Hoodle :: ByteString -> !Title -> [Revision] -> Maybe ByteString -> ![Page] -> Hoodle
hoodle_id :: Hoodle -> ByteString
hoodle_title :: Hoodle -> !Title
hoodle_revisions :: Hoodle -> [Revision]
hoodle_embeddedpdf :: Hoodle -> Maybe ByteString
hoodle_pages :: Hoodle -> ![Page]
data Page
Page :: !Dimension -> !Background -> ![Layer] -> Page
page_dim :: Page -> !Dimension
page_bkg :: Page -> !Background
page_layers :: Page -> ![Layer]
data Layer
Layer :: ![Item] -> Layer
layer_items :: Layer -> ![Item]
getXYtuples :: Stroke -> [(Double, Double)]
tool :: Simple Lens Stroke ByteString
color :: Simple Lens Stroke ByteString
hoodleID :: Simple Lens Hoodle ByteString
title :: Simple Lens Hoodle Title
revisions :: Simple Lens Hoodle [Revision]
revmd5 :: Simple Lens Revision ByteString
embeddedPdf :: Simple Lens Hoodle (Maybe ByteString)
pages :: Simple Lens Hoodle [Page]
dimension :: Simple Lens Page Dimension
background :: Simple Lens Page Background
layers :: Simple Lens Page [Layer]
items :: Simple Lens Layer [Item]
emptyHoodle :: IO Hoodle
emptyLayer :: Layer
emptyStroke :: Stroke
defaultBackground :: Background
defaultPage :: Page
defaultHoodle :: IO Hoodle
newPageFromOld :: Page -> Page
instance Show Stroke
instance Eq Stroke
instance Ord Stroke
instance Show Dimension
instance Eq Dimension
instance Ord Dimension
instance Show Link
instance Eq Link
instance Ord Link
instance Show SVG
instance Eq SVG
instance Ord SVG
instance Show Image
instance Eq Image
instance Ord Image
instance Show Item
instance Eq Item
instance Ord Item
instance Show Background
instance Show Revision
instance Show Layer
instance Show Page
instance Show Hoodle
instance Serialize Dimension
instance (Serialize a, Serialize b) => Serialize (Pair a b)
instance Serialize Item
instance Serialize Link
instance Serialize SVG
instance Serialize Image
instance Serialize Stroke


module Data.Hoodle.Simple.V0_3
type Title = ByteString

-- | wrapper of object embeddable in Layer
data Item
ItemStroke :: Stroke -> Item
ItemImage :: Image -> Item
ItemSVG :: SVG -> Item
ItemLink :: Link -> Item
ItemAnchor :: Anchor -> Item

-- | Pen stroke item
data Stroke
Stroke :: !ByteString -> !ByteString -> !Double -> ![Pair Double Double] -> Stroke
stroke_tool :: Stroke -> !ByteString
stroke_color :: Stroke -> !ByteString
stroke_width :: Stroke -> !Double
stroke_data :: Stroke -> ![Pair Double Double]
VWStroke :: ByteString -> ByteString -> [(Double, Double, Double)] -> Stroke
stroke_tool :: Stroke -> ByteString
stroke_color :: Stroke -> ByteString
stroke_vwdata :: Stroke -> [(Double, Double, Double)]

-- | Image item
data Image
Image :: ByteString -> (Double, Double) -> !Dimension -> Image
img_src :: Image -> ByteString
img_pos :: Image -> (Double, Double)
img_dim :: Image -> !Dimension
data SVG
SVG :: Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> SVG
svg_text :: SVG -> Maybe ByteString
svg_command :: SVG -> Maybe ByteString
svg_render :: SVG -> ByteString
svg_pos :: SVG -> (Double, Double)
svg_dim :: SVG -> !Dimension
data Link
Link :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_type :: Link -> ByteString
link_location :: Link -> ByteString
link_text :: Link -> Maybe ByteString
link_command :: Link -> Maybe ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
LinkDocID :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_linkeddocid :: Link -> ByteString
link_location :: Link -> ByteString
link_text :: Link -> Maybe ByteString
link_command :: Link -> Maybe ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
LinkAnchor :: ByteString -> ByteString -> ByteString -> ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_linkeddocid :: Link -> ByteString
link_location :: Link -> ByteString
link_anchorid :: Link -> ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
data Anchor
Anchor :: ByteString -> ByteString -> (Double, Double) -> !Dimension -> Anchor
anchor_id :: Anchor -> ByteString
anchor_render :: Anchor -> ByteString
anchor_pos :: Anchor -> (Double, Double)
anchor_dim :: Anchor -> !Dimension
data Dimension
Dim :: !Double -> !Double -> Dimension
dim_width :: Dimension -> !Double
dim_height :: Dimension -> !Double
data Background
Background :: !ByteString -> !ByteString -> !ByteString -> Background
bkg_type :: Background -> !ByteString
bkg_color :: Background -> !ByteString
bkg_style :: Background -> !ByteString
BackgroundPdf :: ByteString -> Maybe ByteString -> Maybe ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_domain :: Background -> Maybe ByteString
bkg_filename :: Background -> Maybe ByteString
bkg_pageno :: Background -> Int
BackgroundEmbedPdf :: ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_pageno :: Background -> Int
data Revision
Revision :: !ByteString -> !ByteString -> Revision
_revmd5 :: Revision -> !ByteString
_revtxt :: Revision -> !ByteString
RevisionInk :: !ByteString -> [Stroke] -> Revision
_revmd5 :: Revision -> !ByteString
_revink :: Revision -> [Stroke]
data Hoodle
Hoodle :: ByteString -> !Title -> [Revision] -> Maybe ByteString -> Maybe Text -> ![Page] -> Hoodle
hoodle_id :: Hoodle -> ByteString
hoodle_title :: Hoodle -> !Title
hoodle_revisions :: Hoodle -> [Revision]
hoodle_embeddedpdf :: Hoodle -> Maybe ByteString
hoodle_embeddedtext :: Hoodle -> Maybe Text
hoodle_pages :: Hoodle -> ![Page]
data Page
Page :: !Dimension -> !Background -> ![Layer] -> Page
page_dim :: Page -> !Dimension
page_bkg :: Page -> !Background
page_layers :: Page -> ![Layer]
data Layer
Layer :: ![Item] -> Layer
layer_items :: Layer -> ![Item]
getXYtuples :: Stroke -> [(Double, Double)]
tool :: Simple Lens Stroke ByteString
color :: Simple Lens Stroke ByteString
hoodleID :: Simple Lens Hoodle ByteString
title :: Simple Lens Hoodle Title
revisions :: Simple Lens Hoodle [Revision]
revmd5 :: Simple Lens Revision ByteString
embeddedPdf :: Simple Lens Hoodle (Maybe ByteString)
embeddedText :: Simple Lens Hoodle (Maybe Text)
pages :: Simple Lens Hoodle [Page]
dimension :: Simple Lens Page Dimension
background :: Simple Lens Page Background
layers :: Simple Lens Page [Layer]
items :: Simple Lens Layer [Item]
emptyHoodle :: IO Hoodle
emptyLayer :: Layer
emptyStroke :: Stroke
defaultBackground :: Background
defaultPage :: Page
defaultHoodle :: IO Hoodle
newPageFromOld :: Page -> Page
instance Show Stroke
instance Eq Stroke
instance Ord Stroke
instance Show Dimension
instance Eq Dimension
instance Ord Dimension
instance Show Anchor
instance Eq Anchor
instance Ord Anchor
instance Show Link
instance Eq Link
instance Ord Link
instance Show SVG
instance Eq SVG
instance Ord SVG
instance Show Image
instance Eq Image
instance Ord Image
instance Show Item
instance Eq Item
instance Ord Item
instance Show Background
instance Show Revision
instance Show Layer
instance Show Page
instance Show Hoodle
instance Serialize Dimension
instance (Serialize a, Serialize b) => Serialize (Pair a b)
instance Serialize Item
instance Serialize Anchor
instance Serialize Link
instance Serialize SVG
instance Serialize Image
instance Serialize Stroke


module Data.Hoodle.Simple
type Title = ByteString

-- | wrapper of object embeddable in Layer
data Item
ItemStroke :: Stroke -> Item
ItemImage :: Image -> Item
ItemSVG :: SVG -> Item
ItemLink :: Link -> Item
ItemAnchor :: Anchor -> Item

-- | Pen stroke item
data Stroke
Stroke :: !ByteString -> !ByteString -> !Double -> ![Pair Double Double] -> Stroke
stroke_tool :: Stroke -> !ByteString
stroke_color :: Stroke -> !ByteString
stroke_width :: Stroke -> !Double
stroke_data :: Stroke -> ![Pair Double Double]
VWStroke :: ByteString -> ByteString -> [(Double, Double, Double)] -> Stroke
stroke_tool :: Stroke -> ByteString
stroke_color :: Stroke -> ByteString
stroke_vwdata :: Stroke -> [(Double, Double, Double)]

-- | Image item
data Image
Image :: ByteString -> (Double, Double) -> !Dimension -> Image
img_src :: Image -> ByteString
img_pos :: Image -> (Double, Double)
img_dim :: Image -> !Dimension
data SVG
SVG :: Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> SVG
svg_text :: SVG -> Maybe ByteString
svg_command :: SVG -> Maybe ByteString
svg_render :: SVG -> ByteString
svg_pos :: SVG -> (Double, Double)
svg_dim :: SVG -> !Dimension
data Link
Link :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_type :: Link -> ByteString
link_location :: Link -> ByteString
link_text :: Link -> Maybe ByteString
link_command :: Link -> Maybe ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
LinkDocID :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> Maybe ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_linkeddocid :: Link -> ByteString
link_location :: Link -> ByteString
link_text :: Link -> Maybe ByteString
link_command :: Link -> Maybe ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
LinkAnchor :: ByteString -> ByteString -> ByteString -> ByteString -> ByteString -> (Double, Double) -> !Dimension -> Link
link_id :: Link -> ByteString
link_linkeddocid :: Link -> ByteString
link_location :: Link -> ByteString
link_anchorid :: Link -> ByteString
link_render :: Link -> ByteString
link_pos :: Link -> (Double, Double)
link_dim :: Link -> !Dimension
data Anchor
Anchor :: ByteString -> ByteString -> (Double, Double) -> !Dimension -> Anchor
anchor_id :: Anchor -> ByteString
anchor_render :: Anchor -> ByteString
anchor_pos :: Anchor -> (Double, Double)
anchor_dim :: Anchor -> !Dimension
data Dimension
Dim :: !Double -> !Double -> Dimension
dim_width :: Dimension -> !Double
dim_height :: Dimension -> !Double
data Background
Background :: !ByteString -> !ByteString -> !ByteString -> Background
bkg_type :: Background -> !ByteString
bkg_color :: Background -> !ByteString
bkg_style :: Background -> !ByteString
BackgroundPdf :: ByteString -> Maybe ByteString -> Maybe ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_domain :: Background -> Maybe ByteString
bkg_filename :: Background -> Maybe ByteString
bkg_pageno :: Background -> Int
BackgroundEmbedPdf :: ByteString -> Int -> Background
bkg_type :: Background -> ByteString
bkg_pageno :: Background -> Int
data Revision
Revision :: !ByteString -> !ByteString -> Revision
_revmd5 :: Revision -> !ByteString
_revtxt :: Revision -> !ByteString
RevisionInk :: !ByteString -> [Stroke] -> Revision
_revmd5 :: Revision -> !ByteString
_revink :: Revision -> [Stroke]
data Hoodle
Hoodle :: ByteString -> !Title -> [Revision] -> Maybe ByteString -> Maybe Text -> ![Page] -> Hoodle
hoodle_id :: Hoodle -> ByteString
hoodle_title :: Hoodle -> !Title
hoodle_revisions :: Hoodle -> [Revision]
hoodle_embeddedpdf :: Hoodle -> Maybe ByteString
hoodle_embeddedtext :: Hoodle -> Maybe Text
hoodle_pages :: Hoodle -> ![Page]
data Page
Page :: !Dimension -> !Background -> ![Layer] -> Page
page_dim :: Page -> !Dimension
page_bkg :: Page -> !Background
page_layers :: Page -> ![Layer]
data Layer
Layer :: ![Item] -> Layer
layer_items :: Layer -> ![Item]
getXYtuples :: Stroke -> [(Double, Double)]
tool :: Simple Lens Stroke ByteString
color :: Simple Lens Stroke ByteString
hoodleID :: Simple Lens Hoodle ByteString
title :: Simple Lens Hoodle Title
revisions :: Simple Lens Hoodle [Revision]
revmd5 :: Simple Lens Revision ByteString
embeddedPdf :: Simple Lens Hoodle (Maybe ByteString)
embeddedText :: Simple Lens Hoodle (Maybe Text)
pages :: Simple Lens Hoodle [Page]
dimension :: Simple Lens Page Dimension
background :: Simple Lens Page Background
layers :: Simple Lens Page [Layer]
items :: Simple Lens Layer [Item]
emptyHoodle :: IO Hoodle
emptyLayer :: Layer
emptyStroke :: Stroke
defaultBackground :: Background
defaultPage :: Page
defaultHoodle :: IO Hoodle
newPageFromOld :: Page -> Page
instance Show Stroke
instance Eq Stroke
instance Ord Stroke
instance Show Dimension
instance Eq Dimension
instance Ord Dimension
instance Show Anchor
instance Eq Anchor
instance Ord Anchor
instance Show Link
instance Eq Link
instance Ord Link
instance Show SVG
instance Eq SVG
instance Ord SVG
instance Show Image
instance Eq Image
instance Ord Image
instance Show Item
instance Eq Item
instance Ord Item
instance Show Background
instance Show Revision
instance Show Layer
instance Show Page
instance Show Hoodle
instance Serialize Dimension
instance (Serialize a, Serialize b) => Serialize (Pair a b)
instance Serialize Item
instance Serialize Anchor
instance Serialize Link
instance Serialize SVG
instance Serialize Image
instance Serialize Stroke


module Data.Hoodle.Generic
data PDFData
PDFData :: ByteString -> Int -> PDFData
pdfBase64 :: PDFData -> ByteString
pdfNumPages :: PDFData -> Int

-- | Generic Hoodle data having generic pages
data GHoodle cntnr pg
GHoodle :: ByteString -> ByteString -> [Revision] -> Maybe PDFData -> Maybe Text -> cntnr pg -> GHoodle cntnr pg
ghoodle_id :: GHoodle cntnr pg -> ByteString
ghoodle_ttl :: GHoodle cntnr pg -> ByteString
ghoodle_revisions :: GHoodle cntnr pg -> [Revision]
ghoodle_embeddedpdf :: GHoodle cntnr pg -> Maybe PDFData
ghoodle_embeddedtext :: GHoodle cntnr pg -> Maybe Text
ghoodle_pgs :: GHoodle cntnr pg -> cntnr pg

-- | Generic page data having dimension, generic background and generic
--   layers
data GPage bkg cntnr lyr
GPage :: Dimension -> bkg -> cntnr lyr -> GPage bkg cntnr lyr
gpage_dim :: GPage bkg cntnr lyr -> Dimension
gpage_bkg :: GPage bkg cntnr lyr -> bkg
gpage_lyrs :: GPage bkg cntnr lyr -> cntnr lyr

-- | Generic buffered layer having generic items
data GLayer buf cntnr itm
GLayer :: buf -> cntnr itm -> GLayer buf cntnr itm
glayer_buf :: GLayer buf cntnr itm -> buf
glayer_itms :: GLayer buf cntnr itm -> cntnr itm
ghoodleID :: Simple Lens (GHoodle cntnr pg) ByteString
gtitle :: Simple Lens (GHoodle cntnr pg) ByteString
grevisions :: Simple Lens (GHoodle cntnr pg) [Revision]
gembeddedpdf :: Simple Lens (GHoodle cntnr pg) (Maybe PDFData)
gembeddedtext :: Simple Lens (GHoodle cntnr pg) (Maybe Text)
gpages :: Simple Lens (GHoodle cntnr pg) (cntnr pg)
gdimension :: Simple Lens (GPage bkg cntnr pg) Dimension
gbackground :: Simple Lens (GPage bkg cntnr lyr) bkg
glayers :: Simple Lens (GPage bkg cntnr lyr) (cntnr lyr)
gitems :: Simple Lens (GLayer buf cntnr itm) (cntnr itm)
gbuffer :: Simple Lens (GLayer buf cntnr itm) buf
class Foldable s => Listable s
fromList :: Listable s => [a] -> s a
emptyGHoodle :: Listable m => IO (GHoodle m a)
emptyGPage :: Listable cntnr => Dimension -> bkg -> GPage bkg cntnr a
instance Listable Seq
instance Listable IntMap
instance Listable []
instance Functor cntnr => Functor (GHoodle cntnr)
instance Functor cntnr => Functor (GPage bkg cntnr)
instance Functor cntnr => Functor (GLayer buf cntnr)


-- | representing selection of hoodle type
module Data.Hoodle.Zipper
type NonEmptyList a = (a, [a])
newtype SeqZipper a
SZ :: (a, (Seq a, Seq a)) -> SeqZipper a
unSZ :: SeqZipper a -> (a, (Seq a, Seq a))

-- | deriving instance Foldable SeqZipper
singletonSZ :: a -> SeqZipper a
lengthSZ :: SeqZipper a -> Int
currIndex :: SeqZipper a -> Int
appendGoLast :: SeqZipper a -> a -> SeqZipper a
chopFirst :: SeqZipper a -> Maybe (SeqZipper a)
moveLeft :: SeqZipper a -> Maybe (SeqZipper a)
moveRight :: SeqZipper a -> Maybe (SeqZipper a)
moveTo :: Int -> SeqZipper a -> Maybe (SeqZipper a)
goFirst :: SeqZipper a -> SeqZipper a
goLast :: SeqZipper a -> SeqZipper a
current :: SeqZipper a -> a
prev :: SeqZipper a -> Maybe a
next :: SeqZipper a -> Maybe a
replace :: a -> SeqZipper a -> SeqZipper a
deleteCurrent :: SeqZipper a -> Maybe (SeqZipper a)
fromNonEmptyList :: NonEmptyList a -> SeqZipper a
toSeq :: SeqZipper a -> Seq a
type ZipperSelect = SeqZipper
selectFirst :: ZipperSelect a -> ZipperSelect a
instance Traversable SeqZipper
instance Functor SeqZipper
instance Applicative SeqZipper
instance Foldable SeqZipper


module Data.Hoodle.Select
data GSelect a b
GSelect :: ByteString -> ByteString -> [Revision] -> Maybe PDFData -> Maybe Text -> a -> b -> GSelect a b
gselect_id :: GSelect a b -> ByteString
gselect_ttl :: GSelect a b -> ByteString
gselect_revisions :: GSelect a b -> [Revision]
gselect_embeddedpdf :: GSelect a b -> Maybe PDFData
gselect_embeddedtext :: GSelect a b -> Maybe Text
gselect_all :: GSelect a b -> a
gselect_selected :: GSelect a b -> b
gselHoodleID :: Simple Lens (GSelect a b) ByteString
gselTitle :: Simple Lens (GSelect a b) ByteString
gselRevisions :: Simple Lens (GSelect a b) [Revision]
gselEmbeddedPdf :: Simple Lens (GSelect a b) (Maybe PDFData)
gselEmbeddedText :: Simple Lens (GSelect a b) (Maybe Text)
gselAll :: Simple Lens (GSelect a b) a
gselSelected :: Simple Lens (GSelect a b) b
gSelect2GHoodle :: GSelect (m a) b -> GHoodle m a
gHoodle2GSelect :: GHoodle m a -> GSelect (m a) (Maybe b)


module Data.Hoodle.BBox

-- | bounding box type
data BBox
BBox :: (Double, Double) -> (Double, Double) -> BBox
bbox_upperleft :: BBox -> (Double, Double)
bbox_lowerright :: BBox -> (Double, Double)
class GetBBoxable a
getBBox :: GetBBoxable a => a -> BBox
class Monad m => MakeBBoxedable m a
makeBBoxed :: MakeBBoxedable m a => a -> m (BBoxed a)
data BBoxed a
BBoxed :: a -> BBox -> BBoxed a
bbxed_content :: BBoxed a -> a
bbxed_bbx :: BBoxed a -> BBox
mkbbox :: [Pair Double Double] -> BBox
mkbboxF :: (Foldable m, Functor m) => m (Double, Double) -> BBox
bboxFromStroke :: Stroke -> BBox
bboxFromImage :: Image -> BBox
bboxFromSVG :: SVG -> BBox
dimToBBox :: Dimension -> BBox

-- | |
bboxToDim :: BBox -> Dimension

-- | general transform BBox
xformBBox :: ((Double, Double) -> (Double, Double)) -> BBox -> BBox

-- | inflate bbox by amount r
inflate :: BBox -> Double -> BBox
moveBBoxToOrigin :: BBox -> BBox
moveBBoxByOffset :: (Double, Double) -> BBox -> BBox
moveBBoxULCornerTo :: (Double, Double) -> BBox -> BBox
intersectBBox :: BBox -> BBox -> Maybe BBox
unionBBox :: BBox -> BBox -> BBox
data ULMaybe a
Bottom :: ULMaybe a
Middle :: a -> ULMaybe a
Top :: ULMaybe a
newtype IntersectBBox
Intersect :: ULMaybe BBox -> IntersectBBox
unIntersect :: IntersectBBox -> ULMaybe BBox
newtype UnionBBox
Union :: ULMaybe BBox -> UnionBBox
unUnion :: UnionBBox -> ULMaybe BBox
class Maybeable a where type family ElemType a :: *
toMaybe :: Maybeable a => a -> Maybe (ElemType a)
fromMaybe :: Maybeable a => Maybe (ElemType a) -> a
bbox4All :: (Foldable t, Functor t, GetBBoxable a) => t a -> ULMaybe BBox
instance Eq a => Eq (ULMaybe a)
instance Show a => Show (ULMaybe a)
instance Ord a => Ord (BBoxed a)
instance Eq a => Eq (BBoxed a)
instance Show a => Show (BBoxed a)
instance Show BBox
instance Eq BBox
instance Ord BBox
instance Show IntersectBBox
instance Eq IntersectBBox
instance Show UnionBBox
instance Eq UnionBBox
instance Maybeable UnionBBox
instance Maybeable IntersectBBox
instance Monoid UnionBBox
instance Monoid IntersectBBox
instance MakeBBoxedable Identity Anchor
instance MakeBBoxedable Identity Link
instance MakeBBoxedable Identity SVG
instance MakeBBoxedable Identity Image
instance MakeBBoxedable Identity Stroke
instance GetBBoxable (BBoxed a)
instance Serialize BBox
