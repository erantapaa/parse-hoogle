-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parse command line options using uu-interleave and uu-parsinglib
--   
@package uu-options
@version 0.2.0.0

module Options.UU.Interleaved

-- | a <a>required</a> entry specied an entry which has to be provided; in
--   the record containing the default values one may put <a>undefined</a>
required :: Entry a a

-- | an <a>option</a> entry specied an entry which may be provided; if
--   absent the default value is taken
option :: Entry a a

-- | An <a>options</a> entry specifies an element which may occur more than
--   once. The final value contains the list of all the values encountered.
options :: Entry [a] a

-- | An <tt>optionl</tt> entry specifies an element which may occur more
--   than once. The last one encountered is taken optionsl :: Entry a a
optionsl :: (ShowParserType a, MonadState [a] m) => (m () -> StateT [b1] Identity b) -> ([Char], P (Str Char String Int) a, [Char]) -> (Gram (P (Str Char String Int)) (b2 -> b1), [Char])

-- | An <tt>optionf</tt> entry specifies an element which may occur more
--   than once. The first one encountered is taken optionsf :: Entry a a
optionsf :: (ShowParserType a, MonadState [a] m) => (m () -> StateT [c] Identity b) -> ([Char], P (Str Char String Int) a, [Char]) -> (Gram (P (Str Char String Int)) ([c] -> c), [Char])

-- | A <a>flag</a> entry sets a field to a specific value when encountered
flag :: EntryVal a a

-- | A <a>flags</a> entry introduces a list of possible parameters, each
--   with a value to which the field should be set
flags :: EntryVals a a

-- | A <a>field</a> entry introduces a collection of options which are used
--   to set fields in a sub-record of the main record
field :: (Functor f, MonadState a m) => (m () -> StateT r Identity b) -> (f (a -> a), t) -> (f (r -> r), t)

-- | A <a>choose</a> entry introduces a list of choices for the specific
--   entry; precisely one should be given
choose :: EntryVals a a

-- | A <a>change</a> entry is an optional <a>choose</a> entry
change :: EntryVals a a
class ShowParserType a
showType :: ShowParserType a => OptionParser a -> String
pString :: (IsLocationUpdatedBy loc Char, ListLike state Char) => P (Str Char state loc) [Char]
pBool :: (IsLocationUpdatedBy loc Char, ListLike state Char) => P (Str Char state loc) Bool

-- | The function <a>run</a> equips the given option specification with an
--   option to ask for <tt>--help</tt>. It concatenates the files coming
--   from the command line and terminates them with an EOT. Make sure your
--   command line arguments do not contain an EOT. It parses the command
--   line arguments and updates the `default` record passed to it
run :: a -> (Gram (P (Str Char String Int)) (a -> a), String) -> String -> Either (OptionResult a) [Char]
data OptionResult a
Succes :: a -> OptionResult a
Help :: String -> OptionResult a
instance ShowParserType Bool
instance ShowParserType Char
instance ShowParserType Int
instance ShowParserType a => ShowParserType [a]
instance Splittable (P (Str Char String Int))

module Options.UU.Demo
data Prefers
Agda :: Prefers
Haskell :: Prefers
data Address
Address :: String -> String -> Address
city_ :: Address -> String
street_ :: Address -> String
data Name
Name :: String -> Prefers -> [Int] -> Address -> Name
name_ :: Name -> String
prefers_ :: Name -> Prefers
ints_ :: Name -> [Int]
address_ :: Name -> Address
address :: MonadState Name m => StateT Address m b -> m b
ints :: MonadState Name m => StateT [Int] m b -> m b
prefers :: MonadState Name m => StateT Prefers m b -> m b
name :: MonadState Name m => StateT String m b -> m b
street :: MonadState Address m => StateT String m b -> m b
city :: MonadState Address m => StateT String m b -> m b
defaults :: Name
oName :: (Gram (P (Str Char String Int)) (Name -> Name), [Char])
demo :: [[Char]] -> IO ()
instance ShowParserType Prefers
instance Show Prefers
instance Show Address
instance Show Name
