-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | CRUD for JSON data with Redis storage
--   
--   This snaplet provides HTTP API to <i>c</i>reate, <i>r</i>ead,
--   <i>u</i>pdate and <i>d</i>elete JSON objects sent by client and stored
--   in Redis key-value cache. CRUD methods are mapped to HTTP <a>POST</a>,
--   <a>GET</a>, <a>PUT</a> and <a>DELETE</a>. Valid objects are described
--   using model definition syntax, which includes information on fields
--   and permissions. The snaplet supports role-based user permissions
--   system as implemented by Snap authentication. Model definitions may
--   also be used by browser JavaScript to provide interface to create or
--   edit objects. There is a permission-less transparent mode, WebSocket
--   create/delete notifications and timeline method to serve information
--   about recently added objects. Ad-hoc search is implemented in Redis
--   and provided via snaplet route. There's a <a>snapless</a> part of the
--   package, which implements Snap-agnostic Redis CRUD operations for
--   key-value pair collections and may be used for tools which operate
--   with storage directly without using web framework. More of usage
--   documentation is contained in
--   <a>https://github.com/dzhus/snaplet-redson/blob/master/README.org</a>
@package snaplet-redson
@version 0.1.0.0


-- | Miscellaneous functions for Snap.
module Snap.Snaplet.Redson.Util

-- | Get parameter value from Request or return empty string
fromParam :: MonadSnap m => ByteString -> m ByteString

-- | Get integer parameter value from Request or return default value.
fromIntParam :: MonadSnap m => ByteString -> Int -> m Int
data Error
Error :: Int -> Error

-- | Error response code
code :: Error -> Int

-- | Short-circuit MonadSnap flow with error response
handleError :: MonadSnap m => Error -> m ()
notFound :: Error
serverError :: Error
unauthorized :: Error
forbidden :: Error


-- | Model definition parser, served model routines.
module Snap.Snaplet.Redson.Snapless.Metamodel
type ModelName = ByteString
type FieldName = ByteString
type FieldValue = ByteString

-- | Name of indexed field and collation flag.
type FieldIndex = (FieldName, Bool)

-- | List of field key-value pairs.
--   
--   Suitable for using with <a>hmset</a>.
type Commit = Map FieldName FieldValue

-- | Field permissions property.
data Permissions
Roles :: [ByteString] -> Permissions
Everyone :: Permissions
Nobody :: Permissions
data FieldTargets
Fields :: [FieldName] -> FieldTargets
AllFields :: FieldTargets
NoneFields :: FieldTargets

-- | Map of field annotations which are transparently handled by server
--   without any logic.
type FieldMeta = Map FieldName Value

-- | Form field object.
data Field
Field :: FieldName -> ByteString -> Bool -> Bool -> Maybe ByteString -> Maybe FieldMeta -> Permissions -> Permissions -> Field
name :: Field -> FieldName
fieldType :: Field -> ByteString
index :: Field -> Bool
indexCollate :: Field -> Bool
groupName :: Field -> Maybe ByteString
meta :: Field -> Maybe FieldMeta
_canRead :: Field -> Permissions
_canWrite :: Field -> Permissions
canWrite :: Lens Field Permissions
canRead :: Lens Field Permissions

-- | A list of properties to be applied to named fields.
data Application
Application :: FieldTargets -> Maybe FieldMeta -> Maybe Permissions -> Maybe Permissions -> Application
targets :: Application -> FieldTargets
apMeta :: Application -> Maybe FieldMeta
_apRead :: Application -> Maybe Permissions
_apWrite :: Application -> Maybe Permissions
apWrite :: Lens Application (Maybe Permissions)
apRead :: Lens Application (Maybe Permissions)

-- | Model describes fields and permissions.
--   
--   Models are built from JSON definitions (using FromJSON instance for
--   Model) with further group splicing (<a>spliceGroups</a>), applications
--   (<a>doApplications</a>) and index caching (<a>cacheIndices</a>).
data Model
Model :: ModelName -> ByteString -> [Field] -> [Application] -> Permissions -> Permissions -> Permissions -> Permissions -> [FieldIndex] -> Model
modelName :: Model -> ModelName
title :: Model -> ByteString
fields :: Model -> [Field]
applications :: Model -> [Application]
_canCreateM :: Model -> Permissions
_canReadM :: Model -> Permissions
_canUpdateM :: Model -> Permissions
_canDeleteM :: Model -> Permissions

-- | Cached list of index fields.
indices :: Model -> [FieldIndex]
canDeleteM :: Lens Model Permissions
canUpdateM :: Lens Model Permissions
canReadM :: Lens Model Permissions
canCreateM :: Lens Model Permissions

-- | Used when field type is not specified in model description.
defaultFieldType :: ByteString

-- | A named group of fields.
type Groups = Map ByteString [Field]

-- | Build new name <tt>f_gK</tt> for every field of group <tt>g</tt> to
--   which field <tt>f</tt> is spliced into.
groupFieldName :: FieldName -> FieldName -> FieldName

-- | Replace all model fields having <a>groupName</a> annotation with
--   actual group fields.
spliceGroups :: Groups -> Model -> Model

-- | Perform all applications in model.
doApplications :: Model -> Model

-- | Set indices field of model to list of <a>FieldIndex</a>es
cacheIndices :: Model -> Model
instance FromJSON Application
instance FromJSON FieldTargets
instance ToJSON Field
instance FromJSON Field
instance ToJSON Permissions
instance FromJSON Permissions
instance ToJSON Model
instance FromJSON Model
instance Show Model
instance Show Application
instance Show Permissions
instance Show FieldTargets
instance Show Field


-- | Model definitions loader.
module Snap.Snaplet.Redson.Snapless.Metamodel.Loader

-- | Load groups from definitions file.
loadGroups :: FilePath -> IO (Maybe Groups)

-- | Load model from specified location, performing group splicing,
--   applications and filling index cache.
loadModel :: FilePath -> Groups -> IO (Maybe Model)

-- | Read all models from directory to a map.
--   
--   TODO: Perhaps rely on special directory file which explicitly lists
--   all models.
loadModels :: FilePath -> FilePath -> IO (Map ModelName Model)


-- | Snap-agnostic low-level CRUD operations. No model definitions are used
--   on this level. Instead, objects must be
--   
--   This module may be used for batch uploading of database data.
module Snap.Snaplet.Redson.Snapless.CRUD

-- | Create new instance in Redis and indices for it.
--   
--   Bump model id counter and update timeline, return new instance id.
--   
--   TODO: Support pubsub from here
create :: ModelName -> Commit -> [FieldIndex] -> Redis (Either Reply InstanceId)

-- | Modify existing instance in Redis, updating indices
--   
--   TODO: Handle non-existing instance as error here?
update :: ModelName -> InstanceId -> Commit -> [FieldIndex] -> Redis (Either Reply ())

-- | Remove existing instance in Redis, cleaning up old indices.
--   
--   Does not check if instance exists.
delete :: ModelName -> InstanceId -> [FieldIndex] -> Redis (Either Reply ())
type InstanceId = ByteString

-- | Build Redis key given model name and instance id
instanceKey :: ModelName -> InstanceId -> ByteString

-- | Build Redis key for field index of model.
modelIndex :: ModelName -> ByteString -> ByteString -> ByteString

-- | Get Redis key which stores timeline for model
modelTimeline :: ModelName -> ByteString

-- | Strip value of punctuation, spaces, convert all to lowercase.
collate :: FieldValue -> FieldValue

-- | Extract values of named fields from commit.
onlyFields :: Commit -> [FieldName] -> [Maybe FieldValue]


-- | CRUD for JSON data with Redis storage.
--   
--   Can be used as Backbone.sync backend.
module Snap.Snaplet.Redson

-- | Redson snaplet state type.
data Redson b

-- | Initialize Redson. AuthManager from parent snaplet is required.
--   
--   Connect to Redis, read configuration and set routes.
--   
--   <pre>
--   appInit :: SnapletInit MyApp MyApp
--   appInit = makeSnaplet "app" "App with Redson" Nothing $
--             do
--               r &lt;- nestSnaplet "_" redson $ redsonInit auth
--               s &lt;- nestSnaplet "session" session $ initCookieSessionManager
--                                                    sesKey "_session" sessionTimeout
--               a &lt;- nestSnaplet "auth" auth $ initJsonFileAuthManager defAuthSettings
--               return $ MyApp r s a
--   </pre>
redsonInit :: Lens b (Snaplet (AuthManager b)) -> SnapletInit b (Redson b)
