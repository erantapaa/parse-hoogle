-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A compiler for CoPilot targeting SBV.
--   
--   The Copilot back-end targeting SBV
--   <a>http://hackage.haskell.org/package/sbv</a>.
--   
--   Copilot is a stream (i.e., infinite lists) domain-specific language
--   (DSL) in Haskell that compiles into embedded C. Copilot contains an
--   interpreter, multiple back-end compilers, and other verification
--   tools. A tutorial, bug reports, and todos are available at
--   <a>https://github.com/niswegmann/copilot-discussion</a>.
--   
--   Examples are available at
--   <a>https://github.com/leepike/Copilot/tree/master/Examples</a>.
@package copilot-sbv
@version 2.1.2


-- | Implements queues holding stream values.
module Copilot.Compile.SBV.Queue
data Queue a
Queue :: [a] -> Queue a
queue :: Queue a -> [a]
lookahead :: SymWord a => DropIdx -> [SBV a] -> SBV QueueSize -> SBV a
type QueueSize = DropIdx

module Copilot.Compile.SBV.Common
mkTmpStVar :: Id -> String
mkUpdateStFn :: Id -> String
mkQueueVar :: Id -> String
mkQueuePtrVar :: Id -> String
mkExtTmpVar :: String -> String
mkExtTmpTag :: String -> Maybe Tag -> String
mkExtArrFn :: String -> String
mkExtFunArgFn :: Int -> String -> Maybe Tag -> String
mkObserverFn :: String -> String
mkTriggerGuardFn :: String -> String
mkTriggerArgFn :: Int -> String -> String
mkArgIdx :: [a] -> [(Int, a)]
tagExtract :: Maybe Tag -> Tag

module Copilot.Compile.SBV.Witness
data SymWordInst a
SymWordInst :: SymWordInst a
symWordInst :: Type a -> SymWordInst a
data NumInst a
NumInst :: NumInst a
numInst :: Type a -> NumInst a
data HasSignAndSizeInst a
HasSignAndSizeInst :: HasSignAndSizeInst a
hasSignAndSizeInst :: Type a -> HasSignAndSizeInst a
data EqInst a
EqInst :: EqInst a
eqInst :: Type a -> EqInst a
data CastInst a b
CastInst :: CastInst a b
castInst :: Type a -> Type b -> CastInst a b
sbvCast :: SBVCast a b => SBV a -> SBV b
data BVDivisibleInst a
BVDivisibleInst :: BVDivisibleInst a
divInst :: Type a -> BVDivisibleInst a
data OrdInst a
OrdInst :: OrdInst a
ordInst :: Type a -> OrdInst a
data MergeableInst a
MergeableInst :: MergeableInst a
mergeableInst :: Type a -> MergeableInst a
data BitsInst a
BitsInst :: BitsInst a
bitsInst :: Type a -> BitsInst a
instance SBVCast Int64 Int64
instance SBVCast Int32 Int64
instance SBVCast Int32 Int32
instance SBVCast Int16 Int64
instance SBVCast Int16 Int32
instance SBVCast Int16 Int16
instance SBVCast Int8 Int64
instance SBVCast Int8 Int32
instance SBVCast Int8 Int16
instance SBVCast Int8 Int8
instance SBVCast Word64 Word64
instance SBVCast Word32 Int64
instance SBVCast Word32 Word64
instance SBVCast Word32 Word32
instance SBVCast Word16 Int64
instance SBVCast Word16 Int32
instance SBVCast Word16 Word64
instance SBVCast Word16 Word32
instance SBVCast Word16 Word16
instance SBVCast Word8 Int64
instance SBVCast Word8 Int32
instance SBVCast Word8 Int16
instance SBVCast Word8 Word64
instance SBVCast Word8 Word32
instance SBVCast Word8 Word16
instance SBVCast Word8 Word8
instance SBVCast Bool Int64
instance SBVCast Bool Int32
instance SBVCast Bool Int16
instance SBVCast Bool Int8
instance SBVCast Bool Word64
instance SBVCast Bool Word32
instance SBVCast Bool Word16
instance SBVCast Bool Word8
instance SBVCast Bool Bool

module Copilot.Compile.SBV.Copilot2SBV
c2sExpr :: Inputs -> Expr a -> SBV a
data Inputs
Inputs :: [Ext] -> [Ext] -> [Ext] -> [ExtQue] -> Inputs
extVars :: Inputs -> [Ext]
extArrs :: Inputs -> [Ext]
extFuns :: Inputs -> [Ext]
extQues :: Inputs -> [ExtQue]
type Ext = (Name, ExtInput)
type ExtQue = (Id, QueInput)
data ExtInput
ExtInput :: SBV a -> Type a -> ExtInput
extInput :: ExtInput -> SBV a
extType :: ExtInput -> Type a
data QueInput
QueInput :: QueueIn a -> QueInput
arrInput :: QueInput -> QueueIn a
data QueueIn a
QueueIn :: [SBV a] -> SBV QueueSize -> Type a -> QueueIn a
queue :: QueueIn a -> [SBV a]
quePtr :: QueueIn a -> SBV QueueSize
arrType :: QueueIn a -> Type a

module Copilot.Compile.SBV.MetaTable
type StreamInfoMap = Map Id Stream
type ExternVarInfoMap = Map Name ExtVar
type ExternArrInfoMap = Map Tag ExtArray
type ExternFunInfoMap = Map Tag ExtFun
data TriggerInfo
TriggerInfo :: [String] -> [[String]] -> TriggerInfo
guardArgs :: TriggerInfo -> [String]
triggerArgArgs :: TriggerInfo -> [[String]]
type TriggerInfoMap = Map Name TriggerInfo
data ObserverInfo
ObserverInfo :: [String] -> ObserverInfo
observerArgs :: ObserverInfo -> [String]
type ObserverInfoMap = Map Name ObserverInfo
data MetaTable
MetaTable :: StreamInfoMap -> ExternVarInfoMap -> ExternArrInfoMap -> ExternFunInfoMap -> TriggerInfoMap -> ObserverInfoMap -> MetaTable
streamInfoMap :: MetaTable -> StreamInfoMap
externVarInfoMap :: MetaTable -> ExternVarInfoMap
externArrInfoMap :: MetaTable -> ExternArrInfoMap
externFunInfoMap :: MetaTable -> ExternFunInfoMap
triggerInfoMap :: MetaTable -> TriggerInfoMap
observerInfoMap :: MetaTable -> ObserverInfoMap
allocMetaTable :: Spec -> MetaTable
collectArgs :: Expr a -> [String]
data Arg
Extern :: Name -> Arg
ExternFun :: Name -> Tag -> Arg
ExternArr :: Name -> Tag -> Arg
Queue :: Id -> Arg
c2Args :: Expr a -> [Arg]
instance Eq Arg

module Copilot.Compile.SBV.Code
updateStates :: MetaTable -> Spec -> [SBVFunc]
updateObservers :: MetaTable -> Spec -> [SBVFunc]
fireTriggers :: MetaTable -> Spec -> [SBVFunc]
getExtArrs :: MetaTable -> [SBVFunc]
getExtFuns :: MetaTable -> [SBVFunc]

module Copilot.Compile.SBV.Params
data Params
Params :: Maybe String -> Params
prefix :: Params -> Maybe String
defaultParams :: Params
withPrefix :: Maybe String -> String -> String


-- | Generates the code around the SBV functions to hold the state-updates,
--   external variables, etc. Note: this just creates calls to
--   SBV-generated functions, it does not create them! (Use the names from
--   Common.hs to ensure agreement on names.)
module Copilot.Compile.SBV.Driver
driver :: Params -> MetaTable -> Spec -> String -> String -> IO ()
driverName :: Params -> String

module Copilot.Compile.SBV.Makefile
makefile :: Params -> String -> String -> IO ()
makefileName :: Params -> String

module Copilot.Compile.SBV
compile :: Params -> Spec -> IO ()

-- | sbvs are optional additional SBVCodeGens to generate.
compileWithSBV :: Params -> [(String, SBVCodeGen ())] -> Spec -> IO ()
sbvDirName :: String
