-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Build a WAI Application from Webcrank Resources
--   
--   Build a WAI Application from Webcrank Resources.
@package webcrank-wai
@version 0.2.1

module Webcrank.Wai
type WaiResource m = Resource (WaiCrankT m)

-- | Monad transformer that all resource functions will run in. Provides
--   the ability to read the WAI <tt><a>Request</a></tt> inside resource
--   functions.
data WaiCrankT m a

-- | Function for turning <tt><a>Dispatcher</a></tt>s into
--   <tt><a>Application</a></tt>s. A <tt>run</tt> function must be provided
--   for executing the application logic. In the simplest case, where
--   <tt>m</tt> is <tt>IO</tt>, this can just be <tt><a>id</a></tt>.
dispatch :: (Applicative m, MonadIO m, MonadCatch m) => (forall a. m a -> IO a) -> ByteString -> Dispatcher (WaiResource m) -> Application
class HasRequest s a | s -> a
request :: HasRequest s a => Lens' s a
class HasRequestDate s a | s -> a
requestDate :: HasRequestDate s a => Lens' s a

-- | Holds the request and resource state during request processing.
data WaiData m

-- | Container used to keep track of the decision state and what is known
--   about response while processing a request.
data ReqData :: *
getRequestBodyLBS :: (MonadIO m, MonadReader s m, HasRequest s Request) => m ByteString
instance MonadMask m => MonadMask (WaiCrankT m)
instance MonadCatch m => MonadCatch (WaiCrankT m)
instance MonadThrow m => MonadThrow (WaiCrankT m)
instance Monad m => MonadWriter LogData (WaiCrankT m)
instance Monad m => MonadState ReqData (WaiCrankT m)
instance Monad m => MonadReader (WaiData (WaiCrankT m)) (WaiCrankT m)
instance MonadIO m => MonadIO (WaiCrankT m)
instance Monad m => Monad (WaiCrankT m)
instance Monad m => Applicative (WaiCrankT m)
instance Functor m => Functor (WaiCrankT m)
instance HasRequest (WaiData m0) Request
instance HasRequestDate (WaiData m0) HTTPDate
instance HasResourceData (WaiData m) m
instance MonadTrans WaiCrankT
