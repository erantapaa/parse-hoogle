-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Region based resource management for the IO monad.
--   
--   IOR monad is a wrapper around IO that allows region based resource
--   management.
@package IOR
@version 0.1


-- | Resource management in the IOR monad.
module System.IOR.Resource

-- | <tt><a>Resource</a> r a</tt> wraps a resource of type <tt>a</tt> so it
--   can be managed inside region <tt>r</tt> and automatically released
--   upon exit from <tt>r</tt>.
data Resource r a

-- | Extract <tt>a</tt> from the <a>Resource</a> wrapper.
getResource :: Resource r a -> a

-- | <tt><a>manage</a> a f</tt> will create a new <a>Resource</a> wrapper
--   around the value of type <tt>a</tt> in region <tt>r</tt>, given a
--   finalizer <tt>f</tt>. Each finalizer is guaranteed to automatically be
--   called upon exit from the region. Finalizers are called in the last
--   in, first out fashion. So the finalizer of the very last resource
--   allocated will be the first to get called.
--   
--   Note that finalizers must not throw any errors. Failing to ensure that
--   all errors in a finalizer are handled may result in a resource leak.
manage :: a -> (a -> IO ()) -> IOR r rs (Resource r a)

-- | <tt><a>release</a> res</tt> is used to force the resource <tt>res</tt>
--   to be released immediately. Finalizer for <tt>res</tt> will be called
--   and removed from the stack of finalizers in region <tt>r'</tt>.
release :: (RElem r' rs) => Resource r' a -> IOR r rs ()


-- | Region based resource management for the IO monad. Based on the ideas
--   and code from <a>http://okmij.org/ftp/Haskell/regions.html</a>
module System.IOR
class RElem r rs
data RCons r rs
data RNil

-- | <a>IO</a> monad with support for region based resource allocation. A
--   computation of type <tt><a>IOR</a> r rs a</tt> wraps an action of type
--   <tt><a>IO</a> a</tt> where <tt>r</tt> is an unconstrained type
--   variable indicating the current region and <tt>rs</tt> is a collection
--   of all accessible regions within the computation.
--   
--   <a>IO</a> actions can be lifted into the <a>IOR</a> monad using
--   <a>liftIO</a>. It is safe to throw <a>IOError</a>-s inside an
--   <a>IOR</a> computation. Allocated resources will be released on exit
--   automatically.
data IOR r rs a

-- | Create the initial region, <tt>r</tt>, and run the computation
--   returning a value of type <tt><a>IO</a> a</tt>.
runIOR :: IOR r (RCons r RNil) a -> IO a

-- | Create a new region <tt>r'</tt> inside <tt>r</tt>. All resources
--   allocated in <tt>r'</tt> are only accessible from <tt>r'</tt> and any
--   of it's child regions. On exit from the region, all allocated
--   resources are automatically released.
newIOR :: IOR r' (RCons r' rs) a -> IOR r rs a

-- | A region tag <tt><a>IORTag</a> r</tt> captures state of the region
--   <tt>r</tt> including all currently allocated resources in <tt>r</tt>.
data IORTag r

-- | Get the current region's tag.
getIORTag :: IOR r rs (IORTag r)

-- | Temporarily change the current region from <tt>r</tt> to <tt>r'</tt>.
--   This allows allocation of resources in <tt>r'</tt>.
--   
--   <tt>r'</tt> has to be one of the parent regions of <tt>r</tt>.
withIORTag :: (RElem r' rs) => IORTag r' -> IOR r' rs a -> IOR r rs a


-- | Mutable references in the IOR monad.
module Data.IORRef

-- | A value of type <tt><a>IORRef</a> r a</tt> is a mutable variable in
--   region <tt>r</tt>, containing a value of type <tt>a</tt>.
data IORRef r a

-- | Create a new <a>IORRef</a> in region <tt>r</tt>.
newIORRef :: a -> IOR r rs (IORRef r a)

-- | Read the value of an <a>IORRef</a>.
readIORRef :: (RElem r' rs) => IORRef r' a -> IOR r rs a

-- | Write a new value into an <a>IORRef</a>.
writeIORRef :: (RElem r' rs) => IORRef r' a -> a -> IOR r rs ()

-- | Mutate the contents of an <a>IORRef</a>.
modifyIORRef :: (RElem r' rs) => IORRef r' a -> (a -> a) -> IOR r rs ()
instance Typeable2 IORRef
instance (Data r, Data a) => Data (IORRef r a)
instance Eq (IORRef r a)
