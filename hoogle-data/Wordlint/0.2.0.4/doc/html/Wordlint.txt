-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Plaintext prose redundancy linter.
--   
@package Wordlint
@version 0.2.0.4

module Wordlint.Words
data Word a
Word :: String -> a -> Int -> Int -> Word a
lemma :: Word a -> String
position :: Word a -> a
line :: Word a -> Int
column :: Word a -> Int
type Words a = [Word a]
class NumOps a
createPos :: NumOps a => String -> String -> [(String, a)]
wordOrLine :: String -> String -> [(String, Int)]
createWordPos :: String -> [(String, Int)]
createLinePos :: String -> [(String, Int)]
createPercentPos :: String -> [(String, Double)]
getWordPercentPos :: [(String, Int)] -> Int -> [(String, Double)]
divWordPercentPos :: (String, Int) -> Int -> (String, Double)
createWordLinePos :: String -> [(String, Int)]
getWordLines :: String -> [[String]]
setWordLine :: ([String], Int) -> [(String, Int)]
setWordLines :: [([String], Int)] -> [(String, Int)]
createWordColPos :: String -> [(String, Int)]
numWordCols :: [String] -> [[(Char, Int)]]
setWordCols :: [String] -> [[(Char, Int)]] -> [(String, Int)]
filtWordCols :: [String] -> [(Char, Int)] -> [(String, Int)]
zipWords :: NumOps a => String -> String -> Words a
isCheckWordLong :: NumOps a => Word a -> Int -> Bool
checkWordList :: NumOps a => Words a -> Int -> Words a
checkWordEquality :: NumOps a => Word a -> Word a -> Bool
checkWordDistance :: (Num a, NumOps a) => Word a -> Word a -> a
filterMatchingWords :: NumOps a => Words a -> Words a
filterWordPunctuation :: NumOps a => Words a -> Words a
filterWordCapitalization :: NumOps a => Words a -> Words a
filterWordBlacklist :: NumOps a => Words a -> [String] -> Words a
instance NumOps Int
instance NumOps Double
instance Ord (Word a)
instance Eq (Word a)

module Wordlint.Wordpairs
data Wordpair a
Wordpair :: Word a -> Word a -> a -> Wordpair a
wone :: Wordpair a -> Word a
wtwo :: Wordpair a -> Word a
pdiff :: Wordpair a -> a
type Wordpairs a = [Wordpair a]
makeWordpairs :: (Num a, NumOps a) => Word a -> Word a -> Wordpair a
sortWordsByString :: (Num a, NumOps a) => Words a -> Wordpairs a
filterWordpairsByDistance :: (Num a, Eq a, Ord a, NumOps a) => Wordpairs a -> a -> Wordpairs a
sortWordPairsByPosition :: (Num a, Ord a, NumOps a) => Wordpairs a -> Wordpairs a
sortWordPairsByDistance :: (Num a, Ord a, NumOps a) => Wordpairs a -> Wordpairs a
getWordPairString :: Wordpair a -> String
getWordpairPositions :: NumOps a => Wordpair a -> (a, a)
getWordpairLines :: NumOps a => Wordpair a -> (Int, Int)
getWordpairCoords :: Wordpair a -> ((Int, Int), (Int, Int))
showFirstWordpairCoords :: Show a => Wordpair a -> String
showSecondWordpairCoords :: Show a => Wordpair a -> String
instance Eq (Wordpair a)

module Wordlint.Args
data Arguments
Arguments :: String -> Int -> Int -> Int -> Double -> Bool -> Bool -> String -> Bool -> Bool -> String -> Arguments
file :: Arguments -> String
matchlength :: Arguments -> Int
words_ :: Arguments -> Int
lines_ :: Arguments -> Int
percent_ :: Arguments -> Double
nocaps :: Arguments -> Bool
nopunct :: Arguments -> Bool
blacklist :: Arguments -> String
all_ :: Arguments -> Bool
human :: Arguments -> Bool
sort_ :: Arguments -> String
cliargs :: Arguments
checkFileStdin :: String -> Maybe String
accessInputFileData :: Maybe String -> IO String
accessBlacklistFileData :: Maybe String -> IO String
setBlacklistData :: String -> Maybe [String]
runFilterFlags :: NumOps a => Words a -> Arguments -> Maybe [String] -> Words a
runPunctFilter :: NumOps a => Arguments -> Words a -> Words a
runCapsFilter :: NumOps a => Arguments -> Words a -> Words a
runBlacklistFilter :: NumOps a => Maybe [String] -> Words a -> Words a
checkSortFlag :: (Num a, Ord a, NumOps a) => String -> Wordpairs a -> Wordpairs a
checkIfHumanHeader :: Arguments -> IO ()
getTypeOfCheck :: Arguments -> String
getTypeNumbers :: Arguments -> String
isWordsFlag :: Arguments -> String
isLinesFlag :: Arguments -> String
isPercentFlag :: Arguments -> String
convertWordsFlag :: Arguments -> String
convertLinesFlag :: Arguments -> String
convertPercentFlag :: Arguments -> String
instance Typeable Arguments
instance Data Arguments
instance Show Arguments
instance Read Arguments

module Wordlint.Linters
data Linter
Linter :: String -> Int -> Bool -> Maybe [String] -> Int -> Int -> Double -> Arguments -> Wordpairs Double -> Linter
inputdata :: Linter -> String
wordlength :: Linter -> Int
allornot :: Linter -> Bool
maybeblacklist :: Linter -> Maybe [String]
word' :: Linter -> Int
line' :: Linter -> Int
percent' :: Linter -> Double
args :: Linter -> Arguments
result :: Linter -> Wordpairs Double
getLinter :: Arguments -> IO Linter
runAllLinters :: Linter -> Wordpairs Double
intersectWordpairs :: [Wordpairs Double] -> Wordpairs Double
getWordpairList :: (Num a, NumOps a) => Linter -> String -> Wordpairs a
distorall :: (Eq a, Ord a, Num a, NumOps a) => Linter -> Wordpairs a -> a -> Wordpairs a
getWordpairListWords :: Linter -> Wordpairs Int
getWordpairListLines :: Linter -> Wordpairs Int
getWordpairListPercent :: Linter -> Wordpairs Double
commensurateWordpairs :: Wordpairs Int -> Wordpairs Double
commensurateWordpair :: Wordpair Int -> Wordpair Double
commensurateWords :: Word Int -> Word Double

module Wordlint.Output
produceOutput :: (Show a, Eq a, Ord a, Num a, NumOps a) => Linter -> Wordpairs a -> IO ()
processHumanData :: Show a => Wordpairs a -> [String]
processMachineData :: Show a => Wordpairs a -> IO ()
processMachineData' :: Show a => Wordpairs a -> [[String]]
processDataError :: NumOps a => Wordpairs a -> String -> String
summaryData :: Int -> Int -> Int -> IO ()
