-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Add CORS headers to Snap applications
--   
@package snap-cors
@version 1.2.9


-- | Add <a>CORS</a> (cross-origin resource sharing) headers to a Snap
--   application. CORS headers can be added either conditionally or
--   unconditionally to the entire site, or you can apply CORS headers to a
--   single route.
module Snap.CORS

-- | Apply CORS for every request, unconditionally.
--   
--   <tt>wrapCors</tt> â‰¡ <a>wrapCORSWithOptions</a> <a>defaultOptions</a>
wrapCORS :: Initializer b v ()

-- | Initialize CORS for all requests with specific options.
wrapCORSWithOptions :: CORSOptions (Handler b v) -> Initializer b v ()

-- | Apply CORS headers to a specific request. This is useful if you only
--   have a single action that needs CORS headers, and you don't want to
--   pay for conditional checks on every request.
--   
--   You should note that <a>applyCORS</a> needs to be used before you add
--   any <a>method</a> combinators. For example, the following won't do
--   what you want:
--   
--   <pre>
--   method POST $ applyCORS defaultOptions $ myHandler
--   </pre>
--   
--   This fails to work as CORS requires an <tt>OPTIONS</tt> request in the
--   preflighting stage, but this would get filtered out. Instead, use
--   
--   <pre>
--   applyCORS defaultOptions $ method POST $ myHandler
--   </pre>
applyCORS :: MonadSnap m => CORSOptions m -> m () -> m ()

-- | Specify the options to use when building CORS headers for a response.
--   Most of these options are <a>Handler</a> actions to allow you to
--   conditionally determine the setting of each header.
data CORSOptions m
CORSOptions :: m OriginList -> m Bool -> m (HashSet (CI ByteString)) -> m (HashSet HashableMethod) -> (HashSet String -> m (HashSet String)) -> CORSOptions m

-- | Which origins are allowed to make cross-origin requests.
corsAllowOrigin :: CORSOptions m -> m OriginList

-- | Whether or not to allow exposing the response when the omit
--   credentials flag is unset.
corsAllowCredentials :: CORSOptions m -> m Bool

-- | A list of headers that are exposed to clients. This allows clients to
--   read the values of these headers, if the response includes them.
corsExposeHeaders :: CORSOptions m -> m (HashSet (CI ByteString))

-- | A list of request methods that are allowed.
corsAllowedMethods :: CORSOptions m -> m (HashSet HashableMethod)

-- | An action to determine which of the request headers are allowed. This
--   action is supplied the parsed contents of
--   <tt>Access-Control-Request-Headers</tt>.
corsAllowedHeaders :: CORSOptions m -> HashSet String -> m (HashSet String)

-- | Liberal default options. Specifies that:
--   
--   <ul>
--   <li>All origins may make cross-origin requests</li>
--   <li><tt>allow-credentials</tt> is true.</li>
--   <li>No extra headers beyond simple headers are exposed.</li>
--   <li><tt>GET</tt>, <tt>POST</tt>, <tt>PUT</tt>, <tt>DELETE</tt> and
--   <tt>HEAD</tt> are all allowed.</li>
--   <li>All request headers are allowed.</li>
--   </ul>
--   
--   All options are determined unconditionally.
defaultOptions :: Monad m => CORSOptions m

-- | Used to specify the contents of the
--   <tt>Access-Control-Allow-Origin</tt> header.
data OriginList

-- | Allow any origin to access this resource. Corresponds to
--   <tt>Access-Control-Allow-Origin: *</tt>
Everywhere :: OriginList

-- | Do not allow cross-origin requests
Nowhere :: OriginList

-- | Allow cross-origin requests from these origins.
Origins :: OriginSet -> OriginList

-- | A set of origins. RFC 6454 specifies that origins are a scheme, host
--   and port, so the <a>OriginSet</a> wrapper around a <a>HashSet</a>
--   ensures that each <a>URI</a> constists of nothing more than this.
data OriginSet
mkOriginSet :: [URI] -> OriginSet
origins :: OriginSet -> HashSet HashableURI

-- | A <tt>newtype</tt> over <a>URI</a> with a <a>Hashable</a> instance.
newtype HashableURI
HashableURI :: URI -> HashableURI
newtype HashableMethod
HashableMethod :: Method -> HashableMethod
instance Eq HashableURI
instance Eq HashableMethod
instance Show HashableMethod
instance Hashable HashableMethod
instance Hashable HashableURI
instance Show HashableURI
