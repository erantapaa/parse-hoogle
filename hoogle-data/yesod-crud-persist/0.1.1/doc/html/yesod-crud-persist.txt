-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Flexible CRUD subsite usable with Yesod and Persistent.
--   
@package yesod-crud-persist
@version 0.1.1

module Yesod.Crud.Internal

module Yesod.Crud
data Crud master a
Crud :: HandlerT (Crud master a) (HandlerT master IO) Html -> HandlerT (Crud master a) (HandlerT master IO) Html -> (Key a -> HandlerT (Crud master a) (HandlerT master IO) Html) -> (Key a -> HandlerT (Crud master a) (HandlerT master IO) Html) -> Crud master a
_chAdd :: Crud master a -> HandlerT (Crud master a) (HandlerT master IO) Html
_chIndex :: Crud master a -> HandlerT (Crud master a) (HandlerT master IO) Html
_chEdit :: Crud master a -> Key a -> HandlerT (Crud master a) (HandlerT master IO) Html
_chDelete :: Crud master a -> Key a -> HandlerT (Crud master a) (HandlerT master IO) Html
instance Read (Key a) => Read (Route (Crud master a))
instance Show (Key a) => Show (Route (Crud master a))
instance Eq (Key a) => Eq (Route (Crud master a))
instance (Eq (Key a), PathPiece (Key a)) => ParseRoute (Crud master a)
instance (PathPiece (Key a), Eq (Key a)) => RenderRoute (Crud master a)
instance (Eq (Key a), PathPiece (Key a)) => YesodSubDispatch (Crud master a) (HandlerT master IO)

module Yesod.Crud.Simple
data SimpleCrud master a
SimpleCrud :: (WidgetT master IO () -> HandlerT (Crud master a) (HandlerT master IO) Html) -> HandlerT (Crud master a) (HandlerT master IO) Html -> (WidgetT master IO () -> HandlerT (Crud master a) (HandlerT master IO) Html) -> (WidgetT master IO () -> HandlerT (Crud master a) (HandlerT master IO) Html) -> WidgetT master IO () -> (Maybe a -> Html -> MForm (HandlerT master IO) (FormResult a, WidgetT master IO ())) -> (Enctype -> Route master -> WidgetT master IO () -> WidgetT master IO ()) -> SimpleCrud master a
_scAdd :: SimpleCrud master a -> WidgetT master IO () -> HandlerT (Crud master a) (HandlerT master IO) Html
_scIndex :: SimpleCrud master a -> HandlerT (Crud master a) (HandlerT master IO) Html
_scEdit :: SimpleCrud master a -> WidgetT master IO () -> HandlerT (Crud master a) (HandlerT master IO) Html
_scDelete :: SimpleCrud master a -> WidgetT master IO () -> HandlerT (Crud master a) (HandlerT master IO) Html
_scDeleteForm :: SimpleCrud master a -> WidgetT master IO ()
_scForm :: SimpleCrud master a -> Maybe a -> Html -> MForm (HandlerT master IO) (FormResult a, WidgetT master IO ())
_scFormWrap :: SimpleCrud master a -> Enctype -> Route master -> WidgetT master IO () -> WidgetT master IO ()
scIndex :: Lens' (SimpleCrud master_ahOI a_ahOJ) (HandlerT (Crud master_ahOI a_ahOJ) (HandlerT master_ahOI IO) Html)
scFormWrap :: Lens' (SimpleCrud master_ahOI a_ahOJ) (Enctype -> Route master_ahOI -> WidgetT master_ahOI IO () -> WidgetT master_ahOI IO ())
scForm :: Lens' (SimpleCrud master_ahOI a_ahOJ) (Maybe a_ahOJ -> Html -> MForm (HandlerT master_ahOI IO) (FormResult a_ahOJ, WidgetT master_ahOI IO ()))
scEdit :: Lens' (SimpleCrud master_ahOI a_ahOJ) (WidgetT master_ahOI IO () -> HandlerT (Crud master_ahOI a_ahOJ) (HandlerT master_ahOI IO) Html)
scDeleteForm :: Lens' (SimpleCrud master_ahOI a_ahOJ) (WidgetT master_ahOI IO ())
scDelete :: Lens' (SimpleCrud master_ahOI a_ahOJ) (WidgetT master_ahOI IO () -> HandlerT (Crud master_ahOI a_ahOJ) (HandlerT master_ahOI IO) Html)
scAdd :: Lens' (SimpleCrud master_ahOI a_ahOJ) (WidgetT master_ahOI IO () -> HandlerT (Crud master_ahOI a_ahOJ) (HandlerT master_ahOI IO) Html)
emptySimpleCrud :: SimpleCrud master a
basicSimpleCrud :: PathPiece (Key a) => Yesod master => YesodPersist master => PersistEntity a => PersistQuery (YesodPersistBackend master) => PersistEntityBackend a ~ YesodPersistBackend master => SimpleCrud master a
simpleCrudToCrud :: PersistEntityBackend a ~ YesodPersistBackend master => PersistEntity a => PersistStore (YesodPersistBackend master) => YesodPersist master => RenderMessage master FormMessage => SimpleCrud master a -> Crud master a
