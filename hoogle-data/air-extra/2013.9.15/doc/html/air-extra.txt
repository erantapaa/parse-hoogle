-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | air-extra
--   
--   An alternative Haskell Prelude library, extra helpers
@package air-extra
@version 2013.9.15

module Air.Heavy
parse :: GenParser tok () a -> [tok] -> Either ParseError a
unescape_xml :: String -> Maybe String
escape_xml :: String -> String
unescape_unicode_xml :: String -> Maybe String
escape_unicode_xml :: String -> String

module Air.Extra
reduce :: (a -> a -> a) -> [a] -> a
reduce' :: (a -> a -> a) -> [a] -> a
p_eval :: [a] -> [a]
p_eval' :: [a] -> [a]
p_reduce :: (a -> a -> a) -> [a] -> a
p_reduce' :: (a -> a -> a) -> [a] -> a
p_map :: (a -> b) -> [a] -> [b]
p_map' :: (a -> b) -> [a] -> [b]
p_split_to :: Int -> [t] -> [[t]]
p_map_reduce_to :: Int -> ([a] -> b) -> (b -> b -> b) -> [a] -> b
p_map_reduce :: ([a] -> b) -> (b -> b -> b) -> [a] -> b
b2u :: String -> String
u2b :: String -> String
date :: Integer -> Int -> Int -> Day
splash_date :: Day -> (Integer, Int, Int)
split_raw :: String -> String -> [String]
split :: String -> String -> [String]
split' :: String -> [String]
sub :: String -> String -> String -> String
gsub :: String -> String -> String -> String
type RegexResult = (String, (String, String))
type MatchList = [(Int, String)]
match :: String -> String -> Maybe (RegexResult, MatchList)
strip :: String -> String
empty :: String -> Bool
collapse :: (Integral a, Num b) => [a] -> b
base :: (Integral a, Show a) => a -> a -> String
camel_case :: String -> String
snake_case :: String -> String
purify :: IO a -> a
ls :: String -> IO [String]
file_size :: String -> IO Integer
file_mtime :: String -> IO UTCTime
read_binary_file :: String -> IO String
get_permissions :: String -> IO Permissions
get_current_directory :: IO String
now :: IO UTCTime
format_time :: String -> UTCTime -> String
simple_time_format :: String
now_in_zoned_time :: IO String
parse_time :: String -> String -> UTCTime
t2i :: UTCTime -> Integer
t2f :: Fractional a => UTCTime -> a
i2t :: Integer -> UTCTime
f2t :: Real a => a -> UTCTime
filter_comment :: String -> String
line_buffer :: IO ()

module Air.UTF8
split :: String -> String -> [String]
gsub :: String -> String -> String -> String
sub :: String -> String -> String -> String
match :: String -> String -> Maybe (RegexResult, MatchList)
strip :: String -> String
