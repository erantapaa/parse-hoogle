-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Amazon Security Token Service SDK.
--   
@package amazonka-sts
@version 0.3.6

module Network.AWS.STS.Types

-- | Version <tt>2011-06-15</tt> of the Amazon Security Token Service
--   service.
data STS
data RESTError :: *
ns :: Text
data Credentials

-- | <a>Credentials</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>cAccessKeyId</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>cExpiration</a> <tt>::</tt> <a>UTCTime</a></li>
--   <li><a>cSecretAccessKey</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>cSessionToken</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
credentials :: Text -> Text -> Text -> UTCTime -> Credentials

-- | The access key ID that identifies the temporary security credentials.
cAccessKeyId :: Lens' Credentials Text

-- | The date on which the current credentials expire.
cExpiration :: Lens' Credentials UTCTime

-- | The secret access key that can be used to sign requests.
cSecretAccessKey :: Lens' Credentials Text

-- | The token that users must pass to the service API to use the temporary
--   credentials.
cSessionToken :: Lens' Credentials Text
data FederatedUser

-- | <a>FederatedUser</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>fuArn</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>fuFederatedUserId</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
federatedUser :: Text -> Text -> FederatedUser

-- | The ARN that specifies the federated user that is associated with the
--   credentials. For more information about ARNs and how to use them in
--   policies, see Identifiers for IAM Entities in <i>Using IAM</i>.
fuArn :: Lens' FederatedUser Text

-- | The string that identifies the federated user associated with the
--   credentials, similar to the unique ID of an IAM user.
fuFederatedUserId :: Lens' FederatedUser Text
data AssumedRoleUser

-- | <a>AssumedRoleUser</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>aruArn</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>aruAssumedRoleId</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
assumedRoleUser :: Text -> Text -> AssumedRoleUser

-- | The ARN of the temporary security credentials that are returned from
--   the <tt>AssumeRole</tt> action. For more information about ARNs and
--   how to use them in policies, see Identifiers for IAM Entities in
--   <i>Using IAM</i>.
aruArn :: Lens' AssumedRoleUser Text

-- | A unique identifier that contains the role ID and the role session
--   name of the role that is being assumed. The role ID is generated by
--   AWS when the role is created.
aruAssumedRoleId :: Lens' AssumedRoleUser Text
instance Eq Credentials
instance Ord Credentials
instance Read Credentials
instance Show Credentials
instance Eq FederatedUser
instance Ord FederatedUser
instance Read FederatedUser
instance Show FederatedUser
instance Eq AssumedRoleUser
instance Ord AssumedRoleUser
instance Read AssumedRoleUser
instance Show AssumedRoleUser
instance ToQuery AssumedRoleUser
instance FromXML AssumedRoleUser
instance ToQuery FederatedUser
instance FromXML FederatedUser
instance ToQuery Credentials
instance FromXML Credentials
instance AWSService STS


-- | Returns a set of temporary credentials for an AWS account or IAM user.
--   The credentials consist of an access key ID, a secret access key, and
--   a security token. Typically, you use <a>GetSessionToken</a> if you
--   want to use MFA to protect programmatic calls to specific AWS APIs
--   like Amazon EC2 <tt>StopInstances</tt>. MFA-enabled IAM users would
--   need to call <a>GetSessionToken</a> and submit an MFA code that is
--   associated with their MFA device. Using the temporary security
--   credentials that are returned from the call, IAM users can then make
--   programmatic calls to APIs that require MFA authentication.
--   
--   The <a>GetSessionToken</a> action must be called by using the
--   long-term AWS security credentials of the AWS account or an IAM user.
--   Credentials that are created by IAM users are valid for the duration
--   that you specify, between 900 seconds (15 minutes) and 129600 seconds
--   (36 hours); credentials that are created by using account credentials
--   have a maximum duration of 3600 seconds (1 hour).
--   
--   We recommend that you do not call <a>GetSessionToken</a> with root
--   account credentials. Instead, follow our <a>best practices</a> by
--   creating one or more IAM users, giving them the necessary permissions,
--   and using IAM users for everyday interaction with AWS.
--   
--   The permissions associated with the temporary security credentials
--   returned by <a>GetSessionToken</a> are based on the permissions
--   associated with account or IAM user whose credentials are used to call
--   the action. If <a>GetSessionToken</a> is called using root account
--   credentials, the temporary credentials have root account permissions.
--   Similarly, if <a>GetSessionToken</a> is called using the credentials
--   of an IAM user, the temporary credentials have the same permissions as
--   the IAM user.
--   
--   For more information about using <a>GetSessionToken</a> to create
--   temporary credentials, go to Creating Temporary Credentials to Enable
--   Access for IAM Users in <i>Using Temporary Security Credentials</i>.
--   
--   
--   <a>http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html</a>
module Network.AWS.STS.GetSessionToken
data GetSessionToken

-- | <a>GetSessionToken</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>gstDurationSeconds</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>gstSerialNumber</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>gstTokenCode</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
getSessionToken :: GetSessionToken

-- | The duration, in seconds, that the credentials should remain valid.
--   Acceptable durations for IAM user sessions range from 900 seconds (15
--   minutes) to 129600 seconds (36 hours), with 43200 seconds (12 hours)
--   as the default. Sessions for AWS account owners are restricted to a
--   maximum of 3600 seconds (one hour). If the duration is longer than one
--   hour, the session for AWS account owners defaults to one hour.
gstDurationSeconds :: Lens' GetSessionToken (Maybe Natural)

-- | The identification number of the MFA device that is associated with
--   the IAM user who is making the <a>GetSessionToken</a> call. Specify
--   this value if the IAM user has a policy that requires MFA
--   authentication. The value is either the serial number for a hardware
--   device (such as <tt>GAHT12345678</tt>) or an Amazon Resource Name
--   (ARN) for a virtual device (such as
--   'arn:aws:iam::123456789012:mfa/user'). You can find the device for an
--   IAM user by going to the AWS Management Console and viewing the user's
--   security credentials.
gstSerialNumber :: Lens' GetSessionToken (Maybe Text)

-- | The value provided by the MFA device, if MFA is required. If any
--   policy requires the IAM user to submit an MFA code, specify this
--   value. If MFA authentication is required, and the user does not
--   provide a code when requesting a set of temporary security
--   credentials, the user will receive an "access denied" response when
--   requesting resources that require MFA authentication.
gstTokenCode :: Lens' GetSessionToken (Maybe Text)
data GetSessionTokenResponse

-- | <a>GetSessionTokenResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>gstrCredentials</a> <tt>::</tt> <a>Maybe</a>
--   <a>Credentials</a></li>
--   </ul>
getSessionTokenResponse :: GetSessionTokenResponse

-- | The session credentials for API authentication.
gstrCredentials :: Lens' GetSessionTokenResponse (Maybe Credentials)
instance Eq GetSessionToken
instance Ord GetSessionToken
instance Read GetSessionToken
instance Show GetSessionToken
instance Eq GetSessionTokenResponse
instance Read GetSessionTokenResponse
instance Show GetSessionTokenResponse
instance FromXML GetSessionTokenResponse
instance AWSRequest GetSessionToken
instance ToHeaders GetSessionToken
instance ToQuery GetSessionToken
instance ToPath GetSessionToken


-- | Returns a set of temporary security credentials (consisting of an
--   access key ID, a secret access key, and a security token) for a
--   federated user. A typical use is in a proxy application that gets
--   temporary security credentials on behalf of distributed applications
--   inside a corporate network. Because you must call the
--   <a>GetFederationToken</a> action using the long-term security
--   credentials of an IAM user, this call is appropriate in contexts where
--   those credentials can be safely stored, usually in a server-based
--   application.
--   
--   If you are creating a mobile-based or browser-based app that can
--   authenticate users using a web identity provider like Login with
--   Amazon, Facebook, Google, or an OpenID Connect-compatible identity
--   provider, we recommend that you use <a>Amazon Cognito</a> or
--   <tt>AssumeRoleWithWebIdentity</tt>. For more information, see
--   <a>Creating Temporary Security Credentials for Mobile AppsUsing
--   Identity Providers</a> in <i>Using Temporary Security Credentials</i>.
--   
--   The <a>GetFederationToken</a> action must be called by using the
--   long-term AWS security credentials of an IAM user. You can also call
--   <a>GetFederationToken</a> using the security credentials of an AWS
--   account (root), but this is not recommended. Instead, we recommend
--   that you create an IAM user for the purpose of the proxy application
--   and then attach a policy to the IAM user that limits federated users
--   to only the actions and resources they need access to. For more
--   information, see <a>IAM Best Practices</a> in <i>Using IAM</i>.
--   
--   The temporary security credentials that are obtained by using the
--   long-term credentials of an IAM user are valid for the specified
--   duration, between 900 seconds (15 minutes) and 129600 seconds (36
--   hours). Temporary credentials that are obtained by using AWS account
--   (root) credentials have a maximum duration of 3600 seconds (1 hour)
--   
--   Permissions
--   
--   The permissions for the temporary security credentials returned by
--   <a>GetFederationToken</a> are determined by a combination of the
--   following:
--   
--   The policy or policies that are attached to the IAM user whose
--   credentials are used to call <a>GetFederationToken</a>. The policy
--   that is passed as a parameter in the call. The passed policy is
--   attached to the temporary security credentials that result from the
--   <a>GetFederationToken</a> API call--that is, to the <i>federated
--   user</i>. When the federated user makes an AWS request, AWS evaluates
--   the policy attached to the federated user in combination with the
--   policy or policies attached to the IAM user whose credentials were
--   used to call <a>GetFederationToken</a>. AWS allows the federated
--   user's request only when both the federated user <i>and</i> the IAM
--   user are explicitly allowed to perform the requested action. The
--   passed policy cannot grant more permissions than those that are
--   defined in the IAM user policy.
--   
--   A typical use case is that the permissions of the IAM user whose
--   credentials are used to call <a>GetFederationToken</a> are designed to
--   allow access to all the actions and resources that any federated user
--   will need. Then, for individual users, you pass a policy to the
--   operation that scopes down the permissions to a level that's
--   appropriate to that individual user, using a policy that allows only a
--   subset of permissions that are granted to the IAM user.
--   
--   If you do not pass a policy, the resulting temporary security
--   credentials have no effective permissions. The only exception is when
--   the temporary security credentials are used to access a resource that
--   has a resource-based policy that specifically allows the federated
--   user to access the resource.
--   
--   For more information about how permissions work, see <a>Permissions
--   forGetFederationToken</a> in <i>Using Temporary Security
--   Credentials</i>. For information about using <a>GetFederationToken</a>
--   to create temporary security credentials, see <a>Creating Temporary
--   Credentials to Enable Access for Federated Users</a> in <i>Using
--   Temporary Security Credentials</i>.
--   
--   
--   <a>http://docs.aws.amazon.com/STS/latest/APIReference/API_GetFederationToken.html</a>
module Network.AWS.STS.GetFederationToken
data GetFederationToken

-- | <a>GetFederationToken</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>gftDurationSeconds</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>gftName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>gftPolicy</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
getFederationToken :: Text -> GetFederationToken

-- | The duration, in seconds, that the session should last. Acceptable
--   durations for federation sessions range from 900 seconds (15 minutes)
--   to 129600 seconds (36 hours), with 43200 seconds (12 hours) as the
--   default. Sessions obtained using AWS account (root) credentials are
--   restricted to a maximum of 3600 seconds (one hour). If the specified
--   duration is longer than one hour, the session obtained by using AWS
--   account (root) credentials defaults to one hour.
gftDurationSeconds :: Lens' GetFederationToken (Maybe Natural)

-- | The name of the federated user. The name is used as an identifier for
--   the temporary security credentials (such as <tt>Bob</tt>). For
--   example, you can reference the federated user name in a resource-based
--   policy, such as in an Amazon S3 bucket policy.
gftName :: Lens' GetFederationToken Text

-- | An IAM policy in JSON format that is passed with the
--   <a>GetFederationToken</a> call and evaluated along with the policy or
--   policies that are attached to the IAM user whose credentials are used
--   to call <a>GetFederationToken</a>. The passed policy is used to scope
--   down the permissions that are available to the IAM user, by allowing
--   only a subset of the permissions that are granted to the IAM user. The
--   passed policy cannot grant more permissions than those granted to the
--   IAM user. The final permissions for the federated user are the most
--   restrictive set based on the intersection of the passed policy and the
--   IAM user policy.
--   
--   If you do not pass a policy, the resulting temporary security
--   credentials have no effective permissions. The only exception is when
--   the temporary security credentials are used to access a resource that
--   has a resource-based policy that specifically allows the federated
--   user to access the resource.
--   
--   For more information about how permissions work, see <a>Permissions
--   forGetFederationToken</a> in <i>Using Temporary Security
--   Credentials</i>.
gftPolicy :: Lens' GetFederationToken (Maybe Text)
data GetFederationTokenResponse

-- | <a>GetFederationTokenResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>gftrCredentials</a> <tt>::</tt> <a>Maybe</a>
--   <a>Credentials</a></li>
--   <li><a>gftrFederatedUser</a> <tt>::</tt> <a>Maybe</a>
--   <a>FederatedUser</a></li>
--   <li><a>gftrPackedPolicySize</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   </ul>
getFederationTokenResponse :: GetFederationTokenResponse

-- | Credentials for the service API authentication.
gftrCredentials :: Lens' GetFederationTokenResponse (Maybe Credentials)

-- | Identifiers for the federated user associated with the credentials
--   (such as 'arn:aws:sts::123456789012:federated-user/Bob' or
--   '123456789012:Bob'). You can use the federated user's ARN in your
--   resource-based policies, such as an Amazon S3 bucket policy.
gftrFederatedUser :: Lens' GetFederationTokenResponse (Maybe FederatedUser)

-- | A percentage value indicating the size of the policy in packed form.
--   The service rejects policies for which the packed size is greater than
--   100 percent of the allowed value.
gftrPackedPolicySize :: Lens' GetFederationTokenResponse (Maybe Natural)
instance Eq GetFederationToken
instance Ord GetFederationToken
instance Read GetFederationToken
instance Show GetFederationToken
instance Eq GetFederationTokenResponse
instance Read GetFederationTokenResponse
instance Show GetFederationTokenResponse
instance FromXML GetFederationTokenResponse
instance AWSRequest GetFederationToken
instance ToHeaders GetFederationToken
instance ToQuery GetFederationToken
instance ToPath GetFederationToken


-- | Decodes additional information about the authorization status of a
--   request from an encoded message returned in response to an AWS
--   request.
--   
--   For example, if a user is not authorized to perform an action that he
--   or she has requested, the request returns a
--   <a>UnauthorizedOperation</a> response (an HTTP 403 response). Some AWS
--   actions additionally return an encoded message that can provide
--   details about this authorization failure.
--   
--   Only certain AWS actions return an encoded authorization message. The
--   documentation for an individual action indicates whether that action
--   returns an encoded message in addition to returning an HTTP code. The
--   message is encoded because the details of the authorization status can
--   constitute privileged information that the user who requested the
--   action should not see. To decode an authorization status message, a
--   user must be granted permissions via an IAM policy to request the
--   <a>DecodeAuthorizationMessage</a> ('sts:DecodeAuthorizationMessage')
--   action.
--   
--   The decoded message includes the following type of information:
--   
--   Whether the request was denied due to an explicit deny or due to the
--   absence of an explicit allow. For more information, see <a>Determining
--   Whether aRequest is Allowed or Denied</a> in <i>Using IAM</i>. The
--   principal who made the request. The requested action. The requested
--   resource. The values of condition keys in the context of the user's
--   request.
--   
--   
--   <a>http://docs.aws.amazon.com/STS/latest/APIReference/API_DecodeAuthorizationMessage.html</a>
module Network.AWS.STS.DecodeAuthorizationMessage
data DecodeAuthorizationMessage

-- | <a>DecodeAuthorizationMessage</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>damEncodedMessage</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
decodeAuthorizationMessage :: Text -> DecodeAuthorizationMessage

-- | The encoded message that was returned with the response.
damEncodedMessage :: Lens' DecodeAuthorizationMessage Text
data DecodeAuthorizationMessageResponse

-- | <a>DecodeAuthorizationMessageResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>damrDecodedMessage</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   </ul>
decodeAuthorizationMessageResponse :: DecodeAuthorizationMessageResponse

-- | An XML document that contains the decoded message. For more
--   information, see <a>DecodeAuthorizationMessage</a>.
damrDecodedMessage :: Lens' DecodeAuthorizationMessageResponse (Maybe Text)
instance Eq DecodeAuthorizationMessage
instance Ord DecodeAuthorizationMessage
instance Read DecodeAuthorizationMessage
instance Show DecodeAuthorizationMessage
instance Monoid DecodeAuthorizationMessage
instance IsString DecodeAuthorizationMessage
instance Eq DecodeAuthorizationMessageResponse
instance Ord DecodeAuthorizationMessageResponse
instance Read DecodeAuthorizationMessageResponse
instance Show DecodeAuthorizationMessageResponse
instance Monoid DecodeAuthorizationMessageResponse
instance FromXML DecodeAuthorizationMessageResponse
instance AWSRequest DecodeAuthorizationMessage
instance ToHeaders DecodeAuthorizationMessage
instance ToQuery DecodeAuthorizationMessage
instance ToPath DecodeAuthorizationMessage


-- | Returns a set of temporary security credentials for users who have
--   been authenticated in a mobile or web application with a web identity
--   provider, such as Amazon Cognito, Login with Amazon, Facebook, Google,
--   or any OpenID Connect-compatible identity provider.
--   
--   For mobile applications, we recommend that you use Amazon Cognito. You
--   can use Amazon Cognito with the <a>AWS SDK for iOS</a> and the <a>AWS
--   SDK for Android</a> to uniquely identify a user and supply the user
--   with a consistent identity throughout the lifetime of an application.
--   
--   To learn more about Amazon Cognito, see <a>Amazon Cognito Overview</a>
--   in the <i>AWSSDK for Android Developer Guide</i> guide and <a>Amazon
--   Cognito Overview</a> in the <i>AWSSDK for iOS Developer Guide</i>.
--   
--   Calling <a>AssumeRoleWithWebIdentity</a> does not require the use of
--   AWS security credentials. Therefore, you can distribute an application
--   (for example, on mobile devices) that requests temporary security
--   credentials without including long-term AWS credentials in the
--   application, and without deploying server-based proxy services that
--   use long-term AWS credentials. Instead, the identity of the caller is
--   validated by using a token from the web identity provider.
--   
--   The temporary security credentials returned by this API consist of an
--   access key ID, a secret access key, and a security token. Applications
--   can use these temporary security credentials to sign calls to AWS
--   service APIs. The credentials are valid for the duration that you
--   specified when calling <a>AssumeRoleWithWebIdentity</a>, which can be
--   from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default,
--   the temporary security credentials are valid for 1 hour.
--   
--   Optionally, you can pass an IAM access policy to this operation. If
--   you choose not to pass a policy, the temporary security credentials
--   that are returned by the operation have the permissions that are
--   defined in the access policy of the role that is being assumed. If you
--   pass a policy to this operation, the temporary security credentials
--   that are returned by the operation have the permissions that are
--   allowed by both the access policy of the role that is being assumed,
--   <i>and</i> the policy that you pass. This gives you a way to further
--   restrict the permissions for the resulting temporary security
--   credentials. You cannot use the passed policy to grant permissions
--   that are in excess of those allowed by the access policy of the role
--   that is being assumed. For more information, see <a>Permissions
--   forAssumeRoleWithWebIdentity</a> in <i>Using Temporary Security
--   Credentials</i>.
--   
--   Before your application can call <a>AssumeRoleWithWebIdentity</a>, you
--   must have an identity token from a supported identity provider and
--   create a role that the application can assume. The role that your
--   application assumes must trust the identity provider that is
--   associated with the identity token. In other words, the identity
--   provider must be specified in the role's trust policy.
--   
--   For more information about how to use web identity federation and the
--   <a>AssumeRoleWithWebIdentity</a> API, see the following resources:
--   
--   <a>Creating a Mobile Application with Third-Party Sign-In</a> and
--   <a>CreatingTemporary Security Credentials for Mobile Apps Using
--   Third-Party IdentityProviders</a> in <i>Using Temporary Security
--   Credentials</i>. <a>Web Identity FederationPlayground</a>. This
--   interactive website lets you walk through the process of
--   authenticating via Login with Amazon, Facebook, or Google, getting
--   temporary security credentials, and then using those credentials to
--   make a request to AWS. <a>AWS SDK for iOS</a> and <a>AWS SDK for
--   Android</a>. These toolkits contain sample apps that show how to
--   invoke the identity providers, and then how to use the information
--   from these providers to get and use temporary security credentials.
--   <a>Web Identity Federation with Mobile Applications</a>. This article
--   discusses web identity federation and shows an example of how to use
--   web identity federation to get access to content in Amazon S3.
--   
--   
--   <a>http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html</a>
module Network.AWS.STS.AssumeRoleWithWebIdentity
data AssumeRoleWithWebIdentity

-- | <a>AssumeRoleWithWebIdentity</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>arwwiDurationSeconds</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>arwwiPolicy</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arwwiProviderId</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arwwiRoleArn</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>arwwiRoleSessionName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>arwwiWebIdentityToken</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
assumeRoleWithWebIdentity :: Text -> Text -> Text -> AssumeRoleWithWebIdentity

-- | The duration, in seconds, of the role session. The value can range
--   from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default,
--   the value is set to 3600 seconds.
arwwiDurationSeconds :: Lens' AssumeRoleWithWebIdentity (Maybe Natural)

-- | An IAM policy in JSON format.
--   
--   The policy parameter is optional. If you pass a policy, the temporary
--   security credentials that are returned by the operation have the
--   permissions that are allowed by both the access policy of the role
--   that is being assumed, <i>and</i> the policy that you pass. This gives
--   you a way to further restrict the permissions for the resulting
--   temporary security credentials. You cannot use the passed policy to
--   grant permissions that are in excess of those allowed by the access
--   policy of the role that is being assumed. For more information, see
--   <a>Permissions for AssumeRoleWithWebIdentity</a> in <i>Using Temporary
--   SecurityCredentials</i>.
arwwiPolicy :: Lens' AssumeRoleWithWebIdentity (Maybe Text)

-- | The fully qualified host component of the domain name of the identity
--   provider.
--   
--   Specify this value only for OAuth 2.0 access tokens. Currently
--   'www.amazon.com' and 'graph.facebook.com' are the only supported
--   identity providers for OAuth 2.0 access tokens. Do not include URL
--   schemes and port numbers.
--   
--   Do not specify this value for OpenID Connect ID tokens.
arwwiProviderId :: Lens' AssumeRoleWithWebIdentity (Maybe Text)

-- | The Amazon Resource Name (ARN) of the role that the caller is
--   assuming.
arwwiRoleArn :: Lens' AssumeRoleWithWebIdentity Text

-- | An identifier for the assumed role session. Typically, you pass the
--   name or identifier that is associated with the user who is using your
--   application. That way, the temporary security credentials that your
--   application will use are associated with that user. This session name
--   is included as part of the ARN and assumed role ID in the
--   <a>AssumedRoleUser</a> response element.
arwwiRoleSessionName :: Lens' AssumeRoleWithWebIdentity Text

-- | The OAuth 2.0 access token or OpenID Connect ID token that is provided
--   by the identity provider. Your application must get this token by
--   authenticating the user who is using your application with a web
--   identity provider before the application makes an
--   <a>AssumeRoleWithWebIdentity</a> call.
arwwiWebIdentityToken :: Lens' AssumeRoleWithWebIdentity Text
data AssumeRoleWithWebIdentityResponse

-- | <a>AssumeRoleWithWebIdentityResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>arwwirAssumedRoleUser</a> <tt>::</tt> <a>Maybe</a>
--   <a>AssumedRoleUser</a></li>
--   <li><a>arwwirAudience</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arwwirCredentials</a> <tt>::</tt> <a>Maybe</a>
--   <a>Credentials</a></li>
--   <li><a>arwwirPackedPolicySize</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>arwwirProvider</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arwwirSubjectFromWebIdentityToken</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   </ul>
assumeRoleWithWebIdentityResponse :: AssumeRoleWithWebIdentityResponse

-- | The Amazon Resource Name (ARN) and the assumed role ID, which are
--   identifiers that you can use to refer to the resulting temporary
--   security credentials. For example, you can reference these credentials
--   as a principal in a resource-based policy by using the ARN or assumed
--   role ID. The ARN and ID include the <tt>RoleSessionName</tt> that you
--   specified when you called <tt>AssumeRole</tt>.
arwwirAssumedRoleUser :: Lens' AssumeRoleWithWebIdentityResponse (Maybe AssumedRoleUser)

-- | The intended audience (also known as client ID) of the web identity
--   token. This is traditionally the client identifier issued to the
--   application that requested the web identity token.
arwwirAudience :: Lens' AssumeRoleWithWebIdentityResponse (Maybe Text)

-- | The temporary security credentials, which include an access key ID, a
--   secret access key, and a security token.
arwwirCredentials :: Lens' AssumeRoleWithWebIdentityResponse (Maybe Credentials)

-- | A percentage value that indicates the size of the policy in packed
--   form. The service rejects any policy with a packed size greater than
--   100 percent, which means the policy exceeded the allowed space.
arwwirPackedPolicySize :: Lens' AssumeRoleWithWebIdentityResponse (Maybe Natural)

-- | The issuing authority of the web identity token presented. For OpenID
--   Connect ID Tokens this contains the value of the <tt>iss</tt> field.
--   For OAuth 2.0 access tokens, this contains the value of the
--   <tt>ProviderId</tt> parameter that was passed in the
--   <a>AssumeRoleWithWebIdentity</a> request.
arwwirProvider :: Lens' AssumeRoleWithWebIdentityResponse (Maybe Text)

-- | The unique user identifier that is returned by the identity provider.
--   This identifier is associated with the <tt>WebIdentityToken</tt> that
--   was submitted with the <a>AssumeRoleWithWebIdentity</a> call. The
--   identifier is typically unique to the user and the application that
--   acquired the <tt>WebIdentityToken</tt> (pairwise identifier). For
--   OpenID Connect ID tokens, this field contains the value returned by
--   the identity provider as the token's <tt>sub</tt> (Subject) claim.
arwwirSubjectFromWebIdentityToken :: Lens' AssumeRoleWithWebIdentityResponse (Maybe Text)
instance Eq AssumeRoleWithWebIdentity
instance Ord AssumeRoleWithWebIdentity
instance Read AssumeRoleWithWebIdentity
instance Show AssumeRoleWithWebIdentity
instance Eq AssumeRoleWithWebIdentityResponse
instance Read AssumeRoleWithWebIdentityResponse
instance Show AssumeRoleWithWebIdentityResponse
instance FromXML AssumeRoleWithWebIdentityResponse
instance AWSRequest AssumeRoleWithWebIdentity
instance ToHeaders AssumeRoleWithWebIdentity
instance ToQuery AssumeRoleWithWebIdentity
instance ToPath AssumeRoleWithWebIdentity


-- | Returns a set of temporary security credentials for users who have
--   been authenticated via a SAML authentication response. This operation
--   provides a mechanism for tying an enterprise identity store or
--   directory to role-based AWS access without user-specific credentials
--   or configuration.
--   
--   The temporary security credentials returned by this operation consist
--   of an access key ID, a secret access key, and a security token.
--   Applications can use these temporary security credentials to sign
--   calls to AWS services. The credentials are valid for the duration that
--   you specified when calling <a>AssumeRoleWithSAML</a>, which can be up
--   to 3600 seconds (1 hour) or until the time specified in the SAML
--   authentication response's <tt>SessionNotOnOrAfter</tt> value,
--   whichever is shorter.
--   
--   The maximum duration for a session is 1 hour, and the minimum duration
--   is 15 minutes, even if values outside this range are specified.
--   Optionally, you can pass an IAM access policy to this operation. If
--   you choose not to pass a policy, the temporary security credentials
--   that are returned by the operation have the permissions that are
--   defined in the access policy of the role that is being assumed. If you
--   pass a policy to this operation, the temporary security credentials
--   that are returned by the operation have the permissions that are
--   allowed by both the access policy of the role that is being assumed,
--   <i>and</i> the policy that you pass. This gives you a way to further
--   restrict the permissions for the resulting temporary security
--   credentials. You cannot use the passed policy to grant permissions
--   that are in excess of those allowed by the access policy of the role
--   that is being assumed. For more information, see <a>Permissions for
--   AssumeRoleWithSAML</a> in <i>Using Temporary Security Credentials</i>
--   .
--   
--   Before your application can call <a>AssumeRoleWithSAML</a>, you must
--   configure your SAML identity provider (IdP) to issue the claims
--   required by AWS. Additionally, you must use AWS Identity and Access
--   Management (IAM) to create a SAML provider entity in your AWS account
--   that represents your identity provider, and create an IAM role that
--   specifies this SAML provider in its trust policy.
--   
--   Calling <a>AssumeRoleWithSAML</a> does not require the use of AWS
--   security credentials. The identity of the caller is validated by using
--   keys in the metadata document that is uploaded for the SAML provider
--   entity for your identity provider.
--   
--   For more information, see the following resources:
--   
--   <a>Creating Temporary Security Credentials for SAML Federation</a> in
--   <i>UsingTemporary Security Credentials</i>. <a>SAML Providers</a> in
--   <i>Using IAM</i>. <a>Configuringa Relying Party and Claims</a> in
--   <i>Using IAM</i>. <a>Creating a Role for SAML-BasedFederation</a> in
--   <i>Using IAM</i>.
--   
--   
--   <a>http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html</a>
module Network.AWS.STS.AssumeRoleWithSAML
data AssumeRoleWithSAML

-- | <a>AssumeRoleWithSAML</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>arwsamlDurationSeconds</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>arwsamlPolicy</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arwsamlPrincipalArn</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>arwsamlRoleArn</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>arwsamlSAMLAssertion</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
assumeRoleWithSAML :: Text -> Text -> Text -> AssumeRoleWithSAML

-- | The duration, in seconds, of the role session. The value can range
--   from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default,
--   the value is set to 3600 seconds. An expiration can also be specified
--   in the SAML authentication response's <tt>SessionNotOnOrAfter</tt>
--   value. The actual expiration time is whichever value is shorter.
--   
--   The maximum duration for a session is 1 hour, and the minimum duration
--   is 15 minutes, even if values outside this range are specified.
arwsamlDurationSeconds :: Lens' AssumeRoleWithSAML (Maybe Natural)

-- | An IAM policy in JSON format.
--   
--   The policy parameter is optional. If you pass a policy, the temporary
--   security credentials that are returned by the operation have the
--   permissions that are allowed by both the access policy of the role
--   that is being assumed, <i>and</i> the policy that you pass. This gives
--   you a way to further restrict the permissions for the resulting
--   temporary security credentials. You cannot use the passed policy to
--   grant permissions that are in excess of those allowed by the access
--   policy of the role that is being assumed. For more information, see
--   <a>Permissions for AssumeRoleWithSAML</a> in <i>Using Temporary
--   Security Credentials</i> .
--   
--   The policy must be 2048 bytes or shorter, and its packed size must be
--   less than 450 bytes.
arwsamlPolicy :: Lens' AssumeRoleWithSAML (Maybe Text)

-- | The Amazon Resource Name (ARN) of the SAML provider in IAM that
--   describes the IdP.
arwsamlPrincipalArn :: Lens' AssumeRoleWithSAML Text

-- | The Amazon Resource Name (ARN) of the role that the caller is
--   assuming.
arwsamlRoleArn :: Lens' AssumeRoleWithSAML Text

-- | The base-64 encoded SAML authentication response provided by the IdP.
--   
--   For more information, see <a>Configuring a Relying Party and Adding
--   Claims</a> in the <i>Using IAM</i> guide.
arwsamlSAMLAssertion :: Lens' AssumeRoleWithSAML Text
data AssumeRoleWithSAMLResponse

-- | <a>AssumeRoleWithSAMLResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>arwsamlrAssumedRoleUser</a> <tt>::</tt> <a>Maybe</a>
--   <a>AssumedRoleUser</a></li>
--   <li><a>arwsamlrAudience</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arwsamlrCredentials</a> <tt>::</tt> <a>Maybe</a>
--   <a>Credentials</a></li>
--   <li><a>arwsamlrIssuer</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arwsamlrNameQualifier</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>arwsamlrPackedPolicySize</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>arwsamlrSubject</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arwsamlrSubjectType</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   </ul>
assumeRoleWithSAMLResponse :: AssumeRoleWithSAMLResponse
arwsamlrAssumedRoleUser :: Lens' AssumeRoleWithSAMLResponse (Maybe AssumedRoleUser)

-- | The value of the <tt>Recipient</tt> attribute of the
--   <tt>SubjectConfirmationData</tt> element of the SAML assertion.
arwsamlrAudience :: Lens' AssumeRoleWithSAMLResponse (Maybe Text)
arwsamlrCredentials :: Lens' AssumeRoleWithSAMLResponse (Maybe Credentials)

-- | The value of the <tt>Issuer</tt> element of the SAML assertion.
arwsamlrIssuer :: Lens' AssumeRoleWithSAMLResponse (Maybe Text)

-- | A hash value based on the concatenation of the <tt>Issuer</tt>
--   response value, the AWS account ID, and the friendly name (the last
--   part of the ARN) of the SAML provider in IAM. The combination of
--   <tt>NameQualifier</tt> and <tt>Subject</tt> can be used to uniquely
--   identify a federated user.
--   
--   The following pseudocode shows how the hash value is calculated:
--   
--   'BASE64 ( SHA1 ( "<a>https://example.com/saml"</a> + "123456789012" +
--   "/MySAMLIdP") )'
arwsamlrNameQualifier :: Lens' AssumeRoleWithSAMLResponse (Maybe Text)

-- | A percentage value that indicates the size of the policy in packed
--   form. The service rejects any policy with a packed size greater than
--   100 percent, which means the policy exceeded the allowed space.
arwsamlrPackedPolicySize :: Lens' AssumeRoleWithSAMLResponse (Maybe Natural)

-- | The value of the <tt>NameID</tt> element in the <tt>Subject</tt>
--   element of the SAML assertion.
arwsamlrSubject :: Lens' AssumeRoleWithSAMLResponse (Maybe Text)

-- | The format of the name ID, as defined by the <a>Format</a> attribute
--   in the <tt>NameID</tt> element of the SAML assertion. Typical examples
--   of the format are <tt>transient</tt> or <tt>persistent</tt>.
--   
--   If the format includes the prefix
--   'urn:oasis:names:tc:SAML:2.0:nameid-format', that prefix is removed.
--   For example, 'urn:oasis:names:tc:SAML:2.0:nameid-format:transient' is
--   returned as <tt>transient</tt>. If the format includes any other
--   prefix, the format is returned with no modifications.
arwsamlrSubjectType :: Lens' AssumeRoleWithSAMLResponse (Maybe Text)
instance Eq AssumeRoleWithSAML
instance Ord AssumeRoleWithSAML
instance Read AssumeRoleWithSAML
instance Show AssumeRoleWithSAML
instance Eq AssumeRoleWithSAMLResponse
instance Read AssumeRoleWithSAMLResponse
instance Show AssumeRoleWithSAMLResponse
instance FromXML AssumeRoleWithSAMLResponse
instance AWSRequest AssumeRoleWithSAML
instance ToHeaders AssumeRoleWithSAML
instance ToQuery AssumeRoleWithSAML
instance ToPath AssumeRoleWithSAML


-- | Returns a set of temporary security credentials (consisting of an
--   access key ID, a secret access key, and a security token) that you can
--   use to access AWS resources that you might not normally have access
--   to. Typically, you use <a>AssumeRole</a> for cross-account access or
--   federation.
--   
--   Important: You cannot call <a>AssumeRole</a> by using AWS account
--   credentials; access will be denied. You must use IAM user credentials
--   or temporary security credentials to call <a>AssumeRole</a>.
--   
--   For cross-account access, imagine that you own multiple accounts and
--   need to access resources in each account. You could create long-term
--   credentials in each account to access those resources. However,
--   managing all those credentials and remembering which one can access
--   which account can be time consuming. Instead, you can create one set
--   of long-term credentials in one account and then use temporary
--   security credentials to access all the other accounts by assuming
--   roles in those accounts. For more information about roles, see
--   <a>Roles</a> in <i>Using IAM</i>.
--   
--   For federation, you can, for example, grant single sign-on access to
--   the AWS Management Console. If you already have an identity and
--   authentication system in your corporate network, you don't have to
--   recreate user identities in AWS in order to grant those user
--   identities access to AWS. Instead, after a user has been
--   authenticated, you call <a>AssumeRole</a> (and specify the role with
--   the appropriate permissions) to get temporary security credentials for
--   that user. With those temporary security credentials, you construct a
--   sign-in URL that users can use to access the console. For more
--   information, see <a>Scenarios forGranting Temporary Access</a> in
--   <i>Using Temporary Security Credentials</i>.
--   
--   The temporary security credentials are valid for the duration that you
--   specified when calling <a>AssumeRole</a>, which can be from 900
--   seconds (15 minutes) to 3600 seconds (1 hour). The default is 1 hour.
--   
--   Optionally, you can pass an IAM access policy to this operation. If
--   you choose not to pass a policy, the temporary security credentials
--   that are returned by the operation have the permissions that are
--   defined in the access policy of the role that is being assumed. If you
--   pass a policy to this operation, the temporary security credentials
--   that are returned by the operation have the permissions that are
--   allowed by both the access policy of the role that is being assumed,
--   <i>and</i> the policy that you pass. This gives you a way to further
--   restrict the permissions for the resulting temporary security
--   credentials. You cannot use the passed policy to grant permissions
--   that are in excess of those allowed by the access policy of the role
--   that is being assumed. For more information, see <a>Permissions for
--   AssumeRole</a> in <i>UsingTemporary Security Credentials</i>.
--   
--   To assume a role, your AWS account must be trusted by the role. The
--   trust relationship is defined in the role's trust policy when the role
--   is created. You must also have a policy that allows you to call
--   'sts:AssumeRole'.
--   
--   Using MFA with AssumeRole
--   
--   You can optionally include multi-factor authentication (MFA)
--   information when you call <a>AssumeRole</a>. This is useful for
--   cross-account scenarios in which you want to make sure that the user
--   who is assuming the role has been authenticated using an AWS MFA
--   device. In that scenario, the trust policy of the role being assumed
--   includes a condition that tests for MFA authentication; if the caller
--   does not include valid MFA information, the request to assume the role
--   is denied. The condition in a trust policy that tests for MFA
--   authentication might look like the following example.
--   
--   '<a>Condition</a>: {<a>Null</a>: {"aws:MultiFactorAuthAge": false}}'
--   
--   For more information, see <a>Configuring MFA-Protected API Access</a>
--   in the <i>UsingIAM</i> guide.
--   
--   To use MFA with <a>AssumeRole</a>, you pass values for the
--   <tt>SerialNumber</tt> and <tt>TokenCode</tt> parameters. The
--   <tt>SerialNumber</tt> value identifies the user's hardware or virtual
--   MFA device. The <tt>TokenCode</tt> is the time-based one-time password
--   (TOTP) that the MFA devices produces.
--   
--   
--   <a>http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html</a>
module Network.AWS.STS.AssumeRole
data AssumeRole

-- | <a>AssumeRole</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>arDurationSeconds</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>arExternalId</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arPolicy</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arRoleArn</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>arRoleSessionName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>arSerialNumber</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>arTokenCode</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
assumeRole :: Text -> Text -> AssumeRole

-- | The duration, in seconds, of the role session. The value can range
--   from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default,
--   the value is set to 3600 seconds.
arDurationSeconds :: Lens' AssumeRole (Maybe Natural)

-- | A unique identifier that is used by third parties to assume a role in
--   their customers' accounts. For each role that the third party can
--   assume, they should instruct their customers to create a role with the
--   external ID that the third party generated. Each time the third party
--   assumes the role, they must pass the customer's external ID. The
--   external ID is useful in order to help third parties bind a role to
--   the customer who created it. For more information about the external
--   ID, see About the External ID in <i>UsingTemporary Security
--   Credentials</i>.
arExternalId :: Lens' AssumeRole (Maybe Text)

-- | An IAM policy in JSON format.
--   
--   The policy parameter is optional. If you pass a policy, the temporary
--   security credentials that are returned by the operation have the
--   permissions that are allowed by both the access policy of the role
--   that is being assumed, <i>and</i> the policy that you pass. This gives
--   you a way to further restrict the permissions for the resulting
--   temporary security credentials. You cannot use the passed policy to
--   grant permissions that are in excess of those allowed by the access
--   policy of the role that is being assumed. For more information, see
--   <a>Permissions for AssumeRole</a> in <i>Using Temporary Security
--   Credentials</i>.
arPolicy :: Lens' AssumeRole (Maybe Text)

-- | The Amazon Resource Name (ARN) of the role that the caller is
--   assuming.
arRoleArn :: Lens' AssumeRole Text

-- | An identifier for the assumed role session. The session name is
--   included as part of the <a>AssumedRoleUser</a>.
arRoleSessionName :: Lens' AssumeRole Text

-- | The identification number of the MFA device that is associated with
--   the user who is making the <a>AssumeRole</a> call. Specify this value
--   if the trust policy of the role being assumed includes a condition
--   that requires MFA authentication. The value is either the serial
--   number for a hardware device (such as <tt>GAHT12345678</tt>) or an
--   Amazon Resource Name (ARN) for a virtual device (such as
--   'arn:aws:iam::123456789012:mfa/user').
arSerialNumber :: Lens' AssumeRole (Maybe Text)

-- | The value provided by the MFA device, if the trust policy of the role
--   being assumed requires MFA (that is, if the policy includes a
--   condition that tests for MFA). If the role being assumed requires MFA
--   and if the <tt>TokenCode</tt> value is missing or expired, the
--   <a>AssumeRole</a> call returns an "access denied" error.
arTokenCode :: Lens' AssumeRole (Maybe Text)
data AssumeRoleResponse

-- | <a>AssumeRoleResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>arrAssumedRoleUser</a> <tt>::</tt> <a>Maybe</a>
--   <a>AssumedRoleUser</a></li>
--   <li><a>arrCredentials</a> <tt>::</tt> <a>Maybe</a>
--   <a>Credentials</a></li>
--   <li><a>arrPackedPolicySize</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   </ul>
assumeRoleResponse :: AssumeRoleResponse

-- | The Amazon Resource Name (ARN) and the assumed role ID, which are
--   identifiers that you can use to refer to the resulting temporary
--   security credentials. For example, you can reference these credentials
--   as a principal in a resource-based policy by using the ARN or assumed
--   role ID. The ARN and ID include the <tt>RoleSessionName</tt> that you
--   specified when you called <a>AssumeRole</a>.
arrAssumedRoleUser :: Lens' AssumeRoleResponse (Maybe AssumedRoleUser)

-- | The temporary security credentials, which include an access key ID, a
--   secret access key, and a security (or session) token.
arrCredentials :: Lens' AssumeRoleResponse (Maybe Credentials)

-- | A percentage value that indicates the size of the policy in packed
--   form. The service rejects any policy with a packed size greater than
--   100 percent, which means the policy exceeded the allowed space.
arrPackedPolicySize :: Lens' AssumeRoleResponse (Maybe Natural)
instance Eq AssumeRole
instance Ord AssumeRole
instance Read AssumeRole
instance Show AssumeRole
instance Eq AssumeRoleResponse
instance Read AssumeRoleResponse
instance Show AssumeRoleResponse
instance FromXML AssumeRoleResponse
instance AWSRequest AssumeRole
instance ToHeaders AssumeRole
instance ToQuery AssumeRole
instance ToPath AssumeRole


-- | The AWS Security Token Service (STS) is a web service that enables you
--   to request temporary, limited-privilege credentials for AWS Identity
--   and Access Management (IAM) users or for users that you authenticate
--   (federated users).
module Network.AWS.STS
