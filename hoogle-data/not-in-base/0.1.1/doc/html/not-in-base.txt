-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Useful utility functions that only depend on base.
--   
--   Useful utility functions that only depend on base.
@package not-in-base
@version 0.1.1

module NIB.Pointfree
fst3 :: (a, b, c) -> a
snd3 :: (a, b, c) -> b
trd3 :: (a, b, c) -> c

-- | Lambdifies a function. See '(||*)' and '(&amp;&amp;*)' for uses of
--   <a>lambdify</a>. | Used in order to make operators capable of
--   operating on functions that later on | are supplied some value that
--   all functions operate on.
--   
--   <pre>
--   (+*) = lambdify (+)
--   fourTwo = (*4) +* (*2)
--   42 == fourTwo 7
--   </pre>
lambdify :: (x -> y -> z) -> (t -> x) -> (t -> y) -> t -> z

-- | Lambdifies '(||)'.
--   
--   <pre>
--   isBlankOrCommaChecker = (==' ') ||* (==',')
--   isBlankOrComma = isBlankOrCommaChecker 'j'
--   </pre>
(||*) :: (a -> Bool) -> (a -> Bool) -> a -> Bool

-- | Lambdifies '(&amp;&amp;)'.
--   
--   <pre>
--   isInRangeChecker = (&gt;9) &amp;&amp;* (&lt;30)
--   isInRange = isInRangeChecker 17
--   </pre>
(&&*) :: (a -> Bool) -> (a -> Bool) -> a -> Bool

-- | 2-point-free operator. Similar to <a>.</a>, but where | the second
--   function takes two (2) arguments instead of one (1).
--   
--   <pre>
--   multAndSquare (^2) .^.. (*)
--   36 == multAndSqare 2 3
--   </pre>
(^..) :: (c -> d) -> (a -> b -> c) -> a -> b -> d

-- | 3-point-free operator. See '(^..)'.
(^...) :: (d -> e) -> (a -> b -> c -> d) -> a -> b -> c -> e

-- | Split a 2-tuple <tt>x</tt> into a 2-stack and pass it to <tt>f</tt>. |
--   The same as uncurry.
(..%) :: (a -> b -> c) -> (a, b) -> c
(..%..) :: (c -> d -> e) -> (a -> b -> (c, d)) -> a -> b -> e

-- | Split a 3-tuple <tt>x</tt> into a 3-stack and pass it to <tt>f</tt>.
(...%) :: (a -> b -> c -> d) -> (a, b, c) -> d

-- | Pipes a monadic return through a non-monadic transformation function.
--   | liftM with arguments flipped.
--   
--   <pre>
--   readIO &gt;&gt;* toUpper
--   </pre>
(>>*) :: Monad m => m a -> (a -> b) -> m b

-- | gives `(9, 21)`, i.e. `(2 + 9, 3 * 7)`.
(..@) :: (a -> b, a -> c) -> a -> (b, c)

-- | Same as <a>..@</a>, but with a 3-tuple.
(...@) :: (a -> b, a -> c, a -> d) -> a -> (b, c, d)

module NIB.List

-- | Splits a list <tt>x</tt> of <tt>a</tt> into a list of lists of
--   <tt>a</tt> at every <tt>c</tt>.
--   
--   <pre>
--   "splitBy "foo,bar" "',' == ["foo","bar"] ' 
--   </pre>
splitBy :: Eq a => a -> [a] -> [[a]]

-- | Trims every element satisfying <tt>c</tt> from the beginning or end of
--   the list.
--   
--   <pre>
--   trim (==' ') "  foo   " == "foo"
--   </pre>
trim :: (a -> Bool) -> [a] -> [a]

-- | Convert first element in list
--   
--   <pre>
--   convertFirst (toUpper) "fO0" == "FO0"
--   </pre>
convertFirst :: (a -> a) -> [a] -> [a]


-- | Contains useful generic functions not found elsewhere.
module NIB.String
class ToString a
toString :: ToString a => a -> String

-- | Remove all line breaks in a string
--   
--   <pre>
--   "testtest" == removeBreak "test\n\rtest\r"
--   </pre>
removeBreak :: String -> String

-- | Convert first character in String to lower.
--   
--   <pre>
--   lowerFirst "Foo" == "foo"
--   lowerFirst "BaR" == "baR"
--   lowerFirst "g0O" == "g0O".'
--   </pre>
lowerFirst :: String -> String

-- | Convert first character in String to upper.
--   
--   <pre>
--   upperFirst "foo" == "Foo"
--   upperFirst "bAr" == "BAr"
--   upperFirst "G0O" == "G0O".'
--   </pre>
upperFirst :: String -> String

-- | Convert every space (' ') in a string to a blank ('_') instead.
--   
--   <pre>
--   spaceToBlank " " == "_"
--   spaceToBlank " foo  " == "_foo__"
--   spaceToBlank "b a r" == "b_a_r"
--   </pre>
spaceToBlank :: String -> String

-- | Trims whitespace from the beginning or end.
--   
--   <pre>
--   trimWs "  foo  " == "foo"
--   </pre>
trimWs :: String -> String
instance [overlap ok] Show a => ToString a
instance [overlap ok] ToString Char
instance [overlap ok] ToString String
