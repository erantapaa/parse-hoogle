-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A collection of various small helpers useful in any yesod application.
--   
--   A collection of various small helpers useful in any yesod application.
@package yesod-goodies
@version 0.0.4.1.1


module Yesod.Goodies.Time

-- | Based on <tt>humanReadableTimeDiff</tt> found in
--   <a>https://github.com/snoyberg/haskellers/blob/master/Haskellers.hs</a>,
--   <a>https://github.com/snoyberg/haskellers/blob/master/LICENSE</a>
humanReadableTime :: UTCTime -> GHandler s m String


module Yesod.Goodies.Shorten
class Shorten a
shorten :: Shorten a => Int -> a -> a
instance Shorten Text
instance Shorten String


module Yesod.Goodies.Search

-- | A ranked search result
data SearchResult a
SearchResult :: Double -> a -> SearchResult a
searchRank :: SearchResult a -> Double
searchResult :: SearchResult a -> a

-- | Any item can be searched by providing a <tt><a>match</a></tt>
--   function.
class Search a
preference :: Search a => SearchResult a -> SearchResult a -> Ordering
match :: Search a => Text -> a -> Maybe (SearchResult a)

-- | Excute a search on a list of <tt>a</tt>s and rank the results
search :: Search a => Text -> [a] -> [SearchResult a]

-- | Identical but discards the actual rank values.
search_ :: Search a => Text -> [a] -> [a]

-- | Add (or remove) weight from items that have certian properties.
weightedSearch :: Search a => (a -> Double) -> Text -> [a] -> [SearchResult a]
weightedSearch_ :: Search a => (a -> Double) -> Text -> [a] -> [a]

-- | Being a member of this class means defining the way to represent your
--   type as pure text so it can be searched by keyword, etc.
class TextSearch a
toText :: TextSearch a => a -> Text

-- | Search term is interpreted as keywords. Results are ranked by the
--   number of words that appear in the source text, a rank of 0 returns
--   Nothing.
keywordMatch :: TextSearch a => Text -> a -> Maybe (SearchResult a)


-- | orignal concept by ajdunlap:
--   <a>http://hackage.haskell.org/package/yesod-paginate</a>
--   
--   this version does not use the subsite approach.
module Yesod.Goodies.Paginate
data PageOptions a s m
PageOptions :: Int -> ([a] -> GWidget s m ()) -> PageOptions a s m
itemsPerPage :: PageOptions a s m -> Int

-- | How to show a single page's item listing
showItems :: PageOptions a s m -> [a] -> GWidget s m ()
paginate :: PageOptions a s m -> [a] -> GWidget s m ()


-- | Rewrite/simplification of yesod-markdown written by ajdunlap.
--   
--   <a>https://github.com/ajdunlap/yesod-markdown</a>
module Yesod.Goodies.Markdown
newtype Markdown
Markdown :: String -> Markdown
parseMarkdown :: ParserState -> Markdown -> Pandoc
writePandoc :: WriterOptions -> Pandoc -> Html

-- | Converts markdown directly to html using the yesod default option sets
markdownToHtml :: Markdown -> Html

-- | Reads markdown in from the specified file; returns the empty string if
--   the file does not exist
markdownFromFile :: FilePath -> IO Markdown
yesodDefaultWriterOptions :: WriterOptions
yesodDefaultParserState :: ParserState
markdownField :: (IsForm f, (FormType f) ~ Markdown) => FormFieldSettings -> Maybe Markdown -> f
maybeMarkdownField :: FormFieldSettings -> FormletField sub y (Maybe Markdown)
instance Eq Markdown
instance Ord Markdown
instance Show Markdown
instance Read Markdown
instance PersistField Markdown
instance IsString Markdown
instance Monoid Markdown
instance ToFormField (Maybe Markdown) y
instance ToFormField Markdown y
instance Shorten Markdown


module Yesod.Goodies.Links

-- | An internal route or external url
data Destination m
Internal :: (Route m) -> Destination m
External :: Text -> Destination m

-- | A link to a <a>Destination</a> with supplied titles and text to be
--   used when showing the html.
data Link m
Link :: Destination m -> Text -> Text -> Link m
linkDest :: Link m -> Destination m
linkTitle :: Link m -> Text
linkText :: Link m -> Text

-- | A type family class used to generalize widgets printing routes that
--   are internal to your site
--   
--   <pre>
--   instance YesodLinked MySite where
--       type Linked = MySite
--   </pre>
class YesodLinked m where { type family Linked; }

-- | Any type can represent a link.
--   
--   <pre>
--   instance IsLink MyAppRoute where
--       toLink RootR  = Link (Internal RootR)  "go home"         "home"
--       toLink AboutR = Link (Internal AboutR) "about this site" "about"
--       ...
--   
--   getRootR :: Handler RepHtml
--   getRootR = defaultLayout $ do
--       [hamlet|
--   
--           be sure to visit our ^{link AboutR} page.
--   
--           |]
--   </pre>
class IsLink a
toLink :: IsLink a => a -> Link Linked

-- | Link to any <tt><a>IsLink</a></tt> type. This is simply
--   <tt><a>link'</a> . <a>toLink</a></tt>.
link :: IsLink a => a -> GWidget s Linked ()

-- | Link to a raw <tt><a>Link</a></tt>. Can be used even if your site is
--   not an instance of <a>YesodLinked</a>.
link' :: Link m -> GWidget s m ()


-- | <a>http://en.gravatar.com/</a>.
module Yesod.Goodies.Gravatar

-- | This is <tt><tt>Text</tt></tt> because yesod is moving towards using
--   that type in as many places as possible. It's what you should be
--   storing in your database and what <a>Yesod.Form</a> already gives you
--   out of an input.
type Email = Text

-- | Return the avatar for the given email using the provided options
gravatarImg :: Email -> GravatarOptions -> String
data GravatarOptions
GravatarOptions :: Maybe Size -> Maybe Default -> ForceDefault -> Maybe Rating -> GravatarOptions
gSize :: GravatarOptions -> Maybe Size
gDefault :: GravatarOptions -> Maybe Default
gForceDefault :: GravatarOptions -> ForceDefault
gRating :: GravatarOptions -> Maybe Rating
class GravatarParam a
toParam :: GravatarParam a => a -> Maybe (String, String)

-- | Size in pixels
newtype Size
Size :: Int -> Size

-- | Image to show when an avatar is not available
data Default

-- | supply your own url
Custom :: String -> Default

-- | do not load an image return a 404
NotFound :: Default

-- | mystery man
MM :: Default

-- | geometric pattern based on the hash
Identicon :: Default

-- | a generated monster
MonsterId :: Default

-- | generated faces
Wavatar :: Default

-- | gernated, 8-bit arcade style pixelated face
Retro :: Default

-- | Always show the default image
newtype ForceDefault
ForceDefault :: Bool -> ForceDefault

-- | Limit the returned images by rating
data Rating
G :: Rating
PG :: Rating
R :: Rating
X :: Rating
defaultOptions :: GravatarOptions
instance GravatarParam Rating
instance GravatarParam Default
instance GravatarParam ForceDefault
instance GravatarParam Size


-- | A collection of various small helpers that are general enough to be
--   useful in any yesod application.
module Yesod.Goodies
