-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Easy to use library for audio programming.
--   
--   WARNING: This project is still in pre-alpha stage. For adventurers
--   only!
--   
--   An easy to use library for live audio programming in Haskell. Instant
--   gratification from your speakers by typing into GHCi!
--   
--   This module uses the OpenAL bindings.
--   
--   WARNING: This project is still in pre-alpha stage. For adventurers
--   only!
@package tomato-rubato-openal
@version 0.1.0.3

module Sound.Tomato.Speakers

-- | Data type representing your loudspeakers.
data Speakers

-- | Audio sample rate. Needs to be one of the <a>standardSampleRates</a> .
type SampleRate = Frequency

-- | List of standard sample rates, from high quality to low quality
--   
--   <pre>
--   standardSampleRates = [44100,22050,11025]
--   </pre>
standardSampleRates :: [SampleRate]

-- | Size of an audio block.
--   
--   The lower the block size, the lower the latency. However, if the block
--   size is too low, there will be jitter.
--   
--   Recommended values: 64, 128, 256, 512
type BlockSize = Int

-- | Initialize audio environment.
withSpeakers :: SampleRate -> BlockSize -> (Speakers -> IO a) -> IO a

-- | Play a test sine wave. Look at the source code to see how the library
--   is used.
--   
--   This should be a clear sound, similar to a telephone test tone. If
--   there is rattling or hissing, you have a problem.
--   
--   <pre>
--   &gt; testSine 440
--   </pre>
testSine :: Frequency -> IO ()

-- | Single audio sample.
type Sample = Float

-- | Play a (possibly) infinite list of samples.
playSamples :: Speakers -> [Sample] -> IO ()

-- | Memory block containing audio data. Blockwise audio processing may be
--   faster than lazy lists of samples.
type AudioBlock = Vector Sample

-- | Add a block of audio data to the speaker queue. May block if the
--   speaker has too much pending data.
playBlock :: Speakers -> AudioBlock -> IO ()
