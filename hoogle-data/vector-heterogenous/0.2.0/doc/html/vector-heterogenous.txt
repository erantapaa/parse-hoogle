-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A type-safe library for vectors whose elements can be of any type, or any type satisfying some constraints
--   
@package vector-heterogenous
@version 0.2.0

module Data.Vector.Heterogenous.HList

-- | The heterogenous list
data HList :: [*] -> *
HNil :: HList []
(:::) :: t -> HList ts -> HList (t : ts)

-- | Used only for the HList class to determine its length
class HLength xs
hlength :: HLength xs => xs -> Int

-- | For construction from lists
class List2HList x xs
list2hlist :: List2HList x xs => [x] -> HList (x : xs)

-- | For converting into a list
class HList2List xs a | xs -> a
hlist2list :: HList2List xs a => xs -> [a]

-- | Equivalent to prelude's "take"
class HTake1 n xs1 xs2 | n xs1 -> xs2
htake1 :: HTake1 n xs1 xs2 => n -> xs1 -> xs2

-- | Equivalent to prelude's "drop"
class HDrop1 n xs1 xs2 | n xs1 -> xs2
hdrop1 :: HDrop1 n xs1 xs2 => n -> xs1 -> xs2
class TypeList t
typeList :: TypeList t => t -> [TypeRep]
class ConstraintBox box a
box :: ConstraintBox box a => a -> box
unsafeUnbox :: ConstraintBox box a => box -> a
class Downcast h box where downcastAs box = downcast
downcast :: Downcast h box => h -> [box]
downcastAs :: Downcast h box => (a -> box) -> h -> [box]

-- | Use this box unless you know for certain that your types won't have a
--   show instance.
data ShowBox
ShowBox :: !a -> ShowBox

-- | Most generic box, can be used on any type.
data AnyBox
AnyBox :: !a -> AnyBox
data Nat1
Zero :: Nat1
Succ :: Nat1 -> Nat1
data Nat1Box (n :: Nat1)
Nat1Box :: Nat1Box
instance Show a => ConstraintBox ShowBox a
instance Show ShowBox
instance (ConstraintBox box x, Downcast (HList xs) box) => Downcast (HList (x : xs)) box
instance Downcast (HList '[]) a
instance HTake1 (Nat1Box n) (HList xs1) (HList xs2) => HTake1 (Nat1Box ('Succ n)) (HList (x : xs1)) (HList (x : xs2))
instance HTake1 (Nat1Box 'Zero) (HList xs1) (HList '[])
instance HDrop1 (Nat1Box n) (HList xs1) (HList xs2) => HDrop1 (Nat1Box ('Succ n)) (HList (x : xs1)) (HList xs2)
instance HDrop1 (Nat1Box 'Zero) (HList xs1) (HList xs1)
instance List2HList x xs => List2HList x (x : xs)
instance List2HList x '[]
instance HList2List (HList xs) a => HList2List (HList (a : xs)) a
instance HList2List (HList '[a]) a
instance HLength (HList xs) => HLength (HList (x : xs))
instance HLength (HList '[])
instance (TypeList (HList xs), Typeable x) => TypeList (HList (x : xs))
instance TypeList (HList '[])
instance (Monoid x, Monoid (HList xs)) => Monoid (HList (x : xs))
instance Monoid (HList '[])
instance (Ord x, Ord (HList xs)) => Ord (HList (x : xs))
instance Ord (HList '[])
instance (Eq x, Eq (HList xs)) => Eq (HList (x : xs))
instance Eq (HList '[])
instance (Show x, Show (HList xs)) => Show (HList (x : xs))
instance Show (HList '[])

module Data.Vector.Heterogenous.Unsafe
newtype UnsafeHVector xs
UnsafeHVector :: (Vector UnsafeBox) -> UnsafeHVector xs
unhvec :: (UnsafeHVectorWriter a, HLength a) => a -> UnsafeHVector a
instance Read UnsafeBox
instance Show UnsafeBox
instance Show (ShowIndex (UnsafeHVector (HList '[])))
instance (Show x, Show (ShowIndex (UnsafeHVector (HList xs)))) => Show (ShowIndex (UnsafeHVector (HList (x : xs))))
instance Show (ShowIndex (UnsafeHVector a)) => Show (UnsafeHVector a)
instance UnsafeHVectorWriter (HList '[])
instance UnsafeHVectorWriter (HList xs) => UnsafeHVectorWriter (HList (x : xs))


-- | Heterogenous vectors. For more info on heterogenous collections, see
--   <a>http://www.haskell.org/haskellwiki/Heterogenous_collections</a>
module Data.Vector.Heterogenous
newtype HVector box (xs :: [a])
HVector :: Vector box -> HVector box
getvec :: HVector box -> Vector box

-- | creates an <a>HVector</a> from an <a>HList</a>. For example:
vec :: (HLength (HList xs), Downcast (HList xs) box) => (a -> box) -> HList xs -> HVector box (xs :: [*])
class View vec i ret | vec i -> ret
view :: View vec i ret => vec -> i -> ret
class (Downcast (HList xs) box, HLength (HList xs), HListBuilder (Indexer (HVector box xs)) (HList xs)) => ValidHVector box xs
toHList :: HListBuilder (Indexer (HVector box xs)) ys => HVector box xs -> ys
instance (View (Indexer (HVector box xs)) (Empty (ToNat1 n)) ret, KnownNat n) => View (HVector box xs) (proxy n) ret
instance (ConstraintBox box ret, View (Indexer (HVector box xs)) (Empty n) ret) => View (Indexer (HVector box (x : xs))) (Empty ('Succ n)) ret
instance ConstraintBox box x => View (Indexer (HVector box (x : xs))) (Empty 'Zero) x
instance (Monoid (HList xs), Downcast (HList xs) box, HLength (HList xs), HListBuilder (Indexer (HVector box xs)) (HList xs)) => Monoid (HVector box xs)
instance (ConstraintBox box x, HListBuilder (Indexer (HVector box xs)) (HList xs)) => HListBuilder (Indexer (HVector box (x : xs))) (HList (x : xs))
instance HListBuilder (Indexer (HVector box '[])) (HList '[])
instance (Downcast (HList xs) box, HLength (HList xs), HListBuilder (Indexer (HVector box xs)) (HList xs)) => ValidHVector box xs
instance Show box => Show (HVector box xs)
