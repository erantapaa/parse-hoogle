-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Run test-framework tests with Hspec
--   
--   A `test-framework` compatibility layer on top of Hspec, it allows you
--   to run `test-framework` tests with Hspec unmodified.
--   
--   All that is required is to remove
--   
--   <ul>
--   <li>`test-framework`</li>
--   <li>`test-framework-quickcheck2`</li>
--   <li>`test-framework-hunit`</li>
--   <li>`test-framework-th`</li>
--   </ul>
--   
--   from the `build-depends` section of your cabal file and add
--   
--   <ul>
--   <li>`hspec-test-framework`</li>
--   <li>`hspec-test-framework-th`</li>
--   </ul>
--   
--   in theire place.
--   
--   NOTE: The packages `hspec-test-framework` and
--   `hspec-test-framework-th` are hidden by default, so that they do not
--   interfere with an installed version of `test-framework`. If you want
--   to use them with e.g. <a>ghci</a>, you have to pass the command-line
--   flags <tt>-packagehspec-test-framework
--   -packagehspec-test-framework-th</tt> to GHC.
@package hspec-test-framework-th
@version 0.0.0

module Test.Framework.TH

-- | Generate the usual code and extract the usual functions needed in
--   order to run HUnit<i>Quickcheck</i>Quickcheck2. All functions
--   beginning with case_, prop_ or test_ will be extracted.
--   
--   <pre>
--   {-# OPTIONS_GHC -fglasgow-exts -XTemplateHaskell #-}
--   module MyModuleTest where
--   import Test.HUnit
--   import MainTestGenerator
--   
--   main = $(defaultMainGenerator)
--   
--   case_Foo = do 4 @=? 4
--   
--   case_Bar = do "hej" @=? "hej"
--   
--   prop_Reverse xs = reverse (reverse xs) == xs
--     where types = xs :: [Int]
--   
--   test_Group =
--       [ testCase "1" case_Foo
--       , testProperty "2" prop_Reverse
--       ]
--   </pre>
--   
--   will automagically extract prop_Reverse, case_Foo, case_Bar and
--   test_Group and run them as well as present them as belonging to the
--   testGroup <tt>MyModuleTest</tt> such as
--   
--   <pre>
--   me: runghc MyModuleTest.hs 
--   MyModuleTest:
--     Reverse: [OK, passed 100 tests]
--     Foo: [OK]
--     Bar: [OK]
--     Group:
--       1: [OK]
--       2: [OK, passed 100 tests]
--   
--            Properties  Test Cases   Total       
--    Passed  2           3            5          
--    Failed  0           0            0           
--    Total   2           3            5
--   </pre>
defaultMainGenerator :: ExpQ
defaultMainGenerator2 :: ExpQ

-- | Generate the usual code and extract the usual functions needed for a
--   testGroup in HUnit<i>Quickcheck</i>Quickcheck2. All functions
--   beginning with case_, prop_ or test_ will be extracted.
--   
--   <pre>
--   -- file SomeModule.hs
--   fooTestGroup = $(testGroupGenerator)
--   main = defaultMain [fooTestGroup]
--   case_1 = do 1 @=? 1
--   case_2 = do 2 @=? 2
--   prop_p xs = reverse (reverse xs) == xs
--    where types = xs :: [Int]
--   </pre>
--   
--   is the same as
--   
--   <pre>
--   -- file SoomeModule.hs
--   fooTestGroup = testGroup "SomeModule" [testProperty "p" prop_1, testCase "1" case_1, testCase "2" case_2]
--   main = defaultMain [fooTestGroup]
--   case_1 = do 1 @=? 1
--   case_2 = do 2 @=? 2
--   prop_1 xs = reverse (reverse xs) == xs
--    where types = xs :: [Int]
--   </pre>
testGroupGenerator :: ExpQ
