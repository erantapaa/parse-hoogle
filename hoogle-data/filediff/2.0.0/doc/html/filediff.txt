-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Diffing and patching module
--   
--   <a>filediff</a> is a Haskell library for creating diffs, and applying
--   diffs to files and directories.
@package filediff
@version 2.0.0


-- | Data types used by <a>Filediff</a>
module Filediff.Types

-- | The basic data type for a difference between two files. The "base"
--   <a>FilePath</a> is the file chose state is being compared against, and
--   the "comp" <a>FilePath</a> is the file being compared (the "later" of
--   the two).
data Filediff
Filediff :: FilePath -> FilePath -> FileChange -> Filediff
base :: Filediff -> FilePath
comp :: Filediff -> FilePath
change :: Filediff -> FileChange

-- | A data type for differences between directories. <a>filediffs</a>
--   stores <tt>Filediffs</tt> whose filepaths are relative to directories
--   being diffed.
data Diff
Diff :: [Filediff] -> Diff
filediffs :: Diff -> [Filediff]

-- | The types and sets of changes possible between two files.
data FileChange
Del :: (ListDiff Line) -> FileChange
Mod :: (ListDiff Line) -> FileChange
Add :: (ListDiff Line) -> FileChange

-- | Diff between two lists. <a>dels</a> represents the indices at which to
--   delete, and <a>adds</a> represents the indices and contents to add.
data ListDiff a
ListDiff :: [(Int, a)] -> [(Int, a)] -> ListDiff a
dels :: ListDiff a -> [(Int, a)]
adds :: ListDiff a -> [(Int, a)]

-- | Gets the <a>ListDiff</a> stored in a <a>FileChange</a>.
listDiff :: FileChange -> ListDiff Line

-- | Whether a <a>FileChange</a> is a deletion or not.
isDel :: FileChange -> Bool

-- | Whether a <a>FileChange</a> is a modification or not.
isMod :: FileChange -> Bool

-- | Whether a <a>FileChange</a> is a addition or not.
isAdd :: FileChange -> Bool

-- | Data type for a line.
type Line = Text

-- | Basic error type.
type Error = String
instance Show a => Show (ListDiff a)
instance Eq a => Eq (ListDiff a)
instance Generic (ListDiff a)
instance Eq FileChange
instance Show FileChange
instance Generic FileChange
instance Eq Filediff
instance Show Filediff
instance Generic Filediff
instance Show Diff
instance Generic Diff
instance Datatype D1ListDiff
instance Constructor C1_0ListDiff
instance Selector S1_0_0ListDiff
instance Selector S1_0_1ListDiff
instance Datatype D1FileChange
instance Constructor C1_0FileChange
instance Constructor C1_1FileChange
instance Constructor C1_2FileChange
instance Datatype D1Filediff
instance Constructor C1_0Filediff
instance Selector S1_0_0Filediff
instance Selector S1_0_1Filediff
instance Selector S1_0_2Filediff
instance Datatype D1Diff
instance Constructor C1_0Diff
instance Selector S1_0_0Diff
instance Monoid Diff
instance Default Diff
instance Eq Diff
instance Monoid Filediff
instance Monoid FileChange
instance (Eq a, Ord a) => Monoid (ListDiff a)
instance Default (ListDiff a)


-- | Statistics on diffs
module Filediff.Stats

-- | Number of files added, modified, or deleted in a diff.
numFilesAffected :: Diff -> Int

-- | Number of lines added in a diff.
numAddedLines :: Diff -> Int

-- | Number of lines deleted in a diff.
numDeletedLines :: Diff -> Int


-- | A module for printing <a>Filediff</a> data types to the console.
module Filediff.Printing

-- | Prints a <a>Diff</a>. Prints with colors and some formatting.
printDiff :: Diff -> IO ()

-- | Prints a <a>Filediff</a>. Prints with colors and some formatting.
printFilediff :: Filediff -> IO ()

-- | Prints a <a>ListDiff</a> <a>Line</a>. Prints with colors and some
--   formatting.
printListdiff :: ListDiff Line -> IO ()


-- | The module exposing the functionality of this package
module Filediff

-- | Computes the minimal number of additions and deletions needed to
--   transform the first parameter into the second.
--   
--   <pre>
--   λ diffLists "abcdefg" "wabxyze"
--   ListDiff {dels = [(2,'c'),(3,'d'),(5,'f'),(6,'g')], adds = [(0,'w'),(3,'x'),(4,'y'),(5,'z')]}
--   </pre>
diffLists :: Eq a => [a] -> [a] -> ListDiff a

-- | Applies a list diff. For example,
--   
--   <pre>
--   ListDiff {dels = [(2,'c'),(3,'d'),(5,'f'),(6,'g')], adds = [(0,'w'),(3,'x'),(4,'y'),(5,'z')]}
--   λ applyListDiff it "abcdefg"
--   Right "wabxyze"
--   </pre>
--   
--   Returns a fail state if the diff cannot be applied. This can happen
--   for two reasons: first, the diff calls for a deletion at an index but
--   the element at that index doesn't match the element believed by the to
--   be diff at that index. Second, it can happen if the diff calls for an
--   element to be added at an index too large for the given input. Here
--   are respective examples of inputs that would trigger this case:
--   
--   <pre>
--   let base = "abcdefg"
--   let faultyBase = "ab*defg"
--   let comp = "wabxyze"
--   let listDiff = F.diffLists base comp
--   F.applyListDiff listDiff faultyBase -- fails
--   </pre>
--   
--   and
--   
--   <pre>
--   let base = "abcdefg"
--   let faultyBase = "abcde"
--   let comp = "wabxyzefgq"
--   let listDiff = F.diffLists base comp
--   F.applyListDiff listDiff faultyBase -- fails
--   </pre>
applyListDiff :: Eq a => ListDiff a -> [a] -> Either Error [a]

-- | <i>O(mn)</i>. Compute the difference between the two files (more
--   specifically, the minimal number of changes to make to transform the
--   file residing at the location specified by the first parameter into
--   the second). Throws an exception if either or both of the parameters
--   point to a directory, not a file.
--   
--   Files are allowed to not exist at either or both of the parameters.
diffFiles :: FilePath -> FilePath -> IO Filediff

-- | <i>O(n)</i>. Apply a diff to a file. Returns the fail state if
--   application fails. For more on how diff application can fail, see
--   <a>applyListDiff</a>.
applyFileDiff :: Filediff -> FilePath -> EitherT Error IO [Line]

-- | Compute the difference between the two directories (more specifically,
--   the minimal number of changes to make to transform the directory
--   residing at the location specified by the first parameter into the
--   second). Throws an exception if either or both of the parameters point
--   to a file, not a directory.
diffDirectories :: FilePath -> FilePath -> IO Diff

-- | Diff two directories, ignoring some subdirectories. The first
--   `[FilePath]` parameter refers to the first <a>FilePath</a> parameter,
--   and same for the second, respectively.
diffDirectoriesWithIgnoredSubdirs :: FilePath -> FilePath -> [FilePath] -> [FilePath] -> IO Diff

-- | Applies a <a>Diff</a> to a directory. Returns the fail state if any
--   file application fails, but because of the parallelism in the
--   implementation, all file diffs will be attempted to be applied, so if
--   this fails, your directory will be left in an inconsistent state. For
--   more on how diff application can fail, see <a>applyListDiff</a>.
applyDirectoryDiff :: Diff -> FilePath -> EitherT Error IO [[Line]]
