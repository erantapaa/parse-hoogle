-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Amazon Kinesis SDK.
--   
@package amazonka-kinesis
@version 0.3.6

module Network.AWS.Kinesis.Types

-- | Version <tt>2013-12-02</tt> of the Amazon Kinesis service.
data Kinesis
data JSONError :: *
data Shard

-- | <a>Shard</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>sAdjacentParentShardId</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>sHashKeyRange</a> <tt>::</tt> <a>HashKeyRange</a></li>
--   <li><a>sParentShardId</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>sSequenceNumberRange</a> <tt>::</tt>
--   <a>SequenceNumberRange</a></li>
--   <li><a>sShardId</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
shard :: Text -> HashKeyRange -> SequenceNumberRange -> Shard

-- | The shard Id of the shard adjacent to the shard's parent.
sAdjacentParentShardId :: Lens' Shard (Maybe Text)

-- | The range of possible hash key values for the shard, which is a set of
--   ordered contiguous positive integers.
sHashKeyRange :: Lens' Shard HashKeyRange

-- | The shard Id of the shard's parent.
sParentShardId :: Lens' Shard (Maybe Text)

-- | The range of possible sequence numbers for the shard.
sSequenceNumberRange :: Lens' Shard SequenceNumberRange

-- | The unique identifier of the shard within the Amazon Kinesis stream.
sShardId :: Lens' Shard Text
data Tag

-- | <a>Tag</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>tagKey</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>tagValue</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
tag :: Text -> Tag

-- | A unique identifier for the tag. Maximum length: 128 characters. Valid
--   characters: Unicode letters, digits, white space, _ . / = + - % @
tagKey :: Lens' Tag Text

-- | An optional string, typically used to describe or define the tag.
--   Maximum length: 256 characters. Valid characters: Unicode letters,
--   digits, white space, _ . / = + - % @
tagValue :: Lens' Tag (Maybe Text)
data StreamDescription

-- | <a>StreamDescription</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>sdHasMoreShards</a> <tt>::</tt> <a>Bool</a></li>
--   <li><a>sdShards</a> <tt>::</tt> [<a>Shard</a>]</li>
--   <li><a>sdStreamARN</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>sdStreamName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>sdStreamStatus</a> <tt>::</tt> <a>StreamStatus</a></li>
--   </ul>
streamDescription :: Text -> Text -> StreamStatus -> Bool -> StreamDescription

-- | If set to <tt>true</tt>, more shards in the stream are available to
--   describe.
sdHasMoreShards :: Lens' StreamDescription Bool

-- | The shards that comprise the stream.
sdShards :: Lens' StreamDescription [Shard]

-- | The Amazon Resource Name (ARN) for the stream being described.
sdStreamARN :: Lens' StreamDescription Text

-- | The name of the stream being described.
sdStreamName :: Lens' StreamDescription Text

-- | The current status of the stream being described.
--   
--   The stream status is one of the following states:
--   
--   <tt>CREATING</tt> - The stream is being created. Amazon Kinesis
--   immediately returns and sets <a>StreamStatus</a> to <tt>CREATING</tt>.
--   <tt>DELETING</tt> - The stream is being deleted. The specified stream
--   is in the <tt>DELETING</tt> state until Amazon Kinesis completes the
--   deletion. <tt>ACTIVE</tt> - The stream exists and is ready for read
--   and write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream. <tt>UPDATING</tt> -
--   Shards in the stream are being merged or split. Read and write
--   operations continue to work while the stream is in the
--   <tt>UPDATING</tt> state.
sdStreamStatus :: Lens' StreamDescription StreamStatus
data PutRecordsResultEntry

-- | <a>PutRecordsResultEntry</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>prreErrorCode</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>prreErrorMessage</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>prreSequenceNumber</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>prreShardId</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
putRecordsResultEntry :: PutRecordsResultEntry

-- | The error code for an individual record result. <tt>ErrorCodes</tt>
--   can be either <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>.
prreErrorCode :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The error message for an individual record result. An
--   <tt>ErrorCode</tt> value of
--   <tt>ProvisionedThroughputExceededException</tt> has an error message
--   that includes the account ID, stream name, and shard ID. An
--   <tt>ErrorCode</tt> value of <tt>InternalFailure</tt> has the error
--   message '"InternalService Failure"'.
prreErrorMessage :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The sequence number for an individual record result.
prreSequenceNumber :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The shard ID for an individual record result.
prreShardId :: Lens' PutRecordsResultEntry (Maybe Text)
data PutRecordsRequestEntry

-- | <a>PutRecordsRequestEntry</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>prreData</a> <tt>::</tt> <a>Base64</a></li>
--   <li><a>prreExplicitHashKey</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>prrePartitionKey</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
putRecordsRequestEntry :: Base64 -> Text -> PutRecordsRequestEntry

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. The maximum size of the data blob (the payload
--   before base64-encoding) is 50 kilobytes (KB)
prreData :: Lens' PutRecordsRequestEntry Base64

-- | The hash value used to determine explicitly the shard that the data
--   record is assigned to by overriding the partition key hash.
prreExplicitHashKey :: Lens' PutRecordsRequestEntry (Maybe Text)

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis uses the partition key as
--   input to a hash function that maps the partition key and associated
--   data to a specific shard. Specifically, an MD5 hash function is used
--   to map partition keys to 128-bit integer values and to map associated
--   data records to shards. As a result of this hashing mechanism, all
--   data records with the same partition key map to the same shard within
--   the stream.
prrePartitionKey :: Lens' PutRecordsRequestEntry Text
data StreamStatus

-- | ACTIVE
Active :: StreamStatus

-- | CREATING
Creating :: StreamStatus

-- | DELETING
Deleting :: StreamStatus

-- | UPDATING
Updating :: StreamStatus
data HashKeyRange

-- | <a>HashKeyRange</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>hkrEndingHashKey</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>hkrStartingHashKey</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
hashKeyRange :: Text -> Text -> HashKeyRange

-- | The ending hash key of the hash key range.
hkrEndingHashKey :: Lens' HashKeyRange Text

-- | The starting hash key of the hash key range.
hkrStartingHashKey :: Lens' HashKeyRange Text
data Record

-- | <a>Record</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>rData</a> <tt>::</tt> <a>Base64</a></li>
--   <li><a>rPartitionKey</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>rSequenceNumber</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
record :: Text -> Base64 -> Text -> Record

-- | The data blob. The data in the blob is both opaque and immutable to
--   the Amazon Kinesis service, which does not inspect, interpret, or
--   change the data in the blob in any way. The maximum size of the data
--   blob (the payload before base64-encoding) is 50 kilobytes (KB)
rData :: Lens' Record Base64

-- | Identifies which shard in the stream the data record is assigned to.
rPartitionKey :: Lens' Record Text

-- | The unique identifier for the record in the Amazon Kinesis stream.
rSequenceNumber :: Lens' Record Text
data SequenceNumberRange

-- | <a>SequenceNumberRange</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>snrEndingSequenceNumber</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>snrStartingSequenceNumber</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
sequenceNumberRange :: Text -> SequenceNumberRange

-- | The ending sequence number for the range. Shards that are in the OPEN
--   state have an ending sequence number of <a>null</a>.
snrEndingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)

-- | The starting sequence number for the range.
snrStartingSequenceNumber :: Lens' SequenceNumberRange Text
data ShardIteratorType

-- | AFTER_SEQUENCE_NUMBER
AfterSequenceNumber :: ShardIteratorType

-- | AT_SEQUENCE_NUMBER
AtSequenceNumber :: ShardIteratorType

-- | LATEST
Latest :: ShardIteratorType

-- | TRIM_HORIZON
TrimHorizon :: ShardIteratorType
instance Eq Tag
instance Ord Tag
instance Read Tag
instance Show Tag
instance Eq PutRecordsResultEntry
instance Ord PutRecordsResultEntry
instance Read PutRecordsResultEntry
instance Show PutRecordsResultEntry
instance Eq PutRecordsRequestEntry
instance Read PutRecordsRequestEntry
instance Show PutRecordsRequestEntry
instance Eq StreamStatus
instance Ord StreamStatus
instance Read StreamStatus
instance Show StreamStatus
instance Generic StreamStatus
instance Enum StreamStatus
instance Eq HashKeyRange
instance Ord HashKeyRange
instance Read HashKeyRange
instance Show HashKeyRange
instance Eq Record
instance Read Record
instance Show Record
instance Eq SequenceNumberRange
instance Ord SequenceNumberRange
instance Read SequenceNumberRange
instance Show SequenceNumberRange
instance Eq Shard
instance Read Shard
instance Show Shard
instance Eq StreamDescription
instance Read StreamDescription
instance Show StreamDescription
instance Eq ShardIteratorType
instance Ord ShardIteratorType
instance Read ShardIteratorType
instance Show ShardIteratorType
instance Generic ShardIteratorType
instance Enum ShardIteratorType
instance Datatype D1StreamStatus
instance Constructor C1_0StreamStatus
instance Constructor C1_1StreamStatus
instance Constructor C1_2StreamStatus
instance Constructor C1_3StreamStatus
instance Datatype D1ShardIteratorType
instance Constructor C1_0ShardIteratorType
instance Constructor C1_1ShardIteratorType
instance Constructor C1_2ShardIteratorType
instance Constructor C1_3ShardIteratorType
instance ToJSON ShardIteratorType
instance FromJSON ShardIteratorType
instance ToQuery ShardIteratorType
instance ToHeader ShardIteratorType
instance ToByteString ShardIteratorType
instance ToText ShardIteratorType
instance FromText ShardIteratorType
instance Hashable ShardIteratorType
instance ToJSON SequenceNumberRange
instance FromJSON SequenceNumberRange
instance ToJSON Record
instance FromJSON Record
instance ToJSON HashKeyRange
instance FromJSON HashKeyRange
instance ToJSON StreamStatus
instance FromJSON StreamStatus
instance ToQuery StreamStatus
instance ToHeader StreamStatus
instance ToByteString StreamStatus
instance ToText StreamStatus
instance FromText StreamStatus
instance Hashable StreamStatus
instance ToJSON PutRecordsRequestEntry
instance FromJSON PutRecordsRequestEntry
instance ToJSON PutRecordsResultEntry
instance FromJSON PutRecordsResultEntry
instance ToJSON StreamDescription
instance FromJSON StreamDescription
instance ToJSON Tag
instance FromJSON Tag
instance ToJSON Shard
instance FromJSON Shard
instance AWSService Kinesis


-- | Splits a shard into two new shards in the stream, to increase the
--   stream's capacity to ingest and transport data. <a>SplitShard</a> is
--   called when there is a need to increase the overall capacity of stream
--   because of an expected increase in the volume of data records being
--   ingested.
--   
--   You can also use <a>SplitShard</a> when a shard appears to be
--   approaching its maximum utilization, for example, when the set of
--   producers sending data into the specific shard are suddenly sending
--   more than previously anticipated. You can also call <a>SplitShard</a>
--   to increase stream capacity, so that more Amazon Kinesis applications
--   can simultaneously read data from the stream for real-time processing.
--   
--   You must specify the shard to be split and the new hash key, which is
--   the position in the shard where the shard gets split in two. In many
--   cases, the new hash key might simply be the average of the beginning
--   and ending hash key, but it can be any hash key value in the range
--   being mapped into the shard. For more information about splitting
--   shards, see <a>Split a Shard</a> in the <i>Amazon Kinesis Developer
--   Guide</i>.
--   
--   You can use <tt>DescribeStream</tt> to determine the shard ID and hash
--   key values for the <tt>ShardToSplit</tt> and
--   <tt>NewStartingHashKey</tt> parameters that are specified in the
--   <a>SplitShard</a> request.
--   
--   <a>SplitShard</a> is an asynchronous operation. Upon receiving a
--   <a>SplitShard</a> request, Amazon Kinesis immediately returns a
--   response and sets the stream status to <tt>UPDATING</tt>. After the
--   operation is completed, Amazon Kinesis sets the stream status to
--   <tt>ACTIVE</tt>. Read and write operations continue to work while the
--   stream is in the <tt>UPDATING</tt> state.
--   
--   You can use <tt>DescribeStream</tt> to check the status of the stream,
--   which is returned in <a>StreamStatus</a>. If the stream is in the
--   <tt>ACTIVE</tt> state, you can call <a>SplitShard</a>. If a stream is
--   in <tt>CREATING</tt> or <tt>UPDATING</tt> or <tt>DELETING</tt> states,
--   <tt>DescribeStream</tt> returns a <tt>ResourceInUseException</tt>.
--   
--   If the specified stream does not exist, <tt>DescribeStream</tt>
--   returns a <tt>ResourceNotFoundException</tt>. If you try to create
--   more shards than are authorized for your account, you receive a
--   <tt>LimitExceededException</tt>.
--   
--   For the default shard limit for an AWS account, see <a>Amazon Kinesis
--   Limits</a>. If you need to increase this limit, <a>contact AWS
--   Support</a>
--   
--   If you try to operate on too many streams in parallel using
--   <tt>CreateStream</tt>, <tt>DeleteStream</tt>, <tt>MergeShards</tt> or
--   <a>SplitShard</a>, you receive a <tt>LimitExceededException</tt>.
--   
--   <a>SplitShard</a> has limit of 5 transactions per second per account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_SplitShard.html</a>
module Network.AWS.Kinesis.SplitShard
data SplitShard

-- | <a>SplitShard</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ssNewStartingHashKey</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>ssShardToSplit</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>ssStreamName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
splitShard :: Text -> Text -> Text -> SplitShard

-- | A hash key value for the starting hash key of one of the child shards
--   created by the split. The hash key range for a given shard constitutes
--   a set of ordered contiguous positive integers. The value for
--   <tt>NewStartingHashKey</tt> must be in the range of hash keys being
--   mapped into the shard. The <tt>NewStartingHashKey</tt> hash key value
--   and all higher hash key values in hash key range are distributed to
--   one of the child shards. All the lower hash key values in the range
--   are distributed to the other child shard.
ssNewStartingHashKey :: Lens' SplitShard Text

-- | The shard ID of the shard to split.
ssShardToSplit :: Lens' SplitShard Text

-- | The name of the stream for the shard split.
ssStreamName :: Lens' SplitShard Text
data SplitShardResponse

-- | <a>SplitShardResponse</a> constructor.
splitShardResponse :: SplitShardResponse
instance Eq SplitShard
instance Ord SplitShard
instance Read SplitShard
instance Show SplitShard
instance Eq SplitShardResponse
instance Ord SplitShardResponse
instance Read SplitShardResponse
instance Show SplitShardResponse
instance Generic SplitShardResponse
instance Datatype D1SplitShardResponse
instance Constructor C1_0SplitShardResponse
instance AWSRequest SplitShard
instance ToJSON SplitShard
instance ToHeaders SplitShard
instance ToQuery SplitShard
instance ToPath SplitShard


-- | Deletes tags from the specified Amazon Kinesis stream.
--   
--   If you specify a tag that does not exist, it is ignored.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_RemoveTagsFromStream.html</a>
module Network.AWS.Kinesis.RemoveTagsFromStream
data RemoveTagsFromStream

-- | <a>RemoveTagsFromStream</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>rtfsStreamName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>rtfsTagKeys</a> <tt>::</tt> <a>NonEmpty</a> <a>Text</a></li>
--   </ul>
removeTagsFromStream :: Text -> NonEmpty Text -> RemoveTagsFromStream

-- | The name of the stream.
rtfsStreamName :: Lens' RemoveTagsFromStream Text

-- | A list of tag keys. Each corresponding tag is removed from the stream.
rtfsTagKeys :: Lens' RemoveTagsFromStream (NonEmpty Text)
data RemoveTagsFromStreamResponse

-- | <a>RemoveTagsFromStreamResponse</a> constructor.
removeTagsFromStreamResponse :: RemoveTagsFromStreamResponse
instance Eq RemoveTagsFromStream
instance Ord RemoveTagsFromStream
instance Read RemoveTagsFromStream
instance Show RemoveTagsFromStream
instance Eq RemoveTagsFromStreamResponse
instance Ord RemoveTagsFromStreamResponse
instance Read RemoveTagsFromStreamResponse
instance Show RemoveTagsFromStreamResponse
instance Generic RemoveTagsFromStreamResponse
instance Datatype D1RemoveTagsFromStreamResponse
instance Constructor C1_0RemoveTagsFromStreamResponse
instance AWSRequest RemoveTagsFromStream
instance ToJSON RemoveTagsFromStream
instance ToHeaders RemoveTagsFromStream
instance ToQuery RemoveTagsFromStream
instance ToPath RemoveTagsFromStream


-- | Puts (writes) multiple data records from a producer into an Amazon
--   Kinesis stream in a single call (also referred to as a
--   <a>PutRecords</a> request). Use this operation to send data from a
--   data producer into the Amazon Kinesis stream for real-time ingestion
--   and processing. Each shard can support up to 1000 records written per
--   second, up to a maximum total of 1 MB data written per second.
--   
--   You must specify the name of the stream that captures, stores, and
--   transports the data; and an array of request <tt>Records</tt>, with
--   each record in the array requiring a partition key and data blob.
--   
--   The data blob can be any type of data; for example, a segment from a
--   log file, geographic/location data, website clickstream data, and so
--   on.
--   
--   The partition key is used by Amazon Kinesis as input to a hash
--   function that maps the partition key and associated data to a specific
--   shard. An MD5 hash function is used to map partition keys to 128-bit
--   integer values and to map associated data records to shards. As a
--   result of this hashing mechanism, all data records with the same
--   partition key map to the same shard within the stream. For more
--   information, see <a>Adding Data to a Stream</a> in the
--   <i>AmazonKinesis Developer Guide</i>.
--   
--   Each record in the <tt>Records</tt> array may include an optional
--   parameter, <tt>ExplicitHashKey</tt>, which overrides the partition key
--   to shard mapping. This parameter allows a data producer to determine
--   explicitly the shard where the record is stored. For more information,
--   see <a>Adding Multiple Records with PutRecords</a> in the <i>Amazon
--   Kinesis Developer Guide</i>.
--   
--   The <a>PutRecords</a> response includes an array of response
--   <tt>Records</tt>. Each record in the response array directly
--   correlates with a record in the request array using natural ordering,
--   from the top to the bottom of the request and response. The response
--   <tt>Records</tt> array always includes the same number of records as
--   the request array.
--   
--   The response <tt>Records</tt> array includes both successfully and
--   unsuccessfully processed records. Amazon Kinesis attempts to process
--   all records in each <a>PutRecords</a> request. A single record failure
--   does not stop the processing of subsequent records.
--   
--   A successfully-processed record includes <tt>ShardId</tt> and
--   <tt>SequenceNumber</tt> values. The <tt>ShardId</tt> parameter
--   identifies the shard in the stream where the record is stored. The
--   <tt>SequenceNumber</tt> parameter is an identifier assigned to the put
--   record, unique to all records in the stream.
--   
--   An unsuccessfully-processed record includes <tt>ErrorCode</tt> and
--   <tt>ErrorMessage</tt> values. <tt>ErrorCode</tt> reflects the type of
--   error and can be one of the following values:
--   <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>. <tt>ErrorMessage</tt> provides more detailed
--   information about the <tt>ProvisionedThroughputExceededException</tt>
--   exception including the account ID, stream name, and shard ID of the
--   record that was throttled. For more information about partially
--   successful responses, see <a>Adding Multiple Records with
--   PutRecords</a> in the <i>Amazon KinesisDeveloper Guide</i>.
--   
--   Data records are accessible for only 24 hours from the time that they
--   are added to an Amazon Kinesis stream.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html</a>
module Network.AWS.Kinesis.PutRecords
data PutRecords

-- | <a>PutRecords</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>pr1Records</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>PutRecordsRequestEntry</a></li>
--   <li><a>pr1StreamName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
putRecords :: NonEmpty PutRecordsRequestEntry -> Text -> PutRecords

-- | The records associated with the request.
pr1Records :: Lens' PutRecords (NonEmpty PutRecordsRequestEntry)

-- | The stream name associated with the request.
pr1StreamName :: Lens' PutRecords Text
data PutRecordsResponse

-- | <a>PutRecordsResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>prrFailedRecordCount</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>prrRecords</a> <tt>::</tt> <a>NonEmpty</a>
--   <a>PutRecordsResultEntry</a></li>
--   </ul>
putRecordsResponse :: NonEmpty PutRecordsResultEntry -> PutRecordsResponse

-- | The number of unsuccessfully processed records in a <a>PutRecords</a>
--   request.
prrFailedRecordCount :: Lens' PutRecordsResponse (Maybe Natural)

-- | An array of successfully and unsuccessfully processed record results,
--   correlated with the request by natural ordering. A record that is
--   successfully added to your Amazon Kinesis stream includes
--   <tt>SequenceNumber</tt> and <tt>ShardId</tt> in the result. A record
--   that fails to be added to your Amazon Kinesis stream includes
--   <tt>ErrorCode</tt> and <tt>ErrorMessage</tt> in the result.
prrRecords :: Lens' PutRecordsResponse (NonEmpty PutRecordsResultEntry)
instance Eq PutRecords
instance Read PutRecords
instance Show PutRecords
instance Eq PutRecordsResponse
instance Read PutRecordsResponse
instance Show PutRecordsResponse
instance FromJSON PutRecordsResponse
instance AWSRequest PutRecords
instance ToJSON PutRecords
instance ToHeaders PutRecords
instance ToQuery PutRecords
instance ToPath PutRecords


-- | Puts (writes) a single data record from a producer into an Amazon
--   Kinesis stream. Call <a>PutRecord</a> to send data from the producer
--   into the Amazon Kinesis stream for real-time ingestion and subsequent
--   processing, one record at a time. Each shard can support up to 1000
--   records written per second, up to a maximum total of 1 MB data written
--   per second.
--   
--   You must specify the name of the stream that captures, stores, and
--   transports the data; a partition key; and the data blob itself.
--   
--   The data blob can be any type of data; for example, a segment from a
--   log file, geographic/location data, website clickstream data, and so
--   on.
--   
--   The partition key is used by Amazon Kinesis to distribute data across
--   shards. Amazon Kinesis segregates the data records that belong to a
--   data stream into multiple shards, using the partition key associated
--   with each data record to determine which shard a given data record
--   belongs to.
--   
--   Partition keys are Unicode strings, with a maximum length limit of 256
--   characters for each key. An MD5 hash function is used to map partition
--   keys to 128-bit integer values and to map associated data records to
--   shards using the hash key ranges of the shards. You can override
--   hashing the partition key to determine the shard by explicitly
--   specifying a hash value using the <tt>ExplicitHashKey</tt> parameter.
--   For more information, see <a>Adding Data to a Stream</a> in the
--   <i>AmazonKinesis Developer Guide</i>.
--   
--   <a>PutRecord</a> returns the shard ID of where the data record was
--   placed and the sequence number that was assigned to the data record.
--   
--   Sequence numbers generally increase over time. To guarantee strictly
--   increasing ordering, use the <tt>SequenceNumberForOrdering</tt>
--   parameter. For more information, see <a>Adding Data to a Stream</a> in
--   the <i>Amazon Kinesis Developer Guide</i> .
--   
--   If a <a>PutRecord</a> request cannot be processed because of
--   insufficient provisioned throughput on the shard involved in the
--   request, <a>PutRecord</a> throws
--   <tt>ProvisionedThroughputExceededException</tt>.
--   
--   Data records are accessible for only 24 hours from the time that they
--   are added to an Amazon Kinesis stream.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html</a>
module Network.AWS.Kinesis.PutRecord
data PutRecord

-- | <a>PutRecord</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>prData</a> <tt>::</tt> <a>Base64</a></li>
--   <li><a>prExplicitHashKey</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>prPartitionKey</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>prSequenceNumberForOrdering</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>prStreamName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
putRecord :: Text -> Base64 -> Text -> PutRecord

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. The maximum size of the data blob (the payload
--   before base64-encoding) is 50 kilobytes (KB)
prData :: Lens' PutRecord Base64

-- | The hash value used to explicitly determine the shard the data record
--   is assigned to by overriding the partition key hash.
prExplicitHashKey :: Lens' PutRecord (Maybe Text)

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis uses the partition key as
--   input to a hash function that maps the partition key and associated
--   data to a specific shard. Specifically, an MD5 hash function is used
--   to map partition keys to 128-bit integer values and to map associated
--   data records to shards. As a result of this hashing mechanism, all
--   data records with the same partition key will map to the same shard
--   within the stream.
prPartitionKey :: Lens' PutRecord Text

-- | Guarantees strictly increasing sequence numbers, for puts from the
--   same client and to the same partition key. Usage: set the
--   <tt>SequenceNumberForOrdering</tt> of record <i>n</i> to the sequence
--   number of record <i>n-1</i> (as returned in the result when putting
--   record <i>n-1</i>). If this parameter is not set, records will be
--   coarsely ordered based on arrival time.
prSequenceNumberForOrdering :: Lens' PutRecord (Maybe Text)

-- | The name of the stream to put the data record into.
prStreamName :: Lens' PutRecord Text
data PutRecordResponse

-- | <a>PutRecordResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>prrSequenceNumber</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>prrShardId</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
putRecordResponse :: Text -> Text -> PutRecordResponse

-- | The sequence number identifier that was assigned to the put data
--   record. The sequence number for the record is unique across all
--   records in the stream. A sequence number is the identifier associated
--   with every record put into the stream.
prrSequenceNumber :: Lens' PutRecordResponse Text

-- | The shard ID of the shard where the data record was placed.
prrShardId :: Lens' PutRecordResponse Text
instance Eq PutRecord
instance Read PutRecord
instance Show PutRecord
instance Eq PutRecordResponse
instance Ord PutRecordResponse
instance Read PutRecordResponse
instance Show PutRecordResponse
instance FromJSON PutRecordResponse
instance AWSRequest PutRecord
instance ToJSON PutRecord
instance ToHeaders PutRecord
instance ToQuery PutRecord
instance ToPath PutRecord


-- | Merges two adjacent shards in a stream and combines them into a single
--   shard to reduce the stream's capacity to ingest and transport data.
--   Two shards are considered adjacent if the union of the hash key ranges
--   for the two shards form a contiguous set with no gaps. For example, if
--   you have two shards, one with a hash key range of 276...381 and the
--   other with a hash key range of 382...454, then you could merge these
--   two shards into a single shard that would have a hash key range of
--   276...454. After the merge, the single child shard receives data for
--   all hash key values covered by the two parent shards.
--   
--   <a>MergeShards</a> is called when there is a need to reduce the
--   overall capacity of a stream because of excess capacity that is not
--   being used. You must specify the shard to be merged and the adjacent
--   shard for a stream. For more information about merging shards, see
--   <a>Merge Two Shards</a> in the <i>Amazon KinesisDeveloper Guide</i>.
--   
--   If the stream is in the <tt>ACTIVE</tt> state, you can call
--   <a>MergeShards</a>. If a stream is in the <tt>CREATING</tt>,
--   <tt>UPDATING</tt>, or <tt>DELETING</tt> state, <a>MergeShards</a>
--   returns a <tt>ResourceInUseException</tt>. If the specified stream
--   does not exist, <a>MergeShards</a> returns a
--   <tt>ResourceNotFoundException</tt>.
--   
--   You can use <tt>DescribeStream</tt> to check the state of the stream,
--   which is returned in <a>StreamStatus</a>.
--   
--   <a>MergeShards</a> is an asynchronous operation. Upon receiving a
--   <a>MergeShards</a> request, Amazon Kinesis immediately returns a
--   response and sets the <a>StreamStatus</a> to <tt>UPDATING</tt>. After
--   the operation is completed, Amazon Kinesis sets the
--   <a>StreamStatus</a> to <tt>ACTIVE</tt>. Read and write operations
--   continue to work while the stream is in the <tt>UPDATING</tt> state.
--   
--   You use <tt>DescribeStream</tt> to determine the shard IDs that are
--   specified in the <a>MergeShards</a> request.
--   
--   If you try to operate on too many streams in parallel using
--   <tt>CreateStream</tt>, <tt>DeleteStream</tt>, <a>MergeShards</a> or
--   <tt>SplitShard</tt>, you will receive a
--   <tt>LimitExceededException</tt>.
--   
--   <a>MergeShards</a> has limit of 5 transactions per second per account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_MergeShards.html</a>
module Network.AWS.Kinesis.MergeShards
data MergeShards

-- | <a>MergeShards</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>msAdjacentShardToMerge</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>msShardToMerge</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>msStreamName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
mergeShards :: Text -> Text -> Text -> MergeShards

-- | The shard ID of the adjacent shard for the merge.
msAdjacentShardToMerge :: Lens' MergeShards Text

-- | The shard ID of the shard to combine with the adjacent shard for the
--   merge.
msShardToMerge :: Lens' MergeShards Text

-- | The name of the stream for the merge.
msStreamName :: Lens' MergeShards Text
data MergeShardsResponse

-- | <a>MergeShardsResponse</a> constructor.
mergeShardsResponse :: MergeShardsResponse
instance Eq MergeShards
instance Ord MergeShards
instance Read MergeShards
instance Show MergeShards
instance Eq MergeShardsResponse
instance Ord MergeShardsResponse
instance Read MergeShardsResponse
instance Show MergeShardsResponse
instance Generic MergeShardsResponse
instance Datatype D1MergeShardsResponse
instance Constructor C1_0MergeShardsResponse
instance AWSRequest MergeShards
instance ToJSON MergeShards
instance ToHeaders MergeShards
instance ToQuery MergeShards
instance ToPath MergeShards


-- | Lists the tags for the specified Amazon Kinesis stream.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_ListTagsForStream.html</a>
module Network.AWS.Kinesis.ListTagsForStream
data ListTagsForStream

-- | <a>ListTagsForStream</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ltfsExclusiveStartTagKey</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>ltfsLimit</a> <tt>::</tt> <a>Maybe</a> <a>Natural</a></li>
--   <li><a>ltfsStreamName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
listTagsForStream :: Text -> ListTagsForStream

-- | The key to use as the starting point for the list of tags. If this
--   parameter is set, <a>ListTagsForStream</a> gets all tags that occur
--   after <tt>ExclusiveStartTagKey</tt>.
ltfsExclusiveStartTagKey :: Lens' ListTagsForStream (Maybe Text)

-- | The number of tags to return. If this number is less than the total
--   number of tags associated with the stream, <tt>HasMoreTags</tt> is set
--   to <tt>true</tt>. To list additional tags, set
--   <tt>ExclusiveStartTagKey</tt> to the last key in the response.
ltfsLimit :: Lens' ListTagsForStream (Maybe Natural)

-- | The name of the stream.
ltfsStreamName :: Lens' ListTagsForStream Text
data ListTagsForStreamResponse

-- | <a>ListTagsForStreamResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ltfsrHasMoreTags</a> <tt>::</tt> <a>Bool</a></li>
--   <li><a>ltfsrTags</a> <tt>::</tt> [<a>Tag</a>]</li>
--   </ul>
listTagsForStreamResponse :: Bool -> ListTagsForStreamResponse

-- | If set to <tt>true</tt>, more tags are available. To request
--   additional tags, set <tt>ExclusiveStartTagKey</tt> to the key of the
--   last tag returned.
ltfsrHasMoreTags :: Lens' ListTagsForStreamResponse Bool

-- | A list of tags associated with <tt>StreamName</tt>, starting with the
--   first tag after <tt>ExclusiveStartTagKey</tt> and up to the specified
--   <tt>Limit</tt>.
ltfsrTags :: Lens' ListTagsForStreamResponse [Tag]
instance Eq ListTagsForStream
instance Ord ListTagsForStream
instance Read ListTagsForStream
instance Show ListTagsForStream
instance Eq ListTagsForStreamResponse
instance Read ListTagsForStreamResponse
instance Show ListTagsForStreamResponse
instance FromJSON ListTagsForStreamResponse
instance AWSRequest ListTagsForStream
instance ToJSON ListTagsForStream
instance ToHeaders ListTagsForStream
instance ToQuery ListTagsForStream
instance ToPath ListTagsForStream


-- | Lists your streams.
--   
--   The number of streams may be too large to return from a single call to
--   <a>ListStreams</a>. You can limit the number of returned streams using
--   the <tt>Limit</tt> parameter. If you do not specify a value for the
--   <tt>Limit</tt> parameter, Amazon Kinesis uses the default limit, which
--   is currently 10.
--   
--   You can detect if there are more streams available to list by using
--   the <tt>HasMoreStreams</tt> flag from the returned output. If there
--   are more streams available, you can request more streams by using the
--   name of the last stream returned by the <a>ListStreams</a> request in
--   the <tt>ExclusiveStartStreamName</tt> parameter in a subsequent
--   request to <a>ListStreams</a>. The group of stream names returned by
--   the subsequent request is then added to the list. You can continue
--   this process until all the stream names have been collected in the
--   list.
--   
--   <a>ListStreams</a> has a limit of 5 transactions per second per
--   account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_ListStreams.html</a>
module Network.AWS.Kinesis.ListStreams
data ListStreams

-- | <a>ListStreams</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>lsExclusiveStartStreamName</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>lsLimit</a> <tt>::</tt> <a>Maybe</a> <a>Natural</a></li>
--   </ul>
listStreams :: ListStreams

-- | The name of the stream to start the list with.
lsExclusiveStartStreamName :: Lens' ListStreams (Maybe Text)

-- | The maximum number of streams to list.
lsLimit :: Lens' ListStreams (Maybe Natural)
data ListStreamsResponse

-- | <a>ListStreamsResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>lsrHasMoreStreams</a> <tt>::</tt> <a>Bool</a></li>
--   <li><a>lsrStreamNames</a> <tt>::</tt> [<a>Text</a>]</li>
--   </ul>
listStreamsResponse :: Bool -> ListStreamsResponse

-- | If set to <tt>true</tt>, there are more streams available to list.
lsrHasMoreStreams :: Lens' ListStreamsResponse Bool

-- | The names of the streams that are associated with the AWS account
--   making the <a>ListStreams</a> request.
lsrStreamNames :: Lens' ListStreamsResponse [Text]
instance Eq ListStreams
instance Ord ListStreams
instance Read ListStreams
instance Show ListStreams
instance Eq ListStreamsResponse
instance Ord ListStreamsResponse
instance Read ListStreamsResponse
instance Show ListStreamsResponse
instance AWSPager ListStreams
instance FromJSON ListStreamsResponse
instance AWSRequest ListStreams
instance ToJSON ListStreams
instance ToHeaders ListStreams
instance ToQuery ListStreams
instance ToPath ListStreams


-- | Gets a shard iterator. A shard iterator expires five minutes after it
--   is returned to the requester.
--   
--   A shard iterator specifies the position in the shard from which to
--   start reading data records sequentially. A shard iterator specifies
--   this position using the sequence number of a data record in a shard. A
--   sequence number is the identifier associated with every record
--   ingested in the Amazon Kinesis stream. The sequence number is assigned
--   when a record is put into the stream.
--   
--   You must specify the shard iterator type. For example, you can set the
--   <a>ShardIteratorType</a> parameter to read exactly from the position
--   denoted by a specific sequence number by using the
--   <tt>AT_SEQUENCE_NUMBER</tt> shard iterator type, or right after the
--   sequence number by using the <tt>AFTER_SEQUENCE_NUMBER</tt> shard
--   iterator type, using sequence numbers returned by earlier calls to
--   <tt>PutRecord</tt>, <tt>PutRecords</tt>, <tt>GetRecords</tt>, or
--   <tt>DescribeStream</tt>. You can specify the shard iterator type
--   <tt>TRIM_HORIZON</tt> in the request to cause <tt>ShardIterator</tt>
--   to point to the last untrimmed record in the shard in the system,
--   which is the oldest data record in the shard. Or you can point to just
--   after the most recent record in the shard, by using the shard iterator
--   type <tt>LATEST</tt>, so that you always read the most recent data in
--   the shard.
--   
--   When you repeatedly read from an Amazon Kinesis stream use a
--   <a>GetShardIterator</a> request to get the first shard iterator for
--   use in your first <tt>GetRecords</tt> request and then use the shard
--   iterator returned by the <tt>GetRecords</tt> request in
--   <tt>NextShardIterator</tt> for subsequent reads. A new shard iterator
--   is returned by every <tt>GetRecords</tt> request in
--   <tt>NextShardIterator</tt>, which you use in the
--   <tt>ShardIterator</tt> parameter of the next <tt>GetRecords</tt>
--   request.
--   
--   If a <a>GetShardIterator</a> request is made too often, you receive a
--   <tt>ProvisionedThroughputExceededException</tt>. For more information
--   about throughput limits, see <tt>GetRecords</tt>.
--   
--   If the shard is closed, the iterator can't return more data, and
--   <a>GetShardIterator</a> returns <a>null</a> for its
--   <tt>ShardIterator</tt>. A shard can be closed using
--   <tt>SplitShard</tt> or <tt>MergeShards</tt>.
--   
--   <a>GetShardIterator</a> has a limit of 5 transactions per second per
--   account per open shard.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html</a>
module Network.AWS.Kinesis.GetShardIterator
data GetShardIterator

-- | <a>GetShardIterator</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>gsiShardId</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>gsiShardIteratorType</a> <tt>::</tt>
--   <a>ShardIteratorType</a></li>
--   <li><a>gsiStartingSequenceNumber</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>gsiStreamName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
getShardIterator :: Text -> Text -> ShardIteratorType -> GetShardIterator

-- | The shard ID of the shard to get the iterator for.
gsiShardId :: Lens' GetShardIterator Text

-- | Determines how the shard iterator is used to start reading data
--   records from the shard.
--   
--   The following are the valid shard iterator types:
--   
--   AT_SEQUENCE_NUMBER - Start reading exactly from the position denoted
--   by a specific sequence number. AFTER_SEQUENCE_NUMBER - Start reading
--   right after the position denoted by a specific sequence number.
--   TRIM_HORIZON - Start reading at the last untrimmed record in the shard
--   in the system, which is the oldest data record in the shard. LATEST -
--   Start reading just after the most recent record in the shard, so that
--   you always read the most recent data in the shard.
gsiShardIteratorType :: Lens' GetShardIterator ShardIteratorType

-- | The sequence number of the data record in the shard from which to
--   start reading from.
gsiStartingSequenceNumber :: Lens' GetShardIterator (Maybe Text)

-- | The name of the stream.
gsiStreamName :: Lens' GetShardIterator Text
data GetShardIteratorResponse

-- | <a>GetShardIteratorResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>gsirShardIterator</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   </ul>
getShardIteratorResponse :: GetShardIteratorResponse

-- | The position in the shard from which to start reading data records
--   sequentially. A shard iterator specifies this position using the
--   sequence number of a data record in a shard.
gsirShardIterator :: Lens' GetShardIteratorResponse (Maybe Text)
instance Eq GetShardIterator
instance Read GetShardIterator
instance Show GetShardIterator
instance Eq GetShardIteratorResponse
instance Ord GetShardIteratorResponse
instance Read GetShardIteratorResponse
instance Show GetShardIteratorResponse
instance Monoid GetShardIteratorResponse
instance FromJSON GetShardIteratorResponse
instance AWSRequest GetShardIterator
instance ToJSON GetShardIterator
instance ToHeaders GetShardIterator
instance ToQuery GetShardIterator
instance ToPath GetShardIterator


-- | Gets data records from a shard.
--   
--   Specify a shard iterator using the <tt>ShardIterator</tt> parameter.
--   The shard iterator specifies the position in the shard from which you
--   want to start reading data records sequentially. If there are no
--   records available in the portion of the shard that the iterator points
--   to, <a>GetRecords</a> returns an empty list. Note that it might take
--   multiple calls to get to a portion of the shard that contains records.
--   
--   You can scale by provisioning multiple shards. Your application should
--   have one thread per shard, each reading continuously from its stream.
--   To read from a stream continually, call <a>GetRecords</a> in a loop.
--   Use <tt>GetShardIterator</tt> to get the shard iterator to specify in
--   the first <a>GetRecords</a> call. <a>GetRecords</a> returns a new
--   shard iterator in <tt>NextShardIterator</tt>. Specify the shard
--   iterator returned in <tt>NextShardIterator</tt> in subsequent calls to
--   <a>GetRecords</a>. Note that if the shard has been closed, the shard
--   iterator can't return more data and <a>GetRecords</a> returns
--   <a>null</a> in <tt>NextShardIterator</tt>. You can terminate the loop
--   when the shard is closed, or when the shard iterator reaches the
--   record with the sequence number or other attribute that marks it as
--   the last record to process.
--   
--   Each data record can be up to 50 KB in size, and each shard can read
--   up to 2 MB per second. You can ensure that your calls don't exceed the
--   maximum supported size or throughput by using the <tt>Limit</tt>
--   parameter to specify the maximum number of records that
--   <a>GetRecords</a> can return. Consider your average record size when
--   determining this limit. For example, if your average record size is 40
--   KB, you can limit the data returned to about 1 MB per call by
--   specifying 25 as the limit.
--   
--   The size of the data returned by <a>GetRecords</a> will vary depending
--   on the utilization of the shard. The maximum size of data that
--   <a>GetRecords</a> can return is 10 MB. If a call returns this amount
--   of data, subsequent calls made within the next 5 seconds throw
--   <tt>ProvisionedThroughputExceededException</tt>. If there is
--   insufficient provisioned throughput on the shard, subsequent calls
--   made within the next 1 second throw
--   <tt>ProvisionedThroughputExceededException</tt>. Note that
--   <a>GetRecords</a> won't return any data when it throws an exception.
--   For this reason, we recommend that you wait one second between calls
--   to <a>GetRecords</a>; however, it's possible that the application will
--   get exceptions for longer than 1 second.
--   
--   To detect whether the application is falling behind in processing, you
--   can use the <tt>MillisBehindLatest</tt> response attribute. You can
--   also monitor the amount of data in a stream using the CloudWatch
--   metrics. For more information, see <a>Monitoring Amazon Kinesis with
--   Amazon CloudWatch</a> in the <i>Amazon Kinesis Developer Guide</i>.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetRecords.html</a>
module Network.AWS.Kinesis.GetRecords
data GetRecords

-- | <a>GetRecords</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>grLimit</a> <tt>::</tt> <a>Maybe</a> <a>Natural</a></li>
--   <li><a>grShardIterator</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
getRecords :: Text -> GetRecords

-- | The maximum number of records to return. Specify a value of up to
--   10,000. If you specify a value that is greater than 10,000,
--   <a>GetRecords</a> throws <tt>InvalidArgumentException</tt>.
grLimit :: Lens' GetRecords (Maybe Natural)

-- | The position in the shard from which you want to start sequentially
--   reading data records. A shard iterator specifies this position using
--   the sequence number of a data record in the shard.
grShardIterator :: Lens' GetRecords Text
data GetRecordsResponse

-- | <a>GetRecordsResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>grrMillisBehindLatest</a> <tt>::</tt> <a>Maybe</a>
--   <a>Natural</a></li>
--   <li><a>grrNextShardIterator</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>grrRecords</a> <tt>::</tt> [<a>Record</a>]</li>
--   </ul>
getRecordsResponse :: GetRecordsResponse

-- | The number of milliseconds the <a>GetRecords</a> response is from the
--   tip of the stream, indicating how far behind current time the consumer
--   is. A value of zero indicates record processing is caught up, and
--   there are no new records to process at this moment.
grrMillisBehindLatest :: Lens' GetRecordsResponse (Maybe Natural)

-- | The next position in the shard from which to start sequentially
--   reading data records. If set to <a>null</a>, the shard has been closed
--   and the requested iterator will not return any more data.
grrNextShardIterator :: Lens' GetRecordsResponse (Maybe Text)

-- | The data records retrieved from the shard.
grrRecords :: Lens' GetRecordsResponse [Record]
instance Eq GetRecords
instance Ord GetRecords
instance Read GetRecords
instance Show GetRecords
instance Eq GetRecordsResponse
instance Read GetRecordsResponse
instance Show GetRecordsResponse
instance FromJSON GetRecordsResponse
instance AWSRequest GetRecords
instance ToJSON GetRecords
instance ToHeaders GetRecords
instance ToQuery GetRecords
instance ToPath GetRecords


-- | Describes the specified stream.
--   
--   The information about the stream includes its current status, its
--   Amazon Resource Name (ARN), and an array of shard objects. For each
--   shard object, there is information about the hash key and sequence
--   number ranges that the shard spans, and the IDs of any earlier shards
--   that played in a role in creating the shard. A sequence number is the
--   identifier associated with every record ingested in the Amazon Kinesis
--   stream. The sequence number is assigned when a record is put into the
--   stream.
--   
--   You can limit the number of returned shards using the <tt>Limit</tt>
--   parameter. The number of shards in a stream may be too large to return
--   from a single call to <a>DescribeStream</a>. You can detect this by
--   using the <tt>HasMoreShards</tt> flag in the returned output.
--   <tt>HasMoreShards</tt> is set to <tt>true</tt> when there is more data
--   available.
--   
--   <a>DescribeStream</a> is a paginated operation. If there are more
--   shards available, you can request them using the shard ID of the last
--   shard returned. Specify this ID in the <tt>ExclusiveStartShardId</tt>
--   parameter in a subsequent request to <a>DescribeStream</a>.
--   
--   <a>DescribeStream</a> has a limit of 10 transactions per second per
--   account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_DescribeStream.html</a>
module Network.AWS.Kinesis.DescribeStream
data DescribeStream

-- | <a>DescribeStream</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>ds1ExclusiveStartShardId</a> <tt>::</tt> <a>Maybe</a>
--   <a>Text</a></li>
--   <li><a>ds1Limit</a> <tt>::</tt> <a>Maybe</a> <a>Natural</a></li>
--   <li><a>ds1StreamName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
describeStream :: Text -> DescribeStream

-- | The shard ID of the shard to start with.
ds1ExclusiveStartShardId :: Lens' DescribeStream (Maybe Text)

-- | The maximum number of shards to return.
ds1Limit :: Lens' DescribeStream (Maybe Natural)

-- | The name of the stream to describe.
ds1StreamName :: Lens' DescribeStream Text
data DescribeStreamResponse

-- | <a>DescribeStreamResponse</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dsrStreamDescription</a> <tt>::</tt>
--   <a>StreamDescription</a></li>
--   </ul>
describeStreamResponse :: StreamDescription -> DescribeStreamResponse

-- | The current status of the stream, the stream ARN, an array of shard
--   objects that comprise the stream, and states whether there are more
--   shards available.
dsrStreamDescription :: Lens' DescribeStreamResponse StreamDescription
instance Eq DescribeStream
instance Ord DescribeStream
instance Read DescribeStream
instance Show DescribeStream
instance Eq DescribeStreamResponse
instance Read DescribeStreamResponse
instance Show DescribeStreamResponse
instance AWSPager DescribeStream
instance FromJSON DescribeStreamResponse
instance AWSRequest DescribeStream
instance ToJSON DescribeStream
instance ToHeaders DescribeStream
instance ToQuery DescribeStream
instance ToPath DescribeStream

module Network.AWS.Kinesis.Waiters
streamExists :: Wait DescribeStream


-- | Deletes a stream and all its shards and data. You must shut down any
--   applications that are operating on the stream before you delete the
--   stream. If an application attempts to operate on a deleted stream, it
--   will receive the exception <tt>ResourceNotFoundException</tt>.
--   
--   If the stream is in the <tt>ACTIVE</tt> state, you can delete it.
--   After a <a>DeleteStream</a> request, the specified stream is in the
--   <tt>DELETING</tt> state until Amazon Kinesis completes the deletion.
--   
--   Note: Amazon Kinesis might continue to accept data read and write
--   operations, such as <tt>PutRecord</tt>, <tt>PutRecords</tt>, and
--   <tt>GetRecords</tt>, on a stream in the <tt>DELETING</tt> state until
--   the stream deletion is complete.
--   
--   When you delete a stream, any shards in that stream are also deleted,
--   and any tags are dissociated from the stream.
--   
--   You can use the <tt>DescribeStream</tt> operation to check the state
--   of the stream, which is returned in <a>StreamStatus</a>.
--   
--   <a>DeleteStream</a> has a limit of 5 transactions per second per
--   account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_DeleteStream.html</a>
module Network.AWS.Kinesis.DeleteStream
data DeleteStream

-- | <a>DeleteStream</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>dsStreamName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
deleteStream :: Text -> DeleteStream

-- | The name of the stream to delete.
dsStreamName :: Lens' DeleteStream Text
data DeleteStreamResponse

-- | <a>DeleteStreamResponse</a> constructor.
deleteStreamResponse :: DeleteStreamResponse
instance Eq DeleteStream
instance Ord DeleteStream
instance Read DeleteStream
instance Show DeleteStream
instance Monoid DeleteStream
instance IsString DeleteStream
instance Eq DeleteStreamResponse
instance Ord DeleteStreamResponse
instance Read DeleteStreamResponse
instance Show DeleteStreamResponse
instance Generic DeleteStreamResponse
instance Datatype D1DeleteStreamResponse
instance Constructor C1_0DeleteStreamResponse
instance AWSRequest DeleteStream
instance ToJSON DeleteStream
instance ToHeaders DeleteStream
instance ToQuery DeleteStream
instance ToPath DeleteStream


-- | Creates a Amazon Kinesis stream. A stream captures and transports data
--   records that are continuously emitted from different data sources or
--   <i>producers</i> . Scale-out within an Amazon Kinesis stream is
--   explicitly supported by means of shards, which are uniquely identified
--   groups of data records in an Amazon Kinesis stream.
--   
--   You specify and control the number of shards that a stream is composed
--   of. Each open shard can support up to 5 read transactions per second,
--   up to a maximum total of 2 MB of data read per second. Each shard can
--   support up to 1000 records written per second, up to a maximum total
--   of 1 MB data written per second. You can add shards to a stream if the
--   amount of data input increases and you can remove shards if the amount
--   of data input decreases.
--   
--   The stream name identifies the stream. The name is scoped to the AWS
--   account used by the application. It is also scoped by region. That is,
--   two streams in two different accounts can have the same name, and two
--   streams in the same account, but in two different regions, can have
--   the same name.
--   
--   <a>CreateStream</a> is an asynchronous operation. Upon receiving a
--   <a>CreateStream</a> request, Amazon Kinesis immediately returns and
--   sets the stream status to <tt>CREATING</tt>. After the stream is
--   created, Amazon Kinesis sets the stream status to <tt>ACTIVE</tt> .
--   You should perform read and write operations only on an
--   <tt>ACTIVE</tt> stream.
--   
--   You receive a <tt>LimitExceededException</tt> when making a
--   <a>CreateStream</a> request if you try to do one of the following:
--   
--   Have more than five streams in the <tt>CREATING</tt> state at any
--   point in time. Create more shards than are authorized for your
--   account. For the default shard limit for an AWS account, see <a>Amazon
--   Kinesis Limits</a>. If you need to increase this limit, <a>contact AWS
--   Support</a>
--   
--   You can use <tt>DescribeStream</tt> to check the stream status, which
--   is returned in <a>StreamStatus</a>.
--   
--   <a>CreateStream</a> has a limit of 5 transactions per second per
--   account.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_CreateStream.html</a>
module Network.AWS.Kinesis.CreateStream
data CreateStream

-- | <a>CreateStream</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>csShardCount</a> <tt>::</tt> <a>Natural</a></li>
--   <li><a>csStreamName</a> <tt>::</tt> <a>Text</a></li>
--   </ul>
createStream :: Text -> Natural -> CreateStream

-- | The number of shards that the stream will use. The throughput of the
--   stream is a function of the number of shards; more shards are required
--   for greater provisioned throughput.
--   
--   DefaultShardLimit;
csShardCount :: Lens' CreateStream Natural

-- | A name to identify the stream. The stream name is scoped to the AWS
--   account used by the application that creates the stream. It is also
--   scoped by region. That is, two streams in two different AWS accounts
--   can have the same name, and two streams in the same AWS account, but
--   in two different regions, can have the same name.
csStreamName :: Lens' CreateStream Text
data CreateStreamResponse

-- | <a>CreateStreamResponse</a> constructor.
createStreamResponse :: CreateStreamResponse
instance Eq CreateStream
instance Ord CreateStream
instance Read CreateStream
instance Show CreateStream
instance Eq CreateStreamResponse
instance Ord CreateStreamResponse
instance Read CreateStreamResponse
instance Show CreateStreamResponse
instance Generic CreateStreamResponse
instance Datatype D1CreateStreamResponse
instance Constructor C1_0CreateStreamResponse
instance AWSRequest CreateStream
instance ToJSON CreateStream
instance ToHeaders CreateStream
instance ToQuery CreateStream
instance ToPath CreateStream


-- | Adds or updates tags for the specified Amazon Kinesis stream. Each
--   stream can have up to 10 tags.
--   
--   If tags have already been assigned to the stream,
--   <a>AddTagsToStream</a> overwrites any existing tags that correspond to
--   the specified tag keys.
--   
--   
--   <a>http://docs.aws.amazon.com/kinesis/latest/APIReference/API_AddTagsToStream.html</a>
module Network.AWS.Kinesis.AddTagsToStream
data AddTagsToStream

-- | <a>AddTagsToStream</a> constructor.
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>attsStreamName</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>attsTags</a> <tt>::</tt> <a>HashMap</a> <a>Text</a>
--   <a>Text</a></li>
--   </ul>
addTagsToStream :: Text -> AddTagsToStream

-- | The name of the stream.
attsStreamName :: Lens' AddTagsToStream Text

-- | The set of key-value pairs to use to create the tags.
attsTags :: Lens' AddTagsToStream (HashMap Text Text)
data AddTagsToStreamResponse

-- | <a>AddTagsToStreamResponse</a> constructor.
addTagsToStreamResponse :: AddTagsToStreamResponse
instance Eq AddTagsToStream
instance Read AddTagsToStream
instance Show AddTagsToStream
instance Eq AddTagsToStreamResponse
instance Ord AddTagsToStreamResponse
instance Read AddTagsToStreamResponse
instance Show AddTagsToStreamResponse
instance Generic AddTagsToStreamResponse
instance Datatype D1AddTagsToStreamResponse
instance Constructor C1_0AddTagsToStreamResponse
instance AWSRequest AddTagsToStream
instance ToJSON AddTagsToStream
instance ToHeaders AddTagsToStream
instance ToQuery AddTagsToStream
instance ToPath AddTagsToStream


-- | Amazon Kinesis is a managed service that scales elastically for
--   real-time processing of streaming big data. The service takes in large
--   streams of data records that can then be consumed in real time by
--   multiple data-processing applications that can be run on Amazon EC2
--   instances.
module Network.AWS.Kinesis
