-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Automatic derivation of Trie implementations.
--   
--   Automatic derivation of Trie implementations from user defined key
--   types with Template Haskell. Uses KeyMap class as interface for tries.
@package derive-trie
@version 0.2

module Data.KeyMap
class KeyMap key map | map -> key
empty :: KeyMap key map => map val
null :: KeyMap key map => map val -> Bool
lookup :: KeyMap key map => key -> map val -> Maybe val
alter :: KeyMap key map => key -> (Maybe val -> Maybe val) -> map val -> map val
combine :: KeyMap key map => (Maybe val -> Maybe val' -> Maybe val'') -> map val -> map val' -> map val''
mapMaybeWithKey :: KeyMap key map => (key -> val -> Maybe val') -> map val -> map val'
toList :: KeyMap key map => map val -> [val]
insert :: KeyMap key map => key -> val -> map val -> map val
adjust :: KeyMap key map => key -> (val -> val) -> map val -> map val
delete :: KeyMap key map => key -> map val -> map val
unionWith :: KeyMap key map => (val -> val -> Maybe val) -> map val -> map val -> map val
union :: KeyMap key map => map val -> map val -> map val
symDiff :: KeyMap key map => map val -> map val -> map val
updateWith :: KeyMap key map => (val -> val' -> Maybe val) -> map val -> map val' -> map val
difference :: KeyMap key map => map val -> map val' -> map val
update :: KeyMap key map => map val -> map val -> map val
intersectionWith :: KeyMap key map => (val -> val' -> Maybe val'') -> map val -> map val' -> map val''
intersection :: KeyMap key map => map val -> map val -> map val
map :: KeyMap key map => (val -> val') -> map val -> map val'
fromList :: KeyMap key map => [(key, val)] -> map val
instance KeyMap Int IntMap
instance Ord key => KeyMap key (Map key)


-- | This module provides the template to automatically derive a Trie
--   implementation from a data type, which uses this data type as key. The
--   template generates a trie data type and an instance of the
--   <a>KeyMap</a> class for every given key, as described in the paper
--   "Efficient, Modular Tries" by Sebastian Fischer and Frank Huch is
--   generated using Template Haskell.
--   
--   Usage:
--   
--   <pre>
--   import Data.Derive.Trie
--   import Data.KeyMap
--   ...
--   $(deriveTrie [''&lt;keytypename1&gt;,''&lt;keytypename2&gt;,..])
--   </pre>
--   
--   You will also need to enable the following language extensions:
--   
--   <ul>
--   <li>MultiParamTypeClasses - TemplateHaskell -
--   UndecidableInstances</li>
--   </ul>
--   
--   And if you want to derive Tries structures for type synonyms you will
--   also need:
--   
--   <ul>
--   <li>TypeSynonymInstances</li>
--   </ul>
module Data.Derive.Trie
deriveTrie :: [Name] -> Q [Dec]
tidy :: KeyMap key map => map val -> map val
ensureTrie :: KeyMap key map => Maybe (map val) -> map val
trieToMaybe :: KeyMap key map => map val -> Maybe (map val)
