-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | bindings to nettle crypto library
--   
--   partial bindings to nettle crypto library
@package bindings-nettle
@version 0.1.1

module Bindings.Nettle.PRNG.Yarrow
c'YARROW256_SEED_FILE_SIZE :: Num a => a
data C'yarrow256_ctx
C'yarrow256_ctx :: C'yarrow256_ctx
data C'yarrow_source
C'yarrow_source :: C'yarrow_source
c'nettle_yarrow256_init :: Ptr C'yarrow256_ctx -> CUInt -> Ptr C'yarrow_source -> IO ()
c'nettle_yarrow256_seed :: Ptr C'yarrow256_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_yarrow256_init :: FunPtr (Ptr C'yarrow256_ctx -> CUInt -> Ptr C'yarrow_source -> IO ())
c'nettle_yarrow256_update :: Ptr C'yarrow256_ctx -> CUInt -> CUInt -> CUInt -> Ptr CUChar -> IO CInt
c'nettle_yarrow256_random :: Ptr C'yarrow256_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_yarrow256_seed :: FunPtr (Ptr C'yarrow256_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_yarrow256_is_seeded :: Ptr C'yarrow256_ctx -> IO CInt
p'nettle_yarrow256_update :: FunPtr (Ptr C'yarrow256_ctx -> CUInt -> CUInt -> CUInt -> Ptr CUChar -> IO CInt)
c'nettle_yarrow256_needed_sources :: Ptr C'yarrow256_ctx -> IO CUInt
p'nettle_yarrow256_random :: FunPtr (Ptr C'yarrow256_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_yarrow256_fast_reseed :: Ptr C'yarrow256_ctx -> IO ()
p'nettle_yarrow256_is_seeded :: FunPtr (Ptr C'yarrow256_ctx -> IO CInt)
c'nettle_yarrow256_slow_reseed :: Ptr C'yarrow256_ctx -> IO ()
p'nettle_yarrow256_needed_sources :: FunPtr (Ptr C'yarrow256_ctx -> IO CUInt)
p'nettle_yarrow256_fast_reseed :: FunPtr (Ptr C'yarrow256_ctx -> IO ())
p'nettle_yarrow256_slow_reseed :: FunPtr (Ptr C'yarrow256_ctx -> IO ())
data C'yarrow_key_event_ctx
C'yarrow_key_event_ctx :: C'yarrow_key_event_ctx
c'nettle_yarrow_key_event_init :: Ptr C'yarrow_key_event_ctx -> IO ()
c'nettle_yarrow_key_event_estimate :: Ptr C'yarrow_key_event_ctx -> CUInt -> CUInt -> IO CUInt
p'nettle_yarrow_key_event_init :: FunPtr (Ptr C'yarrow_key_event_ctx -> IO ())
p'nettle_yarrow_key_event_estimate :: FunPtr (Ptr C'yarrow_key_event_ctx -> CUInt -> CUInt -> IO CUInt)
instance Eq C'yarrow256_ctx
instance Show C'yarrow256_ctx
instance Eq C'yarrow_source
instance Show C'yarrow_source
instance Eq C'yarrow_key_event_ctx
instance Show C'yarrow_key_event_ctx
instance Storable C'yarrow_key_event_ctx
instance Storable C'yarrow_source
instance Storable C'yarrow256_ctx

module Bindings.Nettle.Hash.SHA3
c'SHA3_256_DIGEST_SIZE :: Num a => a
c'SHA3_256_DATA_SIZE :: Num a => a
data C'sha3_256_ctx
C'sha3_256_ctx :: C'sha3_256_ctx
c'nettle_sha3_256_init :: Ptr C'sha3_256_ctx -> IO ()
c'nettle_sha3_256_update :: Ptr C'sha3_256_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha3_256_init :: FunPtr (Ptr C'sha3_256_ctx -> IO ())
c'nettle_sha3_256_digest :: Ptr C'sha3_256_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha3_256_update :: FunPtr (Ptr C'sha3_256_ctx -> CUInt -> Ptr CUChar -> IO ())
p'nettle_sha3_256_digest :: FunPtr (Ptr C'sha3_256_ctx -> CUInt -> Ptr CUChar -> IO ())
c'SHA3_224_DIGEST_SIZE :: Num a => a
c'SHA3_224_DATA_SIZE :: Num a => a
data C'sha3_224_ctx
C'sha3_224_ctx :: C'sha3_224_ctx
c'nettle_sha3_224_init :: Ptr C'sha3_224_ctx -> IO ()
c'nettle_sha3_224_update :: Ptr C'sha3_224_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha3_224_init :: FunPtr (Ptr C'sha3_224_ctx -> IO ())
c'nettle_sha3_224_digest :: Ptr C'sha3_224_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha3_224_update :: FunPtr (Ptr C'sha3_224_ctx -> CUInt -> Ptr CUChar -> IO ())
p'nettle_sha3_224_digest :: FunPtr (Ptr C'sha3_224_ctx -> CUInt -> Ptr CUChar -> IO ())
c'SHA3_512_DIGEST_SIZE :: Num a => a
c'SHA3_512_DATA_SIZE :: Num a => a
data C'sha3_512_ctx
C'sha3_512_ctx :: C'sha3_512_ctx
c'nettle_sha3_512_init :: Ptr C'sha3_512_ctx -> IO ()
c'nettle_sha3_512_update :: Ptr C'sha3_512_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha3_512_init :: FunPtr (Ptr C'sha3_512_ctx -> IO ())
c'nettle_sha3_512_digest :: Ptr C'sha3_512_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha3_512_update :: FunPtr (Ptr C'sha3_512_ctx -> CUInt -> Ptr CUChar -> IO ())
p'nettle_sha3_512_digest :: FunPtr (Ptr C'sha3_512_ctx -> CUInt -> Ptr CUChar -> IO ())
c'SHA3_384_DIGEST_SIZE :: Num a => a
c'SHA3_384_DATA_SIZE :: Num a => a
data C'sha3_384_ctx
C'sha3_384_ctx :: C'sha3_384_ctx
c'nettle_sha3_384_init :: Ptr C'sha3_384_ctx -> IO ()
c'nettle_sha3_384_update :: Ptr C'sha3_384_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha3_384_init :: FunPtr (Ptr C'sha3_384_ctx -> IO ())
c'nettle_sha3_384_digest :: Ptr C'sha3_384_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha3_384_update :: FunPtr (Ptr C'sha3_384_ctx -> CUInt -> Ptr CUChar -> IO ())
p'nettle_sha3_384_digest :: FunPtr (Ptr C'sha3_384_ctx -> CUInt -> Ptr CUChar -> IO ())
instance Eq C'sha3_256_ctx
instance Show C'sha3_256_ctx
instance Eq C'sha3_224_ctx
instance Show C'sha3_224_ctx
instance Eq C'sha3_512_ctx
instance Show C'sha3_512_ctx
instance Eq C'sha3_384_ctx
instance Show C'sha3_384_ctx
instance Storable C'sha3_384_ctx
instance Storable C'sha3_512_ctx
instance Storable C'sha3_224_ctx
instance Storable C'sha3_256_ctx

module Bindings.Nettle.Hash.SHA2
c'SHA256_DIGEST_SIZE :: Num a => a
c'SHA256_DATA_SIZE :: Num a => a
data C'sha256_ctx
C'sha256_ctx :: C'sha256_ctx
c'nettle_sha256_init :: Ptr C'sha256_ctx -> IO ()
c'nettle_sha256_update :: Ptr C'sha256_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha256_init :: FunPtr (Ptr C'sha256_ctx -> IO ())
c'nettle_sha256_digest :: Ptr C'sha256_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha256_update :: FunPtr (Ptr C'sha256_ctx -> CUInt -> Ptr CUChar -> IO ())
p'nettle_sha256_digest :: FunPtr (Ptr C'sha256_ctx -> CUInt -> Ptr CUChar -> IO ())
c'SHA224_DIGEST_SIZE :: Num a => a
c'SHA224_DATA_SIZE :: Num a => a
data C'sha224_ctx
C'sha224_ctx :: C'sha224_ctx
c'nettle_sha224_init :: Ptr C'sha256_ctx -> IO ()
c'nettle_sha224_digest :: Ptr C'sha256_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha224_init :: FunPtr (Ptr C'sha256_ctx -> IO ())
p'nettle_sha224_digest :: FunPtr (Ptr C'sha256_ctx -> CUInt -> Ptr CUChar -> IO ())
c'SHA512_DIGEST_SIZE :: Num a => a
c'SHA512_DATA_SIZE :: Num a => a
data C'sha512_ctx
C'sha512_ctx :: C'sha512_ctx
c'nettle_sha512_init :: Ptr C'sha512_ctx -> IO ()
c'nettle_sha512_update :: Ptr C'sha512_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha512_init :: FunPtr (Ptr C'sha512_ctx -> IO ())
c'nettle_sha512_digest :: Ptr C'sha512_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha512_update :: FunPtr (Ptr C'sha512_ctx -> CUInt -> Ptr CUChar -> IO ())
p'nettle_sha512_digest :: FunPtr (Ptr C'sha512_ctx -> CUInt -> Ptr CUChar -> IO ())
c'SHA384_DIGEST_SIZE :: Num a => a
c'SHA384_DATA_SIZE :: Num a => a
data C'sha384_ctx
C'sha384_ctx :: C'sha384_ctx
c'nettle_sha384_init :: Ptr C'sha512_ctx -> IO ()
c'nettle_sha384_digest :: Ptr C'sha512_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_sha384_init :: FunPtr (Ptr C'sha512_ctx -> IO ())
p'nettle_sha384_digest :: FunPtr (Ptr C'sha512_ctx -> CUInt -> Ptr CUChar -> IO ())
instance Eq C'sha256_ctx
instance Show C'sha256_ctx
instance Eq C'sha224_ctx
instance Show C'sha224_ctx
instance Eq C'sha512_ctx
instance Show C'sha512_ctx
instance Eq C'sha384_ctx
instance Show C'sha384_ctx
instance Storable C'sha384_ctx
instance Storable C'sha512_ctx
instance Storable C'sha224_ctx
instance Storable C'sha256_ctx

module Bindings.Nettle.Cipher.Twofish
c'TWOFISH_BLOCK_SIZE :: Num a => a
c'TWOFISH_MIN_KEY_SIZE :: Num a => a
c'TWOFISH_MAX_KEY_SIZE :: Num a => a
c'TWOFISH_KEY_SIZE :: Num a => a
data C'twofish_ctx
C'twofish_ctx :: C'twofish_ctx
c'nettle_twofish_set_key :: Ptr C'twofish_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_twofish_encrypt :: Ptr C'twofish_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_twofish_set_key :: FunPtr (Ptr C'twofish_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_twofish_decrypt :: Ptr C'twofish_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_twofish_encrypt :: FunPtr (Ptr C'twofish_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
p'nettle_twofish_decrypt :: FunPtr (Ptr C'twofish_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'twofish_ctx
instance Show C'twofish_ctx
instance Storable C'twofish_ctx

module Bindings.Nettle.Cipher.Serpent
c'SERPENT_BLOCK_SIZE :: Num a => a
c'SERPENT_MIN_KEY_SIZE :: Num a => a
c'SERPENT_MAX_KEY_SIZE :: Num a => a
c'SERPENT_KEY_SIZE :: Num a => a
data C'serpent_ctx
C'serpent_ctx :: C'serpent_ctx
c'nettle_serpent_set_key :: Ptr C'serpent_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_serpent_encrypt :: Ptr C'serpent_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_serpent_set_key :: FunPtr (Ptr C'serpent_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_serpent_decrypt :: Ptr C'serpent_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_serpent_encrypt :: FunPtr (Ptr C'serpent_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
p'nettle_serpent_decrypt :: FunPtr (Ptr C'serpent_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'serpent_ctx
instance Show C'serpent_ctx
instance Storable C'serpent_ctx

module Bindings.Nettle.Cipher.Salsa20
c'SALSA20_BLOCK_SIZE :: Num a => a
c'SALSA20_MIN_KEY_SIZE :: Num a => a
c'SALSA20_MAX_KEY_SIZE :: Num a => a
c'SALSA20_KEY_SIZE :: Num a => a
c'SALSA20_IV_SIZE :: Num a => a
data C'salsa20_ctx
C'salsa20_ctx :: C'salsa20_ctx
c'nettle_salsa20_set_key :: Ptr C'salsa20_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_salsa20_set_iv :: Ptr C'salsa20_ctx -> Ptr CUChar -> IO ()
p'nettle_salsa20_set_key :: FunPtr (Ptr C'salsa20_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_salsa20_crypt :: Ptr C'salsa20_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_salsa20_set_iv :: FunPtr (Ptr C'salsa20_ctx -> Ptr CUChar -> IO ())
c'nettle_salsa20r12_crypt :: Ptr C'salsa20_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_salsa20_crypt :: FunPtr (Ptr C'salsa20_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
p'nettle_salsa20r12_crypt :: FunPtr (Ptr C'salsa20_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'salsa20_ctx
instance Show C'salsa20_ctx
instance Storable C'salsa20_ctx

module Bindings.Nettle.Cipher.DES
c'DES_BLOCK_SIZE :: Num a => a
c'DES_KEY_SIZE :: Num a => a
data C'des_ctx
C'des_ctx :: C'des_ctx
c'nettle_des_set_key :: Ptr C'des_ctx -> Ptr CUChar -> IO ()
c'nettle_des_encrypt :: Ptr C'des_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_des_set_key :: FunPtr (Ptr C'des_ctx -> Ptr CUChar -> IO ())
c'nettle_des_decrypt :: Ptr C'des_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
c'nettle_des_check_parity :: CUInt -> Ptr CUChar -> IO ()
p'nettle_des_encrypt :: FunPtr (Ptr C'des_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
c'nettle_des_fix_parity :: CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_des_decrypt :: FunPtr (Ptr C'des_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
p'nettle_des_check_parity :: FunPtr (CUInt -> Ptr CUChar -> IO ())
p'nettle_des_fix_parity :: FunPtr (CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
c'DES3_BLOCK_SIZE :: Num a => a
c'DES3_KEY_SIZE :: Num a => a
data C'des3_ctx
C'des3_ctx :: C'des3_ctx
c'nettle_des3_set_key :: Ptr C'des3_ctx -> Ptr CUChar -> IO ()
c'nettle_des3_encrypt :: Ptr C'des3_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_des3_set_key :: FunPtr (Ptr C'des3_ctx -> Ptr CUChar -> IO ())
c'nettle_des3_decrypt :: Ptr C'des3_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_des3_encrypt :: FunPtr (Ptr C'des3_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
p'nettle_des3_decrypt :: FunPtr (Ptr C'des3_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'des_ctx
instance Show C'des_ctx
instance Eq C'des3_ctx
instance Show C'des3_ctx
instance Storable C'des3_ctx
instance Storable C'des_ctx

module Bindings.Nettle.Cipher.CAST128
c'CAST128_BLOCK_SIZE :: Num a => a
c'CAST128_MIN_KEY_SIZE :: Num a => a
c'CAST128_MAX_KEY_SIZE :: Num a => a
c'CAST128_KEY_SIZE :: Num a => a
data C'cast128_ctx
C'cast128_ctx :: C'cast128_ctx
c'nettle_cast128_set_key :: Ptr C'cast128_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_cast128_encrypt :: Ptr C'cast128_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_cast128_set_key :: FunPtr (Ptr C'cast128_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_cast128_decrypt :: Ptr C'cast128_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_cast128_encrypt :: FunPtr (Ptr C'cast128_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
p'nettle_cast128_decrypt :: FunPtr (Ptr C'cast128_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'cast128_ctx
instance Show C'cast128_ctx
instance Storable C'cast128_ctx

module Bindings.Nettle.Cipher.Camellia
c'CAMELLIA_BLOCK_SIZE :: Num a => a
c'CAMELLIA_MIN_KEY_SIZE :: Num a => a
c'CAMELLIA_MAX_KEY_SIZE :: Num a => a
c'CAMELLIA_KEY_SIZE :: Num a => a
data C'camellia_ctx
C'camellia_ctx :: C'camellia_ctx
c'nettle_camellia_set_encrypt_key :: Ptr C'camellia_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_camellia_set_decrypt_key :: Ptr C'camellia_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_camellia_invert_key :: Ptr C'camellia_ctx -> Ptr C'camellia_ctx -> IO ()
p'nettle_camellia_set_encrypt_key :: FunPtr (Ptr C'camellia_ctx -> CUInt -> Ptr CUChar -> IO ())
p'nettle_camellia_set_decrypt_key :: FunPtr (Ptr C'camellia_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_camellia_crypt :: Ptr C'camellia_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_camellia_invert_key :: FunPtr (Ptr C'camellia_ctx -> Ptr C'camellia_ctx -> IO ())
p'nettle_camellia_crypt :: FunPtr (Ptr C'camellia_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'camellia_ctx
instance Show C'camellia_ctx
instance Storable C'camellia_ctx

module Bindings.Nettle.Cipher.Blowfish
c'BLOWFISH_BLOCK_SIZE :: Num a => a
c'BLOWFISH_MIN_KEY_SIZE :: Num a => a
c'BLOWFISH_MAX_KEY_SIZE :: Num a => a
c'BLOWFISH_KEY_SIZE :: Num a => a
data C'blowfish_ctx
C'blowfish_ctx :: C'blowfish_ctx
c'nettle_blowfish_set_key :: Ptr C'blowfish_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_blowfish_encrypt :: Ptr C'blowfish_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_blowfish_set_key :: FunPtr (Ptr C'blowfish_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_blowfish_decrypt :: Ptr C'blowfish_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_blowfish_encrypt :: FunPtr (Ptr C'blowfish_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
p'nettle_blowfish_decrypt :: FunPtr (Ptr C'blowfish_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'blowfish_ctx
instance Show C'blowfish_ctx
instance Storable C'blowfish_ctx

module Bindings.Nettle.Cipher.ArcTwo
c'ARCTWO_BLOCK_SIZE :: Num a => a
c'ARCTWO_MIN_KEY_SIZE :: Num a => a
c'ARCTWO_MAX_KEY_SIZE :: Num a => a
c'ARCTWO_KEY_SIZE :: Num a => a
data C'arctwo_ctx
C'arctwo_ctx :: C'arctwo_ctx
c'nettle_arctwo_set_key_ekb :: Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> CUInt -> IO ()
c'nettle_arctwo_set_key :: Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_arctwo_set_key_gutmann :: Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> IO ()
p'nettle_arctwo_set_key_ekb :: FunPtr (Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> CUInt -> IO ())
p'nettle_arctwo_set_key :: FunPtr (Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_arctwo_encrypt :: Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_arctwo_set_key_gutmann :: FunPtr (Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_arctwo_decrypt :: Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_arctwo_encrypt :: FunPtr (Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
p'nettle_arctwo_decrypt :: FunPtr (Ptr C'arctwo_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'arctwo_ctx
instance Show C'arctwo_ctx
instance Storable C'arctwo_ctx

module Bindings.Nettle.Cipher.ArcFour
c'ARCFOUR_MIN_KEY_SIZE :: Num a => a
c'ARCFOUR_MAX_KEY_SIZE :: Num a => a
c'ARCFOUR_KEY_SIZE :: Num a => a
data C'arcfour_ctx
C'arcfour_ctx :: C'arcfour_ctx
c'nettle_arcfour_set_key :: Ptr C'arcfour_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_arcfour_crypt :: Ptr C'arcfour_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_arcfour_set_key :: FunPtr (Ptr C'arcfour_ctx -> CUInt -> Ptr CUChar -> IO ())
p'nettle_arcfour_crypt :: FunPtr (Ptr C'arcfour_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'arcfour_ctx
instance Show C'arcfour_ctx
instance Storable C'arcfour_ctx

module Bindings.Nettle.Cipher.AES
c'AES_BLOCK_SIZE :: Num a => a
c'AES_MIN_KEY_SIZE :: Num a => a
c'AES_MAX_KEY_SIZE :: Num a => a
c'AES_KEY_SIZE :: Num a => a
data C'aes_ctx
C'aes_ctx :: C'aes_ctx
c'nettle_aes_set_encrypt_key :: Ptr C'aes_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_aes_set_decrypt_key :: Ptr C'aes_ctx -> CUInt -> Ptr CUChar -> IO ()
c'nettle_aes_invert_key :: Ptr C'aes_ctx -> Ptr C'aes_ctx -> IO ()
p'nettle_aes_set_encrypt_key :: FunPtr (Ptr C'aes_ctx -> CUInt -> Ptr CUChar -> IO ())
p'nettle_aes_set_decrypt_key :: FunPtr (Ptr C'aes_ctx -> CUInt -> Ptr CUChar -> IO ())
c'nettle_aes_encrypt :: Ptr C'aes_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_aes_invert_key :: FunPtr (Ptr C'aes_ctx -> Ptr C'aes_ctx -> IO ())
c'nettle_aes_decrypt :: Ptr C'aes_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ()
p'nettle_aes_encrypt :: FunPtr (Ptr C'aes_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
p'nettle_aes_decrypt :: FunPtr (Ptr C'aes_ctx -> CUInt -> Ptr CUChar -> Ptr CUChar -> IO ())
instance Eq C'aes_ctx
instance Show C'aes_ctx
instance Storable C'aes_ctx
