-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Mapping between BSON and algebraic data types.
--   
--   This module defines a Bson class to convert data types to Bson and to
--   convert Bson documents back to datatypes, along with template haskell
--   functions to easily derive the instance.
@package bson-mapping
@version 0.1.4.1


-- | This module aims to make mapping between algebraic data types and bson
--   documents easy.
--   
--   You can also generate documents with <a>selectFields</a>, which takes
--   a list of functions names that of type a -&gt; b and returns a
--   function of type a -&gt; Document.
--   
--   Example:
--   
--   <pre>
--   import Data.Bson.Mapping
--   import Data.Time.Clock
--   import Data.Data (Typeable)
--   
--   data Post = Post { time :: UTCTime
--                    , author :: String
--                    , content :: String 
--                    , votes :: Int
--                    }
--             deriving (Show, Read, Eq, Ord, Typeable)
--   $(deriveBson ''Post)
--   
--   main :: IO ()
--   main = do
--     now &lt;- getCurrentTime
--     let post = Post now "francesco" "lorem ipsum" 5
--     (fromBson (toBson post) :: IO Post) &gt;&gt;= print
--     print $ toBson post
--     print $ $(selectFields ['time, 'content]) post
--   </pre>
module Data.Bson.Mapping
class (Show a, Eq a, Typeable a) => Bson a
toBson :: Bson a => a -> Document
fromBson :: (Bson a, Monad m) => Document -> m a

-- | Derive <a>Bson</a> and <a>Val</a> declarations for a data type.
deriveBson :: Name -> Q [Dec]

-- | Select only certain fields in a document, see the code sample at the
--   top.
--   
--   Please note that there is no checking for the names to be actual
--   fields of the bson document mapped to a datatype, so be careful.
selectFields :: [Name] -> Q Exp
getLabel :: Name -> Q Exp

-- | Get a document that identifies the data type - <tt>getConsDoc
--   ''Post</tt>.
--   
--   This is useful to select all documents mapped to a certain data type.
getConsDoc :: Name -> Q Exp

-- | Simple function to select fields in a nested document.
subDocument :: Label -> Document -> Document

-- | Returns a function that gets a datatype and a value, and generates a
--   <a>Document</a> consisting of one field - the label provided - and the
--   value of that datatype.
--   
--   <tt>$(getField 'time) post</tt> will generate <tt>["time" =: time
--   post]</tt>.
getField :: Name -> Q Exp
