-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An Airbrake notifier for Haskell
--   
--   Airbrake notifier.
@package airbrake
@version 0.2.0.0


-- | Class for extracting metadata from HTTP request types that come from
--   different libraries.
module Airbrake.WebRequest
class WebRequest a
url :: WebRequest a => a -> URI
route :: WebRequest a => a -> Maybe String
action :: WebRequest a => a -> Maybe String
otherVars :: WebRequest a => a -> [(String, String)]
instance WebRequest Request


-- | Utilities for loading the API key from the environment.
module Airbrake.Credentials
type APIKey = String

-- | The file where API credentials are loaded when using
--   <a>loadCredentialsDefault</a>.
--   
--   Default: <tt>$HOME/.airbrake-keys</tt>
credentialsDefaultFile :: MonadIO m => m FilePath

-- | The key to be used in the loaded API credentials file, when using
--   <a>loadCredentialsDefault</a>.
--   
--   Default: <tt>default</tt>
credentialsDefaultKey :: String

-- | Load API credentials from a text file given a key name.
--   
--   The file should consist of newline-separated credentials in the
--   following format:
--   
--   <pre>
--   keyName apiKey
--   </pre>
loadCredentialsFromFile :: MonadIO m => FilePath -> String -> m (Maybe APIKey)

-- | Load API credentials from the environment variable
--   <tt>AIRBRAKE_API_KEY</tt>.
loadCredentialsFromEnv :: MonadIO m => m (Maybe APIKey)

-- | Load API credentials from the environment, or, failing that, from the
--   given file with the given key name.
--   
--   See <a>loadCredentialsFromEnv</a> and <a>loadCredentialsFromFile</a>.
loadCredentialsFromEnvOrFile :: MonadIO m => FilePath -> String -> m (Maybe APIKey)

-- | Load API credentials from the environment if possible, or alternately
--   from the default file with the default key name.
--   
--   Default file: <tt>$HOME/.airbrake-keys</tt>
--   
--   Default key: <tt>default</tt>
--   
--   See <a>loadCredentialsFromEnv</a> and <a>loadCredentialsFromFile</a>.
loadCredentialsDefault :: MonadIO m => m (Maybe APIKey)


-- | Utilities for notifying Airbrake of errors. An <a>Error</a> type is
--   provided; you can convert any instance of <a>Exception</a> to an
--   <a>Error</a> using <a>toError</a>, which uses the exception's
--   <tt>Typeable</tt> instance.
--   
--   Airbrake requires a stack trace for any reported exception, but stack
--   trace information isn't readily available for Haskell exceptions.
--   <a>notifyQ</a> and <a>notifyReqQ</a> are provided for the purpose of
--   providing the current file position as the stack trace.
module Airbrake

-- | Notify Airbrake of an exception.
notify :: (MonadBaseControl IO m, MonadIO m, MonadThrow m) => AirbrakeConf -> Error -> Locations -> m ()

-- | Notify Airbrake of an exception, providing request metadata along with
--   it.
notifyReq :: (MonadBaseControl IO m, MonadIO m, MonadThrow m, WebRequest req) => AirbrakeConf -> req -> Error -> Locations -> m ()

-- | <a>notify</a>, fetching the current file location using Template
--   Haskell.
--   
--   <pre>
--   $notifyQ :: (<a>MonadBaseControl</a> <a>IO</a> m, <a>MonadThrow</a> m, <a>MonadIO</a> m)
--            =&gt; <a>AirbrakeConf</a> -&gt; <a>Error</a> -&gt; m ()
--   </pre>
notifyQ :: Q Exp

-- | <a>notifyReq</a>, fetching the current file location using Template
--   Haskell.
--   
--   <pre>
--   $notifyReqQ :: (<a>MonadBaseControl</a> <a>IO</a> m, <a>MonadThrow</a> m, <a>MonadIO</a> m, <a>WebRequest</a> req)
--               =&gt; <a>AirbrakeConf</a> -&gt; req -&gt; <a>Error</a> -&gt; m ()
--   </pre>
notifyReqQ :: Q Exp
data NonEmpty a :: * -> *
(:|) :: a -> [a] -> NonEmpty a

-- | A <tt>(filename, line)</tt> pair.
type Location = (FilePath, Int)
type Locations = NonEmpty Location

-- | Convert any <a>Exception</a> to an <a>Error</a>.
toError :: Exception e => e -> Error
data Error
Error :: Text -> Text -> Error
errorType :: Error -> Text
errorDescription :: Error -> Text
type APIKey = String
type Environment = String
airbrakeConf :: APIKey -> Environment -> AirbrakeConf

-- | <pre>
--   <a>http://api.airbrake.io/notifier_api/v2/notices</a>
--   </pre>
defaultApiEndpoint :: String

-- | Information to use when communicating with Airbrake.
data AirbrakeConf
AirbrakeConf :: String -> APIKey -> Server -> AirbrakeConf
acApiEndpoint :: AirbrakeConf -> String
acApiKey :: AirbrakeConf -> APIKey
acServer :: AirbrakeConf -> Server

-- | Metadata about the server.
data Server
Server :: Environment -> Maybe Version -> Maybe FilePath -> Server
serverEnvironment :: Server -> Environment
serverAppVersion :: Server -> Maybe Version
serverRoot :: Server -> Maybe FilePath
