-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Disciplined Disciple Compiler build framework.
--   
--   Disciplined Disciple Compiler build framework.
@package ddc-build
@version 0.4.1.3

module DDC.Build.Platform

-- | Describes a build or target platform.
data Platform
Platform :: Arch -> Os -> Platform
platformArch :: Platform -> Arch
platformOs :: Platform -> Os

-- | Get the file extension to use for a static library on this platform.
staticFileExtensionOfPlatform :: Platform -> String

-- | Get the file extension to use for a shared library on this platform.
sharedFileExtensionOfPlatform :: Platform -> String

-- | Processor Architecture.
data Arch
ArchX86_32 :: Arch
ArchX86_64 :: Arch
ArchPPC_32 :: Arch
ArchPPC_64 :: Arch

-- | Get the width of a pointer on the architecture, in bits.
archPointerWidth :: Arch -> Int

-- | Operating System.
data Os
OsDarwin :: Os
OsLinux :: Os
OsCygwin :: Os
OsMingw :: Os

-- | Determine the default host platform.
--   
--   Uses the <tt>arch</tt> and <tt>uname</tt> commands which must be in
--   the current path.
--   
--   Returns <a>Nothing</a> if <tt>arch</tt> or <tt>uname</tt> cannot be
--   found, returned an error, or we didn't recognise their response.
--   
--   For Platforms like Darwin which can run both 32-bit and 64-bit
--   binaries, we return whatever the default is reported by <tt>arch</tt>
--   and <tt>uname</tt>.
determineHostPlatform :: IO (Maybe Platform)

-- | Determine the host archicture. Uses the <tt>arch</tt> command which
--   must be in the current path.
determineHostArch :: IO (Maybe Arch)

-- | Determine the host OS. Uses the <tt>uname</tt> command which must be
--   in the current path.
determineHostOs :: IO (Maybe Os)
instance Eq Arch
instance Show Arch
instance Eq Os
instance Show Os
instance Eq Platform
instance Show Platform
instance Pretty Os
instance Pretty Arch
instance Pretty Platform

module DDC.Build.Builder

-- | Configuration information for a builder that is not platform specific.
data BuilderConfig
BuilderConfig :: FilePath -> FilePath -> BuilderConfig

-- | Directory that holds the source for the runtime system and base
--   library.
builderConfigBaseSrcDir :: BuilderConfig -> FilePath

-- | Directory that holds the shared objects for the runtime system and
--   base library.
builderConfigBaseLibDir :: BuilderConfig -> FilePath

-- | Actions to use to invoke external compilation tools.
data Builder
Builder :: String -> Platform -> Platform -> Platform -> FilePath -> FilePath -> (FilePath -> FilePath -> IO ()) -> (FilePath -> FilePath -> IO ()) -> (FilePath -> FilePath -> IO ()) -> (FilePath -> FilePath -> IO ()) -> ([FilePath] -> FilePath -> IO ()) -> ([FilePath] -> FilePath -> IO ()) -> Builder

-- | The name of this platform.
builderName :: Builder -> String

-- | The platform the build is being performed on.
buildHost :: Builder -> Platform

-- | The platform we're compiling code for.
buildTarget :: Builder -> Platform

-- | The LLVM target specification. Gives the widths of pointers and
--   primitive numeric types.
buildSpec :: Builder -> Platform

-- | Directory that holds the source for the runtime system and base
--   library.
buildBaseSrcDir :: Builder -> FilePath

-- | Directory that holds the shared objects for the runtime system and
--   base library.
buildBaseLibDir :: Builder -> FilePath

-- | Invoke the C compiler to compile a .c file into a .o file.
buildCC :: Builder -> FilePath -> FilePath -> IO ()

-- | Invoke the LLVM compiler to compile a .ll file into a .s file.
buildLlc :: Builder -> FilePath -> FilePath -> IO ()

-- | Invoke the system assembler to assemble a .s file into a .o file.
buildAs :: Builder -> FilePath -> FilePath -> IO ()

-- | Link an executable.
buildLdExe :: Builder -> FilePath -> FilePath -> IO ()

-- | Link a static library.
buildLdLibStatic :: Builder -> [FilePath] -> FilePath -> IO ()

-- | Link a shared library.
buildLdLibShared :: Builder -> [FilePath] -> FilePath -> IO ()

-- | The result of a build command.
--   
--   We use these so that the called doesn't need to worry about
--   interpreting numeric exit codes.
data BuilderResult

-- | Build command completed successfully.
BuilderSuccess :: BuilderResult

-- | Build command was cancelled or killed by the user. eg by Control-C on
--   the console.
BuilderCanceled :: BuilderResult

-- | Build command failed. There is probably something wrong with the
--   generated file. Unrecognised exit codes also result in this
--   BuilderResult.
BuilderFailed :: BuilderResult

-- | All supported builders. The host and target platforms are the same.
--   
--   Supported builders are: <tt>x86_32-darwin</tt>,
--   <tt>x86_64-darwin</tt>, <tt>x86_32-linux</tt>, <tt>x86_64-linux</tt>,
--   <tt>x86_32-cygwin</tt>, <tt>ppc32-linux</tt>
builders :: BuilderConfig -> [Builder]

-- | Determine the default builder based on the <tt>arch</tt> and
--   <tt>uname</tt> commands. This assumes that the <tt>host</tt> and
--   <tt>target</tt> platforms are the same.
--   
--   If we don't recognise the result of <tt>arch</tt> or <tt>uname</tt>,
--   or don't have a default builder config for this platform then
--   <a>Nothing</a>.
determineDefaultBuilder :: BuilderConfig -> IO (Maybe Builder)
instance Show BuilderResult
instance Eq BuilderResult
instance Pretty Builder
instance Show Builder

module DDC.Build.Pipeline.Error
data Error

-- | Error when loading a module. Blame it on the user.
ErrorLoad :: !err -> Error

-- | Error when type checking a transformed module. Blame it on the
--   compiler.
ErrorLint :: !err -> Error
ErrorSaltLoad :: (Error Name err) -> Error

-- | Error converting the module to Salt to Sea.
ErrorSaltConvert :: !err -> Error

-- | Error converting the module from Tetra to Salt.
ErrorTetraConvert :: !err -> Error

-- | Error converting the module from Lite to Salt.
ErrorLiteConvert :: !err -> Error

-- | Error when transforming core program.
ErrorCoreTransform :: !err -> Error
instance NFData Error
instance Pretty Error

module DDC.Build.Pipeline.Sink

-- | What to do with program text.
data Sink

-- | Drop it on the floor.
SinkDiscard :: Sink

-- | Emit it to stdout.
SinkStdout :: Sink

-- | Write it to this file.
SinkFile :: FilePath -> Sink

-- | Emit a string to the given <a>Sink</a>.
pipeSink :: String -> Sink -> IO [Error]
instance Show Sink

module DDC.Build.Pipeline.Llvm

-- | Process an LLVM module.
data PipeLlvm
PipeLlvmPrint :: Sink -> PipeLlvm
PipeLlvmCompile :: Builder -> FilePath -> FilePath -> FilePath -> Maybe FilePath -> Bool -> Bool -> PipeLlvm
pipeBuilder :: PipeLlvm -> Builder
pipeFileLlvm :: PipeLlvm -> FilePath
pipeFileAsm :: PipeLlvm -> FilePath
pipeFileObject :: PipeLlvm -> FilePath
pipeFileExe :: PipeLlvm -> Maybe FilePath
pipeKeepLlvmFiles :: PipeLlvm -> Bool
pipeKeepAsmFiles :: PipeLlvm -> Bool

-- | Process an LLVM module.
--   
--   Returns empty list on success.
pipeLlvm :: Module -> PipeLlvm -> IO [Error]
instance Show PipeLlvm

module DDC.Build.Pipeline.Salt

-- | Process a Core Salt module.
data PipeSalt a
PipeSaltId :: ![PipeSalt a] -> PipeSalt a
PipeSaltOutput :: !Sink -> PipeSalt a
PipeSaltTransfer :: ![PipeSalt (AnTEC a Name)] -> PipeSalt (AnTEC a Name)
PipeSaltPrint :: !Bool -> !Platform -> !Sink -> PipeSalt a
PipeSaltToLlvm :: !Platform -> ![PipeLlvm] -> PipeSalt a
PipeSaltCompile :: !Platform -> !Builder -> !FilePath -> !FilePath -> !(Maybe FilePath) -> !Bool -> PipeSalt a

-- | Process a Core Salt module.
--   
--   Returns empty list on success.
pipeSalt :: (Show a, Pretty a, NFData a) => Module a Name -> PipeSalt a -> IO [Error]
instance Show a => Show (PipeSalt a)


-- | The <tt>Flow</tt> fragment is used for data-flow optimisation as part
--   of the Data Parallel Haskell vectorisation pipeline.
module DDC.Build.Language.Flow

-- | Language definition for Disciple Core Lite.
language :: Language

-- | Language bundle for Disciple Core Lite.
bundle :: Bundle Int Name Error

-- | Fragement definition for Disciple Core Lite.
fragment :: Fragment Name Error
data Error a
Error :: Error a
instance Show (Error a)
instance Pretty (Error a)


-- | The <tt>Lite</tt> fragment is a desugared version of Disciple Core
--   that has all the polymorphism of System-F2 along with algebraic data
--   types.
module DDC.Build.Language.Lite

-- | Language definition for Disciple Core Lite.
language :: Language

-- | Language bundle for Disciple Core Lite.
bundle :: Bundle Int Name Error

-- | Fragement definition for Disciple Core Lite.
fragment :: Fragment Name Error

-- | Create a new type variable name that is not in the given environment.
freshT :: Env Name -> Bind Name -> State Int Name

-- | Create a new value variable name that is not in the given environment.
freshX :: Env Name -> Bind Name -> State Int Name


-- | The <tt>Salt</tt> fragment contains just those features that can be
--   easily mapped onto C or LLVM code.
module DDC.Build.Language.Salt

-- | Language definition for Disciple Core Salt.
language :: Language

-- | Language bundle for Disciple Core Salt.
bundle :: Bundle Int Name Error

-- | Fragment definition for Disciple Core Salt.
fragment :: Fragment Name Error

-- | Create a new type variable name that is not in the given environment.
freshT :: Env Name -> Bind Name -> State Int Name

-- | Create a new value variable name that is not in the given environment.
freshX :: Env Name -> Bind Name -> State Int Name


-- | The <tt>Tetra</tt> fragment has four base kinds: <tt>Data</tt>,
--   <tt>Region</tt>, <tt>Effect</tt>, <tt>Witness</tt>, and uses the
--   <tt>S</tt> computation type to represent effects.
module DDC.Build.Language.Tetra

-- | Language definition for Disciple Core Tetra.
language :: Language

-- | Language bundle for Disciple Core Tetra.
bundle :: Bundle Int Name Error

-- | Fragement definition for Disciple Core Tetra.
fragment :: Fragment Name Error


-- | The <tt>Zero</tt> fragment has no features and no primops. It it
--   provides the first order calculus, and is good for debugging.
module DDC.Build.Language.Zero

-- | Language definitition for Disciple Core Zero.
language :: Language

-- | Language bundle for Disciple Core Zero
bundle :: Bundle Int Name Error

-- | Fragment definition for Disciple Core Eval.
fragment :: Fragment Name Error
data Name
data Error a
instance Typeable Name
instance Show (Error a)
instance Eq Name
instance Ord Name
instance Show Name
instance Pretty Name
instance NFData Name
instance Pretty (Error a)


-- | The <tt>Eval</tt> fragment can be interpreted with our semantic
--   interpreter.
module DDC.Build.Language.Eval

-- | Language definition for Disciple Core Eval.
language :: Language

-- | Language bundle for Disciple Core Eval.
bundle :: Bundle Int Name Error

-- | Fragment definition for Disciple Core Eval.
fragment :: Fragment Name Error
profile :: Profile Name

module DDC.Build.Language

-- | Existential container for a language fragment, and the dictionaries we
--   need to work with its type parameters.
data Language
Language :: (Bundle s n err) -> Language

-- | Existential container for a language fragment, the simplifier for it,
--   and the dictionaries we need to work with its type parameters.
data Bundle s n err
Bundle :: Fragment n err -> Map ModuleName (Module (AnTEC () n) n) -> s -> Simplifier s (AnTEC () n) n -> (Env n -> Namifier s n) -> (Env n -> Namifier s n) -> Map String (RewriteRule (AnTEC () n) n) -> Bundle s n err

-- | Language fragment definition.
bundleFragment :: Bundle s n err -> Fragment n err

-- | Modules being used for inliner templates.
bundleModules :: Bundle s n err -> Map ModuleName (Module (AnTEC () n) n)

-- | Initial simplifier state.
bundleStateInit :: Bundle s n err -> s

-- | Current simplifier to apply to module.
bundleSimplifier :: Bundle s n err -> Simplifier s (AnTEC () n) n

-- | Make a namifier for level-1 names.
bundleMakeNamifierT :: Bundle s n err -> Env n -> Namifier s n

-- | Make a namifier for level-0 names.
bundleMakeNamifierX :: Bundle s n err -> Env n -> Namifier s n

-- | Current rewrite rules to apply to module.
bundleRewriteRules :: Bundle s n err -> Map String (RewriteRule (AnTEC () n) n)

-- | Carries all the information we need to work on a particular fragment
--   of the Disciple Core language.
data Fragment n (err :: * -> *) :: * -> (* -> *) -> *
Fragment :: Profile n -> String -> (String -> Maybe n) -> (String -> Int -> String -> [Token (Tok n)]) -> (String -> Int -> String -> [Token (Tok n)]) -> (forall a. Module a n -> Maybe (err a)) -> (forall a. Exp a n -> Maybe (err a)) -> Fragment n

-- | Language profile for this fragment.
fragmentProfile :: Fragment n -> Profile n

-- | File extension to use when dumping modules in this fragment.
fragmentExtension :: Fragment n -> String

-- | Read a name.
fragmentReadName :: Fragment n -> String -> Maybe n

-- | Lex module source into tokens, given the source name and starting line
--   number.
fragmentLexModule :: Fragment n -> String -> Int -> String -> [Token (Tok n)]

-- | Lex expression source into tokens, given the source name and starting
--   line number.
fragmentLexExp :: Fragment n -> String -> Int -> String -> [Token (Tok n)]

-- | Perform language fragment specific checks on a module.
fragmentCheckModule :: Fragment n -> forall a. Module a n -> Maybe (err a)

-- | Perform language fragment specific checks on an expression.
fragmentCheckExp :: Fragment n -> forall a. Exp a n -> Maybe (err a)

-- | Supported language profiles.
--   
--   One of <tt>Tetra</tt>, <tt>Lite</tt>, <tt>Salt</tt>, <tt>Eval</tt>,
--   <tt>Flow</tt>, <tt>Zero</tt>.
languages :: [(String, Language)]

-- | Return the language fragment definition corresponding to the given
--   file extension. eg <tt>dcl</tt> gives the definition of the Lite
--   language.
languageOfExtension :: String -> Maybe Language

module DDC.Build.Pipeline.Core

-- | Process a core module.
data PipeCore a n
PipeCoreId :: ![PipeCore a n] -> PipeCore a n
PipeCoreOutput :: !(PrettyMode (Module a n)) -> !Sink -> PipeCore a n
PipeCoreCheck :: !(Fragment n err) -> !(Mode n) -> !Sink -> ![PipeCore (AnTEC a n) n] -> PipeCore a n
PipeCoreReCheck :: !(Fragment n err) -> !(Mode n) -> ![PipeCore (AnTEC a n) n] -> PipeCore (AnTEC a n') n
PipeCoreReannotate :: (a -> b) -> ![PipeCore b n] -> PipeCore a n
PipeCoreSimplify :: !(Fragment n err) -> !s -> !(Simplifier s a n) -> ![PipeCore () n] -> PipeCore a n
PipeCoreAsTetra :: ![PipeTetra (AnTEC a Name)] -> PipeCore (AnTEC a Name) Name
PipeCoreAsLite :: ![PipeLite] -> PipeCore (AnTEC () Name) Name
PipeCoreAsFlow :: ![PipeFlow a] -> PipeCore a Name
PipeCoreAsSalt :: ![PipeSalt a] -> PipeCore a Name
PipeCoreHacks :: Canned (Module a n -> IO (Module b n)) -> ![PipeCore b n] -> PipeCore a n

-- | Process a Core module.
--   
--   Returns empty list on success.
pipeCore :: (NFData a, Show a, NFData n, Eq n, Ord n, Show n, Pretty n) => Module a n -> PipeCore a n -> IO [Error]
pipeCores :: (NFData a, Show a, NFData n, Eq n, Ord n, Show n, Pretty n) => Module a n -> [PipeCore a n] -> IO [Error]

-- | Process a Core Tetra module.
data PipeTetra a
PipeTetraOutput :: !Sink -> PipeTetra a
PipeTetraBoxing :: ![PipeCore a Name] -> PipeTetra a
PipeTetraToSalt :: !Platform -> !Config -> ![PipeCore a Name] -> PipeTetra (AnTEC a Name)

-- | Process a Core Tetra module.
pipeTetra :: Module a Name -> PipeTetra a -> IO [Error]

-- | Process a Core Lite module.
data PipeLite

-- | Output the module in core language syntax.
PipeLiteOutput :: !Sink -> PipeLite

-- | Convert the module to the Core Salt Fragment.
PipeLiteToSalt :: !Platform -> !Config -> ![PipeCore () Name] -> PipeLite

-- | Process a Core Lite module.
pipeLite :: Module (AnTEC () Name) Name -> PipeLite -> IO [Error]

-- | Process a Core Flow module.
data PipeFlow a
PipeFlowOutput :: Sink -> PipeFlow a
PipeFlowHacks :: Canned (Module a Name -> IO (Module b Name)) -> ![PipeFlow b] -> PipeFlow a
PipeFlowPrep :: [PipeCore () Name] -> PipeFlow ()
PipeFlowRate :: [PipeCore () Name] -> PipeFlow ()
PipeFlowLower :: Config -> [PipeCore () Name] -> PipeFlow (AnTEC () Name)
PipeFlowMelt :: [PipeCore () Name] -> PipeFlow (AnTEC () Name)
PipeFlowWind :: [PipeCore () Name] -> PipeFlow (AnTEC () Name)

-- | Process a Core Flow module.
pipeFlow :: Module a Name -> PipeFlow a -> IO [Error]

module DDC.Build.Pipeline.Text

-- | Process program text.
data PipeText n (err :: * -> *)
PipeTextOutput :: !Sink -> PipeText n err
PipeTextLoadCore :: !(Fragment n err) -> !(Mode n) -> !Sink -> ![PipeCore (AnTEC SourcePos n) n] -> PipeText n err
PipeTextLoadSourceTetra :: !Sink -> !Sink -> !Sink -> ![PipeCore (AnTEC SourcePos Name) Name] -> PipeText n err

-- | Process a text module.
--   
--   Returns empty list on success.
pipeText :: NFData n => String -> Int -> String -> PipeText n err -> IO [Error]


-- | A pipeline is an abstraction of a single compiler pass.
--   
--   NOTE: The Haddock documentation on pipeline constructors is missing
--   because Haddock does not support commenting GADTs. See the source code
--   for documentation.
module DDC.Build.Pipeline
data Error

-- | Error when loading a module. Blame it on the user.
ErrorLoad :: !err -> Error

-- | Error when type checking a transformed module. Blame it on the
--   compiler.
ErrorLint :: !err -> Error
ErrorSaltLoad :: (Error Name err) -> Error

-- | Error converting the module to Salt to Sea.
ErrorSaltConvert :: !err -> Error

-- | Error converting the module from Tetra to Salt.
ErrorTetraConvert :: !err -> Error

-- | Error converting the module from Lite to Salt.
ErrorLiteConvert :: !err -> Error

-- | Error when transforming core program.
ErrorCoreTransform :: !err -> Error

-- | Process program text.
data PipeText n (err :: * -> *)
PipeTextOutput :: !Sink -> PipeText n err
PipeTextLoadCore :: !(Fragment n err) -> !(Mode n) -> !Sink -> ![PipeCore (AnTEC SourcePos n) n] -> PipeText n err
PipeTextLoadSourceTetra :: !Sink -> !Sink -> !Sink -> ![PipeCore (AnTEC SourcePos Name) Name] -> PipeText n err

-- | Process a text module.
--   
--   Returns empty list on success.
pipeText :: NFData n => String -> Int -> String -> PipeText n err -> IO [Error]

-- | Process a core module.
data PipeCore a n
PipeCoreId :: ![PipeCore a n] -> PipeCore a n
PipeCoreOutput :: !(PrettyMode (Module a n)) -> !Sink -> PipeCore a n
PipeCoreCheck :: !(Fragment n err) -> !(Mode n) -> !Sink -> ![PipeCore (AnTEC a n) n] -> PipeCore a n
PipeCoreReCheck :: !(Fragment n err) -> !(Mode n) -> ![PipeCore (AnTEC a n) n] -> PipeCore (AnTEC a n') n
PipeCoreReannotate :: (a -> b) -> ![PipeCore b n] -> PipeCore a n
PipeCoreSimplify :: !(Fragment n err) -> !s -> !(Simplifier s a n) -> ![PipeCore () n] -> PipeCore a n
PipeCoreAsTetra :: ![PipeTetra (AnTEC a Name)] -> PipeCore (AnTEC a Name) Name
PipeCoreAsLite :: ![PipeLite] -> PipeCore (AnTEC () Name) Name
PipeCoreAsFlow :: ![PipeFlow a] -> PipeCore a Name
PipeCoreAsSalt :: ![PipeSalt a] -> PipeCore a Name
PipeCoreHacks :: Canned (Module a n -> IO (Module b n)) -> ![PipeCore b n] -> PipeCore a n

-- | Process a Core module.
--   
--   Returns empty list on success.
pipeCore :: (NFData a, Show a, NFData n, Eq n, Ord n, Show n, Pretty n) => Module a n -> PipeCore a n -> IO [Error]

-- | Process a Core Tetra module.
data PipeTetra a
PipeTetraOutput :: !Sink -> PipeTetra a
PipeTetraBoxing :: ![PipeCore a Name] -> PipeTetra a
PipeTetraToSalt :: !Platform -> !Config -> ![PipeCore a Name] -> PipeTetra (AnTEC a Name)

-- | Process a Core Tetra module.
pipeTetra :: Module a Name -> PipeTetra a -> IO [Error]

-- | Process a Core Lite module.
data PipeLite

-- | Output the module in core language syntax.
PipeLiteOutput :: !Sink -> PipeLite

-- | Convert the module to the Core Salt Fragment.
PipeLiteToSalt :: !Platform -> !Config -> ![PipeCore () Name] -> PipeLite

-- | Process a Core Lite module.
pipeLite :: Module (AnTEC () Name) Name -> PipeLite -> IO [Error]

-- | Process a Core Flow module.
data PipeFlow a
PipeFlowOutput :: Sink -> PipeFlow a
PipeFlowHacks :: Canned (Module a Name -> IO (Module b Name)) -> ![PipeFlow b] -> PipeFlow a
PipeFlowPrep :: [PipeCore () Name] -> PipeFlow ()
PipeFlowRate :: [PipeCore () Name] -> PipeFlow ()
PipeFlowLower :: Config -> [PipeCore () Name] -> PipeFlow (AnTEC () Name)
PipeFlowMelt :: [PipeCore () Name] -> PipeFlow (AnTEC () Name)
PipeFlowWind :: [PipeCore () Name] -> PipeFlow (AnTEC () Name)

-- | Process a Core Flow module.
pipeFlow :: Module a Name -> PipeFlow a -> IO [Error]

-- | Process a Core Salt module.
data PipeSalt a
PipeSaltId :: ![PipeSalt a] -> PipeSalt a
PipeSaltOutput :: !Sink -> PipeSalt a
PipeSaltTransfer :: ![PipeSalt (AnTEC a Name)] -> PipeSalt (AnTEC a Name)
PipeSaltPrint :: !Bool -> !Platform -> !Sink -> PipeSalt a
PipeSaltToLlvm :: !Platform -> ![PipeLlvm] -> PipeSalt a
PipeSaltCompile :: !Platform -> !Builder -> !FilePath -> !FilePath -> !(Maybe FilePath) -> !Bool -> PipeSalt a

-- | Process a Core Salt module.
--   
--   Returns empty list on success.
pipeSalt :: (Show a, Pretty a, NFData a) => Module a Name -> PipeSalt a -> IO [Error]

-- | Process an LLVM module.
data PipeLlvm
PipeLlvmPrint :: Sink -> PipeLlvm
PipeLlvmCompile :: Builder -> FilePath -> FilePath -> FilePath -> Maybe FilePath -> Bool -> Bool -> PipeLlvm
pipeBuilder :: PipeLlvm -> Builder
pipeFileLlvm :: PipeLlvm -> FilePath
pipeFileAsm :: PipeLlvm -> FilePath
pipeFileObject :: PipeLlvm -> FilePath
pipeFileExe :: PipeLlvm -> Maybe FilePath
pipeKeepLlvmFiles :: PipeLlvm -> Bool
pipeKeepAsmFiles :: PipeLlvm -> Bool

-- | Process an LLVM module.
--   
--   Returns empty list on success.
pipeLlvm :: Module -> PipeLlvm -> IO [Error]

-- | What to do with program text.
data Sink

-- | Drop it on the floor.
SinkDiscard :: Sink

-- | Emit it to stdout.
SinkStdout :: Sink

-- | Write it to this file.
SinkFile :: FilePath -> Sink

-- | Emit a string to the given <a>Sink</a>.
pipeSink :: String -> Sink -> IO [Error]
