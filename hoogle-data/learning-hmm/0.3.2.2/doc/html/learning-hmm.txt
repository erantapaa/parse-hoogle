-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Yet another library for hidden Markov models
--   
@package learning-hmm
@version 0.3.2.2

module Learning.IOHMM

-- | Parameter set of the input-output hidden Markov model with discrete
--   emission. This <a>IOHMM</a> assumes that the inputs affect only the
--   transition probabilities. The model schema is as follows.
--   
--   <pre>
--   x_0    x_1           x_n
--           |             |
--           v             v
--   z_0 -&gt; z_1 -&gt; ... -&gt; z_n
--    |      |             |
--    v      v             v
--   y_0    y_1           y_n
--   
--   </pre>
--   
--   Here, <tt>[x_0, x_1, ..., x_n]</tt> are given inputs, <tt>[z_0, z_1,
--   ..., z_n]</tt> are hidden states, and <tt>[y_0, y_1, ..., y_n]</tt>
--   are observed outputs. <tt>z_0</tt> is determined by the
--   <a>initialStateDist</a>. For <tt>i = 1, ..., n</tt>, <tt>z_i</tt> is
--   determined by the <a>transitionDist</a> conditioned by <tt>x_i</tt>
--   and <tt>z_{i-1}</tt>. For <tt>i = 0, ..., n</tt>, <tt>y_i</tt> is
--   determined by the <a>emissionDist</a> conditioned by <tt>z_i</tt>.
data IOHMM i s o
IOHMM :: [i] -> [s] -> [o] -> Categorical Double s -> (i -> s -> Categorical Double s) -> (s -> Categorical Double o) -> IOHMM i s o
inputs :: IOHMM i s o -> [i]
states :: IOHMM i s o -> [s]
outputs :: IOHMM i s o -> [o]

-- | Categorical distribution of initial state
initialStateDist :: IOHMM i s o -> Categorical Double s

-- | Categorical distribution of next state conditioned by the input and
--   previous state
transitionDist :: IOHMM i s o -> i -> s -> Categorical Double s

-- | Categorical distribution of output conditioned by the hidden state
emissionDist :: IOHMM i s o -> s -> Categorical Double o
type LogLikelihood = Double

-- | <tt>init inputs states outputs</tt> returns a random variable of
--   models with the <tt>inputs</tt>, <tt>states</tt>, and
--   <tt>outputs</tt>, wherein parameters are sampled from uniform
--   distributions.
init :: (Eq i, Eq s, Eq o) => [i] -> [s] -> [o] -> RVar (IOHMM i s o)

-- | <tt>withEmission model xs ys</tt> returns a model in which the
--   <a>emissionDist</a> is updated by re-estimations using the inputs
--   <tt>xs</tt> and outputs <tt>ys</tt>. The <a>emissionDist</a> is set to
--   be normalized histograms each of which is calculated from
--   segumentations of <tt>ys</tt> based on the Viterbi state path. If the
--   lengths of <tt>xs</tt> and <tt>ys</tt> are different, the longer one
--   is cut by the length of the shorter one.
withEmission :: (Eq i, Eq s, Eq o) => IOHMM i s o -> [i] -> [o] -> IOHMM i s o

-- | Return the Euclidean distance between two models that have the same
--   inputs, states, and outputs.
euclideanDistance :: (Eq i, Eq s, Eq o) => IOHMM i s o -> IOHMM i s o -> Double

-- | <tt>viterbi model xs ys</tt> performs the Viterbi algorithm using the
--   inputs <tt>xs</tt> and outputs <tt>ys</tt>, and returns the most
--   likely state path and its log likelihood. If the lengths of
--   <tt>xs</tt> and <tt>ys</tt> are different, the longer one is cut by
--   the length of the shorter one.
viterbi :: (Eq i, Eq s, Eq o) => IOHMM i s o -> [i] -> [o] -> ([s], LogLikelihood)

-- | <tt>baumWelch model xs ys</tt> iteratively performs the Baum-Welch
--   algorithm using the inputs <tt>xs</tt> and outputs <tt>ys</tt>, and
--   returns a list of updated models and their corresponding log
--   likelihoods. If the lengths of <tt>xs</tt> and <tt>ys</tt> are
--   different, the longer one is cut by the length of the shorter one.
baumWelch :: (Eq i, Eq s, Eq o) => IOHMM i s o -> [i] -> [o] -> [(IOHMM i s o, LogLikelihood)]

-- | <tt>baumWelch' model xs</tt> performs the Baum-Welch algorithm using
--   the inputs <tt>xs</tt> and outputs <tt>ys</tt>, and returns a model
--   locally maximizing its log likelihood.
baumWelch' :: (Eq i, Eq s, Eq o) => IOHMM i s o -> [i] -> [o] -> (IOHMM i s o, LogLikelihood)

-- | <tt>simulate model xs</tt> generates a Markov process coinciding with
--   the inputs <tt>xs</tt> using the <tt>model</tt>, and returns its state
--   path and observed outputs.
simulate :: IOHMM i s o -> [i] -> RVar ([s], [o])
instance (Show i, Show s, Show o) => Show (IOHMM i s o)

module Learning.HMM

-- | Parameter set of the hidden Markov model with discrete emission. The
--   model schema is as follows.
--   
--   <pre>
--   z_0 -&gt; z_1 -&gt; ... -&gt; z_n
--    |      |             |
--    v      v             v
--   x_0    x_1           x_n
--   
--   </pre>
--   
--   Here, <tt>[z_0, z_1, ..., z_n]</tt> are hidden states and <tt>[x_0,
--   x_1, ..., x_n]</tt> are observed outputs. <tt>z_0</tt> is determined
--   by the <a>initialStateDist</a>. For <tt>i = 1, ..., n</tt>,
--   <tt>z_i</tt> is determined by the <a>transitionDist</a> conditioned by
--   <tt>z_{i-1}</tt>. For <tt>i = 0, ..., n</tt>, <tt>x_i</tt> is
--   determined by the <a>emissionDist</a> conditioned by <tt>z_i</tt>.
data HMM s o
HMM :: [s] -> [o] -> Categorical Double s -> (s -> Categorical Double s) -> (s -> Categorical Double o) -> HMM s o
states :: HMM s o -> [s]
outputs :: HMM s o -> [o]

-- | Categorical distribution of initial state
initialStateDist :: HMM s o -> Categorical Double s

-- | Categorical distribution of next state conditioned by the previous
--   state
transitionDist :: HMM s o -> s -> Categorical Double s

-- | Categorical distribution of output conditioned by the hidden state
emissionDist :: HMM s o -> s -> Categorical Double o
type LogLikelihood = Double

-- | <tt>init states outputs</tt> returns a random variable of models with
--   the <tt>states</tt> and <tt>outputs</tt>, wherein parameters are
--   sampled from uniform distributions.
init :: (Eq s, Eq o) => [s] -> [o] -> RVar (HMM s o)

-- | <tt>model `withEmission` xs</tt> returns a model in which the
--   <a>emissionDist</a> is updated by re-estimations using the observed
--   outputs <tt>xs</tt>. The <a>emissionDist</a> is set to be normalized
--   histograms each of which is calculated from segumentations of
--   <tt>xs</tt> based on the Viterbi state path.
withEmission :: (Eq s, Eq o) => HMM s o -> [o] -> HMM s o

-- | Return the Euclidean distance between two models that have the same
--   states and outputs.
euclideanDistance :: (Eq s, Eq o) => HMM s o -> HMM s o -> Double

-- | <tt>viterbi model xs</tt> performs the Viterbi algorithm using the
--   observed outputs <tt>xs</tt>, and returns the most likely state path
--   and its log likelihood.
viterbi :: (Eq s, Eq o) => HMM s o -> [o] -> ([s], LogLikelihood)

-- | <tt>baumWelch model xs</tt> iteratively performs the Baum-Welch
--   algorithm using the observed outputs <tt>xs</tt>, and returns a list
--   of updated models and their corresponding log likelihoods.
baumWelch :: (Eq s, Eq o) => HMM s o -> [o] -> [(HMM s o, LogLikelihood)]

-- | <tt>baumWelch' model xs</tt> performs the Baum-Welch algorithm using
--   the observed outputs <tt>xs</tt>, and returns a model locally
--   maximizing its log likelihood.
baumWelch' :: (Eq s, Eq o) => HMM s o -> [o] -> (HMM s o, LogLikelihood)

-- | <tt>simulate model t</tt> generates a Markov process of length
--   <tt>t</tt> using the <tt>model</tt>, and returns its state path and
--   outputs.
simulate :: HMM s o -> Int -> RVar ([s], [o])
instance (Show s, Show o) => Show (HMM s o)
