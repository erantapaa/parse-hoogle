-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Type-level serialization of type constructors
--   
--   Any <tt>type-spine</tt>-enabled type constructor can be converted to a
--   unique <tt>type-digits</tt> type-level numeral.
@package type-cereal
@version 0.3


-- | Type-level serialization (i.e. type -&gt; <tt>type-digit</tt>
--   type-level numeral).
module Type.Serialize.Base

-- | <tt>Serialize</tt> maps a type to its unique type-level serialization.

-- | Encode uses the <tt>cereal</tt> package serializer to encode the value
--   and then uses <tt>type-digits</tt> to reflect it as a type-level
--   numeral.
encode :: Serialize a => a -> Type

-- | Generates the <tt>Serialize</tt> instance corresponding to the
--   serialization of the type constructor's globally unique name (i.e.
--   TH's <tt>NameG</tt>).
serializeType_data :: Name -> Q [Dec]
serializeType_pro :: Name -> Q [Dec]
serializeType_ :: Monad m => (Name -> Type) -> Name -> m [Dec]

-- | <tt>serializeType</tt> can result in very large types, so we prefer
--   the <tt>data-hash</tt> hash of the <tt>NameG</tt>'s serialization.
serializeTypeAsHash_data :: Name -> Q [Dec]
serializeTypeAsHash_pro :: Name -> Q [Dec]
serializeTypeAsHash_ :: Monad m => (Name -> Type) -> Name -> m [Dec]


-- | Type-level serialization for the basic types: Bool, Char, Either, etc.
module Type.Serialize
