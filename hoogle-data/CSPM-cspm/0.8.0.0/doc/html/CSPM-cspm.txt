-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | cspm command line tool for analyzing CSPM specifications.
--   
@package CSPM-cspm
@version 0.8.0.0


module CSPM.LTS.LTS
data LtsNode
LtsNode :: !Digest -> Process -> LtsNode
nodeDigest :: LtsNode -> !Digest
nodeProcess :: LtsNode -> Process
mkLtsNode :: Process -> LtsNode
type LTS = Map LtsNode [Rule INT]

-- | Compute the hash value of an LTS. (Warning: This does not include
--   entry process)
hashLTS :: LTS -> Digest
instance Typeable LtsNode
instance Show LtsNode
instance Eq LtsNode
instance Ord LtsNode


-- | Search the state-space of a CSPM process for deadlock states
module CSPM.LTS.Deadlock

-- | Search the statespace of a process for deadlock states. returns the
--   shortes trace to a deadlock.
findDeadlock :: Sigma INT -> Process INT -> Maybe [Rule INT]


-- | Convert an AST to XML
module Language.CSPM.AstToXML

-- | Translate a Module to XML
moduleToXML :: Module a -> Element

-- | Translate an AST node to an XML Element. This is an <tt>almost</tt>
--   totally generic translation which works for any Haskell type, but it
--   handles some special cases.
astToXML :: Data a => a -> Element

-- | Adds the <a>?xml?</a> header.
showTopElement :: Element -> String


module CSPM.Assert
checkFileAsserts :: FilePath -> Bool -> IO [AssertResult]
formatAssertResults :: [AssertResult] -> Doc


-- | dump a Lts as a Dot-file todo : completely rewrite (use dot-library)
module CSPM.LTS.ToDot

-- | Dump a LTS as a .dot-file.
mkDotFile :: FilePath -> LTS -> IO ()


module CSPM.LTS.ToCsp

-- | Translate an LTS to a CSP specification suitable for reloading it with
--   FDR.
ltsToCsp :: Process INT -> LTS -> Doc


-- | Compute the labled transition system of a process. Uses depth first
--   search and runs in the IO-Monad. A Timeout can be set and the function
--   can return a partial LTS
module CSPM.LTS.MkLtsDFS

-- | perform one iteration of the DFS loop
dfsStep :: Sigma INT -> DFSState -> (DFSState, Bool)

-- | Generate an LTS with a DFS

-- | <i>Warning: mkLts leaks memory: TODO : fix this</i>
mkLtsDFS :: Bool -> Maybe Double -> Sigma INT -> Process INT -> IO (LTS, Bool)


-- | Compute the labled transition system of a process.
module CSPM.LTS.MkLtsPar

-- | Compute the LTS of a Process using parallel strategies
mkLtsPar :: Sigma INT -> Process INT -> LTS


-- | A Lua interface for the CSPM tool.
module CSPM.Lua
runLua :: String -> String -> [String] -> IO ()


-- | ExceptionHandler for the command line interface
module Main.ExceptionHandler

-- | The top-level exception handler.
handleException :: IO () -> IO ()


-- | Argument parser for the command line interface
module Main.Args
data Args
Info :: Bool -> Args
verbose :: Args -> Bool
Eval :: Maybe FilePath -> String -> Bool -> Args
evalContext :: Args -> Maybe FilePath
evalExpr :: Args -> String
verbose :: Args -> Bool
Trace :: FilePath -> String -> Bool -> Args
src :: Args -> FilePath
entry :: Args -> String
verbose :: Args -> Bool
LTS :: FilePath -> Maybe Double -> Bool -> String -> Maybe FilePath -> Maybe FilePath -> Bool -> Args
src :: Args -> FilePath
timeout :: Args -> Maybe Double
dfs :: Args -> Bool
entry :: Args -> String
fdrOut :: Args -> Maybe FilePath
dotOut :: Args -> Maybe FilePath
verbose :: Args -> Bool
Assert :: FilePath -> Bool -> Args
src :: Args -> FilePath
verbose :: Args -> Bool
Translate :: FilePath -> Bool -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Args
src :: Args -> FilePath
rename :: Args -> Bool
xmlOut :: Args -> Maybe FilePath
prettyOut :: Args -> Maybe FilePath
addUnicode :: Args -> Maybe FilePath
removeUnicode :: Args -> Maybe FilePath
prologOut :: Args -> Maybe FilePath
Lua :: FilePath -> [String] -> Args
file :: Args -> FilePath
rest :: Args -> [String]

-- | Command line argument parser using cmdargs library.
argParser :: Mode (CmdArgs Args)
instance Typeable Args
instance Data Args
instance Show Args
instance Eq Args


-- | Comand line interface for the CSPM tools.
module Main.ExecCommand

-- | execute the command according to command line arguments
execCommand :: Args -> IO ()
mkProcess :: FilePath -> String -> IO (Process, Sigma)
instance FShow INT
instance CSP2 INT
instance CSP1 INT
instance EqOrd INT
