-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple sentence segmenter
--   
--   FullStop splits texts into sentences, using some orthographical
--   conventions (used in English and hopefully other languages).
--   
--   It recognises certain punctuation characters as sentence delimiters
--   (<tt>.?!</tt>) and handles some abbreviations such as <tt>Mr.</tt> and
--   decimal numbers (eg. <tt>4.2</tt>).
--   
--   Note that this package is mostly a placeholder. I hope the Haskell/NLP
--   communities will run with it and upload a more sophisticated (family
--   of) segmenter(s) in its place. Patches (and new maintainers) would be
--   greeted with delight!
@package fullstop
@version 0.1.4


-- | Strings whose internal <a>.</a> should not be treated as sentence
--   boundaries
module NLP.FullStop.Ignore
titles :: [String]
abbreviations :: [String]
initials :: [String]

module NLP.FullStop

-- | <a>segment</a> <tt>s</tt> splits <tt>s</tt> into a list of sentences.
--   
--   It looks for punctuation characters that indicate an end-of-sentence
--   and tries to ignore some uses of puncuation which do not correspond to
--   ends of sentences
--   
--   It's a good idea to view the source code to this module, especially
--   the test suite.
--   
--   I imagine this sort of task is actually ambiguous and that you
--   actually won't be able to write an exact segmenter.
--   
--   It may be a good idea to go see the literature on how to do
--   segmentation right, maybe implement something which returns the N most
--   probable segmentations instead.
segment :: String -> [String]
