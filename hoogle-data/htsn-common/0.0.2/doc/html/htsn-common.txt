-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Display/logging facilities used by both htsn and htsn-import.
--   
--   This library contains three modules,
--   
--   <ul>
--   <li>Network.Services.TSN.Logging</li>
--   <li>Network.Services.TSN.Report</li>
--   <li>Network.Services.TSN.Terminal</li>
--   </ul>
--   
--   They work together to provide "reporting" for the htsn and htsn-import
--   executables which both display and log things in the same way.
--   
--   The Network.Services.TSN.Logging module allows the application to log
--   to syslog, a file, or both. Four convenience functions are provided to
--   log messages at each priority: error, debug, info, and warn.
--   
--   The Network.Services.TSN.Terminal provides similar functions that
--   instead display messages on the console (terminal). The output is
--   color-coded according to the severity of the message.
--   
--   The Network.Services.TSN.Report modules contains convenience functions
--   that both log and display informational message. This is what an
--   (optionally interactive) application will usually want to do.
@package htsn-common
@version 0.0.2


-- | Terminal output functions for displaying informational messages. The
--   output is color-coded according to severity, and is designed at the
--   moment for consoles with a dark background.
module Network.Services.TSN.Terminal

-- | Display debug text on the console. Don't automatically append a
--   newline in case the raw text is needed for, uh, debugging. The text
--   color is not altered.
display_debug :: String -> IO ()

-- | Display an error on the console in red. Uses stderr instead of stdout.
display_error :: String -> IO ()

-- | Display an informational message on the console in cyan.
display_info :: String -> IO ()

-- | Display text sent to the feed on the console. Don't automatically
--   append a newline.
display_sent :: String -> IO ()

-- | Display a warning on the console in yello. Uses stderr instead of
--   stdout.
display_warning :: String -> IO ()


-- | Provide convenience functions for logging to the HSLogger "root"
--   logger.
module Network.Services.TSN.Logging

-- | Set up the logging. All logs are handled by the global "root" logger
--   provided by HSLogger. We remove all of its handlers so that it does
--   nothing; then we conditionally add back two handlers -- one for
--   syslog, and one for a normal file -- dependent upon the
--   <tt>syslog</tt> and <tt>log_file</tt> arguments.
--   
--   If <tt>syslog</tt> is <a>False</a> and <tt>log_file</tt> is
--   <a>Nothing</a>; then nothing will be logged and the <tt>log_level</tt>
--   will essentially be ignored (even though the root logger will have its
--   level set).
init_logging :: Priority -> Maybe FilePath -> Bool -> IO ()

-- | Log a message at the <tt>DEBUG</tt> level.
log_debug :: String -> IO ()

-- | Log a message at the <tt>ERROR</tt> level.
log_error :: String -> IO ()

-- | Log a message at the <a>INFO</a> level.
log_info :: String -> IO ()

-- | Log a message at the <tt>WARNING</tt> level.
log_warning :: String -> IO ()


-- | Convenience functions for reporting (displaying and/or logging) status
--   messages.
module Network.Services.TSN.Report

-- | Display and log debug information. WARNING! This does not
--   automatically append a newline. The output is displayed/logged as-is,
--   for, you know, debug purposes.
report_debug :: String -> IO ()

-- | Display and log an error condition. This will prefix the error with
--   "ERROR: " when displaying (but not logging) it so that it stands out.
report_error :: String -> IO ()

-- | Display and log an informational (status) message.
report_info :: String -> IO ()

-- | Display and log a warning. This will prefix the warning with "WARNING:
--   " when displaying (but not logging) it so that it stands out.
report_warning :: String -> IO ()
