-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monoidally construct web pages
--   
@package web-page
@version 0.1.0


-- | A widget is a self-contained web page component represented by the
--   <a>Widget</a> type. This type is a family of monoids, so you can use
--   it together with a writer monad.
module Web.Page.Widget

-- | A widget is a self-contained fragment of a web page together with its
--   scripts and styles. This type is inspired by Yesod's widgets, but is
--   supposed to be constructed by using a writer monad and may not denote
--   effects of its own.
--   
--   To construct widgets through a writer monad, use lens combinators like
--   <a>scribe</a> and <a>censoring</a>. Alternatively you can use the
--   <tt>add*</tt> functions like <a>addSection</a> or <a>addStyle</a>. The
--   title is constructed by using <a>withTitle</a> and <a>setTitle</a>.
--   This allows you to have a hierarchy of titles with a site title, a
--   page title and even a component title.
--   
--   The first type argument is the key type for the individual body
--   sections of the resulting document. You can use it for example to
--   divide your document into a header, a menu, a content area and a
--   footer and each widget can add to them individually.
--   
--   The second type argument is the type of URLs. You may use it for
--   type-safe routing.
data Widget k url
Widget :: Html -> JStat -> Set url -> Map k Html -> Css -> Set url -> Last [Text] -> Widget k url

-- | Head content.
_wHead :: Widget k url -> Html

-- | Inline scripts.
_wScript :: Widget k url -> JStat

-- | External scripts.
_wScriptLinks :: Widget k url -> Set url

-- | Contents of body sections.
_wSections :: Widget k url -> Map k Html

-- | Stylesheet.
_wStyle :: Widget k url -> Css

-- | External stylesheets.
_wStyleLinks :: Widget k url -> Set url

-- | Page title chunks (outermost first).
_wTitle :: Widget k url -> Last [Text]

-- | Convenient constraint alias for widget actions.
type MonadWidget k url = MonadWriter (Widget k url)

-- | Convenient type alias for polymorphic widget actions.
type WidgetWriter k url a = forall m. MonadWidget k url m => m a

-- | Construct a widget with the given body. Use this combinator if you
--   don't need sections.
addBody :: MonadWriter (Widget () url) m => Html -> m ()

-- | Construct a widget with the given head markup.
addHead :: MonadWriter (Widget k url) m => Html -> m ()

-- | Construct a widget with the given script.
addScript :: MonadWriter (Widget k url) m => JStat -> m ()

-- | Construct a widget with the given script link.
addScriptLink :: MonadWriter (Widget k url) m => url -> m ()

-- | Construct a widget with the given body section.
addSection :: MonadWriter (Widget k url) m => k -> Html -> m ()

-- | Construct a widget with the given stylesheet.
addStyle :: MonadWriter (Widget k url) m => Css -> m ()

-- | Construct a widget with the given style link.
addStyleLink :: MonadWriter (Widget k url) m => url -> m ()

-- | Scribe the title of the widget. Use this function to construct the
--   lowest level title. For higher level titles use <a>withTitle</a>.
setTitle :: MonadWriter (Widget k url) m => Text -> m ()

-- | Prepend the given title chunk to the given widget action. Conceptually
--   this wraps the given widget in a higher level title. Use
--   <a>setTitle</a> for the lowest level title.
withTitle :: MonadWriter (Widget k url) m => Text -> m a -> m a

-- | Lens into a widget's head.
wHead :: Lens' (Widget k url) Html

-- | Lens into a widget's inline script.
wScript :: Lens' (Widget k url) JStat

-- | Lens into a widget's external scripts.
wScriptLinks :: Lens' (Widget k url) (Set url)

-- | Lens into a widget's body sections.
wSections :: Lens' (Widget k url) (Map k Html)

-- | Lens into a widget's inline style.
wStyle :: Lens' (Widget k url) Css

-- | Lens into a widget's external styles.
wStyleLinks :: Lens' (Widget k url) (Set url)

-- | Lens into a widget's title.
wTitle :: Lens' (Widget k url) (Last [Text])
instance Typeable Widget
instance Foldable (Widget k)
instance (Ord k, Ord url) => Monoid (Widget k url)


-- | This module provides the functionality to render web pages. This is
--   the process to construct and then render a web page:
--   
--   <ol>
--   <li>Use a writer monad to construct a <a>Widget</a>, which represents
--   a web page component and is usually constructed from multiple smaller
--   components,</li>
--   <li>use one of the rendering functions to render a widget to a
--   <a>Page</a>, which represents a rendered web page, but still abstracts
--   over the exact set of documents (everything inline or a set of
--   separate documents for markup, script and style),</li>
--   <li>turn the page into a set of documents that you can deliver to the
--   client, for example by using <a>inlinePage</a>.</li>
--   </ol>
--   
--   The motivation for rendering to separate documents is that most web
--   pages consist of dynamic markup, but the stylesheet and script is
--   mostly static. The way <a>Page</a> works you can have widgets with
--   batteries included and still render to separate documents to utilise
--   the client's cache better.
--   
--   Helper functions for doing that are defined in this module, but
--   framework-specific support is necessary to make this work.
module Web.Page.Render

-- | Rendered pages. This type supports rendering to multiple documents
--   like an HTML document, as explained above.
--   
--   If you're running a low-traffic site and don't want to afford the
--   complexity, then you can just include the stylesheets and scripts
--   inline by using the <a>inlinePage</a> function. Except for external
--   script and style URLs this will give you a self-contained document
--   that you can deliver to the client.
--   
--   The <a>pageHtml</a> field is the function that takes the markup for
--   the script and the style respectively and returns a lazy bytestring
--   that you can send as <tt>text/html</tt> to the client. The other two
--   fields are the rendered script and stylesheet. The markup is
--   UTF-8-encoded, which you should indicate in the <tt>content-type</tt>
--   header, if you deliver via HTTP.
data Page
Page :: (Html -> Html -> ByteString) -> Text -> Text -> Page

-- | Markup document.
pageHtml :: Page -> Html -> Html -> ByteString

-- | Page script.
pageScript :: Page -> Text

-- | Page stylesheet.
pageStyle :: Page -> Text

-- | This is the most general rendering function for widgets.
renderWidget :: Ord k => [k] -> ([Text] -> Text) -> Widget k Text -> Page

-- | Render the given page to a single self-contained document, including
--   the script and stylesheet inline.
inlinePage :: Page -> ByteString


module Web.Page
