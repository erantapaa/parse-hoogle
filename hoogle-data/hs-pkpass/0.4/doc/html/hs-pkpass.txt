-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for Passbook pass creation & signing
--   
--   A Haskell library for type-safe creation of Passbook passes and
--   signing through Apple's signpass tool.
@package hs-pkpass
@version 0.4


-- | This module provides types and functions for type-safe generation of
--   PassBook's <tt>pass.json</tt> files.
--   
--   This is a complete implementation of the Passbook Package Format
--   Reference, available at
--   <a>https://developer.apple.com/library/ios/#documentation/UserExperience/Reference/PassKit_Bundle/Chapters/Introduction.html</a>.
--   
--   It ensures that passes are created correctly wherever possible.
--   Currently, NSBundle localization is not supported.
module Passbook.Types

-- | Auxiliary type to ensure that field values are rendered correctly
data PassValue
PassInt :: Integer -> PassValue
PassDouble :: Double -> PassValue
PassDate :: UTCTime -> PassValue
PassText :: Text -> PassValue

-- | A single pass field. The type <a>PassValue</a> holds the fields value
--   and ensures that the JSON output is compatible with Passbook. To
--   create a very simple key/value field containing text you can use the
--   <a>mkSimpleField</a> function.
data PassField
PassField :: Maybe Text -> Text -> Maybe Text -> Maybe Alignment -> PassValue -> Maybe DateTimeStyle -> Maybe DateTimeStyle -> Maybe Bool -> Maybe Text -> Maybe NumberStyle -> PassField

-- | Message displayed when the pass is updated. May contain the
--   <tt>%@</tt> placeholder for the value. (optional)
changeMessage :: PassField -> Maybe Text

-- | Must be a unique key within the scope of the pass (e.g.
--   "departure-gate") (required)
key :: PassField -> Text

-- | Label text for the field. (optional)
label :: PassField -> Maybe Text

-- | Alignment for the field's contents. Not allowed for primary fields.
--   (optional)
textAlignment :: PassField -> Maybe Alignment

-- | Value of the field. Must be a string, ISO 8601 date or a number.
--   (required)
value :: PassField -> PassValue

-- | Style of date to display (optional)
dateStyle :: PassField -> Maybe DateTimeStyle

-- | Style of time to display (optional)
timeStyle :: PassField -> Maybe DateTimeStyle

-- | Is the date/time displayed relative to the current time or absolute?
--   Default: <tt>False</tt> (optional)
isRelative :: PassField -> Maybe Bool

-- | ISO 4217 currency code for the field's value (optional)
currencyCode :: PassField -> Maybe Text

-- | Style of number to display. See <tt>NSNumberFormatterStyle</tt> docs
--   for more information. (optional)
numberStyle :: PassField -> Maybe NumberStyle

-- | The type of a pass including its fields
data PassType
BoardingPass :: TransitType -> PassContent -> PassType
Coupon :: PassContent -> PassType
Event :: PassContent -> PassType
GenericPass :: PassContent -> PassType
StoreCard :: PassContent -> PassType

-- | The fields within a pass
data PassContent
PassContent :: [PassField] -> [PassField] -> [PassField] -> [PassField] -> [PassField] -> PassContent

-- | Fields to be displayed on the front of the pass. Always shown in the
--   stack.
headerFields :: PassContent -> [PassField]

-- | Fields to be displayed prominently on the front of the pass.
primaryFields :: PassContent -> [PassField]

-- | Fields to be displayed on the front of the pass.
secondaryFields :: PassContent -> [PassField]

-- | Additional fields to be displayed on the front of the pass.
auxiliaryFields :: PassContent -> [PassField]

-- | Fields to be on the back of the pass.
backFields :: PassContent -> [PassField]

-- | A complete pass
data Pass
Pass :: Text -> Text -> Text -> Text -> Text -> [Text] -> [Location] -> Maybe RelevantDate -> Maybe Barcode -> Maybe RGBColor -> Maybe RGBColor -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe WebService -> PassType -> Pass

-- | Brief description of the pass (required)
description :: Pass -> Text

-- | Display name of the organization that signed the pass (required)
organizationName :: Pass -> Text

-- | Pass type identifier, as issued by Apple (required)
passTypeIdentifier :: Pass -> Text

-- | Unique serial number for the pass (required)
serialNumber :: Pass -> Text

-- | Team identifier for the organization (required)
teamIdentifier :: Pass -> Text

-- | A list of iTunes Store item identifiers for associated apps (optional)
associatedStoreIdentifiers :: Pass -> [Text]

-- | Locations where the pass is relevant (e.g. that of a store) (optional)
locations :: Pass -> [Location]

-- | ISO 8601 formatted date for when the pass becomes relevant (optional)
relevantDate :: Pass -> Maybe RelevantDate

-- | Barcode information (optional)
barcode :: Pass -> Maybe Barcode

-- | Background color of the pass (optional)
backgroundColor :: Pass -> Maybe RGBColor

-- | Foreground color of the pass (optional)
foregroundColor :: Pass -> Maybe RGBColor

-- | Color of the label text. If omitted, the color is determined
--   automatically. (optional)
labelColor :: Pass -> Maybe Text

-- | Text displayed next to the logo on the pass (optional)
logoText :: Pass -> Maybe Text

-- | If <tt>True</tt>, the strip image is displayed without a shine effect.
--   (optional)
suppressStripShine :: Pass -> Maybe Bool

-- | Contains the authentication token (16 characters or longer) and the
--   API end point for a Web Service
webService :: Pass -> Maybe WebService

-- | The kind of pass and the passes' fields (required)
passContent :: Pass -> PassType
newtype RelevantDate
RelevantDate :: UTCTime -> RelevantDate

-- | A location field
data Location
Location :: Double -> Double -> Maybe Double -> Maybe Text -> Location

-- | Latitude, in degrees, of the location (required)
latitude :: Location -> Double

-- | Longitude, in degrees, of the location (required)
longitude :: Location -> Double

-- | Altitude, in meters, of the location (optional)
altitude :: Location -> Maybe Double

-- | Text displayed on the lock screen when the pass is relevant (optional)
relevantText :: Location -> Maybe Text

-- | A simple RGB color value. In combination with the <a>rgb</a> function
--   this can be written just like in CSS, e.g. <tt>rgb(43, 53, 65)</tt>.
--   The <a>rgb</a> function also ensures that the provided values are
--   valid.
data RGBColor

-- | Barcode is constructed by a Barcode format, an encoding type and the
--   Barcode message.
data BarcodeFormat
QRCode :: BarcodeFormat
PDF417 :: BarcodeFormat
Aztec :: BarcodeFormat

-- | A pass barcode. In most cases the helper function <a>mkBarcode</a>
--   should be sufficient.
data Barcode
Barcode :: Maybe Text -> BarcodeFormat -> Text -> Text -> Barcode

-- | Text displayed near the barcode (optional)
altText :: Barcode -> Maybe Text

-- | Barcode format (required)
format :: Barcode -> BarcodeFormat

-- | Message / payload to be displayed as a barcode (required)
message :: Barcode -> Text

-- | Barcode encoding. Default in the mkBarcode functions is iso-8859-1
--   (required)
messageEncoding :: Barcode -> Text

-- | Pass field alignment
data Alignment
LeftAlign :: Alignment
Center :: Alignment
RightAlign :: Alignment
Natural :: Alignment

-- | Pass field date/time display style
data DateTimeStyle

-- | Corresponds to <tt>NSDateFormatterNoStyle</tt>
None :: DateTimeStyle

-- | Corresponds to <tt>NSDateFormatterShortStyle</tt>
Short :: DateTimeStyle

-- | Corresponds to <tt>NSDateFormatterMediumStyle</tt>
Medium :: DateTimeStyle

-- | Corresponds to <tt>NSDateFormatterLongStyle</tt>
Long :: DateTimeStyle

-- | Corresponds to <tt>NSDateFormatterFullStyle</tt>
Full :: DateTimeStyle

-- | Pass field number display style
data NumberStyle
Decimal :: NumberStyle
Percent :: NumberStyle
Scientific :: NumberStyle
SpellOut :: NumberStyle

-- | BoardingPass transit type. Only necessary for Boarding Passes.
data TransitType
Air :: TransitType
Boat :: TransitType
Bus :: TransitType
Train :: TransitType
GenericTransit :: TransitType
data WebService
WebService :: Text -> Text -> WebService

-- | Authentication token for use with the web service. Must be 16
--   characters or longer (optional)
authenticationToken :: WebService -> Text

-- | The URL of a web service that conforms to the API described in the
--   Passbook Web Service Reference (optional)
webServiceURL :: WebService -> Text

-- | The manifest.json file
data Manifest

-- | (Filename, Hash)
Manifest :: [(Text, Text)] -> Manifest

-- | Creates a <tt>Just RGBColor</tt> if all supplied numbers are between 0
--   and 255.
rgb :: (Int, Int, Int) -> Maybe RGBColor

-- | This function takes a <a>Text</a> and a <a>BarcodeFormat</a> and uses
--   the text for both the barcode message and the alternative text.
mkBarcode :: Text -> BarcodeFormat -> Barcode

-- | Creates a simple <a>PassField</a> with just a key, a value and an
--   optional label. All the other optional fields are set to
--   <a>Nothing</a>.
mkSimpleField :: Text -> PassValue -> Maybe Text -> PassField
instance FromJSON Pass
instance FromJSON PassType
instance FromJSON RGBColor
instance FromJSON PassContent
instance FromJSON RelevantDate
instance FromJSON PassField
instance FromJSON PassValue
instance FromJSON Barcode
instance FromJSON Location
instance FromJSON TransitType
instance FromJSON BarcodeFormat
instance FromJSON NumberStyle
instance FromJSON DateTimeStyle
instance FromJSON Alignment
instance ToJSON RelevantDate
instance ToJSON PassValue
instance ToJSON TransitType
instance ToJSON NumberStyle
instance ToJSON DateTimeStyle
instance ToJSON Alignment
instance ToJSON BarcodeFormat
instance ToJSON RGBColor
instance ToJSON PassType
instance ToJSON Pass
instance ToJSON PassField
instance ToJSON Barcode
instance ToJSON Location
instance ToJSON PassContent
instance Typeable PassValue
instance Typeable RelevantDate
instance Typeable Location
instance Typeable RGBColor
instance Typeable BarcodeFormat
instance Typeable Barcode
instance Typeable Alignment
instance Typeable DateTimeStyle
instance Typeable NumberStyle
instance Typeable PassField
instance Typeable TransitType
instance Typeable WebService
instance Typeable PassContent
instance Typeable PassType
instance Typeable Pass
instance Eq PassValue
instance Ord PassValue
instance Show PassValue
instance Read PassValue
instance Eq RelevantDate
instance Ord RelevantDate
instance Show RelevantDate
instance Read RelevantDate
instance Eq Location
instance Ord Location
instance Show Location
instance Read Location
instance Eq RGBColor
instance Ord RGBColor
instance Show RGBColor
instance Read RGBColor
instance Eq BarcodeFormat
instance Ord BarcodeFormat
instance Show BarcodeFormat
instance Read BarcodeFormat
instance Eq Barcode
instance Ord Barcode
instance Show Barcode
instance Read Barcode
instance Eq Alignment
instance Ord Alignment
instance Show Alignment
instance Read Alignment
instance Eq DateTimeStyle
instance Ord DateTimeStyle
instance Show DateTimeStyle
instance Read DateTimeStyle
instance Eq NumberStyle
instance Ord NumberStyle
instance Show NumberStyle
instance Read NumberStyle
instance Eq PassField
instance Ord PassField
instance Show PassField
instance Read PassField
instance Eq TransitType
instance Ord TransitType
instance Show TransitType
instance Read TransitType
instance Eq WebService
instance Ord WebService
instance Show WebService
instance Read WebService
instance Eq PassContent
instance Ord PassContent
instance Show PassContent
instance Read PassContent
instance Eq PassType
instance Ord PassType
instance Show PassType
instance Read PassType
instance Eq Pass
instance Ord Pass
instance Show Pass
instance Read Pass
instance ToJSON Manifest


-- | This module provides different functions to sign a Passbook
--   <a>Pass</a>.
--   
--   <i>Please read the documentation!</i>
--   
--   One set of functions uses the <tt>signpass</tt> tool included in
--   Apple's Passbook Support Materials to sign the pass. This uses the
--   system keychain directly, but works on OS X only.
--   
--   The other set of functions uses OpenSSL instead, in this case you need
--   to export your certificate using the process described in the OpenSSL
--   section of this document.
--   
--   If you want to use this module with an existing .pkpass file, you can
--   import it using the function <a>loadPass</a>. Please note that you
--   still need to provide the assets in a separate directory,
--   <a>loadPass</a> only parses the <tt>pass.json</tt> file.
--   
--   Using these function is very simple, assuming you have created a
--   <a>Pass</a> called <tt>myPass</tt> and you have the related assets
--   (e.g. the logo.png and icon.png files) stored in a folder named
--   <tt>myPass/</tt>.
--   
--   You want the signed pass to be stored in a folder called
--   <tt>passes/</tt>. You call <a>signpass</a> like this:
--   
--   <pre>
--   (path, passId) &lt;- signpass "myPass" "passes" myPass
--   </pre>
--   
--   You will find the pass at <tt>path</tt> with the filename
--   <tt>passId.pkpass</tt>. Using the types from <a>Passbook.Types</a>
--   ensures that passes are generated correctly.
--   
--   Please note that an <tt>icon.png</tt> file <i>must be</i> present in
--   your asset folder, otherwise the generated pass will not work. This is
--   <i>not</i> checked by this module.
--   
--   Refer to Apple's Passbook documentation at
--   <a>https://developer.apple.com/passbook/</a> for more information or
--   to retrieve the <tt>signpass</tt> tool which is included in the
--   Passbook Support Materials. (iOS Developer Membership necessary)
module Passbook

-- | Takes the filepaths to the folder containing the path assets and the
--   output folder, a <a>Pass</a> and uses a random UUID to create and sign
--   the pass.
--   
--   <i>Important:</i> OS X only!
signpass :: FilePath -> FilePath -> Pass -> IO (FilePath, Text)

-- | Signs the <a>Pass</a> using the provided ID, no random UUID generation
--   happens here.
--   
--   <i>Important:</i> OS X only!
signpassWithId :: Text -> FilePath -> FilePath -> Pass -> IO FilePath

-- | Works like <a>signpass</a>, except for the fourth argument which is a
--   modifier function that updates the pass with the generated UUID. This
--   is useful for cases where you want to store the UUID in the barcode or
--   some other field on the pass as well.
--   
--   An example function for use with this is <a>updateBarcode</a>.
--   
--   <i>Important:</i> OS X only!
signpassWithModifier :: FilePath -> FilePath -> Pass -> (Text -> Pass -> Pass) -> IO (FilePath, Text)

-- | Takes the filepaths to the folder containing the path assets and the
--   output folder, the paths to the certificate and the key, a <a>Pass</a>
--   and uses a random UUID to create and sign the pass.
signOpen :: FilePath -> FilePath -> FilePath -> FilePath -> Pass -> IO (FilePath, Text)

-- | Works like <a>signOpen</a>, except for the fourth argument which is a
--   modifier function that updates the pass with the generated UUID. This
--   is useful for cases where you want to store the UUID in the barcode or
--   some other field on the pass as well.
--   
--   An example function for use with this is <a>updateBarcode</a>.
signOpenWithModifier :: FilePath -> FilePath -> FilePath -> FilePath -> Pass -> (Text -> Pass -> Pass) -> IO (FilePath, Text)

-- | Signs the <a>Pass</a> using the provided ID, no random UUID generation
--   happens here.
signOpenWithId :: FilePath -> FilePath -> FilePath -> FilePath -> Pass -> Text -> IO FilePath

-- | Generates a random UUID for a Pass using <a>Data.UUID</a> and
--   <a>System.Random</a>
genPassId :: IO Text

-- | Updates the barcode in a pass with the UUID. This can be passed to
--   <a>signpassWithModifier</a> or <a>signOpenWithModifier</a>.
updateBarcode :: Text -> Pass -> Pass

-- | Tries to parse the pass.json file contained in a .pkpass into a valid
--   <a>Pass</a>. If Passbook accepts the .pkpass file, this function
--   should never return <tt>Nothing</tt>.
loadPass :: FilePath -> IO (Maybe Pass)
