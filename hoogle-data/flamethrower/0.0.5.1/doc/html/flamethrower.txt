-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A template engine for HTML
--   
@package flamethrower
@version 0.0.5.1


-- | Contains functions to escape text for inclusion in HTML.
module Text.Flamethrower.Escape

-- | Represents a type of escaping to be applied to text.
data Escaper

-- | Perform no escaping.
None :: Escaper

-- | Escape for inclusion as content in HTML – that is, for use between
--   tags. This escapes <tt>&amp;</tt>, <tt>&lt;</tt>, and <tt>&gt;</tt>.
Content :: Escaper

-- | Escape for inclusion in a double-quoted HTML attribute value. This
--   escapes <tt>&amp;</tt> and <tt>"</tt>.
Attribute :: Escaper

-- | Converts a character into an equivalent HTML character reference if
--   necessary for it to be correctly included in a double-quoted HTML
--   attribute value. This escapes <tt>&amp;</tt> and <tt>"</tt>.
escapeAttributeCharacter :: Char -> String

-- | Converts a character into an equivalent HTML character reference if
--   necessary for it to be correctly included as content – that is,
--   between HTML tags. This escapes <tt>&amp;</tt>, <tt>&lt;</tt>, and
--   <tt>&gt;</tt>.
escapeContentCharacter :: Char -> String

-- | Converts characters in text into equivalent HTML character references
--   when necessary for the entire string to be correctly included in a
--   double-quoted HTML attribute value. This escapes <tt>&amp;</tt> and
--   <tt>"</tt>.
escapeAttributeValue :: Text -> Text

-- | Converts characters in text into equivalent HTML character references
--   when necessary for the entire string to be correctly included as
--   content – that is, between HTML tags. This escapes <tt>&amp;</tt>,
--   <tt>&lt;</tt>, and <tt>&gt;</tt>.
escapeContent :: Text -> Text

-- | Converts a character into an equivalent HTML character reference as
--   defined by the given <a>Escaper</a>.
escapeCharacter :: Escaper -> Char -> String
instance Eq Escaper
instance Show Escaper

module Text.Flamethrower.Lexer
data Context
Context :: Maybe Indent -> Context
indentType :: Context -> Maybe Indent
data Indent
Tab :: Indent
Spaces :: Int -> Indent
data Token
Indent :: Token
Newline :: Token
Element :: String -> Token
Class :: String -> Token
Attribute :: String -> Token
String :: [StringPart] -> Token
Raw :: Token
Doctype :: Token
If :: String -> Token
Else :: Token
For :: String -> String -> Token
data StringPart
Character :: Char -> StringPart
Interpolation :: String -> StringPart
isIdentifierCharacter :: Char -> Bool
lexIndent :: Context -> String -> [Token]
lexContent :: Context -> String -> [Token]
readIdentifier :: String -> (String, String)
lexIdentifier :: Context -> String -> [Token]
readLine :: String -> (String, String)
lexIf :: Context -> String -> [Token]
isHaskellVarIdCharacter :: Char -> Bool
readHaskellVarId :: String -> (String, String)
lexFor :: Context -> String -> [Token]
lexComment :: Context -> String -> [Token]
readString :: String -> ([StringPart], String)
readEscape :: String -> ([StringPart], String)
readInterpolation :: String -> ([StringPart], String)
lexString :: Context -> String -> [Token]
lexClass :: Context -> String -> [Token]
lex :: String -> [Token]
instance Show StringPart
instance Eq StringPart
instance Show Token
instance Eq Token

module Text.Flamethrower.Parser
data Node
ElementNode :: String -> [Node] -> Node
StringNode :: StringNode -> Node
AttributeNode :: String -> (Maybe StringNode) -> Node
ClassNode :: String -> Node
DoctypeNode :: Node
IfNode :: String -> [Node] -> [Node] -> Node
ForNode :: String -> String -> [Node] -> Node
data StringNode
String :: [StringPart] -> StringNode
Raw :: [StringPart] -> StringNode
isIndent :: Token -> Bool
parseInside :: Int -> [Token] -> ([Node], [Token])
parseContent :: Int -> [Token] -> ([Node], [Token])
parseRoot :: [Token] -> ([Node], [Token])
parse :: [Token] -> [Node]
instance Show StringNode
instance Eq StringNode
instance Show Node
instance Eq Node

module Text.Flamethrower.Compiler
data CodeTree
Text :: String -> CodeTree
Expression :: Escaper -> Exp -> CodeTree
If :: Exp -> [CodeTree] -> [CodeTree] -> CodeTree
For :: Name -> Exp -> [CodeTree] -> CodeTree
data Compiled
Compiled :: [CodeTree] -> [CodeTree] -> [CodeTree] -> Compiled
attributes :: Compiled -> [CodeTree]
classes :: Compiled -> [CodeTree]
content :: Compiled -> [CodeTree]
parseExp :: String -> Either String Exp
fromClasses :: [CodeTree] -> Compiled
fromAttributes :: [CodeTree] -> Compiled
fromContent :: [CodeTree] -> Compiled
stringPartToCode :: Escaper -> StringPart -> CodeTree
stringPartsToCode :: Escaper -> [StringPart] -> [CodeTree]
voidTags :: [String]
isVoid :: String -> Bool
compileNode :: Node -> Compiled
contentOnly :: Compiled -> [CodeTree]
optimized :: [CodeTree] -> [CodeTree]
compile :: [Node] -> [CodeTree]
instance Show CodeTree


-- | Contains the main quasiquoters that convert Flamethrower templates
--   into expressions.
module Text.Flamethrower

-- | A quasiquoter to convert Flamethrower templates into expressions.
--   
--   <pre>
--   exampleTemplate :: Text -&gt; Text
--   exampleTemplate title = [flamethrower|
--   doctype
--   
--   html
--       head
--           meta charset: "utf-8"
--   
--           title "#{title}"
--   
--       body
--           h1 "A page"
--   
--           p "Hello, world!"
--   |]
--   </pre>
flamethrower :: QuasiQuoter

-- | A quasiquoter that reads Flamethrower template files.
--   
--   <pre>
--   exampleTemplate :: Text -&gt; Text
--   exampleTemplate title = [flamef|example-template.flame|]
--   </pre>
flamef :: QuasiQuoter
