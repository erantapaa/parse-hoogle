-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Define data types and parse/build functions for web-routes via a quasi-quoted DSL (deprecated)
--   
--   Define data types and parse/build functions for web-routes via a
--   quasi-quoted DSL (deprecated)
@package web-routes-quasi
@version 0.7.1.1

module Web.Routes.Quasi.Classes
class SinglePiece s
fromSinglePiece :: SinglePiece s => Text -> Maybe s
toSinglePiece :: SinglePiece s => s -> Text
class MultiPiece s
fromMultiPiece :: MultiPiece s => [Text] -> Maybe s
toMultiPiece :: MultiPiece s => s -> [Text]
type Strings = [String]

module Web.Routes.Quasi.Parse

-- | A quasi-quoter to parse a string into a list of <a>Resource</a>s.
--   Checks for overlapping routes, failing if present; use
--   <a>parseRoutesNoCheck</a> to skip the checking. See documentation site
--   for details on syntax.
parseRoutes :: QuasiQuoter
parseRoutesFile :: FilePath -> Q Exp

-- | Same as <a>parseRoutes</a>, but performs no overlap checking.
parseRoutesNoCheck :: QuasiQuoter
parseRoutesFileNoCheck :: FilePath -> Q Exp

-- | A single resource pattern.
--   
--   First argument is the name of the constructor, second is the URL
--   pattern to match, third is how to dispatch.
data Resource
Resource :: String -> [Piece] -> [String] -> Resource

-- | A single piece of a URL, delimited by slashes.
--   
--   In the case of StaticPiece, the argument is the value of the piece;
--   for the other constructors, it is the name of the parameter
--   represented by this piece. That value is not used here, but may be
--   useful elsewhere.
data Piece
StaticPiece :: String -> Piece
SinglePiece :: String -> Piece
MultiPiece :: String -> Piece
instance Typeable Piece
instance Typeable Resource
instance Read Piece
instance Show Piece
instance Eq Piece
instance Data Piece
instance Read Resource
instance Show Resource
instance Eq Resource
instance Data Resource
instance Lift Piece
instance Lift Resource

module Web.Routes.Quasi.TH
createRoutes :: [THResource] -> Q [Con]

-- | Generates the set of clauses necesary to render the given
--   <a>Resource</a>s. See <tt>quasiRender</tt>.
createRender :: [THResource] -> Q [Clause]

-- | Generates the set of clauses necesary to parse the given
--   <a>Resource</a>s. See <tt>quasiParse</tt>.
createParse :: [THResource] -> Q [Clause]
createDispatch :: Exp -> Exp -> [THResource] -> Q [Clause]
data Pieces
SubSite :: Type -> Exp -> Exp -> Exp -> Exp -> [Piece] -> Pieces
ssType :: Pieces -> Type
ssParse :: Pieces -> Exp
ssRender :: Pieces -> Exp
ssDispatch :: Pieces -> Exp
ssToMasterArg :: Pieces -> Exp
ssPieces :: Pieces -> [Piece]

-- | methods
Simple :: [Piece] -> [String] -> Pieces
type THResource = (String, Pieces)
instance Show Pieces

module Web.Routes.Quasi

-- | A quasi-quoter to parse a string into a list of <a>Resource</a>s.
--   Checks for overlapping routes, failing if present; use
--   <a>parseRoutesNoCheck</a> to skip the checking. See documentation site
--   for details on syntax.
parseRoutes :: QuasiQuoter

-- | Same as <a>parseRoutes</a>, but performs no overlap checking.
parseRoutesNoCheck :: QuasiQuoter
createRoutes :: [THResource] -> Q [Con]

-- | Generates the set of clauses necesary to render the given
--   <a>Resource</a>s. See <tt>quasiRender</tt>.
createRender :: [THResource] -> Q [Clause]

-- | Generates the set of clauses necesary to parse the given
--   <a>Resource</a>s. See <tt>quasiParse</tt>.
createParse :: [THResource] -> Q [Clause]
class SinglePiece s
fromSinglePiece :: SinglePiece s => Text -> Maybe s
toSinglePiece :: SinglePiece s => s -> Text
class MultiPiece s
fromMultiPiece :: MultiPiece s => [Text] -> Maybe s
toMultiPiece :: MultiPiece s => s -> [Text]
type Strings = [String]
