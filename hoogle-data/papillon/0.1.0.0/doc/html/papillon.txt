-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | packrat parser
--   
--   see examples directory
@package papillon
@version 0.1.0.0

module Text.Papillon.Core
papillonCore :: String -> DecsQ
class Source sl where type family Token sl data family Pos sl
getToken :: Source sl => sl -> Maybe ((Token sl, sl))
initialPos :: Source sl => Pos sl
updatePos :: Source sl => Token sl -> Pos sl -> Pos sl
class SourceList c where data family ListPos c
listToken :: SourceList c => [c] -> Maybe ((c, [c]))
listInitialPos :: SourceList c => ListPos c
listUpdatePos :: SourceList c => c -> ListPos c -> ListPos c
data ParseError pos drv
mkParseError :: String -> String -> String -> drv -> [String] -> pos -> ParseError pos drv
peDerivs :: ParseError pos drv -> drv
peReading :: ParseError pos drv -> ([String])
peMessage :: ParseError pos drv -> String
peCode :: ParseError pos drv -> String
peComment :: ParseError pos drv -> String
pePosition :: ParseError pos drv -> pos
pePositionS :: ParseError (Pos String) drv -> (Int, Int)
papillonFile :: String -> Q ([PPragma], ModuleName, Maybe Exports, Code, DecsQ, Code)
data PPragma
LanguagePragma :: [String] -> PPragma
OtherPragma :: String -> PPragma
type ModuleName = [String]
type Exports = String
type Code = String

-- | Sequential application.
(<*>) :: Applicative f => forall a b. f (a -> b) -> f a -> f b

-- | An infix synonym for <a>fmap</a>.
(<$>) :: Functor f => (a -> b) -> f a -> f b
runError :: ErrorT err Identity a -> Either err a

module Text.Papillon
papillon :: QuasiQuoter
class Source sl where type family Token sl data family Pos sl
getToken :: Source sl => sl -> Maybe ((Token sl, sl))
initialPos :: Source sl => Pos sl
updatePos :: Source sl => Token sl -> Pos sl -> Pos sl
class SourceList c where data family ListPos c
listToken :: SourceList c => [c] -> Maybe ((c, [c]))
listInitialPos :: SourceList c => ListPos c
listUpdatePos :: SourceList c => c -> ListPos c -> ListPos c
data ParseError pos drv
mkParseError :: String -> String -> String -> drv -> [String] -> pos -> ParseError pos drv
peDerivs :: ParseError pos drv -> drv
peReading :: ParseError pos drv -> ([String])
peMessage :: ParseError pos drv -> String
peCode :: ParseError pos drv -> String
peComment :: ParseError pos drv -> String
pePosition :: ParseError pos drv -> pos
pePositionS :: ParseError (Pos String) drv -> (Int, Int)

-- | Sequential application.
(<*>) :: Applicative f => forall a b. f (a -> b) -> f a -> f b

-- | An infix synonym for <a>fmap</a>.
(<$>) :: Functor f => (a -> b) -> f a -> f b
runError :: ErrorT err Identity a -> Either err a
