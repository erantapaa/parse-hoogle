-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lab Assignments Environment at Univeriteit Twente
--   
@package twentefp-graphs
@version 0.1.0.4

module FPPrac.Graphs
type Label = Char
type Weight = Float
type Node = (Label, Pos, ColorG)
type Edge = (Label, Label, ColorG, Weight)
data Graph
Graph :: [Node] -> [Edge] -> Directed -> Weighted -> Graph
nodes :: Graph -> [Node]
edges :: Graph -> [Edge]
directed :: Graph -> Directed
weighted :: Graph -> Weighted
data ColorG
Red :: ColorG
Blue :: ColorG
Green :: ColorG
Purple :: ColorG
Grey :: ColorG
Yellow :: ColorG
Orange :: ColorG
Black :: ColorG
White :: ColorG
data Thickness
Thin :: Thickness
Thick :: Thickness
data Directed
Directed :: Directed
Undirected :: Directed
data Weighted
Weighted :: Weighted
Unweighted :: Weighted

-- | The output expected in a graph graphical program
data GraphOutput
NodeG :: Label -> Pos -> ColorG -> GraphOutput
LineG :: Node -> Node -> ColorG -> Thickness -> Directed -> GraphOutput
WeightedLineG :: Node -> Node -> Weight -> ColorG -> Thickness -> Directed -> GraphOutput
Instructions :: [String] -> GraphOutput
RemoveNodeG :: Label -> GraphOutput
RemoveEdgeG :: Label -> Label -> GraphOutput
ClearAllG :: GraphOutput

-- | The input expected in a graph graphical program
data GraphInput
MouseUp :: MouseButton -> Pos -> GraphInput
MouseDown :: MouseButton -> Pos -> GraphInput
MouseClick :: MouseButton -> Pos -> GraphInput
KeyPress :: KeyboardButton -> GraphInput
Start :: GraphInput

-- | Type to express a position on the screen. It uses the format (x,y). As
--   Canvas is used in the example implementation, remember that the
--   lefttop corner is (0,0) and the leftbottom corner is (0, height of
--   screen).
type Pos = (Float, Float)

-- | The <a>MouseButton</a> on the mouse.
data MouseButton :: *
MLeft :: MouseButton
MRight :: MouseButton
MMiddle :: MouseButton

-- | Type to express how a <a>KeyboardButton</a> is modelled.
type KeyboardButton = [Char]

-- | Checkes to see if there is a node on a certain position
onNode :: [Node] -> Pos -> Maybe Node

-- | Starting point for the library. Call this function to start the
--   eventloop with the given handler. Takes <a>Input</a> and returns
--   <a>Output</a> instead of the standardized <a>Input</a> and
--   <a>Output</a>.
preEventloop :: (a -> GraphInput -> ([GraphOutput], a)) -> a -> IO ()
instance Eq ColorG
instance Show ColorG
instance Eq Thickness
instance Show Thickness
instance Eq Directed
instance Show Directed
instance Eq Weighted
instance Show Weighted
instance Eq Graph
instance Show Graph
instance Eq GraphOutput
instance Show GraphOutput
