-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | L-systems in Haskell
--   
--   L-systems in Haskell
@package lindenmayer
@version 0.1.0.1


-- | A D0L is a <i>deterministic</i>, <i>context-free</i> <i>L-system</i>.
--   
--   An <i>L-system</i> is a tuple L = (V, ω, P) where
--   
--   <ul>
--   <li>V is the alphabet</li>
--   <li>ω is the axiom (starting state)</li>
--   <li>P is the set of rules</li>
--   </ul>
--   
--   A <i>deterministic</i> L-system is one where there is only one
--   production rule for each letter in the alphabet. A <i>context-free</i>
--   L-system is one where the production rule looks only at the given
--   letter, not at any of its neighbors.
--   
--   Here, V is given by the inhabitants of <tt>a</tt>, ω by an
--   <tt>m</tt>-container of <tt>a</tt>, and P by a Kleisli arrow <tt>a
--   -&gt; m a</tt>. When <tt>m</tt> is <tt>[]</tt>, this is the usual
--   notion of an L-system.
--   
--   The original L-system used to model the growth of algae can be given
--   by
--   
--   <pre>
--   data Algae = A | B deriving Show
--   
--   algae :: D0L [] Algae
--   algae = D0L rules [B]
--     where rules A = [A,B]
--           rules B = [A]
--   </pre>
--   
--   We can demonstrate that the lengths of the generated strings give the
--   fibonacci sequence:
--   
--   <pre>
--   &gt;&gt;&gt; print . map (length . axiom) . take 7 . generate $ algae
--   [1,1,2,3,5,8,13]
--   </pre>
module Lindenmayer.D0L
data D0L m a
[D0L] :: (a -> m a) -> m a -> D0L m a
[rules] :: D0L m a -> a -> m a
[axiom] :: D0L m a -> m a

-- | Generate a list of <a>D0L</a> steps starting from an initial system.
generate :: Monad m => D0L m a -> [D0L m a]

-- | Apply the rules to each letter of the axiom (in parallel). The
--   resulting string becomes the axiom of a new <a>D0L</a> with the same
--   rules.
step :: Monad m => D0L m a -> D0L m a
instance Show (m a) => Show (D0L m a)
