-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Metadata collection for leksah
--   
@package leksah-server
@version 0.15.0.2


module IDE.Utils.Server

-- | make an IP Address: (127,0,0,1) is the localhost
ipAddress :: (Word8, Word8, Word8, Word8) -> HostAddress

-- | the specification of a serving process
data Server
Server :: SockAddr -> SocketType -> ServerRoutine -> Server
serverAddr :: Server -> SockAddr
serverTyp :: Server -> SocketType
serverRoutine :: Server -> ServerRoutine
serveOne :: Maybe UserAndGroup -> Server -> IO (ThreadId, MVar ())
serveMany :: Maybe UserAndGroup -> [Server] -> IO [(ThreadId, MVar ())]

-- | the functionality of a server
type ServerRoutine = (Handle, HostName, PortNumber) -> IO ()
data UserAndGroup
UserAndGroup :: Text -> Text -> UserAndGroup
UserWithDefaultGroup :: Text -> UserAndGroup
class WaitFor a
waitFor :: WaitFor a => a -> IO ()
instance WaitFor (ThreadId, MVar ())
instance WaitFor a => WaitFor [a]
instance WaitFor (MVar a)


module IDE.Core.CTypes
data PackageDescr
PackageDescr :: PackageIdentifier -> (Maybe FilePath) -> [ModuleDescr] -> [PackageIdentifier] -> PackageDescr
pdPackage :: PackageDescr -> PackageIdentifier
pdMbSourcePath :: PackageDescr -> (Maybe FilePath)
pdModules :: PackageDescr -> [ModuleDescr]
pdBuildDepends :: PackageDescr -> [PackageIdentifier]
data ModuleDescr
ModuleDescr :: PackModule -> (Maybe FilePath) -> (Map ModuleName (Set Text)) -> [Descr] -> ModuleDescr
mdModuleId :: ModuleDescr -> PackModule
mdMbSourcePath :: ModuleDescr -> (Maybe FilePath)
mdReferences :: ModuleDescr -> (Map ModuleName (Set Text))
mdIdDescriptions :: ModuleDescr -> [Descr]
data Descr
Real :: RealDescr -> Descr
Reexported :: ReexportedDescr -> Descr
data RealDescr
RealDescr :: Text -> Maybe ByteString -> Maybe PackModule -> Maybe Location -> Maybe ByteString -> TypeDescr -> Bool -> RealDescr
dscName' :: RealDescr -> Text
dscMbTypeStr' :: RealDescr -> Maybe ByteString
dscMbModu' :: RealDescr -> Maybe PackModule
dscMbLocation' :: RealDescr -> Maybe Location
dscMbComment' :: RealDescr -> Maybe ByteString
dscTypeHint' :: RealDescr -> TypeDescr
dscExported' :: RealDescr -> Bool
data ReexportedDescr
ReexportedDescr :: Maybe PackModule -> Descr -> ReexportedDescr
dsrMbModu :: ReexportedDescr -> Maybe PackModule
dsrDescr :: ReexportedDescr -> Descr
newtype Present alpha
Present :: alpha -> Present alpha
data TypeDescr
VariableDescr :: TypeDescr
FieldDescr :: Descr -> TypeDescr
ConstructorDescr :: Descr -> TypeDescr

-- | first constructors, then fields
DataDescr :: [SimpleDescr] -> [SimpleDescr] -> TypeDescr
TypeDescr :: TypeDescr

-- | first constructors, then maybe field
NewtypeDescr :: SimpleDescr -> (Maybe SimpleDescr) -> TypeDescr

-- | first super, then methods
ClassDescr :: [Text] -> [SimpleDescr] -> TypeDescr

-- | classDescr
MethodDescr :: Descr -> TypeDescr

-- | binds
InstanceDescr :: [Text] -> TypeDescr
KeywordDescr :: TypeDescr
ExtensionDescr :: TypeDescr
ModNameDescr :: TypeDescr
QualModNameDescr :: TypeDescr
ErrorDescr :: TypeDescr
data DescrType
Variable :: DescrType
Field :: DescrType
Constructor :: DescrType
Data :: DescrType
Type :: DescrType
Newtype :: DescrType
Class :: DescrType
Method :: DescrType
Instance :: DescrType
Keyword :: DescrType
Extension :: DescrType
ModName :: DescrType
QualModName :: DescrType
Error :: DescrType
data SimpleDescr
SimpleDescr :: Text -> Maybe ByteString -> Maybe Location -> Maybe ByteString -> Bool -> SimpleDescr
sdName :: SimpleDescr -> Text
sdType :: SimpleDescr -> Maybe ByteString
sdLocation :: SimpleDescr -> Maybe Location
sdComment :: SimpleDescr -> Maybe ByteString
sdExported :: SimpleDescr -> Bool
data GenScope
GenScopeC :: (PackScope alpha) -> GenScope
dscName :: Descr -> Text
dscMbTypeStr :: Descr -> Maybe ByteString

-- | The definition module
dscMbModu :: Descr -> Maybe PackModule

-- | The exporting module
dsMbModu :: Descr -> Maybe PackModule
dscMbLocation :: Descr -> Maybe Location
dscMbComment :: Descr -> Maybe ByteString
dscTypeHint :: Descr -> TypeDescr
dscExported :: Descr -> Bool
descrType :: TypeDescr -> DescrType
isReexported :: Descr -> Bool
data PackScope alpha
PackScope :: (Map PackageIdentifier PackageDescr) -> alpha -> PackScope alpha
class SymbolTable alpha
symLookup :: SymbolTable alpha => Text -> alpha -> [Descr]
symbols :: SymbolTable alpha => alpha -> Set Text
symSplitLookup :: SymbolTable alpha => Text -> alpha -> (alpha, Maybe [Descr], alpha)
symInsert :: SymbolTable alpha => Text -> [Descr] -> alpha -> alpha
symEmpty :: SymbolTable alpha => alpha
symElems :: SymbolTable alpha => alpha -> [[Descr]]
symUnion :: SymbolTable alpha => alpha -> alpha -> alpha
data PackModule
PM :: PackageIdentifier -> ModuleName -> PackModule
pack :: PackModule -> PackageIdentifier
modu :: PackModule -> ModuleName
parsePackModule :: Text -> PackModule
showPackModule :: PackModule -> Text
packageIdentifierToString :: PackageIdentifier -> Text
packageIdentifierFromString :: Text -> Maybe PackageIdentifier
data Location
Location :: FilePath -> Int -> Int -> Int -> Int -> Location
locationFile :: Location -> FilePath
locationSLine :: Location -> Int
locationSCol :: Location -> Int
locationELine :: Location -> Int
locationECol :: Location -> Int

-- | A portion of the source, spanning one or more lines and zero or more
--   columns.
data SrcSpan
SrcSpan :: FilePath -> Int -> Int -> Int -> Int -> SrcSpan
srcSpanFilename :: SrcSpan -> FilePath
srcSpanStartLine :: SrcSpan -> Int
srcSpanStartColumn :: SrcSpan -> Int
srcSpanEndLine :: SrcSpan -> Int
srcSpanEndColumn :: SrcSpan -> Int
data Scope
PackageScope :: Bool -> Scope
WorkspaceScope :: Bool -> Scope
SystemScope :: Scope
data ServerCommand
SystemCommand :: Bool -> Bool -> Bool -> ServerCommand
scRebuild :: ServerCommand -> Bool
scSources :: ServerCommand -> Bool
scExtract :: ServerCommand -> Bool
WorkspaceCommand :: Bool -> PackageIdentifier -> FilePath -> [(Text, FilePath)] -> ServerCommand
wcRebuild :: ServerCommand -> Bool
wcPackage :: ServerCommand -> PackageIdentifier
wcPath :: ServerCommand -> FilePath
wcModList :: ServerCommand -> [(Text, FilePath)]
ParseHeaderCommand :: FilePath -> ServerCommand
hcFilePath :: ServerCommand -> FilePath
data ServerAnswer
ServerOK :: ServerAnswer
ServerFailed :: Text -> ServerAnswer
ServerHeader :: (Either [ImportDecl] Int) -> ServerAnswer
leksahVersion :: FilePath
configDirName :: FilePath
metadataVersion :: Integer

-- | An import declaration.
data ImportDecl
ImportDecl :: Location -> Text -> Bool -> Bool -> Maybe Text -> Maybe Text -> Maybe ImportSpecList -> ImportDecl
importLoc :: ImportDecl -> Location

-- | name of the module imported.
importModule :: ImportDecl -> Text

-- | imported <tt>qualified</tt>?
importQualified :: ImportDecl -> Bool

-- | imported with <tt>{-# SOURCE #-}</tt>?
importSrc :: ImportDecl -> Bool

-- | imported with explicit package name
importPkg :: ImportDecl -> Maybe Text

-- | optional alias name in an <tt>as</tt> clause.
importAs :: ImportDecl -> Maybe Text

-- | optional list of import specifications.
importSpecs :: ImportDecl -> Maybe ImportSpecList

-- | An explicit import specification list.
data ImportSpecList
ImportSpecList :: Bool -> [ImportSpec] -> ImportSpecList

-- | An import specification, representing a single explicit item imported
--   (or hidden) from a module.
data ImportSpec

-- | variable
IVar :: Text -> ImportSpec

-- | <tt>T</tt>: the name of a class, datatype or type synonym.
IAbs :: Text -> ImportSpec

-- | <tt>T(..)</tt>: a class imported with all of its methods, or a
--   datatype imported with all of its constructors.
IThingAll :: Text -> ImportSpec

-- | <tt>T(C_1,...,C_n)</tt>: a class imported with some of its methods, or
--   a datatype imported with some of its constructors.
IThingWith :: Text -> [Text] -> ImportSpec
getThisPackage :: PackageConfig -> PackageIdAndKey
data PackageIdAndKey
PackageIdAndKey :: PackageIdentifier -> PackageIdAndKey
packId :: PackageIdAndKey -> PackageIdentifier
data RetrieveStrategy
RetrieveThenBuild :: RetrieveStrategy
BuildThenRetrieve :: RetrieveStrategy
NeverRetrieve :: RetrieveStrategy
instance Typeable PackModule
instance Typeable Location
instance Typeable SimpleDescr
instance Typeable RealDescr
instance Typeable TypeDescr
instance Typeable Descr
instance Typeable ReexportedDescr
instance Typeable ModuleDescr
instance Typeable PackageDescr
instance Show RetrieveStrategy
instance Read RetrieveStrategy
instance Eq RetrieveStrategy
instance Ord RetrieveStrategy
instance Enum RetrieveStrategy
instance Bounded RetrieveStrategy
instance Eq ServerCommand
instance Ord ServerCommand
instance Show ServerCommand
instance Read ServerCommand
instance Show DescrType
instance Eq DescrType
instance Ord DescrType
instance Bounded DescrType
instance Enum DescrType
instance Read DescrType
instance Eq PackModule
instance Ord PackModule
instance Read PackModule
instance Show PackModule
instance Eq SrcSpan
instance Ord SrcSpan
instance Show SrcSpan
instance Show Location
instance Eq Location
instance Ord Location
instance Read Location
instance Show SimpleDescr
instance Read SimpleDescr
instance Eq SimpleDescr
instance Ord SimpleDescr
instance Show RealDescr
instance Read RealDescr
instance Show TypeDescr
instance Read TypeDescr
instance Eq TypeDescr
instance Ord TypeDescr
instance Show Descr
instance Read Descr
instance Eq Descr
instance Ord Descr
instance Show ReexportedDescr
instance Read ReexportedDescr
instance Show ModuleDescr
instance Show PackageDescr
instance Show Scope
instance Eq Scope
instance Read Scope
instance Eq ImportSpec
instance Ord ImportSpec
instance Read ImportSpec
instance Show ImportSpec
instance Eq ImportSpecList
instance Ord ImportSpecList
instance Read ImportSpecList
instance Show ImportSpecList
instance Eq ImportDecl
instance Ord ImportDecl
instance Read ImportDecl
instance Show ImportDecl
instance Eq ServerAnswer
instance Ord ServerAnswer
instance Show ServerAnswer
instance Read ServerAnswer
instance NFData ModuleName
instance NFData PackModule
instance NFData DescrType
instance NFData SimpleDescr
instance NFData TypeDescr
instance NFData Descr
instance NFData ModuleDescr
instance NFData PackageDescr
instance NFData Location
instance Pretty VName
instance Pretty ImportSpec
instance Pretty ImportDecl
instance Ord Scope
instance Default ByteString
instance Default PackageIdentifier
instance Default PackModule
instance Ord ReexportedDescr
instance Eq ReexportedDescr
instance Ord RealDescr
instance Eq RealDescr
instance Show (Present Descr)
instance Show (Present PackModule)
instance Default DescrType
instance Ord ModuleDescr
instance Eq ModuleDescr
instance Show (Present ModuleDescr)
instance Default ModuleDescr
instance Ord PackageDescr
instance Eq PackageDescr
instance Show (Present PackageDescr)
instance Default PackageDescr
instance SymbolTable (Map Text [Descr])


module IDE.Core.Serializable
instance BinaryShared PackageName
instance BinaryShared ModuleName
instance BinaryShared Location
instance BinaryShared SimpleDescr
instance BinaryShared TypeDescr
instance BinaryShared Descr
instance BinaryShared ModuleDescr
instance BinaryShared PackageDescr
instance BinaryShared Version
instance BinaryShared PackageIdentifier
instance BinaryShared PackModule
instance BinaryShared Text


module IDE.StrippedPrefs

-- | Preferences is a data structure to hold configuration data
data Prefs
Prefs :: [FilePath] -> Maybe FilePath -> Text -> RetrieveStrategy -> Int -> Bool -> Prefs
sourceDirectories :: Prefs -> [FilePath]
unpackDirectory :: Prefs -> Maybe FilePath
retrieveURL :: Prefs -> Text
retrieveStrategy :: Prefs -> RetrieveStrategy
serverPort :: Prefs -> Int
endWithLastConn :: Prefs -> Bool
data RetrieveStrategy
RetrieveThenBuild :: RetrieveStrategy
BuildThenRetrieve :: RetrieveStrategy
NeverRetrieve :: RetrieveStrategy
readStrippedPrefs :: FilePath -> IO Prefs
writeStrippedPrefs :: FilePath -> Prefs -> IO ()
getSourceDirectories :: Prefs -> IO [FilePath]
getUnpackDirectory :: Prefs -> IO (Maybe FilePath)
instance Eq Prefs
instance Show Prefs


-- | Support for running external tools. Written mainly for GHCi but with |
--   support for others in mind.
module IDE.Utils.Tool
data ToolOutput
ToolInput :: Text -> ToolOutput
ToolError :: Text -> ToolOutput
ToolOutput :: Text -> ToolOutput
ToolPrompt :: Text -> ToolOutput
ToolExit :: ExitCode -> ToolOutput
toolline :: ToolOutput -> Text
data ToolCommand
ToolCommand :: Text -> Text -> (Sink ToolOutput IO ()) -> ToolCommand
data ToolState
ToolState :: MVar ProcessHandle -> MVar Bool -> Chan ToolCommand -> Chan ToolCommand -> MVar ToolCommand -> ToolState
toolProcessMVar :: ToolState -> MVar ProcessHandle
outputClosed :: ToolState -> MVar Bool
toolCommands :: ToolState -> Chan ToolCommand
toolCommandsRead :: ToolState -> Chan ToolCommand
currentToolCommand :: ToolState -> MVar ToolCommand
toolProcess :: ToolState -> IO ProcessHandle
newToolState :: IO ToolState
runTool :: MonadIO m => FilePath -> [Text] -> Maybe FilePath -> IO (Source m ToolOutput, ProcessHandle)
runTool' :: FilePath -> [Text] -> Maybe FilePath -> IO ([ToolOutput], ProcessHandle)
runInteractiveTool :: ToolState -> CommandLineReader -> FilePath -> [Text] -> Maybe FilePath -> IO ()
newGhci :: FilePath -> Maybe Text -> [Text] -> (Sink ToolOutput IO ()) -> IO ToolState
newGhci' :: [Text] -> (Sink ToolOutput IO ()) -> IO ToolState
executeCommand :: ToolState -> Text -> Text -> Sink ToolOutput IO () -> IO ()
executeGhciCommand :: ToolState -> Text -> Sink ToolOutput IO () -> IO ()
quoteArg :: Text -> Text
escapeQuotes :: Text -> Text

-- | Runs a command using the shell.
runCommand :: String -> IO ProcessHandle

-- | Waits for the specified process to terminate, and returns its exit
--   code.
--   
--   GHC Note: in order to call <tt>waitForProcess</tt> without blocking
--   all the other threads in the system, you must compile the program with
--   <tt>-threaded</tt>.
--   
--   (<i>Since: 1.2.0.0</i>) On Unix systems, a negative value
--   <tt><a>ExitFailure</a> -<i>signum</i></tt> indicates that the child
--   was terminated by signal <tt><i>signum</i></tt>. The signal numbers
--   are platform-specific, so to test for a specific signal use the
--   constants provided by <a>System.Posix.Signals</a> in the <tt>unix</tt>
--   package. Note: core dumps are not reported, use
--   <a>System.Posix.Process</a> if you need this detail.
waitForProcess :: ProcessHandle -> IO ExitCode

-- | Sends an interrupt signal to the process group of the given process.
--   
--   On Unix systems, it sends the group the SIGINT signal.
--   
--   On Windows systems, it generates a CTRL_BREAK_EVENT and will only work
--   for processes created using <a>createProcess</a> and setting the
--   <a>create_group</a> flag
interruptProcessGroupOf :: ProcessHandle -> IO ()
data ProcessHandle :: *

-- | This is a non-blocking version of <a>waitForProcess</a>. If the
--   process is still running, <a>Nothing</a> is returned. If the process
--   has exited, then <tt><a>Just</a> e</tt> is returned where <tt>e</tt>
--   is the exit code of the process.
--   
--   On Unix systems, see <a>waitForProcess</a> for the meaning of exit
--   codes when the process died as the result of a signal.
getProcessExitCode :: ProcessHandle -> IO (Maybe ExitCode)

-- | Runs a raw command, and returns <a>Handle</a>s that may be used to
--   communicate with the process via its <tt>stdin</tt>, <tt>stdout</tt>
--   and <tt>stderr</tt> respectively.
--   
--   For example, to start a process and feed a string to its stdin:
--   
--   <pre>
--   (inp,out,err,pid) &lt;- runInteractiveProcess "..."
--   forkIO (hPutStr inp str)
--   </pre>
--   
--   The <a>Handle</a>s are initially in binary mode; if you need them to
--   be in text mode then use <a>hSetBinaryMode</a>.
runInteractiveProcess :: FilePath -> [String] -> Maybe FilePath -> Maybe [(String, String)] -> IO (Handle, Handle, Handle, ProcessHandle)

-- | Runs a raw command, optionally specifying <a>Handle</a>s from which to
--   take the <tt>stdin</tt>, <tt>stdout</tt> and <tt>stderr</tt> channels
--   for the new process (otherwise these handles are inherited from the
--   current process).
--   
--   Any <a>Handle</a>s passed to <a>runProcess</a> are placed immediately
--   in the closed state.
--   
--   Note: consider using the more general <a>createProcess</a> instead of
--   <a>runProcess</a>.
runProcess :: FilePath -> [String] -> Maybe FilePath -> Maybe [(String, String)] -> Maybe Handle -> Maybe Handle -> Maybe Handle -> IO ProcessHandle

-- | <tt>readProcessWithExitCode</tt> creates an external process, reads
--   its standard output and standard error strictly, waits until the
--   process terminates, and then returns the <a>ExitCode</a> of the
--   process, the standard output, and the standard error.
--   
--   If an asynchronous exception is thrown to the thread executing
--   <tt>readProcessWithExitCode</tt>. The forked process will be
--   terminated and <tt>readProcessWithExitCode</tt> will wait (block)
--   until the process has been terminated.
--   
--   <a>readProcess</a> and <a>readProcessWithExitCode</a> are fairly
--   simple wrappers around <a>createProcess</a>. Constructing variants of
--   these functions is quite easy: follow the link to the source code to
--   see how <a>readProcess</a> is implemented.
--   
--   On Unix systems, see <a>waitForProcess</a> for the meaning of exit
--   codes when the process died as the result of a signal.
readProcessWithExitCode :: FilePath -> [String] -> String -> IO (ExitCode, String, String)

-- | Attempts to terminate the specified process. This function should not
--   be used under normal circumstances - no guarantees are given regarding
--   how cleanly the process is terminated. To check whether the process
--   has indeed terminated, use <a>getProcessExitCode</a>.
--   
--   On Unix systems, <a>terminateProcess</a> sends the process the SIGTERM
--   signal. On Windows systems, the Win32 <tt>TerminateProcess</tt>
--   function is called, passing an exit code of 1.
--   
--   Note: on Windows, if the process was a shell command created by
--   <a>createProcess</a> with <a>shell</a>, or created by
--   <a>runCommand</a> or <a>runInteractiveCommand</a>, then
--   <a>terminateProcess</a> will only terminate the shell, not the command
--   itself. On Unix systems, both processes are in a process group and
--   will be terminated together.
terminateProcess :: ProcessHandle -> IO ()
instance Eq ToolOutput
instance Show ToolOutput
instance Eq RawToolOutput
instance Show RawToolOutput
instance NFData ToolOutput
instance NFData ExitCode


module IDE.Utils.VersionUtils
getHaddockVersion :: IO Text
getGhcVersion :: IO FilePath
getGhcInfo :: IO Text


module IDE.Utils.Utils
leksahSessionFileExtension :: [Char]
leksahWorkspaceFileExtension :: [Char]
leksahPreferencesFileExtension :: [Char]
leksahCandyFileExtension :: [Char]
leksahKeymapFileExtension :: [Char]
leksahSourcesFileExtension :: [Char]
leksahMetadataSystemFileExtension :: [Char]
leksahMetadataPathFileExtension :: [Char]
leksahMetadataWorkspaceFileExtension :: [Char]
leksahMetadataDebugExtension :: [Char]
leksahTemplateFileExtension :: [Char]
leksahFlagFileExtension :: [Char]
standardSessionFilename :: [Char]
emptySessionFilename :: [Char]
packageSessionFilename :: [Char]
standardKeymapFilename :: [Char]
standardCandyFilename :: [Char]
standardPreferencesFilename :: [Char]
strippedPreferencesFilename :: [Char]
standardSourcesFilename :: [Char]
standardModuleTemplateFilename :: [Char]


module IDE.Utils.FileUtils
allModules :: FilePath -> IO [ModuleName]
allHiFiles :: FilePath -> IO [FilePath]
allHaskellSourceFiles :: FilePath -> IO [FilePath]
isEmptyDirectory :: FilePath -> IO Bool
cabalFileName :: FilePath -> IO (Maybe FilePath)
allCabalFiles :: FilePath -> IO [FilePath]
getConfigFilePathForLoad :: FilePath -> Maybe FilePath -> FilePath -> IO FilePath
hasSavedConfigFile :: FilePath -> IO Bool

-- | The directory where config files reside
getConfigDir :: IO FilePath
getConfigFilePathForSave :: FilePath -> IO FilePath
getCollectorPath :: MonadIO m => m FilePath
getSysLibDir :: IO FilePath
moduleNameFromFilePath :: FilePath -> IO (Maybe Text)
moduleNameFromFilePath' :: FilePath -> FilePath -> IO (Maybe Text)
findKnownPackages :: FilePath -> IO (Set Text)

-- | Returns True if the second path is a location which starts with the
--   first path
isSubPath :: FilePath -> FilePath -> Bool
findSourceFile :: [FilePath] -> [FilePath] -> ModuleName -> IO (Maybe FilePath)
findSourceFile' :: [FilePath] -> FilePath -> IO (Maybe FilePath)
haskellSrcExts :: [FilePath]
getCabalUserPackageDir :: IO (Maybe FilePath)
autoExtractCabalTarFiles :: FilePath -> IO ()
autoExtractTarFiles :: FilePath -> IO ()
getInstalledPackageIds :: IO [PackageIdentifier]
getInstalledPackageIds' :: IO (Either Text [PackageIdentifier])
figureOutGhcOpts :: IO [Text]
figureOutHaddockOpts :: IO [Text]
allFilesWithExtensions :: [FilePath] -> Bool -> [FilePath] -> FilePath -> IO [FilePath]

-- | canonicalizePath without crashing
myCanonicalizePath :: FilePath -> IO FilePath


module IDE.Utils.GHCUtils
inGhcIO :: [Text] -> [GeneralFlag] -> (DynFlags -> Ghc a) -> IO a
getInstalledPackageInfos :: Ghc [PackageConfig]
findFittingPackages :: [Dependency] -> Ghc [PackageIdentifier]
myParseModule :: DynFlags -> FilePath -> Maybe StringBuffer -> IO (Either ErrMsg (Located (HsModule RdrName)))
myParseHeader :: FilePath -> String -> [Text] -> IO (Either Text (DynFlags, HsModule RdrName))


module IDE.Metainfo.PackageCollector
collectPackage :: Bool -> Prefs -> Int -> (PackageConfig, Int) -> IO PackageCollectStats
