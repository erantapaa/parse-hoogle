-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell binding to ROOT Core modules
--   
--   HROOT is a haskell Foreign Function Interface (FFI) binding to ROOT.
--   ROOT(http:<i></i>root.cern.ch) is an object-oriented program and
--   library developed by CERN for physics data analysis.
@package HROOT-core
@version 0.8

module HROOT.Core.TVirtualPad.RawType
data RawTVirtualPad
newtype TVirtualPad
TVirtualPad :: (ForeignPtr RawTVirtualPad) -> TVirtualPad
instance Eq TVirtualPad
instance Ord TVirtualPad
instance Show TVirtualPad
instance FPtr TVirtualPad

module HROOT.Core.TSeqCollection.RawType
data RawTSeqCollection
newtype TSeqCollection
TSeqCollection :: (ForeignPtr RawTSeqCollection) -> TSeqCollection
instance Eq TSeqCollection
instance Ord TSeqCollection
instance Show TSeqCollection
instance FPtr TSeqCollection

module HROOT.Core.TQObject.RawType
data RawTQObject
newtype TQObject
TQObject :: (ForeignPtr RawTQObject) -> TQObject
instance Eq TQObject
instance Ord TQObject
instance Show TQObject
instance FPtr TQObject

module HROOT.Core.TQObject.FFI
c_tqobject_delete :: (Ptr RawTQObject) -> IO ()

module HROOT.Core.TObject.RawType
data RawTObject
newtype TObject
TObject :: (ForeignPtr RawTObject) -> TObject
instance Eq TObject
instance Ord TObject
instance Show TObject
instance FPtr TObject

module HROOT.Core.TObjArray.RawType
data RawTObjArray
newtype TObjArray
TObjArray :: (ForeignPtr RawTObjArray) -> TObjArray
instance Eq TObjArray
instance Ord TObjArray
instance Show TObjArray
instance FPtr TObjArray

module HROOT.Core.TNamed.RawType
data RawTNamed
newtype TNamed
TNamed :: (ForeignPtr RawTNamed) -> TNamed
instance Eq TNamed
instance Ord TNamed
instance Show TNamed
instance FPtr TNamed

module HROOT.Core.TKey.RawType
data RawTKey
newtype TKey
TKey :: (ForeignPtr RawTKey) -> TKey
instance Eq TKey
instance Ord TKey
instance Show TKey
instance FPtr TKey

module HROOT.Core.TGlobal.RawType
data RawTGlobal
newtype TGlobal
TGlobal :: (ForeignPtr RawTGlobal) -> TGlobal
instance Eq TGlobal
instance Ord TGlobal
instance Show TGlobal
instance FPtr TGlobal

module HROOT.Core.TDirectory.RawType
data RawTDirectory
newtype TDirectory
TDirectory :: (ForeignPtr RawTDirectory) -> TDirectory
instance Eq TDirectory
instance Ord TDirectory
instance Show TDirectory
instance FPtr TDirectory

module HROOT.Core.TDictionary.RawType

module HROOT.Core.TCollection.RawType
data RawTCollection
newtype TCollection
TCollection :: (ForeignPtr RawTCollection) -> TCollection
instance Eq TCollection
instance Ord TCollection
instance Show TCollection
instance FPtr TCollection

module HROOT.Core.TClass.RawType
data RawTClass
newtype TClass
TClass :: (ForeignPtr RawTClass) -> TClass
instance Eq TClass
instance Ord TClass
instance Show TClass
instance FPtr TClass

module HROOT.Core.TClass.FFI
c_tclass_setname :: (Ptr RawTClass) -> CString -> IO ()
c_tclass_setnametitle :: (Ptr RawTClass) -> CString -> CString -> IO ()
c_tclass_settitle :: (Ptr RawTClass) -> CString -> IO ()
c_tclass_draw :: (Ptr RawTClass) -> CString -> IO ()
c_tclass_findobject :: (Ptr RawTClass) -> CString -> IO (Ptr RawTObject)
c_tclass_getname :: (Ptr RawTClass) -> IO CString
c_tclass_isa :: (Ptr RawTClass) -> IO (Ptr RawTClass)
c_tclass_paint :: (Ptr RawTClass) -> CString -> IO ()
c_tclass_printobj :: (Ptr RawTClass) -> CString -> IO ()
c_tclass_saveas :: (Ptr RawTClass) -> CString -> CString -> IO ()
c_tclass_write :: (Ptr RawTClass) -> CString -> CInt -> CInt -> IO CInt
c_tclass_delete :: (Ptr RawTClass) -> IO ()

module HROOT.Core.TCollection.FFI
c_tcollection_draw :: (Ptr RawTCollection) -> CString -> IO ()
c_tcollection_findobject :: (Ptr RawTCollection) -> CString -> IO (Ptr RawTObject)
c_tcollection_getname :: (Ptr RawTCollection) -> IO CString
c_tcollection_isa :: (Ptr RawTCollection) -> IO (Ptr RawTClass)
c_tcollection_paint :: (Ptr RawTCollection) -> CString -> IO ()
c_tcollection_printobj :: (Ptr RawTCollection) -> CString -> IO ()
c_tcollection_saveas :: (Ptr RawTCollection) -> CString -> CString -> IO ()
c_tcollection_write :: (Ptr RawTCollection) -> CString -> CInt -> CInt -> IO CInt
c_tcollection_delete :: (Ptr RawTCollection) -> IO ()

module HROOT.Core.TDictionary.FFI

module HROOT.Core.TDirectory.FFI
c_tdirectory_setname :: (Ptr RawTDirectory) -> CString -> IO ()
c_tdirectory_setnametitle :: (Ptr RawTDirectory) -> CString -> CString -> IO ()
c_tdirectory_settitle :: (Ptr RawTDirectory) -> CString -> IO ()
c_tdirectory_draw :: (Ptr RawTDirectory) -> CString -> IO ()
c_tdirectory_findobject :: (Ptr RawTDirectory) -> CString -> IO (Ptr RawTObject)
c_tdirectory_getname :: (Ptr RawTDirectory) -> IO CString
c_tdirectory_isa :: (Ptr RawTDirectory) -> IO (Ptr RawTClass)
c_tdirectory_paint :: (Ptr RawTDirectory) -> CString -> IO ()
c_tdirectory_printobj :: (Ptr RawTDirectory) -> CString -> IO ()
c_tdirectory_saveas :: (Ptr RawTDirectory) -> CString -> CString -> IO ()
c_tdirectory_write :: (Ptr RawTDirectory) -> CString -> CInt -> CInt -> IO CInt
c_tdirectory_delete :: (Ptr RawTDirectory) -> IO ()
c_tdirectory_tdirectoryadddirectory :: CInt -> IO ()
c_tdirectory_tdirectoryadddirectorystatus :: IO CInt
c_tdirectory_append :: (Ptr RawTDirectory) -> (Ptr RawTObject) -> CInt -> IO ()
c_tdirectory_addd :: (Ptr RawTDirectory) -> (Ptr RawTObject) -> CInt -> IO ()
c_tdirectory_appendkey :: (Ptr RawTDirectory) -> (Ptr RawTKey) -> IO CInt
c_tdirectory_close :: (Ptr RawTDirectory) -> CString -> IO ()
c_tdirectory_get :: (Ptr RawTDirectory) -> CString -> IO (Ptr RawTObject)
c_tdirectory_cd_tdirectory :: (Ptr RawTDirectory) -> CString -> IO CInt

module HROOT.Core.TGlobal.FFI
c_tglobal_setname :: (Ptr RawTGlobal) -> CString -> IO ()
c_tglobal_setnametitle :: (Ptr RawTGlobal) -> CString -> CString -> IO ()
c_tglobal_settitle :: (Ptr RawTGlobal) -> CString -> IO ()
c_tglobal_draw :: (Ptr RawTGlobal) -> CString -> IO ()
c_tglobal_findobject :: (Ptr RawTGlobal) -> CString -> IO (Ptr RawTObject)
c_tglobal_getname :: (Ptr RawTGlobal) -> IO CString
c_tglobal_isa :: (Ptr RawTGlobal) -> IO (Ptr RawTClass)
c_tglobal_paint :: (Ptr RawTGlobal) -> CString -> IO ()
c_tglobal_printobj :: (Ptr RawTGlobal) -> CString -> IO ()
c_tglobal_saveas :: (Ptr RawTGlobal) -> CString -> CString -> IO ()
c_tglobal_write :: (Ptr RawTGlobal) -> CString -> CInt -> CInt -> IO CInt
c_tglobal_delete :: (Ptr RawTGlobal) -> IO ()

module HROOT.Core.TKey.FFI
c_tkey_setname :: (Ptr RawTKey) -> CString -> IO ()
c_tkey_setnametitle :: (Ptr RawTKey) -> CString -> CString -> IO ()
c_tkey_settitle :: (Ptr RawTKey) -> CString -> IO ()
c_tkey_draw :: (Ptr RawTKey) -> CString -> IO ()
c_tkey_findobject :: (Ptr RawTKey) -> CString -> IO (Ptr RawTObject)
c_tkey_getname :: (Ptr RawTKey) -> IO CString
c_tkey_isa :: (Ptr RawTKey) -> IO (Ptr RawTClass)
c_tkey_paint :: (Ptr RawTKey) -> CString -> IO ()
c_tkey_printobj :: (Ptr RawTKey) -> CString -> IO ()
c_tkey_saveas :: (Ptr RawTKey) -> CString -> CString -> IO ()
c_tkey_write :: (Ptr RawTKey) -> CString -> CInt -> CInt -> IO CInt
c_tkey_delete :: (Ptr RawTKey) -> IO ()

module HROOT.Core.TNamed.FFI
c_tnamed_draw :: (Ptr RawTNamed) -> CString -> IO ()
c_tnamed_findobject :: (Ptr RawTNamed) -> CString -> IO (Ptr RawTObject)
c_tnamed_getname :: (Ptr RawTNamed) -> IO CString
c_tnamed_isa :: (Ptr RawTNamed) -> IO (Ptr RawTClass)
c_tnamed_paint :: (Ptr RawTNamed) -> CString -> IO ()
c_tnamed_printobj :: (Ptr RawTNamed) -> CString -> IO ()
c_tnamed_saveas :: (Ptr RawTNamed) -> CString -> CString -> IO ()
c_tnamed_write :: (Ptr RawTNamed) -> CString -> CInt -> CInt -> IO CInt
c_tnamed_delete :: (Ptr RawTNamed) -> IO ()
c_tnamed_newtnamed :: CString -> CString -> IO (Ptr RawTNamed)
c_tnamed_setname :: (Ptr RawTNamed) -> CString -> IO ()
c_tnamed_setnametitle :: (Ptr RawTNamed) -> CString -> CString -> IO ()
c_tnamed_settitle :: (Ptr RawTNamed) -> CString -> IO ()

module HROOT.Core.TObjArray.FFI
c_tobjarray_draw :: (Ptr RawTObjArray) -> CString -> IO ()
c_tobjarray_findobject :: (Ptr RawTObjArray) -> CString -> IO (Ptr RawTObject)
c_tobjarray_getname :: (Ptr RawTObjArray) -> IO CString
c_tobjarray_isa :: (Ptr RawTObjArray) -> IO (Ptr RawTClass)
c_tobjarray_paint :: (Ptr RawTObjArray) -> CString -> IO ()
c_tobjarray_printobj :: (Ptr RawTObjArray) -> CString -> IO ()
c_tobjarray_saveas :: (Ptr RawTObjArray) -> CString -> CString -> IO ()
c_tobjarray_write :: (Ptr RawTObjArray) -> CString -> CInt -> CInt -> IO CInt
c_tobjarray_delete :: (Ptr RawTObjArray) -> IO ()

module HROOT.Core.TObject.FFI
c_tobject_delete :: (Ptr RawTObject) -> IO ()
c_tobject_newtobject :: IO (Ptr RawTObject)
c_tobject_draw :: (Ptr RawTObject) -> CString -> IO ()
c_tobject_findobject :: (Ptr RawTObject) -> CString -> IO (Ptr RawTObject)
c_tobject_getname :: (Ptr RawTObject) -> IO CString
c_tobject_isa :: (Ptr RawTObject) -> IO (Ptr RawTClass)
c_tobject_paint :: (Ptr RawTObject) -> CString -> IO ()
c_tobject_printobj :: (Ptr RawTObject) -> CString -> IO ()
c_tobject_saveas :: (Ptr RawTObject) -> CString -> CString -> IO ()
c_tobject_write :: (Ptr RawTObject) -> CString -> CInt -> CInt -> IO CInt
c_tobject_tobjectgetobjectstat :: IO CInt

module HROOT.Core.TSeqCollection.FFI
c_tseqcollection_draw :: (Ptr RawTSeqCollection) -> CString -> IO ()
c_tseqcollection_findobject :: (Ptr RawTSeqCollection) -> CString -> IO (Ptr RawTObject)
c_tseqcollection_getname :: (Ptr RawTSeqCollection) -> IO CString
c_tseqcollection_isa :: (Ptr RawTSeqCollection) -> IO (Ptr RawTClass)
c_tseqcollection_paint :: (Ptr RawTSeqCollection) -> CString -> IO ()
c_tseqcollection_printobj :: (Ptr RawTSeqCollection) -> CString -> IO ()
c_tseqcollection_saveas :: (Ptr RawTSeqCollection) -> CString -> CString -> IO ()
c_tseqcollection_write :: (Ptr RawTSeqCollection) -> CString -> CInt -> CInt -> IO CInt
c_tseqcollection_delete :: (Ptr RawTSeqCollection) -> IO ()

module HROOT.Core.TVirtualPad.FFI
c_tvirtualpad_draw :: (Ptr RawTVirtualPad) -> CString -> IO ()
c_tvirtualpad_findobject :: (Ptr RawTVirtualPad) -> CString -> IO (Ptr RawTObject)
c_tvirtualpad_getname :: (Ptr RawTVirtualPad) -> IO CString
c_tvirtualpad_isa :: (Ptr RawTVirtualPad) -> IO (Ptr RawTClass)
c_tvirtualpad_paint :: (Ptr RawTVirtualPad) -> CString -> IO ()
c_tvirtualpad_printobj :: (Ptr RawTVirtualPad) -> CString -> IO ()
c_tvirtualpad_saveas :: (Ptr RawTVirtualPad) -> CString -> CString -> IO ()
c_tvirtualpad_write :: (Ptr RawTVirtualPad) -> CString -> CInt -> CInt -> IO CInt
c_tvirtualpad_delete :: (Ptr RawTVirtualPad) -> IO ()
c_tvirtualpad_cd :: (Ptr RawTVirtualPad) -> CInt -> IO (Ptr RawTVirtualPad)
c_tvirtualpad_divide_tvirtualpad :: (Ptr RawTVirtualPad) -> CInt -> CInt -> CDouble -> CDouble -> CInt -> IO ()
c_tvirtualpad_setlogx :: (Ptr RawTVirtualPad) -> CInt -> IO ()
c_tvirtualpad_setlogy :: (Ptr RawTVirtualPad) -> CInt -> IO ()
c_tvirtualpad_setlogz :: (Ptr RawTVirtualPad) -> CInt -> IO ()

module HROOT.Core.TAttText.RawType
data RawTAttText
newtype TAttText
TAttText :: (ForeignPtr RawTAttText) -> TAttText
instance Eq TAttText
instance Ord TAttText
instance Show TAttText
instance FPtr TAttText

module HROOT.Core.TAttText.FFI
c_tatttext_delete :: (Ptr RawTAttText) -> IO ()
c_tatttext_newtatttext :: CInt -> CDouble -> CInt -> CInt -> CDouble -> IO (Ptr RawTAttText)
c_tatttext_gettextalign :: (Ptr RawTAttText) -> IO CInt
c_tatttext_gettextangle :: (Ptr RawTAttText) -> IO CDouble
c_tatttext_gettextcolor :: (Ptr RawTAttText) -> IO CInt
c_tatttext_gettextfont :: (Ptr RawTAttText) -> IO CInt
c_tatttext_gettextsize :: (Ptr RawTAttText) -> IO CDouble
c_tatttext_resetatttext :: (Ptr RawTAttText) -> CString -> IO ()
c_tatttext_settextattributes :: (Ptr RawTAttText) -> IO ()
c_tatttext_settextalign :: (Ptr RawTAttText) -> CInt -> IO ()
c_tatttext_settextangle :: (Ptr RawTAttText) -> CDouble -> IO ()
c_tatttext_settextcolor :: (Ptr RawTAttText) -> CInt -> IO ()
c_tatttext_settextfont :: (Ptr RawTAttText) -> CInt -> IO ()
c_tatttext_settextsize :: (Ptr RawTAttText) -> CDouble -> IO ()
c_tatttext_settextsizepixels :: (Ptr RawTAttText) -> CInt -> IO ()

module HROOT.Core.TAttPad.RawType
data RawTAttPad
newtype TAttPad
TAttPad :: (ForeignPtr RawTAttPad) -> TAttPad
instance Eq TAttPad
instance Ord TAttPad
instance Show TAttPad
instance FPtr TAttPad

module HROOT.Core.TAttPad.FFI
c_tattpad_delete :: (Ptr RawTAttPad) -> IO ()
c_tattpad_newtattpad :: IO (Ptr RawTAttPad)
c_tattpad_tattpadgetbottommargin :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgetleftmargin :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgetrightmargin :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgettopmargin :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgetafile :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgetxfile :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgetyfile :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgetastat :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgetxstat :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgetystat :: (Ptr RawTAttPad) -> IO CDouble
c_tattpad_tattpadgetframefillcolor :: (Ptr RawTAttPad) -> IO CInt
c_tattpad_tattpadgetframelinecolor :: (Ptr RawTAttPad) -> IO CInt
c_tattpad_tattpadgetframefillstyle :: (Ptr RawTAttPad) -> IO CInt
c_tattpad_tattpadgetframelinestyle :: (Ptr RawTAttPad) -> IO CInt
c_tattpad_tattpadgetframelinewidth :: (Ptr RawTAttPad) -> IO CInt
c_tattpad_tattpadgetframebordersize :: (Ptr RawTAttPad) -> IO CInt
c_tattpad_tattpadgetframebordermode :: (Ptr RawTAttPad) -> IO CInt
c_tattpad_resetattpad :: (Ptr RawTAttPad) -> CString -> IO ()
c_tattpad_setbottommargin :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_setleftmargin :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_setrightmargin :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_settopmargin :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_setmargin :: (Ptr RawTAttPad) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
c_tattpad_setafile :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_setxfile :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_setyfile :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_setastat :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_setxstat :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_setystat :: (Ptr RawTAttPad) -> CDouble -> IO ()
c_tattpad_tattpadsetframefillcolor :: (Ptr RawTAttPad) -> CInt -> IO ()
c_tattpad_tattpadsetframelinecolor :: (Ptr RawTAttPad) -> CInt -> IO ()
c_tattpad_tattpadsetframefillstyle :: (Ptr RawTAttPad) -> CInt -> IO ()
c_tattpad_tattpadsetframelinestyle :: (Ptr RawTAttPad) -> CInt -> IO ()
c_tattpad_tattpadsetframelinewidth :: (Ptr RawTAttPad) -> CInt -> IO ()
c_tattpad_tattpadsetframebordersize :: (Ptr RawTAttPad) -> CInt -> IO ()
c_tattpad_tattpadsetframebordermode :: (Ptr RawTAttPad) -> CInt -> IO ()

module HROOT.Core.TAttMarker.RawType
data RawTAttMarker
newtype TAttMarker
TAttMarker :: (ForeignPtr RawTAttMarker) -> TAttMarker
instance Eq TAttMarker
instance Ord TAttMarker
instance Show TAttMarker
instance FPtr TAttMarker

module HROOT.Core.TAttMarker.FFI
c_tattmarker_delete :: (Ptr RawTAttMarker) -> IO ()
c_tattmarker_newtattmarker :: CInt -> CInt -> CInt -> IO (Ptr RawTAttMarker)
c_tattmarker_getmarkercolor :: (Ptr RawTAttMarker) -> IO CInt
c_tattmarker_getmarkerstyle :: (Ptr RawTAttMarker) -> IO CInt
c_tattmarker_getmarkersize :: (Ptr RawTAttMarker) -> IO CDouble
c_tattmarker_resetattmarker :: (Ptr RawTAttMarker) -> CString -> IO ()
c_tattmarker_setmarkerattributes :: (Ptr RawTAttMarker) -> IO ()
c_tattmarker_setmarkercolor :: (Ptr RawTAttMarker) -> CInt -> IO ()
c_tattmarker_setmarkerstyle :: (Ptr RawTAttMarker) -> CInt -> IO ()
c_tattmarker_setmarkersize :: (Ptr RawTAttMarker) -> CInt -> IO ()

module HROOT.Core.TAttLine.RawType
data RawTAttLine
newtype TAttLine
TAttLine :: (ForeignPtr RawTAttLine) -> TAttLine
instance Eq TAttLine
instance Ord TAttLine
instance Show TAttLine
instance FPtr TAttLine

module HROOT.Core.TAttLine.FFI
c_tattline_delete :: (Ptr RawTAttLine) -> IO ()
c_tattline_newtattline :: CInt -> CInt -> CInt -> IO (Ptr RawTAttLine)
c_tattline_tattlinedistancetoline :: (Ptr RawTAttLine) -> CInt -> CInt -> CDouble -> CDouble -> CDouble -> CDouble -> IO CInt
c_tattline_getlinecolor :: (Ptr RawTAttLine) -> IO CInt
c_tattline_getlinestyle :: (Ptr RawTAttLine) -> IO CInt
c_tattline_getlinewidth :: (Ptr RawTAttLine) -> IO CInt
c_tattline_resetattline :: (Ptr RawTAttLine) -> CString -> IO ()
c_tattline_setlineattributes :: (Ptr RawTAttLine) -> IO ()
c_tattline_setlinecolor :: (Ptr RawTAttLine) -> CInt -> IO ()
c_tattline_setlinestyle :: (Ptr RawTAttLine) -> CInt -> IO ()
c_tattline_setlinewidth :: (Ptr RawTAttLine) -> CInt -> IO ()

module HROOT.Core.TAttFill.RawType
data RawTAttFill
newtype TAttFill
TAttFill :: (ForeignPtr RawTAttFill) -> TAttFill
instance Eq TAttFill
instance Ord TAttFill
instance Show TAttFill
instance FPtr TAttFill

module HROOT.Core.TAttFill.FFI
c_tattfill_delete :: (Ptr RawTAttFill) -> IO ()
c_tattfill_newtattfill :: CInt -> CInt -> IO (Ptr RawTAttFill)
c_tattfill_setfillcolor :: (Ptr RawTAttFill) -> CInt -> IO ()
c_tattfill_setfillstyle :: (Ptr RawTAttFill) -> CInt -> IO ()

module HROOT.Core.TAttCanvas.RawType
data RawTAttCanvas
newtype TAttCanvas
TAttCanvas :: (ForeignPtr RawTAttCanvas) -> TAttCanvas
instance Eq TAttCanvas
instance Ord TAttCanvas
instance Show TAttCanvas
instance FPtr TAttCanvas

module HROOT.Core.TAttCanvas.FFI
c_tattcanvas_delete :: (Ptr RawTAttCanvas) -> IO ()
c_tattcanvas_newtattcanvas :: IO (Ptr RawTAttCanvas)

module HROOT.Core.TAttBBox.RawType
data RawTAttBBox
newtype TAttBBox
TAttBBox :: (ForeignPtr RawTAttBBox) -> TAttBBox
instance Eq TAttBBox
instance Ord TAttBBox
instance Show TAttBBox
instance FPtr TAttBBox

module HROOT.Core.TAttBBox.FFI
c_tattbbox_delete :: (Ptr RawTAttBBox) -> IO ()

module HROOT.Core.TAttAxis.RawType
data RawTAttAxis
newtype TAttAxis
TAttAxis :: (ForeignPtr RawTAttAxis) -> TAttAxis
instance Eq TAttAxis
instance Ord TAttAxis
instance Show TAttAxis
instance FPtr TAttAxis

module HROOT.Core.TAttAxis.FFI
c_tattaxis_delete :: (Ptr RawTAttAxis) -> IO ()
c_tattaxis_newtattaxis :: IO (Ptr RawTAttAxis)
c_tattaxis_getndivisions :: (Ptr RawTAttAxis) -> IO CInt
c_tattaxis_getaxiscolor :: (Ptr RawTAttAxis) -> IO CInt
c_tattaxis_getlabelcolor :: (Ptr RawTAttAxis) -> IO CInt
c_tattaxis_getlabelfont :: (Ptr RawTAttAxis) -> IO CInt
c_tattaxis_getlabeloffset :: (Ptr RawTAttAxis) -> IO CDouble
c_tattaxis_getlabelsize :: (Ptr RawTAttAxis) -> IO CDouble
c_tattaxis_gettitleoffset :: (Ptr RawTAttAxis) -> IO CDouble
c_tattaxis_gettitlesize :: (Ptr RawTAttAxis) -> IO CDouble
c_tattaxis_getticklength :: (Ptr RawTAttAxis) -> IO CDouble
c_tattaxis_gettitlefont :: (Ptr RawTAttAxis) -> IO CInt
c_tattaxis_setndivisions :: (Ptr RawTAttAxis) -> CInt -> CInt -> IO ()
c_tattaxis_setaxiscolor :: (Ptr RawTAttAxis) -> CInt -> IO ()
c_tattaxis_setlabelcolor :: (Ptr RawTAttAxis) -> CInt -> IO ()
c_tattaxis_setlabelfont :: (Ptr RawTAttAxis) -> CInt -> IO ()
c_tattaxis_setlabeloffset :: (Ptr RawTAttAxis) -> CDouble -> IO ()
c_tattaxis_setlabelsize :: (Ptr RawTAttAxis) -> CDouble -> IO ()
c_tattaxis_setticklength :: (Ptr RawTAttAxis) -> CDouble -> IO ()
c_tattaxis_settitleoffset :: (Ptr RawTAttAxis) -> CDouble -> IO ()
c_tattaxis_settitlesize :: (Ptr RawTAttAxis) -> CDouble -> IO ()
c_tattaxis_settitlecolor :: (Ptr RawTAttAxis) -> CInt -> IO ()
c_tattaxis_settitlefont :: (Ptr RawTAttAxis) -> CInt -> IO ()

module HROOT.Core.TAtt3D.RawType
data RawTAtt3D
newtype TAtt3D
TAtt3D :: (ForeignPtr RawTAtt3D) -> TAtt3D
instance Eq TAtt3D
instance Ord TAtt3D
instance Show TAtt3D
instance FPtr TAtt3D

module HROOT.Core.TAtt3D.FFI
c_tatt3d_delete :: (Ptr RawTAtt3D) -> IO ()

module HROOT.Core.TArrayS.RawType
data RawTArrayS
newtype TArrayS
TArrayS :: (ForeignPtr RawTArrayS) -> TArrayS
instance Eq TArrayS
instance Ord TArrayS
instance Show TArrayS
instance FPtr TArrayS

module HROOT.Core.TArrayS.FFI
c_tarrays_delete :: (Ptr RawTArrayS) -> IO ()

module HROOT.Core.TArrayL64.RawType
data RawTArrayL64
newtype TArrayL64
TArrayL64 :: (ForeignPtr RawTArrayL64) -> TArrayL64
instance Eq TArrayL64
instance Ord TArrayL64
instance Show TArrayL64
instance FPtr TArrayL64

module HROOT.Core.TArrayL64.FFI
c_tarrayl64_delete :: (Ptr RawTArrayL64) -> IO ()

module HROOT.Core.TArrayL.RawType
data RawTArrayL
newtype TArrayL
TArrayL :: (ForeignPtr RawTArrayL) -> TArrayL
instance Eq TArrayL
instance Ord TArrayL
instance Show TArrayL
instance FPtr TArrayL

module HROOT.Core.TArrayL.FFI
c_tarrayl_delete :: (Ptr RawTArrayL) -> IO ()

module HROOT.Core.TArrayI.RawType
data RawTArrayI
newtype TArrayI
TArrayI :: (ForeignPtr RawTArrayI) -> TArrayI
instance Eq TArrayI
instance Ord TArrayI
instance Show TArrayI
instance FPtr TArrayI

module HROOT.Core.TArrayI.FFI
c_tarrayi_delete :: (Ptr RawTArrayI) -> IO ()

module HROOT.Core.TArrayF.RawType
data RawTArrayF
newtype TArrayF
TArrayF :: (ForeignPtr RawTArrayF) -> TArrayF
instance Eq TArrayF
instance Ord TArrayF
instance Show TArrayF
instance FPtr TArrayF

module HROOT.Core.TArrayF.FFI
c_tarrayf_delete :: (Ptr RawTArrayF) -> IO ()

module HROOT.Core.TArrayD.RawType
data RawTArrayD
newtype TArrayD
TArrayD :: (ForeignPtr RawTArrayD) -> TArrayD
instance Eq TArrayD
instance Ord TArrayD
instance Show TArrayD
instance FPtr TArrayD

module HROOT.Core.TArrayD.FFI
c_tarrayd_delete :: (Ptr RawTArrayD) -> IO ()

module HROOT.Core.TArrayC.RawType
data RawTArrayC
newtype TArrayC
TArrayC :: (ForeignPtr RawTArrayC) -> TArrayC
instance Eq TArrayC
instance Ord TArrayC
instance Show TArrayC
instance FPtr TArrayC

module HROOT.Core.TArrayC.FFI
c_tarrayc_delete :: (Ptr RawTArrayC) -> IO ()

module HROOT.Core.TArray.RawType
data RawTArray
newtype TArray
TArray :: (ForeignPtr RawTArray) -> TArray
instance Eq TArray
instance Ord TArray
instance Show TArray
instance FPtr TArray

module HROOT.Core.TArray.FFI
c_tarray_delete :: (Ptr RawTArray) -> IO ()

module HROOT.Core.TApplication.RawType
data RawTApplication
newtype TApplication
TApplication :: (ForeignPtr RawTApplication) -> TApplication
instance Eq TApplication
instance Ord TApplication
instance Show TApplication
instance FPtr TApplication

module HROOT.Core.TApplication.FFI
c_tapplication_draw :: (Ptr RawTApplication) -> CString -> IO ()
c_tapplication_findobject :: (Ptr RawTApplication) -> CString -> IO (Ptr RawTObject)
c_tapplication_getname :: (Ptr RawTApplication) -> IO CString
c_tapplication_isa :: (Ptr RawTApplication) -> IO (Ptr RawTClass)
c_tapplication_paint :: (Ptr RawTApplication) -> CString -> IO ()
c_tapplication_printobj :: (Ptr RawTApplication) -> CString -> IO ()
c_tapplication_saveas :: (Ptr RawTApplication) -> CString -> CString -> IO ()
c_tapplication_write :: (Ptr RawTApplication) -> CString -> CInt -> CInt -> IO CInt
c_tapplication_delete :: (Ptr RawTApplication) -> IO ()
c_tapplication_newtapplication :: CString -> (Ptr CInt) -> (Ptr (CString)) -> IO (Ptr RawTApplication)
c_tapplication_run :: (Ptr RawTApplication) -> CInt -> IO ()

module HROOT.Core.Deletable.RawType

module HROOT.Core.Deletable.Interface
class IDeletable a
delete :: IDeletable a => a -> IO ()

module HROOT.Core.TArray.Interface
class IDeletable a => ITArray a
upcastTArray :: (FPtr a, ITArray a) => a -> TArray
downcastTArray :: (FPtr a, ITArray a) => TArray -> a
instance Existable TArray

module HROOT.Core.TArrayC.Interface
class ITArray a => ITArrayC a
upcastTArrayC :: (FPtr a, ITArrayC a) => a -> TArrayC
downcastTArrayC :: (FPtr a, ITArrayC a) => TArrayC -> a
instance Existable TArrayC

module HROOT.Core.TArrayC.Cast
instance [incoherent] Castable TArrayC (Ptr RawTArrayC)
instance [incoherent] (ITArrayC a, FPtr a) => Castable a (Ptr RawTArrayC)

module HROOT.Core.TArrayD.Interface
class ITArray a => ITArrayD a
upcastTArrayD :: (FPtr a, ITArrayD a) => a -> TArrayD
downcastTArrayD :: (FPtr a, ITArrayD a) => TArrayD -> a
instance Existable TArrayD

module HROOT.Core.TArrayD.Cast
instance [incoherent] Castable TArrayD (Ptr RawTArrayD)
instance [incoherent] (ITArrayD a, FPtr a) => Castable a (Ptr RawTArrayD)

module HROOT.Core.TArrayF.Interface
class ITArray a => ITArrayF a
upcastTArrayF :: (FPtr a, ITArrayF a) => a -> TArrayF
downcastTArrayF :: (FPtr a, ITArrayF a) => TArrayF -> a
instance Existable TArrayF

module HROOT.Core.TArrayF.Cast
instance [incoherent] Castable TArrayF (Ptr RawTArrayF)
instance [incoherent] (ITArrayF a, FPtr a) => Castable a (Ptr RawTArrayF)

module HROOT.Core.TArrayI.Interface
class ITArray a => ITArrayI a
upcastTArrayI :: (FPtr a, ITArrayI a) => a -> TArrayI
downcastTArrayI :: (FPtr a, ITArrayI a) => TArrayI -> a
instance Existable TArrayI

module HROOT.Core.TArrayI.Cast
instance [incoherent] Castable TArrayI (Ptr RawTArrayI)
instance [incoherent] (ITArrayI a, FPtr a) => Castable a (Ptr RawTArrayI)

module HROOT.Core.TArrayL.Interface
class ITArray a => ITArrayL a
upcastTArrayL :: (FPtr a, ITArrayL a) => a -> TArrayL
downcastTArrayL :: (FPtr a, ITArrayL a) => TArrayL -> a
instance Existable TArrayL

module HROOT.Core.TArrayL.Cast
instance [incoherent] Castable TArrayL (Ptr RawTArrayL)
instance [incoherent] (ITArrayL a, FPtr a) => Castable a (Ptr RawTArrayL)

module HROOT.Core.TArrayL64.Interface
class ITArray a => ITArrayL64 a
upcastTArrayL64 :: (FPtr a, ITArrayL64 a) => a -> TArrayL64
downcastTArrayL64 :: (FPtr a, ITArrayL64 a) => TArrayL64 -> a
instance Existable TArrayL64

module HROOT.Core.TArrayL64.Cast
instance [incoherent] Castable TArrayL64 (Ptr RawTArrayL64)
instance [incoherent] (ITArrayL64 a, FPtr a) => Castable a (Ptr RawTArrayL64)

module HROOT.Core.TArrayS.Interface
class ITArray a => ITArrayS a
upcastTArrayS :: (FPtr a, ITArrayS a) => a -> TArrayS
downcastTArrayS :: (FPtr a, ITArrayS a) => TArrayS -> a
instance Existable TArrayS

module HROOT.Core.TArrayS.Cast
instance [incoherent] Castable TArrayS (Ptr RawTArrayS)
instance [incoherent] (ITArrayS a, FPtr a) => Castable a (Ptr RawTArrayS)

module HROOT.Core.TArray.Cast
instance [incoherent] Castable TArray (Ptr RawTArray)
instance [incoherent] (ITArray a, FPtr a) => Castable a (Ptr RawTArray)

module HROOT.Core.TAtt3D.Interface
class IDeletable a => ITAtt3D a
upcastTAtt3D :: (FPtr a, ITAtt3D a) => a -> TAtt3D
downcastTAtt3D :: (FPtr a, ITAtt3D a) => TAtt3D -> a
instance Existable TAtt3D

module HROOT.Core.TAtt3D.Cast
instance [incoherent] Castable TAtt3D (Ptr RawTAtt3D)
instance [incoherent] (ITAtt3D a, FPtr a) => Castable a (Ptr RawTAtt3D)

module HROOT.Core.TAttAxis.Interface
class IDeletable a => ITAttAxis a
getNdivisions :: ITAttAxis a => a -> IO CInt
getAxisColor :: ITAttAxis a => a -> IO CInt
getLabelColor :: ITAttAxis a => a -> IO CInt
getLabelFont :: ITAttAxis a => a -> IO CInt
getLabelOffset :: ITAttAxis a => a -> IO CDouble
getLabelSize :: ITAttAxis a => a -> IO CDouble
getTitleOffset :: ITAttAxis a => a -> IO CDouble
getTitleSize :: ITAttAxis a => a -> IO CDouble
getTickLength :: ITAttAxis a => a -> IO CDouble
getTitleFont :: ITAttAxis a => a -> IO CInt
setNdivisions :: ITAttAxis a => a -> CInt -> CInt -> IO ()
setAxisColor :: ITAttAxis a => a -> CInt -> IO ()
setLabelColor :: ITAttAxis a => a -> CInt -> IO ()
setLabelFont :: ITAttAxis a => a -> CInt -> IO ()
setLabelOffset :: ITAttAxis a => a -> CDouble -> IO ()
setLabelSize :: ITAttAxis a => a -> CDouble -> IO ()
setTickLength :: ITAttAxis a => a -> CDouble -> IO ()
setTitleOffset :: ITAttAxis a => a -> CDouble -> IO ()
setTitleSize :: ITAttAxis a => a -> CDouble -> IO ()
setTitleColor :: ITAttAxis a => a -> CInt -> IO ()
setTitleFont :: ITAttAxis a => a -> CInt -> IO ()
upcastTAttAxis :: (FPtr a, ITAttAxis a) => a -> TAttAxis
downcastTAttAxis :: (FPtr a, ITAttAxis a) => TAttAxis -> a
instance Existable TAttAxis

module HROOT.Core.TAttAxis.Cast
instance [incoherent] Castable TAttAxis (Ptr RawTAttAxis)
instance [incoherent] (ITAttAxis a, FPtr a) => Castable a (Ptr RawTAttAxis)

module HROOT.Core.TAttBBox.Interface
class IDeletable a => ITAttBBox a
upcastTAttBBox :: (FPtr a, ITAttBBox a) => a -> TAttBBox
downcastTAttBBox :: (FPtr a, ITAttBBox a) => TAttBBox -> a
instance Existable TAttBBox

module HROOT.Core.TAttBBox.Cast
instance [incoherent] Castable TAttBBox (Ptr RawTAttBBox)
instance [incoherent] (ITAttBBox a, FPtr a) => Castable a (Ptr RawTAttBBox)

module HROOT.Core.TAttCanvas.Interface
class IDeletable a => ITAttCanvas a
upcastTAttCanvas :: (FPtr a, ITAttCanvas a) => a -> TAttCanvas
downcastTAttCanvas :: (FPtr a, ITAttCanvas a) => TAttCanvas -> a
instance Existable TAttCanvas

module HROOT.Core.TAttCanvas.Cast
instance [incoherent] Castable TAttCanvas (Ptr RawTAttCanvas)
instance [incoherent] (ITAttCanvas a, FPtr a) => Castable a (Ptr RawTAttCanvas)

module HROOT.Core.TAttFill.Interface
class IDeletable a => ITAttFill a
setFillColor :: ITAttFill a => a -> CInt -> IO ()
setFillStyle :: ITAttFill a => a -> CInt -> IO ()
upcastTAttFill :: (FPtr a, ITAttFill a) => a -> TAttFill
downcastTAttFill :: (FPtr a, ITAttFill a) => TAttFill -> a
instance Existable TAttFill

module HROOT.Core.TAttFill.Cast
instance [incoherent] Castable TAttFill (Ptr RawTAttFill)
instance [incoherent] (ITAttFill a, FPtr a) => Castable a (Ptr RawTAttFill)

module HROOT.Core.TAttLine.Interface
class IDeletable a => ITAttLine a
getLineColor :: ITAttLine a => a -> IO CInt
getLineStyle :: ITAttLine a => a -> IO CInt
getLineWidth :: ITAttLine a => a -> IO CInt
resetAttLine :: ITAttLine a => a -> CString -> IO ()
setLineAttributes :: ITAttLine a => a -> IO ()
setLineColor :: ITAttLine a => a -> CInt -> IO ()
setLineStyle :: ITAttLine a => a -> CInt -> IO ()
setLineWidth :: ITAttLine a => a -> CInt -> IO ()
upcastTAttLine :: (FPtr a, ITAttLine a) => a -> TAttLine
downcastTAttLine :: (FPtr a, ITAttLine a) => TAttLine -> a
instance Existable TAttLine

module HROOT.Core.TAttLine.Cast
instance [incoherent] Castable TAttLine (Ptr RawTAttLine)
instance [incoherent] (ITAttLine a, FPtr a) => Castable a (Ptr RawTAttLine)

module HROOT.Core.TAttMarker.Interface
class IDeletable a => ITAttMarker a
getMarkerColor :: ITAttMarker a => a -> IO CInt
getMarkerStyle :: ITAttMarker a => a -> IO CInt
getMarkerSize :: ITAttMarker a => a -> IO CDouble
resetAttMarker :: ITAttMarker a => a -> CString -> IO ()
setMarkerAttributes :: ITAttMarker a => a -> IO ()
setMarkerColor :: ITAttMarker a => a -> CInt -> IO ()
setMarkerStyle :: ITAttMarker a => a -> CInt -> IO ()
setMarkerSize :: ITAttMarker a => a -> CInt -> IO ()
upcastTAttMarker :: (FPtr a, ITAttMarker a) => a -> TAttMarker
downcastTAttMarker :: (FPtr a, ITAttMarker a) => TAttMarker -> a
instance Existable TAttMarker

module HROOT.Core.TAttMarker.Cast
instance [incoherent] Castable TAttMarker (Ptr RawTAttMarker)
instance [incoherent] (ITAttMarker a, FPtr a) => Castable a (Ptr RawTAttMarker)

module HROOT.Core.TAttPad.Interface
class IDeletable a => ITAttPad a
resetAttPad :: ITAttPad a => a -> CString -> IO ()
setBottomMargin :: ITAttPad a => a -> CDouble -> IO ()
setLeftMargin :: ITAttPad a => a -> CDouble -> IO ()
setRightMargin :: ITAttPad a => a -> CDouble -> IO ()
setTopMargin :: ITAttPad a => a -> CDouble -> IO ()
setMargin :: ITAttPad a => a -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
setAfile :: ITAttPad a => a -> CDouble -> IO ()
setXfile :: ITAttPad a => a -> CDouble -> IO ()
setYfile :: ITAttPad a => a -> CDouble -> IO ()
setAstat :: ITAttPad a => a -> CDouble -> IO ()
setXstat :: ITAttPad a => a -> CDouble -> IO ()
setYstat :: ITAttPad a => a -> CDouble -> IO ()
upcastTAttPad :: (FPtr a, ITAttPad a) => a -> TAttPad
downcastTAttPad :: (FPtr a, ITAttPad a) => TAttPad -> a
instance Existable TAttPad

module HROOT.Core.TAttPad.Cast
instance [incoherent] Castable TAttPad (Ptr RawTAttPad)
instance [incoherent] (ITAttPad a, FPtr a) => Castable a (Ptr RawTAttPad)

module HROOT.Core.TAttText.Interface
class IDeletable a => ITAttText a
getTextAlign :: ITAttText a => a -> IO CInt
getTextAngle :: ITAttText a => a -> IO CDouble
getTextColor :: ITAttText a => a -> IO CInt
getTextFont :: ITAttText a => a -> IO CInt
getTextSize :: ITAttText a => a -> IO CDouble
resetAttText :: ITAttText a => a -> CString -> IO ()
setTextAttributes :: ITAttText a => a -> IO ()
setTextAlign :: ITAttText a => a -> CInt -> IO ()
setTextAngle :: ITAttText a => a -> CDouble -> IO ()
setTextColor :: ITAttText a => a -> CInt -> IO ()
setTextFont :: ITAttText a => a -> CInt -> IO ()
setTextSize :: ITAttText a => a -> CDouble -> IO ()
setTextSizePixels :: ITAttText a => a -> CInt -> IO ()
upcastTAttText :: (FPtr a, ITAttText a) => a -> TAttText
downcastTAttText :: (FPtr a, ITAttText a) => TAttText -> a
instance Existable TAttText

module HROOT.Core.TAttText.Cast
instance [incoherent] Castable TAttText (Ptr RawTAttText)
instance [incoherent] (ITAttText a, FPtr a) => Castable a (Ptr RawTAttText)

module HROOT.Core.TObject.Interface
class IDeletable a => ITObject a
draw :: ITObject a => a -> CString -> IO ()
findObject :: ITObject a => a -> CString -> IO TObject
getName :: ITObject a => a -> IO CString
isA :: ITObject a => a -> IO TClass
paint :: ITObject a => a -> CString -> IO ()
printObj :: ITObject a => a -> CString -> IO ()
saveAs :: ITObject a => a -> CString -> CString -> IO ()
write :: ITObject a => a -> CString -> CInt -> CInt -> IO CInt
upcastTObject :: (FPtr a, ITObject a) => a -> TObject
downcastTObject :: (FPtr a, ITObject a) => TObject -> a
instance Existable TObject

module HROOT.Core.TCollection.Interface
class ITObject a => ITCollection a
upcastTCollection :: (FPtr a, ITCollection a) => a -> TCollection
downcastTCollection :: (FPtr a, ITCollection a) => TCollection -> a
instance Existable TCollection

module HROOT.Core.TSeqCollection.Interface
class ITCollection a => ITSeqCollection a
upcastTSeqCollection :: (FPtr a, ITSeqCollection a) => a -> TSeqCollection
downcastTSeqCollection :: (FPtr a, ITSeqCollection a) => TSeqCollection -> a
instance Existable TSeqCollection

module HROOT.Core.TObjArray.Interface
class ITSeqCollection a => ITObjArray a
upcastTObjArray :: (FPtr a, ITObjArray a) => a -> TObjArray
downcastTObjArray :: (FPtr a, ITObjArray a) => TObjArray -> a
instance Existable TObjArray

module HROOT.Core.TObjArray.Cast
instance [incoherent] Castable TObjArray (Ptr RawTObjArray)
instance [incoherent] (ITObjArray a, FPtr a) => Castable a (Ptr RawTObjArray)

module HROOT.Core.TSeqCollection.Cast
instance [incoherent] Castable TSeqCollection (Ptr RawTSeqCollection)
instance [incoherent] (ITSeqCollection a, FPtr a) => Castable a (Ptr RawTSeqCollection)

module HROOT.Core.TCollection.Cast
instance [incoherent] Castable TCollection (Ptr RawTCollection)
instance [incoherent] (ITCollection a, FPtr a) => Castable a (Ptr RawTCollection)

module HROOT.Core.TNamed.Interface

-- | Class TNamed reference : http:<i></i>root.cern.ch
class ITObject a => ITNamed a
setName :: ITNamed a => a -> CString -> IO ()
setNameTitle :: ITNamed a => a -> CString -> CString -> IO ()
setTitle :: ITNamed a => a -> CString -> IO ()
upcastTNamed :: (FPtr a, ITNamed a) => a -> TNamed
downcastTNamed :: (FPtr a, ITNamed a) => TNamed -> a
instance Existable TNamed

module HROOT.Core.TDictionary.Interface
class ITNamed a => ITDictionary a

module HROOT.Core.TClass.Interface
class ITDictionary a => ITClass a
upcastTClass :: (FPtr a, ITClass a) => a -> TClass
downcastTClass :: (FPtr a, ITClass a) => TClass -> a
instance Existable TClass

module HROOT.Core.TClass.Cast
instance [incoherent] Castable TClass (Ptr RawTClass)
instance [incoherent] (ITClass a, FPtr a) => Castable a (Ptr RawTClass)

module HROOT.Core.TGlobal.Interface
class ITDictionary a => ITGlobal a
upcastTGlobal :: (FPtr a, ITGlobal a) => a -> TGlobal
downcastTGlobal :: (FPtr a, ITGlobal a) => TGlobal -> a
instance Existable TGlobal

module HROOT.Core.TGlobal.Cast
instance [incoherent] Castable TGlobal (Ptr RawTGlobal)
instance [incoherent] (ITGlobal a, FPtr a) => Castable a (Ptr RawTGlobal)

module HROOT.Core.TDictionary.Cast

module HROOT.Core.TDirectory.Interface
class ITNamed a => ITDirectory a
append :: (ITDirectory a, ITObject c0, FPtr c0) => a -> c0 -> CInt -> IO ()
addD :: (ITDirectory a, ITObject c0, FPtr c0) => a -> c0 -> CInt -> IO ()
appendKey :: (ITDirectory a, ITKey c0, FPtr c0) => a -> c0 -> IO CInt
close :: ITDirectory a => a -> CString -> IO ()
get :: ITDirectory a => a -> CString -> IO TObject
cd_TDirectory :: ITDirectory a => a -> CString -> IO CInt
upcastTDirectory :: (FPtr a, ITDirectory a) => a -> TDirectory
downcastTDirectory :: (FPtr a, ITDirectory a) => TDirectory -> a
instance Existable TDirectory

module HROOT.Core.TDirectory.Cast
instance [incoherent] Castable TDirectory (Ptr RawTDirectory)
instance [incoherent] (ITDirectory a, FPtr a) => Castable a (Ptr RawTDirectory)

module HROOT.Core.TKey.Interface
class ITNamed a => ITKey a
upcastTKey :: (FPtr a, ITKey a) => a -> TKey
downcastTKey :: (FPtr a, ITKey a) => TKey -> a
instance Existable TKey

module HROOT.Core.TKey.Cast
instance [incoherent] Castable TKey (Ptr RawTKey)
instance [incoherent] (ITKey a, FPtr a) => Castable a (Ptr RawTKey)

module HROOT.Core.TNamed.Cast
instance [incoherent] Castable TNamed (Ptr RawTNamed)
instance [incoherent] (ITNamed a, FPtr a) => Castable a (Ptr RawTNamed)

module HROOT.Core.TVirtualPad.Interface
class ITObject a => ITVirtualPad a
cd :: ITVirtualPad a => a -> CInt -> IO a
divide_tvirtualpad :: ITVirtualPad a => a -> CInt -> CInt -> CDouble -> CDouble -> CInt -> IO ()
setLogx :: ITVirtualPad a => a -> CInt -> IO ()
setLogy :: ITVirtualPad a => a -> CInt -> IO ()
setLogz :: ITVirtualPad a => a -> CInt -> IO ()
upcastTVirtualPad :: (FPtr a, ITVirtualPad a) => a -> TVirtualPad
downcastTVirtualPad :: (FPtr a, ITVirtualPad a) => TVirtualPad -> a
instance Existable TVirtualPad

module HROOT.Core.TVirtualPad.Cast
instance [incoherent] Castable TVirtualPad (Ptr RawTVirtualPad)
instance [incoherent] (ITVirtualPad a, FPtr a) => Castable a (Ptr RawTVirtualPad)

module HROOT.Core.TObject.Cast
instance [incoherent] Castable TObject (Ptr RawTObject)
instance [incoherent] (ITObject a, FPtr a) => Castable a (Ptr RawTObject)

module HROOT.Core.TQObject.Interface
class IDeletable a => ITQObject a
upcastTQObject :: (FPtr a, ITQObject a) => a -> TQObject
downcastTQObject :: (FPtr a, ITQObject a) => TQObject -> a
instance Existable TQObject

module HROOT.Core.TApplication.Interface
class (ITObject a, ITQObject a) => ITApplication a
run :: ITApplication a => a -> CInt -> IO ()
upcastTApplication :: (FPtr a, ITApplication a) => a -> TApplication
downcastTApplication :: (FPtr a, ITApplication a) => TApplication -> a
instance Existable TApplication

module HROOT.Core.TApplication.Cast
instance [incoherent] Castable TApplication (Ptr RawTApplication)
instance [incoherent] (ITApplication a, FPtr a) => Castable a (Ptr RawTApplication)

module HROOT.Core.TQObject.Cast
instance [incoherent] Castable TQObject (Ptr RawTQObject)
instance [incoherent] (ITQObject a, FPtr a) => Castable a (Ptr RawTQObject)

module HROOT.Core.Deletable.FFI

module HROOT.Core.Deletable.Cast

module HROOT.Core.Deletable.Implementation

module HROOT.Core.TApplication.Implementation
newTApplication :: CString -> (Ptr CInt) -> (Ptr CString) -> IO TApplication
instance [incoherent] FPtr (Exist TApplication)
instance [incoherent] IDeletable (Exist TApplication)
instance [incoherent] ITQObject (Exist TApplication)
instance [incoherent] ITObject (Exist TApplication)
instance [incoherent] ITApplication (Exist TApplication)
instance [incoherent] IDeletable TApplication
instance [incoherent] ITQObject TApplication
instance [incoherent] ITObject TApplication
instance [incoherent] ITApplication TApplication

module HROOT.Core.TArray.Implementation
instance [incoherent] FPtr (Exist TArray)
instance [incoherent] IDeletable (Exist TArray)
instance [incoherent] ITArray (Exist TArray)
instance [incoherent] IDeletable TArray
instance [incoherent] ITArray TArray

module HROOT.Core.TArrayC.Implementation
instance [incoherent] FPtr (Exist TArrayC)
instance [incoherent] IDeletable (Exist TArrayC)
instance [incoherent] ITArray (Exist TArrayC)
instance [incoherent] ITArrayC (Exist TArrayC)
instance [incoherent] IDeletable TArrayC
instance [incoherent] ITArray TArrayC
instance [incoherent] ITArrayC TArrayC

module HROOT.Core.TArrayD.Implementation
instance [incoherent] FPtr (Exist TArrayD)
instance [incoherent] IDeletable (Exist TArrayD)
instance [incoherent] ITArray (Exist TArrayD)
instance [incoherent] ITArrayD (Exist TArrayD)
instance [incoherent] IDeletable TArrayD
instance [incoherent] ITArray TArrayD
instance [incoherent] ITArrayD TArrayD

module HROOT.Core.TArrayF.Implementation
instance [incoherent] FPtr (Exist TArrayF)
instance [incoherent] IDeletable (Exist TArrayF)
instance [incoherent] ITArray (Exist TArrayF)
instance [incoherent] ITArrayF (Exist TArrayF)
instance [incoherent] IDeletable TArrayF
instance [incoherent] ITArray TArrayF
instance [incoherent] ITArrayF TArrayF

module HROOT.Core.TArrayI.Implementation
instance [incoherent] FPtr (Exist TArrayI)
instance [incoherent] IDeletable (Exist TArrayI)
instance [incoherent] ITArray (Exist TArrayI)
instance [incoherent] ITArrayI (Exist TArrayI)
instance [incoherent] IDeletable TArrayI
instance [incoherent] ITArray TArrayI
instance [incoherent] ITArrayI TArrayI

module HROOT.Core.TArrayL.Implementation
instance [incoherent] FPtr (Exist TArrayL)
instance [incoherent] IDeletable (Exist TArrayL)
instance [incoherent] ITArray (Exist TArrayL)
instance [incoherent] ITArrayL (Exist TArrayL)
instance [incoherent] IDeletable TArrayL
instance [incoherent] ITArray TArrayL
instance [incoherent] ITArrayL TArrayL

module HROOT.Core.TArrayL64.Implementation
instance [incoherent] FPtr (Exist TArrayL64)
instance [incoherent] IDeletable (Exist TArrayL64)
instance [incoherent] ITArray (Exist TArrayL64)
instance [incoherent] ITArrayL64 (Exist TArrayL64)
instance [incoherent] IDeletable TArrayL64
instance [incoherent] ITArray TArrayL64
instance [incoherent] ITArrayL64 TArrayL64

module HROOT.Core.TArrayS.Implementation
instance [incoherent] FPtr (Exist TArrayS)
instance [incoherent] IDeletable (Exist TArrayS)
instance [incoherent] ITArray (Exist TArrayS)
instance [incoherent] ITArrayS (Exist TArrayS)
instance [incoherent] IDeletable TArrayS
instance [incoherent] ITArray TArrayS
instance [incoherent] ITArrayS TArrayS

module HROOT.Core.TAtt3D.Implementation
instance [incoherent] FPtr (Exist TAtt3D)
instance [incoherent] IDeletable (Exist TAtt3D)
instance [incoherent] ITAtt3D (Exist TAtt3D)
instance [incoherent] IDeletable TAtt3D
instance [incoherent] ITAtt3D TAtt3D

module HROOT.Core.TAttAxis.Implementation
newTAttAxis :: IO TAttAxis
instance [incoherent] FPtr (Exist TAttAxis)
instance [incoherent] IDeletable (Exist TAttAxis)
instance [incoherent] ITAttAxis (Exist TAttAxis)
instance [incoherent] IDeletable TAttAxis
instance [incoherent] ITAttAxis TAttAxis

module HROOT.Core.TAttBBox.Implementation
instance [incoherent] FPtr (Exist TAttBBox)
instance [incoherent] IDeletable (Exist TAttBBox)
instance [incoherent] ITAttBBox (Exist TAttBBox)
instance [incoherent] IDeletable TAttBBox
instance [incoherent] ITAttBBox TAttBBox

module HROOT.Core.TAttCanvas.Implementation
newTAttCanvas :: IO TAttCanvas
instance [incoherent] FPtr (Exist TAttCanvas)
instance [incoherent] IDeletable (Exist TAttCanvas)
instance [incoherent] ITAttCanvas (Exist TAttCanvas)
instance [incoherent] IDeletable TAttCanvas
instance [incoherent] ITAttCanvas TAttCanvas

module HROOT.Core.TAttFill.Implementation
newTAttFill :: CInt -> CInt -> IO TAttFill
instance [incoherent] FPtr (Exist TAttFill)
instance [incoherent] IDeletable (Exist TAttFill)
instance [incoherent] ITAttFill (Exist TAttFill)
instance [incoherent] IDeletable TAttFill
instance [incoherent] ITAttFill TAttFill

module HROOT.Core.TAttLine.Implementation
newTAttLine :: CInt -> CInt -> CInt -> IO TAttLine
tAttLineDistancetoLine :: TAttLine -> CInt -> CInt -> CDouble -> CDouble -> CDouble -> CDouble -> IO CInt
instance [incoherent] FPtr (Exist TAttLine)
instance [incoherent] IDeletable (Exist TAttLine)
instance [incoherent] ITAttLine (Exist TAttLine)
instance [incoherent] IDeletable TAttLine
instance [incoherent] ITAttLine TAttLine

module HROOT.Core.TAttMarker.Implementation
newTAttMarker :: CInt -> CInt -> CInt -> IO TAttMarker
instance [incoherent] FPtr (Exist TAttMarker)
instance [incoherent] IDeletable (Exist TAttMarker)
instance [incoherent] ITAttMarker (Exist TAttMarker)
instance [incoherent] IDeletable TAttMarker
instance [incoherent] ITAttMarker TAttMarker

module HROOT.Core.TAttPad.Implementation
newTAttPad :: IO TAttPad
tAttPadGetBottomMargin :: TAttPad -> IO CDouble
tAttPadGetLeftMargin :: TAttPad -> IO CDouble
tAttPadGetRightMargin :: TAttPad -> IO CDouble
tAttPadGetTopMargin :: TAttPad -> IO CDouble
tAttPadGetAfile :: TAttPad -> IO CDouble
tAttPadGetXfile :: TAttPad -> IO CDouble
tAttPadGetYfile :: TAttPad -> IO CDouble
tAttPadGetAstat :: TAttPad -> IO CDouble
tAttPadGetXstat :: TAttPad -> IO CDouble
tAttPadGetYstat :: TAttPad -> IO CDouble
tAttPadGetFrameFillColor :: TAttPad -> IO CInt
tAttPadGetFrameLineColor :: TAttPad -> IO CInt
tAttPadGetFrameFillStyle :: TAttPad -> IO CInt
tAttPadGetFrameLineStyle :: TAttPad -> IO CInt
tAttPadGetFrameLineWidth :: TAttPad -> IO CInt
tAttPadGetFrameBorderSize :: TAttPad -> IO CInt
tAttPadGetFrameBorderMode :: TAttPad -> IO CInt
tAttPadSetFrameFillColor :: TAttPad -> CInt -> IO ()
tAttPadSetFrameLineColor :: TAttPad -> CInt -> IO ()
tAttPadSetFrameFillStyle :: TAttPad -> CInt -> IO ()
tAttPadSetFrameLineStyle :: TAttPad -> CInt -> IO ()
tAttPadSetFrameLineWidth :: TAttPad -> CInt -> IO ()
tAttPadSetFrameBorderSize :: TAttPad -> CInt -> IO ()
tAttPadSetFrameBorderMode :: TAttPad -> CInt -> IO ()
instance [incoherent] FPtr (Exist TAttPad)
instance [incoherent] IDeletable (Exist TAttPad)
instance [incoherent] ITAttPad (Exist TAttPad)
instance [incoherent] IDeletable TAttPad
instance [incoherent] ITAttPad TAttPad

module HROOT.Core.TAttText.Implementation
newTAttText :: CInt -> CDouble -> CInt -> CInt -> CDouble -> IO TAttText
instance [incoherent] FPtr (Exist TAttText)
instance [incoherent] IDeletable (Exist TAttText)
instance [incoherent] ITAttText (Exist TAttText)
instance [incoherent] IDeletable TAttText
instance [incoherent] ITAttText TAttText

module HROOT.Core.TClass.Implementation
instance [incoherent] FPtr (Exist TClass)
instance [incoherent] IDeletable (Exist TClass)
instance [incoherent] ITObject (Exist TClass)
instance [incoherent] ITNamed (Exist TClass)
instance [incoherent] ITDictionary (Exist TClass)
instance [incoherent] ITClass (Exist TClass)
instance [incoherent] IDeletable TClass
instance [incoherent] ITObject TClass
instance [incoherent] ITNamed TClass
instance [incoherent] ITDictionary TClass
instance [incoherent] ITClass TClass

module HROOT.Core.TCollection.Implementation
instance [incoherent] FPtr (Exist TCollection)
instance [incoherent] IDeletable (Exist TCollection)
instance [incoherent] ITObject (Exist TCollection)
instance [incoherent] ITCollection (Exist TCollection)
instance [incoherent] IDeletable TCollection
instance [incoherent] ITObject TCollection
instance [incoherent] ITCollection TCollection

module HROOT.Core.TDictionary.Implementation

module HROOT.Core.TDirectory.Implementation
tDirectoryAddDirectory :: CInt -> IO ()
tDirectoryAddDirectoryStatus :: IO CInt
instance [incoherent] FPtr (Exist TDirectory)
instance [incoherent] IDeletable (Exist TDirectory)
instance [incoherent] ITObject (Exist TDirectory)
instance [incoherent] ITNamed (Exist TDirectory)
instance [incoherent] ITDirectory (Exist TDirectory)
instance [incoherent] IDeletable TDirectory
instance [incoherent] ITObject TDirectory
instance [incoherent] ITNamed TDirectory
instance [incoherent] ITDirectory TDirectory

module HROOT.Core.TGlobal.Implementation
instance [incoherent] FPtr (Exist TGlobal)
instance [incoherent] IDeletable (Exist TGlobal)
instance [incoherent] ITObject (Exist TGlobal)
instance [incoherent] ITNamed (Exist TGlobal)
instance [incoherent] ITDictionary (Exist TGlobal)
instance [incoherent] ITGlobal (Exist TGlobal)
instance [incoherent] IDeletable TGlobal
instance [incoherent] ITObject TGlobal
instance [incoherent] ITNamed TGlobal
instance [incoherent] ITDictionary TGlobal
instance [incoherent] ITGlobal TGlobal

module HROOT.Core.TKey.Implementation
instance [incoherent] FPtr (Exist TKey)
instance [incoherent] IDeletable (Exist TKey)
instance [incoherent] ITObject (Exist TKey)
instance [incoherent] ITNamed (Exist TKey)
instance [incoherent] ITKey (Exist TKey)
instance [incoherent] IDeletable TKey
instance [incoherent] ITObject TKey
instance [incoherent] ITNamed TKey
instance [incoherent] ITKey TKey

module HROOT.Core.TNamed.Implementation

-- | constructor :
--   
--   <pre>
--   TNamed( char* name, char* title) 
--   </pre>
newTNamed :: CString -> CString -> IO TNamed
instance [incoherent] FPtr (Exist TNamed)
instance [incoherent] IDeletable (Exist TNamed)
instance [incoherent] ITObject (Exist TNamed)
instance [incoherent] ITNamed (Exist TNamed)
instance [incoherent] IDeletable TNamed
instance [incoherent] ITObject TNamed
instance [incoherent] ITNamed TNamed

module HROOT.Core.TObjArray.Implementation
instance [incoherent] FPtr (Exist TObjArray)
instance [incoherent] IDeletable (Exist TObjArray)
instance [incoherent] ITObject (Exist TObjArray)
instance [incoherent] ITCollection (Exist TObjArray)
instance [incoherent] ITSeqCollection (Exist TObjArray)
instance [incoherent] ITObjArray (Exist TObjArray)
instance [incoherent] IDeletable TObjArray
instance [incoherent] ITObject TObjArray
instance [incoherent] ITCollection TObjArray
instance [incoherent] ITSeqCollection TObjArray
instance [incoherent] ITObjArray TObjArray

module HROOT.Core.TObject.Implementation
newTObject :: IO TObject
tObjectGetObjectStat :: IO CInt
instance [incoherent] FPtr (Exist TObject)
instance [incoherent] IDeletable (Exist TObject)
instance [incoherent] ITObject (Exist TObject)
instance [incoherent] IDeletable TObject
instance [incoherent] ITObject TObject

module HROOT.Core.TQObject.Implementation
instance [incoherent] FPtr (Exist TQObject)
instance [incoherent] IDeletable (Exist TQObject)
instance [incoherent] ITQObject (Exist TQObject)
instance [incoherent] IDeletable TQObject
instance [incoherent] ITQObject TQObject

module HROOT.Core.TSeqCollection.Implementation
instance [incoherent] FPtr (Exist TSeqCollection)
instance [incoherent] IDeletable (Exist TSeqCollection)
instance [incoherent] ITObject (Exist TSeqCollection)
instance [incoherent] ITCollection (Exist TSeqCollection)
instance [incoherent] ITSeqCollection (Exist TSeqCollection)
instance [incoherent] IDeletable TSeqCollection
instance [incoherent] ITObject TSeqCollection
instance [incoherent] ITCollection TSeqCollection
instance [incoherent] ITSeqCollection TSeqCollection

module HROOT.Core.TVirtualPad.Implementation
instance [incoherent] FPtr (Exist TVirtualPad)
instance [incoherent] IDeletable (Exist TVirtualPad)
instance [incoherent] ITObject (Exist TVirtualPad)
instance [incoherent] ITVirtualPad (Exist TVirtualPad)
instance [incoherent] IDeletable TVirtualPad
instance [incoherent] ITObject TVirtualPad
instance [incoherent] ITVirtualPad TVirtualPad

module HROOT.Core.TSystem.RawType
data RawTSystem
newtype TSystem
TSystem :: (ForeignPtr RawTSystem) -> TSystem
instance Eq TSystem
instance Ord TSystem
instance Show TSystem
instance FPtr TSystem

module HROOT.Core.TSystem.Interface
class ITNamed a => ITSystem a
processEvents :: ITSystem a => a -> IO CInt
upcastTSystem :: (FPtr a, ITSystem a) => a -> TSystem
downcastTSystem :: (FPtr a, ITSystem a) => TSystem -> a
instance Existable TSystem

module HROOT.Core.TSystem.FFI
c_tsystem_setname :: (Ptr RawTSystem) -> CString -> IO ()
c_tsystem_setnametitle :: (Ptr RawTSystem) -> CString -> CString -> IO ()
c_tsystem_settitle :: (Ptr RawTSystem) -> CString -> IO ()
c_tsystem_draw :: (Ptr RawTSystem) -> CString -> IO ()
c_tsystem_findobject :: (Ptr RawTSystem) -> CString -> IO (Ptr RawTObject)
c_tsystem_getname :: (Ptr RawTSystem) -> IO CString
c_tsystem_isa :: (Ptr RawTSystem) -> IO (Ptr RawTClass)
c_tsystem_paint :: (Ptr RawTSystem) -> CString -> IO ()
c_tsystem_printobj :: (Ptr RawTSystem) -> CString -> IO ()
c_tsystem_saveas :: (Ptr RawTSystem) -> CString -> CString -> IO ()
c_tsystem_write :: (Ptr RawTSystem) -> CString -> CInt -> CInt -> IO CInt
c_tsystem_delete :: (Ptr RawTSystem) -> IO ()
c_tsystem_processevents :: (Ptr RawTSystem) -> IO CInt

module HROOT.Core.TSystem.Cast
instance [incoherent] Castable TSystem (Ptr RawTSystem)
instance [incoherent] (ITSystem a, FPtr a) => Castable a (Ptr RawTSystem)

module HROOT.Core.TSystem.Implementation
instance [incoherent] FPtr (Exist TSystem)
instance [incoherent] IDeletable (Exist TSystem)
instance [incoherent] ITObject (Exist TSystem)
instance [incoherent] ITNamed (Exist TSystem)
instance [incoherent] ITSystem (Exist TSystem)
instance [incoherent] IDeletable TSystem
instance [incoherent] ITObject TSystem
instance [incoherent] ITNamed TSystem
instance [incoherent] ITSystem TSystem

module HROOT.Core.TROOT.RawType
data RawTROOT
newtype TROOT
TROOT :: (ForeignPtr RawTROOT) -> TROOT
instance Eq TROOT
instance Ord TROOT
instance Show TROOT
instance FPtr TROOT

module HROOT.Core.TROOT.Interface
class ITDirectory a => ITROOT a
upcastTROOT :: (FPtr a, ITROOT a) => a -> TROOT
downcastTROOT :: (FPtr a, ITROOT a) => TROOT -> a
instance Existable TROOT

module HROOT.Core.TROOT.FFI
c_troot_append :: (Ptr RawTROOT) -> (Ptr RawTObject) -> CInt -> IO ()
c_troot_addd :: (Ptr RawTROOT) -> (Ptr RawTObject) -> CInt -> IO ()
c_troot_appendkey :: (Ptr RawTROOT) -> (Ptr RawTKey) -> IO CInt
c_troot_close :: (Ptr RawTROOT) -> CString -> IO ()
c_troot_get :: (Ptr RawTROOT) -> CString -> IO (Ptr RawTObject)
c_troot_cd_tdirectory :: (Ptr RawTROOT) -> CString -> IO CInt
c_troot_setname :: (Ptr RawTROOT) -> CString -> IO ()
c_troot_setnametitle :: (Ptr RawTROOT) -> CString -> CString -> IO ()
c_troot_settitle :: (Ptr RawTROOT) -> CString -> IO ()
c_troot_draw :: (Ptr RawTROOT) -> CString -> IO ()
c_troot_findobject :: (Ptr RawTROOT) -> CString -> IO (Ptr RawTObject)
c_troot_getname :: (Ptr RawTROOT) -> IO CString
c_troot_isa :: (Ptr RawTROOT) -> IO (Ptr RawTClass)
c_troot_paint :: (Ptr RawTROOT) -> CString -> IO ()
c_troot_printobj :: (Ptr RawTROOT) -> CString -> IO ()
c_troot_saveas :: (Ptr RawTROOT) -> CString -> CString -> IO ()
c_troot_write :: (Ptr RawTROOT) -> CString -> CInt -> CInt -> IO CInt
c_troot_delete :: (Ptr RawTROOT) -> IO ()
c_troot_trootgetglobal :: (Ptr RawTROOT) -> CString -> CInt -> IO (Ptr RawTGlobal)
c_troot_trootinitialized :: IO CInt

module HROOT.Core.TROOT.Cast
instance [incoherent] Castable TROOT (Ptr RawTROOT)
instance [incoherent] (ITROOT a, FPtr a) => Castable a (Ptr RawTROOT)

module HROOT.Core.TROOT.Implementation
tROOTGetGlobal :: TROOT -> CString -> CInt -> IO TGlobal
tROOTInitialized :: IO CInt
instance [incoherent] FPtr (Exist TROOT)
instance [incoherent] IDeletable (Exist TROOT)
instance [incoherent] ITObject (Exist TROOT)
instance [incoherent] ITNamed (Exist TROOT)
instance [incoherent] ITDirectory (Exist TROOT)
instance [incoherent] ITROOT (Exist TROOT)
instance [incoherent] IDeletable TROOT
instance [incoherent] ITObject TROOT
instance [incoherent] ITNamed TROOT
instance [incoherent] ITDirectory TROOT
instance [incoherent] ITROOT TROOT

module HROOT.Core.TVirtualPad
newtype TVirtualPad
TVirtualPad :: (ForeignPtr RawTVirtualPad) -> TVirtualPad
class ITObject a => ITVirtualPad a
cd :: ITVirtualPad a => a -> CInt -> IO a
divide_tvirtualpad :: ITVirtualPad a => a -> CInt -> CInt -> CDouble -> CDouble -> CInt -> IO ()
setLogx :: ITVirtualPad a => a -> CInt -> IO ()
setLogy :: ITVirtualPad a => a -> CInt -> IO ()
setLogz :: ITVirtualPad a => a -> CInt -> IO ()
upcastTVirtualPad :: (FPtr a, ITVirtualPad a) => a -> TVirtualPad
downcastTVirtualPad :: (FPtr a, ITVirtualPad a) => TVirtualPad -> a

module HROOT.Core.TSystem
newtype TSystem
TSystem :: (ForeignPtr RawTSystem) -> TSystem
class ITNamed a => ITSystem a
processEvents :: ITSystem a => a -> IO CInt
upcastTSystem :: (FPtr a, ITSystem a) => a -> TSystem
downcastTSystem :: (FPtr a, ITSystem a) => TSystem -> a

module HROOT.Core.TSeqCollection
newtype TSeqCollection
TSeqCollection :: (ForeignPtr RawTSeqCollection) -> TSeqCollection
class ITCollection a => ITSeqCollection a
upcastTSeqCollection :: (FPtr a, ITSeqCollection a) => a -> TSeqCollection
downcastTSeqCollection :: (FPtr a, ITSeqCollection a) => TSeqCollection -> a

module HROOT.Core.TROOT
newtype TROOT
TROOT :: (ForeignPtr RawTROOT) -> TROOT
class ITDirectory a => ITROOT a
upcastTROOT :: (FPtr a, ITROOT a) => a -> TROOT
downcastTROOT :: (FPtr a, ITROOT a) => TROOT -> a
tROOTGetGlobal :: TROOT -> CString -> CInt -> IO TGlobal
tROOTInitialized :: IO CInt

module HROOT.Core.TQObject
newtype TQObject
TQObject :: (ForeignPtr RawTQObject) -> TQObject
class IDeletable a => ITQObject a
upcastTQObject :: (FPtr a, ITQObject a) => a -> TQObject
downcastTQObject :: (FPtr a, ITQObject a) => TQObject -> a

module HROOT.Core.TObject
newtype TObject
TObject :: (ForeignPtr RawTObject) -> TObject
class IDeletable a => ITObject a
draw :: ITObject a => a -> CString -> IO ()
findObject :: ITObject a => a -> CString -> IO TObject
getName :: ITObject a => a -> IO CString
isA :: ITObject a => a -> IO TClass
paint :: ITObject a => a -> CString -> IO ()
printObj :: ITObject a => a -> CString -> IO ()
saveAs :: ITObject a => a -> CString -> CString -> IO ()
write :: ITObject a => a -> CString -> CInt -> CInt -> IO CInt
upcastTObject :: (FPtr a, ITObject a) => a -> TObject
downcastTObject :: (FPtr a, ITObject a) => TObject -> a
newTObject :: IO TObject
tObjectGetObjectStat :: IO CInt

module HROOT.Core.TObjArray
newtype TObjArray
TObjArray :: (ForeignPtr RawTObjArray) -> TObjArray
class ITSeqCollection a => ITObjArray a
upcastTObjArray :: (FPtr a, ITObjArray a) => a -> TObjArray
downcastTObjArray :: (FPtr a, ITObjArray a) => TObjArray -> a

module HROOT.Core.TNamed
newtype TNamed
TNamed :: (ForeignPtr RawTNamed) -> TNamed

-- | Class TNamed reference : http:<i></i>root.cern.ch
class ITObject a => ITNamed a
setName :: ITNamed a => a -> CString -> IO ()
setNameTitle :: ITNamed a => a -> CString -> CString -> IO ()
setTitle :: ITNamed a => a -> CString -> IO ()
upcastTNamed :: (FPtr a, ITNamed a) => a -> TNamed
downcastTNamed :: (FPtr a, ITNamed a) => TNamed -> a

-- | constructor :
--   
--   <pre>
--   TNamed( char* name, char* title) 
--   </pre>
newTNamed :: CString -> CString -> IO TNamed

module HROOT.Core.TKey
newtype TKey
TKey :: (ForeignPtr RawTKey) -> TKey
class ITNamed a => ITKey a
upcastTKey :: (FPtr a, ITKey a) => a -> TKey
downcastTKey :: (FPtr a, ITKey a) => TKey -> a

module HROOT.Core.TGlobal
newtype TGlobal
TGlobal :: (ForeignPtr RawTGlobal) -> TGlobal
class ITDictionary a => ITGlobal a
upcastTGlobal :: (FPtr a, ITGlobal a) => a -> TGlobal
downcastTGlobal :: (FPtr a, ITGlobal a) => TGlobal -> a

module HROOT.Core.TDirectory
newtype TDirectory
TDirectory :: (ForeignPtr RawTDirectory) -> TDirectory
class ITNamed a => ITDirectory a
append :: (ITDirectory a, ITObject c0, FPtr c0) => a -> c0 -> CInt -> IO ()
addD :: (ITDirectory a, ITObject c0, FPtr c0) => a -> c0 -> CInt -> IO ()
appendKey :: (ITDirectory a, ITKey c0, FPtr c0) => a -> c0 -> IO CInt
close :: ITDirectory a => a -> CString -> IO ()
get :: ITDirectory a => a -> CString -> IO TObject
cd_TDirectory :: ITDirectory a => a -> CString -> IO CInt
upcastTDirectory :: (FPtr a, ITDirectory a) => a -> TDirectory
downcastTDirectory :: (FPtr a, ITDirectory a) => TDirectory -> a
tDirectoryAddDirectory :: CInt -> IO ()
tDirectoryAddDirectoryStatus :: IO CInt

module HROOT.Core.TDictionary
class ITNamed a => ITDictionary a

module HROOT.Core.TCollection
newtype TCollection
TCollection :: (ForeignPtr RawTCollection) -> TCollection
class ITObject a => ITCollection a
upcastTCollection :: (FPtr a, ITCollection a) => a -> TCollection
downcastTCollection :: (FPtr a, ITCollection a) => TCollection -> a

module HROOT.Core.TClass
newtype TClass
TClass :: (ForeignPtr RawTClass) -> TClass
class ITDictionary a => ITClass a
upcastTClass :: (FPtr a, ITClass a) => a -> TClass
downcastTClass :: (FPtr a, ITClass a) => TClass -> a

module HROOT.Core.TAttText
newtype TAttText
TAttText :: (ForeignPtr RawTAttText) -> TAttText
class IDeletable a => ITAttText a
getTextAlign :: ITAttText a => a -> IO CInt
getTextAngle :: ITAttText a => a -> IO CDouble
getTextColor :: ITAttText a => a -> IO CInt
getTextFont :: ITAttText a => a -> IO CInt
getTextSize :: ITAttText a => a -> IO CDouble
resetAttText :: ITAttText a => a -> CString -> IO ()
setTextAttributes :: ITAttText a => a -> IO ()
setTextAlign :: ITAttText a => a -> CInt -> IO ()
setTextAngle :: ITAttText a => a -> CDouble -> IO ()
setTextColor :: ITAttText a => a -> CInt -> IO ()
setTextFont :: ITAttText a => a -> CInt -> IO ()
setTextSize :: ITAttText a => a -> CDouble -> IO ()
setTextSizePixels :: ITAttText a => a -> CInt -> IO ()
upcastTAttText :: (FPtr a, ITAttText a) => a -> TAttText
downcastTAttText :: (FPtr a, ITAttText a) => TAttText -> a
newTAttText :: CInt -> CDouble -> CInt -> CInt -> CDouble -> IO TAttText

module HROOT.Core.TAttPad
newtype TAttPad
TAttPad :: (ForeignPtr RawTAttPad) -> TAttPad
class IDeletable a => ITAttPad a
resetAttPad :: ITAttPad a => a -> CString -> IO ()
setBottomMargin :: ITAttPad a => a -> CDouble -> IO ()
setLeftMargin :: ITAttPad a => a -> CDouble -> IO ()
setRightMargin :: ITAttPad a => a -> CDouble -> IO ()
setTopMargin :: ITAttPad a => a -> CDouble -> IO ()
setMargin :: ITAttPad a => a -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
setAfile :: ITAttPad a => a -> CDouble -> IO ()
setXfile :: ITAttPad a => a -> CDouble -> IO ()
setYfile :: ITAttPad a => a -> CDouble -> IO ()
setAstat :: ITAttPad a => a -> CDouble -> IO ()
setXstat :: ITAttPad a => a -> CDouble -> IO ()
setYstat :: ITAttPad a => a -> CDouble -> IO ()
upcastTAttPad :: (FPtr a, ITAttPad a) => a -> TAttPad
downcastTAttPad :: (FPtr a, ITAttPad a) => TAttPad -> a
newTAttPad :: IO TAttPad
tAttPadGetBottomMargin :: TAttPad -> IO CDouble
tAttPadGetLeftMargin :: TAttPad -> IO CDouble
tAttPadGetRightMargin :: TAttPad -> IO CDouble
tAttPadGetTopMargin :: TAttPad -> IO CDouble
tAttPadGetAfile :: TAttPad -> IO CDouble
tAttPadGetXfile :: TAttPad -> IO CDouble
tAttPadGetYfile :: TAttPad -> IO CDouble
tAttPadGetAstat :: TAttPad -> IO CDouble
tAttPadGetXstat :: TAttPad -> IO CDouble
tAttPadGetYstat :: TAttPad -> IO CDouble
tAttPadGetFrameFillColor :: TAttPad -> IO CInt
tAttPadGetFrameLineColor :: TAttPad -> IO CInt
tAttPadGetFrameFillStyle :: TAttPad -> IO CInt
tAttPadGetFrameLineStyle :: TAttPad -> IO CInt
tAttPadGetFrameLineWidth :: TAttPad -> IO CInt
tAttPadGetFrameBorderSize :: TAttPad -> IO CInt
tAttPadGetFrameBorderMode :: TAttPad -> IO CInt
tAttPadSetFrameFillColor :: TAttPad -> CInt -> IO ()
tAttPadSetFrameLineColor :: TAttPad -> CInt -> IO ()
tAttPadSetFrameFillStyle :: TAttPad -> CInt -> IO ()
tAttPadSetFrameLineStyle :: TAttPad -> CInt -> IO ()
tAttPadSetFrameLineWidth :: TAttPad -> CInt -> IO ()
tAttPadSetFrameBorderSize :: TAttPad -> CInt -> IO ()
tAttPadSetFrameBorderMode :: TAttPad -> CInt -> IO ()

module HROOT.Core.TAttMarker
newtype TAttMarker
TAttMarker :: (ForeignPtr RawTAttMarker) -> TAttMarker
class IDeletable a => ITAttMarker a
getMarkerColor :: ITAttMarker a => a -> IO CInt
getMarkerStyle :: ITAttMarker a => a -> IO CInt
getMarkerSize :: ITAttMarker a => a -> IO CDouble
resetAttMarker :: ITAttMarker a => a -> CString -> IO ()
setMarkerAttributes :: ITAttMarker a => a -> IO ()
setMarkerColor :: ITAttMarker a => a -> CInt -> IO ()
setMarkerStyle :: ITAttMarker a => a -> CInt -> IO ()
setMarkerSize :: ITAttMarker a => a -> CInt -> IO ()
upcastTAttMarker :: (FPtr a, ITAttMarker a) => a -> TAttMarker
downcastTAttMarker :: (FPtr a, ITAttMarker a) => TAttMarker -> a
newTAttMarker :: CInt -> CInt -> CInt -> IO TAttMarker

module HROOT.Core.TAttLine
newtype TAttLine
TAttLine :: (ForeignPtr RawTAttLine) -> TAttLine
class IDeletable a => ITAttLine a
getLineColor :: ITAttLine a => a -> IO CInt
getLineStyle :: ITAttLine a => a -> IO CInt
getLineWidth :: ITAttLine a => a -> IO CInt
resetAttLine :: ITAttLine a => a -> CString -> IO ()
setLineAttributes :: ITAttLine a => a -> IO ()
setLineColor :: ITAttLine a => a -> CInt -> IO ()
setLineStyle :: ITAttLine a => a -> CInt -> IO ()
setLineWidth :: ITAttLine a => a -> CInt -> IO ()
upcastTAttLine :: (FPtr a, ITAttLine a) => a -> TAttLine
downcastTAttLine :: (FPtr a, ITAttLine a) => TAttLine -> a
newTAttLine :: CInt -> CInt -> CInt -> IO TAttLine
tAttLineDistancetoLine :: TAttLine -> CInt -> CInt -> CDouble -> CDouble -> CDouble -> CDouble -> IO CInt

module HROOT.Core.TAttFill
newtype TAttFill
TAttFill :: (ForeignPtr RawTAttFill) -> TAttFill
class IDeletable a => ITAttFill a
setFillColor :: ITAttFill a => a -> CInt -> IO ()
setFillStyle :: ITAttFill a => a -> CInt -> IO ()
upcastTAttFill :: (FPtr a, ITAttFill a) => a -> TAttFill
downcastTAttFill :: (FPtr a, ITAttFill a) => TAttFill -> a
newTAttFill :: CInt -> CInt -> IO TAttFill

module HROOT.Core.TAttCanvas
newtype TAttCanvas
TAttCanvas :: (ForeignPtr RawTAttCanvas) -> TAttCanvas
class IDeletable a => ITAttCanvas a
upcastTAttCanvas :: (FPtr a, ITAttCanvas a) => a -> TAttCanvas
downcastTAttCanvas :: (FPtr a, ITAttCanvas a) => TAttCanvas -> a
newTAttCanvas :: IO TAttCanvas

module HROOT.Core.TAttBBox
newtype TAttBBox
TAttBBox :: (ForeignPtr RawTAttBBox) -> TAttBBox
class IDeletable a => ITAttBBox a
upcastTAttBBox :: (FPtr a, ITAttBBox a) => a -> TAttBBox
downcastTAttBBox :: (FPtr a, ITAttBBox a) => TAttBBox -> a

module HROOT.Core.TAttAxis
newtype TAttAxis
TAttAxis :: (ForeignPtr RawTAttAxis) -> TAttAxis
class IDeletable a => ITAttAxis a
getNdivisions :: ITAttAxis a => a -> IO CInt
getAxisColor :: ITAttAxis a => a -> IO CInt
getLabelColor :: ITAttAxis a => a -> IO CInt
getLabelFont :: ITAttAxis a => a -> IO CInt
getLabelOffset :: ITAttAxis a => a -> IO CDouble
getLabelSize :: ITAttAxis a => a -> IO CDouble
getTitleOffset :: ITAttAxis a => a -> IO CDouble
getTitleSize :: ITAttAxis a => a -> IO CDouble
getTickLength :: ITAttAxis a => a -> IO CDouble
getTitleFont :: ITAttAxis a => a -> IO CInt
setNdivisions :: ITAttAxis a => a -> CInt -> CInt -> IO ()
setAxisColor :: ITAttAxis a => a -> CInt -> IO ()
setLabelColor :: ITAttAxis a => a -> CInt -> IO ()
setLabelFont :: ITAttAxis a => a -> CInt -> IO ()
setLabelOffset :: ITAttAxis a => a -> CDouble -> IO ()
setLabelSize :: ITAttAxis a => a -> CDouble -> IO ()
setTickLength :: ITAttAxis a => a -> CDouble -> IO ()
setTitleOffset :: ITAttAxis a => a -> CDouble -> IO ()
setTitleSize :: ITAttAxis a => a -> CDouble -> IO ()
setTitleColor :: ITAttAxis a => a -> CInt -> IO ()
setTitleFont :: ITAttAxis a => a -> CInt -> IO ()
upcastTAttAxis :: (FPtr a, ITAttAxis a) => a -> TAttAxis
downcastTAttAxis :: (FPtr a, ITAttAxis a) => TAttAxis -> a
newTAttAxis :: IO TAttAxis

module HROOT.Core.TAtt3D
newtype TAtt3D
TAtt3D :: (ForeignPtr RawTAtt3D) -> TAtt3D
class IDeletable a => ITAtt3D a
upcastTAtt3D :: (FPtr a, ITAtt3D a) => a -> TAtt3D
downcastTAtt3D :: (FPtr a, ITAtt3D a) => TAtt3D -> a

module HROOT.Core.TArrayS
newtype TArrayS
TArrayS :: (ForeignPtr RawTArrayS) -> TArrayS
class ITArray a => ITArrayS a
upcastTArrayS :: (FPtr a, ITArrayS a) => a -> TArrayS
downcastTArrayS :: (FPtr a, ITArrayS a) => TArrayS -> a

module HROOT.Core.TArrayL64
newtype TArrayL64
TArrayL64 :: (ForeignPtr RawTArrayL64) -> TArrayL64
class ITArray a => ITArrayL64 a
upcastTArrayL64 :: (FPtr a, ITArrayL64 a) => a -> TArrayL64
downcastTArrayL64 :: (FPtr a, ITArrayL64 a) => TArrayL64 -> a

module HROOT.Core.TArrayL
newtype TArrayL
TArrayL :: (ForeignPtr RawTArrayL) -> TArrayL
class ITArray a => ITArrayL a
upcastTArrayL :: (FPtr a, ITArrayL a) => a -> TArrayL
downcastTArrayL :: (FPtr a, ITArrayL a) => TArrayL -> a

module HROOT.Core.TArrayI
newtype TArrayI
TArrayI :: (ForeignPtr RawTArrayI) -> TArrayI
class ITArray a => ITArrayI a
upcastTArrayI :: (FPtr a, ITArrayI a) => a -> TArrayI
downcastTArrayI :: (FPtr a, ITArrayI a) => TArrayI -> a

module HROOT.Core.TArrayF
newtype TArrayF
TArrayF :: (ForeignPtr RawTArrayF) -> TArrayF
class ITArray a => ITArrayF a
upcastTArrayF :: (FPtr a, ITArrayF a) => a -> TArrayF
downcastTArrayF :: (FPtr a, ITArrayF a) => TArrayF -> a

module HROOT.Core.TArrayD
newtype TArrayD
TArrayD :: (ForeignPtr RawTArrayD) -> TArrayD
class ITArray a => ITArrayD a
upcastTArrayD :: (FPtr a, ITArrayD a) => a -> TArrayD
downcastTArrayD :: (FPtr a, ITArrayD a) => TArrayD -> a

module HROOT.Core.TArrayC
newtype TArrayC
TArrayC :: (ForeignPtr RawTArrayC) -> TArrayC
class ITArray a => ITArrayC a
upcastTArrayC :: (FPtr a, ITArrayC a) => a -> TArrayC
downcastTArrayC :: (FPtr a, ITArrayC a) => TArrayC -> a

module HROOT.Core.TArray
newtype TArray
TArray :: (ForeignPtr RawTArray) -> TArray
class IDeletable a => ITArray a
upcastTArray :: (FPtr a, ITArray a) => a -> TArray
downcastTArray :: (FPtr a, ITArray a) => TArray -> a

module HROOT.Core.TApplication
newtype TApplication
TApplication :: (ForeignPtr RawTApplication) -> TApplication
class (ITObject a, ITQObject a) => ITApplication a
run :: ITApplication a => a -> CInt -> IO ()
upcastTApplication :: (FPtr a, ITApplication a) => a -> TApplication
downcastTApplication :: (FPtr a, ITApplication a) => TApplication -> a
newTApplication :: CString -> (Ptr CInt) -> (Ptr CString) -> IO TApplication

module HROOT.Core.Deletable
class IDeletable a
delete :: IDeletable a => a -> IO ()

module HROOT.Core
getROOT :: IO TROOT
gROOT :: IO TROOT
gSystem :: IO TSystem
