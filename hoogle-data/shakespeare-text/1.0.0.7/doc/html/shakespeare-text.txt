-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interpolation with quasi-quotation: put variables strings
--   
--   interpolation with quasi-quotation: stick haskell variables into
--   haskell strings
--   
--   Note there is no dependency on haskell-src-extras. If you don't mind
--   that dependency, you may want to look at using these packages:
--   Interpolation, interpolatedstring-perl6, interpolatedstring-qq.
--   
--   This package has 1 other general feature that those others may not
--   (but would be easy to duplicate): instead of using quasi-quoting you
--   can also use an external file. It also has url/embeding interpolation,
--   with @ and ^, which are used in Yesod.
--   
--   This package also uses blaze-builder for efficiently constructing
--   strings (I am not sure what the other packages use). This might be of
--   interest to you for large templates or performance sensitive code, or
--   otherwise having a nice interface to blaze-builder
--   
--   Shakespeare is a template family for type-safe, efficient templates
--   with simple variable interpolation. Shakespeare templates can be used
--   inline with a quasi-quoter or in an external file. Shakespeare
--   interpolates variables according to the type being inserted. In this
--   case, the variable type needs a ToText instance.
--   
--   Please see
--   http:<i></i>www.yesodweb.com<i>book</i>shakespearean-templates for a
--   more thorough description and examples of the shakespeare family of
--   template languages.
@package shakespeare-text
@version 1.0.0.7

module Text.Shakespeare.Text
type TextUrl url = RenderUrl url -> Builder
class ToText a
toText :: ToText a => a -> Builder
renderTextUrl :: RenderUrl url -> TextUrl url -> Text
stext :: QuasiQuoter
text :: QuasiQuoter
textFile :: FilePath -> Q Exp

-- | <i>Deprecated: Please use textFileReload instead </i>
textFileDebug :: FilePath -> Q Exp
textFileReload :: FilePath -> Q Exp
st :: QuasiQuoter
lt :: QuasiQuoter

-- | codegen is designed for generating Yesod code, including templates So
--   it uses different interpolation characters that won't clash with
--   templates. You can use the normal text quasiquoters to generate code
codegen :: QuasiQuoter

-- | Generates strict Text codegen is designed for generating Yesod code,
--   including templates So it uses different interpolation characters that
--   won't clash with templates.
codegenSt :: QuasiQuoter
codegenFile :: FilePath -> Q Exp
codegenFileReload :: FilePath -> Q Exp
instance ToText Int64
instance ToText Int32
instance ToText Text
instance ToText Text
instance ToText [Char]
