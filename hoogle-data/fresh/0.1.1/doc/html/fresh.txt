-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Introduce fresh variables into Haskell source code
--   
--   This library provides functions for converting fresh variables of the
--   form <tt>Ident "@foo"</tt> into concrete variables that are globally
--   unique across an AST.
@package fresh
@version 0.1.1


-- | In the context of this library, a fresh variable has the form:
--   
--   <pre>
--   Ident "@foo"
--   </pre>
--   
--   where <a>Ident</a> is a constructor of the <a>Name</a> type from
--   Language.Haskell.Exts, and "foo" is the variable's name. A concrete
--   variable is any other variable that appears in the source code.
--   
--   To concretize a fresh variable means to remove the '@' character that
--   appears before its name and to rename the variable (keeping its
--   existing name as a prefix) so that it is globally unique across an
--   AST.
module Language.Haskell.Exts.Fresh

-- | Concretize all of the fresh variables appearing in the given
--   <a>Data</a> value (most likely a Haskell AST).
concretize :: Data a => a -> a

-- | Same as <a>concretize</a>, but returns the <a>ConflictTable</a> used
--   for concretization.
concretize' :: Data a => a -> (a, ConflictTable)

-- | Maps fresh variables with conflicting names to unique names that are
--   non-conflicting.
type ConflictTable = Map String String
