-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple, mindless parser for fasta files.
--   
@package fasta
@version 0.7.2.0


-- | Collects all application specific types. Used here for ByteString.Lazy
module Data.Fasta.ByteString.Lazy.Types
data FastaSequence
FastaSequence :: ByteString -> ByteString -> FastaSequence
fastaHeader :: FastaSequence -> ByteString
fastaSeq :: FastaSequence -> ByteString
type Clone = FastaSequence
type Germline = FastaSequence
type Codon = ByteString

-- | A clone is a collection of sequences derived from a germline with a
--   specific identifier
type CloneMap = Map (Int, Germline) [Clone]
class ShowFasta a
showFasta :: ShowFasta a => a -> ByteString
instance Eq FastaSequence
instance Ord FastaSequence
instance Show FastaSequence
instance ShowFasta FastaSequence


-- | Collection of functions for the parsing of a fasta file. Uses the lazy
--   - ByteString type.
module Data.Fasta.ByteString.Lazy.Parse

-- | Parse a standard fasta file into lazy text sequences
parseFasta :: ByteString -> [FastaSequence]

-- | Parse a CLIP fasta file into lazy text sequences
parseCLIPFasta :: ByteString -> CloneMap

-- | Parse a standard fasta file into strict text sequences for pipes. This
--   is the highly recommeded way of parsing, as it is computationally fast
--   and uses memory based on line length
pipesFasta :: MonadIO m => Producer ByteString m () -> Producer FastaSequence m ()

-- | Remove Ns from a collection of sequences
removeNs :: [FastaSequence] -> [FastaSequence]

-- | Remove Ns from a sequence
removeN :: FastaSequence -> FastaSequence

-- | Remove Ns from a collection of CLIP fasta sequences
removeCLIPNs :: CloneMap -> CloneMap


-- | Collects all functions pertaining to the translation of nucleotides to
--   amino acids for Lazy ByteString.
module Data.Fasta.ByteString.Lazy.Translation

-- | Lazy ByteString version of chunksOf
chunksOf :: Int64 -> ByteString -> [ByteString]

-- | Converts a codon to an amino acid Remember, if there is an <a>N</a> in
--   that DNA sequence, then it is invalid
codon2aa :: Codon -> Either ByteString ByteString

-- | Translates a string of nucleotides. Returns a text with the error if
--   the codon is invalid.
translate :: Int64 -> FastaSequence -> Either ByteString FastaSequence


-- | Collects all application specific functions and types. Used here for
--   Text.Lazy
module Data.Fasta.ByteString.Lazy


-- | Collects all application specific types. Used here for Text.
module Data.Fasta.ByteString.Types
data FastaSequence
FastaSequence :: ByteString -> ByteString -> FastaSequence
fastaHeader :: FastaSequence -> ByteString
fastaSeq :: FastaSequence -> ByteString
type Clone = FastaSequence
type Germline = FastaSequence
type Codon = ByteString

-- | A clone is a collection of sequences derived from a germline with a
--   specific identifier
type CloneMap = Map (Int, Germline) [Clone]
class ShowFasta a
showFasta :: ShowFasta a => a -> ByteString
instance Eq FastaSequence
instance Ord FastaSequence
instance Show FastaSequence
instance ShowFasta FastaSequence


-- | Collection of functions for the parsing of a fasta file. Uses the -
--   ByteString type.
module Data.Fasta.ByteString.Parse

-- | Parse a standard fasta file into text sequences
parseFasta :: ByteString -> [FastaSequence]

-- | Parse a CLIP fasta file into text sequences
parseCLIPFasta :: ByteString -> CloneMap

-- | Parse a standard fasta file into strict text sequences for pipes. This
--   is the highly recommeded way of parsing, as it is computationally fast
--   and uses memory based on line length
pipesFasta :: MonadIO m => Producer ByteString m () -> Producer FastaSequence m ()

-- | Remove Ns from a collection of sequences
removeNs :: [FastaSequence] -> [FastaSequence]

-- | Remove Ns from a sequence
removeN :: FastaSequence -> FastaSequence

-- | Remove Ns from a collection of CLIP fasta sequences
removeCLIPNs :: CloneMap -> CloneMap


-- | Collects all functions pertaining to the translation of nucleotides to
--   amino acids for ByteStrings
module Data.Fasta.ByteString.Translation

-- | ByteString version of chunksOf
chunksOf :: Int -> ByteString -> [ByteString]

-- | Converts a codon to an amino acid Remember, if there is an <a>N</a> in
--   that DNA sequence, then it is invalid
codon2aa :: Codon -> Either ByteString ByteString

-- | Translates a string of nucleotides. Returns a text with the error if
--   the codon is invalid.
translate :: Int -> FastaSequence -> Either ByteString FastaSequence


-- | Collects all application specific functions and types. Used here for
--   Text.
module Data.Fasta.ByteString


-- | Collects all application specific types. Used here for Text.Lazy
module Data.Fasta.Text.Lazy.Types
data FastaSequence
FastaSequence :: Text -> Text -> FastaSequence
fastaHeader :: FastaSequence -> Text
fastaSeq :: FastaSequence -> Text
type Clone = FastaSequence
type Germline = FastaSequence
type Codon = Text

-- | A clone is a collection of sequences derived from a germline with a
--   specific identifier
type CloneMap = Map (Int, Germline) [Clone]
class ShowFasta a
showFasta :: ShowFasta a => a -> Text
instance Eq FastaSequence
instance Ord FastaSequence
instance Show FastaSequence
instance ShowFasta FastaSequence


-- | Collection of functions for the parsing of a fasta file. Uses the lazy
--   Text type.
module Data.Fasta.Text.Lazy.Parse

-- | Parse a standard fasta file into lazy text sequences
parseFasta :: Text -> [FastaSequence]

-- | Parse a CLIP fasta file into lazy text sequences
parseCLIPFasta :: Text -> CloneMap

-- | Parse a standard fasta file into strict text sequences for pipes. This
--   is the highly recommeded way of parsing, as it is computationally fast
--   and uses memory based on line length
pipesFasta :: MonadIO m => Producer Text m () -> Producer FastaSequence m ()

-- | Remove Ns from a collection of sequences
removeNs :: [FastaSequence] -> [FastaSequence]

-- | Remove Ns from a sequence
removeN :: FastaSequence -> FastaSequence

-- | Remove Ns from a collection of CLIP fasta sequences
removeCLIPNs :: CloneMap -> CloneMap


-- | Collects all functions pertaining to the translation of nucleotides to
--   amino acids for Lazy Text.
module Data.Fasta.Text.Lazy.Translation

-- | Converts a codon to an amino acid Remember, if there is an <a>N</a> in
--   that DNA sequence, then it is invalid
codon2aa :: Codon -> Either Text Text

-- | Translates a string of nucleotides. Returns a text with the error if
--   the codon is invalid.
translate :: Int64 -> FastaSequence -> Either Text FastaSequence


-- | Collects all application specific functions and types. Used here for
--   Text.Lazy
module Data.Fasta.Text.Lazy


-- | Collects all application specific types. Used here for Text.
module Data.Fasta.Text.Types
data FastaSequence
FastaSequence :: Text -> Text -> FastaSequence
fastaHeader :: FastaSequence -> Text
fastaSeq :: FastaSequence -> Text
type Clone = FastaSequence
type Germline = FastaSequence
type Codon = Text

-- | A clone is a collection of sequences derived from a germline with a
--   specific identifier
type CloneMap = Map (Int, Germline) [Clone]
class ShowFasta a
showFasta :: ShowFasta a => a -> Text
instance Eq FastaSequence
instance Ord FastaSequence
instance Show FastaSequence
instance ShowFasta FastaSequence


-- | Collection of functions for the parsing of a fasta file. Uses the Text
--   type.
module Data.Fasta.Text.Parse

-- | Parse a standard fasta file into text sequences
parseFasta :: Text -> [FastaSequence]

-- | Parse a CLIP fasta file into text sequences
parseCLIPFasta :: Text -> CloneMap

-- | Parse a standard fasta file into strict text sequences for pipes. This
--   is the highly recommeded way of parsing, as it is computationally fast
--   and uses memory based on line length
pipesFasta :: MonadIO m => Producer Text m () -> Producer FastaSequence m ()

-- | Remove Ns from a collection of sequences
removeNs :: [FastaSequence] -> [FastaSequence]

-- | Remove Ns from a sequence
removeN :: FastaSequence -> FastaSequence

-- | Remove Ns from a collection of CLIP fasta sequences
removeCLIPNs :: CloneMap -> CloneMap


-- | Collects all functions pertaining to the translation of nucleotides to
--   amino acids for Text.
module Data.Fasta.Text.Translation

-- | Converts a codon to an amino acid Remember, if there is an <a>N</a> in
--   that DNA sequence, then it is invalid
codon2aa :: Codon -> Either Text Text

-- | Translates a string of nucleotides. Returns a text with the error if
--   the codon is invalid.
translate :: Int -> FastaSequence -> Either Text FastaSequence


-- | Collects all application specific functions and types. Used here for
--   Text.
module Data.Fasta.Text


-- | Collects all application specific types. Used here for strings.
module Data.Fasta.String.Types
data FastaSequence
FastaSequence :: String -> String -> FastaSequence
fastaHeader :: FastaSequence -> String
fastaSeq :: FastaSequence -> String
type Codon = String
type Clone = FastaSequence
type Germline = FastaSequence

-- | A clone is a collection of sequences derived from a germline with a
--   specific identifier
type CloneMap = Map (Int, Germline) [Clone]
class ShowFasta a
showFasta :: ShowFasta a => a -> String
instance Eq FastaSequence
instance Ord FastaSequence
instance Show FastaSequence
instance ShowFasta FastaSequence


-- | Collection of functions for the parsing of a fasta file. Uses the
--   string type.
module Data.Fasta.String.Parse

-- | Parse a standard fasta file into string sequences
parseFasta :: String -> [FastaSequence]

-- | Parse a CLIP fasta file into string sequences
parseCLIPFasta :: String -> CloneMap

-- | Parse a standard fasta file into string sequences for pipes. This is
--   the highly recommeded way of parsing, as it is computationally fast
--   and uses constant file memory
pipesFasta :: MonadIO m => Handle -> Pipe String FastaSequence m ()

-- | Remove Ns from a collection of sequences
removeNs :: [FastaSequence] -> [FastaSequence]

-- | Remove Ns from a sequence
removeN :: FastaSequence -> FastaSequence

-- | Remove Ns from a collection of CLIP fasta sequences
removeCLIPNs :: CloneMap -> CloneMap


-- | Collects all functions pertaining to the translation of nucleotides to
--   amino acids for strings.
module Data.Fasta.String.Translation

-- | Converts a codon to an amino acid Remember, if there is an <a>N</a> in
--   that DNA sequence, then it is invalid
codon2aa :: Codon -> Either String Char

-- | Translates a string of nucleotides. Returns a string with the error if
--   the codon is invalid.
translate :: Int -> FastaSequence -> Either String FastaSequence


-- | Collects all application functions and types. Used here for strings.
module Data.Fasta.String
