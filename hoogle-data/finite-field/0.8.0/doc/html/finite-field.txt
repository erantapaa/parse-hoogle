-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Finite Fields
--   
--   This is an implementation of finite fields. Currently only prime
--   fields are supported.
@package finite-field
@version 0.8.0


module Data.FiniteField.Base

-- | Type class for finite fields
class Fractional k => FiniteField k
order :: FiniteField k => k -> Integer
char :: FiniteField k => k -> Integer
pthRoot :: FiniteField k => k -> k
allValues :: FiniteField k => [k]


-- | Finite field of prime order p, Fp = Z/pZ.
--   
--   References:
--   
--   <ul>
--   <li><a>http://en.wikipedia.org/wiki/Finite_field</a></li>
--   </ul>
module Data.FiniteField.PrimeField

-- | Finite field of prime order p, Fp = Z/pZ.
--   
--   NB: Primality of <tt>p</tt> is assumed, but not checked.
data PrimeField p

-- | conversion to <a>Integer</a>
toInteger :: PrimeField p -> Integer

-- | Create a PrimeField type
primeField :: Integer -> TypeQ
instance Typeable1 PrimeField
instance Eq (PrimeField p)
instance Nat p => Hashable (PrimeField p)
instance Nat p => FiniteField (PrimeField p)
instance Ord (PrimeField p)
instance Nat p => Enum (PrimeField p)
instance Nat p => Bounded (PrimeField p)
instance Nat p => Fractional (PrimeField p)
instance Nat p => Num (PrimeField p)
instance NFData (PrimeField p)
instance Nat p => Read (PrimeField p)
instance Show (PrimeField p)


module Data.FiniteField
