-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Tools and a library for working with Trajectory.
--   
--   Trajectory <a>http://apptrajectory.com/</a> is a project estimation
--   and management tool for project managers, product managers,
--   developers, and designers. It is heavily inspired by, but improves
--   upon, Basecamp and Pivotal Tracker. Like Basecamp, it has a place to
--   organize ideas and exchange free-form feedback; like Pivotal Tracker
--   it has the concept of stories with points instead of time estimations,
--   and it calculates time estimations based on past performance. It also
--   weds the two concepts, connecting stories with ideas.
--   
--   This is a collection of tools and libraries for interacting with
--   Trajectory.
--   
--   It provides the <tt>lsstory</tt> tool, a command-line app that can
--   list stories, filtering by source idea, milestone, point, assignment,
--   whether design or development is needed; it can filter on the state
--   (unstarted, started, finished, done); it can filter on the iteration.
--   It can also be used simply to tell you the next unstarted, unassigned
--   development story to work on.
--   
--   To build more with this package, look into the <tt>Trajectory.API</tt>
--   module.
--   
--   Trajectory is made by thoughtbot <a>http://thoughtbot.com/</a>.
@package trajectory
@version 0.1.0.0

module Trajectory.Types

-- | Errors have been tagged according to their source, so you can more
--   easily dispatch and handle them.
data Error

-- | A HTTP error occurred. The actual caught error is included, if
--   available.
HTTPConnectionError :: IOException -> Error

-- | An error in the parser itself.
ParseError :: String -> Error

-- | The JSON is malformed or unexpected.
JsonError :: String -> Error

-- | Incorrect input.
UserError :: String -> Error

-- | A Trajectory story.
data Story
Story :: Bool -> Maybe Int -> Maybe String -> String -> Bool -> Bool -> Bool -> Int -> Maybe Int -> Int -> Int -> Int -> String -> String -> String -> String -> Int -> Int -> Maybe String -> String -> [String] -> Maybe String -> Story
storyArchived :: Story -> Bool
storyAssigneeId :: Story -> Maybe Int
storyBranch :: Story -> Maybe String
storyCreatedAt :: Story -> String
storyDeleted :: Story -> Bool
storyDesignNeeded :: Story -> Bool
storyDevelopmentNeeded :: Story -> Bool
storyId :: Story -> Int
storyIdeaId :: Story -> Maybe Int
storyIterationId :: Story -> Int
storyPoints :: Story -> Int
storyPosition :: Story -> Int
storyState :: Story -> String
storyTaskType :: Story -> String
storyTitle :: Story -> String
storyUpdatedAt :: Story -> String
storyUserId :: Story -> Int
storyCommentsCount :: Story -> Int
storyAssigneeName :: Story -> Maybe String
storyUserName :: Story -> String
storyStateEvents :: Story -> [String]
storyIdeaSubject :: Story -> Maybe String

-- | An iteration in Trajectory. The iterationStartsOn is the most
--   user-identifying string, though it changes with time. The
--   <tt>storyIterationId</tt> is the same as the <tt>iterationId</tt>.
data Iteration
Iteration :: Int -> Bool -> String -> Int -> Int -> Int -> String -> Int -> Int -> String -> Int -> Bool -> Int -> Int -> Int -> Int -> Int -> Iteration
iterationAcceptedPoints :: Iteration -> Int
iterationIsComplete :: Iteration -> Bool
iterationCreatedAt :: Iteration -> String
iterationEstimatedPoints :: Iteration -> Int
iterationEstimatedVelocity :: Iteration -> Int
iterationId :: Iteration -> Int
iterationStartsOn :: Iteration -> String
iterationStoriesCount :: Iteration -> Int
iterationTeamStrength :: Iteration -> Int
iterationUpdatedAt :: Iteration -> String
iterationPercentComplete :: Iteration -> Int
iterationIsCurrent :: Iteration -> Bool
iterationUnstartedStoriesCount :: Iteration -> Int
iterationAcceptedStoriesCount :: Iteration -> Int
iterationStartedStoriesCount :: Iteration -> Int
iterationDeliveredStoriesCount :: Iteration -> Int
iterationCommentsCount :: Iteration -> Int
instance Typeable Story
instance Typeable Iteration
instance Show Error
instance Eq Error
instance Show Story
instance Eq Story
instance Data Story
instance Show Iteration
instance Eq Iteration
instance Data Iteration


-- | The Trajectory API, or a subset of it at least. This mirrors the
--   underlying implementation, which ties stories to iterations.
module Trajectory.API

-- | Get all the incomplete stories and iterations for a given user key,
--   account name, and project name. Since stories and iterations are tied
--   together in the underlying API, this produces them as a pair.
--   
--   It produces an IO of either an error or the stories/iterations pair.
--   The error can come from the HTTP, or from non-JSON input, or from a
--   change to the JSON.
--   
--   <pre>
--   do
--     possibleStories &lt;- getStories "abcdefg" "thoughtbot" "opensource"
--     case possibleStories of
--       (Left error) -&gt; putStrLn $ "got the error: " ++ show error
--       (Right (stories,iterations)) -&gt;
--         putStrLn $ intercalate "\n" $
--           (map formatStory stories) ++ (map formatIteration iterations)
--   </pre>
getStories :: String -> String -> String -> IO (Either Error ([Story], [Iteration]))
instance Typeable Stories
instance Show Stories
instance Eq Stories
instance Data Stories
instance FromJSON Stories
instance FromJSON Iteration
instance FromJSON Story
