-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to the Apache Mesos platform.
--   
--   <a>Apache Mesos</a> is a cluster manager that simplifies the
--   complexity of running applications on a shared pool of servers.
--   
--   Note that this package currently requires <a>libmesos</a> to be
--   installed on your development system in order to build.
@package hs-mesos
@version 0.20.3.0

module System.Mesos.Types

-- | Describes a master. This will probably have more fields in the future
--   which might be used, for example, to link a framework web UI to a
--   master web UI.
data MasterInfo
[MasterInfo] :: !ByteString -> !Word32 -> !(Maybe Word32) -> !(Maybe ByteString) -> !(Maybe ByteString) -> MasterInfo
[masterInfoId'] :: MasterInfo -> !ByteString
[masterInfoIp] :: MasterInfo -> !Word32

-- | Defaults to 5050
[masterInfoPort] :: MasterInfo -> !(Maybe Word32)
[masterInfoPid] :: MasterInfo -> !(Maybe ByteString)
[masterInfoHostname] :: MasterInfo -> !(Maybe ByteString)
masterInfo :: ByteString -> Word32 -> MasterInfo

-- | Describes a slave. Note that the <tt>slaveInfoSlaveID</tt> field is
--   only available after a slave is registered with the master, and is
--   made available here to facilitate re-registration. If checkpoint is
--   set, the slave is checkpointing its own information and potentially
--   frameworks' information (if a framework has checkpointing enabled).
data SlaveInfo
[SlaveInfo] :: !ByteString -> !(Maybe Word32) -> ![Resource] -> ![(ByteString, Value)] -> !(Maybe SlaveID) -> !(Maybe Bool) -> SlaveInfo
[slaveInfoHostname] :: SlaveInfo -> !ByteString
[slaveInfoPort] :: SlaveInfo -> !(Maybe Word32)
[slaveInfoResources] :: SlaveInfo -> ![Resource]
[slaveInfoAttributes] :: SlaveInfo -> ![(ByteString, Value)]
[slaveInfoSlaveId] :: SlaveInfo -> !(Maybe SlaveID)
[slaveInfoCheckpoint] :: SlaveInfo -> !(Maybe Bool)
slaveInfo :: ByteString -> [Resource] -> [(ByteString, Value)] -> SlaveInfo
data ExecutorInfo
[ExecutorInfo] :: !ExecutorID -> !FrameworkID -> !CommandInfo -> !(Maybe ContainerInfo) -> ![Resource] -> !(Maybe ByteString) -> !(Maybe ByteString) -> !(Maybe ByteString) -> ExecutorInfo
[executorInfoExecutorId] :: ExecutorInfo -> !ExecutorID
[executorInfoFrameworkId] :: ExecutorInfo -> !FrameworkID
[executorInfoCommandInfo] :: ExecutorInfo -> !CommandInfo

-- | Executor provided with a container will launch the container with the
--   executor's <a>CommandInfo</a> and we expect the container to act as a
--   Mesos executor.
[executorInfoContainerInfo] :: ExecutorInfo -> !(Maybe ContainerInfo)
[executorInfoResources] :: ExecutorInfo -> ![Resource]
[executorInfoName] :: ExecutorInfo -> !(Maybe ByteString)

-- | Source is an identifier style string used by frameworks to track the
--   source of an executor. This is useful when it's possible for different
--   executor ids to be related semantically.
--   
--   NOTE: Source is exposed alongside the resource usage of the executor
--   via JSON on the slave. This allows users to import usage information
--   into a time series database for monitoring.
[executorInfoSource] :: ExecutorInfo -> !(Maybe ByteString)
[executorInfoData_] :: ExecutorInfo -> !(Maybe ByteString)
executorInfo :: ExecutorID -> FrameworkID -> CommandInfo -> [Resource] -> ExecutorInfo

-- | Describes a framework. If the user field is set to an empty string
--   Mesos will automagically set it to the current user. Note that the ID
--   is only available after a framework has registered, however, it is
--   included here in order to facilitate scheduler failover (i.e., if it
--   is set then the <a>SchedulerDriver</a> expects the scheduler is
--   performing failover). The amount of time that the master will wait for
--   the scheduler to failover before removing the framework is specified
--   by <tt>frameworkFailoverTimeout</tt>. If <tt>frameworkCheckpoint</tt>
--   is set, framework pid, executor pids and status updates are
--   checkpointed to disk by the slaves. Checkpointing allows a restarted
--   slave to reconnect with old executors and recover status updates, at
--   the cost of disk I/O. The <tt>frameworkRole</tt> field is used to
--   group frameworks for allocation decisions, depending on the allocation
--   policy being used. If the <tt>frameworkHostname</tt> field is set to
--   an empty string Mesos will automagically set it to the current
--   hostname.
data FrameworkInfo
[FrameworkInfo] :: !ByteString -> !ByteString -> !(Maybe FrameworkID) -> !(Maybe Double) -> !(Maybe Bool) -> !(Maybe ByteString) -> !(Maybe ByteString) -> !(Maybe ByteString) -> FrameworkInfo
[frameworkInfoUser] :: FrameworkInfo -> !ByteString
[frameworkInfoName] :: FrameworkInfo -> !ByteString
[frameworkInfoId'] :: FrameworkInfo -> !(Maybe FrameworkID)
[frameworkInfoFailoverTimeout] :: FrameworkInfo -> !(Maybe Double)
[frameworkInfoCheckpoint] :: FrameworkInfo -> !(Maybe Bool)
[frameworkInfoRole] :: FrameworkInfo -> !(Maybe ByteString)
[frameworkInfoHostname] :: FrameworkInfo -> !(Maybe ByteString)
[frameworkInfoPrincipal] :: FrameworkInfo -> !(Maybe ByteString)
frameworkInfo :: ByteString -> ByteString -> FrameworkInfo

-- | Describes some resources available on a slave. An offer only contains
--   resources from a single slave.
data Offer
[Offer] :: !OfferID -> !FrameworkID -> !SlaveID -> !ByteString -> ![Resource] -> ![(ByteString, Value)] -> ![ExecutorID] -> Offer
[offerId'] :: Offer -> !OfferID
[offerFrameworkId] :: Offer -> !FrameworkID
[offerSlaveId] :: Offer -> !SlaveID
[offerHostname] :: Offer -> !ByteString
[offerResources] :: Offer -> ![Resource]
[offerAttributes] :: Offer -> ![(ByteString, Value)]
[offerExecutorIds] :: Offer -> ![ExecutorID]

-- | Describes a request for resources that can be used by a framework to
--   proactively influence the allocator.
data Request
[Request] :: !(Maybe SlaveID) -> ![Resource] -> Request

-- | If value is provided, then this request is assumed to only apply to
--   resources on the given slave.
[requestSlaveId] :: Request -> !(Maybe SlaveID)
[requestResources] :: Request -> ![Resource]
newtype Filters
[Filters] :: Maybe Double -> Filters

-- | Time to consider unused resources refused. Note that all unused
--   resources will be considered refused and use the default value (below)
--   regardless of whether Filters was passed to
--   SchedulerDriver::launchTasks. You MUST pass Filters with this field
--   set to change this behavior (i.e., get another offer which includes
--   unused resources sooner or later than the default).
--   
--   Defaults to 5.0 if not set.
[filtersRefuseSeconds] :: Filters -> Maybe Double
filters :: Filters

-- | Describes a task. Passed from the scheduler all the way to an executor
--   (see SchedulerDriver::launchTasks and Executor::launchTask).
--   
--   A different executor can be used to launch this task, and subsequent
--   tasks meant for the same executor can reuse the same ExecutorInfo
--   struct.
data TaskInfo
[TaskInfo] :: !ByteString -> !TaskID -> !SlaveID -> ![Resource] -> !TaskExecutionInfo -> !(Maybe ByteString) -> !(Maybe ContainerInfo) -> !(Maybe HealthCheck) -> TaskInfo
[taskInfoName] :: TaskInfo -> !ByteString
[taskInfoId'] :: TaskInfo -> !TaskID
[taskInfoSlaveId] :: TaskInfo -> !SlaveID
[taskInfoResources] :: TaskInfo -> ![Resource]
[taskInfoImplementation] :: TaskInfo -> !TaskExecutionInfo
[taskInfoData_] :: TaskInfo -> !(Maybe ByteString)

-- | Task provided with a container will launch the container as part of
--   this task paired with the task's CommandInfo.
[taskInfoContainer] :: TaskInfo -> !(Maybe ContainerInfo)

-- | A health check for the task (currently in *alpha* and initial support
--   will only be for TaskInfo's that have a CommandInfo).
[taskInfoHealthCheck] :: TaskInfo -> !(Maybe HealthCheck)
taskInfo :: ByteString -> TaskID -> SlaveID -> [Resource] -> TaskExecutionInfo -> TaskInfo
data TaskExecutionInfo
[TaskCommand] :: !CommandInfo -> TaskExecutionInfo
[TaskExecutor] :: !ExecutorInfo -> TaskExecutionInfo

-- | Describes a command, executed via:
--   
--   <pre>
--   /bin/sh -c value
--   </pre>
--   
--   Any URIs specified are fetched before executing the command. If the
--   executable field for an uri is set, executable file permission is set
--   on the downloaded file. Otherwise, if the downloaded file has a
--   recognized archive extension (currently [compressed] tar and zip) it
--   is extracted into the executor's working directory. In addition, any
--   environment variables are set before executing the command (so they
--   can be used to "parameterize" your command).
data CommandInfo
[CommandInfo] :: ![CommandURI] -> !(Maybe [(ByteString, ByteString)]) -> !CommandValue -> !(Maybe ByteString) -> CommandInfo
[commandInfoUris] :: CommandInfo -> ![CommandURI]
[commandInfoEnvironment] :: CommandInfo -> !(Maybe [(ByteString, ByteString)])
[commandInfoValue] :: CommandInfo -> !CommandValue

-- | Enables executor and tasks to run as a specific user. If the user
--   field is present both in <a>FrameworkInfo</a> and here, the
--   <a>CommandInfo</a> user value takes precedence.
[commandInfoUser] :: CommandInfo -> !(Maybe ByteString)
commandInfo :: CommandValue -> CommandInfo
data CommandURI
[CommandURI] :: !ByteString -> !(Maybe Bool) -> !(Maybe Bool) -> CommandURI
[commandURIValue] :: CommandURI -> !ByteString
[commandURIExecutable] :: CommandURI -> !(Maybe Bool)
[commandURIExtract] :: CommandURI -> !(Maybe Bool)
commandURI :: ByteString -> CommandURI
data CommandValue
[ShellCommand] :: !ByteString -> CommandValue
[RawCommand] :: !ByteString -> ![ByteString] -> CommandValue
data Value
[Scalar] :: !Double -> Value
[Ranges] :: ![(Word64, Word64)] -> Value
[Set] :: ![ByteString] -> Value
[Text] :: !ByteString -> Value

-- | Describes a resource on a machine. A resource can take on one of three
--   types: scalar (double), a list of finite and discrete ranges (e.g.,
--   [1-10, 20-30]), or a set of items.
--   
--   N.B. there is a slight deviation from the C++ API: the Haskell
--   bindings convert <a>Text</a> values into a single element <a>Set</a>
--   value in order to avoid having to expose yet another data type.
data Resource
[Resource] :: !ByteString -> !Value -> !(Maybe ByteString) -> Resource
[resourceName] :: Resource -> !ByteString
[resourceValue] :: Resource -> !Value
[resourceRole] :: Resource -> !(Maybe ByteString)
resource :: ByteString -> Value -> Resource

-- | Indicates the state of the scheduler and executor driver after
--   function calls.
data Status
[NotStarted] :: Status
[Running] :: Status
[Aborted] :: Status
[Stopped] :: Status

-- | Describes the current status of a task.
data TaskStatus
[TaskStatus] :: !TaskID -> !TaskState -> !(Maybe ByteString) -> !(Maybe ByteString) -> !(Maybe SlaveID) -> !(Maybe ExecutorID) -> !(Maybe Double) -> !(Maybe Bool) -> TaskStatus
[taskStatusTaskId] :: TaskStatus -> !TaskID
[taskStatusState] :: TaskStatus -> !TaskState

-- | Possible message explaining state.
[taskStatusMessage] :: TaskStatus -> !(Maybe ByteString)
[taskStatusData_] :: TaskStatus -> !(Maybe ByteString)
[taskStatusSlaveId] :: TaskStatus -> !(Maybe SlaveID)
[taskStatusExecutorId] :: TaskStatus -> !(Maybe ExecutorID)
[taskStatusTimestamp] :: TaskStatus -> !(Maybe Double)

-- | Describes whether the task has been determined to be healthy (true) or
--   unhealthy (false) according to the HealthCheck field in the command
--   info.
[taskStatusHealthy] :: TaskStatus -> !(Maybe Bool)

-- | Describes possible task states. IMPORTANT: Mesos assumes tasks that
--   enter terminal states (see below) imply the task is no longer running
--   and thus clean up any thing associated with the task (ultimately
--   offering any resources being consumed by that task to another task).
data TaskState

-- | Initial state. Framework status updates should not use.
[Staging] :: TaskState
[Starting] :: TaskState
[TaskRunning] :: TaskState

-- | TERMINAL.
[Finished] :: TaskState

-- | TERMINAL.
[Failed] :: TaskState

-- | TERMINAL.
[Killed] :: TaskState

-- | TERMINAL.
[Lost] :: TaskState
isTerminal :: TaskState -> Bool

-- | A unique ID assigned to a framework. A framework can reuse this ID in
--   order to do failover.
newtype FrameworkID
[FrameworkID] :: ByteString -> FrameworkID
[frameworkIDId'] :: FrameworkID -> ByteString

-- | A unique ID assigned to a slave. Currently, a slave gets a new ID
--   whenever it (re)registers with Mesos. Framework writers shouldn't
--   assume any binding between a slave ID and and a hostname.
newtype SlaveID
[SlaveID] :: ByteString -> SlaveID
[slaveIDId'] :: SlaveID -> ByteString

-- | A unique ID assigned to an offer.
newtype OfferID
[OfferID] :: ByteString -> OfferID
[offerIDId'] :: OfferID -> ByteString

-- | A framework generated ID to distinguish a task. The ID must remain
--   unique while the task is active. However, a framework can reuse an ID
--   _only_ if a previous task with the same ID has reached a terminal
--   state (e.g., <a>Finished</a>, <a>Lost</a>, <a>Killed</a>, etc.). See
--   <a>isTerminal</a> for a utility function to simplify checking task
--   state.
newtype TaskID
[TaskID] :: ByteString -> TaskID
[taskIDId'] :: TaskID -> ByteString

-- | A framework generated ID to distinguish an executor. Only one executor
--   with the same ID can be active on the same slave at a time.
newtype ExecutorID
[ExecutorID] :: ByteString -> ExecutorID
[executorIDId'] :: ExecutorID -> ByteString

-- | A slave generated ID to distinguish a container. The ID must be unique
--   between any active or completed containers on the slave. In
--   particular, containers for different runs of the same (framework,
--   executor) pair must be unique.
newtype ContainerID
[ContainerID] :: ByteString -> ContainerID
[containerIDId'] :: ContainerID -> ByteString
data ContainerInfo
[ContainerInfo] :: !ContainerType -> ![Volume] -> ContainerInfo
[containerInfoContainerType] :: ContainerInfo -> !ContainerType
[containerInfoVolumes] :: ContainerInfo -> ![Volume]
data Volume
[Volume] :: !ByteString -> !(Maybe ByteString) -> !Mode -> Volume
[volumeContainerPath] :: Volume -> !ByteString
[volumeHostPath] :: Volume -> !(Maybe ByteString)
[volumeMode] :: Volume -> !Mode
data Mode

-- | Mount the volume in R/W mode
[ReadWrite] :: Mode

-- | Mount the volume as read-only
[ReadOnly] :: Mode
data ContainerType
[Docker] :: ByteString -> ContainerType
[dockerImage] :: ContainerType -> ByteString

-- | Not technically a container type. Represents the 'type' enum field if
--   we get a container type that isn't Docker (e.g. from Mesos releases
--   &gt; 0.20)
[Unknown] :: Int -> ContainerType
data HealthCheck
[HealthCheck] :: !HealthCheckStrategy -> !(Maybe Double) -> !(Maybe Double) -> !(Maybe Double) -> !(Maybe Word32) -> !(Maybe Double) -> HealthCheck
[healthCheckStrategy] :: HealthCheck -> !HealthCheckStrategy

-- | Amount of time to wait until starting the health checks.
[healthCheckDelaySeconds] :: HealthCheck -> !(Maybe Double)

-- | Interval between health checks.
[healthCheckIntervalSeconds] :: HealthCheck -> !(Maybe Double)

-- | Amount of time to wait for the health check to complete.
[healthCheckTimeoutSeconds] :: HealthCheck -> !(Maybe Double)

-- | Number of consecutive failures until considered unhealthy.
[healthCheckConsecutiveFailures] :: HealthCheck -> !(Maybe Word32)

-- | Amount of time to allow failed health checks since launch.
[healthCheckGracePeriodSeconds] :: HealthCheck -> !(Maybe Double)
data HealthCheckStrategy
[HTTPCheck] :: !Word32 -> !(Maybe ByteString) -> ![Word32] -> HealthCheckStrategy

-- | Port to send the HTTP request.
[healthCheckStrategyPort] :: HealthCheckStrategy -> !Word32

-- | HTTP request path. (defaults to <tt>"/"</tt>.
[healthCheckStrategyPath] :: HealthCheckStrategy -> !(Maybe ByteString)

-- | Expected response statuses. Not specifying any statuses implies that
--   any returned status is acceptable.
[healthCheckStrategyStatuses] :: HealthCheckStrategy -> ![Word32]
[CommandCheck] :: !CommandInfo -> HealthCheckStrategy

-- | Command health check.
[healthCheckStrategyCommand] :: HealthCheckStrategy -> !CommandInfo
data ResourceStatistics
[ResourceStatistics] :: !Double -> !(Maybe Double) -> !(Maybe Double) -> !Double -> !(Maybe Word32) -> !(Maybe Word32) -> !(Maybe Double) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe PerformanceStatistics) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> ResourceStatistics
[resourceStatisticsTimestamp] :: ResourceStatistics -> !Double

-- | Total CPU time spent in user mode
[resourceStatisticsCpusUserTimeSecs] :: ResourceStatistics -> !(Maybe Double)

-- | Total CPU time spent in kernel mode.
[resourceStatisticsCpusSystemTimeSecs] :: ResourceStatistics -> !(Maybe Double)

-- | Number of CPUs allocated.
[resourceStatisticsCpusLimit] :: ResourceStatistics -> !Double

-- | cpu.stat on process throttling (for contention issues).
[resourceStatisticsCpusPeriods] :: ResourceStatistics -> !(Maybe Word32)

-- | cpu.stat on process throttling (for contention issues).
[resourceStatisticsCpusThrottled] :: ResourceStatistics -> !(Maybe Word32)

-- | cpu.stat on process throttling (for contention issues).
[resourceStatisticsCpusThrottledTimeSecs] :: ResourceStatistics -> !(Maybe Double)

-- | Resident set size
[resourceStatisticsMemoryResidentSetSize] :: ResourceStatistics -> !(Maybe Word64)

-- | Amount of memory resources allocated.
[resourceStatisticsMemoryLimitBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsMemoryFileBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsMemoryAnonymousBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsMemoryMappedFileBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsPerformanceStatistics] :: ResourceStatistics -> !(Maybe PerformanceStatistics)
[resourceStatisticsNetRxPackets] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetRxBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetRxErrors] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetRxDropped] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetTxPackets] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetTxBytes] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetTxErrors] :: ResourceStatistics -> !(Maybe Word64)
[resourceStatisticsNetTxDropped] :: ResourceStatistics -> !(Maybe Word64)

-- | Describes a snapshot of the resource usage for an executor.
--   
--   Resource usage is for an executor. For tasks launched with an explicit
--   executor, the executor id is provided. For tasks launched without an
--   executor, our internal executor will be used. In this case, we provide
--   the task id here instead, in order to make this message easier for
--   schedulers to work with.
data ResourceUsage
[ResourceUsage] :: !SlaveID -> !FrameworkID -> !(Maybe ExecutorID) -> !(Maybe ByteString) -> !(Maybe TaskID) -> !(Maybe ResourceStatistics) -> ResourceUsage
[resourceUsageSlaveId] :: ResourceUsage -> !SlaveID
[resourceUsageFrameworkId] :: ResourceUsage -> !FrameworkID

-- | If present, this executor was explicitly specified.
[resourceUsageExecutorId] :: ResourceUsage -> !(Maybe ExecutorID)

-- | If present, this executor was explicitly specified.
[resourceUsageExecutorName] :: ResourceUsage -> !(Maybe ByteString)

-- | If present, this task did not have an executor.
[resourceUsageTaskId] :: ResourceUsage -> !(Maybe TaskID)

-- | If missing, the isolation module cannot provide resource usage.
[resourceUsageStatistics] :: ResourceUsage -> !(Maybe ResourceStatistics)
data PerformanceStatistics
[PerformanceStatistics] :: !Double -> !Double -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Double) -> !(Maybe Double) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> !(Maybe Word64) -> PerformanceStatistics

-- | Start of sample interval, in seconds since the Epoch.
[performanceStatisticsTimestamp] :: PerformanceStatistics -> !Double

-- | Duration of sample interval, in seconds.
[performanceStatisticsDuration] :: PerformanceStatistics -> !Double

-- | Hardware events
[performanceStatisticsCycles] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsStalledCyclesFrontend] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsStalledCyclesBackend] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsInstructions] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsCacheReferences] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsCacheMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBranches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBranchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBusCycles] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsRefCycles] :: PerformanceStatistics -> !(Maybe Word64)

-- | Software events
[performanceStatisticsCpuClock] :: PerformanceStatistics -> !(Maybe Double)
[performanceStatisticsTaskClock] :: PerformanceStatistics -> !(Maybe Double)
[performanceStatisticsPageFaults] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsMinorFaults] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsMajorFaults] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsContextSwitches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsCpuMigrations] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsAlignmentFaults] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsEmulationFaults] :: PerformanceStatistics -> !(Maybe Word64)

-- | Hardware cache events
[performanceStatisticsL1DcacheLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcacheLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcacheStores] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcacheStoreMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcachePrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1DcachePrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1IcacheLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1IcacheLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1IcachePrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsL1IcachePrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcStores] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcStoreMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcPrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsLlcPrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbStores] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbStoreMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbPrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsDtlbPrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsItlbLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsItlbLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBranchLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsBranchLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodeLoads] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodeLoadMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodeStores] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodeStoreMisses] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodePrefetches] :: PerformanceStatistics -> !(Maybe Word64)
[performanceStatisticsNodePrefetchMisses] :: PerformanceStatistics -> !(Maybe Word64)

-- | Credential used for authentication.
--   
--   NOTE: <a>credentialPrincipal</a> is used for authenticating the
--   framework with the master. This is different from
--   <tt>frameworkUser</tt> which is used to determine the user under which
--   the framework's executors/tasks are run.
data Credential
[Credential] :: !ByteString -> !(Maybe ByteString) -> Credential
[credentialPrincipal] :: Credential -> !ByteString
[credentialSecret] :: Credential -> !(Maybe ByteString)
credential :: ByteString -> Credential
instance Eq TaskInfo
instance Show TaskInfo
instance Show TaskExecutionInfo
instance Eq TaskExecutionInfo
instance Eq ExecutorInfo
instance Show ExecutorInfo
instance Eq ContainerInfo
instance Show ContainerInfo
instance Eq ContainerType
instance Show ContainerType
instance Eq Volume
instance Show Volume
instance Eq Mode
instance Show Mode
instance Eq RateLimits
instance Show RateLimits
instance Eq RateLimit
instance Show RateLimit
instance Eq ACLSettings
instance Show ACLSettings
instance Eq ShutdownFrameworkACL
instance Show ShutdownFrameworkACL
instance Eq RunTaskACL
instance Show RunTaskACL
instance Eq RegisterFrameworkACL
instance Show RegisterFrameworkACL
instance Eq ACLEntity
instance Show ACLEntity
instance Eq Credential
instance Show Credential
instance Eq TaskStatus
instance Show TaskStatus
instance Eq Offer
instance Show Offer
instance Eq Request
instance Show Request
instance Eq ResourceUsage
instance Show ResourceUsage
instance Eq ResourceStatistics
instance Show ResourceStatistics
instance Eq PerformanceStatistics
instance Show PerformanceStatistics
instance Eq SlaveInfo
instance Show SlaveInfo
instance Eq Resource
instance Show Resource
instance Eq Value
instance Show Value
instance Eq Filters
instance Show Filters
instance Eq MasterInfo
instance Show MasterInfo
instance Eq HealthCheck
instance Show HealthCheck
instance Eq HealthCheckStrategy
instance Show HealthCheckStrategy
instance Eq CommandInfo
instance Show CommandInfo
instance Eq CommandValue
instance Show CommandValue
instance Eq CommandURI
instance Show CommandURI
instance Eq FrameworkInfo
instance Show FrameworkInfo
instance IsString ContainerID
instance Eq ContainerID
instance Show ContainerID
instance IsString ExecutorID
instance Eq ExecutorID
instance Show ExecutorID
instance IsString TaskID
instance Eq TaskID
instance Show TaskID
instance IsString SlaveID
instance Eq SlaveID
instance Show SlaveID
instance IsString OfferID
instance Eq OfferID
instance Show OfferID
instance IsString FrameworkID
instance Eq FrameworkID
instance Show FrameworkID
instance Eq Status
instance Show Status
instance Eq TaskState
instance Show TaskState
instance Enum TaskState
instance Enum Status
instance Enum Mode

module System.Mesos.Resources
newtype Resources
[Resources] :: [Resource] -> Resources
[fromResources] :: Resources -> [Resource]
value :: Lens' Resource Value
scalar :: Prism' Value Double
ranges :: Prism' Value [(Word64, Word64)]
set :: Prism' Value [ByteString]
text :: Prism' Value ByteString
cpus :: Prism' Resource Double
mem :: Prism' Resource Double
disk :: Prism' Resource Double
ports :: Prism' Resource [(Word64, Word64)]
flattened :: Getter [Resource] [Resource]
instance Show Resources
instance Eq Resources
instance Wrapped Resources
instance (t ~ Resources) => Rewrapped Resources t
instance Ord Resources

module System.Mesos.TaskStatus
taskStatus :: TaskID -> TaskState -> TaskStatus


-- | Currently just raw TH-generated <tt>Lens</tt>es and <tt>Prism</tt>s.
--   FUNCTION &amp; CLASS NAMES IN THIS FILE ARE EXTREMELY LIKELY TO CHANGE
--   IN FUTURE RELEASES.
module System.Mesos.Lens
_Lost :: Prism' TaskState ()
_Killed :: Prism' TaskState ()
_Failed :: Prism' TaskState ()
_Finished :: Prism' TaskState ()
_TaskRunning :: Prism' TaskState ()
_Starting :: Prism' TaskState ()
_Staging :: Prism' TaskState ()
_Stopped :: Prism' Status ()
_Aborted :: Prism' Status ()
_Running :: Prism' Status ()
_NotStarted :: Prism' Status ()
class HasId' s a | s -> a
id' :: HasId' s a => Lens' s a
class HasCheckpoint s a | s -> a
checkpoint :: HasCheckpoint s a => Lens' s a
class HasFailoverTimeout s a | s -> a
failoverTimeout :: HasFailoverTimeout s a => Lens' s a
class HasHostname s a | s -> a
hostname :: HasHostname s a => Lens' s a
class HasName s a | s -> a
name :: HasName s a => Lens' s a
class HasPrincipal s a | s -> a
principal :: HasPrincipal s a => Lens' s a
class HasRole s a | s -> a
role :: HasRole s a => Lens' s a
class HasUser s a | s -> a
user :: HasUser s a => Lens' s a
class HasCommand s a | s -> a
command :: HasCommand s a => Traversal' s a
class HasPath s a | s -> a
path :: HasPath s a => Traversal' s a
class HasPort s a | s -> a
port :: HasPort s a => Traversal' s a
class HasStatuses s a | s -> a
statuses :: HasStatuses s a => Traversal' s a
_CommandCheck :: Prism' HealthCheckStrategy CommandInfo
_HTTPCheck :: Prism' HealthCheckStrategy (Word32, Maybe ByteString, [Word32])
class HasConsecutiveFailures s a | s -> a
consecutiveFailures :: HasConsecutiveFailures s a => Lens' s a
class HasDelaySeconds s a | s -> a
delaySeconds :: HasDelaySeconds s a => Lens' s a
class HasGracePeriodSeconds s a | s -> a
gracePeriodSeconds :: HasGracePeriodSeconds s a => Lens' s a
class HasIntervalSeconds s a | s -> a
intervalSeconds :: HasIntervalSeconds s a => Lens' s a
class HasStrategy s a | s -> a
strategy :: HasStrategy s a => Lens' s a
class HasTimeoutSeconds s a | s -> a
timeoutSeconds :: HasTimeoutSeconds s a => Lens' s a
class HasEnvironment s a | s -> a
environment :: HasEnvironment s a => Lens' s a
class HasUris s a | s -> a
uris :: HasUris s a => Lens' s a
class HasValue s a | s -> a
value :: HasValue s a => Lens' s a
class HasExecutable s a | s -> a
executable :: HasExecutable s a => Lens' s a
class HasExtract s a | s -> a
extract :: HasExtract s a => Lens' s a
_RawCommand :: Prism' CommandValue (ByteString, [ByteString])
_ShellCommand :: Prism' CommandValue ByteString
class HasCommandInfo s a | s -> a
commandInfo :: HasCommandInfo s a => Lens' s a
class HasContainerInfo s a | s -> a
containerInfo :: HasContainerInfo s a => Lens' s a
class HasData_ s a | s -> a
data_ :: HasData_ s a => Lens' s a
class HasExecutorId s a | s -> a
executorId :: HasExecutorId s a => Lens' s a
class HasFrameworkId s a | s -> a
frameworkId :: HasFrameworkId s a => Lens' s a
class HasResources s a | s -> a
resources :: HasResources s a => Lens' s a
class HasSource s a | s -> a
source :: HasSource s a => Lens' s a
class HasIp s a | s -> a
ip :: HasIp s a => Lens' s a
class HasPid s a | s -> a
pid :: HasPid s a => Lens' s a
class HasAttributes s a | s -> a
attributes :: HasAttributes s a => Lens' s a
class HasSlaveId s a | s -> a
slaveId :: HasSlaveId s a => Lens' s a
class HasRefuseSeconds s a | s -> a
refuseSeconds :: HasRefuseSeconds s a => Lens' s a
_Text :: Prism' Value ByteString
_Set :: Prism' Value [ByteString]
_Ranges :: Prism' Value [(Word64, Word64)]
_Scalar :: Prism' Value Double
class HasCpusLimit s a | s -> a
cpusLimit :: HasCpusLimit s a => Lens' s a
class HasCpusPeriods s a | s -> a
cpusPeriods :: HasCpusPeriods s a => Lens' s a
class HasCpusSystemTimeSecs s a | s -> a
cpusSystemTimeSecs :: HasCpusSystemTimeSecs s a => Lens' s a
class HasCpusThrottled s a | s -> a
cpusThrottled :: HasCpusThrottled s a => Lens' s a
class HasCpusThrottledTimeSecs s a | s -> a
cpusThrottledTimeSecs :: HasCpusThrottledTimeSecs s a => Lens' s a
class HasCpusUserTimeSecs s a | s -> a
cpusUserTimeSecs :: HasCpusUserTimeSecs s a => Lens' s a
class HasMemoryAnonymousBytes s a | s -> a
memoryAnonymousBytes :: HasMemoryAnonymousBytes s a => Lens' s a
class HasMemoryFileBytes s a | s -> a
memoryFileBytes :: HasMemoryFileBytes s a => Lens' s a
class HasMemoryLimitBytes s a | s -> a
memoryLimitBytes :: HasMemoryLimitBytes s a => Lens' s a
class HasMemoryMappedFileBytes s a | s -> a
memoryMappedFileBytes :: HasMemoryMappedFileBytes s a => Lens' s a
class HasMemoryResidentSetSize s a | s -> a
memoryResidentSetSize :: HasMemoryResidentSetSize s a => Lens' s a
class HasNetRxBytes s a | s -> a
netRxBytes :: HasNetRxBytes s a => Lens' s a
class HasNetRxDropped s a | s -> a
netRxDropped :: HasNetRxDropped s a => Lens' s a
class HasNetRxErrors s a | s -> a
netRxErrors :: HasNetRxErrors s a => Lens' s a
class HasNetRxPackets s a | s -> a
netRxPackets :: HasNetRxPackets s a => Lens' s a
class HasNetTxBytes s a | s -> a
netTxBytes :: HasNetTxBytes s a => Lens' s a
class HasNetTxDropped s a | s -> a
netTxDropped :: HasNetTxDropped s a => Lens' s a
class HasNetTxErrors s a | s -> a
netTxErrors :: HasNetTxErrors s a => Lens' s a
class HasNetTxPackets s a | s -> a
netTxPackets :: HasNetTxPackets s a => Lens' s a
class HasPerformanceStatistics s a | s -> a
performanceStatistics :: HasPerformanceStatistics s a => Lens' s a
class HasTimestamp s a | s -> a
timestamp :: HasTimestamp s a => Lens' s a
class HasExecutorName s a | s -> a
executorName :: HasExecutorName s a => Lens' s a
class HasStatistics s a | s -> a
statistics :: HasStatistics s a => Lens' s a
class HasTaskId s a | s -> a
taskId :: HasTaskId s a => Lens' s a
class HasAlignmentFaults s a | s -> a
alignmentFaults :: HasAlignmentFaults s a => Lens' s a
class HasBranchLoadMisses s a | s -> a
branchLoadMisses :: HasBranchLoadMisses s a => Lens' s a
class HasBranchLoads s a | s -> a
branchLoads :: HasBranchLoads s a => Lens' s a
class HasBranchMisses s a | s -> a
branchMisses :: HasBranchMisses s a => Lens' s a
class HasBranches s a | s -> a
branches :: HasBranches s a => Lens' s a
class HasBusCycles s a | s -> a
busCycles :: HasBusCycles s a => Lens' s a
class HasCacheMisses s a | s -> a
cacheMisses :: HasCacheMisses s a => Lens' s a
class HasCacheReferences s a | s -> a
cacheReferences :: HasCacheReferences s a => Lens' s a
class HasContextSwitches s a | s -> a
contextSwitches :: HasContextSwitches s a => Lens' s a
class HasCpuClock s a | s -> a
cpuClock :: HasCpuClock s a => Lens' s a
class HasCpuMigrations s a | s -> a
cpuMigrations :: HasCpuMigrations s a => Lens' s a
class HasCycles s a | s -> a
cycles :: HasCycles s a => Lens' s a
class HasDtlbLoadMisses s a | s -> a
dtlbLoadMisses :: HasDtlbLoadMisses s a => Lens' s a
class HasDtlbLoads s a | s -> a
dtlbLoads :: HasDtlbLoads s a => Lens' s a
class HasDtlbPrefetchMisses s a | s -> a
dtlbPrefetchMisses :: HasDtlbPrefetchMisses s a => Lens' s a
class HasDtlbPrefetches s a | s -> a
dtlbPrefetches :: HasDtlbPrefetches s a => Lens' s a
class HasDtlbStoreMisses s a | s -> a
dtlbStoreMisses :: HasDtlbStoreMisses s a => Lens' s a
class HasDtlbStores s a | s -> a
dtlbStores :: HasDtlbStores s a => Lens' s a
class HasDuration s a | s -> a
duration :: HasDuration s a => Lens' s a
class HasEmulationFaults s a | s -> a
emulationFaults :: HasEmulationFaults s a => Lens' s a
class HasInstructions s a | s -> a
instructions :: HasInstructions s a => Lens' s a
class HasItlbLoadMisses s a | s -> a
itlbLoadMisses :: HasItlbLoadMisses s a => Lens' s a
class HasItlbLoads s a | s -> a
itlbLoads :: HasItlbLoads s a => Lens' s a
class HasL1DcacheLoadMisses s a | s -> a
l1DcacheLoadMisses :: HasL1DcacheLoadMisses s a => Lens' s a
class HasL1DcacheLoads s a | s -> a
l1DcacheLoads :: HasL1DcacheLoads s a => Lens' s a
class HasL1DcachePrefetchMisses s a | s -> a
l1DcachePrefetchMisses :: HasL1DcachePrefetchMisses s a => Lens' s a
class HasL1DcachePrefetches s a | s -> a
l1DcachePrefetches :: HasL1DcachePrefetches s a => Lens' s a
class HasL1DcacheStoreMisses s a | s -> a
l1DcacheStoreMisses :: HasL1DcacheStoreMisses s a => Lens' s a
class HasL1DcacheStores s a | s -> a
l1DcacheStores :: HasL1DcacheStores s a => Lens' s a
class HasL1IcacheLoadMisses s a | s -> a
l1IcacheLoadMisses :: HasL1IcacheLoadMisses s a => Lens' s a
class HasL1IcacheLoads s a | s -> a
l1IcacheLoads :: HasL1IcacheLoads s a => Lens' s a
class HasL1IcachePrefetchMisses s a | s -> a
l1IcachePrefetchMisses :: HasL1IcachePrefetchMisses s a => Lens' s a
class HasL1IcachePrefetches s a | s -> a
l1IcachePrefetches :: HasL1IcachePrefetches s a => Lens' s a
class HasLlcLoadMisses s a | s -> a
llcLoadMisses :: HasLlcLoadMisses s a => Lens' s a
class HasLlcLoads s a | s -> a
llcLoads :: HasLlcLoads s a => Lens' s a
class HasLlcPrefetchMisses s a | s -> a
llcPrefetchMisses :: HasLlcPrefetchMisses s a => Lens' s a
class HasLlcPrefetches s a | s -> a
llcPrefetches :: HasLlcPrefetches s a => Lens' s a
class HasLlcStoreMisses s a | s -> a
llcStoreMisses :: HasLlcStoreMisses s a => Lens' s a
class HasLlcStores s a | s -> a
llcStores :: HasLlcStores s a => Lens' s a
class HasMajorFaults s a | s -> a
majorFaults :: HasMajorFaults s a => Lens' s a
class HasMinorFaults s a | s -> a
minorFaults :: HasMinorFaults s a => Lens' s a
class HasNodeLoadMisses s a | s -> a
nodeLoadMisses :: HasNodeLoadMisses s a => Lens' s a
class HasNodeLoads s a | s -> a
nodeLoads :: HasNodeLoads s a => Lens' s a
class HasNodePrefetchMisses s a | s -> a
nodePrefetchMisses :: HasNodePrefetchMisses s a => Lens' s a
class HasNodePrefetches s a | s -> a
nodePrefetches :: HasNodePrefetches s a => Lens' s a
class HasNodeStoreMisses s a | s -> a
nodeStoreMisses :: HasNodeStoreMisses s a => Lens' s a
class HasNodeStores s a | s -> a
nodeStores :: HasNodeStores s a => Lens' s a
class HasPageFaults s a | s -> a
pageFaults :: HasPageFaults s a => Lens' s a
class HasRefCycles s a | s -> a
refCycles :: HasRefCycles s a => Lens' s a
class HasStalledCyclesBackend s a | s -> a
stalledCyclesBackend :: HasStalledCyclesBackend s a => Lens' s a
class HasStalledCyclesFrontend s a | s -> a
stalledCyclesFrontend :: HasStalledCyclesFrontend s a => Lens' s a
class HasTaskClock s a | s -> a
taskClock :: HasTaskClock s a => Lens' s a
class HasExecutorIds s a | s -> a
executorIds :: HasExecutorIds s a => Lens' s a
_TaskExecutor :: Prism' TaskExecutionInfo ExecutorInfo
_TaskCommand :: Prism' TaskExecutionInfo CommandInfo
class HasContainer s a | s -> a
container :: HasContainer s a => Lens' s a
class HasHealthCheck s a | s -> a
healthCheck :: HasHealthCheck s a => Lens' s a
class HasImplementation s a | s -> a
implementation :: HasImplementation s a => Lens' s a
class HasHealthy s a | s -> a
healthy :: HasHealthy s a => Lens' s a
class HasMessage s a | s -> a
message :: HasMessage s a => Lens' s a
class HasState s a | s -> a
state :: HasState s a => Lens' s a
class HasSecret s a | s -> a
secret :: HasSecret s a => Lens' s a
_ReadOnly :: Prism' Mode ()
_ReadWrite :: Prism' Mode ()
class HasContainerPath s a | s -> a
containerPath :: HasContainerPath s a => Lens' s a
class HasHostPath s a | s -> a
hostPath :: HasHostPath s a => Lens' s a
class HasMode s a | s -> a
mode :: HasMode s a => Lens' s a
_Unknown :: Prism' ContainerType Int
_Docker :: Prism' ContainerType ByteString
class HasContainerType s a | s -> a
containerType :: HasContainerType s a => Lens' s a
class HasVolumes s a | s -> a
volumes :: HasVolumes s a => Lens' s a
instance HasContainerType ContainerInfo ContainerType
instance HasVolumes ContainerInfo [Volume]
instance HasContainerPath Volume ByteString
instance HasHostPath Volume (Maybe ByteString)
instance HasMode Volume Mode
instance HasPrincipal Credential ByteString
instance HasSecret Credential (Maybe ByteString)
instance HasData_ TaskStatus (Maybe ByteString)
instance HasExecutorId TaskStatus (Maybe ExecutorID)
instance HasHealthy TaskStatus (Maybe Bool)
instance HasMessage TaskStatus (Maybe ByteString)
instance HasSlaveId TaskStatus (Maybe SlaveID)
instance HasState TaskStatus TaskState
instance HasTaskId TaskStatus TaskID
instance HasTimestamp TaskStatus (Maybe Double)
instance HasContainer TaskInfo (Maybe ContainerInfo)
instance HasData_ TaskInfo (Maybe ByteString)
instance HasHealthCheck TaskInfo (Maybe HealthCheck)
instance HasId' TaskInfo TaskID
instance HasImplementation TaskInfo TaskExecutionInfo
instance HasName TaskInfo ByteString
instance HasResources TaskInfo [Resource]
instance HasSlaveId TaskInfo SlaveID
instance HasAttributes Offer [(ByteString, Value)]
instance HasExecutorIds Offer [ExecutorID]
instance HasFrameworkId Offer FrameworkID
instance HasHostname Offer ByteString
instance HasId' Offer OfferID
instance HasResources Offer [Resource]
instance HasSlaveId Offer SlaveID
instance HasResources Request [Resource]
instance HasSlaveId Request (Maybe SlaveID)
instance HasAlignmentFaults PerformanceStatistics (Maybe Word64)
instance HasBranchLoadMisses PerformanceStatistics (Maybe Word64)
instance HasBranchLoads PerformanceStatistics (Maybe Word64)
instance HasBranchMisses PerformanceStatistics (Maybe Word64)
instance HasBranches PerformanceStatistics (Maybe Word64)
instance HasBusCycles PerformanceStatistics (Maybe Word64)
instance HasCacheMisses PerformanceStatistics (Maybe Word64)
instance HasCacheReferences PerformanceStatistics (Maybe Word64)
instance HasContextSwitches PerformanceStatistics (Maybe Word64)
instance HasCpuClock PerformanceStatistics (Maybe Double)
instance HasCpuMigrations PerformanceStatistics (Maybe Word64)
instance HasCycles PerformanceStatistics (Maybe Word64)
instance HasDtlbLoadMisses PerformanceStatistics (Maybe Word64)
instance HasDtlbLoads PerformanceStatistics (Maybe Word64)
instance HasDtlbPrefetchMisses PerformanceStatistics (Maybe Word64)
instance HasDtlbPrefetches PerformanceStatistics (Maybe Word64)
instance HasDtlbStoreMisses PerformanceStatistics (Maybe Word64)
instance HasDtlbStores PerformanceStatistics (Maybe Word64)
instance HasDuration PerformanceStatistics Double
instance HasEmulationFaults PerformanceStatistics (Maybe Word64)
instance HasInstructions PerformanceStatistics (Maybe Word64)
instance HasItlbLoadMisses PerformanceStatistics (Maybe Word64)
instance HasItlbLoads PerformanceStatistics (Maybe Word64)
instance HasL1DcacheLoadMisses PerformanceStatistics (Maybe Word64)
instance HasL1DcacheLoads PerformanceStatistics (Maybe Word64)
instance HasL1DcachePrefetchMisses PerformanceStatistics (Maybe Word64)
instance HasL1DcachePrefetches PerformanceStatistics (Maybe Word64)
instance HasL1DcacheStoreMisses PerformanceStatistics (Maybe Word64)
instance HasL1DcacheStores PerformanceStatistics (Maybe Word64)
instance HasL1IcacheLoadMisses PerformanceStatistics (Maybe Word64)
instance HasL1IcacheLoads PerformanceStatistics (Maybe Word64)
instance HasL1IcachePrefetchMisses PerformanceStatistics (Maybe Word64)
instance HasL1IcachePrefetches PerformanceStatistics (Maybe Word64)
instance HasLlcLoadMisses PerformanceStatistics (Maybe Word64)
instance HasLlcLoads PerformanceStatistics (Maybe Word64)
instance HasLlcPrefetchMisses PerformanceStatistics (Maybe Word64)
instance HasLlcPrefetches PerformanceStatistics (Maybe Word64)
instance HasLlcStoreMisses PerformanceStatistics (Maybe Word64)
instance HasLlcStores PerformanceStatistics (Maybe Word64)
instance HasMajorFaults PerformanceStatistics (Maybe Word64)
instance HasMinorFaults PerformanceStatistics (Maybe Word64)
instance HasNodeLoadMisses PerformanceStatistics (Maybe Word64)
instance HasNodeLoads PerformanceStatistics (Maybe Word64)
instance HasNodePrefetchMisses PerformanceStatistics (Maybe Word64)
instance HasNodePrefetches PerformanceStatistics (Maybe Word64)
instance HasNodeStoreMisses PerformanceStatistics (Maybe Word64)
instance HasNodeStores PerformanceStatistics (Maybe Word64)
instance HasPageFaults PerformanceStatistics (Maybe Word64)
instance HasRefCycles PerformanceStatistics (Maybe Word64)
instance HasStalledCyclesBackend PerformanceStatistics (Maybe Word64)
instance HasStalledCyclesFrontend PerformanceStatistics (Maybe Word64)
instance HasTaskClock PerformanceStatistics (Maybe Double)
instance HasTimestamp PerformanceStatistics Double
instance HasExecutorId ResourceUsage (Maybe ExecutorID)
instance HasExecutorName ResourceUsage (Maybe ByteString)
instance HasFrameworkId ResourceUsage FrameworkID
instance HasSlaveId ResourceUsage SlaveID
instance HasStatistics ResourceUsage (Maybe ResourceStatistics)
instance HasTaskId ResourceUsage (Maybe TaskID)
instance HasCpusLimit ResourceStatistics Double
instance HasCpusPeriods ResourceStatistics (Maybe Word32)
instance HasCpusSystemTimeSecs ResourceStatistics (Maybe Double)
instance HasCpusThrottled ResourceStatistics (Maybe Word32)
instance HasCpusThrottledTimeSecs ResourceStatistics (Maybe Double)
instance HasCpusUserTimeSecs ResourceStatistics (Maybe Double)
instance HasMemoryAnonymousBytes ResourceStatistics (Maybe Word64)
instance HasMemoryFileBytes ResourceStatistics (Maybe Word64)
instance HasMemoryLimitBytes ResourceStatistics (Maybe Word64)
instance HasMemoryMappedFileBytes ResourceStatistics (Maybe Word64)
instance HasMemoryResidentSetSize ResourceStatistics (Maybe Word64)
instance HasNetRxBytes ResourceStatistics (Maybe Word64)
instance HasNetRxDropped ResourceStatistics (Maybe Word64)
instance HasNetRxErrors ResourceStatistics (Maybe Word64)
instance HasNetRxPackets ResourceStatistics (Maybe Word64)
instance HasNetTxBytes ResourceStatistics (Maybe Word64)
instance HasNetTxDropped ResourceStatistics (Maybe Word64)
instance HasNetTxErrors ResourceStatistics (Maybe Word64)
instance HasNetTxPackets ResourceStatistics (Maybe Word64)
instance HasPerformanceStatistics ResourceStatistics (Maybe PerformanceStatistics)
instance HasTimestamp ResourceStatistics Double
instance HasName Resource ByteString
instance HasRole Resource (Maybe ByteString)
instance HasValue Resource Value
instance HasRefuseSeconds Filters (Maybe Double)
instance HasAttributes SlaveInfo [(ByteString, Value)]
instance HasCheckpoint SlaveInfo (Maybe Bool)
instance HasHostname SlaveInfo ByteString
instance HasPort SlaveInfo (Maybe Word32)
instance HasResources SlaveInfo [Resource]
instance HasSlaveId SlaveInfo (Maybe SlaveID)
instance HasHostname MasterInfo (Maybe ByteString)
instance HasId' MasterInfo ByteString
instance HasIp MasterInfo Word32
instance HasPid MasterInfo (Maybe ByteString)
instance HasPort MasterInfo (Maybe Word32)
instance HasCommandInfo ExecutorInfo CommandInfo
instance HasContainerInfo ExecutorInfo (Maybe ContainerInfo)
instance HasData_ ExecutorInfo (Maybe ByteString)
instance HasExecutorId ExecutorInfo ExecutorID
instance HasFrameworkId ExecutorInfo FrameworkID
instance HasName ExecutorInfo (Maybe ByteString)
instance HasResources ExecutorInfo [Resource]
instance HasSource ExecutorInfo (Maybe ByteString)
instance HasExecutable CommandURI (Maybe Bool)
instance HasExtract CommandURI (Maybe Bool)
instance HasValue CommandURI ByteString
instance HasEnvironment CommandInfo (Maybe [(ByteString, ByteString)])
instance HasUris CommandInfo [CommandURI]
instance HasUser CommandInfo (Maybe ByteString)
instance HasValue CommandInfo CommandValue
instance HasConsecutiveFailures HealthCheck (Maybe Word32)
instance HasDelaySeconds HealthCheck (Maybe Double)
instance HasGracePeriodSeconds HealthCheck (Maybe Double)
instance HasIntervalSeconds HealthCheck (Maybe Double)
instance HasStrategy HealthCheck HealthCheckStrategy
instance HasTimeoutSeconds HealthCheck (Maybe Double)
instance HasCommand HealthCheckStrategy CommandInfo
instance HasPath HealthCheckStrategy (Maybe ByteString)
instance HasPort HealthCheckStrategy Word32
instance HasStatuses HealthCheckStrategy [Word32]
instance HasCheckpoint FrameworkInfo (Maybe Bool)
instance HasFailoverTimeout FrameworkInfo (Maybe Double)
instance HasHostname FrameworkInfo (Maybe ByteString)
instance HasId' FrameworkInfo (Maybe FrameworkID)
instance HasName FrameworkInfo ByteString
instance HasPrincipal FrameworkInfo (Maybe ByteString)
instance HasRole FrameworkInfo (Maybe ByteString)
instance HasUser FrameworkInfo ByteString
instance HasId' ContainerID ByteString
instance HasId' ExecutorID ByteString
instance HasId' TaskID ByteString
instance HasId' SlaveID ByteString
instance HasId' OfferID ByteString
instance HasId' FrameworkID ByteString

module System.Mesos.Internal

-- | Run a <a>Managed</a> computation, enforcing that no acquired resources
--   leak
runManaged :: Managed () -> IO ()

-- | A managed resource that you acquire using <a>with</a>
data Managed a :: * -> *
class CPPValue a where equalExceptDefaults = (==)
marshal :: CPPValue a => a -> Managed (Ptr a)
unmarshal :: CPPValue a => Ptr a -> Managed a
destroy :: CPPValue a => Ptr a -> IO ()
equalExceptDefaults :: (CPPValue a, Eq a) => a -> a -> Bool

-- | A space-efficient representation of a <a>Word8</a> vector, supporting
--   many efficient operations.
--   
--   A <a>ByteString</a> contains 8-bit bytes, or by using the operations
--   from <a>Data.ByteString.Char8</a> it can be interpreted as containing
--   8-bit characters.
data ByteString :: *

-- | A value of type <tt><a>Ptr</a> a</tt> represents a pointer to an
--   object, or an array of objects, which may be marshalled to or from
--   Haskell values of type <tt>a</tt>.
--   
--   The type <tt>a</tt> will often be an instance of class <a>Storable</a>
--   which provides the marshalling operations. However this is not
--   essential, and you can provide your own operations to access the
--   pointer. For example you might write small foreign functions to get or
--   set the fields of a C <tt>struct</tt>.
data Ptr a :: * -> *

-- | A value of type <tt><a>FunPtr</a> a</tt> is a pointer to a function
--   callable from foreign code. The type <tt>a</tt> will normally be a
--   <i>foreign type</i>, a function type with zero or more arguments where
--   
--   <ul>
--   <li>the argument types are <i>marshallable foreign types</i>, i.e.
--   <a>Char</a>, <a>Int</a>, <a>Double</a>, <a>Float</a>, <a>Bool</a>,
--   <a>Int8</a>, <a>Int16</a>, <a>Int32</a>, <a>Int64</a>, <a>Word8</a>,
--   <a>Word16</a>, <a>Word32</a>, <a>Word64</a>, <tt><a>Ptr</a> a</tt>,
--   <tt><a>FunPtr</a> a</tt>, <tt><a>StablePtr</a> a</tt> or a renaming of
--   any of these using <tt>newtype</tt>.</li>
--   <li>the return type is either a marshallable foreign type or has the
--   form <tt><a>IO</a> t</tt> where <tt>t</tt> is a marshallable foreign
--   type or <tt>()</tt>.</li>
--   </ul>
--   
--   A value of type <tt><a>FunPtr</a> a</tt> may be a pointer to a foreign
--   function, either returned by another foreign function or imported with
--   a a static address import like
--   
--   <pre>
--   foreign import ccall "stdlib.h &amp;free"
--     p_free :: FunPtr (Ptr a -&gt; IO ())
--   </pre>
--   
--   or a pointer to a Haskell function created using a <i>wrapper</i> stub
--   declared to produce a <a>FunPtr</a> of the correct type. For example:
--   
--   <pre>
--   type Compare = Int -&gt; Int -&gt; Bool
--   foreign import ccall "wrapper"
--     mkCompare :: Compare -&gt; IO (FunPtr Compare)
--   </pre>
--   
--   Calls to wrapper stubs like <tt>mkCompare</tt> allocate storage, which
--   should be released with <a>freeHaskellFunPtr</a> when no longer
--   required.
--   
--   To convert <a>FunPtr</a> values to corresponding Haskell functions,
--   one can define a <i>dynamic</i> stub for the specific foreign type,
--   e.g.
--   
--   <pre>
--   type IntFunction = CInt -&gt; IO ()
--   foreign import ccall "dynamic"
--     mkFun :: FunPtr IntFunction -&gt; IntFunction
--   </pre>
data FunPtr a :: * -> *

-- | The constant <a>nullPtr</a> contains a distinguished value of
--   <a>Ptr</a> that is not associated with a valid memory location.
nullPtr :: Ptr a
alloc :: Storable a => Managed (Ptr a)
allocMaybe :: Storable a => Maybe a -> Managed (Ptr a)
arrayPair :: Storable a => Managed (Ptr a, Ptr CInt)
peek :: Storable a => Ptr a -> Managed a
poke :: Storable a => Ptr a -> a -> Managed ()
pokeMaybe :: Storable a => Ptr a -> (Maybe a) -> Managed ()
arrayLen :: Storable a => [a] -> Managed (Ptr a, Int)
cstring :: ByteString -> Managed (Ptr CChar, Int)
maybeCString :: Maybe ByteString -> Managed (Ptr CChar, Int)
peekArray :: (Ptr (Ptr a), Ptr CInt) -> Managed [Ptr a]
peekArray' :: (Ptr (Ptr a), Int) -> Managed [Ptr a]
peekCString :: (Ptr (Ptr CChar), Ptr CInt) -> Managed ByteString
peekCString' :: (Ptr (Ptr CChar), CInt) -> Managed ByteString
peekMaybeCString :: (Ptr (Ptr CChar), Ptr CInt) -> Managed (Maybe ByteString)
cppValue :: CPPValue a => a -> Managed (Ptr a)
peekCPP :: CPPValue a => Ptr a -> Managed a
peekMaybeCPP :: CPPValue a => Ptr (Ptr a) -> Managed (Maybe a)
type CBool = CUChar
toCBool :: Bool -> CBool
fromCBool :: CBool -> Bool
toStatus :: CInt -> Status
peekMaybe :: (Storable a) => Ptr (Ptr a) -> Managed (Maybe a)
peekMaybeBS :: Ptr (Ptr CChar) -> Ptr CInt -> Managed (Maybe ByteString)
peekMaybePrim :: Storable a => Ptr a -> Ptr CBool -> Managed (Maybe a)

-- | The member functions of this class facilitate writing values of
--   primitive types to raw memory (which may have been allocated with the
--   above mentioned routines) and reading values from blocks of raw
--   memory. The class, furthermore, includes support for computing the
--   storage requirements and alignment restrictions of storable types.
--   
--   Memory addresses are represented as values of type <tt><a>Ptr</a>
--   a</tt>, for some <tt>a</tt> which is an instance of class
--   <a>Storable</a>. The type argument to <a>Ptr</a> helps provide some
--   valuable type safety in FFI code (you can't mix pointers of different
--   types without an explicit cast), while helping the Haskell type system
--   figure out which marshalling method is needed for a given pointer.
--   
--   All marshalling between Haskell and a foreign language ultimately
--   boils down to translating Haskell data structures into the binary
--   representation of a corresponding data structure of the foreign
--   language and vice versa. To code this marshalling in Haskell, it is
--   necessary to manipulate primitive data types stored in unstructured
--   memory blocks. The class <a>Storable</a> facilitates this manipulation
--   on all types for which it is instantiated, which are the standard
--   basic types of Haskell, the fixed size <tt>Int</tt> types
--   (<a>Int8</a>, <a>Int16</a>, <a>Int32</a>, <a>Int64</a>), the fixed
--   size <tt>Word</tt> types (<a>Word8</a>, <a>Word16</a>, <a>Word32</a>,
--   <a>Word64</a>), <a>StablePtr</a>, all types from
--   <a>Foreign.C.Types</a>, as well as <a>Ptr</a>.
class Storable a

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => forall a. IO a -> m a
type ToID a = Ptr CChar -> CInt -> IO a
type FromID a = a -> Ptr (Ptr CChar) -> IO CInt
defEq :: Eq a => a -> Maybe a -> Maybe a -> Bool
makePrefixFields :: [Char] -> Name -> DecsQ

module System.Mesos.Raw.CommandUri
type CommandURIPtr = Ptr CommandURI
c_toCommandURI :: Ptr CChar -> CInt -> Ptr CBool -> Ptr CBool -> IO CommandURIPtr
c_fromCommandURI :: CommandURIPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr CBool -> Ptr CBool -> Ptr CBool -> Ptr CBool -> IO ()
c_destroyCommandURI :: CommandURIPtr -> IO ()
instance CPPValue CommandURI

module System.Mesos.Raw.ContainerId
type ContainerIDPtr = Ptr ContainerID
c_toContainerID :: ToID ContainerIDPtr
c_fromContainerID :: FromID ContainerIDPtr
c_destroyContainerID :: ContainerIDPtr -> IO ()
instance CPPValue ContainerID

module System.Mesos.Raw.Credential
type CredentialPtr = Ptr Credential
c_toCredential :: Ptr CChar -> CInt -> Ptr CChar -> CInt -> IO CredentialPtr
c_fromCredential :: CredentialPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyCredential :: CredentialPtr -> IO ()
instance CPPValue Credential

module System.Mesos.Raw.EnvironmentVariable
toEnvVar :: (ByteString, ByteString) -> EnvironmentVariable
fromEnvVar :: EnvironmentVariable -> (ByteString, ByteString)
type EnvironmentVariablePtr = Ptr EnvironmentVariable
data EnvironmentVariable
[EnvironmentVariable] :: !ByteString -> !ByteString -> EnvironmentVariable
[environmentVariableKey] :: EnvironmentVariable -> !ByteString
[environmentVariableValue] :: EnvironmentVariable -> !ByteString
c_toEnvironmentVariable :: Ptr CChar -> CInt -> Ptr CChar -> CInt -> IO EnvironmentVariablePtr
c_fromEnvironmentVariable :: EnvironmentVariablePtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyEnvironmentVariable :: EnvironmentVariablePtr -> IO ()
instance Eq EnvironmentVariable
instance Show EnvironmentVariable
instance CPPValue EnvironmentVariable

module System.Mesos.Raw.Environment
type EnvironmentPtr = Ptr Environment
newtype Environment
[Environment] :: [(ByteString, ByteString)] -> Environment
[environmentVariables] :: Environment -> [(ByteString, ByteString)]
fromEnvironment :: Environment -> [(ByteString, ByteString)]
toEnvironment :: [(ByteString, ByteString)] -> Environment
c_toEnvironment :: Ptr EnvironmentVariablePtr -> CInt -> IO EnvironmentPtr
c_fromEnvironment :: EnvironmentPtr -> Ptr (Ptr EnvironmentVariablePtr) -> Ptr CInt -> IO ()
c_destroyEnvironment :: EnvironmentPtr -> IO ()
instance Eq Environment
instance Show Environment
instance CPPValue Environment

module System.Mesos.Raw.ExecutorId
type ExecutorIDPtr = Ptr ExecutorID
c_toExecutorID :: ToID ExecutorIDPtr
c_fromExecutorID :: FromID ExecutorIDPtr
c_destroyExecutorID :: ExecutorIDPtr -> IO ()
instance CPPValue ExecutorID

module System.Mesos.Raw.Filters
type FiltersPtr = Ptr Filters
c_toFilters :: Ptr CDouble -> IO FiltersPtr
c_fromFilters :: FiltersPtr -> Ptr CBool -> Ptr CDouble -> IO ()
c_destroyFilters :: FiltersPtr -> IO ()
instance CPPValue Filters

module System.Mesos.Raw.FrameworkId
type FrameworkIDPtr = Ptr FrameworkID
c_toFrameworkID :: ToID FrameworkIDPtr
c_fromFrameworkID :: FromID FrameworkIDPtr
c_destroyFrameworkID :: FrameworkIDPtr -> IO ()
instance CPPValue FrameworkID

module System.Mesos.Raw.FrameworkInfo
type FrameworkInfoPtr = Ptr FrameworkInfo
c_toFrameworkInfo :: Ptr CChar -> CInt -> Ptr CChar -> CInt -> Ptr FrameworkIDPtr -> Ptr CDouble -> Ptr CBool -> Ptr CChar -> CInt -> Ptr CChar -> CInt -> Ptr CChar -> CInt -> IO FrameworkInfoPtr
c_fromFrameworkInfo :: FrameworkInfoPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr FrameworkIDPtr -> Ptr CBool -> Ptr CDouble -> Ptr CBool -> Ptr CBool -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyFrameworkInfo :: FrameworkInfoPtr -> IO ()
instance CPPValue FrameworkInfo

module System.Mesos.Raw.MasterInfo
type MasterInfoPtr = Ptr MasterInfo
c_toMasterInfo :: Ptr CChar -> CInt -> CUInt -> Ptr CUInt -> Ptr CChar -> CInt -> Ptr CChar -> CInt -> IO MasterInfoPtr
c_fromMasterInfo :: MasterInfoPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr CUInt -> Ptr CUInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyMasterInfo :: MasterInfoPtr -> IO ()
instance CPPValue MasterInfo

module System.Mesos.Raw.OfferId
type OfferIDPtr = Ptr OfferID
c_toOfferID :: ToID OfferIDPtr
c_fromOfferID :: FromID OfferIDPtr
c_destroyOfferID :: OfferIDPtr -> IO ()
instance CPPValue OfferID

module System.Mesos.Raw.Parameter
type ParameterPtr = Ptr Parameter
data Parameter
[Parameter] :: ByteString -> ByteString -> Parameter
c_toParameter :: Ptr CChar -> CInt -> Ptr CChar -> CInt -> IO ParameterPtr
c_fromParameter :: ParameterPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyParameter :: ParameterPtr -> IO ()
instance Show Parameter
instance Eq Parameter
instance CPPValue Parameter

module System.Mesos.Raw.Parameters
type ParametersPtr = Ptr Parameters
newtype Parameters
[Parameters] :: [Parameter] -> Parameters
c_toParameters :: Ptr ParameterPtr -> CInt -> IO ParametersPtr
c_fromParameters :: ParametersPtr -> Ptr (Ptr ParameterPtr) -> Ptr CInt -> IO ()
c_destroyParameters :: ParametersPtr -> IO ()
instance Show Parameters
instance Eq Parameters
instance CPPValue Parameters

module System.Mesos.Raw.SlaveId
type SlaveIDPtr = Ptr SlaveID
c_toSlaveID :: ToID SlaveIDPtr
c_fromSlaveID :: FromID SlaveIDPtr
c_destroySlaveID :: SlaveIDPtr -> IO ()
instance CPPValue SlaveID

module System.Mesos.Raw.StdString
newtype StdString
[StdString] :: ByteString -> StdString
[fromStdString] :: StdString -> ByteString
type StdStringPtr = Ptr StdString
c_toStdString :: Ptr CChar -> CInt -> IO StdStringPtr
c_fromStdString :: StdStringPtr -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyStdString :: StdStringPtr -> IO ()
instance CPPValue StdString

module System.Mesos.Raw.CommandInfo
type CommandInfoPtr = Ptr CommandInfo
c_toCommandInfo :: Ptr CommandURIPtr -> CInt -> EnvironmentPtr -> CBool -> Ptr CChar -> CInt -> Ptr StdStringPtr -> CInt -> Ptr CChar -> CInt -> IO CommandInfoPtr
c_fromCommandInfo :: CommandInfoPtr -> Ptr (Ptr CommandURIPtr) -> Ptr CInt -> Ptr EnvironmentPtr -> Ptr CBool -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr StdStringPtr) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyCommandInfo :: CommandInfoPtr -> IO ()
instance CPPValue CommandInfo

module System.Mesos.Raw.TaskId
type TaskIDPtr = Ptr TaskID
c_toTaskID :: ToID TaskIDPtr
c_fromTaskID :: FromID TaskIDPtr
c_destroyTaskID :: TaskIDPtr -> IO ()
instance CPPValue TaskID

module System.Mesos.Raw.TaskStatus
type TaskStatusPtr = Ptr TaskStatus
c_toTaskStatus :: TaskIDPtr -> CInt -> Ptr CChar -> CInt -> Ptr CChar -> CInt -> SlaveIDPtr -> ExecutorIDPtr -> Ptr CDouble -> Ptr CBool -> IO TaskStatusPtr
c_fromTaskStatus :: TaskStatusPtr -> Ptr TaskIDPtr -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr SlaveIDPtr -> Ptr ExecutorIDPtr -> Ptr CBool -> Ptr CDouble -> Ptr CBool -> Ptr CBool -> IO ()
c_destroyTaskStatus :: TaskStatusPtr -> IO ()
instance CPPValue TaskStatus

module System.Mesos.Raw.Value
type ValuePtr = Ptr Value
data ValueType
[SCALAR] :: ValueType
[RANGES] :: ValueType
[SET] :: ValueType
[TEXT] :: ValueType
data ValueRange
[ValueRange] :: Word64 -> Word64 -> ValueRange
type ValueRangePtr = Ptr ValueRange
c_toRange :: CULong -> CULong -> IO ValueRangePtr
c_fromRange :: ValueRangePtr -> Ptr CULong -> Ptr CULong -> IO ()
c_destroyRange :: ValueRangePtr -> IO ()
c_toValue :: CInt -> CDouble -> Ptr ValueRangePtr -> CInt -> Ptr StdStringPtr -> CInt -> Ptr CChar -> CInt -> IO ValuePtr
c_fromValue :: ValuePtr -> Ptr CInt -> Ptr CDouble -> Ptr (Ptr ValueRangePtr) -> Ptr CInt -> Ptr (Ptr StdStringPtr) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyValue :: ValuePtr -> IO ()
instance Enum ValueType
instance CPPValue ValueRange
instance CPPValue Value

module System.Mesos.Raw.Attribute
type AttributePtr = Ptr Attribute
data Attribute
[Attribute] :: !ByteString -> !Value -> Attribute
[attributeName] :: Attribute -> !ByteString
[attributeValue] :: Attribute -> !Value
toAttribute :: (ByteString, Value) -> Attribute
fromAttribute :: Attribute -> (ByteString, Value)
c_toAttribute :: Ptr CChar -> CInt -> ValuePtr -> IO AttributePtr
c_fromAttribute :: AttributePtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr ValuePtr -> IO ()
c_destroyAttribute :: AttributePtr -> IO ()
instance Eq Attribute
instance Show Attribute
instance CPPValue Attribute

module System.Mesos.Raw.Resource
type ResourcePtr = Ptr Resource
c_toResource :: Ptr CChar -> CInt -> ValuePtr -> Ptr CChar -> CInt -> IO ResourcePtr
c_fromResource :: ResourcePtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr ValuePtr -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyResource :: ResourcePtr -> IO ()
instance CPPValue Resource

module System.Mesos.Raw.Offer
type OfferPtr = Ptr Offer
c_toOffer :: OfferIDPtr -> FrameworkIDPtr -> SlaveIDPtr -> Ptr CChar -> CInt -> Ptr ResourcePtr -> CInt -> Ptr AttributePtr -> CInt -> Ptr ExecutorIDPtr -> CInt -> IO OfferPtr
c_fromOffer :: OfferPtr -> Ptr OfferIDPtr -> Ptr FrameworkIDPtr -> Ptr SlaveIDPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr ResourcePtr) -> Ptr CInt -> Ptr (Ptr AttributePtr) -> Ptr CInt -> Ptr (Ptr ExecutorIDPtr) -> Ptr CInt -> IO ()
c_destroyOffer :: OfferPtr -> IO ()
instance CPPValue Offer

module System.Mesos.Raw.Request
type RequestPtr = Ptr Request
c_toRequest :: SlaveIDPtr -> Ptr ResourcePtr -> CInt -> IO RequestPtr
c_fromRequest :: RequestPtr -> Ptr SlaveIDPtr -> Ptr (Ptr ResourcePtr) -> Ptr CInt -> IO ()
c_destroyRequest :: RequestPtr -> IO ()
instance CPPValue Request

module System.Mesos.Raw.SlaveInfo
type SlaveInfoPtr = Ptr SlaveInfo
c_toSlaveInfo :: Ptr CChar -> CInt -> Ptr CUInt -> Ptr ResourcePtr -> CInt -> Ptr AttributePtr -> CInt -> SlaveIDPtr -> Ptr CBool -> IO SlaveInfoPtr
c_fromSlaveInfo :: SlaveInfoPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr CBool -> Ptr CUInt -> Ptr (Ptr ResourcePtr) -> Ptr CInt -> Ptr (Ptr AttributePtr) -> Ptr CInt -> Ptr SlaveIDPtr -> Ptr CBool -> Ptr CBool -> IO ()
c_destroySlaveInfo :: SlaveInfoPtr -> IO ()
instance CPPValue SlaveInfo

module System.Mesos.Raw.Volume
type VolumePtr = Ptr Volume
c_toVolume :: Ptr CChar -> CInt -> Ptr CChar -> CInt -> CInt -> IO VolumePtr
c_fromVolume :: VolumePtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr CInt -> IO ()
c_destroyVolume :: VolumePtr -> IO ()
instance CPPValue Volume

module System.Mesos.Raw.ContainerInfo
type ContainerInfoPtr = Ptr ContainerInfo
c_toContainerInfo :: CInt -> Ptr CChar -> CInt -> Ptr VolumePtr -> CInt -> IO ContainerInfoPtr
c_fromContainerInfo :: ContainerInfoPtr -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr VolumePtr) -> Ptr CInt -> IO ()
c_destroyContainerInfo :: ContainerInfoPtr -> IO ()
instance CPPValue ContainerInfo

module System.Mesos.Raw.ExecutorInfo
type ExecutorInfoPtr = Ptr ExecutorInfo
c_toExecutorInfo :: ExecutorIDPtr -> FrameworkIDPtr -> CommandInfoPtr -> ContainerInfoPtr -> Ptr ResourcePtr -> CInt -> Ptr CChar -> CInt -> Ptr CChar -> CInt -> Ptr CChar -> CInt -> IO ExecutorInfoPtr
c_fromExecutorInfo :: ExecutorInfoPtr -> Ptr ExecutorIDPtr -> Ptr FrameworkIDPtr -> Ptr CommandInfoPtr -> Ptr ContainerInfoPtr -> Ptr (Ptr ResourcePtr) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> IO ()
c_destroyExecutorInfo :: ExecutorInfoPtr -> IO ()
instance CPPValue ExecutorInfo

module System.Mesos.Raw.HealthCheck
type HealthCheckPtr = Ptr HealthCheck
c_toHealthCheck :: CBool -> CInt -> Ptr CChar -> CInt -> Ptr CUInt -> CInt -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CUInt -> Ptr CDouble -> CommandInfoPtr -> IO HealthCheckPtr
c_fromHealthCheck :: HealthCheckPtr -> Ptr CBool -> Ptr CInt -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr (Ptr CUInt) -> Ptr CInt -> Ptr CDouble -> Ptr CBool -> Ptr CDouble -> Ptr CBool -> Ptr CDouble -> Ptr CBool -> Ptr CUInt -> Ptr CBool -> Ptr CDouble -> Ptr CBool -> Ptr CommandInfoPtr -> IO ()
c_destroyHealthCheck :: HealthCheckPtr -> IO ()
instance CPPValue HealthCheck

module System.Mesos.Raw.TaskInfo
type TaskInfoPtr = Ptr TaskInfo
c_toTaskInfo :: Ptr CChar -> CInt -> TaskIDPtr -> SlaveIDPtr -> Ptr ResourcePtr -> CInt -> ExecutorInfoPtr -> CommandInfoPtr -> Ptr CChar -> CInt -> ContainerInfoPtr -> HealthCheckPtr -> IO TaskInfoPtr
c_fromTaskInfo :: TaskInfoPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr TaskIDPtr -> Ptr SlaveIDPtr -> Ptr (Ptr ResourcePtr) -> Ptr CInt -> Ptr ExecutorInfoPtr -> Ptr CommandInfoPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr ContainerInfoPtr -> Ptr HealthCheckPtr -> IO ()
c_destroyTaskInfo :: TaskInfoPtr -> IO ()
instance CPPValue TaskInfo

module System.Mesos.Raw.Executor
type ExecutorPtr = Ptr Executor

-- | A data structure of the underlying executor &amp; the callbacks that
--   are triggered via the Mesos C++ API.
data Executor
[Executor] :: Ptr Executor -> FunPtr RawExecutorRegistered -> FunPtr RawExecutorReRegistered -> FunPtr RawExecutorDisconnected -> FunPtr RawExecutorLaunchTask -> FunPtr RawExecutorTaskKilled -> FunPtr RawExecutorFrameworkMessage -> FunPtr RawExecutorShutdown -> FunPtr RawExecutorError -> Executor
[executorImpl] :: Executor -> Ptr Executor
[rawExecutorRegistered] :: Executor -> FunPtr RawExecutorRegistered
[rawExecutorReRegistered] :: Executor -> FunPtr RawExecutorReRegistered
[rawExecutorDisconnected] :: Executor -> FunPtr RawExecutorDisconnected
[rawExecutorLaunchTask] :: Executor -> FunPtr RawExecutorLaunchTask
[rawExecutorTaskKilled] :: Executor -> FunPtr RawExecutorTaskKilled
[rawExecutorFrameworkMessage] :: Executor -> FunPtr RawExecutorFrameworkMessage
[rawExecutorShutdown] :: Executor -> FunPtr RawExecutorShutdown
[rawExecutorErrorCallback] :: Executor -> FunPtr RawExecutorError
type ExecutorDriverPtr = Ptr ExecutorDriver

-- | A handle that allows an Executor to trigger lifecycle &amp; status
--   update events (e.g. starting &amp; stopping the executor and sending
--   messages to the Scheduler that invoked the executor).
newtype ExecutorDriver
[ExecutorDriver] :: ExecutorDriverPtr -> ExecutorDriver
[fromExecutorDriver] :: ExecutorDriver -> ExecutorDriverPtr
type RawExecutorRegistered = ExecutorDriverPtr -> ExecutorInfoPtr -> FrameworkInfoPtr -> SlaveInfoPtr -> IO ()
type RawExecutorReRegistered = ExecutorDriverPtr -> SlaveInfoPtr -> IO ()
type RawExecutorDisconnected = ExecutorDriverPtr -> IO ()
type RawExecutorLaunchTask = ExecutorDriverPtr -> TaskInfoPtr -> IO ()
type RawExecutorTaskKilled = ExecutorDriverPtr -> TaskIDPtr -> IO ()
type RawExecutorFrameworkMessage = ExecutorDriverPtr -> Ptr CChar -> CInt -> IO ()
type RawExecutorShutdown = ExecutorDriverPtr -> IO ()
type RawExecutorError = ExecutorDriverPtr -> Ptr CChar -> CInt -> IO ()
wrapExecutorRegistered :: RawExecutorRegistered -> IO (FunPtr RawExecutorRegistered)
wrapExecutorReRegistered :: RawExecutorReRegistered -> IO (FunPtr RawExecutorReRegistered)
wrapExecutorDisconnected :: RawExecutorDisconnected -> IO (FunPtr RawExecutorDisconnected)
wrapExecutorLaunchTask :: RawExecutorLaunchTask -> IO (FunPtr RawExecutorLaunchTask)
wrapExecutorTaskKilled :: RawExecutorTaskKilled -> IO (FunPtr RawExecutorTaskKilled)
wrapExecutorFrameworkMessage :: RawExecutorFrameworkMessage -> IO (FunPtr RawExecutorFrameworkMessage)
wrapExecutorShutdown :: RawExecutorShutdown -> IO (FunPtr RawExecutorShutdown)
wrapExecutorError :: RawExecutorError -> IO (FunPtr RawExecutorError)
c_createExecutor :: FunPtr RawExecutorRegistered -> FunPtr RawExecutorReRegistered -> FunPtr RawExecutorDisconnected -> FunPtr RawExecutorLaunchTask -> FunPtr RawExecutorTaskKilled -> FunPtr RawExecutorFrameworkMessage -> FunPtr RawExecutorShutdown -> FunPtr RawExecutorError -> IO ExecutorPtr
c_destroyExecutor :: ExecutorPtr -> IO ()
c_createExecutorDriver :: ExecutorPtr -> IO ExecutorDriverPtr
c_destroyExecutorDriver :: ExecutorDriverPtr -> IO ()
c_startExecutorDriver :: ExecutorDriverPtr -> IO CInt
c_stopExecutorDriver :: ExecutorDriverPtr -> IO CInt
c_abortExecutorDriver :: ExecutorDriverPtr -> IO CInt
c_joinExecutorDriver :: ExecutorDriverPtr -> IO CInt
c_runExecutorDriver :: ExecutorDriverPtr -> IO CInt
c_sendExecutorDriverStatusUpdate :: ExecutorDriverPtr -> TaskStatusPtr -> IO CInt
c_sendExecutorDriverFrameworkMessage :: ExecutorDriverPtr -> Ptr CChar -> CInt -> IO CInt

module System.Mesos.Raw.Scheduler
type SchedulerPtr = Ptr Scheduler
data Scheduler
[Scheduler] :: SchedulerPtr -> FunPtr RawSchedulerRegistered -> FunPtr RawSchedulerReRegistered -> FunPtr RawSchedulerDisconnected -> FunPtr RawSchedulerResourceOffers -> FunPtr RawSchedulerOfferRescinded -> FunPtr RawSchedulerStatusUpdate -> FunPtr RawSchedulerFrameworkMessage -> FunPtr RawSchedulerSlaveLost -> FunPtr RawSchedulerExecutorLost -> FunPtr RawSchedulerError -> Scheduler
[schedulerImpl] :: Scheduler -> SchedulerPtr
[rawSchedulerRegistered] :: Scheduler -> FunPtr RawSchedulerRegistered
[rawSchedulerReRegistered] :: Scheduler -> FunPtr RawSchedulerReRegistered
[rawSchedulerDisconnected] :: Scheduler -> FunPtr RawSchedulerDisconnected
[rawSchedulerResourceOffers] :: Scheduler -> FunPtr RawSchedulerResourceOffers
[rawSchedulerOfferRescinded] :: Scheduler -> FunPtr RawSchedulerOfferRescinded
[rawSchedulerStatusUpdate] :: Scheduler -> FunPtr RawSchedulerStatusUpdate
[rawSchedulerFrameworkMessage] :: Scheduler -> FunPtr RawSchedulerFrameworkMessage
[rawSchedulerSlaveLost] :: Scheduler -> FunPtr RawSchedulerSlaveLost
[rawSchedulerExecutorLost] :: Scheduler -> FunPtr RawSchedulerExecutorLost
[rawSchedulerError] :: Scheduler -> FunPtr RawSchedulerError

-- | Type representing the connection from a scheduler to Mesos. This
--   handle is used both to manage the scheduler's lifecycle (start it,
--   stop it, or wait for it to finish) and to interact with Mesos (e.g.,
--   launch tasks, kill tasks, etc.).
newtype SchedulerDriver
[SchedulerDriver] :: SchedulerDriverPtr -> SchedulerDriver
[fromSchedulerDriver] :: SchedulerDriver -> SchedulerDriverPtr
type SchedulerDriverPtr = Ptr SchedulerDriver
type RawSchedulerRegistered = SchedulerDriverPtr -> FrameworkIDPtr -> MasterInfoPtr -> IO ()
type RawSchedulerReRegistered = SchedulerDriverPtr -> MasterInfoPtr -> IO ()
type RawSchedulerDisconnected = SchedulerDriverPtr -> IO ()
type RawSchedulerResourceOffers = SchedulerDriverPtr -> Ptr OfferPtr -> CInt -> IO ()
type RawSchedulerOfferRescinded = SchedulerDriverPtr -> OfferIDPtr -> IO ()
type RawSchedulerStatusUpdate = SchedulerDriverPtr -> TaskStatusPtr -> IO ()
type RawSchedulerFrameworkMessage = SchedulerDriverPtr -> ExecutorIDPtr -> SlaveIDPtr -> Ptr CChar -> Int -> IO ()
type RawSchedulerSlaveLost = SchedulerDriverPtr -> SlaveIDPtr -> IO ()
type RawSchedulerExecutorLost = SchedulerDriverPtr -> ExecutorIDPtr -> SlaveIDPtr -> CInt -> IO ()
type RawSchedulerError = SchedulerDriverPtr -> Ptr CChar -> CInt -> IO ()
wrapSchedulerRegistered :: RawSchedulerRegistered -> IO (FunPtr RawSchedulerRegistered)
wrapSchedulerReRegistered :: RawSchedulerReRegistered -> IO (FunPtr RawSchedulerReRegistered)
wrapSchedulerDisconnected :: RawSchedulerDisconnected -> IO (FunPtr RawSchedulerDisconnected)
wrapSchedulerResourceOffers :: RawSchedulerResourceOffers -> IO (FunPtr RawSchedulerResourceOffers)
wrapSchedulerOfferRescinded :: RawSchedulerOfferRescinded -> IO (FunPtr RawSchedulerOfferRescinded)
wrapSchedulerStatusUpdate :: RawSchedulerStatusUpdate -> IO (FunPtr RawSchedulerStatusUpdate)
wrapSchedulerFrameworkMessage :: RawSchedulerFrameworkMessage -> IO (FunPtr RawSchedulerFrameworkMessage)
wrapSchedulerSlaveLost :: RawSchedulerSlaveLost -> IO (FunPtr RawSchedulerSlaveLost)
wrapSchedulerExecutorLost :: RawSchedulerExecutorLost -> IO (FunPtr RawSchedulerExecutorLost)
wrapSchedulerError :: RawSchedulerError -> IO (FunPtr RawSchedulerError)
c_createScheduler :: FunPtr RawSchedulerRegistered -> FunPtr RawSchedulerReRegistered -> FunPtr RawSchedulerDisconnected -> FunPtr RawSchedulerResourceOffers -> FunPtr RawSchedulerOfferRescinded -> FunPtr RawSchedulerStatusUpdate -> FunPtr RawSchedulerFrameworkMessage -> FunPtr RawSchedulerSlaveLost -> FunPtr RawSchedulerExecutorLost -> FunPtr RawSchedulerError -> IO SchedulerPtr
c_destroyScheduler :: SchedulerPtr -> IO ()
c_createSchedulerDriver :: SchedulerPtr -> FrameworkInfoPtr -> Ptr CChar -> CInt -> IO SchedulerDriverPtr
c_createSchedulerDriverWithCredentials :: SchedulerPtr -> FrameworkInfoPtr -> Ptr CChar -> CInt -> CredentialPtr -> IO SchedulerDriverPtr
c_destroySchedulerDriver :: SchedulerDriverPtr -> IO ()
c_startSchedulerDriver :: SchedulerDriverPtr -> IO CInt
c_stopSchedulerDriver :: SchedulerDriverPtr -> CInt -> IO CInt
c_abortSchedulerDriver :: SchedulerDriverPtr -> IO CInt
c_joinSchedulerDriver :: SchedulerDriverPtr -> IO CInt
c_runSchedulerDriver :: SchedulerDriverPtr -> IO CInt
c_requestResources :: SchedulerDriverPtr -> Ptr RequestPtr -> CInt -> IO CInt
c_launchTasks :: SchedulerDriverPtr -> Ptr OfferIDPtr -> CInt -> Ptr TaskInfoPtr -> CInt -> FiltersPtr -> IO CInt
c_killTask :: SchedulerDriverPtr -> TaskIDPtr -> IO CInt
c_declineOffer :: SchedulerDriverPtr -> OfferIDPtr -> FiltersPtr -> IO CInt
c_reviveOffers :: SchedulerDriverPtr -> IO CInt
c_sendFrameworkMessage :: SchedulerDriverPtr -> ExecutorIDPtr -> SlaveIDPtr -> Ptr CChar -> CInt -> IO CInt
c_reconcileTasks :: SchedulerDriverPtr -> Ptr TaskStatusPtr -> CInt -> IO CInt
instance Eq SchedulerDriver
instance Show SchedulerDriver

module System.Mesos.Raw.PerformanceStatistics
type PerformanceStatisticsPtr = Ptr PerformanceStatistics
c_toPerfStatistics :: CDouble -> CDouble -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> (Ptr CULong) -> IO PerformanceStatisticsPtr
c_fromPerfStatistics :: PerformanceStatisticsPtr -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CDouble) -> (Ptr CBool) -> (Ptr CDouble) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> (Ptr CULong) -> (Ptr CBool) -> IO ()
c_destroyPerfStatistics :: PerformanceStatisticsPtr -> IO ()
instance CPPValue PerformanceStatistics

module System.Mesos.Raw.ResourceStatistics
type ResourceStatisticsPtr = Ptr ResourceStatistics
c_toResourceStatistics :: CDouble -> Ptr CDouble -> Ptr CDouble -> CDouble -> Ptr CUInt -> Ptr CUInt -> Ptr CDouble -> Ptr CULong -> Ptr CULong -> Ptr CULong -> Ptr CULong -> Ptr CULong -> PerformanceStatisticsPtr -> Ptr CULong -> Ptr CULong -> Ptr CULong -> Ptr CULong -> Ptr CULong -> Ptr CULong -> Ptr CULong -> Ptr CULong -> IO ResourceStatisticsPtr
c_fromResourceStatistics :: ResourceStatisticsPtr -> Ptr CDouble -> Ptr CDouble -> Ptr CBool -> Ptr CDouble -> Ptr CBool -> Ptr CDouble -> Ptr CUInt -> Ptr CBool -> Ptr CUInt -> Ptr CBool -> Ptr CDouble -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr PerformanceStatisticsPtr -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> Ptr CULong -> Ptr CBool -> IO ()
c_destroyResourceStatistics :: ResourceStatisticsPtr -> IO ()
instance CPPValue ResourceStatistics

module System.Mesos.Raw.ResourceUsage
type ResourceUsagePtr = Ptr ResourceUsage
c_toResourceUsage :: SlaveIDPtr -> FrameworkIDPtr -> ExecutorIDPtr -> Ptr CChar -> CInt -> TaskIDPtr -> ResourceStatisticsPtr -> IO ResourceUsagePtr
c_fromResourceUsage :: ResourceUsagePtr -> Ptr SlaveIDPtr -> Ptr FrameworkIDPtr -> Ptr ExecutorIDPtr -> Ptr (Ptr CChar) -> Ptr CInt -> Ptr TaskIDPtr -> Ptr ResourceStatisticsPtr -> IO ()
c_destroyResourceUsage :: ResourceUsagePtr -> IO ()
instance CPPValue ResourceUsage

module System.Mesos.Raw


-- | Mesos scheduler interface and scheduler driver. A scheduler is used to
--   interact with Mesos in order run distributed computations.
module System.Mesos.Scheduler

-- | Callback interface to be implemented by frameworks' schedulers. Note
--   that only one callback will be invoked at a time, so it is not
--   recommended that you block within a callback because it may cause a
--   deadlock.
class ToScheduler a where registered _ _ _ _ = return () reRegistered _ _ _ = return () disconnected _ _ = return () resourceOffers _ _ _ = return () offerRescinded _ _ _ = return () statusUpdate _ _ _ = return () frameworkMessage _ _ _ _ _ = return () slaveLost _ _ _ = return () executorLost _ _ _ _ _ = return () errorMessage _ _ _ = return ()
registered :: ToScheduler a => a -> SchedulerDriver -> FrameworkID -> MasterInfo -> IO ()
reRegistered :: ToScheduler a => a -> SchedulerDriver -> MasterInfo -> IO ()
disconnected :: ToScheduler a => a -> SchedulerDriver -> IO ()
resourceOffers :: ToScheduler a => a -> SchedulerDriver -> [Offer] -> IO ()
offerRescinded :: ToScheduler a => a -> SchedulerDriver -> OfferID -> IO ()
statusUpdate :: ToScheduler a => a -> SchedulerDriver -> TaskStatus -> IO ()
frameworkMessage :: ToScheduler a => a -> SchedulerDriver -> ExecutorID -> SlaveID -> ByteString -> IO ()
slaveLost :: ToScheduler a => a -> SchedulerDriver -> SlaveID -> IO ()
executorLost :: ToScheduler a => a -> SchedulerDriver -> ExecutorID -> SlaveID -> Status -> IO ()
errorMessage :: ToScheduler a => a -> SchedulerDriver -> ByteString -> IO ()

-- | Type representing the connection from a scheduler to Mesos. This
--   handle is used both to manage the scheduler's lifecycle (start it,
--   stop it, or wait for it to finish) and to interact with Mesos (e.g.,
--   launch tasks, kill tasks, etc.).
data SchedulerDriver
withSchedulerDriver :: ToScheduler a => a -> FrameworkInfo -> ByteString -> Maybe Credential -> (SchedulerDriver -> IO b) -> IO b

-- | Starts the scheduler driver. This needs to be called before any other
--   driver calls are made.
start :: SchedulerDriver -> IO Status

-- | Stops the scheduler driver. If the <tt>failover</tt> flag is set to
--   false then it is expected that this framework will never reconnect to
--   Mesos and all of its executors and tasks can be terminated. Otherwise,
--   all executors and tasks will remain running (for some framework
--   specific failover timeout) allowing the scheduler to reconnect
--   (possibly in the same process, or from a different process, for
--   example, on a different machine).
stop :: SchedulerDriver -> Bool -> IO Status

-- | Aborts the driver so that no more callbacks can be made to the
--   scheduler. The semantics of abort and stop have deliberately been
--   separated so that code can detect an aborted driver (i.e., via the
--   return status of <a>await</a>, see below), and instantiate and start
--   another driver if desired (from within the same process). Note that
--   <a>stop</a> is not automatically called inside <a>abort</a>.
abort :: SchedulerDriver -> IO Status

-- | Waits for the driver to be stopped or aborted, possibly *blocking the
--   current thread indefinitely*. The return status of this function can
--   be used to determine if the driver was aborted (see <a>Status</a> for
--   more information).
await :: SchedulerDriver -> IO Status

-- | Starts and immediately <a>await</a>s (blocks on) the driver.
run :: SchedulerDriver -> IO Status

-- | Requests resources from Mesos. Any resources available are
--   asynchronously offered to the framework via the <a>resourceOffers</a>
--   callback.
requestResources :: SchedulerDriver -> [Request] -> IO Status

-- | Launches the given set of tasks. Any resources remaining (i.e., not
--   used by the tasks or their executors) will be considered declined. The
--   specified filters are applied on all unused resources (see
--   <a>Filters</a> for more information).
--   
--   Available resources are aggregated when mutiple offers are provided.
--   Note that all offers must belong to the same slave. Invoking this
--   function with an empty collection of tasks declines offers in their
--   entirety (see <a>declineOffer</a>).
launchTasks :: SchedulerDriver -> [OfferID] -> [TaskInfo] -> Filters -> IO Status

-- | Kills the specified task. Note that attempting to kill a task is
--   currently not reliable. If, for example, a scheduler fails over while
--   it was attempting to kill a task it will need to retry in the future.
--   Likewise, if unregistered / disconnected, the request will be dropped
--   (these semantics may be changed in the future).
killTask :: SchedulerDriver -> TaskID -> IO Status

-- | Declines an offer in its entirety and applies the specified filters on
--   the resources (see <a>Filters</a>). Note that this can be done at any
--   time, it is not necessary to do this within the <a>resourceOffers</a>
--   callback.
declineOffer :: SchedulerDriver -> OfferID -> Filters -> IO Status

-- | Removes all filters previously set by the framework (via
--   <a>launchTasks</a>). This enables the framework to receive offers from
--   those filtered slaves.
reviveOffers :: SchedulerDriver -> IO Status

-- | Sends a message from the framework to one of its executors. These
--   messages are best effort; do not expect a framework message to be
--   retransmitted in any reliable fashion.
sendFrameworkMessage :: SchedulerDriver -> ExecutorID -> SlaveID -> ByteString -> IO Status

-- | Reconciliation of tasks causes the master to send status updates for
--   tasks whose status differs from the status sent here.
reconcileTasks :: SchedulerDriver -> [TaskStatus] -> IO Status
createDriver :: Scheduler -> FrameworkInfo -> ByteString -> Maybe Credential -> IO SchedulerDriver
destroyDriver :: SchedulerDriver -> IO ()
data Scheduler
createScheduler :: ToScheduler a => a -> IO Scheduler
destroyScheduler :: Scheduler -> IO ()


-- | Mesos executor interface and executor driver. An executor is
--   responsible for launching tasks in a framework specific way (i.e.,
--   creating new threads, new processes, etc). One or more executors from
--   the same framework may run concurrently on the same machine. Note that
--   we use the term "executor" fairly loosely to refer to the code that
--   implements an instance of the <a>ToExecutor</a> type class (see below)
--   as well as the program that is responsible for instantiating a new
--   <a>ExecutorDriver</a> (also below).
--   
--   In fact, while a Mesos slave is responsible for (forking and)
--   executing the "executor", there is no reason why whatever the slave
--   executed might itself actually execute another program which actually
--   instantiates and runs the <a>SchedulerDriver</a>. The only contract
--   with the slave is that the program that it invokes does not exit until
--   the "executor" has completed. Thus, what the slave executes may be
--   nothing more than a script which actually executes (or forks and
--   waits) the "real" executor.
module System.Mesos.Executor

-- | Callback interface to be implemented by frameworks' executors. Note
--   that only one callback will be invoked at a time, so it is not
--   recommended that you block within a callback because it may cause a
--   deadlock.
class ToExecutor a where registered _ _ _ _ _ = return () reRegistered _ _ _ = return () disconnected _ _ = return () launchTask _ _ _ = return () taskKilled _ _ _ = return () frameworkMessage _ _ _ = return () shutdown _ _ = return () errorMessage _ _ _ = return ()
registered :: ToExecutor a => a -> ExecutorDriver -> ExecutorInfo -> FrameworkInfo -> SlaveInfo -> IO ()
reRegistered :: ToExecutor a => a -> ExecutorDriver -> SlaveInfo -> IO ()
disconnected :: ToExecutor a => a -> ExecutorDriver -> IO ()
launchTask :: ToExecutor a => a -> ExecutorDriver -> TaskInfo -> IO ()
taskKilled :: ToExecutor a => a -> ExecutorDriver -> TaskID -> IO ()
frameworkMessage :: ToExecutor a => a -> ExecutorDriver -> ByteString -> IO ()
shutdown :: ToExecutor a => a -> ExecutorDriver -> IO ()
errorMessage :: ToExecutor a => a -> ExecutorDriver -> ByteString -> IO ()

-- | A handle that allows an Executor to trigger lifecycle &amp; status
--   update events (e.g. starting &amp; stopping the executor and sending
--   messages to the Scheduler that invoked the executor).
data ExecutorDriver
withExecutorDriver :: ToExecutor a => a -> (ExecutorDriver -> IO b) -> IO b

-- | Starts the executor driver. This needs to be called before any other
--   driver calls are made.
start :: ExecutorDriver -> IO Status

-- | Stops the <a>ExecutorDriver</a>.
stop :: ExecutorDriver -> IO Status

-- | Aborts the driver so that no more callbacks can be made to the
--   executor. The semantics of abort and stop have deliberately been
--   separated so that code can detect an aborted driver (i.e., via the
--   return status of <tt>abort</tt>, see below), and instantiate and start
--   another driver if desired (from within the same process ... although
--   this functionality is currently not supported for executors).
abort :: ExecutorDriver -> IO Status

-- | Waits for the driver to be stopped or aborted, possibly *blocking* the
--   current thread indefinitely. The return status of this function can be
--   used to determine if the driver was aborted (see mesos.proto for a
--   description of Status).
await :: ExecutorDriver -> IO Status

-- | <a>start</a>s and immediately <tt>await</tt>s (i.e., blocks on) the
--   driver.
run :: ExecutorDriver -> IO Status

-- | Sends a status update to the framework scheduler, retrying as
--   necessary until an acknowledgement has been received or the executor
--   is terminated (in which case, a <a>Lost</a> status update will be
--   sent). See <a>statusUpdate</a> for more information about status
--   update acknowledgements.
sendStatusUpdate :: ExecutorDriver -> TaskStatus -> IO Status

-- | Sends a message to the framework scheduler. These messages are best
--   effort; do not expect a framework message to be retransmitted in any
--   reliable fashion.
sendFrameworkMessage :: ExecutorDriver -> ByteString -> IO Status

-- | A data structure of the underlying executor &amp; the callbacks that
--   are triggered via the Mesos C++ API.
data Executor
createExecutor :: ToExecutor a => a -> IO Executor
destroyExecutor :: Executor -> IO ()
withExecutor :: ToExecutor a => a -> (Executor -> IO b) -> IO b
createDriver :: Executor -> IO ExecutorDriver
destroyDriver :: ExecutorDriver -> IO ()
