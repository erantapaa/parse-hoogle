-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Networking support with a cleaner API
--   
@package network-fancy
@version 0.2.3

module Network.Fancy
type HostName = String
data Address

-- | Host name and port, either IPv4 or IPv6.
IP :: HostName -> Int -> Address

-- | Host name and port, only IPv4.
IPv4 :: HostName -> Int -> Address

-- | Host name and port, only IPv6
IPv6 :: HostName -> Int -> Address

-- | Local unix socket, not supported on Windows.
Unix :: FilePath -> Address

-- | Open a stream (tcp) socket for the given block and close it
--   afterwards.
withStream :: Address -> (Handle -> IO a) -> IO a

-- | Open a stream (tcp) socket.
connectStream :: Address -> IO Handle

-- | Open a datagram (udp) socket.
connectDgram :: Address -> IO Socket

-- | Open a datagram (udp) socket for the given block and close it
--   afterwards.
withDgram :: Address -> (Socket -> IO a) -> IO a
class StringLike string

-- | Receive one chunk with given maximum size
recv :: StringLike string => Socket -> Int -> IO string

-- | Send the string as one chunk
send :: StringLike string => Socket -> string -> IO ()

-- | Close the socket specified.
closeSocket :: Socket -> IO ()
data ServerSpec
ServerSpec :: Address -> Reverse -> Threading -> Bool -> Int -> ServerSpec

-- | Address for the server. Use hostname "" to bind to all interfaces.
address :: ServerSpec -> Address

-- | Should the address of connecting clients be suplied numerically or as
--   a name to server function.
reverseAddress :: ServerSpec -> Reverse

-- | Handle requests Inline or Threaded.
threading :: ServerSpec -> Threading

-- | Close the client connection automatically after the ServerFun
--   finishes.
closeConnection :: ServerSpec -> Bool

-- | Buffer size for receiving datagrams.
recvSize :: ServerSpec -> Int

-- | Default server specification
serverSpec :: ServerSpec
data Threading

-- | Run each request in a separate thread without blocking the server
--   loop.
Threaded :: Threading

-- | Run each request inline inside the request loop.
Inline :: Threading
data Reverse

-- | Use numeric addresses for peers.
ReverseNumeric :: Reverse

-- | Resolve reverse names if possible for peers.
ReverseName :: Reverse

-- | Run a stream (tcp) server. The function does not block, use
--   sleepForever if that is desired.
streamServer :: ServerSpec -> (Handle -> Address -> IO ()) -> IO [ThreadId]

-- | Run a datagram (udp) server. The function does not block, use
--   sleepForever if that is desired.
dgramServer :: StringLike packet => ServerSpec -> (packet -> Address -> IO [packet]) -> IO [ThreadId]

-- | Sleep forever. Useful after a server.
sleepForever :: IO ()

-- | Get the current hostname.
getCurrentHost :: IO HostName
data Socket

-- | Exceptions occuring in network-fancy.
data NetworkException
SocketException :: !String -> !Socket -> !Errno -> NetworkException
GetAdddrInfoException :: !CInt -> NetworkException
UnsupportedAddressFamilyException :: NetworkException
NoSuchHostException :: NetworkException
AddressTooLongException :: NetworkException
instance Typeable Address
instance Eq Address
instance Ord Address
instance Show Address
instance Show SocketAddress
instance StringLike ByteString
instance StringLike ByteString
instance StringLike String
