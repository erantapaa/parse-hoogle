-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An easy way to perform and unperform IO and other stateful actions.
--   
@package acme-timemachine
@version 0.0.1.0

module Acme.TimeMachine.Suspension

-- | Data representing the entire history of the state.
data Suspension s
Suspension :: s -> (Suspension s) -> Suspension s

-- | Create an infinite history consisting of the same state.
mkSuspension :: s -> Suspension s

module Acme.TimeMachine.Undoable

-- | Data representing the entire history of the state.
data Suspension s

-- | The undo-able stateful computation monad.
data Undoable s a
Undoable :: (Suspension s -> (Suspension s, a)) -> Undoable s a
getUndoable :: Undoable s a -> Suspension s -> (Suspension s, a)

-- | Run an undo-able computation and return both the resulting state and
--   the result.
--   
--   <pre>
--   &gt;&gt;&gt; runUndoable (do { modify (+3); return 5 }) 0
--   (3, 5)
--   </pre>
runUndoable :: Undoable s a -> s -> (s, a)

-- | Run an undo-able computation and return the result.
--   
--   <pre>
--   &gt;&gt;&gt; evalUndoable (do { return 5 }) 0
--   5
--   </pre>
evalUndoable :: Undoable s a -> s -> a

-- | Run an undo-able computation and return the resulting state.
--   
--   <pre>
--   &gt;&gt;&gt; execUndoable (do { modify (+3) }) 0
--   3
--   </pre>
execUndoable :: Undoable s a -> s -> s

-- | Save the history of a computation, to be later loaded with
--   <a>resume</a>.
suspend :: Undoable s (Suspension s)

-- | Load the history of a computation, saved by <a>suspend</a>.
resume :: Suspension s -> Undoable s ()

-- | Treat the events occuring inside this block as a single event, that
--   can be undone with a sinle <a>undo</a> invocation. | This will always
--   add exactly one item to the computation's history, even if the block
--   doesn't add any, or even removes some.
event :: Undoable s a -> Undoable s a

-- | Rollback the latest addition to the computation's history.
undo :: Undoable s ()
instance MonadState s (Undoable s)
instance Monad (Undoable s)
instance Applicative (Undoable s)
instance Functor (Undoable s)

module Acme.TimeMachine

-- | Data representing the entire history of the state.
data Suspension s

-- | State of the universe.
data Universe

-- | Undo-able side-effectful computation monad. Lets you perform and
--   unperform (with <a>undo</a>) computations with side-effects, for
--   example:
--   
--   <pre>
--   main = runTM $ do
--       liftIO $ putStrLn "Launching the missiles!"
--       undo
--   </pre>
--   
--   You can also use <a>suspend</a> and <a>resume</a> for a finer control
--   over execution and unexecution:
--   
--   <pre>
--   main = runTM $ do
--       universe &lt;- suspend
--       liftIO $ putStrLn "Launching the missiles!"
--       resume universe
--   </pre>
--   
--   Beware! You may accidentally create temporal paradoxes such as:
--   
--   <pre>
--   main = runTM $ do
--       universe &lt;- suspend
--       l &lt;- liftIO $ getLine
--       putStrLn l
--       unless (null l) $ resume universe
--   </pre>
type TimeMachine = Undoable Universe

-- | Rollback the latest addition to the computation's history.
undo :: Undoable s ()

-- | Save the history of a computation, to be later loaded with
--   <a>resume</a>.
suspend :: Undoable s (Suspension s)

-- | Load the history of a computation, saved by <a>suspend</a>.
resume :: Suspension s -> Undoable s ()

-- | Execute an undo-able computation.
runTM :: TimeMachine a -> IO a

-- | Treat the events occuring inside this block as a single event, that
--   can be undone with a sinle <a>undo</a> invocation. | This will always
--   add exactly one item to the computation's history, even if the block
--   doesn't add any, or even removes some.
event :: Undoable s a -> Undoable s a
instance MonadIO TimeMachine

module Acme.TimeMachine.STM

-- | State of the STM.
data Entanglement

-- | Undo-able atomic software transaction monad. Lets you perform and
--   unperform side-effectful atomic transactions.
type AtomicTimeMachine = Undoable Entanglement

-- | Run an STM action.
doSTM :: STM a -> AtomicTimeMachine a

-- | Embed an undo-able transaction in an undo-able computation.
atomicallyTM :: AtomicTimeMachine a -> TimeMachine a

-- | Execute an undo-able transaction.
runATM :: AtomicTimeMachine a -> STM a

-- | Execute an undo-able transaction within the IO monad.
runATMIO :: AtomicTimeMachine a -> IO a
