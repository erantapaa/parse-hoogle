-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monadic Javascript Compiler
--   
--   Monadic Javascript Compiler.
@package sunroof-compiler
@version 0.2


-- | Internal helper functions.
module Language.Sunroof.Internal

-- | Helps to get the proxy of a value.
proxyOf :: a -> Proxy a

-- | Determines wether a Javascript literal, given as a string, requires
--   parenthesis and adds them if so.
litparen :: String -> String


-- | Basic low-level types and their combinators. These are used as output
--   of the compiler. Everything here is untypes and not supposed for
--   public use!
module Language.Sunroof.JavaScript

-- | Short name for instantiated expressions.
type Expr = E ExprE

-- | Instantiated expressions.
data ExprE
ExprE :: Expr -> ExprE

-- | Plain expressions in Javascript.
data E expr

-- | A precompiled (atomic) Javascript literal.
Lit :: String -> E expr

-- | A variable.
Var :: Id -> E expr

-- | Field/attribute access (with type information): <tt>expr . expr ::
--   Type</tt>
Dot :: expr -> expr -> Type -> E expr

-- | Function application: <tt>expr ( expr, ..., expr )</tt>
Apply :: expr -> [expr] -> E expr

-- | Anonymous function with parameter names and body.
Function :: [Id] -> [Stmt] -> E expr

-- | Javascript identifier.
type Id = String

-- | Plain Javascript statements.
data Stmt

-- | Restricted assignment: <tt>Rhs = Expr;</tt>
AssignStmt :: Rhs -> Expr -> Stmt

-- | Delete reference <tt>delete Rhs;</tt>
DeleteStmt :: Expr -> Stmt

-- | Expression statement, for the sake of its side effects: <tt>Expr;</tt>
ExprStmt :: Expr -> Stmt

-- | Return statement: <tt>return Expr;</tt>
ReturnStmt :: Expr -> Stmt

-- | If-Then-Else statement: <tt>if (Expr) { Stmts } else { Stmts }</tt>
IfStmt :: Expr -> [Stmt] -> [Stmt] -> Stmt

-- | While loop: <tt>while (Expr) { Stmts }</tt>
WhileStmt :: Expr -> [Stmt] -> Stmt

-- | A comment in the code: <tt><i></i> String</tt>
CommentStmt :: String -> Stmt

-- | Abstract types for Javascript expressions in Sunroof.
data Type

-- | Base type like object or other primtive types.
Base :: Type

-- | Unit or void type. There is a effect but no value.
Unit :: Type

-- | Function type: <tt>(t_1,..,t_n) -&gt; t</tt>
Fun :: [Type] -> Type -> Type

-- | A Right hand side of an assignment.
data Rhs

-- | A variable
VarRhs :: Id -> Rhs

-- | a named field
DotRhs :: Expr -> Expr -> Rhs

-- | Show an expression as compiled Javascript. The boolean argument says
--   non-trivial arguments need parenthesis.
showExpr :: Bool -> Expr -> String

-- | Translate a statement into actual Javascript.
showStmt :: Stmt -> String

-- | Combinator to create a operator/function applied to the given
--   arguments.
operator :: Id -> [Expr] -> Expr

-- | Short-hand to create the applied binary operator/function. See
--   <a>operator</a>.
binOp :: String -> Expr -> Expr -> E ExprE

-- | Short-hand to create the applied unary operator/function. See
--   <a>operator</a>.
uniOp :: String -> Expr -> E ExprE

-- | Combinator to create a expression containing a literal in form of a
--   string.
literal :: String -> Expr

-- | Create a anonymous function to scope all effects in the given block of
--   statement.
scopeForEffect :: [Stmt] -> Expr
instance Eq Type
instance Ord Type
instance Show expr => Show (E expr)
instance Show ExprE
instance Show Type
instance Show Stmt
instance Functor E
instance Foldable E
instance Traversable E
instance MuRef ExprE


-- | Provides the central type classes used by Sunroof.
module Language.Sunroof.Classes

-- | Central type class of Sunroof. Every type that can be translated into
--   Javascript with Sunroof has to implement this type class.
class Sunroof a where typeOf _ = Base
box :: Sunroof a => Expr -> a
unbox :: Sunroof a => a -> Expr
typeOf :: Sunroof a => Proxy a -> Type

-- | All Haskell values that have a Sunroof representation implement this
--   class.
class SunroofValue a where type family ValueOf a :: *
js :: SunroofValue a => a -> ValueOf a

-- | Everything that can be used as argument to a function is
--   Javascript/Sunroof.
class SunroofArgument args
jsArgs :: SunroofArgument args => args -> [Expr]
jsValue :: (SunroofArgument args, UniqM m) => m args
typesOf :: SunroofArgument args => Proxy args -> [Type]

-- | Implemented if a monad supports unique number generation.
class Monad m => UniqM m
uniqM :: UniqM m => m Uniq

-- | Used for unique number generation.
type Uniq = Int

-- | Creates a Javascript variable of any Sunroof type.
mkVar :: Sunroof a => Uniq -> a

-- | Create a unique Javascript variable of any Sunroof type.
jsVar :: (Sunroof a, UniqM m) => m a
instance [overlap ok] (Sunroof a, Sunroof b, Sunroof c, Sunroof d, Sunroof e, Sunroof f, Sunroof g, Sunroof h, Sunroof i) => SunroofArgument (a, b, c, d, e, f, g, h, i)
instance [overlap ok] (Sunroof a, Sunroof b, Sunroof c, Sunroof d, Sunroof e, Sunroof f, Sunroof g, Sunroof h) => SunroofArgument (a, b, c, d, e, f, g, h)
instance [overlap ok] (Sunroof a, Sunroof b, Sunroof c, Sunroof d, Sunroof e, Sunroof f, Sunroof g) => SunroofArgument (a, b, c, d, e, f, g)
instance [overlap ok] (Sunroof a, Sunroof b, Sunroof c, Sunroof d, Sunroof e, Sunroof f) => SunroofArgument (a, b, c, d, e, f)
instance [overlap ok] (Sunroof a, Sunroof b, Sunroof c, Sunroof d, Sunroof e) => SunroofArgument (a, b, c, d, e)
instance [overlap ok] (Sunroof a, Sunroof b, Sunroof c, Sunroof d) => SunroofArgument (a, b, c, d)
instance [overlap ok] (Sunroof a, Sunroof b, Sunroof c) => SunroofArgument (a, b, c)
instance [overlap ok] (Sunroof a, Sunroof b) => SunroofArgument (a, b)
instance [overlap ok] SunroofArgument ()
instance [overlap ok] Sunroof a => SunroofArgument a
instance [overlap ok] SunroofValue ()
instance [overlap ok] Sunroof ()


-- | Booleans in Javascript.
module Language.Sunroof.JS.Bool

-- | Booleans in Javascript.
data JSBool

-- | Combinator for <tt>if-then-else</tt> expressions. Not intended for
--   usage. Provided as a convenience for <a>IfB</a> instances. Use
--   <a>ifB</a> instead.
jsIfB :: Sunroof a => JSBool -> a -> a -> a
instance SunroofValue Bool
instance EqB JSBool
instance IfB JSBool
instance Boolean JSBool
instance Sunroof JSBool
instance Show JSBool


-- | Abstraction over the most general type in Javascript.
module Language.Sunroof.JS.Object

-- | Data type for all Javascript objects.
data JSObject

-- | Create an arbitrary object from a literal in form of a string.
object :: String -> JSObject

-- | The <tt>this</tt> reference.
this :: JSObject
instance EqB JSObject
instance IfB JSObject
instance Sunroof JSObject
instance Show JSObject


-- | Numbers in Javascript.
module Language.Sunroof.JS.Number

-- | Type of numbers in Javascript.
data JSNumber

-- | A explicit cast to int.
int :: Sunroof a => a -> JSNumber
instance Integral a => SunroofValue (Ratio a)
instance SunroofValue Integer
instance SunroofValue Int
instance SunroofValue Float
instance SunroofValue Double
instance VectorSpace JSNumber
instance AdditiveGroup JSNumber
instance OrdB JSNumber
instance EqB JSNumber
instance IfB JSNumber
instance RealFloatB JSNumber
instance RealFracB JSNumber
instance Floating JSNumber
instance Fractional JSNumber
instance IntegralB JSNumber
instance NumB JSNumber
instance Num JSNumber
instance Sunroof JSNumber
instance Show JSNumber


-- | Strings in Javascript.
module Language.Sunroof.JS.String

-- | Javascript string type.
data JSString

-- | Create a Javascript string from a Haskell string.
string :: String -> JSString
instance SunroofValue Char
instance SunroofValue [Char]
instance EqB JSString
instance IfB JSString
instance IsString JSString
instance Monoid JSString
instance Semigroup JSString
instance Sunroof JSString
instance Show JSString


-- | <a>JSSelector</a> are used to access fields of Javascript objects.
module Language.Sunroof.Selector

-- | A <a>JSSelector</a> selects a field or attribute from a Javascript
--   object. The phantom type is the type of the selected value. Note the
--   selected field or attributes may also array entries (<a>index</a>).
data JSSelector a

-- | Create a selector for a named field or attribute. For type safty it is
--   adivsed to use this with an accompanying type signature. Example:
--   
--   <pre>
--   array ! label "length"
--   </pre>
--   
--   See <a>!</a> for further information on usage.
label :: JSString -> JSSelector a

-- | Create a selector for an indexed value (e.g. array access). For type
--   safty it is adivsed to use this with an accompanying type signature.
--   Example:
--   
--   <pre>
--   array ! index 4
--   </pre>
--   
--   See <a>!</a> for further information on usage.
index :: JSNumber -> JSSelector a

-- | Provided for internal usage by the compiler. Unwraps the selector.
unboxSelector :: JSSelector a -> Expr

-- | Operator to use a selector on a Javascript object. Examples:
--   
--   <pre>
--   array ! label "length"
--   array ! index 4
--   </pre>
(!) :: (Sunroof o, Sunroof a) => o -> JSSelector a -> a
instance Show (JSSelector a)
instance IsString (JSSelector a)


-- | The basic types and combinators of Sunroof.
module Language.Sunroof.Types

-- | The possible threading models for Javascript computations.
data T

-- | Atomic - The computation will not be interrupted.
A :: T

-- | Blocking - The computation may block and wait to enable interleaving
--   with other computations.
B :: T

-- | A proxy to capture the type of threading model used. See
--   <a>SunroofThread</a>.
data ThreadProxy (t :: T)
ThreadProxy :: ThreadProxy

-- | When implemented the type supports determining the threading model
--   during runtime.
class SunroofThread (t :: T)
evalStyle :: SunroofThread t => ThreadProxy t -> T
blockableJS :: (SunroofThread t, Sunroof a) => JS t a -> JS B a

-- | The monadic type of Javascript computations.
--   
--   <tt>JS t a</tt> is a computation using the thread model <tt>t</tt>
--   (see <a>T</a>). It returns a result of type <tt>a</tt>.
data JS :: T -> * -> *
JS :: ((a -> Program (JSI t) ()) -> Program (JSI t) ()) -> JS t a
(:=) :: JSSelector a -> a -> o -> JS t ()

-- | Short-hand type for atmoic Javascript computations.
type JSA a = JS A a

-- | Short-hand type for possibly blocking Javascript computations.
type JSB a = JS B a

-- | Unwraps the <a>JS</a> monad into a continuation on <a>Program</a>.
unJS :: JS t a -> (a -> Program (JSI t) ()) -> Program (JSI t) ()

-- | Lifts a single primitive Javascript instruction (<a>JSI</a>) into the
--   <a>JS</a> monad.
single :: JSI t a -> JS t a

-- | <a>JSI</a> represents the primitive effects or instructions for the JS
--   monad.
--   
--   <ul>
--   <li><i><tt>JS_Assign s v o</tt></i> assigns a value <tt>v</tt> to the
--   selected field <tt>s</tt> in the object <tt>o</tt>.</li>
--   <li><i><tt>JS_Select s o</tt></i> returns the value of the selected
--   field <tt>s</tt> in the object <tt>o</tt>.</li>
--   <li><i><tt>JS_Delete s o</tt></i> delete the selected field <tt>s</tt>
--   in the object <tt>o</tt>.</li>
--   <li><i><tt>JS_Invoke a f</tt></i> calls the function <tt>f</tt> with
--   the arguments <tt>a</tt>.</li>
--   <li><i><tt>JS_Eval v</tt></i> evaluates the value <tt>v</tt>.
--   Subsequent instructions use the value instead of reevaluating the
--   expression.</li>
--   <li><i><tt>JS_Function f</tt></i> creates a Javascript function from
--   the Haskell function <tt>f</tt>.</li>
--   <li><i><tt>JS_Continuation f</tt></i> creates a Javascript
--   continuation (function that never returns a value) from the Haskell
--   function <tt>f</tt>.</li>
--   <li><i><tt>JS_Branch b t f</tt></i> creates a <tt>if-then-else</tt>
--   statement in Javascript. In that statement <tt>b</tt> is the
--   condition, <tt>t</tt> is the true branch and <tt>f</tt> is the false
--   branch.</li>
--   <li><i><tt>JS_Return v</tt></i> translates into an actual
--   <tt>return</tt> statement that returns the value <tt>v</tt> in
--   Javascript.</li>
--   <li><i><tt>JS_Assign_ v x</tt></i> assigns the value <tt>x</tt> to the
--   variable with name <tt>v</tt>.</li>
--   <li><i><tt>JS_Fix v x</tt></i> models a fixpoint computation in
--   <a>JS</a>. See <tt>jsfix</tt>.</li>
--   </ul>
data JSI :: T -> * -> *
JS_Assign :: JSSelector a -> a -> JSObject -> JSI t ()
JS_Select :: JSSelector a -> JSObject -> JSI t a
JS_Delete :: JSSelector a -> JSObject -> JSI t ()
JS_Invoke :: a -> JSFunction a r -> JSI t r
JS_Eval :: a -> JSI t a
JS_Function :: (a -> JS A b) -> JSI t (JSFunction a b)
JS_Continuation :: (a -> JS B ()) -> JSI t (JSContinuation a)
JS_Branch :: bool -> JS t a -> JS t a -> JSI t a
JS_Return :: a -> JSI t ()
JS_Assign_ :: Id -> a -> JSI t ()
JS_Comment :: String -> JSI t ()
JS_Fix :: (a -> JS A a) -> JSI t a

-- | Reify the current contination as a Javascript continuation
callcc :: SunroofArgument a => (JSContinuation a -> JS B a) -> JS B a

-- | Abort the current computation at this point.
done :: JS t a

-- | Lift the atomic computation into another computation.
liftJS :: Sunroof a => JS A a -> JS t a

-- | <tt>kast</tt> is cast to continuation. <tt>k</tt> is the letter often
--   used to signify a continuation.
kast :: SunroofArgument a => JSFunction a () -> JSContinuation a

-- | Type of Javascript functions. The first type argument is the type of
--   function argument. This needs to be a instance of
--   <a>SunroofArgument</a>. The second type argument of <a>JSFunction</a>
--   is the function return type. It needs to be a instance of
--   <a>Sunroof</a>.
data JSFunction args ret

-- | Type of Javascript functions. The first type argument is the type of
--   function argument. This needs to be a instance of
--   <a>SunroofArgument</a>. The second type argument of <a>JSFunction</a>
--   is the function return type. It needs to be a instance of
--   <a>Sunroof</a>.
data JSContinuation args

-- | Create an <a>A</a>tomic Javascript function from a Haskell function.
function :: (SunroofArgument a, Sunroof b) => (a -> JS A b) -> JS t (JSFunction a b)

-- | We can compile <a>B</a>lockable functions that return <tt>()</tt>.
--   Note that, with the <a>B</a>-style threads, we return from a call when
--   we first block, not at completion of the call.
continuation :: SunroofArgument a => (a -> JS B ()) -> JS t (JSContinuation a)

-- | <tt>goto</tt> calls the given continuation with the given argument,
--   and never returns.
goto :: SunroofArgument args => JSContinuation args -> args -> JS t a

-- | <tt>apply f a</tt> applies the function <tt>f</tt> to the given
--   arguments <tt>a</tt>. A typical use case looks like this:
--   
--   <pre>
--   foo `apply` (x,y)
--   </pre>
--   
--   See <a>$$</a> for a convenient infix operator to do this.
apply :: (SunroofArgument args, Sunroof ret) => JSFunction args ret -> args -> JS t ret

-- | <tt>f $$ a</tt> applies the function <tt>f</tt> to the given arguments
--   <tt>a</tt>. See <a>apply</a>.
($$) :: (SunroofArgument args, Sunroof ret) => JSFunction args ret -> args -> JS t ret

-- | Cast one Sunroof value into another.
--   
--   This is sometimes needed due to Javascripts flexible type system.
cast :: (Sunroof a, Sunroof b) => a -> b

-- | The <tt>#</tt>-operator is the Haskell analog to the
--   <tt>.</tt>-operator in Javascript. Example:
--   
--   <pre>
--   document # getElementById "bla"
--   </pre>
--   
--   This can be seen as equivalent of
--   <tt>document.getElementById("bla")</tt>.
(#) :: a -> (a -> JS t b) -> JS t b

-- | Creates a selector for attributes of Javascript objects. It is advised
--   to use this together with an associated type signature to avoid
--   ambiguity. Example:
--   
--   <pre>
--   length :: JSSelector JSNumber
--   length = attr "length"
--   </pre>
--   
--   Selectors can be used with <a>!</a>.
attr :: String -> JSSelector a

-- | Create a binding to a Javascript top-level function with the given
--   name. It is advised to create these bindings with an associated type
--   signature to ensure type safty while using this function. Example:
--   
--   <pre>
--   alert :: JSFunction JSString ()
--   alert = fun "alert"
--   </pre>
fun :: (SunroofArgument a, Sunroof r) => String -> JSFunction a r

-- | <tt>invoke s a o</tt> calls the method with name <tt>s</tt> using the
--   arguments <tt>a</tt> on the object <tt>o</tt>. A typical use would
--   look like this:
--   
--   <pre>
--   o # invoke "foo" (x, y)
--   </pre>
--   
--   Another use case is writing Javascript API bindings for common
--   methods:
--   
--   <pre>
--   getElementById :: JSString -&gt; JSObject -&gt; JS t JSObject
--   getElementById s = invoke "getElementById" s
--   </pre>
--   
--   Like this the flexible type signature gets fixed. See <a>#</a> for how
--   to use these bindings.
invoke :: (SunroofArgument a, Sunroof r, Sunroof o) => String -> a -> o -> JS t r

-- | <tt>new n a</tt> calls the new operator on the constructor <tt>n</tt>
--   supplying the argument <tt>a</tt>. A typical use would look like this:
--   
--   <pre>
--   new "Object" ()
--   </pre>
new :: SunroofArgument a => String -> a -> JS t JSObject

-- | Evaluate a <a>Sunroof</a> value. This forces evaluation of the given
--   expression to a value and enables binding it to a variable. Example:
--   
--   <pre>
--   x &lt;- evaluate $ "A" &lt;&gt; "B"
--   alert x
--   alert x
--   </pre>
--   
--   This would result in: <tt>var v0 = "A"+"B"; alert(v0);
--   alert(v0);</tt>. But:
--   
--   <pre>
--   x &lt;- return $ "A" &lt;&gt; "B"
--   alert x
--   alert x
--   </pre>
--   
--   This will result in: <tt>alert("A"+"B"); alert("A"+"B");</tt>.
evaluate :: Sunroof a => a -> JS t a

-- | Synonym for <a>evaluate</a>.
value :: Sunroof a => a -> JS t a

-- | Combinator for <tt>switch</tt>-like statements in Javascript.
--   
--   <i>Note</i>: This will not be translated into actual switch statment,
--   because you are aloud arbitrary expressions in the cases.
switch :: (EqB a, BooleanOf a ~ JSBool, Sunroof a, Sunroof b, SunroofArgument b, SunroofThread t) => a -> [(a, JS t b)] -> JS t b

-- | The <tt>null</tt> reference in Javascript.
nullJS :: JSObject

-- | <tt>o # delete lab</tt> removes the label <tt>lab</tt> from the object
--   <tt>o</tt>.
delete :: Sunroof a => JSSelector a -> JSObject -> JS t ()

-- | If something is a <a>JSTuple</a>, it can easily be decomposed and
--   recomposed from different components. This is meant as a convenient
--   access to attributes of an object. TODO: revisit this
class Sunroof o => JSTuple o where type family Internals o
match :: (JSTuple o, Sunroof o) => o -> Internals o
tuple :: JSTuple o => Internals o -> JS t o

-- | Everything that can be used as an key in a dictionary lookup.
class Sunroof key => SunroofKey key
jsKey :: SunroofKey key => key -> JSSelector a
instance [overlap ok] Eq T
instance [overlap ok] Ord T
instance [overlap ok] Show T
instance [overlap ok] SunroofKey JSBool
instance [overlap ok] SunroofKey JSNumber
instance [overlap ok] SunroofKey JSString
instance [overlap ok] JSTuple JSObject
instance [overlap ok] SunroofArgument a => SunroofValue (a -> JS 'B ())
instance [overlap ok] (SunroofArgument a, Sunroof r) => IfB (JSContinuation a)
instance [overlap ok] SunroofArgument a => Sunroof (JSContinuation a)
instance [overlap ok] Show (JSContinuation a)
instance [overlap ok] (SunroofArgument a, Sunroof b) => SunroofValue (a -> JS 'A b)
instance [overlap ok] (SunroofArgument a, Sunroof r) => IfB (JSFunction a r)
instance [overlap ok] (SunroofArgument a, Sunroof r) => Sunroof (JSFunction a r)
instance [overlap ok] Show (JSFunction a r)
instance [overlap ok] Monoid (JS t ())
instance [overlap ok] Semigroup (JS t a)
instance [overlap ok] (SunroofThread t, Sunroof a, SunroofArgument a) => IfB (JS t a)
instance [overlap ok] Functor (JS t)
instance [overlap ok] Monad (JS t)
instance [overlap ok] SunroofThread 'B
instance [overlap ok] SunroofThread 'A


-- | Common utilities for Sunroof.
module Language.Sunroof.Utils

-- | Write a JavaScript comment into the generated source.
comment :: String -> JS t ()

-- | <tt>jsfix</tt> is the <tt>mfix</tt> for the JS Monad.
fixJS :: SunroofArgument a => (a -> JSA a) -> JS t a


-- | Provides template Haskell code to generate instances for JavaScript
--   object wrappers
--   (<a>https://github.com/ku-fpg/sunroof-compiler/wiki/JSObject-Wrapper-Types</a>).
module Language.Sunroof.TH

-- | <tt>derive</tt> derives an incomplete instance for <tt>JSTuple</tt>,
--   as well as completing other classes.
--   
--   you write the newtype explictly, and <tt>derive</tt> does the rest.
--   
--   <pre>
--   newtype JSX o = JSX JSObject
--   </pre>
--   
--   and then the start of the JSTuple instance, and the rest gets filled
--   in
--   
--   <pre>
--   derive [d| instance (SunroofArgument o) =&gt; JSTuple (JSX o) where
--                  type Internals (JSX o) = (JSString,JSNumber)
--          |]
--   </pre>
--   
--   generates
--   
--   <pre>
--   instance (SunroofArgument o) =&gt; Show (JSX o) where
--      show (JSX o) = show o
--   
--   instance (SunroofArgument o) =&gt; Sunroof (JSX o) where
--      unbox (JSX o) = unbox o
--      box o = JSX (box o)
--   
--   instance (SunroofArgument o) =&gt; IfB (JSX o) where
--      ifB = jsIfB
--   
--   type instance BooleanOf (JSX o) = JSBool
--   
--   instance (SunroofArgument o) =&gt; JSTuple (JSX o) where
--      type instance Internals (JSX o) = (JSString, JSNumber)
--      match o = (o ! attr "f1", o ! attr "f2")
--      tuple (v1,v2) = do
--          o &lt;- new "Object" ()
--          o # attr "f1" := v1
--          o # attr "f2" := v2
--          return (JSX o)
--   </pre>
deriveJSTuple :: Q [Dec] -> Q [Dec]


-- | Provides the Sunroof to Javascript compiler.
module Language.Sunroof.Compiler

-- | The sunroof compiler compiles an effect that returns a
--   Sunroof/JavaScript value into a JavaScript program. An example
--   invocation is
--   
--   <pre>
--   GHCi&gt; import Language.Sunroof
--   GHCi&gt; import Language.Sunroof.JS.Browser
--   GHCi&gt; import Data.Default
--   GHCi&gt; txt &lt;- sunroofCompileJSA def "main" $ do alert(js "Hello");
--   GHCi&gt; putStrLn txt
--   var main = (function() {
--     alert("Hello");
--   })();
--   </pre>
--   
--   (The extra function and application are intentional and are a common
--   JavaScript trick to circumvent scoping issues.)
--   
--   To generate a function, not just an effect, you can use the
--   <tt>function</tt> combinator.
--   
--   <pre>
--   GHCi&gt; txt &lt;- sunroofCompileJSA def "main" $ do
--              function $ \ n -&gt; do
--                  return (n * (n :: JSNumber))
--   GHCi&gt; putStrLn txt
--   var main = (function() {
--     var v1 = function(v0) {
--       return v0*v0;
--     };
--     return v1;
--   })();
--   </pre>
--   
--   Now <tt>main</tt> in JavaScript is bound to the square function.
sunroofCompileJSA :: Sunroof a => CompilerOpts -> String -> JS A a -> IO String

-- | Compiles code using the blocking threading model. Usage is the same as
--   for <a>sunroofCompileJSA</a>.
sunroofCompileJSB :: CompilerOpts -> String -> JS B () -> IO String

-- | Compile a Javascript computation (using the given continuation closer)
--   into basic Javascript statements. Also return the next fresh unique.
--   This function should only be used if you know what your doing!
compileJS :: CompilerOpts -> Uniq -> (a -> JS t ()) -> JS t a -> IO ([Stmt], Uniq)

-- | Options to setup the compiler.
data CompilerOpts
CompilerOpts :: Bool -> Bool -> Bool -> Int -> Bool -> CompilerOpts

-- | Do we reify to capture Haskell-level lets / CSEs?
co_on :: CompilerOpts -> Bool

-- | Do we also capture non-reified CSE, using Value Numbering?
co_cse :: CompilerOpts -> Bool

-- | Do we constant fold?
co_const :: CompilerOpts -> Bool

-- | How verbose is the compiler when running? standard 0 - 3 scale
co_verbose :: CompilerOpts -> Int

-- | Does the compiler output code without whitespace and layout? default
--   == False
co_compress :: CompilerOpts -> Bool
instance Show CompilerOpts
instance (Show e, Show (i e)) => Show (Inst i e)
instance UniqM CompM
instance Default CompilerOpts


-- | This module provides the equivalent of a <tt>IORef</tt> in the Sunroof
--   world.
module Language.Sunroof.JS.Ref

-- | This is the <tt>IORef</tt> of Sunroof.
data JSRef a

-- | Create a new <a>JSRef</a> with the given intial value.
newJSRef :: Sunroof a => a -> JS t (JSRef a)

-- | Non-blocking read of a <a>JSRef</a>.
readJSRef :: Sunroof a => JSRef a -> JS t a

-- | Non-blocking write of a <a>JSRef</a>.
writeJSRef :: Sunroof a => a -> JSRef a -> JS t ()

-- | Non-blocking modification of a <a>JSRef</a>.
modifyJSRef :: Sunroof a => (a -> JS A a) -> JSRef a -> JS t ()
instance Sunroof a => EqB (JSRef a)
instance Sunroof a => IfB (JSRef a)
instance Sunroof a => Sunroof (JSRef a)
instance Sunroof a => Show (JSRef a)


-- | <a>JSMap</a> provides an abstract and more type-safe access to maps in
--   JavaScript. It is a wrapper around the dictionary each object in
--   JavaScript is.
module Language.Sunroof.JS.Map

-- | <a>JSMap</a> abstraction. The first type parameter gives the type of
--   keys used by the name and the second gives the type of values.
data JSMap k a

-- | Create a new empty <a>JSMap</a>.
newMap :: JS t (JSMap k a)

-- | <tt>insert k x</tt> inserts an element <tt>x</tt> associated with the
--   given key <tt>k</tt> into a map.
insert :: (SunroofKey k, Sunroof a) => k -> a -> JSMap k a -> JS t ()

-- | <tt>lookup k</tt> selects the value associated with the key
--   <tt>k</tt>.
lookup' :: (SunroofKey k, Sunroof a) => k -> JSMap k a -> JS t a
size :: JSMap k a -> JS t JSNumber
instance (SunroofKey k, Sunroof a) => IfB (JSMap k a)
instance (SunroofKey k, Sunroof a) => Sunroof (JSMap k a)
instance (SunroofKey k, Sunroof a) => Show (JSMap k a)


-- | A reflection of the standard browser Javascript API.
module Language.Sunroof.JS.Browser

-- | Display the given text in a message box.
--   
--   See <a>http://www.w3schools.com/js/js_popup.asp</a>.
alert :: JSString -> JS t ()

-- | Ask the user to confirm the given massege.
--   
--   See <a>http://www.w3schools.com/js/js_popup.asp</a>.
confirm :: JSString -> JS t JSBool

-- | Ask the user to give some input. May return <tt>null</tt> or a string.
--   Don't forget to check against <tt>nullJS</tt> before casting to
--   string.
--   
--   See <a>http://www.w3schools.com/js/js_popup.asp</a>.
prompt :: JSString -> JSString -> JS t JSObject

-- | Decode the URI encoded in the given string.
decodeURI :: JSString -> JS t JSString

-- | Encode the given string in URI encoding.
encodeURI :: JSString -> JS t JSString

-- | Decode the URI encoded string. For use with <a>encodeURIComponent</a>.
decodeURIComponent :: JSString -> JS t JSString

-- | Encode the string with URI encoding. This encodes a few more
--   characters to make the string safe for direct server communication
--   (AJAX).
encodeURIComponent :: JSString -> JS t JSString

-- | Evaluate the given JavaScript string if possible. Returns the result
--   of evaluation. TODO: think about this a bit.
eval :: Sunroof a => JSString -> JS t a

-- | Check if a given number is within the valid JavaScript number range.
isFinite :: JSNumber -> JS t JSBool

-- | Check if a given number is NaN or not.
isNaN :: JSNumber -> JS t JSBool

-- | Parse the given string to a number.
parseFloat :: JSString -> JS t JSNumber

-- | Parse the given string to a number.
parseInt :: JSString -> JS t JSNumber

-- | The window object.
window :: JSObject

-- | Calls a function at specified intervals in milliseconds. It will
--   continue calling the function until <a>clearInterval</a> is called, or
--   the window is closed. The returned number is needed for
--   <a>clearInterval</a>. This is supposed to be called on the
--   <a>window</a> object. See:
--   <a>http://www.w3schools.com/jsref/met_win_setinterval.asp</a>
setInterval :: (() -> JSB ()) -> JSNumber -> JSObject -> JS t JSNumber

-- | Clears a timer set with the <a>setInterval</a> method. This is
--   supposed to be called on the <a>window</a> object. See:
--   <a>http://www.w3schools.com/jsref/met_win_clearinterval.asp</a>
clearInterval :: JSNumber -> JSObject -> JS t ()

-- | Execute the given continutation after the given amount of
--   milliseconds. Returns a handler for the set timer. This is supposed to
--   be called on the <a>window</a> object. See:
--   <a>http://www.w3schools.com/jsref/met_win_settimeout.asp</a>
setTimeout :: (() -> JSB ()) -> JSNumber -> JSObject -> JS t JSNumber

-- | Removes the timer associated with the given handler. This is supposed
--   to be called on the <a>window</a> object. See:
--   <a>http://www.w3schools.com/jsref/met_win_cleartimeout.asp</a>
clearTimeout :: JSNumber -> JSObject -> JS t ()

-- | The screen object.
screen :: JSObject

-- | The document object.
document :: JSObject

-- | Get the DOM object of the element with the given id. For use with
--   <a>document</a>.
getElementById :: JSString -> JSObject -> JS t JSObject

-- | Get the DOM objects of the elements with the given name. For use with
--   <a>document</a>.
getElementsByName :: JSString -> JSObject -> JS t JSObject

-- | Get the DOM objects of the elements with the given tag. For use with
--   <a>document</a>.
getElementsByTagName :: JSString -> JSObject -> JS t JSObject

-- | Create a attribute DOM node with the given name. For use with
--   <a>document</a>.
createAttribute :: JSString -> JSObject -> JS t JSObject

-- | Create a element DOM node with the given tag name. For use with
--   <a>document</a>.
createElement :: JSString -> JSObject -> JS t JSObject

-- | Create a text DOM node with the given string as text. For use with
--   <a>document</a>.
createTextNode :: JSString -> JSObject -> JS t JSObject

-- | Opens the document for writing. For use with <a>document</a>.
open :: JSObject -> JS t ()

-- | Closes the document after writing. For use with <a>document</a>.
close :: JSObject -> JS t ()

-- | Writes something into the document. For use with <a>document</a>.
write :: JSString -> JSObject -> JS t ()

-- | Write something into the document and appends a new line. For use with
--   <a>document</a>.
writeln :: JSString -> JSObject -> JS t ()

-- | Sets the value of the cookie. For use with <a>document</a>.
setCookie :: JSString -> JSObject -> JS t ()

-- | Returns the value of the cookie. For use with <a>document</a>.
cookie :: JSSelector JSString

-- | Returns the referrer of the document. For use with <a>document</a>.
referrer :: JSSelector JSString

-- | Sets the title of the document. For use with <a>document</a>.
setTitle :: JSString -> JSObject -> JS t ()

-- | Returns the title of the document. For use with <a>document</a>.
title :: JSSelector JSString

-- | Returns the complete URL of the document. For use with
--   <a>document</a>.
url :: JSSelector JSString

-- | Returns the src of a DOM image object.
src :: JSSelector JSString

-- | The type of the debugging console object. See:
--   <a>https://developers.google.com/chrome-developer-tools/docs/console-api</a>,
--   <a>https://developer.mozilla.org/en-US/docs/DOM/console</a>,
--   <a>http://msdn.microsoft.com/en-us/library/windows/apps/hh696634.aspx</a>;
data JSConsole

-- | The console object.
console :: JSConsole

-- | Log the given message.
log :: SunroofArgument a => a -> JSConsole -> JS t ()

-- | Send a debug level message to the console.
debug :: SunroofArgument a => a -> JSConsole -> JS t ()

-- | Send a info message to the console.
info :: SunroofArgument a => a -> JSConsole -> JS t ()

-- | Send a warning message to the console.
warn :: SunroofArgument a => a -> JSConsole -> JS t ()

-- | Send an error message to the console.
error :: SunroofArgument a => a -> JSConsole -> JS t ()
instance EqB JSConsole
instance IfB JSConsole
instance Sunroof JSConsole
instance Show JSConsole


-- | Provides common combinators for concurrency in Javascript.
--   
--   The emulated threading Javascript threading model provided by Sunroof
--   is based on cooperative multithreading (since Javascript is not
--   multithreaded).
module Language.Sunroof.Concurrent

-- | <tt>loop x f</tt> executes the function <tt>f</tt> repeatedly. After
--   each iteration the result value of the function is feed back as input
--   of the next iteration. The initial value supplied for the first
--   iteration is <tt>x</tt>. This loop will never terminate.
loop :: Sunroof a => a -> (a -> JSB a) -> JSB ()

-- | Fork of the given computation in a different thread.
forkJS :: SunroofThread t1 => JS t1 () -> JS t2 ()

-- | Delay the execution of all instructions after this one by the given
--   amount of milliseconds.
threadDelay :: JSNumber -> JSB ()

-- | Give another thread time to execute.
yield :: JSB ()


-- | The <tt>Date</tt> module provides the API for the Javascript
--   <tt>Date</tt> object. The API documentation is mainly taken from
--   w3schools (<a>http://www.w3schools.com/jsref/jsref_obj_date.asp</a>).
--   Deprecated methods are not supported.
module Language.Sunroof.JS.Date

-- | The type of a date object.
data JSDate

-- | Creates a new <tt>Date</tt> object. See:
--   <a>http://www.w3schools.com/jsref/jsref_obj_date.asp</a>
newDate :: SunroofArgument a => a -> JS t JSDate

-- | Returns the hour (from 0-23). See:
--   <a>http://www.w3schools.com/jsref/jsref_gethours.asp</a>
getHours :: JSDate -> JS t JSNumber

-- | Returns the minutes (from 0-59). See:
--   <a>http://www.w3schools.com/jsref/jsref_getminutes.asp</a>
getMinutes :: JSDate -> JS t JSNumber

-- | Returns the seconds (from 0-59). See:
--   <a>http://www.w3schools.com/jsref/jsref_getseconds.asp</a>
getSeconds :: JSDate -> JS t JSNumber

-- | Returns the day of the month (from 1-31). See:
--   <a>http://www.w3schools.com/jsref/jsref_getdate.asp</a>
getDate :: JSDate -> JS t JSNumber

-- | Returns the day of the week (from 0-6). See:
--   <a>http://www.w3schools.com/jsref/jsref_getday.asp</a>
getDay :: JSDate -> JS t JSNumber

-- | Returns the year (four digits). See:
--   <a>http://www.w3schools.com/jsref/jsref_getfullyear.asp</a>
getFullYear :: JSDate -> JS t JSNumber

-- | Returns the milliseconds (from 0-999). See:
--   <a>http://www.w3schools.com/jsref/jsref_getmilliseconds.asp</a>
getMilliseconds :: JSDate -> JS t JSNumber

-- | Returns the month (from 0-11). See:
--   <a>http://www.w3schools.com/jsref/jsref_getmonth.asp</a>
getMonth :: JSDate -> JS t JSNumber

-- | Returns the number of milliseconds since midnight Jan 1, 1970. See:
--   <a>http://www.w3schools.com/jsref/jsref_gettime.asp</a>
getTime :: JSDate -> JS t JSNumber

-- | Returns the time difference between UTC time and local time, in
--   minutes. See:
--   <a>http://www.w3schools.com/jsref/jsref_gettimezoneoffset.asp</a>
getTimezoneOffset :: JSDate -> JS t JSNumber

-- | Returns the day of the month, according to universal time (from 1-31).
--   See: <a>http://www.w3schools.com/jsref/jsref_getutcdate.asp</a>
getUTCDate :: JSDate -> JS t JSNumber

-- | Returns the day of the week, according to universal time (from 0-6).
--   See: <a>http://www.w3schools.com/jsref/jsref_getutcday.asp</a>
getUTCDay :: JSDate -> JS t JSNumber

-- | Returns the year, according to universal time (four digits). See:
--   <a>http://www.w3schools.com/jsref/jsref_getutcfullyear.asp</a>
getUTCFullYear :: JSDate -> JS t JSNumber

-- | Returns the hour, according to universal time (from 0-23). See:
--   <a>http://www.w3schools.com/jsref/jsref_getutchours.asp</a>
getUTCHours :: JSDate -> JS t JSNumber

-- | Returns the milliseconds, according to universal time (from 0-999).
--   See:
--   <a>http://www.w3schools.com/jsref/jsref_getutcmilliseconds.asp</a>
getUTCMilliseconds :: JSDate -> JS t JSNumber

-- | Returns the minutes, according to universal time (from 0-59). See:
--   <a>http://www.w3schools.com/jsref/jsref_getutcminutes.asp</a>
getUTCMinutes :: JSDate -> JS t JSNumber

-- | Returns the month, according to universal time (from 0-11). See:
--   <a>http://www.w3schools.com/jsref/jsref_getutcmonth.asp</a>
getUTCMonth :: JSDate -> JS t JSNumber

-- | Returns the seconds, according to universal time (from 0-59). See:
--   <a>http://www.w3schools.com/jsref/jsref_getutcseconds.asp</a>
getUTCSeconds :: JSDate -> JS t JSNumber

-- | Parses a date string and returns the number of milliseconds since
--   midnight of January 1, 1970. See:
--   <a>http://www.w3schools.com/jsref/jsref_parse.asp</a>
parseDate :: JSString -> JSDate -> JS t JSNumber

-- | Sets the day of the month of a date object. See:
--   <a>http://www.w3schools.com/jsref/jsref_setdate.asp</a>
setDate :: JSNumber -> JSDate -> JS t ()

-- | Sets the year (four digits) of a date object. See:
--   <a>http://www.w3schools.com/jsref/jsref_setfullyear.asp</a>
setFullYear :: JSNumber -> JSDate -> JS t ()

-- | Sets the hour of a date object. See:
--   <a>http://www.w3schools.com/jsref/jsref_sethours.asp</a>
setHours :: JSNumber -> JSDate -> JS t ()

-- | Sets the milliseconds of a date object. See:
--   <a>http://www.w3schools.com/jsref/jsref_setmilliseconds.asp</a>
setMilliseconds :: JSNumber -> JSDate -> JS t ()

-- | Set the minutes of a date object. See:
--   <a>http://www.w3schools.com/jsref/jsref_setminutes.asp</a>
setMinutes :: JSNumber -> JSDate -> JS t ()

-- | Sets the month of a date object. See:
--   <a>http://www.w3schools.com/jsref/jsref_setmonth.asp</a>
setMonth :: JSNumber -> JSDate -> JS t ()

-- | Sets the seconds of a date object. See:
--   <a>http://www.w3schools.com/jsref/jsref_setseconds.asp</a>
setSeconds :: JSNumber -> JSDate -> JS t ()

-- | Sets a date and time by adding or subtracting a specified number of
--   milliseconds to/from midnight January 1, 1970. See:
--   <a>http://www.w3schools.com/jsref/jsref_settime.asp</a>
setTime :: JSNumber -> JSDate -> JS t ()

-- | Sets the day of the month of a date object, according to universal
--   time. See: <a>http://www.w3schools.com/jsref/jsref_setutcdate.asp</a>
setUTCDate :: JSNumber -> JSDate -> JS t ()

-- | Sets the year of a date object, according to universal time (four
--   digits). See:
--   <a>http://www.w3schools.com/jsref/jsref_setutcfullyear.asp</a>
setUTCFullYear :: JSNumber -> JSDate -> JS t ()

-- | Sets the hour of a date object, according to universal time. See:
--   <a>http://www.w3schools.com/jsref/jsref_setutchours.asp</a>
setUTCHours :: JSNumber -> JSDate -> JS t ()

-- | Sets the milliseconds of a date object, according to universal time.
--   See:
--   <a>http://www.w3schools.com/jsref/jsref_setutcmilliseconds.asp</a>
setUTCMilliseconds :: JSNumber -> JSDate -> JS t ()

-- | Set the minutes of a date object, according to universal time. See:
--   <a>http://www.w3schools.com/jsref/jsref_setutcminutes.asp</a>
setUTCMinutes :: JSNumber -> JSDate -> JS t ()

-- | Sets the month of a date object, according to universal time. See:
--   <a>http://www.w3schools.com/jsref/jsref_setutcmonth.asp</a>
setUTCMonth :: JSNumber -> JSDate -> JS t ()

-- | Set the seconds of a date object, according to universal time. See:
--   <a>http://www.w3schools.com/jsref/jsref_setutcseconds.asp</a>
setUTCSeconds :: JSNumber -> JSDate -> JS t ()

-- | Converts the date portion of a Date object into a readable string.
--   See: <a>http://www.w3schools.com/jsref/jsref_todatestring.asp</a>
toDateString :: JSDate -> JS t JSString

-- | Returns the date as a string, using the ISO standard. See:
--   <a>http://www.w3schools.com/jsref/jsref_toisostring.asp</a>
toISOString :: JSDate -> JS t JSString

-- | Returns the date as a string, formated as a JSON date. See:
--   <a>http://www.w3schools.com/jsref/jsref_tojson.asp</a>
toJSON :: JSDate -> JS t JSString

-- | Returns the date portion of a Date object as a string, using locale
--   conventions. See:
--   <a>http://www.w3schools.com/jsref/jsref_tolocaledatestring.asp</a>
toLocaleDateString :: JSDate -> JS t JSString

-- | Returns the time portion of a Date object as a string, using locale
--   conventions. See:
--   <a>http://www.w3schools.com/jsref/jsref_tolocaletimestring.asp</a>
toLocaleTimeString :: JSDate -> JS t JSString

-- | Converts a Date object to a string, using locale conventions. See:
--   <a>http://www.w3schools.com/jsref/jsref_tolocalestring.asp</a>
toLocaleString :: JSDate -> JS t JSString

-- | Converts a Date object to a string. See:
--   <a>http://www.w3schools.com/jsref/jsref_tostring_date.asp</a>
toString :: JSDate -> JS t JSString

-- | Converts the time portion of a Date object to a string. See:
--   <a>http://www.w3schools.com/jsref/jsref_totimestring.asp</a>
toTimeString :: JSDate -> JS t JSString

-- | Converts a Date object to a string, according to universal time. See:
--   <a>http://www.w3schools.com/jsref/jsref_toutcstring.asp</a>
toUTCString :: JSDate -> JS t JSString
instance EqB JSDate
instance IfB JSDate
instance Sunroof JSDate
instance Show JSDate


-- | Provides bindings to the Javascript API of the HTML5 canvas element.
--   
--   See <a>http://www.w3schools.com/tags/ref_canvas.asp</a>.
module Language.Sunroof.JS.Canvas

-- | The type of the canvas drawing context.
data JSCanvas

-- | Returns the canvas drawing context for the canvas element it is called
--   on.
getContext :: JSString -> JSObject -> JS t JSCanvas

-- | Draws a circular arc.
arc :: (JSNumber, JSNumber) -> JSNumber -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Draws a circular arc.
arc' :: (JSNumber, JSNumber) -> JSNumber -> (JSNumber, JSNumber) -> JSBool -> JSCanvas -> JS t ()

-- | Creates an arc between two tangents on the canvas.
arcTo :: (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSNumber -> JSCanvas -> JS t ()

-- | Begins drawing a path or resets the current path
beginPath :: JSCanvas -> JS t ()

-- | Draws a bezier curve beginning at the current position of the context.
bezierCurveTo :: (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Clears the rectangle given by its location and size.
clearRect :: (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Clips a region of any shape and size from the context.
clip :: JSCanvas -> JS t ()

-- | Closes the current path by drawing a straight line back to its
--   beginning.
closePath :: JSCanvas -> JS t ()

-- | Create a new image data object with the given size.
createImageData :: (JSNumber, JSNumber) -> JSCanvas -> JS t JSObject

-- | Creates a new image data object with the same dimension as the given
--   image data object. This does not copy the contents of the other
--   object.
createImageData' :: JSObject -> JSCanvas -> JS t JSObject

-- | Draws an image, video or canvas to the canvas.
drawImage :: JSObject -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Draws an image, video or canvas to the canvas.
drawImage' :: JSObject -> (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Draws an image, video or canvas to the canvas. Clips the drawn object.
drawImageClip :: JSObject -> (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Fills the current path with the current fill style.
fill :: JSCanvas -> JS t ()

-- | Draws a filled rectangle given by its top left corner and size with
--   the current fill style.
fillRect :: (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Sets the fill style of the context. A color value of the form
--   <a>#XXXXXX</a> is expected.
setFillStyle :: JSString -> JSCanvas -> JS t ()

-- | Fills a text with the current fill style.
fillText :: JSString -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Fills a text with the current fill style.
fillText' :: JSString -> (JSNumber, JSNumber) -> JSNumber -> JSCanvas -> JS t ()

-- | Sets the font used by the context.
setFont :: JSString -> JSCanvas -> JS t ()

-- | Get the image data of the specified rectanlge of the canvas.
getImageData :: (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSCanvas -> JS t JSObject

-- | Sets the global alpha value.
setGlobalAlpha :: JSNumber -> JSCanvas -> JS t ()

-- | Returns true if the given point is in the path and false otherwise.
isPointInPath :: (JSNumber, JSNumber) -> JSCanvas -> JS t JSBool

-- | Sets the line cap style to use. Possible values are: <a>butt</a>,
--   <a>round</a>, <a>square</a>;
setLineCap :: JSString -> JSCanvas -> JS t ()

-- | Sets the line join style to use. Possible values are: <a>bevel</a>,
--   <a>round</a>, <a>meter</a>;
setLineJoin :: JSString -> JSCanvas -> JS t ()

-- | Create a straight line path from the current point to the given point.
lineTo :: (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Sets the line width used when stroking.
setLineWidth :: JSNumber -> JSCanvas -> JS t ()

-- | Returns the miter limit used when drawing a miter line join.
miterLimit :: JSSelector JSNumber

-- | Sets the miter limit used when drawing a miter line join.
setMiterLimit :: JSNumber -> JSCanvas -> JS t ()

-- | Returns an object that contains the width of the specified text is
--   pixels. See <a>width</a> selector.
measureText :: JSString -> JSCanvas -> JS t JSObject

-- | Move the path to the given location.
moveTo :: (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Uses the given image data to replace the rectangle of the canvas at
--   the given position.
putImageData :: JSObject -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Creates a rectangle in the current context.
rect :: (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Restores the last saved paths and state of the context.
restore :: JSCanvas -> JS t ()

-- | Rotates the current drawing. The rotation will only affect drawings
--   made after the rotation.
rotate :: JSNumber -> JSCanvas -> JS t ()

-- | Scales the current drawing.
scale :: (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Saves the state of the current context.
save :: JSCanvas -> JS t ()

-- | Resets the transformation matrix to identity and then applies
--   <a>transform</a> with the given paramters to it.
setTransform :: JSNumber -> JSNumber -> JSNumber -> JSNumber -> JSNumber -> JSNumber -> JSCanvas -> JS t ()

-- | Sets the shadow color property. The given string has to be a valid CSS
--   color value or a color of the form '#XXXXXX'
setShadowColor :: JSString -> JSCanvas -> JS t ()

-- | Sets the blur level for shadows.
setShadowBlur :: JSNumber -> JSCanvas -> JS t ()

-- | Sets the x offset of a shadow from a shape.
setShadowOffsetX :: JSNumber -> JSCanvas -> JS t ()

-- | Sets the y offset of a shadow from a shape.
setShadowOffsetY :: JSNumber -> JSCanvas -> JS t ()

-- | Draws the current path using the current stroke style.
stroke :: JSCanvas -> JS t ()

-- | Strokes a rectanlge using the current stroke style.
strokeRect :: (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Strokes a text using the current stroke style.
strokeText :: JSString -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Sets the stroke style of the context. A color value of the form
--   <a>#XXXXXX</a> is expected.
setStrokeStyle :: JSString -> JSCanvas -> JS t ()

-- | Sets the text alignment to be used when drawing text. Possible values
--   are: <a>center</a>, <a>end</a>, <a>left</a>, <a>right</a>,
--   <a>start</a>
setTextAlign :: JSString -> JSCanvas -> JS t ()

-- | Sets the baseline to use when drawing text. Possible values are:
--   <a>alphabetic</a>, <a>top</a>, <a>hanging</a>, <a>middle</a>,
--   <a>ideographic</a>, <a>bottom</a>
setTextBaseline :: JSString -> JSCanvas -> JS t ()

-- | Alters the current transformation matrix. The current one is
--   multiplied with one of the form: <tt> a b c d e f 0 0 1 </tt>
transform :: JSNumber -> JSNumber -> JSNumber -> JSNumber -> JSNumber -> JSNumber -> JSCanvas -> JS t ()

-- | Translate the current drawing.
translate :: (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Create a quadratic curve to extend the current path.
quadraticCurveTo :: (JSNumber, JSNumber) -> (JSNumber, JSNumber) -> JSCanvas -> JS t ()

-- | Selects the width attribute.
width :: JSSelector JSNumber

-- | Selects the height attribute.
height :: JSSelector JSNumber

-- | Selects the data attribute.
data' :: JSSelector JSObject

-- | Selects the global alpha attribute.
globalAlpha :: JSSelector JSNumber

-- | Selects the shadow color attribute.
shadowColor :: JSSelector JSString

-- | Selects the blur level for shadows.
shadowBlur :: JSSelector JSNumber

-- | Selects the x offset of a shadow from a shape.
shadowOffsetX :: JSSelector JSNumber

-- | Selects the y offset of a shadow from a shape.
shadowOffsetY :: JSSelector JSNumber

-- | Selects the stroke style of the context.
strokeStyle :: JSSelector JSString

-- | Selects the text alignment to be used when drawing text. Possible
--   values are: <a>center</a>, <a>end</a>, <a>left</a>, <a>right</a>,
--   <a>start</a>
textAlign :: JSSelector JSString

-- | Selects the baseline to use when drawing text. Possible values are:
--   <a>alphabetic</a>, <a>top</a>, <a>hanging</a>, <a>middle</a>,
--   <a>ideographic</a>, <a>bottom</a>
textBaseline :: JSSelector JSString

-- | Sets the line cap style to use. Possible values are: <a>butt</a>,
--   <a>round</a>, <a>square</a>;
lineCap :: JSSelector JSString

-- | Selects the line join style to use. Possible values are: <a>bevel</a>,
--   <a>round</a>, <a>meter</a>;
lineJoin :: JSSelector JSString

-- | Selects the line width used when stroking.
lineWidth :: JSSelector JSNumber

-- | Selects the font used by the context.
font :: JSSelector JSString
instance EqB JSCanvas
instance IfB JSCanvas
instance Sunroof JSCanvas
instance Show JSCanvas


-- | This module provides parts of the JQuery API
--   (<a>http://api.jquery.com/</a>).
module Language.Sunroof.JS.JQuery

-- | The dollar function. See <a>http://api.jquery.com/jQuery/</a>.
dollar :: JSFunction JSString JSObject

-- | Calls the JQuery dollar function. See
--   <a>http://api.jquery.com/jQuery/</a>.
jQuery :: JSString -> JS t JSObject

-- | Short-hand for <a>jQuery</a>.
jq :: JSString -> JS t JSObject

-- | See <a>http://api.jquery.com/append/</a>.
append :: JSObject -> JSObject -> JS t ()

-- | See <tt>.html()</tt> at <a>http://api.jquery.com/html/</a>.
html :: JSObject -> JS t JSObject

-- | See <tt>.html(htmlString)</tt> at <a>http://api.jquery.com/html/</a>.
setHtml :: JSString -> JSObject -> JS t JSObject

-- | See <tt>.text()</tt> at <a>http://api.jquery.com/text/</a>.
text :: JSObject -> JS t JSObject

-- | See <tt>.text(textString)</tt> at <a>http://api.jquery.com/text/</a>.
setText :: JSString -> JSObject -> JS t JSObject

-- | See <tt>.css(propertyName)</tt> at <a>http://api.jquery.com/css/</a>.
css :: JSString -> JSObject -> JS t JSString

-- | See <tt>.css(propertyName, value)</tt> at
--   <a>http://api.jquery.com/css/</a>.
setCss :: JSString -> JSString -> JSObject -> JS t JSString

-- | See <a>http://api.jquery.com/addClass/</a>.
addClass :: JSString -> JSObject -> JS t ()

-- | See <a>http://api.jquery.com/removeClass/</a>.
removeClass :: JSString -> JSObject -> JS t ()

-- | See <tt>.attr(attributeName)</tt> at
--   <a>http://api.jquery.com/attr/</a>. This binding does not have the
--   original Javascript name, because of the <a>attr</a> function.
attribute :: JSString -> JSObject -> JS t JSString

-- | See <tt>.attr(attributeName)</tt> at
--   <a>http://api.jquery.com/attr/</a>. This binding does not have the
--   original Javascript name, because of the <a>attr</a> function.
attr' :: JSString -> JSObject -> JS t JSString

-- | See <tt>.attr(attributeName, value)</tt> at
--   <a>http://api.jquery.com/attr/</a>.
setAttr :: JSString -> JSString -> JSObject -> JS t JSString

-- | See: <a>http://api.jquery.com/removeAttr/</a>
removeAttr :: JSString -> JSObject -> JS t JSObject

-- | See <a>http://api.jquery.com/on/</a>.
on :: SunroofArgument a => JSString -> JSString -> (a -> JS B ()) -> JSObject -> JS t ()

-- | See <a>http://api.jquery.com/innerHeight/</a>.
innerWidth :: JSObject -> JS t JSNumber

-- | See <a>http://api.jquery.com/innerWidth/</a>.
innerHeight :: JSObject -> JS t JSNumber

-- | See <a>http://api.jquery.com/outerWidth/</a>.
outerWidth :: JSObject -> JS t JSNumber

-- | See <a>http://api.jquery.com/outerWidth/</a>.
outerWidth' :: JSBool -> JSObject -> JS t JSNumber

-- | See <a>http://api.jquery.com/outerHeight/</a>.
outerHeight :: JSObject -> JS t JSNumber

-- | See <a>http://api.jquery.com/outerHeight/</a>.
outerHeight' :: JSBool -> JSObject -> JS t JSNumber

-- | See <tt>.clone()</tt> at <a>http://api.jquery.com/clone/</a>.
clone :: JSObject -> JS t JSObject

-- | See <tt>.clone(withDataAndEvents, deepWithDataAndEvents)</tt> at
--   <a>http://api.jquery.com/clone/</a>.
clone' :: JSBool -> JSBool -> JSObject -> JS t JSObject


-- | Provides a more specific type for arrays in Javascript (together with
--   basic operations on them).
module Language.Sunroof.JS.Array

-- | Type if arrays in Javascript. The type parameter given the entry type.
data JSArray a

-- | Create a literal array from a Haskell list.
array :: (SunroofValue a, Sunroof (ValueOf a)) => [a] -> JS t (JSArray (ValueOf a))

-- | Create a new array object containing the given values.
newArray :: (SunroofArgument args, Sunroof a) => args -> JS t (JSArray a)

-- | The <tt>length</tt> property of arrays.
length' :: JSSelector JSNumber

-- | A type-safe version of array lookup.
lookup' :: Sunroof a => JSNumber -> JSArray a -> a

-- | A type-safe version of array insert.
insert' :: Sunroof a => JSNumber -> a -> JSArray a -> JS t ()

-- | Push a element into the array as if it was a stack. Returns nothing
--   instead of the new length. See
--   <a>http://www.w3schools.com/jsref/jsref_push.asp</a>.
push :: (SunroofArgument a, Sunroof a) => a -> JSArray a -> JS t ()

-- | Pop a element from the array as if it was a stack. See
--   <a>http://www.w3schools.com/jsref/jsref_pop.asp</a>.
pop :: Sunroof a => JSArray a -> JS t a

-- | Removes and return the first element of an array (dequeue). See
--   <a>http://www.w3schools.com/jsref/jsref_shift.asp</a>.
shift :: Sunroof a => JSArray a -> JS t a

-- | Adds a new element to the beginning of the array (queue). Returns
--   nothing instead of the new length. See
--   <a>http://www.w3schools.com/jsref/jsref_unshift.asp</a>.
unshift :: (SunroofArgument a, Sunroof a) => a -> JSArray a -> JS t ()

-- | Foreach iteration method provided by most browsers. Execute the given
--   action on each element of the array. See
--   <a>https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach</a>,
--   <a>http://msdn.microsoft.com/en-us/library/ie/ff679980.aspx</a>.
forEach :: (Sunroof a, SunroofArgument a) => (a -> JS A ()) -> JSArray a -> JS t ()

-- | The empty array.
empty :: Sunroof a => JS t (JSArray a)
instance Sunroof a => IfB (JSArray a)
instance Sunroof a => Sunroof (JSArray a)
instance Show (JSArray a)


-- | <a>JSChan</a> provides the same functionality and concurrency
--   abstraction in Javascript computations as <a>Chan</a> in Haskell.
module Language.Sunroof.JS.Chan

-- | <a>JSChan</a> abstraction. The type parameter gives the type of values
--   held in the channel.
data JSChan a

-- | Create a new empty <a>JSChan</a>.
newChan :: SunroofArgument a => JS t (JSChan a)

-- | Put a value into the channel. This will never block.
writeChan :: (SunroofThread t, SunroofArgument a) => a -> JSChan a -> JS t ()

-- | Take a value out of the channel. If there is no value inside, this
--   will block until one is available.
readChan :: (Sunroof a, SunroofArgument a) => JSChan a -> JS B a
instance SunroofArgument o => EqB (JSChan o)
instance SunroofArgument o0 => JSTuple (JSChan o0)
instance SunroofArgument o0 => IfB (JSChan o0)
instance SunroofArgument o0 => Sunroof (JSChan o0)
instance SunroofArgument o0 => Show (JSChan o0)


-- | <a>JSMVar</a> provides the same functionality and concurrency
--   abstraction in Javascript computations as <a>MVar</a> in Haskell.
module Language.Sunroof.JS.MVar

-- | <a>JSMVar</a> abstraction. The type parameter gives the type of values
--   held in a <a>JSMVar</a>.
data JSMVar a

-- | Create a new <a>JSMVar</a> with the given value inside. See
--   <a>newEmptyMVar</a>.
newMVar :: SunroofArgument a => a -> JS t (JSMVar a)

-- | Create a new empty <a>JSMVar</a>. See <a>newMVar</a>.
newEmptyMVar :: SunroofArgument a => JS t (JSMVar a)

-- | Put the value into the <a>JSMVar</a>. If there already is a value
--   inside, this will block until it is taken out.
putMVar :: SunroofArgument a => a -> JSMVar a -> JS B ()

-- | Take the value out of the <a>JSMVar</a>. If there is no value inside,
--   this will block until one is available.
takeMVar :: (Sunroof a, SunroofArgument a) => JSMVar a -> JS B a
instance SunroofArgument o => EqB (JSMVar o)
instance SunroofArgument o0 => JSTuple (JSMVar o0)
instance SunroofArgument o0 => IfB (JSMVar o0)
instance SunroofArgument o0 => Sunroof (JSMVar o0)
instance SunroofArgument o0 => Show (JSMVar o0)


-- | Sunroof provides a way to express Javascript computations in Haskell.
--   The computations can be expressed using the <a>JS</a> monad.
--   
--   There are ready to use API bindings for frequently used Javascript:
--   
--   <ul>
--   <li><a>Browser</a> - Bindings of the standard browser APIs.</li>
--   <li><a>Canvas</a> - Bindings of the HTML5 canvas element API.</li>
--   <li><a>JQuery</a> - Bindings of some JQuery methods.</li>
--   <li><a>Date</a> - Bindings of the standard data API.</li>
--   </ul>
--   
--   It also provides an abstraction over Javascripts (not existing)
--   threading model. Cooperative multithreading can be emulated using the
--   Sunroof abstractions (<a>forkJS</a>, <a>yield</a>, <a>loop</a>).
--   Equivalents of well-known Haskell concurrency abstractions like
--   <a>MVar</a> or <a>Chan</a> are also provided on Javascript level
--   through <a>JSMVar</a> and <a>JSChan</a>.
--   
--   Due to the threading abstraction there are two kinds of computations.
--   They are indicated by the first type parameter of <a>JS</a> (a
--   <a>T</a> value). Normal Javascript computations that can be assumed to
--   terminate and that may deliver a result value are written in the
--   <a>JSA</a> monad. While possibly blocking computations (those that
--   involve threading operations) are written in the <a>JSB</a> monad.
--   
--   As the computations are expressed in Haskell, they have a functional
--   nature. It is possible to change the attribute values of objects using
--   <a>:=</a> and <a>#</a>:
--   
--   <pre>
--   o # att := val
--   </pre>
--   
--   If a top-level mutable variable is needed, use the <a>JSRef</a>
--   abstraction. It is comparable to <a>IORef</a>.
module Language.Sunroof

-- | The sunroof compiler compiles an effect that returns a
--   Sunroof/JavaScript value into a JavaScript program. An example
--   invocation is
--   
--   <pre>
--   GHCi&gt; import Language.Sunroof
--   GHCi&gt; import Language.Sunroof.JS.Browser
--   GHCi&gt; import Data.Default
--   GHCi&gt; txt &lt;- sunroofCompileJSA def "main" $ do alert(js "Hello");
--   GHCi&gt; putStrLn txt
--   var main = (function() {
--     alert("Hello");
--   })();
--   </pre>
--   
--   (The extra function and application are intentional and are a common
--   JavaScript trick to circumvent scoping issues.)
--   
--   To generate a function, not just an effect, you can use the
--   <tt>function</tt> combinator.
--   
--   <pre>
--   GHCi&gt; txt &lt;- sunroofCompileJSA def "main" $ do
--              function $ \ n -&gt; do
--                  return (n * (n :: JSNumber))
--   GHCi&gt; putStrLn txt
--   var main = (function() {
--     var v1 = function(v0) {
--       return v0*v0;
--     };
--     return v1;
--   })();
--   </pre>
--   
--   Now <tt>main</tt> in JavaScript is bound to the square function.
sunroofCompileJSA :: Sunroof a => CompilerOpts -> String -> JS A a -> IO String

-- | Compiles code using the blocking threading model. Usage is the same as
--   for <a>sunroofCompileJSA</a>.
sunroofCompileJSB :: CompilerOpts -> String -> JS B () -> IO String

-- | Options to setup the compiler.
data CompilerOpts
CompilerOpts :: Bool -> Bool -> Bool -> Int -> Bool -> CompilerOpts

-- | Do we reify to capture Haskell-level lets / CSEs?
co_on :: CompilerOpts -> Bool

-- | Do we also capture non-reified CSE, using Value Numbering?
co_cse :: CompilerOpts -> Bool

-- | Do we constant fold?
co_const :: CompilerOpts -> Bool

-- | How verbose is the compiler when running? standard 0 - 3 scale
co_verbose :: CompilerOpts -> Int

-- | Does the compiler output code without whitespace and layout? default
--   == False
co_compress :: CompilerOpts -> Bool

-- | Central type class of Sunroof. Every type that can be translated into
--   Javascript with Sunroof has to implement this type class.
class Sunroof a where typeOf _ = Base
box :: Sunroof a => Expr -> a
unbox :: Sunroof a => a -> Expr
typeOf :: Sunroof a => Proxy a -> Type

-- | All Haskell values that have a Sunroof representation implement this
--   class.
class SunroofValue a where type family ValueOf a :: *
js :: SunroofValue a => a -> ValueOf a

-- | Everything that can be used as argument to a function is
--   Javascript/Sunroof.
class SunroofArgument args
jsArgs :: SunroofArgument args => args -> [Expr]
jsValue :: (SunroofArgument args, UniqM m) => m args
typesOf :: SunroofArgument args => Proxy args -> [Type]

-- | If something is a <a>JSTuple</a>, it can easily be decomposed and
--   recomposed from different components. This is meant as a convenient
--   access to attributes of an object. TODO: revisit this
class Sunroof o => JSTuple o where type family Internals o
match :: (JSTuple o, Sunroof o) => o -> Internals o
tuple :: JSTuple o => Internals o -> JS t o

-- | Everything that can be used as an key in a dictionary lookup.
class Sunroof key => SunroofKey key
jsKey :: SunroofKey key => key -> JSSelector a

-- | Abstract types for Javascript expressions in Sunroof.
data Type

-- | Base type like object or other primtive types.
Base :: Type

-- | Unit or void type. There is a effect but no value.
Unit :: Type

-- | Function type: <tt>(t_1,..,t_n) -&gt; t</tt>
Fun :: [Type] -> Type -> Type

-- | The possible threading models for Javascript computations.
data T

-- | Atomic - The computation will not be interrupted.
A :: T

-- | Blocking - The computation may block and wait to enable interleaving
--   with other computations.
B :: T

-- | A proxy to capture the type of threading model used. See
--   <a>SunroofThread</a>.
data ThreadProxy (t :: T)
ThreadProxy :: ThreadProxy

-- | When implemented the type supports determining the threading model
--   during runtime.
class SunroofThread (t :: T)
evalStyle :: SunroofThread t => ThreadProxy t -> T
blockableJS :: (SunroofThread t, Sunroof a) => JS t a -> JS B a

-- | The monadic type of Javascript computations.
--   
--   <tt>JS t a</tt> is a computation using the thread model <tt>t</tt>
--   (see <a>T</a>). It returns a result of type <tt>a</tt>.
data JS :: T -> * -> *
JS :: ((a -> Program (JSI t) ()) -> Program (JSI t) ()) -> JS t a
(:=) :: JSSelector a -> a -> o -> JS t ()

-- | Short-hand type for atmoic Javascript computations.
type JSA a = JS A a

-- | Short-hand type for possibly blocking Javascript computations.
type JSB a = JS B a

-- | Type of Javascript functions. The first type argument is the type of
--   function argument. This needs to be a instance of
--   <a>SunroofArgument</a>. The second type argument of <a>JSFunction</a>
--   is the function return type. It needs to be a instance of
--   <a>Sunroof</a>.
data JSFunction args ret

-- | Type of Javascript functions. The first type argument is the type of
--   function argument. This needs to be a instance of
--   <a>SunroofArgument</a>. The second type argument of <a>JSFunction</a>
--   is the function return type. It needs to be a instance of
--   <a>Sunroof</a>.
data JSContinuation args

-- | A <a>JSSelector</a> selects a field or attribute from a Javascript
--   object. The phantom type is the type of the selected value. Note the
--   selected field or attributes may also array entries (<a>index</a>).
data JSSelector a

-- | Abort the current computation at this point.
done :: JS t a

-- | Lift the atomic computation into another computation.
liftJS :: Sunroof a => JS A a -> JS t a

-- | Create an <a>A</a>tomic Javascript function from a Haskell function.
function :: (SunroofArgument a, Sunroof b) => (a -> JS A b) -> JS t (JSFunction a b)

-- | We can compile <a>B</a>lockable functions that return <tt>()</tt>.
--   Note that, with the <a>B</a>-style threads, we return from a call when
--   we first block, not at completion of the call.
continuation :: SunroofArgument a => (a -> JS B ()) -> JS t (JSContinuation a)

-- | <tt>apply f a</tt> applies the function <tt>f</tt> to the given
--   arguments <tt>a</tt>. A typical use case looks like this:
--   
--   <pre>
--   foo `apply` (x,y)
--   </pre>
--   
--   See <a>$$</a> for a convenient infix operator to do this.
apply :: (SunroofArgument args, Sunroof ret) => JSFunction args ret -> args -> JS t ret

-- | <tt>f $$ a</tt> applies the function <tt>f</tt> to the given arguments
--   <tt>a</tt>. See <a>apply</a>.
($$) :: (SunroofArgument args, Sunroof ret) => JSFunction args ret -> args -> JS t ret

-- | <tt>goto</tt> calls the given continuation with the given argument,
--   and never returns.
goto :: SunroofArgument args => JSContinuation args -> args -> JS t a

-- | Cast one Sunroof value into another.
--   
--   This is sometimes needed due to Javascripts flexible type system.
cast :: (Sunroof a, Sunroof b) => a -> b

-- | The <tt>#</tt>-operator is the Haskell analog to the
--   <tt>.</tt>-operator in Javascript. Example:
--   
--   <pre>
--   document # getElementById "bla"
--   </pre>
--   
--   This can be seen as equivalent of
--   <tt>document.getElementById("bla")</tt>.
(#) :: a -> (a -> JS t b) -> JS t b

-- | Creates a selector for attributes of Javascript objects. It is advised
--   to use this together with an associated type signature to avoid
--   ambiguity. Example:
--   
--   <pre>
--   length :: JSSelector JSNumber
--   length = attr "length"
--   </pre>
--   
--   Selectors can be used with <a>!</a>.
attr :: String -> JSSelector a

-- | Create a binding to a Javascript top-level function with the given
--   name. It is advised to create these bindings with an associated type
--   signature to ensure type safty while using this function. Example:
--   
--   <pre>
--   alert :: JSFunction JSString ()
--   alert = fun "alert"
--   </pre>
fun :: (SunroofArgument a, Sunroof r) => String -> JSFunction a r

-- | <tt>invoke s a o</tt> calls the method with name <tt>s</tt> using the
--   arguments <tt>a</tt> on the object <tt>o</tt>. A typical use would
--   look like this:
--   
--   <pre>
--   o # invoke "foo" (x, y)
--   </pre>
--   
--   Another use case is writing Javascript API bindings for common
--   methods:
--   
--   <pre>
--   getElementById :: JSString -&gt; JSObject -&gt; JS t JSObject
--   getElementById s = invoke "getElementById" s
--   </pre>
--   
--   Like this the flexible type signature gets fixed. See <a>#</a> for how
--   to use these bindings.
invoke :: (SunroofArgument a, Sunroof r, Sunroof o) => String -> a -> o -> JS t r

-- | <tt>new n a</tt> calls the new operator on the constructor <tt>n</tt>
--   supplying the argument <tt>a</tt>. A typical use would look like this:
--   
--   <pre>
--   new "Object" ()
--   </pre>
new :: SunroofArgument a => String -> a -> JS t JSObject

-- | Evaluate a <a>Sunroof</a> value. This forces evaluation of the given
--   expression to a value and enables binding it to a variable. Example:
--   
--   <pre>
--   x &lt;- evaluate $ "A" &lt;&gt; "B"
--   alert x
--   alert x
--   </pre>
--   
--   This would result in: <tt>var v0 = "A"+"B"; alert(v0);
--   alert(v0);</tt>. But:
--   
--   <pre>
--   x &lt;- return $ "A" &lt;&gt; "B"
--   alert x
--   alert x
--   </pre>
--   
--   This will result in: <tt>alert("A"+"B"); alert("A"+"B");</tt>.
evaluate :: Sunroof a => a -> JS t a

-- | Synonym for <a>evaluate</a>.
value :: Sunroof a => a -> JS t a

-- | Combinator for <tt>switch</tt>-like statements in Javascript.
--   
--   <i>Note</i>: This will not be translated into actual switch statment,
--   because you are aloud arbitrary expressions in the cases.
switch :: (EqB a, BooleanOf a ~ JSBool, Sunroof a, Sunroof b, SunroofArgument b, SunroofThread t) => a -> [(a, JS t b)] -> JS t b

-- | The <tt>null</tt> reference in Javascript.
nullJS :: JSObject

-- | Create a selector for a named field or attribute. For type safty it is
--   adivsed to use this with an accompanying type signature. Example:
--   
--   <pre>
--   array ! label "length"
--   </pre>
--   
--   See <a>!</a> for further information on usage.
label :: JSString -> JSSelector a

-- | Create a selector for an indexed value (e.g. array access). For type
--   safty it is adivsed to use this with an accompanying type signature.
--   Example:
--   
--   <pre>
--   array ! index 4
--   </pre>
--   
--   See <a>!</a> for further information on usage.
index :: JSNumber -> JSSelector a

-- | Operator to use a selector on a Javascript object. Examples:
--   
--   <pre>
--   array ! label "length"
--   array ! index 4
--   </pre>
(!) :: (Sunroof o, Sunroof a) => o -> JSSelector a -> a

-- | Reify the current contination as a Javascript continuation
callcc :: SunroofArgument a => (JSContinuation a -> JS B a) -> JS B a

-- | Write a JavaScript comment into the generated source.
comment :: String -> JS t ()

-- | <tt>o # delete lab</tt> removes the label <tt>lab</tt> from the object
--   <tt>o</tt>.
delete :: Sunroof a => JSSelector a -> JSObject -> JS t ()

-- | Fork of the given computation in a different thread.
forkJS :: SunroofThread t1 => JS t1 () -> JS t2 ()

-- | Delay the execution of all instructions after this one by the given
--   amount of milliseconds.
threadDelay :: JSNumber -> JSB ()

-- | Give another thread time to execute.
yield :: JSB ()

-- | Data type for all Javascript objects.
data JSObject

-- | The <tt>this</tt> reference.
this :: JSObject

-- | Create an arbitrary object from a literal in form of a string.
object :: String -> JSObject

-- | Booleans in Javascript.
data JSBool

-- | Type of numbers in Javascript.
data JSNumber

-- | A explicit cast to int.
int :: Sunroof a => a -> JSNumber

-- | Javascript string type.
data JSString

-- | Create a Javascript string from a Haskell string.
string :: String -> JSString

-- | Type if arrays in Javascript. The type parameter given the entry type.
data JSArray a

-- | Create a literal array from a Haskell list.
array :: (SunroofValue a, Sunroof (ValueOf a)) => [a] -> JS t (JSArray (ValueOf a))

-- | Create a new array object containing the given values.
newArray :: (SunroofArgument args, Sunroof a) => args -> JS t (JSArray a)

-- | The <tt>length</tt> property of arrays.
length' :: JSSelector JSNumber

-- | A type-safe version of array lookup.
lookup' :: Sunroof a => JSNumber -> JSArray a -> a

-- | A type-safe version of array insert.
insert' :: Sunroof a => JSNumber -> a -> JSArray a -> JS t ()

-- | Removes and return the first element of an array (dequeue). See
--   <a>http://www.w3schools.com/jsref/jsref_shift.asp</a>.
shift :: Sunroof a => JSArray a -> JS t a

-- | Adds a new element to the beginning of the array (queue). Returns
--   nothing instead of the new length. See
--   <a>http://www.w3schools.com/jsref/jsref_unshift.asp</a>.
unshift :: (SunroofArgument a, Sunroof a) => a -> JSArray a -> JS t ()

-- | Pop a element from the array as if it was a stack. See
--   <a>http://www.w3schools.com/jsref/jsref_pop.asp</a>.
pop :: Sunroof a => JSArray a -> JS t a

-- | Push a element into the array as if it was a stack. Returns nothing
--   instead of the new length. See
--   <a>http://www.w3schools.com/jsref/jsref_push.asp</a>.
push :: (SunroofArgument a, Sunroof a) => a -> JSArray a -> JS t ()

-- | Foreach iteration method provided by most browsers. Execute the given
--   action on each element of the array. See
--   <a>https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach</a>,
--   <a>http://msdn.microsoft.com/en-us/library/ie/ff679980.aspx</a>.
forEach :: (Sunroof a, SunroofArgument a) => (a -> JS A ()) -> JSArray a -> JS t ()

-- | The empty array.
empty :: Sunroof a => JS t (JSArray a)

-- | This is the <tt>IORef</tt> of Sunroof.
data JSRef a

-- | Create a new <a>JSRef</a> with the given intial value.
newJSRef :: Sunroof a => a -> JS t (JSRef a)

-- | Non-blocking read of a <a>JSRef</a>.
readJSRef :: Sunroof a => JSRef a -> JS t a

-- | Non-blocking write of a <a>JSRef</a>.
writeJSRef :: Sunroof a => a -> JSRef a -> JS t ()

-- | Non-blocking modification of a <a>JSRef</a>.
modifyJSRef :: Sunroof a => (a -> JS A a) -> JSRef a -> JS t ()

-- | <a>JSChan</a> abstraction. The type parameter gives the type of values
--   held in the channel.
data JSChan a

-- | Create a new empty <a>JSChan</a>.
newChan :: SunroofArgument a => JS t (JSChan a)

-- | Put a value into the channel. This will never block.
writeChan :: (SunroofThread t, SunroofArgument a) => a -> JSChan a -> JS t ()

-- | Take a value out of the channel. If there is no value inside, this
--   will block until one is available.
readChan :: (Sunroof a, SunroofArgument a) => JSChan a -> JS B a

-- | <a>JSMVar</a> abstraction. The type parameter gives the type of values
--   held in a <a>JSMVar</a>.
data JSMVar a

-- | Create a new <a>JSMVar</a> with the given value inside. See
--   <a>newEmptyMVar</a>.
newMVar :: SunroofArgument a => a -> JS t (JSMVar a)

-- | Create a new empty <a>JSMVar</a>. See <a>newMVar</a>.
newEmptyMVar :: SunroofArgument a => JS t (JSMVar a)

-- | Take the value out of the <a>JSMVar</a>. If there is no value inside,
--   this will block until one is available.
takeMVar :: (Sunroof a, SunroofArgument a) => JSMVar a -> JS B a

-- | Put the value into the <a>JSMVar</a>. If there already is a value
--   inside, this will block until it is taken out.
putMVar :: SunroofArgument a => a -> JSMVar a -> JS B ()

-- | <tt>loop x f</tt> executes the function <tt>f</tt> repeatedly. After
--   each iteration the result value of the function is feed back as input
--   of the next iteration. The initial value supplied for the first
--   iteration is <tt>x</tt>. This loop will never terminate.
loop :: Sunroof a => a -> (a -> JSB a) -> JSB ()

-- | <tt>jsfix</tt> is the <tt>mfix</tt> for the JS Monad.
fixJS :: SunroofArgument a => (a -> JSA a) -> JS t a
