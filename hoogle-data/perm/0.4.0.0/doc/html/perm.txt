-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | permutation Applicative and Monad with many mtl instances
--   
--   Based on "Parsing Permutation Phrases", by Arthur Baars, Andres Loeh
--   and S. Doaitse Swierstra, <i>Haskell Workshop 2001</i>. The
--   implementation given here does not include explicit optional actions,
--   and instead implements <a>Alternative</a> and <a>MonadPlus</a>. <tt>m
--   <a>&lt;*&gt;</a> (<a>lift</a> n <a>&lt;|&gt;</a> <a>pure</a> a)</tt>
--   should be used where <tt><a>addOpt</a> m a n</tt> would be used.
@package perm
@version 0.4.0.0


module Control.Monad.Perm

-- | The permutation applicative
data Perm m a

-- | Unwrap a <a>Perm</a>, combining actions using the <a>MonadPlus</a> for
--   <tt>f</tt>.
runPerm :: MonadPlus m => Perm m a -> m a

-- | A version of <a>lift</a> that can be used without a <a>Monad</a> for
--   <tt>m</tt>.
liftPerm :: m a -> Perm m a
liftPlus :: (forall a. m a -> m a -> m a) -> Perm m b -> Perm m b -> Perm m b

-- | Lift a monad homomorphism from <tt>m</tt> to <tt>n</tt> into a monad
--   homomorphism from <tt><a>Perm</a> m</tt> to <tt><a>Perm</a> n</tt>.
hoistPerm :: MonadFix n => (forall a. m a -> n a) -> Perm m b -> Perm n b


module Control.Applicative.Perm

-- | The permutation applicative
data Perm m a

-- | Unwrap a <a>Perm</a>, combining actions using the <a>Alternative</a>
--   for <tt>f</tt>.
runPerm :: Alternative m => Perm m a -> m a

-- | A version of <a>lift</a> that can be used without a <a>Monad</a> for
--   <tt>m</tt>.
liftPerm :: m a -> Perm m a
liftPlus :: (forall a. m a -> m a -> m a) -> Perm m b -> Perm m b -> Perm m b

-- | Lift a monad homomorphism from <tt>m</tt> to <tt>n</tt> into a monad
--   homomorphism from <tt><a>Perm</a> m</tt> to <tt><a>Perm</a> n</tt>.
hoistPerm :: MonadFix n => (forall a. m a -> n a) -> Perm m b -> Perm n b
