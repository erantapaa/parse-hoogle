-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Template Haskell framework for automatic FFI code generation.
--   
--   Combinatorial library for generating foreign bindings using TH.
@package hacanon-light
@version 2008.10.28

module Foreign.HacanonLight.DIS.Types
type Func = ExpQ -> ExpQ
data DISOperation
DISIn :: DISOperation
DISOut :: DISOperation
DISInOut :: DISOperation
DISIgnore :: DISOperation
data DIS
MkDIS :: DISOperation -> TypeQ -> TypeQ -> Func -> Func -> Func -> Func -> DIS
disOperation :: DIS -> DISOperation
disType :: DIS -> TypeQ
disFFIType :: DIS -> TypeQ
disMarshal :: DIS -> Func
disMarshalP :: DIS -> Func
disUnMarshal :: DIS -> Func
disFree :: DIS -> Func
instance Eq DISOperation
instance Show DISOperation
instance Ord DISOperation

module Foreign.HacanonLight.Common.THUtils
createArrowType :: [TypeQ] -> TypeQ
createTupleType :: [TypeQ] -> TypeQ
createSimpleType :: TypeQ -> [TypeQ] -> TypeQ
createSimpleExpr :: ExpQ -> [ExpQ] -> ExpQ
puts :: [String] -> ExpQ
modifyField :: [String] -> ExpQ
insertInField :: [String] -> ExpQ

module Foreign.HacanonLight.DIS.StdDIS
emptyDIS :: DIS
tuple :: [DIS] -> DIS
anonPtr :: DIS
cstring :: DIS
cast :: TypeQ -> DIS
int :: DIS
float :: DIS
unit :: DIS
enum :: String -> DIS
enum' :: String -> String -> TypeQ -> String -> DIS
bool :: DIS
string :: DIS
mkIn :: DIS -> DIS
mkInOut :: DIS -> DIS
mkOut :: DIS -> DIS
char :: DIS
double :: DIS
persistent :: DIS -> DIS
hsStruct :: [DIS] -> String -> DIS
maybe :: ExpQ -> DIS -> DIS
dynamic :: DIS -> DIS
maybeInt :: DIS -> DIS
maybePtr :: DIS -> DIS
cPointer :: DIS -> DIS
hsPointer :: DIS -> DIS
foreignPtr :: String -> String -> String -> DIS
word32 :: DIS
word16 :: DIS
word8 :: DIS
int32 :: DIS
int16 :: DIS
int8 :: DIS

module Foreign.HacanonLight.Common.Types
data FFIDecl
FFIDecl :: Name -> String -> [DIS] -> Callconv -> Safety -> Bool -> FFIDecl

-- | Unique name of the FFI binding.
ffiUnique :: FFIDecl -> Name

-- | Name of the C function.
ffiName :: FFIDecl -> String

-- | Interface scheme and hints.
ffiType :: FFIDecl -> [DIS]

-- | Calling convention. Specified in the state or with hints.c
ffiCallConv :: FFIDecl -> Callconv
ffiSafety :: FFIDecl -> Safety
ffiPure :: FFIDecl -> Bool
data HsDecl
HsDecl :: Name -> Name -> TypeQ -> ExpQ -> Bool -> HsDecl

-- | Name of the generated Haskel function.
hsName :: HsDecl -> Name

-- | Name of the raw ffi binding.
hsFFIName :: HsDecl -> Name

-- | Type of the generated function.
hsType :: HsDecl -> TypeQ

-- | Body of the generated function.
hsBody :: HsDecl -> ExpQ

-- | Is the function pure? (using unsafePerformIO if it is)
hsPure :: HsDecl -> Bool

module Foreign.HacanonLight.DIS
isOfOperation :: [DISOperation] -> DIS -> Bool
isInDIS :: DIS -> Bool
isOutDIS :: DIS -> Bool

module Foreign.HacanonLight.Common

module Foreign.HacanonLight.FFIToHs
processFFIDecl :: String -> FFIDecl -> HsDecl
applyArgs :: ExpQ -> [ExpQ] -> ExpQ
bindArgs :: [DIS] -> ([(DIS, Name)] -> ExpQ) -> ExpQ
marshalArgs :: ([(DIS, Name)] -> ExpQ) -> [(DIS, Name)] -> ExpQ
callFunc :: ([(DIS, Name)] -> ExpQ) -> Name -> DIS -> [(DIS, Name)] -> ExpQ
unmarshalArgs :: [(DIS, Name)] -> ExpQ
createHsBody :: Name -> [DIS] -> DIS -> ExpQ

module Foreign.HacanonLight.Generate
bindWithOptions :: String -> String -> [DIS] -> Bool -> Safety -> Callconv -> Q [Dec]
bind :: String -> String -> [DIS] -> Q [Dec]
safeBind :: String -> String -> [DIS] -> Q [Dec]
simpleBind :: String -> [DIS] -> Q [Dec]
simpleSafeBind :: String -> [DIS] -> Q [Dec]
