-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Data types representing the Nix language
--   
--   This library provides a collection of data types that represent the
--   Nix language <a>http://nixos.org/</a>.
@package nixos-types
@version 1.3


-- | Known licenses in Nix expressions are represented using the attributes
--   defined in <tt>pkgs/lib/licenses.nix</tt>, and unknown licenses are
--   represented as a literal string.
module Distribution.NixOS.Derivation.License

-- | The representation for licenses used in Nix derivations. Known
--   licenses are Nix expressions -- such as
--   <tt>stdenv.lib.licenses.bsd3</tt> --, so their exact "name" is not
--   generally known, because the path to <tt>stdenv</tt> depends on the
--   context defined in the expression. In Cabal expressions, for example,
--   the BSD3 license would have to be referred to as
--   <tt>self.stdenv.lib.licenses.bsd3</tt>. Other expressions, however,
--   use different paths to the <tt>licenses</tt> record.. Because of this
--   station, this library cannot provide an abstract data type that
--   encompasses all known licenses. Instead, the <tt>License</tt> type
--   just distinguishes references to known and unknown licenses. The
--   difference between the two is in the way they are pretty-printed:
--   
--   <pre>
--   &gt; putStrLn (display (Known "stdenv.lib.license.gpl2"))
--   stdenv.lib.license.gpl2
--   
--   &gt; putStrLn (display (Unknown (Just "GPL")))
--   "GPL"
--   
--   &gt; putStrLn (display (Unknown Nothing))
--   "unknown"
--   </pre>
--   
--   Note that the <a>Text</a> instance definition provides
--   pretty-printing, but no parsing as of now!
data License
Known :: String -> License
Unknown :: (Maybe String) -> License
instance Show License
instance Eq License
instance Ord License
instance Text License


-- | A representation of the <tt>meta</tt> section used in Nix expressions.
--   A detailed description can be found in section 4, "Meta-attributes",
--   of the Nixpkgs manual at <a>http://nixos.org/nixpkgs/docs.html</a>.
module Distribution.NixOS.Derivation.Meta

-- | A representation of the <tt>meta</tt> section used in Nix expressions.
--   
--   <pre>
--   &gt; putStrLn (display (Meta "http://example.org" "an example package" (Unknown Nothing)
--   &gt;                   ["stdenv.lib.platforms."++x | x&lt;-["unix","cygwin"]]
--   &gt;                   ["stdenv.lib.maintainers."++x | x&lt;-["joe","jane"]]))
--   meta = {
--     homepage = "http://example.org";
--     description = "an example package";
--     license = "unknown";
--     platforms =
--       stdenv.lib.platforms.unix ++ stdenv.lib.platforms.cygwin;
--     maintainers = [ stdenv.lib.maintainers.joe stdenv.lib.maintainers.jane ];
--   };
--   </pre>
--   
--   Note that the <a>Text</a> instance definition provides
--   pretty-printing, but no parsing as of now!
data Meta
Meta :: String -> String -> License -> [String] -> [String] -> Meta

-- | URL of the package homepage
homepage :: Meta -> String

-- | short description of the package
description :: Meta -> String

-- | licensing terms
license :: Meta -> License

-- | list of supported platforms from <tt>pkgs/lib/platforms.nix</tt>
platforms :: Meta -> [String]

-- | list of maintainers from <tt>pkgs/lib/maintainers.nix</tt>
maintainers :: Meta -> [String]
instance Show Meta
instance Eq Meta
instance Ord Meta
instance Text Meta


-- | A represtation of Nix expressions based on Cabal builder defined in
--   <tt>pkgs/development/libraries/haskell/cabal/cabal.nix</tt>.
module Distribution.NixOS.Derivation.Cabal

-- | A represtation of Nix expressions for building Haskell packages. The
--   data type correspond closely to the definition of
--   <tt>PackageDescription</tt> from Cabal.
--   
--   Note that the <a>Text</a> instance definition provides
--   pretty-printing, but no parsing as of now!
data Derivation
MkDerivation :: String -> Version -> String -> Bool -> Bool -> [String] -> [String] -> [String] -> [String] -> [String] -> FlagAssignment -> Bool -> Meta -> Derivation
pname :: Derivation -> String
version :: Derivation -> Version
sha256 :: Derivation -> String
isLibrary :: Derivation -> Bool
isExecutable :: Derivation -> Bool
buildDepends :: Derivation -> [String]
buildTools :: Derivation -> [String]
extraLibs :: Derivation -> [String]
pkgConfDeps :: Derivation -> [String]
configureFlags :: Derivation -> [String]
cabalFlags :: Derivation -> FlagAssignment
runHaddock :: Derivation -> Bool
metaSection :: Derivation -> Meta

-- | A very incomplete parser that extracts <a>pname</a>, <a>version</a>,
--   <a>sha256</a>, <a>platforms</a>, <a>maintainers</a>, and
--   <a>runHaddock</a> from the given Nix expression.
parseDerivation :: String -> Maybe Derivation
instance Show Derivation
instance Eq Derivation
instance Ord Derivation
instance Package Derivation
instance Text Derivation
