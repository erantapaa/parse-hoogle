-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to xine-lib
--   
--   A Haskell FFI binding to xine-lib, a multimedia playback engine.
--   
--   See <a>http://xine-project.org</a> for more information.
@package xine
@version 0.0.0.4


-- | A simple binding to xine-lib. Low-level bindings. Made for xine-lib
--   version 1.1.18.1
module Xine.Foreign

-- | Get xine-lib version string.
--   
--   Header declaration:
--   
--   const char *xine_get_version_string (void)
xine_get_version_string :: String

-- | Get version as a triple: major, minor, sub
--   
--   Header declaration:
--   
--   void xine_get_version (int *major, int *minor, int *sub)
xine_get_version :: (Int, Int, Int)

-- | Compare given version to xine-lib version (major, minor, sub).
--   
--   Header declaration:
--   
--   int xine_check_version (int major, int minor, int sub)
--   
--   returns 1 if compatible, 0 otherwise.
xine_check_version :: Int -> Int -> Int -> Bool

-- | An opaque type, never dereferenced on the Haskell side XXX: document
--   me
data Engine

-- | An opaque type, never dereferenced on the Haskell side XXX: document
--   me
data AudioPort

-- | An opaque type, never dereferenced on the Haskell side XXX: document
--   me
data VideoPort

-- | Valid visual types
data VisualType
None :: VisualType
X11 :: VisualType
X11_2 :: VisualType
AA :: VisualType
FB :: VisualType
GTK :: VisualType
DFB :: VisualType
PM :: VisualType
DirectX :: VisualType
CACA :: VisualType
MacOSX :: VisualType
XCB :: VisualType
Raw :: VisualType

-- | Pre-init the xine engine.
--   
--   Header declaration:
--   
--   xine_t *xine_new (void)
xine_new :: IO (Engine)

-- | Post-init the xine engine.
--   
--   Header declaration:
--   
--   void xine_init (xine_t *self)
xine_init :: Engine -> IO ()

-- | Initialise audio driver.
--   
--   Header declaration:
--   
--   xine_audio_port_t *xine_open_audio_driver (xine_t *self, const char
--   *id, void *data)
--   
--   id: identifier of the driver, may be NULL for auto-detection
--   
--   data: special data struct for ui/driver communication
--   
--   May return NULL if the driver failed to load.
xine_open_audio_driver :: Engine -> (Maybe String) -> IO ((Maybe AudioPort))

-- | Initialise video driver.
--   
--   Header declaration:
--   
--   xine_video_port_t *xine_open_video_driver (xine_t *self, const char
--   *id, int visual, void *data)
--   
--   id: identifier of the driver, may be NULL for auto-detection
--   
--   data: special data struct for ui/driver communication
--   
--   visual : video driver flavor selector
--   
--   May return NULL if the driver failed to load.
xine_open_video_driver :: Engine -> (Maybe String) -> VisualType -> IO ((Maybe VideoPort))

-- | Close audio port.
--   
--   Header declaration:
--   
--   void xine_close_audio_driver (xine_t *self, xine_audio_port_t *driver)
xine_close_audio_driver :: Engine -> AudioPort -> IO ()

-- | Close video port.
--   
--   Header declaration:
--   
--   void xine_close_video_driver (xine_t *self, xine_video_port_t *driver)
xine_close_video_driver :: Engine -> VideoPort -> IO ()

-- | Free all resources, close all plugins, close engine.
--   
--   Header declaration:
--   
--   void xine_exit (xine_t *self)
xine_exit :: Engine -> IO ()

-- | An opaque type, never dereferenced on the Haskell side
data Stream

-- | Stream parameter enumeration.
data StreamParam
Speed :: StreamParam
AvOffset :: StreamParam
AudioChannelLogical :: StreamParam
SpuChannel :: StreamParam
AudioVolume :: StreamParam
AudioMute :: StreamParam
AudioComprLevel :: StreamParam
AudioReportLevel :: StreamParam
Verbosity :: StreamParam
SpuOffset :: StreamParam
IgnoreVideo :: StreamParam
IgnoreAudio :: StreamParam
BroadcasterPort :: StreamParam
MetronomPrebuffer :: StreamParam
Eq30Hz :: StreamParam
Eq60Hz :: StreamParam
Eq125Hz :: StreamParam
Eq500Hz :: StreamParam
Eq1000Hz :: StreamParam
Eq2000Hz :: StreamParam
Eq4000Hz :: StreamParam
Eq8000Hz :: StreamParam
Eq16000Hz :: StreamParam
AudioCloseDevice :: StreamParam
AmpMute :: StreamParam
FineSpeed :: StreamParam
EarlyFinishedEvent :: StreamParam
GaplessSwitch :: StreamParam
DelayFinishedEvent :: StreamParam
Deinterlace :: StreamParam
AspectRatio :: StreamParam
Hue :: StreamParam
Saturation :: StreamParam
Contrast :: StreamParam
Brightness :: StreamParam
ZoomX :: StreamParam
ZoomY :: StreamParam
PanScan :: StreamParam
TvMode :: StreamParam
WindowWidth :: StreamParam
WindowHeight :: StreamParam
CropLeft :: StreamParam
CropRight :: StreamParam
CropTop :: StreamParam
CropBottom :: StreamParam

-- | Values for XINE_PARAM_SPEED parameter.
data Speed
Pause :: Speed
Slow4 :: Speed
Slow2 :: Speed
Normal :: Speed
Fast2 :: Speed
Fast4 :: Speed

-- | Value for XINE_PARAM_FINE_SPEED
data NormalSpeed
NormalSpeed :: NormalSpeed

-- | Values for XINE_PARAM_VO_ZOOM_
data Zoom
ZoomStep :: Zoom
ZoomMax :: Zoom
ZoomMin :: Zoom

-- | Values for XINE_PARAM_VO_ASPECT_RATIO
data AspectRatio
AspectAuto :: AspectRatio
AspectSquare :: AspectRatio
Aspect43 :: AspectRatio
AspectAnamorphic :: AspectRatio
AspectDvb :: AspectRatio
AspectNumRatios :: AspectRatio

-- | Stream format detection strategies
data DemuxStrategy
DemuxDefault :: DemuxStrategy
DemuxRevert :: DemuxStrategy
DemuxContent :: DemuxStrategy
DemuxExtension :: DemuxStrategy

-- | Verbosity setting
data Verbosity
VerbosityNone :: Verbosity
VerbosityLog :: Verbosity
VerbosityDebug :: Verbosity

-- | Media Resource Locator. Describes the media to read from. Valid MRLs
--   may be plain file names or one of the following:
--   
--   <ul>
--   <li>Filesystem:</li>
--   </ul>
--   
--   file:&lt;path&gt;
--   
--   fifo:&lt;path&gt;
--   
--   stdin:/
--   
--   <ul>
--   <li>CD and DVD:</li>
--   </ul>
--   
--   dvd:/[device_name][/title[.part]]
--   
--   dvd:/DVD_image_file[/title[.part]]
--   
--   dvd:/DVD_directory[/title[.part]]
--   
--   vcd://[CD_image_or_device_name][@[letter]number]
--   
--   vcdo://track_number
--   
--   cdda:/[device][/track_number]
--   
--   <ul>
--   <li>Video devices:</li>
--   </ul>
--   
--   v4l://[tuner_device/frequency
--   
--   v4l2://tuner_device
--   
--   dvb://channel_number
--   
--   dvb://channel_name
--   
--   dvbc://channel_name:tuning_parameters
--   
--   dvbs://channel_name:tuning_parameters
--   
--   dvbt://channel_name:tuning_parameters
--   
--   dvba://channel_name:tuning_parameters
--   
--   pvr:/tmp_files_path!saved_files_path!max_page_age
--   
--   <ul>
--   <li>Network:</li>
--   </ul>
--   
--   http://host
--   
--   tcp://host[:port]
--   
--   udp://host[:port[?iface=interface]]
--   
--   rtp://host[:port[?iface=interface]]
--   
--   smb://
--   
--   mms://host
--   
--   pnm://host
--   
--   rtsp://host
type MRL = String

-- | Engine parameter enumeration.
data EngineParam
EngineVerbosity :: EngineParam

-- | The affection determines which actions on the master stream are also
--   to be applied to the slave stream. See
--   <a>xine_stream_master_slave</a>.
data Affection
AffectionPlay :: Affection
AffectionStop :: Affection
AffectionSpeed :: Affection
data TrickMode
TrickOff :: TrickMode
TrickSeekToPosition :: TrickMode
TrickSeekToTime :: TrickMode
TrickFastForward :: TrickMode
TrickRewind :: TrickMode

-- | Create a new stream for media playback.
--   
--   Header declaration:
--   
--   xine_stream_t *xine_stream_new (xine_t *self, xine_audio_port *ao,
--   xine_video_port_t *vo)
--   
--   Returns xine_stream_t* if OK, NULL on error (use <a>xine_get_error</a>
--   for details).
xine_stream_new :: Engine -> AudioPort -> VideoPort -> IO ((Maybe Stream))

-- | Make one stream the slave of another. Certain operations on the master
--   stream are also applied to the slave stream.
--   
--   Header declaration:
--   
--   int xine_stream_master_slave (xine_stream_t *master, xine_stream_t
--   *slave, int affection)
--   
--   returns 1 on success, 0 on failure.
xine_stream_master_slave :: Stream -> Stream -> [Affection] -> IO (Int)

-- | Open a stream.
--   
--   Header declaration:
--   
--   int xine_open (xine_stream_t *stream, const char *mrl)
--   
--   Returns 1 if OK, 0 on error (use <a>xine_get_error</a> for details).
xine_open :: Stream -> MRL -> IO (Int)

-- | Play a stream from a given position.
--   
--   Header declaration:
--   
--   int xine_play (xine_stream_t *stream, int start_pos, int start_time)
--   
--   Returns 1 if OK, 0 on error (use <a>xine_get_error</a> for details).
xine_play :: Stream -> Int -> Int -> IO (Int)

-- | Stop playback, dispose all stream-related resources. The stream is no
--   longer valid after this.
--   
--   Header declaration:
--   
--   void xine_dispose (xine_stream_t *stream)
xine_dispose :: Stream -> IO ()

-- | Ask current input plugin to eject media.
--   
--   Header declaration:
--   
--   int xine_eject (xine_stream_t *stream)
xine_eject :: Stream -> IO (Int)

-- | Set xine to a trick mode for fast forward, backwards playback, low
--   latency seeking.
--   
--   Header declaration:
--   
--   int xine_trick_mode (xine_stream_t *stream, int mode, int value)
--   
--   Returns 1 if OK, 0 on error (use <a>xine_get_error</a> for details).
xine_trick_mode :: Stream -> TrickMode -> Int -> IO (Int)

-- | Stop stream playback. The stream stays valid for new <a>xine_open</a>
--   or <a>xine_play</a>.
--   
--   Header declaration:
--   
--   void xine_stop (xine_stream *stream)
xine_stop :: Stream -> IO ()

-- | Free all stream-related resources. The stream stays valid for new
--   <a>xine_open</a>.
--   
--   Header declaration:
--   
--   void xine_close (xine_stream_t *stream)
xine_close :: Stream -> IO ()

-- | Set engine parameter.
--   
--   Header declaration:
--   
--   void xine_engine_set_param (xine_t *self, int param, int value)
xine_engine_set_param :: Engine -> EngineParam -> Int -> IO ()

-- | Get engine parameter.
--   
--   Header declaration:
--   
--   int xine_engine_get_param(xine_t *self, int param)
xine_engine_get_param :: Engine -> EngineParam -> IO (Int)

-- | Set stream parameter.
--   
--   Header declaration:
--   
--   void xine_set_param (xine_stream_t *stream, int param, int value)
xine_set_param :: Enum a => Stream -> StreamParam -> a -> IO ()

-- | Get stream parameter.
--   
--   Header declaration:
--   
--   int xine_get_param (xine_stream_t *stream, int param)
xine_get_param :: Enum a => Stream -> StreamParam -> IO (a)

-- | Engine status codes.
data EngineStatus
Idle :: EngineStatus
Stopped :: EngineStatus
Playing :: EngineStatus
Quitting :: EngineStatus

-- | xine error codes.
data XineError
NoError :: XineError
NoInputPlugin :: XineError
NoDemuxPlugin :: XineError
MalformedMrl :: XineError
InputFailed :: XineError

-- | Return last error.
--   
--   Header declaration:
--   
--   int xine_get_error (xine_stream_t *stream)
xine_get_error :: Stream -> IO (XineError)

-- | Get current xine engine status.
--   
--   int xine_get_status (xine_stream_t *stream)
xine_get_status :: Stream -> IO (EngineStatus)

-- | Find the audio language of the given channel (use -1 for current
--   channel).
--   
--   Header declaration:
--   
--   int xine_get_audio_lang (xine_stream_t *stream, int channel, char
--   *lang)
--   
--   lang must point to a buffer of at least XINE_LANG_MAX bytes.
--   
--   Returns 1 on success, 0 on failure.
xine_get_audio_lang :: Stream -> Int -> IO (Int, String)

-- | Find the spu language of the given channel (use -1 for current
--   channel).
--   
--   Header declaration:
--   
--   int xine_get_spu_lang (xine_stream_t *stream, int channel, char *lang)
--   
--   lang must point to a buffer of at least XINE_LANG_MAX bytes.
--   
--   Returns 1 on success, 0 on failure.
xine_get_spu_lang :: Stream -> Int -> IO (Int, String)

-- | Get position/length information.
--   
--   Header declaration:
--   
--   int xine_get_pos_length (xine_stream_t *stream, int *pos_stream, int
--   *pos_time, int *length_time)
--   
--   Returns 1 on success, 0 on failure.
xine_get_pos_length :: Stream -> IO (Int, Int, Int, Int)

-- | The different kinds of stream information
data InfoType
InfoBitrate :: InfoType
InfoSeekable :: InfoType
InfoVideoWidth :: InfoType
InfoVideoHeight :: InfoType
InfoVideoRatio :: InfoType
InfoVideoChannels :: InfoType
InfoVideoStreams :: InfoType
InfoVideoBitrate :: InfoType
InfoVideoFourCC :: InfoType
InfoVideoHandled :: InfoType
InfoFrameDuration :: InfoType
InfoAudioChannels :: InfoType
InfoAudioBits :: InfoType
InfoAudioSamplerate :: InfoType
InfoAudioBitrate :: InfoType
InfoAudioFourCC :: InfoType
InfoAudioHandled :: InfoType
InfoHasChapters :: InfoType
InfoHasVideo :: InfoType
InfoHasAudio :: InfoType
InfoIgnoreVideo :: InfoType
InfoIgnoreAudio :: InfoType
InfoIgnoreSpu :: InfoType
InfoVideoHasStill :: InfoType
InfoMaxAudioChannel :: InfoType
InfoMaxSpuChannel :: InfoType
InfoAudioMode :: InfoType
InfoSkippedFrames :: InfoType
InfoDiscardedFrames :: InfoType
InfoVideoAFD :: InfoType
InfoDvdTitleNumber :: InfoType
InfoDvdTitleCount :: InfoType
InfoDvdChapterNumber :: InfoType
InfoDvdChapterCount :: InfoType
InfoDvdAngleNumber :: InfoType
InfoDvdAngleCount :: InfoType

-- | The different kinds of metadata
data MetaType
MetaTitle :: MetaType
MetaComment :: MetaType
MetaArtist :: MetaType
MetaGenre :: MetaType
MetaAlbum :: MetaType
MetaYear :: MetaType
MetaVideoCodec :: MetaType
MetaAudioCodec :: MetaType
MetaSystemLayer :: MetaType
MetaInputPlugin :: MetaType
MetaDiscId :: MetaType
MetaTrackNumber :: MetaType
MetaComposer :: MetaType
MetaPublisher :: MetaType
MetaLicense :: MetaType
MetaArranger :: MetaType
MetaLyricist :: MetaType
MetaConductor :: MetaType
MetaPerformer :: MetaType
MetaEnsemble :: MetaType
MetaOpus :: MetaType
MetaPart :: MetaType
MetaPartNumber :: MetaType
MetaLocation :: MetaType

-- | Get information about the stream.
--   
--   Header declaration:
--   
--   int32_t xine_get_stream_info (xine_stream_t *stream, int info)
xine_get_stream_info :: Stream -> InfoType -> IO (Int)

-- | Get meta information about the stream.
--   
--   Header declaration:
--   
--   const char *xine_get_meta_info (xine_stream_t *stream, int info)
xine_get_meta_info :: Stream -> MetaType -> IO (String)
instance Show XineError
instance Eq XineError
instance Show EngineStatus
instance Eq EngineStatus
instance Eq Speed
instance Eq VisualType
instance Enum MetaType
instance Enum AFDValue
instance Enum InfoType
instance Enum Wrapping
instance Enum XineError
instance Enum EngineStatus
instance Enum TrickMode
instance Enum Affection
instance Enum Verbosity
instance Enum DemuxStrategy
instance Enum AspectRatio
instance Enum Zoom
instance Enum NormalSpeed
instance Enum Speed
instance Enum StreamParam
instance Enum EngineParam
instance Enum VisualType


-- | A simple binding to xine-lib.
--   
--   Example usage:
--   
--   <pre>
--   import qualified Xine
--   </pre>
--   
--   <pre>
--   main = do
--   </pre>
--   
--   <pre>
--   h &lt;- Xine.open
--   </pre>
--   
--   <pre>
--   sid &lt;- Xine.openStream h "track.mp3"
--   </pre>
--   
--   <pre>
--   Xine.play h sid
--   </pre>
module Xine

-- | Xine configuration.
data XineConf
XineConf :: !Maybe String -> !Maybe String -> !VisualType -> XineConf

-- | Audio driver. Use <a>Nothing</a> for auto-detection.
audioDriver :: XineConf -> !Maybe String

-- | Video driver. Use <a>Nothing</a> for auto-detection.
videoDriver :: XineConf -> !Maybe String

-- | Video output type. Use <a>None</a> to disable video output.
visualType :: XineConf -> !VisualType

-- | Valid visual types
data VisualType
None :: VisualType
X11 :: VisualType
X11_2 :: VisualType
AA :: VisualType
FB :: VisualType
GTK :: VisualType
DFB :: VisualType
PM :: VisualType
DirectX :: VisualType
CACA :: VisualType
MacOSX :: VisualType
XCB :: VisualType
Raw :: VisualType

-- | Default configuration. Audio only.
defaultConf :: XineConf

-- | A xine-lib handle.
data XineHandle

-- | Open a new Xine handle using <a>defaultConf</a>.
open :: IO XineHandle

-- | Open a new Xine handle using the supplied <a>XineConf</a>.
openWith :: XineConf -> IO XineHandle

-- | Close Xine handle. The handle is invalid after this.
close :: XineHandle -> IO ()

-- | Test whether the handle is closed.
isClosed :: XineHandle -> IO Bool

-- | Media Resource Locator. Describes the media to read from. Valid MRLs
--   may be plain file names or one of the following:
--   
--   <ul>
--   <li>Filesystem:</li>
--   </ul>
--   
--   file:&lt;path&gt;
--   
--   fifo:&lt;path&gt;
--   
--   stdin:/
--   
--   <ul>
--   <li>CD and DVD:</li>
--   </ul>
--   
--   dvd:/[device_name][/title[.part]]
--   
--   dvd:/DVD_image_file[/title[.part]]
--   
--   dvd:/DVD_directory[/title[.part]]
--   
--   vcd://[CD_image_or_device_name][@[letter]number]
--   
--   vcdo://track_number
--   
--   cdda:/[device][/track_number]
--   
--   <ul>
--   <li>Video devices:</li>
--   </ul>
--   
--   v4l://[tuner_device/frequency
--   
--   v4l2://tuner_device
--   
--   dvb://channel_number
--   
--   dvb://channel_name
--   
--   dvbc://channel_name:tuning_parameters
--   
--   dvbs://channel_name:tuning_parameters
--   
--   dvbt://channel_name:tuning_parameters
--   
--   dvba://channel_name:tuning_parameters
--   
--   pvr:/tmp_files_path!saved_files_path!max_page_age
--   
--   <ul>
--   <li>Network:</li>
--   </ul>
--   
--   http://host
--   
--   tcp://host[:port]
--   
--   udp://host[:port[?iface=interface]]
--   
--   rtp://host[:port[?iface=interface]]
--   
--   smb://
--   
--   mms://host
--   
--   pnm://host
--   
--   rtsp://host
type MRL = String

-- | Identifies an open stream.
type StreamId = Int

-- | Open a new stream for the given MRL.
openStream :: XineHandle -> MRL -> IO StreamId

-- | Close the specified stream.
closeStream :: XineHandle -> StreamId -> IO ()

-- | Get the current stream, if any.
getCurrent :: XineHandle -> IO (Maybe StreamId)

-- | Argument for <a>seek</a>.
data SeekArg
SeekTime :: Int -> SeekArg
SeekPos :: Int -> SeekArg

-- | Start playback.
play :: XineHandle -> StreamId -> IO ()

-- | Seek to a position or time in the stream.
--   
--   Warning: this will crash if <a>xine_trick_mode</a> is not implemented.
seek :: XineHandle -> StreamId -> SeekArg -> IO ()

-- | Stop playback.
stop :: XineHandle -> StreamId -> IO ()

-- | Toggle pause.
pause :: XineHandle -> StreamId -> IO ()

-- | Engine status codes.
data EngineStatus
Idle :: EngineStatus
Stopped :: EngineStatus
Playing :: EngineStatus
Quitting :: EngineStatus

-- | The different kinds of metadata
data MetaType
MetaTitle :: MetaType
MetaComment :: MetaType
MetaArtist :: MetaType
MetaGenre :: MetaType
MetaAlbum :: MetaType
MetaYear :: MetaType
MetaVideoCodec :: MetaType
MetaAudioCodec :: MetaType
MetaSystemLayer :: MetaType
MetaInputPlugin :: MetaType
MetaDiscId :: MetaType
MetaTrackNumber :: MetaType
MetaComposer :: MetaType
MetaPublisher :: MetaType
MetaLicense :: MetaType
MetaArranger :: MetaType
MetaLyricist :: MetaType
MetaConductor :: MetaType
MetaPerformer :: MetaType
MetaEnsemble :: MetaType
MetaOpus :: MetaType
MetaPart :: MetaType
MetaPartNumber :: MetaType
MetaLocation :: MetaType

-- | Get current engine status.
getStatus :: XineHandle -> IO EngineStatus

-- | Get meta data about the given stream.
getMetadata :: XineHandle -> StreamId -> MetaType -> IO String
instance Eq SeekArg
instance Show SeekArg
