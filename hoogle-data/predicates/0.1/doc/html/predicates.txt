-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A couple of convenience functions for forming predicates.
--   
--   A couple of convenience functions for forming predicates (currently
--   <a>is</a>, <a>isn't</a>, and <a>equals</a>). Also my first library as
--   a test ;)
@package predicates
@version 0.1


-- | Provides a couple of convenience functions to be used for forming
--   predicates.
module Data.Function.Predicate

-- | An example will explain this more than anything:
--   
--   <pre>
--   listsLongerThan3Elements :: [[a]] -&gt; [[a]]
--   listsLongerThan3Elements = filter (length `is` (&gt;3))
--   </pre>
is :: (a -> b) -> (b -> Bool) -> (a -> Bool)

-- | The inverse of <a>is</a>.
--   
--   <pre>
--   listsShorterThanFourElements = filter (length `isn't` (&gt;3))
--   </pre>
isn't :: (a -> b) -> (b -> Bool) -> (a -> Bool)

-- | This is <a>is</a> with a fixed equality condition.
--   
--   Example:
--   
--   <pre>
--   data Color = White | Black deriving (Eq)
--   data ChessPiece = { color :: Color, name :: String }
--   whitePieces = filter (color `equals` White)
--   </pre>
equals :: Eq b => (a -> b) -> b -> a -> Bool
