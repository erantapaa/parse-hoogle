-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pure Haskell LLVM functionality (no FFI).
--   
@package llvm-general-pure
@version 3.4.5.3


-- | This module provides a sub-namespace for a type to support the various
--   sizes of floating point numbers LLVM supports. It is most definitely
--   intended to be imported qualified.
module LLVM.General.AST.Float

-- | A type summing up the various float types. N.B. Note that in the
--   constructors with multiple fields, the lower significance bits are on
--   the right - e.g. Quadruple highbits lowbits
data SomeFloat
Half :: Word16 -> SomeFloat
Single :: Float -> SomeFloat
Double :: Double -> SomeFloat
Quadruple :: Word64 -> Word64 -> SomeFloat
X86_FP80 :: Word16 -> Word64 -> SomeFloat
PPC_FP128 :: Word64 -> Word64 -> SomeFloat
instance Typeable SomeFloat
instance Eq SomeFloat
instance Ord SomeFloat
instance Read SomeFloat
instance Show SomeFloat
instance Data SomeFloat


-- | This module is presents a prelude mostly like the
--   post-Applicative-Monad world of base &gt;= 4.8 / ghc &gt;= 7.10, even
--   on earlier versions. It's intended as an internal library for
--   llvm-general-pure and llvm-general; it's exposed only to be shared
--   between the two.
module LLVM.General.Prelude


-- | Pointers exist in Address Spaces
module LLVM.General.AST.AddrSpace

-- | See <a>http://llvm.org/docs/LangRef.html#pointer-type</a>
data AddrSpace
AddrSpace :: Word32 -> AddrSpace
instance Typeable AddrSpace
instance Eq AddrSpace
instance Ord AddrSpace
instance Read AddrSpace
instance Show AddrSpace
instance Data AddrSpace


-- | <a>http://llvm.org/docs/LangRef.html#data-layout</a>
module LLVM.General.AST.DataLayout

-- | Little Endian is the one true way :-). Sadly, we must support the
--   infidels.
data Endianness
LittleEndian :: Endianness
BigEndian :: Endianness

-- | An AlignmentInfo describes how a given type must and would best be
--   aligned
data AlignmentInfo
AlignmentInfo :: Word32 -> Maybe Word32 -> AlignmentInfo
abiAlignment :: AlignmentInfo -> Word32
preferredAlignment :: AlignmentInfo -> Maybe Word32

-- | A type of type for which <a>AlignmentInfo</a> may be specified
data AlignType
IntegerAlign :: AlignType
VectorAlign :: AlignType
FloatAlign :: AlignType
AggregateAlign :: AlignType
StackAlign :: AlignType

-- | a description of the various data layout properties which may be used
--   during optimization
data DataLayout
DataLayout :: Maybe Endianness -> Maybe Word32 -> Map AddrSpace (Word32, AlignmentInfo) -> Map (AlignType, Word32) AlignmentInfo -> Maybe (Set Word32) -> DataLayout
endianness :: DataLayout -> Maybe Endianness
stackAlignment :: DataLayout -> Maybe Word32
pointerLayouts :: DataLayout -> Map AddrSpace (Word32, AlignmentInfo)
typeLayouts :: DataLayout -> Map (AlignType, Word32) AlignmentInfo
nativeSizes :: DataLayout -> Maybe (Set Word32)

-- | a <a>DataLayout</a> which specifies nothing
defaultDataLayout :: DataLayout
instance Typeable Endianness
instance Typeable AlignmentInfo
instance Typeable AlignType
instance Typeable DataLayout
instance Eq Endianness
instance Ord Endianness
instance Read Endianness
instance Show Endianness
instance Data Endianness
instance Eq AlignmentInfo
instance Ord AlignmentInfo
instance Read AlignmentInfo
instance Show AlignmentInfo
instance Data AlignmentInfo
instance Eq AlignType
instance Ord AlignType
instance Read AlignType
instance Show AlignType
instance Data AlignType
instance Eq DataLayout
instance Ord DataLayout
instance Read DataLayout
instance Show DataLayout
instance Data DataLayout


-- | Module to allow importing <tt>Attribute</tt> distinctly qualified.
module LLVM.General.AST.Attribute

-- | <a>http://llvm.org/docs/LangRef.html#parameter-attributes</a>
data ParameterAttribute
ZeroExt :: ParameterAttribute
SignExt :: ParameterAttribute
InReg :: ParameterAttribute
SRet :: ParameterAttribute
Alignment :: Word32 -> ParameterAttribute
NoAlias :: ParameterAttribute
ByVal :: ParameterAttribute
NoCapture :: ParameterAttribute
Nest :: ParameterAttribute

-- | <a>http://llvm.org/docs/LangRef.html#function-attributes</a>
data FunctionAttribute
NoReturn :: FunctionAttribute
NoUnwind :: FunctionAttribute
ReadNone :: FunctionAttribute
ReadOnly :: FunctionAttribute
NoInline :: FunctionAttribute
AlwaysInline :: FunctionAttribute
OptimizeForSize :: FunctionAttribute
StackProtect :: FunctionAttribute
StackProtectReq :: FunctionAttribute
NoRedZone :: FunctionAttribute
NoImplicitFloat :: FunctionAttribute
Naked :: FunctionAttribute
InlineHint :: FunctionAttribute
StackAlignment :: Word32 -> FunctionAttribute
ReturnsTwice :: FunctionAttribute
UWTable :: FunctionAttribute
NonLazyBind :: FunctionAttribute
instance Typeable ParameterAttribute
instance Typeable FunctionAttribute
instance Eq ParameterAttribute
instance Read ParameterAttribute
instance Show ParameterAttribute
instance Data ParameterAttribute
instance Eq FunctionAttribute
instance Read FunctionAttribute
instance Show FunctionAttribute
instance Data FunctionAttribute


-- | Module to allow importing <a>CallingConvention</a> distinctly
--   qualified.
module LLVM.General.AST.CallingConvention

-- | <a>http://llvm.org/docs/LangRef.html#callingconv</a>
data CallingConvention
C :: CallingConvention
Fast :: CallingConvention
Cold :: CallingConvention
GHC :: CallingConvention
Numbered :: Word32 -> CallingConvention
instance Typeable CallingConvention
instance Eq CallingConvention
instance Read CallingConvention
instance Show CallingConvention
instance Data CallingConvention


-- | Predicates for the <a>FCmp</a> instruction
module LLVM.General.AST.FloatingPointPredicate

-- | <a>http://llvm.org/docs/LangRef.html#fcmp-instruction</a>
data FloatingPointPredicate
False :: FloatingPointPredicate
OEQ :: FloatingPointPredicate
OGT :: FloatingPointPredicate
OGE :: FloatingPointPredicate
OLT :: FloatingPointPredicate
OLE :: FloatingPointPredicate
ONE :: FloatingPointPredicate
ORD :: FloatingPointPredicate
UNO :: FloatingPointPredicate
UEQ :: FloatingPointPredicate
UGT :: FloatingPointPredicate
UGE :: FloatingPointPredicate
ULT :: FloatingPointPredicate
ULE :: FloatingPointPredicate
UNE :: FloatingPointPredicate
True :: FloatingPointPredicate
instance Typeable FloatingPointPredicate
instance Eq FloatingPointPredicate
instance Ord FloatingPointPredicate
instance Read FloatingPointPredicate
instance Show FloatingPointPredicate
instance Data FloatingPointPredicate


-- | Predicates for the <a>ICmp</a> instruction
module LLVM.General.AST.IntegerPredicate

-- | <a>http://llvm.org/docs/LangRef.html#icmp-instruction</a>
data IntegerPredicate
EQ :: IntegerPredicate
NE :: IntegerPredicate
UGT :: IntegerPredicate
UGE :: IntegerPredicate
ULT :: IntegerPredicate
ULE :: IntegerPredicate
SGT :: IntegerPredicate
SGE :: IntegerPredicate
SLT :: IntegerPredicate
SLE :: IntegerPredicate
instance Typeable IntegerPredicate
instance Eq IntegerPredicate
instance Ord IntegerPredicate
instance Read IntegerPredicate
instance Show IntegerPredicate
instance Data IntegerPredicate


-- | Module to allow importing <a>Linkage</a> distinctly qualified.
module LLVM.General.AST.Linkage

-- | <a>http://llvm.org/docs/LangRef.html#linkage</a>
data Linkage
Private :: Linkage
LinkerPrivate :: Linkage
LinkerPrivateWeak :: Linkage
Internal :: Linkage
AvailableExternally :: Linkage
LinkOnce :: Linkage
Weak :: Linkage
Common :: Linkage
Appending :: Linkage
ExternWeak :: Linkage
LinkOnceODR :: Linkage
WeakODR :: Linkage
External :: Linkage
DLLImport :: Linkage
DLLExport :: Linkage
instance Typeable Linkage
instance Eq Linkage
instance Read Linkage
instance Show Linkage
instance Data Linkage


-- | Module to allow importing <a>Visibility</a> distinctly qualified.
module LLVM.General.AST.Visibility

-- | <a>http://llvm.org/docs/LangRef.html#visibility</a>
data Visibility
Default :: Visibility
Hidden :: Visibility
Protected :: Visibility
instance Typeable Visibility
instance Eq Visibility
instance Read Visibility
instance Show Visibility
instance Data Visibility


-- | Operations for the <a>AtomicRMW</a> instruction
module LLVM.General.AST.RMWOperation

-- | <a>http://llvm.org/docs/LangRef.html#atomicrmw-instruction</a>
data RMWOperation
Xchg :: RMWOperation
Add :: RMWOperation
Sub :: RMWOperation
And :: RMWOperation
Nand :: RMWOperation
Or :: RMWOperation
Xor :: RMWOperation
Max :: RMWOperation
Min :: RMWOperation
UMax :: RMWOperation
UMin :: RMWOperation
instance Typeable RMWOperation
instance Eq RMWOperation
instance Ord RMWOperation
instance Read RMWOperation
instance Show RMWOperation
instance Data RMWOperation

module LLVM.General.DataLayout
dataLayoutToString :: DataLayout -> String
parseDataLayout :: String -> Maybe DataLayout


-- | This module is presents template haskell mostly like the
--   template-haskell &gt;= 2.10 / ghc &gt;= 7.10, even on earlier
--   versions. It's intended as an internal library for llvm-general-pure
--   and llvm-general; it's exposed only to be shared between the two.
module LLVM.General.TH
conT :: Typish qt => Name -> qt
appT :: Typish qt => qt -> Q Type -> qt
instance Typish (Q Pred)
instance Typish (Q Type)


-- | Names as used in LLVM IR
module LLVM.General.AST.Name

-- | Objects of various sorts in LLVM IR are identified by address in the
--   LLVM C++ API, and may be given a string name. When printed to (resp.
--   read from) human-readable LLVM assembly, objects without string names
--   are numbered sequentially (resp. must be numbered sequentially).
--   String names may be quoted, and are quoted when printed if they would
--   otherwise be misread - e.g. when containing special characters.
--   
--   <pre>
--   7
--   </pre>
--   
--   means the seventh unnamed object, while
--   
--   <pre>
--   "7"
--   </pre>
--   
--   means the object named with the string "7".
--   
--   This libraries handling of <a>UnName</a>s during translation of the
--   AST down into C++ IR is somewhat more forgiving than the LLVM assembly
--   parser: it does not require that unnamed values be numbered
--   sequentially; however, the numbers of <a>UnName</a>s passed into C++
--   cannot be preserved in the C++ objects. If the C++ IR is printed as
--   assembly or translated into a Haskell AST, unnamed nodes will be
--   renumbered sequentially. Thus unnamed node numbers should be thought
--   of as having any scope limited to the <a>Module</a> in which they are
--   used.
data Name

-- | a string name
Name :: String -> Name

-- | a number for a nameless thing
UnName :: Word -> Name
instance Typeable Name
instance Eq Name
instance Ord Name
instance Read Name
instance Show Name
instance Data Name


-- | A representation of an LLVM type
module LLVM.General.AST.Type

-- | LLVM supports some special formats floating point format. This type is
--   to distinguish those format. I believe it's treated as a format for
--   "a" float, as opposed to a vector of two floats, because its intended
--   usage is to represent a single number with a combined significand.
data FloatingPointFormat
IEEE :: FloatingPointFormat
DoubleExtended :: FloatingPointFormat
PairOfFloats :: FloatingPointFormat

-- | <a>http://llvm.org/docs/LangRef.html#type-system</a>
data Type

-- | <a>http://llvm.org/docs/LangRef.html#void-type</a>
VoidType :: Type

-- | <a>http://llvm.org/docs/LangRef.html#integer-type</a>
IntegerType :: Word32 -> Type
typeBits :: Type -> Word32

-- | <a>http://llvm.org/docs/LangRef.html#pointer-type</a>
PointerType :: Type -> AddrSpace -> Type
pointerReferent :: Type -> Type
pointerAddrSpace :: Type -> AddrSpace

-- | <a>http://llvm.org/docs/LangRef.html#floating-point-types</a>
FloatingPointType :: Word32 -> FloatingPointFormat -> Type
typeBits :: Type -> Word32
floatingPointFormat :: Type -> FloatingPointFormat

-- | <a>http://llvm.org/docs/LangRef.html#function-type</a>
FunctionType :: Type -> [Type] -> Bool -> Type
resultType :: Type -> Type
argumentTypes :: Type -> [Type]
isVarArg :: Type -> Bool

-- | <a>http://llvm.org/docs/LangRef.html#vector-type</a>
VectorType :: Word32 -> Type -> Type
nVectorElements :: Type -> Word32
elementType :: Type -> Type

-- | <a>http://llvm.org/docs/LangRef.html#structure-type</a>
StructureType :: Bool -> [Type] -> Type
isPacked :: Type -> Bool
elementTypes :: Type -> [Type]

-- | <a>http://llvm.org/docs/LangRef.html#array-type</a>
ArrayType :: Word64 -> Type -> Type
nArrayElements :: Type -> Word64
elementType :: Type -> Type

-- | <a>http://llvm.org/docs/LangRef.html#opaque-structure-types</a>
NamedTypeReference :: Name -> Type

-- | <a>http://llvm.org/docs/LangRef.html#metadata-type</a>
MetadataType :: Type

-- | An abbreviation for <a>VoidType</a>
void :: Type

-- | An abbreviation for <a>IntegerType</a> 1
i1 :: Type

-- | An abbreviation for <a>IntegerType</a> 8
i8 :: Type

-- | An abbreviation for <a>IntegerType</a> 16
i16 :: Type

-- | An abbreviation for <a>IntegerType</a> 32
i32 :: Type

-- | An abbreviation for <a>IntegerType</a> 64
i64 :: Type

-- | An abbreviation for <a>IntegerType</a> 128
i128 :: Type

-- | An abbreviation for <a>PointerType</a> t (<a>AddrSpace</a> 0)
ptr :: Type -> Type

-- | An abbreviation for <a>FloatingPointType</a> 16 <a>IEEE</a>
half :: Type

-- | An abbreviation for <a>FloatingPointType</a> 32 <a>IEEE</a>
float :: Type

-- | An abbreviation for <a>FloatingPointType</a> 64 <a>IEEE</a>
double :: Type

-- | An abbreviation for <a>FloatingPointType</a> 128 <a>IEEE</a>
fp128 :: Type

-- | An abbreviation for <a>FloatingPointType</a> 80 <a>DoubleExtended</a>
x86_fp80 :: Type

-- | An abbreviation for <a>FloatingPointType</a> 128 <a>PairOfFloats</a>
ppc_fp128 :: Type
instance Typeable FloatingPointFormat
instance Typeable Type
instance Eq FloatingPointFormat
instance Ord FloatingPointFormat
instance Read FloatingPointFormat
instance Show FloatingPointFormat
instance Data FloatingPointFormat
instance Eq Type
instance Ord Type
instance Read Type
instance Show Type
instance Data Type


-- | A representation of an LLVM inline assembly
module LLVM.General.AST.InlineAssembly

-- | the dialect of assembly used in an inline assembly string
--   <a>http://en.wikipedia.org/wiki/X86_assembly_language#Syntax</a>
data Dialect
ATTDialect :: Dialect
IntelDialect :: Dialect

-- | <a>http://llvm.org/docs/LangRef.html#inline-assembler-expressions</a>
--   to be used through <a>CallableOperand</a> with a <a>Call</a>
--   instruction
data InlineAssembly
InlineAssembly :: Type -> String -> String -> Bool -> Bool -> Dialect -> InlineAssembly
type' :: InlineAssembly -> Type
assembly :: InlineAssembly -> String
constraints :: InlineAssembly -> String
hasSideEffects :: InlineAssembly -> Bool
alignStack :: InlineAssembly -> Bool
dialect :: InlineAssembly -> Dialect
instance Typeable Dialect
instance Typeable InlineAssembly
instance Eq Dialect
instance Read Dialect
instance Show Dialect
instance Data Dialect
instance Eq InlineAssembly
instance Read InlineAssembly
instance Show InlineAssembly
instance Data InlineAssembly


-- | A representation of LLVM constants
module LLVM.General.AST.Constant

-- | <a>http://llvm.org/docs/LangRef.html#constants</a>
--   
--   N.B. - <a>http://llvm.org/docs/LangRef.html#constant-expressions</a>
--   
--   Although constant expressions and instructions have many similarites,
--   there are important differences - so they're represented using
--   different types in this AST. At the cost of making it harder to move
--   an code back and forth between being constant and not, this approach
--   embeds more of the rules of what IR is legal into the Haskell types.
data Constant
Int :: Word32 -> Integer -> Constant
integerBits :: Constant -> Word32
integerValue :: Constant -> Integer
Float :: SomeFloat -> Constant
floatValue :: Constant -> SomeFloat
Null :: Type -> Constant
constantType :: Constant -> Type
Struct :: Maybe Name -> Bool -> [Constant] -> Constant
structName :: Constant -> Maybe Name
isPacked :: Constant -> Bool
memberValues :: Constant -> [Constant]
Array :: Type -> [Constant] -> Constant
memberType :: Constant -> Type
memberValues :: Constant -> [Constant]
Vector :: [Constant] -> Constant
memberValues :: Constant -> [Constant]
Undef :: Type -> Constant
constantType :: Constant -> Type
BlockAddress :: Name -> Name -> Constant
blockAddressFunction :: Constant -> Name
blockAddressBlock :: Constant -> Name
GlobalReference :: Type -> Name -> Constant
Add :: Bool -> Bool -> Constant -> Constant -> Constant
nsw :: Constant -> Bool
nuw :: Constant -> Bool
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
FAdd :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
Sub :: Bool -> Bool -> Constant -> Constant -> Constant
nsw :: Constant -> Bool
nuw :: Constant -> Bool
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
FSub :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
Mul :: Bool -> Bool -> Constant -> Constant -> Constant
nsw :: Constant -> Bool
nuw :: Constant -> Bool
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
FMul :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
UDiv :: Bool -> Constant -> Constant -> Constant
exact :: Constant -> Bool
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
SDiv :: Bool -> Constant -> Constant -> Constant
exact :: Constant -> Bool
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
FDiv :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
URem :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
SRem :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
FRem :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
Shl :: Bool -> Bool -> Constant -> Constant -> Constant
nsw :: Constant -> Bool
nuw :: Constant -> Bool
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
LShr :: Bool -> Constant -> Constant -> Constant
exact :: Constant -> Bool
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
AShr :: Bool -> Constant -> Constant -> Constant
exact :: Constant -> Bool
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
And :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
Or :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
Xor :: Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
GetElementPtr :: Bool -> Constant -> [Constant] -> Constant
inBounds :: Constant -> Bool
address :: Constant -> Constant
indices :: Constant -> [Constant]
Trunc :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
ZExt :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
SExt :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
FPToUI :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
FPToSI :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
UIToFP :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
SIToFP :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
FPTrunc :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
FPExt :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
PtrToInt :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
IntToPtr :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
BitCast :: Constant -> Type -> Constant
operand0 :: Constant -> Constant
type' :: Constant -> Type
ICmp :: IntegerPredicate -> Constant -> Constant -> Constant
iPredicate :: Constant -> IntegerPredicate
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
FCmp :: FloatingPointPredicate -> Constant -> Constant -> Constant
fpPredicate :: Constant -> FloatingPointPredicate
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
Select :: Constant -> Constant -> Constant -> Constant
condition' :: Constant -> Constant
trueValue :: Constant -> Constant
falseValue :: Constant -> Constant
ExtractElement :: Constant -> Constant -> Constant
vector :: Constant -> Constant
index :: Constant -> Constant
InsertElement :: Constant -> Constant -> Constant -> Constant
vector :: Constant -> Constant
element :: Constant -> Constant
index :: Constant -> Constant
ShuffleVector :: Constant -> Constant -> Constant -> Constant
operand0 :: Constant -> Constant
operand1 :: Constant -> Constant
mask :: Constant -> Constant
ExtractValue :: Constant -> [Word32] -> Constant
aggregate :: Constant -> Constant
indices' :: Constant -> [Word32]
InsertValue :: Constant -> Constant -> [Word32] -> Constant
aggregate :: Constant -> Constant
element :: Constant -> Constant
indices' :: Constant -> [Word32]

-- | Since LLVM types don't include signedness, there's ambiguity in
--   interpreting an constant as an Integer. The LLVM assembly printer
--   prints integers as signed, but cheats for 1-bit integers and prints
--   them as <tt>true</tt> or <tt>false</tt>. That way it circuments the
--   otherwise awkward fact that a twos complement 1-bit number only has
--   the values -1 and 0.
signedIntegerValue :: Constant -> Integer

-- | This library's conversion from LLVM C++ objects will always produce
--   integer constants as unsigned, so this function in many cases is not
--   necessary. However, nothing's to keep stop direct construction of an
--   <a>Int</a> with a negative <a>integerValue</a>. There's nothing in
--   principle wrong with such a value - it has perfectly good low order
--   bits like any integer, and will be used as such, likely producing the
--   intended result if lowered to C++. If, however one wishes to interpret
--   an <a>Int</a> of unknown provenance as unsigned, then this function
--   will serve.
unsignedIntegerValue :: Constant -> Integer
instance Typeable Constant
instance Eq Constant
instance Ord Constant
instance Read Constant
instance Show Constant
instance Data Constant


-- | A type to represent operands to LLVM <a>Instruction</a>s
module LLVM.General.AST.Operand

-- | A <a>MetadataNodeID</a> is a number for identifying a metadata node.
--   Note this is different from "named metadata", which are represented
--   with <a>NamedMetadataDefinition</a>.
newtype MetadataNodeID
MetadataNodeID :: Word -> MetadataNodeID

-- | <a>http://llvm.org/docs/LangRef.html#metadata</a>
data MetadataNode
MetadataNode :: [Maybe Operand] -> MetadataNode
MetadataNodeReference :: MetadataNodeID -> MetadataNode

-- | An <a>Operand</a> is roughly that which is an argument to an
--   <a>Instruction</a>
data Operand

-- | %foo
LocalReference :: Type -> Name -> Operand

-- | <a>Constant</a>s include <a>GlobalReference</a>, for @foo
ConstantOperand :: Constant -> Operand
MetadataStringOperand :: String -> Operand
MetadataNodeOperand :: MetadataNode -> Operand

-- | The <a>Call</a> instruction is special: the callee can be inline
--   assembly
type CallableOperand = Either InlineAssembly Operand
instance Typeable MetadataNodeID
instance Typeable Operand
instance Typeable MetadataNode
instance Eq MetadataNodeID
instance Ord MetadataNodeID
instance Read MetadataNodeID
instance Show MetadataNodeID
instance Data MetadataNodeID
instance Eq Operand
instance Ord Operand
instance Read Operand
instance Show Operand
instance Data Operand
instance Eq MetadataNode
instance Ord MetadataNode
instance Read MetadataNode
instance Show MetadataNode
instance Data MetadataNode


-- | LLVM instructions
--   <a>http://llvm.org/docs/LangRef.html#instruction-reference</a>
module LLVM.General.AST.Instruction

-- | 
--   <a>http://llvm.org/docs/LangRef.html#metadata-nodes-and-metadata-strings</a>
--   Metadata can be attached to an instruction
type InstructionMetadata = [(String, MetadataNode)]

-- | <a>http://llvm.org/docs/LangRef.html#terminators</a>
data Terminator
Ret :: Maybe Operand -> InstructionMetadata -> Terminator
returnOperand :: Terminator -> Maybe Operand
metadata' :: Terminator -> InstructionMetadata
CondBr :: Operand -> Name -> Name -> InstructionMetadata -> Terminator
condition :: Terminator -> Operand
trueDest :: Terminator -> Name
falseDest :: Terminator -> Name
metadata' :: Terminator -> InstructionMetadata
Br :: Name -> InstructionMetadata -> Terminator
dest :: Terminator -> Name
metadata' :: Terminator -> InstructionMetadata
Switch :: Operand -> Name -> [(Constant, Name)] -> InstructionMetadata -> Terminator
operand0' :: Terminator -> Operand
defaultDest :: Terminator -> Name
dests :: Terminator -> [(Constant, Name)]
metadata' :: Terminator -> InstructionMetadata
IndirectBr :: Operand -> [Name] -> InstructionMetadata -> Terminator
operand0' :: Terminator -> Operand
possibleDests :: Terminator -> [Name]
metadata' :: Terminator -> InstructionMetadata
Invoke :: CallingConvention -> [ParameterAttribute] -> CallableOperand -> [(Operand, [ParameterAttribute])] -> [FunctionAttribute] -> Name -> Name -> InstructionMetadata -> Terminator
callingConvention' :: Terminator -> CallingConvention
returnAttributes' :: Terminator -> [ParameterAttribute]
function' :: Terminator -> CallableOperand
arguments' :: Terminator -> [(Operand, [ParameterAttribute])]
functionAttributes' :: Terminator -> [FunctionAttribute]
returnDest :: Terminator -> Name
exceptionDest :: Terminator -> Name
metadata' :: Terminator -> InstructionMetadata
Resume :: Operand -> InstructionMetadata -> Terminator
operand0' :: Terminator -> Operand
metadata' :: Terminator -> InstructionMetadata
Unreachable :: InstructionMetadata -> Terminator
metadata' :: Terminator -> InstructionMetadata

-- | <a>http://llvm.org/docs/LangRef.html#fast-math-flags</a>
data FastMathFlags
NoFastMathFlags :: FastMathFlags
UnsafeAlgebra :: FastMathFlags
FastMathFlags :: Bool -> Bool -> Bool -> Bool -> FastMathFlags
noNaNs :: FastMathFlags -> Bool
noInfs :: FastMathFlags -> Bool
noSignedZeros :: FastMathFlags -> Bool
allowReciprocal :: FastMathFlags -> Bool

-- | 
--   <a>http://llvm.org/docs/LangRef.html#atomic-memory-ordering-constraints</a>
--   <a>http://llvm.org/docs/Atomics.html</a>
data MemoryOrdering
Unordered :: MemoryOrdering
Monotonic :: MemoryOrdering
Acquire :: MemoryOrdering
Release :: MemoryOrdering
AcquireRelease :: MemoryOrdering
SequentiallyConsistent :: MemoryOrdering

-- | An <a>Atomicity</a> describes constraints on the visibility of effects
--   of an atomic instruction
data Atomicity
Atomicity :: Bool -> MemoryOrdering -> Atomicity

-- | <a>http://llvm.org/docs/LangRef.html#singlethread</a>
crossThread :: Atomicity -> Bool
memoryOrdering :: Atomicity -> MemoryOrdering

-- | For the redoubtably complex <a>LandingPad</a> instruction
data LandingPadClause
Catch :: Constant -> LandingPadClause
Filter :: Constant -> LandingPadClause

-- | non-terminator instructions:
--   <a>http://llvm.org/docs/LangRef.html#binaryops</a>
--   <a>http://llvm.org/docs/LangRef.html#bitwiseops</a>
--   <a>http://llvm.org/docs/LangRef.html#memoryops</a>
--   <a>http://llvm.org/docs/LangRef.html#otherops</a>
data Instruction
Add :: Bool -> Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
nsw :: Instruction -> Bool
nuw :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FAdd :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Sub :: Bool -> Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
nsw :: Instruction -> Bool
nuw :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FSub :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Mul :: Bool -> Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
nsw :: Instruction -> Bool
nuw :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FMul :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
UDiv :: Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
exact :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
SDiv :: Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
exact :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FDiv :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
URem :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
SRem :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FRem :: FastMathFlags -> Operand -> Operand -> InstructionMetadata -> Instruction
fastMathFlags :: Instruction -> FastMathFlags
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Shl :: Bool -> Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
nsw :: Instruction -> Bool
nuw :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
LShr :: Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
exact :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
AShr :: Bool -> Operand -> Operand -> InstructionMetadata -> Instruction
exact :: Instruction -> Bool
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
And :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Or :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Xor :: Operand -> Operand -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Alloca :: Type -> Maybe Operand -> Word32 -> InstructionMetadata -> Instruction
allocatedType :: Instruction -> Type
numElements :: Instruction -> Maybe Operand
alignment :: Instruction -> Word32
metadata :: Instruction -> InstructionMetadata
Load :: Bool -> Operand -> Maybe Atomicity -> Word32 -> InstructionMetadata -> Instruction
volatile :: Instruction -> Bool
address :: Instruction -> Operand
maybeAtomicity :: Instruction -> Maybe Atomicity
alignment :: Instruction -> Word32
metadata :: Instruction -> InstructionMetadata
Store :: Bool -> Operand -> Operand -> Maybe Atomicity -> Word32 -> InstructionMetadata -> Instruction
volatile :: Instruction -> Bool
address :: Instruction -> Operand
value :: Instruction -> Operand
maybeAtomicity :: Instruction -> Maybe Atomicity
alignment :: Instruction -> Word32
metadata :: Instruction -> InstructionMetadata
GetElementPtr :: Bool -> Operand -> [Operand] -> InstructionMetadata -> Instruction
inBounds :: Instruction -> Bool
address :: Instruction -> Operand
indices :: Instruction -> [Operand]
metadata :: Instruction -> InstructionMetadata
Fence :: Atomicity -> InstructionMetadata -> Instruction
atomicity :: Instruction -> Atomicity
metadata :: Instruction -> InstructionMetadata
CmpXchg :: Bool -> Operand -> Operand -> Operand -> Atomicity -> InstructionMetadata -> Instruction
volatile :: Instruction -> Bool
address :: Instruction -> Operand
expected :: Instruction -> Operand
replacement :: Instruction -> Operand
atomicity :: Instruction -> Atomicity
metadata :: Instruction -> InstructionMetadata
AtomicRMW :: Bool -> RMWOperation -> Operand -> Operand -> Atomicity -> InstructionMetadata -> Instruction
volatile :: Instruction -> Bool
rmwOperation :: Instruction -> RMWOperation
address :: Instruction -> Operand
value :: Instruction -> Operand
atomicity :: Instruction -> Atomicity
metadata :: Instruction -> InstructionMetadata
Trunc :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
ZExt :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
SExt :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
FPToUI :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
FPToSI :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
UIToFP :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
SIToFP :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
FPTrunc :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
FPExt :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
PtrToInt :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
IntToPtr :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
BitCast :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
AddrSpaceCast :: Operand -> Type -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
ICmp :: IntegerPredicate -> Operand -> Operand -> InstructionMetadata -> Instruction
iPredicate :: Instruction -> IntegerPredicate
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
FCmp :: FloatingPointPredicate -> Operand -> Operand -> InstructionMetadata -> Instruction
fpPredicate :: Instruction -> FloatingPointPredicate
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
Phi :: Type -> [(Operand, Name)] -> InstructionMetadata -> Instruction
type' :: Instruction -> Type
incomingValues :: Instruction -> [(Operand, Name)]
metadata :: Instruction -> InstructionMetadata
Call :: Bool -> CallingConvention -> [ParameterAttribute] -> CallableOperand -> [(Operand, [ParameterAttribute])] -> [FunctionAttribute] -> InstructionMetadata -> Instruction
isTailCall :: Instruction -> Bool
callingConvention :: Instruction -> CallingConvention
returnAttributes :: Instruction -> [ParameterAttribute]
function :: Instruction -> CallableOperand
arguments :: Instruction -> [(Operand, [ParameterAttribute])]
functionAttributes :: Instruction -> [FunctionAttribute]
metadata :: Instruction -> InstructionMetadata
Select :: Operand -> Operand -> Operand -> InstructionMetadata -> Instruction
condition' :: Instruction -> Operand
trueValue :: Instruction -> Operand
falseValue :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
VAArg :: Operand -> Type -> InstructionMetadata -> Instruction
argList :: Instruction -> Operand
type' :: Instruction -> Type
metadata :: Instruction -> InstructionMetadata
ExtractElement :: Operand -> Operand -> InstructionMetadata -> Instruction
vector :: Instruction -> Operand
index :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
InsertElement :: Operand -> Operand -> Operand -> InstructionMetadata -> Instruction
vector :: Instruction -> Operand
element :: Instruction -> Operand
index :: Instruction -> Operand
metadata :: Instruction -> InstructionMetadata
ShuffleVector :: Operand -> Operand -> Constant -> InstructionMetadata -> Instruction
operand0 :: Instruction -> Operand
operand1 :: Instruction -> Operand
mask :: Instruction -> Constant
metadata :: Instruction -> InstructionMetadata
ExtractValue :: Operand -> [Word32] -> InstructionMetadata -> Instruction
aggregate :: Instruction -> Operand
indices' :: Instruction -> [Word32]
metadata :: Instruction -> InstructionMetadata
InsertValue :: Operand -> Operand -> [Word32] -> InstructionMetadata -> Instruction
aggregate :: Instruction -> Operand
element :: Instruction -> Operand
indices' :: Instruction -> [Word32]
metadata :: Instruction -> InstructionMetadata
LandingPad :: Type -> Operand -> Bool -> [LandingPadClause] -> InstructionMetadata -> Instruction
type' :: Instruction -> Type
personalityFunction :: Instruction -> Operand
cleanup :: Instruction -> Bool
clauses :: Instruction -> [LandingPadClause]
metadata :: Instruction -> InstructionMetadata

-- | Instances of instructions may be given a name, allowing their results
--   to be referenced as <a>Operand</a>s. Sometimes instructions - e.g. a
--   call to a function returning void - don't need names.
data Named a
(:=) :: Name -> a -> Named a
Do :: a -> Named a
instance Typeable Terminator
instance Typeable FastMathFlags
instance Typeable MemoryOrdering
instance Typeable Atomicity
instance Typeable LandingPadClause
instance Typeable Instruction
instance Typeable Named
instance Eq Terminator
instance Read Terminator
instance Show Terminator
instance Data Terminator
instance Eq FastMathFlags
instance Ord FastMathFlags
instance Read FastMathFlags
instance Show FastMathFlags
instance Data FastMathFlags
instance Eq MemoryOrdering
instance Ord MemoryOrdering
instance Read MemoryOrdering
instance Show MemoryOrdering
instance Data MemoryOrdering
instance Eq Atomicity
instance Ord Atomicity
instance Read Atomicity
instance Show Atomicity
instance Data Atomicity
instance Eq LandingPadClause
instance Ord LandingPadClause
instance Read LandingPadClause
instance Show LandingPadClause
instance Data LandingPadClause
instance Eq Instruction
instance Read Instruction
instance Show Instruction
instance Data Instruction
instance Eq a => Eq (Named a)
instance Read a => Read (Named a)
instance Show a => Show (Named a)
instance Data a => Data (Named a)


-- | <a>Global</a>s - top-level values in <tt>Module</tt>s - and supporting
--   structures.
module LLVM.General.AST.Global

-- | <a>http://llvm.org/doxygen/classllvm_1_1GlobalValue.html</a>
data Global

-- | <a>http://llvm.org/docs/LangRef.html#global-variables</a>
GlobalVariable :: Name -> Linkage -> Visibility -> Bool -> AddrSpace -> Bool -> Bool -> Type -> Maybe Constant -> Maybe String -> Word32 -> Global
name :: Global -> Name
linkage :: Global -> Linkage
visibility :: Global -> Visibility
isThreadLocal :: Global -> Bool
addrSpace :: Global -> AddrSpace
hasUnnamedAddr :: Global -> Bool
isConstant :: Global -> Bool
type' :: Global -> Type
initializer :: Global -> Maybe Constant
section :: Global -> Maybe String
alignment :: Global -> Word32

-- | <a>http://llvm.org/docs/LangRef.html#aliases</a>
GlobalAlias :: Name -> Linkage -> Visibility -> Type -> Constant -> Global
name :: Global -> Name
linkage :: Global -> Linkage
visibility :: Global -> Visibility
type' :: Global -> Type
aliasee :: Global -> Constant

-- | <a>http://llvm.org/docs/LangRef.html#functions</a>
Function :: Linkage -> Visibility -> CallingConvention -> [ParameterAttribute] -> Type -> Name -> ([Parameter], Bool) -> [FunctionAttribute] -> Maybe String -> Word32 -> Maybe String -> [BasicBlock] -> Global
linkage :: Global -> Linkage
visibility :: Global -> Visibility
callingConvention :: Global -> CallingConvention
returnAttributes :: Global -> [ParameterAttribute]
returnType :: Global -> Type
name :: Global -> Name

-- | snd indicates varargs
parameters :: Global -> ([Parameter], Bool)
functionAttributes :: Global -> [FunctionAttribute]
section :: Global -> Maybe String
alignment :: Global -> Word32
garbageCollectorName :: Global -> Maybe String
basicBlocks :: Global -> [BasicBlock]

-- | <a>Parameter</a>s for <a>Function</a>s
data Parameter
Parameter :: Type -> Name -> [ParameterAttribute] -> Parameter

-- | <a>http://llvm.org/doxygen/classllvm_1_1BasicBlock.html</a> LLVM code
--   in a function is a sequence of <a>BasicBlock</a>s each with a label,
--   some instructions, and a terminator.
data BasicBlock
BasicBlock :: Name -> [Named Instruction] -> (Named Terminator) -> BasicBlock

-- | helper for making <a>GlobalVariable</a>s
globalVariableDefaults :: Global

-- | helper for making <a>GlobalAlias</a>s
globalAliasDefaults :: Global

-- | helper for making <a>Function</a>s
functionDefaults :: Global
instance Typeable Parameter
instance Typeable BasicBlock
instance Typeable Global
instance Eq Parameter
instance Read Parameter
instance Show Parameter
instance Data Parameter
instance Eq BasicBlock
instance Read BasicBlock
instance Show BasicBlock
instance Data BasicBlock
instance Eq Global
instance Read Global
instance Show Global
instance Data Global


-- | This module and descendants define AST data types to represent LLVM
--   code. Note that these types are designed for fidelity rather than
--   convenience - if the truth of what LLVM supports is less than pretty,
--   so be it.
module LLVM.General.AST

-- | <a>http://llvm.org/docs/LangRef.html#modulestructure</a>
data Module
Module :: String -> Maybe DataLayout -> Maybe String -> [Definition] -> Module
moduleName :: Module -> String

-- | a <a>DataLayout</a>, if specified, must match that of the eventual
--   code generator
moduleDataLayout :: Module -> Maybe DataLayout
moduleTargetTriple :: Module -> Maybe String
moduleDefinitions :: Module -> [Definition]

-- | helper for making <a>Module</a>s
defaultModule :: Module

-- | Any thing which can be at the top level of a <a>Module</a>
data Definition
GlobalDefinition :: Global -> Definition
TypeDefinition :: Name -> (Maybe Type) -> Definition
MetadataNodeDefinition :: MetadataNodeID -> [Maybe Operand] -> Definition
NamedMetadataDefinition :: String -> [MetadataNodeID] -> Definition
ModuleInlineAssembly :: String -> Definition

-- | <a>http://llvm.org/doxygen/classllvm_1_1GlobalValue.html</a>
data Global

-- | <a>http://llvm.org/docs/LangRef.html#global-variables</a>
GlobalVariable :: Name -> Linkage -> Visibility -> Bool -> AddrSpace -> Bool -> Bool -> Type -> Maybe Constant -> Maybe String -> Word32 -> Global

-- | <a>http://llvm.org/docs/LangRef.html#aliases</a>
GlobalAlias :: Name -> Linkage -> Visibility -> Type -> Constant -> Global

-- | <a>http://llvm.org/docs/LangRef.html#functions</a>
Function :: Linkage -> Visibility -> CallingConvention -> [ParameterAttribute] -> Type -> Name -> ([Parameter], Bool) -> [FunctionAttribute] -> Maybe String -> Word32 -> Maybe String -> [BasicBlock] -> Global

-- | helper for making <a>GlobalVariable</a>s
globalVariableDefaults :: Global

-- | helper for making <a>GlobalAlias</a>s
globalAliasDefaults :: Global

-- | helper for making <a>Function</a>s
functionDefaults :: Global

-- | <a>Parameter</a>s for <a>Function</a>s
data Parameter
Parameter :: Type -> Name -> [ParameterAttribute] -> Parameter

-- | <a>http://llvm.org/doxygen/classllvm_1_1BasicBlock.html</a> LLVM code
--   in a function is a sequence of <a>BasicBlock</a>s each with a label,
--   some instructions, and a terminator.
data BasicBlock
BasicBlock :: Name -> [Named Instruction] -> (Named Terminator) -> BasicBlock
instance Typeable Definition
instance Typeable Module
instance Eq Definition
instance Read Definition
instance Show Definition
instance Data Definition
instance Eq Module
instance Read Module
instance Show Module
instance Data Module


-- | Tools for printing out AST.<a>Module</a> code so that it's actually
--   useful.
module LLVM.General.PrettyPrint

-- | a class for simple pretty-printing with indentation a function only of
--   syntactic depth.
class Show a => PrettyShow a where prettyShow = fromString . show prettyShowList = brackets . punctuate comma . map prettyShow
prettyShow :: PrettyShow a => a -> QTree
prettyShowList :: PrettyShow a => [a] -> QTree

-- | Show an AST.<a>Module</a> or part thereof both with qualified
--   identifiers (resolving some ambiguity, making the output usable
--   Haskell) and with indentation (making the output readable).
showPretty :: PrettyShow a => a -> String

-- | Like <a>showPretty</a> but allowing configuration of the format
showPrettyEx :: PrettyShow a => Int -> String -> PrefixScheme -> a -> String

-- | A <a>PrefixScheme</a> is a mapping between haskell module names and
--   the prefixes with which they should be rendered when printing code.
newtype PrefixScheme
PrefixScheme :: (Map String (Maybe String)) -> PrefixScheme

-- | a terse <a>PrefixScheme</a>, leaving most names unqualified.
shortPrefixScheme :: PrefixScheme

-- | a conservative <a>PrefixScheme</a> which qualifies everything.
longPrefixScheme :: PrefixScheme

-- | the default <a>PrefixScheme</a> used by <a>showPretty</a>
defaultPrefixScheme :: PrefixScheme

-- | a <a>PrefixScheme</a> for types not of llvm-general, but nevertheless
--   used in the AST. Useful for building other <a>PrefixScheme</a>s.
basePrefixScheme :: PrefixScheme

-- | a terse <a>PrefixScheme</a> for types in the AST, leaving most names
--   unqualified. Useful for building other <a>PrefixScheme</a>s. If you
--   think you want to use this, you probably want <a>shortPrefixScheme</a>
--   instead.
shortASTPrefixScheme :: PrefixScheme

-- | a conservative <a>PrefixScheme</a> for types in the AST which
--   qualifies everything. Useful for building other <a>PrefixScheme</a>s.
--   If you think you want to use this, you probably want
--   <a>longPrefixScheme</a> instead.
longASTPrefixScheme :: PrefixScheme

-- | print Haskell imports to define the correct prefixes for use with the
--   output of a given <a>PrefixScheme</a>.
imports :: PrefixScheme -> String
instance Eq PrefixScheme
instance Ord PrefixScheme
instance Read PrefixScheme
instance Show PrefixScheme
instance Monoid PrefixScheme
instance PrettyShow a0 => PrettyShow (Maybe a0)
instance (PrettyShow a0, PrettyShow a1) => PrettyShow (Either a0 a1)
instance PrettyShow MemoryOrdering
instance PrettyShow FastMathFlags
instance PrettyShow Dialect
instance PrettyShow Atomicity
instance PrettyShow RMWOperation
instance PrettyShow InlineAssembly
instance PrettyShow LandingPadClause
instance PrettyShow Instruction
instance PrettyShow Terminator
instance PrettyShow a0 => PrettyShow (Named a0)
instance PrettyShow SomeFloat
instance PrettyShow Linkage
instance PrettyShow Visibility
instance PrettyShow CallingConvention
instance PrettyShow Parameter
instance PrettyShow ParameterAttribute
instance PrettyShow FunctionAttribute
instance PrettyShow FloatingPointFormat
instance PrettyShow IntegerPredicate
instance PrettyShow FloatingPointPredicate
instance PrettyShow BasicBlock
instance PrettyShow Endianness
instance PrettyShow AddrSpace
instance PrettyShow Constant
instance PrettyShow AlignType
instance PrettyShow AlignmentInfo
instance PrettyShow Global
instance PrettyShow Name
instance PrettyShow Type
instance PrettyShow MetadataNode
instance PrettyShow MetadataNodeID
instance PrettyShow Operand
instance PrettyShow DataLayout
instance PrettyShow Definition
instance PrettyShow Module
