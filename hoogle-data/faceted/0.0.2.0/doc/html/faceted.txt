-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Faceted computation for dynamic information flow security
--   
--   This library provides faceted values and computations for enforcing
--   secure information flow.
--   
--   A faceted value represents many value simultaneously, depending on who
--   is observing, and prevents any observer from viewing confidential
--   information that they do not have privileges to access.
@package faceted
@version 0.0.2.0

module Data.Faceted

-- | A security label is any string. Labels need not be secrets; they may
--   be readable strings. Information flow security is ensured by a
--   combination of the type system and dynamic checks.
type Label = String

-- | Type 'Faceted a' represents (possibly) faceted values.
--   
--   <a>? x : y</a> ====&gt; Faceted k x y
data Faceted a

-- | <a>? x : bottom</a> ====&gt; makePrivate k x
makePrivate :: Label -> a -> Faceted a
makeFaceted :: Label -> Faceted a -> Faceted a -> Faceted a

-- | x ==&gt; Raw x ===&gt; makePublic x
makePublic :: a -> Faceted a
bottom :: Faceted a

-- | Variables of type 'FIORef a' are faceted <a>IORef</a>s
data FIORef a

-- | Allocate a new <a>FIORef</a>
newFIORef :: Faceted a -> FIO (FIORef a)

-- | Read an <a>FIORef</a>
readFIORef :: FIORef a -> FIO (Faceted a)

-- | Write an <a>FIORef</a>
writeFIORef :: FIORef a -> Faceted a -> FIO ()

-- | A _view_ is any set of labels. In enforcing information flow security
--   Each view may see a different value.
type View = [Label]

-- | Facet-aware file handles
data FHandle
openFileF :: View -> FilePath -> IOMode -> FIO FHandle
hPutCharF :: FHandle -> Faceted Char -> FIO ()
hGetCharF :: FHandle -> FIO (Faceted Char)
