-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Proper names for curry and uncurry
--   
--   This package implements curry and uncurry with their proper names:
--   schoen and unschoen.
@package acme-schoenfinkel
@version 0.1.1


-- | This library generalizes <a>curry</a> and <a>uncurry</a> and also
--   gives them more appropriate names.
--   
--   <pre>
--   import Control.Category.Schoenfinkel
--   
--   main :: IO ()
--   main = print (unschoen atan2 (2, 3))
--   </pre>
--   
--   For your convenience there are also Unicode variants of both the
--   <a>Schoenfinkel</a> class and its two functions.
module Control.Category.Schoenfinkel

-- | Categories that support Schönfinkelization.
class Category cat => Schoenfinkel cat
schoen :: Schoenfinkel cat => cat (a, b) c -> cat a (cat b c)
unschoen :: Schoenfinkel cat => cat a (cat b c) -> cat (a, b) c

-- | Every <a>ArrowApply</a> gives rise to a <a>Schoenfinkel</a>.
newtype WrappedSchoenfinkel cat a b
WrappedSchoenfinkel :: cat a b -> WrappedSchoenfinkel cat a b
unwrapSchoenfinkel :: WrappedSchoenfinkel cat a b -> cat a b

-- | Unicode version of <a>Schoenfinkel</a> if you prefer.
type Schönfinkel = Schoenfinkel

-- | Unicode version of <a>WrappedSchoenfinkel</a> if you prefer.
type WrappedSchönfinkel = WrappedSchoenfinkel

-- | Unicode version of <a>schoen</a> if you prefer.
schön :: Schoenfinkel cat => cat (a, b) c -> cat a (cat b c)

-- | Unicode version of <a>unschoen</a> if you prefer.
unschön :: Schoenfinkel cat => cat a (cat b c) -> cat (a, b) c

-- | Another appropriate name for 'uncurry'/'unschoen'.
hässlich :: Schoenfinkel cat => cat a (cat b c) -> cat (a, b) c
instance Alternative (cat a) => Alternative (WrappedSchoenfinkel cat a)
instance Applicative (cat a) => Applicative (WrappedSchoenfinkel cat a)
instance Arrow cat => Arrow (WrappedSchoenfinkel cat)
instance ArrowApply cat => ArrowApply (WrappedSchoenfinkel cat)
instance ArrowChoice cat => ArrowChoice (WrappedSchoenfinkel cat)
instance ArrowLoop cat => ArrowLoop (WrappedSchoenfinkel cat)
instance ArrowPlus cat => ArrowPlus (WrappedSchoenfinkel cat)
instance ArrowZero cat => ArrowZero (WrappedSchoenfinkel cat)
instance Category cat => Category (WrappedSchoenfinkel cat)
instance Functor (cat a) => Functor (WrappedSchoenfinkel cat a)
instance ArrowApply cat => Schoenfinkel (WrappedSchoenfinkel cat)
instance Monad m => Schoenfinkel (Kleisli m)
instance Schoenfinkel (->)
