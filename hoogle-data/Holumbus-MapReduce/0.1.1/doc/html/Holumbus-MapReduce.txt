-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | a distributed MapReduce framework
--   
--   This package contains a library and tools for the creation of
--   distributed MapReduce applications.
@package Holumbus-MapReduce
@version 0.1.1


-- | Version : 0.1
module Holumbus.MapReduce.Types
class Hash a
hash :: (Hash a) => Int -> a -> Int
hashedPartition :: (Hash k2, Binary k2, Binary v2, NFData k2, NFData v2) => MapPartition a k2 v2
data FunctionData
TupleFunctionData :: ByteString -> FunctionData
FileFunctionData :: FileId -> FunctionData

-- | the task id (should be unique in the system)
type TaskId = Integer

-- | which type (map, combine, reduce)
data TaskType
TTSplit :: TaskType
TTMap :: TaskType
TTCombine :: TaskType
TTReduce :: TaskType
TTError :: TaskType

-- | the task state
data TaskState
TSIdle :: TaskState
TSSending :: TaskState
TSInProgress :: TaskState
TSCompleted :: TaskState
TSFinished :: TaskState
TSError :: TaskState
getNextTaskState :: TaskState -> TaskState
data TaskOutputType
TOTRawTuple :: TaskOutputType
TOTFile :: TaskOutputType

-- | the TaskData, contains all information to do the task
data TaskData
TaskData :: !JobId -> !TaskId -> !TaskType -> !TaskState -> !ByteString -> !Maybe Int -> !(Int, [FunctionData]) -> ![(Int, [FunctionData])] -> !TaskOutputType -> !ActionName -> TaskData
td_JobId :: TaskData -> !JobId
td_TaskId :: TaskData -> !TaskId
td_Type :: TaskData -> !TaskType
td_State :: TaskData -> !TaskState
td_Option :: TaskData -> !ByteString
td_PartValue :: TaskData -> !Maybe Int
td_Input :: TaskData -> !(Int, [FunctionData])
td_Output :: TaskData -> ![(Int, [FunctionData])]
td_OutputType :: TaskData -> !TaskOutputType
td_Action :: TaskData -> !ActionName

-- | the job id (should be unique in the system)
type JobId = Integer

-- | the job state
data JobState
JSPlanned :: JobState
JSIdle :: JobState
JSSplit :: JobState
JSMap :: JobState
JSCombine :: JobState
JSReduce :: JobState
JSCompleted :: JobState
JSFinished :: JobState
JSError :: JobState
getNextJobState :: JobState -> JobState
getPrevJobState :: JobState -> JobState
fromJobStatetoTaskType :: JobState -> Maybe TaskType
type OutputMap = Map JobState (AccuMap Int FunctionData)
data JobAction
JobAction :: !ActionName -> !TaskOutputType -> !Int -> JobAction
ja_Name :: JobAction -> !ActionName
ja_Output :: JobAction -> !TaskOutputType
ja_Count :: JobAction -> !Int

-- | defines a job, this is all data the user has to give to run a job
data JobInfo
JobInfo :: !String -> !ByteString -> !Maybe JobAction -> !Maybe JobAction -> !Maybe JobAction -> !Maybe JobAction -> !Maybe Int -> ![FunctionData] -> JobInfo
ji_Description :: JobInfo -> !String
ji_Option :: JobInfo -> !ByteString
ji_SplitAction :: JobInfo -> !Maybe JobAction
ji_MapAction :: JobInfo -> !Maybe JobAction
ji_CombineAction :: JobInfo -> !Maybe JobAction
ji_ReduceAction :: JobInfo -> !Maybe JobAction
ji_NumOfResults :: JobInfo -> !Maybe Int
ji_Input :: JobInfo -> ![FunctionData]

-- | the job data, include the user-input and some additional control-data
data JobData
JobData :: JobId -> JobState -> OutputMap -> JobInfo -> UTCTime -> UTCTime -> JobResultContainer -> JobData
jd_JobId :: JobData -> JobId
jd_State :: JobData -> JobState
jd_OutputMap :: JobData -> OutputMap
jd_Info :: JobData -> JobInfo
jd_startTime :: JobData -> UTCTime
jd_endTime :: JobData -> UTCTime
jd_Result :: JobData -> JobResultContainer
data JobResultContainer
JobResultContainer :: (MVar JobResult) -> JobResultContainer

-- | the result of the job, given by the master
data JobResult
JobResult :: [FunctionData] -> JobResult
jr_Output :: JobResult -> [FunctionData]
type ActionName = String
type ActionInfo = String

-- | the ActionEnvironment contains all data that might be needed during an
--   action. So far, it only keeps the current task data and a reference to
--   the global filesystem and the options. This is a good place to
--   implement counters for the map-reduce-system or other stuff...
data ActionEnvironment
ActionEnvironment :: TaskData -> FileSystem -> ActionEnvironment
ae_TaskData :: ActionEnvironment -> TaskData
ae_FileSystem :: ActionEnvironment -> FileSystem
mkActionEnvironment :: TaskData -> FileSystem -> ActionEnvironment
type InputReader k1 v1 = ByteString -> IO [(k1, v1)]
type OutputWriter k2 v2 = [(k2, v2)] -> IO ByteString
type OptionsDecoder a = ByteString -> a
defaultInputReader :: (NFData v1, NFData k1, Binary k1, Binary v1) => InputReader k1 v1
defaultOutputWriter :: (NFData v2, NFData k2, Binary k2, Binary v2) => OutputWriter k2 v2
defaultSplit :: (NFData k1, NFData v1) => SplitFunction a k1 v1
defaultPartition :: (Binary k2, Binary v2) => MapPartition a k2 v2
defaultMerge :: (Ord k2, Binary k2, Binary v2) => ReduceMerge a k2 v2
readConnector :: (NFData k1, NFData v1, Binary k1, Binary v1) => InputReader k1 v1 -> ActionEnvironment -> [FunctionData] -> IO [(k1, v1)]
writeConnector :: (Binary k2, Binary v2) => OutputWriter k2 v2 -> ActionEnvironment -> [(Int, [(k2, v2)])] -> IO [(Int, [FunctionData])]
data ActionConfiguration a k1 v1 k2 v2 v3 v4
ActionConfiguration :: ActionName -> ActionInfo -> OptionsEncoder a -> OptionsDecoder a -> InputEncoder k1 v1 -> OutputDecoder k2 v4 -> Maybe (SplitConfiguration a k1 v1) -> Maybe (MapConfiguration a k1 v1 k2 v2) -> Maybe (ReduceConfiguration a k2 v2 v3) -> Maybe (ReduceConfiguration a k2 v3 v4) -> ActionConfiguration a k1 v1 k2 v2 v3 v4
ac_Name :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> ActionName
ac_Info :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> ActionInfo
ac_OptEncoder :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> OptionsEncoder a
ac_OptDecoder :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> OptionsDecoder a
ac_InputEncoder :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> InputEncoder k1 v1
ac_OutputDecoder :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> OutputDecoder k2 v4
ac_Split :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> Maybe (SplitConfiguration a k1 v1)
ac_Map :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> Maybe (MapConfiguration a k1 v1 k2 v2)
ac_Combine :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> Maybe (ReduceConfiguration a k2 v2 v3)
ac_Reduce :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> Maybe (ReduceConfiguration a k2 v3 v4)
data SplitConfiguration a k1 v1
SplitConfiguration :: SplitFunction a k1 v1 -> InputReader k1 v1 -> OutputWriter k1 v1 -> SplitConfiguration a k1 v1
sc_Function :: SplitConfiguration a k1 v1 -> SplitFunction a k1 v1
sc_Reader :: SplitConfiguration a k1 v1 -> InputReader k1 v1
sc_Writer :: SplitConfiguration a k1 v1 -> OutputWriter k1 v1
data MapConfiguration a k1 v1 k2 v2
MapConfiguration :: MapFunction a k1 v1 k2 v2 -> MapPartition a k2 v2 -> InputReader k1 v1 -> OutputWriter k2 v2 -> MapConfiguration a k1 v1 k2 v2
mc_Function :: MapConfiguration a k1 v1 k2 v2 -> MapFunction a k1 v1 k2 v2
mc_Partition :: MapConfiguration a k1 v1 k2 v2 -> MapPartition a k2 v2
mc_Reader :: MapConfiguration a k1 v1 k2 v2 -> InputReader k1 v1
mc_Writer :: MapConfiguration a k1 v1 k2 v2 -> OutputWriter k2 v2
data ReduceConfiguration a k2 v3 v4
ReduceConfiguration :: ReduceMerge a k2 v3 -> ReduceFunction a k2 v3 v4 -> ReducePartition a k2 v4 -> InputReader k2 v3 -> OutputWriter k2 v4 -> ReduceConfiguration a k2 v3 v4
rc_Merge :: ReduceConfiguration a k2 v3 v4 -> ReduceMerge a k2 v3
rc_Function :: ReduceConfiguration a k2 v3 v4 -> ReduceFunction a k2 v3 v4
rc_Partition :: ReduceConfiguration a k2 v3 v4 -> ReducePartition a k2 v4
rc_Reader :: ReduceConfiguration a k2 v3 v4 -> InputReader k2 v3
rc_Writer :: ReduceConfiguration a k2 v3 v4 -> OutputWriter k2 v4
defaultActionConfiguration :: (NFData v1, NFData k1, Binary a, Binary k1, Binary v1, Binary k2, Binary v4) => ActionName -> ActionConfiguration a k1 v1 k2 v2 v3 v4
defaultSplitConfiguration :: (NFData v1, NFData k1, Binary a, Binary k1, Binary v1) => SplitConfiguration a k1 v1
defaultMapConfiguration :: (NFData v1, NFData k1, NFData v2, NFData k2, Ord k2, Binary a, Binary k1, Binary v1, Binary k2, Binary v2) => MapFunction a k1 v1 k2 v2 -> MapConfiguration a k1 v1 k2 v2
defaultReduceConfiguration :: (NFData v2, NFData k2, NFData v3, Ord k2, Binary a, Binary k2, Binary v2, Binary v3) => ReduceFunction a k2 v2 v3 -> ReduceConfiguration a k2 v2 v3
readActionConfiguration :: (Ord k2, Binary a, Show k1, Show v1, Show k2, Show v2, Show v3, Show v4, NFData k1, NFData v1, NFData k2, NFData v2, NFData v3, Binary k1, Binary v1, Binary k2, Binary v2, Binary v3, Binary v4) => ActionConfiguration a k1 v1 k2 v2 v3 v4 -> ActionData
createJobInfoFromConfiguration :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> a -> [(k1, v1)] -> [FileId] -> Int -> Int -> Int -> Int -> TaskOutputType -> JobInfo
createListsFromJobResult :: ActionConfiguration a k1 v1 k2 v2 v3 v4 -> JobResult -> ([(k2, v4)], [FileId])
data ActionData
ActionData :: ActionName -> ActionInfo -> Maybe BinarySplitAction -> Maybe BinaryMapAction -> Maybe BinaryReduceAction -> Maybe BinaryReduceAction -> ActionData
ad_Name :: ActionData -> ActionName
ad_Info :: ActionData -> ActionInfo
ad_Split :: ActionData -> Maybe BinarySplitAction
ad_Map :: ActionData -> Maybe BinaryMapAction
ad_Combine :: ActionData -> Maybe BinaryReduceAction
ad_Reduce :: ActionData -> Maybe BinaryReduceAction
getActionForTaskType :: TaskType -> ActionData -> Maybe BinaryReduceAction
type ActionMap = KeyMap ActionData

-- | general MapAction
type MapAction a k1 v1 k2 v2 = ActionEnvironment -> a -> Int -> [(k1, v1)] -> IO [(Int, [(k2, v2)])]
type MapFunction a k1 v1 k2 v2 = ActionEnvironment -> a -> k1 -> v1 -> IO [(k2, v2)]
type MapPartition a k2 v2 = ActionEnvironment -> a -> Int -> [(k2, v2)] -> IO [(Int, [(k2, v2)])]

-- | general MapAction
type ReduceAction a k2 v2 v3 = ActionEnvironment -> a -> Int -> [(k2, v2)] -> IO [(Int, [(k2, v3)])]
type ReduceMerge a k2 v2 = ActionEnvironment -> a -> [(k2, v2)] -> IO [(k2, [v2])]
type ReduceFunction a k2 v2 v3 = ActionEnvironment -> a -> k2 -> [v2] -> IO (Maybe v3)
type ReducePartition a k2 v3 = ActionEnvironment -> a -> Int -> [(k2, v3)] -> IO [(Int, [(k2, v3)])]
type SplitFunction a k1 v1 = SplitAction a k1 v1

-- | general SplitAction
type SplitAction a k1 v1 = ActionEnvironment -> a -> Int -> [(k1, v1)] -> IO [(Int, [(k1, v1)])]
instance Show JobResult
instance Show JobInfo
instance Eq JobInfo
instance Show JobAction
instance Eq JobAction
instance Show JobState
instance Eq JobState
instance Ord JobState
instance Enum JobState
instance Show TaskData
instance Eq TaskData
instance Ord TaskData
instance Show TaskOutputType
instance Read TaskOutputType
instance Eq TaskOutputType
instance Ord TaskOutputType
instance Enum TaskOutputType
instance Show TaskState
instance Eq TaskState
instance Ord TaskState
instance Enum TaskState
instance Show TaskType
instance Eq TaskType
instance Ord TaskType
instance Show FunctionData
instance Eq FunctionData
instance Ord FunctionData
instance Show ActionData
instance Key ActionData
instance Binary JobResult
instance Show JobResultContainer
instance Show JobData
instance XmlPickler JobInfo
instance Binary JobInfo
instance XmlPickler JobAction
instance Binary JobAction
instance Binary JobState
instance Binary TaskData
instance XmlPickler TaskOutputType
instance Binary TaskOutputType
instance Binary TaskState
instance Binary TaskType
instance XmlPickler FunctionData
instance Binary FunctionData
instance Hash Int


-- | Version : 0.1
module Holumbus.MapReduce.MapReduce
data MapReduceType
MRTMaster :: MapReduceType
MRTWorker :: MapReduceType
MRTClient :: MapReduceType
MRTStandalone :: MapReduceType
class (Debug mr) => MapReduce mr
closeMapReduce :: (MapReduce mr) => mr -> IO ()
getMySiteId :: (MapReduce mr) => mr -> IO SiteId
getMapReduceType :: (MapReduce mr) => mr -> IO MapReduceType
startControlling :: (MapReduce mr) => mr -> IO ()
stopControlling :: (MapReduce mr) => mr -> IO ()
isControlling :: (MapReduce mr) => mr -> IO Bool
doSingleStep :: (MapReduce mr) => mr -> IO ()
doMapReduceJob :: (MapReduce mr) => JobInfo -> mr -> IO JobResult
doMapReduce :: (MapReduce mr) => ActionConfiguration a k1 v1 k2 v2 v3 v4 -> a -> [(k1, v1)] -> [FileId] -> Int -> Int -> Int -> Int -> TaskOutputType -> mr -> IO ([(k2, v4)], [FileId])
instance Show MapReduceType
instance Eq MapReduceType
instance Ord MapReduceType
instance Enum MapReduceType


-- | Version : 0.1
module Holumbus.Distribution.Master
class (MapReduce m) => MasterClass m
closeMaster :: (MasterClass m) => m -> IO ()
receiveTaskCompleted :: (MasterClass m) => TaskData -> m -> IO m
receiveTaskError :: (MasterClass m) => TaskData -> m -> IO m


-- | Version : 0.1
module Holumbus.Distribution.Worker
class WorkerClass w
closeWorker :: (WorkerClass w) => w -> IO ()
startTask :: (WorkerClass w) => TaskData -> w -> IO w
stopTask :: (WorkerClass w) => TaskId -> w -> IO w
stopAllTasks :: (WorkerClass w) => w -> IO w
getActionNames :: (WorkerClass w) => w -> IO [ActionName]


-- | Version : 0.1
module Holumbus.MapReduce.DaemonInterface

-- | runs the user interface... just add an fileSystem an a fancy
--   version-number
runDaemon :: (MapReduce mr) => mr -> String -> Int -> String -> IO ()


-- | Version : 0.1
module Holumbus.Distribution.Messages
type WorkerId = Int
data MasterRequestMessage
MReqTaskCompleted :: TaskData -> MasterRequestMessage
MReqTaskError :: TaskData -> MasterRequestMessage
MReqStartControlling :: MasterRequestMessage
MReqStopControlling :: MasterRequestMessage
MReqIsControlling :: MasterRequestMessage
MReqSingleStep :: MasterRequestMessage
MReqPerformJob :: JobInfo -> MasterRequestMessage
MReqUnknown :: MasterRequestMessage
data MasterResponseMessage
MRspSuccess :: MasterResponseMessage
MRspIsControlling :: Bool -> MasterResponseMessage
MRspResult :: JobResult -> MasterResponseMessage
MRspError :: String -> MasterResponseMessage
MRspUnknown :: MasterResponseMessage
data WorkerRequestMessage
WReqStartTask :: TaskData -> WorkerRequestMessage
WReqStopTask :: TaskId -> WorkerRequestMessage
WReqStopAllTasks :: WorkerRequestMessage
WReqGetActionNames :: WorkerRequestMessage
WReqUnknown :: WorkerRequestMessage
data WorkerResponseMessage
WRspSuccess :: WorkerResponseMessage
WRspGetActionNames :: [ActionName] -> WorkerResponseMessage
WRspError :: String -> WorkerResponseMessage
WRspUnknown :: WorkerResponseMessage

-- | Sends a request to the server (stream) and handles the response and
--   all error cases. Very helpful when simulating a request response
--   scheme with the mailboxes.
performPortAction :: (Show a, Binary a, Show b, Binary b, RspMsg b) => Port a -> Stream b -> Int -> a -> (b -> IO (Maybe c)) -> IO c
instance Show WorkerResponseMessage
instance Show WorkerRequestMessage
instance Show MasterResponseMessage
instance Show MasterRequestMessage
instance Binary WorkerResponseMessage
instance RspMsg WorkerResponseMessage
instance Binary WorkerRequestMessage
instance Binary MasterResponseMessage
instance RspMsg MasterResponseMessage
instance Binary MasterRequestMessage


-- | Version : 0.1
module Holumbus.Distribution.Master.MasterPort
data MasterPort

-- | Creates a new ControllerPort
newMasterPort :: StreamName -> Maybe SocketId -> IO MasterPort
newMasterPortFromServerPort :: ServerPort -> MasterPort
instance Show MasterPort
instance MasterClass MasterPort
instance MapReduce MasterPort
instance Debug MasterPort


-- | Version : 0.1
module Holumbus.Distribution.Worker.WorkerPort
data WorkerPort
WorkerPort :: ClientPort -> WorkerPort

-- | Creates a new NodePort.
newWorkerPort :: ClientPort -> WorkerPort
instance Show WorkerPort
instance Debug WorkerPort
instance WorkerClass WorkerPort


-- | Version : 0.1
module Holumbus.MapReduce.TaskProcessor

-- | a function for responding a
type TaskResultFunction = TaskData -> IO Bool
type TaskProcessor = MVar TaskProcessorData
printTaskProcessor :: TaskProcessor -> IO String

-- | creates a new TaskProcessor
newTaskProcessor :: IO TaskProcessor
closeTaskProcessor :: TaskProcessor -> IO ()

-- | add a filesystem-instance to the TaskProcessor
setFileSystemToTaskProcessor :: FileSystem -> TaskProcessor -> IO ()

-- | adds an ActionMap to the TaskProcessor
setActionMap :: KeyMap ActionData -> TaskProcessor -> IO ()
setTaskCompletedHook :: TaskResultFunction -> TaskProcessor -> IO ()
setTaskErrorHook :: TaskResultFunction -> TaskProcessor -> IO ()
startTaskProcessor :: TaskProcessor -> IO ()
stopTaskProcessor :: TaskProcessor -> IO ()
listTaskIds :: TaskProcessor -> IO [TaskId]

-- | Lists all Actions with Name, Descrition and so on
getActions :: TaskProcessor -> IO [ActionData]

-- | Lists all Names of the Actions
getActionNames :: TaskProcessor -> IO [ActionName]

-- | adds a Task to the TaskProcessor, the execution might be later
startTask :: TaskData -> TaskProcessor -> IO ()
stopTask :: TaskId -> TaskProcessor -> IO ()
stopAllTasks :: TaskProcessor -> IO ()
instance Typeable TaskException
instance Typeable TaskProcessorException
instance Show TaskProcessorData
instance Show TaskException
instance Show TaskProcessorException
instance Exception TaskException
instance Exception TaskProcessorException
instance Show TaskProcessorFunctions


-- | Version : 0.1
module Holumbus.Distribution.Worker.WorkerData
data WorkerData
newWorker :: FileSystem -> ActionMap -> StreamName -> Maybe SocketId -> IO WorkerData
instance Debug WorkerData
instance WorkerClass WorkerData


-- | Version : 0.1
module Holumbus.Distribution.Master.MasterState
type State = ([ActionName], WorkerPort)
type States = Map IdType State
type StateResource = FilePath
addResource :: FilePath -> IO ()
delResource :: FilePath -> IO ()
addWorker :: IdType -> State -> IO ()
delWorker :: IdType -> IO ()


-- | Version : 0.1
module Holumbus.MapReduce.JobController
data TaskSendResult
TSRSend :: TaskSendResult
TSRNotSend :: TaskSendResult
TSRError :: TaskSendResult
type TaskSendFunction = TaskData -> IO (TaskSendResult)
type JobController = MVar JobControllerData
printJobController :: JobController -> IO String
newJobController :: IO JobController
closeJobController :: JobController -> IO ()
setFileSystemToJobController :: FileSystem -> JobController -> IO ()
setTaskSendHook :: TaskSendFunction -> JobController -> IO ()
startJobController :: JobController -> IO ()
stopJobController :: JobController -> IO ()
isJobControllerRunning :: JobController -> IO Bool
singleStepJobControlling :: JobController -> IO ()
performJob :: JobInfo -> JobController -> IO JobResult
setTaskCompleted :: JobController -> TaskData -> IO ()
setTaskError :: JobController -> TaskData -> IO ()
instance Typeable JobControllerException
instance Show JobControllerException
instance Show JobControllerData
instance Show TaskSendResult
instance Eq TaskSendResult
instance Ord TaskSendResult
instance Enum TaskSendResult
instance Exception JobControllerException
instance Show JobControlFunctions


-- | Version : 0.1
module Holumbus.Distribution.Master.MasterData
data MasterData
newMaster :: FileSystem -> Bool -> StreamName -> Maybe PortNumber -> IO MasterData
instance Debug MasterData
instance MasterClass MasterData
instance MapReduce MasterData


-- | Version : 0.1
module Holumbus.Standalone.SMapReduce
data SMapReduce
class (Debug mr) => MapReduce mr
closeMapReduce :: (MapReduce mr) => mr -> IO ()
getMySiteId :: (MapReduce mr) => mr -> IO SiteId
getMapReduceType :: (MapReduce mr) => mr -> IO MapReduceType
startControlling :: (MapReduce mr) => mr -> IO ()
stopControlling :: (MapReduce mr) => mr -> IO ()
isControlling :: (MapReduce mr) => mr -> IO Bool
doSingleStep :: (MapReduce mr) => mr -> IO ()
doMapReduceJob :: (MapReduce mr) => JobInfo -> mr -> IO JobResult
doMapReduce :: (MapReduce mr) => ActionConfiguration a k1 v1 k2 v2 v3 v4 -> a -> [(k1, v1)] -> [FileId] -> Int -> Int -> Int -> Int -> TaskOutputType -> mr -> IO ([(k2, v4)], [FileId])
data SMRConf
defaultStandaloneConfig :: SMRConf
newSMapReduce :: FileSystem -> ActionMap -> SMRConf -> IO SMapReduce
instance MapReduce SMapReduce
instance Debug SMapReduce
instance Show SMapReduce


-- | Version : 0.1
module Holumbus.MapReduce.UserInterface

-- | runs the user interface... just add an fileSystem an a fancy
--   version-number
runUI :: (MapReduce mr) => mr -> String -> IO ()


-- | Version : 0.1
module Holumbus.MapReduce.DaemonInterfaceWithFS

-- | runs the user interface... just add an fileSystem an a fancy
--   version-number
runDaemon :: (MapReduce mr) => (mr, FileSystem) -> String -> Int -> String -> IO ()


-- | Version : 0.1
module Holumbus.Distribution.DMapReduce
data DMapReduce
class (Debug mr) => MapReduce mr
closeMapReduce :: (MapReduce mr) => mr -> IO ()
getMySiteId :: (MapReduce mr) => mr -> IO SiteId
getMapReduceType :: (MapReduce mr) => mr -> IO MapReduceType
startControlling :: (MapReduce mr) => mr -> IO ()
stopControlling :: (MapReduce mr) => mr -> IO ()
isControlling :: (MapReduce mr) => mr -> IO Bool
doSingleStep :: (MapReduce mr) => mr -> IO ()
doMapReduceJob :: (MapReduce mr) => JobInfo -> mr -> IO JobResult
doMapReduce :: (MapReduce mr) => ActionConfiguration a k1 v1 k2 v2 v3 v4 -> a -> [(k1, v1)] -> [FileId] -> Int -> Int -> Int -> Int -> TaskOutputType -> mr -> IO ([(k2, v4)], [FileId])
data DMRMasterConf
DMRMasterConf :: Bool -> StreamName -> Maybe PortNumber -> DMRMasterConf
msc_StartControlling :: DMRMasterConf -> Bool
msc_StreamName :: DMRMasterConf -> StreamName
msc_PortNumber :: DMRMasterConf -> Maybe PortNumber
defaultMRMasterConfig :: DMRMasterConf
data DMRWorkerConf
DMRWorkerConf :: StreamName -> Maybe SocketId -> DMRWorkerConf
woc_StreamName :: DMRWorkerConf -> StreamName
woc_SocketId :: DMRWorkerConf -> Maybe SocketId
defaultMRWorkerConfig :: DMRWorkerConf
data DMRClientConf
DMRClientConf :: StreamName -> Maybe SocketId -> DMRClientConf
clc_StreamName :: DMRClientConf -> StreamName
clc_SocketId :: DMRClientConf -> Maybe SocketId
defaultMRClientConfig :: DMRClientConf
mkMapReduceMaster :: FileSystem -> DMRMasterConf -> IO DMapReduce
mkMapReduceWorker :: FileSystem -> ActionMap -> DMRWorkerConf -> IO DMapReduce
mkMapReduceClient :: DMRClientConf -> IO DMapReduce
instance MapReduce DMapReduce
instance Debug DMapReduce
instance Show DMapReduce


-- | Version : 0.1
module Holumbus.Distribution.SimpleDMapReduceIO
type MapFunction a k1 v1 k2 v2 = ActionEnvironment -> a -> k1 -> v1 -> IO [(k2, v2)]
type ReduceFunction a k2 v2 v3 = ActionEnvironment -> a -> k2 -> [v2] -> IO (Maybe v3)
client :: (Show k1, Show k2, Show v1, Show v2, Show v3, Show v4, Binary v1, Binary v3, Binary v2, Binary v4, Binary a, Binary k1, Binary k2, NFData k1, NFData k2, NFData v1, NFData v4, NFData v2, NFData v3, Ord k2, Hash k1, Hash k2) => MapFunction a k1 v1 k2 v2 -> ReduceFunction a k2 v3 v4 -> a -> (Int, Int, Int) -> [[(k1, v1)]] -> IO [(k2, v4)]
worker :: (Show k1, Show k2, Show v1, Show v2, Hash k1, Hash k2, Binary a, NFData k1, NFData k2, Ord k2, Binary k1, Binary k2, NFData v1, NFData v4, NFData v2, NFData v3, Binary v1, Binary v3, Binary v2, Binary v4, Show v4, Show v3) => MapFunction a k1 v1 k2 v2 -> ReduceFunction a k2 v3 v4 -> [(String, Priority)] -> IO ()
partition' :: [a] -> [[a]] -> [[a]]

-- | Priorities are used to define how important a log messgae is. Users
--   can filter log messages based on priorities.
--   
--   These have their roots on the traditional syslog system. The standard
--   definitions are given below, but you are free to interpret them
--   however you like. They are listed here in ascending importance order.
data Priority :: *

-- | Debug messages
DEBUG :: Priority

-- | Information
INFO :: Priority

-- | Normal runtime conditions
NOTICE :: Priority

-- | General Warnings
WARNING :: Priority

-- | General Errors
ERROR :: Priority

-- | Severe situations
CRITICAL :: Priority

-- | Take immediate action
ALERT :: Priority

-- | System is unusable
EMERGENCY :: Priority
putTimeStamp :: String -> IO ()
