-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Linear range-min algorithms.
--   
--   Rapidly (in linear time) preprocesses a vector so that the minimum
--   element of any given subrange can be looked up in constant time.
--   
--   This implementation is based on an algorithm of Fischer and Heun,
--   which can be found at <a>http://dx.doi.org/10.1007/11780441_5</a>.
--   Despite being written entirely in Haskell (and maintaining referential
--   transparency internally), it is competitive against the C++
--   implementation written by Fischer and Heun themselves (included in the
--   tarball), especially when compiled with LLVM.
--   
--   Depending on the target system, this library compiled with -fasm
--   approximately ties with the original authors' C++ implementation
--   compiled with -O3 -funroll-loops. With -fllvm -optlc-O3, this library
--   has been observed to beat the same C++ implementation by 20-30%.
--   
--   Internally, this library rolls its own stream fusion system, avoiding
--   the <tt>vector</tt> package's issues with duplicated index variables
--   and providing a few other special features. This package's API does,
--   however, fuse (to the extent possible) with input vectors using the
--   <tt>vector</tt> package fusion system. In particular, it automagically
--   recognizes input vectors whose element types have a natural
--   order-preserving injection into <tt>Int</tt>, converts them, and uses
--   the specialized range-min implementation for <tt>Int</tt> vectors. See
--   <a>Data.RangeMin</a> for more details.
@package rangemin
@version 2.2.2

module Data.RangeMin.Cartesian

-- | <i>O(n)</i>. Given a comparison function and a lookup function, this
--   function constructs a <tt><a>Vector</a> <a>Int</a></tt> with the
--   property that the minimum index between <tt>i</tt> and <tt>j</tt> in
--   the result vector is the same as the minimum index between <tt>i</tt>
--   and <tt>j</tt> from the original elements. (In both cases, ties are
--   broken by which index comes first.)
--   
--   This allows us to use the specialized range-min implementation on
--   <tt><a>Vector</a> <a>Int</a></tt>, even for other <a>Vector</a>
--   implementations, other element types, and other comparison functions.
--   
--   Internally, this function constructs the Cartesian tree of the input
--   vector (implicitly, to save memory and stack space), and returns the
--   vector of the depth of each element in the tree.
equivVectorBy :: Vector v a => LEq a -> v a -> Vector Int


-- | Consider the following function, which, given <tt>i</tt> and
--   <tt>k</tt>, finds the index of the minimum element in the range
--   <tt>i..i+k-1</tt>.
--   
--   <pre>
--   rangeMin :: <a>Vector</a> v a =&gt; (a -&gt; a -&gt; <a>Ordering</a>) -&gt; v a -&gt; <a>Int</a> -&gt; <a>Int</a> -&gt; <a>Int</a>
--   rangeMin cmp xs i k = i + <a>minIndexBy</a> cmp (<a>slice</a> i k xs)
--   </pre>
--   
--   This module implements functions which, given a fixed comparison
--   function, preprocess an array in <i>O(n)</i> time to support queries
--   of this form in <i>O(1)</i> time.
--   
--   For all methods in this module, ties are broken by which element comes
--   first in the array.
--   
--   When certain methods are called on an element type which has a
--   natural, order-preserving injection into <a>Int</a> -- specifically,
--   on instances of <a>Injective</a> -- this module is smart enough to
--   (fusibly) convert the vector into a <tt><a>Vector</a> <a>Int</a></tt>,
--   and to use <a>unsafeIntRangeMin</a> or <a>intRangeMin</a> as
--   appropriate. Though you cannot make your own instances of
--   <a>Injective</a>, <a>unsafeInjectRangeMin</a> and
--   <a>injectRangeMin</a> work the same way.
module Data.RangeMin

-- | A range min function. Given an index <tt>i</tt> and a length
--   <tt>m</tt>, returns the minimum element in the range
--   <tt>i..i+m-1</tt>.
type RangeMin = Index -> Length -> Index

-- | A function of type <tt><a>LEq</a> a</tt> is used as if it were
--   <tt>(<a>&lt;=</a>)</tt> for comparison purposes. This function
--   <i>must</i> be a total ordering.
type LEq a = a -> a -> Bool

-- | The type of a vector index.
type Index = Int

-- | The type of the length of a vector.
type Length = Int

-- | <i>O(n)</i>. Returns a range-min function on the vector, under the
--   natural ordering of <a>Int</a>. This function can be, depending on the
--   <a>Vector</a> implementation, three to four times as fast as
--   <tt><tt>unsafeVecRangeMinBy</tt> (<a>&lt;=</a>)</tt>.
--   
--   Example:
--   
--   <pre>
--   <a>unsafeIntRangeMin</a> (<a>fromList</a> [0,7,-10,4,5,4]) 0 6 == 2
--   <a>unsafeIntRangeMin</a> (<a>fromList</a> [0,7,-10,4,5,4]) 2 3 == 2
--   <a>unsafeIntRangeMin</a> (<a>fromList</a> [0,7,-10,4,5,4]) 3 3 == 3
--   </pre>
--   
--   The returned function <i>does not</i> do bounds checks. If <tt>n</tt>
--   is the length of the vector, and <tt>i</tt> and <tt>m</tt> are passed
--   as arguments to the <a>RangeMin</a>, then if <tt>i &lt; 0</tt>, <tt>m
--   &lt; 1</tt>, or <tt>i + m &gt; n</tt>, a segfault may occur.
unsafeIntRangeMin :: Vector Int -> RangeMin

-- | <i>O(n)</i>. Returns a range-min function on the vector, with the
--   natural ordering of <a>Int</a>. This function can be, depending on the
--   <a>Vector</a> implementation, three to four times as fast as
--   <tt><tt>vecRangeMinBy</tt> (<a>&lt;=</a>)</tt>.
--   
--   Equivalent to <a>unsafeIntRangeMin</a>, except that the returned
--   function <i>does</i> do bounds checks. When it receives a bad query,
--   it throws an <a>ArrayException</a>.
intRangeMin :: Vector Int -> RangeMin

-- | <i>O(n)</i>. Returns a range-min function on the vector, under the
--   specified ordering. The returned function <i>does not</i> do bounds
--   checks; see <a>unsafeIntRangeMin</a> for details.
--   
--   Example:
--   
--   <pre>
--   -- Finding the element with the <i>largest absolute value</i> in a subrange.
--   <a>unsafeVecRangeMinBy</a> (\ i j -&gt; <a>abs</a> i <a>&gt;=</a> <a>abs</a> j) (<tt>PV.fromList</tt> [0,7,-10,4,5,4]) 0 6 == 2
--   <a>unsafeVecRangeMinBy</a> (\ i j -&gt; <a>abs</a> i <a>&gt;=</a> <a>abs</a> j) (<tt>PV.fromList</tt> [0,7,-10,4,5,4]) 2 3 == 2
--   <a>unsafeVecRangeMinBy</a> (\ i j -&gt; <a>abs</a> i <a>&gt;=</a> <a>abs</a> j) (<tt>PV.fromList</tt> [0,7,-10,4,5,4]) 3 3 == 4
--   </pre>
unsafeVecRangeMinBy :: Vector v a => LEq a -> v a -> RangeMin

-- | <i>O(n)</i>. Equivalent to <tt><a>unsafeVecRangeMinBy</a>
--   (<a>&lt;=</a>)</tt>. Specialized for instances of <a>Injective</a>.
--   The returned function <i>does not</i> do bounds checks; see
--   <a>unsafeIntRangeMin</a> for details.
--   
--   Example:
--   
--   <pre>
--   -- In reality, these would be rewritten into calls to <a>unsafeIntRangeMin</a>, since <a>Char</a> is an
--   -- instance of <a>Injective</a>.
--   <a>unsafeVecRangeMin</a> (<tt>PV.fromList</tt> "banana") 0 6 == 1
--   <a>unsafeVecRangeMin</a> (<tt>PV.fromList</tt> "banana") 1 1 == 1
--   <a>unsafeVecRangeMin</a> (<tt>PV.fromList</tt> "banana") 3 3 == 3
--   </pre>
unsafeVecRangeMin :: (Vector v a, Ord a) => v a -> RangeMin

-- | <i>O(n)</i>. Equivalent to <tt><a>unsafeVecRangeMinBy</a>
--   (<a>&gt;=</a>)</tt>. Specialized for instances of <a>Injective</a>.
--   The returned function <i>does not</i> do bounds checks; see
--   <a>unsafeIntRangeMin</a> for details.
--   
--   Example:
--   
--   <pre>
--   -- In reality, these would be rewritten into calls to <a>unsafeIntRangeMin</a>, since <a>Char</a>
--   -- is an instance of <a>Injective</a>.
--   <a>unsafeVecRangeMax</a> (<tt>PV.fromList</tt> "banana") 0 6 == 2
--   <a>unsafeVecRangeMax</a> (<tt>PV.fromList</tt> "banana") 1 1 == 1
--   <a>unsafeVecRangeMax</a> (<tt>PV.fromList</tt> "banana") 3 3 == 4
--   </pre>
unsafeVecRangeMax :: (Vector v a, Ord a) => v a -> RangeMin

-- | <i>O(n)</i>. Returns a range-min function on the vector, under the
--   specified ordering. The returned function <i>does</i> do bounds
--   checks; see <a>intRangeMin</a> for details.
vecRangeMinBy :: Vector v a => LEq a -> v a -> RangeMin

-- | <i>O(n)</i>. Equivalent to <tt><a>vecRangeMinBy</a>
--   (<a>&lt;=</a>)</tt>; a safer version of <a>unsafeVecRangeMin</a>.
--   Specialized for instances of <a>Injective</a>. The returned function
--   <i>does</i> do bounds checks; see <a>intRangeMin</a> for details.
vecRangeMin :: (Vector v a, Ord a) => v a -> RangeMin

-- | <i>O(n)</i>. Equivalent to <tt><a>vecRangeMinBy</a>
--   (<a>&gt;=</a>)</tt>; a safer version of <a>unsafeVecRangeMax</a>.
--   Specialized for instances of <a>Injective</a>. The returned function
--   <i>does</i> do bounds checks; see <a>intRangeMin</a> for details.
vecRangeMax :: (Vector v a, Ord a) => v a -> RangeMin

-- | <i>O(n)</i>. <tt><a>unsafeRangeMinBy</a> (&lt;=?) n look</tt> is
--   equivalent to <tt><a>unsafeVecRangeMinBy</a> (&lt;=?) (<a>generate</a>
--   n look)</tt>. The returned function <i>does not</i> do bounds checks;
--   see <tt>unsafeIntRangeMin</tt> for details.
unsafeRangeMinBy :: LEq a -> Length -> (Index -> a) -> RangeMin

-- | <i>O(n)</i>. Equivalent to <tt><a>unsafeRangeMinBy</a>
--   (<a>&lt;=</a>)</tt>. Specialized for instances of <tt>Injective</tt>.
--   The returned function <i>does not</i> do bounds checks; see
--   <tt>unsafeIntRangeMin</tt> for details.
unsafeRangeMin :: Ord a => Length -> (Index -> a) -> RangeMin

-- | <i>O(n)</i>. Equivalent to <tt><a>unsafeRangeMinBy</a>
--   (<a>&gt;=</a>)</tt>. Specialized for instances of <tt>Injective</tt>.
--   The returned function <i>does not</i> do bounds checks; see
--   <tt>unsafeIntRangeMin</tt> for details.
unsafeRangeMax :: Ord a => Length -> (Index -> a) -> RangeMin

-- | <i>O(n)</i>. <tt><a>rangeMinBy</a> (&lt;=?) n look</tt> is equivalent
--   to <tt><a>vecRangeMinBy</a> (&lt;=?) (<a>generate</a> n look)</tt>,
--   and is a safer version of <tt><a>unsafeRangeMinBy</a> (&lt;=?) n
--   look</tt>. The returned function <i>does</i> do bounds checks; see
--   <tt>intRangeMin</tt> for details.
rangeMinBy :: LEq a -> Length -> (Index -> a) -> RangeMin

-- | <i>O(n)</i>. Equivalent to <tt><a>rangeMinBy</a> (<a>&lt;=</a>)</tt>,
--   and a safer version of <a>unsafeRangeMin</a>. Specialized for
--   instances of <tt>Injective</tt>. The returned function <i>does</i> do
--   bounds checks; see <tt>intRangeMin</tt> for details.
rangeMin :: Ord a => Length -> (Index -> a) -> RangeMin

-- | <i>O(n)</i>. Equivalent to <tt><a>rangeMinBy</a> (<a>&gt;=</a>)</tt>,
--   and a safer version of <a>unsafeRangeMax</a>. Specialized for
--   instances of <tt>Injective</tt>. The returned function <i>does</i> do
--   bounds checks; see <tt>intRangeMin</tt> for details.
rangeMax :: Ord a => Length -> (Index -> a) -> RangeMin

-- | A type is an instance of <a>Injective</a> if it has a natural
--   order-preserving injection into <a>Int</a>, typically but not always
--   <a>fromEnum</a>. Functions like <tt>rangeMin</tt> and
--   <tt>unsafeVecRangeMax</tt> which use the element type's natural
--   ordering may be auto-specialized when the element type is an
--   <a>Injective</a> instance.
class Enum a => Injective a

-- | <i>O(n)</i>. <tt><a>unsafeInjectRangeMin</a> f xs</tt> is equivalent
--   to <tt><a>unsafeVecRangeMinBy</a> (\ x y -&gt; f x <a>&lt;=</a> f y)
--   xs</tt>, but is frequently much faster, fusing with the input vector
--   and converting it directly to a <tt><a>Vector</a> <a>Int</a></tt>. The
--   returned function <i>does not</i> do bounds checks; see
--   <a>unsafeIntRangeMin</a> for details.
unsafeInjectRangeMin :: Vector v a => (a -> Int) -> v a -> RangeMin

-- | <i>O(n)</i>. <tt><a>unsafeInjectRangeMax</a> f xs</tt> is equivalent
--   to <tt><a>unsafeVecRangeMinBy</a> (\ x y -&gt; f x <a>&gt;=</a> f y)
--   xs</tt>, but is frequently much faster, fusing with the input vector
--   and converting it directly to a <tt><a>Vector</a> <a>Int</a></tt>. The
--   returned function <i>does not</i> do bounds checks; see
--   <a>unsafeIntRangeMin</a> for details.
unsafeInjectRangeMax :: Vector v a => (a -> Int) -> v a -> RangeMin

-- | <i>O(n)</i>. <tt><a>injectRangeMin</a> f xs</tt> is equivalent to
--   <tt><a>vecRangeMinBy</a> (\ x y -&gt; f x <a>&lt;=</a> f y) xs</tt>,
--   but is frequently much faster, fusing with the input vector and
--   converting it directly to a <tt><a>Vector</a> <a>Int</a></tt>. The
--   returned function <i>does</i> do bounds checks; see <a>intRangeMin</a>
--   for details.
injectRangeMin :: Vector v a => (a -> Int) -> v a -> RangeMin

-- | <i>O(n)</i>. <tt><a>injectRangeMax</a> f xs</tt> is equivalent to
--   <tt><a>vecRangeMinBy</a> (\ x y -&gt; f x <a>&gt;=</a> f y) xs</tt>,
--   but is frequently much faster, fusing with the input vector and
--   converting it directly to a <tt><a>Vector</a> <a>Int</a></tt>. The
--   returned function <i>does</i> do bounds checks; see <a>intRangeMin</a>
--   for details.
injectRangeMax :: Vector v a => (a -> Int) -> v a -> RangeMin


-- | Functions for finding <i>lowest common ancestors</i> in trees in
--   <i>O(1)</i> time, with <i>O(n)</i> preprocessing.
module Data.RangeMin.LCA

-- | The type of a vector index.
type Index = Int

-- | <tt><a>lowestCommonAncestor</a> n ix tree</tt> takes a tree whose
--   nodes are mapped by <tt>ix</tt> to a unique index in the range
--   <tt>0..n-1</tt>, and returns a function which takes two indices
--   (corresponding to two nodes in the tree) and returns the label of
--   their <i>lowest common ancestor</i>.
--   
--   This takes <i>O(n)</i> preprocessing and answers queries in
--   <i>O(1)</i>, as it is an application of <a>Data.RangeMin</a>.
--   
--   For binary trees, consider using <a>Data.RangeMin.LCA.Binary</a>.
lowestCommonAncestor :: Int -> (a -> Index) -> Tree a -> Index -> Index -> a

-- | Takes a tree and indexes it in depth-first order, returning the number
--   of nodes, the indexed tree, and the lowest common ancestor function.
quickLCA :: Tree a -> (Int, Tree (Index, a), Index -> Index -> (Index, a))


-- | Functions for finding <i>lowest common ancestors</i> in binary trees
--   in <i>O(1)</i> time, with <i>O(n)</i> preprocessing.
module Data.RangeMin.LCA.Binary

-- | The type of a vector index.
type Index = Int

-- | A generic binary tree.
data BinTree a
Tip :: BinTree a
BinTree :: a -> (BinTree a) -> (BinTree a) -> BinTree a

-- | Takes a binary tree and indexes it inorder, returning the number of
--   nodes, the indexed tree, and the lowest common ancestor function.
quickLCABinary :: BinTree a -> (Int, BinTree (Index, a), Index -> Index -> (Index, a))

-- | Similar to <tt>LCA.lowestCommonAncestor</tt>, but optimized for binary
--   trees. This method can reasonably be expected to run twice as fast as
--   <tt>lowestCommonAncestor</tt>.
lcaBinary :: Int -> (a -> Index) -> BinTree a -> Index -> Index -> a
