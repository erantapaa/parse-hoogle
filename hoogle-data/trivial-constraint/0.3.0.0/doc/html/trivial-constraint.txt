-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Constraints that any type, resp. no type fulfills
--   
--   Since GHC 7.4, constraints are first-class: we have the constraint
--   kind, and thus type-classes have a kind such as <tt>* -&gt;
--   Constraint</tt>.
--   
--   These can be used as parameters to data types. They also can be
--   combined quite nicely,
--   
--   <pre>
--   type NewConstraint a = (Constraint1 a, Constraint2 a)
--   </pre>
--   
--   however you always need to start with a plain old type class when
--   building constraints.
--   
--   This library provides a type class that is not really a constraint at
--   all, so you can <a>start from zero</a> with building up a custom
--   constraint. Also its opposite (a constraint that no type can ever
--   fulfill).
@package trivial-constraint
@version 0.3.0.0


module Data.Constraint.Trivial

-- | Intended to be used as an argument for some type constructor which
--   expects kind <tt>* -&gt; Constraint</tt>, when you do not actually
--   wish to constrain anything with it.
--   
--   <tt><a>Unconstrained</a> t</tt> can always be added to the constraint
--   list of any signature, without changing anything.
class Unconstrained t

-- | This constraint can <i>never</i> be fulfilled. Might be useful e.g. as
--   a default for a class-associated constraint; this basically disables
--   any method with that constraint (so it can safely be left
--   <a>undefined</a>).
type Impossible t = HiddenEmptyClass t
instance Unconstrained t
