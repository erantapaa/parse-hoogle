-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate animated 3d objects in COLLADA
--   
--   Generate a COLLADA file with textures, materials, animations, ... It
--   can be used to visualize algorithms that produce a stream of
--   positions, see <a>http://www.youtube.com/watch?v=ZpJzG28Yv8Y</a>
@package collada-output
@version 0.6

module Graphics.Formats.Collada.Animations
attr :: String -> String -> (Element -> Element)
library_animations :: [(SID, AnimChannel)] -> [Element]
animations :: (SID, AnimChannel) -> Element
collada_array :: Show a => [a] -> [Char]

module Graphics.Formats.Collada.GenerateCollada
genCollada :: Scene -> [Animation] -> IO ()
gCollada :: Element -> Scene -> [Animation] -> IO ()

-- | The basic structure of a Collada file, contains library_... nodes,
--   where library_s are used for referencing
basicFrame :: Element -> Scene -> [Animation] -> Element

-- | Document information: author, time created ...
standardAsset :: String -> String -> Element

-- | Time according to iso 8601
time8601 :: UTCTime -> IO String

-- | Extract cameras from SceneNodes and remove duplicates
extract_cameras :: [SceneNode] -> [SceneNode]

-- | Extract lights from SceneNodes and remove duplicates
extract_lights :: [SceneNode] -> [SceneNode]

-- | Extract geometries from SceneNodes and remove duplicates
extract_geometries :: [SceneNode] -> [SceneNode]

-- | library_cameras
cam :: SceneNode -> [Element]

-- | Perpective projection: see
--   <a>http://en.wikipedia.org/wiki/Viewing_frustum</a>
cam2 :: Camera -> Element

-- | library_lights
light :: SceneNode -> [Element]
light2 :: Light -> Element

-- | library_images
im :: [SceneNode] -> [Element]
getGeometries :: SceneNode -> [Geometry]
getMeshes :: Geometry -> [Mesh]
getMaterials :: Mesh -> [Material]

-- | library_materials
mat :: [SceneNode] -> [Element]

-- | library_effects
eff :: [SceneNode] -> [Element]
effects :: (SID, Effect) -> Element
colorNodes :: Fx_common_color_type -> Element

-- | library_geometries
geo :: [SceneNode] -> [Element]
mesh_element :: Int -> Geometry -> Element
type VI = Vector (Vector Int)
tex_ar :: VI -> VI -> VI -> String -> String -> String -> (SID, Profile) -> [Element]
material :: VI -> VI -> VI -> String -> String -> String -> (SID, Profile) -> [Element]
type Point = (Float, Float, Float)
type Normal = (Float, Float, Float)
primitivesSources :: String -> String -> Vector V3 -> Vector V3 -> Mesh -> [Element]
primitives :: String -> String -> Vector V3 -> Vector V3 -> Mesh -> [Element]
triple_serialize :: Vector V3 -> [Float]
interl :: Int -> [Int]
interleave :: VI -> VI -> String
interleave3 :: VI -> VI -> VI -> String

-- | library_visual_scenes: Nested nodes with references to cameras,
--   lights, geometries, ...
visual_scene :: Scene -> Element
treeToNodes :: Scene -> Element
ttn :: String -> [(ID, Transform)] -> [Camera] -> [Geometry] -> [Light] -> [Element]
instances :: String -> String -> Element
instances_geo :: String -> Geometry -> Element
hasTextures :: (SID, Profile) -> [Bool]
transf :: (SID, Transform) -> [Element]
