-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | NCurses interface to view multiple ByteString streams in parallel.
--   
--   Output from parallel subprocesses is an ugly, many-headed beast.
--   Piping though hydra-print provides an NCurses interface to a dynamic
--   set output streams, displayed without interleaving. This is a common
--   problem, for example, with parallel compiles, or data-processing
--   scripts.
--   
--   Specifically, this small library will split the screen when
--   parallelism occurs, and unsplit it when the parallelism is finished
--   (i.e. dynamically growing and losing "heads"). The <tt>io-streams</tt>
--   library is used for all stream inputs.
@package hydra-print
@version 0.1.0.3

module Scripting.Parallel.ThreadPool

-- | A helper for parallel scripting. Run work items in parallel on N
--   worker threads (a thread pool), creating only ONE output stream per
--   worker, not one per parallel task. Specifically, each invocation of
--   the user's function is given an OutputStream that it holds a
--   <a>lock</a> on -- it is the only thread accessing that output stream.
--   
--   This function returns immediately with (1) a list of input streams
--   that will carry results on the fly, as they are produced, and (2) a
--   barrier action that waits for all parallel work to be finished and
--   yields the final results. The first list is <tt>numWorkers</tt> long,
--   and the second is <tt>numTasks</tt>.
--   
--   Additional contracts:
parForM :: Int -> [a] -> (OutputStream c -> a -> IO b) -> IO ([InputStream c], IO [b])


-- | A simple utility to multiplex of *dynamic* collection of text streams.
--   As the number of streams varies, the multiplexing of the terminal
--   output does too.
module UI.HydraPrint

-- | Takes a <i>source</i> of input streams, which may be added
--   dynamically. A stream that joins dynamically, exits once it issues an
--   end-of-stream.
--   
--   <a>hydraPrint</a> is a blocking call that doesn't return until ALL
--   streams that appear produce an end-of-stream, AND the stream-source
--   itself reaches end-of-stream.
hydraPrint :: HydraConf -> InputStream (String, InputStream ByteString) -> IO ()

-- | Take a fixed list of input streams. This variant preemptively splits
--   the screen into exactly one panel per stream.
hydraPrintStatic :: HydraConf -> [(String, InputStream ByteString)] -> IO ()
data HydraConf
HydraConf :: DeleteWinWhen -> Bool -> HydraConf
deleteWhen :: HydraConf -> DeleteWinWhen
useColor :: HydraConf -> Bool

-- | Like the name says, a default set of options for passing to
--   <a>hydraPrint</a>.
defaultHydraConf :: HydraConf

-- | How long should we wait after a stream goes dry to close the window
--   associated with it? If <a>Never</a> is selected, then the window will
--   stay until a new stream causes the screen to reconfigure, or
--   hydraPrint exits.
data DeleteWinWhen
Never :: DeleteWinWhen
After :: Seconds -> DeleteWinWhen
Immediately :: DeleteWinWhen
dbgLogLn :: String -> IO ()
instance Show a => Show (Lifted a)
instance Eq a => Eq (Lifted a)
instance Read a => Read (Lifted a)
instance Ord a => Ord (Lifted a)
instance Show Event
instance Show CWindow
