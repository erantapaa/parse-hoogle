-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A collection of rose tree structures.
--   
--   A collection of rose tree structures.
@package rose-trees
@version 0.0.1.1

module Data.Tree.Knuth
data KnuthForest a
Fork :: a -> (KnuthForest a) -> (KnuthForest a) -> KnuthForest a
node :: KnuthForest a -> a
children :: KnuthForest a -> (KnuthForest a)
siblings :: KnuthForest a -> (KnuthForest a)
Nil :: KnuthForest a
appendSibling :: KnuthForest a -> KnuthForest a -> KnuthForest a
newtype KnuthTree a
KnuthTree :: (a, KnuthForest a) -> KnuthTree a
unKnuthTree :: KnuthTree a -> (a, KnuthForest a)

-- | Breadth-first
instance Show a => Show (KnuthForest a)
instance Eq a => Eq (KnuthForest a)
instance Functor KnuthForest
instance Show a => Show (KnuthTree a)
instance Eq a => Eq (KnuthTree a)
instance Functor KnuthTree
instance Foldable KnuthTree
instance Foldable KnuthForest
instance Monoid (KnuthForest a)

module Data.Tree.Rose
class RoseTree (c :: * -> *) (u :: * -> *) (t :: * -> *) | c -> u, c -> t
(@->) :: RoseTree c u t => t a -> u (c a) -> c a
newtype PT t a
PT :: (t, Maybe a) -> PT t a
instance RoseTree KnuthForest Identity Identity
instance Default t => RoseTree (PseudoTrie t) NonEmpty (PT t)
instance RoseTree Tree [] Identity
