-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library and program to create QIF files from Rabobank CSV exports.
--   
--   The rabocsv2qif package exposes a library, Rabobank, and an
--   executable, rabocsv2qif. With the executable you can quickly create a
--   timestamped QIF file from a Rabobank CSV file with transactions. The
--   library exposes a method, toQif, that can be used to create QIF data
--   in code. It simply takes a String and returns a String.
@package rabocsv2qif
@version 1.1.5


-- | The module Rabobank has utilities to take a Rabobank CSV export file
--   of transactions, and transforming this into a QIF file ready for
--   import into your accounting software. If your accounting software
--   can't import Rabobank CSV files, most will be able to deal with QIF
--   files.
--   
--   The QIF file generated by this module will have the bare minimum
--   amount of information, namely a description, amount of money to be
--   credited or debited, account number, and the transaction date.
--   
--   This module exports two functions namely <a>toQif</a>, which is the
--   main function that will take a String of Rabobank CSV data and returns
--   a String with QIF data, and <a>baseName</a>, which will generate a
--   filename for the export file based on current date and time.
module Rabobank

-- | This function turns a string containing Rabobank CSV data to a string
--   containing QIF data, ready for writing to stdout or to a file.
toQif :: String -> String

-- | <a>baseName</a> gets the current date and time and returns an 'IO
--   String' with the timestamp and <tt>Rabobank_</tt> as the prefix. This
--   will be used as the filename (minus extension) for the exported QIF
--   file.
baseName :: IO String
instance Show Transaction
instance Show TransactionType
instance Eq TransactionType
