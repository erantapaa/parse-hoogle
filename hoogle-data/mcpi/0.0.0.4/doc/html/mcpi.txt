-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Connect to MineCraft running on a Raspberry PI.
--   
--   The MineCraft edition for Raspberry PI comes with a Java and Python
--   API. See <a>Network.MineCraft.Pi.Client</a> for a basic example.
--   
--   This is a *very* basic, and *incomplete* Haskell version. I fully
--   expect everything to change in later versions.
--   
--   A number of very simple examples are included in the examples/
--   directory, as well as a program that lets you interact with MineCraft
--   directly.
--   
--   Please see the TODO.md file in the source code for an incomplete list
--   of possible changes, and the CHANGES.md file for changes in the
--   module.
@package mcpi
@version 0.0.0.4


-- | Internal types for connecting to the Raspberry-PI version of
--   MineCraft. Most users are expected to use
--   <a>Network.MineCraft.Pi.Client</a> rather than this module, but it is
--   provided in case the former is not sufficient.
module Network.MineCraft.Pi.Client.Internal

-- | Represent a program that communicates with a MineCraft PI server.
--   
--   <i>TODO:</i> run a computation without automatically opening and
--   closing the handle.
type MCPI = ReaderT ConnInfo IO

-- | Run a Raspberry-PI program.
--   
--   An exception is raised if the server is not running, or can not be
--   contacted.
runMCPI :: MCPI a -> IO a

-- | Run a Raspberry-PI program. The flag determines whether the messages
--   sent to, and received from, the server, are printed to <tt>stderr</tt>
--   as a diagnostic.
--   
--   An exception is raised if the server is not running, or can not be
--   contacted.
runMCPI' :: Bool -> MCPI a -> IO a

-- | Run a MineCraft query, returning the response. An <tt>IOError</tt> is
--   raised if the response is <tt>Fail</tt> (this might be due to a
--   previous command failing, depending on the time taken by MineCraft to
--   respond).
query :: Query -> [Argument] -> MCPI String

-- | Run a MineCraft command.
command :: Command -> [Argument] -> MCPI ()


-- | The main interface for connecting to the Raspberry-PI version of
--   MineCraft. The <a>Network.MineCraft.Pi.Client.Internal</a> module
--   provides lower-level access in case this module in insufficient.
--   
--   There are two types of calls to MineCraft: "command" and "query".
--   Commands change the state of the server and do not return anything,
--   queries return information from the server, and presumably does not
--   change the server state. This terminology may change. At present there
--   is no check that the call succeeded.
--   
--   Example:
--   
--   In this example we move the player 10 tiles in the X direction, as
--   long as the tile is empty (there is <i>no</i> check that there is
--   anything to stand on).
--   
--   <pre>
--   {-# LANGUAGE RecordWildCards #-}
--   
--   module Main where
--   
--   import Control.Monad (when)
--   
--   import Data.MineCraft.Pi.Block 
--   import Data.MineCraft.Pi.Player
--   import Data.MineCraft.Pi.Other
--   import Data.MineCraft.Pi.Types
--   
--   import Network.MineCraft.Pi.Client
--   
--   -- | Move the player by 10 tiles in the X direction,
--   --   if it is not filled.
--   movePlayer :: MCPI ()
--   movePlayer = do
--       Pos {..} &lt;- getPlayerTile
--       let newPos = Pos (_x+10) _y _z
--       bType &lt;- getBlock newPos
--       when (bType == air) $ do
--         setPlayerTile newPos
--         chatPost "*jump*"
--   
--   main :: IO ()
--   main = runMCPI movePlayer
--   </pre>
module Network.MineCraft.Pi.Client

-- | Represent a program that communicates with a MineCraft PI server.
--   
--   <i>TODO:</i> run a computation without automatically opening and
--   closing the handle.
type MCPI = ReaderT ConnInfo IO

-- | Run a Raspberry-PI program.
--   
--   An exception is raised if the server is not running, or can not be
--   contacted.
runMCPI :: MCPI a -> IO a

-- | Convert the return value from MineCraft into a Haskell type.
class FromMineCraft a
fromMC :: FromMineCraft a => String -> a

-- | Convert a value into a form that can be sent to MineCraft.
class ToMineCraft a
toMC :: ToMineCraft a => a -> String

-- | Convert a value, but error out if it can not be converted.
eRead :: Read a => String -> a
instance (ToMineCraft a, ToMineCraft b) => ToMineCraft (a, b)
instance (FromMineCraft a, FromMineCraft b) => FromMineCraft (a, b)
instance ToMineCraft a => ToMineCraft [a]
instance FromMineCraft a => FromMineCraft [a]
instance ToMineCraft Float
instance FromMineCraft Float
instance ToMineCraft Int
instance FromMineCraft Int


-- | Useful data types. The block types should probably move to
--   <a>Data.MineCraft.Pi.Block</a>.
module Data.MineCraft.Pi.Types

-- | Represent the position of an entity. Note that we use <tt>(X,Y,Z)</tt>
--   order rather than <tt>(X,Z,Y)</tt> used by the MineCraft API.
--   
--   This *should* be replaced by one of the "standard" Haskell 3D vector
--   types.
data Pos a
Pos :: a -> a -> a -> Pos a
_x :: Pos a -> a
_y :: Pos a -> a
_z :: Pos a -> a
type IPos = Pos Int
type FPos = Pos Float

-- | Represent a block.
--   
--   We should probably combine <a>BlockType</a> and <a>BlockData</a>. I
--   have not looked to see whether it is worth using an integer (as I
--   currently do) or just an enumerated type (e.g. if there are large
--   ranges of the range 0 to 1023 that do not represent a valid block).
--   
--   Use <a>showBlock</a> for a more readable way to convert to a
--   <tt>String</tt>.
newtype BlockType
BlockType :: Word16 -> BlockType

-- | Data on a block.
newtype BlockData
BlockData :: Int -> BlockData
instance Eq a => Eq (Pos a)
instance Show a => Show (Pos a)
instance Eq BlockType
instance Ord BlockType
instance Show BlockType
instance Eq BlockData
instance Ord BlockData
instance Show BlockData
instance FromMineCraft BlockData
instance ToMineCraft BlockData
instance FromMineCraft BlockType
instance ToMineCraft BlockType
instance ToMineCraft a => ToMineCraft (Pos a)
instance FromMineCraft a => FromMineCraft (Pos a)


-- | Block handling.
--   
--   It probably makes sense for the block types in
--   <a>Data.MineCraft.Pi.Types</a> - namely <a>BlockType</a> and
--   <a>BlockData</a> to be moved into this module.
--   
--   See
--   <a>http://www.minecraftwiki.net/wiki/Data_values_(Pocket_Edition)</a>
--   and
--   <a>http://www.minecraftwiki.net/wiki/Pi_Edition_version_history</a>,
--   although I have not cross-matched and verified all this information.
module Data.MineCraft.Pi.Block

-- | What is the block at this position? See also <a>getBlockData</a>.
getBlock :: IPos -> MCPI BlockType

-- | What is the block at this position? See also <a>getBlock</a>.
getBlockData :: IPos -> MCPI (BlockType, BlockData)

-- | Get the blocks in the cuboid defined by the start and end positions.
getBlocks :: IPos -> IPos -> MCPI [BlockType]

-- | Change the block at the position. See also <a>setBlockData</a>.
setBlock :: IPos -> BlockType -> MCPI ()

-- | Change the block at the position. See also <a>setBlock</a>.
setBlockData :: IPos -> (BlockType, BlockData) -> MCPI ()

-- | Set all the blocks in the cuboid to the same type. See also
--   <a>setBlocksData</a>.
setBlocks :: IPos -> IPos -> BlockType -> MCPI ()

-- | Set all the blocks in the cuboid to the same type. See also
--   <a>setBlocks</a>.
setBlocksData :: IPos -> IPos -> (BlockType, BlockData) -> MCPI ()
showBlock :: BlockType -> String

-- | A type of a block.
air :: BlockType

-- | A type of a block.
stone :: BlockType

-- | A type of a block.
grass :: BlockType

-- | A type of a block.
dirt :: BlockType

-- | A type of a block.
cobblestone :: BlockType

-- | A type of a block.
woodPlanks :: BlockType

-- | A type of a block.
sapling :: BlockType

-- | A type of a block.
bedrock :: BlockType

-- | A type of a block.
water :: BlockType

-- | A type of a block.
waterStationary :: BlockType

-- | A type of a block.
lava :: BlockType

-- | A type of a block.
lavaStationary :: BlockType

-- | A type of a block.
sand :: BlockType

-- | A type of a block.
gravel :: BlockType

-- | A type of a block.
goldOre :: BlockType

-- | A type of a block.
ironOre :: BlockType

-- | A type of a block.
coalOre :: BlockType

-- | A type of a block.
wood :: BlockType

-- | A type of a block.
leaves :: BlockType

-- | A type of a block.
glass :: BlockType

-- | A type of a block.
lapisLazuliOre :: BlockType

-- | A type of a block.
lapisLazuliBlock :: BlockType

-- | A type of a block.
sandstone :: BlockType

-- | A type of a block.
bed :: BlockType

-- | A type of a block.
cobweb :: BlockType

-- | A type of a block.
grassTall :: BlockType

-- | A type of a block.
wool :: BlockType

-- | A type of a block.
flowerYellow :: BlockType

-- | A type of a block.
flowerCyan :: BlockType

-- | A type of a block.
mushroomBrown :: BlockType

-- | A type of a block.
mushroomRed :: BlockType

-- | A type of a block.
goldBlock :: BlockType

-- | A type of a block.
ironBlock :: BlockType

-- | A type of a block.
stoneSlabDouble :: BlockType

-- | A type of a block.
stoneSlab :: BlockType

-- | A type of a block.
brickBlock :: BlockType

-- | A type of a block.
tnt :: BlockType

-- | A type of a block.
bookshelf :: BlockType

-- | A type of a block.
mossStone :: BlockType

-- | A type of a block.
obsidian :: BlockType

-- | A type of a block.
torch :: BlockType

-- | A type of a block.
fire :: BlockType

-- | A type of a block.
stairsWood :: BlockType

-- | A type of a block.
chest :: BlockType

-- | A type of a block.
diamondOre :: BlockType

-- | A type of a block.
diamondBlock :: BlockType

-- | A type of a block.
craftingTable :: BlockType

-- | A type of a block.
farmland :: BlockType

-- | A type of a block.
furnaceInactive :: BlockType

-- | A type of a block.
furnaceActive :: BlockType

-- | A type of a block.
doorWood :: BlockType

-- | A type of a block.
ladder :: BlockType

-- | A type of a block.
stairsCobblestone :: BlockType

-- | A type of a block.
doorIron :: BlockType

-- | A type of a block.
redstoneOre :: BlockType

-- | A type of a block.
snow :: BlockType

-- | A type of a block.
ice :: BlockType

-- | A type of a block.
snowBlock :: BlockType

-- | A type of a block.
cactus :: BlockType

-- | A type of a block.
clay :: BlockType

-- | A type of a block.
sugarCane :: BlockType

-- | A type of a block.
fence :: BlockType

-- | A type of a block.
glowstoneBlock :: BlockType

-- | A type of a block.
bedrockInvisible :: BlockType

-- | A type of a block.
stoneBrick :: BlockType

-- | A type of a block.
glassPane :: BlockType

-- | A type of a block.
melon :: BlockType

-- | A type of a block.
fenceGate :: BlockType

-- | A type of a block.
glowingObsidian :: BlockType

-- | A type of a block.
netherReactorCore :: BlockType


-- | Handle the camera position.
--   
--   <i>Note:</i> At present this module does not handle multiple users.
module Data.MineCraft.Pi.Camera
setCameraNormal :: MCPI ()
setCameraThirdPerson :: MCPI ()
setCameraFixed :: MCPI ()

-- | Change the position of the camera.
setCameraPos :: IPos -> MCPI ()


-- | A mixture of routines.
module Data.MineCraft.Pi.Other

-- | Return the height of the world at this position. The spec says that
--   the input uses the <tt>(x,z)</tt> coordinates, but I am assuming this
--   is a typo and am using <tt>(x,y)</tt> instead.
--   
--   It would be easy to test.
getHeight :: IPos -> MCPI Int

-- | Send a message to MineCraft for it to display.
--   
--   There is no attempt to remove or replace invalid characters. The
--   MineCraft server API uses ASCII and it is likely that new lines are
--   not allowed in the message, although this is not specified.
chatPost :: String -> MCPI ()


-- | Players in MineCraft.
--   
--   <i>Note:</i> This module currently does not support multiple players.
module Data.MineCraft.Pi.Player

-- | Where is the user? See also <a>getPlayerPos</a>.
getPlayerTile :: MCPI IPos

-- | Where is the user? See also <a>getPlayerTile</a>.
getPlayerPos :: MCPI FPos

-- | Move the user. See also <a>setPlayerPos</a>.
setPlayerTile :: IPos -> MCPI ()

-- | Move the user. See also <a>setPlayerTile</a>.
setPlayerPos :: FPos -> MCPI ()
