-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A set data structure with approximate searching
--   
--   Burkhard-Keller trees provide an implementation of sets which apart
--   from the ordinary operations also has an approximate member search,
--   allowing you to search for elements that are of a certain distance
--   from the element you are searching for.
@package bktrees
@version 0.3.1


-- | This module exposes the internal representation of Burkhard-Keller
--   trees.
module Data.Set.BKTree.Internal

-- | The type of Burkhard-Keller trees.
data BKTree a
Node :: a -> !Int -> (IntMap (BKTree a)) -> BKTree a
Empty :: BKTree a


-- | Burkhard-Keller trees provide an implementation of sets which apart
--   from the ordinary operations also has an approximate member search,
--   allowing you to search for elements that are of a distance <tt>n</tt>
--   from the element you are searching for. The distance is determined
--   using a metric on the type of elements. Therefore all elements must
--   implement the <a>Metric</a> type class, rather than the more usual
--   <a>Ord</a>.
--   
--   Useful metrics include the manhattan distance between two points, the
--   Levenshtein edit distance between two strings, the number of edges in
--   the shortest path between two nodes in an undirected graph and the
--   Hamming distance between two binary strings. Any euclidean space also
--   has a metric. However, in this module we use int-valued metrics and
--   that's not compatible with the metrics of euclidean spaces which are
--   real-values.
--   
--   The worst case complexity of many of these operations is quite bad,
--   but the expected behavior varies greatly with the metric. For example,
--   the discrete metric (<tt>distance x y | y == x = 0 | otherwise =
--   1</tt>) makes BK-trees behave abysmally. The metrics mentioned above
--   should give good performance characteristics.
module Data.Set.BKTree

-- | The type of Burkhard-Keller trees.
data BKTree a

-- | A type is <a>Metric</a> if is has a function <a>distance</a> which has
--   the following properties:
--   
--   <ul>
--   <li><pre><a>distance</a> x y &gt;= 0</pre></li>
--   <li><tt><a>distance</a> x y == 0</tt> if and only if <tt>x ==
--   y</tt></li>
--   <li><pre><a>distance</a> x y == <a>distance</a> y x</pre></li>
--   <li><pre><a>distance</a> x z &lt;= <a>distance</a> x y +
--   <a>distance</a> y z</pre></li>
--   </ul>
--   
--   All types of elements to <a>BKTree</a> must implement <a>Metric</a>.
--   
--   This definition of a metric deviates from the mathematical one in that
--   it returns an integer instead of a real number. The reason for
--   choosing integers is that I wanted to avoid the rather unpredictable
--   rounding of floating point numbers.
class Eq a => Metric a
distance :: Metric a => a -> a -> Int

-- | Test if the tree is empty.
null :: BKTree a -> Bool

-- | Size of the tree.
size :: BKTree a -> Int

-- | The empty tree.
empty :: BKTree a

-- | Constructs a tree from a list
fromList :: Metric a => [a] -> BKTree a

-- | The tree with a single element
singleton :: a -> BKTree a

-- | Inserts an element into the tree. If an element is inserted several
--   times it will be stored several times.
insert :: Metric a => a -> BKTree a -> BKTree a

-- | Checks whether an element is in the tree.
member :: Metric a => a -> BKTree a -> Bool

-- | Approximate searching. <tt><a>memberDistance</a> n a tree</tt> will
--   return true if there is an element in <tt>tree</tt> which has a
--   <a>distance</a> less than or equal to <tt>n</tt> from <tt>a</tt>.
memberDistance :: Metric a => Int -> a -> BKTree a -> Bool

-- | Removes an element from the tree. If an element occurs several times
--   in the tree then only one occurrence will be deleted.
delete :: Metric a => a -> BKTree a -> BKTree a

-- | Merges two trees
union :: Metric a => BKTree a -> BKTree a -> BKTree a

-- | Merges several trees
unions :: Metric a => [BKTree a] -> BKTree a

-- | Returns all the elements of the tree
elems :: BKTree a -> [a]

-- | <tt><a>elemsDistance</a> n a tree</tt> returns all the elements in
--   <tt>tree</tt> which are at a <a>distance</a> less than or equal to
--   <tt>n</tt> from the element <tt>a</tt>.
elemsDistance :: Metric a => Int -> a -> BKTree a -> [a]

-- | <tt><a>closest</a> a tree</tt> returns the element in <tt>tree</tt>
--   which is closest to <tt>a</tt> together with the distance. Returns
--   <tt>Nothing</tt> if the tree is empty.
closest :: Metric a => a -> BKTree a -> Maybe (a, Int)
instance Eq a => Metric [a]
instance Metric Char
instance Metric Integer
instance Metric Int
