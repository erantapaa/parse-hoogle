-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Yesod library for MangoPay API access
--   
@package yesod-mangopay
@version 1.11.2


-- | utilities functions that could be useful
module Yesod.MangoPay.Util

-- | day to posix time
day2Posix :: Day -> POSIXTime

-- | posix time to Day
posix2Day :: POSIXTime -> Day


-- | typeclasses and helpers to access MangoPay from Yesod
module Yesod.MangoPay

-- | The <a>YesodMangoPay</a> class for foundation datatypes that support
--   running <a>MangoPayT</a> actions.
class YesodMangoPay site where mpUseSandbox _ = True
mpCredentials :: YesodMangoPay site => site -> Credentials
mpHttpManager :: YesodMangoPay site => site -> Manager
mpUseSandbox :: YesodMangoPay site => site -> Bool
mpToken :: YesodMangoPay site => site -> IORef (Maybe MangoPayToken)

-- | Run a <a>MangoPayT</a> action inside a <a>GHandler</a> using your
--   credentials.
runYesodMPT :: (MonadHandler m, MPUsableMonad m, HandlerSite m ~ site, YesodMangoPay site) => MangoPayT m a -> m a

-- | Run a <a>MangoPayT</a>, given any instance of YesodMangoPay.
runMPT :: (MPUsableMonad m, YesodMangoPay site) => site -> MangoPayT m a -> m a

-- | the MangoPay access token, valid for a certain time only
data MangoPayToken
MangoPayToken :: AccessToken -> UTCTime -> MangoPayToken

-- | opaque token
mptToken :: MangoPayToken -> AccessToken

-- | expiration date
mptExpires :: MangoPayToken -> UTCTime

-- | is the given token still valid (True) or has it expired (False)?
isTokenValid :: MonadResource m => MangoPayToken -> m Bool

-- | get the currently stored token if we have one and it's valid, or
--   Nothing otherwise
getTokenIfValid :: (YesodMangoPay site, MonadResource m) => site -> m (Maybe MangoPayToken)

-- | get a valid token, which could be one we had from before, or a new one
getValidToken :: (YesodMangoPay site, MPUsableMonad m) => site -> m (Maybe AccessToken)

-- | Same as <a>runYesodMPT</a>: runs a MangoPayT computation, but tries to
--   reuse the current token if valid.
runYesodMPTToken :: (MonadHandler m, MPUsableMonad m, HandlerSite m ~ site, YesodMangoPay site) => (AccessToken -> MangoPayT m a) -> m a

-- | Same as <a>runMPT</a>: runs a MangoPayT computation, but tries to
--   reuse the current token if valid.
runMPTToken :: (MPUsableMonad m, YesodMangoPay site) => site -> (AccessToken -> MangoPayT m a) -> m a

-- | register callbacks for each event type on the same url mango pay does
--   not let register two hooks for the same event, so we replace existing
--   ones
registerAllMPCallbacks :: (MonadHandler m, MPUsableMonad m, HandlerSite m ~ site, YesodMangoPay site) => Route (HandlerSite m) -> m ()

-- | register callbacks for each event type on the same url mango pay does
--   not let register two hooks for the same event, so we replace existing
--   ones
registerAllMPCallbacksToURL :: (MPUsableMonad m, YesodMangoPay site) => site -> Text -> m [Hook]

-- | register a call back using the given route
registerMPCallback :: (MonadHandler m, MPUsableMonad m, HandlerSite m ~ site, YesodMangoPay site) => Route (HandlerSite m) -> EventType -> Maybe Text -> m (AccessToken -> MangoPayT m Hook)

-- | parse a event from a notification callback
parseMPNotification :: (MonadHandler m, HandlerSite m ~ site) => m Event

-- | catches any exception that the MangoPay library may throw and deals
--   with it in a error handler
catchMP :: MonadBaseControl IO m => m a -> (MpException -> m a) -> m a
instance PersistFieldSql KindOfAuthentication
instance PersistField KindOfAuthentication
