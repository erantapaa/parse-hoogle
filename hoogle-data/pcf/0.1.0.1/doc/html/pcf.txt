-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A one file compiler for PCF
--   
@package pcf
@version 0.1.0.1

module Language.Pcf
data Ty
Arr :: Ty -> Ty -> Ty
Nat :: Ty
data Exp a
V :: a -> Exp a
App :: (Exp a) -> (Exp a) -> Exp a
Ifz :: (Exp a) -> (Exp a) -> (Scope () Exp a) -> Exp a
Lam :: Ty -> (Scope () Exp a) -> Exp a
Fix :: Ty -> (Scope () Exp a) -> Exp a
Suc :: (Exp a) -> Exp a
Zero :: Exp a

-- | Given an expression where free variables are integers, convert it to
--   C. This function doesn't include all of the runtime system in the
--   translation unit which makes it unsuitable for running all on its own.
--   It's primarly for inspecting the copmiled result of a given
--   expression.
compile :: Exp Integer -> Maybe CTranslUnit

-- | Compiles ane expression using <a>compile</a>. If we can compile
--   program this function returns an <tt>Just s</tt> action which returns
--   this where <tt>s</tt> is a runnable C program which outputs the
--   result. If there was a type error, this gives back <a>Nothing</a>.
output :: Exp Integer -> IO (Maybe String)
instance Eq Ty
instance Eq a => Eq (Exp a)
instance Functor Exp
instance Foldable Exp
instance Traversable Exp
instance Eq a => Eq (ExpC a)
instance Functor ExpC
instance Foldable ExpC
instance Traversable ExpC
instance Eq a => Eq (ExpL a)
instance Functor ExpL
instance Foldable ExpL
instance Traversable ExpL
instance Eq a => Eq (BindL a)
instance Functor BindL
instance Foldable BindL
instance Traversable BindL
instance Eq BindTy
instance Eq a => Eq (FauxC a)
instance Functor FauxC
instance Foldable FauxC
instance Traversable FauxC
instance Eq a => Eq (BindFC a)
instance Functor BindFC
instance Foldable BindFC
instance Traversable BindFC
instance Eq a => Eq (FauxCTop a)
instance Functor FauxCTop
instance Foldable FauxCTop
instance Traversable FauxCTop
instance Monad FauxC
instance Applicative FauxC
instance Eq1 FauxC
instance Monad ExpL
instance Applicative ExpL
instance Eq1 ExpL
instance Monad ExpC
instance Applicative ExpC
instance Eq1 ExpC
instance Monad Exp
instance Applicative Exp
instance Eq1 Exp
