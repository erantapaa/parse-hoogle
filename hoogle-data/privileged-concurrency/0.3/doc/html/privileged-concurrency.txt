-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Provides privilege separated versions of the concurrency primitives.
--   
--   Any MVar or other concurrency primitive can be read by or written to
--   any function which recieves it as a value. This package provides
--   read-only and write-only versions of Chan, MVar, TChan, TMVar, and
--   TVar. Functions which use these versions receive permission to read,
--   write, or both based on their type signatures.
@package privileged-concurrency
@version 0.3

module Control.Concurrent.STM.TChan.WriteOnly
data WriteOnlyTChan a
toWriteOnlyTChan :: TChan a -> WriteOnlyTChan a
writeTChan :: WriteOnlyTChan a -> a -> STM ()
dupWriteOnlyTChan :: WriteOnlyTChan a -> STM (WriteOnlyTChan a)
unGetTChan :: WriteOnlyTChan a -> a -> STM ()
isEmptyTChan :: WriteOnlyTChan a -> STM Bool

module Control.Concurrent.STM.TChan.ReadOnly
data ReadOnlyTChan a
toReadOnlyTChan :: TChan a -> ReadOnlyTChan a
readTChan :: ReadOnlyTChan a -> STM a
dupReadOnlyTChan :: ReadOnlyTChan a -> STM (ReadOnlyTChan a)

module Control.Concurrent.STM.TMVar.WriteOnly
data WriteOnlyTMVar a
toWriteOnlyTMVar :: TMVar a -> WriteOnlyTMVar a
putTMVar :: WriteOnlyTMVar a -> a -> STM ()
tryPutTMVar :: WriteOnlyTMVar a -> a -> STM Bool
isEmptyWriteOnlyTMVar :: (WriteOnlyTMVar a) -> STM Bool
instance Eq (WriteOnlyTMVar a)

module Control.Concurrent.STM.TMVar.ReadOnly
data ReadOnlyTMVar a
toReadOnlyTMVar :: TMVar a -> ReadOnlyTMVar a
takeTMVar :: ReadOnlyTMVar a -> STM a
readTMVar :: ReadOnlyTMVar a -> STM a
tryTakeTMVar :: ReadOnlyTMVar a -> STM (Maybe a)
isEmptyTMVar :: (ReadOnlyTMVar a) -> STM Bool
instance Eq (ReadOnlyTMVar a)

module Control.Concurrent.STM.TVar.WriteOnly
data WriteOnlyTVar a
toWriteOnlyTVar :: TVar a -> WriteOnlyTVar a
writeTVar :: WriteOnlyTVar a -> a -> STM ()
instance Eq (WriteOnlyTVar a)

module Control.Concurrent.STM.TVar.ReadOnly
data ReadOnlyTVar a
toReadOnlyTVar :: TVar a -> ReadOnlyTVar a
readTVar :: ReadOnlyTVar a -> STM a
readTVarIO :: ReadOnlyTVar a -> IO a
instance Eq (ReadOnlyTVar a)

module Control.Concurrent.MVar.WriteOnly
data WriteOnlyMVar a
toWriteOnlyMVar :: MVar a -> WriteOnlyMVar a
putMVar :: WriteOnlyMVar a -> a -> IO ()
tryPutMVar :: WriteOnlyMVar a -> a -> IO Bool
instance Eq (WriteOnlyMVar a)

module Control.Concurrent.MVar.ReadOnly
data ReadOnlyMVar a
toReadOnlyMVar :: MVar a -> ReadOnlyMVar a
takeMVar :: ReadOnlyMVar a -> IO a
readMVar :: ReadOnlyMVar a -> IO a
tryTakeMVar :: ReadOnlyMVar a -> IO (Maybe a)
withMVar :: ReadOnlyMVar a -> (a -> IO b) -> IO b
instance Eq (ReadOnlyMVar a)

module Control.Concurrent.Chan.WriteOnly
data WriteOnlyChan a
toWriteOnlyChan :: Chan a -> WriteOnlyChan a
writeChan :: WriteOnlyChan a -> a -> IO ()
dupWriteOnlyChan :: WriteOnlyChan a -> IO (WriteOnlyChan a)
writeList2Chan :: WriteOnlyChan a -> [a] -> IO ()

module Control.Concurrent.Chan.ReadOnly
data ReadOnlyChan a
toReadOnlyChan :: Chan a -> ReadOnlyChan a
readChan :: ReadOnlyChan a -> IO a
dupReadOnlyChan :: ReadOnlyChan a -> IO (ReadOnlyChan a)
getChanContents :: ReadOnlyChan a -> IO [a]


-- | Privilege separated concurrency abstractions.
module Control.Concurrent.Privileged
