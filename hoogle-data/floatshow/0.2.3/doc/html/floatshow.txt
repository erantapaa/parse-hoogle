-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Alternative faster String representations for Double and Float,
String representations for more general numeric types.
--   
--   The String representations provided by this package are generally
--   longer than show's output, which constructs the shortest string that
--   is parsed as the original number by read. This requires some
--   time-consuming checks, so show is slow for floating-point numbers. By
--   producing a digit-string guaranteed to be long enough to uniquely
--   determine the number without caring whether there's a shorter
--   representation, the display functions of this package can be faster,
--   sometimes by a big margin. Text.FShow.Raw provides building blocks for
--   representations of numeric types which don't belong to RealFloat but
--   have some of its functionality. The bulk of the code is a minor
--   modification of code from the base package, whence the GHC License is
--   included as an extra-source-file.
@package floatshow
@version 0.2.3


-- | Lower level conversion of base-2 numbers to base-10 representations.
--   These functions can be used to define <a>Show</a> instances for types
--   which don't support the full <a>RealFloat</a> interface but have an
--   analogue to <a>decodeFloat</a> (and maybe to <a>isNaN</a>,
--   <a>isInfinite</a> and <a>isNegativeZero</a>).
module Text.FShow.Raw

-- | Class for types whose values can be decoded into the form <tt>m *
--   2^e</tt> with an <a>Integer</a> mantissa <tt>m</tt> and an <a>Int</a>
--   exponent <tt>e</tt>.
--   
--   Minimal complete definition: one of <a>decode</a> and <a>decodeL</a>.
--   
--   It is strongly recommended to override the default implementation of
--   <a>showDigits</a> if the datatype allows distinguishing values without
--   using an exact representation.
class BinDecode a where decode x = case decodeL x of { (_, n, e) -> (n, e) } decodeL x = case decode x of { (0, _) -> (0, 0, 0) (n, e) -> (integerLog2 (abs n), n, e) } showDigits x = case decodeL x of { (a, _, e) -> fullDecimalDigits a e }
decode :: BinDecode a => a -> (Integer, Int)
decodeL :: BinDecode a => a -> (Int, Integer, Int)
showDigits :: BinDecode a => a -> Int

-- | Class for types whose values may be <tt>NaN</tt> or infinite and can
--   otherwise be decoded into the form <tt>m * 2^e</tt>.
class (Num a, Ord a, BinDecode a) => DecimalFormat a where nanTest _ = False infTest _ = False negTest x = x < 0
nanTest :: DecimalFormat a => a -> Bool
infTest :: DecimalFormat a => a -> Bool
negTest :: DecimalFormat a => a -> Bool

-- | The Style in which to format the display <a>String</a>
data FormatStyle

-- | Display in scientific notation, e.g. <tt>1.234e-5</tt>
Exponent :: FormatStyle

-- | Display in standard decimal notation, e.g. <tt>0.0123</tt> or
--   <tt>123.456</tt>
Fixed :: FormatStyle

-- | Use <a>Fixed</a> for numbers with magnitude close enough to
--   <tt>1</tt>, <a>Exponent</a> otherwise. The default range for using
--   <a>Fixed</a> is <tt>0.1 &lt;= |x| &lt; 10^7</tt>, corresponding to
--   <tt><a>Generic</a> (<a>Just</a> (-1,7))</tt>.
Generic :: (Maybe (Int, Int)) -> FormatStyle

-- | <a>decimalFormat</a> is a slightly higher-level formatter, treating
--   the special cases of <tt>NaN</tt> and infinities.
decimalFormat :: DecimalFormat a => FormatStyle -> Maybe Int -> a -> String

-- | <a>binDecFormat</a> is the formatter for instances of the
--   <a>BinDecode</a> class. Any special values must be processed before it
--   is called. It fills in the missing arguments before calling
--   <a>rawFormat</a>.
binDecFormat :: BinDecode a => FormatStyle -> Maybe Int -> a -> String

-- | <a>rawFormat</a> is a low-level formatter. The sign is determined from
--   the sign of the mantissa.
rawFormat :: (a -> (Int, Integer, Int)) -> Int -> FormatStyle -> Maybe Int -> a -> String

-- | <a>fullRawFormat</a> is a low-level formatter producing an exact
--   representation of a value which can be decoded into the form <tt>m *
--   2^e</tt>.
fullRawFormat :: (a -> (Int, Integer, Int)) -> FormatStyle -> a -> String

-- | <a>formatDigits</a> builds the display <a>String</a> from the digits
--   and the exponent of a nonnegative number.
formatDigits :: FormatStyle -> Int -> Maybe Int -> [Int] -> Int -> String

-- | <a>posToDigits</a> converts a positive number into a list of digits
--   and an exponent. If <tt>x = 10^e*d_1.d_2...d_m...</tt> with <tt>d_1 /=
--   0</tt> and <tt>0 &lt;= d_i &lt;= 9</tt>, the result is
--   <tt>([d_1,d_2,...,d_m],e)</tt>, where <tt>m</tt> is one or two larger
--   than the number of requested digits, provided that <tt>2^(-70776)
--   &lt;= x &lt; 2^248236</tt> (with 64-bit <a>Int</a>s, the upper bound
--   is about <tt>2^1.3e9</tt>).
--   
--   The number <tt>x</tt> is (indirectly) given in the form <tt>mantissa *
--   2^exponent</tt>, similar to <a>encodeFloat</a>, as the final two
--   arguments. The second argument is the base-2 logarithm of the mantissa
--   and the first is the number of decimal digits needed to discriminate
--   between different numbers.
--   
--   In <tt><a>posToDigits</a> digs mlog mant exp</tt>, it is assumed that
--   
--   <ul>
--   <li><tt>digs &gt; 0</tt>, <tt>mlog &gt;= 0</tt>,</li>
--   <li><tt>2^mlog &lt;= mant &lt; 2^(mlog+1)</tt>.</li>
--   </ul>
--   
--   These assumptions are not checked, and if they're not satisfied, wrong
--   results or worse are the consequences. <i>You have been warned</i>.
--   
--   The digits argument may be smaller than would be necessary to uniquely
--   determine each value if that is not required. As a rule of thumb,
--   requiring fewer significant digits means faster generation of the
--   representation.
posToDigits :: Int -> Int -> Integer -> Int -> ([Int], Int)

-- | <tt><a>fullDecimalDigits</a> a e</tt> calculates the number of decimal
--   digits that may be required to exactly display a value <tt>x = m *
--   2^e</tt> where <tt>m</tt> is an <a>Integer</a> satisfying <tt>2^a
--   &lt;= m &lt; 2^(a+1)</tt>. Usually, the calculated value is not much
--   larger than the actual number of digits in the exact decimal
--   representation, but it will be if the exponent <tt>e</tt> is negative
--   and has large absolute value and the mantissa is divisible by a large
--   power of <tt>2</tt>.
fullDecimalDigits :: Int -> Int -> Int

-- | Integer base-<tt>2</tt> logarithm of a positive <a>Integer</a>.
integerLog2 :: Integer -> Int


-- | Faster <a>String</a> representations for floating point types. The
--   code is largely taken from code in <a>GHC.Float</a> and the
--   <a>Show</a> instance of <a>Integer</a> in <a>GHC.Num</a> to get the
--   sequence of digits.
module Text.FShow.RealFloat

-- | A duplicate of the <a>Show</a> class.
class FShow a where fshow x = fshowsPrec 0 x "" fshowsPrec _ x s = fshow x ++ s fshowList xs s = showList__ fshows xs s
fshow :: FShow a => a -> String
fshowsPrec :: FShow a => Int -> a -> ShowS
fshowList :: FShow a => [a] -> ShowS

-- | Same as <tt><a>shows</a></tt>, but using an <a>FShow</a> instance.
fshows :: FShow a => a -> ShowS

-- | Class for specifying display parameters. The type <tt>a</tt> is
--   supposed to be an IEEE-ish (real) floating-point type with
--   floating-point radix 2, such that the mantissa returned by
--   <a>decodeFloat</a> satisfies
--   
--   <pre>
--   2^(<a>binExp</a> x) &lt;= <a>fst</a> (<a>decodeFloat</a> x) &lt; 2^(<a>binExp</a> x + 1)
--   </pre>
--   
--   for <tt>x &gt; 0</tt>, so <tt><a>binExp</a> x = <a>floatDigits</a> x -
--   1</tt>. The number of decimal digits that may be required is
--   calculated with the formula
--   
--   <pre>
--   <a>decDigits</a> x = 2 + <a>floor</a> (<a>floatDigits</a> x * <a>logBase</a> 10 2).
--   </pre>
--   
--   The default implementation uses an approximation of <tt><a>logBase</a>
--   10 2</tt> sufficient for mantissae of up to several thousand bits.
--   Nevertheless, hardcoding the values in instance declarations may yield
--   better performance.
class RealFloat a => DispFloat a where decDigits x = 2 + (8651 * (floatDigits x)) `quot` 28738 binExp x = floatDigits x - 1
decDigits :: DispFloat a => a -> Int
binExp :: DispFloat a => a -> Int

-- | Show a signed <a>DispFloat</a> value to full precision using standard
--   decimal notation for arguments whose absolute value lies between
--   <tt>0.1</tt> and <tt>9,999,999</tt>, and scientific notation
--   otherwise. Analogous to <tt><tt>showFloat</tt></tt> from
--   <a>GHC.Float</a>.
fshowFloat :: DispFloat a => a -> ShowS

-- | Show a signed <a>DispFloat</a> value using scientific (exponential)
--   notation (e.g. <tt>2.45e2</tt>, <tt>1.5e-3</tt>).
--   
--   In the call <tt><a>fshowEFloat</a> digs val</tt>, if <tt>digs</tt> is
--   <a>Nothing</a>, the value is shown to full precision; if <tt>digs</tt>
--   is <tt><a>Just</a> d</tt>, then <tt><a>max</a> 1 d</tt> digits after
--   the decimal point are shown. Analogous to <tt><tt>showEFloat</tt></tt>
--   from <a>Numeric</a>.
fshowEFloat :: DispFloat a => Maybe Int -> a -> ShowS

-- | Show a signed <a>DispFloat</a> value using standard decimal notation
--   (e.g. <tt>245000</tt>, <tt>0.0015</tt>).
--   
--   In the call <tt><a>fshowFFloat</a> digs val</tt>, if <tt>digs</tt> is
--   <a>Nothing</a>, the value is shown to full precision; if <tt>digs</tt>
--   is <tt><a>Just</a> d</tt>, then <tt><a>max</a> 0 d</tt> digits after
--   the decimal point are shown. Analogous to <tt><tt>showFFloat</tt></tt>
--   from <a>Numeric</a>.
fshowFFloat :: DispFloat a => Maybe Int -> a -> ShowS

-- | Show a signed <a>DispFloat</a> value using standard decimal notation
--   for arguments whose absolute value lies between <tt>0.1</tt> and
--   <tt>9,999,999</tt>, and scientific notation otherwise.
--   
--   In the call <tt><a>fshowGFloat</a> digs val</tt>, if <tt>digs</tt> is
--   <a>Nothing</a>, the value is shown to full precision; if <tt>digs</tt>
--   is <tt><a>Just</a> d</tt>, then <tt><a>max</a> 1 d</tt> digits after
--   the decimal point are shown. Analogous to <tt><tt>showGFloat</tt></tt>
--   from <a>Numeric</a>.
fshowGFloat :: DispFloat a => Maybe Int -> a -> ShowS

-- | newtype wrapper for <a>Double</a>. The <a>Show</a> (and <a>FShow</a>)
--   instance displays numbers rounded to seven significant digits.
newtype Double7
D7 :: Double -> Double7

-- | newtype wrapper for <a>Double</a>. The <a>Show</a> (and <a>FShow</a>)
--   instance displays all significant digits.
newtype FullDouble
FD :: Double -> FullDouble
unFD :: FullDouble -> Double

-- | newtype wrapper for <a>Float</a>. The <a>Show</a> (and <a>FShow</a>)
--   instance displays numbers rounded to seven significant digits.
newtype Float7
F7 :: Float -> Float7

-- | newtype wrapper for <a>Double</a>. The <a>Show</a> (and <a>FShow</a>)
--   instance displays all significant digits.
newtype FullFloat
FF :: Float -> FullFloat
unFF :: FullFloat -> Float
instance Eq Double7
instance Ord Double7
instance Num Double7
instance Fractional Double7
instance Real Double7
instance RealFrac Double7
instance Floating Double7
instance RealFloat Double7
instance Eq FullDouble
instance Ord FullDouble
instance Num FullDouble
instance Fractional FullDouble
instance Real FullDouble
instance RealFrac FullDouble
instance Floating FullDouble
instance RealFloat FullDouble
instance Eq Float7
instance Ord Float7
instance Num Float7
instance Fractional Float7
instance Real Float7
instance RealFrac Float7
instance Floating Float7
instance RealFloat Float7
instance Eq FullFloat
instance Ord FullFloat
instance Num FullFloat
instance Fractional FullFloat
instance Real FullFloat
instance RealFrac FullFloat
instance Floating FullFloat
instance RealFloat FullFloat
instance FShow a => FShow [a]
instance FShow Float
instance FShow Double
instance Read FullFloat
instance FShow FullFloat
instance Show FullFloat
instance DispFloat FullFloat
instance FShow Float7
instance Show Float7
instance DispFloat Float7
instance Read FullDouble
instance FShow FullDouble
instance Show FullDouble
instance DispFloat FullDouble
instance FShow Double7
instance Show Double7
instance DispFloat Double7
instance DispFloat Float
instance DispFloat Double
