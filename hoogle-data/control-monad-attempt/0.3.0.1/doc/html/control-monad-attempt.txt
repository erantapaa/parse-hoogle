-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monad transformer for attempt. (deprecated)
--   
--   This package uses the transformers library.
@package control-monad-attempt
@version 0.3.0.1


-- | Provide a monad transformer for the attempt monad, which allows the
--   reporting of errors using extensible exceptions.
module Control.Monad.Attempt
newtype AttemptT m v
AttemptT :: m (Attempt v) -> AttemptT m v
runAttemptT :: AttemptT m v -> m (Attempt v)

-- | Instances of <a>FromAttempt</a> specify a manner for embedding
--   <a>Attempt</a> failures directly into the target data type. For
--   example, the <a>IO</a> instance simply throws a runtime error. This is
--   a convenience wrapper when you simply want to use that default action.
--   
--   So given a type <a>AttemptT</a> <a>IO</a> <a>Int</a>, this function
--   will convert it to <a>IO</a> <a>Int</a>, throwing any exceptions in
--   the original value.
evalAttemptT :: (Monad m, FromAttempt m) => AttemptT m v -> m v

-- | The equivalent of <a>attempt</a> for transformers. Given a success and
--   failure handler, eliminates the <a>AttemptT</a> portion of the
--   transformer stack.
attemptT :: Monad m => (forall e. Exception e => e -> b) -> (a -> b) -> AttemptT m a -> m b

-- | Catches runtime (ie, IO) exceptions and represents them in an
--   <a>AttemptT</a> transformer.
--   
--   Like <tt>handle</tt>, the first argument to this function must
--   explicitly state the type of its input.
attemptTIO :: (Exception eIn, Exception eOut) => (eIn -> eOut) -> IO v -> AttemptT IO v
instance Monad m => FromAttempt (AttemptT m)
instance MonadIO m => MonadIO (AttemptT m)
instance MonadTrans AttemptT
instance (Monad m, Exception e) => WrapFailure e (AttemptT m)
instance (Exception e, Monad m) => Failure e (AttemptT m)
instance Monad m => Monad (AttemptT m)
instance Monad m => Applicative (AttemptT m)
instance Monad m => Functor (AttemptT m)
