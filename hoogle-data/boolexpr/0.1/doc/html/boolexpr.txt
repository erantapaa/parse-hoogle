-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Boolean expressions with various representations and search queries.
--   
--   Boolean expressions with various representations and search queries.
@package boolexpr
@version 0.1


module Data.BoolExpr

-- | A boolean type class.
class Boolean f
(/\) :: Boolean f => f a -> f a -> f a
(\/) :: Boolean f => f a -> f a -> f a
bNot :: Boolean f => f a -> f a
bTrue :: Boolean f => f a
bFalse :: Boolean f => f a
bConst :: Boolean f => a -> f a

-- | Syntax of boolean expressions parameterized over a set of leaves,
--   named constants.
data BoolExpr a
BAnd :: (BoolExpr a) -> (BoolExpr a) -> BoolExpr a
BOr :: (BoolExpr a) -> (BoolExpr a) -> BoolExpr a
BNot :: (BoolExpr a) -> BoolExpr a
BTrue :: BoolExpr a
BFalse :: BoolExpr a
BConst :: a -> BoolExpr a

-- | Reduce a boolean tree annotated by booleans to a single boolean.
reduceBoolExpr :: BoolExpr Bool -> Bool
evalBoolExpr :: (a -> Bool) -> (BoolExpr a -> Bool)

-- | Signed values are either positive of negative.
data Signed a
Positive :: a -> Signed a
Negative :: a -> Signed a

-- | Returns constants used in a given boolean tree, these constants are
--   returned signed depending one how many negations stands over a given
--   constant.
constants :: BoolExpr a -> [Signed a]
newtype CNF a
CNF :: Conj (Disj a) -> CNF a
unCNF :: CNF a -> Conj (Disj a)
newtype Conj a
Conj :: [a] -> Conj a
unConj :: Conj a -> [a]

-- | Convert a boolean tree to a conjunctive normal form.
boolTreeToCNF :: NegateConstant a -> BoolExpr a -> CNF a

-- | Reduce a boolean expression in conjunctive normal form to a single
--   boolean.
reduceCNF :: CNF Bool -> Bool
newtype Disj a
Disj :: [a] -> Disj a
unDisj :: Disj a -> [a]
newtype DNF a
DNF :: Disj (Conj a) -> DNF a
unDNF :: DNF a -> Disj (Conj a)

-- | Convert a boolean tree to a disjunctive normal form.
boolTreeToDNF :: (a -> BoolExpr a) -> BoolExpr a -> DNF a

-- | Reduce a boolean expression in disjunctive normal form to a single
--   boolean.
reduceDNF :: DNF Bool -> Bool
dualize :: NegateConstant a -> BoolExpr a -> BoolExpr a

-- | Push the negations inwards as much as possible. The resulting boolean
--   tree no longer use negations.
pushNotInwards :: NegateConstant a -> BoolExpr a -> BoolExpr a
instance Eq a => Eq (BoolExpr a)
instance Ord a => Ord (BoolExpr a)
instance Show a => Show (BoolExpr a)
instance Eq a => Eq (Signed a)
instance Ord a => Ord (Signed a)
instance Show a => Show (Signed a)
instance Read a => Read (Signed a)
instance Show a => Show (Disj a)
instance Functor Disj
instance Monoid (Disj a)
instance Show a => Show (Conj a)
instance Functor Conj
instance Monoid (Conj a)
instance Show a => Show (CNF a)
instance Monoid (CNF a)
instance Show a => Show (DNF a)
instance Monoid (DNF a)
instance Boolean DNF
instance Functor DNF
instance Boolean CNF
instance Functor CNF
instance Boolean BoolExpr
instance Foldable BoolExpr
instance Traversable BoolExpr
instance Functor BoolExpr

module Data.BoolExpr.Parser

-- | Parse a search query as a boolean tree using the following grammar.
--   Note that this parser is parameterized over the parser of query simple
--   terms (const).
--   
--   <pre>
--   bt ::= bt AND bt
--         | bt bt -- same as AND
--         | bt OR bt
--         | - bt
--         | ( bt )
--         | const
--    const ::= &lt;given as argument&gt;
--   </pre>
parseBoolExpr :: CharParser st a -> CharParser st (BoolExpr a)

-- | Basic language definition for search queries. Reserved names are
--   <tt>"AND"</tt> <tt>"OR"</tt> and <tt>"-"</tt>. Identifiers accepts
--   almost every ASCII sequences without blanks nor <tt>'-'</tt>.
languageDef :: LanguageDef st

-- | Underlying lexer of <a>languageDef</a>
lexer :: TokenParser st

-- | Shorthand for <a>identifier</a> <a>lexer</a>.
identifier :: CharParser st String

-- | Shorthand for <a>whiteSpace</a> <a>lexer</a>.
whiteSpace :: CharParser st ()

-- | Shorthand for <a>symbol</a> <a>lexer</a>.
symbol :: String -> CharParser st String
