-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Quasiquoter for xml. XML DSL in Haskell.
--   
--   XML quasiquoter. Can convert XML code into Haskell data structures
--   compile time.
--   
--   At the moment only Text.XML.Light (xml-package) backend.
--   
--   Supports namespaces, attributes, embedding Haskell variables etc.
--   
--   See github for more information and examples of usage.
@package text-xml-qq
@version 0.1


-- | The XML quasiquoter.
--   
--   Given the variables
--   
--   <pre>
--   url = "google.se"
--   elem = "gmail"
--   attrNs = "something"
--   attrName = "Pelle"
--   attrValue = "Arne"
--   elemCont = CRef "testing"
--   cont1 = Elem $ element { elName = qname "hej" }
--   cont2 = CRef "other test"
--   </pre>
--   
--   the code
--   
--   <pre>
--   [$xmlQQ|
--   &lt;{url}:{elem} {attrNs}:{attrName}={attrValue} attr="cool"&gt;
--     &lt;elem ns1:elem1="1" ns2:elem2="2"&gt;&lt;&lt;elemCont&gt;&gt;&lt;/elem&gt;
--     &lt;elem /&gt;
--     &lt;el /&gt;
--     &lt;&lt;cont1&gt;&gt;
--     &lt;&lt;cont2&gt;&gt;
--   &lt;/{url}:{elem}&gt;
--   |]
--   </pre>
--   
--   will generate the data structure
--   
--   <pre>
--   element {
--     elName = QName elem Nothing (Just url),
--     elAttribs = [Attr (QName attrName Nothing (Just attrNs)) attrValue,
--                  Attr (qname "attr") "cool"],
--     elContent = [
--       (Elem $ element { elName = qname "elem",
--                         elAttribs = [Attr (QName "elem1" Nothing (Just "ns1")) "1",
--                                      Attr (QName "elem2" Nothing (Just "ns2")) "2"],
--                         elContent = [elemCont]
--                        }),
--        (Elem $ element { elName = qname "elem" }),
--        (Elem $ element { elName = qname "el" }),
--        cont1,
--        cont2]
--   }
--   </pre>
module Text.XML.QQ
xmlQQ :: QuasiQuoter
