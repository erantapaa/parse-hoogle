-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Mid level bindings to Kyoto Cabinet
--   
@package kyotocabinet
@version 0.1.3

module Database.KyotoCabinet.Operations
data LoggingOptions
LoggingOptions :: LogFile -> [LogKind] -> String -> LoggingOptions

-- | The file in which the log messages will be written
logFile :: LoggingOptions -> LogFile
logKind :: LoggingOptions -> [LogKind]

-- | The prefix of each log message
logPrefix :: LoggingOptions -> String
data LogFile
File :: FilePath -> LogFile
StdOut :: LogFile
StdErr :: LogFile
data LogKind
Debug :: LogKind
Info :: LogKind
Warn :: LogKind
Error :: LogKind

-- | Default logging options, outputting to stdout, all messages, and no
--   prefix.
defaultLoggingOptions :: LoggingOptions
data Mode
Reader :: [ReadMode] -> Mode
Writer :: [WriteMode] -> [ReadMode] -> Mode
data WriteMode
Create :: WriteMode
Truncate :: WriteMode
AutoTran :: WriteMode
AutoSync :: WriteMode
data ReadMode
NoLock :: ReadMode
TryLock :: ReadMode
NoRepair :: ReadMode
data KCException
KCException :: String -> KCError -> String -> KCException
excFunction :: KCException -> String
excError :: KCException -> KCError
excMsg :: KCException -> String
data KCError
Success :: KCError
NotImplemented :: KCError
InvalidOperation :: KCError
NoRepository :: KCError
NoPermission :: KCError
BrokenFile :: KCError
RecordDuplication :: KCError
NoRecord :: KCError
LogicalInconsistency :: KCError
SystemError :: KCError
MiscError :: KCError
close :: WithDB db => db -> IO ()
type VisitorFull = ByteString -> ByteString -> IO (Either VisitorAction ByteString)
type VisitorEmpty = ByteString -> IO (Maybe ByteString)
data VisitorAction

-- | Don't do anything
NoOperation :: VisitorAction

-- | Remove the record
Remove :: VisitorAction
type Writable = Bool

-- | Executes the <a>VisitorFull</a> on the existent records, and
--   <a>VisitorEmpty</a> on the missing ones.
accept :: WithDB db => db -> ByteString -> VisitorFull -> VisitorEmpty -> Writable -> IO ()
acceptBulk :: WithDB db => db -> [ByteString] -> VisitorFull -> VisitorEmpty -> Writable -> IO ()
iterate :: WithDB db => db -> VisitorFull -> Writable -> IO ()
scanPara :: WithDB db => db -> VisitorFull -> Int -> IO ()
set :: WithDB db => db -> ByteString -> ByteString -> IO ()
setBulk :: WithDB db => db -> [(ByteString, ByteString)] -> Bool -> IO Int64
add :: WithDB db => db -> ByteString -> ByteString -> IO ()
replace :: WithDB db => db -> ByteString -> ByteString -> IO ()
append :: WithDB db => db -> ByteString -> ByteString -> IO ()
get :: WithDB db => db -> ByteString -> IO (Maybe ByteString)
getBulk :: WithDB db => db -> [ByteString] -> Bool -> IO [(ByteString, ByteString)]
remove :: WithDB db => db -> ByteString -> IO ()
removeBulk :: WithDB db => db -> [ByteString] -> Bool -> IO Int64
seize :: WithDB db => db -> ByteString -> IO (Maybe ByteString)
clear :: WithDB db => db -> IO ()
copy :: WithDB db => db -> FilePath -> IO ()
dump :: WithDB db => db -> FilePath -> IO ()
load :: WithDB db => db -> FilePath -> IO ()
count :: WithDB db => db -> IO Int64
size :: WithDB db => db -> IO Int64
path :: WithDB db => db -> IO String
status :: WithDB db => db -> IO String
data MergeMode
Set :: MergeMode
Add :: MergeMode
Replace :: MergeMode
Append :: MergeMode
data GenericDB
GenericDB :: db -> GenericDB
merge :: WithDB db => db -> [GenericDB] -> MergeMode -> IO ()
data Cursor
cursor :: WithDB db => db -> IO Cursor
curAccept :: Cursor -> VisitorFull -> Bool -> Bool -> IO ()
curSetValue :: Cursor -> ByteString -> Bool -> IO ()
curGetKey :: Cursor -> Bool -> IO ByteString
curGetValue :: Cursor -> Bool -> IO ByteString
curGet :: Cursor -> Bool -> IO (ByteString, ByteString)
curRemove :: Cursor -> IO ()
curSeize :: Cursor -> IO (ByteString, ByteString)
curJump :: Cursor -> IO ()
curJumpKey :: Cursor -> ByteString -> IO ()
curJumpBack :: Cursor -> IO ()
curJumpBackKey :: Cursor -> ByteString -> IO ()
curStep :: Cursor -> IO ()
curStepBack :: Cursor -> IO ()


-- | Prototype hash database.
--   
--   On-memory database implemented with <tt>std::unordered_map</tt>.
--   
--   <ul>
--   <li>Persistence: <i>volatile</i></li>
--   <li>Algorithm: <i>hash table</i></li>
--   <li>Complexity: <i>O(1)</i></li>
--   <li>Sequence: <i>undefined</i></li>
--   <li>Lock unit: <i>whole (rwlock)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.ProtoHash
data ProtoHash
makeProtoHash :: LoggingOptions -> Mode -> IO ProtoHash
instance WithDB ProtoHash


-- | Prototype tree database.
--   
--   On-memory database implemented with <tt>std::map</tt>.
--   
--   <ul>
--   <li>Persistence: <i>volatile</i></li>
--   <li>Algorithm: <i>red black tree</i></li>
--   <li>Complexity: <i>O(log n)</i></li>
--   <li>Sequence: <i>lexical order</i></li>
--   <li>Lock unit: <i>whole (rwlock)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.ProtoTree
data ProtoTree
makeProtoTree :: LoggingOptions -> Mode -> IO ProtoTree
instance WithDB ProtoTree


-- | Stash database.
--   
--   On-memory database, memory efficient.
--   
--   <ul>
--   <li>Persistence: <i>volatile</i></li>
--   <li>Algorithm: <i>red black tree</i></li>
--   <li>Complexity: <i>O(log n)</i></li>
--   <li>Sequence: <i>lexical order</i></li>
--   <li>Lock unit: <i>record (rwlock)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.Stash
data Stash
data StashOptions
StashOptions :: Maybe Int64 -> StashOptions
buckets :: StashOptions -> Maybe Int64
defaultStashOptions :: StashOptions
makeStash :: LoggingOptions -> StashOptions -> Mode -> IO Stash
instance Show StashOptions
instance Read StashOptions
instance Eq StashOptions
instance Ord StashOptions
instance WithDB Stash


-- | Cache hash database.
--   
--   On-memory database with definable size, and with a LRU algorithm for
--   eviction.
--   
--   <ul>
--   <li>Persistence: <i>volatile</i></li>
--   <li>Algorithm: <i>hash table</i></li>
--   <li>Complexity: <i>O(1)</i></li>
--   <li>Sequence: <i>undefined</i></li>
--   <li>Lock unit: <i>record (mutex)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.CacheHash
data CacheHash
data CacheHashOptions
CacheHashOptions :: [Options] -> Maybe Int64 -> Maybe Compressor -> Maybe Int64 -> Maybe Int64 -> Maybe String -> CacheHashOptions
options :: CacheHashOptions -> [Options]
buckets :: CacheHashOptions -> Maybe Int64
compressor :: CacheHashOptions -> Maybe Compressor
maxRecords :: CacheHashOptions -> Maybe Int64
maxSize :: CacheHashOptions -> Maybe Int64
cipherKey :: CacheHashOptions -> Maybe String
defaultCacheHashOptions :: CacheHashOptions

-- | Compression algorithm used. <a>DEFLATE</a> is the default one.
data Compressor

-- | The raw zlib compressor
Zlib :: Compressor

-- | zlib deflate compressor
DEFLATE :: Compressor

-- | zlib gzip compressor
Gz :: Compressor

-- | LZO compressor
LZO :: Compressor

-- | LZMA compressor
LZMA :: Compressor

-- | Arcfour cipher
Arc :: Compressor

-- | General tuning options
data Options

-- | Enable compression of the keys and the values
Compress :: Options
makeCacheHash :: LoggingOptions -> CacheHashOptions -> Mode -> IO CacheHash
instance Show CacheHashOptions
instance Read CacheHashOptions
instance Eq CacheHashOptions
instance Ord CacheHashOptions
instance WithDB CacheHash


-- | Cache tree database
--   
--   On-memory database using a B+ tree, useful for an ordered cache.
--   
--   <ul>
--   <li>Persistence: <i>volatile</i></li>
--   <li>Algorithm: <i>B+ tree</i></li>
--   <li>Complexity: <i>O(log n)</i></li>
--   <li>Sequence: <i>custom order</i></li>
--   <li>Lock unit: <i>page (mutex)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.CacheTree
data CacheTree
data CacheTreeOptions
CacheTreeOptions :: [Options] -> Maybe Int64 -> Maybe Compressor -> Maybe Int64 -> Maybe String -> Maybe Int64 -> Maybe Comparator -> Maybe Int64 -> CacheTreeOptions
options :: CacheTreeOptions -> [Options]
buckets :: CacheTreeOptions -> Maybe Int64
compressor :: CacheTreeOptions -> Maybe Compressor
maxRecords :: CacheTreeOptions -> Maybe Int64
cipherKey :: CacheTreeOptions -> Maybe String
pageSize :: CacheTreeOptions -> Maybe Int64
comparator :: CacheTreeOptions -> Maybe Comparator
pageCacheSize :: CacheTreeOptions -> Maybe Int64
defaultCacheTreeOptions :: CacheTreeOptions

-- | Compression algorithm used. <a>DEFLATE</a> is the default one.
data Compressor

-- | The raw zlib compressor
Zlib :: Compressor

-- | zlib deflate compressor
DEFLATE :: Compressor

-- | zlib gzip compressor
Gz :: Compressor

-- | LZO compressor
LZO :: Compressor

-- | LZMA compressor
LZMA :: Compressor

-- | Arcfour cipher
Arc :: Compressor

-- | General tuning options
data Options

-- | Enable compression of the keys and the values
Compress :: Options

-- | Comparator used in the tree. <a>Lexical</a> by default.
data Comparator
Lexical :: Comparator
Decimal :: Comparator
makeCacheTree :: LoggingOptions -> CacheTreeOptions -> Mode -> IO CacheTree
instance Show CacheTreeOptions
instance Read CacheTreeOptions
instance Eq CacheTreeOptions
instance Ord CacheTreeOptions
instance WithDB CacheTree


-- | File hash database.
--   
--   File hash database: tipical DBM.
--   
--   <ul>
--   <li>Persistence: <i>persistent</i></li>
--   <li>Algorithm: <i>hash table</i></li>
--   <li>Complexity: <i>O(1)</i></li>
--   <li>Sequence: <i>undefined</i></li>
--   <li>Lock unit: <i>record (rwlock)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.Hash
data Hash
data HashOptions
HashOptions :: Maybe Int8 -> Maybe Int8 -> [Options] -> Maybe Int64 -> Maybe Int64 -> Maybe Int64 -> Maybe Compressor -> Maybe String -> HashOptions
alignmentPow :: HashOptions -> Maybe Int8
freePoolPow :: HashOptions -> Maybe Int8
options :: HashOptions -> [Options]
buckets :: HashOptions -> Maybe Int64
maxSize :: HashOptions -> Maybe Int64
defragInterval :: HashOptions -> Maybe Int64
compressor :: HashOptions -> Maybe Compressor
cipherKey :: HashOptions -> Maybe String
defaultHashOptions :: HashOptions

-- | Compression algorithm used. <a>DEFLATE</a> is the default one.
data Compressor

-- | The raw zlib compressor
Zlib :: Compressor

-- | zlib deflate compressor
DEFLATE :: Compressor

-- | zlib gzip compressor
Gz :: Compressor

-- | LZO compressor
LZO :: Compressor

-- | LZMA compressor
LZMA :: Compressor

-- | Arcfour cipher
Arc :: Compressor

-- | General tuning options
data Options

-- | Enable compression of the keys and the values
Compress :: Options

-- | Comparator used in the tree. <a>Lexical</a> by default.
data Comparator
Lexical :: Comparator
Decimal :: Comparator
makeHash :: FilePath -> LoggingOptions -> HashOptions -> Mode -> IO Hash
openHash :: FilePath -> LoggingOptions -> Mode -> IO Hash
instance Show HashOptions
instance Read HashOptions
instance Eq HashOptions
instance Ord HashOptions
instance WithDB Hash


-- | File tree database.
--   
--   File database implemented with a B+: DBM with order.
--   
--   <ul>
--   <li>Persistence: <i>persistent</i></li>
--   <li>Algorithm: <i>B+ tree</i></li>
--   <li>Complexity: <i>O(log n)</i></li>
--   <li>Sequence: <i>custom order</i></li>
--   <li>Lock unit: <i>page (rwlock)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.Tree
data Tree
data TreeOptions
TreeOptions :: Maybe Int8 -> Maybe Int8 -> [Options] -> Maybe Int64 -> Maybe Int64 -> Maybe Int64 -> Maybe Compressor -> Maybe String -> Maybe Int64 -> Maybe Comparator -> Maybe Int64 -> TreeOptions
alignmentPow :: TreeOptions -> Maybe Int8
freePoolPow :: TreeOptions -> Maybe Int8
options :: TreeOptions -> [Options]
buckets :: TreeOptions -> Maybe Int64
maxSize :: TreeOptions -> Maybe Int64
defragInterval :: TreeOptions -> Maybe Int64
compressor :: TreeOptions -> Maybe Compressor
cipherKey :: TreeOptions -> Maybe String
pageSize :: TreeOptions -> Maybe Int64
comparator :: TreeOptions -> Maybe Comparator
pageCacheSize :: TreeOptions -> Maybe Int64
defaultTreeOptions :: TreeOptions

-- | Compression algorithm used. <a>DEFLATE</a> is the default one.
data Compressor

-- | The raw zlib compressor
Zlib :: Compressor

-- | zlib deflate compressor
DEFLATE :: Compressor

-- | zlib gzip compressor
Gz :: Compressor

-- | LZO compressor
LZO :: Compressor

-- | LZMA compressor
LZMA :: Compressor

-- | Arcfour cipher
Arc :: Compressor

-- | General tuning options
data Options

-- | Enable compression of the keys and the values
Compress :: Options

-- | Comparator used in the tree. <a>Lexical</a> by default.
data Comparator
Lexical :: Comparator
Decimal :: Comparator
makeTree :: FilePath -> LoggingOptions -> TreeOptions -> Mode -> IO Tree
openTree :: FilePath -> LoggingOptions -> Mode -> IO Tree
instance Show TreeOptions
instance Read TreeOptions
instance Eq TreeOptions
instance Ord TreeOptions
instance WithDB Tree


-- | Directory hash database.
--   
--   Respective files stored in a directory of the file system.
--   
--   <ul>
--   <li>Persistence: <i>persistent</i></li>
--   <li>Algorithm: <i>undefined</i></li>
--   <li>Complexity: <i>undefined</i></li>
--   <li>Sequence: <i>undefined</i></li>
--   <li>Lock unit: <i>record (rwlock)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.Dir
data Dir
data DirOptions
DirOptions :: Maybe Int8 -> Maybe Int8 -> [Options] -> Maybe Int64 -> Maybe Int64 -> Maybe Int64 -> Maybe Compressor -> Maybe String -> DirOptions
alignmentPow :: DirOptions -> Maybe Int8
freePoolPow :: DirOptions -> Maybe Int8
options :: DirOptions -> [Options]
buckets :: DirOptions -> Maybe Int64
maxSize :: DirOptions -> Maybe Int64
defragInterval :: DirOptions -> Maybe Int64
compressor :: DirOptions -> Maybe Compressor
cipherKey :: DirOptions -> Maybe String
defaultDirOptions :: DirOptions

-- | Compression algorithm used. <a>DEFLATE</a> is the default one.
data Compressor

-- | The raw zlib compressor
Zlib :: Compressor

-- | zlib deflate compressor
DEFLATE :: Compressor

-- | zlib gzip compressor
Gz :: Compressor

-- | LZO compressor
LZO :: Compressor

-- | LZMA compressor
LZMA :: Compressor

-- | Arcfour cipher
Arc :: Compressor

-- | General tuning options
data Options

-- | Enable compression of the keys and the values
Compress :: Options

-- | Comparator used in the tree. <a>Lexical</a> by default.
data Comparator
Lexical :: Comparator
Decimal :: Comparator
makeDir :: FilePath -> LoggingOptions -> DirOptions -> Mode -> IO Dir
openDir :: FilePath -> LoggingOptions -> Mode -> IO Dir
instance Show DirOptions
instance Read DirOptions
instance Eq DirOptions
instance Ord DirOptions
instance WithDB Dir


-- | Directory tree database.
--   
--   Directory database of B+ tree: huge DBM with order.
--   
--   <ul>
--   <li>Persistence: <i>persistent</i></li>
--   <li>Algorithm: <i>B+ tree</i></li>
--   <li>Complexity: <i>O(log n)</i></li>
--   <li>Sequence: <i>custom order</i></li>
--   <li>Lock unit: <i>page (rwlock)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.Forest
data Forest
data ForestOptions
ForestOptions :: Maybe Int8 -> Maybe Int8 -> [Options] -> Maybe Int64 -> Maybe Int64 -> Maybe Int64 -> Maybe Compressor -> Maybe String -> Maybe Int64 -> Maybe Comparator -> Maybe Int64 -> ForestOptions
alignmentPow :: ForestOptions -> Maybe Int8
freePoolPow :: ForestOptions -> Maybe Int8
options :: ForestOptions -> [Options]
buckets :: ForestOptions -> Maybe Int64
maxSize :: ForestOptions -> Maybe Int64
defragInterval :: ForestOptions -> Maybe Int64
compressor :: ForestOptions -> Maybe Compressor
cipherKey :: ForestOptions -> Maybe String
pageSize :: ForestOptions -> Maybe Int64
comparator :: ForestOptions -> Maybe Comparator
pageCacheSize :: ForestOptions -> Maybe Int64
defaultForestOptions :: ForestOptions

-- | Compression algorithm used. <a>DEFLATE</a> is the default one.
data Compressor

-- | The raw zlib compressor
Zlib :: Compressor

-- | zlib deflate compressor
DEFLATE :: Compressor

-- | zlib gzip compressor
Gz :: Compressor

-- | LZO compressor
LZO :: Compressor

-- | LZMA compressor
LZMA :: Compressor

-- | Arcfour cipher
Arc :: Compressor

-- | General tuning options
data Options

-- | Enable compression of the keys and the values
Compress :: Options

-- | Comparator used in the tree. <a>Lexical</a> by default.
data Comparator
Lexical :: Comparator
Decimal :: Comparator
makeForest :: FilePath -> LoggingOptions -> ForestOptions -> Mode -> IO Forest
openForest :: FilePath -> LoggingOptions -> Mode -> IO Forest
instance Show ForestOptions
instance Read ForestOptions
instance Eq ForestOptions
instance Ord ForestOptions
instance WithDB Forest


-- | Plain text database.
--   
--   Plain text file handled as a database.
--   
--   <ul>
--   <li>Persistence: <i>persistent</i></li>
--   <li>Algorithm: <i>plain text</i></li>
--   <li>Complexity: <i>undefined</i></li>
--   <li>Sequence: <i>stored order</i></li>
--   <li>Lock unit: <i>record (rwlock)</i></li>
--   </ul>
module Database.KyotoCabinet.DB.Text
data Text
makeText :: FilePath -> LoggingOptions -> Mode -> IO Text
openText :: FilePath -> LoggingOptions -> Mode -> IO Text
instance WithDB Text
