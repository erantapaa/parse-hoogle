-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Kyoto Cabinet DB bindings
--   
--   Kyoto Cabinet is a library of routines for managing a database. The
--   database is a simple data file containing records, each is a pair of a
--   key and a value. Every key and value is serial bytes with variable
--   length. Both binary data and character string can be used as a key and
--   a value. Each key must be unique within a database. There is neither
--   concept of data tables nor data types. Records are organized in hash
--   table or B+ tree.
--   
--   Kyoto Cabinet runs very fast. For example, elapsed time to store one
--   million records is 0.9 seconds for hash database, and 1.1 seconds for
--   B+ tree database. Moreover, the size of database is very small. For
--   example, overhead for a record is 16 bytes for hash database, and 4
--   bytes for B+ tree database. Furthermore, scalability of Kyoto Cabinet
--   is great. The database size can be up to 8EB (9.22e18 bytes).
--   
--   Kyoto Cabinet is written in the C++ language, and provided as API of
--   C++, C, Java, Python, Ruby, Perl, Lua and Haskell. Kyoto Cabinet is
--   available on platforms which have API conforming to C++03 with the TR1
--   library extensions. Kyoto Cabinet is a free software licensed under
--   the GNU General Public License. On the other hand, a commercial
--   license is also provided. If you use Kyoto Cabinet within a
--   proprietary software, the commercial license is required.
--   
--   Kyoto Cabinet home page: <a>http://fallabs.com/kyotocabinet/</a>
@package KyotoCabinet
@version 0.1


-- | Kyoto Cabinet DB bindings. All IO monad functions can throw
--   KcException.
--   
--   This documentation is not a complete description of the Kyoto Cabinet
--   DB interface. You will need to refer to Kyoto Cabinet DB's C API
--   documentation for the details: <a>http://fallabs.com/kyotocabinet/</a>
module Database.KyotoCabinet.Db

-- | Polymorphic database.
data KcDb

-- | Polymorphic cursor.
data KcCur

-- | Error codes.
data KcError

-- | success
KCESUCCESS :: KcError

-- | not implemented
KCENOIMPL :: KcError

-- | invalid operation
KCEINVALID :: KcError

-- | no repository
KCENOREPOS :: KcError

-- | no permission
KCENOPERM :: KcError

-- | broken file
KCEBROKEN :: KcError

-- | record duplication
KCEDUPREC :: KcError

-- | no record
KCENOREC :: KcError

-- | logical inconsistency
KCELOGIC :: KcError

-- | system error
KCESYSTEM :: KcError

-- | miscellaneous error
KCEMISC :: KcError
KCUNKNOWNERROR :: Int -> KcError

-- | Tuning parameters for database creation.
data KcTune
KcTuneType :: KcTuneType -> KcTune
KcTuneLogger :: KcLogger -> KcTune
KcTuneLogKinds :: KcLogLevel -> KcTune
KcTuneLogPx :: String -> KcTune

-- | supported by: cache hash, cache tree, file hash, file tree, directory
--   hash, directory tree
KcTuneOptions :: [KcOption] -> KcTune

-- | supported by: cache hash, cache tree, file hash, file tree
KcTuneBuckets :: Int -> KcTune

-- | supported by: cache hash, cache tree, file hash, file tree, directory
--   hash, directory tree
KcTuneCompressor :: KcCompressor -> KcTune

-- | supported by: cache hash, cache tree, file hash, file tree, directory
--   hash, directory tree
KcTuneZkey :: String -> KcTune

-- | supported by: cache hash
KcTuneCapCount :: Int -> KcTune

-- | supported by: cache hash
KcTuneCapSize :: Int -> KcTune

-- | supported by: cache tree, file tree, directory tree
KcTunePage :: Int -> KcTune

-- | supported by: cache tree, file tree, directory tree
KcTuneComparator :: KcComparator -> KcTune

-- | supported by: cache tree, file tree, directory tree
KcTunePageCache :: Int -> KcTune

-- | supported by: file hash, file tree
KcTuneAlignment :: Int -> KcTune

-- | supported by: file hash, file tree
KcTuneFbp :: Int -> KcTune

-- | supported by: file hash, file tree
KcTuneMap :: Int -> KcTune

-- | supported by: file hash, file tree
KcTuneDefrag :: Int -> KcTune
data KcTuneType
KcTypePrototypeHashDb :: KcTuneType
KcTypePrototypeTreeDb :: KcTuneType
KcTypeCacheHashDb :: KcTuneType
KcTypeCacheTreeDb :: KcTuneType
KcTypeFileHashDb :: KcTuneType
KcTypeFileTreeDb :: KcTuneType
KcTypeDirectoryHashDb :: KcTuneType
KcTypeDirectoryTreeDb :: KcTuneType
data KcLogger
KcLoggerStdout :: KcLogger
KcLoggerStderr :: KcLogger
data KcLogLevel
KcLogDebug :: KcLogLevel
KcLogInfo :: KcLogLevel
KcLogWarn :: KcLogLevel
KcLogError :: KcLogLevel
data KcOption
KcOptionSmall :: KcOption
KcOptionLinear :: KcOption
KcOptionCompress :: KcOption
data KcCompressor
KcCompressorZlib :: KcCompressor
KcCompressorDeflate :: KcCompressor
KcCompressorGzip :: KcCompressor
KcCompressorLzo :: KcCompressor
KcCompressorLzma :: KcCompressor
KcCompressorArc :: KcCompressor
data KcComparator
KcComparatorLexical :: KcComparator
KcComparatorDecimal :: KcComparator

-- | Open modes.
data KcOpenMode

-- | open as a reader
KCOREADER :: KcOpenMode

-- | open as a writer
KCOWRITER :: KcOpenMode

-- | writer creating
KCOCREATE :: KcOpenMode

-- | writer truncating
KCOTRUNCATE :: KcOpenMode

-- | auto transaction
KCOAUTOTRAN :: KcOpenMode

-- | auto synchronization
KCOAUTOSYNC :: KcOpenMode

-- | open without locking
KCONOLOCK :: KcOpenMode

-- | lock without blocking
KCOTRYLOCK :: KcOpenMode

-- | open without auto repair
KCONOREPAIR :: KcOpenMode

-- | Merge modes.
data KcMergeMode

-- | overwrite the existing value
KCMSET :: KcMergeMode

-- | keep the existing value
KCMADD :: KcMergeMode

-- | modify the existing record only
KCMREPLACE :: KcMergeMode

-- | append the new value
KCMAPPEND :: KcMergeMode

-- | An exception indicating an error in a KC operation.
data KcException
KcException :: String -> KcError -> String -> KcException

-- | Return one of these from <a>KcVisitFull</a>, <a>KcVisitEmpty</a> or
--   <a>KcFileProc</a> to update the database after a visitor access.
data KcVisitAction
KCVISNOP :: KcVisitAction
KCVISSET :: ByteString -> KcVisitAction
KCVISREMOVE :: KcVisitAction

-- | Type of a visitor function when key-value is present.
type KcVisitFull = ByteString -> ByteString -> IO KcVisitAction

-- | Type of a visitor function when key-value is absent.
type KcVisitEmpty = ByteString -> IO KcVisitAction

-- | Type of a database synchronization callback.
type KcFileProc = FilePath -> Int64 -> Int64 -> IO Bool

-- | Current KC version.
kcversion :: IO String

-- | Allocate a region on memory.
kcmalloc :: Int -> IO (Ptr a)

-- | Release a region allocated in the library.
kcfree :: Ptr a -> IO ()

-- | Get the time of day in seconds.
kctime :: IO Double

-- | Convert a string to an integer.
kcatoi :: String -> IO Int64

-- | Convert a string with a metric prefix to an integer.
kcatoix :: String -> IO Int64

-- | Convert a string to a real number.
kcatof :: String -> IO Double

-- | Get the hash value by MurMur hashing.
kchashmurmur :: ByteString -> IO Int64

-- | Get the hash value by FNV hashing.
kchashfnv :: ByteString -> IO Int64

-- | Get the quiet Not-a-Number value.
kcnan :: IO Double

-- | Get the positive infinity value.
kcinf :: IO Double

-- | Check a number is a Not-a-Number value.
kcchknan :: Double -> IO Bool

-- | Check a number is an infinity value.
kcchkinf :: Double -> IO Bool

-- | Get the readable string of an error code.
kcecodename :: Int -> IO String

-- | Create a polymorphic database object.
kcdbnew :: IO KcDb

-- | Destroy a database object.
kcdbdel :: KcDb -> IO ()

-- | Open a database file.
kcdbopen :: KcDb -> String -> [KcTune] -> [KcOpenMode] -> IO ()

-- | Close the database file.
kcdbclose :: KcDb -> IO ()

-- | Get the code of the last happened error.
kcdbecode :: KcDb -> IO KcError

-- | Get the supplement message of the last happened error.
kcdbemsg :: KcDb -> IO String

-- | Accept a visitor to a record.
kcdbaccept :: KcDb -> ByteString -> KcVisitFull -> KcVisitEmpty -> Bool -> IO ()

-- | Accept a visitor to multiple records at once.
kcdbacceptbulk :: KcDb -> [ByteString] -> KcVisitFull -> KcVisitEmpty -> Bool -> IO ()

-- | Iterate to accept a visitor for each record.
kcdbiterate :: KcDb -> KcVisitFull -> Bool -> IO ()

-- | Set the value of a record.
kcdbset :: KcDb -> ByteString -> ByteString -> IO ()

-- | Add a record.
kcdbadd :: KcDb -> ByteString -> ByteString -> IO ()

-- | Replace the value of a record.
kcdbreplace :: KcDb -> ByteString -> ByteString -> IO ()

-- | Append the value of a record.
kcdbappend :: KcDb -> ByteString -> ByteString -> IO ()

-- | Add a number to the numeric value of a record.
kcdbincrint :: KcDb -> ByteString -> Int64 -> IO Int64

-- | Add a number to the numeric value of a record.
kcdbincrdouble :: KcDb -> ByteString -> Double -> IO Double

-- | Perform compare-and-swap.
kcdbcas :: KcDb -> ByteString -> ByteString -> ByteString -> IO ()

-- | Remove a record.
kcdbremove :: KcDb -> ByteString -> IO ()

-- | Retrieve the value of a record.
kcdbget :: KcDb -> ByteString -> IO (Maybe ByteString)

-- | Retrieve the value of a record.
kcdbgetbuf :: KcDb -> ByteString -> Int -> IO (Maybe ByteString)

-- | Store records at once.
kcdbsetbulk :: KcDb -> [(ByteString, ByteString)] -> Bool -> IO Int64

-- | Remove records at once.
kcdbremovebulk :: KcDb -> [ByteString] -> Bool -> IO Int64

-- | Retrieve records at once.
kcdbgetbulk :: KcDb -> [ByteString] -> Bool -> IO [(ByteString, ByteString)]

-- | Remove all records.
kcdbclear :: KcDb -> IO ()

-- | Synchronize updated contents with the file and the device.
kcdbsync :: KcDb -> Bool -> KcFileProc -> IO ()

-- | Create a copy of the database file.
kcdbcopy :: KcDb -> FilePath -> IO ()

-- | Begin transaction.
kcdbbegintran :: KcDb -> Bool -> IO ()

-- | Try to begin transaction.
kcdbbegintrantry :: KcDb -> Bool -> IO ()

-- | End transaction.
kcdbendtran :: KcDb -> Bool -> IO ()

-- | Dump records into a file.
kcdbdumpsnap :: KcDb -> FilePath -> IO ()

-- | Load records from a file.
kcdbloadsnap :: KcDb -> FilePath -> IO ()

-- | Get the number of records.
kcdbcount :: KcDb -> IO Int64

-- | Get the size of the database file.
kcdbsize :: KcDb -> IO Int64

-- | Get the path of the database file.
kcdbpath :: KcDb -> IO String

-- | Get the miscellaneous status information.
kcdbstatus :: KcDb -> IO String

-- | Get keys matching a prefix string.
kcdbmatchprefix :: KcDb -> ByteString -> Int -> IO [ByteString]

-- | Get keys matching a regular expression string.
kcdbmatchregex :: KcDb -> ByteString -> Int -> IO [ByteString]

-- | Merge records from other databases.
kcdbmerge :: KcDb -> [KcDb] -> KcMergeMode -> IO ()

-- | Create a cursor object.
kcdbcursor :: KcDb -> IO KcCur

-- | Destroy a cursor object.
kccurdel :: KcCur -> IO ()

-- | Accept a visitor to the current record.
kccuraccept :: KcCur -> KcVisitFull -> Bool -> Bool -> IO ()

-- | Remove the current record.
kccurremove :: KcCur -> IO ()

-- | Get the key of the current record.
kccurgetkey :: KcCur -> Bool -> IO ByteString

-- | Get the value of the current record.
kccurgetvalue :: KcCur -> Bool -> IO ByteString

-- | Get a pair of the key and the value of the current record.
kccurget :: KcCur -> Bool -> IO (ByteString, ByteString)

-- | Jump the cursor to the first record for forward scan.
kccurjump :: KcCur -> IO ()

-- | Jump the cursor to a record for forward scan.
kccurjumpkey :: KcCur -> ByteString -> IO ()

-- | Jump the cursor to the last record for backward scan.
kccurjumpback :: KcCur -> IO ()

-- | Jump the cursor to a record for backward scan.
kccurjumpbackkey :: KcCur -> ByteString -> IO ()

-- | Step the cursor to the next record.
kccurstep :: KcCur -> IO ()

-- | Step the cursor to the previous record.
kccurstepback :: KcCur -> IO ()

-- | Get the database object.
kccurdb :: KcCur -> IO KcDb

-- | Get the code of the last happened error.
kccurecode :: KcCur -> IO KcError

-- | Get the supplement message of the last happened error.
kccuremsg :: KcCur -> IO String

-- | Brackets a db command between <a>kcdbnew</a>, <a>kcdbopen</a>,
--   <a>kcdbclose</a>, and <a>kcdbdel</a> calls.
kcwithdbopen :: FilePath -> [KcTune] -> [KcOpenMode] -> (KcDb -> IO a) -> IO a

-- | Brackets a cursor command between <a>kcdbcursor</a> and
--   <a>kccurdel</a> calls.
kcwithdbcursor :: KcDb -> (KcCur -> IO a) -> IO a

-- | Brackets a db command between <a>kcdbbegintran</a> and
--   <a>kcdbendtran</a> calls, committing on successful completion of the
--   command, and aborting on exception.
kcwithdbtran :: KcDb -> Bool -> IO a -> IO a
instance Typeable KcException
instance Eq KcError
instance Show KcError
instance Eq KcOpenMode
instance Show KcOpenMode
instance Eq KcMergeMode
instance Show KcMergeMode
instance Eq KcException
instance Show KcException
instance Eq KcCur
instance Show KcComparator
instance Show KcCompressor
instance Show KcOption
instance Show KcLogLevel
instance Show KcLogger
instance Show KcTuneType
instance Show KcTune
instance Exception KcException
instance Storable KcRec
instance Storable KcStr
