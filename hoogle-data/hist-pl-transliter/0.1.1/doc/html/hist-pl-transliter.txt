-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple EDSL for transliteration rules
--   
--   The library provides a simple embedded domain specific language for
--   defining transliteration rules. Additionally, the library includes a
--   set of rules prepared (within the SYNAT project) for documents
--   collected throughout the IMPACT project (available at
--   <a>http://dl.psnc.pl/activities/projekty/impact/results/</a>).
--   
--   A transliteration system, developed independently within the IMPACT
--   project, may be also of interest. It can be found at
--   <a>https://bitbucket.org/jsbien/pol</a>.
@package hist-pl-transliter
@version 0.1.1


-- | The module provides a simple embedded domain specific language for
--   defining transliteration rules. All parsers are case-insensitive by
--   default.
module NLP.HistPL.Transliter

-- | A set of transliteration rules.
data TrRules
TrRules :: [Parser String] -> [Parser String] -> TrRules

-- | Word-level rule is applied only when it matches the entire word.
wordRules :: TrRules -> [Parser String]

-- | Character-level rule is always applied when a match is found.
charRules :: TrRules -> [Parser String]

-- | Transliterate the word with the given set of transliteration rules.
transliter :: TrRules -> String -> String

-- | A parser data type.
type Parser = Parsec String ()

-- | Case insensitive string parser.
ciString :: String -> Parser String

-- | Case insensitive character parser.
ciChar :: Char -> Parser Char

-- | A transliteration rule, e.g. ("abc" #&gt; "bcd") will substitute all
--   "abc" (sub)string instances with "bcd".
(#>) :: String -> String -> Parser String

-- | Similar to `#&gt;`, but this function allows to define a custom parser
--   for the string which should be substituted with another string.
(>#>) :: Parser String -> String -> Parser String

-- | Concatentation of parsers.
(>+>) :: Parser String -> Parser String -> Parser String

-- | OR parser, i.e. a parser which tries to match the first string
--   argument, and only tries the second one if the first match failed.
(.|) :: String -> String -> Parser String

-- | Similar to <a>.|</a>, but accepts a parser as the first argument.
(.|.) :: Parser String -> String -> Parser String


-- | A set of transliteration rules prepared for documents from the IMPACT
--   project.
--   
--   <pre>
--   &gt;&gt;&gt; import NLP.HistPL.Transliter.Impact
--   
--   &gt;&gt;&gt; putStrLn $ transliter impactRules "angol"
--   "anjo≈Ç"
--   </pre>
module NLP.HistPL.Transliter.Impact

-- | A set of transliteration rules prepared for documents from the IMPACT
--   project.
impactRules :: TrRules
