-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | BrainFuck interpreter
--   
@package haskell-brainfuck
@version 0.1.0.0


-- | Provides a type and operations to implement the brainfuck tape. The
--   tape has the concept of a pointer, and the pointer can be incremented
--   or decremented.
module HaskBF.Tape

-- | Brainfuck tape. Constructor arguments correspond to - - 1. left of the
--   current pointer - 2. current pointed value - 3. right of the current
--   pointer - - The left part of the tape is reversed, so the first
--   element of the list - is the rightmost position. The right list is
--   normal order, its first element - is the leftmost one.
data Tape t
Tape :: [t] -> t -> [t] -> Tape t

-- | Type for execution errors, trying to move the tape beyond one of its -
--   ends. The <a>String</a> argument is the error message and the
--   <a>Tape</a> is in - the state right before the faulting operation
data ExecutionError a

-- | Read the pointed element
rTape :: Tape t -> t

-- | Write element to the current position in the tape
wTape :: t -> Tape t -> Tape t

-- | Increment the currently pointed element
inc :: Num a => Tape a -> Tape a

-- | Decrement the currently pointed element
dec :: Num a => Tape a -> Tape a

-- | Move the pinter to the right
right :: Tape a -> Either (ExecutionError a) (Tape a)

-- | Move the pinter to the left
left :: Tape a -> Either (ExecutionError a) (Tape a)

-- | Execution error type for basic Brainfuck tapes
type BFExError = ExecutionError Int8

-- | Brainfuck tapes type
type BFTape = Tape Int8

-- | A <tt>(0 :: <a>Int8</a>)</tt> initialized, infinite <a>Tape</a>
--   pointing to its - leftmost position. An attemp to move the pointer
--   left will result - in an error
blankTape :: BFTape
instance Show t => Show (Tape t)
instance Error BFExError


module HaskBF.Parser

-- | A program is a list of <a>Op</a>s. One possible <a>Op</a> is a
--   <a>Loop</a> of other <a>Op</a>s
type Program = [Op]

-- | Brainfuck operations
data Op

-- | Increment the byte pointer: <tt> "&gt;" </tt>
IncP :: Op

-- | Decrement the byte pointer: <tt> "&lt;" </tt>
DecP :: Op

-- | Increment the byte pointed by the pointer: <tt> "+" </tt>
Inc :: Op

-- | Decrement the byte pointed by the pointer: <tt> "-" </tt>
Dec :: Op

-- | Write the byte pointed by the pointer (side-effect): <tt> "." </tt>
PutByte :: Op

-- | Read a byte, write at the current location (side-effect): <tt> ","
--   </tt>
GetByte :: Op

-- | Loop over <a>Op</a>s untill current <tt> == 0 </tt>: <tt> "[...]"
--   </tt>
Loop :: [Op] -> Op

-- | Parse program stream. Returns an error or the parsed <a>Program</a>
parseProgram :: ByteString -> Either ParseError Program
instance Show Op
instance Eq Op


-- | This module exports functions that allow to evaluate a BrainFuck
--   program. Evaluation supports two types of error, parsing and
--   execution, by returning instances of <a>EvalResult</a>
--   
--   This module should be all library users need to import.
module HaskBF.Eval

-- | Evaluate a parsed BrainFuck program using I/O provided by the given -
--   <a>Machine</a> - - The result is either an execution error or the
--   <a>BFTape</a> representing the - resulting state of the tape after the
--   last instruction was executed.
eval :: Monad m => Machine m -> Program -> m (Either BFExError BFTape)

-- | Evaluate an unparsed BrainFuck program using I/O provided by the given
--   - <a>Machine</a> - - The result is returned as an <a>EvalResult</a>
evalBS :: Monad m => Machine m -> ByteString -> m EvalResult

-- | Evaluate an unparsed BrainFuck program using I/O provided by the given
--   - <a>Machine</a> - - The result is returned as an <a>EvalResult</a>
evalStr :: Monad m => Machine m -> String -> m EvalResult

-- | Evaluation result of an unparsed BrainFuck program
data EvalResult

-- | Parsing and evaluation were successful. The resulting - state of the
--   tape after the last instruction - was executed.
EvalSuccess :: BFTape -> EvalResult

-- | The program was parsed successfully but evaluation - failed. - The
--   reason for failure is overflowing a limit of the tape. - The state of
--   the tape before the error is included
EvalExecError :: BFExError -> EvalResult

-- | The program can not be parsed. Parsing error message is - included
EvalParseError :: ParseError -> EvalResult

-- | Underlying input output for the evaluation machine. Changing the monad
--   <tt>m</tt> - achives different results. For instance using the
--   <a>IO</a> monad an evaluator can - be created that does input<i>output
--   to stdin</i>stdout. If the monad is <a>State</a>, - for instance,
--   input/output can happen in memory. - - We offer two implementations of
--   <a>Machine</a>: - - * <a>defaultIOMachine</a>: under the <a>IO</a>
--   monad, does input/output using the - standard streams - *
--   <a>simulatorMachine</a>: under the <a>State</a> monad, does
--   input/output on lists - - It's easy to create other <a>Machine</a>s by
--   using different monads and - functions.
data Machine m
Machine :: (Int8 -> m ()) -> m Int8 -> Machine m

-- | Write a byte to the output, under monad <tt>m</tt>
putByte :: Machine m -> Int8 -> m ()

-- | Get a byte under the <tt>m</tt> monad
getByte :: Machine m -> m Int8

-- | A <a>Machine</a> that can evaluate code under the <a>IO</a> monad by
--   doing I/O - to stdin/stout. - - Bytes are read by comnverting them
--   from the ASCII code
defaultIOMachine :: Machine IO

-- | A <a>Machine</a> that can evaluate program doing in-memory I/O under
--   the <a>State</a> - monad. It stores state as <a>SimState</a>
simulatorMachine :: Machine (State SimState)

-- | State used by <a>simulatorMachine</a> to evaluate code under the
--   <a>State</a> monad - - It maintains input and output bytes inside
--   lists
data SimState
SimState :: [Int8] -> [Int8] -> SimState

-- | Extract the output stream from a <a>simulatorMachine</a> state
simStateOutput :: SimState -> [Int8]

-- | Initial <a>simulatorMachine</a> state
emptyState :: SimState
