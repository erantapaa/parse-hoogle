-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generalized Pitch Class Sets for Haskell.
--   
--   An implementation of musical pitch class sets for Haskell. This
--   library is capable of handling standard 12-tone pitch class sets and
--   tone rows. However, it is also capable of handling GENERAL pitch class
--   sets, which may come from alternative equal temperament systems.
@package gpcsets
@version 0.9.2.0

module Data.PcSets.Notes
test :: Int

module Data.PcSets.Catalog
test :: Int


-- | The basic module for working with Pitch Class Sets of all kinds,
--   including Tone Rows. The broadest datatypes (<a>GenSet</a> and
--   <a>GenRow</a>) can model any equal temperament system; the standard
--   datatypes (<a>StdSet</a> and <a>StdRow</a>) model <i>12 Tone Equal
--   Temperament</i> (12-TET).
module Data.PcSets

-- | The broadest class of Pitch Class Set. All members of this class have
--   a <a>modulus</a> which restricts their <a>elements</a> in some way.
--   They also have <a>pMap</a>, a method for lifting integer list
--   functions to act on set elements. The <a>modulus</a> corresponds to
--   the underlying system of equivalent pitch classes, for example, 12-TET
--   = modulus 12.
class PcSet a
modulus :: PcSet a => a -> Int
elements :: PcSet a => a -> [Int]
pMap :: PcSet a => ([Int] -> [Int]) -> a -> a

-- | Selective Pitch Class Sets can have <a>elements</a> in a range of
--   values permitted by their <a>modulus</a>. They can have as few as 0
--   (the empty set) or as many as all. The set <a>complement</a> operation
--   only makes sense for <a>Selective</a> sets.
class PcSet a => Selective a
complement :: Selective a => a -> a

-- | Inclusive Pitch Class Sets, or Tone Rows, have all the possible
--   <a>elements</a> permitted by their <a>modulus</a>. The most important
--   characteristic of a Tone Row is not its <a>elements</a>, but the
--   <i>ordering</i> of its <a>elements</a>.
class PcSet a => Inclusive a
reconcile :: Inclusive a => Int -> a -> a

-- | General Pitch Class Set. This represents a Pitch Class Set that can
--   have a <a>modulus</a> of any positive integer value, representing the
--   number of equivalent pitch classes in a given system; for example,
--   19-TET would be a modulus 19 set. The members of a the set can be as
--   few as zero and as many as all possible values.
data GenSet

-- | Standard Pitch Class Set. This represents the traditional definition
--   of a pitch class set, based on 12-TET, with the pitch classes numbered
--   C = 0, C#/Db = 1, D = 2, and so on up to B = 11. This set can have
--   anywhere from zero to 12 members (the empty set vs. the chromatic
--   scale).
data StdSet

-- | General Tone Row. A <i>Tone Row</i> is a collection of all possible
--   Pitch Class Set <a>elements</a> within a given <a>modulus</a>. Since
--   it contains all elements, the significant information in this type of
--   set is the ordering of the <a>elements</a>. This set always has a
--   length equal to its <a>modulus</a>.
data GenRow

-- | Standard Tone Row. This is the traditional Tone Row, a collection of
--   all the elements <tt>[0..11]</tt>, based on 12-TET. As with
--   <a>GenRow</a>, the most significant information in this type of set is
--   the ordering of the elements. Since this is always a complete set,
--   this set always has a length of 12.
data StdRow

-- | Constructor for General Pitch Class Sets. This constructor accepts any
--   <tt>Int</tt> value for <a>modulus</a>, and any <tt>[Int]</tt> values
--   for an input list. Zero <a>modulus</a> always returns an empty set; a
--   negative <a>modulus</a> is always taken as positive (since the number
--   represent the <i>absolute</i> size of the equivalence class).
genset :: Int -> [Int] -> GenSet

-- | Constructor for Standard Pitch Class Sets. This constructor accepts
--   any <tt>[Int]</tt> values for elements. The <a>modulus</a> is always
--   12 (12-TET).
stdset :: [Int] -> StdSet

-- | Constructor for General Tone Rows. This constructor accepts any
--   <tt>Int</tt> value for <a>modulus</a>, and any <tt>[Int]</tt> values
--   for an input list. Zero <a>modulus</a> always returns an empty set; a
--   negative <a>modulus</a> is always taken as positive (see
--   <a>GenSet</a>). If the input list of <a>elements</a> is incomplete,
--   the remaining <a>elements</a> are filled in at the end, in order.
genrow :: Int -> [Int] -> GenRow

-- | Constructor for Standard Tone Rows. This constructor accepts any
--   <tt>[Int]</tt> values for an input list. The <a>modulus</a> is always
--   12 (12-TET). If the input list of <a>elements</a> is incomplete, the
--   remaining <a>elements</a> are filled in at the end, in order.
stdrow :: [Int] -> StdRow

-- | Returns a new <a>PcSet</a> which is the original transposed by
--   <i>n</i>.
transpose :: PcSet a => Int -> a -> a

-- | Returns a new <a>PcSet</a> which is the <i>standard inverse</i> of the
--   original, that is, about an axis containing pitch class 0.
invert :: PcSet a => a -> a

-- | Inversion around an axis specified by pitch classes <i>x</i> and
--   <i>y</i>. This inverts the set in such a way that <i>x</i> becomes
--   <i>y</i> and <i>y</i> becomes <i>x</i>.
invertXY :: PcSet a => Int -> Int -> a -> a

-- | Returns a new <a>PcSet</a> in which the elements have been transposed
--   so that the first element is zero.
zero :: PcSet a => a -> a

-- | Returns a new <a>PcSet</a> with the elements of the original reversed.
retrograde :: PcSet a => a -> a

-- | Returns a new <a>PcSet</a> with the elements shifted <i>n</i> places
--   to the left.
rotate :: PcSet a => Int -> a -> a

-- | Returns a <a>Selective</a> <a>PcSet</a> in which the elements of the
--   original have been sorted in ascending order. (Note this is restricted
--   to Sets, as sorting a Tone Row produces only an ascending chromatic
--   scale.)
sort :: (PcSet a, Selective a) => a -> a

-- | Returns a <a>Selective</a> <a>PcSet</a> in which the elements of the
--   original have been put into <i>normal form</i>. This can be defined as
--   an ascending order in which the elements fit into the smallest overall
--   interval. In the event of a tie, the arrangement with the closest
--   leftward packing is chosen.
normal :: (PcSet a, Selective a) => a -> a

-- | Returns a <a>Selective</a> <a>PcSet</a> in which the elements of the
--   original have been put into <i>reduced form</i>. This can be thought
--   of as the <a>normal</a> form, transposed so that the first element
--   starts on <a>zero</a>.
reduced :: (PcSet a, Selective a) => a -> a

-- | Returns a <a>Selective</a> <a>PcSet</a> in which the elements of the
--   original have been put into <i>prime form</i>. A prime form is able to
--   generate all the members of its set family through the some
--   combination of the operations <a>transpose</a>, <a>invert</a>, and
--   simple permutation.
prime :: (PcSet a, Selective a) => a -> a

-- | Returns the number of elements in a <a>Selective</a> <a>PcSet</a>.
cardinality :: (PcSet a, Selective a) => a -> Int

-- | Binary Value. For a given <a>Selective</a> <a>PcSet</a>, this returns
--   a <i>unique</i> number relating to the elements of the set -- a
--   measure of the <a>leftward packing</a> of the sorted set (overall
--   closeness of each element to zero).
binaryValue :: (PcSet a, Selective a) => a -> Integer

-- | Ascending Vector. If the elements of a <a>Selective</a> <a>PcSet</a>
--   are taken to be in strictly ascending order, the ascending vector is
--   the interval difference between each element.
avec :: (PcSet a, Selective a) => a -> [Int]

-- | Common Tone Vector: finds the number of common tones for each possible
--   value of <i>n</i> in the operation <a>transpose</a> <i>n</i> .
--   <a>invert</a>. Returns a list where element 0 is the number of common
--   tones with <i>n</i>=0, element 1 is with <i>n</i>=1, and so on.
cvec :: (PcSet a, Selective a) => a -> [Int]

-- | Interval Vector. Each element of the interval vector represents the
--   number of intervals in the set for that particular interval class.
--   Element 0 measures the number of 1-interval leaps; element 1 measures
--   the number of 2-interval leaps, and so on, up to half of the modulus
--   <i>m</i>.
ivec :: (PcSet a, Selective a) => a -> [Int]

-- | Returns a new Tone Row in which the elements are <i>Prograde</i> (in
--   their original order) and transposed so that the first element is
--   <i>n</i>.
rowP :: (PcSet a, Inclusive a) => Int -> a -> a

-- | Returns a new Tone Row in which the elements are <i>Retrograde</i>
--   (reversed compared to their original order) and transposed so that the
--   first element is <i>n</i>.
rowR :: (PcSet a, Inclusive a) => Int -> a -> a

-- | Returns a new Tone Row in which the elements have been <i>Inverted</i>
--   (see <a>invert</a>) and transposed so that the first element is
--   <i>n</i>.
rowI :: (PcSet a, Inclusive a) => Int -> a -> a

-- | Returns a new Tone Row in which the elements are both
--   <i>Retrograde</i> and <i>Inverted</i>, and transposed so that the
--   first element is <i>n</i>.
rowRI :: (PcSet a, Inclusive a) => Int -> a -> a
instance Eq StdRow
instance Ord StdRow
instance Show StdRow
instance Eq GenRow
instance Ord GenRow
instance Show GenRow
instance Eq StdSet
instance Ord StdSet
instance Show StdSet
instance Eq GenSet
instance Ord GenSet
instance Show GenSet
instance Inclusive StdRow
instance PcSet StdRow
instance Inclusive GenRow
instance PcSet GenRow
instance Selective StdSet
instance PcSet StdSet
instance Selective GenSet
instance PcSet GenSet


-- | This module translates Pitch Class Sets to and from <i>Compact
--   Format</i>. In Compact Format, data such as StdSet [0,4,7,11] could be
--   represented by the string 047B, which uses a single alphanumeric
--   character for each pitch class element.
--   
--   Limitations: this module is only usable for pitch class sets of
--   modulus 36 or below. Beyond that, it's not really certain that a
--   compact format would be of any practical use.
module Data.PcSets.Compact

-- | Creates a new General Pitch Class Set of modulus <i>n</i>.
--   Alphanumeric character values 0-9 and A-Z represent the numbers 0 to
--   36. Other inputs, including whitespace, are ignored.
toGenSet :: Int -> String -> GenSet

-- | Creates a new Standard (modulus 12) Pitch Class Set. Here, input
--   characters 0-9 count as their decimal equivalents; the letter <i>A</i>
--   stands for 10, and the letter <i>B</i> stands for 11. Other inputs,
--   including whitespace, are ignored.
toStdSet :: String -> StdSet

-- | Creates a new Standard (modulus 12) Pitch Class Set, using an
--   alternative duodecimal format. Here, input characters 0-9 count as
--   their decimal equivalents; the letter <i>T</i> stands for 10, and the
--   letter <i>E</i> stands for 11. Other inputs, including whitespace, are
--   ignored.
toStdSet' :: String -> StdSet

-- | Creates a new General Tone Row of modulus <i>n</i>. Alphanumeric
--   character values 0-9 and A-Z represent the numbers 0 to 36. Other
--   inputs, including whitespace, are ignored. Since Tone Rows must
--   contain all possible elements, an incomplete entry list will result in
--   a new row with the missing tones added at the end.
toGenRow :: Int -> String -> GenRow

-- | Creates a new Standard (modulus 12) Tone Row. Here, input characters
--   0-9 count as their decimal equivalents; the letter <i>A</i> stands for
--   10, and the letter <i>B</i> stands for 11. Other inputs, including
--   whitespace, are ignored. (Also, see notes for <a>toGenRow</a>.)
toStdRow :: String -> StdRow

-- | Creates a new Standard (modulus 12) Tone Row, using an alternative
--   duodecimal format. Here, input characters 0-9 count as their decimal
--   equivalents; the letter <i>T</i> stands for 10, and the letter
--   <i>E</i> stands for 11. Other inputs, including whitespace, are
--   ignored. (Also, see notes for <a>toGenRow</a>.)
toStdRow' :: String -> StdRow

-- | Translates a Pitch Class Set or Tone Row to Compact Format. Values
--   from 0-9 are translated as the characters 0-9; values from 10 to 35
--   are translated as charaters A-Z. Values which are out of the
--   representable range are ignored, therefore this function is not
--   suitable for sets of modulus 37 or greater.
compact :: PcSet a => a -> String

-- | This function is identical to <a>compact</a>, except that Standard
--   (modulus 12) sets and rows are rendered using <tt>T</tt> for 10 and
--   <tt>E</tt> for 11.
compact' :: PcSet a => a -> String


-- | This module produces simple representations of Pitch Class Sets
--   suitable for use in Scalable Vector Graphics. By default it does not
--   generate the files -- instead, it generates a printable string, which
--   can be captured to standard output or directed to a file at your
--   discretion.
module Data.PcSets.Svg

-- | The basic idea: generate SVG data for an input pitch class set.
pcSvg :: PcSet a => a -> String

-- | Same as <a>pcSvg</a>, but includes an <i>invertXY</i> style axis.
pcSvgAx :: PcSet a => a -> (Int, Int) -> String

-- | Same as <a>pcSvg</a> but allows a custom <a>Rendering</a>.
pcSvg' :: PcSet a => Rendering -> a -> String

-- | Same as <a>pcSvgAx</a>, but allows a custom <a>Rendering</a>.
pcSvgAx' :: PcSet a => Rendering -> a -> (Int, Int) -> String

-- | Stores the rendering information for the SVG file.
data Rendering
Rendering :: Int -> String -> String -> String -> String -> Float -> Float -> Float -> Rendering

-- | sets the (square) image dimensions
pxSize :: Rendering -> Int

-- | line color for the main structures
lnColor :: Rendering -> String

-- | pitch class set color
psColor :: Rendering -> String

-- | complementary set color
csColor :: Rendering -> String

-- | axis color
axColor :: Rendering -> String

-- | proportion of main circle compared to image
relMain :: Rendering -> Float

-- | proportion of elements compared to main circle
relElem :: Rendering -> Float

-- | proportion of axis (if any) compared to image
relAxis :: Rendering -> Float

-- | The Standard <a>Rendering</a> is a 500x500 image using black lines,
--   with elements of the set in red, the complement in black, and any axis
--   in blue. The pitch class set circle is 80% of the frame, each element
--   is 10% of the main circle's size, and any axis is 95% frame size.
stdRen :: Rendering
instance Show PTag
instance Show Tag
instance Show Attr
