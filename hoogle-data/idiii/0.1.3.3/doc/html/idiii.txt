-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | ID3v2 (tagging standard for MP3 files) library
--   
--   ID3v2 (tagging standard for MP3 files) library
@package idiii
@version 0.1.3.3

module ID3.Type.Flags
flagsToWord8 :: (Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool) -> Word8


-- | UNSYNCHRONISATION
--   
--   This module contents a couple of functions to convert readed bytes (as
--   [<a>Word8</a>]) of synchronized values to unsynchronised
--   <a>Integer</a>.
--   
--   <i>UNSYNCRONISATION</i>
--   
--   The only purpose of unsynchronisation is to make the ID3v2 tag as
--   compatible as possible with existing software and hardware. There is
--   no use in <tt>unsynchronising</tt> tags if the file is only to be
--   processed only by ID3v2 aware software and hardware. Unsynchronisation
--   is only useful with tags in MPEG 1/2 layer I, II and III, MPEG 2.5 and
--   AAC files.
--   
--   <ol>
--   <li><i>The unsynchronisation scheme</i></li>
--   </ol>
--   
--   Whenever a false synchronisation is found within the tag, one zeroed
--   byte is inserted after the first false synchronisation byte. The
--   format of synchronisations that should be altered by ID3 syncIntegerrs
--   is as follows:
--   
--   <pre>
--   %11111111 111xxxxx
--   </pre>
--   
--   and should be replaced with:
--   
--   <pre>
--   %11111111 00000000 111xxxxx
--   </pre>
--   
--   This has the side effect that all $FF 00 combinations have to be
--   altered, so they will not be affected by the decoding process.
--   Therefore all the $FF 00 combinations have to be replaced with the $FF
--   00 00 combination during the unsynchronisation.
--   
--   To indicate usage of the unsynchronisation, the unsynchronisation flag
--   in the frame header should be set. This bit MUST be set if the frame
--   was altered by the unsynchronisation and SHOULD NOT be set if
--   unaltered. If all frames in the tag are unsynchronised the
--   unsynchronisation flag in the tag header SHOULD be set. It MUST NOT be
--   set if the tag has a frame which is not unsynchronised.
--   
--   Assume the first byte of the audio to be $FF. The special case when
--   the last byte of the last frame is $FF and no padding nor footer is
--   used will then introduce a false synchronisation. This can be solved
--   by adding a footer, adding padding or unsynchronising the frame and
--   add $00 to the end of the frame data, thus adding more byte to the
--   frame size than a normal unsynchronisation would. Although not
--   preferred, it is allowed to apply the last method on all frames ending
--   with $FF.
--   
--   It is preferred that the tag is either completely unsynchronised or
--   not unsynchronised at all. A completely unsynchronised tag has no
--   false synchonisations in it, as defined above, and does not end with
--   $FF. A completely non-unsynchronised tag contains no unsynchronised
--   frames, and thus the unsynchronisation flag in the header is cleared.
--   
--   Do bear in mind, that if compression or encryption is used, the
--   unsynchronisation scheme MUST be applied afterwards. When decoding an
--   unsynchronised frame, the unsynchronisation scheme MUST be reversed
--   first, encryption and decompression afterwards.
--   
--   <ol>
--   <li><i>Synchsafe integers</i></li>
--   </ol>
--   
--   In some parts of the tag it is inconvenient to use the
--   unsychronisation scheme because the size of unsynchronised data is not
--   known in advance, which is particularly problematic with size
--   descriptors. The solution in ID3v2 is to use synchsafe integers, in
--   which there can never be any false synchs. Synchsafe integers are
--   integers that keep its highest bit (bit 7) zeroed, making seven bits
--   out of eight available. Thus a 32 bit synchsafe integer can store 28
--   bits of information.
--   
--   Example:
--   
--   <pre>
--   255 (%11111111) syncIntegerd as a 16 bit synchsafe integer is 383
--   (%00000001 01111111).
--   </pre>
--   
--   (<a>http://www.id3.org/id3v2.4.0-structure</a>)
module ID3.Parser.UnSync

-- | converting list of bytes to <a>Integer</a> value
wordsToInteger :: [Word8] -> Integer

-- | unsynchronisation between <a>Integer</a>s
unSyncInteger :: Integer -> Integer

-- | unsychronisation (just <tt>unSyncInteger . wordsToInteger</tt>)
unSynchronise :: [Word8] -> Integer

-- | converting <a>Integer</a> value to list of bytes
integerToWords :: Int -> Integer -> [Word8]

-- | synchronisation between <a>Integer</a>s
syncInteger :: Integer -> Integer

-- | sychronisation (just <tt>integerToWords 4 . syncInteger</tt>)
synchronise :: Integer -> [Word8]

module ID3.Type.Unparse
class Parsed a
unparse :: Parsed a => a -> [Word8]
data Str
Str :: String -> Str
data Inf
Inf :: [(String, String)] -> Inf
class HasSize a where updateSize x = size ^= (x ^. size) $ x
size :: HasSize a => Accessor a Integer
updateSize :: HasSize a => a -> a
instance Eq Str
instance Eq Inf
instance Parsed Inf
instance Show Inf
instance Parsed Str
instance Parsed Integer

module ID3.Type.Header

-- | <i>ID3v2 HEADER OVERVIEW</i>
--   
--   The first part of the ID3v2 tag is the 10 byte tag header, laid out as
--   follows:
--   
--   <pre>
--   ID3v2/file identifier      "ID3"
--   ID3v2 version              $04 00
--   ID3v2 flags                %abcd0000
--   ID3v2 size             4 * %0xxxxxxx
--   </pre>
--   
--   The first three bytes of the tag are always "ID3", to indicate that
--   this is an ID3v2 tag, directly followed by the two version bytes. The
--   first byte of ID3v2 version is its major version, while the second
--   byte is its revision number. In this case this is ID3v2.4.0. All
--   revisions are backwards compatible while major versions are not. If
--   software with ID3v2.4.0 and below support should encounter version
--   five or higher it should simply ignore the whole tag.
data ID3Header
ID3Header :: TagVersion -> TagFlags -> TagSize -> ID3Header

-- | id3v2 version: <tt>[major version, revision number]</tt>
tagVersion_ :: ID3Header -> TagVersion

-- | header flags as Bool values
tagFlags_ :: ID3Header -> TagFlags

-- | full size of tag
tagSize_ :: ID3Header -> TagSize
emptyID3Header :: ID3Header
initID3Header :: [ID3Header -> ID3Header] -> ID3Header
tagVersion :: Accessor ID3Header TagVersion
tagFlags :: Accessor ID3Header TagFlags
tagSize :: Accessor ID3Header TagSize

-- | id3v2 version <tt>major version . revision number</tt>
type TagVersion = (Word8, Word8)

-- | <i>MEANING OF FLAGS</i>
--   
--   <pre>
--   ID3v2 flags                %abcd0000
--   </pre>
--   
--   The version is followed by the ID3v2 flags field, of which currently
--   four flags are used:
--   
--   <tt>a</tt> - <i>Unsynchronisation</i>
--   
--   Bit 7 in the 'ID3v2 flags' indicates whether or not unsynchronisation
--   is applied on all frames (see section 6.1 for details); a set bit
--   indicates usage.
--   
--   <tt>b</tt> - <i>Extended header</i>
--   
--   The second bit (bit 6) indicates whether or not the header is followed
--   by an extended header. The extended header is described in section
--   3.2. A set bit indicates the presence of an extended header.
--   
--   <tt>c</tt> - <i>Experimental indicator</i>
--   
--   The third bit (bit 5) is used as an 'experimental indicator'. This
--   flag SHALL always be set when the tag is in an experimental stage.
--   
--   <tt>d</tt> - <i>Footer present</i>
--   
--   Bit 4 indicates that a footer (section 3.4) is present at the very end
--   of the tag. A set bit indicates the presence of a footer.
--   
--   All the other flags MUST be cleared. If one of these undefined flags
--   are set, the tag might not be readable for a parser that does not know
--   the flags function.
data TagFlags
TagFlags :: (Bool, Bool, Bool, Bool) -> TagFlags
unsynchFlag :: TagFlags -> Bool
extendedHeaderFlag :: TagFlags -> Bool
experimentalFlag :: TagFlags -> Bool
footerFlag :: TagFlags -> Bool
anyFlagsOn :: TagFlags -> Bool
showTagFlags :: TagFlags -> String

-- | <i>SIZE BYTES</i>
--   
--   The ID3v2 tag size is stored as a 32 bit synchsafe integer (section
--   6.2), making a total of 28 effective bits (representing up to 256MB).
--   
--   The ID3v2 tag size is the sum of the byte length of the extended
--   header, the padding and the frames after unsynchronisation. If a
--   footer is present this equals to ('total size' - 20) bytes, otherwise
--   ('total size' - 10) bytes.
type TagSize = Integer
instance Show TagFlags
instance Eq TagFlags
instance Eq ID3Header
instance Parsed TagFlags
instance Parsed ID3Header
instance Show ID3Header

module ID3.Type.ExtHeader

-- | <i>EXTENDED HEADER OVERVIEW</i> (optional)
--   
--   The extended header contains information that can provide further
--   insight in the structure of the tag, but is not vital to the correct
--   parsing of the tag information; hence the extended header is optional.
--   
--   <pre>
--   Extended header size   4 * %0xxxxxxx
--   Number of flag bytes       $01
--   Extended Flags             $xx
--   </pre>
--   
--   Where the 'Extended header size' is the size of the whole extended
--   header, stored as a 32 bit synchsafe integer. An extended header can
--   thus never have a size of fewer than six bytes.
data ID3ExtHeader
initID3ExtHeader :: [ID3ExtHeader -> ID3ExtHeader] -> ID3ExtHeader
extSize :: Accessor ID3ExtHeader Integer
isUpdate :: Accessor ID3ExtHeader Bool
crcData :: Accessor ID3ExtHeader (Maybe [Word8])
restrictionsPresent :: Accessor ID3ExtHeader Bool
instance Eq ID3ExtHeader
instance Parsed ID3ExtHeader
instance Show ID3ExtHeader

module ID3.Type.FrameInfo
data FrameInfo
UFID :: String -> [Word8] -> FrameInfo
owner :: FrameInfo -> String
id :: FrameInfo -> [Word8]
Text :: Integer -> String -> FrameInfo
enc :: FrameInfo -> Integer
text :: FrameInfo -> String
TXXX :: Integer -> String -> String -> FrameInfo
enc :: FrameInfo -> Integer
descr :: FrameInfo -> String
text :: FrameInfo -> String
URL :: String -> FrameInfo
url :: FrameInfo -> String
WXXX :: Integer -> String -> String -> FrameInfo
enc :: FrameInfo -> Integer
descr :: FrameInfo -> String
url :: FrameInfo -> String
MCDI :: [Word8] -> FrameInfo
tocData :: FrameInfo -> [Word8]
ETCO :: FrameInfo
MLLT :: FrameInfo
SYTC :: FrameInfo
USLT :: Integer -> String -> String -> String -> FrameInfo
enc :: FrameInfo -> Integer
lang :: FrameInfo -> String
descr :: FrameInfo -> String
text :: FrameInfo -> String
SYLT :: Integer -> String -> Integer -> Integer -> String -> FrameInfo
enc :: FrameInfo -> Integer
lang :: FrameInfo -> String
timeFormat :: FrameInfo -> Integer
content :: FrameInfo -> Integer
descr :: FrameInfo -> String
COMM :: Integer -> String -> String -> String -> FrameInfo
enc :: FrameInfo -> Integer
lang :: FrameInfo -> String
descr :: FrameInfo -> String
text :: FrameInfo -> String
RVA2 :: FrameInfo
EQU2 :: FrameInfo
RVRB :: FrameInfo
APIC :: Integer -> String -> Word8 -> String -> [Word8] -> FrameInfo
enc :: FrameInfo -> Integer
mime :: FrameInfo -> String
picType :: FrameInfo -> Word8
descr :: FrameInfo -> String
picData :: FrameInfo -> [Word8]
GEOB :: FrameInfo
PCNT :: Integer -> FrameInfo
counter :: FrameInfo -> Integer
POPM :: String -> Integer -> Integer -> FrameInfo
email :: FrameInfo -> String
rating :: FrameInfo -> Integer
counter :: FrameInfo -> Integer
RBUF :: FrameInfo
AENC :: FrameInfo
LINK :: FrameInfo
POSS :: FrameInfo
USER :: Integer -> String -> String -> FrameInfo
enc :: FrameInfo -> Integer
lang :: FrameInfo -> String
text :: FrameInfo -> String
OWNE :: FrameInfo
COMR :: FrameInfo
ENCR :: FrameInfo
GRID :: FrameInfo
PRIV :: String -> [Word8] -> FrameInfo
ownerId :: FrameInfo -> String
privateData :: FrameInfo -> [Word8]
SIGN :: FrameInfo
ASPI :: FrameInfo
TCMP :: Bool -> FrameInfo
isPart :: FrameInfo -> Bool
Unknown :: [Word8] -> FrameInfo
frameData :: FrameInfo -> [Word8]
encodeAll :: [String] -> [Word8]
infoTextContent :: Accessor FrameInfo String
instance Eq FrameInfo
instance Show FrameInfo
instance Parsed FrameInfo

module ID3.Type.Frame
data ID3Frame
ID3Frame :: FrameHeader -> FrameInfo -> ID3Frame

-- | frame Header
frHeader_ :: ID3Frame -> FrameHeader

-- | frame Information Value
frInfo_ :: ID3Frame -> FrameInfo
emptyID3Frame :: ID3Frame
initID3Frame :: [ID3Frame -> ID3Frame] -> ID3Frame
frHeader :: Accessor ID3Frame FrameHeader
frInfo :: Accessor ID3Frame FrameInfo
textContent :: Accessor ID3Frame String
type FrameName = String

-- | Frame Header
data FrameHeader
FrameHeader :: FrameID -> FrameSize -> FrameFlags -> FrameHeader

-- | frame ID
frID_ :: FrameHeader -> FrameID

-- | frame Size
frSize_ :: FrameHeader -> FrameSize

-- | frame Flags
frFlags_ :: FrameHeader -> FrameFlags
emptyFrameHeader :: FrameHeader
initFrameHeader :: [FrameHeader -> FrameHeader] -> FrameHeader
frID :: Accessor FrameHeader FrameID
frSize :: Accessor FrameHeader FrameSize
frFlags :: Accessor FrameHeader FrameFlags
type FrameID = String
type FrameSize = Integer
data FrameFlags
FrameFlags :: StatusFlags -> FormatFlags -> FrameFlags

-- | Frame status flags
statusFlags_ :: FrameFlags -> StatusFlags

-- | Frame format flags
formatFlags_ :: FrameFlags -> FormatFlags
emptyFrameFlags :: FrameFlags
initFrameFlags :: [FrameFlags -> FrameFlags] -> FrameFlags
statusFlags :: Accessor FrameFlags StatusFlags
formatFlags :: Accessor FrameFlags FormatFlags
data StatusFlags
StatusFlags :: Word8 -> (Bool, Bool, Bool) -> StatusFlags
frameDiscardFlag :: StatusFlags -> Bool
fileDiscardFlag :: StatusFlags -> Bool
readOnlyFlag :: StatusFlags -> Bool
anyStatusFlagsOn :: StatusFlags -> Bool
showBinary :: [Word8] -> String
showStatusFlags :: StatusFlags -> String
data FormatFlags
FormatFlags :: Word8 -> (Bool, Bool, Bool, Bool, Bool) -> FormatFlags
groupPartFlag :: FormatFlags -> Bool
compressedFlag :: FormatFlags -> Bool
encryptedFlag :: FormatFlags -> Bool
unsychronisedFlag :: FormatFlags -> Bool
dataLengthIdFlag :: FormatFlags -> Bool
anyFormatFlagsOn :: FormatFlags -> Bool
showFormatFlags :: FormatFlags -> String
initFrame :: FrameID -> ID3Frame
instance Eq StatusFlags
instance Eq FormatFlags
instance Eq FrameFlags
instance Eq FrameHeader
instance Eq ID3Frame
instance Parsed FormatFlags
instance Parsed StatusFlags
instance Parsed FrameFlags
instance Show FrameFlags
instance Parsed FrameHeader
instance Show FrameHeader
instance Parsed ID3Frame
instance Show ID3Frame
instance HasSize ID3Frame

module ID3.Type.Tag
data ID3Tag
ID3Tag :: ID3Header -> Maybe ID3ExtHeader -> Map FrameID ID3Frame -> [FrameID] -> Integer -> ID3Tag
tagHeader :: ID3Tag -> ID3Header
tagExtHeader :: ID3Tag -> Maybe ID3ExtHeader
tagFrames :: ID3Tag -> Map FrameID ID3Frame
tagFramesOrder :: ID3Tag -> [FrameID]
tagPadding :: ID3Tag -> Integer
emptyID3Tag :: ID3Tag
initID3Tag :: [ID3Tag -> ID3Tag] -> ID3Tag
header :: Accessor ID3Tag ID3Header
version :: Accessor ID3Tag TagVersion
setSize :: TagSize -> ID3Tag -> ID3Tag
getFullSize :: ID3Tag -> FrameSize
getActualSize :: ID3Tag -> FrameSize
framesSize :: Map FrameID ID3Frame -> FrameSize
footerSize :: ID3Tag -> Integer
extHSize :: ID3Tag -> Integer
padding :: Accessor ID3Tag Integer
flags :: Accessor ID3Tag TagFlags
extHeader :: Accessor ID3Tag (Maybe ID3ExtHeader)
frames :: Accessor ID3Tag (Map FrameID ID3Frame)
framesOrder :: Accessor ID3Tag [FrameID]
frame :: FrameID -> Accessor ID3Tag (Maybe ID3Frame)
getFrame :: ID3Tag -> FrameID -> Maybe ID3Frame
setFrame :: ID3Tag -> FrameID -> Maybe ID3Frame -> ID3Tag
sortFrames :: Map FrameID ID3Frame -> [FrameID] -> [ID3Frame]
instance Eq ID3Tag
instance Parsed ID3Tag
instance Show ID3Tag
instance HasSize ID3Tag


-- | This module contain different general parsers.
module ID3.Parser.General

-- | Just a synonim for one item of input stream
type Token = Word8

-- | Parsers state
data St
State :: TagVersion -> TagFlags -> Integer -> Integer -> St
id3TagVersion :: St -> TagVersion

-- | flags from tag's header
headerFlags :: St -> TagFlags

-- | current position in tag , frFlags :: [Bool]} -- ^ current frame flags
tagPos :: St -> Integer

-- | current frame size
curSize :: St -> Integer
initState :: St
type CharEncoding = Integer
type TagParser = Parser St Token
run :: TagParser a -> [Word8] -> (Either String a, [Token])
tagVersionGet :: TagParser TagVersion
tagVersionSet :: TagVersion -> TagParser ()
flagsGet :: TagParser TagFlags
flagsSet :: TagFlags -> TagParser ()

-- | Returns <a>tagPos</a> from <a>St</a>.
posGet :: TagParser Integer

-- | Updates <a>tagPos</a> with given function.
posUpdate :: (Integer -> Integer) -> TagParser ()

-- | Sets <a>tagPos</a> with given value.
posSet :: Integer -> TagParser ()

-- | Decrements <a>tagPos</a>.
posDec :: TagParser ()

-- | Incremets <a>tagPos</a>.
posInc :: TagParser ()

-- | Returns <a>curSize</a> from <a>St</a>.
sizeGet :: TagParser Integer

-- | Updates <a>curSize</a> with given function.
sizeUpdate :: (Integer -> Integer) -> TagParser ()

-- | Sets <a>curSize</a> with given value.
sizeSet :: Integer -> TagParser ()

-- | Decrements <a>curSize</a>.
sizeDec :: TagParser ()

-- | Incremets <a>curSize</a>.
sizeInc :: TagParser ()

-- | Wrapper for <i>reiterative</i> parsers. Mnemonic: <tt>if
--   <a>curSize</a> &gt; 0 then</tt> continue <tt>else</tt> stop
ifSize :: TagParser [a] -> TagParser [a]

-- | Wrapper for atomic parsers. Increases <a>tagPos</a> and decreases
--   <a>curSize</a>.
withSize :: TagParser b -> TagParser b

-- | <tt><a>many'</a> p</tt> parses a list of elements with individual
--   parser <tt>p</tt>. Cannot fail, since an empty list is a valid return
--   value. Unlike default <tt>many</tt>, stops if <a>curSize</a> became 0.
many' :: TagParser a -> TagParser [a]

-- | Parse a non-empty list of items.
many1' :: TagParser a -> TagParser [a]

-- | <tt><a>manyTill'</a> p end</tt> parses a possibly-empty sequence of
--   <tt>p</tt>'s, terminated by a <tt>end</tt>.
manyTill' :: TagParser a -> TagParser z -> TagParser [a]

-- | 'manyTill1\' p end' parses a non-empty sequence of p's, terminated by
--   a end.
manyTill1' :: TagParser a -> TagParser z -> TagParser [a]

-- | Parse a list of items separated by discarded junk.
sepBy' :: TagParser a -> TagParser sep -> TagParser [a]

-- | Parse a non-empty list of items separated by discarded junk.
sepBy1' :: TagParser a -> TagParser sep -> TagParser [a]

-- | 'count n p' parses a precise number of items, n, using the parser p,
--   in sequence.
count :: (Num n, Eq n) => n -> TagParser a -> TagParser [a]

-- | <a>count</a> n p' parses a precise number of items, n, using the
--   parser p, in sequence.
count' :: (Num n, Eq n) => n -> TagParser a -> TagParser [a]

-- | Hybrid of <a>count</a> and 'sepBy\''
countSepBy' :: (Num n, Eq n) => n -> TagParser a -> TagParser sep -> TagParser [a]
encPack :: CharEncoding -> [Token] -> String

-- | Parses one value (as [Token]) till termination symbol
parseUntilWord8Null :: TagParser [Token]
parseUntilWord16Null :: TagParser [Token]
nonNull :: Parser St Token Token

-- | Parses a character-encoding <a>code</a>, a one-byte value that should
--   be 0, 1, 2, or 3
parseEncoding :: TagParser CharEncoding

-- | Parses one value and returns it as a <a>String</a>
parseString :: CharEncoding -> TagParser String

-- | Parses one value and returns it as a <a>Integer</a>
parseNumber :: TagParser Integer

-- | Parses 3 bytes of language value (as a String) and returns a pair
--   (<a>Language</a>, value)
parseLanguage :: TagParser String

-- | Takes a list of <a>Parser</a>s and applies them by turns.
parsers :: [TagParser a] -> TagParser [a]

-- | Parses given <a>Token</a>.
word8 :: Token -> TagParser Token

-- | Parses given list of <a>Token</a>s.
word8s :: [Token] -> TagParser [Token]

-- | Parses given <tt>ByteString</tt>.
byteString :: ByteString -> TagParser ByteString

-- | Same as <a>byteString</a> but argument is simple <a>String</a>.
string :: String -> TagParser ByteString

-- | Parses upper-case letters (as <a>Token</a>)
upper :: TagParser Token

-- | Parses digit-symbol (as <a>Token</a>)
digit :: TagParser Token

-- | Parses any <a>Token</a>.
anyWord8 :: TagParser Token
err :: TagParser t -> String -> TagParser t
type Size = Integer

-- | 'parseSize n unsynchDecode' parses n bytes, doing decoding of
--   <a>unsynchronized</a> data when unsynchDecode is True, and returns the
--   represented <a>Integer</a> value.
parseSize :: Integer -> Bool -> TagParser Size
instance Show St

module ID3.Parser.NativeFrames
textInfo :: String -> TagParser FrameInfo
urlInfo :: String -> Parser St Token FrameInfo
frameInfo :: String -> Parser St Token FrameInfo


-- | This Module provides parsers for frames.
module ID3.Parser.Frame
parseFrames :: TagParser ([FrameID], Map FrameID ID3Frame)

-- | Parses any Frame Header
anyFrameHeader :: TagParser (Either String FrameHeader)

-- | Parses any Frame
anyFrame :: TagParser (Either String ID3Frame)
frameID :: TagParser FrameID
frameSize :: TagParser FrameSize
frameFlags :: TagParser FrameFlags
frameStatusFlags :: Parser St Token StatusFlags
frameFormatFlags :: Parser St Token FormatFlags


-- | This module provides parsers for Extended Header
--   
--   (<a>http://www.id3.org/id3v2.4.0-structure</a>)
module ID3.Parser.ExtHeader

-- | Parses Extended Header as <a>ID3ExtHeader</a> structure
parseExtHeader :: TagParser ID3ExtHeader

module ID3.Parser.Header

-- | Parses id3v2 <tt>Header</tt>
parseHeader :: TagParser ID3Header

-- | <i>ID3v2 FOOTER</i> (optional)
--   
--   To speed up the process of locating an ID3v2 tag when searching from
--   the end of a file, a footer can be added to the tag. It is REQUIRED to
--   add a footer to an appended tag, i.e. a tag located after all audio
--   data. The footer is a copy of the header, but with a different
--   identifier.
--   
--   <pre>
--   ID3v2 identifier           "3DI"
--   ID3v2 version              $04 00
--   ID3v2 flags                %abcd0000
--   ID3v2 size             4 * %0xxxxxxx
--   </pre>
parseFooter :: TagParser ID3Header

module ID3.Type

module ID3.Parser.Tag
parseTag :: TagParser ID3Tag
parseTag_ :: ID3Header -> TagParser ID3Tag

module ID3.Parser

module ID3.ReadTag
hReadTag :: Handle -> IO (Maybe ID3Tag)
readTag :: FilePath -> IO (Maybe ID3Tag)

module ID3.WriteTag
hWriteTag :: ID3Tag -> Handle -> IO ()
writeTag :: FilePath -> ID3Tag -> IO ()

module ID3.Simple
type Tag = ID3Tag
setArtist :: String -> Tag -> Tag
setTitle :: String -> Tag -> Tag
setAlbum :: String -> Tag -> Tag
setYear :: String -> Tag -> Tag
setTrack :: String -> Tag -> Tag
getArtist :: Tag -> Maybe String
getTitle :: Tag -> Maybe String
getAlbum :: Tag -> Maybe String
getYear :: Tag -> Maybe String
getTrack :: Tag -> Maybe String
readTag :: FilePath -> IO (Maybe ID3Tag)
writeTag :: FilePath -> ID3Tag -> IO ()

module ID3
