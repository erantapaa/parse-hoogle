-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A minimalistic but extensible and precise calculator
--   
--   Hascal is both a simple but extendable calculator library for Haskell
--   as well as a command-line program using this library.
--   
--   Hascal supports addition, subtraction, multiplication, division,
--   exponentiation, and logarithm, while it's easy to add custom
--   operators.
--   
--   Hascal also supports complex numbers. Hascal can work at an arbitrary
--   precision. However, Hascal does not support parenthesis.
@package hascal
@version 2.0.0.1


-- | Hascal is both a simple but extendable calculator library for Haskell
--   and a command-line program using it.
--   
--   Also, its source code is a nice example for a minimalistic Haskell
--   project.
--   
--   Some examples for the usage of the command-line program (using bash):
--   
--   <pre>
--   &gt;&gt;&gt; hascal 1+2
--   3.0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; hascal 1+2*3-4/198^2
--   6.99989796959493929190898887868584838281807978777676
--   </pre>
--   
--   Also, preceding exclamation marks mean that the following number is
--   imaginary, that is, you have to multiply it with i. E.g.:
--   
--   <pre>
--   &gt;&gt;&gt; hascal _1 ^ 0.5
--   !1.0
--   </pre>
--   
--   And as you can see, negative numbers are preceded by an underscore.
--   
--   Although hascal itself doesn't understand brackets, you can use your
--   shell to get that functionality, like this (using bash):
--   
--   <pre>
--   &gt;&gt;&gt; hascal e ^ $(hascal i*pi)
--   -1.0
--   </pre>
--   
--   Speaking of shells, you should consider that your shell might extend
--   an asterisk (*) to the files at the current directory, like this:
--   
--   <pre>
--   &gt;&gt;&gt; echo *
--   _darcs dist hascal.cabal Hascal.hs LICENSE Main.hs README.org Setup.hs
--   </pre>
--   
--   That's why this might not work:
--   
--   <pre>
--   &gt;&gt;&gt; hascal 1 * 2
--   Error. :(
--   </pre>
--   
--   But you could do this instead:
--   
--   <pre>
--   &gt;&gt;&gt; hascal 1*2
--   2
--   </pre>
--   
--   Or, you could do:
--   
--   <pre>
--   &gt;&gt;&gt; hascal '1*2'
--   2
--   </pre>
--   
--   Yeah, that's pretty much it. Hascal is really minimalistic. And I'm
--   not planning to extend it much.
module Hascal

-- | <a>operators</a> is the default list of operators.
--   
--   An operator consists of one character and a function.
--   
--   <a>operators</a> includes:
--   
--   <ul>
--   <li>addition, represented by <tt>'+'</tt>,</li>
--   <li>subtraction, represented by <tt>'-'</tt>,</li>
--   <li>multiplication, represented by <tt>'*'</tt>,</li>
--   <li>division, represented by <tt>'/'</tt>,</li>
--   <li>exponentiation, represented by <tt>'^'</tt>, and</li>
--   <li>logarithming (with flipped arguments, see below), represented by
--   <tt>'?'</tt>,</li>
--   </ul>
--   
--   such that these laws are held:
--   
--   <pre>
--   (a - b == c) == (a == b + c)
--   (a / b == c) == (a == b * c)
--   (a ? b == c) == (a == b ^ c)
--   </pre>
operators :: RealFloat t => [(Char, Complex t -> Complex t -> Complex t)]

-- | <a>eval</a> gets a list of operators and a string containing a
--   mathematical expression/term which only uses those operators listed in
--   the first argument, and returns the result of that term.
eval :: (Read t, RealFloat t) => [(Char, Complex t -> Complex t -> Complex t)] -> String -> Either String (Complex t)

-- | <a>hascal</a> is the default evaluator:
--   
--   <pre>
--   hascal = <a>eval</a> <a>operators</a>
--   </pre>
hascal :: (Read t, RealFloat t) => String -> Either String (Complex t)

-- | <a>prettyPrint</a> prints a number nicely. E.g., it doesn't show the
--   real or imaginary part of the number if it's <tt>0</tt>.
prettyPrint :: (Show t, RealFloat t) => Complex t -> String
