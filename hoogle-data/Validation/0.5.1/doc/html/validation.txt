-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A data-type like Either but with an accumulating Applicative
--   
@package validation
@version 0.5.1


-- | Data types similar to <tt>Data.Either</tt> that are explicit about
--   failure and success.
module Data.Validation

-- | A value of the type <tt>err</tt> or <tt>a</tt>, however, the
--   <tt>Applicative</tt> instance accumulates values. This is witnessed by
--   the <tt>Semigroup</tt> context on the instance. <i>Note that there is
--   no Monad such that ap = (<a>*</a>).</i>
--   
--   <pre>
--   &gt;&gt;&gt; _Success # (+1) &lt;*&gt; _Success # 7 :: AccValidation String Int
--   AccSuccess 8
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Failure # ["f1"] &lt;*&gt; _Success # 7 :: AccValidation [String] Int
--   AccFailure ["f1"]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Success # (+1) &lt;*&gt; _Failure # ["f2"] :: AccValidation [String] Int
--   AccFailure ["f2"]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Failure # ["f1"] &lt;*&gt; _Failure # ["f2"] :: AccValidation [String] Int
--   AccFailure ["f1","f2"]
--   </pre>
data AccValidation err a
AccFailure :: err -> AccValidation err a
AccSuccess :: a -> AccValidation err a

-- | A value of the type <tt>err</tt> or <tt>a</tt> and isomorphic to
--   <tt>Data.Either</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; _Success # (+1) &lt;*&gt; _Success # 7 :: Validation String Int
--   Success 8
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Failure # ["f1"] &lt;*&gt; _Success # 7 :: Validation [String] Int
--   Failure ["f1"]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Success # (+1) &lt;*&gt; _Failure # ["f2"] :: Validation [String] Int
--   Failure ["f2"]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Failure # ["f1"] &lt;*&gt; _Failure # ["f2"] :: Validation [String] Int
--   Failure ["f1"]
--   </pre>
data Validation err a
Failure :: err -> Validation err a
Success :: a -> Validation err a

-- | The transformer version of <tt>Validation</tt>.
data ValidationT err m a
ValidationT :: m (Validation err a) -> ValidationT err m a
runValidationT :: ValidationT err m a -> m (Validation err a)

-- | The bifunctor version of ValidationT
data ValidationB m err a
ValidationB :: m (Validation err a) -> ValidationB m err a
runValidationB :: ValidationB m err a -> m (Validation err a)
type Validation' err a = ValidationT err Identity a
_Failure :: Validate f => Prism (f e1 a) (f e2 a) e1 e2
_Success :: Validate f => Prism (f e a) (f e b) a b
class Validate f where _Validation' = _ValidationV' _AccValidation = _AccValidationV _Either = _EitherV
_Validation :: Validate f => Iso (f e a) (f g b) (Validation e a) (Validation g b)
_Validation' :: Validate f => Iso (f e a) (f g b) (Validation' e a) (Validation' g b)
_AccValidation :: Validate f => Iso (f e a) (f g b) (AccValidation e a) (AccValidation g b)
_Either :: Validate f => Iso (f e a) (f g b) (Either e a) (Either g b)
instance [safe] Typeable AccValidation
instance [safe] Typeable Validation
instance [safe] (Eq err, Eq a) => Eq (AccValidation err a)
instance [safe] (Ord err, Ord a) => Ord (AccValidation err a)
instance [safe] (Show err, Show a) => Show (AccValidation err a)
instance [safe] (Data err, Data a) => Data (AccValidation err a)
instance [safe] (Eq err, Eq a) => Eq (Validation err a)
instance [safe] (Ord err, Ord a) => Ord (Validation err a)
instance [safe] (Show err, Show a) => Show (Validation err a)
instance [safe] (Data err, Data a) => Data (Validation err a)
instance [safe] Functor f => Swapped (ValidationB f)
instance [safe] Swapped Validation
instance [safe] Swapped AccValidation
instance [safe] Validate Either
instance [safe] Validate AccValidation
instance [safe] Validate Validation
instance [safe] Monad m => Monad (ValidationB m err)
instance [safe] (Apply m, Monad m) => Bind (ValidationB m err)
instance [safe] Traversable m => Bitraversable (ValidationB m)
instance [safe] Foldable m => Bifoldable (ValidationB m)
instance [safe] Functor m => Bifunctor (ValidationB m)
instance [safe] Traversable m => Traversable (ValidationB m err)
instance [safe] Foldable m => Foldable (ValidationB m err)
instance [safe] (Functor m, Monad m) => Alt (ValidationB m err)
instance [safe] Applicative m => Applicative (ValidationB m err)
instance [safe] Apply m => Apply (ValidationB m err)
instance [safe] Functor m => Functor (ValidationB m err)
instance [safe] MonadTrans (ValidationT err)
instance [safe] Monad m => Monad (ValidationT err m)
instance [safe] (Apply m, Monad m) => Bind (ValidationT err m)
instance [safe] Traversable m => Traversable (ValidationT err m)
instance [safe] Foldable m => Foldable (ValidationT err m)
instance [safe] (Functor m, Monad m) => Alt (ValidationT err m)
instance [safe] Applicative m => Applicative (ValidationT err m)
instance [safe] Apply m => Apply (ValidationT err m)
instance [safe] Functor m => Functor (ValidationT err m)
instance [safe] Monad (Validation err)
instance [safe] Bind (Validation err)
instance [safe] Bitraversable Validation
instance [safe] Bifoldable Validation
instance [safe] Bifunctor Validation
instance [safe] Traversable (Validation err)
instance [safe] Foldable (Validation err)
instance [safe] Alt (Validation err)
instance [safe] Applicative (Validation err)
instance [safe] Apply (Validation err)
instance [safe] Functor (Validation err)
instance [safe] Monoid e => Monoid (AccValidation e a)
instance [safe] Semigroup e => Semigroup (AccValidation e a)
instance [safe] Bitraversable AccValidation
instance [safe] Bifoldable AccValidation
instance [safe] Bifunctor AccValidation
instance [safe] Traversable (AccValidation err)
instance [safe] Foldable (AccValidation err)
instance [safe] Semigroup err => Alt (AccValidation err)
instance [safe] Semigroup err => Applicative (AccValidation err)
instance [safe] Semigroup err => Apply (AccValidation err)
instance [safe] Functor (AccValidation err)
