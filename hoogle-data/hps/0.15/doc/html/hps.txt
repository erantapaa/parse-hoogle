-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell Postscript
--   
@package hps
@version 0.15


-- | Unit definitions and conversions.
module Graphics.PS.Unit

-- | Convert degrees to radians.
radians :: Floating a => a -> a

-- | Convert millimeters to PS points.
mm_pt :: Floating a => a -> a


-- | Paper sizes. For ISO sizes see
--   <a>http://www.cl.cam.ac.uk/~mgk25/iso-paper.html</a>.
module Graphics.PS.Paper

-- | Paper size data type.
data Paper
Paper :: Int -> Int -> Paper
width :: Paper -> Int
height :: Paper -> Int

-- | BoundingBox for an EPSF file with an optional HiResBoundingBox
data BBox
BBox :: Int -> Int -> Int -> Int -> BBox

-- | lower left x (x-min)
llx :: BBox -> Int

-- | lower left y (y-min)
lly :: BBox -> Int

-- | upper right x (x-max)
urx :: BBox -> Int

-- | upper right y (y-max)
ury :: BBox -> Int
HRBBox :: Int -> Int -> Int -> Int -> Double -> Double -> Double -> Double -> BBox

-- | lower left x (x-min)
llx :: BBox -> Int

-- | lower left y (y-min)
lly :: BBox -> Int

-- | upper right x (x-max)
urx :: BBox -> Int

-- | upper right y (y-max)
ury :: BBox -> Int

-- | high resolution <a>llx</a>
hrllx :: BBox -> Double

-- | high resolution <a>lly</a>
hrlly :: BBox -> Double

-- | high resolution <a>urx</a>
hrurx :: BBox -> Double

-- | high resolution <a>ury</a>
hrury :: BBox -> Double

-- | Swap width and height of <a>Paper</a>.
landscape :: Paper -> Paper

-- | A <a>div</a> variant that rounds rather than truncates.
--   
--   <pre>
--   let f (Paper _ h) = h `div` 2 == h `divRound` 2
--   in all id (map f [b0,b1,b2,b3,b4,b5,b6,b7,b8,b9]) == False
--   </pre>
divRound :: Int -> Int -> Int

-- | ISO size downscaling, ie. from <tt>A0</tt> to <tt>A1</tt>.
--   
--   <pre>
--   iso_down_scale a4 == a5
--   </pre>
iso_down_scale :: Paper -> Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a0 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a10 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a9 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a8 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a7 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a6 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a5 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a4 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a3 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a2 :: Paper

-- | ISO A sizes in millimeters.
--   
--   <pre>
--   a4 == Paper 210 297
--   </pre>
a1 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b0 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b10 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b9 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b8 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b7 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b6 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b5 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b4 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b3 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b2 :: Paper

-- | ISO B sizes in millimeters.
--   
--   <pre>
--   b4 == Paper 250 354
--   </pre>
b1 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c0 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c10 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c9 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c8 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c7 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c6 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c5 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c4 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c3 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c2 :: Paper

-- | ISO C sizes in millimeters.
--   
--   <pre>
--   c4 == Paper 229 324
--   </pre>
c1 :: Paper

-- | US Letter size in millimeters (ie <a>Paper</a> <tt>216 279</tt>).
usLetter :: Paper

-- | Newspaper sizes in millimeters. See
--   <a>http://www.papersizes.org/newspaper-sizes.htm</a>.
broadsheet :: Paper

-- | Newspaper sizes in millimeters. See
--   <a>http://www.papersizes.org/newspaper-sizes.htm</a>.
tabloid :: Paper

-- | Newspaper sizes in millimeters. See
--   <a>http://www.papersizes.org/newspaper-sizes.htm</a>.
berliner :: Paper

-- | Proportion of <a>Paper</a>.
--   
--   <pre>
--   proportion broadsheet == 1.25
--   map (round . (* 1e3) . proportion) [a0,b0,c0] == [1414,1414,1414]
--   map proportion [usLetter,berliner,tabloid]
--   </pre>
proportion :: Paper -> Double
instance Eq Paper
instance Show Paper
instance Eq BBox
instance Show BBox


-- | PS graphics state.
module Graphics.PS.GS

-- | Graphics state.
data GS
GS :: Color -> LineWidth -> LineCap -> LineJoin -> ([Int], Int) -> Double -> GS

-- | Line cap enumeration.
data LineCap
ButtCap :: LineCap
RoundCap :: LineCap
ProjectingSquareCap :: LineCap

-- | Line join enumeration.
data LineJoin
MiterJoin :: LineJoin
RoundJoin :: LineJoin
BevelJoin :: LineJoin

-- | Line width (real).
type LineWidth = Double

-- | Colour model.
data Color
RGB :: Double -> Double -> Double -> Color

-- | Default <a>GS</a> of indicated <a>Color</a>.
defaultGS :: Color -> GS

-- | Default <a>GS</a> of indicated shade of grey.
greyGS :: Double -> GS
instance Eq LineCap
instance Show LineCap
instance Enum LineCap
instance Eq LineJoin
instance Show LineJoin
instance Enum LineJoin
instance Eq Color
instance Show Color
instance Eq GS
instance Show GS


-- | Font type and functions.
module Graphics.PS.Font

-- | Font data type.
data Font
Font :: String -> Double -> Font
fontName :: Font -> String
fontSize :: Font -> Double
instance Eq Font
instance Show Font


-- | Glyph data type.
module Graphics.PS.Glyph

-- | Character data type.
type Glyph = Char


-- | Path type and functions.
module Graphics.PS.Path

-- | Path data type,in cartesian space.
data Path
MoveTo :: (Pt Double) -> Path
LineTo :: (Pt Double) -> Path
CurveTo :: (Pt Double) -> (Pt Double) -> (Pt Double) -> Path
ClosePath :: (Pt Double) -> Path
Text :: Font -> [Glyph] -> Path
PTransform :: (Matrix Double) -> Path -> Path
Join :: Path -> Path -> Path

-- | Infix notation for <a>Join</a>.
(+++) :: Path -> Path -> Path

-- | Line segments though list of <a>Pt</a>.
line :: [Pt Double] -> Path

-- | Variant of <a>line</a> connecting the last <a>Pt</a> to the first.
polygon :: [Pt Double] -> Path

-- | Rectangle with lower left at <a>Pt</a> and of specified width and
--   height. Polygon is ordered anticlockwise from lower left.
rectangle :: Pt Double -> Double -> Double -> Path

-- | Arc given by a central point,a radius,and start and end angles.
arc :: Pt Double -> Double -> Double -> Double -> Path

-- | Negative arc.
arcNegative :: Pt Double -> Double -> Double -> Double -> Path

-- | Annular segment.
annular :: Pt Double -> Double -> Double -> Double -> Double -> Path

-- | Apply any transformations at path. The resulting path will not have
--   any <a>PTransform</a> nodes.
flatten :: Path -> Path

-- | Render each (p1,p2) as a distinct line.
renderLines :: [Ln Double] -> Path

-- | Collapse line sequences into a single line.
renderLines' :: [Ln Double] -> Path
instance Eq Path
instance Show Path


-- | Image type and functions.
module Graphics.PS.Image

-- | An image is a rendering of a graph of <a>Path</a>s.
data Image
Stroke :: GS -> Path -> Image
Fill :: GS -> Path -> Image
ITransform :: (Matrix Double) -> Image -> Image
Over :: Image -> Image -> Image
Empty :: Image

-- | Layer one <a>Image</a> over another.
over :: Image -> Image -> Image

-- | List of <a>Path</a>s at <a>Image</a>.
paths :: Image -> [Path]
instance Eq Image
instance Show Image


-- | <a>Path</a> statistics.
module Graphics.PS.Statistics

-- | Path statistics data type.
data Statistics
Statistics :: Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Statistics
nMoveTo :: Statistics -> Integer
nLineTo :: Statistics -> Integer
nCurveTo :: Statistics -> Integer
nClosePath :: Statistics -> Integer
nGlyph :: Statistics -> Integer
nTransform :: Statistics -> Integer

-- | Determine number of path components of each type.
pathStatistics :: Path -> Statistics

-- | Statistics for all <a>paths</a> at <a>Image</a>.
imageStatistics :: Image -> Statistics
instance Eq Statistics
instance Show Statistics
instance Monoid Statistics


-- | Class and associated functions for <a>Matrix</a> transformations.
module Graphics.PS.Transform

-- | Values that can be transformed in relation to a <a>Matrix</a>.
class Transformable a

-- | Translation in <i>x</i> and <i>y</i>.
translate :: Transformable a => Double -> Double -> a -> a

-- | Scaling in <i>x</i> and <i>y</i>.
scale :: Transformable a => Double -> Double -> a -> a

-- | Rotation, in radians.
rotate :: Transformable a => Double -> a -> a
instance Transformable (Pt Double)
instance Transformable Path
instance Transformable Image


-- | <a>Path</a> query functions and related operations.
module Graphics.PS.Query

-- | Locate the starting point of the path, which must begin with a
--   <a>MoveTo</a> node.
startPt :: Path -> Maybe (Pt Double)

-- | Locate the end point of the path.
endPt :: Path -> Maybe (Pt Double)

-- | Ensure path begins with a <a>MoveTo</a> node.
mkValid :: Path -> Path

-- | Approximate curves as <i>n</i> straight line segments. That is replace
--   <a>CurveTo</a> nodes with <i>n</i> <a>LineTo</a> nodes calculated
--   using <a>bezier4</a>.
approx :: Double -> Path -> Path

-- | Append a <a>LineTo</a> the start point of <a>Path</a>.
close :: Path -> Path


-- | Postscript generator.
module Graphics.PS.PS

-- | Write a postscript file. The list of images are written one per page.
ps :: FilePath -> Paper -> [Image] -> IO ()

-- | Write an encapsulated postscript file. The single image is written.
eps :: String -> BBox -> Image -> IO ()

-- | Generate postscript data given <i>title</i>, page size, and a set of
--   page <a>Images</a>.
stringFromPS :: String -> Paper -> [Image] -> String
instance Monad m => Monoid (MonadMonoid m)


-- | Set of predefined <a>Path</a>s.
module Graphics.PS.Path.Graphs

-- | See
--   <a>ftp.scsh.net/pub/scsh/contrib/fps/doc/examples/fractal-sqr.html</a>
fractal_sqr_pt :: Pt Double -> Pt Double -> Int -> [Ln Double]

-- | <a>Path</a> of <a>fractal_sqr_pt</a> with inputs <tt>(250,250)</tt>,
--   <tt>(175,175)</tt>, <tt>12</tt>.
fractal_sqr :: Path

-- | <a>renderLines'</a> variant of <a>fractal_sqr</a>.
fractal_sqr' :: Path

-- | A <i>unit</i> arrow.
unitArrow :: Int -> Path

-- | See
--   <a>ftp.scsh.net/pub/scsh/contrib/fps/doc/examples/fractal-arrow.html</a>
fractalArrow :: Double -> Int -> Path

-- | Isosceles right angled triangle
erat :: Pt Double -> Double -> Path

-- | Sierpinski triangle.
sierpinski :: Pt Double -> Double -> Double -> Path


-- | Top-level module for <tt>hps</tt>.
module Graphics.PS
