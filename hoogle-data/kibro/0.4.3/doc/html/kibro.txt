-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Web development framework.
--   
--   Web development framework.
@package kibro
@version 0.4.3

module Kibro

-- | Same as startKibro', but with value as () and uses forkIO to fork
startKibro :: [PageAssign ()] -> IO ()

-- | Start Kibro FastCGI server
startKibro' :: v -> (IO () -> IO ThreadId) -> [PageAssign v] -> IO ()
getValue :: Kibro v v
getURIMatch :: Kibro v MatchResult
getInputDef :: String -> String -> Kibro v String
readInputDef :: String -> String -> Kibro v String

-- | Get a session value
getSess :: String -> Kibro v (Maybe String)

-- | Put a session value
putSess :: String -> String -> Kibro v ()

-- | Delete a session value
deleteSess :: String -> Kibro v ()

-- | Modify a session value, if the value does not exist, no change occurs
modifySess :: String -> (String -> String) -> Kibro v (Maybe String)

-- | Get session value or return default value
getSessDef :: String -> String -> Kibro v String

-- | Modify a session value, if the value does not exist, the default value
--   is modified and inserted
modifySessDef :: String -> (String -> String) -> String -> Kibro v String

-- | Read a session value
readSess :: (Read a) => String -> Kibro v (Maybe a)

-- | Show a session value and put it
writeSess :: (Show a) => String -> a -> Kibro v ()

-- | Same as modifySess, but with Read/Show instance values
modifyRSess :: (Read a, Show a) => String -> (a -> a) -> Kibro v (Maybe a)

-- | Same as modifySessDef, but with Read/Show instance values
modifyRSessDef :: (Read a, Show a) => String -> (a -> a) -> a -> Kibro v a

-- | Simple stylesheet element
stylesheet :: String -> Html

-- | Nice operator for removing parentheses.
(<<$) :: (HTML a) => (Html -> b) -> a -> b

-- | List of (regular expression,page action) pairs
type PageAssign v = (String, Page v)

-- | <a>a href='x'</a>y<a>/a</a>
ahref :: (HTML a) => String -> a -> HotLink
instance (Monad m) => Monad (KibroT m v)
instance (MonadIO m) => MonadIO (KibroT m v)
instance (Monad m) => MonadState (KibroSt v) (KibroT m v)
instance (Monad m) => Functor (KibroT m v)
instance Eq Session
instance Show Session
instance MonadCGI (KibroT IO v)
instance (Monad m) => Applicative (KibroT m v)
