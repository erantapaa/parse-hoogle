-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Aeson adapter for MessagePack
--   
@package msgpack-aeson
@version 0.1.0.0


-- | Aeson bridge for MessagePack
module Data.MessagePack.Aeson

-- | Convert MessagePack Object to Aeson Value. If the value unable to
--   convert, it returns Nothing
toAeson :: Object -> Maybe Value

-- | Convert Aeson Value to MessagePack Object
fromAeson :: Value -> Object

-- | Wrapper for using Aeson values as MessagePack value.
newtype AsMessagePack a
AsMessagePack :: a -> AsMessagePack a
getAsMessagePack :: AsMessagePack a -> a

-- | Wrapper for using MessagePack values as Aeson value.
newtype AsAeson a
AsAeson :: a -> AsAeson a
getAsAeson :: AsAeson a -> a

-- | Pack Aeson value to MessagePack binary
packAeson :: ToJSON a => a -> ByteString

-- | Unpack Aeson value from MessagePack binary
unpackAeson :: FromJSON a => ByteString -> Maybe a

-- | Decode MessagePack value from JSON
decodeMessagePack :: MessagePack a => ByteString -> Maybe a

-- | Encode MessagePack value to JSON
encodeMessagePack :: MessagePack a => a -> ByteString
instance Typeable AsMessagePack
instance Typeable AsAeson
instance Eq a => Eq (AsMessagePack a)
instance Ord a => Ord (AsMessagePack a)
instance Show a => Show (AsMessagePack a)
instance Read a => Read (AsMessagePack a)
instance Functor AsMessagePack
instance Data a => Data (AsMessagePack a)
instance NFData a => NFData (AsMessagePack a)
instance Eq a => Eq (AsAeson a)
instance Ord a => Ord (AsAeson a)
instance Show a => Show (AsAeson a)
instance Read a => Read (AsAeson a)
instance Functor AsAeson
instance Data a => Data (AsAeson a)
instance NFData a => NFData (AsAeson a)
instance MessagePack a => FromJSON (AsAeson a)
instance MessagePack a => ToJSON (AsAeson a)
instance (FromJSON a, ToJSON a) => MessagePack (AsMessagePack a)
instance FromJSON Object
instance ToJSON Object
instance MessagePack Value
