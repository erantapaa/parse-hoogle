-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate web-based charts using the Google Chart API
--   
--   Generate web-based charts using the Google Chart API
@package GoogleChart
@version 0.2


-- | This module is for generating web-based charts using Google's Chart
--   API: <a>http://code.google.com/apis/chart/</a>. Its output is URLs
--   that will resolve to a PNG image of the resulting chart.
--   
--   Most of the functions in this module, with names like <tt>setFoo</tt>,
--   take a <a>Chart</a> as an argument and produce a new <a>Chart</a> with
--   the specified attribute added. These calls are designed to be chained
--   together. See the example below.
--   
--   <a>Chart</a>s are represented as a hierarchy of type classes so that
--   parameters that only affect a specific chart type are only available
--   to that chart type.
--   
--   <pre>
--   putStrLn "URL for your chart:"
--   putStrLn $ <a>chartURL</a> $
--     <a>setSize</a> 400 257 $
--     <a>setTitle</a> "My Chart" $
--     <a>setData</a> (<a>encodeDataSimple</a> [[1..20]]) $
--     <a>setLegend</a> ["1 to 20"] $
--     <a>newLineChart</a>
--   </pre>
--   
--   This produces:
--   <a>http://chart.apis.google.com/chart?chs=400x257&amp;chtt=My+Chart&amp;chd=s%3aBCDEFGHIJKLMNOPQRSTU&amp;chdl=1+to+20&amp;cht=lc</a>
--   
--   Remaining features to implement:
--   
--   <ul>
--   <li>lxy line charts</li>
--   <li>chbh bar charts</li>
--   <li>scatter plots</li>
--   <li>background/fill colors</li>
--   <li>all style attributes</li>
--   </ul>
module Graphics.Google.Chart

-- | The type class underneath all Charts.
class Chart c

-- | Construct the URL used to show the chart.
chartURL :: Chart c => c -> String

-- | Set the width and height, in pixels, of the resulting image.
setSize :: Chart c => Int -> Int -> c -> c

-- | Set the title of the chart.
setTitle :: Chart c => String -> c -> c

-- | Set options for the display of the title of the chart.
setTitleOpts :: Chart c => String -> Int -> c -> c

-- | Set the data displayed by the chart.
setData :: Chart c => ChartData -> c -> c

-- | All the encoding methods produce <a>ChartData</a>, which is usable by
--   <a>setData</a>.
data ChartData

-- | Encode data using the "simple" encoding, which maps each input value
--   to a single letter in the URL. This produces minimal URLs but doesn't
--   have as lot of resolution. Input values must be in the range <tt>0
--   &lt;= x &lt;= 61</tt>. Values outside the valid input range will be
--   considered missing data.
encodeDataSimple :: [[Int]] -> ChartData

-- | Encode data using the "text" encoding, which maps each input value to
--   its string representation (e.g. "3.4") in the URL. This has more
--   resolution than simple encoding but produces larger URLs. Input values
--   must be in the range <tt>0 &lt;= x &lt;= 100</tt>. Values outside the
--   valid input range will be considered missing data. Values with more
--   than one decimal place of resolution will be rounded.
encodeDataText :: RealFrac a => [[a]] -> ChartData

-- | Encode data using the "extended" encoding, which maps each input value
--   to a two-character pair in base 64. This has more resolution than text
--   encoding and is more compact. Input values must be in the range <tt>0
--   &lt;= x &lt;= 4095</tt>. Values outside the valid input range will be
--   considered missing data.
encodeDataExtended :: [[Int]] -> ChartData

-- | Set data set colors. The nth color specified here colors the nth data
--   set in the <a>ChartData</a> passed to <a>setData</a>. See
--   <a>http://code.google.com/apis/chart/#line_bar_pie_colors</a> for more
--   information.
setDataColors :: Chart c => [String] -> c -> c

-- | LegendChart represents charts that can display legends with
--   <a>setLegend</a>.
class Chart c => LegendChart c

-- | Set the legend for the corresponding data sets. The colors are taken
--   from the data set colors.
setLegend :: LegendChart c => [String] -> c -> c

-- | AxisLabelChart represents charts that can display axis labels.
class Chart c => AxisLabelChart c

-- | Set which axes to display. Repeating an <a>AxisType</a> produces
--   multiple sets of labels on that axis.
setAxisTypes :: AxisLabelChart c => [AxisType] -> c -> c

-- | Where to display an axis.
data AxisType
AxisBottom :: AxisType
AxisTop :: AxisType
AxisLeft :: AxisType
AxisRight :: AxisType

-- | Set axis labels. The nth list of strings in the argument sets the
--   labels for the nth axis specified with <a>setAxisTypes</a>. An empty
--   list of strings skips labelling the corresponding axis.
setAxisLabels :: AxisLabelChart c => [[String]] -> c -> c

-- | Set axis label positions. The nth list of Ints in the argument sets
--   the positions for the nth axis specified with <a>setAxisTypes</a>. An
--   empty list skips setting position for the corresponding axis.
setAxisLabelPositions :: AxisLabelChart c => [[Int]] -> c -> c

-- | Set axis ranges. The nth pair of Ints in the argument sets the range
--   for the nth axis specified with <a>setAxisTypes</a>.
setAxisRanges :: AxisLabelChart c => [(Int, Int)] -> c -> c

-- | Text alignment for labels on an axis.
data AxisAlignment
AlignLeft :: AxisAlignment
AlignCenter :: AxisAlignment
AlignRight :: AxisAlignment

-- | Set axis styles. The nth element in the argument sets the style for
--   the nth axis specified with <a>setAxisTypes</a>. Each style is a tuple
--   of (color, font size, text alignment).
setAxisStyles :: AxisLabelChart c => [(String, Int, AxisAlignment)] -> c -> c
data LineChart
newLineChart :: LineChart
data PieChart
newPieChart :: PieStyle -> PieChart
data PieStyle
Pie2D :: PieStyle
Pie3D :: PieStyle

-- | Set labels for the different data points on the chart. Specify missing
--   values by passing an empty string.
setLabels :: [String] -> PieChart -> PieChart
data BarChart
newBarChart :: Orientation -> BarStyle -> BarChart
data Orientation
Horizontal :: Orientation
Vertical :: Orientation
data BarStyle
Stacked :: BarStyle
Grouped :: BarStyle

-- | Venn diagram data is specified in a particular format. There should be
--   exactly seven data values, which represent, in order: circle A size,
--   circle B size, circle C size, A/B overlap, A/C overlap, B/C overlap,
--   A/B/C overlap.
data VennDiagram
newVennDiagram :: VennDiagram
instance Show ChartData
instance LegendChart VennDiagram
instance Chart VennDiagram
instance AxisLabelChart BarChart
instance LegendChart BarChart
instance Chart BarChart
instance Chart PieChart
instance AxisLabelChart LineChart
instance LegendChart LineChart
instance Chart LineChart
