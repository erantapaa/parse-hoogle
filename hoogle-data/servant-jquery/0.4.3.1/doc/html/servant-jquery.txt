-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Automatically derive (jquery) javascript functions to query servant webservices
--   
@package servant-jquery
@version 0.4.3.1


module Servant.JQuery
jquery :: HasJQ layout => Proxy layout -> JQ layout
generateJS :: AjaxReq -> String

-- | Directly generate all the javascript functions for your API from a
--   <a>Proxy</a> for your API type. You can then write it to a file or
--   integrate it in a page, for example.
jsForAPI :: (HasJQ api, GenerateCode (JQ api)) => Proxy api -> String
printJS :: AjaxReq -> IO ()
type Arg = String
data Segment
Segment :: SegmentType -> [MatrixArg] -> Segment
_segment :: Segment -> SegmentType
_matrix :: Segment -> [MatrixArg]
data SegmentType

-- | a static path segment. like "/foo"
Static :: String -> SegmentType

-- | a capture. like "/:userid"
Cap :: Arg -> SegmentType
type Path = [Segment]
data ArgType
Normal :: ArgType
Flag :: ArgType
List :: ArgType
data QueryArg
QueryArg :: Arg -> ArgType -> QueryArg
_argName :: QueryArg -> Arg
_argType :: QueryArg -> ArgType
data HeaderArg
HeaderArg :: String -> HeaderArg
headerArgName :: HeaderArg -> String
ReplaceHeaderArg :: String -> String -> HeaderArg
headerArgName :: HeaderArg -> String
headerPattern :: HeaderArg -> String

-- | Attempts to reduce the function name provided to that allowed by JS.
--   <a>https://mathiasbynens.be/notes/javascript-identifiers</a> Couldn't
--   work out how to handle zero-width characters. @TODO: specify better
--   default function name, or throw error?
toValidFunctionName :: String -> String
type MatrixArg = QueryArg
data Url
Url :: Path -> [QueryArg] -> Url
_path :: Url -> Path
_queryStr :: Url -> [QueryArg]
defUrl :: Url
type FunctionName = String
type Method = String
data AjaxReq
AjaxReq :: Url -> Method -> [HeaderArg] -> Bool -> FunctionName -> AjaxReq
_reqUrl :: AjaxReq -> Url
_reqMethod :: AjaxReq -> Method
_reqHeaders :: AjaxReq -> [HeaderArg]
_reqBody :: AjaxReq -> Bool
_funcName :: AjaxReq -> FunctionName
argType :: Lens' QueryArg ArgType
argName :: Lens' QueryArg Arg
segment :: Lens' Segment SegmentType
matrix :: Lens' Segment [MatrixArg]
queryStr :: Lens' Url [QueryArg]
path :: Lens' Url Path
reqUrl :: Lens' AjaxReq Url
reqMethod :: Lens' AjaxReq Method
reqHeaders :: Lens' AjaxReq [HeaderArg]
reqBody :: Lens' AjaxReq Bool
funcName :: Lens' AjaxReq FunctionName
isCapture :: Segment -> Bool
hasMatrixArgs :: Segment -> Bool
hasArgs :: Segment -> Bool
matrixArgs :: Segment -> [MatrixArg]
captureArg :: Segment -> Arg
jsSegments :: [Segment] -> String
segmentToStr :: Segment -> Bool -> String
segmentTypeToStr :: SegmentType -> String
jsGParams :: String -> [QueryArg] -> String
jsParams :: [QueryArg] -> String
jsMParams :: [MatrixArg] -> String
paramToStr :: QueryArg -> Bool -> String
defReq :: AjaxReq
class HasJQ (layout :: *) where type family JQ layout :: *
jqueryFor :: HasJQ layout => Proxy layout -> AjaxReq -> JQ layout

-- | Utility class used by <a>jsForAPI</a> which will directly hand you all
--   the Javascript code instead of handing you a
--   <a>:&lt;|&gt;</a>-separated list of <a>AjaxReq</a> like <a>jquery</a>
--   and then having to use <a>generateJS</a> on each <a>AjaxReq</a>.
class GenerateCode reqs
jsFor :: GenerateCode reqs => reqs -> String
instance GenerateCode rest => GenerateCode (AjaxReq :<|> rest)
instance GenerateCode AjaxReq
