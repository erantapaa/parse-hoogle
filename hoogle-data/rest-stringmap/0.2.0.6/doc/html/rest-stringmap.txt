-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Maps with stringy keys that can be transcoded to JSON and XML.
--   
@package rest-stringmap
@version 0.2.0.6

module Rest.StringMap.Util
pickleStringMap :: XmlPickler b => ([(String, b)] -> m) -> (m -> [(String, b)]) -> PU m
pickleMap :: (XmlPickler m, ToString k, IsString k) => ((String -> k) -> m -> m') -> ((k -> String) -> m' -> m) -> PU m'
mapSchema :: JSONSchema a => Proxy a -> Schema

module Rest.StringMap.HashMap.Strict
data StringHashMap a b
fromHashMap :: HashMap a b -> StringHashMap a b
toHashMap :: StringHashMap a b -> HashMap a b
fromList :: (Eq a, Hashable a) => [(a, b)] -> StringHashMap a b
toList :: StringHashMap a b -> [(a, b)]
instance [overlap ok] Typeable StringHashMap
instance [overlap ok] (Eq a, Eq b) => Eq (StringHashMap a b)
instance [overlap ok] (Show a, Show b) => Show (StringHashMap a b)
instance [overlap ok] JSONSchema b => JSONSchema (StringHashMap a b)
instance [overlap ok] (Eq a, Hashable a, IsString a, FromJSON b) => FromJSON (StringHashMap a b)
instance [overlap ok] (ToString a, ToJSON b) => ToJSON (StringHashMap a b)
instance [overlap ok] (Eq a, Hashable a, IsString a, ToString a, XmlPickler b) => XmlPickler (StringHashMap a b)
instance [overlap ok] XmlPickler b => XmlPickler (StringHashMap String b)

module Rest.StringMap.Map.Lazy
data StringMap a b
fromMap :: Map a b -> StringMap a b
toMap :: StringMap a b -> Map a b
toList :: StringMap a b -> [(a, b)]
fromList :: Ord a => [(a, b)] -> StringMap a b
instance [overlap ok] Typeable StringMap
instance [overlap ok] (Eq a, Eq b) => Eq (StringMap a b)
instance [overlap ok] (Show a, Show b) => Show (StringMap a b)
instance [overlap ok] JSONSchema b => JSONSchema (StringMap a b)
instance [overlap ok] (Ord a, IsString a, FromJSON b) => FromJSON (StringMap a b)
instance [overlap ok] (ToString a, ToJSON b) => ToJSON (StringMap a b)
instance [overlap ok] (Ord a, IsString a, ToString a, XmlPickler b) => XmlPickler (StringMap a b)
instance [overlap ok] XmlPickler b => XmlPickler (StringMap String b)

module Rest.StringMap.Map.Strict
data StringMap a b
fromMap :: Map a b -> StringMap a b
toMap :: StringMap a b -> Map a b
toList :: StringMap a b -> [(a, b)]
fromList :: Ord a => [(a, b)] -> StringMap a b
instance [overlap ok] Typeable StringMap
instance [overlap ok] (Eq a, Eq b) => Eq (StringMap a b)
instance [overlap ok] (Show a, Show b) => Show (StringMap a b)
instance [overlap ok] JSONSchema b => JSONSchema (StringMap a b)
instance [overlap ok] (Ord a, IsString a, FromJSON b) => FromJSON (StringMap a b)
instance [overlap ok] (ToString a, ToJSON b) => ToJSON (StringMap a b)
instance [overlap ok] (Ord a, IsString a, ToString a, XmlPickler b) => XmlPickler (StringMap a b)
instance [overlap ok] XmlPickler b => XmlPickler (StringMap String b)

module Rest.StringMap.HashMap.Lazy
data StringHashMap a b
fromHashMap :: HashMap a b -> StringHashMap a b
toHashMap :: StringHashMap a b -> HashMap a b
fromList :: (Eq a, Hashable a) => [(a, b)] -> StringHashMap a b
toList :: StringHashMap a b -> [(a, b)]
instance [overlap ok] Typeable StringHashMap
instance [overlap ok] (Eq a, Eq b) => Eq (StringHashMap a b)
instance [overlap ok] (Show a, Show b) => Show (StringHashMap a b)
instance [overlap ok] JSONSchema b => JSONSchema (StringHashMap a b)
instance [overlap ok] (Eq a, Hashable a, IsString a, FromJSON b) => FromJSON (StringHashMap a b)
instance [overlap ok] (ToString a, ToJSON b) => ToJSON (StringHashMap a b)
instance [overlap ok] (Eq a, Hashable a, IsString a, ToString a, XmlPickler b) => XmlPickler (StringHashMap a b)
instance [overlap ok] XmlPickler b => XmlPickler (StringHashMap String b)
