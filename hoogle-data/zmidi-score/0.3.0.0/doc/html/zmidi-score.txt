-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Representing MIDI a simple score.
--   
@package zmidi-score
@version 0.3.0.0


-- | Summary: a simple score representation derived from a MidiFile (as
--   parsed by the ZMidi.Core library:
--   <a>https://hackage.haskell.org/package/zmidi-core</a>
module ZMidi.Score.Datatypes

-- | Stores the main elements of a musical score that can be derived from a
--   midifile
data MidiScore
MidiScore :: [Timed Key] -> [Timed TimeSig] -> TPB -> MidiFormat -> [Timed Time] -> Time -> [Voice] -> MidiScore

-- | The <a>Key</a>s of the piece with time stamps
getKey :: MidiScore -> [Timed Key]

-- | The <a>TimeSig</a>natures of the piece with time stamps
getTimeSig :: MidiScore -> [Timed TimeSig]

-- | The number of MIDI-ticks-per-beat
ticksPerBeat :: MidiScore -> TPB

-- | The kind of midi file that created this score
midiFormat :: MidiScore -> MidiFormat

-- | The microseconds per quarter note
tempo :: MidiScore -> [Timed Time]

-- | The minimum note length found.
minDur :: MidiScore -> Time

-- | The midi <a>Voice</a>s
getVoices :: MidiScore -> [Voice]

-- | Represents a musical key
data Key
Key :: Int8 -> MidiScaleType -> Key
keyRoot :: Key -> Int8
keyMode :: Key -> MidiScaleType
NoKey :: Key

-- | A <a>TimeSig</a>nature has a fraction, e.g. 4/4, 3/4, or 6/8.
data TimeSig
TimeSig :: Int -> Int -> Word8 -> Word8 -> TimeSig
tsNum :: TimeSig -> Int
tsDen :: TimeSig -> Int
metronome :: TimeSig -> Word8
nr32ndNotes :: TimeSig -> Word8
NoTimeSig :: TimeSig

-- | A <a>Voice</a> is a list of <a>ScoreEvent</a>s that have time stamps.
type Voice = [Timed ScoreEvent]

-- | The MIDI Channel as stored in the MIDI file
newtype Channel
Channel :: Word8 -> Channel
channel :: Channel -> Word8

-- | Pitch is represented by a <a>PitchClass</a> and an <a>Octave</a>
newtype Pitch
Pitch :: (Octave, PitchClass) -> Pitch

-- | Represents a musical octave
newtype Octave
Octave :: Int -> Octave
octave :: Octave -> Int

-- | A Pitch class representation (there is no check for values &gt; 11)
newtype PitchClass
PitchClass :: Int -> PitchClass
pitchclass :: PitchClass -> Int

-- | Represents a musical interval
newtype Interval
Interval :: Int -> Interval
interval :: Interval -> Int

-- | Represents MIDI velocity
newtype Velocity
Velocity :: Word8 -> Velocity
velocity :: Velocity -> Word8

-- | Adds MIDI <a>Time</a> information to a datatype
data Timed a
Timed :: Time -> a -> Timed a
onset :: Timed a -> Time
getEvent :: Timed a -> a

-- | Represents MIDI time in ticks
newtype Time
Time :: Int -> Time
time :: Time -> Int

-- | A Bar counter used to interpret a MIDI <a>Time</a> stamp
newtype Bar
Bar :: Int -> Bar
bar :: Bar -> Int

-- | A counter for musical beats
newtype Beat
Beat :: Int -> Beat
beat :: Beat -> Int

-- | Representing time within a <a>Beat</a> as a <a>Ratio</a>
newtype BeatRat
BeatRat :: Ratio Int -> BeatRat
beatRat :: BeatRat -> Ratio Int

-- | Representing time within a <a>Bar</a> as a <a>Ratio</a>
newtype BarRat
BarRat :: Ratio Int -> BarRat
barRat :: BarRat -> Ratio Int

-- | The MIDI ticks in <a>Time</a> per <a>Beat</a>
newtype TPB
TPB :: Int -> TPB
tpb :: TPB -> Int

-- | Within ZMidi.Score we represent four score events: a note, a key
--   change, a time signature or a tempo change
data ScoreEvent
NoteEvent :: Channel -> Pitch -> Velocity -> Time -> ScoreEvent
chan :: ScoreEvent -> Channel
pitch :: ScoreEvent -> Pitch
velo :: ScoreEvent -> Velocity
duration :: ScoreEvent -> Time
KeyChange :: Key -> ScoreEvent
keyChange :: ScoreEvent -> Key
TimeSigChange :: TimeSig -> ScoreEvent
tsChange :: ScoreEvent -> TimeSig
TempoChange :: Time -> ScoreEvent
tempChange :: ScoreEvent -> Time
instance Eq Key
instance Ord Key
instance Generic Key
instance Generic TimeSig
instance Eq Channel
instance Show Channel
instance Num Channel
instance Ord Channel
instance Enum Channel
instance Real Channel
instance Integral Channel
instance Binary Channel
instance NFData Channel
instance Eq Octave
instance Show Octave
instance Num Octave
instance Ord Octave
instance Enum Octave
instance Real Octave
instance Integral Octave
instance Binary Octave
instance PrintfArg Octave
instance NFData Octave
instance Generic Octave
instance Eq PitchClass
instance Show PitchClass
instance Num PitchClass
instance Ord PitchClass
instance Enum PitchClass
instance Real PitchClass
instance Integral PitchClass
instance Binary PitchClass
instance PrintfArg PitchClass
instance NFData PitchClass
instance Generic PitchClass
instance Eq Pitch
instance Ord Pitch
instance Binary Pitch
instance NFData Pitch
instance Generic Pitch
instance Eq Interval
instance Show Interval
instance Num Interval
instance Ord Interval
instance Enum Interval
instance Real Interval
instance Integral Interval
instance Binary Interval
instance PrintfArg Interval
instance NFData Interval
instance Generic Interval
instance Eq Velocity
instance Show Velocity
instance Num Velocity
instance Ord Velocity
instance Enum Velocity
instance Real Velocity
instance Integral Velocity
instance Binary Velocity
instance NFData Velocity
instance Generic Velocity
instance Eq Time
instance Show Time
instance Num Time
instance Ord Time
instance Enum Time
instance Real Time
instance Integral Time
instance Binary Time
instance PrintfArg Time
instance NFData Time
instance Generic Time
instance Eq Bar
instance Show Bar
instance Num Bar
instance Ord Bar
instance Enum Bar
instance Real Bar
instance Integral Bar
instance Binary Bar
instance PrintfArg Bar
instance NFData Bar
instance Generic Bar
instance Eq Beat
instance Show Beat
instance Num Beat
instance Ord Beat
instance Enum Beat
instance Real Beat
instance Integral Beat
instance Binary Beat
instance PrintfArg Beat
instance NFData Beat
instance Generic Beat
instance Eq BeatRat
instance Show BeatRat
instance Num BeatRat
instance Ord BeatRat
instance Enum BeatRat
instance Real BeatRat
instance Binary BeatRat
instance NFData BeatRat
instance Generic BeatRat
instance Eq BarRat
instance Show BarRat
instance Num BarRat
instance Ord BarRat
instance Enum BarRat
instance Real BarRat
instance Binary BarRat
instance NFData BarRat
instance Generic BarRat
instance Eq TPB
instance Show TPB
instance Num TPB
instance Ord TPB
instance Enum TPB
instance Real TPB
instance Integral TPB
instance Binary TPB
instance PrintfArg TPB
instance NFData TPB
instance Generic TPB
instance Functor Timed
instance Eq a => Eq (Timed a)
instance Ord a => Ord (Timed a)
instance Generic (Timed a)
instance Eq ScoreEvent
instance Ord ScoreEvent
instance Show ScoreEvent
instance Generic ScoreEvent
instance Eq MidiScore
instance Show MidiScore
instance Generic MidiScore
instance Datatype D1Key
instance Constructor C1_0Key
instance Constructor C1_1Key
instance Selector S1_0_0Key
instance Selector S1_0_1Key
instance Datatype D1TimeSig
instance Constructor C1_0TimeSig
instance Constructor C1_1TimeSig
instance Selector S1_0_0TimeSig
instance Selector S1_0_1TimeSig
instance Selector S1_0_2TimeSig
instance Selector S1_0_3TimeSig
instance Datatype D1Octave
instance Constructor C1_0Octave
instance Selector S1_0_0Octave
instance Datatype D1PitchClass
instance Constructor C1_0PitchClass
instance Selector S1_0_0PitchClass
instance Datatype D1Pitch
instance Constructor C1_0Pitch
instance Datatype D1Interval
instance Constructor C1_0Interval
instance Selector S1_0_0Interval
instance Datatype D1Velocity
instance Constructor C1_0Velocity
instance Selector S1_0_0Velocity
instance Datatype D1Time
instance Constructor C1_0Time
instance Selector S1_0_0Time
instance Datatype D1Bar
instance Constructor C1_0Bar
instance Selector S1_0_0Bar
instance Datatype D1Beat
instance Constructor C1_0Beat
instance Selector S1_0_0Beat
instance Datatype D1BeatRat
instance Constructor C1_0BeatRat
instance Selector S1_0_0BeatRat
instance Datatype D1BarRat
instance Constructor C1_0BarRat
instance Selector S1_0_0BarRat
instance Datatype D1TPB
instance Constructor C1_0TPB
instance Selector S1_0_0TPB
instance Datatype D1Timed
instance Constructor C1_0Timed
instance Selector S1_0_0Timed
instance Selector S1_0_1Timed
instance Datatype D1ScoreEvent
instance Constructor C1_0ScoreEvent
instance Constructor C1_1ScoreEvent
instance Constructor C1_2ScoreEvent
instance Constructor C1_3ScoreEvent
instance Selector S1_0_0ScoreEvent
instance Selector S1_0_1ScoreEvent
instance Selector S1_0_2ScoreEvent
instance Selector S1_0_3ScoreEvent
instance Selector S1_1_0ScoreEvent
instance Selector S1_2_0ScoreEvent
instance Selector S1_3_0ScoreEvent
instance Datatype D1MidiScore
instance Constructor C1_0MidiScore
instance Selector S1_0_0MidiScore
instance Selector S1_0_1MidiScore
instance Selector S1_0_2MidiScore
instance Selector S1_0_3MidiScore
instance Selector S1_0_4MidiScore
instance Selector S1_0_5MidiScore
instance Selector S1_0_6MidiScore
instance FromJSON TimeSig
instance (Integral a, FromJSON a) => FromJSON (Ratio a)
instance FromJSON BarRat
instance FromJSON BeatRat
instance FromJSON Beat
instance ToJSON TimeSig
instance (Integral a, ToJSON a) => ToJSON (Ratio a)
instance ToJSON BarRat
instance ToJSON BeatRat
instance ToJSON Beat
instance NFData MidiFormat
instance NFData MidiScaleType
instance NFData a => NFData (Timed a)
instance NFData Key
instance NFData ScoreEvent
instance NFData TimeSig
instance NFData MidiScore
instance Binary MidiFormat
instance Binary MidiScaleType
instance Binary a => Binary (Timed a)
instance Binary Key
instance Binary ScoreEvent
instance Binary TimeSig
instance Binary MidiScore
instance Show Pitch
instance Show Key
instance Read TimeSig
instance Show TimeSig
instance Ord TimeSig
instance Eq TimeSig
instance Show a => Show (Timed a)


-- | Summary: some utilities for manipulating and extracting information
--   from <a>MidiFile</a>s.
module ZMidi.Score.Utilities

-- | A <a>TickMap</a> is basically a histogram of IOI counts of a piece (of
--   all voices)
type TickMap = IntMap Time

-- | builds a <a>TickMap</a>.
buildTickMap :: [Voice] -> TickMap

-- | The Inter Onset Interval that is the greatest common divider. It can
--   be used to estimate whether a track is quantised or not.
gcIOId :: TickMap -> Time

-- | Returns True if the <a>ScoreEvent</a> is a key change
isTempoChange :: Timed ScoreEvent -> Bool

-- | Returns True if the <a>ScoreEvent</a> is a time signature change
isTimeSig :: Timed ScoreEvent -> Bool

-- | Returns True if the <a>ScoreEvent</a> is a key change
isKeyChange :: Timed ScoreEvent -> Bool

-- | Returns True if the <a>ScoreEvent</a> is a <a>NoteEvent</a>
isNoteEvent :: Timed ScoreEvent -> Bool

-- | Returns the number of <a>ScoreEvent</a>s in a <a>MidiScore</a>
nrOfNotes :: MidiScore -> Int

-- | Transforms a <a>Voice</a> into a list of Inter Onset Intervals (IOIs)
toIOIs :: Voice -> [Time]

-- | Ignores all pitch information and returns a list of onsets. N.B. in
--   case of a polyphonic track duplicate onsets are deleted.
toOnsets :: Voice -> [Time]

-- | Converts a <a>Pitch</a> into a MIDI note number
toMidiNr :: Pitch -> Word8

-- | Converts a MIDI note number into an octave and a pitch class, a.k.a
--   <a>Pitch</a>
toPitch :: Word8 -> Pitch

-- | Returns the <a>Pitch</a> of a <a>Timed</a> <a>ScoreEvent</a>. In case
--   of a non-<a>NoteEvent</a> an error will be thrown
getPitch :: Timed ScoreEvent -> Pitch

-- | Returns the posibly negative <a>Interval</a> between two
--   <a>Pitch</a>es
getInterval :: Pitch -> Pitch -> Interval

-- | Changes a <a>Pitch</a> with a particular <a>Interval</a>
changePitch :: Pitch -> Interval -> Pitch

-- | Returns the <a>PitchClass</a> of a particular <a>Pitch</a>.
pitchClass :: Pitch -> PitchClass

-- | Returns True if the <a>MidiScore</a> has time signatures other than
--   <a>NoTimeSig</a>
hasTimeSigs :: MidiScore -> Bool

-- | Updates a time signature, or returns a warning if the update fails
updateTimeSig :: MidiScore -> Timed TimeSig -> Timed TimeSig -> Either String MidiScore

-- | Removes the track labels from a <a>MidiFile</a>
removeLabels :: MidiFile -> MidiFile

-- | Returns True if the MidiTrack is non-empty
hasNotes :: MidiTrack -> Bool


-- | Summary: Transforms a raw ZMidi MidiFile into a more high-level
--   MidiScore representation (see:
--   <a>https://hackage.haskell.org/package/zmidi-core</a> ).
module ZMidi.Score.ToMidiScore

-- | Transforms a <a>MidiFile</a> into a <a>MidiScore</a>
midiFileToMidiScore :: MidiFile -> MidiScore


-- | Summary: converting a <a>MidiScore</a> into a ZMidi.Core.MidiFile
--   (see: <a>https://hackage.haskell.org/package/zmidi-core</a> ).
module ZMidi.Score.ToMidiFile

-- | Transforms a <a>MidiFile</a> into a <a>MidiScore</a>
midiScoreToMidiFile :: MidiScore -> MidiFile


-- | Summary: Functions for quantising a <a>MidiScore</a>
module ZMidi.Score.Quantise

-- | QMidiScore wraps around a <a>MidiScore</a> and stores some additional
--   information about the quantisation process.
data QMidiScore
QMidiScore :: MidiScore -> ShortestNote -> GridUnit -> QDev -> QMidiScore
qMidiScore :: QMidiScore -> MidiScore
qShortestNote :: QMidiScore -> ShortestNote
qGridUnit :: QMidiScore -> GridUnit
totDeviation :: QMidiScore -> QDev

-- | The <a>ShortestNote</a> determines the minimal grid length of a
--   quantised <a>QMidiScore</a>, when quantised with <a>quantise</a>.
data ShortestNote
Eighth :: ShortestNote
Sixteenth :: ShortestNote
ThirtySecond :: ShortestNote
FourtyEighth :: ShortestNote
SixtyFourth :: ShortestNote

-- | The <a>GridUnit</a> describes the minimal length of a quantised event
--   and is controlled by the number of <a>QBins</a>
newtype GridUnit
GridUnit :: Int -> GridUnit
gridUnit :: GridUnit -> Int

-- | The <a>QBins</a> describes the number of quantisation bins per
--   (annotated) beat length and is generally controlled by the
--   <a>ShortestNote</a> parameter. (see also: <a>toQBins</a> )
newtype QBins
QBins :: Int -> QBins
qbins :: QBins -> Int

-- | Represents a quantisation deviation, i.e. the number of ticks that an
--   event was moved to match the time grid.
newtype QDev
QDev :: Int -> QDev
qDev :: QDev -> Int

-- | Represents the average quantisation deviation per onset
newtype QDevPerc
QDevPerc :: Double -> QDevPerc
qDevPerc :: QDevPerc -> Double

-- | Quantises a <a>MidiScore</a> snapping all events to a
--   <a>ShortestNote</a> grid.
quantise :: MidiScore -> QMidiScore

-- | Quantises a <a>MidiScore</a> snapping all events to a
--   <a>ShortestNote</a> grid. The absolute size of the grid is based on
--   the <a>GridUnit</a>, which is the <a>ticksPerBeat</a> divided by the
--   number of quantization bins per beat. Besides the quantised
--   <a>MidiScore</a> and the <a>GridUnit</a> also the cumulative deviation
--   from the grid is returned.
quantiseSafe :: ShortestNote -> MidiScore -> Either String QMidiScore

-- | Quantises a <a>MidiScore</a> or returns a warning if the quantisation
--   deviation exceeds the <a>acceptableQuantisationDeviation</a>.
quantiseQDevSafe :: MidiScore -> Either String QMidiScore
avgQDev :: GridUnit -> QDev -> Int -> QDevPerc

-- | calculating the average quantisation deviation
avgQDevQMS :: QMidiScore -> QDevPerc

-- | Returns true if the number of ticks per beat can be divided by the
--   maximal number of quantisation bins.
canBeQuantisedAt :: ShortestNote -> MidiScore -> Bool

-- | Although <a>quantise</a> also quantises the duration of
--   <tt>NoteEvents</tt>, it can happen that melody notes do still overlap.
--   This function removes the overlap N.B. This function is designed only
--   for monophonic melodies, it does not work on a polyphonic score.
removeOverlap :: Voice -> Voice

-- | Returns the minimal grid size of a <a>MidiScore</a> if it has been
--   quantised. This is the <a>ticksPerBeat</a> divided by the number of
--   quantisation bins. N.B. this function does not check whether a file is
--   quantised.
getMinGridSize :: ShortestNote -> MidiScore -> TPB

-- | Applies <a>toQBins</a> to the <a>ShortestNote</a> in a
--   <a>QMidiScore</a>
qToQBins :: QMidiScore -> QBins

-- | takes the quantisation granularity parameter <a>ShortestNote</a> and
--   returns a the <a>GridUnit</a> that the beat length should be divided
--   by. The resulting value we name <a>GridUnit</a>; it describes the
--   minimal length of an event.
toQBins :: ShortestNote -> QBins

-- | Returns the numerator of a Ratio given a certain <a>QBins</a> as
--   denominator. The standard Ratio implementation simplifies the Ration,
--   e.g. 3 % 12 is converted into 1 % 4. This function reverses that
--   process:
--   
--   <pre>
--   &gt;&gt;&gt; getNumForQBins 12 (1 % 4)
--   
--   &gt;&gt;&gt; 3
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; getNumForQBins 12 (1 % 1)
--   
--   &gt;&gt;&gt; 12
--   </pre>
getNumForQBins :: QBins -> Ratio Int -> Int
instance Eq ShortestNote
instance Show ShortestNote
instance Generic ShortestNote
instance Eq GridUnit
instance Show GridUnit
instance Num GridUnit
instance Ord GridUnit
instance Enum GridUnit
instance Real GridUnit
instance Integral GridUnit
instance Binary GridUnit
instance Eq QBins
instance Show QBins
instance Num QBins
instance Ord QBins
instance Enum QBins
instance Real QBins
instance Integral QBins
instance Binary QBins
instance NFData QBins
instance Eq QDev
instance Show QDev
instance Num QDev
instance Ord QDev
instance Enum QDev
instance Real QDev
instance Integral QDev
instance Binary QDev
instance Show QMidiScore
instance Eq QMidiScore
instance Generic QMidiScore
instance Eq QDevPerc
instance Show QDevPerc
instance Num QDevPerc
instance Ord QDevPerc
instance Enum QDevPerc
instance Real QDevPerc
instance Floating QDevPerc
instance Fractional QDevPerc
instance RealFloat QDevPerc
instance RealFrac QDevPerc
instance PrintfArg QDevPerc
instance Binary QDevPerc
instance Datatype D1ShortestNote
instance Constructor C1_0ShortestNote
instance Constructor C1_1ShortestNote
instance Constructor C1_2ShortestNote
instance Constructor C1_3ShortestNote
instance Constructor C1_4ShortestNote
instance Datatype D1QMidiScore
instance Constructor C1_0QMidiScore
instance Selector S1_0_0QMidiScore
instance Selector S1_0_1QMidiScore
instance Selector S1_0_2QMidiScore
instance Selector S1_0_3QMidiScore
instance Binary ShortestNote
instance Binary QMidiScore


-- | Summary: Functions for representing MIDI time musically.
module ZMidi.Score.BarBeatPos

-- | Within a <a>MidiScore</a> we can musically describe every (quantised)
--   position in time in <a>Bar</a>, Beat, and <a>BarRat</a>. Therefore, we
--   need the <a>TimeSig</a>nature, the length of a beat (<a>TPB</a>, in
--   ticks), and the actual <a>Time</a> stamp.
getBeatInBar :: TimeSig -> TPB -> Time -> (Bar, Beat, BeatRat)

-- | Similar to <a>getBeatInBar</a> we can also describe the musical
--   position as the combination of a <a>Bar</a> and a <a>BarRat</a>. The
--   latter denotes the ratio within a bar, e.g. BarRat (3 % 4) denotes the
--   4th <a>Beat</a> in the bar.
getBarRat :: TimeSig -> TPB -> Time -> (Bar, BarRat)

-- | toRatInBeat allows us to convert a <a>BarRat</a> into a
--   (<a>Beat</a>,<a>BeatRat</a>)
toRatInBeat :: TimeSig -> BarRat -> (Beat, BeatRat)

-- | Musically it is sometimes more intuitive to have a <a>BarRat</a>, i.e.
--   the onset is defined as the ratio within the bar. For example 1%4
--   denotes them the position of the second quarter note within a 4/4
--   meter
toBarRat :: QBins -> TimeSig -> (Beat, BeatRat) -> BarRat


-- | Summary: functions for representing a <a>MidiScore</a> as text.
module ZMidi.Score.Show

-- | Show a MidiScore in a readable way
showMidiScore :: MidiScore -> String

-- | Shows the voices in a MidiScore in a readable way, but this function
--   only works for monophonic channels. TODO: fix
showVoices :: MidiScore -> String


-- | Summary: this module exports all modules inside ZMidi.Score
module ZMidi.Score


-- | Summary: Some common IO utilities
module ZMidi.IO.Common

-- | Applies a function to every directory inside a specific directory
mapDirInDir :: (FilePath -> IO a) -> FilePath -> IO [a]

-- | Applies a function to every file/dir in a directory
mapDir :: (FilePath -> IO a) -> FilePath -> IO [a]

-- | Applies a function to every file/dir in a directory, similar to
--   <a>mapDir</a>, but it discards the result of the evaluation
mapDir_ :: (FilePath -> IO a) -> FilePath -> IO ()

-- | Folds a function to every directory inside a specific directory
foldrDirInDir :: (FilePath -> b -> IO b) -> b -> FilePath -> IO b

-- | Folds a function to every file/dir in a directory
foldrDir :: (FilePath -> b -> IO b) -> b -> FilePath -> IO b

-- | Reads a <a>MidiFile</a>
readMidiFile :: FilePath -> IO (MidiFile)

-- | Reads a <a>MidiFile</a> converts it into a <a>MidiScore</a> and checks
--   if the <a>MidiScore</a> has a reasonable average quantisation
--   deviation (see <tt>QDevPerc</tt>)
readMidiScoreSafe :: FilePath -> IO (Either String MidiScore)

-- | Reads a <a>MidiFile</a> using <a>readMidiScoreSafe</a>,
--   <a>quantise</a>es the result and checks if the <a>MidiScore</a> has a
--   reasonable average quantisation deviation (see <tt>QDevPerc</tt>)
readQMidiScoreSafe :: FilePath -> IO (Either String QMidiScore)

-- | Reads a <a>MidiFile</a> converts it into a <a>MidiScore</a> and
--   returns it
readMidiScore :: FilePath -> IO (MidiScore)

-- | Reads a <a>MidiFile</a> using <a>readMidiScore</a> but
--   <a>quantise</a>es the result.
readQMidiScore :: FilePath -> IO (QMidiScore)

-- | Writes a <a>MidiScore</a> to a file.
writeMidiScore :: MidiScore -> FilePath -> IO ()

-- | Reads all midifiles at a specific location and compares all files to
--   all files, printing the paths of the files with the same MIDI content
--   to the user
logDuplicates :: FilePath -> IO ()

-- | Removes the Track labels from a <a>MidiFile</a>
removeTrackLabels :: FilePath -> IO ()

-- | Prints a string to the standard error stream
putErrStrLn :: String -> IO ()

-- | Sends a warning about a file that cannot be read to the stderr
warning :: FilePath -> String -> IO ()
