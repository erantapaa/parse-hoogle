-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell coherent noise generator based on libnoise
--   
--   A Haskell coherent noise generator roughly based on libnoise. For more
--   information on libnoise, please check:
--   <a>http://libnoise.sourceforge.net</a> The noise modules were
--   extensively profiled and benchmarked, the slower pure functions were
--   rewritten in C. The main objective of this packer is to provide a
--   simple interface to compose noise modules.
--   
--   <pre>
--   perlinWithScale = perlin `isSourceOf` scalebias
--   </pre>
--   
--   This is a 3D noise package, to get a value you need to specify a
--   triple:
--   
--   <pre>
--   getValue myComposition (-0.1, -0.5, 0.76)
--   </pre>
--   
--   For more information please read the documentation of each module
--   bellow.
--   
--   Special thanks to Csaba Hruska for the patches and testing
@package Noise
@version 1.0.6

module Math.Noise.NoiseGen
c_gradientNoise :: CDouble -> CDouble -> CDouble -> CInt -> CDouble
xNoiseGen :: Int
yNoiseGen :: Int
zNoiseGen :: Int
seedNoiseGen :: Int
shiftNoiseGen :: Int

-- | Generates a gradient-coherent-noise value from the coordinates of a 3D
--   value
gradientCoherentNoise3D :: Double -> Double -> Double -> Int -> Double

-- | Generates a gradient-noise value from the coordinates of a 3D input
--   value and the integer coordinates of a nearby 3D value
gradientNoise3D :: Double -> Double -> Double -> Int -> Int -> Int -> Int -> Double

module Math.Noise.NoiseModule
class NoiseClass n where getValue n i = getNoiseValue n [] i gen n = NoiseModule (sanitize n) [] sanitize = id
getNoiseValue :: NoiseClass n => n -> [NoiseModule] -> (Double, Double, Double) -> Maybe Double
getValue :: NoiseClass n => n -> (Double, Double, Double) -> Maybe Double
gen :: NoiseClass n => n -> NoiseModule
sanitize :: NoiseClass n => n -> n
data NoiseModule
NoiseModule :: n -> [NoiseModule] -> NoiseModule
noiseFunc :: NoiseModule -> n
sources :: NoiseModule -> [NoiseModule]
data ZeroNoise
ZeroNoise :: ZeroNoise
data OneNoise
OneNoise :: OneNoise
zero :: NoiseModule
one :: NoiseModule
isSourceOf :: (NoiseClass a, NoiseClass b) => a -> b -> NoiseModule
andModule :: (NoiseClass a, NoiseClass b) => a -> b -> NoiseModule
areSourcesOf :: NoiseClass a => NoiseModule -> a -> NoiseModule
instance NoiseClass (Maybe a)
instance NoiseClass OneNoise
instance NoiseClass ZeroNoise
instance NoiseClass NoiseModule

module Math.Noise.Modules.Perlin
c_perlin :: CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CInt -> CDouble -> CInt -> CDouble
data Perlin
Perlin :: Double -> Double -> Int -> Double -> Int -> Perlin

-- | Frequency of the first octave
perlinFrequency :: Perlin -> Double

-- | Frequency multiplier between successive octaves
perlinLacunarity :: Perlin -> Double

-- | Total number of octaves that generate the Perlin noise
perlinOctaves :: Perlin -> Int

-- | Persistence of the Perlin noise
perlinPersistence :: Perlin -> Double
perlinSeed :: Perlin -> Int
perlin :: Perlin
instance Show Perlin
instance Eq Perlin
instance NoiseClass Perlin

module Math.Noise.Modules.Abs
data Absolute
Absolute :: Absolute
absolute :: Absolute
instance NoiseClass Absolute

module Math.Noise.Modules.Billow
data Billow
Billow :: Double -> Double -> Double -> Int -> Int -> Int -> Billow
billowFrequency :: Billow -> Double
billowLacunarity :: Billow -> Double
billowPersistence :: Billow -> Double
billowOctaves :: Billow -> Int
billowSeed :: Billow -> Int
billowMaxOctave :: Billow -> Int
billow :: Billow
instance NoiseClass Billow

module Math.Noise.Modules.Select
data Select
Select :: Double -> Double -> Double -> NoiseModule -> Select
edgeFallOff :: Select -> Double
lowerBound :: Select -> Double
upperBound :: Select -> Double
controller :: Select -> NoiseModule
select :: Select

-- | Adjusts select values so that they are correct (i.e. lowerBound &lt;
--   upperBound, etcc...)
sanitizeSelect :: Select -> Select
instance NoiseClass Select

module Math.Noise.Modules.ScaleBias
data ScaleBias
ScaleBias :: Double -> Double -> ScaleBias
bias :: ScaleBias -> Double
scale :: ScaleBias -> Double
scalebias :: ScaleBias
instance NoiseClass ScaleBias

module Math.Noise

-- | Performs cubic interpolation between two values bound between two
--   other values - The alpha value should range from 0.0 to 1.0. - If the
--   alpha value is 0.0, this function returns the first value. - If the
--   alpha vlaue is 1.0, this function returns the second value.
cubic :: Double -> Double -> Double -> Double -> Double -> Double

-- | Performs linear interpolation between two values. - The alpha value
--   should range from 0.0 to 1.0. - If the alpha value is 0.0, this
--   function returns the first value. - If the alpha value is 1.0, this
--   function returns the second value.
linear :: Double -> Double -> Double -> Double

-- | Maps a value onto a cubic S-curve - the derivative of a cubic S-curve
--   is zero at 0.0 and <a>value</a> at 1.0
scurve3 :: Double -> Double

-- | Maps a value onto a quintic S-curve. - The first derivative is zero at
--   0.0 and <a>value</a> at 1.0 - The second derivative is zero at 0.0 and
--   <a>value</a> at 1.0
scurve5 :: Double -> Double
data NoiseVector
NoiseVector :: Double -> Double -> Double -> NoiseVector

-- | Generates a normalized vector based on four numbers on the range of
--   [-1.0, 1.0] - This function uses the Cook (1957) method, and may
--   reject pairs
genNormalized :: (Double, Double, Double, Double) -> Maybe NoiseVector
isNormalized :: NoiseVector -> Double

-- | Generates a uniform distribution of Double values on the range [-1.0,
--   1.0]
genUniformDistribution :: Int -> [Double]

-- | Generates a uniform distribution that has at least n*4 values that
--   won't be rejected by the vector generation function
getSuitableUniformDist :: Int -> Maybe [(Double, Double, Double, Double)]

-- | Generates a list of uniformly distributed normalized vectors
genVectors :: Int -> Maybe [NoiseVector]

-- | Creates a list of Doubles with 0.0 separating each set of 3 Doubles
toList :: [NoiseVector] -> [Double]

-- | Creates an immutable array from a list of Doubles
listTable :: [Double] -> UArray Int Double
staticTable :: Vector Double

-- | An immutable table of predefined vectors
staticTable2 :: UArray Int Double

-- | A constant list of Doubles
constList :: [Double]
