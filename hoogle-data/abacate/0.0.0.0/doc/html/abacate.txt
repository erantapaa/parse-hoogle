-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parser for a language similar to Cucumber's Gherkin
--   
--   Gherkin is the language used by the Cucumber system for Behaviour
--   Driven Development. This package contains a parser to it, based on its
--   BNF with minor changes. For more information on Cucumber, check
--   <a>http://cukes.info</a>.
@package abacate
@version 0.0.0.0


module Language.Abacate.Types

-- | An Abacate file contains exactly one feature.
type Abacate = Feature

-- | For a more detailed description of features, check
--   <a>https://github.com/cucumber/cucumber/wiki/Feature-Introduction</a>.
data Feature
Feature :: Comment -> Tags -> Header -> Maybe Background -> FeatureElements -> Comment -> Feature
fBegComment :: Feature -> Comment
fTags :: Feature -> Tags
fHeader :: Feature -> Header
fBackground :: Feature -> Maybe Background
fFeatureElements :: Feature -> FeatureElements
fEndComment :: Feature -> Comment

-- | The <a>Header</a> contains the title and description of the
--   <a>Feature</a>. It is usually on the format:
--   
--   <pre>
--   Feature: TITLE
--     DESCRIPTION LINE 1
--     DESCRIPTION LINE 2
--   </pre>
type Header = Text
type FeatureElements = [FeatureElement]

-- | A <a>FeatureElement</a> is simply a <a>Scenario</a> or a
--   <a>ScenarioOutline</a>.
data FeatureElement
FES :: Scenario -> FeatureElement
FESO :: ScenarioOutline -> FeatureElement

-- | The <a>Scenario</a> contains a list of <a>Steps</a>.
data Scenario
Scenario :: Tags -> BasicScenario -> Scenario
scTags :: Scenario -> Tags
scBasicScenario :: Scenario -> BasicScenario

-- | The <a>Steps</a> of the <a>ScenarioOutline</a> can contain
--   placeholders which are substituted by the fields of the
--   <a>ExamplesSection</a>. For more information on the
--   <a>ScenarioOutline</a> check
--   <a>https://github.com/cucumber/cucumber/wiki/Scenario-outlines</a>.
data ScenarioOutline
ScenarioOutline :: ExamplesSection -> Scenario -> ScenarioOutline
soExamplesSection :: ScenarioOutline -> ExamplesSection
soScenario :: ScenarioOutline -> Scenario

-- | The <a>Background</a> is basically a <a>Scenario</a> without
--   <a>Tags</a>. It's used to create a context for the other
--   <a>Scenario</a>s to run, and a <a>Feature</a> can only have one
--   <a>Background</a>. For more information on the <a>Background</a> check
--   <a>https://github.com/cucumber/cucumber/wiki/Background</a>.
type Background = BasicScenario

-- | This is the basic type for <a>Scenario</a>, <a>ScenarioOutline</a> and
--   <a>Background</a>.
data BasicScenario
BasicScenario :: Comment -> Text -> Steps -> BasicScenario
bsComment :: BasicScenario -> Comment
bsName :: BasicScenario -> Text
bsSteps :: BasicScenario -> Steps
type Tags = [Tag]

-- | A <a>Tag</a> is a textual element started with @.
type Tag = Text
type Comment = Text
type Steps = [Step]

-- | For more information on <a>Steps</a> check
--   <a>https://github.com/cucumber/cucumber/wiki/Given-When-Then</a>.
data Step
Step :: Comment -> StepKeyword -> Text -> Maybe MultilineArg -> Step
stComment :: Step -> Comment
stStepKeyword :: Step -> StepKeyword
stBody :: Step -> Text
stMultilineArg :: Step -> Maybe MultilineArg
type ExamplesSection = [Examples]

-- | The <a>Examples</a> are used to fill the value of placeholders on
--   <a>ScenarioOutline</a>s.
data Examples
Examples :: Comment -> Text -> Table -> Examples
eComment :: Examples -> Comment
eName :: Examples -> Text
eTable :: Examples -> Table

-- | <a>Steps</a> can have multi-line arguments. For more information check
--   <a>https://github.com/cucumber/cucumber/wiki/Multiline-Step-Arguments</a>.
data MultilineArg
MAT :: Table -> MultilineArg
MAPS :: PyString -> MultilineArg
type PyString = Text
type Table = [Row]
type Row = [Cell]
type Cell = Text
data StepKeyword
Given :: StepKeyword
When :: StepKeyword
Then :: StepKeyword
And :: StepKeyword
But :: StepKeyword
instance Eq MultilineArg
instance Show MultilineArg
instance Eq Examples
instance Show Examples
instance Eq StepKeyword
instance Bounded StepKeyword
instance Enum StepKeyword
instance Show StepKeyword
instance Read StepKeyword
instance Eq Step
instance Show Step
instance Eq BasicScenario
instance Show BasicScenario
instance Eq Scenario
instance Show Scenario
instance Eq ScenarioOutline
instance Show ScenarioOutline
instance Eq FeatureElement
instance Show FeatureElement
instance Eq Feature
instance Show Feature


-- | Gherkin is the language used by the Cucumber system for Behaviour
--   Driven Development. This package contains a parser to it, based on its
--   BNF with minor changes. For more information on Cucumber, check
--   <a>http://cukes.info</a>.
--   
--   According to
--   <a>https://github.com/cucumber/gherkin/wiki/BNF/cf8696092b0e6841ba0c3cf4e2f0d3c964b9c144</a>.
module Language.Abacate

-- | Parses a file with <a>Abacate</a> code.
parseFile :: FilePath -> IO (Either ParseError Abacate)

-- | Parses a string with <a>Abacate</a> code.
parseAbacate :: Text -> Either ParseError Abacate
