-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | More convenient construction of TH ASTs
--   
@package th-build
@version 0.4.0.0

module Language.Haskell.TH.Build
class Convertible a b
convert :: Convertible a b => a -> b

-- | Argument-converting wrapper for <a>appE</a>.
appE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ

-- | Argument-converting wrapper for <a>appK</a>.
appK' :: (Convertible kind Kind, Convertible kind' Kind) => kind -> kind' -> Kind

-- | Argument-converting wrapper for <a>appT</a>.
appT' :: (Convertible typeQ TypeQ, Convertible typeQ' TypeQ) => typeQ -> typeQ' -> TypeQ

-- | Argument-converting wrapper for <a>appsE</a>.
appsE' :: Convertible expQs [ExpQ] => expQs -> ExpQ

-- | Argument-converting wrapper for <a>arithSeqE</a>.
arithSeqE' :: Convertible rangeQ RangeQ => rangeQ -> ExpQ

-- | Argument-converting wrapper for <a>asP</a>.
asP' :: (Convertible name Name, Convertible patQ PatQ) => name -> patQ -> PatQ

-- | Argument-converting wrapper for <a>bangP</a>.
bangP' :: Convertible patQ PatQ => patQ -> PatQ

-- | Argument-converting wrapper for <a>bindS</a>.
bindS' :: (Convertible patQ PatQ, Convertible expQ ExpQ) => patQ -> expQ -> StmtQ

-- | Argument-converting wrapper for <a>caseE</a>.
caseE' :: (Convertible expQ ExpQ, Convertible matchQs [MatchQ]) => expQ -> matchQs -> ExpQ

-- | Argument-converting wrapper for <a>classD</a>.
classD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible funDeps [FunDep], Convertible decQs [DecQ]) => cxtQ -> name -> tyVarBndrs -> funDeps -> decQs -> DecQ

-- | Argument-converting wrapper for <a>classP</a>.
classP' :: (Convertible name Name, Convertible typeQs [TypeQ]) => name -> typeQs -> PredQ

-- | Argument-converting wrapper for <a>clause</a>.
clause' :: (Convertible patQs [PatQ], Convertible bodyQ BodyQ, Convertible decQs [DecQ]) => patQs -> bodyQ -> decQs -> ClauseQ

-- | Argument-converting wrapper for <a>closedTypeFamilyKindD</a>.
closedTypeFamilyKindD' :: (Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible kind Kind, Convertible tySynEqnQs [TySynEqnQ]) => name -> tyVarBndrs -> kind -> tySynEqnQs -> DecQ

-- | Argument-converting wrapper for <a>closedTypeFamilyNoKindD</a>.
closedTypeFamilyNoKindD' :: (Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible tySynEqnQs [TySynEqnQ]) => name -> tyVarBndrs -> tySynEqnQs -> DecQ

-- | Argument-converting wrapper for <a>compE</a>.
compE' :: Convertible stmtQs [StmtQ] => stmtQs -> ExpQ

-- | Argument-converting wrapper for <a>conE</a>.
conE' :: Convertible name Name => name -> ExpQ

-- | Argument-converting wrapper for <a>conK</a>.
conK' :: Convertible name Name => name -> Kind

-- | Argument-converting wrapper for <a>conP</a>.
conP' :: (Convertible name Name, Convertible patQs [PatQ]) => name -> patQs -> PatQ

-- | Argument-converting wrapper for <a>conT</a>.
conT' :: Convertible name Name => name -> TypeQ

-- | Argument-converting wrapper for <a>condE</a>.
condE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> ExpQ

-- | Argument-converting wrapper for <a>cxt</a>.
cxt' :: Convertible predQs [PredQ] => predQs -> CxtQ

-- | Argument-converting wrapper for <a>dataD</a>.
dataD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible conQs [ConQ], Convertible names [Name]) => cxtQ -> name -> tyVarBndrs -> conQs -> names -> DecQ

-- | Argument-converting wrapper for <a>dataInstD</a>.
dataInstD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible typeQs [TypeQ], Convertible conQs [ConQ], Convertible names [Name]) => cxtQ -> name -> typeQs -> conQs -> names -> DecQ

-- | Argument-converting wrapper for <a>doE</a>.
doE' :: Convertible stmtQs [StmtQ] => stmtQs -> ExpQ

-- | Argument-converting wrapper for <a>dyn</a>.
dyn' :: Convertible string String => string -> ExpQ

-- | Argument-converting wrapper for <a>equalP</a>.
equalP' :: (Convertible typeQ TypeQ, Convertible typeQ' TypeQ) => typeQ -> typeQ' -> PredQ

-- | Argument-converting wrapper for <a>familyKindD</a>.
familyKindD' :: (Convertible famFlavour FamFlavour, Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible kind Kind) => famFlavour -> name -> tyVarBndrs -> kind -> DecQ

-- | Argument-converting wrapper for <a>familyNoKindD</a>.
familyNoKindD' :: (Convertible famFlavour FamFlavour, Convertible name Name, Convertible tyVarBndrs [TyVarBndr]) => famFlavour -> name -> tyVarBndrs -> DecQ

-- | Argument-converting wrapper for <a>fieldExp</a>.
fieldExp' :: (Convertible name Name, Convertible expQ ExpQ) => name -> expQ -> Q (Name, Exp)

-- | Argument-converting wrapper for <a>fieldPat</a>.
fieldPat' :: (Convertible name Name, Convertible patQ PatQ) => name -> patQ -> FieldPatQ

-- | Argument-converting wrapper for <a>forImpD</a>.
forImpD' :: (Convertible callconv Callconv, Convertible safety Safety, Convertible string String, Convertible name Name, Convertible typeQ TypeQ) => callconv -> safety -> string -> name -> typeQ -> DecQ

-- | Argument-converting wrapper for <a>forallC</a>.
forallC' :: (Convertible tyVarBndrs [TyVarBndr], Convertible cxtQ CxtQ, Convertible conQ ConQ) => tyVarBndrs -> cxtQ -> conQ -> ConQ

-- | Argument-converting wrapper for <a>forallT</a>.
forallT' :: (Convertible tyVarBndrs [TyVarBndr], Convertible cxtQ CxtQ, Convertible typeQ TypeQ) => tyVarBndrs -> cxtQ -> typeQ -> TypeQ

-- | Argument-converting wrapper for <a>fromE</a>.
fromE' :: Convertible expQ ExpQ => expQ -> ExpQ

-- | Argument-converting wrapper for <a>fromR</a>.
fromR' :: Convertible expQ ExpQ => expQ -> RangeQ

-- | Argument-converting wrapper for <a>fromThenE</a>.
fromThenE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ

-- | Argument-converting wrapper for <a>fromThenR</a>.
fromThenR' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> RangeQ

-- | Argument-converting wrapper for <a>fromThenToE</a>.
fromThenToE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> ExpQ

-- | Argument-converting wrapper for <a>fromThenToR</a>.
fromThenToR' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> RangeQ

-- | Argument-converting wrapper for <a>fromToE</a>.
fromToE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ

-- | Argument-converting wrapper for <a>fromToR</a>.
fromToR' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> RangeQ

-- | Argument-converting wrapper for <a>funD</a>.
funD' :: (Convertible name Name, Convertible clauseQs [ClauseQ]) => name -> clauseQs -> DecQ

-- | Argument-converting wrapper for <a>funDep</a>.
funDep' :: (Convertible names [Name], Convertible names' [Name]) => names -> names' -> FunDep

-- | Argument-converting wrapper for <a>guardedB</a>.
guardedB' :: Convertible guardedExpQs [Q (Guard, Exp)] => guardedExpQs -> BodyQ

-- | Argument-converting wrapper for <a>infixApp</a>.
infixApp' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> ExpQ

-- | Argument-converting wrapper for <a>infixC</a>.
infixC' :: (Convertible strictTypeQ (Q (Strict, Type)), Convertible name Name, Convertible strictTypeQ' (Q (Strict, Type))) => strictTypeQ -> name -> strictTypeQ' -> ConQ

-- | Argument-converting wrapper for <a>infixE</a>.
infixE' :: (Convertible maybeExpQ (Maybe ExpQ), Convertible expQ ExpQ, Convertible maybeExpQ' (Maybe ExpQ)) => maybeExpQ -> expQ -> maybeExpQ' -> ExpQ

-- | Argument-converting wrapper for <a>infixLD</a>.
infixLD' :: (Convertible int Int, Convertible name Name) => int -> name -> DecQ

-- | Argument-converting wrapper for <a>infixND</a>.
infixND' :: (Convertible int Int, Convertible name Name) => int -> name -> DecQ

-- | Argument-converting wrapper for <a>infixP</a>.
infixP' :: (Convertible patQ PatQ, Convertible name Name, Convertible patQ' PatQ) => patQ -> name -> patQ' -> PatQ

-- | Argument-converting wrapper for <a>infixRD</a>.
infixRD' :: (Convertible int Int, Convertible name Name) => int -> name -> DecQ

-- | Argument-converting wrapper for <a>instanceD</a>.
instanceD' :: (Convertible cxtQ CxtQ, Convertible typeQ TypeQ, Convertible decQs [DecQ]) => cxtQ -> typeQ -> decQs -> DecQ

-- | Argument-converting wrapper for <a>kindedTV</a>.
kindedTV' :: (Convertible name Name, Convertible kind Kind) => name -> kind -> TyVarBndr

-- | Argument-converting wrapper for <a>lam1E</a>.
lam1E' :: (Convertible patQ PatQ, Convertible expQ ExpQ) => patQ -> expQ -> ExpQ

-- | Argument-converting wrapper for <a>lamCaseE</a>.
lamCaseE' :: Convertible matchQs [MatchQ] => matchQs -> ExpQ

-- | Argument-converting wrapper for <a>lamE</a>.
lamE' :: (Convertible patQs [PatQ], Convertible expQ ExpQ) => patQs -> expQ -> ExpQ

-- | Argument-converting wrapper for <a>letE</a>.
letE' :: (Convertible decQs [DecQ], Convertible expQ ExpQ) => decQs -> expQ -> ExpQ

-- | Argument-converting wrapper for <a>letS</a>.
letS' :: Convertible decQs [DecQ] => decQs -> StmtQ

-- | Argument-converting wrapper for <a>listE</a>.
listE' :: Convertible expQs [ExpQ] => expQs -> ExpQ

-- | Argument-converting wrapper for <a>listP</a>.
listP' :: Convertible patQs [PatQ] => patQs -> PatQ

-- | Argument-converting wrapper for <a>litE</a>.
litE' :: Convertible lit Lit => lit -> ExpQ

-- | Argument-converting wrapper for <a>litP</a>.
litP' :: Convertible lit Lit => lit -> PatQ

-- | Argument-converting wrapper for <a>litT</a>.
litT' :: Convertible tyLitQ TyLitQ => tyLitQ -> TypeQ

-- | Argument-converting wrapper for <a>match</a>.
match' :: (Convertible patQ PatQ, Convertible bodyQ BodyQ, Convertible decQs [DecQ]) => patQ -> bodyQ -> decQs -> MatchQ

-- | Argument-converting wrapper for <a>multiIfE</a>.
multiIfE' :: Convertible guardedExpQs [Q (Guard, Exp)] => guardedExpQs -> ExpQ

-- | Argument-converting wrapper for <a>newtypeD</a>.
newtypeD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible conQ ConQ, Convertible names [Name]) => cxtQ -> name -> tyVarBndrs -> conQ -> names -> DecQ

-- | Argument-converting wrapper for <a>newtypeInstD</a>.
newtypeInstD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible typeQs [TypeQ], Convertible conQ ConQ, Convertible names [Name]) => cxtQ -> name -> typeQs -> conQ -> names -> DecQ

-- | Argument-converting wrapper for <a>noBindS</a>.
noBindS' :: Convertible expQ ExpQ => expQ -> StmtQ

-- | Argument-converting wrapper for <a>normalB</a>.
normalB' :: Convertible expQ ExpQ => expQ -> BodyQ

-- | Argument-converting wrapper for <a>normalC</a>.
normalC' :: (Convertible name Name, Convertible strictTypeQs [StrictTypeQ]) => name -> strictTypeQs -> ConQ

-- | Argument-converting wrapper for <a>normalG</a>.
normalG' :: Convertible expQ ExpQ => expQ -> GuardQ

-- | Argument-converting wrapper for <a>normalGE</a>.
normalGE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> Q (Guard, Exp)

-- | Argument-converting wrapper for <a>numTyLit</a>.
numTyLit' :: Convertible integer Integer => integer -> TyLitQ

-- | Argument-converting wrapper for <a>parS</a>.
parS' :: Convertible stmtQss [[StmtQ]] => stmtQss -> StmtQ

-- | Argument-converting wrapper for <a>parensE</a>.
parensE' :: Convertible expQ ExpQ => expQ -> ExpQ

-- | Argument-converting wrapper for <a>parensP</a>.
parensP' :: Convertible patQ PatQ => patQ -> PatQ

-- | Argument-converting wrapper for <a>patG</a>.
patG' :: Convertible stmtQs [StmtQ] => stmtQs -> GuardQ

-- | Argument-converting wrapper for <a>patGE</a>.
patGE' :: (Convertible stmtQs [StmtQ], Convertible expQ ExpQ) => stmtQs -> expQ -> Q (Guard, Exp)

-- | Argument-converting wrapper for <a>plainTV</a>.
plainTV' :: Convertible name Name => name -> TyVarBndr

-- | Argument-converting wrapper for <a>pragAnnD</a>.
pragAnnD' :: (Convertible annTarget AnnTarget, Convertible expQ ExpQ) => annTarget -> expQ -> DecQ

-- | Argument-converting wrapper for <a>pragInlD</a>.
pragInlD' :: (Convertible name Name, Convertible inline Inline, Convertible ruleMatch RuleMatch, Convertible phases Phases) => name -> inline -> ruleMatch -> phases -> DecQ

-- | Argument-converting wrapper for <a>pragRuleD</a>.
pragRuleD' :: (Convertible string String, Convertible ruleBndrQs [RuleBndrQ], Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible phases Phases) => string -> ruleBndrQs -> expQ -> expQ' -> phases -> DecQ

-- | Argument-converting wrapper for <a>pragSpecD</a>.
pragSpecD' :: (Convertible name Name, Convertible typeQ TypeQ, Convertible phases Phases) => name -> typeQ -> phases -> DecQ

-- | Argument-converting wrapper for <a>pragSpecInlD</a>.
pragSpecInlD' :: (Convertible name Name, Convertible typeQ TypeQ, Convertible inline Inline, Convertible phases Phases) => name -> typeQ -> inline -> phases -> DecQ

-- | Argument-converting wrapper for <a>pragSpecInstD</a>.
pragSpecInstD' :: Convertible typeQ TypeQ => typeQ -> DecQ

-- | Argument-converting wrapper for <a>promotedT</a>.
promotedT' :: Convertible name Name => name -> TypeQ

-- | Argument-converting wrapper for <a>promotedTupleT</a>.
promotedTupleT' :: Convertible int Int => int -> TypeQ

-- | Argument-converting wrapper for <a>recC</a>.
recC' :: (Convertible name Name, Convertible varStrictTypeQs [VarStrictTypeQ]) => name -> varStrictTypeQs -> ConQ

-- | Argument-converting wrapper for <a>recConE</a>.
recConE' :: (Convertible name Name, Convertible nameExpPairQs [Q (Name, Exp)]) => name -> nameExpPairQs -> ExpQ

-- | Argument-converting wrapper for <a>recP</a>.
recP' :: (Convertible name Name, Convertible fieldPatQs [FieldPatQ]) => name -> fieldPatQs -> PatQ

-- | Argument-converting wrapper for <a>recUpdE</a>.
recUpdE' :: (Convertible expQ ExpQ, Convertible nameExpPairQs [Q (Name, Exp)]) => expQ -> nameExpPairQs -> ExpQ

-- | Argument-converting wrapper for <a>roleAnnotD</a>.
roleAnnotD' :: (Convertible name Name, Convertible roles [Role]) => name -> roles -> DecQ

-- | Argument-converting wrapper for <a>ruleVar</a>.
ruleVar' :: Convertible name Name => name -> RuleBndrQ

-- | Argument-converting wrapper for <a>sectionL</a>.
sectionL' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ

-- | Argument-converting wrapper for <a>sectionR</a>.
sectionR' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ

-- | Argument-converting wrapper for <a>sigD</a>.
sigD' :: (Convertible name Name, Convertible typeQ TypeQ) => name -> typeQ -> DecQ

-- | Argument-converting wrapper for <a>sigE</a>.
sigE' :: (Convertible expQ ExpQ, Convertible typeQ TypeQ) => expQ -> typeQ -> ExpQ

-- | Argument-converting wrapper for <a>sigP</a>.
sigP' :: (Convertible patQ PatQ, Convertible typeQ TypeQ) => patQ -> typeQ -> PatQ

-- | Argument-converting wrapper for <a>sigT</a>.
sigT' :: (Convertible typeQ TypeQ, Convertible kind Kind) => typeQ -> kind -> TypeQ

-- | Argument-converting wrapper for <a>strTyLit</a>.
strTyLit' :: Convertible string String => string -> TyLitQ

-- | Argument-converting wrapper for <a>strictType</a>.
strictType' :: (Convertible strictQ (Q Strict), Convertible typeQ TypeQ) => strictQ -> typeQ -> StrictTypeQ

-- | Argument-converting wrapper for <a>tildeP</a>.
tildeP' :: Convertible patQ PatQ => patQ -> PatQ

-- | Argument-converting wrapper for <a>tupE</a>.
tupE' :: Convertible expQs [ExpQ] => expQs -> ExpQ

-- | Argument-converting wrapper for <a>tupP</a>.
tupP' :: Convertible patQs [PatQ] => patQs -> PatQ

-- | Argument-converting wrapper for <a>tupleK</a>.
tupleK' :: Convertible int Int => int -> Kind

-- | Argument-converting wrapper for <a>tySynD</a>.
tySynD' :: (Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible typeQ TypeQ) => name -> tyVarBndrs -> typeQ -> DecQ

-- | Argument-converting wrapper for <a>tySynEqn</a>.
tySynEqn' :: (Convertible typeQs [TypeQ], Convertible typeQ TypeQ) => typeQs -> typeQ -> TySynEqnQ

-- | Argument-converting wrapper for <a>tySynInstD</a>.
tySynInstD' :: (Convertible name Name, Convertible tySynEqnQ TySynEqnQ) => name -> tySynEqnQ -> DecQ

-- | Argument-converting wrapper for <a>typedRuleVar</a>.
typedRuleVar' :: (Convertible name Name, Convertible typeQ TypeQ) => name -> typeQ -> RuleBndrQ

-- | Argument-converting wrapper for <a>uInfixE</a>.
uInfixE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> ExpQ

-- | Argument-converting wrapper for <a>uInfixP</a>.
uInfixP' :: (Convertible patQ PatQ, Convertible name Name, Convertible patQ' PatQ) => patQ -> name -> patQ' -> PatQ

-- | Argument-converting wrapper for <a>unboxedTupE</a>.
unboxedTupE' :: Convertible expQs [ExpQ] => expQs -> ExpQ

-- | Argument-converting wrapper for <a>unboxedTupP</a>.
unboxedTupP' :: Convertible patQs [PatQ] => patQs -> PatQ

-- | Argument-converting wrapper for <a>valD</a>.
valD' :: (Convertible patQ PatQ, Convertible bodyQ BodyQ, Convertible decQs [DecQ]) => patQ -> bodyQ -> decQs -> DecQ

-- | Argument-converting wrapper for <a>varE</a>.
varE' :: Convertible name Name => name -> ExpQ

-- | Argument-converting wrapper for <a>varK</a>.
varK' :: Convertible name Name => name -> Kind

-- | Argument-converting wrapper for <a>varP</a>.
varP' :: Convertible name Name => name -> PatQ

-- | Argument-converting wrapper for <a>varStrictType</a>.
varStrictType' :: (Convertible name Name, Convertible strictTypeQ StrictTypeQ) => name -> strictTypeQ -> VarStrictTypeQ

-- | Argument-converting wrapper for <a>varT</a>.
varT' :: Convertible name Name => name -> TypeQ

-- | Argument-converting wrapper for <a>viewP</a>.
viewP' :: (Convertible expQ ExpQ, Convertible patQ PatQ) => expQ -> patQ -> PatQ
getFieldE :: Convertible a Name => a -> Int -> Int -> Q Exp
htuple' :: Convertible a TypeQ => Int -> a -> TypeQ

-- | <h1><a>lamE'</a></h1>
(\->) :: (Convertible a [PatQ], Convertible a1 ExpQ) => a -> a1 -> ExpQ
class Arrows a b | a -> b, b -> a
arrow :: Arrows a b => a -> b -> b
(-->) :: (Convertible qa (Q a), Convertible qb (Q b), Arrows a b) => qa -> qb -> Q b
class Sigs a b c | c -> a b, a -> b c
signature :: Sigs a b c => a -> b -> c
(.::) :: (Convertible qa (Q a'), Convertible qb (Q b'), Sigs a' b' c) => qa -> qb -> Q c

-- | Value decl without a <tt>where</tt>-clause
svalD :: (Convertible patQ PatQ, Convertible bodyQ BodyQ) => patQ -> bodyQ -> DecQ

-- | <tt>case</tt> match without a <tt>where</tt>-clause
smatch :: (Convertible patQ PatQ, Convertible bodyQ BodyQ) => patQ -> bodyQ -> MatchQ

-- | <a>Clause</a> without a <tt>where</tt>-clause
sclause :: (Convertible patQs [PatQ], Convertible bodyQ BodyQ) => patQs -> bodyQ -> ClauseQ

-- | <tt>data</tt> decl with no context
sdataD :: (Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible conQs [ConQ], Convertible names [Name]) => name -> tyVarBndrs -> conQs -> names -> DecQ

-- | <tt>newtype</tt> decl with no context
snewtypeD :: (Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible conQ ConQ, Convertible names [Name]) => name -> tyVarBndrs -> conQ -> names -> DecQ
expQ :: Convertible a ExpQ => a -> ExpQ
expQs :: Convertible a [ExpQ] => a -> [ExpQ]
patQ :: Convertible a PatQ => a -> PatQ
patQs :: Convertible a [PatQ] => a -> [PatQ]
typeQ :: Convertible a TypeQ => a -> TypeQ
typeQs :: Convertible a [TypeQ] => a -> [TypeQ]
name :: Convertible a Name => a -> Name
tyVarBndr :: Convertible a TyVarBndr => a -> TyVarBndr
conQ :: Convertible a ConQ => a -> ConQ
cxtQ :: Convertible a CxtQ => a -> CxtQ
strictTypeQ :: Convertible a StrictTypeQ => a -> StrictTypeQ
strictTypeQs :: Convertible a [StrictTypeQ] => a -> [StrictTypeQ]
decsQ :: Convertible a DecsQ => a -> DecsQ
