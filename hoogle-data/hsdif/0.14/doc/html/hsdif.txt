-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell SDIF
--   
--   hsdif provides Sound.SDIF, a haskell module implementing a subset of
--   Sound Description Interchange Format.
@package hsdif
@version 0.14


-- | SDIF related data types
module Sound.SDIF.Type

-- | Section of <a>ByteString</a> from <i>i</i>th to <i>j</i>th indices.
section :: ByteString -> Int64 -> Int64 -> ByteString

-- | <a>Int</a> based variant of <a>section</a>.
section' :: ByteString -> Int -> Int -> ByteString

-- | Data element type.
type Type = Int

-- | Is data element type standard.
data_type_standard_p :: Type -> Bool

-- | String describing indicated data element type.
--   
--   <pre>
--   data_type_string 0x008 == "real number"
--   </pre>
data_type_string :: Type -> String

-- | Size (in bytes) of data element type.
--   
--   <pre>
--   data_type_size 0x008 == 8
--   </pre>
data_type_size :: Type -> Int

-- | Universal type for element data.
data Datum
I8 :: Int -> Datum
I16 :: Int -> Datum
I32 :: Int -> Datum
I64 :: Int64 -> Datum
U32 :: Int -> Datum
U64 :: Word64 -> Datum
F32 :: Float -> Datum
F64 :: Double -> Datum
U8 :: Word8 -> Datum

-- | Decoder for indicated data element type to <a>Datum</a>.
data_type_decoder :: Type -> ByteString -> Datum

-- | SDIF encoder for <a>Datum</a>.
data_type_encoder :: Datum -> ByteString
instance Eq Datum
instance Show Datum


-- | Byte level SDIF frame data structure.
module Sound.SDIF.Byte.Matrix

-- | Data integrity check for SDIF matix byte stream.
is_matrix_b :: ByteString -> Bool

-- | Matrix header size (constant).
matrix_b_header_size :: Int

-- | Extract matrix header byte stream.
matrix_b_header :: ByteString -> ByteString

-- | Extract matrix type string.
matrix_b_type :: ByteString -> String

-- | Extract matrix element data <a>Type</a>.
matrix_b_data_type :: ByteString -> Type

-- | Extract matrix row count.
matrix_b_rows :: ByteString -> Int

-- | Extract matrix column count.
matrix_b_columns :: ByteString -> Int

-- | Extract matrix element count (ie. rows by columns).
matrix_b_elements :: ByteString -> Int

-- | Calculate size of matrix data store (ie. elements by <a>Type</a>
--   size).
matrix_b_data_size :: ByteString -> Int

-- | Variant of <a>matrix_b_data_size</a> taking into account required
--   padding.
matrix_b_storage_size :: ByteString -> Int

-- | Extract matrix data from byte stream.
matrix_b_to_matrix_v :: ByteString -> [Datum]


-- | Byte level SDIF frame data structure.
module Sound.SDIF.Byte.Frame

-- | Data integrity check for SDIF frame data stream.
is_frame_b :: ByteString -> Bool

-- | Extract type string from SDIF frame byte stream.
frame_b_type :: ByteString -> String

-- | Extract size from SDIF frame byte stream.
frame_b_size :: ByteString -> Int

-- | Extract time stamp from SDIF frame byte stream.
frame_b_time :: ByteString -> Float

-- | Extract identifier from SDIF frame byte stream.
frame_b_id :: ByteString -> Int

-- | Extract matrix count from SDIF frame byte stream.
frame_b_matrices :: ByteString -> Int

-- | Extract frame data segment from SDIF frame byte stream.
frame_b_data :: ByteString -> ByteString

-- | Extract frame matrix <i>(start,end)</i> indices from SDIF frame byte
--   stream.
frame_b_matrix_i :: ByteString -> [(Int, Int)]


-- | SDIF matrix functions.
module Sound.SDIF.Matrix

-- | SDIF matrix data store.
data Matrix
Matrix :: ByteString -> String -> Int -> Int -> Int -> Int -> Int -> Int -> [Datum] -> Matrix
matrix_b :: Matrix -> ByteString
matrix_type :: Matrix -> String
matrix_data_type :: Matrix -> Int
matrix_rows :: Matrix -> Int
matrix_columns :: Matrix -> Int
matrix_elements :: Matrix -> Int
matrix_data_size :: Matrix -> Int
matrix_storage_size :: Matrix -> Int
matrix_v :: Matrix -> [Datum]

-- | Decode <a>Matrix</a>.
decode_matrix :: ByteString -> Matrix

-- | Section of list from <i>i</i>th to <i>j</i>th indices.
--   
--   <pre>
--   list_section [1..9] 4 6 == [5,6]
--   </pre>
list_section :: [a] -> Int -> Int -> [a]

-- | Extract <i>n</i>th row of <a>Matrix</a>.
matrix_row :: Matrix -> Int -> [Datum]

-- | Extract <i>n</i>th column of <a>Matrix</a>.
matrix_column :: Matrix -> Int -> [Datum]
instance Eq Matrix
instance Show Matrix


-- | SDIF frame functions
module Sound.SDIF.Frame

-- | SDIF frame data store
data Frame
Frame :: ByteString -> String -> Int -> Float -> Int -> Int -> [(Int, Int)] -> [Matrix] -> Frame
frame_b :: Frame -> ByteString
frame_type :: Frame -> String
frame_size :: Frame -> Int
frame_time :: Frame -> Float
frame_id :: Frame -> Int
frame_matrices :: Frame -> Int
frame_matrix_i :: Frame -> [(Int, Int)]
frame_matrix_c :: Frame -> [Matrix]

-- | Decode SDIF <a>Frame</a>.
decode_frame :: ByteString -> Frame

-- | Extract <i>n</i>th matrix of <a>Frame</a>.
frame_matrix_b :: Frame -> Int -> ByteString

-- | Extract and decode <i>n</i>th matrix of <a>Frame</a>.
frame_matrix :: Frame -> Int -> Matrix
instance Eq Frame
instance Show Frame


-- | Byte level SDIF data structure.
module Sound.SDIF.Byte.SDIF

-- | Check signature of SDIF byte stream.
is_sdif_b :: ByteString -> Bool

-- | Count number of frames at SDIF byte stream.
sdif_b_frames :: ByteString -> Int

-- | Extract start and end indices for <i>n</i> frames at SDIF byte stream.
sdif_b_frame_i :: ByteString -> Int -> [(Int, Int)]


-- | SDIF (Sound Description Interchange Format)
module Sound.SDIF

-- | SDIF data store.
data SDIF
SDIF :: ByteString -> Int -> [(Int, Int)] -> [Frame] -> SDIF
sdif_b :: SDIF -> ByteString
sdif_frames :: SDIF -> Int
sdif_frame_i :: SDIF -> [(Int, Int)]
sdif_frame_c :: SDIF -> [Frame]

-- | Decode <a>SDIF</a> data stream.
--   
--   <pre>
--   b &lt;- B.readFile "/home/rohan/sw/hsdif/Help/crotale.sdif"
--   sdif_frames (decode_sdif b) == 2
--   </pre>
decode_sdif :: ByteString -> SDIF

-- | Read and decode <a>SDIF</a> from named file.
--   
--   <pre>
--   s &lt;- sdif_read_file "/home/rohan/sw/hsdif/Help/crotale.sdif"
--   sdif_frame_i s == [(0,16),(16,856)]
--   </pre>
sdif_read_file :: FilePath -> IO SDIF

-- | Extract <i>n</i>th frame data from <a>SDIF</a>.
sdif_frame_b :: SDIF -> Int -> ByteString

-- | Extract and decode <i>n</i>th frame from <a>SDIF</a>.
--   
--   <pre>
--   frame_type (sdif_frame s 0) == "SDIF"
--   </pre>
sdif_frame :: SDIF -> Int -> Frame

-- | Extract and decode <i>j</i>th matrix from <i>i</i>th frame from
--   <a>SDIF</a>.
--   
--   <pre>
--   matrix_type (sdif_matrix s 1 0) == "1RES"
--   </pre>
sdif_matrix :: SDIF -> Int -> Int -> Matrix

-- | Run <a>matrix_v</a> on result of <a>sdif_matrix</a>.
--   
--   <pre>
--   length (sdif_matrix_v s 1 0) == 200
--   </pre>
sdif_matrix_v :: SDIF -> Int -> Int -> [Datum]
instance Eq SDIF
instance Show SDIF
