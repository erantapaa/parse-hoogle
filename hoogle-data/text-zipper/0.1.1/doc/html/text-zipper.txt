-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A text editor zipper library
--   
@package text-zipper
@version 0.1.1


-- | This module provides a two-dimensional text zipper data structure.
--   This structure represents a body of text and an editing cursor which
--   can be moved throughout the text, along with a set of editing
--   transformations.
--   
--   Text zippers are generalized over the set of data types that might be
--   used to store lists of characters (e.g., <a>String</a>, <a>Text</a>,
--   etc.). As a result, the most general way to create a text zipper is to
--   use <a>mkZipper</a> and provide all of the functions required to
--   manipulate the underlying text data.
--   
--   Implementation using <a>Text</a> and <a>String</a> are provided.
module Data.Text.Zipper
data TextZipper a

-- | Create a zipper using a custom text storage type. Takes the initial
--   text as well as all of the functions necessary to manipulate the
--   underlying text values.
mkZipper :: Monoid a => (Char -> a) -> (Int -> a -> a) -> (Int -> a -> a) -> (a -> Int) -> (a -> Char) -> (a -> a) -> (a -> Bool) -> [a] -> TextZipper a

-- | Construct a zipper from <a>Text</a> values.
textZipper :: [Text] -> TextZipper Text

-- | Construct a zipper from list values.
stringZipper :: [String] -> TextZipper String

-- | Get the text contents of the zipper.
getText :: Monoid a => TextZipper a -> [a]

-- | The line of text on which the zipper's cursor currently resides.
currentLine :: Monoid a => TextZipper a -> a

-- | Get the cursor position of the zipper; returns <tt>(row, col)</tt>.
--   <tt>row</tt> ranges from <tt>[0..num_rows-1]</tt> inclusive;
--   <tt>col</tt> ranges from <tt>[0..length of current line]</tt>
--   inclusive. Column values equal to line width indicate a cursor that is
--   just past the end of a line of text.
cursorPosition :: TextZipper a -> (Int, Int)

-- | Return the lengths of the lines in the zipper.
lineLengths :: Monoid a => TextZipper a -> [Int]

-- | Move the cursor to the specified row and column. Invalid cursor
--   positions will be ignored. Valid cursor positions range as described
--   for <a>cursorPosition</a>.
moveCursor :: Monoid a => (Int, Int) -> TextZipper a -> TextZipper a

-- | Insert a character at the current cursor position. Move the cursor one
--   position to the right.
insertChar :: Monoid a => Char -> TextZipper a -> TextZipper a

-- | Insert a line break at the current cursor position.
breakLine :: Monoid a => TextZipper a -> TextZipper a

-- | Remove all text from the cursor position to the end of the current
--   line. If the cursor is at the beginning of a line and the line is
--   empty, the entire line will be removed.
killToEOL :: Monoid a => TextZipper a -> TextZipper a

-- | Move the cursor to the end of the current line.
gotoEOL :: Monoid a => TextZipper a -> TextZipper a

-- | Move the cursor to the beginning of the current line.
gotoBOL :: Monoid a => TextZipper a -> TextZipper a

-- | Delete the character preceding the cursor position, and move the
--   cursor backwards by one character.
deletePrevChar :: (Eq a, Monoid a) => TextZipper a -> TextZipper a

-- | Delete the character at the cursor position. Leaves the cursor
--   position unchanged. If the cursor is at the end of a line of text,
--   this combines the line with the line below.
deleteChar :: Monoid a => TextZipper a -> TextZipper a

-- | Move the cursor right by one position. If the cursor is at the end of
--   a line, the cursor is moved to the first position of the following
--   line (if any).
moveRight :: Monoid a => TextZipper a -> TextZipper a

-- | Move the cursor left by one position. If the cursor is at the
--   beginning of a line, the cursor is moved to the last position of the
--   preceding line (if any).
moveLeft :: Monoid a => TextZipper a -> TextZipper a

-- | Move the cursor up by one row. If there no are rows above the current
--   one, move to the first position of the current row. If the row above
--   is shorter, move to the end of that row.
moveUp :: Monoid a => TextZipper a -> TextZipper a

-- | Move the cursor down by one row. If there are no rows below the
--   current one, move to the last position of the current row. If the row
--   below is shorter, move to the end of that row.
moveDown :: Monoid a => TextZipper a -> TextZipper a
instance Show a => Show (TextZipper a)
instance Eq a => Eq (TextZipper a)
