-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Fine-grained library for constructing and manipulating lattices
--   
@package lattices
@version 1.3


module Algebra.Enumerable

-- | Finitely enumerable things
class Enumerable a
universe :: Enumerable a => [a]
universeBounded :: (Enum a, Bounded a) => [a]

-- | Wrapper used to mark where we expect to use the fact that something is
--   Enumerable
newtype Enumerated a
Enumerated :: a -> Enumerated a
unEnumerated :: Enumerated a -> a
instance [safe] Eq a => Eq (Enumerated a)
instance [safe] Ord a => Ord (Enumerated a)
instance [safe] (Enumerable a, Enumerable b) => Enumerable (a, b)
instance [safe] Enumerable ()
instance [safe] (Enumerable a, Enumerable b) => Enumerable (Either a b)
instance [safe] Enumerable a => Enumerable (Maybe a)
instance [safe] Enumerable Int
instance [safe] Enumerable Bool
instance [safe] Enumerable a => Enumerable (Enumerated a)


module Algebra.PartialOrd

-- | A partial ordering on sets:
--   <a>http://en.wikipedia.org/wiki/Partially_ordered_set</a>
--   
--   This can be defined using either |joinLeq| or |meetLeq|, or a more
--   efficient definition can be derived directly.
--   
--   <pre>
--   Reflexive:     a <a>leq</a> a
--   Antisymmetric: a <a>leq</a> b &amp;&amp; b <a>leq</a> a ==&gt; a == b
--   Transitive:    a <a>leq</a> b &amp;&amp; b <a>leq</a> c ==&gt; a <a>leq</a> c
--   </pre>
--   
--   The superclass equality (which can be defined using |partialOrdEq|)
--   must obey these laws:
--   
--   <pre>
--   Reflexive:  a == a
--   Transitive: a == b &amp;&amp; b == c ==&gt; a == b
--   </pre>
class Eq a => PartialOrd a
leq :: PartialOrd a => a -> a -> Bool

-- | The equality relation induced by the partial-order structure
partialOrdEq :: PartialOrd a => a -> a -> Bool

-- | Least point of a partially ordered monotone function. Checks that the
--   function is monotone.
lfpFrom :: PartialOrd a => a -> (a -> a) -> a

-- | Least point of a partially ordered monotone function. Does not checks
--   that the function is monotone.
unsafeLfpFrom :: Eq a => a -> (a -> a) -> a

-- | Greatest fixed point of a partially ordered antinone function. Checks
--   that the function is antinone.
gfpFrom :: PartialOrd a => a -> (a -> a) -> a

-- | Greatest fixed point of a partially ordered antinone function. Does
--   not check that the function is antinone.
unsafeGfpFrom :: Eq a => a -> (a -> a) -> a
instance [safe] (PartialOrd a, PartialOrd b) => PartialOrd (a, b)
instance [safe] (PartialOrd v, Enumerable k) => PartialOrd (k -> v)
instance [safe] (Eq v, Enumerable k) => Eq (k -> v)
instance [safe] PartialOrd v => PartialOrd (IntMap v)
instance [safe] (Ord k, PartialOrd v) => PartialOrd (Map k v)
instance [safe] PartialOrd IntSet
instance [safe] Ord a => PartialOrd (Set a)


-- | In mathematics, a lattice is a partially ordered set in which every
--   two elements have a unique supremum (also called a least upper bound
--   or <tt>join</tt>) and a unique infimum (also called a greatest lower
--   bound or <tt>meet</tt>).
--   
--   In this module lattices are defined using <a>meet</a> and <a>join</a>
--   operators, as it's constructive one.
module Algebra.Lattice

-- | A algebraic structure with element joins:
--   <a>http://en.wikipedia.org/wiki/Semilattice</a>
--   
--   <pre>
--   Associativity: x <a>join</a> (y <a>join</a> z) == (x <a>join</a> y) <a>join</a> z
--   Commutativity: x <a>join</a> y == y <a>join</a> x
--   Idempotency:   x <a>join</a> x == x
--   </pre>
class JoinSemiLattice a
join :: JoinSemiLattice a => a -> a -> a

-- | A algebraic structure with element meets:
--   <a>http://en.wikipedia.org/wiki/Semilattice</a>
--   
--   <pre>
--   Associativity: x <a>meet</a> (y <a>meet</a> z) == (x <a>meet</a> y) <a>meet</a> z
--   Commutativity: x <a>meet</a> y == y <a>meet</a> x
--   Idempotency:   x <a>meet</a> x == x
--   </pre>
class MeetSemiLattice a
meet :: MeetSemiLattice a => a -> a -> a

-- | The combination of two semi lattices makes a lattice if the absorption
--   law holds: see <a>http://en.wikipedia.org/wiki/Absorption_law</a> and
--   <a>http://en.wikipedia.org/wiki/Lattice_(order)</a>
--   
--   <pre>
--   Absorption: a <a>join</a> (a <a>meet</a> b) == a <a>meet</a> (a <a>join</a> b) == a
--   </pre>
class (JoinSemiLattice a, MeetSemiLattice a) => Lattice a

-- | The partial ordering induced by the join-semilattice structure
joinLeq :: (Eq a, JoinSemiLattice a) => a -> a -> Bool

-- | The join of at a list of join-semilattice elements (of length at least
--   one)
joins1 :: JoinSemiLattice a => [a] -> a

-- | The partial ordering induced by the meet-semilattice structure
meetLeq :: (Eq a, MeetSemiLattice a) => a -> a -> Bool

-- | The meet of at a list of meet-semilattice elements (of length at least
--   one)
meets1 :: MeetSemiLattice a => [a] -> a

-- | A join-semilattice with some element |bottom| that <a>join</a>
--   approaches.
--   
--   <pre>
--   Identity: x <a>join</a> bottom == x
--   </pre>
class JoinSemiLattice a => BoundedJoinSemiLattice a
bottom :: BoundedJoinSemiLattice a => a

-- | A meet-semilattice with some element |top| that <a>meet</a>
--   approaches.
--   
--   <pre>
--   Identity: x <a>meet</a> top == x
--   </pre>
class MeetSemiLattice a => BoundedMeetSemiLattice a
top :: BoundedMeetSemiLattice a => a

-- | Lattices with both bounds
class (Lattice a, BoundedJoinSemiLattice a, BoundedMeetSemiLattice a) => BoundedLattice a

-- | The join of a list of join-semilattice elements
joins :: BoundedJoinSemiLattice a => [a] -> a

-- | The meet of a list of meet-semilattice elements
meets :: BoundedMeetSemiLattice a => [a] -> a

-- | Implementation of Kleene fixed-point theorem
--   <a>http://en.wikipedia.org/wiki/Kleene_fixed-point_theorem</a>. Forces
--   the function to be monotone.
lfp :: (Eq a, BoundedJoinSemiLattice a) => (a -> a) -> a

-- | Implementation of Kleene fixed-point theorem
--   <a>http://en.wikipedia.org/wiki/Kleene_fixed-point_theorem</a>. Forces
--   the function to be monotone.
lfpFrom :: (Eq a, BoundedJoinSemiLattice a) => a -> (a -> a) -> a

-- | Implementation of Kleene fixed-point theorem
--   <a>http://en.wikipedia.org/wiki/Kleene_fixed-point_theorem</a>.
--   Assumes that the function is monotone and does not check if that is
--   correct.
unsafeLfp :: (Eq a, BoundedJoinSemiLattice a) => (a -> a) -> a

-- | Implementation of Kleene fixed-point theorem
--   <a>http://en.wikipedia.org/wiki/Kleene_fixed-point_theorem</a>. Forces
--   the function to be antinone.
gfp :: (Eq a, BoundedMeetSemiLattice a) => (a -> a) -> a

-- | Implementation of Kleene fixed-point theorem
--   <a>http://en.wikipedia.org/wiki/Kleene_fixed-point_theorem</a>. Forces
--   the function to be antinone.
gfpFrom :: (Eq a, BoundedMeetSemiLattice a) => a -> (a -> a) -> a

-- | Implementation of Kleene fixed-point theorem
--   <a>http://en.wikipedia.org/wiki/Kleene_fixed-point_theorem</a>.
--   Assumes that the function is antinone and does not check if that is
--   correct.
unsafeGfp :: (Eq a, BoundedMeetSemiLattice a) => (a -> a) -> a
instance BoundedLattice Bool
instance BoundedMeetSemiLattice Bool
instance BoundedJoinSemiLattice Bool
instance Lattice Bool
instance MeetSemiLattice Bool
instance JoinSemiLattice Bool
instance (BoundedLattice a, BoundedLattice b) => BoundedLattice (a, b)
instance (BoundedMeetSemiLattice a, BoundedMeetSemiLattice b) => BoundedMeetSemiLattice (a, b)
instance (BoundedJoinSemiLattice a, BoundedJoinSemiLattice b) => BoundedJoinSemiLattice (a, b)
instance (Lattice a, Lattice b) => Lattice (a, b)
instance (MeetSemiLattice a, MeetSemiLattice b) => MeetSemiLattice (a, b)
instance (JoinSemiLattice a, JoinSemiLattice b) => JoinSemiLattice (a, b)
instance BoundedLattice v => BoundedLattice (k -> v)
instance BoundedMeetSemiLattice v => BoundedMeetSemiLattice (k -> v)
instance BoundedJoinSemiLattice v => BoundedJoinSemiLattice (k -> v)
instance Lattice v => Lattice (k -> v)
instance MeetSemiLattice v => MeetSemiLattice (k -> v)
instance JoinSemiLattice v => JoinSemiLattice (k -> v)
instance (Eq k, Hashable k) => BoundedJoinSemiLattice (HashMap k v)
instance (Eq k, Hashable k) => MeetSemiLattice (HashMap k v)
instance (Eq k, Hashable k) => JoinSemiLattice (HashMap k v)
instance JoinSemiLattice v => BoundedJoinSemiLattice (IntMap v)
instance JoinSemiLattice v => JoinSemiLattice (IntMap v)
instance (Ord k, Enumerable k, BoundedLattice v) => BoundedLattice (Map (Enumerated k) v)
instance (Ord k, Enumerable k, BoundedMeetSemiLattice v) => BoundedMeetSemiLattice (Map (Enumerated k) v)
instance (Ord k, JoinSemiLattice v) => BoundedJoinSemiLattice (Map k v)
instance (Ord k, Enumerable k, Lattice v) => Lattice (Map (Enumerated k) v)
instance (Ord k, Enumerable k, MeetSemiLattice v) => MeetSemiLattice (Map (Enumerated k) v)
instance (Ord k, JoinSemiLattice v) => JoinSemiLattice (Map k v)
instance (Eq a, Hashable a) => BoundedJoinSemiLattice (HashSet a)
instance (Eq a, Hashable a) => MeetSemiLattice (HashSet a)
instance (Eq a, Hashable a) => JoinSemiLattice (HashSet a)
instance BoundedJoinSemiLattice IntSet
instance JoinSemiLattice IntSet
instance (Ord a, Enumerable a) => BoundedLattice (Set (Enumerated a))
instance (Ord a, Enumerable a) => BoundedMeetSemiLattice (Set (Enumerated a))
instance Ord a => BoundedJoinSemiLattice (Set a)
instance (Ord a, Enumerable a) => Lattice (Set (Enumerated a))
instance (Ord a, Enumerable a) => MeetSemiLattice (Set (Enumerated a))
instance Ord a => JoinSemiLattice (Set a)


module Algebra.Lattice.Dropped

-- | Graft a distinct top onto an otherwise unbounded lattice. As a bonus,
--   the top will be an absorbing element for the join.
data Dropped a
Top :: Dropped a
Drop :: a -> Dropped a
instance Typeable Dropped
instance Eq a => Eq (Dropped a)
instance Ord a => Ord (Dropped a)
instance Show a => Show (Dropped a)
instance Read a => Read (Dropped a)
instance Data a => Data (Dropped a)
instance Generic (Dropped a)
instance Generic1 Dropped
instance Datatype D1Dropped
instance Constructor C1_0Dropped
instance Constructor C1_1Dropped
instance BoundedLattice a => BoundedLattice (Dropped a)
instance MeetSemiLattice a => BoundedMeetSemiLattice (Dropped a)
instance BoundedJoinSemiLattice a => BoundedJoinSemiLattice (Dropped a)
instance Lattice a => Lattice (Dropped a)
instance MeetSemiLattice a => MeetSemiLattice (Dropped a)
instance JoinSemiLattice a => JoinSemiLattice (Dropped a)
instance Hashable a => Hashable (Dropped a)
instance NFData a => NFData (Dropped a)
instance Traversable Dropped
instance Foldable Dropped
instance Functor Dropped


module Algebra.Lattice.Levitated

-- | Graft a distinct top and bottom onto an otherwise unbounded lattice.
--   The top is the absorbing element for the join, and the bottom is the
--   absorbing element for the meet.
data Levitated a
Top :: Levitated a
Levitate :: a -> Levitated a
Bottom :: Levitated a
instance Typeable Levitated
instance Eq a => Eq (Levitated a)
instance Ord a => Ord (Levitated a)
instance Show a => Show (Levitated a)
instance Read a => Read (Levitated a)
instance Data a => Data (Levitated a)
instance Generic (Levitated a)
instance Generic1 Levitated
instance Datatype D1Levitated
instance Constructor C1_0Levitated
instance Constructor C1_1Levitated
instance Constructor C1_2Levitated
instance Lattice a => BoundedLattice (Levitated a)
instance MeetSemiLattice a => BoundedMeetSemiLattice (Levitated a)
instance JoinSemiLattice a => BoundedJoinSemiLattice (Levitated a)
instance Lattice a => Lattice (Levitated a)
instance MeetSemiLattice a => MeetSemiLattice (Levitated a)
instance JoinSemiLattice a => JoinSemiLattice (Levitated a)
instance Hashable a => Hashable (Levitated a)
instance NFData a => NFData (Levitated a)
instance Traversable Levitated
instance Foldable Levitated
instance Functor Levitated


module Algebra.Lattice.Lifted

-- | Graft a distinct bottom onto an otherwise unbounded lattice. As a
--   bonus, the bottom will be an absorbing element for the meet.
data Lifted a
Lift :: a -> Lifted a
Bottom :: Lifted a
instance Typeable Lifted
instance Eq a => Eq (Lifted a)
instance Ord a => Ord (Lifted a)
instance Show a => Show (Lifted a)
instance Read a => Read (Lifted a)
instance Data a => Data (Lifted a)
instance Generic (Lifted a)
instance Generic1 Lifted
instance Datatype D1Lifted
instance Constructor C1_0Lifted
instance Constructor C1_1Lifted
instance BoundedLattice a => BoundedLattice (Lifted a)
instance BoundedMeetSemiLattice a => BoundedMeetSemiLattice (Lifted a)
instance JoinSemiLattice a => BoundedJoinSemiLattice (Lifted a)
instance Lattice a => Lattice (Lifted a)
instance MeetSemiLattice a => MeetSemiLattice (Lifted a)
instance JoinSemiLattice a => JoinSemiLattice (Lifted a)
instance Hashable a => Hashable (Lifted a)
instance NFData a => NFData (Lifted a)
instance Traversable Lifted
instance Foldable Lifted
instance Functor Lifted
