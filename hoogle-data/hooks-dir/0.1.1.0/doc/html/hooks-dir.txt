-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | run executables in a directory as hooks
--   
@package hooks-dir
@version 0.1.1.0

module System.Process.Hooks
data HooksSpec

-- | Default <a>HooksSpec</a> that will not find any hooks. Be sure to add
--   a directory with <a>inDir</a>, <a>noRecurseDir</a> or
--   <a>recurseDir</a>.
defaultHooksSpec :: HooksSpec

-- | Set the directory in which the hooks are to be found. This is the same
--   as <tt>noRecurse</tt>
inDir :: FilePath -> HooksSpec -> HooksSpec
withArg :: Text -> HooksSpec -> HooksSpec
withEnv :: Text -> Text -> HooksSpec -> HooksSpec
withWorkingDir :: FilePath -> HooksSpec -> HooksSpec
withStdOut :: StdStream -> HooksSpec -> HooksSpec
withStdIn :: StdStream -> HooksSpec -> HooksSpec
withStdErr :: StdStream -> HooksSpec -> HooksSpec
recurseDir :: FilePath -> HooksSpec -> HooksSpec
noRecurseDir :: FilePath -> HooksSpec -> HooksSpec
closeFDs :: HooksSpec -> HooksSpec
noCloseFDs :: HooksSpec -> HooksSpec
data ProcessData
ProcessData :: FilePath -> (Maybe Handle, Maybe Handle, Maybe Handle, ProcessHandle) -> ProcessData
pName :: ProcessData -> FilePath
pData :: ProcessData -> (Maybe Handle, Maybe Handle, Maybe Handle, ProcessHandle)
pHandle :: ProcessData -> ProcessHandle

-- | Create all exectuables in the directory specified by the
runHooks :: HooksSpec -> IO (Either String [ProcessData])

-- | Run all hooks in the directory with the given arguments. See
--   <a>defaultHooksSpec</a> for other configuration.
runHooksInDir :: FilePath -> [Text] -> IO (Either String [ProcessData])

-- | Run hooks in directory with given arguments and wait for completion.
--   This is the straightforward combination of <a>runHooksInDir</a> and
--   <a>waitForHooks</a>.
runAndWaitForHooksInDir :: FilePath -> [Text] -> IO (Either String [ExitCode])

-- | Wait for all hooks to finish running.
waitForHooks :: [ProcessData] -> IO [ExitCode]

-- | Read stderr from processdata waiting for the process to exit. It will
--   yield an empty string if no stderr handle is given.
readStdErr :: ProcessData -> IO Text

-- | Read stdout from processdata waiting for the process to exit. It will
--   yield an empty string if no stdout handle is given.
readStdOut :: ProcessData -> IO Text
data StdStream :: *

-- | Inherit Handle from parent
Inherit :: StdStream
instance Show RecurseFlag
instance Read RecurseFlag
instance Eq RecurseFlag
instance Ord RecurseFlag
instance Bounded RecurseFlag
