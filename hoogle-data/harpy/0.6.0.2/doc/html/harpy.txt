-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Runtime code generation for x86 machine code
--   
@package harpy
@version 0.6.0.2


-- | Disassembler for x86 machine code.
--   
--   This is a module for compatibility with earlier Harpy releases. It
--   re-exports the disassembler from the disassembler package.
module Harpy.X86Disassembler

-- | All opcodes are represented by this enumeration type.
data Opcode :: *

-- | All operands are in one of the following locations:
--   
--   <ul>
--   <li>Constants in the instruction stream</li>
--   <li>Memory locations</li>
--   <li>Registers</li>
--   </ul>
--   
--   Memory locations are referred to by on of several addressing modes:
--   
--   <ul>
--   <li>Absolute (address in instruction stream)</li>
--   <li>Register-indirect (address in register)</li>
--   <li>Register-indirect with displacement</li>
--   <li>Base-Index with scale</li>
--   <li>Base-Index with scale and displacement</li>
--   </ul>
--   
--   Displacements can be encoded as 8 or 32-bit immediates in the
--   instruction stream, but are encoded as Int in instructions for
--   simplicity.
data Operand :: *

-- | Immediate value
OpImm :: Word32 -> Operand

-- | Absolute address
OpAddr :: Word32 -> InstrOperandSize -> Operand

-- | Register
OpReg :: String -> Int -> Operand

-- | Floating-point register
OpFPReg :: Int -> Operand

-- | Register-indirect
OpInd :: String -> InstrOperandSize -> Operand

-- | Register-indirect with displacement
OpIndDisp :: String -> Int -> InstrOperandSize -> Operand

-- | Base plus scaled index
OpBaseIndex :: String -> String -> Int -> InstrOperandSize -> Operand

-- | Scaled index with displacement
OpIndexDisp :: String -> Int -> Int -> InstrOperandSize -> Operand

-- | Base plus scaled index with displacement
OpBaseIndexDisp :: String -> String -> Int -> Int -> InstrOperandSize -> Operand

-- | Some opcodes can operate on data of several widths. This information
--   is encoded in instructions using the following enumeration type..
data InstrOperandSize :: *

-- | No operand size specified
OPNONE :: InstrOperandSize

-- | 8-bit integer operand
OP8 :: InstrOperandSize

-- | 16-bit integer operand
OP16 :: InstrOperandSize

-- | 32-bit integer operand
OP32 :: InstrOperandSize

-- | 64-bit integer operand
OP64 :: InstrOperandSize

-- | 128-bit integer operand
OP128 :: InstrOperandSize

-- | 32-bit floating point operand
OPF32 :: InstrOperandSize

-- | 64-bit floating point operand
OPF64 :: InstrOperandSize

-- | 80-bit floating point operand
OPF80 :: InstrOperandSize

-- | The disassembly routines return lists of the following datatype. It
--   encodes both invalid byte sequences (with a useful error message, if
--   possible), or a valid instruction. Both variants contain the list of
--   opcode bytes from which the instruction was decoded and the address of
--   the instruction.
data Instruction :: *

-- | Invalid instruction
BadInstruction :: Word8 -> String -> Int -> [Word8] -> Instruction

-- | Pseudo instruction, e.g. label
PseudoInstruction :: Int -> String -> Instruction

-- | Valid instruction
Instruction :: Opcode -> InstrOperandSize -> [Operand] -> Int -> [Word8] -> Instruction

-- | Opcode of the instruction
opcode :: Instruction -> Opcode

-- | Operand size, if any
opsize :: Instruction -> InstrOperandSize

-- | Instruction operands
operands :: Instruction -> [Operand]

-- | Start address of instruction
address :: Instruction -> Int

-- | Instruction bytes
bytes :: Instruction -> [Word8]

-- | Instructions can be displayed either in Intel or AT&amp;T style (like
--   in GNU tools).
--   
--   Intel style:
--   
--   <ul>
--   <li>Destination operand comes first, source second.</li>
--   <li>No register or immediate prefixes.</li>
--   <li>Memory operands are annotated with operand size.</li>
--   <li>Hexadecimal numbers are suffixed with <tt>H</tt> and prefixed with
--   <tt>0</tt> if necessary.</li>
--   </ul>
--   
--   AT&amp;T style:
--   
--   <ul>
--   <li>Source operand comes first, destination second.</li>
--   <li>Register names are prefixes with <tt>%</tt>.</li>
--   <li>Immediates are prefixed with <tt>$</tt>.</li>
--   <li>Hexadecimal numbers are prefixes with <tt>0x</tt></li>
--   <li>Opcodes are suffixed with operand size, when ambiguous
--   otherwise.</li>
--   </ul>
data ShowStyle :: *

-- | Show in Intel style
IntelStyle :: ShowStyle

-- | Show in AT&amp;T style
AttStyle :: ShowStyle

-- | Disassemble a block of memory. Starting at the location pointed to by
--   the given pointer, the given number of bytes are disassembled.
disassembleBlock :: Ptr Word8 -> Int -> IO (Either ParseError [Instruction])

-- | Disassemble the contents of the given list.
disassembleList :: Monad m => [Word8] -> m (Either ParseError [Instruction])

-- | Disassemble the contents of the given array.
disassembleArray :: (Monad m, IArray a Word8, Ix i) => a i Word8 -> m (Either ParseError [Instruction])

-- | Show an instruction in Intel style.
showIntel :: Instruction -> [Char]

-- | Show an instruction in AT&amp;T style.
showAtt :: Instruction -> [Char]


-- | Monad for generating x86 machine code at runtime.
--   
--   This is a combined reader-state-exception monad which handles all the
--   details of handling code buffers, emitting binary data, relocation
--   etc.
--   
--   All the code generation functions in module <a>Harpy.X86CodeGen</a>
--   live in this monad and use its error reporting facilities as well as
--   the internal state maintained by the monad.
--   
--   The library user can pass a user environment and user state through
--   the monad. This state is independent from the internal state and may
--   be used by higher-level code generation libraries to maintain their
--   own state across code generation operations.
--   --------------------------------------------------------------------------
module Harpy.CodeGenMonad

-- | The code generation monad, a combined reader-state-exception monad.
data CodeGen e s a

-- | An error message produced by a code generation operation.
type ErrMsg = Doc

-- | Kind of relocation, for example PC-relative
data RelocKind

-- | PC-relative relocation
RelocPCRel :: RelocKind

-- | Absolute address
RelocAbsolute :: RelocKind

-- | Relocation entry
data Reloc

-- | Label
data Label

-- | Kind of a fixup entry. When a label is emitted with
--   <a>defineLabel</a>, all prior references to this label must be fixed
--   up. This data type tells how to perform the fixup operation.
data FixupKind

-- | 8-bit relative reference
Fixup8 :: FixupKind

-- | 16-bit relative reference
Fixup16 :: FixupKind

-- | 32-bit relative reference
Fixup32 :: FixupKind

-- | 32-bit absolute reference
Fixup32Absolute :: FixupKind

-- | Configuration of the code generator. There are currently two
--   configuration options. The first is the number fo bytes to use for
--   allocating code buffers (the first as well as additional buffers
--   created in calls to <a>ensureBufferSize</a>. The second allows to pass
--   in a pre-allocated code buffer and its size. When this option is used,
--   Harpy does not perform any code buffer resizing (calls to
--   <a>ensureBufferSize</a> will be equivalent to calls to
--   <a>checkBufferSize</a>).
data CodeGenConfig
CodeGenConfig :: Int -> Maybe (Ptr Word8, Int) -> CodeGenConfig

-- | Size of individual code buffer blocks.
codeBufferSize :: CodeGenConfig -> Int

-- | Code buffer passed in.
customCodeBuffer :: CodeGenConfig -> Maybe (Ptr Word8, Int)

-- | Default code generation configuration. The code buffer size is set to
--   4KB, and code buffer management is automatic. This value is intended
--   to be used with record update syntax, for example:
--   
--   <pre>
--   runCodeGenWithConfig ... defaultCodeGenConfig{codeBufferSize = 128} ...
--   </pre>
defaultCodeGenConfig :: CodeGenConfig

-- | Abort code generation with the given error message.
failCodeGen :: Doc -> CodeGen e s a

-- | Return a pointer to the beginning of the first code buffer, which is
--   normally the entry point to the generated code.
getEntryPoint :: CodeGen e s (Ptr Word8)

-- | Return the current offset in the code buffer, e.g. the offset at which
--   the next instruction will be emitted.
getCodeOffset :: CodeGen e s Int

-- | Return the pointer to the start of the code buffer.
getBasePtr :: CodeGen e s (Ptr Word8)

-- | Return a list of all code buffers and their respective size (i.e.,
--   actually used space for code, not allocated size).
getCodeBufferList :: CodeGen e s [(Ptr Word8, Int)]

-- | Set the user state to the given value.
setState :: s -> CodeGen e s ()

-- | Return the current user state.
getState :: CodeGen e s s

-- | Return the current user environment.
getEnv :: CodeGen e s e

-- | Set the environment to the given value and execute the given code
--   generation in this environment.
withEnv :: e -> CodeGen e s r -> CodeGen e s r

-- | Generate a new label to be used with the label operations
--   <a>emitFixup</a> and <a>defineLabel</a>.
newLabel :: CodeGen e s Label

-- | Generate a new label to be used with the label operations
--   <a>emitFixup</a> and <a>defineLabel</a>. The given name is used for
--   diagnostic purposes, and will appear in the disassembly.
newNamedLabel :: String -> CodeGen e s Label

-- | Generate a new label and define it at once
setLabel :: CodeGen e s Label

-- | Emit a label at the current offset in the code buffer. All references
--   to the label will be relocated to this offset.
defineLabel :: Label -> CodeGen e s ()

-- | This operator gives neat syntax for defining labels. When <tt>l</tt>
--   is a label, the code
--   
--   <pre>
--   l @@ mov eax ebx
--   </pre>
--   
--   associates the label l with the following <tt>mov</tt> instruction.
(@@) :: Label -> CodeGen e s a -> CodeGen e s a

-- | Emit a fixup entry for the given label at the current offset in the
--   code buffer (unless the label is already defined). The instruction at
--   this offset will be patched to target the address associated with this
--   label when it is defined later.
emitFixup :: Label -> Int -> FixupKind -> CodeGen e s ()

-- | Return the address of a label, fail if the label is not yet defined.
labelAddress :: Label -> CodeGen e s (Ptr a)

-- | Emit a relocation entry for the given offset, relocation kind and
--   target address.
emitRelocInfo :: Int -> RelocKind -> FunPtr a -> CodeGen e s ()

-- | Emit a byte value to the code buffer.
emit8 :: Word8 -> CodeGen e s ()

-- | Store a byte value at the given offset into the code buffer.
emit8At :: Int -> Word8 -> CodeGen e s ()

-- | Return the byte value at the given offset in the code buffer.
peek8At :: Int -> CodeGen e s Word8

-- | Like <a>emit8</a>, but for a 32-bit value.
emit32 :: Word32 -> CodeGen e s ()

-- | Like <a>emit8At</a>, but for a 32-bit value.
emit32At :: Int -> Word32 -> CodeGen e s ()

-- | Check whether the code buffer has room for at least the given number
--   of bytes. This should be called by code generators whenever it cannot
--   be guaranteed that the code buffer is large enough to hold all the
--   generated code. Lets the code generation monad fail when the buffer
--   overflows.
--   
--   <i>Note:</i> Starting with version 0.4, Harpy automatically checks for
--   buffer overflow, so you do not need to call this function anymore.
checkBufferSize :: Int -> CodeGen e s ()

-- | Make sure that the code buffer has room for at least the given number
--   of bytes. This should be called by code generators whenever it cannot
--   be guaranteed that the code buffer is large enough to hold all the
--   generated code. Creates a new buffer and places a jump to the new
--   buffer when there is not sufficient space available. When code
--   generation was invoked with a pre-defined code buffer, code generation
--   is aborted on overflow.
--   
--   <i>Note:</i> Starting with version 0.4, Harpy automatically checks for
--   buffer overflow, so you do not need to call this function anymore.
ensureBufferSize :: Int -> CodeGen e s ()

-- | Execute code generation, given a user environment and state. The
--   result is a tuple of the resulting user state and either an error
--   message (when code generation failed) or the result of the code
--   generation. This function runs <a>runCodeGenWithConfig</a> with a
--   sensible default configuration.
runCodeGen :: CodeGen e s a -> e -> s -> IO (s, Either ErrMsg a)

-- | Like <a>runCodeGen</a>, but allows more control over the code
--   generation process. In addition to a code generator and a user
--   environment and state, a code generation configuration must be
--   provided. A code generation configuration allows control over the
--   allocation of code buffers, for example.
runCodeGenWithConfig :: CodeGen e s a -> e -> s -> CodeGenConfig -> IO (s, Either ErrMsg a)
callDecl :: String -> Q Type -> Q [Dec]

-- | Disassemble all code buffers. The result is a list of disassembled
--   instructions which can be converted to strings using the
--   <a>showIntel</a> or <a>showAtt</a> functions from module
--   <a>Harpy.X86Disassembler</a>.
disassemble :: CodeGen e s [Instruction]
instance Show FixupKind
instance Show CodeGenEnv
instance Show RelocKind
instance Show Reloc
instance Eq Label
instance Ord Label
instance MonadIO (CodeGen e s)
instance Monad (CodeGen e s)
instance Applicative (CodeGen e s)
instance Functor (CodeGen e s)


-- | Predefined call stubs for run-time generated code.
module Harpy.Call
conv :: FunPtr (Word32 -> IO ()) -> Word32 -> IO ()
callAsVoid :: Word32 -> CodeGen e t ()


-- | Functions for generating x86 machine code instructions. The functions
--   make use of the code generation monad in module
--   <a>Harpy.CodeGenMonad</a> for emitting binary code into a code buffer.
--   
--   This module is very low-level, since there are different functions for
--   different addressing modes. A more convenient interface is provided in
--   module <a>Harpy.X86Assembler</a>, which uses the operand types to
--   determine the correct addressing modes for all supported instructions.
--   
--   Note: this file does not (yet) provide the complete x86 instruction
--   set, not even all user-mode instructions. For some operations, some
--   addressing modes are missing as well.
--   
--   Copyright notice:
--   
--   The information in this file is based on the header file x86-codegen.h
--   from the mono distribution, which has the following copyright
--   information:
--   
--   <pre>
--   * x86-codegen.h: Macros for generating x86 code
--   *
--   * Authors:
--   *   Paolo Molaro (lupus@ximian.com)
--   *   Intel Corporation (ORP Project)
--   *   Sergey Chaban (serge@wildwestsoftware.com)
--   *   Dietmar Maurer (dietmar@ximian.com)
--   *   Patrik Torstensson
--   * 
--   * Copyright (C)  2000 Intel Corporation.  All rights reserved.
--   * Copyright (C)  2001, 2002 Ximian, Inc.
--   *
--   </pre>
module Harpy.X86CodeGen
data X86_SSE_PFX
x86_dword_size :: Int
x86_qword_size :: Int

-- | Maximal length of an x86 instruction in bytes.
x86_max_instruction_bytes :: Int
x86_eax :: Word8
x86_ecx :: Word8
x86_edx :: Word8
x86_ebx :: Word8
x86_esp :: Word8
x86_ebp :: Word8
x86_esi :: Word8
x86_edi :: Word8

-- | Used to encode the fact that no base register is used in an
--   instruction.
x86_nobasereg :: Word8
x86_eax_mask :: Int
x86_ecx_mask :: Int
x86_edx_mask :: Int
x86_ebx_mask :: Int
x86_esi_mask :: Int
x86_edi_mask :: Int
x86_ebp_mask :: Int

-- | Bitvector mask for callee-saved registers
x86_callee_regs :: Int

-- | Bitvector mask for caller-saved registers
x86_caller_regs :: Int

-- | Bitvector mask for byte-adressable registers
x86_byte_regs :: Int
x86_add :: Word8
x86_or :: Word8
x86_adc :: Word8
x86_sbb :: Word8
x86_and :: Word8
x86_sub :: Word8
x86_xor :: Word8
x86_cmp :: Word8
x86_rol :: Word8
x86_ror :: Word8
x86_rcl :: Word8
x86_rcr :: Word8
x86_shl :: Word8
x86_shr :: Word8
x86_sar :: Word8
x86_shld :: Word8
x86_shlr :: Word8
x86_fadd :: Word8
x86_fmul :: Word8
x86_fcom :: Word8
x86_fcomp :: Word8
x86_fsub :: Word8
x86_fsubr :: Word8
x86_fdiv :: Word8
x86_fdivr :: Word8

-- | FP status
x86_fp_c0 :: Word32

-- | FP status
x86_fp_c1 :: Word32

-- | FP status
x86_fp_c2 :: Word32

-- | FP status
x86_fp_c3 :: Word32

-- | FP status
x86_fp_cc_mask :: Word32

-- | FP control word
x86_fpcw_invopex_mask :: Word32

-- | FP control word
x86_fpcw_denopex_mask :: Word32

-- | FP control word
x86_fpcw_zerodiv_mask :: Word32

-- | FP control word
x86_fpcw_ovfex_mask :: Word32

-- | FP control word
x86_fpcw_undfex_mask :: Word32

-- | FP control word
x86_fpcw_precex_mask :: Word32

-- | FP control word
x86_fpcw_precc_mask :: Word32

-- | FP control word
x86_fpcw_roundc_mask :: Word32

-- | Values for precision control
x86_fpcw_prec_single :: Word32

-- | Values for precision control
x86_fpcw_prec_double :: Word32

-- | Values for precision control
x86_fpcw_prec_extended :: Word32

-- | Values for rounding control
x86_fpcw_round_nearest :: Word32

-- | Values for rounding control
x86_fpcw_round_down :: Word32

-- | Values for rounding control
x86_fpcw_round_up :: Word32

-- | Values for rounding control
x86_fpcw_round_tozero :: Word32
x86_cc_eq :: Int
x86_cc_e :: Int
x86_cc_z :: Int
x86_cc_ne :: Int
x86_cc_nz :: Int
x86_cc_lt :: Int
x86_cc_b :: Int
x86_cc_c :: Int
x86_cc_nae :: Int
x86_cc_le :: Int
x86_cc_be :: Int
x86_cc_na :: Int
x86_cc_gt :: Int
x86_cc_a :: Int
x86_cc_nbe :: Int
x86_cc_ge :: Int
x86_cc_ae :: Int
x86_cc_nb :: Int
x86_cc_nc :: Int
x86_cc_lz :: Int
x86_cc_s :: Int
x86_cc_gez :: Int
x86_cc_ns :: Int
x86_cc_p :: Int
x86_cc_np :: Int
x86_cc_pe :: Int
x86_cc_po :: Int
x86_cc_o :: Int
x86_cc_no :: Int

-- | Prefix codes
x86_lock_prefix :: Word8

-- | Prefix codes
x86_repnz_prefix :: Word8

-- | Prefix codes
x86_repz_prefix :: Word8

-- | Prefix codes
x86_rep_prefix :: Word8

-- | Prefix codes
x86_cs_prefix :: Word8

-- | Prefix codes
x86_ss_prefix :: Word8

-- | Prefix codes
x86_ds_prefix :: Word8

-- | Prefix codes
x86_es_prefix :: Word8

-- | Prefix codes
x86_fs_prefix :: Word8

-- | Prefix codes
x86_gs_prefix :: Word8

-- | Prefix codes
x86_unlikely_prefix :: Word8

-- | Prefix codes
x86_likely_prefix :: Word8

-- | Prefix codes
x86_operand_prefix :: Word8

-- | Prefix codes
x86_address_prefix :: Word8

-- | Returns true when the given register is caller-saved.
x86_is_scratch :: Int -> Bool

-- | Returns true when the given register is caller-saved.
x86_is_callee :: Int -> Bool

-- | Emit a 16-bit constant to the instruction stream.
x86_imm_emit16 :: Word16 -> CodeGen e s ()

-- | Emit a 8-bit constant to the instruction stream.
x86_imm_emit8 :: Word8 -> CodeGen e s ()

-- | Emit a 32-bit constant to the instruction stream.
x86_imm_emit32 :: Word32 -> CodeGen e s ()

-- | Emit a mem+base address encoding
x86_membase_emit :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_alu_reg_imm :: Word8 -> Word8 -> Int -> CodeGen e s ()
x86_call_hs :: FunPtr a -> CodeGen e s ()
x86_call_membase :: Word8 -> Word32 -> CodeGen s e ()
x86_call_mem :: Word32 -> CodeGen s e ()
x86_call_reg :: Word8 -> CodeGen s e ()
x86_call_code :: Int -> CodeGen s e ()
x86_call_imm :: Word32 -> CodeGen s e ()
x86_prolog :: Int -> Int -> CodeGen e s ()
x86_epilog :: Int -> CodeGen e s ()
x86_enter :: Word16 -> CodeGen s e ()
x86_leave :: CodeGen s e ()
x86_ret :: CodeGen s e ()
x86_ret_imm :: Word16 -> CodeGen s e ()
x86_jecxz :: Word8 -> CodeGen e s ()
x86_branch :: Int -> Int -> Bool -> CodeGen e s ()
x86_branch_pointer :: Int -> Ptr a -> Bool -> CodeGen e s ()
x86_branch32 :: Int -> Word32 -> Bool -> CodeGen e s ()
x86_branch8 :: Int -> Word8 -> Bool -> CodeGen e s ()
x86_jump_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_jump_pointer :: Ptr a -> CodeGen e s ()
x86_jump_mem :: Word32 -> CodeGen e s ()
x86_jump_reg :: Word8 -> CodeGen e s ()
x86_jump32 :: Word32 -> CodeGen e s ()
x86_jump8 :: Word8 -> CodeGen e s ()
x86_loopne :: Word8 -> CodeGen e s ()
x86_loope :: Word8 -> CodeGen e s ()
x86_loop :: Word8 -> CodeGen e s ()
x86_push_reg :: Word8 -> CodeGen e s ()
x86_push_regp :: Word8 -> CodeGen e s ()
x86_push_mem :: Word32 -> CodeGen e s ()
x86_push_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_push_imm :: Word32 -> CodeGen e s ()
x86_push_imm_template :: CodeGen e s ()
x86_push_memindex :: Word8 -> Word32 -> Word8 -> Word8 -> CodeGen e s ()
x86_pop_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_pop_mem :: Word32 -> CodeGen e s ()
x86_pop_reg :: Word8 -> CodeGen e s ()
x86_popfd :: CodeGen e s ()
x86_pushfd :: CodeGen e s ()
x86_popad :: CodeGen e s ()
x86_pushad :: CodeGen e s ()
x86_mov_reg_reg :: (Eq t, Num t) => Word8 -> Word8 -> t -> CodeGen e s ()
x86_mov_reg_imm :: Word8 -> Word32 -> CodeGen e s ()
x86_mov_mem_imm :: (Eq a, Num a) => Word32 -> Word32 -> a -> CodeGen e s ()
x86_mov_membase_imm :: (Eq a, Num a) => Word8 -> Word32 -> Word32 -> a -> CodeGen e s ()
x86_mov_memindex_imm :: (Eq a, Num a) => Word8 -> Word32 -> Word8 -> Word8 -> Word32 -> a -> CodeGen e s ()
x86_mov_mem_reg :: (Eq t, Num t) => Word32 -> Word8 -> t -> CodeGen e s ()
x86_mov_reg_mem :: (Eq t, Num t) => Word8 -> Word32 -> t -> CodeGen e s ()
x86_mov_regp_reg :: (Eq t, Num t) => Word8 -> Word8 -> t -> CodeGen e s ()
x86_mov_reg_regp :: (Eq t, Num t) => Word8 -> Word8 -> t -> CodeGen e s ()
x86_mov_membase_reg :: (Eq t, Num t) => Word8 -> Word32 -> Word8 -> t -> CodeGen e s ()
x86_mov_reg_membase :: (Eq t, Num t) => Word8 -> Word8 -> Word32 -> t -> CodeGen e s ()
x86_mov_memindex_reg :: (Eq t, Num t) => Word8 -> Word32 -> Word8 -> Word8 -> Word8 -> t -> CodeGen e s ()
x86_mov_reg_memindex :: (Eq t, Num t) => Word8 -> Word8 -> Word32 -> Word8 -> Word8 -> t -> CodeGen e s ()
x86_xadd_reg_reg :: (Eq a, Num a) => Word8 -> Word8 -> a -> CodeGen e s ()
x86_xadd_mem_reg :: (Eq a, Num a) => Word32 -> Word8 -> a -> CodeGen e s ()
x86_xadd_membase_reg :: (Eq a, Num a) => Word8 -> Word32 -> Word8 -> a -> CodeGen e s ()
x86_inc_mem :: Word32 -> CodeGen e s ()
x86_inc_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_inc_reg :: Word8 -> CodeGen e s ()
x86_dec_mem :: Word32 -> CodeGen e s ()
x86_dec_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_dec_reg :: Word8 -> CodeGen e s ()
x86_not_mem :: Word32 -> CodeGen e s ()
x86_not_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_not_reg :: Word8 -> CodeGen e s ()
x86_neg_mem :: Word32 -> CodeGen e s ()
x86_neg_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_neg_reg :: Word8 -> CodeGen e s ()
x86_alu_mem_imm :: Word8 -> Word32 -> Word32 -> CodeGen e s ()
x86_alu_membase_imm :: Word8 -> Word8 -> Word32 -> Word32 -> CodeGen e s ()
x86_alu_membase8_imm :: Word8 -> Word8 -> Word32 -> Word8 -> CodeGen e s ()
x86_alu_mem_reg :: Word8 -> Word32 -> Word8 -> CodeGen e s ()
x86_alu_membase_reg :: Word8 -> Word8 -> Word32 -> Word8 -> CodeGen e s ()
x86_alu_reg_reg :: Word8 -> Word8 -> Word8 -> CodeGen e s ()
x86_alu_reg8_reg8 :: Word8 -> Word8 -> Word8 -> Bool -> Bool -> CodeGen e s ()
x86_alu_reg_mem :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_alu_reg_membase :: Word8 -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_mul_reg :: Word8 -> Bool -> CodeGen e s ()
x86_mul_mem :: Word32 -> Bool -> CodeGen e s ()
x86_mul_membase :: Word8 -> Word32 -> Bool -> CodeGen e s ()
x86_imul_reg_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_imul_reg_membase :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_imul_reg_reg_imm :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_imul_reg_mem :: Word8 -> Word32 -> CodeGen e s ()
x86_imul_reg_mem_imm :: Word8 -> Word32 -> Word32 -> CodeGen e s ()
x86_imul_reg_membase_imm :: Word8 -> Word8 -> Word32 -> Word32 -> CodeGen e s ()
x86_div_reg :: Word8 -> Bool -> CodeGen e s ()
x86_div_mem :: Word32 -> Bool -> CodeGen e s ()
x86_div_membase :: Word8 -> Word32 -> Bool -> CodeGen e s ()
x86_test_reg_imm :: Word8 -> Word32 -> CodeGen e s ()
x86_test_mem_imm :: Word32 -> Word32 -> CodeGen e s ()
x86_test_membase_imm :: Word8 -> Word32 -> Word32 -> CodeGen e s ()
x86_test_reg_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_test_mem_reg :: Word32 -> Word8 -> CodeGen e s ()
x86_test_membase_reg :: Word8 -> Word32 -> Word8 -> CodeGen e s ()
x86_cmpxchg_reg_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_cmpxchg_mem_reg :: Word32 -> Word8 -> CodeGen e s ()
x86_cmpxchg_membase_reg :: Word8 -> Word32 -> Word8 -> CodeGen e s ()
x86_xchg_reg_reg :: (Eq a, Num a) => Word8 -> Word8 -> a -> CodeGen e s ()
x86_xchg_mem_reg :: (Eq a, Num a) => Word32 -> Word8 -> a -> CodeGen e s ()
x86_xchg_membase_reg :: (Eq a, Num a) => Word8 -> Word32 -> Word8 -> a -> CodeGen e s ()
x86_stosb :: CodeGen s e ()
x86_stosl :: CodeGen s e ()
x86_stosd :: CodeGen s e ()
x86_movsb :: CodeGen s e ()
x86_movsl :: CodeGen s e ()
x86_movsd :: CodeGen s e ()
x86_shift_reg_imm :: Word8 -> Word8 -> Word8 -> CodeGen e s ()
x86_shift_mem_imm :: Word8 -> Word32 -> Word8 -> CodeGen e s ()
x86_shift_membase_imm :: Word8 -> Word8 -> Word32 -> Word8 -> CodeGen e s ()
x86_shift_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_shift_mem :: Word8 -> Word32 -> CodeGen e s ()
x86_shift_membase :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_shrd_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_shrd_reg_imm :: Word8 -> Word8 -> Word8 -> CodeGen e s ()
x86_shld_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_shld_reg_imm :: Word8 -> Word8 -> Word8 -> CodeGen e s ()
x86_cmov_membase :: Int -> Bool -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_cmov_mem :: Int -> Bool -> Word8 -> Word32 -> CodeGen e s ()
x86_cmov_reg :: Int -> Bool -> Word8 -> Word8 -> CodeGen e s ()
x86_set_membase :: Int -> Word8 -> Word32 -> Bool -> CodeGen e s ()
x86_set_mem :: Int -> Word32 -> Bool -> CodeGen e s ()
x86_set_reg :: Int -> Word8 -> Bool -> CodeGen e s ()
x86_lea_mem :: Word8 -> Word32 -> CodeGen e s ()
x86_lea_membase :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_lea_memindex :: Word8 -> Word8 -> Word32 -> Word8 -> Word8 -> CodeGen e s ()
x86_cdq :: CodeGen s e ()
x86_widen_memindex :: Word8 -> Word8 -> Word32 -> Word8 -> Word8 -> Bool -> Bool -> CodeGen e s ()
x86_widen_membase :: Word8 -> Word8 -> Word32 -> Bool -> Bool -> CodeGen e s ()
x86_widen_mem :: Word8 -> Word32 -> Bool -> Bool -> CodeGen e s ()
x86_widen_reg :: Word8 -> Word8 -> Bool -> Bool -> CodeGen e s ()
x86_fp_op_mem :: Word8 -> Word32 -> Bool -> CodeGen e s ()
x86_fp_op_membase :: Word8 -> Word8 -> Word32 -> Bool -> CodeGen e s ()
x86_fp_op :: Word8 -> Word8 -> CodeGen e s ()
x86_fp_op_reg :: Word8 -> Word8 -> Bool -> CodeGen e s ()
x86_fp_int_op_membase :: Word8 -> Word8 -> Word32 -> Bool -> CodeGen e s ()
x86_fstp :: Word8 -> CodeGen e s ()
x86_fcompp :: CodeGen e s ()
x86_fucompp :: CodeGen e s ()
x86_fnstsw :: CodeGen e s ()
x86_fnstcw :: Word32 -> CodeGen e s ()
x86_fnstcw_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_fldcw :: Word32 -> CodeGen e s ()
x86_fldcw_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_fchs :: CodeGen e s ()
x86_frem :: CodeGen e s ()
x86_fxch :: Word8 -> CodeGen e s ()
x86_fcomi :: Word8 -> CodeGen e s ()
x86_fcomip :: Word8 -> CodeGen e s ()
x86_fucomi :: Word8 -> CodeGen e s ()
x86_fucomip :: Word8 -> CodeGen e s ()
x86_fld :: Word32 -> Bool -> CodeGen e s ()
x86_fld_membase :: Word8 -> Word32 -> Bool -> CodeGen e s ()
x86_fld80_mem :: Word32 -> CodeGen e s ()
x86_fld80_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_fld_reg :: Word8 -> CodeGen e s ()
x86_fldz :: CodeGen e s ()
x86_fld1 :: CodeGen e s ()
x86_fldpi :: CodeGen e s ()
x86_fst :: Word32 -> Bool -> Bool -> CodeGen e s ()
x86_fst_membase :: Word8 -> Word32 -> Bool -> Bool -> CodeGen e s ()
x86_fst80_mem :: Word32 -> CodeGen e s ()
x86_fst80_membase :: Word8 -> Word32 -> CodeGen e s ()
data FIntSize
FInt16 :: FIntSize
FInt32 :: FIntSize
FInt64 :: FIntSize
x86_fist_pop :: Word32 -> FIntSize -> CodeGen e s ()
x86_fist_pop_membase :: Word8 -> Word32 -> FIntSize -> CodeGen e s ()
x86_fstsw :: CodeGen e s ()
x86_fist_membase :: Word8 -> Word32 -> FIntSize -> CodeGen e s ()
x86_fild :: Word32 -> FIntSize -> CodeGen e s ()
x86_fild_membase :: Word8 -> Word32 -> FIntSize -> CodeGen e s ()
x86_fsin :: CodeGen s e ()
x86_fcos :: CodeGen s e ()
x86_fabs :: CodeGen s e ()
x86_ftst :: CodeGen s e ()
x86_fxam :: CodeGen s e ()
x86_fpatan :: CodeGen s e ()
x86_fprem :: CodeGen s e ()
x86_fprem1 :: CodeGen s e ()
x86_frndint :: CodeGen s e ()
x86_fsqrt :: CodeGen s e ()
x86_fptan :: CodeGen s e ()
x86_fincstp :: CodeGen e s ()
x86_fdecstp :: CodeGen e s ()
x86_sse_ps :: X86_SSE_PFX
x86_sse_pd :: X86_SSE_PFX
x86_sse_ss :: X86_SSE_PFX
x86_sse_sd :: X86_SSE_PFX
x86_add_sse_reg_reg :: X86_SSE_PFX -> Word8 -> Word8 -> CodeGen e s ()
x86_add_sse_reg_mem :: X86_SSE_PFX -> Word8 -> Word32 -> CodeGen e s ()
x86_add_sse_reg_membase :: X86_SSE_PFX -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_sub_sse_reg_reg :: X86_SSE_PFX -> Word8 -> Word8 -> CodeGen e s ()
x86_sub_sse_reg_mem :: X86_SSE_PFX -> Word8 -> Word32 -> CodeGen e s ()
x86_sub_sse_reg_membase :: X86_SSE_PFX -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_mul_sse_reg_reg :: X86_SSE_PFX -> Word8 -> Word8 -> CodeGen e s ()
x86_mul_sse_reg_mem :: X86_SSE_PFX -> Word8 -> Word32 -> CodeGen e s ()
x86_mul_sse_reg_membase :: X86_SSE_PFX -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_div_sse_reg_reg :: X86_SSE_PFX -> Word8 -> Word8 -> CodeGen e s ()
x86_div_sse_reg_mem :: X86_SSE_PFX -> Word8 -> Word32 -> CodeGen e s ()
x86_div_sse_reg_membase :: X86_SSE_PFX -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_max_sse_reg_reg :: X86_SSE_PFX -> Word8 -> Word8 -> CodeGen e s ()
x86_max_sse_reg_mem :: X86_SSE_PFX -> Word8 -> Word32 -> CodeGen e s ()
x86_max_sse_reg_membase :: X86_SSE_PFX -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_min_sse_reg_reg :: X86_SSE_PFX -> Word8 -> Word8 -> CodeGen e s ()
x86_min_sse_reg_mem :: X86_SSE_PFX -> Word8 -> Word32 -> CodeGen e s ()
x86_min_sse_reg_membase :: X86_SSE_PFX -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_sqrt_sse_reg_reg :: X86_SSE_PFX -> Word8 -> Word8 -> CodeGen e s ()
x86_sqrt_sse_reg_mem :: X86_SSE_PFX -> Word8 -> Word32 -> CodeGen e s ()
x86_sqrt_sse_reg_membase :: X86_SSE_PFX -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_mov_sse_reg_reg :: X86_SSE_PFX -> Word8 -> Word8 -> CodeGen e s ()
x86_mov_sse_reg_mem :: X86_SSE_PFX -> Word8 -> Word32 -> CodeGen e s ()
x86_mov_sse_reg_membase :: X86_SSE_PFX -> Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_mov_sse_mem_reg :: X86_SSE_PFX -> Word32 -> Word8 -> CodeGen e s ()
x86_mov_sse_membase_reg :: X86_SSE_PFX -> Word8 -> Word32 -> Word8 -> CodeGen e s ()
x86_ucomisd_reg_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_ucomisd_reg_mem :: Word8 -> Word32 -> CodeGen e s ()
x86_ucomisd_reg_membase :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_ucomiss_reg_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_ucomiss_reg_mem :: Word8 -> Word32 -> CodeGen e s ()
x86_ucomiss_reg_membase :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_comisd_reg_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_comisd_reg_mem :: Word8 -> Word32 -> CodeGen e s ()
x86_comisd_reg_membase :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
x86_comiss_reg_reg :: Word8 -> Word8 -> CodeGen e s ()
x86_comiss_reg_mem :: Word8 -> Word32 -> CodeGen e s ()
x86_comiss_reg_membase :: Word8 -> Word8 -> Word32 -> CodeGen e s ()
newtype XMMReg
XMMReg :: Word8 -> XMMReg
newtype Mem
Mem :: Word32 -> Mem
data MemBase
MemBase :: Word8 -> Word32 -> MemBase
class XMMLocation xmm
xmm_location_emit :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_movss_to_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_movss_from_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_movsd_to_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_movsd_from_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()

-- | xmm must not be a register
x86_movlps_to_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()

-- | xmm must not be a register
x86_movlps_from_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()

-- | xmm must not be a register
x86_movlpd_to_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()

-- | xmm must not be a register
x86_movlpd_from_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_movups_to_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_movups_from_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_movupd_to_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_movupd_from_reg :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_haddps :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_haddpd :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_shufps :: XMMLocation xmm => Word8 -> xmm -> Word8 -> CodeGen e s ()
x86_shufpd :: XMMLocation xmm => Word8 -> xmm -> Word8 -> CodeGen e s ()
x86_cvtdq2ps :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_cvttps2dq :: XMMLocation xmm => Word8 -> xmm -> CodeGen e s ()
x86_prefetch0_mem :: Word32 -> CodeGen e s ()
x86_prefetch1_mem :: Word32 -> CodeGen e s ()
x86_prefetch2_mem :: Word32 -> CodeGen e s ()
x86_prefetchnta_mem :: Word32 -> CodeGen e s ()
x86_prefetch0_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_prefetch1_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_prefetch2_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_prefetchnta_membase :: Word8 -> Word32 -> CodeGen e s ()
x86_prefetch0_regp :: Word8 -> CodeGen e s ()
x86_prefetch1_regp :: Word8 -> CodeGen e s ()
x86_prefetch2_regp :: Word8 -> CodeGen e s ()
x86_prefetchnta_regp :: Word8 -> CodeGen e s ()
x86_sahf :: CodeGen s e ()
x86_wait :: CodeGen s e ()
x86_nop :: CodeGen s e ()
x86_breakpoint :: CodeGen s e ()
x86_rdtsc :: CodeGen s e ()
x86_cld :: CodeGen s e ()
x86_prefix :: Word8 -> CodeGen s e ()
x86_padding :: (Eq t, Num t) => t -> CodeGen e s ()

-- | Invert a condition code.
negateCC :: Int -> Int
instance Eq XMMReg
instance Ord XMMReg
instance XMMLocation MemBase
instance XMMLocation Mem
instance XMMLocation XMMReg


-- | A type class based layer on top of X86CodeGen which determines the
--   addressing modes from the types of the operands.
module Harpy.X86Assembler
onlyEbp :: CodeGen e s a
onlyCl :: CodeGen e s a
newtype Reg8
Reg8 :: Word8 -> Reg8
al :: Reg8
bh :: Reg8
dh :: Reg8
ch :: Reg8
ah :: Reg8
bl :: Reg8
dl :: Reg8
cl :: Reg8
newtype Reg16
Reg16 :: Word8 -> Reg16
ax :: Reg16
di :: Reg16
si :: Reg16
bp :: Reg16
sp :: Reg16
bx :: Reg16
dx :: Reg16
cx :: Reg16
newtype Reg32
Reg32 :: Word8 -> Reg32
eax :: Reg32
edi :: Reg32
esi :: Reg32
ebp :: Reg32
esp :: Reg32
ebx :: Reg32
edx :: Reg32
ecx :: Reg32
xmm0 :: XMMReg
xmm7 :: XMMReg
xmm6 :: XMMReg
xmm5 :: XMMReg
xmm4 :: XMMReg
xmm3 :: XMMReg
xmm2 :: XMMReg
xmm1 :: XMMReg
newtype Addr
Addr :: Word32 -> Addr
newtype Ind
Ind :: Reg32 -> Ind
newtype Disp
Disp :: Word32 -> Disp
data Scale
S1 :: Scale
S2 :: Scale
S4 :: Scale
S8 :: Scale
scaleToShift :: Scale -> Word8
newtype FPReg
FPReg :: Word8 -> FPReg
data FPTopReg
FPTopReg :: FPTopReg
fpTop :: FPTopReg
fp0 :: FPReg
fp1 :: FPReg
fp2 :: FPReg
fp3 :: FPReg
fp4 :: FPReg
fp5 :: FPReg
fp6 :: FPReg
fp7 :: FPReg
breakpoint :: CodeGen e s ()
cld :: CodeGen e s ()
stosb :: CodeGen e s ()
stosl :: CodeGen e s ()
stosd :: CodeGen e s ()
movsb :: CodeGen e s ()
movsl :: CodeGen e s ()
rdtsc :: CodeGen e s ()
class Cmpxchg a b
cmpxchg :: Cmpxchg a b => a -> b -> CodeGen e s ()
class Xchg a b
xchg :: Xchg a b => a -> b -> CodeGen e s ()
class Xadd a b
xadd :: Xadd a b => a -> b -> CodeGen e s ()
class Inc a
inc :: Inc a => a -> CodeGen e s ()
class Dec a
dec :: Dec a => a -> CodeGen e s ()
class Not a
not :: Not a => a -> CodeGen e s ()
class Neg a
neg :: Neg a => a -> CodeGen e s ()
nop :: CodeGen e s ()
class Add a b
add :: Add a b => a -> b -> CodeGen e s ()
class Or a b
or :: Or a b => a -> b -> CodeGen e s ()
class Adc a b
adc :: Adc a b => a -> b -> CodeGen e s ()
class Sbb a b
sbb :: Sbb a b => a -> b -> CodeGen e s ()
class And a b
and :: And a b => a -> b -> CodeGen e s ()
class Sub a b
sub :: Sub a b => a -> b -> CodeGen e s ()
class Xor a b
xor :: Xor a b => a -> b -> CodeGen e s ()
class Cmp a b
cmp :: Cmp a b => a -> b -> CodeGen e s ()
class Test a b
test :: Test a b => a -> b -> CodeGen e s ()
class Rol a b
rol :: Rol a b => a -> b -> CodeGen e s ()
class Ror a b
ror :: Ror a b => a -> b -> CodeGen e s ()
class Rcl a b
rcl :: Rcl a b => a -> b -> CodeGen e s ()
class Rcr a b
rcr :: Rcr a b => a -> b -> CodeGen e s ()
class Shl a b
shl :: Shl a b => a -> b -> CodeGen e s ()
class Shr a b
shr :: Shr a b => a -> b -> CodeGen e s ()
class Sar a b
sar :: Sar a b => a -> b -> CodeGen e s ()
class Sal a b
sal :: Sal a b => a -> b -> CodeGen e s ()
class Shrd a b c
shrd :: Shrd a b c => a -> b -> c -> CodeGen e s ()
class Shld a b c
shld :: Shld a b c => a -> b -> c -> CodeGen e s ()
class Mul a
mul :: Mul a => a -> CodeGen e s ()
data InPlace
InPlace :: InPlace
class Imul a b c
imul :: Imul a b c => a -> b -> c -> CodeGen e s ()
class Div a
div :: Div a => a -> CodeGen e s ()
class Idiv a
idiv :: Idiv a => a -> CodeGen e s ()
class Mov a b
mov :: Mov a b => a -> b -> CodeGen e s ()
class Movsxb a b
movsxb :: Movsxb a b => a -> b -> CodeGen e s ()
class Movsxw a b
movsxw :: Movsxw a b => a -> b -> CodeGen e s ()
class Movzxb a b
movzxb :: Movzxb a b => a -> b -> CodeGen e s ()
class Movzxw a b
movzxw :: Movzxw a b => a -> b -> CodeGen e s ()
class Lea a b
lea :: Lea a b => a -> b -> CodeGen e s ()
cdq :: CodeGen e s ()
wait :: CodeGen e s ()
class Push a
push :: Push a => a -> CodeGen e s ()
class Pop a
pop :: Pop a => a -> CodeGen e s ()
pushad :: CodeGen e s ()
popad :: CodeGen e s ()
pushfd :: CodeGen e s ()
popfd :: CodeGen e s ()
class Loop a
loop :: Loop a => a -> CodeGen e s ()
loope :: Loop a => a -> CodeGen e s ()
loopne :: Loop a => a -> CodeGen e s ()
class Jmp a
jmp :: Jmp a => a -> CodeGen e s ()
class Ja a
ja :: Ja a => a -> CodeGen e s ()
class Jae a
jae :: Jae a => a -> CodeGen e s ()
class Jb a
jb :: Jb a => a -> CodeGen e s ()
class Jbe a
jbe :: Jbe a => a -> CodeGen e s ()
class Jc a
jc :: Jc a => a -> CodeGen e s ()
class Je a
je :: Je a => a -> CodeGen e s ()
class Jna a
jna :: Jna a => a -> CodeGen e s ()
class Jnae a
jnae :: Jnae a => a -> CodeGen e s ()
class Jnb a
jnb :: Jnb a => a -> CodeGen e s ()
class Jnbe a
jnbe :: Jnbe a => a -> CodeGen e s ()
class Jnc a
jnc :: Jnc a => a -> CodeGen e s ()
class Jne a
jne :: Jne a => a -> CodeGen e s ()
class Jnp a
jnp :: Jnp a => a -> CodeGen e s ()
class Jnz a
jnz :: Jnz a => a -> CodeGen e s ()
class Jp a
jp :: Jp a => a -> CodeGen e s ()
class Jpe a
jpe :: Jpe a => a -> CodeGen e s ()
class Jpo a
jpo :: Jpo a => a -> CodeGen e s ()
class Jz a
jz :: Jz a => a -> CodeGen e s ()
class Jg a
jg :: Jg a => a -> CodeGen e s ()
class Jge a
jge :: Jge a => a -> CodeGen e s ()
class Jl a
jl :: Jl a => a -> CodeGen e s ()
class Jle a
jle :: Jle a => a -> CodeGen e s ()
class Jng a
jng :: Jng a => a -> CodeGen e s ()
class Jnge a
jnge :: Jnge a => a -> CodeGen e s ()
class Jnl a
jnl :: Jnl a => a -> CodeGen e s ()
class Jnle a
jnle :: Jnle a => a -> CodeGen e s ()
class Jno a
jno :: Jno a => a -> CodeGen e s ()
class Jns a
jns :: Jns a => a -> CodeGen e s ()
class Jo a
jo :: Jo a => a -> CodeGen e s ()
class Js a
js :: Js a => a -> CodeGen e s ()
jecxz :: Word8 -> CodeGen e s ()
class Seta a
seta :: Seta a => a -> CodeGen e s ()
class Setae a
setae :: Setae a => a -> CodeGen e s ()
class Setb a
setb :: Setb a => a -> CodeGen e s ()
class Setbe a
setbe :: Setbe a => a -> CodeGen e s ()
class Setc a
setc :: Setc a => a -> CodeGen e s ()
class Sete a
sete :: Sete a => a -> CodeGen e s ()
class Setna a
setna :: Setna a => a -> CodeGen e s ()
class Setnae a
setnae :: Setnae a => a -> CodeGen e s ()
class Setnb a
setnb :: Setnb a => a -> CodeGen e s ()
class Setnbe a
setnbe :: Setnbe a => a -> CodeGen e s ()
class Setnc a
setnc :: Setnc a => a -> CodeGen e s ()
class Setne a
setne :: Setne a => a -> CodeGen e s ()
class Setnp a
setnp :: Setnp a => a -> CodeGen e s ()
class Setnz a
setnz :: Setnz a => a -> CodeGen e s ()
class Setp a
setp :: Setp a => a -> CodeGen e s ()
class Setpe a
setpe :: Setpe a => a -> CodeGen e s ()
class Setpo a
setpo :: Setpo a => a -> CodeGen e s ()
class Setg a
setg :: Setg a => a -> CodeGen e s ()
class Setge a
setge :: Setge a => a -> CodeGen e s ()
class Setl a
setl :: Setl a => a -> CodeGen e s ()
class Setle a
setle :: Setle a => a -> CodeGen e s ()
class Setng a
setng :: Setng a => a -> CodeGen e s ()
class Setnge a
setnge :: Setnge a => a -> CodeGen e s ()
class Setnl a
setnl :: Setnl a => a -> CodeGen e s ()
class Setnle a
setnle :: Setnle a => a -> CodeGen e s ()
class Setno a
setno :: Setno a => a -> CodeGen e s ()
class Setns a
setns :: Setns a => a -> CodeGen e s ()
class Seto a
seto :: Seto a => a -> CodeGen e s ()
class Sets a
sets :: Sets a => a -> CodeGen e s ()
class Setz a
setz :: Setz a => a -> CodeGen e s ()
class Call a
call :: Call a => a -> CodeGen e s ()
ret :: CodeGen e s ()
retN :: Word16 -> CodeGen e s ()
enter :: Word16 -> CodeGen e s ()
class Cmova a b
cmova :: Cmova a b => a -> b -> CodeGen e s ()
class Cmovae a b
cmovae :: Cmovae a b => a -> b -> CodeGen e s ()
class Cmovb a b
cmovb :: Cmovb a b => a -> b -> CodeGen e s ()
class Cmovbe a b
cmovbe :: Cmovbe a b => a -> b -> CodeGen e s ()
class Cmovc a b
cmovc :: Cmovc a b => a -> b -> CodeGen e s ()
class Cmove a b
cmove :: Cmove a b => a -> b -> CodeGen e s ()
class Cmovna a b
cmovna :: Cmovna a b => a -> b -> CodeGen e s ()
class Cmovnae a b
cmovnae :: Cmovnae a b => a -> b -> CodeGen e s ()
class Cmovnb a b
cmovnb :: Cmovnb a b => a -> b -> CodeGen e s ()
class Cmovnbe a b
cmovnbe :: Cmovnbe a b => a -> b -> CodeGen e s ()
class Cmovnc a b
cmovnc :: Cmovnc a b => a -> b -> CodeGen e s ()
class Cmovne a b
cmovne :: Cmovne a b => a -> b -> CodeGen e s ()
class Cmovnp a b
cmovnp :: Cmovnp a b => a -> b -> CodeGen e s ()
class Cmovnz a b
cmovnz :: Cmovnz a b => a -> b -> CodeGen e s ()
class Cmovp a b
cmovp :: Cmovp a b => a -> b -> CodeGen e s ()
class Cmovpe a b
cmovpe :: Cmovpe a b => a -> b -> CodeGen e s ()
class Cmovpo a b
cmovpo :: Cmovpo a b => a -> b -> CodeGen e s ()
class Cmovz a b
cmovz :: Cmovz a b => a -> b -> CodeGen e s ()
class Cmovg a b
cmovg :: Cmovg a b => a -> b -> CodeGen e s ()
class Cmovge a b
cmovge :: Cmovge a b => a -> b -> CodeGen e s ()
class Cmovl a b
cmovl :: Cmovl a b => a -> b -> CodeGen e s ()
class Cmovle a b
cmovle :: Cmovle a b => a -> b -> CodeGen e s ()
class Cmovng a b
cmovng :: Cmovng a b => a -> b -> CodeGen e s ()
class Cmovnge a b
cmovnge :: Cmovnge a b => a -> b -> CodeGen e s ()
class Cmovnl a b
cmovnl :: Cmovnl a b => a -> b -> CodeGen e s ()
class Cmovnle a b
cmovnle :: Cmovnle a b => a -> b -> CodeGen e s ()
class Cmovno a b
cmovno :: Cmovno a b => a -> b -> CodeGen e s ()
class Cmovns a b
cmovns :: Cmovns a b => a -> b -> CodeGen e s ()
class Cmovo a b
cmovo :: Cmovo a b => a -> b -> CodeGen e s ()
class Cmovs a b
cmovs :: Cmovs a b => a -> b -> CodeGen e s ()
leave :: CodeGen e s ()
sahf :: CodeGen e s ()
fldz :: CodeGen e s ()
fld1 :: CodeGen e s ()
fldpi :: CodeGen e s ()
fstsw :: CodeGen e s ()
fnstsw :: CodeGen e s ()
fcompp :: CodeGen e s ()
fucompp :: CodeGen e s ()
fchs :: CodeGen e s ()
frem :: CodeGen e s ()
fxch :: FPReg -> CodeGen e s ()
fcomi :: FPReg -> CodeGen e s ()
fcomip :: FPReg -> CodeGen e s ()
fucomi :: FPReg -> CodeGen e s ()
fucomip :: FPReg -> CodeGen e s ()
fsin :: CodeGen e s ()
fcos :: CodeGen e s ()
fptan :: CodeGen e s ()
fpatan :: CodeGen e s ()
fabs :: CodeGen e s ()
ftst :: CodeGen e s ()
fxam :: CodeGen e s ()
fprem :: CodeGen e s ()
fprem1 :: CodeGen e s ()
frndint :: CodeGen e s ()
fsqrt :: CodeGen e s ()
class Fadd a b
fadd :: Fadd a b => a -> b -> CodeGen e s ()
class Faddp a b
faddp :: Faddp a b => a -> b -> CodeGen e s ()
class Fiadd a b
fiadd32 :: Fiadd a b => a -> b -> CodeGen e s ()
fiadd16 :: Fiadd a b => a -> b -> CodeGen e s ()
class Fsub a b
fsub :: Fsub a b => a -> b -> CodeGen e s ()
class Fsubp a b
fsubp :: Fsubp a b => a -> b -> CodeGen e s ()
class Fisub a b
fisub32 :: Fisub a b => a -> b -> CodeGen e s ()
fisub16 :: Fisub a b => a -> b -> CodeGen e s ()
class Fsubr a b
fsubr :: Fsubr a b => a -> b -> CodeGen e s ()
class Fmul a b
fmul :: Fmul a b => a -> b -> CodeGen e s ()
class Fmulp a b
fmulp :: Fmulp a b => a -> b -> CodeGen e s ()
class Fimul a b
fimul32 :: Fimul a b => a -> b -> CodeGen e s ()
fimul16 :: Fimul a b => a -> b -> CodeGen e s ()
class Fdiv a b
fdiv :: Fdiv a b => a -> b -> CodeGen e s ()
class Fdivp a b
fdivp :: Fdivp a b => a -> b -> CodeGen e s ()
class Fidiv a b
fidiv32 :: Fidiv a b => a -> b -> CodeGen e s ()
fidiv16 :: Fidiv a b => a -> b -> CodeGen e s ()
class Fdivr a b
fdivr :: Fdivr a b => a -> b -> CodeGen e s ()
class Fcom a b
fcom :: Fcom a b => a -> b -> CodeGen e s ()
class Fcomp a b
fcomp :: Fcomp a b => a -> b -> CodeGen e s ()
class Fld a b
fld :: Fld a b => a -> b -> CodeGen e s ()
class Fld80 a b
fld80 :: Fld80 a b => a -> b -> CodeGen e s ()
class Fst a
fst :: Fst a => a -> CodeGen e s ()
class Fstp a
fstp :: Fstp a => a -> CodeGen e s ()
class Fst80 a
fst80 :: Fst80 a => a -> CodeGen e s ()
class Fnstcw a
fnstcw :: Fnstcw a => a -> CodeGen e s ()
class Fldcw a
fldcw :: Fldcw a => a -> CodeGen e s ()
class Fild a
fild :: Fild a => a -> CodeGen e s ()
class Fist a
fist :: Fist a => a -> CodeGen e s ()
class Fistp a
fistp :: Fistp a => a -> CodeGen e s ()
class Sqrtsd a b
sqrtsd :: Sqrtsd a b => a -> b -> CodeGen e s ()
class Sqrtss a b
sqrtss :: Sqrtss a b => a -> b -> CodeGen e s ()
class Sqrtpd a b
sqrtpd :: Sqrtpd a b => a -> b -> CodeGen e s ()
class Sqrtps a b
sqrtps :: Sqrtps a b => a -> b -> CodeGen e s ()
class Addsd a b
addsd :: Addsd a b => a -> b -> CodeGen e s ()
class Addss a b
addss :: Addss a b => a -> b -> CodeGen e s ()
class Addpd a b
addpd :: Addpd a b => a -> b -> CodeGen e s ()
class Addps a b
addps :: Addps a b => a -> b -> CodeGen e s ()
class Subsd a b
subsd :: Subsd a b => a -> b -> CodeGen e s ()
class Subss a b
subss :: Subss a b => a -> b -> CodeGen e s ()
class Subpd a b
subpd :: Subpd a b => a -> b -> CodeGen e s ()
class Subps a b
subps :: Subps a b => a -> b -> CodeGen e s ()
class Mulsd a b
mulsd :: Mulsd a b => a -> b -> CodeGen e s ()
class Mulss a b
mulss :: Mulss a b => a -> b -> CodeGen e s ()
class Mulpd a b
mulpd :: Mulpd a b => a -> b -> CodeGen e s ()
class Mulps a b
mulps :: Mulps a b => a -> b -> CodeGen e s ()
class Divsd a b
divsd :: Divsd a b => a -> b -> CodeGen e s ()
class Divss a b
divss :: Divss a b => a -> b -> CodeGen e s ()
class Divpd a b
divpd :: Divpd a b => a -> b -> CodeGen e s ()
class Divps a b
divps :: Divps a b => a -> b -> CodeGen e s ()
class Minsd a b
minsd :: Minsd a b => a -> b -> CodeGen e s ()
class Minss a b
minss :: Minss a b => a -> b -> CodeGen e s ()
class Minpd a b
minpd :: Minpd a b => a -> b -> CodeGen e s ()
class Minps a b
minps :: Minps a b => a -> b -> CodeGen e s ()
class Maxsd a b
maxsd :: Maxsd a b => a -> b -> CodeGen e s ()
class Maxss a b
maxss :: Maxss a b => a -> b -> CodeGen e s ()
class Maxpd a b
maxpd :: Maxpd a b => a -> b -> CodeGen e s ()
class Maxps a b
maxps :: Maxps a b => a -> b -> CodeGen e s ()
class Movss a b
movss :: Movss a b => a -> b -> CodeGen e s ()
class Movsd a b
movsd :: Movsd a b => a -> b -> CodeGen e s ()
class Movups a b
movups :: Movups a b => a -> b -> CodeGen e s ()
class Movlps a b
movlps :: Movlps a b => a -> b -> CodeGen e s ()
class Comisd a b
comisd :: Comisd a b => a -> b -> CodeGen e s ()
class Comiss a b
comiss :: Comiss a b => a -> b -> CodeGen e s ()
class Ucomisd a b
ucomisd :: Ucomisd a b => a -> b -> CodeGen e s ()
class Ucomiss a b
ucomiss :: Ucomiss a b => a -> b -> CodeGen e s ()
class XMMLocation b => XMMLoc a b | a -> b
xmmLocLowLevel :: XMMLoc a b => a -> b
haddps :: XMMLoc xmm a => XMMReg -> xmm -> CodeGen e s ()
haddpd :: XMMLoc xmm a => XMMReg -> xmm -> CodeGen e s ()
shufps :: XMMLoc xmm a => XMMReg -> xmm -> Word8 -> CodeGen e s ()
shufpd :: XMMLoc xmm a => XMMReg -> xmm -> Word8 -> CodeGen e s ()
cvtdq2ps :: XMMLoc xmm a => XMMReg -> xmm -> CodeGen e s ()
cvttps2dq :: XMMLoc xmm a => XMMReg -> xmm -> CodeGen e s ()
class Prefetchnta a
prefetchnta :: Prefetchnta a => a -> CodeGen e s ()
class Prefetch0 a
prefetch0 :: Prefetch0 a => a -> CodeGen e s ()
class Prefetch1 a
prefetch1 :: Prefetch1 a => a -> CodeGen e s ()
class Prefetch2 a
prefetch2 :: Prefetch2 a => a -> CodeGen e s ()
ptrToWord32 :: Ptr a -> Word32
ptrToInt :: Ptr a -> Int
newtype XMMReg
XMMReg :: Word8 -> XMMReg
instance Eq Reg32
instance Ord Reg32
instance Prefetch2 Ind
instance Prefetch2 (Disp, Reg32)
instance Prefetch2 Addr
instance Prefetch1 Ind
instance Prefetch1 (Disp, Reg32)
instance Prefetch1 Addr
instance Prefetch0 Ind
instance Prefetch0 (Disp, Reg32)
instance Prefetch0 Addr
instance Prefetchnta Ind
instance Prefetchnta (Disp, Reg32)
instance Prefetchnta Addr
instance XMMLoc (Disp, Reg32) MemBase
instance XMMLoc Ind MemBase
instance XMMLoc Addr Mem
instance XMMLoc XMMReg XMMReg
instance Ucomiss XMMReg (Disp, Reg32)
instance Ucomiss XMMReg Ind
instance Ucomiss XMMReg Addr
instance Ucomiss XMMReg XMMReg
instance Ucomisd XMMReg (Disp, Reg32)
instance Ucomisd XMMReg Ind
instance Ucomisd XMMReg Addr
instance Ucomisd XMMReg XMMReg
instance Comiss XMMReg (Disp, Reg32)
instance Comiss XMMReg Ind
instance Comiss XMMReg Addr
instance Comiss XMMReg XMMReg
instance Comisd XMMReg (Disp, Reg32)
instance Comisd XMMReg Ind
instance Comisd XMMReg Addr
instance Comisd XMMReg XMMReg
instance Movlps (Disp, Reg32) XMMReg
instance Movlps XMMReg (Disp, Reg32)
instance Movlps Ind XMMReg
instance Movlps XMMReg Ind
instance Movlps Addr XMMReg
instance Movlps XMMReg Addr
instance Movlps XMMReg XMMReg
instance Movups (Disp, Reg32) XMMReg
instance Movups XMMReg (Disp, Reg32)
instance Movups Ind XMMReg
instance Movups XMMReg Ind
instance Movups Addr XMMReg
instance Movups XMMReg Addr
instance Movups XMMReg XMMReg
instance Movsd (Disp, Reg32) XMMReg
instance Movsd XMMReg (Disp, Reg32)
instance Movsd Ind XMMReg
instance Movsd XMMReg Ind
instance Movsd Addr XMMReg
instance Movsd XMMReg Addr
instance Movsd XMMReg XMMReg
instance Movss (Disp, Reg32) XMMReg
instance Movss XMMReg (Disp, Reg32)
instance Movss Ind XMMReg
instance Movss XMMReg Ind
instance Movss Addr XMMReg
instance Movss XMMReg Addr
instance Movss XMMReg XMMReg
instance Maxps XMMReg (Disp, Reg32)
instance Maxps XMMReg Ind
instance Maxps XMMReg Addr
instance Maxps XMMReg XMMReg
instance Maxpd XMMReg (Disp, Reg32)
instance Maxpd XMMReg Ind
instance Maxpd XMMReg Addr
instance Maxpd XMMReg XMMReg
instance Maxss XMMReg (Disp, Reg32)
instance Maxss XMMReg Ind
instance Maxss XMMReg Addr
instance Maxss XMMReg XMMReg
instance Maxsd XMMReg (Disp, Reg32)
instance Maxsd XMMReg Ind
instance Maxsd XMMReg Addr
instance Maxsd XMMReg XMMReg
instance Minps XMMReg (Disp, Reg32)
instance Minps XMMReg Ind
instance Minps XMMReg Addr
instance Minps XMMReg XMMReg
instance Minpd XMMReg (Disp, Reg32)
instance Minpd XMMReg Ind
instance Minpd XMMReg Addr
instance Minpd XMMReg XMMReg
instance Minss XMMReg (Disp, Reg32)
instance Minss XMMReg Ind
instance Minss XMMReg Addr
instance Minss XMMReg XMMReg
instance Minsd XMMReg (Disp, Reg32)
instance Minsd XMMReg Ind
instance Minsd XMMReg Addr
instance Minsd XMMReg XMMReg
instance Divps XMMReg (Disp, Reg32)
instance Divps XMMReg Ind
instance Divps XMMReg Addr
instance Divps XMMReg XMMReg
instance Divpd XMMReg (Disp, Reg32)
instance Divpd XMMReg Ind
instance Divpd XMMReg Addr
instance Divpd XMMReg XMMReg
instance Divss XMMReg (Disp, Reg32)
instance Divss XMMReg Ind
instance Divss XMMReg Addr
instance Divss XMMReg XMMReg
instance Divsd XMMReg (Disp, Reg32)
instance Divsd XMMReg Ind
instance Divsd XMMReg Addr
instance Divsd XMMReg XMMReg
instance Mulps XMMReg (Disp, Reg32)
instance Mulps XMMReg Ind
instance Mulps XMMReg Addr
instance Mulps XMMReg XMMReg
instance Mulpd XMMReg (Disp, Reg32)
instance Mulpd XMMReg Ind
instance Mulpd XMMReg Addr
instance Mulpd XMMReg XMMReg
instance Mulss XMMReg (Disp, Reg32)
instance Mulss XMMReg Ind
instance Mulss XMMReg Addr
instance Mulss XMMReg XMMReg
instance Mulsd XMMReg (Disp, Reg32)
instance Mulsd XMMReg Ind
instance Mulsd XMMReg Addr
instance Mulsd XMMReg XMMReg
instance Subps XMMReg (Disp, Reg32)
instance Subps XMMReg Ind
instance Subps XMMReg Addr
instance Subps XMMReg XMMReg
instance Subpd XMMReg (Disp, Reg32)
instance Subpd XMMReg Ind
instance Subpd XMMReg Addr
instance Subpd XMMReg XMMReg
instance Subss XMMReg (Disp, Reg32)
instance Subss XMMReg Ind
instance Subss XMMReg Addr
instance Subss XMMReg XMMReg
instance Subsd XMMReg (Disp, Reg32)
instance Subsd XMMReg Ind
instance Subsd XMMReg Addr
instance Subsd XMMReg XMMReg
instance Addps XMMReg (Disp, Reg32)
instance Addps XMMReg Ind
instance Addps XMMReg Addr
instance Addps XMMReg XMMReg
instance Addpd XMMReg (Disp, Reg32)
instance Addpd XMMReg Ind
instance Addpd XMMReg Addr
instance Addpd XMMReg XMMReg
instance Addss XMMReg (Disp, Reg32)
instance Addss XMMReg Ind
instance Addss XMMReg Addr
instance Addss XMMReg XMMReg
instance Addsd XMMReg (Disp, Reg32)
instance Addsd XMMReg Ind
instance Addsd XMMReg Addr
instance Addsd XMMReg XMMReg
instance Sqrtps XMMReg (Disp, Reg32)
instance Sqrtps XMMReg Ind
instance Sqrtps XMMReg Addr
instance Sqrtps XMMReg XMMReg
instance Sqrtpd XMMReg (Disp, Reg32)
instance Sqrtpd XMMReg Ind
instance Sqrtpd XMMReg Addr
instance Sqrtpd XMMReg XMMReg
instance Sqrtss XMMReg (Disp, Reg32)
instance Sqrtss XMMReg Ind
instance Sqrtss XMMReg Addr
instance Sqrtss XMMReg XMMReg
instance Sqrtsd XMMReg (Disp, Reg32)
instance Sqrtsd XMMReg Ind
instance Sqrtsd XMMReg Addr
instance Sqrtsd XMMReg XMMReg
instance Fistp Ind
instance Fistp (Disp, Reg32)
instance Fistp Addr
instance Fist Ind
instance Fist (Disp, Reg32)
instance Fild Ind
instance Fild (Disp, Reg32)
instance Fild Addr
instance Fldcw Ind
instance Fldcw (Disp, Reg32)
instance Fldcw Addr
instance Fnstcw Ind
instance Fnstcw (Disp, Reg32)
instance Fnstcw Addr
instance Fst80 Ind
instance Fst80 (Disp, Reg32)
instance Fst80 Addr
instance Fstp Ind
instance Fstp (Disp, Reg32)
instance Fstp Addr
instance Fstp FPReg
instance Fst Ind
instance Fst (Disp, Reg32)
instance Fst Addr
instance Fld80 FPTopReg Ind
instance Fld80 FPTopReg (Disp, Reg32)
instance Fld80 FPTopReg Addr
instance Fld FPTopReg Ind
instance Fld FPTopReg (Disp, Reg32)
instance Fld FPTopReg Addr
instance Fld FPTopReg FPReg
instance Fcomp FPTopReg Ind
instance Fcomp FPTopReg (Disp, Reg32)
instance Fcomp FPTopReg Addr
instance Fcomp FPTopReg FPReg
instance Fcom FPTopReg Ind
instance Fcom FPTopReg (Disp, Reg32)
instance Fcom FPTopReg Addr
instance Fcom FPTopReg FPReg
instance Fdivr FPTopReg Ind
instance Fdivr FPTopReg (Disp, Reg32)
instance Fdivr FPTopReg Addr
instance Fdivr FPTopReg FPReg
instance Fidiv FPTopReg Ind
instance Fidiv FPTopReg (Disp, Reg32)
instance Fdivp FPReg FPTopReg
instance Fdiv FPReg FPTopReg
instance Fdiv FPTopReg Ind
instance Fdiv FPTopReg (Disp, Reg32)
instance Fdiv FPTopReg Addr
instance Fdiv FPTopReg FPReg
instance Fimul FPTopReg Ind
instance Fimul FPTopReg (Disp, Reg32)
instance Fmulp FPReg FPTopReg
instance Fmul FPReg FPTopReg
instance Fmul FPTopReg Ind
instance Fmul FPTopReg (Disp, Reg32)
instance Fmul FPTopReg Addr
instance Fmul FPTopReg FPReg
instance Fsubr FPTopReg Ind
instance Fsubr FPTopReg (Disp, Reg32)
instance Fsubr FPTopReg Addr
instance Fsubr FPTopReg FPReg
instance Fisub FPTopReg Ind
instance Fisub FPTopReg (Disp, Reg32)
instance Fsubp FPReg FPTopReg
instance Fsub FPReg FPTopReg
instance Fsub FPTopReg Ind
instance Fsub FPTopReg (Disp, Reg32)
instance Fsub FPTopReg Addr
instance Fsub FPTopReg FPReg
instance Fiadd FPTopReg Ind
instance Fiadd FPTopReg (Disp, Reg32)
instance Faddp FPReg FPTopReg
instance Fadd FPReg FPTopReg
instance Fadd FPTopReg Ind
instance Fadd FPTopReg (Disp, Reg32)
instance Fadd FPTopReg Addr
instance Fadd FPTopReg FPReg
instance Cmovs Reg32 Ind
instance Cmovs Reg32 (Disp, Reg32)
instance Cmovs Reg32 Addr
instance Cmovs Reg32 Reg32
instance Cmovo Reg32 Ind
instance Cmovo Reg32 (Disp, Reg32)
instance Cmovo Reg32 Addr
instance Cmovo Reg32 Reg32
instance Cmovns Reg32 Ind
instance Cmovns Reg32 (Disp, Reg32)
instance Cmovns Reg32 Addr
instance Cmovns Reg32 Reg32
instance Cmovno Reg32 Ind
instance Cmovno Reg32 (Disp, Reg32)
instance Cmovno Reg32 Addr
instance Cmovno Reg32 Reg32
instance Cmovnle Reg32 Ind
instance Cmovnle Reg32 (Disp, Reg32)
instance Cmovnle Reg32 Addr
instance Cmovnle Reg32 Reg32
instance Cmovnl Reg32 Ind
instance Cmovnl Reg32 (Disp, Reg32)
instance Cmovnl Reg32 Addr
instance Cmovnl Reg32 Reg32
instance Cmovnge Reg32 Ind
instance Cmovnge Reg32 (Disp, Reg32)
instance Cmovnge Reg32 Addr
instance Cmovnge Reg32 Reg32
instance Cmovng Reg32 Ind
instance Cmovng Reg32 (Disp, Reg32)
instance Cmovng Reg32 Addr
instance Cmovng Reg32 Reg32
instance Cmovle Reg32 Ind
instance Cmovle Reg32 (Disp, Reg32)
instance Cmovle Reg32 Addr
instance Cmovle Reg32 Reg32
instance Cmovl Reg32 Ind
instance Cmovl Reg32 (Disp, Reg32)
instance Cmovl Reg32 Addr
instance Cmovl Reg32 Reg32
instance Cmovge Reg32 Ind
instance Cmovge Reg32 (Disp, Reg32)
instance Cmovge Reg32 Addr
instance Cmovge Reg32 Reg32
instance Cmovg Reg32 Ind
instance Cmovg Reg32 (Disp, Reg32)
instance Cmovg Reg32 Addr
instance Cmovg Reg32 Reg32
instance Cmovz Reg32 Ind
instance Cmovz Reg32 (Disp, Reg32)
instance Cmovz Reg32 Addr
instance Cmovz Reg32 Reg32
instance Cmovpo Reg32 Ind
instance Cmovpo Reg32 (Disp, Reg32)
instance Cmovpo Reg32 Addr
instance Cmovpo Reg32 Reg32
instance Cmovpe Reg32 Ind
instance Cmovpe Reg32 (Disp, Reg32)
instance Cmovpe Reg32 Addr
instance Cmovpe Reg32 Reg32
instance Cmovp Reg32 Ind
instance Cmovp Reg32 (Disp, Reg32)
instance Cmovp Reg32 Addr
instance Cmovp Reg32 Reg32
instance Cmovnz Reg32 Ind
instance Cmovnz Reg32 (Disp, Reg32)
instance Cmovnz Reg32 Addr
instance Cmovnz Reg32 Reg32
instance Cmovnp Reg32 Ind
instance Cmovnp Reg32 (Disp, Reg32)
instance Cmovnp Reg32 Addr
instance Cmovnp Reg32 Reg32
instance Cmovne Reg32 Ind
instance Cmovne Reg32 (Disp, Reg32)
instance Cmovne Reg32 Addr
instance Cmovne Reg32 Reg32
instance Cmovnc Reg32 Ind
instance Cmovnc Reg32 (Disp, Reg32)
instance Cmovnc Reg32 Addr
instance Cmovnc Reg32 Reg32
instance Cmovnbe Reg32 Ind
instance Cmovnbe Reg32 (Disp, Reg32)
instance Cmovnbe Reg32 Addr
instance Cmovnbe Reg32 Reg32
instance Cmovnb Reg32 Ind
instance Cmovnb Reg32 (Disp, Reg32)
instance Cmovnb Reg32 Addr
instance Cmovnb Reg32 Reg32
instance Cmovnae Reg32 Ind
instance Cmovnae Reg32 (Disp, Reg32)
instance Cmovnae Reg32 Addr
instance Cmovnae Reg32 Reg32
instance Cmovna Reg32 Ind
instance Cmovna Reg32 (Disp, Reg32)
instance Cmovna Reg32 Addr
instance Cmovna Reg32 Reg32
instance Cmove Reg32 Ind
instance Cmove Reg32 (Disp, Reg32)
instance Cmove Reg32 Addr
instance Cmove Reg32 Reg32
instance Cmovc Reg32 Ind
instance Cmovc Reg32 (Disp, Reg32)
instance Cmovc Reg32 Addr
instance Cmovc Reg32 Reg32
instance Cmovbe Reg32 Ind
instance Cmovbe Reg32 (Disp, Reg32)
instance Cmovbe Reg32 Addr
instance Cmovbe Reg32 Reg32
instance Cmovb Reg32 Ind
instance Cmovb Reg32 (Disp, Reg32)
instance Cmovb Reg32 Addr
instance Cmovb Reg32 Reg32
instance Cmovae Reg32 Ind
instance Cmovae Reg32 (Disp, Reg32)
instance Cmovae Reg32 Addr
instance Cmovae Reg32 Reg32
instance Cmova Reg32 Ind
instance Cmova Reg32 (Disp, Reg32)
instance Cmova Reg32 Addr
instance Cmova Reg32 Reg32
instance Call (FunPtr a)
instance Call Ind
instance Call (Disp, Reg32)
instance Call Addr
instance Call Reg32
instance Call Label
instance Call Word32
instance Setz Ind
instance Setz (Disp, Reg32)
instance Setz Addr
instance Setz Reg8
instance Sets Ind
instance Sets (Disp, Reg32)
instance Sets Addr
instance Sets Reg8
instance Seto Ind
instance Seto (Disp, Reg32)
instance Seto Addr
instance Seto Reg8
instance Setns Ind
instance Setns (Disp, Reg32)
instance Setns Addr
instance Setns Reg8
instance Setno Ind
instance Setno (Disp, Reg32)
instance Setno Addr
instance Setno Reg8
instance Setnle Ind
instance Setnle (Disp, Reg32)
instance Setnle Addr
instance Setnle Reg8
instance Setnl Ind
instance Setnl (Disp, Reg32)
instance Setnl Addr
instance Setnl Reg8
instance Setnge Ind
instance Setnge (Disp, Reg32)
instance Setnge Addr
instance Setnge Reg8
instance Setng Ind
instance Setng (Disp, Reg32)
instance Setng Addr
instance Setng Reg8
instance Setle Ind
instance Setle (Disp, Reg32)
instance Setle Addr
instance Setle Reg8
instance Setl Ind
instance Setl (Disp, Reg32)
instance Setl Addr
instance Setl Reg8
instance Setge Ind
instance Setge (Disp, Reg32)
instance Setge Addr
instance Setge Reg8
instance Setg Ind
instance Setg (Disp, Reg32)
instance Setg Addr
instance Setg Reg8
instance Setpo Ind
instance Setpo (Disp, Reg32)
instance Setpo Addr
instance Setpo Reg8
instance Setpe Ind
instance Setpe (Disp, Reg32)
instance Setpe Addr
instance Setpe Reg8
instance Setp Ind
instance Setp (Disp, Reg32)
instance Setp Addr
instance Setp Reg8
instance Setnz Ind
instance Setnz (Disp, Reg32)
instance Setnz Addr
instance Setnz Reg8
instance Setnp Ind
instance Setnp (Disp, Reg32)
instance Setnp Addr
instance Setnp Reg8
instance Setne Ind
instance Setne (Disp, Reg32)
instance Setne Addr
instance Setne Reg8
instance Setnc Ind
instance Setnc (Disp, Reg32)
instance Setnc Addr
instance Setnc Reg8
instance Setnbe Ind
instance Setnbe (Disp, Reg32)
instance Setnbe Addr
instance Setnbe Reg8
instance Setnb Ind
instance Setnb (Disp, Reg32)
instance Setnb Addr
instance Setnb Reg8
instance Setnae Ind
instance Setnae (Disp, Reg32)
instance Setnae Addr
instance Setnae Reg8
instance Setna Ind
instance Setna (Disp, Reg32)
instance Setna Addr
instance Setna Reg8
instance Sete Ind
instance Sete (Disp, Reg32)
instance Sete Addr
instance Sete Reg8
instance Setc Ind
instance Setc (Disp, Reg32)
instance Setc Addr
instance Setc Reg8
instance Setbe Ind
instance Setbe (Disp, Reg32)
instance Setbe Addr
instance Setbe Reg8
instance Setb Ind
instance Setb (Disp, Reg32)
instance Setb Addr
instance Setb Reg8
instance Setae Ind
instance Setae (Disp, Reg32)
instance Setae Addr
instance Setae Reg8
instance Seta Ind
instance Seta (Disp, Reg32)
instance Seta Addr
instance Seta Reg8
instance Js Label
instance Js (Ptr a)
instance Js Word32
instance Js Word8
instance Jo Label
instance Jo (Ptr a)
instance Jo Word32
instance Jo Word8
instance Jns Label
instance Jns (Ptr a)
instance Jns Word32
instance Jns Word8
instance Jno Label
instance Jno (Ptr a)
instance Jno Word32
instance Jno Word8
instance Jnle Label
instance Jnle (Ptr a)
instance Jnle Word32
instance Jnle Word8
instance Jnl Label
instance Jnl (Ptr a)
instance Jnl Word32
instance Jnl Word8
instance Jnge Label
instance Jnge (Ptr a)
instance Jnge Word32
instance Jnge Word8
instance Jng Label
instance Jng (Ptr a)
instance Jng Word32
instance Jng Word8
instance Jle Label
instance Jle (Ptr a)
instance Jle Word32
instance Jle Word8
instance Jl Label
instance Jl (Ptr a)
instance Jl Word32
instance Jl Word8
instance Jge Label
instance Jge (Ptr a)
instance Jge Word32
instance Jge Word8
instance Jg Label
instance Jg (Ptr a)
instance Jg Word32
instance Jg Word8
instance Jz Label
instance Jz (Ptr a)
instance Jz Word32
instance Jz Word8
instance Jpo Label
instance Jpo (Ptr a)
instance Jpo Word32
instance Jpo Word8
instance Jpe Label
instance Jpe (Ptr a)
instance Jpe Word32
instance Jpe Word8
instance Jp Label
instance Jp (Ptr a)
instance Jp Word32
instance Jp Word8
instance Jnz Label
instance Jnz (Ptr a)
instance Jnz Word32
instance Jnz Word8
instance Jnp Label
instance Jnp (Ptr a)
instance Jnp Word32
instance Jnp Word8
instance Jne Label
instance Jne (Ptr a)
instance Jne Word32
instance Jne Word8
instance Jnc Label
instance Jnc (Ptr a)
instance Jnc Word32
instance Jnc Word8
instance Jnbe Label
instance Jnbe (Ptr a)
instance Jnbe Word32
instance Jnbe Word8
instance Jnb Label
instance Jnb (Ptr a)
instance Jnb Word32
instance Jnb Word8
instance Jnae Label
instance Jnae (Ptr a)
instance Jnae Word32
instance Jnae Word8
instance Jna Label
instance Jna (Ptr a)
instance Jna Word32
instance Jna Word8
instance Je Label
instance Je (Ptr a)
instance Je Word32
instance Je Word8
instance Jc Label
instance Jc (Ptr a)
instance Jc Word32
instance Jc Word8
instance Jbe Label
instance Jbe (Ptr a)
instance Jbe Word32
instance Jbe Word8
instance Jb Label
instance Jb (Ptr a)
instance Jb Word32
instance Jb Word8
instance Jae Label
instance Jae (Ptr a)
instance Jae Word32
instance Jae Word8
instance Ja Label
instance Ja (Ptr a)
instance Ja Word32
instance Ja Word8
instance Jmp (Ptr a)
instance Jmp Label
instance Jmp Ind
instance Jmp (Disp, Reg32)
instance Jmp Addr
instance Jmp Reg32
instance Jmp Word32
instance Jmp Word8
instance Loop Label
instance Loop Word8
instance Pop Ind
instance Pop (Disp, Reg32)
instance Pop Addr
instance Pop Reg32
instance Push (Reg32, Reg32, Scale)
instance Push (Disp, Reg32, Scale)
instance Push (Disp, Reg32, Reg32, Scale)
instance Push Label
instance Push Word32
instance Push (Disp, Reg32)
instance Push Addr
instance Push Ind
instance Push Reg32
instance Lea Reg32 (Reg32, Reg32, Scale)
instance Lea Reg32 (Disp, Reg32, Scale)
instance Lea Reg32 (Disp, Reg32, Reg32, Scale)
instance Lea Reg32 Ind
instance Lea Reg32 (Disp, Reg32)
instance Lea Reg32 Addr
instance Movzxw Reg32 (Reg32, Reg32, Scale)
instance Movzxw Reg32 (Disp, Reg32, Scale)
instance Movzxw Reg32 (Disp, Reg32, Reg32, Scale)
instance Movzxw Reg32 Ind
instance Movzxw Reg32 (Disp, Reg32)
instance Movzxw Reg32 Addr
instance Movzxw Reg32 Reg16
instance Movzxb Reg32 (Reg32, Reg32, Scale)
instance Movzxb Reg32 (Disp, Reg32, Scale)
instance Movzxb Reg32 (Disp, Reg32, Reg32, Scale)
instance Movzxb Reg32 Ind
instance Movzxb Reg32 (Disp, Reg32)
instance Movzxb Reg32 Addr
instance Movzxb Reg32 Reg8
instance Movsxw Reg32 (Reg32, Reg32, Scale)
instance Movsxw Reg32 (Disp, Reg32, Scale)
instance Movsxw Reg32 (Disp, Reg32, Reg32, Scale)
instance Movsxw Reg32 Ind
instance Movsxw Reg32 (Disp, Reg32)
instance Movsxw Reg32 Addr
instance Movsxw Reg32 Reg16
instance Movsxb Reg32 (Reg32, Reg32, Scale)
instance Movsxb Reg32 (Disp, Reg32, Scale)
instance Movsxb Reg32 (Disp, Reg32, Reg32, Scale)
instance Movsxb Reg32 Ind
instance Movsxb Reg32 (Disp, Reg32)
instance Movsxb Reg32 Addr
instance Movsxb Reg32 Reg8
instance Mov Reg32 (Disp, Reg32, Reg32, Scale)
instance Mov Reg16 (Disp, Reg32, Reg32, Scale)
instance Mov Reg8 (Disp, Reg32, Reg32, Scale)
instance Mov (Disp, Reg32, Reg32, Scale) Reg32
instance Mov (Disp, Reg32, Reg32, Scale) Reg16
instance Mov (Disp, Reg32, Reg32, Scale) Reg8
instance Mov Reg32 (Disp, Reg32, Scale)
instance Mov Reg16 (Disp, Reg32, Scale)
instance Mov Reg8 (Disp, Reg32, Scale)
instance Mov (Disp, Reg32, Scale) Reg32
instance Mov (Disp, Reg32, Scale) Reg16
instance Mov (Disp, Reg32, Scale) Reg8
instance Mov Reg32 (Reg32, Reg32, Scale)
instance Mov Reg16 (Reg32, Reg32, Scale)
instance Mov Reg8 (Reg32, Reg32, Scale)
instance Mov (Reg32, Reg32, Scale) Reg32
instance Mov (Reg32, Reg32, Scale) Reg16
instance Mov (Reg32, Reg32, Scale) Reg8
instance Mov Reg32 (Disp, Reg32)
instance Mov Reg16 (Disp, Reg32)
instance Mov Reg8 (Disp, Reg32)
instance Mov (Disp, Reg32) Reg32
instance Mov (Disp, Reg32) Reg16
instance Mov (Disp, Reg32) Reg8
instance Mov Reg32 Ind
instance Mov Reg16 Ind
instance Mov Reg8 Ind
instance Mov Ind Reg32
instance Mov Ind Reg16
instance Mov Ind Reg8
instance Mov Reg32 Addr
instance Mov Reg16 Addr
instance Mov Reg8 Addr
instance Mov Addr Reg32
instance Mov Addr Reg16
instance Mov Addr Reg8
instance Mov (Disp, Reg32, Reg32, Scale) Label
instance Mov (Disp, Reg32, Reg32, Scale) (Ptr a)
instance Mov (Disp, Reg32, Reg32, Scale) Word32
instance Mov (Disp, Reg32, Reg32, Scale) Word16
instance Mov (Disp, Reg32, Reg32, Scale) Word8
instance Mov (Disp, Reg32, Scale) Label
instance Mov (Disp, Reg32, Scale) (Ptr a)
instance Mov (Disp, Reg32, Scale) Word32
instance Mov (Disp, Reg32, Scale) Word16
instance Mov (Disp, Reg32, Scale) Word8
instance Mov (Reg32, Reg32, Scale) Label
instance Mov (Reg32, Reg32, Scale) (Ptr a)
instance Mov (Reg32, Reg32, Scale) Word32
instance Mov (Reg32, Reg32, Scale) Word16
instance Mov (Reg32, Reg32, Scale) Word8
instance Mov Ind Label
instance Mov Ind (Ptr a)
instance Mov Ind Word32
instance Mov (Disp, Reg32) Label
instance Mov (Disp, Reg32) (Ptr a)
instance Mov (Disp, Reg32) Word32
instance Mov Ind Word16
instance Mov (Disp, Reg32) Word16
instance Mov Ind Word8
instance Mov (Disp, Reg32) Word8
instance Mov Addr Label
instance Mov Addr (Ptr a)
instance Mov Addr Word32
instance Mov Addr Word16
instance Mov Addr Word8
instance Mov Reg32 Label
instance Mov Reg32 (Ptr a)
instance Mov Reg32 Word32
instance Mov Reg32 Reg32
instance Mov Reg16 Reg16
instance Mov Reg8 Reg8
instance Idiv Ind
instance Idiv (Disp, Reg32)
instance Idiv Addr
instance Idiv Reg32
instance Div Ind
instance Div (Disp, Reg32)
instance Div Addr
instance Div Reg32
instance Imul Reg32 Ind Word32
instance Imul Reg32 (Disp, Reg32) Word32
instance Imul Reg32 Addr Word32
instance Imul Reg32 Reg32 Word32
instance Imul InPlace Reg32 Ind
instance Imul InPlace Reg32 (Disp, Reg32)
instance Imul InPlace Reg32 Addr
instance Imul InPlace Reg32 Reg32
instance Mul Ind
instance Mul (Disp, Reg32)
instance Mul Addr
instance Mul Reg32
instance Shld Reg32 Reg32 Word8
instance Shld Reg32 Reg32 Reg8
instance Shrd Reg32 Reg32 Word8
instance Shrd Reg32 Reg32 Reg8
instance Sal Ind Reg8
instance Sal (Disp, Reg32) Reg8
instance Sal Addr Reg8
instance Sal Reg32 Reg8
instance Sal Ind Word8
instance Sal (Disp, Reg32) Word8
instance Sal Addr Word8
instance Sal Reg32 Word8
instance Sar Ind Reg8
instance Sar (Disp, Reg32) Reg8
instance Sar Addr Reg8
instance Sar Reg32 Reg8
instance Sar Ind Word8
instance Sar (Disp, Reg32) Word8
instance Sar Addr Word8
instance Sar Reg32 Word8
instance Shr Ind Reg8
instance Shr (Disp, Reg32) Reg8
instance Shr Addr Reg8
instance Shr Reg32 Reg8
instance Shr Ind Word8
instance Shr (Disp, Reg32) Word8
instance Shr Addr Word8
instance Shr Reg32 Word8
instance Shl Ind Reg8
instance Shl (Disp, Reg32) Reg8
instance Shl Addr Reg8
instance Shl Reg32 Reg8
instance Shl Ind Word8
instance Shl (Disp, Reg32) Word8
instance Shl Addr Word8
instance Shl Reg32 Word8
instance Rcr Ind Reg8
instance Rcr (Disp, Reg32) Reg8
instance Rcr Addr Reg8
instance Rcr Reg32 Reg8
instance Rcr Ind Word8
instance Rcr (Disp, Reg32) Word8
instance Rcr Addr Word8
instance Rcr Reg32 Word8
instance Rcl Ind Reg8
instance Rcl (Disp, Reg32) Reg8
instance Rcl Addr Reg8
instance Rcl Reg32 Reg8
instance Rcl Ind Word8
instance Rcl (Disp, Reg32) Word8
instance Rcl Addr Word8
instance Rcl Reg32 Word8
instance Ror Ind Reg8
instance Ror (Disp, Reg32) Reg8
instance Ror Addr Reg8
instance Ror Reg32 Reg8
instance Ror Ind Word8
instance Ror (Disp, Reg32) Word8
instance Ror Addr Word8
instance Ror Reg32 Word8
instance Rol Ind Reg8
instance Rol (Disp, Reg32) Reg8
instance Rol Addr Reg8
instance Rol Reg32 Reg8
instance Rol Ind Word8
instance Rol (Disp, Reg32) Word8
instance Rol Addr Word8
instance Rol Reg32 Word8
instance Test Ind Reg32
instance Test (Disp, Reg32) Reg32
instance Test Addr Reg32
instance Test Reg32 Reg32
instance Test Ind Word32
instance Test (Disp, Reg32) Word32
instance Test Addr Word32
instance Test Reg32 Word32
instance Cmp Reg32 Ind
instance Cmp Reg32 (Disp, Reg32)
instance Cmp Reg32 Addr
instance Cmp Reg8 Reg8
instance Cmp Reg32 Reg32
instance Cmp Ind Reg32
instance Cmp (Disp, Reg32) Reg32
instance Cmp Addr Reg32
instance Cmp Ind Word8
instance Cmp (Disp, Reg32) Word8
instance Cmp Ind Label
instance Cmp Ind (Ptr a)
instance Cmp Ind Word32
instance Cmp (Disp, Reg32) Label
instance Cmp (Disp, Reg32) (Ptr a)
instance Cmp (Disp, Reg32) Word32
instance Cmp Addr Label
instance Cmp Addr (Ptr a)
instance Cmp Addr Word32
instance Cmp Reg32 Label
instance Cmp Reg32 (Ptr a)
instance Cmp Reg32 Word32
instance Xor Reg32 Ind
instance Xor Reg32 (Disp, Reg32)
instance Xor Reg32 Addr
instance Xor Reg8 Reg8
instance Xor Reg32 Reg32
instance Xor Ind Reg32
instance Xor (Disp, Reg32) Reg32
instance Xor Addr Reg32
instance Xor Ind Word8
instance Xor (Disp, Reg32) Word8
instance Xor Ind Word32
instance Xor (Disp, Reg32) Word32
instance Xor Addr Word32
instance Xor Reg32 Word32
instance Sub Reg32 Ind
instance Sub Reg32 (Disp, Reg32)
instance Sub Reg32 Addr
instance Sub Reg8 Reg8
instance Sub Reg32 Reg32
instance Sub Ind Reg32
instance Sub (Disp, Reg32) Reg32
instance Sub Addr Reg32
instance Sub Ind Word8
instance Sub (Disp, Reg32) Word8
instance Sub Ind Word32
instance Sub (Disp, Reg32) Word32
instance Sub Addr Word32
instance Sub Reg32 Word32
instance And Reg32 Ind
instance And Reg32 (Disp, Reg32)
instance And Reg32 Addr
instance And Reg8 Reg8
instance And Reg32 Reg32
instance And Ind Reg32
instance And (Disp, Reg32) Reg32
instance And Addr Reg32
instance And Ind Word8
instance And (Disp, Reg32) Word8
instance And Ind Word32
instance And (Disp, Reg32) Word32
instance And Addr Word32
instance And Reg32 Word32
instance Sbb Reg32 Ind
instance Sbb Reg32 (Disp, Reg32)
instance Sbb Reg32 Addr
instance Sbb Reg8 Reg8
instance Sbb Reg32 Reg32
instance Sbb Ind Reg32
instance Sbb (Disp, Reg32) Reg32
instance Sbb Addr Reg32
instance Sbb Ind Word8
instance Sbb (Disp, Reg32) Word8
instance Sbb Ind Word32
instance Sbb (Disp, Reg32) Word32
instance Sbb Addr Word32
instance Sbb Reg32 Word32
instance Adc Reg32 Ind
instance Adc Reg32 (Disp, Reg32)
instance Adc Reg32 Addr
instance Adc Reg8 Reg8
instance Adc Reg32 Reg32
instance Adc Ind Reg32
instance Adc (Disp, Reg32) Reg32
instance Adc Addr Reg32
instance Adc Ind Word8
instance Adc (Disp, Reg32) Word8
instance Adc Ind Word32
instance Adc (Disp, Reg32) Word32
instance Adc Addr Word32
instance Adc Reg32 Word32
instance Or Reg32 Ind
instance Or Reg32 (Disp, Reg32)
instance Or Reg32 Addr
instance Or Reg8 Reg8
instance Or Reg32 Reg32
instance Or Ind Reg32
instance Or (Disp, Reg32) Reg32
instance Or Addr Reg32
instance Or Ind Word8
instance Or (Disp, Reg32) Word8
instance Or Ind Word32
instance Or (Disp, Reg32) Word32
instance Or Addr Word32
instance Or Reg32 Word32
instance Add Reg32 Ind
instance Add Reg32 (Disp, Reg32)
instance Add Reg32 Addr
instance Add Reg8 Reg8
instance Add Reg32 Reg32
instance Add Ind Reg32
instance Add (Disp, Reg32) Reg32
instance Add Addr Reg32
instance Add Ind Word8
instance Add (Disp, Reg32) Word8
instance Add Ind Word32
instance Add (Disp, Reg32) Word32
instance Add Addr Word32
instance Add Reg32 Word32
instance Neg Reg32
instance Neg Ind
instance Neg (Disp, Reg32)
instance Neg Addr
instance Not Reg32
instance Not Ind
instance Not (Disp, Reg32)
instance Not Addr
instance Dec Reg32
instance Dec Ind
instance Dec (Disp, Reg32)
instance Dec Addr
instance Inc Reg32
instance Inc Ind
instance Inc (Disp, Reg32)
instance Inc Addr
instance Xadd Ind Reg32
instance Xadd (Disp, Reg32) Reg32
instance Xadd Ind Reg8
instance Xadd (Disp, Reg32) Reg8
instance Xadd Addr Reg32
instance Xadd Addr Reg8
instance Xadd Reg32 Reg32
instance Xadd Reg8 Reg8
instance Xchg Ind Reg32
instance Xchg (Disp, Reg32) Reg32
instance Xchg Ind Reg8
instance Xchg (Disp, Reg32) Reg8
instance Xchg Addr Reg32
instance Xchg Addr Reg8
instance Xchg Reg32 Reg32
instance Xchg Reg8 Reg8
instance Cmpxchg Ind Reg32
instance Cmpxchg (Disp, Reg32) Reg32
instance Cmpxchg Addr Reg32
instance Cmpxchg Reg32 Reg32
instance Show Reg32
instance Show XMMReg


-- | This module exports several combinators for writing loops,
--   conditionals and function prolog/epilog code.
--   
--   Note: this module is under heavy development and the exported API is
--   definitely not yet stable.
module Harpy.X86CGCombinators

-- | User state is used to maintain bitmask of registers currently in use.
data UserState
UserState :: UserState

-- | User environment stores code generators for accessing specific
--   variables as well as the current data and control destinations
data UserEnv
UserEnv :: [(String, CodeGen UserEnv UserState ())] -> DataDest -> CtrlDest -> UserEnv
bindings :: UserEnv -> [(String, CodeGen UserEnv UserState ())]
dataDest :: UserEnv -> DataDest
ctrlDest :: UserEnv -> CtrlDest
emptyUserEnv :: UserEnv
emptyUserState :: UserState

-- | Destination for control transfers
data CtrlDest

-- | Go to next instruction
FallThrough :: CtrlDest

-- | Return from current functio
Return :: CtrlDest

-- | Go to specific label
Goto :: Label -> CtrlDest

-- | Go to one of the given labels depending on outcome of test
Branch :: CtrlDest -> CtrlDest -> CtrlDest

-- | Destination for a calculated value.
data DataDest

-- | Store into specific register
RegDest :: Reg32 -> DataDest

-- | Push onto stack
StackDest :: DataDest

-- | Store at memory address
MemBaseDest :: Reg32 -> Word32 -> DataDest

-- | Throw result away.
Ignore :: DataDest
ifThenElse :: CodeGen UserEnv s r -> CodeGen UserEnv s a -> CodeGen UserEnv s a1 -> CodeGen UserEnv s ()
doWhile :: CodeGen UserEnv s r -> CodeGen UserEnv s a -> CodeGen UserEnv s ()
continue :: CodeGen UserEnv s ()
continueBranch :: Int -> Bool -> CodeGen UserEnv s ()

-- | Save a number of registers on the stack, perform the given code
--   generation, and restore the registers.
saveRegs :: [Reg32] -> CodeGen UserEnv s r -> CodeGen UserEnv s ()

-- | Emit the necessary function prolog and epilog code and invoke the
--   given code generator for the code inbetween.
function :: CodeGen UserEnv s r -> CodeGen UserEnv s r

-- | Set the data destinations to the given values while running the code
--   generator.
withDataDest :: DataDest -> CodeGen UserEnv s r -> CodeGen UserEnv s r

-- | Set the control destinations to the given values while running the
--   code generator.
withCtrlDest :: CtrlDest -> CodeGen UserEnv s r -> CodeGen UserEnv s r

-- | Set the data and control destinations to the given values while
--   running the code generator.
withDest :: DataDest -> CtrlDest -> CodeGen UserEnv s r -> CodeGen UserEnv s r


-- | Harpy is a library for run-time code generation of x86 machine code.
--   
--   This is a convenience module which re-exports the modules which are
--   essential for using Harpy.
module Harpy
