-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Type level names.
--   
--   Type level names.
--   
--   <ul>
--   <li><i><tt>v0.1</tt></i> Initial.</li>
--   <li><i><tt>v0.2</tt></i> Show Instances added. Restricted to
--   latin1.</li>
--   <li><i><tt>v0.2.1</tt></i> Infix operator fixities set.</li>
--   <li><i><tt>v0.2.2</tt></i> Merge <a>Data.Name</a> and
--   <a>Data.Name.TH</a>.</li>
--   <li><i><tt>v0.2.3</tt></i> Added basic Documentation.</li>
--   <li><i><tt>v0.3</tt></i> Reintroduced Unicode for names. Added
--   <tt>Name</tt> type class. TH is not used internally anymore.</li>
--   <li><i><tt>v0.3.1</tt></i> Name resolution enhanced via Template
--   Haskell, added <tt>names</tt> macro.</li>
--   </ul>
@package names
@version 0.3.1


-- | Type level names.
--   
--   Names are like strings on the type level. This is a name:
--   
--   <pre>
--   H :&amp; E :&amp; L :&amp; L :&amp; O :&amp; W_ :&amp; O :&amp; R :&amp; L :&amp; D
--   </pre>
--   
--   This package provides types which can be used as letters and a cons
--   operator (<tt>:&amp;</tt>). It also provides syntactic sugar for using
--   names via template haskell:
--   
--   <pre>
--   name "helloWorld"
--   </pre>
--   
--   This will create a value named <tt>helloWorld</tt> which has the above
--   type and can be used to work with the name.
--   
--   Names are useful for named records. See the <tt>named-records</tt>
--   package.
module Data.Name
data (:&) a b
class Show a => Name a where nameOf = show
nameOf :: Name a => a -> String
name :: String -> Q [Dec]
nameT :: String -> Q Type
nameV :: String -> Q Exp
names :: Names' a => a
data U0 a b c d
data U1 a b c d
data U2 a b c d
data U3 a b c d
data U4 a b c d
data U5 a b c d
data U6 a b c d
data U7 a b c d
data U8 a b c d
data U9 a b c d
data UA a b c d
data UB a b c d
data UC a b c d
data UD a b c d
data UE a b c d
data UF a b c d
data X0
data X1
data X2
data X3
data X4
data X5
data X6
data X7
data X8
data X9
data XA
data XB
data XC
data XD
data XE
data XF
data D0
data D1
data D2
data D3
data D4
data D5
data D6
data D7
data D8
data D9
data A
data B
data C
data D
data E
data F
data G
data H
data I
data J
data K
data L
data M
data N
data O
data P
data Q
data R
data S
data T
data U
data V
data W
data X
data Y
data Z
data A_
data B_
data C_
data D_
data E_
data F_
data G_
data H_
data I_
data J_
data K_
data L_
data M_
data N_
data O_
data P_
data Q_
data R_
data S_
data T_
data U_
data V_
data W_
data X_
data Y_
data Z_
__ :: t
instance Typeable2 :&
instance Typeable4 U0
instance Typeable4 U1
instance Typeable4 U2
instance Typeable4 U3
instance Typeable4 U4
instance Typeable4 U5
instance Typeable4 U6
instance Typeable4 U7
instance Typeable4 U8
instance Typeable4 U9
instance Typeable4 UA
instance Typeable4 UB
instance Typeable4 UC
instance Typeable4 UD
instance Typeable4 UE
instance Typeable4 UF
instance Typeable D0
instance Typeable D1
instance Typeable D2
instance Typeable D3
instance Typeable D4
instance Typeable D5
instance Typeable D6
instance Typeable D7
instance Typeable D8
instance Typeable D9
instance Typeable A_
instance Typeable B_
instance Typeable C_
instance Typeable D_
instance Typeable E_
instance Typeable F_
instance Typeable G_
instance Typeable H_
instance Typeable I_
instance Typeable J_
instance Typeable K_
instance Typeable L_
instance Typeable M_
instance Typeable N_
instance Typeable O_
instance Typeable P_
instance Typeable Q_
instance Typeable R_
instance Typeable S_
instance Typeable T_
instance Typeable U_
instance Typeable V_
instance Typeable W_
instance Typeable X_
instance Typeable Y_
instance Typeable Z_
instance Typeable A
instance Typeable B
instance Typeable C
instance Typeable D
instance Typeable E
instance Typeable F
instance Typeable G
instance Typeable H
instance Typeable I
instance Typeable J
instance Typeable K
instance Typeable L
instance Typeable M
instance Typeable N
instance Typeable O
instance Typeable P
instance Typeable Q
instance Typeable R
instance Typeable S
instance Typeable T
instance Typeable U
instance Typeable V
instance Typeable W
instance Typeable X
instance Typeable Y
instance Typeable Z
instance Typeable X0
instance Typeable X1
instance Typeable X2
instance Typeable X3
instance Typeable X4
instance Typeable X5
instance Typeable X6
instance Typeable X7
instance Typeable X8
instance Typeable X9
instance Typeable XA
instance Typeable XB
instance Typeable XC
instance Typeable XD
instance Typeable XE
instance Typeable XF
instance (Hex a, Hex b, Hex c, Hex d) => Name (UF a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (UE a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (UD a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (UC a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (UB a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (UA a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U9 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U8 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U7 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U6 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U5 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U4 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U3 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U2 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U1 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Name (U0 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (UF a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (UE a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (UD a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (UC a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (UB a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (UA a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U9 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U8 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U7 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U6 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U5 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U4 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U3 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U2 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U1 a b c d)
instance (Hex a, Hex b, Hex c, Hex d) => Show (U0 a b c d)
instance Hex XF
instance Hex XE
instance Hex XD
instance Hex XC
instance Hex XB
instance Hex XA
instance Hex X9
instance Hex X8
instance Hex X7
instance Hex X6
instance Hex X5
instance Hex X4
instance Hex X3
instance Hex X2
instance Hex X1
instance Hex X0
instance Name Z
instance Show Z
instance Name Y
instance Show Y
instance Name X
instance Show X
instance Name W
instance Show W
instance Name V
instance Show V
instance Name U
instance Show U
instance Name T
instance Show T
instance Name S
instance Show S
instance Name R
instance Show R
instance Name Q
instance Show Q
instance Name P
instance Show P
instance Name O
instance Show O
instance Name N
instance Show N
instance Name M
instance Show M
instance Name L
instance Show L
instance Name K
instance Show K
instance Name J
instance Show J
instance Name I
instance Show I
instance Name H
instance Show H
instance Name G
instance Show G
instance Name F
instance Show F
instance Name E
instance Show E
instance Name D
instance Show D
instance Name C
instance Show C
instance Name B
instance Show B
instance Name A
instance Show A
instance Name Z_
instance Show Z_
instance Name Y_
instance Show Y_
instance Name X_
instance Show X_
instance Name W_
instance Show W_
instance Name V_
instance Show V_
instance Name U_
instance Show U_
instance Name T_
instance Show T_
instance Name S_
instance Show S_
instance Name R_
instance Show R_
instance Name Q_
instance Show Q_
instance Name P_
instance Show P_
instance Name O_
instance Show O_
instance Name N_
instance Show N_
instance Name M_
instance Show M_
instance Name L_
instance Show L_
instance Name K_
instance Show K_
instance Name J_
instance Show J_
instance Name I_
instance Show I_
instance Name H_
instance Show H_
instance Name G_
instance Show G_
instance Name F_
instance Show F_
instance Name E_
instance Show E_
instance Name D_
instance Show D_
instance Name C_
instance Show C_
instance Name B_
instance Show B_
instance Name A_
instance Show A_
instance Name D9
instance Show D9
instance Name D8
instance Show D8
instance Name D7
instance Show D7
instance Name D6
instance Show D6
instance Name D5
instance Show D5
instance Name D4
instance Show D4
instance Name D3
instance Show D3
instance Name D2
instance Show D2
instance Name D1
instance Show D1
instance Name D0
instance Show D0
instance Names' a => Names' (String -> a)
instance Names' (Q [Dec])
instance (Name a, Name b) => Name (a :& b)
instance (Show a, Show b) => Show (a :& b)
