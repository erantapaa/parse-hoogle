-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Implementation of the Bitcoin network protocol messages
--   
--   This package provides all of the basic types used for the Bitcoin
--   networking protocol together with Data.Binary instances for
--   efficiently serializing and de-serializing them.
@package haskoin-protocol
@version 0.0.1


-- | This package provides all of the basic types used for the Bitcoin
--   networking protocol together with Data.Binary instances for
--   efficiently serializing and de-serializing them. More information on
--   the bitcoin protocol is available here:
--   <a>http://en.bitcoin.it/wiki/Protocol_specification</a>
module Network.Haskoin.Protocol

-- | Data type describing a block in the bitcoin protocol. Blocks are sent
--   in response to <tt>GetData</tt> messages that are requesting
--   information from a block hash.
data Block
Block :: !BlockHeader -> !CoinbaseTx -> ![Tx] -> Block

-- | Header information for this block
blockHeader :: Block -> !BlockHeader

-- | Coinbase transaction of this block
blockCoinbaseTx :: Block -> !CoinbaseTx

-- | List of transactions pertaining to this block
blockTxns :: Block -> ![Tx]

-- | Data type representing a GetBlocks message request. It is used in the
--   bitcoin protocol to retrieve blocks from a peer by providing it a
--   <a>BlockLocator</a> object. The <a>BlockLocator</a> is a sparse list
--   of block hashes from the caller node with the purpose of informing the
--   receiving node about the state of the caller's blockchain. The
--   receiver node will detect a wrong branch in the caller's main chain
--   and send the caller appropriate <tt>Blocks</tt>. The response to a
--   <a>GetBlocks</a> message is an <tt>Inv</tt> message containing the
--   list of block hashes pertaining to the request.
data GetBlocks
GetBlocks :: !Word32 -> !BlockLocator -> !Hash256 -> GetBlocks

-- | The protocol version
getBlocksVersion :: GetBlocks -> !Word32

-- | Block locator object. It is a list of block hashes from the most
--   recent block back to the genesis block. The list is dense at first and
--   sparse towards the end.
getBlocksLocator :: GetBlocks -> !BlockLocator

-- | Hash of the last desired block. If set to zero, the maximum number of
--   block hashes is returned (500).
getBlocksHashStop :: GetBlocks -> !Hash256

-- | Data type recording information on a <tt>Block</tt>. The hash of a
--   block is defined as the hash of this data structure. The block mining
--   process involves finding a partial hash collision by varying the nonce
--   in the <a>BlockHeader</a> and/or additional randomness in the
--   <tt>CoinbaseTx</tt> of this <tt>Block</tt>. Variations in the
--   <tt>CoinbaseTx</tt> will result in different merkle roots in the
--   <a>BlockHeader</a>.
data BlockHeader
BlockHeader :: !Word32 -> !Hash256 -> !Hash256 -> !Word32 -> !Word32 -> !Word32 -> BlockHeader

-- | Block version information, based on the version of the software
--   creating this block.
blockVersion :: BlockHeader -> !Word32

-- | Hash of the previous block (parent) referenced by this block.
prevBlock :: BlockHeader -> !Hash256

-- | Root of the merkle tree of all transactions pertaining to this block.
merkleRoot :: BlockHeader -> !Hash256

-- | Unix timestamp recording when this block was created
blockTimestamp :: BlockHeader -> !Word32

-- | The difficulty target being used for this block
blockBits :: BlockHeader -> !Word32

-- | A random nonce used to generate this block. Additional randomness is
--   included in the coinbase transaction of this block.
bhNonce :: BlockHeader -> !Word32

-- | Similar to the <tt>GetBlocks</tt> message type but for retrieving
--   block headers only. The response to a <a>GetHeaders</a> request is a
--   <tt>Headers</tt> message containing a list of block headers pertaining
--   to the request. A maximum of 2000 block headers can be returned.
--   <a>GetHeaders</a> is used by thin (SPV) clients to exclude block
--   contents when synchronizing the blockchain.
data GetHeaders
GetHeaders :: !Word32 -> !BlockLocator -> !Hash256 -> GetHeaders

-- | The protocol version
getHeadersVersion :: GetHeaders -> !Word32

-- | Block locator object. It is a list of block hashes from the most
--   recent block back to the Genesis block. The list is dense at first and
--   sparse towards the end.
getHeadersBL :: GetHeaders -> !BlockLocator

-- | Hash of the last desired block header. When set to zero, the maximum
--   number of block headers is returned (2000)
getHeadersHashStop :: GetHeaders -> !Hash256

-- | The <a>Headers</a> type is used to return a list of block headers in
--   response to a <tt>GetHeaders</tt> message.
data Headers
Headers :: ![BlockHeaderCount] -> Headers

-- | List of block headers with respective transaction counts
headersList :: Headers -> ![BlockHeaderCount]

-- | <a>BlockHeader</a> type with a transaction count as <a>VarInt</a>
type BlockHeaderCount = (BlockHeader, VarInt)

-- | The <a>GetData</a> type is used to retrieve information on a specific
--   object (<tt>Block</tt> or <tt>Tx</tt>) identified by the objects hash.
--   The payload of a <a>GetData</a> request is a list of <a>InvVector</a>
--   which represent all the hashes for which a node wants to request
--   information. The response to a <tt>GetBlock</tt> message wille be
--   either a <tt>Block</tt> or a <tt>Tx</tt> message depending on the type
--   of the object referenced by the hash. Usually, <a>GetData</a> messages
--   are sent after a node receives an <tt>Inv</tt> message to obtain
--   information on unknown object hashes.
data GetData
GetData :: ![InvVector] -> GetData

-- | List of object hashes
getDataList :: GetData -> ![InvVector]

-- | <a>Inv</a> messages are used by nodes to advertise their knowledge of
--   new objects by publishing a list of hashes. <a>Inv</a> messages can be
--   sent unsolicited or in response to a <tt>GetBlocks</tt> message.
data Inv
Inv :: ![InvVector] -> Inv

-- | Inventory vectors
invList :: Inv -> ![InvVector]

-- | Invectory vectors represent hashes identifying objects such as a
--   <tt>Block</tt> or a <tt>Tx</tt>. They are sent inside messages to
--   notify other peers about new data or data they have requested.
data InvVector
InvVector :: !InvType -> !Hash256 -> InvVector

-- | Type of the object referenced by this inventory vector
invType :: InvVector -> !InvType

-- | Hash of the object referenced by this inventory vector
invHash :: InvVector -> !Hash256

-- | Data type identifying the type of an inventory vector.
data InvType

-- | Error. Data containing this type can be ignored.
InvError :: InvType

-- | InvVector hash is related to a transaction
InvTx :: InvType

-- | InvVector hash is related to a block
InvBlock :: InvType

-- | A <a>NotFound</a> message is returned as a response to a
--   <tt>GetData</tt> message whe one of the requested objects could not be
--   retrieved. This could happen, for example, if a tranasaction was
--   requested and was not available in the memory pool of the receiving
--   node.
data NotFound
NotFound :: ![InvVector] -> NotFound

-- | Inventory vectors related to this request
notFoundList :: NotFound -> ![InvVector]

-- | Data type representing a transaction script. Scripts are defined as
--   lists of script operators <a>ScriptOp</a>. Scripts are used to:
--   
--   <ul>
--   <li>Define the spending conditions in the output of a transaction</li>
--   <li>Provide the spending signatures in the input of a transaction</li>
--   </ul>
data Script
Script :: [ScriptOp] -> Script

-- | List of script operators defining this script
scriptOps :: Script -> [ScriptOp]

-- | Data type representing all of the operators allowed inside a
--   <a>Script</a>.
data ScriptOp
OP_PUSHDATA :: ByteString -> ScriptOp
OP_0 :: ScriptOp
OP_1NEGATE :: ScriptOp
OP_1 :: ScriptOp
OP_2 :: ScriptOp
OP_3 :: ScriptOp
OP_4 :: ScriptOp
OP_5 :: ScriptOp
OP_6 :: ScriptOp
OP_7 :: ScriptOp
OP_8 :: ScriptOp
OP_9 :: ScriptOp
OP_10 :: ScriptOp
OP_11 :: ScriptOp
OP_12 :: ScriptOp
OP_13 :: ScriptOp
OP_14 :: ScriptOp
OP_15 :: ScriptOp
OP_16 :: ScriptOp
OP_VERIFY :: ScriptOp
OP_DUP :: ScriptOp
OP_EQUAL :: ScriptOp
OP_EQUALVERIFY :: ScriptOp
OP_HASH160 :: ScriptOp
OP_CHECKSIG :: ScriptOp
OP_CHECKMULTISIG :: ScriptOp
OP_PUBKEY :: PubKey -> ScriptOp
OP_INVALIDOPCODE :: Word8 -> ScriptOp

-- | Deserialize a list of <a>ScriptOp</a> inside the <a>Get</a> monad.
--   This deserialization does not take into account the length of the
--   script.
getScriptOps :: Get [ScriptOp]

-- | Serialize a list of <a>ScriptOp</a> inside the <a>Put</a> monad. This
--   serialization does not take into account the length of the script.
putScriptOps :: [ScriptOp] -> Put

-- | Decode a <a>Script</a> from a ByteString by omiting the length of the
--   script. This is used to produce scripthash addresses.
decodeScriptOps :: ByteString -> Either String Script

-- | Encode a <a>Script</a> into a ByteString by omiting the length of the
--   script. This is used to produce scripthash addresses.
encodeScriptOps :: Script -> ByteString

-- | Data type representing a bitcoin transaction
data Tx
Tx :: !Word32 -> ![TxIn] -> ![TxOut] -> !Word32 -> Tx

-- | Transaction data format version
txVersion :: Tx -> !Word32

-- | List of transaction inputs
txIn :: Tx -> ![TxIn]

-- | List of transaction outputs
txOut :: Tx -> ![TxOut]

-- | The block number of timestamp at which this transaction is locked
txLockTime :: Tx -> !Word32

-- | Computed the hash of a transaction.
txid :: Tx -> Hash256

-- | Data type representing the coinbase transaction of a <tt>Block</tt>.
--   Coinbase transactions are special types of transactions which are
--   created by miners when they find a new block. Coinbase transactions
--   have no inputs. They have outputs sending the newly generated bitcoins
--   together with all the block's fees to a bitcoin address (usually the
--   miners address). Data can be embedded in a Coinbase transaction which
--   can be chosen by the miner of a block. This data also typically
--   contains some randomness which is used, together with the nonce, to
--   find a partial hash collision on the block's hash.
data CoinbaseTx
CoinbaseTx :: !Word32 -> !ByteString -> ![TxOut] -> !Word32 -> CoinbaseTx

-- | Transaction data format version.
cbVersion :: CoinbaseTx -> !Word32

-- | Data embedded inside the coinbase transaction.
cbData :: CoinbaseTx -> !ByteString

-- | List of transaction outputs.
cbOut :: CoinbaseTx -> ![TxOut]

-- | The block number of timestamp at which this transaction is locked.
cbLockTime :: CoinbaseTx -> !Word32

-- | Data type representing a transaction input.
data TxIn
TxIn :: !OutPoint -> !Script -> !Word32 -> TxIn

-- | Reference the previous transaction output (hash + position)
prevOutput :: TxIn -> !OutPoint

-- | Script providing the requirements of the previous transaction output
--   to spend those coins.
scriptInput :: TxIn -> !Script

-- | Transaction version as defined by the sender of the transaction. The
--   intended use is for replacing transactions with new information before
--   the transaction is included in a block.
txInSequence :: TxIn -> !Word32

-- | Data type representing a transaction output.
data TxOut
TxOut :: !Word64 -> !Script -> TxOut

-- | Transaction output value.
outValue :: TxOut -> !Word64

-- | Script specifying the conditions to spend this output.
scriptOutput :: TxOut -> !Script

-- | The OutPoint is used inside a transaction input to reference the
--   previous transaction output that it is spending.
data OutPoint
OutPoint :: !Hash256 -> !Word32 -> OutPoint

-- | The hash of the referenced transaction.
outPointHash :: OutPoint -> !Hash256

-- | The position of the specific output in the transaction. The first
--   output position is 0.
outPointIndex :: OutPoint -> !Word32

-- | Encodes a transaction hash as little endian in HEX format. This is
--   mostly used for displaying transaction ids. Internally, these ids are
--   handled as big endian but are transformed to little endian when
--   displaying them.
encodeTxid :: Hash256 -> String

-- | Decodes a little endian transaction hash in HEX format.
decodeTxid :: String -> Maybe Hash256

-- | Data type representing a variable length integer. The <a>VarInt</a>
--   type usually precedes an array or a string that can vary in length.
newtype VarInt
VarInt :: Word64 -> VarInt
getVarInt :: VarInt -> Word64

-- | Data type for variable length strings. Variable length strings are
--   serialized as a <a>VarInt</a> followed by a bytestring.
newtype VarString
VarString :: ByteString -> VarString
getVarString :: VarString -> ByteString

-- | Data type describing a bitcoin network address. Addresses are stored
--   in IPv6. IPv4 addresses are mapped to IPv6 using IPv4 mapped IPv6
--   addresses:
--   <a>http://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses</a>.
--   Sometimes, timestamps are sent together with the <a>NetworkAddress</a>
--   such as in the <tt>Addr</tt> data type.
data NetworkAddress
NetworkAddress :: !Word64 -> !(Word64, Word64) -> !Word16 -> NetworkAddress

-- | Bitmask of services available for this address
naServices :: NetworkAddress -> !Word64

-- | IPv6 address serialized as big endian
naAddress :: NetworkAddress -> !(Word64, Word64)

-- | Port number serialized as big endian
naPort :: NetworkAddress -> !Word16

-- | Provides information on known nodes in the bitcoin network. An
--   <a>Addr</a> type is sent inside a <tt>Message</tt> as a response to a
--   <tt>GetAddr</tt> message.
data Addr
Addr :: ![NetworkAddressTime] -> Addr
addrList :: Addr -> ![NetworkAddressTime]

-- | Network address with a timestamp
type NetworkAddressTime = (Word32, NetworkAddress)

-- | When a bitcoin node creates an outgoing connection to another node,
--   the first message it will send is a <a>Version</a> message. The other
--   node will similarly respond with it's own <a>Version</a> message.
data Version
Version :: !Word32 -> !Word64 -> !Word64 -> !NetworkAddress -> !NetworkAddress -> !Word64 -> !VarString -> !Word32 -> !Bool -> Version

-- | Protocol version being used by the node.
version :: Version -> !Word32

-- | Bitmask of features to enable for this connection.
services :: Version -> !Word64

-- | UNIX timestamp
timestamp :: Version -> !Word64

-- | Network address of the node receiving this message.
addrRecv :: Version -> !NetworkAddress

-- | Network address of the node sending this message.
addrSend :: Version -> !NetworkAddress

-- | Randomly generated identifying sent with every version message. This
--   nonce is used to detect connection to self.
verNonce :: Version -> !Word64

-- | User agent
userAgent :: Version -> !VarString

-- | The height of the last block received by the sending node.
startHeight :: Version -> !Word32

-- | Wether the remote peer should announce relaying transactions or not.
--   This feature is enabled since version &gt;= 70001. See BIP37 for more
--   details.
relay :: Version -> !Bool

-- | A Ping message is sent to bitcoin peers to check if a TCP/IP
--   connection is still valid.
newtype Ping
Ping :: Word64 -> Ping

-- | A random nonce used to identify the recipient of the ping request once
--   a Pong response is received.
pingNonce :: Ping -> Word64

-- | A Pong message is sent as a response to a ping message.
newtype Pong
Pong :: Word64 -> Pong

-- | When responding to a Ping request, the nonce from the Ping is copied
--   in the Pong response.
pongNonce :: Pong -> Word64

-- | Data type describing signed messages that can be sent between bitcoin
--   nodes to display important notifications to end users about the health
--   of the network.
data Alert
Alert :: !VarString -> !VarString -> Alert

-- | Alert payload.
alertPayload :: Alert -> !VarString

-- | ECDSA signature of the payload
alertSignature :: Alert -> !VarString

-- | The <a>Message</a> type is used to identify all the valid messages
--   that can be sent between bitcoin peers. Only values of type
--   <a>Message</a> will be accepted by other bitcoin peers as bitcoin
--   protocol messages need to be correctly serialized with message
--   headers. Serializing a <a>Message</a> value will include the
--   <a>MessageHeader</a> with the correct checksum value automatically. No
--   need to add the <a>MessageHeader</a> separately.
data Message
MVersion :: Version -> Message
MVerAck :: Message
MAddr :: Addr -> Message
MInv :: Inv -> Message
MGetData :: GetData -> Message
MNotFound :: NotFound -> Message
MGetBlocks :: GetBlocks -> Message
MGetHeaders :: GetHeaders -> Message
MTx :: Tx -> Message
MBlock :: Block -> Message
MHeaders :: Headers -> Message
MGetAddr :: Message
MPing :: Ping -> Message
MPong :: Pong -> Message
MAlert :: Alert -> Message

-- | Data type representing the header of a <tt>Message</tt>. All messages
--   sent between nodes contain a message header.
data MessageHeader
MessageHeader :: !Word32 -> !MessageCommand -> !Word32 -> !CheckSum32 -> MessageHeader

-- | Network magic bytes. It is used to differentiate messages meant for
--   different bitcoin networks, such as prodnet and testnet.
headMagic :: MessageHeader -> !Word32

-- | Message command identifying the type of message. included in the
--   payload.
headCmd :: MessageHeader -> !MessageCommand

-- | Byte length of the payload.
headPayloadSize :: MessageHeader -> !Word32

-- | Checksum of the payload.
headChecksum :: MessageHeader -> !CheckSum32

-- | A <a>MessageCommand</a> is included in a <a>MessageHeader</a> in order
--   to identify the type of message present in the payload. This allows
--   the message de-serialization code to know how to decode a particular
--   message payload. Every valid <tt>Message</tt> constructor has a
--   corresponding <a>MessageCommand</a> constructor.
data MessageCommand
MCVersion :: MessageCommand
MCVerAck :: MessageCommand
MCAddr :: MessageCommand
MCInv :: MessageCommand
MCGetData :: MessageCommand
MCNotFound :: MessageCommand
MCGetBlocks :: MessageCommand
MCGetHeaders :: MessageCommand
MCTx :: MessageCommand
MCBlock :: MessageCommand
MCHeaders :: MessageCommand
MCGetAddr :: MessageCommand
MCPing :: MessageCommand
MCPong :: MessageCommand
MCAlert :: MessageCommand


-- | This package provides QuickCheck Arbitrary instances for all the
--   protocol data types defined in <a>Protocol</a>.
module Network.Haskoin.Protocol.Arbitrary
instance Arbitrary Message
instance Arbitrary MessageHeader
instance Arbitrary MessageCommand
instance Arbitrary Pong
instance Arbitrary Ping
instance Arbitrary NotFound
instance Arbitrary Headers
instance Arbitrary GetHeaders
instance Arbitrary GetData
instance Arbitrary GetBlocks
instance Arbitrary ScriptOp
instance Arbitrary Block
instance Arbitrary OutPoint
instance Arbitrary TxOut
instance Arbitrary TxIn
instance Arbitrary CoinbaseTx
instance Arbitrary Tx
instance Arbitrary Script
instance Arbitrary BlockHeader
instance Arbitrary Alert
instance Arbitrary Addr
instance Arbitrary Version
instance Arbitrary Inv
instance Arbitrary InvVector
instance Arbitrary InvType
instance Arbitrary NetworkAddress
instance Arbitrary VarString
instance Arbitrary VarInt
