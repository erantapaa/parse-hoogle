-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lock free Treiber stack
--   
@package Treiber
@version 0.0.4


-- | An implementation of Treiber stacks, a lock free stack. Works with any
--   monad that has atomically modificable references.
module Data.NonBlocking.LockFree.Treiber

-- | A lock-free concurrent Treiber stack usable in any <a>Monad</a>, m,
--   that is paired with a reference type, r, by an instance of
--   <a>MonadAtomicRef</a>. Can use Specializations <a>TreiberStackIO</a>
--   and <a>TreiberStackSTM</a>.
data TreiberStack r a

-- | TreiberStack inside the <a>IO</a> <a>Monad</a>.
type TreiberStackIO a = TreiberStack IORef a

-- | TreiberStack inside the <a>STM</a> <a>Monad</a>.
type TreiberStackSTM a = TreiberStack TVar a

-- | Creates a new empty instance of the <a>TreiberStack</a>. Internally
--   implemented with a reference of type r, which is why they must be
--   atomically modifiable. Initially empty.
newTreiberStack :: MonadAtomicRef r m => m (TreiberStack r a)

-- | Pushes an element on to a <a>TreiberStack</a> in a lock-free manner.
pushTreiberStack :: MonadAtomicRef r m => TreiberStack r a -> a -> m ()

-- | Pops an element of a <a>TreiberStack</a> in a lock-free manner.
--   Returns <a>Nothing</a> if the stack is empty.
popTreiberStack :: MonadAtomicRef r m => TreiberStack r a -> m (Maybe a)
instance Eq (TreiberElem r a)
