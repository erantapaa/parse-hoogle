-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | SHA hashes for io-streams.
--   
--   SHA hashes for io-streams.
@package sha-streams
@version 0.1.1

module System.IO.Streams.SHA
sha1Input :: InputStream ByteString -> IO (InputStream ByteString, IO (Digest SHA1State))
sha224Input :: InputStream ByteString -> IO (InputStream ByteString, IO (Digest SHA256State))
sha256Input :: InputStream ByteString -> IO (InputStream ByteString, IO (Digest SHA256State))
sha384Input :: InputStream ByteString -> IO (InputStream ByteString, IO (Digest SHA512State))
sha512Input :: InputStream ByteString -> IO (InputStream ByteString, IO (Digest SHA512State))
checkedSha1Input :: Digest SHA1State -> InputStream ByteString -> IO (InputStream ByteString)
checkedSha224Input :: Digest SHA256State -> InputStream ByteString -> IO (InputStream ByteString)
checkedSha256Input :: Digest SHA256State -> InputStream ByteString -> IO (InputStream ByteString)
checkedSha384Input :: Digest SHA512State -> InputStream ByteString -> IO (InputStream ByteString)
checkedSha512Input :: Digest SHA512State -> InputStream ByteString -> IO (InputStream ByteString)
checkedSha1Input' :: String -> InputStream ByteString -> IO (InputStream ByteString)
checkedSha224Input' :: String -> InputStream ByteString -> IO (InputStream ByteString)
checkedSha256Input' :: String -> InputStream ByteString -> IO (InputStream ByteString)
checkedSha384Input' :: String -> InputStream ByteString -> IO (InputStream ByteString)
checkedSha512Input' :: String -> InputStream ByteString -> IO (InputStream ByteString)

-- | Strict pairs.
data Pair a b
Pair :: !a -> !b -> Pair a b
uncurry' :: (a -> b -> c) -> Pair a b -> c

-- | Inspired by <a>countInput</a>. The returned IO action can be run only
--   when the input stream is exhausted, otherwise an error occurs.
shaInput :: Decoder a -> (Decoder a -> Int -> Digest a) -> InputStream ByteString -> IO (InputStream ByteString, IO (Digest a))

-- | This returns an input stream exactly as the one being wrapped, but
--   throws an error if the computed SHA hash does not match the one given.
checkedShaInput :: Decoder a -> (Decoder a -> Int -> Digest a) -> String -> InputStream ByteString -> IO (InputStream ByteString)

-- | Taken from System.IO.Streams.ByteString.
modifyRef :: IORef a -> (a -> a) -> IO ()

-- | Exception raised by <a>checkedShaInput</a>.
data UnmatchedSHAException
UnmatchedSHAException :: UnmatchedSHAException
instance Typeable UnmatchedSHAException
instance Exception UnmatchedSHAException
instance Show UnmatchedSHAException
