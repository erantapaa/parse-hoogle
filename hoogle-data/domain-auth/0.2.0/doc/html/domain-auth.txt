-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Domain authentication library
--   
--   Library for Sender Policy Framework, SenderID, DomainKeys and DKIM.
@package domain-auth
@version 0.2.0


-- | Type for Message Authentication Status
--   (<a>http://www.ietf.org/rfc/rfc5451.txt</a>).
module Network.DomainAuth.Types

-- | The result of domain authentication. For more information, see
--   <a>http://www.ietf.org/rfc/rfc5451.txt</a>.
data DAResult
DAPass :: DAResult
DAHardFail :: DAResult
DASoftFail :: DAResult
DANeutral :: DAResult
DAFail :: DAResult
DATempError :: DAResult
DAPermError :: DAResult
DANone :: DAResult
DAPolicy :: DAResult
DANxDomain :: DAResult
DADiscard :: DAResult
DAUnknown :: DAResult
instance Eq DAResult
instance Enum DAResult
instance Bounded DAResult
instance Show DAResult


-- | A library for SPF(<a>http://www.ietf.org/rfc/rfc4408</a>) and
--   Sender-ID(<a>http://www.ietf.org/rfc/rfc4406</a>).
module Network.DomainAuth.SPF

-- | Process SPF authentication. <a>IP</a> is an IP address of an SMTP
--   peer. If <a>Domain</a> is specified from SMTP MAIL FROM,
--   authentication is based on SPF. If <a>Domain</a> is specified from the
--   From field of mail header, authentication is based on SenderID. If
--   condition reaches <a>Limit</a>, <tt>SpfPermError</tt> is returned.
runSPF :: Limit -> Resolver -> Domain -> IP -> IO DAResult

-- | Limit for SPF authentication.
data Limit
Limit :: Int -> Int -> Int -> Bool -> Limit

-- | How many "redirect"/"include" should be followed.
limit :: Limit -> Int

-- | Ignoring IPv4 range whose mask length is shorter than this.
ipv4_masklen :: Limit -> Int

-- | Ignoring IPv6 range whose mask length is shorter than this.
ipv6_masklen :: Limit -> Int

-- | Whether or not "+all" is rejected.
reject_plus_all :: Limit -> Bool

-- | Default <a>Limit</a>. <a>limit</a> is 10. <a>ipv4_masklen</a> is 16.
--   <a>ipv6_masklen</a> is 48. <a>reject_plus_all</a> is <a>True</a>.
defaultLimit :: Limit


-- | A library to parse e-mail messages both from a file and
--   Milter(<a>https://www.milter.org/</a>).
module Network.DomainAuth.Mail

-- | Type for raw e-mail message.
type RawMail = ByteString

-- | Field key for raw e-mail message.
type RawFieldKey = ByteString

-- | Field value for raw e-mail message.
type RawFieldValue = ByteString

-- | Body chunk for raw e-mail message.
type RawBodyChunk = ByteString

-- | Type for parsed e-mail message.
data Mail
Mail :: Header -> Body -> Mail
mailHeader :: Mail -> Header
mailBody :: Mail -> Body

-- | Header type for parsed e-mail message.
type Header = [Field]

-- | Field type for parsed e-mail message.
data Field
Field :: CanonFieldKey -> FieldKey -> FieldValue -> Field
fieldSearchKey :: Field -> CanonFieldKey
fieldKey :: Field -> FieldKey
fieldValue :: Field -> FieldValue

-- | Type for canonicalized field key of parsed e-mail message.
type CanonFieldKey = ByteString

-- | Type for field key of parsed e-mail message.
type FieldKey = ByteString

-- | Type for field value of parsed e-mail message.
type FieldValue = [ByteString]

-- | Type for body of parsed e-mail message.
type Body = Seq ByteString

-- | Canonicalizing <a>FieldKey</a> for search.
canonicalizeKey :: FieldKey -> CanonFieldKey

-- | Obtain <a>Mail</a> from a file.
readMail :: FilePath -> IO Mail

-- | Obtain <a>Mail</a> from <a>RawMail</a>.
getMail :: RawMail -> Mail

-- | Type for temporary data to parse e-mail message.
data XMail
XMail :: Header -> [RawBodyChunk] -> XMail
xmailHeader :: XMail -> Header
xmailBody :: XMail -> [RawBodyChunk]

-- | Initial value for <a>XMail</a>.
initialXMail :: XMail

-- | Storing field key and field value to the temporary data.
pushField :: RawFieldKey -> RawFieldValue -> XMail -> XMail

-- | Storing body chunk to the temporary data.
pushBody :: RawBodyChunk -> XMail -> XMail

-- | Converting <a>XMail</a> to <a>Mail</a>.
finalizeMail :: XMail -> Mail

-- | Looking up <a>Field</a> from <a>Header</a> with <a>FieldKey</a>.
lookupField :: FieldKey -> Header -> Maybe Field

-- | Obtaining the <a>Field</a> of <a>FieldKey</a> and all fields under
--   <a>FieldKey</a>.
fieldsFrom :: FieldKey -> Header -> Header

-- | Obtaining all fields under <a>FieldKey</a>.
fieldsAfter :: FieldKey -> Header -> Header

-- | Obtaining all fields with DKIM algorithm.
fieldsWith :: [CanonFieldKey] -> Header -> Header

-- | Obtaining folded (raw) field value.
fieldValueFolded :: Field -> RawFieldValue

-- | Obtaining unfolded (removing CRLF) field value.
fieldValueUnfolded :: Field -> RawFieldValue
isEmpty :: Body -> Bool

-- | Obtaining body.
fromBody :: Body -> Builder

-- | Obtaining body with a canonicalization function.
fromBodyWith :: (ByteString -> ByteString) -> Body -> Builder

-- | Removing trailing empty lines.
removeTrailingEmptyLine :: Body -> Body

-- | Parsing field value of tag=value.
parseTaggedValue :: RawFieldValue -> [(ByteString, ByteString)]


-- | A library for DomainKeys (<a>http://www.ietf.org/rfc/rfc4070</a>).
--   Currently, only receiver side is implemented.
module Network.DomainAuth.DK

-- | Verifying <a>Mail</a> with DomainKeys.
runDK :: Resolver -> Mail -> IO DAResult

-- | Verifying <a>Mail</a> with DomainKeys. The value of
--   DomainKey-Signature: should be parsed beforehand.
runDK' :: Resolver -> Mail -> DK -> IO DAResult

-- | Parsing DomainKey-Signature:.
parseDK :: RawFieldValue -> Maybe DK

-- | Abstract type for DomainKey-Signature:
data DK

-- | Getting of the value of the "d" tag in DomainKey-Signature:.
dkDomain :: DK -> Domain

-- | Getting of the value of the "s" tag in DomainKey-Signature:.
dkSelector :: DK -> ByteString

-- | Canonicalized key for DomainKey-Signature:.
dkFieldKey :: CanonFieldKey


-- | A library for DKIM (<a>http://www.ietf.org/rfc/rfc4071</a>).
--   Currently, only receiver side is implemented.
module Network.DomainAuth.DKIM

-- | Verifying <a>Mail</a> with DKIM.
runDKIM :: Resolver -> Mail -> IO DAResult

-- | Verifying <a>Mail</a> with DKIM. The value of DKIM-Signature: should
--   be parsed beforehand.
runDKIM' :: Resolver -> Mail -> DKIM -> IO DAResult

-- | Parsing DKIM-Signature:.
parseDKIM :: RawFieldValue -> Maybe DKIM
data DKIM

-- | Getting of the value of the "d" tag in DKIM-Signature:.
dkimDomain :: DKIM -> Domain

-- | Getting of the value of the "s" tag in DKIM-Signature:.
dkimSelector :: DKIM -> ByteString

-- | Canonicalized key for DKIM-Signature:.
dkimFieldKey :: CanonFieldKey


-- | Utilities to decide Purported Responsible Domain
--   (<a>http://www.ietf.org/rfc/rfc4407</a>).
module Network.DomainAuth.PRD

-- | Abstract type for context to decide PRD(purported responsible domain)
--   according to RFC 4407.
data PRD

-- | Initial context of PRD.
initialPRD :: PRD

-- | Pushing a field key and its value in to the PRD context.
pushPRD :: RawFieldKey -> RawFieldValue -> PRD -> PRD

-- | Deciding PRD from the RPD context.
decidePRD :: PRD -> Maybe Domain

-- | Taking the value of From: from the RPD context.
decideFrom :: PRD -> Maybe Domain

-- | Extract a domain from a value of a header field.
extractDomain :: RawFieldValue -> Maybe Domain


-- | Library for Sender Policy Framework, SenderID, DomainKeys and DKIM.
module Network.DomainAuth
