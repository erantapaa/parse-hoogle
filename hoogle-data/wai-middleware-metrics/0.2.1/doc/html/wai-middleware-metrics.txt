-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A WAI middleware to collect EKG request metrics
--   
@package wai-middleware-metrics
@version 0.2.1


-- | A <a>WAI</a> middleware to collect the following <a>EKG</a> metrics
--   from compatible web servers:
--   
--   <ul>
--   <li>number of requests (counter <tt>wai.request_count</tt>)</li>
--   <li>number of server errors (counter
--   <tt>wai.server_error_count</tt>)</li>
--   <li>latency distribution (distribution
--   <tt>wai.latency_distribution</tt>)</li>
--   </ul>
--   
--   Here's an example of reading these metrics from a Scotty server, and
--   displaying them with EKG.
--   
--   <pre>
--   -- Compile with GHC option `-with-rtsopts=-T` for GC metrics
--   import Web.Scotty
--   import Control.Applicative
--   import System.Remote.Monitoring (serverMetricStore, forkServer)
--   import Network.Wai.Metrics
--   
--   main :: IO()
--   main = do
--     store &lt;- serverMetricStore &lt;$&gt; forkServer "localhost" 8000
--     waiMetrics &lt;- registerWaiMetrics store
--     scotty 3000 $ do
--       middleware (metrics waiMetrics)
--       get "/" $ html "Ping"
--   </pre>
--   
--   Now have a look at <a>your local EKG instance</a> and display the
--   request count by clicking on 'wai.request_count'.
--   
--   WAI metrics can also be stored in a bare EKG store, with no UI and no
--   GC metrics. Use ekg-core's newStore function.
--   
--   Compatible web servers include the following:
--   
--   <ul>
--   <li>Yesod</li>
--   <li>Scotty</li>
--   <li>Spock</li>
--   <li>Servant</li>
--   <li>Warp</li>
--   </ul>
module Network.Wai.Metrics

-- | Register in EKG a number of metrics related to web server activity.
--   
--   <ul>
--   <li><pre>wai.request_count</pre></li>
--   <li><pre>wai.server_error_count</pre></li>
--   <li><pre>wai.latency_distribution</pre></li>
--   </ul>
registerWaiMetrics :: Store -> IO WaiMetrics

-- | The metrics to feed in WAI and register in EKG.
data WaiMetrics
WaiMetrics :: Counter -> Counter -> Distribution -> WaiMetrics
requestCounter :: WaiMetrics -> Counter
serverErrorCounter :: WaiMetrics -> Counter
latencyDistribution :: WaiMetrics -> Distribution

-- | Create a middleware to be added to a WAI-based webserver.
metrics :: WaiMetrics -> Middleware
