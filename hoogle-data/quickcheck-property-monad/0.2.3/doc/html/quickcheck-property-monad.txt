-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | quickcheck-property-monad
--   
--   quickcheck-property-monad
@package quickcheck-property-monad
@version 0.2.3


-- | Tutorial:
--   <a>http://github.com/bennofs/quickcheck-property-monad/tree/master/README.md</a>
--   
--   Note about the examples: The examples use a <a>-</a> in place of the
--   empty line. This is required in order for doctest to work.
module Test.QuickCheck.Property.Monad

-- | PropM is a monad for writing properties that depend on random data.
--   This is especially useful if you have many invariants for your data
--   and cannot simply write an <tt>Arbitrary</tt> instance.
--   
--   You can use a <tt>PropM a</tt> as a QuickCheck Testable if <tt>a</tt>
--   is Testable. For example, you can use <tt>PropM Bool</tt> as a
--   Testable property:
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck (return True :: PropM Bool)
--   +++ OK, passed 100 tests.
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck (return False :: PropM Bool)
--   *** Failed! Falsifiable (after 1 test):
--   -
--   </pre>
data PropM a

-- | Assert that a certain condition is true. If the condition is false,
--   fail with the given error message.
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck $ assert "True is True!" True &gt;&gt; return True
--   +++ OK, passed 100 tests.
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck $ assert "False is True!" False &gt;&gt; return True
--   *** Failed! Falsifiable (after 1 test):
--   -
--   Assertion failed: False is True!
--   </pre>
assert :: String -> Bool -> PropM ()

-- | Fail with the given error message.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck $ failWith "Something horrible happened" &gt;&gt; return True
--   *** Failed! Falsifiable (after 1 test):
--   -
--   Something horrible happened
--   </pre>
failWith :: String -> PropM ()

-- | Use the given generator to generate a value.
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck $ fmap (`elem` [0..5]) $ gen (elements [0..5])
--   +++ OK, passed 100 tests.
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck $ fmap (&gt; 0) $ gen (choose (0,1))
--   *** Failed! Falsifiable (after 2 tests):
--   -
--   </pre>
gen :: Gen a -> PropM a

-- | Log a message that will be printed when the test case fails.
logMessage :: String -> PropM ()

-- | Like <a>logMessage</a> but appends a line break after the message.
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck $ gen (choose (0,1)) &gt;&gt;= \x -&gt; logMessageLn ("Chosen: " ++ show x) &gt;&gt; return (x &gt; 0)
--   *** Failed! Falsifiable (after 2 tests):
--   Chosen: 0
--   -
--   </pre>
logMessageLn :: String -> PropM ()
instance Functor PropM
instance Applicative PropM
instance Alternative PropM
instance Monad PropM
instance MonadPlus PropM
instance Testable a => Testable (PropM a)
