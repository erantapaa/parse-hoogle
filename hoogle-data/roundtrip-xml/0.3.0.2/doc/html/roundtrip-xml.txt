-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bidirectional (de-)serialization for XML.
--   
--   Roundtrip allows the definition of bidirectional (de-)serialization
--   specifications. This package provides concrete implementations of
--   these specifications for the serialization format XML. See the
--   roundtrip package for more details.
@package roundtrip-xml
@version 0.3.0.2

module Text.Roundtrip.Xml.Parser
data GenXmlParser s m a
type XmlParser a = GenXmlParser [RtEventWithPos] Identity a
runXmlParser :: XmlParser a -> SourceName -> EntityRenderer -> [Event] -> (Either ParseError a)
runXmlParser' :: XmlParser a -> EntityRenderer -> [EventWithPos] -> (Either ParseError a)
runXmlParser'' :: XmlParser a -> SourceName -> EntityRenderer -> [EventWithPos] -> (Either ParseError a)
data WithPos a
type EventWithPos = WithPos Event
eventWithPos :: a -> SourceName -> Line -> Column -> WithPos a
eventWithoutPos :: a -> WithPos a
type SourceName = String
type Line = Int
type Column = Int

-- | The abstract data type <tt>ParseError</tt> represents parse errors. It
--   provides the source position (<a>SourcePos</a>) of the error and a
--   list of error messages (<a>Message</a>). A <tt>ParseError</tt> can be
--   returned by the function <tt>Text.Parsec.Prim.parse</tt>.
--   <tt>ParseError</tt> is an instance of the <a>Show</a> class.
data ParseError :: *
type EntityRenderer = Text -> Maybe Text
defaultEntityRenderer :: EntityRenderer
runXmlParserString :: XmlParser a -> SourceName -> EntityRenderer -> String -> (Either ParseError a)
runXmlParserText :: XmlParser a -> SourceName -> EntityRenderer -> Text -> (Either ParseError a)
runXmlParserLazyText :: XmlParser a -> SourceName -> EntityRenderer -> Text -> (Either ParseError a)
runXmlParserByteString :: XmlParser a -> SourceName -> EntityRenderer -> ByteString -> (Either ParseError a)
runXmlParserLazyByteString :: XmlParser a -> SourceName -> EntityRenderer -> ByteString -> (Either ParseError a)
instance (Monad m, Stream s m RtEventWithPos) => XmlSyntax (GenXmlParser s m)
instance (Monad m, Stream s m RtEventWithPos) => Syntax (GenXmlParser s m)
instance (Monad m, Stream s m RtEventWithPos) => Alternative (GenXmlParser s m)
instance (Monad m, Stream s m RtEventWithPos) => ProductFunctor (GenXmlParser s m)
instance (Monad m, Stream s m RtEventWithPos) => IsoFunctor (GenXmlParser s m)

module Text.Roundtrip.Xml.Printer
data XmlPrinter a
runXmlPrinter :: XmlPrinter a -> a -> Maybe [Event]
runXmlPrinterByteString :: XmlPrinter a -> a -> Maybe ByteString
runXmlPrinterLazyByteString :: XmlPrinter a -> a -> Maybe ByteString
runXmlPrinterText :: XmlPrinter a -> a -> Maybe Text
runXmlPrinterLazyText :: XmlPrinter a -> a -> Maybe Text
runXmlPrinterString :: XmlPrinter a -> a -> Maybe String
instance Show PxEvent
instance XmlSyntax XmlPrinter
instance Syntax XmlPrinter
instance Alternative XmlPrinter
instance ProductFunctor XmlPrinter
instance IsoFunctor XmlPrinter

module Text.Roundtrip.Xml.Enumerator.Printer
data XmlPrinter a
xmlPrintEnumerator :: Monad m => XmlPrinter a -> a -> Enumerator Event m b
instance Typeable PrinterError
instance Show PrinterError
instance Exception PrinterError

module Text.Roundtrip.Xml

module Text.Roundtrip.Xml.Enumerator.Parser
type XmlParseIteratee r m a = GenXmlParser (Cursor r m RtEventWithPos) (Iteratee RtEventWithPos m) a
type PureXmlParseIteratee a = forall s. XmlParseIteratee (STRef s) (ST s) a
parseXml :: (Reference r m, Monad m) => SourceName -> EntityRenderer -> XmlParseIteratee r m a -> Iteratee Event m a
parseXml' :: (Reference r m, Monad m) => EntityRenderer -> XmlParseIteratee r m a -> Iteratee EventWithPos m a
parseXml'' :: (Reference r m, Monad m) => SourceName -> EntityRenderer -> XmlParseIteratee r m a -> Iteratee EventWithPos m a
data XmlException
ParseError :: ParseError -> XmlException
InvalidEntity :: Text -> SourcePos -> XmlException
instance Typeable XmlException
instance Show XmlException
instance Exception XmlException
instance (Monad m, Reference r m) => Stream (Cursor r m a) (Iteratee a m) a

module Text.Roundtrip.Xml.Enumerator
