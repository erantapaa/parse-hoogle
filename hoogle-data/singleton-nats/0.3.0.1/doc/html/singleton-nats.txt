-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Unary natural numbers relying on the singletons infrastructure.
--   
@package singleton-nats
@version 0.3.0.1

module Data.Nat
data Nat
Z :: Nat
S :: Nat -> Nat

-- | This is the plain value-level version of addition on Nats. There's
--   rarely a reason to use this; it's included for completeness.
natPlus :: Nat -> Nat -> Nat

-- | Similarly to <a>natPlus</a>, this one is included for completeness.
natMul :: Nat -> Nat -> Nat
type SNat (z_a6ID :: Nat) = Sing z_a6ID

-- | The singleton kind-indexed data family.
data (:*$) (l_a6If :: TyFun Nat (TyFun Nat Nat -> *))
data (:*$$) (l_a6Ii :: Nat) (l_a6Ih :: TyFun Nat Nat)
data (:+$) (l_a6I3 :: TyFun Nat (TyFun Nat Nat -> *))
data (:+$$) (l_a6I6 :: Nat) (l_a6I5 :: TyFun Nat Nat)
data SSym0 (l_a6HZ :: TyFun Nat Nat)
SSym0KindInference :: SSym0
type SSym1 (t_a6HY :: Nat) = S t_a6HY
type ZSym0 = Z
(%:+) :: Sing t_a6Ip -> Sing t_a6Iq -> Sing (Apply (Apply (:+$) t_a6Ip) t_a6Iq)
(%:*) :: Sing t_a6Ir -> Sing t_a6Is -> Sing (Apply (Apply (:*$) t_a6Ir) t_a6Is)

-- | Provides a shorthand for <a>Nat</a>-s using <a>GHC.TypeLits</a>, for
--   example:
--   
--   <pre>
--   &gt;&gt;&gt; :kind! Lit 3
--   Lit 3 :: Nat
--   = 'S ('S ('S 'Z))
--   </pre>
type SLit n = Sing (Lit n)
instance Eq Nat
instance Show Nat
instance Ord Nat
instance SingI n0 => SingI ('S n0)
instance SingI 'Z
instance SDecide 'KProxy
instance SEq 'KProxy
instance SingKind 'KProxy
instance SuppressUnusedWarnings (:*$)
instance SuppressUnusedWarnings (:*$$)
instance SuppressUnusedWarnings (:+$)
instance SuppressUnusedWarnings (:+$$)
instance SuppressUnusedWarnings SSym0
instance POrd 'KProxy
instance PEq 'KProxy
