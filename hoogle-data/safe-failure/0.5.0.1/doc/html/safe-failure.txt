-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library for safe functions
--   
--   Partial functions from the base library, such as <tt>head</tt> and
--   <tt>!!</tt>, modified to fail in a <tt>Failure</tt>. These functions
--   can be used to reduce the number of unsafe pattern matches in your
--   code.
@package safe-failure
@version 0.5.0.1


-- | A library for safe functions, based on standard functions that may
--   crash.
--   
--   This module reexports versions which produce exceptions in an
--   arbitrary <a>Failure</a>.
module Safe.Failure
head :: Failure HeadFailure m => [a] -> m a
tail :: Failure TailFailure m => [a] -> m [a]
init :: Failure InitFailure m => [a] -> m [a]
last :: Failure LastFailure m => [a] -> m a
minimum :: (Ord a, Failure MinimumFailure m) => [a] -> m a
maximum :: (Ord a, Failure MaximumFailure m) => [a] -> m a
foldr1 :: Failure Foldr1Failure m => (a -> a -> a) -> [a] -> m a
foldl1 :: Failure Foldl1Failure m => (a -> a -> a) -> [a] -> m a
at :: Failure IndexFailure m => [a] -> Int -> m a

-- | <pre>
--   lookupJust key = fromJust . lookup key
--   </pre>
lookup :: (Eq a, Failure (LookupFailure a) m) => a -> [(a, b)] -> m b
fromJust :: Failure FromJustFailure m => Maybe a -> m a
read :: (Read a, Failure ReadFailure m) => String -> m a

-- | <tt>def</tt>, use it to return a default value in the event of an
--   error.
--   
--   E.g. you can define a version of <tt>tail</tt> which returns a default
--   value when the list is empty
--   
--   <pre>
--   tailDef defaultValue = def defaultValue . tail
--   </pre>
def :: a -> Maybe a -> a

-- | <tt>note</tt>, use it to fail with an annotated runtime error
note :: Exception e => String -> Either e a -> a

-- | Assert a value to be true. If true, returns the first value as a
--   succss. Otherwise, returns the second value as a failure.
assert :: (Failure e m, Exception e) => Bool -> v -> e -> m v
data SafeException
SafeException :: e -> SafeException
data HeadFailure
HeadFailure :: HeadFailure
data TailFailure
TailFailure :: TailFailure
data InitFailure
InitFailure :: InitFailure
data LastFailure
LastFailure :: LastFailure
data MaximumFailure
MaximumFailure :: MaximumFailure
data MinimumFailure
MinimumFailure :: MinimumFailure
data Foldl1Failure
Foldl1Failure :: Foldl1Failure
data Foldr1Failure
Foldr1Failure :: Foldr1Failure
data IndexFailure
IndexFailure :: Int -> IndexFailure
data LookupFailure a
LookupFailure :: a -> LookupFailure a
data FromJustFailure
FromJustFailure :: FromJustFailure
data ReadFailure
ReadFailure :: String -> ReadFailure
instance Typeable SafeException
instance Typeable TailFailure
instance Typeable InitFailure
instance Typeable HeadFailure
instance Typeable LastFailure
instance Typeable MinimumFailure
instance Typeable MaximumFailure
instance Typeable Foldr1Failure
instance Typeable Foldl1Failure
instance Typeable FromJustFailure
instance Typeable IndexFailure
instance Typeable ReadFailure
instance Typeable1 LookupFailure
instance Show TailFailure
instance Show InitFailure
instance Show HeadFailure
instance Show LastFailure
instance Show MinimumFailure
instance Show MaximumFailure
instance Show Foldr1Failure
instance Show Foldl1Failure
instance Show FromJustFailure
instance Show IndexFailure
instance Show ReadFailure
instance Show a => Show (LookupFailure a)
instance (Typeable a, Show a) => Exception (LookupFailure a)
instance Exception ReadFailure
instance Exception IndexFailure
instance Exception FromJustFailure
instance Exception Foldl1Failure
instance Exception Foldr1Failure
instance Exception MaximumFailure
instance Exception MinimumFailure
instance Exception LastFailure
instance Exception HeadFailure
instance Exception InitFailure
instance Exception TailFailure
instance Exception SafeException
instance Show SafeException
