-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings for net-snmp's C API for clients
--   
@package NetSNMP
@version 0.3.1.0


-- | This is a binding to Net-SNMP version 5,
--   <a>http://www.net-snmp.org/</a>.
module Network.Protocol.NetSNMP

-- | Typed representation of atomic ASN.1 data types. Some types are
--   returned in more than one format for different uses. Some include a
--   descriptive string built by the underlying C library.
data ASNValue

-- | <tt>ASN_OCTET_STR</tt> Returned as a character string, and as opaque
--   data.
OctetString :: ByteString -> [Word8] -> ASNValue

-- | <tt>ASN_OBJECT_ID</tt> Returned as the C library's description, a
--   dotted-decimal string, and a numeric list
OID :: ByteString -> ByteString -> [Word32] -> ASNValue

-- | <tt>ASN_INTEGER</tt> 32bit signed
Integer32 :: Int32 -> ASNValue

-- | <tt>ASN_INTEGER64</tt> 64bit signed
Integer64 :: Int64 -> ASNValue

-- | <tt>ASN_COUNTER</tt> 32bit nondecreasing
Counter32 :: Word32 -> ASNValue

-- | <tt>ASN_COUNTER64</tt> 64bit nondecreasing
Counter64 :: Word64 -> ASNValue

-- | <tt>ASN_UNSIGNED</tt> 32bit unsigned
Unsigned32 :: Word32 -> ASNValue

-- | <tt>ASN_UNSIGNED64</tt> 64bit unsigned
Unsigned64 :: Word64 -> ASNValue

-- | <tt>ASN_GAUGE</tt> 32bit signed with min and max
Gauge32 :: Word32 -> ASNValue

-- | <tt>ASN_IPADDRESS</tt> IP address in string and numeric form. Example:
--   (IpAddress "1.2.3.4" [1,2,3,4])
IpAddress :: ByteString -> [Word8] -> ASNValue

-- | <tt>ASN_OPAQUE</tt> (Deprecated) application specific data. Use
--   OctetString instead.
Opaque :: [Word8] -> ASNValue

-- | <tt>ASN_TIMETICKS</tt> Time interval in 1/100 sec ticks. The C
--   library's description is returned along with the raw value.
TimeTicks :: ByteString -> Word32 -> ASNValue

-- | <tt>ASN_BOOLEAN</tt> Unimplemented.
Boolean :: Bool -> ASNValue

-- | <tt>ASN_FLOAT</tt> IEEE float. Unimplemented.
IEEEFloat :: Float -> ASNValue

-- | <tt>ASN_DOUBLE</tt> IEEE double. Unimplemented.
IEEEDouble :: Double -> ASNValue

-- | <tt>ASN_NULL</tt> Null value
Null :: ASNValue

-- | Unsupported type from an agent. Returns the numeric type and the C
--   library's description of the value.
Unsupported :: Int -> ByteString -> ASNValue

-- | An SNMP value together with its OID. Returned by the query routines
--   <a>snmpGet</a>, <a>snmpNext</a>, and <a>snmpWalk</a>.
data SnmpResult
SnmpResult :: RawOID -> ASNValue -> SnmpResult

-- | Dotted-decimal ObjectId of the value
oid :: SnmpResult -> RawOID

-- | Typed representation of the value
value :: SnmpResult -> ASNValue

-- | SNMP Protocol version. It is recommended to use the constants
--   <a>snmp_version_1</a>, <a>snmp_version_2c</a>, and
--   <a>snmp_version_3</a>.
newtype SnmpVersion
SnmpVersion :: CLong -> SnmpVersion

-- | Numeric version. Generally unneeded.
unSnmpVersion :: SnmpVersion -> CLong
type RawOID = [OIDpart]

-- | The net-snmp C library on 64-bit OS X systems still uses 32-bit oid
--   parts in the responses. Please make sure that the library produces
--   sane results on your system by cloning the source code and running
--   `make test`.
type OIDpart = Word64
type Hostname = ByteString
type Community = ByteString

-- | SNMPv1. The first SNMP standard, using cleartext passwords
--   ("communities")
snmp_version_1 :: SnmpVersion

-- | SNMPv2c. Updated SMI and wire protocol, but still uses communities.
snmp_version_2c :: SnmpVersion

-- | SNMPv3. Same SMI and protocol as SNMPv2c; stronger authentication.
--   Unimplemented.
snmp_version_3 :: SnmpVersion

-- | Initialize the Net-SNMP library. This must be called before any other
--   NetSNMP functions, and before starting extra threads, as the mib
--   compiler is not thread-safe.
initialize :: IO ()

-- | Simple community-authenticated SNMP get. Returns the object queried,
--   or a descriptive error message.
--   
--   Examples:
--   
--   <ul>
--   <li>snmpGet "localhost" "public" [1,3,6,1,2,1,1,1,0]</li>
--   <li>snmpGet "tcp:localhost:5161" "mypassword" [1,3,6,1,2,1,1,1,0]</li>
--   </ul>
snmpGet :: SnmpVersion -> Hostname -> Community -> RawOID -> IO (Either String SnmpResult)

-- | Simple community-authenticated SNMP getnext. Returns the first object
--   after the OID queried, or a descriptive error message.
--   
--   Examples:
--   
--   <ul>
--   <li>snmpNext "localhost" "public" [1,3,6,1,2,1,1,1,0]</li>
--   <li>snmpNext "tcp:localhost:5161" "mypassword"
--   [1,3,6,1,2,1,1,1,0]</li>
--   </ul>
snmpNext :: SnmpVersion -> Hostname -> Community -> RawOID -> IO (Either String SnmpResult)

-- | Simple community-authenticated SNMP walk. Returns a list of objects,
--   starting with the object after the OID queried, and continuing through
--   all objects underneath that OID in the mib tree. On failure, returns a
--   descriptive error message.
--   
--   This implementation uses a series of next operations and is not very
--   ressource friendly. Consider using snmpBulkWalk for better performance
--   
--   Examples:
--   
--   <ul>
--   <li>snmpWalk snmp_version_2c "localhost" "public" [1,3,6,1,2,1,1]</li>
--   <li>snmpWalk snmp_version_2c "tcp:localhost:5161" "mypassword"
--   [1,3,6,1,2,1,1]</li>
--   </ul>
snmpWalk :: SnmpVersion -> Hostname -> Community -> RawOID -> IO (Either String [SnmpResult])

-- | Same as snmpWalk but implemented with bulk requests
--   
--   Examples:
--   
--   <ul>
--   <li>snmpBulkWalk "localhost" "public" [1,3,6,1,2,1,1]</li>
--   <li>snmpBulkWalk "tcp:localhost:5161" "mypassword"
--   [1,3,6,1,2,1,1]</li>
--   </ul>
snmpBulkWalk :: Hostname -> Community -> RawOID -> IO (Either String [SnmpResult])

-- | Show ASNValue contents in a simple string, losing type
--   differentiation. Callers should not rely on the format of the message
--   returned, and this function may disappear in a future version.
showASNValue :: ASNValue -> String
instance Eq ASNValue
instance Show ASNValue
instance Eq SnmpResult
instance Show SnmpResult
instance Eq SnmpVersion
instance Show SnmpVersion
instance Monad Trouble
instance Functor Trouble
instance Storable SnmpPDU
instance Storable SnmpSession
