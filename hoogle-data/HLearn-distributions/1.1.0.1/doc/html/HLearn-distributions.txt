-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Distributions for use with the HLearn library
--   
--   This module is used to estimate statistical distributions from data.
--   It is based on the algebraic properties of the <a>HomTrainer</a> type
--   class from the HLearn-algebra package.
@package HLearn-distributions
@version 1.1.0.1


-- | This module provides convenient TemplateHaskell functions for making
--   type lens suitable for use with multivariate distributions.
--   
--   Given a data type that looks like:
--   
--   <pre>
--   data Character = Character
--       { _name      :: String
--       , _species   :: String
--       , _job       :: Job
--       , _isGood    :: Maybe Bool
--       , _age       :: Double -- in years
--       , _height    :: Double -- in feet
--       , _weight    :: Double -- in pounds
--       }
--       deriving (Read,Show,Eq,Ord)
--    
--   data Job = Manager | Crew | Henchman | Other
--       deriving (Read,Show,Eq,Ord)
--   </pre>
--   
--   when we run the command:
--   
--   <pre>
--   makeTypeLenses ''Character
--   </pre>
--   
--   We generate the following type lenses automatically:
--   
--   <pre>
--   data TH_name    = TH_name
--   data TH_species = TH_species
--   data TH_job     = TH_job
--   data TH_isGood  = TH_isGood
--   data TH_age     = TH_age
--   data TH_height  = TH_height
--   data TH_weight  = TH_weight
--   
--   instance TypeLens TH_name where
--       type instance TypeLensIndex TH_name = Nat1Box Zero
--   instance TypeLens TH_species where
--       type instance TypeLensIndex TH_species = Nat1Box (Succ Zero)
--   instance TypeLens TH_job where
--       type instance TypeLensIndex TH_job = Nat1Box (Succ (Succ Zero))
--   instance TypeLens TH_isGood where
--       type instance TypeLensIndex TH_isGood = Nat1Box (Succ (Succ (Succ Zero)))
--   instance TypeLens TH_age where
--       type instance TypeLensIndex TH_age = Nat1Box (Succ (Succ (Succ (Succ Zero))))
--   instance TypeLens TH_height where
--       type instance TypeLensIndex TH_height = Nat1Box (Succ (Succ (Succ (Succ (Succ Zero)))))
--   instance TypeLens TH_weight where
--       type instance TypeLensIndex TH_weight = Nat1Box (Succ (Succ (Succ (Succ (Succ (Succ Zero))))))
--           
--   instance Trainable Character where
--       type instance GetHList Character = HList '[String,String,Job,Maybe Bool, Double,Double,Double]
--       getHList var = name var:::species var:::job var:::isGood var:::age var:::height var:::weight var:::HNil
--   
--   instance MultivariateLabels Character where
--       getLabels dist = ["TH_name","TH_species","TH_job","TH_isGood","TH_age","TH_height","TH_weight"]
--   </pre>
module HLearn.Models.Distributions.Multivariate.Internal.TypeLens

-- | The Trainable class allows us to convert data types into an isomorphic
--   <a>HList</a>. All of our multivariate distributions work on
--   <a>HList</a>s, so they work on all instances of <a>Trainable</a> as
--   well.
class Trainable t where type family GetHList t
getHList :: Trainable t => t -> GetHList t

-- | This specifies a type level natural number (i.e. <a>Nat1</a>) that
--   indexes at the right location into our HList
class TypeLens i where type family TypeLensIndex i
class TypeFunction f where type family Domain f type family Range f
typefunc :: TypeFunction f => f -> Domain f -> Range f

-- | constructs the type lens
makeTypeLenses :: Name -> Q [Dec]

-- | given the name of one of our records, transform it into the name of
--   our type lens
nameTransform :: String -> String
instance Trainable (HList xs) => Trainable (HList ((':) * x xs))
instance Trainable (HList ('[] *))


-- | This list of kernels is take from wikipedia's:
--   <a>https://en.wikipedia.org/wiki/Uniform_kernel#Kernel_functions_in_common_use</a>
module HLearn.Models.Distributions.Kernels

-- | A kernel is function in one parameter that takes a value on the x axis
--   and spits out a <a>probability.</a> We create a data object for each
--   kernel, and a corresponding class to make things play nice with the
--   type system.
class Kernel kernel num
evalKernel :: Kernel kernel num => kernel -> num -> num

-- | A KernelBox is a universal object for storing kernels. Whatever kernel
--   it stores, it becomes a kernel with the same properties.
data KernelBox num
KernelBox :: kernel -> KernelBox num
data Uniform
Uniform :: Uniform
data Triangular
Triangular :: Triangular
data Epanechnikov
Epanechnikov :: Epanechnikov
data Quartic
Quartic :: Quartic
data Triweight
Triweight :: Triweight
data Tricube
Tricube :: Tricube
data Gaussian
Gaussian :: Gaussian
data Cosine
Cosine :: Cosine
instance Read Uniform
instance Show Uniform
instance Read Triangular
instance Show Triangular
instance Read Epanechnikov
instance Show Epanechnikov
instance Read Quartic
instance Show Quartic
instance Read Triweight
instance Show Triweight
instance Read Tricube
instance Show Tricube
instance Read Cosine
instance Show Cosine
instance Read Gaussian
instance Show Gaussian
instance (Floating num, Ord num) => Kernel Gaussian num
instance (Floating num, Ord num) => Kernel Cosine num
instance (Fractional num, Ord num) => Kernel Tricube num
instance (Fractional num, Ord num) => Kernel Triweight num
instance (Fractional num, Ord num) => Kernel Quartic num
instance (Fractional num, Ord num) => Kernel Epanechnikov num
instance (Fractional num, Ord num) => Kernel Triangular num
instance (Fractional num, Ord num) => Kernel Uniform num
instance NFData (KernelBox num)
instance Ord (KernelBox num)
instance Eq (KernelBox num)
instance Show (KernelBox num)
instance Kernel (KernelBox num) num


-- | This module contains the type classes for manipulating distributions.
--   
--   We use the same classes for both discrete and continuous
--   distributions. Unfortunately, we cannot use the type classes from the
--   <tt>statistics</tt> package because we require more flexibility than
--   they offer.
module HLearn.Models.Distributions.Common
class Probabilistic model where type family Probability model

-- | Technically, every distribution has a Cumulative Distribution Function
--   (CDF), and so this type class should be merged with the
--   <a>Distribution</a> type class. However, I haven't had a chance to
--   implement the CDF for most distributions yet, so this type class has
--   been separated out.
class Probabilistic dist => CDF dist
cdf :: CDF dist => dist -> Datapoint dist -> Probability dist
cdfInverse :: CDF dist => dist -> Probability dist -> Datapoint dist

-- | Not every distribution has a Probability Density Function (PDF),
--   however most distributions in the HLearn library do. For many
--   applications, the PDF is much more intuitive and easier to work with
--   than the CDF. For discrete distributions, this is often called a
--   Probability Mass Function (PMF); however, for simplicity we use the
--   same type class for both continuous and discrete data.
class Probabilistic dist => PDF dist
pdf :: PDF dist => dist -> Datapoint dist -> Probability dist
class HomTrainer dist => Mean dist
mean :: Mean dist => dist -> Datapoint dist
class Probabilistic dist => Variance dist
variance :: Variance dist => dist -> Probability dist

-- | If you were to plot a list of distributions, nonoverlap returns the
--   amount of area that only a single distribution covers. That is, it
--   will be equal to number of distributions - the overlap.
--   
--   This function is used by the HomTree classifier.
nonoverlap :: (Enum (Probability dist), Fractional (Probability dist), Ord (Probability dist), PDF dist, CDF dist) => [dist] -> Probability dist


-- | This module contains the functions for plotting distributions using
--   Gnuplot.
module HLearn.Models.Distributions.Visualization.Gnuplot

-- | Call this function to plot your distribution. You can create the
--   PlotParams manually, or you can use default parameter creating
--   function below.
plotDistribution :: PlottableDistribution dist => PlotParams -> dist -> IO ()
data PlotParams
PlotParams :: FilePath -> FilePath -> FilePath -> PicType -> PlotParams
dataFile :: PlotParams -> FilePath
gnuFile :: PlotParams -> FilePath
picFile :: PlotParams -> FilePath
picType :: PlotParams -> PicType
data PicType
PNG :: Int -> Int -> PicType
pngWidth :: PicType -> Int
pngHeight :: PicType -> Int
EPS :: PicType
plotFile :: String -> PicType -> PlotParams

-- | provided due to backwards compatibility with the nuclear weapons blog
--   post.
genPlotParams :: String -> a -> PlotParams

-- | In order to plot a distribution, it must be an instance of this class.
--   You shouldn't need to know the details.
class (Plottable (Datapoint dist), Plottable (Probability dist), Num (Probability dist), PDF dist, MaybeShow (Datapoint dist)) => PlottableDistribution dist where pdfL dist = map (pdf dist) $ samplePoints dist plotdata dist = mconcat [maybeshow (x :: Datapoint dist) ++ " " ++ show (pdf dist x :: Probability dist) ++ "" | x <- plotPoints] where plotPoints = samplePoints dist
samplePoints :: PlottableDistribution dist => dist -> [Datapoint dist]
plotType :: PlottableDistribution dist => dist -> PlotType
pdfL :: PlottableDistribution dist => dist -> [Probability dist]
plotdata :: PlottableDistribution dist => dist -> String
class (Show t, Ord t) => Plottable t
data PlotType
Bar :: PlotType
Points :: PlotType
Continuous :: PlotType
samplesFromMinMax :: (Enum b, Fractional b) => b -> b -> [b]
instance [overlap ok] Show a => MaybeShow a
instance [overlap ok] Show a => MaybeShow (Maybe a)
instance [overlap ok] (Show t, Ord t) => Plottable t


-- | The categorical distribution is used for discrete data. It is also
--   sometimes called the discrete distribution or the multinomial
--   distribution. For more, see the wikipedia entry:
--   <a>https://en.wikipedia.org/wiki/Categorical_distribution</a>
module HLearn.Models.Distributions.Univariate.Categorical
newtype Categorical prob label
Categorical :: Map label prob -> Categorical prob label

-- | Converts a distribution into a list of (sample,probability) pai
dist2list :: Categorical prob label -> [(label, prob)]

-- | Extracts the element in the distribution with the highest probability
mostLikely :: Ord prob => Categorical prob label -> label
instance (Show prob, Show label) => Show (Categorical prob label)
instance (Ord label, Read prob, Read label) => Read (Categorical prob label)
instance (Eq prob, Eq label) => Eq (Categorical prob label)
instance (Ord prob, Ord label) => Ord (Categorical prob label)
instance (Ord label, Show label, Ord prob, Show prob, Fractional prob) => PlottableDistribution (Categorical prob label)
instance (Num prob, Ord prob, Ord label) => Mean (Categorical prob label)
instance (Ord label, Ord prob, Fractional prob) => CDF (Categorical prob label)
instance (Ord label, Ord prob, Fractional prob) => PDF (Categorical prob label)
instance Probabilistic (Categorical prob label)
instance Num prob => NumDP (Categorical prob label)
instance (Ord label, Num prob) => HomTrainer (Categorical prob label)
instance (Num prob, Ord prob) => Monad (Categorical prob)
instance Functor (Categorical prob)
instance (Ord label, Num prob) => Module (Categorical prob label)
instance Num prob => HasRing (Categorical prob label)
instance (Ord label, Num prob) => Group (Categorical prob label)
instance (Ord label, Num prob) => Monoid (Categorical prob label)
instance (Ord label, Num prob) => Abelian (Categorical prob label)
instance (NFData label, NFData prob) => NFData (Categorical prob label)


-- | Adapts any distribution into one that can handle missing data
module HLearn.Models.Distributions.Univariate.Internal.MissingData
data MissingData (response :: MissResponse) (basedist :: * -> *) (prob :: *)
data MissResponse
Ignore :: MissResponse
instance Show (basedist prob) => Show (MissingData response basedist prob)
instance Read (basedist prob) => Read (MissingData response basedist prob)
instance Eq (basedist prob) => Eq (MissingData response basedist prob)
instance Ord (basedist prob) => Ord (MissingData response basedist prob)
instance Monoid (basedist prob) => Monoid (MissingData response basedist prob)
instance Group (basedist prob) => Group (MissingData response basedist prob)
instance (Probability (basedist prob) ~ prob, PDF (basedist prob), Num prob) => PDF (MissingData 'Ignore basedist prob)
instance Probabilistic (MissingData response basedist prob)
instance HomTrainer (basedist prob) => HomTrainer (MissingData response basedist prob)
instance Abelian (basedist prob) => Abelian (MissingData response basedist prob)


-- | Kernel Density Estimation (KDE) is a generic and powerful method for
--   estimating a probability distribution. See wikipedia for more
--   information:
--   <a>http://en.wikipedia.org/wiki/Kernel_density_estimation</a>
module HLearn.Models.Distributions.Univariate.KernelDensityEstimator

-- | The KDE type is implemented as an isomorphism with the FreeModule
newtype KDE kernel (h :: Nat) prob dp
KDE :: SortedVector dp -> KDE kernel prob dp
freemod :: KDE kernel prob dp -> SortedVector dp
instance Read dp => Read (KDE kernel h prob dp)
instance Show dp => Show (KDE kernel h prob dp)
instance Eq dp => Eq (KDE kernel h prob dp)
instance Ord dp => Ord (KDE kernel h prob dp)
instance NFData dp => NFData (KDE kernel h prob dp)
instance Ord dp => Monoid (KDE kernel h prob dp)
instance (Ord dp, Invertible dp) => Group (KDE kernel h prob dp)
instance Ord dp => Abelian (KDE kernel h prob dp)
instance (Kernel kernel prob, SingI Nat h, Fractional prob, prob ~ Ring (SortedVector prob), NumDP (SortedVector prob)) => PDF (KDE kernel h prob prob)
instance Probabilistic (KDE kernel h prob dp)
instance Functor (KDE kernel h prob)
instance (Num prob, Ord prob) => HomTrainer (KDE kernel h prob prob)
instance (Num prob, NumDP (SortedVector dp)) => NumDP (KDE kernel h prob dp)
instance Num (Ring (SortedVector dp)) => HasRing (KDE kernel h prob dp)

module HLearn.Models.Distributions.Multivariate.MultiNormal
newtype MultiNormal prob (xs :: [*])
MultiNormal :: (MultiNormalVec (Length xs) prob) -> MultiNormal prob
instance Module (MultiNormalVec (Length * xs) prob) => Module (MultiNormal prob xs)
instance Group (MultiNormalVec (Length * xs) prob) => Group (MultiNormal prob xs)
instance Abelian (MultiNormalVec (Length * xs) prob) => Abelian (MultiNormal prob xs)
instance Monoid (MultiNormalVec (Length * xs) prob) => Monoid (MultiNormal prob xs)
instance (Read prob, Unbox prob) => Read (MultiNormalVec n prob)
instance (Show prob, Unbox prob) => Show (MultiNormalVec n prob)
instance (Eq prob, Unbox prob) => Eq (MultiNormalVec n prob)
instance (Ord prob, Unbox prob) => Ord (MultiNormalVec n prob)
instance (Read prob, Unbox prob) => Read (MultiNormal prob xs)
instance (Show prob, Unbox prob) => Show (MultiNormal prob xs)
instance (Eq prob, Unbox prob) => Eq (MultiNormal prob xs)
instance (Ord prob, Unbox prob) => Ord (MultiNormal prob xs)
instance NFData (MultiNormal prob xs)
instance (HList2List (HList dpL) prob, Unbox prob, Floating prob, Field prob, Enum prob, SingI Nat (FromNat1 (Length1 * dpL)), Storable prob) => PDF (MultiNormal prob dpL)
instance (HList2List (HList dpL) prob, Unbox prob, Num prob, SingI Nat (FromNat1 (Length1 * dpL))) => Probabilistic (MultiNormal prob dpL)
instance (Unbox prob, SingI Nat k, Fractional prob, Enum prob, Storable prob) => Covariance (MultiNormalVec k prob)
instance (Unbox prob, SingI Nat k, Num prob) => Probabilistic (MultiNormalVec k prob)
instance Num prob => NumDP (MultiNormal prob xs)
instance (SingI Nat (Length * xs), Num prob, Unbox prob, HList2List (Datapoint (MultiNormal prob xs)) prob) => HomTrainer (MultiNormal prob xs)
instance (SingI Nat n, Num prob, Unbox prob) => HomTrainer (MultiNormalVec n prob)
instance Num prob => HasRing (MultiNormal prob xs)
instance (Num prob, Unbox prob, SingI Nat n) => Module (MultiNormalVec n prob)
instance Num prob => HasRing (MultiNormalVec n prob)
instance (Num prob, Unbox prob, SingI Nat n) => Group (MultiNormalVec n prob)
instance (Num prob, Unbox prob, SingI Nat n) => Monoid (MultiNormalVec n prob)
instance (Num prob, Unbox prob, SingI Nat n) => Abelian (MultiNormalVec n prob)
instance NFData (MultiNormalVec n prob)


-- | The method of moments can be used to estimate a number of commonly
--   used distributions. This module is still under construction as I work
--   out the best way to handle morphisms from the Moments3 type to types
--   of other distributions. For more information, see the wikipedia entry:
--   <a>https://en.wikipedia.org/wiki/Method_of_moments_(statistics)</a>
module HLearn.Models.Distributions.Univariate.Internal.Moments
data Moments3 prob
Moments3 :: !prob -> !prob -> !prob -> Moments3 prob
m0 :: Moments3 prob -> !prob
m1 :: Moments3 prob -> !prob
m2 :: Moments3 prob -> !prob
instance Num prob => NumDP (Moments3 prob)
instance Num prob => HomTrainer (Moments3 prob)
instance Num prob => Module (Moments3 prob)
instance Num prob => HasRing (Moments3 prob)
instance Num prob => Group (Moments3 prob)
instance Num prob => Monoid (Moments3 prob)
instance Num prob => Abelian (Moments3 prob)
instance Unbox a0 => Vector Vector (Moments3 a0)
instance Unbox a0 => MVector MVector (Moments3 a0)
instance Unbox a0 => Unbox (Moments3 a0)
instance Read prob => Read (Moments3 prob)
instance Show prob => Show (Moments3 prob)
instance Eq prob => Eq (Moments3 prob)
instance Ord prob => Ord (Moments3 prob)
instance NFData prob => NFData (Moments3 prob)

module HLearn.Models.Distributions.Univariate.Binomial
newtype Binomial prob dp
Binomial :: (Moments3 dp) -> Binomial prob dp
bmoments :: Binomial prob dp -> (Moments3 dp)
bin_n :: Binomial Double Int -> Int
bin_p :: Binomial Double Int -> Double
instance Read dp => Read (Binomial prob dp)
instance Show dp => Show (Binomial prob dp)
instance Eq dp => Eq (Binomial prob dp)
instance Ord dp => Ord (Binomial prob dp)
instance Num dp => Monoid (Binomial prob dp)
instance Num dp => Group (Binomial prob dp)
instance (PDF (Binomial prob dp), Show prob, Show dp, Ord dp, Ord prob, Num prob, Integral dp) => PlottableDistribution (Binomial prob dp)
instance Floating prob => PDF (Binomial Double Int)
instance Num dp => Probabilistic (Binomial prob dp)
instance Num dp => HomTrainer (Binomial prob dp)


-- | The method of moments can be used to estimate a number of commonly
--   used distributions. This module is still under construction as I work
--   out the best way to handle morphisms from the Moments3 type to types
--   of other distributions. For more information, see the wikipedia entry:
--   <a>https://en.wikipedia.org/wiki/Method_of_moments_(statistics)</a>
module HLearn.Models.Distributions.Univariate.Exponential
data Exponential prob dp
instance Read prob => Read (Exponential prob dp)
instance Show prob => Show (Exponential prob dp)
instance Eq prob => Eq (Exponential prob dp)
instance Ord prob => Ord (Exponential prob dp)
instance Num prob => Monoid (Exponential prob dp)
instance Num prob => Group (Exponential prob dp)
instance (Floating prob, Enum prob, Show prob, Ord prob) => PlottableDistribution (Exponential prob prob)
instance Fractional prob => Variance (Exponential prob prob)
instance Fractional prob => Mean (Exponential prob prob)
instance Floating prob => PDF (Exponential prob prob)
instance Num prob => Probabilistic (Exponential prob dp)
instance Num prob => HomTrainer (Exponential prob prob)


-- | The method of moments can be used to estimate a number of commonly
--   used distributions. This module is still under construction as I work
--   out the best way to handle morphisms from the Moments3 type to types
--   of other distributions. For more information, see the wikipedia entry:
--   <a>https://en.wikipedia.org/wiki/Method_of_moments_(statistics)</a>
module HLearn.Models.Distributions.Univariate.Geometric
data Geometric prob dp
instance Read dp => Read (Geometric prob dp)
instance Show dp => Show (Geometric prob dp)
instance Eq dp => Eq (Geometric prob dp)
instance Ord dp => Ord (Geometric prob dp)
instance Num dp => Monoid (Geometric prob dp)
instance Num dp => Group (Geometric prob dp)
instance (Integral dp, Fractional prob) => Variance (Geometric prob dp)
instance (Integral dp, RealFrac prob) => Mean (Geometric prob dp)
instance (PDF (Geometric prob dp), Show prob, Show dp, Ord dp, Ord prob, Fractional prob, RealFrac prob, Integral dp) => PlottableDistribution (Geometric prob dp)
instance (Integral dp, Floating prob) => PDF (Geometric prob dp)
instance Num dp => Probabilistic (Geometric prob dp)
instance Num dp => HomTrainer (Geometric prob dp)


-- | LogNormal
module HLearn.Models.Distributions.Univariate.LogNormal
data LogNormal prob dp
instance Read prob => Read (LogNormal prob dp)
instance Show prob => Show (LogNormal prob dp)
instance Eq prob => Eq (LogNormal prob dp)
instance Ord prob => Ord (LogNormal prob dp)
instance Num prob => Monoid (LogNormal prob dp)
instance Num prob => Group (LogNormal prob dp)
instance (Floating prob, Enum prob, Show prob, Ord prob) => PlottableDistribution (LogNormal prob prob)
instance (Show prob, Floating prob) => Variance (LogNormal prob prob)
instance Floating prob => Mean (LogNormal prob prob)
instance (Floating prob, Erf prob) => CDF (LogNormal prob prob)
instance Floating prob => PDF (LogNormal prob prob)
instance Probabilistic (LogNormal prob dp)
instance Floating prob => HomTrainer (LogNormal prob prob)


-- | The method of moments can be used to estimate a number of commonly
--   used distributions. This module is still under construction as I work
--   out the best way to handle morphisms from the Moments3 type to types
--   of other distributions. For more information, see the wikipedia entry:
--   <a>https://en.wikipedia.org/wiki/Method_of_moments_(statistics)</a>
module HLearn.Models.Distributions.Univariate.Normal
newtype Normal prob dp
Normal :: (Moments3 prob) -> Normal prob dp
instance Read prob => Read (Normal prob dp)
instance Show prob => Show (Normal prob dp)
instance Eq prob => Eq (Normal prob dp)
instance Ord prob => Ord (Normal prob dp)
instance Num prob => Monoid (Normal prob dp)
instance Num prob => Group (Normal prob dp)
instance Num prob => Abelian (Normal prob dp)
instance Num prob => Module (Normal prob dp)
instance Num prob => NumDP (Normal prob dp)
instance NFData prob => NFData (Normal prob dp)
instance (Floating prob, Enum prob, Show prob, Ord prob) => PlottableDistribution (Normal prob prob)
instance Fractional prob => Variance (Normal prob prob)
instance Fractional prob => Mean (Normal prob prob)
instance (Floating prob, Erf prob) => CDF (Normal prob prob)
instance Floating prob => PDF (Normal prob prob)
instance Num prob => Probabilistic (Normal prob dp)
instance Num prob => HasRing (Normal prob dp)
instance Num prob => HomTrainer (Normal prob prob)
instance Num prob => HomTrainer (Normal prob (Normal prob dp))


-- | The method of moments can be used to estimate a number of commonly
--   used distributions. This module is still under construction as I work
--   out the best way to handle morphisms from the Moments3 type to types
--   of other distributions. For more information, see the wikipedia entry:
--   <a>https://en.wikipedia.org/wiki/Method_of_moments_(statistics)</a>
module HLearn.Models.Distributions.Univariate.Poisson
data Poisson prob dp
instance Read dp => Read (Poisson prob dp)
instance Show dp => Show (Poisson prob dp)
instance Eq dp => Eq (Poisson prob dp)
instance Ord dp => Ord (Poisson prob dp)
instance Num dp => Monoid (Poisson prob dp)
instance Num dp => Group (Poisson prob dp)
instance (PDF (Poisson prob dp), Show prob, Show dp, Ord dp, Ord prob, Fractional prob, Integral dp) => PlottableDistribution (Poisson prob dp)
instance (Integral dp, Floating prob) => PDF (Poisson Double dp)
instance Num dp => Probabilistic (Poisson prob dp)
instance Num dp => HomTrainer (Poisson prob dp)


-- | Marginalization is a tricky procedure involving a lot of type hackery.
--   All user-facing interfaces use the <a>Marginalize</a> class, and all
--   internal interfaces use the <a>Marginalize'</a> class. Essentially,
--   <a>TypeLens</a> class converts the <a>Type lens</a> for our user's
--   data type into a type level number. The <a>Marginalize'</a> class then
--   takes this type number and uses it as an index into an appropriate
--   type list that represents the data type.
--   
--   The TemplateHaskell module has more info.
module HLearn.Models.Distributions.Multivariate.Internal.Marginalization
class (Marginalize' (TypeLensIndex index) dist, TypeLens index) => Marginalize index dist where type family Margin index dist type family MarginalizeOut index dist
getMargin :: Marginalize index dist => index -> dist -> Margin index dist
marginalizeOut :: Marginalize index dist => index -> dist -> MarginalizeOut index dist
condition :: Marginalize index dist => index -> Datapoint (Margin' (TypeLensIndex index) dist) -> dist -> MarginalizeOut' (TypeLensIndex index) dist
class Marginalize' index dist where type family Margin' index dist type family MarginalizeOut' index dist
getMargin' :: Marginalize' index dist => index -> dist -> Margin' index dist
marginalizeOut' :: Marginalize' index dist => index -> dist -> MarginalizeOut' index dist
condition' :: Marginalize' index dist => index -> dist -> Datapoint (Margin' index dist) -> MarginalizeOut' index dist
instance (Marginalize' (TypeLensIndex index) dist, TypeLens index) => Marginalize index dist

module HLearn.Models.Distributions.Multivariate.Internal.Unital
newtype Unital prob
Unital :: prob -> Unital prob
instance Read prob => Read (Unital prob)
instance Show prob => Show (Unital prob)
instance Eq prob => Eq (Unital prob)
instance Ord prob => Ord (Unital prob)
instance NFData prob => NFData (Unital prob)
instance Num prob => PDF (Unital prob)
instance Num prob => Probabilistic (Unital prob)
instance Num prob => NumDP (Unital prob)
instance Num prob => HomTrainer (Unital prob)
instance Num prob => Module (Unital prob)
instance Num prob => HasRing (Unital prob)
instance Num prob => Group (Unital prob)
instance Num prob => Monoid (Unital prob)
instance Num prob => Abelian (Unital prob)


-- | Used for ignoring data
module HLearn.Models.Distributions.Multivariate.Internal.Ignore
newtype Ignore' (label :: *) (basedist :: *) (prob :: *)
Ignore' :: basedist -> Ignore'
instance Show basedist => Show (Ignore' label basedist prob)
instance Read basedist => Read (Ignore' label basedist prob)
instance Eq basedist => Eq (Ignore' label basedist prob)
instance Ord basedist => Ord (Ignore' label basedist prob)
instance NFData basedist => NFData (Ignore' label basedist prob)
instance Marginalize' (Nat1Box n) basedist => Marginalize' (Nat1Box ('Succ n)) (Ignore' label basedist prob)
instance (Probability basedist ~ prob, HomTrainer (Ignore' label basedist prob), Datapoint (Ignore' label basedist prob) ~ HList dpL, Datapoint basedist ~ HList basedpL, PDF basedist) => PDF (Ignore' label basedist prob)
instance Probabilistic (Ignore' label basedist prob)
instance NumDP basedist => NumDP (Ignore' label basedist prob)
instance (HomTrainer basedist, Datapoint basedist ~ HList ys) => HomTrainer (Ignore' label basedist prob)
instance Module basedist => Module (Ignore' label basedist prob)
instance HasRing basedist => HasRing (Ignore' label basedist prob)
instance Group basedist => Group (Ignore' label basedist prob)
instance Monoid basedist => Monoid (Ignore' label basedist prob)
instance Abelian basedist => Abelian (Ignore' label basedist prob)


-- | The categorical distribution is used for discrete data. It is also
--   sometimes called the discrete distribution or the multinomial
--   distribution. For more, see the wikipedia entry:
--   <a>https://en.wikipedia.org/wiki/CatContainer_distribution</a>
module HLearn.Models.Distributions.Multivariate.Internal.CatContainer
data CatContainer label basedist prob
CatContainer :: !(Map label basedist) -> !(Map label prob) -> prob -> CatContainer label basedist prob
pdfmap :: CatContainer label basedist prob -> !(Map label basedist)
probmap :: CatContainer label basedist prob -> !(Map label prob)
catnumdp :: CatContainer label basedist prob -> prob
ds :: [HList (: * [Char] (: * Char (: * [Char] ([] *))))]
test :: CatContainer String (CatContainer Char (CatContainer String (Unital Double) Double) Double) Double
instance (Show label, Show basedist, Show prob) => Show (CatContainer label basedist prob)
instance (Ord label, Read label, Read basedist, Read prob) => Read (CatContainer label basedist prob)
instance (Eq label, Eq basedist, Eq prob) => Eq (CatContainer label basedist prob)
instance (Ord label, Ord basedist, Ord prob) => Ord (CatContainer label basedist prob)
instance (Marginalize' (Nat1Box n) basedist, Monoid basedist, PDF (Margin' (Nat1Box n) basedist), prob ~ Probability (Margin' (Nat1Box n) basedist), prob ~ Ring basedist, Module basedist, Ord label, Num prob) => Marginalize' (Nat1Box ('Succ n)) (CatContainer label basedist prob)
instance (NumDP basedist, Ring basedist ~ prob, Monoid basedist, HCons label (Datapoint basedist) ~ HList ((':) * label ts), Ord label) => Marginalize' (Nat1Box 'Zero) (CatContainer label basedist prob)
instance (Ord prob, Fractional prob, Show prob, Probability basedist ~ prob, Ord label, PDF basedist, Datapoint basedist ~ HList ys, Show (Datapoint basedist), Show label) => PDF (CatContainer label basedist prob)
instance Probabilistic (CatContainer label basedist prob)
instance Num prob => NumDP (CatContainer label basedist prob)
instance (Ord label, Num prob, HomTrainer basedist, Datapoint basedist ~ HList ys) => HomTrainer (CatContainer label basedist prob)
instance (Ord label, Num prob, Module basedist, Ring basedist ~ Ring (CatContainer label basedist prob)) => Module (CatContainer label basedist prob)
instance Num prob => HasRing (CatContainer label basedist prob)
instance (Ord label, Num prob, Group basedist) => Group (CatContainer label basedist prob)
instance (Ord label, Num prob, Monoid basedist) => Monoid (CatContainer label basedist prob)
instance (Ord label, Num prob, Monoid basedist) => Abelian (CatContainer label basedist prob)
instance (NFData label, NFData prob, NFData basedist) => NFData (CatContainer label basedist prob)

module HLearn.Models.Distributions.Multivariate.Internal.Container
data Container (dist :: * -> a -> *) (sample :: a) basedist (prob :: *)
data MultiContainer dist sample basedist prob
instance (Module (dist prob sample), Module basedist, Ring (dist prob sample) ~ Ring basedist) => Module (MultiContainer k dist sample basedist prob)
instance (Read basedist, Read (dist prob sample)) => Read (Container a dist sample basedist prob)
instance (Show basedist, Show (dist prob sample)) => Show (Container a dist sample basedist prob)
instance (Eq basedist, Eq (dist prob sample)) => Eq (Container a dist sample basedist prob)
instance (Ord basedist, Ord (dist prob sample)) => Ord (Container a dist sample basedist prob)
instance (Read basedist, Read (dist prob sample)) => Read (MultiContainer k dist sample basedist prob)
instance (Show basedist, Show (dist prob sample)) => Show (MultiContainer k dist sample basedist prob)
instance (Eq basedist, Eq (dist prob sample)) => Eq (MultiContainer k dist sample basedist prob)
instance (Ord basedist, Ord (dist prob sample)) => Ord (MultiContainer k dist sample basedist prob)
instance (Monoid basedist, Monoid (dist prob sample)) => Monoid (MultiContainer k dist sample basedist prob)
instance (Abelian basedist, Abelian (dist prob sample)) => Abelian (MultiContainer k dist sample basedist prob)
instance (Group basedist, Group (dist prob sample)) => Group (MultiContainer k dist sample basedist prob)
instance (NFData basedist, NFData (dist prob sample)) => NFData (MultiContainer k dist sample basedist prob)
instance (PDF (dist prob sample), PDF basedist, prob ~ Probability (dist prob sample), prob ~ Probability basedist, Num prob, Datapoint (dist prob sample) ~ HList dpL, Datapoint basedist ~ HList basedpL, HTake1 (Nat1Box (Length1 * dpL)) (HList ((++) * dpL basedpL)) (HList dpL), HDrop1 (Nat1Box (Length1 * dpL)) (HList ((++) * dpL basedpL)) (HList basedpL)) => PDF (MultiContainer k dist sample basedist prob)
instance Probabilistic (MultiContainer k dist sample basedist prob)
instance Marginalize' (Nat1Box n) basedist => Marginalize' (Nat1Box ('Succ n)) (Container k dist sample basedist prob)
instance Marginalize' (Nat1Box 'Zero) (Container * dist sample basedist prob)
instance (PDF (dist prob sample), PDF basedist, Probability (dist prob sample) ~ prob, Probability basedist ~ prob, Probabilistic (Container k dist sample basedist prob), Datapoint basedist ~ HList ys, Datapoint (dist prob sample) ~ y, Datapoint (Container k dist sample basedist prob) ~ HList ((':) * y ys), Num prob) => PDF (Container k dist sample basedist prob)
instance Probabilistic (Container k dist sample basedist prob)
instance (NumDP (dist prob sample), HasRing basedist, Ring basedist ~ Ring (dist prob sample)) => NumDP (MultiContainer k dist sample basedist prob)
instance (HomTrainer (dist prob sample), HomTrainer basedist, Datapoint (dist prob sample) ~ HList zs, Datapoint basedist ~ HList ys, HTake1 (Nat1Box (Length1 * zs)) (HList ((++) * zs ys)) (HList zs), HDrop1 (Nat1Box (Length1 * zs)) (HList ((++) * zs ys)) (HList ys)) => HomTrainer (MultiContainer k dist sample basedist prob)
instance (NumDP (dist prob sample), HasRing basedist, Ring basedist ~ Ring (dist prob sample)) => NumDP (Container k dist sample basedist prob)
instance (HomTrainer (dist prob sample), HomTrainer basedist, Datapoint basedist ~ HList ys) => HomTrainer (Container k dist sample basedist prob)
instance (Module (dist prob sample), Module basedist, Ring (dist prob sample) ~ Ring basedist) => Module (Container k dist sample basedist prob)
instance (HasRing (dist prob sample), HasRing basedist, Ring (dist prob sample) ~ Ring basedist) => HasRing (MultiContainer k dist sample basedist prob)
instance (HasRing (dist prob sample), HasRing basedist, Ring (dist prob sample) ~ Ring basedist) => HasRing (Container k dist sample basedist prob)
instance (Group (dist prob sample), Group basedist) => Group (Container k dist sample basedist prob)
instance (Monoid (dist prob sample), Monoid basedist) => Monoid (Container k dist sample basedist prob)
instance (Abelian (dist prob sample), Abelian basedist) => Abelian (Container k dist sample basedist prob)
instance (NFData (dist prob sample), NFData basedist) => NFData (Container k dist sample basedist prob)


-- | Used for Multivariate distributions
module HLearn.Models.Distributions.Multivariate.Interface

-- | this is the main type for specifying multivariate distributions
data Multivariate (dp :: *) (xs :: [[* -> * -> *]]) prob
instance NFData (MultivariateTF (Concat (* -> * -> *) xs) prob) => NFData (Multivariate dp xs prob)
instance Group (MultivariateTF (Concat (* -> * -> *) xs) prob) => Group (Multivariate dp xs prob)
instance Monoid (MultivariateTF (Concat (* -> * -> *) xs) prob) => Monoid (Multivariate dp xs prob)
instance Ord (MultivariateTF (Concat (* -> * -> *) xs) prob) => Ord (Multivariate dp xs prob)
instance Eq (MultivariateTF (Concat (* -> * -> *) xs) prob) => Eq (Multivariate dp xs prob)
instance Show (MultivariateTF (Concat (* -> * -> *) xs) prob) => Show (Multivariate dp xs prob)
instance Read (MultivariateTF (Concat (* -> * -> *) xs) prob) => Read (Multivariate dp xs prob)
instance (Marginalize' (Nat1Box n) (MultivariateTF (Concat (* -> * -> *) xs) prob), MarginalizeOut' (Nat1Box n) (MultivariateTF (Concat (* -> * -> *) xs) prob) ~ MultivariateTF (Concat (* -> * -> *) (Replace2D (* -> * -> *) n xs (Ignore' (Index * (HList2TypeList * (GetHList dp)) n)))) prob) => Marginalize' (Nat1Box n) (Multivariate dp xs prob)
instance (PDF (MultivariateTF (Concat (* -> * -> *) xs) prob), Probability (MultivariateTF (Concat (* -> * -> *) xs) prob) ~ prob, Datapoint (MultivariateTF (Concat (* -> * -> *) xs) prob) ~ GetHList dp, Trainable dp, HomTrainer (Multivariate dp xs prob)) => PDF (Multivariate dp xs prob)
instance Probabilistic (Multivariate dp xs prob)
instance (HomTrainer (MultivariateTF (Concat (* -> * -> *) xs) prob), Trainable dp, GetHList dp ~ Datapoint (MultivariateTF (Concat (* -> * -> *) xs) prob)) => HomTrainer (Multivariate dp xs prob)


-- | Displays Multivariate dependencies
module HLearn.Models.Distributions.Visualization.Graphviz
class Trainable datatype => MultivariateLabels datatype
getLabels :: MultivariateLabels datatype => datatype -> [String]
class MultivariateLabels (Datapoint dist) => MarkovNetwork dist where plotNetwork file dist = graphToDotPng file $ graphL dist $ getLabels (undefined :: Datapoint dist)
graphL :: MarkovNetwork dist => dist -> [String] -> [(String, [String])]
plotNetwork :: MarkovNetwork dist => FilePath -> dist -> IO Bool
instance (MultivariateLabels datapoint, SingI Nat (Length * labelL), MarkovNetwork (Multivariate datapoint ((':) [* -> * -> *] ys xs) prob)) => MarkovNetwork (Multivariate datapoint ((':) [* -> * -> *] ((':) (* -> * -> *) (MultiContainer [*] dist labelL) ys) xs) prob)
instance (MultivariateLabels datapoint, MarkovNetwork (Multivariate datapoint ((':) [* -> * -> *] ys xs) prob)) => MarkovNetwork (Multivariate datapoint ((':) [* -> * -> *] ((':) (* -> * -> *) (Container k dist label) ys) xs) prob)
instance (MultivariateLabels datapoint, MarkovNetwork (Multivariate datapoint ((':) [* -> * -> *] ys xs) prob)) => MarkovNetwork (Multivariate datapoint ((':) [* -> * -> *] ((':) (* -> * -> *) (CatContainer label) ys) xs) prob)
instance (MultivariateLabels datapoint, MarkovNetwork (Multivariate datapoint ((':) [* -> * -> *] ys xs) prob)) => MarkovNetwork (Multivariate datapoint ((':) [* -> * -> *] ((':) (* -> * -> *) (Ignore' label) ys) xs) prob)
instance (MultivariateLabels datapoint, MarkovNetwork (Multivariate datapoint xs prob)) => MarkovNetwork (Multivariate datapoint ((':) [* -> * -> *] ('[] (* -> * -> *)) xs) prob)
instance MultivariateLabels datapoint => MarkovNetwork (Multivariate datapoint ('[] [* -> * -> *]) prob)


-- | This file exports the most commonly used modules within
--   HLearn-distributions. Most likely this is the only file you will have
--   to import.
module HLearn.Models.Distributions
