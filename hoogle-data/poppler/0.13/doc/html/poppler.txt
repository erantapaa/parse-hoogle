-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding to the Poppler.
--   
@package poppler
@version 0.13


module Graphics.UI.Gtk.Poppler.Attachment
type AttachmentSave = String -> Int -> Bool
data Attachment
class GObjectClass o => AttachmentClass o

-- | Saves <tt>attachment</tt> to a file indicated by <tt>filename</tt>.
--   Return <a>True</a> if the file successfully saved
attachmentSave :: AttachmentClass attachment => attachment -> String -> IO Bool
attachmentSaveToCallback :: AttachmentClass attachment => attachment -> AttachmentSave -> IO Bool


module Graphics.UI.Gtk.Poppler.FormField
data FormField
class GObjectClass o => FormFieldClass o
data FormFieldType
FormFieldUnknown :: FormFieldType
FormFieldButton :: FormFieldType
FormFieldText :: FormFieldType
FormFieldChoice :: FormFieldType
FormFieldSignature :: FormFieldType
data FormButtonType
FormButtonPush :: FormButtonType
FormButtonCheck :: FormButtonType
FormButtonRadio :: FormButtonType
data FormChoiceType
FormChoiceCombo :: FormChoiceType
FormChoiceList :: FormChoiceType
data FormTextType
FormTextNormal :: FormTextType
FormTextMultiline :: FormTextType
FormTextFileSelect :: FormTextType

-- | Gets the id of field
formFieldGetId :: FormFieldClass field => field -> IO Int

-- | Gets the type of field
formFieldGetFieldType :: FormFieldClass field => field -> IO FormFieldType

-- | Checks whether field is read only
formFieldIsReadOnly :: FormFieldClass field => field -> IO Bool

-- | Gets the font size of field
formFieldGetFontSize :: FormFieldClass field => field -> IO Double

-- | Gets the button type of field
formFieldButtonGetButtonType :: FormFieldClass field => field -> IO FormButtonType

-- | Queries a <a>FormField</a> and returns its current state. Returns
--   <a>True</a> if field is pressed in and <a>False</a> if it is raised.
formFieldButtonGetState :: FormFieldClass field => field -> IO Bool

-- | Sets the status of field. Set to <a>True</a> if you want the
--   <a>FormField</a> to be 'pressed in', and <a>False</a> to raise it.
formFieldButtonSetState :: FormFieldClass field => field -> Bool -> IO ()

-- | Checks whether field allows multiple choices to be selected
formFieldChoiceCanSelectMultiple :: FormFieldClass field => field -> IO Bool
formFieldChoiceCommitOnChange :: FormFieldClass field => field -> IO Bool

-- | Checks whether spell checking should be done for the contents of field
formFieldChoiceDoSpellCheck :: FormFieldClass field => field -> IO Bool

-- | Gets the choice type of field
formFieldChoiceGetChoiceType :: FormFieldClass field => field -> IO FormChoiceType

-- | Returns the contents of the item on field at the given index
formFieldChoiceGetItem :: FormFieldClass field => field -> Int -> IO String

-- | Returns the number of items on field
formFieldChoiceGetNItems :: FormFieldClass field => field -> IO Int

-- | Retrieves the contents of field.
formFieldChoiceGetText :: FormFieldClass field => field -> IO String

-- | Checks whether field is editable
formFieldIsEditable :: FormFieldClass field => field -> IO Bool

-- | Checks whether the item at the given index on field is currently
--   selected
formFieldChoiceIsItemSelected :: FormFieldClass field => field -> Int -> IO Bool

-- | Selects the item at the given index on field
formFieldChoiceSelectItem :: FormFieldClass field => field -> Int -> IO ()
formFieldChoiceSetText :: FormFieldClass field => field -> String -> IO ()

-- | Toggles the item at the given index on field
formFieldChoiceToggleItem :: FormFieldClass field => field -> Int -> IO ()

-- | Unselects all the items on field
formFieldChoiceUnselectAll :: FormFieldClass field => field -> IO ()
formFieldTextDoScroll :: FormFieldClass field => field -> IO Bool

-- | Checks whether spell checking should be done for the contents of field
formFieldTextDoSpellCheck :: FormFieldClass field => field -> IO Bool

-- | Retrieves the maximum allowed length of the text in field
formFieldTextGetMaxLen :: FormFieldClass field => field -> IO Int

-- | Retrieves the contents of field.
formFieldTextGetText :: FormFieldClass field => field -> IO String

-- | Gets the text type of field
formFieldTextGetTextType :: FormFieldClass field => field -> IO FormTextType

-- | Checks whether content of field is a password and it must be hidden
formFieldTextIsPassword :: FormFieldClass field => field -> IO Bool

-- | Checks whether the contents of field are rich text
formFieldTextIsRichText :: FormFieldClass field => field -> IO Bool

-- | Sets the text in field to the given value, replacing the current
--   contents.
formFieldTextSetText :: FormFieldClass field => field -> String -> IO ()


module Graphics.UI.Gtk.Poppler.Layer
data Layer
class GObjectClass o => LayerClass o

-- | Returns the name of the layer suitable for presentation as a title in
--   a viewer's GUI
layerGetTitle :: LayerClass layer => layer -> IO String

-- | Returns whether layer is visible
layerIsVisible :: LayerClass layer => layer -> IO Bool

-- | Shows layer
layerShow :: LayerClass layer => layer -> IO ()

-- | Hides layer. If layer is the parent of other nested layers, such
--   layers will be also hidden and will be blocked until layer is shown
--   again
layerHide :: LayerClass layer => layer -> IO ()

-- | Returns whether layer is parent of other nested layers.
layerIsParent :: LayerClass layer => layer -> IO Bool

-- | Returns the numeric ID the radio button group associated with layer.
layerGetRadioButtonGroupId :: LayerClass layer => layer -> IO Int


module Graphics.UI.Gtk.Poppler.Page
data Cairo :: *

-- | Rectangles describing an area in <a>Double</a>s.
--   
--   <ul>
--   <li>Specifies x, y, width and height</li>
--   </ul>
data PopplerRectangle
PopplerRectangle :: Double -> Double -> Double -> Double -> PopplerRectangle
data PopplerColor
PopplerColor :: (Word16) -> (Word16) -> (Word16) -> PopplerColor
data ImageMapping
data PageTransition
data LinkMapping
data FormFieldMapping
data SelectionStyle
SelectionGlyph :: SelectionStyle
SelectionWord :: SelectionStyle
SelectionLine :: SelectionStyle

-- | Render the page to the given cairo context. This function is for
--   rendering a page that will be displayed. If you want to render a page
--   that will be printed use <tt>pageRenderForPrinting</tt> instead
pageRender :: PageClass page => page -> Render ()

-- | First scale the document to match the specified pixels per point, then
--   render the rectangle given by the upper left corner at (<tt>srcX</tt>,
--   <tt>srcY</tt>) and <tt>srcWidth</tt> and <tt>srcHeight</tt>. This
--   function is for rendering a page that will be displayed. If you want
--   to render a page that will be printed use
--   <tt>pageRenderToPixbufForPrinting</tt> instead
--   
--   Gets the size of page at the current scale and rotation.
pageGetSize :: PageClass page => page -> IO (Double, Double)

-- | Returns the index of page
pageGetIndex :: PageClass page => page -> IO Int

-- | Get the embedded thumbnail for the specified page. If the document
--   doesn't have an embedded thumbnail for the page, this function returns
--   <a>Nothing</a>.
pageGetThumbnail :: PageClass page => page -> IO (Maybe Surface)

-- | Returns <a>True</a> if page has a thumbnail associated with it. It
--   also fills in width and height with the width and height of the
--   thumbnail. The values of width and height are not changed if no
--   appropriate thumbnail exists.
pageGetThumbnailSize :: PageClass page => page -> IO (Maybe (Int, Int))

-- | Render the page on a postscript file
pageRenderToPs :: (PageClass page, PSFileClass psFile) => page -> psFile -> IO ()

-- | A GList of rectangles for each occurance of the text on the page. The
--   coordinates are in PDF points.
pageFindText :: PageClass page => page -> String -> IO [PopplerRectangle]

-- | Retrieves the contents of the specified selection as text.
pageGetText :: PageClass page => page -> IO String

-- | Returns the duration of page
pageGetDuration :: PageClass page => page -> IO Double

-- | Returns the transition effect of page
pageGetTransition :: PageClass page => page -> IO (Maybe PageTransition)

-- | Returns a list of <a>LinkMapping</a> items that map from a location on
--   page to a <a>Action</a>.
pageGetLinkMapping :: PageClass page => page -> IO [LinkMapping]

-- | Returns a list of <a>ImageMapping</a> items that map from a location
--   on page to a <a>Action</a>.
pageGetImageMapping :: PageClass page => page -> IO [ImageMapping]

-- | Returns a list of <a>FormFieldMapping</a> items that map from a
--   location on page to a <a>Action</a>.
pageGetFormFieldMapping :: PageClass page => page -> IO [FormFieldMapping]

-- | Returns a region containing the area that would be rendered by
--   <a>pageRenderSelection</a> or <tt>pageRenderSelectionToPixbuf</tt> as
--   a GList of PopplerRectangle.
pageGetSelectionRegion :: PageClass page => page -> Double -> SelectionStyle -> PopplerRectangle -> IO [PopplerRectangle]

-- | Render the selection specified by selection for page to the given
--   cairo context. The selection will be rendered, using
--   <tt>glyphColor</tt> for the glyphs and <tt>backgroundColor</tt> for
--   the selection background.
--   
--   If non-<a>Nothing</a>, <tt>oldSelection</tt> specifies the selection
--   that is already rendered to cairo, in which case this function will
--   (some day) only render the changed part of the selection.
pageRenderSelection :: PageClass page => page -> PopplerRectangle -> PopplerRectangle -> SelectionStyle -> PopplerColor -> PopplerColor -> Render ()


module Graphics.UI.Gtk.Poppler.Poppler
data Backend
BackendUnknown :: Backend
BackendSplash :: Backend
BackendCairo :: Backend

-- | Returns the backend compiled into the poppler library.
getBackend :: IO Backend

-- | Returns the version of poppler in use. This result is not to be freed.
getVersion :: IO String


module Graphics.UI.Gtk.Poppler.Action
data Action
data Dest

-- | Copies action, creating an identical <a>Action</a>.
actionCopy :: Action -> IO Action

-- | Copies dest, creating an identical <a>Dest</a>.
destCopy :: Dest -> IO Dest
makeNewAction :: Ptr Action -> IO Action
makeNewDest :: Ptr Dest -> IO Dest


module Graphics.UI.Gtk.Poppler.Document
data Document
class GObjectClass o => DocumentClass o
data Page
class GObjectClass o => PageClass o
data IndexIter
data FontsIter
class GObjectClass o => FontsIterClass o
data FontInfo
class GObjectClass o => FontInfoClass o
data Dest
data FormField
data Action
data PSFile
class GObjectClass o => PSFileClass o
data FontType
FontTypeUnknown :: FontType
FontTypeType1 :: FontType
FontTypeType1c :: FontType
FontTypeType1cot :: FontType
FontTypeType3 :: FontType
FontTypeTruetype :: FontType
FontTypeTruetypeot :: FontType
FontTypeCidType0 :: FontType
FontTypeCidType0c :: FontType
FontTypeCidType0cot :: FontType
FontTypeCidType2 :: FontType
FontTypeCidType2ot :: FontType
data PageLayout
PageLayoutUnset :: PageLayout
PageLayoutSinglePage :: PageLayout
PageLayoutOneColumn :: PageLayout
PageLayoutTwoColumnLeft :: PageLayout
PageLayoutTwoColumnRight :: PageLayout
PageLayoutTwoPageLeft :: PageLayout
PageLayoutTwoPageRight :: PageLayout
data PageMode
PageModeUnset :: PageMode
PageModeNone :: PageMode
PageModeUseOutlines :: PageMode
PageModeUseThumbs :: PageMode
PageModeFullScreen :: PageMode
PageModeUseOc :: PageMode
PageModeUseAttachments :: PageMode
data Permissions
PermissionsOkToPrint :: Permissions
PermissionsOkToModify :: Permissions
PermissionsOkToCopy :: Permissions
PermissionsOkToAddNotes :: Permissions
PermissionsOkToFillForm :: Permissions
PermissionsOkToExtractContents :: Permissions
PermissionsOkToAssemble :: Permissions
PermissionsOkToPrintHighResolution :: Permissions
PermissionsFull :: Permissions
data ViewerPreferences
ViewerPreferencesUnset :: ViewerPreferences
ViewerPreferencesHideToolbar :: ViewerPreferences
ViewerPreferencesHideMenubar :: ViewerPreferences
ViewerPreferencesHideWindowui :: ViewerPreferences
ViewerPreferencesFitWindow :: ViewerPreferences
ViewerPreferencesCenterWindow :: ViewerPreferences
ViewerPreferencesDisplayDocTitle :: ViewerPreferences
ViewerPreferencesDirectionRtl :: ViewerPreferences

-- | Creates a new <a>Document</a>. If <a>Nothing</a> is returned, then
--   error will be set. Possible errors include those in the <a>Error</a>
--   and GFileError domains.
documentNewFromFile :: String -> Maybe String -> IO (Maybe Document)

-- | Creates a new <a>Document</a>. If <a>Nothing</a> is returned, then
--   error will be set. Possible errors include those in the <a>Error</a>
--   and GFileError domains.
documentNewFromData :: String -> Maybe String -> IO (Maybe Document)

-- | Saves document. Any change made in the document such as form fields
--   filled by the user will be saved. If error is set, <a>False</a> will
--   be returned. Possible errors include those in the GFileError domain.
documentSave :: DocumentClass doc => doc -> String -> IO Bool

-- | Returns the number of pages in a loaded document.
documentGetNPages :: DocumentClass doc => doc -> IO Int

-- | Returns the <a>Page</a> indexed at index. This object is owned by the
--   caller. | <a>Page</a>s are indexed starting at 0.
documentGetPage :: DocumentClass doc => doc -> Int -> IO Page

-- | Returns the <a>Page</a> reference by label. This object is owned by
--   the caller. label is a human-readable string representation of the
--   page number, and can be document specific. Typically, it is a value
--   such as "iii" or "3".
--   
--   By default, "1" refers to the first page.
documentGetPageByLabel :: DocumentClass doc => doc -> String -> IO Page

-- | Finds named destination <tt>linkName</tt> in document
documentFindDest :: DocumentClass doc => doc -> String -> IO (Maybe Dest)

-- | Returns <a>True</a> of document has any attachments.
documentHasAttachments :: DocumentClass doc => doc -> IO Bool

-- | Returns a GList containing <a>Attachment</a>s.
documentGetAttachments :: DocumentClass doc => doc -> IO [Attachment]

-- | Returns the <a>FormField</a> for the given id.
documentGetFormField :: DocumentClass doc => doc -> Int -> IO (Maybe FormField)

-- | Returns the root <a>IndexIter</a> for document, or <a>Nothing</a>.
indexIterNew :: DocumentClass doc => doc -> IO (Maybe IndexIter)

-- | Creates a new <a>IndexIter</a> as a copy of iter.
indexIterCopy :: IndexIter -> IO IndexIter

-- | Returns a newly created child of parent, or <a>Nothing</a> if the iter
--   has no child. See <a>indexIterNew</a> for more information on this
--   function.
indexIterGetChild :: IndexIter -> IO (Maybe IndexIter)

-- | Returns whether this node should be expanded by default to the user.
--   The document can provide a hint as to how the document's index should
--   be expanded initially.
indexIterIsOpen :: IndexIter -> IO Bool

-- | Sets iter to point to the next action at the current level, if valid.
--   See <a>indexIterNew</a> for more information.
indexIterNext :: IndexIter -> IO Bool

-- | Returns the <a>Action</a> associated with iter.
indexIterGetAction :: IndexIter -> IO Action
fontInfoNew :: DocumentClass doc => doc -> IO FontInfo
fontsIterCopy :: FontsIterClass iter => iter -> IO FontsIter
fontsIterGetName :: FontsIterClass iter => iter -> IO String
fontsIterGetFullName :: FontsIterClass iter => iter -> IO String
fontsIterGetFontType :: FontsIterClass iter => iter -> IO FontType
fontsIterIsEmbedded :: FontsIterClass iter => iter -> IO Bool
fontsIterIsSubset :: FontsIterClass iter => iter -> IO Bool
fontsIterNext :: FontsIterClass iter => iter -> IO Bool

-- | Create a new postscript file to render to
psFileNew :: DocumentClass doc => doc -> String -> Int -> Int -> IO PSFile

-- | Set the output paper size. These values will end up in the
--   DocumentMedia, the BoundingBox DSC comments and other places in the
--   generated PostScript.
psFileSetPaperSize :: PSFileClass file => file -> Double -> Double -> IO ()

-- | Enable or disable Duplex printing.
psFileSetDuplex :: PSFileClass file => file -> Bool -> IO ()

-- | The author of the document.
--   
--   Default value: ""
documentAuthor :: DocumentClass doc => ReadAttr doc String

-- | The date and time the document was created.
--   
--   Allowed values: &gt;= 0
--   
--   Default value: 0
documentCreationDate :: DocumentClass doc => ReadAttr doc Int

-- | The software that created the document.
--   
--   Default value: ""
documentCreator :: DocumentClass doc => ReadAttr doc String

-- | The PDF version of the document.
--   
--   Default value: ""
documentFormat :: DocumentClass doc => ReadAttr doc String

-- | The PDF major version number of the document.
--   
--   Default value: 1
documentFormatMajor :: DocumentClass doc => ReadAttr doc String

-- | The PDF minor version number of the document.
--   
--   Default value: 0
documentFormatMinor :: DocumentClass doc => ReadAttr doc String

-- | Keywords.
--   
--   Default value: ""
documentKeywords :: DocumentClass doc => ReadAttr doc String

-- | Is the document optimized for web viewing?.
--   
--   Default value: ""
documentLinearized :: DocumentClass doc => ReadAttr doc String

-- | Embedded XML metadata.
--   
--   Default value: ""
documentMetadata :: DocumentClass doc => ReadAttr doc String

-- | The date and time the document was modified.
--   
--   Allowed values: &gt;= 0
--   
--   Default value: 0
documentModDate :: DocumentClass doc => ReadAttr doc Int

-- | Initial Page Layout.
--   
--   Default value: <a>PageLayoutUnset</a>
documentPageLayout :: DocumentClass doc => ReadAttr doc PageLayout

-- | Page Mode.
--   
--   Default value: <a>PageModeUnset</a>
documentPageMode :: DocumentClass doc => ReadAttr doc PageMode

-- | Permissions.
--   
--   Default value: <a>PermissionsFull</a>
documentPermissions :: DocumentClass doc => ReadAttr doc Permissions

-- | The software that converted the document.
--   
--   Default value: ""
documentProducer :: DocumentClass doc => ReadAttr doc String

-- | Subjects the document touches.
--   
--   Default value: ""
documentSubject :: DocumentClass doc => ReadAttr doc String

-- | The title of the document.
--   
--   Default value: ""
documentTitle :: DocumentClass doc => ReadAttr doc String

-- | Viewer Preferences.
documentViewerPreferences :: DocumentClass doc => ReadAttr doc ViewerPreferences

-- | The label of the page.
--   
--   Default value: ""
documentLabel :: DocumentClass doc => ReadAttr doc String
