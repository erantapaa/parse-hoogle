-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utility functions for creating servant 'Context's with "context/connection pooling" support
--   
--   Utility functions for creating servant <a>Context</a>s with
--   <a>context/connection pooling</a> support
--   
--   This package relies on the excellent <a>resource-pool</a> library.
@package servant-pool
@version 0.1


-- | Create <i>servant</i> <a>Context</a>s with pooling support using
--   <a>resource-pool</a>
module Servant.Context.Pool

-- | This is a handy function that lets you create the <a>Context</a> and
--   the <a>Pool</a> altogether. It just calls <a>createPool</a> and
--   applies <a>contextOfPool</a>.
pooledContext :: IO c -> (c -> IO ()) -> Int -> NominalDiffTime -> Int -> IO (Context c)

-- | Use this function to get a <a>Context</a> using a <a>Pool</a> you
--   already have around. Note that the type in the <a>Context</a> is not
--   <tt>Pool c</tt> but just <tt>c</tt>.
--   
--   It'll however use <a>withResource</a> under the hood to make a new
--   connection available. That means taking an unused one from the pool or
--   bringing a new one to life.
contextOfPool :: Pool c -> Context c

-- | This is a length of time, as measured by UTC. Conversion functions
--   will treat it as seconds. It has a precision of 10^-12 s. It ignores
--   leap-seconds, so it's not necessarily a fixed amount of clock time.
--   For instance, 23:00 UTC + 2 hours of NominalDiffTime = 01:00 UTC (+ 1
--   day), regardless of whether a leap-second intervened.
data NominalDiffTime :: *
