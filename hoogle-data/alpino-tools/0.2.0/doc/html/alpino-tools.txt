-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Alpino data manipulation tools
--   
--   Tools for manipulating data for the Alpino parser for Dutch.
@package alpino-tools
@version 0.2.0


-- | Data structures and functions to modify and process training data for
--   the Alpino parse disambiguation and fluency ranking components.
--   
--   Since the training data follows a very general format, this module and
--   submodules should also be usable for other parsers and generators.
--   Please refer to the description of <a>bsToTrainingInstance</a> for
--   more information about the format that is used.
module Data.Alpino.Model

-- | A feature and its corresponding value.
data FeatureValue
FeatureValue :: ByteString -> Double -> FeatureValue
feature :: FeatureValue -> ByteString
value :: FeatureValue -> Double

-- | A training instance.
data TrainingInstance
TrainingInstance :: TrainingInstanceType -> ByteString -> ByteString -> Double -> Features -> TrainingInstance

-- | Type of training instance
instanceType :: TrainingInstance -> TrainingInstanceType

-- | Training instance identifier
instanceKey :: TrainingInstance -> ByteString
instanceN :: TrainingInstance -> ByteString

-- | Quality score
instanceScore :: TrainingInstance -> Double

-- | Features
instanceFeatures :: TrainingInstance -> Features

-- | Type of training instance (parsing or generation).
data TrainingInstanceType
ParsingInstance :: TrainingInstanceType
GenerationInstance :: TrainingInstanceType

-- | Find the highest score of a context.
bestScore :: [TrainingInstance] -> Double

-- | Find the highest score of a context (strict).
bestScore' :: [TrainingInstance] -> Double

-- | Read a training instance from a <a>ByteString</a>.
--   
--   The bytestring is assumed to contain five fields separated by the hash
--   (<i>#</i>) character:
--   
--   <ol>
--   <li>An indicator for the type of training instance (<i>P</i> for parse
--   disambiguation, <i>G</i> for fluency ranking).</li>
--   <li>The identifier of the context (usually the identifier of a
--   sentence of logircal form).</li>
--   <li>Parse/generation number.</li>
--   <li>A quality score for this training instance.</li>
--   <li>A list of features and values. List elements are separated by the
--   vertical bar (<i>|</i>), and have the following form:
--   <i>value@feature</i></li>
--   </ol>
bsToTrainingInstance :: ByteString -> Maybe TrainingInstance

-- | Filter features by exact names. A modifier function can be applied,
--   for instance, the <a>not</a> function would exclude the specified
--   features.
filterFeatures :: (Bool -> Bool) -> Set ByteString -> TrainingInstance -> TrainingInstance

-- | Filter features by their functor. A modifier function can be applied,
--   for instance, the <a>not</a> function would exclude the specified
--   features.
filterFeaturesFunctor :: (Bool -> Bool) -> Set ByteString -> TrainingInstance -> TrainingInstance

-- | Extract a random sample from a list of instances.
randomSample :: MonadRandom m => Int -> [TrainingInstance] -> m [TrainingInstance]

-- | Convert the quality scores to binary scores. The instances with the
--   highest quality score get score <i>1.0</i>, other instances get score
--   <i>0.0</i>.
scoreToBinary :: [TrainingInstance] -> [TrainingInstance]

-- | Divide a score of <i>1.0</i> uniformly over instances with the highest
--   quality scores.
scoreToBinaryNorm :: [TrainingInstance] -> [TrainingInstance]

-- | Normalize scores over all training instances.
scoreToNorm :: [TrainingInstance] -> [TrainingInstance]

-- | Convert a training instance to a <a>ByteString</a>.
trainingInstanceToBs :: TrainingInstance -> ByteString
instance Show TrainingInstanceType
instance Eq TrainingInstanceType
instance Show FeatureValue
instance Eq FeatureValue
instance Show Features
instance Eq Features
instance Show TrainingInstance
instance Eq TrainingInstance

module Data.Alpino.Model.Conduit
addNewLine :: Monad m => Conduit ByteString m ByteString

-- | Retrieve the best score from a list of training instances.
bestScore :: Monad m => Conduit [TrainingInstance] m Double
concat :: Monad m => Conduit [a] m a

-- | Filter features by exact names. A modifier function can be applied,
--   for instance, the <a>not</a> function would exclude the specified
--   features.
filterFeatures :: Monad m => (Bool -> Bool) -> Set ByteString -> Conduit TrainingInstance m TrainingInstance

-- | Filter features by their functor. A modifier function can be applied,
--   for instance, the <a>not</a> function would exclude the specified
--   features.
filterFeaturesFunctor :: Monad m => (Bool -> Bool) -> Set ByteString -> Conduit TrainingInstance m TrainingInstance

-- | Group training instances by key.
groupByKey :: Monad m => Conduit TrainingInstance m [TrainingInstance]
randomSample :: MonadRandom m => Int -> Conduit [TrainingInstance] m [TrainingInstance]

-- | Conduit recaculating scores to binary scores (<i>1.0</i> for best,
--   <i>0.0</i> for the rest).
scoreToBinary :: Monad m => Conduit [TrainingInstance] m [TrainingInstance]

-- | Conduit recalculating scores, dividing a score of <i>1.0</i> uniformly
--   over instances with the highest quality score.
scoreToBinaryNorm :: Monad m => Conduit [TrainingInstance] m [TrainingInstance]

-- | Conduit that normalized instance scores over all instances in the
--   list.
scoreToNorm :: Monad m => Conduit [TrainingInstance] m [TrainingInstance]
bsToTrainingInstance :: MonadThrow m => Conduit ByteString m TrainingInstance

-- | Convert <tt>TrainingInstance</tt>s to <a>ByteString</a>s.
trainingInstanceToBS :: Monad m => Conduit TrainingInstance m ByteString
instance Typeable InvalidDataException
instance Show InvalidDataException
instance Exception InvalidDataException


-- | Definitions for Alpino dependency structures.
module Data.Alpino.DepStruct

-- | Alpino dependency structures define syntactic relations between words.
--   For convenience, the dependency structure is represented as a rose
--   tree. Additionally, the dependency structure contains the sentence
--   corresponding to the dependency structure.
data AlpinoDS
AlpinoDS :: Tree DSLabel -> String -> AlpinoDS

-- | Root of the dependency tree.
dsRoot :: AlpinoDS -> Tree DSLabel

-- | Sentence corresponding to the dependency tree.
dsSentence :: AlpinoDS -> String
data Cat
SMain :: Cat
NP :: Cat
PPart :: Cat
PPres :: Cat
PP :: Cat
SSub :: Cat
Inf :: Cat
Cp :: Cat
DU :: Cat
Ap :: Cat
AdvP :: Cat
TI :: Cat
Rel :: Cat
WhRel :: Cat
WhSub :: Cat
Conj :: Cat
WhQ :: Cat
Oti :: Cat
Ahi :: Cat
DetP :: Cat
SV1 :: Cat
SVan :: Cat
MWU :: Cat
TopCat :: Cat

-- | Label containing syntactic or lexical information of a node.
data DSLabel
CatLabel :: Rel -> Cat -> Maybe Integer -> Maybe Integer -> Maybe Integer -> DSLabel

-- | Dependency relation
--   
--   Category
labelRel :: DSLabel -> Rel

-- | Dependency relation
labelCat :: DSLabel -> Cat

-- | Coindexation
--   
--   Coindexation
labelIdx :: DSLabel -> Maybe Integer

-- | Start position
--   
--   Start position
labelBegin :: DSLabel -> Maybe Integer

-- | End position
--   
--   End position
labelEnd :: DSLabel -> Maybe Integer
LexLabel :: Rel -> String -> String -> Maybe Integer -> Maybe Integer -> Maybe Integer -> DSLabel

-- | Dependency relation
--   
--   Category
labelRel :: DSLabel -> Rel

-- | Part of speech tag
labelPos :: DSLabel -> String

-- | Root/stem
labelRoot :: DSLabel -> String

-- | Coindexation
--   
--   Coindexation
labelIdx :: DSLabel -> Maybe Integer

-- | Start position
--   
--   Start position
labelBegin :: DSLabel -> Maybe Integer

-- | End position
--   
--   End position
labelEnd :: DSLabel -> Maybe Integer
data Rel
Hdf :: Rel
Hd :: Rel
Cmp :: Rel
Sup :: Rel
Su :: Rel
Obj1 :: Rel
PObj1 :: Rel
Obj2 :: Rel
Se :: Rel
PC :: Rel
VC :: Rel
SVP :: Rel
PredC :: Rel
Ld :: Rel
Me :: Rel
PredM :: Rel
ObComp :: Rel
Mod :: Rel
Body :: Rel
Det :: Rel
App :: Rel
Whd :: Rel
Rhd :: Rel
Cnj :: Rel
Crd :: Rel
Nucl :: Rel
Sat :: Rel
Tag :: Rel
DP :: Rel
Top :: Rel
MWP :: Rel
DLink :: Rel
DashDash :: Rel
instance Eq Rel
instance Ord Rel
instance Show Rel
instance Eq Cat
instance Ord Cat
instance Show Cat
instance Show DSLabel
instance Eq DSLabel
instance Show AlpinoDS
instance Eq AlpinoDS


-- | Pickling and unpickling of Alpino dependency structures from XML.
module Data.Alpino.DepStruct.Pickle

-- | Pickler for Alpino dependency structures.
xpAlpinoDS :: PU [UNode String] AlpinoDS
instance Show LabelOrRef


-- | Definition and extraction of Alpino dependency triples.
module Data.Alpino.DepStruct.Triples

-- | The <a>DepTriple</a> type represents a dependency that occurs in a
--   dependency structure. The triple consists of the head, a dependent,
--   and the relation between the head and the dependeny. For convenience,
--   the triple is composed of two <a>DepTripleComponent</a> instances: the
--   first representing the head and its role in the relation, the second
--   representing the dependant and its role in the relation.
data DepTriple
DepTriple :: DepTripleComponent -> DepTripleComponent -> DepTriple
tripleHead :: DepTriple -> DepTripleComponent
tripleDep :: DepTriple -> DepTripleComponent

-- | The <a>DepTripleComponent</a> type represents a head or a dependant in
--   a dependency relation.
data DepTripleComponent
DepTripleComponent :: String -> String -> Rel -> DepTripleComponent
triplePos :: DepTripleComponent -> String
tripleRoot :: DepTripleComponent -> String
tripleRel :: DepTripleComponent -> Rel

-- | Extract <tt>DepTriples</tt> from the tree starting at the node
--   represented by the <a>TreePos</a> zipper.
depTriples :: TreePos Full DSLabel -> Set DepTriple

-- | Fold over a tree depth-first, starting at the node wrapped in the
--   <a>TreePos</a> zipper.
tzFold :: (a -> TreePos Full b -> a) -> a -> TreePos Full b -> a
instance Eq DepTripleComponent
instance Ord DepTripleComponent
instance Show DepTripleComponent
instance Eq DepTriple
instance Ord DepTriple
instance Show DepTriple
