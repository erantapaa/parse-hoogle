-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | streamlined html tag parser
--   
--   Tag-stream is a library for parsing HTML<i></i>XML to a token stream.
--   It can parse unstructured and malformed HTML from the web. It also
--   provides an Enumeratee which can parse streamline html, which means it
--   consumes constant memory. Users can start from the `tests/Tests.hs`
--   module to see what it can do.
@package tag-stream
@version 0.2.1

module Text.HTML.TagStream.Utils
peekByteOff' :: Storable a => ForeignPtr b -> Int -> a
cons' :: Word8 -> ByteString -> ByteString
cons :: Char -> ByteString -> ByteString
append :: ByteString -> ByteString -> ByteString

module Text.HTML.TagStream.Types
type Attr' s = (s, s)
type Attr = Attr' ByteString
data Token' s
TagOpen :: s -> [Attr' s] -> Bool -> Token' s
TagClose :: s -> Token' s
Text :: s -> Token' s
Comment :: s -> Token' s
Special :: s -> s -> Token' s
Incomplete :: s -> Token' s
data TagType
TagTypeClose :: TagType
TagTypeSpecial :: TagType
TagTypeNormal :: TagType
type Token = Token' ByteString
cc :: [ByteString] -> Builder
showToken :: (ByteString -> ByteString) -> Token -> Builder
encode :: [Token] -> ByteString
encodeHL :: (ByteString -> ByteString) -> [Token] -> ByteString
instance Eq s => Eq (Token' s)
instance Show s => Show (Token' s)

module Text.HTML.TagStream.Parser
quoted :: Char -> Parser ByteString
quotedOr :: Parser ByteString -> Parser ByteString
attrValue :: Parser ByteString
attrName :: Parser ByteString
tagEnd :: Parser Bool
attr :: Parser Attr
attrs :: Parser ([Attr], Bool)
comment :: Parser Token
special :: Parser Token
tag :: Parser Token
incomplete :: Parser Token
text :: Parser Token
token :: Parser Token
tillScriptEnd :: Token -> Parser [Token]
html :: Parser [Token]
decode :: ByteString -> Either String [Token]
atLeast :: Int -> Parser ByteString -> Parser ByteString
cond :: a -> a -> Bool -> a
(||.) :: Applicative f => f Bool -> f Bool -> f Bool
in2 :: Eq a => (a, a) -> a -> Bool
in3 :: Eq a => (a, a, a) -> a -> Bool
boolP :: Parser a -> Parser Bool
maybeP :: Parser a -> Parser (Maybe a)

module Text.HTML.TagStream.Stream
accumParse :: Monad m => ByteString -> ByteString -> m (ByteString, [Token])
tokenStream :: Monad m => Enumeratee ByteString Token m b

module Text.HTML.TagStream
tokenStream :: Monad m => Enumeratee ByteString Token m b
type Token = Token' ByteString
data Token' s
TagOpen :: s -> [Attr' s] -> Bool -> Token' s
TagClose :: s -> Token' s
Text :: s -> Token' s
Comment :: s -> Token' s
Special :: s -> s -> Token' s
Incomplete :: s -> Token' s
type Attr = Attr' ByteString
type Attr' s = (s, s)
showToken :: (ByteString -> ByteString) -> Token -> Builder
encode :: [Token] -> ByteString
encodeHL :: (ByteString -> ByteString) -> [Token] -> ByteString
decode :: ByteString -> Either String [Token]
