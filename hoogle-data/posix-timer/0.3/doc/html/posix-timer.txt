-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to POSIX clock and timer functions.
--   
--   This package provides bindings to POSIX clock and timer functions.
@package posix-timer
@version 0.3


-- | POSIX clocks.
module System.Posix.Clock

-- | Mirrors <i>struct timespec</i>.
data TimeSpec
timeSpecSeconds :: TimeSpec -> CTime
timeSpecNanos :: TimeSpec -> CULong

-- | Create a <a>TimeSpec</a> from amounts of seconds and nanoseconds.
mkTimeSpec :: CTime -> CULong -> TimeSpec

-- | Convert a <a>TimeSpec</a> to a pair of its components. Useful as a
--   view pattern.
timeSpecV :: TimeSpec -> (CTime, CULong)
timeSpecToInt64 :: TimeSpec -> Int64

-- | Mirrors <i>clockid_t</i>.
newtype Clock
Clock :: Int32 -> Clock
monotonicClock :: Clock
realtimeClock :: Clock
processTimeClock :: Clock
threadTimeClock :: Clock

-- | Get the CPU-time clock of the given process. See
--   <i>clock_getcpuclockid(3)</i>.
getProcessClock :: MonadBase IO μ => ProcessID -> μ Clock

-- | Get the clock resolution. See <i>clock_getres(3)</i>.
getClockResolution :: MonadBase IO μ => Clock -> μ TimeSpec

-- | Get the clock time. See <i>clock_gettime(3)</i>.
getClockTime :: MonadBase IO μ => Clock -> μ TimeSpec

-- | Set the clock time. See <i>clock_settime(3)</i>.
setClockTime :: MonadBase IO μ => Clock -> TimeSpec -> μ ()

-- | Sleep for the specified duration. When interrupted by a signal,
--   returns the amount of time left to sleep. See
--   <i>clock_nanosleep(3)</i>.
clockSleep :: MonadBase IO μ => Clock -> TimeSpec -> μ TimeSpec

-- | Sleep until the clock time reaches the specified value. See
--   <i>clock_nanosleep(3)</i>.
clockSleepAbs :: MonadBase IO μ => Clock -> TimeSpec -> μ ()
instance Eq TimeSpec
instance Show TimeSpec
instance Eq Clock
instance Ord Clock
instance Show Clock
instance Storable Clock
instance Storable TimeSpec
instance Integral TimeSpec
instance Enum TimeSpec
instance Real TimeSpec
instance Num TimeSpec
instance Bounded TimeSpec
instance Ord TimeSpec


-- | POSIX timers.
module System.Posix.Timer

-- | Mirrors <i>struct itimerspec</i>.
data ITimerSpec
ITimerSpec :: !TimeSpec -> !TimeSpec -> ITimerSpec
iTimerSpecInterval :: ITimerSpec -> !TimeSpec
iTimerSpecValue :: ITimerSpec -> !TimeSpec

-- | Mirrors <i>timer_t</i>.
data Timer

-- | Create a timer. See <i>timer_create(3)</i>.
createTimer :: MonadBase IO μ => Clock -> Maybe (Signal, WordPtr) -> μ Timer

-- | Setup the timer. See <i>timer_settime(3)</i>.
configureTimer :: MonadBase IO μ => Timer -> Bool -> TimeSpec -> TimeSpec -> μ (TimeSpec, TimeSpec)

-- | Get the amount of time left until the next expiration and the interval
--   between the subsequent expirations. See <i>timer_gettime(3)</i>.
timerTimeLeft :: MonadBase IO μ => Timer -> μ (TimeSpec, TimeSpec)

-- | Get the timer overrun count. See <i>timer_getoverrun(3)</i>.
timerOverrunCnt :: MonadBase IO μ => Timer -> μ CInt

-- | Destroy the timer. See <i>timer_delete(3)</i>.
destroyTimer :: MonadBase IO μ => Timer -> μ ()
instance Eq ITimerSpec
instance Show ITimerSpec
instance Eq Timer
instance Ord Timer
instance Show Timer
instance Storable Timer
instance Storable ITimerSpec
