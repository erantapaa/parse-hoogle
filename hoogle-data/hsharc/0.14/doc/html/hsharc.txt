-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell SHARC bindings
--   
--   Parser for SHARC data (the Sandell Harmonic Archive)
@package hsharc
@version 0.14


-- | SHARC XML file IO.
module Sound.Analysis.SHARC

-- | A SHARC instrument.
data Instrument
Instrument :: String -> [Note] -> Instrument
instrument_id :: Instrument -> String
notes :: Instrument -> [Note]

-- | A SHARC note.
data Note
Note :: Double -> [Partial] -> Note
frequency :: Note -> Double
partials :: Note -> [Partial]

-- | A SHARC partial.
data Partial
Partial :: Int -> Double -> Double -> Partial
partial :: Partial -> Int
amplitude :: Partial -> Double
phase :: Partial -> Double

-- | Read a SHARC XML file.
read_sharc :: FilePath -> IO (Either String [Instrument])

-- | Calculate the frequency of a <a>Partial</a> given the fundamental
--   frequency.
--   
--   <pre>
--   partial_frequency 440 (Partial 3 0.1 0) == 1320
--   </pre>
partial_frequency :: Double -> Partial -> Double

-- | Calculate the <tt>(frequency,amplitude,phase)</tt> triple of a
--   <a>Partial</a> given the fundamental frequency.
--   
--   <pre>
--   partial_triple 440 (Partial 3 0.1 pi) == (1320,0.1,pi)
--   </pre>
partial_triple :: Double -> Partial -> (Double, Double, Double)

-- | Translate a <a>Note</a> into
--   (<i>frequency</i>,<i>amplitude</i>,<i>phase</i>) triples.
--   
--   <pre>
--   note_spectra (Note 440 [Partial 3 0.1 pi]) == [(1320,0.1,pi)]
--   </pre>
note_spectra :: Note -> [(Double, Double, Double)]

-- | The number of partials at a <a>Note</a>.
note_n_partials :: Note -> Int

-- | Apply a linear scalar to the amplitude of a <a>Partial</a>.
partial_scale_amplitude :: Double -> Partial -> Partial

-- | Apply a linear scalar to the amplitudes of all <a>Partial</a>s at a
--   <a>Note</a>.
note_scale_amplitude :: Double -> Note -> Note

-- | Find the minimum and maximum amplitudes of all <a>Partial</a>s at a
--   <a>Note</a>.
note_amplitude_minmax :: Note -> (Double, Double)

-- | Normalise a <a>Note</a> so the maximum amplitude of any <a>Partial</a>
--   is <tt>1.0</tt>.
note_normalise :: Note -> Note

-- | Find the minimum and maximum amplitudes of all <a>Partial</a>s at all
--   <a>Note</a>s of an <a>Instrument</a>.
instrument_amplitude_minmax :: Instrument -> (Double, Double)

-- | Normalise an <a>Instrument</a> so the maximum amplitude of any
--   <a>Partial</a> is <tt>1.0</tt>.
instrument_normalise :: Instrument -> Instrument

-- | The root <a>Element</a> of a SHARC xml graphs is a <tt>tree</tt>,
--   which parses to a list of <a>Instrument</a>s.
parse_tree :: Element -> [Instrument]

-- | Parse an <tt>instrument</tt> <a>Element</a>.
parse_instrument :: Element -> Instrument

-- | Parse a <tt>note</tt> <a>Element</a>.
parse_note :: Element -> Note

-- | Parse an <tt>a</tt> <a>Element</a>.
parse_partial :: Element -> Partial
