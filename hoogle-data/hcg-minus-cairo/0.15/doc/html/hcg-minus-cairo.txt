-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | haskell cg (minus) (cairo rendering)
--   
@package hcg-minus-cairo
@version 0.15


-- | CG (minus) rendering in terms of <a>Render</a>.
module Render.CG.Minus

-- | Render nothing.
nil :: Render ()

-- | Render <a>Ls</a> as <a>moveTo</a> then sequence of <a>lineTo</a>.
line :: Ls R -> Render ()

-- | Variant of <a>line</a> that runs <a>closePath</a>.
polygon :: Ls R -> Render ()

-- | Render <a>Ls</a> as set of square points with <a>R</a> dimension. Runs
--   <a>fill</a> on each square.
points :: R -> Ls R -> Render ()

-- | Circle centred at <a>Pt</a> with radius <a>R</a>.
circle :: Pt R -> R -> Render ()

-- | Greyscale call to <a>setSourceRGBA</a>.
grey :: R -> Render ()

-- | <a>Ca</a> call to <a>setSourceRGBA</a>.
colour :: Ca -> Render ()

-- | Set line width <a>R</a> and <a>Ca</a>.
pen :: R -> Ca -> Render ()

-- | Run <a>polygon</a> on <a>Ls</a> then <tt>fill</tt> and
--   <tt>stroke</tt>.
area :: R -> Ca -> Ca -> Ls R -> Render ()

-- | Variant of <a>area</a> with fixed grey border of width <tt>0.005</tt>
--   and grey <tt>0.15</tt>.
area' :: Ca -> Ls R -> Render ()

-- | Run <a>polygon</a> on <a>Ls</a> then <a>pen</a> and <a>stroke</a>.
outline :: R -> Ca -> Ls R -> Render ()

-- | Outline rectangle given colour <a>Ca</a>, upper-left <a>Pt</a> and
--   <i>(width,height)</i>.
rect :: Ca -> Pt R -> (R, R) -> Render ()

-- | Solid variant of <a>rect</a>.
rect_fill :: Ca -> Pt R -> (R, R) -> Render ()

-- | Render text <a>String</a> in colour <a>Ca</a> at <a>Pt</a> in font
--   size <i>sz</i>.
text :: Ca -> Pt R -> R -> String -> Render ()

-- | Enumeration of file types.
data File_Type
F_PDF :: File_Type
F_SVG :: File_Type

-- | Render to <a>File_Type</a>. (w,h) give the page size. The appropriate
--   extension is appended to <a>FilePath</a>.
render_to_file :: File_Type -> (R, R) -> FilePath -> Render () -> IO ()


-- | Rendering of <a>Data.CG.Minus.Arrow</a>.
module Render.CG.Minus.Arrow
arrow_strk :: Ca -> Render ()

-- | Render <a>Ln</a> with solid arrow tip at endpoint. Arrow tip
--   co-ordinates are given by <a>arrow_coord</a>.
arrow_ep :: R -> R -> Ca -> Ln R -> Render ()

-- | Variant of <a>arrow_ep</a> to render <a>Ls</a> as sequence of arrows.
arrows_ep :: R -> R -> Ca -> Ls R -> Render ()

-- | Variant of <a>arrow_ep</a> with draws tip at mid-point of <a>Ln</a>.
arrow_mp :: R -> R -> Ca -> Ln R -> Render ()

-- | Variant of <a>arrow_mp</a> to render <a>Ls</a> as sequence of arrows.
arrows_mp :: R -> R -> Ca -> Ls R -> Render ()
