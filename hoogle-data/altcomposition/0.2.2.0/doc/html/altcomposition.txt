-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Alternative combinators for unorthodox function composition
--   
@package altcomposition
@version 0.2.2.0


-- | Compose functions with higher arity.
--   
--   Ever tried something like this:
--   
--   <pre>
--   (length . (++)) stringA stringB
--   </pre>
--   
--   Only to find out that you can't? The second function takes two
--   parameters, and as such the simple function composition does not work.
--   
--   A well known solution to this problem is this fun operator:
--   
--   <pre>
--   (.).(.) :: (c -&gt; d) -&gt; (a -&gt; b -&gt; c) -&gt; (a -&gt; b -&gt; d)
--   </pre>
--   
--   And this is quite general:
--   
--   <pre>
--   ((.).(.).(.)) :: (d -&gt; e) -&gt; (a -&gt; b -&gt; c -&gt; d) -&gt; (a -&gt; b -&gt; c -&gt; e)
--   </pre>
--   
--   See the following link to gain a intuition for how this works:
--   <a>https://stackoverflow.com/questions/17585649/composing-function-composition-how-does-work</a>
--   
--   However, in real use these suffer from some problems, namely:
--   
--   <ul>
--   <li>They cannot be used infix, even with ticks (at least in
--   ghci).</li>
--   <li>They are quite verbose.</li>
--   </ul>
--   
--   Then, someone thought about using a new symbol instead:
--   
--   <pre>
--   (.:) :: (c -&gt; d) -&gt; (a -&gt; b -&gt; c) -&gt; (a -&gt; b -&gt; d)
--   </pre>
--   
--   And for each new parameter, you would add a dot
--   
--   <pre>
--   (.:.) :: (d -&gt; e) -&gt; (a -&gt; b -&gt; c -&gt; d) -&gt; (a -&gt; b -&gt; c -&gt; e)
--   </pre>
--   
--   And so on, to <tt>.::</tt>, <tt>.::.</tt>, etc. This is the approach
--   taken by the "composition" package, which inspired this one. It can be
--   found at:
--   
--   <a>http://hackage.haskell.org/package/composition</a>
--   
--   This package is included in (and re-exported from) this
--   AltComposition.
--   
--   So, why define a new package?
--   
--   It does not scale well for other combinations. Let say I want <tt>(+)
--   . (*)</tt>, a function that takes three parameters, uses the first two
--   in the multiplication, and then adds the third parameter with the
--   result. And what if I want to feed to the first binary function as the
--   second parameter of the second function?
--   
--   The scheme proposed here is a little more verbose than the one from
--   the "composition" package, but it allows for a precise indication of
--   where the result of the first function is applied on the second
--   function using the <tt>%</tt> symbol (remember printf <tt>%</tt>). So,
--   the following operator:
--   
--   <pre>
--   *%*.**
--   </pre>
--   
--   Takes a binary function, and composes it with a ternary function,
--   aplying its result as the middle parameter.
--   
--   Its all a matter of opinion, and I strongly recomend that you use
--   standard haskell syntax instead of these, for more portable code.
--   
--   Also, many of these verbose operators have simpler counterparts. This
--   is either noted as Deprecation, or a single note.
--   
--   However, I still find myself writing the <tt>*%.***</tt> operators
--   myself, and I trust the deprecations to warn me about the simpler
--   alternatives.
--   
--   If you need even higher arity, first check your code, then refactor
--   your code, and if you still need it, please send a pull request!
module Data.AltComposition

-- | Compose a binary function with a unitary function
--   
--   <i>Note</i>: you should use idiomatic haskell instead
--   
--   <pre>
--   (.).(.) :: (c -&gt; d) -&gt; (a -&gt; b -&gt; c) -&gt; (a -&gt; b -&gt; d)
--   </pre>
--   
--   <pre>
--   (f %.** g) x y = f (g x y)
--   </pre>
--   
--   <pre>
--   (f .: g) x y = f (g x y)
--   </pre>
(%.**) :: (c -> d) -> (a -> b -> c) -> a -> b -> d

-- | Compose a ternary function with a unitary function
--   
--   <i>Note</i>: you should use idiomatic haskell instead
--   
--   <pre>
--   (.).(.).(.) :: (d -&gt; e) -&gt; (a -&gt; b -&gt; c -&gt; d) -&gt; (a -&gt; b -&gt; c -&gt; e)
--   </pre>
--   
--   <pre>
--   (f %.*** g) x y z = f (g x y z)
--   </pre>
--   
--   <pre>
--   (f .:. g) x y z = f (g x y z)
--   </pre>
(%.***) :: (d -> e) -> (a -> b -> c -> d) -> a -> b -> c -> e

-- | Compose a quaternary function with a unitary function
--   
--   <i>Note</i>: you should use idiomatic haskell instead
--   
--   <pre>
--   (.).(.).(.).(.) :: (e -&gt; f) -&gt; (a -&gt; b -&gt; c -&gt; d -&gt; e) -&gt; (a -&gt; b -&gt; c -&gt; d -&gt; f)
--   </pre>
--   
--   <pre>
--   (f %.**** g) w x y z = f (g w x y z)
--   </pre>
--   
--   <pre>
--   (f .:: g) w x y z = f (g w x y z)
--   </pre>
(%.****) :: (e -> f) -> (a -> b -> c -> d -> e) -> a -> b -> c -> d -> f

-- | Compose a unary function with a binary function, applying the result
--   of the unary function as the first parameter of the binary function.
--   
--   <i>Note</i>: DO NOT USE. Equivalent to <tt>.</tt>.
--   
--   <pre>
--   (f %*.* g) x y = f (g x) y &lt;=&gt; f . g
--   </pre>

-- | <i>Deprecated: This is the same as just (.)</i>
(%*.*) :: (b -> c -> d) -> (a -> b) -> a -> c -> d

-- | Compose a binary function with another binary function, applying the
--   result of the first binary function as the first parameter of the
--   second binary function.
--   
--   <i>Note</i>: DO NOT USE. Equivalent to <tt>flip f . g</tt>.
--   
--   <pre>
--   (f %*.** g) x y z = f (g x y) z
--   </pre>

-- | <i>Deprecated: Use f %.** g or .: instead</i>
(%*.**) :: (c -> d -> e) -> (a -> b -> c) -> a -> b -> d -> e

-- | Compose a ternary function with a binary function, applying the result
--   of the ternary function as the first parameter of the binary function.
--   
--   <pre>
--   (f %*.*** g) x y w z = f (g x y w) z
--   </pre>

-- | <i>Deprecated: Use f %.*** g or f .:. instead</i>
(%*.***) :: (d -> e -> f) -> (a -> b -> c -> d) -> a -> b -> c -> e -> f

-- | Compose a unary function with a binary function, applying the result
--   of the unary function as the second parameter of the binary function.
--   
--   <i>Note</i>: DO NOT USE. Equivalent to <tt>flip f . g</tt>.
--   
--   <pre>
--   (f *%.* g) x y = f y (g x)
--   </pre>
(*%.*) :: (b -> c -> d) -> (a -> c) -> a -> b -> d

-- | Compose a binary function with another binary function, applying the
--   result of the first binary function as the second parameter of the
--   second binary function.
--   
--   <i>Note</i>: DO NOT USE. Equivalent to <tt>flip f .: g</tt> or
--   <tt>flip f %.** g</tt>.
--   
--   <pre>
--   (f *%.** g) x y z = f z (g x y)
--   </pre>
(*%.**) :: (c -> d -> e) -> (a -> b -> d) -> a -> b -> c -> e

-- | Compose a ternary function with a binary function, applying the result
--   of the ternary function as the second parameter of the binary
--   function.
--   
--   <i>Note</i>: DO NOT USE. Equivalent to <tt>flip f .:. g</tt> or
--   <tt>flip f %.*** g</tt>.
--   
--   <pre>
--   (f *%.*** g) x y w z = f z (g x y w)
--   </pre>
(*%.***) :: (d -> e -> f) -> (a -> b -> c -> e) -> a -> b -> c -> d -> f

-- | Compose a unary function with a ternary function, applying the result
--   of the unary function as the first parameter of the ternary function.
--   
--   <i>Note</i>: DO NOT USE. Equivalent to <tt>.</tt>.
--   
--   <pre>
--   (f %**.* g) x y z = f (g x) y z
--   </pre>

-- | <i>Deprecated: This is the same as just (.)</i>
(%**.*) :: (b -> c -> d -> e) -> (a -> b) -> a -> c -> d -> e

-- | Compose a binary function with a ternary function, applying the result
--   of the binary function as the first parameter of the ternary function.
--   
--   <pre>
--   (f %**.** g) x y w z = f (g x y) w z
--   </pre>

-- | <i>Deprecated: Use f %.** g or f .: instead</i>
(%**.**) :: (c -> d -> e -> f) -> (a -> b -> c) -> a -> b -> d -> e -> f

-- | Compose a ternary function with another ternary function, applying the
--   result of the first ternary function as the first parameter of the
--   last ternary function.
--   
--   <pre>
--   (f %**.*** g) v w x y z = f (g v w x) y z
--   </pre>

-- | <i>Deprecated: Use f %.*** g or f .:. instead</i>
(%**.***) :: (f -> d -> e -> g) -> (a -> b -> c -> f) -> a -> b -> c -> d -> e -> g

-- | Compose a unary function with a ternary function, applying the result
--   of the unary function as the second parameter of the ternary function.
--   
--   <pre>
--   (f *%*.* g) x y z = f y (g x) z
--   </pre>
(*%*.*) :: (b -> c -> d -> e) -> (a -> c) -> a -> b -> d -> e

-- | Compose a binary function with a ternary function, applying the result
--   of the binary function as the second parameter of the ternary
--   function.
--   
--   <i>Note</i>: DO NOT USE. Equivalent to <tt>flip f .: g</tt> or
--   <tt>flip f %.** g</tt>.
--   
--   <pre>
--   (f *%*.** g) x y w z = f w (g x y) z
--   </pre>

-- | <i>Deprecated: Use f *%.** g instead</i>
(*%*.**) :: (c -> d -> e -> f) -> (a -> b -> d) -> a -> b -> c -> e -> f

-- | Compose a ternary function with another ternary function, applying the
--   result of the first ternary function as the second parameter of the
--   last ternary function.
--   
--   <i>Note</i>: DO NOT USE. Equivalent to <tt>flip f .:. g</tt> or
--   <tt>flip f %.*** g</tt>.
--   
--   <pre>
--   (f *%*.*** g) v w x y z = f y (g v w x) z
--   </pre>

-- | <i>Deprecated: Use f *%.*** g instead</i>
(*%*.***) :: (d -> f -> e -> g) -> (a -> b -> c -> f) -> a -> b -> c -> d -> e -> g

-- | Compose a unary function with a ternary function, applying the result
--   of the unary function as the third parameter of the ternary function.
--   
--   <pre>
--   (f **%.* g) x y z = f y z (g x)
--   </pre>
(**%.*) :: (b -> c -> d -> e) -> (a -> d) -> a -> b -> c -> e

-- | Compose a binary function with a ternary function, applying the result
--   of the binary function as the third parameter of the ternary function.
--   
--   <pre>
--   (f **%.** g) x y w z = f w z (g x y)
--   </pre>
(**%.**) :: (c -> d -> e -> f) -> (a -> b -> e) -> a -> b -> c -> d -> f

-- | Compose a ternary function with another ternary function, applying the
--   result of the first ternary function as the third parameter of the
--   last ternary function.
--   
--   <pre>
--   (f **%.*** g) v w x y z = f y z (g v w x)
--   </pre>
(**%.***) :: (d -> e -> f -> g) -> (a -> b -> c -> f) -> a -> b -> c -> d -> e -> g

-- | Compose a unary function with a quaternary function, applying the
--   result of the first unary function as the first parameter of the
--   quaternary function.
--   
--   <pre>
--   (f %***.* g) w x y z = f (g w) x y z
--   </pre>

-- | <i>Deprecated: This is the same as just (.)</i>
(%***.*) :: (f -> b -> c -> d -> g) -> (a -> f) -> a -> b -> c -> d -> g

-- | Compose a binary function with a quaternary function, applying the
--   result of the first binary function as the first parameter of the
--   quaternary function.
--   
--   <pre>
--   (f %***.** g) v w x y z = f (g v w) x y z
--   </pre>

-- | <i>Deprecated: This is the same as just %.** or .:</i>
(%***.**) :: (f -> c -> d -> e -> g) -> (a -> b -> f) -> a -> b -> c -> d -> e -> g

-- | Conditional composition. Borrowed (and modified) from
--   <a>http://hackage.haskell.org/package/cond-0.4.0.2</a> If the
--   predicate is False, <a>id</a> is returned instead of the second
--   argument. This function, for example, can be used to conditionally add
--   functions to a composition chain.
(?.) :: Category cat => Bool -> cat a a -> cat a a

-- | Slightly Lower fixity function composition for use with
--   <tt><a>?.</a></tt>.
(.$) :: (b -> c) -> (a -> b) -> (a -> c)

-- | Just like (<tt><a>$</a></tt>), but with higher precedence than
--   (<tt><tt>&lt;&gt;</tt></tt>), but still lower than
--   (<tt><a>.</a></tt>). Similar to <a>Diagrams.Util</a> <tt>'#'</tt>, but
--   without flipped arguments.
(§) :: (a -> b) -> a -> b

-- | Group conditions with <tt><a>&amp;&amp;</a></tt>. Useful for filter.
--   
--   <i>Note</i>: an easy mnemonic to remember is that operators ending in
--   \ (lambda) imply that their parameters are functions instead of values
--   (in this particular case, boolean tests)
--   
--   <pre>
--   (f &amp;&amp;\ g) x = f x &amp;&amp; g x
--   </pre>
(&&\) :: (a -> Bool) -> (a -> Bool) -> (a -> Bool)

-- | Group conditions with <tt><a>||</a></tt> Useful for filter.
--   
--   <i>Note</i>: an easy mnemonic to remember is that operators ending in
--   \ (lambda) imply that their parameters are functions instead of values
--   (in this particular case, boolean tests)
--   
--   <pre>
--   (f ||\ g) x = f x || g x
--   </pre>
(||\) :: (a -> Bool) -> (a -> Bool) -> (a -> Bool)

-- | fmap with its arguments reversed.
--   
--   
--   <a>http://www.reddit.com/r/haskell/comments/qy990/suggestion_for_flip_map/</a>
--   
--   <pre>
--   for  = flip fmap
--   with = flip fmap
--   </pre>
for :: Functor f => f a -> (a -> b) -> f b

-- | fmap with its arguments reversed.
--   
--   
--   <a>http://www.reddit.com/r/haskell/comments/qy990/suggestion_for_flip_map/</a>
--   
--   <pre>
--   for  = flip fmap
--   with = flip fmap
--   </pre>
with :: Functor f => f a -> (a -> b) -> f b
