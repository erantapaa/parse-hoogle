-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An abstract data type designed for the exchange of tree-like data structures
--   
--   Library for dealing with ATerms (annotated terms) in Haskell. See
--   <a>https://github.com/cwi-swat/aterms</a> for more information on
--   ATerms.
@package Strafunski-ATermLib
@version 1.6.0.3


-- | This module is part of the ATerm library for Haskell. It defines the
--   abstract syntax of ATerms as a Haskell datatype.
module Data.ATerm.AbstractSyntax

-- | The abstract syntax of ATerms.
data ATerm

-- | Application
AAppl :: String -> [ATerm] -> ATerm

-- | Lists
AList :: [ATerm] -> ATerm

-- | Integers
AInt :: Integer -> ATerm
instance [overlap ok] Read ATerm
instance [overlap ok] Show ATerm
instance [overlap ok] Eq ATerm
instance [overlap ok] Ord ATerm


-- | This module is part of the ATerm library for Haskell. It contains
--   functions for reading and writing ATerms from and to Strings. Two
--   ATerm formats are supported:
--   
--   <ul>
--   <li>AT: plain (non-shared) textual ATerms</li>
--   <li>TAF: shared textual ATerms</li>
--   </ul>
--   
--   The binary ATerm format (BAF) is not supported.
--   
--   Current limitations:
--   
--   <ul>
--   <li>BLOBS and place-holders are not supported.</li>
--   <li>Annotations are not supported.</li>
--   </ul>
module Data.ATerm.ReadWrite

-- | Parse the given string into an ATerm.
readATerm :: String -> ATerm

-- | Write the given ATerm to non-shared textual representation (TXT
--   format).
writeATerm :: ATerm -> String

-- | Write the given ATerm to fully shared textual representation (TAF
--   format).
writeSharedATerm :: ATerm -> String


-- | This module is part of the ATerm library for Haskell. It provides the
--   class ATermConvertible of types that are convertible to and from
--   ATerms. Additionally, it provides default instances of this class for
--   some predefined Prelude types.
module Data.ATerm.Conversion
class ATermConvertible t
toATerm :: ATermConvertible t => t -> ATerm
fromATerm :: ATermConvertible t => ATerm -> t

-- | Auxiliary function for reporting errors.
fromATermError :: String -> ATerm -> a

-- | Convert to a textual ATerm representation without sharing (TXT
--   format).
toATermString :: ATermConvertible t => t -> String

-- | Convert to a textual ATerm representation with full sharing (TAF
--   format).
toSharedATermString :: ATermConvertible t => t -> String

-- | Convert from a textual ATerm representation.
fromATermString :: ATermConvertible t => String -> t
instance [overlap ok] (Integral a, ATermConvertible a) => ATermConvertible (Ratio a)
instance [overlap ok] ATermConvertible Char
instance [overlap ok] ATermConvertible ()
instance [overlap ok] ATermConvertible Bool
instance [overlap ok] Integral n => ATermConvertible n
instance [overlap ok] ATermConvertible String
instance [overlap ok] (ATermConvertible a, ATermConvertible b) => ATermConvertible (Either a b)
instance [overlap ok] (ATermConvertible a, ATermConvertible b) => ATermConvertible (a, b)
instance [overlap ok] ATermConvertible a => ATermConvertible (Maybe a)
instance [overlap ok] ATermConvertible a => ATermConvertible [a]


-- | This module is part of the ATerm library for Haskell. This module
--   provides wrapper functions that take care of IO.
module Data.ATerm.IO

-- | Wrapper function to create a main function in the IO monad, given a
--   program name and a monadic transformation function.
atermIOwrap :: (ATermConvertible t, ATermConvertible a) => ProgramName -> (t -> IO a) -> IO ()
type ProgramName = String

-- | Turn hyphens in a String into underscores.
dehyphen :: String -> String

-- | Turn hyphens in AST into underscores except inside nodes that
--   represent literals.
dehyphenAST :: ATerm -> ATerm

-- | Turn hyphens in unquoted literal into underscores.
dehyphenUnquoted :: [Char] -> [Char]

-- | Turn the first character into upper case.
headToUpper :: String -> String

-- | Make all AFun's start with an uppercase letter.
afunCap :: ATerm -> ATerm
data OptionsATermIO
OptionsATermIO :: String -> String -> String -> OptionsATermIO
fin :: OptionsATermIO -> String
fout :: OptionsATermIO -> String
format :: OptionsATermIO -> String
defaultOptionsATermIO :: OptionsATermIO
parseOptions :: String -> [String] -> OptionsATermIO
usage :: String -> String


-- | This module is part of the ATerm library for Haskell. This is the top
--   module of the library. Most users only need to import this module.
module Data.ATerm.Lib
