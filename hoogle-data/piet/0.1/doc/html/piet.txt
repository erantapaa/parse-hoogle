-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Piet interpreter
--   
--   An interpreter for the Piet programming language, see
--   <a>http://www.dangermouse.net/esoteric/piet.html</a>.
@package piet
@version 0.1


-- | A module providing a couple of Piet-specific types and simple
--   associated functions needed throughout the library.
module Language.Piet.Types

-- | The Direction Pointer (DP).
data DirectionPointer
DPRight :: DirectionPointer
DPDown :: DirectionPointer
DPLeft :: DirectionPointer
DPUp :: DirectionPointer

-- | Move coordinates by one in the direction of the
--   <a>DirectionPointer</a>.
addCoordinates :: DirectionPointer -> Int -> Int -> (Int, Int)

-- | Rotate a <a>DirectionPointer</a> clockwise (counter clockwise if the
--   <a>Int</a> is negative) a given number of times.
rotate :: Int -> DirectionPointer -> DirectionPointer

-- | The Codel Chooser (CC).
data CodelChooser
CCLeft :: CodelChooser
CCRight :: CodelChooser

-- | Toggle a <a>CodelChooser</a> a given number of times.
toggle :: Int -> CodelChooser -> CodelChooser

-- | Piet types. Relevant to distinguish in-/output strategies.
data PietType
PietNumber :: PietType
PietChar :: PietType

-- | Runtime program representation.
data Program
Program :: Image Colour -> Image LabelKey -> IntMap LabelInfo -> Program

-- | Original image
image :: Program -> Image Colour

-- | Labelled image
mask :: Program -> Image LabelKey

-- | Information about the labels
info :: Program -> IntMap LabelInfo

-- | Returns if a given codel in a program is blocked in the Piet sense
--   (which is the case when it is out of the image's range or
--   <a>Black</a>).
isBlocked :: Int -> Int -> Program -> Bool

-- | The colours that make up a Piet program text.
data Colour
Black :: Colour
White :: Colour
Hue :: !!Lightness -> !!HueColour -> Colour

-- | Converts red/green/blue/alpha values to a <a>Colour</a>. The alpha
--   channel is ignored for now, but may be used in future implementations
--   or dialects, so please use this function instead of <a>rgb2Colour</a>
--   whenever an alpha channel is available.
rgba2Colour :: (Num w) => w -> w -> w -> w -> Colour

-- | Converts red/green/blue values to a <a>Colour</a>. If the supplied
--   arguments do not form a proper Piet <a>Colour</a>, <a>White</a> is
--   returned.
rgb2Colour :: (Num w) => w -> w -> w -> Colour

-- | Piet colours in the hue cycle.
data HueColour
Red :: HueColour
Yellow :: HueColour
Green :: HueColour
Cyan :: HueColour
Blue :: HueColour
Magenta :: HueColour

-- | Hue difference between two <a>HueColour</a>s. <a>Red</a> means no
--   change, <a>Yellow</a> one step and so forth.
hueChange :: HueColour -> HueColour -> HueColour

-- | Hue lightness values supported by Piet.
data Lightness
Light :: Lightness
Normal :: Lightness
Dark :: Lightness

-- | Lightness difference between Piet lightness values. <a>Light</a>
--   represents no change, <a>Normal</a> one step darker and <a>Dark</a>
--   two steps darker.
lightnessChange :: Lightness -> Lightness -> Lightness

-- | An image. Its coordinates will be <tt>(0, 0) .. (width-1,
--   height-1)</tt>
data Image a

-- | Width of an <a>Image</a> in pixels.
imgWidth :: Image a -> Int

-- | Height of an <a>Image</a> in pixels.
imgHeight :: Image a -> Int

-- | Find out, if the given coordinates are within the <a>Image</a> borders
--   (which are <tt> (0, 0) .. (width-1, height-1)</tt>).
imgInRange :: Int -> Int -> Image a -> Bool

-- | Build a new image.
imgNew :: Int -> Int -> [((Int, Int), a)] -> Image a

-- | Access a pixel at given x/y-coordinates.
imgPixel :: Int -> Int -> Image a -> a

-- | Set a pixel at given x/y-coordinates.
imgSetPixel :: Int -> Int -> a -> Image a -> Image a

-- | We'll just use <a>Int</a>s to identifiy labels.
type LabelKey = Int

-- | Stores compiler-relevant information about a label. This type
--   implements an instance of <a>Monoid</a> to merge labels.
data LabelInfo

-- | The empty label
EmptyInfo :: LabelInfo

-- | Label with a size and four borders
LabelInfo :: !!Int -> !!LabelBorder -> !!LabelBorder -> !!LabelBorder -> !!LabelBorder -> LabelInfo

-- | Number of pixels
_labelSize :: LabelInfo -> !!Int

-- | Top border
labelTop :: LabelInfo -> !!LabelBorder

-- | left border
labelLeft :: LabelInfo -> !!LabelBorder

-- | Bottom border
labelBottom :: LabelInfo -> !!LabelBorder

-- | Right border
labelRight :: LabelInfo -> !!LabelBorder

-- | Number of pixels in a label. This function is defined for all
--   constructors of <a>LabelInfo</a> so, in contrast to <a>_labelSize</a>,
--   it won't fail on <a>EmptyInfo</a> .
labelSize :: LabelInfo -> Int

-- | Add a pixel to a <a>LabelInfo</a>.
addPixel :: Int -> Int -> LabelInfo -> LabelInfo

-- | Holds information of a label (coloured area) relevant for the Piet
--   language, i. e. information about where the program flow will be
--   directed regarding a Direction Pointer.
--   
--   Holds a border position (e. g. an x-coordinate) and the minimum or
--   maximum associated "other" coordinates (e. g. y-coordinates).
data LabelBorder
LabelBorder :: !!Int -> !!Int -> !!Int -> LabelBorder

-- | Where the border is located
borderCoord :: LabelBorder -> !!Int

-- | Minimum "other" coordinate of the border
borderMin :: LabelBorder -> !!Int

-- | Maximum "other" coordinate of the border
borderMax :: LabelBorder -> !!Int
instance Show LabelBorder
instance Eq LabelBorder
instance Ord LabelBorder
instance Show LabelInfo
instance Eq LabelInfo
instance Ord LabelInfo
instance (Show a) => Show (Image a)
instance (Eq a) => Eq (Image a)
instance (Ord a) => Ord (Image a)
instance Show Lightness
instance Read Lightness
instance Eq Lightness
instance Ord Lightness
instance Enum Lightness
instance Show HueColour
instance Read HueColour
instance Eq HueColour
instance Ord HueColour
instance Enum HueColour
instance Show Colour
instance Read Colour
instance Eq Colour
instance Ord Colour
instance Show PietType
instance Read PietType
instance Eq PietType
instance Ord PietType
instance Show CodelChooser
instance Read CodelChooser
instance Eq CodelChooser
instance Ord CodelChooser
instance Enum CodelChooser
instance Show DirectionPointer
instance Read DirectionPointer
instance Eq DirectionPointer
instance Ord DirectionPointer
instance Enum DirectionPointer
instance Monoid LabelInfo
instance Functor Image


-- | This module implements the image processing part of this library. It
--   is able to do basic image I/O and provides funcions for labelling
--   images and extracting Piet-relevant information at the same time.
module Language.Piet.Compiler

-- | Load an <a>Image</a> holding Piet <a>Colour</a>s from a given file. If
--   the codel length is known, it should be passed as <a>Just</a>
--   argument, otherwise, it is guessed from the file. Note that "codel
--   length" means the edge length of the codels and not their size.
--   
--   <i>This function is not thread safe due to imlib2!</i>
imgFromFile :: Maybe Int -> FilePath -> IO (Either ImlibLoadError (Image Colour))

-- | Compile an <tt><a>Image</a> <a>Colour</a></tt> to a Piet
--   <a>Program</a>.
compile :: Image Colour -> Program

-- | Label an image with 4-neighbourship and equivalence as neighbouring
--   condition, which is <tt><a>label4With</a> (==)</tt>.
label4 :: (Eq a) => Image a -> (Image LabelKey, IntMap LabelInfo)

-- | Labels an image with 4-neighbourship.
label4With :: (a -> a -> Bool) -> Image a -> (Image LabelKey, IntMap LabelInfo)
instance Show LabellingStatus
instance Eq LabellingStatus
instance Ord LabellingStatus


-- | This module implements a customized stack for the Piet programming
--   language.
--   
--   In addition to the common <a>push</a>, <a>pop</a> and <a>top</a>
--   operations, the a <a>RollStack</a> provides a <a>roll</a> (see below)
--   command, which is the reason for using a <a>Seq</a>uence and not a
--   list as underlying data structure.
--   
--   Whenever the <i>O</i>-notation is used, <i>n</i> describes the number
--   of elements within the stack.
module Data.RollStack

-- | The <a>RollStack</a> type.
data RollStack a

-- | <i>O(1)</i>. Tests, if a <a>RollStack</a> is empty.
isEmpty :: RollStack a -> Bool

-- | <i>O(1)</i>. Looks at the top element of the <a>RollStack</a>. Returns
--   <a>Nothing</a> if the stack is empty.
top :: RollStack a -> Maybe a

-- | <i>O(1)</i>. Construct an empty <a>Stack</a>.
empty :: RollStack a

-- | <i>O(1)</i>. Construct a <a>RollStack</a> containing a single element.
singleton :: a -> RollStack a

-- | <i>O(1)</i>. Push an element on the <a>RollStack</a>.
push :: a -> RollStack a -> RollStack a

-- | <i>O(1)</i>. Pop the top element from the <a>RollStack</a> if it is
--   not empty.
pop :: RollStack a -> Maybe (a, RollStack a)

-- | <i>O(log(n))</i>. A single roll to depth <i>n</i> is defined as
--   burying the top value on the stack <i>n</i> deep and bringing all
--   values above it up by 1 place. A negative number of rolls rolls in the
--   opposite direction. A negative depth results in an <a>error</a>.
roll :: Int -> Int -> RollStack a -> RollStack a

-- | <i>O(n)</i>. Convert a list into a <a>Stack</a>. The list's head will
--   be the first element of the <a>Stack</a>
fromList :: [a] -> RollStack a

-- | <i>O(n)</i>. Convert a <a>RollStack</a> to a list. The <a>top</a> of
--   the <a>RollStack</a> will be the list's head.
toList :: RollStack a -> [a]
instance Foldable RollStack
instance Functor RollStack
instance (Ord a) => Ord (RollStack a)
instance (Eq a) => Eq (RollStack a)
instance (Show a) => Show (RollStack a)


-- | A module implementing the Piet interpreter as a monad. The monad
--   encapsulates the interpreter's status, i. e. the side-effects of Piet
--   programs.
module Language.Piet.PietMonad

-- | A monad encapsulating the status of a Piet interpreter.
data PietMonad a

-- | The status of a Piet interpreter.
data InterpreterStatus

-- | Describes the importance of a log message.
data LogLevel

-- | Rather verbosed output.
Verbosed :: LogLevel

-- | Usual log level.
Info :: LogLevel

-- | A recoverable error has occured.
Error :: LogLevel

-- | A fatal error has occured.
Fatal :: LogLevel

-- | Returns the current Direction Pointer.
getDP :: PietMonad DirectionPointer

-- | Sets the Direction Pointer.
setDP :: DirectionPointer -> PietMonad ()

-- | Returns the current Codel Chooser.
getCC :: PietMonad CodelChooser

-- | Sets the current Codel Chooser.
setCC :: CodelChooser -> PietMonad ()

-- | Returns the current position.
getPosition :: PietMonad (Int, Int)

-- | Sets the current position.
setPosition :: Int -> Int -> PietMonad ()

-- | Pushes a given <a>Int</a> value on the stack.
stackPush :: Int -> PietMonad ()

-- | Pops the top value from the stack. If the stack was empty,
--   <a>Nothing</a> is returned, <a>Just</a> the top value otherise.
stackPop :: PietMonad (Maybe Int)

-- | Performs the <a>roll</a> operation on the stack.
stackRoll :: Int -> Int -> PietMonad ()

-- | Prints a number to STDOUT.
printNumber :: Int -> PietMonad ()

-- | Converts a given number to a character and prints it to STDOUT.
printChar :: Int -> PietMonad ()

-- | Reads a number from STDIN.
readNumber :: PietMonad Int

-- | Reads a character from STDIN. Note that it is returned as an
--   <a>Int</a>.
readChar :: PietMonad Int

-- | Issue log message with given priority.
logMessage :: LogLevel -> String -> PietMonad ()

-- | Quit a program. Any command following this one will be ignored.
terminate :: PietMonad ()

-- | Executes a program represented by a <a>PietMonad</a>. I/O operations
--   (reading and writing numbers or characters) is delegated to callback
--   functions.
runPietMonad :: (PietType -> IO Int) -> (PietType -> Int -> IO ()) -> (LogLevel -> String -> IO ()) -> PietMonad a -> IO (Either String a)
instance Eq LogLevel
instance Ord LogLevel
instance Show PietRequest
instance Eq PietRequest
instance Ord PietRequest
instance MonadState InterpreterStatus PietMonad
instance Monad PietMonad
instance Show LogLevel


-- | This module contains the implementation of the Piet language
--   constructs. Most of the documentation is copied from the Piet
--   specification at <a>http://www.dangermouse.net/esoteric/piet.html</a>.
module Language.Piet.Commands

-- | Pushes the value of the colour block just exited on to the stack. Note
--   that values of colour blocks are not automatically pushed on to the
--   stack - this push operation must be explicitly carried out.
piet_push :: Int -> PietMonad ()

-- | Pops the top value off the stack and discards it.
piet_pop :: PietMonad ()

-- | Pops the top two values off the stack, adds them, and pushes the
--   result back on the stack.
piet_add :: PietMonad ()

-- | Pops the top two values off the stack, subtracts the top value from
--   the second top value, and pushes the result back on the stack.
piet_subtract :: PietMonad ()

-- | Pops the top two values off the stack, multiplies them, and pushes the
--   result back on the stack.
piet_multiply :: PietMonad ()

-- | Pops the top two values off the stack, calculates the integer division
--   of the second top value by the top value, and pushes the result back
--   on the stack.
piet_divide :: PietMonad ()

-- | Pops the top two values off the stack, calculates the second top value
--   modulo the top value, and pushes the result back on the stack.
piet_mod :: PietMonad ()

-- | Replaces the top value of the stack with 0 if it is non-zero, and 1 if
--   it is zero.
piet_not :: PietMonad ()

-- | Pops the top two values off the stack, and pushes 1 on to the stack if
--   the second top value is greater than the top value, and pushes 0 if it
--   is not greater.
piet_greater :: PietMonad ()

-- | Pops the top value off the stack and rotates the DP clockwise that
--   many steps (anticlockwise if negative).
piet_pointer :: PietMonad ()

-- | Pops the top value off the stack and toggles the CC that many times.
piet_switch :: PietMonad ()

-- | Pushes a copy of the top value on the stack on to the stack.
piet_duplicate :: PietMonad ()

-- | Pops the top two values off the stack and "rolls" the remaining stack
--   entries to a depth equal to the second value popped, by a number of
--   rolls equal to the first value popped. A single roll to depth <i>n</i>
--   is defined as burying the top value on the stack <i>n</i> deep and
--   bringing all values above it up by 1 place. A negative number of rolls
--   rolls in the opposite direction. A negative depth is an error and the
--   command is ignored.
--   
--   In this implementation, "ignored" means that the top two values remain
--   pushed off the stack, while the rest of the stack remains unmodified.
piet_roll :: PietMonad ()

-- | Reads a number from STDIN and pushes it on to the stack.
piet_in_number :: PietMonad ()

-- | Reads a char from STDIN and pushes it on to the stack.
piet_in_char :: PietMonad ()

-- | Pops the top value off the stack and prints it to STDOUT as a number.
piet_out_number :: PietMonad ()

-- | Pops the top value off the stack and prints it to STDOUT as a char.
piet_out_char :: PietMonad ()


-- | This module implements an interpreter for the Piet programming
--   language.
module Language.Piet.Interpreter

-- | Interpret a Piet <a>Program</a>.
interpret :: Program -> PietMonad ()

-- | Find a way out of the current <a>White</a> block. <a>terminate</a> if
--   there is no way out.
interpretWhite :: Program -> PietMonad ()

-- | Find coordinates and resulting DP/CC of the successing non-black
--   block, if it exists, <a>Nothing</a> otherwise.
nonBlackSucc :: Program -> LabelInfo -> DirectionPointer -> CodelChooser -> Maybe (Int, Int, DirectionPointer, CodelChooser)

-- | Given a label, a <a>DirectionPointer</a> and a <a>CodelChooser</a>,
--   this function finds the coordinates of the next block to enter. These
--   coordinates are not guaranteed to be valid, they might be out of range
--   or point to a <a>Black</a> or <a>White</a> block.
succCoordinates :: LabelInfo -> DirectionPointer -> CodelChooser -> (Int, Int)

-- | Piet's commands are issued by a colour change, see
--   <a>http://www.dangermouse.net/esoteric/piet.html</a>. This function
--   takes two neighbouring colours and returns the resulting Piet command,
--   which is a function consuming (or more likely, ignoring) an <a>Int</a>
--   (the size of the colour block that is being left) and returning a
--   <tt><a>PietMonad</a> ()</tt>.
colours2Command :: Lightness -> HueColour -> Lightness -> HueColour -> Int -> PietMonad ()

-- | Converts a colour difference calculated by
--   <tt>Language.Piet.Types.colourChange</tt> and <a>lightnessChange</a>
--   to a <tt><a>PietMonad</a> ()</tt>, compare <a>colours2Command</a>.
colourDiff2Command :: Lightness -> HueColour -> Int -> PietMonad ()


-- | Comprehensive module of the Piet interpreter. See
--   <a>http://www.dangermouse.net/esoteric/piet.html</a>.
module Language.Piet
