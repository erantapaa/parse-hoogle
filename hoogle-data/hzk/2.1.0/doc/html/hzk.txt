-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell client library for Apache Zookeeper
--   
@package hzk
@version 2.1.0


-- | Zookeeper client library
module Database.Zookeeper.Pool

-- | Connects to the zookeeper cluster. This function may throw an
--   exception if a valid zookeeper handle could not be created.
--   
--   The connection is terminated right before this function returns.
connect :: String -> Timeout -> Maybe Watcher -> Maybe ClientID -> Int -> NominalDiffTime -> Int -> IO (Pool Zookeeper)


-- | Zookeeper client library
module Database.Zookeeper

-- | Specify application credentials (asynchronous)
--   
--   The application calls this function to specify its credentials for
--   purposes of authentication. The server will use the security provider
--   specified by the scheme parameter to authenticate the client
--   connection. If the authentication request has failed:
--   
--   <ul>
--   <li>the server connection is dropped;</li>
--   <li>the watcher is called witht AuthFailedState value as the state
--   parameter;</li>
--   </ul>
addAuth :: Zookeeper -> Scheme -> ByteString -> (Either ZKError () -> IO ()) -> IO ()

-- | Sets [or redefines] the watcher function
setWatcher :: Zookeeper -> Watcher -> IO ()

-- | Connects to the zookeeper cluster. This function may throw an
--   exception if a valid zookeeper handle could not be created.
--   
--   The connection is terminated right before this function returns.
withZookeeper :: String -> Timeout -> Maybe Watcher -> Maybe ClientID -> (Zookeeper -> IO a) -> IO a

-- | The current state of this session
getState :: Zookeeper -> IO State

-- | The client session id, only valid if the session currently connected
--   [ConnectedState]
getClientId :: Zookeeper -> IO ClientID

-- | Sets the debugging level for the c-library
setDebugLevel :: ZLogLevel -> IO ()

-- | The timeout for this session, only valid if the session is currently
--   connected [ConnectedState]
getRecvTimeout :: Zookeeper -> IO Int

-- | Gets the data associated with a znode (asynchronous)
get :: Zookeeper -> String -> Maybe Watcher -> IO (Either ZKError (Maybe ByteString, Stat))
exists :: Zookeeper -> String -> Maybe Watcher -> IO (Either ZKError Stat)

-- | Gets the acl associated with a node (asynchronous). Unexpectedly,
--   <a>setAcl</a> and <a>getAcl</a> are not symmetric:
--   
--   <pre>
--   setAcl zh path Nothing OpenAclUnsafe
--   getAcl zh path (..) -- yields AclList instead of OpenAclUnsafe
--   </pre>
getAcl :: Zookeeper -> String -> IO (Either ZKError (AclList, Stat))

-- | Lists the children of a znode
getChildren :: Zookeeper -> String -> Maybe Watcher -> IO (Either ZKError [String])

-- | Test if the ephemeral node has been created by this clientid. This
--   function shall return False if the node is not ephemeral or is not
--   owned by this clientid.
ownsEphemeral :: ClientID -> Stat -> IO Bool

-- | Sets the data associated with a znode (synchronous)
set :: Zookeeper -> String -> Maybe ByteString -> Maybe Version -> IO (Either ZKError Stat)

-- | Creates a znode
create :: Zookeeper -> String -> Maybe ByteString -> AclList -> [CreateFlag] -> IO (Either ZKError String)

-- | | Checks the existence of a znode (synchronous)
--   
--   Delete a znode in zookeeper (synchronous)
delete :: Zookeeper -> String -> Maybe Version -> IO (Either ZKError ())

-- | Sets the acl associated with a node. This operation is not recursive
--   on the children. See <a>getAcl</a> for more information (synchronous)
setAcl :: Zookeeper -> String -> Maybe Version -> AclList -> IO (Either ZKError ())

-- | Authentication scheme provider
type Scheme = String

-- | Timeout in milliseconds
type Timeout = Int

-- | The watcher function, which allows you to get notified about zookeeper
--   events.
type Watcher = Zookeeper -> Event -> State -> Maybe String -> IO ()

-- | The current clientid that may be used to reconnect
data ClientID

-- | Zookeeper connection handler
data Zookeeper
data Acl
Acl :: String -> String -> [Perm] -> Acl

-- | The ACL scheme (e.g. "ip", "world", "digest"
aclScheme :: Acl -> String

-- | The schema-depent ACL identity (e.g. scheme="ip", id="127.0.0.1")
aclId :: Acl -> String

-- | The [non empty] list of permissions
aclFlags :: Acl -> [Perm]

-- | The permission bits of a ACL
data Perm

-- | Can read data and enumerate its children
CanRead :: Perm

-- | Can modify permissions bits
CanAdmin :: Perm

-- | Can modify data
CanWrite :: Perm

-- | Can create children
CanCreate :: Perm

-- | Can remove
CanDelete :: Perm

-- | The stat of a znode
data Stat
Stat :: Int64 -> Int64 -> Int64 -> Int64 -> Int64 -> Int32 -> Int32 -> Int32 -> Int32 -> Int32 -> Maybe Int64 -> Stat

-- | The zxid of the change that caused this node to be created
statCzxId :: Stat -> Int64

-- | The zxid of the change that last modified this znode
statMzxId :: Stat -> Int64

-- | The zxid of the change that last modified children of this znode
statPzxId :: Stat -> Int64

-- | The time in milliseconds from epoch when this znode was created
statCreatetime :: Stat -> Int64

-- | The time in milliseconds from epoch when this znode was last modified
statModifytime :: Stat -> Int64

-- | The number of changes to the data of this znode
statVersion :: Stat -> Int32

-- | The number of changes to the children of this znode
statChildrenVersion :: Stat -> Int32

-- | The number of changes to the acl of this znode
statAclVersion :: Stat -> Int32

-- | The length of the data field of this znode
statDataLength :: Stat -> Int32

-- | The number of children of this znode
statNumChildren :: Stat -> Int32

-- | The session id of the owner of this znode if the znode is an ephemeral
--   node
statEphemeralOwner :: Stat -> Maybe Int64
data Event
ChildEvent :: Event
CreatedEvent :: Event
DeletedEvent :: Event
ChangedEvent :: Event
SessionEvent :: Event
NotWatchingEvent :: Event

-- | Used when the underlying C API has returned an unknown event type
UnknownEvent :: Int -> Event
data State
ExpiredSessionState :: State
AuthFailedState :: State
ConnectingState :: State
AssociatingState :: State
ConnectedState :: State

-- | Used when the underlying C API has returned an unknown status code
UnknownState :: Int -> State
data AclList

-- | A [non empty] list of ACLs
List :: [Acl] -> AclList

-- | This gives the creators authentication id's all permissions
CreatorAll :: AclList

-- | This is a completely open ACL
OpenAclUnsafe :: AclList

-- | This ACL gives the world the ability to read
ReadAclUnsafe :: AclList
type Version = Int32
data ZLogLevel
ZLogError :: ZLogLevel
ZLogWarn :: ZLogLevel
ZLogInfo :: ZLogLevel
ZLogDebug :: ZLogLevel

-- | The optional flags you may use to create a node
data CreateFlag

-- | A unique monotonically increasing sequence number is appended to the
--   path name
Sequence :: CreateFlag

-- | The znode will automatically get removed if the client session goes
--   away
Ephemeral :: CreateFlag

-- | Zookeeper error codes
data ZKError
ApiError :: ZKError
NoAuthError :: ZKError
NoNodeError :: ZKError
SystemError :: ZKError
ClosingError :: ZKError
NothingError :: ZKError
NotEmptyError :: ZKError
AuthFailedError :: ZKError
BadVersionError :: ZKError
InvalidACLError :: ZKError
NodeExistsError :: ZKError
MarshallingError :: ZKError
BadArgumentsError :: ZKError
InvalidStateError :: ZKError
SessionMovedError :: ZKError
UnimplmenetedError :: ZKError
ConnectionLossError :: ZKError
SessionExpiredError :: ZKError
InvalidCallbackError :: ZKError
OperationTimeoutError :: ZKError
DataInconsistencyError :: ZKError
RuntimeInconsistencyError :: ZKError
NoChildrenForEphemeralsError :: ZKError
UnknownError :: Int -> ZKError
