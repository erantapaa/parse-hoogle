-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Refinement types with static and runtime checking
--   
@package refined
@version 0.1.0.0

module Refined

-- | A refinement type, which wraps a value of type <tt>x</tt>, ensuring
--   that it satisfies a type-level predicate <tt>p</tt>.
data Refined p x

-- | A smart constructor of a <a>Refined</a> value. Checks the input value
--   at runtime.
refine :: Predicate p x => x -> Either String (Refined p x)

-- | Constructs a <a>Refined</a> value with checking at compile-time using
--   Template Haskell. E.g.,
--   
--   <pre>
--   &gt;&gt;&gt; $$(refineTH 23) :: Refined Positive Int
--   Refined 23
--   </pre>
--   
--   Here's an example of an ivalid value:
--   
--   <pre>
--   &gt;&gt;&gt; $$(refineTH 0) :: Refined Positive Int
--   &lt;interactive&gt;:6:4:
--       Value is not greater than 0
--       In the Template Haskell splice $$(refineTH 0)
--       In the expression: $$(refineTH 0) :: Refined Positive Int
--       In an equation for ‘it’:
--           it = $$(refineTH 0) :: Refined Positive Int
--   </pre>
--   
--   If it's not evident, the example above indicates a compile-time
--   failure, which means that the checking was done at compile-time, thus
--   introducing a zero runtime overhead compared to a plain value
--   construction.
refineTH :: (Predicate p x, Lift x) => x -> Q (TExp (Refined p x))

-- | Extracts the refined value.
unrefine :: Refined p x -> x

-- | A class which defines a runtime interpretation of a type-level
--   predicate <tt>p</tt> for type <tt>x</tt>.
class Predicate p x
validate :: Predicate p x => p -> x -> Maybe String

-- | A logical negation of a predicate.
data Not r

-- | A logical conjunction predicate, composed of two other predicates.
data And l r

-- | A logical disjunction predicate, composed of two other predicates.
data Or l r

-- | A predicate, which ensures that a value is less than the specified
--   type-level number.
data LessThan (n :: Nat)

-- | A predicate, which ensures that a value is greater than the specified
--   type-level number.
data GreaterThan (n :: Nat)

-- | A predicate, which ensures that a value equals to the specified
--   type-level number.
data EqualTo (n :: Nat)

-- | A predicate, which ensures that the value is greater than zero.
type Positive = GreaterThan 0

-- | A predicate, which ensures that the value is less than zero.
type Negative = LessThan 0

-- | A range of values from zero to one, including both.
type ZeroToOne = And (Not (LessThan 0)) (Not (GreaterThan 1))
instance Typeable Refined
instance Show x => Show (Refined p x)
instance Read x => Read (Refined p x)
instance Eq x => Eq (Refined p x)
instance Ord x => Ord (Refined p x)
instance (Data p, Data x) => Data (Refined p x)
instance Generic (Refined p x)
instance Datatype D1Refined
instance Constructor C1_0Refined
instance (Ord x, Num x, KnownNat n) => Predicate (EqualTo n) x
instance (Ord x, Num x, KnownNat n) => Predicate (GreaterThan n) x
instance (Ord x, Num x, KnownNat n) => Predicate (LessThan n) x
instance (Predicate l x, Predicate r x) => Predicate (Or l r) x
instance (Predicate l x, Predicate r x) => Predicate (And l r) x
instance Predicate r x => Predicate (Not r) x
instance Lift x => Lift (Refined p x)
