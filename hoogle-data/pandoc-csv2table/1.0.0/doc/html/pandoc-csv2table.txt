-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convert CSV to Pandoc Table Markdown
--   
@package pandoc-csv2table
@version 1.0.0


-- | Definition of <a>Table</a> data structure for internal representation.
module Text.Table.Definition

-- | Type of the <a>Table</a>.
data TableType
Simple :: TableType
Multiline :: TableType
Grid :: TableType
Pipe :: TableType

-- | Position of the caption.
data CaptionPos
BeforeTable :: CaptionPos
AfterTable :: CaptionPos

-- | Alignment of a Column in the Table. Not all TableTypes support column
--   alignments.
data Align
LeftAlign :: Align
RightAlign :: Align
CenterAlign :: Align
DefaultAlign :: Align

-- | A cell in a table has column span, cell width, cell alignment and the
--   number of lines.
--   
--   <ul>
--   <li><b>Span:</b> Number of lines spanned by the cell.</li>
--   <li><b>Width:</b> Width of the column this cell is contained
--   inside</li>
--   <li><b>Align:</b> Alignment of the content inside the cells</li>
--   <li><b>Lines:</b> A list of strings where each string represents a
--   line</li>
--   </ul>
data Cell
Cell :: Span -> Width -> Align -> Lines -> Cell

-- | A Row contains a list of Cells.
data Row
Row :: [Cell] -> Row

-- | A Column contain information about its width and alignment.
--   
--   <ul>
--   <li><b>Width:</b> Character length of the widest <a>Cell</a> in a
--   <a>Column</a>.</li>
--   <li><b>Align:</b> Alignment of the cells inside this column</li>
--   </ul>
data Column
Column :: Width -> Align -> Column

-- | A Header contains a Row if present, otherwise NoHeader.
data Header
Header :: Row -> Header
NoHeader :: Header

-- | A Table has a caption, information about each column's width and
--   alignment, either a header with a row or no header, and a series of
--   rows.
data Table
Table :: Caption -> [Column] -> Header -> [Row] -> Table
type Span = Int
type Width = Int
type Gutter = Int
type Lines = [String]
type Caption = String
type AtrName = String
type AtrValue = String
type Atrs = [(AtrName, AtrValue)]
instance Eq TableType
instance Show TableType
instance Show CaptionPos
instance Show Align
instance Show Cell
instance Show Row
instance Show Column
instance Show Header
instance Show Table


-- | Functions for building Tables and converting them to markdown.
module Text.Table.Builder
mkTable :: Caption -> [Align] -> Bool -> [Lines] -> Table
toMarkdown :: TableType -> CaptionPos -> Table -> String

-- | Position of the caption.
data CaptionPos
BeforeTable :: CaptionPos
AfterTable :: CaptionPos
type Atrs = [(AtrName, AtrValue)]


-- | This helper module exports functions extract values from Pandoc AST
--   and build Pandoc Document from CSV.
module Text.Table.Helper

-- | Add Inline from Image into Table as the caption
addInlineLabel :: [Inline] -> Pandoc -> Pandoc
getTableType :: [Inline] -> TableType
toTableType :: String -> TableType

-- | Parse Config String for alignment information
getAligns :: [Inline] -> [Align]

-- | Whether to treat first line of CSV as a header or not.
isHeaderPresent :: [Inline] -> Bool
isHeaderPresent1 :: String -> Bool

-- | Remove Str Inline from caption
removeConfigString :: [Inline] -> [Inline]

-- | Extracts Blocks from Pandoc Document
toBlocks :: Pandoc -> [Block]

-- | Get value of attribute
getAtr :: AtrName -> Atrs -> AtrValue
toAlign :: String -> [Align]

-- | Make Pandoc Table from Image Inline
tableFromImageInline :: [Inline] -> CSV -> Pandoc

-- | Make Pandoc Table from Code Block
tableFromCodeBlock :: Atrs -> CSV -> Pandoc
