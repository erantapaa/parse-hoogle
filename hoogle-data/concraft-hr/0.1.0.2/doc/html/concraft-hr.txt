-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Part-of-speech tagger for Croatian
--   
--   A part-of-speech tagger for Croatian based on the concraft library.
@package concraft-hr
@version 0.1.0.2


-- | Morphosyntax data layer in Croatian.
module NLP.Concraft.Croatian.Morphosyntax

-- | Given a tagset and a list of words it packs them into <a>Sent</a> data
--   from, used by the tagging model. It is assumedd that all of the tags
--   do not have any prior probabilites. If this was used on the training
--   set the function wouldn't differentiate correct from possible tags.
packSent :: ListLike a => Tagset -> [a] -> Sent Word Tag

-- | Packs the training data to sentences with the first tag having the
--   highest probability. Suitable for using on the training set.
packSentT :: ListLike a => Tagset -> [a] -> Sent Word Tag

-- | Given a sentence and a list of tags for each word this function adds
--   the tags.
addAnalysis :: Sent Word Tag -> [Set Tag] -> Sent Word Tag

-- | Extracts sentences from a given input. Rarely used since it's not
--   always the case that we can assume the sentences are separated only by
--   two newline characters.
extractSentences :: ListLike a => a -> [[a]]

-- | Transforms a given string to a model suited string. Ex. Nsmnn -&gt;
--   N:s:m:n:n, or Vmp-sf -&gt; V:m:p:9:s:f, all <a>-</a> to '9'.
transformToConfig :: ListLike a => a -> a

-- | Representation of a word.
data Word
Word :: Text -> Bool -> Word

-- | Orthographic (plainly normal) form.
orth :: Word -> Text

-- | Indicates whether a word is out-of-dictionary or not. It is assumed
--   that the word is out-of-dictionary if no tags were provided for the
--   word. If additional analysis gives a non-empty set of possible tags
--   this value should (and is in this tagger) change the value
--   accordingly.
oov :: Word -> Bool

-- | Used to allow use of same functions on lazy and strict inputs. It is
--   assumed that the function behave as they do in <a>Text</a>,
--   <a>Text</a> or <a>String</a> modules.
class IsString a => ListLike a
tcintersperse :: ListLike a => Char -> a -> a
tcmap :: ListLike a => (Char -> Char) -> a -> a
strict :: ListLike a => a -> Text
tcwords :: ListLike a => a -> [a]
tcsplitOn :: ListLike a => a -> a -> [a]
tcnull :: ListLike a => a -> Bool
tclines :: ListLike a => a -> [a]
instance Show Word
instance Generic Word
instance Eq Word
instance Ord Word
instance Datatype D1Word
instance Constructor C1_0Word
instance Selector S1_0_0Word
instance Selector S1_0_1Word
instance ListLike Text
instance ListLike Text
instance (Binary a, Binary b) => Binary (Seg a b)
instance ToJSON Word
instance FromJSON Word
instance Binary Word
instance Word Word

module NLP.Concraft.Croatian

-- | Concraft data.
data Concraft :: *

-- | Save model in a file. Data is compressed using the gzip format.
saveModel :: FilePath -> Concraft -> IO ()

-- | Load model from a file.
loadModel :: FilePath -> IO Concraft

-- | Tag the analysed sentence. it is expected that the result of the
--   tagging is a list of tuples <tt>(a,b)</tt> the set of possible tags
--   (which were guessed by the guessing model or as a result of analysis
--   from the <tt>Analyzer</tt>) <tt>a</tt>, and the disambiguated tag
--   <tt>b</tt>.
tag :: Concraft -> Sent Word Tag -> [(Set Tag, Tag)]

-- | Tag the sentence with marginal probabilities. The resulting sentence
--   contains the probabilites of each tag given in the set.
marginals :: Concraft -> Sent Word Tag -> Sent Word Tag

-- | Training configuration.
data TrainConf
TrainConf :: Tagset -> SgdArgs -> SgdArgs -> Bool -> Bool -> Int -> R0T -> TrainConf

-- | Tagset.
tagset :: TrainConf -> Tagset

-- | SGD parameters for the guessing model.
gSgdArgs :: TrainConf -> SgdArgs

-- | SGD parameters for the disambiguation model.
dSgdArgs :: TrainConf -> SgdArgs

-- | Perform reanalysis.
reana :: TrainConf -> Bool

-- | Store SGD dataset on disk.
onDisk :: TrainConf -> Bool

-- | Number of guessed tags for each word. The guessing model will output
--   the possible tags with their probabilities. The first <a>guessNum</a>,
--   sorted in the descending order by the probability, will form the whole
--   set of possible tags.
guessNum :: TrainConf -> Int

-- | <a>r0T</a> parameter.
r0 :: TrainConf -> R0T

-- | Begins the training of the model, if evaluation data is supplied, the
--   periodic report will contain an optimistic accuracy of the model.
--   Optimistic in the sense of taking the given correct tag and set of
--   possible tags as the complete results of the analysis. It is possible
--   that the morphosyntactic analyzer used to provide the set of possible
--   tags doesn't include the correct tag in the set. Hence, the optimistic
--   accuracy report.
train :: TrainConf -> IO [Sent Word Tag] -> IO [Sent Word Tag] -> IO Concraft

-- | Prune disambiguation model: discard model features with absolute
--   values (in log-domain) lower than the given threshold.
prune :: Double -> Concraft -> Concraft

module NLP.Concraft.Croatian.Request

-- | A request with configuration.
newtype Request t
Request :: t -> Request t

-- | The actual request.
rqBody :: Request t -> t

-- | A type of tagging work which is requested.
data TagWork
Marginal :: [Sent Word Tag] -> TagWork
PlainTag :: [Sent Word Tag] -> TagWork
MarginalA :: [Sent Word Tag] -> TagWork
PlainTagA :: [Sent Word Tag] -> TagWork

-- | Process the short request with or without analysis.
short :: Analyzer -> Concraft -> Request TagWork -> IO (Either [Sent Word Tag] [[(Set Tag, Tag)]])
instance Binary TagWork
instance Binary t => Binary (Request t)

module NLP.Concraft.Croatian.Server

-- | Run a Concraft server on a given port.
runConcraftServer :: Analyzer -> Concraft -> PortID -> IO ()

-- | Submit the given request.
submit :: HostName -> PortID -> Request TagWork -> IO (Either [Sent Word Tag] [[(Set Tag, Tag)]])
