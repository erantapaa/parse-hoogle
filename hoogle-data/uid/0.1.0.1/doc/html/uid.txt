-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple unique identifier datatype, serializable and encodable as base32
--   
--   A simple unique identiier, serializable to binary and JSON, and since
--   base32 is a primary encoding, renders in URLs without any further
--   encoding.
@package uid
@version 0.1.0.1


-- | A <a>UID</a> is a unique identifier, generated from
--   <a>Data.UUID.V4</a>.
--   
--   These identifiers are designed for easy presentation as Base32, using
--   <a>Codec.Binary.Base32</a>, and for transport in a JSON format using
--   <a>Data.Aeson</a>.
--   
--   The primary constructor, <a>newUID</a>, runs in the <a>IO</a> monad,
--   primarily because of its use of a random number generator during
--   construction. If all you need is a unique string, then
--   <a>newUIDString</a> is just a wrapper that creates a new UID and then
--   invokes <a>toBase32</a> on it.
module Data.UID

-- | A new, randomly generated identifier
data UID

-- | Construct a new unique identifier.
newUID :: IO UID

-- | Construct a new identifier and immediately convert to its base32
--   representation using <a>toBase32</a>
newUIDString :: IO String

-- | Convert a base32 <a>String</a> representation of the <a>UID</a> back
--   into a UID instance.
fromBase32 :: String -> UID

-- | Convert the <a>UID</a> into a base32 <a>String</a> representation'.
toBase32 :: UID -> String
instance Typeable UID
instance Typeable InvalidUIDException
instance Eq UID
instance Show InvalidUIDException
instance FromJSON UID
instance ToJSON UID
instance Show UID
instance Exception InvalidUIDException
instance Serialize UID
