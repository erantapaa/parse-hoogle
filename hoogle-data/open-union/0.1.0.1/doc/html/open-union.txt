-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Extensible, type-safe unions.
--   
@package open-union
@version 0.1.0.1


-- | Exposed internals for Data.OpenUnion
module Data.OpenUnion.Internal

-- | The <tt>Union</tt> type - the phantom parameter <tt>s</tt> is a list
--   of types denoting what this <tt>Union</tt> might contain. The value
--   contained is one of those types.
newtype Union (s :: [*])
Union :: Dynamic -> Union

-- | There exists a <tt>s :&lt; s'</tt> instance if every type in the list
--   <tt>s</tt> can be lifted to <tt>s'</tt>.
class (:<) (s :: [*]) (s' :: [*])

-- | Remove a type from anywhere in the list.

-- | <a>restrict</a> in right-fixable style.
(@>) :: Typeable a => (a -> b) -> (Union (s :\ a) -> b) -> Union s -> b
liftUnion :: (Typeable a, '[a] :< s) => a -> Union s

-- | Generalize a <tt>Union</tt>.
reUnion :: s :< s' => Union s -> Union s'

-- | Narrow down a <tt>Union</tt>.
restrict :: Typeable a => Union s -> Either (Union (s :\ a)) a

-- | Use this in places where all the <tt>Union</tt>ed options have been
--   exhausted.
typesExhausted :: Union [] -> a
instance [incoherent] (s :< s', '[a] :< s', Typeable a) => (a : s) :< s'
instance [incoherent] (s :< s', Typeable a) => (a : s) :< (a : s')
instance [incoherent] '[] :< s


-- | Flexible, type-safe open unions.
module Data.OpenUnion

-- | The <tt>Union</tt> type - the phantom parameter <tt>s</tt> is a list
--   of types denoting what this <tt>Union</tt> might contain. The value
--   contained is one of those types.
data Union (s :: [*])

-- | There exists a <tt>s :&lt; s'</tt> instance if every type in the list
--   <tt>s</tt> can be lifted to <tt>s'</tt>.
class (:<) (s :: [*]) (s' :: [*])

-- | Remove a type from anywhere in the list.

-- | <a>restrict</a> in right-fixable style.
(@>) :: Typeable a => (a -> b) -> (Union (s :\ a) -> b) -> Union s -> b
liftUnion :: (Typeable a, '[a] :< s) => a -> Union s

-- | Generalize a <tt>Union</tt>.
reUnion :: s :< s' => Union s -> Union s'

-- | Narrow down a <tt>Union</tt>.
restrict :: Typeable a => Union s -> Either (Union (s :\ a)) a

-- | Use this in places where all the <tt>Union</tt>ed options have been
--   exhausted.
typesExhausted :: Union [] -> a
