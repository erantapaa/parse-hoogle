-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Caching mandatory data with Redis
--   
--   Solution for caching mandatory data with Redis.
@package hedis-pile
@version 0.6.3


-- | Solution for caching mandatory data with Redis.
--   
--   In many cases, requires not just pick up or put the data into the
--   cache. As a rule, data are required.
--   
--   ... check the cache ... if the value is missing, run the calculations
--   ... put value to cache ... Tedious
--   
--   Solution is quite simple - collapse all of these steps in one
--   operation.
module Database.Redis.Pile

-- | Stores computation results in Redis. Computation fires only if data
--   absent in cache. Of course, to refresh the data, they must first
--   remove it from the cache.
--   
--   Computation controls everything except prefix and key.
--   
--   In background data is stored in Redis as HashSet with two fields:
--   <tt>d</tt> for serialized data and <tt>e</tt> for expect field.
--   
--   Time complexity depends on the situation.
--   
--   <ul>
--   <li><tt>O(2)</tt> data exists in cache, expect matches.</li>
--   <li><tt>O(2)</tt> data exists in cache, expect value is
--   <a>Nothing</a>.</li>
--   <li><tt>O(3)</tt> data exists in cache, but expect value not matches
--   value in cache.</li>
--   <li>In all other cases time complexity does not make sense</li>
--   </ul>
pile :: (MonadIO ma, RedisCtx ma (Either t), Binary d) => ByteString -> ByteString -> Maybe ByteString -> (forall mb. MonadIO mb => mb (d, ByteString, [ByteString], Integer)) -> ma (Maybe d)
