-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Conversion between markup formats
--   
--   OpenPandoc is a variant of Pandoc that supports version 3.0 or later
--   of the parser combinator library Parsec. In all other aspects, the
--   code is unchanged from the original version. A separate package is
--   necessary, unfortunately, as the original author of Pandoc refuses to
--   support current versions of Parsec, because he thinks that they are
--   too slow. It is true that Parsec 3.x is somewhat less performant than
--   the 2.x branch used to be, so if you intend to use Pandoc for
--   formatting huge amounts of data on a regular basis, it might be
--   worthwile to build it with Parsec 2. For everyone else, however, the
--   difference in speed is hardly noticable. Using Parsec 3 is much more
--   convenient, though, because -- unlike the old version -- that package
--   is oftentimes available through your system's packet manager, i.e. in
--   ArchLinux.
--   
--   Generally speaking, Pandoc is a Haskell library for converting from
--   one markup format to another, and a command-line tool that uses this
--   library. It can read markdown and (subsets of) reStructuredText, HTML,
--   and LaTeX, and it can write markdown, reStructuredText, HTML, LaTeX,
--   ConTeXt, Docbook, OpenDocument, ODT, RTF, MediaWiki, groff man pages,
--   and S5 HTML slide shows.
--   
--   Pandoc extends standard markdown syntax with footnotes, embedded
--   LaTeX, definition lists, tables, and other features. A compatibility
--   mode is provided for those who need a drop-in replacement for
--   Markdown.pl.
--   
--   In contrast to existing tools for converting markdown to HTML, which
--   use regex substitutions, pandoc has a modular design: it consists of a
--   set of readers, which parse text in a given format and produce a
--   native representation of the document, and a set of writers, which
--   convert this native representation into a target format. Thus, adding
--   an input or output format requires only adding a reader or writer.
@package open-pandoc
@version 1.5.1.1


-- | Functions for parsing character references.
module Text.Pandoc.CharacterReferences

-- | Parse character entity.
characterReference :: GenParser Char st Char

-- | Convert entities in a string to characters.
decodeCharacterReferences :: String -> String


-- | Functions for the manipulation of fixed-width blocks of text. These
--   are used in the construction of plain-text tables.
module Text.Pandoc.Blocks

-- | A fixed-width block of text. Parameters are width of block, height of
--   block, and list of lines.
data TextBlock
TextBlock :: Int -> Int -> [String] -> TextBlock

-- | Convert a <tt>Doc</tt> element into a <tt>TextBlock</tt> with a
--   specified width.
docToBlock :: Int -> Doc -> TextBlock

-- | Convert a <tt>TextBlock</tt> to a <tt>Doc</tt> element.
blockToDoc :: TextBlock -> Doc

-- | Returns width of a <tt>TextBlock</tt> (number of columns).
widthOfBlock :: TextBlock -> Int

-- | Returns height of a <tt>TextBlock</tt> (number of rows).
heightOfBlock :: TextBlock -> Int

-- | Concatenates a list of <tt>TextBlock</tt>s into a new
--   <tt>TextBlock</tt> in which they appear side by side.
hcatBlocks :: [TextBlock] -> TextBlock

-- | Like <tt>hcatBlocks</tt>, but inserts space between the
--   <tt>TextBlock</tt>s.
hsepBlocks :: [TextBlock] -> TextBlock

-- | Centers the contents of a <tt>TextBlock</tt> within the block.
centerAlignBlock :: TextBlock -> TextBlock

-- | Left-aligns the contents of a <tt>TextBlock</tt> within the block.
leftAlignBlock :: TextBlock -> TextBlock

-- | Right-aligns the contents of a <tt>TextBlock</tt> within the block.
rightAlignBlock :: TextBlock -> TextBlock
instance Show TextBlock


-- | Functions for producing an ODT file from OpenDocument XML.
module Text.Pandoc.ODT

-- | Produce an ODT file from OpenDocument XML.
saveOpenDocumentAsODT :: Maybe FilePath -> FilePath -> FilePath -> Maybe FilePath -> String -> IO ()


-- | Definition of <a>Pandoc</a> data structure for format-neutral
--   representation of documents.
module Text.Pandoc.Definition
data Pandoc
Pandoc :: Meta -> [Block] -> Pandoc

-- | Bibliographic information for the document: title, authors, date.
data Meta
Meta :: [Inline] -> [[Inline]] -> [Inline] -> Meta
docTitle :: Meta -> [Inline]
docAuthors :: Meta -> [[Inline]]
docDate :: Meta -> [Inline]

-- | Alignment of a table column.
data Alignment
AlignLeft :: Alignment
AlignRight :: Alignment
AlignCenter :: Alignment
AlignDefault :: Alignment

-- | List attributes.
type ListAttributes = (Int, ListNumberStyle, ListNumberDelim)

-- | Style of list numbers.
data ListNumberStyle
DefaultStyle :: ListNumberStyle
Decimal :: ListNumberStyle
LowerRoman :: ListNumberStyle
UpperRoman :: ListNumberStyle
LowerAlpha :: ListNumberStyle
UpperAlpha :: ListNumberStyle

-- | Delimiter of list numbers.
data ListNumberDelim
DefaultDelim :: ListNumberDelim
Period :: ListNumberDelim
OneParen :: ListNumberDelim
TwoParens :: ListNumberDelim

-- | Attributes: identifier, classes, key-value pairs
type Attr = (String, [String], [(String, String)])

-- | Block element.
data Block

-- | Plain text, not a paragraph
Plain :: [Inline] -> Block

-- | Paragraph
Para :: [Inline] -> Block

-- | Code block (literal) with attributes
CodeBlock :: Attr -> String -> Block

-- | Raw HTML block (literal)
RawHtml :: String -> Block

-- | Block quote (list of blocks)
BlockQuote :: [Block] -> Block

-- | Ordered list (attributes and a list of items, each a list of blocks)
OrderedList :: ListAttributes -> [[Block]] -> Block

-- | Bullet list (list of items, each a list of blocks)
BulletList :: [[Block]] -> Block

-- | Definition list Each list item is a pair consisting of a term (a list
--   of inlines) and one or more definitions (each a list of blocks)
DefinitionList :: [([Inline], [[Block]])] -> Block

-- | Header - level (integer) and text (inlines)
Header :: Int -> [Inline] -> Block

-- | Horizontal rule
HorizontalRule :: Block

-- | Table, with caption, column alignments, relative column widths (0 =
--   default), column headers (each a list of blocks), and rows (each a
--   list of lists of blocks)
Table :: [Inline] -> [Alignment] -> [Double] -> [[Block]] -> [[[Block]]] -> Block

-- | Nothing
Null :: Block

-- | Type of quotation marks to use in Quoted inline.
data QuoteType
SingleQuote :: QuoteType
DoubleQuote :: QuoteType

-- | Link target (URL, title).
type Target = (String, String)

-- | Type of math element (display or inline).
data MathType
DisplayMath :: MathType
InlineMath :: MathType

-- | Inline elements.
data Inline

-- | Text (string)
Str :: String -> Inline

-- | Emphasized text (list of inlines)
Emph :: [Inline] -> Inline

-- | Strongly emphasized text (list of inlines)
Strong :: [Inline] -> Inline

-- | Strikeout text (list of inlines)
Strikeout :: [Inline] -> Inline

-- | Superscripted text (list of inlines)
Superscript :: [Inline] -> Inline

-- | Subscripted text (list of inlines)
Subscript :: [Inline] -> Inline

-- | Small caps text (list of inlines)
SmallCaps :: [Inline] -> Inline

-- | Quoted text (list of inlines)
Quoted :: QuoteType -> [Inline] -> Inline

-- | Citation (list of inlines)
Cite :: [Target] -> [Inline] -> Inline

-- | Inline code (literal)
Code :: String -> Inline

-- | Inter-word space
Space :: Inline

-- | Em dash
EmDash :: Inline

-- | En dash
EnDash :: Inline

-- | Apostrophe
Apostrophe :: Inline

-- | Ellipses
Ellipses :: Inline

-- | Hard line break
LineBreak :: Inline

-- | TeX math (literal)
Math :: MathType -> String -> Inline

-- | LaTeX code (literal)
TeX :: String -> Inline

-- | HTML code (literal)
HtmlInline :: String -> Inline

-- | Hyperlink: text (list of inlines), target
Link :: [Inline] -> Target -> Inline

-- | Image: alt text (list of inlines), target and target
Image :: [Inline] -> Target -> Inline

-- | Footnote or endnote
Note :: [Block] -> Inline

-- | Applies a transformation on <tt>a</tt>s to matching elements in a
--   <tt>b</tt>.
processWith :: (Data a, Data b) => (a -> a) -> b -> b

-- | Like <a>processWith</a>, but with monadic transformations.
processWithM :: (Monad m, Data a, Data b) => (a -> m a) -> b -> m b

-- | Runs a query on matching <tt>a</tt> elements in a <tt>c</tt>.
queryWith :: (Data a, Data c) => (a -> [b]) -> c -> [b]
processPandoc :: (Data a) => (a -> a) -> Pandoc -> Pandoc
queryPandoc :: (Data a) => (a -> [b]) -> Pandoc -> [b]
instance Typeable Inline
instance Typeable MathType
instance Typeable QuoteType
instance Typeable Block
instance Typeable ListNumberDelim
instance Typeable ListNumberStyle
instance Typeable Alignment
instance Typeable Meta
instance Typeable Pandoc
instance Show Inline
instance Eq Inline
instance Read Inline
instance Data Inline
instance Show MathType
instance Eq MathType
instance Read MathType
instance Data MathType
instance Show QuoteType
instance Eq QuoteType
instance Read QuoteType
instance Data QuoteType
instance Eq Block
instance Read Block
instance Show Block
instance Data Block
instance Eq ListNumberDelim
instance Show ListNumberDelim
instance Read ListNumberDelim
instance Data ListNumberDelim
instance Eq ListNumberStyle
instance Show ListNumberStyle
instance Read ListNumberStyle
instance Data ListNumberStyle
instance Eq Alignment
instance Show Alignment
instance Read Alignment
instance Data Alignment
instance Eq Meta
instance Show Meta
instance Read Meta
instance Data Meta
instance Eq Pandoc
instance Read Pandoc
instance Show Pandoc
instance Data Pandoc


-- | Utility functions and definitions used by the various Pandoc modules.
module Text.Pandoc.Shared

-- | Split list by groups of one or more sep.
splitBy :: (Eq a) => a -> [a] -> [[a]]

-- | Split list into chunks divided at specified indices.
splitByIndices :: [Int] -> [a] -> [[a]]

-- | Replace each occurrence of one sublist in a list with another.
substitute :: (Eq a) => [a] -> [a] -> [a] -> [a]

-- | Returns an association list of backslash escapes for the designated
--   characters.
backslashEscapes :: [Char] -> [(Char, String)]

-- | Escape a string of characters, using an association list of characters
--   and strings.
escapeStringUsing :: [(Char, String)] -> String -> String

-- | Strip trailing newlines from string.
stripTrailingNewlines :: String -> String

-- | Remove leading and trailing space (including newlines) from string.
removeLeadingTrailingSpace :: String -> String

-- | Remove leading space (including newlines) from string.
removeLeadingSpace :: String -> String

-- | Remove trailing space (including newlines) from string.
removeTrailingSpace :: String -> String

-- | Strip leading and trailing characters from string
stripFirstAndLast :: String -> String

-- | Change CamelCase word to hyphenated lowercase (e.g., camel-case).
camelCaseToHyphenated :: String -> String

-- | Convert number &lt; 4000 to uppercase roman numeral.
toRomanNumeral :: Int -> String

-- | Escape unicode characters in a URI. Characters that are already valid
--   in a URI, including % and ?, are left alone.
escapeURI :: String -> String

-- | Unescape unicode and some special characters in a URI, but without
--   introducing spaces.
unescapeURI :: String -> String

-- | Wrap inlines to line length.
wrapped :: (Monad m) => ([Inline] -> m Doc) -> [Inline] -> m Doc

-- | Wrap inlines if the text wrap option is selected.
wrapIfNeeded :: (Monad m) => WriterOptions -> ([Inline] -> m Doc) -> [Inline] -> m Doc

-- | Wrap inlines to line length, treating footnotes in a way that makes
--   sense in LaTeX and ConTeXt.
wrappedTeX :: (Monad m) => Bool -> ([Inline] -> m Doc) -> [Inline] -> m Doc

-- | Wrap inlines if the text wrap option is selected, specialized for
--   LaTeX and ConTeXt.
wrapTeXIfNeeded :: (Monad m) => WriterOptions -> Bool -> ([Inline] -> m Doc) -> [Inline] -> m Doc

-- | Indicates whether block should be surrounded by blank lines
--   (<tt>Pad</tt>) or not (<tt>Reg</tt>).
data BlockWrapper
Pad :: Doc -> BlockWrapper
Reg :: Doc -> BlockWrapper

-- | Converts a list of wrapped blocks to a Doc, with appropriate spaces
--   around blocks.
wrappedBlocksToDoc :: [BlockWrapper] -> Doc

-- | Convert tabs to spaces and filter out DOS line endings. Tabs will be
--   preserved if tab stop is set to 0.
tabFilter :: Int -> String -> String

-- | Like &gt;&gt;, but returns the operation on the left. (Suggested by
--   Tillmann Rendel on Haskell-cafe list.)
(>>~) :: (Monad m) => m a -> m b -> m a

-- | Parse any line of text
anyLine :: GenParser Char st [Char]

-- | Like <tt>manyTill</tt>, but reads at least one item.
many1Till :: GenParser tok st a -> GenParser tok st end -> GenParser tok st [a]

-- | A more general form of <tt>notFollowedBy</tt>. This one allows any
--   type of parser to be specified, and succeeds only if that parser
--   fails. It does not consume any input.
notFollowedBy' :: (Show b) => GenParser a st b -> GenParser a st ()

-- | Parses one of a list of strings (tried in order).
oneOfStrings :: [String] -> GenParser Char st String

-- | Parses a space or tab.
spaceChar :: CharParser st Char

-- | Skips zero or more spaces or tabs.
skipSpaces :: GenParser Char st ()

-- | Skips zero or more spaces or tabs, then reads a newline.
blankline :: GenParser Char st Char

-- | Parses one or more blank lines and returns a string of newlines.
blanklines :: GenParser Char st [Char]

-- | Parses material enclosed between start and end parsers.
enclosed :: GenParser Char st t -> GenParser Char st end -> GenParser Char st a -> GenParser Char st [a]

-- | Parse string, case insensitive.
stringAnyCase :: [Char] -> CharParser st String

-- | Parse contents of <tt>str</tt> using <tt>parser</tt> and return
--   result.
parseFromString :: GenParser tok st a -> [tok] -> GenParser tok st a

-- | Parse raw line block up to and including blank lines.
lineClump :: GenParser Char st String

-- | Parse a string of characters between an open character and a close
--   character, including text between balanced pairs of open and close,
--   which must be different. For example, <tt>charsInBalanced '(' ')'</tt>
--   will parse <a>(hello (there))</a> and return <a>hello (there)</a>.
--   Stop if a blank line is encountered.
charsInBalanced :: Char -> Char -> GenParser Char st String

-- | Like <tt>charsInBalanced</tt>, but allow blank lines in the content.
charsInBalanced' :: Char -> Char -> GenParser Char st String

-- | Parses a roman numeral (uppercase or lowercase), returns number.
romanNumeral :: Bool -> GenParser Char st Int

-- | Parses an email address; returns original and corresponding escaped
--   mailto: URI.
emailAddress :: GenParser Char st (String, String)

-- | Parses a URI. Returns pair of original and URI-escaped version.
uri :: GenParser Char st (String, String)

-- | Applies a parser, returns tuple of its results and its horizontal
--   displacement (the difference between the source column at the end and
--   the source column at the beginning). Vertical displacement (source
--   row) is ignored.
withHorizDisplacement :: GenParser Char st a -> GenParser Char st (a, Int)

-- | Parses a character and returns <a>Null</a> (so that the parser can
--   move on if it gets stuck).
nullBlock :: GenParser Char st Block

-- | Fail if reader is in strict markdown syntax mode.
failIfStrict :: GenParser Char ParserState ()

-- | Fail unless we're in literate haskell mode.
failUnlessLHS :: GenParser tok ParserState ()

-- | Parses backslash, then applies character parser.
escaped :: GenParser Char st Char -> GenParser Char st Inline

-- | Parses an ordered list marker and returns list attributes.
anyOrderedListMarker :: GenParser Char st ListAttributes

-- | Parses an ordered list marker with a given style and delimiter,
--   returns number.
orderedListMarker :: ListNumberStyle -> ListNumberDelim -> GenParser Char st Int

-- | Parses a character reference and returns a Str element.
charRef :: GenParser Char st Inline

-- | Parse a string with a given parser and state.
readWith :: GenParser Char ParserState a -> ParserState -> String -> a

-- | Parse a string with <tt>parser</tt> (for testing).
testStringWith :: (Show a) => GenParser Char ParserState a -> String -> IO ()

-- | Parsing options.
data ParserState
ParserState :: Bool -> ParserContext -> QuoteContext -> Bool -> KeyTable -> NoteTable -> Int -> Bool -> [Inline] -> [[Inline]] -> [Inline] -> Bool -> Bool -> Bool -> Int -> [HeaderType] -> [String] -> ParserState

-- | Parse raw HTML and LaTeX?
stateParseRaw :: ParserState -> Bool

-- | Inside list?
stateParserContext :: ParserState -> ParserContext

-- | Inside quoted environment?
stateQuoteContext :: ParserState -> QuoteContext

-- | Sanitize HTML?
stateSanitizeHTML :: ParserState -> Bool

-- | List of reference keys
stateKeys :: ParserState -> KeyTable

-- | List of notes
stateNotes :: ParserState -> NoteTable

-- | Tab stop
stateTabStop :: ParserState -> Int

-- | Parse bibliographic info?
stateStandalone :: ParserState -> Bool

-- | Title of document
stateTitle :: ParserState -> [Inline]

-- | Authors of document
stateAuthors :: ParserState -> [[Inline]]

-- | Date of document
stateDate :: ParserState -> [Inline]

-- | Use strict markdown syntax?
stateStrict :: ParserState -> Bool

-- | Use smart typography?
stateSmart :: ParserState -> Bool

-- | Treat input as literate haskell
stateLiterateHaskell :: ParserState -> Bool

-- | Number of columns in terminal
stateColumns :: ParserState -> Int

-- | Ordered list of header types used
stateHeaderTable :: ParserState -> [HeaderType]

-- | Classes to use for indented code blocks
stateIndentedCodeClasses :: ParserState -> [String]
defaultParserState :: ParserState
data HeaderType

-- | Single line of characters underneath
SingleHeader :: Char -> HeaderType

-- | Lines of characters above and below
DoubleHeader :: Char -> HeaderType
data ParserContext

-- | Used when running parser on list item contents
ListItemState :: ParserContext

-- | Default state
NullState :: ParserContext
data QuoteContext

-- | Used when parsing inside single quotes
InSingleQuote :: QuoteContext

-- | Used when parsing inside double quotes
InDoubleQuote :: QuoteContext

-- | Used when not parsing inside quotes
NoQuote :: QuoteContext
type NoteTable = [(String, String)]
type KeyTable = [([Inline], Target)]

-- | Look up key in key table and return target object.
lookupKeySrc :: KeyTable -> [Inline] -> Maybe Target

-- | Returns <tt>True</tt> if keys match (case insensitive).
refsMatch :: [Inline] -> [Inline] -> Bool

-- | A version of hang that works like the version in pretty-1.0.0.0
hang' :: Doc -> Int -> Doc -> Doc

-- | Prettyprint Pandoc document.
prettyPandoc :: Pandoc -> String

-- | Generate infinite lazy list of markers for an ordered list, depending
--   on list attributes.
orderedListMarkers :: (Int, ListNumberStyle, ListNumberDelim) -> [String]

-- | Normalize a list of inline elements: remove leading and trailing
--   <tt>Space</tt> elements, collapse double <tt>Space</tt>s into singles,
--   and remove empty Str elements.
normalizeSpaces :: [Inline] -> [Inline]

-- | Change final list item from <tt>Para</tt> to <tt>Plain</tt> if the
--   list contains no other <tt>Para</tt> blocks.
compactify :: [[Block]] -> [[Block]]

-- | Data structure for defining hierarchical Pandoc documents
data Element
Blk :: Block -> Element
Sec :: Int -> [Int] -> String -> [Inline] -> [Element] -> Element

-- | Convert list of Pandoc blocks into (hierarchical) list of Elements
hierarchicalize :: [Block] -> [Element]

-- | Generate a unique identifier from a list of inlines. Second argument
--   is a list of already used identifiers.
uniqueIdent :: [Inline] -> [String] -> String

-- | True if block is a Header block.
isHeaderBlock :: Block -> Bool
data HTMLMathMethod
PlainMath :: HTMLMathMethod
LaTeXMathML :: (Maybe String) -> HTMLMathMethod
JsMath :: (Maybe String) -> HTMLMathMethod
GladTeX :: HTMLMathMethod
MimeTeX :: String -> HTMLMathMethod
MathML :: (Maybe String) -> HTMLMathMethod

-- | Methods for obfuscating email addresses in HTML.
data ObfuscationMethod
NoObfuscation :: ObfuscationMethod
ReferenceObfuscation :: ObfuscationMethod
JavascriptObfuscation :: ObfuscationMethod

-- | Options for writers
data WriterOptions
WriterOptions :: Bool -> String -> [(String, String)] -> String -> String -> Int -> Bool -> Bool -> Bool -> HTMLMathMethod -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> ObfuscationMethod -> String -> WriterOptions

-- | Include header and footer
writerStandalone :: WriterOptions -> Bool

-- | Template to use in standalone mode
writerTemplate :: WriterOptions -> String

-- | Variables to set in template
writerVariables :: WriterOptions -> [(String, String)]

-- | Text to include before the body
writerIncludeBefore :: WriterOptions -> String

-- | Text to include after the body
writerIncludeAfter :: WriterOptions -> String

-- | Tabstop for conversion btw spaces and tabs
writerTabStop :: WriterOptions -> Int

-- | Include table of contents
writerTableOfContents :: WriterOptions -> Bool

-- | We're writing S5
writerS5 :: WriterOptions -> Bool

-- | Create latex suitable for use by xetex
writerXeTeX :: WriterOptions -> Bool

-- | How to print math in HTML
writerHTMLMathMethod :: WriterOptions -> HTMLMathMethod

-- | Ignore footnotes (used in making toc)
writerIgnoreNotes :: WriterOptions -> Bool

-- | Incremental S5 lists
writerIncremental :: WriterOptions -> Bool

-- | Number sections in LaTeX
writerNumberSections :: WriterOptions -> Bool

-- | Use strict markdown syntax
writerStrictMarkdown :: WriterOptions -> Bool

-- | Use reference links in writing markdown, rst
writerReferenceLinks :: WriterOptions -> Bool

-- | Wrap text to line length
writerWrapText :: WriterOptions -> Bool

-- | Write as literate haskell
writerLiterateHaskell :: WriterOptions -> Bool

-- | How to obfuscate emails
writerEmailObfuscation :: WriterOptions -> ObfuscationMethod

-- | Prefix for section &amp; note ids in HTML
writerIdentifierPrefix :: WriterOptions -> String

-- | Default writer options.
defaultWriterOptions :: WriterOptions

-- | Perform an IO action in a directory, returning to starting directory.
inDirectory :: FilePath -> IO a -> IO a

-- | Read file from specified user data directory or, if not found there,
--   from Cabal data directory.
readDataFile :: Maybe FilePath -> FilePath -> IO String
instance Typeable Element
instance Show WriterOptions
instance Show ObfuscationMethod
instance Read ObfuscationMethod
instance Eq ObfuscationMethod
instance Show HTMLMathMethod
instance Read HTMLMathMethod
instance Eq HTMLMathMethod
instance Eq Element
instance Read Element
instance Show Element
instance Data Element
instance Eq QuoteContext
instance Show QuoteContext
instance Eq ParserContext
instance Show ParserContext
instance Eq HeaderType
instance Show HeaderType
instance Show ParserState


-- | A simple templating system with variable substitution and
--   conditionals. Example:
--   
--   <pre>
--   renderTemplate [("name","Sam"),("salary","50,000")] $
--      "Hi, $name$.  $if(salary)$You make $$$salary$.$else$No salary data.$endif$" 
--   "Hi, John.  You make $50,000."
--   </pre>
--   
--   A slot for an interpolated variable is a variable name surrounded by
--   dollar signs. To include a literal <tt>$</tt> in your template, use
--   <tt>$$</tt>. Variable names must begin with a letter and can contain
--   letters, numbers, <tt>_</tt>, and <tt>-</tt>.
--   
--   The value of a variable will be indented to the same level as the
--   variable.
--   
--   A conditional begins with <tt>$if(variable_name)$</tt> and ends with
--   <tt>$endif$</tt>. It may optionally contain an <tt>$else$</tt>
--   section. The if section is used if <tt>variable_name</tt> has a
--   non-null value, otherwise the else section is used.
--   
--   Conditional keywords should not be indented, or unexpected spacing
--   problems may occur.
--   
--   If a variable name is associated with multiple values in the
--   association list passed to <a>renderTemplate</a>, you may use the
--   <tt>$for$</tt> keyword to iterate over them:
--   
--   <pre>
--   renderTemplate [("name","Sam"),("name","Joe")] $
--     "$for(name)$\nHi, $name$.\n$endfor$"
--   "Hi, Sam.\nHi, Joe."
--   </pre>
--   
--   You may optionally specify separators using <tt>$sep$</tt>:
--   
--   <pre>
--   renderTemplate [("name","Sam"),("name","Joe"),("name","Lynn")] $
--     "Hi, $for(name)$$name$$sep$, $endfor$"
--   "Hi, Sam, Joe, Lynn."
--   </pre>
module Text.Pandoc.Templates

-- | Renders a template
renderTemplate :: (TemplateTarget a) => [(String, String)] -> String -> a
class TemplateTarget a

-- | Get default template for the specified writer.
getDefaultTemplate :: (Maybe FilePath) -> String -> IO (Either IOException String)
instance TemplateTarget Doc
instance TemplateTarget Html
instance TemplateTarget ByteString
instance TemplateTarget String


-- | Conversion from reStructuredText to <a>Pandoc</a> document.
module Text.Pandoc.Readers.RST

-- | Parse reStructuredText string and return Pandoc document.
readRST :: ParserState -> String -> Pandoc


-- | Conversion of LaTeX to <a>Pandoc</a> document.
module Text.Pandoc.Readers.LaTeX

-- | Parse LaTeX from string and return <a>Pandoc</a> document.
readLaTeX :: ParserState -> String -> Pandoc

-- | Parse any LaTeX command and return it in a raw TeX inline element.
rawLaTeXInline :: GenParser Char ParserState Inline

-- | Parse any LaTeX environment and return a string containing the whole
--   literal environment as raw TeX.
rawLaTeXEnvironment' :: GenParser Char st String


-- | Conversion of HTML to <a>Pandoc</a> document.
module Text.Pandoc.Readers.HTML

-- | Convert HTML-formatted string to <a>Pandoc</a> document.
readHtml :: ParserState -> String -> Pandoc
rawHtmlInline :: GenParser Char ParserState Inline
rawHtmlBlock :: GenParser Char ParserState Block
anyHtmlBlockTag :: GenParser Char ParserState [Char]
anyHtmlInlineTag :: GenParser Char ParserState [Char]

-- | Parse any HTML tag (opening or self-closing) and return text of tag
anyHtmlTag :: GenParser Char ParserState [Char]
anyHtmlEndTag :: GenParser Char ParserState [Char]

-- | Parse an end tag of type <tt>tag</tt>
htmlEndTag :: [Char] -> GenParser Char ParserState [Char]

-- | Extract type from a tag: e.g. <tt>br</tt> from <tt>&lt;br&gt;</tt>
extractTagType :: String -> String
htmlBlockElement :: GenParser Char ParserState [Char]

-- | Parses an HTML comment.
htmlComment :: GenParser Char st [Char]

-- | Returns <tt>True</tt> if the specified URI is potentially a security
--   risk.
unsanitaryURI :: String -> Bool


-- | Conversion of markdown-formatted plain text to <a>Pandoc</a> document.
module Text.Pandoc.Readers.Markdown

-- | Read markdown from an input string and return a Pandoc document.
readMarkdown :: ParserState -> String -> Pandoc


-- | Conversion of <a>Pandoc</a> documents to markdown-formatted plain
--   text.
--   
--   Markdown: <a>http://daringfireball.net/projects/markdown/</a>
module Text.Pandoc.Writers.Markdown

-- | Convert Pandoc to Markdown.
writeMarkdown :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc to plain text (like markdown, but without links,
--   pictures, or inline formatting).
writePlain :: WriterOptions -> Pandoc -> String


-- | Conversion of <a>Pandoc</a> documents to reStructuredText.
--   
--   reStructuredText: <a>http://docutils.sourceforge.net/rst.html</a>
module Text.Pandoc.Writers.RST

-- | Convert Pandoc to RST.
writeRST :: WriterOptions -> Pandoc -> String


-- | Conversion of <a>Pandoc</a> format into LaTeX.
module Text.Pandoc.Writers.LaTeX

-- | Convert Pandoc to LaTeX.
writeLaTeX :: WriterOptions -> Pandoc -> String


-- | Conversion of <a>Pandoc</a> format into ConTeXt.
module Text.Pandoc.Writers.ConTeXt

-- | Convert Pandoc to ConTeXt.
writeConTeXt :: WriterOptions -> Pandoc -> String


-- | Conversion of <a>Pandoc</a> documents to groff man page format.
module Text.Pandoc.Writers.Man

-- | Convert Pandoc to Man.
writeMan :: WriterOptions -> Pandoc -> String


-- | Conversion of <a>Pandoc</a> documents to MediaWiki markup.
--   
--   MediaWiki: <a>http://www.mediawiki.org/wiki/MediaWiki</a>
module Text.Pandoc.Writers.MediaWiki

-- | Convert Pandoc to MediaWiki.
writeMediaWiki :: WriterOptions -> Pandoc -> String


-- | Exports functions for syntax highlighting.
module Text.Pandoc.Highlighting
languages :: [String]
highlightHtml :: Attr -> String -> Either String Html
defaultHighlightingCss :: String
languagesByExtension :: String -> [String]


-- | Conversion of TeX math to a list of <a>Pandoc</a> inline elements.
module Text.Pandoc.Readers.TeXMath

-- | Converts a string of raw TeX math to a list of <a>Pandoc</a> inlines.
readTeXMath :: String -> [Inline]


-- | Conversion of <a>Pandoc</a> format into Texinfo.
module Text.Pandoc.Writers.Texinfo

-- | Convert Pandoc to Texinfo.
writeTexinfo :: WriterOptions -> Pandoc -> String


-- | Conversion of <a>Pandoc</a> documents to HTML.
module Text.Pandoc.Writers.HTML

-- | Convert Pandoc document to Html structure.
writeHtml :: WriterOptions -> Pandoc -> Html

-- | Convert Pandoc document to Html string.
writeHtmlString :: WriterOptions -> Pandoc -> String
instance Show WriterState


-- | Definitions for creation of S5 powerpoint-like HTML. (See
--   <a>http://meyerweb.com/eric/tools/s5/</a>.)
module Text.Pandoc.Writers.S5
s5HeaderIncludes :: Maybe FilePath -> IO String
s5Links :: String

-- | Converts Pandoc document to an S5 HTML presentation (Html structure).
writeS5 :: WriterOptions -> Pandoc -> Html

-- | Converts Pandoc document to an S5 HTML presentation (string).
writeS5String :: WriterOptions -> Pandoc -> String

-- | Insert blocks into <a>Pandoc</a> for slide structure.
insertS5Structure :: Pandoc -> Pandoc


-- | Conversion of <a>Pandoc</a> documents to Docbook XML.
module Text.Pandoc.Writers.Docbook

-- | Convert Pandoc document to string in Docbook format.
writeDocbook :: WriterOptions -> Pandoc -> String


-- | Conversion of <a>Pandoc</a> documents to OpenDocument XML.
module Text.Pandoc.Writers.OpenDocument

-- | Convert Pandoc document to string in OpenDocument format.
writeOpenDocument :: WriterOptions -> Pandoc -> String
instance Eq TextStyle
instance Ord TextStyle


-- | Conversion of <a>Pandoc</a> documents to RTF (rich text format).
module Text.Pandoc.Writers.RTF

-- | Convert Pandoc to a string in rich text format.
writeRTF :: WriterOptions -> Pandoc -> String


-- | This helper module exports the main writers, readers, and data
--   structure definitions from the Pandoc libraries.
--   
--   A typical application will chain together a reader and a writer to
--   convert strings from one format to another. For example, the following
--   simple program will act as a filter converting markdown fragments to
--   reStructuredText, using reference-style links instead of inline links:
--   
--   <pre>
--   module Main where
--   import Text.Pandoc
--   -- include the following two lines only if you're using ghc &lt; 6.12:
--   import Prelude hiding (getContents, putStrLn)
--   import System.IO.UTF8
--   
--   markdownToRST :: String -&gt; String
--   markdownToRST =
--     (writeRST defaultWriterOptions {writerReferenceLinks = True}) .
--     readMarkdown defaultParserState
--   
--   main = getContents &gt;&gt;= putStrLn . markdownToRST
--   </pre>
--   
--   Note: all of the readers assume that the input text has <tt>'\n'</tt>
--   line endings. So if you get your input text from a web form, you
--   should remove <tt>'\r'</tt> characters using <tt>filter (/='\r')</tt>.
module Text.Pandoc

-- | Read markdown from an input string and return a Pandoc document.
readMarkdown :: ParserState -> String -> Pandoc

-- | Parse reStructuredText string and return Pandoc document.
readRST :: ParserState -> String -> Pandoc

-- | Parse LaTeX from string and return <a>Pandoc</a> document.
readLaTeX :: ParserState -> String -> Pandoc

-- | Convert HTML-formatted string to <a>Pandoc</a> document.
readHtml :: ParserState -> String -> Pandoc

-- | Parsing options.
data ParserState
ParserState :: Bool -> ParserContext -> QuoteContext -> Bool -> KeyTable -> NoteTable -> Int -> Bool -> [Inline] -> [[Inline]] -> [Inline] -> Bool -> Bool -> Bool -> Int -> [HeaderType] -> [String] -> ParserState

-- | Parse raw HTML and LaTeX?
stateParseRaw :: ParserState -> Bool

-- | Inside list?
stateParserContext :: ParserState -> ParserContext

-- | Inside quoted environment?
stateQuoteContext :: ParserState -> QuoteContext

-- | Sanitize HTML?
stateSanitizeHTML :: ParserState -> Bool

-- | List of reference keys
stateKeys :: ParserState -> KeyTable

-- | List of notes
stateNotes :: ParserState -> NoteTable

-- | Tab stop
stateTabStop :: ParserState -> Int

-- | Parse bibliographic info?
stateStandalone :: ParserState -> Bool

-- | Title of document
stateTitle :: ParserState -> [Inline]

-- | Authors of document
stateAuthors :: ParserState -> [[Inline]]

-- | Date of document
stateDate :: ParserState -> [Inline]

-- | Use strict markdown syntax?
stateStrict :: ParserState -> Bool

-- | Use smart typography?
stateSmart :: ParserState -> Bool

-- | Treat input as literate haskell
stateLiterateHaskell :: ParserState -> Bool

-- | Number of columns in terminal
stateColumns :: ParserState -> Int

-- | Ordered list of header types used
stateHeaderTable :: ParserState -> [HeaderType]

-- | Classes to use for indented code blocks
stateIndentedCodeClasses :: ParserState -> [String]
defaultParserState :: ParserState
data ParserContext

-- | Used when running parser on list item contents
ListItemState :: ParserContext

-- | Default state
NullState :: ParserContext
data QuoteContext

-- | Used when parsing inside single quotes
InSingleQuote :: QuoteContext

-- | Used when parsing inside double quotes
InDoubleQuote :: QuoteContext

-- | Used when not parsing inside quotes
NoQuote :: QuoteContext
type KeyTable = [([Inline], Target)]
type NoteTable = [(String, String)]
data HeaderType

-- | Single line of characters underneath
SingleHeader :: Char -> HeaderType

-- | Lines of characters above and below
DoubleHeader :: Char -> HeaderType

-- | Convert Pandoc to Markdown.
writeMarkdown :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc to plain text (like markdown, but without links,
--   pictures, or inline formatting).
writePlain :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc to RST.
writeRST :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc to LaTeX.
writeLaTeX :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc to ConTeXt.
writeConTeXt :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc to Texinfo.
writeTexinfo :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc document to Html structure.
writeHtml :: WriterOptions -> Pandoc -> Html

-- | Convert Pandoc document to Html string.
writeHtmlString :: WriterOptions -> Pandoc -> String

-- | Converts Pandoc document to an S5 HTML presentation (Html structure).
writeS5 :: WriterOptions -> Pandoc -> Html

-- | Converts Pandoc document to an S5 HTML presentation (string).
writeS5String :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc document to string in Docbook format.
writeDocbook :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc document to string in OpenDocument format.
writeOpenDocument :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc to Man.
writeMan :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc to MediaWiki.
writeMediaWiki :: WriterOptions -> Pandoc -> String

-- | Convert Pandoc to a string in rich text format.
writeRTF :: WriterOptions -> Pandoc -> String

-- | Prettyprint Pandoc document.
prettyPandoc :: Pandoc -> String

-- | Options for writers
data WriterOptions
WriterOptions :: Bool -> String -> [(String, String)] -> String -> String -> Int -> Bool -> Bool -> Bool -> HTMLMathMethod -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> ObfuscationMethod -> String -> WriterOptions

-- | Include header and footer
writerStandalone :: WriterOptions -> Bool

-- | Template to use in standalone mode
writerTemplate :: WriterOptions -> String

-- | Variables to set in template
writerVariables :: WriterOptions -> [(String, String)]

-- | Text to include before the body
writerIncludeBefore :: WriterOptions -> String

-- | Text to include after the body
writerIncludeAfter :: WriterOptions -> String

-- | Tabstop for conversion btw spaces and tabs
writerTabStop :: WriterOptions -> Int

-- | Include table of contents
writerTableOfContents :: WriterOptions -> Bool

-- | We're writing S5
writerS5 :: WriterOptions -> Bool

-- | Create latex suitable for use by xetex
writerXeTeX :: WriterOptions -> Bool

-- | How to print math in HTML
writerHTMLMathMethod :: WriterOptions -> HTMLMathMethod

-- | Ignore footnotes (used in making toc)
writerIgnoreNotes :: WriterOptions -> Bool

-- | Incremental S5 lists
writerIncremental :: WriterOptions -> Bool

-- | Number sections in LaTeX
writerNumberSections :: WriterOptions -> Bool

-- | Use strict markdown syntax
writerStrictMarkdown :: WriterOptions -> Bool

-- | Use reference links in writing markdown, rst
writerReferenceLinks :: WriterOptions -> Bool

-- | Wrap text to line length
writerWrapText :: WriterOptions -> Bool

-- | Write as literate haskell
writerLiterateHaskell :: WriterOptions -> Bool

-- | How to obfuscate emails
writerEmailObfuscation :: WriterOptions -> ObfuscationMethod

-- | Prefix for section &amp; note ids in HTML
writerIdentifierPrefix :: WriterOptions -> String
data HTMLMathMethod
PlainMath :: HTMLMathMethod
LaTeXMathML :: (Maybe String) -> HTMLMathMethod
JsMath :: (Maybe String) -> HTMLMathMethod
GladTeX :: HTMLMathMethod
MimeTeX :: String -> HTMLMathMethod
MathML :: (Maybe String) -> HTMLMathMethod

-- | Default writer options.
defaultWriterOptions :: WriterOptions

-- | Version number of pandoc library.
pandocVersion :: String
