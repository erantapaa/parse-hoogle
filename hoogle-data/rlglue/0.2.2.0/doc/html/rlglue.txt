-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell codec for RL-Glue.
--   
@package rlglue
@version 0.2.2.0

module RL_Glue.TaskSpec
data TaskSpec
TaskSpec :: ProblemType -> DiscountFactor -> AbsDataType -> AbsDataType -> RewardBounds -> String -> TaskSpec
data ProblemType
Episodic :: ProblemType
Continuing :: ProblemType
OtherProblemType :: String -> ProblemType
type DiscountFactor = Double
data AbsDataType
AbsDataType :: IntsBounds -> DoublesBounds -> NumChars -> AbsDataType
type IntsBounds = [DataBounds Int]
type DoublesBounds = [DataBounds Double]
type NumChars = Int
type DataBounds a = (LowBound a, UpBound a)
type RewardBounds = DataBounds Double
data LowBound a
LowBound :: a -> LowBound a
NegInf :: LowBound a
LBUnspec :: LowBound a
data UpBound a
UpBound :: a -> UpBound a
PosInf :: UpBound a
UBUnspec :: UpBound a
toTaskSpec :: ByteString -> Either ParseError TaskSpec
toTaskSpecOrDie :: ByteString -> IO TaskSpec
parseTaskSpec :: ParsecT ByteString () Identity TaskSpec
instance Show ProblemType
instance Show a => Show (LowBound a)
instance Show a => Show (UpBound a)
instance Show AbsDataType
instance Show TaskSpec

module RL_Glue.Network
kExperimentConnection :: Word32
kAgentConnection :: Word32
kEnvironmentConnection :: Word32
kAgentInit :: Word32
kAgentStart :: Word32
kAgentStep :: Word32
kAgentEnd :: Word32
kAgentCleanup :: Word32
kAgentMessage :: Word32
kEnvInit :: Word32
kEnvStart :: Word32
kEnvStep :: Word32
kEnvCleanup :: Word32
kEnvMessage :: Word32
kRLInit :: Word32
kRLStart :: Word32
kRLStep :: Word32
kRLCleanup :: Word32
kRLReturn :: Word32
kRLNumSteps :: Word32
kRLNumEpisodes :: Word32
kRLEpisode :: Word32
kRLAgentMessage :: Word32
kRLEnvMessage :: Word32
kRLTerm :: Word32
kLocalHost :: [Char]
kDefaultPort :: [Char]
kRetryTimeout :: Integer
kDefaultBufferSize :: Integer
kIntSize :: Int
kDoubleSize :: Int
kCharSize :: Int
data RLAbstractType
RLAbstractType :: [Int] -> [Double] -> ByteString -> RLAbstractType
newtype Action
Action :: RLAbstractType -> Action
newtype Observation
Observation :: RLAbstractType -> Observation
type Reward = Double
type Terminal = Int
sizeOfObs :: Observation -> Int
sizeOfAction :: Action -> Int
sizeOfRewardObs :: (Terminal, Reward, Observation) -> Int
getObservation :: Socket -> MaybeT IO Observation
getObservationOrDie :: Socket -> IO Observation
getAction :: Socket -> MaybeT IO Action
getRewardOrDie :: Socket -> IO Reward
getRewardObservation :: Socket -> MaybeT IO (Reward, Observation)
getRewardObservationOrDie :: Socket -> IO (Reward, Observation)
getInt :: Socket -> MaybeT IO Int
getDouble :: Socket -> MaybeT IO Double
getString :: Socket -> MaybeT IO ByteString
getStringOrDie :: String -> Socket -> IO ByteString
putObservation :: Observation -> Put
putAction :: Action -> Put
putTerminalRewardObs :: (Terminal, Reward, Observation) -> Put
putString :: ByteString -> Put
glueConnect :: ((Socket, SockAddr) -> IO r) -> IO r
doCallWithNoParams :: Socket -> Word32 -> IO ()
confirmState :: Socket -> Word32 -> IO ()
sendAgentMessage :: Socket -> ByteString -> IO ByteString
sendAgentMessageStr :: Socket -> String -> IO ByteString
sendEnvMessage :: Socket -> ByteString -> IO ByteString
sendEnvMessageStr :: Socket -> String -> IO ByteString
instance Show RLAbstractType
instance Show Action
instance Show Observation

module RL_Glue.Experiment
runExperiment :: ((Socket, SockAddr) -> IO ()) -> IO ()
initExperiment :: Socket -> IO ByteString
cleanupExperiment :: Socket -> IO ()
runEpisode :: Socket -> Int -> IO Int
startEpisode :: Socket -> IO (Observation, Action)
stepEpisode :: Socket -> IO (Reward, Observation, Action, Terminal)
getNumSteps :: Socket -> IO Int
getNumEpisodes :: Socket -> IO Int
getReturn :: Socket -> IO Double

module RL_Glue.Environment
data Environment a
Environment :: StateT a IO ByteString -> StateT a IO Observation -> (Action -> StateT a IO (Terminal, Reward, Observation)) -> StateT a IO () -> (ByteString -> StateT a IO ByteString) -> Environment a
loadEnvironment :: Environment a -> a -> IO ()

module RL_Glue.Agent
data Agent a
Agent :: (ByteString -> StateT a IO ()) -> (Observation -> StateT a IO Action) -> ((Reward, Observation) -> StateT a IO Action) -> (Reward -> StateT a IO ()) -> StateT a IO () -> (ByteString -> StateT a IO ByteString) -> Agent a
loadAgentDebug :: Int -> Agent a -> a -> IO ()
loadAgent :: Agent a -> a -> IO ()
