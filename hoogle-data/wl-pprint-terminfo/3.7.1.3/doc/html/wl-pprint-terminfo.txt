-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A color pretty printer with terminfo support
--   
@package wl-pprint-terminfo
@version 3.7.1.3

module System.Console.Terminfo.PrettyPrint
data ScopedEffect
Bold :: ScopedEffect
Standout :: ScopedEffect
Underline :: ScopedEffect
Reverse :: ScopedEffect
Blink :: ScopedEffect
Dim :: ScopedEffect
Invisible :: ScopedEffect
Protected :: ScopedEffect
Foreground :: Color -> ScopedEffect
Background :: Color -> ScopedEffect
Else :: ScopedEffect -> ScopedEffect -> ScopedEffect
Nop :: ScopedEffect
with :: ScopedEffect -> TermDoc -> TermDoc
data Effect
Push :: ScopedEffect -> Effect
Pop :: Effect
Ring :: Bell -> Effect
soft :: ScopedEffect -> ScopedEffect
blink :: TermDoc -> TermDoc
bold :: TermDoc -> TermDoc
underline :: TermDoc -> TermDoc
standout :: TermDoc -> TermDoc
reversed :: TermDoc -> TermDoc
protected :: TermDoc -> TermDoc
invisible :: TermDoc -> TermDoc
dim :: TermDoc -> TermDoc
red :: TermDoc -> TermDoc
black :: TermDoc -> TermDoc
green :: TermDoc -> TermDoc
blue :: TermDoc -> TermDoc
yellow :: TermDoc -> TermDoc
magenta :: TermDoc -> TermDoc
cyan :: TermDoc -> TermDoc
white :: TermDoc -> TermDoc
foreground :: Color -> TermDoc -> TermDoc
background :: Color -> TermDoc -> TermDoc
data Bell
VisibleBellOnly :: Bell
AudibleBellOnly :: Bell
VisibleBellPreferred :: Bell
AudibleBellPreferred :: Bell
ring :: Bell -> TermDoc
type TermDoc = Doc Effect
display :: (MonadIO m, PrettyTerm t) => t -> m ()
displayLn :: MonadIO m => PrettyTerm t => t -> m ()
displayDoc :: (MonadIO m, PrettyTerm t) => Float -> t -> m ()
displayDoc' :: (MonadIO m, PrettyTerm t) => Terminal -> Float -> t -> m ()
displayDoc'' :: (MonadIO m, PrettyTerm t) => Terminal -> Float -> Int -> t -> m ()
class Pretty t => PrettyTerm t where prettyTerm = pretty prettyTermList = list . map prettyTerm
prettyTerm :: PrettyTerm t => t -> TermDoc
prettyTermList :: PrettyTerm t => [t] -> TermDoc
type SimpleTermDoc = SimpleDoc Effect
evalTermState :: Monad m => StateT TermState m a -> m a
displayCap :: SimpleTermDoc -> StateT TermState Capability TermOutput
instance Eq ScopedEffect
instance Eq Bell
instance Ord Bell
instance Show Bell
instance Enum Bell
instance Eq Effect
instance PrettyTerm a => PrettyTerm (Maybe a)
instance (PrettyTerm a, PrettyTerm b, PrettyTerm c) => PrettyTerm (a, b, c)
instance (PrettyTerm a, PrettyTerm b) => PrettyTerm (a, b)
instance PrettyTerm a => PrettyTerm (NonEmpty a)
instance PrettyTerm a => PrettyTerm (Seq a)
instance PrettyTerm Natural
instance PrettyTerm ()
instance PrettyTerm Double
instance PrettyTerm Float
instance PrettyTerm Integer
instance PrettyTerm Bool
instance PrettyTerm Word64
instance PrettyTerm Word32
instance PrettyTerm Word16
instance PrettyTerm Word8
instance PrettyTerm Word
instance PrettyTerm Int64
instance PrettyTerm Int32
instance PrettyTerm Int16
instance PrettyTerm Int8
instance PrettyTerm Int
instance PrettyTerm Text
instance PrettyTerm Text
instance PrettyTerm ByteString
instance PrettyTerm ByteString
instance e ~ Effect => PrettyTerm (Doc e)
instance PrettyTerm Char
instance PrettyTerm t => PrettyTerm [t]
