-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Minimalistic MongoDB Snaplet.
--   
--   Minimalistic MongoDB Snaplet.
@package snaplet-mongodb-minimalistic
@version 0.0.6.12


-- | In this module you can find the Snaplet's data type, type class and
--   initializer.
module Snap.Snaplet.MongoDB.Core

-- | Snaplet's data type.
--   
--   Usage:
--   
--   <pre>
--   data App = App
--       { _heist :: Snaplet (Heist App)
--       , _database :: Snaplet MongoDB
--       }
--   </pre>
data MongoDB
MongoDB :: Pool IOError Pipe -> Database -> AccessMode -> MongoDB
mongoPool :: MongoDB -> Pool IOError Pipe
mongoDatabase :: MongoDB -> Database
mongoAccessMode :: MongoDB -> AccessMode

-- | Snaplet's type-class.
--   
--   Usage:
--   
--   <pre>
--   instance HasMongoDB App where
--       getMongoDB app = view snapletValue (view database app)
--   </pre>
class HasMongoDB a
getMongoDB :: HasMongoDB a => a -> MongoDB

-- | MongoDB Pool type
type MongoDBPool = Pool IOError Pipe

-- | Initializer function.
--   
--   Usage:
--   
--   <pre>
--   app :: SnapletInit App App
--   app = makeSnaplet "app" "Example application." Nothing $ do
--       h &lt;- nestSnaplet "heist" heist $ heistInit "resources/templates"
--       d &lt;- nestSnaplet "database" database $ mongoDBInit 10 (host "127.0.0.1") "Snaplet-MongoDB"
--       return $ App h d
--   </pre>
mongoDBInit :: Int -> Host -> Database -> SnapletInit app MongoDB

-- | Initializer function.
--   
--   Usage:
--   
--   <pre>
--   app :: SnapletInit App App
--   app = makeSnaplet "app" "Example application." Nothing $ do
--       h &lt;- nestSnaplet "heist" heist $ heistInit "resources/templates"
--       d &lt;- nestSnaplet "database" database $ mongoDBInit 10 (host "127.0.0.1") "Snaplet-MongoDB"
--       return $ App h d
--   </pre>
mongoDBInit' :: Int -> Host -> Database -> AccessMode -> SnapletInit app MongoDB


-- | In this module you can find variations of <tt>withDB</tt> functions.
--   
--   Functions from this module are to be used when you have single MongoDB
--   snaplet in your application and your application is an instance of
--   HasMongoDB.
module Snap.Snaplet.MongoDB.Functions.S

-- | Database access function.
--   
--   Usage:
--   
--   <pre>
--   eitherWithDB $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
eitherWithDB :: (MonadIO m, MonadState app m, HasMongoDB app) => Action IO a -> m (Either Failure a)

-- | Database access function.
--   
--   Usage:
--   
--   <pre>
--   eitherWithDB' UnconfirmedWrites $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
eitherWithDB' :: (MonadIO m, MonadState app m, HasMongoDB app) => AccessMode -> Action IO a -> m (Either Failure a)

-- | Database access function.
--   
--   Usage:
--   
--   <pre>
--   maybeWithDB $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
maybeWithDB :: (MonadIO m, MonadState app m, HasMongoDB app) => Action IO a -> m (Maybe a)

-- | Database access function.
--   
--   Usage:
--   
--   <pre>
--   maybeWithDB' UnconfirmedWrites $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
maybeWithDB' :: (MonadIO m, MonadState app m, HasMongoDB app) => AccessMode -> Action IO a -> m (Maybe a)

-- | Database access function.
--   
--   Usage:
--   
--   <pre>
--   unsafeWithDB $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
unsafeWithDB :: (MonadIO m, MonadState app m, HasMongoDB app) => Action IO a -> m a

-- | Database access function.
--   
--   Usage:
--   
--   <pre>
--   unsafeWithDB' UnconfirmedWrites $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
unsafeWithDB' :: (MonadIO m, MonadState app m, HasMongoDB app) => AccessMode -> Action IO a -> m a

module Snap.Snaplet.MongoDB.Functions


-- | In this module you can find variations of <tt>withDB</tt> functions.
--   
--   Functions from this module are to be used when you have multiple
--   MongoDB snaplets (databases) in your application.
module Snap.Snaplet.MongoDB.Functions.M

-- | Database access function.
--   
--   Example:
--   
--   <pre>
--   eitherWithDB accountDB $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
eitherWithDB :: (MonadIO m, MonadState app m) => SnapletLens app MongoDB -> Action IO a -> m (Either Failure a)

-- | Database access function.
--   
--   Example:
--   
--   <pre>
--   eitherWithDB' accountDB UnconfirmedWrites $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
eitherWithDB' :: (MonadIO m, MonadState app m) => SnapletLens app MongoDB -> AccessMode -> Action IO a -> m (Either Failure a)

-- | Database access function.
--   
--   Example:
--   
--   <pre>
--   maybeWithDB accountDB $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
maybeWithDB :: (MonadIO m, MonadState app m) => SnapletLens app MongoDB -> Action IO a -> m (Maybe a)

-- | Database access function.
--   
--   Example:
--   
--   <pre>
--   maybeWithDB' accountDB UnconfirmedWrites $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
maybeWithDB' :: (MonadIO m, MonadState app m) => SnapletLens app MongoDB -> AccessMode -> Action IO a -> m (Maybe a)

-- | Database access function.
--   
--   Example:
--   
--   <pre>
--   unsafeWithDB accountDB $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
unsafeWithDB :: (MonadIO m, MonadState app m) => SnapletLens app MongoDB -> Action IO a -> m a

-- | Database access function.
--   
--   Example:
--   
--   <pre>
--   unsafeWithDB' accountDB UnconfirmedWrites $ insert "test-collection" [ "some_field" = "something" ]
--   </pre>
unsafeWithDB' :: (MonadIO m, MonadState app m) => SnapletLens app MongoDB -> AccessMode -> Action IO a -> m a

module Snap.Snaplet.MongoDB
