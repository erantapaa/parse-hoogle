-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An interpreter for CSPM
--   
@package CSPM-Interpreter
@version 0.7.0.0


-- | Definitions of most of the types used in the interpreter. Also
--   Instance declarations for the core language type families. <a>INT</a>
--   is the type (index) for the CSPM interpreter.
module CSPM.Interpreter.Types
data INT
type Event = [Field]
type Field = Value
type FieldSet = SSet Field
type Process = Process INT
type Digest = MD5Digest
type Sigma = ClosureSet
data ClosureSet
ClosureSet :: PrefixTrie -> Digest -> ClosureSet
closureSetTrie :: ClosureSet -> PrefixTrie
closureSetDigest :: ClosureSet -> Digest
data RenamingRelation
RenamingRelation :: Set (Event, Event) -> Set Event -> Set Event -> Digest -> RenamingRelation
renamingPairs :: RenamingRelation -> Set (Event, Event)
renamingDomain :: RenamingRelation -> Set Event
renamingRange :: RenamingRelation -> Set Event
renamingDigest :: RenamingRelation -> Digest
data ClosureState
ClosureStateNormal :: ClosureSet -> PrefixTrie -> ClosureState
origClosureSet :: ClosureState -> ClosureSet
currentPrefixTrie :: ClosureState -> PrefixTrie
ClosureStateFailed :: ClosureSet -> ClosureState
origClosureSet :: ClosureState -> ClosureSet
ClosureStateSucc :: ClosureSet -> PrefixTrie -> ClosureState
origClosureSet :: ClosureState -> ClosureSet
currentPrefixTrie :: ClosureState -> PrefixTrie
data SwitchedOffProc
SwitchedOffProc :: Digest -> LExp -> Process -> SwitchedOffProc
switchedOffDigest :: SwitchedOffProc -> Digest
switchedOffExpr :: SwitchedOffProc -> LExp
switchedOffProcess :: SwitchedOffProc -> Process
data PrefixState
PrefixState :: Env -> [LCommField] -> LExp -> Process -> Digest -> Bool -> PrefixState
prefixEnv :: PrefixState -> Env
prefixFields :: PrefixState -> [LCommField]
prefixBody :: PrefixState -> LExp
prefixRHS :: PrefixState -> Process
prefixDigest :: PrefixState -> Digest
prefixPatternFailed :: PrefixState -> Bool
data GenericBufferPrefix
GBOut :: [Value] -> PrefixState -> GenericBufferPrefix
GBInput :: PrefixState -> GenericBufferPrefix
GBInputGuard :: FieldSet -> PrefixState -> GenericBufferPrefix
GBInputGeneric :: [Value] -> PrefixState -> GenericBufferPrefix
GBFinished :: PrefixState -> GenericBufferPrefix
type Bindings = IntMap Value
data Env
Env :: Bindings -> Bindings -> IntMap Digest -> Env
argBindings :: Env -> Bindings
letBindings :: Env -> Bindings
letDigests :: Env -> IntMap Digest
emptyEnvirionment :: Env
newtype EM x
EM :: Reader Env x -> EM x
unEM :: EM x -> Reader Env x
getArgBindings :: Env -> Bindings
getLetBindings :: Env -> Bindings
setArgBindings :: Env -> Bindings -> Env
setLetBindings :: Env -> Bindings -> Env
getEnv :: EM Env
class Monad m => Eval m
evalM :: Eval m => LExp -> m Value
data Value
VInt :: Integer -> Value
VBool :: Bool -> Value
VList :: [Value] -> Value
VTuple :: [Value] -> Value
VDotTuple :: [Value] -> Value
VSet :: (Set Value) -> Value
VClosure :: ClosureSet -> Value
VFun :: FunClosure -> Value
VProcess :: Process -> Value
VChannel :: Channel -> Value
VUnit :: Value
VAllInts :: Value
VAllSequences :: (Set Value) -> Value
VConstructor :: Constructor -> Value
VDataType :: [Constructor] -> Value
VNameType :: [FieldSet] -> Value
VPartialApplied :: FunClosure -> [Value] -> Value
data FunClosure
FunClosure :: [FunCase] -> Env -> Int -> Digest -> FunClosure
getFunCases :: FunClosure -> [FunCase]
getFunEnv :: FunClosure -> Env
getFunArgNum :: FunClosure -> Int
getFunId :: FunClosure -> Digest
data Constructor
Constructor :: Int -> String -> [FieldSet] -> Constructor
constrId :: Constructor -> Int
constrName :: Constructor -> String
constrFields :: Constructor -> [FieldSet]
data Channel
Channel :: Int -> String -> Int -> [FieldSet] -> Channel
chanId :: Channel -> Int
chanName :: Channel -> String
chanLen :: Channel -> Int
chanFields :: Channel -> [FieldSet]
isChannelField :: Field -> Bool
getChannel :: Field -> Channel
data PrefixTrie
PTNil :: PrefixTrie
PTAny :: PrefixTrie -> PrefixTrie
PTMap :: (Map Value PrefixTrie) -> PrefixTrie
PTRec :: (Set Value) -> PrefixTrie -> PrefixTrie
PTSingle :: Value -> PrefixTrie -> PrefixTrie
PTClosure :: PrefixTrie -> PrefixTrie
data InterpreterError
ScriptError :: String -> Maybe SrcLoc -> Maybe Value -> InterpreterError
errMsg :: InterpreterError -> String
errLoc :: InterpreterError -> Maybe SrcLoc
errVal :: InterpreterError -> Maybe Value
FeatureNotImplemented :: String -> Maybe SrcLoc -> InterpreterError
errMsg :: InterpreterError -> String
errLoc :: InterpreterError -> Maybe SrcLoc
TypingError :: String -> Maybe SrcLoc -> Maybe Value -> InterpreterError
errMsg :: InterpreterError -> String
errLoc :: InterpreterError -> Maybe SrcLoc
errVal :: InterpreterError -> Maybe Value
InternalError :: String -> Maybe SrcLoc -> Maybe Value -> InterpreterError
errMsg :: InterpreterError -> String
errLoc :: InterpreterError -> Maybe SrcLoc
errVal :: InterpreterError -> Maybe Value
PatternMatchError :: String -> Maybe SrcLoc -> InterpreterError
errMsg :: InterpreterError -> String
errLoc :: InterpreterError -> Maybe SrcLoc
throwScriptError :: String -> Maybe SrcLoc -> Maybe Value -> a
throwFeatureNotImplemented :: String -> Maybe SrcLoc -> a
throwTypingError :: String -> Maybe SrcLoc -> Maybe Value -> a
throwInternalError :: String -> Maybe SrcLoc -> Maybe Value -> a
throwPatternMatchError :: String -> Maybe SrcLoc -> a
instance Typeable INT
instance Typeable Value
instance Typeable Env
instance Typeable ClosureSet
instance Typeable InterpreterError
instance Show (Process INT)
instance Ord (Process INT)
instance Eq (Process INT)
instance Show PrefixTrie
instance Eq PrefixTrie
instance Ord PrefixTrie
instance Ord Value
instance Eq Value
instance Show Channel
instance Eq Channel
instance Ord Channel
instance Show Constructor
instance Show ClosureSet
instance Functor EM
instance Applicative EM
instance Monad EM
instance MonadReader Env EM
instance Show GenericBufferPrefix
instance Eq GenericBufferPrefix
instance Ord GenericBufferPrefix
instance Show RenamingRelation
instance Show ClosureState
instance Eq ClosureState
instance Ord ClosureState
instance Show InterpreterError
instance Exception InterpreterError
instance Show Value
instance Ord Constructor
instance Eq Constructor
instance Show FunClosure
instance Ord FunClosure
instance Eq FunClosure
instance Show PrefixState
instance Eq PrefixState
instance Ord PrefixState
instance Show SwitchedOffProc
instance Eq SwitchedOffProc
instance Ord SwitchedOffProc
instance Eq RenamingRelation
instance Ord RenamingRelation
instance Eq ClosureSet
instance Ord ClosureSet


-- | Instances of the Hash class for interpreter types and core language
--   types
module CSPM.Interpreter.Hash
mix :: MD5Digest -> MD5Digest -> MD5Digest
mix3 :: MD5Digest -> MD5Digest -> MD5Digest -> MD5Digest
data MD5Digest
MD5Digest :: !Word32 -> !Word32 -> !Word32 -> !Word32 -> MD5Digest
class Hash a
hash :: Hash a => a -> MD5Digest
hs :: String -> Digest
closureDigest :: LExp -> Env -> FreeNames -> Digest
mixInt :: MD5Digest -> Int -> MD5Digest
instance Hash PrefixTrie
instance Hash FunClosure
instance Hash Constructor
instance Hash RenamingRelation
instance Hash ClosureSet
instance Hash SwitchedOffProc
instance Hash PrefixState
instance Hash Process
instance Hash LExp
instance Hash Value


-- | Utility functions dealing with closure sets.
module CSPM.Interpreter.ClosureSet
memberPrefixTrie :: [Field] -> PrefixTrie -> Bool
prefixTrieNext :: PrefixTrie -> Field -> Maybe PrefixTrie
closureStateNext :: ClosureState -> Field -> ClosureState
setToClosure :: Set Value -> ClosureSet
mkClosureSet :: PrefixTrie -> ClosureSet
setToPrefixTrie :: Set Value -> PrefixTrie
closureToSet :: ClosureSet -> Set Value
hackValueToEvent :: Value -> Event
prefixTrieToSet :: PrefixTrie -> Set Value
mkEventClosure :: [Value] -> EM ClosureSet
valueToPT :: Value -> PrefixTrie
fieldsToPT :: [Value] -> [FieldSet] -> PrefixTrie
ptUnions :: [PrefixTrie] -> PrefixTrie
singleEventToClosureSet :: Event -> ClosureSet


-- | A pretty-printer for values.
module CSPM.Interpreter.Pretty
instance Pretty Value


-- | The main eval function of the Interpreter.
module CSPM.Interpreter.Eval

-- | Evaluate an expression in the <a>EM</a> monad.
eval :: LExp -> EM Value

-- | Run the <a>EM</a> monad with a given envirionment.
runEM :: EM x -> Env -> x
getSigma :: Env -> Sigma
evalBool :: LExp -> EM Bool
evalOutField :: LExp -> EM Field
evalFieldSet :: LExp -> EM FieldSet
evalProcess :: LExp -> EM Process

-- | Process a module and return the top-level envirionment.
evalModule :: Module INT -> Env


-- | This module defines some class instances that make the interpreter an
--   implementation of the interface defined in package CSPM-CoreLanguage.
module CSPM.Interpreter.CoreInstances
instance Show (TTE INT)
instance ShowTTE (TTE INT)
instance ShowEvent Event
instance BL INT
instance BF INT
instance BE INT


-- | This is mainly useful for testing the functional sub language. This
--   module does not allow tracing of processes (tracing is implemented in
--   an other package).
--   
--   <a>runFile</a> loads a CSPM-specification from a file and evaluates an
--   expression in the context of that specification.
--   
--   Example:
--   
--   <a>runFile</a> fib.csp fib(10)
--   
--   where the file fib.csp contains: fib(x)= if x &lt;2 then 1 else
--   fib(x-1)+fib(x-2)
--   
--   <a>runFile</a> writes to <tt>stdout</tt> and handles some exceptions.
module CSPM.Interpreter.Test.CLI

-- | Load a specification from a file and evaluate an expression in the
--   context. Print the result to <tt>stdout</tt> and handle some
--   exceptions.
runFile :: FilePath -> String -> IO ()

-- | Evaluate an expression, optionall load a context from a file
evalFile :: Bool -> Maybe FilePath -> String -> IO (Value, Env)

-- | Evaluate an expression, optionall load a context from a string
evalString :: Bool -> String -> String -> String -> IO (Value, Env)


-- | An API for the Interpreter.
module CSPM.Interpreter

-- | Load a specification from a file and evaluate an expression in the
--   context. Print the result to <tt>stdout</tt> and handle some
--   exceptions.
runFile :: FilePath -> String -> IO ()

-- | Evaluate an expression, optionall load a context from a string
evalString :: Bool -> String -> String -> String -> IO (Value, Env)

-- | Evaluate an expression, optionall load a context from a file
evalFile :: Bool -> Maybe FilePath -> String -> IO (Value, Env)
getSigma :: Env -> Sigma
prepareAST :: ModuleFromRenaming -> Module INT

-- | Run the interpreter for a given module and top-level identifier.
runInterpreter :: Module INT -> UniqueIdent -> (Value, Env)

-- | Run the interpreter for a given module and top-level identifier. Cast
--   result to a process
runInterpreterP :: Module INT -> UniqueIdent -> (Process, Env)
lookupIdent :: LIdent -> EM Value
bindIdent :: LIdent -> Value -> Bindings -> Bindings
emptyBindings :: Bindings
lookupAllChannels :: EM [Channel]

-- | The version of the CSPM-Interpreter library
interpreterVersion :: Version
