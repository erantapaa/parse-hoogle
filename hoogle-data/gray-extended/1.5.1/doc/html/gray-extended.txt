-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Gray encoding schemes
--   
--   Gray codes satisfy the property that two successive values differ in
--   only one digit. Usually the term "Gray code" refers to the Binary
--   Reflected Gray code (BRGC), but non-binary Gray codes have also been
--   discovered.
@package gray-extended
@version 1.5.1


-- | Gray encoding schemes. A Gray code is a list of values such that two
--   successive values differ in only one digit. Usually the term /Gray
--   code/ refers to the Binary Reflected Gray code (BRGC), but non-binary
--   Gray codes have also been discovered. Some Gray codes are also
--   <i>cyclic</i>: the last and first values differ in only one digit.
module Codec.Gray

-- | <tt><a>grayCodes</a> k</tt> generates the list of Binary Reflected
--   Gray Code (BRGC) numbers of length k. This code is cyclic.
grayCodes :: Int -> [[Bool]]

-- | <tt><a>integralToGray</a> n</tt> encodes <tt>n</tt> using a BRGC, and
--   returns the resulting bits as an integer. For example, encoding
--   <tt>17</tt> in BRGC results in <tt>11001</tt>, or 25. So
--   <tt>integralToGray 17</tt> returns <tt>25</tt>.
integralToGray :: Bits a => a -> a

-- | <tt><a>grayToIntegral</a> n</tt> decodes <tt>n</tt> using a BRGC, and
--   returns the resulting integer. For example, 25 is <tt>11001</tt>,
--   which is the code for 17. So <tt>grayToIntegral 25</tt> returns
--   <tt>17</tt>.
grayToIntegral :: (Num a, Bits a) => a -> a

-- | <tt><a>naryGrayCodes</a> xs k</tt> generates a non-Boolean (or n-ary)
--   Gray code of length <tt>k</tt> using the elements of <tt>xs</tt> as
--   "digits". This code is cyclic.
--   
--   Ex: <tt><a>naryGrayCodes</a> "012" 4</tt> generates a ternary Gray
--   code that is four digits long.
naryGrayCodes :: [a] -> Int -> [[a]]
