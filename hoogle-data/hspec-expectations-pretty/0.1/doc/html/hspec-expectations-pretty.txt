-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | hspec-expectations with pretty printing on failure
--   
--   Use exactly the same as hspec-expectations. Require a PrettyTerm
--   instance for anything under expectation. To start with you can define
--   a Pretty instance and then just write: instance PrettyTerm YourData
--   using wl-pprint-extras and wl-pprint-terminfo.
@package hspec-expectations-pretty
@version 0.1

module Test.Hspec.Expectations.Pretty
data HspecFailure
HspecFailure :: String -> HspecFailure
assertFailure :: String -> Expectation

-- | Asserts that the specified actual value is equal to the expected
--   value. The output message will contain the prefix, the expected value,
--   and the actual value.
--   
--   If the prefix is the empty string (i.e., <tt>""</tt>), then the prefix
--   is omitted and only the expected and actual values are output.
assertEqual :: (Eq a, PrettyTerm a) => String -> a -> a -> Expectation

-- | <tt>actual `shouldBe` expected</tt> sets the expectation that
--   <tt>actual</tt> is equal to <tt>expected</tt> (this is just an alias
--   for <tt>@?=</tt>).
shouldBe :: (Show a, PrettyTerm a, Eq a) => a -> a -> Expectation

-- | <tt>v `shouldSatisfy` p</tt> sets the expectation that <tt>p v</tt> is
--   <tt>True</tt>.
shouldSatisfy :: (Show a, PrettyTerm a) => a -> (a -> Bool) -> Expectation

-- | <tt>action `shouldReturn` expected</tt> sets the expectation that
--   <tt>action</tt> returns <tt>expected</tt>.
shouldReturn :: (Show a, PrettyTerm a, Eq a) => IO a -> a -> Expectation
instance Typeable HspecFailure
instance Exception HspecFailure
instance Show HspecFailure
