-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Automatic generation of record lenses for 'microlens'.
--   
@package microlens-th
@version 0.1.0.0

module Lens.Micro.TH
type Getter s a = forall r. Getting r s a
type Fold s a = forall r. Applicative (Const r) => Getting r s a
makeLenses :: Name -> DecsQ

-- | Build lenses with a custom configuration.
makeLensesWith :: LensRules -> Name -> DecsQ
makeFields :: Name -> DecsQ
data LensRules

-- | Name to give to generated field optics.
data DefName

-- | Simple top-level definiton name
TopName :: Name -> DefName

-- | makeFields-style class name and method name
MethodName :: Name -> Name -> DefName
lensRules :: LensRules
defaultFieldRules :: LensRules
camelCaseFields :: LensRules

-- | <a>Lens'</a> to access the convention for naming fields in our
--   <a>LensRules</a>.
--   
--   Defaults to stripping the _ off of the field name, lowercasing the
--   name, and skipping the field if it doesn't start with an '_'. The
--   field naming rule provides the names of all fields in the type as well
--   as the current field. This extra generality enables field naming
--   conventions that depend on the full set of names in a type.
--   
--   The field naming rule has access to the type name, the names of all
--   the field of that type (including the field being named), and the name
--   of the field being named.
--   
--   TypeName -&gt; FieldNames -&gt; FieldName -&gt; DefinitionNames
lensField :: Lens' LensRules (Name -> [Name] -> Name -> [DefName])

-- | Generate "simple" optics even when type-changing optics are possible.
--   (e.g. <a>Lens'</a> instead of <a>Lens</a>)
simpleLenses :: Lens' LensRules Bool

-- | Create the class if the constructor is <a>Simple</a> and the
--   <tt>lensClass</tt> rule matches.
createClass :: Lens' LensRules Bool

-- | Indicate whether or not to supply the signatures for the generated
--   lenses.
--   
--   Disabling this can be useful if you want to provide a more restricted
--   type signature or if you want to supply hand-written haddocks.
generateSignatures :: Lens' LensRules Bool

-- | Generate "updateable" optics when <a>True</a>. When <a>False</a>,
--   <a>Fold</a>s will be generated instead of <a>Traversal</a>s and
--   <a>Getter</a>s will be generated instead of <a>Lens</a>es. This mode
--   is intended to be used for types with invariants which must be
--   maintained by "smart" constructors.
generateUpdateableOptics :: Lens' LensRules Bool

-- | Generate optics using lazy pattern matches. This can allow fields of
--   an undefined value to be initialized with lenses, and is the default
--   behavior.
--   
--   The downside of this flag is that it can lead to space-leaks and
--   code-size/compile-time increases when generated for large records.
--   
--   When using lazy optics the strict optic can be recovered by composing
--   with <a>$!</a>
--   
--   <pre>
--   strictOptic = ($!) . lazyOptic
--   </pre>
generateLazyPatterns :: Lens' LensRules Bool
instance Show DefName
instance Eq DefName
instance Ord DefName
instance HasTypeVars t => HasTypeVars (Maybe t)
instance HasTypeVars t => HasTypeVars [t]
instance HasTypeVars Con
instance HasTypeVars Pred
instance HasTypeVars Type
instance HasTypeVars Name
instance HasTypeVars TyVarBndr
instance HasName Con
instance HasName Name
instance HasName TyVarBndr
