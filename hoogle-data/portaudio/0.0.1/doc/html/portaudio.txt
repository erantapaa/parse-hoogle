-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings for the PortAudio library.
--   
--   Bindings to the cross platform PortAudio library. Version 0.0.1
--   excludes the callback model.
@package portaudio
@version 0.0.1


-- | PortAudio is a cross platform audio library which supports many
--   different operatings systems.
module Sound.PortAudio
data ErrorCode
NoError :: ErrorCode
NotInitialized :: ErrorCode
UnanticipatedHostError :: ErrorCode
InvalidChannelCount :: ErrorCode
InvalidSampleRate :: ErrorCode
InvalidDevice :: ErrorCode
InvalidFlag :: ErrorCode
SampleFormatNotSupported :: ErrorCode
BadIODeviceCombination :: ErrorCode
InsufficientMemory :: ErrorCode
BufferTooBig :: ErrorCode
BufferTooSmall :: ErrorCode
NullCallback :: ErrorCode
BadStreamPtr :: ErrorCode
TimedOut :: ErrorCode
InternalError :: ErrorCode
DeviceUnavailable :: ErrorCode
IncompatibleHostApiSpecificStreamInfo :: ErrorCode
StreamIsStopped :: ErrorCode
StreamIsNotStopped :: ErrorCode
InputOverflowed :: ErrorCode
OutputUnderflowed :: ErrorCode
HostApiNotFound :: ErrorCode
InvalidHostApi :: ErrorCode
CanNotReadFromACallbackStream :: ErrorCode
CanNotWriteToACallbackStream :: ErrorCode
CanNotReadFromAnOutputOnlyStream :: ErrorCode
CanNotWriteToAnInputOnlyStream :: ErrorCode
IncompatibleStreamHostApi :: ErrorCode
BadBufferPtr :: ErrorCode

-- | Unchanging uniqe identifiers for each supported host API. The values
--   are guaranteed to be unique and will never change. This allows code to
--   be written which conditionally uses host API specific extensions.
data HostApiTypeId
InDevelopment :: HostApiTypeId
DirectSound :: HostApiTypeId
MME :: HostApiTypeId
ASIO :: HostApiTypeId
SoundManager :: HostApiTypeId
CoreAudio :: HostApiTypeId
OSS :: HostApiTypeId
ALSA :: HostApiTypeId
AL :: HostApiTypeId
BeOS :: HostApiTypeId
WDMKS :: HostApiTypeId
JACK :: HostApiTypeId
WASAPI :: HostApiTypeId
AudioScienceHPI :: HostApiTypeId

-- | A type used to specify one or more sample formats.
--   
--   <ul>
--   <li>The floating point representation (<tt>PaFloat32</tt>) uses +1.0
--   and -1.0 as the maximum and minimum.</li>
--   <li>(<tt>PaUInt8</tt>) considers 128 <a>ground</a>.</li>
--   <li>The (<tt>PaNonInterleaved</tt>) flag indicates that a multichannel
--   buffer is passed as a set of non-interleaved pointers. (WHAT?) I don't
--   think i want to support this.</li>
--   </ul>
data SampleFormat
PaFloat32 :: SampleFormat
PaInt32 :: SampleFormat
PaInt24 :: SampleFormat
PaInt16 :: SampleFormat
PaInt8 :: SampleFormat
PaUInt8 :: SampleFormat
PaCustomFormat :: SampleFormat
PaNonInterleaved :: SampleFormat

-- | A structure containing information about a particular host API.
data HostApiInfo
HostApiInfo :: Int -> HostApiTypeId -> String -> Int -> DeviceIndex -> DeviceIndex -> HostApiInfo
hostApiInfoStructVersion :: HostApiInfo -> Int
hostApiInfoApiType :: HostApiInfo -> HostApiTypeId
hostApiInfoName :: HostApiInfo -> String
hostApiInfoDeviceCount :: HostApiInfo -> Int
hostApiInfoDefaultInputDevice :: HostApiInfo -> DeviceIndex
hostApiInfoDefaultOutputDevice :: HostApiInfo -> DeviceIndex

-- | Structure used to return information about a host error condition.
data HostErrorInfo
HostErrorInfo :: HostApiTypeId -> Int -> String -> HostErrorInfo
hostErrorInfoHostApiType :: HostErrorInfo -> HostApiTypeId
hostErrorInfoErrorCode :: HostErrorInfo -> Int
hostErrorInfoErrorText :: HostErrorInfo -> String

-- | A structure providing information and capabilities of PortAudio
--   devices. Devices may support input, output or both.
data DeviceInfo
DeviceInfo :: Int -> String -> HostApiIndex -> Int -> Int -> PaTime -> PaTime -> PaTime -> PaTime -> Double -> DeviceInfo
deviceInfoStructVersion :: DeviceInfo -> Int
deviceInfoName :: DeviceInfo -> String
deviceInfoHostApi :: DeviceInfo -> HostApiIndex
deviceInfoMaxInputChannels :: DeviceInfo -> Int
deviceInfoMaxOutputChannels :: DeviceInfo -> Int
deviceInfoDefaultLowInputLatency :: DeviceInfo -> PaTime
deviceInfoDefaultLowOutputLatency :: DeviceInfo -> PaTime
deviceInfoDefaultHighInputLatency :: DeviceInfo -> PaTime
deviceInfoDefaultHighOutputLatency :: DeviceInfo -> PaTime
deviceInfoDefaultSampleRate :: DeviceInfo -> Double

-- | Parameters for one direction (input or output) of a stream.
data StreamParameters
StreamParameters :: DeviceIndex -> Int -> SampleFormat -> PaTime -> Ptr () -> StreamParameters
streamParametersDevice :: StreamParameters -> DeviceIndex
streamParametersChannelCount :: StreamParameters -> Int
streamParametersSampleFormat :: StreamParameters -> SampleFormat
streamParametersSuggestedLatency :: StreamParameters -> PaTime
streamParametersHostApiSpecificStreamInfo :: StreamParameters -> Ptr ()

-- | A structure containing unchanging information about an open stream.
data StreamInfo
StreamInfo :: Int -> PaTime -> PaTime -> Double -> StreamInfo
streamInfoStructVersion :: StreamInfo -> Int
streamInfoInputLatency :: StreamInfo -> PaTime
streamInfoOutputLatency :: StreamInfo -> PaTime
streamInfoSampleRate :: StreamInfo -> Double

-- | 32 bit floating point representation.
type PaFloat32 = Float

-- | This is a format specifier to be used with functions like
--   openDefaultStream. It specifies a 32 bit floating point
--   representation.
paFloat32 :: PaFloat32

-- | 32 bit integer representation.
type PaInt32 = Int32

-- | This is a format specifier to be used with functions like
--   openDefaultStream. It specifies a 32 bit integer representation.
paInt32 :: PaInt32

-- | 16 bit integer representation
type PaInt16 = Int16

-- | This is a format specifier to be used with functions like
--   openDefaultStream. It specifies a 16 bit integer representation.
paInt16 :: PaInt16

-- | 8 bit integer representation
type PaInt8 = Int8

-- | This is a format specifier to be used with functions like
--   openDefaultStream. It specifies a 8 bit integer representation.
paInt8 :: PaInt8

-- | 8 bit unsigned integer representation
type PaUInt8 = Word8

-- | This is a format specifier to be used with functions like
--   openDefaultStream. It specifies a 8 bit unsigned integer
--   representation.
paUInt8 :: PaUInt8

-- | Type to represent the monotonic time in seconds which can be used for
--   synchronisation.
type PaTime = Double

-- | A PaStream can provide multiple channels of real-time streaming audio
--   input and output to a client application. type PaStream = IntPtr
data PaStream a

-- | Used to enumerate host APIs at runtime. The values of this range from
--   <tt>0</tt> to <tt>(getHostApiCount - 1)</tt>
type HostApiIndex = Int

-- | The index of a PortAudio device.
type DeviceIndex = Int

-- | A special DeviceIndex value indicating that no device is available or
--   should be used.
paNoDevice :: DeviceIndex

-- | A special DeviceIndex value indicating that the device(s) to be used
--   are specified in the host api specific stream info structure.
paUseHostApiSpecificDeviceSpecification :: DeviceIndex

-- | Retrieve the release number of the current PortAudio build.
getVersion :: Int

-- | Retrieve the textual version of the current PortAudio build.
getVersionText :: IO (String)

-- | Perform a port audio action in the context of the PortAudio library.
--   
--   This initializes the library, performs the supplied actions, and then
--   terminates the library. This is the reccomended way to use the
--   library. withPortAudio :: IO a -&gt; IO (Maybe a) -- ^ Returns
--   <tt>(Just a)</tt> on success or <tt>Nothing</tt> on failure.
withPortAudio :: IO a -> IO (Either String a)

-- | Library initialization function. Call this before using PortAudio. The
--   functions getVersion, getVersionText, and getErrorText may be called
--   before initialize is called.
initialize :: IO (Either String ErrorCode)

-- | Library termination function. Call this after PortAudio is no longer
--   needed.
terminate :: IO (Either String ErrorCode)

-- | Perform an action with a stream.
withStream :: (PaStream a -> IO a) -> PaStream a -> IO (Either String a)
withDefaultStream :: (PortAudioFormat a) => Int -> Int -> a -> Double -> Int -> (PaStream a -> (Int, Int, Double, Int) -> IO b) -> IO (Either String b)

-- | A Simplified version of openStream which opens the default input
--   and/or output device(s).
openDefaultStream :: (PortAudioFormat a) => Int -> Int -> a -> Double -> Int -> IO (Either String (PaStream a))

-- | Open a stream for input, output, or both.
openStream :: Maybe StreamParameters -> Maybe StreamParameters -> Double -> Int -> IO (Either String (PaStream a))

-- | Close a PortAudio stream. If the audio streem is active, any pending
--   buffers are discarded as if abortStream had been called.
closeStream :: PaStream a -> IO (Either String ErrorCode)

-- | Commences audio processing.
startStream :: PaStream a -> IO (Either String ErrorCode)

-- | Terminates audio processing. It blocks until all pending audio buffers
--   have been played.
stopStream :: PaStream a -> IO (Either String ErrorCode)

-- | Terminates audio processing immediately without waiting for pending
--   buffers to complete.
abortStream :: PaStream a -> IO (Either String ErrorCode)

-- | Read a sample from an input stream.
readStream :: (Storable a) => PaStream a -> Int -> Int -> IO (Either String [[a]])
writeStream :: (Storable a) => PaStream a -> [[a]] -> Int -> IO (Either String ErrorCode)

-- | Retrieve a StreamInfo containing information about the specified
--   stream.
getStreamInfo :: PaStream a -> IO (Maybe StreamInfo)

-- | Determine the current time for the stream according to the sample
--   clock used to generate the buffer timestamps.
getStreamTime :: PaStream a -> IO (Maybe PaTime)

-- | Retrieve CPU usage information (value between 0.0 and 1.0) for the
--   specified stream.
--   
--   Note: A usage level of 0.0 is potentially an error (no specific error
--   condition is defined by PortAudio).
getStreamCpuLoad :: PaStream a -> IO Double

-- | Get the number of frames that can be read from the stream without
--   blocking.
getStreamReadAvailable :: PaStream a -> IO (Either String Int)

-- | Get the number of frames which can be written to the stream without
--   blocking.
getStreamWriteAvailable :: PaStream a -> IO (Either String Int)

-- | Retrieve the number of available host APIs. Even if a host API is
--   available it may have no devices available.
getHostApiCount :: IO (Either String Int)

-- | Returns the index of the default host API.
getDefaultHostApi :: IO (Either String Int)

-- | Gets a structure containing information about a specific host API.
--   FINISH
getHostApiInfo :: HostApiIndex -> IO (Maybe HostApiInfo)

-- | Retrieve the number of available devices or <tt>Nothing</tt> if there
--   are none.
getDeviceCount :: IO (Either ErrorCode DeviceIndex)

-- | Retrieve the index of the default input device or <tt>Nothing</tt> if
--   there are none.
getDefaultInputDevice :: IO (Maybe DeviceIndex)

-- | Retrieve the index of the default output device or <tt>Nothing</tt> if
--   there are none.
getDefaultOutputDevice :: IO (Maybe DeviceIndex)

-- | Retrieve a DeviceInfo structure containing information about the
--   specified device.
getDeviceInfo :: DeviceIndex -> IO (Maybe DeviceInfo)

-- | Retrieve the size of a given sample format in bytes.
getSampleSize :: SampleFormat -> IO (Either String Int)

-- | Convert a static host API uniqe identifier to a runtime host API
--   index. FINISH
hostApiTypeIdToHostApiIndex :: HostApiTypeId -> IO HostApiIndex

-- | Convert a host-API-specific device index to a standard PortAudio
--   device index. FINISH
hostApiDeviceIndexToDeviceIndex :: HostApiIndex -> Int -> IO DeviceIndex

-- | Determines whether it is possible to open a stream with the specified
--   parameters.
isFormatSupported :: (Maybe StreamParameters) -> (Maybe StreamParameters) -> Double -> IO (Either String Int)

-- | Determines whether the stream is stopped.
isStreamStopped :: PaStream a -> IO (Either String Bool)

-- | Determines whether the stream is active.
isStreamActive :: PaStream a -> IO (Either String Bool)

-- | Put the caller to sleep for at least n milliseconds. The function may
--   sleep longer than requested so don't rely on this for accurate musical
--   timing.
paSleep :: Int -> IO ()

-- | Split a list into as many at most n-lengthed lists as possible. This
--   is useful for interleaving audio channels.
chunk :: Int -> [a] -> [[a]]
standardSampleRates :: [Double]
instance PortAudioFormat PaUInt8
instance PortAudioFormat PaInt8
instance PortAudioFormat PaInt16
instance PortAudioFormat PaInt32
instance PortAudioFormat PaFloat32
