-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | LambdaCube 3D EDSL definition
--   
@package lambdacube-edsl
@version 0.2.0

module LambdaCube.Language.ReifyType
data TextureShape
Tex1D :: TextureShape
Tex2D :: TextureShape
Tex3D :: TextureShape
TexRect :: TextureShape
data Red
Red :: Red
data RG
RG :: RG
data RGB
RGB :: RGB
data RGBA
RGBA :: RGBA
data TextureSemantics a
Regular :: a -> TextureSemantics a
Shadow :: a -> TextureSemantics a
MultiSample :: a -> TextureSemantics a
Buffer :: a -> TextureSemantics a
data TextureArray
SingleTex :: TextureArray
ArrayTex :: TextureArray
CubeTex :: TextureArray
data Sampler :: TextureShape -> TextureArray -> TextureSemantics * -> * -> *
class GPU a => IsScalar a
toValue :: IsScalar a => a -> Value
toType :: IsScalar a => a -> InputType
class (Show a, Typeable a) => GPU a
tupleType :: GPU a => a -> Ty
class GPU a => SGPU a

-- | Conversion between surface n-tuples and our tuple representation.
--   
--   our language uses nested tuple representation
class IsTuple tup where type family TupleRepr tup

-- | We represent tuples as heterogenous lists, typed by a type list.
data Tuple c t
NilTup :: Tuple c ()
SnocTup :: Tuple c s -> c t -> Tuple c (s, t)

-- | Type-safe projection indicies for tuples.
--   
--   NB: We index tuples by starting to count from the *right*!
data TupleIdx t e
ZeroTupIdx :: TupleIdx (t, s) s
SuccTupIdx :: TupleIdx t e -> TupleIdx (t, s) e
tix0 :: GPU s => TupleIdx (t, s) s
tix1 :: GPU s => TupleIdx ((t, s), s1) s
tix2 :: GPU s => TupleIdx (((t, s), s1), s2) s
tix3 :: GPU s => TupleIdx ((((t, s), s1), s2), s3) s
tix4 :: GPU s => TupleIdx (((((t, s), s1), s2), s3), s4) s
tix5 :: GPU s => TupleIdx ((((((t, s), s1), s2), s3), s4), s5) s
tix6 :: GPU s => TupleIdx (((((((t, s), s1), s2), s3), s4), s5), s6) s
tix7 :: GPU s => TupleIdx ((((((((t, s), s1), s2), s3), s4), s5), s6), s7) s
tix8 :: GPU s => TupleIdx (((((((((t, s), s1), s2), s3), s4), s5), s6), s7), s8) s
instance Typeable Red
instance Typeable RG
instance Typeable RGB
instance Typeable RGBA
instance Typeable (,,,,,,,,)
instance Typeable (,,,,,,,)
instance Typeable Sampler
instance Typeable 'CubeTex
instance Typeable 'ArrayTex
instance Typeable 'SingleTex
instance Typeable 'Buffer
instance Typeable 'MultiSample
instance Typeable 'Shadow
instance Typeable 'Regular
instance Typeable 'TexRect
instance Typeable 'Tex3D
instance Typeable 'Tex2D
instance Typeable 'Tex1D
instance Eq Red
instance Ord Red
instance Eq RG
instance Ord RG
instance Eq RGB
instance Ord RGB
instance Eq RGBA
instance Ord RGBA
instance IsTuple (a, b, c, d, e, f, g, h, i)
instance IsTuple (a, b, c, d, e, f, g, h)
instance IsTuple (a, b, c, d, e, f, g)
instance IsTuple (a, b, c, d, e, f)
instance IsTuple (a, b, c, d, e)
instance IsTuple (a, b, c, d)
instance IsTuple (a, b, c)
instance IsTuple (a, b)
instance IsTuple ()
instance (SGPU a, SGPU b, SGPU c, SGPU d, SGPU e, SGPU f, SGPU g, SGPU h, SGPU i) => SGPU (a, b, c, d, e, f, g, h, i)
instance (SGPU a, SGPU b, SGPU c, SGPU d, SGPU e, SGPU f, SGPU g, SGPU h) => SGPU (a, b, c, d, e, f, g, h)
instance (SGPU a, SGPU b, SGPU c, SGPU d, SGPU e, SGPU f, SGPU g) => SGPU (a, b, c, d, e, f, g)
instance (SGPU a, SGPU b, SGPU c, SGPU d, SGPU e, SGPU f) => SGPU (a, b, c, d, e, f)
instance (SGPU a, SGPU b, SGPU c, SGPU d, SGPU e) => SGPU (a, b, c, d, e)
instance (SGPU a, SGPU b, SGPU c, SGPU d) => SGPU (a, b, c, d)
instance (SGPU a, SGPU b, SGPU c) => SGPU (a, b, c)
instance (SGPU a, SGPU b) => SGPU (a, b)
instance SGPU V4U
instance SGPU V3U
instance SGPU V2U
instance SGPU V4I
instance SGPU V3I
instance SGPU V2I
instance SGPU V4F
instance SGPU V3F
instance SGPU V2F
instance SGPU M44F
instance SGPU M43F
instance SGPU M42F
instance SGPU M34F
instance SGPU M33F
instance SGPU M32F
instance SGPU M24F
instance SGPU M23F
instance SGPU M22F
instance SGPU Float
instance SGPU Word32
instance SGPU Int32
instance (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f, GPU g, GPU h, GPU i) => GPU (a, b, c, d, e, f, g, h, i)
instance (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f, GPU g, GPU h) => GPU (a, b, c, d, e, f, g, h)
instance (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f, GPU g) => GPU (a, b, c, d, e, f, g)
instance (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f) => GPU (a, b, c, d, e, f)
instance (GPU a, GPU b, GPU c, GPU d, GPU e) => GPU (a, b, c, d, e)
instance (GPU a, GPU b, GPU c, GPU d) => GPU (a, b, c, d)
instance (GPU a, GPU b, GPU c) => GPU (a, b, c)
instance (GPU a, GPU b) => GPU (a, b)
instance GPU M44F
instance GPU M43F
instance GPU M42F
instance GPU M34F
instance GPU M33F
instance GPU M32F
instance GPU M24F
instance GPU M23F
instance GPU M22F
instance GPU V4U
instance GPU V4I
instance GPU V4F
instance GPU V4B
instance GPU V3U
instance GPU V3I
instance GPU V3F
instance GPU V3B
instance GPU V2U
instance GPU V2I
instance GPU V2F
instance GPU V2B
instance GPU Word32
instance GPU Int32
instance GPU Float
instance GPU Bool
instance GPU ()
instance Typeable a => GPU (Sampler 'TexRect 'SingleTex ('Shadow Float) a)
instance Typeable a => GPU (Sampler 'Tex2D 'ArrayTex ('Shadow Float) a)
instance Typeable a => GPU (Sampler 'Tex1D 'ArrayTex ('Shadow Float) a)
instance Typeable a => GPU (Sampler 'Tex2D 'CubeTex ('Shadow Float) a)
instance Typeable a => GPU (Sampler 'Tex2D 'SingleTex ('Shadow Float) a)
instance Typeable a => GPU (Sampler 'Tex1D 'SingleTex ('Shadow Float) a)
instance Typeable a => GPU (Sampler 'TexRect 'SingleTex ('Regular Word) a)
instance Typeable a => GPU (Sampler 'Tex1D 'SingleTex ('Buffer Word) a)
instance Typeable a => GPU (Sampler 'Tex2D 'ArrayTex ('MultiSample Word) a)
instance Typeable a => GPU (Sampler 'Tex2D 'SingleTex ('MultiSample Word) a)
instance Typeable a => GPU (Sampler 'Tex2D 'ArrayTex ('Regular Word) a)
instance Typeable a => GPU (Sampler 'Tex1D 'ArrayTex ('Regular Word) a)
instance Typeable a => GPU (Sampler 'Tex2D 'CubeTex ('Regular Word) a)
instance Typeable a => GPU (Sampler 'Tex3D 'SingleTex ('Regular Word) a)
instance Typeable a => GPU (Sampler 'Tex2D 'SingleTex ('Regular Word) a)
instance Typeable a => GPU (Sampler 'Tex1D 'SingleTex ('Regular Word) a)
instance Typeable a => GPU (Sampler 'TexRect 'SingleTex ('Regular Int) a)
instance Typeable a => GPU (Sampler 'Tex1D 'SingleTex ('Buffer Int) a)
instance Typeable a => GPU (Sampler 'Tex2D 'ArrayTex ('MultiSample Int) a)
instance Typeable a => GPU (Sampler 'Tex2D 'SingleTex ('MultiSample Int) a)
instance Typeable a => GPU (Sampler 'Tex2D 'ArrayTex ('Regular Int) a)
instance Typeable a => GPU (Sampler 'Tex1D 'ArrayTex ('Regular Int) a)
instance Typeable a => GPU (Sampler 'Tex2D 'CubeTex ('Regular Int) a)
instance Typeable a => GPU (Sampler 'Tex3D 'SingleTex ('Regular Int) a)
instance Typeable a => GPU (Sampler 'Tex2D 'SingleTex ('Regular Int) a)
instance Typeable a => GPU (Sampler 'Tex1D 'SingleTex ('Regular Int) a)
instance Typeable a => GPU (Sampler 'TexRect 'SingleTex ('Regular Float) a)
instance Typeable a => GPU (Sampler 'Tex1D 'SingleTex ('Buffer Float) a)
instance Typeable a => GPU (Sampler 'Tex2D 'ArrayTex ('MultiSample Float) a)
instance Typeable a => GPU (Sampler 'Tex2D 'SingleTex ('MultiSample Float) a)
instance Typeable a => GPU (Sampler 'Tex2D 'ArrayTex ('Regular Float) a)
instance Typeable a => GPU (Sampler 'Tex1D 'ArrayTex ('Regular Float) a)
instance Typeable a => GPU (Sampler 'Tex2D 'CubeTex ('Regular Float) a)
instance Typeable a => GPU (Sampler 'Tex3D 'SingleTex ('Regular Float) a)
instance Typeable a => GPU (Sampler 'Tex2D 'SingleTex ('Regular Float) a)
instance Typeable a => GPU (Sampler 'Tex1D 'SingleTex ('Regular Float) a)
instance Show (Sampler dim layerCount t ar)
instance IsScalar V4B
instance IsScalar V3B
instance IsScalar V2B
instance IsScalar V4U
instance IsScalar V3U
instance IsScalar V2U
instance IsScalar V4I
instance IsScalar V3I
instance IsScalar V2I
instance IsScalar V4F
instance IsScalar V3F
instance IsScalar V2F
instance IsScalar M44F
instance IsScalar M43F
instance IsScalar M42F
instance IsScalar M34F
instance IsScalar M33F
instance IsScalar M32F
instance IsScalar M24F
instance IsScalar M23F
instance IsScalar M22F
instance IsScalar Bool
instance IsScalar Float
instance IsScalar Word32
instance IsScalar Int32
instance Typeable a => IsScalar (Sampler 'TexRect 'SingleTex ('Shadow Float) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'ArrayTex ('Shadow Float) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'ArrayTex ('Shadow Float) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'CubeTex ('Shadow Float) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'SingleTex ('Shadow Float) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'SingleTex ('Shadow Float) a)
instance Typeable a => IsScalar (Sampler 'TexRect 'SingleTex ('Regular Word) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'SingleTex ('Buffer Word) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'ArrayTex ('MultiSample Word) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'SingleTex ('MultiSample Word) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'ArrayTex ('Regular Word) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'ArrayTex ('Regular Word) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'CubeTex ('Regular Word) a)
instance Typeable a => IsScalar (Sampler 'Tex3D 'SingleTex ('Regular Word) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'SingleTex ('Regular Word) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'SingleTex ('Regular Word) a)
instance Typeable a => IsScalar (Sampler 'TexRect 'SingleTex ('Regular Int) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'SingleTex ('Buffer Int) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'ArrayTex ('MultiSample Int) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'SingleTex ('MultiSample Int) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'ArrayTex ('Regular Int) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'ArrayTex ('Regular Int) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'CubeTex ('Regular Int) a)
instance Typeable a => IsScalar (Sampler 'Tex3D 'SingleTex ('Regular Int) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'SingleTex ('Regular Int) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'SingleTex ('Regular Int) a)
instance Typeable a => IsScalar (Sampler 'TexRect 'SingleTex ('Regular Float) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'SingleTex ('Buffer Float) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'ArrayTex ('MultiSample Float) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'SingleTex ('MultiSample Float) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'ArrayTex ('Regular Float) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'ArrayTex ('Regular Float) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'CubeTex ('Regular Float) a)
instance Typeable a => IsScalar (Sampler 'Tex3D 'SingleTex ('Regular Float) a)
instance Typeable a => IsScalar (Sampler 'Tex2D 'SingleTex ('Regular Float) a)
instance Typeable a => IsScalar (Sampler 'Tex1D 'SingleTex ('Regular Float) a)

module LambdaCube.Language.Sampler
type GSampler1D t ar = Sampler Tex1D SingleTex t ar
type GSampler2D t ar = Sampler Tex2D SingleTex t ar
type GSampler3D t ar = Sampler Tex3D SingleTex t ar
type GSamplerCube t ar = Sampler Tex2D CubeTex t ar
type GSampler1DArray t ar = Sampler Tex1D ArrayTex t ar
type GSampler2DArray t ar = Sampler Tex2D ArrayTex t ar
type GSampler2DRect t ar = Sampler TexRect SingleTex t ar
type Sampler1DShadow = GSampler1D (Shadow Float) Red
type Sampler2DShadow = GSampler2D (Shadow Float) Red
type SamplerCubeShadow = GSamplerCube (Shadow Float) Red
type Sampler1DArrayShadow = GSampler1DArray (Shadow Float) Red
type Sampler2DArrayShadow = GSampler2DArray (Shadow Float) Red
type Sampler2DRectShadow = GSampler2DRect (Shadow Float) Red
type Sampler1D t ar = GSampler1D (Regular t) ar
type Sampler2D t ar = GSampler2D (Regular t) ar
type Sampler3D t ar = GSampler3D (Regular t) ar
type SamplerCube t ar = GSamplerCube (Regular t) ar
type Sampler1DArray t ar = GSampler1DArray (Regular t) ar
type Sampler2DArray t ar = GSampler2DArray (Regular t) ar
type Sampler2DRect t ar = GSampler2DRect (Regular t) ar
type Sampler2DMS t ar = GSampler2D (MultiSample t) ar
type Sampler2DMSArray t ar = GSampler2DArray (MultiSample t) ar
type SamplerBuffer t ar = GSampler1D (Buffer t) ar
class IsTextureSize sampler lod size | sampler -> lod size
class IsTexture sampler coord bias | sampler -> coord bias
class IsTextureProj sampler coord bias | sampler coord -> bias
class IsTextureLod sampler coord lod | sampler -> coord lod
class IsTextureOffset sampler coord offset bias | sampler -> coord offset bias
class IsTexelFetch sampler coord lod | sampler -> coord lod
class IsTexelFetchOffset sampler coord lod offset | sampler -> coord lod offset
class IsTextureProjOffset sampler coord offset bias | sampler coord -> offset bias
class IsTextureLodOffset sampler coord lod offset | sampler -> coord lod offset
class IsTextureProjLod sampler coord lod | sampler coord -> lod
class IsTextureProjLodOffset sampler coord lod offset | sampler coord -> lod offset
class IsTextureGrad sampler coord dx dy | sampler -> coord dx dy
class IsTextureGradOffset sampler coord dx dy offset | sampler -> coord dx dy offset
class IsTextureProjGrad sampler coord dx dy | sampler coord -> dx dy
class IsTextureProjGradOffset sampler coord dx dy offset | sampler coord -> dx dy offset
instance IsTextureProjGradOffset Sampler2DShadow V4F V2F V2F V2I
instance IsTextureProjGradOffset Sampler2DRectShadow V4F V2F V2F V2I
instance IsTextureProjGradOffset Sampler1DShadow V4F Float Float Int32
instance IsTextureProjGradOffset (Sampler3D t ar) V4F V3F V3F V3I
instance IsTextureProjGradOffset (Sampler2DRect t ar) V4F V2F V2F V2I
instance IsTextureProjGradOffset (Sampler2DRect t ar) V3F V2F V2F V2I
instance IsTextureProjGradOffset (Sampler2D t ar) V4F V2F V2F V2I
instance IsTextureProjGradOffset (Sampler2D t ar) V3F V2F V2F V2I
instance IsTextureProjGradOffset (Sampler1D t ar) V4F Float Float Int32
instance IsTextureProjGradOffset (Sampler1D t ar) V2F Float Float Int32
instance IsTextureProjGrad Sampler2DShadow V4F V2F V2F
instance IsTextureProjGrad Sampler2DRectShadow V4F V2F V2F
instance IsTextureProjGrad Sampler1DShadow V4F Float Float
instance IsTextureProjGrad (Sampler3D t ar) V4F V3F V3F
instance IsTextureProjGrad (Sampler2DRect t ar) V4F V2F V2F
instance IsTextureProjGrad (Sampler2DRect t ar) V3F V2F V2F
instance IsTextureProjGrad (Sampler2D t ar) V4F V2F V2F
instance IsTextureProjGrad (Sampler2D t ar) V3F V2F V2F
instance IsTextureProjGrad (Sampler1D t ar) V4F Float Float
instance IsTextureProjGrad (Sampler1D t ar) V2F Float Float
instance IsTextureGradOffset Sampler2DShadow V3F V2F V2F V2I
instance IsTextureGradOffset Sampler2DRectShadow V3F V2F V2F V2I
instance IsTextureGradOffset Sampler2DArrayShadow V4F V2F V2F V2I
instance IsTextureGradOffset Sampler1DShadow V3F Float Float Int32
instance IsTextureGradOffset Sampler1DArrayShadow V3F Float Float Int32
instance IsTextureGradOffset (Sampler3D t ar) V3F V3F V3F V3I
instance IsTextureGradOffset (Sampler2DRect t ar) V2F V2F V2F V2I
instance IsTextureGradOffset (Sampler2DArray t ar) V3F V2F V2F V2I
instance IsTextureGradOffset (Sampler2D t ar) V2F V2F V2F V2I
instance IsTextureGradOffset (Sampler1DArray t ar) V2F Float Float Int32
instance IsTextureGradOffset (Sampler1D t ar) Float Float Float Int32
instance IsTextureGrad SamplerCubeShadow V4F V3F V3F
instance IsTextureGrad Sampler2DShadow V3F V2F V2F
instance IsTextureGrad Sampler2DRectShadow V3F V2F V2F
instance IsTextureGrad Sampler2DArrayShadow V4F V2F V2F
instance IsTextureGrad Sampler1DShadow V3F Float Float
instance IsTextureGrad Sampler1DArrayShadow V3F Float Float
instance IsTextureGrad (SamplerCube t ar) V3F V3F V3F
instance IsTextureGrad (Sampler3D t ar) V3F V3F V3F
instance IsTextureGrad (Sampler2DRect t ar) V2F V2F V2F
instance IsTextureGrad (Sampler2DArray t ar) V3F V2F V2F
instance IsTextureGrad (Sampler2D t ar) V2F V2F V2F
instance IsTextureGrad (Sampler1DArray t ar) V2F Float Float
instance IsTextureGrad (Sampler1D t ar) Float Float Float
instance IsTextureProjLodOffset Sampler2DShadow V4F Float V2F
instance IsTextureProjLodOffset Sampler1DShadow V4F Float Int32
instance IsTextureProjLodOffset (Sampler3D t ar) V4F Float V3I
instance IsTextureProjLodOffset (Sampler2D t ar) V4F Float V2I
instance IsTextureProjLodOffset (Sampler2D t ar) V3F Float V2I
instance IsTextureProjLodOffset (Sampler1D t ar) V4F Float Int32
instance IsTextureProjLodOffset (Sampler1D t ar) V2F Float Int32
instance IsTextureProjLod Sampler2DShadow V4F Float
instance IsTextureProjLod Sampler1DShadow V4F Float
instance IsTextureProjLod (Sampler3D t ar) V4F Float
instance IsTextureProjLod (Sampler2D t ar) V4F Float
instance IsTextureProjLod (Sampler2D t ar) V3F Float
instance IsTextureProjLod (Sampler1D t ar) V4F Float
instance IsTextureProjLod (Sampler1D t ar) V2F Float
instance IsTextureLodOffset Sampler2DShadow V3F Float V2I
instance IsTextureLodOffset Sampler1DArrayShadow V3F Float Int32
instance IsTextureLodOffset Sampler1DShadow V3F Float Int32
instance IsTextureLodOffset (Sampler3D t ar) V3F Float V3I
instance IsTextureLodOffset (Sampler2DArray t ar) V3F Float V2I
instance IsTextureLodOffset (Sampler2D t ar) V2F Float V2I
instance IsTextureLodOffset (Sampler1DArray t ar) V2F Float Int32
instance IsTextureLodOffset (Sampler1D t ar) Float Float Int32
instance IsTextureProjOffset Sampler2DRectShadow V4F V2I Float
instance IsTextureProjOffset Sampler2DShadow V4F V2I Float
instance IsTextureProjOffset Sampler1DShadow V4F Int32 Float
instance IsTextureProjOffset (Sampler2DRect t ar) V4F V2I ()
instance IsTextureProjOffset (Sampler2DRect t ar) V3F V2I ()
instance IsTextureProjOffset (Sampler3D t ar) V4F V3I Float
instance IsTextureProjOffset (Sampler2D t ar) V4F V2I Float
instance IsTextureProjOffset (Sampler2D t ar) V3F V2I Float
instance IsTextureProjOffset (Sampler1D t ar) V4F Int32 Float
instance IsTextureProjOffset (Sampler1D t ar) V2F Int32 Float
instance IsTexelFetchOffset (Sampler3D t ar) V3I Int32 V3I
instance IsTexelFetchOffset (Sampler2DRect t ar) V2I () V2I
instance IsTexelFetchOffset (Sampler2DArray t ar) V3I Int32 V2I
instance IsTexelFetchOffset (Sampler2D t ar) V2I Int32 V2I
instance IsTexelFetchOffset (Sampler1DArray t ar) V2I Int32 Int32
instance IsTexelFetchOffset (Sampler1D t ar) Int32 Int32 Int32
instance IsTexelFetch (SamplerBuffer t ar) Int32 ()
instance IsTexelFetch (Sampler3D t ar) V3I Int32
instance IsTexelFetch (Sampler2DRect t ar) V2I ()
instance IsTexelFetch (Sampler2DMSArray t ar) V3I Int32
instance IsTexelFetch (Sampler2DMS t ar) V2I Int32
instance IsTexelFetch (Sampler2DArray t ar) V3I Int32
instance IsTexelFetch (Sampler2D t ar) V2I Int32
instance IsTexelFetch (Sampler1DArray t ar) V2I Int32
instance IsTexelFetch (Sampler1D t ar) Int32 Int32
instance IsTextureOffset Sampler2DRectShadow V3F V2I ()
instance IsTextureOffset Sampler2DShadow V3F V2I Float
instance IsTextureOffset Sampler1DArrayShadow V3F Int32 Float
instance IsTextureOffset Sampler1DShadow V3F Int32 Float
instance IsTextureOffset (Sampler3D t ar) V3F V3I Float
instance IsTextureOffset (Sampler2DRect t ar) V2F V2I ()
instance IsTextureOffset (Sampler2DArray t ar) V3F V2I Float
instance IsTextureOffset (Sampler2D t ar) V2F V2I Float
instance IsTextureOffset (Sampler1DArray t ar) V2F Int32 Float
instance IsTextureOffset (Sampler1D t ar) Float Int32 Float
instance IsTextureLod Sampler2DShadow V3F Float
instance IsTextureLod Sampler1DArrayShadow V3F Float
instance IsTextureLod Sampler1DShadow V3F Float
instance IsTextureLod (SamplerCube t ar) V3F Float
instance IsTextureLod (Sampler3D t ar) V3F Float
instance IsTextureLod (Sampler2DArray t ar) V3F Float
instance IsTextureLod (Sampler2D t ar) V2F Float
instance IsTextureLod (Sampler1DArray t ar) V2F Float
instance IsTextureLod (Sampler1D t ar) Float Float
instance IsTextureProj Sampler2DShadow V4F Float
instance IsTextureProj Sampler2DRectShadow V4F ()
instance IsTextureProj Sampler1DShadow V4F Float
instance IsTextureProj (Sampler3D t ar) V4F Float
instance IsTextureProj (Sampler2DRect t ar) V4F ()
instance IsTextureProj (Sampler2DRect t ar) V3F ()
instance IsTextureProj (Sampler2D t ar) V4F Float
instance IsTextureProj (Sampler2D t ar) V3F Float
instance IsTextureProj (Sampler1D t ar) V4F Float
instance IsTextureProj (Sampler1D t ar) V2F Float
instance IsTexture SamplerCubeShadow V4F Float
instance IsTexture Sampler2DRectShadow V3F ()
instance IsTexture Sampler2DArrayShadow V4F ()
instance IsTexture Sampler2DShadow V3F Float
instance IsTexture Sampler1DArrayShadow V3F Float
instance IsTexture Sampler1DShadow V3F Float
instance IsTexture (SamplerCube t ar) V3F Float
instance IsTexture (Sampler3D t ar) V3F Float
instance IsTexture (Sampler2DRect t ar) V2F ()
instance IsTexture (Sampler2DArray t ar) V3F Float
instance IsTexture (Sampler2D t ar) V2F Float
instance IsTexture (Sampler1DArray t ar) V2F Float
instance IsTexture (Sampler1D t ar) Float Float
instance IsTextureSize SamplerCubeShadow Int32 V2I
instance IsTextureSize Sampler2DShadow Int32 V2I
instance IsTextureSize Sampler2DRectShadow () V2I
instance IsTextureSize Sampler2DArrayShadow Int32 V3I
instance IsTextureSize Sampler1DShadow Int32 Int32
instance IsTextureSize Sampler1DArrayShadow Int32 V2I
instance IsTextureSize (SamplerBuffer t ar) () Int32
instance IsTextureSize (SamplerCube t ar) Int32 V2I
instance IsTextureSize (Sampler3D t ar) Int32 V3I
instance IsTextureSize (Sampler2DRect t ar) () V2I
instance IsTextureSize (Sampler2DMSArray t ar) () V3I
instance IsTextureSize (Sampler2DMS t ar) () V2I
instance IsTextureSize (Sampler2DArray t ar) Int32 V3I
instance IsTextureSize (Sampler2D t ar) Int32 V2I
instance IsTextureSize (Sampler1DArray t ar) Int32 V2I
instance IsTextureSize (Sampler1D t ar) Int32 Int32

module LambdaCube.Language.Type
data NatNum :: Nat -> *
N0 :: NatNum 0
N1 :: NatNum 1
N2 :: NatNum 2
N3 :: NatNum 3
N4 :: NatNum 4
N5 :: NatNum 5
N6 :: NatNum 6
N7 :: NatNum 7
N8 :: NatNum 8
N9 :: NatNum 9
n0 :: NatNum 0
n1 :: NatNum 1
n2 :: NatNum 2
n3 :: NatNum 3
n4 :: NatNum 4
n5 :: NatNum 5
n6 :: NatNum 6
n7 :: NatNum 7
n8 :: NatNum 8
n9 :: NatNum 9
class InputTuple tup where type family InputTupleRepr tup
toInputList :: InputTuple tup => tup -> [(ByteString, InputType)]
data Input a
IBool :: ByteString -> Input Bool
IV2B :: ByteString -> Input V2B
IV3B :: ByteString -> Input V3B
IV4B :: ByteString -> Input V4B
IWord :: ByteString -> Input Word32
IV2U :: ByteString -> Input V2U
IV3U :: ByteString -> Input V3U
IV4U :: ByteString -> Input V4U
IInt :: ByteString -> Input Int32
IV2I :: ByteString -> Input V2I
IV3I :: ByteString -> Input V3I
IV4I :: ByteString -> Input V4I
IFloat :: ByteString -> Input Float
IV2F :: ByteString -> Input V2F
IV3F :: ByteString -> Input V3F
IV4F :: ByteString -> Input V4F
IM22F :: ByteString -> Input M22F
IM23F :: ByteString -> Input M23F
IM24F :: ByteString -> Input M24F
IM32F :: ByteString -> Input M32F
IM33F :: ByteString -> Input M33F
IM34F :: ByteString -> Input M34F
IM42F :: ByteString -> Input M42F
IM43F :: ByteString -> Input M43F
IM44F :: ByteString -> Input M44F
toInput :: Input a -> (ByteString, InputType)
data PrimitiveType
Triangle :: PrimitiveType
Line :: PrimitiveType
Point :: PrimitiveType
TriangleAdjacency :: PrimitiveType
LineAdjacency :: PrimitiveType
data FetchPrimitive :: PrimitiveType -> *
Points :: FetchPrimitive Point
Lines :: FetchPrimitive Line
Triangles :: FetchPrimitive Triangle
LinesAdjacency :: FetchPrimitive LineAdjacency
TrianglesAdjacency :: FetchPrimitive TriangleAdjacency
data OutputPrimitive :: PrimitiveType -> *
TrianglesOutput :: OutputPrimitive Triangle
LinesOutput :: OutputPrimitive Line
PointsOutput :: OutputPrimitive Point
data Blending c
NoBlending :: Blending c
BlendLogicOp :: LogicOperation -> Blending c
Blend :: (BlendEquation, BlendEquation) -> ((BlendingFactor, BlendingFactor), (BlendingFactor, BlendingFactor)) -> V4F -> Blending Float
blend :: Blending Float
data VertexStream (primitive :: PrimitiveType) t
data PrimitiveStream (primitive :: PrimitiveType) clipDistances (layerCount :: Nat) (freq :: Frequency) t
data FragmentStream (layerCount :: Nat) t
data ZZ
ZZ :: ZZ
data (:+:) tail head
(:+:) :: !tail -> !head -> (:+:) tail head
data FlatTuple c a t
ZT :: FlatTuple c a ZZ
(:.) :: a t -> FlatTuple c a t' -> FlatTuple c a (t :+: t')
class IsFloatTuple a
data Interpolated e a
Flat :: e a -> Interpolated e a
Smooth :: e a -> Interpolated e a
NoPerspective :: e a -> Interpolated e a
data Color a
data Depth a
data Stencil a
data RasterContext t
PointCtx :: PointSize -> Float -> PointSpriteCoordOrigin -> RasterContext Point
ctxPointSize :: RasterContext Point -> PointSize
ctxFadeThresholdSize :: RasterContext Point -> Float
ctxSpriteCoordOrigin :: RasterContext Point -> PointSpriteCoordOrigin
LineCtx :: Float -> ProvokingVertex -> RasterContext Line
ctxLineWidth :: RasterContext Line -> Float
ctxProvokingVertex' :: RasterContext Line -> ProvokingVertex
TriangleCtx :: CullMode -> PolygonMode -> PolygonOffset -> ProvokingVertex -> RasterContext Triangle
ctxCullMode :: RasterContext Triangle -> CullMode
ctxPolygonMode :: RasterContext Triangle -> PolygonMode
ctxPolygonOffset :: RasterContext Triangle -> PolygonOffset
ctxProvokingVertex :: RasterContext Triangle -> ProvokingVertex
triangleCtx :: RasterContext Triangle
class NoConstraint a
type FrameBuffer layerCount t = FlatTuple NoConstraint (Image layerCount) t
data FragmentOperation ty
DepthOp :: DepthFunction -> Bool -> FragmentOperation (Depth Float)
StencilOp :: StencilTests -> StencilOps -> StencilOps -> FragmentOperation (Stencil Int32)
ColorOp :: Blending c -> mask -> FragmentOperation (Color color)
data Image (layerCount :: Nat) t
DepthImage :: NatNum layerCount -> Float -> Image layerCount (Depth Float)
StencilImage :: NatNum layerCount -> Int32 -> Image layerCount (Stencil Int32)
ColorImage :: NatNum layerCount -> color -> Image layerCount (Color color)
UnclearedImage :: NatNum layerCount -> Image layerCount (Color color)
class IsColorOutput a
class IsValidOutput a
data TextureMipMap
TexMip :: TextureMipMap
TexNoMip :: TextureMipMap
data MipMap (t :: TextureMipMap)
NoMip :: MipMap TexNoMip
Mip :: Int -> Int -> MipMap TexMip
AutoMip :: Int -> Int -> MipMap TexMip
data TextureDataType (kind :: TextureSemantics *) arity
Float :: a -> TextureDataType (Regular Float) a
Int :: a -> TextureDataType (Regular Int) a
Word :: a -> TextureDataType (Regular Word) a
Shadow :: TextureDataType (Shadow Float) Red
class IsColorArity a
toColorArity :: IsColorArity a => a -> ColorArity
data TextureType :: TextureShape -> TextureMipMap -> TextureArray -> Nat -> TextureSemantics * -> * -> *
Texture1D :: TextureDataType t ar -> NatNum layerCount -> TextureType Tex1D TexMip (TexArrRepr layerCount) layerCount t ar
Texture2D :: TextureDataType t ar -> NatNum layerCount -> TextureType Tex2D TexMip (TexArrRepr layerCount) layerCount t ar
Texture3D :: TextureDataType (Regular t) ar -> TextureType Tex3D TexMip SingleTex 1 (Regular t) ar
TextureCube :: TextureDataType t ar -> TextureType Tex2D TexMip CubeTex 6 t ar
TextureRect :: TextureDataType t ar -> TextureType TexRect TexNoMip SingleTex 1 t ar
Texture2DMS :: TextureDataType (Regular t) ar -> NatNum layerCount -> TextureType Tex2D TexNoMip (TexArrRepr layerCount) layerCount (MultiSample t) ar
TextureBuffer :: TextureDataType (Regular t) ar -> TextureType Tex1D TexNoMip SingleTex 1 (Buffer t) ar
data Texture (dim :: TextureShape) (arr :: TextureArray) (t :: TextureSemantics *) ar
class IsMipValid (canMip :: TextureMipMap) (mip :: TextureMipMap)
class IsValidTextureSlot (a :: TextureSemantics *)
data Frequency
Obj :: Frequency
V :: Frequency
G :: Frequency
F :: Frequency
data OutputType
SingleOutput :: OutputType
MultiOutput :: OutputType
class IsVec (dim :: Nat) vec component | vec -> dim component, dim component -> vec
class IsVecScalar (dim :: Nat) vec component | vec -> dim component, dim component -> vec
class IsMat mat h w | mat -> h w
class IsMatVecScalar a t | a -> t
class IsMatVec a t | a -> t
class IsComponent a
class IsNumComponent a
class IsSigned a
class Real a => IsNum a
class IsIntegral a
class IsFloating a
instance Typeable ZZ
instance Typeable (:+:)
instance Typeable TextureDataType
instance Typeable 'MultiOutput
instance Typeable 'SingleOutput
instance Typeable TextureType
instance Typeable Texture
instance Typeable Image
instance Typeable 'F
instance Typeable 'G
instance Typeable 'V
instance Typeable 'Obj
instance Typeable Interpolated
instance Typeable Stencil
instance Typeable Depth
instance Typeable Color
instance Typeable MipMap
instance Typeable 'TexNoMip
instance Typeable 'TexMip
instance Typeable NatNum
instance Show ZZ
instance (Show tail, Show head) => Show (tail :+: head)
instance IsFloating M44F
instance IsFloating M43F
instance IsFloating M42F
instance IsFloating M34F
instance IsFloating M33F
instance IsFloating M32F
instance IsFloating M24F
instance IsFloating M23F
instance IsFloating M22F
instance IsFloating V4F
instance IsFloating V3F
instance IsFloating V2F
instance IsFloating Float
instance IsIntegral Word32
instance IsIntegral Int32
instance IsNum Word32
instance IsNum Int32
instance IsNum Float
instance IsSigned Int
instance IsSigned Float
instance IsNumComponent V4F
instance IsNumComponent V3F
instance IsNumComponent V2F
instance IsNumComponent Word32
instance IsNumComponent Int32
instance IsNumComponent Float
instance IsComponent V4F
instance IsComponent V3F
instance IsComponent V2F
instance IsComponent Bool
instance IsComponent Word32
instance IsComponent Int32
instance IsComponent Float
instance IsMatVec M44F Float
instance IsMatVec M43F Float
instance IsMatVec M42F Float
instance IsMatVec M34F Float
instance IsMatVec M33F Float
instance IsMatVec M32F Float
instance IsMatVec M24F Float
instance IsMatVec M23F Float
instance IsMatVec M22F Float
instance IsMatVec (V4 Bool) Bool
instance IsMatVec (V3 Bool) Bool
instance IsMatVec (V2 Bool) Bool
instance IsMatVec (V4 Word32) Word32
instance IsMatVec (V3 Word32) Word32
instance IsMatVec (V2 Word32) Word32
instance IsMatVec (V4 Int32) Int32
instance IsMatVec (V3 Int32) Int32
instance IsMatVec (V2 Int32) Int32
instance IsMatVec (V4 Float) Float
instance IsMatVec (V3 Float) Float
instance IsMatVec (V2 Float) Float
instance IsMatVecScalar M44F Float
instance IsMatVecScalar M43F Float
instance IsMatVecScalar M42F Float
instance IsMatVecScalar M34F Float
instance IsMatVecScalar M33F Float
instance IsMatVecScalar M32F Float
instance IsMatVecScalar M24F Float
instance IsMatVecScalar M23F Float
instance IsMatVecScalar M22F Float
instance IsMatVecScalar (V4 Bool) Bool
instance IsMatVecScalar (V3 Bool) Bool
instance IsMatVecScalar (V2 Bool) Bool
instance IsMatVecScalar Bool Bool
instance IsMatVecScalar (V4 Word32) Word32
instance IsMatVecScalar (V3 Word32) Word32
instance IsMatVecScalar (V2 Word32) Word32
instance IsMatVecScalar Word32 Word32
instance IsMatVecScalar (V4 Int32) Int32
instance IsMatVecScalar (V3 Int32) Int32
instance IsMatVecScalar (V2 Int32) Int32
instance IsMatVecScalar Int32 Int32
instance IsMatVecScalar (V4 Float) Float
instance IsMatVecScalar (V3 Float) Float
instance IsMatVecScalar (V2 Float) Float
instance IsMatVecScalar Float Float
instance IsMat M44F V4F V4F
instance IsMat M43F V4F V3F
instance IsMat M42F V4F V2F
instance IsMat M34F V3F V4F
instance IsMat M33F V3F V3F
instance IsMat M32F V3F V2F
instance IsMat M24F V2F V4F
instance IsMat M23F V2F V3F
instance IsMat M22F V2F V2F
instance IsVecScalar 4 (V4 Bool) Bool
instance IsVecScalar 3 (V3 Bool) Bool
instance IsVecScalar 2 (V2 Bool) Bool
instance IsVecScalar 1 Bool Bool
instance IsVecScalar 4 (V4 Word32) Word32
instance IsVecScalar 3 (V3 Word32) Word32
instance IsVecScalar 2 (V2 Word32) Word32
instance IsVecScalar 1 Word32 Word32
instance IsVecScalar 4 (V4 Int32) Int32
instance IsVecScalar 3 (V3 Int32) Int32
instance IsVecScalar 2 (V2 Int32) Int32
instance IsVecScalar 1 Int32 Int32
instance IsVecScalar 4 (V4 Float) Float
instance IsVecScalar 3 (V3 Float) Float
instance IsVecScalar 2 (V2 Float) Float
instance IsVecScalar 1 Float Float
instance IsVec 4 (V4 Bool) Bool
instance IsVec 3 (V3 Bool) Bool
instance IsVec 2 (V2 Bool) Bool
instance IsVec 4 (V4 Word32) Word32
instance IsVec 3 (V3 Word32) Word32
instance IsVec 2 (V2 Word32) Word32
instance IsVec 4 (V4 Int32) Int32
instance IsVec 3 (V3 Int32) Int32
instance IsVec 2 (V2 Int32) Int32
instance IsVec 4 (V4 Float) Float
instance IsVec 3 (V3 Float) Float
instance IsVec 2 (V2 Float) Float
instance IsValidTextureSlot ('Buffer a)
instance IsValidTextureSlot ('Shadow a)
instance IsValidTextureSlot ('Regular a)
instance IsMipValid 'TexNoMip 'TexNoMip
instance IsMipValid 'TexMip 'TexNoMip
instance IsMipValid 'TexMip 'TexMip
instance IsColorArity RGBA
instance IsColorArity RGB
instance IsColorArity RG
instance IsColorArity Red
instance IsColorOutput a => IsValidOutput (Stencil s :+: (Depth d :+: a))
instance IsColorOutput a => IsValidOutput (Stencil s :+: a)
instance IsColorOutput a => IsValidOutput (Depth d :+: a)
instance IsColorOutput a => IsValidOutput (Color c :+: a)
instance IsColorOutput b => IsColorOutput (Color c :+: b)
instance IsColorOutput ZZ
instance NoConstraint a
instance IsFloatTuple l => IsFloatTuple (Float :+: l)
instance IsFloatTuple ZZ
instance InputTuple (Input a, Input b, Input c, Input d, Input e, Input f, Input g, Input h, Input i)
instance InputTuple (Input a, Input b, Input c, Input d, Input e, Input f, Input g, Input h)
instance InputTuple (Input a, Input b, Input c, Input d, Input e, Input f, Input g)
instance InputTuple (Input a, Input b, Input c, Input d, Input e, Input f)
instance InputTuple (Input a, Input b, Input c, Input d, Input e)
instance InputTuple (Input a, Input b, Input c, Input d)
instance InputTuple (Input a, Input b, Input c)
instance InputTuple (Input a, Input b)
instance InputTuple (Input a)

module LambdaCube.Language.PrimFun
data PrimFun stage sig
PrimTupToV2 :: PrimFun stage ((a, a) -> V2 a)
PrimTupToV3 :: PrimFun stage ((a, a, a) -> V3 a)
PrimTupToV4 :: PrimFun stage ((a, a, a, a) -> V4 a)
PrimV2ToTup :: PrimFun stage (V2 a -> (a, a))
PrimV3ToTup :: PrimFun stage (V3 a -> (a, a, a))
PrimV4ToTup :: PrimFun stage (V4 a -> (a, a, a, a))
PrimAdd :: PrimFun stage ((a, a) -> a)
PrimAddS :: PrimFun stage ((a, t) -> a)
PrimSub :: PrimFun stage ((a, a) -> a)
PrimSubS :: PrimFun stage ((a, t) -> a)
PrimMul :: PrimFun stage ((a, a) -> a)
PrimMulS :: PrimFun stage ((a, t) -> a)
PrimDiv :: PrimFun stage ((a, a) -> a)
PrimDivS :: PrimFun stage ((a, t) -> a)
PrimNeg :: PrimFun stage (a -> a)
PrimMod :: PrimFun stage ((a, a) -> a)
PrimModS :: PrimFun stage ((a, t) -> a)
PrimBAnd :: PrimFun stage ((a, a) -> a)
PrimBAndS :: PrimFun stage ((a, t) -> a)
PrimBOr :: PrimFun stage ((a, a) -> a)
PrimBOrS :: PrimFun stage ((a, t) -> a)
PrimBXor :: PrimFun stage ((a, a) -> a)
PrimBXorS :: PrimFun stage ((a, t) -> a)
PrimBNot :: PrimFun stage (a -> a)
PrimBShiftL :: PrimFun stage ((a, b) -> a)
PrimBShiftLS :: PrimFun stage ((a, Word32) -> a)
PrimBShiftR :: PrimFun stage ((a, b) -> a)
PrimBShiftRS :: PrimFun stage ((a, Word32) -> a)
PrimAnd :: PrimFun stage ((Bool, Bool) -> Bool)
PrimOr :: PrimFun stage ((Bool, Bool) -> Bool)
PrimXor :: PrimFun stage ((Bool, Bool) -> Bool)
PrimNot :: PrimFun stage (a -> a)
PrimAny :: PrimFun stage (a -> Bool)
PrimAll :: PrimFun stage (a -> Bool)
PrimACos :: PrimFun stage (a -> a)
PrimACosH :: PrimFun stage (a -> a)
PrimASin :: PrimFun stage (a -> a)
PrimASinH :: PrimFun stage (a -> a)
PrimATan :: PrimFun stage (a -> a)
PrimATan2 :: PrimFun stage ((a, a) -> a)
PrimATanH :: PrimFun stage (a -> a)
PrimCos :: PrimFun stage (a -> a)
PrimCosH :: PrimFun stage (a -> a)
PrimDegrees :: PrimFun stage (a -> a)
PrimRadians :: PrimFun stage (a -> a)
PrimSin :: PrimFun stage (a -> a)
PrimSinH :: PrimFun stage (a -> a)
PrimTan :: PrimFun stage (a -> a)
PrimTanH :: PrimFun stage (a -> a)
PrimPow :: PrimFun stage ((a, a) -> a)
PrimExp :: PrimFun stage (a -> a)
PrimLog :: PrimFun stage (a -> a)
PrimExp2 :: PrimFun stage (a -> a)
PrimLog2 :: PrimFun stage (a -> a)
PrimSqrt :: PrimFun stage (a -> a)
PrimInvSqrt :: PrimFun stage (a -> a)
PrimIsNan :: PrimFun stage (a -> b)
PrimIsInf :: PrimFun stage (a -> b)
PrimAbs :: PrimFun stage (a -> a)
PrimSign :: PrimFun stage (a -> a)
PrimFloor :: PrimFun stage (a -> a)
PrimTrunc :: PrimFun stage (a -> a)
PrimRound :: PrimFun stage (a -> a)
PrimRoundEven :: PrimFun stage (a -> a)
PrimCeil :: PrimFun stage (a -> a)
PrimFract :: PrimFun stage (a -> a)
PrimModF :: PrimFun stage (a -> (a, a))
PrimMin :: PrimFun stage ((a, a) -> a)
PrimMinS :: PrimFun stage ((a, t) -> a)
PrimMax :: PrimFun stage ((a, a) -> a)
PrimMaxS :: PrimFun stage ((a, t) -> a)
PrimClamp :: PrimFun stage ((a, a, a) -> a)
PrimClampS :: PrimFun stage ((a, t, t) -> a)
PrimMix :: PrimFun stage ((a, a, a) -> a)
PrimMixS :: PrimFun stage ((a, a, Float) -> a)
PrimMixB :: PrimFun stage ((a, a, b) -> a)
PrimStep :: PrimFun stage ((a, a) -> a)
PrimStepS :: PrimFun stage ((Float, a) -> a)
PrimSmoothStep :: PrimFun stage ((a, a, a) -> a)
PrimSmoothStepS :: PrimFun stage ((Float, Float, a) -> a)
PrimFloatBitsToInt :: PrimFun stage (fv -> iv)
PrimFloatBitsToUInt :: PrimFun stage (fv -> uv)
PrimIntBitsToFloat :: PrimFun stage (iv -> fv)
PrimUIntBitsToFloat :: PrimFun stage (uv -> fv)
PrimLength :: PrimFun stage (a -> Float)
PrimDistance :: PrimFun stage ((a, a) -> Float)
PrimDot :: PrimFun stage ((a, a) -> Float)
PrimCross :: PrimFun stage ((a, a) -> a)
PrimNormalize :: PrimFun stage (a -> a)
PrimFaceForward :: PrimFun stage ((a, a, a) -> a)
PrimReflect :: PrimFun stage ((a, a) -> a)
PrimRefract :: PrimFun stage ((a, a, a) -> a)
PrimTranspose :: PrimFun stage (a -> b)
PrimDeterminant :: PrimFun stage (m -> Float)
PrimInverse :: PrimFun stage (m -> m)
PrimOuterProduct :: PrimFun stage ((w, h) -> m)
PrimMulMatVec :: PrimFun stage ((m, w) -> h)
PrimMulVecMat :: PrimFun stage ((h, m) -> w)
PrimMulMatMat :: PrimFun stage ((a, b) -> c)
PrimLessThan :: PrimFun stage ((a, a) -> b)
PrimLessThanEqual :: PrimFun stage ((a, a) -> b)
PrimGreaterThan :: PrimFun stage ((a, a) -> b)
PrimGreaterThanEqual :: PrimFun stage ((a, a) -> b)
PrimEqualV :: PrimFun stage ((a, a) -> b)
PrimEqual :: PrimFun stage ((a, a) -> Bool)
PrimNotEqualV :: PrimFun stage ((a, a) -> b)
PrimNotEqual :: PrimFun stage ((a, a) -> Bool)
PrimDFdx :: PrimFun F (a -> a)
PrimDFdy :: PrimFun F (a -> a)
PrimFWidth :: PrimFun F (a -> a)
PrimNoise1 :: PrimFun stage (a -> Float)
PrimNoise2 :: PrimFun stage (a -> b)
PrimNoise3 :: PrimFun stage (a -> b)
PrimNoise4 :: PrimFun stage (a -> b)
PrimTextureSize :: PrimFun stage ((sampler, lod) -> size)
PrimTexture :: PrimFun stage ((sampler, coord) -> TexelRepr sampler)
PrimTextureB :: PrimFun F ((sampler, coord, bias) -> TexelRepr sampler)
PrimTextureProj :: PrimFun stage ((sampler, coord) -> TexelRepr sampler)
PrimTextureProjB :: PrimFun F ((sampler, coord, bias) -> TexelRepr sampler)
PrimTextureLod :: PrimFun stage ((sampler, coord, lod) -> TexelRepr sampler)
PrimTextureOffset :: PrimFun stage ((sampler, coord, offset) -> TexelRepr sampler)
PrimTextureOffsetB :: PrimFun F ((sampler, coord, offset, bias) -> TexelRepr sampler)
PrimTexelFetch :: PrimFun stage ((sampler, coord, lod) -> TexelRepr sampler)
PrimTexelFetchOffset :: PrimFun stage ((sampler, coord, lod, offset) -> TexelRepr sampler)
PrimTextureProjOffset :: PrimFun stage ((sampler, coord, offset) -> TexelRepr sampler)
PrimTextureProjOffsetB :: PrimFun F ((sampler, coord, offset, bias) -> TexelRepr sampler)
PrimTextureLodOffset :: PrimFun stage ((sampler, coord, lod, offset) -> TexelRepr sampler)
PrimTextureProjLod :: PrimFun stage ((sampler, coord, lod) -> TexelRepr sampler)
PrimTextureProjLodOffset :: PrimFun stage ((sampler, coord, lod, offset) -> TexelRepr sampler)
PrimTextureGrad :: PrimFun stage ((sampler, coord, dx, dy) -> TexelRepr sampler)
PrimTextureGradOffset :: PrimFun stage ((sampler, coord, dx, dy, offset) -> TexelRepr sampler)
PrimTextureProjGrad :: PrimFun stage ((sampler, coord, dx, dy) -> TexelRepr sampler)
PrimTextureProjGradOffset :: PrimFun stage ((sampler, coord, dx, dy, offset) -> TexelRepr sampler)

module LambdaCube.Language.HOAS
data Exp :: Frequency -> * -> *
Tag :: Int -> String -> Exp stage t
Shr :: N -> Exp stage t
Let :: Exp stage a -> (Exp stage a -> Exp stage b) -> Exp stage b
Var :: Dynamic -> Exp stage t
Const :: t -> Exp stage t
PrimVar :: Input t -> Exp stage t
Uni :: Input t -> Exp stage t
Cond :: Exp stage Bool -> Exp stage t -> Exp stage t -> Exp stage t
PrimApp :: PrimFun stage (a -> r) -> Exp stage a -> Exp stage r
Tup :: Tuple (Exp stage) (TupleRepr t) -> Exp stage t
Prj :: TupleIdx (TupleRepr t) e -> Exp stage t -> Exp stage e
Sampler :: Filter -> EdgeMode -> Exp Obj (Texture dim arr t ar) -> Exp stage (Sampler dim arr t ar)
TextureSlot :: ByteString -> TextureType dim mip arr layerCount t ar -> Exp Obj (Texture dim arr t ar)
Texture :: TextureType dim canMip arr layerCount t ar -> TexSizeRepr dim -> MipMap mip -> [Exp Obj (Image layerCount (TexDataRepr ar t))] -> Exp Obj (Texture dim arr t ar)
Loop :: (Exp stage s -> Exp stage s) -> (Exp stage s -> Exp stage Bool) -> (Exp stage s -> Exp stage a) -> Exp stage s -> Exp stage a
Fetch :: ByteString -> FetchPrimitive primitive -> a -> Exp Obj (VertexStream primitive (InputTupleRepr a))
Transform :: (Exp V a -> VertexOut clipDistances b) -> Exp Obj (VertexStream primitive a) -> Exp Obj (PrimitiveStream primitive clipDistances 1 V b)
Reassemble :: GeometryShader inputPrimitive outputPrimitive inputClipDistances outputClipDistances layerCount a b -> Exp Obj (PrimitiveStream inputPrimitive inputClipDistances 1 V a) -> Exp Obj (PrimitiveStream outputPrimitive outputClipDistances layerCount G b)
Rasterize :: RasterContext primitive -> Exp Obj (PrimitiveStream primitive clipDistances layerCount freq a) -> Exp Obj (FragmentStream layerCount a)
FrameBuffer :: FrameBuffer layerCount t -> Exp Obj (FrameBuffer layerCount (FTRepr' t))
Accumulate :: AccumulationContext b -> FragmentFilter a -> (Exp F a -> FragmentOut (NoStencilRepr b)) -> Exp Obj (FragmentStream layerCount a) -> Exp Obj (FrameBuffer layerCount (FTRepr' b)) -> Exp Obj (FrameBuffer layerCount (FTRepr' b))
PrjFrameBuffer :: ByteString -> TupleIdx (EltRepr b) t -> Exp Obj (FrameBuffer layerCount b) -> Exp Obj (Image layerCount t)
PrjImage :: ByteString -> NatNum idx -> Exp Obj (Image layerCount t) -> Exp Obj (Image 1 t)
type InterpolatedFlatExp stage a = FlatTuple GPU (Interpolated (Exp stage)) a
type FlatExp stage a = FlatTuple GPU (Exp stage) a
data VertexOut clipDistances t
VertexOut :: Exp V V4F -> Exp V Float -> FlatExp V clipDistances -> InterpolatedFlatExp V a -> VertexOut (FTRepr clipDistances) (FTRepr a)
data GeometryShader (inPrimitive :: PrimitiveType) (outPrimitive :: PrimitiveType) inClipDistances outClipDistances (layerCount :: Nat) a b
GeometryShader :: NatNum layerCount -> OutputPrimitive outputPrimitive -> Int -> (Exp G input -> Exp G (i, Int32)) -> (Exp G i -> Exp G (Int32, Int32, i, j, Int32)) -> (Exp G j -> GeometryOut j outputClipDistances b) -> GeometryShader inputPrimitive outputPrimitive inputClipDistances outputClipDistances layerCount a b
data GeometryOut i clipDistances t
GeometryOut :: Exp G i -> Exp G V4F -> Exp G Float -> FlatExp G clipDistances -> InterpolatedFlatExp G a -> GeometryOut i (FTRepr clipDistances) (FTRepr a)
data FragmentOut t
FragmentOut :: FlatExp F a -> FragmentOut (ColorRepr a)
FragmentOutDepth :: Exp F Float -> FlatExp F a -> FragmentOut (Depth Float :+: ColorRepr a)
FragmentOutRastDepth :: FlatExp F a -> FragmentOut (Depth Float :+: ColorRepr a)
data FragmentFilter a
PassAll :: FragmentFilter a
Filter :: (Exp F a -> Exp F Bool) -> FragmentFilter a
data GPOutput (o :: OutputType)
SamplerOut :: ByteString -> Exp Obj (Sampler dim arr t ar) -> GPOutput SingleOutput
ScreenOut :: Exp Obj (Image 1 t) -> GPOutput SingleOutput
MultiOut :: [GPOutput SingleOutput] -> GPOutput MultiOutput
data AccumulationContext t
AccumulationContext :: Maybe (Exp Obj V4U) -> FlatTuple NoConstraint FragmentOperation t -> AccumulationContext t
accViewportSize :: AccumulationContext t -> Maybe (Exp Obj V4U)
accOperations :: AccumulationContext t -> FlatTuple NoConstraint FragmentOperation t

module LambdaCube.Language
class OperatorArithmetic a b
(@+) :: OperatorArithmetic a b => a -> b -> a
(@-) :: OperatorArithmetic a b => a -> b -> a
(@*) :: OperatorArithmetic a b => a -> b -> a
class OperatorDivide a b
(@/) :: OperatorDivide a b => a -> b -> a
(@%) :: OperatorDivide a b => a -> b -> a
class OperatorBit a b
(@&) :: OperatorBit a b => a -> b -> a
(@|) :: OperatorBit a b => a -> b -> a
(@^) :: OperatorBit a b => a -> b -> a
class OperatorShift a b
(@>>) :: OperatorShift a b => a -> b -> a
(@<<) :: OperatorShift a b => a -> b -> a
class OperatorEq a b
(@==) :: OperatorEq a b => a -> a -> b
(@/=) :: OperatorEq a b => a -> a -> b
class OperatorRelational a b
(@<=) :: OperatorRelational a b => a -> a -> b
(@>=) :: OperatorRelational a b => a -> a -> b
(@<) :: OperatorRelational a b => a -> a -> b
(@>) :: OperatorRelational a b => a -> a -> b
(@&&) :: Exp stage Bool -> Exp stage Bool -> Exp stage Bool
(@||) :: Exp stage Bool -> Exp stage Bool -> Exp stage Bool
xor' :: Exp stage Bool -> Exp stage Bool -> Exp stage Bool
not' :: (IsVecScalar * * d r Bool, GPU r) => Exp stage r -> Exp stage r
any' :: (IsVecScalar * * d a Bool, GPU a) => Exp stage a -> Exp stage Bool
all' :: (IsVecScalar * * d a Bool, GPU a) => Exp stage a -> Exp stage Bool
acos' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
acosh' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
asin' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
asinh' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
atan' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
atan2' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r -> Exp stage r
atanh' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
cos' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
cosh' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
degrees' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
radians' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
sin' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
sinh' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
tan' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
tanh' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
pow' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r -> Exp stage r
exp' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
log' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
exp2' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
log2' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
sqrt' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
invsqrt' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
isnan' :: (IsVecScalar * * d a Float, IsVecScalar * * d r Bool, GPU a, GPU r) => Exp stage a -> Exp stage r
isinf' :: (IsVecScalar * * d a Float, IsVecScalar * * d r Bool, GPU a, GPU r) => Exp stage a -> Exp stage r
abs' :: (IsVecScalar * k d r t, IsSigned k t, GPU r) => Exp stage r -> Exp stage r
sign' :: (IsVecScalar * k d r t, IsSigned k t, GPU r) => Exp stage r -> Exp stage r
floor' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
trunc' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
round' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
roundEven' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
ceil' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
fract' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
floatBitsToInt' :: (IsVecScalar * * d a Float, IsVecScalar * * d r Int32, GPU a, GPU r) => Exp stage a -> Exp stage r
floatBitsToUint' :: (IsVecScalar * * d a Float, IsVecScalar * * d r Word32, GPU a, GPU r) => Exp stage a -> Exp stage r
intBitsToFloat' :: (IsVecScalar * * d a Int32, IsVecScalar * * d r Float, GPU a, GPU r) => Exp stage a -> Exp stage r
uintBitsToFloat' :: (IsVecScalar * * d a Word32, IsVecScalar * * d r Float, GPU a, GPU r) => Exp stage a -> Exp stage r
length' :: (IsVecScalar * * d a Float, GPU a) => Exp stage a -> Exp stage Float
distance' :: (IsVecScalar * * d a Float, GPU a) => Exp stage a -> Exp stage a -> Exp stage Float
dot' :: (IsVecScalar * * d a Float, GPU a) => Exp stage a -> Exp stage a -> Exp stage Float
cross' :: Exp stage (V3 Float) -> Exp stage (V3 Float) -> Exp stage (V3 Float)
normalize' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r
faceforward' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r -> Exp stage r -> Exp stage r
reflect' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r -> Exp stage r
refract' :: (IsVecScalar * * d r Float, GPU r) => Exp stage r -> Exp stage r -> Exp stage r -> Exp stage r
transpose' :: (IsMat * k1 k a h w, IsMat * k k1 r w h, GPU a, GPU r) => Exp stage a -> Exp stage r
determinant' :: (IsMat * k k a s s, GPU a) => Exp stage a -> Exp stage Float
inverse' :: (IsMat * k k1 r h w, GPU r) => Exp stage r -> Exp stage r
outerProduct' :: (IsMat * * * r h w, GPU w, GPU h, GPU r) => Exp stage w -> Exp stage h -> Exp stage r
dFdx' :: (IsVecScalar * * d r Float, GPU r) => Exp F r -> Exp F r
dFdy' :: (IsVecScalar * * d r Float, GPU r) => Exp F r -> Exp F r
fwidth' :: (IsVecScalar * * d r Float, GPU r) => Exp F r -> Exp F r
noise1' :: (IsVecScalar * * d a Float, GPU a) => Exp stage a -> Exp stage Float
noise2' :: (IsVecScalar * * d a Float, GPU a) => Exp stage a -> Exp stage (V2 Float)
noise3' :: (IsVecScalar * * d a Float, GPU a) => Exp stage a -> Exp stage (V3 Float)
noise4' :: (IsVecScalar * * d a Float, GPU a) => Exp stage a -> Exp stage (V4 Float)
textureSize' :: (IsTextureSize * * * sampler lod r, GPU lod, GPU sampler, GPU r) => Exp stage sampler -> Exp stage lod -> Exp stage r
texture' :: (IsTexture * * k sampler coord bias, GPU (TexelRepr sampler), GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage (TexelRepr sampler)
textureB' :: (IsTexture * * * sampler coord bias, GPU (TexelRepr sampler), GPU bias, GPU coord, GPU sampler) => Exp F sampler -> Exp F coord -> Exp F bias -> Exp F (TexelRepr sampler)
textureProj' :: (IsTextureProj * * k sampler coord bias, GPU (TexelRepr sampler), GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage (TexelRepr sampler)
textureProjB' :: (IsTextureProj * * * sampler coord bias, GPU (TexelRepr sampler), GPU bias, GPU coord, GPU sampler) => Exp F sampler -> Exp F coord -> Exp F bias -> Exp F (TexelRepr sampler)
textureLod' :: (IsTextureLod * * * sampler coord lod, GPU (TexelRepr sampler), GPU lod, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage lod -> Exp stage (TexelRepr sampler)
textureOffset' :: (IsTextureOffset * * * k sampler coord offset bias, GPU (TexelRepr sampler), GPU offset, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage offset -> Exp stage (TexelRepr sampler)
textureOffsetB' :: (IsTextureOffset * * * * sampler coord offset bias, GPU (TexelRepr sampler), GPU bias, GPU offset, GPU coord, GPU sampler) => Exp F sampler -> Exp F coord -> Exp F offset -> Exp F bias -> Exp F (TexelRepr sampler)
texelFetch' :: (IsTexelFetch * * * sampler coord lod, GPU (TexelRepr sampler), GPU lod, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage lod -> Exp stage (TexelRepr sampler)
texelFetchOffset' :: (IsTexelFetchOffset * * * * sampler coord lod offset, GPU (TexelRepr sampler), GPU offset, GPU lod, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage lod -> Exp stage offset -> Exp stage (TexelRepr sampler)
textureProjOffset' :: (IsTextureProjOffset * * * k sampler coord offset bias, GPU (TexelRepr sampler), GPU offset, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage offset -> Exp stage (TexelRepr sampler)
textureProjOffsetB' :: (IsTextureProjOffset * * * * sampler coord offset bias, GPU (TexelRepr sampler), GPU bias, GPU offset, GPU coord, GPU sampler) => Exp F sampler -> Exp F coord -> Exp F offset -> Exp F bias -> Exp F (TexelRepr sampler)
textureLodOffset' :: (IsTextureLodOffset * * * * sampler coord lod offset, GPU (TexelRepr sampler), GPU offset, GPU lod, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage lod -> Exp stage offset -> Exp stage (TexelRepr sampler)
textureProjLod' :: (IsTextureProjLod * * * sampler coord lod, GPU (TexelRepr sampler), GPU lod, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage lod -> Exp stage (TexelRepr sampler)
textureProjLodOffset' :: (IsTextureProjLodOffset * * * * sampler coord lod offset, GPU (TexelRepr sampler), GPU offset, GPU lod, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage lod -> Exp stage offset -> Exp stage (TexelRepr sampler)
textureGrad' :: (IsTextureGrad * * * * sampler coord dx dy, GPU (TexelRepr sampler), GPU dy, GPU dx, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage dx -> Exp stage dy -> Exp stage (TexelRepr sampler)
textureGradOffset' :: (IsTextureGradOffset * * * * * sampler coord dx dy offset, GPU (TexelRepr sampler), GPU offset, GPU dy, GPU dx, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage dx -> Exp stage dy -> Exp stage offset -> Exp stage (TexelRepr sampler)
textureProjGrad' :: (IsTextureProjGrad * * * * sampler coord dx dy, GPU (TexelRepr sampler), GPU dy, GPU dx, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage dx -> Exp stage dy -> Exp stage (TexelRepr sampler)
textureProjGradOffset' :: (IsTextureProjGradOffset * * * * * sampler coord dx dy offset, GPU (TexelRepr sampler), GPU offset, GPU dy, GPU dx, GPU coord, GPU sampler) => Exp stage sampler -> Exp stage coord -> Exp stage dx -> Exp stage dy -> Exp stage offset -> Exp stage (TexelRepr sampler)
class BuiltinCommon a b
min' :: BuiltinCommon a b => a -> b -> a
max' :: BuiltinCommon a b => a -> b -> a
clamp' :: BuiltinCommon a b => a -> b -> b -> a
class BuiltinMix a b
mix' :: BuiltinMix a b => a -> a -> b -> a
class BuiltinStep a b
step' :: BuiltinStep a b => b -> a -> a
smoothstep' :: BuiltinStep a b => b -> b -> a -> a
(@.) :: (IsVecScalar * * d a Float, GPU a) => Exp stage a -> Exp stage a -> Exp stage Float
(@#) :: Exp stage (V3 Float) -> Exp stage (V3 Float) -> Exp stage (V3 Float)
(@*.) :: (IsMat * * * m r w, GPU w, GPU m, GPU r) => Exp stage m -> Exp stage w -> Exp stage r
(@.*) :: (IsMat * * * m h r, GPU h, GPU m, GPU r) => Exp stage h -> Exp stage m -> Exp stage r
(@.*.) :: (IsMat * k1 k2 r i k3, IsMat * k1 k a i j, IsMat * k k2 b j k3, GPU b, GPU a, GPU r) => Exp stage a -> Exp stage b -> Exp stage r
complement' :: (IsVecScalar * k d r t, IsIntegral k t, GPU r) => Exp stage r -> Exp stage r
neg' :: (IsMatVecScalar * k r t, IsSigned k t, GPU r) => Exp stage r -> Exp stage r
modf' :: (IsVecScalar * * d a Float, GPU a) => Exp stage a -> Exp stage (a, a)
class SpecialConstant a
zero' :: SpecialConstant a => a
one' :: SpecialConstant a => a
class IdentityMatrix a
idmtx' :: IdentityMatrix a => a
class PkgVec v
unpack' :: (PkgVec v, GPU a, GPU (v a), IsComponent a) => Exp stage (v a) -> v (Exp stage a)
pack' :: (PkgVec v, GPU a, GPU (v a), IsComponent a) => v (Exp stage a) -> Exp stage (v a)
tup0 :: Exp freq ()
tup2 :: (GPU a, GPU b) => (Exp stage a, Exp stage b) -> Exp stage (a, b)
tup3 :: (GPU a, GPU b, GPU c) => (Exp stage a, Exp stage b, Exp stage c) -> Exp stage (a, b, c)
tup4 :: (GPU a, GPU b, GPU c, GPU d) => (Exp stage a, Exp stage b, Exp stage c, Exp stage d) -> Exp stage (a, b, c, d)
tup5 :: (GPU a, GPU b, GPU c, GPU d, GPU e) => (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e) -> Exp stage (a, b, c, d, e)
tup6 :: (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f) => (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e, Exp stage f) -> Exp stage (a, b, c, d, e, f)
tup7 :: (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f, GPU g) => (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e, Exp stage f, Exp stage g) -> Exp stage (a, b, c, d, e, f, g)
tup8 :: (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f, GPU g, GPU h) => (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e, Exp stage f, Exp stage g, Exp stage h) -> Exp stage (a, b, c, d, e, f, g, h)
tup9 :: (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f, GPU g, GPU h, GPU i) => (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e, Exp stage f, Exp stage g, Exp stage h, Exp stage i) -> Exp stage (a, b, c, d, e, f, g, h, i)
untup2 :: (GPU a, GPU b) => Exp stage (a, b) -> (Exp stage a, Exp stage b)
untup3 :: (GPU a, GPU b, GPU c) => Exp stage (a, b, c) -> (Exp stage a, Exp stage b, Exp stage c)
untup4 :: (GPU a, GPU b, GPU c, GPU d) => Exp stage (a, b, c, d) -> (Exp stage a, Exp stage b, Exp stage c, Exp stage d)
untup5 :: (GPU a, GPU b, GPU c, GPU d, GPU e) => Exp stage (a, b, c, d, e) -> (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e)
untup6 :: (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f) => Exp stage (a, b, c, d, e, f) -> (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e, Exp stage f)
untup7 :: (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f, GPU g) => Exp stage (a, b, c, d, e, f, g) -> (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e, Exp stage f, Exp stage g)
untup8 :: (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f, GPU g, GPU h) => Exp stage (a, b, c, d, e, f, g, h) -> (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e, Exp stage f, Exp stage g, Exp stage h)
untup9 :: (GPU a, GPU b, GPU c, GPU d, GPU e, GPU f, GPU g, GPU h, GPU i) => Exp stage (a, b, c, d, e, f, g, h, i) -> (Exp stage a, Exp stage b, Exp stage c, Exp stage d, Exp stage e, Exp stage f, Exp stage g, Exp stage h, Exp stage i)
vertexID' :: Exp V Int32
instanceID' :: Exp V Int32
primitiveIDIn' :: Exp G Int32
fragCoord' :: Exp F V4F
frontFacing' :: Exp F Bool
pointCoord' :: Exp F V2F
primitiveID' :: Exp F Int32
instance [overlap ok] PkgVec V4
instance [overlap ok] PkgVec V3
instance [overlap ok] PkgVec V2
instance [overlap ok] IdentityMatrix M44F
instance [overlap ok] IdentityMatrix M33F
instance [overlap ok] IdentityMatrix M22F
instance [overlap ok] SpecialConstant a => SpecialConstant (V4 a)
instance [overlap ok] SpecialConstant a => SpecialConstant (V3 a)
instance [overlap ok] SpecialConstant a => SpecialConstant (V2 a)
instance [overlap ok] SpecialConstant Float
instance [overlap ok] SpecialConstant Word32
instance [overlap ok] SpecialConstant Int32
instance [overlap ok] SpecialConstant Bool
instance [overlap ok] (GPU a, IsVecScalar d a Float) => BuiltinStep (Exp stage a) (Exp stage Float)
instance [overlap ok] BuiltinStep (Exp stage V4F) (Exp stage V4F)
instance [overlap ok] BuiltinStep (Exp stage V3F) (Exp stage V3F)
instance [overlap ok] BuiltinStep (Exp stage V2F) (Exp stage V2F)
instance [overlap ok] (GPU a, GPU b, IsVecScalar d a Float, IsVecScalar d b Bool) => BuiltinMix (Exp stage a) (Exp stage b)
instance [overlap ok] (GPU a, IsVecScalar d a Float) => BuiltinMix (Exp stage a) (Exp stage Float)
instance [overlap ok] (GPU a, IsVecScalar d a Float) => BuiltinMix (Exp stage a) (Exp stage a)
instance [overlap ok] (GPU a, GPU t, IsNum t, IsVecScalar d a t) => BuiltinCommon (Exp stage a) (Exp stage t)
instance [overlap ok] (GPU a, IsNum t, IsVecScalar d a t) => BuiltinCommon (Exp stage a) (Exp stage a)
instance [overlap ok] (GPU a, GPU b, IsNum t, IsVecScalar d a t, IsVecScalar d b Bool) => OperatorRelational (Exp stage a) (Exp stage b)
instance [overlap ok] (GPU a, IsMatVecScalar a t) => OperatorEq (Exp stage a) (Exp stage Bool)
instance [overlap ok] (GPU a, GPU b, IsNum t, IsVecScalar d a t, IsVecScalar d b Bool) => OperatorEq (Exp stage a) (Exp stage b)
instance [overlap ok] (GPU a, IsIntegral t, IsVecScalar d a t) => OperatorShift (Exp stage a) (Exp stage Word32)
instance [overlap ok] (GPU a, GPU b, IsIntegral t, IsVecScalar d a t, IsVecScalar d b Word32) => OperatorShift (Exp stage a) (Exp stage b)
instance [overlap ok] (GPU a, GPU t, IsIntegral t, IsVecScalar d a t) => OperatorBit (Exp stage a) (Exp stage t)
instance [overlap ok] (GPU a, IsIntegral t, IsVecScalar d a t) => OperatorBit (Exp stage a) (Exp stage a)
instance [overlap ok] (GPU a, GPU t, IsNum t, IsVecScalar d a t) => OperatorDivide (Exp stage a) (Exp stage t)
instance [overlap ok] (GPU a, IsNum t, IsVecScalar d a t) => OperatorDivide (Exp stage a) (Exp stage a)
instance [overlap ok] (GPU a, GPU t, IsNum t, IsMatVecScalar a t) => OperatorArithmetic (Exp stage a) (Exp stage t)
instance [overlap ok] (GPU c, GPU (V4 t), IsNumComponent t, IsMatVecScalar (V4 t) c, IsNum c) => OperatorArithmetic (Exp stage (V4 t)) (Exp stage c)
instance [overlap ok] (GPU c, GPU (V3 t), IsNumComponent t, IsMatVecScalar (V3 t) c, IsNum c) => OperatorArithmetic (Exp stage (V3 t)) (Exp stage c)
instance [overlap ok] (GPU c, GPU (V2 t), IsNumComponent t, IsMatVecScalar (V2 t) c, IsNum c) => OperatorArithmetic (Exp stage (V2 t)) (Exp stage c)
instance [overlap ok] (GPU (V4 t), IsNumComponent t, IsMatVec (V4 t) c, IsNum c) => OperatorArithmetic (Exp stage (V4 t)) (Exp stage (V4 t))
instance [overlap ok] (GPU (V3 t), IsNumComponent t, IsMatVec (V3 t) c, IsNum c) => OperatorArithmetic (Exp stage (V3 t)) (Exp stage (V3 t))
instance [overlap ok] (GPU (V2 t), IsNumComponent t, IsMatVec (V2 t) c, IsNum c) => OperatorArithmetic (Exp stage (V2 t)) (Exp stage (V2 t))

module LambdaCube.Convert.PrimFun
convertPrimFun :: PrimFun a b -> PrimFun

module LambdaCube.Convert.ToDeBruijn
convertGPOutput :: GPOutput o -> N
