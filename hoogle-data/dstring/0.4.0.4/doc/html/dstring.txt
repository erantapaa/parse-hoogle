-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Difference strings
--   
--   Difference strings: a data structure for O(1) append on strings. Note
--   that a <tt>DString</tt> is just a newtype wrapper around a <tt>DList
--   Char</tt>. The reason we need a new type instead of just a type
--   synonym is that we can have an <tt>instance IsString DString</tt>
--   without using language extensions (<tt>TypeSynonymInstances</tt> or
--   <tt>FlexibleInstances</tt>) so we can write overloaded string literals
--   of type <tt>DString</tt>.
@package dstring
@version 0.4.0.4


-- | Difference strings: a data structure for O(1) append on strings. Note
--   that a <a>DString</a> is just a newtype wrapper around a <a>DList</a>
--   <a>Char</a>. The reason we need a new type instead of just a type
--   synonym is that we can have an <tt>instance <a>IsString</a>
--   <a>DString</a></tt> without using language extensions
--   (<tt>TypeSynonymInstances</tt> or <tt>FlexibleInstances</tt>) so we
--   can write overloaded string literals of type <a>DString</a>.
module Data.DString

-- | A difference string is a function that given a string, returns the
--   original contents of the difference string prepended at the given
--   string.
--   
--   This structure supports O(1) <tt>mappend</tt> en <tt>snoc</tt>
--   operations on strings making it very usefull for append-heavy uses
--   such as logging and pretty printing.
--   
--   You can use it to efficiently show a tree for example: (Note that we
--   use some handy functions from the <tt>string-combinators</tt> package)
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   import Data.DString (toShowS, fromShowS)
--   import Data.String.Combinators ((&lt;+&gt;), parens, thenParens)
--   
--   data Tree a = Leaf a | Branch (Tree a) (Tree a)
--   
--   instance Show a =&gt; Show (Tree a) where
--       showsPrec prec t = toShowS $ (prec &gt;= funAppPrec) `thenParens` go t
--           where
--             go (Leaf x)     = "Leaf" &lt;+&gt; fromShowS (showsPrec funAppPrec x)
--             go (Branch l r) = "Branch" &lt;+&gt; parens (go l) &lt;+&gt; parens (go r)
--   
--             funAppPrec = 10
--   </pre>
data DString

-- | O(n) Convert a difference string to a normal string.
toString :: DString -> String

-- | O(1) Convert a difference list of <tt>Char</tt>s to a difference
--   string.
fromDList :: DList Char -> DString

-- | O(1) Convert a difference string to a difference list.
toDList :: DString -> DList Char

-- | O(1) Convert a <tt>ShowS</tt> to a difference string.
fromShowS :: ShowS -> DString

-- | O(1) Convert a difference string to a <tt>ShowS</tt>.
toShowS :: DString -> ShowS

-- | O(1) Build a difference string from a single <tt>Char</tt>.
singleton :: Char -> DString

-- | <i>O(1)</i>, Prepend a Char to a difference string.
cons :: Char -> DString -> DString

-- | <i>O(1)</i>, Append a <tt>Char</tt> to a difference string.
snoc :: DString -> Char -> DString

-- | <i>O(spine)</i>, Concatenate difference strings.
concat :: [DString] -> DString

-- | <i>O(length ds)</i>, difference list elimination, head, tail.
list :: α -> (Char -> DString -> α) -> DString -> α

-- | Return the head of the difference string.
head :: DString -> Char

-- | Return the tail of the difference string.
tail :: DString -> DString

-- | Unfoldr for difference strings.
unfoldr :: (α -> Maybe (Char, α)) -> α -> DString

-- | Foldr over difference strings.
foldr :: (Char -> α -> α) -> α -> DString -> α
instance [safe] Typeable DString
instance [safe] IsString DString
instance [safe] Monoid DString
instance [safe] Show DString
