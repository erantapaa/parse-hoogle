-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A binding to the glibc strfry function.
--   
--   This library provides a simple interface to the glibc <tt>strfry</tt>
--   function, addressing the perennial programming quandary: "How do I
--   take good data in string form and painlessly turn it into garbage?"
--   
--   For more information, consult the glibc documentation:
--   <a>http://www.gnu.org/software/libc/manual/html_node/strfry.html</a>
--   
--   Both <tt>String</tt> and <tt>ByteString</tt> interfaces are offered,
--   as well as the raw FFI binding.
@package acme-strfry
@version 0.1


-- | The raw FFI binding to <tt>strfry</tt>.
module Acme.Strfry.Foreign
c_strfry :: CString -> IO CString


-- | The <tt>ByteString</tt>-based interface to <tt>strfry</tt>.
module Acme.Strfry.ByteString

-- | <tt>strfry s</tt> returns a pseudorandom anagram of <tt>s</tt>. For
--   more information, consult the glibc manual:
--   <a>http://www.gnu.org/software/libc/manual/html_node/strfry.html</a>
strfry :: ByteString -> IO ByteString


-- | The <tt>String</tt>-based interface to <tt>strfry</tt>.
module Acme.Strfry.String

-- | <tt>strfry s</tt> returns a pseudorandom anagram of <tt>s</tt>. For
--   more information, consult the glibc manual:
--   <a>http://www.gnu.org/software/libc/manual/html_node/strfry.html</a>
--   
--   This interface is based on <tt>String</tt>, and is likely to behave
--   unpredictably on codepoints above 255. The <tt>ByteString</tt>-based
--   interface in <a>Acme.Strfry.ByteString</a> is recommended for serious
--   use.
strfry :: String -> IO String


-- | This module just re-exports the <tt>String</tt>-based interface.
module Acme.Strfry
