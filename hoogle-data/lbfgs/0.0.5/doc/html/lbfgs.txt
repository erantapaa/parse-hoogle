-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | L-BFGS optimization
--   
@package lbfgs
@version 0.0.5

module Numeric.LBFGS.Raw
data CLineSearchAlgorithm
data CLBFGSParameter
CLBFGSParameter :: CInt -> CDouble -> CInt -> CDouble -> CInt -> CLineSearchAlgorithm -> CInt -> CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CInt -> CInt -> CLBFGSParameter
m :: CLBFGSParameter -> CInt
epsilon :: CLBFGSParameter -> CDouble
past :: CLBFGSParameter -> CInt
delta :: CLBFGSParameter -> CDouble
max_iterations :: CLBFGSParameter -> CInt
linesearch :: CLBFGSParameter -> CLineSearchAlgorithm
max_linesearch :: CLBFGSParameter -> CInt
min_step :: CLBFGSParameter -> CDouble
max_step :: CLBFGSParameter -> CDouble
ftol :: CLBFGSParameter -> CDouble
wolfe :: CLBFGSParameter -> CDouble
gtol :: CLBFGSParameter -> CDouble
xtol :: CLBFGSParameter -> CDouble
orthantwise_c :: CLBFGSParameter -> CDouble
orthantwise_start :: CLBFGSParameter -> CInt
orthantwise_end :: CLBFGSParameter -> CInt
type CEvaluateFun a = StablePtr a -> Ptr CDouble -> Ptr CDouble -> CInt -> CDouble -> IO (CDouble)
type CProgressFun a = StablePtr a -> Ptr CDouble -> Ptr CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CInt -> CInt -> CInt -> IO (CInt)
defaultCParam :: CLBFGSParameter
c_lbfgs :: CInt -> Ptr CDouble -> Ptr CDouble -> FunPtr (CEvaluateFun a) -> FunPtr (CProgressFun a) -> StablePtr a -> Ptr (CLBFGSParameter) -> IO (CInt)
c_lbfgs_malloc :: CInt -> IO (Ptr CDouble)
c_lbfgs_free :: Ptr CDouble -> IO ()
c_lbfgs_evaluate_t_wrap :: CEvaluateFun a -> IO (FunPtr (CEvaluateFun a))
c_lbfgs_progress_t_wrap :: CProgressFun a -> IO (FunPtr (CProgressFun a))
defaultLineSearch :: CLineSearchAlgorithm
moreThuente :: CLineSearchAlgorithm
backtrackingArmijo :: CLineSearchAlgorithm
backtracking :: CLineSearchAlgorithm
backtrackingWolfe :: CLineSearchAlgorithm
backtrackingStrongWolfe :: CLineSearchAlgorithm
newtype CLBFGSResult
CLBFGSResult :: CInt -> CLBFGSResult
unCLBFGSResult :: CLBFGSResult -> CInt
lbfgsSuccess :: CLBFGSResult
lbfgsConvergence :: CLBFGSResult
lbfgsStop :: CLBFGSResult
lbfgsAlreadyMinimized :: CLBFGSResult
lbfgserrUnknownerror :: CLBFGSResult
lbfgserrLogicerror :: CLBFGSResult
lbfgserrOutofmemory :: CLBFGSResult
lbfgserrCanceled :: CLBFGSResult
lbfgserrInvalidN :: CLBFGSResult
lbfgserrInvalidNSse :: CLBFGSResult
lbfgserrInvalidXSse :: CLBFGSResult
lbfgserrInvalidEpsilon :: CLBFGSResult
lbfgserrInvalidTestperiod :: CLBFGSResult
lbfgserrInvalidDelta :: CLBFGSResult
lbfgserrInvalidLinesearch :: CLBFGSResult
lbfgserrInvalidMinstep :: CLBFGSResult
lbfgserrInvalidMaxstep :: CLBFGSResult
lbfgserrInvalidFtol :: CLBFGSResult
lbfgserrInvalidWolfe :: CLBFGSResult
lbfgserrInvalidGtol :: CLBFGSResult
lbfgserrInvalidXtol :: CLBFGSResult
lbfgserrInvalidMaxlinesearch :: CLBFGSResult
lbfgserrInvalidOrthantwise :: CLBFGSResult
lbfgserrInvalidOrthantwiseStart :: CLBFGSResult
lbfgserrInvalidOrthantwiseEnd :: CLBFGSResult
lbfgserrOutofinterval :: CLBFGSResult
lbfgserrIncorrectTminmax :: CLBFGSResult
lbfgserrRoundingError :: CLBFGSResult
lbfgserrMinimumstep :: CLBFGSResult
lbfgserrMaximumstep :: CLBFGSResult
lbfgserrMaximumlinesearch :: CLBFGSResult
lbfgserrMaximumiteration :: CLBFGSResult
lbfgserrWidthtoosmall :: CLBFGSResult
lbfgserrInvalidparameters :: CLBFGSResult
lbfgserrIncreasegradient :: CLBFGSResult
instance Storable CLineSearchAlgorithm
instance Show CLineSearchAlgorithm
instance Eq CLBFGSResult
instance Show CLBFGSResult
instance Show CLBFGSParameter
instance Storable CLBFGSParameter


-- | Binding for the liblbfgs library, much implements the Limited-memory
--   Broyden-Fletcher-Goldfarb-Shanno (L-BFGS) method for solving
--   unconstrained minimization problems. The original C library is
--   available from:
--   
--   <a>http://www.chokkan.org/software/liblbfgs/</a>
module Numeric.LBFGS

-- | Various line search algorithms. Wolfe backtracking algorithms require
--   a coefficient.
data LineSearchAlgorithm
DefaultLineSearch :: LineSearchAlgorithm
MoreThuente :: LineSearchAlgorithm
BacktrackingArmijo :: LineSearchAlgorithm
Backtracking :: LineSearchAlgorithm
BacktrackingWolfe :: Double -> LineSearchAlgorithm
coeff :: LineSearchAlgorithm -> Double
BacktrackingStrongWolfe :: Double -> LineSearchAlgorithm
coeff :: LineSearchAlgorithm -> Double

-- | Type signature for the objective function and gradient evaluations.
type EvaluateFun a = a -> StorableArray Int CDouble -> StorableArray Int CDouble -> CInt -> CDouble -> IO (CDouble)

-- | Type signature for a function reporting on the progress of the
--   optimization.
type ProgressFun a = a -> StorableArray Int CDouble -> StorableArray Int CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CInt -> CInt -> CInt -> IO (CInt)

-- | Parameters for the LBFGS minimization.
data LBFGSParameters
LBFGSParameters :: Maybe Int -> Double -> LineSearchAlgorithm -> L1NormCoefficient -> LBFGSParameters
lbfgsPast :: LBFGSParameters -> Maybe Int
lbfgsDelta :: LBFGSParameters -> Double
lbfgsLineSearch :: LBFGSParameters -> LineSearchAlgorithm
lbfgsL1NormCoefficient :: LBFGSParameters -> L1NormCoefficient
data LBFGSResult
Success :: LBFGSResult
Stop :: LBFGSResult
AlreadyMinimized :: LBFGSResult
UnknownError :: LBFGSResult
LogicError :: LBFGSResult
OutOfMemory :: LBFGSResult
Canceled :: LBFGSResult
InvalidN :: LBFGSResult
InvalidNSSE :: LBFGSResult
InvalidXSSE :: LBFGSResult
InvalidEpsilon :: LBFGSResult
InvalidTestPeriod :: LBFGSResult
InvalidDelta :: LBFGSResult
InvalidLineSearch :: LBFGSResult
InvalidMinStep :: LBFGSResult
InvalidMaxStep :: LBFGSResult
InvalidFtol :: LBFGSResult
InvalidWolfe :: LBFGSResult
InvalidGtol :: LBFGSResult
InvalidXtol :: LBFGSResult
InvalidMaxLineSearch :: LBFGSResult
InvalidOrthantwise :: LBFGSResult
InvalidOrthantwiseStart :: LBFGSResult
InvalidOrthantwiseEnd :: LBFGSResult
OutOfInterval :: LBFGSResult
IncorrectTMinMax :: LBFGSResult
RoundingError :: LBFGSResult
MinimumStep :: LBFGSResult
MaximumStep :: LBFGSResult
MaximumLineSearch :: LBFGSResult
MaximumIteration :: LBFGSResult
WidthTooSmall :: LBFGSResult
InvalidParameters :: LBFGSResult
IncreaseGradient :: LBFGSResult

-- | Start a L-BFGS optimization. The initial variables should be provided
--   as a list of doubles.
lbfgs :: LBFGSParameters -> EvaluateFun a -> ProgressFun a -> a -> [Double] -> IO (LBFGSResult, [Double])
instance Eq LBFGSResult
instance Show LBFGSResult
