-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Heterogenous Zipper in Instant Generics
--   
--   This package contains a heterogenous Zipper and 2 examples of how to
--   use it.
@package instant-zipper
@version 0.0.0

module Generics.Instant.Zipper

-- | Families
class Family f :: (* -> *)

-- | Zipper
class (Representable f, Typeable f, Fillable (Rep f), Firstable (Rep f), Nextable (Rep f), Lastable (Rep f), Prevable (Rep f)) => Zipper f
type ZipperR = Either String
enter :: Zipper h => h -> Loc h h Epsilon
leave :: Zipper h => Loc h r c -> r
up :: (Zipper h, Zipper h') => Loc h r (h' :<: c) -> Loc h' r c
down :: (Zipper h, Zipper h', Family f, Show (f h')) => f h' -> Loc h r c -> ZipperR (Loc h' r (h :<: c))
downR :: (Zipper h, Zipper h', Family f, Show (f h')) => f h' -> Loc h r c -> ZipperR (Loc h' r (h :<: c))
left :: (Zipper h, Zipper h', Family f, Show (f h')) => f h' -> Loc h r (c :<: cs) -> ZipperR (Loc h' r (c :<: cs))
right :: (Zipper h, Zipper h', Family f, Show (f h')) => f h' -> Loc h r (c :<: cs) -> ZipperR (Loc h' r (c :<: cs))

-- | Down
down' :: (Zipper h, Zipper h') => h' -> Loc h r c -> ZipperR (Loc h' r (h :<: c))
downR' :: (Zipper h, Zipper h') => h' -> Loc h r c -> ZipperR (Loc h' r (h :<: c))
left' :: (Zipper h, Zipper h') => h' -> Loc h r (c :<: cs) -> ZipperR (Loc h' r (c :<: cs))
right' :: (Zipper h, Zipper h') => h' -> Loc h r (c :<: cs) -> ZipperR (Loc h' r (c :<: cs))

-- | Navigation
get :: Loc h r c -> h
set :: h -> Loc h r c -> Loc h r c
data PrimFam a
Char :: PrimFam Char
Int :: PrimFam Int
Float :: PrimFam Float
List :: f a -> PrimFam [a]
instance Show (PrimFam a)
instance Prevable f => Prevable (C c f)
instance Prevable (Var f)
instance Prevable (Rec f)
instance (Lastable f, Fillable g, Prevable f, Prevable g) => Prevable (f :*: g)
instance (Prevable f, Prevable g) => Prevable (f :+: g)
instance Prevable Float
instance Prevable Int
instance Prevable Char
instance Prevable U
instance Nextable f => Nextable (C c f)
instance Nextable (Var f)
instance Nextable (Rec f)
instance (Nextable f, Nextable g, Fillable f, Firstable g) => Nextable (f :*: g)
instance (Nextable f, Nextable g) => Nextable (f :+: g)
instance Nextable Float
instance Nextable Int
instance Nextable Char
instance Nextable U
instance Lastable f => Lastable (C c f)
instance Typeable f => Lastable (Var f)
instance Typeable f => Lastable (Rec f)
instance (Lastable f, Lastable g) => Lastable (f :*: g)
instance (Lastable f, Lastable g) => Lastable (f :+: g)
instance Lastable Float
instance Lastable Int
instance Lastable Char
instance Lastable U
instance Firstable f => Firstable (C c f)
instance Typeable f => Firstable (Var f)
instance Typeable f => Firstable (Rec f)
instance (Firstable f, Firstable g) => Firstable (f :*: g)
instance (Firstable f, Firstable g) => Firstable (f :+: g)
instance Firstable Float
instance Firstable Int
instance Firstable Char
instance Firstable U
instance Fillable f => Fillable (C c f)
instance Typeable a => Fillable (Var a)
instance Typeable a => Fillable (Rec a)
instance (Fillable f, Fillable g) => Fillable (f :*: g)
instance (Fillable f, Fillable g) => Fillable (f :+: g)
instance Fillable Float
instance Fillable Int
instance Fillable Char
instance Fillable U
instance Differentiable f => Differentiable (C c f)
instance Differentiable a => Differentiable (Var a)
instance Differentiable a => Differentiable (Rec a)
instance (Differentiable f, Differentiable g) => Differentiable (f :*: g)
instance (Differentiable f, Differentiable g) => Differentiable (f :+: g)
instance Differentiable U
instance Zipper a => Zipper [a]
instance Zipper Float
instance Zipper Char
instance Zipper Int
instance Family PrimFam

module Generics.Instant.Zipper.Example.Dept

-- | Datatype
type Salary = Float
type Manager = Employee
type Name = String
data Dept
D :: Manager -> [Employee] -> Dept
data Employee
E :: Name -> Salary -> Employee

-- | Representation
type RepDept_ = C Dept_D_ (:*: (Rec Manager) (Rec [Employee]))
data Dept_D_
type RepEmployee_ = C Employee_E_ (:*: (Rec Name) (Rec Salary))
data Employee_E_

-- | Family
data DeptFam a
Dept :: DeptFam Dept
Employee :: DeptFam Employee
Salary :: DeptFam Salary
Name :: DeptFam Name

-- | Example
dept :: Dept
fixDept :: ZipperR Dept
instance Show (DeptFam a)
instance Zipper Employee
instance Zipper Dept
instance Family DeptFam
instance Representable Employee
instance Constructor Employee_E_
instance Representable Dept
instance Constructor Dept_D_
instance Typeable Employee
instance Typeable Dept
instance Eq Employee
instance Show Employee
instance Eq Dept
instance Show Dept

module Generics.Instant.Zipper.Example.Term

-- | Datatype
data Term
Var' :: String -> Term
Lambda :: String -> Term -> Term
App :: Term -> Term -> Term
If :: Term -> Term -> Term -> Term

-- | Representation
type RepTerm_ = :+: (C Term_Var'_ (Rec String)) (:+: (C Term_Lambda_ (:*: (Rec String) (Rec Term))) (:+: (C Term_App_ (:*: (Rec Term) (Rec Term))) (C Term_If_ (:*: (Rec Term) (:*: (Rec Term) (Rec Term))))))
data Term_If_
data Term_App_
data Term_Lambda_
data Term_Var'_

-- | Family
data TermFam a
Term :: TermFam Term
String :: TermFam String

-- | fac
fixFac :: ZipperR Term
instance Show (TermFam a)
instance Zipper Term
instance Family TermFam
instance Representable Term
instance Constructor Term_If_
instance Constructor Term_App_
instance Constructor Term_Lambda_
instance Constructor Term_Var'_
instance Typeable Term
instance Eq Term
instance Show Term
