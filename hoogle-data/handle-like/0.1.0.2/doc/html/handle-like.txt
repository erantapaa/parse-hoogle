-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HandleLike class
--   
--   A tiny package. It's contain the following class.
--   
--   <pre>
--   class HandleLike h where
--       type HandleMonad h
--       type DebugLevel h
--       hlPut :: h -&gt; ByteString -&gt; HandleMonad h ()
--       hlGet :: h -&gt; Int -&gt; HandleMonad h ByteString
--       hlGetByte :: h -&gt; HandleMonad h Word8
--       hlGetLine :: h -&gt; HandleMonad h ByteString
--       hlGetContent :: h -&gt; HandleMonad h ByteString
--       hlFlush :: h -&gt; HandleMonad h ()
--       hlClose :: h -&gt; HandleMonad h ()
--       hlDebug :: h -&gt; DebugLevel h -&gt; HandleMonad h ()
--       hlError :: h -&gt; ByteString -&gt; HandleMonad h a
--   </pre>
--   
--   Minimal complete difinition: HandleMonad, hlPut, hlGet and hlClose.
@package handle-like
@version 0.1.0.2

module Data.HandleLike
class (Monad (HandleMonad h), IsString (DebugLevel h), Ord (DebugLevel h), Bounded (DebugLevel h)) => HandleLike h where type family HandleMonad h type family DebugLevel h type instance DebugLevel h = Priority hlGetByte h = do { [b] <- unpack `liftM` hlGet h 1; return b } hlGetLine h = do { b <- hlGetByte h; case b of { 10 -> return "" _ -> cons b `liftM` hlGetLine h } } hlGetContent = flip hlGet 1 hlFlush _ = return () hlDebug _ _ _ = return () hlError _ msg = error $ unpack msg
hlPut :: HandleLike h => h -> ByteString -> HandleMonad h ()
hlGet :: HandleLike h => h -> Int -> HandleMonad h ByteString
hlGetByte :: HandleLike h => h -> HandleMonad h Word8
hlGetLine :: HandleLike h => h -> HandleMonad h ByteString
hlGetContent :: HandleLike h => h -> HandleMonad h ByteString
hlFlush :: HandleLike h => h -> HandleMonad h ()
hlClose :: HandleLike h => h -> HandleMonad h ()
hlDebug :: HandleLike h => h -> DebugLevel h -> ByteString -> HandleMonad h ()
hlError :: HandleLike h => h -> ByteString -> HandleMonad h a
hlPutStrLn :: HandleLike h => h -> ByteString -> HandleMonad h ()
data DebugHandle h
DebugHandle :: h -> (Maybe (DebugLevel h)) -> DebugHandle h
data Priority
instance Show Priority
instance Read Priority
instance Eq Priority
instance Ord Priority
instance Enum Priority
instance Bounded Priority
instance HandleLike h => HandleLike (DebugHandle h)
instance HandleLike Handle
instance IsString Priority
