-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A threadsafe binding to glibc's crypt_r function
--   
--   This package wraps <tt>glibc</tt>'s <tt>crypt_r</tt> function in a
--   thread-safe manner.
@package nano-cryptr
@version 0.1.1.3


-- | This package wraps <tt>glibc</tt>'s <tt>crypt_r</tt> function in a
--   thread-safe manner.
--   
--   <pre>
--   $ ghci -XOverloadedStrings
--   GHCi, version 6.12.3: http:<i></i>www.haskell.org<i>ghc</i>  :? for help
--   Loading package ghc-prim ... linking ... done.
--   Loading package integer-gmp ... linking ... done.
--   Loading package base ... linking ... done.
--   Loading package ffi-1.0 ... linking ... done.
--   Prelude&gt; :m + System.Gnu.CryptR Data.ByteString.Char8
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; <a>cryptR</a> "password" "l3"
--   Loading package bytestring-0.9.1.7 ... linking ... done.
--   Loading package nano-cryptr-0.1.1.1 ... linking ... done.
--   "l3vmImyenGFYg"
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; <a>cryptR</a> "password1" "l3vmImyenGFYg"
--   "l3vmImyenGFYg"
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; x &lt;- <a>newCryptData</a>
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; <a>cryptRIO</a> x  "password1" "l3vmImyenGFYg"
--   "l3vmImyenGFYg"
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; <a>cryptRIO</a> x "xpassword" "l3vmImyenGFYg"
--   "l3odRN01x86RU"
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; <a>cryptRIO</a> x "password" "l3vmImyenGFYg"
--   "l3vmImyenGFYg"
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; <a>cryptRIO</a> x "password" "$1$grufal$"
--   "$1$grufal$KyfLpXJJ32ZZw9EqqMSav1"
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; <a>cryptRIO</a> x "password1" "$1$grufal$"
--   "$1$grufal$xi8N0nP2Fl22TxyW68uvV."
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; <a>cryptRIO</a> x "password1" "$1$grufal$KyfLpXJJ32ZZw9EqqMSav1"
--   "$1$grufal$xi8N0nP2Fl22TxyW68uvV."
--   Prelude System.Gnu.CryptR Data.ByteString.Char8&gt; <a>cryptRIO</a> x "password" "$1$grufal$KyfLpXJJ32ZZw9EqqMSav1"
--   "$1$grufal$KyfLpXJJ32ZZw9EqqMSav1"
--   </pre>
module System.Gnu.CryptR

-- | <a>CryptData</a> is an opaque wrapper around the state used by
--   <tt>crypt_r</tt>.
data CryptData

-- | Create a new <a>CryptData</a> value. It uses <a>ForeignPtr</a> to free
--   the underlying data structure properly when it is garbage collected.
newCryptData :: IO CryptData

-- | This is a thread-safe interface to the functionality provided by
--   <tt>glibc</tt>'s <tt>crypt_r</tt>. It protects against concurrent use
--   of the same <a>CryptData</a> value internally. This means that it's
--   potentially a performance bottleneck, and you may wish to use multiple
--   <a>CryptData</a> values if high concurrency is necessary.
--   
--   This interface avoids initializing a new <a>CryptData</a> for each
--   call, as is done by the <a>cryptR</a> call
cryptRIO :: CryptData -> ByteString -> ByteString -> IO ByteString

-- | This is a pure, thread-safe interface to the functionality provided by
--   <tt>glibc</tt>'s <tt>crypt_r</tt>. It uses <tt>crypt_r</tt>
--   internally, allocating a single-use buffer for each call. Because the
--   buffer is decently large and needs to be initialized for each call,
--   this function has significantly more overhead on multiple calls than
--   using <a>newCryptData</a> followed by multiple uses of
--   <a>cryptRIO</a>. This is provided as a convenience function when the
--   overhead is not as important as the simplicity of this interface.
cryptR :: ByteString -> ByteString -> ByteString
instance Show CryptData
