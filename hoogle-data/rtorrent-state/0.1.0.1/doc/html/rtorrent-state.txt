-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parsing and manipulation of rtorrent state file contents
--   
--   Parsing and manipulation of rtorrent state file contents
@package rtorrent-state
@version 0.1.0.1


-- | Contains the decoding and encoding functionality for rtorrent state
--   files. The files themselves are a bencoded set of data used by
--   rtorrent.
module Data.Rtorrent.StateFile.Types

-- | Handy alias
type StateMod = StateFile -> StateFile
newtype ByteStringUtf8
BS8 :: ByteString -> ByteStringUtf8
_bs8 :: ByteStringUtf8 -> ByteString
data CustomSeeding
CustomSeeding :: Maybe ByteStringUtf8 -> ByteStringUtf8 -> CustomSeeding
_addTime :: CustomSeeding -> Maybe ByteStringUtf8
_seedingTime :: CustomSeeding -> ByteStringUtf8
data StateFile
StateFile :: ByteStringUtf8 -> ByteStringUtf8 -> ByteStringUtf8 -> ByteStringUtf8 -> Int -> Int -> Int -> ByteStringUtf8 -> ByteStringUtf8 -> Maybe CustomSeeding -> ByteStringUtf8 -> ByteStringUtf8 -> ByteStringUtf8 -> ByteStringUtf8 -> ByteStringUtf8 -> ByteStringUtf8 -> Int -> Int -> Int -> ByteStringUtf8 -> Int -> Int -> Int -> Int -> ByteStringUtf8 -> ByteStringUtf8 -> Int -> Int -> Int -> [ByteStringUtf8] -> StateFile
_chokeHeuristicsDownLeech :: StateFile -> ByteStringUtf8
_chokeHeuristicsDownSeed :: StateFile -> ByteStringUtf8
_chokeHeuristicsUpLeech :: StateFile -> ByteStringUtf8
_chokeHeuristicsUpSeed :: StateFile -> ByteStringUtf8
_chunksDone :: StateFile -> Int
_chunksWanted :: StateFile -> Int
_complete :: StateFile -> Int
_connectionLeech :: StateFile -> ByteStringUtf8
_connectionSeed :: StateFile -> ByteStringUtf8
_custom :: StateFile -> Maybe CustomSeeding
_custom1 :: StateFile -> ByteStringUtf8
_custom2 :: StateFile -> ByteStringUtf8
_custom3 :: StateFile -> ByteStringUtf8
_custom4 :: StateFile -> ByteStringUtf8
_custom5 :: StateFile -> ByteStringUtf8
_directory :: StateFile -> ByteStringUtf8
_hashing :: StateFile -> Int
_ignoreCommands :: StateFile -> Int
_key :: StateFile -> Int
_loadedFile :: StateFile -> ByteStringUtf8
_priority :: StateFile -> Int
_state :: StateFile -> Int
_stateChanged :: StateFile -> Int
_stateCounter :: StateFile -> Int
_throttleName :: StateFile -> ByteStringUtf8
_tiedToFile :: StateFile -> ByteStringUtf8
_timestampFinished :: StateFile -> Int
_timestampStarted :: StateFile -> Int
_totalUploaded :: StateFile -> Int
_views :: StateFile -> [ByteStringUtf8]
bs8 :: Iso' ByteStringUtf8 ByteString
seedingTime :: Lens' CustomSeeding ByteStringUtf8
addTime :: Lens' CustomSeeding (Maybe ByteStringUtf8)
views :: Lens' StateFile [ByteStringUtf8]
totalUploaded :: Lens' StateFile Int
timestampStarted :: Lens' StateFile Int
timestampFinished :: Lens' StateFile Int
tiedToFile :: Lens' StateFile ByteStringUtf8
throttleName :: Lens' StateFile ByteStringUtf8
stateCounter :: Lens' StateFile Int
stateChanged :: Lens' StateFile Int
state :: Lens' StateFile Int
priority :: Lens' StateFile Int
loadedFile :: Lens' StateFile ByteStringUtf8
key :: Lens' StateFile Int
ignoreCommands :: Lens' StateFile Int
hashing :: Lens' StateFile Int
directory :: Lens' StateFile ByteStringUtf8
custom5 :: Lens' StateFile ByteStringUtf8
custom4 :: Lens' StateFile ByteStringUtf8
custom3 :: Lens' StateFile ByteStringUtf8
custom2 :: Lens' StateFile ByteStringUtf8
custom1 :: Lens' StateFile ByteStringUtf8
custom :: Lens' StateFile (Maybe CustomSeeding)
connectionSeed :: Lens' StateFile ByteStringUtf8
connectionLeech :: Lens' StateFile ByteStringUtf8
complete :: Lens' StateFile Int
chunksWanted :: Lens' StateFile Int
chunksDone :: Lens' StateFile Int
chokeHeuristicsUpSeed :: Lens' StateFile ByteStringUtf8
chokeHeuristicsUpLeech :: Lens' StateFile ByteStringUtf8
chokeHeuristicsDownSeed :: Lens' StateFile ByteStringUtf8
chokeHeuristicsDownLeech :: Lens' StateFile ByteStringUtf8
instance Typeable ByteStringUtf8
instance Typeable CustomSeeding
instance Typeable StateFile
instance Show ByteStringUtf8
instance Eq ByteStringUtf8
instance Read ByteStringUtf8
instance Show CustomSeeding
instance Read CustomSeeding
instance Eq CustomSeeding
instance Show StateFile
instance Read StateFile
instance Eq StateFile
instance BEncode StateFile
instance BEncode CustomSeeding
instance BEncode ByteStringUtf8

module Data.Rtorrent.StateFile

-- | Takes a directory, <a>StateFile</a> modification function and does an
--   ‘in-place’ modifications to all .rtorrent files it can find and parse
--   in that directory. Returns the list of all file paths and any
--   potential errors that with each.
--   
--   See <a>getRtorrentFiles</a> for the type of exception this function
--   can throw.
overFilesIn :: FilePath -> StateMod -> IO [(FilePath, Maybe String)]

-- | Gets a list of all <tt>.rtorrent</tt> files in the specified
--   directory.
--   
--   This function uses <a>getDirectoryContents</a> which can throw various
--   IOExceptions. It's up to the user to catch these if they wish to do
--   so.
getRtorrentFiles :: FilePath -> IO [FilePath]

-- | Attempts to read in the file at specified file path, change it with
--   the user-supplied function and saved the file with changes.
--   
--   In case the parsing fails, the result will be <tt>Just errMsg</tt>.
withRtorrentState :: FilePath -> StateMod -> IO (Maybe String)

-- | Only keeps properly parsing results. Useful with <a>parseFiles</a>.
keepValid :: Map FilePath (Result StateFile) -> Map FilePath StateFile

-- | Similar to <a>keepValid</a> but instead only keeps results that failed
--   to parse and the reason.
keepInvalid :: Map FilePath (Result StateFile) -> Map FilePath String

-- | Given a directory path, produces a <a>Map</a> of file paths from
--   individual files to their parsing results.
--   
--   This function uses <a>getRtorrentFiles</a> which can throw an
--   IOException in case there is a problem reading the directory.
parseFiles :: FilePath -> IO (Map FilePath (Result StateFile))

-- | Like <a>parseFile'</a> but throws away the <a>FilePath</a>: useful if
--   we only play with single files.
parseFile :: FilePath -> IO (Result StateFile)

-- | Parses a file and returns a pair of of its path and the parsing
--   result. The path is useful if we're processing whole directories.
parseFile' :: FilePath -> IO (FilePath, Result StateFile)

-- | Sets the torrent to started state.
startTorrent :: StateMod

-- | Sets the torrent to stopped stated.
stopTorrent :: StateMod

-- | Changes the file the torrent is tied to.
setTiedFile :: FilePath -> StateMod

-- | Gets a path of the loaded file.
getLoadedFile :: StateFile -> FilePath

-- | Wrapper for <a>decode</a> which works for <a>StateFile</a>s.
decodeState :: ByteString -> Result StateFile

-- | Wrapper for <a>encode</a> which works for <a>StateFile</a>s.
--   
--   See <a>encodeState'</a> for strict <a>ByteString</a> version.
encodeState :: StateFile -> ByteString

-- | Encodes a <a>StateFile</a> to a strict <a>ByteString</a>.
encodeState' :: StateFile -> ByteString
