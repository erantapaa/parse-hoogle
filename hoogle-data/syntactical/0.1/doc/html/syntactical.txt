-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Distfix expression parsing library
--   
--   Syntactical is an expression parsing library. It supports distfix
--   operators and function application written as juxtaposition of
--   symbols.
@package syntactical
@version 0.1


-- | The data structures (and associated functions) used in the parser. For
--   a normal usage, it should be enough to import only
--   <tt>Text.Syntactical</tt>, not directly this module.
module Text.Syntactical.Data

-- | The s-expression data type used as input and output of the parser. The
--   type is parametrized by the type of the token.
data SExpr a
List :: [SExpr a] -> SExpr a
Atom :: a -> SExpr a

-- | The s-expression data type augmented to represent parts (used in the
--   operator stack).
data Tree a
Branch :: [Tree a] -> Tree a
Leaf :: a -> Tree a
Part :: (Part a) -> Tree a

-- | The operator representation, parametrized by the token type. It allows
--   infix, prefix, postfix, and closed operators, with possibly multiple
--   internal holes. Different holes are possible, to drive the parse in
--   specific ways.
data Op a
Op1 :: Bool -> a -> [(Hole, a)] -> Opening -> Precedence -> Op a
Op2 :: Bool -> a -> [(Hole, a)] -> Hole -> a -> Op a
data Opening
Infix :: Associativity -> Opening
Prefix :: Opening
Postfix :: Opening

-- | Specify the associativity of an infix operator.
data Associativity
NonAssociative :: Associativity
LeftAssociative :: Associativity
RightAssociative :: Associativity

-- | The Hole is used to give various behaviours when dealing with internal
--   holes.
data Hole

-- | SExpression means the <tt>content</tt> of the hole should be parsed as
--   an s-expression. The resulting value is a List. This means the hole
--   can be empty or contain one or more sub-expression(s).
SExpression :: Hole

-- | Distfix means the <tt>content</tt> of the hole should be parsed as a
--   distfix expression. In this case feeding an empty hole will generate a
--   parse error.
Distfix :: Hole

-- | A Part represent a single symbol of an operator.
data Part a
First :: (Maybe (Associativity, Precedence)) -> a -> [a] -> Hole -> Part a
Last :: (Op a) -> Part a
Lone :: Bool -> a -> Opening -> Precedence -> Part a
Middle :: [a] -> a -> [a] -> Hole -> Part a

-- | The type of the operator table.
data Table a
data Priority
Lower :: Priority
Higher :: Priority
NoPriority :: Priority

-- | Build a infix operator. The precedence is set to 0.
infx :: Associativity -> a -> Op a

-- | Build a prefix operator. The precedence is set to 0.
prefx :: a -> Op a

-- | Build a postfix operator. The precedence is set to 0.
postfx :: a -> Op a

-- | Build a closed operator. The precedence is set to 0.
closed :: a -> Hole -> a -> Op a

-- | Build a infix operator with the keep property set to False. The
--   precedence is set to 0.
infx_ :: Associativity -> a -> Op a

-- | Build a prefix operator with the keep property set to False. The
--   precedence is set to 0.
prefx_ :: a -> Op a

-- | Build a postfix operator with the keep property set to False. The
--   precedence is set to 0.
postfx_ :: a -> Op a

-- | Build a closed operator with the keep property set to False. The
--   precedence is set to 0.
closed_ :: a -> Hole -> a -> Op a

-- | Add a new part separated by an SExpression hole to the right of an
--   operator.
sexpr :: Op a -> a -> Op a

-- | Add a new part separated by a Distfix hole to the right of an
--   operator.
distfix :: Op a -> a -> Op a

-- | <a>buildTable</a> constructs an operator table that can be used with
--   the <tt>shunt</tt> function. Operators are given in decreasing
--   precedence order.
buildTable :: [[Op a]] -> Table a

-- | Separate an operator in its different parts.
cut :: Op a -> [Part a]

-- | Set the precedence of a given operator.
setPrecedence :: Precedence -> Op a -> Op a
begin :: Part a -> Bool
end :: Part a -> Bool
leftOpen :: Part a -> Bool
rightOpen :: Part a -> Bool
rightHole :: Part a -> Maybe Hole
discard :: Part a -> Bool
applicator :: Token a => Table a -> SExpr a -> Bool
applicator' :: Token a => Table a -> Tree a -> Bool
continue :: Token a => Part a -> Part a -> Bool
original :: Part a -> Op a
priority :: Part a -> Part a -> Priority

-- | Return the arity of a complete Part. It is an error to call this
--   function on a First or Middle part.
arity :: Part a -> Int

-- | Return the token of a given Part.
symbol :: Part a -> a

-- | Return all the tokens of a given operator.
symbols :: Op a -> [a]

-- | Return the possible tokens continuing the given part.
next :: Part a -> [a]

-- | Return the tokens preceding the given part.
previous :: Part a -> [a]

-- | Return the tokens of the given part.
current :: Part a -> [a]
findBoth :: Token a => Table a -> a -> [Tree a] -> FindBoth a
findBegin :: Token a => Table a -> a -> FindBegin a
data FindBegin a
NoBegin :: FindBegin a
Begin :: (Part a) -> FindBegin a
MissingBegin :: [[a]] -> FindBegin a
AmbiguousBegin :: Ambiguity -> FindBegin a
data FindBoth a
BNothing :: FindBoth a
BContinue :: (Part a) -> FindBoth a
BBegin :: (Part a) -> FindBoth a
BMissingBegin :: [[a]] -> FindBoth a
BAmbiguous :: Ambiguity -> FindBoth a
data Ambiguity
MiddleOrLast :: Ambiguity
NotSameHole :: Ambiguity
NotSameFirst :: Ambiguity
LoneOrFirst :: Ambiguity
MultipleLone :: Ambiguity

-- | The class of the types that can be parsed.
class Token a
toString :: Token a => a -> String
operator :: Token a => Op a -> [SExpr a] -> SExpr a
consider :: Token a => a -> a -> Bool
showPart :: Token a => Part a -> String

-- | Show an s-expression using nested angle brackets.
showSExpr :: Token a => SExpr a -> String
showTree :: Token a => Tree a -> String
instance Show Opening
instance Eq Opening
instance Show a => Show (Part a)
instance Eq a => Eq (Part a)
instance Eq Ambiguity
instance Show Ambiguity
instance Show Associativity
instance Eq Associativity
instance Eq Hole
instance Show Hole
instance Eq a => Eq (Op a)
instance Show a => Show (Op a)
instance Eq a => Eq (Tree a)
instance Show a => Show (Tree a)
instance Eq a => Eq (SExpr a)
instance Show a => Show (SExpr a)


-- | The modified Shunting-Yard algorithm. The modifications allow function
--   application by juxtaposition (without any paren around the arguments)
--   and distfix operators. For a normal usage, it should be enough to
--   import only <tt>Text.Syntactical</tt>, not directly this module.
module Text.Syntactical.Yard
data Shunt a
S :: [SExpr a] -> [Tree a] -> [[SExpr a]] -> (Rule a) -> Shunt a

-- | The different failure cases the <a>shunt</a> function can return. The
--   <a>showFailure</a> function can be used to give them a textual
--   representation.
data Failure a

-- | missing parts before part
MissingBefore :: [[a]] -> a -> Failure a

-- | missing parts after parts
MissingAfter :: [a] -> [a] -> Failure a

-- | can't mix two operators
CantMix :: (Part a) -> (Part a) -> Failure a

-- | missing sub-expression between parts
MissingSubBetween :: a -> a -> Failure a

-- | missing sub-expression before string
MissingSubBefore :: a -> Failure a

-- | missing sub-expression after string
MissingSubAfter :: a -> Failure a

-- | a part is used ambiguously in multiple operators
Ambiguity :: Ambiguity -> Failure a

-- | this is a bug if it happens
Unexpected :: Failure a
data Rule a
Initial :: Rule a
Argument :: Rule a
Application :: Rule a
ApplyOp :: Rule a
StackApp :: Rule a
StackL :: Rule a
StackOp :: Rule a
ContinueOp :: Rule a
MatchedR :: Rule a
SExpr :: Rule a
Done :: (Result a) -> Rule a
initial :: [SExpr a] -> Shunt a
isDone :: Shunt a -> Bool

-- | Parse a list of s-expressions according to an operator table. Usually
--   the s-expressions will be the result of applying <a>Atom</a> to each
--   token.
shunt :: Token a => Table a -> [SExpr a] -> Either (Failure a) (SExpr a)
step :: Token a => Table a -> Shunt a -> Shunt a

-- | Similar to the <a>shunt</a> function but print the steps performed by
--   the modified shunting yard algorithm. This function is useful to
--   understand (and debug) the modified shunting-yard algorithm.
steps :: Token a => Table a -> [SExpr a] -> IO ()

-- | Give a textual representation of a <a>Failure</a>.
showFailure :: Token a => Failure a -> String
instance Eq a => Eq (Failure a)
instance Show a => Show (Failure a)
instance Eq a => Eq (Result a)
instance Show a => Show (Result a)
instance Show a => Show (Rule a)
instance Eq a => Eq (Rule a)


-- | This convenience module re-exports from <tt>Text.Syntactical.Yard</tt>
--   and <tt>Text.Syntactical.Data</tt> everything a typical usage of
--   Syntactical would need.
module Text.Syntactical

-- | Parse a list of s-expressions according to an operator table. Usually
--   the s-expressions will be the result of applying <a>Atom</a> to each
--   token.
shunt :: Token a => Table a -> [SExpr a] -> Either (Failure a) (SExpr a)

-- | Similar to the <a>shunt</a> function but print the steps performed by
--   the modified shunting yard algorithm. This function is useful to
--   understand (and debug) the modified shunting-yard algorithm.
steps :: Token a => Table a -> [SExpr a] -> IO ()

-- | The different failure cases the <a>shunt</a> function can return. The
--   <a>showFailure</a> function can be used to give them a textual
--   representation.
data Failure a

-- | missing parts before part
MissingBefore :: [[a]] -> a -> Failure a

-- | missing parts after parts
MissingAfter :: [a] -> [a] -> Failure a

-- | can't mix two operators
CantMix :: (Part a) -> (Part a) -> Failure a

-- | missing sub-expression between parts
MissingSubBetween :: a -> a -> Failure a

-- | missing sub-expression before string
MissingSubBefore :: a -> Failure a

-- | missing sub-expression after string
MissingSubAfter :: a -> Failure a

-- | a part is used ambiguously in multiple operators
Ambiguity :: Ambiguity -> Failure a

-- | this is a bug if it happens
Unexpected :: Failure a
data Ambiguity
MiddleOrLast :: Ambiguity
NotSameHole :: Ambiguity
NotSameFirst :: Ambiguity
LoneOrFirst :: Ambiguity
MultipleLone :: Ambiguity

-- | Give a textual representation of a <a>Failure</a>.
showFailure :: Token a => Failure a -> String

-- | The operator representation, parametrized by the token type. It allows
--   infix, prefix, postfix, and closed operators, with possibly multiple
--   internal holes. Different holes are possible, to drive the parse in
--   specific ways.
data Op a

-- | Specify the associativity of an infix operator.
data Associativity
NonAssociative :: Associativity
LeftAssociative :: Associativity
RightAssociative :: Associativity

-- | The Hole is used to give various behaviours when dealing with internal
--   holes.
data Hole

-- | SExpression means the <tt>content</tt> of the hole should be parsed as
--   an s-expression. The resulting value is a List. This means the hole
--   can be empty or contain one or more sub-expression(s).
SExpression :: Hole

-- | Distfix means the <tt>content</tt> of the hole should be parsed as a
--   distfix expression. In this case feeding an empty hole will generate a
--   parse error.
Distfix :: Hole

-- | Build a infix operator. The precedence is set to 0.
infx :: Associativity -> a -> Op a

-- | Build a prefix operator. The precedence is set to 0.
prefx :: a -> Op a

-- | Build a postfix operator. The precedence is set to 0.
postfx :: a -> Op a

-- | Build a closed operator. The precedence is set to 0.
closed :: a -> Hole -> a -> Op a

-- | Build a infix operator with the keep property set to False. The
--   precedence is set to 0.
infx_ :: Associativity -> a -> Op a

-- | Build a prefix operator with the keep property set to False. The
--   precedence is set to 0.
prefx_ :: a -> Op a

-- | Build a postfix operator with the keep property set to False. The
--   precedence is set to 0.
postfx_ :: a -> Op a

-- | Build a closed operator with the keep property set to False. The
--   precedence is set to 0.
closed_ :: a -> Hole -> a -> Op a

-- | Add a new part separated by an SExpression hole to the right of an
--   operator.
sexpr :: Op a -> a -> Op a

-- | Add a new part separated by a Distfix hole to the right of an
--   operator.
distfix :: Op a -> a -> Op a

-- | Return the arity of a complete Part. It is an error to call this
--   function on a First or Middle part.
arity :: Part a -> Int

-- | Return the token of a given Part.
symbol :: Part a -> a

-- | Return all the tokens of a given operator.
symbols :: Op a -> [a]

-- | Return the possible tokens continuing the given part.
next :: Part a -> [a]

-- | Return the tokens preceding the given part.
previous :: Part a -> [a]

-- | Return the tokens of the given part.
current :: Part a -> [a]

-- | The type of the operator table.
data Table a

-- | <a>buildTable</a> constructs an operator table that can be used with
--   the <tt>shunt</tt> function. Operators are given in decreasing
--   precedence order.
buildTable :: [[Op a]] -> Table a

-- | The class of the types that can be parsed.
class Token a
toString :: Token a => a -> String
operator :: Token a => Op a -> [SExpr a] -> SExpr a
consider :: Token a => a -> a -> Bool

-- | The s-expression data type used as input and output of the parser. The
--   type is parametrized by the type of the token.
data SExpr a
List :: [SExpr a] -> SExpr a
Atom :: a -> SExpr a

-- | Show an s-expression using nested angle brackets.
showSExpr :: Token a => SExpr a -> String
