-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for encoding and decoding bodies of HTTP messages
--   
--   A library for encoding and decoding bodies of HTTP messages, designed
--   to work with the HTTP and http-server libraries. No heuristic encoding
--   detection at this time. WANTED: a library implementing the Unix
--   <a>compress</a> command encoding/decoding (or the LZW algorithm).
@package http-encodings
@version 0.9.3


-- | Errors that may occur during decoding/encoding of HTTP message bodies
module Network.HTTP.Encoding.Error

-- | Encoding/Decoding error message
data EncodingError

-- | Character decoding is not specified and cannot be guessed
CannotDetermineCharacterEncoding :: EncodingError

-- | A compression algorithm is not supported (LZW)
UnsupportedCompressionAlgorithm :: EncodingError

-- | IConv conversion error
IConvError :: ConversionError -> EncodingError

-- | Other error
GenericError :: String -> EncodingError
data ConversionError :: *
instance Show EncodingError


-- | Detection and of character encodings of HTTP message bodies
module Network.HTTP.Encoding.Character

-- | Looks for and parses the ContentType header. Returns the (optional)
--   content-type and (optional) the character encoding name.
getContentTypeAndCharacterEncoding :: [Header] -> (Maybe Type, Maybe EncodingName)

-- | Sets the given character encoding name in the given header. If there
--   is no content type header in the header list, it defaults to the
--   text/plain content type
setCharacterEncoding :: EncodingName -> [Header] -> [Header]

-- | Tries to decode a bytestring as UTF-8. Returns nothing if any illegal
--   characters are encountered
tryAsUTF8 :: ByteString -> Maybe String


-- | Deals with content encoding (compression) of message bodies:
--   detection, update and compression/decompression
module Network.HTTP.Encoding.Content

-- | Represents the content encoding, per the HTTP/1.1 standard.
data ContentEncoding
GZip :: ContentEncoding
Compress :: ContentEncoding
Deflate :: ContentEncoding
IdentityCompression :: ContentEncoding

-- | Determines the content encoding from a list of headers. Defaults to
--   <a>IdentityCompression</a>
getContentEncoding :: [Header] -> ContentEncoding

-- | Given the list of headers, updates content encoding to the specified.
updateContentEncoding :: ContentEncoding -> [Header] -> [Header]

-- | Decompresses a <tt>Bytestring</tt> assuming a given content encoding.
--   The Compress encoding (LZW algorithm) is not supported at this time.
decompress :: ContentEncoding -> ByteString -> Either EncodingError ByteString

-- | Compresses a <tt>Bytestring</tt> assuming a given content encoding.
--   The Compress encoding (LZW algorithm) is not supported at this time.
compress :: ContentEncoding -> ByteString -> Either EncodingError ByteString
instance Show ContentEncoding


-- | Encoding and decoding of bodies and complete HTTP messages. See
--   package <tt>jespresso</tt> for an example of usage.
module Network.HTTP.Encoding

-- | Decode the body of an HTTP message and return the original encoding
--   name and the same message with decoded body (as UTF8-encoded string)
--   and updated character and content encoding headers.
decode :: (HasHeaders (m ByteString), HasHeaders (m String), HasBody m) => m ByteString -> Either EncodingError (String, m String)

-- | Encode the UTF8-encoded body of an HTTP message with the provided
--   encoding.
encode :: (HasHeaders (m String), HasBody m) => EncodingName -> m String -> Either EncodingError (m ByteString)

-- | Allows to lift a transformation function operating on decoded (UTF-8)
--   bodies to bodies of requests with encoded (and compressed) bodies.
withDecodedBody :: (HasHeaders (r String), HasHeaders (r ByteString), HasBody r) => (String -> String) -> r ByteString -> Either EncodingError (r ByteString)

-- | A monadic version of <tt>withDecodeBody</tt>
withDecodedBodyM :: (Monad m, HasHeaders (r String), HasHeaders (r ByteString), HasBody r) => (String -> m String) -> r ByteString -> m (Either EncodingError (r ByteString))

-- | Decodes and decompresses the response or request body using the
--   information in the headers and content and possibly returns the body
--   in UTF8
decodeBody :: (HasHeaders (r ByteString), HasBody r) => r ByteString -> Either EncodingError DecodingResult

-- | Takes a haskell UTF8-encoded string and produces a stream, encoded and
--   compressed
encodeBody :: EncodingName -> ContentEncoding -> String -> Either EncodingError ByteString
class HasBody a
getBody :: HasBody a => a b -> b
setBody :: HasBody a => c -> a b -> a c

-- | Encoding/Decoding error message
data EncodingError

-- | The result of decoding a message body
data DecodingResult
DecodingResult :: String -> EncodingName -> DecodingResult
decodedBody :: DecodingResult -> String
originalEncoding :: DecodingResult -> EncodingName
instance HasBody Response
instance HasBody Request
