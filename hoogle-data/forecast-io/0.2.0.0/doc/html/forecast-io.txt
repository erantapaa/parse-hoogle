-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell library for working with forecast.io data.
--   
@package forecast-io
@version 0.2.0.0


-- | This module defines data types for the various JSON types returned by
--   the <a>Forecast.io</a> service.
--   
--   These definitions are generally straight conversions from the original
--   JSON. Use of the Forecast.io service should return JSON that can be
--   directly decoded into a <a>Forecast</a> object:
--   
--   <pre>
--   eitherDecode json :: Either String Forecast
--   </pre>
--   
--   Some of the <tt>ByteString</tt> libraries seem not to parse certain
--   unicode characters correctly (or maybe it's an <tt>Aeson</tt> problem;
--   this hasn't yet been determined). If your decoding fails, you may need
--   to filter out certain of these characters before decoding. In
--   particular, the degree symbol (Unicode character <tt>\176</tt>) has
--   been known to cause decoding errors.
--   
--   Another thing to be wary of is that potentially any field is
--   <i>not</i> guaranteed to be returned in the JSON. This effectively
--   makes every definition live within a <a>Maybe</a>.
module ForecastIO.V2.Types

-- | Defines a single data point in the weather forecast. For a full
--   explanation of the various records, please consult the <a>official
--   documentation</a>.
data DataPoint
DataPoint :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Int -> Maybe Double -> Maybe Double -> Maybe Text -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Int -> Maybe Double -> Maybe Double -> Maybe Int -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Int -> Maybe Double -> Maybe Double -> Maybe Int -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> DataPoint
dataPoint_time :: DataPoint -> Maybe Int
dataPoint_summary :: DataPoint -> Maybe Text
dataPoint_icon :: DataPoint -> Maybe Text
dataPoint_sunriseTime :: DataPoint -> Maybe Int
dataPoint_sunsetTime :: DataPoint -> Maybe Int
dataPoint_moonPhase :: DataPoint -> Maybe Double
dataPoint_moonPhaseError :: DataPoint -> Maybe Double
dataPoint_nearestStormDistance :: DataPoint -> Maybe Double
dataPoint_nearestStormDistanceError :: DataPoint -> Maybe Double
dataPoint_nearestStormBearing :: DataPoint -> Maybe Double
dataPoint_nearestStormBearingError :: DataPoint -> Maybe Double
dataPoint_precipIntensity :: DataPoint -> Maybe Double
dataPoint_precipIntensityError :: DataPoint -> Maybe Double
dataPoint_precipIntensityMax :: DataPoint -> Maybe Double
dataPoint_precipIntensityMaxError :: DataPoint -> Maybe Double
dataPoint_precipIntensityMaxTime :: DataPoint -> Maybe Int
dataPoint_precipProbability :: DataPoint -> Maybe Double
dataPoint_precipProbabilityError :: DataPoint -> Maybe Double
dataPoint_precipType :: DataPoint -> Maybe Text
dataPoint_precipAccumulation :: DataPoint -> Maybe Double
dataPoint_precipAccumulationError :: DataPoint -> Maybe Double
dataPoint_temperature :: DataPoint -> Maybe Double
dataPoint_temperatureError :: DataPoint -> Maybe Double
dataPoint_temperatureMin :: DataPoint -> Maybe Double
dataPoint_temperatureMinError :: DataPoint -> Maybe Double
dataPoint_temperatureMinTime :: DataPoint -> Maybe Int
dataPoint_temperatureMax :: DataPoint -> Maybe Double
dataPoint_temperatureMaxError :: DataPoint -> Maybe Double
dataPoint_temperatureMaxTime :: DataPoint -> Maybe Int
dataPoint_apparentTemperature :: DataPoint -> Maybe Double
dataPoint_apparentTemperatureError :: DataPoint -> Maybe Double
dataPoint_apparentTemperatureMin :: DataPoint -> Maybe Double
dataPoint_apparentTemperatureMinError :: DataPoint -> Maybe Double
dataPoint_apparentTemperatureMinTime :: DataPoint -> Maybe Int
dataPoint_apparentTemperatureMax :: DataPoint -> Maybe Double
dataPoint_apparentTemperatureMaxError :: DataPoint -> Maybe Double
dataPoint_apparentTemperatureMaxTime :: DataPoint -> Maybe Int
dataPoint_dewPoint :: DataPoint -> Maybe Double
dataPoint_dewPointError :: DataPoint -> Maybe Double
dataPoint_windSpeed :: DataPoint -> Maybe Double
dataPoint_windSpeedError :: DataPoint -> Maybe Double
dataPoint_windBearing :: DataPoint -> Maybe Double
dataPoint_windBearingError :: DataPoint -> Maybe Double
dataPoint_cloudCover :: DataPoint -> Maybe Double
dataPoint_cloudCoverError :: DataPoint -> Maybe Double
dataPoint_humidity :: DataPoint -> Maybe Double
dataPoint_humidityError :: DataPoint -> Maybe Double
dataPoint_pressure :: DataPoint -> Maybe Double
dataPoint_pressureError :: DataPoint -> Maybe Double
dataPoint_visibility :: DataPoint -> Maybe Double
dataPoint_visibilityError :: DataPoint -> Maybe Double
dataPoint_ozone :: DataPoint -> Maybe Double
dataPoint_ozoneError :: DataPoint -> Maybe Double

-- | Defines a summary "block" of information that can contain multiple
--   <a>DataPoint</a>s.
data DataBlock
DataBlock :: Maybe Text -> Maybe Text -> Maybe [DataPoint] -> DataBlock
dataBlock_summary :: DataBlock -> Maybe Text
dataBlock_icon :: DataBlock -> Maybe Text
dataBlock_data :: DataBlock -> Maybe [DataPoint]

-- | Defines severe weather alerts that may be being broadcast by a variety
--   of weather services.
data Alerts
Alerts :: Maybe Text -> Maybe Int -> Maybe Text -> Maybe Text -> Alerts
alerts_title :: Alerts -> Maybe Text
alerts_expires :: Alerts -> Maybe Int
alerts_description :: Alerts -> Maybe Text
alerts_uri :: Alerts -> Maybe Text

-- | <a>Flags</a> define general information about the returned data.
data Flags
Flags :: Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Flags
flags_darksky_unavailable :: Flags -> Maybe Text
flags_darksky_stations :: Flags -> Maybe [Text]
flags_datapoint_stations :: Flags -> Maybe [Text]
flags_isd_stations :: Flags -> Maybe [Text]
flags_lamp_stations :: Flags -> Maybe [Text]
flags_madis_stations :: Flags -> Maybe [Text]
flags_metar_stations :: Flags -> Maybe [Text]
flags_metno_license :: Flags -> Maybe Text
flags_sources :: Flags -> Maybe [Text]
flags_units :: Flags -> Maybe Text

-- | This is the container type for the returned data. You <i>should</i> be
--   able to just directly take the downloaded JSON and transform it into
--   this data type.
data Forecast
Forecast :: Maybe Double -> Maybe Double -> Maybe Text -> Maybe Double -> Maybe DataPoint -> Maybe DataBlock -> Maybe DataBlock -> Maybe DataBlock -> Maybe [Alerts] -> Maybe Flags -> Forecast
forecast_latitude :: Forecast -> Maybe Double
forecast_longitude :: Forecast -> Maybe Double
forecast_timezone :: Forecast -> Maybe Text
forecast_offset :: Forecast -> Maybe Double
forecast_currently :: Forecast -> Maybe DataPoint
forecast_minutely :: Forecast -> Maybe DataBlock
forecast_hourly :: Forecast -> Maybe DataBlock
forecast_daily :: Forecast -> Maybe DataBlock
forecast_alerts :: Forecast -> Maybe [Alerts]
forecast_flags :: Forecast -> Maybe Flags
instance FromJSON Forecast
instance ToJSON Forecast
instance FromJSON Alerts
instance ToJSON Alerts
instance FromJSON DataPoint
instance ToJSON DataPoint
instance FromJSON DataBlock
instance ToJSON DataBlock
instance Show DataPoint
instance Read DataPoint
instance Show DataBlock
instance Read DataBlock
instance Show Alerts
instance Read Alerts
instance Show Flags
instance Read Flags
instance Show Forecast
instance Read Forecast
instance ToJSON Flags
instance FromJSON Flags


-- | This module builds a URI endpoint which can be used to download data
--   from Forecast.io.
--   
--   For official documentation, see: <a>Forecast.io, version 2</a>. Please
--   start with this documentation for information about the general
--   service; it's quite detailed.
--   
--   The usage of this module is quite simple. For example, to get an
--   endpoint for London:
--   
--   <pre>
--   buildUri $ mkForecastEndpoint { feCoord = GPS 51.5072 0.1275, feApiKey = "YOUR-API-KEY" }
--   </pre>
--   
--   General usage is to generate a URI of the form:
--   https://api.forecast.io/forecast/APIKEY/LATITUDE,LONGITUDE
module ForecastIO.V2.URI

-- | A class that can generate a URI endpoint from an instance of type
--   <tt>a</tt>.
class Endpoint a
buildUri :: Endpoint a => a -> Text

-- | A definition for a data segment to exclude from the results. If
--   everything is excluded, little useful data will be returned.
data Exclude
Exclude_Currently :: Exclude
Exclude_Minutely :: Exclude
Exclude_Hourly :: Exclude
Exclude_Daily :: Exclude
Exclude_Alerts :: Exclude
Exclude_Flags :: Exclude

-- | A data type for defining a Forecast.io endpoint.
--   
--   The supported list of languages is defined by the <a>forecast.io
--   documentation</a>.
--   
--   The <tt>feExtend</tt> record, when set, will cause a more fine-grained
--   request URI for hourly weather forecast data to be generated.
data ForecastEndpoint
ForecastEndpoint :: GPS -> Text -> Maybe Units -> [Exclude] -> Bool -> Maybe Text -> ForecastEndpoint
feCoord :: ForecastEndpoint -> GPS
feApiKey :: ForecastEndpoint -> Text
feUnits :: ForecastEndpoint -> Maybe Units
feExclude :: ForecastEndpoint -> [Exclude]
feExtend :: ForecastEndpoint -> Bool
feLang :: ForecastEndpoint -> Maybe Text

-- | A class that contains GPS data about a location.
data GPS
GPS :: Double -> Double -> GPS
latitude :: GPS -> Double
longitude :: GPS -> Double

-- | Defines the units in which the data is returned in. <a>Units_US</a> is
--   the default behavior when omitted.
data Units
Units_US :: Units
Units_SI :: Units
Units_CA :: Units
Units_UK :: Units
Units_Auto :: Units

-- | Generates a default <a>ForecastEndpoint</a> object. At a minimum,
--   you'll want to override the <a>feCoord</a> and <a>feApiKey</a>
--   records.
mkForecastEndpoint :: ForecastEndpoint
mkGPS :: GPS
instance Show GPS
instance Read GPS
instance Eq GPS
instance Show Units
instance Read Units
instance Eq Units
instance Show Exclude
instance Read Exclude
instance Eq Exclude
instance Show ForecastEndpoint
instance Read ForecastEndpoint
instance Endpoint ForecastEndpoint
