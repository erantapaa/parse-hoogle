-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Javascript Object Signing and Encryption and JSON Web Token library
--   
@package jose
@version 0.3.41.1


-- | Data types for the JOSE library.
module Crypto.JOSE.Types

-- | A base64url encoded octet sequence interpreted as an integer.
newtype Base64Integer
Base64Integer :: Integer -> Base64Integer

-- | A base64url encoded octet sequence interpreted as an integer and where
--   the number of octets carries explicit bit-length information.
data SizedBase64Integer
SizedBase64Integer :: Int -> Integer -> SizedBase64Integer

-- | A base64url encoded string. This is used for the JWE <i>Agreement
--   PartyUInfo</i> and <i>Agreement PartyVInfo</i> fields.
newtype Base64UrlString
Base64UrlString :: ByteString -> Base64UrlString

-- | A base64url encoded octet sequence. Used for payloads, signatures,
--   symmetric keys, salts, initialisation vectors, etc.
newtype Base64Octets
Base64Octets :: ByteString -> Base64Octets

-- | A base64url encoded SHA-1 digest. Used for X.509 certificate
--   thumbprints.
newtype Base64SHA1
Base64SHA1 :: ByteString -> Base64SHA1

-- | A base64url encoded SHA-256 digest. Used for X.509 certificate
--   thumbprints.
newtype Base64SHA256
Base64SHA256 :: ByteString -> Base64SHA256

-- | A base64 encoded X.509 certificate.
newtype Base64X509
Base64X509 :: SignedCertificate -> Base64X509

-- | Represents a general universal resource identifier using its component
--   parts.
--   
--   For example, for the URI
--   
--   <pre>
--   foo://anonymous@www.haskell.org:42/ghc?query#frag
--   </pre>
--   
--   the components are:
data URI :: *
instance Eq Base64Integer
instance Show Base64Integer
instance Eq SizedBase64Integer
instance Show SizedBase64Integer
instance Eq Base64UrlString
instance Show Base64UrlString
instance Eq Base64Octets
instance Show Base64Octets
instance Eq Base64SHA1
instance Show Base64SHA1
instance Eq Base64SHA256
instance Show Base64SHA256
instance Eq Base64X509
instance Show Base64X509
instance ToJSON Base64X509
instance FromJSON Base64X509
instance ToJSON Base64SHA256
instance FromJSON Base64SHA256
instance ToJSON Base64SHA1
instance FromJSON Base64SHA1
instance ToJSON Base64Octets
instance FromJSON Base64Octets
instance Byteable Base64Octets
instance FromJSON Base64UrlString
instance ToJSON SizedBase64Integer
instance FromJSON SizedBase64Integer
instance ToJSON Base64Integer
instance FromJSON Base64Integer


-- | JOSE error types.
module Crypto.JOSE.Error

-- | All the errors that can occur.
data Error

-- | A requested algorithm is not implemented
AlgorithmNotImplemented :: Error

-- | A requested algorithm cannot be used
AlgorithmMismatch :: String -> Error

-- | Wrong type of key was given
KeyMismatch :: String -> Error

-- | Key size is too small
KeySizeTooSmall :: Error

-- | RSA private key with &gt;2 primes not supported
OtherPrimesNotSupported :: Error

-- | RSA encryption, decryption or signing error
RSAError :: Error -> Error

-- | Cannot produce compact representation of data
CompactEncodeError :: String -> Error

-- | Cannot decode compact representation
CompactDecodeError :: String -> Error

-- | JSON (Aeson) decoding error
JSONDecodeError :: String -> Error
JWSMissingHeader :: Error
JWSMissingAlg :: Error
JWSCritUnprotected :: Error
JWSDuplicateHeaderParameter :: Error
instance Eq Error
instance Show Error


-- | JWS, JWE and some related specifications provide for "compact"
--   representations of certain types. This module defines classes and
--   functions for working with such data.
module Crypto.JOSE.Compact

-- | Data that can be parsed from a compact representation.
class FromCompact a
fromCompact :: FromCompact a => [ByteString] -> Either Error a

-- | Decode a compact representation.
decodeCompact :: FromCompact a => ByteString -> Either Error a

-- | Data that can be converted to a compact representation.
class ToCompact a
toCompact :: ToCompact a => a -> Either Error [ByteString]

-- | Encode data to a compact representation.
encodeCompact :: ToCompact a => a -> Either Error ByteString


-- | Type classes for use with the JOSE modules.
module Crypto.JOSE.Classes

-- | A Key that can sign messages and validate signatures according to a
--   given <tt>Alg</tt>.
--   
--   Can fail with <a>AlgorithmMismatch</a>
class Key k where type family KeyGenParam k type family KeyContent k
gen :: (Key k, CPRG g) => KeyGenParam k -> g -> (k, g)
fromKeyContent :: Key k => KeyContent k -> k
sign :: (Key k, CPRG g) => Alg -> k -> g -> ByteString -> (Either Error ByteString, g)
verify :: Key k => Alg -> k -> ByteString -> ByteString -> Either Error Bool
public :: Key k => k -> Maybe k


-- | A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data
--   structure that represents a cryptographic key. This module also
--   defines a JSON Web Key Set (JWK Set) JSON data structure for
--   representing a set of JWKs.
module Crypto.JOSE.JWK

-- | JWK ยง3. JSON Web Key (JWK) Format
data JWK
JWK :: KeyMaterial -> Maybe KeyUse -> Maybe [KeyOp] -> Maybe Alg -> Maybe String -> Maybe URI -> Maybe (NonEmpty Base64X509) -> Maybe Base64SHA1 -> Maybe Base64SHA256 -> JWK
jwkMaterial :: Lens' JWK KeyMaterial
jwkUse :: Lens' JWK (Maybe KeyUse)
jwkKeyOps :: Lens' JWK (Maybe [KeyOp])
jwkAlg :: Lens' JWK (Maybe Alg)
jwkKid :: Lens' JWK (Maybe String)
jwkX5u :: Lens' JWK (Maybe URI)
jwkX5c :: Lens' JWK (Maybe (NonEmpty Base64X509))
jwkX5t :: Lens' JWK (Maybe Base64SHA1)
jwkX5tS256 :: Lens' JWK (Maybe Base64SHA256)

-- | JWK ยง4. JSON Web Key Set (JWK Set) Format
newtype JWKSet
JWKSet :: [JWK] -> JWKSet

-- | Elliptic Curve key type (Recommeded+)
data EC
EC :: EC

-- | RSA key type (Required)
data RSA
RSA :: RSA

-- | Octet sequence (symmetric key) key type (Required)
data Oct
Oct :: Oct

-- | Parameters for Elliptic Curve Keys
data ECKeyParameters
ECKeyParameters :: EC -> Crv -> SizedBase64Integer -> SizedBase64Integer -> Maybe SizedBase64Integer -> ECKeyParameters
ecKty :: ECKeyParameters -> EC
ecCrv :: ECKeyParameters -> Crv
ecX :: ECKeyParameters -> SizedBase64Integer
ecY :: ECKeyParameters -> SizedBase64Integer
ecD :: ECKeyParameters -> Maybe SizedBase64Integer

-- | "oth" (Other Primes Info) Parameter
data RSAPrivateKeyOthElem
RSAPrivateKeyOthElem :: Base64Integer -> Base64Integer -> Base64Integer -> RSAPrivateKeyOthElem
rOth :: RSAPrivateKeyOthElem -> Base64Integer
dOth :: RSAPrivateKeyOthElem -> Base64Integer
tOth :: RSAPrivateKeyOthElem -> Base64Integer

-- | Optional parameters for RSA private keys
data RSAPrivateKeyOptionalParameters
RSAPrivateKeyOptionalParameters :: Base64Integer -> Base64Integer -> Base64Integer -> Base64Integer -> Base64Integer -> Maybe (NonEmpty RSAPrivateKeyOthElem) -> RSAPrivateKeyOptionalParameters
rsaP :: RSAPrivateKeyOptionalParameters -> Base64Integer
rsaQ :: RSAPrivateKeyOptionalParameters -> Base64Integer
rsaDp :: RSAPrivateKeyOptionalParameters -> Base64Integer
rsaDq :: RSAPrivateKeyOptionalParameters -> Base64Integer
rsaQi :: RSAPrivateKeyOptionalParameters -> Base64Integer
rsaOth :: RSAPrivateKeyOptionalParameters -> Maybe (NonEmpty RSAPrivateKeyOthElem)

-- | RSA private key parameters
data RSAPrivateKeyParameters
RSAPrivateKeyParameters :: Base64Integer -> Maybe RSAPrivateKeyOptionalParameters -> RSAPrivateKeyParameters
rsaD :: RSAPrivateKeyParameters -> Base64Integer
rsaOptionalParameters :: RSAPrivateKeyParameters -> Maybe RSAPrivateKeyOptionalParameters

-- | Parameters for RSA Keys
data RSAKeyParameters
RSAKeyParameters :: RSA -> SizedBase64Integer -> Base64Integer -> Maybe RSAPrivateKeyParameters -> RSAKeyParameters
rsaE :: Lens' RSAKeyParameters Base64Integer
rsaKty :: Lens' RSAKeyParameters RSA
rsaN :: Lens' RSAKeyParameters SizedBase64Integer
rsaPrivateKeyParameters :: Lens' RSAKeyParameters (Maybe RSAPrivateKeyParameters)

-- | Symmetric key parameters data.
data OctKeyParameters
OctKeyParameters :: Oct -> Base64Octets -> OctKeyParameters
octKty :: OctKeyParameters -> Oct
octK :: OctKeyParameters -> Base64Octets

-- | Keygen parameters.
data KeyMaterialGenParam
ECGenParam :: Crv -> KeyMaterialGenParam
RSAGenParam :: Int -> KeyMaterialGenParam
OctGenParam :: Int -> KeyMaterialGenParam

-- | Key material sum type.
data KeyMaterial
ECKeyMaterial :: ECKeyParameters -> KeyMaterial
RSAKeyMaterial :: RSAKeyParameters -> KeyMaterial
OctKeyMaterial :: OctKeyParameters -> KeyMaterial
instance Eq JWKSet
instance Show JWKSet
instance FromJSON JWKSet
instance Key JWK
instance ToJSON JWK
instance FromJSON JWK
instance Eq KeyUse
instance Show KeyUse
instance Eq JWK
instance Show JWK
instance ToJSON KeyUse
instance FromJSON KeyUse
instance Eq KeyOp
instance Show KeyOp
instance ToJSON KeyOp
instance FromJSON KeyOp
instance Eq Alg
instance Show Alg
instance ToJSON Alg
instance FromJSON Alg


-- | JSON Web Signature (JWS) represents content secured with digital
--   signatures or Message Authentication Codes (MACs) using JavaScript
--   Object Notation (JSON) based data structures.
module Crypto.JOSE.JWS

-- | JWA ยง3.1. "alg" (Algorithm) Header Parameters for JWS
data Alg
HS256 :: Alg
HS384 :: Alg
HS512 :: Alg
RS256 :: Alg
RS384 :: Alg
RS512 :: Alg
ES256 :: Alg
ES384 :: Alg
ES512 :: Alg
PS256 :: Alg
PS384 :: Alg
PS512 :: Alg
None :: Alg

-- | JWS Header data type.
data JWSHeader
JWSHeader :: Maybe Alg -> Maybe URI -> Maybe JWK -> Maybe String -> Maybe URI -> Maybe (NonEmpty Base64X509) -> Maybe Base64SHA1 -> Maybe Base64SHA256 -> Maybe String -> Maybe String -> Maybe CritParameters -> JWSHeader
headerAlg :: JWSHeader -> Maybe Alg

-- | JWK Set URL
headerJku :: JWSHeader -> Maybe URI
headerJwk :: JWSHeader -> Maybe JWK

-- | interpretation unspecified
headerKid :: JWSHeader -> Maybe String
headerX5u :: JWSHeader -> Maybe URI
headerX5c :: JWSHeader -> Maybe (NonEmpty Base64X509)
headerX5t :: JWSHeader -> Maybe Base64SHA1
headerX5tS256 :: JWSHeader -> Maybe Base64SHA256

-- | Content Type (of object)
headerTyp :: JWSHeader -> Maybe String

-- | Content Type (of payload)
headerCty :: JWSHeader -> Maybe String
headerCrit :: JWSHeader -> Maybe CritParameters

-- | JSON Web Signature data type. Consists of a payload and a (possibly
--   empty) list of signatures.
data JWS
JWS :: Base64Octets -> [Signature] -> JWS

-- | Payload of a JWS, as a lazy bytestring.
jwsPayload :: JWS -> ByteString

-- | Create a new signature on a JWS.
signJWS :: CPRG g => g -> JWS -> JWSHeader -> JWK -> (Either Error JWS, g)

-- | Algorithms for which validation will be attempted. The default value
--   includes all algorithms except <tt>None</tt>.
newtype ValidationAlgorithms
ValidationAlgorithms :: [Alg] -> ValidationAlgorithms

-- | Validation policy. The default policy is <a>AllValidated</a>.
data ValidationPolicy

-- | One successfully validated signature is sufficient
AnyValidated :: ValidationPolicy

-- | All signatures for which validation is attempted must be validated
AllValidated :: ValidationPolicy

-- | Verify a JWS.
--   
--   Verification succeeds if any signature on the JWS is successfully
--   validated with the given <a>Key</a>.
--   
--   If only specific signatures need to be validated, and the
--   <a>ValidationPolicy</a> argument is not enough to express this, the
--   caller is responsible for removing irrelevant signatures prior to
--   calling <a>verifyJWS</a>.
verifyJWS :: ValidationAlgorithms -> ValidationPolicy -> JWK -> JWS -> Bool


-- | Types to deal with the legacy JSON Web Key formats used with Mozilla
--   Persona.
module Crypto.JOSE.Legacy

-- | Legacy JSON Web Key data type.
newtype JWK'
JWK' :: RSKeyParameters -> JWK'
_rsKeyParameters :: JWK' -> RSKeyParameters
toJWK :: JWK' -> JWK
data RSKeyParameters
rsaKeyParameters :: Iso' RSKeyParameters RSAKeyParameters
instance Key JWK'
instance ToJSON JWK'
instance FromJSON JWK'
instance Eq JWK'
instance Show JWK'
instance Key RSKeyParameters
instance ToJSON RSKeyParameters
instance FromJSON RSKeyParameters
instance Eq RS
instance Show RS
instance Eq RSKeyParameters
instance Show RSKeyParameters
instance ToJSON RS
instance FromJSON RS
instance ToJSON StringifiedInteger
instance FromJSON StringifiedInteger


-- | Prelude for the library.
module Crypto.JOSE


-- | JSON Web Token implementation.
module Crypto.JWT

-- | JSON Web Token data.
data JWT
JWT :: JWTCrypto -> ClaimsSet -> JWT

-- | JOSE aspect of the JWT.
jwtCrypto :: JWT -> JWTCrypto

-- | Claims of the JWT.
jwtClaimsSet :: JWT -> ClaimsSet
claimAud :: Lens' ClaimsSet (Maybe Audience)
claimExp :: Lens' ClaimsSet (Maybe NumericDate)
claimIat :: Lens' ClaimsSet (Maybe NumericDate)
claimIss :: Lens' ClaimsSet (Maybe StringOrURI)
claimJti :: Lens' ClaimsSet (Maybe Text)
claimNbf :: Lens' ClaimsSet (Maybe NumericDate)
claimSub :: Lens' ClaimsSet (Maybe StringOrURI)
unregisteredClaims :: Lens' ClaimsSet (HashMap Text Value)
addClaim :: Text -> Value -> ClaimsSet -> ClaimsSet

-- | Create a JWT that is a JWS.
createJWSJWT :: CPRG g => g -> JWK -> JWSHeader -> ClaimsSet -> (Either Error JWT, g)

-- | Validate a JWT as a JWS (JSON Web Signature).
validateJWSJWT :: ValidationAlgorithms -> ValidationPolicy -> JWK -> JWT -> Bool

-- | The JWT Claims Set represents a JSON object whose members are the
--   claims conveyed by the JWT.
data ClaimsSet
ClaimsSet :: Maybe StringOrURI -> Maybe StringOrURI -> Maybe Audience -> Maybe NumericDate -> Maybe NumericDate -> Maybe NumericDate -> Maybe Text -> HashMap Text Value -> ClaimsSet

-- | The issuer claim identifies the principal that issued the JWT. The
--   processing of this claim is generally application specific.
_claimIss :: ClaimsSet -> Maybe StringOrURI

-- | The subject claim identifies the principal that is the subject of the
--   JWT. The Claims in a JWT are normally statements about the subject.
--   The subject value MAY be scoped to be locally unique in the context of
--   the issuer or MAY be globally unique. The processing of this claim is
--   generally application specific.
_claimSub :: ClaimsSet -> Maybe StringOrURI

-- | The audience claim identifies the recipients that the JWT is intended
--   for. Each principal intended to process the JWT MUST identify itself
--   with a value in the audience claim. If the principal processing the
--   claim does not identify itself with a value in the <i>aud</i> claim
--   when this claim is present, then the JWT MUST be rejected.
_claimAud :: ClaimsSet -> Maybe Audience

-- | The expiration time claim identifies the expiration time on or after
--   which the JWT MUST NOT be accepted for processing. The processing of
--   <i>exp</i> claim requires that the current date/time MUST be before
--   expiration date/time listed in the <i>exp</i> claim. Implementers MAY
--   provide for some small leeway, usually no more than a few minutes, to
--   account for clock skew.
_claimExp :: ClaimsSet -> Maybe NumericDate

-- | The not before claim identifies the time before which the JWT MUST NOT
--   be accepted for processing. The processing of the <i>nbf</i> claim
--   requires that the current date/time MUST be after or equal to the
--   not-before date/time listed in the <i>nbf</i> claim. Implementers MAY
--   provide for some small leeway, usually no more than a few minutes, to
--   account for clock skew.
_claimNbf :: ClaimsSet -> Maybe NumericDate

-- | The issued at claim identifies the time at which the JWT was issued.
--   This claim can be used to determine the age of the JWT.
_claimIat :: ClaimsSet -> Maybe NumericDate

-- | The JWT ID claim provides a unique identifier for the JWT. The
--   identifier value MUST be assigned in a manner that ensures that there
--   is a negligible probability that the same value will be accidentally
--   assigned to a different data object. The <i>jti</i> claim can be used
--   to prevent the JWT from being replayed. The <i>jti</i> value is a
--   case-sensitive string.
_claimJti :: ClaimsSet -> Maybe Text

-- | Claim Names can be defined at will by those using JWTs.
_unregisteredClaims :: ClaimsSet -> HashMap Text Value

-- | Return an empty claims set.
emptyClaimsSet :: ClaimsSet

-- | Audience data. In the general case, the <i>aud</i> value is an array
--   of case-sensitive strings, each containing a <a>StringOrURI</a> value.
--   In the special case when the JWT has one audience, the <i>aud</i>
--   value MAY be a single case-sensitive string containing a
--   <a>StringOrURI</a> value.
data Audience
General :: [StringOrURI] -> Audience
Special :: StringOrURI -> Audience

-- | A JSON string value, with the additional requirement that while
--   arbitrary string values MAY be used, any value containing a <i>:</i>
--   character MUST be a URI.
data StringOrURI

-- | Construct a <a>StringOrURI</a> from text
fromString :: Text -> StringOrURI

-- | Construct a <a>StringOrURI</a> from a URI
fromURI :: URI -> StringOrURI

-- | Get the
getString :: StringOrURI -> Maybe Text

-- | Get the uri from a <a>StringOrURI</a>
getURI :: StringOrURI -> Maybe URI

-- | A JSON numeric value representing the number of seconds from
--   1970-01-01T0:0:0Z UTC until the specified UTC date/time.
newtype NumericDate
NumericDate :: UTCTime -> NumericDate
instance Eq JWTCrypto
instance Show JWTCrypto
instance Eq JWT
instance Show JWT
instance ToCompact JWT
instance FromCompact JWT
instance ToCompact JWTCrypto
instance FromCompact JWTCrypto
instance ToJSON ClaimsSet
instance FromJSON ClaimsSet
instance Eq StringOrURI
instance Show StringOrURI
instance Eq NumericDate
instance Show NumericDate
instance Eq Audience
instance Show Audience
instance Eq ClaimsSet
instance Show ClaimsSet
instance ToJSON Audience
instance FromJSON Audience
instance ToJSON NumericDate
instance FromJSON NumericDate
instance ToJSON StringOrURI
instance FromJSON StringOrURI
