-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Load 3D geometry in the COLLADA format
--   
--   Should be able to load anything that Google SketchUp produces -- other
--   than that, all bets are off.
@package graphics-formats-collada
@version 0.3.1

module Graphics.Formats.Collada.Objects
type Dict = Map ID Object
type ID = String
data Model
Model :: GLfloat -> ID -> Dict -> Model
modelScale :: Model -> GLfloat
modelScene :: Model -> ID
modelDict :: Model -> Dict
data Object
OVisualScene :: [NodeRef] -> Object
OFloatArray :: [GLfloat] -> Object
OSource :: Accessor -> Object
OVertices :: [Input] -> Object
OGeometry :: Mesh -> Object
OImage :: FilePath -> Object
OParam :: Parameter -> Object
OEffect :: Technique -> Object
OMaterial :: ID -> Object
ONode :: Node -> Object
data Matrix
Matrix :: [GLfloat] -> Matrix
data Accessor
Accessor :: ID -> Int -> Int -> Int -> Int -> Accessor
data Input
Input :: Int -> InputSemantic -> ID -> Input
data InputSemantic
SemPosition :: InputSemantic
SemNormal :: InputSemantic
SemVertex :: InputSemantic
SemTexCoord :: InputSemantic
data Primitive
PrimTriangles :: String -> [Input] -> [Int] -> Primitive
data Mesh
Mesh :: [Primitive] -> Mesh
data Parameter
ParamSurface2D :: ID -> Parameter
ParamSampler2D :: ID -> Parameter
data Technique
TechLambert :: ColorOrTexture -> Technique
TechConstant :: ColorOrTexture -> GLfloat -> Technique
data ColorOrTexture
COTColor :: GLfloat -> GLfloat -> GLfloat -> GLfloat -> ColorOrTexture
COTTexture :: ID -> String -> ColorOrTexture
data Node
Node :: Matrix -> [NodeInstance] -> Node
data NodeRef
NRNode :: Node -> NodeRef
NRInstance :: ID -> NodeRef
data NodeInstance
NINode :: NodeRef -> NodeInstance
NIGeometry :: ID -> [MaterialBinding] -> NodeInstance
data MaterialBinding
MaterialBinding :: String -> ID -> String -> String -> MaterialBinding
parseCollada :: String -> Maybe Model
instance Show MaterialBinding
instance Show NodeInstance
instance Show NodeRef
instance Show Node
instance Show ColorOrTexture
instance Show Technique
instance Show Parameter
instance Show Mesh
instance Show Primitive
instance Eq InputSemantic
instance Show InputSemantic
instance Show Input
instance Show Accessor
instance Show Matrix
instance Show Object

module Graphics.Formats.Collada.Render
compile :: (String -> IO (TextureObject)) -> Model -> IO (IO ())
instance Typeable GLTexObj
instance Typeable1 DrawM
instance Functor CompileM
instance Applicative CompileM
instance Monad CompileM
instance MonadIO CompileM
instance Functor DrawM
instance Applicative DrawM
instance Monad DrawM
instance MonadIO DrawM
instance Monoid CompiledInput

module Graphics.Formats.Collada
data Config
Config :: (String -> IO TextureObject) -> Config
textureLoader :: Config -> String -> IO TextureObject

-- | Loads a COLLADA file from a file's contents (not the filename) and
--   returns an action that draws the model. This will throw an IO
--   exception if anything went wrong during the process.
load :: Config -> String -> IO (IO ())
defaultConfig :: Config

-- | Takes a prefix and returns a texture loader that prepends the prefix
--   to the path and loads from disk.
pathTextureLoader :: String -> String -> IO TextureObject
