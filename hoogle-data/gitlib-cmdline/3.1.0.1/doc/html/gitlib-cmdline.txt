-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Gitlib repository backend that uses the git command-line tool.
--   
--   Gitlib repository backend that uses the git command-line tool.
@package gitlib-cmdline
@version 3.1.0.1

module Git.CmdLine
toStrict :: Text -> Text
fromStrict :: Text -> Text
newtype CliRepo
CliRepo :: RepositoryOptions -> CliRepo
cliRepoPath :: CliRepo -> Text
cliWorkingDir :: CliRepo -> Maybe Text
type MonadCli m = (Applicative m, MonadThrow m, MonadIO m)
mkOid :: MonadCli m => forall o. Text -> ReaderT CliRepo m (Tagged o SHA)
shaToRef :: MonadCli m => Text -> ReaderT CliRepo m (RefTarget CliRepo)
parseCliTime :: String -> ZonedTime
formatCliTime :: ZonedTime -> Text
lexer :: TokenParser u
gitStdOpts :: CliRepo -> [Text]
git :: CliRepo -> [Text] -> Sh Text
git_ :: CliRepo -> [Text] -> Sh ()
doRunGit :: MonadCli m => (FilePath -> [Text] -> Sh a) -> [Text] -> Sh () -> ReaderT CliRepo m a
runGit :: MonadCli m => [Text] -> ReaderT CliRepo m Text
runGit_ :: MonadCli m => [Text] -> ReaderT CliRepo m ()
cliRepoDoesExist :: CliRepo -> Text -> Sh (Either GitException ())
cliFilePathToURI :: (Functor m, MonadIO m) => FilePath -> m FilePath
cliPushCommit :: MonadCli m => CommitOid CliRepo -> Text -> Text -> Maybe FilePath -> ReaderT CliRepo m (CommitOid CliRepo)
cliResetHard :: MonadCli m => Text -> ReaderT CliRepo m ()
cliPullCommit :: MonadCli m => Text -> Text -> Text -> Text -> Maybe FilePath -> ReaderT CliRepo m (MergeResult CliRepo)
cliLookupBlob :: MonadCli m => BlobOid CliRepo -> ReaderT CliRepo m (Blob CliRepo (ReaderT CliRepo m))
cliDoCreateBlob :: MonadCli m => BlobContents (ReaderT CliRepo m) -> Bool -> ReaderT CliRepo m (BlobOid CliRepo)
cliHashContents :: MonadCli m => BlobContents (ReaderT CliRepo m) -> ReaderT CliRepo m (BlobOid CliRepo)
cliCreateBlob :: MonadCli m => BlobContents (ReaderT CliRepo m) -> ReaderT CliRepo m (BlobOid CliRepo)
cliExistsObject :: MonadCli m => SHA -> ReaderT CliRepo m Bool
cliSourceObjects :: MonadCli m => Maybe (CommitOid CliRepo) -> CommitOid CliRepo -> Bool -> Producer (ReaderT CliRepo m) (ObjectOid CliRepo)
cliReadTree :: MonadCli m => Tree CliRepo -> ReaderT CliRepo m (EntryHashMap CliRepo)
cliParseLsTree :: MonadCli m => Text -> ReaderT CliRepo m (TreeFilePath, TreeEntry CliRepo)
cliWriteTree :: MonadCli m => EntryHashMap CliRepo -> ReaderT CliRepo m (TreeOid CliRepo)
cliLookupTree :: MonadCli m => TreeOid CliRepo -> ReaderT CliRepo m (Tree CliRepo)
cliTreeEntry :: MonadCli m => Tree CliRepo -> TreeFilePath -> ReaderT CliRepo m (Maybe (TreeEntry CliRepo))
cliSourceTreeEntries :: MonadCli m => Tree CliRepo -> Producer (ReaderT CliRepo m) (TreeFilePath, TreeEntry CliRepo)
cliLookupCommit :: MonadCli m => CommitOid CliRepo -> ReaderT CliRepo m (Commit CliRepo)
cliCreateCommit :: MonadCli m => [CommitOid CliRepo] -> TreeOid CliRepo -> Signature -> Signature -> Text -> Maybe Text -> ReaderT CliRepo m (Commit CliRepo)
data CliObjectRef
CliObjectRef :: Text -> Text -> CliObjectRef
objectRefType :: CliObjectRef -> Text
objectRefSha :: CliObjectRef -> Text
data CliReference
CliReference :: Text -> CliObjectRef -> CliReference
referenceRef :: CliReference -> Text
referenceObject :: CliReference -> CliObjectRef
cliShowRef :: MonadCli m => Maybe Text -> ReaderT CliRepo m (Maybe [(Text, Text)])
cliLookupRef :: MonadCli m => Text -> ReaderT CliRepo m (Maybe (RefTarget CliRepo))
cliUpdateRef :: MonadCli m => Text -> RefTarget CliRepo -> ReaderT CliRepo m ()
cliDeleteRef :: MonadCli m => Text -> ReaderT CliRepo m ()
cliSourceRefs :: MonadCli m => Producer (ReaderT CliRepo m) Text
cliResolveRef :: MonadCli m => Text -> ReaderT CliRepo m (Maybe (Oid CliRepo))
cliLookupTag :: MonadCli m => TagOid CliRepo -> ReaderT CliRepo m (Tag CliRepo)
cliCreateTag :: MonadCli m => CommitOid CliRepo -> Signature -> Text -> Text -> ReaderT CliRepo m (Tag CliRepo)
cliWorkingTreeDirty :: MonadCli m => ReaderT CliRepo m Bool
cliFactory :: MonadCli m => RepositoryFactory (ReaderT CliRepo m) m CliRepo
openCliRepository :: MonadIO m => RepositoryOptions -> m CliRepo
instance Show CliObjectRef
instance Show CliReference
instance (Applicative m, MonadThrow m, MonadIO m) => MonadGit CliRepo (ReaderT CliRepo m)
