-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell SuperCollider utilities
--   
@package supercollider-ht
@version 0.3

module Sound.SC3.Server.PlayEasy

-- | Construct an instrument definition, send <i>d_recv and </i>s_new
--   messages to scsynth.
play :: Transport m => UGen -> m Message

-- | Free all nodes at the group with node id <a>homeId</a>.
stop :: Transport m => m ()

-- | Free all nodes and re-create group node with id <a>homeId</a>.
reset :: Transport m => m ()

-- | withSC3 . play
audition :: UGen -> IO Message

-- | Bracket SC3 communication.
withSC3 :: Connection UDP a -> IO a

-- | Bracket SC3 communication via UDP.
withSC3UDP :: Connection UDP a -> IO a

-- | Bracket SC3 communication via TCP.
withSC3TCP :: Connection TCP a -> IO a

-- | Write SC3 communication to a command file.
withSC3File :: FilePath -> Connection T a -> IO a
type NodeId = Int

-- | <i>Deprecated: use autoId instead</i>
noId :: NodeId
autoId :: NodeId
lastId :: NodeId
rootId :: NodeId
homeId :: NodeId
set :: Transport m => String -> Double -> m ()
setMulti :: Transport m => [(String, Double)] -> m ()
setId :: Transport m => NodeId -> String -> Double -> m ()
playIdCustomOut :: Transport m => NodeId -> UGen -> m Message
playId :: Transport m => NodeId -> UGen -> m Message
stopId :: Transport m => NodeId -> m ()
send :: (OSC a, SendOSC m) => a -> m ()
sync :: (OSC a, Transport m) => a -> m Message
d_recv_synthdef :: String -> UGen -> Message
simpleSync :: (Transport m, OSC a) => a -> m ()

-- | Returns 1 for mono signals.
mceDegree :: UGen -> Int


-- | Remember to call <tt>initialize</tt> before trying any example.
--   Otherwise, <tt>scsynth</tt> says <tt>FAILURE /s_new Group not
--   found</tt>. An example can be tested with <a>audition</a>. The sound
--   can be stopped with <tt>withSC3 reset</tt>, again.
module Sound.SC3.Example.Effect
initialize :: IO ()
analogBubbles :: UGen
analogBubblesRun :: IO ()
pgmouse :: UGen -> UGen
pg :: UGen -> UGen
pt :: UGen
sawPerc :: UGen -> UGen -> UGen
seed :: Int
wind :: UGen -> UGen
windMouse :: UGen -> UGen
ps :: UGen
envPerc' :: Fractional a => Envelope a
dbl :: a -> (a, a)
bassFilter :: UGen
bassFilterRun :: IO ()
bassFilterGlissando :: UGen
void :: Monad m => m a -> m ()
loadTone :: Transport m => String -> (UGen -> UGen -> UGen) -> m ()
loadEffect :: Transport m => String -> UGen -> m ()
playTone :: Transport m => String -> Double -> Double -> m ()
playToneSep :: Transport m => String -> Double -> Double -> m ()
playToneInGroup :: Transport m => Int -> String -> Double -> Double -> m ()
newGroup :: Transport m => Int -> Int -> m ()
playEffect :: Transport m => Int -> String -> m ()
playScale :: IO ()
filterPerc :: UGen -> UGen -> UGen
randomPerc :: IO ()
filterSweep :: UGen -> UGen -> UGen
playSimpleSweep :: IO ()
playSuccSweep :: IO ()
playFilterSweep :: IO ()
toneToFreq :: Int -> Double
formant0 :: UGen
formant2 :: UGen
formant1 :: UGen
render :: FilePath -> Double -> UGen -> IO ()
renderAnalogBubbles :: IO ()
renderWind :: IO ()
renderBassFilter :: IO ()
