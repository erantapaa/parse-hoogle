-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | GHCi based bare bones IDE
--   
--   Either "GHCi as a daemon" or "GHC + a bit of an IDE". A very simple
--   Haskell development tool which shows you the errors in your project
--   and updates them whenever you save. Run <tt>ghcid --topmost
--   --command=ghci</tt>, where <tt>--topmost</tt> makes the window on top
--   of all others (Windows only) and <tt>--command</tt> is the command to
--   start GHCi on your project (defaults to <tt>ghci</tt> if you have a
--   <tt>.ghci</tt> file, or else to <tt>cabal repl</tt>).
@package ghcid
@version 0.5


-- | The entry point of the library
module Language.Haskell.Ghcid

-- | A GHCi session. Created with <tt>startGhci</tt>.
data Ghci

-- | GHCi shut down
data GhciError
UnexpectedExit :: String -> String -> GhciError

-- | Severity of messages
data Severity
Warning :: Severity
Error :: Severity

-- | Load messages
data Load
Loading :: String -> FilePath -> Load
loadModule :: Load -> String
loadFile :: Load -> FilePath
Message :: Severity -> FilePath -> (Int, Int) -> [String] -> Load
loadSeverity :: Load -> Severity
loadFile :: Load -> FilePath
loadFilePos :: Load -> (Int, Int)
loadMessage :: Load -> [String]

-- | Start GHCi, returning a function to perform further operation, as well
--   as the result of the initial loading. Pass True to write out messages
--   produced while loading, useful if invoking something like "cabal repl"
--   which might compile dependent packages before really loading.
startGhci :: String -> Maybe FilePath -> Bool -> IO (Ghci, [Load])

-- | Show modules
showModules :: Ghci -> IO [(String, FilePath)]

-- | reload modules
reload :: Ghci -> IO [Load]

-- | Send a command, get lines of result
exec :: Ghci -> String -> IO [String]

-- | Stop GHCi
stopGhci :: Ghci -> IO ()
