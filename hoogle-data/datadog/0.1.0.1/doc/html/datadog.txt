-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Datadog client for Haskell. Currently only StatsD supported, other support forthcoming.
--   
@package datadog
@version 0.1.0.1


-- | DogStatsD accepts custom application metrics points over UDP, and then
--   periodically aggregates and forwards the metrics to Datadog, where
--   they can be graphed on dashboards. The data is sent by using a client
--   library such as this one that communicates with a DogStatsD server.
module Network.Datadog.StatsD
data DogStatsSettings
DogStatsSettings :: HostName -> Int -> DogStatsSettings

-- | The hostname or IP of the DogStatsD server (default: 127.0.0.1)
dogStatsSettingsHost :: DogStatsSettings -> HostName

-- | The port that the DogStatsD server is listening on (default: 8125)
dogStatsSettingsPort :: DogStatsSettings -> Int
defaultSettings :: DogStatsSettings
withDogStatsD :: MonadBaseControl IO m => DogStatsSettings -> (StatsClient -> m a) -> m a

-- | Send a <a>Metric</a>, <a>Event</a>, or <tt>StatusCheck</tt> to the
--   DogStatsD server.
--   
--   Since UDP is used to send the events, there is no ack that sent values
--   are successfully dealt with.
--   
--   <pre>
--   withDogStatsD defaultSettings $ \client -&gt; do
--     send client $ event "Wombat attack" "A host of mighty wombats has breached the gates"
--     send client $ metric "wombat.force_count" Gauge (9001 :: Int)
--     send client $ serviceCheck "Wombat Radar" ServiceOk
--   </pre>
send :: (MonadBase IO m, ToStatsD v) => StatsClient -> v -> m ()

-- | Smart <a>Metric</a> constructor. Use the lens functions to set the
--   optional fields.
metric :: ToMetricValue a => MetricName -> MetricType -> a -> Metric

-- | <a>Metric</a>
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>name</a> <tt>::</tt> <a>MetricName</a></li>
--   <li><a>sampleRate</a> <tt>::</tt> <a>Double</a></li>
--   <li><a>type'</a> <tt>::</tt> <a>MetricType</a></li>
--   <li><a>value</a> <tt>::</tt> <a>ToMetricValue</a> <tt>a =&gt;
--   a</tt></li>
--   <li><a>tags</a> <tt>::</tt> <tt>[</tt><a>Tag</a><tt>]</tt></li>
--   </ul>
data Metric
newtype MetricName
MetricName :: Text -> MetricName
fromMetricName :: MetricName -> Text
data MetricType

-- | Gauges measure the value of a particular thing at a particular time,
--   like the amount of fuel in a car’s gas tank or the number of users
--   connected to a system.
Gauge :: MetricType

-- | Counters track how many times something happened per second, like the
--   number of database requests or page views.
Counter :: MetricType

-- | StatsD only supports histograms for timing, not generic values (like
--   the size of uploaded files or the number of rows returned from a
--   query). Timers are essentially a special case of histograms, so they
--   are treated in the same manner by DogStatsD for backwards
--   compatibility.
Timer :: MetricType

-- | Histograms track the statistical distribution of a set of values, like
--   the duration of a number of database queries or the size of files
--   uploaded by users. Each histogram will track the average, the minimum,
--   the maximum, the median and the 95th percentile.
Histogram :: MetricType

-- | Sets are used to count the number of unique elements in a group. If
--   you want to track the number of unique visitor to your site, sets are
--   a great way to do that.
Set :: MetricType

-- | Smart <a>Event</a> constructor. Use the lens functions to set the
--   optional fields.
event :: Text -> Text -> Event

-- | <a>Event</a>
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>title</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>text</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>dateHappened</a> <tt>::</tt> <a>Maybe</a> <a>UTCTime</a></li>
--   <li><a>hostname</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>aggregationKey</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>priority</a> <tt>::</tt> <a>Maybe</a> <a>Priority</a></li>
--   <li><a>sourceTypeName</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>alertType</a> <tt>::</tt> <a>Maybe</a> <a>AlertType</a></li>
--   <li><a>tags</a> <tt>::</tt> <tt>[</tt><a>Tag</a><tt>]</tt></li>
--   </ul>
data Event
serviceCheck :: Text -> ServiceCheckStatus -> ServiceCheck

-- | <a>ServiceCheck</a>
--   
--   The fields accessible through corresponding lenses are:
--   
--   <ul>
--   <li><a>name</a> <tt>::</tt> <a>Text</a></li>
--   <li><a>status</a> <tt>::</tt> <a>ServiceCheckStatus</a></li>
--   <li><a>message</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>dateHappened</a> <tt>::</tt> <a>Maybe</a> <a>UTCTime</a></li>
--   <li><a>hostname</a> <tt>::</tt> <a>Maybe</a> <a>Text</a></li>
--   <li><a>tags</a> <tt>::</tt> <tt>[</tt><a>Tag</a><tt>]</tt></li>
--   </ul>
data ServiceCheck
data ServiceCheckStatus
ServiceOk :: ServiceCheckStatus
ServiceWarning :: ServiceCheckStatus
ServiceCritical :: ServiceCheckStatus
ServiceUnknown :: ServiceCheckStatus

-- | Convert an <a>Event</a>, <a>Metric</a>, or <tt>StatusCheck</tt> to
--   their wire format.
class ToStatsD a

-- | Tags are a Datadog specific extension to StatsD. They allow you to tag
--   a metric with a dimension that’s meaningful to you and slice and dice
--   along that dimension in your graphs. For example, if you wanted to
--   measure the performance of two video rendering algorithms, you could
--   tag the rendering time metric with the version of the algorithm you
--   used.
data Tag

-- | Create a tag from a key-value pair. Useful for slicing and dicing
--   events in Datadog.
--   
--   Key and value text values are normalized by converting ":"s, "|"s, and
--   "@"s to underscores ("_").
tag :: Text -> Text -> Tag

-- | Converts a supported numeric type to the format understood by
--   DogStatsD. Currently limited by BufferBuilder encoding options.
class ToMetricValue a

-- | Special setter to update the value of a <a>Metric</a>.
--   
--   <pre>
--   metric ("foo"" :: Text) Counter (1 :: Int) &amp; value .~ (5 :: Double)
--   </pre>
value :: ToMetricValue a => Setter Metric Metric (Utf8Builder ()) a
data Priority
Low :: Priority
Normal :: Priority
data AlertType
Error :: AlertType
Warning :: AlertType
Info :: AlertType
Success :: AlertType
class HasName s a | s -> a
name :: HasName s a => Lens' s a
class HasSampleRate s a | s -> a
sampleRate :: HasSampleRate s a => Lens' s a
class HasType' s a | s -> a
type' :: HasType' s a => Lens' s a
class HasTags s a | s -> a
tags :: HasTags s a => Lens' s a
class HasTitle s a | s -> a
title :: HasTitle s a => Lens' s a
class HasText s a | s -> a
text :: HasText s a => Lens' s a
class HasDateHappened s a | s -> a
dateHappened :: HasDateHappened s a => Lens' s a
class HasHostname s a | s -> a
hostname :: HasHostname s a => Lens' s a
class HasAggregationKey s a | s -> a
aggregationKey :: HasAggregationKey s a => Lens' s a
class HasPriority s a | s -> a
priority :: HasPriority s a => Lens' s a
class HasSourceTypeName s a | s -> a
sourceTypeName :: HasSourceTypeName s a => Lens' s a
class HasAlertType s a | s -> a
alertType :: HasAlertType s a => Lens' s a
class HasHost s a | s -> a
host :: HasHost s a => Lens' s a
class HasPort s a | s -> a
port :: HasPort s a => Lens' s a
class HasStatus s a | s -> a
status :: HasStatus s a => Lens' s a
class HasMessage s a | s -> a
message :: HasMessage s a => Lens' s a

-- | Note that Dummy is not the only constructor, just the only publicly
--   available one.
data StatsClient

-- | Just drops all stats.
Dummy :: StatsClient
instance HasPort DogStatsSettings Int
instance HasHost DogStatsSettings HostName
instance ToStatsD ServiceCheck
instance ToStatsD Event
instance ToStatsD Metric
instance HasTags ServiceCheck [Tag]
instance HasStatus ServiceCheck ServiceCheckStatus
instance HasName ServiceCheck Text
instance HasMessage ServiceCheck (Maybe Text)
instance HasHostname ServiceCheck (Maybe Text)
instance HasDateHappened ServiceCheck (Maybe UTCTime)
instance Read ServiceCheckStatus
instance Show ServiceCheckStatus
instance Eq ServiceCheckStatus
instance Ord ServiceCheckStatus
instance Enum ServiceCheckStatus
instance HasTitle Event Text
instance HasText Event Text
instance HasTags Event [Tag]
instance HasSourceTypeName Event (Maybe Text)
instance HasPriority Event (Maybe Priority)
instance HasHostname Event (Maybe Text)
instance HasDateHappened Event (Maybe UTCTime)
instance HasAlertType Event (Maybe AlertType)
instance HasAggregationKey Event (Maybe Text)
instance HasType' Metric MetricType
instance HasTags Metric [Tag]
instance HasSampleRate Metric Double
instance HasName Metric MetricName
instance ToMetricValue Double
instance ToMetricValue Int
