-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A rake/thor-like task runner written in Haskell
--   
--   See documentation on the project homepage for more information
@package zoom
@version 0.1.0.1

module Zoom.Template
render :: (a -> t) -> t
zoom :: QuasiQuoter
zoomFile :: FilePath -> Q Exp

module Zoom.Task
data Args
Args :: String -> Args
data ZoomTask a
Task :: String -> ([Args] -> IO a) -> ZoomTask a
desc :: ZoomTask a -> String
fromTask :: ZoomTask a -> [Args] -> IO a
instance Typeable Args
instance Typeable1 ZoomTask
instance Show Args

module Zoom.Interpreter
ifM :: (Monad m, Monoid md) => m Bool -> md -> m md
ghcGetAvailableModules :: GhcMonad m => m [ModuleName]
getAvailableModules :: MonadInterpreter m => m [ModuleName]

-- | entry point for the standard zoom interpreter
interpreterMain :: [Args] -> Interpreter ()
filterTaskFuns :: [String] -> Interpreter [String]

-- | loads up modules located in the task subdirectory of the current
--   directory. note that this currently needs to be run before loading
--   global tasks.
loadLocalTaskModules :: Interpreter ()

-- | imports both local and global Zoom.Task.* modules. returns the
--   qualified module names of all Zoom.Task.* modules.
importZoomTasks :: Interpreter [ModuleName]
getFunctionsFromImports :: [ModuleName] -> Interpreter [(ModuleName, [String])]
runZoomInterpreter :: [Args] -> IO (Either InterpreterError ())
availableTasks :: [String] -> Interpreter [String]

module Zoom.Task.Demo
