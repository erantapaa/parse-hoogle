-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Regular expressions via symbolic manipulation
--   
--   Equality, containment, intersection among regular expressions via
--   symbolic manipulation
@package regexpr-symbolic
@version 0.4

module RegExpr.RegExprOperations
data RE a
Phi :: RE a
Empty :: RE a
L :: a -> RE a
Choice :: RE a -> RE a -> RE a
Seq :: RE a -> RE a -> RE a
Star :: RE a -> RE a
Var :: Int -> RE a
type Word a = [a]
resToRE :: [RE a] -> RE a
sigmaRE :: Eq a => RE a -> [a]
isEmpty :: RE a -> Bool
isPhi :: RE a -> Bool
deriv :: Eq a => RE a -> a -> RE a
partDeriv :: Eq a => RE a -> a -> [RE a]
type Env a = [((RE a, RE a), RE a)]
intersectREFAiled :: Eq a => RE a -> RE a -> RE a
intersectCFailed :: Eq a => Env a -> RE a -> RE a -> RE a
convert :: Int -> RE a -> RE a
convert2 :: Int -> RE a -> (RE a, RE a)
mentions :: Int -> RE a -> Bool
intersect :: Eq a => RE a -> RE a -> RE a
intersectC :: Eq a => Int -> Env a -> RE a -> RE a -> RE a
type EnvEq a = [(RE a, RE a)]
equality :: Eq a => RE a -> RE a -> Bool
eqREC :: Eq a => EnvEq a -> RE a -> RE a -> Bool
containsRECheap :: Eq a => RE a -> RE a -> Bool
contains :: Eq a => RE a -> RE a -> Bool
containsC :: Eq a => EnvEq a -> RE a -> RE a -> Bool
implies :: Bool -> Bool -> Bool
instance Eq a => Eq (RE a)
instance Show a => Show (RE a)
