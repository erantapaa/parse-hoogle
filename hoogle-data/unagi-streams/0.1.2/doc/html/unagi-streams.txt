-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Unagi Chan IO-Streams
--   
@package unagi-streams
@version 0.1.2

module System.IO.Streams.Concurrent.Unagi.Bounded

-- | Writes the contents of an input stream to a channel until the input
--   stream yields end-of-stream.
inputToChan :: InputStream a -> InChan (Maybe a) -> IO ()

-- | Turns an <a>OutChan</a> into an input stream.
chanToInput :: OutChan (Maybe a) -> IO (InputStream a)

-- | Turns an <a>InChan</a> into an output stream.
chanToOutput :: InChan (Maybe a) -> IO (OutputStream a)

-- | Create a new pair of streams using an underlying <tt>Chan</tt>.
--   Everything written to the <a>OutputStream</a> will appear as-is on the
--   <a>InputStream</a>.
--   
--   Since reading from the <a>InputStream</a> and writing to the
--   <a>OutputStream</a> are blocking calls, be sure to do so in different
--   threads.
makeChanPipe :: Int -> IO (InputStream a, OutputStream a)

-- | Create a new pair of streams form the given <tt>Chan</tt>. Everything
--   written to the <a>OutputStream</a> will appear as-is on the
--   <a>InputStream</a>.
--   
--   Since reading from the <a>InputStream</a> and writing to the
--   <a>OutputStream</a> are blocking calls, be sure to do so in different
--   threads.
chanToPipe :: (InChan (Maybe a), OutChan (Maybe a)) -> IO (InputStream a, OutputStream a)

-- | Create a new input stream duplicated from the <a>InChan</a>
dupStream :: InChan (Maybe a) -> IO (InputStream a)

module System.IO.Streams.Concurrent.Unagi

-- | Writes the contents of an input stream to a channel until the input
--   stream yields end-of-stream.
inputToChan :: InputStream a -> InChan (Maybe a) -> IO ()

-- | Turns an <a>OutChan</a> into an input stream.
chanToInput :: OutChan (Maybe a) -> IO (InputStream a)

-- | Turns an <a>InChan</a> into an output stream.
chanToOutput :: InChan (Maybe a) -> IO (OutputStream a)

-- | Create a new pair of streams using an underlying <tt>Chan</tt>.
--   Everything written to the <a>OutputStream</a> will appear as-is on the
--   <a>InputStream</a>.
--   
--   Since reading from the <a>InputStream</a> and writing to the
--   <a>OutputStream</a> are blocking calls, be sure to do so in different
--   threads.
makeChanPipe :: IO (InputStream a, OutputStream a)

-- | Create a new pair of streams form the given <tt>Chan</tt>. Everything
--   written to the <a>OutputStream</a> will appear as-is on the
--   <a>InputStream</a>.
--   
--   Since reading from the <a>InputStream</a> and writing to the
--   <a>OutputStream</a> are blocking calls, be sure to do so in different
--   threads.
chanToPipe :: (InChan (Maybe a), OutChan (Maybe a)) -> IO (InputStream a, OutputStream a)

-- | Create a new input stream duplicated from the <a>InChan</a>
dupStream :: InChan (Maybe a) -> IO (InputStream a)
