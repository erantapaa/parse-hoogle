-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Console line fuzzy search
--   
--   Console line fuzzy search as a library
@package wybor
@version 0.1.0

module Wybor

-- | Select an item from <a>Wybor</a> once
--   
--   The user can interrupt the process with <tt>C-d</tt> and then you get
--   <a>Nothing</a>. Exceptions result in <tt><a>Left</a> _</tt>
select :: Wybor a -> IO (Either TTYException (Maybe a))

-- | Continuously select items from <a>Wybor</a>
--   
--   Exceptions (see <a>TTYException</a>) aren't caught
selections :: MonadResource m => Wybor a -> Source m a

-- | The description of the alternative choices, see <a>HasWybor</a>
data Wybor a

-- | Construct <a>Wybor</a> from the nonempty list of key-value pairs
fromAssoc :: NonEmpty (Text, a) -> Wybor a

-- | Construct <a>Wybor</a> from the nonempty list of strings
--   
--   The strings are used both as keys and values
fromTexts :: NonEmpty Text -> Wybor Text

-- | Construct <a>Wybor</a> from the <a>IO</a> action that streams choices
--   
--   It's useful when the list of alternatives is populated over time from
--   multiple sources (for instance, from HTTP responses)
--   
--   The interface is tailored for the use with closeable queues from the
--   <a>stm-chans</a> package:
--   
--   <pre>
--   &gt;&gt;&gt; q &lt;- newTMQueueIO
--   
--   &gt;&gt;&gt; ... {- a bunch of threads populating and eventually closing the queue -}
--   
--   &gt;&gt;&gt; c &lt;- 'select' ('fromIO' (atomically (tryReadTMQueue q)))
--   
--   &gt;&gt;&gt; print c
--   </pre>
--   
--   That is, if the <a>IO</a> action returns <tt><a>Nothing</a></tt> the
--   queue will never be read from again and it can return <tt><a>Just</a>
--   <a>Nothing</a></tt> when there's nothing to add to the choices __yet__
--   
--   It's still possible to use non-fancy queues:
--   
--   <pre>
--   &gt;&gt;&gt; q &lt;- newTQueueIO
--   
--   &gt;&gt;&gt; ... {- a bunch of threads populating the queue -}
--   
--   &gt;&gt;&gt; c &lt;- 'select' ('fromIO' (fmap Just (atomically (tryReadTQueue q))))
--   
--   &gt;&gt;&gt; print c
--   </pre>
--   
--   If choices are static, you will be served better by <a>fromAssoc</a>
--   and <a>fromTexts</a>
fromIO :: IO (Maybe (Maybe (NonEmpty (Text, a)))) -> Wybor a

-- | A bunch of lenses to pick and configure Wybor
class HasWybor t a | t -> a where visible = wybor . conf . \ f x -> f (_visible x) <&> \ y -> x {_visible = y} height = wybor . conf . \ f x -> f (_height x) <&> \ y -> x {_height = y} initial = wybor . conf . \ f x -> f (_initial x) <&> \ y -> x {_initial = y} prefix = wybor . conf . \ f x -> f (_prefix x) <&> \ y -> x {_prefix = y} focused = wybor . conf . \ f x -> f (_focused x) <&> \ y -> x {_focused = y} normal = wybor . conf . \ f x -> f (_normal x) <&> \ y -> x {_normal = y}
wybor :: HasWybor t a => Lens' t (Wybor a)
visible :: HasWybor t a => Lens' t Int
height :: HasWybor t a => Lens' t Int
initial :: HasWybor t a => Lens' t Text
prefix :: HasWybor t a => Lens' t Text
focused :: HasWybor t a => Lens' t (Text -> Text)
normal :: HasWybor t a => Lens' t (Text -> Text)

-- | Exceptions thrown while manipulating <tt>/dev/tty</tt> device
newtype TTYException
TTYIOException :: IOException -> TTYException

-- | Sets all attributes off
reset :: Text

-- | Set bold font style
bold :: Text

-- | Set regular font style
regular :: Text

-- | Set underlining style
underlining :: Underlining -> Text

-- | Swap foreground and background colors
swap :: Text

-- | Unswap foreground and background colors
unswap :: Text

-- | Set foreground color
fgcolor :: ColorIntensity -> Color -> Text

-- | Set background color
bgcolor :: ColorIntensity -> Color -> Text

-- | ANSI text underlining
data Underlining :: *
SingleUnderline :: Underlining

-- | Not widely supported
DoubleUnderline :: Underlining
NoUnderline :: Underlining

-- | ANSI colors come in two intensities
data ColorIntensity :: *
Dull :: ColorIntensity
Vivid :: ColorIntensity

-- | ANSI colors: come in various intensities, which are controlled by
--   <a>ColorIntensity</a>
data Color :: *
Black :: Color
Red :: Color
Green :: Color
Yellow :: Color
Blue :: Color
Magenta :: Color
Cyan :: Color
White :: Color
instance Typeable1 Conf
instance Functor Wybor
instance Show a => Show (GenEvent a)
instance Eq a => Eq (GenEvent a)
instance Functor GenEvent
instance Show KeyEvent
instance Eq KeyEvent
instance (Show a, Show b) => Show (Query a b)
instance (Eq a, Eq b) => Eq (Query a b)
instance Functor Item
instance HasWybor (Wybor a) a
instance Functor Alternatives
