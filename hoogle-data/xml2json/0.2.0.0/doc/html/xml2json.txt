-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | translate xml to json
--   
--   translate xml to json
@package xml2json
@version 0.2.0.0

module Text.XML.ToJSON.Builder

-- | represent a XML element.
data Element
Element :: [(Text, Text)] -> [Text] -> [(Text, Element)] -> Element

-- | tag attributes.
elAttrs :: Element -> [(Text, Text)]

-- | text values.
elValues :: Element -> [Text]

-- | child elements.
elChildren :: Element -> [(Text, Element)]
emptyElement :: Element

-- | add a child element to an element
addChild' :: (Text, Element) -> Element -> Element

-- | add a text value to an element
addValue' :: Text -> Element -> Element

-- | add an attribute to an element
addAttr' :: (Text, Text) -> Element -> Element

-- | add multiple attributes to an element
addAttrs' :: [(Text, Text)] -> Element -> Element

-- | xml element stack with recent opened element at the top.
type Stack = [(Text, Element)]

-- | close current tag.
popStack :: Stack -> Stack

-- | close all unclosed tags and return the root element.
closeStack :: Stack -> Element

-- | <a>Builder</a> is a <a>State</a> monad to transform a <a>Stack</a>.
type Builder = State Stack ()

-- | exec the state monad and close the result stack.
runBuilder :: Builder -> Element

-- | open element
beginElement :: Text -> Builder

-- | close element
endElement :: Builder

-- | util to modify top element.
modifyTopElement :: (Element -> Element) -> Builder

-- | add child element to top element.
addChild :: (Text, Element) -> Builder

-- | add value to top element.
addValue :: Text -> Builder

-- | add attribute to top element.
addAttr :: (Text, Text) -> Builder

-- | add multiple attributes to top element.
addAttrs :: [(Text, Text)] -> Builder
instance Show Element

module Text.XML.ToJSON

-- | parse xml to haskell data type by using aeson's <a>FromJSON</a>.
parseXML :: (MonadThrow m, FromJSON a) => ByteString -> m a

-- | convert lazy xml <a>ByteString</a> to aeson <a>Value</a>.
xmlToJSON :: MonadThrow m => ByteString -> m Value
data JSONParseError

-- | Consume a source and convert the content to aeson <a>Value</a>, it try
--   to inspect xml encoding from first tag.
--   
--   e.g. <tt>bsSourceToJSON (C.sourceFile path_to_xml_file)</tt>
bsSourceToJSON :: MonadThrow m => Source m ByteString -> m Value

-- | Consume a source and convert the content to aeson <a>Value</a>, it try
--   to inspect xml encoding from first tag.
--   
--   e.g. <tt>xmlStreamToJSONResumable (requestBody req)</tt>
bsRSourceToJSON :: MonadThrow m => ResumableSource m ByteString -> m Value

-- | Convert tagstream-conduit <tt>Token</tt> to xml element <a>Builder</a>
tokenToBuilder :: Token -> Builder

-- | Convert xml <a>Element</a> to aeson <a>Value</a> .
--   
--   xml attributes and text values are converted to special object
--   attribute <tt>__attributes</tt> and <tt>__values</tt>.
elementToJSON :: Element -> Value

-- | Convert list of tagstream-conduit <tt>Token</tt> to aeson <a>Value</a>
tokensToJSON :: [Token] -> Value
instance Typeable JSONParseError
instance Show JSONParseError
instance Exception JSONParseError
