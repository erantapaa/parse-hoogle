-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for parsing/printing the text/directory mime type.
--   
--   A library for parsing/printing the text/directory mime type.
@package mime-directory
@version 0.5.1


-- | A variant of ByteString where strings differing in the case of some of
--   its characters are identified.
module Data.ByteString.Lazy.Char8.Caseless

-- | Wrapper for case insensitive strings.
data ByteString

-- | Project back to a regular bytestring.
sensitize :: ByteString -> ByteString

-- | Inject a bytestring into a case insensitive bytestring. Note that the
--   case of all letters in the ByteString is folded to lower case.
unsensitize :: ByteString -> ByteString
concat :: [ByteString] -> ByteString
intercalate :: ByteString -> [ByteString] -> ByteString
pack :: String -> ByteString
unpack :: ByteString -> String
instance Typeable ByteString
instance Eq ByteString
instance Ord ByteString
instance Show ByteString
instance Monoid ByteString
instance IsString ByteString
instance Data ByteString


-- | Library for parsing and generating the text/directory mime content
--   type. This library implements all the required mechanisms in RFC 2425,
--   which other libraries may use to implement parsing and generating
--   specific profiles, such as vCard.
module Codec.MIME.ContentType.Text.Directory

-- | A directory is a list of groups of semantically related entities.
--   These entities are grouped together in RFC 2425 using <tt>BEGIN ...
--   END</tt> pairs. Within a group properties are further grouped together
--   by the property types.
type Directory u = [Map Type [Property u]]
data Property u
Prop :: Type -> [Parameter] -> Value u -> Property u
prop_type :: Property u -> Type
prop_parameters :: Property u -> [Parameter]
prop_value :: Property u -> Value u
data Type
Type :: Maybe ByteString -> ByteString -> Type
type_group :: Type -> Maybe ByteString
type_name :: Type -> ByteString
data Parameter
Param :: ByteString -> [ByteString] -> Parameter
param_name :: Parameter -> ByteString
param_values :: Parameter -> [ByteString]

-- | This is sufficient to represent values whose specification is defined
--   in RFC 2425. Values with other specifications can be represented via
--   the <a>IANAValue</a> constructor.
data Value u
URI :: URI -> Value u
Text :: ByteString -> Value u
Date :: Day -> Value u
Time :: DiffTime -> Value u
DateTime :: UTCTime -> Value u
Integer :: Integer -> Value u
Boolean :: Bool -> Value u
Float :: Float -> Value u

-- | An IANA defined type not part of rfc2425
IANAValue :: u -> Value u

-- | Instantiate Value with this phantom type to indicate that property
--   types should be none other than those defined in rfc2425.
data Rfc2425Value
class PrintValue a
printValue :: PrintValue a => a -> ByteString

-- | The type of parsers for property values, for instance to read an
--   integer property, text property, etc.
type ValueParser u = (Type, [Parameter]) -> ByteString -> [Value u]

-- | Make a property type without any grouping.
nakedType :: ByteString -> Type

-- | Check whether the given property is an instance of the given type.
(@@) :: Property u -> ByteString -> Bool

-- | Find the parameter values for a given parameter name.
lookupParameter :: ByteString -> [Parameter] -> Maybe [ByteString]
decodeValue :: [Parameter] -> ByteString -> ByteString
encodeValue :: [Parameter] -> ByteString -> ByteString

-- | Escape any occurrence of the characters given as first argument with a
--   backslash. Newlines are always replaced by the two character sequence
--   <tt><a>\n</a></tt>. The backslash character is always escaped.
escape :: ByteString -> ByteString -> ByteString

-- | Produces a map where properties are grouped together using their type
--   as key.
parseDirectory :: ValueParser u -> ByteString -> Directory u

-- | An alternative version of <a>parseDirectory</a> that produces a list
--   of properties rather than a mapping from property types to properties.
--   Note that here properties in the list are in the same order as in the
--   input string.
parseDirectory' :: ValueParser u -> ByteString -> [Property u]

-- | Build a directory from a list of properties.
fromList :: [Property u] -> Directory u

-- | Group properties into blocks delimited by <tt>begin..end</tt> pairs.
groupByBeginEnd :: [Property u] -> [[Property u]]
pa_URI :: ValueParser u

-- | Unescape slashes, newlines and commas.
pa_text :: ValueParser u
pa_date :: ValueParser u
pa_time :: ValueParser u
pa_dateTime :: ValueParser u
pa_integer :: ValueParser u
pa_boolean :: ValueParser u
pa_float :: ValueParser u
pa_textList :: ValueParser u

-- | Take a parser for single values to a parser for a list of values. This
--   assumes that the separator between values is the <a>,</a> character,
--   and that values do not contain commas themselves.
many :: ValueParser u -> ValueParser u
printDirectory :: PrintValue u => Directory u -> ByteString
printDirectory' :: PrintValue u => [Property u] -> ByteString
printProperty :: PrintValue u => Property u -> ByteString
instance Eq u => Eq (Value u)
instance Show u => Show (Value u)
instance Show Parameter
instance Eq Type
instance Ord Type
instance Show Type
instance Show u => Show (Property u)
instance PrintValue Rfc2425Value
instance PrintValue u => PrintValue (Value u)
instance Monad P
instance Show Rfc2425Value
