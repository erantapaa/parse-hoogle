-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Client for the Kattis judge system.
--   
--   Unofficial CLI client for the Kattis online judge system (currently in
--   BETA).
--   
--   Written in a git-like fashion, it supports automatic downloading of
--   test cases, easy submissions, and more.
--   
--   Basically a problem is initialized as follows (creates a directory and
--   downloads any available test cases):
--   
--   <pre>
--   &gt; katt init hello
--   &gt; cd hello
--   </pre>
--   
--   Source files, problem names, and language identification is handled
--   automatically when submitting solutions:
--   
--   <pre>
--   &gt; vim hello.java
--   &gt; katt submit
--   Made submission 4712
--   Accepted: 1 of 1 test(s) passed
--   </pre>
--   
--   There is also built-in support for problem sessions, which initalizes
--   all problems in the problem list.
--   
--   Get started by downloading a <i>.kattisrc</i> config from the official
--   site, make sure you have the haskell platform installed, then run
--   <i>cabal install katt</i>.
--   
--   Please note that the beta release is limited to C, C++, Java, and
--   Haskell. It also only supports running on unix.
--   
--   Changes since last release:
--   
--   <ul>
--   <li>Support for Haskell submissions</li>
--   <li>HTTP client replaced with wreq</li>
--   <li>Improved code readability</li>
--   </ul>
@package katt
@version 0.2.0.3


-- | Contains shared type declarations and various utility functions.
module Utils.Katt.Utils

-- | Configuration layer consisting of configuration state.
type ConfigEnvInternal m = StateT ConfigState m

-- | Configuration layer wrapped with error handling.
type ConfigEnv m = EitherT ErrorDesc (ConfigEnvInternal m)

-- | Submissions consist of a problem identifier and a set of file paths.
type Submission = (KattisProblem, [FilePath])

-- | Error description alias.
type ErrorDesc = ByteString

-- | Submissions are identified with an integer id.
type SubmissionId = Integer

-- | Problem sessions are identified with an integer id.
type ProblemSession = Integer

-- | Project-specific state consists of the problem name.
type ProjectState = KattisProblem

-- | Global configuration, initialized from the <i>.kattisrc</i> file.
data ConfigState
ConfigState :: ByteString -> ByteString -> ByteString -> ByteString -> ByteString -> Maybe ProjectState -> ConfigState

-- | Username.
user :: ConfigState -> ByteString

-- | API token (hash).
apiKey :: ConfigState -> ByteString

-- | Host to be considered as service.
host :: ConfigState -> ByteString

-- | URL to login page, relative <a>host</a>.
loginPage :: ConfigState -> ByteString

-- | URL to submit page, relative <a>host</a>.
submitPage :: ConfigState -> ByteString

-- | Project-specific state, optionally loaded.
project :: ConfigState -> Maybe ProjectState

-- | HTTP client session and the host path.
type Session = (Session, ByteString)

-- | A Kattis problem.
data KattisProblem

-- | Problem ID, unique.
ProblemId :: Integer -> KattisProblem

-- | Associated name of the problem.
ProblemName :: ByteString -> KattisProblem

-- | Language used in submission.
data KattisLanguage

-- | C++.
LangCplusplus :: KattisLanguage

-- | Java.
LangJava :: KattisLanguage

-- | C.
LangC :: KattisLanguage

-- | Haskell.
LangHaskell :: KattisLanguage

-- | Server response indicating successful login.
loginSuccess :: ByteString

-- | Extension of input test files.
inputTestExtension :: FilePath

-- | Extension of reference ouput test files.
outputTestExtension :: FilePath

-- | Name of this program.
programName :: ByteString

-- | Relative path to project-specific configuration directory.
configDir :: ByteString

-- | Relative path to folder containing tests.
testFolder :: FilePath

-- | URL to page with problem information, relative to <a>host</a>.
problemAddress :: ByteString

-- | Lift some error monad one layer.
unWrapTrans :: (Monad m, MonadTrans t) => EitherT e m a -> EitherT e (t m) a

-- | Execute an IO action and catch any exceptions.
tryIO :: MonadIO m => IO a -> EitherT ErrorDesc m a

-- | Execute an IO action and catch any exceptions, tagged with
--   description.
tryIOMsg :: MonadIO m => ByteString -> IO a -> EitherT ErrorDesc m a

-- | Evaluate an error action and terminate process upon failure.
terminateOnFailure :: MonadIO m => ErrorDesc -> EitherT ErrorDesc m a -> m a

-- | Default HTTP options.
defaultOpts :: Options

-- | Retrieve a publicly available page, using HTTP GET.
retrievePublicPage :: ByteString -> ConfigEnv IO ByteString

-- | Retrieve a page requiring authentication, using HTTP GET.
retrievePrivatePage :: Session -> ByteString -> EitherT ErrorDesc IO ByteString

-- | Construct URL from host path (e.g. <i>http:\</i>/x.com/) and path
--   (e.g. <i></i>).
buildURL :: ByteString -> ByteString -> String

-- | Authenticate and run the provided action.
withAuth :: (Session -> EitherT ErrorDesc IO a) -> ConfigEnv IO a

-- | Retrieve problem ID of a Kattis problem.
retrieveProblemId :: KattisProblem -> IO Integer

-- | Retrieve problem name of a Kattis problem.
retrieveProblemName :: KattisProblem -> IO ByteString
instance Eq KattisProblem
instance Show KattisProblem
instance Show ConfigState
instance Eq KattisLanguage
instance Show KattisLanguage


-- | Provides searching of source code files and language identification.
--   
--   Language identification is required in order to detect any
--   inconsistencies (e.g. combining Java and C), and to tag submissions.
--   
--   Java also requires identifying which file provides the main method.
module Utils.Katt.SourceHandler

-- | Parse an argument list from the +file1 -file2 style into two lists of
--   file paths (included and ignored files).
parseFilter :: [String] -> Maybe ([FilePath], [FilePath])

-- | Locate all source files recursively from the current directory.
findFiles :: IO [FilePath]

-- | Determine source code language by studying file extensions. There is
--   an implicit priority ordering, since C is a subset of C++.
determineLanguage :: [FilePath] -> Maybe KattisLanguage

-- | Locate main class based on source file contents. C++ and C solutions
--   do not need to be specified, returns an empty string.
--   
--   In the Java case all souce code files are parsed. All occurences of a
--   <i>main</i> method defined with <i>public static void</i> are located.
--   
--   Will return <a>Nothing</a> if result is ambiguous.
findMainClass :: ([FilePath], KattisLanguage) -> IO (Maybe FilePath)

-- | Determine Kattis language string identifier.
languageKattisName :: KattisLanguage -> ByteString

-- | Determine content type of submission language.
languageContentType :: KattisLanguage -> ByteString


-- | Implements loading and saving of global and local configurations. All
--   configurations are stored in the <tt>ConfigFile</tt> format, which is
--   fully compatible with the official Kattis configuration file.
--   
--   The global configuration file corresponds to <i>kattisrc</i>, which
--   holds information regarding authentication and hosts.
--   
--   The local configuration holds project-specific information and is
--   created by the <tt>Init</tt> submodule. Currently only the problem
--   name is stored.
module Utils.Katt.Configuration

-- | Load global configuration file and parse the configuration state.
--   Ensures that all fields are present and validates the URLs.
loadGlobalConfig :: IO (Either ErrorDesc ConfigState)

-- | Check if a project-specific configuration file exists and can be read.
projectConfigExists :: IO Bool

-- | Load a project-specific configuration based on the current directory.
loadProjectConfig :: ConfigEnv IO ()

-- | Save a project-specific configuration file to disk.
saveProjectConfig :: ConfigEnv IO ()


-- | Init submodule providing initialization of problems and entire problem
--   sessions.
--   
--   Problems are initialized by creating a directory, configuration file,
--   and optionally downloading all test files available. Both zip-based
--   test data and embedded HTML tables are supported.
--   
--   Problem sessions are initialized by parsing the list of problems and
--   initializing each problem separately.
module Utils.Katt.Init

-- | Given a problem identifier, setup directory structures and optionally
--   download test cases.
initializeProblem :: Bool -> Bool -> KattisProblem -> ConfigEnv IO ()

-- | Given a problem session id, initialize all the corresponding problems.
initializeSession :: Bool -> ProblemSession -> ConfigEnv IO ()
instance Show TestParser


-- | Upload submodule providing submissions of solutions and parsing of
--   results.
--   
--   A submission is done by including all recursively found files and
--   filtering using a file filter given as an argument. This is followed
--   by polling for a submission result until some final submission state
--   has been reached (e.g. accepted).
--   
--   Currently multipart data upload is implemented since https-streams
--   (the HTTP client being used) does not support it (yet?).
module Utils.Katt.Upload

-- | Make a submission of the project in the working directory. Accepts a
--   list of filters on the form <i>+file1 -file2 ..</i>, which are taken
--   into account when locating all the source files. <i>+file</i> implies
--   adding the specified file. <i>-file</i> implies removing the specified
--   file.
--   
--   In addition to the filters, all recursively found source code files
--   will be included in the submission.
makeSubmission :: [String] -> ConfigEnv IO ()
instance Eq SubmissionState
instance Show SubmissionState
instance Eq TestCase
instance Show TestCase
