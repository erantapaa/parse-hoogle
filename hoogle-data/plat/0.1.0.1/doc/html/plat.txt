-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple templating library
--   
--   The long-standing cabal bug wouldn't let me to give a nice description
--   here; see <a>Plat</a> module.
@package plat
@version 0.1.0.1


-- | Plat is a template engine, and, as such, it is designed to help you
--   present your data as simple text with the markup of your choice.
--   
--   In order to use it, you'll have to do three things.
--   
--   <ul>
--   <li>Prepare your data;</li>
--   <li>Create a template to insert this data into; and</li>
--   <li>Render the template with this data.</li>
--   </ul>
--   
--   See the following sections for explanations and examples.
module Plat

-- | This is the type of contexts. The type 'a' here doesn't matter; it's
--   only present so that it would be possible to use the 'do' syntax.
data Context a

-- | An only <a>Context</a>-specific operator.
--   
--   '<tt>name =: value</tt>' tells render that '<tt>value</tt>' should be
--   substituted for '<tt>name</tt>' in a template.
(=:) :: ElementC a => String -> a -> Context ()

-- | This is a universal type for everything that can be assigned to a
--   field in the context. Normally you won't need this, and this type is
--   subject to change, so, it's internals are hidden. The only way to
--   create values of this type is to use the <a>ec</a> (or the <a>ecs</a>)
--   function. The only way to use them is to insert them into the
--   <a>Context</a> with the <a>=:</a> operator and then render into the
--   template.
--   
--   One possible use of this type is to create a heterogeneous array. If
--   you want an array in your context, containing, for example, both
--   strings and booleans, you can do it like that: '<tt>[ec "foo", ec
--   True]</tt>'.
data ContextElement

-- | This is the class of all types that can be used as values in the
--   context. You can create additional ones, although we strictly
--   discourage that.
class ElementC c where ecs = ListContext . map ec
ec :: ElementC c => c -> ContextElement
ecs :: ElementC c => [c] -> ContextElement

-- | This function is here for convenience only. If you have a list of
--   elements that can be inserted in the template, this function gives you
--   an array of records, one for each element of the original list, where
--   each record contains the corresponding element in it's 'item' field.
--   Additionally, it gives you boolean 'first' and 'last' fields, true for
--   the first and last elements of the list respectively, and the 'only'
--   field that is true if and only if the list contains just one element.
listValues :: ElementC a => [a] -> [Context ()]

-- | Before using the template, it should be compiled, so that compilation
--   would not happen each time the template is used. This is the type of
--   the compiled template. It's internals aren't exported, as they are
--   subject to change in future versions.
data Template

-- | This is a compilation function. It returns error message if the input
--   string has syntax errors.
templateE :: ByteString -> Either TemplateErr Template

-- | This function is provided for convenience only. It does the same as
--   the <a>templateE</a> function, except that instead of returning an
--   error message it just throws a run-time error with the textual
--   representation of that message.
template :: ByteString -> Template

-- | This is a type of error messages you get when you're trying to compile
--   a syntactically incorrect template. It's quite possible that you'll
--   want to pattern-match on it, so it's internals are completely exposed,
--   althoug it might change in future versions. Note that we also provide
--   a function <a>templateErr</a>, which allows you to display errors with
--   any formatting you like.
data TemplateErr

-- | There is a command which should follow a specific opening command,
--   like '@{' or '@[', but the latter could not be found.
--   
--   For example, if your template is '<tt>foo@|</tt>', then that's an
--   error you'll get, as '@|' command should be between '@{' and '@}'.
NoLeftTag :: TemplateErrRight -> Pos -> TemplateErr

-- | There is an opening command without a matching closing one.
NoRightTag :: TemplateErrLeft -> Pos -> TemplateErr

-- | There is an opening command and a closing command, and they should
--   match, but they don't.
--   
--   If, for example, you close a branching, started by '@{' command, with
--   '@]' command, you get this error.
--   
--   There are two positions in this error message; the first is the
--   position of the opening command, and the second is the position of the
--   closing one.
MismatchedTags :: TemplateErrLeft -> Pos -> TemplateErrRight -> Pos -> TemplateErr

-- | This is the part of an error message, which represents an erroneous
--   opening command.
data TemplateErrLeft

-- | There is an error with the '@{' command.
TryLeftTag :: TemplateErrLeft

-- | There is an error with the '@[' command.
LoopLeftTag :: TemplateErrLeft

-- | This is the part of an error message which represents an erroneous
--   command, which should follow some specific opening one.
data TemplateErrRight

-- | There is an error with the '@}' command.
TryRightTag :: TemplateErrRight

-- | There is an error with the '@|' command.
OrRightTag :: TemplateErrRight

-- | There is an error with the '@]' command.
LoopRightTag :: TemplateErrRight

-- | If you want to present your error to the user for some reason, you can
--   do this with Plat itself. You'll need to create a template, as only
--   you can know for sure how this error message should be rendered, but
--   the context is here. It gives you "left" (respectively "right") field
--   if there is the problem with the opening (respectively closing or
--   separating) command, which is also a record with "loop", "try" and
--   "or" boolean fields (the latter being absent in the "left" record)
--   whose values depend on the command in question, and a "pos" field
--   indicating the position of this command. It's possible to have both
--   "left" and "right" fields present, if there are an opening and closing
--   commands that don't match; obviously, in this case both "left" and
--   "right" fields would have there own "pos" subfields.
--   
--   The position(s) is presented using the <a>posContext</a> function.
templateErr :: TemplateErr -> Context ()

-- | This is the rendering functions. It substitutes values from the given
--   <a>Context</a> into the <a>Template</a>, returning result as
--   <a>ByteString</a> or indicating a failure.
render :: Template -> Context a -> Either RenderErr ByteString

-- | This type represents a rendering error. Note that we provide a
--   <a>renderErr</a> function which can be used if you want to present an
--   error to the user.
--   
--   This type internals are exposed for you to pattern-match on them,
--   although they can change in the future versions.
data RenderErr

-- | The expression evaluates to something of the wrong type.
--   
--   Here, first type is the actual one, while the second is the expected
--   one.
ErrorType :: ContextType -> ContextType -> Pos -> [ByteString] -> RenderErr

-- | The expression can't be evaluated, since there is no field with the
--   given name in the record.
ErrorField :: ContextType -> Pos -> [ByteString] -> RenderErr

-- | There are several options in the template, but all of them failed for
--   some reason.
--   
--   Error messages for all options are listed here.
ErrorOption :: (Pos, Pos) -> [RenderErr] -> RenderErr

-- | Template asks to check for some boolean expression, which happened to
--   be false.
ErrorCheck :: Pos -> [ByteString] -> RenderErr

-- | This is an auxiliary type, which indicates what is the type we
--   expected, or what is the actual type we've got.
data ContextType
CtxString :: ContextType
CtxBool :: ContextType
CtxRecord :: ContextType
CtxArray :: ContextType

-- | This function is similar to <tt>templateErr</tt>. It allows you to
--   show the rendering error to the user. The context it generates always
--   has a value named "<tt>pos</tt>", indicating the position where an
--   error occured; if multiple branches failed, there is also a value
--   "endpos", which indicates the position where the list of branches
--   ends. Positions are presented with the <a>posContext</a> function.
--   
--   Other field depend on the error. For a type mismatch, there are values
--   "expected" and "actual", which are the strings 'string', 'boolean',
--   'array' or 'record', depending on what type the value should have and
--   what type it actually has; there is also the "expr" field, which
--   presents the list of names in the failing expression with the function
--   <a>listValues</a>.
--   
--   If the required field wasn't found in the record, then there is the
--   value "field", which is a list of names in the failing expression, and
--   the value "type", which shows what type that expression should have.
--   
--   If there were multiple branches, all of them failing, then, apart from
--   "pos" and "endpos" fields, there is a list of errors, one for each of
--   the branches. These errors are presented using the <a>renderErr</a>
--   function recursively.
--   
--   Finally, if the boolean value was checked and happened to be false,
--   there would be the field "check", which, again, is a list of names in
--   the expression, which evaluated to false.
renderErr :: RenderErr -> Context ()
type CharNumber = Int
type LineNumber = Int

-- | This type indicates some position in the template.
type Pos = (LineNumber, CharNumber)

-- | This function is used by Plat to display the position. It gives you
--   the record with two fields, "line" and "column", indicating the line
--   number and the column number respectively.
posContext :: Pos -> Context ()
