-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wai error catching middleware
--   
--   Error handling middleware for <a>Wai</a>.
@package wai-middleware-catch
@version 0.3.6


-- | Exception handling for <tt>Wai</tt> and <tt>Warp</tt>.
--   
--   By default <tt>Warp</tt> not handles exceptions well. It just log them
--   to console. This package - an attempt to solve the problem.
--   
--   The only drawback stems from the basic advantages of Haskell -
--   laziness. All errors within <tt>Wai</tt> <tt>ResponseBuilder</tt> will
--   not be caught. Thus, the following code will not work:
--   
--   <pre>
--   ... return $ responseLBS undefined ...
--   </pre>
--   
--   To ensure catch all errors, you need to consume all data <i>before</i>
--   feeding the builder.
module Network.Wai.Middleware.Catch

-- | Protect <a>Middleware</a> chain from exceptions. This acts like
--   <a>catches</a>, but uses own handler type for simplicity.
--   
--   If an exception is not handled, it is thrown further. To handle this
--   use <a>protect'</a>.
protect :: [ResponseHandler] -> Middleware

-- | "Harden" version of protect.
protect' :: Exception e => [ResponseHandler] -> (e -> Application) -> Middleware

-- | Handler wrapper. For polymorphic exceptions. If an exception is not
--   handled, it is thrown to default handler.
--   
--   <pre>
--   protect' [...] defHandler
--   </pre>
data ResponseHandler
ResponseHandler :: (e -> Application) -> ResponseHandler

-- | Helper for make <tt>RequestHandler</tt>
--   
--   <pre>
--   protect [mkHandler myHandler] $ ...
--   </pre>
mkHandler :: Exception e => (e -> Application) -> ResponseHandler

-- | Default handler.
defHandler :: SomeException -> Application
