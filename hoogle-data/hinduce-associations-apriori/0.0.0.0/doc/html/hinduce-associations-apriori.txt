-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Apriori algorithm for association rule mining
--   
--   This module provides an implementation of the Apriori algorithm for
--   association rule mining. It uses Control.Parallel.Strategies for
--   parallelism and allows the user to provide custom selection criteria.
--   See hinduce-examples for an example. hInduce is a framework for
--   knowledge discovery<i>machine learning</i>data mining. It has a
--   modular design that hopefully will invite others to re-use and build
--   upon the interface. This module currently deviates from this concept,
--   because we had a different focus and too limited time budget to
--   investigate other rule mining algorithms and find any use for this
--   kind of abstraction.
@package hinduce-associations-apriori
@version 0.0.0.0

module Data.HInduce.Associations.Apriori
type Transaction a = Set a
type Items a = Set a
class (Ord a, NFData a) => Item a

-- | Given transactions on items, derive rules for items
rules :: (Item a, Foldable container) => container (Transaction a) -> Items a -> (Map (Items a) Int -> Map (Items a) Int) -> Map (Items a, Items a) Double

-- | Load a dataset from a file, where each line represents one transaction
loadDataSet :: String -> IO [Transaction Int]
top :: Item a => ([(Items a, Int)] -> [(Items a, Int)]) -> Map (Items a) Int -> Map (Items a) Int
test :: IO [((Items Int, Items Int), Double)]
instance Item Int
