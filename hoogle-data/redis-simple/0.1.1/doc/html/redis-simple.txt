-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple redis bindings for Haskell
--   
--   This package is meant to simplify usage of redis in Haskell. It is
--   built on the full-blown <tt>redis</tt> package and, in fact, does
--   nothing more than providing an easier interface to a small subset of
--   it's functions.
@package redis-simple
@version 0.1.1


-- | This module is meant to make working with redis in Haskell more
--   simple. It is a small layer above the full-blown <tt>redis</tt>
--   package.
--   
--   It only supports a small subset of the redis features.
module Database.Redis.Simple

-- | Type for a key in the key-value store
newtype Key
Key :: ByteString -> Key
unKey :: Key -> ByteString

-- | Gets an item from the database
itemGet :: Binary a => Redis -> Key -> IO (Maybe a)

-- | Checks if an item with a given key exists
itemExists :: Redis -> Key -> IO Bool

-- | Set an item in the database
itemSet :: Binary a => Redis -> Key -> a -> IO ()

-- | Delete an item in the database
itemDelete :: Redis -> Key -> IO ()

-- | Add an item to a redis set
setAdd :: Binary a => Redis -> Key -> a -> IO ()

-- | Remove an item from a redis set
setRemove :: Binary a => Redis -> Key -> a -> IO ()

-- | Check if a set contains a certain item
setContains :: Binary a => Redis -> Key -> a -> IO Bool

-- | Get all items from a set
setFindAll :: Binary a => Redis -> Key -> IO [a]
instance Show Key
instance Eq Key
instance Ord Key
instance IsString Key
instance Monoid Key
instance Binary Key
