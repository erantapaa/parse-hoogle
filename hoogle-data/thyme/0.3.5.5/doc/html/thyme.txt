-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A faster time library
--   
@package thyme
@version 0.3.5.5


-- | FOR INTERNAL USE ONLY.
module Data.Thyme.Internal.Micro
newtype Micro
Micro :: Int64 -> Micro
microQuotRem :: Micro -> Micro -> (Int64, Micro)
microDivMod :: Micro -> Micro -> (Int64, Micro)
instance HasBasis Micro
instance VectorSpace Micro
instance AdditiveGroup Micro
instance Read Micro
instance Show Micro
instance Vector Vector Micro
instance MVector MVector Micro
instance Unbox Micro
instance Typeable Micro
instance Eq Micro
instance Ord Micro
instance Data Micro
instance Generic Micro
instance Enum Micro
instance Ix Micro
instance NFData Micro
instance Bounded Micro
instance Random Micro
instance Arbitrary Micro
instance CoArbitrary Micro
instance Datatype D1Micro
instance Constructor C1_0Micro

module Data.Thyme.Clock.POSIX

-- | The nominal length of a POSIX day: precisely 86400 SI seconds.
posixDayLength :: NominalDiffTime
type POSIXTime = NominalDiffTime
posixTime :: Iso' UTCTime POSIXTime
getPOSIXTime :: IO POSIXTime

module Data.Thyme.Format.Human

-- | Display <a>DiffTime</a> or <a>NominalDiffTime</a> in a human-readable
--   form.
humanTimeDiff :: TimeDiff d => d -> String

-- | Display <a>DiffTime</a> or <a>NominalDiffTime</a> in a human-readable
--   form.
humanTimeDiffs :: TimeDiff d => d -> ShowS

-- | Display one <a>UTCTime</a> relative to another, in a human-readable
--   form.
humanRelTime :: UTCTime -> UTCTime -> String

-- | Display one <a>UTCTime</a> relative to another, in a human-readable
--   form.
humanRelTimes :: UTCTime -> UTCTime -> ShowS


-- | Julian or Gregorian.
module Data.Thyme.Calendar.MonthDay
type Month = Int
type DayOfMonth = Int
data MonthDay
MonthDay :: {-# UNPACK #-} !Month -> {-# UNPACK #-} !DayOfMonth -> MonthDay
mdMonth :: MonthDay -> {-# UNPACK #-} !Month
mdDay :: MonthDay -> {-# UNPACK #-} !DayOfMonth

-- | Convert between day of year in the Gregorian or Julian calendars, and
--   month and day of month. First arg is leap year flag.
monthDay :: Bool -> Iso' DayOfYear MonthDay
monthDayValid :: Bool -> MonthDay -> Maybe DayOfYear
monthLength :: Bool -> Month -> Days
_mdMonth :: Lens' MonthDay Month
_mdDay :: Lens' MonthDay DayOfMonth


-- | Types and functions for <a>UTC</a> and <a>UT1</a>.
--   
--   If you don't care about leap seconds, keep to <a>UTCTime</a> and
--   <a>NominalDiffTime</a> for your clock calculations, and you'll be
--   fine.
--   
--   <a>Num</a>, <a>Real</a>, <a>Fractional</a> and <a>RealFrac</a>
--   instances for <a>DiffTime</a> and <a>NominalDiffTime</a> are only
--   available by importing <a>Data.Thyme.Time</a>. In their stead are
--   instances of <a>AdditiveGroup</a>, <a>HasBasis</a> and
--   <a>VectorSpace</a>, with <tt><a>Scalar</a> <a>DiffTime</a> ≡
--   <a>Scalar</a> <a>NominalDiffTime</a> ≡ <a>Rational</a></tt>.
--   
--   Using <a>fromSeconds</a> and <a>toSeconds</a> to convert between
--   <a>TimeDiff</a>s and other numeric types. If you really must coerce
--   between <a>DiffTime</a> and <a>NominalDiffTime</a>, <tt><a>view</a>
--   (<a>microseconds</a> . <a>from</a> <a>microseconds</a>)</tt>.
--   
--   <a>UTCTime</a> is an instance of <a>AffineSpace</a>, with
--   <tt><a>Diff</a> <a>UTCTime</a> ≡ <a>NominalDiffTime</a></tt>.
--   
--   <a>UTCTime</a> is not Y294K-compliant. Please file a bug report on
--   GitHub when this becomes a problem.
module Data.Thyme.Clock

-- | The principal form of universal time, namely <a>UT1</a>.
--   
--   <a>UniversalTime</a> is defined by the rotation of the Earth around
--   its axis relative to the Sun. Thus the length of a day by this
--   definition varies from one to the next, and is never exactly 86400 SI
--   seconds unlike <a>TAI</a> or <tt>AbsoluteTime</tt>. The difference
--   between UT1 and UTC is <a>DUT1</a>.
data UniversalTime

-- | View <a>UniversalTime</a> as a fractional number of days since the
--   <a>Modified Julian Date epoch</a>.
modJulianDate :: Iso' UniversalTime Rational

-- | An absolute time interval as measured by a clock.
--   
--   <a>DiffTime</a> forms an <a>AdditiveGroup</a>―so can be added using
--   <a>^+^</a> (or <a>^-^</a> for subtraction), and also an instance of
--   <a>VectorSpace</a>―so can be scaled using <a>*^</a>, where
--   
--   <pre>
--   type <a>Scalar</a> <a>DiffTime</a> = <a>Rational</a>
--   </pre>
data DiffTime

-- | <a>Coördinated universal time</a>: the most common form of universal
--   time for civil timekeeping. It is synchronised with
--   <tt>AbsoluteTime</tt> and both tick in increments of SI seconds, but
--   UTC includes occasional leap-seconds so that it does not drift too far
--   from <a>UniversalTime</a>.
--   
--   <a>UTCTime</a> is an instance of <a>AffineSpace</a>, with
--   
--   <pre>
--   type <a>Diff</a> <a>UTCTime</a> = <a>NominalDiffTime</a>
--   </pre>
--   
--   Use <a>.+^</a> to add (or <a>.-^</a> to subtract) time intervals of
--   type <a>NominalDiffTime</a>, and <a>.-.</a> to get the interval
--   between <a>UTCTime</a>s.
--   
--   <ul>
--   <li><i><tt>Performance</tt></i> Internally this is a 64-bit count of
--   <a>microseconds</a> since the MJD epoch, so <a>.+^</a>, <a>.-^</a> and
--   <a>.-.</a> ought to be fairly fast.</li>
--   <li><i><tt>Issues</tt></i> <a>UTCTime</a> currently <a>cannot
--   represent leap seconds</a>.</li>
--   </ul>
data UTCTime

-- | Unpacked <a>UTCTime</a>, partly for compatibility with <tt>time</tt>.
data UTCView
UTCTime :: {-# UNPACK #-} !Day -> {-# UNPACK #-} !DiffTime -> UTCView
utctDay :: UTCView -> {-# UNPACK #-} !Day
utctDayTime :: UTCView -> {-# UNPACK #-} !DiffTime

-- | View <a>UTCTime</a> as an <a>UTCView</a>, comprising a <a>Day</a>
--   along with a <a>DiffTime</a> offset since midnight.
--   
--   This is an improper lens: <a>utctDayTime</a> offsets outside the range
--   of <tt>[<a>zeroV</a>, <a>posixDayLength</a>)</tt> will carry over into
--   the day part, with the expected behaviour.
utcTime :: Iso' UTCTime UTCView

-- | A time interval as measured by UTC, that does not take leap-seconds
--   into account.
--   
--   For instance, the difference between <tt>23:59:59</tt> and
--   <tt>00:00:01</tt> on the following day is always 2 seconds of
--   <a>NominalDiffTime</a>, regardless of whether a leap-second took
--   place.
--   
--   <a>NominalDiffTime</a> forms an <a>AdditiveGroup</a>―so can be added
--   using <a>^+^</a> (or <a>^-^</a> for subtraction), and also an instance
--   of <a>VectorSpace</a>―so can be scaled using <a>*^</a>, where
--   
--   <pre>
--   type <a>Scalar</a> <a>NominalDiffTime</a> = <a>Rational</a>
--   </pre>
data NominalDiffTime

-- | Get the current UTC time from the system clock.
getCurrentTime :: IO UTCTime

-- | Time intervals, encompassing both <a>DiffTime</a> and
--   <a>NominalDiffTime</a>.
--   
--   <ul>
--   <li><i><tt>Issues</tt></i> Still affected by
--   <a>http://hackage.haskell.org/trac/ghc/ticket/7611</a>?</li>
--   </ul>
class (HasBasis t, Basis t ~ (), Scalar t ~ Rational) => TimeDiff t
microseconds :: TimeDiff t => Iso' t Int64

-- | Convert a time interval to some <a>Fractional</a> type.
toSeconds :: (TimeDiff t, Fractional n) => t -> n

-- | Make a time interval from some <a>Real</a> type.
--   
--   <ul>
--   <li><i><tt>Performance</tt></i> Try to make sure <tt>n</tt> is one of
--   <a>Float</a>, <a>Double</a>, <a>Int</a>, <a>Int64</a> or
--   <a>Integer</a>, for which rewrite <tt>RULES</tt> have been
--   provided.</li>
--   </ul>
fromSeconds :: (Real n, TimeDiff t) => n -> t

-- | Type-restricted <a>toSeconds</a> to avoid constraint-defaulting
--   warnings.
toSeconds' :: TimeDiff t => t -> Rational

-- | Type-restricted <a>fromSeconds</a> to avoid constraint-defaulting
--   warnings.
fromSeconds' :: TimeDiff t => Rational -> t

-- | <a>Lens'</a> for the <a>Day</a> component of an <a>UTCTime</a>.
_utctDay :: Lens' UTCTime Day

-- | <a>Lens'</a> for the time-of-day component of an <a>UTCTime</a>.
_utctDayTime :: Lens' UTCTime DiffTime


-- | <a>UTCTime</a> is not Y294K-compliant, and <a>Bounded</a> instances
--   for the various calendar types reflect this fact. That said, the
--   calendar calculations by themselves work perfectly fine for a wider
--   range of dates, subject to the size of <a>Int</a> for your platform.
module Data.Thyme.Calendar
type Years = Int
type Months = Int
type Days = Int

-- | The Modified Julian Day is a standard count of days, with zero being
--   the day 1858-11-17.
newtype Day
ModifiedJulianDay :: Int -> Day
toModifiedJulianDay :: Day -> Int
modifiedJulianDay :: Iso' Day Int
type Year = Int
type Month = Int
type DayOfMonth = Int
data YearMonthDay
YearMonthDay :: {-# UNPACK #-} !Year -> {-# UNPACK #-} !Month -> {-# UNPACK #-} !DayOfMonth -> YearMonthDay
ymdYear :: YearMonthDay -> {-# UNPACK #-} !Year
ymdMonth :: YearMonthDay -> {-# UNPACK #-} !Month
ymdDay :: YearMonthDay -> {-# UNPACK #-} !DayOfMonth

-- | Gregorian leap year?
isLeapYear :: Year -> Bool
yearMonthDay :: Iso' OrdinalDate YearMonthDay
gregorian :: Iso' Day YearMonthDay
gregorianValid :: YearMonthDay -> Maybe Day
showGregorian :: Day -> String
gregorianMonthLength :: Year -> Month -> Days
gregorianMonthsClip :: Months -> YearMonthDay -> YearMonthDay
gregorianMonthsRollover :: Months -> YearMonthDay -> YearMonthDay
gregorianYearsClip :: Years -> YearMonthDay -> YearMonthDay
gregorianYearsRollover :: Years -> YearMonthDay -> YearMonthDay
_ymdYear :: Lens' YearMonthDay Year
_ymdMonth :: Lens' YearMonthDay Month
_ymdDay :: Lens' YearMonthDay DayOfMonth
instance CoArbitrary YearMonthDay
instance Arbitrary YearMonthDay
instance Arbitrary Day
instance Random YearMonthDay
instance Random Day
instance Bounded YearMonthDay
instance Bounded Day

module Data.Thyme.LocalTime
type Minutes = Int
type Hours = Int
data TimeZone
TimeZone :: {-# UNPACK #-} !Minutes -> !Bool -> String -> TimeZone
timeZoneMinutes :: TimeZone -> {-# UNPACK #-} !Minutes
timeZoneSummerOnly :: TimeZone -> !Bool
timeZoneName :: TimeZone -> String

-- | Text representing the offset of this timezone, e.g. "-0800" or "+0400"
--   (like %z in <tt>formatTime</tt>)
timeZoneOffsetString :: TimeZone -> String

-- | Create a nameless non-summer timezone for this number of minutes
minutesToTimeZone :: Minutes -> TimeZone

-- | Create a nameless non-summer timezone for this number of hours
hoursToTimeZone :: Hours -> TimeZone
utc :: TimeZone
getTimeZone :: UTCTime -> IO TimeZone
getCurrentTimeZone :: IO TimeZone
type Hour = Int
type Minute = Int
data TimeOfDay
TimeOfDay :: {-# UNPACK #-} !Hour -> {-# UNPACK #-} !Minute -> {-# UNPACK #-} !DiffTime -> TimeOfDay
todHour :: TimeOfDay -> {-# UNPACK #-} !Hour
todMin :: TimeOfDay -> {-# UNPACK #-} !Minute
todSec :: TimeOfDay -> {-# UNPACK #-} !DiffTime
minuteLength :: Hour -> Minute -> DiffTime

-- | Hour zero
midnight :: TimeOfDay

-- | Hour twelve
midday :: TimeOfDay
makeTimeOfDayValid :: Hour -> Minute -> DiffTime -> Maybe TimeOfDay
timeOfDay :: Iso' DiffTime TimeOfDay

-- | Add some minutes to a <a>TimeOfDay</a>; result comes with a day
--   adjustment.
addMinutes :: Minutes -> TimeOfDay -> (Days, TimeOfDay)
dayFraction :: Iso' TimeOfDay Rational
data LocalTime
LocalTime :: {-# UNPACK #-} !Day -> {-# UNPACK #-} !TimeOfDay -> LocalTime
localDay :: LocalTime -> {-# UNPACK #-} !Day
localTimeOfDay :: LocalTime -> {-# UNPACK #-} !TimeOfDay
utcLocalTime :: TimeZone -> Iso' UTCTime LocalTime
ut1LocalTime :: Rational -> Iso' UniversalTime LocalTime
data ZonedTime
ZonedTime :: {-# UNPACK #-} !LocalTime -> !TimeZone -> ZonedTime
zonedTimeToLocalTime :: ZonedTime -> {-# UNPACK #-} !LocalTime
zonedTimeZone :: ZonedTime -> !TimeZone
zonedTime :: Iso' (TimeZone, UTCTime) ZonedTime
getZonedTime :: IO ZonedTime
utcToLocalZonedTime :: UTCTime -> IO ZonedTime
_timeZoneMinutes :: Lens' TimeZone Minutes
_timeZoneSummerOnly :: Lens' TimeZone Bool
_timeZoneName :: Lens' TimeZone String
_todHour :: Lens' TimeOfDay Hour
_todMin :: Lens' TimeOfDay Minute
_todSec :: Lens' TimeOfDay DiffTime
_localDay :: Lens' LocalTime Day
_localTimeOfDay :: Lens' LocalTime TimeOfDay
_zonedTimeToLocalTime :: Lens' ZonedTime LocalTime
_zonedTimeZone :: Lens' ZonedTime TimeZone
instance Typeable ZonedTime
instance Eq ZonedTime
instance Ord ZonedTime
instance Data ZonedTime
instance Generic ZonedTime
instance Datatype D1ZonedTime
instance Constructor C1_0ZonedTime
instance Selector S1_0_0ZonedTime
instance Selector S1_0_1ZonedTime
instance Show UTCTime
instance Show ZonedTime
instance CoArbitrary ZonedTime
instance Arbitrary ZonedTime
instance Random ZonedTime
instance Bounded ZonedTime
instance NFData ZonedTime
instance CoArbitrary LocalTime
instance Arbitrary LocalTime
instance Random LocalTime
instance Bounded LocalTime
instance Show LocalTime
instance NFData LocalTime
instance Vector Vector LocalTime
instance MVector MVector LocalTime
instance Unbox LocalTime
instance Typeable LocalTime
instance Eq LocalTime
instance Ord LocalTime
instance Data LocalTime
instance Generic LocalTime
instance Datatype D1LocalTime
instance Constructor C1_0LocalTime
instance Selector S1_0_0LocalTime
instance Selector S1_0_1LocalTime
instance CoArbitrary TimeOfDay
instance Arbitrary TimeOfDay
instance Random TimeOfDay
instance Bounded TimeOfDay
instance Show TimeOfDay
instance NFData TimeOfDay
instance Vector Vector TimeOfDay
instance MVector MVector TimeOfDay
instance Unbox TimeOfDay
instance Typeable TimeZone
instance Typeable TimeOfDay
instance Eq TimeZone
instance Ord TimeZone
instance Data TimeZone
instance Generic TimeZone
instance Eq TimeOfDay
instance Ord TimeOfDay
instance Data TimeOfDay
instance Generic TimeOfDay
instance Datatype D1TimeZone
instance Constructor C1_0TimeZone
instance Selector S1_0_0TimeZone
instance Selector S1_0_1TimeZone
instance Selector S1_0_2TimeZone
instance Datatype D1TimeOfDay
instance Constructor C1_0TimeOfDay
instance Selector S1_0_0TimeOfDay
instance Selector S1_0_1TimeOfDay
instance Selector S1_0_2TimeOfDay
instance CoArbitrary TimeZone
instance Arbitrary TimeZone
instance Random TimeZone
instance Bounded TimeZone
instance Show TimeZone
instance NFData TimeZone


-- | ISO 8601 Ordinal Date format
module Data.Thyme.Calendar.OrdinalDate
type Year = Int

-- | Gregorian leap year?
isLeapYear :: Year -> Bool
type DayOfYear = Int
data OrdinalDate
OrdinalDate :: {-# UNPACK #-} !Year -> {-# UNPACK #-} !DayOfYear -> OrdinalDate
odYear :: OrdinalDate -> {-# UNPACK #-} !Year
odDay :: OrdinalDate -> {-# UNPACK #-} !DayOfYear
ordinalDate :: Iso' Day OrdinalDate
ordinalDateValid :: OrdinalDate -> Maybe Day
_odYear :: Lens' OrdinalDate Year
_odDay :: Lens' OrdinalDate DayOfYear
instance CoArbitrary OrdinalDate
instance Arbitrary OrdinalDate
instance Random OrdinalDate
instance Bounded OrdinalDate


-- | Various Week Date formats
module Data.Thyme.Calendar.WeekDate
type Year = Int
type WeekOfYear = Int
type DayOfWeek = Int

-- | Weeks numbered 01 to 53, where week 01 is the first week that has at
--   least 4 days in the new year. Days before week 01 are considered to
--   belong to the previous year.
data WeekDate
WeekDate :: {-# UNPACK #-} !Year -> {-# UNPACK #-} !WeekOfYear -> {-# UNPACK #-} !DayOfWeek -> WeekDate
wdYear :: WeekDate -> {-# UNPACK #-} !Year
wdWeek :: WeekDate -> {-# UNPACK #-} !WeekOfYear
wdDay :: WeekDate -> {-# UNPACK #-} !DayOfWeek
weekDate :: Iso' Day WeekDate
weekDateValid :: WeekDate -> Maybe Day
showWeekDate :: Day -> String

-- | Weeks numbered from 0 to 53, starting with the first Sunday of the
--   year as the first day of week 1. The last week of a given year and
--   week 0 of the next both refer to the same week, but not all
--   <a>DayOfWeek</a> are valid. <a>Year</a> coincides with that of
--   <a>gregorian</a>.
data SundayWeek
SundayWeek :: {-# UNPACK #-} !Year -> {-# UNPACK #-} !WeekOfYear -> {-# UNPACK #-} !DayOfWeek -> SundayWeek
swYear :: SundayWeek -> {-# UNPACK #-} !Year
swWeek :: SundayWeek -> {-# UNPACK #-} !WeekOfYear
swDay :: SundayWeek -> {-# UNPACK #-} !DayOfWeek
sundayWeek :: Iso' Day SundayWeek
sundayWeekValid :: SundayWeek -> Maybe Day

-- | Weeks numbered from 0 to 53, starting with the first Monday of the
--   year as the first day of week 1. The last week of a given year and
--   week 0 of the next both refer to the same week, but not all
--   <a>DayOfWeek</a> are valid. <a>Year</a> coincides with that of
--   <a>gregorian</a>.
data MondayWeek
MondayWeek :: {-# UNPACK #-} !Year -> {-# UNPACK #-} !WeekOfYear -> {-# UNPACK #-} !DayOfWeek -> MondayWeek
mwYear :: MondayWeek -> {-# UNPACK #-} !Year
mwWeek :: MondayWeek -> {-# UNPACK #-} !WeekOfYear
mwDay :: MondayWeek -> {-# UNPACK #-} !DayOfWeek
mondayWeek :: Iso' Day MondayWeek
mondayWeekValid :: MondayWeek -> Maybe Day
_wdYear :: Lens' WeekDate Year
_wdWeek :: Lens' WeekDate WeekOfYear
_wdDay :: Lens' WeekDate DayOfWeek
_swYear :: Lens' SundayWeek Year
_swWeek :: Lens' SundayWeek WeekOfYear
_swDay :: Lens' SundayWeek DayOfWeek
_mwYear :: Lens' MondayWeek Year
_mwWeek :: Lens' MondayWeek WeekOfYear
_mwDay :: Lens' MondayWeek DayOfWeek
instance CoArbitrary MondayWeek
instance CoArbitrary SundayWeek
instance CoArbitrary WeekDate
instance Arbitrary MondayWeek
instance Arbitrary SundayWeek
instance Arbitrary WeekDate
instance Random MondayWeek
instance Random SundayWeek
instance Random WeekDate
instance Bounded MondayWeek
instance Bounded SundayWeek
instance Bounded WeekDate

module Data.Thyme.Calendar.WeekdayOfMonth
type Year = Int
type Month = Int
type DayOfWeek = Int
data WeekdayOfMonth
WeekdayOfMonth :: {-# UNPACK #-} !Year -> {-# UNPACK #-} !Month -> {-# UNPACK #-} !Int -> {-# UNPACK #-} !DayOfWeek -> WeekdayOfMonth
womYear :: WeekdayOfMonth -> {-# UNPACK #-} !Year
womMonth :: WeekdayOfMonth -> {-# UNPACK #-} !Month

-- | ±1–5, negative means n-th last
womNth :: WeekdayOfMonth -> {-# UNPACK #-} !Int
womDayOfWeek :: WeekdayOfMonth -> {-# UNPACK #-} !DayOfWeek
weekdayOfMonth :: Iso' Day WeekdayOfMonth
weekdayOfMonthValid :: WeekdayOfMonth -> Maybe Day
_womYear :: Lens' WeekdayOfMonth Year
_womMonth :: Lens' WeekdayOfMonth Month
_womNth :: Lens' WeekdayOfMonth Int
_womDayOfWeek :: Lens' WeekdayOfMonth DayOfWeek
instance CoArbitrary WeekdayOfMonth
instance Arbitrary WeekdayOfMonth
instance Random WeekdayOfMonth
instance Bounded WeekdayOfMonth
instance NFData WeekdayOfMonth
instance Vector Vector WeekdayOfMonth
instance MVector MVector WeekdayOfMonth
instance Unbox WeekdayOfMonth
instance Typeable WeekdayOfMonth
instance Eq WeekdayOfMonth
instance Ord WeekdayOfMonth
instance Data WeekdayOfMonth
instance Generic WeekdayOfMonth
instance Show WeekdayOfMonth
instance Datatype D1WeekdayOfMonth
instance Constructor C1_0WeekdayOfMonth
instance Selector S1_0_0WeekdayOfMonth
instance Selector S1_0_1WeekdayOfMonth
instance Selector S1_0_2WeekdayOfMonth
instance Selector S1_0_3WeekdayOfMonth

module Data.Thyme.Clock.TAI
data AbsoluteTime

-- | The epoch of TAI, which is 1858-11-17 00:00:00 TAI.
taiEpoch :: AbsoluteTime
type LeapSecondTable = Either UTCTime AbsoluteTime -> DiffTime
utcDayLength :: LeapSecondTable -> Day -> DiffTime
absoluteTime :: LeapSecondTable -> Iso' UTCTime AbsoluteTime

-- | <tt>tai-utc.dat</tt> from
--   <a>http://maia.usno.navy.mil/ser7/tai-utc.dat</a>
parseTAIUTCDAT :: ByteString -> LeapSecondTable
instance AffineSpace AbsoluteTime
instance Show AbsoluteTime
instance Vector Vector AbsoluteTime
instance MVector MVector AbsoluteTime
instance Unbox AbsoluteTime
instance Typeable AbsoluteTime
instance Eq AbsoluteTime
instance Ord AbsoluteTime
instance Data AbsoluteTime
instance Generic AbsoluteTime
instance Enum AbsoluteTime
instance Ix AbsoluteTime
instance NFData AbsoluteTime
instance Bounded AbsoluteTime
instance Random AbsoluteTime
instance Arbitrary AbsoluteTime
instance CoArbitrary AbsoluteTime
instance Datatype D1AbsoluteTime
instance Constructor C1_0AbsoluteTime

module Data.Thyme.Format
class FormatTime t
showsTime :: FormatTime t => TimeLocale -> t -> (Char -> ShowS) -> Char -> ShowS
formatTime :: FormatTime t => TimeLocale -> String -> t -> String
class ParseTime t
buildTime :: ParseTime t => TimeParse -> t
parseTime :: ParseTime t => TimeLocale -> String -> String -> Maybe t
readTime :: ParseTime t => TimeLocale -> String -> String -> t
readsTime :: ParseTime t => TimeLocale -> String -> ReadS t
data TimeParse
TimeParse :: {-# UNPACK #-} !Int -> {-# UNPACK #-} !Int -> {-# UNPACK #-} !Month -> {-# UNPACK #-} !WeekOfYear -> {-# UNPACK #-} !DayOfMonth -> {-# UNPACK #-} !DayOfYear -> {-# UNPACK #-} !DayOfWeek -> {-# UNPACK #-} !Int -> {-# UNPACK #-} !Hour -> {-# UNPACK #-} !Minute -> {-# UNPACK #-} !Int -> {-# UNPACK #-} !DiffTime -> {-# UNPACK #-} !POSIXTime -> !TimeZone -> TimeParse
tpCentury :: TimeParse -> {-# UNPACK #-} !Int
tpCenturyYear :: TimeParse -> {-# UNPACK #-} !Int
tpMonth :: TimeParse -> {-# UNPACK #-} !Month
tpWeekOfYear :: TimeParse -> {-# UNPACK #-} !WeekOfYear
tpDayOfMonth :: TimeParse -> {-# UNPACK #-} !DayOfMonth
tpDayOfYear :: TimeParse -> {-# UNPACK #-} !DayOfYear
tpDayOfWeek :: TimeParse -> {-# UNPACK #-} !DayOfWeek
tpFlags :: TimeParse -> {-# UNPACK #-} !Int
tpHour :: TimeParse -> {-# UNPACK #-} !Hour
tpMinute :: TimeParse -> {-# UNPACK #-} !Minute
tpSecond :: TimeParse -> {-# UNPACK #-} !Int
tpSecFrac :: TimeParse -> {-# UNPACK #-} !DiffTime
tpPOSIXTime :: TimeParse -> {-# UNPACK #-} !POSIXTime
tpTimeZone :: TimeParse -> !TimeZone

-- | Time <a>Parser</a> for UTF-8 encoded <tt>ByteString</tt>s.
--   
--   Attoparsec easily beats any <a>String</a> parser out there, but we do
--   have to be careful to convert the input to UTF-8 <tt>ByteString</tt>s.
timeParser :: TimeLocale -> String -> Parser TimeParse
instance Read UTCView
instance Enum TimeFlag
instance Show TimeFlag
instance Show TimeParse
instance ParseTime AbsoluteTime
instance ParseTime UniversalTime
instance ParseTime UTCTime
instance ParseTime ZonedTime
instance ParseTime TimeZone
instance ParseTime Day
instance ParseTime LocalTime
instance ParseTime MondayWeek
instance ParseTime SundayWeek
instance ParseTime WeekDate
instance ParseTime OrdinalDate
instance ParseTime MonthDay
instance ParseTime YearMonthDay
instance ParseTime TimeOfDay
instance Read UTCTime
instance Read ZonedTime
instance Read LocalTime
instance Read TimeOfDay
instance Read Day
instance FormatTime AbsoluteTime
instance FormatTime UniversalTime
instance FormatTime UTCTime
instance FormatTime ZonedTime
instance FormatTime TimeZone
instance FormatTime Day
instance FormatTime LocalTime
instance FormatTime MondayWeek
instance FormatTime SundayWeek
instance FormatTime WeekDate
instance FormatTime OrdinalDate
instance FormatTime MonthDay
instance FormatTime YearMonthDay
instance FormatTime TimeOfDay


-- | Thyme is a rewrite of the fine <tt>time</tt> library, with a
--   particular focus on performance for applications that make heavy use
--   of timestamps. For example, <a>UTCTime</a> is represented with μs
--   precision as an <a>Int64</a>, which gives a usable range from
--   <tt>-290419-11-07 19:59:05.224192 UTC</tt> to <tt>294135-11-26
--   04:00:54.775807 UTC</tt> in the future.
--   
--   Conversions are provided as <tt>Iso'</tt>s from the <a>lens</a>
--   package, while <a>AdditiveGroup</a>, <a>VectorSpace</a> and
--   <a>AffineSpace</a> from <a>vector-space</a> allow for more principled
--   operations instead of <a>Num</a>, <a>Fractional</a> &amp; al.
--   
--   Thyme uses strict and unpacked tuples throughout, e.g.
--   <a>YearMonthDay</a> or <a>WeekDate</a>. Descriptive <a>Int</a>
--   synonyms such as <a>Year</a> and <a>DayOfMonth</a> are also provided.
--   
--   On platforms where <a>Int</a> is 64-bits wide, types with an
--   <a>Enum</a> instance can be used as <a>Key</a>s for <a>IntMap</a>,
--   preferably via the <tt>EnumMap</tt> wrapper provided by
--   <a>http://hackage.haskell.org/package/enummapset-th</a>. In any case
--   the <a>Ord</a> instances are much faster, if you must use <a>Map</a>.
--   
--   <a>Data.Thyme.Time</a> is a drop-in compatibility module for existing
--   code.
module Data.Thyme


-- | Instances of <a>FromJSON</a> and <a>ToJSON</a> for <a>UTCTime</a> and
--   <a>ZonedTime</a>, along with a newtype wrapper <a>DotNetTime</a>.
module Data.Thyme.Format.Aeson

-- | A newtype wrapper for <a>UTCTime</a> that uses the same non-standard
--   serialization format as Microsoft .NET, whose <tt>System.DateTime</tt>
--   type is by default serialized to JSON as in the following example:
--   
--   <pre>
--   /Date(1302547608878)/
--   </pre>
--   
--   The number represents milliseconds since the Unix epoch.
newtype DotNetTime
DotNetTime :: UTCTime -> DotNetTime
fromDotNetTime :: DotNetTime -> UTCTime
instance Typeable DotNetTime
instance Eq DotNetTime
instance Ord DotNetTime
instance Read DotNetTime
instance Show DotNetTime
instance FormatTime DotNetTime
instance FromJSON UTCTime
instance ToJSON UTCTime
instance FromJSON ZonedTime
instance ToJSON ZonedTime
instance FromJSON DotNetTime
instance ToJSON DotNetTime


-- | This module provides just the compatibility wrappers for the things
--   that <tt>thyme</tt> does differently from <tt>time</tt>. No
--   <a>RealFrac</a> instances for <a>DiffTime</a> nor
--   <a>NominalDiffTime</a>, nor other riffraff.
module Data.Thyme.Time.Core
class Thyme a b | b -> a
thyme :: Thyme a b => Iso' a b
toThyme :: Thyme a b => a -> b
fromThyme :: Thyme a b => b -> a
addDays :: Days -> Day -> Day
diffDays :: Day -> Day -> Days
toGregorian :: Day -> (Year, Month, DayOfMonth)
fromGregorian :: Year -> Month -> DayOfMonth -> Day
fromGregorianValid :: Year -> Month -> DayOfMonth -> Maybe Day
addGregorianMonthsClip :: Months -> Day -> Day
addGregorianMonthsRollover :: Months -> Day -> Day
addGregorianYearsClip :: Years -> Day -> Day
addGregorianYearsRollover :: Years -> Day -> Day
dayOfYearToMonthAndDay :: Bool -> DayOfYear -> (Month, DayOfMonth)
monthAndDayToDayOfYear :: Bool -> Month -> DayOfMonth -> DayOfYear
monthAndDayToDayOfYearValid :: Bool -> Month -> DayOfMonth -> Maybe DayOfYear
toOrdinalDate :: Day -> (Year, DayOfYear)
fromOrdinalDate :: Year -> DayOfYear -> Day
fromOrdinalDateValid :: Year -> DayOfYear -> Maybe Day
sundayStartWeek :: Day -> (Year, WeekOfYear, DayOfWeek)
fromSundayStartWeek :: Year -> WeekOfYear -> DayOfWeek -> Day
fromSundayStartWeekValid :: Year -> WeekOfYear -> DayOfWeek -> Maybe Day
mondayStartWeek :: Day -> (Year, WeekOfYear, DayOfWeek)
fromMondayStartWeek :: Year -> WeekOfYear -> DayOfWeek -> Day
fromMondayStartWeekValid :: Year -> WeekOfYear -> DayOfWeek -> Maybe Day
toWeekDate :: Day -> (Year, WeekOfYear, DayOfWeek)
fromWeekDate :: Year -> WeekOfYear -> DayOfWeek -> Day
fromWeekDateValid :: Year -> WeekOfYear -> DayOfWeek -> Maybe Day
getModJulianDate :: UniversalTime -> Rational

-- | Replacement for <a>ModJulianDate</a>.
mkModJulianDate :: Rational -> UniversalTime
secondsToDiffTime :: Int64 -> DiffTime
picosecondsToDiffTime :: Int64 -> DiffTime
mkUTCTime :: Day -> DiffTime -> UTCTime
unUTCTime :: UTCTime -> UTCView
addUTCTime :: NominalDiffTime -> UTCTime -> UTCTime
diffUTCTime :: UTCTime -> UTCTime -> NominalDiffTime
toMicroseconds :: TimeDiff t => t -> Int64
fromMicroseconds :: TimeDiff t => Int64 -> t
posixSecondsToUTCTime :: POSIXTime -> UTCTime
utcTimeToPOSIXSeconds :: UTCTime -> POSIXTime
addAbsoluteTime :: DiffTime -> AbsoluteTime -> AbsoluteTime
diffAbsoluteTime :: AbsoluteTime -> AbsoluteTime -> DiffTime
utcToTAITime :: LeapSecondTable -> UTCTime -> AbsoluteTime
taiToUTCTime :: LeapSecondTable -> AbsoluteTime -> UTCTime
utcToLocalTimeOfDay :: TimeZone -> TimeOfDay -> (Days, TimeOfDay)
localToUTCTimeOfDay :: TimeZone -> TimeOfDay -> (Days, TimeOfDay)
timeToTimeOfDay :: DiffTime -> TimeOfDay
timeOfDayToTime :: TimeOfDay -> DiffTime
dayFractionToTimeOfDay :: Rational -> TimeOfDay
timeOfDayToDayFraction :: TimeOfDay -> Rational
utcToLocalTime :: TimeZone -> UTCTime -> LocalTime
localTimeToUTC :: TimeZone -> LocalTime -> UTCTime
ut1ToLocalTime :: Rational -> UniversalTime -> LocalTime
localTimeToUT1 :: Rational -> LocalTime -> UniversalTime
utcToZonedTime :: TimeZone -> UTCTime -> ZonedTime
zonedTimeToUTC :: ZonedTime -> UTCTime
instance Thyme ZonedTime ZonedTime
instance Thyme LocalTime LocalTime
instance Thyme TimeOfDay TimeOfDay
instance Thyme TimeZone TimeZone
instance Thyme AbsoluteTime AbsoluteTime
instance Thyme UTCTime UTCTime
instance Thyme UTCTime UTCView
instance Thyme NominalDiffTime NominalDiffTime
instance Thyme DiffTime DiffTime
instance Thyme UniversalTime UniversalTime
instance Thyme Day Day


-- | This module provides compatibility instances and wrappers for the
--   things that <tt>thyme</tt> does differently from <tt>time</tt>, and
--   allows it to be used as a drop-in replacement for the latter, with the
--   exceptions noted below:
--   
--   <ul>
--   <li>When constructing an <a>UTCTime</a> or <a>UniversalTime</a>, use
--   <a>mkUTCTime</a> or <a>mkModJulianDate</a> in place of
--   <tt>UTCTime</tt> or <tt>ModJulianDate</tt>.</li>
--   <li>Instead of pattern matching on <tt>UTCTime</tt>, use
--   <a>unUTCTime</a> to get a <a>UTCView</a>, which has a constructor
--   <tt>UTCTime</tt> with the same fields. For <tt>ModJulianDate</tt>, use
--   <a>getModJulianDate</a>. <tt>ViewPatterns</tt> may make the transition
--   more seamless.</li>
--   <li>Where a third party library uses <tt>time</tt>, you can use
--   <a>toThyme</a> and <a>fromThyme</a> to convert between the
--   corresponding types.</li>
--   <li><a>Year</a>s are <a>Int</a>s, not <a>Integer</a>s: you may need
--   <a>fromIntegral</a>.</li>
--   </ul>
--   
--   You shouldn't need to use <tt>lens</tt> or <tt>vector-space</tt>
--   directly if you don't want to. However if you do use
--   <tt>vector-space</tt> and wish to avoid the <a>RealFrac</a> instances
--   for <a>DiffTime</a> and <a>NominalDiffTime</a>, import
--   <a>Data.Thyme.Time.Core</a> instead.
--   
--   Anything else is probably not intentional, and you should either
--   contact me via IRC or file an issue at
--   <a>https://github.com/liyang/thyme/issues</a>.
module Data.Thyme.Time
instance RealFrac NominalDiffTime
instance Fractional NominalDiffTime
instance Real NominalDiffTime
instance Num NominalDiffTime
instance RealFrac DiffTime
instance Fractional DiffTime
instance Real DiffTime
instance Num DiffTime
instance RealFrac Micro
instance Fractional Micro
instance Real Micro
instance Num Micro
