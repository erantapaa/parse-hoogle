-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Higher level functions for linear algebra. Wraps BLAS and LAPACKE.
--   
--   NOTE: Hackage does not know LAPACKE, therefore jalla and the
--   documentation are not built there. Jalla aims at providing high level
--   functions for linear algebra computations which should be fast and
--   easy enough to use. Under the hood, BLAS and LAPACKE are used (LAPACKE
--   is a standard C interface to LAPACK which is part of LAPACK since
--   version 3.4).
--   
--   The modules Numeric.Jalla.Matrix and Numeric.Jalla.Vector are probably
--   the most useful ones for users. Everything under Numeric.Jalla.Foreign
--   is basically wrapping stuff.
--   
--   Currently, I am adding new functions whenever I find some time. Please
--   help, if you want to! There are not many tests yet, and we need some
--   nicer error reporting (nicer than exceptions).
@package jalla
@version 0.2.0.1


module Numeric.Jalla.InnerProduct

-- | A class that is used to define the canonical inner product on
--   <i>CVector</i> type vectors.
class InnerProduct o f | o -> f
innerProduct :: InnerProduct o f => o -> o -> f


module Numeric.Jalla.IMM

-- | Indexable objects modification monad class. Monads in this type class
--   are used to modify and create indexable objects such as matrices or
--   vectors. This is to provide a common interface for such 'modification
--   monads'.
class (Ix i) => IMM m i o e | m -> o, m -> i, m -> e
setElem :: IMM m i o e => i -> e -> m ()
setElems :: IMM m i o e => [(i, e)] -> m ()
fill :: IMM m i o e => e -> m ()
getElem :: IMM m i o e => i -> m e


-- | Indexable objects for Jalla.
module Numeric.Jalla.Indexable

-- | Mathematical objects that can be indexed, such as matrices and
--   vectors.
class Indexable o i e | o -> i, o -> e
(!) :: Indexable o i e => o -> i -> e


-- | Contains some types used by Jalla, including some BLAS/LAPACK related
--   ones.
module Numeric.Jalla.Types

-- | Defines a scalar type for each field type. Those are <a>Complex</a>
--   <a>CFloat</a> and <a>CFloat</a>, as well as <a>Complex</a>
--   <a>CDouble</a> and <a>CDouble</a>.
class (Num e, Floating e, Show e) => Field1 e where type family FieldScalar e :: *
class BLASEnum e be
toBlas :: BLASEnum e be => e -> be
fromBlas :: BLASEnum e be => be -> e
class LAPACKEEnum e le
toLapacke :: LAPACKEEnum e le => e -> le
fromLapacke :: LAPACKEEnum e le => le -> e
type Index = Int
type Shape = (Index, Index)
type IndexPair = (Index, Index)

-- | Row count of a matrix with given transposedness and shape.
rowCountTrans :: Transpose -> Shape -> Index

-- | Column count of a matrix with given transposedness and shape.
colCountTrans :: Transpose -> Shape -> Index

-- | Shape of a matrix with given transposedness and shape.
shapeTrans :: Transpose -> Shape -> Shape

-- | Generate indices of a diagonal in a matrix of given shape.
diagIndices :: Shape -> Index -> [IndexPair]
data Order
[RowMajor] :: Order
[ColumnMajor] :: Order
data Transpose
[Trans] :: Transpose
[NoTrans] :: Transpose
data UpLo
[Up] :: UpLo
[Lo] :: UpLo
instance Show UpLo
instance Eq UpLo
instance Show Transpose
instance Eq Transpose
instance Show Order
instance Eq Order
instance Field1 CFloat
instance Field1 CDouble
instance Field1 (Complex CFloat)
instance Field1 (Complex CDouble)

module Numeric.Jalla.Foreign.BLAS
type CblasIndex = Integer
data CblasOrder
[CblasRowMajor] :: CblasOrder
[CblasColMajor] :: CblasOrder
data CblasTranspose
[CblasNoTrans] :: CblasTranspose
[CblasTrans] :: CblasTranspose
[CblasConjTrans] :: CblasTranspose
data CblasUplo
[CblasUpper] :: CblasUplo
[CblasLower] :: CblasUplo
data CblasDiag
[CblasNonUnit] :: CblasDiag
[CblasUnit] :: CblasDiag
data CblasSide
[CblasLeft] :: CblasSide
[CblasRight] :: CblasSide
c2i :: (Integral i1, Integral i2) => i1 -> i2
c2f :: (RealFloat a1, RealFloat a2) => a1 -> a2
cFromEnum :: (Integral i, Enum e) => e -> i
sdsdot :: (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((CFloat))
dsdot :: (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((CDouble))
sdsdot'_ :: CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CFloat))))))
sdot :: (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((CFloat))
ddot :: (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((CDouble))
cdotu_sub :: (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((()))
dsdot'_ :: CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CDouble)))))
cdotc_sub :: (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((()))
zdotu_sub :: (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((()))
zdotc_sub :: (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((()))
sdot'_ :: CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CFloat)))))
snrm2 :: (Int) -> (Ptr CFloat) -> (Int) -> IO ((CFloat))
sasum :: (Int) -> (Ptr CFloat) -> (Int) -> IO ((CFloat))
dnrm2 :: (Int) -> (Ptr CDouble) -> (Int) -> IO ((CDouble))
ddot'_ :: CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CDouble)))))
dasum :: (Int) -> (Ptr CDouble) -> (Int) -> IO ((CDouble))
scnrm2 :: (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((CFloat))
scasum :: (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((CFloat))
cdotu_sub'_ :: CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO ()))))))
dznrm2 :: (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((CDouble))
dzasum :: (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((CDouble))
isamax :: (Int) -> (Ptr CFloat) -> (Int) -> IO ((CblasIndex))
cdotc_sub'_ :: CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO ()))))))
idamax :: (Int) -> (Ptr CDouble) -> (Int) -> IO ((CblasIndex))
icamax :: (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((CblasIndex))
izamax :: (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((CblasIndex))
zdotu_sub'_ :: CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO ()))))))
sswap :: (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
scopy :: (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
saxpy :: (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
zdotc_sub'_ :: CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO ()))))))
dswap :: (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
dcopy :: (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
daxpy :: (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
snrm2'_ :: CInt -> ((Ptr CFloat) -> (CInt -> (IO CFloat)))
cswap :: (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
ccopy :: (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
caxpy :: (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
sasum'_ :: CInt -> ((Ptr CFloat) -> (CInt -> (IO CFloat)))
zswap :: (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zcopy :: (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zaxpy :: (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
dnrm2'_ :: CInt -> ((Ptr CDouble) -> (CInt -> (IO CDouble)))
srotg :: (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((()))
srotmg :: (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (CFloat) -> (Ptr CFloat) -> IO ((()))
srot :: (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (CFloat) -> IO ((()))
dasum'_ :: CInt -> ((Ptr CDouble) -> (CInt -> (IO CDouble)))
srotm :: (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((()))
drotg :: (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((()))
drotmg :: (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (CDouble) -> (Ptr CDouble) -> IO ((()))
scnrm2'_ :: CInt -> ((Ptr ()) -> (CInt -> (IO CFloat)))
drot :: (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (CDouble) -> IO ((()))
drotm :: (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((()))
sscal :: (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
scasum'_ :: CInt -> ((Ptr ()) -> (CInt -> (IO CFloat)))
dscal :: (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
cscal :: (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
zscal :: (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
dznrm2'_ :: CInt -> ((Ptr ()) -> (CInt -> (IO CDouble)))
csscal :: (Int) -> (CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
zdscal :: (Int) -> (CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
sgemv :: (CblasOrder) -> (CblasTranspose) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
dzasum'_ :: CInt -> ((Ptr ()) -> (CInt -> (IO CDouble)))
sgbmv :: (CblasOrder) -> (CblasTranspose) -> (Int) -> (Int) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
strmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
stbmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
isamax'_ :: CInt -> ((Ptr CFloat) -> (CInt -> (IO CULong)))
stpmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
strsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
stbsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
idamax'_ :: CInt -> ((Ptr CDouble) -> (CInt -> (IO CULong)))
stpsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
dgemv :: (CblasOrder) -> (CblasTranspose) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
dgbmv :: (CblasOrder) -> (CblasTranspose) -> (Int) -> (Int) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
icamax'_ :: CInt -> ((Ptr ()) -> (CInt -> (IO CULong)))
dtrmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
dtbmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
dtpmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
izamax'_ :: CInt -> ((Ptr ()) -> (CInt -> (IO CULong)))
dtrsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
dtbsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
dtpsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
sswap'_ :: CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ())))))
cgemv :: (CblasOrder) -> (CblasTranspose) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
cgbmv :: (CblasOrder) -> (CblasTranspose) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
ctrmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
scopy'_ :: CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ())))))
ctbmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
ctpmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
ctrsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
saxpy'_ :: CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ()))))))
ctbsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
ctpsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
zgemv :: (CblasOrder) -> (CblasTranspose) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
dswap'_ :: CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ())))))
zgbmv :: (CblasOrder) -> (CblasTranspose) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
ztrmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
ztbmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
dcopy'_ :: CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ())))))
ztpmv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
ztrsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
ztbsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
daxpy'_ :: CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ()))))))
ztpsv :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
ssymv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
ssbmv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
cswap'_ :: CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ())))))
sspmv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
sger :: (CblasOrder) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
ssyr :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
ccopy'_ :: CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ())))))
sspr :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((()))
ssyr2 :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
sspr2 :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((()))
caxpy'_ :: CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))
dsymv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
dsbmv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
dspmv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
zswap'_ :: CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ())))))
dger :: (CblasOrder) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
dsyr :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
dspr :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((()))
zcopy'_ :: CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ())))))
dsyr2 :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
dspr2 :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((()))
chemv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
zaxpy'_ :: CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))
chbmv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
chpmv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
cgeru :: (CblasOrder) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
srotg'_ :: (Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO ()))))
cgerc :: (CblasOrder) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
cher :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
chpr :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((()))
srotmg'_ :: (Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CFloat -> ((Ptr CFloat) -> (IO ())))))
cher2 :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
chpr2 :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((()))
zhemv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
srot'_ :: CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> (CFloat -> (IO ())))))))
zhbmv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zhpmv :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zgeru :: (CblasOrder) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
srotm'_ :: CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO ()))))))
zgerc :: (CblasOrder) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zher :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zhpr :: (CblasOrder) -> (CblasUplo) -> (Int) -> (CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((()))
drotg'_ :: (Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO ()))))
zher2 :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zhpr2 :: (CblasOrder) -> (CblasUplo) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((()))
sgemm :: (CblasOrder) -> (CblasTranspose) -> (CblasTranspose) -> (Int) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
drotmg'_ :: (Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CDouble -> ((Ptr CDouble) -> (IO ())))))
ssymm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
ssyrk :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
ssyr2k :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> IO ((()))
drot'_ :: CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> (CDouble -> (IO ())))))))
strmm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
strsm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((()))
dgemm :: (CblasOrder) -> (CblasTranspose) -> (CblasTranspose) -> (Int) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
drotm'_ :: CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO ()))))))
dsymm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
dsyrk :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
dsyr2k :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> IO ((()))
sscal'_ :: CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ()))))
dtrmm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
dtrsm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((()))
cgemm :: (CblasOrder) -> (CblasTranspose) -> (CblasTranspose) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
dscal'_ :: CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ()))))
csymm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
csyrk :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
csyr2k :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
cscal'_ :: CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))
ctrmm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
ctrsm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
zgemm :: (CblasOrder) -> (CblasTranspose) -> (CblasTranspose) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zscal'_ :: CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))
zsymm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zsyrk :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zsyr2k :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
csscal'_ :: CInt -> (CFloat -> ((Ptr ()) -> (CInt -> (IO ()))))
ztrmm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
ztrsm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (CblasTranspose) -> (CblasDiag) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
chemm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
zdscal'_ :: CInt -> (CDouble -> ((Ptr ()) -> (CInt -> (IO ()))))
cherk :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
cher2k :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((()))
zhemm :: (CblasOrder) -> (CblasSide) -> (CblasUplo) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
sgemv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))))
zherk :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
zher2k :: (CblasOrder) -> (CblasUplo) -> (CblasTranspose) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((()))
sgbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))))))
strmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ())))))))))
stbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))
stpmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))
strsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ())))))))))
stbsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))
stpsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))
dgemv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))))
dgbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))))))
dtrmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ())))))))))
dtbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))
dtpmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))
dtrsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ())))))))))
dtbsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))
dtpsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))
cgemv'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))
cgbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))))
ctrmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ())))))))))
ctbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
ctpmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))
ctrsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ())))))))))
ctbsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
ctpsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))
zgemv'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))
zgbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))))
ztrmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ())))))))))
ztbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
ztpmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))
ztrsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ())))))))))
ztbsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
ztpsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))
ssymv'_ :: CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ())))))))))))
ssbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))))
sspmv'_ :: CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))
sger'_ :: CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))
ssyr'_ :: CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))
sspr'_ :: CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO ())))))))
ssyr2'_ :: CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))
sspr2'_ :: CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO ())))))))))
dsymv'_ :: CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ())))))))))))
dsbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))))
dspmv'_ :: CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))
dger'_ :: CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))
dsyr'_ :: CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))
dspr'_ :: CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO ())))))))
dsyr2'_ :: CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))
dspr2'_ :: CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO ())))))))))
chemv'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))
chbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))
chpmv'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
cgeru'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
cgerc'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
cher'_ :: CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))
chpr'_ :: CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO ())))))))
cher2'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
chpr2'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO ())))))))))
zhemv'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))
zhbmv'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))
zhpmv'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
zgeru'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
zgerc'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
zher'_ :: CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))
zhpr'_ :: CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO ())))))))
zher2'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))
zhpr2'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO ())))))))))
sgemm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))))))
ssymm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ())))))))))))))
ssyrk'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ())))))))))))
ssyr2k'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (IO ())))))))))))))
strmm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))))
strsm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO ()))))))))))))
dgemm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))))))
dsymm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ())))))))))))))
dsyrk'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ())))))))))))
dsyr2k'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (IO ())))))))))))))
dtrmm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))))
dtrsm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO ()))))))))))))
cgemm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))))
csymm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))))
csyrk'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))
csyr2k'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))))
ctrmm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))
ctrsm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))
zgemm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))))
zsymm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))))
zsyrk'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))
zsyr2k'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))))
ztrmm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))
ztrsm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO ()))))))))))))
chemm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))))
cherk'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CFloat -> ((Ptr ()) -> (CInt -> (CFloat -> ((Ptr ()) -> (CInt -> (IO ())))))))))))
cher2k'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> ((Ptr ()) -> (CInt -> (IO ())))))))))))))
zhemm'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO ())))))))))))))
zherk'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> (CDouble -> ((Ptr ()) -> (CInt -> (CDouble -> ((Ptr ()) -> (CInt -> (IO ())))))))))))
zher2k'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> ((Ptr ()) -> (CInt -> (IO ())))))))))))))
instance Show CblasOrder
instance Eq CblasOrder
instance Enum CblasOrder
instance Enum CblasTranspose
instance Enum CblasUplo
instance Enum CblasDiag
instance Enum CblasSide

module Numeric.Jalla.Foreign.LAPACKE
castComplexToPtr :: Ptr (Complex CFloat) -> Ptr a
castZomplexToPtr :: Ptr (Complex CDouble) -> Ptr a
castChar :: CChar -> CChar
withSingleCharPtr :: Ptr CChar -> (Char -> IO a) -> IO a
withSingleChar :: Char -> (Ptr CChar -> IO a) -> IO a
cgbbrd :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgbbrd :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgbbrd :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgbbrd :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cgebrd :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgebrd :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgebrd :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgebrd :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgebak :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgebak :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgebak :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgebak :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cgebal :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> IO ((Int))
dgebal :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> IO ((Int))
sgebal :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> IO ((Int))
zgebal :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> IO ((Int))
cggbak :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dggbak :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sggbak :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zggbak :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cggbal :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dggbal :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sggbal :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zggbal :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cgbcon :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
dgbcon :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
sgbcon :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zgbcon :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
cpbcon :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
dpbcon :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
spbcon :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zpbcon :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
ctbcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dtbcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
stbcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
ztbcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> IO ((Int))
cgecon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
dgecon :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
sgecon :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zgecon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
checon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zhecon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
cpocon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
dpocon :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
spocon :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zpocon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
chpcon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zhpcon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
cppcon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
dppcon :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
sppcon :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zppcon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
cspcon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
dspcon :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
sspcon :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zspcon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
ctpcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CFloat) -> IO ((Int))
dtpcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
stpcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
ztpcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CDouble) -> IO ((Int))
ctrcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dtrcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
strcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
ztrcon :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> IO ((Int))
cgtcon :: (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
dgtcon :: (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
sgtcon :: (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zgtcon :: (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
cptcon :: (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
dptcon :: (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
sptcon :: (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zptcon :: (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
csycon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
dsycon :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
ssycon :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
zsycon :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
chbev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhbev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dsbev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssbev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
chbevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhbevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dsbevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssbevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
cgbequ :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgbequ :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgbequ :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgbequ :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
chbevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
zhbevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cpbequ :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dpbequ :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
spbequ :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zpbequ :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
dsbevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
ssbevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
cgeev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgeev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgeev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgeev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cheev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zheev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> IO ((Int))
cheevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zheevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> IO ((Int))
cheevr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
zheevr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cgeequ :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgeequ :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgeequ :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgeequ :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cgeevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgeevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgeevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgeevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cheevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
zheevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cggev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dggev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sggev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zggev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
ctgevc :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Int) -> (Ptr CInt) -> IO ((Int))
dtgevc :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Int) -> (Ptr CInt) -> IO ((Int))
ctgexc :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Int) -> (Int) -> IO ((Int))
dtgexc :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
stgevc :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Int) -> (Ptr CInt) -> IO ((Int))
stgexc :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
ztgevc :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Int) -> (Ptr CInt) -> IO ((Int))
ztgexc :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Int) -> (Int) -> IO ((Int))
zcgesv :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cggevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dggevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sggevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zggevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
chgeqz :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dhgeqz :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
shgeqz :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zhgeqz :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dsgesv :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
cpoequ :: (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dpoequ :: (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
spoequ :: (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zpoequ :: (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
chpev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhpev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dspev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sspev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
chpevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhpevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dspevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sspevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
chpevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
zhpevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cppequ :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dppequ :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sppequ :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zppequ :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
dspevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
sspevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
ctrevc :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Int) -> (Ptr CInt) -> IO ((Int))
dtrevc :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Int) -> (Ptr CInt) -> IO ((Int))
ctrexc :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Int) -> (Int) -> IO ((Int))
dtrexc :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
strevc :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Int) -> (Ptr CInt) -> IO ((Int))
strexc :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
ztrevc :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Int) -> (Ptr CInt) -> IO ((Int))
ztrexc :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Int) -> (Int) -> IO ((Int))
chsein :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
dhsein :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
shsein :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
zhsein :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
chseqr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dhseqr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
shseqr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zhseqr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dstev :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sstev :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
cstedc :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dstedc :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sstedc :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zstedc :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dstevd :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sstevd :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
dsterf :: (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ssterf :: (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
cstein :: (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dstein :: (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
sstein :: (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
zstein :: (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cpteqr :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpteqr :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spteqr :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpteqr :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cstegr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dstegr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
cstemr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
dstemr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
csteqr :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dsteqr :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
dstevr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
sstegr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
sstemr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
zstegr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
ssteqr :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zstemr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
sstevr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
zsteqr :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dstevx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
sstevx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
dstebz :: (CChar) -> (CChar) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
sstebz :: (CChar) -> (CChar) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CInt) -> IO ((Int))
dsyev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
ssyev :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dsyevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
ssyevd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dsyevr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
ssyevr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
dsyevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
ssyevx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
cgbequb :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgbequb :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgbequb :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgbequb :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cgeequb :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgeequb :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgeequb :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgeequb :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cheequb :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zheequb :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cpoequb :: (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dpoequb :: (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
spoequb :: (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zpoequb :: (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
csyequb :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dsyequb :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ssyequb :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zsyequb :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
chbgv :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhbgv :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dsbgv :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssbgv :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
chbgvd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhbgvd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dsbgvd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssbgvd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
chbgst :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhbgst :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
chbgvx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
zhbgvx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dsbgst :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssbgst :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
dsbgvx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
ssbgvx :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
chegv :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zhegv :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> IO ((Int))
chegvd :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zhegvd :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> IO ((Int))
chegst :: (Int) -> (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhegst :: (Int) -> (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
chegvx :: (Int) -> (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
zhegvx :: (Int) -> (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cggglm :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> IO ((Int))
dggglm :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sggglm :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zggglm :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> IO ((Int))
cungql :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
zungql :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cunglq :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
cungrq :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
zunglq :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
zungrq :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cungbr :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
cunghr :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
cungqr :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
cungtr :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
zungbr :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
zunghr :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
zungqr :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
zungtr :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
chpgv :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhpgv :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dspgv :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sspgv :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
chpgvd :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhpgvd :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dspgvd :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sspgvd :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
chpgst :: (Int) -> (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> IO ((Int))
zhpgst :: (Int) -> (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> IO ((Int))
chpgvx :: (Int) -> (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
zhpgvx :: (Int) -> (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dopgtr :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sopgtr :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
cupgtr :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dspgst :: (Int) -> (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sspgst :: (Int) -> (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zupgtr :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dspgvx :: (Int) -> (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
sspgvx :: (Int) -> (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
dorgql :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sorgql :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dorglq :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
dorgrq :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sorglq :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
sorgrq :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dorgbr :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
dorghr :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
dorgqr :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sorgbr :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dorgtr :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sorghr :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
sorgqr :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
sorgtr :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dsygv :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
ssygv :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dsygvd :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
ssygvd :: (Int) -> (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dsygst :: (Int) -> (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssygst :: (Int) -> (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
dsygvx :: (Int) -> (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (CDouble) -> (Int) -> (Int) -> (CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
ssygvx :: (Int) -> (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (CFloat) -> (Int) -> (Int) -> (CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
cgehrd :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgehrd :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sgehrd :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zgehrd :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgghrd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgghrd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgghrd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgghrd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dgejsv :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CInt) -> IO ((Int))
sgejsv :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CInt) -> IO ((Int))
cgels :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgels :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgels :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgels :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cgelsd :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (CFloat) -> (Ptr CInt) -> IO ((Int))
dgelsd :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (CDouble) -> (Ptr CInt) -> IO ((Int))
sgelsd :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (CFloat) -> (Ptr CInt) -> IO ((Int))
zgelsd :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (CDouble) -> (Ptr CInt) -> IO ((Int))
cgelqf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgelqf :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sgelqf :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zgelqf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgelss :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (CFloat) -> (Ptr CInt) -> IO ((Int))
dgelss :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (CDouble) -> (Ptr CInt) -> IO ((Int))
sgelss :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (CFloat) -> (Ptr CInt) -> IO ((Int))
zgelss :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (CDouble) -> (Ptr CInt) -> IO ((Int))
cgelsy :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (CFloat) -> (Ptr CInt) -> IO ((Int))
dgelsy :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (CDouble) -> (Ptr CInt) -> IO ((Int))
sgelsy :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (CFloat) -> (Ptr CInt) -> IO ((Int))
zgelsy :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (CDouble) -> (Ptr CInt) -> IO ((Int))
cgglse :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgglse :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgglse :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgglse :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> IO ((Int))
cunmql :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zunmql :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cunmlq :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
cunmrq :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zunmlq :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
zunmrq :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cunmbr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
cunmhr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
cunmqr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
cunmtr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zunmbr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
zunmhr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
zunmqr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
zunmtr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cunmrz :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zunmrz :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dopmtr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sopmtr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
cupmtr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zupmtr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dormql :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sormql :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
dormlq :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
dormrq :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sormlq :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
sormrq :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
dormbr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
dormhr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
dormqr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sormbr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
dormtr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sormhr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
sormqr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
sormtr :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
dormrz :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sormrz :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zcposv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dsposv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
cgeqp3 :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgeqp3 :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> IO ((Int))
sgeqp3 :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> IO ((Int))
zgeqp3 :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgeqlf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgeqlf :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
cgeqpf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgeqpf :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> IO ((Int))
cgeqrf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgeqrf :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sgeqlf :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
sgeqpf :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> IO ((Int))
sgeqrf :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zgeqlf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
zgeqpf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> IO ((Int))
zgeqrf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cggqrf :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dggqrf :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sggqrf :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zggqrf :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgeqrfp :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgeqrfp :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sgeqrfp :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zgeqrfp :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgbrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgbrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgbrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgbrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cpbrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dpbrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
spbrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zpbrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ctbrfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dtbrfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
stbrfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
ztbrfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cgerqf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dgerqf :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sgerqf :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zgerqf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgerfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgerfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgerfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgerfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cherfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zherfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
chfrk :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (Ptr (Complex CFloat)) -> IO ((Int))
zhfrk :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (Ptr (Complex CDouble)) -> IO ((Int))
dsfrk :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (Ptr CDouble) -> IO ((Int))
ssfrk :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (Ptr CFloat) -> IO ((Int))
cggrqf :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dggrqf :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sggrqf :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zggrqf :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cporfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dporfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sporfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zporfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
chprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zhprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cpprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dpprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
spprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zpprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
csprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dsprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ssprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zsprfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ctprfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dtprfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
stprfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
ztprfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ctrrfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dtrrfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
strrfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
ztrrfs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cgtrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgtrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgtrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgtrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cptrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dptrfs :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sptrfs :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zptrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
csyrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dsyrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ssyrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zsyrfs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ctzrzf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dtzrzf :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
stzrzf :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
ztzrzf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgbsv :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgbsv :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgbsv :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgbsv :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cpbsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpbsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spbsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpbsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cpbstf :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpbstf :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spbstf :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpbstf :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cgbsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Char) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgbsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Char) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgbsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Char) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgbsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Char) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cpbsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Char) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dpbsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Char) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
spbsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Char) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zpbsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Char) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
dbdsdc :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CInt) -> IO ((Int))
sbdsdc :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CInt) -> IO ((Int))
cbdsqr :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dbdsqr :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sbdsqr :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zbdsqr :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cgesv :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgesv :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgesv :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgesv :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
chesv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhesv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cgesdd :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgesdd :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgesdd :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
cgesvd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dgesvd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
zgesdd :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
sgesvd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zgesvd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> IO ((Int))
dgesvj :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
sgesvj :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
cgesvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Char) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgesvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Char) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgesvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Char) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgesvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Char) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
chesvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zhesvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
dtfsm :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
stfsm :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
cggsvd :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dggsvd :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
sggsvd :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
zggsvd :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
ctgsja :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dtgsja :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
ctgsna :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
dtgsna :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
stgsja :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
stgsna :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
ztgsja :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
ztgsna :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
cggsvp :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (CFloat) -> (CFloat) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dggsvp :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (CDouble) -> (CDouble) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sggsvp :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (CFloat) -> (CFloat) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zggsvp :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (CDouble) -> (CDouble) -> (Ptr CInt) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
ctgsyl :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dtgsyl :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
stgsyl :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
ztgsyl :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ctgsen :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dtgsen :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CInt) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
stgsen :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CInt) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
ztgsen :: (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ddisna :: (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sdisna :: (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
cposv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dposv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sposv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zposv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
chpsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
cposvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Char) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dposvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Char) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sposvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Char) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zhpsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
zposvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Char) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cppsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dppsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sppsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zppsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cspsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dspsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sspsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zspsv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
chpsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zhpsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cppsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Char) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dppsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Char) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sppsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Char) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zppsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Char) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cspsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dspsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sspsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zspsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ctrsna :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
dtrsna :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
strsna :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
ztrsna :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
ctrsyl :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> IO ((Int))
dtrsyl :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
strsyl :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
ztrsyl :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> IO ((Int))
ctrsen :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dtrsen :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
strsen :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
ztrsen :: (Int) -> (CChar) -> (CChar) -> (Ptr CInt) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cgtsv :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgtsv :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgtsv :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgtsv :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cptsv :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dptsv :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sptsv :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zptsv :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cgtsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dgtsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sgtsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zgtsvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
cptsvx :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dptsvx :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
sptsvx :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zptsvx :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
csysv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dsysv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssysv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zsysv :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
csysvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
dsysvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ssysvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zsysvx :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
chbtrd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhbtrd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cgbtrf :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dgbtrf :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
sgbtrf :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
zgbtrf :: (Int) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cpbtrf :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpbtrf :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spbtrf :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpbtrf :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dsbtrd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssbtrd :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
cgbtrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgbtrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgbtrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgbtrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cpbtrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpbtrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spbtrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpbtrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
ctbtrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dtbtrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
stbtrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
ztbtrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
chetrd :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> IO ((Int))
zhetrd :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgetrf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dgetrf :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
sgetrf :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
zgetrf :: (Int) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
chetrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
zhetrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cgetri :: (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dgetri :: (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
sgetri :: (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
zgetri :: (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
chetri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
zhetri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
cgetrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgetrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgetrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgetrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
chetrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhetrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cpftrf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dpftrf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> IO ((Int))
spftrf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zpftrf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cpftri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dpftri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> IO ((Int))
spftri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zpftri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
ctftri :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dtftri :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> IO ((Int))
stftri :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> IO ((Int))
ztftri :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cpftrs :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpftrs :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spftrs :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpftrs :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
ctfttp :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> IO ((Int))
dtfttp :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
stfttp :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
ztfttp :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> IO ((Int))
ctfttr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dtfttr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
stfttr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
ztfttr :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cpotrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpotrf :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spotrf :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpotrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cpotri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpotri :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spotri :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpotri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cpotrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpotrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spotrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpotrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
chptrd :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> IO ((Int))
zhptrd :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> IO ((Int))
chptrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> IO ((Int))
zhptrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> IO ((Int))
chptri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> IO ((Int))
zhptri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> IO ((Int))
cpptrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dpptrf :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> IO ((Int))
spptrf :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> IO ((Int))
zpptrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
dsptrd :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ssptrd :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
cpptri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
csptrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> IO ((Int))
dpptri :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> IO ((Int))
dsptrf :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CInt) -> IO ((Int))
spptri :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> IO ((Int))
ssptrf :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CInt) -> IO ((Int))
zpptri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
zsptrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> IO ((Int))
ctpttf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> IO ((Int))
dtpttf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
stpttf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
ztpttf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> IO ((Int))
chptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
zhptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
csptri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> IO ((Int))
dsptri :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CInt) -> IO ((Int))
ssptri :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CInt) -> IO ((Int))
zsptri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> IO ((Int))
ctptri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dtptri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> IO ((Int))
stptri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> IO ((Int))
ztptri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
cpptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
csptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dsptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ctpttr :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dtpttr :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> IO ((Int))
stpttr :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zsptrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
ztpttr :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
ctptrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dtptrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
stptrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
ztptrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
ctrttf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dtrttf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
strttf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
ztrttf :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
ctrtri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dtrtri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
strtri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
ztrtri :: (Int) -> (CChar) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
ctrttp :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> IO ((Int))
dtrttp :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> IO ((Int))
strttp :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> IO ((Int))
ztrttp :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> IO ((Int))
ctrtrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dtrtrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Int) -> IO ((Int))
strtrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Int) -> IO ((Int))
ztrtrs :: (Int) -> (CChar) -> (CChar) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cpstrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (CFloat) -> IO ((Int))
dpstrf :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (CDouble) -> IO ((Int))
spstrf :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (CFloat) -> IO ((Int))
zpstrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr CInt) -> (CDouble) -> IO ((Int))
cgttrf :: (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> IO ((Int))
dgttrf :: (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CInt) -> IO ((Int))
sgttrf :: (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CInt) -> IO ((Int))
zgttrf :: (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> IO ((Int))
cpttrf :: (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> IO ((Int))
dpttrf :: (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
spttrf :: (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
zpttrf :: (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> IO ((Int))
cgttrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dgttrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> IO ((Int))
sgttrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zgttrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cpttrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr (Complex CFloat)) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dpttrs :: (Int) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> (Int) -> IO ((Int))
spttrs :: (Int) -> (Int) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zpttrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Ptr (Complex CDouble)) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
dsytrd :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CDouble) -> (Ptr CDouble) -> (Ptr CDouble) -> IO ((Int))
ssytrd :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CFloat) -> (Ptr CFloat) -> (Ptr CFloat) -> IO ((Int))
csytrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dsytrf :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
ssytrf :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
zsytrf :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
csytri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> IO ((Int))
dsytri :: (Int) -> (CChar) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> IO ((Int))
ssytri :: (Int) -> (CChar) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> IO ((Int))
zsytri :: (Int) -> (CChar) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> IO ((Int))
csytrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CFloat)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CFloat)) -> (Int) -> IO ((Int))
dsytrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CDouble) -> (Int) -> (Ptr CInt) -> (Ptr CDouble) -> (Int) -> IO ((Int))
ssytrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr CFloat) -> (Int) -> (Ptr CInt) -> (Ptr CFloat) -> (Int) -> IO ((Int))
zsytrs :: (Int) -> (CChar) -> (Int) -> (Int) -> (Ptr (Complex CDouble)) -> (Int) -> (Ptr CInt) -> (Ptr (Complex CDouble)) -> (Int) -> IO ((Int))
cgbbrd'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))))))
dgbbrd'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))))))))
sgbbrd'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))))))))
zgbbrd'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))))))
cgebrd'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt)))))))))
dgebrd'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))
sgebrd'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))
zgebrd'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt)))))))))
cgebak'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
dgebak'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))
sgebak'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))
zgebak'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
cgebal'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> (IO CInt))))))))
dgebal'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> (IO CInt))))))))
sgebal'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> (IO CInt))))))))
zgebal'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> (IO CInt))))))))
cggbak'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
dggbak'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
sggbak'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
zggbak'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cggbal'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))
dggbal'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))
sggbal'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))
zggbal'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))
cgbcon'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt))))))))))
dgbcon'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt))))))))))
sgbcon'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt))))))))))
zgbcon'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt))))))))))
cpbcon'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (IO CInt))))))))
dpbcon'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (IO CInt))))))))
spbcon'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (IO CInt))))))))
zpbcon'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (IO CInt))))))))
ctbcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))))
dtbcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))))
stbcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))))
ztbcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))))
cgecon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))
dgecon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))
sgecon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))
zgecon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))
checon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt))))))))
zhecon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt))))))))
cpocon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))
dpocon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))
spocon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))
zpocon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))
chpcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))
zhpcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))
cppcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CFloat -> ((Ptr CFloat) -> (IO CInt))))))
dppcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CDouble -> ((Ptr CDouble) -> (IO CInt))))))
sppcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CFloat -> ((Ptr CFloat) -> (IO CInt))))))
zppcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CDouble -> ((Ptr CDouble) -> (IO CInt))))))
cspcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))
dspcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))
sspcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))
zspcon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))
ctpcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CFloat) -> (IO CInt)))))))
dtpcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))
stpcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))
ztpcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CDouble) -> (IO CInt)))))))
ctrcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))))
dtrcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))))
strcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))))
ztrcon'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))))
cgtcon'_ :: CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))))
dgtcon'_ :: CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))))
sgtcon'_ :: CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))))
zgtcon'_ :: CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))))
cptcon'_ :: CInt -> ((Ptr CFloat) -> ((Ptr ()) -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))
dptcon'_ :: CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))
sptcon'_ :: CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))
zptcon'_ :: CInt -> ((Ptr CDouble) -> ((Ptr ()) -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))
csycon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt))))))))
dsycon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt))))))))
ssycon'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (CFloat -> ((Ptr CFloat) -> (IO CInt))))))))
zsycon'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (CDouble -> ((Ptr CDouble) -> (IO CInt))))))))
chbev'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
zhbev'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
dsbev'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))
ssbev'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))
chbevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
zhbevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
dsbevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))
ssbevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))
cgbequ'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))
dgbequ'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))
sgbequ'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))
zgbequ'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))
chbevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))
zhbevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))
cpbequ'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))
dpbequ'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))
spbequ'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))
zpbequ'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))
dsbevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))
ssbevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))
cgeev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
dgeev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))
sgeev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))
zgeev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cheev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
zheev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
cheevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
zheevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
cheevr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
zheevr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
cgeequ'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))
dgeequ'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))
sgeequ'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))
zgeequ'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))
cgeevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))
dgeevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))))))
sgeevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))))))
zgeevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))
cheevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
zheevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
cggev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))))
dggev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))))))
sggev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))))))
zggev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))))
ctgevc'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))
dtgevc'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))
ctgexc'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> (CInt -> (IO CInt))))))))))))))
dtgexc'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt))))))))))))))
stgevc'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))
stgexc'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt))))))))))))))
ztgevc'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))
ztgexc'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> (CInt -> (IO CInt))))))))))))))
zcgesv'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))
cggevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))))))))))
dggevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))))))))
sggevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))))))))
zggevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))))))))))
chgeqz'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))))))
dhgeqz'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))))))))
shgeqz'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))))))))
zhgeqz'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))))))
dsgesv'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))
cpoequ'_ :: CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))
dpoequ'_ :: CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))
spoequ'_ :: CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))
zpoequ'_ :: CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))
chpev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
zhpev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dspev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
sspev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
chpevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
zhpevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dspevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
sspevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
chpevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
zhpevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
cppequ'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))
dppequ'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))
sppequ'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))
zppequ'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))
dspevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
sspevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
ctrevc'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))
dtrevc'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))
ctrexc'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> (CInt -> (IO CInt)))))))))
dtrexc'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))
strevc'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))
strexc'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))
ztrevc'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))
ztrexc'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> (CInt -> (IO CInt)))))))))
chsein'_ :: CInt -> (CChar -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
dhsein'_ :: CInt -> (CChar -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt))))))))))))))))))
shsein'_ :: CInt -> (CChar -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt))))))))))))))))))
zhsein'_ :: CInt -> (CChar -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
chseqr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
dhseqr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))
shseqr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))
zhseqr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
dstev'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
sstev'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
cstedc'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dstedc'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
sstedc'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
zstedc'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dstevd'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
sstevd'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
dsterf'_ :: CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))
ssterf'_ :: CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))
cstein'_ :: CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))
dstein'_ :: CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))
sstein'_ :: CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))
zstein'_ :: CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))
cpteqr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dpteqr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
spteqr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
zpteqr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
cstegr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
dstegr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
cstemr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CFloat -> (CFloat -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
dstemr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CDouble -> (CDouble -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
csteqr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dsteqr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
dstevr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
sstegr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
sstemr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CFloat -> (CFloat -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
zstegr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
ssteqr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
zstemr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CDouble -> (CDouble -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
sstevr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
zsteqr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dstevx'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
sstevx'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))
dstebz'_ :: CChar -> (CChar -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))))))))
sstebz'_ :: CChar -> (CChar -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CInt) -> (IO CInt)))))))))))))))
dsyev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
ssyev'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
dsyevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
ssyevd'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
dsyevr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
ssyevr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
dsyevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
ssyevx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
cgbequb'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))
dgbequb'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))
sgbequb'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))
zgbequb'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))
cgeequb'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))
dgeequb'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))
sgeequb'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))
zgeequb'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))
cheequb'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))
zheequb'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))
cpoequb'_ :: CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))
dpoequb'_ :: CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))
spoequb'_ :: CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))
zpoequb'_ :: CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))
csyequb'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))
dsyequb'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))
ssyequb'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))
zsyequb'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))
chbgv'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))
zhbgv'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))
dsbgv'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))))
ssbgv'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))))
chbgvd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))
zhbgvd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))
dsbgvd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))))
ssbgvd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))))
chbgst'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))
zhbgst'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))
chbgvx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))))))))
zhbgvx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))))))))
dsbgst'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))
ssbgst'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))
dsbgvx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))))))))
ssbgvx'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))))))))
chegv'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))))))
zhegv'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))))))
chegvd'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))))))
zhegvd'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))))))
chegst'_ :: CInt -> (CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
zhegst'_ :: CInt -> (CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
chegvx'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))
zhegvx'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))
cggglm'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt)))))))))))
dggglm'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))
sggglm'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))
zggglm'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt)))))))))))
cungql'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
zungql'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
cunglq'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
cungrq'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
zunglq'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
zungrq'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
cungbr'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))))
cunghr'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
cungqr'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
cungtr'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
zungbr'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))))
zunghr'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
zungqr'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
zungtr'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
chpgv'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
zhpgv'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
dspgv'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))
sspgv'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))
chpgvd'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
zhpgvd'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
dspgvd'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))
sspgvd'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))
chpgst'_ :: CInt -> (CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt))))))
zhpgst'_ :: CInt -> (CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt))))))
chpgvx'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))
zhpgvx'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))
dopgtr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
sopgtr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
cupgtr'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dspgst'_ :: CInt -> (CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))
sspgst'_ :: CInt -> (CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))
zupgtr'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dspgvx'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))
sspgvx'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))
dorgql'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
sorgql'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
dorglq'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
dorgrq'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
sorglq'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
sorgrq'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
dorgbr'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))))
dorghr'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
dorgqr'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
sorgbr'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))))
dorgtr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))
sorghr'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
sorgqr'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
sorgtr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))
dsygv'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))))))
ssygv'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))))))
dsygvd'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))))))
ssygvd'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))))))
dsygst'_ :: CInt -> (CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
ssygst'_ :: CInt -> (CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
dsygvx'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> (CDouble -> (CInt -> (CInt -> (CDouble -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))
ssygvx'_ :: CInt -> (CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> (CFloat -> (CInt -> (CInt -> (CFloat -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))
cgehrd'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
dgehrd'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
sgehrd'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
zgehrd'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
cgghrd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))))
dgghrd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))))
sgghrd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))))
zgghrd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))))
dgejsv'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CInt) -> (IO CInt))))))))))))))))))
sgejsv'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CInt) -> (IO CInt))))))))))))))))))
cgels'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
dgels'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))
sgels'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))
zgels'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
cgelsd'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (CFloat -> ((Ptr CInt) -> (IO CInt)))))))))))
dgelsd'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CDouble -> ((Ptr CInt) -> (IO CInt)))))))))))
sgelsd'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CFloat -> ((Ptr CInt) -> (IO CInt)))))))))))
zgelsd'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (CDouble -> ((Ptr CInt) -> (IO CInt)))))))))))
cgelqf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
dgelqf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))
sgelqf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))
zgelqf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
cgelss'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (CFloat -> ((Ptr CInt) -> (IO CInt)))))))))))
dgelss'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CDouble -> ((Ptr CInt) -> (IO CInt)))))))))))
sgelss'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CFloat -> ((Ptr CInt) -> (IO CInt)))))))))))
zgelss'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (CDouble -> ((Ptr CInt) -> (IO CInt)))))))))))
cgelsy'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (CFloat -> ((Ptr CInt) -> (IO CInt)))))))))))
dgelsy'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (CDouble -> ((Ptr CInt) -> (IO CInt)))))))))))
sgelsy'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (CFloat -> ((Ptr CInt) -> (IO CInt)))))))))))
zgelsy'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (CDouble -> ((Ptr CInt) -> (IO CInt)))))))))))
cgglse'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt)))))))))))
dgglse'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))
sgglse'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))
zgglse'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt)))))))))))
cunmql'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
zunmql'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cunmlq'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cunmrq'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
zunmlq'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
zunmrq'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cunmbr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))
cunmhr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))
cunmqr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cunmtr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
zunmbr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))
zunmhr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))
zunmqr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
zunmtr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cunmrz'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))
zunmrz'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))
dopmtr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))
sopmtr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))
cupmtr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
zupmtr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
dormql'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
sormql'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
dormlq'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
dormrq'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
sormlq'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
sormrq'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
dormbr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))
dormhr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))
dormqr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
sormbr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))
dormtr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
sormhr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))
sormqr'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
sormtr'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
dormrz'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))
sormrz'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))
zcposv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))
dsposv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))
cgeqp3'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (IO CInt)))))))
dgeqp3'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (IO CInt)))))))
sgeqp3'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (IO CInt)))))))
zgeqp3'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (IO CInt)))))))
cgeqlf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
dgeqlf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))
cgeqpf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (IO CInt)))))))
dgeqpf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (IO CInt)))))))
cgeqrf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
dgeqrf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))
sgeqlf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))
sgeqpf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (IO CInt)))))))
sgeqrf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))
zgeqlf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
zgeqpf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (IO CInt)))))))
zgeqrf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
cggqrf'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))))))
dggqrf'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))))))
sggqrf'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))))))
zggqrf'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))))))
cgeqrfp'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
dgeqrfp'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))
sgeqrfp'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))
zgeqrfp'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
cgbrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))
dgbrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))
sgbrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))
zgbrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))
cpbrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
dpbrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
spbrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
zpbrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
ctbrfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
dtbrfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
stbrfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
ztbrfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
cgerqf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
dgerqf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))
sgerqf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))
zgerqf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
cgerfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
dgerfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
sgerfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
zgerfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
cherfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
zherfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
chfrk'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CFloat -> ((Ptr ()) -> (CInt -> (CFloat -> ((Ptr ()) -> (IO CInt)))))))))))
zhfrk'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CDouble -> ((Ptr ()) -> (CInt -> (CDouble -> ((Ptr ()) -> (IO CInt)))))))))))
dsfrk'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> (CInt -> (CDouble -> ((Ptr CDouble) -> (IO CInt)))))))))))
ssfrk'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> (CInt -> (CFloat -> ((Ptr CFloat) -> (IO CInt)))))))))))
cggrqf'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))))))
dggrqf'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))))))
sggrqf'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))))))
zggrqf'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))))))
cporfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))
dporfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))
sporfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))
zporfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))
chprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))
zhprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))
cpprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))
dpprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))
spprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))
zpprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))
csprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))
dsprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))
ssprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))
zsprfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))
ctprfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))
dtprfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))
stprfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))
ztprfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))
ctrrfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))
dtrrfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))
strrfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))
ztrrfs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))
cgtrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))))
dgtrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))))
sgtrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))))
zgtrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))))
cptrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> ((Ptr CFloat) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))
dptrfs'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))
sptrfs'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))
zptrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> ((Ptr CDouble) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))
csyrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
dsyrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
ssyrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
zsyrfs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
ctzrzf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
dtzrzf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))
stzrzf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))
ztzrzf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
cgbsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
dgbsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))
sgbsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))
zgbsv'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
cpbsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
dpbsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))
spbsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))
zpbsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
cpbstf'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))
dpbstf'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))
spbstf'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))
zpbstf'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))
cgbsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))))))
dgbsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))))))
sgbsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))))))
zgbsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))))))
cpbsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))
dpbsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))
spbsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))
zpbsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))
dbdsdc'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CInt) -> (IO CInt))))))))))))
sbdsdc'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CInt) -> (IO CInt))))))))))))
cbdsqr'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))))
dbdsqr'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))))
sbdsqr'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))))
zbdsqr'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))))))
cgesv'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dgesv'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
sgesv'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
zgesv'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
chesv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
zhesv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
cgesdd'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
dgesdd'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
sgesdd'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
cgesvd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))))))))
dgesvd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))))))))
zgesdd'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
sgesvd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))))))))
zgesvd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))))))))
dgesvj'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))))))))
sgesvj'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))))))))
cgesvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))))
dgesvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))))
sgesvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))))
zgesvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))))
chesvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))
zhesvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))
dtfsm'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CDouble -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))))
stfsm'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CFloat -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))))
cggsvd'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))))
dggsvd'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))))
sggsvd'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))))
zggsvd'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))))
ctgsja'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> (CFloat -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))))))
dtgsja'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> (CDouble -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))))))
ctgsna'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
dtgsna'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
stgsja'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> (CFloat -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))))))
stgsna'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
ztgsja'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> (CDouble -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))))))))))))))))))
ztgsna'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))))
cggsvp'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CFloat -> (CFloat -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))))))))))
dggsvp'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (CDouble -> (CDouble -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))))))))))))
sggsvp'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (CFloat -> (CFloat -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))))))))))))
zggsvp'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (CDouble -> (CDouble -> ((Ptr CInt) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))))))))))))
ctgsyl'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))
dtgsyl'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))
stgsyl'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))
ztgsyl'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))
ctgsen'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))))))
dtgsen'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CInt) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))))))
stgsen'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CInt) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))))))
ztgsen'_ :: CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))))))
ddisna'_ :: CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))
sdisna'_ :: CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))
cposv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dposv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
sposv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
zposv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
chpsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
cposvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))))
dposvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))))
sposvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))))
zhpsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
zposvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))))
cppsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dppsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
sppsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
zppsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
cspsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dspsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
sspsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
zspsv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
chpsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
zhpsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
cppsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))
dppsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))
sppsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CChar) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))
zppsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CChar) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))
cspsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
dspsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
sspsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
zspsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
ctrsna'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))
dtrsna'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))
strsna'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))
ztrsna'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))))))))))))
ctrsyl'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))))))))
dtrsyl'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))))))))
strsyl'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))))))))
ztrsyl'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))))))))
ctrsen'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))
dtrsen'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))
strsen'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))
ztrsen'_ :: CInt -> (CChar -> (CChar -> ((Ptr CInt) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))
cgtsv'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dgtsv'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
sgtsv'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
zgtsv'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
cptsv'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dptsv'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
sptsv'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
zptsv'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
cgtsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))))))
dgtsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))))))
sgtsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))))))))))))))
zgtsvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))))))))))))))
cptsvx'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> ((Ptr CFloat) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
dptsvx'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
sptsvx'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))
zptsvx'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> ((Ptr CDouble) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))
csysv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
dsysv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))
ssysv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))
zsysv'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
csysvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))
dsysvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))
ssysvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))))))))))))
zsysvx'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))))))))))))
chbtrd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
zhbtrd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cgbtrf'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))
dgbtrf'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))
sgbtrf'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))
zgbtrf'_ :: CInt -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))))
cpbtrf'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))
dpbtrf'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))
spbtrf'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))
zpbtrf'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))
dsbtrd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
ssbtrd'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
cgbtrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
dgbtrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
sgbtrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
zgbtrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cpbtrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
dpbtrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))
spbtrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))
zpbtrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
ctbtrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
dtbtrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
stbtrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
ztbtrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
chetrd'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (IO CInt))))))))
zhetrd'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (IO CInt))))))))
cgetrf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
dgetrf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
sgetrf'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
zgetrf'_ :: CInt -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
chetrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
zhetrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
cgetri'_ :: CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))
dgetri'_ :: CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))
sgetri'_ :: CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))
zgetri'_ :: CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt)))))
chetri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
zhetri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
cgetrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
dgetrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))
sgetrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))
zgetrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
chetrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
zhetrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
cpftrf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt)))))
dpftrf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))
spftrf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))
zpftrf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt)))))
cpftri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt)))))
dpftri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))
spftri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))
zpftri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt)))))
ctftri'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt))))))
dtftri'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))
stftri'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))
ztftri'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt))))))
cpftrs'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dpftrs'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
spftrs'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
zpftrs'_ :: CInt -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
ctfttp'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt))))))
dtfttp'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))
stfttp'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))
ztfttp'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt))))))
ctfttr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dtfttr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
stfttr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
ztfttr'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
cpotrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))
dpotrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))
spotrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))
zpotrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))
cpotri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))
dpotri'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))
spotri'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))
zpotri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt)))))
cpotrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dpotrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
spotrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
zpotrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
chptrd'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr ()) -> (IO CInt)))))))
zhptrd'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr ()) -> (IO CInt)))))))
chptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt)))))
zhptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt)))))
chptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt)))))
zhptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt)))))
cpptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt))))
dpptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (IO CInt))))
spptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (IO CInt))))
zpptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt))))
dsptrd'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))))))
ssptrd'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))))))
cpptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt))))
csptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt)))))
dpptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (IO CInt))))
dsptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CInt) -> (IO CInt)))))
spptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (IO CInt))))
ssptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CInt) -> (IO CInt)))))
zpptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt))))
zsptrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt)))))
ctpttf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt))))))
dtpttf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))
stpttf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))
ztpttf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt))))))
chptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
zhptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
csptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt)))))
dsptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CInt) -> (IO CInt)))))
ssptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CInt) -> (IO CInt)))))
zsptri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt)))))
ctptri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt)))))
dtptri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))
stptri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))
ztptri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (IO CInt)))))
cpptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
dpptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
spptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
zpptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))
csptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dsptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))
ctpttr'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))
dtpttr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))
ssptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))
stpttr'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))
zsptrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
ztpttr'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))
ctptrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
dtptrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))
stptrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))
ztptrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
ctrttf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
dtrttf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt)))))))
strttf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt)))))))
ztrttf'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt)))))))
ctrtri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))
dtrtri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))
strtri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))
ztrtri'_ :: CInt -> (CChar -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))
ctrttp'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
dtrttp'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (IO CInt))))))
strttp'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (IO CInt))))))
ztrttp'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (IO CInt))))))
ctrtrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
dtrtrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> (CInt -> (IO CInt))))))))))
strtrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> (CInt -> (IO CInt))))))))))
ztrtrs'_ :: CInt -> (CChar -> (CChar -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr ()) -> (CInt -> (IO CInt))))))))))
cpstrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (CFloat -> (IO CInt))))))))
dpstrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (CDouble -> (IO CInt))))))))
spstrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (CFloat -> (IO CInt))))))))
zpstrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr CInt) -> (CDouble -> (IO CInt))))))))
cgttrf'_ :: CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt))))))
dgttrf'_ :: CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CInt) -> (IO CInt))))))
sgttrf'_ :: CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CInt) -> (IO CInt))))))
zgttrf'_ :: CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> (IO CInt))))))
cpttrf'_ :: CInt -> ((Ptr CFloat) -> ((Ptr ()) -> (IO CInt)))
dpttrf'_ :: CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt)))
spttrf'_ :: CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt)))
zpttrf'_ :: CInt -> ((Ptr CDouble) -> ((Ptr ()) -> (IO CInt)))
cgttrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
dgttrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))))
sgttrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))))
zgttrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))))
cpttrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dpttrs'_ :: CInt -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))
spttrs'_ :: CInt -> (CInt -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))
zpttrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> ((Ptr ()) -> ((Ptr ()) -> (CInt -> (IO CInt))))))))
dsytrd'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CDouble) -> ((Ptr CDouble) -> ((Ptr CDouble) -> (IO CInt))))))))
ssytrd'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CFloat) -> ((Ptr CFloat) -> ((Ptr CFloat) -> (IO CInt))))))))
csytrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
dsytrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
ssytrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
zsytrf'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
csytri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
dsytri'_ :: CInt -> (CChar -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
ssytri'_ :: CInt -> (CChar -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
zsytri'_ :: CInt -> (CChar -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> (IO CInt))))))
csytrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))
dsytrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CDouble) -> (CInt -> ((Ptr CInt) -> ((Ptr CDouble) -> (CInt -> (IO CInt)))))))))
ssytrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr CFloat) -> (CInt -> ((Ptr CInt) -> ((Ptr CFloat) -> (CInt -> (IO CInt)))))))))
zsytrs'_ :: CInt -> (CChar -> (CInt -> (CInt -> ((Ptr ()) -> (CInt -> ((Ptr CInt) -> ((Ptr ()) -> (CInt -> (IO CInt)))))))))


-- | Part of Jalla. This module contains the classes that define LAPACKE
--   operations, and the instantiations for [Complex] CFloat and CDouble
--   types. Some LAPACKE functions don't really fit the rest, namely tgex
--   tgsen. They are, however, probably not needed.
module Numeric.Jalla.Foreign.LapackeOps
class (Field1 e, Field1 se) => LapackeOps e se | e -> se
gbequ :: LapackeOps e se => Int -> Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr se -> Ptr se -> Ptr se -> Ptr se -> Ptr se -> IO Int
gbequb :: LapackeOps e se => Int -> Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr se -> Ptr se -> Ptr se -> Ptr se -> Ptr se -> IO Int
gbsv :: LapackeOps e se => Int -> Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr CInt -> Ptr e -> Int -> IO Int
gbtrf :: LapackeOps e se => Int -> Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr CInt -> IO Int
gebrd :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr se -> Ptr se -> Ptr e -> Ptr e -> IO Int
geequ :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr se -> Ptr se -> Ptr se -> Ptr se -> Ptr se -> IO Int
geequb :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr se -> Ptr se -> Ptr se -> Ptr se -> Ptr se -> IO Int
gehrd :: LapackeOps e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
gelqf :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
gelsd :: LapackeOps e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> Int -> Ptr se -> se -> Ptr CInt -> IO Int
gelss :: LapackeOps e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> Int -> Ptr se -> se -> Ptr CInt -> IO Int
gelsy :: LapackeOps e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> Int -> Ptr CInt -> se -> Ptr CInt -> IO Int
geqlf :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
geqp3 :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr CInt -> Ptr e -> IO Int
geqpf :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr CInt -> Ptr e -> IO Int
geqrf :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
gerqf :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
gesv :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr CInt -> Ptr e -> Int -> IO Int
getrf :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr CInt -> IO Int
getri :: LapackeOps e se => Int -> Int -> Ptr e -> Int -> Ptr CInt -> IO Int
ggglm :: LapackeOps e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> Int -> Ptr e -> Ptr e -> Ptr e -> IO Int
gglse :: LapackeOps e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> Int -> Ptr e -> Ptr e -> Ptr e -> IO Int
ggqrf :: LapackeOps e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> Ptr e -> Int -> Ptr e -> IO Int
ggrqf :: LapackeOps e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> Ptr e -> Int -> Ptr e -> IO Int
gtsv :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Ptr e -> Ptr e -> Ptr e -> Int -> IO Int
gttrf :: LapackeOps e se => Int -> Ptr e -> Ptr e -> Ptr e -> Ptr e -> Ptr CInt -> IO Int
poequ :: LapackeOps e se => Int -> Int -> Ptr e -> Int -> Ptr se -> Ptr se -> Ptr se -> IO Int
poequb :: LapackeOps e se => Int -> Int -> Ptr e -> Int -> Ptr se -> Ptr se -> Ptr se -> IO Int
ptcon :: LapackeOps e se => Int -> Ptr se -> Ptr e -> se -> Ptr se -> IO Int
ptsv :: LapackeOps e se => Int -> Int -> Int -> Ptr se -> Ptr e -> Ptr e -> Int -> IO Int
pttrf :: LapackeOps e se => Int -> Ptr se -> Ptr e -> IO Int
stein :: LapackeOps e se => Int -> Int -> Ptr se -> Ptr se -> Int -> Ptr se -> Ptr CInt -> Ptr CInt -> Ptr e -> Int -> Ptr CInt -> IO Int
tzrzf :: LapackeOps e se => Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
gesvd :: LapackeOps e se => Int -> CChar -> CChar -> Int -> Int -> Ptr e -> Int -> Ptr se -> Ptr e -> Int -> Ptr e -> Int -> Ptr se -> IO (Int)
class (LapackeOps e se) => LapackeOpsReal e se
orghr :: LapackeOpsReal e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
orglq :: LapackeOpsReal e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
orgql :: LapackeOpsReal e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
orgqr :: LapackeOpsReal e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
orgrq :: LapackeOpsReal e se => Int -> Int -> Int -> Int -> Ptr e -> Int -> Ptr e -> IO Int
ptrfs :: LapackeOpsReal e se => Int -> Int -> Int -> Ptr e -> Ptr e -> Ptr e -> Ptr e -> Ptr e -> Int -> Ptr e -> Int -> Ptr e -> Ptr e -> IO Int
pttrs :: LapackeOpsReal e se => Int -> Int -> Int -> Ptr e -> Ptr e -> Ptr e -> Int -> IO Int
sterf :: LapackeOpsReal e se => Int -> Ptr e -> Ptr e -> IO Int
class (LapackeOps (Complex e) e) => LapackeOpsComplex e
unghr :: LapackeOpsComplex e => Int -> Int -> Int -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> IO Int
unglq :: LapackeOpsComplex e => Int -> Int -> Int -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> IO Int
ungql :: LapackeOpsComplex e => Int -> Int -> Int -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> IO Int
ungqr :: LapackeOpsComplex e => Int -> Int -> Int -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> IO Int
ungrq :: LapackeOpsComplex e => Int -> Int -> Int -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> IO Int
instance LAPACKEEnum UpLo CChar
instance LapackeOps CFloat CFloat
instance LapackeOps CDouble CDouble
instance LapackeOps (Complex CFloat) CFloat
instance LapackeOps (Complex CDouble) CDouble
instance LapackeOpsComplex CFloat
instance LapackeOpsComplex CDouble
instance LapackeOpsReal CFloat CFloat
instance LapackeOpsReal CDouble CDouble


-- | Part of Jalla. This module contains the classes that define BLAS
--   operations, and the instantiations for [Complex] CFloat and CDouble
--   types.
module Numeric.Jalla.Foreign.BlasOps

-- | Low level BLAS operations. Directly call the wrapped BLAS functions.
--   Things to note: <i>dot</i> returns a <i>Float</i> for the Float
--   instance. If you want the double precision result, use <a>realdot</a>
--   from the <a>BlasOpsReal</a> class.
class (Field1 e, Storable e) => BlasOps e
nrm2 :: BlasOps e => Int -> Ptr e -> Int -> IO e
asum :: BlasOps e => Int -> Ptr e -> Int -> IO e
iamax :: BlasOps e => Int -> Ptr e -> Int -> IO CblasIndex
swap :: BlasOps e => Int -> Ptr e -> Int -> Ptr e -> Int -> IO ()
copy :: BlasOps e => Int -> Ptr e -> Int -> Ptr e -> Int -> IO ()
axpy :: BlasOps e => Int -> e -> Ptr e -> Int -> Ptr e -> Int -> IO ()
scal :: BlasOps e => Int -> e -> Ptr e -> Int -> IO ()
dot :: BlasOps e => Int -> Ptr e -> Int -> Ptr e -> Int -> IO e
gemv :: BlasOps e => CblasOrder -> CblasTranspose -> Int -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> e -> Ptr e -> Int -> IO ()
gbmv :: BlasOps e => CblasOrder -> CblasTranspose -> Int -> Int -> Int -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> e -> Ptr e -> Int -> IO ()
trmv :: BlasOps e => CblasOrder -> CblasUplo -> CblasTranspose -> CblasDiag -> Int -> Ptr e -> Int -> Ptr e -> Int -> IO ()
tbmv :: BlasOps e => CblasOrder -> CblasUplo -> CblasTranspose -> CblasDiag -> Int -> Int -> Ptr e -> Int -> Ptr e -> Int -> IO ()
tpmv :: BlasOps e => CblasOrder -> CblasUplo -> CblasTranspose -> CblasDiag -> Int -> Ptr e -> Ptr e -> Int -> IO ()
trsv :: BlasOps e => CblasOrder -> CblasUplo -> CblasTranspose -> CblasDiag -> Int -> Ptr e -> Int -> Ptr e -> Int -> IO ()
tbsv :: BlasOps e => CblasOrder -> CblasUplo -> CblasTranspose -> CblasDiag -> Int -> Int -> Ptr e -> Int -> Ptr e -> Int -> IO ()
tpsv :: BlasOps e => CblasOrder -> CblasUplo -> CblasTranspose -> CblasDiag -> Int -> Ptr e -> Ptr e -> Int -> IO ()
gemm :: BlasOps e => CblasOrder -> CblasTranspose -> CblasTranspose -> Int -> Int -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> e -> Ptr e -> Int -> IO ()
symm :: BlasOps e => CblasOrder -> CblasSide -> CblasUplo -> Int -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> e -> Ptr e -> Int -> IO ()
syrk :: BlasOps e => CblasOrder -> CblasUplo -> CblasTranspose -> Int -> Int -> e -> Ptr e -> Int -> e -> Ptr e -> Int -> IO ()
syr2k :: BlasOps e => CblasOrder -> CblasUplo -> CblasTranspose -> Int -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> e -> Ptr e -> Int -> IO ()
trmm :: BlasOps e => CblasOrder -> CblasSide -> CblasUplo -> CblasTranspose -> CblasDiag -> Int -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> IO ()
trsm :: BlasOps e => CblasOrder -> CblasSide -> CblasUplo -> CblasTranspose -> CblasDiag -> Int -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> IO ()
class (Real e, BlasOps e) => BlasOpsReal e
realdot :: BlasOpsReal e => Int -> Ptr e -> Int -> Ptr e -> Int -> IO CDouble
rotg :: BlasOpsReal e => Ptr e -> Ptr e -> Ptr e -> Ptr e -> IO ()
rotmg :: BlasOpsReal e => Ptr e -> Ptr e -> Ptr e -> e -> Ptr e -> IO ()
rot :: BlasOpsReal e => Int -> Ptr e -> Int -> Ptr e -> Int -> e -> e -> IO ()
rotm :: BlasOpsReal e => Int -> Ptr e -> Int -> Ptr e -> Int -> Ptr e -> IO ()
symv :: BlasOpsReal e => CblasOrder -> CblasUplo -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> e -> Ptr e -> Int -> IO ()
sbmv :: BlasOpsReal e => CblasOrder -> CblasUplo -> Int -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> e -> Ptr e -> Int -> IO ()
spmv :: BlasOpsReal e => CblasOrder -> CblasUplo -> Int -> e -> Ptr e -> Ptr e -> Int -> e -> Ptr e -> Int -> IO ()
ger :: BlasOpsReal e => CblasOrder -> Int -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> Ptr e -> Int -> IO ()
syr :: BlasOpsReal e => CblasOrder -> CblasUplo -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> IO ()
spr :: BlasOpsReal e => CblasOrder -> CblasUplo -> Int -> e -> Ptr e -> Int -> Ptr e -> IO ()
syr2 :: BlasOpsReal e => CblasOrder -> CblasUplo -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> Ptr e -> Int -> IO ()
spr2 :: BlasOpsReal e => CblasOrder -> CblasUplo -> Int -> e -> Ptr e -> Int -> Ptr e -> Int -> Ptr e -> IO ()
class (BlasOps (Complex e)) => BlasOpsComplex e
dotu_sub :: BlasOpsComplex e => Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> IO ()
dotc_sub :: BlasOpsComplex e => Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> IO ()
scal' :: BlasOpsComplex e => Int -> e -> Ptr (Complex e) -> Int -> IO ()
hemv :: BlasOpsComplex e => CblasOrder -> CblasUplo -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> IO ()
hbmv :: BlasOpsComplex e => CblasOrder -> CblasUplo -> Int -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> IO ()
hpmv :: BlasOpsComplex e => CblasOrder -> CblasUplo -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> IO ()
geru :: BlasOpsComplex e => CblasOrder -> Int -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> IO ()
gerc :: BlasOpsComplex e => CblasOrder -> Int -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> IO ()
her :: BlasOpsComplex e => CblasOrder -> CblasUplo -> Int -> e -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> IO ()
hpr :: BlasOpsComplex e => CblasOrder -> CblasUplo -> Int -> e -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> IO ()
her2 :: BlasOpsComplex e => CblasOrder -> CblasUplo -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> IO ()
hpr2 :: BlasOpsComplex e => CblasOrder -> CblasUplo -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> IO ()
hemm :: BlasOpsComplex e => CblasOrder -> CblasSide -> CblasUplo -> Int -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> IO ()
herk :: BlasOpsComplex e => CblasOrder -> CblasUplo -> CblasTranspose -> Int -> Int -> e -> Ptr (Complex e) -> Int -> e -> Ptr (Complex e) -> Int -> IO ()
her2k :: BlasOpsComplex e => CblasOrder -> CblasUplo -> CblasTranspose -> Int -> Int -> Ptr (Complex e) -> Ptr (Complex e) -> Int -> Ptr (Complex e) -> Int -> e -> Ptr (Complex e) -> Int -> IO ()

-- | The member functions of this class facilitate writing values of
--   primitive types to raw memory (which may have been allocated with the
--   above mentioned routines) and reading values from blocks of raw
--   memory. The class, furthermore, includes support for computing the
--   storage requirements and alignment restrictions of storable types.
--   
--   Memory addresses are represented as values of type <tt><a>Ptr</a>
--   a</tt>, for some <tt>a</tt> which is an instance of class
--   <a>Storable</a>. The type argument to <a>Ptr</a> helps provide some
--   valuable type safety in FFI code (you can't mix pointers of different
--   types without an explicit cast), while helping the Haskell type system
--   figure out which marshalling method is needed for a given pointer.
--   
--   All marshalling between Haskell and a foreign language ultimately
--   boils down to translating Haskell data structures into the binary
--   representation of a corresponding data structure of the foreign
--   language and vice versa. To code this marshalling in Haskell, it is
--   necessary to manipulate primitive data types stored in unstructured
--   memory blocks. The class <a>Storable</a> facilitates this manipulation
--   on all types for which it is instantiated, which are the standard
--   basic types of Haskell, the fixed size <tt>Int</tt> types
--   (<a>Int8</a>, <a>Int16</a>, <a>Int32</a>, <a>Int64</a>), the fixed
--   size <tt>Word</tt> types (<a>Word8</a>, <a>Word16</a>, <a>Word32</a>,
--   <a>Word64</a>), <a>StablePtr</a>, all types from
--   <a>Foreign.C.Types</a>, as well as <a>Ptr</a>.
class Storable a
instance BlasOps CFloat
instance BlasOps CDouble
instance BlasOps (Complex CFloat)
instance BlasOps (Complex CDouble)
instance BlasOpsComplex CFloat
instance BlasOpsComplex CDouble
instance BlasOpsReal CFloat
instance BlasOpsReal CDouble


-- | Functions to work with C-like arrays. This is provided to have arrays
--   which work with CBLAS and LAPACKE libraries.
module Numeric.Jalla.CVector
class (Indexable (vec e) Index e, Field1 e) => GVector vec e
vectorLength :: GVector vec e => vec e -> Index
class (BlasOps e, GVector vec e, Show (vec e)) => CVector vec e
vectorAlloc :: CVector vec e => Index -> IO (vec e)
withCVector :: CVector vec e => vec e -> (Ptr e -> IO a) -> IO a
inc :: CVector vec e => vec e -> Index

-- | Vector/vector operations.
class (CVector vec e) => VectorVector vec e where v1 ||+ v2 = modifyVector v1 $ vectorAdd 1 v2 v1 ||- v2 = modifyVector v1 $ vectorAdd (- 1) v2 v1 ||* v2 = innerProduct v1 v2
(||+) :: VectorVector vec e => vec e -> vec e -> vec e
(||-) :: VectorVector vec e => vec e -> vec e -> vec e
(||*) :: VectorVector vec e => vec e -> vec e -> e

-- | Vector manipulations by a scalar.
class (CVector vec e) => VectorScalar vec e where a |.* b = vectorMap (* b) a a |./ b = vectorMap (/ b) a a |.+ b = vectorMap (+ b) a a |.- b = vectorMap ((-) b) a
(|.*) :: VectorScalar vec e => vec e -> e -> vec e
(|./) :: VectorScalar vec e => vec e -> e -> vec e
(|.+) :: VectorScalar vec e => vec e -> e -> vec e
(|.-) :: VectorScalar vec e => vec e -> e -> vec e
data VMM s vec e a
createVector :: CVector vec e => Index -> VMM s vec e a -> vec e
modifyVector :: CVector vec e => vec e -> VMM s vec e a -> vec e

-- | Adds alpha * v to the current vector.
vectorAdd :: CVector vec e => e -> vec e -> VMM s vec e ()

-- | Maps a unary function over the elements of a vector and returns the
--   resulting vector.
vectorMap :: (CVector vec1 e1, CVector vec2 e2) => (e1 -> e2) -> vec1 e1 -> vec2 e2

-- | Maps a binary function to the elements of two vectors and returns the
--   resulting vector.
vectorBinMap :: (CVector vec1 e1, CVector vec2 e2, CVector vec3 e3) => (e1 -> e2 -> e3) -> vec1 e1 -> vec2 e2 -> vec3 e3
listVector :: (CVector vec e) => [e] -> vec e
vectorList :: GVector vec e => vec e -> [e]
vectorGetElem :: CVector vec e => vec e -> Index -> e
innerProduct :: (BlasOps e, CVector vec e) => vec e -> vec e -> e

-- | Make a copy of the input vector. Using the cblas_*copy functions.
copyVector :: (BlasOps e, CVector vec e, CVector vec2 e) => vec e -> IO (vec2 e)

-- | Copies from one vector to the other, in-place and therefore unsafely.
--   Uses the BLAS <a>copy</a> function. <i>min (vectorLength src)
--   (vectorlength dest)</i> elements are copied from the first to the
--   second vector.
unsafeCopyVector :: (CVector vec e, CVector vec2 e) => vec e -> vec2 e -> IO ()

-- | Computes v2 &lt;- alpha * v1 + v2. The result is stored in the memory
--   of v2, therefore this is unsafe and low level, only for internal use.
unsafeVectorAdd :: (BlasOps e, CVector vec e) => e -> vec e -> vec e -> IO ()
unsafeVectorMap :: (CVector vec1 e1, CVector vec2 e2) => (e1 -> e2) -> vec1 e1 -> vec2 e2 -> IO ()
unsafeVectorBinMap :: (CVector vec1 e1, CVector vec2 e2, CVector vec3 e3) => (e1 -> e2 -> e3) -> vec1 e1 -> vec2 e2 -> vec3 e3 -> IO ()

-- | Haskell type representing the C <tt>float</tt> type.
data CFloat :: *

-- | Haskell type representing the C <tt>double</tt> type.
data CDouble :: *

-- | Complex numbers are an algebraic type.
--   
--   For a complex number <tt>z</tt>, <tt><a>abs</a> z</tt> is a number
--   with the magnitude of <tt>z</tt>, but oriented in the positive real
--   direction, whereas <tt><a>signum</a> z</tt> has the phase of
--   <tt>z</tt>, but unit magnitude.
data Complex a :: * -> *
instance Monad (VMM s vec e)
instance Functor (VMM s vec e)
instance Applicative (VMM s vec e)
instance (BlasOps e, CVector vec e) => IMM (VMM s vec e) Index (vec e) e


module Numeric.Jalla.Vector

-- | Vector is the <a>CVector</a> type that is used in Jalla. Somehow
--   Haddock does not want to create documentation for the class instances
--   of <a>Vector</a>, I try to figure it out.
data Vector e
[Vector] :: !(ForeignPtr e) -> !Index -> !Index -> Vector e
[vecP] :: Vector e -> !(ForeignPtr e)
[vecInc] :: Vector e -> !Index
[vecLength] :: Vector e -> !Index
instance BlasOps e => GVector Vector e
instance BlasOps e => CVector Vector e
instance BlasOps e => Indexable (Vector e) Index e
instance BlasOps e => VectorVector Vector e
instance BlasOps e => VectorScalar Vector e
instance (BlasOps e, Eq e) => Eq (Vector e)
instance (BlasOps e, Show e) => Show (Vector e)
instance (BlasOps e, Num e) => Num (Vector e)
instance (BlasOps e, Num e, Fractional e) => Fractional (Vector e)
instance (BlasOps e, Num e, Fractional e) => Floating (Vector e)


-- | This is the matrix module of Jalla.
module Numeric.Jalla.Matrix

-- | Generic matrix interface.
class (Field1 e, Indexable (mat e) IndexPair e) => GMatrix mat e where shape m = (rowCount m, colCount m) rowCount = fst . shape colCount = snd . shape
shape :: GMatrix mat e => mat e -> Shape
rowCount :: GMatrix mat e => mat e -> Index
colCount :: GMatrix mat e => mat e -> Index

-- | Interface for matrices with underlying contiguous C array storage.
--   These matrices can be used with BLAS and LAPACK functions.
class (Storable e, BlasOps e, GMatrix mat e) => CMatrix mat e where type family CMatrixVector mat e :: * type family CMatrixVectorS mat e :: *
matrixAlloc :: CMatrix mat e => Shape -> IO (mat e)
withCMatrix :: CMatrix mat e => mat e -> (Ptr e -> IO a) -> IO a
lda :: CMatrix mat e => mat e -> Index
order :: CMatrix mat e => mat e -> Order
matrixForeignPtr :: CMatrix mat e => mat e -> ForeignPtr e

-- | Shape of a matrix with given transposedness and shape.
shapeTrans :: Transpose -> Shape -> Shape
class (Field1 e, BlasOps e, GMatrix mat e, CMatrix mat e) => MatrixMatrix mat e where m1 ## m2 | colCount m1 /= rowCount m2 = error "(##): shape mismatch!" | otherwise = unsafePerformIO $ matrixMult 1 NoTrans m1 NoTrans m2 (m1, t1) ##! (m2, t2) | colCountTrans t1 s1 /= rowCountTrans t2 s2 = error "(##): shape mismatch!" | otherwise = unsafePerformIO $ matrixMult 1 t1 m1 t2 m2 where s1 = shape m1 s2 = shape m2 m1 ##+ m2 = matrixBinMap (\ a b -> a + b) m1 m2 m1 ##- m2 = matrixBinMap (\ a b -> a - b) m1 m2
(##) :: MatrixMatrix mat e => mat e -> mat e -> mat e
(##!) :: MatrixMatrix mat e => (mat e, Transpose) -> (mat e, Transpose) -> mat e
(##+) :: MatrixMatrix mat e => mat e -> mat e -> mat e
(##-) :: MatrixMatrix mat e => mat e -> mat e -> mat e
class (CMatrix mat e, CVector vec e) => MatrixVector mat vec e
(#|) :: MatrixVector mat vec e => mat e -> vec e -> vec e
(|#) :: MatrixVector mat vec e => vec e -> mat e -> vec e

-- | Matrix operations with a scalar. The nomenclature is to be read
--   <i>Matrix - Scalar - [operation name]</i>, where <i>#</i> stands for
--   matrix, <i>.</i> stands for scalar.
class (Storable e, CMatrix mat e) => MatrixScalar mat e where a #.* b = matrixMap (* b) a a #./ b = matrixMap (/ b) a a #.+ b = matrixMap (+ b) a a #.- b = matrixMap ((-) b) a
(#.*) :: MatrixScalar mat e => mat e -> e -> mat e
(#./) :: MatrixScalar mat e => mat e -> e -> mat e
(#.+) :: MatrixScalar mat e => mat e -> e -> mat e
(#.-) :: MatrixScalar mat e => mat e -> e -> mat e

-- | This is the instance of <a>CMatrix</a> that Jalla provides. If you
--   don't have another <a>CMatrix</a> instance, <a>Matrix</a> is the one
--   you will want to use.
data Matrix e
data Order
[RowMajor] :: Order
[ColumnMajor] :: Order
data Transpose
[Trans] :: Transpose
[NoTrans] :: Transpose

-- | A construct to enable us to reference rows and columns in matrices,
--   thereby saving some cost on copying and memory allocation. The
--   referenced matrix will not be garbage collected (if I understand
--   <a>ForeignPtr</a> right) before one of the <a>RefVector</a>s
--   referencing it.
data RefVector e

-- | Matrix modification monad. This is used for creating and modifying
--   matrices efficiently.
data MMM s mat e a

-- | Create a new matrix of given size and run the given modification
--   action on it; then return The new matrix.
createMatrix :: (BlasOps e, CMatrix mat e) => Shape -> MMM s mat e a -> mat e

-- | Modify the given matrix using the given modification action; return
--   the modified matrix.
modifyMatrix :: (BlasOps e, CMatrix mat e) => mat e -> Transpose -> MMM s mat e a -> mat e

-- | Sets the diagonal with given index to the given values. Operates on
--   the matrix that is currently under modification.
setDiag :: (BlasOps e, CMatrix mat e) => Index -> [e] -> MMM s mat e ()

-- | Set a row in the current matrix to a list of elements.
setRow :: (BlasOps e, CMatrix mat e) => Index -> [e] -> MMM s mat e ()

-- | Set a column in the current matrix to a list of elements.
setColumn :: (BlasOps e, CMatrix mat e) => Index -> [e] -> MMM s mat e ()

-- | Set the block starting at a given index to the given CMatrix.
setBlock :: (BlasOps e, CMatrix mat e) => IndexPair -> mat e -> MMM s mat e ()

-- | Fill a range with a given element.
fillBlock :: (BlasOps e, CMatrix mat e) => IndexPair -> IndexPair -> e -> MMM s mat e ()

-- | Scales (multiplies) the given row of the matrix under construction by
--   a scalar.
scaleRow :: CMatrix mat e => e -> Index -> MMM s mat e ()

-- | Scales (multiplies) the given column of the matrix under construction
--   by a scalar.
scaleColumn :: CMatrix mat e => e -> Index -> MMM s mat e ()

-- | Reference a row in the matrix under construction. See also <a>row</a>.
refRow :: CMatrix mat e => Index -> MMM s mat e (RefVector e)

-- | Reference a column in the matrix under construction. See also
--   <a>column</a>.
refColumn :: CMatrix mat e => Index -> MMM s mat e (RefVector e)

-- | Map over a CMatrix. Applies the given function to each element in the
--   matrix and returns the resulting matrix.
matrixMap :: (Storable e1, Storable e2, CMatrix mat1 e1, CMatrix mat2 e2) => (e1 -> e2) -> mat1 e1 -> mat2 e2

-- | Map a binary function over two <a>CMatrix</a>s.
matrixBinMap :: (Storable e1, Storable e2, Storable e3, CMatrix mat1 e1, CMatrix mat2 e2, CMatrix mat3 e3) => (e1 -> e2 -> e3) -> mat1 e1 -> mat2 e2 -> mat3 e3

-- | Create a list of elements, in the given order, from the given matrix.
matrixList :: (GMatrix mat e) => Order -> mat e -> [e]

-- | Create a list of lists of elements from a matrix, representing the
--   rows of the matrix.
matrixLists :: (GMatrix mat e) => mat e -> [[e]]

-- | Create a matrix from a list of elements, stored in row-major.
listMatrix :: (BlasOps e, CMatrix mat e) => Shape -> [e] -> mat e

-- | Get association list of indices and elements for the given CMatrix.
matrixAssocs :: (BlasOps e, CMatrix mat e) => Order -> mat e -> [(IndexPair, e)]

-- | Get association list of indices and elements for the given GMatrix.
gmatrixAssocs :: (GMatrix mat e) => mat e -> [(IndexPair, e)]

-- | Get a column or row from a matrix.
row :: (CMatrix mat e, CVector vec e) => mat e -> Index -> vec e

-- | Get a column or row from a matrix.
column :: (CMatrix mat e, CVector vec e) => mat e -> Index -> vec e

-- | Get all rows or columns from a matrix.
rows :: (CMatrix mat e, CVector vec e) => mat e -> [vec e]

-- | Get all rows or columns from a matrix.
columns :: (CMatrix mat e, CVector vec e) => mat e -> [vec e]
prettyPrintMatrix :: (GMatrix mat e) => mat e -> [String]
prettyPrintMatrixIO :: (GMatrix mat e) => mat e -> IO ()

-- | Solves a system AX = B with LAPACKs xgesv procedure. Returns a matrix
--   with the solutions in its columns.
solveLinearSystem :: (BlasOps e, LapackeOps e se, CMatrix mat e) => mat e -> mat e -> mat e

-- | Invert. Implemented with LAPACK's getrf and getri, that is probably
--   more efficient than using solveLinearSystem.
invert :: (BlasOps e, LapackeOps e se, CMatrix mat e) => mat e -> Maybe (mat e)

-- | Compute the pseudo-inverse with the help of a SVD.
pseudoInverse :: (BlasOps e, se ~ FieldScalar e, BlasOps se, Real se, LapackeOps e se, MatrixMatrix mat e, CMatrix mat e) => mat e -> mat e

-- | Compute the Frobenius norm of a matrix.
frobNorm :: (BlasOps e, CMatrix mat e) => mat e -> e

-- | Returns the square identity matrix with given row number.
idMatrix :: (BlasOps e, CMatrix mat e) => Index -> mat e

-- | Multiply a matrix with a diagonal matrix, given only as a list of
--   diagonal entries. This uses references instead of copied vectors, to
--   work more memory efficient with large matrices.
matrixMultDiag :: (BlasOps e) => CMatrix mat e => (mat e, Transpose) -> [e] -> mat e

-- | Compute the singular value decomposition <i>U * S * V^T = A</i> of a
--   matrix <i>A</i>. U and V are (m,m) and (n,n) unitary matrices, and S
--   is a (m,n) matrix with nonzero elements only on the main diagonal.
--   These are the <i>singular values</i>.
--   
--   The extent to which <i>U</i> and <i>V^T</i> are computed can be chosen
--   by <a>SVDU</a> and <a>SVDVT</a> arguments. SVDU or SVDVT
--   <a>SVDFull</a> return the full (m,m) or (n,n) matrices. For
--   <a>SVDU</a> <a>SVDThin</a>, only the first min(m,n) columns of
--   <i>U</i> are computed. For <a>SVDVT</a> <a>SVDThin</a>, only the first
--   min(m,n) rows of <i>V^T</i> are computed. For <a>SVDNone</a>, the
--   respective matrix will not be returned.
--   
--   Note that <i>V^T</i> is indeed returned in its transposed form.
svd :: (BlasOps e, se ~ FieldScalar e, BlasOps se, LapackeOps e se, CMatrix mat e) => mat e -> (SVDU, SVDVT) -> SVD mat e

-- | Description of the result of a singular value decomposition with
--   <a>svd</a>.
data SVD mat e
[SVD] :: Maybe (mat e) -> Maybe (mat e) -> [FieldScalar e] -> SVD mat e

-- | The left, unitary matrix U. Nothing if the <i>SVDU SVDNone</i> was
--   selected.
[svdU] :: SVD mat e -> Maybe (mat e)

-- | The right singular vectors, VT (transposed, so the vectors are in the
--   rows). Nothing if <i>SVDVT SVDNone</i> was selected.
[svdVT] :: SVD mat e -> Maybe (mat e)

-- | The singular values, <i>s</i>.
[svdS] :: SVD mat e -> [FieldScalar e]

-- | SVD options for the output.
data SVDOpt

-- | Selects the output to be fully computed. For <i>U</i>, that means <i>m
--   x m</i>, for <i>VT</i> it means <i>n x n</i>.
[SVDFull] :: SVDOpt

-- | Selects Thin SVD. <i>U</i>: (m, min (m,n)), <i>VT</i>: (n, min (m,n))
[SVDThin] :: SVDOpt

-- | Deselects the output.
[SVDNone] :: SVDOpt

-- | SVD option for the <i>U</i> output.
data SVDU
[SVDU] :: SVDOpt -> SVDU

-- | SVD option for the <i>VT</i> output.
data SVDVT
[SVDVT] :: SVDOpt -> SVDVT
checkIndex :: Shape -> IndexPair -> Bool
inMatrixRange :: (BlasOps e, GMatrix mat e) => mat e -> IndexPair -> Bool

-- | Generate indices of a diagonal in a matrix of given shape.
diagIndices :: Shape -> Index -> [IndexPair]
matrixAlloc' :: (BlasOps e) => Shape -> IO (Matrix e)
matrixElem :: (Num e, BlasOps e, CMatrix mat e) => mat e -> IndexPair -> IO e

-- | Matrix multiplication. Computes alpha * A(^T) * B(^T).
matrixMult :: (BlasOps e, CMatrix mat e) => e -> Transpose -> mat e -> Transpose -> mat e -> IO (mat e)

-- | Sets an element in place, therefore this is unsafe. Range check is
--   done, and an error is raised if the given index is out of bounds.
unsafeMatrixSetElem :: (BlasOps e, CMatrix mat e) => mat e -> IndexPair -> e -> IO ()

-- | Unsafe matrix multiplication. The result is accumulated in the last
--   matrix argument; this function is unsafe because the memory of the
--   last argument is changed in place. This can be used for accumulating
--   many operations in a monad, maybe? Computes C &lt;- alpha * A(^T) *
--   B(^T) + beta * C
unsafeMatrixMult :: (BlasOps e, CMatrix mat e) => e -> Transpose -> mat e -> Transpose -> mat e -> e -> mat e -> IO ()

-- | Fill the matrix in place, therefore this is unsafe.
unsafeMatrixFill :: (Num e, BlasOps e, CMatrix mat e) => mat e -> e -> IO ()

-- | Copies a matrix into the storage of another matrix, in-place and
--   therefore unsafe Uses the BLAS copy routine from BlasOps. <i>NOTE</i>:
--   This uses BLAS <a>copy</a>, i.e. the LDA <i>must</i> be either m or n,
--   where (m,n) is the shape of the matrix.
unsafeMatrixCopy :: (BlasOps e, CMatrix mat e) => mat e -> Transpose -> mat e -> IO ()

-- | Solve a system AX = B with LAPACKs xgesv procedure. Replaces A with a
--   LU decomposition and B with the solution.
unsafeSolveLinearSystem :: (BlasOps e, LapackeOps e se, CMatrix mat e) => mat e -> mat e -> IO ()

-- | Uses the LAPACKE function <i>gesvd</i> internally to compute the
--   singular value decomposition. The arguments are used as storage, so
--   this is really unsafe. Only used internally.
unsafeSVD :: (BlasOps e, LapackeOps e se, CVector vec se, CMatrix mat e) => mat e -> (SVDU, SVDVT) -> vec se -> mat e -> mat e -> IO Int
unsafeMatrixMap :: (Storable e1, Storable e2, CMatrix mat1 e1, CMatrix mat2 e2) => (e1 -> e2) -> mat1 e1 -> mat2 e2 -> IO ()
unsafeMatrixBinMap :: (Storable e1, Storable e2, Storable e3, CMatrix mat1 e1, CMatrix mat2 e2, CMatrix mat3 e3) => (e1 -> e2 -> e3) -> mat1 e1 -> mat2 e2 -> mat3 e3 -> IO ()

-- | Run an IO action on a row of a matrix, without copying the vector.
withCMatrixRow :: Storable e => CMatrix mat e => mat e -> Index -> (RefVector e -> IO a) -> IO a

-- | Run an IO action on a column of a matrix, without copying the vector.
withCMatrixColumn :: Storable e => CMatrix mat e => mat e -> Index -> (RefVector e -> IO a) -> IO a

-- | Haskell type representing the C <tt>float</tt> type.
data CFloat :: *

-- | Haskell type representing the C <tt>double</tt> type.
data CDouble :: *

-- | Complex numbers are an algebraic type.
--   
--   For a complex number <tt>z</tt>, <tt><a>abs</a> z</tt> is a number
--   with the magnitude of <tt>z</tt>, but oriented in the positive real
--   direction, whereas <tt><a>signum</a> z</tt> has the phase of
--   <tt>z</tt>, but unit magnitude.
data Complex a :: * -> *
instance Functor (MMM s mat e)
instance Applicative (MMM s mat e)
instance Monad (MMM s mat e)
instance Eq SVDU
instance Ord SVDU
instance Eq SVDVT
instance Ord SVDVT
instance Eq SVDOpt
instance Ord SVDOpt
instance BLASEnum Order CblasOrder
instance BLASEnum Transpose CblasTranspose
instance BLASEnum UpLo CblasUplo
instance LAPACKEEnum Order Int
instance (Num e, Field1 e, BlasOps e) => GMatrix Matrix e
instance BlasOps e => MatrixMatrix Matrix e
instance BlasOps e => Indexable (Matrix e) IndexPair e
instance (Num e, Field1 e, BlasOps e) => CMatrix Matrix e
instance (BlasOps e, Show e) => Show (Matrix e)
instance (BlasOps e, Eq e) => Eq (Matrix e)
instance (BlasOps e, Num e) => Num (Matrix e)
instance (BlasOps e, Num e, Fractional e) => Fractional (Matrix e)
instance (BlasOps e, Num e, Fractional e) => Floating (Matrix e)
instance (Show e, Field1 e, Storable e, BlasOps e) => Show (RefVector e)
instance (BlasOps e, Storable e) => CVector RefVector e
instance (BlasOps e, Storable e) => Indexable (RefVector e) Index e
instance (Field1 e, Storable e, BlasOps e) => GVector RefVector e
instance BlasOps e => VectorVector RefVector e
instance BlasOps e => VectorScalar RefVector e
instance (BlasOps e, CMatrix mat e) => IMM (MMM s mat e) IndexPair (mat e) e

module Numeric.Jalla.Test
class Bounds a
minB :: Bounds a => a
maxB :: Bounds a => a
instance [overlap ok] (Random e, RealFloat e) => Random (Complex e)
instance [overlap ok] RealFloat a => Bounds a
instance [overlap ok] (Bounds a, RealFloat a) => Bounds (Complex a)
instance [overlap ok] (Bounds e, BlasOps e, Random e) => Arbitrary (Matrix e)
instance [overlap ok] (Bounds e, BlasOps e, Random e) => Arbitrary (Vector e)

module Numeric.Jalla
