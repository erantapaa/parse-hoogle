-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple part of speech tagger
--   
--   This is almost a Brill tagger implementation. Among other things, it
--   needs to be generalised to look back beyond one tag.
@package brillig
@version 0.3.1

module NLP.Brillig.Util
histogram :: Ord a => [a] -> Map a Int

module NLP.Brillig
newtype Tag
Tag :: Text -> Tag
fromTag :: Tag -> Text
type Tagged a = (a, Tag)
type Count = Map Text (Map Tag Int)
readTag :: Text -> (Text, Tag)
showTag :: Tagged Text -> Text
retag :: ([Tag] -> [Tag]) -> [Tagged Text] -> [Tagged Text]
instance Ord Tag
instance Eq Tag
instance Show Tag

module NLP.Brillig.Brill
data Transform
Transform :: [Tag] -> Replacement -> Int -> Transform
context :: Transform -> [Tag]
replace :: Transform -> Replacement
tscore :: Transform -> Int
data Replacement
Replacement :: Tag -> Tag -> Replacement
from :: Replacement -> Tag
to :: Replacement -> Tag
type TCount = Map Tag Int
data TagPair
TagPair :: Tag -> Tag -> TagPair
proposed :: TagPair -> Tag
actual :: TagPair -> Tag
brilltag :: [Transform] -> [Tagged Text] -> [Tagged Text]

-- | Apply a single transformation
tagOne :: Transform -> [Tag] -> [Tag]
learnConverge :: Int -> [Tag] -> [Tag] -> [Transform]
learnN :: Int -> [Tag] -> [Tag] -> [Transform]

-- | Not iteratively applying and relearning! Just doing one pass for now
learnOne :: [Tag] -> [Tag] -> Transform
bestTransform :: Set Tag -> [TagPair] -> Transform
replacements :: Set Tag -> Set Replacement
bestInstance :: Replacement -> DeltaHistogram -> Transform
type DeltaHistogram = Map Tag (Map TagPair Int)

-- | how many times a replacement follows each context
deltaHistogram :: [TagPair] -> DeltaHistogram
score :: Replacement -> Map TagPair Int -> Int
plusPair :: Num a => (a, a) -> (a, a) -> (a, a)
instance Show Replacement
instance Ord Replacement
instance Eq Replacement
instance Ord Transform
instance Eq Transform
instance Ord TagPair
instance Eq TagPair
instance Read Transform
instance Show Transform

module NLP.Brillig.Unigram
tag :: Count -> [Text] -> [Tagged Text]
best :: [(Tag, Int)] -> Tag
mostfreq :: Count -> Tag

module NLP.Brillig.Wrong
instance Binary Tag
instance Binary Text
