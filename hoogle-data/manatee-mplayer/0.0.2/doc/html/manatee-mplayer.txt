-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Mplayer client extension for Manatee.
--   
--   manatee-mplayer is mplayer client extension for Manatee (Haskell/Gtk+
--   Integrated Live Environment)
@package manatee-mplayer
@version 0.0.2

module Manatee.Extension.Mplayer.DBus
data MplayerDaemonMember
Play :: MplayerDaemonMember
Pause :: MplayerDaemonMember
Stop :: MplayerDaemonMember
Forward :: MplayerDaemonMember
Backward :: MplayerDaemonMember
VolumeInc :: MplayerDaemonMember
VolumeDec :: MplayerDaemonMember
data MplayerDaemonSignalArgs
PlayArgs :: ByteString -> ProcessID -> MplayerDaemonSignalArgs
PauseArgs :: MplayerDaemonSignalArgs
StopArgs :: MplayerDaemonSignalArgs
ForwardArgs :: Int -> MplayerDaemonSignalArgs
BackwardArgs :: Int -> MplayerDaemonSignalArgs
VolumeIncArgs :: Int -> MplayerDaemonSignalArgs
VolumeDecArgs :: Int -> MplayerDaemonSignalArgs
data MplayerClientMember
PlayFinished :: MplayerClientMember
DaemonProcessStartup :: MplayerClientMember
data MplayerClientSignalArgs
PlayFinishedArgs :: MplayerClientSignalArgs
DaemonProcessStartupArgs :: MplayerClientSignalArgs

-- | Mplayer daemon bus name.
mplayerDaemonBusName :: Text
mplayerDaemonInterfaceName :: Text

-- | The daemon path name.
mplayerDaemonPathName :: Text

-- | Check daemon signal argument. Return False if mismatch.
--   
--   Unpack daemon signal from Variant list. unpackMplayerDaemonSignalArgs_
--   :: MplayerDaemonMember -&gt; [Variant] -&gt; Maybe
--   MplayerDaemonSignalArgs
--   
--   Pack daemon signal argument to Variant list.
--   packMplayerDaemonSignalArgs :: MplayerDaemonSignalArgs -&gt; [Variant]
--   
--   Check client signal argument. Return False if mismatch.
--   
--   Unpack client signal from Variant list. unpackMplayerClientSignalArgs_
--   :: MplayerClientMember -&gt; [Variant] -&gt; Maybe
--   MplayerClientSignalArgs
--   
--   Pack client signal argument to Variant list.
--   packMplayerClientSignalArgs :: MplayerClientSignalArgs -&gt; [Variant]
--   
--   Build daemon signal. If signal argument not match daemon member name.
mkMplayerDaemonSignal :: Client -> MplayerDaemonMember -> MplayerDaemonSignalArgs -> IO ()

-- | Build daemon match rule.
mkMplayerDaemonMatchRule :: Client -> (MplayerDaemonMember, MplayerDaemonSignalArgs -> IO ()) -> IO ()

-- | Build daemon match rule list.
mkMplayerDaemonMatchRules :: Client -> [(MplayerDaemonMember, MplayerDaemonSignalArgs -> IO ())] -> IO ()

-- | Pick MplayerDaemonSignalArgs.
pickMplayerDaemonSignalArgs :: MplayerDaemonMember -> Signal -> MplayerDaemonSignalArgs

-- | Unpack daemon signal from Variant list. Report error if mismatch.
--   
--   Pick MplayerClientSignalArgs.
pickMplayerClientSignalArgs :: MplayerClientMember -> Signal -> MplayerClientSignalArgs

-- | Unpack client signal from Variant list. Report error if mismatch.
--   
--   Build render signal. If signal argument not match render member name.
mkMplayerClientSignal :: Client -> ProcessID -> MplayerClientMember -> MplayerClientSignalArgs -> IO ()

-- | Build render process match rule for catch signal.
mkMplayerClientMatchRule :: Client -> (MplayerClientMember, MplayerClientSignalArgs -> IO ()) -> IO ()
instance Show MplayerClientSignalArgs
instance Eq MplayerClientSignalArgs
instance Ord MplayerClientSignalArgs
instance Show MplayerClientMember
instance Eq MplayerClientMember
instance Ord MplayerClientMember
instance Show MplayerDaemonSignalArgs
instance Eq MplayerDaemonSignalArgs
instance Ord MplayerDaemonSignalArgs
instance Show MplayerDaemonMember
instance Eq MplayerDaemonMember
instance Ord MplayerDaemonMember

module Manatee.Extension.Mplayer.Daemon
type MplayerHandle = (Handle, Handle, Handle, ProcessHandle)
data MplayerStatus
MplayerStatus :: TVar (Maybe MplayerHandle) -> TVar PlayStatus -> MVar String -> TVar (Maybe ProcessID) -> Client -> TVar (Maybe ThreadId) -> MplayerStatus
mplayerHandle :: MplayerStatus -> TVar (Maybe MplayerHandle)
mplayerPlayStatus :: MplayerStatus -> TVar PlayStatus
mplayerStopByCommand :: MplayerStatus -> MVar String
mplayerProcessId :: MplayerStatus -> TVar (Maybe ProcessID)
mplayerClient :: MplayerStatus -> Client
mplayerSentinelThreadId :: MplayerStatus -> TVar (Maybe ThreadId)
data PlayStatus
PlayStatus :: PlayStatus
PauseStatus :: PlayStatus
StopStatus :: PlayStatus

-- | Init mplayer status.
mplayerInitStatus :: IO MplayerStatus

-- | Play current select candidate.
mplayerPlay :: MplayerStatus -> MplayerDaemonSignalArgs -> IO ()

-- | Sentinel mplayer process. If MVar <a>mplayerStopByCommand</a> is
--   empty, will send DBus signal to mplayer client after current file play
--   finished. Otherwise, consider mplayer process stop by user's command.
mplayerSentinelProcess :: MplayerStatus -> ProcessHandle -> IO ()

-- | Pause or continue play.
mplayerPause :: MplayerStatus -> MplayerDaemonSignalArgs -> IO ()

-- | Stop play.
mplayerStop :: MplayerStatus -> MplayerDaemonSignalArgs -> IO ()

-- | Internal function for mplayerStop.
mplayerStopInternal :: MplayerStatus -> IO ()

-- | Forward current track.
mplayerForward :: MplayerStatus -> MplayerDaemonSignalArgs -> IO ()

-- | Backward current track.
mplayerBackward :: MplayerStatus -> MplayerDaemonSignalArgs -> IO ()

-- | Increase volume.
mplayerVolumeInc :: MplayerStatus -> MplayerDaemonSignalArgs -> IO ()

-- | Decrease volume.
mplayerVolumeDec :: MplayerStatus -> MplayerDaemonSignalArgs -> IO ()

-- | Check whether mplayer process is activated.
mplayerProcessIsActivated :: TVar (Maybe MplayerHandle) -> IO Bool

-- | Send command to mplayer process.
mplayerSendCommand :: MplayerStatus -> String -> Bool -> IO ()
instance Show PlayStatus
instance Eq PlayStatus
instance Ord PlayStatus

module Manatee.Extension.Mplayer.PageMode

-- | Mplayer
mplayerMode :: PageMode

module Manatee.Extension.Mplayer.PlaylistBuffer
data PlaylistBuffer
PlaylistBuffer :: TVar String -> Client -> PageId -> PageMode -> TVar [MultimediaInfo] -> [(MultimediaOption, SortColumnId)] -> TVar (MultimediaOption, SortType) -> PlaylistBuffer
playlistBufferName :: PlaylistBuffer -> TVar String
playlistBufferClient :: PlaylistBuffer -> Client
playlistBufferPageId :: PlaylistBuffer -> PageId
playlistBufferMode :: PlaylistBuffer -> PageMode
playlistBufferInfos :: PlaylistBuffer -> TVar [MultimediaInfo]
playlistBufferOptions :: PlaylistBuffer -> [(MultimediaOption, SortColumnId)]
playlistBufferSortStatus :: PlaylistBuffer -> TVar (MultimediaOption, SortType)
data MultimediaInfo
MultimediaInfo :: ByteString -> String -> String -> String -> Int -> String -> Int -> Int -> Int -> Int -> Int -> String -> MultimediaInfo
miFilePath :: MultimediaInfo -> ByteString
miArtist :: MultimediaInfo -> String
miTitle :: MultimediaInfo -> String
miAlbum :: MultimediaInfo -> String
miTrack :: MultimediaInfo -> Int
miGenre :: MultimediaInfo -> String
miYear :: MultimediaInfo -> Int
miDuration :: MultimediaInfo -> Int
miBitRate :: MultimediaInfo -> Int
miSampleRate :: MultimediaInfo -> Int
miChannels :: MultimediaInfo -> Int
miComment :: MultimediaInfo -> String
class MultimediaInfoClass a
getColumnTitle :: (MultimediaInfoClass a) => a -> String
getColumnMaxWidth :: (MultimediaInfoClass a) => a -> Maybe Int
getCellText :: (MultimediaInfoClass a) => a -> MultimediaInfo -> String
getCellXAlign :: (MultimediaInfoClass a) => a -> Float
compareRow :: (MultimediaInfoClass a) => a -> MultimediaInfo -> MultimediaInfo -> IO Ordering
data MultimediaOption
MOArtist :: MultimediaOption
MOTitle :: MultimediaOption
MOAlbum :: MultimediaOption
MOTrack :: MultimediaOption
MOGenre :: MultimediaOption
MOYear :: MultimediaOption
MODuration :: MultimediaOption
MOBitRate :: MultimediaOption
MOSampleRate :: MultimediaOption
MOChannels :: MultimediaOption
MOComment :: MultimediaOption

-- | New playlist buffer. If path is directory, will search multimedia
--   files with given directory. If path is multimedia file, then add to
--   play list.
playlistBufferNew :: FilePath -> Client -> PageId -> IO PlaylistBuffer

-- | Generate multimedia infos.
playlistBufferGenerateInfos :: FilePath -> IO [MultimediaInfo]

-- | Whether path match multimedia regular expression.
isMultimediaFile :: ByteString -> IO Bool

-- | Get multimedia information.
getMultimediaInfo :: ByteString -> IO (Maybe MultimediaInfo)

-- | Show duration.
showDuration :: Int -> String

-- | Get multimedia title.
getMultimediaTitle :: FilePath -> Tag -> IO String

-- | Compare album.
playlistAlbumCompare :: MultimediaInfo -> MultimediaInfo -> Ordering
instance Typeable PlaylistBuffer
instance Eq MultimediaOption
instance Show MultimediaOption
instance Read MultimediaOption
instance Show MultimediaInfo
instance MultimediaInfoClass MultimediaOption

module Manatee.Extension.Mplayer.PlaylistView
data PlaylistView
PlaylistView :: TVar PagePlugId -> ScrolledWindow -> PlaylistBuffer -> TreeView -> ListStore MultimediaInfo -> TypedTreeModelSort MultimediaInfo -> TVar TreePath -> TVar PlayMode -> PlaylistView
playlistViewPlugId :: PlaylistView -> TVar PagePlugId
playlistViewScrolledWindow :: PlaylistView -> ScrolledWindow
playlistViewBuffer :: PlaylistView -> PlaylistBuffer
playlistViewTreeView :: PlaylistView -> TreeView
playlistViewListStore :: PlaylistView -> ListStore MultimediaInfo
playlistViewSortModel :: PlaylistView -> TypedTreeModelSort MultimediaInfo
playlistViewCurrentPlayPath :: PlaylistView -> TVar TreePath
playlistViewPlayMode :: PlaylistView -> TVar PlayMode
data PlayMode
SingleMode :: PlayMode
ListMode :: PlayMode
RandomMode :: PlayMode

-- | Internal new function.
playlistViewNew :: PlaylistBuffer -> PagePlugId -> IO PlaylistView

-- | Build match rule.
playlistViewBuildMatchRule :: PlaylistView -> IO ()

-- | Switch play mode.
playlistViewSwitchPlayMode :: PlaylistView -> IO ()

-- | Play current track.
playlistViewPlayCurrent :: PlaylistView -> IO ()

-- | Draw playlist view.
playlistViewDraw :: PlaylistView -> IO ()

-- | Internal sort function.
playlistViewSortInternal :: PlaylistView -> (MultimediaOption, SortType) -> IO ()

-- | Add icon column.
playlistViewAddIconColumn :: (TreeViewClass self, TreeModelClass (model row), TypedTreeModelClass model) => self -> model row -> IO ()

-- | Add column.
playlistViewAddColumn :: (MultimediaInfoClass t, TreeViewClass self1, TreeModelClass self, TreeModelSortClass self, TypedTreeModelClass model, TreeSortableClass self) => self1 -> model MultimediaInfo -> self -> (t, SortColumnId) -> IO ()

-- | Set sort function.
playlistViewSetSortFunc :: (TreeSortableClass self, TypedTreeModelClass model, MultimediaInfoClass a) => model MultimediaInfo -> self -> (a, SortColumnId) -> IO ()

-- | Set cell text.
playlistViewSetCellText :: (CellLayoutClass self, CellRendererTextClass cell, TreeModelClass model, TreeModelSortClass model, TypedTreeModelClass model1, MultimediaInfoClass a) => self -> cell -> model1 MultimediaInfo -> model -> a -> IO ()

-- | Next node.
playlistViewNextNode :: PlaylistView -> IO ()

-- | Previous node.
playlistViewPrevNode :: PlaylistView -> IO ()

-- | Keymap.
playlistViewKeymap :: Map Text (PlaylistView -> IO ())

-- | Sort by title.
playlistViewSortByTitle :: PlaylistView -> IO ()

-- | Sort by album.
playlistViewSortByAlbum :: PlaylistView -> IO ()

-- | Sort by artist.
playlistViewSortByArtist :: PlaylistView -> IO ()

-- | Sort by year.
playlistViewSortByYear :: PlaylistView -> IO ()

-- | Sort by track.
playlistViewSortByTrack :: PlaylistView -> IO ()

-- | Sort by BitRate.
playlistViewSortByBitRate :: PlaylistView -> IO ()

-- | Sort by duration.
playlistViewSortByDuration :: PlaylistView -> IO ()

-- | Sort column.
playlistViewSort :: PlaylistView -> MultimediaOption -> IO ()

-- | Play current selected track.
playlistViewPlay :: PlaylistView -> IO ()

-- | Play next track randomly.
playlistViewPlayRandom :: PlaylistView -> IO ()

-- | Play next track.
playlistViewPlayNext :: PlaylistView -> IO ()

-- | Play previous track.
playlistViewPlayPrev :: PlaylistView -> IO ()

-- | The internal function of <a>playlistViewPlay</a>.
playlistViewPlayInternal :: PlaylistView -> TreePath -> IO ()

-- | Stop play.
playlistViewStop :: PlaylistView -> IO ()

-- | Pause or continue play.
playlistViewPause :: PlaylistView -> IO ()

-- | Forward current track.
playlistViewForward :: PlaylistView -> IO ()

-- | Backward current track.
playlistViewBackward :: PlaylistView -> IO ()

-- | Increase volume.
playlistViewVolumeInc :: PlaylistView -> IO ()

-- | Decrease volume.
playlistViewVolumeDec :: PlaylistView -> IO ()

-- | Begin.
playlistViewScrollToTop :: PlaylistView -> IO ()

-- | End.
playlistViewScrollToBottom :: PlaylistView -> IO ()

-- | Scroll page vertically.
playlistViewScrollVerticalPage :: Bool -> PlaylistView -> IO ()

-- | Scroll step vertically.
playlistViewScrollVerticalStep :: Bool -> PlaylistView -> IO ()

-- | Handle key action.
playlistViewHandleKeyAction :: PlaylistView -> Text -> SerializedEvent -> IO ()
instance Typeable PlaylistView
instance Show PlayMode
instance Eq PlayMode
instance Ord PlayMode
instance PageView PlaylistView
instance PageBuffer PlaylistBuffer

module Manatee.Extension.Mplayer
