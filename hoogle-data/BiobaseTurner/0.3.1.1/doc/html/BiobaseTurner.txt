-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Import Turner RNA parameters
--   
--   A data structure for Mathews / Turner RNA and DNA energy parameters.
--   This library currently only provides an importer, not export
--   functions. There are two reasons: (i) We currently have no use-case
--   where we need more than import facilities (ii) The file structure is
--   geared towards humans, not machines. If you need to be able to export,
--   send a mail.
--   
--   NOTE This is rather fragile as some files use different index
--   enumerations, which we handle rather... simplistically.
--   
--   In principle, all parameters should be symmetric regarding the stem
--   direction. However, there is one asymmetry case in dnastack.dh. We do
--   not fix this problem as we do not change the source files.
@package BiobaseTurner
@version 0.3.1.1


-- | The <a>Turner2004</a> data structure reflects the RNA (and DNA) energy
--   parameters known as the Turner 2004 data set.
--   
--   In general, have a look here:
--   <a>http://rna.urmc.rochester.edu/NNDB/turner04/index.html</a> where
--   parameters are explained.
--   
--   TODO need a <a>Functor</a> instance over elements <a>e</a>. Or
--   alternatively, generic programming to capture stuff going on in
--   <tt>e</tt>
module Biobase.Turner

-- | The actual Turner parameters return energies in Double format.
newtype Energy
Energy :: Double -> Energy

-- | The Turner model with <a>Energy</a>s.
type Turner2004 = Turner2004Model Energy

-- | The Turner energy tables. Parametrized over the storing vector type
--   <tt>v</tt> and the actual element type <tt>e</tt>.
data Turner2004Model e
Turner2004Model :: !(Unboxed PP e) -> !(Unboxed PN e) -> !(Unboxed PN e) -> !(Vector e) -> !(Unboxed PNN e) -> !(Map Primary e) -> !e -> !e -> !e -> !e -> !(Vector e) -> !e -> !(Unboxed PPNN e) -> !(Unboxed PPNNN e) -> !(Unboxed PPNNNN e) -> !(Unboxed PNN e) -> !(Unboxed PNN e) -> !(Unboxed PNN e) -> !(Vector e) -> !(Unboxed PNN e) -> !e -> !e -> !e -> !e -> !e -> !e -> !e -> !(Unboxed PNN e) -> !(Unboxed PP e) -> !(Unboxed PNN e) -> !(Unboxed PNN e) -> !e -> !e -> !e -> Turner2004Model e
_stack :: Turner2004Model e -> !(Unboxed PP e)
_dangle3 :: Turner2004Model e -> !(Unboxed PN e)
_dangle5 :: Turner2004Model e -> !(Unboxed PN e)
_hairpinL :: Turner2004Model e -> !(Vector e)
_hairpinMM :: Turner2004Model e -> !(Unboxed PNN e)
_hairpinLookup :: Turner2004Model e -> !(Map Primary e)
_hairpinGGG :: Turner2004Model e -> !e
_hairpinCslope :: Turner2004Model e -> !e
_hairpinCintercept :: Turner2004Model e -> !e
_hairpinC3 :: Turner2004Model e -> !e
_bulgeL :: Turner2004Model e -> !(Vector e)
_bulgeSingleC :: Turner2004Model e -> !e
_iloop1x1 :: Turner2004Model e -> !(Unboxed PPNN e)
_iloop2x1 :: Turner2004Model e -> !(Unboxed PPNNN e)
_iloop2x2 :: Turner2004Model e -> !(Unboxed PPNNNN e)
_iloopMM :: Turner2004Model e -> !(Unboxed PNN e)
_iloop2x3MM :: Turner2004Model e -> !(Unboxed PNN e)
_iloop1xnMM :: Turner2004Model e -> !(Unboxed PNN e)
_iloopL :: Turner2004Model e -> !(Vector e)
_multiMM :: Turner2004Model e -> !(Unboxed PNN e)
_ninio :: Turner2004Model e -> !e
_maxNinio :: Turner2004Model e -> !e
_multiOffset :: Turner2004Model e -> !e
_multiNuc :: Turner2004Model e -> !e
_multiHelix :: Turner2004Model e -> !e
_multiAsym :: Turner2004Model e -> !e
_multiStrain :: Turner2004Model e -> !e
_extMM :: Turner2004Model e -> !(Unboxed PNN e)
_coaxial :: Turner2004Model e -> !(Unboxed PP e)
_coaxStack :: Turner2004Model e -> !(Unboxed PNN e)
_tStackCoax :: Turner2004Model e -> !(Unboxed PNN e)
_largeLoop :: Turner2004Model e -> !e
_termAU :: Turner2004Model e -> !e
_intermolecularInit :: Turner2004Model e -> !e
type PP = (((Z :. Nuc) :. Nuc) :. Nuc) :. Nuc
type PN = ((Z :. Nuc) :. Nuc) :. Nuc
type PNN = (((Z :. Nuc) :. Nuc) :. Nuc) :. Nuc
type PPNN = (PP :. Nuc) :. Nuc
type PPNNN = PPNN :. Nuc
type PPNNNN = PPNNN :. Nuc
termAU :: Lens' (Turner2004Model e_a72r) e_a72r
tStackCoax :: Lens' (Turner2004Model e_a72r) (Unboxed PNN e_a72r)
stack :: Lens' (Turner2004Model e_a72r) (Unboxed PP e_a72r)
ninio :: Lens' (Turner2004Model e_a72r) e_a72r
multiStrain :: Lens' (Turner2004Model e_a72r) e_a72r
multiOffset :: Lens' (Turner2004Model e_a72r) e_a72r
multiNuc :: Lens' (Turner2004Model e_a72r) e_a72r
multiMM :: Lens' (Turner2004Model e_a72r) (Unboxed PNN e_a72r)
multiHelix :: Lens' (Turner2004Model e_a72r) e_a72r
multiAsym :: Lens' (Turner2004Model e_a72r) e_a72r
maxNinio :: Lens' (Turner2004Model e_a72r) e_a72r
largeLoop :: Lens' (Turner2004Model e_a72r) e_a72r
intermolecularInit :: Lens' (Turner2004Model e_a72r) e_a72r
iloopMM :: Lens' (Turner2004Model e_a72r) (Unboxed PNN e_a72r)
iloopL :: Lens' (Turner2004Model e_a72r) (Vector e_a72r)
iloop2x3MM :: Lens' (Turner2004Model e_a72r) (Unboxed PNN e_a72r)
iloop2x2 :: Lens' (Turner2004Model e_a72r) (Unboxed PPNNNN e_a72r)
iloop2x1 :: Lens' (Turner2004Model e_a72r) (Unboxed PPNNN e_a72r)
iloop1xnMM :: Lens' (Turner2004Model e_a72r) (Unboxed PNN e_a72r)
iloop1x1 :: Lens' (Turner2004Model e_a72r) (Unboxed PPNN e_a72r)
hairpinMM :: Lens' (Turner2004Model e_a72r) (Unboxed PNN e_a72r)
hairpinLookup :: Lens' (Turner2004Model e_a72r) (Map Primary e_a72r)
hairpinL :: Lens' (Turner2004Model e_a72r) (Vector e_a72r)
hairpinGGG :: Lens' (Turner2004Model e_a72r) e_a72r
hairpinCslope :: Lens' (Turner2004Model e_a72r) e_a72r
hairpinCintercept :: Lens' (Turner2004Model e_a72r) e_a72r
hairpinC3 :: Lens' (Turner2004Model e_a72r) e_a72r
extMM :: Lens' (Turner2004Model e_a72r) (Unboxed PNN e_a72r)
dangle5 :: Lens' (Turner2004Model e_a72r) (Unboxed PN e_a72r)
dangle3 :: Lens' (Turner2004Model e_a72r) (Unboxed PN e_a72r)
coaxial :: Lens' (Turner2004Model e_a72r) (Unboxed PP e_a72r)
coaxStack :: Lens' (Turner2004Model e_a72r) (Unboxed PNN e_a72r)
bulgeSingleC :: Lens' (Turner2004Model e_a72r) e_a72r
bulgeL :: Lens' (Turner2004Model e_a72r) (Vector e_a72r)

-- | Map a function over all <tt>e</tt> elements.
emap :: (Unbox e, Unbox e') => (e -> e') -> Turner2004Model e -> Turner2004Model e'
instance Unbox Energy
instance Vector Vector Energy
instance MVector MVector Energy
instance Prim Energy
instance Eq Energy
instance Ord Energy
instance Num Energy
instance Read Energy
instance Show Energy
instance (Show e, Unbox e) => Show (Turner2004Model e)


-- | Turner file parser. Returns a Turner2004 data structure. Requires an
--   annoying amount of boilerplate.
--   
--   How is <a>stack</a> data stored:
--   
--   AX UY -&gt; ((A,U),(Y,X))
--   
--   How <a>iloop1x1</a> is stored:
--   
--   X A G U C -&gt; ((A,U),(C,G),X,Y) Y
--   
--   Now <tt>iloop1x2</tt> is stored:
--   
--   X A G U C -&gt; ((A,U),(C,G),X,C,Y), single (X) first, then 5' to 3'
--   YC
--   
--   <a>iloop2x2</a> is stored:
--   
--   XY A G U C -&gt; ((A,U),(C,G),X,Y,y,x), X--&gt;Y then x&lt;--y xy
--   
--   TODO not sure if dangle3/dangle5 are correctly split or if they should
--   switch
module Biobase.Turner.Import

-- | Given a directory, fill in the <a>Turner2004</a> data structure
fromDir :: FilePath -> Prefix -> Suffix -> IO Turner2004
minPP :: :. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc
maxPP :: :. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc
minP :: :. (:. Z Nuc) Nuc
maxP :: :. (:. Z Nuc) Nuc
minPB :: :. (:. (:. Z Nuc) Nuc) Nuc
maxPB :: :. (:. (:. Z Nuc) Nuc) Nuc
minPBB :: :. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc
maxPBB :: :. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc
minPPBB :: :. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc
maxPPBB :: :. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc
minPPBBB :: :. (:. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc
maxPPBBB :: :. (:. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc
minPPBBBB :: :. (:. (:. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc
maxPPBBBB :: :. (:. (:. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc
d1_30 :: (Enum a, Num a) => [:. Z a]
keysPP :: [:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc]
keysPB :: [:. (:. (:. Z Nuc) Nuc) Nuc]
keysPBB :: [:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc]
keysPPBB :: [:. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc]
keysPPBBB :: [:. (:. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc]
keysPPBBBBrna :: [:. (:. (:. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc]
keysPPBBBBdna :: [:. (:. (:. (:. (:. (:. (:. (:. Z Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc) Nuc]
plist11 :: [(Nuc, Nuc)]
plist22rna :: [(Nuc, Nuc)]
plist22dna :: [(Nuc, Nuc)]
infE :: Energy

-- | extract values. <a>.</a> - values are extracted as &gt; 100k
values :: ByteString -> [Energy]

-- | Iteratee to parse tabulated loops (hairpins).
parseTabulated :: Monad m => Sink ByteString m [(ByteString, Energy)]

-- | Convenience function
blockFromFile :: FilePath -> IO [Energy]

-- | Transform input stream into list of list of doubles
parseBlocks :: Monad m => Conduit ByteString m [Energy]

-- | Parses the miscloop table
--   
--   NOTE extra brownie points for miscloop.dat for providing data in a
--   form that does not conform to normal number encoding.
parseMiscLoop :: Monad m => Sink ByteString m [[Double]]

-- | Parses stupidly encoded values like <a>.6</a> and <a>-.0</a>.
readD :: ByteString -> Double
miscFromFile :: FilePath -> IO [[Double]]
tabFromFile :: FilePath -> IO [(Primary, Energy)]
allEq :: Eq a => [a] -> Bool
type Prefix = FilePath
type Suffix = FilePath
