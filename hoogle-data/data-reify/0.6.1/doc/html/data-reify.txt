-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Reify a recursive data structure into an explicit graph.
--   
@package data-reify
@version 0.6.1


-- | This is the shared definition of a <a>Graph</a> in Data.Reify.
module Data.Reify.Graph

-- | <a>Graph</a> is a basic graph structure over nodes of the higher kind
--   <tt>e</tt>, with a single root. There is an assumption that there is
--   no Unique used in a node which does not have a corresponding entry is
--   the association list. The idea with this structure is that it is
--   trivial to convert into an <tt>Array</tt>, <tt>IntMap</tt>, or into a
--   Martin Erwig's Functional Graph, as required.
data Graph e
Graph :: [(Unique, e Unique)] -> Unique -> Graph e
type Unique = Int
instance Show (e Int) => Show (Graph e)

module Data.Reify

-- | <a>MuRef</a> is a class that provided a way to reference into a
--   specific type, and a way to map over the deferenced internals.
class MuRef a where type family DeRef a :: * -> *
mapDeRef :: (MuRef a, Applicative f) => (forall b. (MuRef b, DeRef a ~ DeRef b) => b -> f u) -> a -> f (DeRef a u)

-- | <a>reifyGraph</a> takes a data structure that admits <a>MuRef</a>, and
--   returns a <a>Graph</a> that contains the dereferenced nodes, with
--   their children as <a>Int</a> rather than recursive values.
reifyGraph :: MuRef s => s -> IO (Graph (DeRef s))
instance Eq DynStableName
