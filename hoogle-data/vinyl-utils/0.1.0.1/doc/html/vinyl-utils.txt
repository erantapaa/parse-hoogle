-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities for vinyl
--   
@package vinyl-utils
@version 0.1.0.1


module Data.Vinyl.Utils.Operator

-- | Create an operator between records sharing their fields but differing
--   in functors.
operator :: (forall t. f t -> g t -> h t) -> Rec f rs -> Rec g rs -> Rec h rs

-- | Apply a record of (a -&gt; x) functions to a constant type record to
--   obtain a plain f-record.
(/$/) :: Functor f => Rec ((->) a) rs -> Rec (Const (f a)) rs -> Rec f rs

-- | Apply a record of (a -&gt; f x) functions to a constant type record to
--   obtain a plain f-record.
(/$$/) :: Rec (Compose ((->) a) f) rs -> Rec (Const a) rs -> Rec f rs

-- | Apply a record of (x -&gt; a) functions to a plain f-record to obtain
--   a constant type record.
(\$\) :: Functor f => Rec (Op a) rs -> Rec f rs -> Rec (Const (f a)) rs

-- | Apply a record of (f x -&gt; a) functions to a plain f-record to
--   obtain a constant type record.
(\$$\) :: Rec (Compose (Op a) f) rs -> Rec f rs -> Rec (Const a) rs

-- | Apply a predicate record to a plain f-record to obtain a boolean
--   product inside the f functor.
(\&&\) :: Applicative f => Rec Predicate rs -> Rec f rs -> f Bool

-- | Apply a predicate record to a plain f-record to obtain a boolean sum
--   inside the f functor.
(\||\) :: Applicative f => Rec Predicate rs -> Rec f rs -> f Bool

-- | Shorthand for creation of predicates.
p :: (a -> Bool) -> Predicate a


module Data.Vinyl.Utils.Compose

-- | Traverse a record parametrized with a composition of functors, leaving
--   the inner functor.
rtraverse1 :: Applicative f => Rec (Compose f g) rs -> f (Rec g rs)


module Data.Vinyl.Utils.Const

-- | Extension of <a>pure</a> to constant type records.
class ConstApplicative (rs :: [k])
cpure :: ConstApplicative rs => a -> Rec (Const a) rs
rconst :: (Applicative f, RecApplicative rs) => f a -> f (Rec (Const a) rs)

-- | Commute a constant functor with another functor.
constCommute :: Functor f => Const (f a) b -> Compose f (Const a) b

-- | Distribute a functor over a constant type record.
rtraverseconst :: Applicative f => Rec (Const (f a)) rs -> f (Rec (Const a) rs)
instance ConstApplicative rs => ConstApplicative (r : rs)
instance ConstApplicative '[]
