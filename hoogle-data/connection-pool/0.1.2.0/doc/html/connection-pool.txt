-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Connection pool built on top of resource-pool and streaming-commons.
--   
@package connection-pool
@version 0.1.2.0


-- | Module defines helper functions that would be ideally provided by
--   <a>streaming-commons</a> package and some wrappers with specialised
--   type signatures.
--   
--   Internal packages are here to provide access to internal definitions
--   for library writers, but they should not be used in application code.
--   
--   Preferably use qualified import, e.g.:
--   
--   <pre>
--   import qualified Data.ConnectionPool.Internal.Streaming as Internal
--   </pre>
--   
--   This module doesn't neither depend on <a>resource-pool</a> package nor
--   any other module of this package, and it shoud stay that way. This
--   module uses CPP to get OS specific things right. Most importantly
--   Windows doesn't support UNIX Sockets.
--   
--   Please, bear above in mind when doing modifications.
module Data.ConnectionPool.Internal.Streaming

-- | Wrapper for <a>getSocketFamilyTCP</a> that takes <a>ClientSettings</a>
--   instead of individual parameters.
acquireTcpClientConnection :: ClientSettings -> IO (Socket, SockAddr)

-- | Wrapper for <a>runTcpAppImpl</a> with a type signature that is more
--   natural for implementing a TCP specific <a>withConnection</a>.
runTcpApp :: MonadBaseControl IO m => Maybe SockAddr -> (AppData -> m r) -> Socket -> SockAddr -> m r

-- | Simplified <a>runTCPClient</a> and <a>runTCPServer</a> that provides
--   only construction of <a>AppData</a> and passing it to a callback
--   function.
runTcpAppImpl :: MonadBaseControl IO m => Maybe SockAddr -> Socket -> SockAddr -> (AppData -> m r) -> m r

-- | Wrapper for <a>runUnixAppImpl</a> with a type signature that is more
--   natural for implementing a UNIX Socket specific <a>withConnection</a>.
runUnixApp :: MonadBaseControl IO m => (AppDataUnix -> m r) -> Socket -> () -> m r

-- | Simplified <a>runUnixClient</a> and <a>runUnixServer</a> that provides
--   only construction of <a>AppDataUnix</a> and passing it to a callback
--   function.
runUnixAppImpl :: MonadBaseControl IO m => Socket -> (AppDataUnix -> m r) -> m r


-- | Internal packages are here to provide access to internal definitions
--   for library writers, but they should not be used in application code.
--   
--   Preferably use qualified import, e.g.:
--   
--   <pre>
--   import qualified Data.ConnectionPool.Internal.ResourcePoolParams
--     as Internal
--   </pre>
--   
--   Surprisingly this module doesn't depend on <a>resource-pool</a>
--   package and it would be good if it stayed that way, but not at the
--   cost of crippling functionality.
--   
--   Importantly this package should not depend on <a>streaming-commons</a>
--   package or other modules of this package.
--   
--   Please, bear above in mind when doing modifications.
module Data.ConnectionPool.Internal.ResourcePoolParams

-- | Parameters of resource pool that describe things like its internal
--   structure. See <a>createPool</a> for details.
data ResourcePoolParams
ResourcePoolParams :: !Int -> !NominalDiffTime -> !Int -> ResourcePoolParams
_numberOfStripes :: ResourcePoolParams -> !Int
_resourceIdleTimeout :: ResourcePoolParams -> !NominalDiffTime
_numberOfResourcesPerStripe :: ResourcePoolParams -> !Int

-- | Lens for accessing maximum number of resources to keep open per
--   stripe. The smallest acceptable value is 1 (default).
numberOfResourcesPerStripe :: Functor f => (Int -> f Int) -> ResourcePoolParams -> f ResourcePoolParams

-- | Lens for accessing stripe count. The number of distinct sub-pools to
--   maintain. The smallest acceptable value is 1 (default).
numberOfStripes :: Functor f => (Int -> f Int) -> ResourcePoolParams -> f ResourcePoolParams

-- | Lens for accessing amount of time for which an unused resource is kept
--   open. The smallest acceptable value is 0.5 seconds (default).
resourceIdleTimeout :: Functor f => (NominalDiffTime -> f NominalDiffTime) -> ResourcePoolParams -> f ResourcePoolParams

-- | Check if all parameters for underlying resource pool are valid:
--   
--   <ul>
--   <li><tt><a>numberOfStripes</a> &gt;= 1</tt> Number of connection
--   sub-pools. Keeping it set to <tt>1</tt> is good for most
--   applications.</li>
--   <li><tt><a>numberOfResourcesPerStripe</a> &gt;= 1</tt> Maximum number
--   of connections in each stripe. Totally there can be
--   <tt><a>numberOfStripes</a> * <a>numberOfResourcesPerStripe</a></tt>
--   open connections simultaneously.</li>
--   <li><tt><a>resourceIdleTimeout</a> &gt;= 0.5</tt> Property specified
--   for how long connection will be kept alive after it is released by
--   back to the pool before it is automatically closed. Value is in
--   seconds.</li>
--   </ul>
--   
--   For more details see <a>createPool</a>.
--   
--   <i>Since version 0.1.1.0.</i>
validateResourcePoolParams :: ResourcePoolParams -> Either String ResourcePoolParams
instance Typeable ResourcePoolParams
instance Data ResourcePoolParams
instance Show ResourcePoolParams
instance Default ResourcePoolParams


-- | Internal packages are here to provide access to internal definitions
--   for library writers, but they should not be used in application code.
--   
--   Preferably use qualified import, e.g.:
--   
--   <pre>
--   import qualified Data.ConnectionPool.Internal.ConnectionPool as Internal
--   </pre>
--   
--   This module doesn't depend on <a>streaming-commons</a> and other
--   non-HaskellPlatform packages with notable exception of
--   <a>resource-pool</a>. Another notable thing is that this package is
--   not OS specific. Please, bear this in mind when doing modifications.
module Data.ConnectionPool.Internal.ConnectionPool

-- | Simple specialized wrapper for <a>Pool</a>.
newtype ConnectionPool a
ConnectionPool :: (Pool (Socket, a)) -> ConnectionPool a

-- | Specialized wrapper for <a>createPool</a>, see its documentation for
--   details.
createConnectionPool :: IO (Socket, a) -> (Socket -> IO ()) -> ResourcePoolParams -> IO (ConnectionPool a)

-- | Destroy all connections that might be still open in a connection pool.
--   This is useful when one needs to release all resources at once and not
--   to wait for idle timeout to be reached.
--   
--   For more details see <a>destroyAllResources</a>.
--   
--   <i>Since version 0.1.1.0.</i>
destroyAllConnections :: ConnectionPool a -> IO ()

-- | Specialized wrapper for <a>withConnection</a>.
withConnection :: MonadBaseControl IO m => ConnectionPool a -> (Socket -> a -> m r) -> m r
instance Typeable ConnectionPool


-- | Module defines type family of connection pools that is later
--   specialised using type tags (phantom types) to specialize
--   implementation of underlying <a>ConnectionPool</a> for various
--   protocols.
--   
--   Internal packages are here to provide access to internal definitions
--   for library writers, but they should not be used in application code.
--   
--   Preferably use qualified import, e.g.:
--   
--   <pre>
--   import qualified Data.ConnectionPool.Internal.ConnectionPoolFamily
--     as Internal
--   </pre>
--   
--   This module doesn't depend on <a>streaming-commons</a> and other
--   non-HaskellPlatform packages directly and it is only allowed to import
--   <a>Data.ConnectionPool.Internal.ConnectionPool</a> internal module and
--   nothing else from this module. This package uses CPP to get OS
--   specific things right. Most importantly Windows doesn't support UNIX
--   Sockets.
--   
--   Please, bear above in mind when doing modifications.
module Data.ConnectionPool.Internal.ConnectionPoolFamily

-- | Family of connection pools parametrised by transport protocol.

-- | Type tag used to specialize connection pool for TCP clients.
data TcpClient

-- | Type tag used to specialize connection pool for UNIX Socket clients.
data UnixClient
instance Typeable TcpClient
instance Typeable UnixClient
instance Typeable ConnectionPool


-- | Connection pools for TCP clients and UNIX Socket clients (not
--   supported on Windows).
--   
--   This package is built on top of <a>resource-pool</a> and
--   <a>streaming-commons</a> packages. The later allows us to use
--   <a>conduit-extra</a> package for implementing TCP and UNIX Sockets
--   clients. Package <i>conduit-extra</i> defines <tt>appSource</tt> and
--   <tt>appSink</tt> based on abstractions from <i>streaming-commons</i>
--   package and they can be therefore reused. Difference between using
--   <i>conduit-extra</i> or <i>streaming-commons</i> is that instead of
--   using <tt>runTCPClient</tt> (or its lifted variant
--   <tt>runGeneralTCPClient</tt> from <i>conduit-extra</i>) one would use
--   <a>withTcpClientConnection</a>, and instead of <tt>runUnixClient</tt>
--   it would be <a>withUnixClientConnection</a>.
module Data.ConnectionPool

-- | Family of connection pools parametrised by transport protocol.

-- | Parameters of resource pool that describe things like its internal
--   structure. See <a>createPool</a> for details.
data ResourcePoolParams

-- | Lens for accessing maximum number of resources to keep open per
--   stripe. The smallest acceptable value is 1 (default).
numberOfResourcesPerStripe :: Functor f => (Int -> f Int) -> ResourcePoolParams -> f ResourcePoolParams

-- | Lens for accessing stripe count. The number of distinct sub-pools to
--   maintain. The smallest acceptable value is 1 (default).
numberOfStripes :: Functor f => (Int -> f Int) -> ResourcePoolParams -> f ResourcePoolParams

-- | Lens for accessing amount of time for which an unused resource is kept
--   open. The smallest acceptable value is 0.5 seconds (default).
resourceIdleTimeout :: Functor f => (NominalDiffTime -> f NominalDiffTime) -> ResourcePoolParams -> f ResourcePoolParams

-- | Check if all parameters for underlying resource pool are valid:
--   
--   <ul>
--   <li><tt><a>numberOfStripes</a> &gt;= 1</tt> Number of connection
--   sub-pools. Keeping it set to <tt>1</tt> is good for most
--   applications.</li>
--   <li><tt><a>numberOfResourcesPerStripe</a> &gt;= 1</tt> Maximum number
--   of connections in each stripe. Totally there can be
--   <tt><a>numberOfStripes</a> * <a>numberOfResourcesPerStripe</a></tt>
--   open connections simultaneously.</li>
--   <li><tt><a>resourceIdleTimeout</a> &gt;= 0.5</tt> Property specified
--   for how long connection will be kept alive after it is released by
--   back to the pool before it is automatically closed. Value is in
--   seconds.</li>
--   </ul>
--   
--   For more details see <a>createPool</a>.
--   
--   <i>Since version 0.1.1.0.</i>
validateResourcePoolParams :: ResourcePoolParams -> Either String ResourcePoolParams

-- | Type tag used to specialize connection pool for TCP clients.
data TcpClient

-- | Settings for a TCP client, specifying how to connect to the server.
data ClientSettings :: *

-- | The data passed to an <tt>Application</tt>.
data AppData :: *

-- | Create connection pool for TCP clients.
createTcpClientPool :: ResourcePoolParams -> ClientSettings -> IO (ConnectionPool TcpClient)

-- | Temporarily take a TCP connection from a pool, run client with it, and
--   return it to the pool afterwards. For details how connections are
--   allocated see <a>withResource</a>.
withTcpClientConnection :: MonadBaseControl IO m => ConnectionPool TcpClient -> (AppData -> m r) -> m r

-- | Destroy all TCP connections that might be still open in a connection
--   pool. This is useful when one needs to release all resources at once
--   and not to wait for idle timeout to be reached.
--   
--   For more details see <a>destroyAllResources</a>.
--   
--   <i>Since version 0.1.1.0.</i>
destroyAllTcpClientConnections :: ConnectionPool TcpClient -> IO ()

-- | Type tag used to specialize connection pool for UNIX Socket clients.
data UnixClient

-- | Settings for a Unix domain sockets client.
data ClientSettingsUnix :: *

-- | The data passed to a Unix domain sockets <tt>Application</tt>.
data AppDataUnix :: *

-- | Create connection pool for UNIX Sockets clients.
createUnixClientPool :: ResourcePoolParams -> ClientSettingsUnix -> IO (ConnectionPool UnixClient)

-- | Temporarily take a UNIX Sockets connection from a pool, run client
--   with it, and return it to the pool afterwards. For details how
--   connections are allocated see <a>withResource</a>.
withUnixClientConnection :: MonadBaseControl IO m => ConnectionPool UnixClient -> (AppDataUnix -> m r) -> m r

-- | Destroy all UNIX Sockets connections that might be still open in a
--   connection pool. This is useful when one needs to release all
--   resources at once and not to wait for idle timeout to be reached.
--   
--   For more details see <a>destroyAllResources</a>.
--   
--   <i>Since version 0.1.1.0.</i>
destroyAllUnixClientConnections :: ConnectionPool UnixClient -> IO ()
