-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Read and write URIs
--   
--   Read and write URIs
@package uri-conduit
@version 1.1.1

module Network.URI.Conduit
data URI
URI :: Text -> Maybe URIAuth -> Text -> Text -> Text -> URI
uriScheme :: URI -> Text
uriAuthority :: URI -> Maybe URIAuth
uriPath :: URI -> Text
uriQuery :: URI -> Text
uriFragment :: URI -> Text
data URIAuth
URIAuth :: Text -> Text -> Text -> URIAuth
uriUserInfo :: URIAuth -> Text
uriRegName :: URIAuth -> Text
uriPort :: URIAuth -> Text
parseURI :: Failure URIException m => Text -> m URI
parseURIReference :: Failure URIException m => Text -> m URI
parseRelativeReference :: Failure URIException m => Text -> m URI
nullURI :: URI
hasExtension :: URI -> Text -> Bool
relativeTo :: URI -> URI -> Maybe URI
toNetworkURI :: URI -> URI
fromNetworkURI :: URI -> URI
data Scheme
Scheme :: Set Text -> (forall m i. MonadResource m => Maybe (URI -> Conduit i m ByteString)) -> (forall m o. MonadResource m => Maybe (URI -> Conduit ByteString m o)) -> Scheme
schemeNames :: Scheme -> Set Text
schemeReader :: Scheme -> forall m i. MonadResource m => Maybe (URI -> Conduit i m ByteString)
schemeWriter :: Scheme -> forall m o. MonadResource m => Maybe (URI -> Conduit ByteString m o)
type SchemeMap = Map Text Scheme
toSchemeMap :: [Scheme] -> SchemeMap
readURI :: MonadResource m => SchemeMap -> URI -> Producer m ByteString
writeURI :: MonadResource m => SchemeMap -> URI -> Consumer ByteString m ()
copyURI :: MonadResource m => SchemeMap -> URI -> URI -> m ()
data URIException
UnknownReadScheme :: URI -> URIException
UnknownWriteScheme :: URI -> URIException
InvalidURI :: Text -> URIException
InvalidRelativeReference :: Text -> URIException
instance Typeable URIException
instance Show URIAuth
instance Eq URIAuth
instance Ord URIAuth
instance Show URI
instance Eq URI
instance Ord URI
instance Show URIException
instance Exception URIException
instance NFData URIAuth
instance NFData URI

module Network.URI.Conduit.File

-- | Converts a string, such as a command-line argument, into a URI. First
--   tries to parse as an absolute URI. If this fails, it interprets as a
--   relative or absolute filepath.
decodeString :: String -> IO URI
fileScheme :: Scheme
toFilePath :: URI -> FilePath
