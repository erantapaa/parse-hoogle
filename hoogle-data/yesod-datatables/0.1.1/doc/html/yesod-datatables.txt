-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Yesod plugin for DataTables (jQuery grid plugin)
--   
--   DataTables (<a>http://datatables.net</a>) is a capable jQuery plugin.
--   This package contains routines for implementing server-side processing
--   (e.g. request parsing, database querying, and response formatting) for
--   DataTables with Yesod platform.
@package yesod-datatables
@version 0.1.1


-- | DataTables reply formatting.
module Yesod.DataTables.Reply

-- | Container for holding the reply to DataTables jQuery plugin.
data Reply
Reply :: Int -> Int -> Value -> Int -> Reply

-- | Total records, before filtering (i.e. the total number of records in
--   the database).
replyNumRecords :: Reply -> Int

-- | Total records, after filtering (i.e. the total number of records after
--   filtering has been applied - not just the number of records being
--   returned in this result set).
replyNumDisplayRecords :: Reply -> Int

-- | An array of JSON objects, one for each record.
replyRecords :: Reply -> Value

-- | An unaltered copy of <tt>sEcho</tt> sent from the client side.
replyEcho :: Reply -> Int

-- | Translates the reply object to a JSON value that DataTables javascript
--   plugin expects.
formatReply :: Reply -> Value
instance Eq Reply
instance Show Reply


-- | DataTables request parsing.
module Yesod.DataTables.Request

-- | DataTables grid server-side request (see
--   <a>http://datatables.net/usage/server-side</a>)
data Request
Request :: Int -> Int -> Text -> Bool -> [Column] -> [(ColumnName, SortDir)] -> Int -> Request

-- | Display start point in the current data set.
reqDisplayStart :: Request -> Int

-- | Number of records that the table can display in the current draw. It
--   is expected that the number of records returned will be equal to this
--   number, unless the server has fewer records to return.
reqDisplayLength :: Request -> Int

-- | Global search field
reqSearch :: Request -> Text

-- | True if the global filter should be treated as a regular expression
--   for advanced filtering, false if not.
reqSearchRegex :: Request -> Bool

-- | columns that the client-side knows about
reqColumns :: Request -> [Column]

-- | result set sorting instructions
reqSort :: Request -> [(ColumnName, SortDir)]

-- | Information for DataTables to use for rendering (do not alter).
reqEcho :: Request -> Int

-- | information about grid column
data Column
Column :: Bool -> Text -> Bool -> Bool -> Text -> Column

-- | whether searching is enabled at client-side
colSearchable :: Column -> Bool

-- | column-specific search query
colSearch :: Column -> Text

-- | whether search query should be interpreted as a regular expression
colSearchRegex :: Column -> Bool

-- | whether sorting is enabled at client-side
colSortable :: Column -> Bool

-- | column name (client-side also expects the data in a field with the
--   same name
colName :: Column -> Text

-- | Name of DataTables grid column
type ColumnName = Text

-- | enum for sSortDir_(int)
data SortDir
SortAsc :: SortDir
SortDesc :: SortDir

-- | Tries to parse DataTables request
parseRequest :: [(ParamName, ParamValue)] -> Maybe Request
instance Eq SortDir
instance Show SortDir
instance Show Column
instance Eq Column
instance Show Request
instance Eq Request


-- | This module is used to make database queries based on the DataTables
--   request.
module Yesod.DataTables.Query

-- | The functions in a DataTable define how search strings, column
--   sorting, filtering and value fetching is implemented.
data DataTable val
DataTable :: (Text -> RegexFlag -> [Filter val]) -> ([(ColumnName, SortDir)] -> [SelectOpt val]) -> (ColumnName -> Text -> RegexFlag -> [Filter val]) -> [Filter val] -> (forall m. (PersistQuery m, PersistEntityBackend val ~ PersistMonadBackend m) => ColumnName -> Entity val -> m Text) -> (forall m. (PersistQuery m, PersistEntityBackend val ~ PersistMonadBackend m) => Entity val -> m Text) -> DataTable val

-- | mapping global search field to filters
dtGlobalSearch :: DataTable val -> Text -> RegexFlag -> [Filter val]

-- | mapping sorting instructions to select options
dtSort :: DataTable val -> [(ColumnName, SortDir)] -> [SelectOpt val]

-- | mapping a column search to filters
dtColumnSearch :: DataTable val -> ColumnName -> Text -> RegexFlag -> [Filter val]

-- | filters that are always applied
dtFilters :: DataTable val -> [Filter val]

-- | mapping column name and entity to a textual value
dtValue :: DataTable val -> forall m. (PersistQuery m, PersistEntityBackend val ~ PersistMonadBackend m) => ColumnName -> Entity val -> m Text

-- | mapping entity to a row identifier
dtRowId :: DataTable val -> forall m. (PersistQuery m, PersistEntityBackend val ~ PersistMonadBackend m) => Entity val -> m Text

-- | Type synonym for indicating whether a search string is a regular
--   expression.
type RegexFlag = Bool

-- | Name of DataTables grid column
type ColumnName = Text

-- | selects records from database and populates the grid columns using
--   callback functions (which can issue follow-up queries)
dataTableSelect :: (PersistEntity val, PersistQuery m, PersistEntityBackend val ~ PersistMonadBackend m) => DataTable val -> Request -> m Reply


-- | DataTables (<a>http://datatables.net</a>) is a capable plugin for
--   jQuery Javascript library. This Haskell library contains routines for
--   implementing server-side processing (e.g. request parsing and response
--   formatting) for DataTables with Yesod platform.
--   
--   See the example at
--   <a>http://yesod-datatables-example.herokuapp.com</a> .
module Yesod.DataTables
