-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A parallel wrapper for 'ghc --make'.
--   
--   'ghc-parmake' is a parallel wrapper for 'ghc --make' intended to work
--   as its drop-in replacement. It can build your Haskell program in
--   parallel using multiple cores. 'ghc-parmake' works by extracting a
--   module dependency graph with 'ghc -M' and then running multiple 'ghc
--   -c' processes in parallel. To set the number of concurrent jobs, use
--   the '-j' option.
@package ghc-parmake
@version 0.1.8

module GHC.ParMake.Common
andM :: Monad m => [m Bool] -> m Bool

-- | Map f over l and then append rest to l. More efficient than doing `map
--   f l ++ rest`.
appendMap :: (t -> a) -> [t] -> [a] -> [a]
firstM :: Monad m => [a] -> (a -> m Bool) -> m (Maybe a)
maybeRead :: Read a => String -> Maybe a
pathToMaybe :: FilePath -> Maybe FilePath

-- | Remove consecutive duplicate elements from a list. Example: uniq
--   [3,3,3] = [3].
uniq :: Eq a => [a] -> [a]

module GHC.ParMake.Util

-- | Process creation.
runProcess :: OutputHooks -> Maybe FilePath -> FilePath -> [String] -> IO ExitCode

-- | Is this target up to date w.r.t. its dependencies?
upToDateCheck :: FilePath -> [FilePath] -> IO UpToDateStatus
data UpToDateStatus
UpToDate :: UpToDateStatus
TargetDoesNotExist :: UpToDateStatus
NewerDependency :: FilePath -> UpToDateStatus
defaultOutputHooks :: OutputHooks
data OutputHooks
OutputHooks :: !(String -> IO ()) -> !(String -> IO ()) -> !(String -> IO ()) -> !(String -> IO ()) -> !(IO ()) -> OutputHooks
putStrHook :: OutputHooks -> !(String -> IO ())
putStrLnHook :: OutputHooks -> !(String -> IO ())
putStrErrHook :: OutputHooks -> !(String -> IO ())
putStrLnErrHook :: OutputHooks -> !(String -> IO ())
flushStdOutHook :: OutputHooks -> !(IO ())

-- | Non fatal conditions that may be indicative of an error or problem.
--   
--   We display these at the <a>normal</a> verbosity level.
warn :: OutputHooks -> Verbosity -> String -> IO ()
notice :: OutputHooks -> Verbosity -> String -> IO ()

-- | More detail on the operation of some action.
--   
--   We display these messages when the verbosity level is <a>verbose</a>
info :: OutputHooks -> Verbosity -> String -> IO ()

-- | Detailed internal debugging information
--   
--   We display these messages when the verbosity level is <a>deafening</a>
debug :: OutputHooks -> Verbosity -> String -> IO ()

-- | Fatal error.
fatal :: String -> a
warn' :: Verbosity -> String -> IO ()
notice' :: Verbosity -> String -> IO ()

-- | Useful status messages.
--   
--   We display these at the <a>normal</a> verbosity level.
--   
--   This is for the ordinary helpful status messages that users see. Just
--   enough information to know that things are working but not floods of
--   detail.
noticeRaw :: OutputHooks -> Verbosity -> String -> IO ()
info' :: Verbosity -> String -> IO ()
debug' :: Verbosity -> String -> IO ()
data Verbosity
intToVerbosity :: Int -> Maybe Verbosity
silent :: Verbosity
normal :: Verbosity
verbose :: Verbosity
deafening :: Verbosity
instance Show Verbosity
instance Read Verbosity
instance Eq Verbosity
instance Ord Verbosity
instance Enum Verbosity
instance Bounded Verbosity
instance Eq UpToDateStatus
instance Ord UpToDateStatus
instance Show UpToDateStatus

module GHC.ParMake.Types

-- | A single dependency extracted from the 'ghc -M' output.
data Dep
Dep :: FilePath -> [FilePath] -> [FilePath] -> Dep

-- | The target file.
depTarget :: Dep -> FilePath

-- | Dependencies in our build.
depInternal :: Dep -> [FilePath]

-- | External dependencies: dependencies given by 'ghc -M
--   -include-pkg-deps' minus the internal ones.
depExternal :: Dep -> [FilePath]
instance Eq Dep
instance Ord Dep
instance Show Dep

module GHC.ParMake.Parse
getModuleDeps :: Verbosity -> FilePath -> [String] -> [FilePath] -> IO [Dep]

-- | Converts a list of (targets, dependencies) to a <a>Dep</a> list with
--   no external dependencies.
depsListToDeps :: [(FilePath, FilePath)] -> [Dep]

module GHC.ParMake.BuildPlan

-- | Create a new BuildPlan from a list of (target, dependency) pairs. This
--   is mostly a copy of Distribution.Client.PackageIndex.dependencyGraph.
new :: Settings -> [Dep] -> [FilePath] -> BuildPlan

-- | Get all targets that are ready to be built.
ready :: BuildPlan -> [Target]

-- | Return all targets that are currently building.
building :: BuildPlan -> [Target]

-- | Return all targets that were built successfully.
completed :: BuildPlan -> [Target]

-- | Total number of targets in the BuildPlan.
size :: BuildPlan -> Int
numCompleted :: BuildPlan -> Int

-- | Mark a target as successfully built.
markCompleted :: BuildPlan -> Target -> BuildPlan

-- | Mark all <a>ready</a> targets as <a>currently building</a>.
markReadyAsBuilding :: BuildPlan -> BuildPlan

-- | How many targets are we building currently?
numBuilding :: BuildPlan -> Int

-- | Are there any targets in the <a>currently building</a> state?
hasBuilding :: BuildPlan -> Bool

-- | A graph of all dependencies between targets.
data BuildPlan
data Target
type TargetId = FilePath

-- | Target (e.g. <a>o</a>)
targetId :: Target -> TargetId

-- | Given a Target, return all its dependencies (internal + external).
allDepends :: Target -> [TargetId]

-- | Given a Target, return the name of the source file from which it can
--   be produced.
source :: Target -> FilePath

-- | Given a Target, return the name of the object file produced from it
--   that should be fed to the linker.
object :: Target -> Maybe FilePath

-- | Given a BuildPlan, return the list of object files for all completed
--   targets.
objects :: BuildPlan -> [FilePath]

-- | Settings for a BuildPlan
data Settings
Settings :: String -> String -> Settings
osuf :: Settings -> String
hisuf :: Settings -> String
defaultSettings :: Settings
instance Eq Settings
instance Ord Settings
instance Show Settings
instance Show Target
instance Show BuildPlan
instance Eq Target

module GHC.ParMake.Engine
data LogTask
LogStr :: String -> LogTask
LogStrLn :: String -> LogTask
LogStrErr :: String -> LogTask
LogStrLnErr :: String -> LogTask
LogFlushStdOut :: LogTask
type LogChan = Chan LogTask
logThreadOutputHooks :: String -> LogChan -> OutputHooks
logThread :: LogChan -> IO ()
data WorkerTask
BuildModule :: Int -> Target -> WorkerTask
BuildProgram :: FilePath -> [FilePath] -> WorkerTask
type WorkerChan = Chan WorkerTask
workerThread :: OutputHooks -> Verbosity -> String -> FilePath -> [String] -> [FilePath] -> WorkerChan -> ControlChan -> IO ()
data ControlMessage
ModuleCompiled :: Target -> ControlMessage
BuildCompleted :: ControlMessage
CompileFailed :: Target -> ExitCode -> ControlMessage
BuildFailed :: ExitCode -> ControlMessage
type ControlChan = Chan ControlMessage
controlThread :: BuildPlan -> Maybe FilePath -> ControlChan -> WorkerChan -> IO ExitCode

-- | Given a BuildPlan, perform the compilation.
compile :: Verbosity -> BuildPlan -> Int -> FilePath -> [String] -> [FilePath] -> Maybe FilePath -> IO ExitCode
instance Show ControlMessage
