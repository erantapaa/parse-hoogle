-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Easily-extensible chatbot for Slack messaging service
--   
--   Haskbot melds together the Slack <i>slash command</i> and
--   <i>incoming</i> API integrations to create an easily-extensible
--   platform for adding your own custom <i>slash commands</i> with
--   arbitrary responses to your team's Slack service.
--   
--   Sure, Hubot exists, but when I desire custom chatbot functionality,
--   I'd rather write nice, clean Haskell than clunky Javascript any day of
--   the week.
@package haskbot-core
@version 0.1


-- | This provides wrappers for the various types of data supplied by the
--   Slack API, so that any processing of the API data remains type-safe.
--   No constructors are directly exported to allow for flexibility with
--   the currently-beta Slack API.
module Network.Haskbot.Types
data Token

-- | get the text of a token
getToken :: Token -> Text

-- | make a token of the given text
setToken :: Text -> Token
data TeamID

-- | get the text value of a team ID
getTeamID :: TeamID -> Text

-- | make a team ID of the given text value
setTeamID :: Text -> TeamID
data ChannelID

-- | get the text value of a channel ID
getChanID :: ChannelID -> Text

-- | make a channel ID of the given text value
setChanID :: Text -> ChannelID
data ChannelName

-- | get the text value of a channel name
getChanName :: ChannelName -> Text

-- | get the text value of a channel name, prefixed with a <tt>#</tt>
getPoundChan :: ChannelName -> Text

-- | make a channel name of the given text value
setChanName :: Text -> ChannelName
data UserID

-- | get the text value of a user ID
getUserID :: UserID -> Text

-- | make a user ID of the given text value
setUserID :: Text -> UserID
data UserName

-- | get the text value of a username
getUserName :: UserName -> Text

-- | get the text value of a username prefixed with a <tt>@</tt>
getAtUserName :: UserName -> Text

-- | make a username of given text value
setUserName :: Text -> UserName
data Command

-- | get the text name of a command
getCommand :: Command -> Text

-- | get the text name of a command prefixed with a <tt>/</tt>
getSlashCom :: Command -> Text

-- | make a command with the given name
setCommand :: Text -> Command

-- | Slack channels are either regular channels or direct messages to users
data Channel
DirectMsg :: {-# UNPACK #-} !UserName -> Channel
Channel :: {-# UNPACK #-} !ChannelName -> Channel

-- | Get the text representation of a channel, with the appropriate prefix
--   required by Slack
getAddress :: Channel -> Text
instance Eq Token
instance Show Token
instance Eq TeamID
instance Show TeamID
instance Eq ChannelID
instance Show ChannelID
instance Eq ChannelName
instance Show ChannelName
instance Eq UserID
instance Show UserID
instance Eq UserName
instance Show UserName
instance Eq Command
instance Show Command
instance Eq Channel
instance Show Channel


-- | The configuration type required to bootstrap <a>Slack.Haskbot</a>
module Network.Haskbot.Config
data Config
Config :: Int -> String -> String -> Config

-- | the port on which Haskbot listens
listenOn :: Config -> Int

-- | the Slack endpoint of your <i>incoming</i> integration, usually in the
--   form of <tt>https:<i></i>[your company
--   name].slack.com<i>services</i>hooks/incoming-webhook</tt>
incEndpoint :: Config -> String

-- | the secret token of your <i>incoming</i> integration
incToken :: Config -> String
incUrl :: Config -> String

module Network.Haskbot.Internal.Environment
data Environment
Environment :: TVar [ByteString] -> Manager -> Config -> Environment
incQueue :: Environment -> TVar [ByteString]
netConn :: Environment -> Manager
config :: Environment -> Config
bootstrap :: Config -> IO Environment
type HaskbotM = EnvironT (ErrorT Status IO)
type EnvironT m = ReaderT Environment m
instance Error Status

module Network.Haskbot.Internal.Request
type Params = Map Text Text
jsonContentType :: Header
textContentType :: Header
getPostParams :: Request -> HaskbotM Params
headOnly :: Status -> Response
getParamsMap :: Request -> IO Params
optParam :: Params -> Text -> HaskbotM (Maybe Text)
reqParam :: Params -> Text -> HaskbotM Text


-- | This provides a simple representation of the request data for a Slack
--   <i>incoming</i> integration- the means via which Haskbot replies to
--   Slack. Currently only simple text replies are supported, but this will
--   be expanded to support fully-Slack-formatted messages in the future.
module Network.Haskbot.Incoming
data Incoming
Incoming :: !Channel -> {-# UNPACK #-} !Text -> Incoming

-- | the channel to send the reply
incChan :: Incoming -> !Channel

-- | the text of the reply
incText :: Incoming -> {-# UNPACK #-} !Text
addToSendQueue :: MonadIO m => Incoming -> EnvironT m ()
sendFromQueue :: MonadIO m => EnvironT m ()
instance Eq Incoming
instance Show Incoming
instance ToJSON Incoming


-- | This provides a representation of the request data from a Slack /slash
--   command/ integration. A <a>Network.Haskbot.Plugin</a> handler function
--   is given direct access to this data type when a <i>slash command</i>
--   is invoked via Slack.
module Network.Haskbot.SlashCommand

-- | Encapsulates all data provided by a request from a Slack <i>slash
--   command</i> integration
data SlashCom
SlashCom :: {-# UNPACK #-} !Token -> {-# UNPACK #-} !TeamID -> {-# UNPACK #-} !ChannelID -> {-# UNPACK #-} !ChannelName -> {-# UNPACK #-} !UserID -> {-# UNPACK #-} !UserName -> {-# UNPACK #-} !Command -> Maybe Text -> SlashCom

-- | the token corresponding to the <i>slash command</i> integration secret
--   token
token :: SlashCom -> {-# UNPACK #-} !Token

-- | the team ID of the command invoker
teamID :: SlashCom -> {-# UNPACK #-} !TeamID

-- | the channel ID where the command was invoked
channelID :: SlashCom -> {-# UNPACK #-} !ChannelID

-- | the channel name where the command was invoked
channelName :: SlashCom -> {-# UNPACK #-} !ChannelName

-- | the user ID of the command invoker
userID :: SlashCom -> {-# UNPACK #-} !UserID

-- | the username of the command invoker
userName :: SlashCom -> {-# UNPACK #-} !UserName

-- | the name of the command invoked
command :: SlashCom -> {-# UNPACK #-} !Command

-- | any text following the invoked slash command
optText :: SlashCom -> Maybe Text
fromParams :: Params -> HaskbotM SlashCom
instance Eq SlashCom
instance Show SlashCom


-- | The recommended process for exporting plugins is to create a new
--   module that exports a single function currying the first three
--   arguments to <a>Plugin</a>. The remaining argument, the Slack secret
--   token, can be supplied in a separate file exporting the list of
--   installed commands for Haskbot. This enables you to recreate a
--   registry of installed tokens and corresponding secret tokens in a
--   separate file outside of version control.
--   
--   A basic <i>Hello World</i> plugin can be created via:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   module MyPlugins.HelloWorld (register) where
--   
--   import Data.Text
--   import Network.Haskbot.Plugin
--   import Network.Haskbot.Types
--   
--   name :: Command
--   name = setCommand "hello_world"
--   
--   helpText :: Text
--   helpText = "Have Haskbot say _Hello, World!_ in your current channel."
--   
--   handler :: HandlerFn
--   handler slashCom = return $ replySameChan slashCom "Hello, World!"
--   
--   register :: Text -&gt; Plugin
--   register = Plugin name helpText handler . setToken
--   </pre>
--   
--   To run the plugin, create a new Slack <i>slash command</i> integration
--   corresponding to the command <tt>/hello_world</tt> that points to your
--   Haskbot server. Add the plugin's <tt>register</tt> function to your
--   Haskbot server's plugin registry like detailed in
--   <a>Network.Haskbot</a>, giving it the Slack integration's secret token
--   as the remaining argument. Rebuild and run the server. Typing
--   <tt>/hello_word</tt> into any Slack channel should return a Haskbot
--   response of <i>Hello, world!</i>
module Network.Haskbot.Plugin
data Plugin
Plugin :: {-# UNPACK #-} !Command -> {-# UNPACK #-} !Text -> !HandlerFn -> {-# UNPACK #-} !Token -> Plugin

-- | The command that invokes this plugin
plCommand :: Plugin -> {-# UNPACK #-} !Command

-- | Help text displayed for this plugin via
--   <a>Network.Haskbot.Plugin.Help</a>
plHelpText :: Plugin -> {-# UNPACK #-} !Text

-- | The function run when a <a>Plugin</a> is invoked
plHandler :: Plugin -> !HandlerFn

-- | The secret token corresponding with this plugin's <i>slash command</i>
--   Slack integration
plToken :: Plugin -> {-# UNPACK #-} !Token

-- | The type of function run by a plugin. It receives the full
--   <a>Network.Haskbot.SlashCommand</a> invoked and can optionally return
--   a <a>Network.Haskbot.Incoming</a> reply
type HandlerFn = SlashCom -> HaskbotM (Maybe Incoming)

-- | Send a Slack reply to the same channel as where the corresponding
--   /slash command/ was invoked, formatted according to <a>Slack</a>
replySameChan :: SlashCom -> Text -> Maybe Incoming

-- | Send a Slack reply as a DM to the user who invoked the <i>slash
--   command</i>, formatted according to <a>Slack</a>
replyAsDM :: SlashCom -> Text -> Maybe Incoming
runPlugin :: Plugin -> SlashCom -> HaskbotM ()
isAuthorized :: Plugin -> SlashCom -> Bool
selectFrom :: [Plugin] -> Command -> Maybe Plugin

module Network.Haskbot.Plugin.Help
register :: [Plugin] -> Text -> Plugin

module Network.Haskbot.Internal.Server
webServer :: Config -> [Plugin] -> IO ()


-- | A minimal Haskbot server can be run via:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   import Network.Haskbot
--   import Network.Haskbot.Config
--   import Network.Haskbot.Plugin
--   import qualified Network.Haskbot.Plugin.Help as Help
--   
--   main :: IO ()
--   main = haskbot config registry
--   
--   config :: Config
--   config = Config { listenOn    = 3000
--                   , incEndpoint = "https://my-company.slack.com/services/hooks/incoming-webhook"
--                   , incToken    = "my-incoming-token"
--                   }
--   
--   registry :: [Plugin]
--   registry = [ Help.register registry "my-slash-token" ]
--   </pre>
--   
--   This will run Haskbot on port 3000 with the included
--   <a>Network.Haskbot.Plugin.Help</a> plugin installed, where
--   <tt>"my-slash-token"</tt> is the secret token of a Slack slash command
--   integration corresponding to the <tt>/haskbot</tt> command and
--   pointing to the Haskbot server.
--   
--   Be sure to create a Slack incoming integration (usually named
--   <i>Haskbot</i>) and set the <tt>incEndpoint</tt> and <tt>incToken</tt>
--   to their corresponding values, so that Slack can receive replies from
--   Haskbot.
module Network.Haskbot

-- | Run the listed plugins on a Haskbot server with the given config
haskbot :: Config -> [Plugin] -> IO ()
