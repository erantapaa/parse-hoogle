-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | IO without any non-error, synchronous exceptions
--   
@package unexceptionalio
@version 0.2.0


-- | When you've caught all the exceptions that can be handled safely, this
--   is what you're left with.
--   
--   <pre>
--   runEitherIO . fromIO â‰¡ id
--   </pre>
module UnexceptionalIO

-- | IO without any non-error, synchronous exceptions
data UnexceptionalIO a

-- | or, you may prefer a short name
type UIO = UnexceptionalIO

-- | Catch any non-error, synchronous exceptions in an <a>IO</a> action
fromIO :: IO a -> UnexceptionalIO (Either SomeException a)

-- | Re-embed <a>UnexceptionalIO</a> into <a>IO</a>
runUnexceptionalIO :: UnexceptionalIO a -> IO a

-- | Re-embed <a>UnexceptionalIO</a> and possible exception back into
--   <a>IO</a>
runEitherIO :: Exception e => UnexceptionalIO (Either e a) -> IO a

-- | You promise that <tt>e</tt> covers all non-error, synchronous
--   exceptions thrown by this <a>IO</a> action
--   
--   This function is partial if you lie
fromIO' :: Exception e => IO a -> UnexceptionalIO (Either e a)

-- | You promise there are no exceptions thrown by this <a>IO</a> action
unsafeFromIO :: IO a -> UnexceptionalIO a

-- | Catch all exceptions, except for asynchronous exceptions found in
--   <tt>base</tt>
syncIO :: IO a -> IO (Either SomeException a)
instance MonadFix UnexceptionalIO
instance Monad UnexceptionalIO
instance Applicative UnexceptionalIO
instance Functor UnexceptionalIO
