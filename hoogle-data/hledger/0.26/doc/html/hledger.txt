-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The main command-line interface for the hledger accounting tool.
--   
@package hledger
@version 0.26

module Hledger.Cli.Version
progname :: String
version :: String
prognameandversion :: String
prognameanddetailedversion :: String

-- | Given a program name, return a precise platform-specific executable
--   name suitable for naming downloadable binaries. Can raise an error if
--   the version and patch level was not defined correctly at build time.
binaryfilename :: String -> String


-- | Common cmdargs modes and flags, a command-line options type, and
--   related utilities used by hledger commands.
module Hledger.Cli.Options

-- | Common help flags: --help, --debug, --version...
helpflags :: [Flag RawOpts]

-- | A hidden flag, just for the hledger executable.
detailedversionflag :: Flag RawOpts

-- | Common input-related flags: --file, --rules-file, --alias...
inputflags :: [Flag RawOpts]

-- | Common report-related flags: --period, --cost, etc.
reportflags :: [Flag RawOpts]

-- | Common output-related flags: --output-file, --output-format...
outputflags :: [Flag RawOpts]
generalflagsgroup1 :: (String, [Flag RawOpts])
generalflagsgroup2 :: (String, [Flag RawOpts])
generalflagsgroup3 :: (String, [Flag RawOpts])

-- | A basic mode template.
defMode :: Mode RawOpts

-- | A basic subcommand mode with the given command name(s).
defCommandMode :: [Name] -> Mode RawOpts

-- | A basic subcommand mode suitable for an add-on command.
defAddonCommandMode :: Name -> Mode RawOpts
argsFlag :: FlagHelp -> Arg RawOpts

-- | Get a mode's help message as a nicely wrapped string.
showModeHelp :: Mode a -> String

-- | Add command aliases to the command's help string.
withAliases :: String -> [String] -> String

-- | Command line options, used in the <tt>hledger</tt> package and above.
--   This is the "opts" used throughout hledger CLI code. representing the
--   options that arguments that were provided at startup on the
--   command-line.
data CliOpts
CliOpts :: RawOpts -> String -> [FilePath] -> Maybe FilePath -> Maybe FilePath -> Maybe String -> [String] -> Bool -> Int -> Bool -> Maybe String -> Int -> ReportOpts -> CliOpts
rawopts_ :: CliOpts -> RawOpts
command_ :: CliOpts -> String
file_ :: CliOpts -> [FilePath]
rules_file_ :: CliOpts -> Maybe FilePath
output_file_ :: CliOpts -> Maybe FilePath
output_format_ :: CliOpts -> Maybe String
alias_ :: CliOpts -> [String]
ignore_assertions_ :: CliOpts -> Bool

-- | debug level, set by <tt>--debug[=N]</tt>. See also <a>debugLevel</a>.
debug_ :: CliOpts -> Int
no_new_accounts_ :: CliOpts -> Bool

-- | the --width value provided, if any
width_ :: CliOpts -> Maybe String

-- | estimated usable screen width, based on 1. the COLUMNS env var, if set
--   2. the width reported by the terminal, if supported 3. the default
--   (80)
available_width_ :: CliOpts -> Int
reportopts_ :: CliOpts -> ReportOpts
defcliopts :: CliOpts

-- | Parse hledger CLI options from the command line using the given
--   cmdargs mode, and either return them or, if a help flag is present,
--   print the mode help and exit the program.
getCliOpts :: Mode RawOpts -> IO CliOpts

-- | Convert possibly encoded option values to regular unicode strings.
decodeRawOpts :: RawOpts -> RawOpts

-- | Parse raw option string values to the desired final data types. Any
--   relative smart dates will be converted to fixed dates based on today's
--   date. Parsing failures will raise an error. Also records the terminal
--   width, if supported.
rawOptsToCliOpts :: RawOpts -> IO CliOpts

-- | Do final validation of processed opts, raising an error if there is
--   trouble.
checkCliOpts :: CliOpts -> IO CliOpts
outputFormats :: [[Char]]
defaultOutputFormat :: [Char]

-- | Get the account name aliases from options, if any.
aliasesFromOpts :: CliOpts -> [AccountAlias]

-- | Get the (tilde-expanded, absolute) journal file path from 1. options,
--   2. an environment variable, or 3. the default. Actually, returns one
--   or more file paths. There will be more than one if multiple -f options
--   were provided.
journalFilePathFromOpts :: CliOpts -> IO [String]

-- | Get the (tilde-expanded) rules file path from options, if any.
rulesFilePathFromOpts :: CliOpts -> IO (Maybe FilePath)

-- | Get the expanded, absolute output file path from options, or the
--   default (-, meaning stdout).
outputFileFromOpts :: CliOpts -> IO FilePath

-- | Get the output format from the --output-format option, otherwise from
--   a recognised file extension in the --output-file option, otherwise the
--   default (txt).
outputFormatFromOpts :: CliOpts -> String

-- | Default width for hledger console output, when not otherwise
--   specified.
defaultWidth :: Int

-- | Get the width in characters to use for console output. This comes from
--   the --width option, or the COLUMNS environment variable, or (on posix
--   platforms) the current terminal width, or 80. Will raise a parse error
--   for a malformed --width argument.
widthFromOpts :: CliOpts -> Int

-- | Get the width in characters to use for the register command's console
--   output, and also the description column width if specified (following
--   the main width, comma-separated). The widths will be as follows: <tt>
--   no --width flag - overall width is the available width (COLUMNS, or
--   posix terminal width, or 80); description width is unspecified (auto)
--   --width W - overall width is W, description width is auto --width W,D
--   - overall width is W, description width is D </tt> Will raise a parse
--   error for a malformed --width argument.
registerWidthsFromOpts :: CliOpts -> (Int, Maybe Int)

-- | Drop leading components of accounts names as specified by --drop, but
--   only in --flat mode.
maybeAccountNameDrop :: ReportOpts -> AccountName -> AccountName

-- | Parse the format option if provided, possibly returning an error,
--   otherwise get the default value.
lineFormatFromOpts :: ReportOpts -> Either String [OutputFormat]

-- | Get the sorted unique precise names and display names of hledger
--   add-ons found in the current user's PATH. The precise names are the
--   add-on's filename with the "hledger-" prefix removed. The display
--   names have the file extension removed also, except when it's needed
--   for disambiguation.
--   
--   <ul>
--   <li>- Also when there are exactly two similar names, one with the .hs
--   or</li>
--   <li>- .lhs extension and the other with the .exe extension or no</li>
--   <li>- extension - presumably source and compiled versions of a
--   haskell</li>
--   <li>- script - we exclude the source version.</li>
--   </ul>
--   
--   This function can return add-on names which shadow built-in command
--   names, but hledger will ignore these.
hledgerAddons :: IO ([String], [String])
tests_Hledger_Cli_Options :: Test
instance Typeable CliOpts
instance Show CliOpts
instance Data CliOpts
instance Default CliOpts


-- | The <tt>accounts</tt> command lists account names:
--   
--   <ul>
--   <li>in flat mode (default), it lists the full names of accounts posted
--   to by matched postings, clipped to the specified depth, possibly with
--   leading components dropped.</li>
--   <li>in tree mode, it shows the indented short names of accounts posted
--   to by matched postings, and their parents, to the specified
--   depth.</li>
--   </ul>
module Hledger.Cli.Accounts

-- | Command line options for this command.
accountsmode :: Mode RawOpts

-- | The accounts command.
accounts :: CliOpts -> Journal -> IO ()
tests_Hledger_Cli_Accounts :: Test


-- | Print a histogram report. (The "activity" command).
module Hledger.Cli.Histogram
activitymode :: Mode RawOpts
barchar :: Char

-- | Print a histogram of some statistic per reporting interval, such as
--   number of postings per day.
histogram :: CliOpts -> Journal -> IO ()
showHistogram :: ReportOpts -> Query -> Journal -> String
printDayWith :: (PrintfArg t2, PrintfType t1) => (t -> t2) -> (DateSpan, t) -> t1
countBar :: [a] -> [Char]


-- | Utilities for top-level modules and ghci. See also Hledger.Read and
--   Hledger.Utils.
module Hledger.Cli.Utils

-- | Parse the user's specified journal file and run a hledger command on
--   it, or throw an error.
withJournalDo :: CliOpts -> (CliOpts -> Journal -> IO ()) -> IO ()

-- | Write some output to stdout or to a file selected by --output-file.
writeOutput :: CliOpts -> String -> IO ()

-- | Re-read a journal from its data file, or return an error string.
journalReload :: Journal -> IO (Either String Journal)

-- | Re-read a journal from its data file mostly, only if the file has
--   changed since last read (or if there is no file, ie data read from
--   stdin). The provided options are mostly ignored. Return a journal or
--   the error message while reading it, and a flag indicating whether it
--   was re-read or not.
journalReloadIfChanged :: CliOpts -> Journal -> IO (Either String Journal, Bool)

-- | Has the journal's main data file changed since the journal was last
--   read ?
journalFileIsNewer :: Journal -> IO Bool

-- | Has the specified file (presumably one of journal's data files)
--   changed since journal was last read ?
journalSpecifiedFileIsNewer :: Journal -> FilePath -> IO Bool

-- | Get the last modified time of the specified file, or if it does not
--   exist or there is some other error, the current time.
fileModificationTime :: FilePath -> IO ClockTime

-- | Attempt to open a web browser on the given url, all platforms.
openBrowserOn :: String -> IO ExitCode

-- | Back up this file with a (incrementing) numbered suffix, then
--   overwrite it with this new text, or give an error.
writeFileWithBackup :: FilePath -> String -> IO ()

-- | Back up this file with a (incrementing) numbered suffix then overwrite
--   it with this new text, or give an error, but only if the text is
--   different from the current file contents, and return a flag indicating
--   whether we did anything.
writeFileWithBackupIfChanged :: FilePath -> String -> IO Bool
readFileStrictly :: FilePath -> IO String

-- | The basic structure used to create an annotated tree of test cases.
data Test :: *

-- | A set of <tt>Test</tt>s sharing the same level in the hierarchy.
TestList :: [Test] -> Test


-- | A ledger-compatible <tt>balance</tt> command, with additional support
--   for multi-column reports.
--   
--   Here is a description/specification for the balance command. See also
--   <a>Hledger.Reports</a> -&gt; "Balance reports".
--   
--   <i>Basic balance report</i>
--   
--   With no reporting interval (<tt>--monthly</tt> etc.), hledger's
--   balance command emulates ledger's, showing accounts indented according
--   to hierarchy, along with their total amount posted (including
--   subaccounts).
--   
--   Here's an example. With <tt>data/sample.journal</tt>, which defines
--   the following account tree:
--   
--   <pre>
--   assets
--     bank
--       checking
--       saving
--     cash
--   expenses
--     food
--     supplies
--   income
--     gifts
--     salary
--   liabilities
--     debts
--   </pre>
--   
--   the basic <tt>balance</tt> command gives this output:
--   
--   <pre>
--    $ hledger -f sample.journal balance
--                    $-1  assets
--                     $1    bank:saving
--                    $-2    cash
--                     $2  expenses
--                     $1    food
--                     $1    supplies
--                    $-2  income
--                    $-1    gifts
--                    $-1    salary
--                     $1  liabilities:debts
--   --------------------
--                      0
--   </pre>
--   
--   Subaccounts are displayed indented below their parent. Only the
--   account leaf name (the final part) is shown. (With <tt>--flat</tt>,
--   account names are shown in full and unindented.)
--   
--   Each account's "balance" is the sum of postings in that account and
--   any subaccounts during the report period. When the report period
--   includes all transactions, this is equivalent to the account's current
--   balance.
--   
--   The overall total of the highest-level displayed accounts is shown
--   below the line. (The <tt>--no-total/-N</tt> flag prevents this.)
--   
--   <i>Eliding and omitting</i>
--   
--   Accounts which have a zero balance, and no non-zero subaccount
--   balances, are normally omitted from the report. (The
--   <tt>--empty/-E</tt> flag forces such accounts to be displayed.) Eg,
--   above <tt>checking</tt> is omitted because it has a zero balance and
--   no subaccounts.
--   
--   Accounts which have a single subaccount also being displayed, with the
--   same balance, are normally elided into the subaccount's line. (The
--   <tt>--no-elide</tt> flag prevents this.) Eg, above <tt>bank</tt> is
--   elided to <tt>bank:saving</tt> because it has only a single displayed
--   subaccount (<tt>saving</tt>) and their balance is the same ($1).
--   Similarly, <tt>liabilities</tt> is elided to
--   <tt>liabilities:debts</tt>.
--   
--   <i>Date limiting</i>
--   
--   The default report period is that of the whole journal, including all
--   known transactions. The <tt>--begin/-b</tt>, <tt>--end/-e</tt>,
--   <tt>--period/-p</tt> options or <tt>date:</tt>/<tt>date2:</tt>
--   patterns can be used to report only on transactions before and/or
--   after specified dates.
--   
--   <i>Depth limiting</i>
--   
--   The <tt>--depth</tt> option can be used to limit the depth of the
--   balance report. Eg, to see just the top level accounts (still
--   including their subaccount balances):
--   
--   <pre>
--   $ hledger -f sample.journal balance --depth 1
--                    $-1  assets
--                     $2  expenses
--                    $-2  income
--                     $1  liabilities
--   --------------------
--                      0
--   </pre>
--   
--   <i>Account limiting</i>
--   
--   With one or more account pattern arguments, the report is restricted
--   to accounts whose name matches one of the patterns, plus their parents
--   and subaccounts. Eg, adding the pattern <tt>o</tt> to the first
--   example gives:
--   
--   <pre>
--    $ hledger -f sample.journal balance o
--                     $1  expenses:food
--                    $-2  income
--                    $-1    gifts
--                    $-1    salary
--   --------------------
--                    $-1
--   </pre>
--   
--   <ul>
--   <li>The <tt>o</tt> pattern matched <tt>food</tt> and <tt>income</tt>,
--   so they are shown.</li>
--   <li><tt>food</tt>'s parent (<tt>expenses</tt>) is shown even though
--   the pattern didn't match it, to clarify the hierarchy. The usual
--   eliding rules cause it to be elided here.</li>
--   <li><tt>income</tt>'s subaccounts are also shown.</li>
--   </ul>
--   
--   <i>Multi-column balance report</i>
--   
--   hledger's balance command will show multiple columns when a reporting
--   interval is specified (eg with <tt>--monthly</tt>), one column for
--   each sub-period.
--   
--   There are three kinds of multi-column balance report, indicated by the
--   heading:
--   
--   <ul>
--   <li>A "period balance" (or "flow") report (the default) shows the
--   change of account balance in each period, which is equivalent to the
--   sum of postings in each period. Here, checking's balance increased by
--   10 in Feb:</li>
--   </ul>
--   
--   <pre>
--   Change of balance (flow):
--   
--                    Jan   Feb   Mar
--   assets:checking   20    10    -5
--   </pre>
--   
--   <ul>
--   <li>A "cumulative balance" report (with <tt>--cumulative</tt>) shows
--   the accumulated ending balance across periods, starting from zero at
--   the report's start date. Here, 30 is the sum of checking postings
--   during Jan and Feb:</li>
--   </ul>
--   
--   <pre>
--   Ending balance (cumulative):
--   
--                    Jan   Feb   Mar
--   assets:checking   20    30    25
--   </pre>
--   
--   <ul>
--   <li>A "historical balance" report (with <tt>--historical/-H</tt>) also
--   shows ending balances, but it includes the starting balance from any
--   postings before the report start date. Here, 130 is the balance from
--   all checking postings at the end of Feb, including pre-Jan postings
--   which created a starting balance of 100:</li>
--   </ul>
--   
--   <pre>
--   Ending balance (historical):
--   
--                    Jan   Feb   Mar
--   assets:checking  120   130   125
--   </pre>
--   
--   <i>Eliding and omitting, 2</i>
--   
--   Here's a (imperfect?) specification for the eliding/omitting
--   behaviour:
--   
--   <ul>
--   <li>Each account is normally displayed on its own line.</li>
--   <li>An account less deep than the report's max depth, with just one
--   interesting subaccount, and the same balance as the subaccount, is
--   non-interesting, and prefixed to the subaccount's line, unless
--   <tt>--no-elide</tt> is in effect.</li>
--   <li>An account with a zero inclusive balance and less than two
--   interesting subaccounts is not displayed at all, unless
--   <tt>--empty</tt> is in effect.</li>
--   <li>Multi-column balance reports show full account names with no
--   eliding (like <tt>--flat</tt>). Accounts (and periods) are omitted as
--   described below.</li>
--   </ul>
--   
--   <i>Which accounts to show in balance reports</i>
--   
--   By default:
--   
--   <ul>
--   <li>single-column: accounts with non-zero balance in report period.
--   (With <tt>--flat</tt>: accounts with non-zero balance and
--   postings.)</li>
--   <li>periodic: accounts with postings and non-zero period balance in
--   any period</li>
--   <li>cumulative: accounts with non-zero cumulative balance in any
--   period</li>
--   <li>historical: accounts with non-zero historical balance in any
--   period</li>
--   </ul>
--   
--   With <tt>-E/--empty</tt>:
--   
--   <ul>
--   <li>single-column: accounts with postings in report period</li>
--   <li>periodic: accounts with postings in report period</li>
--   <li>cumulative: accounts with postings in report period</li>
--   <li>historical: accounts with non-zero starting balance + accounts
--   with postings in report period</li>
--   </ul>
--   
--   <i>Which periods (columns) to show in balance reports</i>
--   
--   An empty period/column is one where no report account has any
--   postings. A zero period/column is one where no report account has a
--   non-zero period balance.
--   
--   Currently,
--   
--   by default:
--   
--   <ul>
--   <li>single-column: N/A</li>
--   <li>periodic: all periods within the overall report period, except for
--   leading and trailing empty periods</li>
--   <li>cumulative: all periods within the overall report period, except
--   for leading and trailing empty periods</li>
--   <li>historical: all periods within the overall report period, except
--   for leading and trailing empty periods</li>
--   </ul>
--   
--   With <tt>-E/--empty</tt>:
--   
--   <ul>
--   <li>single-column: N/A</li>
--   <li>periodic: all periods within the overall report period</li>
--   <li>cumulative: all periods within the overall report period</li>
--   <li>historical: all periods within the overall report period</li>
--   </ul>
--   
--   <i>What to show in empty cells</i>
--   
--   An empty periodic balance report cell is one which has no
--   corresponding postings. An empty cumulative/historical balance report
--   cell is one which has no correponding or prior postings, ie the
--   account doesn't exist yet. Currently, empty cells show 0.
module Hledger.Cli.Balance

-- | Command line options for this command.
balancemode :: Mode RawOpts

-- | The balance command, prints a balance report.
balance :: CliOpts -> Journal -> IO ()

-- | Render a single-column balance report as plain text.
balanceReportAsText :: ReportOpts -> BalanceReport -> String

-- | Render a multi-column period balance report as plain text suitable for
--   console output.
periodBalanceReportAsText :: ReportOpts -> MultiBalanceReport -> String

-- | Render a multi-column cumulative balance report as plain text suitable
--   for console output.
cumulativeBalanceReportAsText :: ReportOpts -> MultiBalanceReport -> String

-- | Render a multi-column historical balance report as plain text suitable
--   for console output.
historicalBalanceReportAsText :: ReportOpts -> MultiBalanceReport -> String
tests_Hledger_Cli_Balance :: Test


-- | The <tt>balancesheet</tt> command prints a simple balance sheet.
module Hledger.Cli.Balancesheet
balancesheetmode :: Mode RawOpts

-- | Print a simple balance sheet.
balancesheet :: CliOpts -> Journal -> IO ()
tests_Hledger_Cli_Balancesheet :: Test


-- | The <tt>cashflow</tt> command prints a simplified cashflow statement.
--   It just shows the change in all "cash" accounts for the period
--   (without the traditional segmentation into operating, investing, and
--   financing cash flows.)
module Hledger.Cli.Cashflow
cashflowmode :: Mode RawOpts

-- | Print a simple cashflow statement.
cashflow :: CliOpts -> Journal -> IO ()
tests_Hledger_Cli_Cashflow :: Test


-- | The <tt>incomestatement</tt> command prints a simple income statement
--   (profit &amp; loss) report.
module Hledger.Cli.Incomestatement
incomestatementmode :: Mode RawOpts

-- | Print a simple income statement.
incomestatement :: CliOpts -> Journal -> IO ()
tests_Hledger_Cli_Incomestatement :: Test


-- | A ledger-compatible <tt>print</tt> command.
module Hledger.Cli.Print
printmode :: Mode RawOpts

-- | Print journal transactions in standard format.
print' :: CliOpts -> Journal -> IO ()
tests_Hledger_Cli_Print :: Test


-- | A ledger-compatible <tt>register</tt> command.
module Hledger.Cli.Register
registermode :: Mode RawOpts

-- | Print a (posting) register report.
register :: CliOpts -> Journal -> IO ()

-- | Render a register report as plain text suitable for console output.
postingsReportAsText :: CliOpts -> PostingsReport -> String
tests_Hledger_Cli_Register :: Test


-- | A history-aware add command to help with data entry. |
module Hledger.Cli.Add
addmode :: Mode RawOpts

-- | State used while entering transactions.
data EntryState
EntryState :: CliOpts -> [String] -> Day -> Day -> Journal -> Maybe Transaction -> [Posting] -> EntryState

-- | command line options
esOpts :: EntryState -> CliOpts

-- | command line arguments remaining to be used as defaults
esArgs :: EntryState -> [String]

-- | today's date
esToday :: EntryState -> Day

-- | the default date for next transaction
esDefDate :: EntryState -> Day

-- | the journal we are adding to
esJournal :: EntryState -> Journal

-- | the most similar historical txn
esSimilarTransaction :: EntryState -> Maybe Transaction

-- | postings entered so far in the current txn
esPostings :: EntryState -> [Posting]
defEntryState :: EntryState
data RestartTransactionException
RestartTransactionException :: RestartTransactionException

-- | Read multiple transactions from the console, prompting for each field,
--   and append them to the journal file. If the journal came from stdin,
--   this command has no effect.
add :: CliOpts -> Journal -> IO ()
showHelp :: IO ()

-- | Loop reading transactions from the console, prompting, validating and
--   appending each one to the journal file, until end of input or ctrl-c
--   (then raise an EOF exception). If provided, command-line arguments are
--   used as defaults; otherwise defaults come from the most similar recent
--   transaction in the journal.
getAndAddTransactions :: EntryState -> IO ()
confirmedTransactionWizard :: EntryState -> Wizard Haskeline Transaction
transactionWizard :: EntryState -> Wizard Haskeline Transaction
similarTransaction :: EntryState -> String -> Maybe Transaction
dateAndCodeWizard :: EntryState -> Wizard Haskeline (Day, String)
descriptionAndCommentWizard :: EntryState -> Wizard Haskeline (String, String)
postingsWizard :: EntryState -> Wizard Haskeline [Posting]
postingWizard :: EntryState -> Wizard Haskeline (Maybe Posting)
postingsBalanced :: [Posting] -> Bool
accountWizard :: EntryState -> Wizard Haskeline [Char]
amountAndCommentWizard :: EntryState -> Wizard Haskeline (Amount, String)
maybeExit :: Wizard Haskeline [Char] -> Wizard Haskeline [Char]
maybeRestartTransaction :: Wizard Haskeline [Char] -> Wizard Haskeline [Char]
dateCompleter :: String -> CompletionFunc IO
descriptionCompleter :: Journal -> String -> CompletionFunc IO
accountCompleter :: Journal -> String -> CompletionFunc IO
amountCompleter :: String -> CompletionFunc IO

-- | Generate a haskeline completion function from the given completions
--   and default, that case insensitively completes with prefix matches, or
--   infix matches above a minimum length, or completes the null string
--   with the default.
completer :: [String] -> String -> CompletionFunc IO
defaultTo' :: b -> Wizard Haskeline b -> Wizard Haskeline b
withCompletion :: (:<:) WithSettings b => CompletionFunc IO -> Wizard b a -> Wizard b a
green :: [Char] -> [Char]
showDefault :: [Char] -> [Char]

-- | Append this transaction to the journal's file and transaction list.
journalAddTransaction :: Journal -> CliOpts -> Transaction -> IO Journal

-- | Append a string, typically one or more transactions, to a journal
--   file, or if the file is "-", dump it to stdout. Tries to avoid excess
--   whitespace.
appendToJournalFileOrStdout :: FilePath -> String -> IO ()

-- | Replace a string's 0 or more terminating newlines with exactly one.
ensureOneNewlineTerminated :: String -> String

-- | Convert a string of journal data into a register report.
registerFromString :: String -> IO String
capitalize :: String -> String
transactionsSimilarTo :: Journal -> Query -> String -> [(Double, Transaction)]
compareDescriptions :: [Char] -> [Char] -> Double

-- | Return a similarity measure, from 0 to 1, for two strings. This is
--   Simon White's letter pairs algorithm from
--   <a>http://www.catalysoft.com/articles/StrikeAMatch.html</a> with a
--   modification for short strings.
compareStrings :: String -> String -> Double
wordLetterPairs :: String -> [[Char]]
letterPairs :: [t] -> [[t]]
instance Typeable EntryState
instance Typeable RestartTransactionException
instance Show EntryState
instance Show RestartTransactionException
instance Exception RestartTransactionException


-- | Print some statistics for the journal.
module Hledger.Cli.Stats
statsmode :: Mode RawOpts

-- | Print various statistics for the journal.
stats :: CliOpts -> Journal -> IO ()


-- | Hledger.Cli re-exports the options, utilities and commands provided by
--   the hledger command-line program. This module also aggregates the
--   built-in unit tests defined throughout hledger and hledger-lib, and
--   adds some more which are easier to define here.
module Hledger.Cli
tests_Hledger_Cli :: Test


-- | A simple test runner for hledger's built-in unit tests.
module Hledger.Cli.Tests
testmode :: Mode RawOpts

-- | Run HUnit unit tests and exit with success or failure.
test' :: CliOpts -> IO ()


-- | hledger - a ledger-compatible accounting tool. Copyright (c) 2007-2011
--   Simon Michael <a>simon@joyful.com</a> Released under GPL version 3 or
--   later.
--   
--   hledger is a partial haskell clone of John Wiegley's "ledger". It
--   generates ledger-compatible register &amp; balance reports from a
--   plain text journal, and demonstrates a functional implementation of
--   ledger. For more information, see http://hledger.org .
--   
--   This module provides the main function for the hledger command-line
--   executable. It is exposed here so that it can be imported by eg
--   benchmark scripts.
--   
--   You can use the command line:
--   
--   <pre>
--   $ hledger --help
--   </pre>
--   
--   or ghci:
--   
--   <pre>
--   $ ghci hledger
--   &gt; j &lt;- readJournalFile Nothing Nothing "data/sample.journal"
--   &gt; register [] ["income","expenses"] j
--   2008/01/01 income               income:salary                   $-1          $-1
--   2008/06/01 gift                 income:gifts                    $-1          $-2
--   2008/06/03 eat &amp; shop           expenses:food                    $1          $-1
--                                   expenses:supplies                $1            0
--   &gt; balance [Depth "1"] [] l
--                    $-1  assets
--                     $2  expenses
--                    $-2  income
--                     $1  liabilities
--   &gt; l &lt;- myLedger
--   </pre>
--   
--   See <a>Hledger.Data.Ledger</a> for more examples.
module Hledger.Cli.Main

-- | The overall cmdargs mode describing command-line options for hledger.
mainmode :: [Name] -> Mode RawOpts
oldconvertmode :: Mode RawOpts
builtinCommands :: [Mode RawOpts]
builtinCommandNames :: [String]

-- | Parse hledger CLI options from these command line arguments and add-on
--   command names, or raise any error.
argsToCliOpts :: [String] -> [String] -> IO CliOpts

-- | A hacky workaround for cmdargs not accepting flags before the
--   subcommand name: try to detect and move such flags after the command.
--   This allows the user to put them in either position. The order of
--   options is not preserved, but this should be ok.
--   
--   Since we're not parsing flags as precisely as cmdargs here, this is
--   imperfect. We make a decent effort to: - move all no-argument help and
--   input flags - move all required-argument help and input flags along
--   with their values, space-separated or not - not confuse things further
--   or cause misleading errors.
moveFlagsAfterCommand :: [String] -> [String]

-- | Let's go.
main :: IO ()
