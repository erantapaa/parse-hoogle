-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convenient Gtk canvas with mouse and keyboard input.
--   
--   The Gtk Toy Framework is a simplifying interface over Gtk for creating
--   applications which draw things and interact with the mouse and
--   keyboard. It handles the minutae of setting up the Gtk window and
--   canvas, and processes the input events into more palatable data
--   structures.
@package gtk-toy
@version 0.2.0


-- | The Gtk Toy Framework is a wrapper over Gtk for conveniently creating
--   applications which draw things and use the mouse or keyboard.
--   
--   It handles the minutiae of setting up the Gtk window and canvas, and
--   processes mouse and keyboard inputs into more palatable data
--   structures.
module Graphics.UI.Gtk.Toy

-- | Information about the most recent key-state transition. The tuple
--   contains whether the button was pressed, at what time in msec, and
--   with which GTK modifiers.
type KeyInfo = (Bool, Int, [Modifier])

-- | A map of GTK keynames to last-received event regarding each respective
--   key. This can be interpreted as the current keyboard state - a key is
--   down if it was last seen being pressed.
type KeyTable = Map String KeyInfo

-- | A <tt>MouseEvent</tt> is <tt>Nothing</tt> if it's a mouse motion
--   event, and otherwise provides mouse press information.
type MouseEvent = Maybe (Bool, Int)

-- | A <tt>KeyEvent</tt> tuple specifies whether the key was pressed or
--   not, and which key was pressed. <tt>Right Char</tt> is yielded for
--   keys which would normally correspond to character insertions, while
--   <tt>Left String</tt> provides GTK-convention names for the rest.
type KeyEvent = (Bool, Either String Char)
data InputState
InputState :: (Double, Double) -> KeyTable -> InputState

-- | The most recent mouse position
mousePos :: InputState -> (Double, Double)

-- | Map from key-name to most recent event
keyTable :: InputState -> KeyTable

-- | A class for things which change within an interactive context. The
--   default method implementations do nothing.
class Interactive a
tick :: Interactive a => InputState -> a -> IO (a, Bool)
mouse :: Interactive a => MouseEvent -> InputState -> a -> IO a
keyboard :: Interactive a => KeyEvent -> InputState -> a -> IO a
class Interactive a => GtkInteractive a
display :: GtkInteractive a => DrawWindow -> InputState -> a -> IO a

-- | Main program entrypoint. This is how you turn an instance of
--   Interactive into an application.
runToy :: GtkInteractive a => a -> IO ()

-- | Like it says on the can. This is a synonym for
--   <tt>Graphics.UI.Gtk.mainQuit</tt>
quitToy :: IO ()

-- | the information for the most recent key event of the named key.
keyInfo :: String -> InputState -> Maybe KeyInfo

-- | Gets whether the named key is held down.
keyHeld :: String -> InputState -> Bool

-- | Whether the indicated mouse button is considered pressed in the
--   InputState.
mouseHeld :: Int -> InputState -> Bool

-- | Converts a pure state transform to a function for Interactive
--   <a>tick</a>.
simpleTick :: (a -> a) -> InputState -> a -> IO (a, Bool)

-- | Converts a diagram projection to a function for Interactive
--   <a>display</a>.
simpleDisplay :: (DrawWindow -> a -> a) -> DrawWindow -> InputState -> a -> IO a

-- | Converts a function which responds to mouse-presses, and transforms
--   state accordingly to a function for Interactive <a>mouse</a>.
simpleMouse :: (MouseEvent -> (Double, Double) -> a -> a) -> (MouseEvent -> InputState -> a -> IO a)

-- | Converts a function which responds to key-presses, and transforms
--   state accordingly to a function for Interactive <a>keyboard</a>.
simpleKeyboard :: (KeyEvent -> a -> a) -> (KeyEvent -> InputState -> a -> IO a)

-- | A definition for the keyboard handler that just calls <a>quitToy</a>
--   when Escape is pressed.
quitKeyboard :: KeyEvent -> InputState -> a -> IO a
