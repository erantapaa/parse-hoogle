-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A minimal Graph Theory library.
--   
--   A minimal Graph Theory library.
@package graphene
@version 0.1.0.4

module Graphene.Class

-- | Graph with edge type <tt>e</tt> and vertex type <tt>v</tt>
data Graph e v
Graph :: [v] -> [(e, (v, v))] -> Graph e v
_vertices :: Graph e v -> [v]
_edges :: Graph e v -> [(e, (v, v))]
vertices :: Lens' (Graph e v) [v]
edges :: Lens' (Graph e v) [(e, (v, v))]
instance (Show e, Show v) => Show (Graph e v)
instance (Eq e, Eq v) => Eq (Graph e v)

module Graphene.Instances

-- | Graph with edge type <tt>e</tt> and vertex type <tt>v</tt>
data Graph e v
Graph :: [v] -> [(e, (v, v))] -> Graph e v
_vertices :: Graph e v -> [v]
_edges :: Graph e v -> [(e, (v, v))]

-- | a graph with no vertices or edges
emptyGraph :: Graph e v
instance Monoid (Graph v e)
instance Bifoldable Graph
instance Foldable (Graph e)
instance Bifunctor Graph
instance Functor (Graph e)

module Graphene.Graph

-- | Graph with edge type <tt>e</tt> and vertex type <tt>v</tt>
data Graph e v
Graph :: [v] -> [(e, (v, v))] -> Graph e v
_vertices :: Graph e v -> [v]
_edges :: Graph e v -> [(e, (v, v))]

-- | a graph with no vertices or edges
emptyGraph :: Graph e v

-- | Insert a vertex into a graph
insertVertex :: Eq v => v -> Graph e v -> Graph e v

-- | Remove a vertex V from a graph | (Also removes edges connected to V)
removeVertex :: Eq v => v -> Graph e v -> Graph e v

-- | Remove a list of vertices from a graph
removeVertices :: Eq v => [v] -> Graph e v -> Graph e v

-- | Remove an edge from a graph
removeEdge :: Eq e => e -> Graph e v -> Graph e v

-- | Inset an edge into a graph connected to two vertices
insertEdge :: Eq v => e -> (v, v) -> Graph e v -> Graph e v

-- | Insert a list of edges into a graph
insertVertices :: Eq b => [b] -> Graph e b -> Graph e b

-- | Insert a list of edges into a graph
insertEdges :: Eq v => [(e, v, v)] -> Graph e v -> Graph e v

-- | Modify a vertex in a graph by an automorphism | If such a vertex
--   doesn't exist, modifyVertex = id
modifyVertex :: Eq v => (v -> v) -> v -> Graph e v -> Graph e v

-- | Modify an edge in a graph by an automorphism | If such an edge doesn't
--   exist, modifyEdge = id
modifyEdge :: Eq e => (e -> e) -> e -> Graph e v -> Graph e v

-- | find edge connections and vertex neighbors to a vertex
connections :: Eq v => v -> Graph e v -> [(e, v)]

-- | find all vertices connected to a given vertex
neighbors :: Eq v => v -> Graph e v -> [v]

-- | Generate a graph froma list of edges and a list of edge / 2 vertex
--   pairs
fromLists :: Eq v => [v] -> [(e, v, v)] -> Graph e v

-- | find the degree of a vertex
degree :: Eq v => v -> Graph e v -> Int

-- | subgraph generated by a list of vertices
subgraph :: Eq v => [v] -> Graph e v -> Graph e v

-- | move to a adjacent vertex (returns the next vertex if it really is
--   connected)
moveFromTo :: Eq v => v -> v -> Graph e v -> Maybe v

-- | follow an edge to a new adjancent vertex (returns the new vertex)
moveFromThrough :: (Eq v, Eq e) => v -> e -> Graph e v -> Maybe v

module Graphene.Algorithms

-- | Kruskal's minimum spanning tree algorithm
kruskal :: (Ord v, Ord e) => Graph v e -> Graph v e

-- | Depth first search for connections of <tt>v</tt>
dfs :: Eq v => v -> Graph e v -> [v]

-- | Breadth first search for connections of <tt>v</tt>
bfs :: Eq v => v -> Graph e v -> [v]

-- | Run dijkstra's algorithm on a graph starting at vertex v
dijkstra :: (Eq v, Ord v) => Graph Int v -> v -> DijkstraState Int v

-- | Container for Dijkstra's algorithm information
data DijkstraState e v
underlyingGraph :: Lens' (DijkstraState e v) (Graph e v)
distancePairings :: Lens' (DijkstraState e v) (Map v Int)
prevs :: Lens' (DijkstraState e v) (Map v (Maybe v))
unvisited :: Lens' (DijkstraState e v) [v]
visited :: Lens' (DijkstraState e v) [v]
from :: Lens' (DijkstraState e v) v
instance (Show e, Show v) => Show (DijkstraState e v)
instance (Eq e, Eq v) => Eq (DijkstraState e v)

module Graphene.IO
exploreFrom :: (Eq v, Eq e, Show v, Show e, Read e) => v -> Graph e v -> IO ()

module Graphene
