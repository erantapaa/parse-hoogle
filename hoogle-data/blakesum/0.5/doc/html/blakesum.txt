-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The BLAKE SHA-3 candidate hashes, in Haskell
--   
--   This provides an implementation of the BLAKE SHA-3 candidate hash
--   algorithms in Haskell, including BLAKE-256, BLAKE-512, BLAKE-224, and
--   BLAKE-384.
--   
--   Based on the BLAKE proposal, here: http://131002.net/blake/blake.pdf
--   
--   Contributions and optimizations are welcome!
@package blakesum
@version 0.5


-- | BLAKE is one of the finalists in the NIST SHA-3 hash function
--   competition to replace SHA-1 and SHA-2.
module Data.Digest.BLAKE

-- | Compute a BLAKE-256 digest from a given salt and message
blake256 :: ByteString -> ByteString -> ByteString

-- | Compute a BLAKE-512 digest from a given salt and message
blake512 :: ByteString -> ByteString -> ByteString

-- | Compute a BLAKE-224 digest from a given salt and message (trucates
--   output of a BLAKE-256)
blake224 :: ByteString -> ByteString -> ByteString

-- | Compute a BLAKE-384 digest from a given salt and message (trucates
--   output of a BLAKE-512)
blake384 :: ByteString -> ByteString -> ByteString

-- | Convert a digest (or other ByteString) to hexadecimal digits
--   
--   For example, to compute a digest of a message, `0x00`, using BLAKE-512
--   (faster on 64 bit systems), with a salt of 0, and get the digits in
--   hex:
--   
--   <pre>
--   import Data.Digest.BLAKE
--   import qualified Data.ByteString.Lazy as B
--   
--   textDigest $ blake512 (B.take 32 $ B.repeat 0) (B.singleton 0)
--   </pre>
textDigest :: ByteString -> Text
