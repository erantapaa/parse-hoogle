-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lazy Peano numbers including observable infinity value.
--   
--   Lazy Peano numbers including observable infinity value.
--   
--   This data type is ideal for lazy list length computation and for
--   serveral graph algorithms.
--   
--   For a comparison with other Peano number implementations, see
--   <a>http://people.inf.elte.hu/divip/peano/</a>
@package peano-inf
@version 0.6.5


-- | Lazy Peano numbers including observable infinity value.
--   
--   Properties of <tt>Nat</tt> can be found in the source of
--   <a>Number.Peano.Inf.Test</a>.
module Number.Peano.Inf

-- | Natural numbers and infinity.
data Nat

-- | Observable infinity value.
infinity :: Nat

-- | Traditional infinity value: <tt>let n = Succ n in n</tt>.
--   
--   <tt>infinity</tt> is equal to <tt>inductive_infinity</tt> but
--   <tt>infinity</tt> is lazier. In other words: For every function <tt>f
--   :: Nat -&gt; Bool</tt>, either <tt>f inductive_infinity</tt> is bottom
--   or <tt>f inductive_infinity</tt> is equal to <tt>f infinity</tt>.
inductive_infinity :: Nat

-- | Difference of two natural numbers: the result is either positive or
--   negative.
--   
--   The following value is undefined:
--   
--   <ul>
--   <li><pre>diff infinity infinity</pre></li>
--   </ul>
diff :: Nat -> Nat -> Either Nat Nat

-- | Variant of <tt>diff</tt>:
--   
--   <ul>
--   <li><tt>zeroDiff infinity infinity == Left 0</tt>.</li>
--   </ul>
zeroDiff :: Nat -> Nat -> Either Nat Nat

-- | Variant of <tt>diff</tt>:
--   
--   <ul>
--   <li><tt>infDiff infinity infinity == Left infinity</tt>.</li>
--   </ul>
infDiff :: Nat -> Nat -> Either Nat Nat

-- | Non-negative subtraction. For example, <tt>5 -| 8 == 0</tt>.
(-|) :: Nat -> Nat -> Nat
instance Bounded Nat
instance Integral Nat
instance Real Nat
instance Enum Nat
instance Num Nat
instance Show Nat
instance Ord Nat
instance Eq Nat
instance Serial Nat


-- | You can find the properties in the source code.
module Number.Peano.Inf.Test
test :: IO ()

module Number.Peano.Inf.Functions

-- | Minimum of the list elements. Works also for empty lists.
minimum :: [Nat] -> Nat

-- | Maximum of the list elements. Works also for empty lists.
maximum :: [Nat] -> Nat

-- | Lazyness properties of <tt>Nat</tt> makes it ideal for lazy list
--   length computation. Examples:
--   
--   <pre>
--   length [1..] &gt; 100
--   </pre>
--   
--   <pre>
--   length undefined &gt;= 0
--   </pre>
--   
--   <pre>
--   length (undefined: undefined) &gt;= 1
--   </pre>
length :: [a] -> Nat

-- | Rank computation with lazy Peano numbers.
--   
--   The dependence function represents a graph with multiedges (edges with
--   multiple start nodes). <tt>dependence n</tt> is the list of the start
--   nodes of all multiedges whose end node is <tt>n</tt>.
--   
--   <tt>nodeRank n</tt> computes the length of the shortest path to
--   <tt>n</tt>. Note that if <tt>n</tt> is an end point of a multiedge
--   with no start point, then <tt>nodeRank n == 0</tt>.
--   
--   <ul>
--   <li>If <tt>any null (dependence n)</tt> then <tt>nodeRank n ==
--   0</tt>.</li>
--   <li>Otherwise <tt>nodeRank n == 1 + minimum [maximum (map nodeRank
--   l1), maximum (map nodeRank l2), ..] where </tt>[l1, l2, ..] ==
--   dependence n<tt> if this is computable.</tt></li>
--   <li>Otherwise the rank is <tt>infinity</tt>. (These cases are
--   observable.)</li>
--   </ul>
nodeRank :: Ord n => (n -> [[n]]) -> n -> Nat

-- | Memoising version of <tt>nodeRank</tt>.
--   
--   The rank of inaccessable nodes are <tt>inductive_infinity</tt>. These
--   cases are observable with the predicate <tt>(&gt; n)</tt> where
--   <tt>n</tt> is an upper bound for the number of nodes in the graph.
nodeRankMemo :: (n -> [[n]]) -> (n -> Nat) -> (n -> Nat)

-- | <tt>nodeRankMemo</tt> specialised for integral types.
nodeRankMemoIntegral :: Integral a => (a -> [[a]]) -> a -> Nat
