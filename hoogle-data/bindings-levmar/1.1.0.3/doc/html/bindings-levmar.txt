-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Low level bindings to the C levmar (Levenberg-Marquardt) library
--   
--   See the <tt>levmar</tt> package for a high-level wrapper around this
--   package.
--   
--   The Levenberg-Marquardt algorithm is an iterative technique that finds
--   a local minimum of a function that is expressed as the sum of squares
--   of nonlinear functions. It has become a standard technique for
--   nonlinear least-squares problems and can be thought of as a
--   combination of steepest descent and the Gauss-Newton method. When the
--   current solution is far from the correct one, the algorithm behaves
--   like a steepest descent method: slow, but guaranteed to converge. When
--   the current solution is close to the correct solution, it becomes a
--   Gauss-Newton method.
--   
--   Both unconstrained and constrained (under linear equations and box
--   constraints) Levenberg-Marquardt variants are included. All functions
--   have Double and Float variants.
--   
--   Note that the included <a>C library</a> is lightly patched to make it
--   pure. This way the functions can be used inside
--   <tt>unsafePerformIO</tt>.
--   
--   A note regarding the license:
--   
--   All files EXCEPT those in the levmar-2.4 directory fall under the BSD3
--   license. The levmar C library, which is bundled with this binding,
--   falls under the GPL. If you build a program which is linked with this
--   binding then it is also linked with levmar. This means such a program
--   can only by distributed under the terms of the GPL.
@package bindings-levmar
@version 1.1.0.3


-- | A low level binding to the <a>C levmar (Levenberg-Marquardt)
--   library</a>.
module Bindings.LevMar

-- | The version of the C levmar library.
c'LM_VERSION :: String

-- | The maximum size of the options array.
c'LM_OPTS_SZ :: Num a => a

-- | The size of the info array.
c'LM_INFO_SZ :: Num a => a
c'LM_ERROR :: Num a => a
c'LM_ERROR_LAPACK_ERROR :: Num a => a
c'LM_ERROR_NO_JACOBIAN :: Num a => a
c'LM_ERROR_NO_BOX_CONSTRAINTS :: Num a => a
c'LM_ERROR_FAILED_BOX_CHECK :: Num a => a
c'LM_ERROR_MEMORY_ALLOCATION_FAILURE :: Num a => a
c'LM_ERROR_CONSTRAINT_MATRIX_ROWS_GT_COLS :: Num a => a
c'LM_ERROR_CONSTRAINT_MATRIX_NOT_FULL_ROW_RANK :: Num a => a
c'LM_ERROR_TOO_FEW_MEASUREMENTS :: Num a => a
c'LM_ERROR_SINGULAR_MATRIX :: Num a => a
c'LM_ERROR_SUM_OF_SQUARES_NOT_FINITE :: Num a => a
c'LM_INIT_MU :: Fractional a => a
c'LM_STOP_THRESH :: Fractional a => a
c'LM_DIFF_DELTA :: Fractional a => a
type Parameters = Ptr
type Measurements = Ptr
type Options = Ptr
type LowerBounds = Ptr
type UpperBounds = Ptr
type ConstraintsMatrix = Ptr
type ConstraintsVector = Ptr
type Weights = Ptr
type Info = Ptr
type Work = Ptr
type Covar = Ptr
type AData = Ptr ()
type NrOfParameters = CInt
type NrOfMeasurements = CInt
type NrOfConstraints = CInt
type MaxIterations = CInt

-- | Functional relation describing measurements.
type Model r = Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> AData -> IO ()
type Jacobian a = Model a
withModel :: Model a -> (FunPtr (Model a) -> IO b) -> IO b
withJacobian :: Jacobian a -> (FunPtr (Jacobian a) -> IO b) -> IO b
type LevMarDer r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarDif r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarBCDer r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> LowerBounds r -> UpperBounds r -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarBCDif r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> LowerBounds r -> UpperBounds r -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarLecDer r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> ConstraintsMatrix r -> ConstraintsVector r -> NrOfConstraints -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarLecDif r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> ConstraintsMatrix r -> ConstraintsVector r -> NrOfConstraints -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarBLecDer r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> LowerBounds r -> UpperBounds r -> ConstraintsMatrix r -> ConstraintsVector r -> NrOfConstraints -> Weights r -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
type LevMarBLecDif r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> LowerBounds r -> UpperBounds r -> ConstraintsMatrix r -> ConstraintsVector r -> NrOfConstraints -> Weights r -> MaxIterations -> Options r -> Info r -> Work r -> Covar r -> AData -> IO CInt
c'dlevmar_der :: LevMarDer Double
c'slevmar_der :: LevMarDer Float
c'dlevmar_dif :: LevMarDif Double
c'slevmar_dif :: LevMarDif Float
c'dlevmar_bc_der :: LevMarBCDer Double
c'slevmar_bc_der :: LevMarBCDer Float
c'dlevmar_bc_dif :: LevMarBCDif Double
c'slevmar_bc_dif :: LevMarBCDif Float
c'dlevmar_lec_der :: LevMarLecDer Double
c'slevmar_lec_der :: LevMarLecDer Float
c'dlevmar_lec_dif :: LevMarLecDif Double
c'slevmar_lec_dif :: LevMarLecDif Float
c'dlevmar_blec_der :: LevMarBLecDer Double
c'slevmar_blec_der :: LevMarBLecDer Float
c'dlevmar_blec_dif :: LevMarBLecDif Double
c'slevmar_blec_dif :: LevMarBLecDif Float
type Errors = Ptr
type LevMarChkJac r = FunPtr (Model r) -> FunPtr (Jacobian r) -> Parameters r -> NrOfParameters -> NrOfMeasurements -> AData -> Errors r -> IO ()
c'dlevmar_chkjac :: LevMarChkJac Double
c'slevmar_chkjac :: LevMarChkJac Float
type BestFitParameterIx = CInt

-- | Standard deviation.
type LevMarStddev r = Covar r -> NrOfParameters -> BestFitParameterIx -> IO r

-- | Pearson's correlation coefficient for best-fit parameters.
type LevMarCorCoef r = Covar r -> NrOfParameters -> BestFitParameterIx -> BestFitParameterIx -> IO r

-- | Coefficient of determination (R2).
type LevMarR2 r = FunPtr (Model r) -> Parameters r -> Measurements r -> NrOfParameters -> NrOfMeasurements -> AData -> Result r -> IO CInt
type Result = Ptr
c'dlevmar_stddev :: LevMarStddev Double
c'slevmar_stddev :: LevMarStddev Float
c'dlevmar_corcoef :: LevMarCorCoef Double
c'slevmar_corcoef :: LevMarCorCoef Float
c'dlevmar_R2 :: LevMarR2 Double
c'slevmar_R2 :: LevMarR2 Float
