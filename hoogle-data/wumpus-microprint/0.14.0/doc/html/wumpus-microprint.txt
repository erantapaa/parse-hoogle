-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Microprints - "greek-text" pictures.
--   
--   A library to produce <i>microprints</i> [1] sometimes known as
--   "greek-text".
--   
--   A rudimentary tokenizer is provided, but it is largely untested.
--   
--   ** WARNING ** - in future, this library might not be updated to track
--   revisions to Wumpus-Basic and Wumpus-Drawing. Originally microprints
--   seemed like a simple subject to use as a testbed for developing
--   Wumpus, however in practice the Microprint library has not been
--   valuable for this. To do the subject justice, more effort has to be
--   spent on tokenizing (which does not contribute to advancing Wumpus)
--   than drawing. Eventually I intend to polish this library, but I do not
--   expect to do this soon.
--   
--   [1]
--   <a>http://scg.unibe.ch/archive/papers/Robb05b-microprintsESUG.pdf</a>
--   
--   Changelog:
--   
--   v0.13.0 to v0.14.0:
--   
--   <ul>
--   <li>Updated to track changes to Wumpus-Basic and Wumpus-Drawing.</li>
--   <li>Removed the shim module <tt>Wumpus.Microprint</tt> this was
--   prioritizing the Teletype drawing style, however this style is now
--   out-of-date and it may be dropped in future revisions rather than
--   revised.</li>
--   </ul>
--   
--   v0.12.0 to v0.13.0:
--   
--   <ul>
--   <li>Updated to track changes to Wumpus-Basic and Wumpus-Core.</li>
--   </ul>
@package wumpus-microprint
@version 0.14.0


-- | Version number
module Wumpus.Microprint.VersionNumber

-- | Version number
--   
--   <pre>
--   (0,14,0)
--   </pre>
wumpus_microprint_version :: (Int, Int, Int)


-- | Base datatypes.
module Wumpus.Microprint.Datatypes

-- | <a>DrawWordF</a> :
--   
--   <pre>
--   colour * scaled_width * scaled_height -&gt; char_count -&gt; DLocGraphic
--   </pre>
type DrawWordF = RGBi -> Double -> Double -> Int -> DLocGraphic
type RenderScalingCtx = ScalingContext Int Int Double
makeRenderScalingCtx :: (Int -> Double) -> (Int -> Double) -> RenderScalingCtx
data Tile
Space :: Int -> Tile
Word :: RGBi -> Int -> Tile
type Height = Int
type GreekText = (Height, [[Tile]])
instance Eq Tile
instance Ord Tile
instance Show Tile


-- | Render
module Wumpus.Microprint.Render

-- | Just a filled rectangle.
greekF :: DrawWordF

-- | A stroked line.
strokelineF :: DrawWordF
borderedF :: DrawWordF
render :: RenderScalingCtx -> DrawWordF -> GreekText -> TraceDrawing Double ()


-- | A drawing monad where drawing is analogous to a <i>teletype</i>
--   printing characters, spaces and linebreaks one at a time.
module Wumpus.Microprint.Teletype

-- | Build a <i>microprint</i> within a monad...
--   
--   Drawings are made in a <i>teletype</i> fashion emitting a character,
--   space or lineMicroprint-break at each step.
data Teletype a

-- | Build a picture from a Teletype drawing.
--   
--   This function returns Nothing if the picture is empty.
renderTeletype :: RenderScalingCtx -> DrawWordF -> Teletype a -> TraceDrawing Double ()
data Tile
Space :: Int -> Tile
Word :: RGBi -> Int -> Tile
type Height = Int

-- | Emit a linebreak in the output.
linebreak :: Teletype ()

-- | Change the current drawing colour.
--   
--   Note - it is permissible to change colour mid-word, but this is the
--   same as having a no-space break and forms a new word.
setRGB :: RGBi -> Teletype ()

-- | Draw a character - note in the microprint, characters will be
--   concatenated together to make a word.
char :: Teletype ()

-- | Draw a space.
space :: Teletype ()
instance Eq TileTip
instance Show TileTip
instance Monad Teletype
instance Applicative Teletype
instance Functor Teletype


-- | Simple tokenizing builder.
module Wumpus.Microprint.Tokenizer
data TokenizerConfig
TokenizerConfig :: RGBi -> String -> String -> String -> RGBi -> TokenizerConfig
standard_colour :: TokenizerConfig -> RGBi
sgl_comment_start :: TokenizerConfig -> String
comment_start :: TokenizerConfig -> String
comment_end :: TokenizerConfig -> String
comment_colour :: TokenizerConfig -> RGBi
haskellTokenizer :: RGBi -> RGBi -> TokenizerConfig
runTokenizer :: TokenizerConfig -> String -> GreekText
instance Eq TokState
instance Ord TokState
instance Show TokState
instance Monad Lexer
instance Applicative Lexer
instance Functor Lexer
