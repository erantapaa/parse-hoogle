-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | test-sandbox support for the test-framework package
--   
@package test-framework-sandbox
@version 0.1.0

module Test.Framework.Providers.Sandbox.Internals
data SandboxTestResult
Passed :: SandboxTestResult
Skipped :: SandboxTestResult
Failure :: String -> SandboxTestResult
data SandboxTestRunning
Running :: SandboxTestRunning
data SandboxTest
SandboxTest :: SandboxTestResult -> SandboxTest
SandboxCleaning :: (MVar Int) -> SandboxTest
withTest :: String -> Sandbox b -> Sandbox b
prettyPrintVariable :: String
testVariable :: String
testLevelVariable :: String
indent :: String
printTestName :: Int -> String -> IO ()
printTestResult :: Either String a -> IO ()
putStrColor :: ColorIntensity -> Color -> String -> IO ()
sandboxSeed :: Maybe Seed -> Maybe SandboxSeed
sandboxTestOptions :: TestOptions -> SandboxTestOptions
putOptions :: Either String (RunnerOptions, [String]) -> Sandbox ()
isExcluded :: Either String (RunnerOptions, [String]) -> String -> Bool
instance Typeable SandboxTestResult
instance Typeable SandboxTestRunning
instance Typeable SandboxTest
instance Testlike SandboxTestRunning SandboxTestResult SandboxTest
instance TestResultlike SandboxTestRunning SandboxTestResult
instance Show SandboxTestRunning
instance Show SandboxTestResult


-- | test-framework interface for test-sandbox
module Test.Framework.Providers.Sandbox

-- | Executes tests in the Sandbox monad.
sandboxTests :: String -> [Sandbox Test] -> Test

-- | Creates a test from a Sandbox action. Any exception (or error thrown
--   with throwError) will mark the test as failed.
sandboxTest :: String -> Sandbox () -> Sandbox Test

-- | Groups tests in the Sandbox monad.
sandboxTestGroup :: String -> [Sandbox Test] -> Sandbox Test

-- | Variant of sandboxTestGroup: tests will be skipped if the condition is
--   not verified.
sandboxTestGroup' :: String -> Sandbox Bool -> [Sandbox Test] -> Sandbox Test

-- | Displays a progress update during a test.
yieldProgress :: String -> Sandbox ()
withRetry :: SandboxRetry a => Int -> Sandbox a -> Sandbox a
instance SandboxRetry ()
instance SandboxRetry Test
