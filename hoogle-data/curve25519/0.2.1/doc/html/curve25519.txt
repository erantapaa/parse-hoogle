-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Fast implementations of the curve25519 elliptic curve primitives.
--   
--   Haskell bindings and extensions to the curve25519-donna codebase.
@package curve25519
@version 0.2.1


-- | An implementation of the core methods of the elliptic curve Curve25519
--   suite. These functions are largely wrappers over the curve25519-donna
--   library from Google. While this version is theoretically pure, in that
--   it doesn't generate any exceptions, you should be warned that it uses
--   unsafePerformIO under the hood.
module Crypto.Curve25519.Pure

-- | The type of a Curve25519 private key.
data PrivateKey

-- | The type of a Curve25519 public key.
data PublicKey

-- | Import a public key from a ByteString. The ByteString must be exactly
--   32 bytes long for this to work.
importPublic :: ByteString -> Maybe PublicKey

-- | Export a public key to a ByteString.
exportPublic :: PublicKey -> ByteString

-- | Randomly generate a Curve25519 private key.
generatePrivate :: CryptoRandomGen g => g -> Either GenError (PrivateKey, g)

-- | Randomly generate a Curve25519 public key.
generatePublic :: PrivateKey -> PublicKey

-- | Randomly generate a key pair.
generateKeyPair :: CryptoRandomGen g => g -> Either GenError (PrivateKey, PublicKey, g)

-- | Generate a shared secret from a private key and a public key.
makeShared :: PrivateKey -> PublicKey -> ByteString
instance Show PublicKey
instance Show PrivateKey


-- | An implementation of the core methods of the elliptic curve Curve25519
--   suite. These functions are largely wrappers over the curve25519-donna
--   library from Google. Note that those functions that utilize a
--   CryptoRandomGen instance may throw a GenError exception if the
--   generator fails for any reason.
module Crypto.Curve25519.Exceptions

-- | The type of a Curve25519 private key.
data PrivateKey

-- | The type of a Curve25519 public key.
data PublicKey

-- | Import a public key from a ByteString. The ByteString must be exactly
--   32 bytes long for this to work.
importPublic :: ByteString -> Maybe PublicKey

-- | Export a public key to a ByteString.
exportPublic :: PublicKey -> ByteString

-- | Randomly generate a Curve25519 private key.
generatePrivate :: CryptoRandomGen g => g -> (PrivateKey, g)

-- | Randomly generate a Curve25519 public key.
generatePublic :: PrivateKey -> PublicKey

-- | Randomly generate a key pair.
generateKeyPair :: CryptoRandomGen g => g -> (PrivateKey, PublicKey, g)

-- | Generate a shared secret from a private key and a public key.
makeShared :: PrivateKey -> PublicKey -> ByteString

module Crypto.Curve25519
