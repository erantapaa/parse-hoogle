-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Support for image reading and writing of Repa arrays using in-place FFI calls
--   
@package repa-devil
@version 0.3.2.6


-- | Read and write images in many formats, representing them in Haskell as
--   a 3-dimensional <i>repa</i> array. Image parsing and decoding is done
--   by the <i>Developers Image Library</i>, DevIL.
--   
--   <ul>
--   <li>Many formats are supported, including .png, .bmp, .jpg, .tif</li>
--   <li>Image format parsing is determined by the filepath extension
--   type.</li>
--   <li>Only RGB, RGBA, BGR, BGRA and Greyscale images are supported.</li>
--   </ul>
--   
--   Example: read a .png file into a repa array, and write it out as a
--   .jpg
--   
--   <pre>
--   main = runIL $ do
--            x &lt;- readImage "/tmp/y.png" 
--            writeImage "/tmp/x.jpg" x
--   </pre>
--   
--   Note that as DevIL is stateful, we ensure the library is initialized
--   by running image manipulation functions in the <i>IL</i> monad, a
--   wrapper over IO that ensures the library has been initialized. It is a
--   type error to call image functions outside of the <i>IL</i> monad.
module Data.Array.Repa.IO.DevIL

-- | RGBA, RGB, BGRA and BGR images are 3D repa arrays where indices are
--   <i>Z :. row :. column :. color channel</i>. Grey images are 2D repa
--   arrays.
--   
--   The origin (<i>Z :. 0 :. 0</i>) is on the lower left point of the
--   image.
data Image
RGBA :: (Array F DIM3 Word8) -> Image
RGB :: (Array F DIM3 Word8) -> Image
BGRA :: (Array F DIM3 Word8) -> Image
BGR :: (Array F DIM3 Word8) -> Image
Grey :: (Array F DIM2 Word8) -> Image

-- | The IL monad. Provides statically-guaranteed access to an initialized
--   IL context.
data IL a

-- | Running code in the <i>IL</i> monad. This is a simple wrapper over
--   <i>IO</i> that guarantees the DevIL library has been initialized
--   before you run functions on it.
runIL :: IL a -> IO a

-- | Reads an image into a repa array. It uses directly the C array using
--   the repa's foreign arrays wrapper.
--   
--   Example:
--   
--   <pre>
--   main = do
--      x &lt;- runIL $ readImage "/tmp/x.png"
--      .. operations on x ..
--   </pre>
--   
--   <i>Note:</i> The image input type is determined by the filename
--   extension.
readImage :: FilePath -> IL Image

-- | Writes an <a>Image</a> to a file. The image array must be represented
--   as foreign buffers. You can use <tt>copyS</tt> or <tt>copyP</tt> to
--   convert the array.
--   
--   <i>Note:</i> The image output type is determined by the filename
--   extension.
writeImage :: FilePath -> Image -> IL ()
instance Show ImageName
instance Monad IL
instance MonadIO IL
instance Functor IL
instance Applicative IL
