-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Access to the Pinboard API
--   
@package pinboard
@version 0.6.5


module Pinboard.Client.Error
defaultPinboardError :: PinboardError
data PinboardErrorHTTPCode

-- | 400
BadRequest :: PinboardErrorHTTPCode

-- | 401
UnAuthorized :: PinboardErrorHTTPCode

-- | 402
RequestFailed :: PinboardErrorHTTPCode

-- | 403
Forbidden :: PinboardErrorHTTPCode

-- | 404
NotFound :: PinboardErrorHTTPCode

-- | 429
TooManyRequests :: PinboardErrorHTTPCode

-- | (&gt;=500)
PinboardServerError :: PinboardErrorHTTPCode

-- | All other codes
UnknownHTTPCode :: PinboardErrorHTTPCode
data PinboardErrorType
ConnectionFailure :: PinboardErrorType
HttpStatusFailure :: PinboardErrorType
ParseFailure :: PinboardErrorType
UnknownErrorType :: PinboardErrorType
data PinboardErrorCode
UnknownError :: PinboardErrorCode
data PinboardError
PinboardError :: PinboardErrorType -> Text -> Maybe PinboardErrorCode -> Maybe Text -> Maybe PinboardErrorHTTPCode -> PinboardError
errorType :: PinboardError -> PinboardErrorType
errorMsg :: PinboardError -> Text
errorCode :: PinboardError -> Maybe PinboardErrorCode
errorParam :: PinboardError -> Maybe Text
errorHTTP :: PinboardError -> Maybe PinboardErrorHTTPCode
instance Show PinboardErrorHTTPCode
instance Show PinboardErrorType
instance Show PinboardErrorCode
instance Show PinboardError


module Pinboard.Client.Types
type Pinboard = EitherT PinboardError (ReaderT (PinboardConfig, Connection) IO)
data PinboardRequest
PinboardRequest :: Text -> [Param] -> PinboardRequest

-- | url path of PinboardRequest
requestPath :: PinboardRequest -> Text

-- | Query Parameters of PinboardRequest
requestParams :: PinboardRequest -> [Param]
data PinboardConfig
PinboardConfig :: ByteString -> Bool -> PinboardConfig
apiToken :: PinboardConfig -> ByteString
debug :: PinboardConfig -> Bool
data ResultFormatType
FormatJson :: ResultFormatType
FormatXml :: ResultFormatType
data Param
Format :: ResultFormatType -> Param
Tag :: Text -> Param
Tags :: Text -> Param
Old :: Text -> Param
New :: Text -> Param
Count :: Int -> Param
Start :: Int -> Param
Results :: Int -> Param
Url :: Text -> Param
Date :: Day -> Param
DateTime :: UTCTime -> Param
FromDateTime :: UTCTime -> Param
ToDateTime :: UTCTime -> Param
Replace :: Bool -> Param
Shared :: Bool -> Param
ToRead :: Bool -> Param
Description :: Text -> Param
Extended :: Text -> Param
Meta :: Int -> Param
type ParamsBS = [(ByteString, ByteString)]
instance Show PinboardConfig
instance Show ResultFormatType
instance Eq ResultFormatType
instance Show Param
instance Eq Param
instance Show PinboardRequest


module Pinboard.Client.Util
mkConfig :: PinboardConfig

-- | Conversion of a key value pair to a query parameterized string
paramsToByteString :: (Monoid m, IsString m) => [(m, m)] -> m

-- | Conversion from a <a>Show</a> constrained type to <a>Text</a>
toText :: Show a => a -> Text

-- | Conversion from a <a>Show</a> constrained type to lowercase
--   <a>Text</a>
toTextLower :: Show a => a -> Text

-- | Forward slash interspersion on <a>Monoid</a> and <a>IsString</a>
--   constrained types
(</>) :: (Monoid m, IsString m) => m -> m -> m
paramToName :: Param -> Text
paramToText :: Param -> (Text, Text)

-- | Retrieve and encode the optional parameters
encodeParams :: [Param] -> ParamsBS
ensureResultFormatType :: ResultFormatType -> PinboardRequest -> PinboardRequest


module Pinboard.ApiTypes
data Posts
Posts :: UTCTime -> Text -> [Post] -> Posts
postsDate :: Posts -> UTCTime
postsUser :: Posts -> Text
postsPosts :: Posts -> [Post]
data Post
Post :: Text -> Text -> Text -> Text -> Text -> UTCTime -> Bool -> Bool -> [Tag] -> Post
postHref :: Post -> Text
postDescription :: Post -> Text
postExtended :: Post -> Text
postMeta :: Post -> Text
postHash :: Post -> Text
postTime :: Post -> UTCTime
postShared :: Post -> Bool
postToread :: Post -> Bool
postTags :: Post -> [Tag]
boolFromYesNo :: Text -> Bool
boolToYesNo :: Bool -> Text
data PostDates
PostDates :: Text -> Text -> [DateCount] -> PostDates
postDatesUser :: PostDates -> Text
postDatesTag :: PostDates -> Text
postDatesCount :: PostDates -> [DateCount]
type DateCount = (Day, Int)
data NoteList
NoteList :: Int -> [NoteListItem] -> NoteList
noteListCount :: NoteList -> Int
noteListItems :: NoteList -> [NoteListItem]
data NoteListItem
NoteListItem :: Text -> Text -> Text -> Int -> UTCTime -> UTCTime -> NoteListItem
noteListItemId :: NoteListItem -> Text
noteListItemHash :: NoteListItem -> Text
noteListItemTitle :: NoteListItem -> Text
noteListItemLength :: NoteListItem -> Int
noteListItemCreatedAt :: NoteListItem -> UTCTime
noteListItemUpdatedAt :: NoteListItem -> UTCTime
data Note
Note :: Text -> Text -> Text -> Text -> Int -> UTCTime -> UTCTime -> Note
noteId :: Note -> Text
noteHash :: Note -> Text
noteTitle :: Note -> Text
noteText :: Note -> Text
noteLength :: Note -> Int
noteCreatedAt :: Note -> UTCTime
noteUpdatedAt :: Note -> UTCTime
readNoteTime :: String -> UTCTime
showNoteTime :: UTCTime -> String
type TagMap = HashMap Tag Int
newtype JsonTagMap
ToJsonTagMap :: TagMap -> JsonTagMap
fromJsonTagMap :: JsonTagMap -> TagMap
data Suggested
Popular :: [Text] -> Suggested
Recommended :: [Text] -> Suggested
newtype DoneResult
ToDoneResult :: () -> DoneResult
fromDoneResult :: DoneResult -> ()
newtype TextResult
ToTextResult :: Text -> TextResult
fromTextResult :: TextResult -> Text
newtype UpdateTime
ToUpdateTime :: UTCTime -> UpdateTime
fromUpdateTime :: UpdateTime -> UTCTime
prettyString :: String -> String
pretty :: Show a => a -> String

-- | as defined by RFC 3986. Allowed schemes are http, https, javascript,
--   mailto, ftp and file. The Safari-specific feed scheme is allowed but
--   will be treated as a synonym for http.
type Url = Text

-- | up to 255 characters long
type Description = Text

-- | up to 65536 characters long. Any URLs will be auto-linkified when
--   displayed.
type Extended = Text

-- | up to 255 characters. May not contain commas or whitespace.
type Tag = Text
type Old = Tag
type New = Tag
type Count = Int
type NumResults = Int
type StartOffset = Int
type Shared = Bool
type Replace = Bool
type ToRead = Bool

-- | UTC date in this format: 2010-12-11. Same range as datetime above
type Date = Day

-- | UTC timestamp in this format: 2010-12-11T19:48:02Z. Valid date range
--   is Jan 1, 1 AD to January 1, 2100 (but see note below about future
--   timestamps).
type DateTime = UTCTime
type FromDateTime = DateTime
type ToDateTime = DateTime
type Meta = Int
type NoteId = Text
instance Typeable PostDates
instance Typeable NoteListItem
instance Typeable NoteList
instance Typeable Note
instance Typeable Suggested
instance Typeable DoneResult
instance Typeable TextResult
instance Typeable UpdateTime
instance Typeable JsonTagMap
instance Typeable Post
instance Typeable Posts
instance Show PostDates
instance Eq PostDates
instance Data PostDates
instance Ord PostDates
instance Show NoteListItem
instance Eq NoteListItem
instance Data NoteListItem
instance Ord NoteListItem
instance Show NoteList
instance Eq NoteList
instance Data NoteList
instance Ord NoteList
instance Show Note
instance Eq Note
instance Data Note
instance Ord Note
instance Show Suggested
instance Eq Suggested
instance Data Suggested
instance Ord Suggested
instance Show DoneResult
instance Eq DoneResult
instance Data DoneResult
instance Ord DoneResult
instance Show TextResult
instance Eq TextResult
instance Data TextResult
instance Ord TextResult
instance Show UpdateTime
instance Eq UpdateTime
instance Data UpdateTime
instance Ord UpdateTime
instance Show JsonTagMap
instance Eq JsonTagMap
instance Data JsonTagMap
instance Show Post
instance Eq Post
instance Data Post
instance Ord Post
instance Show Posts
instance Eq Posts
instance Data Posts
instance Ord Posts
instance FromJSON UpdateTime
instance FromJSON TextResult
instance FromJSON DoneResult
instance ToJSON Suggested
instance ToJSON [Suggested]
instance FromJSON Suggested
instance ToJSON JsonTagMap
instance FromJSON JsonTagMap
instance ToJSON Note
instance FromJSON Note
instance ToJSON NoteListItem
instance FromJSON NoteListItem
instance ToJSON NoteList
instance FromJSON NoteList
instance ToJSON PostDates
instance FromJSON PostDates
instance ToJSON Post
instance FromJSON Post
instance ToJSON Posts
instance FromJSON Posts


-- | These request builders allow you to build request params which can
--   sent via Pinboard.Client, in the case you need more control for how
--   the response should be processed over what Pinboard.Api provides.
module Pinboard.ApiRequest

-- | posts/recent : Returns a list of the user's most recent posts,
--   filtered by tag.
getPostsRecentRequest :: ResultFormatType -> Maybe [Tag] -> Maybe Count -> PinboardRequest

-- | posts/get : Returns one or more posts on a single day matching the
--   arguments. If no date or url is given, date of most recent bookmark
--   will be used.
getPostsForDateRequest :: ResultFormatType -> Maybe [Tag] -> Maybe Date -> Maybe Url -> PinboardRequest

-- | posts/all : Returns all bookmarks in the user's account.
getPostsAllRequest :: ResultFormatType -> Maybe [Tag] -> Maybe StartOffset -> Maybe NumResults -> Maybe FromDateTime -> Maybe ToDateTime -> Maybe Meta -> PinboardRequest

-- | posts/dates : Returns a list of dates with the number of posts at each
--   date.
getPostsDatesRequest :: ResultFormatType -> Maybe [Tag] -> PinboardRequest

-- | posts/update : Returns the most recent time a bookmark was added,
--   updated or deleted.
getPostsMRUTimeRequest :: ResultFormatType -> PinboardRequest

-- | posts/suggest : Returns a list of popular tags and recommended tags
--   for a given URL. Popular tags are tags used site-wide for the url;
--   Recommended tags are drawn from the user's own tags.
getSuggestedTagsRequest :: ResultFormatType -> Url -> PinboardRequest

-- | posts/add : Add or Update a bookmark
addPostRequest :: ResultFormatType -> Url -> Description -> Maybe Extended -> Maybe [Tag] -> Maybe DateTime -> Maybe Replace -> Maybe Shared -> Maybe ToRead -> PinboardRequest

-- | posts/add : Add or Update a bookmark (from a Post record)
addPostRecRequest :: ResultFormatType -> Post -> Replace -> PinboardRequest

-- | posts/delete : Delete an existing bookmark.
deletePostRequest :: ResultFormatType -> Url -> PinboardRequest

-- | tags/get : Returns a full list of the user's tags along with the
--   number of times they were used.
getTagsRequest :: ResultFormatType -> PinboardRequest

-- | tags/rename : Rename an tag, or fold it in to an existing tag
renameTagRequest :: ResultFormatType -> Old -> New -> PinboardRequest

-- | tags/delete : Delete an existing tag.
deleteTagRequest :: ResultFormatType -> Tag -> PinboardRequest

-- | user/secret : Returns the user's secret RSS key (for viewing private
--   feeds)
getUserSecretRssKeyRequest :: ResultFormatType -> PinboardRequest

-- | user/api_token : Returns the user's API token (for making API calls
--   without a password)
getUserApiTokenRequest :: ResultFormatType -> PinboardRequest

-- | notes/list : Returns a list of the user's notes (note text detail is
--   not included)
getNoteListRequest :: ResultFormatType -> PinboardRequest

-- | notes/id : Returns an individual user note. The hash property is a 20
--   character long sha1 hash of the note text.
getNoteRequest :: ResultFormatType -> NoteId -> PinboardRequest


module Pinboard.Client

-- | Create a default PinboardConfig using the supplied apiToken
fromApiToken :: String -> PinboardConfig
data PinboardConfig
PinboardConfig :: ByteString -> Bool -> PinboardConfig
apiToken :: PinboardConfig -> ByteString
debug :: PinboardConfig -> Bool

-- | Execute computations in the Pinboard monad
runPinboard :: PinboardConfig -> Pinboard a -> IO (Either PinboardError a)

-- | Create a Pinboard value from a PinboardRequest w/ json deserialization
pinboardJson :: FromJSON a => PinboardRequest -> Pinboard a
runPinboardSingleRaw :: PinboardConfig -> PinboardRequest -> (Response -> InputStream ByteString -> IO a) -> IO (Either PinboardError a)
runPinboardSingleRawBS :: PinboardConfig -> PinboardRequest -> IO (Either PinboardError ByteString)
runPinboardSingleJson :: FromJSON a => PinboardConfig -> PinboardRequest -> IO (Either PinboardError a)
sendPinboardRequest :: PinboardRequest -> PinboardConfig -> Connection -> (Response -> InputStream ByteString -> IO a) -> IO a
sendPinboardRequestBS :: PinboardRequest -> PinboardConfig -> Connection -> IO (Response, ByteString)
connOpenRaw :: IO Connection
connOpen :: IO (Either SomeException Connection)
connClose :: Either a Connection -> IO ()
connFail :: PinboardErrorType -> SomeException -> IO (Either PinboardError b)
parseJSONResponseStream :: FromJSON a => Response -> InputStream ByteString -> IO (Response, Either PinboardError a)
parseJSONFromStream :: FromJSON a => InputStream ByteString -> IO (Either PinboardError a)
checkStatusCode :: StatusCode -> Either PinboardError ()
addErrMsg :: Text -> PinboardError -> PinboardError
createParserErr :: Text -> PinboardError
httpStatusPinboardError :: PinboardErrorHTTPCode -> Either PinboardError a


-- | <a>https://pinboard.in/api/</a>
--   
--   Provides Pinboard Api Access (deserializes into Haskell data
--   structures)
module Pinboard.Api

-- | posts/recent : Returns a list of the user's most recent posts,
--   filtered by tag.
getPostsRecent :: Maybe [Tag] -> Maybe Count -> Pinboard Posts

-- | posts/get : Returns one or more posts on a single day matching the
--   arguments. If no date or url is given, date of most recent bookmark
--   will be used.
getPostsForDate :: Maybe [Tag] -> Maybe Date -> Maybe Url -> Pinboard Posts

-- | posts/all : Returns all bookmarks in the user's account.
getPostsAll :: Maybe [Tag] -> Maybe StartOffset -> Maybe NumResults -> Maybe FromDateTime -> Maybe ToDateTime -> Maybe Meta -> Pinboard [Post]

-- | posts/dates : Returns a list of dates with the number of posts at each
--   date.
getPostsDates :: Maybe [Tag] -> Pinboard PostDates

-- | posts/update : Returns the most recent time a bookmark was added,
--   updated or deleted.
getPostsMRUTime :: Pinboard UTCTime

-- | posts/suggest : Returns a list of popular tags and recommended tags
--   for a given URL. Popular tags are tags used site-wide for the url;
--   Recommended tags are drawn from the user's own tags.
getSuggestedTags :: Url -> Pinboard [Suggested]

-- | posts/add : Add or Update a bookmark
addPost :: Url -> Description -> Maybe Extended -> Maybe [Tag] -> Maybe DateTime -> Maybe Replace -> Maybe Shared -> Maybe ToRead -> Pinboard ()

-- | posts/add : Add or Update a bookmark, from a Post record
addPostRec :: Post -> Replace -> Pinboard ()

-- | posts/delete : Delete an existing bookmark.
deletePost :: Url -> Pinboard ()

-- | tags/get : Returns a full list of the user's tags along with the
--   number of times they were used.
getTags :: Pinboard TagMap

-- | tags/rename : Rename an tag, or fold it in to an existing tag
renameTag :: Old -> New -> Pinboard ()

-- | tags/delete : Delete an existing tag.
deleteTag :: Tag -> Pinboard ()

-- | user/secret : Returns the user's secret RSS key (for viewing private
--   feeds)
getUserSecretRssKey :: Pinboard Text

-- | user/api_token : Returns the user's API token (for making API calls
--   without a password)
getUserApiToken :: Pinboard Text

-- | notes/list : Returns a list of the user's notes (note text detail is
--   not included)
getNoteList :: Pinboard NoteList

-- | notes/id : Returns an individual user note. The hash property is a 20
--   character long sha1 hash of the note text.
getNote :: NoteId -> Pinboard Note


-- | <pre>
--   import Pinboard
--   
--   main :: IO ()
--   main = do
--     let config = fromApiToken "api token"
--     result &lt;- runPinboard config $ getPostsRecent Nothing Nothing
--     case result of
--       Right details -&gt; print details
--       Left pinboardError -&gt; print pinboardError
--   </pre>
module Pinboard
