-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Core library for hoodle
--   
--   Hoodle is a pen notetaking program written in haskell. hoodle-core is
--   the core library written in haskell and using gtk2hs
@package hoodle-core
@version 0.12


module Hoodle.Type.Clipboard
newtype Clipboard
Clipboard :: [BBoxed Stroke] -> Clipboard
unClipboard :: Clipboard -> [BBoxed Stroke]
emptyClipboard :: Clipboard
isEmpty :: Clipboard -> Bool
getClipContents :: Clipboard -> [BBoxed Stroke]
replaceClipContents :: [BBoxed Stroke] -> Clipboard -> Clipboard


module Hoodle.ModelAction.Eraser
eraseHitted :: GetBBoxable a => AlterList (NotHitted a) (AlterList (NotHitted a) (Hitted a)) -> State (Maybe BBox) [a]


module Hoodle.Type.Predefined
millisec :: Integer
dtime_bound :: NominalDiffTime
predefinedWinReconfTimeBound :: NominalDiffTime
predefinedLassoColor :: (Double, Double, Double, Double)
predefinedLassoWidth :: Double
predefinedLassoHandleSize :: Double
predefinedLassoDash :: ([Double], Double)
predefinedPageSpacing :: Double
predefinedZoomStepFactor :: Double


module Hoodle.Type.Enum

-- | drawing efficiency
data DrawFlag
Clear :: DrawFlag
BkgEfficient :: DrawFlag
Efficient :: DrawFlag

-- | page add direction
data AddDirection
PageBefore :: AddDirection
PageAfter :: AddDirection

-- | relative zoom mode
data ZoomModeRel
ZoomIn :: ZoomModeRel
ZoomOut :: ZoomModeRel

-- | pen tool type
data PenType
PenWork :: PenType
HighlighterWork :: PenType
EraserWork :: PenType
VerticalSpaceWork :: PenType

-- | predefined pen colors
data PenColor
ColorBlack :: PenColor
ColorBlue :: PenColor
ColorRed :: PenColor
ColorGreen :: PenColor
ColorGray :: PenColor
ColorLightBlue :: PenColor
ColorLightGreen :: PenColor
ColorMagenta :: PenColor
ColorOrange :: PenColor
ColorYellow :: PenColor
ColorWhite :: PenColor
ColorRGBA :: Double -> Double -> Double -> Double -> PenColor

-- | predefined background styles
data BackgroundStyle
BkgStylePlain :: BackgroundStyle
BkgStyleLined :: BackgroundStyle
BkgStyleRuled :: BackgroundStyle
BkgStyleGraph :: BackgroundStyle

-- | mode for vertical space adding
data VerticalSpaceMode
GoingUp :: VerticalSpaceMode
GoingDown :: VerticalSpaceMode
OverPage :: VerticalSpaceMode

-- | select tool type
data SelectType
SelectRegionWork :: SelectType
SelectRectangleWork :: SelectType
SelectHandToolWork :: SelectType
data SelectInfo
SelectInfo :: SelectType -> SelectInfo
_selectType :: SelectInfo -> SelectType
selectType :: Simple Lens SelectInfo SelectType
penColorNameMap :: Map PenColor ByteString
penColorRGBAmap :: Map PenColor (Double, Double, Double, Double)
convertPenColorToRGBA :: PenColor -> (Double, Double, Double, Double)
convertRGBAToHex :: (Double, Double, Double, Double) -> ByteString
convertPenColorToByteString :: PenColor -> ByteString
convertBackgroundStyleToByteString :: BackgroundStyle -> ByteString
instance Eq DrawFlag
instance Ord DrawFlag
instance Show DrawFlag
instance Show AddDirection
instance Eq AddDirection
instance Ord AddDirection
instance Enum AddDirection
instance Show ZoomModeRel
instance Eq ZoomModeRel
instance Ord ZoomModeRel
instance Enum ZoomModeRel
instance Show PenType
instance Eq PenType
instance Ord PenType
instance Show PenColor
instance Eq PenColor
instance Ord PenColor
instance Show BackgroundStyle
instance Eq BackgroundStyle
instance Ord BackgroundStyle
instance Show SelectType
instance Eq SelectType
instance Ord SelectType
instance Show SelectInfo


module Hoodle.Script.Hook
data Hook
Hook :: Maybe (Hoodle -> IO ()) -> Maybe (FilePath -> Hoodle -> IO ()) -> Maybe (FilePath -> Hoodle -> IO ()) -> Maybe ([Item] -> IO ()) -> Maybe String -> Maybe ([Item] -> IO ()) -> Maybe (RPage -> IO ()) -> Maybe (IO String) -> Maybe (IO FilePath) -> Maybe (IO FilePath) -> Maybe (IO FilePath) -> Maybe (IO FilePath) -> Maybe (String -> IO (Maybe FilePath)) -> Hook
saveAsHook :: Hook -> Maybe (Hoodle -> IO ())
afterSaveHook :: Hook -> Maybe (FilePath -> Hoodle -> IO ())
afterOpenHook :: Hook -> Maybe (FilePath -> Hoodle -> IO ())
afterUpdateClipboardHook :: Hook -> Maybe ([Item] -> IO ())
customContextMenuTitle :: Hook -> Maybe String
customContextMenuHook :: Hook -> Maybe ([Item] -> IO ())
customAutosavePage :: Hook -> Maybe (RPage -> IO ())
fileNameSuggestionHook :: Hook -> Maybe (IO String)
recentFolderHook :: Hook -> Maybe (IO FilePath)
embedPredefinedImageHook :: Hook -> Maybe (IO FilePath)
embedPredefinedImage2Hook :: Hook -> Maybe (IO FilePath)
embedPredefinedImage3Hook :: Hook -> Maybe (IO FilePath)
lookupPathFromId :: Hook -> Maybe (String -> IO (Maybe FilePath))
defaultHook :: Hook


module Hoodle.Script
data ScriptConfig
ScriptConfig :: Maybe String -> Maybe Hook -> Maybe String -> ScriptConfig
message :: ScriptConfig -> Maybe String
hook :: ScriptConfig -> Maybe Hook
errorMsg :: ScriptConfig -> Maybe String
defaultScriptConfig :: ScriptConfig
showError :: ScriptConfig -> String -> ScriptConfig
relaunchApplication :: IO ()


module Hoodle.Type.Undo
data UndoTable a
UndoTable :: Int -> Int -> Maybe (SeqZipper a) -> UndoTable a
undo_allowednum :: UndoTable a -> Int
undo_totalnum :: UndoTable a -> Int
undo_zipper :: UndoTable a -> Maybe (SeqZipper a)
emptyUndo :: Int -> UndoTable a
singletonUndo :: Int -> a -> UndoTable a
addToUndo :: UndoTable a -> a -> UndoTable a
getCurrentUndoItem :: UndoTable a -> Maybe a
getPrevUndo :: UndoTable a -> Maybe (a, UndoTable a)
getNextUndo :: UndoTable a -> Maybe (a, UndoTable a)
numOfUndo :: UndoTable a -> Int


module Hoodle.Util
(#) :: a -> (a -> b) -> b
maybeFlip :: Maybe a -> b -> (a -> b) -> b
uncurry4 :: (a -> b -> c -> d -> e) -> (a, b, c, d) -> e
maybeRead :: Read a => String -> Maybe a
getLargestWidth :: Hoodle -> Double
getLargestHeight :: Hoodle -> Double
waitUntil :: Monad m => (a -> Bool) -> m a -> m ()

-- | for debugging
errorlog :: String -> IO ()
maybeError' :: String -> Maybe a -> a
data UrlPath
FileUrl :: FilePath -> UrlPath
HttpUrl :: String -> UrlPath
data T
N :: T
F :: T
H :: T
HS :: T
urlParse :: String -> Maybe UrlPath
instance Show UrlPath
instance Eq UrlPath
instance Show T
instance Eq T


module Hoodle.Coroutine.Callback
eventHandler :: MVar (Maybe (Driver e IO ())) -> e -> IO ()
allexceptionproc :: SomeException -> IO ()
errorcall :: ErrorCall -> IO ()
patternerr :: PatternMatchFail -> IO ()


module Hoodle.Config
emptyConfigString :: String
loadConfigFile :: IO Config
getMaxUndo :: Config -> IO (Maybe Int)
getPenDevConfig :: Config -> IO (Maybe String, Maybe String, Maybe String, Maybe String)
getXInputConfig :: Config -> IO Bool
getWidgetConfig :: Config -> IO (Bool, Bool)


module Hoodle.Device
data PointerType
Core :: PointerType
Stylus :: PointerType
Eraser :: PointerType
Touch :: PointerType
data PenButton
PenButton1 :: PenButton
PenButton2 :: PenButton
PenButton3 :: PenButton
EraserButton :: PenButton
TouchButton :: PenButton
data DeviceList
DeviceList :: CInt -> String -> CInt -> String -> CInt -> String -> CInt -> String -> DeviceList
dev_core :: DeviceList -> CInt
dev_core_str :: DeviceList -> String
dev_stylus :: DeviceList -> CInt
dev_stylus_str :: DeviceList -> String
dev_eraser :: DeviceList -> CInt
dev_eraser_str :: DeviceList -> String
dev_touch :: DeviceList -> CInt
dev_touch_str :: DeviceList -> String
data PointerCoord
PointerCoord :: PointerType -> Double -> Double -> Double -> PointerCoord
pointerType :: PointerCoord -> PointerType
pointerX :: PointerCoord -> Double
pointerY :: PointerCoord -> Double
pointerZ :: PointerCoord -> Double
NoPointerCoord :: PointerCoord
c_initdevice :: Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> CString -> CString -> CString -> CString -> IO ()
c_find_wacom :: CString -> CString -> IO ()
initDevice :: Config -> IO DeviceList
getPointer :: DeviceList -> EventM t (Maybe PenButton, Maybe PointerCoord)
wacomCoordConvert :: WidgetClass self => self -> (Double, Double) -> IO (Double, Double)
wacomPConvert :: WidgetClass self => self -> PointerCoord -> IO (Double, Double)
instance Show PointerType
instance Eq PointerType
instance Ord PointerType
instance Show PenButton
instance Eq PenButton
instance Ord PenButton
instance Show DeviceList
instance Show PointerCoord
instance Eq PointerCoord
instance Ord PointerCoord


module Hoodle.Type.Alias
data EditMode
EditMode :: EditMode
data SelectMode
SelectMode :: SelectMode


module Hoodle.Type.PageArrangement
data ZoomMode
Original :: ZoomMode
FitWidth :: ZoomMode
FitHeight :: ZoomMode
Zoom :: Double -> ZoomMode

-- | sum type class (later, will be replaced by Kind promotion)
data ViewModeSumType
VMSinglePage :: ViewModeSumType
VMContPage :: ViewModeSumType
class ViewMode a

-- | only one page show at a time
data SinglePage
SinglePage :: SinglePage

-- | continuously show pages in general
data ContinuousPage
ContinuousPage :: ContinuousPage
newtype PageNum
PageNum :: Int -> PageNum
unPageNum :: PageNum -> Int
newtype ScreenCoordinate
ScrCoord :: (Double, Double) -> ScreenCoordinate
unScrCoord :: ScreenCoordinate -> (Double, Double)
newtype CanvasCoordinate
CvsCoord :: (Double, Double) -> CanvasCoordinate
unCvsCoord :: CanvasCoordinate -> (Double, Double)
newtype DesktopCoordinate
DeskCoord :: (Double, Double) -> DesktopCoordinate
unDeskCoord :: DesktopCoordinate -> (Double, Double)
newtype PageCoordinate
PageCoord :: (Double, Double) -> PageCoordinate
unPageCoord :: PageCoordinate -> (Double, Double)
newtype ScreenDimension
ScreenDimension :: Dimension -> ScreenDimension
unScreenDimension :: ScreenDimension -> Dimension
newtype CanvasDimension
CanvasDimension :: Dimension -> CanvasDimension
unCanvasDimension :: CanvasDimension -> Dimension
newtype CanvasOrigin
CanvasOrigin :: (Double, Double) -> CanvasOrigin
unCanvasOrigin :: CanvasOrigin -> (Double, Double)
newtype PageOrigin
PageOrigin :: (Double, Double) -> PageOrigin
unPageOrigin :: PageOrigin -> (Double, Double)
newtype PageDimension
PageDimension :: Dimension -> PageDimension
unPageDimension :: PageDimension -> Dimension
newtype DesktopDimension
DesktopDimension :: Dimension -> DesktopDimension
unDesktopDimension :: DesktopDimension -> Dimension
newtype ViewPortBBox
ViewPortBBox :: BBox -> ViewPortBBox
unViewPortBBox :: ViewPortBBox -> BBox
apply :: (BBox -> BBox) -> ViewPortBBox -> ViewPortBBox
xformViewPortFitInSize :: Dimension -> (BBox -> BBox) -> ViewPortBBox -> ViewPortBBox

-- | data structure for coordinate arrangement of pages in desktop
--   coordinate
data PageArrangement a
SingleArrangement :: CanvasDimension -> PageDimension -> ViewPortBBox -> PageArrangement SinglePage
ContinuousArrangement :: CanvasDimension -> DesktopDimension -> (PageNum -> Maybe (PageOrigin, PageDimension)) -> ViewPortBBox -> PageArrangement ContinuousPage
getRatioPageCanvas :: ZoomMode -> PageDimension -> CanvasDimension -> (Double, Double)
makeSingleArrangement :: ZoomMode -> PageDimension -> CanvasDimension -> (Double, Double) -> PageArrangement SinglePage
data DesktopConstraint
DesktopWidthConstrained :: Double -> DesktopConstraint
makeContinuousArrangement :: ZoomMode -> CanvasDimension -> Hoodle EditMode -> (PageNum, PageCoordinate) -> PageArrangement ContinuousPage
pageArrFuncCont :: DesktopConstraint -> Hoodle EditMode -> PageNum -> Maybe (PageOrigin, PageDimension)
deskDimCont :: DesktopConstraint -> Hoodle EditMode -> DesktopDimension
pageDimension :: Simple Lens (PageArrangement SinglePage) PageDimension
canvasDimension :: Simple Lens (PageArrangement a) CanvasDimension
viewPortBBox :: Simple Lens (PageArrangement a) ViewPortBBox
desktopDimension :: Simple Lens (PageArrangement a) DesktopDimension
instance Show ZoomMode
instance Eq ZoomMode
instance Eq PageNum
instance Show PageNum
instance Ord PageNum
instance Num PageNum
instance Show ScreenCoordinate
instance Show CanvasCoordinate
instance Show DesktopCoordinate
instance Show PageCoordinate
instance Show ScreenDimension
instance Show CanvasDimension
instance Show CanvasOrigin
instance Show PageOrigin
instance Show PageDimension
instance Show DesktopDimension
instance Show ViewPortBBox
instance ViewMode ContinuousPage
instance ViewMode SinglePage


-- | Types for Widgets
module Hoodle.Type.Widget
data WidgetItem
PanZoomWidget :: WidgetItem
LayerWidget :: WidgetItem
data CanvasWidgets
data WidgetConfig
data LayerWidgetConfig
panZoomWidgetPosition :: Simple Lens PanZoomWidgetConfig CanvasCoordinate
panZoomWidgetTouchIsZoom :: Simple Lens PanZoomWidgetConfig Bool
panZoomWidgetConfig :: Simple Lens CanvasWidgets PanZoomWidgetConfig
layerWidgetConfig :: Simple Lens CanvasWidgets LayerWidgetConfig
layerWidgetPosition :: Simple Lens LayerWidgetConfig CanvasCoordinate
layerWidgetShowContent :: Simple Lens LayerWidgetConfig Bool

-- | widget config lens
widgetConfig :: Simple Lens CanvasWidgets WidgetConfig

-- | flag for pan zoom widget
doesUsePanZoomWidget :: Simple Lens WidgetConfig Bool

-- | flag for layer widget
doesUseLayerWidget :: Simple Lens WidgetConfig Bool

-- | default hoodle widgets
defaultCanvasWidgets :: CanvasWidgets
defaultLWConfig :: LayerWidgetConfig

-- | default widget configuration
defaultWidgetConfig :: WidgetConfig
allWidgets :: [WidgetItem]
instance Show WidgetItem
instance Eq WidgetItem
instance Ord WidgetItem


module Hoodle.Type.Canvas
type CanvasId = Int
data PenDraw
PenDraw :: Seq (Double, Double) -> PenDraw
_points :: PenDraw -> Seq (Double, Double)
emptyPenDraw :: PenDraw
data ViewInfo a
ViewInfo :: ZoomMode -> PageArrangement a -> ViewInfo a
_zoomMode :: ViewInfo a -> ZoomMode
_pageArrangement :: ViewInfo a -> PageArrangement a
data CanvasInfo a
CanvasInfo :: CanvasId -> DrawingArea -> Maybe Surface -> ScrolledWindow -> ViewInfo a -> Int -> Adjustment -> Adjustment -> Maybe (ConnectId Adjustment) -> Maybe (ConnectId Adjustment) -> CanvasWidgets -> Maybe (PageNum, BBox, RItem) -> CanvasInfo a
_canvasId :: CanvasInfo a -> CanvasId
_drawArea :: CanvasInfo a -> DrawingArea
_mDrawSurface :: CanvasInfo a -> Maybe Surface
_scrolledWindow :: CanvasInfo a -> ScrolledWindow
_viewInfo :: CanvasInfo a -> ViewInfo a
_currentPageNum :: CanvasInfo a -> Int
_horizAdjustment :: CanvasInfo a -> Adjustment
_vertAdjustment :: CanvasInfo a -> Adjustment
_horizAdjConnId :: CanvasInfo a -> Maybe (ConnectId Adjustment)
_vertAdjConnId :: CanvasInfo a -> Maybe (ConnectId Adjustment)
_canvasWidgets :: CanvasInfo a -> CanvasWidgets
_notifiedItem :: CanvasInfo a -> Maybe (PageNum, BBox, RItem)
data CanvasInfoBox
CanvasSinglePage :: (CanvasInfo SinglePage) -> CanvasInfoBox
CanvasContPage :: (CanvasInfo ContinuousPage) -> CanvasInfoBox
type CanvasInfoMap = IntMap CanvasInfoBox
data WidthColorStyle
data PenHighlighterEraserSet
data PenInfo

-- | default view info with single page mode
defaultViewInfoSinglePage :: ViewInfo SinglePage
defaultCvsInfoSinglePage :: CanvasInfo SinglePage

-- | default hoodle widgets
defaultCanvasWidgets :: CanvasWidgets
defaultPenWCS :: WidthColorStyle
defaultEraserWCS :: WidthColorStyle
defaultTextWCS :: WidthColorStyle
defaultHighligherWCS :: WidthColorStyle
defaultPenInfo :: PenInfo

-- | lens for zoomMode
points :: Simple Lens PenDraw (Seq (Double, Double))

-- | lens for zoomMode
zoomMode :: Simple Lens (ViewInfo a) ZoomMode
pageArrangement :: Simple Lens (ViewInfo a) (PageArrangement a)
canvasId :: Simple Lens (CanvasInfo a) CanvasId
drawArea :: Simple Lens (CanvasInfo a) DrawingArea
mDrawSurface :: Simple Lens (CanvasInfo a) (Maybe Surface)
scrolledWindow :: Simple Lens (CanvasInfo a) ScrolledWindow
viewInfo :: Simple Lens (CanvasInfo a) (ViewInfo a)
currentPageNum :: Simple Lens (CanvasInfo a) Int
horizAdjustment :: Simple Lens (CanvasInfo a) Adjustment
vertAdjustment :: Simple Lens (CanvasInfo a) Adjustment

-- | ConnectId for horizontal scrollbar value change event
horizAdjConnId :: Simple Lens (CanvasInfo a) (Maybe (ConnectId Adjustment))

-- | ConnectId for vertical scrollbar value change event
vertAdjConnId :: Simple Lens (CanvasInfo a) (Maybe (ConnectId Adjustment))

-- | composition lens
adjustments :: Simple Lens (CanvasInfo a) (Adjustment, Adjustment)

-- | lens for canavs widgets
canvasWidgets :: Simple Lens (CanvasInfo a) CanvasWidgets

-- | lens for notified item
notifiedItem :: Simple Lens (CanvasInfo a) (Maybe (PageNum, BBox, RItem))
currentTool :: Simple Lens PenInfo WidthColorStyle

-- | lens for penWidth
penWidth :: Simple Lens WidthColorStyle Double

-- | lens for penColor
penColor :: Simple Lens WidthColorStyle PenColor

-- | lens for currPen
currPen :: Simple Lens PenHighlighterEraserSet WidthColorStyle

-- | lens for currHighlighter
currHighlighter :: Simple Lens PenHighlighterEraserSet WidthColorStyle

-- | lens for currEraser
currEraser :: Simple Lens PenHighlighterEraserSet WidthColorStyle

-- | lens for currText
currText :: Simple Lens PenHighlighterEraserSet WidthColorStyle

-- | lens for currText
currVerticalSpace :: Simple Lens PenHighlighterEraserSet WidthColorStyle

-- | lens for penType
penType :: Simple Lens PenInfo PenType

-- | lens for penSet
penSet :: Simple Lens PenInfo PenHighlighterEraserSet

-- | lens for variableWidthPen
variableWidthPen :: Simple Lens PenInfo Bool
xfrmCvsInfo :: (ViewMode a, ViewMode b) => (ViewInfo a -> ViewInfo b) -> CanvasInfo a -> CanvasInfo b
xfrmViewInfo :: (ViewMode a, ViewMode b) => (PageArrangement a -> PageArrangement b) -> ViewInfo a -> ViewInfo b
getDrawAreaFromBox :: CanvasInfoBox -> DrawingArea
unboxGet :: (forall a. ViewMode a => Simple Lens (CanvasInfo a) b) -> CanvasInfoBox -> b
unboxSet :: (forall a. ViewMode a => Simple Lens (CanvasInfo a) b) -> b -> CanvasInfoBox -> CanvasInfoBox
unboxLens :: (forall a. ViewMode a => Simple Lens (CanvasInfo a) b) -> Simple Lens CanvasInfoBox b

-- | apply a funtion to Generic CanvasInfo
fmap4CvsInfoBox :: (forall a. ViewMode a => CanvasInfo a -> r) -> CanvasInfoBox -> r

-- | fmap-like operation for box
insideAction4CvsInfoBox :: (forall a. CanvasInfo a -> CanvasInfo a) -> CanvasInfoBox -> CanvasInfoBox

-- | fmap-like operation for box
insideAction4CvsInfoBoxF :: Functor f => (forall a. ViewMode a => CanvasInfo a -> f (CanvasInfo a)) -> CanvasInfoBox -> f CanvasInfoBox
boxAction :: Monad m => (forall a. ViewMode a => CanvasInfo a -> m b) -> CanvasInfoBox -> m b

-- | either-like operation
selectBoxAction :: Monad m => (CanvasInfo SinglePage -> m a) -> (CanvasInfo ContinuousPage -> m a) -> CanvasInfoBox -> m a
selectBox :: (CanvasInfo SinglePage -> CanvasInfo SinglePage) -> (CanvasInfo ContinuousPage -> CanvasInfo ContinuousPage) -> CanvasInfoBox -> CanvasInfoBox
updateCanvasDimForSingle :: CanvasDimension -> CanvasInfo SinglePage -> IO (CanvasInfo SinglePage)
updateCanvasDimForContSingle :: PageDimension -> CanvasDimension -> CanvasInfo ContinuousPage -> IO (CanvasInfo ContinuousPage)
instance Show PenDraw
instance Show WidthColorStyle
instance Show PenHighlighterEraserSet
instance Show PenInfo


module Hoodle.View.Coordinate

-- | data structure for transformation among screen, canvas, desktop and
--   page coordinates
data CanvasGeometry
CanvasGeometry :: ScreenDimension -> CanvasDimension -> DesktopDimension -> ViewPortBBox -> (ScreenCoordinate -> CanvasCoordinate) -> (CanvasCoordinate -> ScreenCoordinate) -> (CanvasCoordinate -> DesktopCoordinate) -> (DesktopCoordinate -> CanvasCoordinate) -> (DesktopCoordinate -> Maybe (PageNum, PageCoordinate)) -> ((PageNum, PageCoordinate) -> DesktopCoordinate) -> CanvasGeometry
screenDim :: CanvasGeometry -> ScreenDimension
canvasDim :: CanvasGeometry -> CanvasDimension
desktopDim :: CanvasGeometry -> DesktopDimension

-- | in desktop coordinate
canvasViewPort :: CanvasGeometry -> ViewPortBBox
screen2Canvas :: CanvasGeometry -> ScreenCoordinate -> CanvasCoordinate
canvas2Screen :: CanvasGeometry -> CanvasCoordinate -> ScreenCoordinate
canvas2Desktop :: CanvasGeometry -> CanvasCoordinate -> DesktopCoordinate
desktop2Canvas :: CanvasGeometry -> DesktopCoordinate -> CanvasCoordinate
desktop2Page :: CanvasGeometry -> DesktopCoordinate -> Maybe (PageNum, PageCoordinate)
page2Desktop :: CanvasGeometry -> (PageNum, PageCoordinate) -> DesktopCoordinate

-- | make a canvas geometry data structure from current status
makeCanvasGeometry :: PageNum -> PageArrangement vm -> DrawingArea -> IO CanvasGeometry
makePage2Desktop :: (PageNum -> Maybe (PageOrigin, PageDimension)) -> (PageNum, PageCoordinate) -> DesktopCoordinate
makeDesktop2Page :: (PageNum -> Maybe (PageOrigin, PageDimension)) -> DesktopCoordinate -> Maybe (PageNum, PageCoordinate)
xformScreen2Canvas :: CanvasOrigin -> ScreenCoordinate -> CanvasCoordinate
xformCanvas2Screen :: CanvasOrigin -> CanvasCoordinate -> ScreenCoordinate
xformCanvas2Desk :: CanvasDimension -> ViewPortBBox -> CanvasCoordinate -> DesktopCoordinate
xformDesk2Canvas :: CanvasDimension -> ViewPortBBox -> DesktopCoordinate -> CanvasCoordinate
screen2Desktop :: CanvasGeometry -> ScreenCoordinate -> DesktopCoordinate
desktop2Screen :: CanvasGeometry -> DesktopCoordinate -> ScreenCoordinate
core2Desktop :: CanvasGeometry -> (Double, Double) -> DesktopCoordinate
wacom2Desktop :: CanvasGeometry -> (Double, Double) -> DesktopCoordinate
touch2Desktop :: CanvasGeometry -> (Double, Double) -> DesktopCoordinate
wacom2Canvas :: CanvasGeometry -> (Double, Double) -> CanvasCoordinate
device2Desktop :: CanvasGeometry -> PointerCoord -> DesktopCoordinate
getPagesInRange :: CanvasGeometry -> ViewPortBBox -> Hoodle EditMode -> [PageNum]
getPagesInViewPortRange :: CanvasGeometry -> Hoodle EditMode -> [PageNum]
getCvsGeomFrmCvsInfo :: ViewMode a => CanvasInfo a -> IO CanvasGeometry

-- | Get Canvas Origin in Page Coordinate : Right is successful case, Left
--   is unsuccessful case, then return in DesktopCoordinate
getCvsOriginInPage :: CanvasGeometry -> Either DesktopCoordinate (PageNum, PageCoordinate)


-- | GUI events in hoodle application
module Hoodle.Type.Event
data AllEvent
UsrEv :: UserEvent -> AllEvent
SysEv :: SystemEvent -> AllEvent
data SystemEvent
TestSystemEvent :: SystemEvent
data UserEvent
Initialized :: UserEvent
CanvasConfigure :: Int -> Double -> Double -> UserEvent
UpdateCanvas :: Int -> UserEvent
PenDown :: Int -> PenButton -> PointerCoord -> UserEvent
PenMove :: Int -> PointerCoord -> UserEvent
PenUp :: Int -> PointerCoord -> UserEvent
TouchDown :: Int -> PointerCoord -> UserEvent
TouchMove :: Int -> PointerCoord -> UserEvent
TouchUp :: Int -> PointerCoord -> UserEvent
PenColorChanged :: PenColor -> UserEvent
PenWidthChanged :: Int -> UserEvent
AssignPenMode :: (Either PenType SelectType) -> UserEvent
BackgroundStyleChanged :: BackgroundStyle -> UserEvent
HScrollBarMoved :: Int -> Double -> UserEvent
VScrollBarMoved :: Int -> Double -> UserEvent
VScrollBarStart :: Int -> Double -> UserEvent
VScrollBarEnd :: Int -> Double -> UserEvent
PaneMoveStart :: UserEvent
PaneMoveEnd :: UserEvent
ToViewAppendMode :: UserEvent
ToSelectMode :: UserEvent
ToSinglePage :: UserEvent
ToContSinglePage :: UserEvent
Menu :: MenuEvent -> UserEvent
GotOk :: UserEvent
OkCancel :: Bool -> UserEvent
FileChosen :: (Maybe FilePath) -> UserEvent
ColorChosen :: (Maybe PenColor) -> UserEvent
GotClipboardContent :: (Maybe [Item]) -> UserEvent
ContextMenuCreated :: UserEvent
GotContextMenuSignal :: ContextMenuEvent -> UserEvent
LaTeXInput :: (Maybe (ByteString, ByteString)) -> UserEvent
TextInput :: (Maybe String) -> UserEvent
AddLink :: (Maybe (String, FilePath)) -> UserEvent
EventDisconnected :: UserEvent
GetHoodleFileInfo :: (IORef (Maybe String)) -> UserEvent
GotLink :: (Maybe String) -> (Int, Int) -> UserEvent
Sync :: UTCTime -> UserEvent
FileReloadOrdered :: UserEvent
CustomKeyEvent :: String -> UserEvent
GotRevision :: String -> String -> UserEvent
ActionOrdered :: UserEvent
data MenuEvent
MenuNew :: MenuEvent
MenuAnnotatePDF :: MenuEvent
MenuOpen :: MenuEvent
MenuSave :: MenuEvent
MenuSaveAs :: MenuEvent
MenuReload :: MenuEvent
MenuRecentDocument :: MenuEvent
MenuLoadPNGorJPG :: MenuEvent
MenuLoadSVG :: MenuEvent
MenuLaTeX :: MenuEvent
MenuEmbedPredefinedImage :: MenuEvent
MenuEmbedPredefinedImage2 :: MenuEvent
MenuEmbedPredefinedImage3 :: MenuEvent
MenuPrint :: MenuEvent
MenuExport :: MenuEvent
MenuStartSync :: MenuEvent
MenuVersionSave :: MenuEvent
MenuShowRevisions :: MenuEvent
MenuShowUUID :: MenuEvent
MenuQuit :: MenuEvent
MenuUndo :: MenuEvent
MenuRedo :: MenuEvent
MenuCut :: MenuEvent
MenuCopy :: MenuEvent
MenuPaste :: MenuEvent
MenuDelete :: MenuEvent
MenuFullScreen :: MenuEvent
MenuZoom :: MenuEvent
MenuZoomIn :: MenuEvent
MenuZoomOut :: MenuEvent
MenuNormalSize :: MenuEvent
MenuPageWidth :: MenuEvent
MenuPageHeight :: MenuEvent
MenuSetZoom :: MenuEvent
MenuFirstPage :: MenuEvent
MenuPreviousPage :: MenuEvent
MenuNextPage :: MenuEvent
MenuLastPage :: MenuEvent
MenuShowLayer :: MenuEvent
MenuHideLayer :: MenuEvent
MenuHSplit :: MenuEvent
MenuVSplit :: MenuEvent
MenuDelCanvas :: MenuEvent
MenuNewPageBefore :: MenuEvent
MenuNewPageAfter :: MenuEvent
MenuNewPageAtEnd :: MenuEvent
MenuDeletePage :: MenuEvent
MenuExportPageSVG :: MenuEvent
MenuNewLayer :: MenuEvent
MenuNextLayer :: MenuEvent
MenuPrevLayer :: MenuEvent
MenuGotoLayer :: MenuEvent
MenuDeleteLayer :: MenuEvent
MenuPaperSize :: MenuEvent
MenuPaperColor :: MenuEvent
MenuPaperStyle :: MenuEvent
MenuApplyToAllPages :: MenuEvent
MenuEmbedAllPDFBkg :: MenuEvent
MenuDefaultPaper :: MenuEvent
MenuSetAsDefaultPaper :: MenuEvent
MenuText :: MenuEvent
MenuAddLink :: MenuEvent
MenuShapeRecognizer :: MenuEvent
MenuRuler :: MenuEvent
MenuSelectRegion :: MenuEvent
MenuSelectRectangle :: MenuEvent
MenuVerticalSpace :: MenuEvent
MenuPenOptions :: MenuEvent
MenuEraserOptions :: MenuEvent
MenuHighlighterOptions :: MenuEvent
MenuTextFont :: MenuEvent
MenuColorPicker :: MenuEvent
MenuDefaultPen :: MenuEvent
MenuDefaultEraser :: MenuEvent
MenuDefaultHighlighter :: MenuEvent
MenuDefaultText :: MenuEvent
MenuSetAsDefaultOption :: MenuEvent
MenuRelaunch :: MenuEvent
MenuUseXInput :: MenuEvent
MenuUseTouch :: MenuEvent
MenuSmoothScroll :: MenuEvent
MenuUsePopUpMenu :: MenuEvent
MenuEmbedImage :: MenuEvent
MenuEmbedPDF :: MenuEvent
MenuFollowLinks :: MenuEvent
MenuTogglePanZoomWidget :: MenuEvent
MenuToggleLayerWidget :: MenuEvent
MenuDiscardCoreEvents :: MenuEvent
MenuEraserTip :: MenuEvent
MenuPressureSensitivity :: MenuEvent
MenuPageHighlight :: MenuEvent
MenuMultiplePageView :: MenuEvent
MenuMultiplePages :: MenuEvent
MenuButton2Mapping :: MenuEvent
MenuButton3Mapping :: MenuEvent
MenuAntialiasedBitmaps :: MenuEvent
MenuProgressiveBackgrounds :: MenuEvent
MenuPrintPaperRuling :: MenuEvent
MenuLeftHandedScrollbar :: MenuEvent
MenuShortenMenus :: MenuEvent
MenuAutoSavePreferences :: MenuEvent
MenuSavePreferences :: MenuEvent
MenuAbout :: MenuEvent
MenuDefault :: MenuEvent
data ImgType
TypSVG :: ImgType
TypPDF :: ImgType
data ContextMenuEvent
CMenuSaveSelectionAs :: ImgType -> ContextMenuEvent
CMenuCut :: ContextMenuEvent
CMenuCopy :: ContextMenuEvent
CMenuDelete :: ContextMenuEvent
CMenuCanvasView :: CanvasId -> PageNum -> Double -> Double -> ContextMenuEvent
CMenuRotateCW :: ContextMenuEvent
CMenuRotateCCW :: ContextMenuEvent
CMenuAutosavePage :: ContextMenuEvent
CMenuLinkConvert :: Link -> ContextMenuEvent
CMenuCreateALink :: ContextMenuEvent
CMenuAssocWithNewFile :: ContextMenuEvent
CMenuCustom :: ContextMenuEvent
viewModeToUserEvent :: RadioAction -> IO UserEvent
mkIOaction :: ((AllEvent -> IO ()) -> IO AllEvent) -> Either (ActionOrder AllEvent) AllEvent
instance Show SystemEvent
instance Show MenuEvent
instance Ord MenuEvent
instance Eq MenuEvent
instance Show ImgType
instance Ord ImgType
instance Eq ImgType
instance Show ContextMenuEvent
instance Ord ContextMenuEvent
instance Eq ContextMenuEvent
instance Show UserEvent
instance Show AllEvent
instance Show (IORef a)


module Hoodle.ModelAction.ContextMenu
menuOpenALink :: (AllEvent -> IO ()) -> UrlPath -> IO MenuItem
openLinkAction :: UrlPath -> IO ()
menuCreateALink :: (AllEvent -> IO ()) -> [RItem] -> IO (Maybe MenuItem)
makeSVGFromSelection :: [RItem] -> BBox -> IO SVG


module Hoodle.Type.Window
data WindowConfig
Node :: CanvasId -> WindowConfig
HSplit :: WindowConfig -> WindowConfig -> WindowConfig
VSplit :: WindowConfig -> WindowConfig -> WindowConfig
data SplitType
SplitHorizontal :: SplitType
SplitVertical :: SplitType

-- | split window in the place of cidold
splitWindow :: CanvasId -> (CanvasId, SplitType) -> WindowConfig -> Either WindowConfig WindowConfig
removeWindow :: CanvasId -> WindowConfig -> Either WindowConfig (Maybe WindowConfig)
instance Show WindowConfig
instance Eq WindowConfig
instance Show SplitType


module Hoodle.ModelAction.Adjustment

-- | adjust values, upper limit and page size according to canvas geometry
adjustScrollbarWithGeometry :: CanvasGeometry -> ((Adjustment, Maybe (ConnectId Adjustment)), (Adjustment, Maybe (ConnectId Adjustment))) -> IO ()
setAdjustments :: ((Adjustment, Maybe (ConnectId Adjustment)), (Adjustment, Maybe (ConnectId Adjustment))) -> (Double, Double) -> (Double, Double) -> (Double, Double) -> (Double, Double) -> IO ()


module Hoodle.Type.HoodleState
data HoodleState
HoodleState :: HoodleModeState -> HoodleFileControl -> CanvasInfoMap -> (CanvasId, CanvasInfoBox) -> WindowConfig -> Widget -> Box -> Window -> PenDraw -> (AllEvent -> IO ()) -> DeviceList -> PenInfo -> SelectInfo -> UIManager -> Bool -> UndoTable HoodleModeState -> BackgroundStyle -> Bool -> Settings -> UIComponentSignalHandler -> IsOneTimeSelectMode -> Maybe UTCTime -> Maybe Hook -> Queue (Either (ActionOrder AllEvent) AllEvent) -> (String -> String) -> Maybe Statusbar -> HoodleState
_hoodleModeState :: HoodleState -> HoodleModeState
_hoodleFileControl :: HoodleState -> HoodleFileControl
_cvsInfoMap :: HoodleState -> CanvasInfoMap
_currentCanvas :: HoodleState -> (CanvasId, CanvasInfoBox)
_frameState :: HoodleState -> WindowConfig
_rootWindow :: HoodleState -> Widget
_rootContainer :: HoodleState -> Box
_rootOfRootWindow :: HoodleState -> Window
_currentPenDraw :: HoodleState -> PenDraw
_callBack :: HoodleState -> AllEvent -> IO ()
_deviceList :: HoodleState -> DeviceList
_penInfo :: HoodleState -> PenInfo
_selectInfo :: HoodleState -> SelectInfo
_gtkUIManager :: HoodleState -> UIManager
_isSaved :: HoodleState -> Bool
_undoTable :: HoodleState -> UndoTable HoodleModeState
_backgroundStyle :: HoodleState -> BackgroundStyle
_isFullScreen :: HoodleState -> Bool
_settings :: HoodleState -> Settings
_uiComponentSignalHandler :: HoodleState -> UIComponentSignalHandler
_isOneTimeSelectMode :: HoodleState -> IsOneTimeSelectMode
_lastTimeCanvasConfigure :: HoodleState -> Maybe UTCTime
_hookSet :: HoodleState -> Maybe Hook
_tempQueue :: HoodleState -> Queue (Either (ActionOrder AllEvent) AllEvent)
_tempLog :: HoodleState -> String -> String
_statusBar :: HoodleState -> Maybe Statusbar
data HoodleModeState
ViewAppendState :: RHoodle -> HoodleModeState
unView :: HoodleModeState -> RHoodle
SelectState :: HHoodle -> HoodleModeState
tempSelect :: HoodleModeState -> HHoodle
data IsOneTimeSelectMode
NoOneTimeSelectMode :: IsOneTimeSelectMode
YesBeforeSelect :: IsOneTimeSelectMode
YesAfterSelect :: IsOneTimeSelectMode

-- | A set of Hoodle settings
data Settings
Settings :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Settings
_doesUseXInput :: Settings -> Bool
_doesUseTouch :: Settings -> Bool
_doesSmoothScroll :: Settings -> Bool
_doesUsePopUpMenu :: Settings -> Bool
_doesEmbedImage :: Settings -> Bool
_doesEmbedPDF :: Settings -> Bool
_doesFollowLinks :: Settings -> Bool
data UIComponentSignalHandler
UIComponentSignalHandler :: Maybe (ConnectId RadioAction) -> Maybe (ConnectId RadioAction) -> Maybe (ConnectId RadioAction) -> Maybe (ConnectId RadioAction) -> UIComponentSignalHandler
_penModeSignal :: UIComponentSignalHandler -> Maybe (ConnectId RadioAction)
_pageModeSignal :: UIComponentSignalHandler -> Maybe (ConnectId RadioAction)
_penPointSignal :: UIComponentSignalHandler -> Maybe (ConnectId RadioAction)
_penColorSignal :: UIComponentSignalHandler -> Maybe (ConnectId RadioAction)

-- | lens for hoodleModeState
hoodleModeState :: Simple Lens HoodleState HoodleModeState
hoodleFileControl :: Simple Lens HoodleState HoodleFileControl

-- | lens for cvsInfoMap
cvsInfoMap :: Simple Lens HoodleState CanvasInfoMap

-- | lens for currentCanvas
currentCanvas :: Simple Lens HoodleState (CanvasId, CanvasInfoBox)

-- | lens for frameState
frameState :: Simple Lens HoodleState WindowConfig

-- | lens for rootWindow
rootWindow :: Simple Lens HoodleState Widget

-- | lens for rootContainer
rootContainer :: Simple Lens HoodleState Box

-- | lens for rootOfRootWindow
rootOfRootWindow :: Simple Lens HoodleState Window

-- | lens for currentPenDraw
currentPenDraw :: Simple Lens HoodleState PenDraw

-- | lens for callBack
callBack :: Simple Lens HoodleState (AllEvent -> IO ())

-- | lens for deviceList
deviceList :: Simple Lens HoodleState DeviceList

-- | lens for penInfo
penInfo :: Simple Lens HoodleState PenInfo

-- | lens for selectInfo
selectInfo :: Simple Lens HoodleState SelectInfo

-- | lens for gtkUIManager
gtkUIManager :: Simple Lens HoodleState UIManager

-- | lens for isSaved
isSaved :: Simple Lens HoodleState Bool

-- | lens for undoTable
undoTable :: Simple Lens HoodleState (UndoTable HoodleModeState)

-- | background style = plain, lined, ruled, graph
backgroundStyle :: Simple Lens HoodleState BackgroundStyle

-- | lens for isFullScreen
isFullScreen :: Simple Lens HoodleState Bool
settings :: Simple Lens HoodleState Settings
uiComponentSignalHandler :: Simple Lens HoodleState UIComponentSignalHandler

-- | lens for isOneTimeSelectMode
isOneTimeSelectMode :: Simple Lens HoodleState IsOneTimeSelectMode

-- | lens for lastTimeCanvasConfigure
lastTimeCanvasConfigure :: Simple Lens HoodleState (Maybe UTCTime)

-- | lens for hookSet
hookSet :: Simple Lens HoodleState (Maybe Hook)

-- | lens for tempLog
tempLog :: Simple Lens HoodleState (String -> String)

-- | lens for tempQueue
tempQueue :: Simple Lens HoodleState (Queue (Either (ActionOrder AllEvent) AllEvent))
statusBar :: Simple Lens HoodleState (Maybe Statusbar)

-- | lens for currFileName
hoodleFileName :: Simple Lens HoodleFileControl (Maybe FilePath)

-- | lens for last saved time
lastSavedTime :: Simple Lens HoodleFileControl (Maybe UTCTime)

-- | flag for XInput extension (needed for using full power of wacom)
doesUseXInput :: Simple Lens Settings Bool

-- | flag for touch
doesUseTouch :: Simple Lens Settings Bool

-- | flag for smooth scrolling
doesSmoothScroll :: Simple Lens Settings Bool

-- | flag for using popup menu
doesUsePopUpMenu :: Simple Lens Settings Bool

-- | flag for embedding image as base64 in hdl file
doesEmbedImage :: Simple Lens Settings Bool

-- | flag for embedding pdf background as base64 in hdl file
doesEmbedPDF :: Simple Lens Settings Bool

-- | flag for embedding pdf background as base64 in hdl file
doesFollowLinks :: Simple Lens Settings Bool

-- | lens for penModeSignal
penModeSignal :: Simple Lens UIComponentSignalHandler (Maybe (ConnectId RadioAction))

-- | lens for pageModeSignal
pageModeSignal :: Simple Lens UIComponentSignalHandler (Maybe (ConnectId RadioAction))

-- | lens for penPointSignal
penPointSignal :: Simple Lens UIComponentSignalHandler (Maybe (ConnectId RadioAction))

-- | lens for penColorSignal
penColorSignal :: Simple Lens UIComponentSignalHandler (Maybe (ConnectId RadioAction))

-- | default hoodle state
emptyHoodleState :: IO HoodleState

-- | default settings
defaultSettings :: Settings
defaultUIComponentSignalHandler :: UIComponentSignalHandler
getHoodle :: HoodleState -> Hoodle EditMode
getCanvasInfoMap :: HoodleState -> CanvasInfoMap
setCanvasInfoMap :: CanvasInfoMap -> HoodleState -> Maybe HoodleState
getCurrentCanvasId :: HoodleState -> CanvasId
setCurrentCanvasId :: CanvasId -> HoodleState -> Maybe HoodleState
currentCanvasInfo :: Simple Lens HoodleState CanvasInfoBox
resetHoodleModeStateBuffers :: HoodleModeState -> IO HoodleModeState
getCanvasInfo :: CanvasId -> HoodleState -> CanvasInfoBox
setCanvasInfo :: (CanvasId, CanvasInfoBox) -> HoodleState -> HoodleState

-- | change current canvas. this is the master function
updateFromCanvasInfoAsCurrentCanvas :: CanvasInfoBox -> HoodleState -> HoodleState
setCanvasId :: CanvasId -> CanvasInfoBox -> CanvasInfoBox
modifyCanvasInfo :: CanvasId -> (CanvasInfoBox -> CanvasInfoBox) -> HoodleState -> HoodleState
hoodleModeStateEither :: HoodleModeState -> Either (Hoodle EditMode) (Hoodle SelectMode)
getCurrentPageFromHoodleModeState :: ViewMode a => CanvasInfo a -> HoodleModeState -> Page EditMode
getCurrentPageDimFromHoodleModeState :: ViewMode a => CanvasInfo a -> HoodleModeState -> PageDimension
showCanvasInfoMapViewPortBBox :: HoodleState -> IO ()
instance Show IsOneTimeSelectMode
instance Eq IsOneTimeSelectMode
instance Ord IsOneTimeSelectMode


module Hoodle.ModelAction.File

-- | check hoodle version and migrate if necessary
checkVersionAndMigrate :: ByteString -> IO (Either String Hoodle)

-- | get file content from xournal file and update xournal state
getFileContent :: Maybe FilePath -> HoodleState -> IO HoodleState
constructNewHoodleStateFromHoodle :: Hoodle -> HoodleState -> IO HoodleState

-- | this is very temporary, need to be changed.
findFirstPDFFile :: [(Int, RPage)] -> Maybe ByteString
findAllPDFPages :: [(Int, RPage)] -> [Int]
replacePDFPages :: [(Int, RPage)] -> [(Int, RPage)]
embedPDFInHoodle :: RHoodle -> IO RHoodle
makeEmbeddedPdfSrcString :: ByteString -> ByteString
makeNewHoodleWithPDF :: Bool -> FilePath -> IO (Maybe Hoodle)
createPage :: Bool -> Dimension -> ByteString -> Int -> Page
saveHoodle :: HoodleState -> IO HoodleState

-- | this function must be moved to GUI.Reflect
toggleSave :: UIManager -> Bool -> IO ()


module Hoodle.ModelAction.Page
getPageMap :: HoodleModeState -> IntMap (Page EditMode)
setPageMap :: IntMap (Page EditMode) -> HoodleModeState -> HoodleModeState
updatePageAll :: HoodleModeState -> HoodleState -> IO HoodleState
adjustPage :: HoodleModeState -> CanvasInfoBox -> CanvasInfoBox
getPageFromGHoodleMap :: Int -> GHoodle IntMap a -> a
updateCvsInfoFrmHoodle :: Hoodle EditMode -> CanvasInfoBox -> IO CanvasInfoBox
updatePage :: HoodleModeState -> CanvasInfoBox -> IO CanvasInfoBox
setPage :: HoodleState -> PageNum -> CanvasId -> IO CanvasInfoBox

-- | setPageSingle : in Single Page mode
setPageSingle :: HoodleState -> PageNum -> CanvasInfo SinglePage -> IO (CanvasInfo SinglePage)

-- | setPageCont : in Continuous Page mode
setPageCont :: HoodleState -> PageNum -> CanvasInfo ContinuousPage -> IO (CanvasInfo ContinuousPage)
newSinglePageFromOld :: Page EditMode -> Page EditMode
addNewPageInHoodle :: BackgroundStyle -> AddDirection -> Hoodle EditMode -> Int -> Hoodle EditMode

-- | need to be refactored into zoomRatioFrmRelToCurr (rename
--   zoomRatioRelPredefined)
relZoomRatio :: CanvasGeometry -> ZoomModeRel -> Double
zoomRatioFrmRelToCurr :: CanvasGeometry -> Double -> Double


module Hoodle.Type.Coroutine
data MainOp i o
DoEvent :: MainOp AllEvent ()
doEvent :: Monad m => AllEvent -> CObjT MainOp m ()
type MainCoroutine = MainObjB
type MainObjB = SObjBT MainOp (EStT HoodleState WorldObjB)
type MainObj = SObjT MainOp (EStT HoodleState WorldObjB)
nextevent :: MainCoroutine UserEvent
sysevent :: SystemEvent -> MainCoroutine ()
type WorldObj = SObjT (WorldOp AllEvent DriverB) DriverB
type WorldObjB = SObjBT (WorldOp AllEvent DriverB) DriverB
world :: HoodleState -> MainObj () -> WorldObj ()
type Driver a = Driver AllEvent IO a
type DriverB = SObjBT (DrvOp AllEvent) IO
type EventVar = MVar (Maybe (Driver ()))
maybeError :: String -> Maybe a -> MainCoroutine a
doIOaction :: ((AllEvent -> IO ()) -> IO AllEvent) -> MainCoroutine ()


module Hoodle.ModelAction.Window

-- | set frame title according to file name
setTitleFromFileName :: HoodleState -> IO ()
newCanvasId :: CanvasInfoMap -> CanvasId

-- | initialize CanvasInfo with creating windows and connect events
initCanvasInfo :: ViewMode a => HoodleState -> CanvasId -> IO (CanvasInfo a)

-- | only creating windows
minimalCanvasInfo :: ViewMode a => HoodleState -> CanvasId -> IO (CanvasInfo a)

-- | only connect events
connectDefaultEventCanvasInfo :: ViewMode a => HoodleState -> CanvasInfo a -> IO (CanvasInfo a)

-- | recreate windows from old canvas info but no event connect
reinitCanvasInfoStage1 :: ViewMode a => HoodleState -> CanvasInfo a -> IO (CanvasInfo a)

-- | event connect
reinitCanvasInfoStage2 :: ViewMode a => HoodleState -> CanvasInfo a -> IO (CanvasInfo a)

-- | event connecting for all windows
eventConnect :: HoodleState -> WindowConfig -> IO (HoodleState, WindowConfig)

-- | default construct frame
constructFrame :: HoodleState -> WindowConfig -> IO (HoodleState, Widget, WindowConfig)

-- | construct frames with template
constructFrame' :: CanvasInfoBox -> HoodleState -> WindowConfig -> IO (HoodleState, Widget, WindowConfig)


module Hoodle.Script.Coroutine
afterSaveHook :: FilePath -> Hoodle -> MainCoroutine ()
saveAsHook :: FilePath -> Hoodle -> MainCoroutine ()
hoist :: Monad m => Maybe a -> MaybeT m a
recentFolderHook :: MainCoroutine (Maybe FilePath)
embedPredefinedImageHook :: MainCoroutine (Maybe FilePath)

-- | temporary
embedPredefinedImage2Hook :: MainCoroutine (Maybe FilePath)

-- | temporary
embedPredefinedImage3Hook :: MainCoroutine (Maybe FilePath)


module Hoodle.ModelAction.Select.Transform
rItmsInActiveLyr :: Page SelectMode -> Either [RItem] (TAlterHitted RItem)
changeItemBy :: ((Double, Double) -> (Double, Double)) -> RItem -> RItem

-- | modify stroke using a function
changeStrokeBy :: ((Double, Double) -> (Double, Double)) -> BBoxed Stroke -> BBoxed Stroke
changeImageBy :: ((Double, Double) -> (Double, Double)) -> BBoxed Image -> BBoxed Image
changeSVGBy :: ((Double, Double) -> (Double, Double)) -> BBoxed SVG -> BBoxed SVG
changeLinkBy :: ((Double, Double) -> (Double, Double)) -> BBoxed Link -> BBoxed Link

-- | modify the whole selection using a function
changeSelectionBy :: ((Double, Double) -> (Double, Double)) -> Page SelectMode -> Page SelectMode

-- | special case of offset modification
changeSelectionByOffset :: (Double, Double) -> Page SelectMode -> Page SelectMode
offsetFunc :: (Double, Double) -> (Double, Double) -> (Double, Double)


module Hoodle.View.Draw
newtype SinglePageDraw a
SinglePageDraw :: (Bool -> (DrawingArea, Maybe Surface) -> (PageNum, Page a) -> ViewInfo SinglePage -> Maybe BBox -> DrawFlag -> IO (Page a)) -> SinglePageDraw a
unSinglePageDraw :: SinglePageDraw a -> Bool -> (DrawingArea, Maybe Surface) -> (PageNum, Page a) -> ViewInfo SinglePage -> Maybe BBox -> DrawFlag -> IO (Page a)
newtype ContPageDraw a
ContPageDraw :: (Bool -> CanvasInfo ContinuousPage -> Maybe BBox -> Hoodle a -> DrawFlag -> IO (Hoodle a)) -> ContPageDraw a
unContPageDraw :: ContPageDraw a -> Bool -> CanvasInfo ContinuousPage -> Maybe BBox -> Hoodle a -> DrawFlag -> IO (Hoodle a)
getCanvasViewPort :: CanvasGeometry -> ViewPortBBox
getBBoxInPageCoord :: CanvasGeometry -> PageNum -> BBox -> BBox
getViewableBBox :: CanvasGeometry -> Maybe BBox -> IntersectBBox

-- | double buffering within two image surfaces
virtualDoubleBufferDraw :: MonadIO m => Surface -> Surface -> Render () -> Render () -> m ()
doubleBufferFlush :: ViewMode a => Surface -> CanvasInfo a -> IO ()

-- | common routine for double buffering
doubleBufferDraw :: (DrawWindow, Maybe Surface) -> CanvasGeometry -> Render () -> Render a -> IntersectBBox -> IO (Maybe a)
cairoXform4PageCoordinate :: CanvasGeometry -> PageNum -> Render ()
data PressureMode
NoPressure :: PressureMode
Pressure :: PressureMode
drawCurvebitGen :: PressureMode -> DrawingArea -> CanvasGeometry -> Double -> (Double, Double, Double, Double) -> PageNum -> Seq (Double, Double, Double) -> ((Double, Double), Double) -> ((Double, Double), Double) -> IO ()
drawFuncGen :: em -> ((PageNum, Page em) -> Maybe BBox -> DrawFlag -> Render (Page em)) -> DrawingFunction SinglePage em
drawFuncSelGen :: ((PageNum, Page SelectMode) -> Maybe BBox -> DrawFlag -> Render ()) -> ((PageNum, Page SelectMode) -> Maybe BBox -> DrawFlag -> Render ()) -> DrawingFunction SinglePage SelectMode
emphasisCanvasRender :: PenColor -> CanvasGeometry -> Render ()

-- | highlight current page
emphasisPageRender :: CanvasGeometry -> (PageNum, Page EditMode) -> Render ()

-- | highlight notified item (like link)
emphasisNotifiedRender :: CanvasGeometry -> (PageNum, BBox, RItem) -> Render ()
drawContPageGen :: ((PageNum, Page EditMode) -> Maybe BBox -> DrawFlag -> Render (Int, Page EditMode)) -> DrawingFunction ContinuousPage EditMode
drawContPageSelGen :: ((PageNum, Page EditMode) -> Maybe BBox -> DrawFlag -> Render (Int, Page EditMode)) -> ((PageNum, Page SelectMode) -> Maybe BBox -> DrawFlag -> Render (Int, Page SelectMode)) -> DrawingFunction ContinuousPage SelectMode
drawSinglePage :: DrawingFunction SinglePage EditMode
drawSinglePageSel :: CanvasGeometry -> DrawingFunction SinglePage SelectMode
drawContHoodle :: DrawingFunction ContinuousPage EditMode
drawContHoodleSel :: CanvasGeometry -> DrawingFunction ContinuousPage SelectMode
cairoHittedBoxDraw :: CanvasGeometry -> Page SelectMode -> Maybe BBox -> Render ()
renderLasso :: CanvasGeometry -> Seq (Double, Double) -> Render ()
renderBoxSelection :: BBox -> Render ()
renderSelectedStroke :: BBoxed Stroke -> Render ()
renderSelectedItem :: RItem -> Render ()
canvas2DesktopRatio :: CanvasGeometry -> Double
renderSelectHandle :: CanvasGeometry -> BBox -> Render ()
canvasImageSurface :: Maybe Double -> CanvasGeometry -> Hoodle EditMode -> IO (Surface, Dimension)
drawWidgets :: ViewMode a => [WidgetItem] -> Hoodle EditMode -> CanvasInfo a -> Maybe BBox -> Render ()
renderPanZoomWidget :: Bool -> Maybe BBox -> CanvasCoordinate -> Render ()
drawLayerWidget :: ViewMode a => Hoodle EditMode -> CanvasInfo a -> Maybe BBox -> CanvasCoordinate -> Render ()
renderLayerContent :: Maybe BBox -> Dimension -> Surface -> CanvasCoordinate -> Render ()
renderLayerWidget :: String -> Maybe BBox -> CanvasCoordinate -> Render ()


module Hoodle.Type


-- | Construct hoodle menus
module Hoodle.GUI.Menu
justMenu :: MenuEvent -> Maybe UserEvent

-- | uiDecl :: String uiDecl = [verbatim| |]
iconList :: [(String, String)]
viewmods :: [RadioActionEntry]
pointmods :: [RadioActionEntry]
penmods :: [RadioActionEntry]
colormods :: [RadioActionEntry]
bkgstyles :: [RadioActionEntry]
iconResourceAdd :: IconFactory -> FilePath -> (FilePath, StockId) -> IO ()
actionNewAndRegisterRef :: EventVar -> String -> String -> Maybe String -> Maybe StockId -> Maybe UserEvent -> IO Action
getMenuUI :: EventVar -> IO (UIManager, UIComponentSignalHandler)
actionGroupAddRadioActionsAndGetConnID :: ActionGroup -> [RadioActionEntry] -> Int -> (RadioAction -> IO ()) -> IO (Maybe (ConnectId RadioAction))
assignViewMode :: EventVar -> RadioAction -> IO ()
assignPenMode :: EventVar -> RadioAction -> IO ()
assignColor :: EventVar -> RadioAction -> IO ()
assignPoint :: EventVar -> RadioAction -> IO ()
assignBkgStyle :: EventVar -> RadioAction -> IO ()
int2PenType :: Int -> Either PenType SelectType
penType2Int :: Either PenType SelectType -> Int
int2Point :: PenType -> Int -> Double
similarTo :: Double -> Double -> Bool
point2Int :: PenType -> Double -> Int
int2Color :: Int -> PenColor
color2Int :: PenColor -> Int
int2BkgStyle :: Int -> BackgroundStyle


module Hoodle.ModelAction.Layer
getCurrentLayer :: Page EditMode -> RLayer
adjustCurrentLayer :: RLayer -> Page EditMode -> Page EditMode
layerChooseDialog :: IORef Int -> Int -> Int -> IO Dialog


module Hoodle.ModelAction.Pen
data TempRender a
TempRender :: Surface -> Surface -> (Double, Double) -> a -> TempRender a
tempSurfaceSrc :: TempRender a -> Surface
tempSurfaceTgt :: TempRender a -> Surface
widthHeight :: TempRender a -> (Double, Double)
tempInfo :: TempRender a -> a

-- | update the content of temp selection. should not be often updated
updateTempRender :: TempRender a -> Render () -> Bool -> IO ()
createNewStroke :: PenInfo -> Seq (Double, Double, Double) -> Stroke
addPDraw :: PenInfo -> RHoodle -> PageNum -> Seq (Double, Double, Double) -> IO (RHoodle, BBox)


module Hoodle.ModelAction.Select
data Handle
HandleTL :: Handle
HandleTR :: Handle
HandleBL :: Handle
HandleBR :: Handle
HandleTM :: Handle
HandleBM :: Handle
HandleML :: Handle
HandleMR :: Handle
scaleFromToBBox :: BBox -> BBox -> (Double, Double) -> (Double, Double)
isBBoxDeltaSmallerThan :: Double -> PageNum -> CanvasGeometry -> BBox -> BBox -> Bool
getSelectedItms :: Page SelectMode -> [RItem]
getSelectedItmsFromHoodleState :: HoodleState -> Maybe [RItem]

-- | start a select mode with alter list selection
makePageSelectMode :: Page EditMode -> TAlterHitted RItem -> Page SelectMode

-- | get unselected part of page and make an ordinary page
deleteSelected :: Page SelectMode -> Page SelectMode
updateTempHoodleSelect :: Hoodle SelectMode -> Page SelectMode -> Int -> Hoodle SelectMode
updateTempHoodleSelectIO :: Hoodle SelectMode -> Page SelectMode -> Int -> IO (Hoodle SelectMode)
calculateWholeBBox :: [BBoxed Stroke] -> Maybe BBox
hitInSelection :: Page SelectMode -> (Double, Double) -> Bool
getULBBoxFromSelected :: Page SelectMode -> ULMaybe BBox
hitInHandle :: Page SelectMode -> (Double, Double) -> Bool
toggleCutCopyDelete :: UIManager -> Bool -> IO ()
togglePaste :: UIManager -> Bool -> IO ()
changeStrokeColor :: PenColor -> BBoxed Stroke -> BBoxed Stroke
changeStrokeWidth :: Double -> BBoxed Stroke -> BBoxed Stroke
changeItemStrokeWidth :: Double -> RItem -> RItem
changeItemStrokeColor :: PenColor -> RItem -> RItem
newtype CmpBBox a
CmpBBox :: a -> CmpBBox a
unCmpBBox :: CmpBBox a -> a
isSame :: DI -> Bool
separateFS :: [(DI, a)] -> ([a], [a])
getDiffBBox :: GetBBoxable a => [a] -> [a] -> [(DI, a)]
checkIfHandleGrasped :: BBox -> (Double, Double) -> Maybe Handle
getNewBBoxFromHandlePos :: Handle -> BBox -> (Double, Double) -> BBox
angleBAC :: (Double, Double) -> (Double, Double) -> (Double, Double) -> Double
wrappingAngle :: Seq (Double, Double) -> (Double, Double) -> Double
mappingDegree :: Seq (Double, Double) -> (Double, Double) -> Int
hitLassoPoint :: Seq (Double, Double) -> (Double, Double) -> Bool
hitLassoStroke :: Seq (Double, Double) -> BBoxed Stroke -> Bool
hitLassoItem :: Seq (Double, Double) -> RItem -> Bool
type TempSelection = TempRender [RItem]
data ItmsNImg
ItmsNImg :: [RItem] -> Maybe BBox -> Surface -> ItmsNImg
itmNimg_itms :: ItmsNImg -> [RItem]
itmNimg_mbbx :: ItmsNImg -> Maybe BBox
imageSurface :: ItmsNImg -> Surface
mkItmsNImg :: CanvasGeometry -> Page SelectMode -> IO ItmsNImg
drawTempSelectImage :: CanvasGeometry -> TempRender ItmsNImg -> Matrix -> Render ()
getNewCoordTime :: ((Double, Double), UTCTime) -> (Double, Double) -> IO (Bool, ((Double, Double), UTCTime))
adjustItemPosition4Paste :: CanvasGeometry -> PageNum -> [RItem] -> [RItem]
instance Show Handle
instance GetBBoxable a => Eq (CmpBBox a)


-- | Clipboard io actions
module Hoodle.ModelAction.Clipboard
updateClipboard :: HoodleState -> [Item] -> IO HoodleState
callback4Clip :: (AllEvent -> IO ()) -> Maybe String -> IO ()


module Hoodle.GUI.Reflect
blockWhile :: GObjectClass w => Maybe (ConnectId w) -> IO () -> IO ()

-- | reflect view mode UI for current canvas info
reflectViewModeUI :: MainCoroutine ()
reflectPenModeUI :: MainCoroutine ()
reflectPenColorUI :: MainCoroutine ()
reflectPenWidthUI :: MainCoroutine ()
reflectUIComponent :: Simple Lens UIComponentSignalHandler (Maybe (ConnectId RadioAction)) -> String -> (HoodleState -> Maybe Int) -> MainCoroutine ()


module Hoodle.Accessor

-- | update state
updateXState :: (HoodleState -> MainCoroutine HoodleState) -> MainCoroutine ()
getPenType :: MainCoroutine PenType
getCurrentPageCurr :: MainCoroutine (Page EditMode)
getCurrentPageCvsId :: CanvasId -> MainCoroutine (Page EditMode)
getCurrentPageEitherFromHoodleModeState :: ViewMode a => CanvasInfo a -> HoodleModeState -> Either (Page EditMode) (Page SelectMode)
rItmsInCurrLyr :: MainCoroutine [RItem]
otherCanvas :: HoodleState -> [Int]
changeCurrentCanvasId :: CanvasId -> MainCoroutine HoodleState

-- | apply an action to all canvases
applyActionToAllCVS :: (CanvasId -> MainCoroutine ()) -> MainCoroutine ()
printViewPortBBox :: CanvasId -> MainCoroutine ()
printViewPortBBoxAll :: MainCoroutine ()
printViewPortBBoxCurr :: MainCoroutine ()
printModes :: CanvasId -> MainCoroutine ()
printCanvasMode :: CanvasId -> CanvasInfoBox -> IO ()
printModesAll :: MainCoroutine ()
getCanvasGeometryCvsId :: CanvasId -> HoodleState -> IO CanvasGeometry
getGeometry4CurrCvs :: HoodleState -> IO CanvasGeometry

-- | update flag in HoodleState when corresponding toggle UI changed
updateFlagFromToggleUI :: String -> Simple Lens HoodleState Bool -> MainCoroutine Bool

-- | set toggle UI button to the corresponding HoodleState
setToggleUIForFlag :: String -> Simple Lens HoodleState Bool -> HoodleState -> IO Bool


module Hoodle.Coroutine.Draw
data DrawingFunctionSet
DrawingFunctionSet :: DrawingFunction SinglePage EditMode -> DrawingFunction SinglePage SelectMode -> DrawingFunction ContinuousPage EditMode -> DrawingFunction ContinuousPage SelectMode -> DrawingFunctionSet
singleEditDraw :: DrawingFunctionSet -> DrawingFunction SinglePage EditMode
singleSelectDraw :: DrawingFunctionSet -> DrawingFunction SinglePage SelectMode
contEditDraw :: DrawingFunctionSet -> DrawingFunction ContinuousPage EditMode
contSelectDraw :: DrawingFunctionSet -> DrawingFunction ContinuousPage SelectMode
invalidateGeneral :: CanvasId -> Maybe BBox -> DrawFlag -> DrawingFunction SinglePage EditMode -> DrawingFunction SinglePage SelectMode -> DrawingFunction ContinuousPage EditMode -> DrawingFunction ContinuousPage SelectMode -> MainCoroutine ()
invalidateOther :: MainCoroutine ()

-- | invalidate clear
invalidate :: CanvasId -> MainCoroutine ()
invalidateInBBox :: Maybe BBox -> DrawFlag -> CanvasId -> MainCoroutine ()
invalidateAllInBBox :: Maybe BBox -> DrawFlag -> MainCoroutine ()
invalidateAll :: MainCoroutine ()

-- | Invalidate Current canvas
invalidateCurrent :: MainCoroutine ()

-- | Drawing temporary gadgets
invalidateTemp :: CanvasId -> Surface -> Render () -> MainCoroutine ()

-- | Drawing temporary gadgets with coordinate based on base page
invalidateTempBasePage :: CanvasId -> Surface -> PageNum -> Render () -> MainCoroutine ()

-- | check current canvas id and new active canvas id and invalidate if
--   it's changed.
chkCvsIdNInvalidate :: CanvasId -> MainCoroutine ()
waitSomeEvent :: (UserEvent -> Bool) -> MainCoroutine UserEvent


module Hoodle.Coroutine.Commit

-- | save state and add the current status in undo history
commit :: HoodleState -> MainCoroutine ()
commit_ :: MainCoroutine ()
undo :: MainCoroutine ()
redo :: MainCoroutine ()
clearUndoHistory :: MainCoroutine ()


module Hoodle.Coroutine.Pen
createTempRender :: PageNum -> CanvasGeometry -> Page EditMode -> a -> MainCoroutine (TempRender a)

-- | page switch if pen click a page different than the current page
penPageSwitch :: PageNum -> MainCoroutine CanvasInfoBox

-- | Common Pen Work starting point
commonPenStart :: (forall a. ViewMode a => CanvasInfo a -> PageNum -> CanvasGeometry -> (Double, Double) -> MainCoroutine ()) -> CanvasId -> PointerCoord -> MainCoroutine ()

-- | enter pen drawing mode
penStart :: CanvasId -> PointerCoord -> MainCoroutine ()

-- | main pen coordinate adding process | now being changed
penProcess :: CanvasId -> PageNum -> CanvasGeometry -> TempRender (Seq (Double, Double, Double)) -> ((Double, Double), Double) -> MainCoroutine (Seq (Double, Double, Double))
skipIfNotInSamePage :: Monad m => PageNum -> CanvasGeometry -> PointerCoord -> m a -> ((PointerCoord, (Double, Double)) -> m a) -> m a
switchActionEnteringDiffPage :: Monad m => PageNum -> CanvasGeometry -> PointerCoord -> m a -> (PageNum -> (PageNum, PageCoordinate) -> m a) -> (PageNum -> (PageNum, PageCoordinate) -> m a) -> m a

-- | in page action
penMoveAndUpOnly :: Monad m => UserEvent -> PageNum -> CanvasGeometry -> m a -> ((PointerCoord, (Double, Double)) -> m a) -> (PointerCoord -> m a) -> m a
penMoveAndUpInterPage :: Monad m => UserEvent -> PageNum -> CanvasGeometry -> m a -> (PageNum -> (PageNum, PageCoordinate) -> m a) -> (PointerCoord -> m a) -> m a

-- | process action when last time was before time diff limit, otherwise
--   just do default action.
processWithTimeInterval :: (Monad m, MonadIO m) => NominalDiffTime -> (UTCTime -> m a) -> (UTCTime -> m a) -> UTCTime -> m a
processWithDefTimeInterval :: (Monad m, MonadIO m) => (UTCTime -> m a) -> (UTCTime -> m a) -> UTCTime -> m a


module Hoodle.Coroutine.Highlighter
highlighterStart :: CanvasId -> PointerCoord -> MainCoroutine ()


module Hoodle.Coroutine.Eraser
eraserStart :: CanvasId -> PointerCoord -> MainCoroutine ()
eraserProcess :: CanvasId -> PageNum -> CanvasGeometry -> [RItem] -> (Double, Double) -> MainCoroutine ()


module Hoodle.Coroutine.Scroll
moveViewPortBy :: MainCoroutine () -> CanvasId -> ((Double, Double) -> (Double, Double)) -> MainCoroutine ()
adjustScrollbarWithGeometryCvsId :: CanvasId -> MainCoroutine ()
adjustScrollbarWithGeometryCurrent :: MainCoroutine ()
hscrollBarMoved :: CanvasId -> Double -> MainCoroutine ()
vscrollBarMoved :: CanvasId -> Double -> MainCoroutine ()
vscrollStart :: CanvasId -> Double -> MainCoroutine ()
vscrollMove :: CanvasId -> Double -> MainCoroutine ()
smoothScroll :: CanvasId -> CanvasGeometry -> Double -> Double -> MainCoroutine ()


module Hoodle.Coroutine.Layer
layerAction :: (HoodleModeState -> Int -> Page EditMode -> MainCoroutine HoodleModeState) -> MainCoroutine HoodleState
makeNewLayer :: MainCoroutine ()
gotoNextLayer :: MainCoroutine ()
gotoPrevLayer :: MainCoroutine ()
gotoLayerAt :: Int -> MainCoroutine ()
deleteCurrentLayer :: MainCoroutine ()
startGotoLayerAt :: MainCoroutine ()


-- | Layer widget
module Hoodle.Widget.Layer
data LWAction
Close :: LWAction
ToggleShowContent :: LWAction
Move :: (CanvasCoordinate, CanvasCoordinate) -> LWAction
checkPointerInLayer :: ViewMode a => (CanvasId, CanvasInfo a, CanvasGeometry) -> PointerCoord -> Maybe LWAction
startLayerWidget :: ViewMode a => (CanvasId, CanvasInfo a, CanvasGeometry) -> LWAction -> MainCoroutine ()

-- | main event loop for layer widget
manipulateLW :: CanvasId -> CanvasGeometry -> (Surface, Surface) -> CanvasCoordinate -> CanvasCoordinate -> UTCTime -> MainCoroutine ()
moveLayerWidget :: CanvasId -> CanvasGeometry -> (Surface, Surface) -> CanvasCoordinate -> CanvasCoordinate -> PointerCoord -> MainCoroutine ()
toggleLayer :: CanvasId -> MainCoroutine ()


module Hoodle.Coroutine.Page

-- | change page of current canvas using a modify function
changePage :: (Int -> Int) -> MainCoroutine ()
changePageInHoodleModeState :: BackgroundStyle -> Int -> HoodleModeState -> (Bool, Int, Page EditMode, HoodleModeState)
canvasZoomUpdateGenRenderCvsId :: MainCoroutine () -> CanvasId -> Maybe ZoomMode -> Maybe (PageNum, PageCoordinate) -> MainCoroutine ()
canvasZoomUpdateCvsId :: CanvasId -> Maybe ZoomMode -> MainCoroutine ()
canvasZoomUpdateBufAll :: MainCoroutine ()
canvasZoomUpdateAll :: MainCoroutine ()
canvasZoomUpdate :: Maybe ZoomMode -> MainCoroutine ()
pageZoomChange :: ZoomMode -> MainCoroutine ()
pageZoomChangeRel :: ZoomModeRel -> MainCoroutine ()
newPage :: AddDirection -> MainCoroutine ()

-- | delete current page of current canvas
deleteCurrentPage :: MainCoroutine ()

-- | delete designated page
deletePageInHoodle :: Hoodle EditMode -> PageNum -> IO (Hoodle EditMode)


module Hoodle.Coroutine.Mode
modeChange :: UserEvent -> MainCoroutine ()
viewModeChange :: UserEvent -> MainCoroutine ()


-- | Clipboard action while dealing with selection
module Hoodle.Coroutine.Select.Clipboard
deleteSelection :: MainCoroutine ()
cutSelection :: MainCoroutine ()
copySelection :: MainCoroutine ()
getClipFromGtk :: MainCoroutine (Maybe [Item])
pasteToSelection :: MainCoroutine ()


module Hoodle.Coroutine.TextInput
textInputDialog :: MainCoroutine (Maybe String)
textInput :: MainCoroutine ()
svgInsert :: String -> (ByteString, BBox) -> MainCoroutine ()
convertLinkFromSimpleToDocID :: Link -> IO (Maybe Link)
linkInsert :: ByteString -> (ByteString, FilePath) -> String -> (ByteString, BBox) -> MainCoroutine ()
makePangoTextSVG :: String -> IO (ByteString, BBox)


module Hoodle.Coroutine.File
okMessageBox :: String -> MainCoroutine ()
okCancelMessageBox :: String -> MainCoroutine Bool
fileChooser :: FileChooserAction -> Maybe String -> MainCoroutine (Maybe FilePath)
askIfSave :: MainCoroutine () -> MainCoroutine ()
askIfOverwrite :: FilePath -> MainCoroutine () -> MainCoroutine ()
fileNew :: MainCoroutine ()
fileSave :: MainCoroutine ()

-- | interleaving a monadic action between each pair of subsequent actions
sequence1_ :: Monad m => m () -> [m ()] -> m ()
renderjob :: RHoodle -> FilePath -> IO ()
fileExport :: MainCoroutine ()
fileStartSync :: MainCoroutine ()

-- | need to be merged with ContextMenuEventSVG
exportCurrentPageAsSVG :: MainCoroutine ()
fileLoad :: FilePath -> MainCoroutine ()
resetHoodleBuffers :: MainCoroutine ()

-- | main coroutine for open a file
fileOpen :: MainCoroutine ()

-- | main coroutine for save as
fileSaveAs :: MainCoroutine ()

-- | main coroutine for open a file
fileReload :: MainCoroutine ()
fileExtensionInvalid :: (String, String) -> MainCoroutine ()
fileAnnotatePDF :: MainCoroutine ()
fileLoadPNGorJPG :: MainCoroutine ()
insertItemAt :: Maybe (PageNum, PageCoordinate) -> RItem -> MainCoroutine ()
makeNewItemImage :: Bool -> FilePath -> IO Item
fileLoadSVG :: MainCoroutine ()
fileLaTeX :: MainCoroutine ()
askQuitProgram :: MainCoroutine ()
embedPredefinedImage :: MainCoroutine ()

-- | this is temporary. I will remove it
embedPredefinedImage2 :: MainCoroutine ()

-- | this is temporary. I will remove it
embedPredefinedImage3 :: MainCoroutine ()
embedAllPDFBackground :: MainCoroutine ()
fileVersionSave :: MainCoroutine ()
fileShowRevisions :: MainCoroutine ()
fileShowUUID :: MainCoroutine ()


module Hoodle.Coroutine.ContextMenu
processContextMenu :: ContextMenuEvent -> MainCoroutine ()
linkSelectionWithFile :: FilePath -> MainCoroutine ()
exportCurrentSelectionAsSVG :: [RItem] -> BBox -> MainCoroutine ()
exportCurrentSelectionAsPDF :: [RItem] -> BBox -> MainCoroutine ()
showContextMenu :: (PageNum, (Double, Double)) -> MainCoroutine ()


-- | selection-related coroutines
module Hoodle.Coroutine.Select

-- | For Selection mode from pen mode with 2nd pen button
dealWithOneTimeSelectMode :: MainCoroutine () -> MainCoroutine () -> MainCoroutine ()

-- | main mouse pointer click entrance in rectangular selection mode.
--   choose either starting new rectangular selection or move previously
--   selected selection. (dev note: need to be refactored with
--   selectLassoStart)
selectRectStart :: PenButton -> CanvasId -> PointerCoord -> MainCoroutine ()
newSelectRectangle :: CanvasId -> PageNum -> CanvasGeometry -> [RItem] -> (Double, Double) -> ((Double, Double), UTCTime) -> TempSelection -> MainCoroutine ()

-- | prepare for moving selection
startMoveSelect :: CanvasId -> PageNum -> CanvasGeometry -> ((Double, Double), UTCTime) -> Page SelectMode -> MainCoroutine ()
moveSelect :: CanvasId -> PageNum -> CanvasGeometry -> (Double, Double) -> ((Double, Double), UTCTime) -> TempRender ItmsNImg -> MainCoroutine ()

-- | prepare for resizing selection
startResizeSelect :: Handle -> CanvasId -> PageNum -> CanvasGeometry -> BBox -> ((Double, Double), UTCTime) -> Page SelectMode -> MainCoroutine ()
resizeSelect :: Handle -> CanvasId -> PageNum -> CanvasGeometry -> BBox -> ((Double, Double), UTCTime) -> TempRender ItmsNImg -> MainCoroutine ()
selectPenColorChanged :: PenColor -> MainCoroutine ()
selectPenWidthChanged :: Double -> MainCoroutine ()

-- | main mouse pointer click entrance in lasso selection mode. choose
--   either starting new rectangular selection or move previously selected
--   selection.
selectLassoStart :: PenButton -> CanvasId -> PointerCoord -> MainCoroutine ()
newSelectLasso :: ViewMode a => CanvasInfo a -> PageNum -> CanvasGeometry -> [RItem] -> (Double, Double) -> ((Double, Double), UTCTime) -> Seq (Double, Double) -> TempSelection -> MainCoroutine ()


module Hoodle.Coroutine.Link
makeTextSVGFromStringAt :: String -> CanvasId -> HoodleState -> CanvasCoordinate -> IO (ByteString, BBox)
notifyLink :: CanvasId -> PointerCoord -> MainCoroutine ()

-- | got a link address (or embedded image) from drag and drop
gotLink :: Maybe String -> (Int, Int) -> MainCoroutine ()
addLink :: MainCoroutine ()


module Hoodle.Coroutine.VerticalSpace
splitPageByHLine :: Double -> Page EditMode -> ([RItem], Page EditMode, SeqZipper RItemHitted)
verticalSpaceStart :: CanvasId -> PointerCoord -> MainCoroutine ()
addNewPageAndMoveBelow :: (PageNum, SeqZipper RItemHitted, BBox) -> MainCoroutine ()
moveBelowToNewPage :: (PageNum, SeqZipper RItemHitted, BBox) -> Hoodle EditMode -> Hoodle EditMode
verticalSpaceProcess :: CanvasId -> CanvasGeometry -> (BBox, SeqZipper RItemHitted, PageNum, Page EditMode) -> (Double, Double) -> (Surface, Surface, Surface) -> UTCTime -> MainCoroutine ()


module Hoodle.Coroutine.Window

-- | canvas configure with general zoom update func
canvasConfigureGenUpdate :: MainCoroutine () -> CanvasId -> CanvasDimension -> MainCoroutine ()
doCanvasConfigure :: CanvasId -> CanvasDimension -> MainCoroutine ()
eitherSplit :: SplitType -> MainCoroutine ()
deleteCanvas :: MainCoroutine ()
paneMoveStart :: MainCoroutine ()

-- | not yet implemented?
paneMoved :: MainCoroutine ()
fullScreen :: MainCoroutine ()


-- | Pan-Zoom widget drawing and action
module Hoodle.Widget.PanZoom
data PanZoomMode
Moving :: PanZoomMode
Zooming :: PanZoomMode
Panning :: Bool -> PanZoomMode
data PanZoomTouch
TouchMode :: PanZoomTouch
PenMode :: PanZoomTouch
checkPointerInPanZoom :: ViewMode a => (CanvasId, CanvasInfo a, CanvasGeometry) -> PointerCoord -> Maybe (Maybe (PanZoomMode, (CanvasCoordinate, CanvasCoordinate)))
startPanZoomWidget :: ViewMode a => PanZoomTouch -> (CanvasId, CanvasInfo a, CanvasGeometry) -> Maybe (PanZoomMode, (CanvasCoordinate, CanvasCoordinate)) -> MainCoroutine ()
findZoomXform :: Dimension -> ((Double, Double), (Double, Double), (Double, Double)) -> (Double, (Double, Double))
findPanXform :: Dimension -> ((Double, Double), (Double, Double)) -> (Double, Double)

-- | manipulate Pan-Zoom widget until released when grabbing the widget
manipulatePZW :: (PanZoomTouch, PanZoomMode) -> CanvasId -> CanvasGeometry -> (Surface, Surface) -> CanvasCoordinate -> CanvasCoordinate -> UTCTime -> MainCoroutine ()
movingRender :: PanZoomMode -> CanvasId -> CanvasGeometry -> (Surface, Surface) -> CanvasCoordinate -> CanvasCoordinate -> PointerCoord -> MainCoroutine ()
togglePanZoom :: CanvasId -> MainCoroutine ()
touchStart :: CanvasId -> PointerCoord -> MainCoroutine ()
toggleTouch :: MainCoroutine ()
instance Show PanZoomTouch
instance Eq PanZoomTouch
instance Ord PanZoomTouch


module Hoodle.Widget.Dispatch
widgetCheckPen :: CanvasId -> PointerCoord -> MainCoroutine () -> MainCoroutine ()


module Hoodle.Coroutine.Default
initCoroutine :: DeviceList -> Window -> Maybe FilePath -> Maybe Hook -> Int -> (Bool, Bool, Bool) -> Statusbar -> IO (EventVar, HoodleState, UIManager, VBox)

-- | initialization according to the setting
initialize :: AllEvent -> MainCoroutine ()
guiProcess :: AllEvent -> MainCoroutine ()
dispatchMode :: MainCoroutine ()
viewAppendMode :: MainCoroutine ()
disableTouch :: MainCoroutine ()
selectMode :: MainCoroutine ()
defaultEventProcess :: UserEvent -> MainCoroutine ()
menuEventProcess :: MenuEvent -> MainCoroutine ()
colorPick :: MainCoroutine ()
colorConvert :: Color -> PenColor
colorPickerBox :: String -> MainCoroutine (Maybe PenColor)


module Hoodle.Coroutine


module Hoodle.GUI
startGUI :: Maybe FilePath -> Maybe Hook -> IO ()
