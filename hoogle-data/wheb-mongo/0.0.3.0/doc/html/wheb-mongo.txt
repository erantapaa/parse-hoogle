-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | MongoDB plugin for Wheb
--   
--   Wheb plugin for MongoDB.
--   
--   <ul>
--   <li>Implements SessionBackend and AuthBackend instances using MongoDB
--   and Wheb.</li>
--   <li>Creates simple interface for arbitrary MongoDB actions using
--   <a>Wheb</a></li>
--   <li>Creates simple interface for arbitrary MongoDB actions using
--   <a>mongoDB</a></li>
--   </ul>
--   
--   For a complete example, see the examples folder at <a>github</a>
--   
--   You can override the collection names for the Auth and Session
--   documents by using <a>addSetting</a> and setting keys for
--   "session-collection" and "auth-collection"
--   
--   <pre>
--   opts &lt;- generateOptions $ do
--      addSetting "session-collection" "my-collection"
--   </pre>
--   
--   Reimplimentation of official example below. Use with language
--   extensions <i>OvererloadedStrings</i> &amp;
--   <i>ExtendedDefaultRules</i>.
--   
--   <pre>
--   import qualified Data.Text.Lazy as T
--   
--   import           Web.Wheb
--   import           Web.Wheb.Plugins.Mongo
--   
--   data MyApp = MyApp MongoContainer
--   data MyRequestState = MyRequestState
--   
--   instance MongoApp MyApp where
--       getMongoContainer (MyApp mc) = mc
--   
--   homePage :: WhebHandler MyApp MyRequestState
--   homePage = do
--       teams &lt;- runAction $ rest =&lt;&lt; find (select [] "team")
--       text $ T.intercalate " | " $ map spack teams
--   
--   main :: IO ()
--   main = do
--     opts &lt;- generateOptions $ do
--       addGET "." rootPat $ homePage
--       mongo &lt;- initMongo "127.0.0.1:27017" "master"
--       return (MyApp mongo, MyRequestState)
--   
--     runRawHandler opts $ do
--       runAction $ do
--           delete (select [] "team")
--           insertMany "team" [
--               ["name" =: "Yankees", "home" =: ["city" =: "New York", "state" =: "NY"], "league" =: "American"],
--               ["name" =: "Mets", "home" =: ["city" =: "New York", "state" =: "NY"], "league" =: "National"],
--               ["name" =: "Phillies", "home" =: ["city" =: "Philadelphia", "state" =: "PA"], "league" =: "National"],
--               ["name" =: "Red Sox", "home" =: ["city" =: "Boston", "state" =: "MA"], "league" =: "American"] ]
--   
--     runWhebServer opts
--   </pre>
@package wheb-mongo
@version 0.0.3.0


-- | Basic implementation of MongoDB connection.
--   
--   Adds default instances for <a>SessionApp</a> and <a>AuthApp</a> for
--   <a>MongoApp</a>.
module Web.Wheb.Plugins.Mongo

-- | Run a MongoDB Action Monad in WhebT
runAction :: (MongoApp g, MonadIO m) => Action IO a -> WhebT g s m a

-- | Initialize mongo with "host:post" and default database.
initMongo :: Text -> Text -> InitM g s m MongoContainer

-- | Push an error from Mongo to a 500 Error.
catchResult :: MonadIO m => IO b -> WhebT g s m b
class MongoApp a
getMongoContainer :: MongoApp a => a -> MongoContainer
data MongoContainer
instance AuthBackend MongoContainer
instance SessionBackend MongoContainer
instance MongoApp a => AuthApp a
instance MongoApp a => SessionApp a
