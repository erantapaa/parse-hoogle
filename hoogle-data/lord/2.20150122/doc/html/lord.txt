-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A command line interface to online radios.
--   
--   A unified command line interface to several online radios, use mpd
--   (<a>http://musicpd.org</a>) as backend by default. Will fallback to
--   mplayer (<a>http://www.mplayerhq.hu</a>) when mpd is unavailable.
--   
--   Supported radios:
--   
--   <ul>
--   <li><a>http://8tracks.com</a></li>
--   <li><a>http://cmd.fm</a></li>
--   <li><a>http://radioreddit.com</a></li>
--   <li><a>http://douban.fm</a></li>
--   <li><a>http://jing.fm</a></li>
--   </ul>
--   
--   Commands:
--   
--   <pre>
--   lord -h
--   lord status
--   lord kill
--   
--   lord 8tracks listen [&lt;mix_id&gt; | &lt;mix_url&gt;] [--no-daemon]
--   lord 8tracks search &lt;keywords&gt;
--   lord 8tracks [featured | trending | newest]
--   
--   lord cmd listen &lt;genre&gt; [--no-daemon]
--   lord cmd genres
--   
--   lord douban listen [&lt;channel_id&gt; | &lt;album_url&gt; | &lt;musician_url&gt; | &lt;musician_name&gt; | &lt;programme_url&gt;] [--no-daemon]
--   lord douban search &lt;keywords&gt;
--   lord douban [hot | trending]
--   
--   lord jing listen &lt;keywords&gt; [--no-daemon]
--   
--   lord reddit listen &lt;genre&gt; [--no-daemon]
--   lord reddit genres
--   </pre>
@package lord
@version 2.20150122

module Web.Radio.EightTracks.Explore
data Mix
Mix :: Int -> String -> String -> String -> String -> Int -> Int -> String -> Int -> Int -> Mix
id :: Mix -> Int
path :: Mix -> String
web_path :: Mix -> String
name :: Mix -> String
description :: Mix -> String
plays_count :: Mix -> Int
likes_count :: Mix -> Int
tag_list_cache :: Mix -> String
duration :: Mix -> Int
tracks_count :: Mix -> Int
data MixSet
MixSet :: [Mix] -> String -> String -> MixSet
mixes :: MixSet -> [Mix]
smart_id :: MixSet -> String
smart_type :: MixSet -> String
data MixExplore
MixExplore :: MixSet -> String -> MixExplore
mix_set :: MixExplore -> MixSet
status :: MixExplore -> String
instance Show Mix
instance Generic Mix
instance Show MixSet
instance Generic MixSet
instance Show MixExplore
instance Generic MixExplore
instance Datatype D1Mix
instance Constructor C1_0Mix
instance Selector S1_0_0Mix
instance Selector S1_0_1Mix
instance Selector S1_0_2Mix
instance Selector S1_0_3Mix
instance Selector S1_0_4Mix
instance Selector S1_0_5Mix
instance Selector S1_0_6Mix
instance Selector S1_0_7Mix
instance Selector S1_0_8Mix
instance Selector S1_0_9Mix
instance Datatype D1MixSet
instance Constructor C1_0MixSet
instance Selector S1_0_0MixSet
instance Selector S1_0_1MixSet
instance Selector S1_0_2MixSet
instance Datatype D1MixExplore
instance Constructor C1_0MixExplore
instance Selector S1_0_0MixExplore
instance Selector S1_0_1MixExplore
instance FromJSON MixExplore
instance FromJSON MixSet
instance FromJSON Mix


-- | A generic interface to online radio services
module Web.Radio
data SongMeta
SongMeta :: String -> String -> String -> SongMeta
artist :: SongMeta -> String
album :: SongMeta -> String
title :: SongMeta -> String
class FromJSON a => Radio a where data family Param a :: * reportRequired _ = False report _ _ = return () reportLoop param x = do { time <- liftM stTime <$> withMPD status; case time of { Right (Just (elapsed, _)) -> if elapsed < 30 then threadDelay (5 * 1000000) >> reportLoop param x else report param x Right Nothing -> return () Left err -> print err } } play logger reqData xxs = do { st <- withMPD status; case st of { Right _ -> playWithMPD logger reqData xxs Left _ -> playWithMplayer logger reqData xxs } }
parsePlaylist :: Radio a => Value -> [a]
getPlaylist :: Radio a => Param a -> IO [a]
songUrl :: Radio a => Param a -> a -> IO String
songMeta :: Radio a => a -> SongMeta
tagged :: Radio a => a -> Bool
reportRequired :: Radio a => a -> Bool
report :: Radio a => Param a -> a -> IO ()
reportLoop :: Radio a => Param a -> a -> IO ()
play :: Radio a => LoggerSet -> Param a -> [a] -> IO ()
class (Radio a, ToJSON (Param a), ToJSON (Config a)) => NeedLogin a where data family Config a :: * login keywords = do { hSetBuffering stdout NoBuffering; hSetEcho stdin True; putStrLn "Please Log in"; putStr "Email: "; email <- getLine; putStr "Password: "; hSetEcho stdin False; pwd <- getLine; hSetEcho stdin True; putStrLn ""; mtoken <- createSession keywords email pwd; case mtoken of { Just tok -> do { saveToken tok; return tok } Nothing -> do { putStrLn "ERROR: Invalid email or password!"; login keywords } } } saveToken tok = do { yml <- getConfig; exist <- doesFileExist yml; bs <- if exist then readFile yml else return ""; let config = mkConfig tok; writeFile yml $ append bs (encode config); putStrLn $ "Your token has been saved to " ++ yml } readToken selector keywords = do { yml <- getConfig; exist <- doesFileExist yml; if exist then do { conf <- decodeFile yml; case conf of { Nothing -> error $ "Invalid YAML file: " ++ show conf Just c -> case fromJSON c of { Success tok -> return $ Just $ mkParam (selector tok) keywords Error err -> do { print $ "Parse token failed: " ++ show err; return Nothing } } } } else return Nothing }
login :: NeedLogin a => String -> IO (Param a)
createSession :: NeedLogin a => String -> String -> String -> IO (Maybe (Param a))
mkConfig :: NeedLogin a => Param a -> Config a
saveToken :: NeedLogin a => Param a -> IO ()
mkParam :: NeedLogin a => Param a -> String -> Param a
readToken :: (NeedLogin a, FromJSON (Config a)) => (Config a -> Param a) -> String -> IO (Maybe (Param a))
getLordDir :: IO FilePath
getPidFile :: IO FilePath
getLogFile :: IO FilePath
getStateFile :: IO FilePath
writeLog :: LoggerSet -> String -> IO ()
instance Show SongMeta


-- | Module for interfacing <a>http://cmd.fm</a>
module Web.Radio.Cmd
data Cmd
Cmd :: Int -> String -> String -> String -> Int -> String -> String -> String -> String -> Cmd
sc_id :: Cmd -> Int
title :: Cmd -> String
artwork_url :: Cmd -> String
description :: Cmd -> String
duration :: Cmd -> Int
tag_list :: Cmd -> String
waveform_url :: Cmd -> String
stream_url :: Cmd -> String
main_type :: Cmd -> String
genres :: IO [String]
pprGenres :: [String] -> IO ()
instance Show Cmd
instance Generic Cmd
instance Datatype D1Cmd
instance Constructor C1_0Cmd
instance Selector S1_0_0Cmd
instance Selector S1_0_1Cmd
instance Selector S1_0_2Cmd
instance Selector S1_0_3Cmd
instance Selector S1_0_4Cmd
instance Selector S1_0_5Cmd
instance Selector S1_0_6Cmd
instance Selector S1_0_7Cmd
instance Selector S1_0_8Cmd
instance Radio Cmd
instance FromJSON Cmd


-- | Module for interfacing <a>http://douban.fm</a>
module Web.Radio.Douban
data Douban
Douban :: String -> String -> Maybe String -> String -> String -> String -> String -> String -> String -> String -> Douban
picture :: Douban -> String
albumtitle :: Douban -> String
ssid :: Douban -> Maybe String
album :: Douban -> String
artist :: Douban -> String
url :: Douban -> String
title :: Douban -> String
subtype :: Douban -> String
sid :: Douban -> String
aid :: Douban -> String
data Channel
Channel :: String -> String -> Int -> String -> String -> Int -> [String] -> Channel
intro :: Channel -> String
name :: Channel -> String
song_num :: Channel -> Int
banner :: Channel -> String
cover :: Channel -> String
id :: Channel -> Int
hot_songs :: Channel -> [String]
douban :: String -> Param Douban

-- | Return a list of hot channels.
hot :: IO [Channel]

-- | Return a list of up trending channels.
trending :: IO [Channel]

-- | Return a list of channels matching provided keywords.
search :: String -> IO [Channel]
pprChannels :: [Channel] -> IO ()
instance Show Douban
instance Eq Channel
instance Show Channel
instance FromJSON Channel
instance Radio Douban
instance FromJSON Douban


-- | Module for interfacing <a>http://8tracks.com</a>
--   
--   API documentation: <a>http://8tracks.com/developers/api_v3</a>
module Web.Radio.EightTracks
data EightTracks
EightTracks :: Int -> String -> String -> String -> Maybe String -> String -> EightTracks
id :: EightTracks -> Int
track_file_stream_url :: EightTracks -> String
name :: EightTracks -> String
performer :: EightTracks -> String
release_name :: EightTracks -> Maybe String
url :: EightTracks -> String

-- | Response from http:/<i>8tracks.com</i>sets/new.json <a>play_token</a>
--   is the value of interest
data PlaySession
PlaySession :: String -> String -> Maybe String -> Maybe String -> Int -> PlaySession
play_token :: PlaySession -> String
status :: PlaySession -> String
errors :: PlaySession -> Maybe String
notices :: PlaySession -> Maybe String
api_version :: PlaySession -> Int

-- | Response from <i>play.json </i>next.json <a>track</a> is the value of
--   interest
data PlayResponse
PlayResponse :: MixSet -> String -> PlayResponse
play_set :: PlayResponse -> MixSet
play_status :: PlayResponse -> String
data MixSet
MixSet :: Bool -> Bool -> Bool -> Bool -> EightTracks -> MixSet
at_beginning :: MixSet -> Bool
at_last_track :: MixSet -> Bool
at_end :: MixSet -> Bool
skip_allowed :: MixSet -> Bool
track :: MixSet -> EightTracks

-- | Response from http:/<i>8tracks.com</i>mixes/14.json or
--   http:/<i>8tracks.com</i>dp/electrominimalicious.json <a>info_mix</a>
--   is the value of interest
data MixInfo
MixInfo :: Mix -> String -> MixInfo
info_mix :: MixInfo -> Mix
info_status :: MixInfo -> String
getMixId :: String -> IO Int
featured :: IO [Mix]
newest :: IO [Mix]
trending :: IO [Mix]
search :: String -> IO [Mix]
pprMixes :: [Mix] -> IO ()
type ETParam = Param EightTracks
eight :: Config EightTracks -> ETParam
userName :: Param EightTracks -> String
instance Show PlaySession
instance Generic PlaySession
instance Show EightTracks
instance Generic EightTracks
instance Show MixSet
instance Generic MixSet
instance Show PlayResponse
instance Generic PlayResponse
instance Show MixInfo
instance Generic MixInfo
instance Generic (Config EightTracks)
instance Show (Param EightTracks)
instance Generic (Param EightTracks)
instance Datatype D1PlaySession
instance Constructor C1_0PlaySession
instance Selector S1_0_0PlaySession
instance Selector S1_0_1PlaySession
instance Selector S1_0_2PlaySession
instance Selector S1_0_3PlaySession
instance Selector S1_0_4PlaySession
instance Datatype D1EightTracks
instance Constructor C1_0EightTracks
instance Selector S1_0_0EightTracks
instance Selector S1_0_1EightTracks
instance Selector S1_0_2EightTracks
instance Selector S1_0_3EightTracks
instance Selector S1_0_4EightTracks
instance Selector S1_0_5EightTracks
instance Datatype D1MixSet
instance Constructor C1_0MixSet
instance Selector S1_0_0MixSet
instance Selector S1_0_1MixSet
instance Selector S1_0_2MixSet
instance Selector S1_0_3MixSet
instance Selector S1_0_4MixSet
instance Datatype D1PlayResponse
instance Constructor C1_0PlayResponse
instance Selector S1_0_0PlayResponse
instance Selector S1_0_1PlayResponse
instance Datatype D1MixInfo
instance Constructor C1_0MixInfo
instance Selector S1_0_0MixInfo
instance Selector S1_0_1MixInfo
instance Datatype D1R:ConfigEightTracks
instance Constructor C1_0R:ConfigEightTracks
instance Selector S1_0_0R:ConfigEightTracks
instance Datatype D1R:ParamEightTracks
instance Constructor C1_0R:ParamEightTracks
instance Selector S1_0_0R:ParamEightTracks
instance Selector S1_0_1R:ParamEightTracks
instance Selector S1_0_2R:ParamEightTracks
instance Selector S1_0_3R:ParamEightTracks
instance ToJSON (Config EightTracks)
instance FromJSON (Config EightTracks)
instance NeedLogin EightTracks
instance ToJSON ETParam
instance FromJSON ETParam
instance Radio EightTracks
instance FromJSON MixInfo
instance FromJSON EightTracks
instance FromJSON MixSet
instance FromJSON PlayResponse
instance FromJSON PlaySession


-- | Module for interfacing <a>http://jing.fm</a>
module Web.Radio.Jing
data Jing
Jing :: Int -> Int -> String -> String -> String -> String -> Int -> String -> String -> Int -> Jing
abid :: Jing -> Int
aid :: Jing -> Int
an :: Jing -> String
atn :: Jing -> String
d :: Jing -> String
fid :: Jing -> String
fs :: Jing -> Int
mid :: Jing -> String
n :: Jing -> String
tid :: Jing -> Int
type JingParam = Param Jing
jing :: Config Jing -> JingParam
nick :: Param Jing -> String
instance Show Jing
instance Generic Jing
instance Show Usr
instance Generic (Config Jing)
instance Show (Param Jing)
instance Generic (Param Jing)
instance Datatype D1Jing
instance Constructor C1_0Jing
instance Selector S1_0_0Jing
instance Selector S1_0_1Jing
instance Selector S1_0_2Jing
instance Selector S1_0_3Jing
instance Selector S1_0_4Jing
instance Selector S1_0_5Jing
instance Selector S1_0_6Jing
instance Selector S1_0_7Jing
instance Selector S1_0_8Jing
instance Selector S1_0_9Jing
instance Datatype D1R:ConfigJing
instance Constructor C1_0R:ConfigJing
instance Selector S1_0_0R:ConfigJing
instance Datatype D1R:ParamJing
instance Constructor C1_0R:ParamJing
instance Selector S1_0_0R:ParamJing
instance Selector S1_0_1R:ParamJing
instance Selector S1_0_2R:ParamJing
instance Selector S1_0_3R:ParamJing
instance Selector S1_0_4R:ParamJing
instance Selector S1_0_5R:ParamJing
instance ToJSON (Config Jing)
instance FromJSON (Config Jing)
instance NeedLogin Jing
instance ToJSON JingParam
instance FromJSON JingParam
instance Radio Jing
instance FromJSON Usr
instance FromJSON Jing


-- | Module for interfacing <a>http://radioreddit.com</a>
module Web.Radio.Reddit
data Reddit
Reddit :: String -> String -> String -> Maybe String -> Reddit
title :: Reddit -> String
artist :: Reddit -> String
preview_url :: Reddit -> String
download_url :: Reddit -> Maybe String
genres :: IO [String]
pprGenres :: [String] -> IO ()
instance Show Reddit
instance Generic Reddit
instance Datatype D1Reddit
instance Constructor C1_0Reddit
instance Selector S1_0_0Reddit
instance Selector S1_0_1Reddit
instance Selector S1_0_2Reddit
instance Selector S1_0_3Reddit
instance Radio Reddit
instance FromJSON Reddit
