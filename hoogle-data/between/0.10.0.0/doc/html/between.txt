-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Function combinator "between" and derived combinators
--   
@package between
@version 0.10.0.0


-- | Implementation of strict <a>between</a> combinator and its variations.
--   For introductory documentation see module <a>Data.Function.Between</a>
--   and for lazy versions import <a>Data.Function.Between.Lazy</a> module.
--   
--   All functions in this module use strict (or should I say stricter?)
--   definition of function composition:
--   
--   <pre>
--   (f . g) x = f <a>$!</a> g <a>$!</a> x
--   </pre>
--   
--   <i>Since version 0.10.0.0.</i>
module Data.Function.Between.Strict

-- | Core combinator of this module and we build others on top of. It also
--   has an infix form <a>~@~</a> and flipped infix form <a>~@@~</a>.
--   
--   This function Defined as:
--   
--   <pre>
--   <a>between</a> f g -&gt; (f .) . (. g)
--   </pre>
--   
--   <i>Since version 0.10.0.0.</i>
between :: (c -> d) -> (a -> b) -> (b -> c) -> a -> d

-- | Infix variant of <a>between</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   fixity of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(~@~) :: (c -> d) -> (a -> b) -> (b -> c) -> a -> d

-- | Flipped variant of <a>~@~</a>, i.e. flipped infix variant of
--   <a>between</a>.
--   
--   Fixity is right associative and set to value 8, which is one less then
--   fixity of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(~@@~) :: (a -> b) -> (c -> d) -> (b -> c) -> a -> d

-- | As <a>~@~</a>, but first function is also parametrised with
--   <tt>a</tt>, hence the name <a>^@~</a>. Character <tt>^</tt> indicates
--   which argument is parametrised with additional argument.
--   
--   This function is defined as:
--   
--   <pre>
--   (f <a>^@~</a> g) h a -&gt; ((f <a>$!</a> a) <a>~@~</a> g)) h a
--   </pre>
--   
--   Fixity is left associative and set to value 8, which is one less then
--   fixity of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(^@~) :: (a -> c -> d) -> (a -> b) -> (b -> c) -> a -> d

-- | Flipped variant of <a>^@~</a>.
--   
--   Fixity is right associative and set to value 8, which is one less then
--   fixity of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(~@@^) :: (a -> b) -> (a -> c -> d) -> (b -> c) -> a -> d

-- | Pass additional argument to first two function arguments.
--   
--   This function is defined as:
--   
--   <pre>
--   (f <a>^@~</a> g) h a b -&gt; ((f <a>$!</a> a) <a>~@~</a> (g <a>$!</a> a)) h b
--   </pre>
--   
--   See also <a>^@~</a> to note the difference, most importantly that
--   <a>^@~</a> passes the same argument to all its functional arguments.
--   Since this function uses strict function composition and strict
--   application it is not so simple to define it in terms of other
--   combinators in this package and vice versa. See lazy <a>^@~</a> for
--   details.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(^@^) :: (a -> d -> e) -> (a -> b -> c) -> (c -> d) -> a -> b -> e

-- | Flipped variant of <a>^@^</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(^@@^) :: (a -> b -> c) -> (a -> d -> e) -> (c -> d) -> a -> b -> e

-- | Apply function <tt>g</tt> to each argument of binary function and
--   <tt>f</tt> to its result. In suffix "2l" the number is equal to arity
--   of the function it accepts as a third argument and character "l" is
--   for "left associative".
--   
--   <pre>
--   <a>between2l</a> f g = (f <a>~@~</a> g) <a>~@~</a> g
--   </pre>
--   
--   Interesting observation:
--   
--   <pre>
--   (\f g -&gt; <a>between2l</a> <a>id</a> g f) === <a>on</a>
--   </pre>
--   
--   <i>Since version 0.10.0.0.</i>
between2l :: (c -> d) -> (a -> b) -> (b -> b -> c) -> a -> a -> d

-- | Apply function <tt>g</tt> to each argument of ternary function and
--   <tt>f</tt> to its result. In suffix "3l" the number is equal to arity
--   of the function it accepts as a third argument and character "l" is
--   for "left associative".
--   
--   This function is defined as:
--   
--   <pre>
--   <a>between3l</a> f g = ((f <a>~@~</a> g) <a>~@~</a> g) <a>~@~</a> g
--   </pre>
--   
--   Alternatively it can be defined using <a>between2l</a>:
--   
--   <pre>
--   <a>between3l</a> f g = <a>between2l</a> f g <a>~@~</a> g
--   </pre>
--   
--   <i>Since version 0.10.0.0.</i>
between3l :: (c -> d) -> (a -> b) -> (b -> b -> b -> c) -> a -> a -> a -> d

-- | Convenience wrapper for:
--   
--   <pre>
--   \f g -&gt; <a>fmap</a> f <a>~@~</a> <a>fmap</a> g
--   </pre>
--   
--   Name of <a>&lt;~@~&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to both its arguments and then we apply <a>~@~</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(<~@~>) :: (Functor f, Functor g) => (c -> d) -> (a -> b) -> (f b -> g c) -> f a -> g d

-- | Flipped variant of <a>&lt;~@~&gt;</a>.
--   
--   Name of <a>&lt;~@@~&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to both its arguments and then we apply <a>~@@~</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(<~@@~>) :: (Functor f, Functor g) => (a -> b) -> (c -> d) -> (f b -> g c) -> f a -> g d

-- | Apply fmap to first argument of <a>~@~</a>. Dual to <a>~@~&gt;</a>
--   which applies <a>fmap</a> to second argument.
--   
--   Defined as:
--   
--   <pre>
--   f <a>&lt;~@~</a> g = <a>fmap</a> f <a>~@~</a> g
--   </pre>
--   
--   This function allows us to define lenses mostly for pair of functions
--   that form an isomorphism. See section <a>Constructing Lenses</a> for
--   details.
--   
--   Name of <a>&lt;~@~</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) argument and then we apply <a>~@~</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(<~@~) :: Functor f => (c -> d) -> (a -> b) -> (b -> f c) -> a -> f d

-- | Flipped variant of <a>&lt;~@~</a>.
--   
--   This function allows us to define lenses mostly for pair of functions
--   that form an isomorphism. See section <a>Constructing Lenses</a> for
--   details.
--   
--   Name of <a>~@@~&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) argument and then we apply
--   <a>~@@~</a>.
--   
--   Fixity is right associative and set to value 8, which is one less then
--   fixity of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(~@@~>) :: Functor f => (a -> b) -> (c -> d) -> (b -> f c) -> a -> f d

-- | Apply fmap to second argument of <a>~@~</a>. Dual to <a>&lt;~@~</a>
--   which applies <a>fmap</a> to first argument.
--   
--   Defined as:
--   
--   <pre>
--   f <a>~@~&gt;</a> g -&gt; f <a>~@~</a> <a>fmap</a> g
--   </pre>
--   
--   Name of <a>~@~&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) argument and then we apply <a>~@~</a>.
--   
--   Fixity is right associative and set to value 8, which is one less then
--   of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(~@~>) :: Functor f => (c -> d) -> (a -> b) -> (f b -> c) -> f a -> d

-- | Flipped variant of <a>~@~&gt;</a>.
--   
--   Name of <a>&lt;~@@~</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) argument and then we apply <a>~@@~</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   fixity of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(<~@@~) :: Functor f => (a -> b) -> (c -> d) -> (f b -> c) -> f a -> d

-- | Convenience wrapper for: <tt>\f g -&gt; <a>fmap</a> . f '^</tt>~' g@.
--   
--   This function has the same functionality as function
--   
--   <pre>
--   lens :: (s -&gt; a) -&gt; (s -&gt; b -&gt; t) -&gt; Lens s t a b
--   </pre>
--   
--   Which is defined in <a>lens package</a>. Only difference is that
--   arguments of <a>&lt;^@~</a> are flipped. See also section
--   <a>Constructing Lenses</a>.
--   
--   Name of <a>&lt;^@~</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) arguments and then we apply <a>^@~</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(<^@~) :: Functor f => (a -> c -> d) -> (a -> b) -> (b -> f c) -> a -> f d

-- | Flipped variant of <tt>~@^&gt;</tt>.
--   
--   This function has the same functionality as function
--   
--   <pre>
--   lens :: (s -&gt; a) -&gt; (s -&gt; b -&gt; t) -&gt; Lens s t a b
--   </pre>
--   
--   Which is defined in <a>lens package</a>. See also section
--   <a>Constructing Lenses</a>.
--   
--   Name of <tt>~@^&gt;</tt> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) arguments and then we apply
--   <tt>~@^&gt;</tt>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(~@@^>) :: Functor f => (a -> b) -> (a -> c -> d) -> (b -> f c) -> a -> f d

-- | Convenience wrapper for: <tt>\f g -&gt; <a>fmap</a> . f '^</tt>^'
--   <a>fmap</a> . g@.
--   
--   Name of <a>&lt;^@^&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to both its arguments and then we apply <a>^@^</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(<^@^>) :: (Functor f, Functor g) => (a -> d -> e) -> (a -> b -> c) -> (f c -> g d) -> a -> f b -> g e

-- | Flipped variant of <a>&lt;^@^&gt;</a>.
--   
--   Name of <a>&lt;^@@^&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to both its arguments and then we apply <a>^@@^</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(<^@@^>) :: (Functor f, Functor g) => (a -> b -> c) -> (a -> d -> e) -> (f c -> g d) -> a -> f b -> g e

-- | Convenience wrapper for: <tt>\f g -&gt; <a>fmap</a> . f '^</tt>^' g@.
--   
--   This function allows us to define generic lenses from gettern and
--   setter. See section <a>Constructing Lenses</a> for details.
--   
--   Name of <a>&lt;^@^</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) arguments and then we apply <a>^@^</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(<^@^) :: Functor f => (a -> d -> e) -> (a -> b -> c) -> (c -> f d) -> a -> b -> f e

-- | Flipped variant of <a>&lt;^@^</a>.
--   
--   This function allows us to define generic lenses from gettern and
--   setter. See section <a>Constructing Lenses</a> for details.
--   
--   Name of <a>^@@^&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) arguments and then we apply
--   <a>^@@^</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(^@@^>) :: Functor f => (a -> b -> c) -> (a -> d -> e) -> (c -> f d) -> a -> b -> f e

-- | Convenience wrapper for: <tt>\f g -&gt; f '^</tt>^' <a>fmap</a> . g@.
--   
--   Name of <a>^@^&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) arguments and then we apply
--   <a>^@^</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(^@^>) :: Functor f => (a -> d -> e) -> (a -> b -> c) -> (f c -> d) -> a -> f b -> e

-- | Flipped variant of <a>^@^&gt;</a>.
--   
--   Name of <a>&lt;^@@^</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) arguments and then we apply <a>^@@^</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<tt>.</tt>).
--   
--   <i>Since version 0.10.0.0.</i>
(<^@@^) :: Functor f => (a -> b -> c) -> (a -> d -> e) -> (f c -> d) -> a -> f b -> e


-- | Implementation of lazy <a>between</a> combinator and its variations.
--   For introductory documentation see module <a>Data.Function.Between</a>
--   and for strict versions import <a>Data.Function.Between.Strict</a>
--   module.
--   
--   Prior to version 0.10.0.0 functions defined in this module were
--   directly in <a>Data.Function.Between</a>.
--   
--   <i>Since version 0.10.0.0.</i>
module Data.Function.Between.Lazy

-- | Core combinator of this module and we build others on top of. It also
--   has an infix form <a>~@~</a> and flipped infix form <a>~@@~</a>.
--   
--   This function Defined as:
--   
--   <pre>
--   <a>between</a> f g -&gt; (f .) . (. g)
--   </pre>
between :: (c -> d) -> (a -> b) -> (b -> c) -> a -> d

-- | Infix variant of <a>between</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   fixity of function composition (<a>.</a>).
(~@~) :: (c -> d) -> (a -> b) -> (b -> c) -> a -> d

-- | Flipped variant of <a>~@~</a>, i.e. flipped infix variant of
--   <a>between</a>.
--   
--   Fixity is right associative and set to value 8, which is one less then
--   fixity of function composition (<a>.</a>).
(~@@~) :: (a -> b) -> (c -> d) -> (b -> c) -> a -> d

-- | As <a>~@~</a>, but first function is also parametrised with
--   <tt>a</tt>, hence the name <a>^@~</a>. Character <tt>^</tt> indicates
--   which argument is parametrised with additional argument.
--   
--   This function is defined as:
--   
--   <pre>
--   (f <a>^@~</a> g) h a -&gt; (f a <a>~@~</a> g) h a
--   </pre>
--   
--   Fixity is left associative and set to value 8, which is one less then
--   fixity of function composition (<a>.</a>).
(^@~) :: (a -> c -> d) -> (a -> b) -> (b -> c) -> a -> d

-- | Flipped variant of <a>^@~</a>.
--   
--   Fixity is right associative and set to value 8, which is one less then
--   fixity of function composition (<a>.</a>).
(~@@^) :: (a -> b) -> (a -> c -> d) -> (b -> c) -> a -> d

-- | Pass additional argument to first two function arguments.
--   
--   This function is defined as:
--   
--   <pre>
--   (f <a>^@^</a> g) h a b -&gt; (f a <a>~@~</a> g a) h b
--   </pre>
--   
--   See also <a>^@~</a> to note the difference, most importantly that
--   <a>^@~</a> passes the same argument to all its functional arguments.
--   Function <a>^@~</a> can be defined in terms of this one as:
--   
--   <pre>
--   (f <a>^@~</a> g) h a = (f <a>^@^</a> <a>const</a> g) h a a
--   </pre>
--   
--   We can do it also the other way around and define <a>^@^</a> using
--   <a>^@~</a>:
--   
--   <pre>
--   f <a>^@^</a> g =
--       <a>curry</a> . (f . <a>snd</a> <a>^@~</a> <a>uncurry</a> g)
--   </pre>
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<a>.</a>).
(^@^) :: (a -> d -> e) -> (a -> b -> c) -> (c -> d) -> a -> b -> e

-- | Flipped variant of <a>^@^</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<a>.</a>).
(^@@^) :: (a -> b -> c) -> (a -> d -> e) -> (c -> d) -> a -> b -> e

-- | Apply function <tt>g</tt> to each argument of binary function and
--   <tt>f</tt> to its result. In suffix "2l" the number is equal to arity
--   of the function it accepts as a third argument and character "l" is
--   for "left associative".
--   
--   <pre>
--   <a>between2l</a> f g = (f <a>~@~</a> g) <a>~@~</a> g
--   </pre>
--   
--   Interesting observation:
--   
--   <pre>
--   (\f g -&gt; <a>between2l</a> <a>id</a> g f) === <a>on</a>
--   </pre>
between2l :: (c -> d) -> (a -> b) -> (b -> b -> c) -> a -> a -> d

-- | Apply function <tt>g</tt> to each argument of ternary function and
--   <tt>f</tt> to its result. In suffix "3l" the number is equal to arity
--   of the function it accepts as a third argument and character "l" is
--   for "left associative".
--   
--   This function is defined as:
--   
--   <pre>
--   <a>between3l</a> f g = ((f <a>~@~</a> g) <a>~@~</a> g) <a>~@~</a> g
--   </pre>
--   
--   Alternatively it can be defined using <a>between2l</a>:
--   
--   <pre>
--   <a>between3l</a> f g = <a>between2l</a> f g <a>~@~</a> g
--   </pre>
between3l :: (c -> d) -> (a -> b) -> (b -> b -> b -> c) -> a -> a -> a -> d

-- | Convenience wrapper for:
--   
--   <pre>
--   \f g -&gt; <a>fmap</a> f <a>~@~</a> <a>fmap</a> g
--   </pre>
--   
--   Name of <a>&lt;~@~&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to both its arguments and then we apply <a>~@~</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<a>.</a>).
(<~@~>) :: (Functor f, Functor g) => (c -> d) -> (a -> b) -> (f b -> g c) -> f a -> g d

-- | Flipped variant of <a>&lt;~@~&gt;</a>.
--   
--   Name of <a>&lt;~@@~&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to both its arguments and then we apply <a>~@@~</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<a>.</a>).
(<~@@~>) :: (Functor f, Functor g) => (a -> b) -> (c -> d) -> (f b -> g c) -> f a -> g d

-- | Apply fmap to first argument of <a>~@~</a>. Dual to <a>~@~&gt;</a>
--   which applies <a>fmap</a> to second argument.
--   
--   Defined as:
--   
--   <pre>
--   f <a>&lt;~@~</a> g = <a>fmap</a> f <a>~@~</a> g
--   </pre>
--   
--   This function allows us to define lenses mostly for pair of functions
--   that form an isomorphism. See section <a>Constructing Lenses</a> for
--   details.
--   
--   Name of <a>&lt;~@~</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) argument and then we apply <a>~@~</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<a>.</a>).
(<~@~) :: Functor f => (c -> d) -> (a -> b) -> (b -> f c) -> a -> f d

-- | Flipped variant of <a>&lt;~@~</a>.
--   
--   This function allows us to define lenses mostly for pair of functions
--   that form an isomorphism. See section <a>Constructing Lenses</a> for
--   details.
--   
--   Name of <a>~@@~&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) argument and then we apply
--   <a>~@@~</a>.
--   
--   Fixity is right associative and set to value 8, which is one less then
--   fixity of function composition (<a>.</a>).
(~@@~>) :: Functor f => (a -> b) -> (c -> d) -> (b -> f c) -> a -> f d

-- | Apply fmap to second argument of <a>~@~</a>. Dual to <a>&lt;~@~</a>
--   which applies <a>fmap</a> to first argument.
--   
--   Defined as:
--   
--   <pre>
--   f <a>~@~&gt;</a> g -&gt; f <a>~@~</a> <a>fmap</a> g
--   </pre>
--   
--   Name of <a>~@~&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) argument and then we apply <a>~@~</a>.
--   
--   Fixity is right associative and set to value 8, which is one less then
--   of function composition (<a>.</a>).
(~@~>) :: Functor f => (c -> d) -> (a -> b) -> (f b -> c) -> f a -> d

-- | Flipped variant of <a>~@~&gt;</a>.
--   
--   Name of <a>&lt;~@@~</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) argument and then we apply <a>~@@~</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   fixity of function composition (<a>.</a>).
(<~@@~) :: Functor f => (a -> b) -> (c -> d) -> (f b -> c) -> f a -> d

-- | Convenience wrapper for: <tt>\f g -&gt; <a>fmap</a> . f '^</tt>~' g@.
--   
--   This function has the same functionality as function
--   
--   <pre>
--   lens :: (s -&gt; a) -&gt; (s -&gt; b -&gt; t) -&gt; Lens s t a b
--   </pre>
--   
--   Which is defined in <a>lens package</a>. Only difference is that
--   arguments of <a>&lt;^@~</a> are flipped. See also section
--   <a>Constructing Lenses</a>.
--   
--   Name of <a>&lt;^@~</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) arguments and then we apply <a>^@~</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<a>.</a>).
(<^@~) :: Functor f => (a -> c -> d) -> (a -> b) -> (b -> f c) -> a -> f d

-- | Flipped variant of <tt>~@^&gt;</tt>.
--   
--   This function has the same functionality as function
--   
--   <pre>
--   lens :: (s -&gt; a) -&gt; (s -&gt; b -&gt; t) -&gt; Lens s t a b
--   </pre>
--   
--   Which is defined in <a>lens package</a>. See also section
--   <a>Constructing Lenses</a>.
--   
--   Name of <tt>~@^&gt;</tt> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) arguments and then we apply
--   <tt>~@^&gt;</tt>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<a>.</a>).
(~@@^>) :: Functor f => (a -> b) -> (a -> c -> d) -> (b -> f c) -> a -> f d

-- | Convenience wrapper for: <tt>\f g -&gt; <a>fmap</a> . f '^</tt>^'
--   <a>fmap</a> . g@.
--   
--   Name of <a>&lt;^@^&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to both its arguments and then we apply <a>^@^</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<a>.</a>).
(<^@^>) :: (Functor f, Functor g) => (a -> d -> e) -> (a -> b -> c) -> (f c -> g d) -> a -> f b -> g e

-- | Flipped variant of <a>&lt;^@^&gt;</a>.
--   
--   Name of <a>&lt;^@@^&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to both its arguments and then we apply <a>^@@^</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<a>.</a>).
(<^@@^>) :: (Functor f, Functor g) => (a -> b -> c) -> (a -> d -> e) -> (f c -> g d) -> a -> f b -> g e

-- | Convenience wrapper for: <tt>\f g -&gt; <a>fmap</a> . f '^</tt>^' g@.
--   
--   This function allows us to define generic lenses from gettern and
--   setter. See section <a>Constructing Lenses</a> for details.
--   
--   Name of <a>&lt;^@^</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) arguments and then we apply <a>^@^</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<a>.</a>).
(<^@^) :: Functor f => (a -> d -> e) -> (a -> b -> c) -> (c -> f d) -> a -> b -> f e

-- | Flipped variant of <a>&lt;^@^</a>.
--   
--   This function allows us to define generic lenses from gettern and
--   setter. See section <a>Constructing Lenses</a> for details.
--   
--   Name of <a>^@@^&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) arguments and then we apply
--   <a>^@@^</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<a>.</a>).
(^@@^>) :: Functor f => (a -> b -> c) -> (a -> d -> e) -> (c -> f d) -> a -> b -> f e

-- | Convenience wrapper for: <tt>\f g -&gt; f '^</tt>^' <a>fmap</a> . g@.
--   
--   Name of <a>^@^&gt;</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to second (right) arguments and then we apply
--   <a>^@^</a>.
--   
--   Fixity is left associative and set to value 8, which is one less then
--   of function composition (<a>.</a>).
(^@^>) :: Functor f => (a -> d -> e) -> (a -> b -> c) -> (f c -> d) -> a -> f b -> e

-- | Flipped variant of <a>^@^&gt;</a>.
--   
--   Name of <a>&lt;^@@^</a> simply says that we apply <a>&lt;$&gt;</a>
--   (<a>fmap</a>) to first (left) arguments and then we apply <a>^@@^</a>.
--   
--   Fixity is set to value 8, which is one less then of function
--   composition (<a>.</a>).
(<^@@^) :: Functor f => (a -> b -> c) -> (a -> d -> e) -> (f c -> d) -> a -> f b -> e


-- | During development it is common occurrence to modify deeply nested
--   structures. One of the best known libraries for this purpose is
--   <a>lens</a>, but it's quite overkill for some purposes.
--   
--   This library describes simple and composable combinators that are
--   built on top of very basic concept:
--   
--   <pre>
--   f . h . g
--   </pre>
--   
--   Where <tt>f</tt> and <tt>g</tt> are fixed. It is possible to reduce it
--   to just:
--   
--   <pre>
--   (f .) . (. g)
--   </pre>
--   
--   Which is the core pattern used by all functions defined in this
--   module.
--   
--   Trying to generalize this pattern further ends as <tt>(f
--   <a>&lt;$&gt;</a>) <tt>.</tt> (<a>&lt;$&gt;</a> g)</tt>, where
--   <tt><a>&lt;$&gt;</a> = <a>fmap</a></tt>. Other combinations of
--   substituting <a>.</a> for <a>fmap</a> will end up less or equally
--   generic. Type of such expression is:
--   
--   <pre>
--   \f g -&gt; (f <a>&lt;$&gt;</a>) <a>.</a> (<a>&lt;$&gt;</a> g)
--       :: <a>Functor</a> f =&gt; (b -&gt; c) -&gt; f a -&gt; (a -&gt; b) -&gt; f c
--   </pre>
--   
--   Which doesn't give us much more power. Instead of going for such
--   generalization we kept the original <tt>((f .) . (. g))</tt> which we
--   named <a>between</a> or <a>~@~</a> in its infix form.
module Data.Function.Between
