-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Graphical representations for various combinatorial objects
--   
@package combinat-diagrams
@version 0.1


-- | Binary trees
module Math.Combinat.Diagrams.Trees.Binary
drawBinTree_ :: (Backend b R2, Renderable (Path R2) b) => BinTree a -> Diagram b R2


-- | Diagrams of non-crossing partitions
module Math.Combinat.Diagrams.Partitions.NonCrossing

-- | Draws a Ferrers diagram with the default settings (English notation,
--   no boxes)
drawNonCrossingCircleDiagram :: (Renderable (Path R2) b, Renderable Text b) => NonCrossing -> Diagram b R2
drawNonCrossingCircleDiagram' :: (Renderable (Path R2) b, Renderable Text b) => Colour Double -> Bool -> NonCrossing -> Diagram b R2
makeRoundedPolygonCCW :: Renderable (Path R2) b => Double -> [P2] -> Diagram b R2


-- | Young and Ferrers diagrams for integer partitions
module Math.Combinat.Diagrams.Partitions.Integer
partitionConventionTransformation :: PartitionConvention -> Diagram b R2 -> Diagram b R2

-- | Draws a Ferrers diagram with the default settings (English notation,
--   no boxes)
drawFerrersDiagram :: Renderable (Path R2) b => Partition -> Diagram b R2
drawFerrersDiagram' :: Renderable (Path R2) b => PartitionConvention -> Colour Double -> Bool -> Partition -> Diagram b R2

-- | Draws a partition as a grid of boxes (sometimes also called Young
--   diagram)
drawPartitionBoxes :: Renderable (Path R2) b => PartitionConvention -> Partition -> Diagram b R2


-- | Young and Ferrers diagrams for integer partitions
module Math.Combinat.Diagrams.Partitions


-- | Tableau diagrams
module Math.Combinat.Diagrams.Tableaux

-- | Draws a Ferrers diagram with the default settings (English notation,
--   black)
drawTableau :: (Renderable (Path R2) b, Renderable Text b) => Tableau Int -> Diagram b R2
drawTableau' :: (Renderable (Path R2) b, Renderable Text b) => PartitionConvention -> Colour Double -> Tableau Int -> Diagram b R2


-- | Drawing plane partitions
module Math.Combinat.Diagrams.Partitions.Plane
drawPlanePartition3D :: Renderable (Path R2) b => PlanePart -> Diagram b R2

-- | Draws 3D-like (but in fact 2D) diagram of a plane partition, coloring
--   the faces with the given colors
drawPlanePartition3D' :: Renderable (Path R2) b => (Colour Double, Colour Double, Colour Double) -> PlanePart -> Diagram b R2

-- | Draws a plane partitions as a tablaeux, with numbers indicating the Z
--   height
drawPlanePartition2D :: (Renderable (Path R2) b, Renderable Text b) => PlanePart -> Diagram b R2


-- | Lattice path diagrams
module Math.Combinat.Diagrams.LatticePaths

-- | Which orientation to draw the lattice paths
data LatticeConvention

-- | the steps are <tt>(1,1)</tt> and <tt>(1,-1)</tt>
Hilly :: LatticeConvention

-- | the steps are <tt>(0,1)</tt> and <tt>(0,1)</tt>
UpRight :: LatticeConvention

-- | Draws a lattice path with the default settings
drawLatticePath :: Renderable (Path R2) b => LatticePath -> Diagram b R2
drawLatticePath' :: Renderable (Path R2) b => LatticeConvention -> Colour Double -> Bool -> LatticePath -> Diagram b R2

-- | Draws a rectangular grid of the given size
drawRectangularGrid :: Renderable (Path R2) b => (Int, Int) -> Diagram b R2
instance Eq LatticeConvention
instance Show LatticeConvention


-- | This module re-exports several of the individual submodules
module Math.Combinat.Diagrams
