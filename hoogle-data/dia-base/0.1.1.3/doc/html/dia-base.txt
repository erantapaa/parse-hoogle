-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An EDSL for teaching Haskell with diagrams - data types
--   
@package dia-base
@version 0.1.1.3


-- | Diagrams data types
module Graphics.Diagrams.Types

-- | Point type as defined in the diagrams package
type Point = (Double, Double)

-- | Diagram data type
data Diagram

-- | empty diagram
EmptyDiagram :: Diagram

-- | circle with radius
Circle :: Double -> Diagram

-- | rectangle; width and height
Rect :: Double -> Double -> Diagram

-- | True: polygon; False: polyline
Polyline :: Bool -> [Point] -> Diagram

-- | text at a given position
Text :: Position -> String -> Diagram

-- | move
Move :: Point -> Diagram -> Diagram

-- | scale
Scale :: Double -> Diagram -> Diagram

-- | scale differently at x and y axes
ScaleXY :: Double -> Double -> Diagram -> Diagram

-- | rotate (degree)
Rotate :: Double -> Diagram -> Diagram

-- | used internally
TransformMatrix :: Double -> Double -> Double -> Double -> Double -> Double -> Diagram -> Diagram

-- | clip a rectangle region (lower-left and upper-right corners)
Clip :: Point -> Point -> Diagram -> Diagram

-- | fill with color
Fill :: Color -> Diagram -> Diagram

-- | set stroke color | FillOpacity Double Diagram -- ^ set fill opacity |
--   StrokeOpacity Double Diagram -- ^ set stroke opacity
Stroke :: Color -> Diagram -> Diagram

-- | set stroke width
StrokeWidth :: Double -> Diagram -> Diagram

-- | set font family
FontFamily :: String -> Diagram -> Diagram

-- | add an html link
Link :: String -> Diagram -> Diagram

-- | overlay (the second diagram is over the first one)
Overlay :: Diagram -> Diagram -> Diagram

-- | pack a diagram (kind of let-construct to save resources)
Pack :: Diagram -> (Diagram -> Diagram) -> Diagram

-- | used internally
Group :: Diagram -> Int -> Diagram -> Diagram

-- | used internally
Ref :: Int -> Diagram

-- | used internally
Error :: String -> Diagram -> Diagram

-- | Text positions
data Position

-- | beginning of text is fixed
Start :: Position

-- | middle of text is fixed
Middle :: Position

-- | end of text is fixed
End :: Position

-- | colors
data Color

-- | named color
Color :: String -> Color

-- | RGB color (components are between 0 and 1)
RGB :: Double -> Double -> Double -> Color
instance Typeable Position
instance Typeable Color
instance Typeable Diagram
instance Eq Position
instance Ord Position
instance Show Position
instance Data Position
instance Eq Color
instance Ord Color
instance Show Color
instance Data Color
instance NFData Color
instance NFData Position
instance Data Diagram


-- | Diagrams user API
module Graphics.Diagrams

-- | Point type as defined in the diagrams package
type Point = (Double, Double)

-- | Scalar multiplication.
(*.) :: Double -> Point -> Point

-- | Elementwise addition, subtraction and multiplication for
--   <a>Point</a>s.
(.*.) :: Point -> Point -> Point

-- | Elementwise addition, subtraction and multiplication for
--   <a>Point</a>s.
(.+.) :: Point -> Point -> Point

-- | Elementwise addition, subtraction and multiplication for
--   <a>Point</a>s.
(.-.) :: Point -> Point -> Point

-- | colors
data Color

-- | named color
color :: String -> Color

-- | RGB color (components are between 0 and 1)
rgb :: Double -> Double -> Double -> Color
red :: Color
green :: Color
blue :: Color
black :: Color
white :: Color
gray :: Color
yellow :: Color

-- | Diagram data type
data Diagram

-- | empty diagram
empty :: Diagram

-- | rectangle given with width and height
rect :: Double -> Double -> Diagram

-- | rectangle given with two opposite corners
rectangle :: Point -> Point -> Diagram

-- | circle with radius
circle :: Double -> Diagram

-- | line segment
(>-<) :: Point -> Point -> Diagram

-- | line segment
(~~) :: Point -> Point -> Diagram
polyline :: [Point] -> Diagram
polygon :: [Point] -> Diagram

-- | text; beginning of text is fixed
textFrom :: String -> Point -> Diagram

-- | text; end of text is fixed
textTo :: String -> Point -> Diagram

-- | text; middle of text is fixed
textAt :: String -> Point -> Diagram
move :: Diagram -> Point -> Diagram

-- | rotate (degree)
rotate :: Diagram -> Double -> Diagram

-- | scale differently at x and y axes
scale :: Diagram -> Double -> Diagram
scaleXY :: Diagram -> (Double, Double) -> Diagram

-- | clip a rectangle region (give lower-left and upper-right corners)
clip :: Point -> Point -> Diagram -> Diagram

-- | fill with color
fill :: Diagram -> Color -> Diagram

-- | set stroke color
stroke :: Diagram -> Color -> Diagram

-- | set stroke width
strokeWidth :: Diagram -> Double -> Diagram

-- | set font family
fontFamily :: Diagram -> String -> Diagram

-- | add an html link
link :: Diagram -> String -> Diagram

-- | overlay; the second diagram is over the first one
(<|>) :: Diagram -> Diagram -> Diagram

-- | overlay generalized to several diagrams
union :: [Diagram] -> Diagram

-- | pack a diagram; (<tt>pack d f</tt>) is the more efficient version of
--   (<tt>let v=d in f v</tt>).
pack :: Diagram -> (Diagram -> Diagram) -> Diagram
