-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate a parser (in Haskell) with the SableCC parser generator.
--   
--   This package allows one to use parsers that were written for the
--   SableCC parser generator from Haskell and Prolog. More specifically it
--   reads an XML file that is generated by SableCC (version
--   sablecc-3-beta.3.altgen.20041114.zip) and generates Haskell and Prolog
--   modules which contain the parser tables. The package is used in the
--   build-process of the the ProB Animator
--   (http:<i></i>www.stups.uni-duesseldorf.de/ProB) to build parsers for
--   the B specification language and it is primarily interesting for ProB
--   developers. Nevertheless, there are several SableCC grammars available
--   on the Internet (http:<i></i>sablecc.org<i>wiki</i>GrammarPage) and in
--   case someone ever has to use one of those grammars with Haskell (for
--   whatever reason), then this package might be useful. As this package
--   is still under development, it does not contain the actual
--   parser-engines that execute the generated parser-tables. For an
--   example of a runnable B-Parser, based on this tool, look at the ProB
--   source-code (Prolog) or the B-Frontend package (Haskell). Any
--   questions of feedback well-come.
@package SableCC2Hs
@version 0.0.1.0


-- | All types used by the Haskell implementation of the parser and lexer.
--   This also defines the types of the tables that are exported by the
--   Haskell modules that the tool generates.
module SableCC.ParserTypes
type Modes = Array ModeID (ModeName, Mode)
type ModeName = String
newtype ModeID
ModeID :: Int -> ModeID
unModeID :: ModeID -> Int
data Mode
Mode :: Array LexStateID State -> Mode
modeStates :: Mode -> Array LexStateID State
newtype LexStateID
LexStateID :: Int -> LexStateID
data State
State :: IntervalTree -> Maybe LexTokenID -> State
stateTransitions :: State -> IntervalTree
stateAcceptedToken :: State -> Maybe LexTokenID
data TransitionTarget
Epsilon :: LexStateID -> TransitionTarget
NotEpsilon :: LexStateID -> TransitionTarget
newtype LexTokenID
LexTokenID :: Int -> LexTokenID
data LexerState
LexerState :: ModeID -> String -> () -> !Int -> LexerState
lexerMode :: LexerState -> ModeID
lexerBuffer :: LexerState -> String
srcPos :: LexerState -> ()
commentNestingCounter :: LexerState -> !Int
initLexerState :: String -> LexerState
type SToken = (LexTokenID, String)
data IntervalTree
IntervalNode :: IntervalTree -> Char -> TransitionTarget -> Char -> IntervalTree -> IntervalTree
IntervalLeaf :: IntervalTree
lookupInterval :: Char -> IntervalTree -> Maybe TransitionTarget
newtype ParserStateID
ParserStateID :: Int -> ParserStateID
fromParserStateID :: ParserStateID -> Int
type ErrorMsg = String
type GotoTable = Array GotoIndex GotoMap
data GotoMap
GotoMap :: ParserStateID -> Map ParserStateID ParserStateID -> GotoMap
defaultGoto :: GotoMap -> ParserStateID
gotoMap :: GotoMap -> Map ParserStateID ParserStateID
newtype GotoIndex
GotoIndex :: Int -> GotoIndex
unGotoIndex :: GotoIndex -> Int
type ActionTable = Array ParserStateID TransitionList
data TransitionList
TransitionList :: Action -> Map ParserTokenID Action -> TransitionList
defaultTransition :: TransitionList -> Action
transitionMap :: TransitionList -> Map ParserTokenID Action
data Action
Shift :: ParserStateID -> Action
Reduce :: Reduction -> Action
Accept :: Action
Error :: ErrorID -> Action
data Reduction
Reduction :: ReductionID -> Int -> GotoIndex -> Reduction
reductionID :: Reduction -> ReductionID
popCount :: Reduction -> Int
gotoIndex :: Reduction -> GotoIndex
newtype ReductionID
ReductionID :: Int -> ReductionID
unReductionID :: ReductionID -> Int
newtype ErrorID
ErrorID :: Int -> ErrorID
unErrorID :: ErrorID -> Int
type PToken = (ParserTokenID, String)
newtype ParserTokenID
ParserTokenID :: Int -> ParserTokenID
data CST
CstLeaf :: PToken -> CST
CstNode :: ReductionID -> [CST] -> CST
instance Eq ModeID
instance Ord ModeID
instance Enum ModeID
instance Ix ModeID
instance Show ModeID
instance Eq LexStateID
instance Ord LexStateID
instance Enum LexStateID
instance Ix LexStateID
instance Show LexStateID
instance Eq TransitionTarget
instance Ord TransitionTarget
instance Show TransitionTarget
instance Eq LexTokenID
instance Ord LexTokenID
instance Enum LexTokenID
instance Ix LexTokenID
instance Show LexTokenID
instance Show IntervalTree
instance Eq ParserStateID
instance Ord ParserStateID
instance Enum ParserStateID
instance Ix ParserStateID
instance Show ParserStateID
instance Eq GotoIndex
instance Ord GotoIndex
instance Enum GotoIndex
instance Ix GotoIndex
instance Show GotoIndex
instance Eq ReductionID
instance Ord ReductionID
instance Enum ReductionID
instance Ix ReductionID
instance Show ReductionID
instance Show Reduction
instance Eq ErrorID
instance Ord ErrorID
instance Enum ErrorID
instance Ix ErrorID
instance Show ErrorID
instance Show Action
instance Eq ParserTokenID
instance Ord ParserTokenID
instance Enum ParserTokenID
instance Ix ParserTokenID
instance Show ParserTokenID
instance Show CST
