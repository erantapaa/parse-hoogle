-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A CTCP encoding and decoding library for IRC clients.
--   
@package irc-ctcp
@version 0.1.1.0


-- | Functions for encoding and decoding CTCPs.
module Network.IRC.CTCP

-- | Type representing a CTCP-encoded bytestring.
data CTCPByteString

-- | Get the underlying (encoded) bytestring from a CTCP bytestring.
getUnderlyingByteString :: CTCPByteString -> ByteString

-- | Turn a command name and arguments into a CTCP-encoded bytestring.
--   
--   This encodes the text with UTF-8. If another encoding is desired,
--   <a>encodeCTCP</a> should be used directly.
toCTCP :: Text -> [Text] -> CTCPByteString

-- | Decode a CTCP-encoded bytestring and turn it into a command name and
--   arguments.
--   
--   This decodes the text with UTF-8. If another encoding is desired,
--   <a>decodeCTCP</a> should be used directly.
fromCTCP :: CTCPByteString -> (Text, [Text])

-- | Encode a bytestring according to the CTCP spec.
encodeCTCP :: ByteString -> CTCPByteString

-- | Decode a CTCP bytestring. Extraeneous escapes are dropped.
decodeCTCP :: CTCPByteString -> ByteString

-- | Check if a bytestring represents a CTCP.
--   
--   This is intentionally very lenient, in particular it doesn't check
--   that there are no extra escape characters. This is because the spec
--   states that misplaced escape characters should be discarded by the
--   decoding process.
isCTCP :: ByteString -> Bool

-- | Check if a bytestring looks like a CTCP, and if so, wrap it up in the
--   <a>CTCPByteString</a> type.
--   
--   This uses <a>isCTCP</a>, and so is lenient with escapes.
asCTCP :: ByteString -> Maybe CTCPByteString

-- | Apply one of two functions depending on whether the bytestring looks
--   like a CTCP or not.
--   
--   This uses <a>asCTCP</a>, and so is lenient with escapes.
orCTCP :: (ByteString -> a) -> (CTCPByteString -> a) -> ByteString -> a
instance Eq CTCPByteString
