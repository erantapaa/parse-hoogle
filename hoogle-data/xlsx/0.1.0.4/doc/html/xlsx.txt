-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple and incomplete Excel file parser/writer
--   
--   This library can help you to get some data read and written in Office
--   Open XML xlsx format. Small subset of xlsx format is supported.
--   
--   For examples look into <a>Codec.Xlsx</a>.
--   
--   Format is covered by ECMA-376 standard:
--   <a>http://www.ecma-international.org/publications/standards/Ecma-376.htm</a>
@package xlsx
@version 0.1.0.4

module Codec.Xlsx.Types

-- | Structured representation of Xlsx file (currently a subset of its
--   contents)
data Xlsx
Xlsx :: Map Text Worksheet -> Styles -> Xlsx
_xlSheets :: Xlsx -> Map Text Worksheet
_xlStyles :: Xlsx -> Styles
xlSheets :: Lens' Xlsx (Map Text Worksheet)
xlStyles :: Lens' Xlsx Styles

-- | The default value for this type.
def :: Default a => a
newtype Styles
Styles :: ByteString -> Styles
unStyles :: Styles -> ByteString
emptyStyles :: Styles

-- | Column range (from cwMin to cwMax) width
data ColumnsWidth
ColumnsWidth :: Int -> Int -> Double -> Int -> ColumnsWidth
cwMin :: ColumnsWidth -> Int
cwMax :: ColumnsWidth -> Int
cwWidth :: ColumnsWidth -> Double
cwStyle :: ColumnsWidth -> Int

-- | Xlsx worksheet
data Worksheet
Worksheet :: [ColumnsWidth] -> Map Int RowProperties -> CellMap -> [Text] -> Worksheet

-- | column widths
_wsColumns :: Worksheet -> [ColumnsWidth]

-- | custom row properties (height, style) map
_wsRowPropertiesMap :: Worksheet -> Map Int RowProperties

-- | data mapped by (row, column) pairs
_wsCells :: Worksheet -> CellMap
_wsMerges :: Worksheet -> [Text]
wsColumns :: Lens' Worksheet [ColumnsWidth]
wsRowPropertiesMap :: Lens' Worksheet (Map Int RowProperties)
wsCells :: Lens' Worksheet CellMap
wsMerges :: Lens' Worksheet [Text]
type CellMap = Map (Int, Int) Cell

-- | Cell values include text, numbers and booleans, standard includes date
--   format also but actually dates are represented by numbers with a date
--   format assigned to a cell containing it
data CellValue
CellText :: Text -> CellValue
CellDouble :: Double -> CellValue
CellBool :: Bool -> CellValue

-- | Currently cell details include only cell values and style ids (e.g.
--   formulas from <tt>&lt;f&gt;</tt> and inline strings from
--   <tt>&lt;is&gt;</tt> subelements are ignored)
data Cell
Cell :: Maybe Int -> Maybe CellValue -> Cell
_cellStyle :: Cell -> Maybe Int
_cellValue :: Cell -> Maybe CellValue
cellValue :: Lens' Cell (Maybe CellValue)
cellStyle :: Lens' Cell (Maybe Int)
data RowProperties
RowProps :: Maybe Double -> Maybe Int -> RowProperties
rowHeight :: RowProperties -> Maybe Double
rowStyle :: RowProperties -> Maybe Int

-- | convert column number (starting from 1) to its textual form (e.g. 3
--   -&gt; "C")
int2col :: Int -> Text

-- | reverse to <a>int2col</a>
col2int :: Text -> Int

-- | converts cells mapped by (row, column) into rows which contain row
--   index and cells as pairs of column indices and cell values
toRows :: CellMap -> [(Int, [(Int, Cell)])]

-- | reverse to <a>toRows</a>
fromRows :: [(Int, [(Int, Cell)])] -> CellMap
instance Default Xlsx
instance Eq Styles
instance Show Styles
instance Eq Xlsx
instance Show Xlsx
instance Default Worksheet
instance Read RowProperties
instance Eq RowProperties
instance Show RowProperties
instance Ord RowProperties
instance Eq ColumnsWidth
instance Show ColumnsWidth
instance Eq Worksheet
instance Show Worksheet
instance Default Cell
instance Eq CellValue
instance Show CellValue
instance Eq Cell
instance Show Cell


-- | This module provides a function for reading .xlsx files
module Codec.Xlsx.Parser

-- | Reads <a>Xlsx</a> from raw data (lazy bytestring)
toXlsx :: ByteString -> Xlsx
instance Show WorksheetFile


-- | This module provides a function for serializing structured <a>Xlsx</a>
--   into lazy bytestring
module Codec.Xlsx.Writer

-- | Writes <a>Xlsx</a> to raw data (lazy bytestring)
fromXlsx :: ClockTime -> Xlsx -> ByteString
instance Show XlsxCellData
instance Eq XlsxCellData
instance Show XlsxCell
instance Eq XlsxCell

module Codec.Xlsx.Lens
ixSheet :: Applicative f => Text -> (Worksheet -> f Worksheet) -> Xlsx -> f Xlsx
atSheet :: Functor f => Text -> (Maybe Worksheet -> f (Maybe Worksheet)) -> Xlsx -> f Xlsx
ixCell :: Applicative f => (Int, Int) -> (Cell -> f Cell) -> Worksheet -> f Worksheet
atCell :: Functor f => (Int, Int) -> (Maybe Cell -> f (Maybe Cell)) -> Worksheet -> f Worksheet
cellValueAt :: Functor f => (Int, Int) -> (Maybe CellValue -> f (Maybe CellValue)) -> Worksheet -> f Worksheet


-- | This module provides solution for parsing and writing MIcrosoft Open
--   Office XML Workbook format i.e. *.xlsx files
--   
--   As a simple example you could read cell B3 from the 1st sheet of
--   workbook "report.xlsx" using the following code:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   module Read where
--   import Codec.Xlsx
--   import qualified Data.ByteString.Lazy as L
--   import Control.Lens
--   
--   main :: IO ()
--   main = do
--     bs &lt;- L.readFile "report.xlsx"
--     let value = toXlsx bs ^? ixSheet "List1" .
--                 ixCell (3,2) . cellValue . _Just
--     putStrLn $ "Cell B3 contains " ++ show value
--   </pre>
--   
--   And the following example mudule shows a way to construct and write
--   xlsx file
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   module Write where
--   import Codec.Xlsx
--   import Control.Lens
--   import qualified Data.ByteString.Lazy as L
--   import System.Time
--   
--   main :: IO ()
--   main = do
--     ct &lt;- getClockTime
--     let
--         sheet = def &amp; cellValueAt (1,2) ?~ CellDouble 42.0
--                     &amp; cellValueAt (3,2) ?~ CellText "foo"
--         xlsx = def &amp; atSheet "List1" ?~ sheet
--     L.writeFile "example.xlsx" $ fromXlsx ct xlsx
--   </pre>
module Codec.Xlsx
