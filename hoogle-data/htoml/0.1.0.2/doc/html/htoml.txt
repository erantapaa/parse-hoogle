-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parser for TOML files
--   
--   TOML is an obvious and minimal format for config files.
--   
--   This package provides a TOML parser, build with the Parsec library,
--   and providing a JSON interface using the Aeson library.
@package htoml
@version 0.1.0.2

module Text.Toml.Types

-- | The <a>Table</a> is a mapping (<tt>HashMap</tt>) of <a>Text</a> keys
--   to <a>Node</a> values.
type Table = HashMap Text Node

-- | A <a>Node</a> may contain a <a>TValue</a>, a <a>Table</a> or a table
--   array '[Table]'.
data Node
NTValue :: TValue -> Node
NTable :: Table -> Node
NTArray :: [Table] -> Node

-- | A <a>TValue</a> may contain any type of value that can put in a
--   <a>VArray</a>.
data TValue
VString :: Text -> TValue
VInteger :: Int64 -> TValue
VFloat :: Double -> TValue
VBoolean :: Bool -> TValue
VDatetime :: UTCTime -> TValue
VArray :: [TValue] -> TValue

-- | Contruct an empty <a>Table</a>.
emptyTable :: Table

-- | Contruct an empty <a>NTable</a>.
emptyNTable :: Node

-- | Inserts a table (<a>Table</a>) with name ('[Text]') which may be part
--   of a table array (when <a>Bool</a> is <a>True</a>) into a
--   <a>Table</a>. It may result in an error (<a>Text</a>) on the
--   <a>Left</a> or a modified table on the <a>Right</a>.
insert :: ([Text], Node) -> Table -> Either Text Table

-- | Merge two tables, resulting in an error when overlapping keys are
--   found (<a>Left</a> will contian those keys). When no overlapping keys
--   are found the result will contain the union of both tables in a
--   <a>Right</a>.
merge :: Table -> Table -> Either [Text] Table

-- | Convenience function to construct a common error message for the
--   <a>insert</a> function.
commonInsertError :: Node -> [Text] -> Either Text Table

-- | <a>ToJSON</a> instances for the <a>Node</a> type that produce Aeson
--   (JSON) in line with the TOML specification.

-- | <a>ToJSON</a> instances for the <a>TValue</a> type that produce Aeson
--   (JSON) in line with the TOML specification.

-- | Type class for conversion to BurntSushi-style JSON.
--   
--   BurntSushi has made a language agnostic test suite available that this
--   library uses. This test suit expects that values are encoded as JSON
--   objects with a 'type' and a <tt>value</tt> member.
class ToBsJSON a
toBsJSON :: ToBsJSON a => a -> Value

-- | Provide a <a>toBsJSON</a> instance to the <a>NTArray</a>.

-- | Provide a <a>toBsJSON</a> instance to the <a>NTable</a>.

-- | <a>ToBsJSON</a> instances for the <a>Node</a> type that produce Aeson
--   (JSON) in line with BurntSushi's language agnostic TOML test suite.

-- | <a>ToBsJSON</a> instances for the <a>TValue</a> type that produce
--   Aeson (JSON) in line with BurntSushi's language agnostic TOML test
--   suite.
--   
--   As seen in this function, BurntSushi's JSON encoding explicitly
--   specifies the types of the values.
instance Eq TValue
instance Show TValue
instance Eq Node
instance Show Node
instance ToBsJSON TValue
instance ToBsJSON Node
instance ToBsJSON v => ToBsJSON (HashMap Text v)
instance ToBsJSON a => ToBsJSON [a]
instance ToJSON TValue
instance ToJSON Node

module Text.Toml.Parser

-- | Convenience function for the test suite and GHCI.
parseOnly :: Parser a -> Text -> Either ParseError a

-- | Parses a complete document formatted according to the TOML spec.
tomlDoc :: Parser Table

-- | Parses a table of key-value pairs.
table :: Parser Table

-- | Parses a <a>Table</a> or <tt>TableArray</tt> with its header. The
--   resulting tuple has the header's value in the first position, and the
--   <a>NTable</a> or <a>NTArray</a> in the second.
namedSection :: Parser ([Text], Node)

-- | Parses a table header.
tableHeader :: Parser [Text]

-- | Parses a table array header.
tableArrayHeader :: Parser [Text]

-- | Parses the value of any header (names separated by dots), into a list
--   of <a>Text</a>.
headerValue :: Parser [Text]

-- | Parses a key-value assignment.
assignment :: Parser (Text, TValue)

-- | Parses a value.
value :: Parser TValue

-- | <ul>
--   <li>Toml value parsers</li>
--   </ul>
array :: Parser TValue
boolean :: Parser TValue
anyStr :: Parser TValue
basicStr :: Parser TValue
multiBasicStr :: Parser TValue
literalStr :: Parser TValue
multiLiteralStr :: Parser TValue
datetime :: Parser TValue

-- | Attoparsec <tt>double</tt> parses scientific "e" notation; reimplement
--   according to Toml spec.
float :: Parser TValue
integer :: Parser TValue

-- | Parses the elements of an array, while restricting them to a certain
--   type.
arrayOf :: Parser TValue -> Parser TValue

-- | Parser for escape sequences.
escSeq :: Parser Char

-- | Parser for unicode hexadecimal values of representation length
--   <tt>n</tt>.
unicodeHex :: Int -> Parser Char

-- | Parser for signs (a plus or a minus).
signed :: Num a => Parser a -> Parser a

-- | Parses the (rest of the) line including an EOF, whitespace and
--   comments.
skipBlanks :: Parser ()

-- | Results in <a>True</a> for whitespace chars, tab or space, according
--   to spec.
isSpc :: Char -> Bool

-- | Parse an EOL, as per TOML spec this is 0x0A a.k.a. '\n' or 0x0D a.k.a.
--   '\r'.
eol :: Parser ()

module Text.Toml

-- | Parse a <a>Text</a> that results in <a>Either</a> a <a>String</a>
--   containing the error message, or an internal representation of the
--   document in the <tt>Toml</tt> data type.
parseTomlDoc :: String -> Text -> Either ParseError Table
