-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lenses
--   
--   Lenses
@package data-lens-fd
@version 2.0.5

module Data.Lens

-- | get the value of a lens into state
access :: MonadState a m => Lens a b -> m b

-- | set a value using a lens into state
(~=) :: MonadState a m => Lens a b -> b -> m b

-- | set a value using a lens into state
(!=) :: MonadState a m => Lens a b -> b -> m b

-- | infix modification a value through a lens into state
(%=) :: MonadState a m => Lens a b -> (b -> b) -> m b

-- | infix modification a value through a lens into state
(!%=) :: MonadState a m => Lens a b -> (b -> b) -> m b

-- | infix modification of a value through a lens into state with a
--   supplemental response
(%%=) :: MonadState a m => Lens a b -> (b -> (c, b)) -> m c

-- | infix modification of a value through a lens into state with a
--   supplemental response
(!%%=) :: MonadState a m => Lens a b -> (b -> (c, b)) -> m c
(+=) :: (MonadState a m, Num b) => Lens a b -> b -> m b
(!+=) :: (MonadState a m, Num b) => Lens a b -> b -> m b
(-=) :: (MonadState a m, Num b) => Lens a b -> b -> m b
(!-=) :: (MonadState a m, Num b) => Lens a b -> b -> m b
(*=) :: (MonadState a m, Num b) => Lens a b -> b -> m b
(!*=) :: (MonadState a m, Num b) => Lens a b -> b -> m b
(//=) :: (MonadState a m, Fractional b) => Lens a b -> b -> m b
(!/=) :: (MonadState a m, Fractional b) => Lens a b -> b -> m b
(&&=) :: MonadState a m => Lens a Bool -> Bool -> m Bool
(!&&=) :: MonadState a m => Lens a Bool -> Bool -> m Bool
(||=) :: MonadState a m => Lens a Bool -> Bool -> m Bool
(!||=) :: MonadState a m => Lens a Bool -> Bool -> m Bool
focus :: Monad m => Lens a b -> StateT b m c -> StateT a m c
