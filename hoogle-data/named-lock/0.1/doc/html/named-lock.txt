-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A named lock that is created on demand.
--   
--   A named lock that is created on demand.
--   
--   This is useful for situations where there is a potentially infinite
--   number of resources (e.g., database queries) that should not be used
--   concurrently.
@package named-lock
@version 0.1


-- | This module implements "named locks".
--   
--   A named lock is like a normal lock (<tt>MVar ()</tt>) but is created
--   on demand. This is useful when you have a potentially infinite number
--   of resources that should not be used concurrently.
--   
--   For example, in a web-server you might create a new lock for each
--   database query so that the same query is only run once.
--   
--   Named locks are allocated in a <a>LockPool</a>. Names are arbitrary,
--   well-behaved instances of the <a>Ord</a> class.
module Control.Concurrent.NamedLock

-- | Create a new, empty, lock pool.
newLockPool :: IO (LockPool name)
data LockPool name

-- | Grab the lock with given name. Blocks until the lock becomes
--   available.
grabNamedLock :: Ord name => LockPool name -> name -> IO ()

-- | Release the lock with the given name.
--   
--   The released lock must have previously been grabbed via
--   <a>grabNamedLock</a>.
releaseNamedLock :: Ord name => LockPool name -> name -> IO ()

-- | Hold the lock while running the action.
--   
--   If the action throws an exception, the lock is released an the
--   exception propagated. Returns the result of the action.
withNamedLock :: Ord name => LockPool name -> name -> IO a -> IO a
