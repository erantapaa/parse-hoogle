-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Enumeratees for compressing and decompressing streams
--   
--   Enumeratees for compressing and decompressing streams
@package iteratee-compress
@version 0.3.3.1

module Data.Iteratee.ZLib

-- | Decompress the input and send to inner iteratee. If there is end of
--   zlib stream it is left unprocessed.
enumInflate :: MonadIO m => Format -> DecompressParams -> Enumeratee ByteString ByteString m a

-- | Compress the input and send to inner iteratee.
enumDeflate :: MonadIO m => Format -> CompressParams -> Enumeratee ByteString ByteString m a

-- | Denotes error is user-supplied parameter
data ZLibParamsException

-- | Incorrect compression level was chosen
IncorrectCompressionLevel :: !Int -> ZLibParamsException

-- | Incorrect number of window bits was chosen
IncorrectWindowBits :: !Int -> ZLibParamsException

-- | Incorrect memory level was chosen
IncorrectMemoryLevel :: !Int -> ZLibParamsException

-- | Denotes error in compression and decompression
data ZLibException

-- | Decompression requires user-supplied dictionary (not supported)
NeedDictionary :: ZLibException

-- | Buffer error - denotes a library error | File Error
BufferError :: ZLibException

-- | State of steam inconsistent
StreamError :: ZLibException

-- | Input data corrupted
DataError :: ZLibException

-- | Not enough memory
MemoryError :: ZLibException

-- | Version error
VersionError :: ZLibException

-- | Unexpected or unknown error - please report as bug
Unexpected :: !CInt -> ZLibException

-- | Incorrect state - denotes error in library
IncorrectState :: ZLibException

-- | Set of parameters for compression. For sane defaults use
--   <a>defaultCompressParams</a>
data CompressParams
CompressParams :: !CompressionLevel -> !Method -> !WindowBits -> !MemoryLevel -> !CompressionStrategy -> !Int -> !(Maybe ByteString) -> CompressParams
compressLevel :: CompressParams -> !CompressionLevel
compressMethod :: CompressParams -> !Method
compressWindowBits :: CompressParams -> !WindowBits
compressMemoryLevel :: CompressParams -> !MemoryLevel
compressStrategy :: CompressParams -> !CompressionStrategy

-- | The size of output buffer. That is the size of <a>Chunk</a>s that will
--   be emitted to inner iterator (except the last <a>Chunk</a>).
compressBufferSize :: CompressParams -> !Int
compressDictionary :: CompressParams -> !(Maybe ByteString)
defaultCompressParams :: CompressParams

-- | Set of parameters for decompression. For sane defaults see
--   <a>defaultDecompressParams</a>.
data DecompressParams
DecompressParams :: !WindowBits -> !Int -> !(Maybe ByteString) -> DecompressParams

-- | Window size - it have to be at least the size of
--   <a>compressWindowBits</a> the stream was compressed with.
--   
--   Default in <a>defaultDecompressParams</a> is the maximum window size -
--   please do not touch it unless you know what you are doing.
decompressWindowBits :: DecompressParams -> !WindowBits

-- | The size of output buffer. That is the size of <a>Chunk</a>s that will
--   be emitted to inner iterator (except the last <a>Chunk</a>).
decompressBufferSize :: DecompressParams -> !Int
decompressDictionary :: DecompressParams -> !(Maybe ByteString)
defaultDecompressParams :: DecompressParams

-- | Specify the format for compression and decompression
data Format

-- | The gzip format is widely used and uses a header with checksum and
--   some optional metadata about the compress file.
--   
--   It is intended primarily for compressing individual files but is also
--   used for network protocols such as HTTP.
--   
--   The format is described in RFC 1952
--   <a>http://www.ietf.org/rfc/rfc1952.txt</a>.
GZip :: Format

-- | The zlib format uses a minimal header with a checksum but no other
--   metadata. It is designed for use in network protocols.
--   
--   The format is described in RFC 1950
--   <a>http://www.ietf.org/rfc/rfc1950.txt</a>
Zlib :: Format

-- | The 'raw' format is just the DEFLATE compressed data stream without
--   and additionl headers.
--   
--   Thr format is described in RFC 1951
--   <a>http://www.ietf.org/rfc/rfc1951.txt</a>
Raw :: Format

-- | <a>Format</a> for decompressing a <a>Zlib</a> or <a>GZip</a> stream.
GZipOrZlib :: Format

-- | The compression level specify the tradeoff between speed and
--   compression.
data CompressionLevel

-- | Default compression level set at 6.
DefaultCompression :: CompressionLevel

-- | No compression, just a block copy.
NoCompression :: CompressionLevel

-- | The fastest compression method (however less compression)
BestSpeed :: CompressionLevel

-- | The best compression method (however slowest)
BestCompression :: CompressionLevel

-- | Compression level set by number from 1 to 9
CompressionLevel :: Int -> CompressionLevel

-- | Specify the compression method.
data Method

-- | 'Deflate' is so far the only method supported.
Deflated :: Method

-- | This specify the size of compression level. Larger values result in
--   better compression at the expense of highier memory usage.
--   
--   The compression window size is 2 to the power of the value of the
--   window bits.
--   
--   The total memory used depends on windows bits and <a>MemoryLevel</a>.
data WindowBits

-- | The size of window bits. It have to be between <tt>8</tt> (which
--   corresponds to 256b i.e. 32B) and <tt>15</tt> (which corresponds to 32
--   kib i.e. 4kiB).
WindowBits :: Int -> WindowBits

-- | The default window size which is 4kiB
DefaultWindowBits :: WindowBits

-- | The <a>MemoryLevel</a> specifies how much memory should be allocated
--   for the internal state. It is a tradeoff between memory usage, speed
--   and compression. Using more memory allows faster and better
--   compression.
--   
--   The memory used for interal state, excluding <a>WindowBits</a>, is 512
--   bits times 2 to power of memory level.
--   
--   The total amount of memory use depends on the <a>WindowBits</a> and
--   <a>MemoryLevel</a>.
data MemoryLevel

-- | Default memory level set to 8.
DefaultMemoryLevel :: MemoryLevel

-- | Use the small amount of memory (equivalent to memory level 1) - i.e.
--   1024b or 256 B. It slow and reduces the compresion ratio.
MinMemoryLevel :: MemoryLevel

-- | Maximum memory level for optimal compression speed (equivalent to
--   memory level 9). The internal state is 256kib or 32kiB.
MaxMemoryLevel :: MemoryLevel

-- | A specific level. It have to be between 1 and 9.
MemoryLevel :: Int -> MemoryLevel

-- | Tunes the compress algorithm but does not affact the correctness.
data CompressionStrategy

-- | Default strategy
DefaultStrategy :: CompressionStrategy

-- | Use the filtered compression strategy for data produced by a filter
--   (or predictor). Filtered data consists mostly of small values with a
--   somewhat random distribution. In this case, the compression algorithm
--   is tuned to compress them better. The effect of this strategy is to
--   force more Huffman coding and less string matching; it is somewhat
--   intermediate between <a>DefaultStrategy</a> and <a>HuffmanOnly</a>.
Filtered :: CompressionStrategy

-- | Use the Huffman-only compression strategy to force Huffman encoding
--   only (no string match).
HuffmanOnly :: CompressionStrategy

-- | Enumerate synchronise flush. It cause the all pending output to be
--   flushed and all available input is sent to inner Iteratee.
enumSyncFlush :: Monad m => Enumerator ByteString m a

-- | Enumerate full flush. It flushes all pending output and reset the
--   compression. It allows to restart from this point if compressed data
--   was corrupted but it can affect the compression rate.
--   
--   It may be only used during compression.
enumFullFlush :: Monad m => Enumerator ByteString m a

-- | Enumerate block flush. If the enumerator is compressing it allows to
--   finish current block. If the enumerator is decompressing it forces to
--   stop on next block boundary.
enumBlockFlush :: Monad m => Enumerator ByteString m a
instance Typeable ZLibParamsException
instance Typeable ZLibException
instance Typeable ZlibFlush
instance Eq ZLibParamsException
instance Eq ZLibException
instance Eq ZlibFlush
instance Eq Format
instance Exception ZLibException
instance Exception ZLibParamsException
instance Show ZLibException
instance Show ZLibParamsException
instance Exception ZlibFlush
instance Show ZlibFlush

module Data.Iteratee.BZip

-- | Compress the input and send to inner iteratee.
enumCompress :: MonadIO m => CompressParams -> Enumeratee ByteString ByteString m a

-- | Decompress the input and send to inner iteratee. If there is end of
--   zlib stream it is left unprocessed.
enumDecompress :: MonadIO m => DecompressParams -> Enumeratee ByteString ByteString m a

-- | Denotes error is user-supplied parameter
data BZipParamsException

-- | Incorrect block size was chosen
IncorrectBlockSize :: !Int -> BZipParamsException

-- | Incorrect work size was chosen
IncorrectWorkFactor :: !Int -> BZipParamsException

-- | Incorrect buffer size was chosen
IncorrectBufferSize :: !Int -> BZipParamsException

-- | Denotes error in compression and decompression
data BZipException

-- | bzip2 library internal error
ConfigError :: BZipException

-- | Memory allocation failed
MemError :: BZipException

-- | Corrupted input
DataError :: BZipException

-- | Incorrect magic number
DataErrorMagic :: BZipException

-- | Unknown or unexpected error
Unexpected :: !Int -> BZipException

-- | Incorrect state - denotes error in library
IncorrectState :: BZipException

-- | Set of parameters for compression. For sane defaults use
--   <a>defaultCompressParams</a>
data CompressParams
CompressParams :: BlockSize -> WorkFactor -> !Int -> CompressParams
compressBlockSize :: CompressParams -> BlockSize
compressWorkFactor :: CompressParams -> WorkFactor

-- | The size of output buffer. That is the size of <a>Chunk</a>s that will
--   be emitted to inner iterator (except the last <a>Chunk</a>).
compressBufferSize :: CompressParams -> !Int
defaultCompressParams :: CompressParams

-- | Set of parameters for decompression. For sane defaults see
--   <a>defaultDecompressParams</a>.
data DecompressParams
DecompressParams :: !Bool -> !Int -> DecompressParams
decompressSaveMemory :: DecompressParams -> !Bool

-- | The size of output buffer. That is the size of <a>Chunk</a>s that will
--   be emitted to inner iterator (except the last <a>Chunk</a>).
decompressBufferSize :: DecompressParams -> !Int
defaultDecompressParams :: DecompressParams

-- | The compression level specify the tradeoff between speed and
--   compression.
data BlockSize

-- | Default compression level set at 6
DefaultBlockSize :: BlockSize

-- | The fastest compression method (however less compression)
BestSpeed :: BlockSize

-- | The best compression method (however slowest)
BestCompression :: BlockSize

-- | Compression level set by number from 1 to 9
CompressionLevel :: !Int -> BlockSize
data WorkFactor

-- | Default work factor (set at 30)
DefaultWorkFactor :: WorkFactor

-- | Hand-tuned work factor
WorkFactor :: !Int -> WorkFactor
instance Typeable BZipParamsException
instance Typeable BZipException
instance Typeable BZipFlush
instance Eq BZipParamsException
instance Eq BZipException
instance Eq BZipFlush
instance Exception BZipException
instance Exception BZipParamsException
instance Show BZipException
instance Show BZipParamsException
instance Exception BZipFlush
instance Show BZipFlush
