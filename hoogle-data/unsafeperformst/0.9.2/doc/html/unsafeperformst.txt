-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Like unsafeperformIO, but for the ST monad.
--   
@package unsafeperformst
@version 0.9.2

module Control.Monad.ST.UnsafePerform

-- | This is like <a>unsafePerformIO</a>, but for the <a>ST</a> monad.
--   Highly unsafe, only use when you really know what you're doing. The
--   same precations as for <a>unsafePerformIO</a> apply:
--   
--   If the ST computation wrapped in <a>unsafePerformST</a> performs side
--   effects, then the relative order in which those side effects take
--   place (relative to the main I/O trunk, or other calls to
--   <a>unsafePerformST</a>) is indeterminate. Furthermore, when using
--   <a>unsafePerformST</a> to cause side-effects, you should take the
--   following precautions to ensure the side effects are performed as many
--   times as you expect them to be. Note that these precautions are
--   necessary for GHC, but may not be sufficient, and other compilers may
--   require different precautions:
--   
--   <ul>
--   <li>Use <tt>{-# NOINLINE foo #-}</tt> as a pragma on any function
--   <tt>foo</tt> that calls <a>unsafePerformST</a>. If the call is
--   inlined, the S/T may be performed more than once.</li>
--   <li>Use the compiler flag <tt>-fno-cse</tt> to prevent common
--   sub-expression elimination being performed on the module, which might
--   combine two side effects that were meant to be separate.</li>
--   <li>Make sure that the either you switch off let-floating
--   (<tt>-fno-full-laziness</tt>), or that the call to
--   <a>unsafePerformST</a> cannot float outside a lambda. For example, if
--   you say: <tt> f x = unsafePerformST (newSTRef []) </tt> you may get
--   only one reference cell shared between all calls to <tt>f</tt>. Better
--   would be <tt> f x = unsafePerformST (newSTRef [x]) </tt> because now
--   it can't float outside the lambda.</li>
--   </ul>
--   
--   |
unsafePerformST :: ST s a -> a
