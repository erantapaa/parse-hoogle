-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A driver for the Factual API
--   
--   This is a driver for the Factual API. It provides a type-safe, easy
--   way to generate queries, setup OAuth authentication and send queries
--   to the API.
@package factual-api
@version 0.6.1


-- | This module exports the SortOrder type used to create read and facet
--   queries.
module Data.Factual.Shared.SortOrder

-- | The SortOrder type is used to represent sorting parameters
data SortOrder
Asc :: String -> SortOrder
Desc :: String -> SortOrder
sortPair :: [SortOrder] -> (String, String)
instance Eq SortOrder
instance Show SortOrder


-- | This module exports the Geo type used to create read and facet
--   queries.
module Data.Factual.Shared.Geo

-- | A Lat is the latitude represented as a Double.
type Lat = Double

-- | A Long is the longitude represented as a Double.
type Long = Double

-- | A Radius is the radius of the circle as a Double in meters.
type Radius = Double

-- | The Geo type is used to limit the search to specific geograph
--   location. Currently, only circles are supported. Supply a latitude,
--   longitude and radius in meters for the circle.
data Geo
Circle :: Lat -> Long -> Radius -> Geo
Point :: Lat -> Long -> Geo
geoPair :: Maybe Geo -> (String, String)
instance Eq Geo
instance Show Geo


-- | This module exports the Filter type used to create read and facet
--   queries.
module Data.Factual.Shared.Filter

-- | A Field is a String representation of the field name.
type Field = String

-- | The Filter type is used to represent various filters in a read or
--   facets query.
data Filter

-- | A numeric field has to match a number exactly.
EqualNum :: Field -> Double -> Filter

-- | A string field has to match a string exactly.
EqualStr :: Field -> String -> Filter

-- | A numeric field must equal a specific number.
NotEqualNum :: Field -> Double -> Filter

-- | A string field must equal a specific string.
NotEqualStr :: Field -> String -> Filter

-- | A numeric field must be equal to any of the numbers in a list.
InNumList :: Field -> [Double] -> Filter

-- | A string field must be equal to any of the strings in a list.
InStrList :: Field -> [String] -> Filter

-- | A numeric field must not be equal to any of the numbers in a list.
NotInNumList :: Field -> [Double] -> Filter

-- | A string field must not be equal to any of the strings in a list.
NotInStrList :: Field -> [String] -> Filter

-- | A string field must begin with a specific string.
BeginsWith :: Field -> String -> Filter

-- | A string field must not begin with a specific string.
NotBeginsWith :: Field -> String -> Filter

-- | A string field must begin with any of the strings in a list.
BeginsWithAny :: Field -> [String] -> Filter

-- | A string field must not begin with any of the strings in a list.
NotBeginsWithAny :: Field -> [String] -> Filter

-- | A field must be blank.
IsBlank :: Field -> Filter

-- | A field must not be blank.
IsNotBlank :: Field -> Filter

-- | A field must be greater than the given value.
GreaterThan :: Field -> Double -> Filter

-- | A field must be greater than or equal to the given value.
GreaterThanOrEqualTo :: Field -> Double -> Filter

-- | A field must be less than the given value.
LessThan :: Field -> Double -> Filter

-- | A field must be less than or equal to the given value.
LessThanOrEqualTo :: Field -> Double -> Filter

-- | A field must match of full text search with the given string.
SearchFilter :: Field -> String -> Filter

-- | Form an AND condition with the filters in the list.
And :: [Filter] -> Filter

-- | Form an OR condition with the filters in the list.
Or :: [Filter] -> Filter
filtersPair :: [Filter] -> (String, String)
instance Eq Filter
instance Show Filter


-- | This module exports the Search type used to create read and facet
--   queries.
module Data.Factual.Shared.Search

-- | This type is used to construct an ANDed or ORed search in a query.
data Search
AndSearch :: [String] -> Search
OrSearch :: [String] -> Search
NoSearch :: Search
searchPair :: Search -> (String, String)
instance Eq Search
instance Show Search


-- | This module exports the type used to represent a table for the read or
--   schema query types.
module Data.Factual.Shared.Table

-- | This type defines the available tables. Use the Custom table option
--   for tables that are not listed you.
data Table
Places :: Table
RestaurantsUS :: Table
HotelsUS :: Table
Global :: Table
Crosswalk :: Table
HealthCareProviders :: Table
WorldGeographies :: Table
ProductsCPG :: Table
ProductsCrosswalk :: Table
Monetize :: Table
Custom :: String -> Table
instance Eq Table
instance Show Table


-- | This module exports the type which encapsulates Factual API responses.
--   It also provides some utility function that can be used to manipulate
--   the Aeson object which holds the data.
module Data.Factual.Response

-- | A response object has a status (that will be ok if the query was
--   successful and error if the query failed), a version (which should
--   always be 3.0) and the actual response data which is an Aeson value.
data Response
Response :: String -> Double -> Value -> Maybe String -> Maybe String -> Response
status :: Response -> String
version :: Response -> Double
response :: Response -> Value
errorMessage :: Response -> Maybe String
errorType :: Response -> Maybe String

-- | This function is used by the API module to turn the Aeson value
--   returned by the API into a Response value.
fromValue :: Value -> Response

-- | This function can be used to convert an Aeson Array value into a
--   vanilla list.
toList :: Value -> [Value]

-- | This function can be used to extract a Double from an Aeson Object
--   (HashMap) value.
lookupNumber :: String -> Value -> Double

-- | This function can be used to extract a String from an Aeson Object
--   (HashMap) value.
lookupString :: String -> Value -> String

-- | This function can be used to extract any Aeson value from an Aeson
--   Object (HashMap) value.
lookupValue :: String -> Value -> Value

-- | This function can be used to safely extract any Aeson value from an
--   Aeson Object (HashMap) value.
lookupValueSafe :: String -> Value -> Maybe Value

-- | A JSON value represented as a Haskell value.
data Value :: *
instance Eq Response
instance Show Response


-- | This module exports the definition of the Write typeclass.
module Data.Factual.Write

-- | A member of the Write typeclass must define a path function which
--   returns the write path as a String, a params function that outputs any
--   addition path params as a Map, and a body function which returns Map
--   of the data passed in the body of the post request.
class Write w
path :: Write w => w -> String
params :: Write w => w -> Map String String
body :: Write w => w -> Map String String


-- | This module exports the types used to clear fields.
module Data.Factual.Write.Clear

-- | The Clear type represents a Write to be made to the API which will
--   clear certain fields from an entry. The table and factualId identify
--   the row to be changed, and the fields list indicates which fields to
--   clear out. A user must be specified as well.
data Clear
Clear :: Table -> String -> [String] -> String -> Clear
table :: Clear -> Table
factualId :: Clear -> String
fields :: Clear -> [String]
user :: Clear -> String
instance Eq Clear
instance Show Clear
instance Write Clear


-- | This module exports the types used to create flag writes.
module Data.Factual.Write.Flag

-- | The Flag type represents a Write to be made to the API which flags a
--   row as having some kind of problem. The table and factualId identify
--   the problematic row, while the problem indicates the type of issue the
--   row has. The user is specified as a string. Other fields such as
--   comment and reference are optional. The debug flag is used to write in
--   debug mode.
data Flag
Flag :: Table -> String -> Problem -> String -> Maybe String -> Maybe String -> Maybe [String] -> Maybe String -> Flag
table :: Flag -> Table
factualId :: Flag -> String
problem :: Flag -> Problem
user :: Flag -> String
comment :: Flag -> Maybe String
dataJSON :: Flag -> Maybe String
fields :: Flag -> Maybe [String]
reference :: Flag -> Maybe String

-- | A Problem represents what is wrong with the row being flagged
data Problem
Duplicate :: Problem
Nonexistent :: Problem
Inaccurate :: Problem
Inappropriate :: Problem
Spam :: Problem
Other :: Problem
instance Eq Problem
instance Show Problem
instance Eq Flag
instance Show Flag
instance Write Flag


-- | This module exports the types used to create submits.
module Data.Factual.Write.Submit

-- | The Submit type represents a Write to the API which performs an upsert
--   (a row can be updated or a new row can be written). The table and user
--   must be specified, while the factual ID, reference, and comment are
--   optional (omitted for new rows). Finally the values are specified in a
--   String to String Map.
data Submit
Submit :: Table -> String -> Maybe String -> Map String String -> Maybe String -> Maybe String -> Submit
table :: Submit -> Table
user :: Submit -> String
factualId :: Submit -> Maybe String
values :: Submit -> Map String String
reference :: Submit -> Maybe String
comment :: Submit -> Maybe String
instance Eq Submit
instance Show Submit
instance Write Submit


-- | This module exports the types used to create inserts.
module Data.Factual.Write.Insert

-- | The Insert type represents a Write to the API which performs an upsert
--   (a row can be updated or a new row can be written). The table and user
--   must be specified, while the factual ID is optional (omitted for new
--   rows). Finally the values are specified in a String to String Map.
data Insert
Insert :: Table -> String -> Maybe String -> Map String String -> Insert
table :: Insert -> Table
user :: Insert -> String
factualId :: Insert -> Maybe String
values :: Insert -> Map String String
instance Eq Insert
instance Show Insert
instance Write Insert


-- | This module exports the definition of the Query typeclass.
module Data.Factual.Query

-- | A member of the Query typeclass must define a path function which
--   outputs the Query endpoint path, and a params function that outputs a
--   Map of query params keys and values.
class Query q
path :: Query q => q -> String
params :: Query q => q -> Map String String


-- | This module exports the types used to create diffs queries.
module Data.Factual.Query.DiffsQuery

-- | The DiffsQuery type is used to construct diffs queries. A table, start
--   timestamp and end timestamp should be specified.
data DiffsQuery
DiffsQuery :: Table -> Timestamp -> Timestamp -> DiffsQuery
table :: DiffsQuery -> Table
start :: DiffsQuery -> Timestamp
end :: DiffsQuery -> Timestamp
instance Eq DiffsQuery
instance Show DiffsQuery
instance Query DiffsQuery


-- | This module exports the types used to create facets queries.
module Data.Factual.Query.FacetsQuery

-- | The FacetsQuery type is used to construct facets queries. A table and
--   search should be specified, but the rest of the query options are
--   essentially optional.
data FacetsQuery
FacetsQuery :: Table -> Search -> [String] -> [Filter] -> Maybe Geo -> Maybe Int -> Maybe Int -> Bool -> FacetsQuery
table :: FacetsQuery -> Table
search :: FacetsQuery -> Search
select :: FacetsQuery -> [String]
filters :: FacetsQuery -> [Filter]
geo :: FacetsQuery -> Maybe Geo
limit :: FacetsQuery -> Maybe Int
minCount :: FacetsQuery -> Maybe Int
includeCount :: FacetsQuery -> Bool
instance Eq FacetsQuery
instance Show FacetsQuery
instance Query FacetsQuery


-- | This module exports the type used to create geopulse queries.
module Data.Factual.Query.GeocodeQuery

-- | The GeocodeQuery type is used to construct geocode queries. A geo
--   point is required.
data GeocodeQuery
GeocodeQuery :: Geo -> GeocodeQuery
instance Eq GeocodeQuery
instance Show GeocodeQuery
instance Query GeocodeQuery


-- | This module exports the type used to create geopulse queries.
module Data.Factual.Query.GeopulseQuery

-- | The GeopulseQuery type is used to construct geopulse queries. A geo
--   point is required but select values are optional (just use an empty
--   list to denote selecting all pulses).
data GeopulseQuery
GeopulseQuery :: Geo -> [String] -> GeopulseQuery
geo :: GeopulseQuery -> Geo
select :: GeopulseQuery -> [String]
instance Eq GeopulseQuery
instance Show GeopulseQuery
instance Query GeopulseQuery


-- | This module exports the type used to create match queries.
module Data.Factual.Query.MatchQuery

-- | A match query is formed as an array of match values. These values will
--   be compared with Factual records to return a cleaner, more canonical
--   row of data.
data MatchQuery
MatchQuery :: [MatchValue] -> MatchQuery

-- | A match value can either be a String or a Number (Double). The first
--   argument is the name of the field and the second argument is the input
--   value.
data MatchValue
MatchStr :: String -> String -> MatchValue
MatchNum :: String -> Double -> MatchValue
instance Eq MatchValue
instance Eq MatchQuery
instance Query MatchQuery
instance Show MatchValue


-- | This module exports the types used to create read queries.
module Data.Factual.Query.ReadQuery

-- | The ReadQuery type is used to construct read queries. A table should
--   be specified, but the rest of the query options are essentially
--   optional (you opt out using Nothing or an empty List for the value).
--   The select is a list of field names to include in the results. The
--   limit and offset are used to request a specific range of rows and
--   includeCount will include the count of returned rows if it is set to
--   True.
data ReadQuery
ReadQuery :: Table -> Search -> [String] -> Maybe Int -> Maybe Int -> [Filter] -> Maybe Geo -> [SortOrder] -> Bool -> ReadQuery
table :: ReadQuery -> Table
search :: ReadQuery -> Search
select :: ReadQuery -> [String]
limit :: ReadQuery -> Maybe Int
offset :: ReadQuery -> Maybe Int
filters :: ReadQuery -> [Filter]
geo :: ReadQuery -> Maybe Geo
sort :: ReadQuery -> [SortOrder]
includeCount :: ReadQuery -> Bool
instance Eq ReadQuery
instance Show ReadQuery
instance Query ReadQuery


-- | This module exports the type used to create resolve queries.
module Data.Factual.Query.ResolveQuery

-- | A resolve query is formed as an array of resolve values. These values
--   will be compared with Factual records to return a cleaner, more
--   canonical row of data.
data ResolveQuery
ResolveQuery :: [ResolveValue] -> Bool -> ResolveQuery
values :: ResolveQuery -> [ResolveValue]
debug :: ResolveQuery -> Bool

-- | A resolve value can either be a String or a Number (Double). The first
--   argument is the name of the field and the second argument is the input
--   value.
data ResolveValue
ResolveStr :: String -> String -> ResolveValue
ResolveNum :: String -> Double -> ResolveValue
instance Eq ResolveValue
instance Eq ResolveQuery
instance Query ResolveQuery
instance Show ResolveValue


-- | This module exports the type used to create schema queries.
module Data.Factual.Query.SchemaQuery

-- | A schema query is formed by simply supplying a Table to the value
--   constructor.
data SchemaQuery
SchemaQuery :: Table -> SchemaQuery
instance Eq SchemaQuery
instance Show SchemaQuery
instance Query SchemaQuery


-- | This module exports functions which are used to execute requests and
--   handle the OAuth authentication process.
module Network.Factual.API

-- | This function takes a Key and Secret, and generates a Token that is
--   passed to the various methods used to make requests.
generateToken :: Key -> Secret -> Token

-- | This function takes Options and a Query value and sends the query to
--   the Factual API. The resultant IO action contains a Response value
--   which wraps the resultant data.
executeQuery :: Query query => Options -> query -> IO Response

-- | This function can be used to make a Multi Query (multiple queries in a
--   single request. It takes Options, a Map of key Strings to Queries and
--   returns a Map from the same keys to Response values.
executeMultiQuery :: Query query => Options -> Map String query -> IO (Map String Response)

-- | This function can be used to perform raw read queries to any API
--   endpoint. It takes Options, a Path string and a Map of params (both
--   keys and values are strings). The function returns a standard Response
--   value.
get :: Options -> Path -> Params -> IO Response

-- | This function is used to execute Writes. The function takes Options
--   and a Write value, and returns a Response value.
executeWrite :: Write write => Options -> write -> IO Response

-- | This function can be used to perform raw post queries to any API
--   endpoint. It takes Options, a Path string, a Map of params and a body
--   Map. Both Maps have String keys and values. The function returns a
--   standard Response value.
post :: Options -> Path -> Params -> Body -> IO Response

-- | This function can be used to debug Queries. It takes a Query value and
--   prints out the URL path generated by that query.
debugQuery :: Query query => query -> IO ()

-- | This function can be used to debug Writes. It takes a Write value and
--   prints out the URL path, and post body generated by that write.
debugWrite :: Write write => write -> IO ()

-- | Options is used to store the Token and a potential timeout
data Options
Options :: Token -> Maybe Long -> Options
token :: Options -> Token
timeout :: Options -> Maybe Long
type Long = Word32

-- | The OAuth Token.
data Token :: *

-- | This token is used to perform 2 legged OAuth requests.
TwoLegg :: Application -> FieldList -> Token
application :: Token -> Application
oauthParams :: Token -> FieldList

-- | The service provider has granted you the request token but the user
--   has not yet authorized your application. You need to exchange this
--   token by a proper AccessToken, but this may only happen after user has
--   granted you permission to do so.
ReqToken :: Application -> FieldList -> Token
application :: Token -> Application
oauthParams :: Token -> FieldList

-- | This is a proper 3 legged OAuth. The difference between this and
--   ReqToken is that user has authorized your application and you can
--   perform requests on behalf of that user.
AccessToken :: Application -> FieldList -> Token
application :: Token -> Application
oauthParams :: Token -> FieldList
urlEncode :: String -> String
