-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Happy Network Manager
--   
--   A quick and dirty applet to help you connect to wireless networks.
@package HNM
@version 0.1.2


-- | WLAN Commands
module HNM.WLAN
ignore :: Monad m => m a -> m ()
assu :: IO a -> IO a -> IO a
userIsRoot :: IO Bool
run :: String -> IO String
type Key = String
type SSID = String
type MAC = String
type Interface = String
type Cell = String
type IP = String
type AP = String
type Driver = String
getDefaultInterface :: IO Interface
getInterfaces :: IO [Interface]
scan :: Interface -> IO [Cell]
getCells :: String -> [Cell]

-- | WLAN encryption values
data Encryption

-- | no encryption
None :: Encryption

-- | WEP encryption
WEP :: Encryption

-- | WPA encryption
WPA :: Version -> Encryption

-- | WPA version
data Version
One :: Version
Two :: Version
type Quality = Int
type Unit = (MAC, Quality)
data CWLAN
CWLAN :: SSID -> Encryption -> [Unit] -> CWLAN
cessid :: CWLAN -> SSID
cencrypt :: CWLAN -> Encryption
ccell :: CWLAN -> [Unit]
meanQuality :: [Quality] -> Quality
mean :: Fractional a => [a] -> a
data WLAN
WLAN :: SSID -> Quality -> Encryption -> MAC -> WLAN
essid :: WLAN -> SSID
quality :: WLAN -> Quality
encryption :: WLAN -> Encryption
mac :: WLAN -> MAC
compact :: [WLAN] -> [CWLAN]
cellToWLAN :: Cell -> WLAN

-- | given an interface, returns a list of wireless lans
getWLANs :: Interface -> IO [WLAN]
getLocalIP :: Interface -> IO IP
getESSID :: Interface -> IO SSID
getAP :: Interface -> IO AP
data ConnectionStatus
NotConnected :: ConnectionStatus
Connected :: IP -> SSID -> ConnectionStatus
getConnectionStatus :: Interface -> IO ConnectionStatus
matching :: String -> String -> String
debug :: Show a => a -> a
exec :: String -> IO ()
pcom :: String -> [String] -> IO ()
modprobe :: [String] -> IO ()
iwconfig :: [String] -> IO ()
ifconfig :: [String] -> IO ()
dhclient :: [String] -> IO ()
wpa_supplicant :: [String] -> IO ()
initHardware :: Driver -> Interface -> IO ()
deactivate :: Driver -> Interface -> IO ()
activate :: Driver -> Interface -> IO ()
disconnect :: Interface -> IO ()
connectFree :: Interface -> SSID -> IO ()
connect :: Interface -> ConnectionSetting -> IO ()
wpaconfig :: [String] -> IO ()
wpa_temp :: FilePath
data ConnectionSetting
Wireless :: SSID -> (Maybe (Encryption, Key)) -> ConnectionSetting
instance Show ConnectionSetting
instance Read ConnectionSetting
instance Eq ConnectionSetting
instance Ord ConnectionSetting
instance Show ConnectionStatus
instance Read ConnectionStatus
instance Eq ConnectionStatus
instance Ord ConnectionStatus
instance Show WLAN
instance Read WLAN
instance Eq WLAN
instance Ord WLAN
instance Show CWLAN
instance Read CWLAN
instance Eq CWLAN
instance Ord CWLAN
instance Show Version
instance Read Version
instance Eq Version
instance Ord Version
instance Show Encryption
instance Read Encryption
instance Eq Encryption
instance Ord Encryption
