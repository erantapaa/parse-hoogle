-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Low level bindings to FANN neural network library.
--   
--   Low level bindings to FANN neural network library.
@package bindings-fann
@version 0.0.2


-- | <a>http://leenissen.dk/fann/fann_1_2_0/x1595.html</a>
module Bindings.Fann.DataStructures
data C'fann
C'fann :: C'fann
data C'fann_train_data
C'fann_train_data :: C'fann_train_data
data C'fann_error
C'fann_error :: C'fann_error
data C'fann_neuron
C'fann_neuron :: C'fann_neuron
data C'fann_layer
C'fann_layer :: C'fann_layer


-- | <a>http://leenissen.dk/fann/fann_1_2_0/x1499.html</a>
module Bindings.Fann.ErrorHandling
c'fann_get_errno :: Ptr C'fann_error -> IO CUInt
c'fann_get_errstr :: Ptr C'fann_error -> IO CString
c'fann_reset_errno :: Ptr C'fann_error -> IO ()
p'fann_get_errno :: FunPtr (Ptr C'fann_error -> IO CUInt)
c'fann_reset_errstr :: Ptr C'fann_error -> IO ()
p'fann_get_errstr :: FunPtr (Ptr C'fann_error -> IO CString)
p'fann_reset_errno :: FunPtr (Ptr C'fann_error -> IO ())
c'fann_set_error_log :: Ptr C'fann_error -> Ptr CFile -> IO ()
c'fann_print_error :: Ptr C'fann -> IO ()
p'fann_reset_errstr :: FunPtr (Ptr C'fann_error -> IO ())
p'fann_set_error_log :: FunPtr (Ptr C'fann_error -> Ptr CFile -> IO ())
p'fann_print_error :: FunPtr (Ptr C'fann -> IO ())


-- | <a>http://leenissen.dk/fann/fann_1_2_0/x472.html</a>
module Bindings.Fann.InputOutput
c'fann_save :: Ptr C'fann -> CString -> IO ()
c'fann_save_to_fixed :: Ptr C'fann -> CString -> IO ()
c'fann_create_from_file :: CString -> IO (Ptr C'fann)
p'fann_save :: FunPtr (Ptr C'fann -> CString -> IO ())
p'fann_save_to_fixed :: FunPtr (Ptr C'fann -> CString -> IO ())
p'fann_create_from_file :: FunPtr (CString -> IO (Ptr C'fann))


-- | <a>http://leenissen.dk/fann/fann_1_2_0/x938.html</a>
module Bindings.Fann.Options
c'fann_print_parameters :: Ptr C'fann -> IO ()
c'fann_get_training_algorithm :: Ptr C'fann -> IO CUInt
c'fann_set_training_algorithm :: Ptr C'fann -> CUInt -> IO ()
p'fann_print_parameters :: FunPtr (Ptr C'fann -> IO ())
c'fann_get_learning_rate :: Ptr C'fann -> IO CFloat
p'fann_get_training_algorithm :: FunPtr (Ptr C'fann -> IO CUInt)
c'fann_set_learning_rate :: Ptr C'fann -> CFloat -> IO ()
p'fann_set_training_algorithm :: FunPtr (Ptr C'fann -> CUInt -> IO ())
c'fann_get_activation_function_hidden :: Ptr C'fann -> IO CUInt
p'fann_get_learning_rate :: FunPtr (Ptr C'fann -> IO CFloat)
c'fann_set_activation_function_hidden :: Ptr C'fann -> CUInt -> IO ()
p'fann_set_learning_rate :: FunPtr (Ptr C'fann -> CFloat -> IO ())
c'fann_get_activation_function_output :: Ptr C'fann -> IO CUInt
p'fann_get_activation_function_hidden :: FunPtr (Ptr C'fann -> IO CUInt)
c'fann_set_activation_function_output :: Ptr C'fann -> CUInt -> IO ()
p'fann_set_activation_function_hidden :: FunPtr (Ptr C'fann -> CUInt -> IO ())
c'fann_get_activation_steepness_hidden :: Ptr C'fann -> IO CFloat
p'fann_get_activation_function_output :: FunPtr (Ptr C'fann -> IO CUInt)
c'fann_set_activation_steepness_hidden :: Ptr C'fann -> CFloat -> IO ()
p'fann_set_activation_function_output :: FunPtr (Ptr C'fann -> CUInt -> IO ())
c'fann_get_activation_steepness_output :: Ptr C'fann -> IO CFloat
p'fann_get_activation_steepness_hidden :: FunPtr (Ptr C'fann -> IO CFloat)
c'fann_set_activation_steepness_output :: Ptr C'fann -> CFloat -> IO ()
p'fann_set_activation_steepness_hidden :: FunPtr (Ptr C'fann -> CFloat -> IO ())
c'fann_set_train_error_function :: Ptr C'fann -> CUInt -> IO ()
p'fann_get_activation_steepness_output :: FunPtr (Ptr C'fann -> IO CFloat)
c'fann_get_train_error_function :: Ptr C'fann -> IO CUInt
p'fann_set_activation_steepness_output :: FunPtr (Ptr C'fann -> CFloat -> IO ())
c'fann_get_quickprop_decay :: Ptr C'fann -> IO CFloat
p'fann_set_train_error_function :: FunPtr (Ptr C'fann -> CUInt -> IO ())
c'fann_set_quickprop_decay :: Ptr C'fann -> CFloat -> IO ()
p'fann_get_train_error_function :: FunPtr (Ptr C'fann -> IO CUInt)
c'fann_get_quickprop_mu :: Ptr C'fann -> IO CFloat
p'fann_get_quickprop_decay :: FunPtr (Ptr C'fann -> IO CFloat)
c'fann_set_quickprop_mu :: Ptr C'fann -> CFloat -> IO ()
p'fann_set_quickprop_decay :: FunPtr (Ptr C'fann -> CFloat -> IO ())
c'fann_get_rprop_increase_factor :: Ptr C'fann -> IO CFloat
p'fann_get_quickprop_mu :: FunPtr (Ptr C'fann -> IO CFloat)
c'fann_set_rprop_increase_factor :: Ptr C'fann -> CFloat -> IO ()
p'fann_set_quickprop_mu :: FunPtr (Ptr C'fann -> CFloat -> IO ())
c'fann_get_rprop_decrease_factor :: Ptr C'fann -> IO CFloat
p'fann_get_rprop_increase_factor :: FunPtr (Ptr C'fann -> IO CFloat)
c'fann_set_rprop_decrease_factor :: Ptr C'fann -> CFloat -> IO ()
p'fann_set_rprop_increase_factor :: FunPtr (Ptr C'fann -> CFloat -> IO ())
c'fann_get_rprop_delta_min :: Ptr C'fann -> IO CFloat
p'fann_get_rprop_decrease_factor :: FunPtr (Ptr C'fann -> IO CFloat)
c'fann_set_rprop_delta_min :: Ptr C'fann -> CFloat -> IO ()
p'fann_set_rprop_decrease_factor :: FunPtr (Ptr C'fann -> CFloat -> IO ())
c'fann_get_rprop_delta_max :: Ptr C'fann -> IO CFloat
p'fann_get_rprop_delta_min :: FunPtr (Ptr C'fann -> IO CFloat)
c'fann_set_rprop_delta_max :: Ptr C'fann -> CFloat -> IO ()
p'fann_set_rprop_delta_min :: FunPtr (Ptr C'fann -> CFloat -> IO ())
c'fann_get_num_input :: Ptr C'fann -> IO CUInt
p'fann_get_rprop_delta_max :: FunPtr (Ptr C'fann -> IO CFloat)
c'fann_get_num_output :: Ptr C'fann -> IO CUInt
p'fann_set_rprop_delta_max :: FunPtr (Ptr C'fann -> CFloat -> IO ())
c'fann_get_total_neurons :: Ptr C'fann -> IO CUInt
p'fann_get_num_input :: FunPtr (Ptr C'fann -> IO CUInt)
c'fann_get_total_connections :: Ptr C'fann -> IO CUInt
p'fann_get_num_output :: FunPtr (Ptr C'fann -> IO CUInt)
p'fann_get_total_neurons :: FunPtr (Ptr C'fann -> IO CUInt)
p'fann_get_total_connections :: FunPtr (Ptr C'fann -> IO CUInt)


-- | <a>http://leenissen.dk/fann/fann_1_2_0/x609.html</a>
module Bindings.Fann.TrainingData
c'fann_read_train_from_file :: CString -> IO (Ptr C'fann_train_data)
c'fann_save_train :: Ptr C'fann_train_data -> Ptr CFile -> IO ()
p'fann_read_train_from_file :: FunPtr (CString -> IO (Ptr C'fann_train_data))
c'fann_save_train_to_fixed :: Ptr C'fann_train_data -> Ptr CFile -> CUInt -> IO ()
c'fann_destroy_train :: Ptr C'fann_train_data -> IO ()
p'fann_save_train :: FunPtr (Ptr C'fann_train_data -> Ptr CFile -> IO ())
c'fann_train_epoch :: Ptr C'fann -> Ptr C'fann_train_data -> IO CFloat
p'fann_save_train_to_fixed :: FunPtr (Ptr C'fann_train_data -> Ptr CFile -> CUInt -> IO ())
p'fann_destroy_train :: FunPtr (Ptr C'fann_train_data -> IO ())
c'fann_test_data :: Ptr C'fann -> Ptr C'fann_train_data -> IO CFloat
p'fann_train_epoch :: FunPtr (Ptr C'fann -> Ptr C'fann_train_data -> IO CFloat)
c'fann_train_on_data :: Ptr C'fann -> Ptr C'fann_train_data -> CUInt -> CUInt -> CFloat -> IO ()
p'fann_test_data :: FunPtr (Ptr C'fann -> Ptr C'fann_train_data -> IO CFloat)
c'fann_train_on_data_callback :: Ptr C'fann -> Ptr C'fann_train_data -> CUInt -> CUInt -> CFloat -> FunPtr (CUInt -> CFloat -> IO CInt) -> IO ()
c'fann_train_on_file :: Ptr C'fann -> CString -> CUInt -> CUInt -> CFloat -> IO ()
p'fann_train_on_data :: FunPtr (Ptr C'fann -> Ptr C'fann_train_data -> CUInt -> CUInt -> CFloat -> IO ())
c'fann_train_on_file_callback :: Ptr C'fann -> CString -> CUInt -> CUInt -> CFloat -> FunPtr (CUInt -> CFloat -> IO CInt) -> IO ()
p'fann_train_on_data_callback :: FunPtr (Ptr C'fann -> Ptr C'fann_train_data -> CUInt -> CUInt -> CFloat -> FunPtr (CUInt -> CFloat -> IO CInt) -> IO ())
c'fann_shuffle_train_data :: Ptr C'fann_train_data -> IO ()
p'fann_train_on_file :: FunPtr (Ptr C'fann -> CString -> CUInt -> CUInt -> CFloat -> IO ())
c'fann_merge_train_data :: Ptr C'fann_train_data -> Ptr C'fann_train_data -> IO (Ptr C'fann_train_data)
p'fann_train_on_file_callback :: FunPtr (Ptr C'fann -> CString -> CUInt -> CUInt -> CFloat -> FunPtr (CUInt -> CFloat -> IO CInt) -> IO ())
p'fann_shuffle_train_data :: FunPtr (Ptr C'fann_train_data -> IO ())
c'fann_duplicate_train_data :: Ptr C'fann_train_data -> IO (Ptr C'fann_train_data)
p'fann_merge_train_data :: FunPtr (Ptr C'fann_train_data -> Ptr C'fann_train_data -> IO (Ptr C'fann_train_data))
p'fann_duplicate_train_data :: FunPtr (Ptr C'fann_train_data -> IO (Ptr C'fann_train_data))


-- | <a>http://leenissen.dk/fann/fann_1_2_0/x534.html</a>
module Bindings.Fann.Training
c'fann_train :: Ptr C'fann -> Ptr CFloat -> Ptr CFloat -> IO ()
c'fann_test :: Ptr C'fann -> Ptr CFloat -> Ptr CFloat -> IO (Ptr CFloat)
c'fann_get_MSE :: Ptr C'fann -> IO CFloat
p'fann_train :: FunPtr (Ptr C'fann -> Ptr CFloat -> Ptr CFloat -> IO ())
c'fann_reset_MSE :: Ptr C'fann -> IO ()
p'fann_test :: FunPtr (Ptr C'fann -> Ptr CFloat -> Ptr CFloat -> IO (Ptr CFloat))
p'fann_get_MSE :: FunPtr (Ptr C'fann -> IO CFloat)
p'fann_reset_MSE :: FunPtr (Ptr C'fann -> IO ())


-- | 
--   <a>http://leenissen.dk/fann/fann_1_2_0/c253.html#api.sec.create_destroy</a>
module Bindings.Fann.CreationDestructionExecution
c'fann_create_array :: CFloat -> CFloat -> CUInt -> Ptr CUInt -> IO (Ptr C'fann)
c'fann_create_shortcut_array :: CFloat -> CUInt -> Ptr CUInt -> IO (Ptr C'fann)
c'fann_destroy :: Ptr C'fann -> IO ()
p'fann_create_array :: FunPtr (CFloat -> CFloat -> CUInt -> Ptr CUInt -> IO (Ptr C'fann))
c'fann_run :: Ptr C'fann -> Ptr CFloat -> IO (Ptr CFloat)
p'fann_create_shortcut_array :: FunPtr (CFloat -> CUInt -> Ptr CUInt -> IO (Ptr C'fann))
p'fann_destroy :: FunPtr (Ptr C'fann -> IO ())
c'fann_randomize_weights :: Ptr C'fann -> CFloat -> CFloat -> IO ()
c'fann_init_weights :: Ptr C'fann -> Ptr C'fann_train_data -> IO ()
p'fann_run :: FunPtr (Ptr C'fann -> Ptr CFloat -> IO (Ptr CFloat))
c'fann_print_connections :: Ptr C'fann -> IO ()
p'fann_randomize_weights :: FunPtr (Ptr C'fann -> CFloat -> CFloat -> IO ())
p'fann_init_weights :: FunPtr (Ptr C'fann -> Ptr C'fann_train_data -> IO ())
p'fann_print_connections :: FunPtr (Ptr C'fann -> IO ())


-- | <a>http://leenissen.dk/fann/fann_1_2_0/x1994.html</a>
module Bindings.Fann.Constants
c'FANN_TRAIN_INCREMENTAL :: (Num a) => a
c'FANN_TRAIN_BATCH :: (Num a) => a
c'FANN_TRAIN_RPROP :: (Num a) => a
c'FANN_TRAIN_QUICKPROP :: (Num a) => a
c'FANN_THRESHOLD :: (Num a) => a
c'FANN_THRESHOLD_SYMMETRIC :: (Num a) => a
c'FANN_LINEAR :: (Num a) => a
c'FANN_SIGMOID :: (Num a) => a
c'FANN_SIGMOID_STEPWISE :: (Num a) => a
c'FANN_SIGMOID_SYMMETRIC :: (Num a) => a
c'FANN_SIGMOID_SYMMETRIC_STEPWISE :: (Num a) => a
c'FANN_ERRORFUNC_LINEAR :: (Num a) => a
c'FANN_ERRORFUNC_TANH :: (Num a) => a
c'FANN_E_NO_ERROR :: (Num a) => a
c'FANN_E_CANT_OPEN_CONFIG_R :: (Num a) => a
c'FANN_E_CANT_OPEN_CONFIG_W :: (Num a) => a
c'FANN_E_WRONG_CONFIG_VERSION :: (Num a) => a
c'FANN_E_CANT_READ_CONFIG :: (Num a) => a
c'FANN_E_CANT_READ_NEURON :: (Num a) => a
c'FANN_E_CANT_READ_CONNECTIONS :: (Num a) => a
c'FANN_E_WRONG_NUM_CONNECTIONS :: (Num a) => a
c'FANN_E_CANT_OPEN_TD_W :: (Num a) => a
c'FANN_E_CANT_OPEN_TD_R :: (Num a) => a
c'FANN_E_CANT_READ_TD :: (Num a) => a
c'FANN_E_CANT_ALLOCATE_MEM :: (Num a) => a
c'FANN_E_CANT_TRAIN_ACTIVATION :: (Num a) => a
c'FANN_E_CANT_USE_ACTIVATION :: (Num a) => a
c'FANN_E_TRAIN_DATA_MISMATCH :: (Num a) => a

module Bindings.Fann
