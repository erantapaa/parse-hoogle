-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | MULTEXT-East morphosyntactic descriptors
--   
--   Implementation of the MULTEXT-East morphosyntactic descriptors.
--   MULTEXT-East encodes values of morphosyntatic attributes in a single
--   string, using positional encoding. For details, refer to
--   <a>http://nl.ijs.si/ME</a>.
@package multext-east-msd
@version 0.1.0.4


-- | Implementation of the MULTEXT-East morphosyntactic descriptors.
--   
--   MULTEXT-East encodes values of morphosyntatic attributes in a single
--   string, using positional encoding. Each attribute is represented by a
--   single letter at a predefined position, while non-applicable
--   attributes are represented by hyphens. For example, <tt>Ncmsg</tt>
--   denotes a common noun (<tt>Nc</tt>) in masculine singular genitive
--   (<tt>msg</tt>) case. For details, refer to <a>http://nl.ijs.si/ME</a>.
--   
--   Currently, only MULTEXT-East Version 3 is supported. MULTEXT-East
--   Version 3 covers morphosyntactic descriptions for Bulgarian, Croatian,
--   Czech, English, Estonian, Hungarian, Lithuanian, Macedonian, Persian,
--   Polish, Resian, Romanian, Russian, Serbian, Slovak, Slovene, and
--   Ukrainian. For details, refer to <a>http://nl.ijs.si/ME/V3/</a>.
--   
--   Usage example:
--   
--   <pre>
--   &gt;&gt;&gt; let Just d1 = fromString "Ncmsg"
--   
--   &gt;&gt;&gt; pos d1
--   Noun
--   
--   &gt;&gt;&gt; features d1
--   [NType Common,Gender Masculine,Number Singular,Case Genitive]
--   
--   &gt;&gt;&gt; let d2 = unset NType d1
--   
--   &gt;&gt;&gt; toString d2
--   "N-msg"
--   
--   &gt;&gt;&gt; d1 == d2
--   False
--   
--   &gt;&gt;&gt; d1 =~= d2
--   True
--   </pre>
module Data.MultextEastMsd
data Msd

-- | Constructs a morphosyntactic descriptor (an abstract <tt>Msd</tt>
--   datatype) of a specified part-of-speech and with specified features
--   (attribute-value pairs). Duplicated attributes and attributes not
--   applicable to the given part-of-speech are ignored.
msd :: PoS -> [Feature] -> Msd
data PoS
Noun :: PoS
Verb :: PoS
Adjective :: PoS
Adposition :: PoS
Conjunction :: PoS
Numeral :: PoS
type Attribute a = a -> Feature

-- | Gets the value of a specified attribute.
get :: Enum a => Attribute a -> Msd -> Maybe Feature

-- | Sets the specified features (attribute-value pairs). Duplicated
--   attributes and attributes not applicable to the given part-of-speech
--   are ignored.
set :: [Feature] -> Msd -> Msd

-- | Unsets the value of a specified attribute.
unset :: Enum a => Attribute a -> Msd -> Msd

-- | Checks whether the attributes are set to the specified values.
check :: [Feature] -> Msd -> Bool

-- | Returns the features (attribute-value pairs) of a <tt>Msd</tt>.
features :: Msd -> [Feature]

-- | Returns a part-of-speech (<a>PoS</a> value) of an <tt>Msd</tt>.
pos :: Msd -> PoS

-- | A wildcard-matching operator between two Msd patterns. Relation <tt>
--   msd1 =~= msd2 </tt> holds iff <tt>msd1</tt> and <tt>msd2</tt> are of
--   the same part-of-speech and the attributes common to <tt>msd1</tt> and
--   <tt>msd2</tt> have identical values. The attributes of <tt>msd1</tt>
--   that are not set in <tt>msd2</tt> (and conversely) are ignored in the
--   comparison. In MULTEXT-East notation, this is tantamount to having
--   character code <tt>-</tt> (hyphen) act as a wildcard.
(=~=) :: MsdPattern a => a -> a -> Bool

-- | Converts an <tt>Msd</tt> datatype into a MULTEXT-East string notation.
toString :: Msd -> String

-- | Converts a MULTEXT-East string notation into an <tt>Msd</tt> datatype.
--   Returns <tt>Nothing</tt> if string is not a valid MULTEXT-East string.
fromString :: String -> Maybe Msd

-- | Checks whether the string conforms to the MULTEXT-East specification.
--   Defined as: <tt> validString = isJust . fromString </tt>
validString :: String -> Bool
data Feature
Animate :: Bool -> Feature
AType :: AType -> Feature
Aspect :: Aspect -> Feature
Case :: Case -> Feature
Class :: Class -> Feature
Clitic :: Bool -> Feature
CliticS :: Bool -> Feature
CoordType :: CoordType -> Feature
Courtesy :: Bool -> Feature
CType :: CType -> Feature
Definiteness :: Definiteness -> Feature
Degree :: Degree -> Feature
Formation :: Formation -> Feature
Gender :: Gender -> Feature
MForm :: MForm -> Feature
MType :: MType -> Feature
Negative :: Bool -> Feature
NType :: NType -> Feature
Number :: Number -> Feature
OwnedNumber :: Number -> Feature
OwnerNumber :: Number -> Feature
OwnerPerson :: Person -> Feature
Person :: Person -> Feature
SType :: SType -> Feature
SubType :: SubType -> Feature
Tense :: Tense -> Feature
VForm :: VForm -> Feature
Voice :: Voice -> Feature
VType :: VType -> Feature
data AType
Qualificative :: AType
Indefinite :: AType
Possessive :: AType
OrdinalT :: AType
data Aspect
Progressive :: Aspect
Perfective :: Aspect
data Case
Nominative :: Case
Genitive :: Case
Dative :: Case
Accusative :: Case
Vocative :: Case
Locative :: Case
Instrumental :: Case
Direct :: Case
Oblique :: Case
Partitive :: Case
Illative :: Case
Inessive :: Case
Elative :: Case
Allative :: Case
Adessive :: Case
Ablative :: Case
Translative :: Case
Terminative :: Case
Essive :: Case
Abessive :: Case
Komitative :: Case
Aditive :: Case
Temporalis :: Case
Causalis :: Case
Sublative :: Case
Delative :: Case
Sociative :: Case
Factive :: Case
Superessive :: Case
Distributive :: Case
EssiveFormal :: Case
Multiplicative :: Case
data Class
Definite1 :: Class
Definite2 :: Class
Definite34 :: Class
Definite :: Class
Demonstrative :: Class
IndefiniteC :: Class
Interrogative :: Class
Relative :: Class
data CoordType
CTSimple :: CoordType
CTRepetit :: CoordType
CTCorrelat :: CoordType
CTSentence :: CoordType
CTWords :: CoordType
Initial :: CoordType
NonInitial :: CoordType
data CType
Coordinating :: CType
Subordinating :: CType
Portmanteau :: CType
data Definiteness
No :: Definiteness
Yes :: Definiteness
ShortArt :: Definiteness
FullArt :: Definiteness
OneSTwoS :: Definiteness
data Degree
Positive :: Degree
Comparative :: Degree
Superlative :: Degree
ElativeD :: Degree
Diminutive :: Degree
data Formation
Nominal :: Formation
Simple :: Formation
Compound :: Formation
data Gender
Masculine :: Gender
Feminine :: Gender
Neuter :: Gender
data MForm
Digit :: MForm
Roman :: MForm
Letter :: MForm
Both :: MForm
MForm_ :: MForm
Approx :: MForm
data MType
Cardinal :: MType
Ordinal :: MType
Fractal :: MType
Multiple :: MType
Collect :: MType
Special :: MType
data NType
Common :: NType
Proper :: NType
data Number
Singular :: Number
Plural :: Number
Dual :: Number
Count :: Number
Collective :: Number
data Person
First :: Person
Second :: Person
Third :: Person
data SType
Preposition :: SType
Postposition :: SType
data SubType
STNegative :: SubType
STPositive :: SubType
data Tense
Present :: Tense
Imperfect :: Tense
Future :: Tense
Past :: Tense
Pluperfect :: Tense
Aorist :: Tense
data VForm
Indicative :: VForm
Subjunctive :: VForm
Imperative :: VForm
Conditional :: VForm
Infinitive :: VForm
Participle :: VForm
Gerund :: VForm
Supine :: VForm
Transgressive :: VForm
Quotative :: VForm
data Voice
Active :: Voice
Passive :: Voice
data VType
Main :: VType
Auxiliary :: VType
Modal :: VType
Copula :: VType
Base :: VType
instance Eq PoS
instance Enum PoS
instance Show PoS
instance Eq NType
instance Enum NType
instance Ord NType
instance Show NType
instance Eq Gender
instance Enum Gender
instance Ord Gender
instance Show Gender
instance Eq Number
instance Enum Number
instance Ord Number
instance Show Number
instance Eq Case
instance Enum Case
instance Ord Case
instance Show Case
instance Eq Definiteness
instance Enum Definiteness
instance Ord Definiteness
instance Show Definiteness
instance Eq VType
instance Enum VType
instance Ord VType
instance Show VType
instance Eq VForm
instance Enum VForm
instance Ord VForm
instance Show VForm
instance Eq Tense
instance Enum Tense
instance Ord Tense
instance Show Tense
instance Eq Person
instance Enum Person
instance Ord Person
instance Show Person
instance Eq Voice
instance Enum Voice
instance Ord Voice
instance Show Voice
instance Eq Aspect
instance Enum Aspect
instance Ord Aspect
instance Show Aspect
instance Eq AType
instance Enum AType
instance Ord AType
instance Show AType
instance Eq Degree
instance Enum Degree
instance Ord Degree
instance Show Degree
instance Eq Formation
instance Enum Formation
instance Ord Formation
instance Show Formation
instance Eq MType
instance Enum MType
instance Ord MType
instance Show MType
instance Eq MForm
instance Enum MForm
instance Ord MForm
instance Show MForm
instance Eq Class
instance Enum Class
instance Ord Class
instance Show Class
instance Eq SType
instance Enum SType
instance Ord SType
instance Show SType
instance Eq CType
instance Enum CType
instance Ord CType
instance Show CType
instance Eq CoordType
instance Enum CoordType
instance Ord CoordType
instance Show CoordType
instance Eq SubType
instance Enum SubType
instance Ord SubType
instance Show SubType
instance Show Feature
instance Ord Feature
instance Eq Feature
instance Show Msd
instance MsdPattern a => MsdPattern [a]
instance MsdPattern a => MsdPattern (Maybe a)
instance MsdPattern Msd
instance Eq Msd
