-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Frontend development build tool
--   
--   Intuitive, simple building blocks for building composable, completely
--   self-managed web applications
@package duplo
@version 1.6.19

module Development.Duplo.Watcher

-- | Given some paths to watch and something to do, watch every 100ms
--   without debouncing but would interrupt the action when there is a new
--   event.
watch :: IO () -> [FilePath] -> IO ()

-- | Interrupt the given thread and re-perform the action.
handleEvent :: IORef (Maybe ThreadId) -> IO ThreadId -> Maybe Event -> IO ()

module Development.Duplo.Server
serve :: Port -> IO ()
serve' :: ScottyM ()
normalFile :: FilePath -> ActionM ()

-- | Return a default file depending on file type. Return the default HTML
--   file otherwise.
returnDefault :: FilePath -> ActionM ()

-- | <a>Guess</a> the content type from the path's file type
guessType :: String -> String

module Development.Duplo.Types.JavaScript
data JSCompilerException
ModuleNotFoundException :: ModuleName -> JSCompilerException
CircularDependencyException :: [ModuleName] -> JSCompilerException
ParseException :: [String] -> JSCompilerException
MissingDependencies :: String -> JSCompilerException
InternalParserException :: String -> JSCompilerException
LanguageJavaScriptException :: JSNode -> JSCompilerException
type LineNumber = Int
type ModuleName = String
type DepScore = Int
data Module
Module :: ModuleName -> [ModuleName] -> JSNode -> Maybe DepScore -> Module
_name :: Module -> ModuleName
_dependencies :: Module -> [ModuleName]
_node :: Module -> JSNode
_score :: Module -> Maybe DepScore
type OrderedModules = State [Module]
instance Typeable JSCompilerException
instance Show Module
instance Show JSCompilerException
instance Exception JSCompilerException

module Development.Duplo.JavaScript.Order
trace' :: Show a => a -> a
score :: Lens' Module (Maybe DepScore)
node :: Lens' Module JSNode
name :: Lens' Module ModuleName
dependencies :: Lens' Module [ModuleName]

-- | Reorder modules within the root node.
order :: JSNode -> JSNode

-- | Extract AMD modules to logger for re-ordering and the rest to output.
extract :: JSNode -> Writer [Module] [JSNode]
extract' :: JSNode -> Writer [Module] JSNode

-- | Turn a node into a module. The root expression node
makeModule :: JSNode -> JSNode -> Module
matchDependencies :: String -> JSNode -> JSNode

-- | Given a JSNode, return just the string literal, or nothing
stringLiteralNT :: JSNode -> Maybe String

-- | Reorder all the applicable modules
reorder :: [Module] -> [Module]
withScore :: Module -> Bool
byDepScore :: Module -> Module -> Ordering

-- | Given a module list, find all the dependency scores of the constituent
--   modules.
computeScores :: OrderedModules [DepScore]

-- | Given a module name, get its score.
getDepScore :: [ModuleName] -> ModuleName -> OrderedModules DepScore

-- | Get a module's dependency score given its dependencies.
getDepScore' :: [ModuleName] -> [ModuleName] -> OrderedModules DepScore

module Development.Duplo.FileList
data File
File :: FilePath -> FilePath -> File
_filePath :: File -> FilePath
_fileBase :: File -> FilePath
type Copy = (FilePath, FilePath)
defaultFile :: File
filePath :: Lens' File FilePath
fileBase :: Lens' File FilePath

-- | Given a base and a list of relative paths, transform into file objects
makeFiles :: FilePath -> [FilePath] -> [File]

-- | Given a base and a relative path, return a file record containing the
--   absolute path with the base
makeFile :: FilePath -> FilePath -> File

-- | Collapse lists of possible files and return the first file that exists
--   for each list
collapseFileLists :: [[File]] -> Action [File]

-- | Given a list of possible files, reduce to a file that exists, or
--   nothing
collapseFileList :: [File] -> Action (Maybe File)

-- | Given a file, return itself if it exists
collapseFile :: File -> Action (Maybe File)

-- | Given an output path and a list of file objects, convert all files
--   objects to copy pairs. See <a>toCopy</a> for more information.
toCopies :: FilePath -> [File] -> [Copy]

-- | Given an output path and a file object, return a copy pair whose to
--   path is relative to the output path in the same way as the provided
--   file object's path is relative to its base.
toCopy :: FilePath -> File -> Copy
instance Show File

module Development.Duplo.Types.Options
data Options
Options :: Bool -> Bool -> Options
optVerbose :: Options -> Bool
optVersion :: Options -> Bool
defaultOptions :: Options
options :: [OptDescr (Options -> IO Options)]

module Development.Duplo.Types.Config
data BuildConfig
BuildConfig :: String -> String -> String -> String -> FilePath -> String -> String -> FilePath -> String -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> String -> Port -> [String] -> String -> BuildConfig
_appName :: BuildConfig -> String
_appVersion :: BuildConfig -> String
_appId :: BuildConfig -> String
_cwd :: BuildConfig -> String
_duploPath :: BuildConfig -> FilePath
_env :: BuildConfig -> String
_mode :: BuildConfig -> String
_dist :: BuildConfig -> FilePath
_input :: BuildConfig -> String
_utilPath :: BuildConfig -> FilePath
_nodejsPath :: BuildConfig -> FilePath
_miscPath :: BuildConfig -> FilePath
_defaultsPath :: BuildConfig -> FilePath
_appPath :: BuildConfig -> FilePath
_devPath :: BuildConfig -> FilePath
_testPath :: BuildConfig -> FilePath
_assetsPath :: BuildConfig -> FilePath
_depsPath :: BuildConfig -> FilePath
_targetPath :: BuildConfig -> FilePath
_bumpLevel :: BuildConfig -> String
_port :: BuildConfig -> Port
_dependencies :: BuildConfig -> [String]
_buildMode :: BuildConfig -> String
utilPath :: Lens' BuildConfig FilePath
testPath :: Lens' BuildConfig FilePath
targetPath :: Lens' BuildConfig FilePath
port :: Lens' BuildConfig Port
nodejsPath :: Lens' BuildConfig FilePath
mode :: Lens' BuildConfig String
miscPath :: Lens' BuildConfig FilePath
input :: Lens' BuildConfig String
env :: Lens' BuildConfig String
duploPath :: Lens' BuildConfig FilePath
dist :: Lens' BuildConfig FilePath
devPath :: Lens' BuildConfig FilePath
depsPath :: Lens' BuildConfig FilePath
dependencies :: Lens' BuildConfig [String]
defaultsPath :: Lens' BuildConfig FilePath
cwd :: Lens' BuildConfig String
bumpLevel :: Lens' BuildConfig String
buildMode :: Lens' BuildConfig String
assetsPath :: Lens' BuildConfig FilePath
appVersion :: Lens' BuildConfig String
appPath :: Lens' BuildConfig FilePath
appName :: Lens' BuildConfig String
appId :: Lens' BuildConfig String
isInDev :: BuildConfig -> Bool
isInTest :: BuildConfig -> Bool
instance Show BuildConfig

module Development.Duplo.Types.Builder
data BuilderException
MissingGithubUserException :: BuilderException
MissingGithubRepoException :: BuilderException
MalformedManifestException :: String -> BuilderException
MissingManifestException :: String -> BuilderException
instance Typeable BuilderException
instance Show BuilderException
instance Exception BuilderException

module Development.Duplo.Types.AppInfo
type Dependencies = HashMap String String
type Modes = HashMap String [String]

-- | App information extracted from `component.json`
data AppInfo
AppInfo :: String -> String -> String -> Dependencies -> Maybe Modes -> [String] -> [String] -> [String] -> [String] -> [String] -> AppInfo
name :: AppInfo -> String
repo :: AppInfo -> String
version :: AppInfo -> String
dependencies :: AppInfo -> Dependencies
modes :: AppInfo -> Maybe Modes
images :: AppInfo -> [String]
scripts :: AppInfo -> [String]
styles :: AppInfo -> [String]
templates :: AppInfo -> [String]
fonts :: AppInfo -> [String]
defaultAppInfo :: AppInfo
instance Show AppInfo
instance Generic AppInfo
instance Datatype D1AppInfo
instance Constructor C1_0AppInfo
instance Selector S1_0_0AppInfo
instance Selector S1_0_1AppInfo
instance Selector S1_0_2AppInfo
instance Selector S1_0_3AppInfo
instance Selector S1_0_4AppInfo
instance Selector S1_0_5AppInfo
instance Selector S1_0_6AppInfo
instance Selector S1_0_7AppInfo
instance Selector S1_0_8AppInfo
instance Selector S1_0_9AppInfo
instance ToJSON AppInfo
instance FromJSON AppInfo

module Development.Duplo.Component
type Version = (String, String)

-- | Each application must have a `component.json`
manifestName :: FilePath
readManifest :: IO AppInfo
readManifest' :: FilePath -> IO AppInfo
writeManifest :: AppInfo -> IO ()

-- | Get the app's Component.IO ID
appId :: AppInfo -> String

-- | Parse the repo info into an app ID
parseRepoInfo :: [String] -> String

-- | Given a possible component ID, return the user and the repo
--   constituents
parseComponentId :: String -> Either String (String, String)

-- | Given a path, find all the `component.json` and return a JSON string
extractCompVersions :: BuildConfig -> Action String

-- | Given a path and the file content that the path points to, return the
--   manifest in <a>AppInfo</a> form.
decodeManifest :: FilePath -> ByteString -> AppInfo
appInfoToVersion :: AppInfo -> Version

-- | Given a path, find all the `component.json`s
getAllManifestPaths :: FilePath -> FilePath -> Action [FilePath]

-- | Simply get all dependencies if no mode is provided.
--   
--   Get the component dependency list by providing a mode, or not.
getDependencies :: Maybe String -> IO [FilePath]

-- | Helper function to get the selected dependency list given the full
--   dependency list, all modes, and the target mode to select the list by.
getDependencies' :: Dependencies -> Maybe [String] -> IO [FilePath]

-- | Regular file != *nix-style hidden file
isRegularFile :: FilePath -> Bool

module Development.Duplo.Git
type Level = String
type Version = String
type Subversion = String
type FileExtension = String
versionLength :: Int

-- | Commit to git and bump version for current project
commit :: BuildConfig -> Level -> Action (Version, Version)

-- | Bump a version, given a bump type
incrementVersion :: Version -> Level -> Version

-- | Given a version component, increment it.
incrementSubversion :: [Subversion] -> Int -> [Subversion]

-- | Reset a version component. The reset cascades up to the max subversion
--   index.
resetSubversion :: [Subversion] -> Int -> Int -> [Subversion]
updateVersion :: AppInfo -> Version -> AppInfo

-- | Read from the given directory and update the app manifest object.
updateFileRegistry :: BuildConfig -> AppInfo -> Action AppInfo

module Development.Duplo.Files
type FileName = String
type FileContent = String
type ComponentId = String
data File
File :: FilePath -> FilePath -> FileName -> ComponentId -> String -> Bool -> File
_filePath :: File -> FilePath
_fileDir :: File -> FilePath
_fileName :: File -> FileName
_componentId :: File -> ComponentId
_fileContent :: File -> String
_isRoot :: File -> Bool
pseudoFile :: File
isRoot :: Lens' File Bool
filePath :: Lens' File FilePath
fileName :: Lens' File FileName
fileDir :: Lens' File FilePath
fileContent :: Lens' File String
componentId :: Lens' File ComponentId
readFile :: FilePath -> FilePath -> MaybeT Action File
parseFilePath :: FilePath -> (FilePath, FileName)

-- | Given a default component ID (usually the ID of the project on which
--   duplo is run) and the file path, deduce the component ID of a
--   particular file
parseComponentId :: FilePath -> ComponentId -> FilePath -> ComponentId
instance Show File

module Development.Duplo.Utilities
type CompiledContent = MaybeT Action
type FileProcessor = [File] -> CompiledContent [File]
type StringProcessor = String -> CompiledContent String

-- | Construct a file pattern by providing a base directory and an
--   extension.
makePattern :: FilePath -> String -> FilePath

-- | Construct and return the given base directory and extension whose base
--   directory exists.
makeValidPattern :: FilePath -> String -> Action [FilePath]

-- | Splice a list of base directories and their corresponding extensions
--   for a list of file patterns.
makeFilePatterns :: [FilePath] -> [String] -> Action [FilePattern]

-- | Given a working directory and a list of patterns, expand all the
--   paths, in order.
getDirectoryFilesInOrder :: FilePath -> String -> [FilePattern] -> Action [FilePath]

-- | Given the path to a compiler, parameters to the compiler, a list of
--   paths of to-be-compiled files, the output file path, and a processing
--   function, do the following:
--   
--   <ul>
--   <li>reads all the to-be-compiled files</li>
--   <li>calls the processor with the list of files to perform any
--   pre-processing</li>
--   <li>concatenates all files</li>
--   <li>passes the concatenated string to the compiler</li>
--   <li>returns the compiled content</li>
--   </ul>
compile :: BuildConfig -> FilePath -> [String] -> [FilePath] -> FileProcessor -> StringProcessor -> CompiledContent String

-- | Given a list of static and a list of dynamic paths, return a list of
--   all paths, resolved to absolute paths.
expandPaths :: FilePath -> String -> [FilePath] -> [FilePath] -> Action [FilePath]

-- | Given a list of paths, make sure all intermediary directories are
--   there.
createPathDirectories :: [FilePath] -> Action ()

-- | Create all the directories within a path if they do not exist. Note
--   that the last segment is assumed to be the file and therefore not
--   created.
createIntermediaryDirectories :: String -> Action ()

-- | Return a list of dynamic paths given a list of dependency ID and a
--   function to expand one ID into a list of paths.
expandDeps :: [String] -> (String -> [FilePath]) -> [FilePath]

-- | Shake hangs when the path given to <a>getDirectoryFiles</a> doesn't
--   exist. This is a safe version of that.
getDirectoryFiles :: FilePath -> [FilePattern] -> Action [FilePath]

-- | Error printer: white text over red background.
errorPrintSetter :: IO ()

-- | Header printer: blue text
headerPrintSetter :: IO ()

-- | Success printer: white text over green background
successPrintSetter :: IO ()

-- | Log a message with a provided print configuration setter.
logStatus :: IO () -> String -> IO ()

-- | Put together common (i.e. standard) environment variables.
createStdEnv :: MonadIO m => BuildConfig -> m CmdOption

module Development.Duplo.Markups
build :: BuildConfig -> FilePath -> CompiledContent ()

-- | Rewrite paths to external files (i.e. include statements) because Jade
--   doesn't accept more than one path to look up includes. It is passed
--   all the files to be compiled and a file whose include statements are
--   to be rewritten. The current working directory
rewriteIncludes :: FilePath -> [File] -> File -> File

-- | Given a component ID and a content line, rewrite if it is an include
--   statement to be relative to project root
rewriteInclude :: ComponentId -> String -> String

module Development.Duplo.Scripts

-- | How many lines to display around the source of error (both ways).
errorDisplayRange :: Int

-- | Build scripts The environment
build :: BuildConfig -> FilePath -> CompiledContent ()

-- | Given the original content as string and an error message that is
--   produced by `language-javascript` parser, throw an error.
handleParseError :: String -> String -> String

-- | Given a file's lines, its line number, and the "target" line number
--   that caused the parse error, format it for human-readable output.
showBadLine :: [String] -> LineNumber -> LineNumber -> (LineNumber, String)

-- | Because the parser's error isn't readable, we need to use RegExp to
--   extract what we need for debugging.
readParseError :: String -> LineNumber

module Development.Duplo.Static
build :: BuildConfig -> [FilePath] -> Action ()

-- | Build dependency list for static files
deps :: BuildConfig -> Action ()
qualify :: BuildConfig -> FilePath -> Maybe [FilePath]

-- | Given where the dependencies are, return a list of assets relative to
--   their own containing components
getDepAssets :: FilePath -> Action [FilePath]

module Development.Duplo.Styles
build :: BuildConfig -> FilePath -> CompiledContent ()

module Development.Duplo
shakeOpts :: ShakeOptions
build :: String -> [String] -> BuildConfig -> Options -> IO ()
