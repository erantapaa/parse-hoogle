-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Embeds effect systems into Haskell using parameteric effect monads
--   
@package ixmonad
@version 0.56

module Control.Effect.Helpers.List
data List (l :: [*])
Nil :: List []
Cons :: x -> List xs -> List (x : xs)
append :: List s -> List t -> List (s :++ t)
class Split s t
split :: Split s t => List (s :++ t) -> (List s, List t)
instance Split xs ys => Split (x : xs) ys
instance Split '[] xs

module Control.Effect.Cond
class Cond (m :: k -> * -> *) where type family AltInv m (s :: k) (t :: k) :: Constraint type family Alt m (s :: k) (t :: k) :: k type instance AltInv m s t = ()
ifM :: (Cond m, AltInv m s t) => Bool -> m s a -> m t a -> m (Alt m s t) a

module Control.Effect.Helpers.Set
data Set (n :: [*])
Empty :: Set []
Ext :: e -> Set s -> Set (e : s)
type Union s t = Nub (Sort (Append s t))
type Unionable s t = (Sortable (Append s t), Nubable (Sort (Append s t)))
union :: Unionable s t => Set s -> Set t -> Set (Union s t)
bsort :: Bubbler s s => Set s -> Set (Sort s)
append :: Set s -> Set t -> Set (Append s t)
type Sort l = Bubble l l
type Sortable s = Bubbler s s
class OrdH e f
minH :: OrdH e f => e -> f -> Min e f
maxH :: OrdH e f => e -> f -> Max e f
class Split s t st
split :: Split s t st => Set st -> (Set s, Set t)
class Nubable t
nub :: Nubable t => Set t -> Set (Nub t)
type AsSet s = Nub (Sort s)
asSet :: (Sortable s, Nubable (Sort s)) => Set s -> Set (AsSet s)
type IsSet s = s ~ Nub (Sort s)
class Subset s t
subset :: Subset s t => Set t -> Set s
instance [incoherent] Subset s t => Subset s (x : t)
instance [incoherent] Subset s t => Subset (x : s) (x : t)
instance [incoherent] Subset '[] t
instance [incoherent] Split s t st => Split s (x : t) (x : st)
instance [incoherent] Split s t st => Split (x : s) t (x : st)
instance [incoherent] Split s t st => Split (x : s) (x : t) (x : st)
instance [incoherent] Split '[] '[] '[]
instance [incoherent] (Show' (Set s), Show e) => Show' (Set (e : s))
instance [incoherent] Show' (Set '[])
instance [incoherent] (Show e, Show' (Set s)) => Show (Set (e : s))
instance [incoherent] Show (Set '[])
instance [incoherent] (Passer (Max e f : s), OrdH e f) => Passer (e : f : s)
instance [incoherent] Passer '[e]
instance [incoherent] Passer '[]
instance [incoherent] (Bubbler s t, Passer (Bubble s t)) => Bubbler s (e : t)
instance [incoherent] Bubbler s '[]
instance [incoherent] (Nub (e : f : s) ~ (e : Nub (f : s)), Nubable (f : s)) => Nubable (e : f : s)
instance [incoherent] Nubable '[e]
instance [incoherent] Nubable '[]

module Control.Effect.Helpers.Mapping
data (:->) (k :: Symbol) (v :: *)
(:->) :: (Var k) -> v -> (:->)
data Var (k :: Symbol)
Var :: Var k
X :: Var "x"
Y :: Var "y"
Z :: Var "z"
select :: Chooser (CmpSymbol j k) => Var j -> Var k -> a -> b -> Select j k a b
type Select a b p q = Choose (CmpSymbol a b) p q
class Chooser (o :: Ordering)
choose :: Chooser o => (Proxy o) -> p -> q -> (Choose o p q)
instance Chooser 'GT
instance Chooser 'EQ
instance Chooser 'LT
instance Chooser (CmpSymbol j k) => OrdH (j :-> u) (k :-> v)
instance Show (Var "z")
instance Show (Var "y")
instance Show (Var "x")
instance (Show (Var k), Show v) => Show (k :-> v)

module Control.Effect

-- | Specifies "parametric effect monads" which are essentially monads but
--   annotated by a type-level monoid formed by |Plus m| and |Unit m| |
class Effect (m :: k -> * -> *) where type family Unit m :: k type family Plus m (f :: k) (g :: k) :: k type family Inv m (f :: k) (g :: k) :: Constraint type instance Inv m f g = () x >> y = x >>= (\ _ -> y)
return :: Effect m => a -> m (Unit m) a
(>>=) :: (Effect m, Inv m f g) => m f a -> (a -> m g b) -> m (Plus m f g) b
(>>) :: (Effect m, Inv m f g) => m f a -> m g b -> m (Plus m f g) b
fail :: t

-- | Specifies subeffecting behaviour |
class Subeffect (m :: k -> * -> *) f g
sub :: Subeffect m f g => m f a -> m g a

module Control.Effect.Counter

-- | Provides a way to <tt>count</tt> in the type-level with a monadic
--   interface to sum up the individual counts of subcomputations |
--   
--   Define type constructors for natural numbers |
data Z
data S n

-- | The counter has no semantic meaning |
data Counter n a

-- | A <a>tick</a> provides a way to increment the counter |
tick :: a -> Counter (S Z) a

-- | Type-level addition |
instance Effect Counter

module Control.Effect.CounterNat

-- | The counter has no semantic meaning |
data Counter (n :: Nat) a
Counter :: a -> Counter a
forget :: Counter a -> a

-- | A <a>tick</a> provides a way to increment the counter |
tick :: a -> Counter 1 a
instance Effect Counter

module Control.Effect.Maybe
data F
data T
data U
data IMaybe p a
INothing :: IMaybe F a
IJust :: a -> IMaybe T a
IDyn :: IMaybe s a -> IMaybe U a
instance Cond IMaybe
instance Effect IMaybe
instance Show a => Show (IMaybe p a)

module Control.Effect.Monad

-- | Wrap regular monads up |
data Monad m t a
Wrap :: m a -> Monad m () a

-- | Unwrap a monad |
unWrap :: Monad m => Monad m t a -> m a
instance Monad m => Effect (Monad m)

module Control.Effect.Parameterised

-- | Data type of morphisms |
newtype T (i :: Morph * *) a
T :: a -> T a

-- | Data type denoting either a morphisms with source and target types, or
--   identity |
data Morph a b
M :: a -> b -> Morph a b
Id :: Morph a b
instance Effect T

module Control.Effect.ReadOnceReader

-- | <a>ask</a> for a value of type <tt>a</tt> |
ask :: Reader '[a] a
data Reader (r :: [*]) a
R :: (List r -> a) -> Reader a
runReader :: Reader a -> (List r -> a)
data List (l :: [*])
Nil :: List []
Cons :: x -> List xs -> List (x : xs)
instance Cond Reader
instance Effect Reader

module Control.Effect.Update
data Eff (w :: Maybe *)
Put :: a -> Eff (Just a)
NoPut :: Eff Nothing
data Update w a
Update :: (a, Eff w) -> Update w a
runUpdate :: Update w a -> (a, Eff w)

-- | Update the memory cell with a new value of type <tt>a</tt> |
put :: a -> Update (Just a) ()
instance Effect Update

module Control.Effect.Vector
data Z
data S n
data Vector n a
Nil :: Vector Z a
Cons :: a -> Vector n a -> Vector (S n) a
append :: Vector n a -> Vector m a -> Vector (Add n m) a
instance Effect Vector

module Control.Effect.WriteOnceWriter

-- | Write a value of type <tt>a</tt> |
put :: a -> WriteOnce '[a] ()
data WriteOnce (w :: [*]) a
W :: (a, List w) -> WriteOnce a
runWriteOnce :: WriteOnce a -> (a, List w)
instance Effect WriteOnce

module Control.Effect.Reader
data Reader s a
IxR :: (Set s -> a) -> Reader s a
runReader :: Reader s a -> Set s -> a

-- | <a>ask</a> for a variable <tt>v</tt> of type <tt>a</tt>, raising an
--   effect |
ask :: Var v -> Reader '[v :-> a] a

-- | Provides a way to emulated the ImplicitParams features of GHC/Haskell
--   |
merge :: Unionable s t => (a -> Reader (Union s t) b) -> Reader s (a -> Reader t b)
data (:->) (k :: Symbol) (v :: *)
(:->) :: (Var k) -> v -> (:->)
data Var (k :: Symbol)
Var :: Var k
X :: Var "x"
Y :: Var "y"
Z :: Var "z"
class Subset s t
data Set (n :: [*])
Empty :: Set []
Ext :: e -> Set s -> Set (e : s)
instance Subset s t => Subeffect Reader s t
instance Effect Reader

module Control.Effect.State
data Set (n :: [*])
Empty :: Set []
Ext :: e -> Set s -> Set (e : s)

-- | Read from a variable <tt>v</tt> of type <tt>a</tt>. Raise a read
--   effect. |
get :: Var v -> State '[v :-> (a :! R)] a

-- | Write to a variable <tt>v</tt> with a value of type <tt>a</tt>. Raises
--   a write effect |
put :: Var v -> a -> State '[k :-> (a :! W)] ()

-- | Parametric effect state monad |
data State s a
State :: (Set (Reads s) -> (a, Set (Writes s))) -> State s a
runState :: State s a -> Set (Reads s) -> (a, Set (Writes s))
data (:->) (k :: Symbol) (v :: *)
(:->) :: (Var k) -> v -> (:->)

-- | Describes an effect action <tt>s</tt> on a value of type <tt>a</tt> |
data (:!) (a :: *) (s :: Eff)
(:!) :: a -> (Action s) -> (:!)

-- | Distinguish reads, writes, and read-writes |
data Eff
R :: Eff
W :: Eff
RW :: Eff

-- | Provides a wrapper for effect actions |
data Action (s :: Eff)
Eff :: Action
data Var (k :: Symbol)
Var :: Var k
X :: Var "x"
Y :: Var "y"
Z :: Var "z"

-- | Union operation for state effects |
union :: Unionable s t => Set s -> Set t -> Set (UnionS s t)
type UnionS s t = Nub (Sort (Append s t))

-- | Calculate just the reader effects |

-- | Calculate just the writer effects |
type Unionable s t = (Sortable (Append s t), Nubable (Sort (Append s t)) (Nub (Sort (Append s t))), Split s t (Union s t))
type Sortable s = Bubbler s s
type SetLike s = Nub (Sort s)

-- | Captures what it means to be a set of state effects |
type StateSet f = (StateSetProperties f, StateSetProperties (Reads f), StateSetProperties (Writes f))
type IntersectR s t = (Sortable (Append s t), Update (Sort (Append s t)) t)

-- | Update reads, that is any writes are pushed into reads, a bit like
--   intersection |
class Update t v
type Sort l = Bubble l l
class Split s t st
instance [incoherent] Effect State
instance [incoherent] Update ((j :-> (b :! s)) : as) as' => Update ((k :-> (a :! 'R)) : (j :-> (b :! s)) : as) ((k :-> (a :! 'R)) : as')
instance [incoherent] Update ((j :-> (b :! s)) : as) as' => Update ((k :-> (a :! 'W)) : (j :-> (b :! s)) : as) as'
instance [incoherent] Update ((k :-> (a :! 'R)) : as) as' => Update ((k :-> (a :! 'W)) : (k :-> (b :! 'R)) : as) as'
instance [incoherent] Update ((k :-> (b :! 'R)) : as) as' => Update ((k :-> (a :! s)) : (k :-> (b :! s)) : as) as'
instance [incoherent] Update '[e] '[e]
instance [incoherent] Update xs '[]
instance [incoherent] Nubable ((j :-> (b :! t)) : as) as' => Nubable ((k :-> (a :! s)) : (j :-> (b :! t)) : as) ((k :-> (a :! s)) : as')
instance [incoherent] Nubable ((k :-> (a :! 'RW)) : as) as' => Nubable ((k :-> (a :! s)) : (k :-> (a :! t)) : as) as'
instance [incoherent] Nubable ((k :-> (b :! s)) : as) as' => Nubable ((k :-> (a :! s)) : (k :-> (b :! s)) : as) as'
instance [incoherent] Nubable '[e] '[e]
instance [incoherent] Nubable '[] '[]
instance [incoherent] (Show (Action f), Show a) => Show (a :! f)
instance [incoherent] Show (Action 'RW)
instance [incoherent] Show (Action 'W)
instance [incoherent] Show (Action 'R)

module Control.Effect.Writer
data Writer w a
Writer :: (a, Set w) -> Writer w a
runWriter :: Writer w a -> (a, Set w)

-- | (Kind) This is the kind of type-level symbols.
data Symbol :: *

-- | Write to variable <tt>v</tt> with value of type <tt>a</tt> |
put :: Var v -> a -> Writer '[v :-> a] ()
data (:->) (k :: Symbol) (v :: *)
type IsSet s = s ~ Nub (Sort s)
data Set (n :: [*])
Empty :: Set []
Ext :: e -> Set s -> Set (e : s)
union :: Unionable s t => Set s -> Set t -> Set (Union s t)
data Var (k :: Symbol)
Var :: Var k
X :: Var "x"
Y :: Var "y"
Z :: Var "z"
type Union s t = Nub (Sort (Append s t))
type Unionable s t = (Sortable (Append s t), Nubable (Sort (Append s t)))
instance Superset s t => Superset ((k :-> v) : s) ((k :-> v) : t)
instance (Monoid x, Superset '[] s) => Superset '[] ((k :-> x) : s)
instance Superset '[] '[]
instance Superset s t => Subeffect Writer s t
instance (Monoid u, Nubable ((k :-> u) : s)) => Nubable ((k :-> u) : (k :-> u) : s)
instance Effect Writer

module Control.Coeffect

-- | Specifies "parametric coeffect comonads" which are essentially
--   comonads but annotated by a type-level monoid formed by |Plus m| and
--   |Unit m| |
class Coeffect (c :: k -> * -> *) where type family Inv c (s :: k) (t :: k) :: Constraint type family Unit c :: k type family Plus c (s :: k) (t :: k) :: k type instance Inv c s t = ()
extract :: Coeffect c => c (Unit c) a -> a
extend :: (Coeffect c, Inv c s t) => (c t a -> b) -> c (Plus c s t) a -> c s b

-- | <a>Zips</a> two coeffecting computations together |
class CoeffectZip (c :: k -> * -> *) where type family Meet c (s :: k) (t :: k) :: k type family CzipInv c (s :: k) (t :: k) :: Constraint
czip :: (CoeffectZip c, CzipInv c s t) => c s a -> c t b -> c (Meet c s t) (a, b)

-- | Specifies sub-coeffecting behaviour |
class Subcoeffect (c :: k -> * -> *) s t
subco :: Subcoeffect c s t => c s a -> c t a

module Control.Coeffect.Coreader

-- | Provides 'reader monad'-like behaviour but as a comonad, using an
--   indexed version of the product comonad |
data IxCoreader s a
IxR :: (a, Set s) -> IxCoreader s a
runCoreader :: IxCoreader s a -> (a, Set s)

-- | <a>ask</a> for the value of variable <tt>v</tt>, e.g., 'ask (Var::(Var
--   "x"))' |
ask :: Var v -> IxCoreader '[v :-> a] b -> a
instance CoeffectZip IxCoreader
instance Coeffect IxCoreader
