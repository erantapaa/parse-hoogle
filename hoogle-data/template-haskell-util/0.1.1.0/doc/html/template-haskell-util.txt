-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Some utilities for template Haskell.
--   
@package template-haskell-util
@version 0.1.1.0


-- | Some auxiliary functions that might be needed when using template
--   Haskell
module Language.Haskell.TH.Utils

-- | Rename a <a>Name</a>
rename :: Q Name -> (String -> String) -> Q Name
rename' :: Name -> (String -> String) -> Name
rename'' :: Name -> (String -> String) -> Q Name

-- | <pre>
--   data Foo = Foo { foo :: Int }
--   &gt; $(nameToExp (++"1") 'foo)
--   "foo1"       
--   </pre>
nameToExp :: (String -> String) -> Name -> Q Exp

-- | Apply a list of expression
--   
--   <pre>
--   [(+), 1, 2] to (+) 1 2
--   appExp' [VarE '(+) , (LitE (IntegerL 1)), (LitE (IntegerL 2))]
--   &gt;AppE (AppE (VarE GHC.Num.+) (LitE (IntegerL 1))) (LitE (IntegerL 2))
--   </pre>
appExp :: [ExpQ] -> ExpQ
appExp' :: [Exp] -> Exp
unappExp :: ExpQ -> Q [Exp]
unappExp' :: Exp -> [Exp]

-- | Apply a type constructor like <a>appExp</a>
--   
--   <pre>
--   &gt; pprint $ appConT' (map ConT [''(,), ''Int , ''Bool])
--   "GHC.Tuple.(,) GHC.Types.Int GHC.Types.Bool" --i.e. (Int,Bool)
--   </pre>
appConT :: [TypeQ] -> TypeQ
appConT' :: [Type] -> Type

-- | Unapply a constructor application to a list of types
unappConT :: TypeQ -> Q [Type]

-- | Unapply a constructor application to a list of types
unappConT' :: Type -> [Type]

-- | convert <tt>[a, b, c]</tt> to <tt>a -&gt; b -&gt; c</tt>
--   
--   <pre>
--   &gt; pprint $ curryType' (map ConT [''Int , ''Int , ''Bool])
--   "GHC.Types.Int -&gt; GHC.Types.Int -&gt; GHC.Types.Bool"
--   </pre>
curryType :: [TypeQ] -> TypeQ
curryType' :: [Type] -> Type

-- | <pre>
--   convert @a -&gt; b -&gt; c@ to @[a,b,c]
--   </pre>
--   
--   <pre>
--   &gt; uncurryType' (ForallT [PlainTV (mkName "a")] [] (AppT (AppT ArrowT (VarT (mkName "a"))) (ConT ''Int)))
--   &gt; [VarT a,ConT GHC.Types.Int]
--   </pre>
uncurryType :: TypeQ -> Q [Type]
uncurryType' :: Type -> [Type]

-- | <pre>
--   &gt; genBT' "a" 3
--   ([PlainTV a1,PlainTV a2,PlainTV a3],[VarT a1,VarT a2,VarT a3])
--   </pre>
--   
--   Generate a list of type Bind and Type
genBT :: String -> Int -> Q ([TyVarBndr], [TypeQ])

-- | Generate a list of type Bind and Type without Q
genBT' :: String -> Int -> ([TyVarBndr], [Type])

-- | <pre>
--   &gt; genPE' "a" 3
--   ([VarP a1,VarP a2,VarP a3],[VarE a1,VarE a2,VarE a3])
--   </pre>
--   
--   Generate related patterns and expressions
genPE :: String -> Int -> Q ([PatQ], [ExpQ])

-- | Generate related patterns and expressions without Q
genPE' :: String -> Int -> ([Pat], [Exp])

-- | Apply a list of kinds, like <a>appConT</a>
appKind :: [Kind] -> Kind

-- | Like <a>unappConT</a>
unappKind :: Kind -> [Kind]

-- | Like <a>curryType</a> but on kind level
curryKind :: [Kind] -> Kind

-- | Like <a>uncurryType</a>
uncurryKind :: Kind -> [Kind]

-- | Get type Names recursively, You can transform it to set if you want.
getTypeNames :: Type -> [Name]

-- | Get type var bind name
getTVBName :: TyVarBndr -> Name

-- | Get all names recursively from a constructor
getCompositeType :: Con -> [Name]

-- | Get name from constructors
getConName :: Con -> Name

-- | sequence-like functons on tuples
seqTup2 :: (Q a, Q b) -> Q (a, b)
seqTup3 :: (Q a, Q b, Q c) -> Q (a, b, c)
seqTup4 :: (Q a, Q b, Q c, Q d) -> Q (a, b, c, d)

-- | Unsequence <tt>Q [a]</tt> to [Q a], but you never get rid of the outer
--   <a>Q</a>
unsequence :: Q [a] -> Q [Q a]

-- | Print AST of the code.
printQ :: Show a => Q a -> IO ()

-- | Pretty print spliced code
pprintQ :: Ppr a => Q a -> IO ()

-- | Print AST with indentions. There are also other exported functions
--   from genericpretty library. See <a>Out</a>.
--   
--   <pre>
--   runQ [| (1+1) * 5|] &gt;&gt;= pp -- or use
--   printiQ  [| (1+1) * 5|]
--   InfixE (Just InfixE (Just LitE (IntegerL 1))
--                     (VarE (Name (OccName "+")
--                                 (NameG' VarName
--                                          (PkgName "base")
--                                          (ModName "GHC.Num"))))
--                      (Just LitE (IntegerL 1)))
--         (VarE (Name (OccName "*")
--                     (NameG' VarName
--                             (PkgName "base")
--                             (ModName "GHC.Num"))))
--         (Just LitE (IntegerL 5))
--   </pre>
printiQ :: Out a => Q a -> IO ()

-- | Print AST with identions
printi :: Out a => a -> IO ()
instance Show NameSpace
instance Generic NameSpace
instance Generic OccName
instance Generic PkgName
instance Generic ModName
instance Generic Body
instance Generic Guard
instance Generic a => Generic (TExp a)
instance Generic Range
instance Generic Stmt
instance Generic Safety
instance Generic Callconv
instance Generic Strict
instance Generic ModuleInfo
instance Generic Info
instance Generic Loc
instance Generic Role
instance Generic TySynEqn
instance Generic FamFlavour
instance Generic Pragma
instance Generic Fixity
instance Generic Foreign
instance Generic FunDep
instance Generic Clause
instance Generic Dec
instance Generic Pat
instance Generic Lit
instance Generic Exp
instance Generic TyLit
instance Generic TyVarBndr
instance Generic Type
instance Generic AnnTarget
instance Generic Module
instance Generic Con
instance Generic Phases
instance Generic Pred
instance Generic RuleMatch
instance Generic Name
instance Generic Match
instance Generic RuleBndr
instance Generic Inline
instance Generic FixityDirection
instance Generic NameFlavour'
instance Show NameFlavour'
instance Datatype D1NameFlavour'
instance Constructor C1_0NameFlavour'
instance Constructor C1_1NameFlavour'
instance Constructor C1_2NameFlavour'
instance Constructor C1_3NameFlavour'
instance Constructor C1_4NameFlavour'
instance Datatype D1NameSpace
instance Constructor C1_0NameSpace
instance Constructor C1_1NameSpace
instance Constructor C1_2NameSpace
instance Datatype D1OccName
instance Constructor C1_0OccName
instance Datatype D1PkgName
instance Constructor C1_0PkgName
instance Datatype D1ModName
instance Constructor C1_0ModName
instance Datatype D1Body
instance Constructor C1_0Body
instance Constructor C1_1Body
instance Datatype D1Guard
instance Constructor C1_0Guard
instance Constructor C1_1Guard
instance Datatype D1TExp
instance Constructor C1_0TExp
instance Selector S1_0_0TExp
instance Datatype D1Range
instance Constructor C1_0Range
instance Constructor C1_1Range
instance Constructor C1_2Range
instance Constructor C1_3Range
instance Datatype D1Stmt
instance Constructor C1_0Stmt
instance Constructor C1_1Stmt
instance Constructor C1_2Stmt
instance Constructor C1_3Stmt
instance Datatype D1Safety
instance Constructor C1_0Safety
instance Constructor C1_1Safety
instance Constructor C1_2Safety
instance Datatype D1Callconv
instance Constructor C1_0Callconv
instance Constructor C1_1Callconv
instance Datatype D1Strict
instance Constructor C1_0Strict
instance Constructor C1_1Strict
instance Constructor C1_2Strict
instance Datatype D1ModuleInfo
instance Constructor C1_0ModuleInfo
instance Datatype D1Info
instance Constructor C1_0Info
instance Constructor C1_1Info
instance Constructor C1_2Info
instance Constructor C1_3Info
instance Constructor C1_4Info
instance Constructor C1_5Info
instance Constructor C1_6Info
instance Constructor C1_7Info
instance Datatype D1Loc
instance Constructor C1_0Loc
instance Selector S1_0_0Loc
instance Selector S1_0_1Loc
instance Selector S1_0_2Loc
instance Selector S1_0_3Loc
instance Selector S1_0_4Loc
instance Datatype D1Role
instance Constructor C1_0Role
instance Constructor C1_1Role
instance Constructor C1_2Role
instance Constructor C1_3Role
instance Datatype D1TySynEqn
instance Constructor C1_0TySynEqn
instance Datatype D1FamFlavour
instance Constructor C1_0FamFlavour
instance Constructor C1_1FamFlavour
instance Datatype D1Pragma
instance Constructor C1_0Pragma
instance Constructor C1_1Pragma
instance Constructor C1_2Pragma
instance Constructor C1_3Pragma
instance Constructor C1_4Pragma
instance Datatype D1Fixity
instance Constructor C1_0Fixity
instance Datatype D1Foreign
instance Constructor C1_0Foreign
instance Constructor C1_1Foreign
instance Datatype D1FunDep
instance Constructor C1_0FunDep
instance Datatype D1Clause
instance Constructor C1_0Clause
instance Datatype D1Dec
instance Constructor C1_0Dec
instance Constructor C1_1Dec
instance Constructor C1_2Dec
instance Constructor C1_3Dec
instance Constructor C1_4Dec
instance Constructor C1_5Dec
instance Constructor C1_6Dec
instance Constructor C1_7Dec
instance Constructor C1_8Dec
instance Constructor C1_9Dec
instance Constructor C1_10Dec
instance Constructor C1_11Dec
instance Constructor C1_12Dec
instance Constructor C1_13Dec
instance Constructor C1_14Dec
instance Constructor C1_15Dec
instance Constructor C1_16Dec
instance Datatype D1Pat
instance Constructor C1_0Pat
instance Constructor C1_1Pat
instance Constructor C1_2Pat
instance Constructor C1_3Pat
instance Constructor C1_4Pat
instance Constructor C1_5Pat
instance Constructor C1_6Pat
instance Constructor C1_7Pat
instance Constructor C1_8Pat
instance Constructor C1_9Pat
instance Constructor C1_10Pat
instance Constructor C1_11Pat
instance Constructor C1_12Pat
instance Constructor C1_13Pat
instance Constructor C1_14Pat
instance Constructor C1_15Pat
instance Datatype D1Lit
instance Constructor C1_0Lit
instance Constructor C1_1Lit
instance Constructor C1_2Lit
instance Constructor C1_3Lit
instance Constructor C1_4Lit
instance Constructor C1_5Lit
instance Constructor C1_6Lit
instance Constructor C1_7Lit
instance Constructor C1_8Lit
instance Datatype D1Exp
instance Constructor C1_0Exp
instance Constructor C1_1Exp
instance Constructor C1_2Exp
instance Constructor C1_3Exp
instance Constructor C1_4Exp
instance Constructor C1_5Exp
instance Constructor C1_6Exp
instance Constructor C1_7Exp
instance Constructor C1_8Exp
instance Constructor C1_9Exp
instance Constructor C1_10Exp
instance Constructor C1_11Exp
instance Constructor C1_12Exp
instance Constructor C1_13Exp
instance Constructor C1_14Exp
instance Constructor C1_15Exp
instance Constructor C1_16Exp
instance Constructor C1_17Exp
instance Constructor C1_18Exp
instance Constructor C1_19Exp
instance Constructor C1_20Exp
instance Constructor C1_21Exp
instance Datatype D1TyLit
instance Constructor C1_0TyLit
instance Constructor C1_1TyLit
instance Datatype D1TyVarBndr
instance Constructor C1_0TyVarBndr
instance Constructor C1_1TyVarBndr
instance Datatype D1Type
instance Constructor C1_0Type
instance Constructor C1_1Type
instance Constructor C1_2Type
instance Constructor C1_3Type
instance Constructor C1_4Type
instance Constructor C1_5Type
instance Constructor C1_6Type
instance Constructor C1_7Type
instance Constructor C1_8Type
instance Constructor C1_9Type
instance Constructor C1_10Type
instance Constructor C1_11Type
instance Constructor C1_12Type
instance Constructor C1_13Type
instance Constructor C1_14Type
instance Constructor C1_15Type
instance Datatype D1AnnTarget
instance Constructor C1_0AnnTarget
instance Constructor C1_1AnnTarget
instance Constructor C1_2AnnTarget
instance Datatype D1Module
instance Constructor C1_0Module
instance Datatype D1Con
instance Constructor C1_0Con
instance Constructor C1_1Con
instance Constructor C1_2Con
instance Constructor C1_3Con
instance Datatype D1Phases
instance Constructor C1_0Phases
instance Constructor C1_1Phases
instance Constructor C1_2Phases
instance Datatype D1Pred
instance Constructor C1_0Pred
instance Constructor C1_1Pred
instance Datatype D1RuleMatch
instance Constructor C1_0RuleMatch
instance Constructor C1_1RuleMatch
instance Datatype D1Name
instance Constructor C1_0Name
instance Datatype D1Match
instance Constructor C1_0Match
instance Datatype D1RuleBndr
instance Constructor C1_0RuleBndr
instance Constructor C1_1RuleBndr
instance Datatype D1Inline
instance Constructor C1_0Inline
instance Constructor C1_1Inline
instance Constructor C1_2Inline
instance Datatype D1FixityDirection
instance Constructor C1_0FixityDirection
instance Constructor C1_1FixityDirection
instance Constructor C1_2FixityDirection
instance Generic NameFlavour
instance Generic Word8
instance Out NameSpace
instance Constructor C_Word8
instance Datatype D_Word8
instance Out Word8
instance Out AnnTarget
instance Out OccName
instance Out PkgName
instance Out Phases
instance Out Pred
instance Out RuleMatch
instance Out RuleBndr
instance Out Inline
instance Out Con
instance Out NameFlavour
instance Out ModName
instance Out Body
instance Out Guard
instance Out Match
instance Out FixityDirection
instance (Generic a, Out a) => Out (TExp a)
instance Out Range
instance Out Stmt
instance Out Safety
instance Out Callconv
instance Out Strict
instance Out ModuleInfo
instance Out Module
instance Out Info
instance Out Loc
instance Out Role
instance Out TySynEqn
instance Out FamFlavour
instance Out Pragma
instance Out Fixity
instance Out Foreign
instance Out FunDep
instance Out Clause
instance Out Dec
instance Out Pat
instance Out Lit
instance Out Exp
instance Out TyLit
instance Out TyVarBndr
instance Out Type
instance Out Name
