-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | regular expression like Perl/Ruby in Haskell
--   
--   Regular expression library like Perl and Ruby's regular expressions.
--   This package has a module RegexPR. And RegexPR export functions
--   matchRegexPR and gsubRegexPR.
--   
--   <pre>
--   matchRegexPR      :: String -&gt; String -&gt; Maybe ((String, (String, String)), [(Int, String)])
--   multiMatchRegexPR :: String -&gt; String -&gt; [ ((String, (String, String)), [(Int, String)]) ]
--   gmatchRegexPR     :: String -&gt; String -&gt; [ ((String, (String, String)), [(Int, String)]) ]
--   getbrsRegexPR     :: String -&gt; String -&gt; [ String ]
--   ggetbrsRegexPR    :: String -&gt; String -&gt; [ [ String ] ]
--   subRegexPR        :: String -&gt; String -&gt; String -&gt; String
--   subRegexPRBy      :: String -&gt; (String -&gt; String) -&gt; String -&gt; String
--   gsubRegexPR       :: String -&gt; String -&gt; String -&gt; String
--   gsubRegexPRBy     :: String -&gt; (String -&gt; String) -&gt; String -&gt; String
--   splitRegexPR      :: String -&gt; String -&gt; [String]
--   </pre>
--   
--   Examples
--   
--   <pre>
--   matchRegexPR "ab(cde)f\\1" "kkkabcdefcdefgh" =&gt;
--                Just (("abcdefcde", ("kkk", "fgh")),[(1,"cde")])
--   matchRegexPR "(?&lt;=hij)abc" "kkkabchijabcde" =&gt;
--                Just (("abc",("kkkabchij","de")),[])
--   gsubRegexPR "\\G(\\d\\d\\d)" "\\1," "123456 789" =&gt; "123,456, 789"
--   subRegexPR "(?&lt;=(.)(.)(.))e" " \\3\\2\\1 " "abcdefg" =&gt; "abcd dcb fg"
--   gsubRegexPR "(?ixm)  aBc  . # comment \n\n" "abc!" "abc\nABCDAbcAbc" =&gt;
--               "abc!abc!abc!bc"
--   gmatchRegexPR "(?=(?&lt;!(?!abc)))abc" "abcdefdefabc" =&gt;
--                [(("abc", ("", "defdefabc")), []), (("abc", ("defdef", "")), [])]
--   splitRegexPR "\\s*,\\s*" "a,b ,c\t ,d , e" =&gt; ["a","b","c","d","e"]
--   </pre>
@package regexpr
@version 0.5.4

module Text.RegexPR
matchRegexPR :: MatchFun Maybe
multiMatchRegexPR :: MatchFun []
gmatchRegexPR :: MatchFun []
getbrsRegexPR :: String -> String -> [String]
ggetbrsRegexPR :: String -> String -> [[String]]
subRegexPR :: String -> String -> String -> String
subRegexPRBy :: String -> (String -> String) -> String -> String
gsubRegexPR :: String -> String -> String -> String
gsubRegexPRBy :: String -> (String -> String) -> String -> String
splitRegexPR :: String -> String -> [String]
