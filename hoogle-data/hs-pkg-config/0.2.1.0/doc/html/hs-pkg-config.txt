-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Create pkg-config configuration files
--   
--   Create <i>pkg-config</i> configuration file from Haskell code using
--   combinators specialized for this purpose.
--   
--   One of the possible usage examples of this library is generating
--   <tt>.pc</tt> files from <a>Shake build system</a>.
--   
--   For usage example see <a>Data.PkgConfig</a> module.
@package hs-pkg-config
@version 0.2.1.0


-- | Simple string template used by <i>pkg-config</i>.
module Data.PkgConfig.Internal.Template

-- | Template consists of variables and literal strings. All special
--   characters ('$', '#', '\' and end-of-line sequences) contained in
--   literals are escaped when serialized.
type PkgTemplate = Template

-- | <a>Template</a> is a possibly empty sequence of fragments represented
--   by <a>Fragment</a> data type.
newtype Template
Template :: [Fragment] -> Template

-- | <a>Template</a> fragment ca be either literal or variable. Literals
--   are subject to escaping rules when serialized.
data Fragment
Literal :: {-# UNPACK #-} !Text -> Fragment
Variable :: {-# UNPACK #-} !Text -> Fragment

-- | Construct variable fragment of a template.
--   
--   <pre>
--   &gt;&gt;&gt; var "prefix" &lt;&gt; lit "/bin"
--   $prefix/bin
--   </pre>
var :: Text -> PkgTemplate

-- | Construct literal fragment of a template. This is useful if language
--   extension <tt>OverloadedStrings</tt> is not enabled.
--   
--   <pre>
--   &gt;&gt;&gt; var "prefix" &lt;&gt; lit "/bin"
--   $prefix/bin
--   </pre>
lit :: Text -> PkgTemplate

-- | Create <a>PkgTemplate</a> literal from <a>String</a> by packing it in
--   to strict <a>Text</a> first.
strLit :: String -> PkgTemplate

-- | Crate one character long <a>PkgTemplate</a> literal.
singletonLit :: Char -> PkgTemplate

-- | Serialize template in to lazy <a>Text</a>.
toLazyText :: Template -> Text

-- | Serialize template in to strict <a>Text</a>.
toStrictText :: Template -> Text

-- | Serialize template in to <a>Builder</a>.
toTextBuilder :: Template -> Builder

-- | Serialize fragment in to <a>Builder</a>.
fragmentToBuilder :: Fragment -> Builder

-- | Serialize fragment in to strict <a>Text</a>. For literals function
--   performs escaping of special characters.
fragmentToStrictText :: Fragment -> Text

-- | List all variables mentioned in <a>PkgTemplate</a>.
--   
--   <pre>
--   &gt;&gt;&gt; variables $ var "foo" &lt;/&gt; "bar" &lt;/&gt; var "baz"
--   ["foo","baz"]
--   </pre>
variables :: PkgTemplate -> [Text]
instance Typeable Fragment
instance Typeable Template
instance Data Fragment
instance Eq Fragment
instance Generic Fragment
instance Data Template
instance Generic Template
instance Datatype D1Fragment
instance Constructor C1_0Fragment
instance Constructor C1_1Fragment
instance Datatype D1Template
instance Constructor C1_0Template
instance Default Template
instance IsString Template
instance Show Template
instance Monoid Template
instance Eq Template


-- | Data type describing <i>pkg-config</i> configuration file.
module Data.PkgConfig.Internal.PkgConfig

-- | Representation of <i>pkg-config</i> configuration file.
data PkgConfig
PkgConfig :: [PkgVariable] -> PkgName -> PkgDescription -> PkgUrl -> PkgVersion -> PkgTemplate -> PkgTemplate -> PkgTemplate -> PkgTemplate -> PkgTemplate -> PkgTemplate -> PkgConfig

-- | Variable definitions.
_pkgVariables :: PkgConfig -> [PkgVariable]

-- | Human-readable name for a library or package. This field is not used
--   by <i>pkg-config</i> tool for queries, because it uses <tt>.pc</tt>
--   file base name.
_pkgName :: PkgConfig -> PkgName

-- | Brief description of the package.
_pkgDescription :: PkgConfig -> PkgDescription

-- | URL where people can get more information about and download the
--   package.
_pkgUrl :: PkgConfig -> PkgUrl

-- | Version of the package.
_pkgVersion :: PkgConfig -> PkgVersion

-- | List of packages required by this package and their version bounds.
_pkgRequires :: PkgConfig -> PkgTemplate

-- | List of private packages required by this package but not exposed to
--   applications. The version specific rules from the Requires field also
--   apply here.
_pkgRequiresPrivate :: PkgConfig -> PkgTemplate

-- | An optional field describing packages that this one conflicts with.
--   The version specific rules from the Requires field also apply here.
--   This field also takes multiple instances of the same package. E.g.:
--   
--   <pre>
--   Conflicts: bar &lt; 1.2.3, bar &gt;= 1.3.0.
--   </pre>
_pkgConflicts :: PkgConfig -> PkgTemplate

-- | Compiler flags specific to this package and any required libraries
--   that don't support <i>pkg-config</i>. If the required libraries
--   support <i>pkg-config</i>, they should be added to <tt>Requires</tt>
--   (<a>_pkgRequires</a>) or <tt>Requires.private</tt>
--   (<a>_pkgRequiresPrivate</a>).
_pkgCflags :: PkgConfig -> PkgTemplate

-- | Linking flags specific to this package and any required libraries that
--   don't support <i>pkg-config</i>. The same rules as for <tt>Cflags</tt>
--   (<a>_pkgCflags</a>) field apply here.
_pkgLibs :: PkgConfig -> PkgTemplate

-- | Linking flags for private libraries required by this package but not
--   exposed to applications. The same rules as for <tt>Cflags</tt>
--   (<a>_pkgCflags</a>) field apply here.
_pkgLibsPrivate :: PkgConfig -> PkgTemplate

-- | Variable definition consisting of its name and value in form of
--   <a>PkgTemplate</a>.
type PkgVariable = (Text, PkgTemplate)
type PkgName = Text
type PkgDescription = Text
type PkgUrl = Text

-- | Package version may use variable expansion and so it is represented by
--   <a>PkgConfig</a>.
type PkgVersion = PkgTemplate

-- | Variable definitions.
pkgVariables :: Functor f => ([PkgVariable] -> f [PkgVariable]) -> PkgConfig -> f PkgConfig

-- | Human-readable name of a library or package. This field is not used by
--   <i>pkg-config</i> tool for queries, because it uses <tt>.pc</tt> file
--   base name.
pkgName :: Functor f => (Text -> f Text) -> PkgConfig -> f PkgConfig

-- | Brief description of the package.
pkgDescription :: Functor f => (Text -> f Text) -> PkgConfig -> f PkgConfig

-- | URL where people can get more information about and download the
--   package.
pkgUrl :: Functor f => (Text -> f Text) -> PkgConfig -> f PkgConfig

-- | Version of the package.
pkgVersion :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | List of packages required by this package and their version bounds.
pkgRequires :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | Compiler flags specific to this package and any required libraries
--   that don't support <i>pkg-config</i>. If the required libraries
--   support <i>pkg-config</i>, they should be added to <tt>Requires</tt>
--   (<a>pkgRequires</a>) or <tt>Requires.private</tt>
--   (<a>pkgRequiresPrivate</a>).
pkgRequiresPrivate :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | An optional field describing packages that this one conflicts with.
--   The version specific rules from the Requires field also apply here.
--   This field also takes multiple instances of the same package. E.g.:
--   
--   <pre>
--   Conflicts: bar &lt; 1.2.3, bar &gt;= 1.3.0.
--   </pre>
pkgConflicts :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | Compiler flags specific to this package and any required libraries
--   that don't support <i>pkg-config</i>. If the required libraries
--   support <i>pkg-config</i>, they should be added to <tt>Requires</tt>
--   (<a>pkgRequires</a>) or <tt>Requires.private</tt>
--   (<a>pkgRequiresPrivate</a>).
pkgCflags :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | Linking flags specific to this package and any required libraries that
--   don't support <i>pkg-config</i>. The same rules as for <tt>Cflags</tt>
--   (<a>pkgCflags</a>) field apply here.
pkgLibs :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | Linking flags for private libraries required by this package but not
--   exposed to applications. The same rules as for <tt>Cflags</tt>
--   (<a>pkgCflags</a>) field apply here.
pkgLibsPrivate :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | Serialize <a>PkgConfig</a> in to strict <a>Text</a>.
toStrictText :: PkgConfig -> Text
instance Typeable PkgConfig
instance Data PkgConfig
instance Generic PkgConfig
instance Show PkgConfig
instance Datatype D1PkgConfig
instance Constructor C1_0PkgConfig
instance Selector S1_0_0PkgConfig
instance Selector S1_0_1PkgConfig
instance Selector S1_0_2PkgConfig
instance Selector S1_0_3PkgConfig
instance Selector S1_0_4PkgConfig
instance Selector S1_0_5PkgConfig
instance Selector S1_0_6PkgConfig
instance Selector S1_0_7PkgConfig
instance Selector S1_0_8PkgConfig
instance Selector S1_0_9PkgConfig
instance Selector S1_0_10PkgConfig
instance Default PkgConfig


-- | Create <i>pkg-config</i> configuration file from Haskell code using
--   combinators specialized for this purpose. To learn more about
--   <i>pkg-config</i> please read one or both following articles:
--   
--   <ul>
--   <li><a>Guide to pkg-config</a> by Dan Nicholson</li>
--   <li><a>Autotools Mythbuster</a> by Diego Elio Petten√≤: <a>Chapter 4.
--   Dependency discovery -- pkg-config</a></li>
--   </ul>
module Data.PkgConfig

-- | Representation of <i>pkg-config</i> configuration file.
data PkgConfig

-- | Variable definitions.
pkgVariables :: Functor f => ([PkgVariable] -> f [PkgVariable]) -> PkgConfig -> f PkgConfig

-- | Human-readable name of a library or package. This field is not used by
--   <i>pkg-config</i> tool for queries, because it uses <tt>.pc</tt> file
--   base name.
pkgName :: Functor f => (Text -> f Text) -> PkgConfig -> f PkgConfig

-- | Brief description of the package.
pkgDescription :: Functor f => (Text -> f Text) -> PkgConfig -> f PkgConfig

-- | URL where people can get more information about and download the
--   package.
pkgUrl :: Functor f => (Text -> f Text) -> PkgConfig -> f PkgConfig

-- | Version of the package.
pkgVersion :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | List of packages required by this package and their version bounds.
pkgRequires :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | Compiler flags specific to this package and any required libraries
--   that don't support <i>pkg-config</i>. If the required libraries
--   support <i>pkg-config</i>, they should be added to <tt>Requires</tt>
--   (<a>pkgRequires</a>) or <tt>Requires.private</tt>
--   (<a>pkgRequiresPrivate</a>).
pkgRequiresPrivate :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | An optional field describing packages that this one conflicts with.
--   The version specific rules from the Requires field also apply here.
--   This field also takes multiple instances of the same package. E.g.:
--   
--   <pre>
--   Conflicts: bar &lt; 1.2.3, bar &gt;= 1.3.0.
--   </pre>
pkgConflicts :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | Compiler flags specific to this package and any required libraries
--   that don't support <i>pkg-config</i>. If the required libraries
--   support <i>pkg-config</i>, they should be added to <tt>Requires</tt>
--   (<a>pkgRequires</a>) or <tt>Requires.private</tt>
--   (<a>pkgRequiresPrivate</a>).
pkgCflags :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | Linking flags specific to this package and any required libraries that
--   don't support <i>pkg-config</i>. The same rules as for <tt>Cflags</tt>
--   (<a>pkgCflags</a>) field apply here.
pkgLibs :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig

-- | Linking flags for private libraries required by this package but not
--   exposed to applications. The same rules as for <tt>Cflags</tt>
--   (<a>pkgCflags</a>) field apply here.
pkgLibsPrivate :: Functor f => (PkgTemplate -> f PkgTemplate) -> PkgConfig -> f PkgConfig
type PkgDescription = Text
type PkgName = Text
type PkgUrl = Text

-- | Variable definition consisting of its name and value in form of
--   <a>PkgTemplate</a>.
type PkgVariable = (Text, PkgTemplate)

-- | Package version may use variable expansion and so it is represented by
--   <a>PkgConfig</a>.
type PkgVersion = PkgTemplate

-- | Serialize <a>PkgConfig</a> in to strict <a>Text</a>.
toStrictText :: PkgConfig -> Text

-- | Serialize <a>PkgConfig</a> in to strict <a>Text</a> and then convert
--   it to a <a>String</a>.
toString :: PkgConfig -> String

-- | Serialize <a>PkgConfig</a> in to strict <a>Text</a> and write it in to
--   a specified file.
writePkgConfig :: FilePath -> PkgConfig -> IO ()

-- | Template consists of variables and literal strings. All special
--   characters ('$', '#', '\' and end-of-line sequences) contained in
--   literals are escaped when serialized.
type PkgTemplate = Template

-- | Construct variable fragment of a template.
--   
--   <pre>
--   &gt;&gt;&gt; var "prefix" &lt;&gt; lit "/bin"
--   $prefix/bin
--   </pre>
var :: Text -> PkgTemplate

-- | Construct literal fragment of a template. This is useful if language
--   extension <tt>OverloadedStrings</tt> is not enabled.
--   
--   <pre>
--   &gt;&gt;&gt; var "prefix" &lt;&gt; lit "/bin"
--   $prefix/bin
--   </pre>
lit :: Text -> PkgTemplate

-- | Create <a>PkgTemplate</a> literal from <a>String</a> by packing it in
--   to strict <a>Text</a> first.
strLit :: String -> PkgTemplate

-- | Crate one character long <a>PkgTemplate</a> literal.
singletonLit :: Char -> PkgTemplate

-- | Put quotation marks ('"') around a template.
--   
--   <pre>
--   &gt;&gt;&gt; quote $ var "prefix" &lt;/&gt; "include"
--   "${prefix}/include"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; var "prefix" &lt;/&gt; quote "dir with spaces"
--   ${prefix}/"dir with spaces"
--   </pre>
quote :: PkgTemplate -> PkgTemplate

-- | Put literal "/" between two templates.
--   
--   <pre>
--   &gt;&gt;&gt; var "prefix" &lt;/&gt; lit "foo" &lt;.&gt; lit "pc"
--   ${prefix}/foo.pc
--   </pre>
(</>) :: PkgTemplate -> PkgTemplate -> PkgTemplate

-- | Put literal "." between two templates.
--   
--   <pre>
--   &gt;&gt;&gt; var "prefix" &lt;/&gt; lit "foo" &lt;.&gt; lit "pc"
--   ${prefix}/foo.pc
--   
--   &gt;&gt;&gt; var "major" &lt;.&gt; var "minor" &lt;.&gt; var "patch"
--   ${major}.${minor}.${patch}
--   </pre>
(<.>) :: PkgTemplate -> PkgTemplate -> PkgTemplate

-- | Treat list of integers as version number and construct template
--   literal out of it.
--   
--   <pre>
--   &gt;&gt;&gt; version [1, 2, 3]
--   1.2.3
--   
--   &gt;&gt;&gt; version [] == mempty
--   True
--   </pre>
version :: [Word] -> PkgTemplate

-- | Variant of <a>version</a> that takes list of integers. This function
--   can be used to create <a>PkgTemplate</a> from standard Haskell
--   <a>Version</a> data type.
--   
--   <pre>
--   &gt;&gt;&gt; versionInt . versionBranch $ Version [0, 1, 2] []
--   0.1.2
--   </pre>
versionInt :: [Int] -> PkgTemplate

-- | Dependency on a package of exact version.
--   
--   <pre>
--   &gt;&gt;&gt; "sqlite" ~= [3, 8, 7, 1]
--   sqlite = 3.8.7.1
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; list ["sqlite" ~= [3, 8, 7, 1], "alpha" ~= [7, 2]]
--   sqlite = 3.8.7.1, alpha = 7.2
--   </pre>
(~=) :: Text -> [Word] -> PkgTemplate

-- | Dependency on a package not of a specific version.
--   
--   <pre>
--   &gt;&gt;&gt; "alpha" ~/= [7, 2]
--   alpha != 7.2
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; list ["sqlite" ~/= [3, 8, 7, 1], "alpha" ~/= [7, 2]]
--   sqlite != 3.8.7.1, alpha != 7.2
--   </pre>
(~/=) :: Text -> [Word] -> PkgTemplate

-- | Dependency on a package with version greater or less then specified
--   value.
--   
--   <pre>
--   &gt;&gt;&gt; "alpha" ~&lt; [7, 3]
--   alpha &lt; 7.3
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; list ["sqlite" ~&lt; [3, 9], "alpha" ~&lt; [7, 3]]
--   sqlite &lt; 3.9, alpha &lt; 7.3
--   </pre>
(~<) :: Text -> [Word] -> PkgTemplate

-- | Dependency on a package with version greater then specified value.
--   
--   <pre>
--   &gt;&gt;&gt; "sqlite" ~&gt; [3, 8]
--   sqlite3 &gt; 3.8
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; list ["sqlite" ~&gt; [3, 8], "alpha" ~&gt; [7, 1]]
--   sqlite &gt; 3.8, alpha &gt; 7.1
--   </pre>
(~>) :: Text -> [Word] -> PkgTemplate

-- | Dependency on a package with version greater or less or equal then
--   specified value.
(~<=) :: Text -> [Word] -> PkgTemplate

-- | Dependency on a package with version greater or equal then specified
--   value.
(~>=) :: Text -> [Word] -> PkgTemplate

-- | Create template starting with option followed by its argument.
--   Argument is quoted using <a>quote</a> function to prevent problems
--   with spaces in directory names.
--   
--   <pre>
--   &gt;&gt;&gt; option "--foo=" $ var "prefix" &lt;/&gt; "some dir"
--   --foo="${prefix}/some dir"
--   </pre>
--   
--   Following property holds:
--   
--   <pre>
--   forall t. <a>option</a> "" t === <a>quote</a> t
--   </pre>
option :: Text -> PkgTemplate -> PkgTemplate

-- | Same as <a>option</a>, but takes <a>String</a> instead of strict
--   <a>Text</a>.
strOption :: String -> PkgTemplate -> PkgTemplate

-- | Take list of templates and make compiler include options. Template for
--   include directory is wrapped in quotes (see <a>quote</a> and
--   <a>option</a> functions).
--   
--   <pre>
--   &gt;&gt;&gt; let d = var "prefix" &lt;/&gt; "include" in includes [d, d &lt;/&gt; var "arch"]
--   -I"${prefix}/include" -I"${prefix}/include/${arch}"
--   
--   &gt;&gt;&gt; includes [var "prefix" &lt;/&gt; "some dir"]
--   -I"${prefix}/some dir"
--   </pre>
includes :: [PkgTemplate] -> PkgTemplate

-- | Take list of templates and make compiler library options.
--   
--   <pre>
--   &gt;&gt;&gt; libraries ["m", "rt", "foo"]
--   -lm -lrt -lfoo
--   </pre>
libraries :: [PkgTemplate] -> PkgTemplate

-- | Take list of templates and make compiler library path options.
--   Template for include directory is wrapped in quotes (see <a>quote</a>
--   and <a>option</a> functions).
--   
--   <pre>
--   &gt;&gt;&gt; let l = var "prefix" &lt;/&gt; lit "lib" in libraryPath [l, l &lt;/&gt; var "arch"]
--   -L"${prefix}/lib" -L"${prefix}/lib/${arch}"
--   </pre>
libraryPath :: [PkgTemplate] -> PkgTemplate

-- | Concatenate templates by inserting coma (',') in between.
--   
--   <pre>
--   &gt;&gt;&gt; list ["foo" .= [1,2,3], "bar" .&gt; [0], "bar" .&lt; [3,1]]
--   foo = 1.2.3, bar &gt; 0, bar &lt; 3.1
--   </pre>
--   
--   Following properties hold:
--   
--   <pre>
--   <a>list</a> [] === <a>mempty</a>
--   forall t. <a>list</a> [t] === t
--   </pre>
list :: [PkgTemplate] -> PkgTemplate

-- | Concatenate templates by inserting space (' ') in between.
--   
--   <pre>
--   &gt;&gt;&gt; options ["-I" &lt;&gt; var "prefix" &lt;/&gt; "lib", "-I" &lt;&gt; var "extra"]
--   -I${prefix}/lib -I${extra}
--   </pre>
--   
--   Following properties hold:
--   
--   <pre>
--   <a>options</a> [] === <a>mempty</a>
--   forall t. <a>options</a> [t] === t
--   </pre>
options :: [PkgTemplate] -> PkgTemplate

-- | Put specified text between templates.
--   
--   Following properties hold:
--   
--   <pre>
--   forall s. <a>separatedBy</a> s [] === <a>mempty</a>
--   forall s t. <a>separatedBy</a> s [t] === t
--   </pre>
--   
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; separatedBy ", " ["foo", "bar", "baz"]
--   foo, bar, baz
--   </pre>
separatedBy :: Text -> [PkgTemplate] -> PkgTemplate

-- | List all variables mentioned in <a>PkgTemplate</a>.
--   
--   <pre>
--   &gt;&gt;&gt; variables $ var "foo" &lt;/&gt; "bar" &lt;/&gt; var "baz"
--   ["foo","baz"]
--   </pre>
variables :: PkgTemplate -> [Text]
