-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Jenkins API interface
--   
@package libjenkins
@version 0.8.1


-- | Optics for <tt>http-client</tt> types
module Network.HTTP.Client.Lens

-- | <a>method</a> lens
method :: Lens' Request Method

-- | <a>secure</a> lens
secure :: Lens' Request Bool

-- | <a>host</a> lens
host :: Lens' Request ByteString

-- | <a>port</a> lens
port :: Lens' Request Int

-- | <a>path</a> lens
path :: Lens' Request ByteString

-- | <a>queryString</a> lens
queryString :: Lens' Request ByteString

-- | <a>requestBody</a> lens
requestBody :: Lens' Request RequestBody

-- | <a>requestHeaders</a> lens
requestHeaders :: Lens' Request RequestHeaders

-- | <a>proxy</a>
proxy :: Lens' Request (Maybe Proxy)

-- | <a>hostAddress</a>
hostAddress :: Lens' Request (Maybe HostAddress)

-- | <a>rawBody</a>
rawBody :: Lens' Request Bool

-- | <a>decompress</a>
decompress :: Lens' Request (ByteString -> Bool)

-- | <a>redirectCount</a> lens
redirectCount :: Lens' Request Int

-- | <a>checkStatus</a> lens
checkStatus :: Lens' Request (Status -> ResponseHeaders -> CookieJar -> Maybe SomeException)

-- | <a>responseTimeout</a> lens
responseTimeout :: Lens' Request (Maybe Int)

-- | <a>cookieJar</a>
cookieJar :: Lens' Request (Maybe CookieJar)

-- | <a>getConnectionWrapper</a>
getConnectionWrapper :: Lens' Request (Maybe Int -> HttpException -> IO (ConnRelease, Connection, ManagedConn) -> IO (Maybe Int, (ConnRelease, Connection, ManagedConn)))

-- | <tt>http-conduit</tt> exceptions
class AsHttpException t
_HttpException :: AsHttpException t => Prism' t HttpException

-- | <a>StatusCodeException</a> exception
_StatusCodeException :: AsHttpException t => Prism' t (Status, ResponseHeaders, CookieJar)

-- | <a>InvalidUrlException</a> exception
_InvalidUrlException :: AsHttpException t => Prism' t (String, String)

-- | <a>TooManyRedirects</a> exception
_TooManyRedirects :: AsHttpException t => Prism' t [Response ByteString]

-- | <a>UnparseableRedirect</a> exception
_UnparseableRedirect :: AsHttpException t => Prism' t (Response ByteString)

-- | <a>TooManyRetries</a> exception
_TooManyRetries :: AsHttpException t => Prism' t ()

-- | <a>HttpParserException</a> exception
_HttpParserException :: AsHttpException t => Prism' t String

-- | <a>HandshakeFailed</a> exception
_HandshakeFailed :: AsHttpException t => Prism' t ()

-- | <a>OverlongHeaders</a> exception
_OverlongHeaders :: AsHttpException t => Prism' t ()

-- | <a>ResponseTimeout</a> exception
_ResponseTimeout :: AsHttpException t => Prism' t ()

-- | <a>FailedConnectionException</a> exception
_FailedConnectionException :: AsHttpException t => Prism' t (String, Int)

-- | <a>ExpectedBlankAfter100Continue</a> exception
_ExpectedBlankAfter100Continue :: AsHttpException t => Prism' t ()

-- | <a>InvalidStatusLine</a> exception
_InvalidStatusLine :: AsHttpException t => Prism' t ByteString

-- | <a>InvalidHeader</a> exception
_InvalidHeader :: AsHttpException t => Prism' t ByteString

-- | <a>InternalIOException</a> exception
_InternalIOException :: AsHttpException t => Prism' t IOException

-- | <a>ProxyConnectException</a> exception
_ProxyConnectException :: AsHttpException t => Prism' t (ByteString, Int, Either ByteString HttpException)

-- | <a>NoResponseDataReceived</a> exception
_NoResponseDataReceived :: AsHttpException t => Prism' t ()

-- | <a>TlsException</a> exception
_TlsException :: AsHttpException t => Prism' t SomeException

-- | <a>TlsNotSupported</a> exception
_TlsNotSupported :: AsHttpException t => Prism' t ()

-- | <a>ResponseBodyTooShort</a> exception
_ResponseBodyTooShort :: AsHttpException t => Prism' t (Word64, Word64)

-- | <a>InvalidChunkHeaders</a> exception
_InvalidChunkHeaders :: AsHttpException t => Prism' t ()

-- | <a>IncompleteHeaders</a> exception
_IncompleteHeaders :: AsHttpException t => Prism' t ()
instance AsHttpException SomeException
instance AsHttpException HttpException


-- | Jenkins REST API methods
module Jenkins.Rest.Method

-- | Use a string as an URI segment
--   
--   <pre>
--   &gt;&gt;&gt; pp (text "foo")
--   "foo"
--   </pre>
--   
--   <i>Note:</i> with <tt>-XOverloadedStrings</tt> extension enabled it's
--   possible to use string literals as segments of the Jenkins API method
--   URL
--   
--   <pre>
--   &gt;&gt;&gt; pp' "foo"
--   "foo"
--   </pre>
--   
--   <i>Note:</i> don't put <tt>/</tt> in the string literal unless you
--   want it URL-encoded, use <tt>(-/-)</tt> instead
--   
--   <pre>
--   &gt;&gt;&gt; pp' "foo/bar"
--   "foo%2Fbar"
--   </pre>
text :: Text -> Method Complete f

-- | Use an integer as an URI segment
--   
--   <pre>
--   &gt;&gt;&gt; pp (int 4)
--   "4"
--   </pre>
int :: Int -> Method Complete f

-- | Combine two paths
--   
--   <pre>
--   &gt;&gt;&gt; pp ("foo" -/- "bar" -/- "baz")
--   "foo/bar/baz"
--   </pre>
(-/-) :: Method Complete f -> Method Complete f -> Method Complete f

-- | Make a key-value pair
--   
--   <pre>
--   &gt;&gt;&gt; pp ("foo" -=- "bar")
--   "foo=bar"
--   </pre>
(-=-) :: Text -> Text -> Method Query f

-- | Create the union of two queries
--   
--   <pre>
--   &gt;&gt;&gt; pp ("foo" -=- "bar" -&amp;- "baz")
--   "foo=bar&amp;baz"
--   </pre>
(-&-) :: Method Query f -> Method Query f -> Method Query f

-- | Take a list of key-value pairs and render them as a query
--   
--   <pre>
--   &gt;&gt;&gt; pp (query [("foo", Nothing), ("bar", Just "baz"), ("quux", Nothing)])
--   "foo&amp;bar=baz&amp;quux"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; pp (query [])
--   ""
--   </pre>
query :: [(Text, Maybe Text)] -> Method Query f

-- | Put path and query together
--   
--   <pre>
--   &gt;&gt;&gt; pp ("qux" -/- "quux" -?- "foo" -=- "bar" -&amp;- "baz")
--   "qux/quux?foo=bar&amp;baz"
--   </pre>
(-?-) :: Method Complete f -> Method Query f -> Method Complete f

-- | <a>Formatter</a>s know how to append the "api/$format" string to the
--   method URL
data Formatter g

-- | Append the JSON formatting request to the method URL
--   
--   <pre>
--   &gt;&gt;&gt; format json "foo"
--   "foo/api/json"
--   </pre>
json :: Formatter Json

-- | Append the XML formatting request to the method URL
--   
--   <pre>
--   &gt;&gt;&gt; format xml "foo"
--   "foo/api/xml"
--   </pre>
xml :: Formatter Xml

-- | Append the Python formatting request to the method URL
--   
--   <pre>
--   &gt;&gt;&gt; format python "foo"
--   "foo/api/python"
--   </pre>
python :: Formatter Python

-- | The formatter that does exactly nothing
--   
--   <pre>
--   &gt;&gt;&gt; format plain "foo"
--   "foo"
--   </pre>
plain :: Formatter f

-- | Job data
--   
--   <pre>
--   &gt;&gt;&gt; format json (job "name")
--   "job/name/api/json"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; pp (job "name" -/- "config.xml")
--   "job/name/config.xml"
--   </pre>
job :: Text -> Method Complete f

-- | Job build data
--   
--   <pre>
--   &gt;&gt;&gt; format json (build "name" 4)
--   "job/name/4/api/json"
--   </pre>
build :: Text -> Int -> Method Complete f

-- | View data
--   
--   <pre>
--   &gt;&gt;&gt; format xml (view "name")
--   "view/name/api/xml"
--   </pre>
view :: Text -> Method Complete f

-- | Build queue data
--   
--   <pre>
--   &gt;&gt;&gt; format python queue
--   "queue/api/python"
--   </pre>
queue :: Method Complete f

-- | Server statistics
--   
--   <pre>
--   &gt;&gt;&gt; format xml overallLoad
--   "overallLoad/api/xml"
--   </pre>
overallLoad :: Method Complete f

-- | Nodes data
--   
--   <pre>
--   &gt;&gt;&gt; format python computer
--   "computer/api/python"
--   </pre>
computer :: Method Complete f

-- | Jenkins RESTFul API method encoding
data Method :: Type -> Format -> *

-- | Method types
data Type
Query :: Type
Complete :: Type

-- | Response formats
data Format
Json :: Format
Xml :: Format
Python :: Format


-- | Jenkins REST API interface
--   
--   This module is intended to be imported qualified.
module Jenkins.Rest

-- | Run a <a>JenkinsT</a> action
--   
--   If a <a>JenkinsException</a> is thrown by performing a request to
--   Jenkins, <tt>runJenkins</tt> will catch and wrap it in
--   <tt><tt>Exception</tt></tt>. Other exceptions will propagate further
--   untouched.
run :: (MonadIO m, MonadBaseControl IO m) => Master -> JenkinsT m a -> m (Either JenkinsException a)

-- | The value of this type describes Jenkins REST API requests sequence
data JenkinsT m a

-- | A handy type synonym for the kind of <a>JenkinsT</a> actions that's
--   used the most
type Jenkins = JenkinsT IO

-- | Jenkins master node connection settings token
data Master
Master :: String -> Text -> Text -> Master

-- | Jenkins URL
url :: Master -> String

-- | Jenkins user
user :: Master -> Text

-- | Jenkins user API token or password
apiToken :: Master -> Text

-- | Perform a <tt>GET</tt> request
--   
--   While the return type is <i>lazy</i> <tt>Bytestring</tt>, the entire
--   response sits in memory anyway: lazy I/O is not used at the least
get :: Formatter f -> (forall g. Method Complete g) -> JenkinsT m ByteString

-- | Perform a streaming <tt>GET</tt> request
--   
--   <a>stream</a>, unlike <a>get</a>, is constant-space
stream :: MonadResource m => Formatter f -> (forall g. Method Complete g) -> JenkinsT m (ResumableSource m ByteString)

-- | Perform a <tt>POST</tt> request
post :: (forall f. Method Complete f) -> ByteString -> JenkinsT m ByteString

-- | Perform a <tt>POST</tt> request without a payload
post_ :: (forall f. Method Complete f) -> JenkinsT m ByteString

-- | A simple exception handler. If an exception is raised while the action
--   is executed the handler is executed with it as an argument
orElse :: JenkinsT m a -> (JenkinsException -> JenkinsT m a) -> JenkinsT m a

-- | A simpler exception handler
--   
--   <pre>
--   orElse_ a b = <a>orElse</a> a (\_ -&gt; b)
--   </pre>
orElse_ :: JenkinsT m a -> JenkinsT m a -> JenkinsT m a

-- | <tt>locally f x</tt> modifies the base <tt>Request</tt> with
--   <tt>f</tt> for the execution of <tt>x</tt> (think <a>local</a>)
--   
--   This is useful for setting the appropriate headers, response timeouts
--   and the like
locally :: (Request -> Request) -> JenkinsT m a -> JenkinsT m a

-- | Run two actions concurrently
concurrently :: JenkinsT m a -> JenkinsT m b -> JenkinsT m (a, b)

-- | Map every list element to an action, run them concurrently and collect
--   the results
--   
--   <pre>
--   <a>traverse</a> : <a>traverse</a> :: <a>concurrently</a> : <a>liftA2</a> (,)
--   </pre>
traverse :: (a -> JenkinsT m b) -> [a] -> JenkinsT m [b]

-- | Map every list element to an action and run them concurrently ignoring
--   the results
--   
--   <pre>
--   <a>traverse_</a> : <a>traverse_</a> :: <a>concurrently</a> : <a>liftA2</a> (,)
--   </pre>
traverse_ :: Foldable f => (a -> JenkinsT m b) -> f a -> JenkinsT m ()

-- | Perform a <tt>POST</tt> request to Jenkins with the XML document
--   
--   Sets up the correct <tt>Content-Type</tt> header. Mostly useful for
--   updating <tt>config.xml</tt> files for jobs, views, etc
postXml :: (forall f. Method Complete f) -> ByteString -> JenkinsT m ByteString

-- | Perform a <tt>POST</tt> request to <tt>/scriptText</tt>
groovy :: Text -> JenkinsT m Text

-- | Reload jenkins configuration from disk
--   
--   Performs <tt>/reload</tt>
reload :: JenkinsT m ()

-- | Restart jenkins safely
--   
--   Performs <tt>/safeRestart</tt>
--   
--   <tt>/safeRestart</tt> allows all running jobs to complete
restart :: JenkinsT m ()

-- | Restart jenkins
--   
--   Performs <tt>/restart</tt>
--   
--   <tt>/restart</tt> restart Jenkins immediately, without waiting for the
--   completion of the building and/or waiting jobs
forceRestart :: JenkinsT m ()

-- | The kind of exceptions that can be thrown by performing requests to
--   the Jenkins REST API
newtype JenkinsException
JenkinsHttpException :: HttpException -> JenkinsException

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => forall a. IO a -> m a

-- | All information on how to connect to a host and what should be sent in
--   the HTTP request.
--   
--   If you simply wish to download from a URL, see <tt>parseUrl</tt>.
--   
--   The constructor for this data type is not exposed. Instead, you should
--   use either the <a>def</a> method to retrieve a default instance, or
--   <tt>parseUrl</tt> to construct from a URL, and then use the records
--   below to make modifications. This approach allows http-client to add
--   configuration options without breaking backwards compatibility.
--   
--   For example, to construct a POST request, you could do something like:
--   
--   <pre>
--   initReq &lt;- parseUrl "http://www.example.com/path"
--   let req = initReq
--               { method = "POST"
--               }
--   </pre>
--   
--   For more information, please see
--   <a>http://www.yesodweb.com/book/settings-types</a>.
--   
--   Since 0.1.0
data Request :: *
instance Typeable Master
instance Show Master
instance Eq Master
instance Data Master


-- | Discover Jenkins on the network
module Jenkins.Discover

-- | Jenkins information
data Discover
Discover :: Text -> Text -> Maybe Text -> Maybe Text -> Discover
version :: Discover -> Text
url :: Discover -> Text
port :: Discover -> Maybe Text
serverId :: Discover -> Maybe Text

-- | Discover Jenkins on the network
discover :: Int -> IO [Discover]
instance Show Discover
instance Eq Discover
