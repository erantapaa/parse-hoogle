-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Reflect Haskell types.
--   
--   Reflect Haskell types.
@package haskell-reflect
@version 0.9

module Language.Haskell.Reflect.Types
data HName
TyVar :: String -> HName
QName :: String -> HName
data HModule
HModule :: String -> Map String HFunction -> Map String HTypeclass -> Map String HDatatype -> HModule
moduleName :: HModule -> String
moduleFunctions :: HModule -> Map String HFunction
moduleTypeclasses :: HModule -> Map String HTypeclass
moduleDatatypes :: HModule -> Map String HDatatype
data HType
HType :: HName -> [HType] -> HType
typeName :: HType -> HName
typeArgs :: HType -> [HType]
data HFunction
HFunction :: String -> [HType] -> String -> [HType] -> HFunction
functionName :: HFunction -> String
functionType :: HFunction -> [HType]
functionSignature :: HFunction -> String
functionContext :: HFunction -> [HType]
data HTypeclass
HTypeclass :: String -> [HFunction] -> [HInstance] -> HTypeclass
typeclassName :: HTypeclass -> String
typeclassMembers :: HTypeclass -> [HFunction]
typeclassInstances :: HTypeclass -> [HInstance]
data HInstance
HInstance :: HInstance
data HDatatype
HDatatype :: String -> String -> Map String HFunction -> HDatatype
datatypeName :: HDatatype -> String
datatypeKind :: HDatatype -> String
datatypeConstructors :: HDatatype -> Map String HFunction
instance Typeable HName
instance Typeable HType
instance Typeable HFunction
instance Typeable HInstance
instance Typeable HTypeclass
instance Typeable HDatatype
instance Typeable HModule
instance Data HName
instance Show HName
instance Read HName
instance Eq HName
instance Ord HName
instance Data HType
instance Show HType
instance Read HType
instance Eq HType
instance Data HFunction
instance Show HFunction
instance Read HFunction
instance Eq HFunction
instance Data HInstance
instance Show HInstance
instance Read HInstance
instance Eq HInstance
instance Data HTypeclass
instance Show HTypeclass
instance Read HTypeclass
instance Eq HTypeclass
instance Data HDatatype
instance Show HDatatype
instance Read HDatatype
instance Eq HDatatype
instance Data HModule
instance Show HModule
instance Read HModule
instance Eq HModule
instance IsString HName

module Language.Haskell.Reflect
readContextFromSignature :: String -> a
readKindFromSignature :: String -> a

-- | Checks whether the given modules are installed in the package database
--   or not.
checkModuleAvailability :: (Functor m, MonadCatchIO m) => [String] -> m [(String, Bool)]
reflectModules :: (Functor m, MonadCatchIO m) => [String] -> m (Map String InterpreterError, Map String HModule)
reflectTypeclasses :: (Functor m, MonadCatchIO m) => [String] -> m [(String, Maybe HTypeclass)]
