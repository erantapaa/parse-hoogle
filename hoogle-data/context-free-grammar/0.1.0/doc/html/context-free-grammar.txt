-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Basic algorithms on context-free grammars
--   
@package context-free-grammar
@version 0.1.0


-- | Pretty-printing that requires a context
module Data.Cfg.CPretty

-- | Pretty-printing that requires a context
class CPretty p ctxt
cpretty :: (CPretty p ctxt, MonadReader ctxt m) => p -> m Doc


-- | Context-free grammars.
module Data.Cfg.Cfg

-- | Represents a context-free grammar with its nonterminal and terminal
--   types.
class Cfg cfg t nt
nonterminals :: Cfg cfg t nt => cfg t nt -> Set nt
terminals :: Cfg cfg t nt => cfg t nt -> Set t
productionRules :: Cfg cfg t nt => cfg t nt -> nt -> Set (Vs t nt)
startSymbol :: Cfg cfg t nt => cfg t nt -> nt

-- | Vocabulary symbols of the grammar.
data V t nt

-- | a terminal
T :: t -> V t nt

-- | a nonterminal
NT :: nt -> V t nt

-- | Synonym for lists of vocabulary symbols.
type Vs t nt = [V t nt]

-- | Returns <a>True</a> iff the vocabularly symbols is a nonterminal.
isNT :: V t nt -> Bool

-- | Returns <a>True</a> iff the vocabularly symbols is a terminal.
isT :: V t nt -> Bool

-- | Maps over the terminal and nonterminal symbols in a <a>V</a>.
bimapV :: (t -> t') -> (nt -> nt') -> V t nt -> V t' nt'

-- | Maps over the terminal and nonterminal symbols in a list of <a>V</a>s.
bimapVs :: (t -> t') -> (nt -> nt') -> Vs t nt -> Vs t' nt'

-- | Returns the vocabulary symbols of the grammar: elements of
--   <a>terminals</a> and <a>nonterminals</a>.
vocabulary :: (Cfg cfg t nt, Ord nt, Ord t) => cfg t nt -> Set (V t nt)

-- | Returns all vocabulary used in the productions plus the start symbol.
usedVocabulary :: (Cfg cfg t nt, Ord nt, Ord t) => cfg t nt -> Set (V t nt)

-- | Returns all vocabulary used in the productions plus the start symbol
--   but not declared in <a>nonterminals</a> or <a>terminals</a>.
undeclaredVocabulary :: (Cfg cfg t nt, Ord nt, Ord t) => cfg t nt -> Set (V t nt)

-- | Returns <a>True</a> all the vocabulary used in the grammar is
--   declared.
isFullyDeclared :: (Cfg cfg t nt, Ord nt, Ord t) => cfg t nt -> Bool

-- | Productions over vocabulary symbols
type Production t nt = (nt, Vs t nt)

-- | Returns the productions of the grammar.
productions :: Cfg cfg t nt => cfg t nt -> [Production t nt]

-- | Returns <a>True</a> iff the two inhabitants of <a>Cfg</a> are equal.
eqCfg :: (Cfg cfg t nt, Cfg cfg' t nt, Eq nt, Eq t) => cfg t nt -> cfg' t nt -> Bool
instance Typeable V
instance (Eq t, Eq nt) => Eq (V t nt)
instance (Ord t, Ord nt) => Ord (V t nt)
instance (Show t, Show nt) => Show (V t nt)
instance (Data t, Data nt) => Data (V t nt)
instance Functor (V t)
instance Cfg cfg t nt => CPretty (cfg t nt) (V t nt -> Doc)


-- | The free <a>Cfg</a>
module Data.Cfg.FreeCfg

-- | Represents a context-free grammar with its nonterminal and terminal
--   types. The canonical instance of <a>Cfg</a>: a record that collects up
--   implementations of each class method.
data FreeCfg t nt
FreeCfg :: Set nt -> Set t -> (nt -> Set (Vs t nt)) -> nt -> FreeCfg t nt

-- | the nonterminals of the grammar
nonterminals' :: FreeCfg t nt -> Set nt

-- | the terminals of the grammar
terminals' :: FreeCfg t nt -> Set t

-- | the productions of the grammar
productionRules' :: FreeCfg t nt -> nt -> Set (Vs t nt)

-- | the start symbol of the grammar; must be an element of
--   <a>nonterminals</a> <tt>cfg</tt>
startSymbol' :: FreeCfg t nt -> nt

-- | Converts any <a>Cfg</a> into a <a>FreeCfg</a>.
toFreeCfg :: Cfg cfg t nt => cfg t nt -> FreeCfg t nt
instance Cfg FreeCfg t nt


-- | Productivity of productions in the grammar.
module Data.Cfg.Productive

-- | Returns the productive productions of this grammar.
productives :: (Cfg cfg t nt, Ord nt, Ord t) => cfg t nt -> Set (Production t nt)

-- | Returns the unproductive productions of this grammar.
unproductives :: (Cfg cfg t nt, Ord nt, Ord t) => cfg t nt -> Set (Production t nt)

-- | Returns an equivalent grammar not including unproductive productions.
removeUnproductives :: (Cfg cfg t nt, Ord nt, Ord t) => cfg t nt -> FreeCfg t nt


-- | Reachability of nonterminals in the grammar.
module Data.Cfg.Reachable

-- | Returns the nonterminals of this grammar reachable from the start
--   symbol.
reachables :: (Cfg cfg t nt, Ord nt) => cfg t nt -> Set nt

-- | Returns the nonterminals of this grammar unreachable from the start
--   symbol.
unreachables :: (Cfg cfg t nt, Ord nt) => cfg t nt -> Set nt

-- | Returns an equivalent grammar not including unreachable nonterminals.
removeUnreachables :: (Cfg cfg t nt, Ord nt) => cfg t nt -> FreeCfg t nt


-- | Results of application of the production rules of a grammar.
module Data.Cfg.RuleApplication

-- | Given a grammar, returns all strings of terminals yielded by
--   application of the production rules to the start symbol. This is the
--   <i>language</i> of the grammar.
language :: (Cfg cfg t nt, Ord nt) => cfg t nt -> [Vs t nt]

-- | Given a grammar, returns all strings yielded by application of
--   production rules.
yields :: (Cfg cfg t nt, Ord nt) => cfg t nt -> [Vs t nt]

-- | Given a grammar and a string of symbols, returns the strings yielded
--   by application of a production rule; that is, by expanding one
--   nonterminal in the string.
directlyYields :: Cfg cfg t nt => cfg t nt -> Vs t nt -> [Vs t nt]


-- | A simple, concrete instance of <tt>Cfg</tt> that can be parsed from
--   source.
--   
--   The grammar of Bnf source is:
--   
--   <pre>
--   grammar ::= (production)+.
--   production ::= LOWER_CASE_STRING "::=" right_hand_sides ".".
--   right_hand_sides ::= right_hand_side ("|" right_hand_side)*.
--   right_hand_side ::= term*.
--   term ::= UPPER_CASE_STRING | LOWER_CASE_STRING.
--   </pre>
--   
--   where <i>*</i> means zero or more repetitions and <i>+</i> means one
--   or more repetitions. Terminals are indicated by strings of upper-case
--   characters and underscores; nonterminals by strings of lower-case
--   characters and underscores. Quoted strings are literal tokens.
module Data.Cfg.Bnf

-- | A simple, concrete instance of <a>Cfg</a>. The terminal and
--   nonterminal symbols of a <a>Grammar</a> are defined to be exactly
--   those appearing the productions. The start symbol is defined to be the
--   head of the first of the productions.
newtype Grammar t nt
Grammar :: [Production t nt] -> Grammar t nt

-- | the productions of the <a>Grammar</a>
grammarProductions :: Grammar t nt -> [Production t nt]

-- | <a>QuasiQuoter</a> for BNF source. Generates a value of type
--   <tt>Grammar</tt>. Not usable in pattern, type or declaration
--   positions.
bnf :: QuasiQuoter

-- | Parses Bnf source into a <a>Grammar</a>.
parse :: String -> Grammar String String


-- | Augmented grammars.
module Data.Cfg.Augment

-- | Returns the <i>augmented</i> grammar: a grammar for the same language
--   but using explicit start and end-of-file symbols.
augmentCfg :: (Cfg cfg t nt, Ord nt, Ord t) => cfg t nt -> FreeCfg (AugT t) (AugNT nt)

-- | Nonterminal symbols augmented with a special <a>StartSymbol</a>
data AugNT nt
StartSymbol :: AugNT nt
AugNT :: nt -> AugNT nt

-- | Terminal symbols augmented with a special end-of-file symbol
data AugT t
EOF :: AugT t
AugT :: t -> AugT t

-- | A convenience synonym for an augmented vocabulary symbol
type AugV t nt = V (AugT t) (AugNT nt)

-- | A convenience synonym for augmented vocabulary symbols
type AugVs t nt = Vs (AugT t) (AugNT nt)

-- | A convenience synonym for augmented productions
type AugProduction t nt = Production (AugT t) (AugNT nt)

-- | A convenience symbol for an augmented grammar
type AugFreeCfg t nt = FreeCfg (AugT t) (AugNT nt)
instance Eq nt => Eq (AugNT nt)
instance Ord nt => Ord (AugNT nt)
instance Show nt => Show (AugNT nt)
instance Eq t => Eq (AugT t)
instance Ord t => Ord (AugT t)
instance Show t => Show (AugT t)


-- | Sets of lookahead symbols.
module Data.Cfg.LookaheadSet

-- | Set of lookahead symbols providing different <a>Monoid</a> semantics
--   than <a>Set</a>. (<a>mappend</a> implements concatenation, not set
--   union.)
data LookaheadSet t

-- | Creates a <a>LookaheadSet</a>
mkLookaheadSet :: Ord t => Bool -> [t] -> LookaheadSet t

-- | Creates a <a>LookaheadSet</a> from a list of augmented terminals.
fromList :: Ord t => [AugT t] -> LookaheadSet t

-- | Converts the <a>LookaheadSet</a> to a regular <a>Set</a>
toSet :: LookaheadSet t -> Set (AugT t)

-- | An infix synonym for <a>mappend</a>.
--   
--   <i>Since: 4.5.0.0</i>
(<>) :: Monoid m => m -> m -> m

-- | The empty lookahead set.
empty :: LookaheadSet t

-- | Creates a singleton lookahead set.
singleton :: AugT t -> LookaheadSet t

-- | Returns the union of all the lookahead sets.
unions :: Ord t => [LookaheadSet t] -> LookaheadSet t
instance Eq t => Eq (LookaheadSet t)
instance Ord t => Ord (LookaheadSet t)
instance Show t => Show (LookaheadSet t)
instance Ord t => Monoid (LookaheadSet t)


-- | Analysis of a context-free grammar
module Data.Cfg.Analysis

-- | Analysis of a context-free grammar
data Analysis t nt
Analysis :: FreeCfg t nt -> FreeCfg (AugT t) (AugNT nt) -> Set (AugNT nt) -> (AugNT nt -> LookaheadSet t) -> (AugVs t nt -> LookaheadSet t) -> (AugNT nt -> LookaheadSet t) -> (AugProduction t nt -> LookaheadSet t) -> Bool -> (AugNT nt -> Predictions t nt) -> Analysis t nt

-- | (a <a>FreeCfg</a> equivalent to) the source grammar
baseCfg :: Analysis t nt -> FreeCfg t nt

-- | the augmented grammar
augmentedCfg :: Analysis t nt -> FreeCfg (AugT t) (AugNT nt)

-- | the nonterminals in the grammar that can produce the empty string
nullables :: Analysis t nt -> Set (AugNT nt)

-- | the first set of the nonterminal for the grammar
firstSet :: Analysis t nt -> AugNT nt -> LookaheadSet t

-- | the first set of a list of symbols
firstsOfVs :: Analysis t nt -> AugVs t nt -> LookaheadSet t

-- | the follow set of the nonterminal for the grammar
followSet :: Analysis t nt -> AugNT nt -> LookaheadSet t

-- | the predict set of the production
predictSet :: Analysis t nt -> AugProduction t nt -> LookaheadSet t

-- | <a>True</a> iff the grammar is LL(1)
isLL1 :: Analysis t nt -> Bool

-- | the productions for this nonterminal and the lookaheads that predict
--   them
ll1Info :: Analysis t nt -> AugNT nt -> Predictions t nt

-- | Analyzes a context-free grammar
mkAnalysis :: (Cfg cfg t nt, Ord nt, Ord t) => cfg t nt -> Analysis t nt

-- | A lookahead set with the productions it predicts
type Prediction t nt = (LookaheadSet t, Set (AugProduction t nt))

-- | A set of <a>Prediction</a>s. The <a>LookaheadSet</a>s of the
--   <a>Prediction</a>s will be pairwise disjoint.
type Predictions t nt = Set (Prediction t nt)


-- | Context-free grammars.
module Data.Cfg
