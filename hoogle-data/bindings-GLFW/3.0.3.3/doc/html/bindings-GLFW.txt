-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Low-level bindings to GLFW OpenGL library
--   
--   Low-level bindings to GLFW (<a>http://www.glfw.org/</a>), an open
--   source, multi-platform library for creating windows with OpenGL
--   contexts and managing input and events.
--   
--   The binding is to GLFW 3.0.3, released 2013-09-24
--   (<a>http://www.glfw.org/Version-3.0.3-released.html</a>
--   <a>http://www.glfw.org/changelog.html</a>).
--   
--   <i>These bindings are too low-level for normal use.</i> For
--   higher-level bindings, see GLFW-b
--   (<a>http://hackage.haskell.org/package/GLFW-b</a>).
--   
--   If you've used GLFW before, you were probably using 2.7.x. There are
--   some significant differences in 3.0.x. Please see the transition guide
--   (<a>http://www.glfw.org/docs/3.0/moving.html</a>).
@package bindings-GLFW
@version 3.0.3.3

module Bindings.GLFW
c'GL_FALSE :: Num a => a
c'GL_TRUE :: Num a => a
c'GLFW_VERSION_MAJOR :: Num a => a
c'GLFW_VERSION_MINOR :: Num a => a
c'GLFW_VERSION_REVISION :: Num a => a
c'GLFW_RELEASE :: Num a => a
c'GLFW_PRESS :: Num a => a
c'GLFW_REPEAT :: Num a => a
c'GLFW_KEY_UNKNOWN :: Num a => a
c'GLFW_KEY_SPACE :: Num a => a
c'GLFW_KEY_APOSTROPHE :: Num a => a
c'GLFW_KEY_COMMA :: Num a => a
c'GLFW_KEY_MINUS :: Num a => a
c'GLFW_KEY_PERIOD :: Num a => a
c'GLFW_KEY_SLASH :: Num a => a
c'GLFW_KEY_0 :: Num a => a
c'GLFW_KEY_1 :: Num a => a
c'GLFW_KEY_2 :: Num a => a
c'GLFW_KEY_3 :: Num a => a
c'GLFW_KEY_4 :: Num a => a
c'GLFW_KEY_5 :: Num a => a
c'GLFW_KEY_6 :: Num a => a
c'GLFW_KEY_7 :: Num a => a
c'GLFW_KEY_8 :: Num a => a
c'GLFW_KEY_9 :: Num a => a
c'GLFW_KEY_SEMICOLON :: Num a => a
c'GLFW_KEY_EQUAL :: Num a => a
c'GLFW_KEY_A :: Num a => a
c'GLFW_KEY_B :: Num a => a
c'GLFW_KEY_C :: Num a => a
c'GLFW_KEY_D :: Num a => a
c'GLFW_KEY_E :: Num a => a
c'GLFW_KEY_F :: Num a => a
c'GLFW_KEY_G :: Num a => a
c'GLFW_KEY_H :: Num a => a
c'GLFW_KEY_I :: Num a => a
c'GLFW_KEY_J :: Num a => a
c'GLFW_KEY_K :: Num a => a
c'GLFW_KEY_L :: Num a => a
c'GLFW_KEY_M :: Num a => a
c'GLFW_KEY_N :: Num a => a
c'GLFW_KEY_O :: Num a => a
c'GLFW_KEY_P :: Num a => a
c'GLFW_KEY_Q :: Num a => a
c'GLFW_KEY_R :: Num a => a
c'GLFW_KEY_S :: Num a => a
c'GLFW_KEY_T :: Num a => a
c'GLFW_KEY_U :: Num a => a
c'GLFW_KEY_V :: Num a => a
c'GLFW_KEY_W :: Num a => a
c'GLFW_KEY_X :: Num a => a
c'GLFW_KEY_Y :: Num a => a
c'GLFW_KEY_Z :: Num a => a
c'GLFW_KEY_LEFT_BRACKET :: Num a => a
c'GLFW_KEY_BACKSLASH :: Num a => a
c'GLFW_KEY_RIGHT_BRACKET :: Num a => a
c'GLFW_KEY_GRAVE_ACCENT :: Num a => a
c'GLFW_KEY_WORLD_1 :: Num a => a
c'GLFW_KEY_WORLD_2 :: Num a => a
c'GLFW_KEY_ESCAPE :: Num a => a
c'GLFW_KEY_ENTER :: Num a => a
c'GLFW_KEY_TAB :: Num a => a
c'GLFW_KEY_BACKSPACE :: Num a => a
c'GLFW_KEY_INSERT :: Num a => a
c'GLFW_KEY_DELETE :: Num a => a
c'GLFW_KEY_RIGHT :: Num a => a
c'GLFW_KEY_LEFT :: Num a => a
c'GLFW_KEY_DOWN :: Num a => a
c'GLFW_KEY_UP :: Num a => a
c'GLFW_KEY_PAGE_UP :: Num a => a
c'GLFW_KEY_PAGE_DOWN :: Num a => a
c'GLFW_KEY_HOME :: Num a => a
c'GLFW_KEY_END :: Num a => a
c'GLFW_KEY_CAPS_LOCK :: Num a => a
c'GLFW_KEY_SCROLL_LOCK :: Num a => a
c'GLFW_KEY_NUM_LOCK :: Num a => a
c'GLFW_KEY_PRINT_SCREEN :: Num a => a
c'GLFW_KEY_PAUSE :: Num a => a
c'GLFW_KEY_F1 :: Num a => a
c'GLFW_KEY_F2 :: Num a => a
c'GLFW_KEY_F3 :: Num a => a
c'GLFW_KEY_F4 :: Num a => a
c'GLFW_KEY_F5 :: Num a => a
c'GLFW_KEY_F6 :: Num a => a
c'GLFW_KEY_F7 :: Num a => a
c'GLFW_KEY_F8 :: Num a => a
c'GLFW_KEY_F9 :: Num a => a
c'GLFW_KEY_F10 :: Num a => a
c'GLFW_KEY_F11 :: Num a => a
c'GLFW_KEY_F12 :: Num a => a
c'GLFW_KEY_F13 :: Num a => a
c'GLFW_KEY_F14 :: Num a => a
c'GLFW_KEY_F15 :: Num a => a
c'GLFW_KEY_F16 :: Num a => a
c'GLFW_KEY_F17 :: Num a => a
c'GLFW_KEY_F18 :: Num a => a
c'GLFW_KEY_F19 :: Num a => a
c'GLFW_KEY_F20 :: Num a => a
c'GLFW_KEY_F21 :: Num a => a
c'GLFW_KEY_F22 :: Num a => a
c'GLFW_KEY_F23 :: Num a => a
c'GLFW_KEY_F24 :: Num a => a
c'GLFW_KEY_F25 :: Num a => a
c'GLFW_KEY_KP_0 :: Num a => a
c'GLFW_KEY_KP_1 :: Num a => a
c'GLFW_KEY_KP_2 :: Num a => a
c'GLFW_KEY_KP_3 :: Num a => a
c'GLFW_KEY_KP_4 :: Num a => a
c'GLFW_KEY_KP_5 :: Num a => a
c'GLFW_KEY_KP_6 :: Num a => a
c'GLFW_KEY_KP_7 :: Num a => a
c'GLFW_KEY_KP_8 :: Num a => a
c'GLFW_KEY_KP_9 :: Num a => a
c'GLFW_KEY_KP_DECIMAL :: Num a => a
c'GLFW_KEY_KP_DIVIDE :: Num a => a
c'GLFW_KEY_KP_MULTIPLY :: Num a => a
c'GLFW_KEY_KP_SUBTRACT :: Num a => a
c'GLFW_KEY_KP_ADD :: Num a => a
c'GLFW_KEY_KP_ENTER :: Num a => a
c'GLFW_KEY_KP_EQUAL :: Num a => a
c'GLFW_KEY_LEFT_SHIFT :: Num a => a
c'GLFW_KEY_LEFT_CONTROL :: Num a => a
c'GLFW_KEY_LEFT_ALT :: Num a => a
c'GLFW_KEY_LEFT_SUPER :: Num a => a
c'GLFW_KEY_RIGHT_SHIFT :: Num a => a
c'GLFW_KEY_RIGHT_CONTROL :: Num a => a
c'GLFW_KEY_RIGHT_ALT :: Num a => a
c'GLFW_KEY_RIGHT_SUPER :: Num a => a
c'GLFW_KEY_MENU :: Num a => a
c'GLFW_KEY_LAST :: Num a => a
c'GLFW_MOD_SHIFT :: Num a => a
c'GLFW_MOD_CONTROL :: Num a => a
c'GLFW_MOD_ALT :: Num a => a
c'GLFW_MOD_SUPER :: Num a => a
c'GLFW_MOUSE_BUTTON_1 :: Num a => a
c'GLFW_MOUSE_BUTTON_2 :: Num a => a
c'GLFW_MOUSE_BUTTON_3 :: Num a => a
c'GLFW_MOUSE_BUTTON_4 :: Num a => a
c'GLFW_MOUSE_BUTTON_5 :: Num a => a
c'GLFW_MOUSE_BUTTON_6 :: Num a => a
c'GLFW_MOUSE_BUTTON_7 :: Num a => a
c'GLFW_MOUSE_BUTTON_8 :: Num a => a
c'GLFW_MOUSE_BUTTON_LAST :: Num a => a
c'GLFW_MOUSE_BUTTON_LEFT :: Num a => a
c'GLFW_MOUSE_BUTTON_RIGHT :: Num a => a
c'GLFW_MOUSE_BUTTON_MIDDLE :: Num a => a
c'GLFW_JOYSTICK_1 :: Num a => a
c'GLFW_JOYSTICK_2 :: Num a => a
c'GLFW_JOYSTICK_3 :: Num a => a
c'GLFW_JOYSTICK_4 :: Num a => a
c'GLFW_JOYSTICK_5 :: Num a => a
c'GLFW_JOYSTICK_6 :: Num a => a
c'GLFW_JOYSTICK_7 :: Num a => a
c'GLFW_JOYSTICK_8 :: Num a => a
c'GLFW_JOYSTICK_9 :: Num a => a
c'GLFW_JOYSTICK_10 :: Num a => a
c'GLFW_JOYSTICK_11 :: Num a => a
c'GLFW_JOYSTICK_12 :: Num a => a
c'GLFW_JOYSTICK_13 :: Num a => a
c'GLFW_JOYSTICK_14 :: Num a => a
c'GLFW_JOYSTICK_15 :: Num a => a
c'GLFW_JOYSTICK_16 :: Num a => a
c'GLFW_JOYSTICK_LAST :: Num a => a
c'GLFW_NOT_INITIALIZED :: Num a => a
c'GLFW_NO_CURRENT_CONTEXT :: Num a => a
c'GLFW_INVALID_ENUM :: Num a => a
c'GLFW_INVALID_VALUE :: Num a => a
c'GLFW_OUT_OF_MEMORY :: Num a => a
c'GLFW_API_UNAVAILABLE :: Num a => a
c'GLFW_VERSION_UNAVAILABLE :: Num a => a
c'GLFW_PLATFORM_ERROR :: Num a => a
c'GLFW_FORMAT_UNAVAILABLE :: Num a => a
c'GLFW_FOCUSED :: Num a => a
c'GLFW_ICONIFIED :: Num a => a
c'GLFW_RESIZABLE :: Num a => a
c'GLFW_VISIBLE :: Num a => a
c'GLFW_DECORATED :: Num a => a
c'GLFW_RED_BITS :: Num a => a
c'GLFW_GREEN_BITS :: Num a => a
c'GLFW_BLUE_BITS :: Num a => a
c'GLFW_ALPHA_BITS :: Num a => a
c'GLFW_DEPTH_BITS :: Num a => a
c'GLFW_STENCIL_BITS :: Num a => a
c'GLFW_ACCUM_RED_BITS :: Num a => a
c'GLFW_ACCUM_GREEN_BITS :: Num a => a
c'GLFW_ACCUM_BLUE_BITS :: Num a => a
c'GLFW_ACCUM_ALPHA_BITS :: Num a => a
c'GLFW_AUX_BUFFERS :: Num a => a
c'GLFW_STEREO :: Num a => a
c'GLFW_SAMPLES :: Num a => a
c'GLFW_SRGB_CAPABLE :: Num a => a
c'GLFW_REFRESH_RATE :: Num a => a
c'GLFW_CLIENT_API :: Num a => a
c'GLFW_CONTEXT_VERSION_MAJOR :: Num a => a
c'GLFW_CONTEXT_VERSION_MINOR :: Num a => a
c'GLFW_CONTEXT_REVISION :: Num a => a
c'GLFW_CONTEXT_ROBUSTNESS :: Num a => a
c'GLFW_OPENGL_FORWARD_COMPAT :: Num a => a
c'GLFW_OPENGL_DEBUG_CONTEXT :: Num a => a
c'GLFW_OPENGL_PROFILE :: Num a => a
c'GLFW_OPENGL_API :: Num a => a
c'GLFW_OPENGL_ES_API :: Num a => a
c'GLFW_NO_ROBUSTNESS :: Num a => a
c'GLFW_NO_RESET_NOTIFICATION :: Num a => a
c'GLFW_LOSE_CONTEXT_ON_RESET :: Num a => a
c'GLFW_OPENGL_ANY_PROFILE :: Num a => a
c'GLFW_OPENGL_CORE_PROFILE :: Num a => a
c'GLFW_OPENGL_COMPAT_PROFILE :: Num a => a
c'GLFW_CURSOR :: Num a => a
c'GLFW_STICKY_KEYS :: Num a => a
c'GLFW_STICKY_MOUSE_BUTTONS :: Num a => a
c'GLFW_CURSOR_NORMAL :: Num a => a
c'GLFW_CURSOR_HIDDEN :: Num a => a
c'GLFW_CURSOR_DISABLED :: Num a => a
c'GLFW_CONNECTED :: Num a => a
c'GLFW_DISCONNECTED :: Num a => a
type C'GLFWglproc = FunPtr (IO ())
mk'GLFWglproc :: (IO ()) -> IO C'GLFWglproc
data C'GLFWmonitor
C'GLFWmonitor :: C'GLFWmonitor
mK'GLFWglproc :: C'GLFWglproc -> (IO ())
data C'GLFWwindow
C'GLFWwindow :: C'GLFWwindow
type C'GLFWerrorfun = FunPtr (CInt -> Ptr CChar -> IO ())
type C'GLFWwindowposfun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
mk'GLFWerrorfun :: (CInt -> Ptr CChar -> IO ()) -> IO C'GLFWerrorfun
type C'GLFWwindowsizefun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
mk'GLFWwindowposfun :: (Ptr C'GLFWwindow -> CInt -> CInt -> IO ()) -> IO C'GLFWwindowposfun
type C'GLFWwindowclosefun = FunPtr (Ptr C'GLFWwindow -> IO ())
mK'GLFWerrorfun :: C'GLFWerrorfun -> (CInt -> Ptr CChar -> IO ())
mk'GLFWwindowsizefun :: (Ptr C'GLFWwindow -> CInt -> CInt -> IO ()) -> IO C'GLFWwindowsizefun
type C'GLFWwindowrefreshfun = FunPtr (Ptr C'GLFWwindow -> IO ())
mk'GLFWwindowclosefun :: (Ptr C'GLFWwindow -> IO ()) -> IO C'GLFWwindowclosefun
mK'GLFWwindowposfun :: C'GLFWwindowposfun -> (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
type C'GLFWwindowfocusfun = FunPtr (Ptr C'GLFWwindow -> CInt -> IO ())
mk'GLFWwindowrefreshfun :: (Ptr C'GLFWwindow -> IO ()) -> IO C'GLFWwindowrefreshfun
mK'GLFWwindowsizefun :: C'GLFWwindowsizefun -> (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
type C'GLFWwindowiconifyfun = FunPtr (Ptr C'GLFWwindow -> CInt -> IO ())
mK'GLFWwindowclosefun :: C'GLFWwindowclosefun -> (Ptr C'GLFWwindow -> IO ())
mk'GLFWwindowfocusfun :: (Ptr C'GLFWwindow -> CInt -> IO ()) -> IO C'GLFWwindowfocusfun
type C'GLFWframebuffersizefun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
mK'GLFWwindowrefreshfun :: C'GLFWwindowrefreshfun -> (Ptr C'GLFWwindow -> IO ())
mk'GLFWwindowiconifyfun :: (Ptr C'GLFWwindow -> CInt -> IO ()) -> IO C'GLFWwindowiconifyfun
type C'GLFWmousebuttonfun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> CInt -> IO ())
mK'GLFWwindowfocusfun :: C'GLFWwindowfocusfun -> (Ptr C'GLFWwindow -> CInt -> IO ())
mk'GLFWframebuffersizefun :: (Ptr C'GLFWwindow -> CInt -> CInt -> IO ()) -> IO C'GLFWframebuffersizefun
type C'GLFWcursorposfun = FunPtr (Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ())
mK'GLFWwindowiconifyfun :: C'GLFWwindowiconifyfun -> (Ptr C'GLFWwindow -> CInt -> IO ())
mk'GLFWmousebuttonfun :: (Ptr C'GLFWwindow -> CInt -> CInt -> CInt -> IO ()) -> IO C'GLFWmousebuttonfun
type C'GLFWcursorenterfun = FunPtr (Ptr C'GLFWwindow -> CInt -> IO ())
mK'GLFWframebuffersizefun :: C'GLFWframebuffersizefun -> (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
mk'GLFWcursorposfun :: (Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ()) -> IO C'GLFWcursorposfun
type C'GLFWscrollfun = FunPtr (Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ())
mk'GLFWcursorenterfun :: (Ptr C'GLFWwindow -> CInt -> IO ()) -> IO C'GLFWcursorenterfun
mK'GLFWmousebuttonfun :: C'GLFWmousebuttonfun -> (Ptr C'GLFWwindow -> CInt -> CInt -> CInt -> IO ())
type C'GLFWkeyfun = FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> CInt -> CInt -> IO ())
mk'GLFWscrollfun :: (Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ()) -> IO C'GLFWscrollfun
mK'GLFWcursorposfun :: C'GLFWcursorposfun -> (Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ())
type C'GLFWcharfun = FunPtr (Ptr C'GLFWwindow -> CUInt -> IO ())
mK'GLFWcursorenterfun :: C'GLFWcursorenterfun -> (Ptr C'GLFWwindow -> CInt -> IO ())
mk'GLFWkeyfun :: (Ptr C'GLFWwindow -> CInt -> CInt -> CInt -> CInt -> IO ()) -> IO C'GLFWkeyfun
type C'GLFWmonitorfun = FunPtr (Ptr C'GLFWmonitor -> CInt -> IO ())
mk'GLFWcharfun :: (Ptr C'GLFWwindow -> CUInt -> IO ()) -> IO C'GLFWcharfun
mK'GLFWscrollfun :: C'GLFWscrollfun -> (Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ())
mk'GLFWmonitorfun :: (Ptr C'GLFWmonitor -> CInt -> IO ()) -> IO C'GLFWmonitorfun
mK'GLFWkeyfun :: C'GLFWkeyfun -> (Ptr C'GLFWwindow -> CInt -> CInt -> CInt -> CInt -> IO ())
mK'GLFWcharfun :: C'GLFWcharfun -> (Ptr C'GLFWwindow -> CUInt -> IO ())
mK'GLFWmonitorfun :: C'GLFWmonitorfun -> (Ptr C'GLFWmonitor -> CInt -> IO ())
data C'GLFWvidmode
C'GLFWvidmode :: CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> C'GLFWvidmode
c'GLFWvidmode'width :: C'GLFWvidmode -> CInt
c'GLFWvidmode'height :: C'GLFWvidmode -> CInt
c'GLFWvidmode'redBits :: C'GLFWvidmode -> CInt
c'GLFWvidmode'greenBits :: C'GLFWvidmode -> CInt
c'GLFWvidmode'blueBits :: C'GLFWvidmode -> CInt
c'GLFWvidmode'refreshRate :: C'GLFWvidmode -> CInt
data C'GLFWgammaramp
C'GLFWgammaramp :: Ptr CUShort -> Ptr CUShort -> Ptr CUShort -> CUInt -> C'GLFWgammaramp
c'GLFWgammaramp'red :: C'GLFWgammaramp -> Ptr CUShort
c'GLFWgammaramp'green :: C'GLFWgammaramp -> Ptr CUShort
c'GLFWgammaramp'blue :: C'GLFWgammaramp -> Ptr CUShort
c'GLFWgammaramp'size :: C'GLFWgammaramp -> CUInt
p'GLFWvidmode'width :: Ptr (C'GLFWvidmode) -> Ptr (CInt)
c'glfwInit :: IO CInt
c'glfwTerminate :: IO ()
p'GLFWvidmode'height :: Ptr (C'GLFWvidmode) -> Ptr (CInt)
p'glfwInit :: FunPtr (IO CInt)
c'glfwGetVersion :: Ptr CInt -> Ptr CInt -> Ptr CInt -> IO ()
c'glfwGetVersionString :: IO (Ptr CChar)
p'glfwTerminate :: FunPtr (IO ())
p'GLFWvidmode'redBits :: Ptr (C'GLFWvidmode) -> Ptr (CInt)
c'glfwSetErrorCallback :: C'GLFWerrorfun -> IO C'GLFWerrorfun
p'glfwGetVersion :: FunPtr (Ptr CInt -> Ptr CInt -> Ptr CInt -> IO ())
p'GLFWgammaramp'red :: Ptr (C'GLFWgammaramp) -> Ptr (Ptr CUShort)
p'glfwGetVersionString :: FunPtr (IO (Ptr CChar))
c'glfwGetMonitors :: Ptr CInt -> IO (Ptr (Ptr C'GLFWmonitor))
p'GLFWvidmode'greenBits :: Ptr (C'GLFWvidmode) -> Ptr (CInt)
c'glfwGetPrimaryMonitor :: IO (Ptr C'GLFWmonitor)
p'glfwSetErrorCallback :: FunPtr (C'GLFWerrorfun -> IO C'GLFWerrorfun)
p'GLFWgammaramp'green :: Ptr (C'GLFWgammaramp) -> Ptr (Ptr CUShort)
p'glfwGetMonitors :: FunPtr (Ptr CInt -> IO (Ptr (Ptr C'GLFWmonitor)))
c'glfwGetMonitorPos :: Ptr C'GLFWmonitor -> Ptr CInt -> Ptr CInt -> IO ()
p'GLFWvidmode'blueBits :: Ptr (C'GLFWvidmode) -> Ptr (CInt)
p'glfwGetPrimaryMonitor :: FunPtr (IO (Ptr C'GLFWmonitor))
c'glfwGetMonitorPhysicalSize :: Ptr C'GLFWmonitor -> Ptr CInt -> Ptr CInt -> IO ()
p'GLFWgammaramp'blue :: Ptr (C'GLFWgammaramp) -> Ptr (Ptr CUShort)
c'glfwGetMonitorName :: Ptr C'GLFWmonitor -> IO (Ptr CChar)
p'glfwGetMonitorPos :: FunPtr (Ptr C'GLFWmonitor -> Ptr CInt -> Ptr CInt -> IO ())
p'GLFWvidmode'refreshRate :: Ptr (C'GLFWvidmode) -> Ptr (CInt)
c'glfwSetMonitorCallback :: C'GLFWmonitorfun -> IO C'GLFWmonitorfun
p'glfwGetMonitorPhysicalSize :: FunPtr (Ptr C'GLFWmonitor -> Ptr CInt -> Ptr CInt -> IO ())
p'GLFWgammaramp'size :: Ptr (C'GLFWgammaramp) -> Ptr (CUInt)
p'glfwGetMonitorName :: FunPtr (Ptr C'GLFWmonitor -> IO (Ptr CChar))
c'glfwGetVideoModes :: Ptr C'GLFWmonitor -> Ptr CInt -> IO (Ptr C'GLFWvidmode)
c'glfwGetVideoMode :: Ptr C'GLFWmonitor -> IO (Ptr C'GLFWvidmode)
p'glfwSetMonitorCallback :: FunPtr (C'GLFWmonitorfun -> IO C'GLFWmonitorfun)
c'glfwSetGamma :: Ptr C'GLFWmonitor -> CFloat -> IO ()
p'glfwGetVideoModes :: FunPtr (Ptr C'GLFWmonitor -> Ptr CInt -> IO (Ptr C'GLFWvidmode))
c'glfwGetGammaRamp :: Ptr C'GLFWmonitor -> IO (Ptr C'GLFWgammaramp)
p'glfwGetVideoMode :: FunPtr (Ptr C'GLFWmonitor -> IO (Ptr C'GLFWvidmode))
p'glfwSetGamma :: FunPtr (Ptr C'GLFWmonitor -> CFloat -> IO ())
c'glfwSetGammaRamp :: Ptr C'GLFWmonitor -> Ptr C'GLFWgammaramp -> IO ()
c'glfwDefaultWindowHints :: IO ()
p'glfwGetGammaRamp :: FunPtr (Ptr C'GLFWmonitor -> IO (Ptr C'GLFWgammaramp))
c'glfwWindowHint :: CInt -> CInt -> IO ()
p'glfwSetGammaRamp :: FunPtr (Ptr C'GLFWmonitor -> Ptr C'GLFWgammaramp -> IO ())
p'glfwDefaultWindowHints :: FunPtr (IO ())
c'glfwCreateWindow :: CInt -> CInt -> Ptr CChar -> Ptr C'GLFWmonitor -> Ptr C'GLFWwindow -> IO (Ptr C'GLFWwindow)
c'glfwDestroyWindow :: Ptr C'GLFWwindow -> IO ()
p'glfwWindowHint :: FunPtr (CInt -> CInt -> IO ())
c'glfwWindowShouldClose :: Ptr C'GLFWwindow -> IO CInt
p'glfwCreateWindow :: FunPtr (CInt -> CInt -> Ptr CChar -> Ptr C'GLFWmonitor -> Ptr C'GLFWwindow -> IO (Ptr C'GLFWwindow))
c'glfwSetWindowShouldClose :: Ptr C'GLFWwindow -> CInt -> IO ()
p'glfwDestroyWindow :: FunPtr (Ptr C'GLFWwindow -> IO ())
p'glfwWindowShouldClose :: FunPtr (Ptr C'GLFWwindow -> IO CInt)
c'glfwSetWindowTitle :: Ptr C'GLFWwindow -> Ptr CChar -> IO ()
p'glfwSetWindowShouldClose :: FunPtr (Ptr C'GLFWwindow -> CInt -> IO ())
c'glfwGetWindowPos :: Ptr C'GLFWwindow -> Ptr CInt -> Ptr CInt -> IO ()
c'glfwSetWindowPos :: Ptr C'GLFWwindow -> CInt -> CInt -> IO ()
p'glfwSetWindowTitle :: FunPtr (Ptr C'GLFWwindow -> Ptr CChar -> IO ())
c'glfwGetWindowSize :: Ptr C'GLFWwindow -> Ptr CInt -> Ptr CInt -> IO ()
p'glfwGetWindowPos :: FunPtr (Ptr C'GLFWwindow -> Ptr CInt -> Ptr CInt -> IO ())
c'glfwSetWindowSize :: Ptr C'GLFWwindow -> CInt -> CInt -> IO ()
p'glfwSetWindowPos :: FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
c'glfwGetFramebufferSize :: Ptr C'GLFWwindow -> Ptr CInt -> Ptr CInt -> IO ()
p'glfwGetWindowSize :: FunPtr (Ptr C'GLFWwindow -> Ptr CInt -> Ptr CInt -> IO ())
c'glfwIconifyWindow :: Ptr C'GLFWwindow -> IO ()
p'glfwSetWindowSize :: FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
c'glfwRestoreWindow :: Ptr C'GLFWwindow -> IO ()
p'glfwGetFramebufferSize :: FunPtr (Ptr C'GLFWwindow -> Ptr CInt -> Ptr CInt -> IO ())
c'glfwShowWindow :: Ptr C'GLFWwindow -> IO ()
p'glfwIconifyWindow :: FunPtr (Ptr C'GLFWwindow -> IO ())
c'glfwHideWindow :: Ptr C'GLFWwindow -> IO ()
p'glfwRestoreWindow :: FunPtr (Ptr C'GLFWwindow -> IO ())
p'glfwShowWindow :: FunPtr (Ptr C'GLFWwindow -> IO ())
c'glfwGetWindowMonitor :: Ptr C'GLFWwindow -> IO (Ptr C'GLFWmonitor)
p'glfwHideWindow :: FunPtr (Ptr C'GLFWwindow -> IO ())
c'glfwGetWindowAttrib :: Ptr C'GLFWwindow -> CInt -> IO CInt
c'glfwSetWindowUserPointer :: Ptr C'GLFWwindow -> Ptr () -> IO ()
p'glfwGetWindowMonitor :: FunPtr (Ptr C'GLFWwindow -> IO (Ptr C'GLFWmonitor))
c'glfwGetWindowUserPointer :: Ptr C'GLFWwindow -> IO (Ptr ())
p'glfwGetWindowAttrib :: FunPtr (Ptr C'GLFWwindow -> CInt -> IO CInt)
p'glfwSetWindowUserPointer :: FunPtr (Ptr C'GLFWwindow -> Ptr () -> IO ())
c'glfwSetWindowPosCallback :: Ptr C'GLFWwindow -> C'GLFWwindowposfun -> IO C'GLFWwindowposfun
p'glfwGetWindowUserPointer :: FunPtr (Ptr C'GLFWwindow -> IO (Ptr ()))
c'glfwSetWindowSizeCallback :: Ptr C'GLFWwindow -> C'GLFWwindowsizefun -> IO C'GLFWwindowsizefun
c'glfwSetWindowCloseCallback :: Ptr C'GLFWwindow -> C'GLFWwindowclosefun -> IO C'GLFWwindowclosefun
p'glfwSetWindowPosCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWwindowposfun -> IO C'GLFWwindowposfun)
c'glfwSetWindowRefreshCallback :: Ptr C'GLFWwindow -> C'GLFWwindowrefreshfun -> IO C'GLFWwindowrefreshfun
p'glfwSetWindowSizeCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWwindowsizefun -> IO C'GLFWwindowsizefun)
c'glfwSetWindowFocusCallback :: Ptr C'GLFWwindow -> C'GLFWwindowfocusfun -> IO C'GLFWwindowfocusfun
p'glfwSetWindowCloseCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWwindowclosefun -> IO C'GLFWwindowclosefun)
c'glfwSetWindowIconifyCallback :: Ptr C'GLFWwindow -> C'GLFWwindowiconifyfun -> IO C'GLFWwindowiconifyfun
p'glfwSetWindowRefreshCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWwindowrefreshfun -> IO C'GLFWwindowrefreshfun)
c'glfwSetFramebufferSizeCallback :: Ptr C'GLFWwindow -> C'GLFWframebuffersizefun -> IO C'GLFWframebuffersizefun
p'glfwSetWindowFocusCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWwindowfocusfun -> IO C'GLFWwindowfocusfun)
c'glfwPollEvents :: IO ()
p'glfwSetWindowIconifyCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWwindowiconifyfun -> IO C'GLFWwindowiconifyfun)
c'glfwWaitEvents :: IO ()
p'glfwSetFramebufferSizeCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWframebuffersizefun -> IO C'GLFWframebuffersizefun)
p'glfwPollEvents :: FunPtr (IO ())
c'glfwGetInputMode :: Ptr C'GLFWwindow -> CInt -> IO CInt
p'glfwWaitEvents :: FunPtr (IO ())
c'glfwSetInputMode :: Ptr C'GLFWwindow -> CInt -> CInt -> IO ()
c'glfwGetKey :: Ptr C'GLFWwindow -> CInt -> IO CInt
p'glfwGetInputMode :: FunPtr (Ptr C'GLFWwindow -> CInt -> IO CInt)
c'glfwGetMouseButton :: Ptr C'GLFWwindow -> CInt -> IO CInt
p'glfwSetInputMode :: FunPtr (Ptr C'GLFWwindow -> CInt -> CInt -> IO ())
p'glfwGetKey :: FunPtr (Ptr C'GLFWwindow -> CInt -> IO CInt)
c'glfwGetCursorPos :: Ptr C'GLFWwindow -> Ptr CDouble -> Ptr CDouble -> IO ()
p'glfwGetMouseButton :: FunPtr (Ptr C'GLFWwindow -> CInt -> IO CInt)
c'glfwSetCursorPos :: Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ()
c'glfwSetKeyCallback :: Ptr C'GLFWwindow -> C'GLFWkeyfun -> IO C'GLFWkeyfun
p'glfwGetCursorPos :: FunPtr (Ptr C'GLFWwindow -> Ptr CDouble -> Ptr CDouble -> IO ())
c'glfwSetCharCallback :: Ptr C'GLFWwindow -> C'GLFWcharfun -> IO C'GLFWcharfun
p'glfwSetCursorPos :: FunPtr (Ptr C'GLFWwindow -> CDouble -> CDouble -> IO ())
p'glfwSetKeyCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWkeyfun -> IO C'GLFWkeyfun)
c'glfwSetMouseButtonCallback :: Ptr C'GLFWwindow -> C'GLFWmousebuttonfun -> IO C'GLFWmousebuttonfun
p'glfwSetCharCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWcharfun -> IO C'GLFWcharfun)
c'glfwSetCursorPosCallback :: Ptr C'GLFWwindow -> C'GLFWcursorposfun -> IO C'GLFWcursorposfun
c'glfwSetCursorEnterCallback :: Ptr C'GLFWwindow -> C'GLFWcursorenterfun -> IO C'GLFWcursorenterfun
p'glfwSetMouseButtonCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWmousebuttonfun -> IO C'GLFWmousebuttonfun)
c'glfwSetScrollCallback :: Ptr C'GLFWwindow -> C'GLFWscrollfun -> IO C'GLFWscrollfun
p'glfwSetCursorPosCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWcursorposfun -> IO C'GLFWcursorposfun)
c'glfwJoystickPresent :: CInt -> IO CInt
p'glfwSetCursorEnterCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWcursorenterfun -> IO C'GLFWcursorenterfun)
c'glfwGetJoystickAxes :: CInt -> Ptr CInt -> IO (Ptr CFloat)
p'glfwSetScrollCallback :: FunPtr (Ptr C'GLFWwindow -> C'GLFWscrollfun -> IO C'GLFWscrollfun)
p'glfwJoystickPresent :: FunPtr (CInt -> IO CInt)
c'glfwGetJoystickButtons :: CInt -> Ptr CInt -> IO (Ptr CUChar)
c'glfwGetJoystickName :: CInt -> IO (Ptr CChar)
p'glfwGetJoystickAxes :: FunPtr (CInt -> Ptr CInt -> IO (Ptr CFloat))
c'glfwSetClipboardString :: Ptr C'GLFWwindow -> Ptr CChar -> IO ()
p'glfwGetJoystickButtons :: FunPtr (CInt -> Ptr CInt -> IO (Ptr CUChar))
p'glfwGetJoystickName :: FunPtr (CInt -> IO (Ptr CChar))
c'glfwGetClipboardString :: Ptr C'GLFWwindow -> IO (Ptr CChar)
c'glfwGetTime :: IO CDouble
p'glfwSetClipboardString :: FunPtr (Ptr C'GLFWwindow -> Ptr CChar -> IO ())
c'glfwSetTime :: CDouble -> IO ()
p'glfwGetClipboardString :: FunPtr (Ptr C'GLFWwindow -> IO (Ptr CChar))
p'glfwGetTime :: FunPtr (IO CDouble)
c'glfwMakeContextCurrent :: Ptr C'GLFWwindow -> IO ()
c'glfwGetCurrentContext :: IO (Ptr C'GLFWwindow)
p'glfwSetTime :: FunPtr (CDouble -> IO ())
c'glfwSwapBuffers :: Ptr C'GLFWwindow -> IO ()
p'glfwMakeContextCurrent :: FunPtr (Ptr C'GLFWwindow -> IO ())
c'glfwSwapInterval :: CInt -> IO ()
p'glfwGetCurrentContext :: FunPtr (IO (Ptr C'GLFWwindow))
c'glfwExtensionSupported :: Ptr CChar -> IO CInt
p'glfwSwapBuffers :: FunPtr (Ptr C'GLFWwindow -> IO ())
p'glfwSwapInterval :: FunPtr (CInt -> IO ())
c'glfwGetProcAddress :: Ptr CChar -> IO C'GLFWglproc
p'glfwExtensionSupported :: FunPtr (Ptr CChar -> IO CInt)
p'glfwGetProcAddress :: FunPtr (Ptr CChar -> IO C'GLFWglproc)
instance Data C'GLFWwindow
instance Typeable C'GLFWwindow
instance Data C'GLFWmonitor
instance Typeable C'GLFWmonitor
instance Eq C'GLFWvidmode
instance Show C'GLFWvidmode
instance Eq C'GLFWgammaramp
instance Show C'GLFWgammaramp
instance Storable C'GLFWgammaramp
instance Storable C'GLFWvidmode
