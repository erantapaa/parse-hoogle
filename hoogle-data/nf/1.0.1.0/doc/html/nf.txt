-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | NF data type to statically enforce normal form
--   
@package nf
@version 1.0.1.0


-- | This module provides the constructor for the type <a>NF</a>, allowing
--   you to create values of type <a>NF</a> without any runtime overhead if
--   you fulfill a proof obligation that the value is already in normal
--   form.
module Data.NF.Internal

-- | <a>NF</a> is an abstract data type representing data which has been
--   evaluated to normal form. Specifically, if a value of type
--   <tt><a>NF</a> a</tt> is in weak head normal form, then it is in
--   reduced normal form; alternatively, it is only necessary to <a>seq</a>
--   an <tt><a>NF</a> a</tt> to assure that it is fully evaluated.
newtype NF a

-- | For <tt><a>UnsafeNF</a> x</tt> to preserve the <a>NF</a> invariant,
--   you must show that <tt><a>UnsafeNF</a> x == <a>deepseq</a> x
--   (<a>UnsafeNF</a> x)</tt>.
UnsafeNF :: a -> NF a
instance [safe] Typeable NF
instance [safe] Eq a => Eq (NF a)
instance [safe] Ord a => Ord (NF a)
instance [safe] NFData (NF a)


-- | This module provides a data type, <a>NF</a>, representing data which
--   has been evaluated to "Normal Form". This is a useful type discipline
--   for many situations when normal form data is necessary, e.g. when
--   transmitting data to other threads over channels. If a library that
--   you are using has the following type:
--   
--   <pre>
--   strictWriteChan :: <a>NFData</a> a =&gt; <a>Chan</a> a -&gt; a -&gt; <a>IO</a> ()
--   </pre>
--   
--   you can specialize it to the following type in order to avoid the cost
--   of repeatedly <a>deepseq</a>ing a value when it is not necessary:
--   
--   <pre>
--   strictWriteChan_ :: <a>Chan</a> (<a>NF</a> a) -&gt; <a>NF</a> a -&gt; <a>IO</a> ()
--   strictWriteChan_ = strictWriteChan
--   </pre>
--   
--   You should also consider providing APIs which only accept <a>NF</a>
--   values, to prevent users from accidentally <a>deepseq</a>ing.
module Data.NF

-- | <a>NF</a> is an abstract data type representing data which has been
--   evaluated to normal form. Specifically, if a value of type
--   <tt><a>NF</a> a</tt> is in weak head normal form, then it is in
--   reduced normal form; alternatively, it is only necessary to <a>seq</a>
--   an <tt><a>NF</a> a</tt> to assure that it is fully evaluated.
data NF a

-- | Creates a value of type <a>NF</a>. The first time the result is
--   evaluated to whnf, the value will be <a>rnf</a>ed. To avoid this
--   <a>rnf</a>, see <a>UnsafeNF</a>.
makeNF :: NFData a => a -> NF a

-- | Retrieves <tt>a</tt> from a value of type <tt><a>NF</a> a</tt>; this
--   value is guaranteed to be in normal form.
getNF :: NF a -> a
