-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Searching game trees with alpha-beta pruning
--   
--   A data type for game trees, as used in decision theory and game
--   theory, along with standard algorithms for searching the tree using
--   alpha-beta pruning. Can be used as the basis of an AI for two-player
--   zero-sum games, such as chess.
@package game-tree
@version 0.1.0.0


-- | Nodes in game trees Copyright 2009 Colin Adams
--   
--   This file is part of game-tree.
--   
--   Game-tree is free software: you can redistribute it and/or modify it
--   under the terms of the GNU General Public License as published by the
--   Free Software Foundation, either version 3 of the License, or (at your
--   option) any later version.
module Data.Tree.Game_tree.Game_tree

-- | Nodes in a game search tree
class Game_tree a
is_terminal :: Game_tree a => a -> Bool
node_value :: Game_tree a => a -> Int
children :: Game_tree a => a -> [a]


-- | Negascout and other (mostly alpha-beta pruning) algorithms for
--   game-tree search Copyright 2009 Colin Adams
--   
--   This file is part of game-tree.
--   
--   Game-tree is free software: you can redistribute it and/or modify it
--   under the terms of the GNU General Public License as published by the
--   Free Software Foundation, either version 3 of the License, or (at your
--   option) any later version.
module Data.Tree.Game_tree.Negascout

-- | Plain negamax (= minimax with negative scores at alternate levels). No
--   alpha-beta pruning.
negamax :: Game_tree a => a -> Int -> ([a], Int)

-- | Normal alpha beta pruning (no window).
alpha_beta_search :: Game_tree a => a -> Int -> ([a], Int)

-- | Alpha-beta pruning with null-window search around every move after a
--   move that improves alpha has been found
principal_variation_search :: Game_tree a => a -> Int -> ([a], Int)

-- | Negascout alpha-beta pruning algorithm.
--   
--   Node_value needs to be sensitive to whose turn it is to move. I.e. it
--   must return values of the opposite sign if the other player is to
--   move.
negascout :: Game_tree a => a -> Int -> ([a], Int)
