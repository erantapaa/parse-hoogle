-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generic Tree data type
--   
--   Generic tree type
@package generic-tree
@version 15329.2

module Data.LTree

-- | Multary (Rose) Tree, with data solely in leaves
data LTree v a
Stem :: (LForest v a) -> LTree v a
Leaf :: a -> LTree v a
type LForest v a = v (LTree v a)
unfoldLTree :: Functor v => (b -> Either a (v b)) -> b -> LTree v a
unfoldLTreeM :: (Monad m, Traversable v) => (b -> m (Either a (v b))) -> b -> m (LTree v a)
instance Traversable v => Traversable (LTree v)
instance Foldable v => Foldable (LTree v)
instance Functor v => Applicative (LTree v)
instance Functor v => Functor (LTree v)
instance (Eq a, Eq (LForest v a)) => Eq (LTree v a)

module Data.Tree

-- | Multary (Rose) Tree
data Tree v a
Node :: a -> (Forest v a) -> Tree v a
type Forest v a = v (Tree v a)
flatten :: Foldable v => Tree v a -> [a]

-- | Lists of nodes at each level of tree
levels :: (Applicative v, Foldable v, Monoid (v a)) => Tree v a -> [v a]

-- | Build tree from seed value
unfoldTree :: Functor v => (b -> (a, v b)) -> b -> Tree v a

-- | Build a tree from seed value, monadically
unfoldTreeM :: (Monad m, Traversable v) => (b -> m (a, v b)) -> b -> m (Tree v a)
instance Monoid a => Monoid (Zip a)
instance Traversable v => Traversable (Tree v)
instance Foldable v => Foldable (Tree v)
instance (Functor v, Alternative v) => Applicative (Tree v)
instance Functor v => Functor (Tree v)
instance (Eq a, Eq (Forest v a)) => Eq (Tree v a)
