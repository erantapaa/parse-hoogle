-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Combinators for building and processing 2D images.
--   
--   Chalkboard is a Haskell hosted Domain Specific Language (DSL) for
--   image generation and processing. The basic structure is a chalk board,
--   a two-dimensional canvas of values, typically colors. Chalkboard
--   provides the usual image processing functions (masking, overlaying,
--   function mapping, cropping, warping, rotating) as well as a few more
--   unusual ones. Images can be imported into Chalkboard, as first-class
--   color chalk boards. Chalkboard also provides combinators for drawing
--   shapes on directly on boards. The system is based loosely on PAN, but
--   the principal image type, a Board, is abstract.
@package chalkboard
@version 0.2


-- | This module contains the types used by chalkboard, except Board
--   itself.
module Graphics.Chalkboard.Types

-- | Unit Interval: value between 0 and 1, inclusive.
type UI = R

-- | A real number.
type R = Float

-- | A point in R2.
type Point = (R, R)

-- | Angle units
type Radian = Float

-- | For placing a value literally <i>over</i> another value. The 2nd value
--   <i>might</i> shine through. The operation <i>must</i> be assocative.
class Over c
over :: Over c => c -> c -> c

-- | <a>stack</a> stacks a list of things over each other, where earlier
--   elements are <a>over</a> later elements. Requires non empty lists,
--   which can be satisfied by using an explicity transparent
--   <tt>Board</tt> as one of the elements.
stack :: Over c => [c] -> c

-- | <a>Scale</a> something by a value. scaling value can be bigger than 1.
class Scale c
scale :: Scale c => R -> c -> c

-- | Linear interpolation between two values.
class Lerp a
lerp :: Lerp a => a -> a -> UI -> a

-- | <a>Average</a> a set of values. weighting can be achived using
--   multiple entries.
class Average a
average :: Average a => [a] -> a

-- | Channels with alpha component, the channel <tt>is</tt> pre-scaled.
data Alpha c
Alpha :: c -> !UI -> Alpha c

-- | <a>alpha</a> builds something that has an alpha channel, and is
--   completely opaque.
alpha :: c -> Alpha c

-- | <a>transparent</a> builds something that has an alpha channel, and is
--   completely transparent.
transparent :: Scale c => c -> Alpha c

-- | <a>withAlpha</a> builds somethings that has a specific alpha value.
withAlpha :: Scale c => UI -> c -> Alpha c

-- | <a>unAlpha</a> removes the alpha component, and returns the channel
--   inside.
unAlpha :: Scale c => Alpha c -> c

-- | A Z buffer style Z value for a point, where lower numbers are nearer
--   the viewer. Assumes no transparency.
data Z c
Z :: c -> R -> Z c

-- | Close to zero; needed for <tt>Over (Alpha c)</tt> instance.
nearZero :: R
instance Show c => Show (Z c)
instance Show c => Show (Alpha c)
instance Over (Z c)
instance Scale c => Scale (Alpha c)
instance Lerp c => Lerp (Alpha c)
instance (Scale c, Lerp c) => Over (Alpha c)
instance Average R
instance Lerp a => Lerp (Maybe a)
instance (Lerp a, Lerp b) => Lerp (a, b)
instance Lerp R
instance Scale R
instance Over (Maybe a)
instance Over Bool


-- | This module contains some general utilties.
module Graphics.Chalkboard.Utils

-- | innerSteps takes n even steps from 0 .. 1, by not actually touching 0
--   or 1. The first and last step are 1/2 the size of the others, so that
--   repeated innerSteps can be tiled neatly.
innerSteps :: Int -> [R]

-- | outerSteps takes n even steps from 0 .. 1, starting with 0, and ending
--   with 1, returning n+1 elements.
outerSteps :: Int -> [R]

-- | Extract the fractional part of an <tt>R</tt>.
fracPart :: R -> R
fromPolar :: (R, Radian) -> Point
toPolar :: Point -> (R, Radian)
angleOfLine :: (Point, Point) -> Radian

-- | Covert a Bool (mask point) into a unit interval.
interpBool :: Bool -> UI

-- | sample a UI, giving a point of a mask.
sampleUI :: UI -> Bool

-- | Use a mask to create a Just value, or Nothing.
withMask :: a -> (Bool -> Maybe a)

-- | With a default if you do not have a Just.
withDefault :: a -> (Maybe a -> a)

-- | <a>choose</a> between two values.
choose :: a -> a -> (Bool -> a)

-- | is a <tt>Point</tt> inside a region?
insideRegion :: (Point, Point) -> Point -> Bool

-- | is a <tt>Point</tt> inside a circle, where the first two arguments are
--   the center of the circle, and the radius.
insideCircle :: Point -> R -> Point -> Bool

-- | What is the <a>distance</a> between two points in R2? This is
--   optimised for the normal form <tt>distance p1 p2 &lt;= v</tt>, which
--   avoids using <tt>sqrt</tt>.
distance :: Point -> Point -> R

-- | <a>intervalOnLine</a> find the place on a line (between 0 and 1) that
--   is closest to the given point.
intervalOnLine :: (Point, Point) -> Point -> R

-- | circleOfDots generates a set of points between (-1..1,-1..1), inside a
--   circle.
circleOfDots :: Int -> [Point]


-- | Simple RGB colors.
module Graphics.Chalkboard.Color

-- | <a>Gray</a> is just a value between 0 and 1, inclusive. Be careful to
--   consider if this is pre or post gamma.
type Gray = UI

-- | <a>RGB</a> is our color, with values between 0 and 1, inclusive.
data RGB
RGB :: !UI -> !UI -> !UI -> RGB
red :: RGB
green :: RGB
blue :: RGB
white :: RGB
black :: RGB
cyan :: RGB
purple :: RGB
yellow :: RGB
instance Show RGB
instance Average RGB
instance Scale RGB
instance Lerp RGB
instance Over RGB
instance Over Gray


-- | Boards are the principal type for our images. The are conceptually
--   functions from 2D coordinates to values, typically a color.
--   
--   Common Boards include
--   
--   <ul>
--   <li><tt>Board Bool</tt> -- A masking <tt>Board</tt>, or region.</li>
--   <li><tt>Board RGB</tt> -- <tt>Color Board</tt></li>
--   <li><tt>Board (Alpha RGB)</tt> -- A <tt>Color Board</tt> with alpha
--   (transparency) values.</li>
--   <li><tt>Board (Maybe a)</tt> -- A <tt>Board</tt> with binary
--   transparency.</li>
--   <li><tt>Board (Maybe Color)</tt> -- A <tt>Color Board</tt> with binary
--   transparency.</li>
--   <li><tt>Board Point</tt> -- A <tt>Board</tt> (or field) of
--   <tt>Point</tt> values.</li>
--   </ul>
module Graphics.Chalkboard.Board

-- | '''Board''' is our primary data type, an infinite flat surface (or R2
--   field) of values. Conceptually, <tt>Board a = Point -&gt; a</tt>.
data Board a
lookup :: Board a -> (R, R) -> a

-- | <a>coord</a> field or <a>Board</a>, where each point is its own
--   coordinate in R2.
coord :: Board Point

-- | build a rectangle mask or region.
maskFor :: (Point, Point) -> Board Bool

-- | build a circular mask or region, with a circle of radius <tt>R</tt>,
--   and center <tt>Point</tt>.
circularMaskFor :: Point -> R -> Board Bool
scale :: Scale c => R -> c -> c

-- | A non-overloaded version of <a>scale</a> which takes a independent x
--   and y coordinate.
scaleXY :: (R, R) -> Board a -> Board a

-- | move a Board by specified vector.
move :: (R, R) -> Board a -> Board a

-- | rotate the Board.
rotate :: Radian -> Board a -> Board a

-- | <a>crop</a> crops a Board, based on a masking Board.
crop :: Board Bool -> Board a -> Board (Maybe a)

-- | A functor with application.
--   
--   Instances should satisfy the following laws:
--   
--   <ul>
--   <li><i><i>identity</i></i> <tt><a>pure</a> <a>id</a> <a>&lt;*&gt;</a>
--   v = v</tt></li>
--   <li><i><i>composition</i></i> <tt><a>pure</a> (.) <a>&lt;*&gt;</a> u
--   <a>&lt;*&gt;</a> v <a>&lt;*&gt;</a> w = u <a>&lt;*&gt;</a> (v
--   <a>&lt;*&gt;</a> w)</tt></li>
--   <li><i><i>homomorphism</i></i> <tt><a>pure</a> f <a>&lt;*&gt;</a>
--   <a>pure</a> x = <a>pure</a> (f x)</tt></li>
--   <li><i><i>interchange</i></i> <tt>u <a>&lt;*&gt;</a> <a>pure</a> y =
--   <a>pure</a> (<a>$</a> y) <a>&lt;*&gt;</a> u</tt></li>
--   <li><i><i>ignore left value</i></i> <tt>u <a>*&gt;</a> v = <a>pure</a>
--   (<a>const</a> <a>id</a>) <a>&lt;*&gt;</a> u <a>&lt;*&gt;</a>
--   v</tt></li>
--   <li><i><i>ignore right value</i></i> <tt>u <a>&lt;*</a> v =
--   <a>pure</a> <a>const</a> <a>&lt;*&gt;</a> u <a>&lt;*&gt;</a>
--   v</tt></li>
--   </ul>
--   
--   The <a>Functor</a> instance should satisfy
--   
--   <pre>
--   <a>fmap</a> f x = <a>pure</a> f <a>&lt;*&gt;</a> x
--   </pre>
--   
--   If <tt>f</tt> is also a <a>Monad</a>, define <tt><a>pure</a> =
--   <a>return</a></tt> and <tt>(<a>&lt;*&gt;</a>) = <a>ap</a></tt>.
--   
--   Minimal complete definition: <a>pure</a> and <a>&lt;*&gt;</a>.
class Functor f => Applicative f :: (* -> *)
pure :: Applicative f => a -> f a
(<*>) :: Applicative f => f (a -> b) -> f a -> f b
(*>) :: Applicative f => f a -> f b -> f b
(<*) :: Applicative f => f a -> f b -> f a
instance Over c => Over (Board c)
instance Applicative Board
instance Functor Board
instance Scale (Board a)


-- | This module contains some basic shape generators, expressed as
--   <tt>Board Bool</tt>.
module Graphics.Chalkboard.Shapes

-- | unit circle, radius 0.5, over origin.
circle :: Board Bool

-- | unit vertical bar, 1 wide over origin.
vbar :: Board Bool

-- | unit horizontal bar, 1 high over origin.
hbar :: Board Bool

-- | unit square, 1x1 over origin.
square :: Board Bool

-- | cheacker board, with squares 1x1.
checker :: Board Bool

-- | Given two <tt>Point</tt>s, and a thickness, draw a line between the
--   points. line :: Line -&gt; Double -&gt; Board Bool
straightline :: (Point, Point) -> R -> Board Bool

-- | A line generated by sampling a function from <tt>R</tt> to
--   <tt>Point</tt>s, with a specific width. There needs to be at least 2
--   sample points.
functionline :: (R -> Point) -> R -> Int -> Board Bool

-- | arrowhead is a triangle, pointing straight up, height 1, width 1, with
--   the (0,0) at the center of the base.
arrowhead :: Point -> Radian -> R -> Board Bool


-- | This module coverts 2D arrays into <a>Board</a>s, and back, and
--   supplies basic dithering algorithms.
module Graphics.Chalkboard.Array

-- | <a>boardToArray</a> turns a Board into a 2D Array (pixelization).
boardToArray :: Average a => (Int, Int) -> Int -> Board a -> Array (Int, Int) a

-- | <a>arrayToBoard</a> turns a 2D Array into a Board, using bi-linear
--   inteprelation.
arrayToBoard :: (Lerp a, Scale a) => Array (Int, Int) a -> Board (Maybe a)

-- | <a>threshold</a> quantized based on a simple, pointwise function.
threshold :: Floating a => (a -> a) -> Array (Int, Int) a -> Array (Int, Int) a

-- | <a>floydSteinberg</a> quantized using the Floyd Steinberg algorithm.
floydSteinberg :: Floating a => (a -> a) -> Array (Int, Int) a -> Array (Int, Int) a
widthHeight :: Array ((Int, Int)) a -> (Int, Int)


-- | This module supports basic ascii drawing of <a>Board</a>s.
module Graphics.Chalkboard.Ascii

-- | <a>toAscii</a> generates a board of ascii characters, where each char
--   is two pixels, one wide and two high.
toAscii :: (Int, Int) -> Board Gray -> [String]

-- | <a>toCount</a> generates a board of ascii characters, where each char
--   is two pixels, one wide and two high. we uses digits 1 .. 9, then 0
--   (highest) to represent intensity, adding the two pixels for each char.
toCount :: (Int, Int) -> Board Gray -> [String]


-- | Reading and writing portable pix maps. For now, we only support color
--   images (<tt>P1</tt>, <tt>P3</tt> and <tt>P6</tt> formats).
module Graphics.Chalkboard.PPM

-- | <a>readPPM</a> reads a PPM file, and outputs a <tt>Board</tt>, and the
--   <tt>x</tt> and <tt>y</tt> dimensions of the image.
readPPM :: String -> IO (Array (Int, Int) RGB)

-- | <tt>readBPM</tt> reads a PPM file, and outputs a <tt>Board</tt>, and
--   the <tt>x</tt> and <tt>y</tt> dimensions of the image.
readPBM :: String -> IO (Array (Int, Int) Bool)

-- | <a>writePPM</a> writes a PPM file, based on a color <tt>Board</tt>,
--   where bottom left corner of the image is as <tt>(0,0)</tt>.
writePPM :: String -> Array (Int, Int) RGB -> IO ()


-- | Public interface to the Chalkboard utilities.
module Graphics.Chalkboard
