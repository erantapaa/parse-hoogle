-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Read and write XBase ".dbf" files
--   
--   A simple interface for reading and writing XBase dbf files. Provides
--   whole-file parser and serializer as well as a handle-based interface
--   for reading and writing records from a file.
@package dbf
@version 0.0.0.2

module Database.XBase.Dbf.Year8
data Year8
putYear8 :: Year8 -> Put
getYear8 :: Get Year8
instance Eq Year8
instance Ord Year8
instance Bounded Year8
instance Binary Year8
instance Integral Year8
instance Real Year8
instance Num Year8
instance Read Year8
instance Show Year8
instance Enum Year8

module Database.XBase.Dbf.Structures
data DbfDate yearType
DbfDate :: yearType -> Word8 -> Word8 -> DbfDate yearType
dbfYear :: DbfDate yearType -> yearType
dbfMonth :: DbfDate yearType -> Word8
dbfDay :: DbfDate yearType -> Word8
data DbfFieldDescriptor
DbfFieldDescriptor :: ByteString -> Word8 -> Word32 -> Word8 -> Word8 -> Word8 -> Bool -> Bool -> DbfFieldDescriptor
dbfFieldName :: DbfFieldDescriptor -> ByteString
dbfFieldType :: DbfFieldDescriptor -> Word8
dbfFieldAddress :: DbfFieldDescriptor -> Word32
dbfFieldLength :: DbfFieldDescriptor -> Word8
dbfFieldDecimals :: DbfFieldDescriptor -> Word8
dbfFieldWorkArea :: DbfFieldDescriptor -> Word8
dbfFieldSetFieldsFlag :: DbfFieldDescriptor -> Bool
dbfFieldIndexedFlag :: DbfFieldDescriptor -> Bool
data DbfRecord
DbfRecord :: Bool -> ByteString -> DbfRecord
dbfRecDeleted :: DbfRecord -> Bool
dbfRecData :: DbfRecord -> ByteString
data DbfDatabaseContainer
data DbfFileHeader
DbfFileHeader :: Word8 -> DbfDate Year8 -> Word32 -> Word16 -> Word16 -> Bool -> Bool -> Bool -> Word8 -> [DbfFieldDescriptor] -> Maybe DbfDatabaseContainer -> DbfFileHeader
dbfFileSignature :: DbfFileHeader -> Word8
dbfFileUpdateDate :: DbfFileHeader -> DbfDate Year8
dbfFileNumRecords :: DbfFileHeader -> Word32
dbfFileHdrLength :: DbfFileHeader -> Word16
dbfFileRecLength :: DbfFileHeader -> Word16
dbfFileTxInc :: DbfFileHeader -> Bool
dbfFileEncr :: DbfFileHeader -> Bool
dbfFileMDX :: DbfFileHeader -> Bool
dbfFileLangCode :: DbfFileHeader -> Word8
dbfFileFields :: DbfFileHeader -> [DbfFieldDescriptor]
dbfFileDbContainer :: DbfFileHeader -> Maybe DbfDatabaseContainer
putDbfShortDate :: DbfDate Year8 -> PutM ()
getDbfShortDate :: Get (DbfDate Year8)
putDbfFieldName :: ByteString -> PutM ()
getDbfFieldName :: Get ByteString
putDbfFieldDescriptor :: DbfFieldDescriptor -> PutM ()
getDbfFieldDescriptor :: Get DbfFieldDescriptor
putDbfFileHeader :: DbfFileHeader -> PutM ()
getDbfFileHeader :: Get DbfFileHeader
putDbfRecord :: DbfRecord -> PutM ()
getDbfRecord :: Int64 -> Get (Maybe DbfRecord)
putDbfFile :: DbfFileHeader -> [DbfRecord] -> PutM ()
getDbfFile :: Get (DbfFileHeader, [DbfRecord])
instance Eq DbfRecord
instance Show DbfRecord
instance Eq DbfFileHeader
instance Show DbfFileHeader
instance Eq DbfFieldDescriptor
instance Show DbfFieldDescriptor
instance Eq yearType => Eq (DbfDate yearType)
instance Show yearType => Show (DbfDate yearType)
instance Show DbfDatabaseContainer
instance Eq DbfDatabaseContainer

module Database.XBase.Dbf.Handle
data DbfHandle
openDbf :: FilePath -> Bool -> IO DbfHandle
closeDbf :: DbfHandle -> IO ()
dbfIsOpen :: DbfHandle -> IO Bool
dbfHeader :: DbfHandle -> IO DbfFileHeader
data DbfFieldHandle
fieldNum :: DbfFieldHandle -> Int
fieldName :: DbfFieldHandle -> String
fieldDesc :: DbfFieldHandle -> DbfFieldDescriptor
dbfNumFields :: DbfHandle -> IO Int
dbfFields :: DbfHandle -> IO [DbfFieldHandle]
dbfGetField :: DbfHandle -> Int -> IO DbfFieldHandle
dbfLookupField :: DbfHandle -> String -> IO (Maybe DbfFieldHandle)
data DbfRecHandle
recNum :: DbfRecHandle -> Int
dbfRecords :: DbfHandle -> IO [DbfRecHandle]
dbfNumRecords :: DbfHandle -> IO Integer
dbfGetRecord :: DbfHandle -> Integer -> IO (Maybe DbfRecHandle)
readDbfField :: DbfRecHandle -> DbfFieldHandle -> IO ByteString
instance Eq DbfRecHandle
instance Eq DbfFieldHandle
instance Eq DbfHandle

module Database.XBase.Dbf
readDbfFile :: FilePath -> IO (DbfFileHeader, [DbfRecord])
writeDbfFile :: FilePath -> (DbfFileHeader, [DbfRecord]) -> IO ()
