-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Kolmogorov distribution and Kolmogorov-Smirnov test.
--   
--   Kolmogorov distribution and Kolmogorov-Smirnov test.
@package ks-test
@version 0.1


-- | CDF of Kolmogorov's D-statistic, parameterized by sample size
module Data.Random.Distribution.Kolmogorov
data D a
D :: Int -> D a
kCdf :: (Floating a, Integral b, RealFrac a, Factorial a, Unbox a) => b -> a -> a

-- | <a>kCdf</a> with Marsaglia's long-computation shortcut approximation.
--   Accurate to about 7 decimal places in the right tail of the
--   distribution.
kCdfQuick :: (Floating a, Integral b, RealFrac a, Factorial a, Unbox a) => b -> a -> a
instance Eq (D a)
instance Show (D a)
instance CDF D Double
instance Distribution D Double

module Math.Statistics.KSTest

-- | Kolmogorov-Smirnov statistic for a set of data relative to a
--   (continuous) distribution with the given CDF. Returns 3 common forms
--   of the statistic: (K+, K-, D), where K+ and K- are Smirnov's one-sided
--   forms as presented in Knuth's Semi-Numerical Algorithms (TAOCP, vol.
--   2) and D is Kolmogorov's undirected version.
--   
--   In particular,
--   
--   <ul>
--   <li>K+ = sup(x -&gt; F_n(x) - F(x)) * K- = sup(x -&gt; F(x) - F_n(x))
--   * D = sup(x -&gt; abs(F_n(x) - F(x)))</li>
--   </ul>
ks :: (Fractional t, Integral a1, Ord t) => (a -> t) -> a1 -> [a] -> (t, t, t)

-- | <tt>ksTest cdf xs</tt> Computes the probability of a random data set
--   (of the same size as xs) drawn from a continuous distribution with the
--   given CDF having the same Kolmogorov statistic as xs.
--   
--   The statistic is the greatest absolute deviation of the empirical CDF
--   of XS from the assumed CDF <tt>cdf</tt>.
--   
--   If the data were, in fact, drawn from a distribution with the given
--   CDF, then the resulting p-value should be uniformly distributed over
--   (0,1].
ksTest :: (Floating a1, RealFrac a1, Factorial a1, Unbox a1) => (a -> a1) -> [a] -> a1

-- | <a>KS</a> distribution: not really a standard mathematical concept,
--   but still a nice conceptual shift. <tt>KS n d</tt> is the distribution
--   of a random variable constructed as a list of <tt>n</tt> independent
--   random variables of distribution <tt>d</tt>.
--   
--   The corresponding <a>CDF</a> instance implements the K-S test for such
--   lists. For example, if <tt>xs</tt> is a list of length 100 believed to
--   contain Beta(2,5) variates, then <tt>cdf (KS 100 (Beta 2 5))</tt> is
--   the K-S test for that distribution. (Note that if <tt>length xs</tt>
--   is not 100, then the result will be 0 because such lists cannot arise
--   from that <a>KS</a> distribution. Somewhat arbitrarily, all lists of
--   "impossible" length are grouped at the bottom of the ordering encoded
--   by the <a>CDF</a> instance.)
--   
--   The <a>KS</a> test can easily be applied recursively. For example, if
--   <tt>d</tt> is a <a>Distribution</a> of interest and you have 100
--   trials each with 100 data points, you can test it by calling <tt>cdf
--   (KS 100 (KS 100 d))</tt>.
data KS d a
KS :: !Int -> !d a -> KS d [a]
instance CDF d a => CDF (KS d) [a]
instance Distribution d a => Distribution (KS d) [a]
instance Show (d a) => Show (KS d [a])
instance Eq (d a) => Eq (KS d [a])
