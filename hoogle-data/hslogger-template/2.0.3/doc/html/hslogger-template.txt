-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Automatic generation of hslogger functions
--   
@package hslogger-template
@version 2.0.3


-- | This module provides functions that generate hslogger functions using
--   Template Haskell.
--   
--   Notes:
--   
--   <ul>
--   <li><a>System.Log.Logger</a> must be imported qualified, and the
--   qualifier must match the qualifier given to <tt>deriveLoggers</tt>
--   and/or <tt>deriveNamedLoggers</tt>.</li>
--   <li>Don't forget to enable Template Haskell preprocessing: specify the
--   pragma <tt>LANGUAGE TemplateHaskell</tt> at the top of your source
--   file or <tt>extensions: TemplateHaskell</tt> in your cabal file.</li>
--   </ul>
module System.Log.Logger.TH

-- | Generate hslogger functions for a list of priorities.
--   
--   Example usage:
--   
--   <pre>
--   module Foo.Bar ( ... ) where
--   
--   import System.Log.Logger.TH (deriveLoggers)
--   import qualified System.Log.Logger as HSL
--   
--   $(deriveLoggers "HSL" [HSL.DEBUG, HSL.INFO])
--   </pre>
--   
--   Used this way, <tt>deriveLoggers</tt> would generate the following
--   functions:
--   
--   <pre>
--   infoM :: MonadIO m =&gt; String -&gt; m ()
--   infoM s = liftIO (HSL.infoM "Foo.Bar" s)
--   
--   debugM :: MonadIO m =&gt; String -&gt; m ()
--   debugM s = liftIO (HSL.debugM "Foo.Bar" s)
--   </pre>
--   
--   The other hslogger priorities follow the same pattern.
--   
--   <i>In versions prior to 2.0.0, hslogger-template generated functions
--   that</i> <i>prepended the module name to the log message. I no longer
--   feel that this</i> <i>is correct behavior. Instead, please make use of
--   hslogger's formatting</i> <i>functionality. Example:</i>
--   
--   <pre>
--   import System.IO (stderr)
--   
--   import System.Log.Formatter      (simpleLogFormatter)
--   import System.Log.Logger         (rootLoggerName)
--   import System.Log.Handler        (setFormatter)
--   import System.Log.Handler.Simple (streamHandler)
--   import System.Log.Logger.TH      (deriveLoggers)
--   
--   import qualified System.Log.Logger as HSL
--   
--   $(deriveLoggers "HSL" [HSL.DEBUG, HSL.INFO])
--   
--   handler &lt;- streamHandler stderr HSL.DEBUG &gt;&gt;= \h -&gt; return $
--     setFormatter h $ simpleLogFormatter "$time $loggername $prio $msg"
--   HSL.updateGlobalLogger rootLoggerName (HSL.setLevel HSL.DEBUG . HSL.setHandlers [handler])
--   </pre>
deriveLoggers :: String -> [Priority] -> Q [Dec]

-- | Like <tt>deriveLoggers</tt>, but allows you to specify a message
--   prefix to be automatically prepended to every log message.
deriveNamedLoggers :: String -> String -> [Priority] -> Q [Dec]
