-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Backend for the persistent library using postgresql.
--   
@package persistent-postgresql
@version 2.2


-- | A postgresql backend for persistent.
module Database.Persist.Postgresql

-- | Create a PostgreSQL connection pool and run the given action. The pool
--   is properly released after the action finishes using it. Note that you
--   should not use the given <a>ConnectionPool</a> outside the action
--   since it may be already been released.
withPostgresqlPool :: (MonadBaseControl IO m, MonadLogger m, MonadIO m) => ConnectionString -> Int -> (ConnectionPool -> m a) -> m a

-- | Same as <a>withPostgresqlPool</a>, but instead of opening a pool of
--   connections, only one connection is opened.
withPostgresqlConn :: (MonadIO m, MonadBaseControl IO m, MonadLogger m) => ConnectionString -> (SqlBackend -> m a) -> m a

-- | Create a PostgreSQL connection pool. Note that it's your
--   responsibility to properly close the connection pool when unneeded.
--   Use <a>withPostgresqlPool</a> for an automatic resource control.
createPostgresqlPool :: (MonadIO m, MonadBaseControl IO m, MonadLogger m) => ConnectionString -> Int -> m ConnectionPool

-- | Same as <a>createPostgresqlPool</a>, but additionally takes a callback
--   function for some connection-specific tweaking to be performed after
--   connection creation. This could be used, for example, to change the
--   schema. For more information, see:
--   
--   
--   <a>https://groups.google.com/d/msg/yesodweb/qUXrEN_swEo/O0pFwqwQIdcJ</a>
--   
--   Since 2.1.3
createPostgresqlPoolModified :: (MonadIO m, MonadBaseControl IO m, MonadLogger m) => (Connection -> IO ()) -> ConnectionString -> Int -> m ConnectionPool

-- | A <tt>libpq</tt> connection string. A simple example of connection
--   string would be <tt>"host=localhost port=5432 user=test dbname=test
--   password=test"</tt>. Please read libpq's documentation at
--   <a>http://www.postgresql.org/docs/9.1/static/libpq-connect.html</a>
--   for more details on how to create such strings.
type ConnectionString = ByteString

-- | Information required to connect to a PostgreSQL database using
--   <tt>persistent</tt>'s generic facilities. These values are the same
--   that are given to <a>withPostgresqlPool</a>.
data PostgresConf
PostgresConf :: ConnectionString -> Int -> PostgresConf

-- | The connection string.
pgConnStr :: PostgresConf -> ConnectionString

-- | How many connections should be held on the connection pool.
pgPoolSize :: PostgresConf -> Int

-- | Generate a <a>Connection</a> from a <a>Connection</a>
openSimpleConn :: LogFunc -> Connection -> IO SqlBackend

-- | get the SQL string for the table that a PeristEntity represents Useful
--   for raw SQL queries
tableName :: (PersistEntity record, PersistEntityBackend record ~ SqlBackend) => record -> Text

-- | get the SQL string for the field that an EntityField represents Useful
--   for raw SQL queries
fieldName :: (PersistEntity record, PersistEntityBackend record ~ SqlBackend) => EntityField record typ -> Text
instance Typeable Unknown
instance Eq Unknown
instance Show Unknown
instance Read Unknown
instance Ord Unknown
instance Show PostgresConf
instance PersistConfig PostgresConf
instance FromJSON PostgresConf
instance ToField Unknown
instance FromField Unknown
instance ToField P
