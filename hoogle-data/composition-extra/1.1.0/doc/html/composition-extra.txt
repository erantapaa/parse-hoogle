-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Combinators for unorthodox structure composition
--   
--   Combinators for unorthodox structure composition
@package composition-extra
@version 1.1.0

module Control.Monad.Syntax.Six
(======<<) :: Monad m => (a -> b -> c -> d -> e -> f -> m g) -> m a -> b -> c -> d -> e -> f -> m g
(=.====<<) :: Monad m => (a -> b -> c -> d -> e -> f -> m g) -> m b -> a -> c -> d -> e -> f -> m g
(==.===<<) :: Monad m => (a -> b -> c -> d -> e -> f -> m g) -> m c -> a -> b -> d -> e -> f -> m g
(===.==<<) :: Monad m => (a -> b -> c -> d -> e -> f -> m g) -> m d -> a -> b -> c -> e -> f -> m g
(====.=<<) :: Monad m => (a -> b -> c -> d -> e -> f -> m g) -> m e -> a -> b -> c -> d -> f -> m g
(=====.<<) :: Monad m => (a -> b -> c -> d -> e -> f -> m g) -> m f -> a -> b -> c -> d -> e -> m g

module Control.Monad.Syntax.Five
(=====<<) :: Monad m => (a -> b -> c -> d -> e -> m f) -> m a -> b -> c -> d -> e -> m f
(=.===<<) :: Monad m => (a -> b -> c -> d -> e -> m f) -> m b -> a -> c -> d -> e -> m f
(==.==<<) :: Monad m => (a -> b -> c -> d -> e -> m f) -> m c -> a -> b -> d -> e -> m f
(===.=<<) :: Monad m => (a -> b -> c -> d -> e -> m f) -> m d -> a -> b -> c -> e -> m f
(====.<<) :: Monad m => (a -> b -> c -> d -> e -> m f) -> m e -> a -> b -> c -> d -> m f

module Control.Monad.Syntax.Four
(====<<) :: Monad m => (a -> b -> c -> d -> m e) -> m a -> b -> c -> d -> m e
(=.==<<) :: Monad m => (a -> b -> c -> d -> m e) -> m b -> a -> c -> d -> m e
(==.=<<) :: Monad m => (a -> b -> c -> d -> m e) -> m c -> a -> b -> d -> m e
(===.<<) :: Monad m => (a -> b -> c -> d -> m e) -> m d -> a -> b -> c -> m e

module Control.Monad.Syntax.Three
(===<<) :: Monad m => (a -> b -> c -> m d) -> m a -> b -> c -> m d
(=.=<<) :: Monad m => (a -> b -> c -> m d) -> m b -> a -> c -> m d
(==.<<) :: Monad m => (a -> b -> c -> m d) -> m c -> a -> b -> m d

module Control.Monad.Syntax.Two
(==<<) :: Monad m => (a -> b -> m c) -> m a -> b -> m c
(=.<<) :: Monad m => (a -> b -> m c) -> m b -> a -> m c

module Control.Monad.Syntax
(>>==) :: Monad m => m b -> (a -> b -> m c) -> a -> m c
(>>===) :: Monad m => m c -> (a -> b -> c -> m d) -> a -> b -> m d
(>>====) :: Monad m => m d -> (a -> b -> c -> d -> m e) -> a -> b -> c -> m e
(>>=====) :: Monad m => m e -> (a -> b -> c -> d -> e -> m f) -> a -> b -> c -> d -> m f
(>>======) :: Monad m => m f -> (a -> b -> c -> d -> e -> f -> m g) -> a -> b -> c -> d -> e -> m g

module Data.Function.Twist
twist :: (a -> b -> c -> d -> e) -> c -> d -> a -> b -> e
(<<~~>>) :: (a -> b -> c -> d -> e) -> c -> d -> a -> b -> e
twist5r :: (a -> b -> c -> d -> e -> f) -> c -> d -> e -> a -> b -> f
(<<~~>>>) :: (a -> b -> c -> d -> e -> f) -> c -> d -> e -> a -> b -> f
twist5l :: (a -> b -> c -> d -> e -> f) -> d -> e -> a -> b -> c -> f
(<<<~~>>) :: (a -> b -> c -> d -> e -> f) -> d -> e -> a -> b -> c -> f
twist5 :: (a -> b -> c -> d -> e -> f) -> d -> e -> c -> a -> b -> f
(<<<~~>>>) :: (a -> b -> c -> d -> e -> f) -> d -> e -> c -> a -> b -> f
twist6 :: (a -> b -> c -> d -> e -> f -> g) -> d -> e -> f -> a -> b -> c -> g
(<<~~~>>) :: (a -> b -> c -> d -> e -> f -> g) -> d -> e -> f -> a -> b -> c -> g
twist7r :: (a -> b -> c -> d -> e -> f -> g -> h) -> d -> e -> f -> g -> a -> b -> c -> h
(<<~~~>>>) :: (a -> b -> c -> d -> e -> f -> g -> h) -> d -> e -> f -> g -> a -> b -> c -> h
twist7l :: (a -> b -> c -> d -> e -> f -> g -> h) -> e -> f -> g -> a -> b -> c -> d -> h
(<<<~~~>>) :: (a -> b -> c -> d -> e -> f -> g -> h) -> e -> f -> g -> a -> b -> c -> d -> h
twist7 :: (a -> b -> c -> d -> e -> f -> g -> h) -> e -> f -> g -> d -> a -> b -> c -> h
(<<<~~~>>>) :: (a -> b -> c -> d -> e -> f -> g -> h) -> e -> f -> g -> d -> a -> b -> c -> h


-- | Bit-shift style argument re-arrangement
module Data.Function.Slip
slipr :: (a -> b -> c -> d) -> b -> c -> a -> d
(<~>>) :: (a -> b -> c -> d) -> b -> c -> a -> d
slipl :: (a -> b -> c -> d) -> c -> a -> b -> d
(<<~>) :: (a -> b -> c -> d) -> c -> a -> b -> d
slipr4 :: (a -> b -> c -> d -> e) -> b -> c -> d -> a -> e
(<~~>>) :: (a -> b -> c -> d -> e) -> b -> c -> d -> a -> e
slipl4 :: (a -> b -> c -> d -> e) -> d -> a -> b -> c -> e
(<<~~>) :: (a -> b -> c -> d -> e) -> d -> a -> b -> c -> e
slipr5 :: (a -> b -> c -> d -> e -> f) -> b -> c -> d -> e -> a -> f
(<~~~>>) :: (a -> b -> c -> d -> e -> f) -> b -> c -> d -> e -> a -> f
slipl5 :: (a -> b -> c -> d -> e -> f) -> e -> a -> b -> c -> d -> f
(<<~~~>) :: (a -> b -> c -> d -> e -> f) -> e -> a -> b -> c -> d -> f

module Data.Function.Flip
(<->) :: (a -> b -> c) -> b -> a -> c
flip3 :: (a -> b -> c -> d) -> c -> b -> a -> d
(<-->) :: (a -> b -> c -> d) -> c -> b -> a -> d
flip4 :: (a -> b -> c -> d -> e) -> d -> b -> c -> a -> e
(<--->) :: (a -> b -> c -> d -> e) -> d -> b -> c -> a -> e
flip5 :: (a -> b -> c -> d -> e -> f) -> e -> b -> c -> d -> a -> f
(<---->) :: (a -> b -> c -> d -> e -> f) -> e -> b -> c -> d -> a -> f

module Data.Function.Apply
(-$) :: (a -> b -> c) -> b -> a -> c
(--$) :: (a -> b -> c -> d) -> c -> a -> b -> d
(---$) :: (a -> b -> c -> d -> e) -> d -> a -> b -> c -> e
(----$) :: (a -> b -> c -> d -> e -> f) -> e -> a -> b -> c -> d -> f

module Data.Function.Syntax

module Data.Function.Contravariant.Syntax
(-.) :: (a -> b) -> (b -> c) -> a -> c
(-.:) :: (b -> c) -> (a -> c -> d) -> a -> b -> d
(-.*) :: (b -> c) -> (a -> c -> d) -> a -> b -> d
(-.:.) :: (c -> d) -> (a -> b -> d -> e) -> a -> b -> c -> e
(-.**) :: (c -> d) -> (a -> b -> d -> e) -> a -> b -> c -> e
(-.::) :: (d -> e) -> (a -> b -> c -> e -> f) -> a -> b -> c -> d -> f
(-.***) :: (d -> e) -> (a -> b -> c -> e -> f) -> a -> b -> c -> d -> f
(-.::.) :: (e -> f) -> (a -> b -> c -> d -> f -> g) -> a -> b -> c -> d -> e -> g
(-.****) :: (e -> f) -> (a -> b -> c -> d -> f -> g) -> a -> b -> c -> d -> e -> g
(-.:::) :: (f -> g) -> (a -> b -> c -> d -> e -> g -> h) -> a -> b -> c -> d -> e -> f -> h
(-.*****) :: (f -> g) -> (a -> b -> c -> d -> e -> g -> h) -> a -> b -> c -> d -> e -> f -> h
(-.:::.) :: (g -> h) -> (a -> b -> c -> d -> e -> f -> h -> i) -> a -> b -> c -> d -> e -> f -> g -> i
(-.******) :: (g -> h) -> (a -> b -> c -> d -> e -> f -> h -> i) -> a -> b -> c -> d -> e -> f -> g -> i
(-.::::) :: (h -> i) -> (a -> b -> c -> d -> e -> f -> g -> i -> j) -> a -> b -> c -> d -> e -> f -> g -> h -> j
(-.*******) :: (h -> i) -> (a -> b -> c -> d -> e -> f -> g -> i -> j) -> a -> b -> c -> d -> e -> f -> g -> h -> j
(-.::::.) :: (i -> j) -> (a -> b -> c -> d -> e -> f -> g -> h -> j -> k) -> a -> b -> c -> d -> e -> f -> g -> h -> i -> k
(-.********) :: (i -> j) -> (a -> b -> c -> d -> e -> f -> g -> h -> j -> k) -> a -> b -> c -> d -> e -> f -> g -> h -> i -> k

module Data.Functor.Contravariant.Syntax
(<-$>) :: Contravariant f => (a -> b) -> f b -> f a
(<-$$>) :: (Contravariant f0, Contravariant f1) => (a -> b) -> f1 (f0 a) -> f1 (f0 b)
(<-$$$>) :: (Contravariant f0, Contravariant f1, Contravariant f2) => (a -> b) -> f2 (f1 (f0 b)) -> f2 (f1 (f0 a))
(<-$$$$>) :: (Contravariant f0, Contravariant f1, Contravariant f2, Contravariant f3) => (a -> b) -> f3 (f2 (f1 (f0 a))) -> f3 (f2 (f1 (f0 b)))
(<-$$$$$>) :: (Contravariant f0, Contravariant f1, Contravariant f2, Contravariant f3, Contravariant f4) => (a -> b) -> f4 (f3 (f2 (f1 (f0 b)))) -> f4 (f3 (f2 (f1 (f0 a))))

module Data.Functor.Syntax
(<$$>) :: (Functor f0, Functor f1) => (a -> b) -> f1 (f0 a) -> f1 (f0 b)
(<$$$>) :: (Functor f0, Functor f1, Functor f2) => (a -> b) -> f2 (f1 (f0 a)) -> f2 (f1 (f0 b))
(<$$$$>) :: (Functor f0, Functor f1, Functor f2, Functor f3) => (a -> b) -> f3 (f2 (f1 (f0 a))) -> f3 (f2 (f1 (f0 b)))
(<$$$$$>) :: (Functor f0, Functor f1, Functor f2, Functor f3, Functor f4) => (a -> b) -> f4 (f3 (f2 (f1 (f0 a)))) -> f4 (f3 (f2 (f1 (f0 b))))
