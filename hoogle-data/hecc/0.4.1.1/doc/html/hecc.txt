-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Elliptic Curve Cryptography for Haskell
--   
@package hecc
@version 0.4.1.1


-- | ECC Standard Curves, taken from Standard Documents found somewhere(tm)
module Codec.Crypto.ECC.StandardCurves

-- | Datatype for defined Standard Curves
data StandardCurve
StandardCurve :: BitLength -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> StandardCurve
stdc_l :: StandardCurve -> BitLength
stdc_p :: StandardCurve -> Integer
stdc_r :: StandardCurve -> Integer
stdc_a :: StandardCurve -> Integer
stdc_b :: StandardCurve -> Integer
stdc_xp :: StandardCurve -> Integer
stdc_yp :: StandardCurve -> Integer
StandardCurveF2 :: BitLength -> F2 -> F2 -> F2 -> F2 -> F2 -> F2 -> StandardCurve
stdcF_l :: StandardCurve -> BitLength
stdcF_p :: StandardCurve -> F2
stdcF_r :: StandardCurve -> F2
stdcF_a :: StandardCurve -> F2
stdcF_b :: StandardCurve -> F2
stdcF_xp :: StandardCurve -> F2
stdcF_yp :: StandardCurve -> F2

-- | NIST Prime Curve P-256
p256 :: StandardCurve

-- | NIST Prime Curve P-384
p384 :: StandardCurve

-- | NIST Prime Curve P-521
p521 :: StandardCurve

-- | NIST Binary Field Curve K-283
k283 :: StandardCurve

-- | NIST Binary Field Curve B-283
b283 :: StandardCurve


-- | ECC Base algorithms &amp; point formats
module Codec.Crypto.ECC.Base

-- | all Elliptic Curves, the parameters being the BitLength L, A, B and P
data EC a
ECi :: BitLength -> Integer -> Integer -> Integer -> Integer -> EC Integer
ECb :: BitLength -> F2 -> F2 -> F2 -> F2 -> EC F2

-- | get bitlength
getBitLength :: EC a -> Int

-- | get Curve parameter A
geta :: EC a -> a

-- | get Curve parameter B
getb :: EC a -> a

-- | get Curve parameter P
getp :: EC a -> a

-- | get Curve order r
getr :: EC a -> a

-- | data of all Elliptic Curve Points
data ECPF a
ECPa :: EC Integer -> Integer -> Integer -> ECPF Integer
ECPp :: EC Integer -> Integer -> Integer -> Integer -> ECPF Integer
ECPj :: EC Integer -> Integer -> Integer -> Integer -> ECPF Integer
ECPmj :: EC Integer -> Integer -> Integer -> Integer -> Integer -> ECPF Integer
ECPaF2 :: EC F2 -> F2 -> F2 -> ECPF F2
ECPpF2 :: EC F2 -> F2 -> F2 -> F2 -> ECPF F2
ECPInfI :: EC Integer -> ECPF Integer
ECPInfF2 :: EC F2 -> ECPF F2

-- | get contents of the curve
getCurve :: ECPF a -> EC a

-- | generic getter, returning the x-value
getx :: ECPF a -> a

-- | generic getter, returning the y-value
gety :: ECPF a -> a

-- | generic getter, returning the z-value for points having them
getz :: ECPF a -> a

-- | generic getter, returning the a*z^4-value for points having them
getaz4 :: ECPF a -> a

-- | generic getter, returning the affine x-value
getxA :: ECPF a -> a

-- | generic getter, returning the affine y-value
getyA :: ECPF a -> a

-- | add 2 elliptic points
padd :: (ECPF a) -> (ECPF a) -> (ECPF a)

-- | add an elliptic point onto itself, base for padd a a
pdouble :: (ECPF a) -> (ECPF a)

-- | computing the modular inverse of <tt>a</tt> <a>mod</a> <tt>m</tt>
modinv :: Integral a => a -> a -> a

-- | this is a generic handle for Point Multiplication. The implementation
--   may change.
pmul :: (ECPF a) -> Integer -> (ECPF a)

-- | "generic" verify, if generic ECP is on EC via getxA and getyA
ison :: ECPF a -> Bool
instance Serialize (ECPF F2)
instance Serialize (ECPF Integer)
instance Show (ECPF a)
instance Eq (ECPF a)
instance Serialize (EC F2)
instance Serialize (EC Integer)
instance Show (EC a)
instance Eq (EC a)


-- | basic ECDH functions using hecc
module Codec.Crypto.ECC.ECDH

-- | basic ecdh for testing
basicecdh :: Integer -> ECPF Integer -> Integer
