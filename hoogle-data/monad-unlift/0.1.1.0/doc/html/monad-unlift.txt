-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Typeclasses for representing monad transformer unlifting
--   
@package monad-unlift
@version 0.1.1.0


-- | See overview in the README.md
module Control.Monad.Trans.Unlift

-- | A monad transformer which can be unlifted, obeying the monad morphism
--   laws.
--   
--   Since 0.1.0
class (MonadTransControl t, Forall (Identical t)) => MonadTransUnlift t

-- | A function which can move an action down the monad transformer stack,
--   by providing any necessary environment to the action.
--   
--   Note that, if ImpredicativeTypes worked reliably, this type wouldn't
--   be necessary, and <a>askUnlift</a> would simply include a more
--   generalized type.
--   
--   Since 0.1.0
newtype Unlift t
Unlift :: (forall a n. Monad n => t n a -> n a) -> Unlift t
unlift :: Unlift t -> forall a n. Monad n => t n a -> n a

-- | Get the <a>Unlift</a> action for the current transformer layer.
--   
--   Since 0.1.0
askUnlift :: (MonadTransUnlift t, Monad m) => t m (Unlift t)

-- | A simplified version of <a>askUnlift</a> which addresses the common
--   case where polymorphism isn't necessary.
--   
--   Since 0.1.0
askRun :: (MonadTransUnlift t, Monad (t m), Monad m) => t m (t m a -> m a)

-- | A monad transformer stack which can be unlifted, obeying the monad
--   morphism laws.
--   
--   Since 0.1.0
class (MonadBaseControl b m, Forall (IdenticalBase m)) => MonadBaseUnlift b m | m -> b

-- | Similar to <a>Unlift</a>, but instead of moving one layer down the
--   stack, moves the action to the base monad.
--   
--   Since 0.1.0
newtype UnliftBase b m
UnliftBase :: (forall a. m a -> b a) -> UnliftBase b m
unliftBase :: UnliftBase b m -> forall a. m a -> b a

-- | Get the <a>UnliftBase</a> action for the current transformer stack.
--   
--   Since 0.1.0
askUnliftBase :: MonadBaseUnlift b m => m (UnliftBase b m)

-- | A simplified version of <a>askUnliftBase</a> which addresses the
--   common case where polymorphism isn't necessary.
--   
--   Since 0.1.0
askRunBase :: MonadBaseUnlift b m => m (m a -> b a)

-- | The class of monad transformers. Instances should satisfy the
--   following laws, which state that <a>lift</a> is a monad
--   transformation:
--   
--   <ul>
--   <li><pre><a>lift</a> . <a>return</a> = <a>return</a></pre></li>
--   <li><pre><a>lift</a> (m &gt;&gt;= f) = <a>lift</a> m &gt;&gt;=
--   (<a>lift</a> . f)</pre></li>
--   </ul>
class MonadTrans (t :: (* -> *) -> * -> *)
lift :: (MonadTrans t, Monad m) => m a -> t m a
class (Applicative b, Applicative m, Monad b, Monad m) => MonadBase (b :: * -> *) (m :: * -> *) | m -> b
liftBase :: MonadBase b m => b α -> m α
class MonadTrans t => MonadTransControl (t :: (* -> *) -> * -> *) where type family StT (t :: (* -> *) -> * -> *) a :: *
liftWith :: (MonadTransControl t, Monad m) => (Run t -> m a) -> t m a
restoreT :: (MonadTransControl t, Monad m) => m (StT t a) -> t m a
class MonadBase b m => MonadBaseControl (b :: * -> *) (m :: * -> *) | m -> b where type family StM (m :: * -> *) a :: *
liftBaseWith :: MonadBaseControl b m => (RunInBase m b -> b a) -> m a
restoreM :: MonadBaseControl b m => StM m a -> m a
instance (MonadBaseControl b m, Forall (IdenticalBase m)) => MonadBaseUnlift b m
instance StM m a ~ a => IdenticalBase m a
instance (MonadTransControl t, Forall (Identical t)) => MonadTransUnlift t
instance StT t a ~ a => Identical t a


-- | An implementation of <tt>StateT</tt> built on top of mutable
--   references, providing a proper monad morphism.
--   
--   Please see the documentation at
--   <a>https://www.stackage.org/package/monad-unlift</a> for more details
--   on using this module.
module Control.Monad.Trans.State.Ref

-- | Since 0.1.0
data StateRefT ref s m a

-- | Since 0.1.0
runStateRefT :: (Monad m, s ~ RefElement (ref s), MCState (ref s) ~ PrimState b, MonadBase b m, MutableRef (ref s), PrimMonad b) => StateRefT ref s m a -> s -> m (a, s)

-- | Since 0.1.0
runStateIORefT :: (Monad m, RealWorld ~ PrimState b, MonadBase b m, PrimMonad b) => StateRefT IORef s m a -> s -> m (a, s)

-- | Since 0.1.0
runStateSTRefT :: (Monad m, ps ~ PrimState b, MonadBase b m, PrimMonad b) => StateRefT (STRef ps) s m a -> s -> m (a, s)
instance Functor m => Functor (StateRefT ref s m)
instance MonadResource m => MonadResource (StateRefT ref s m)
instance MonadMask m => MonadMask (StateRefT ref s m)
instance MonadCatch m => MonadCatch (StateRefT ref s m)
instance MonadThrow m => MonadThrow (StateRefT ref s m)
instance MonadBaseControl b m => MonadBaseControl b (StateRefT ref s m)
instance MonadTransControl (StateRefT ref s)
instance MonadBase b m => MonadBase b (StateRefT ref s m)
instance MonadIO m => MonadIO (StateRefT ref s m)
instance MonadTrans (StateRefT ref s)
instance (MCState (ref s) ~ PrimState b, Monad m, s ~ RefElement (ref s), MutableRef (ref s), PrimMonad b, MonadBase b m) => MonadState s (StateRefT ref s m)
instance Monad m => Monad (StateRefT ref s m)
instance Applicative m => Applicative (StateRefT ref s m)


-- | An implementation of <tt>WriterT</tt> built on top of mutable
--   references, providing a proper monad morphism.
--   
--   An additional advantage of this transformer over the standard
--   <tt>WriterT</tt> transformers in the transformers package is that it
--   does not have space leaks. For more information, see
--   <a>https://mail.haskell.org/pipermail/libraries/2012-October/018599.html</a>.
--   
--   Please see the documentation at
--   <a>https://www.stackage.org/package/monad-unlift</a> for more details
--   on using this module.
module Control.Monad.Trans.Writer.Ref

-- | Since 0.1.0
data WriterRefT ref w m a

-- | Since 0.1.0
runWriterRefT :: (Monad m, w ~ RefElement (ref w), MCState (ref w) ~ PrimState b, MonadBase b m, MutableRef (ref w), PrimMonad b, Monoid w) => WriterRefT ref w m a -> m (a, w)

-- | Since 0.1.0
runWriterIORefT :: (Monad m, RealWorld ~ PrimState b, MonadBase b m, PrimMonad b, Monoid w) => WriterRefT IORef w m a -> m (a, w)

-- | Since 0.1.0
runWriterSTRefT :: (Monad m, ps ~ PrimState b, MonadBase b m, PrimMonad b, Monoid w) => WriterRefT (STRef ps) w m a -> m (a, w)
instance Functor m => Functor (WriterRefT ref w m)
instance MonadResource m => MonadResource (WriterRefT ref w m)
instance MonadMask m => MonadMask (WriterRefT ref w m)
instance MonadCatch m => MonadCatch (WriterRefT ref w m)
instance MonadThrow m => MonadThrow (WriterRefT ref w m)
instance MonadBaseControl b m => MonadBaseControl b (WriterRefT ref w m)
instance MonadTransControl (WriterRefT ref w)
instance MonadBase b m => MonadBase b (WriterRefT ref w m)
instance MonadIO m => MonadIO (WriterRefT ref w m)
instance MonadTrans (WriterRefT ref w)
instance (MCState (ref w) ~ PrimState b, Monad m, w ~ RefElement (ref w), MutableRef (ref w), PrimMonad b, MonadBase b m, Monoid w) => MonadWriter w (WriterRefT ref w m)
instance Monad m => Monad (WriterRefT ref w m)
instance Applicative m => Applicative (WriterRefT ref w m)


-- | An implementation of <tt>RWST</tt> built on top of mutable references,
--   providing a proper monad morphism.
--   
--   An additional advantage of this transformer over the standard
--   <tt>RWST</tt> transformers in the transformers package is that it does
--   not have space leaks in the writer component. For more information,
--   see
--   <a>https://mail.haskell.org/pipermail/libraries/2012-October/018599.html</a>.
--   
--   Please see the documentation at
--   <a>https://www.stackage.org/package/monad-unlift</a> for more details
--   on using this module.
module Control.Monad.Trans.RWS.Ref

-- | Since 0.1.0
data RWSRefT refw refs r w s m a

-- | Since 0.1.0
runRWSRefT :: (Monad m, w ~ RefElement (refw w), s ~ RefElement (refs s), MCState (refw w) ~ PrimState b, MCState (refs s) ~ PrimState b, MonadBase b m, MutableRef (refw w), MutableRef (refs s), PrimMonad b, Monoid w) => RWSRefT refw refs r w s m a -> r -> s -> m (a, s, w)

-- | Since 0.1.0
runRWSIORefT :: (Monad m, RealWorld ~ PrimState b, MonadBase b m, PrimMonad b, Monoid w) => RWSRefT IORef IORef r w s m a -> r -> s -> m (a, s, w)

-- | Since 0.1.0
runRWSSTRefT :: (Monad m, ps ~ PrimState b, MonadBase b m, PrimMonad b, Monoid w) => RWSRefT (STRef ps) (STRef ps) r w s m a -> r -> s -> m (a, s, w)
instance Functor m => Functor (RWSRefT refw refs r w s m)
instance MonadResource m => MonadResource (RWSRefT refw refs r w s m)
instance MonadMask m => MonadMask (RWSRefT refw refs r w s m)
instance MonadCatch m => MonadCatch (RWSRefT refw refs r w s m)
instance MonadThrow m => MonadThrow (RWSRefT refw refs r w s m)
instance MonadBaseControl b m => MonadBaseControl b (RWSRefT refw refs r w s m)
instance MonadTransControl (RWSRefT refw refs r w s)
instance MonadBase b m => MonadBase b (RWSRefT refw refs r w s m)
instance MonadIO m => MonadIO (RWSRefT refw refs r w s m)
instance MonadTrans (RWSRefT refw refs r w s)
instance (MCState (refw w) ~ PrimState b, MCState (refs s) ~ PrimState b, Monad m, w ~ RefElement (refw w), s ~ RefElement (refs s), MutableRef (refw w), MutableRef (refs s), PrimMonad b, MonadBase b m, Monoid w) => MonadRWS r w s (RWSRefT refw refs r w s m)
instance (MCState (refs s) ~ PrimState b, Monad m, s ~ RefElement (refs s), MutableRef (refs s), PrimMonad b, MonadBase b m) => MonadState s (RWSRefT refw refs r w s m)
instance (MCState (refw w) ~ PrimState b, Monad m, w ~ RefElement (refw w), MutableRef (refw w), PrimMonad b, MonadBase b m, Monoid w) => MonadWriter w (RWSRefT refw refs r w s m)
instance Monad m => MonadReader r (RWSRefT refw refs r w s m)
instance Monad m => Monad (RWSRefT refw refs r w s m)
instance Applicative m => Applicative (RWSRefT refw refs r w s m)
