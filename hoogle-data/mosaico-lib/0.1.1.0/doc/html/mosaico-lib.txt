-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generación interactiva de mosaicos
--   
@package mosaico-lib
@version 0.1.1.0


-- | Tipos para representar imágenes como matrices (listas anidadas
--   rectangulares) de píxeles de colores, y una función para cargar una
--   imagen a esta representación a partir de un archivo.
module Graphics.Mosaico.Imagen

-- | Un punto en el espacio de colores RGB donde cada componente de color
--   se especifica por un entero entre 0 y 255 (8 bits). Como el color es
--   toda la información almacenada en un píxel, este mismo tipo se usa
--   para representar píxeles individuales en una <a>Imagen</a>.
data Color
Color :: Word8 -> Word8 -> Word8 -> Color
rojo :: Color -> Word8
verde :: Color -> Word8
azul :: Color -> Word8

-- | La representación de una imagen como una matriz de píxeles dados por
--   el <a>Color</a> de cada uno.
--   
--   Las dimensiones de la imagen se guardan por separado para no tener que
--   recorrer las listas de píxeles cada vez que haga falta conocer sus
--   longitudes.
data Imagen
Imagen :: Integer -> Integer -> [[Color]] -> Imagen

-- | El número de píxeles en cada fila de la <a>Imagen</a>.
anchura :: Imagen -> Integer

-- | El número de filas de la <a>Imagen</a>.
altura :: Imagen -> Integer

-- | Los datos de color de cada píxel de la imagen.
--   
--   Cada píxel se representa con un valor del tipo <a>Color</a> que
--   especifica el color del píxel. Los datos se organizan en una lista de
--   filas de la imagen, donde cada fila es a su vez una lista de cada
--   píxel individual de esa fila.
--   
--   Esta lista de listas debe mantenerse rectangular: todas las filas
--   deben ser listas con la misma longitud, que además debe ser igual a la
--   <a>anchura</a> de la misma <a>Imagen</a>. Además, la <a>altura</a>
--   debe ser igual a la longitud de la lista de filas.
datos :: Imagen -> [[Color]]

-- | Leer un archivo e intentar convertirlo en una <a>Imagen</a>. Se
--   soportan varios formatos de archivo de imagen, incluyendo PNG y JPEG.
leerImagen :: String -> IO (Either String Imagen)
instance Show Color
instance Show Imagen


-- | Tipos útiles para representar distribuciones espaciales en dos
--   dimensiones de rectángulos de colores calculados a partir de imágenes.
module Graphics.Mosaico.Diagrama

-- | Un <a>Diagrama</a> es un árbol binario decorado en las hojas con
--   'Rectángulo's, y representa una distribución espacial de 'Rectángulo's
--   en dos dimensiones. Hay dos especies de nodos intermedios; se usan
--   para distribuir los diagramas de los subárboles a la izquierda y la
--   derecha, o arriba y abajo.
data Diagrama

-- | El constructor para las hojas del árbol que contienen un 'Rectángulo'.
Hoja :: Rectángulo -> Diagrama

-- | Este constructor se usa para especificar que la distribución espacial
--   de rectángulos del primer subárbol se ubica arriba de la distribución
--   de rectángulos del segundo subárbol.
(:-:) :: Diagrama -> Diagrama -> Diagrama

-- | Este constructor se usa para especificar que la distribución espacial
--   de rectángulos del primer subárbol se ubica a la la izquierda de la
--   distribución de rectángulos del segundo subárbol.
(:|:) :: Diagrama -> Diagrama -> Diagrama

-- | Un tipo sencillo conveniente para indicar pasos de caminos en un
--   <a>Diagrama</a>.
data Paso

-- | Un paso hacia el primer subárbol en un nodo intermedio.
Primero :: Paso

-- | Un paso hacia el segundo subárbol en un nodo intermedio.
Segundo :: Paso

-- | Un 'Rectángulo' representa a una región rectangular coloreada
--   uniformemente con su <a>color</a>, que ha sido calculado a partir de
--   su <a>imagen</a>. El tamaño del rectángulo es el mismo de su imagen.
data Rectángulo
Rectángulo :: Color -> Imagen -> Rectángulo

-- | El <a>Color</a> del rectángulo.
color :: Rectángulo -> Color

-- | La <a>Imagen</a> usada para calcular el color del rectángulo.
imagen :: Rectángulo -> Imagen
instance Show Rectángulo
instance Show Diagrama
instance Show Paso


-- | Representación orientada a objetos de una ventana interactiva donde se
--   puede mostrar un <a>Diagrama</a> con una parte enfocada, y obtener
--   eventos de teclas pulsadas en la ventana.
module Graphics.Mosaico.Ventana

-- | Un valor del tipo <a>Ventana</a> es un objeto que representa a una
--   ventana interactiva donde puede dibujarse un <a>Diagrama</a>. Es
--   posible, además, obtener información de qué teclas son pulsadas sobre
--   la ventana.
data Ventana

-- | Dada una <a>Ventana</a>, hacer que se cierre y que no pueda producir
--   más eventos de teclado.
cerrar :: Ventana -> IO ()

-- | Construye un objeto del tipo <a>Ventana</a> dadas sus dimensiones en
--   número de píxeles.
crearVentana :: Integer -> Integer -> IO Ventana

-- | Dada una <a>Ventana</a>, esperar por un evento de teclado.
--   
--   Cuando sobre la ventana se haya pulsado alguna tecla que no haya sido
--   reportada a través de este cómputo, se producirá como resultado
--   <tt><a>Just</a> tecla</tt>, donde <tt>tecla</tt> será el nombre de la
--   tecla.
--   
--   Si la ventana ya ha sido cerrada, se producirá como resultado
--   <a>Nothing</a>.
--   
--   El texto correspondiente a cada tecla es aproximadamente igual al
--   nombre del símbolo en la biblioteca GDK sin el prefijo
--   <tt>GDK_KEY_</tt>. La lista completa está disponible en <a>el código
--   fuente de la biblioteca GDK</a>. Sin embargo, la mejor manera de
--   descubrir cuál simbolo corresponde a cada tecla es crear una
--   <a>Ventana</a> y hacer que se imprima el texto correspondiente a cada
--   tecla pulsada sobre ella.
leerTecla :: Ventana -> IO (Maybe String)

-- | Dada una <a>Ventana</a>, un <a>Diagrama</a>, y una lista de
--   <a>Paso</a>s, representar gráficamente el <a>Diagrama</a> dado sobre
--   el lienzo de la <a>Ventana</a>, haciendo resaltar visualmente el nodo
--   del árbol alcanzado si se realizan los movimientos correspondientes a
--   la lista de <a>Paso</a>s desde la raíz del árbol.
--   
--   Los nodos se resaltan con un cuadro verde, y se colorean según el tipo
--   de nodo. En el caso de nodos intermedios, se colorea en azul la región
--   correspondiente al primer subárbol del nodo binario, y en rojo la
--   región correspondiente al segundo subárbol. En el caso de nodos
--   terminales (hojas), el rectángulo se colorea en amarillo.
mostrar :: Ventana -> [Paso] -> Diagrama -> IO ()
