-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | eXtended & Typed Controls for wxHaskell.
--   
@package xtc
@version 1.0.1


-- | XTC: eXtended &amp; Typed Controls for wxHaskell
--   
--   The XTC library provides a typed interface to several wxHaskell
--   controls.
--   
--   <ul>
--   <li>radio view (typed radio box)<ul><li>single-selection list view
--   (typed single-selection list box)</li><li>muliple-selection list view
--   (typed multiple-selection list box)</li><li>choice view (typed choice
--   box)</li><li>value entry (typed text entry)</li></ul>XTC controls keep
--   track of typed values and items, rather than being string based.
--   Selections in XTC controls consist of actual values instead of
--   indices.</li>
--   </ul>
module Graphics.UI.XTC

-- | The labeled class is used by <a>mkRadioView</a>, <a>mkListView</a>,
--   <a>mkMultiListView</a>, and <a>mkChoiceView</a> for conveniently
--   passing the function that maps an item onto its label.
class Labeled x
toLabel :: Labeled x => x -> String

-- | Widgets that have a typed value. The value can be accessed via the
--   attribute <a>typedValue</a>, and has type <tt>x</tt>.
class TypedValued x w | w -> x
typedValue :: TypedValued x w => Attr w (Maybe x)

-- | Widgets that have a typed list of items. The item list can be accessed
--   via the attribute <a>typedItems</a>, and has type <tt>[x]</tt>.
class Items w String => TypedItems x w | w -> x
typedItems :: TypedItems x w => Attr w [x]

-- | Widgets that have a typed selection. The selection can be accessed via
--   the attribute <a>typedSelection</a>, and has type <tt>x</tt>.
class Selection w => TypedSelection x w | w -> x
typedSelection :: TypedSelection x w => Attr w x

-- | Widgets that have a typed selection that may be empty. The selection
--   can be accessed via the attribute <a>typedMaybeSelection</a>, and has
--   type <tt>Maybe x</tt>.
class Selection w => TypedMaybeSelection x w | w -> x
typedMaybeSelection :: TypedMaybeSelection x w => Attr w (Maybe x)

-- | Widgets that have a typed list of selections. The selection list can
--   be accessed via the attribute <a>typedSelections</a>, and has type
--   <tt>[x]</tt>.
class Selections w => TypedSelections x w | w -> x
typedSelections :: TypedSelections x w => Attr w [x]
class Observable w
change :: Observable w => Event w (IO ())

-- | Pointer to a radio view, deriving from <a>RadioBox</a>.
type RadioView x b = RadioBox (CRadioView x b)

-- | Create a new radio view with an initial orientation and a list of
--   typed items. The item type (<tt>x</tt>) must be an instance of
--   <a>Labeled</a> to show each item's label. Use attribute
--   <a>typedSelection</a> to access the currently selected item, and
--   <a>typedItems</a> to access the list of items. Note: for a radio view
--   (or radio box) the items may not be modified dynamically.
--   
--   <ul>
--   <li>Instances: <a>TypedSelection</a>, <a>TypedItems</a>,
--   <a>Selecting</a>,<a>Selection</a>,<a>Items</a> -- <a>Textual</a>,
--   <a>Literate</a>, <a>Dimensions</a>, <a>Colored</a>, <a>Visible</a>,
--   <a>Child</a>, <a>Able</a>, <a>Tipped</a>, <a>Identity</a>,
--   <a>Styled</a>, <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkRadioView :: Labeled x => Window a -> Orientation -> [x] -> [Prop (RadioView x ())] -> IO (RadioView x ())

-- | Create a new radio view with an initial orientation and a list of
--   typed items. A function of type <tt>(x -&gt; String)</tt> maps items
--   onto labels. Use attribute <a>typedSelection</a> to access the
--   currently selected item, and <a>typedItems</a> to access the list of
--   items. Note: for a radio view (or radio box) the items may not be
--   modified dynamically.
--   
--   <ul>
--   <li>Instances: <a>TypedSelection</a>,
--   <a>Selecting</a>,<a>Selection</a>,<a>Items</a> -- <a>Textual</a>,
--   <a>Literate</a>, <a>Dimensions</a>, <a>Colored</a>, <a>Visible</a>,
--   <a>Child</a>, <a>Able</a>, <a>Tipped</a>, <a>Identity</a>,
--   <a>Styled</a>, <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkRadioViewEx :: Window a -> (x -> String) -> Orientation -> [x] -> [Prop (RadioView x ())] -> IO (RadioView x ())

-- | Pointer to a single-selection list view, deriving from
--   <a>SingleListBox</a>.
type ListView a b = SingleListBox (CListView a b)

-- | Create a single-selection list view. The item type (<tt>x</tt>) must
--   be an instance of <a>Labeled</a> to show each item's label. Use
--   attribute <a>typedMaybeSelection</a> to access the currently selected
--   item, and <a>typedItems</a> to access the list of items.
--   
--   <ul>
--   <li>Instances: <a>TypedMaybeSelection</a>, <a>TypedItems</a>,
--   <a>Sorted</a>,<a>Selecting</a>,<a>Selection</a>,<a>Items</a> --
--   <a>Textual</a>, <a>Literate</a>, <a>Dimensions</a>, <a>Colored</a>,
--   <a>Visible</a>, <a>Child</a>, <a>Able</a>, <a>Tipped</a>,
--   <a>Identity</a>, <a>Styled</a>, <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkListView :: Labeled x => Window a -> [Prop (ListView x ())] -> IO (ListView x ())

-- | Create a single-selection list view. A function of type <tt>(x -&gt;
--   String)</tt> maps items onto labels. Use attribute
--   <a>typedMaybeSelection</a> to access the currently selected item, and
--   <a>typedItems</a> to access the list of items.
--   
--   <ul>
--   <li>Instances: <a>TypedMaybeSelection</a>, <a>TypedItems</a>,
--   <a>Sorted</a>,<a>Selecting</a>,<a>Selection</a>,<a>Items</a> --
--   <a>Textual</a>, <a>Literate</a>, <a>Dimensions</a>, <a>Colored</a>,
--   <a>Visible</a>, <a>Child</a>, <a>Able</a>, <a>Tipped</a>,
--   <a>Identity</a>, <a>Styled</a>, <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkListViewEx :: Window a -> (x -> String) -> [Prop (ListView x ())] -> IO (ListView x ())

-- | Pointer to a multiple-selection list view, deriving from
--   <a>MultiListBox</a>.
type MultiListView a b = MultiListBox (CMultiListView a b)

-- | Create a multiple-selection list view. The item type (<tt>x</tt>) must
--   be an instance of <a>Labeled</a> to show each item's label. Use
--   attribute <a>typedSelections</a> to access the currently selected
--   items, and <a>typedItems</a> to access the list of items.
--   
--   <ul>
--   <li>Instances: <a>TypedSelections</a>, <a>TypedItems</a>,
--   <a>Sorted</a>, <a>Selecting</a>,<a>Selections</a>,<a>Items</a> --
--   <a>Textual</a>, <a>Literate</a>, <a>Dimensions</a>, <a>Colored</a>,
--   <a>Visible</a>, <a>Child</a>, <a>Able</a>, <a>Tipped</a>,
--   <a>Identity</a>, <a>Styled</a>, <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkMultiListView :: Labeled x => Window a -> [Prop (MultiListView x ())] -> IO (MultiListView x ())

-- | Create a multiple-selection list view. A function of type <tt>(x -&gt;
--   String)</tt> maps items onto labels. Use attribute
--   <a>typedSelections</a> to access the currently selected items, and
--   <a>typedItems</a> to access the list of items.
--   
--   <ul>
--   <li>Instances: <a>TypedSelections</a>, <a>TypedItems</a>,
--   <a>Sorted</a>, <a>Selecting</a>,<a>Selections</a>,<a>Items</a> --
--   <a>Textual</a>, <a>Literate</a>, <a>Dimensions</a>, <a>Colored</a>,
--   <a>Visible</a>, <a>Child</a>, <a>Able</a>, <a>Tipped</a>,
--   <a>Identity</a>, <a>Styled</a>, <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkMultiListViewEx :: Window a -> (x -> String) -> [Prop (MultiListView x ())] -> IO (MultiListView x ())

-- | Pointer to a choice view, deriving from <a>Choice</a>.
type ChoiceView a b = Choice (CChoiceView a b)

-- | Create a choice view to select one item from a list of typed items.
--   The item type (<tt>x</tt>) must be an instance of <a>Labeled</a> to
--   show each item's label. Use attribute <a>typedMaybeSelection</a> to
--   access the currently selected item, and <a>typedItems</a> to access
--   the list of items.
--   
--   <ul>
--   <li>Instances: <a>TypedMaybeSelection</a>, <a>TypedItems</a>,
--   <a>Sorted</a>, <a>Selecting</a>,<a>Selection</a>,<a>Items</a> --
--   <a>Textual</a>, <a>Literate</a>, <a>Dimensions</a>, <a>Colored</a>,
--   <a>Visible</a>, <a>Child</a>, <a>Able</a>, <a>Tipped</a>,
--   <a>Identity</a>, <a>Styled</a>, <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkChoiceView :: Labeled x => Window a -> [Prop (ChoiceView x ())] -> IO (ChoiceView x ())

-- | Create a choice view to select one item from a list of typed items. A
--   function of type <tt>(x -&gt; String)</tt> maps items onto labels. Use
--   attribute <a>typedMaybeSelection</a> to access the currently selected
--   item, and <a>typedItems</a> to access the list of items.
--   
--   <ul>
--   <li>Instances: <a>TypedMaybeSelection</a>, <a>TypedItems</a>,
--   <a>Sorted</a>, <a>Selecting</a>,<a>Selection</a>,<a>Items</a> --
--   <a>Textual</a>, <a>Literate</a>, <a>Dimensions</a>, <a>Colored</a>,
--   <a>Visible</a>, <a>Child</a>, <a>Able</a>, <a>Tipped</a>,
--   <a>Identity</a>, <a>Styled</a>, <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkChoiceViewEx :: Window a -> (x -> String) -> Style -> [Prop (ChoiceView x ())] -> IO (ChoiceView x ())

-- | Pointer to a choice view, deriving from <a>TextCtrl</a>.
type ValueEntry x b = TextCtrl (CValueEntry x b)

-- | Create a single-line value entry control. The value type (<tt>x</tt>)
--   must be an instance of <a>Show</a> and <a>Read</a> to present a value
--   as a string in the entry and parse the string from the entry back to
--   (maybe) a value. Use <a>typedValue</a> to access the value. Note:
--   <a>alignment</a> has to be set at creation time (or the entry has
--   default alignment (=left) ).
--   
--   <ul>
--   <li>Instances: <a>TypedValued</a>, <a>Wrap</a>, <a>Aligned</a>,
--   <a>Commanding</a> -- <a>Textual</a>, <a>Literate</a>,
--   <a>Dimensions</a>, <a>Colored</a>, <a>Visible</a>, <a>Child</a>,
--   <a>Able</a>, <a>Tipped</a>, <a>Identity</a>, <a>Styled</a>,
--   <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkValueEntry :: (Show x, Read x) => Window b -> [Prop (ValueEntry x ())] -> IO (ValueEntry x ())

-- | Create a single-line value entry control. The two functions of type
--   <tt>(x -&gt; String)</tt> and <tt>(String -&gt; Maybe x)</tt> are used
--   to present a value as a string in the entry and parse the string from
--   the entry back to (maybe) a value. Use <a>typedValue</a> to access the
--   value. Note: <a>alignment</a> has to be set at creation time (or the
--   entry has default alignment (=left) ).
--   
--   <ul>
--   <li>Instances: <a>TypedValued</a>, <a>Wrap</a>, <a>Aligned</a>,
--   <a>Commanding</a> -- <a>Textual</a>, <a>Literate</a>,
--   <a>Dimensions</a>, <a>Colored</a>, <a>Visible</a>, <a>Child</a>,
--   <a>Able</a>, <a>Tipped</a>, <a>Identity</a>, <a>Styled</a>,
--   <a>Reactive</a>, <a>Paint</a>.</li>
--   </ul>
mkValueEntryEx :: Window b -> (x -> String) -> (String -> Maybe x) -> [Prop (ValueEntry x ())] -> IO (ValueEntry x ())
instance Observable (TextCtrl a)
instance Selection (ChoiceView x ())
instance Selecting (ChoiceView x ())
instance TypedValued x (ValueEntry x ())
instance TypedItems x (ChoiceView x ())
instance TypedMaybeSelection x (ChoiceView x ())
instance TypedItems x (MultiListView x ())
instance TypedSelections x (MultiListView x ())
instance TypedItems x (ListView x ())
instance TypedMaybeSelection x (ListView x ())
instance TypedItems x (RadioView x ())
instance TypedSelection x (RadioView x ())
instance Labeled String
