-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Very fast and memory-compact query-only set and map structures
--   
--   Very fast and memory-compact query-only set and map structures.
@package quickset
@version 0.1.0


-- | This module implements very fast and compact query-only sets.
module Data.QuickSet

-- | QuickSets are sets that use a compact unboxed vector as the internal
--   representation. As such QuickSets are always strict in the values.
data QuickSet a

-- | Convert a list to a <a>QuickSet</a>.
fromList :: (Ord a, Unbox a) => [a] -> QuickSet a

-- | Convert a prefix of the given length of the given list to a
--   <a>QuickSet</a>.
fromListN :: (Ord a, Unbox a) => Int -> [a] -> QuickSet a

-- | Convert an unboxed vector to a <a>QuickSet</a>.
fromVector :: (Ord a, Unbox a) => Vector a -> QuickSet a

-- | Check whether the given value is in the set.
member :: (Ord a, Unbox a) => a -> QuickSet a -> Bool
instance Typeable1 QuickSet
instance (Data a, Unbox a) => Data (QuickSet a)
instance (Eq a, Unbox a) => Eq (QuickSet a)
instance (Ord a, Unbox a) => Ord (QuickSet a)
instance (Show a, Unbox a) => Show (QuickSet a)
instance (Ord a, Read a, Unbox a) => Read (QuickSet a)


-- | This module implements very fast and compact query-only maps.
module Data.QuickMap

-- | QuickMaps are maps from keys to values that use a compact unboxed
--   vector as the internal representation. As such QuickMaps are always
--   strict in both the keys and values.
data QuickMap k a

-- | Convert a list to a <a>QuickMap</a>.
fromList :: (Ord k, Unbox a, Unbox k) => [(k, a)] -> QuickMap k a

-- | Convert a prefix of the given length of the given list to a
--   <a>QuickMap</a>.
fromListN :: (Ord k, Unbox a, Unbox k) => Int -> [(k, a)] -> QuickMap k a

-- | Convert an unboxed vector to a <a>QuickMap</a>.
fromVector :: (Ord k, Unbox a, Unbox k) => Vector (k, a) -> QuickMap k a

-- | Try to look up a key.
lookup :: (Ord k, Unbox a, Unbox k) => k -> QuickMap k a -> Maybe a

-- | Check whether the given key is in the map.
member :: (Ord k, Unbox a, Unbox k) => k -> QuickMap k a -> Bool
instance Typeable2 QuickMap
instance (Data k, Data a, Unbox k, Unbox a) => Data (QuickMap k a)
instance (Eq k, Eq a, Unbox k, Unbox a) => Eq (QuickMap k a)
instance (Ord k, Ord a, Unbox k, Unbox a) => Ord (QuickMap k a)
instance (Show a, Show k, Unbox a, Unbox k) => Show (QuickMap k a)
instance (Ord k, Read a, Read k, Unbox a, Unbox k) => Read (QuickMap k a)
