-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Abstract GADTs from typelevel tags
--   
--   UnGADTagger encapsulates abstraction-from-GADT-tag workflow by
--   utilizing existentials, rank2-types and kind polymorphism.
--   
--   An example:
--   
--   <pre>
--   # LANGUAGE GADTs, DataKinds, KindSignatures, LambdaCase #
--   
--   import Data.GADT.Untagged
--   
--   data Tag = A | B
--   
--   data Gadt :: Tag -&gt; * where
--     ConA :: String   -&gt; Gadt A
--     ConB :: [Gadt A] -&gt; Gadt B
--     ConC :: Integer  -&gt; Gadt B
--   
--   foo :: something -&gt; [Untagged Gadt] -&gt; String
--   foo _ = quux
--     where
--       quux  = concat . map baz
--       baz x = match x $ \case
--         ConA s  -&gt; s
--         ConB xs -&gt; quux (map untag xs)
--         ConC i  -&gt; show i
--   
--   test = foo "some cfg for e.g." (xs ++ ys)
--     where
--       xs = map untag [ConA "A1..", ConA "A2.."]
--       ys = map untag [ConB [ConA "A3.."], ConC 456]
--   
--   -- &gt; "A1..A2..A3..456"
--   </pre>
@package ungadtagger
@version 1.0.0

module Data.GADT.Untagged

-- | Existential type, representing GADT, abstracted from typelevel tag
--   (first type parameter).
data Untagged con
Tagged :: (con a) -> Untagged con

-- | Function to untag values.
--   
--   <pre>
--   f :: [Term A] -&gt; [Term B] -&gt; [Untagged Term]
--   f xs ys = map untag xs ++ map untag ys
--   </pre>
untag :: con a -> Untagged con

-- | Processes untagged value by unpacking it from existential wrapper and
--   feeding result to rank2-typed funarg.
--   
--   <pre>
--   f :: Untagged Term -&gt; Integer
--   f term = match term $ \case
--     Var ... -&gt; ...
--     Lam ... -&gt; ...
--   </pre>
match :: Untagged con -> (forall a. con a -> r) -> r

-- | Existential type, representing GADT, abstracted from two typelevel
--   tags (first two type parameters).
data Untagged2 con
Tagged2 :: (con a b) -> Untagged2 con
untag2 :: con a b -> Untagged2 con
match2 :: Untagged2 con -> (forall a b. con a b -> r) -> r

-- | Existential type, representing GADT, abstracted from three typelevel
--   tags (first three type parameters).
data Untagged3 con
Tagged3 :: (con a b c) -> Untagged3 con
untag3 :: con a b c -> Untagged3 con
match3 :: Untagged3 con -> (forall a b c. con a b c -> r) -> r
