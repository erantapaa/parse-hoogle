-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Windows Game Engine for the Haskell Programmer - Bullet  Bindings
--   
--   HGamer3D is a game engine for developing 3D games in the programming
--   language Haskell. The game engine uses available libraries for 3D
--   graphics, sound, input device handling, gui programming and other
--   areas and make those functions available for the Haskell programmer by
--   providing a Haskell API on top of that. HGamer3D is available on
--   Windows only.
@package HGamer3D-Bullet-Binding
@version 0.2.1

module HGamer3D.Bindings.Bullet.StructVec3
newtype Vector3
Vector3 :: Vec3 -> Vector3
type Vector3Ptr = Ptr (Vector3)
type Vec3Ptr = Ptr (Vec3)
withVec3 :: Vec3 -> (Vec3Ptr -> IO b) -> IO b
peekVec3 :: Ptr a -> IO Vec3
instance Storable Vector3

module HGamer3D.Bindings.Bullet.StructVec2
newtype Vector2
Vector2 :: Vec2 -> Vector2
type Vector2Ptr = Ptr (Vector2)
type Vec2Ptr = Ptr (Vec2)
withVec2 :: Vec2 -> (Vec2Ptr -> IO b) -> IO b
peekVec2 :: Vec2Ptr -> IO Vec2
instance Storable Vector2

module HGamer3D.Bindings.Bullet.StructQuaternion
newtype Quat
Quat :: Quaternion -> Quat
type QuatPtr = Ptr (Quat)
type QuaternionPtr = Ptr (Quaternion)
withQuaternion :: Quaternion -> (QuaternionPtr -> IO b) -> IO b
peekQuaternion :: Ptr a -> IO Quaternion
instance Storable Quat

module HGamer3D.Bindings.Bullet.StructColour
type ColourPtr = Ptr (Colour)
withColour :: Colour -> (ColourPtr -> IO b) -> IO b
peekColour :: ColourPtr -> IO Colour
instance Storable Colour

module HGamer3D.Bindings.Bullet.StructHG3DClass
type HG3DClassPtr = Ptr (HG3DClass)
withHG3DClass :: HG3DClass -> (HG3DClassPtr -> IO b) -> IO b
peekHG3DClass :: HG3DClassPtr -> IO HG3DClass

module HGamer3D.Bindings.Bullet.Utils
withCStringLenIntConv :: Num n => String -> ((CString, n) -> IO a) -> IO a
peekCStringLenIntConv :: Integral n => (CString, n) -> IO String
withIntConv :: (Storable b, Integral a, Integral b) => a -> (Ptr b -> IO c) -> IO c
withFloatConv :: (Storable b, RealFloat a, RealFloat b) => a -> (Ptr b -> IO c) -> IO c
peekIntConv :: (Storable a, Integral a, Integral b) => Ptr a -> IO b
peekFloatConv :: (Storable a, RealFloat a, RealFloat b) => Ptr a -> IO b
withCUString :: String -> (Ptr b -> IO a) -> IO a
peekCUString :: Ptr a -> IO String
alloc64k :: (Ptr a -> IO b) -> IO b
cIntFromEnum :: Enum a => a -> CInt
cIntToEnum :: Enum a => CInt -> a
withBoolUtil :: (Integral a, Storable a) => Bool -> (Ptr a -> IO b) -> IO b
peekBoolUtil :: (Integral a, Storable a) => Ptr a -> IO Bool
withEnumUtil :: (Enum a, Integral b, Storable b) => a -> (Ptr b -> IO c) -> IO c
peekEnumUtil :: (Enum a, Integral b, Storable b) => Ptr b -> IO a

-- | Integral conversion
cIntConv :: (Integral a, Integral b) => a -> b

-- | Floating conversion
cFloatConv :: (RealFloat a, RealFloat b) => a -> b

-- | Convert a C enumeration to Haskell.
cToEnum :: (Integral i, Enum e) => i -> e

-- | Convert a Haskell enumeration to C.
cFromEnum :: (Enum e, Integral i) => e -> i

module HGamer3D.Bindings.Bullet.ClassPtr
type ClassHG3DBulletDefaultCreator = Ptr (())
type ClassHG3DBulletMotionStateHandler = Ptr (())
type ClassHG3DRigidBodyCreator = Ptr (())
type ClassActionInterface = Ptr (())
type ClassBroadphaseInterface = Ptr (())
type ClassCapsuleShapeX = Ptr (())
type ClassCapsuleShapeZ = Ptr (())
type ClassCollisionConfiguration = Ptr (())
type ClassCollisionDispatcher = Ptr (())
type ClassCollisionWorld = Ptr (())
type ClassConeShapeX = Ptr (())
type ClassConeShapeZ = Ptr (())
type ClassCylinderShapeX = Ptr (())
type ClassCylinderShapeZ = Ptr (())
type ClassDefaultCollisionConfiguration = Ptr (())
type ClassDispatcher = Ptr (())
type ClassDynamicsWorld = Ptr (())
type ClassMotionState = Ptr (())
type ClassRigidBody = Ptr (())
type ClassSimpleBroadphase = Ptr (())
type ClassSimpleDynamicsWorld = Ptr (())

module HGamer3D.Bindings.Bullet.ClassActionInterface
delete :: HG3DClass -> IO ()
updateAction :: HG3DClass -> HG3DClass -> Float -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())
updateAction'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (CFloat -> (IO ())))

module HGamer3D.Bindings.Bullet.ClassBroadphaseInterface
delete :: HG3DClass -> IO ()
calculateOverlappingPairs :: HG3DClass -> HG3DClass -> IO ()
getBroadphaseAabb :: HG3DClass -> IO (Vec3, Vec3)
resetPool :: HG3DClass -> HG3DClass -> IO ()
printStats :: HG3DClass -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())
calculateOverlappingPairs'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getBroadphaseAabb'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (IO ())))
resetPool'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
printStats'_ :: (HG3DClassPtr) -> (IO ())

module HGamer3D.Bindings.Bullet.ClassCapsuleShapeX
new :: Float -> Float -> IO (HG3DClass)
getName :: HG3DClass -> IO (String)
new'_ :: CFloat -> (CFloat -> ((HG3DClassPtr) -> (IO ())))
getName'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassCapsuleShapeZ
new :: Float -> Float -> IO (HG3DClass)
getName :: HG3DClass -> IO (String)
new'_ :: CFloat -> (CFloat -> ((HG3DClassPtr) -> (IO ())))
getName'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassCollisionConfiguration
delete :: HG3DClass -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())

module HGamer3D.Bindings.Bullet.ClassCollisionDispatcher
getDispatcherFlags :: HG3DClass -> IO (Int)
setDispatcherFlags :: HG3DClass -> Int -> IO ()
getNumManifolds :: HG3DClass -> IO (Int)
new :: HG3DClass -> IO (HG3DClass)
delete :: HG3DClass -> IO ()
getCollisionConfiguration :: HG3DClass -> IO (HG3DClass)
getCollisionConfiguration2 :: HG3DClass -> IO (HG3DClass)
setCollisionConfiguration :: HG3DClass -> HG3DClass -> IO ()
getDispatcherFlags'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
setDispatcherFlags'_ :: (HG3DClassPtr) -> (CInt -> (IO ()))
getNumManifolds'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
new'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
delete'_ :: (HG3DClassPtr) -> (IO ())
getCollisionConfiguration'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getCollisionConfiguration2'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
setCollisionConfiguration'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassCollisionWorld
new :: HG3DClass -> HG3DClass -> HG3DClass -> IO (HG3DClass)
delete :: HG3DClass -> IO ()
setBroadphase :: HG3DClass -> HG3DClass -> IO ()
getBroadphase :: HG3DClass -> IO (HG3DClass)
getBroadphase2 :: HG3DClass -> IO (HG3DClass)
getDispatcher :: HG3DClass -> IO (HG3DClass)
getDispatcher2 :: HG3DClass -> IO (HG3DClass)
updateAabbs :: HG3DClass -> IO ()
computeOverlappingPairs :: HG3DClass -> IO ()
debugDrawWorld :: HG3DClass -> IO ()
getNumCollisionObjects :: HG3DClass -> IO (Int)
performDiscreteCollisionDetection :: HG3DClass -> IO ()
getForceUpdateAllAabbs :: HG3DClass -> IO (Bool)
setForceUpdateAllAabbs :: HG3DClass -> Bool -> IO ()
new'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> ((HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))))
delete'_ :: (HG3DClassPtr) -> (IO ())
setBroadphase'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getBroadphase'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getBroadphase2'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getDispatcher'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getDispatcher2'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
updateAabbs'_ :: (HG3DClassPtr) -> (IO ())
computeOverlappingPairs'_ :: (HG3DClassPtr) -> (IO ())
debugDrawWorld'_ :: (HG3DClassPtr) -> (IO ())
getNumCollisionObjects'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
performDiscreteCollisionDetection'_ :: (HG3DClassPtr) -> (IO ())
getForceUpdateAllAabbs'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
setForceUpdateAllAabbs'_ :: (HG3DClassPtr) -> (CInt -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassConeShapeX
new :: Float -> Float -> IO (HG3DClass)
getAnisotropicRollingFrictionDirection :: HG3DClass -> IO (Vec3)
new'_ :: CFloat -> (CFloat -> ((HG3DClassPtr) -> (IO ())))
getAnisotropicRollingFrictionDirection'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassConeShapeZ
new :: Float -> Float -> IO (HG3DClass)
getAnisotropicRollingFrictionDirection :: HG3DClass -> IO (Vec3)
new'_ :: CFloat -> (CFloat -> ((HG3DClassPtr) -> (IO ())))
getAnisotropicRollingFrictionDirection'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassCylinderShapeX
new :: Vec3 -> IO (HG3DClass)
localGetSupportingVertexWithoutMargin :: HG3DClass -> Vec3 -> IO (Vec3)
batchedUnitVectorGetSupportingVertexWithoutMargin :: HG3DClass -> Vec3 -> Int -> IO (Vec3)
getName :: HG3DClass -> IO (String)
getRadius :: HG3DClass -> IO (Float)
new'_ :: (Vec3Ptr) -> ((HG3DClassPtr) -> (IO ()))
localGetSupportingVertexWithoutMargin'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (IO ())))
batchedUnitVectorGetSupportingVertexWithoutMargin'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (CInt -> (IO ()))))
getName'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> (IO ()))
getRadius'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassCylinderShapeZ
new :: Vec3 -> IO (HG3DClass)
localGetSupportingVertexWithoutMargin :: HG3DClass -> Vec3 -> IO (Vec3)
batchedUnitVectorGetSupportingVertexWithoutMargin :: HG3DClass -> Vec3 -> Int -> IO (Vec3)
getName :: HG3DClass -> IO (String)
getRadius :: HG3DClass -> IO (Float)
new'_ :: (Vec3Ptr) -> ((HG3DClassPtr) -> (IO ()))
localGetSupportingVertexWithoutMargin'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (IO ())))
batchedUnitVectorGetSupportingVertexWithoutMargin'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (CInt -> (IO ()))))
getName'_ :: (HG3DClassPtr) -> ((Ptr CChar) -> (IO ()))
getRadius'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassDefaultCollisionConfiguration
delete :: HG3DClass -> IO ()
setConvexConvexMultipointIterations :: HG3DClass -> Int -> Int -> IO ()
setPlaneConvexMultipointIterations :: HG3DClass -> Int -> Int -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())
setConvexConvexMultipointIterations'_ :: (HG3DClassPtr) -> (CInt -> (CInt -> (IO ())))
setPlaneConvexMultipointIterations'_ :: (HG3DClassPtr) -> (CInt -> (CInt -> (IO ())))

module HGamer3D.Bindings.Bullet.ClassDispatcher
delete :: HG3DClass -> IO ()
getNumManifolds :: HG3DClass -> IO (Int)
delete'_ :: (HG3DClassPtr) -> (IO ())
getNumManifolds'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassDynamicsWorld
delete :: HG3DClass -> IO ()
stepSimulation :: HG3DClass -> Float -> Int -> Float -> IO (Int)
debugDrawWorld :: HG3DClass -> IO ()
addAction :: HG3DClass -> HG3DClass -> IO ()
removeAction :: HG3DClass -> HG3DClass -> IO ()
setGravity :: HG3DClass -> Vec3 -> IO ()
getGravity :: HG3DClass -> IO (Vec3)
synchronizeMotionStates :: HG3DClass -> IO ()
addRigidBody :: HG3DClass -> HG3DClass -> IO ()
removeRigidBody :: HG3DClass -> HG3DClass -> IO ()
getNumConstraints :: HG3DClass -> IO (Int)
clearForces :: HG3DClass -> IO ()
addVehicle :: HG3DClass -> HG3DClass -> IO ()
removeVehicle :: HG3DClass -> HG3DClass -> IO ()
addCharacter :: HG3DClass -> HG3DClass -> IO ()
removeCharacter :: HG3DClass -> HG3DClass -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())
stepSimulation'_ :: (HG3DClassPtr) -> (CFloat -> (CInt -> (CFloat -> ((Ptr CInt) -> (IO ())))))
debugDrawWorld'_ :: (HG3DClassPtr) -> (IO ())
addAction'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
removeAction'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
setGravity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getGravity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
synchronizeMotionStates'_ :: (HG3DClassPtr) -> (IO ())
addRigidBody'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
removeRigidBody'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getNumConstraints'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
clearForces'_ :: (HG3DClassPtr) -> (IO ())
addVehicle'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
removeVehicle'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
addCharacter'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
removeCharacter'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassHG3DBulletDefaultCreator
new :: IO (HG3DClass)
delete :: HG3DClass -> IO ()
initializeDefaults :: HG3DClass -> IO ()
getDynamicsWorld :: HG3DClass -> IO (HG3DClass)
getCollisionDispatcher :: HG3DClass -> IO (HG3DClass)
new'_ :: (HG3DClassPtr) -> (IO ())
delete'_ :: (HG3DClassPtr) -> (IO ())
initializeDefaults'_ :: (HG3DClassPtr) -> (IO ())
getDynamicsWorld'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getCollisionDispatcher'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassHG3DBulletMotionStateHandler
createDefaultMotionState :: Vec3 -> Quaternion -> IO (HG3DClass)
getPosition :: HG3DClass -> IO (Vec3)
setPosition :: HG3DClass -> Vec3 -> IO ()
getQuaternion :: HG3DClass -> IO (Quaternion)
setQuaternion :: HG3DClass -> Quaternion -> IO ()
createDefaultMotionState'_ :: (Vec3Ptr) -> ((QuaternionPtr) -> ((HG3DClassPtr) -> (IO ())))
getPosition'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
setPosition'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getQuaternion'_ :: (HG3DClassPtr) -> ((QuaternionPtr) -> (IO ()))
setQuaternion'_ :: (HG3DClassPtr) -> ((QuaternionPtr) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassHG3DRigidBodyCreator
createSphere :: Float -> Vec3 -> Quaternion -> Float -> IO (HG3DClass)
createBox :: Float -> Vec3 -> Quaternion -> Vec3 -> IO (HG3DClass)
createCylinder :: Float -> Vec3 -> Quaternion -> Vec3 -> IO (HG3DClass)
createCapsule :: Float -> Vec3 -> Quaternion -> Float -> Float -> IO (HG3DClass)
createCone :: Float -> Vec3 -> Quaternion -> Float -> Float -> IO (HG3DClass)
createStaticPlane :: Float -> Vec3 -> Quaternion -> Vec3 -> IO (HG3DClass)
createSphere'_ :: CFloat -> ((Vec3Ptr) -> ((QuaternionPtr) -> (CFloat -> ((HG3DClassPtr) -> (IO ())))))
createBox'_ :: CFloat -> ((Vec3Ptr) -> ((QuaternionPtr) -> ((Vec3Ptr) -> ((HG3DClassPtr) -> (IO ())))))
createCylinder'_ :: CFloat -> ((Vec3Ptr) -> ((QuaternionPtr) -> ((Vec3Ptr) -> ((HG3DClassPtr) -> (IO ())))))
createCapsule'_ :: CFloat -> ((Vec3Ptr) -> ((QuaternionPtr) -> (CFloat -> (CFloat -> ((HG3DClassPtr) -> (IO ()))))))
createCone'_ :: CFloat -> ((Vec3Ptr) -> ((QuaternionPtr) -> (CFloat -> (CFloat -> ((HG3DClassPtr) -> (IO ()))))))
createStaticPlane'_ :: CFloat -> ((Vec3Ptr) -> ((QuaternionPtr) -> ((Vec3Ptr) -> ((HG3DClassPtr) -> (IO ())))))

module HGamer3D.Bindings.Bullet.ClassMotionState
delete :: HG3DClass -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())

module HGamer3D.Bindings.Bullet.ClassRigidBody
delete :: HG3DClass -> IO ()
saveKinematicState :: HG3DClass -> Float -> IO ()
applyGravity :: HG3DClass -> IO ()
setGravity :: HG3DClass -> Vec3 -> IO ()
getGravity :: HG3DClass -> IO (Vec3)
setDamping :: HG3DClass -> Float -> Float -> IO ()
getLinearDamping :: HG3DClass -> IO (Float)
getAngularDamping :: HG3DClass -> IO (Float)
getLinearSleepingThreshold :: HG3DClass -> IO (Float)
getAngularSleepingThreshold :: HG3DClass -> IO (Float)
applyDamping :: HG3DClass -> Float -> IO ()
setMassProps :: HG3DClass -> Float -> Vec3 -> IO ()
getLinearFactor :: HG3DClass -> IO (Vec3)
setLinearFactor :: HG3DClass -> Vec3 -> IO ()
getInvMass :: HG3DClass -> IO (Float)
integrateVelocities :: HG3DClass -> Float -> IO ()
applyCentralForce :: HG3DClass -> Vec3 -> IO ()
getTotalForce :: HG3DClass -> IO (Vec3)
getTotalTorque :: HG3DClass -> IO (Vec3)
getInvInertiaDiagLocal :: HG3DClass -> IO (Vec3)
setInvInertiaDiagLocal :: HG3DClass -> Vec3 -> IO ()
setSleepingThresholds :: HG3DClass -> Float -> Float -> IO ()
applyTorque :: HG3DClass -> Vec3 -> IO ()
applyForce :: HG3DClass -> Vec3 -> Vec3 -> IO ()
applyCentralImpulse :: HG3DClass -> Vec3 -> IO ()
applyTorqueImpulse :: HG3DClass -> Vec3 -> IO ()
applyImpulse :: HG3DClass -> Vec3 -> Vec3 -> IO ()
clearForces :: HG3DClass -> IO ()
updateInertiaTensor :: HG3DClass -> IO ()
getCenterOfMassPosition :: HG3DClass -> IO (Vec3)
getOrientation :: HG3DClass -> IO (Quaternion)
getLinearVelocity :: HG3DClass -> IO (Vec3)
getAngularVelocity :: HG3DClass -> IO (Vec3)
setLinearVelocity :: HG3DClass -> Vec3 -> IO ()
setAngularVelocity :: HG3DClass -> Vec3 -> IO ()
getVelocityInLocalPoint :: HG3DClass -> Vec3 -> IO (Vec3)
translate :: HG3DClass -> Vec3 -> IO ()
getAabb :: HG3DClass -> IO (Vec3, Vec3)
getMotionState :: HG3DClass -> IO (HG3DClass)
getMotionState2 :: HG3DClass -> IO (HG3DClass)
setMotionState :: HG3DClass -> HG3DClass -> IO ()
setAngularFactor :: HG3DClass -> Vec3 -> IO ()
setAngularFactor2 :: HG3DClass -> Float -> IO ()
getAngularFactor :: HG3DClass -> IO (Vec3)
isInWorld :: HG3DClass -> IO (Bool)
getNumConstraintRefs :: HG3DClass -> IO (Int)
setFlags :: HG3DClass -> Int -> IO ()
getFlags :: HG3DClass -> IO (Int)
computeGyroscopicForce :: HG3DClass -> Float -> IO (Vec3)
calculateSerializeBufferSize :: HG3DClass -> IO (Int)
delete'_ :: (HG3DClassPtr) -> (IO ())
saveKinematicState'_ :: (HG3DClassPtr) -> (CFloat -> (IO ()))
applyGravity'_ :: (HG3DClassPtr) -> (IO ())
setGravity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getGravity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
setDamping'_ :: (HG3DClassPtr) -> (CFloat -> (CFloat -> (IO ())))
getLinearDamping'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))
getAngularDamping'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))
getLinearSleepingThreshold'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))
getAngularSleepingThreshold'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))
applyDamping'_ :: (HG3DClassPtr) -> (CFloat -> (IO ()))
setMassProps'_ :: (HG3DClassPtr) -> (CFloat -> ((Vec3Ptr) -> (IO ())))
getLinearFactor'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
setLinearFactor'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getInvMass'_ :: (HG3DClassPtr) -> ((Ptr CFloat) -> (IO ()))
integrateVelocities'_ :: (HG3DClassPtr) -> (CFloat -> (IO ()))
applyCentralForce'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getTotalForce'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getTotalTorque'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getInvInertiaDiagLocal'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
setInvInertiaDiagLocal'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
setSleepingThresholds'_ :: (HG3DClassPtr) -> (CFloat -> (CFloat -> (IO ())))
applyTorque'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
applyForce'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (IO ())))
applyCentralImpulse'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
applyTorqueImpulse'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
applyImpulse'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (IO ())))
clearForces'_ :: (HG3DClassPtr) -> (IO ())
updateInertiaTensor'_ :: (HG3DClassPtr) -> (IO ())
getCenterOfMassPosition'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getOrientation'_ :: (HG3DClassPtr) -> ((QuaternionPtr) -> (IO ()))
getLinearVelocity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getAngularVelocity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
setLinearVelocity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
setAngularVelocity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getVelocityInLocalPoint'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (IO ())))
translate'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getAabb'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (IO ())))
getMotionState'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getMotionState2'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
setMotionState'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
setAngularFactor'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
setAngularFactor2'_ :: (HG3DClassPtr) -> (CFloat -> (IO ()))
getAngularFactor'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
isInWorld'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
getNumConstraintRefs'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
setFlags'_ :: (HG3DClassPtr) -> (CInt -> (IO ()))
getFlags'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))
computeGyroscopicForce'_ :: (HG3DClassPtr) -> (CFloat -> ((Vec3Ptr) -> (IO ())))
calculateSerializeBufferSize'_ :: (HG3DClassPtr) -> ((Ptr CInt) -> (IO ()))

module HGamer3D.Bindings.Bullet.ClassSimpleBroadphase
delete :: HG3DClass -> IO ()
calculateOverlappingPairs :: HG3DClass -> HG3DClass -> IO ()
getBroadphaseAabb :: HG3DClass -> IO (Vec3, Vec3)
printStats :: HG3DClass -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())
calculateOverlappingPairs'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
getBroadphaseAabb'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> ((Vec3Ptr) -> (IO ())))
printStats'_ :: (HG3DClassPtr) -> (IO ())

module HGamer3D.Bindings.Bullet.ClassSimpleDynamicsWorld
delete :: HG3DClass -> IO ()
stepSimulation :: HG3DClass -> Float -> Int -> Float -> IO (Int)
setGravity :: HG3DClass -> Vec3 -> IO ()
getGravity :: HG3DClass -> IO (Vec3)
addRigidBody :: HG3DClass -> HG3DClass -> IO ()
removeRigidBody :: HG3DClass -> HG3DClass -> IO ()
debugDrawWorld :: HG3DClass -> IO ()
addAction :: HG3DClass -> HG3DClass -> IO ()
removeAction :: HG3DClass -> HG3DClass -> IO ()
updateAabbs :: HG3DClass -> IO ()
synchronizeMotionStates :: HG3DClass -> IO ()
clearForces :: HG3DClass -> IO ()
delete'_ :: (HG3DClassPtr) -> (IO ())
stepSimulation'_ :: (HG3DClassPtr) -> (CFloat -> (CInt -> (CFloat -> ((Ptr CInt) -> (IO ())))))
setGravity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
getGravity'_ :: (HG3DClassPtr) -> ((Vec3Ptr) -> (IO ()))
addRigidBody'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
removeRigidBody'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
debugDrawWorld'_ :: (HG3DClassPtr) -> (IO ())
addAction'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
removeAction'_ :: (HG3DClassPtr) -> ((HG3DClassPtr) -> (IO ()))
updateAabbs'_ :: (HG3DClassPtr) -> (IO ())
synchronizeMotionStates'_ :: (HG3DClassPtr) -> (IO ())
clearForces'_ :: (HG3DClassPtr) -> (IO ())
