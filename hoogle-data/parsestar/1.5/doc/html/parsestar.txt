-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | NMR-STAR file format parser.
--   
@package parsestar
@version 1.5

module Data.STAR.ResidueCodes
allPDBAminoacids :: [ByteString]
allFASTAAminoacids :: [Char]

-- | Finds a single-letter FASTA code for a given three-letter PDB code (or
--   returns <tt>X</tt>.)
toSingleLetterCode :: ByteString -> Char
maybeToSingleLetterCode :: ByteString -> Maybe Char

-- | Finds a three-letter PDB/BMRB aminoacid code for a given single-letter
--   FASTA code (or returns <a>UNK</a> for unknown.)
toThreeLetterCode :: Char -> ByteString

module Data.STAR.Type
newtype STAR
STAR :: [STARBlock] -> STAR
data STARBlock
Global :: ![STAREntry] -> STARBlock
entries :: STARBlock -> ![STAREntry]
Data :: !String -> ![STAREntry] -> STARBlock
dataKey :: STARBlock -> !String
entries :: STARBlock -> ![STAREntry]
data STAREntry
Entry :: !String -> !String -> STAREntry
key :: STAREntry -> !String
value :: STAREntry -> !String
Ref :: !String -> !String -> STAREntry
key :: STAREntry -> !String
value :: STAREntry -> !String
Frame :: !String -> ![STAREntry] -> STAREntry
key :: STAREntry -> !String
frameEntries :: STAREntry -> ![STAREntry]
Loop :: ![[STAREntry]] -> STAREntry
table :: STAREntry -> ![[STAREntry]]
type STARKey = String
type String = ByteString
instance Show STAREntry
instance Eq STAREntry
instance Show STARBlock
instance Eq STARBlock
instance Show STAR
instance Eq STAR
instance NFData STAREntry
instance NFData STAR
instance NFData STARBlock
instance Binary STAREntry
instance Binary STAR
instance Binary STARBlock

module Data.STAR.Path

-- | This module presents a convenient, compositional interface for
--   filtering Example use: &gt; test1 :: STAR -&gt; [String] &gt; test1 =
--   blocksByName "" .<i> entriesByName "chemical_shifts" .</i> entryValue
--   Another example: &gt; test2 :: STAR -&gt; [String] &gt; test2 =
--   starBlocks .<i> entries .</i> entryValue
--   
--   Path separator - serves as general function composition operator.
(./) :: (a -> [a1]) -> (a1 -> [b]) -> a -> [b]

-- | Path predicate operator - serves as general function composition
--   operator.
(/<>) :: (a -> b) -> (b -> Bool) -> a -> [b]

-- | Applies a path to a set of elements (not just a document, or single
--   entry.)
(->//) :: [a] -> (a -> [b]) -> [b]
starBlocks :: STAR -> [STARBlock]
filterP :: (t -> Bool) -> t -> [t]

-- | Selects all block matching a given name or GLOBAL block for empty
--   string. TODO: Regex for names?
blocksByName :: String -> STAR -> [STAREntry]

-- | Filter entries with a given name. Expand loops if necessary.
entriesByName :: String -> STAREntry -> [STAREntry]

-- | Extracts a string value from a flat entry.
entryValue :: STAREntry -> [String]

-- | Find all flat entries with a given name, and return their values.
allEntriesByName :: String -> STAR -> [String]

-- | Expands a possibly complex entry into a list of flat entries.
flattenEntries :: STAREntry -> [STAREntry]

module Data.STAR.Parser
parse :: ByteString -> Either ParseError [STARBlock]
parseFile :: [Char] -> IO (Either [Char] STAR)
parsePlainFile :: [Char] -> IO (Either [Char] STAR)
parseCompressedFile :: [Char] -> IO (Either [Char] STAR)
instance Show STARType
instance Eq STARType
instance Show STARStruct
instance Eq STARStruct

module Data.STAR.ChemShifts

-- | Record representing single chemical shift.
data ChemShift
ChemShift :: !Int -> !Int -> !Int -> !String -> !String -> !String -> !Int -> !Float -> !Float -> !String -> ChemShift
cs_id :: ChemShift -> !Int
seq_id :: ChemShift -> !Int
entity_id :: ChemShift -> !Int
comp_id :: ChemShift -> !String
atom_id :: ChemShift -> !String
atom_type :: ChemShift -> !String
isotope :: ChemShift -> !Int
chemshift :: ChemShift -> !Float
sigma :: ChemShift -> !Float
entry_id :: ChemShift -> !String

-- | Extracts chemical shift list from a STAR file contents.
extractChemShifts :: STAR -> [ChemShift]

-- | Parse NMR-STAR file and and return either error message, or list of
--   chemical shifts.
parse :: [Char] -> IO (Either [Char] [ChemShift])

-- | Extracts FASTA sequence from a list of chemical shift records.
extractSequenceFromChemShifts :: [ChemShift] -> [(Int, [Char])]

-- | Shows FASTA record for a given filename, and chain identifier.
showSequenceWithChain :: [Char] -> (Int, [Char]) -> [Char]
instance Typeable ChemShift
instance Eq ChemShift
instance Ord ChemShift
instance Show ChemShift
instance NFData ChemShift
instance Binary ChemShift

module Data.STAR.Coords
data Coord
Coord :: !Int -> !Int -> !Int -> !String -> !Int -> !String -> !Float -> !Float -> !Float -> !Float -> !Float -> !Float -> !String -> Coord
model_id :: Coord -> !Int
res_id :: Coord -> !Int
entity_id :: Coord -> !Int
resname :: Coord -> !String
atom_id :: Coord -> !Int
atom_type :: Coord -> !String
x :: Coord -> !Float
y :: Coord -> !Float
z :: Coord -> !Float
x_sigma :: Coord -> !Float
y_sigma :: Coord -> !Float
z_sigma :: Coord -> !Float
entry_id :: Coord -> !String
extractCoords :: STAR -> [Coord]
parse :: [Char] -> IO (Either [Char] [Coord])
instance Eq Coord
instance Ord Coord
instance Show Coord
instance NFData Coord
instance Binary Coord

module Data.STAR
newtype STAR
STAR :: [STARBlock] -> STAR
data STARBlock
Global :: ![STAREntry] -> STARBlock
entries :: STARBlock -> ![STAREntry]
Data :: !String -> ![STAREntry] -> STARBlock
dataKey :: STARBlock -> !String
entries :: STARBlock -> ![STAREntry]
data STAREntry
Entry :: !String -> !String -> STAREntry
key :: STAREntry -> !String
value :: STAREntry -> !String
Ref :: !String -> !String -> STAREntry
key :: STAREntry -> !String
value :: STAREntry -> !String
Frame :: !String -> ![STAREntry] -> STAREntry
key :: STAREntry -> !String
frameEntries :: STAREntry -> ![STAREntry]
Loop :: ![[STAREntry]] -> STAREntry
table :: STAREntry -> ![[STAREntry]]
type STARKey = String

-- | Front end to <tt>Data.STAR.Parser.parse</tt>.
parseSTAR :: ByteString -> Either ParseError [STARBlock]

-- | Parser that automatically guesses whether file is compressed or not
--   And then calls <tt>Data.STAR.parseFile</tt> or
--   <tt>Data.STAR.parseCompressedFile</tt>.
parseSTARFile :: [Char] -> IO (Either [Char] STAR)

-- | Extracts chemical shift list from a STAR file contents.
extractChemShifts :: STAR -> [ChemShift]
extractCoords :: STAR -> [Coord]
