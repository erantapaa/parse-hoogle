-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | DOM traversal by CSS selectors for xml-conduit package
--   
--   CSS selector support for xml-conduit/html-conduit. This package
--   supports compile-time checking of CSS selectors using quasiquotes. All
--   DOM traversals are purely functional.
--   
--   <ul>
--   <li>Quick start</li>
--   </ul>
--   
--   <pre>
--   -- The following pragmas should be put first (Haddock does not accept a pragma notation.)
--   -- LANGUAGE OverloadedStrings, QuasiQuotes
--   
--   module Main (main) where
--   
--   import Text.XML.Cursor (fromDocument)
--   import Text.HTML.DOM (parseLBS)
--   import qualified Data.Text.Lazy.IO as TI (putStrLn)
--   
--   import Control.Monad (mapM_)
--   
--   import Text.XML.Scraping (innerHtml)
--   import Text.XML.Selector.TH
--   
--   import Network.HTTP.Conduit
--   import Data.Conduit.Binary
--   
--   main :: IO ()
--   main = do
--      root &lt;- fmap (fromDocument . parseLBS) $ simpleHttp "https://news.google.com/"
--      let cs = queryT [jq| h2 span.titletext |] root
--      mapM_ (TI.putStrLn . innerHtml) cs
--   </pre>
--   
--   You can use some elementary CSS selectors for traversing a DOM tree.
--   
--   <ul>
--   <li>Other examples</li>
--   </ul>
--   
--   <a>https://github.com/nebuta/dom-selector/tree/master/examples</a>
--   
--   Changes:
--   
--   Ver 0.2.1: Inappropriate Safe Haskell pragma was removed.
--   
--   Ver 0.2: All scraping functions in Text.XML.Scraping return lazy text
--   now. They are implemented with a type class.
@package dom-selector
@version 0.2.0.1

module Text.XML.Selector.Types

-- | JQSelector represents one token of jquery selector. One JQSelector
--   corresponds to "div#content", "a[href='/index.html']", etc. You can
--   get a list of JQSelector by <tt>parseJQ</tt>, and show them by
--   <tt>showJQ</tt> As long as you use <tt>query</tt>, you don't need to
--   handle this type directly.
data JQSelector
JQSelector :: RelPrev -> Maybe String -> Maybe String -> [String] -> [TagAttr] -> JQSelector
relPrev :: JQSelector -> RelPrev
jqTagName :: JQSelector -> Maybe String
jqTagId :: JQSelector -> Maybe String
jqTagClass :: JQSelector -> [String]
jqTagAttr :: JQSelector -> [TagAttr]
data TagAttr
TagAttr :: String -> Maybe String -> AttrRel -> TagAttr
attrName :: TagAttr -> String
attrVal :: TagAttr -> Maybe String
attrRel :: TagAttr -> AttrRel
data AttrRel
Equal :: AttrRel
Begin :: AttrRel
End :: AttrRel
Contains :: AttrRel
NotEqual :: AttrRel
ContainsWord :: AttrRel
Exists :: AttrRel
relToStr :: AttrRel -> String

-- | Relationship to the preceding selector.
data RelPrev
Descendant :: RelPrev
Child :: RelPrev
Next :: RelPrev
Sibling :: RelPrev
instance Show AttrRel
instance Eq AttrRel
instance Ord AttrRel
instance Enum AttrRel
instance Read AttrRel
instance Eq TagAttr
instance Show TagAttr
instance Read TagAttr
instance Ord TagAttr
instance Eq RelPrev
instance Show RelPrev
instance Enum RelPrev
instance Read RelPrev
instance Ord RelPrev
instance Show JQSelector
instance Read JQSelector
instance Ord JQSelector
instance Eq JQSelector

module Text.XML.Selector.Parser

-- | Parse a jQuery selector string and return a list of <a>JQSelector</a>.
parseJQ :: String -> [JQSelector]
instance Eq NameIdClassAttr
instance Show NameIdClassAttr
instance Ord NameIdClassAttr
instance Eq JQSelectorToken
instance Show JQSelectorToken


-- | This module has query functions for traversing DOM. <tt>queryT</tt>, a
--   quasiquote version, is also available in <a>Text.XML.Selector.TH</a>
--   module.
module Text.XML.Selector

-- | Get <a>Axis</a> from jQuery selector string.
query :: String -> Axis

-- | Return Just (the first element of query results). If no element
--   matches, it returns Nothing.
query1 :: String -> Cursor -> Maybe Cursor
searchTree :: [JQSelector] -> Axis

-- | Show a parsed selector. (parseJQ . showJQ) == id
showJQ :: [JQSelector] -> String

-- | Axis for choosing elements by an id
byId :: String -> Axis

-- | Axis for choosing elements by a class
byClass :: String -> Axis

-- | Return if an element matches a selector
selectorMatch :: JQSelector -> Element -> Bool

-- | Gets the next sibling. Note that this is not a Axis.
next :: Cursor -> Maybe Cursor
maybeText :: Text -> Maybe Text
headm :: [a] -> Maybe a

-- | Return if a node matches a selector given by string |Only first token
--   is used (i.e. no hierarchy is enabled.)
queryMatchNode :: String -> Node -> Bool

module Text.XML.Selector.Test

-- | QuickCheck for a parser.
prop_parseJQ :: [JQSelector] -> Bool
instance Arbitrary AttrRel
instance Arbitrary RelPrev
instance Arbitrary TagAttr
instance Arbitrary JQSelector

module Text.XML.Selector.TH

-- | QuasiQuoter for CSS selector
jq :: QuasiQuoter

-- | Get <a>Axis</a> from jQuery selector QQ.
--   
--   <pre>
--   html = innerHtml $ cursor $| queryT [jq| ul.foo &gt; li#bar |]
--   </pre>
queryT :: [JQSelector] -> Axis
instance Lift AttrRel
instance Lift RelPrev
instance Lift TagAttr
instance Lift JQSelector


-- | Scraping (innerHTML/innerText) and modification (node removal)
--   functions.
module Text.XML.Scraping

-- | Type class for getting lazy text representation of HTML element(s).
--   This can be used for <a>Node</a>, <a>Cursor</a>, [Node], and [Cursor].
class GetInner elem
innerHtml :: GetInner elem => elem -> Text
innerText :: GetInner elem => elem -> Text
toHtml :: GetInner elem => elem -> Text
class GetAttribute elem
ename :: GetAttribute elem => elem -> Maybe Text
eid :: GetAttribute elem => elem -> Maybe Text
eclass :: GetAttribute elem => elem -> [Text]
getMeta :: GetAttribute elem => Text -> elem -> [Text]

-- | Removes descendant nodes that satisfy predicate, and returns a new
--   updated <a>Node</a>. This is a general function, and internally used
--   for other remove* functions in this module.
remove :: (Node -> Bool) -> Node -> Node

-- | Similar to <a>remove</a>, but with a limit of depth.
removeDepth :: (Node -> Bool) -> Int -> Node -> Node

-- | Remove all descendant nodes with specified tag names.
removeTags :: [String] -> [Node] -> [Node]

-- | Remove all descendant nodes that match any of query strings.
--   ''removeQuery'' in ver 0.1 was merged into this.
removeQueries :: [String] -> [Node] -> [Node]

-- | Remove descendant nodes that match specified tag, id, and class
--   (similar to <a>remove</a>, but more specific.) If you pass an empty
--   string to tag or id, that does not filter tag or id (Read the source
--   code for details).
--   
--   <pre>
--   rmElem ''div'' ''div-id'' [''div-class'', ''div-class2''] nodes = newnodes
--   </pre>
rmElem :: String -> String -> [String] -> [Node] -> [Node]

-- | Checks whether the node contains any descendant (and self) node that
--   satisfies predicate. To return false, this function needs to traverse
--   all descendant elements, so this is not efficient.
nodeHaving :: (Node -> Bool) -> Node -> Bool

-- | Remove all descendant nodes that match a query string.

-- | <i>Deprecated: Use removeQueries instead. </i>
removeQuery :: String -> [Node] -> [Node]
instance GetAttribute Cursor
instance GetAttribute Node
instance GetInner a => GetInner [a]
instance GetInner Cursor
instance GetInner Node
