-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Tools for self-assembly
--   
--   Tools for self-assembly
@package Baggins
@version 1.0

module Math.SelfAssembly.Baggins

-- | The tile datatype
data Tile
type Program = State St

-- | Run the program, returning its return value, along with the produced
--   tileset.
runProgram :: Program a -> (a, [(Int, Int, Int)], Map Int Tile)

-- | Run the program, returning the produced tileset.
execProgram :: Program () -> ([(Int, Int, Int)], Map Int Tile)

-- | <tt>simulate file margin w h showGlues seeds tiles</tt> simulates the
--   given tileset, with seeds at the given positions <tt>(x,y,type)</tt>,
--   and returns the maximal manhattan distance reached. The
--   <tt>showGlues</tt> argument indicates whether glues should be written
--   in the output file (results in bigger files).
simulate :: Int -> Int -> [(Int, Int, Int)] -> [(Int, Int)] -> Map Int Tile -> IO (Int, Int, Int, Int, Map Position Int)

-- | Adds a new seed to the program, at the given position. There may be
--   several seeds, and they will all be placed before anything else is
--   grown.
seed :: Int -> Int -> Program ()

-- | Move by 1 tile along the x-axis
movex :: Int -> Program ()

-- | Move by 1 tile along the y-axis
movey :: Int -> Program ()

-- | Approximates a discrete vector, by walking as close as possible to the
--   corresponding straight line.
discreteVect :: Int -> Int -> Program ()

-- | Repeat a program a given number of times. If the original program
--   produces <tt>n</tt> tile types, then repeating it <tt>t</tt> times
--   produces <tt>mt</tt> tile types.
repete :: Int -> Program () -> Program ()

-- | Pump a given program, that is, allowing its first tile to attach to
--   its last tile. It is up to the user to check that this is possible;
--   the assembly is likely to stop else.
pump :: Program () -> Program ()
newtype Cur
Cur :: Int -> Cur

-- | Get the last tile placed (raises error if no tile has been placed).
currentTile :: Program Cur

-- | Get the tile immediately following a given tile in program order.
nextTile :: Cur -> Program Cur

-- | Get the tile immediately following a given tile in program order.
prevTile :: Cur -> Program Cur

-- | Directions, or sides of tiles
data Dir
N :: Dir
S :: Dir
O :: Dir
E :: Dir

-- | Binds the given tile to the given side of the current tile. This
--   function modifies the given tile if and only if the complementary side
--   was not used. This modification can result in unwanted assemblies.
bind :: Dir -> Cur -> Program ()

-- | Go back by the given amount of tile types.
rewindBy :: Int -> Program ()

-- | Go back to a specific tile.
rewindTo :: Cur -> Program ()

-- | Delete every tile produced after the given tile. Mostly useful in
--   combination with <a>currentTile</a>.
eraseAfter :: Cur -> Program ()

-- | Tile colors
type Color = (Double, Double, Double)

-- | Set the current color
setColor :: Color -> Program ()
red :: Color
green :: Color
blue :: Color
black :: Color
plot :: FilePath -> PlotOptions -> Map Int Tile -> Map Position Int -> IO ()
data PlotOptions
Plot :: Bool -> Bool -> Double -> Double -> String -> Double -> PlotOptions
showGlues :: PlotOptions -> Bool
showPaths :: PlotOptions -> Bool
offset :: PlotOptions -> Double
scale :: PlotOptions -> Double
font :: PlotOptions -> String
fontSize :: PlotOptions -> Double
defaultPlot :: PlotOptions
traceTile :: MonadState St m => Cur -> m ()
tikzPlot :: FilePath -> PlotOptions -> Map Int Tile -> Map Position Int -> IO ()
instance Eq Tile
instance Show Tile
