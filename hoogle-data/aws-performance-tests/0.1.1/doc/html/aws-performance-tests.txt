-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Performance Tests for the Haskell bindings for Amazon Web Services (AWS)
--   
--   Performance Tests for the Haskell bindings for <a>Amazon Web Services
--   (AWS)</a>.
--   
--   At the current stage this package only has tests for the DynamoDb
--   bindings.
--   
--   <i>IMPORTANT NOTE</i>
--   
--   By using the dynamo-performace application from this package with your
--   AWS API credentials costs will incure to your AWS account. Depending
--   on the provisioned test table read and write throughput these costs
--   can be in the order of several dollars per hour.
--   
--   Also be aware that there is an option to keep the table after the
--   tests are finished (for example for usage with successive test runs).
--   If you use that option you have to make sure that you delete the table
--   yourself when you don't need it any more.
@package aws-performance-tests
@version 0.1.1


-- | Utils for testing the Haskell bindings for Amazon Web Services (AWS)
module Aws.Test.Utils

-- | This prefix is used for the IDs and names of all entities that are
--   created in the AWS account.
testDataPrefix :: IsString a => a
sshow :: (Show a, IsString b) => a -> b

-- | Catches all exceptions except for asynchronous exceptions found in
--   base.
tryT :: MonadBaseControl IO m => m a -> EitherT Text m a
retryT :: MonadIO m => Int -> EitherT Text m a -> EitherT Text m a
retryT_ :: MonadIO m => Int -> EitherT Text m a -> EitherT Text m (Int, a)
testData :: (IsString a, Monoid a) => a -> a


-- | Utils for testing the Haskell bindings for Amazon DynamoDb
module Aws.Test.DynamoDb.Utils
testProtocol :: Protocol
testRegion :: Region
defaultTableName :: Text
dyConfiguration :: DdbConfiguration qt
simpleDy :: (AsMemoryResponse a, Transaction r a, ServiceConfiguration r ~ DdbConfiguration, MonadIO m) => r -> m (MemoryResponse a)
simpleDyT :: (AsMemoryResponse a, Transaction r a, ServiceConfiguration r ~ DdbConfiguration, MonadBaseControl IO m, MonadIO m) => r -> EitherT Text m (MemoryResponse a)
withTable :: Text -> Int -> Int -> (Text -> IO a) -> IO a
withTable_ :: Bool -> Text -> Int -> Int -> (Text -> IO a) -> IO a
createTestTable :: Text -> Int -> Int -> IO ()
readRegion :: Text -> Either String Region
