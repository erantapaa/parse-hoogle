-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Spelling suggestion tool with library and command-line interfaces.
--   
--   Given a possibly-misspelled word, this tool spits out one or more
--   properly-spelled words in order of likelihood of similarity.
--   
--   This functionality is exported as a library via Text.SpellingSuggest
--   (suggest) and as a command-line program <a>thimk</a> (an old joke)
--   
--   Running the program <a>thimk-makedb</a> is an optional (but highly
--   recommended) step to speed up lookups, permitting reasonable
--   performance on enormous dictionaries by creating a precompiled SQlite
--   database of phonetic codes for a dictionary.
@package spelling-suggest
@version 0.5.2.1


-- | Create and maintain a nonvolatile database of phonetic codes.
module Text.SpellingSuggest.PCDB

-- | Database connection.
data DBConnection

-- | File path for default cache database.
defaultDB :: IO String

-- | Create and populate the phonetic codes database, given a list of words
--   and a database path.
createDB :: [String] -> Maybe String -> IO DBConnection

-- | Open the phonetic codes database, given a database path.
openDB :: Maybe String -> IO (Maybe DBConnection)

-- | Return all the words in the given coding system matching the given
--   code.
matchDB :: DBConnection -> String -> String -> IO [String]
closeDB :: DBConnection -> IO ()


-- | Implementation-level interface for spelling suggestion.
module Text.SpellingSuggest.LowLevel
type SpellingWordFilter = String -> String -> Bool
type SpellingWordCoder = String -> String

-- | Return <a>True</a> if the <a>editDistance</a> from the target word to
--   the given word is small enough.
nearbyWordFilter :: String -> String -> Bool

-- | Always returns <a>True</a>.
anyWordFilter :: String -> String -> Bool

-- | The weighted edit distance between a pair of strings, with weights for
--   insertion, deletion, transposition and substitution chose to try to
--   mimic spelling errors.
editDistance :: String -> String -> Int

-- | Compute a <a>full</a> soundex code; i.e., do not drop any encodable
--   characters from the result. The leading character of the code will be
--   folded to uppercase. Non-alphabetics are not encoded. If no
--   alphabetics are present, the soundex code will be <a>0</a>.
--   
--   The two commonly encountered forms of soundex are Simplified and
--   another known as American, Miracode, NARA or Knuth. This code will
--   calculate either---passing True gets NARA, and False gets Simplified.
soundex :: Bool -> String -> String

-- | Compute a <a>full</a> phonix code; i.e., do not drop any encodable
--   characters from the result. The leading character of the code will be
--   folded to uppercase. Non-alphabetics are not encoded. If no
--   alphabetics are present, the phonix code will be <a>0</a>.
--   
--   There appear to be many, many variants of phonix implemented on the
--   web, and I'm too cheap and lazy to go find the original paper by Gadd
--   (1990) that actually describes the original algorithm. Thus, I am
--   taking some big guesses on intent here as I implement. Corrections,
--   especially those involving getting me a copy of the article, are
--   welcome.
--   
--   Dropping the <a>trailing sound</a> seems to be an integral part of
--   Gadd's technique, but I'm not sure how it is supposed to be done. I am
--   currently compressing runs of vowels, and then dropping the trailing
--   digit or vowel from the code.
--   
--   Another area of confusion is whether to compress strings of the same
--   code, as in Soundex, or merely strings of the same consonant. I have
--   chosen the former.
phonix :: String -> String

-- | Map any given word to a constant <a>phonetic code</a>. In other words,
--   suppress phonetic coding.
trivialPhoneticCode :: String -> String

-- | Core algorithm for spelling suggestion. Takes a prefiltering function,
--   a phonetic coding function, a limit on the number of choices returned,
--   a target word, and a list of candidate words. Returns an ordered list
--   of suggested candidates.
tryWord :: SpellingWordFilter -> SpellingWordCoder -> String -> [String] -> [String]


-- | Read a spelling dictionary.
module Text.SpellingSuggest.Dictionary

-- | File path for default dictionary.
defaultDictionary :: String

-- | Read the words out of the dictionary at the given path. XXX Will leak
--   a file handle until/unless it is finalized, since there's no
--   non-trivial way to arrange for the dictionary file to be closed
--   explicitly.
readDictionary :: Maybe String -> IO [String]


-- | Simplified interface for spelling suggestion.
module Text.SpellingSuggest

-- | We need to know the name and coding function of each phonetic coder.
data PhoneticCoder

-- | The spelling dictionary.
data SpellingDictionary
WordList :: [String] -> SpellingDictionary
FlatFile :: String -> SpellingDictionary

-- | Parameters controlling the suggestion search.
data SearchParams
SearchParams :: SpellingWordFilter -> PhoneticCoder -> Int -> SearchParams

-- | Prefilter to use to limit search.
searchParamsFilter :: SearchParams -> SpellingWordFilter

-- | Phonetic coder to use for matches.
searchParamsCoder :: SearchParams -> PhoneticCoder

-- | Maximum number of choices returned.
searchParamsChoices :: SearchParams -> Int

-- | These params work OK in practice.
defaultSearchParams :: SearchParams

-- | Return the coding system with the given name.
findPhoneticCoder :: String -> Maybe PhoneticCoder

-- | A default phonetic coder.
defaultPhoneticCoder :: PhoneticCoder

-- | A default word filter.
defaultWordFilter :: SpellingWordFilter

-- | For performance reasons, it may sometimes be desirable to know what's
--   sitting under the dictionary.
dictionaryIsDB :: SpellingDictionary -> Bool

-- | Make a connection to the given or default database. If this fails,
--   open the given or default dictionary and cache the words. XXX Will
--   leak a file handle if <a>readDictionary</a> does.
openDictionary :: Maybe String -> Maybe String -> IO SpellingDictionary
closeDictionary :: SpellingDictionary -> IO ()

-- | Suggest candidates in order using the given information. Requires a
--   valid spelling dictionary.
suggest :: SearchParams -> SpellingDictionary -> String -> IO [String]

-- | Suggest candidates from the given list in order using the given
--   information.
suggestFromList :: SearchParams -> [String] -> String -> [String]

-- | Return <a>True</a> if the <a>editDistance</a> from the target word to
--   the given word is small enough.
nearbyWordFilter :: String -> String -> Bool

-- | Always returns <a>True</a>.
anyWordFilter :: String -> String -> Bool

-- | File path for default cache database.
defaultDB :: IO String

-- | File path for default dictionary.
defaultDictionary :: String
