-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Guess at which language a text is written in using
trigrams.
--   
--   Guess at which language a text is written in using trigrams, based on
--   the PEAR module Text_LanguageDetect.
@package language-guess
@version 0.1.2


-- | Example usage:
--   
--   <pre>
--   &gt;&gt;&gt; dat &lt;- loadData'
--   
--   &gt;&gt;&gt; head $ guess dat "this is a teststring"
--   ("en",0.49421052631578954)
--   
--   &gt;&gt;&gt; take 2 $ guess dat "dette er en teststreng"
--   [("no",0.5703030303030303),("da",0.5096969696969698)]
--   
--   &gt;&gt;&gt; head $ guess dat "lorem ipsum dolor sit amet"
--   ("la",0.34199999999999997)
--   </pre>
module Language.Guess
type Trigram = (Char, Char, Char)
type Frequency = Int
type Rank = Int
type Language = String
threshold :: Int

-- | Load a cerealized file.
loadData :: FilePath -> IO (Map Language (Map Trigram Rank))

-- | Load the default cerealized file.
loadData' :: IO (Map Language (Map Trigram Rank))

-- | Guess the language of a string.
guess :: Map Language (Map Trigram Rank) -> String -> [(Language, Double)]

-- | Calculate distance between ranked trigram sets. Cavnar &amp; Trenkle
--   (1994)
distance :: Map Trigram Rank -> Map Trigram Rank -> Double

-- | Convert a set of trigram frequencies to ranks. Maximum of
--   <a>threshold</a>, uses alphabetical sort to break ties.
rank :: Map Trigram Frequency -> Map Trigram Rank

-- | Make a trigram frequency map out of a string.
parse :: String -> Map (Char, Char, Char) Frequency

-- | Clean a string, removing punctiation, lowering cases, and collapsing
--   adjacent spaces.
clean :: String -> String
