-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | High-level wrapper around the dwarf library
--   
@package dwarfadt
@version 0.4

module Data.Dwarf.ADT
data Warning
Warning :: DIE -> [(DW_AT, DW_ATVAL)] -> Warning
warningDieId :: Warning -> DIE
warningUnusedAttrs :: Warning -> [(DW_AT, DW_ATVAL)]
newtype Dwarf
Dwarf :: [Boxed CompilationUnit] -> Dwarf
dwarfCompilationUnits :: Dwarf -> [Boxed CompilationUnit]
fromDies :: DIEMap -> [DIE] -> (Dwarf, [Warning])
data Boxed a
Boxed :: DieID -> a -> Boxed a
bDieId :: Boxed a -> DieID
bData :: Boxed a -> a
data CompilationUnit
CompilationUnit :: String -> DW_LANG -> String -> String -> Word64 -> Maybe Word64 -> Maybe Word64 -> Word64 -> [Boxed Def] -> CompilationUnit
cuProducer :: CompilationUnit -> String
cuLanguage :: CompilationUnit -> DW_LANG
cuName :: CompilationUnit -> String
cuCompDir :: CompilationUnit -> String
cuLowPc :: CompilationUnit -> Word64
cuHighPc :: CompilationUnit -> Maybe Word64
cuMRanges :: CompilationUnit -> Maybe Word64
cuStmtList :: CompilationUnit -> Word64
cuDefs :: CompilationUnit -> [Boxed Def]
fromDie :: DIEMap -> DIE -> (Boxed CompilationUnit, [Warning])
data Decl
Decl :: Maybe Word64 -> Maybe Int -> Maybe Int -> Decl
declFile :: Decl -> Maybe Word64
declLine :: Decl -> Maybe Int
declColumn :: Decl -> Maybe Int
data Def
DefType :: DefType -> Def
DefSubprogram :: Subprogram -> Def
DefVariable :: (Variable String) -> Def
data DefType
DefBaseType :: BaseType -> DefType
DefTypedef :: Typedef -> DefType
DefPtrType :: PtrType -> DefType
DefConstType :: ConstType -> DefType
DefVolatileType :: VolatileType -> DefType
DefStructureType :: StructureType -> DefType
DefArrayType :: ArrayType -> DefType
DefUnionType :: UnionType -> DefType
DefEnumerationType :: EnumerationType -> DefType
DefSubroutineType :: SubroutineType -> DefType
data TypeRef
Void :: TypeRef
TypeRef :: (Boxed DefType) -> TypeRef
data BaseType
BaseType :: Word -> DW_ATE -> Maybe String -> BaseType
btByteSize :: BaseType -> Word
btEncoding :: BaseType -> DW_ATE
btName :: BaseType -> Maybe String
data Loc
LocOp :: DW_OP -> Loc
LocUINT :: Word64 -> Loc
data Typedef
Typedef :: String -> Decl -> TypeRef -> Typedef
tdName :: Typedef -> String
tdDecl :: Typedef -> Decl
tdType :: Typedef -> TypeRef
data PtrType
PtrType :: TypeRef -> Word -> PtrType
ptType :: PtrType -> TypeRef
ptByteSize :: PtrType -> Word
data ConstType
ConstType :: TypeRef -> ConstType
ctType :: ConstType -> TypeRef
data VolatileType
VolatileType :: TypeRef -> VolatileType
vtType :: VolatileType -> TypeRef
data FormalParameters
FormalParameters :: [Boxed FormalParameter] -> Bool -> FormalParameters
formalParameters :: FormalParameters -> [Boxed FormalParameter]
formalParametersHasUnspecified :: FormalParameters -> Bool
data MemberLocation
MemberLocationConstant :: Word64 -> MemberLocation
MemberLocationExpression :: DW_OP -> MemberLocation
data Member loc
Member :: Maybe String -> Decl -> loc -> TypeRef -> Maybe Word64 -> Maybe Word64 -> Maybe Word64 -> Member loc
membName :: Member loc -> Maybe String
membDecl :: Member loc -> Decl
membLoc :: Member loc -> loc
membType :: Member loc -> TypeRef
membByteSize :: Member loc -> Maybe Word64
membBitSize :: Member loc -> Maybe Word64
membBitOffset :: Member loc -> Maybe Word64
data StructureType
StructureType :: Maybe String -> Maybe Word -> Decl -> Bool -> [Boxed (Member MemberLocation)] -> StructureType
stName :: StructureType -> Maybe String
stByteSize :: StructureType -> Maybe Word
stDecl :: StructureType -> Decl
stIsDeclaration :: StructureType -> Bool
stMembers :: StructureType -> [Boxed (Member MemberLocation)]
data UnionType
UnionType :: Maybe String -> Word -> Decl -> [Boxed (Member (Maybe MemberLocation))] -> UnionType
unionName :: UnionType -> Maybe String
unionByteSize :: UnionType -> Word
unionDecl :: UnionType -> Decl
unionMembers :: UnionType -> [Boxed (Member (Maybe MemberLocation))]
data SubrangeType
SubrangeType :: Maybe Word -> TypeRef -> SubrangeType
subRangeUpperBound :: SubrangeType -> Maybe Word
subRangeType :: SubrangeType -> TypeRef
data ArrayType
ArrayType :: [Boxed SubrangeType] -> TypeRef -> ArrayType
atSubrangeType :: ArrayType -> [Boxed SubrangeType]
atType :: ArrayType -> TypeRef
data EnumerationType
EnumerationType :: Maybe String -> Decl -> Word -> [Boxed Enumerator] -> EnumerationType
enumName :: EnumerationType -> Maybe String
enumDecl :: EnumerationType -> Decl
enumByteSize :: EnumerationType -> Word
enumEnumerators :: EnumerationType -> [Boxed Enumerator]
data Enumerator
Enumerator :: String -> Int64 -> Enumerator
enumeratorName :: Enumerator -> String
enumeratorConstValue :: Enumerator -> Int64
data SubroutineType
SubroutineType :: Bool -> TypeRef -> FormalParameters -> SubroutineType
subrPrototyped :: SubroutineType -> Bool
subrRetType :: SubroutineType -> TypeRef
subrFormalParameters :: SubroutineType -> FormalParameters
data FormalParameter
FormalParameter :: Maybe String -> Decl -> Maybe Loc -> TypeRef -> Maybe Word64 -> FormalParameter
formalParamName :: FormalParameter -> Maybe String
formalParamDecl :: FormalParameter -> Decl
formalParamLocation :: FormalParameter -> Maybe Loc
formalParamType :: FormalParameter -> TypeRef
formalParamConstVal :: FormalParameter -> Maybe Word64
data InlineType
InlineType :: Bool -> Bool -> InlineType
inlineRequested :: InlineType -> Bool
inlineHappened :: InlineType -> Bool
data InlinedSubroutine
InlinedSubroutine :: Maybe Word64 -> Maybe Word64 -> Maybe Word64 -> Word64 -> Subprogram -> InlinedSubroutine
inlinedSubroutineCallFile :: InlinedSubroutine -> Maybe Word64
inlinedSubroutineCallLine :: InlinedSubroutine -> Maybe Word64
inlinedSubroutineRanges :: InlinedSubroutine -> Maybe Word64
inlinedSubroutineEntryPC :: InlinedSubroutine -> Word64
inlinedSubroutineSubprogram :: InlinedSubroutine -> Subprogram
data LexicalBlock
LexicalBlock :: Maybe Word64 -> Maybe Word64 -> Maybe Word64 -> Subprogram -> LexicalBlock
lexicalBlockRanges :: LexicalBlock -> Maybe Word64
lexicalBlockLowPC :: LexicalBlock -> Maybe Word64
lexicalBlockHighPC :: LexicalBlock -> Maybe Word64
lexicalBlockSubprogram :: LexicalBlock -> Subprogram
data SubprogramChild
SubprogramChildDef :: Def -> SubprogramChild
SubprogramChildLexicalBlock :: LexicalBlock -> SubprogramChild
SubprogramChildInlinedSubroutine :: InlinedSubroutine -> SubprogramChild
SubprogramChildLocalVariable :: (Variable (Maybe String)) -> SubprogramChild
SubprogramChildLabel :: SubprogramChild
SubprogramChildOther :: DW_TAG -> SubprogramChild
data Subprogram
Subprogram :: Maybe String -> TypeRef -> FormalParameters -> Decl -> Bool -> Bool -> Maybe Word64 -> Maybe Word64 -> Maybe Loc -> Maybe InlineType -> Bool -> Bool -> Maybe String -> [Boxed SubprogramChild] -> Subprogram
subprogName :: Subprogram -> Maybe String
subprogType :: Subprogram -> TypeRef
subprogFormalParameters :: Subprogram -> FormalParameters
subprogDecl :: Subprogram -> Decl
subprogPrototyped :: Subprogram -> Bool
subprogExternal :: Subprogram -> Bool
subprogLowPC :: Subprogram -> Maybe Word64
subprogHighPC :: Subprogram -> Maybe Word64
subprogFrameBase :: Subprogram -> Maybe Loc
subprogInline :: Subprogram -> Maybe InlineType
subprogDeclaration :: Subprogram -> Bool
subprogArtificial :: Subprogram -> Bool
subprogLinkageName :: Subprogram -> Maybe String
subprogChildren :: Subprogram -> [Boxed SubprogramChild]
subprogramDefs :: Subprogram -> [Boxed Def]
data Variable name
Variable :: name -> Decl -> Maybe Loc -> Bool -> Bool -> Bool -> TypeRef -> Maybe Word64 -> Variable name
varName :: Variable name -> name
varDecl :: Variable name -> Decl
varLoc :: Variable name -> Maybe Loc
varExternal :: Variable name -> Bool
varDeclaration :: Variable name -> Bool
varArtificial :: Variable name -> Bool
varType :: Variable name -> TypeRef
varConstVal :: Variable name -> Maybe Word64
instance Eq Loc
instance Ord Loc
instance Show Loc
instance Eq Decl
instance Ord Decl
instance Eq a => Eq (Boxed a)
instance Ord a => Ord (Boxed a)
instance Show a => Show (Boxed a)
instance Functor Boxed
instance Eq BaseType
instance Ord BaseType
instance Show BaseType
instance Eq MemberLocation
instance Ord MemberLocation
instance Show MemberLocation
instance Eq Enumerator
instance Ord Enumerator
instance Show Enumerator
instance Eq EnumerationType
instance Ord EnumerationType
instance Show EnumerationType
instance Eq InlineType
instance Ord InlineType
instance Show InlineType
instance Eq DefType
instance Ord DefType
instance Show DefType
instance Eq SubroutineType
instance Ord SubroutineType
instance Show SubroutineType
instance Eq FormalParameters
instance Ord FormalParameters
instance Show FormalParameters
instance Eq FormalParameter
instance Ord FormalParameter
instance Show FormalParameter
instance Eq TypeRef
instance Ord TypeRef
instance Eq UnionType
instance Ord UnionType
instance Show UnionType
instance Eq loc => Eq (Member loc)
instance Ord loc => Ord (Member loc)
instance Show loc => Show (Member loc)
instance Functor Member
instance Eq ArrayType
instance Ord ArrayType
instance Show ArrayType
instance Eq SubrangeType
instance Ord SubrangeType
instance Show SubrangeType
instance Eq StructureType
instance Ord StructureType
instance Show StructureType
instance Eq VolatileType
instance Ord VolatileType
instance Show VolatileType
instance Eq ConstType
instance Ord ConstType
instance Show ConstType
instance Eq PtrType
instance Ord PtrType
instance Eq Typedef
instance Ord Typedef
instance Eq name => Eq (Variable name)
instance Ord name => Ord (Variable name)
instance Show name => Show (Variable name)
instance Functor M
instance Applicative M
instance Monad M
instance MonadFix M
instance Eq Def
instance Ord Def
instance Show Def
instance Eq Subprogram
instance Ord Subprogram
instance Show Subprogram
instance Eq SubprogramChild
instance Ord SubprogramChild
instance Show SubprogramChild
instance Eq LexicalBlock
instance Ord LexicalBlock
instance Show LexicalBlock
instance Eq InlinedSubroutine
instance Ord InlinedSubroutine
instance Show InlinedSubroutine
instance Show CompilationUnit
instance Show PtrType
instance Show Typedef
instance Show Decl
instance Show TypeRef
instance Show Warning

module Data.Dwarf.ADT.Pretty
compilationUnit :: Boxed CompilationUnit -> Doc
dwarf :: Dwarf -> Doc

module Data.Dwarf.Elf
loadElfDwarf :: Endianess -> FilePath -> IO (Elf, ([DIE], DIEMap))
elfSectionByName :: Elf -> String -> Either String ByteString
parseElfDwarfADT :: Endianess -> FilePath -> IO (Dwarf, [Warning])
