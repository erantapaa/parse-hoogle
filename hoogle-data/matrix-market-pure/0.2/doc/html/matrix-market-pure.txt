-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pure and composable reader and writer of the Matrix Market format.
--   
--   Pure and composable reader and writer of the Matrix Market format.
@package matrix-market-pure
@version 0.2


-- | Pure and composable Matrix Market reader and writer.
--   
--   Usage example:
--   
--   <pre>
--   rm &lt;- <a>readMM</a> `liftM` readFile "my-real-matrix.mtx" :: IO (<a>ReadMatrix</a> Double)
--   case rm of
--     Right m -&gt; -- Do something with the matrix m
--     Left err -&gt; -- Report error
--   </pre>
module Data.MatrixMarket

-- | Matrix Market format representation.
data MValue a => Matrix a
MM :: MatrixData a -> MField -> Symmetry -> [String] -> Matrix a
mm'data :: Matrix a -> MatrixData a
mm'field :: Matrix a -> MField
mm'symmetry :: Matrix a -> Symmetry
mm'comments :: Matrix a -> [String]

-- | Matrix' data block.
data MValue a => MatrixData a
CoordinateM :: CM a -> MatrixData a
coords'm :: MatrixData a -> CM a
ArrayM :: AM a -> MatrixData a
array'm :: MatrixData a -> AM a

-- | Values allowed in the Matrix Market files.
class (Num a, Show a) => MValue a
typename :: MValue a => a -> String
readval :: MValue a => [String] -> Maybe a
showval :: MValue a => a -> String
conj :: MValue a => a -> a

-- | Field of the matrix.
data MField
MInt :: MField
MReal :: MField
MComplex :: MField
MPattern :: MField

-- | Symmetry class of the matrix.
data Symmetry
General :: Symmetry
Symmetric :: Symmetry
SkewSymmetric :: Symmetry
Hermitian :: Symmetry

-- | Coordinate format (sparse matrix).
data MValue a => CM a
CM :: Int -> Int -> Int -> [((Int, Int), a)] -> CM a
cm'rows :: CM a -> Int
cm'cols :: CM a -> Int
cm'size :: CM a -> Int
cm'values :: CM a -> [((Int, Int), a)]

-- | Array format (dense matrix).
data MValue a => AM a
AM :: Int -> Int -> [a] -> AM a
am'rows :: AM a -> Int
am'cols :: AM a -> Int
am'values :: AM a -> [a]

-- | Parsing errors.
data ReadError
NotAMatrixMarketFormat :: ReadError
InvalidHeader :: String -> ReadError
UnknownFormat :: String -> ReadError
UnexpectedField :: String -> ReadError
UnknownSymmetry :: String -> ReadError
NoParse :: ReadError

-- | Use this type synonym to specify the type of <a>readMM</a> when
--   calling.
type ReadMatrix a = Either ReadError (Matrix a)

-- | Parse Matrix Market format.
readMM :: MValue a => String -> ReadMatrix a

-- | Write Matrix Market format.
dumpMM :: MValue a => Matrix a -> String

-- | Number of rows in the matrix.
mm'rows :: MValue a => Matrix a -> Int

-- | Number of columns in the matrix.
mm'cols :: MValue a => Matrix a -> Int

-- | Dimensions of the matrix: (number of rows, number of columns).
mm'shape :: MValue a => Matrix a -> (Int, Int)

-- | Construct a list of non-zero entries (without symmetric entries).
toList :: MValue a => Matrix a -> [((Int, Int), a)]

-- | Construct a list of all non-zero entries (including symmetric
--   entries).
toCompleteList :: MValue a => Matrix a -> [((Int, Int), a)]

-- | Convert to an immutable dense array.
toArray :: (IArray arr a, MValue a) => Int -> Matrix a -> arr (Int, Int) a

-- | Convert to a mutable dense array.
toArrayM :: (MArray arr a m, MValue a) => Int -> Matrix a -> m (arr (Int, Int) a)

-- | Get an element of the matrix at the specified position. Warning: This
--   operation is slow, use <a>toArray</a> or <a>toArrayM</a> to convert to
--   an array first.
at :: MValue a => Matrix a -> (Int, Int) -> a

-- | Complex numbers are an algebraic type.
--   
--   For a complex number <tt>z</tt>, <tt><a>abs</a> z</tt> is a number
--   with the magnitude of <tt>z</tt>, but oriented in the positive real
--   direction, whereas <tt><a>signum</a> z</tt> has the phase of
--   <tt>z</tt>, but unit magnitude.
data RealFloat a => Complex a :: * -> *

-- | forms a complex number from its real and imaginary rectangular
--   components.
(:+) :: !a -> !a -> Complex a
instance Show ReadError
instance Eq ReadError
instance Show Symmetry
instance Eq Symmetry
instance Show MField
instance Eq MField
instance MValue a => Show (AM a)
instance MValue a => Eq (AM a)
instance MValue a => Show (CM a)
instance MValue a => Eq (CM a)
instance MValue a => Show (MatrixData a)
instance MValue a => Eq (MatrixData a)
instance MValue a => Show (Matrix a)
instance MValue a => Eq (Matrix a)
instance MValue (Complex Double)
instance MValue Double
instance MValue Int
