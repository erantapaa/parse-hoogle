-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Real-time heap graphing utility and profile stream server with a reusable graphing module.
--   
--   This package contains two utilities: a grapher that can display heap
--   profiles in real time both for local and remote processes, and a relay
--   application the grapher connects to in the latter case. Additionally,
--   the graphing capability is exposed to other programs as well in the
--   form of a library module.
--   
--   To avoid the need for OpenGL on the server side, the package can be
--   built with the <tt>ServerOnly</tt> flag:
--   
--   <pre>
--   cabal install --flags=serveronly
--   </pre>
@package hp2any-graph
@version 0.5.4.2


-- | This module provides some half-ready solutions to visualise heap
--   profiles both during and after execution with the help of OpenGL. All
--   the rendering functions will fill the viewport if the model view
--   matrix is the identity (they also change the matrix), assuming the
--   projection matrix is the following:
--   
--   <pre>
--   matrixMode $= Projection
--   loadIdentity
--   translate $ Vector3 (-1) (-1) 0
--   scale 2 2 1
--   </pre>
--   
--   In other words, these functions fill the unit square at the origin.
module Profiling.Heap.OpenGL

-- | A list of highly different colours, where the differences diminish as
--   we advance in the list. The first element is black, and there is no
--   white.
colours :: [Color3 GLubyte]

-- | The colour of the background (white). It is not a member of
--   <a>colours</a>.
backgroundColour :: Color3 GLubyte

-- | The colour used for unimportant cost centres (black). It is the first
--   element of <a>colours</a>.
otherColour :: Color3 GLubyte

-- | Two heap profile samples which contain the exact same cost centres in
--   the exact same order.
data SamplePair
SP :: !Time -> !Time -> !ProfileSample -> !ProfileSample -> SamplePair
spTime1 :: SamplePair -> !Time
spTime2 :: SamplePair -> !Time
spData1 :: SamplePair -> !ProfileSample
spData2 :: SamplePair -> !ProfileSample

-- | Create a list of sample pairs where each cost centre is paired up with
--   the consecutive one, so it is easier to render them. Cost centres with
--   small costs (below <a>costLimit</a>) are lumped together under
--   identifier 0, reserved for "Other".
prepareSamples :: ProfileQuery p => p -> [SamplePair]

-- | Render a given list of prepared samples in the given mode. The third
--   argument is the maximum time of the graph, which affects horizontal
--   scaling.
renderSamples :: GraphMode -> [SamplePair] -> Time -> IO ()

-- | Integrating a new sample into the list of merged sample pairs we have
--   so far. The input list should start with the latest sample, and the
--   new sample pair will be the head of the result.
addSample :: [SamplePair] -> (Time, ProfileSample) -> [SamplePair]

-- | An optimised graph rendering designed to be easily updated when a new
--   sample arrives.
data GraphData

-- | The names of cost centres in a graph rendering.
graphNames :: GraphData -> IntMap String

-- | An empty rendering.
emptyGraph :: GraphData

-- | Integrate a new sample in an extensible graph.
growGraph :: GraphData -> SinkInput -> IO GraphData

-- | Render a stream in the given graph mode.
renderGraph :: GraphMode -> GraphData -> IO ()

-- | The possible ways of displaying heap profiles.
data GraphMode

-- | Cost centres are stacked on top of each other without overlapping.
Accumulated :: GraphMode

-- | Each cost centre yields a separate line graph on the same scale.
Separate :: GraphMode

-- | A cyclic successor function for graph modes.
nextGraphMode :: GraphMode -> GraphMode
instance Show SamplePair
instance Eq GraphMode
