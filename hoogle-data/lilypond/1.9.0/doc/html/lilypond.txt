-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to Lilypond
--   
@package lilypond
@version 1.9.0


module Data.Music.Lilypond.Value

-- | Value of a <tt>\set</tt> command. These are simply wrappers for
--   showable things.
--   
--   For example use (with <tt>OverloadedStrings</tt>)
--   
--   <pre>
--   Set "Staff.instrumentName" "Violin I"
--   Set "Staff.instrumentName" 2
--   </pre>
--   
--   to generate
--   
--   <pre>
--   \set Staff.instrumentName = "Violin I"
--   \set Staff.instrumentName = 2
--   </pre>
data Value
toValue :: Show a => a -> Value

-- | As <a>toValue</a>, but not quoting strings. Handy for scheme literals
--   such as <tt>#red</tt>.
toLiteralValue :: String -> Value
instance Pretty Value
instance Eq Value
instance Show Value
instance Fractional Value
instance Num Value
instance IsString Value


module Data.Music.Lilypond.Dynamics
data Dynamics
PPPPP :: Dynamics
PPPP :: Dynamics
PPP :: Dynamics
PP :: Dynamics
P :: Dynamics
MP :: Dynamics
MF :: Dynamics
F :: Dynamics
FF :: Dynamics
FFF :: Dynamics
FFFF :: Dynamics
SF :: Dynamics
SFF :: Dynamics
SP :: Dynamics
SPP :: Dynamics
SFZ :: Dynamics
RFZ :: Dynamics
instance Eq Dynamics
instance Ord Dynamics
instance Show Dynamics
instance Enum Dynamics
instance Bounded Dynamics
instance IsDynamics Dynamics
instance Pretty Dynamics


module Data.Music.Lilypond.Pitch
newtype Pitch
Pitch :: (PitchName, Accidental, Octaves) -> Pitch
getPitch :: Pitch -> (PitchName, Accidental, Octaves)
data PitchName
C :: PitchName
D :: PitchName
E :: PitchName
F :: PitchName
G :: PitchName
A :: PitchName
B :: PitchName

-- | For double flat -2, flat -1, natural 0, sharp 1 and double sharp 2.
type Accidental = Int

-- | Number of octaves raised (positive) or flattened (negative).
type Octaves = Int

-- | Mode (for key signatures).
data Mode
Major :: Mode
Minor :: Mode
data OctaveCheck
OctaveCheck :: OctaveCheck
instance Eq PitchName
instance Ord PitchName
instance Show PitchName
instance Enum PitchName
instance Eq Pitch
instance Ord Pitch
instance Show Pitch
instance Eq Mode
instance Show Mode
instance Eq OctaveCheck
instance Show OctaveCheck
instance Pretty Mode
instance IsPitch Pitch
instance Pretty Pitch


module Data.Music.Lilypond

-- | A Lilypond music expression.
--   
--   Use the <a>Pretty</a> instance to convert into Lilypond syntax.
data Music

-- | Single rest.
Rest :: (Maybe Duration) -> [PostEvent] -> Music

-- | Single note.
Note :: Note -> (Maybe Duration) -> [PostEvent] -> Music

-- | Single chord.
Chord :: [(Note, [ChordPostEvent])] -> (Maybe Duration) -> [PostEvent] -> Music

-- | Sequential composition.
Sequential :: [Music] -> Music

-- | Parallel composition (split voices?).
Simultaneous :: Bool -> [Music] -> Music

-- | Repetition (unfold?, times, music, alternative).
Repeat :: Bool -> Int -> Music -> (Maybe (Music, Music)) -> Music

-- | Tremolo (multiplier).
Tremolo :: Int -> Music -> Music

-- | Stretch music (multiplier).
Times :: Rational -> Music -> Music

-- | Transpose music (from to).
Transpose :: Pitch -> Pitch -> Music -> Music

-- | Use relative octave (octave).
Relative :: Pitch -> Music -> Music

-- | Clef.
Clef :: Clef -> Music

-- | Key signature.
Key :: Pitch -> Mode -> Music

-- | Time signature.
Time :: Integer -> Integer -> Music

-- | Breath mark (caesura)
Breathe :: (Maybe BreathingSign) -> Music

-- | Tempo mark.
Tempo :: (Maybe String) -> (Maybe (Duration, Integer)) -> Music

-- | New expression.
New :: String -> (Maybe String) -> Music -> Music

-- | Context expression.
Context :: String -> (Maybe String) -> Music -> Music
Set :: String -> Value -> Music
Override :: String -> Value -> Music
Revert :: String -> Music
data Note
NotePitch :: Pitch -> (Maybe OctaveCheck) -> Note
DrumNotePitch :: (Maybe Duration) -> Note
data Clef
Treble :: Clef
Alto :: Clef
Tenor :: Clef
Bass :: Clef
French :: Clef
Soprano :: Clef
MezzoSoprano :: Clef
Baritone :: Clef
VarBaritone :: Clef
SubBass :: Clef
Percussion :: Clef
Tab :: Clef

-- | Mode (for key signatures).
data Mode
Major :: Mode
Minor :: Mode

-- | Value of a <tt>\set</tt> command. These are simply wrappers for
--   showable things.
--   
--   For example use (with <tt>OverloadedStrings</tt>)
--   
--   <pre>
--   Set "Staff.instrumentName" "Violin I"
--   Set "Staff.instrumentName" 2
--   </pre>
--   
--   to generate
--   
--   <pre>
--   \set Staff.instrumentName = "Violin I"
--   \set Staff.instrumentName = 2
--   </pre>
data Value
toValue :: Show a => a -> Value

-- | As <a>toValue</a>, but not quoting strings. Handy for scheme literals
--   such as <tt>#red</tt>.
toLiteralValue :: String -> Value
data PostEvent
Articulation :: Direction -> Articulation -> PostEvent
Dynamics :: Direction -> Dynamics -> PostEvent
Tie :: PostEvent
Glissando :: PostEvent
BeginBeam :: PostEvent
EndBeam :: PostEvent
BeginSlur :: PostEvent
EndSlur :: PostEvent
BeginPhraseSlur :: PostEvent
EndPhraseSlur :: PostEvent
BeginCresc :: PostEvent
BeginDim :: PostEvent
EndCrescDim :: PostEvent
Text :: Direction -> String -> PostEvent
Markup :: Direction -> Markup -> PostEvent
data ChordPostEvent
Harmonic :: ChordPostEvent

-- | Articulations. These include ornaments.
data Articulation
Accent :: Articulation
Marcato :: Articulation
Staccatissimo :: Articulation
Espressivo :: Articulation
Staccato :: Articulation
Tenuto :: Articulation
Portato :: Articulation
Upbow :: Articulation
Downbow :: Articulation
Flageolet :: Articulation
Thumb :: Articulation
LeftHeel :: Articulation
RightHeel :: Articulation
LeftToe :: Articulation
RightToe :: Articulation
Open :: Articulation
Stopped :: Articulation
Turn :: Articulation
ReverseTurn :: Articulation
Trill :: Articulation
Prall :: Articulation
Mordent :: Articulation
PrallPrall :: Articulation
PrallMordent :: Articulation
UpPrall :: Articulation
DownPrall :: Articulation
UpMordent :: Articulation
DownMordent :: Articulation
PrallDown :: Articulation
PrallUp :: Articulation
LinePrall :: Articulation
SignumCongruentiae :: Articulation
ShortFermata :: Articulation
Fermata :: Articulation
LongFermata :: Articulation
VeryLongFermata :: Articulation
Segno :: Articulation
Coda :: Articulation
VarCoda :: Articulation
data Markup
MarkupText :: String -> Markup
MarkupList :: [Markup] -> Markup
Bold :: Markup -> Markup
Box :: Markup -> Markup
Caps :: Markup -> Markup
DynamicsFont :: Markup -> Markup
FingeringFont :: Markup -> Markup
Fontsize :: Double -> Markup -> Markup
Huge :: Markup -> Markup
Italic :: Markup -> Markup
Large :: Markup -> Markup
Larger :: Markup -> Markup
Magnify :: Markup -> Markup
Medium :: Markup -> Markup
Roman :: Markup -> Markup
Sans :: Markup -> Markup
Sub :: Markup -> Markup
Super :: Markup -> Markup
TextFont :: Markup -> Markup
Tiny :: Markup -> Markup
TypewriterFont :: Markup -> Markup
Upright :: Markup -> Markup
class HasMarkup a
markup :: HasMarkup a => a -> Markup
data Direction
Above :: Direction
Default :: Direction
Below :: Direction
data OctaveCheck
OctaveCheck :: OctaveCheck
data BreathingSign
RightVarComma :: BreathingSign
StraightCaesura :: BreathingSign
CurvedCaesura :: BreathingSign

-- | Notated time in fractions, in <tt>[2^^i | i &lt;- [-10..3]]</tt>.
newtype Duration
Duration :: Rational -> Duration
getDuration :: Duration -> Rational
newtype Pitch
Pitch :: (PitchName, Accidental, Octaves) -> Pitch
getPitch :: Pitch -> (PitchName, Accidental, Octaves)
data PitchName
C :: PitchName
D :: PitchName
E :: PitchName
F :: PitchName
G :: PitchName
A :: PitchName
B :: PitchName

-- | For double flat -2, flat -1, natural 0, sharp 1 and double sharp 2.
type Accidental = Int

-- | Number of octaves raised (positive) or flattened (negative).
type Octaves = Int

-- | Construct a rest of default duration <tt>1/4</tt>.
--   
--   Use the <a>VectorSpace</a> methods to change duration.
rest :: Music

-- | Construct a note of default duration <tt>1/4</tt>.
--   
--   Use the <a>VectorSpace</a> methods to change duration.
note :: Note -> Music

-- | Construct a chord of default duration <tt>1/4</tt>.
--   
--   Use the <a>VectorSpace</a> methods to change duration.
chord :: [Note] -> Music
chordHarm :: [(Note, Bool)] -> Music
chordWithPost :: [(Note, [ChordPostEvent])] -> Music
sequential :: Music -> Music -> Music
simultaneous :: Music -> Music -> Music
addPost :: PostEvent -> Music -> Music
addText :: String -> Music -> Music
addMarkup :: HasMarkup a => a -> Music -> Music
addDynamics :: Dynamics -> Music -> Music
addArticulation :: Articulation -> Music -> Music
addText' :: Direction -> String -> Music -> Music
addMarkup' :: HasMarkup a => Direction -> a -> Music -> Music
addDynamics' :: Direction -> Dynamics -> Music -> Music
addArticulation' :: Direction -> Articulation -> Music -> Music
beginTie :: Music -> Music
beginGlissando :: Music -> Music
beginBeam :: Music -> Music
endBeam :: Music -> Music
beginSlur :: Music -> Music
endSlur :: Music -> Music
beginPhraseSlur :: Music -> Music
endPhraseSlur :: Music -> Music
beginCresc :: Music -> Music
endCresc :: Music -> Music
beginDim :: Music -> Music
endDim :: Music -> Music
addAccent :: Music -> Music
addMarcato :: Music -> Music
addStaccatissimo :: Music -> Music
addEspressivo :: Music -> Music
addStaccato :: Music -> Music
addTenuto :: Music -> Music
addPortato :: Music -> Music
addUpbow :: Music -> Music
addDownbow :: Music -> Music
addFlageolet :: Music -> Music
addThumb :: Music -> Music
addLeftHeel :: Music -> Music
addRightHeel :: Music -> Music
addLeftToe :: Music -> Music
addRightToe :: Music -> Music
addOpen :: Music -> Music
addStopped :: Music -> Music
addTurn :: Music -> Music
addReverseTurn :: Music -> Music
addTrill :: Music -> Music
addPrall :: Music -> Music
addMordent :: Music -> Music
addPrallPrall :: Music -> Music
addPrallMordent :: Music -> Music
addUpPrall :: Music -> Music
addDownPrall :: Music -> Music
addUpMordent :: Music -> Music
addDownMordent :: Music -> Music
addPrallDown :: Music -> Music
addPrallUp :: Music -> Music
addLinePrall :: Music -> Music
addSignumCongruentiae :: Music -> Music
addShortFermata :: Music -> Music
addFermata :: Music -> Music
addLongFermata :: Music -> Music
addVeryLongFermata :: Music -> Music
addSegno :: Music -> Music
addCoda :: Music -> Music
addVarCoda :: Music -> Music
foldMusic :: (Music -> Music) -> Music -> Music
removeSingleChords :: Music -> Music
instance Show Duration
instance RealFrac Duration
instance Real Duration
instance Fractional Duration
instance Enum Duration
instance Num Duration
instance Ord Duration
instance Eq Duration
instance Eq Clef
instance Show Clef
instance Eq BreathingSign
instance Show BreathingSign
instance Eq ChordPostEvent
instance Show ChordPostEvent
instance Eq Markup
instance Show Markup
instance Eq Articulation
instance Show Articulation
instance Eq Direction
instance Ord Direction
instance Show Direction
instance Eq PostEvent
instance Show PostEvent
instance Eq Note
instance Show Note
instance Eq Music
instance Show Music
instance Pretty Duration
instance Pretty Direction
instance Default Direction
instance Pretty Articulation
instance Pretty Markup
instance IsString Markup
instance HasMarkup a => HasMarkup [a]
instance HasMarkup Markup
instance Pretty PostEvent
instance Pretty ChordPostEvent
instance Pretty Clef
instance IsPitch Note
instance Pretty Note
instance VectorSpace Music
instance AdditiveGroup Music
instance IsPitch Music
instance Pretty Music


module Data.Music.Lilypond.IO
writeMusic :: FilePath -> Music -> IO ()
data Format
PDF :: Format
PNG :: Format
PS :: Format
data EngraveOptions
EngraveOptions :: Format -> FilePath -> FilePath -> FilePath -> Int -> EngraveOptions
format :: EngraveOptions -> Format
include :: EngraveOptions -> FilePath
initFile :: EngraveOptions -> FilePath
logFile :: EngraveOptions -> FilePath
logLevel :: EngraveOptions -> Int
writeAndEngraveMusic :: FilePath -> EngraveOptions -> Music -> IO ()
