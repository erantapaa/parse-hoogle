-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Elsen Accelerated Computing Engine
--   
@package pgstream
@version 0.1.0.3

module Paths_pgstream
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath
getSysconfDir :: IO FilePath

module Database.PostgreSQL.Stream.Connection
data PoolSettings
PoolSettings :: Int -> NominalDiffTime -> Int -> PoolSettings

-- | Stripe count. The number of distinct sub-pools to maintain. The
--   smallest acceptable value is 1.
_stripes :: PoolSettings -> Int

-- | Amount of time for which an unused resource is kept open. The smallest
--   acceptable value is 0.5 seconds.
_keepalive :: PoolSettings -> NominalDiffTime

-- | Maximum number of resources to keep open per stripe. The smallest
--   acceptable value is 1.
_affinity :: PoolSettings -> Int
data ConnSettings
ConnSettings :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> ConnSettings
_host :: ConnSettings -> ByteString
_dbname :: ConnSettings -> ByteString
_user :: ConnSettings -> ByteString
_password :: ConnSettings -> Maybe ByteString
defaultPoolSettings :: PoolSettings
pgPool :: Connection -> IO (Pool Connection)
pgPoolSettings :: PoolSettings -> Connection -> IO (Pool Connection)
withPgConnection :: Connection -> (Connection -> IO b) -> IO b
connect :: ConnSettings -> IO (Either ConnStatus Connection)
connect_alt :: ByteString -> IO (Either ConnStatus Connection)
instance Eq PoolSettings
instance Ord PoolSettings
instance Show PoolSettings
instance Eq ConnSettings
instance Ord ConnSettings
instance Show ConnSettings
instance Read ConnSettings

module Database.PostgreSQL.Stream.Parallel
parallelStream :: Connection -> (Connection -> Source (ResourceT IO) a) -> Sink a (ResourceT IO) () -> IO ()

module Database.PostgreSQL.Stream.Types

-- | Literal SQL identifier (i.e. table field names), spliced into the SQL
--   query unquoted.
newtype Identifier
Identifier :: ByteString -> Identifier
unIdentifier :: Identifier -> ByteString

-- | Literal SQL logic spliced in as a subexpression
newtype SQL
SQLExpr :: ByteString -> SQL
unSQL :: SQL -> ByteString

-- | Newtype for a singular result set or argument value.
newtype Only a
Only :: a -> Only a
unOnly :: Only a -> a

-- | SQL Null type
data Null
Null :: Null

-- | SQL Query subexpression
data Action
Plain :: ByteString -> Action
Escape :: ByteString -> Action
EscapeIdentifier :: ByteString -> Action

-- | SQL Query
newtype Query
Query :: ByteString -> Query
fromQuery :: Query -> ByteString
data QueryError
QueryError :: String -> Query -> QueryError
qeMessage :: QueryError -> String
qeQuery :: QueryError -> Query
data ConversionError

-- | Bytestring is malformed
ConversionError :: String -> ConversionError
ceMessage :: ConversionError -> String

-- | Unexpected null value
UnexpectedNull :: String -> ConversionError
ceMessage :: ConversionError -> String

-- | Type is incompatible with data
Incompatible :: String -> ConversionError
ceMessage :: ConversionError -> String
instance Typeable Only
instance Typeable Action
instance Typeable Query
instance Typeable QueryError
instance Typeable ConversionError
instance Eq SQL
instance Ord SQL
instance Show SQL
instance IsString SQL
instance Monoid SQL
instance Eq a => Eq (Only a)
instance Ord a => Ord (Only a)
instance Read a => Read (Only a)
instance Show a => Show (Only a)
instance Functor Only
instance Eq Identifier
instance Ord Identifier
instance Show Identifier
instance IsString Identifier
instance Monoid Identifier
instance Eq Action
instance Show Action
instance Eq Query
instance Ord Query
instance Eq QueryError
instance Show QueryError
instance Eq ConversionError
instance Show ConversionError
instance Exception ConversionError
instance Exception QueryError
instance Monoid Query
instance IsString Query
instance Show Query

module Database.PostgreSQL.Stream.FromRow
class FromRow a
fromRow :: FromRow a => RowParser a
class FromField a
fromField :: FromField a => (Oid, Int, Maybe ByteString) -> a
data Row
Row :: {-# UNPACK #-} !Row -> !Result -> Row
row :: Row -> {-# UNPACK #-} !Row
rowresult :: Row -> !Result

-- | Result set field
field :: FromField a => RowParser a
runRowParser :: RowParser a -> Row -> a
parseRows :: FromRow r => Query -> Result -> IO [r]
instance Functor RowParser
instance Applicative RowParser
instance Monad RowParser
instance FromField (Vector Float)
instance FromField (Vector Int32)
instance FromField a => FromField (Maybe a)
instance FromField (Fixed E2)
instance FromField (Fixed E3)
instance FromField LocalTime
instance FromField DiffTime
instance FromField NominalDiffTime
instance FromField UTCTime
instance FromField (TimeOfDay, TimeZone)
instance FromField TimeOfDay
instance FromField Day
instance FromField Bool
instance FromField ByteString
instance FromField ByteString
instance FromField Text
instance FromField Text
instance FromField Char
instance FromField UUID
instance FromField Scientific
instance FromField Integer
instance FromField Double
instance FromField Float
instance FromField Int
instance FromField Int64
instance FromField Int32
instance FromField Int16
instance FromField Int8
instance (FromField a, FromField b, FromField c, FromField d, FromField e, FromField f, FromField g) => FromRow (a, b, c, d, e, f, g)
instance (FromField a, FromField b, FromField c, FromField d, FromField e, FromField f) => FromRow (a, b, c, d, e, f)
instance (FromField a, FromField b, FromField c, FromField d, FromField e) => FromRow (a, b, c, d, e)
instance (FromField a, FromField b, FromField c, FromField d) => FromRow (a, b, c, d)
instance (FromField a, FromField b, FromField c) => FromRow (a, b, c)
instance (FromField a, FromField b) => FromRow (a, b)
instance FromField a => FromRow (Only a)

module Database.PostgreSQL.Stream.QueryBuilder
sql :: QuasiQuoter
fmtQuery :: ToSQL a => Query -> a -> ByteString
fmtSQL :: ToSQL a => Query -> a -> SQL
class ToSQL a
toSQL :: ToSQL a => a -> (ByteString -> ByteString)
class ToField a
toField :: ToField a => a -> Action
instance (ToField a, ToField b, ToField c, ToField d, ToField e, ToField f, ToField g, ToField h, ToField i) => ToSQL (a, b, c, d, e, f, g, h, i)
instance (ToField a, ToField b, ToField c, ToField d, ToField e, ToField f, ToField g, ToField h) => ToSQL (a, b, c, d, e, f, g, h)
instance (ToField a, ToField b, ToField c, ToField d, ToField e, ToField f, ToField g) => ToSQL (a, b, c, d, e, f, g)
instance (ToField a, ToField b, ToField c, ToField d, ToField e, ToField f) => ToSQL (a, b, c, d, e, f)
instance (ToField a, ToField b, ToField c, ToField d, ToField e) => ToSQL (a, b, c, d, e)
instance (ToField a, ToField b, ToField c, ToField d) => ToSQL (a, b, c, d)
instance (ToField a, ToField b, ToField c) => ToSQL (a, b, c)
instance (ToField a, ToField b) => ToSQL (a, b)
instance ToField a => ToSQL (Maybe a)
instance ToField a => ToSQL [a]
instance ToField a => ToSQL (Only a)
instance ToSQL ()
instance ToField Action
instance ToField Bool
instance ToField a => ToField (Maybe a)
instance ToField a => ToField (Only a)
instance ToField Null
instance ToField UUID
instance ToField Query
instance ToField SQL
instance ToField Identifier
instance ToField Text
instance ToField String
instance ToField Char
instance ToField Integer
instance ToField ByteString
instance ToField Double
instance ToField Float
instance ToField Int32
instance ToField Int

module Database.PostgreSQL.Stream
query :: (FromRow r, ToSQL q) => Connection -> Query -> q -> IO [r]
query_ :: FromRow r => Connection -> Query -> IO [r]
execute :: ToSQL q => Connection -> Query -> q -> IO ExecStatus
execute_ :: Connection -> Query -> IO ExecStatus
stream :: (FromRow r, ToSQL a, MonadBaseControl IO m, MonadIO m) => Connection -> Query -> a -> Int -> Source m [r]
stream_ :: (FromRow r, MonadBaseControl IO m, MonadIO m) => Connection -> Query -> Int -> Source m [r]

-- | Commit a transaction.
commit :: Connection -> IO ()

-- | Rollback a transaction.
rollback :: Connection -> IO ()
data PoolSettings
PoolSettings :: Int -> NominalDiffTime -> Int -> PoolSettings

-- | Stripe count. The number of distinct sub-pools to maintain. The
--   smallest acceptable value is 1.
_stripes :: PoolSettings -> Int

-- | Amount of time for which an unused resource is kept open. The smallest
--   acceptable value is 0.5 seconds.
_keepalive :: PoolSettings -> NominalDiffTime

-- | Maximum number of resources to keep open per stripe. The smallest
--   acceptable value is 1.
_affinity :: PoolSettings -> Int
pgPool :: Connection -> IO (Pool Connection)
withPgConnection :: Connection -> (Connection -> IO b) -> IO b

-- | <a>Connection</a> encapsulates a connection to the backend.
data Connection :: *
data ExecStatus :: *

-- | The string sent to the server was empty.
EmptyQuery :: ExecStatus

-- | Successful completion of a command returning no data.
CommandOk :: ExecStatus

-- | Successful completion of a command returning data (such as a SELECT or
--   SHOW).
TuplesOk :: ExecStatus

-- | Copy Out (from server) data transfer started.
CopyOut :: ExecStatus

-- | Copy In (to server) data transfer started.
CopyIn :: ExecStatus

-- | The server's response was not understood.
BadResponse :: ExecStatus

-- | A nonfatal error (a notice or warning) occurred.
NonfatalError :: ExecStatus

-- | A fatal error occurred.
FatalError :: ExecStatus
data ConnStatus :: *

-- | The <a>Connection</a> is ready.
ConnectionOk :: ConnStatus

-- | The connection procedure has failed.
ConnectionBad :: ConnStatus

-- | Waiting for connection to be made.
ConnectionStarted :: ConnStatus

-- | Connection OK; waiting to send.
ConnectionMade :: ConnStatus

-- | Waiting for a response from the server.
ConnectionAwaitingResponse :: ConnStatus

-- | Received authentication; waiting for backend start-up to finish.
ConnectionAuthOk :: ConnStatus

-- | Negotiating environment-driven parameter settings.
ConnectionSetEnv :: ConnStatus

-- | Negotiating SSL encryption.
ConnectionSSLStartup :: ConnStatus
data ConnSettings
ConnSettings :: ByteString -> ByteString -> ByteString -> Maybe ByteString -> ConnSettings
_host :: ConnSettings -> ByteString
_dbname :: ConnSettings -> ByteString
_user :: ConnSettings -> ByteString
_password :: ConnSettings -> Maybe ByteString
connect :: ConnSettings -> IO (Either ConnStatus Connection)
connect_alt :: ByteString -> IO (Either ConnStatus Connection)
sql :: QuasiQuoter
fmtSQL :: ToSQL a => Query -> a -> SQL
fmtQuery :: ToSQL a => Query -> a -> ByteString
printSQL :: Query -> IO ()
instance Show IsolationLevel
instance Eq IsolationLevel
instance Ord IsolationLevel
instance Enum IsolationLevel
instance Bounded IsolationLevel
instance Show ReadWriteMode
instance Eq ReadWriteMode
instance Ord ReadWriteMode
instance Enum ReadWriteMode
instance Bounded ReadWriteMode
instance Show TransactionMode
instance Eq TransactionMode
