-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Easy replacement when using text-icu regexes.
--   
@package text-regex-replace
@version 0.1.1.0


-- | This implements a common DSL for regular expression replacement text.
--   This is represented with the <a>Replace</a> data type. It also
--   implements the <a>IsString</a> interface, so if
--   <tt>OverloadedStrings</tt> is on, you can use a raw string to build
--   the replacement.
module Data.Text.ICU.Replace

-- | A <a>Replace</a> instance is a function from a regular expression
--   match to a <a>Builder</a>. This naturally forms a <a>Monoid</a>, so
--   they're easy to combine.
--   
--   <a>Replace</a> also implements <a>IsString</a>, so raw strings can be
--   used to construct them.
data Replace

-- | Execute a regular expression on a <a>Text</a> and replace the first
--   match.
replace :: Regex -> Replace -> Text -> Text

-- | Replace one regular expression match with the <a>Replace</a>.
replace' :: Replace -> Match -> Text

-- | Execute a regular expression on a <a>Text</a> and replace all matches.
replaceAll :: Regex -> Replace -> Text -> Text

-- | Replace all regular expression matches with the <a>Replace</a>.
replaceAll' :: Replace -> [Match] -> Text

-- | Create a <a>Replace</a> that inserts a regular expression group.
rgroup :: Int -> Replace

-- | Create a <a>Replace</a> that inserts static <a>Text</a>.
rtext :: Text -> Replace

-- | Create a <a>Replace</a> that inserts a static <a>String</a>.
rstring :: String -> Replace

-- | Create a <a>Replace</a> from a function that transforms a <a>Match</a>
--   into a <a>Builder</a>.
rfn :: (Match -> Builder) -> Replace

-- | Create a <a>Replace</a> From a function that transforms a <a>Match</a>
--   into a <a>Text</a>.
rtfn :: (Match -> Text) -> Replace

-- | Create a <a>Replace</a> that inserts a static <a>Builder</a>.
rbuilder :: Builder -> Replace
instance Monoid Replace
instance IsString Replace
