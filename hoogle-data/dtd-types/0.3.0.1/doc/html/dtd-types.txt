-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Basic types for representing XML DTDs
--   
--   This package provides types to represent an XML Document Type
--   Declaration (DTD) as defined in W3C specifications
--   (<a>http://www.w3.org/XML/Core/#Publications</a>). It is intended to
--   be compatible with and extend the set of types in
--   <a>Data.XML.Types</a> provided by the xml-types package.
--   
--   Following the philosophy of <tt>Data.XML.Types</tt>, the types in this
--   module are not intended to be a strict and complete representation of
--   the model in the W3C specifications; rather, they are intended to be
--   convenient and type-safe for the kinds of processing of DTDs that are
--   commonly done in practice. As such, this model is compatible with both
--   Version 1.0 and Version 1.1 of the XML specification.
--   
--   Therefore, these types are not suitable for type-level validation of
--   the syntax of a DTD. For example: these types are more lenient than
--   the specs about the characters that are allowed in various locations
--   in a DTD; entities of various kinds only appear as distinct syntactic
--   elements in places where they are commonly needed when processing
--   DTDs; etc.
--   
--   Conditional sections are not represented in these types. They should
--   be handled directly by parsers and renderers, if needed.
@package dtd-types
@version 0.3.0.1


-- | This module provides types to represent an XML Document Type
--   Declaration (DTD) as defined in W3C specifications
--   (<a>http://www.w3.org/XML/Core/#Publications</a>). It is intended to
--   be compatible with and extend the set of types in
--   <a>Data.XML.Types</a> provided by the xml-types package.
--   
--   Following the philosophy of <tt>Data.XML.Types</tt>, the types in this
--   module are not intended to be a strict and complete representation of
--   the model in the W3C specifications; rather, they are intended to be
--   convenient and type-safe for the kinds of processing of DTDs that are
--   commonly done in practice. As such, this model is compatible with both
--   Version 1.0 and Version 1.1 of the XML specification.
--   
--   Therefore, these types are not suitable for type-level validation of
--   the syntax of a DTD. For example: these types are more lenient than
--   the specs about the characters that are allowed in various locations
--   in a DTD; entities of various kinds only appear as distinct syntactic
--   elements in places where they are commonly needed when processing
--   DTDs; etc.
--   
--   Conditional sections are not represented in these types. They should
--   be handled directly by parsers and renderers, if needed.
module Data.XML.DTD.Types

-- | A <a>DTD</a> is a sequence components in any order.
data DTD
DTD :: Maybe DTDTextDecl -> [DTDComponent] -> DTD
dtdTextDecl :: DTD -> Maybe DTDTextDecl
dtdComponents :: DTD -> [DTDComponent]

-- | The <tt>?xml</tt> text declaration at the beginning of a DTD.
data DTDTextDecl
DTDTextDecl :: Maybe Text -> Text -> DTDTextDecl
dtdXMLVersion :: DTDTextDecl -> Maybe Text
dtdEncoding :: DTDTextDecl -> Text

-- | The kinds of components that can appear in a <a>DTD</a>.
data DTDComponent

-- | Entity declaration
DTDEntityDecl :: EntityDecl -> DTDComponent

-- | Element declaration
DTDElementDecl :: ElementDecl -> DTDComponent

-- | List of attribute declarions for an element
DTDAttList :: AttList -> DTDComponent

-- | A notation declaration
DTDNotation :: Notation -> DTDComponent

-- | A parameter entity reference in the top-level flow of the DTD
DTDPERef :: PERef -> DTDComponent

-- | A processing instruction
DTDInstruction :: Instruction -> DTDComponent

-- | A comment
DTDComment :: Text -> DTDComponent

-- | A declaration of an entity. An entity is a textual substitution
--   variable. General entities can be referenced in an XML document
--   conforming to the DTD, and parameter entities can be referenced in the
--   DTD itself. The value of an unparsed entity is not specified in the
--   DTD; it is specified by external syntax declared as a notation
--   elsewhere in the DTD.
data EntityDecl
InternalGeneralEntityDecl :: Text -> [EntityValue] -> EntityDecl
entityDeclName :: EntityDecl -> Text
entityDeclValue :: EntityDecl -> [EntityValue]

-- | An external general entity is unparsed if a notation is specified.
ExternalGeneralEntityDecl :: Text -> ExternalID -> Maybe Text -> EntityDecl
entityDeclName :: EntityDecl -> Text
entityDeclID :: EntityDecl -> ExternalID
entityDeclNotation :: EntityDecl -> Maybe Text
InternalParameterEntityDecl :: Text -> [EntityValue] -> EntityDecl
entityDeclName :: EntityDecl -> Text
entityDeclValue :: EntityDecl -> [EntityValue]
ExternalParameterEntityDecl :: Text -> ExternalID -> EntityDecl
entityDeclName :: EntityDecl -> Text
entityDeclID :: EntityDecl -> ExternalID

-- | The value of an internal entity may contain references to parameter
--   entities; these references need to be resolved to obtain the actual
--   replacement value of the entity. So we represent the value as a
--   mixture of parameter entity references and free text.
data EntityValue
EntityText :: Text -> EntityValue
EntityPERef :: PERef -> EntityValue

-- | A parameter entity reference. It contains the name of the parameter
--   entity that is being referenced.
type PERef = Text

-- | A declaration of an element.
data ElementDecl
ElementDecl :: Text -> ContentDecl -> ElementDecl
eltDeclName :: ElementDecl -> Text
eltDeclContent :: ElementDecl -> ContentDecl

-- | The content that can occur in an element.
data ContentDecl

-- | No content
ContentEmpty :: ContentDecl

-- | Unrestricted content
ContentAny :: ContentDecl

-- | Structured element content
ContentElement :: ContentModel -> ContentDecl

-- | A mixture of text and elements
ContentMixed :: [Text] -> ContentDecl

-- | A model of structured content for an element.
data ContentModel

-- | Element name
CMName :: Text -> Repeat -> ContentModel

-- | Choice, delimited by <tt>"|"</tt>
CMChoice :: [ContentModel] -> Repeat -> ContentModel

-- | Sequence, delimited by <tt>","</tt>
CMSeq :: [ContentModel] -> Repeat -> ContentModel

-- | The number of times a production of content model syntax can repeat.
data Repeat
One :: Repeat
ZeroOrOne :: Repeat
ZeroOrMore :: Repeat
OneOrMore :: Repeat

-- | A list of attribute declarations for an element.
data AttList
AttList :: Text -> [AttDecl] -> AttList

-- | The name of the element to which the attribute declarations apply
attListElementName :: AttList -> Text
attListDecls :: AttList -> [AttDecl]

-- | A declaration of an attribute that can occur in an element.
data AttDecl
AttDecl :: Text -> AttType -> AttDefault -> AttDecl

-- | The name of the attribute
attDeclName :: AttDecl -> Text

-- | The type of the attribute
attDeclType :: AttDecl -> AttType

-- | The default value specification
attDeclDefault :: AttDecl -> AttDefault

-- | The type of value that an attribute can take.
data AttType

-- | Any text
AttStringType :: AttType

-- | A unique ID
AttIDType :: AttType

-- | A reference to an ID
AttIDRefType :: AttType

-- | One or more references to IDs
AttIDRefsType :: AttType

-- | An unparsed external entity
AttEntityType :: AttType

-- | One or more unparsed external entities
AttEntitiesType :: AttType

-- | A name-like token
AttNmTokenType :: AttType

-- | One or more name-like tokens
AttNmTokensType :: AttType

-- | One of the given values
AttEnumType :: [Text] -> AttType

-- | Specified by external syntax declared as a notation
AttNotationType :: [Text] -> AttType

-- | A default value specification for an attribute.
data AttDefault

-- | No default value; the attribute must always be supplied
AttRequired :: AttDefault

-- | No default value; the attribute is optional
AttImplied :: AttDefault

-- | When supplied, the attribute must have the given value
AttFixed :: Text -> AttDefault

-- | The attribute has the given default value when not supplied
AttDefaultValue :: Text -> AttDefault

-- | A declaration of a notation.
data Notation
Notation :: Text -> NotationSource -> Notation
notationName :: Notation -> Text
notationSource :: Notation -> NotationSource

-- | A source for a notation. We do not use the usual <a>ExternalID</a>
--   type here, because for notations it is only optional, not required,
--   for a public ID to be accompanied also by a system ID.
data NotationSource

-- | A system ID
NotationSysID :: Text -> NotationSource

-- | A public ID
NotationPubID :: Text -> NotationSource

-- | A public ID with a system ID
NotationPubSysID :: Text -> Text -> NotationSource
instance Show DTDTextDecl
instance Eq DTDTextDecl
instance Show EntityValue
instance Eq EntityValue
instance Show EntityDecl
instance Eq EntityDecl
instance Show Repeat
instance Eq Repeat
instance Show ContentModel
instance Eq ContentModel
instance Show ContentDecl
instance Eq ContentDecl
instance Show ElementDecl
instance Eq ElementDecl
instance Show AttType
instance Eq AttType
instance Show AttDefault
instance Eq AttDefault
instance Show AttDecl
instance Eq AttDecl
instance Show AttList
instance Eq AttList
instance Show NotationSource
instance Eq NotationSource
instance Show Notation
instance Eq Notation
instance Show DTDComponent
instance Eq DTDComponent
instance Show DTD
instance Eq DTD
instance Typeable NotationSource
instance Typeable Notation
instance Typeable AttDefault
instance Typeable AttType
instance Typeable AttDecl
instance Typeable AttList
instance Typeable Repeat
instance Typeable ContentModel
instance Typeable ContentDecl
instance Typeable ElementDecl
instance Typeable EntityValue
instance Typeable EntityDecl
instance Typeable DTDComponent
instance Typeable DTDTextDecl
instance Typeable DTD
