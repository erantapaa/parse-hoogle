-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monoids for calculation of statistics of sample
--   
--   Monoids for calculation of statistics of sample. This approach allows
--   to calculate many statistics in one pass over data and possibility to
--   parallelize calculations. However not all statistics could be
--   calculated this way.
--   
--   This packages is quite similar to monoids package but limited to
--   calculation on statistics. In particular it makes use of
--   commutatitvity of statistical monoids.
--   
--   Changes:
--   
--   <ul>
--   <li>0.3.1 Better documentation; Fix in Min/Max monoids</li>
--   </ul>
@package monoid-statistics
@version 0.3.1


module Data.Monoid.Statistics

-- | Monoid which corresponds to some stattics. In order to do so it must
--   be commutative. In many cases it's not practical to construct monoids
--   for each element so <tt>papennd</tt> was added. First parameter of
--   type class is monoidal accumulator. Second is type of element over
--   which statistic is calculated.
--   
--   Statistic could be calculated with fold over sample. Since accumulator
--   is <a>Monoid</a> such fold could be easily parralelized. Check
--   examples section for more information.
--   
--   Instance must satisfy following law:
--   
--   <pre>
--   pappend x (pappend y mempty) == pappend x mempty `mappend` pappend y mempty
--   mappend x y == mappend y x
--   </pre>
--   
--   It is very similar to Reducer type class from monoids package but
--   require commutative monoids
class Monoid m => StatMonoid m a
pappend :: StatMonoid m a => a -> m -> m

-- | Calculate statistic over <tt>Foldable</tt>. It's implemented in terms
--   of foldl'.
evalStatistic :: (Foldable d, StatMonoid m a) => d a -> m

-- | Monoid which allows to calculate two statistics in parralel
data TwoStats a b
TwoStats :: !a -> !b -> TwoStats a b
calcStat1 :: TwoStats a b -> !a
calcStat2 :: TwoStats a b -> !b
instance Typeable2 TwoStats
instance (Show a, Show b) => Show (TwoStats a b)
instance (Eq a, Eq b) => Eq (TwoStats a b)
instance (StatMonoid a x, StatMonoid b x) => StatMonoid (TwoStats a b) x
instance (Monoid a, Monoid b) => Monoid (TwoStats a b)

module Data.Monoid.Statistics.Numeric

-- | Simplest statistics. Number of elements in the sample
newtype Count a
Count :: a -> Count a
calcCountI :: Count a -> a

-- | Fix type of monoid
asCount :: Count a -> Count a

-- | Mean of sample. Samples of Double,Float and bui;t-in integral types
--   are supported
--   
--   Numeric stability of <a>mappend</a> is not proven.
data Mean
Mean :: {-# UNPACK #-} !Int -> {-# UNPACK #-} !Double -> Mean

-- | Fix type of monoid
asMean :: Mean -> Mean

-- | Intermediate quantities to calculate the standard deviation.
data Variance
Variance :: {-# UNPACK #-} !Int -> {-# UNPACK #-} !Double -> {-# UNPACK #-} !Double -> Variance

-- | Fix type of monoid
asVariance :: Variance -> Variance

-- | Statistics which could count number of elements in the sample
class CalcCount m
calcCount :: CalcCount m => m -> Int

-- | Statistics which could estimate mean of sample
class CalcMean m
calcMean :: CalcMean m => m -> Double

-- | Statistics which could estimate variance of sample
class CalcVariance m
calcVariance :: CalcVariance m => m -> Double
calcVarianceUnbiased :: CalcVariance m => m -> Double

-- | Calculate sample standard deviation (biased estimator, $s$, where the
--   denominator is $n-1$).
calcStddev :: CalcVariance m => m -> Double

-- | Calculate standard deviation of the sample (unbiased estimator,
--   $sigma$, where the denominator is $n$).
calcStddevUnbiased :: CalcVariance m => m -> Double

-- | Calculate maximum of sample. For empty sample returns NaN. Any NaN
--   encountedred will be ignored.
newtype Max
Max :: Double -> Max
calcMax :: Max -> Double

-- | Calculate minimum of sample. For empty sample returns NaN. Any NaN
--   encountedred will be ignored.
newtype Min
Min :: Double -> Min
calcMin :: Min -> Double
instance Typeable1 Count
instance Typeable Mean
instance Typeable Variance
instance Typeable Min
instance Typeable Max
instance Show a => Show (Count a)
instance Eq a => Eq (Count a)
instance Ord a => Ord (Count a)
instance Show Mean
instance Eq Mean
instance Show Variance
instance Eq Variance
instance Show Min
instance Eq Min
instance Ord Min
instance Show Max
instance Eq Max
instance Ord Max
instance StatMonoid Max Double
instance Monoid Max
instance StatMonoid Min Double
instance Monoid Min
instance CalcVariance Variance
instance CalcMean Variance
instance CalcCount Variance
instance Real a => StatMonoid Variance a
instance Monoid Variance
instance CalcMean Mean
instance CalcCount Mean
instance Real a => StatMonoid Mean a
instance Monoid Mean
instance CalcCount (Count Int)
instance Integral a => StatMonoid (Count a) b
instance Integral a => Monoid (Count a)
