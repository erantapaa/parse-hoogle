-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A binary representation of the historical dictionary of Polish
--   
--   The library provides a binary representation of the historical
--   dictionary of Polish.
@package hist-pl-lexicon
@version 0.6.0


-- | Some utility functions for working with the dictionary.
module NLP.HistPL.Util

-- | All format (base form + other forms) of the lexeme.
allForms :: LexEntry -> [Text]

-- | Does lexeme take the given form?
hasForm :: LexEntry -> Text -> Bool

-- | Add new word form to the lexeme description.
addForm :: WordForm -> LexEntry -> LexEntry


-- | The module provides functions for working with the binary
--   representation of the historical dictionary of Polish.
--   
--   It is intended to be imported qualified, to avoid name clashes with
--   Prelude functions, e.g.
--   
--   <pre>
--   import qualified NLP.HistPL.Lexicon as H
--   </pre>
--   
--   Use <a>save</a> and <a>load</a> functions to save/load the entire
--   dictionary in/from a given directory.
--   
--   To search the dictionary, open the binary directory with an
--   <a>open</a> function. For example, during a <tt>GHCi</tt> session:
--   
--   <pre>
--   &gt;&gt;&gt; hpl &lt;- H.open "srpsdp.bin"
--   </pre>
--   
--   Set the OverloadedStrings extension for convenience:
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   </pre>
--   
--   To search the dictionary use the <a>lookup</a> function, e.g.
--   
--   <pre>
--   &gt;&gt;&gt; entries &lt;- H.lookup hpl "dufliwego"
--   </pre>
--   
--   You can use functions defined in the <a>NLP.HistPL.Types</a> module to
--   query the entries for a particular feature, e.g.
--   
--   <pre>
--   &gt;&gt;&gt; map (H.text . H.lemma) entries
--   [["dufliwy"]]
--   </pre>
--   
--   Finally, if you need to follow an ID pointer kept in one entry as a
--   reference to another one, use the <a>loadI</a> or <a>tryLoadI</a>
--   functions.
module NLP.HistPL.Lexicon

-- | A binary dictionary holds additional info of type <tt>a</tt> for every
--   entry and additional info of type <tt>b</tt> for every word form.
data HistPL

-- | Code of a word form origin. See the <a>save</a> function to learn why
--   do we provide this information.
data Code

-- | only from historical dictionary
Orig :: Code

-- | from both historical and another dictionary
Both :: Code

-- | only from another dictionary
Copy :: Code

-- | A dictionary key which uniquely identifies the lexical entry.
type Key = Key UID

-- | A unique identifier among entries with the same <tt>keyForm</tt>.
type UID = Int

-- | Open the binary dictionary residing in the given directory. Return
--   Nothing if the directory doesn't exist or if it doesn't constitute a
--   dictionary.
tryOpen :: FilePath -> IO (Maybe HistPL)

-- | Open the binary dictionary residing in the given directory. Raise an
--   error if the directory doesn't exist or if it doesn't constitute a
--   dictionary.
open :: FilePath -> IO HistPL

-- | Lookup the form in the dictionary. The resultant list constitutes a
--   map from entries to <a>Code</a>s.
lookup :: HistPL -> Text -> IO [(LexEntry, Code)]

-- | Lookup a set of forms in the dictionary. The resultant list
--   constitutes a map from entries to <a>Code</a>s.
lookupMany :: HistPL -> [Text] -> IO [(LexEntry, Code)]

-- | Get suffix of the <tt>i</tt>-th form starting with a given prefix.
nthSuffix :: HistPL -> Text -> Int -> Maybe Text

-- | Compute the number of entries with a given prefix.
withPrefix :: HistPL -> Text -> Int

-- | List of dictionary keys.
dictKeys :: Proxy p => HistPL -> () -> Producer p Key IO ()

-- | Load lexical entry given its key. Return <a>Nothing</a> if there is no
--   entry with such a key.
tryLoadK :: HistPL -> Key -> IO (Maybe LexEntry)

-- | Load lexical entry given its key. Raise error if there is no entry
--   with such a key.
loadK :: HistPL -> Key -> IO LexEntry

-- | List of dictionary IDs.
dictIDs :: Proxy p => HistPL -> () -> Producer p Text IO ()

-- | Load lexical entry given its ID. Return <a>Nothing</a> if there is no
--   entry with such ID.
tryLoadI :: HistPL -> Text -> IO (Maybe LexEntry)

-- | Load lexical entry given its ID. Raise error if there is no entry with
--   such a key.
loadI :: HistPL -> Text -> IO LexEntry

-- | Construct dictionary from a list of lexical entries and save it in the
--   given directory. To each entry an additional set of forms can be
--   assigned. The stream of entry pairs should be terminated by the
--   <a>Nothing</a> value.
save :: Proxy p => FilePath -> () -> Consumer p (Maybe (LexEntry, Set Text)) IO ()

-- | A producer of all dictionary entries.
load :: Proxy p => HistPL -> () -> Producer p (Key, LexEntry) IO ()
instance Show Code
instance Eq Code
instance Ord Code
instance Binary Code
