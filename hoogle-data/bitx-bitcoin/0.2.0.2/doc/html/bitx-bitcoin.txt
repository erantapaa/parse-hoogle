-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell library for working with the BitX bitcoin exchange.
--   
@package bitx-bitcoin
@version 0.2.0.2


-- | The types used for the various BitX API calls.
--   
--   Note that these are all <a>record</a> types, as provided by Nikita
--   Volkov's <a>Record</a> library. The main motivation for using the
--   <tt>record</tt> library was to avoid using record field prefixes and
--   other awkward hacks to get around the fact that Haskell does not yet
--   have a real records' system.
--   
--   For example, the declaration of <a>BitXAuth</a> is
--   
--   <pre>
--   type BitXAuth =
--       [<a>record</a>|
--           {id :: <a>Text</a>,
--            secret :: <a>Text</a>} |]
--   </pre>
--   
--   To declare a BitXAuth, one might use
--   
--   <pre>
--   myAuth :: BitXAuth
--   myAuth =
--       [record|
--           {id = "46793",
--            secret = "387ffBd56eEAA7C59"} |]
--   </pre>
--   
--   and to read the fields you would use
--   
--   <pre>
--   theID = <tt>view</tt> [<a>lens</a>| id |] myAuth
--   </pre>
--   
--   Note that all uses of Volkov's <a>record</a>s requires importing
--   <a>Record</a> and enabling the <tt>DataKinds</tt> and
--   <tt>QuasiQuotes</tt> extensions.
--   
--   See <a>http://nikita-volkov.github.io/record/</a>
module Network.Bitcoin.BitX.Types

-- | The state of a single market, identified by the currency pair. As
--   usual, the ask/sell price is the price of the last filled ask order,
--   and the bid/buy price is the price of the last filled bid order.
--   Necessarily <tt>bid &lt;= ask.</tt>
--   
--   <pre>
--   type Ticker =
--       [record|
--           {ask :: <a>Scientific</a>,
--            timestamp :: <a>UTCTime</a>,
--            bid :: <a>Scientific</a>,
--            rolling24HourVolume :: <a>Scientific</a>,
--            lastTrade :: <a>Scientific</a>,
--            pair :: <a>CcyPair</a>} |]
--    
--   </pre>
type Ticker = Record6 "ask" Scientific "bid" Scientific "lastTrade" Scientific "pair" CcyPair "rolling24HourVolume" Scientific "timestamp" UTCTime

-- | A currency pair
data CcyPair

-- | Bitcoin vs. ZAR
XBTZAR :: CcyPair

-- | Bitcoin vs. Namibian Dollar
XBTNAD :: CcyPair

-- | ZAR vs. Namibian Dollar
ZARXBT :: CcyPair

-- | Namibian Dollar vs. Bitcoin
NADXBT :: CcyPair

-- | Bitcoin vs. Kenyan Shilling
XBTKES :: CcyPair

-- | Kenyan Shilling vs Bitcoin
KESXBT :: CcyPair

-- | Bitcoin vs. Malaysian Ringgit
XBTMYR :: CcyPair

-- | Malaysian Ringgit vs. Bitcoin
MYRXBT :: CcyPair

-- | Bitcoin vs. Nigerian Naira
XBTNGN :: CcyPair

-- | Nigerian Naira vs. Bitcoin
NGNXBT :: CcyPair

-- | The current state of the publically accessible orderbook. Bid orders
--   are requests to buy, ask orders are requests to sell.
--   
--   <pre>
--   type Orderbook =
--       [record|
--           {timestamp :: <a>UTCTime</a>,
--            bids :: [<a>Bid</a>],
--            asks :: [<a>Ask</a>]} |]
--    
--   </pre>
type Orderbook = Record3 "asks" [Ask] "bids" [Bid] "timestamp" UTCTime

-- | A single placed order in the orderbook
--   
--   <pre>
--   type Order =
--       [record|
--           {volume :: <a>Scientific</a>,
--            price :: <a>Scientific</a>} |]
--    
--   </pre>
type Order = Record2 "price" Scientific "volume" Scientific

-- | Convenient type alias for a bid order
type Bid = Order

-- | Convenient type alias for an ask order
type Ask = Order
type Trade = Record3 "price" Scientific "timestamp" UTCTime "volume" Scientific

-- | An auth type used by all private API calls, after authorisation.
--   
--   <pre>
--   type BitXAuth =
--       [record|
--           {id :: <a>Text</a>,
--            secret :: <a>Text</a>} |]
--    
--   </pre>
type BitXAuth = Record2 "id" Text "secret" Text

-- | A recently placed (private) order, containing a lot more information
--   than is available on the public order book.
--   
--   <pre>
--   type PrivateOrder =
--       [record|
--           {base :: <a>Scientific</a>,
--            counter :: <a>Scientific</a>,
--            creationTimestamp :: <a>UTCTime</a>,
--            expirationTimestamp :: <a>UTCTime</a>,
--            feeBase :: <a>Scientific</a>,
--            feeCounter :: <a>Scientific</a>,
--            limitPrice :: <a>Scientific</a>,
--            limitVolume :: <a>Scientific</a>,
--            id :: <a>OrderID</a>,
--            pair :: <a>CcyPair</a>,
--            state :: <a>RequestStatus</a>,
--            type :: <a>OrderType</a> } |]
--    
--   </pre>
type PrivateOrder = Record12 "base" Scientific "counter" Scientific "creationTimestamp" UTCTime "expirationTimestamp" UTCTime "feeBase" Scientific "feeCounter" Scientific "id" OrderID "limitPrice" Scientific "limitVolume" Scientific "pair" CcyPair "state" RequestStatus "type" OrderType
type OrderID = Text

-- | The type of a placed order.
data OrderType

-- | A request to sell
ASK :: OrderType

-- | A request to buy
BID :: OrderType

-- | The state of a (private) placed request -- either an order or a
--   withdrawal request.
data RequestStatus

-- | Not yet completed. An order will stay in <a>PENDING</a> state even as
--   it is partially filled, and will move to <a>COMPLETE</a> once it has
--   been completely filled.
PENDING :: RequestStatus

-- | Completed.
COMPLETE :: RequestStatus

-- | Cancelled. Note that an order cannot be in <a>CANCELLED</a> state,
--   since cancelling an order removes it from the orderbook.
CANCELLED :: RequestStatus

-- | A request to place an order.
--   
--   <pre>
--   type OrderRequest =
--       [record|
--           {pair :: <a>CcyPair</a>,
--            type :: <a>OrderType</a>,
--            volume :: <a>Scientific</a>,
--            price :: <a>Scientific</a> } |]
--    
--   </pre>
type OrderRequest = Record4 "pair" CcyPair "price" Scientific "type" OrderType "volume" Scientific
type RequestSuccess = Bool

-- | A possible error which the BitX API might return, instead of returning
--   the requested data. Note that as yet there is no exhaustive list of
--   error codes available, so comparisons will have to be done via Text
--   comparisons (as opposed to typed pattern matching). Sorry...
--   
--   <pre>
--   type BitXError =
--       [record|
--           {error :: <a>Text</a>,
--            errorCode :: <a>Text</a>} |]
--    
--   </pre>
type BitXError = Record2 "error" Text "errorCode" Text

-- | A recently placed (private) order, containing a lot more information
--   than is available on the public order book, together with details of
--   any trades which have (partially) filled it.
--   
--   <pre>
--   type PrivateOrderWithTrades =
--       [record|
--           {base :: <a>Scientific</a>,
--            counter :: <a>Scientific</a>,
--            creationTimestamp :: <a>UTCTime</a>,
--            expirationTimestamp :: <a>UTCTime</a>,
--            feeBase :: <a>Scientific</a>,
--            feeCounter :: <a>Scientific</a>,
--            limitPrice :: <a>Scientific</a>,
--            limitVolume :: <a>Scientific</a>,
--            id :: <a>OrderID</a>,
--            pair :: <a>CcyPair</a>,
--            state :: <a>RequestStatus</a>,
--            type :: <a>OrderType</a>,
--            trades :: [<a>Trade</a>] } |]
--    
--   </pre>
type PrivateOrderWithTrades = Record13 "base" Scientific "counter" Scientific "creationTimestamp" UTCTime "expirationTimestamp" UTCTime "feeBase" Scientific "feeCounter" Scientific "id" OrderID "limitPrice" Scientific "limitVolume" Scientific "pair" CcyPair "state" RequestStatus "trades" [Trade] "type" OrderType
type AccountID = Text

-- | A trade-able asset. Essentially, a currency.
data Asset

-- | South African Rand
ZAR :: Asset

-- | Namibian Dollar
NAD :: Asset

-- | Bitcoin
XBT :: Asset

-- | Kenyan Shilling
KES :: Asset

-- | Malaysian Ringgit
MYR :: Asset

-- | Nigerian Naira
NGN :: Asset

-- | The current balance of a private account.
--   
--   <pre>
--   type Balance =
--       [record|
--           {id :: <a>AccountID</a>,
--            asset :: <a>Asset</a>,
--            balance :: <a>Scientific</a>,
--            reserved :: <a>Scientific</a>,
--            unconfirmed :: <a>Scientific</a> } |]
--    
--   </pre>
type Balance = Record5 "asset" Asset "balance" Scientific "id" AccountID "reserved" Scientific "unconfirmed" Scientific

-- | A registered address for an acocunt.
--   
--   <pre>
--   type FundingAddress =
--       [record|
--           {asset :: <a>Asset</a>,
--            address :: <a>Text</a>,
--            totalReceived :: <a>Scientific</a>,
--            totalUnconfirmed :: <a>Scientific</a>} |]
--    
--   </pre>
type FundingAddress = Record4 "address" Text "asset" Asset "totalReceived" Scientific "totalUnconfirmed" Scientific

-- | The state of a request to withdraw from an account.
--   
--   <pre>
--   type WithdrawalRequest =
--       [record|
--           {status :: <a>RequestStatus</a>,
--            id :: <a>Text</a> } |]
--    
--   </pre>
type WithdrawalRequest = Record2 "id" Text "status" RequestStatus

-- | A request to withdraw from an account.
--   
--   <pre>
--   type NewWithdrawal =
--       [record|
--           {type :: <a>WithdrawalType</a>,
--            amount :: <a>Scientific</a> } |]
--    
--   </pre>
type NewWithdrawal = Record2 "amount" Scientific "type" WithdrawalType

-- | The type of a withdrawal request.
data WithdrawalType

-- | ZAR by Electronic Funds Transfer
ZAR_EFT :: WithdrawalType

-- | Namibian Dollar by EFT
NAD_EFT :: WithdrawalType

-- | Kenyan Shilling by Vodafone MPESA
KES_MPESA :: WithdrawalType

-- | Malaysian Ringgit by Interbank GIRO (?)
MYR_IBG :: WithdrawalType

-- | Indonesian Rupiah by Lalu Lintas Giro (??)
IDR_LLG :: WithdrawalType

-- | A request to send bitcoin to a bitcoin address or email address.
--   
--   <pre>
--   type BitcoinSendRequest =
--       [record|
--           {amount :: <a>Scientific</a>,
--            currency :: <a>Asset</a>,
--            address :: <a>Text</a>,
--            description :: <a>Maybe</a> <a>Text</a>,
--            message :: <a>Maybe</a> <a>Text</a>} |]
--    
--   </pre>
type BitcoinSendRequest = Record5 "address" Text "amount" Scientific "currency" Asset "description" (Maybe Text) "message" (Maybe Text)

-- | A request to lock in a quote.
--   
--   <pre>
--   type QuoteRequest =
--       [record|
--           {type :: <a>QuoteType</a>,
--            pair :: <a>CcyPair</a>,
--            baseAmount :: <a>Scientific</a>} |]
--    
--   </pre>
type QuoteRequest = Record3 "baseAmount" Scientific "pair" CcyPair "type" QuoteType

-- | A temporarily locked in quote.
--   
--   <pre>
--   type OrderQuote =
--       [record|
--           {id :: <a>Text</a>,
--            type :: <a>QuoteType</a>,
--            pair :: <a>CcyPair</a>,
--            baseAmount :: <a>Scientific</a>,
--            counterAmount :: <a>Scientific</a>,
--            createdAt :: <a>UTCTime</a>,
--            expiresAt :: <a>UTCTime</a>,
--            discarded :: <a>Bool</a>,
--            exercised :: <a>Bool</a>} |]
--    
--   </pre>
type OrderQuote = Record9 "baseAmount" Scientific "counterAmount" Scientific "createdAt" UTCTime "discarded" Bool "exercised" Bool "expiresAt" UTCTime "id" Text "pair" CcyPair "type" QuoteType
data QuoteType
BUY :: QuoteType
SELL :: QuoteType
type BitXClientAuth = BitXAuth

-- | A transaction on a private user account.
--   
--   <pre>
--   type Transaction =
--       [record|
--           {rowIndex :: <a>Int</a>,
--            timestamp :: <a>UTCTime</a>,
--            balance :: <a>Scientific</a>,
--            available :: <a>Scientific</a>,
--            balanceDelta :: <a>Scientific</a>,
--            availableDelta :: <a>Scientific</a>,
--            currency :: <a>Asset</a>,
--            description :: <a>Text</a>}|]
--    
--   </pre>
type Transaction = Record8 "available" Scientific "availableDelta" Scientific "balance" Scientific "balanceDelta" Scientific "currency" Asset "description" Text "rowIndex" Int "timestamp" UTCTime

-- | A registered account.
--   
--   <pre>
--   type Account =
--       [record|
--           {id :: Text,
--            name :: Text,
--            currency :: Asset} |]
--    
--   </pre>
type Account = Record3 "currency" Asset "id" Text "name" Text
instance Show CcyPair
instance Generic CcyPair
instance Eq CcyPair
instance Show Asset
instance Generic Asset
instance Eq Asset
instance Show OrderType
instance Generic OrderType
instance Eq OrderType
instance Show RequestStatus
instance Generic RequestStatus
instance Eq RequestStatus
instance Show WithdrawalType
instance Generic WithdrawalType
instance Eq WithdrawalType
instance Show QuoteType
instance Generic QuoteType
instance Eq QuoteType
instance Datatype D1CcyPair
instance Constructor C1_0CcyPair
instance Constructor C1_1CcyPair
instance Constructor C1_2CcyPair
instance Constructor C1_3CcyPair
instance Constructor C1_4CcyPair
instance Constructor C1_5CcyPair
instance Constructor C1_6CcyPair
instance Constructor C1_7CcyPair
instance Constructor C1_8CcyPair
instance Constructor C1_9CcyPair
instance Datatype D1Asset
instance Constructor C1_0Asset
instance Constructor C1_1Asset
instance Constructor C1_2Asset
instance Constructor C1_3Asset
instance Constructor C1_4Asset
instance Constructor C1_5Asset
instance Datatype D1OrderType
instance Constructor C1_0OrderType
instance Constructor C1_1OrderType
instance Datatype D1RequestStatus
instance Constructor C1_0RequestStatus
instance Constructor C1_1RequestStatus
instance Constructor C1_2RequestStatus
instance Datatype D1WithdrawalType
instance Constructor C1_0WithdrawalType
instance Constructor C1_1WithdrawalType
instance Constructor C1_2WithdrawalType
instance Constructor C1_3WithdrawalType
instance Constructor C1_4WithdrawalType
instance Datatype D1QuoteType
instance Constructor C1_0QuoteType
instance Constructor C1_1QuoteType
instance FromJSON QuoteType
instance FromJSON WithdrawalType
instance FromJSON OrderType
instance FromJSON Asset
instance FromJSON CcyPair


-- | The common return type of the API.
module Network.Bitcoin.BitX.Response

-- | This retun type enumerates all possible failure modes.
data BitXAPIResponse rec

-- | Some exception occured while making the call to BitX, and this was the
--   exception text.
ExceptionResponse :: Text -> BitXAPIResponse rec

-- | BitX returned an error record instead of returning the data we were
--   expecting.
ErrorResponse :: BitXError -> BitXAPIResponse rec

-- | We received the data type we were expecting.
ValidResponse :: rec -> BitXAPIResponse rec

-- | BitX retuned data which couldn't be parsed, such as some text which
--   was probably not JSON format.
UnparseableResponse :: (Response ByteString) -> BitXAPIResponse rec
instance Eq rec => Eq (BitXAPIResponse rec)
instance Show rec => Show (BitXAPIResponse rec)


-- | <h1>Usage example</h1>
--   
--   As a small example, to get the current selling price of bitcoin on the
--   BitX exchange, do the following:
--   
--   <pre>
--   {-# LANGUAGE QuasiQuotes #-}
--   
--   import Record.Lens (view)
--   import Record (lens)
--   import Network.Bitcoin.BitX (BitXAPIResponse(..), getTicker, CcyPair(..))
--   import Data.Text (unpack)
--   import Network.HTTP.Types.Status (Status(..))
--   import Network.HTTP.Conduit (responseStatus)
--   
--   main :: IO ()
--   main = do
--     bitXResponse &lt;- getTicker XBTZAR
--     case bitXResponse of
--       ValidResponse tic        -&gt; print (view [lens| ask |] tic)
--       ErrorResponse err        -&gt;
--           error $ "BitX error received: "" ++ (unpack (view [lens| error |] err)) ++ """
--       ExceptionResponse ex     -&gt;
--           error $ "Exception was thrown: "" ++ (unpack ex) ++ """
--       UnparseableResponse resp -&gt;
--           error $ "Bad HTTP response; HTTP status code was: ""
--                     ++ (show . statusCode . responseStatus $ resp) ++ """
--    
--   </pre>
module Network.Bitcoin.BitX.Public

-- | Returns the latest ticker indicators.
getTicker :: CcyPair -> IO (BitXAPIResponse Ticker)

-- | Returns the latest ticker indicators from all active BitX exchanges.
getTickers :: IO (BitXAPIResponse [Ticker])

-- | Returns a list of bids and asks in the order book.
--   
--   Ask orders are sorted by price ascending. Bid orders are sorted by
--   price descending. Note that multiple orders at the same price are not
--   necessarily conflated.
getOrderBook :: CcyPair -> IO (BitXAPIResponse Orderbook)

-- | Returns a list of the most recent trades
getTrades :: CcyPair -> IO (BitXAPIResponse [Trade])


-- | The API for dealing with quotes.
--   
--   Quotes allow you to lock in an exchange rate for a short time with the
--   option of either accepting or rejecting the quote.
--   
--   Quotes can be useful for various customer-facing applications where
--   price fluctuations would be confusing.
--   
--   The API is used as follows: First create a quote for the transaction
--   that you want to perform. If you decide to accept the quote before it
--   expires, you will exercise the quote. If you decide not to accept it,
--   you will discard the quote. You can also retrieve the status of a
--   quote at any time.
module Network.Bitcoin.BitX.Private.Quote

-- | Create a quote
--   
--   Creates a new quote to buy or sell a particular amount.
--   
--   You can specify either the exact amount that you want to pay or the
--   exact amount that you want to receive.
--   
--   For example, to buy exactly 0.1 Bitcoin using ZAR, you would create a
--   quote to BUY 0.1 XBTZAR. The returned quote includes the appropriate
--   ZAR amount. To buy Bitcoin using exactly ZAR 100, you would create a
--   quote to SELL 100 ZARXBT. The returned quote specifies the Bitcoin as
--   the counter amount that will be returned.
--   
--   An error is returned if your account is not verified for the currency
--   pair, or if your account would have insufficient balance to ever
--   exercise the quote.
--   
--   The currency pair can also be flipped if you want to buy or sell the
--   counter currency (e.g. ZARXBT).
--   
--   <tt>Perm_W_Orders</tt> permission required.
newQuote :: BitXAuth -> QuoteRequest -> IO (BitXAPIResponse OrderQuote)

-- | Get a quote
--   
--   Get the latest status of a quote, retrieved by ID.
--   
--   <tt>Perm_R_Orders</tt> permission required.
getQuote :: BitXAuth -> Text -> IO (BitXAPIResponse OrderQuote)

-- | Exercise a quote
--   
--   Exercise a quote to perform the trade. If there is sufficient balance
--   available in your account, it will be debited and the counter amount
--   credited.
--   
--   An error is returned if the quote has expired or if you have
--   insufficient available balance.
--   
--   <tt>Perm_W_Orders</tt> permission required.
exerciseQuote :: BitXAuth -> Text -> IO (BitXAPIResponse OrderQuote)

-- | Discard a quote
--   
--   Discard a quote. Once a quote has been discarded, it cannot be
--   exercised even if it has not expired yet.
--   
--   <tt>Perm_W_Orders</tt> permission required.
discardQuote :: BitXAuth -> Text -> IO (BitXAPIResponse OrderQuote)


-- | Creating and working with orders
--   
--   Trading on the market is done by submitting trade orders. After a new
--   order has been created, it is submitted for processing by the order
--   matching engine. The order then either matches against an existing
--   order in the order book and is filled or it rests in the order book
--   until it is stopped.
module Network.Bitcoin.BitX.Private.Order

-- | Returns a list of the most recently placed orders.
--   
--   If the second parameter is <tt>Nothing</tt> then this will return
--   orders for all markets, whereas if it is <tt>Just cpy</tt> for some
--   <tt>CcyPair cpy</tt> then the results will be specific to that market.
--   
--   If the third parameter is <tt>Nothing</tt> then this will return
--   orders in all states, whereas if it is <tt>Just COMPLETE</tt> or
--   <tt>Just PENDING</tt> then it will return only completed or pending
--   orders, respectively.
--   
--   This list is truncated after 100 items.
--   
--   <tt>Perm_R_Orders</tt> permission is required.
getAllOrders :: BitXAuth -> Maybe CcyPair -> Maybe RequestStatus -> IO (BitXAPIResponse [PrivateOrder])

-- | Create a new order.
--   
--   <b>Warning! Orders cannot be reversed once they have executed. Please
--   ensure your program has been</b> <b>thoroughly tested before
--   submitting orders.</b>
--   
--   <tt>Perm_W_Orders</tt> permission is required.
postOrder :: BitXAuth -> OrderRequest -> IO (BitXAPIResponse OrderID)

-- | Request to stop an order.
--   
--   <tt>Perm_W_Orders</tt> permission is required.
stopOrder :: BitXAuth -> OrderID -> IO (BitXAPIResponse RequestSuccess)

-- | Get an order by its ID
--   
--   <tt>Perm_R_Orders</tt> permission is required.
getOrder :: BitXAuth -> OrderID -> IO (BitXAPIResponse PrivateOrderWithTrades)


module Network.Bitcoin.BitX.Private.Withdrawal

-- | List withdrawal requests
--   
--   Returns a list of withdrawal requests.
--   
--   <tt>Perm_R_Withdrawals</tt> permission required.
getWithdrawalRequests :: BitXAuth -> IO (BitXAPIResponse [WithdrawalRequest])

-- | Request a withdrawal
--   
--   Creates a new withdrawal request.
--   
--   <tt>Perm_W_Withdrawals</tt> permission required.
newWithdrawalRequest :: BitXAuth -> NewWithdrawal -> IO (BitXAPIResponse WithdrawalRequest)

-- | Get the status of a withdrawal request
--   
--   Returns the status of a particular withdrawal request.
--   
--   <tt>Perm_R_Withdrawals</tt> permission required.
getWithdrawalRequest :: BitXAuth -> Text -> IO (BitXAPIResponse WithdrawalRequest)


-- | <h1>The private BitX API.</h1>
--   
--   Each one of the calls takes at least a <a>BitXAuth</a> containing a
--   previously-created API id and secret (created by <a>authGrant</a>, or
--   created by visiting <a>https://bitx.co/settings#/api_keys</a>), and
--   may either return a useful <tt>record</tt>, a <a>BitXError</a> if BitX
--   actually returned an error, or <a>Nothing</a> if some exception
--   occured (or if the data returned by BitX was unparseable).
--   
--   <h1>Permissions</h1>
--   
--   Each API key is granted a set of permissions when it is created. The
--   key can only be used to call the permitted API functions.
--   
--   Here is a list of the possible permissions:
--   
--   <ul>
--   <li><tt>Perm_R_Balance = 1</tt> (View balance)</li>
--   <li><tt>Perm_R_Transactions = 2</tt> (View transactions)</li>
--   <li><tt>Perm_W_Send = 4</tt> (Send to any address)</li>
--   <li><tt>Perm_R_Addresses = 8</tt> (View addresses)</li>
--   <li><tt>Perm_W_Addresses = 16</tt> (Create addresses)</li>
--   <li><tt>Perm_R_Orders = 32</tt> (View orders)</li>
--   <li><tt>Perm_W_Orders = 64</tt> (Create orders)</li>
--   <li><tt>Perm_R_Withdrawals = 128</tt> (View withdrawals)</li>
--   <li><tt>Perm_W_Withdrawals = 256</tt> (Create withdrawals)</li>
--   <li><tt>Perm_R_Merchant = 512</tt> (View merchant invoices)</li>
--   <li><tt>Perm_W_Merchant = 1024</tt> (Create merchant invoices)</li>
--   </ul>
--   
--   A set of permissions is represented as the bitwise OR of each
--   permission in the set. For example the set of permissions required to
--   view balances and orders is <tt>Perm_R_Balance | Perm_R_Orders =
--   33.</tt>
module Network.Bitcoin.BitX.Private

-- | Create an additional account for the specified currency
--   
--   Note that the <a>id</a> field of the second parameter can be left
--   blank. The call will return an <a>Account</a> object resembling the
--   parameter, but with the <a>id</a> field filled in with the newly
--   created account's id.
--   
--   You must be verified to trade the currency in question in order to be
--   able to create an account.
--   
--   <tt>Perm_W_Addresses</tt> permission required.
newAccount :: BitXAuth -> Account -> IO (BitXAPIResponse Account)

-- | Return account balances
--   
--   <tt>Perm_R_Balance</tt> permission required.
getBalances :: BitXAuth -> IO (BitXAPIResponse [Balance])

-- | Returns the default receive address associated with your account and
--   the amount received via the address
--   
--   You can specify an optional address parameter to return information
--   for a non-default receive address. In the response, total_received is
--   the total confirmed Bitcoin amount received excluding unconfirmed
--   transactions. total_unconfirmed is the total sum of unconfirmed
--   receive transactions.
--   
--   <tt>Perm_R_Addresses</tt> permission is required.
getFundingAddress :: BitXAuth -> Asset -> Maybe String -> IO (BitXAPIResponse FundingAddress)

-- | Create receive address
--   
--   Allocates a new receive address to your account. There is a limit of
--   50 receive addresses per user.
--   
--   <tt>Perm_R_Addresses</tt> permission is required.
newFundingAddress :: BitXAuth -> Asset -> IO (BitXAPIResponse FundingAddress)

-- | Send Bitcoin from your account to a Bitcoin address or email address.
--   
--   If the email address is not associated with an existing BitX account,
--   an invitation to create an account and claim the funds will be sent.
--   
--   <b>Warning! Bitcoin transactions are irreversible. Please ensure your
--   program has been thoroughly</b> <b>tested before using this call.</b>
--   
--   <tt>Perm_W_Send</tt> permission required. Note that when creating an
--   API key on the BitX site, selecting "Full access" is not sufficient to
--   add the <tt>Perm_W_Send</tt> permission. Instead, the permission needs
--   to be enabled explicitely by selecting "Custom."
sendToAddress :: BitXAuth -> BitcoinSendRequest -> IO (BitXAPIResponse RequestSuccess)

-- | Return a list of transaction entries from an account.
--   
--   Transaction entry rows are numbered sequentially starting from 1,
--   where 1 is the oldest entry. The range of rows to return are specified
--   with the min_row (inclusive) and max_row (exclusive) parameters. At
--   most 1000 rows can be requested per call.
--   
--   If min_row or max_row is nonpositive, the range wraps around the most
--   recent row. For example, to fetch the 100 most recent rows, use
--   min_row=-100 and max_row=0.
--   
--   <tt>Perm_R_Transactions</tt> permission required.
getTransactions :: BitXAuth -> AccountID -> Int -> Int -> IO (BitXAPIResponse [Transaction])

-- | Pending transactions
--   
--   Return a list of all pending transactions related to the account.
--   
--   Unlike account entries, pending transactions are not numbered, and may
--   be reordered, deleted or updated at any time.
--   
--   <tt>Perm_R_Transactions</tt> permission required.
getPendingTransactions :: BitXAuth -> AccountID -> IO (BitXAPIResponse [Transaction])


-- | This module re-exports the entire API. In practice it will be
--   sufficient for every use case.
module Network.Bitcoin.BitX
