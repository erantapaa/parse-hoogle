-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Large TreeStore support for gtk2hs
--   
--   Uses nested set model to store tree iterators and achieves larger data
--   support than the original gtk2hs implementation.
@package gtk-largeTreeStore
@version 0.0.1.0


-- | Standard model to store hierarchical data.
module GtkExtras.LargeTreeStore

-- | A store for hierarchical data.
data TreeStore a

-- | Create a new list store.
--   
--   <ul>
--   <li>The given rose tree determines the initial content and may be the
--   empty list. Each <a>Tree</a> in the forest corresponds to one
--   top-level node.</li>
--   </ul>
treeStoreNew :: Forest a -> IO (TreeStore a)

-- | Create a new list store.
--   
--   <ul>
--   <li>In addition to <a>treeStoreNew</a>, this function takes an two
--   interfaces to implement user-defined drag-and-drop functionality.</li>
--   </ul>
treeStoreNewDND :: Forest a -> Maybe (DragSourceIface TreeStore a) -> Maybe (DragDestIface TreeStore a) -> IO (TreeStore a)

-- | Default drag functions for <a>TreeStore</a>. These functions allow the
--   rows of the model to serve as drag source. Any row is allowed to be
--   dragged and the data set in the <tt>SelectionDataM</tt> object is set
--   with <a>treeSetRowDragData</a>, i.e. it contains the model and the
--   <a>TreePath</a> to the row.
treeStoreDefaultDragSourceIface :: DragSourceIface TreeStore row

-- | Default drop functions for <a>TreeStore</a>. These functions accept a
--   row and insert the row into the new location if it is dragged into a
--   tree view that uses the same model.
treeStoreDefaultDragDestIface :: DragDestIface TreeStore row

-- | Extract one node from the current model. Fails if the given
--   <a>TreePath</a> refers to a non-existent node.
treeStoreGetValue :: TreeStore a -> TreePath -> IO a

-- | Set a node in the store.
treeStoreSetValue :: TreeStore a -> TreePath -> a -> IO ()

-- | Change a node in the store.
--   
--   <ul>
--   <li>Returns <tt>True</tt> if the node was found. For a monadic
--   version, see <a>treeStoreChangeM</a>.</li>
--   </ul>
treeStoreChange :: TreeStore a -> TreePath -> (a -> a) -> IO Bool

-- | Change a node in the store.
--   
--   <ul>
--   <li>Returns <tt>True</tt> if the node was found. For a purely
--   functional version, see <a>treeStoreChange</a>.</li>
--   </ul>
treeStoreChangeM :: TreeStore a -> TreePath -> (a -> IO a) -> IO Bool

-- | Insert nodes into the store.
--   
--   <ul>
--   <li>The given list of nodes is inserted into given parent at
--   <tt>pos</tt>. If the parent existed, the function returns <tt>Just
--   path</tt> where <tt>path</tt> is the position of the newly inserted
--   elements. If <tt>pos</tt> is negative or greater or equal to the
--   number of children of the node at <tt>path</tt>, the new nodes are
--   appended to the list.</li>
--   </ul>
treeStoreInsertForest :: TreeStore a -> TreePath -> Int -> Forest a -> IO ()

-- | Insert a single node into the store.
--   
--   <ul>
--   <li>This function inserts a single node without children into the
--   tree. Its arguments are similar to those of
--   <a>treeStoreInsert</a>.</li>
--   </ul>
treeStoreInsert :: TreeStore a -> TreePath -> Int -> a -> IO ()

-- | Insert a node into the store.
treeStoreInsertTree :: TreeStore a -> TreePath -> Int -> Tree a -> IO ()

-- | Remove a node from the store.
--   
--   <ul>
--   <li>The node denoted by the path is removed, along with all its
--   children. The function returns <tt>True</tt> if the given node was
--   found.</li>
--   </ul>
treeStoreRemove :: TreeStore a -> TreePath -> IO Bool
treeStoreClear :: TreeStore a -> IO ()
treeStoreGetTree :: TreeStore a -> TreePath -> IO (Tree a)
instance GObjectClass (TreeStore a)
instance TreeModelClass (TreeStore a)
instance TypedTreeModelClass TreeStore
