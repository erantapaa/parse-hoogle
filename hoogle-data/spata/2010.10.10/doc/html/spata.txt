-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | brainless form validation
--   
--   tiny validation library
@package spata
@version 2010.10.10

module Network.Spata.Type
type Assoc = [(String, String)]
type Guard = String -> Assoc -> Either String Assoc
type Task = Assoc -> Either String Assoc
type GuardiansT a = Writer (DList Task) a
type Guardians = GuardiansT ()
type GuardM m = String -> Assoc -> m (Either String Assoc)
type TaskM m = Assoc -> m (Either String Assoc)
type GuardiansTM a m = Writer (DList (TaskM m)) a
type GuardiansM m = GuardiansTM () m

module Network.Spata.DSL
guard :: Assoc -> Guardians -> Either String Assoc
validate :: Guard -> [String] -> Guardians
train :: Task -> Guardians
inclusion_of :: Guard
presence_of :: Guard
length_of :: (Integer -> Bool) -> Guard
int_of :: Guard
predicate :: (String -> Bool) -> String -> Guard
validate_m :: (Monad m) => GuardM m -> [String] -> GuardiansM m
predicate_m :: (Monad m) => (String -> m Bool) -> String -> GuardM m
guard_m :: (Monad m) => Assoc -> GuardiansM m -> m (Either String Assoc)
p :: (String -> Bool) -> String -> Guard
validateM :: (Monad m) => GuardM m -> [String] -> GuardiansM m
predicateM :: (Monad m) => (String -> m Bool) -> String -> GuardM m
guardM :: (Monad m) => Assoc -> GuardiansM m -> m (Either String Assoc)

module Network.Spata
