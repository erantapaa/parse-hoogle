-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | defining @mtl@-ready monads as * -> * fixed-points
--   
--   Declares the * -&gt; * isomorphism class and uses it to declare
--   instances for the <tt>mtl</tt> interface classes for monads defined
--   using 'star-to-star:Data.StarToStar.Fix'.
@package hofix-mtl
@version 1.0


-- | A template haskell definition for automatically generating the
--   instance for <tt>Data.StarToStar.Iso.Iso</tt>. For example:
--   
--   <pre>
--   decl_fix "ReaderST" ["s"] [t| ReaderT (Map String ($me Int) (ST $(tvar "s")) |]
--   </pre>
--   
--   generates
--   
--   <pre>
--   newtype ReaderST s me a = ReaderST (ReaderT (Map String (me Int)) (ST s) a)
--   unReaderST (ReaderST x) = x
--   type ReaderST_inner s me = ReaderT (Map String (me Int)) (ST s)
--   </pre>
--   
--   <pre>
--   instance Iso (Fix (ReaderST s)) where
--     type Other (Fix (ReaderST s)) = ReaderST_inner s (Fix (ReaderST s))
--     from = unReaderST . fromFix
--     to = toFix . ReaderST
--   </pre>
module Data.StarToStar.Iso.TH
me :: TypeQ
tvar :: String -> TypeQ
decl_fix :: String -> [String] -> Q Type -> Q [Dec]
decl_fix_kinds :: String -> [TyVarBndr] -> Q Type -> Q [Dec]


-- | The * -&gt; * isomorphism class.
module Data.StarToStar.Iso
class Iso f where { type family Other f :: * -> *; }
from :: (Iso f) => f a -> Other f a
to :: (Iso f) => Other f a -> f a


-- | Instances for <tt>mtl</tt> interface classes via <a>Iso</a> for monads
--   defined using <a>Fix</a>.
module Control.Monad.StarToStar.Fix
instance (Iso (Fix ff), MonadCont (Other (Fix ff))) => MonadCont (Fix ff)
instance (Iso (Fix ff), MonadError r (Other (Fix ff))) => MonadError r (Fix ff)
instance (Iso (Fix ff), MonadRWS r w s (Other (Fix ff))) => MonadRWS r w s (Fix ff)
instance (Iso (Fix ff), MonadState s (Other (Fix ff))) => MonadState s (Fix ff)
instance (Iso (Fix ff), MonadWriter w (Other (Fix ff))) => MonadWriter w (Fix ff)
instance (Iso (Fix ff), MonadReader r (Other (Fix ff))) => MonadReader r (Fix ff)
instance (Iso (Fix ff), MonadIO (Other (Fix ff))) => MonadIO (Fix ff)
instance (Iso (Fix ff), MonadFix (Other (Fix ff))) => MonadFix (Fix ff)
instance (Iso (Fix ff), MonadPlus (Other (Fix ff))) => MonadPlus (Fix ff)
instance (Iso (Fix ff), Monad (Other (Fix ff))) => Monad (Fix ff)
