-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Passes ekg statistics to rrdtool
--   
--   Simple API for passing ekg monitoring statistics to a round-robin
--   database (RRD) using rrdtool.
@package ekg-rrd
@version 0.2.1.69

module System.Metrics.RRDTool.Internals

-- | Intervals in seconds (e.g. heartbeats and step size)
type IntervalSeconds = Int

-- | Counters, gauges etc. in <tt>ekg</tt> have this type
type SourceValue = Int64

-- | Types of data source in a round-robin database.
data DataSourceType

-- | Metrics whose current value is tracked. This is appropriate for
--   <a>Gauge</a> metrics and creates a <tt>GAUGE</tt> DS.
DsGauge :: DataSourceType

-- | Metrics that are monotonically increasing and whose rate-of-change is
--   tracked. This is appropriate for <a>Counter</a> metrics and creates a
--   <tt>DERIVE</tt> DS.
DsDerive :: DataSourceType

-- | A data source in a round-robin database.
data DataSource
DataSource :: Text -> Text -> DataSourceType -> IntervalSeconds -> Maybe SourceValue -> Maybe SourceValue -> DataSource

-- | The name of the metric in the database. Maximum 19 characters and
--   contains letters, digits and underscores only.
dsName :: DataSource -> Text

-- | The name of the metric in the <tt>ekg</tt> <a>Store</a>.
dsMetric :: DataSource -> Text

-- | The type of the metric.
dsType :: DataSource -> DataSourceType

-- | After this length of time with no updates, consider the value to be
--   'unknown'.
dsHeartBeat :: DataSource -> IntervalSeconds

-- | Values less than this should be interpreted as 'unknown'.
dsMin :: DataSource -> Maybe SourceValue

-- | Values greater than this should be interpreted as 'unknown'.
dsMax :: DataSource -> Maybe SourceValue

-- | Pre-defined data sources for tracking GHC's GC metrics. See
--   <a>registerGcMetrics</a> or <a>GCStats</a> for more details. Clients
--   must run <a>registerGcMetrics</a> to register these metrics once the
--   RRD is created.
gcSources :: IntervalSeconds -> [DataSource]

-- | Defines how multiple primary data points (PDPs) are turned into a
--   consolidated data point (CDP) for storage in a
--   <a>RoundRobinArchive</a>.
data ConsolidationFunction

-- | Keep the last point only.
CFLast :: ConsolidationFunction

-- | Take the mean of the points.
CFAverage :: ConsolidationFunction

-- | Take the minimum point.
CFMin :: ConsolidationFunction

-- | Take the maximum point.
CFMax :: ConsolidationFunction

-- | A sequence of consolidated data points (CDPs).
data RoundRobinArchive
RoundRobinArchive :: ConsolidationFunction -> Double -> Int -> Int -> RoundRobinArchive

-- | How to consolidate PDPs to get each CDP.
rraCf :: RoundRobinArchive -> ConsolidationFunction

-- | The 'Xfiles factor' - if more than this proportion of PDPs is unknown
--   then the CDP is unknown.
rraXff :: RoundRobinArchive -> Double

-- | The number of PDPs to use to calculate each CDP.
rraPdpCount :: RoundRobinArchive -> Int

-- | The number of CDPs to store in the archive.
rraRecordCount :: RoundRobinArchive -> Int

-- | A round-robin database (RRD), which is a file on disk that stores time
--   series data from a number of sources.
data RoundRobinDatabase
RoundRobinDatabase :: FilePath -> FilePath -> HashMap Text DataSource -> [RoundRobinArchive] -> Store -> IntervalSeconds -> RoundRobinDatabase
rrdToolPath :: RoundRobinDatabase -> FilePath
rrdFilePath :: RoundRobinDatabase -> FilePath
rrdSources :: RoundRobinDatabase -> HashMap Text DataSource
rrdArchives :: RoundRobinDatabase -> [RoundRobinArchive]

-- | Get the <a>Store</a> associated with this <a>RoundRobinDatabase</a> in
--   order to register metrics.
rrdStore :: RoundRobinDatabase -> Store
rrdStep :: RoundRobinDatabase -> IntervalSeconds
defineDataSource :: DataSource -> String
showMaybeValue :: Maybe SourceValue -> String
defineRoundRobinArchive :: RoundRobinArchive -> String
createRRDArgs :: RoundRobinDatabase -> [String]
updateRRDArgs :: RoundRobinDatabase -> HashMap Text Value -> UTCTime -> Maybe [String]
epoch :: UTCTime
epochTime :: UTCTime -> Integer
epochTimeFromUTCTime :: UTCTime -> String
formatValue :: Value -> String
showWord64 :: Word64 -> String
instance Eq DataSourceType
instance Show DataSourceType
instance Bounded DataSourceType
instance Enum DataSourceType
instance Show DataSource
instance Eq DataSource
instance Show ConsolidationFunction
instance Eq ConsolidationFunction
instance Show RoundRobinArchive
instance Eq RoundRobinArchive


-- | Simple API for passing ekg monitoring statistics to a round-robin
--   database (RRD) using <tt>rrdtool</tt>.
module System.Metrics.RRDTool

-- | Intervals in seconds (e.g. heartbeats and step size)
type IntervalSeconds = Int

-- | Counters, gauges etc. in <tt>ekg</tt> have this type
type SourceValue = Int64

-- | A data source in a round-robin database.
data DataSource
DataSource :: Text -> Text -> DataSourceType -> IntervalSeconds -> Maybe SourceValue -> Maybe SourceValue -> DataSource

-- | The name of the metric in the database. Maximum 19 characters and
--   contains letters, digits and underscores only.
dsName :: DataSource -> Text

-- | The name of the metric in the <tt>ekg</tt> <a>Store</a>.
dsMetric :: DataSource -> Text

-- | The type of the metric.
dsType :: DataSource -> DataSourceType

-- | After this length of time with no updates, consider the value to be
--   'unknown'.
dsHeartBeat :: DataSource -> IntervalSeconds

-- | Values less than this should be interpreted as 'unknown'.
dsMin :: DataSource -> Maybe SourceValue

-- | Values greater than this should be interpreted as 'unknown'.
dsMax :: DataSource -> Maybe SourceValue

-- | Types of data source in a round-robin database.
data DataSourceType

-- | Metrics whose current value is tracked. This is appropriate for
--   <a>Gauge</a> metrics and creates a <tt>GAUGE</tt> DS.
DsGauge :: DataSourceType

-- | Metrics that are monotonically increasing and whose rate-of-change is
--   tracked. This is appropriate for <a>Counter</a> metrics and creates a
--   <tt>DERIVE</tt> DS.
DsDerive :: DataSourceType

-- | Pre-defined data sources for tracking GHC's GC metrics. See
--   <a>registerGcMetrics</a> or <a>GCStats</a> for more details. Clients
--   must run <a>registerGcMetrics</a> to register these metrics once the
--   RRD is created.
gcSources :: IntervalSeconds -> [DataSource]

-- | Defines how multiple primary data points (PDPs) are turned into a
--   consolidated data point (CDP) for storage in a
--   <a>RoundRobinArchive</a>.
data ConsolidationFunction

-- | Keep the last point only.
CFLast :: ConsolidationFunction

-- | Take the mean of the points.
CFAverage :: ConsolidationFunction

-- | Take the minimum point.
CFMin :: ConsolidationFunction

-- | Take the maximum point.
CFMax :: ConsolidationFunction

-- | A sequence of consolidated data points (CDPs).
data RoundRobinArchive
RoundRobinArchive :: ConsolidationFunction -> Double -> Int -> Int -> RoundRobinArchive

-- | How to consolidate PDPs to get each CDP.
rraCf :: RoundRobinArchive -> ConsolidationFunction

-- | The 'Xfiles factor' - if more than this proportion of PDPs is unknown
--   then the CDP is unknown.
rraXff :: RoundRobinArchive -> Double

-- | The number of PDPs to use to calculate each CDP.
rraPdpCount :: RoundRobinArchive -> Int

-- | The number of CDPs to store in the archive.
rraRecordCount :: RoundRobinArchive -> Int

-- | A round-robin database (RRD), which is a file on disk that stores time
--   series data from a number of sources.
data RoundRobinDatabase

-- | Create a new <a>RoundRobinDatabase</a>. Creates the database file on
--   disk if not already present. Metrics must subsequently be registered
--   in the store associated with the <a>RoundRobinDatabase</a>, which can
--   be obtained with <a>rrdStore</a>. Throws an <a>IOException</a> if
--   there was a problem running <tt>rrdtool</tt>.
newRRD :: FilePath -> IntervalSeconds -> Maybe FilePath -> [RoundRobinArchive] -> [DataSource] -> IO RoundRobinDatabase

-- | Get the <a>Store</a> associated with this <a>RoundRobinDatabase</a> in
--   order to register metrics.
rrdStore :: RoundRobinDatabase -> Store

-- | The monitoring thread for a round robin database, which can be created
--   with <a>runMonitor</a> and killed with <a>killMonitor</a>.
data MonitorThread

-- | Run a monitoring thread for the given database, which samples the
--   metrics and updates the database at the chosen frequency. Failed
--   updates are ignored.
runMonitor :: RoundRobinDatabase -> IO MonitorThread

-- | Kills the monitoring thread.
killMonitor :: MonitorThread -> IO ()

-- | A do-nothing MonitorThread, for use if monitoring is disabled.
nullMonitor :: MonitorThread
