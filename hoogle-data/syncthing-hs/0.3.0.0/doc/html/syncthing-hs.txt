-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings for the Syncthing REST API
--   
--   see: <a>https://github.com/syncthing/syncthing/wiki/REST-Interface</a>
--   
--   A short tutorial is available at:
--   <a>http://jetho.org/posts/2015-03-07-syncthing-hs-tutorial.html</a>
@package syncthing-hs
@version 0.3.0.0


-- | Syncthing GET requests.
module Network.Syncthing.Get

-- | Ping the Syncthing server. Returns the string "pong".
ping :: MonadSync m => SyncM m Text

-- | Get the API Key if available.
apiKey :: MonadSync m => SyncM m (Maybe Text)

-- | Return the current configuration.
config :: MonadSync m => SyncM m Config

-- | Determine whether the config is in sync.
insync :: MonadSync m => SyncM m Bool

-- | Get the list of current connections and some metadata associated with
--   the connection/peer.
connections :: MonadSync m => SyncM m Connections

-- | Fetch the contents of the local discovery cache.
discovery :: MonadSync m => SyncM m (Map Device [CacheEntry])

-- | Get the list of recent errors.
errors :: MonadSync m => SyncM m [Error]

-- | Returns information about current system status and resource usage.
sysStatus :: MonadSync m => SyncM m System

-- | Check for a possible upgrade.
upgrade :: MonadSync m => SyncM m Upgrade

-- | Get the current syncthing version information.
version :: MonadSync m => SyncM m Version

-- | Get the directory tree of the global model.
browse :: MonadSync m => FolderName -> Maybe Path -> Maybe Int -> SyncM m (Maybe DirTree)

-- | Return the completion percentage (0 to 100) for a given device and
--   folder.
completion :: MonadSync m => Device -> FolderName -> SyncM m Int

-- | Returns most data available about a given file, including version and
--   availability.
file :: MonadSync m => FolderName -> Path -> SyncM m DBFile

-- | Fetch the ignores list.
ignores :: MonadSync m => FolderName -> SyncM m Ignore

-- | Get lists of files which are needed by this device in order for it to
--   become in sync.
need :: MonadSync m => FolderName -> SyncM m Need

-- | Get information about the current status of a folder.
dbStatus :: MonadSync m => FolderName -> SyncM m Model

-- | Returns general statistics about devices.
devices :: MonadSync m => SyncM m (Map Device DeviceInfo)

-- | Returns general statistics about folders.
folders :: MonadSync m => SyncM m (Map FolderName FolderInfo)

-- | Verifiy and format a device ID. Return either a valid device ID in
--   modern format, or an error.
deviceId :: MonadSync m => Device -> SyncM m Device

-- | Returns a list of canonicalized localization codes, as picked up from
--   the Accept-Language header sent by the browser.
lang :: MonadSync m => SyncM m [Text]

-- | Returns the data sent in the anonymous usage report.
report :: MonadSync m => SyncM m UsageReport


-- | Syncthing POST requests.
module Network.Syncthing.Post

-- | Update the server configuration. The configuration will be saved to
--   disk and the configInSync flag set to false. <a>restart</a> Syncthing
--   to activate.
config :: MonadSync m => Config -> SyncM m ()

-- | Add an entry to the discovery cache.
discovery :: MonadSync m => Device -> Server -> SyncM m ()

-- | Ping the Syncthing server. Returns the string "pong".
ping :: MonadSync m => SyncM m Text

-- | Register a new error message.
sendError :: MonadSync m => Text -> SyncM m ()

-- | Remove all recent errors.
clearErrors :: MonadSync m => SyncM m ()

-- | Reset Syncthing by renaming all folder directories to temporary,
--   unique names, wiping all indexes and restarting.
reset :: MonadSync m => SyncM m SystemMsg

-- | Restart Syncthing.
restart :: MonadSync m => SyncM m SystemMsg

-- | Shutdown Syncthing.
shutdown :: MonadSync m => SyncM m SystemMsg

-- | Perform an upgrade to the newest release and restart. Does nothing if
--   there is no newer version.
upgrade :: MonadSync m => SyncM m (Maybe SystemMsg)

-- | Update the ignores list and echo it back as response.
ignores :: MonadSync m => FolderName -> [Text] -> SyncM m (Maybe [Text])

-- | Move the given file to the top of the download queue.
prio :: MonadSync m => FolderName -> Path -> SyncM m Need

-- | Request rescan of a folder. Restrict the scan to a relative subpath
--   within the folder by specifying the optional path parameter. The
--   optional int argument delays Syncthing's automated rescan interval for
--   a given amount of seconds.
scan :: MonadSync m => FolderName -> Maybe Path -> Maybe Int -> SyncM m ()


-- | Internal constructors and helper functions. You should NOT use this
--   module under normal circumstances!
module Network.Syncthing.Internal

-- | The Syncthing configuration for specifying the Syncthing server,
--   authentication, the API Key etc.
data SyncConfig
SyncConfig :: Server -> Maybe Text -> Maybe Auth -> Bool -> Either ManagerSettings Manager -> SyncConfig
server :: SyncConfig -> Server
apiKey :: SyncConfig -> Maybe Text
auth :: SyncConfig -> Maybe Auth
https :: SyncConfig -> Bool
manager :: SyncConfig -> Either ManagerSettings Manager

-- | A lens for configuring the server address. Use the ADDRESS:PORT
--   format.
--   
--   <i>Example:</i>
--   
--   <pre>
--   let cfg = <tt>defaultConfig</tt> <a>&amp;</a> <a>pServer</a> <a>.~</a> "192.168.0.10:8080"
--   <tt>syncthing</tt> cfg Get.<a>ping</a>
--   </pre>
pServer :: Lens' SyncConfig Server

-- | A lens for specifying the Syncthing API Key.
--   
--   <i>Example:</i>
--   
--   <pre>
--   let cfg = <tt>defaultConfig</tt> <a>&amp;</a> <a>pApiKey</a> <a>?~</a> "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
--   <tt>syncthing</tt> cfg Get.<a>ping</a>
--   </pre>
pApiKey :: Lens' SyncConfig (Maybe Text)

-- | A lens for configuring request authentication provided by the
--   <a>Wreq</a> package (see <a>Auth</a>).
--   
--   <i>Example:</i>
--   
--   <pre>
--   import qualified <a>Network.Wreq</a> as Wreq
--   
--   let cfg = <tt>defaultConfig</tt> <a>&amp;</a> <a>pHttps</a> <a>.~</a> True
--                           <a>&amp;</a> <a>pAuth</a>  <a>?~</a> Wreq.<a>basicAuth</a> "user" "pass"
--   <tt>syncthing</tt> cfg Get.<a>ping</a>
--   </pre>
pAuth :: Lens' SyncConfig (Maybe Auth)

-- | A lens for enabling HTTPS usage.
--   
--   <i>Example:</i>
--   
--   <pre>
--   let cfg = <tt>defaultConfig</tt> <a>&amp;</a> <a>pHttps</a> <a>.~</a> True
--   <tt>syncthing</tt> cfg Get.<a>ping</a>
--   </pre>
pHttps :: Lens' SyncConfig Bool

-- | A lens for specifying your own ManagerSettings/Manager. For more
--   information, please refer to the <a>Network.HTTP.Client</a> package.
pManager :: Lens' SyncConfig (Either ManagerSettings Manager)

-- | The result type of Syncthing requests.
type SyncResult a = Either SyncError a

-- | The SyncM Monad represents one or multiple Syncthing requests.
newtype SyncM m a
SyncM :: EitherT SyncError (ReaderT SyncConfig m) a -> SyncM m a
runSyncthing :: SyncM m a -> EitherT SyncError (ReaderT SyncConfig m) a
class Monad m => MonadSync m
getMethod :: MonadSync m => Options -> String -> m ByteString
postMethod :: MonadSync m => Options -> String -> Value -> m ByteString

-- | Run Syncthing requests without error handling.
runSyncM :: SyncConfig -> SyncM m a -> m (SyncResult a)

-- | Run Syncthing requests with error handling.
syncthingM :: MonadCatch m => SyncConfig -> SyncM m a -> m (SyncResult a)
liftEither :: Monad m => EitherT SyncError (ReaderT SyncConfig m) a -> SyncM m a
liftReader :: Monad m => (ReaderT SyncConfig m) a -> SyncM m a
liftInner :: Monad m => m a -> SyncM m a
liftLeft :: Monad m => SyncError -> SyncM m a
liftRight :: Monad m => a -> SyncM m a
type Param = (Text, Text)
data HttpMethod
Get :: HttpMethod
Post :: Value -> HttpMethod
data SyncRequest
SyncRequest :: String -> HttpMethod -> [Param] -> SyncRequest
path :: SyncRequest -> String
method :: SyncRequest -> HttpMethod
params :: SyncRequest -> [Param]
query :: (MonadSync m, FromJSON a) => SyncRequest -> SyncM m a
queryMaybe :: (MonadSync m, FromJSON a) => SyncRequest -> SyncM m (Maybe a)
send :: MonadSync m => SyncRequest -> SyncM m ()
get :: HttpMethod
post :: ToJSON a => a -> HttpMethod
getRequest :: SyncRequest
postRequest :: SyncRequest
data DeviceError
IncorrectLength :: DeviceError
IncorrectCheckDigit :: DeviceError
OtherDeviceError :: Text -> DeviceError
data SyncError
ParseError :: String -> SyncError
NotAuthorized :: SyncError
CSRFError :: SyncError
NotFound :: SyncError
InvalidDeviceId :: DeviceError -> SyncError
NoSuchFolder :: SyncError
syncErrHandler :: MonadThrow m => HttpException -> m (Either SyncError a)
decodeDeviceError :: Text -> DeviceError
decodeError :: ByteString -> Maybe SyncError

-- | Parse server string (SERVER:PORT) into an address type.
parseAddr :: Server -> Addr

-- | Generate server string.
encodeAddr :: Addr -> Server

-- | Convert time string to UTCTime type.
toUTC :: String -> Maybe UTCTime

-- | Generate time string from UTC.
fromUTC :: UTCTime -> String


-- | Type synonyms and data types.
module Network.Syncthing.Types

-- | Use the SERVER:PORT format for specifying servers.
type Server = Text
type Device = Text
type FolderName = Text
type Path = Text
type Host = Text
type Port = Int
type Addr = (Host, Maybe Port)

-- | Represents an entry in the discovery cache.
data CacheEntry
CacheEntry :: Addr -> Maybe UTCTime -> CacheEntry
getAddr :: CacheEntry -> Addr
getSeen :: CacheEntry -> Maybe UTCTime

-- | The current configuration data structure.
data Config
Config :: Int -> [FolderConfig] -> [DeviceConfig] -> GuiConfig -> OptionsConfig -> Config
getConfigVersion :: Config -> Int
getFolderConfigs :: Config -> [FolderConfig]
getDeviceConfigs :: Config -> [DeviceConfig]
getGuiConfig :: Config -> GuiConfig
getOptionsConfig :: Config -> OptionsConfig

-- | An address can be dynamic or static.
data AddressType
Dynamic :: AddressType
Address :: Addr -> AddressType

-- | The folder specific configuration.
data FolderConfig
FolderConfig :: FolderName -> Path -> [Device] -> Bool -> Int -> Bool -> Bool -> VersioningConfig -> Int -> Int -> Int -> Text -> Text -> FolderConfig
getId :: FolderConfig -> FolderName
getPath :: FolderConfig -> Path
getFolderDevices :: FolderConfig -> [Device]
getReadOnly :: FolderConfig -> Bool
getRescanIntervalS :: FolderConfig -> Int
getIgnorePerms :: FolderConfig -> Bool
getAutoNormalize :: FolderConfig -> Bool
getVersioning :: FolderConfig -> VersioningConfig
getCopiers :: FolderConfig -> Int
getPullers :: FolderConfig -> Int
getHashers :: FolderConfig -> Int
getOrder :: FolderConfig -> Text
getFolderInvalid :: FolderConfig -> Text

-- | Device specific configuration information.
data DeviceConfig
DeviceConfig :: Device -> Text -> [AddressType] -> Text -> Text -> Bool -> DeviceConfig
getDevice :: DeviceConfig -> Device
getDeviceName :: DeviceConfig -> Text
getAddresses :: DeviceConfig -> [AddressType]
getCompression :: DeviceConfig -> Text
getCertName :: DeviceConfig -> Text
getIntroducer :: DeviceConfig -> Bool

-- | Information about versioning.
data VersioningConfig
VersioningConfig :: Text -> Map Text Text -> VersioningConfig
getType :: VersioningConfig -> Text
getParams :: VersioningConfig -> Map Text Text

-- | Gui settings.
data GuiConfig
GuiConfig :: Bool -> Maybe Text -> Addr -> Text -> Text -> Bool -> GuiConfig
getEnabled :: GuiConfig -> Bool
getApiKey :: GuiConfig -> Maybe Text
getGuiAddress :: GuiConfig -> Addr
getUser :: GuiConfig -> Text
getPassword :: GuiConfig -> Text
getUseTLS :: GuiConfig -> Bool

-- | Various config settings.
data OptionsConfig
OptionsConfig :: [Addr] -> [Text] -> Bool -> Bool -> Int -> Text -> Int -> Int -> Int -> Bool -> Bool -> Int -> Int -> Int -> Int -> Text -> Bool -> Int -> Int -> Bool -> Int -> Bool -> Bool -> OptionsConfig
getListenAddress :: OptionsConfig -> [Addr]
getGlobalAnnounceServers :: OptionsConfig -> [Text]
getGlobalAnnounceEnabled :: OptionsConfig -> Bool
getLocalAnnounceEnabled :: OptionsConfig -> Bool
getLocalAnnouncePort :: OptionsConfig -> Int
getLocalAnnounceMCAddr :: OptionsConfig -> Text
getMaxSendKbps :: OptionsConfig -> Int
getMaxRecvKbps :: OptionsConfig -> Int
getReconnectionIntervalS :: OptionsConfig -> Int
getStartBrowser :: OptionsConfig -> Bool
getUpnpEnabled :: OptionsConfig -> Bool
getUpnpLeaseMinutes :: OptionsConfig -> Int
getUpnpRenewalMinutes :: OptionsConfig -> Int
getUpnpTimeoutSeconds :: OptionsConfig -> Int
getUrAccepted :: OptionsConfig -> Int
getUrUniqueID :: OptionsConfig -> Text
getRestartOnWakeup :: OptionsConfig -> Bool
getAutoUpgradeIntervalH :: OptionsConfig -> Int
getKeepTemporariesH :: OptionsConfig -> Int
getCacheIgnoredFiles :: OptionsConfig -> Bool
getProgressUpdateIntervalS :: OptionsConfig -> Int
getSymlinksEnabled :: OptionsConfig -> Bool
getLimitBandwidthInLan :: OptionsConfig -> Bool

-- | Contains the list of current connections.
data Connections
Connections :: Map Device Connection -> Connection -> Connections
getConnections :: Connections -> Map Device Connection
getTotal :: Connections -> Connection

-- | Connection information and some associated metadata.
data Connection
Connection :: Maybe UTCTime -> Integer -> Integer -> Addr -> Text -> Connection
getAt :: Connection -> Maybe UTCTime
getInBytesTotal :: Connection -> Integer
getOutBytesTotal :: Connection -> Integer
getAddress :: Connection -> Addr
getClientVersion :: Connection -> Text

-- | Contains information about a device.
data DeviceInfo
DeviceInfo :: Maybe UTCTime -> DeviceInfo
getLastSeen :: DeviceInfo -> Maybe UTCTime

-- | A directory tree contains files or subdirectories.
data DirTree
Dir :: Map Text DirTree -> DirTree
getDirContents :: DirTree -> Map Text DirTree
File :: Maybe UTCTime -> Integer -> DirTree

-- | file modification time
getModTime :: DirTree -> Maybe UTCTime

-- | file size
getFileSize :: DirTree -> Integer

-- | An error message and its timestamp.
data Error
Error :: Maybe UTCTime -> Text -> Error
getTime :: Error -> Maybe UTCTime
getMsg :: Error -> Text

-- | Contains the ignores list and a list of all compiled ignore patterns.
data Ignore
Ignore :: Maybe [Text] -> Maybe [Text] -> Ignore
getIgnores :: Ignore -> Maybe [Text]
getPatterns :: Ignore -> Maybe [Text]

-- | Information about the current status of a folder.
data Model
Model :: Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Maybe ModelState -> Maybe UTCTime -> Maybe Text -> Int -> Model
getGlobalBytes :: Model -> Integer
getGlobalDeleted :: Model -> Integer
getGlobalFiles :: Model -> Integer
getInSyncBytes :: Model -> Integer
getInSyncFiles :: Model -> Integer
getLocalBytes :: Model -> Integer
getLocalDeleted :: Model -> Integer
getLocalFiles :: Model -> Integer
getNeedBytes :: Model -> Integer
getNeedFiles :: Model -> Integer
getState :: Model -> Maybe ModelState
getStateChanged :: Model -> Maybe UTCTime
getInvalid :: Model -> Maybe Text
getModelVersion :: Model -> Int

-- | The current state of activity of a folder.
data ModelState
Idle :: ModelState
Scanning :: ModelState
Cleaning :: ModelState
Syncing :: ModelState

-- | Contains lists of files which are needed by a device for becoming in
--   sync.
data Need
Need :: [FileInfo] -> [FileInfo] -> [FileInfo] -> Need
getProgress :: Need -> [FileInfo]
getQueued :: Need -> [FileInfo]
getRest :: Need -> [FileInfo]

-- | Contains data available about a given file.
data DBFile
DBFile :: [Device] -> FileInfo -> FileInfo -> DBFile
getAvailability :: DBFile -> [Device]
getGlobal :: DBFile -> FileInfo
getLocal :: DBFile -> FileInfo

-- | All available information about a file.
data FileInfo
FileInfo :: Text -> Text -> Maybe UTCTime -> [Text] -> Int -> Integer -> Maybe Int -> FileInfo
getName :: FileInfo -> Text
getFlags :: FileInfo -> Text
getModified :: FileInfo -> Maybe UTCTime
getFileVersion :: FileInfo -> [Text]
getLocalVersion :: FileInfo -> Int
getSize :: FileInfo -> Integer
getNumBlocks :: FileInfo -> Maybe Int

-- | Contains general statistics about folders.
data FolderInfo
FolderInfo :: LastFile -> FolderInfo
getLastFile :: FolderInfo -> LastFile

-- | Information about the last synced file.
data LastFile
LastFile :: Text -> Maybe UTCTime -> LastFile
getFileName :: LastFile -> Text
getSyncedAt :: LastFile -> Maybe UTCTime

-- | Information about the system status and resource usage.
data System
System :: Integer -> Double -> Maybe (Map Server Bool) -> Int -> Text -> Integer -> Text -> Text -> Integer -> System
getAlloc :: System -> Integer
getCpuPercent :: System -> Double
getExtAnnounceOK :: System -> Maybe (Map Server Bool)
getGoRoutines :: System -> Int
getMyId :: System -> Text
getSys :: System -> Integer
getPathSeparator :: System -> Text
getTilde :: System -> Text
getUptime :: System -> Integer

-- | System messages.
data SystemMsg
Restarting :: SystemMsg
ShuttingDown :: SystemMsg
ResettingFolders :: SystemMsg
OtherSystemMsg :: Text -> SystemMsg

-- | Information about the current software version and upgrade
--   possibilities.
data Upgrade
Upgrade :: Text -> Bool -> Text -> Upgrade
getLatest :: Upgrade -> Text
getNewer :: Upgrade -> Bool
getRunning :: Upgrade -> Text

-- | Information about the data sent in the anonymous usage report.
data UsageReport
UsageReport :: Integer -> Integer -> Text -> Integer -> Integer -> Int -> Int -> Text -> Double -> Integer -> Integer -> Text -> Text -> UsageReport
getFolderMaxFiles :: UsageReport -> Integer
getFolderMaxMiB :: UsageReport -> Integer
getLongVersionR :: UsageReport -> Text
getMemorySize :: UsageReport -> Integer
getMemoryUsageMiB :: UsageReport -> Integer
getNumDevices :: UsageReport -> Int
getNumFolders :: UsageReport -> Int
getPlatform :: UsageReport -> Text
getSHA256Perf :: UsageReport -> Double
getTotFiles :: UsageReport -> Integer
getTotMiB :: UsageReport -> Integer
getUniqueId :: UsageReport -> Text
getVersionR :: UsageReport -> Text

-- | Current Syncthing version information.
data Version
Version :: Text -> Text -> Text -> Text -> Version
getArch :: Version -> Text
getLongVersion :: Version -> Text
getOs :: Version -> Text
getVersion :: Version -> Text


-- | Some useful utility functions.
module Network.Syncthing.Utils

-- | Parse server string (SERVER:PORT) into an address type.
parseAddr :: Server -> Addr

-- | Generate server string.
encodeAddr :: Addr -> Server

-- | Convert time string to UTCTime type.
toUTC :: String -> Maybe UTCTime

-- | Generate time string from UTC.
fromUTC :: UTCTime -> String


-- | This module provides functions for manual session handling.
--   
--   <b><i>Example Usage:</i></b>
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   import <a>Control.Lens</a> ((<a>&amp;</a>), (<a>.~</a>))
--   import <a>Network.Syncthing</a>
--   import qualified <a>Network.Syncthing.Get</a> as Get
--   
--   -- Customized configuration.
--   settings1 = <tt>defaultConfig</tt> <a>&amp;</a> <a>pServer</a> <a>.~</a> "192.168.0.10:8080"
--   
--   session1 = do
--       session &lt;- <a>newSyncSession</a> settings1
--       p       &lt;- <a>runSyncSession</a> session Get.<a>ping</a>
--       v       &lt;- <a>runSyncSession</a> session Get.<a>version</a>
--       <a>closeSyncSession</a> session
--       return (p, v)
--   
--   -- Customized configuration with disabled SSL certificate verification.
--   settings2 = <tt>defaultConfig</tt> <a>&amp;</a> <a>pHttps</a>   <a>.~</a> True
--                             <a>&amp;</a> <a>pManager</a> <a>.~</a> Left <a>noSSLVerifyManagerSettings</a>
--   
--   session2 = do
--       session &lt;- <a>newSyncSession</a> settings2
--       p       &lt;- <a>runSyncSession</a> session Get.<a>ping</a>
--       v       &lt;- <a>runSyncSession</a> session Get.<a>version</a>
--       <a>closeSyncSession</a> session
--       return (p, v)
--   </pre>
module Network.Syncthing.Session

-- | Holds the session configuration and the connection manager.
data SyncSession

-- | Create a new Syncthing session for with provided configuration. You
--   should reuse the session whenever possible because of connection
--   sharing.
newSyncSession :: SyncConfig -> IO SyncSession

-- | Close a Syncthing session.
closeSyncSession :: SyncSession -> IO ()

-- | Create a new session using the provided configuration, run the action
--   and close the session.
--   
--   <i>Examples:</i>
--   
--   <pre>
--   <a>withSyncSession</a> <tt>defaultConfig</tt> $ \session -&gt;
--       <a>runSyncSession</a> session $ <a>liftM2</a> (,) Get.<a>ping</a> Get.<a>version</a>
--   </pre>
--   
--   <pre>
--   import qualified <a>Network.Wreq</a> as Wreq
--   
--   let cfg = <tt>defaultConfig</tt> <a>&amp;</a> <a>pHttps</a>  <a>.~</a> True
--                           <a>&amp;</a> <a>pAuth</a>   <a>?~</a> Wreq.<a>basicAuth</a> "user" "pass"
--                           <a>&amp;</a> <a>pApiKey</a> <a>?~</a> "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
--   <a>withSyncSession</a> cfg $ \session -&gt;
--       <a>runSyncSession</a> session $ <a>liftM2</a> (,) Get.<a>ping</a> Get.<a>version</a>
--   </pre>
withSyncSession :: SyncConfig -> (SyncSession -> IO a) -> IO a

-- | Run a Syncthing request using connection sharing within a session.
runSyncSession :: SyncSession -> SyncM IO a -> IO (SyncResult a)


-- | Haskell bindings for the Syncthing REST API.
--   
--   The library is based on the <a>Network.Wreq</a> package and uses some
--   of wreq's functionalities for client configuration. For example, to
--   use authentication, you need to import the <a>Network.Wreq</a> module.
--   
--   <b><i>Example Usage:</i></b>
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   import <a>Control.Lens</a> ((<a>&amp;</a>), (<a>.~</a>), (<a>?~</a>))
--   import <a>Control.Monad</a> (<a>liftM2</a>)
--   import qualified <a>Network.Wreq</a> as Wreq
--   import <a>Network.Syncthing</a>
--   import qualified <a>Network.Syncthing.Get</a> as Get
--   
--   -- A single Syncthing request.
--   single = <a>syncthing</a> <a>defaultConfig</a> Get.<a>ping</a>
--   
--   -- Connection sharing for multiple Syncthing requests.
--   multiple1 = <a>withManager</a> $ \cfg -&gt;
--       <a>syncthing</a> cfg $ do
--           p &lt;- Get.<a>ping</a>
--           v &lt;- Get.<a>version</a>
--           return (p, v)
--   
--   -- Multiple Syncthing requests with connection sharing and customized configuration.
--   multiple2 = <a>withManager</a> $ \cfg -&gt; do
--       let cfg' = cfg <a>&amp;</a> <a>pServer</a> <a>.~</a> "192.168.0.10:8080"
--                      <a>&amp;</a> <a>pHttps</a>  <a>.~</a> True
--                      <a>&amp;</a> <a>pAuth</a>   <a>?~</a> Wreq.<a>basicAuth</a> "user" "pass"
--       <a>syncthing</a> cfg' $ <a>liftM2</a> (,) Get.<a>ping</a> Get.<a>version</a>
--   </pre>
module Network.Syncthing

-- | The result type of Syncthing requests.
type SyncResult a = Either SyncError a

-- | The SyncM Monad represents one or multiple Syncthing requests.
data SyncM m a

-- | Run Syncthing requests.
syncthing :: SyncConfig -> SyncM IO a -> IO (SyncResult a)

-- | Create a default configuration with a new manager for connection
--   sharing. The manager is released after running the Syncthing
--   actions(s). This is equivalent to:
--   
--   <pre>
--   <a>withManager'</a> <a>defaultManagerSettings</a>
--   </pre>
--   
--   <i>Examples:</i>
--   
--   <pre>
--   <a>withManager</a> $ \cfg -&gt;
--       <a>syncthing</a> cfg $ <a>liftM2</a> (,) Get.<a>ping</a> Get.<a>version</a>
--   </pre>
--   
--   <pre>
--   <a>withManager</a> $ \cfg -&gt; do
--       let cfg' = cfg <a>&amp;</a> <a>pServer</a> <a>.~</a> "192.168.0.10:8080"
--       <a>syncthing</a> cfg' $ <a>liftM2</a> (,) Get.<a>ping</a> Get.<a>version</a>
--   </pre>
withManager :: (SyncConfig -> IO a) -> IO a

-- | Create a manager with disabled SSL certificate verification. This is
--   equivalent to:
--   
--   <pre>
--   <a>withManager'</a> <a>noSSLVerifyManagerSettings</a>
--   </pre>
--   
--   <i>Example:</i>
--   
--   <pre>
--   <a>withManagerNoVerify</a> $ \cfg -&gt; do
--       let cfg' = cfg <a>&amp;</a> <a>pHttps</a> <a>.~</a> True
--       <a>syncthing</a> cfg' $ <a>liftM2</a> (,) Get.<a>ping</a> Get.<a>version</a>
--   </pre>
withManagerNoVerify :: (SyncConfig -> IO a) -> IO a

-- | Create a manager by using the provided manager settings.
--   
--   <i>Example:</i>
--   
--   <pre>
--   <a>withManager'</a> <a>noSSLVerifyManagerSettings</a> $ \cfg -&gt; do
--       let cfg' = cfg <a>&amp;</a> <a>pHttps</a> <a>.~</a> True
--       <a>syncthing</a> cfg' $ <a>liftM2</a> (,) Get.<a>ping</a> Get.<a>version</a>
--   </pre>
withManager' :: ManagerSettings -> (SyncConfig -> IO a) -> IO a

-- | The Syncthing configuration for specifying the Syncthing server,
--   authentication, the API Key etc.
data SyncConfig
SyncConfig :: Server -> Maybe Text -> Maybe Auth -> Bool -> Either ManagerSettings Manager -> SyncConfig
server :: SyncConfig -> Server
apiKey :: SyncConfig -> Maybe Text
auth :: SyncConfig -> Maybe Auth
https :: SyncConfig -> Bool
manager :: SyncConfig -> Either ManagerSettings Manager

-- | A lens for configuring the server address. Use the ADDRESS:PORT
--   format.
--   
--   <i>Example:</i>
--   
--   <pre>
--   let cfg = <tt>defaultConfig</tt> <a>&amp;</a> <a>pServer</a> <a>.~</a> "192.168.0.10:8080"
--   <tt>syncthing</tt> cfg Get.<a>ping</a>
--   </pre>
pServer :: Lens' SyncConfig Server

-- | A lens for specifying the Syncthing API Key.
--   
--   <i>Example:</i>
--   
--   <pre>
--   let cfg = <tt>defaultConfig</tt> <a>&amp;</a> <a>pApiKey</a> <a>?~</a> "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
--   <tt>syncthing</tt> cfg Get.<a>ping</a>
--   </pre>
pApiKey :: Lens' SyncConfig (Maybe Text)

-- | A lens for configuring request authentication provided by the
--   <a>Wreq</a> package (see <a>Auth</a>).
--   
--   <i>Example:</i>
--   
--   <pre>
--   import qualified <a>Network.Wreq</a> as Wreq
--   
--   let cfg = <tt>defaultConfig</tt> <a>&amp;</a> <a>pHttps</a> <a>.~</a> True
--                           <a>&amp;</a> <a>pAuth</a>  <a>?~</a> Wreq.<a>basicAuth</a> "user" "pass"
--   <tt>syncthing</tt> cfg Get.<a>ping</a>
--   </pre>
pAuth :: Lens' SyncConfig (Maybe Auth)

-- | A lens for enabling HTTPS usage.
--   
--   <i>Example:</i>
--   
--   <pre>
--   let cfg = <tt>defaultConfig</tt> <a>&amp;</a> <a>pHttps</a> <a>.~</a> True
--   <tt>syncthing</tt> cfg Get.<a>ping</a>
--   </pre>
pHttps :: Lens' SyncConfig Bool

-- | A lens for specifying your own ManagerSettings/Manager. For more
--   information, please refer to the <a>Network.HTTP.Client</a> package.
pManager :: Lens' SyncConfig (Either ManagerSettings Manager)

-- | The default Syncthing configuration. Customize it to your needs by
--   using record syntax or the SyncConfig lenses.
--   
--   <i>Example:</i>
--   
--   <pre>
--   &gt;&gt;&gt; defaultConfig
--   SyncConfig { server = "127.0.0.1:8384", apiKey = Nothing, auth = Nothing, https = False, manager = Left _ }
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; defaultConfig { server = "192.168.0.10:8080", apiKey = Just "XXXX" }
--   SyncConfig { server = "192.168.0.10:8080", apiKey = Just "XXXX", auth = Nothing, https = False, manager = Left _ }
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; defaultConfig &amp; pServer .~ "192.168.0.10:8080" &amp; pApiKey ?~ "XXXX"
--   SyncConfig { server = "192.168.0.10:8080", apiKey = Just "XXXX", auth = Nothing, https = False, manager = Left _ }
--   </pre>
defaultConfig :: SyncConfig

-- | The Syncthing default folder (-&gt; "default").
defaultFolder :: FolderName

-- | The default manager settings used by <a>defaultConfig</a>.
defaultManagerSettings :: ManagerSettings

-- | Alternative manager settings with disabled SSL certificate
--   verification.
noSSLVerifyManagerSettings :: ManagerSettings

-- | Set the response timeout (in microseconds). Default is 300 seconds.
setResponseTimeout :: ManagerSettings -> Int -> ManagerSettings
data DeviceError
IncorrectLength :: DeviceError
IncorrectCheckDigit :: DeviceError
OtherDeviceError :: Text -> DeviceError
data SyncError
ParseError :: String -> SyncError
NotAuthorized :: SyncError
CSRFError :: SyncError
NotFound :: SyncError
InvalidDeviceId :: DeviceError -> SyncError
NoSuchFolder :: SyncError
