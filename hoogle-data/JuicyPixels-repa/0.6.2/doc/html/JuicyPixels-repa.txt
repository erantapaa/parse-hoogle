-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convenience functions to obtain array representations of images.
--   
--   This wraps the Juicy.Pixels library to convert into <a>Repa</a> and
--   <a>Data.Vector.Storable</a> formats.
@package JuicyPixels-repa
@version 0.6.2

module Codec.Picture.Repa

-- | <tt>Img a</tt> is an image where the phantom type <tt>a</tt> indicates
--   the image format
--   
--   All images are held in a three dimensional <tt>repa</tt> array. If the
--   image format is only two dimensional (ex: R, G, or B) then the shape
--   is <tt>Z :. y :. x :. 1</tt>.
data Img a
imgData :: Img a -> Array F DIM3 Word8

-- | Converts from <tt>JuicyPixels</tt> type (Usually <a>Image</a> or
--   <a>DynamicImage</a> to the repa-based <a>Img</a> type.
convertImage :: ConvertImage a b => a -> Img b
readImage :: DecodeImage a => FilePath -> IO (Either String (Img a))
decodeImage :: DecodeImage a => ByteString -> Either String (Img a)
readImageRGBA :: FilePath -> IO (Either String (Img RGBA))
readImageRGB :: FilePath -> IO (Either String (Img RGB))
readImageR :: FilePath -> IO (Either String (Img R))
readImageG :: FilePath -> IO (Either String (Img G))
readImageB :: FilePath -> IO (Either String (Img B))
decodeImageRGBA :: ByteString -> Either String (Img RGBA)
decodeImageRGB :: ByteString -> Either String (Img RGB)
decodeImageR :: ByteString -> Either String (Img R)
decodeImageG :: ByteString -> Either String (Img G)
decodeImageB :: ByteString -> Either String (Img B)

-- | A 32-bit image with full red, green, blue and alpha channels.
--   
--   The image is stored as Height x Width x ColorChannel.
--   
--   The color channel is stored in RGBA order. For the common OpenGL
--   ordering users might want to use <a>reverseColorChannel</a>.
data RGBA

-- | A 24-bit image with red, green and blue channels
data RGB

-- | An all-red image
data R

-- | An all-green image
data G

-- | An all-blue image
data B

-- | O(n) returning (pointer, length, offset)
toForeignPtr :: Img RGBA -> (ForeignPtr Word8, Int, Int)

-- | <tt>toByteString arr</tt> converts images to bytestrings, which is
--   often useful for Gloss.
toByteString :: Img a -> ByteString

-- | O(n) Convert to an unboxed vector
toUnboxed :: Img a -> Vector Word8
class Collapsable a t
collapseColorChannel :: Collapsable a t => Img a -> Array D DIM2 t
onImg :: (Array F DIM3 Word8 -> Array F DIM3 Word8) -> Img a -> Img a

-- | By default, the color channel for <a>RGBA</a> indexes 0 -&gt; R, 1
--   -&gt; G, 2 -&gt; B, 3 -&gt; A. This is the AGBR byte ordering in
--   OpenGL. For rendering with OpenGL's RGBA PixelFormat be sure to call
--   reverseColorChannel before converting to a Vector.
reverseColorChannel :: Img a -> Img a
flipHorizontally :: Array F DIM3 Word8 -> Array F DIM3 Word8
flipVertically :: Array F DIM3 Word8 -> Array F DIM3 Word8
vConcat :: [Array F DIM3 Word8] -> Array F DIM3 Word8
hConcat :: [Array F DIM3 Word8] -> Array F DIM3 Word8
class ToRGBAChannels a
toRGBAChannels :: ToRGBAChannels a => a -> PixelRGBA8
instance (ToRGBAChannels a, Pixel a) => ConvertImage (Image a) B
instance (ToRGBAChannels a, Pixel a) => ConvertImage (Image a) G
instance (ToRGBAChannels a, Pixel a) => ConvertImage (Image a) R
instance (ToRGBAChannels a, Pixel a) => ConvertImage (Image a) RGB
instance (ToRGBAChannels a, Pixel a) => ConvertImage (Image a) RGBA
instance ConvertImage DynamicImage B
instance ConvertImage DynamicImage G
instance ConvertImage DynamicImage R
instance ConvertImage DynamicImage RGB
instance ConvertImage DynamicImage RGBA
instance ToRGBAChannels Pixel8
instance ToRGBAChannels PixelYA8
instance ToRGBAChannels PixelRGB8
instance ToRGBAChannels PixelYCbCr8
instance ToRGBAChannels PixelRGBA8
instance Collapsable RGBA (Word8, Word8, Word8)
instance Collapsable RGBA (Word8, Word8, Word8, Word8)
instance DecodeImage B
instance DecodeImage G
instance DecodeImage R
instance DecodeImage RGB
instance DecodeImage RGBA
