-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell cheat sheet in PDF and literate formats.
--   
--   This module includes a PDF giving a synopsis of Haskell syntax,
--   keywords, and other essentials. It also has a literate source file
--   which allows all examples to be inspected.
@package CheatSheet
@version 1.1

module CheatSheet
data Choices
First :: String -> Choices
Second :: Choices
Third :: Choices
Fourth :: Choices
class Flavor a
flavor :: (Flavor a) => a -> String
data MyType
MyValue1 :: MyType
MyValue2 :: MyType
data Point
TwoD :: Int -> Int -> Point
ThreeD :: Int -> Int -> Int -> Point
data Poly
Triangle :: Point -> Point -> Point -> Poly
data User
User :: String -> User
Admin :: String -> User
data Slot1 a
Slot1 :: a -> Slot1 a
Empty1 :: Slot1 a
data Slot2 a
Slot2 :: a -> Int -> Slot2 a
Empty2 :: Slot2 a
data Contact
Contact :: String -> String -> String -> Contact
ctName :: Contact -> String
ctEmail :: Contact -> String
ctPhone :: Contact -> String
data Con
Con :: String -> Con
conValue :: Con -> String
Uncon :: String -> Con
conValue :: Con -> String
Noncon :: Con
data (Num a) => SomeNumber a
Two :: a -> a -> SomeNumber a
Three :: a -> a -> a -> SomeNumber a
data Priority
Low :: Priority
Medium :: Priority
High :: Priority
data Alarm
Soft :: Alarm
Loud :: Alarm
Deafening :: Alarm
newtype Home
H :: String -> Home
newtype Work
W :: String -> Work
data Phone
Phone :: Home -> Work -> Phone
type FirstName = String
type LastName = String
data Person
Person :: FirstName -> LastName -> Person
data Color
C :: Int -> Int -> Int -> Color
red :: Color -> Int
green :: Color -> Int
blue :: Color -> Int
data Pixel
P :: Color -> Pixel
class Def a
defValue :: (Def a) => a -> a
(##) :: String -> String -> String
neg :: Int -> Int
pos :: Int -> Int
instance Show Pixel
instance Eq Pixel
instance Show Color
instance Eq Color
instance Read Alarm
instance Show Alarm
instance Show Priority
instance Show MyType
instance Eq MyType
instance Show Choices
instance Eq Choices
instance (Def a) => Def (Maybe a)
instance Def Char
instance Def Bool
instance Flavor Char
instance Flavor Bool
