-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Extract all JavaScript from an HTML page and consolidate it in one script.
--   
@package jespresso
@version 1.0.2


-- | A wrapper around Network.HTTP to present a simpler interface for
--   requesting pages via HTTP
module Network.Browser.Simple

-- | Requests a web page specified by the URI, including optional cookies.
--   Returns the contents of the page as a <tt>String</tt> and new cookies.
--   Follows redirects, decodes the response body, if possible. Can fail if
--   decoding is impossible.
download :: URI -> [Cookie] -> IO (String, [Cookie])


-- | Extraction and consolidation of JavaScript code in an HTML page.
module Text.Html.Consolidate

-- | Takes an HTML page source as a string and an optional base URI (for
--   resolving relative URI's) and produces an HTML page with all the
--   scripts consolidated in one inline script element.
consolidate :: String -> Maybe URI -> IO String

-- | Extacts all JavaScript code in the given HTML page source as a single
--   program. Takes an optional base URI for resolving relative URI's.
extract :: String -> Maybe URI -> IO (JavaScript ())

-- | Extacts and pretty-prints all JavaScript code in the given HTML page
--   source as a single program. Takes an optional base URI for resolving
--   relative URI's.
--   
--   <pre>
--   extractPretty s muri = liftM (show . prettyPrint) $ extract s muri
--   </pre>
extractPretty :: String -> Maybe URI -> IO String

-- | Our XML transformation arrow type
type TArr a b = IOStateArrow ConsState a b

-- | The consolidation function with an arrow interface.
--   
--   <pre>
--   consolidateArr = extractJSArr &gt;&gt;&gt; insertJSArr
--   </pre>
consolidateArr :: TArr XmlTree XmlTree

-- | Extracts all JavaScript from HTML. There shouldn't be any JavaScript
--   in the resulting XmlTree
extractJSArr :: TArr XmlTree (XmlTree, JavaScript ())

-- | A constructor function for making an initial consolidation state
--   (needed for running the arrows in the advanced API). Example usage:
--   
--   <pre>
--   runXIOState (initialState $ initialConsState ignoreErrors muri []) $ someArrow
--   </pre>
initialConsState :: Bool -> Maybe URI -> [Cookie] -> ConsState

-- | Inserts JavaScript at the end of the HTML body.
insertJSArr :: TArr (XmlTree, JavaScript a) XmlTree

-- | A wrapper around the hxt parser with commonly used arguments
parseHTML :: String -> Maybe URI -> TArr a XmlTree

-- | A wrapper around hxt to pretty print html out of the arrow
renderHTML :: ConsState -> TArr XmlTree XmlTree -> IO String

-- | Consolidation state
data ConsState
