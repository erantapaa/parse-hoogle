-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Multiplate instance for JavaScript.
--   
--   Provides a Multiplate instance for the JavaScript AST in the WebBits
--   package. The MultiplateSimplified module is based on the
--   multiplate-simplified package, which makes it a bit more readable, and
--   easier to work with but the extra type class it uses might affect
--   performance.
@package WebBits-multiplate
@version 0.0.0.1

module BrownPLT.JavaScript.MultiplateSimplified
data Plate f
Plate :: (forall a. JavaScript a -> f (JavaScript a)) -> (forall a. Id a -> f (Id a)) -> (InfixOp -> f InfixOp) -> (AssignOp -> f AssignOp) -> (UnaryAssignOp -> f UnaryAssignOp) -> (PrefixOp -> f PrefixOp) -> (forall a. Prop a -> f (Prop a)) -> (forall a. LValue a -> f (LValue a)) -> (forall a. Expression a -> f (Expression a)) -> (forall a. CaseClause a -> f (CaseClause a)) -> (forall a. CatchClause a -> f (CatchClause a)) -> (forall a. VarDecl a -> f (VarDecl a)) -> (forall a. ForInit a -> f (ForInit a)) -> (forall a. ForInInit a -> f (ForInInit a)) -> (forall a. Statement a -> f (Statement a)) -> Plate f
pJavaScript :: Plate f -> forall a. JavaScript a -> f (JavaScript a)
pId :: Plate f -> forall a. Id a -> f (Id a)
pInfixOp :: Plate f -> InfixOp -> f InfixOp
pAssignOp :: Plate f -> AssignOp -> f AssignOp
pUnaryAssignOp :: Plate f -> UnaryAssignOp -> f UnaryAssignOp
pPrefixOp :: Plate f -> PrefixOp -> f PrefixOp
pProp :: Plate f -> forall a. Prop a -> f (Prop a)
pLValue :: Plate f -> forall a. LValue a -> f (LValue a)
pExpression :: Plate f -> forall a. Expression a -> f (Expression a)
pCaseClause :: Plate f -> forall a. CaseClause a -> f (CaseClause a)
pCatchClause :: Plate f -> forall a. CatchClause a -> f (CatchClause a)
pVarDecl :: Plate f -> forall a. VarDecl a -> f (VarDecl a)
pForInit :: Plate f -> forall a. ForInit a -> f (ForInit a)
pForInInit :: Plate f -> forall a. ForInInit a -> f (ForInInit a)
pStatement :: Plate f -> forall a. Statement a -> f (Statement a)
instance IsProjector Plate (ForInInit a)
instance IsProjector Plate (ForInit a)
instance IsProjector Plate (VarDecl a)
instance IsProjector Plate (CatchClause a)
instance IsProjector Plate (CaseClause a)
instance IsProjector Plate (LValue a)
instance IsProjector Plate (Prop a)
instance IsProjector Plate PrefixOp
instance IsProjector Plate UnaryAssignOp
instance IsProjector Plate AssignOp
instance IsProjector Plate InfixOp
instance IsProjector Plate (Id a)
instance IsProjector Plate (JavaScript a)
instance IsProjector Plate (Expression a)
instance IsProjector Plate (Statement a)
instance Multiplate Plate

module BrownPLT.JavaScript.Multiplate
data Plate f
Plate :: (forall a. JavaScript a -> f (JavaScript a)) -> (forall a. Id a -> f (Id a)) -> (InfixOp -> f InfixOp) -> (AssignOp -> f AssignOp) -> (UnaryAssignOp -> f UnaryAssignOp) -> (PrefixOp -> f PrefixOp) -> (forall a. Prop a -> f (Prop a)) -> (forall a. LValue a -> f (LValue a)) -> (forall a. Expression a -> f (Expression a)) -> (forall a. CaseClause a -> f (CaseClause a)) -> (forall a. CatchClause a -> f (CatchClause a)) -> (forall a. VarDecl a -> f (VarDecl a)) -> (forall a. ForInit a -> f (ForInit a)) -> (forall a. ForInInit a -> f (ForInInit a)) -> (forall a. Statement a -> f (Statement a)) -> Plate f
pJavaScript :: Plate f -> forall a. JavaScript a -> f (JavaScript a)
pId :: Plate f -> forall a. Id a -> f (Id a)
pInfixOp :: Plate f -> InfixOp -> f InfixOp
pAssignOp :: Plate f -> AssignOp -> f AssignOp
pUnaryAssignOp :: Plate f -> UnaryAssignOp -> f UnaryAssignOp
pPrefixOp :: Plate f -> PrefixOp -> f PrefixOp
pProp :: Plate f -> forall a. Prop a -> f (Prop a)
pLValue :: Plate f -> forall a. LValue a -> f (LValue a)
pExpression :: Plate f -> forall a. Expression a -> f (Expression a)
pCaseClause :: Plate f -> forall a. CaseClause a -> f (CaseClause a)
pCatchClause :: Plate f -> forall a. CatchClause a -> f (CatchClause a)
pVarDecl :: Plate f -> forall a. VarDecl a -> f (VarDecl a)
pForInit :: Plate f -> forall a. ForInit a -> f (ForInit a)
pForInInit :: Plate f -> forall a. ForInInit a -> f (ForInInit a)
pStatement :: Plate f -> forall a. Statement a -> f (Statement a)
instance Multiplate Plate
