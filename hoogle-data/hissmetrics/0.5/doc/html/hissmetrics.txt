-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Unofficial API bindings to KISSmetrics.
--   
--   This package provides simple functions that allow you to access
--   KISSmetrics using Haskell.
@package hissmetrics
@version 0.5


-- | This module is meant to be imported qualified:
--   
--   <pre>
--   import qualified Web.KISSmetrics as KISSmetrics
--   </pre>
module Web.KISSmetrics

-- | Your KISSmetrics API key.
type APIKey = ByteString

-- | KISSmetrics names and identities are limited to at most 255 characters
--   and all commas (<tt>,</tt>) and colons (<tt>:</tt>) are changed to
--   spaces (<tt> </tt>). Nothing is checked by this Haskell library, so be
--   careful =).
type SimpleText = ByteString

-- | A KISSmetrics property. The property names needs to follow the rules
--   outlined on <a>SimpleText</a><tt>s</tt> documentation. The property
--   value, on the other hand, are only limited to 8 KiB and don't have any
--   other restrictions.
type Property = (SimpleText, Text)

-- | A timestamp used only to ignore duplicated events.
data Timestamp

-- | Use KISSmetrics' servers time as the timestamp.
Automatic :: Timestamp

-- | Use given time as the timestamp. If possible, use <a>Manual</a> since
--   it allows you to safely resend events that appear to have failed
--   without being afraid of duplicates. See also <a>generateTimestamp</a>.
Manual :: UTCTime -> Timestamp

-- | Generate a <a>Manual</a> timestamp with the current time.
generateTimestamp :: IO Timestamp

-- | Call KISSmetrics' API. See <a>CallType</a> for documentation about
--   which calls you may make.
--   
--   KISSmetrics does not return errors even when an error occurs and
--   there's absolutely no way of knowing if your request went through.
--   However, this function <i>may</i> throw an exception if we fail to
--   make the request to KISSmetrics (e.g. if there's a problem with your
--   server's Internet connection).
--   
--   Note that official KISSmetrics' APIs provide many functions (usually
--   four) while we provide just this one and a sum data type. This
--   function alone does the work of <tt>record</tt>, <tt>set</tt>,
--   <tt>identify</tt> and <tt>alias</tt>.
--   
--   TODO: Currently there's no support for automatically retrying failed
--   request, you need to retry yourself.
call :: Manager -> APIKey -> CallType -> IO ()

-- | A type of call that may be made to KISSmetrics. It's defined as a GADT
--   where event names and identities are existential values.
--   
--   Since Haddock currently has problems with GADTs, here's the
--   documentation about each constructor:
--   
--   <ul>
--   <li><i><a>Record</a></i> Record an event. <a>eventName</a> is the name
--   of the event being recorded, <a>identity</a> is the identity of the
--   person doing the event and <a>properties</a> are any other optional
--   properties you may want.</li>
--   <li><i><a>SetProps</a></i> Set user properties without recording an
--   event. <a>identity</a> is the identity of the person whose properties
--   will be changed and <a>properties</a> are the properties to be
--   set.</li>
--   <li><i><a>Alias</a></i> Alias two identities (<a>identity</a> and
--   <a>identity'</a>) as the same one.</li>
--   </ul>
--   
--   See also <a>http://support.kissmetrics.com/apis/specifications</a>.
data CallType
Record :: event -> ident -> Timestamp -> [Property] -> CallType
eventName :: CallType -> event
identity :: CallType -> ident
timestamp :: CallType -> Timestamp
properties :: CallType -> [Property]
SetProps :: ident -> Timestamp -> [Property] -> CallType
identity :: CallType -> ident
timestamp :: CallType -> Timestamp
properties :: CallType -> [Property]
Alias :: ident -> ident' -> CallType
identity :: CallType -> ident
identity' :: CallType -> ident'

-- | Type class of data types that are event names.
--   
--   You may just use <a>SimpleText</a> (which is the only instance
--   provided by default), but you may also create your own data type for
--   event names and add an instance of this class.
class Show event => EventName event
fromEventName :: EventName event => event -> SimpleText

-- | Type class of data types that are user identities.
--   
--   You may just use <a>SimpleText</a> (which is the only instance
--   provided by default), but you may also create your own data type for
--   event names and add an instance of this class.
class Show ident => Identity ident
fromIdentity :: Identity ident => ident -> SimpleText
instance Typeable Timestamp
instance Typeable CallType
instance Show CallType
instance Eq Timestamp
instance Ord Timestamp
instance Show Timestamp
instance Read Timestamp
instance Identity ByteString
instance EventName ByteString
