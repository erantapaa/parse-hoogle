-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parser, pretty printer, quasiquoter, and Arbitrary helpers for the untyped lambda calculus.
--   
--   Parser, pretty printer, quasiquoter, and Arbitrary helpers for the
--   untyped lambda calculus.
@package LambdaPrettyQuote
@version 0.0.0.1

module Language.Lambda.Pretty

-- | Pretty prints a Expr
ppr :: Expr -> String

-- | Pretty prints a GExpr
g_ppr :: Show a => GExpr a -> String

module Language.Lambda.Parser
type M = Identity
type Output = Expr
top_expr :: ParsecT String u M Output
parse_expr :: ParsecT String u M Output
parse_aexpr :: ParsecT String u M Output
parse_lambda :: ParsecT String u M Output
parse_app :: ParsecT String u M Output
parse_atom :: ParsecT String u M Output
parse_var :: ParsecT String u M Output
parse_sym :: ParsecT String u M String
parens' :: Stream s m Char => ParsecT s u m b -> ParsecT s u m b

module Language.Lambda.Quote
lam :: QuasiQuoter
parseExpr :: Monad m => (String, Int, Int) -> String -> m Expr
quoteExprExp :: String -> ExpQ
instance Data a => Data (GExpr a)
instance Typeable1 GExpr

module Language.Lambda.Arbitrary

-- | An arbitrary function for Expr. See the example above.
expr_arb :: Gen Expr

-- | Generates a string like <a>x_{n}</a> where n is positive integer
sym_arbitrary :: Gen String

-- | Shrink function for an GExpr. See the example at the top of the module
gexpr_shrink :: GExpr a -> [GExpr a]

-- | Helper function for creating generators for GExpr. Takes in a
--   generator for the symbol type
gexpr_arb :: Gen a -> Gen (GExpr a)

-- | Helper function for creating generators for GExpr. Takes in a
--   generator for the symbol type and the <a>depth</a> of the expression
--   tree
gexpr_arb' :: Int -> Gen s -> Gen (GExpr s)
