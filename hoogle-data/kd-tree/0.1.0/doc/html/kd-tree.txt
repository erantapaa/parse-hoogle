-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple k-d tree implementation
--   
@package kd-tree
@version 0.1.0

module Data.KdTree

-- | The k-d tree is a data structure capable of efficiently answering
--   nearest neighbor search queries in low-dimensional spaces. As a rule
--   of thumb, for efficient lookups the number of points in <tt>k</tt>
--   dimensions should greatly exceed <tt>2^k</tt>
data KdTree f a

-- | Construct a <tt>KdTree</tt> from a vector of points
fromVector :: (Ord a, Vector v (f a)) => [E f] -> v (f a) -> KdTree f a

-- | Find the point nearest to the given point
nearest :: (Ord a, Num a, Metric f) => f a -> KdTree f a -> Maybe (f a)

-- | List all points in a tree
toList :: KdTree f a -> [f a]

-- | Verify that the tree is well-formed (recursively)
isValid :: Ord a => KdTree f a -> Bool

-- | Given names for the axes show the tree
showKdTree :: Show (f a) => f String -> KdTree f a -> String
