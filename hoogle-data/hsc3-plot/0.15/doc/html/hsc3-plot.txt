-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell SuperCollider Plotting
--   
@package hsc3-plot
@version 0.15

module Sound.SC3.Plot.Histogram
data Histogram x
Histogram :: [x] -> [x] -> Histogram x

-- | Calculate <a>Histogram</a> for number of bins <i>n</i> and sample data
--   <i>x</i>.
histogram :: Int -> [Double] -> Histogram Double
instance Eq x => Eq (Histogram x)
instance Show x => Show (Histogram x)


-- | Simple-minded plotters for <a>Sound.SC3</a>.
module Sound.SC3.Plot

-- | <a>minimum</a> and <a>maximum</a>.
minmax :: Ord t => [t] -> (t, t)
linlin'' :: Fractional a => (a, a) -> (a, a) -> a -> a

-- | <a>linlin</a> of <i>z</i>.
normalise_seq :: (Fractional b, Ord b) => (b, b) -> (b, b) -> [b] -> [b]

-- | Variant that derives domain from <a>minmax</a> of <i>z</i>.
normalise_seq' :: (Fractional b, Ord b) => (b, b) -> [b] -> [b]

-- | <i>n</i> <a>*</a> <i>n</i>.
square :: Num a => a -> a

-- | Root mean square.
rms :: Floating a => [a] -> a

-- | <a>rms</a> of <a>chunksOf</a>.
resample_rms :: Floating b => Int -> [b] -> [b]

-- | Class of plottable numbers. This is necessary to allow
--   <a>Rational</a>, the show instance of which cannot be read by
--   <tt>gnuplot</tt>.
class Num n => PNum n
pshow :: PNum n => n -> String
ratio_to_double :: Integral n => Ratio n -> Double

-- | Attibutes are generated given (i,j) where <i>i</i> is the data set
--   (one indexed) and <i>j</i> is the number of data sets.
type Attr = (Int, Int) -> String
attr_frac :: String -> Double -> Attr
attr_frac_lines :: Double -> Attr

-- | List of <i>y</i> values, at (implicit) equal <i>x</i> increments.
type Table t = [t]

-- | Plot <a>Table</a> data.
--   
--   <pre>
--   plotTable [[0,2..12],[0..6],[0,4..12]]
--   plotTable [map (\x -&gt; x * cos (x / 20)) [-400 .. 800]]
--   </pre>
plotTable :: PNum t => [Table t] -> IO ()

-- | Variant to plot singular <a>Table</a>.
plotTable1 :: PNum t => Table t -> IO ()

-- | Variant of <a>plotTable</a> where each value is drawn as an impulse.
--   
--   <pre>
--   plotImpulses [[0,2..12],[0..6],[0,4..12]]
--   plotImpulses [map (\x -&gt; x * cos (x / 20)) [-400 .. 800]]
--   </pre>
plotImpulses :: PNum t => [[t]] -> IO ()

-- | Variant that scales each plot lie within (0,1) and displaces them.
--   
--   <pre>
--   plot_table_displace [[0,2..12],[0..6],[0,4..12]]
--   </pre>
plot_table_displace :: (Enum t, Fractional t, Ord t, PNum t) => [[t]] -> IO ()

-- | Variant that normalises each table separately.
--   
--   <pre>
--   plot_table_displace_nrm [[0,2..12],[0..6],[0,4..12]]
--   </pre>
plot_table_displace_nrm :: (Enum t, Fractional t, Ord t, PNum t) => [[t]] -> IO ()

-- | Cartesian (<i>x</i>,<i>y</i>) pair.
type P2 t = (t, t)

-- | List of <a>P2</a>.
type Coord t = [P2 t]

-- | Plot set of <a>Coord</a>.
--   
--   <pre>
--   let {x = [-pi,-pi + 0.01 .. pi]
--       ;f r t = (r t * cos t,r t * sin t)}
--   in plot_p2 (attr_frac_lines 0.5)
--              [zip (map cos x) (map sin x)
--              ,zip (map cos x) (map (sin . (* 3)) x)
--              ,map (f ((/ (2 * pi)) . (+ pi))) x]
--   </pre>
plot_p2 :: PNum t => Attr -> [Coord t] -> IO ()

-- | <a>plot_p2</a> of <tt>with lines</tt>.
plot_p2_ln :: PNum t => [Coord t] -> IO ()

-- | <a>plot_p2</a> of <tt>with points</tt>.
--   
--   <pre>
--   let f a b c d (x,y) =
--       (x ** 2 - y ** 2 + a * x + b * y
--       ,2 * x * y + c * x + d * y)
--   in plot_p2_pt [take 5000 (iterate (f 0.9 (-0.6013) 2.0 0.5) (0.1,0.0))]
--   </pre>
plot_p2_pt :: PNum t => [Coord t] -> IO ()

-- | <a>plot_p2</a> of <tt>with steps</tt>.
--   
--   <pre>
--   plot_p2_stp [[(0,0),(1,1),(2,0.5),(4,6),(5,1),(6,0.25)]]
--   </pre>
plot_p2_stp :: PNum t => [Coord t] -> IO ()

-- | Cartesian (<i>x</i>,<i>y</i>,<i>z</i>) triple.
type P3 t = (t, t, t)

-- | List of <a>P3</a>.
type Path t = [P3 t]

-- | Three-dimensional variant of <a>plot_p2</a>.
--   
--   <pre>
--   let {t' = [-pi,-pi + 0.01 .. pi]
--       ;f0 n d = sin . (+) d . (*) n
--       ;f1 t = (f0 1 (pi/2) t,f0 3 0 t,f0 5 0 t)
--       ;e' = [0,0.005 .. pi]
--       ;f2 a b r e t = ((a * t + r * sin e) * cos t
--                       ,(a * t + r * sin e) * sin t
--                       ,b * t + r * (1 - cos e))}
--   in plot_p3 (const "with lines")
--              [map f1 t'
--              ,zipWith (f2 0.25 0.25 0.25) e' t']
--   </pre>
plot_p3 :: PNum t => Attr -> [Path t] -> IO ()

-- | <a>plot_p3</a> of <tt>with lines</tt>.
plot_p3_ln :: PNum t => [Path t] -> IO ()

-- | <a>plot_p3</a> of <tt>with points pt 0</tt>.
plot_p3_pt :: PNum t => [Path t] -> IO ()

-- | List of (<a>P2</a>,<a>P2</a>) vectors.
type Vc t = [(P2 t, P2 t)]

-- | Plot vectors given as (<i>p</i>,<i>q</i>).
--   
--   <pre>
--   let {p = [((0,0),(2,1)),((2,2),(3,2)),((3,4),(4,1))]
--       ;d = [1,2,3,2,3,2,1]
--       ;x = 0 : scanl1 (+) d
--       ;y = [6,4,5,3,7,2,8]
--       ;f x y d = ((x,y),(x+d,y))}
--   in plotVectors [p,zipWith3 f x y d]
--   </pre>
plotVectors :: (PNum t, Num t) => [Vc t] -> IO ()

-- | Plot regular matrix data.
--   
--   <pre>
--   plotMatrix ["set palette grey","unset colorbox"] [[1,3,2],[6,4,5],[8,9,7]]
--   </pre>
--   
--   <pre>
--   let d = [[1.00000000,1.00000000,1.00000000,0.73961496]
--           ,[1.00000000,1.00000000,1.00000000,0.39490538]
--           ,[0.53443549,0.31331112,0.90917979,0.58216201]
--           ,[0.35888692,0.7361968,0.95389629,0.94283073]
--           ,[0.85763543,0.1405479,0.78166569,0.43739318]
--           ,[0.18519824,0.31907815,0.18394244,0.01633875]
--           ,[0.0442339,0.33393132,0.77247883,0.79683943]
--           ,[0.8472137,0.42471225,0.94257581,0.70417117]]
--   in plotMatrix ["set palette color"] d
--   </pre>
plotMatrix :: (PNum t, Num t) => [String] -> [[t]] -> IO ()

-- | Plot <a>Envelope</a> data.
--   
--   <pre>
--   import Sound.SC3
--   </pre>
--   
--   <pre>
--   plotEnvelope [envPerc 0.2 1
--                ,envSine 1 0.75
--                ,envADSR 0.4 0.4 0.8 0.9 1 (EnvNum (-4)) 0]
--   </pre>
plotEnvelope :: (PNum t, Ord t, Floating t, Enum t) => [Envelope t] -> IO ()

-- | <a>plotTable1</a> of <a>b_fetch</a>.
--   
--   <pre>
--   withSC3 (plot_buffer1 0)
--   </pre>
plot_buffer1 :: (MonadIO m, DuplexOSC m) => Int -> m ()

-- | <a>plotTable1</a> of <a>resample_rms</a> of <a>b_fetch</a>.
--   
--   <pre>
--   withSC3 (plot_buffer1_rms 512 0)
--   </pre>
plot_buffer1_rms :: (MonadIO m, DuplexOSC m) => Int -> Int -> m ()

-- | <a>plot_table1_resamp1</a> of <a>b_fetch</a>.
--   
--   <pre>
--   withSC3 (plot_buffer1_resamp1 512 0)
--   </pre>
plot_buffer1_resamp1 :: (MonadIO m, DuplexOSC m) => Int -> Int -> m ()

-- | <a>plot_table_displace</a> of <a>mapM</a> of <a>b_fetch</a>.
plot_buffer :: (MonadIO m, DuplexOSC m) => [Int] -> m ()

-- | <a>plot_table_displace_nrm</a> of <a>mapM</a> of <a>b_fetch</a>.
plot_buffer_nrm :: (MonadIO m, DuplexOSC m) => [Int] -> m ()

-- | Plot <a>Histogram</a> data.
--   
--   <pre>
--   plotHistogram [histogram 3 [0,0,1,2,2,2]
--                 ,histogram 9 [1,2,2,3,3,3,4,4,4,4]]
--   </pre>
plotHistogram :: PNum t => [Histogram t] -> IO ()

-- | <a>plotTable1</a> of <a>toList</a>.
plot_table1_vector :: PNum t => Vector t -> IO ()

-- | <a>plot_table1_vector</a> of <a>resamp1</a>.
--   
--   <pre>
--   d &lt;- withSC3 (b_fetch 512 0)
--   plot_table1_resamp1 1024 (V.fromList d)
--   </pre>
plot_table1_resamp1 :: (Enum t, RealFrac t, PNum t) => Int -> Vector t -> IO ()

-- | <a>plot_p2_ln</a>
plotCoord :: PNum t => [Coord t] -> IO ()

-- | <a>plot_p2_pt</a>
plotPoints :: PNum t => [Coord t] -> IO ()

-- | <a>plot_p2_stp</a>
plotCoord_steps :: PNum t => [Coord t] -> IO ()

-- | <a>plot_p3_ln</a>
plotPath :: PNum t => [Path t] -> IO ()

-- | Plot size (width,height).
type PlotSize = (Double, Double)

-- | Plot options.
data PlotOpt
PlotOpt :: Maybe PlotSize -> Maybe (Double, Double) -> Maybe (Double, Double) -> FilePath -> String -> String -> [String] -> PlotOpt
plotSize :: PlotOpt -> Maybe PlotSize
plotXRange :: PlotOpt -> Maybe (Double, Double)
plotYRange :: PlotOpt -> Maybe (Double, Double)
plotDir :: PlotOpt -> FilePath
plotName :: PlotOpt -> String
plotTerminal :: PlotOpt -> String
plotGnuplotOpt :: PlotOpt -> [String]

-- | Default options for <i>X11</i>.
plotOptX11 :: PlotOpt

-- | Default options for <i>WXT</i>.
plotOptWXT :: PlotOpt

-- | Default options for <i>SVG</i>.
plotOptSVG :: PlotSize -> PlotOpt

-- | Names for SVG terminal have character restrictions.
plotNameEnc :: PlotOpt -> String

-- | Plot parameters, (<i>pre</i>,<i>cmd</i>,<i>attr</i>)
type PlotParam = ([String], String, Attr)
plotDataFile :: PlotOpt -> Int -> FilePath
plotRCFile :: PlotOpt -> FilePath
plotOutputFile :: PlotOpt -> FilePath
writePlotRC :: PlotOpt -> PlotParam -> Int -> IO ()
writePlotData :: (PNum t, Num t) => PlotOpt -> [[[t]]] -> IO ()

-- | Plotter given <a>PlotOpt</a> and <a>PlotParam</a>.
mkPlotOpt :: (PNum t, Num t) => PlotOpt -> PlotParam -> [[[t]]] -> IO ()

-- | <a>mkPlotOpt</a> with <a>plotOptX11</a>.
mkPlotX11 :: (PNum t, Num t) => PlotParam -> [[[t]]] -> IO ()

-- | <a>mkPlotOpt</a> with <a>plotOptSVG</a>.
mkPlotSVG :: (Num t, PNum t) => PlotSize -> PlotParam -> [[[t]]] -> IO ()

-- | WXT and SVG.
mkPlot :: (PNum t, Num t) => PlotParam -> [[[t]]] -> IO ()
instance Integral n => PNum (Ratio n)
instance PNum Double
instance PNum Float
instance PNum Integer
instance PNum Int
