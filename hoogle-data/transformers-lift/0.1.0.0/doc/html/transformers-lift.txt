-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Ad-hoc type classes for lifting
--   
@package transformers-lift
@version 0.1.0.0


-- | The <a>StT</a> type family.
module Control.Monad.Trans.Lift.StT

-- | Internal state of a monad transformer. Same as <tt>StT</tt> from the
--   <tt>monad-control</tt> package.


-- | Lifting the <tt>catch</tt> operation.
module Control.Monad.Trans.Lift.Catch

-- | The class of monad transformers capable of lifting <tt>catch</tt>.
class MonadTrans t => LiftCatch t
liftCatch :: (LiftCatch t, Monad m) => Catch e m (StT t a) -> Catch e (t m) a

-- | Signature of the <tt>catchE</tt> operation, introduced in
--   <a>Control.Monad.Trans.Except</a>. Any lifting function
--   <tt>liftCatch</tt> should satisfy
--   
--   <ul>
--   <li><pre><tt>lift</tt> (cf m f) = liftCatch (<tt>lift</tt> . cf)
--   (<tt>lift</tt> f)</pre></li>
--   </ul>
type Catch e (m :: * -> *) a = m a -> (e -> m a) -> m a

-- | Default definition for the <a>liftCatch</a> method.
defaultLiftCatch :: (Monad m, LiftCatch n) => (forall x. n m x -> t m x) -> (forall o x. t o x -> n o x) -> Catch e m (StT n a) -> Catch e (t m) a
instance Monoid w => LiftCatch (WriterT w)
instance Monoid w => LiftCatch (WriterT w)
instance LiftCatch (StateT s)
instance LiftCatch (StateT s)
instance Monoid w => LiftCatch (RWST r w s)
instance Monoid w => LiftCatch (RWST r w s)
instance LiftCatch (ReaderT r)
instance LiftCatch MaybeT
instance LiftCatch ListT
instance LiftCatch IdentityT
instance LiftCatch (ExceptT e)


-- | Lifting the <tt>listen</tt> operation.
module Control.Monad.Trans.Lift.Listen

-- | The class of monad transformers capable of lifting <tt>listen</tt>.
class MonadTrans t => LiftListen t
liftListen :: (LiftListen t, Monad m) => Listen w m (StT t a) -> Listen w (t m) a

-- | Signature of the <tt>listen</tt> operation, introduced in
--   <a>Control.Monad.Trans.Writer</a>. Any lifting function
--   <tt>liftListen</tt> should satisfy
--   
--   <ul>
--   <li><pre><tt>lift</tt> . liftListen = liftListen .
--   <tt>lift</tt></pre></li>
--   </ul>
type Listen w (m :: * -> *) a = m a -> m (a, w)

-- | Default definition for the <a>liftListen</a> method.
defaultLiftListen :: (Monad m, LiftListen n) => (forall x. n m x -> t m x) -> (forall o x. t o x -> n o x) -> Listen w m (StT n a) -> Listen w (t m) a
instance Monoid w' => LiftListen (WriterT w')
instance Monoid w' => LiftListen (WriterT w')
instance Monoid w' => LiftListen (RWST r w' s)
instance Monoid w' => LiftListen (RWST r w' s)
instance LiftListen (StateT s)
instance LiftListen (StateT s)
instance LiftListen (ReaderT r)
instance LiftListen MaybeT
instance LiftListen IdentityT
instance LiftListen (ExceptT e)


-- | Lifting the <tt>pass</tt> operation.
module Control.Monad.Trans.Lift.Pass

-- | The class of monad transformers capable of lifting <tt>pass</tt>.
class MonadTrans t => LiftPass t
liftPass :: (LiftPass t, Monad m) => Pass w m (StT t a) -> Pass w (t m) a

-- | Signature of the <tt>pass</tt> operation, introduced in
--   <a>Control.Monad.Trans.Writer</a>. Any lifting function
--   <tt>liftPass</tt> should satisfy
--   
--   <ul>
--   <li><pre><tt>lift</tt> . liftPass = liftPass .
--   <tt>lift</tt></pre></li>
--   </ul>
type Pass w (m :: * -> *) a = m (a, w -> w) -> m a

-- | Default definition for the <a>liftPass</a> method.
defaultLiftPass :: (Monad m, LiftPass n) => (forall x. n m x -> t m x) -> (forall o x. t o x -> n o x) -> Pass w m (StT n a) -> Pass w (t m) a
instance Monoid w' => LiftPass (WriterT w')
instance Monoid w' => LiftPass (WriterT w')
instance Monoid w' => LiftPass (RWST r w' s)
instance Monoid w' => LiftPass (RWST r w' s)
instance LiftPass (StateT s)
instance LiftPass (StateT s)
instance LiftPass (ReaderT r)
instance LiftPass MaybeT
instance LiftPass IdentityT
instance LiftPass (ExceptT e)


-- | Lifting the <tt>callCC</tt> operation.
module Control.Monad.Trans.Lift.CallCC

-- | The class of monad transformers capable of lifting <tt>callCC</tt>.
class MonadTrans t => LiftCallCC t where liftCallCC' = liftCallCC
liftCallCC :: (LiftCallCC t, Monad m) => CallCC m (StT t a) (StT t b) -> CallCC (t m) a b
liftCallCC' :: (LiftCallCC t, Monad m) => CallCC m (StT t a) (StT t b) -> CallCC (t m) a b

-- | Signature of the <tt>callCC</tt> operation, introduced in
--   <a>Control.Monad.Trans.Cont</a>. Any lifting function
--   <tt>liftCallCC</tt> should satisfy
--   
--   <ul>
--   <li><pre><tt>lift</tt> (f k) = f' (<tt>lift</tt> . k) =&gt;
--   <tt>lift</tt> (cf f) = liftCallCC cf f'</pre></li>
--   </ul>
type CallCC (m :: * -> *) a b = ((a -> m b) -> m a) -> m a

-- | Default definition for the <a>liftCallCC</a> method.
defaultLiftCallCC :: (Monad m, LiftCallCC n) => (forall x. n m x -> t m x) -> (forall o x. t o x -> n o x) -> CallCC m (StT n a) (StT n b) -> CallCC (t m) a b

-- | Default definition for the <a>liftCallCC'</a> method.
defaultLiftCallCC' :: (Monad m, LiftCallCC n) => (forall x. n m x -> t m x) -> (forall o x. t o x -> n o x) -> CallCC m (StT n a) (StT n b) -> CallCC (t m) a b
instance LiftCallCC (StateT s)
instance LiftCallCC (StateT s)
instance Monoid w => LiftCallCC (RWST r w s)
instance Monoid w => LiftCallCC (RWST r w s)
instance Monoid w => LiftCallCC (WriterT w)
instance Monoid w => LiftCallCC (WriterT w)
instance LiftCallCC (ReaderT r)
instance LiftCallCC MaybeT
instance LiftCallCC ListT
instance LiftCallCC IdentityT
instance LiftCallCC (ExceptT e)


-- | Lifting the <tt>local</tt> operation.
module Control.Monad.Trans.Lift.Local

-- | The class of monad transformers capable of lifting <tt>local</tt>.
class MonadTrans t => LiftLocal t
liftLocal :: (LiftLocal t, Monad m) => m r -> (forall a. Local r m a) -> (forall a. Local r (t m) a)

-- | Signature of the <tt>local</tt> operation, introduced in
--   <a>Control.Monad.Trans.Reader</a>.
type Local r m a = (r -> r) -> m a -> m a

-- | Default definition for the <a>liftLocal</a> method.
defaultLiftLocal :: (Monad m, LiftLocal n) => (forall x. n m x -> t m x) -> (forall o x. t o x -> n o x) -> m r -> (forall a. Local r m a) -> (forall a. Local r (t m) a)
instance Monoid w => LiftLocal (WriterT w)
instance Monoid w => LiftLocal (WriterT w)
instance LiftLocal (StateT s)
instance LiftLocal (StateT s)
instance Monoid w => LiftLocal (RWST r w s)
instance Monoid w => LiftLocal (RWST r w s)
instance LiftLocal (ReaderT r)
instance LiftLocal MaybeT
instance LiftLocal ListT
instance LiftLocal IdentityT
instance LiftLocal (ExceptT e)
instance LiftLocal (ContT r)
