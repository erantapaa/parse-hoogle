-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generic instances for enumerating complex data types
--   
@package derive-enumerable
@version 0.1.1.0


-- | <a>Enumerable</a> provides a generalized equivalent to doing
--   `[minBound..maxBound]` but on complex types.
--   
--   <pre>
--   ([minBound..maxBound] :: [Word8]) == allEnums
--   </pre>
module Data.Enumerable.Generic

-- | Generate all possible variations of a type
allEnum :: (Default x, Enumerable x) => [x]

-- | Generate all possible variations of a type given a list of default
--   values of constructors
allConstEnum :: Enumerable x => [x] -> [x]

-- | Same as <a>allConstEnum</a> but automatically get constructors from
--   <a>Defaults</a> class
allDefsEnum :: (Defaults x, Enumerable x) => [x]

-- | Default implementation of <a>per</a> used by all simple
--   <a>Enumerable</a> instances that are also instances of <a>Eq</a>,
--   <a>Enum</a> and <a>Bounded</a>
defEnumerable :: (Eq x, Enum x, Bounded x) => x -> (x, Bool)

-- | Class for generating enumerations of arbitrary data types
class Enumerable x where per = first to . gper . from sper (x, False) = (x, False) sper (x, True) = per x next = fst . per allNext x = map fst . takeWhile (not . snd) $ iterate (sper . second (const True)) (x, False)
per :: Enumerable x => x -> (x, Bool)
sper :: Enumerable x => (x, Bool) -> (x, Bool)
next :: Enumerable x => x -> x
allNext :: Enumerable x => x -> [x]

-- | Class for easier enumeration of multi-constructor types
class Defaults x
defs :: Defaults x => [x]

-- | A class for types with a default value.
class Default a
def :: Default a => a
instance GEnumerable U1
instance Enumerable x => GEnumerable (K1 i x)
instance GEnumerable x => GEnumerable (M1 i c x)
instance (GEnumerable x, GEnumerable y) => GEnumerable (x :+: y)
instance (GEnumerable x, GEnumerable y) => GEnumerable (x :*: y)
instance (Enumerable a, Enumerable b) => Enumerable (a, b)
instance (Default x, Enumerable x) => Enumerable (Maybe x)
instance (Default a, Default b, Enumerable a, Enumerable b) => Enumerable (Either a b)
instance Enumerable ()
instance Enumerable Word64
instance Enumerable Word32
instance Enumerable Word16
instance Enumerable Word8
instance Enumerable Word
instance Enumerable Ordering
instance Enumerable Int64
instance Enumerable Int32
instance Enumerable Int16
instance Enumerable Int8
instance Enumerable Int
instance Enumerable Char
instance Enumerable Bool
instance (Default a, Default b) => Default (Either a b)
instance Default Char
instance Default Bool
