-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Draw diagrams of dendrograms made by hierarchical-clustering.
--   
--   This package contains functions for drawing diagrams of dendrograms.
--   You may see a simple image sample at
--   <a>https://patch-tag.com/r/felipe/hierarchical-clustering-diagrams/snapshot/current/content/pretty/example.png</a>.
--   See the documentation at <a>Diagrams.Dendrogram</a> to see how to
--   reproduce this diagram.
@package hierarchical-clustering-diagrams
@version 0.1.0.1


-- | This module contain functions for drawing diagrams of dendrograms.
module Diagrams.Dendrogram

-- | <tt>dendrogram width drawItem dendro</tt> is a drawing of the
--   dendrogram <tt>dendro</tt> using <tt>drawItem</tt> to draw its leafs.
--   The <tt>width</tt> parameter controls how whether all items have the
--   same width or not (<a>Fixed</a> or <a>Variable</a>, respectively, see
--   <a>Width</a>).
--   
--   Note: you should probably use <a>alignT</a> to align your items.
dendrogram :: (Monoid m, Renderable (Path R2) b) => Width -> (a -> AnnDiagram b R2 m) -> Dendrogram a -> AnnDiagram b R2 m

-- | The width of the items on the leafs of a dendrogram.
data Width

-- | <tt>Fixed</tt> assumes that all items have a fixed width (which is
--   automatically calculated). This mode is faster than <tt>Variable</tt>,
--   especially when you have many items.
Fixed :: Width

-- | <tt>Variable</tt> does not assume that all items have a fixed width,
--   so each item may have a different width. This mode is slower since it
--   has to calculate the width of each item separately.
Variable :: Width

-- | A dendrogram path that can be <a>stroke</a><tt>d</tt> later. This
--   function assumes that the <a>Leaf</a><tt>s</tt> of your
--   <a>Dendrogram</a> are already in the right position.
dendrogramPath :: Dendrogram X -> Path R2

-- | <tt>fixedWidth w</tt> positions the <a>Leaf</a><tt>s</tt> of a
--   <a>Dendrogram</a> assuming that they have the same width <tt>w</tt>.
--   Also returns the total width.
fixedWidth :: Double -> Dendrogram a -> (Dendrogram X, Double)

-- | <tt>variableWidth draw</tt> positions the <a>Leaf</a><tt>s</tt> of a
--   <a>Dendrogram</a> according to the diagram generated by <tt>draw</tt>.
--   Each <a>Leaf</a> may have a different width. Also returns the
--   resulting diagram having all <a>Leaf</a><tt>s</tt> drawn side-by-side.
--   
--   Note: you should probably use <a>alignT</a> to align your items.
variableWidth :: Monoid m => (a -> AnnDiagram b R2 m) -> Dendrogram a -> (Dendrogram X, AnnDiagram b R2 m)

-- | The horizontal position of a dendrogram Leaf.
type X = Double

-- | Like <a>hcat</a>, but balanced. Much better performance. Use it for
--   concatenating the items of your dendrogram.
hcatB :: Monoid m => [AnnDiagram b R2 m] -> AnnDiagram b R2 m
