-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lens implementation. It is more small but adequately.
--   
@package reasonable-lens
@version 0.2.1.1

module Control.Lens.Util.TH
bndrName :: TyVarBndr -> Name
replaceTypeVar :: Name -> Name -> Type -> Type
replaceCxtVar :: Name -> Name -> Cxt -> Cxt
replaceTvbsVar :: Name -> Name -> [TyVarBndr] -> [TyVarBndr]
judgeName :: Name -> Name -> Name -> Name
type2List :: Type -> [Name]
cxt2List :: Cxt -> [Name]
tvbs2List :: [TyVarBndr] -> [Name]

module Control.Lens.Setter
type Setter s t a b = (a -> Mutator b) -> s -> Mutator t
over :: Setter s t a b -> (a -> b) -> s -> t
set :: Setter s t a b -> b -> s -> t
(.~) :: Setter s t a b -> b -> s -> t
(&) :: b -> (b -> c) -> c
(%~) :: Setter s t a b -> (a -> b) -> s -> t
(+~) :: Num a => Setter s t a a -> a -> s -> t
(-~) :: Num a => Setter s t a a -> a -> s -> t
(*~) :: Num a => Setter s t a a -> a -> s -> t
(/~) :: Fractional a => Setter s t a a -> a -> s -> t
(%=) :: MonadState s m => Setter s s a a -> (a -> a) -> m ()
(.=) :: MonadState s m => Setter s s a a -> a -> m ()
(+=) :: (Num a, MonadState s m) => Setter s s a a -> a -> m ()
(-=) :: (Num a, MonadState s m) => Setter s s a a -> a -> m ()
(*=) :: (Num a, MonadState s m) => Setter s s a a -> a -> m ()
(//=) :: (Fractional a, MonadState s m) => Setter s s a a -> a -> m ()
newtype Mutator a
Mutator :: a -> Mutator a
runMutator :: Mutator a -> a
instance Show a => Show (Mutator a)
instance Read a => Read (Mutator a)
instance Eq a => Eq (Mutator a)
instance Ord a => Ord (Mutator a)
instance Functor Mutator
instance Applicative Mutator

module Control.Lens.Getter
type Getting r s a = (a -> Accessor r a) -> s -> Accessor r s
type Getter s a = forall r. Getting r s a
folded :: (Foldable f, Monoid r) => Getting r (f a) a
views :: MonadReader s m => Getting r s a -> (a -> r) -> m r
view :: MonadReader s m => Getting a s a -> m a
foldMapOf :: Getting r s a -> (a -> r) -> s -> r
foldOf :: Getting a s a -> s -> a
to :: (s -> a) -> Getter s a
(^.) :: s -> Getting a s a -> a
uses :: MonadState s m => Getter s a -> (a -> r) -> m r
use :: MonadState s m => Getter s a -> m a
newtype Accessor r a
Accessor :: r -> Accessor r a
runAccessor :: Accessor r a -> r
instance Show r => Show (Accessor r a)
instance Read r => Read (Accessor r a)
instance Eq r => Eq (Accessor r a)
instance Ord r => Ord (Accessor r a)
instance Functor (Accessor r)
instance Monoid r => Applicative (Accessor r)

module Control.Lens.Lens
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t

module Control.Lens.Tuple
class Field1 s t a b | s -> a, t -> b, s b -> t, t a -> s
_1 :: Field1 s t a b => Lens s t a b
class Field2 s t a b | s -> a, t -> b, s b -> t, t a -> s
_2 :: Field2 s t a b => Lens s t a b
class Field3 s t a b | s -> a, t -> b, s b -> t, t a -> s
_3 :: Field3 s t a b => Lens s t a b
class Field4 s t a b | s -> a, t -> b, s b -> t, t a -> s
_4 :: Field4 s t a b => Lens s t a b
instance Field4 (v, w, x, a) (v, w, x, b) a b
instance Field3 (v, w, a, x) (v, w, b, x) a b
instance Field2 (v, a, w, x) (v, b, w, x) a b
instance Field1 (a, v, w, x) (b, v, w, x) a b
instance Field3 (v, w, a) (v, w, b) a b
instance Field2 (v, a, w) (v, b, w) a b
instance Field1 (a, v, w) (b, v, w) a b
instance Field2 (v, a) (v, b) a b
instance Field1 (a, v) (b, v) a b

module Control.Lens.TH
makeLenses :: Name -> DecsQ

module Control.Lens
