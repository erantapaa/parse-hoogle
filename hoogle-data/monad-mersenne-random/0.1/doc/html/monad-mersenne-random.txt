-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An efficient random generator monad, based on the Mersenne Twister
--   
--   Often we need an efficient way to generate high quality pseudo-random
--   numbers in Haskell. We have good generators themselves (for example,
--   the mersenne-random-pure64 package), however, users are often tempted
--   to store the generator in a lazy state monad. This causes performance
--   problems.
--   
--   This package provides an optimized <a>Rand</a> monad for monadic
--   generation of random numbers from a state, with close attention to
--   performance. You may have results an order of magnitude or more better
--   than using Control.Monad.State to store your generator.
@package monad-mersenne-random
@version 0.1


-- | A fast random number generator monad.
module Control.Monad.Mersenne.Random

-- | A basic random monad, for generating random numbers from pure mersenne
--   twisters.
newtype Rand a
Rand :: (PureMT -> R a) -> Rand a
runRand :: Rand a -> PureMT -> R a

-- | Run a random computation using the generator <tt>g</tt>, returning the
--   result and the updated generator.
runRandom :: Rand a -> PureMT -> (a, PureMT)

-- | Evaluate a random computation using the mersenne generator <tt>g</tt>.
--   Note that the generator <tt>g</tt> is not returned, so there's no way
--   to recover the updated version of <tt>g</tt>.
evalRandom :: Rand a -> PureMT -> a
getBool :: Rand Bool

-- | Yield a new <a>Int</a> value from the generator.
getInt :: Rand Int

-- | Yield a new <a>Word</a> value from the generator.
getWord :: Rand Word

-- | Yield a new <a>Int64</a> value from the generator.
getInt64 :: Rand Int64

-- | Yield a new <a>Word64</a> value from the generator.
getWord64 :: Rand Word64

-- | Yield a new 53-bit precise <a>Double</a> value from the generator.
getDouble :: Rand Double

-- | The state of a random monad, optimized for performance.
data R a
R :: !a -> {-# UNPACK #-} !PureMT -> R a
instance Monad Rand
