-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Synthesizable Verilog DSL supporting for multiple clock and reset
--   
@package hsverilog
@version 0.1.0

module HsVerilog.Type
class Verilog a
toVerilog :: Verilog a => a -> Text
data Range
Range :: Integer -> Integer -> Range
RangeBit :: Integer -> Range
Bit :: Range
data Signal
Signal :: Text -> Range -> Integer -> Signal
sname :: Signal -> Text
sbits :: Signal -> Range
sval :: Signal -> Integer
type InstanceName = Text
data Instance
Instance :: InstanceName -> Circuit -> Instance
iname :: Instance -> InstanceName
icircuit :: Instance -> Circuit
data Stim
Posedge :: Signal -> Stim
Negedge :: Signal -> Stim
data Always
Always :: Signal -> [Stim] -> Exp -> Always
alsig :: Always -> Signal
alstim :: Always -> [Stim]
alexp :: Always -> Exp
data Assign
Assign :: Signal -> Exp -> Assign
assig :: Assign -> Signal
asexp :: Assign -> Exp
data Exp
If :: Exp -> Exp -> Exp -> Exp
Mux :: Exp -> Exp -> Exp -> Exp
Not :: Exp -> Exp
Or :: Exp -> Exp -> Exp
BitOr :: Exp -> Exp -> Exp
And :: Exp -> Exp -> Exp
BitAnd :: Exp -> Exp -> Exp
Add :: Exp -> Exp -> Exp
Sub :: Exp -> Exp -> Exp
Mul :: Exp -> Exp -> Exp
Div :: Exp -> Exp -> Exp
Eq :: Exp -> Exp -> Exp
S :: Signal -> Exp
C :: Integer -> Exp
NonBlockAssign :: Exp -> Exp -> Exp
BlockAssign :: Exp -> Exp -> Exp
data Circuit
Circuit :: Text -> [Signal] -> [Signal] -> [Signal] -> [Always] -> [Assign] -> [Instance] -> Map InstanceName [(Signal, Signal)] -> Circuit
cname :: Circuit -> Text
cinput :: Circuit -> [Signal]
coutput :: Circuit -> [Signal]
cinout :: Circuit -> [Signal]
creg :: Circuit -> [Always]
cassign :: Circuit -> [Assign]
cinstance :: Circuit -> [Instance]
cinstanceConnect :: Circuit -> Map InstanceName [(Signal, Signal)]
instance Show Range
instance Read Range
instance Eq Range
instance Show Signal
instance Read Signal
instance Eq Signal
instance Show Stim
instance Read Stim
instance Eq Stim
instance Show Exp
instance Read Exp
instance Eq Exp
instance Show Assign
instance Read Assign
instance Eq Assign
instance Show Always
instance Read Always
instance Eq Always
instance Show Circuit
instance Read Circuit
instance Eq Circuit
instance Show Instance
instance Read Instance
instance Eq Instance
instance Num Exp

module HsVerilog.Simulation
val' :: Exp -> Reader Circuit Integer
sym' :: Circuit -> Map Text Signal
sym :: Circuit -> Text -> Signal
val :: Circuit -> Exp -> Integer
readReg :: Monad m => Text -> StateT Circuit m Integer
readInput :: Monad m => Text -> StateT Circuit m Integer
readOutput :: Monad m => Text -> StateT Circuit m Integer
readAssign :: Monad m => Text -> StateT Circuit m Integer
(<==) :: Monad m => Text -> Integer -> StateT Circuit m ()
simM :: Monad m => Circuit -> StateT Circuit m a -> m Circuit
print' :: MonadIO m => StateT Circuit m ()
updateReg :: Monad m => StateT Circuit m ()

module HsVerilog.Verilog.Internal
nonblockExp' :: Exp -> Exp -> Exp
nonblockExp :: Exp -> Exp -> Exp
portList :: Circuit -> [Signal]
portMap :: Circuit -> Map Text Signal
portlist :: Circuit -> Text
iplist :: Circuit -> Text
oplist :: Circuit -> Text
inoutplist :: Circuit -> Text
reglist :: Circuit -> Text
instOutputPort :: Text -> Circuit -> [(Signal, Signal)]
wireToVerilog :: Signal -> Text
wireSignals :: Circuit -> [Signal]
wirelist :: Circuit -> Text
alwayslist :: Circuit -> Text
assignlist :: Circuit -> Text
instToVerilog :: Circuit -> Instance -> Text
instlist :: Circuit -> Text
instance Verilog Circuit
instance Verilog Assign
instance Verilog Always
instance Verilog Stim
instance Verilog Exp
instance Verilog Range
instance ToText Integer

module HsVerilog.Verilog.DSL
signal :: Text -> Range -> Signal
initCircuit :: Text -> Circuit
circuit :: Text -> State Circuit a -> Circuit
circuitM :: Monad m => Text -> StateT Circuit m a -> m Circuit
input :: Monad m => Text -> Range -> StateT Circuit m Signal
output :: Monad m => Text -> Range -> StateT Circuit m Signal
inout :: Monad m => Text -> Range -> StateT Circuit m Signal
reg :: Monad m => Text -> Range -> [Stim] -> (Exp -> Exp) -> StateT Circuit m (Signal)
reg' :: Monad m => Text -> Range -> [Stim] -> Exp -> StateT Circuit m (Signal)
assign :: Monad m => Signal -> Exp -> StateT Circuit m Signal
wire :: Instance -> Text -> Signal
inst :: Monad m => Circuit -> Text -> [(Text, Signal)] -> StateT Circuit m Instance
connect :: Monad m => Instance -> Text -> Signal -> StateT Circuit m ()
(.:) :: Instance -> Text -> Signal
(><) :: Integer -> Integer -> Range

module HsVerilog.Verilog

module HsVerilog.Library
dff :: Circuit
dff8 :: Circuit

module HsVerilog
