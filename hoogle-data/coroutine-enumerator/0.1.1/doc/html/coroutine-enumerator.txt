-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bridge between the monad-coroutine and enumerator packages.
--   
--   This package acts as a bidirectional bridge between two monad
--   transformers: the Data.Enumerator.Iteratee in the enumerator package,
--   and the Control.Monad.Coroutine.Coroutine in the monad-coroutine
--   package.
@package coroutine-enumerator
@version 0.1.1


-- | This module provides a bridge between the Control.Monad.Coroutine and
--   the Data.Enumerator monad transformers.
module Control.Monad.Coroutine.Enumerator

-- | Converts a <a>Coroutine</a> parameterized with the <a>Yield</a>
--   functor into an <a>Enumerator</a>.
coroutineEnumerator :: Monad m => Coroutine (Yield [a]) m b -> Enumerator a m c

-- | Converts an <a>Enumerator</a> into a <a>Coroutine</a> parameterized
--   with the <a>Yield</a> functor.
enumeratorCoroutine :: Monad m => Enumerator a (Coroutine (Yield [a]) m) () -> Coroutine (Yield [a]) m ()

-- | Converts a <a>Coroutine</a> parameterized with the <a>Await</a> [x]
--   functor, treating an empty input chunk as <a>EOF</a>, into an
--   <a>Iteratee</a>.
coroutineIteratee :: Monad m => Coroutine (Await [a]) m (Either SomeException (b, [a])) -> Iteratee a m b

-- | Converts an <a>Iteratee</a> into a <a>Coroutine</a> parameterized with
--   the <a>Await</a> [x] functor. The coroutine treats an empty input
--   chunk as <a>EOF</a>.
iterateeCoroutine :: Monad m => Iteratee a m b -> Coroutine (Await [a]) m (Either SomeException (b, [a]))

-- | Converts an <a>Iteratee</a> into a <a>Coroutine</a> parameterized with
--   the <a>Await</a> (<a>Stream</a> x) functor.
iterateeStreamCoroutine :: Monad m => Iteratee a m b -> Coroutine (Await (Stream a)) m (Either SomeException (b, Stream a))

-- | Converts a <a>Coroutine</a> parameterized with the <a>Await</a>
--   functor into an <a>Iteratee</a>.
streamCoroutineIteratee :: Monad m => Coroutine (Await (Stream a)) m (Either SomeException (b, Stream a)) -> Iteratee a m b
