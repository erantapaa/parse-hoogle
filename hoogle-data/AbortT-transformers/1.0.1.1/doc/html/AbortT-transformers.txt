-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A monad and monadic transformer providing "abort" functionality
--   
--   This module provides a monad and a monad transformer that allow the
--   user to abort a monadic computation and immediately return a result.
--   
--   New in version 1.0.1: Added liftCallCC, liftCatch, liftListen, and
--   liftPass, as well as more information to the cabal file.
--   
--   New in version 1.0.0.1: Bumped the transformers dependencies and
--   updated the maintainer's e-mail address.
@package AbortT-transformers
@version 1.0.1.1


-- | This module provides a monad and a monad transformer that allow the
--   user to abort a monadic computation and immediately return a result.
module Control.Monad.Trans.Abort

-- | An abort monad, parametrized by the type <tt>r</tt> of the value to
--   return.
type Abort r = AbortT r Identity

-- | Execute the abort monad computation and return the resulting value.
runAbort :: Abort r r -> r

-- | An abort monad transformer parametrized by
--   
--   <ul>
--   <li><tt>r</tt> - the value that will ultimately be returned; and</li>
--   <li><tt>m</tt> - the inner monad.</li>
--   </ul>
--   
--   The <a>AbortT</a> type wraps a monadic value that is either
--   
--   <ul>
--   <li><a>Left</a> <tt>r</tt>, which indicates that the monadic
--   computation has terminated with result <tt>r</tt> and so all further
--   steps in the computation should be ignored; or</li>
--   <li><a>Right</a> <tt>a</tt>, which indicates that the computation is
--   proceding normally and that its current value is <tt>a</tt>.</li>
--   </ul>
newtype AbortT r m a
AbortT :: m (Either r a) -> AbortT r m a
unwrapAbortT :: AbortT r m a -> m (Either r a)

-- | Execute the abort monad computation and return the resulting (monadic)
--   value.
runAbortT :: Monad m => AbortT r m r -> m r

-- | Abort the computation and immediately return a result; all steps in
--   the computation after this monadic computation will be ignored.
--   
--   Note that since no further computation is performed after this, there
--   is no way for subsequent computations to access the monadic value, and
--   so it can be assigned an arbitrary type.
abort :: Monad m => r -> AbortT r m a

-- | Lifts a <tt>callCC</tt> operation to <a>AbortT</a>.
liftCallCC :: (((Either r a -> m (Either r b)) -> m (Either r a)) -> m (Either r a)) -> ((a -> AbortT r m b) -> AbortT r m a) -> AbortT r m a

-- | Lift a <tt>catchError</tt> operation to <a>AbortT</a>.
liftCatch :: (m (Either r a) -> (e -> m (Either r a)) -> m (Either r a)) -> AbortT r m a -> (e -> AbortT r m a) -> AbortT r m a

-- | Lift a <tt>listen</tt> operation to the new monad.
liftListen :: Monad m => (m (Either r a) -> m (Either r a, w)) -> AbortT r m a -> AbortT r m (a, w)

-- | Lift a <tt>pass</tt> operation to the new monad.
liftPass :: Monad m => (m (Either r a, w -> w) -> m (Either r a)) -> AbortT r m (a, w -> w) -> AbortT r m a
instance MonadTrans (AbortT r)
instance MonadIO m => MonadIO (AbortT r m)
instance Monad m => Monad (AbortT r m)
instance Applicative m => Applicative (AbortT r m)
instance Functor m => Functor (AbortT r m)
