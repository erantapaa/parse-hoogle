-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Download Open Street Map tiles
--   
--   Download and locally cache open street map tiles based on HTTP cache
--   control headers.
@package osm-download
@version 0.4

module Network.OSM

-- | A TileID, along with a zoom level, uniquely identifies a single OSM
--   map tile. The standard size is 256x256 pixels for such a tile.
newtype TileID
TID :: (Int, Int) -> TileID
unTID :: TileID -> (Int, Int)

-- | The coordinates associated with any particular GPS location can be
--   computed using <a>determineTileCoords</a> and converted into tile ids
--   using <a>selectedTiles</a> before final download with
--   <a>downloadTiles</a>.
--   
--   TileCoords describes the range of tiles needed to completely display
--   an area (the area must be rectangular).
data TileCoords
TileCoords :: Int -> Int -> Int -> Int -> TileCoords
minX :: TileCoords -> Int
maxX :: TileCoords -> Int
minY :: TileCoords -> Int
maxY :: TileCoords -> Int
type Zoom = Int

-- | The cacheing operations run in their own monad that describe the
--   location of the cache, the tile server URL, and the worker threads the
--   retrieve tiles.
data OSMConfig
OSMCfg :: String -> Text -> Maybe (TileID -> Zoom -> IO (Either Status ByteString)) -> Int -> Int -> Bool -> OSMConfig
baseUrl :: OSMConfig -> String

-- | Path of the tile cache
cache :: OSMConfig -> Text

-- | Action to take if the tile is not cached. Return <a>Just</a> val for a
--   default value. Return <a>Nothing</a> to wait for a tile server.
noCacheAction :: OSMConfig -> Maybe (TileID -> Zoom -> IO (Either Status ByteString))

-- | Max download queue size
nrQueuedDownloads :: OSMConfig -> Int

-- | Number of threads the tile downloading can concurrently run in.
--   Tileserver admins request this be no more than 2.
nrConcurrentDownloads :: OSMConfig -> Int

-- | True if we should use the network to download Tiles
networkEnabled :: OSMConfig -> Bool

-- | The OSM operations maintain a list of tiles needing refreshed (for
--   local caching), the state of the local cache, and initial
--   configuration options.
data OSMState

-- | A Monad transformer allowing you acquire OSM maps
data OSM a

-- | evalOSM allows you to query an OSM server and the local cache. Take
--   note - the <a>OSMConfig</a> thread limit is enforced per-evalOSM.
--   Running many evalOSM processes can result in a violation of the limit
--   and incur admin wrath.
evalOSM :: OSM a -> OSMConfig -> IO a

-- | Like <a>downloadBestFitTiles</a> but uses the cached copies when
--   available.
getBestFitTiles :: [Point] -> OSM [[Either Status ByteString]]

-- | Like <a>downloadTiles</a> but uses the cached copies when available
getTiles :: [[TileID]] -> Zoom -> OSM [[Either Status ByteString]]

-- | Like <a>downloadTile</a> but uses a cached copy when available.
--   Downloaded copies are added to the cache.
--   
--   When the cached copy is out of date it will still be returned but a
--   new copy will be downloaded and added to the cache concurrently.
getTile :: TileID -> Zoom -> OSM (Either Status ByteString)

-- | A default configuration using the main OSM server as a tile server and
--   a cabal-generated directory for the cache directory
defaultOSMConfig :: IO OSMConfig

-- | Takes the tile server base URL, the set of coordinates that must
--   appear within the map boundaries, and users the <a>downloadTiles</a>
--   function to acquire all the necessary tiles.
--   
--   The returned files should all be in an approriate grid for row/column
--   display. See the test files of Main.hs and Main2.hs for examples of
--   Repa stiching tiles into a single image or side by side display of
--   individual tiles.
downloadBestFitTiles :: String -> [Point] -> IO [[Either Status ByteString]]

-- | Takes the boundaries of the OSM tiles and downloads the tiles, keeping
--   them in proper grid patterns for latter stiching or side-by-side
--   display.
downloadTiles :: String -> Zoom -> [[TileID]] -> IO [[Either Status ByteString]]

-- | Download a single tile form a given OSM server URL.
downloadTile :: String -> Zoom -> TileID -> IO (Either Status ByteString)

-- | The official OSM tile server.
osmTileURL :: String
data Frame
Frame :: Int -> Int -> Point -> Zoom -> Frame
width :: Frame -> Int
height :: Frame -> Int
center :: Frame -> Point
frameZoom :: Frame -> Zoom

-- | Given a width, height and center, compute the tiles needed to fill the
--   display.
--   
--   THIS ASSUMES tiles are 256x256 pixels!
selectTilesForFrame :: Frame -> [[TileID]]
tileCoordsForFrame :: Frame -> TileCoords

-- | Gives the position of the coordinate in the frame with the origin as
--   the lower left (note this is different from the lower level
--   operations!)
point2pixel :: Frame -> Point -> (Int, Int)
pixel2point :: Frame -> (Int, Int) -> Point
getFrameHeight :: Frame -> Int
tile2point :: TileID -> Zoom -> Point

-- | OSM defined method of converting a coordinate and zoom level to a tile
point2tile :: Point -> Zoom -> TileID

-- | Takes a coordinate, the OSM tile boundaries, and a zoom level then
--   generates (x,y) points to be placed on the Image. The origin is the
--   bottom left of the picture.
pixelPosForCoord :: Integral t => Point -> TileCoords -> Zoom -> (t, t)
coordForPixelPos :: Integral t => (t, t) -> TileCoords -> Zoom -> Point

-- | Computes the rectangular map region to download based on GPS points
--   and a zoom level
determineTileCoords :: [Point] -> Zoom -> Maybe TileCoords

-- | Takes the boundaries of the OSM tiles, and generates a list of the
--   encompassed OSM tiles.
selectedTiles :: TileCoords -> [[TileID]]

-- | The suggested copyright text in accordance with
--   <a>http://wiki.openstreetmap.org/wiki/Legal_FAQ</a>
osmCopyrightText :: String
instance MonadIO OSM
instance PersistEntity (TileEntryGeneric backend)
instance PersistField (TileEntryGeneric backend)
instance Eq Frame
instance Ord Frame
instance Show Frame
instance Read Frame
instance Monad OSM
instance MonadState OSMState OSM
instance PersistField TileID
instance Typeable TileID
instance Eq TileCoords
instance Ord TileCoords
instance Show TileCoords
instance Eq TileID
instance Ord TileID
instance Show TileID
instance Read TileID
instance Data TileID
