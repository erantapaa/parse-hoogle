-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | pugixml binding.
--   
@package pugixml
@version 0.3.2

module Text.XML.Pugi.Const
data NodeType
nodeTypeNull :: NodeType
nodeTypeDocument :: NodeType
nodeTypeElement :: NodeType
nodeTypePCData :: NodeType
nodeTypeCData :: NodeType
nodeTypeComment :: NodeType
nodeTypePi :: NodeType
nodeTypeDeclaration :: NodeType
nodeTypeDoctype :: NodeType
data ParseStatus
parseFileNotFound :: ParseStatus
parseIoError :: ParseStatus
parseOutOfMemory :: ParseStatus
parseInternalError :: ParseStatus
parseUnrecognizedTag :: ParseStatus
parseBadPi :: ParseStatus
parseBadComment :: ParseStatus
parseBadCData :: ParseStatus
parseBadDoctype :: ParseStatus
parseBadPCData :: ParseStatus
parseBadStartElement :: ParseStatus
parseBadAttribute :: ParseStatus
parseBadEndElement :: ParseStatus
parseEndElementMismatch :: ParseStatus
parseAppendInvalidRoot :: ParseStatus
parseNoDocumentElement :: ParseStatus
data Encoding
encodingAuto :: Encoding
encodingUtf8 :: Encoding
encodingUtf16be :: Encoding
encodingUtf16le :: Encoding
encodingUtf16 :: Encoding
encodingUtf32be :: Encoding
encodingUtf32le :: Encoding
encodingUtf32 :: Encoding
encodingWChar :: Encoding
encodingLatin1 :: Encoding
data FormatFlags
formatDefault :: FormatFlags
formatIndent :: FormatFlags
formatNoDeclaration :: FormatFlags
formatNoEscapes :: FormatFlags
formatRaw :: FormatFlags
formatSaveFileText :: FormatFlags
formatWriteBom :: FormatFlags
data ParseFlags
parseCData :: ParseFlags
parseComments :: ParseFlags
parseDeclaration :: ParseFlags
parseDefault :: ParseFlags
parseDoctype :: ParseFlags
parseEol :: ParseFlags
parseEscapes :: ParseFlags
parseFragment :: ParseFlags
parseFull :: ParseFlags
parseMinimal :: ParseFlags
parsePi :: ParseFlags
parseTrimPCData :: ParseFlags
parseWsPCData :: ParseFlags
parseWsPCDataSingle :: ParseFlags
parseWconvAttribute :: ParseFlags
parseWnormAttribute :: ParseFlags


-- | import/langauge
--   
--   <pre>
--   &gt; :set -XOverloadedStrings -XQuasiQuotes
--   &gt; import Text.XML.Pugi
--   &gt; import qualified Text.XML.Pugi.Mutable as M
--   </pre>
--   
--   | parse xml
--   
--   <pre>
--   &gt; docA &lt;- parse def "&lt;a /&gt;"
--   &gt; docA
--   Right Document &lt;a /&gt;
--   
--   &gt; parseFile def "test.xml"
--   Document &lt;test &gt;
--   </pre>
--   
--   render xml
--   
--   <pre>
--   &gt; Data.ByteString.Lazy.Char.putStrLn $ either undefined (pretty def) docA
--   &lt;?xml version="1.0"?&gt;
--   &lt;a /&gt;
--   
--   &gt; prettyFile def docA
--   </pre>
--   
--   create xml
--   
--   <pre>
--   testHtml :: IO <a>Document</a>
--   testHtml = M.create $ doc -&gt; do
--       decl &lt;- M.appendDeclaration "xml" doc
--       M.appendAttrs [("version", "1.0"), ("lang", "ja")] decl
--   
--       M.appendDoctype "html" doc
--   
--       html &lt;- M.appendElement "html" doc
--       body &lt;- M.appendElement "body" html
--       div_ &lt;- M.appendElement "div"  body
--       a    &lt;- M.appendElement "a"    div_
--       M.appendAttr "href" "http://example.com" a
--       txt  &lt;- M.appendPCData "example.com" a
--       return ()
--   </pre>
--   
--   <pre>
--   -- testHtml for copy&amp;paste to ghci.
--   &gt; doc &lt;- M.create $ \doc -&gt; M.appendDeclaration "xml" doc &gt;&gt;= \decl -&gt; M.appendAttrs [("version", "1.0"), ("lang", "ja")] decl &gt;&gt; M.appendDoctype "html" doc &gt;&gt; M.appendElement "html" doc &gt;&gt;= \html -&gt; M.appendElement "body" html &gt;&gt;= \body -&gt; M.appendElement "div"  body &gt;&gt;= \div_ -&gt; M.appendElement "a"    div_ &gt;&gt;= \a -&gt; M.appendAttr "href" "http://example.com" a &gt;&gt; M.appendPCData "example.com" a &gt;&gt; return ()
--   
--   &gt; doc
--   Document &lt;?xml version="1.0" lang="ja"?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;a href="http://example.com"&gt;example.com&lt;/a&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;
--   </pre>
--   
--   access xml tree
--   
--   <pre>
--   &gt; let Just x = <a>child</a> "xml" doc
--   &gt; x
--   Node &lt;?xml version="1.0" lang="ja"?&gt;
--   
--   &gt; <a>nextSibling</a> x
--   Just Node &lt;!DOCTYPE html&gt;
--   
--   &gt; Just html = <a>nextSiblingByName</a> "html" x
--   
--   &gt; html
--   Node &lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;a href="http://example.com"&gt;example.com&lt;/a&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;
--   
--   &gt; <a>evaluate</a> [xpath|string(//a/<tt>href)|] html
--   "http://example.com"
--   
--   &gt; let ns = evaluate [xpath|//a/</tt>href|] html
--   
--   &gt; <tt>nodeSetSize</tt> ns
--   1
--   &gt; <a>nodeSetIndex</a> ns 0
--   Right ("href","http://example.com")
--   </pre>
--   
--   modify xml
--   
--   <pre>
--   M.modify doc $ \d -&gt; M.selectSingleNode [xpath|//a|] d &gt;&gt;= \(Left a) -&gt; M.setOrAppendAttr "href" "#" a
--   Document &lt;?xml version="1.0" lang="ja"?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;a href="#"&gt;example.com&lt;/a&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;
--   </pre>
module Text.XML.Pugi
data Document_ (k :: NodeKind) (m :: MutableFlag)
type Document = Document_ Unknown Immutable
type MutableDocument = Document_ Unknown Mutable
data MutableFlag
Mutable :: MutableFlag
Immutable :: MutableFlag
data ParseConfig
ParseConfig :: ParseFlags -> Encoding -> ParseConfig
parseFlags :: ParseConfig -> ParseFlags
parseEncoding :: ParseConfig -> Encoding
data ParseException
ParseException :: ParseStatus -> CLong -> Encoding -> String -> ParseException
parseExceptionStatus :: ParseException -> ParseStatus
parseExceptionOffset :: ParseException -> CLong
parseExceptionEncoding :: ParseException -> Encoding
parseExceptionDescripton :: ParseException -> String
parse :: ParseConfig -> ByteString -> Either ParseException Document
parseFile :: ParseConfig -> FilePath -> IO Document
data PrettyConfig
PrettyConfig :: String -> FormatFlags -> Encoding -> PrettyConfig
prettyIndent :: PrettyConfig -> String
prettyFlags :: PrettyConfig -> FormatFlags
prettyEncoding :: PrettyConfig -> Encoding
prettyFile :: PrettyConfig -> FilePath -> Document -> IO ()
pretty :: PrettyConfig -> Document -> ByteString
data Node_ (k :: NodeKind) (m :: MutableFlag)
type Node = Node_ Unknown Immutable
type MutableNode k = Node_ k Mutable
data NodeKind

-- | &lt;name&gt;children&lt;/name&gt;
Element :: NodeKind

-- | value
PCData :: NodeKind

-- | &lt;![CDATA[value]]&gt;
CData :: NodeKind

-- | &lt;!--value--&gt;
Comment :: NodeKind

-- | &lt;?name value?&gt;
Pi :: NodeKind

-- | &lt;?name?&gt;
Declaration :: NodeKind

-- | &lt;!DOCTYPE value&gt;
Doctype :: NodeKind
Unknown :: NodeKind
class HasName (k :: NodeKind)
class HasValue (k :: NodeKind)
class HasAttribute (k :: NodeKind)
class HasChildren (k :: NodeKind)
asMutable :: NodeLike n => n k Mutable -> n k Mutable
asImmutable :: NodeLike n => n k Immutable -> n k Immutable
class NodeLike n where forgetNodeKind = unsafeCoerce
asNode :: NodeLike n => n k Immutable -> Node_ k Immutable
nodeEqual :: NodeLike n => n k Immutable -> n l Immutable -> Bool
forgetNodeKind :: NodeLike n => n k Immutable -> n Unknown Immutable
prettyNode :: NodeLike n => PrettyConfig -> Int -> n k Immutable -> ByteString
hashValue :: NodeLike n => n k Immutable -> CSize
nodeType :: NodeLike n => n k Immutable -> NodeType
getName :: (NodeLike n, HasName k) => n k Immutable -> ByteString
getValue :: (NodeLike n, HasValue k) => n k Immutable -> ByteString
parent :: NodeLike n => n k Immutable -> Maybe Node
firstChild :: (NodeLike n, HasChildren k) => n k Immutable -> Maybe Node
lastChild :: (NodeLike n, HasChildren k) => n k Immutable -> Maybe Node
nextSibling :: NodeLike n => n k Immutable -> Maybe Node
prevSibling :: NodeLike n => n k Immutable -> Maybe Node
child :: (NodeLike n, HasChildren k) => ByteString -> n k Immutable -> Maybe Node
attribute :: (NodeLike n, HasAttribute k) => ByteString -> n k Immutable -> Maybe ByteString
nextSiblingByName :: NodeLike n => ByteString -> n k Immutable -> Maybe Node
prevSiblingByName :: NodeLike n => ByteString -> n k Immutable -> Maybe Node
findChildByNameAndAttr :: (NodeLike n, HasChildren k) => ByteString -> ByteString -> ByteString -> n k Immutable -> Maybe Node
findChildByAttr :: (NodeLike n, HasChildren k) => ByteString -> ByteString -> n k Immutable -> Maybe Node
childValue :: (NodeLike n, HasChildren k) => n k Immutable -> ByteString
childValueByName :: (NodeLike n, HasChildren k) => ByteString -> n k Immutable -> ByteString
text :: NodeLike n => n k Immutable -> ByteString
findAttribute :: NodeLike n => (ByteString -> ByteString -> Bool) -> n k Immutable -> Maybe Attribute
findChild :: NodeLike n => (Node -> Bool) -> n k Immutable -> Maybe Node
findNode :: NodeLike n => (Node -> Bool) -> n k Immutable -> Maybe Node
mapSibling :: NodeLike n => (Node_ Unknown Immutable -> a) -> n k Immutable -> [a]
mapAttrs :: (NodeLike n, HasAttribute k) => (ByteString -> ByteString -> a) -> n k Immutable -> [a]
path :: NodeLike n => Char -> n k Immutable -> ByteString
firstElementByPath :: NodeLike n => Char -> ByteString -> n k Immutable -> Maybe Node
root :: NodeLike n => n k Immutable -> Maybe Node
evaluate :: (NodeLike n, EvalXPath r) => XPath r -> n k Immutable -> (XPathResult r Immutable)
selectSingleNode :: NodeLike n => XPath NodeSet -> n k Immutable -> XPathNode Immutable
selectNodes :: NodeLike n => XPath NodeSet -> n k Immutable -> NodeSet Immutable
data XPath (rt :: k)
class EvalXPath (a :: poly) where type family XPathResult a (m :: MutableFlag)

-- | generate xpath object.
--   
--   <pre>
--   [xpath|query|] == ((xpathObject) :: XPath (instance of EvalXPath))
--   </pre>
xpath :: QuasiQuoter
data NodeSet (m :: MutableFlag)
type XPathNode m = Either (Node_ Unknown m) Attribute
type Attribute = (ByteString, ByteString)
nodeSetSize :: NodeSet m -> Int
nodeSetIndex :: NodeSet m -> Int -> XPathNode m
nodeSetMapM :: (XPathNode m -> IO a) -> NodeSet m -> IO [a]
nodeSetMapM_ :: (XPathNode m -> IO ()) -> NodeSet m -> IO ()
nodeSetMap :: (XPathNode m -> a) -> NodeSet m -> [a]
nodeSetToList :: NodeSet m -> [XPathNode m]

-- | The default value for this type.
def :: Default a => a
instance HasChildren 'Unknown
instance HasChildren 'Element
instance HasAttribute 'Unknown
instance HasAttribute 'Declaration
instance HasAttribute 'Element
instance HasValue 'Unknown
instance HasValue 'Pi
instance HasValue 'Doctype
instance HasValue 'Comment
instance HasValue 'CData
instance HasValue 'PCData
instance HasName 'Unknown
instance HasName 'Pi
instance HasName 'Declaration
instance HasName 'Element
instance NodeLike Node_
instance NodeLike Document_
instance Eq (Document_ k 'Immutable)
instance Eq (Node_ k 'Immutable)
instance Show (Document_ k 'Immutable)
instance Show (Node_ k 'Immutable)

module Text.XML.Pugi.Mutable
data Modify a

-- | create document from scratch.
create :: Monad m => (MutableDocument -> Modify ()) -> m Document

-- | modify document.
modify :: Monad m => Document -> (MutableDocument -> Modify ()) -> m Document
class MutableNodeLike (n :: NodeKind -> MutableFlag -> *) where forgetNodeKind = unsafeCoerce
asNode :: MutableNodeLike n => n k Mutable -> Modify (Node_ k Mutable)
nodeEqual :: MutableNodeLike n => n k Mutable -> n l o -> Modify Bool
forgetNodeKind :: MutableNodeLike n => n k Mutable -> n Unknown Mutable
prettyNode :: MutableNodeLike n => PrettyConfig -> Int -> n k Mutable -> Modify ByteString
hashValue :: MutableNodeLike n => n k Mutable -> Modify CSize
nodeType :: MutableNodeLike n => n k Mutable -> Modify NodeType
getName :: (MutableNodeLike n, HasName k) => n k Mutable -> Modify ByteString
getValue :: (MutableNodeLike n, HasValue k) => n k Mutable -> Modify ByteString
parent :: MutableNodeLike n => n k Mutable -> Modify (Maybe (MutableNode Unknown))
firstChild :: (MutableNodeLike n, HasChildren k) => n k Mutable -> Modify (Maybe (MutableNode Unknown))
lastChild :: (MutableNodeLike n, HasChildren k) => n k Mutable -> Modify (Maybe (MutableNode Unknown))
nextSibling :: MutableNodeLike n => n k Mutable -> Modify (Maybe (MutableNode Unknown))
prevSibling :: MutableNodeLike n => n k Mutable -> Modify (Maybe (MutableNode Unknown))
child :: (MutableNodeLike n, HasChildren k) => ByteString -> n k Mutable -> Modify (Maybe (MutableNode Unknown))
attribute :: (MutableNodeLike n, HasAttribute k) => ByteString -> n k Mutable -> Modify (Maybe ByteString)
nextSiblingByName :: MutableNodeLike n => ByteString -> n k Mutable -> Modify (Maybe (MutableNode Unknown))
prevSiblingByName :: MutableNodeLike n => ByteString -> n k Mutable -> Modify (Maybe (MutableNode Unknown))
findChildByNameAndAttr :: (MutableNodeLike n, HasChildren k) => ByteString -> ByteString -> ByteString -> n k Mutable -> Modify (Maybe (MutableNode Unknown))
findChildByAttr :: (MutableNodeLike n, HasChildren k) => ByteString -> ByteString -> n k Mutable -> Modify (Maybe (MutableNode Unknown))
childValue :: (MutableNodeLike n, HasChildren k) => n k Mutable -> Modify ByteString
childValueByName :: (MutableNodeLike n, HasChildren k) => ByteString -> n k Mutable -> Modify ByteString
text :: MutableNodeLike n => n k Mutable -> Modify ByteString
findAttribute :: MutableNodeLike n => (ByteString -> ByteString -> Bool) -> n k Mutable -> Modify (Maybe Attribute)
findChild :: MutableNodeLike n => (Node -> Bool) -> n k Mutable -> Modify (Maybe (MutableNode Unknown))
findNode :: MutableNodeLike n => (Node -> Bool) -> n k Mutable -> Modify (Maybe (MutableNode Unknown))
path :: MutableNodeLike n => Char -> n k Mutable -> Modify ByteString
firstElementByPath :: MutableNodeLike n => Char -> ByteString -> n k Mutable -> Modify (Maybe (MutableNode Unknown))
root :: MutableNodeLike n => n k Mutable -> Modify (Maybe (MutableNode Unknown))
evaluate :: (MutableNodeLike n, EvalXPath r) => XPath r -> n k Mutable -> Modify (XPathResult r Mutable)
selectSingleNode :: MutableNodeLike n => XPath NodeSet -> n k Mutable -> Modify (XPathNode Mutable)
selectNodes :: MutableNodeLike n => XPath NodeSet -> n k Mutable -> Modify (NodeSet Mutable)
setName :: (MutableNodeLike n, HasName k) => ByteString -> n k Mutable -> Modify ()
setValue :: (MutableNodeLike n, HasValue k) => ByteString -> n k Mutable -> Modify ()
appendAttr :: (MutableNodeLike n, HasAttribute k) => ByteString -> ByteString -> n k Mutable -> Modify ()
prependAttr :: (MutableNodeLike n, HasAttribute k) => ByteString -> ByteString -> n k Mutable -> Modify ()
setAttr :: (MutableNodeLike n, HasAttribute k) => ByteString -> ByteString -> n k Mutable -> Modify ()
appendChild :: (MutableNodeLike n, HasChildren k) => NodeType -> n k Mutable -> Modify (MutableNode l)
prependChild :: (MutableNodeLike n, HasChildren k) => NodeType -> n k Mutable -> Modify (MutableNode l)
appendCopy :: (MutableNodeLike n, HasChildren k) => Node_ k a -> n l Mutable -> Modify (MutableNode k)
prependCopy :: (MutableNodeLike n, HasChildren k) => Node_ k a -> n l Mutable -> Modify (MutableNode k)
removeAttr :: (MutableNodeLike n, HasAttribute k) => ByteString -> n k Mutable -> Modify ()
removeChild :: (MutableNodeLike n, HasChildren k) => Node_ k a -> n l Mutable -> Modify ()
appendFlagment :: (MutableNodeLike n, HasChildren k) => ParseConfig -> ByteString -> n k Mutable -> Modify ()
mapSiblingM :: MutableNodeLike n => (MutableNode Unknown -> Modify a) -> n k Mutable -> Modify [a]
mapSiblingM_ :: MutableNodeLike n => (MutableNode Unknown -> Modify a) -> n k Mutable -> Modify ()
appendAttrs :: (MutableNodeLike n, HasAttribute k) => [Attribute] -> n k Mutable -> Modify ()
setOrAppendAttr :: (HasAttribute k, MutableNodeLike n) => ByteString -> ByteString -> n k Mutable -> Modify ()
appendElement :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode Element)
prependElement :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode Element)
appendDeclaration :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode Declaration)
prependDeclaration :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode Declaration)
appendPCData :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode PCData)
prependPCData :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode PCData)
appendCData :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode CData)
prependCData :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode CData)
appendComment :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode Comment)
prependComment :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode Comment)
appendDoctype :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode Doctype)
prependDoctype :: (HasChildren k, MutableNodeLike n) => ByteString -> n k Mutable -> Modify (MutableNode Doctype)
appendPi :: (HasChildren k, MutableNodeLike n) => ByteString -> ByteString -> n k Mutable -> Modify (MutableNode Pi)
prependPi :: (HasChildren k, MutableNodeLike n) => ByteString -> ByteString -> n k Mutable -> Modify (MutableNode Pi)
instance Functor Modify
instance MutableNodeLike Document_
instance MutableNodeLike Node_
instance MonadPlus Modify
instance Alternative Modify
instance Monad Modify
instance Applicative Modify
