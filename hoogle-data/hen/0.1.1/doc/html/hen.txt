-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings to Xen hypervisor interface
--   
--   Haskell bindings to Xen hypervisor interface
@package hen
@version 0.1.1


-- | This module provides every special exception that can be raised in Mid
--   and High-level interfaces.
module System.Xen.Errors

-- | This error can be raised if handle can not be opened, insufficient
--   rights for example.
data XcHandleOpenError
XcHandleOpenError :: Errno -> XcHandleOpenError

-- | This error can be raised if peecked value of
--   <a>DomainShutdownReason</a> is not expected.
data InvalidDomainShutdownReason

-- | Peeked value
InvalidDomainShutdownReason :: CInt -> InvalidDomainShutdownReason

-- | This error can be raised if any error occured during receiving the
--   list, for example: try to to fetch a list in domU.
data DomainGetInfoError
DomainGetInfoError :: Errno -> DomainGetInfoError

-- | Generalized version of <a>getErrno</a>
getErrno :: MonadIO m => m Errno
instance Typeable XcHandleOpenError
instance Typeable InvalidDomainShutdownReason
instance Typeable DomainGetInfoError
instance Typeable Errno
instance Show Errno
instance Ord Errno
instance Eq XcHandleOpenError
instance Ord XcHandleOpenError
instance Show XcHandleOpenError
instance Eq InvalidDomainShutdownReason
instance Ord InvalidDomainShutdownReason
instance Show InvalidDomainShutdownReason
instance Eq DomainGetInfoError
instance Ord DomainGetInfoError
instance Show DomainGetInfoError
instance Exception DomainGetInfoError
instance Exception InvalidDomainShutdownReason
instance Exception XcHandleOpenError


-- | Types for working with <tt>XenCtrl</tt> data and accoring
--   <a>Storable</a> instances.
module System.Xen.Types

-- | Entry point of the hypervisor interface connection, it's a file
--   descriptor in xen 3 and pointer to corresponging structure in xen 4.
newtype XcHandle
XcHandle :: CIntPtr -> XcHandle

-- | Domain id, wrapper around <a>Word32</a>.
newtype DomId
DomId :: Word32 -> DomId
unDomId :: DomId -> Word32

-- | Domain flags. It's translated from xc_dominfo structure, so it's
--   possible to be mutual exclusion flags in one domain, e.g.
--   <a>DomainFlagShutdown</a> and <a>DomainFlagRunning</a>.
data DomainFlag
DomainFlagDying :: DomainFlag
DomainFlagCrashed :: DomainFlag
DomainFlagShutdown :: DomainFlag
DomainFlagPaused :: DomainFlag
DomainFlagBlocked :: DomainFlag
DomainFlagRunning :: DomainFlag
DomainFlagHVM :: DomainFlag
DomainFlagDebugged :: DomainFlag

-- | Domain shutdown reason it's only meaningful if domain has
--   <a>DomainFlagShutdown</a> flag.
data DomainShutdownReason
DomainShutdownReasonPoweroff :: DomainShutdownReason
DomainShutdownReasonReboot :: DomainShutdownReason
DomainShutdownReasonSuspend :: DomainShutdownReason
DomainShutdownReasonCrash :: DomainShutdownReason
DomainShutdownReasonWatchdog :: DomainShutdownReason

-- | Information about a single domain.
data DomainInfo
DomainInfo :: {-# UNPACK #-} !DomId -> {-# UNPACK #-} !Word32 -> !(BitSet DomainFlag) -> !(Maybe DomainShutdownReason) -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word64 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !UUID -> {-# UNPACK #-} !Word32 -> DomainInfo
domainInfoId :: DomainInfo -> {-# UNPACK #-} !DomId
domainInfoSsidRef :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoFlags :: DomainInfo -> !(BitSet DomainFlag)
domainInfoShutdownReason :: DomainInfo -> !(Maybe DomainShutdownReason)
domainInfoNumberOfPages :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoNumberOfSharedPages :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoSharedInfoFrame :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoCpuTime :: DomainInfo -> {-# UNPACK #-} !Word64
domainInfoMaxMemKb :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoNubmerOfOnlineVcpus :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoMaxVcpuId :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoDomHandle :: DomainInfo -> {-# UNPACK #-} !UUID
domainInfoCpuPool :: DomainInfo -> {-# UNPACK #-} !Word32
instance Eq XcHandle
instance Ord XcHandle
instance Show XcHandle
instance Storable XcHandle
instance Eq DomId
instance Ord DomId
instance Show DomId
instance Read DomId
instance Storable DomId
instance Enum DomainFlag
instance Eq DomainFlag
instance Ord DomainFlag
instance Show DomainFlag
instance Read DomainFlag
instance Eq DomainShutdownReason
instance Ord DomainShutdownReason
instance Show DomainShutdownReason
instance Read DomainShutdownReason
instance Eq DomainInfo
instance Ord DomainInfo
instance Show DomainInfo
instance Read DomainInfo
instance Storable DomainInfo
instance Storable DomainShutdownReason


-- | Low-level interface to <tt>XenCtrl</tt>. Each function defined in this
--   module is a ffi call to corresponding c function.
module System.Xen.Low

-- | This function opens the handle to the hypervisor interface. Each
--   successful call to this function should have a corresponding call to
--   <a>xc_interface_close</a>.
xc_interface_open :: CInt -> CInt -> CInt -> IO XcHandle

-- | This function closes an open hypervisor interface. This function can
--   fail if the handle does not represent an open interface or if there
--   were problems closing the interface. In the latter case the interface
--   is still closed.
xc_interface_close :: XcHandle -> IO CInt

-- | This function will return information about one or more domains. It is
--   designed to iterate over the list of domains. If a single domain is
--   requested, this function will return the next domain in the list - if
--   one exists. It is, therefore, important in this case to make sure the
--   domain requested was the one returned.
xc_domain_getinfo :: XcHandle -> DomId -> CUInt -> Ptr DomainInfo -> IO CInt

-- | This function pauses a domain. A paused domain still exists in memory
--   however it does not receive any timeslices from the hypervisor.
xc_domain_pause :: XcHandle -> DomId -> IO CInt

-- | This function unpauses a domain. The domain should have been
--   previously paused.
xc_domain_unpause :: XcHandle -> DomId -> IO CInt

-- | This function will shutdown a domain. This is intended for use in
--   fully-virtualized domains where this operation is analogous to the
--   sched_op operations in a paravirtualized domain.
xc_domain_shutdown :: XcHandle -> DomId -> CInt -> IO CInt

-- | This function will destroy a domain. Destroying a domain removes the
--   domain completely from memory. This function should be called after
--   sending the domain a SHUTDOWN control message to free up the domain
--   resources.
xc_domain_destroy :: XcHandle -> DomId -> IO CInt


-- | Mid-level interface to <tt>XenCtrl</tt>. Functions that provided by
--   this module are version-independent from <tt>Xen</tt> and raise real
--   exceptions instead of confusing error codes and <tt>errno</tt>.
module System.Xen.Mid

-- | Open the connection to the hypervisor interface, can fail with
--   <a>XcHandleOpenError</a>.
interfaceOpen :: MonadIO m => m XcHandle

-- | Close an open hypervisor interface, ignores all possible errors but
--   all the same can fail with segfault or sutin.
interfaceClose :: (MonadIO m, Functor m) => XcHandle -> m ()

-- | Returns a list of currently runing domains, 1024 maximum, can fail
--   with <a>InvalidDomainShutdownReason</a> and <a>DomainGetInfoError</a>.
domainGetInfo :: (MonadIO m, Alternative t, Traversable t) => XcHandle -> m (t DomainInfo)

-- | Pause domain. A paused domain still exists in memory however it does
--   not receive any timeslices from the hypervisor.
domainPause :: MonadIO m => DomId -> XcHandle -> m Bool

-- | Unpause a domain. The domain should have been previously paused.
domainUnpause :: MonadIO m => DomId -> XcHandle -> m Bool

-- | Shutdown domain. This is intended for use in fully-virtualized domains
--   where this operation is analogous to the sched_op operations in a
--   paravirtualized domain.
domainShutdown :: MonadIO m => DomId -> DomainShutdownReason -> XcHandle -> m Bool

-- | Destroy a domain. Destroying a domain removes the domain completely
--   from memory. This function should be called after
--   <a>domainShutdown</a> to free up the domain resources.
domainDestroy :: MonadIO m => DomId -> XcHandle -> m Bool

module System.Xen.High.Internal

-- | A Xen transformer. This transformers keeps connection to the Xen
--   hypervisor interface.
newtype XenT m a
XenT :: ReaderT XcHandle m a -> XenT m a
unXenT :: XenT m a -> ReaderT XcHandle m a

-- | Most simple <a>XenT</a> implementation.
type Xen = XenT IO
class (Functor m, MonadIO m) => MonadXen m
withXenHandle :: MonadXen m => (XcHandle -> m a) -> m a

-- | Open new connection to the hypervisor, run any <tt>Xen</tt> action and
--   close connection if nessesary. This function can fail with <tt>Either
--   SomeException</tt> with <a>XcHandleOpenError</a> and any error of
--   providing <tt>Xen</tt> action.
runXenT :: (Functor m, MonadIO m, MonadCatch m) => XenT m a -> m (Either SomeException a)
instance MonadXen m => MonadXen (IdentityT m)
instance Functor m => Functor (XenT m)
instance Applicative m => Applicative (XenT m)
instance Monad m => Monad (XenT m)
instance MonadTrans XenT
instance MonadIO m => MonadIO (XenT m)
instance MonadCatch m => MonadCatch (XenT m)
instance MonadRWS r w s m => MonadRWS r w s (XenT m)
instance MonadWriter w m => MonadWriter w (XenT m)
instance MonadReader r m => MonadReader r (XenT m)
instance MonadState s m => MonadState s (XenT m)
instance (Functor m, MonadIO m, MonadCatch m) => MonadXen (XenT m)
instance (MonadXen m, Monoid w) => MonadXen (RWST r w s m)
instance (MonadXen m, Monoid w) => MonadXen (RWST r w s m)
instance (MonadXen m, Monoid w) => MonadXen (WriterT w m)
instance (MonadXen m, Monoid w) => MonadXen (WriterT w m)
instance MonadXen m => MonadXen (ReaderT r m)
instance MonadXen m => MonadXen (StateT s m)
instance MonadXen m => MonadXen (StateT s m)
instance (MonadXen m, Error e) => MonadXen (ErrorT e m)
instance MonadXen m => MonadXen (ContT r m)


-- | High-level interface to <tt>XenCtrl</tt>. Contains <a>Xen</a> monad
--   and provides a safe way to run any <a>Xen</a> computation.
module System.Xen.High

-- | A Xen transformer. This transformers keeps connection to the Xen
--   hypervisor interface.
data XenT m a

-- | Most simple <a>XenT</a> implementation.
type Xen = XenT IO

-- | Open new connection to the hypervisor, run any <tt>Xen</tt> action and
--   close connection if nessesary. This function can fail with <tt>Either
--   SomeException</tt> with <a>XcHandleOpenError</a> and any error of
--   providing <tt>Xen</tt> action.
runXenT :: (Functor m, MonadIO m, MonadCatch m) => XenT m a -> m (Either SomeException a)

-- | Returns a lift of domains, this function can fail with
--   <a>InvalidDomainShutdownReason</a> and <a>DomainGetInfoError</a>.
domainGetInfo :: MonadXen m => m [DomainInfo]

-- | Pause domain. A paused domain still exists in memory however it does
--   not receive any timeslices from the hypervisor.
domainPause :: MonadXen m => DomId -> m Bool

-- | Unpause a domain. The domain should have been previously paused.
domainUnpause :: MonadXen m => DomId -> m Bool

-- | Shutdown domain. This is intended for use in fully-virtualized domains
--   where this operation is analogous to the sched_op operations in a
--   paravirtualized domain.
domainShutdown :: MonadXen m => DomId -> DomainShutdownReason -> m Bool

-- | Destroy a domain. Destroying a domain removes the domain completely
--   from memory. This function should be called after
--   <a>domainShutdown</a> to free up the domain resources.
domainDestroy :: MonadXen m => DomId -> m Bool


-- | Haskell bidings to Xen hypervisor interface. There are three interface
--   levels in this library:
--   
--   <ul>
--   <li>Low-level interface. <a>System.Xen.Low</a>. It just provides
--   bindings to c-calls.</li>
--   <li>Mid-level interface. <a>System.Xen.Mid</a>. Contains helper
--   functions and allow to use your favorite <a>Monad</a>.</li>
--   <li>High-level interface. <a>System.Xen.High</a>. Contains <a>Xen</a>
--   monad and provides a safe way to run any <a>Xen</a> computation.</li>
--   </ul>
--   
--   Last one is also re-exported by current module and intend for common
--   usage. Usage example:
--   
--   <pre>
--   module Main (main) where
--   
--   import System.Xen (runXenT, domainGetInfo)
--   
--   main :: IO ()
--   main = print =&lt;&lt; runXenT domainGetInfo
--   </pre>
module System.Xen

-- | This error can be raised if handle can not be opened, insufficient
--   rights for example.
data XcHandleOpenError
XcHandleOpenError :: Errno -> XcHandleOpenError

-- | This error can be raised if peecked value of
--   <a>DomainShutdownReason</a> is not expected.
data InvalidDomainShutdownReason

-- | Peeked value
InvalidDomainShutdownReason :: CInt -> InvalidDomainShutdownReason

-- | This error can be raised if any error occured during receiving the
--   list, for example: try to to fetch a list in domU.
data DomainGetInfoError
DomainGetInfoError :: Errno -> DomainGetInfoError

-- | Domain id, wrapper around <a>Word32</a>.
newtype DomId
DomId :: Word32 -> DomId
unDomId :: DomId -> Word32

-- | Domain flags. It's translated from xc_dominfo structure, so it's
--   possible to be mutual exclusion flags in one domain, e.g.
--   <a>DomainFlagShutdown</a> and <a>DomainFlagRunning</a>.
data DomainFlag
DomainFlagDying :: DomainFlag
DomainFlagCrashed :: DomainFlag
DomainFlagShutdown :: DomainFlag
DomainFlagPaused :: DomainFlag
DomainFlagBlocked :: DomainFlag
DomainFlagRunning :: DomainFlag
DomainFlagHVM :: DomainFlag
DomainFlagDebugged :: DomainFlag

-- | Domain shutdown reason it's only meaningful if domain has
--   <a>DomainFlagShutdown</a> flag.
data DomainShutdownReason
DomainShutdownReasonPoweroff :: DomainShutdownReason
DomainShutdownReasonReboot :: DomainShutdownReason
DomainShutdownReasonSuspend :: DomainShutdownReason
DomainShutdownReasonCrash :: DomainShutdownReason
DomainShutdownReasonWatchdog :: DomainShutdownReason

-- | Information about a single domain.
data DomainInfo
DomainInfo :: {-# UNPACK #-} !DomId -> {-# UNPACK #-} !Word32 -> !(BitSet DomainFlag) -> !(Maybe DomainShutdownReason) -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word64 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !UUID -> {-# UNPACK #-} !Word32 -> DomainInfo
domainInfoId :: DomainInfo -> {-# UNPACK #-} !DomId
domainInfoSsidRef :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoFlags :: DomainInfo -> !(BitSet DomainFlag)
domainInfoShutdownReason :: DomainInfo -> !(Maybe DomainShutdownReason)
domainInfoNumberOfPages :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoNumberOfSharedPages :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoSharedInfoFrame :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoCpuTime :: DomainInfo -> {-# UNPACK #-} !Word64
domainInfoMaxMemKb :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoNubmerOfOnlineVcpus :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoMaxVcpuId :: DomainInfo -> {-# UNPACK #-} !Word32
domainInfoDomHandle :: DomainInfo -> {-# UNPACK #-} !UUID
domainInfoCpuPool :: DomainInfo -> {-# UNPACK #-} !Word32

-- | A Xen transformer. This transformers keeps connection to the Xen
--   hypervisor interface.
data XenT m a

-- | Most simple <a>XenT</a> implementation.
type Xen = XenT IO

-- | Open new connection to the hypervisor, run any <tt>Xen</tt> action and
--   close connection if nessesary. This function can fail with <tt>Either
--   SomeException</tt> with <a>XcHandleOpenError</a> and any error of
--   providing <tt>Xen</tt> action.
runXenT :: (Functor m, MonadIO m, MonadCatch m) => XenT m a -> m (Either SomeException a)

-- | Returns a lift of domains, this function can fail with
--   <a>InvalidDomainShutdownReason</a> and <a>DomainGetInfoError</a>.
domainGetInfo :: MonadXen m => m [DomainInfo]

-- | Pause domain. A paused domain still exists in memory however it does
--   not receive any timeslices from the hypervisor.
domainPause :: MonadXen m => DomId -> m Bool

-- | Unpause a domain. The domain should have been previously paused.
domainUnpause :: MonadXen m => DomId -> m Bool

-- | Shutdown domain. This is intended for use in fully-virtualized domains
--   where this operation is analogous to the sched_op operations in a
--   paravirtualized domain.
domainShutdown :: MonadXen m => DomId -> DomainShutdownReason -> m Bool

-- | Destroy a domain. Destroying a domain removes the domain completely
--   from memory. This function should be called after
--   <a>domainShutdown</a> to free up the domain resources.
domainDestroy :: MonadXen m => DomId -> m Bool
