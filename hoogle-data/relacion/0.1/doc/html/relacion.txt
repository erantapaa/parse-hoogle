-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A relation data structure.
--   
--   A library to model relationships between two objects that are
--   subclasses of Ord.
--   
--   Instead using a Map structure we use a two Maps that allows fast
--   searching either by the key element or the value element.
--   
--   Each of Map is between an element and a set of values. Thus careful
--   coordination of operations is required.
--   
--   This library lacks of extensive testing, formal testing or automated
--   testing. Also in comparison to Data.Set or Data.Map (which provide the
--   underlying infrastructure used) there are some missing methods.
--   
--   An example of use is the include source file T02_Relacion.hs.
@package relacion
@version 0.1


-- | El contenedor Relacin modela asociaciones dos elementos. Ofrece
--   bsqueda eficiente por cualquiera de los dos elementos.
--   
--   Es similar a Data.Map en que asocia llaves (k) con valores (v).
--   
--   A diferencia del contenedor Data.Map, un elemento puede estar asociado
--   ms de una vez.
--   
--   Los dos propsito fundamentales de esta estructura son
--   
--   <ol>
--   <li>Asociar elementos. 2. Ofrecer eficiencia en bsquedas por
--   cualquiera de los dos elementos.</li>
--   </ol>
--   
--   Como no estn implementados ni map ni fold, debe convertir la
--   estructura en una lista para procesarla secuencialmente.
module Data.Relacion
data Relación a b

-- | <tt>size r</tt> devuelve la cantidad de tuplas en la relacin.
size :: Relación a b -> Int

-- | True si la relacin est vaca.
null :: Relación a b -> Bool

-- | Construye una relacin sin elementos.
empty :: Relación a b

-- | La lista debe tener formato [(k1, v1), (k2, v2),..,(kn, vn)].
fromList :: (Ord a, Ord b) => [(a, b)] -> Relación a b

-- | Construye una relacin compuesta por la asociacin de <tt>x</tt> y
--   <tt>y</tt>.
singleton :: a -> b -> Relación a b

-- | La relacin que resulta de unir dos relaciones <tt>r</tt> y
--   <tt>s</tt>.
union :: (Ord a, Ord b) => Relación a b -> Relación a b -> Relación a b

-- | Concatena una lista de relaciones en una sola relacin.
unions :: (Ord a, Ord b) => [Relación a b] -> Relación a b

-- | Inserta la asociacin entre <tt> x </tt> y <tt> y </tt> en la relacin
--   <tt> r </tt>
insert :: (Ord a, Ord b) => a -> b -> Relación a b -> Relación a b

-- | Remueve una asociacin de la relacin.
delete :: (Ord a, Ord b) => a -> b -> Relación a b -> Relación a b

-- | El conjunto de valores asociados a un valor del dominio.
lookupDom :: Ord a => a -> Relación a b -> Maybe (Set b)

-- | El conjunto de valores asociados a un valor del rango.
lookupRan :: Ord b => b -> Relación a b -> Maybe (Set a)

-- | True si el elemento <tt> x </tt> pertenece al dominio de <tt> r </tt>.
memberDom :: Ord a => a -> Relación a b -> Bool

-- | True si el elemento pertenece al rango.
memberRan :: Ord b => b -> Relación a b -> Bool

-- | True si la relacin contiene la asociacin <tt>x</tt> y <tt>y</tt>
member :: (Ord a, Ord b) => a -> b -> Relación a b -> Bool

-- | True si un par no pertenece a la relacin
notMember :: (Ord a, Ord b) => a -> b -> Relación a b -> Bool
toList :: Relación a b -> [(a, b)]

-- | Devuelve el dominio de la relacin como un conjunto.
dom :: Relación a b -> Set a

-- | Devuelve el rango de la relacin como un conjunto.
ran :: Relación a b -> Set b

-- | Compacta un conjunto de conjuntos cuyos valores que pueden ser
--   <tt>Just (Set x)</tt> o <tt>Nothing</tt>.
--   
--   Los casos <tt>Nothing</tt> son purgados.
--   
--   Es similar a <tt>concat</tt>.
compactarSet :: Ord a => Set (Maybe (Set a)) -> Set a
(|$>) :: (Ord a, Ord b) => Set a -> Set b -> Relación a b -> Set b

-- | Implementacin primitiva para el operador de seleccin a la izquierda
--   o a la derecha.
--   
--   PICA provee dos operadores |&gt; y &lt;|, respectivamente |$&gt; y
--   &lt;$| en esta biblioteca, que trabajan sobre una Relacin y OIS's.
--   PICA expone los operadores definidos ac, para no romper con la
--   abstraccin del tipo de datos Relacin y porque teniendo acceso a los
--   componentes escondidos de Relacin, es ms eficiente la implementacin
--   de la operacin de restriccin.
--   
--   (a &lt;$| b) r
--   
--   se lee: por cada elemento <tt>b</tt> del conjunto <tt>B</tt>,
--   seleccione un elemento <tt>a</tt> del conjunto <tt>A</tt> si
--   <tt>a</tt> est relacionado con <tt>b</tt> en la relacin <tt>r</tt>.
--   
--   (a |$&gt; b) r
--   
--   se lee: por cada elemento <tt>a</tt> del conjunto <tt>A</tt>,
--   seleccione un elemento <tt>b</tt> del conjunto <tt>B</tt> si
--   <tt>a</tt> est relacionado con <tt>b</tt> en la relacin <tt>r</tt>.
--   
--   Con respecto a los operadores de restriccin de dominio y restriccin
--   de rango del lenguaje Z que devuelven una relacin, los descritos son
--   diferentes y devuelven el dominio o el rango.
(<$|) :: (Ord a, Ord b) => Set a -> Set b -> Relación a b -> Set a

-- | Restriccin de dominio para una relacin. Modelado como en z.
(<|) :: (Ord a, Ord b) => Set a -> Relación a b -> Relación a b

-- | Restriccin de rango para una relacin. Modelado como en z.
(|>) :: (Ord a, Ord b) => Relación a b -> Set b -> Relación a b
instance (Show a, Show b) => Show (Relación a b)
instance (Eq a, Eq b) => Eq (Relación a b)
instance (Ord a, Ord b) => Ord (Relación a b)
