-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell XMPP (eXtensible Message Passing Protocol, a.k.a. Jabber) library
--   
--   Haskell XMPP (eXtensible Message Passing Protocol, a.k.a. Jabber)
--   library
--   
--   Unlike package network-protocol-xmpp, which uses libxml-sax, this
--   library uses HaXml and supports MUC. However, MUC support of the
--   moment is worse than that in package XMPP.
--   
--   This library make extensive use of STM and threads to simplify writing
--   message-handling code.
@package haskell-xmpp
@version 1.0.2

module Network.XMPP.UTF8
fromUTF8, toUTF8 :: String -> String


-- | Takes the MD5 module supplied by Ian Lynagh and strips it a bit to
--   reduce number of imports See
--   <a>http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/</a> and
--   <a>http://www.ietf.org/rfc/rfc1321.txt</a>.
module Network.XMPP.MD5
md5 :: MD5 a => a -> ABCD
md5s :: MD5 a => a -> String
md5i :: MD5 a => a -> Integer
class MD5 a
get_next :: MD5 a => a -> ([Word32], Int, a)
len_pad :: MD5 a => Zord64 -> a -> a
finished :: MD5 a => a -> Bool
newtype ABCD
ABCD :: (Word32, Word32, Word32, Word32) -> ABCD
type Zord64 = Word64
newtype Str
Str :: String -> Str
newtype BoolList
BoolList :: [Bool] -> BoolList
newtype WordList
WordList :: ([Word32], Zord64) -> WordList
instance Eq ABCD
instance Show ABCD
instance Num ABCD
instance MD5 WordList
instance MD5 Str
instance MD5 BoolList


-- | Base64 encoding and decoding functions provided by Warwick Gray. See
--   <a>http://homepages.paradise.net.nz/warrickg/haskell/http/#base64</a>
--   and <a>http://www.faqs.org/rfcs/rfc2045.html</a>.
module Network.XMPP.Base64
encode :: String -> String
decode :: String -> String

-- | Cut up a string into 72 char lines, each line terminated by CRLF.
chop72 :: String -> String


-- | JID datatype and functions
module Network.XMPP.JID

-- | Jabber ID (JID) datatype
data JID
JID :: Maybe String -> String -> Maybe String -> JID

-- | Account name
name :: JID -> Maybe String

-- | Server adress
server :: JID -> String

-- | Resource name
resource :: JID -> Maybe String
instance Show JID
instance Read JID


module Network.XMPP.Types

-- | XMPP message in the parsed form
type XmppMessage = Content Posn

-- | XmppStateT is a state transformer over IO monad, using Stream as a
--   <a>state holder</a>. For API, look into <a>Stream</a>
type XmppStateT a = StateT Stream IO a

-- | XMPP stream, used as a state in XmppStateT state transformer
data Stream
Stream :: Handle -> !Int -> [Token] -> Stream

-- | IO handle to the underlying file or socket
handle :: Stream -> Handle

-- | id of the next message (if needed)
idx :: Stream -> !Int

-- | Stream of the lexemes coming from server
lexemes :: Stream -> [Token]

-- | XMPP Stream type, used in <tt>stream</tt> pretty-printing combinator
--   and the likes
data StreamType

-- | Client-to-server
Client :: StreamType

-- | FIXME
ComponentAccept :: StreamType

-- | FIXME
ComponentConnect :: StreamType

-- | Generic XMPP stream atom
data Stanza
Message :: Maybe JID -> JID -> String -> MessageType -> String -> String -> String -> [Content Posn] -> Stanza
mFrom :: Stanza -> Maybe JID
mTo :: Stanza -> JID

-- | Message <tt>from</tt>, <tt>to</tt>, <a>id</a> attributes
mId :: Stanza -> String

-- | Message type (2.1.1)
mType :: Stanza -> MessageType

-- | Subject element (2.1.2.1)
mSubject :: Stanza -> String

-- | Body element (2.1.2.2)
mBody :: Stanza -> String

-- | Thread element (2.1.2.3)
mThread :: Stanza -> String

-- | Additional contents, used for extensions
mExt :: Stanza -> [Content Posn]
Presence :: Maybe JID -> Maybe JID -> String -> PresenceType -> ShowType -> String -> Maybe Integer -> [Content Posn] -> Stanza
pFrom :: Stanza -> Maybe JID
pTo :: Stanza -> Maybe JID

-- | Presence <tt>from</tt>, <tt>to</tt>, <a>id</a> attributes
pId :: Stanza -> String

-- | Presence type (2.2.1)
pType :: Stanza -> PresenceType

-- | Show element (2.2.2.1)
pShowType :: Stanza -> ShowType

-- | Status element (2.2.2.2)
pStatus :: Stanza -> String

-- | Presence priority (2.2.2.3)
pPriority :: Stanza -> Maybe Integer

-- | Additional contents, used for extensions
pExt :: Stanza -> [Content Posn]
IQ :: Maybe JID -> Maybe JID -> String -> IQType -> [Content Posn] -> Stanza
iqFrom :: Stanza -> Maybe JID
iqTo :: Stanza -> Maybe JID

-- | IQ id (Core-9.2.3)
iqId :: Stanza -> String

-- | IQ type (Core-9.2.3)
iqType :: Stanza -> IQType

-- | Child element (Core-9.2.3)
iqBody :: Stanza -> [Content Posn]
data MessageType
Chat :: MessageType
GroupChat :: MessageType
Headline :: MessageType
Normal :: MessageType
MessageError :: MessageType
data PresenceType
Default :: PresenceType
Unavailable :: PresenceType
Subscribe :: PresenceType
Subscribed :: PresenceType
Unsubscribe :: PresenceType
Unsubscribed :: PresenceType
Probe :: PresenceType
PresenceError :: PresenceType
data IQType
Get :: IQType
Result :: IQType
Set :: IQType
IQError :: IQType
data ShowType
Available :: ShowType
Away :: ShowType
FreeChat :: ShowType
DND :: ShowType
XAway :: ShowType

-- | Roster item type (7.1)
data RosterItem
RosterItem :: JID -> SubscribtionType -> Maybe String -> [String] -> RosterItem

-- | Entry's JID
jid :: RosterItem -> JID

-- | Subscribtion type
subscribtion :: RosterItem -> SubscribtionType

-- | Entry's nickname
nickname :: RosterItem -> Maybe String

-- | <a>group</a> elements
groups :: RosterItem -> [String]

-- | Since XMPP is network-oriented, block size is equal to maximal MTU
defaultStreamBlockSize :: Int

-- | Utility functions
isMessage :: Stanza -> Bool
isPresence :: Stanza -> Bool
isIQ :: Stanza -> Bool
instance Eq SubscribtionType
instance Eq MessageType
instance Eq PresenceType
instance Eq IQType
instance Eq ShowType
instance Show Stanza
instance Read ShowType
instance Read IQType
instance Read PresenceType
instance Read MessageType
instance Show ShowType
instance Show IQType
instance Show PresenceType
instance Show MessageType
instance Show (Content a)
instance Read SubscribtionType
instance Show SubscribtionType
instance Show StreamType


-- | XMPP presence utilities
module Network.XMPP.IM.Presence

-- | Default presence, should be sent at first
presAvailable :: String -> Stanza

-- | Should be sent at last
presUnavailable :: String -> Stanza
presAway :: String -> Stanza
presXa :: String -> Stanza
presChat :: String -> Stanza
presDND :: String -> Stanza


-- | Various XMPP/XML utilities
module Network.XMPP.Utils

-- | Conversion from/to HaXML's Content and CFilter
toContent :: CFilter Posn -> Content Posn
toFilter :: Content Posn -> CFilter Posn
noelem :: Element i
sattr :: t -> String -> (t, CFilter i)
strAttr :: t -> String -> (t, CFilter i)
ptag :: String -> [(String, CFilter i)] -> [CFilter i] -> CFilter i
itag :: String -> [(String, CFilter i)] -> CFilter i

-- | Returns strings extracted by xtract query
getVals :: String -> [Content Posn] -> [String]

-- | Queries xml for specific value <tt>isVal str = any (== str) .
--   getVals</tt>
isVal :: String -> String -> [Content Posn] -> Bool
getText :: Content i -> String
getText_ :: [Content i] -> String
mread :: Read a => [Char] -> Maybe a
mattr :: Show a => t -> Maybe a -> [(t, CFilter i)]
mattr' :: t -> Maybe String -> [(t, CFilter i)]
debug :: String -> XmppStateT ()
debugIO :: String -> IO ()

-- | Build some textual content.
literal :: String -> CFilter i


-- | Various <a>connection helpers</a> that let user obtain a handle to
--   pass to <tt>initiateStream</tt>
module Network.XMPP.Helpers

-- | Connect to XMPP server on specified host / port via HTTP 1.0 proxy
connectViaHttpProxy :: (Integral a, Show a1) => HostName -> a -> [Char] -> a1 -> IO Handle

-- | Connect to XMPP server on specified host / port
connectViaTcp :: String -> Int -> IO Handle

-- | Open file with pre-captured server-to-client XMPP stream. For
--   debugging
openStreamFile :: FilePath -> IO Handle


-- | An XMPP pretty-printing combinators Ported from Text.HTML to HaXML
--   combinatiors
module Network.XMPP.Print

-- | Render HaXML combinators into string, hacked for XMPP
renderXmpp :: XmppMessage -> String

-- | Convert the internal representation (built using HaXml combinators)
--   into string, and print it out
putXmppLn :: XmppMessage -> IO ()

-- | Convert the internal representation (built using HaXml combinators)
--   into string, and print it to the specified Handle, without trailing
--   newline
hPutXmpp :: Handle -> XmppMessage -> IO ()
stream :: Show a => a -> String -> CFilter i
streamEnd :: CFilter i
to :: String -> ([Char], CFilter i)
xmlns :: String -> ([Char], CFilter i)
xmllang :: String -> ([Char], CFilter i)
language :: String -> ([Char], CFilter i)
stream_version :: String -> ([Char], CFilter i)
mechanism :: String -> ([Char], CFilter i)
type_ :: String -> ([Char], CFilter i)
id_ :: String -> ([Char], CFilter i)
from :: String -> ([Char], CFilter i)


-- | An XMPP stream: means to create and use one
module Network.XMPP.Stream

-- | Sends message into Stream
out :: XmppMessage -> XmppStateT ()

-- | startM is a special accessor case, since it has to retrieve only
--   opening tag of the '&lt;stream&gt;' message, which encloses the whole
--   XMPP stream. That's why it does it's own parsing, and does not rely on
--   <a>nextM</a>
startM :: XmppStateT [Attribute]

-- | Selects next messages from stream
nextM :: XmppStateT XmppMessage
withNextM :: (XmppMessage -> b) -> StateT Stream IO b

-- | Selects next message matching predicate
selectM :: (XmppMessage -> Bool) -> XmppStateT XmppMessage

-- | Pass in xtract query, return query result from the first message where
--   it returns non-empty results
xtractM :: String -> XmppStateT [XmppMessage]
textractM :: String -> XmppStateT String
withSelectM :: (XmppMessage -> Bool) -> (XmppMessage -> b) -> StateT Stream IO b

-- | Convenience wrappers which allow for nicer code like: withNewStream $
--   do ...
withNewStream :: XmppStateT a -> IO (a, Stream)
withStream :: Stream -> XmppStateT a -> IO (a, Stream)

-- | Replaces contents of the Stream with the contents coming from given
--   handle.
resetStreamHandle :: (MonadIO m, MonadState Stream m) => Handle -> m ()
getText :: Content i -> String
getText_ :: [Content i] -> String
loopWithPlugins :: [Plugin] -> XmppStateT ()
data Plugin
Plugin :: String -> (XmppMessage -> XmppStateT ()) -> Plugin
trigger :: Plugin -> String
body :: Plugin -> (XmppMessage -> XmppStateT ())
getNextId :: XmppStateT Int
lookupAttr :: String -> [Attribute] -> Maybe String
newStream :: Stream


-- | SASL Authentication for XMPP
module Network.XMPP.Sasl

-- | Perform authentication over already-open channel
saslAuth :: [String] -> String -> String -> String -> XmppStateT ()


-- | XMPP stanzas parsing
module Network.XMPP.Stanza

-- | Parses XML element producing Stanza
parse :: XmppMessage -> Stanza

-- | Gets next message from stream and parses it
parseM :: XmppStateT Stanza

-- | Converts stanza to XML and outputs it
outStanza :: Stanza -> XmppStateT ()


-- | Concurrent actions over single IO channel
module Network.XMPP.Concurrent
data Thread
type XmppThreadT a = ReaderT Thread IO a

-- | Runs thread in XmppState monad
runThreaded :: XmppThreadT () -> XmppStateT ()
readChanS :: XmppThreadT Stanza
writeChanS :: Stanza -> XmppThreadT ()

-- | Runs specified action in parallel
withNewThread :: XmppThreadT () -> XmppThreadT ThreadId

-- | Turns action into infinite loop
loop :: XmppThreadT () -> XmppThreadT ()
waitFor :: (Stanza -> Bool) -> XmppThreadT Stanza


-- | XMPP IQ utilites
module Network.XMPP.IQ

-- | Send IQ of specified type with supplied data
iqSend :: String -> IQType -> [CFilter Posn] -> XmppStateT ()
iqReplyTo :: (Stanza -> Bool) -> (Stanza -> [CFilter Posn]) -> XmppThreadT ()


-- | Implementation of XMPP Core Protocol (RFC 3920)
module Network.XMPP.Core

-- | Open connection to specified server and return <a>Stream</a> coming
--   from it
initiateStream :: Handle -> String -> String -> String -> String -> XmppStateT (JID, Stream)


-- | XEP-0091, old delayed delivery
module Network.XMPP.XEP.Delayed

-- | True, if stanza is delivered delayed
isDelayed :: Stanza -> Bool


-- | XEP-0092, version request
module Network.XMPP.XEP.Version

-- | True, if stanza is a version request
isVersionReq :: Stanza -> Bool

-- | Replies to version request
versionAnswer :: String -> String -> String -> (Stanza -> [CFilter i])


-- | XEP-0045, join/kick/ban/leave functionality
module Network.XMPP.XEP.MUC

-- | Joins MUC room named by JID (conference@server/nick)
mucJoin :: JID -> XmppStateT ()

-- | Leaves MUC room named by JID (conference@server/nick)
mucLeave :: JID -> XmppStateT ()

-- | Stanza sent by <a>mucJoin</a>
mucJoinStanza :: JID -> Stanza

-- | Stanza sent by <a>mucLeave</a>
mucLeaveStanza :: JID -> Stanza


-- | Convenience module that re-exports all things XMPP
module Network.XMPP
version :: String
