-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Reusable quickcheck properties
--   
--   Properties of functions and relations, perhaps for use with quickcheck
@package props
@version 0.1.2

module Test.Properties

-- | <pre>
--   f a b == f b a
--   </pre>
--   
--   <pre>
--   symmetric (==) :: Int -&gt; Int -&gt; Bool
--   </pre>
--   
--   <pre>
--   symmetric (+)  :: Int -&gt; Int -&gt; Bool
--   </pre>
symmetric :: Eq b => (t -> t -> b) -> t -> t -> Bool

-- | <tt><a>symmetric</a> f a b</tt> implies <tt>a == b</tt>
--   
--   <pre>
--   antisymmetric (-) :: Int -&gt; Int -&gt; Bool
--   </pre>
antisymmetric :: Eq b => (b -> b -> b) -> b -> b -> Bool

-- | <pre>
--   a == (g . f) a
--   </pre>
--   
--   <pre>
--   inverts pred succ :: Int -&gt; Bool
--   </pre>
--   
--   <pre>
--   inverts succ pred :: Char -&gt; Bool
--   </pre>
inverts :: Eq b => (b -> b1) -> (b1 -> b) -> b -> Bool

-- | <tt>a == (f . f) a</tt> (alternatively, <tt><a>inverts</a> f f</tt>)
--   
--   <pre>
--   involutive negate
--   </pre>
--   
--   <pre>
--   involutive reverse :: String -&gt; Bool
--   </pre>
involutive :: Eq b => (b -> b) -> b -> Bool

-- | <pre>
--   a &lt;= f a
--   </pre>
--   
--   <pre>
--   nonDecreasing id
--   </pre>
--   
--   <pre>
--   nonDecreasing (\x -&gt; if even x then x else succ x)
--   </pre>
nonDecreasing :: Ord b => (b -> b) -> b -> Bool

-- | <pre>
--   a &lt; f a
--   </pre>
--   
--   <pre>
--   increasing succ :: Int -&gt; Bool
--   </pre>
increasing :: Ord b => (b -> b) -> b -> Bool

-- | Alias for <a>idempotent</a>
fixes :: Eq b => (b -> b) -> b -> Bool

-- | <pre>
--   f a == f (f a)
--   </pre>
--   
--   <pre>
--   idempotent (const "thingy")
--   </pre>
--   
--   <pre>
--   idempotent (*0)
--   </pre>
--   
--   <pre>
--   idempotent (&amp;&amp; False)
--   </pre>
idempotent :: Eq b => (b -> b) -> b -> Bool

-- | <pre>
--   f e a == a
--   </pre>
--   
--   <pre>
--   leftId (+) 0
--   </pre>
leftId :: Eq b => (t -> b -> b) -> t -> b -> Bool

-- | <pre>
--   f a e == a
--   </pre>
--   
--   <pre>
--   rightId (+) 0
--   </pre>
rightId :: Eq b => (b -> t -> b) -> t -> b -> Bool

-- | <pre>
--   <a>leftId</a> f e &amp;&amp; <a>rightId</a> f e
--   </pre>
--   
--   <pre>
--   identity (+) 0
--   </pre>
identity :: Eq b => (b -> b -> b) -> b -> b -> Bool

-- | <pre>
--   f a (f b c) == f (f a b) c
--   </pre>
--   
--   <pre>
--   associative (&amp;&amp;)
--   </pre>
--   
--   <pre>
--   associative (||)
--   </pre>
--   
--   <pre>
--   associative (++)
--   </pre>
--   
--   <pre>
--   associative (*)
--   </pre>
associative :: Eq b => (b -> b -> b) -> b -> b -> b -> Bool

-- | <tt><a>identity</a> f e</tt> and <tt><a>associative</a> f a b c</tt>
--   
--   <pre>
--   monoidal (&amp;&amp;) True
--   </pre>
--   
--   <pre>
--   monoidal (||) False
--   </pre>
--   
--   <pre>
--   monoidal (++) []
--   </pre>
--   
--   <pre>
--   monoidal (*) 1
--   </pre>
monoidal :: Eq b => (b -> b -> b) -> b -> b -> b -> b -> Bool

-- | <pre>
--   a == (f . g) a &amp;&amp; b == (g . f) b
--   </pre>
--   
--   <pre>
--   isomorphic succ (pred :: Int -&gt; Int)
--   </pre>
--   
--   <pre>
--   isomorphic not not
--   </pre>
--   
--   <pre>
--   isomorphic reverse (reverse :: String -&gt; String)
--   </pre>
--   
--   <pre>
--   isomorphic snd (((),) :: Int -&gt; ((),Int))
--   </pre>
isomorphic :: (Eq b, Eq b1) => (b -> b1) -> (b1 -> b) -> b -> b1 -> Bool

-- | <pre>
--   Just a == (g . f) a
--   </pre>
--   
--   <pre>
--   partiallyIsomorphic id Just
--   </pre>
--   
--   <pre>
--   partiallyIsomorphic show readMaybe
--   </pre>
partiallyIsomorphic :: Eq b => (b -> b1) -> (b1 -> Maybe b) -> b -> Bool

-- | <pre>
--   f a (g a b) == a &amp;&amp; g a (f a b) == a
--   </pre>
--   
--   <a>http://en.wikipedia.org/wiki/Absorption_law</a>
--   
--   <pre>
--   absorptive (&amp;&amp;) (||)
--   </pre>
--   
--   <pre>
--   absorptive min max
--   </pre>
absorptive :: Eq b => (b -> b -> b) -> (b -> b -> b) -> b -> b -> Bool

-- | <pre>
--   eq (f a) == eq (g a)
--   </pre>
--   
--   <pre>
--   equalizes even (*2) (*4)
--   </pre>
--   
--   <pre>
--   equalizes (const [4]) (take 7) (take 12)
--   </pre>
equalizes :: Eq b => (a -> b) -> (t -> a) -> (t -> a) -> t -> Bool
eqBy :: Eq b => (a -> b) -> a -> a -> Bool
leqBy :: Ord b => (a -> b) -> a -> a -> Bool
leBy :: Ord b => (a -> b) -> a -> a -> Bool
symmetricBy :: Eq b => (a -> b) -> (t -> t -> a) -> t -> t -> Bool
antisymmetricBy :: Eq b => (t -> b) -> (t -> t -> t) -> t -> t -> Bool
invertsBy :: Eq b => (a -> b) -> (a -> b1) -> (b1 -> a) -> a -> Bool
involutiveBy :: Eq b => (b1 -> b) -> (b1 -> b1) -> b1 -> Bool
nonDecreasingBy :: Ord b => (a -> b) -> (a -> a) -> a -> Bool
increasingBy :: Ord b => (a -> b) -> (a -> a) -> a -> Bool
fixesBy :: Eq b => (a -> b) -> (a -> a) -> a -> Bool
idempotentBy :: Eq b => (a -> b) -> (a -> a) -> a -> Bool
associativeBy :: Eq b => (a -> b) -> (a -> a -> a) -> a -> a -> a -> Bool
monoidalBy :: Eq b => (a -> b) -> (a -> a -> a) -> a -> a -> a -> a -> Bool
leftIdBy :: Eq b => (a -> b) -> (t -> a -> a) -> t -> a -> Bool
rightIdBy :: Eq b => (a -> b) -> (a -> t -> a) -> t -> a -> Bool
identityBy :: Eq b => (t -> b) -> (t -> t -> t) -> t -> t -> Bool
isomorphicBy :: (Eq b, Eq b1) => (b2 -> b) -> (a -> b1) -> (b2 -> a) -> (a -> b2) -> b2 -> a -> Bool
partiallyIsomorphicBy :: Eq b => (a -> b) -> (a -> b1) -> (b1 -> Maybe a) -> a -> Bool
absorptiveBy :: Eq b => (a -> b) -> (a -> a -> a) -> (a -> a -> a) -> a -> a -> Bool
