-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Well-typed, flexible and variadic printf for Haskell
--   
@package safe-printf
@version 0.1.0.0

module Text.Printf.Safe.Core

-- | Variadic function types.

-- | Formatter type.
type Formatter a = a -> String

-- | Printf Format.
data Printf xs
EOS :: Printf []
(:<>) :: String -> Printf xs -> Printf xs
(:%) :: Formatter x -> Printf xs -> Printf (x : xs)

-- | Hetero list.
data HList ts
HNil :: HList []
(:-) :: a -> HList xs -> HList (a : xs)

-- | Variadic version.
printf :: Printf xs -> xs ~> String

-- | HList version.
printf' :: Printf ts -> HList ts -> String
instance xs ~ '[] => IsString (Printf xs)

module Text.Printf.Safe.Combinators

-- | Append plain string to format.
(><) :: Printf ts -> String -> Printf ts

-- | Append formatter to format.
(%) :: Printf ts -> (a -> String) -> Printf (ts <> '[a])

-- | Concatenate two prtinf formats.
(+++) :: Printf ts -> Printf ps -> Printf (ts <> ps)

-- | Format <tt>String</tt> as it is.
s :: Formatter String

-- | Formatter for <tt>Show</tt> instances.
_S :: Show a => Formatter a

-- | Converts <tt><a>ShowS</a></tt> function to <tt><a>Formatter</a></tt>.
_shows :: (a -> ShowS) -> Formatter a

-- | Format <tt>Integral</tt>s at base.
base :: (Show a, Integral a) => a -> Maybe (Char, Int) -> Formatter a

-- | No padding version of <tt><a>d'</a></tt>.
d :: (Show a, Integral a) => Formatter a

-- | Decimal formatter with padding.
d' :: (Show a, Integral a) => Char -> Int -> Formatter a

-- | No padding version of <tt><a>o'</a></tt>.
o :: (Show a, Integral a) => Formatter a

-- | Octal formatter with padding.
o' :: (Show a, Integral a) => Char -> Int -> Formatter a

-- | No padding version of <tt><a>b'</a></tt>.
b :: (Show a, Integral a) => Formatter a

-- | Binary formatter with padding.
b' :: (Show a, Integral a) => Char -> Int -> Formatter a

-- | No padding version of <tt><a>b'</a></tt>.
h :: (Show a, Integral a) => Formatter a

-- | Binary formatter with padding.
h' :: (Show a, Integral a) => Char -> Int -> Formatter a

-- | <tt>RealFloat</tt> formatter.
f :: RealFloat a => Formatter a

module Text.Printf.Safe.QQ

-- | Quasiquoter for formatter. It supprots escape sequence. Formatter is
--   prefixed by <tt>%</tt> and you can use <tt>%{hoge}</tt> to
--   antiquotation.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XQuasiQuotes
--   
--   &gt;&gt;&gt; printf [fmt|Answer is: %d and %S|] 42 True
--   "Answer is: 42 and True"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; printf [fmt|%02d%% of people answers %{show . not}.\n|] 4 False
--   "04% of people answers True.\n"
--   </pre>
--   
--   Predefined formatters:
--   
--   <ul>
--   <li><i><tt>%%</tt></i> outputs <tt>%</tt>.</li>
--   <li><i><tt>%d</tt></i> formats <tt><a>Integral</a></tt> value in
--   decimal.</li>
--   <li><i><tt>%<i>n</i>d</tt></i> same as above, but padding with <tt>'
--   '</tt> (space) to <i>n</i> digits.</li>
--   <li><i><tt>%0<i>n</i>d</tt></i> same as above, but padding with
--   <tt>'0'</tt> to <i>n</i> digits.</li>
--   <li><i><tt>%b</tt>, <tt>%o</tt>, <tt>%h</tt>, <tt>%H</tt></i> formats
--   <tt><a>Integral</a></tt>s in binary, octet, hex and HEX resp. Padding
--   options can be specified as <tt>%d</tt>.</li>
--   <li><i><tt>%f</tt></i> formats <tt><a>Real</a></tt> value with
--   <tt><a>show</a></tt> function.</li>
--   <li><i><tt>%s</tt></i> embeds <tt><a>String</a></tt> value.</li>
--   <li><i><tt>%S</tt></i> embeds <tt><a>Show</a></tt> instances.</li>
--   <li><i><tt>%{<i>expr</i>}</tt>, where <tt><i>expr</i></tt> is a
--   Haskell expression of type <tt>a -&gt; String</tt></i> Antiquote. This
--   formats corresponding argument by passing to
--   <tt><i>expr</i></tt>.</li>
--   </ul>
fmt :: QuasiQuoter

module Text.Printf.Safe
