-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | tiny library for encoding json
--   
@package blaze-json
@version 0.2.1

module Text.Blaze.JSON.Internal

-- | JSON encoding data type
newtype JSON
JSON :: (EncodeConfig -> Builder) -> JSON
unJSON :: JSON -> EncodeConfig -> Builder

-- | convert JSON to bytestring Builder.
toBuilder :: EncodeConfig -> JSON -> Builder

-- | encode JSON using given config
encodeWith :: EncodeConfig -> JSON -> ByteString

-- | <pre>
--   encode = encodeWith def
--   </pre>
encode :: JSON -> ByteString

-- | <pre>
--   &gt;&gt;&gt; def :: EncodeConfig
--   EncodeConfig {escapeHtml = False}
--   </pre>
newtype EncodeConfig
EncodeConfig :: Bool -> EncodeConfig

-- | escape &amp;lt; and &amp;gt; to \uXXXX.
escapeHtml :: EncodeConfig -> Bool
unsafeToJSON :: Builder -> JSON

-- | json boolean value from Bool
--   
--   <pre>
--   &gt;&gt;&gt; bool True
--   "true"
--   </pre>
bool :: Bool -> JSON

-- | json null value
--   
--   <pre>
--   &gt;&gt;&gt; null
--   "null"
--   </pre>
null :: JSON

-- | json number value from Integral
--   
--   <pre>
--   &gt;&gt;&gt; integral 32
--   "32"
--   </pre>
integral :: Integral i => i -> JSON

-- | json number value from double
--   
--   <pre>
--   &gt;&gt;&gt; double 235.12
--   "235.12"
--   </pre>
double :: Double -> JSON

-- | json number value from float
--   
--   <pre>
--   &gt;&gt;&gt; float 235.12
--   "235.12"
--   </pre>
float :: Float -> JSON

-- | json text value from Text
--   
--   <pre>
--   &gt;&gt;&gt; print $ text "foo\n"
--   "\"foo\\n\""
--   </pre>
text :: Text -> JSON

-- | json text value from LazyText
--   
--   <pre>
--   &gt;&gt;&gt; print $ lazyText "bar\0"
--   "\"bar\\u0000\""
--   </pre>
lazyText :: Text -> JSON

-- | utf8 encoded bytestring to JSON. since v0.2.0.
--   
--   <pre>
--   &gt;&gt;&gt; utf8 $ T.encodeUtf8 "\29483"
--   "\"\29483\""
--   </pre>
utf8 :: ByteString -> JSON

-- | utf8 encoded lazy bytestring to JSON. since v0.2.0.
--   
--   <pre>
--   &gt;&gt;&gt; lazyUtf8 $ TL.encodeUtf8 "\29356"
--   "\"\29356\""
--   </pre>
lazyUtf8 :: ByteString -> JSON
array' :: Foldable f => (a -> JSON) -> f a -> JSON

-- | convert to json array
--   
--   <pre>
--   &gt;&gt;&gt; array [integral 4, bool True]
--   "[4,true]"
--   </pre>
array :: Foldable f => f JSON -> JSON
object' :: Foldable f => (k -> Text) -> (a -> JSON) -> f (k, a) -> JSON

-- | O(nlogn) convert to object
--   
--   prior value is prevailed.
--   
--   You could use <a>unsafeObject</a> when could ensure unique key.
--   
--   <pre>
--   &gt;&gt;&gt; object [("foo", integral 12), ("bar", bool True), ("foo", text "ignored")]
--   "{\"foo\":12,\"bar\":true}"
--   </pre>
object :: Foldable f => f (Text, JSON) -> JSON
unsafeObject' :: Foldable f => (k -> Text) -> (a -> JSON) -> f (k, a) -> JSON

-- | O(n) unique key list to object
--   
--   <pre>
--   &gt;&gt;&gt; unsafeObject [("foo", integral 12), ("bar", bool True), ("foo", text "INVALID")]
--   "{\"foo\":12,\"bar\":true,\"foo\":\"INVALID\"}"
--   </pre>
unsafeObject :: Foldable f => f (Text, JSON) -> JSON
instance Typeable JSON
instance Show EncodeConfig
instance Show JSON
instance Ord JSON
instance Eq JSON
instance Default EncodeConfig

module Text.Blaze.JSON.Class
class ToJSON a
toJSON :: ToJSON a => a -> JSON
instance [overlap ok] ToJSON a => ToJSON (Last a)
instance [overlap ok] ToJSON a => ToJSON (First a)
instance [overlap ok] ToJSON a => ToJSON (Dual a)
instance [overlap ok] (ToJSON a, ToJSON b, ToJSON c, ToJSON d, ToJSON e, ToJSON f) => ToJSON (a, b, c, d, e, f)
instance [overlap ok] (ToJSON a, ToJSON b, ToJSON c, ToJSON d, ToJSON e) => ToJSON (a, b, c, d, e)
instance [overlap ok] (ToJSON a, ToJSON b, ToJSON c, ToJSON d) => ToJSON (a, b, c, d)
instance [overlap ok] (ToJSON a, ToJSON b, ToJSON c) => ToJSON (a, b, c)
instance [overlap ok] (ToJSON a, ToJSON b) => ToJSON (a, b)
instance [overlap ok] ToJSON JSON
instance [overlap ok] ToJSON a => ToJSON (Tree a)
instance [overlap ok] ToJSON v => ToJSON (Map String v)
instance [overlap ok] ToJSON v => ToJSON (Map Text v)
instance [overlap ok] ToJSON v => ToJSON (Map Text v)
instance [overlap ok] ToJSON a => ToJSON (IntMap a)
instance [overlap ok] ToJSON IntSet
instance [overlap ok] ToJSON a => ToJSON (Set a)
instance [overlap ok] (Foldable f, ToJSON a) => ToJSON (f a)
instance [overlap ok] ToJSON Text
instance [overlap ok] ToJSON Text
instance [overlap ok] ToJSON Word64
instance [overlap ok] ToJSON Word32
instance [overlap ok] ToJSON Word16
instance [overlap ok] ToJSON Word8
instance [overlap ok] ToJSON Word
instance [overlap ok] ToJSON Int64
instance [overlap ok] ToJSON Int32
instance [overlap ok] ToJSON Int16
instance [overlap ok] ToJSON Int8
instance [overlap ok] ToJSON Integer
instance [overlap ok] ToJSON Int
instance [overlap ok] ToJSON Float
instance [overlap ok] ToJSON Double
instance [overlap ok] ToJSON Char
instance [overlap ok] ToJSON [Char]
instance [overlap ok] ToJSON ()
instance [overlap ok] ToJSON Bool
instance [overlap ok] (ToJSON a, ToJSON b) => ToJSON (Either a b)
instance [overlap ok] ToJSON a => ToJSON (Maybe a)

module Text.Blaze.JSON

-- | JSON encoding data type
data JSON

-- | <pre>
--   &gt;&gt;&gt; def :: EncodeConfig
--   EncodeConfig {escapeHtml = False}
--   </pre>
newtype EncodeConfig
EncodeConfig :: Bool -> EncodeConfig

-- | escape &amp;lt; and &amp;gt; to \uXXXX.
escapeHtml :: EncodeConfig -> Bool

-- | The default value for this type.
def :: Default a => a

-- | convert JSON to bytestring Builder.
toBuilder :: EncodeConfig -> JSON -> Builder

-- | encode JSON using given config
encodeWith :: EncodeConfig -> JSON -> ByteString

-- | <pre>
--   encode = encodeWith def
--   </pre>
encode :: JSON -> ByteString

-- | json null value
--   
--   <pre>
--   &gt;&gt;&gt; null
--   "null"
--   </pre>
null :: JSON

-- | json boolean value from Bool
--   
--   <pre>
--   &gt;&gt;&gt; bool True
--   "true"
--   </pre>
bool :: Bool -> JSON

-- | json number value from Integral
--   
--   <pre>
--   &gt;&gt;&gt; integral 32
--   "32"
--   </pre>
integral :: Integral i => i -> JSON

-- | json number value from double
--   
--   <pre>
--   &gt;&gt;&gt; double 235.12
--   "235.12"
--   </pre>
double :: Double -> JSON

-- | json text value from Text
--   
--   <pre>
--   &gt;&gt;&gt; print $ text "foo\n"
--   "\"foo\\n\""
--   </pre>
text :: Text -> JSON

-- | json text value from LazyText
--   
--   <pre>
--   &gt;&gt;&gt; print $ lazyText "bar\0"
--   "\"bar\\u0000\""
--   </pre>
lazyText :: Text -> JSON

-- | utf8 encoded bytestring to JSON. since v0.2.0.
--   
--   <pre>
--   &gt;&gt;&gt; utf8 $ T.encodeUtf8 "\29483"
--   "\"\29483\""
--   </pre>
utf8 :: ByteString -> JSON

-- | utf8 encoded lazy bytestring to JSON. since v0.2.0.
--   
--   <pre>
--   &gt;&gt;&gt; lazyUtf8 $ TL.encodeUtf8 "\29356"
--   "\"\29356\""
--   </pre>
lazyUtf8 :: ByteString -> JSON

-- | convert to json array
--   
--   <pre>
--   &gt;&gt;&gt; array [integral 4, bool True]
--   "[4,true]"
--   </pre>
array :: Foldable f => f JSON -> JSON

-- | O(nlogn) convert to object
--   
--   prior value is prevailed.
--   
--   You could use <a>unsafeObject</a> when could ensure unique key.
--   
--   <pre>
--   &gt;&gt;&gt; object [("foo", integral 12), ("bar", bool True), ("foo", text "ignored")]
--   "{\"foo\":12,\"bar\":true}"
--   </pre>
object :: Foldable f => f (Text, JSON) -> JSON
