-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Applicative-based numeric instances
--   
--   Any applicative functor can be given numeric instances in a
--   boilerplate way. The <i>applicative-numbers</i> package provides an
--   include file that makes it a snap to define these instances. See
--   <a>Data.Numeric.Function</a> for an example.
--   
--   Project wiki page:
--   <a>http://haskell.org/haskellwiki/applicative-numbers</a>
--   
--   Copyright 2009-2013 Conal Elliott; BSD3 license.
--   
--   Instances of <tt>Num</tt> classes for applicative functors. To be
--   <tt>#include</tt>'d after defining <tt>APPLICATIVE</tt> as the
--   applicative functor name and <tt>CONSTRAINTS</tt> as a list of
--   constraints, which must carry its own trailing comma if non-empty. The
--   <tt>APPLICATIVE</tt> symbol gets <tt>#undef</tt>'d at the end of the
--   include file, so that multiple includes are convenient.
--   
--   For instance,
--   
--   <pre>
--   #define INSTANCE_Ord
--   #define INSTANCE_Enum
--   
--   #define APPLICATIVE Vec2
--   #include "ApplicativeNumeric-inc.hs"
--   
--   #define APPLICATIVE Vec3
--   #include "ApplicativeNumeric-inc.hs"
--   
--   #define APPLICATIVE Vec4
--   #include "ApplicativeNumeric-inc.hs"
--   </pre>
--   
--   You'll also have to import <a>pure</a> and <a>liftA2</a> from
--   <a>Control.Applicative</a> and specify <tt>the FlexibleContexts</tt>
--   language extension (due to an implementation hack).
--   
--   Some instances are generated only if a corresponding CPP symbol is
--   defined: <tt>INSTANCE_Eq</tt>, <tt>INSTANCE_Ord</tt>,
--   <tt>INSTANCE_Show</tt>, <tt>INSTANCE_Enum</tt>
@package applicative-numbers
@version 0.1.3


-- | Numeric instances for functions
module Data.Numeric.Function
instance RealFloat applicative_arg => RealFloat (a -> applicative_arg)
instance RealFrac applicative_arg => RealFrac (a -> applicative_arg)
instance Floating applicative_arg => Floating (a -> applicative_arg)
instance Fractional applicative_arg => Fractional (a -> applicative_arg)
instance Integral applicative_arg => Integral (a -> applicative_arg)
instance (Num applicative_arg, Ord applicative_arg) => Real (a -> applicative_arg)
instance Num applicative_arg => Num (a -> applicative_arg)
instance Enum applicative_arg => Enum (a -> applicative_arg)
instance Ord applicative_arg => Ord (a -> applicative_arg)
instance Functor [] => Eq (a -> applicative_arg)
