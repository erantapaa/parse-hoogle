-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Character set detection using Mozilla's Universal Character Set Detector
--   
--   Mozilla have developed a robust and efficient character set detection
--   algorithm for use in their web browsers. The algorithm is able to
--   detect all of the most frequently encountered character encodings
--   totally automatically.
--   
--   This library wraps up their library and exposes a very simple Haskell
--   interface to it. The library is portable, and is confirmed to work on
--   both Unix and Windows.
@package charsetdetect
@version 1.0


-- | Detect the likely character encoding for a stream of bytes using
--   Mozilla's Universal Character Set Detector.
module Codec.Text.Detect

-- | Detect the likely encoding used by a <a>ByteString</a>. At the time of
--   writing, the encoding returned will be drawn from this list:
--   
--   <pre>
--   Big5
--   EUC-JP
--   EUC-KR
--   GB18030
--   gb18030
--   HZ-GB-2312
--   IBM855
--   IBM866
--   ISO-2022-CN
--   ISO-2022-JP
--   ISO-2022-KR
--   ISO-8859-2
--   ISO-8859-5
--   ISO-8859-7
--   ISO-8859-8
--   KOI8-R
--   Shift_JIS
--   TIS-620
--   UTF-8
--   UTF-16BE
--   UTF-16LE
--   UTF-32BE
--   UTF-32LE
--   windows-1250
--   windows-1251
--   windows-1252
--   windows-1253
--   windows-1255
--   x-euc-tw
--   X-ISO-10646-UCS-4-2143
--   X-ISO-10646-UCS-4-3412
--   x-mac-cyrillic
--   </pre>
--   
--   Note that there are two capitalisations of <tt>gb18030</tt>. For this
--   reason (and to be future-proof against any future behaviour like this
--   for newly-added character sets) we recommend that you compare
--   character set names case insensitively.
detectEncodingName :: ByteString -> Maybe String

-- | Detect the encoding for a <a>ByteString</a> and attempt to create a
--   <a>TextEncoding</a> suitable for decoding it.
detectEncoding :: ByteString -> IO (Maybe TextEncoding)
