-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | DSL for describing OpenFlow networks, and a compiler generating NetKit labs.
--   
--   DSL for describing OpenFlow networks, and a compiler generating NetKit
--   labs.
@package nettle-netkit
@version 0.2.0


-- | A simple, purely functional implementation of union-find.
module Nettle.Netkit.UnionFind
type Partition a = Set (Set a)
discretePartition :: Ord a => [a] -> Partition a
unionParts :: Ord a => a -> a -> Partition a -> Partition a
finestPartition :: Ord a => [(a, a)] -> Partition a


-- | This module provides facilities for easily creating Netkit
--   (<a>http://wiki.netkit.org/index.php/Main_Page</a>) labs to experiment
--   with OpenFlow switches and controllers. This module provides a
--   notation for describing simple OpenFlow-based network topologies, and
--   provides a command that generates a NetKit lab that can be used to
--   simulate the network.
--   
--   To use this module, describe the configuration of your test network,
--   including hosts, switches and their interconnectivity using the
--   functions in this module (see the example below), and then run one of
--   the <tt>makeLab</tt> commands to generate the Netkit files needed to
--   run the lab. You can then move into the directory containing the
--   Netkit lab and start the lab using Netkit commands (e.g.
--   <tt>lstart</tt>). The generated lab will include hosts and switches,
--   but not a controller. The lab will setup a TAP interface with subnet
--   10.0.0.0/8 from the switch virtual machines to the host on which you
--   started the lab, and the switches will attempt to contact a controller
--   with IP address 10.0.0.1 over that TAP interface, at the server port
--   mentioned in the lab. You can then control the switches by starting a
--   controller on the host at the specified port. See the example below
--   for more details.
--   
--   The generated lab is designed to work with a customized netkit file
--   system that has OpenFlow software in a particular location.
--   Instructions for obtaining this file system are here
--   <a>http://haskell.cs.yale.edu/?page_id=383</a>; see the last
--   instruction in the section on Installing on Your Own Machine. The
--   generator (i.e. <tt>makeLab</tt>) must know the location of this file
--   in order to generate the Netkit lab files. The default options assume
--   the files are in the user's <tt>~/.nettle</tt> directory, but they can
--   be placed in other locations as well. If they are in another location,
--   then the Lab options must be set appropriately.
module Nettle.Netkit.LabUtil
data LabConfig
LabConfig :: [Switch] -> ControllerTCPPort -> [((Host, Interface), SwitchPort)] -> [(SwitchPort, SwitchPort)] -> LabConfig

-- | Switches for this lab
switches :: LabConfig -> [Switch]

-- | The TCP port number at which the controller will listen for switch
--   connections
controllerServerPort :: LabConfig -> ControllerTCPPort

-- | A description of where the host interfaces are attached to switches in
--   the network
hosts :: LabConfig -> [((Host, Interface), SwitchPort)]

-- | A description of how switches are connected
links :: LabConfig -> [(SwitchPort, SwitchPort)]

-- | A datatype for specifying lab options, including the paths to the
--   kernel and filesystem used by netkit machines, as well as the OpenFlow
--   version of the reference switch software.
data Options
Options :: Maybe String -> Maybe String -> OpenFlowVersion -> Options
pathToKernel :: Options -> Maybe String
pathToFileSystem :: Options -> Maybe String
openFlowVersion :: Options -> OpenFlowVersion

-- | An enumerated data type representing OpenFlow versions supported by
--   this module.
data OpenFlowVersion
Ver0_9_0 :: OpenFlowVersion
Ver1_0_0 :: OpenFlowVersion
type ControllerTCPPort = Int
newtype Switch
Switch :: SwitchID -> Switch
data Host
Host :: Int -> Host
hostID :: Host -> Int
newtype Port
Port :: PortID -> Port
data Interface
Interface :: Int -> IPAddress -> Interface
interfaceID :: Interface -> Int
interfaceIPAddress :: Interface -> IPAddress
type SwitchPort = (Switch, Port)
switch :: SwitchID -> Switch
host :: Int -> Host
port :: PortID -> Port

-- | Denotes a SwitchPort, i.e. a port on a switch.
(#) :: Switch -> Port -> SwitchPort

-- | Denotes a link (switch-to-switch) connection.
(<-->) :: SwitchPort -> SwitchPort -> (SwitchPort, SwitchPort)

-- | Denotes where a host is attached to the network of switches.
(@@) :: (Host, Interface) -> SwitchPort -> ((Host, Interface), SwitchPort)

-- | <tt>makeLabWithDefaults path options lab</tt> is a command that writes
--   the files and directories needed to run a Netkit lab that implements
--   the description provided by <tt>lab</tt>. It writes the files to
--   directory <tt>path</tt>, and the options are specified by
--   <tt>options</tt>.
makeLab :: FilePath -> Options -> LabConfig -> IO ()

-- | <tt>makeLabWithDefaults path version lab</tt> is a command that writes
--   the files and directories needed to run a Netkit lab that implements
--   the description provided by <tt>lab</tt>. It writes the files to
--   directory <tt>path</tt>, and the switches will run the OpenFlow
--   reference switch software for OpenFlow version <tt>version</tt>.
makeLabWithDefaults :: FilePath -> OpenFlowVersion -> LabConfig -> IO ()
getDefaultOptions :: OpenFlowVersion -> IO Options
instance Show Switch
instance Eq Switch
instance Ord Switch
instance Show Host
instance Eq Host
instance Ord Host
instance Show Interface
instance Eq Interface
instance Ord Interface
instance Show Port
instance Eq Port
instance Ord Port
instance Show LabConfig
instance Eq LabConfig
instance Eq OpenFlowVersion
instance Show OpenFlowVersion
instance Ord OpenFlowVersion
instance Enum OpenFlowVersion
instance Show Options
instance Eq Options
instance Show NetkitLayout
instance Read NetkitLayout
instance Eq NetkitLayout
instance Show ConfWriterState
instance Eq ConfWriterState
