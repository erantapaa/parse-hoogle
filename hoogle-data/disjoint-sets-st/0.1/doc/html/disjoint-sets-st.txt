-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Imperative ST/IO based disjoint set data structure.
--   
--   Imperative ST/IO based disjoint set data structure.
@package disjoint-sets-st
@version 0.1


-- | Imperative disjoint sets data structure. - Uses mutable arrays with
--   path compression and union by rank to achieve nearly constant
--   amortized time complexity. - (It's actually the inverted Ackermann
--   function, which is less than 5 for all remotely possible sizes.) -
--   Optimized to be used with unboxed arrays of integers.
module Data.DisjointSet

-- | A collection of disjoint sets on <a>Int</a>s backed by a mutable array
--   of type <tt>a</tt>.
data DSet a

-- | Creates a new disjoint set structure with the specified bounds.
--   Calling <tt>mkset (i,j)</tt> creates a collection of singleton sets
--   indexed by numbers from <tt>i</tt> to <tt>j</tt> (inclusive).
singletons :: MArray a Int m => (Int, Int) -> m (DSet a)

-- | Returns the identifier of the subset a given element is in.
find :: MArray a Int m => DSet a -> Int -> m Int

-- | Joins the classes of given two elements. Returns <a>True</a> if the
--   two classes were merged (i.e. were distinct before), <a>False</a>
--   otherwise.
union :: MArray a Int m => DSet a -> Int -> Int -> m Bool
classes :: MArray a Int m => DSet a -> m Int

-- | A convenience function for creating an efficient, <a>IO</a>-based
--   array.
singletonsIO :: (Int, Int) -> IO (DSet IOUArray)

-- | A convenience function for creating an efficient, <a>ST</a>-based
--   array.
singletonsST :: (Int, Int) -> ST s (DSet (STUArray s))

-- | Returns <tt>True</tt> iff the given two elements belong to the same
--   class. In many cases this function is preferred over <a>find</a>.
sameClass :: MArray a Int m => DSet a -> Int -> Int -> m Bool
