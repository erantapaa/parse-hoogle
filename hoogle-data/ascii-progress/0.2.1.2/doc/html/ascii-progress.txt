-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple progress bar for the console.
--   
@package ascii-progress
@version 0.2.1.2

module System.Console.AsciiProgress.Internal

-- | The progress bar's options.
data Options
Options :: String -> Char -> Char -> Int -> Int -> IO () -> Options

-- | A format string for the progress bar. Currently the following format
--   strings are supported: - ":eta" (ETA displayed in seconds) -
--   ":current" (current tick) - ":total" (total number of ticks) -
--   ":percent" (percentage completed) - ":elapsed" (elapsed time in
--   seconds) - ":bar" (the actual progress bar)
pgFormat :: Options -> String

-- | Character to be used on the completed part of the bar
pgCompletedChar :: Options -> Char

-- | Character to be used on the pending part of the bar
pgPendingChar :: Options -> Char

-- | Total amount of ticks expected
pgTotal :: Options -> Int

-- | The progress bar's width
pgWidth :: Options -> Int

-- | An IO action to be executed on completion, with the cursor set at
--   progress bar's line
pgOnCompletion :: Options -> IO ()

-- | The progress bar's state object. Contains all but the printing
--   thread's <tt>Async</tt> object.
data ProgressBarInfo
ProgressBarInfo :: Options -> Chan Int -> MVar Int -> MVar UTCTime -> ProgressBarInfo
pgOptions :: ProgressBarInfo -> Options
pgChannel :: ProgressBarInfo -> Chan Int
pgCompleted :: ProgressBarInfo -> MVar Int
pgFirstTick :: ProgressBarInfo -> MVar UTCTime

-- | Represents a point in time for the progress bar.
data Stats
Stats :: Int -> Int -> Int -> Double -> Double -> Double -> Stats
stTotal :: Stats -> Int
stCompleted :: Stats -> Int
stRemaining :: Stats -> Int
stElapsed :: Stats -> Double
stPercent :: Stats -> Double
stEta :: Stats -> Double

-- | Creates a new empty progress bar info object.
newProgressBarInfo :: Options -> IO ProgressBarInfo

-- | Gets the string to be printed given the options object and a certain
--   stats object representing the rendering moment.
getProgressStr :: Options -> Stats -> String

-- | Creates a stats object for a given <tt>ProgressBarInfo</tt> node. This
--   is the core logic, isolated, and may be used to make the same analysis
--   code to be used by different progress renderers.
getInfoStats :: ProgressBarInfo -> IO Stats

-- | Generates the actual progress bar string, with its completed/pending
--   characters, width and a completeness percentage.
getBar :: Char -> Char -> Int -> Double -> String

-- | Gets the amount of seconds elapsed between two <tt>UTCTime</tt>s as a
--   double.
getElapsed :: UTCTime -> UTCTime -> Double

-- | Gets the ETA, given the elapsed time and the amount of completed and
--   remaining ticks.
--   
--   <pre>
--   &gt;&gt;&gt; getEta 50 50 10.0
--   10.0
--   
--   &gt;&gt;&gt; getEta 30 70 23.3
--   54.366666666666674
--   </pre>
getEta :: Int -> Int -> Double -> Double

-- | Replaces each pair in a list of replacement pairs in a list with
--   replace. The idea is to call <tt>((old, new) target -&gt; replace old
--   new target)</tt> on each of the pairs, accumulating the resulting
--   modified list.
--   
--   <pre>
--   &gt;&gt;&gt; replaceMany [] "foobar"
--   "foobar"
--   
--   &gt;&gt;&gt; replaceMany [("bar", "biz")] "foobar"
--   "foobiz"
--   
--   &gt;&gt;&gt; replaceMany [("foo", "baz"), ("bar", "biz")] "foobar"
--   "bazbiz"
--   </pre>
replaceMany :: Eq a => [([a], [a])] -> [a] -> [a]

-- | Replaces a subsequence by another in a sequence
--   
--   Taken from <a>http://bluebones.net/2007/01/replace-in-haskell/</a>
--   
--   <pre>
--   &gt;&gt;&gt; replace "foo" "baz" "foobar"
--   "bazbar"
--   
--   &gt;&gt;&gt; replace "some" "thing" "something something"
--   "thingthing thingthing"
--   
--   &gt;&gt;&gt; replace "not" "" "something"
--   "something"
--   
--   &gt;&gt;&gt; replace "" "here" "something"
--   "heresomething"
--   </pre>
replace :: Eq a => [a] -> [a] -> [a] -> [a]

-- | Forces an MVar's contents to be read or swaped by a default value,
--   even if it's currently empty. Will discard the default value write to
--   the MVar if it becomes full in the middle of the operation and return
--   its value. It's assumed that once the MVar becomes full, it won't ever
--   be left emptied. This code may deadlock if that's the case.
forceReadMVar :: MVar a -> a -> IO a

-- | A non-blocking version of <a>readMVar</a>. The <a>tryReadMVar</a>
--   function returns immediately, with <a>Nothing</a> if the <a>MVar</a>
--   was empty, or <tt><a>Just</a> a</tt> if the <a>MVar</a> was full with
--   contents <tt>a</tt>.
--   
--   <i>Since: 4.7.0.0</i>
tryReadMVar :: MVar a -> IO (Maybe a)
instance Default Options

module System.Console.AsciiProgress
data ProgressBar
ProgressBar :: ProgressBarInfo -> Async () -> ProgressBar
pgInfo :: ProgressBar -> ProgressBarInfo
pgFuture :: ProgressBar -> Async ()

-- | The progress bar's options.
data Options
Options :: String -> Char -> Char -> Int -> Int -> IO () -> Options

-- | A format string for the progress bar. Currently the following format
--   strings are supported: - ":eta" (ETA displayed in seconds) -
--   ":current" (current tick) - ":total" (total number of ticks) -
--   ":percent" (percentage completed) - ":elapsed" (elapsed time in
--   seconds) - ":bar" (the actual progress bar)
pgFormat :: Options -> String

-- | Character to be used on the completed part of the bar
pgCompletedChar :: Options -> Char

-- | Character to be used on the pending part of the bar
pgPendingChar :: Options -> Char

-- | Total amount of ticks expected
pgTotal :: Options -> Int

-- | The progress bar's width
pgWidth :: Options -> Int

-- | An IO action to be executed on completion, with the cursor set at
--   progress bar's line
pgOnCompletion :: Options -> IO ()

-- | Represents a point in time for the progress bar.
data Stats
Stats :: Int -> Int -> Int -> Double -> Double -> Double -> Stats
stTotal :: Stats -> Int
stCompleted :: Stats -> Int
stRemaining :: Stats -> Int
stElapsed :: Stats -> Double
stPercent :: Stats -> Double
stEta :: Stats -> Double

-- | Returns if the progress bar rendering thread has exited (it has done
--   enough ticks)
isComplete :: ProgressBar -> IO Bool

-- | Creates a new progress bar with the given <tt>Options</tt>. Multiple
--   progress bars may be created as long as everytime a line is outputted
--   by your program, while progress bars run is followed by a call to
--   <a>registerLn</a>
newProgressBar :: Options -> IO ProgressBar

-- | Forces a <a>ProgressBar</a> to finish
complete :: ProgressBar -> IO ()

-- | Tick the progress bar
tick :: ProgressBar -> IO ()

-- | Tick the progress bar N times
tickN :: ProgressBar -> Int -> IO ()

-- | Like <tt>getProgressStr</tt> but works on the <tt>ProgressBar</tt>
--   object and uses the IO monad.
getProgressStrIO :: ProgressBar -> IO String

-- | Gets the progress bar current <tt>Stats </tt>object
getProgressStats :: ProgressBar -> IO Stats

-- | Gets the string to be printed given the options object and a certain
--   stats object representing the rendering moment.
getProgressStr :: Options -> Stats -> String

-- | Registers a new line for multiple progress bars
registerLn :: IO ()

-- | A class for types with a default value.
class Default a
def :: Default a => a
