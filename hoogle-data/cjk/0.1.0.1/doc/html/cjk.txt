-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Data about Chinese, Japanese and Korean characters and languages
--   
--   A Haskell interface to the most important information from the Unicode
--   Unihan character database and CC-CEDICT free Chinese-English
--   dictionary.
--   
--   Contributions of data from more sources are very welcome!
@package cjk
@version 0.1.0.1

module CJK.Data.QuocNgu
type Phone = Text

module CJK.Data.Pinyin
data Tone
Flat :: Tone
Rising :: Tone
FallingRising :: Tone
Falling :: Tone
Neutral :: Tone
toneNumber :: Tone -> Int

-- | Returns the Unicode combining character used to produce the accent for
--   this tone. Returns Nothing if no accent is required.
toneCombiningMark :: Tone -> Maybe Char

-- | Returns the tone associated with this Unicode combining character, if
--   any.
combiningMarkTone :: Char -> Maybe Tone
data Phone
Phone :: Text -> Tone -> Phone
sound :: Phone -> Text
tone :: Phone -> Tone
fromAccented :: Text -> Phone
toAccented :: Phone -> Text
instance Eq Tone
instance Ord Tone
instance Show Phone
instance Show Tone

module CJK.Data.KoreanYale
type Phone = Text

module CJK.Data.Hangul
type Phone = Char
fromJamos :: Text -> Phone

module CJK.Data.Unihan.NumericValues
data NumericUse

-- | Used in the writing of accounting numerals (to prevent fraud)
AccountingUse :: NumericUse

-- | Used in certain unusual, specialized contexts
OtherUse :: NumericUse

-- | Used in the writing of numbers in the standard fashion
PrimaryUse :: NumericUse

-- | The value of the character and the contexts in which it is used
numericValue :: Char -> Maybe (NumericUse, Integer)
instance Eq NumericUse
instance Show NumericUse

module CJK.Data.Unihan.Variants
data SemanticVariantType
T :: SemanticVariantType
B :: SemanticVariantType
Z :: SemanticVariantType
F :: SemanticVariantType
J :: SemanticVariantType
type VariantSource = Text
type VariantCitation = [(VariantSource, [SemanticVariantType])]
type Variant = (Char, VariantCitation)

-- | The compatibility decomposition for this ideograph
compatibilityVariants :: Char -> [Char]

-- | The z-variant(s) for this character
zVariants :: Char -> [Variant]

-- | A semantic variant is an x- or y-variant with similar or identical
--   meaning which can generally be used in place of the indicated
--   character
semanticVariants :: Char -> [Variant]

-- | A specialized semantic variant is an x- or y-variant with similar or
--   identical meaning only in certain contexts (such as accountants’
--   numerals)
specializedSemanticVariants :: Char -> [Variant]

-- | Simplified Chinese variant(s) for this character
simplifiedVariants :: Char -> [Char]

-- | Traditional Chinese variant(s) for this character
traditionalVariants :: Char -> [Char]
instance Eq SemanticVariantType
instance Ord SemanticVariantType
instance Show SemanticVariantType
instance Show VariantsMap

module CJK.Data.Types
newtype KangXiRadical
KangXi :: Int -> KangXiRadical

-- | Radical number in the range 1 to 214 inclusive
kangXiRadicalNumber :: KangXiRadical -> Int
type StrokeCount = Int
data RadicalStrokeCount a
RSC :: a -> StrokeCount -> RadicalStrokeCount a

-- | The radical which is considered to form the main part of the character
radical :: RadicalStrokeCount a -> a

-- | The “additional strokes” value is the residual stroke-count, the count
--   of all strokes remaining after eliminating all strokes associated with
--   the radical.
additionalStrokes :: RadicalStrokeCount a -> StrokeCount
type HDZEntry = Text

-- | How to input the character in Cangjie
type CangjieInputCode = Text
instance Show KangXiRadical
instance Show a => Show (RadicalStrokeCount a)

module CJK.Data.Unihan.RadicalStrokeCounts

-- | Whether the character is formed from the simplifed version of the
--   radical
type IsSimplifiedKangXi = Bool

-- | Radical<i>stroke count consistent with ISO</i>IEC 10646
--   
--   The first value in the returned list, if any, is equal to the
--   normative radical-stroke value defined in ISO/IEC 10646.
unicode :: Char -> [RadicalStrokeCount (KangXiRadical, IsSimplifiedKangXi)]

-- | Radical/stroke counts consistent with the KangXi dictionary
kangXi :: Char -> [RadicalStrokeCount KangXiRadical]

-- | Radical/stroke counts consistent with the Morohashi dictionary
kanWa :: Char -> [RadicalStrokeCount KangXiRadical]

-- | Radical/stroke counts usually used in Japanese
korean :: Char -> [RadicalStrokeCount KangXiRadical]

-- | Radical/stroke counts usually used in Japanese
japanese :: Char -> [RadicalStrokeCount KangXiRadical]
data AdobeJapan1_6
AJ1_6 :: Bool -> Int -> RadicalStrokeCount (KangXiRadical, StrokeCount) -> AdobeJapan1_6

-- | True if the Unicode code point maps directly to the Adobe-Japan1-6
--   CID, or False if it is a variant form which is not directly encoded
aJ1_6IsDirect :: AdobeJapan1_6 -> Bool

-- | The ID of the character in the Adobe-Japan1-6 font
aJ1_6CID :: AdobeJapan1_6 -> Int
aJ1_6RadicalStrokeCount :: AdobeJapan1_6 -> RadicalStrokeCount (KangXiRadical, StrokeCount)

-- | Radical/stroke count in the Adobe-Japan1-6 font
--   
--   This data is unusual in that it explicitly includes the stroke count
--   for the form that the radical takes in the glyph.
adobeJapan1_6 :: Char -> [AdobeJapan1_6]
instance Show AdobeJapan1_6
instance Show StrokeCountsMap

module CJK.Data.Jyutping
data Tone
HighLevel :: Tone
MidRising :: Tone
MidLevel :: Tone
LowFalling :: Tone
LowRising :: Tone
LowLevel :: Tone
toneNumber :: Tone -> Int
data Phone
Phone :: Text -> Tone -> Phone
sound :: Phone -> Text
tone :: Phone -> Tone
instance Eq Tone
instance Ord Tone
instance Show Phone
instance Show Tone

module CJK.Data.CEDICT
type Reading = [Either Text Phone]
showReading :: Reading -> String
showReadingAccented :: Reading -> String
data Word
Word :: [Char] -> [Char] -> Reading -> Word
traditional :: Word -> [Char]
simplified :: Word -> [Char]
reading :: Word -> Reading

-- | Show a word as in the head of a dictionary entry
showHeadWord :: Word -> String
data DefinitionToken
PlainToken :: Text -> DefinitionToken
WordToken :: Word -> DefinitionToken
data WordDefinition
WordClassifiers :: [Word] -> WordDefinition
WordDefinition :: [DefinitionToken] -> WordDefinition
data Definition
Definition :: Word -> [WordDefinition] -> Definition
word :: Definition -> Word
definitions :: Definition -> [WordDefinition]
entries :: [Definition]
instance Show Definition
instance Show WordDefinition
instance Show DefinitionToken
instance Show Word

module CJK.Data.Unihan.Readings
type CharDefinition = Text

-- | An English definition for this character. Definitions are for modern
--   written Chinese and are usually (but not always) the same as the
--   definition in other Chinese dialects or non-Chinese languages. In some
--   cases, synonyms are indicated. Fuller variant information can be found
--   using the various variant fields.
--   
--   Definitions specific to non-Chinese languages or Chinese dialects
--   other than modern Mandarin are marked, e.g., (Cant.) or (J). Minor
--   definitions are separated by commas.
definition :: Char -> [CharDefinition]
type OccurrenceCount = Int

-- | Whether this reference had an encoded variant substituted for an
--   unencoded character used by the Hànyǔ Dà Zìdiǎn
type IsHDZSubstitution = Bool

-- | Returns how to pronounce an ideograph in Mandarin, making the best
--   effort to use all of the CEDICT data to get a good answer. Readings
--   are returned in approximate frequency order.
--   
--   This algorithm is based on the Unihan FAQ
--   <a>http://www.unicode.org/faq/han_cjk.html</a>, which states that the
--   best way is to use the kHanyuPinlu, kXHC1983, and kHanyuPinyin fields
--   in that order. The kMandarin field may have some readings the other
--   three do not but should be used with caution. The kHanyuPinlu field
--   lists the most common readings for ideographs in order of frequency of
--   use and is the most useful for most purposes. The kXHC1983 field
--   contains the most important readings for characters in modern use, and
--   the kHanyuPinyin field contains an exhaustive set of readings for a
--   large set of characters, but includes obscure readings of historic
--   interest only
mandarinBestEffort :: Char -> [Phone]

-- | The most customary pinyin reading for this character; that is, the
--   reading most commonly used in modern text, with some preference given
--   to readings most likely to be in sorted lists.
--   
--   The first value returned is preferred for zh-Hans (CN) and the second
--   is preferred for zh-Hant (TW). Commonly, they will be exactly the
--   same.
--   
--   You may want to use <a>mandarinBestEffort</a> instead of this
--   function.
mandarin :: Char -> Maybe (Phone, Phone)
hanyuPinlu :: Char -> [(Phone, OccurrenceCount)]
hanyuPinyin :: Char -> [([HDZEntry], [Phone])]

-- | One or more Hànyǔ Pīnyīn readings as given in the Xiàndài Hànyǔ
--   Cídiǎn.
--   
--   You may want to use <a>mandarinBestEffort</a> instead of this
--   function.
xhc1983 :: Char -> [([(HDZEntry, IsHDZSubstitution)], [Phone])]
cantonese :: Char -> [Phone]

-- | Whether the word or morpheme represented in toto or in part by the
--   given character with the given reading occurs more than four times in
--   the seven hundred poems covered by <a>T’ang Poetic Vocabulary</a> by
--   Hugh M. Stimson, Far Eastern Publications, Yale Univ. 1976
type CommonTangCharacter = Bool

-- | The Tang dynasty pronunciation(s) of this character, in an undefined
--   romanization.
tang :: Char -> [(CommonTangCharacter, Text)]

-- | The modern Korean pronunciation(s) for this character in Hangul.
hangul :: Char -> [Phone]

-- | The Korean pronunciation(s) of this character, using the Yale
--   romanization system.
korean :: Char -> [Phone]

-- | The Japanese kun'yomi pronunciation of this character, in an undefined
--   romanization system. It is recommended that you use kanjidic2
--   <a>http://www.csse.monash.edu.au/~jwb/kanjidic2/</a> instead of this
--   data.
japaneseKun :: Char -> [Text]

-- | The Japanese on'yomi pronunciation of this character, in an undefined
--   romanization system. It is recommended that you use kanjidic2
--   <a>http://www.csse.monash.edu.au/~jwb/kanjidic2/</a> instead of this
--   data.
japaneseOn :: Char -> [Text]

-- | The character’s pronunciation(s) in Quốc ngữ.
vietnamese :: Char -> [Phone]
instance Show ReadingsMap

module CJK.Data.Unihan.DictionaryLikeData

-- | The cangjie input code for the character
cangjie :: Char -> Maybe CangjieInputCode
data CheungBauer
CB :: RadicalStrokeCount KangXiRadical -> Maybe CangjieInputCode -> [Phone] -> CheungBauer
cbRadicalStrokeCount :: CheungBauer -> RadicalStrokeCount KangXiRadical
cbCangjie :: CheungBauer -> Maybe CangjieInputCode

-- | Readings are in alphabetical order
cbReading :: CheungBauer -> [Phone]

-- | Data regarding the character in Cheung Kwan-hin and Robert S. Bauer,
--   _The Representation of Cantonese with Chinese Characters_, Journal of
--   Chinese Linguistics, Monograph Series Number 18, 2002
cheungBauer :: Char -> [CheungBauer]

-- | The position(s) of this character in the Cihai (辭海) dictionary, single
--   volume edition, published in Hong Kong by the Zhonghua Bookstore, 1983
--   (reprint of the 1947 edition), ISBN 962-231-005-2.
--   
--   The position is indicated by a decimal number. The digits to the left
--   of the decimal are the page number. The first digit after the decimal
--   is the row on the page, and the remaining two digits after the decimal
--   are the position on the row.
cihai :: Char -> [Text]
data Fenn
Fenn :: Maybe Int -> Maybe Int -> Fenn

-- | Soothill number of the character's phonetic, if any
fennSoothill :: Fenn -> Maybe Int

-- | Number from 1 to 11 indicating roughly which group of 500 most popular
--   characters this character is included in (i.e. 1 is the first 500
--   characters, 2 the next 500 characters etc). Nothing if the character
--   is rare.
fennFrequency :: Fenn -> Maybe Int

-- | Data on the character from The Five Thousand Dictionary (aka Fenn’s
--   Chinese-English Pocket Dictionary) by Courtenay H. Fenn, Cambridge,
--   Mass.: Harvard University Press, 1979.
fenn :: Char -> [Fenn]

-- | The four-corner code(s) for the character
--   
--   The four-corner system assigns each character a four-digit code from 0
--   through 9. The digit is derived from the “shape” of the four corners
--   of the character (upper-left, upper-right, lower-left, lower-right).
--   An optional fifth digit can be used to further distinguish characters;
--   the fifth digit is derived from the shape in the character’s center or
--   region immediately to the left of the fourth corner.
--   
--   The four-corner system is now used only rarely. Full descriptions are
--   available online, e.g., at
--   <a>http://en.wikipedia.org/wiki/Four_corner_input</a>.
fourCornerCode :: Char -> [Text]

-- | A rough frequency measurement for the character based on analysis of
--   traditional Chinese USENET postings; characters with a kFrequency of 1
--   are the most common, those with a kFrequency of 2 are less common, and
--   so on, through a kFrequency of 5.
frequency :: Char -> Maybe Int

-- | The primary grade in the Hong Kong school system by which a student is
--   expected to know the character; this data is derived from 朗文初級中文詞典,
--   Hong Kong: Longman, 2001
gradeLevel :: Char -> Maybe Int
hdzRadBreak :: Char -> Maybe (Char, HDZEntry)

-- | The index of the character in 常用字字形表 (二零零零年修訂本),香<i>: 香</i>教育學院, 2000,
--   ISBN 962-949-040-4. This publication gives the “proper” shapes for
--   4759 characters as used in the Hong Kong school system
hkGlyph :: Char -> [Int]

-- | The phonetic index for the character from _Ten Thousand Characters: An
--   Analytic Dictionary_, by G. Hugh Casey, S.J. Hong Kong: Kelley and
--   Walsh, 1980
phonetic :: Char -> [Text]

-- | The total number of strokes in the character (including the radical),
--   that is, the stroke count most commonly associated with the character
--   in modern text using customary fonts.
--   
--   The first value is preferred for zh-Hans (CN) and the second is
--   preferred for zh-Hant (TW)
totalStrokes :: Char -> Maybe (StrokeCount, StrokeCount)
instance Show CheungBauer
instance Show Fenn
instance Show DictionaryLikesMap
