-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Type class for monad transformers stack with pirimitive base monad.
--   
--   Type class for for monad transformers stack with pirimitive base monad
--   and mutable references whic could use either ST or IO monads.
@package monad-primitive
@version 0.1


-- | Mutable references in monads which are instances of
--   <tt>MonadPrim</tt>.
module Data.PrimRef

-- | Mutable variable which full analog of <a>IORef</a> or <a>STRef</a> but
--   could use either of the monads. Unfortunately there's no way to
--   convert <tt>PrimRef</tt> to <tt>STRef</tt> or <tt>IORef</tt>.
data PrimRef m a

-- | Create new mutable variable with initial value <tt>a</tt>.
newPrimRef :: PrimMonad m => a -> m (PrimRef m a)

-- | Read value of <tt>PrimRef</tt>.
readPrimRef :: PrimMonad m => PrimRef m a -> m a

-- | Write value to <tt>PrimRef</tt>.
writePrimRef :: PrimMonad m => PrimRef m a -> a -> m ()

-- | Modify content of <tt>PrimRef</tt> using function.
modifyPrimRef :: PrimMonad m => PrimRef m a -> (a -> a) -> m ()

-- | Modify content of <tt>PrimRef</tt> using function and evaluate result
--   of function application to WHNF before storing it in the variable.
modifyPrimRef' :: PrimMonad m => PrimRef m a -> (a -> a) -> m ()


module Control.Monad.Primitive.Class

-- | Monads in which computation based on primitive monad (instance of
--   <a>PrimMonad</a>) could be embedded. Instances must obey following
--   laws:
--   
--   <pre>
--   liftPrim . return  = return
--   liftPrim (m &gt;&gt;= f) = liftPrim m &gt;&gt;= liftPrim f
--   </pre>
class (PrimMonad (BasePrimMonad m), Monad m) => MonadPrim m where type family BasePrimMonad m :: * -> *
liftPrim :: MonadPrim m => BasePrimMonad m a -> m a
instance (MonadPrim m, Monoid w) => MonadPrim (WriterT w m)
instance (MonadPrim m, Monoid w) => MonadPrim (WriterT w m)
instance MonadPrim m => MonadPrim (StateT s m)
instance MonadPrim m => MonadPrim (StateT s m)
instance (MonadPrim m, Monoid w) => MonadPrim (RWST r w s m)
instance (MonadPrim m, Monoid w) => MonadPrim (RWST r w s m)
instance MonadPrim m => MonadPrim (ReaderT r m)
instance MonadPrim m => MonadPrim (MaybeT m)
instance MonadPrim m => MonadPrim (IdentityT m)
instance (MonadPrim m, Error e) => MonadPrim (ErrorT e m)
instance MonadPrim m => MonadPrim (ContT r m)
instance MonadPrim (ST s)
instance MonadPrim IO
