-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell binding to the Twitter API
--   
--   The hs-twitter API binding lets you access twitter.com's resources and
--   methods from Haskell.
--   
--   Implements the full API, see
--   <a>http://apiwiki.twitter.com/REST+API+Documentation</a>
--   
--   For more info on use, please visit
--   <a>http://haskell.forkIO.com/twitter</a> , the <tt>CHANGES</tt> file
--   in the distribution contains change info for the package.
@package hs-twitter
@version 0.2.8


-- | License : See the file LICENSE
--   
--   Status : Coded
--   
--   Codec for de/encoding URI strings via percent encodings (cf. RFC
--   3986.)
module Web.Codec.Percent
getEncodedString :: String -> String
getDecodedString :: String -> String
getEncodedChar :: Char -> Maybe String
getDecodedChar :: String -> Maybe (Char, String)

module Web.Twitter.MIME
uploadFileType :: String -> Type
mixedType :: IO (MIMEValue, String)
uploadFile :: String -> FilePath -> IO MIMEValue
showMIMEValue :: String -> MIMEValue -> ([(String, String)], String)
showMIMEContent :: String -> MIMEContent -> String
crnl :: String
showDisposition :: Disposition -> String
showDispType :: DispType -> String
showDispParam :: DispParam -> String

module Web.Codec.URLEncoder
encodeString :: String -> String
decodeString :: String -> String

-- | <tt>isUTF8Encoded str</tt> tries to recognize input string as being in
--   UTF-8 form. Will soon migrate to <tt>utf8-string</tt>.
isUTF8Encoded :: String -> Bool
utf8Encode :: String -> String

module Web.Twitter.Post
data PostReq
PostReq :: String -> [PostParam] -> PostReq
prName :: PostReq -> String
prVals :: PostReq -> [PostParam]
data PostKind
PostQuery :: PostKind
PostWWWForm :: PostKind
PostFormData :: PostKind
newPostRequest :: String -> PostReq
testRequest :: PostReq -> Maybe PostKind -> IO ()
toRequest :: PostReq -> Maybe PostKind -> IO (String, [(String, String)], String)
toAmpString :: [PostParam] -> String
mustBeBody :: PostParam -> Bool
mustBeQuery :: PostParam -> Bool

-- | <tt>addNameValue nm val req</tt> augments the request <tt>req</tt>
--   with a binding for <tt>(nm,val)</tt>. Neither <tt>nm</tt> nor
--   <tt>val</tt> are assumed encoded. It leaves it until the serialization
--   phase to fix on how to communicate the binding for the POST request
--   (i.e., via the query portion or in the request's body.)
addNameValue :: String -> String -> PostReq -> PostReq

-- | <tt>addQueryNameValue nm val req</tt> performs same function as
--   <tt>addNameValue</tt>, but adds the constraint that the binding must
--   be transmitted as part of the query portion of the URL it ends up
--   going out via.
addQueryNameValue :: String -> String -> PostReq -> PostReq

-- | <tt>addQueryNameValue nm val req</tt> performs same function as
--   <tt>addNameValue</tt>, but adds the constraint that the binding must
--   be transmitted as part of the body of the POST request, forcing the
--   payload to be of MIME type <tt>application/x-www-form-urlencoded</tt>
addBodyNameValue :: String -> String -> PostReq -> PostReq

-- | <tt>addNameFile nm fb mbMimeType req</tt> augments the request
--   <tt>req</tt> with a binding of name <tt>nm</tt> to the local file
--   <tt>fb</tt>. It will be slurped in and included in the POST request,
--   as part of a multi-part payload.
addNameFile :: String -> FilePath -> Maybe String -> PostReq -> PostReq
data PostParam
PostNameValue :: String -> String -> (Maybe Bool) -> PostParam
PostFile :: String -> FilePath -> (Maybe String) -> PostParam
isPostFile :: PostParam -> Bool
toMIMEValue :: [PostParam] -> IO MIMEValue
fromPostParam :: String -> PostParam -> IO MIMEValue
toMIMEType :: String -> IO Type
getMIMEType :: String -> IO Type


-- | Simple GET/de-ref of URLs; abstracting out networking backend/package.
module Web.Twitter.Fetch
readContentsURL :: URLString -> IO String
readUserContentsURL :: Maybe AuthUser -> Bool -> Bool -> URLString -> [(String, String)] -> IO ([(String, String)], String)
postContentsURL :: Maybe AuthUser -> URLString -> [(String, String)] -> [Cookie] -> String -> IO ([Cookie], [(String, String)], String)
type URLString = String
data AuthUser
AuthUser :: String -> String -> AuthUser
authUserName :: AuthUser -> String
authUserPass :: AuthUser -> String
nullAuthUser :: AuthUser

-- | <tt>Cookie</tt> is the Haskell representation of HTTP cookie values.
--   See its relevant specs for authoritative details.
data Cookie :: *


-- | Monad for bookkeeping Twitter interactions.
module Web.Twitter.Monad
data TM a
data TMEnv
TMEnv :: Maybe AuthUser -> URLString -> Maybe Int -> Maybe Int -> Bool -> [(String, String)] -> Maybe String -> TMEnv
tmUser :: TMEnv -> Maybe AuthUser
tmBase :: TMEnv -> URLString
tmCount :: TMEnv -> Maybe Int
tmPage :: TMEnv -> Maybe Int
tmPost :: TMEnv -> Bool
tmDefaultArgs :: TMEnv -> [(String, String)]
tmSource :: TMEnv -> Maybe String
withEnv :: (TMEnv -> TMEnv) -> TM a -> TM a
withUser :: AuthUser -> TM a -> TM a
withCount :: Int -> TM a -> TM a
withPage :: Int -> TM a -> TM a
withPageCount :: Maybe Int -> Maybe Int -> TM a -> TM a
withAuth :: Bool -> TM a -> TM a
withBase :: URLString -> TM a -> TM a
withDefaultArgs :: [(String, String)] -> TM a -> TM a

-- | <tt>fromSource <a>foo</a> action</tt> indicates that <tt>foo</tt> is
--   the source of the twitter. Not all Twitter API actions currently like
--   being passed a <tt>source=</tt> argument (e.g., search actions), so
--   you may have to be selective about where you apply this action..
fromSource :: String -> TM a -> TM a
getEnv :: TM TMEnv
getUser :: TM (Maybe AuthUser)
getCount :: TM (Maybe Int)
getPage :: TM (Maybe Int)
getPageCount :: TM (Maybe Int, Maybe Int)
getBase :: TM URLString
getPostFlag :: TM Bool

-- | <tt>getDefArgs</tt> returns the <i>default</i> arguments to pass to
--   all Twitter API actions. The <i>default-default</i> is the empty list.
--   See also <a>getSource</a> / <a>fromSource</a>.
getDefArgs :: TM [(String, String)]
getSource :: TM (Maybe String)
runTwitter :: Maybe AuthUser -> URLString -> TM a -> IO a
runTM :: AuthUser -> TM a -> IO a
liftIO :: IO a -> TM a
api_base :: URLString
user_base_url :: URLString
top_base_url :: URLString
acc_base_url :: URLString
search_base_url :: URLString

-- | A type for parser results
data Result a :: * -> *
Ok :: a -> Result a
Error :: String -> Result a

-- | Decode a String representing a strict JSON value. This follows the
--   spec, and requires top level JSON types to be an Array or Object.
decodeStrict :: JSON a => String -> Result a
mbArg :: String -> Maybe String -> [(String, String)] -> [(String, String)]
arg :: String -> String -> [(String, String)] -> [(String, String)]
strArg :: String -> String -> [(String, String)] -> [(String, String)]
restCall :: String -> [(String, String)] -> TM String
postCall :: String -> [(String, String)] -> String -> [(String, String)] -> TM ([Cookie], [(String, String)], String)
readResult :: JSON a => String -> String -> TM a
postMethod :: TM a -> TM a
instance Monad TM


-- | This module defines the main types that the Haskell API binding for
--   Twitter introduces. Most importantly, if that's the word, the
--   representation of tweets/status updates.
module Web.Twitter.Types
type ColorString = String
type DateString = String
type UserId = String
type URLString = String
type UserName = String
type StatusId = String
data Format
FormatXML :: Format
FormatJSON :: Format
FormatRSS :: Format
FormatAtom :: Format
newtype UserID
UserID :: UserId -> UserID
userID :: UserID -> UserId

-- | <tt>Status</tt> is the record type used to represent a ''tweet'', a
--   status update by a user.
data Status
Status :: DateString -> StatusId -> String -> String -> Bool -> Maybe StatusId -> Maybe UserId -> Maybe Bool -> User -> Status
statusCreated :: Status -> DateString
statusId :: Status -> StatusId
statusText :: Status -> String
statusSource :: Status -> String
statusTruncated :: Status -> Bool
statusInReplyTo :: Status -> Maybe StatusId
statusInReplyToUser :: Status -> Maybe UserId
statusFavorite :: Status -> Maybe Bool
statusUser :: Status -> User
nullStatus :: Status
data User
User :: UserId -> UserName -> String -> String -> String -> Maybe URLString -> Maybe URLString -> Maybe Bool -> Maybe Int -> User
userId :: User -> UserId
userName :: User -> UserName
userScreenName :: User -> String
userDescription :: User -> String
userLocation :: User -> String
userProfileImageURL :: User -> Maybe URLString
userURL :: User -> Maybe URLString
userProtected :: User -> Maybe Bool
userFollowers :: User -> Maybe Int
nullUser :: User
data UserInfo
UserInfo :: Bool -> ColorString -> ColorString -> URLString -> ColorString -> ColorString -> ColorString -> Int -> String -> Int -> Int -> DateString -> String -> URLString -> Maybe URLString -> Int -> Int -> UserName -> Bool -> String -> UserName -> UserId -> UserInfo
userInfoBackgroundTile :: UserInfo -> Bool
userInfoLinkColor :: UserInfo -> ColorString
userInfoBackground :: UserInfo -> ColorString
userInfoBackgroundImageURL :: UserInfo -> URLString
userInfoTextColor :: UserInfo -> ColorString
userInfoSidebarFill :: UserInfo -> ColorString
userInfoSidebarColor :: UserInfo -> ColorString
userInfoFollowers :: UserInfo -> Int
userInfoDescription :: UserInfo -> String
userInfoUTCOffset :: UserInfo -> Int
userInfoFavorites :: UserInfo -> Int
userInfoCreated :: UserInfo -> DateString
userInfoTimezone :: UserInfo -> String
userInfoImageURL :: UserInfo -> URLString
userInfoURL :: UserInfo -> Maybe URLString
userInfoStatusCount :: UserInfo -> Int
userInfoFriends :: UserInfo -> Int
userInfoScreenName :: UserInfo -> UserName
userInfoProtected :: UserInfo -> Bool
userInfoLocation :: UserInfo -> String
userInfoName :: UserInfo -> UserName
userInfoId :: UserInfo -> UserId
nullUserInfo :: UserInfo
data DirectMessage
DirectMessage :: Maybe User -> Maybe User -> UserId -> UserName -> UserId -> UserId -> String -> StatusId -> DateString -> DirectMessage
directRecipient :: DirectMessage -> Maybe User
directSender :: DirectMessage -> Maybe User
directSenderId :: DirectMessage -> UserId
directSenderName :: DirectMessage -> UserName
directRecipientId :: DirectMessage -> UserId
directRecipientName :: DirectMessage -> UserId
directText :: DirectMessage -> String
directId :: DirectMessage -> StatusId
directCreated :: DirectMessage -> DateString
nullDirectMessage :: DirectMessage

-- | <tt>RateLimit</tt> bundles up the data that the <tt>getRateLimit</tt>
--   Twitter API call returns regarding API call limits.
data RateLimit
RateLimit :: Integer -> DateString -> Integer -> Integer -> RateLimit
rateLimitResetSecs :: RateLimit -> Integer
rateLimitResetTime :: RateLimit -> DateString
rateLimitRemHits :: RateLimit -> Integer
rateLimitHourlyLimit :: RateLimit -> Integer
nullRateLimit :: RateLimit

-- | <tt>Trends</tt> bundles up the data that the <tt>trends</tt> Twitter
--   Search API call returns regarding what's being majorly tweeted about.
data Trends
Trends :: DateString -> [(String, URLString)] -> Trends
trendsAsOf :: Trends -> DateString
trendsInfo :: Trends -> [(String, URLString)]
nullTrends :: Trends

-- | <tt>SearchResult</tt> bundles up the data that the Search API returns.
data SearchResult
SearchResult :: String -> StatusId -> UserName -> UserId -> DateString -> Maybe String -> Maybe UserName -> Maybe UserId -> SearchResult
searchResultText :: SearchResult -> String
searchResultId :: SearchResult -> StatusId
searchResultFromUser :: SearchResult -> UserName
searchResultFromUserId :: SearchResult -> UserId
searchResultAt :: SearchResult -> DateString
searchResultLanguage :: SearchResult -> Maybe String
searchResultToUser :: SearchResult -> Maybe UserName
searchResultToUserId :: SearchResult -> Maybe UserId
nullSearchResult :: SearchResult
nullUserID :: UserID

module Web.Twitter.Types.Import
data JM a
JM :: (String -> [(String, JSValue)] -> Result a) -> JM a
(-=>) :: a -> (b -> c) -> b -> (a, c)
runJM :: String -> [(String, JSValue)] -> JM a -> Result a
catchJM :: JM a -> (String -> JM a) -> JM a
liftR :: Result a -> JM a
getLoc :: JM String
getEnv :: JM [(String, JSValue)]
addToEnv :: [(String, JSValue)] -> JM a -> JM a
get :: String -> JM String
getDefault :: String -> String -> JM String
getInt :: String -> JM Integer
getMbS :: String -> JM (Maybe String)
getMbI :: String -> JM (Maybe Int)
getMbJ :: JSON a => String -> JM (Maybe a)
getJ :: JSON a => String -> JM a
getArr :: String -> JM [JSValue]
getMbB :: String -> JM (Maybe Bool)
getMb :: String -> JM (Maybe JSValue)
getB :: String -> JM Bool
getJSON :: String -> JM JSValue
showJS :: (a -> [(String, JSValue)]) -> a -> JSValue
readJS :: String -> String -> a -> (JM a) -> JSValue -> Result a
showUser :: User -> [(String, JSValue)]
str :: String -> JSValue
int :: Int -> JSValue
inte :: Integer -> JSValue
bool :: Bool -> JSValue
arr :: [JSValue] -> JSValue
obj :: [(String, JSValue)] -> JSValue
js :: JSON a => a -> JSValue
readB :: Maybe String -> JM (Maybe Bool)
mb :: String -> (a -> b) -> Maybe a -> Maybe (String, b)
readUser :: JM User
showStatus :: Status -> [(String, JSValue)]
readStatus :: JM Status
showUserInfo :: UserInfo -> [(String, JSValue)]
readUserInfo :: JM UserInfo
showDM :: DirectMessage -> [(String, JSValue)]
readDM :: JM DirectMessage
showRateLimit :: RateLimit -> [(String, JSValue)]
readRateLimit :: JM RateLimit
showTrends :: Trends -> [(String, JSValue)]
readTrends :: JM Trends
showSearchResult :: SearchResult -> [(String, JSValue)]
readSearchResult :: JM SearchResult
readUserID :: JM UserID
instance JSON UserID
instance JSON SearchResult
instance JSON Trends
instance JSON RateLimit
instance JSON DirectMessage
instance JSON UserInfo
instance JSON Status
instance JSON User
instance Monad JM


-- | Toplevel module for the Twitter API, providing entry points to the
--   various REST endpoints that twitter.com offer up
module Web.Twitter

-- | <tt>getPublicTimeline</tt> returns the 20 most recent statuses from
--   non-protected users who have set a custom user icon
getPublicTimeline :: TM [Status]

-- | <tt>getFriendsTimeline mbSince mbSinceId</tt> returns the 20 most
--   recent statuses posted by the authenticating user and that user's
--   friends. Optionally constrained by start date or a status ID.
getFriendsTimeline :: Maybe DateString -> Maybe String -> TM [Status]

-- | <tt>getUserTimeline mbId mbSince mbSinceId</tt> returns the 20 most
--   recent statuses posted from the authenticating user. It's also
--   possible to request another user's timeline via the id parameter
--   below.
getUserTimeline :: Maybe String -> Maybe DateString -> Maybe String -> TM [Status]

-- | <tt>getMentions</tt> mbId mbMax<tt> returns the 20 most recent
--   mentions (status containing </tt>username) for the authenticating
--   user.
getMentions :: Maybe String -> Maybe String -> TM [Status]

-- | <tt>showStatus id</tt> returns a single status, specified by the
--   <tt>id</tt> parameter. The status's author will be returned inline.
showStatus :: String -> TM Status

-- | <tt>update text mbReplyToId</tt> updates the authenticating user's
--   status to <tt>text</tt>.
update :: String -> Maybe String -> TM ()

-- | <tt>getReplies mbSince mbSinceId</tt> returns the 20 most recent
--   @replies (status updates prefixed with @username) for the
--   authenticating user.
getReplies :: Maybe DateString -> Maybe String -> TM [Status]

-- | <tt>destroyStatus id</tt> destroys the status specified by the
--   <tt>id</tt> parameter. The authenticating user must be the author of
--   the specified status.
destroyStatus :: String -> TM ()

-- | <tt>getFriends mbId</tt> returns up to 100 of the authenticating
--   user's friends who have most recently updated, each with current
--   status inline. It's also possible to request another user's recent
--   friends list via the <tt>mbId</tt> parameter.
getFriends :: Maybe String -> TM [Status]

-- | <tt>getFollowers mbId</tt> returns the authenticating user's
--   followers, each with current status inline. They are ordered by the
--   order in which they joined Twitter (this is going to be changed).
getFollowers :: Maybe String -> TM [Status]

-- | <tt>getUserInfo mbId mbEmail</tt> returns extended information of a
--   given user, specified by ID or screen name as per the <tt>mbId</tt>
--   parameter below. This information includes design settings, so third
--   party developers can theme their widgets according to a given user's
--   preferences. You must be properly authenticated to request the page of
--   a protected user.
getUserInfo :: Maybe String -> Maybe String -> TM UserInfo

-- | <tt>getDirectMesssages mbSince mbSinceId</tt> returns a list of the 20
--   most recent direct messages sent to the authenticating user.
getDirectMessages :: Maybe DateString -> Maybe String -> TM [DirectMessage]

-- | <tt>getDirectMessagesSent mbSince mbSinceId</tt> returns a list of the
--   20 most recent direct messages sent by the authenticating user.
getDirectMessagesSent :: Maybe DateString -> Maybe String -> TM [DirectMessage]

-- | <tt>sendDirectMessage userId text</tt> sends a new direct message to
--   the specified user from the authenticating user. Requires both the
--   <tt>user</tt> and <tt>text</tt> parameters. Returns the sent message
--   in the requested format when successful.
sendDirectMessage :: UserId -> String -> TM DirectMessage
destroyDirectMessage :: UserId -> TM ()

-- | <tt>createFriend id mbFollow</tt> befriends the user specified in the
--   <tt>id</tt> parameter as the authenticating user. Returns the
--   befriended user in the requested format when successful. Returns a
--   string describing the failure condition when unsuccessful.
createFriend :: UserId -> Maybe Bool -> TM User

-- | <tt>destroyFriend i</tt> discontinues friendship with the user
--   specified in the <tt>id</tt> parameter as the authenticating user.
--   Returns the un-friended user in the requested format when successful.
--   Returns a string describing the failure condition when unsuccessful.
destroyFriend :: UserId -> TM User

-- | <tt>isFriendOf userA userB</tt> tests if a friendship exists between
--   two users.
isFriendOf :: UserId -> UserId -> TM Bool

-- | <tt>getUserFollowers mbId mbUser mbScreen</tt> returns a list of
--   numeric IDs for every user following the given user.
getUserFollowers :: Maybe String -> Maybe String -> Maybe String -> TM [UserId]

-- | <tt>getUserFollowing mbId mbUser mbScreen</tt> returns a list of
--   numeric IDs for every user the given user is following.
getUserFollowing :: Maybe String -> Maybe String -> Maybe String -> TM [UserId]

-- | <tt>verifyCredentials</tt> returns an HTTP 200 OK response code and a
--   representation of the requesting user if authentication was
--   successful; returns a 401 status code and an error message if not. Use
--   this method to test if supplied user credentials are valid.
verifyCredentials :: TM User

-- | <tt>endSession</tt> ends the session of the authenticating user,
--   returning a null cookie. Use this method to sign users out of
--   client-facing applications like widgets.
endSession :: TM ()

-- | <tt>updateDeliveryService mbServ</tt> sets which device Twitter
--   delivers updates to for the authenticating user. Sending
--   <tt>Nothing</tt> as the device parameter will disable IM(<tt>im</tt>)
--   or SMS(<tt>sms</tt>) updates.
updateDeliveryDevice :: Maybe String -> TM ()
data ProfileColors
ProfileColors :: Maybe ColorString -> Maybe ColorString -> Maybe ColorString -> Maybe ColorString -> Maybe ColorString -> ProfileColors
profileTextColor :: ProfileColors -> Maybe ColorString
profileBackColor :: ProfileColors -> Maybe ColorString
profileLinkColor :: ProfileColors -> Maybe ColorString
profileSidebarFill :: ProfileColors -> Maybe ColorString
profileSidebarBorder :: ProfileColors -> Maybe ColorString
nullProfileColors :: ProfileColors

-- | <tt>updateProfileColors pc</tt> sets one or more hex values that
--   control the color scheme of the authenticating user's profile page on
--   <tt>twitter.com</tt>.
updateProfileColors :: ProfileColors -> TM ()

-- | <tt>updateProfileImage imgFile</tt> updates the authenticating user's
--   profile image. Expects raw multipart data, not a URL to an image.
updateProfileImage :: FilePath -> TM ()

-- | <tt>updateProfileBackgroundImage imgFile</tt> udates the
--   authenticating user's profile background image. Expects raw multipart
--   data, not a URL to an image.
updateProfileBackgroundImage :: FilePath -> TM ()

-- | <tt>RateLimit</tt> bundles up the data that the <tt>getRateLimit</tt>
--   Twitter API call returns regarding API call limits.
data RateLimit
RateLimit :: Integer -> DateString -> Integer -> Integer -> RateLimit
rateLimitResetSecs :: RateLimit -> Integer
rateLimitResetTime :: RateLimit -> DateString
rateLimitRemHits :: RateLimit -> Integer
rateLimitHourlyLimit :: RateLimit -> Integer
nullRateLimit :: RateLimit

-- | <tt>getRateLimit</tt> returns the remaining number of API requests
--   available to the requesting user before the API limit is reached for
--   the current hour. Calls to <tt>getRateLimit</tt> do not count against
--   the rate limit. If authentication credentials are provided, the rate
--   limit status for the authenticating user is returned. Otherwise, the
--   rate limit status for the requester's IP address is returned.
getRateLimit :: TM RateLimit
data ProfileInfo
ProfileInfo :: Maybe String -> Maybe String -> Maybe URLString -> Maybe String -> Maybe String -> ProfileInfo
profileInfoName :: ProfileInfo -> Maybe String
profileInfoEmail :: ProfileInfo -> Maybe String
profileInfoURL :: ProfileInfo -> Maybe URLString
profileInfoLocation :: ProfileInfo -> Maybe String
profileInfoDescription :: ProfileInfo -> Maybe String
nullProfileInfo :: ProfileInfo

-- | <tt>updateProfile profileInfo</tt> sets values that users are able to
--   set under the <a>Account</a> tab of their settings page. Only the
--   parameters specified will be updated; to only update the <a>name</a>
--   attribute, for example, only include that as a <tt>Just</tt> value in
--   the <tt>ProfileInfo</tt> parameter.
updateProfile :: ProfileInfo -> TM ()

-- | <tt>getFavorites mbId</tt> returns the 20 most recent favorite
--   statuses for the authenticating user or user specified by the
--   <tt>mbId</tt> parameter.
getFavorites :: Maybe UserId -> TM [Status]

-- | <tt>createFavorite id</tt> favorites the status specified in the
--   <tt>id</tt> parameter as the authenticating user. Returns the favorite
--   status when successful.
createFavorite :: UserId -> TM User

-- | <tt>destroyFavorite id</tt> un-favorites the status specified in the
--   ID parameter as the authenticating user. Returns the un-favorited
--   status in the requested format when successful.
destroyFavorite :: UserId -> TM User

-- | <tt>followUser id</tt> enables notifications for updates from the
--   specified user to the authenticating user. Returns the specified user
--   when successful.
followUser :: UserId -> TM User

-- | <tt>leaveUser id</tt> disables notifications for updates from the
--   specified user to the authenticating user. Returns the specified user
--   when successful.
leaveUser :: UserId -> TM User

-- | <tt>createBlock id</tt> blocks the user specified in the <tt>id</tt>
--   parameter as the authenticating user. Returns the blocked user.
createBlock :: UserId -> TM User

-- | <tt>destroyBlock id</tt> un-blocks the user specified in the
--   <tt>id</tt> parameter as the authenticating user. Returns the
--   un-blocked user.
destroyBlock :: UserId -> TM User

-- | <tt>testCall</tt> returns the string <a>ok</a> in the requested format
--   with a 200 OK HTTP status code.
testCall :: TM String
search :: SearchContext -> TM [SearchResult]

-- | <tt>testCall</tt> returns the string <a>ok</a> in the requested format
--   with a 200 OK HTTP status code.
getTrends :: TM Trends
data SearchContext
SearchContext :: String -> Int -> Int -> StatusId -> String -> Bool -> String -> String -> UserName -> UserName -> UserName -> [String] -> [String] -> [String] -> String -> String -> SearchContext
searchLang :: SearchContext -> String
searchRPP :: SearchContext -> Int
searchPage :: SearchContext -> Int
searchSinceId :: SearchContext -> StatusId
searchGeocode :: SearchContext -> String
searchShowUser :: SearchContext -> Bool
searchQuery :: SearchContext -> String
searchHashTag :: SearchContext -> String
searchFromUser :: SearchContext -> UserName
searchToUser :: SearchContext -> UserName
searchReferring :: SearchContext -> UserName
searchAllWords :: SearchContext -> [String]
searchAnyWords :: SearchContext -> [String]
searchNoneWords :: SearchContext -> [String]
searchPhrase :: SearchContext -> String
searchNear :: SearchContext -> String
searchFor :: SearchContext
setUpdateInterval :: IO ()
setTwitterUser :: IO ()
tweet :: String -> IO ()
tweetTM :: TM a -> IO a
stopUpdates :: IO ()
addSearchFilter :: SearchContext -> IO SearchId
dropSearch :: SearchId -> IO ()
