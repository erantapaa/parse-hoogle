-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple, arrow-based reactive programming
--   
@package artery
@version 0.1.1

module Control.Artery

-- | <a>Artery</a> is a device that produces a value from the input every
--   beat.
newtype Artery m i o
Artery :: (forall r. i -> (o -> Artery m i o -> m r) -> m r) -> Artery m i o
unArtery :: Artery m i o -> forall r. i -> (o -> Artery m i o -> m r) -> m r

-- | Pump up the <a>Artery</a>.
runArtery :: Monad m => Artery m i o -> i -> m (o, Artery m i o)

-- | Run the given action every beat.
effectful :: Monad m => (i -> m o) -> Artery m i o

-- | Run the given stateful action every beat.
stateful :: Monad m => (i -> StateT s m o) -> s -> Artery m i o

-- | Produce values by accumulating inputs.
scan :: (i -> a -> a) -> a -> Artery m i a

-- | Analogous to <a>scan</a>, but it allows monadic accumulators.
scanM :: Monad m => (i -> a -> m a) -> a -> Artery m i a
fromList :: [a] -> Artery m b a
runList :: Applicative m => Artery m a b -> [a] -> m [b]

-- | Analogous to <a>loop</a>, but the feedback will be delayed a beat.
feedback :: r -> Artery m (i, r) (o, r) -> Artery m i o

-- | Delay a beat. The first argument is the default value for the output.
delay1 :: a -> Artery m a a

-- | 'delay n' propagates a signal n beat behind.
delay :: Int -> a -> Artery m a a
cartridge :: MonadIO m => MVar (Artery m i o) -> Artery m i o
instance Monoid o => Monoid (Artery m i o)
instance Fractional o => Fractional (Artery m i o)
instance Num o => Num (Artery m i o)
instance Choice (Artery m)
instance Strong (Artery m)
instance Profunctor (Artery m)
instance Applicative (Artery m i)
instance Functor (Artery m i)
instance ArrowChoice (Artery m)
instance Arrow (Artery m)
instance Category (Artery m)
