-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Vienna / DotBracket / ExtSS parsers
--   
--   Parsers for Vienna dot-bracket like formats. Includes parsing two-line
--   RNAfold output, RNAstrand dot-bracket notation and the RNAwolf
--   extended RNA secondary structure notation.
@package BiobaseDotP
@version 0.1.0.0

module Biobase.Vienna.Import

module Biobase.Vienna.Export


-- | ViennaRNA secondary structures.
--   
--   TODO extends all data structures to accept energy values associated
--   with structures, if needed.
--   
--   TODO or said otherwise, parsers for RNAfold, RNAsubopt, etc output
--   would be nice.
module Biobase.Vienna

-- | Encapsulation of ViennaRNA secondary structures.
--   
--   Sometimes, we need to associate more than one structure with a
--   sequence. This happens, for example, when parsing RNAsubopt output.
data Vienna
Vienna :: !ByteString -> !ByteString -> Vienna
sequence :: Vienna -> !ByteString
structure :: Vienna -> !ByteString
ViennaMany :: !ByteString -> ![ByteString] -> Vienna
sequence :: Vienna -> !ByteString
structures :: Vienna -> ![ByteString]
instance Read Vienna
instance Show Vienna

module Biobase.RNAstrand

-- | RNAstrand Dot-bracket files contain a sequence and a secondary
--   structure, possibly with pseudoknots. In addition, comments are
--   possible using <a>#</a>.
data RNAstrand
RNAstrand :: !ByteString -> !ByteString -> ![ByteString] -> RNAstrand
sequence :: RNAstrand -> !ByteString
structure :: RNAstrand -> !ByteString
comments :: RNAstrand -> ![ByteString]
instance Read RNAstrand
instance Show RNAstrand

module Biobase.RNAstrand.Export

module Biobase.RNAstrand.Import

-- | RNAstrand element creation.
eneeRNAstrand :: Monad m => Enumeratee ByteString [RNAstrand] m a

-- | Convenience function.
fromFile :: FilePath -> IO [RNAstrand]

module Biobase.ExtSS
data ExtSS
ExtSS :: !ByteString -> !ByteString -> ![(Int, Int, ByteString)] -> ![ByteString] -> ExtSS
sequence :: ExtSS -> !ByteString
structure :: ExtSS -> !ByteString
detailed :: ExtSS -> ![(Int, Int, ByteString)]
comments :: ExtSS -> ![ByteString]
instance Read ExtSS
instance Show ExtSS

module Biobase.ExtSS.Export

-- | Given a list of <a>ExtSS</a> elements, transform into a bytestring.
eneeByteString :: Monad m => Enumeratee [ExtSS] ByteString m a


-- | Imports an extended secondary structure from bytestring. Such a
--   structure is defined as:
--   
--   # comment 1 -- comments # comment ... -- comments # comment n --
--   comments AUGACUACUAGC -- sequence part 3 9 cWW -- detailed pair
--   information (indented)
module Biobase.ExtSS.Import

-- | Convert input bytestring into a list of extended secondary structures.
eneeExtSS :: Monad m => Enumeratee ByteString [ExtSS] m a

-- | Convert a line into an extended pair.
convLine :: ByteString -> (Int, Int, ByteString)

-- | Convenience function
fromFile :: FilePath -> IO [ExtSS]
