-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple templating library using HTML5 as its template
language.
--   
@package domplate
@version 0.1.0.1


-- | Simple templating using HTML5 as the template language. Templates are
--   specified by adding special attributes to tags. During substitution,
--   these attributes are stripped from the HTML. The following attributes
--   are recognized:
--   
--   <ul>
--   <li><tt>insert="identifier"</tt> - replace the tag's contents with the
--   value bound to <tt>identifier</tt> in the substitution context.</li>
--   <li><tt>replace="identifier"</tt> - replace the whole tag and its
--   contents with the value bound to <tt>identifier</tt> in the
--   substitution context.</li>
--   <li><tt>when="identifier"</tt> - only render this tag if
--   <tt>identifier</tt> is set to true in the substitution context.</li>
--   <li><tt>unless="identifier"</tt> - the dual of <tt>when</tt>; only
--   render this tag if <tt>identifier</tt> is set to false in the
--   substitution context.</li>
--   <li><tt>forall="identifier"</tt> - render this tag and its contents
--   once for each element in the list bound to <tt>identifier</tt> in the
--   substitution context. The contents of the element may refer to the
--   current iteration's value of <tt>identifier</tt> by that same
--   name.</li>
--   </ul>
--   
--   Substitution can also be performed on the attributes of tags. The
--   following attribute substitutions are recognized:
--   
--   <ul>
--   <li><tt>when:identifier:attr="value"</tt> - only include <tt>attr</tt>
--   is <tt>identifier</tt> is set to true in the substitution
--   context.</li>
--   <li><tt>unless:identifier:attr="value"</tt> - only include
--   <tt>attr</tt> is <tt>identifier</tt> is set to false in the
--   substitution context.</li>
--   <li><tt>insert:identifier:attr="value"</tt> - overwrite the value of
--   <tt>attr</tt> with whatever <tt>identifier</tt> is bound to in the
--   substitution context.</li>
--   </ul>
--   
--   Contexts can be nested, in which case nested keys are separated by
--   periods, as in <tt>parent.child.grandchild</tt>. Keys may be prefixed
--   with a question mark, in which case they are considered to be "weak
--   keys". If a weak key does not exist in the context, it will be
--   replaced by a sensible default value instead of causing an error. The
--   defaults for the different value types are as follows:
--   
--   <ul>
--   <li>bool: false</li>
--   <li>string: ""</li>
--   <li>array: []</li>
--   <li>object: {}</li>
--   </ul>
--   
--   As numbers are treated just like strings, they have an empty string as
--   their default value as well.
--   
--   In general, values used as text must be declared text by the context
--   and so on, but the following coercions are permitted:
--   
--   <ul>
--   <li>bool to string</li>
--   <li>array to bool</li>
--   </ul>
--   
--   Coercion of array to bool, with the empty list being considered false
--   and all other list considered true, is permitted to allow templates to
--   take special action in the case of an empty list.
--   
--   Contexts may be constructed programatically using the provided
--   combinators, converted from JSON objects or lists of key-value pairs,
--   or parsed from a YAML-formatted string using <a>parseContext</a>.
module Text.Domplate

-- | A space efficient, packed, unboxed Unicode text type.
data Text :: *

-- | The class of monoids (types with an associative binary operation that
--   has an identity). Instances should satisfy the following laws:
--   
--   <ul>
--   <li><pre>mappend mempty x = x</pre></li>
--   <li><pre>mappend x mempty = x</pre></li>
--   <li><pre>mappend x (mappend y z) = mappend (mappend x y) z</pre></li>
--   <li><pre>mconcat = <a>foldr</a> mappend mempty</pre></li>
--   </ul>
--   
--   The method names refer to the monoid of lists under concatenation, but
--   there are many other instances.
--   
--   Minimal complete definition: <a>mempty</a> and <a>mappend</a>.
--   
--   Some types can be viewed as a monoid in more than one way, e.g. both
--   addition and multiplication on numbers. In such cases we often define
--   <tt>newtype</tt>s and make those instances of <a>Monoid</a>, e.g.
--   <a>Sum</a> and <a>Product</a>.
class Monoid a

-- | A domplate template.
data Template

-- | An Unplate context. A simple mapping from keys to values.
data Context

-- | A JSON value represented as a Haskell value.
data Value :: *
Object :: SrictNotUnpackedObject -> Value
Array :: SrictNotUnpackedArray -> Value
String :: SrictNotUnpackedText -> Value
Number :: SrictNotUnpackedScientific -> Value
Bool :: SrictNotUnpackedBool -> Value
Null :: Value

-- | A key to be read from the context.
type Key = Text

-- | Parse an HTML5 string into a template.
parseTemplate :: ByteString -> Template

-- | Perform substitutions on the given template using the given context,
--   returning a <a>ByteString</a>.
replace :: Template -> Context -> Either String ByteString

-- | Add a new value to the given context. If the value already exists, it
--   is overwritten.
add :: Key -> Value -> Context -> Context

-- | Remove a value from the given context.
remove :: Key -> Context -> Context

-- | Create a context from a list mapping keys to values.
fromList :: [(Key, Value)] -> Context

-- | Look up a value in the top level context.
lookup :: Key -> Context -> Maybe Value

-- | An empty context.
empty :: Context

-- | Get the size of the context. Nested contexts count a single element,
--   regardless of their size.
size :: Context -> Int

-- | An infix synonym for <a>mappend</a>.
--   
--   <i>Since: 4.5.0.0</i>
(<>) :: Monoid m => m -> m -> m

-- | Parse a context from a YAML-formatted <a>ByteString</a>.
parseContext :: ByteString -> Either String Context

-- | Compile a template using a context parsed from a context file. Throws
--   an error if context parsing or substitution fails.
compile :: FilePath -> FilePath -> FilePath -> IO ()
