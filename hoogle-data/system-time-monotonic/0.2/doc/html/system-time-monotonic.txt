-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple library for using the system's monotonic clock
--   
--   Simple library for using the system's monotonic clock. This library is
--   geared toward programs that need to run for long periods of time. It
--   does not (necessarily) provide high-resolution timing.
--   
--   <ul>
--   <li>On Windows, this uses <tt>GetTickCount64</tt>, but falls back to
--   <tt>GetTickCount</tt> if it is not available. <tt>GetTickCount64</tt>
--   was introduced in Windows Vista and Windows Server 2008. Support for
--   <tt>QueryPerformanceCounter</tt> is also available, but is not used by
--   default, as it is less accurate in the long run than
--   <tt>GetTickCount</tt>.</li>
--   <li>On Linux, this uses <tt>clock_gettime</tt> with
--   <tt>CLOCK_MONOTONIC</tt>.</li>
--   </ul>
--   
--   Release history:
--   
--   <ul>
--   <li><i>0.2</i> Update driver API (<tt>SystemClock</tt>) to prevent
--   cumulative precision loss.</li>
--   <li><i>0.1</i> Initial release.</li>
--   </ul>
@package system-time-monotonic
@version 0.2


-- | This module provides more direct access to the system's monotonic
--   clock, but provides less protection against wraparound.
--   
--   More specifically, in the higher-level <a>System.Time.Monotonic</a>
--   API, <a>Clock</a> updates its internal disposition every time
--   <a>clockGetTime</a> is called. The only way to get a wraparound issue
--   with the higher-level API is to call <a>clockGetTime</a> very seldomly
--   (e.g. less than once every 24.8 days, if <tt>GetTickCount</tt> is
--   being used).
module System.Time.Monotonic.Direct

-- | Return a module used for accessing the system's monotonic clock. The
--   reason this is an <a>IO</a> action, rather than simply a
--   <a>SystemClock</a> value, is that the implementation may need to make
--   a system call to determine what monotonic time source to use, and how
--   to use it.
getSystemClock :: IO SomeSystemClock

-- | Existentially-quantified wrapper around <a>SystemClock</a>
data SomeSystemClock
SomeSystemClock :: (SystemClock time cumtime) -> SomeSystemClock

-- | A <a>SystemClock</a> is a driver module used by <a>Clock</a> to access
--   a particular implementation of monotonic time support.
--   
--   <ul>
--   <li><tt>time</tt>: Type of value returned by the system's time-getting
--   function.</li>
--   <li><tt>cumtime</tt>: Type for accumulating differences between
--   consecutive(-ish) calls to <a>systemClockGetTime</a>, in case
--   <tt>time</tt> wraps around. The reason we don't simply use
--   <a>DiffTime</a> is this: if the implementation has to divide the
--   result by a clock frequency, it could end up with a number that is not
--   an integral number of picoseconds. Truncating to <a>DiffTime</a> would
--   lose precision, and that precision loss could add up, at least in
--   theory.</li>
--   </ul>
data SystemClock time cumtime
SystemClock :: IO time -> (time -> time -> cumtime) -> cumtime -> (cumtime -> cumtime -> cumtime) -> (cumtime -> DiffTime) -> String -> SystemClock time cumtime
systemClockGetTime :: SystemClock time cumtime -> IO time

-- | <tt>systemClockDiffTime new old</tt> returns the amount of time that
--   has elapsed between two calls to <tt>systemClockGetTime</tt>.
--   
--   <pre>
--   systemClockDiffTime new old = new - old
--   </pre>
--   
--   This function should handle wraparound properly. Also, bear in mind
--   that <tt>new</tt> may be earlier than <tt>old</tt>. This can happen if
--   multiple threads are accessing a <a>Clock</a> simultaneously.
--   
--   Lastly, <tt>systemClockDiffTime</tt> should not truncate precision in
--   conversion to cumtime. Otherwise, repeated calls to
--   <a>clockGetTime</a> could degrade accuracy, due to lost precision
--   adding up.
systemClockDiffTime :: SystemClock time cumtime -> time -> time -> cumtime

-- | The number <tt>0</tt>.
systemClockZeroCumTime :: SystemClock time cumtime -> cumtime

-- | Add two <tt>cumtime</tt> values. This should not overflow or lose
--   precision.
systemClockAddCumTime :: SystemClock time cumtime -> cumtime -> cumtime -> cumtime

-- | Convert a cumulative total of <a>systemClockDiffTime</a> results to
--   <a>DiffTime</a>. This may truncate precision if it needs to.
systemClockCumToDiff :: SystemClock time cumtime -> cumtime -> DiffTime

-- | Label identifying this clock, like
--   <tt>"clock_gettime(CLOCK_MONOTONIC)"</tt> or <tt>"GetTickCount"</tt>.
--   This label is used for the <a>Show</a> instances of <a>SystemClock</a>
--   and <a>SomeSystemClock</a>, and for <a>clockDriverName</a>.
systemClockName :: SystemClock time cumtime -> String

-- | Uses <tt>clock_gettime</tt> with <tt>CLOCK_MONOTONIC</tt>.
--   
--   <i>Warning:</i> on Linux, this clock stops when the computer is
--   suspended. See <a>http://lwn.net/Articles/434239/</a>.
systemClock_MONOTONIC :: SystemClock CTimeSpec DiffTime
data CTimeSpec
instance Show CTimeSpec
instance Show (SystemClock time cumtime)
instance Show SomeSystemClock


-- | This module provides a platform-independent API for using the system's
--   monotonic clock.
--   
--   Known issues:
--   
--   <ul>
--   <li>On Windows XP, this uses <tt>GetTickCount</tt>, which has a 49.7
--   day wraparound. <a>Clock</a> works around this problem, but the
--   workaround only works if <a>clockGetTime</a> is called at least once
--   every 24.8 days.</li>
--   <li>On Linux, this uses <tt>clock_gettime</tt> with
--   <tt>CLOCK_MONOTONIC</tt>, which (unfortunately) stops when the
--   computer is suspended. Thus, <a>clockGetTime</a> will not include time
--   spent sleeping. Do not rely on this behavior, as it may be fixed in a
--   future version of this library.</li>
--   </ul>
module System.Time.Monotonic
data Clock

-- | Create a new <a>Clock</a>. The result of <a>clockGetTime</a> is based
--   on the time <a>newClock</a> was called.
newClock :: IO Clock

-- | Return the amount of time that has elapsed since the clock was created
--   with <a>newClock</a>.
clockGetTime :: Clock -> IO DiffTime

-- | Variant of <a>newClock</a> that uses the given driver. This can be
--   used if you want to use a different time source than the default.
--   
--   <pre>
--   <a>newClock</a> = <a>newClockWithDriver</a> =&lt;&lt; <a>getSystemClock</a>
--   </pre>
newClockWithDriver :: SomeSystemClock -> IO Clock

-- | Return a string identifying the time source, such as
--   <tt>"clock_gettime(CLOCK_MONOTONIC)"</tt> or <tt>"GetTickCount"</tt>.
clockDriverName :: Clock -> String

-- | Variant of <a>threadDelay</a> for <a>DiffTime</a>.
delay :: DiffTime -> IO ()
