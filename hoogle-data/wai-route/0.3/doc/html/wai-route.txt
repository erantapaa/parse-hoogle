-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Minimalistic, efficient routing for WAI
--   
@package wai-route
@version 0.3

module Network.Wai.Route.Tree
data Tree a
fromList :: [(ByteString, a)] -> Tree a
lookup :: Tree a -> [ByteString] -> Maybe (Payload a)
foldTree :: (Payload a -> b -> b) -> b -> Tree a -> b
mapTree :: (Payload a -> Payload b) -> Tree a -> Tree b
toList :: Tree a -> [Payload a]
segments :: ByteString -> [ByteString]
data Payload a
value :: Payload a -> a
path :: Payload a -> ByteString
captures :: Payload a -> Captures
data Captures
captured :: Captures -> [(ByteString, ByteString)]
captureParams :: Captures -> [ByteString]
captureValues :: Captures -> [ByteString]
instance Monoid (Tree a)

module Network.Wai.Route

-- | A <a>Handler</a> is a generalized <a>Application</a> that receives the
--   captured path parameters as its first argument.
type Handler m = [(ByteString, ByteString)] -> Request -> (Response -> m ResponseReceived) -> m ResponseReceived

-- | Routes requests to <a>Handler</a>s according to a routing table.
route :: Monad m => [(ByteString, Handler m)] -> Request -> (Response -> m ResponseReceived) -> m ResponseReceived
