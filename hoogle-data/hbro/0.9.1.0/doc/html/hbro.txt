-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Minimal KISS compliant browser
--   
--   Minimal KISS compliant browser
@package hbro
@version 0.9.1.0

module Hbro.Types

-- | Base type for high-level actions, mnemonics: K(it) from WebKit
type K = KT IO
newtype KT m a
KT :: (ReaderT Environment m a) -> KT m a

-- | The whole set of parameters, elements and states of the application
data Environment
Environment :: IORef (Map String Dynamic) -> CliOptions -> Config -> GUI -> Context -> Environment
mState :: Environment -> IORef (Map String Dynamic)

-- | Commandline options
mOptions :: Environment -> CliOptions

-- | Custom configuration provided by user
mConfig :: Environment -> Config

-- | Graphical widgets
mGUI :: Environment -> GUI

-- | ZeroMQ context
mContext :: Environment -> Context

-- | Set of commandline options
data CliOptions
CliOptions :: Maybe String -> Bool -> Bool -> Bool -> Bool -> Bool -> Maybe String -> CliOptions

-- | URI to load at start-up
mURI :: CliOptions -> Maybe String

-- | Bypass custom configuration file
mVanilla :: CliOptions -> Bool

-- | Force recompilation and do not launch browser
mRecompile :: CliOptions -> Bool

-- | Do not recompile browser even if configuration file has changed
mDenyReconf :: CliOptions -> Bool

-- | Force recompilation even if configuration file hasn't changed
mForceReconf :: CliOptions -> Bool

-- | Look for a custom configuration file in current working directory
mDyreDebug :: CliOptions -> Bool

-- | Path to the master binary, used by Dyre
mMasterBinary :: CliOptions -> Maybe String

-- | Custom parameters provided by the user
data Config
Config :: (RefDirs -> FilePath) -> (RefDirs -> FilePath) -> String -> [AttrOp WebSettings] -> CommandsList -> Hooks -> Config

-- | Directory where 0MQ sockets will be created (<a>/tmp</a> for example)
mSocketDir :: Config -> RefDirs -> FilePath

-- | Path to XML file describing UI (used by GtkBuilder)
mUIFile :: Config -> RefDirs -> FilePath

-- | Startup page
mHomePage :: Config -> String

-- | WebSettings' attributes to use with webkit (see Webkit.WebSettings
--   documentation) mKeyEventHandler :: KeyEventCallback -&gt; ConnectId
--   WebView -&gt; WebView -&gt; EventM EKey Bool, -- ^ Key event handler,
--   which forwards keystrokes to mKeyEventCallback mKeyEventCallback ::
--   Environment -&gt; KeyEventCallback, -- ^ Main key event callback,
--   assumed to deal with each keystroke separately
mWebSettings :: Config -> [AttrOp WebSettings]

-- | Commands recognized through 0MQ sockets
mCommands :: Config -> CommandsList

-- | Set of functions triggered on specific events
mHooks :: Config -> Hooks
type Config' = Either String Config

-- | Set of functions to be triggered when some events occur
data Hooks
Hooks :: (URI -> WebPolicyDecision -> K ()) -> (URI -> String -> Int -> K ()) -> (URI -> WebPolicyDecision -> K ()) -> (URI -> WebPolicyDecision -> K ()) -> (String -> K ()) -> (Button -> URI -> WebPolicyDecision -> K ()) -> K () -> (URI -> String -> WebPolicyDecision -> K ()) -> (URI -> K ()) -> (URI -> WebPolicyDecision -> K ()) -> (URI -> WebPolicyDecision -> K ()) -> K () -> (String -> K ()) -> Hooks

-- | Previous/next page has been requested
mBackForward :: Hooks -> URI -> WebPolicyDecision -> K ()

-- | A download has been requested
mDownload :: Hooks -> URI -> String -> Int -> K ()

-- | A form has been resubmitted
mFormResubmitted :: Hooks -> URI -> WebPolicyDecision -> K ()

-- | A form has been submitted
mFormSubmitted :: Hooks -> URI -> WebPolicyDecision -> K ()
mKeyPressed :: Hooks -> String -> K ()

-- | A link has been clicked
mLinkClicked :: Hooks -> Button -> URI -> WebPolicyDecision -> K ()

-- | Load has finished
mLoadFinished :: Hooks -> K ()
mMIMEDisposition :: Hooks -> URI -> String -> WebPolicyDecision -> K ()

-- | A new window has been requested
mNewWindow :: Hooks -> URI -> K ()
mOtherNavigation :: Hooks -> URI -> WebPolicyDecision -> K ()

-- | A reload of the current page has been requested
mReload :: Hooks -> URI -> WebPolicyDecision -> K ()

-- | At start-up
mStartUp :: Hooks -> K ()

-- | Title has changed
mTitleChanged :: Hooks -> String -> K ()

-- | Graphical elements
data GUI
GUI :: Window -> Window -> ScrolledWindow -> WebView -> PromptBar -> HBox -> NotificationBar -> Builder -> GUI

-- | Main window
mWindow :: GUI -> Window

-- | Web-inspector window
mInspectorWindow :: GUI -> Window

-- | ScrolledWindow containing the webview
mScrollWindow :: GUI -> ScrolledWindow

-- | Browser's webview
mWebView :: GUI -> WebView

-- | Prompt bar
mPromptBar :: GUI -> PromptBar

-- | Status bar's horizontal box
mStatusBar :: GUI -> HBox

-- | Bar used to display various notifications
mNotificationBar :: GUI -> NotificationBar

-- | Builder object created from XML file
mBuilder :: GUI -> Builder

-- | Prompt-bar elements
data PromptBar
PromptBar :: HBox -> Label -> Entry -> IORef (String -> K ()) -> IORef (String -> K ()) -> PromptBar

-- | Layout box
mBox :: PromptBar -> HBox

-- | Description of current prompt
mDescription :: PromptBar -> Label

-- | Prompt entry
mEntry :: PromptBar -> Entry
mCallbackRef :: PromptBar -> IORef (String -> K ())
mIncrementalCallbackRef :: PromptBar -> IORef (String -> K ())

-- | Notification-bar elements
data NotificationBar
NotificationBar :: Label -> IORef (Maybe HandlerId) -> NotificationBar

-- | Content
mLabel :: NotificationBar -> Label

-- | Timer handler
mTimer :: NotificationBar -> IORef (Maybe HandlerId)

-- | Set of reference directories, typically used to build FilePath-s
data RefDirs
RefDirs :: FilePath -> FilePath -> FilePath -> FilePath -> RefDirs

-- | Home directory
mHome :: RefDirs -> FilePath

-- | Temporary files directory
mTemporary :: RefDirs -> FilePath

-- | Configuration directory
mConfiguration :: RefDirs -> FilePath

-- | Data directory
mData :: RefDirs -> FilePath
type PortableFilePath = RefDirs -> FilePath

-- | List of bound keys. All callbacks are fed with the Environment
--   instance.
type KeysList = [(String, K ())]
type KeysMap = Map String (K ())
type KeyEventCallback = [Modifier] -> String -> IO Bool
type CommandsList = [(String, [String] -> K String)]
type CommandsMap = Map String ([String] -> K String)
data Button
ButtonL :: Button
ButtonM :: Button
ButtonR :: Button
data CaseSensitivity
CaseSensitive :: CaseSensitivity
CaseInsensitive :: CaseSensitivity
data Direction
Forward :: Direction
Backward :: Direction
data Wrap
Wrap :: Wrap
NoWrap :: Wrap
instance Typeable CliOptions
instance Data CliOptions
instance Show CliOptions
instance Eq CliOptions
instance Functor m => Functor (KT m)
instance Monad m => Monad (KT m)
instance MonadFix m => MonadFix (KT m)
instance MonadIO m => MonadIO (KT m)
instance Monad m => MonadReader Environment (KT m)
instance MonadTrans KT

module Hbro.Util
io :: MonadIO m => IO a -> m a
logNormal, logVerbose :: MonadIO m => String -> m ()
resolve :: (RefDirs -> a) -> IO a

-- | Run external command and won't kill when parent process exit.
spawn :: String -> [String] -> IO ()

-- | Return the list of process IDs corresponding to all running instances
--   of the browser.
getAllProcessIDs :: IO [ProcessID]
isCaseSensitive :: CaseSensitivity -> Bool
isForward :: Direction -> Bool
isWrapped :: Wrap -> Bool
allItalic, allBold :: PangoAttribute
send'' :: Socket a -> ByteString -> IO ()

-- | Set a temporary markup text to a label that disappears after some
--   delay.
labelSetMarkupTemporary :: Label -> String -> Int -> IO ()

-- | Open dmenu with given input and return selected entry.
dmenu :: [String] -> String -> IO (Maybe String)
errorHandler :: FilePath -> IOError -> IO ()

module Hbro.Core

-- | <a>runReaderT</a> for <a>K</a>-monad
runK :: Environment -> KT m a -> m a

-- | <a>mapReaderT</a> for <a>K</a>-monad.
mapK :: (m a -> n b) -> KT m a -> KT n b

-- | Like <a>mapK</a>, but monadic-input of filter can do little reading.
mapK2 :: ((c -> m a) -> n b) -> (c -> KT m a) -> KT n b
with :: (Environment -> a) -> (a -> IO b) -> K b
withK :: (Environment -> a) -> (a -> K b) -> K b
withTitle :: (String -> K ()) -> K ()
withURI :: (URI -> K ()) -> K ()
getFaviconURI :: K (Maybe URI)
getLoadProgress :: K Double
getTitle :: K (Maybe String)
getURI :: K (Maybe URI)
getState :: Typeable a => String -> a -> K (IORef a)
goBack, goHome, goForward :: K ()
loadURI :: URI -> K ()
reload, stopLoading, reloadBypassCache :: K ()
zoomIn, zoomOut :: K ()
data Axis
Horizontal :: Axis
Vertical :: Axis
data Position
Absolute :: Double -> Position
Relative :: Double -> Position

-- | General scrolling command.
scroll :: Axis -> Position -> K ()
notify :: Int -> String -> K ()

-- | Wrapper around webViewSearchText, provided for convenience
searchText :: CaseSensitivity -> Direction -> Wrap -> String -> K Bool

-- | Toggle source display. Current implementation forces a refresh of
--   current web page, which may be undesired.
toggleSourceMode :: K ()

-- | Wrapper around webFramePrint function, provided for convenience.
printPage :: K ()

-- | Execute a javascript file on current webpage.
executeJSFile :: FilePath -> WebView -> IO ()

module Hbro.Keys

-- | Look for a callback associated to the given keystrokes and trigger it,
--   if any.
defaultKeyHandler :: KeysList -> String -> K (String, Bool)

-- | Emacs-like key handler.
emacsKeyHandler :: KeysList -> [String] -> String -> K (String, Bool)

-- | Convert a Modifier to a String.
stringify :: Modifier -> String
keyToString :: KeyVal -> Maybe String

module Hbro.Prompt
init :: Builder -> IO PromptBar
open :: String -> String -> K ()

-- | Close prompt, clean its content and callbacks
clean :: K ()

-- | Open prompt bar with given description and default value, and register
--   a callback to trigger at validation.
read :: String -> String -> (String -> K ()) -> K ()

-- | Same as <tt>prompt</tt>, but callback is triggered for each change in
--   prompt's entry.
incrementalRead, iread :: String -> String -> (String -> K ()) -> K ()
read' :: Bool -> String -> String -> (String -> K ()) -> K ()

-- | Same as <a>read</a> for URI values
readURI :: String -> String -> (URI -> K ()) -> K ()

module Hbro.Gui

-- | Return the casted GObject corresponding to the given name (set in the
--   builder's XML file)
getObject :: GObjectClass a => (GObject -> a) -> String -> K a
initGUI :: (RefDirs -> FilePath) -> [AttrOp WebSettings] -> IO GUI

-- | Show web inspector for current webpage.
showWebInspector :: K ()

-- | Toggle a widget's visibility (provided for convenience).
toggleVisibility :: WidgetClass a => a -> IO ()

module Hbro.Config

-- | Default configuration. Homepage: DuckDuckGo, socket directory:
--   system's temporary directory, UI file: ~<i>.config</i>hbro<i>,
--   Webkit's default websettings, no key</i>command binding.
defaultConfig :: Config

-- | Pack of default hooks
defaultHooks :: Hooks

-- | Look for a callback associated to the given keystrokes and trigger it,
--   if any.
defaultKeyHandler :: KeysList -> String -> K (String, Bool)

-- | Default key bindings.
defaultKeyBindings :: KeysList

-- | Left click loads the new page in current window, middle click loads
--   the new page in a new window, right click does nothing.
defaultLinkClickedHook :: Button -> URI -> WebPolicyDecision -> K ()

-- | Display content if webview can show the given MIME type, otherwise
--   download it.
defaultMIMEDisposition :: URI -> String -> WebPolicyDecision -> K ()

-- | Update the main window's title
defaultTitleChangedHook :: String -> K ()

-- | List of default supported requests.
defaultCommandsList :: CommandsList

module Hbro.Socket

-- | Open a response-socket at configured location, named hbro.<a>pid</a>,
--   and start listening for commands
open :: K ()

-- | Close the response socket by sending it the command <a>QUIT</a>.
--   Typically called when exiting application.
close :: K ()

-- | Listen for incoming requests from response socket. Parse received
--   commands and feed the corresponding callback, if any.
readCommands :: Socket Rep -> K ()
getURI :: K String

-- | Return the socket path to use for the given browser's process ID.
socketFile :: ProcessID -> String -> String

-- | Send a single command (through a Request socket) to the given Response
--   socket, and return the answer.
sendCommand :: String -> String -> K String

-- | Same as <a>sendCommand</a>, but for all running instances of the
--   browser.
sendCommandToAll :: String -> K [String]

module Hbro.Hbro
main :: (Config', CliOptions) -> IO ()
main' :: Environment -> IO ()
onDownload :: Environment -> Download -> IO Bool
onKeyPressed :: Environment -> EventM EKey Bool
onMIMEDisposition :: Environment -> WebFrame -> NetworkRequest -> String -> WebPolicyDecision -> IO Bool
onNavigationRequest :: Environment -> WebFrame -> NetworkRequest -> WebNavigationAction -> WebPolicyDecision -> IO Bool
onNewWindow :: Environment -> WebFrame -> NetworkRequest -> WebNavigationAction -> WebPolicyDecision -> IO Bool
onNewWebView :: Environment -> WebFrame -> IO WebView
onPromptKeyPress :: Environment -> EventM EKey Bool
onPromptChanged :: Environment -> IO ()
onTitleChanged :: Environment -> WebFrame -> String -> IO ()

module Hbro.Boot
getOptions :: IO CliOptions
printDyrePaths :: IO ()

-- | Launch a recompilation of the configuration file
recompile :: IO (Maybe String)

-- | Browser's main function. To be called in main function with a proper
--   configuration. See Hbro.Main for an example.
hbro :: Config -> IO ()
