-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Prelude for rest of us
--   
--   <pre>
--   import Prelude ()
--   import Prelude.Plus
--   -- then some useful modules and couple of generic functions
--   -- are available in your code
--   </pre>
@package prelude-plus
@version 0.0.0.6


-- | This library provides couple utility functions and re-exports some
--   useful modules.
--   
--   Some modules are useful but names of functions in them are confliting
--   to Prelude's one. So if we want to use them, we need qualified import
--   or specifing no implict importing prelude.
--   
--   This library takes over these boilerplates.
--   
--   So, write after your module header
--   
--   <pre>
--   import Prelude ()
--   import Prelude.Plus
--   
--   -- Then your code goes here.
--   </pre>
--   
--   So you can use function <tt>or</tt> has type <tt>Traversable t =&gt; t
--   Bool -&gt; Bool</tt>, <tt>putStrLn</tt> works for any utf8 strings,
--   even Applicative operators, etc.
--   
--   Yes, <a>Control.Applicative</a> doesn't need qualified importing but
--   importing such modules are also boilerplates, IMO.
module Prelude.Plus
dup :: a -> (a, a)
swap :: (a, b) -> (b, a)
null :: Foldable t => t a -> Bool
size :: Foldable t => t a -> Int
