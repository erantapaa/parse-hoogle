-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Sequence ID IO-Streams
--   
@package seqid-streams
@version 0.4.0

module System.IO.Streams.SequenceId

-- | Wrap an <a>InputStream</a> and check for dropped or duplicated
--   sequence IDs.
--   
--   Example:
--   
--   <pre>
--   ghci&gt; <a>fromList</a> [1..10 :: <a>SequenceId</a>] &gt;&gt;= <a>sequenceIdInputStream</a> 0 <a>id</a> (<a>fail</a> . <a>show</a>) &gt;&gt;= <a>toList</a>
--   [1,2,3,4,5,6,7,8,9,10]
--   
--   ghci&gt; <a>fromList</a> [5..10 :: <a>SequenceId</a>] &gt;&gt;= <a>sequenceIdInputStream</a> 0 <a>id</a> (<a>fail</a> . <a>show</a>) &gt;&gt;= <a>toList</a>
--   *** Exception: user error (<a>SequenceIdError</a> {errType = <a>SequenceIdDropped</a>, lastSeqId = 0, currSeqId = 5})
--   
--   ghci&gt; <a>fromList</a> [1..10 :: <a>SequenceId</a>] &gt;&gt;= <a>sequenceIdInputStream</a> 5 <a>id</a> (<a>fail</a> . <a>show</a>) &gt;&gt;= <a>toList</a>
--   *** Exception: user error (<a>SequenceIdError</a> {errType = <a>SequenceIdDuplicated</a>, lastSeqId = 5, currSeqId = 1})
--   </pre>
sequenceIdInputStream :: SequenceId -> (a -> SequenceId) -> (SequenceIdError -> IO ()) -> InputStream a -> IO (InputStream a)

-- | Wrap an <a>OutputStream</a> to give a sequence ID for each element
--   written.
--   
--   Example:
--   
--   <pre>
--   (outStream', getSeqId) &lt;- <a>sequenceIdOutputStream</a> 1 outStream
--   return $ <a>contramapM</a> (addSeqId getSeqId) outStream'
--   </pre>
sequenceIdOutputStream :: SequenceId -> OutputStream a -> IO (OutputStream a, IO SequenceId)
