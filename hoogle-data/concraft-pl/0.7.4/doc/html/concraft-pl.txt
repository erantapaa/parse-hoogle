-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Morphological tagger for Polish
--   
@package concraft-pl
@version 0.7.4


-- | Morphosyntax data layer in Polish.
module NLP.Concraft.Polish.Morphosyntax

-- | A textual representation of a morphosyntactic tag.
type Tag = Text

-- | A segment consists of a word and a set of morphosyntactic
--   interpretations.
data Seg t
Seg :: Word -> WMap (Interp t) -> Seg t
word :: Seg t -> Word

-- | Interpretations of the token, each interpretation annotated with a
--   <i>disamb</i> Boolean value (if <a>True</a>, the interpretation is
--   correct within the context).
interps :: Seg t -> WMap (Interp t)

-- | A word.
data Word
Word :: Text -> Space -> Bool -> Word
orth :: Word -> Text
space :: Word -> Space
known :: Word -> Bool

-- | A morphosyntactic interpretation.
data Interp t
Interp :: Text -> t -> Interp t
base :: Interp t -> Text
tag :: Interp t -> t

-- | No space, space or newline. TODO: Perhaps we should use a bit more
--   informative data type.
data Space
None :: Space
Space :: Space
NewLine :: Space

-- | Select one chosen interpretation.
select :: Ord a => a -> Seg a -> Seg a

-- | Select multiple interpretations and one chosen interpretation.
select' :: Ord a => [a] -> a -> Seg a -> Seg a

-- | Select interpretations.
selectWMap :: Ord a => WMap a -> Seg a -> Seg a

-- | A sentence.
type Sent t = [Seg t]

-- | A sentence.
data SentO t
SentO :: [Seg t] -> Text -> SentO t
segs :: SentO t -> [Seg t]
orig :: SentO t -> Text

-- | Restore textual representation of a sentence. The function is not very
--   accurate, it could be improved if we enrich representation of a space.
restore :: Sent t -> Text

-- | Use <a>restore</a> to translate <a>Sent</a> to a <a>SentO</a>.
withOrig :: Sent t -> SentO t

-- | Convert a segment to a segment from a core library.
packSeg :: Tagset -> Seg Tag -> Seg Word Tag

-- | Convert a sentence to a sentence from a core library.
packSent :: Tagset -> Sent Tag -> Sent Word Tag

-- | Convert a sentence to a sentence from a core library.
packSentO :: Tagset -> SentO Tag -> SentO Word Tag
instance Show t => Show (Interp t)
instance Eq t => Eq (Interp t)
instance Ord t => Ord (Interp t)
instance Show Space
instance Eq Space
instance Ord Space
instance Show Word
instance Eq Word
instance Ord Word
instance Show t => Show (Seg t)
instance Eq t => Eq (Seg t)
instance Ord t => Ord (Seg t)
instance FromJSON Space
instance ToJSON Space
instance Binary Space
instance (Ord t, Binary t) => Binary (Interp t)
instance Binary Word
instance FromJSON Word
instance ToJSON Word
instance Word Word
instance (Ord t, Binary t) => Binary (Seg t)


-- | The module provides interface for the Maca analysis tool. See
--   <a>http://nlp.pwr.wroc.pl/redmine/projects/libpltagger/wiki</a> for
--   more information about the analyser.
module NLP.Concraft.Polish.Maca

-- | A pool of Maca instances.
data MacaPool

-- | Run Maca server.
newMacaPool :: Int -> IO MacaPool

-- | Analyse paragraph with Maca. The function is thread-safe. As a
--   pre-processing step, all non-printable characters are removed from the
--   input (based on empirical observations, Maca behaves likewise).
macaPar :: MacaPool -> Text -> IO [Sent Tag]

module NLP.Concraft.Polish

-- | Concraft data.
data Concraft :: *

-- | Save model in a file. Data is compressed using the gzip format.
saveModel :: FilePath -> Concraft -> IO ()

-- | Load model from a file.
loadModel :: FilePath -> IO Concraft

-- | Tag the analysed sentence.
tag :: Concraft -> Sent Tag -> Sent Tag

-- | Tag the sentence with marginal probabilities.
marginals :: Concraft -> Sent Tag -> Sent Tag

-- | Analyse paragraph with Maca. The function is thread-safe. As a
--   pre-processing step, all non-printable characters are removed from the
--   input (based on empirical observations, Maca behaves likewise).
macaPar :: MacaPool -> Text -> IO [Sent Tag]

-- | Training configuration.
data TrainConf
TrainConf :: Tagset -> SgdArgs -> Bool -> Bool -> Int -> R0T -> TrainConf

-- | Tagset.
tagset :: TrainConf -> Tagset

-- | SGD parameters.
sgdArgs :: TrainConf -> SgdArgs

-- | Perform reanalysis.
reana :: TrainConf -> Bool

-- | Store SGD dataset on disk.
onDisk :: TrainConf -> Bool

-- | Numer of guessed tags for each word.
guessNum :: TrainConf -> Int

-- | <a>r0T</a> parameter.
r0 :: TrainConf -> R0T

-- | Train concraft model. TODO: It should be possible to supply the two
--   training procedures with different SGD arguments.
train :: TrainConf -> IO [SentO Tag] -> IO [SentO Tag] -> IO Concraft

-- | Prune disambiguation model: discard model features with absolute
--   values (in log-domain) lower than the given threshold.
prune :: Double -> Concraft -> Concraft

module NLP.Concraft.Polish.Request

-- | A request with configuration.
data Request t
Request :: t -> Config -> Request t

-- | The actuall request.
rqBody :: Request t -> t

-- | Request configuration.
rqConf :: Request t -> Config

-- | Tagging configuration.
newtype Config
Config :: Bool -> Config

-- | Tag with marginal probabilities.
tagProbs :: Config -> Bool

-- | A short request.
data Short
Short :: Text -> Short
Par :: [Sent Tag] -> Short

-- | Process the short request.
short :: MacaPool -> Concraft -> Request Short -> IO [Sent Tag]

-- | A request to parse a long text.
data Long
Long :: Text -> Long
Doc :: [[Sent Tag]] -> Long

-- | Process the long request given the processor for the short request.
long :: (Request Short -> IO a) -> Request Long -> IO [a]
instance Binary Config
instance Binary Long
instance Binary Short
instance Binary t => Binary (Request t)

module NLP.Concraft.Polish.Server

-- | Run a Concraft server on a given port.
runConcraftServer :: MacaPool -> Concraft -> PortID -> IO ()

-- | Submit the given request.
submit :: HostName -> PortID -> Request Short -> IO [Sent Tag]
