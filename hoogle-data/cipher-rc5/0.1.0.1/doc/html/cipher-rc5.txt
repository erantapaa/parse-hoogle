-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pure RC5 implementation
--   
--   Pure RC5 implementation
@package cipher-rc5
@version 0.1.0.1


-- | Pure implementation of the RC5 variable size block cipher.
--   <a>http://en.wikipedia.org/wiki/RC5</a>
--   
--   You need to select a block size and number of rounds. If you are
--   unsure, the most common settings are 32bit blocks with 12 rounds.
--   
--   This implementation supports all the standard block lengths of 32, 64
--   &amp; 128 bits. It also includes support for non-standard (not
--   recommended) 16bit blocks.
--   
--   In addition to being useful when required for e.g. legacy integration,
--   this cipher's option of short block lengths makes it useful for
--   encrypting small data such as database primary keys before display.
--   
--   Introduced in 1994, RC5 has withstood the tests of time remarkably
--   well.
module Crypto.Cipher.RC5

-- | RC5 Cipher
--   
--   Using the given blocksize, number of rounds and key, encrypts the
--   plaintext.
--   
--   <ul>
--   <li>Valid blocksizes are 16 (not standard), 32, 64, 128</li>
--   <li>Valid rounds are 0 - 256</li>
--   </ul>
--   
--   If in doubt, 64bit blocks and 12 rounds is the most common
--   combination. This is called RC5-32/12 (32 is the word size, which is
--   half the block size). 128bit blocks and 18 rounds is also quite
--   common. This is called RC5-64/18
--   
--   <pre>
--   encrypt 64 12 [1,2,3,4] [0xFE,0x13,0x37,0x00]
--   </pre>
--   
--   Encrypts the plaintext <tt>[0xFE,0x13,0x37,0x00]</tt> with a blocksize
--   of 64 bits, 12 rounds and key <tt>[1,2,3,4]</tt>
--   
--   Maximum key length is 256. A common (and sufficient) length is 16
--   bytes. The length of the result is divisible by the block size (i.e.
--   2, 4, 8, 16) On invalid input, the empty list is returned.
encrypt :: Int -> Int -> [Word8] -> [Word8] -> [Word8]

-- | RC5 decryption
--   
--   All parameters must match those used for encryption The length of the
--   result is equal to the length of the input
decrypt :: Int -> Int -> [Word8] -> [Word8] -> [Word8]
