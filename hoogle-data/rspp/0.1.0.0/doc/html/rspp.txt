-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Rational Street Performer Protocol solver
--   
@package rspp
@version 0.1.0.0

module RSPP

-- | A single pledge. Collect these in a Foldable (ie. List), and calculate
--   the total with <a>solve</a>. The <tt>c</tt> type parameter is for your
--   currency datatype, ie. <tt>Centi</tt> from Data.Fixed.
data Pledge c
Pledge :: [PledgeClause c] -> c -> Pledge c

-- | A list of clauses in this pledge
pledgeClauses :: Pledge c -> [PledgeClause c]

-- | This pledge may never exceed this amount
pledgeLimit :: Pledge c -> c

-- | A clause within a pledge, describing its behaviour. The clauses within
--   the pledge are added together, but may never exceed the
--   <a>pledgeLimit</a>.
data PledgeClause c

-- | Simply contribute a fixed amount
FixedPledge :: c -> PledgeClause c

-- | Contribute <a>rpPerUnit</a> for every <a>rpUnit</a> raised above
--   <a>rpAbove</a>
RationalPledge :: c -> c -> c -> PledgeClause c
rpAbove :: PledgeClause c -> c
rpPerUnit :: PledgeClause c -> c
rpUnit :: PledgeClause c -> c

-- | The key function: it does a binary search to find the maximum total
--   which satisfies all pledges.
solve :: (Foldable t, Ord c, Fractional c) => t (Pledge c) -> c

-- | Given a particular total, how much did this clause contribute to that
--   total?
evalClause :: (Ord c, Fractional c) => c -> PledgeClause c -> c

-- | Given a particular total, how much of it was this pledge? Note: the
--   given total includes the total of this pledge!
evalPledge :: (Ord c, Fractional c) => c -> Pledge c -> c

-- | Given a particular total, what is the total of all the pledges? Note:
--   This may not give a valid result! Use <a>solve</a> for that.
evalPledges :: (Foldable t, Ord c, Fractional c) => c -> t (Pledge c) -> c

-- | The most this pledge could contribute. This currently just uses the
--   pledge's limit, though this may not always be quite right. Consider
--   the following pledge: Pledge [FixedPledge 10] 100 The limit of 100
--   will certainly never be reached.
pledgeMax :: Pledge c -> c

-- | The least this pledge may contribute. May be above 0 if it contains a
--   FixedPledge clause.
pledgeMin :: (Ord c, Fractional c) => Pledge c -> c

-- | The highest conceivable total that these pledges may contribute, based
--   on their limits. Note that it may not be possible to actually reach
--   this total.
maxPledges :: (Foldable t, Num c) => t (Pledge c) -> c

-- | The lowest conceivable total that these pledges may contribute.
minPledges :: (Foldable t, Ord c, Fractional c) => t (Pledge c) -> c
instance Eq c => Eq (PledgeClause c)
instance Read c => Read (PledgeClause c)
instance Show c => Show (PledgeClause c)
instance Eq c => Eq (Pledge c)
instance Read c => Read (Pledge c)
instance Show c => Show (Pledge c)
