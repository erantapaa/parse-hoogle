-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell Genetic Algorithm Library
--   
--   Haskell Genetic Algorithm Library
@package hgalib
@version 0.2


-- | Genetic Algorithms
module GA
data Config c p
Config :: ChromosomeConfig c p -> PopulationConfig c p -> (p -> (GAState c p) p) -> Maybe Double -> Maybe Int -> Int -> StdGen -> Config c p

-- | The config for the chromosome model
cConfig :: Config c p -> ChromosomeConfig c p

-- | The config for the population model
pConfig :: Config c p -> PopulationConfig c p

-- | The function that transforms a population into the next generation
newPopulation :: Config c p -> p -> (GAState c p) p

-- | The fitness at which to stop the GA
maxFitness :: Config c p -> Maybe Double

-- | The generation at which to stop the GA
maxGeneration :: Config c p -> Maybe Int

-- | The number of generations elapsed. defaultConfig sets this to 0
currentGeneration :: Config c p -> Int

-- | The random number generator
gen :: Config c p -> StdGen
data PopulationConfig c p
PopulationConfig :: (p -> (GAState c p) c) -> (p -> (GAState c p) p) -> (p -> (GAState c p) p) -> (p -> (GAState c p) p) -> (p -> (GAState c p) p) -> PopulationConfig c p
bestChromosomePop :: PopulationConfig c p -> p -> (GAState c p) c
roulettePop :: PopulationConfig c p -> p -> (GAState c p) p
tournamentPop :: PopulationConfig c p -> p -> (GAState c p) p
applyCrossoverPop :: PopulationConfig c p -> p -> (GAState c p) p
applyMutationPop :: PopulationConfig c p -> p -> (GAState c p) p
data ChromosomeConfig c p
ChromosomeConfig :: (c -> Double) -> (c -> (GAState c p) c) -> (c -> c -> (GAState c p) (c, c)) -> ChromosomeConfig c p

-- | The fitness function for the chromosome model
fitness :: ChromosomeConfig c p -> c -> Double

-- | The mutation operator for the chromosome model
mutate :: ChromosomeConfig c p -> c -> (GAState c p) c

-- | The crossover operator for the chromosome model
cross :: ChromosomeConfig c p -> c -> c -> (GAState c p) (c, c)

-- | defaultConfig acts as a blank slate for genetic algorithms. cConfig,
--   pConfig, gen, and maxFitness or maxGeneration must be defined
defaultConfig :: Config c p
type GAState c p = State (Config c p)

-- | Wrapper function which returns the best chromosome of a population
bestChromosome :: p -> (GAState c p) c

-- | Generates a random number which updating the random number generator
--   for the config
gaRand :: (Random a) => (a, a) -> (GAState c p) a

-- | Runs the specified GA config until the termination condition is
--   reached
run :: p -> (GAState c p) p

-- | A wrapper function for use in newPopulation for roulette selection
rouletteM :: p -> (GAState c p) p

-- | A wrapper function for use in newPopulation for mutating the
--   population
mutateM :: p -> (GAState c p) p

-- | A wrapper function for use in newPopulation for applying crossover to
--   the population
crossM :: p -> (GAState c p) p

-- | A wrapper function for use in newPopulation for tournament selection
tournamentM :: p -> (GAState c p) p

-- | Returns true if the given population satisfies the termination
--   condition for the GA config
isDone :: p -> (GAState c p) Bool


-- | Populations represented as a list of chromosomes Arrays are
--   recommended instead for performance reasons.
module Population.List

-- | Config for use of lists as the population model. Lists are deprecated
--   in favor of arrays.
config :: PopulationConfig c [c]


-- | Populations represented as a diff array of chromosomes
module Population.Array

-- | Population config for arrays
config :: PopulationConfig c (PArray c)


-- | Chromosomes represented as a bit field
module Chromosome.Bits

-- | Randomly flips fits with a specified probability
mutateBits :: Double -> [Bool] -> (GAState c p) [Bool]

-- | Converts a list of Bool's to it's integer representation
bits2int :: [Bool] -> Int

-- | Generates i random bits
randomBits :: Int -> (GAState c p) [Bool]

-- | Single point cross at a random location
pointCross :: [a] -> [a] -> (GAState c p) ([a], [a])

-- | The config for a chromosome of a list of bits. User must defined
--   fitness and mutate.
config :: ChromosomeConfig [a] p


-- | Artificial Neural Networks
module Chromosome.ANN

-- | An Artificial Neural Network
type ANN = [Layer]

-- | A layer of nodes in an ANN
type Layer = [Node]

-- | A node in an ANN. The head of the list is the bias weight. The tail is
--   the weights for the previous layer
type Node = [Double]

-- | Evaluates an ANN with a given input
eval :: [Double] -> ANN -> [Double]

-- | Crossover between two ANN's by exchanging weights
uniformCross :: ANN -> ANN -> (GAState c p) (ANN, ANN)

-- | Crossover between two ANN's by averaging weights
averageCross :: ANN -> ANN -> (GAState c p) (ANN, ANN)

-- | Mutates an ANN by randomly settings weights to +/- range
mutateRandomize :: Double -> Double -> ANN -> (GAState ANN p) ANN

-- | Mutates an ANN by randomly shifting weights by +/- range
mutateShift :: Double -> Double -> ANN -> (GAState ANN p) ANN

-- | Computes the fitness based on the mean square error for a list of
--   examples The examples are a list of tuples of (input, output)
fitnessMSE :: [([Double], [Double])] -> ANN -> Double

-- | Computes the mean square error for a list of examples The examples are
--   a list of tuples of (input, output)
averageMSE :: ANN -> [([Double], [Double])] -> Double

-- | Returns the number of examples correct within the tolerance. The
--   examples are a list of tuples of (input, output)
correctExamples :: [([Double], [Double])] -> Double -> ANN -> Double

-- | Generates a random ANN with a given number of input nodes, a list of
--   number of hidden nodes per layer, and the weight range
randomANN :: Int -> [Int] -> Double -> (GAState c p) ANN


-- | Genetic Programming as strictly-evaluated s-expressions
module Chromosome.GP

-- | An operator in the syntax tree of the GP
data Op a s
Op :: ([a] -> State s a) -> Int -> String -> Op a s

-- | The function for evaluating this node
callback :: Op a s -> ([a] -> State s a)

-- | The number of children of this node
arity :: Op a s -> Int

-- | The name of the node when shown
name :: Op a s -> String

-- | A node in the syntax tree of the GP
data Node a s
Node :: (Op a s) -> [Node a s] -> Node a s

-- | Calculates fitness based on the mean square error across a list of
--   examples The examples are a list of tuples of (inputs state, correct
--   output)
mseFitness :: (Fractional a) => [(s, a)] -> Node a s -> a

-- | Statefully evaluates a given GP
eval :: Node a s -> State s a
instance Show (Node a s)
instance Show (Op a s)
