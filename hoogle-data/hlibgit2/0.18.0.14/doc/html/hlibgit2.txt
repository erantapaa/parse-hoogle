-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Low-level bindings to libgit2
--   
@package hlibgit2
@version 0.18.0.14

module Bindings.Libgit2.Windows

module Bindings.Libgit2.Version

module Bindings.Libgit2.Common
c'git_libgit2_version :: Ptr CInt -> Ptr CInt -> Ptr CInt -> IO ()
p'git_libgit2_version :: FunPtr (Ptr CInt -> Ptr CInt -> Ptr CInt -> IO ())
c'GIT_CAP_THREADS :: Num a => a
c'GIT_CAP_HTTPS :: Num a => a
c'git_libgit2_capabilities :: IO (CInt)
p'git_libgit2_capabilities :: FunPtr (IO (CInt))
c'GIT_OPT_GET_MWINDOW_SIZE :: Num a => a
c'GIT_OPT_SET_MWINDOW_SIZE :: Num a => a
c'GIT_OPT_GET_MWINDOW_MAPPED_LIMIT :: Num a => a
c'GIT_OPT_SET_MWINDOW_MAPPED_LIMIT :: Num a => a
c'GIT_OPT_GET_SEARCH_PATH :: Num a => a
c'GIT_OPT_SET_SEARCH_PATH :: Num a => a
c'GIT_OPT_GET_ODB_CACHE_SIZE :: Num a => a
c'GIT_OPT_SET_ODB_CACHE_SIZE :: Num a => a
c'git_libgit2_opts :: CInt -> IO (CInt)
p'git_libgit2_opts :: FunPtr (CInt -> IO (CInt))

module Bindings.Libgit2.Errors
c'GIT_OK :: Num a => a
c'GIT_ERROR :: Num a => a
c'GIT_ENOTFOUND :: Num a => a
c'GIT_EEXISTS :: Num a => a
c'GIT_EAMBIGUOUS :: Num a => a
c'GIT_EBUFS :: Num a => a
c'GIT_EUSER :: Num a => a
c'GIT_EBAREREPO :: Num a => a
c'GIT_EORPHANEDHEAD :: Num a => a
c'GIT_EUNMERGED :: Num a => a
c'GIT_ENONFASTFORWARD :: Num a => a
c'GIT_EINVALIDSPEC :: Num a => a
c'GIT_EMERGECONFLICT :: Num a => a
c'GIT_PASSTHROUGH :: Num a => a
c'GIT_ITEROVER :: Num a => a
data C'git_error
C'git_error :: CString -> CInt -> C'git_error
c'git_error'message :: C'git_error -> CString
c'git_error'klass :: C'git_error -> CInt
p'git_error'message :: Ptr (C'git_error) -> Ptr (CString)
p'git_error'klass :: Ptr (C'git_error) -> Ptr (CInt)
type C'git_error_t = CUInt
c'GITERR_NOMEMORY :: Num a => a
c'GITERR_OS :: Num a => a
c'GITERR_INVALID :: Num a => a
c'GITERR_REFERENCE :: Num a => a
c'GITERR_ZLIB :: Num a => a
c'GITERR_REPOSITORY :: Num a => a
c'GITERR_CONFIG :: Num a => a
c'GITERR_REGEX :: Num a => a
c'GITERR_ODB :: Num a => a
c'GITERR_INDEX :: Num a => a
c'GITERR_OBJECT :: Num a => a
c'GITERR_NET :: Num a => a
c'GITERR_TAG :: Num a => a
c'GITERR_TREE :: Num a => a
c'GITERR_INDEXER :: Num a => a
c'GITERR_SSL :: Num a => a
c'GITERR_SUBMODULE :: Num a => a
c'GITERR_THREAD :: Num a => a
c'GITERR_STASH :: Num a => a
c'GITERR_CHECKOUT :: Num a => a
c'GITERR_FETCHHEAD :: Num a => a
c'GITERR_MERGE :: Num a => a
c'giterr_last :: IO (Ptr C'git_error)
c'giterr_clear :: IO ()
c'giterr_set_str :: CInt -> CString -> IO ()
p'giterr_last :: FunPtr (IO (Ptr C'git_error))
c'giterr_set_oom :: IO ()
p'giterr_clear :: FunPtr (IO ())
p'giterr_set_str :: FunPtr (CInt -> CString -> IO ())
p'giterr_set_oom :: FunPtr (IO ())
instance Eq C'git_error
instance Show C'git_error
instance Storable C'git_error

module Bindings.Libgit2.Message
c'git_message_prettify :: CString -> CSize -> CString -> CInt -> IO (CInt)
p'git_message_prettify :: FunPtr (CString -> CSize -> CString -> CInt -> IO (CInt))

module Bindings.Libgit2.Strarray
data C'git_strarray
C'git_strarray :: Ptr (CString) -> CSize -> C'git_strarray
c'git_strarray'strings :: C'git_strarray -> Ptr (CString)
c'git_strarray'count :: C'git_strarray -> CSize
c'git_strarray_free :: Ptr C'git_strarray -> IO ()
c'git_strarray_copy :: Ptr C'git_strarray -> Ptr C'git_strarray -> IO (CInt)
p'git_strarray_free :: FunPtr (Ptr C'git_strarray -> IO ())
p'git_strarray_copy :: FunPtr (Ptr C'git_strarray -> Ptr C'git_strarray -> IO (CInt))
p'git_strarray'strings :: Ptr (C'git_strarray) -> Ptr (Ptr (CString))
p'git_strarray'count :: Ptr (C'git_strarray) -> Ptr (CSize)
instance Eq C'git_strarray
instance Show C'git_strarray
instance Storable C'git_strarray

module Bindings.Libgit2.Threads
c'git_threads_init :: IO (CInt)
c'git_threads_shutdown :: IO ()
p'git_threads_init :: FunPtr (IO (CInt))
p'git_threads_shutdown :: FunPtr (IO ())

module Bindings.Libgit2.Types
type C'git_off_t = CLong
type C'git_time_t = CLong
type C'git_otype = CInt
c'GIT_OBJ_ANY :: Num a => a
c'GIT_OBJ_BAD :: Num a => a
c'GIT_OBJ__EXT1 :: Num a => a
c'GIT_OBJ_COMMIT :: Num a => a
c'GIT_OBJ_TREE :: Num a => a
c'GIT_OBJ_BLOB :: Num a => a
c'GIT_OBJ_TAG :: Num a => a
c'GIT_OBJ__EXT2 :: Num a => a
c'GIT_OBJ_OFS_DELTA :: Num a => a
c'GIT_OBJ_REF_DELTA :: Num a => a
data C'git_odb
C'git_odb :: C'git_odb
data C'git_odb_object
C'git_odb_object :: C'git_odb_object
data C'git_refdb
C'git_refdb :: C'git_refdb
data C'git_repository
C'git_repository :: C'git_repository
data C'git_object
C'git_object :: C'git_object
data C'git_revwalk
C'git_revwalk :: C'git_revwalk
data C'git_tag
C'git_tag :: C'git_tag
data C'git_blob
C'git_blob :: C'git_blob
data C'git_commit
C'git_commit :: C'git_commit
data C'git_tree_entry
C'git_tree_entry :: C'git_tree_entry
data C'git_tree
C'git_tree :: C'git_tree
data C'git_treebuilder
C'git_treebuilder :: C'git_treebuilder
data C'git_index
C'git_index :: C'git_index
data C'git_config
C'git_config :: C'git_config
data C'git_reflog_entry
C'git_reflog_entry :: C'git_reflog_entry
data C'git_reflog
C'git_reflog :: C'git_reflog
data C'git_note
C'git_note :: C'git_note
data C'git_packbuilder
C'git_packbuilder :: C'git_packbuilder
data C'git_time
C'git_time :: CLong -> CInt -> C'git_time
c'git_time'time :: C'git_time -> CLong
c'git_time'offset :: C'git_time -> CInt
p'git_time'time :: Ptr (C'git_time) -> Ptr (CLong)
p'git_time'offset :: Ptr (C'git_time) -> Ptr (CInt)
data C'git_signature
C'git_signature :: CString -> CString -> C'git_time -> C'git_signature
c'git_signature'name :: C'git_signature -> CString
c'git_signature'email :: C'git_signature -> CString
c'git_signature'when :: C'git_signature -> C'git_time
data C'git_reference
C'git_reference :: C'git_reference
p'git_signature'name :: Ptr (C'git_signature) -> Ptr (CString)
p'git_signature'email :: Ptr (C'git_signature) -> Ptr (CString)
type C'git_ref_t = CUInt
p'git_signature'when :: Ptr (C'git_signature) -> Ptr (C'git_time)
c'GIT_REF_INVALID :: Num a => a
c'GIT_REF_OID :: Num a => a
c'GIT_REF_SYMBOLIC :: Num a => a
c'GIT_REF_LISTALL :: Num a => a
type C'git_branch_t = CUInt
c'GIT_BRANCH_LOCAL :: Num a => a
c'GIT_BRANCH_REMOTE :: Num a => a
type C'git_filemode_t = CUInt
c'GIT_FILEMODE_NEW :: Num a => a
c'GIT_FILEMODE_TREE :: Num a => a
c'GIT_FILEMODE_BLOB :: Num a => a
c'GIT_FILEMODE_BLOB_EXECUTABLE :: Num a => a
c'GIT_FILEMODE_LINK :: Num a => a
c'GIT_FILEMODE_COMMIT :: Num a => a
data C'git_refspec
C'git_refspec :: C'git_refspec
data C'git_remote
C'git_remote :: C'git_remote
data C'git_push
C'git_push :: C'git_push
instance Eq C'git_time
instance Show C'git_time
instance Eq C'git_signature
instance Show C'git_signature
instance Storable C'git_signature
instance Storable C'git_time

module Bindings.Libgit2.Config
c'GIT_CONFIG_LEVEL_SYSTEM :: Num a => a
c'GIT_CONFIG_LEVEL_XDG :: Num a => a
c'GIT_CONFIG_LEVEL_GLOBAL :: Num a => a
c'GIT_CONFIG_LEVEL_LOCAL :: Num a => a
c'GIT_CONFIG_HIGHEST_LEVEL :: Num a => a
data C'git_config_entry
C'git_config_entry :: CString -> CString -> CUInt -> C'git_config_entry
c'git_config_entry'name :: C'git_config_entry -> CString
c'git_config_entry'value :: C'git_config_entry -> CString
c'git_config_entry'level :: C'git_config_entry -> CUInt
type C'git_config_foreach_cb = FunPtr (Ptr (C'git_config_entry) -> Ptr () -> IO CInt)
mk'git_config_foreach_cb :: (Ptr (C'git_config_entry) -> Ptr () -> IO CInt) -> IO C'git_config_foreach_cb
p'git_config_entry'name :: Ptr (C'git_config_entry) -> Ptr (CString)
mK'git_config_foreach_cb :: C'git_config_foreach_cb -> (Ptr (C'git_config_entry) -> Ptr () -> IO CInt)
p'git_config_entry'value :: Ptr (C'git_config_entry) -> Ptr (CString)
p'git_config_entry'level :: Ptr (C'git_config_entry) -> Ptr (CUInt)
type C'git_config_backend_open_callback = FunPtr (Ptr C'git_config_backend -> CUInt -> IO CInt)
type C'git_config_backend_get_callback = FunPtr (Ptr C'git_config_backend -> CString -> Ptr (Ptr C'git_config_entry) -> IO CInt)
mk'git_config_backend_open_callback :: (Ptr C'git_config_backend -> CUInt -> IO CInt) -> IO C'git_config_backend_open_callback
type C'git_config_backend_get_multivar_callback = FunPtr (Ptr C'git_config_backend -> CString -> CString -> C'git_config_foreach_cb -> Ptr () -> IO CInt)
mk'git_config_backend_get_callback :: (Ptr C'git_config_backend -> CString -> Ptr (Ptr C'git_config_entry) -> IO CInt) -> IO C'git_config_backend_get_callback
type C'git_config_backend_set_callback = FunPtr (Ptr C'git_config_backend -> CString -> CString -> IO CInt)
mK'git_config_backend_open_callback :: C'git_config_backend_open_callback -> (Ptr C'git_config_backend -> CUInt -> IO CInt)
mk'git_config_backend_get_multivar_callback :: (Ptr C'git_config_backend -> CString -> CString -> C'git_config_foreach_cb -> Ptr () -> IO CInt) -> IO C'git_config_backend_get_multivar_callback
type C'git_config_backend_set_multivar_callback = FunPtr (Ptr C'git_config_backend -> CString -> CString -> CString -> IO CInt)
mk'git_config_backend_set_callback :: (Ptr C'git_config_backend -> CString -> CString -> IO CInt) -> IO C'git_config_backend_set_callback
mK'git_config_backend_get_callback :: C'git_config_backend_get_callback -> (Ptr C'git_config_backend -> CString -> Ptr (Ptr C'git_config_entry) -> IO CInt)
type C'git_config_backend_del_callback = FunPtr (Ptr C'git_config_backend -> CString -> IO CInt)
mk'git_config_backend_set_multivar_callback :: (Ptr C'git_config_backend -> CString -> CString -> CString -> IO CInt) -> IO C'git_config_backend_set_multivar_callback
mK'git_config_backend_get_multivar_callback :: C'git_config_backend_get_multivar_callback -> (Ptr C'git_config_backend -> CString -> CString -> C'git_config_foreach_cb -> Ptr () -> IO CInt)
type C'git_config_backend_foreach_callback = FunPtr (Ptr C'git_config_backend -> CString -> C'git_config_foreach_cb -> Ptr () -> IO CInt)
mk'git_config_backend_del_callback :: (Ptr C'git_config_backend -> CString -> IO CInt) -> IO C'git_config_backend_del_callback
mK'git_config_backend_set_callback :: C'git_config_backend_set_callback -> (Ptr C'git_config_backend -> CString -> CString -> IO CInt)
type C'git_config_backend_refresh_callback = FunPtr (Ptr C'git_config_backend -> IO CInt)
mK'git_config_backend_set_multivar_callback :: C'git_config_backend_set_multivar_callback -> (Ptr C'git_config_backend -> CString -> CString -> CString -> IO CInt)
mk'git_config_backend_foreach_callback :: (Ptr C'git_config_backend -> CString -> C'git_config_foreach_cb -> Ptr () -> IO CInt) -> IO C'git_config_backend_foreach_callback
type C'git_config_backend_free_callback = FunPtr (Ptr C'git_config_backend -> IO ())
mk'git_config_backend_refresh_callback :: (Ptr C'git_config_backend -> IO CInt) -> IO C'git_config_backend_refresh_callback
mK'git_config_backend_del_callback :: C'git_config_backend_del_callback -> (Ptr C'git_config_backend -> CString -> IO CInt)
mk'git_config_backend_free_callback :: (Ptr C'git_config_backend -> IO ()) -> IO C'git_config_backend_free_callback
mK'git_config_backend_foreach_callback :: C'git_config_backend_foreach_callback -> (Ptr C'git_config_backend -> CString -> C'git_config_foreach_cb -> Ptr () -> IO CInt)
mK'git_config_backend_refresh_callback :: C'git_config_backend_refresh_callback -> (Ptr C'git_config_backend -> IO CInt)
mK'git_config_backend_free_callback :: C'git_config_backend_free_callback -> (Ptr C'git_config_backend -> IO ())
data C'git_config_backend
C'git_config_backend :: CUInt -> Ptr C'git_config -> C'git_config_backend_open_callback -> C'git_config_backend_get_callback -> C'git_config_backend_get_multivar_callback -> C'git_config_backend_set_callback -> C'git_config_backend_set_multivar_callback -> C'git_config_backend_del_callback -> C'git_config_backend_foreach_callback -> C'git_config_backend_refresh_callback -> C'git_config_backend_free_callback -> C'git_config_backend
c'git_config_backend'version :: C'git_config_backend -> CUInt
c'git_config_backend'cfg :: C'git_config_backend -> Ptr C'git_config
c'git_config_backend'open :: C'git_config_backend -> C'git_config_backend_open_callback
c'git_config_backend'get :: C'git_config_backend -> C'git_config_backend_get_callback
c'git_config_backend'get_multivar :: C'git_config_backend -> C'git_config_backend_get_multivar_callback
c'git_config_backend'set :: C'git_config_backend -> C'git_config_backend_set_callback
c'git_config_backend'set_multivar :: C'git_config_backend -> C'git_config_backend_set_multivar_callback
c'git_config_backend'del :: C'git_config_backend -> C'git_config_backend_del_callback
c'git_config_backend'foreach :: C'git_config_backend -> C'git_config_backend_foreach_callback
c'git_config_backend'refresh :: C'git_config_backend -> C'git_config_backend_refresh_callback
c'git_config_backend'free :: C'git_config_backend -> C'git_config_backend_free_callback
type C'git_cvar_t = CUInt
c'GIT_CVAR_FALSE :: Num a => a
c'GIT_CVAR_TRUE :: Num a => a
c'GIT_CVAR_INT32 :: Num a => a
c'GIT_CVAR_STRING :: Num a => a
p'git_config_backend'version :: Ptr (C'git_config_backend) -> Ptr (CUInt)
p'git_config_backend'cfg :: Ptr (C'git_config_backend) -> Ptr (Ptr C'git_config)
p'git_config_backend'open :: Ptr (C'git_config_backend) -> Ptr (C'git_config_backend_open_callback)
data C'git_cvar_map
C'git_cvar_map :: C'git_cvar_t -> CString -> CInt -> C'git_cvar_map
c'git_cvar_map'cvar_type :: C'git_cvar_map -> C'git_cvar_t
c'git_cvar_map'str_match :: C'git_cvar_map -> CString
c'git_cvar_map'map_value :: C'git_cvar_map -> CInt
p'git_config_backend'get :: Ptr (C'git_config_backend) -> Ptr (C'git_config_backend_get_callback)
c'git_config_find_global :: CString -> CSize -> IO (CInt)
c'git_config_find_xdg :: CString -> CSize -> IO (CInt)
p'git_config_backend'get_multivar :: Ptr (C'git_config_backend) -> Ptr (C'git_config_backend_get_multivar_callback)
c'git_config_find_system :: CString -> CSize -> IO (CInt)
p'git_config_find_global :: FunPtr (CString -> CSize -> IO (CInt))
c'git_config_open_default :: Ptr (Ptr C'git_config) -> IO (CInt)
p'git_config_find_xdg :: FunPtr (CString -> CSize -> IO (CInt))
p'git_config_backend'set :: Ptr (C'git_config_backend) -> Ptr (C'git_config_backend_set_callback)
c'git_config_new :: Ptr (Ptr C'git_config) -> IO (CInt)
p'git_config_find_system :: FunPtr (CString -> CSize -> IO (CInt))
p'git_cvar_map'cvar_type :: Ptr (C'git_cvar_map) -> Ptr (C'git_cvar_t)
p'git_config_open_default :: FunPtr (Ptr (Ptr C'git_config) -> IO (CInt))
c'git_config_add_backend :: Ptr C'git_config -> Ptr C'git_config_backend -> CUInt -> CInt -> IO (CInt)
p'git_config_backend'set_multivar :: Ptr (C'git_config_backend) -> Ptr (C'git_config_backend_set_multivar_callback)
p'git_config_new :: FunPtr (Ptr (Ptr C'git_config) -> IO (CInt))
c'git_config_add_file_ondisk :: Ptr C'git_config -> CString -> CUInt -> CInt -> IO (CInt)
p'git_cvar_map'str_match :: Ptr (C'git_cvar_map) -> Ptr (CString)
c'git_config_open_ondisk :: Ptr (Ptr C'git_config) -> CString -> IO (CInt)
p'git_config_add_backend :: FunPtr (Ptr C'git_config -> Ptr C'git_config_backend -> CUInt -> CInt -> IO (CInt))
p'git_config_backend'del :: Ptr (C'git_config_backend) -> Ptr (C'git_config_backend_del_callback)
c'git_config_open_level :: Ptr (Ptr C'git_config) -> Ptr C'git_config -> CUInt -> IO (CInt)
p'git_config_add_file_ondisk :: FunPtr (Ptr C'git_config -> CString -> CUInt -> CInt -> IO (CInt))
p'git_cvar_map'map_value :: Ptr (C'git_cvar_map) -> Ptr (CInt)
c'git_config_refresh :: Ptr C'git_config -> IO (CInt)
p'git_config_open_ondisk :: FunPtr (Ptr (Ptr C'git_config) -> CString -> IO (CInt))
p'git_config_backend'foreach :: Ptr (C'git_config_backend) -> Ptr (C'git_config_backend_foreach_callback)
c'git_config_free :: Ptr C'git_config -> IO ()
p'git_config_open_level :: FunPtr (Ptr (Ptr C'git_config) -> Ptr C'git_config -> CUInt -> IO (CInt))
p'git_config_refresh :: FunPtr (Ptr C'git_config -> IO (CInt))
c'git_config_get_entry :: Ptr (Ptr C'git_config_entry) -> Ptr C'git_config -> CString -> IO (CInt)
p'git_config_backend'refresh :: Ptr (C'git_config_backend) -> Ptr (C'git_config_backend_refresh_callback)
p'git_config_free :: FunPtr (Ptr C'git_config -> IO ())
c'git_config_get_int32 :: Ptr CInt -> Ptr C'git_config -> CString -> IO (CInt)
c'git_config_get_int64 :: Ptr CLong -> Ptr C'git_config -> CString -> IO (CInt)
p'git_config_get_entry :: FunPtr (Ptr (Ptr C'git_config_entry) -> Ptr C'git_config -> CString -> IO (CInt))
p'git_config_backend'free :: Ptr (C'git_config_backend) -> Ptr (C'git_config_backend_free_callback)
c'git_config_get_bool :: Ptr CInt -> Ptr C'git_config -> CString -> IO (CInt)
p'git_config_get_int32 :: FunPtr (Ptr CInt -> Ptr C'git_config -> CString -> IO (CInt))
c'git_config_get_string :: Ptr (CString) -> Ptr C'git_config -> CString -> IO (CInt)
p'git_config_get_int64 :: FunPtr (Ptr CLong -> Ptr C'git_config -> CString -> IO (CInt))
p'git_config_get_bool :: FunPtr (Ptr CInt -> Ptr C'git_config -> CString -> IO (CInt))
c'git_config_get_multivar :: Ptr C'git_config -> CString -> CString -> C'git_config_foreach_cb -> Ptr () -> IO (CInt)
c'git_config_set_int32 :: Ptr C'git_config -> CString -> CInt -> IO (CInt)
p'git_config_get_string :: FunPtr (Ptr (CString) -> Ptr C'git_config -> CString -> IO (CInt))
c'git_config_set_int64 :: Ptr C'git_config -> CString -> CLong -> IO (CInt)
p'git_config_get_multivar :: FunPtr (Ptr C'git_config -> CString -> CString -> C'git_config_foreach_cb -> Ptr () -> IO (CInt))
c'git_config_set_bool :: Ptr C'git_config -> CString -> CInt -> IO (CInt)
p'git_config_set_int32 :: FunPtr (Ptr C'git_config -> CString -> CInt -> IO (CInt))
c'git_config_set_string :: Ptr C'git_config -> CString -> CString -> IO (CInt)
p'git_config_set_int64 :: FunPtr (Ptr C'git_config -> CString -> CLong -> IO (CInt))
p'git_config_set_bool :: FunPtr (Ptr C'git_config -> CString -> CInt -> IO (CInt))
c'git_config_set_multivar :: Ptr C'git_config -> CString -> CString -> CString -> IO (CInt)
c'git_config_delete_entry :: Ptr C'git_config -> CString -> IO (CInt)
p'git_config_set_string :: FunPtr (Ptr C'git_config -> CString -> CString -> IO (CInt))
c'git_config_foreach :: Ptr C'git_config -> C'git_config_foreach_cb -> Ptr () -> IO (CInt)
p'git_config_set_multivar :: FunPtr (Ptr C'git_config -> CString -> CString -> CString -> IO (CInt))
p'git_config_delete_entry :: FunPtr (Ptr C'git_config -> CString -> IO (CInt))
c'git_config_foreach_match :: Ptr C'git_config -> CString -> C'git_config_foreach_cb -> Ptr () -> IO (CInt)
p'git_config_foreach :: FunPtr (Ptr C'git_config -> C'git_config_foreach_cb -> Ptr () -> IO (CInt))
c'git_config_get_mapped :: Ptr CInt -> Ptr C'git_config -> CString -> Ptr C'git_cvar_map -> CSize -> IO (CInt)
c'git_config_lookup_map_value :: Ptr CInt -> Ptr C'git_cvar_map -> CSize -> CString -> IO (CInt)
p'git_config_foreach_match :: FunPtr (Ptr C'git_config -> CString -> C'git_config_foreach_cb -> Ptr () -> IO (CInt))
c'git_config_parse_bool :: Ptr CInt -> CString -> IO (CInt)
p'git_config_get_mapped :: FunPtr (Ptr CInt -> Ptr C'git_config -> CString -> Ptr C'git_cvar_map -> CSize -> IO (CInt))
c'git_config_parse_int32 :: Ptr CInt -> CString -> IO (CInt)
p'git_config_lookup_map_value :: FunPtr (Ptr CInt -> Ptr C'git_cvar_map -> CSize -> CString -> IO (CInt))
c'git_config_parse_int64 :: Ptr CLong -> CString -> IO (CInt)
p'git_config_parse_bool :: FunPtr (Ptr CInt -> CString -> IO (CInt))
p'git_config_parse_int32 :: FunPtr (Ptr CInt -> CString -> IO (CInt))
p'git_config_parse_int64 :: FunPtr (Ptr CLong -> CString -> IO (CInt))
instance Eq C'git_config_entry
instance Show C'git_config_entry
instance Eq C'git_config_backend
instance Show C'git_config_backend
instance Eq C'git_cvar_map
instance Show C'git_cvar_map
instance Storable C'git_cvar_map
instance Storable C'git_config_backend
instance Storable C'git_config_entry

module Bindings.Libgit2.Ignore
c'git_ignore_add_rule :: Ptr C'git_repository -> CString -> IO (CInt)
c'git_ignore_clear_internal_rules :: Ptr C'git_repository -> IO (CInt)
p'git_ignore_add_rule :: FunPtr (Ptr C'git_repository -> CString -> IO (CInt))
c'git_ignore_path_is_ignored :: Ptr CInt -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_ignore_clear_internal_rules :: FunPtr (Ptr C'git_repository -> IO (CInt))
p'git_ignore_path_is_ignored :: FunPtr (Ptr CInt -> Ptr C'git_repository -> CString -> IO (CInt))

module Bindings.Libgit2.Oid
data C'git_oid
C'git_oid :: [CUChar] -> C'git_oid
c'git_oid'id :: C'git_oid -> [CUChar]
c'git_oid_fromstr :: Ptr C'git_oid -> CString -> IO (CInt)
c'git_oid_fromstrp :: Ptr C'git_oid -> CString -> IO (CInt)
c'git_oid_fromstrn :: Ptr C'git_oid -> CString -> CSize -> IO (CInt)
p'git_oid_fromstr :: FunPtr (Ptr C'git_oid -> CString -> IO (CInt))
p'git_oid'id :: Ptr (C'git_oid) -> Ptr (CUChar)
c'git_oid_fromraw :: Ptr C'git_oid -> Ptr CUChar -> IO ()
p'git_oid_fromstrp :: FunPtr (Ptr C'git_oid -> CString -> IO (CInt))
c'git_oid_fmt :: CString -> Ptr C'git_oid -> IO ()
p'git_oid_fromstrn :: FunPtr (Ptr C'git_oid -> CString -> CSize -> IO (CInt))
c'git_oid_pathfmt :: CString -> Ptr C'git_oid -> IO ()
p'git_oid_fromraw :: FunPtr (Ptr C'git_oid -> Ptr CUChar -> IO ())
c'git_oid_allocfmt :: Ptr C'git_oid -> IO (CString)
p'git_oid_fmt :: FunPtr (CString -> Ptr C'git_oid -> IO ())
p'git_oid_pathfmt :: FunPtr (CString -> Ptr C'git_oid -> IO ())
c'git_oid_tostr :: CString -> CSize -> Ptr C'git_oid -> IO (CString)
p'git_oid_allocfmt :: FunPtr (Ptr C'git_oid -> IO (CString))
c'git_oid_cpy :: Ptr C'git_oid -> Ptr C'git_oid -> IO ()
c'git_oid_cmp :: Ptr C'git_oid -> Ptr C'git_oid -> IO (CInt)
p'git_oid_tostr :: FunPtr (CString -> CSize -> Ptr C'git_oid -> IO (CString))
c'git_oid_equal :: Ptr C'git_oid -> Ptr C'git_oid -> IO (CInt)
p'git_oid_cpy :: FunPtr (Ptr C'git_oid -> Ptr C'git_oid -> IO ())
c'git_oid_ncmp :: Ptr C'git_oid -> Ptr C'git_oid -> CSize -> IO (CInt)
c'git_oid_streq :: Ptr C'git_oid -> CString -> IO (CInt)
c'git_oid_iszero :: Ptr C'git_oid -> IO (CInt)
p'git_oid_ncmp :: FunPtr (Ptr C'git_oid -> Ptr C'git_oid -> CSize -> IO (CInt))
p'git_oid_streq :: FunPtr (Ptr C'git_oid -> CString -> IO (CInt))
data C'git_oid_shorten
C'git_oid_shorten :: C'git_oid_shorten
p'git_oid_iszero :: FunPtr (Ptr C'git_oid -> IO (CInt))
c'git_oid_shorten_new :: CSize -> IO (Ptr C'git_oid_shorten)
c'git_oid_shorten_add :: Ptr C'git_oid_shorten -> CString -> IO (CInt)
c'git_oid_shorten_free :: Ptr C'git_oid_shorten -> IO ()
p'git_oid_shorten_new :: FunPtr (CSize -> IO (Ptr C'git_oid_shorten))
p'git_oid_shorten_add :: FunPtr (Ptr C'git_oid_shorten -> CString -> IO (CInt))
p'git_oid_shorten_free :: FunPtr (Ptr C'git_oid_shorten -> IO ())
instance Eq C'git_oid
instance Show C'git_oid
instance Storable C'git_oid

module Bindings.Libgit2.Graph
c'git_graph_ahead_behind :: Ptr CSize -> Ptr CSize -> Ptr C'git_repository -> Ptr C'git_oid -> Ptr C'git_oid -> IO (CInt)
p'git_graph_ahead_behind :: FunPtr (Ptr CSize -> Ptr CSize -> Ptr C'git_repository -> Ptr C'git_oid -> Ptr C'git_oid -> IO (CInt))

module Bindings.Libgit2.Indexer
data C'git_transfer_progress
C'git_transfer_progress :: CUInt -> CUInt -> CUInt -> CSize -> C'git_transfer_progress
c'git_transfer_progress'total_objects :: C'git_transfer_progress -> CUInt
c'git_transfer_progress'indexed_objects :: C'git_transfer_progress -> CUInt
c'git_transfer_progress'received_objects :: C'git_transfer_progress -> CUInt
c'git_transfer_progress'received_bytes :: C'git_transfer_progress -> CSize
type C'git_transfer_progress_callback = FunPtr (Ptr (C'git_transfer_progress) -> Ptr () -> IO CInt)
mk'git_transfer_progress_callback :: (Ptr (C'git_transfer_progress) -> Ptr () -> IO CInt) -> IO C'git_transfer_progress_callback
data C'git_indexer_stream
C'git_indexer_stream :: C'git_indexer_stream
mK'git_transfer_progress_callback :: C'git_transfer_progress_callback -> (Ptr (C'git_transfer_progress) -> Ptr () -> IO CInt)
c'git_indexer_stream_new :: Ptr (Ptr C'git_indexer_stream) -> CString -> C'git_transfer_progress_callback -> Ptr () -> IO (CInt)
p'git_transfer_progress'total_objects :: Ptr (C'git_transfer_progress) -> Ptr (CUInt)
c'git_indexer_stream_add :: Ptr C'git_indexer_stream -> Ptr () -> CSize -> Ptr C'git_transfer_progress -> IO (CInt)
c'git_indexer_stream_finalize :: Ptr C'git_indexer_stream -> Ptr C'git_transfer_progress -> IO (CInt)
p'git_indexer_stream_new :: FunPtr (Ptr (Ptr C'git_indexer_stream) -> CString -> C'git_transfer_progress_callback -> Ptr () -> IO (CInt))
p'git_transfer_progress'indexed_objects :: Ptr (C'git_transfer_progress) -> Ptr (CUInt)
c'git_indexer_stream_hash :: Ptr C'git_indexer_stream -> IO (Ptr C'git_oid)
p'git_indexer_stream_add :: FunPtr (Ptr C'git_indexer_stream -> Ptr () -> CSize -> Ptr C'git_transfer_progress -> IO (CInt))
c'git_indexer_stream_free :: Ptr C'git_indexer_stream -> IO ()
p'git_indexer_stream_finalize :: FunPtr (Ptr C'git_indexer_stream -> Ptr C'git_transfer_progress -> IO (CInt))
p'git_transfer_progress'received_objects :: Ptr (C'git_transfer_progress) -> Ptr (CUInt)
p'git_indexer_stream_hash :: FunPtr (Ptr C'git_indexer_stream -> IO (Ptr C'git_oid))
p'git_indexer_stream_free :: FunPtr (Ptr C'git_indexer_stream -> IO ())
p'git_transfer_progress'received_bytes :: Ptr (C'git_transfer_progress) -> Ptr (CSize)
instance Eq C'git_transfer_progress
instance Show C'git_transfer_progress
instance Storable C'git_transfer_progress

module Bindings.Libgit2.Index
data C'git_index_time
C'git_index_time :: CLong -> CUInt -> C'git_index_time
c'git_index_time'seconds :: C'git_index_time -> CLong
c'git_index_time'nanoseconds :: C'git_index_time -> CUInt
p'git_index_time'seconds :: Ptr (C'git_index_time) -> Ptr (CLong)
p'git_index_time'nanoseconds :: Ptr (C'git_index_time) -> Ptr (CUInt)
data C'git_index_entry
C'git_index_entry :: C'git_index_time -> C'git_index_time -> CUInt -> CUInt -> CUInt -> CUInt -> CUInt -> CLong -> C'git_oid -> CUShort -> CUShort -> CString -> C'git_index_entry
c'git_index_entry'ctime :: C'git_index_entry -> C'git_index_time
c'git_index_entry'mtime :: C'git_index_entry -> C'git_index_time
c'git_index_entry'dev :: C'git_index_entry -> CUInt
c'git_index_entry'ino :: C'git_index_entry -> CUInt
c'git_index_entry'mode :: C'git_index_entry -> CUInt
c'git_index_entry'uid :: C'git_index_entry -> CUInt
c'git_index_entry'gid :: C'git_index_entry -> CUInt
c'git_index_entry'file_size :: C'git_index_entry -> CLong
c'git_index_entry'oid :: C'git_index_entry -> C'git_oid
c'git_index_entry'flags :: C'git_index_entry -> CUShort
c'git_index_entry'flags_extended :: C'git_index_entry -> CUShort
c'git_index_entry'path :: C'git_index_entry -> CString
data C'git_index_reuc_entry
C'git_index_reuc_entry :: [CUInt] -> [C'git_oid] -> CString -> C'git_index_reuc_entry
c'git_index_reuc_entry'mode :: C'git_index_reuc_entry -> [CUInt]
c'git_index_reuc_entry'oid :: C'git_index_reuc_entry -> [C'git_oid]
c'git_index_reuc_entry'path :: C'git_index_reuc_entry -> CString
p'git_index_reuc_entry'mode :: Ptr (C'git_index_reuc_entry) -> Ptr (CUInt)
p'git_index_entry'ctime :: Ptr (C'git_index_entry) -> Ptr (C'git_index_time)
c'GIT_INDEXCAP_IGNORE_CASE :: Num a => a
p'git_index_reuc_entry'oid :: Ptr (C'git_index_reuc_entry) -> Ptr (C'git_oid)
c'GIT_INDEXCAP_NO_FILEMODE :: Num a => a
p'git_index_entry'mtime :: Ptr (C'git_index_entry) -> Ptr (C'git_index_time)
c'GIT_INDEXCAP_NO_SYMLINKS :: Num a => a
p'git_index_reuc_entry'path :: Ptr (C'git_index_reuc_entry) -> Ptr (CString)
c'GIT_INDEXCAP_FROM_OWNER :: Num a => a
p'git_index_entry'dev :: Ptr (C'git_index_entry) -> Ptr (CUInt)
c'git_index_open :: Ptr (Ptr C'git_index) -> CString -> IO (CInt)
c'git_index_new :: Ptr (Ptr C'git_index) -> IO (CInt)
p'git_index_entry'ino :: Ptr (C'git_index_entry) -> Ptr (CUInt)
c'git_index_free :: Ptr C'git_index -> IO ()
p'git_index_open :: FunPtr (Ptr (Ptr C'git_index) -> CString -> IO (CInt))
p'git_index_new :: FunPtr (Ptr (Ptr C'git_index) -> IO (CInt))
c'git_index_owner :: Ptr C'git_index -> IO (Ptr C'git_repository)
p'git_index_entry'mode :: Ptr (C'git_index_entry) -> Ptr (CUInt)
c'git_index_caps :: Ptr C'git_index -> IO (CUInt)
p'git_index_free :: FunPtr (Ptr C'git_index -> IO ())
c'git_index_set_caps :: Ptr C'git_index -> CUInt -> IO (CInt)
p'git_index_owner :: FunPtr (Ptr C'git_index -> IO (Ptr C'git_repository))
p'git_index_entry'uid :: Ptr (C'git_index_entry) -> Ptr (CUInt)
c'git_index_read :: Ptr C'git_index -> IO (CInt)
p'git_index_caps :: FunPtr (Ptr C'git_index -> IO (CUInt))
c'git_index_write :: Ptr C'git_index -> IO (CInt)
p'git_index_set_caps :: FunPtr (Ptr C'git_index -> CUInt -> IO (CInt))
p'git_index_entry'gid :: Ptr (C'git_index_entry) -> Ptr (CUInt)
p'git_index_read :: FunPtr (Ptr C'git_index -> IO (CInt))
c'git_index_read_tree :: Ptr C'git_index -> Ptr C'git_tree -> IO (CInt)
p'git_index_write :: FunPtr (Ptr C'git_index -> IO (CInt))
c'git_index_write_tree :: Ptr C'git_oid -> Ptr C'git_index -> IO (CInt)
p'git_index_entry'file_size :: Ptr (C'git_index_entry) -> Ptr (CLong)
p'git_index_read_tree :: FunPtr (Ptr C'git_index -> Ptr C'git_tree -> IO (CInt))
c'git_index_write_tree_to :: Ptr C'git_oid -> Ptr C'git_index -> Ptr C'git_repository -> IO (CInt)
c'git_index_entrycount :: Ptr C'git_index -> IO (CSize)
p'git_index_write_tree :: FunPtr (Ptr C'git_oid -> Ptr C'git_index -> IO (CInt))
p'git_index_entry'oid :: Ptr (C'git_index_entry) -> Ptr (C'git_oid)
c'git_index_clear :: Ptr C'git_index -> IO ()
p'git_index_write_tree_to :: FunPtr (Ptr C'git_oid -> Ptr C'git_index -> Ptr C'git_repository -> IO (CInt))
p'git_index_entrycount :: FunPtr (Ptr C'git_index -> IO (CSize))
c'git_index_get_byindex :: Ptr C'git_index -> CSize -> IO (Ptr C'git_index_entry)
p'git_index_entry'flags :: Ptr (C'git_index_entry) -> Ptr (CUShort)
p'git_index_clear :: FunPtr (Ptr C'git_index -> IO ())
c'git_index_get_bypath :: Ptr C'git_index -> CString -> CInt -> IO (Ptr C'git_index_entry)
c'git_index_remove :: Ptr C'git_index -> CString -> CInt -> IO (CInt)
p'git_index_get_byindex :: FunPtr (Ptr C'git_index -> CSize -> IO (Ptr C'git_index_entry))
p'git_index_entry'flags_extended :: Ptr (C'git_index_entry) -> Ptr (CUShort)
c'git_index_remove_directory :: Ptr C'git_index -> CString -> CInt -> IO (CInt)
p'git_index_get_bypath :: FunPtr (Ptr C'git_index -> CString -> CInt -> IO (Ptr C'git_index_entry))
c'git_index_add :: Ptr C'git_index -> Ptr C'git_index_entry -> IO (CInt)
p'git_index_remove :: FunPtr (Ptr C'git_index -> CString -> CInt -> IO (CInt))
p'git_index_entry'path :: Ptr (C'git_index_entry) -> Ptr (CString)
c'git_index_entry_stage :: Ptr C'git_index_entry -> IO (CInt)
p'git_index_remove_directory :: FunPtr (Ptr C'git_index -> CString -> CInt -> IO (CInt))
c'git_index_add_bypath :: Ptr C'git_index -> CString -> IO (CInt)
p'git_index_add :: FunPtr (Ptr C'git_index -> Ptr C'git_index_entry -> IO (CInt))
c'git_index_remove_bypath :: Ptr C'git_index -> CString -> IO (CInt)
p'git_index_entry_stage :: FunPtr (Ptr C'git_index_entry -> IO (CInt))
p'git_index_add_bypath :: FunPtr (Ptr C'git_index -> CString -> IO (CInt))
c'git_index_find :: Ptr CSize -> Ptr C'git_index -> CString -> IO (CInt)
p'git_index_remove_bypath :: FunPtr (Ptr C'git_index -> CString -> IO (CInt))
c'git_index_conflict_add :: Ptr C'git_index -> Ptr C'git_index_entry -> Ptr C'git_index_entry -> Ptr C'git_index_entry -> IO (CInt)
p'git_index_find :: FunPtr (Ptr CSize -> Ptr C'git_index -> CString -> IO (CInt))
c'git_index_conflict_get :: Ptr (Ptr C'git_index_entry) -> Ptr (Ptr C'git_index_entry) -> Ptr (Ptr C'git_index_entry) -> Ptr C'git_index -> CString -> IO (CInt)
c'git_index_conflict_remove :: Ptr C'git_index -> CString -> IO (CInt)
p'git_index_conflict_add :: FunPtr (Ptr C'git_index -> Ptr C'git_index_entry -> Ptr C'git_index_entry -> Ptr C'git_index_entry -> IO (CInt))
c'git_index_conflict_cleanup :: Ptr C'git_index -> IO ()
p'git_index_conflict_get :: FunPtr (Ptr (Ptr C'git_index_entry) -> Ptr (Ptr C'git_index_entry) -> Ptr (Ptr C'git_index_entry) -> Ptr C'git_index -> CString -> IO (CInt))
c'git_index_has_conflicts :: Ptr C'git_index -> IO (CInt)
p'git_index_conflict_remove :: FunPtr (Ptr C'git_index -> CString -> IO (CInt))
c'git_index_reuc_entrycount :: Ptr C'git_index -> IO (CUInt)
p'git_index_conflict_cleanup :: FunPtr (Ptr C'git_index -> IO ())
p'git_index_has_conflicts :: FunPtr (Ptr C'git_index -> IO (CInt))
c'git_index_reuc_find :: Ptr CSize -> Ptr C'git_index -> CString -> IO (CInt)
p'git_index_reuc_entrycount :: FunPtr (Ptr C'git_index -> IO (CUInt))
c'git_index_reuc_get_bypath :: Ptr C'git_index -> CString -> IO (Ptr C'git_index_reuc_entry)
c'git_index_reuc_get_byindex :: Ptr C'git_index -> CSize -> IO (Ptr C'git_index_reuc_entry)
p'git_index_reuc_find :: FunPtr (Ptr CSize -> Ptr C'git_index -> CString -> IO (CInt))
p'git_index_reuc_get_bypath :: FunPtr (Ptr C'git_index -> CString -> IO (Ptr C'git_index_reuc_entry))
c'git_index_reuc_add :: Ptr C'git_index -> CString -> CInt -> Ptr C'git_oid -> CInt -> Ptr C'git_oid -> CInt -> Ptr C'git_oid -> IO (CInt)
c'git_index_reuc_remove :: Ptr C'git_index -> CSize -> IO (CInt)
p'git_index_reuc_get_byindex :: FunPtr (Ptr C'git_index -> CSize -> IO (Ptr C'git_index_reuc_entry))
c'git_index_reuc_clear :: Ptr C'git_index -> IO ()
p'git_index_reuc_add :: FunPtr (Ptr C'git_index -> CString -> CInt -> Ptr C'git_oid -> CInt -> Ptr C'git_oid -> CInt -> Ptr C'git_oid -> IO (CInt))
p'git_index_reuc_remove :: FunPtr (Ptr C'git_index -> CSize -> IO (CInt))
p'git_index_reuc_clear :: FunPtr (Ptr C'git_index -> IO ())
instance Eq C'git_index_time
instance Show C'git_index_time
instance Eq C'git_index_entry
instance Show C'git_index_entry
instance Eq C'git_index_reuc_entry
instance Show C'git_index_reuc_entry
instance Storable C'git_index_reuc_entry
instance Storable C'git_index_entry
instance Storable C'git_index_time

module Bindings.Libgit2.Merge
c'git_merge_base :: Ptr C'git_oid -> Ptr C'git_repository -> Ptr C'git_oid -> Ptr C'git_oid -> IO (CInt)
c'git_merge_base_many :: Ptr C'git_oid -> Ptr C'git_repository -> Ptr (C'git_oid) -> CSize -> IO (CInt)
p'git_merge_base :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> Ptr C'git_oid -> Ptr C'git_oid -> IO (CInt))
p'git_merge_base_many :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> Ptr (C'git_oid) -> CSize -> IO (CInt))

module Bindings.Libgit2.Net
type C'git_direction = CUInt
c'GIT_DIRECTION_FETCH :: Num a => a
c'GIT_DIRECTION_PUSH :: Num a => a
data C'git_remote_head
C'git_remote_head :: CInt -> C'git_oid -> C'git_oid -> CString -> C'git_remote_head
c'git_remote_head'local :: C'git_remote_head -> CInt
c'git_remote_head'oid :: C'git_remote_head -> C'git_oid
c'git_remote_head'loid :: C'git_remote_head -> C'git_oid
c'git_remote_head'name :: C'git_remote_head -> CString
type C'git_headlist_cb = FunPtr (Ptr (C'git_remote_head) -> Ptr () -> IO CInt)
mk'git_headlist_cb :: (Ptr (C'git_remote_head) -> Ptr () -> IO CInt) -> IO C'git_headlist_cb
mK'git_headlist_cb :: C'git_headlist_cb -> (Ptr (C'git_remote_head) -> Ptr () -> IO CInt)
p'git_remote_head'local :: Ptr (C'git_remote_head) -> Ptr (CInt)
p'git_remote_head'oid :: Ptr (C'git_remote_head) -> Ptr (C'git_oid)
p'git_remote_head'loid :: Ptr (C'git_remote_head) -> Ptr (C'git_oid)
p'git_remote_head'name :: Ptr (C'git_remote_head) -> Ptr (CString)
instance Eq C'git_remote_head
instance Show C'git_remote_head
instance Storable C'git_remote_head

module Bindings.Libgit2.Notes
type C'git_note_foreach_cb = FunPtr (Ptr (C'git_oid) -> Ptr (C'git_oid) -> Ptr () -> IO CInt)
mk'git_note_foreach_cb :: (Ptr (C'git_oid) -> Ptr (C'git_oid) -> Ptr () -> IO CInt) -> IO C'git_note_foreach_cb
data C'git_iterator
C'git_iterator :: C'git_iterator
type C'git_note_iterator = C'git_iterator
mK'git_note_foreach_cb :: C'git_note_foreach_cb -> (Ptr (C'git_oid) -> Ptr (C'git_oid) -> Ptr () -> IO CInt)
c'git_note_iterator_new :: Ptr (Ptr C'git_iterator) -> Ptr C'git_repository -> CString -> IO (CInt)
c'git_note_iterator_free :: Ptr C'git_iterator -> IO ()
c'git_note_next :: Ptr C'git_oid -> Ptr C'git_oid -> Ptr C'git_iterator -> IO (CInt)
p'git_note_iterator_new :: FunPtr (Ptr (Ptr C'git_iterator) -> Ptr C'git_repository -> CString -> IO (CInt))
p'git_note_iterator_free :: FunPtr (Ptr C'git_iterator -> IO ())
c'git_note_read :: Ptr (Ptr C'git_note) -> Ptr C'git_repository -> CString -> Ptr C'git_oid -> IO (CInt)
c'git_note_message :: Ptr C'git_note -> IO (CString)
p'git_note_next :: FunPtr (Ptr C'git_oid -> Ptr C'git_oid -> Ptr C'git_iterator -> IO (CInt))
c'git_note_oid :: Ptr C'git_note -> IO (Ptr C'git_oid)
p'git_note_read :: FunPtr (Ptr (Ptr C'git_note) -> Ptr C'git_repository -> CString -> Ptr C'git_oid -> IO (CInt))
p'git_note_message :: FunPtr (Ptr C'git_note -> IO (CString))
c'git_note_create :: Ptr C'git_oid -> Ptr C'git_repository -> Ptr C'git_signature -> Ptr C'git_signature -> CString -> Ptr C'git_oid -> CString -> CInt -> IO (CInt)
p'git_note_oid :: FunPtr (Ptr C'git_note -> IO (Ptr C'git_oid))
c'git_note_remove :: Ptr C'git_repository -> CString -> Ptr C'git_signature -> Ptr C'git_signature -> Ptr C'git_oid -> IO (CInt)
c'git_note_free :: Ptr C'git_note -> IO ()
p'git_note_create :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> Ptr C'git_signature -> Ptr C'git_signature -> CString -> Ptr C'git_oid -> CString -> CInt -> IO (CInt))
c'git_note_default_ref :: Ptr (CString) -> Ptr C'git_repository -> IO (CInt)
p'git_note_remove :: FunPtr (Ptr C'git_repository -> CString -> Ptr C'git_signature -> Ptr C'git_signature -> Ptr C'git_oid -> IO (CInt))
p'git_note_free :: FunPtr (Ptr C'git_note -> IO ())
c'git_note_foreach :: Ptr C'git_repository -> CString -> C'git_note_foreach_cb -> Ptr () -> IO (CInt)
p'git_note_default_ref :: FunPtr (Ptr (CString) -> Ptr C'git_repository -> IO (CInt))
p'git_note_foreach :: FunPtr (Ptr C'git_repository -> CString -> C'git_note_foreach_cb -> Ptr () -> IO (CInt))

module Bindings.Libgit2.Object
c'git_object_lookup :: Ptr (Ptr C'git_object) -> Ptr C'git_repository -> Ptr C'git_oid -> C'git_otype -> IO (CInt)
c'git_object_lookup_prefix :: Ptr (Ptr C'git_object) -> Ptr C'git_repository -> Ptr C'git_oid -> CSize -> C'git_otype -> IO (CInt)
c'git_object_id :: Ptr C'git_object -> IO (Ptr C'git_oid)
p'git_object_lookup :: FunPtr (Ptr (Ptr C'git_object) -> Ptr C'git_repository -> Ptr C'git_oid -> C'git_otype -> IO (CInt))
c'git_object_type :: Ptr C'git_object -> IO (C'git_otype)
p'git_object_lookup_prefix :: FunPtr (Ptr (Ptr C'git_object) -> Ptr C'git_repository -> Ptr C'git_oid -> CSize -> C'git_otype -> IO (CInt))
c'git_object_owner :: Ptr C'git_object -> IO (Ptr C'git_repository)
p'git_object_id :: FunPtr (Ptr C'git_object -> IO (Ptr C'git_oid))
c'git_object_free :: Ptr C'git_object -> IO ()
p'git_object_type :: FunPtr (Ptr C'git_object -> IO (C'git_otype))
c'git_object_type2string :: C'git_otype -> IO (CString)
p'git_object_owner :: FunPtr (Ptr C'git_object -> IO (Ptr C'git_repository))
c'git_object_string2type :: CString -> IO (C'git_otype)
p'git_object_free :: FunPtr (Ptr C'git_object -> IO ())
c'git_object_typeisloose :: C'git_otype -> IO (CInt)
p'git_object_type2string :: FunPtr (C'git_otype -> IO (CString))
c'git_object__size :: C'git_otype -> IO (CSize)
p'git_object_string2type :: FunPtr (CString -> IO (C'git_otype))
p'git_object_typeisloose :: FunPtr (C'git_otype -> IO (CInt))
c'git_object_peel :: Ptr (Ptr C'git_object) -> Ptr C'git_object -> C'git_otype -> IO (CInt)
p'git_object__size :: FunPtr (C'git_otype -> IO (CSize))
c'git_object_dup :: Ptr (Ptr C'git_object) -> Ptr C'git_object -> IO (CInt)
p'git_object_peel :: FunPtr (Ptr (Ptr C'git_object) -> Ptr C'git_object -> C'git_otype -> IO (CInt))
p'git_object_dup :: FunPtr (Ptr (Ptr C'git_object) -> Ptr C'git_object -> IO (CInt))

module Bindings.Libgit2.OdbBackend
type C'git_odb_foreach_cb = FunPtr (Ptr (C'git_oid) -> Ptr () -> IO CInt)
mk'git_odb_foreach_cb :: (Ptr (C'git_oid) -> Ptr () -> IO CInt) -> IO C'git_odb_foreach_cb
mK'git_odb_foreach_cb :: C'git_odb_foreach_cb -> (Ptr (C'git_oid) -> Ptr () -> IO CInt)
type C'git_odb_backend_read_callback = FunPtr (Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt)
type C'git_odb_backend_read_prefix_callback = FunPtr (Ptr C'git_oid -> Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> CSize -> IO CInt)
mk'git_odb_backend_read_callback :: (Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt) -> IO C'git_odb_backend_read_callback
type C'git_odb_backend_read_header_callback = FunPtr (Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt)
mk'git_odb_backend_read_prefix_callback :: (Ptr C'git_oid -> Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> CSize -> IO CInt) -> IO C'git_odb_backend_read_prefix_callback
type C'git_odb_backend_write_callback = FunPtr (Ptr C'git_oid -> Ptr C'git_odb_backend -> Ptr () -> CSize -> C'git_otype -> IO CInt)
mk'git_odb_backend_read_header_callback :: (Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt) -> IO C'git_odb_backend_read_header_callback
mK'git_odb_backend_read_callback :: C'git_odb_backend_read_callback -> (Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt)
type C'git_odb_backend_writestream_callback = FunPtr (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> CSize -> C'git_otype -> IO CInt)
mk'git_odb_backend_write_callback :: (Ptr C'git_oid -> Ptr C'git_odb_backend -> Ptr () -> CSize -> C'git_otype -> IO CInt) -> IO C'git_odb_backend_write_callback
mK'git_odb_backend_read_prefix_callback :: C'git_odb_backend_read_prefix_callback -> (Ptr C'git_oid -> Ptr (Ptr ()) -> Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> CSize -> IO CInt)
type C'git_odb_backend_readstream_callback = FunPtr (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt)
mK'git_odb_backend_read_header_callback :: C'git_odb_backend_read_header_callback -> (Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt)
mk'git_odb_backend_writestream_callback :: (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> CSize -> C'git_otype -> IO CInt) -> IO C'git_odb_backend_writestream_callback
type C'git_odb_backend_exists_callback = FunPtr (Ptr C'git_odb_backend -> Ptr C'git_oid -> CInt -> IO CInt)
mK'git_odb_backend_write_callback :: C'git_odb_backend_write_callback -> (Ptr C'git_oid -> Ptr C'git_odb_backend -> Ptr () -> CSize -> C'git_otype -> IO CInt)
mk'git_odb_backend_readstream_callback :: (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt) -> IO C'git_odb_backend_readstream_callback
type C'git_odb_backend_refresh_callback = FunPtr (Ptr C'git_odb_backend -> IO CInt)
mk'git_odb_backend_exists_callback :: (Ptr C'git_odb_backend -> Ptr C'git_oid -> CInt -> IO CInt) -> IO C'git_odb_backend_exists_callback
mK'git_odb_backend_writestream_callback :: C'git_odb_backend_writestream_callback -> (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> CSize -> C'git_otype -> IO CInt)
type C'git_odb_backend_foreach_callback = FunPtr (Ptr C'git_odb_backend -> C'git_odb_foreach_cb -> Ptr () -> IO CInt)
mk'git_odb_backend_refresh_callback :: (Ptr C'git_odb_backend -> IO CInt) -> IO C'git_odb_backend_refresh_callback
mK'git_odb_backend_readstream_callback :: C'git_odb_backend_readstream_callback -> (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb_backend -> Ptr C'git_oid -> IO CInt)
type C'git_odb_backend_writepack_callback = FunPtr (Ptr (Ptr C'git_odb_writepack) -> Ptr C'git_odb_backend -> C'git_transfer_progress_callback -> Ptr () -> IO CInt)
mK'git_odb_backend_exists_callback :: C'git_odb_backend_exists_callback -> (Ptr C'git_odb_backend -> Ptr C'git_oid -> CInt -> IO CInt)
mk'git_odb_backend_foreach_callback :: (Ptr C'git_odb_backend -> C'git_odb_foreach_cb -> Ptr () -> IO CInt) -> IO C'git_odb_backend_foreach_callback
type C'git_odb_backend_free_callback = FunPtr (Ptr C'git_odb_backend -> IO ())
mK'git_odb_backend_refresh_callback :: C'git_odb_backend_refresh_callback -> (Ptr C'git_odb_backend -> IO CInt)
mk'git_odb_backend_writepack_callback :: (Ptr (Ptr C'git_odb_writepack) -> Ptr C'git_odb_backend -> C'git_transfer_progress_callback -> Ptr () -> IO CInt) -> IO C'git_odb_backend_writepack_callback
mk'git_odb_backend_free_callback :: (Ptr C'git_odb_backend -> IO ()) -> IO C'git_odb_backend_free_callback
mK'git_odb_backend_foreach_callback :: C'git_odb_backend_foreach_callback -> (Ptr C'git_odb_backend -> C'git_odb_foreach_cb -> Ptr () -> IO CInt)
mK'git_odb_backend_writepack_callback :: C'git_odb_backend_writepack_callback -> (Ptr (Ptr C'git_odb_writepack) -> Ptr C'git_odb_backend -> C'git_transfer_progress_callback -> Ptr () -> IO CInt)
mK'git_odb_backend_free_callback :: C'git_odb_backend_free_callback -> (Ptr C'git_odb_backend -> IO ())
data C'git_odb_backend
C'git_odb_backend :: CUInt -> Ptr C'git_odb -> C'git_odb_backend_read_callback -> C'git_odb_backend_read_prefix_callback -> C'git_odb_backend_read_header_callback -> C'git_odb_backend_write_callback -> C'git_odb_backend_writestream_callback -> C'git_odb_backend_readstream_callback -> C'git_odb_backend_exists_callback -> C'git_odb_backend_refresh_callback -> C'git_odb_backend_foreach_callback -> C'git_odb_backend_writepack_callback -> C'git_odb_backend_free_callback -> C'git_odb_backend
c'git_odb_backend'version :: C'git_odb_backend -> CUInt
c'git_odb_backend'odb :: C'git_odb_backend -> Ptr C'git_odb
c'git_odb_backend'read :: C'git_odb_backend -> C'git_odb_backend_read_callback
c'git_odb_backend'read_prefix :: C'git_odb_backend -> C'git_odb_backend_read_prefix_callback
c'git_odb_backend'read_header :: C'git_odb_backend -> C'git_odb_backend_read_header_callback
c'git_odb_backend'write :: C'git_odb_backend -> C'git_odb_backend_write_callback
c'git_odb_backend'writestream :: C'git_odb_backend -> C'git_odb_backend_writestream_callback
c'git_odb_backend'readstream :: C'git_odb_backend -> C'git_odb_backend_readstream_callback
c'git_odb_backend'exists :: C'git_odb_backend -> C'git_odb_backend_exists_callback
c'git_odb_backend'refresh :: C'git_odb_backend -> C'git_odb_backend_refresh_callback
c'git_odb_backend'foreach :: C'git_odb_backend -> C'git_odb_backend_foreach_callback
c'git_odb_backend'writepack :: C'git_odb_backend -> C'git_odb_backend_writepack_callback
c'git_odb_backend'free :: C'git_odb_backend -> C'git_odb_backend_free_callback
c'GIT_STREAM_RDONLY :: Num a => a
c'GIT_STREAM_WRONLY :: Num a => a
c'GIT_STREAM_RW :: Num a => a
p'git_odb_backend'version :: Ptr (C'git_odb_backend) -> Ptr (CUInt)
p'git_odb_backend'odb :: Ptr (C'git_odb_backend) -> Ptr (Ptr C'git_odb)
p'git_odb_backend'read :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_read_callback)
type C'git_odb_stream_read_callback = FunPtr (Ptr C'git_odb_stream -> CString -> CSize -> IO CInt)
p'git_odb_backend'read_prefix :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_read_prefix_callback)
type C'git_odb_stream_write_callback = FunPtr (Ptr C'git_odb_stream -> CString -> CSize -> IO CInt)
mk'git_odb_stream_read_callback :: (Ptr C'git_odb_stream -> CString -> CSize -> IO CInt) -> IO C'git_odb_stream_read_callback
p'git_odb_backend'read_header :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_read_header_callback)
type C'git_odb_stream_finalize_write_callback = FunPtr (Ptr C'git_oid -> Ptr C'git_odb_stream -> IO CInt)
mk'git_odb_stream_write_callback :: (Ptr C'git_odb_stream -> CString -> CSize -> IO CInt) -> IO C'git_odb_stream_write_callback
type C'git_odb_stream_free_callback = FunPtr (Ptr C'git_odb_stream -> IO ())
mK'git_odb_stream_read_callback :: C'git_odb_stream_read_callback -> (Ptr C'git_odb_stream -> CString -> CSize -> IO CInt)
mk'git_odb_stream_finalize_write_callback :: (Ptr C'git_oid -> Ptr C'git_odb_stream -> IO CInt) -> IO C'git_odb_stream_finalize_write_callback
p'git_odb_backend'write :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_write_callback)
mk'git_odb_stream_free_callback :: (Ptr C'git_odb_stream -> IO ()) -> IO C'git_odb_stream_free_callback
mK'git_odb_stream_write_callback :: C'git_odb_stream_write_callback -> (Ptr C'git_odb_stream -> CString -> CSize -> IO CInt)
mK'git_odb_stream_finalize_write_callback :: C'git_odb_stream_finalize_write_callback -> (Ptr C'git_oid -> Ptr C'git_odb_stream -> IO CInt)
p'git_odb_backend'writestream :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_writestream_callback)
mK'git_odb_stream_free_callback :: C'git_odb_stream_free_callback -> (Ptr C'git_odb_stream -> IO ())
p'git_odb_backend'readstream :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_readstream_callback)
p'git_odb_backend'exists :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_exists_callback)
data C'git_odb_stream
C'git_odb_stream :: Ptr C'git_odb_backend -> CUInt -> C'git_odb_stream_read_callback -> C'git_odb_stream_write_callback -> C'git_odb_stream_finalize_write_callback -> C'git_odb_stream_free_callback -> C'git_odb_stream
c'git_odb_stream'backend :: C'git_odb_stream -> Ptr C'git_odb_backend
c'git_odb_stream'mode :: C'git_odb_stream -> CUInt
c'git_odb_stream'read :: C'git_odb_stream -> C'git_odb_stream_read_callback
c'git_odb_stream'write :: C'git_odb_stream -> C'git_odb_stream_write_callback
c'git_odb_stream'finalize_write :: C'git_odb_stream -> C'git_odb_stream_finalize_write_callback
c'git_odb_stream'free :: C'git_odb_stream -> C'git_odb_stream_free_callback
p'git_odb_backend'refresh :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_refresh_callback)
p'git_odb_backend'foreach :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_foreach_callback)
p'git_odb_backend'writepack :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_writepack_callback)
p'git_odb_backend'free :: Ptr (C'git_odb_backend) -> Ptr (C'git_odb_backend_free_callback)
p'git_odb_stream'backend :: Ptr (C'git_odb_stream) -> Ptr (Ptr C'git_odb_backend)
p'git_odb_stream'mode :: Ptr (C'git_odb_stream) -> Ptr (CUInt)
type C'git_odb_writepack_add_callback = FunPtr (Ptr C'git_odb_writepack -> Ptr () -> CSize -> Ptr C'git_transfer_progress -> IO CInt)
type C'git_odb_writepack_commit_callback = FunPtr (Ptr C'git_odb_writepack -> Ptr C'git_transfer_progress -> IO CInt)
mk'git_odb_writepack_add_callback :: (Ptr C'git_odb_writepack -> Ptr () -> CSize -> Ptr C'git_transfer_progress -> IO CInt) -> IO C'git_odb_writepack_add_callback
type C'git_odb_writepack_free_callback = FunPtr (Ptr C'git_odb_writepack -> IO ())
p'git_odb_stream'read :: Ptr (C'git_odb_stream) -> Ptr (C'git_odb_stream_read_callback)
mk'git_odb_writepack_commit_callback :: (Ptr C'git_odb_writepack -> Ptr C'git_transfer_progress -> IO CInt) -> IO C'git_odb_writepack_commit_callback
mk'git_odb_writepack_free_callback :: (Ptr C'git_odb_writepack -> IO ()) -> IO C'git_odb_writepack_free_callback
mK'git_odb_writepack_add_callback :: C'git_odb_writepack_add_callback -> (Ptr C'git_odb_writepack -> Ptr () -> CSize -> Ptr C'git_transfer_progress -> IO CInt)
p'git_odb_stream'write :: Ptr (C'git_odb_stream) -> Ptr (C'git_odb_stream_write_callback)
mK'git_odb_writepack_commit_callback :: C'git_odb_writepack_commit_callback -> (Ptr C'git_odb_writepack -> Ptr C'git_transfer_progress -> IO CInt)
mK'git_odb_writepack_free_callback :: C'git_odb_writepack_free_callback -> (Ptr C'git_odb_writepack -> IO ())
p'git_odb_stream'finalize_write :: Ptr (C'git_odb_stream) -> Ptr (C'git_odb_stream_finalize_write_callback)
p'git_odb_stream'free :: Ptr (C'git_odb_stream) -> Ptr (C'git_odb_stream_free_callback)
data C'git_odb_writepack
C'git_odb_writepack :: Ptr C'git_odb_backend -> C'git_odb_writepack_add_callback -> C'git_odb_writepack_commit_callback -> C'git_odb_writepack_free_callback -> C'git_odb_writepack
c'git_odb_writepack'backend :: C'git_odb_writepack -> Ptr C'git_odb_backend
c'git_odb_writepack'add :: C'git_odb_writepack -> C'git_odb_writepack_add_callback
c'git_odb_writepack'commit :: C'git_odb_writepack -> C'git_odb_writepack_commit_callback
c'git_odb_writepack'free :: C'git_odb_writepack -> C'git_odb_writepack_free_callback
c'git_odb_backend_malloc :: Ptr C'git_odb_backend -> CSize -> IO (Ptr ())
c'git_odb_backend_pack :: Ptr (Ptr C'git_odb_backend) -> CString -> IO (CInt)
p'git_odb_backend_malloc :: FunPtr (Ptr C'git_odb_backend -> CSize -> IO (Ptr ()))
c'git_odb_backend_loose :: Ptr (Ptr C'git_odb_backend) -> CString -> CInt -> CInt -> IO (CInt)
c'git_odb_backend_one_pack :: Ptr (Ptr C'git_odb_backend) -> CString -> IO (CInt)
p'git_odb_backend_pack :: FunPtr (Ptr (Ptr C'git_odb_backend) -> CString -> IO (CInt))
p'git_odb_backend_loose :: FunPtr (Ptr (Ptr C'git_odb_backend) -> CString -> CInt -> CInt -> IO (CInt))
p'git_odb_backend_one_pack :: FunPtr (Ptr (Ptr C'git_odb_backend) -> CString -> IO (CInt))
p'git_odb_writepack'backend :: Ptr (C'git_odb_writepack) -> Ptr (Ptr C'git_odb_backend)
p'git_odb_writepack'add :: Ptr (C'git_odb_writepack) -> Ptr (C'git_odb_writepack_add_callback)
p'git_odb_writepack'commit :: Ptr (C'git_odb_writepack) -> Ptr (C'git_odb_writepack_commit_callback)
p'git_odb_writepack'free :: Ptr (C'git_odb_writepack) -> Ptr (C'git_odb_writepack_free_callback)
instance Eq C'git_odb_writepack
instance Show C'git_odb_writepack
instance Eq C'git_odb_backend
instance Show C'git_odb_backend
instance Eq C'git_odb_stream
instance Show C'git_odb_stream
instance Storable C'git_odb_writepack
instance Storable C'git_odb_stream
instance Storable C'git_odb_backend

module Bindings.Libgit2.Odb
c'git_odb_new :: Ptr (Ptr C'git_odb) -> IO (CInt)
c'git_odb_open :: Ptr (Ptr C'git_odb) -> CString -> IO (CInt)
p'git_odb_new :: FunPtr (Ptr (Ptr C'git_odb) -> IO (CInt))
c'git_odb_add_backend :: Ptr C'git_odb -> Ptr C'git_odb_backend -> CInt -> IO (CInt)
p'git_odb_open :: FunPtr (Ptr (Ptr C'git_odb) -> CString -> IO (CInt))
c'git_odb_add_alternate :: Ptr C'git_odb -> Ptr C'git_odb_backend -> CInt -> IO (CInt)
c'git_odb_add_disk_alternate :: Ptr C'git_odb -> CString -> IO (CInt)
p'git_odb_add_backend :: FunPtr (Ptr C'git_odb -> Ptr C'git_odb_backend -> CInt -> IO (CInt))
c'git_odb_free :: Ptr C'git_odb -> IO ()
p'git_odb_add_alternate :: FunPtr (Ptr C'git_odb -> Ptr C'git_odb_backend -> CInt -> IO (CInt))
p'git_odb_add_disk_alternate :: FunPtr (Ptr C'git_odb -> CString -> IO (CInt))
c'git_odb_read :: Ptr (Ptr C'git_odb_object) -> Ptr C'git_odb -> Ptr C'git_oid -> IO (CInt)
p'git_odb_free :: FunPtr (Ptr C'git_odb -> IO ())
c'git_odb_read_prefix :: Ptr (Ptr C'git_odb_object) -> Ptr C'git_odb -> Ptr C'git_oid -> CSize -> IO (CInt)
c'git_odb_read_header :: Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb -> Ptr C'git_oid -> IO (CInt)
p'git_odb_read :: FunPtr (Ptr (Ptr C'git_odb_object) -> Ptr C'git_odb -> Ptr C'git_oid -> IO (CInt))
c'git_odb_exists :: Ptr C'git_odb -> Ptr C'git_oid -> CInt -> IO (CInt)
p'git_odb_read_prefix :: FunPtr (Ptr (Ptr C'git_odb_object) -> Ptr C'git_odb -> Ptr C'git_oid -> CSize -> IO (CInt))
c'git_odb_refresh :: Ptr C'git_odb -> IO (CInt)
p'git_odb_read_header :: FunPtr (Ptr CSize -> Ptr C'git_otype -> Ptr C'git_odb -> Ptr C'git_oid -> IO (CInt))
c'git_odb_foreach :: Ptr C'git_odb -> C'git_odb_foreach_cb -> Ptr () -> IO (CInt)
p'git_odb_exists :: FunPtr (Ptr C'git_odb -> Ptr C'git_oid -> CInt -> IO (CInt))
p'git_odb_refresh :: FunPtr (Ptr C'git_odb -> IO (CInt))
c'git_odb_write :: Ptr C'git_oid -> Ptr C'git_odb -> Ptr () -> CSize -> C'git_otype -> IO (CInt)
p'git_odb_foreach :: FunPtr (Ptr C'git_odb -> C'git_odb_foreach_cb -> Ptr () -> IO (CInt))
c'git_odb_open_wstream :: Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb -> CSize -> C'git_otype -> IO (CInt)
c'git_odb_open_rstream :: Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb -> Ptr C'git_oid -> IO (CInt)
p'git_odb_write :: FunPtr (Ptr C'git_oid -> Ptr C'git_odb -> Ptr () -> CSize -> C'git_otype -> IO (CInt))
p'git_odb_open_wstream :: FunPtr (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb -> CSize -> C'git_otype -> IO (CInt))
c'git_odb_write_pack :: Ptr (Ptr C'git_odb_writepack) -> Ptr C'git_odb -> C'git_transfer_progress_callback -> Ptr () -> IO (CInt)
c'git_odb_hash :: Ptr C'git_oid -> Ptr () -> CSize -> C'git_otype -> IO (CInt)
p'git_odb_open_rstream :: FunPtr (Ptr (Ptr C'git_odb_stream) -> Ptr C'git_odb -> Ptr C'git_oid -> IO (CInt))
c'git_odb_hashfile :: Ptr C'git_oid -> CString -> C'git_otype -> IO (CInt)
p'git_odb_write_pack :: FunPtr (Ptr (Ptr C'git_odb_writepack) -> Ptr C'git_odb -> C'git_transfer_progress_callback -> Ptr () -> IO (CInt))
c'git_odb_object_free :: Ptr C'git_odb_object -> IO ()
p'git_odb_hash :: FunPtr (Ptr C'git_oid -> Ptr () -> CSize -> C'git_otype -> IO (CInt))
c'git_odb_object_id :: Ptr C'git_odb_object -> IO (Ptr C'git_oid)
p'git_odb_hashfile :: FunPtr (Ptr C'git_oid -> CString -> C'git_otype -> IO (CInt))
c'git_odb_object_data :: Ptr C'git_odb_object -> IO (Ptr ())
p'git_odb_object_free :: FunPtr (Ptr C'git_odb_object -> IO ())
c'git_odb_object_size :: Ptr C'git_odb_object -> IO (CSize)
p'git_odb_object_id :: FunPtr (Ptr C'git_odb_object -> IO (Ptr C'git_oid))
c'git_odb_object_type :: Ptr C'git_odb_object -> IO (C'git_otype)
p'git_odb_object_data :: FunPtr (Ptr C'git_odb_object -> IO (Ptr ()))
p'git_odb_object_size :: FunPtr (Ptr C'git_odb_object -> IO (CSize))
p'git_odb_object_type :: FunPtr (Ptr C'git_odb_object -> IO (C'git_otype))

module Bindings.Libgit2.Pack
c'git_packbuilder_new :: Ptr (Ptr C'git_packbuilder) -> Ptr C'git_repository -> IO (CInt)
c'git_packbuilder_set_threads :: Ptr C'git_packbuilder -> CUInt -> IO (CUInt)
c'git_packbuilder_insert :: Ptr C'git_packbuilder -> Ptr C'git_oid -> CString -> IO (CInt)
p'git_packbuilder_new :: FunPtr (Ptr (Ptr C'git_packbuilder) -> Ptr C'git_repository -> IO (CInt))
c'git_packbuilder_insert_tree :: Ptr C'git_packbuilder -> Ptr C'git_oid -> IO (CInt)
p'git_packbuilder_set_threads :: FunPtr (Ptr C'git_packbuilder -> CUInt -> IO (CUInt))
c'git_packbuilder_write :: Ptr C'git_packbuilder -> CString -> IO (CInt)
p'git_packbuilder_insert :: FunPtr (Ptr C'git_packbuilder -> Ptr C'git_oid -> CString -> IO (CInt))
p'git_packbuilder_insert_tree :: FunPtr (Ptr C'git_packbuilder -> Ptr C'git_oid -> IO (CInt))
p'git_packbuilder_write :: FunPtr (Ptr C'git_packbuilder -> CString -> IO (CInt))
type C'git_packbuilder_foreach_cb = FunPtr (Ptr () -> CSize -> Ptr () -> IO CInt)
mk'git_packbuilder_foreach_cb :: (Ptr () -> CSize -> Ptr () -> IO CInt) -> IO C'git_packbuilder_foreach_cb
c'git_packbuilder_foreach :: Ptr C'git_packbuilder -> C'git_packbuilder_foreach_cb -> Ptr () -> IO (CInt)
c'git_packbuilder_object_count :: Ptr C'git_packbuilder -> IO (CUInt)
c'git_packbuilder_written :: Ptr C'git_packbuilder -> IO (CUInt)
mK'git_packbuilder_foreach_cb :: C'git_packbuilder_foreach_cb -> (Ptr () -> CSize -> Ptr () -> IO CInt)
p'git_packbuilder_foreach :: FunPtr (Ptr C'git_packbuilder -> C'git_packbuilder_foreach_cb -> Ptr () -> IO (CInt))
c'git_packbuilder_free :: Ptr C'git_packbuilder -> IO ()
p'git_packbuilder_object_count :: FunPtr (Ptr C'git_packbuilder -> IO (CUInt))
p'git_packbuilder_written :: FunPtr (Ptr C'git_packbuilder -> IO (CUInt))
p'git_packbuilder_free :: FunPtr (Ptr C'git_packbuilder -> IO ())

module Bindings.Libgit2.Push
data C'git_push_options
C'git_push_options :: CUInt -> CUInt -> C'git_push_options
c'git_push_options'version :: C'git_push_options -> CUInt
c'git_push_options'pb_parallelism :: C'git_push_options -> CUInt
c'git_push_new :: Ptr (Ptr C'git_push) -> Ptr C'git_remote -> IO (CInt)
c'git_push_set_options :: Ptr C'git_push -> Ptr C'git_push_options -> IO (CInt)
c'git_push_add_refspec :: Ptr C'git_push -> CString -> IO (CInt)
p'git_push_new :: FunPtr (Ptr (Ptr C'git_push) -> Ptr C'git_remote -> IO (CInt))
c'git_push_update_tips :: Ptr C'git_push -> IO (CInt)
p'git_push_set_options :: FunPtr (Ptr C'git_push -> Ptr C'git_push_options -> IO (CInt))
p'git_push_options'version :: Ptr (C'git_push_options) -> Ptr (CUInt)
c'git_push_finish :: Ptr C'git_push -> IO (CInt)
p'git_push_add_refspec :: FunPtr (Ptr C'git_push -> CString -> IO (CInt))
c'git_push_unpack_ok :: Ptr C'git_push -> IO (CInt)
p'git_push_update_tips :: FunPtr (Ptr C'git_push -> IO (CInt))
p'git_push_options'pb_parallelism :: Ptr (C'git_push_options) -> Ptr (CUInt)
p'git_push_finish :: FunPtr (Ptr C'git_push -> IO (CInt))
c'git_push_status_foreach :: Ptr C'git_push -> FunPtr (CString -> CString -> Ptr () -> CInt) -> Ptr () -> IO (CInt)
c'git_push_free :: Ptr C'git_push -> IO ()
p'git_push_unpack_ok :: FunPtr (Ptr C'git_push -> IO (CInt))
p'git_push_status_foreach :: FunPtr (Ptr C'git_push -> FunPtr (CString -> CString -> Ptr () -> CInt) -> Ptr () -> IO (CInt))
p'git_push_free :: FunPtr (Ptr C'git_push -> IO ())
instance Eq C'git_push_options
instance Show C'git_push_options
instance Storable C'git_push_options

module Bindings.Libgit2.Reflog
c'git_reflog_read :: Ptr (Ptr C'git_reflog) -> Ptr C'git_reference -> IO (CInt)
c'git_reflog_write :: Ptr C'git_reflog -> IO (CInt)
p'git_reflog_read :: FunPtr (Ptr (Ptr C'git_reflog) -> Ptr C'git_reference -> IO (CInt))
c'git_reflog_append :: Ptr C'git_reflog -> Ptr C'git_oid -> Ptr C'git_signature -> CString -> IO (CInt)
p'git_reflog_write :: FunPtr (Ptr C'git_reflog -> IO (CInt))
c'git_reflog_rename :: Ptr C'git_reference -> CString -> IO (CInt)
c'git_reflog_delete :: Ptr C'git_reference -> IO (CInt)
p'git_reflog_append :: FunPtr (Ptr C'git_reflog -> Ptr C'git_oid -> Ptr C'git_signature -> CString -> IO (CInt))
c'git_reflog_entrycount :: Ptr C'git_reflog -> IO (CSize)
p'git_reflog_rename :: FunPtr (Ptr C'git_reference -> CString -> IO (CInt))
p'git_reflog_delete :: FunPtr (Ptr C'git_reference -> IO (CInt))
c'git_reflog_entry_byindex :: Ptr C'git_reflog -> CSize -> IO (Ptr C'git_reflog_entry)
p'git_reflog_entrycount :: FunPtr (Ptr C'git_reflog -> IO (CSize))
c'git_reflog_drop :: Ptr C'git_reflog -> CSize -> CInt -> IO (CInt)
c'git_reflog_entry_id_old :: Ptr C'git_reflog_entry -> IO (Ptr C'git_oid)
p'git_reflog_entry_byindex :: FunPtr (Ptr C'git_reflog -> CSize -> IO (Ptr C'git_reflog_entry))
c'git_reflog_entry_id_new :: Ptr C'git_reflog_entry -> IO (Ptr C'git_oid)
p'git_reflog_drop :: FunPtr (Ptr C'git_reflog -> CSize -> CInt -> IO (CInt))
c'git_reflog_entry_committer :: Ptr C'git_reflog_entry -> IO (Ptr C'git_signature)
p'git_reflog_entry_id_old :: FunPtr (Ptr C'git_reflog_entry -> IO (Ptr C'git_oid))
c'git_reflog_entry_message :: Ptr C'git_reflog_entry -> IO (CString)
p'git_reflog_entry_id_new :: FunPtr (Ptr C'git_reflog_entry -> IO (Ptr C'git_oid))
c'git_reflog_free :: Ptr C'git_reflog -> IO ()
p'git_reflog_entry_committer :: FunPtr (Ptr C'git_reflog_entry -> IO (Ptr C'git_signature))
p'git_reflog_entry_message :: FunPtr (Ptr C'git_reflog_entry -> IO (CString))
p'git_reflog_free :: FunPtr (Ptr C'git_reflog -> IO ())

module Bindings.Libgit2.Refs
c'git_reference_lookup :: Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> IO (CInt)
c'git_reference_name_to_id :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_reference_lookup :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> IO (CInt))
c'git_reference_symbolic_create :: Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> CString -> CInt -> IO (CInt)
p'git_reference_name_to_id :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> IO (CInt))
c'git_reference_create :: Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> Ptr C'git_oid -> CInt -> IO (CInt)
c'git_reference_target :: Ptr C'git_reference -> IO (Ptr C'git_oid)
p'git_reference_symbolic_create :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> CString -> CInt -> IO (CInt))
c'git_reference_symbolic_target :: Ptr C'git_reference -> IO (CString)
p'git_reference_create :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> Ptr C'git_oid -> CInt -> IO (CInt))
c'git_reference_type :: Ptr C'git_reference -> IO (C'git_ref_t)
p'git_reference_target :: FunPtr (Ptr C'git_reference -> IO (Ptr C'git_oid))
c'git_reference_name :: Ptr C'git_reference -> IO (CString)
p'git_reference_symbolic_target :: FunPtr (Ptr C'git_reference -> IO (CString))
p'git_reference_type :: FunPtr (Ptr C'git_reference -> IO (C'git_ref_t))
c'git_reference_resolve :: Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> IO (CInt)
p'git_reference_name :: FunPtr (Ptr C'git_reference -> IO (CString))
c'git_reference_owner :: Ptr C'git_reference -> IO (Ptr C'git_repository)
p'git_reference_resolve :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> IO (CInt))
c'git_reference_symbolic_set_target :: Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> CString -> IO (CInt)
p'git_reference_owner :: FunPtr (Ptr C'git_reference -> IO (Ptr C'git_repository))
c'git_reference_set_target :: Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> Ptr C'git_oid -> IO (CInt)
c'git_reference_rename :: Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> CString -> CInt -> IO (CInt)
p'git_reference_symbolic_set_target :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> CString -> IO (CInt))
c'git_reference_delete :: Ptr C'git_reference -> IO (CInt)
p'git_reference_set_target :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> Ptr C'git_oid -> IO (CInt))
c'git_reference_list :: Ptr C'git_strarray -> Ptr C'git_repository -> CUInt -> IO (CInt)
p'git_reference_rename :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> CString -> CInt -> IO (CInt))
p'git_reference_delete :: FunPtr (Ptr C'git_reference -> IO (CInt))
p'git_reference_list :: FunPtr (Ptr C'git_strarray -> Ptr C'git_repository -> CUInt -> IO (CInt))
type C'git_reference_foreach_cb = FunPtr (CString -> Ptr () -> IO CInt)
mk'git_reference_foreach_cb :: (CString -> Ptr () -> IO CInt) -> IO C'git_reference_foreach_cb
c'git_reference_foreach :: Ptr C'git_repository -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO (CInt)
c'git_reference_free :: Ptr C'git_reference -> IO ()
c'git_reference_cmp :: Ptr C'git_reference -> Ptr C'git_reference -> IO (CInt)
mK'git_reference_foreach_cb :: C'git_reference_foreach_cb -> (CString -> Ptr () -> IO CInt)
p'git_reference_foreach :: FunPtr (Ptr C'git_repository -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO (CInt))
p'git_reference_free :: FunPtr (Ptr C'git_reference -> IO ())
c'git_reference_foreach_glob :: Ptr C'git_repository -> CString -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO (CInt)
c'git_reference_has_log :: Ptr C'git_reference -> IO (CInt)
p'git_reference_cmp :: FunPtr (Ptr C'git_reference -> Ptr C'git_reference -> IO (CInt))
c'git_reference_is_branch :: Ptr C'git_reference -> IO (CInt)
p'git_reference_foreach_glob :: FunPtr (Ptr C'git_repository -> CString -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO (CInt))
c'git_reference_is_remote :: Ptr C'git_reference -> IO (CInt)
p'git_reference_has_log :: FunPtr (Ptr C'git_reference -> IO (CInt))
p'git_reference_is_branch :: FunPtr (Ptr C'git_reference -> IO (CInt))
p'git_reference_is_remote :: FunPtr (Ptr C'git_reference -> IO (CInt))
type C'git_reference_normalize_t = CUInt
c'GIT_REF_FORMAT_NORMAL :: Num a => a
c'GIT_REF_FORMAT_ALLOW_ONELEVEL :: Num a => a
c'GIT_REF_FORMAT_REFSPEC_PATTERN :: Num a => a
c'git_reference_normalize_name :: CString -> CSize -> CString -> CUInt -> IO (CInt)
c'git_reference_peel :: Ptr (Ptr C'git_object) -> Ptr C'git_reference -> C'git_otype -> IO (CInt)
c'git_reference_is_valid_name :: CString -> IO (CInt)
p'git_reference_normalize_name :: FunPtr (CString -> CSize -> CString -> CUInt -> IO (CInt))
p'git_reference_peel :: FunPtr (Ptr (Ptr C'git_object) -> Ptr C'git_reference -> C'git_otype -> IO (CInt))
p'git_reference_is_valid_name :: FunPtr (CString -> IO (CInt))

module Bindings.Libgit2.RefdbBackend
type C'git_refdb_backend_exists_callback = FunPtr (Ptr CInt -> Ptr C'git_refdb_backend -> CString -> IO CInt)
type C'git_refdb_backend_lookup_callback = FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_refdb_backend -> CString -> IO CInt)
mk'git_refdb_backend_exists_callback :: (Ptr CInt -> Ptr C'git_refdb_backend -> CString -> IO CInt) -> IO C'git_refdb_backend_exists_callback
type C'git_refdb_backend_foreach_callback = FunPtr (Ptr C'git_refdb_backend -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO CInt)
mk'git_refdb_backend_lookup_callback :: (Ptr (Ptr C'git_reference) -> Ptr C'git_refdb_backend -> CString -> IO CInt) -> IO C'git_refdb_backend_lookup_callback
type C'git_refdb_backend_foreach_glob_callback = FunPtr (Ptr C'git_refdb_backend -> CString -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO CInt)
mK'git_refdb_backend_exists_callback :: C'git_refdb_backend_exists_callback -> (Ptr CInt -> Ptr C'git_refdb_backend -> CString -> IO CInt)
mk'git_refdb_backend_foreach_callback :: (Ptr C'git_refdb_backend -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO CInt) -> IO C'git_refdb_backend_foreach_callback
type C'git_refdb_backend_write_callback = FunPtr (Ptr C'git_refdb_backend -> Ptr C'git_reference -> IO CInt)
mK'git_refdb_backend_lookup_callback :: C'git_refdb_backend_lookup_callback -> (Ptr (Ptr C'git_reference) -> Ptr C'git_refdb_backend -> CString -> IO CInt)
mk'git_refdb_backend_foreach_glob_callback :: (Ptr C'git_refdb_backend -> CString -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO CInt) -> IO C'git_refdb_backend_foreach_glob_callback
type C'git_refdb_backend_delete_callback = FunPtr (Ptr C'git_refdb_backend -> Ptr C'git_reference -> IO CInt)
mk'git_refdb_backend_write_callback :: (Ptr C'git_refdb_backend -> Ptr C'git_reference -> IO CInt) -> IO C'git_refdb_backend_write_callback
mK'git_refdb_backend_foreach_callback :: C'git_refdb_backend_foreach_callback -> (Ptr C'git_refdb_backend -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO CInt)
type C'git_refdb_backend_compress_callback = FunPtr (Ptr C'git_refdb_backend -> IO CInt)
mk'git_refdb_backend_delete_callback :: (Ptr C'git_refdb_backend -> Ptr C'git_reference -> IO CInt) -> IO C'git_refdb_backend_delete_callback
mK'git_refdb_backend_foreach_glob_callback :: C'git_refdb_backend_foreach_glob_callback -> (Ptr C'git_refdb_backend -> CString -> CUInt -> C'git_reference_foreach_cb -> Ptr () -> IO CInt)
type C'git_refdb_backend_free_callback = FunPtr (Ptr C'git_refdb_backend -> IO ())
mk'git_refdb_backend_compress_callback :: (Ptr C'git_refdb_backend -> IO CInt) -> IO C'git_refdb_backend_compress_callback
mK'git_refdb_backend_write_callback :: C'git_refdb_backend_write_callback -> (Ptr C'git_refdb_backend -> Ptr C'git_reference -> IO CInt)
mk'git_refdb_backend_free_callback :: (Ptr C'git_refdb_backend -> IO ()) -> IO C'git_refdb_backend_free_callback
mK'git_refdb_backend_delete_callback :: C'git_refdb_backend_delete_callback -> (Ptr C'git_refdb_backend -> Ptr C'git_reference -> IO CInt)
mK'git_refdb_backend_compress_callback :: C'git_refdb_backend_compress_callback -> (Ptr C'git_refdb_backend -> IO CInt)
mK'git_refdb_backend_free_callback :: C'git_refdb_backend_free_callback -> (Ptr C'git_refdb_backend -> IO ())
data C'git_refdb_backend
C'git_refdb_backend :: CUInt -> C'git_refdb_backend_exists_callback -> C'git_refdb_backend_lookup_callback -> C'git_refdb_backend_foreach_callback -> C'git_refdb_backend_foreach_glob_callback -> C'git_refdb_backend_write_callback -> C'git_refdb_backend_delete_callback -> C'git_refdb_backend_compress_callback -> C'git_refdb_backend_free_callback -> C'git_refdb_backend
c'git_refdb_backend'version :: C'git_refdb_backend -> CUInt
c'git_refdb_backend'exists :: C'git_refdb_backend -> C'git_refdb_backend_exists_callback
c'git_refdb_backend'lookup :: C'git_refdb_backend -> C'git_refdb_backend_lookup_callback
c'git_refdb_backend'foreach :: C'git_refdb_backend -> C'git_refdb_backend_foreach_callback
c'git_refdb_backend'foreach_glob :: C'git_refdb_backend -> C'git_refdb_backend_foreach_glob_callback
c'git_refdb_backend'write :: C'git_refdb_backend -> C'git_refdb_backend_write_callback
c'git_refdb_backend'delete :: C'git_refdb_backend -> C'git_refdb_backend_delete_callback
c'git_refdb_backend'compress :: C'git_refdb_backend -> C'git_refdb_backend_compress_callback
c'git_refdb_backend'free :: C'git_refdb_backend -> C'git_refdb_backend_free_callback
c'git_refdb_backend_fs :: Ptr (Ptr C'git_refdb_backend) -> Ptr C'git_repository -> Ptr C'git_refdb -> IO (CInt)
p'git_refdb_backend_fs :: FunPtr (Ptr (Ptr C'git_refdb_backend) -> Ptr C'git_repository -> Ptr C'git_refdb -> IO (CInt))
p'git_refdb_backend'version :: Ptr (C'git_refdb_backend) -> Ptr (CUInt)
p'git_refdb_backend'exists :: Ptr (C'git_refdb_backend) -> Ptr (C'git_refdb_backend_exists_callback)
p'git_refdb_backend'lookup :: Ptr (C'git_refdb_backend) -> Ptr (C'git_refdb_backend_lookup_callback)
p'git_refdb_backend'foreach :: Ptr (C'git_refdb_backend) -> Ptr (C'git_refdb_backend_foreach_callback)
p'git_refdb_backend'foreach_glob :: Ptr (C'git_refdb_backend) -> Ptr (C'git_refdb_backend_foreach_glob_callback)
p'git_refdb_backend'write :: Ptr (C'git_refdb_backend) -> Ptr (C'git_refdb_backend_write_callback)
p'git_refdb_backend'delete :: Ptr (C'git_refdb_backend) -> Ptr (C'git_refdb_backend_delete_callback)
p'git_refdb_backend'compress :: Ptr (C'git_refdb_backend) -> Ptr (C'git_refdb_backend_compress_callback)
p'git_refdb_backend'free :: Ptr (C'git_refdb_backend) -> Ptr (C'git_refdb_backend_free_callback)
instance Eq C'git_refdb_backend
instance Show C'git_refdb_backend
instance Storable C'git_refdb_backend

module Bindings.Libgit2.Refdb
c'git_reference__alloc :: Ptr C'git_refdb -> CString -> Ptr C'git_oid -> CString -> IO (Ptr C'git_reference)
c'git_refdb_new :: Ptr (Ptr C'git_refdb) -> Ptr C'git_repository -> IO (CInt)
c'git_refdb_open :: Ptr (Ptr C'git_refdb) -> Ptr C'git_repository -> IO (CInt)
p'git_reference__alloc :: FunPtr (Ptr C'git_refdb -> CString -> Ptr C'git_oid -> CString -> IO (Ptr C'git_reference))
c'git_refdb_compress :: Ptr C'git_refdb -> IO (CInt)
p'git_refdb_new :: FunPtr (Ptr (Ptr C'git_refdb) -> Ptr C'git_repository -> IO (CInt))
c'git_refdb_free :: Ptr C'git_refdb -> IO ()
p'git_refdb_open :: FunPtr (Ptr (Ptr C'git_refdb) -> Ptr C'git_repository -> IO (CInt))
p'git_refdb_compress :: FunPtr (Ptr C'git_refdb -> IO (CInt))
c'git_refdb_set_backend :: Ptr C'git_refdb -> Ptr C'git_refdb_backend -> IO (CInt)
p'git_refdb_free :: FunPtr (Ptr C'git_refdb -> IO ())
p'git_refdb_set_backend :: FunPtr (Ptr C'git_refdb -> Ptr C'git_refdb_backend -> IO (CInt))

module Bindings.Libgit2.Refspec
c'git_refspec_src :: Ptr C'git_refspec -> IO (CString)
c'git_refspec_dst :: Ptr C'git_refspec -> IO (CString)
c'git_refspec_force :: Ptr C'git_refspec -> IO (CInt)
p'git_refspec_src :: FunPtr (Ptr C'git_refspec -> IO (CString))
c'git_refspec_src_matches :: Ptr C'git_refspec -> CString -> IO (CInt)
p'git_refspec_dst :: FunPtr (Ptr C'git_refspec -> IO (CString))
p'git_refspec_force :: FunPtr (Ptr C'git_refspec -> IO (CInt))
c'git_refspec_dst_matches :: Ptr C'git_refspec -> CString -> IO (CInt)
p'git_refspec_src_matches :: FunPtr (Ptr C'git_refspec -> CString -> IO (CInt))
c'git_refspec_transform :: CString -> CSize -> Ptr C'git_refspec -> CString -> IO (CInt)
p'git_refspec_dst_matches :: FunPtr (Ptr C'git_refspec -> CString -> IO (CInt))
c'git_refspec_rtransform :: CString -> CSize -> Ptr C'git_refspec -> CString -> IO (CInt)
p'git_refspec_transform :: FunPtr (CString -> CSize -> Ptr C'git_refspec -> CString -> IO (CInt))
p'git_refspec_rtransform :: FunPtr (CString -> CSize -> Ptr C'git_refspec -> CString -> IO (CInt))

module Bindings.Libgit2.Repository
c'git_repository_open :: Ptr (Ptr C'git_repository) -> CString -> IO (CInt)
c'git_repository_wrap_odb :: Ptr (Ptr C'git_repository) -> Ptr C'git_odb -> IO (CInt)
c'git_repository_discover :: CString -> CSize -> CString -> CInt -> CString -> IO (CInt)
p'git_repository_open :: FunPtr (Ptr (Ptr C'git_repository) -> CString -> IO (CInt))
p'git_repository_wrap_odb :: FunPtr (Ptr (Ptr C'git_repository) -> Ptr C'git_odb -> IO (CInt))
p'git_repository_discover :: FunPtr (CString -> CSize -> CString -> CInt -> CString -> IO (CInt))
type C'git_repository_open_flag_t = CUInt
c'GIT_REPOSITORY_OPEN_NO_SEARCH :: Num a => a
c'GIT_REPOSITORY_OPEN_CROSS_FS :: Num a => a
c'git_repository_open_ext :: Ptr (Ptr C'git_repository) -> CString -> CUInt -> CString -> IO (CInt)
c'git_repository_new :: Ptr (Ptr C'git_repository) -> IO (CInt)
c'git_repository_free :: Ptr C'git_repository -> IO ()
p'git_repository_open_ext :: FunPtr (Ptr (Ptr C'git_repository) -> CString -> CUInt -> CString -> IO (CInt))
p'git_repository_new :: FunPtr (Ptr (Ptr C'git_repository) -> IO (CInt))
c'git_repository_init :: Ptr (Ptr C'git_repository) -> CString -> CUInt -> IO (CInt)
p'git_repository_free :: FunPtr (Ptr C'git_repository -> IO ())
p'git_repository_init :: FunPtr (Ptr (Ptr C'git_repository) -> CString -> CUInt -> IO (CInt))
type C'git_repository_init_flag_t = CUInt
c'GIT_REPOSITORY_INIT_BARE :: Num a => a
c'GIT_REPOSITORY_INIT_NO_REINIT :: Num a => a
c'GIT_REPOSITORY_INIT_NO_DOTGIT_DIR :: Num a => a
c'GIT_REPOSITORY_INIT_MKDIR :: Num a => a
c'GIT_REPOSITORY_INIT_MKPATH :: Num a => a
c'GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE :: Num a => a
type C'git_repository_init_mode_t = CUInt
c'GIT_REPOSITORY_INIT_SHARED_UMASK :: Num a => a
c'GIT_REPOSITORY_INIT_SHARED_GROUP :: Num a => a
c'GIT_REPOSITORY_INIT_SHARED_ALL :: Num a => a
data C'git_repository_init_options
C'git_repository_init_options :: CUInt -> CUInt -> CUInt -> CString -> CString -> CString -> CString -> CString -> C'git_repository_init_options
c'git_repository_init_options'version :: C'git_repository_init_options -> CUInt
c'git_repository_init_options'flags :: C'git_repository_init_options -> CUInt
c'git_repository_init_options'mode :: C'git_repository_init_options -> CUInt
c'git_repository_init_options'workdir_path :: C'git_repository_init_options -> CString
c'git_repository_init_options'description :: C'git_repository_init_options -> CString
c'git_repository_init_options'template_path :: C'git_repository_init_options -> CString
c'git_repository_init_options'initial_head :: C'git_repository_init_options -> CString
c'git_repository_init_options'origin_url :: C'git_repository_init_options -> CString
c'git_repository_init_ext :: Ptr (Ptr C'git_repository) -> CString -> Ptr C'git_repository_init_options -> IO (CInt)
c'git_repository_head :: Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> IO (CInt)
c'git_repository_head_detached :: Ptr C'git_repository -> IO (CInt)
p'git_repository_init_ext :: FunPtr (Ptr (Ptr C'git_repository) -> CString -> Ptr C'git_repository_init_options -> IO (CInt))
c'git_repository_head_orphan :: Ptr C'git_repository -> IO (CInt)
p'git_repository_head :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> IO (CInt))
c'git_repository_is_empty :: Ptr C'git_repository -> IO (CInt)
p'git_repository_head_detached :: FunPtr (Ptr C'git_repository -> IO (CInt))
c'git_repository_path :: Ptr C'git_repository -> IO (CString)
p'git_repository_head_orphan :: FunPtr (Ptr C'git_repository -> IO (CInt))
c'git_repository_workdir :: Ptr C'git_repository -> IO (CString)
p'git_repository_is_empty :: FunPtr (Ptr C'git_repository -> IO (CInt))
p'git_repository_path :: FunPtr (Ptr C'git_repository -> IO (CString))
c'git_repository_set_workdir :: Ptr C'git_repository -> CString -> CInt -> IO (CInt)
c'git_repository_is_bare :: Ptr C'git_repository -> IO (CInt)
p'git_repository_workdir :: FunPtr (Ptr C'git_repository -> IO (CString))
c'git_repository_config :: Ptr (Ptr C'git_config) -> Ptr C'git_repository -> IO (CInt)
p'git_repository_set_workdir :: FunPtr (Ptr C'git_repository -> CString -> CInt -> IO (CInt))
p'git_repository_init_options'version :: Ptr (C'git_repository_init_options) -> Ptr (CUInt)
p'git_repository_is_bare :: FunPtr (Ptr C'git_repository -> IO (CInt))
c'git_repository_set_config :: Ptr C'git_repository -> Ptr C'git_config -> IO ()
c'git_repository_odb :: Ptr (Ptr C'git_odb) -> Ptr C'git_repository -> IO (CInt)
p'git_repository_config :: FunPtr (Ptr (Ptr C'git_config) -> Ptr C'git_repository -> IO (CInt))
p'git_repository_init_options'flags :: Ptr (C'git_repository_init_options) -> Ptr (CUInt)
c'git_repository_set_odb :: Ptr C'git_repository -> Ptr C'git_odb -> IO ()
p'git_repository_set_config :: FunPtr (Ptr C'git_repository -> Ptr C'git_config -> IO ())
c'git_repository_refdb :: Ptr (Ptr C'git_refdb) -> Ptr C'git_repository -> IO (CInt)
p'git_repository_odb :: FunPtr (Ptr (Ptr C'git_odb) -> Ptr C'git_repository -> IO (CInt))
p'git_repository_init_options'mode :: Ptr (C'git_repository_init_options) -> Ptr (CUInt)
c'git_repository_set_refdb :: Ptr C'git_repository -> Ptr C'git_refdb -> IO ()
p'git_repository_set_odb :: FunPtr (Ptr C'git_repository -> Ptr C'git_odb -> IO ())
c'git_repository_index :: Ptr (Ptr C'git_index) -> Ptr C'git_repository -> IO (CInt)
p'git_repository_refdb :: FunPtr (Ptr (Ptr C'git_refdb) -> Ptr C'git_repository -> IO (CInt))
p'git_repository_init_options'workdir_path :: Ptr (C'git_repository_init_options) -> Ptr (CString)
c'git_repository_set_index :: Ptr C'git_repository -> Ptr C'git_index -> IO ()
p'git_repository_set_refdb :: FunPtr (Ptr C'git_repository -> Ptr C'git_refdb -> IO ())
c'git_repository_message :: CString -> CSize -> Ptr C'git_repository -> IO (CInt)
p'git_repository_index :: FunPtr (Ptr (Ptr C'git_index) -> Ptr C'git_repository -> IO (CInt))
p'git_repository_init_options'description :: Ptr (C'git_repository_init_options) -> Ptr (CString)
c'git_repository_message_remove :: Ptr C'git_repository -> IO (CInt)
p'git_repository_set_index :: FunPtr (Ptr C'git_repository -> Ptr C'git_index -> IO ())
c'git_repository_merge_cleanup :: Ptr C'git_repository -> IO (CInt)
p'git_repository_message :: FunPtr (CString -> CSize -> Ptr C'git_repository -> IO (CInt))
p'git_repository_init_options'template_path :: Ptr (C'git_repository_init_options) -> Ptr (CString)
p'git_repository_message_remove :: FunPtr (Ptr C'git_repository -> IO (CInt))
p'git_repository_merge_cleanup :: FunPtr (Ptr C'git_repository -> IO (CInt))
p'git_repository_init_options'initial_head :: Ptr (C'git_repository_init_options) -> Ptr (CString)
p'git_repository_init_options'origin_url :: Ptr (C'git_repository_init_options) -> Ptr (CString)
type C'git_repository_fetchhead_foreach_cb = FunPtr (CString -> CString -> Ptr (C'git_oid) -> CUInt -> Ptr () -> IO CInt)
c'git_repository_fetchhead_foreach :: Ptr C'git_repository -> C'git_repository_fetchhead_foreach_cb -> Ptr () -> IO (CInt)
mk'git_repository_fetchhead_foreach_cb :: (CString -> CString -> Ptr (C'git_oid) -> CUInt -> Ptr () -> IO CInt) -> IO C'git_repository_fetchhead_foreach_cb
p'git_repository_fetchhead_foreach :: FunPtr (Ptr C'git_repository -> C'git_repository_fetchhead_foreach_cb -> Ptr () -> IO (CInt))
mK'git_repository_fetchhead_foreach_cb :: C'git_repository_fetchhead_foreach_cb -> (CString -> CString -> Ptr (C'git_oid) -> CUInt -> Ptr () -> IO CInt)
type C'git_repository_mergehead_foreach_cb = FunPtr (Ptr (C'git_oid) -> Ptr () -> IO CInt)
mk'git_repository_mergehead_foreach_cb :: (Ptr (C'git_oid) -> Ptr () -> IO CInt) -> IO C'git_repository_mergehead_foreach_cb
c'git_repository_mergehead_foreach :: Ptr C'git_repository -> C'git_repository_mergehead_foreach_cb -> Ptr () -> IO (CInt)
c'git_repository_hashfile :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> C'git_otype -> CString -> IO (CInt)
c'git_repository_set_head :: Ptr C'git_repository -> CString -> IO (CInt)
mK'git_repository_mergehead_foreach_cb :: C'git_repository_mergehead_foreach_cb -> (Ptr (C'git_oid) -> Ptr () -> IO CInt)
p'git_repository_mergehead_foreach :: FunPtr (Ptr C'git_repository -> C'git_repository_mergehead_foreach_cb -> Ptr () -> IO (CInt))
c'git_repository_set_head_detached :: Ptr C'git_repository -> Ptr C'git_oid -> IO (CInt)
p'git_repository_hashfile :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> C'git_otype -> CString -> IO (CInt))
c'git_repository_detach_head :: Ptr C'git_repository -> IO (CInt)
p'git_repository_set_head :: FunPtr (Ptr C'git_repository -> CString -> IO (CInt))
p'git_repository_set_head_detached :: FunPtr (Ptr C'git_repository -> Ptr C'git_oid -> IO (CInt))
p'git_repository_detach_head :: FunPtr (Ptr C'git_repository -> IO (CInt))
type C'git_repository_state_t = CUInt
c'GIT_REPOSITORY_STATE_NONE :: Num a => a
c'GIT_REPOSITORY_STATE_MERGE :: Num a => a
c'GIT_REPOSITORY_STATE_REVERT :: Num a => a
c'GIT_REPOSITORY_STATE_CHERRY_PICK :: Num a => a
c'GIT_REPOSITORY_STATE_BISECT :: Num a => a
c'GIT_REPOSITORY_STATE_REBASE :: Num a => a
c'GIT_REPOSITORY_STATE_REBASE_INTERACTIVE :: Num a => a
c'GIT_REPOSITORY_STATE_REBASE_MERGE :: Num a => a
c'GIT_REPOSITORY_STATE_APPLY_MAILBOX :: Num a => a
c'GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE :: Num a => a
c'git_repository_state :: Ptr C'git_repository -> IO (CInt)
p'git_repository_state :: FunPtr (Ptr C'git_repository -> IO (CInt))
instance Eq C'git_repository_init_options
instance Show C'git_repository_init_options
instance Storable C'git_repository_init_options

module Bindings.Libgit2.Reset
type C'git_reset_t = CUInt
c'GIT_RESET_SOFT :: Num a => a
c'GIT_RESET_MIXED :: Num a => a
c'GIT_RESET_HARD :: Num a => a
c'git_reset :: Ptr C'git_repository -> Ptr C'git_object -> C'git_reset_t -> IO (CInt)
c'git_reset_default :: Ptr C'git_repository -> Ptr C'git_object -> Ptr C'git_strarray -> IO (CInt)
p'git_reset :: FunPtr (Ptr C'git_repository -> Ptr C'git_object -> C'git_reset_t -> IO (CInt))
p'git_reset_default :: FunPtr (Ptr C'git_repository -> Ptr C'git_object -> Ptr C'git_strarray -> IO (CInt))

module Bindings.Libgit2.Revparse
c'git_revparse_single :: Ptr (Ptr C'git_object) -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_revparse_single :: FunPtr (Ptr (Ptr C'git_object) -> Ptr C'git_repository -> CString -> IO (CInt))
type C'git_revparse_mode_t = CUInt
c'GIT_REVPARSE_SINGLE :: Num a => a
c'GIT_REVPARSE_RANGE :: Num a => a
c'GIT_REVPARSE_MERGE_BASE :: Num a => a
data C'git_revspec
C'git_revspec :: Ptr C'git_object -> Ptr C'git_object -> CUInt -> C'git_revspec
c'git_revspec'from :: C'git_revspec -> Ptr C'git_object
c'git_revspec'to :: C'git_revspec -> Ptr C'git_object
c'git_revspec'flags :: C'git_revspec -> CUInt
c'git_revparse :: Ptr C'git_revspec -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_revparse :: FunPtr (Ptr C'git_revspec -> Ptr C'git_repository -> CString -> IO (CInt))
p'git_revspec'from :: Ptr (C'git_revspec) -> Ptr (Ptr C'git_object)
p'git_revspec'to :: Ptr (C'git_revspec) -> Ptr (Ptr C'git_object)
p'git_revspec'flags :: Ptr (C'git_revspec) -> Ptr (CUInt)
instance Eq C'git_revspec
instance Show C'git_revspec
instance Storable C'git_revspec

module Bindings.Libgit2.Revwalk
c'git_revwalk_new :: Ptr (Ptr C'git_revwalk) -> Ptr C'git_repository -> IO (CInt)
c'git_revwalk_reset :: Ptr C'git_revwalk -> IO ()
c'git_revwalk_push :: Ptr C'git_revwalk -> Ptr C'git_oid -> IO (CInt)
p'git_revwalk_new :: FunPtr (Ptr (Ptr C'git_revwalk) -> Ptr C'git_repository -> IO (CInt))
p'git_revwalk_reset :: FunPtr (Ptr C'git_revwalk -> IO ())
c'git_revwalk_push_glob :: Ptr C'git_revwalk -> CString -> IO (CInt)
c'git_revwalk_push_head :: Ptr C'git_revwalk -> IO (CInt)
p'git_revwalk_push :: FunPtr (Ptr C'git_revwalk -> Ptr C'git_oid -> IO (CInt))
c'git_revwalk_hide :: Ptr C'git_revwalk -> Ptr C'git_oid -> IO (CInt)
p'git_revwalk_push_glob :: FunPtr (Ptr C'git_revwalk -> CString -> IO (CInt))
p'git_revwalk_push_head :: FunPtr (Ptr C'git_revwalk -> IO (CInt))
c'git_revwalk_hide_glob :: Ptr C'git_revwalk -> CString -> IO (CInt)
c'git_revwalk_hide_head :: Ptr C'git_revwalk -> IO (CInt)
p'git_revwalk_hide :: FunPtr (Ptr C'git_revwalk -> Ptr C'git_oid -> IO (CInt))
c'git_revwalk_push_ref :: Ptr C'git_revwalk -> CString -> IO (CInt)
p'git_revwalk_hide_glob :: FunPtr (Ptr C'git_revwalk -> CString -> IO (CInt))
p'git_revwalk_hide_head :: FunPtr (Ptr C'git_revwalk -> IO (CInt))
c'git_revwalk_hide_ref :: Ptr C'git_revwalk -> CString -> IO (CInt)
c'git_revwalk_next :: Ptr C'git_oid -> Ptr C'git_revwalk -> IO (CInt)
p'git_revwalk_push_ref :: FunPtr (Ptr C'git_revwalk -> CString -> IO (CInt))
c'git_revwalk_sorting :: Ptr C'git_revwalk -> CUInt -> IO ()
p'git_revwalk_hide_ref :: FunPtr (Ptr C'git_revwalk -> CString -> IO (CInt))
c'git_revwalk_push_range :: Ptr C'git_revwalk -> CString -> IO (CInt)
p'git_revwalk_next :: FunPtr (Ptr C'git_oid -> Ptr C'git_revwalk -> IO (CInt))
c'git_revwalk_free :: Ptr C'git_revwalk -> IO ()
p'git_revwalk_sorting :: FunPtr (Ptr C'git_revwalk -> CUInt -> IO ())
c'git_revwalk_repository :: Ptr C'git_revwalk -> IO (Ptr C'git_repository)
p'git_revwalk_push_range :: FunPtr (Ptr C'git_revwalk -> CString -> IO (CInt))
p'git_revwalk_free :: FunPtr (Ptr C'git_revwalk -> IO ())
p'git_revwalk_repository :: FunPtr (Ptr C'git_revwalk -> IO (Ptr C'git_repository))

module Bindings.Libgit2.Signature
c'git_signature_new :: Ptr (Ptr C'git_signature) -> CString -> CString -> CLong -> CInt -> IO (CInt)
c'git_signature_now :: Ptr (Ptr C'git_signature) -> CString -> CString -> IO (CInt)
c'git_signature_dup :: Ptr C'git_signature -> IO (Ptr C'git_signature)
p'git_signature_new :: FunPtr (Ptr (Ptr C'git_signature) -> CString -> CString -> CLong -> CInt -> IO (CInt))
c'git_signature_free :: Ptr C'git_signature -> IO ()
p'git_signature_now :: FunPtr (Ptr (Ptr C'git_signature) -> CString -> CString -> IO (CInt))
p'git_signature_dup :: FunPtr (Ptr C'git_signature -> IO (Ptr C'git_signature))
p'git_signature_free :: FunPtr (Ptr C'git_signature -> IO ())

module Bindings.Libgit2.Stash
type C'git_stash_flags = CUInt
c'GIT_STASH_DEFAULT :: Num a => a
c'GIT_STASH_KEEP_INDEX :: Num a => a
c'GIT_STASH_INCLUDE_UNTRACKED :: Num a => a
c'GIT_STASH_INCLUDE_IGNORED :: Num a => a
c'git_stash_save :: Ptr C'git_oid -> Ptr C'git_repository -> Ptr C'git_signature -> CString -> CUInt -> IO (CInt)
p'git_stash_save :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> Ptr C'git_signature -> CString -> CUInt -> IO (CInt))
type C'git_stash_cb = FunPtr (CSize -> CString -> Ptr (C'git_oid) -> Ptr () -> IO CInt)
c'git_stash_foreach :: Ptr C'git_repository -> C'git_stash_cb -> Ptr () -> IO (CInt)
mk'git_stash_cb :: (CSize -> CString -> Ptr (C'git_oid) -> Ptr () -> IO CInt) -> IO C'git_stash_cb
c'git_stash_drop :: Ptr C'git_repository -> CSize -> IO (CInt)
p'git_stash_foreach :: FunPtr (Ptr C'git_repository -> C'git_stash_cb -> Ptr () -> IO (CInt))
mK'git_stash_cb :: C'git_stash_cb -> (CSize -> CString -> Ptr (C'git_oid) -> Ptr () -> IO CInt)
p'git_stash_drop :: FunPtr (Ptr C'git_repository -> CSize -> IO (CInt))

module Bindings.Libgit2.Status
type C'git_status_t = CUInt
c'GIT_STATUS_CURRENT :: Num a => a
c'GIT_STATUS_INDEX_NEW :: Num a => a
c'GIT_STATUS_INDEX_MODIFIED :: Num a => a
c'GIT_STATUS_INDEX_DELETED :: Num a => a
c'GIT_STATUS_INDEX_RENAMED :: Num a => a
c'GIT_STATUS_INDEX_TYPECHANGE :: Num a => a
c'GIT_STATUS_WT_NEW :: Num a => a
c'GIT_STATUS_WT_MODIFIED :: Num a => a
c'GIT_STATUS_WT_DELETED :: Num a => a
c'GIT_STATUS_WT_TYPECHANGE :: Num a => a
c'GIT_STATUS_IGNORED :: Num a => a
type C'git_status_cb = FunPtr (CString -> CUInt -> Ptr () -> IO CInt)
mk'git_status_cb :: (CString -> CUInt -> Ptr () -> IO CInt) -> IO C'git_status_cb
c'git_status_foreach :: Ptr C'git_repository -> C'git_status_cb -> Ptr () -> IO (CInt)
mK'git_status_cb :: C'git_status_cb -> (CString -> CUInt -> Ptr () -> IO CInt)
p'git_status_foreach :: FunPtr (Ptr C'git_repository -> C'git_status_cb -> Ptr () -> IO (CInt))
type C'git_status_show_t = CUInt
c'GIT_STATUS_SHOW_INDEX_AND_WORKDIR :: Num a => a
c'GIT_STATUS_SHOW_INDEX_ONLY :: Num a => a
c'GIT_STATUS_SHOW_WORKDIR_ONLY :: Num a => a
c'GIT_STATUS_SHOW_INDEX_THEN_WORKDIR :: Num a => a
type C'git_status_opt_t = CUInt
c'GIT_STATUS_OPT_INCLUDE_UNTRACKED :: Num a => a
c'GIT_STATUS_OPT_INCLUDE_IGNORED :: Num a => a
c'GIT_STATUS_OPT_INCLUDE_UNMODIFIED :: Num a => a
c'GIT_STATUS_OPT_EXCLUDE_SUBMODULES :: Num a => a
c'GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS :: Num a => a
c'GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH :: Num a => a
c'GIT_STATUS_OPT_RECURSE_IGNORED_DIRS :: Num a => a
data C'git_status_options
C'git_status_options :: CUInt -> C'git_status_show_t -> CUInt -> C'git_strarray -> C'git_status_options
c'git_status_options'version :: C'git_status_options -> CUInt
c'git_status_options'show :: C'git_status_options -> C'git_status_show_t
c'git_status_options'flags :: C'git_status_options -> CUInt
c'git_status_options'pathspec :: C'git_status_options -> C'git_strarray
c'git_status_foreach_ext :: Ptr C'git_repository -> Ptr C'git_status_options -> C'git_status_cb -> Ptr () -> IO (CInt)
c'git_status_file :: Ptr CUInt -> Ptr C'git_repository -> CString -> IO (CInt)
c'git_status_should_ignore :: Ptr CInt -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_status_foreach_ext :: FunPtr (Ptr C'git_repository -> Ptr C'git_status_options -> C'git_status_cb -> Ptr () -> IO (CInt))
p'git_status_file :: FunPtr (Ptr CUInt -> Ptr C'git_repository -> CString -> IO (CInt))
p'git_status_should_ignore :: FunPtr (Ptr CInt -> Ptr C'git_repository -> CString -> IO (CInt))
p'git_status_options'version :: Ptr (C'git_status_options) -> Ptr (CUInt)
p'git_status_options'show :: Ptr (C'git_status_options) -> Ptr (C'git_status_show_t)
p'git_status_options'flags :: Ptr (C'git_status_options) -> Ptr (CUInt)
p'git_status_options'pathspec :: Ptr (C'git_status_options) -> Ptr (C'git_strarray)
instance Eq C'git_status_options
instance Show C'git_status_options
instance Storable C'git_status_options

module Bindings.Libgit2.Submodule
data C'git_submodule
C'git_submodule :: C'git_submodule
type C'git_submodule_update_t = CInt
c'GIT_SUBMODULE_UPDATE_DEFAULT :: Num a => a
c'GIT_SUBMODULE_UPDATE_CHECKOUT :: Num a => a
c'GIT_SUBMODULE_UPDATE_REBASE :: Num a => a
c'GIT_SUBMODULE_UPDATE_MERGE :: Num a => a
c'GIT_SUBMODULE_UPDATE_NONE :: Num a => a
type C'git_submodule_ignore_t = CInt
c'GIT_SUBMODULE_IGNORE_DEFAULT :: Num a => a
c'GIT_SUBMODULE_IGNORE_NONE :: Num a => a
c'GIT_SUBMODULE_IGNORE_UNTRACKED :: Num a => a
c'GIT_SUBMODULE_IGNORE_DIRTY :: Num a => a
c'GIT_SUBMODULE_IGNORE_ALL :: Num a => a
type C'git_submodule_status_t = CUInt
c'GIT_SUBMODULE_STATUS_IN_HEAD :: Num a => a
c'GIT_SUBMODULE_STATUS_IN_INDEX :: Num a => a
c'GIT_SUBMODULE_STATUS_IN_CONFIG :: Num a => a
c'GIT_SUBMODULE_STATUS_IN_WD :: Num a => a
c'GIT_SUBMODULE_STATUS_INDEX_ADDED :: Num a => a
c'GIT_SUBMODULE_STATUS_INDEX_DELETED :: Num a => a
c'GIT_SUBMODULE_STATUS_INDEX_MODIFIED :: Num a => a
c'GIT_SUBMODULE_STATUS_WD_UNINITIALIZED :: Num a => a
c'GIT_SUBMODULE_STATUS_WD_ADDED :: Num a => a
c'GIT_SUBMODULE_STATUS_WD_DELETED :: Num a => a
c'GIT_SUBMODULE_STATUS_WD_MODIFIED :: Num a => a
c'GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED :: Num a => a
c'GIT_SUBMODULE_STATUS_WD_WD_MODIFIED :: Num a => a
c'GIT_SUBMODULE_STATUS_WD_UNTRACKED :: Num a => a
c'git_submodule_lookup :: Ptr (Ptr C'git_submodule) -> Ptr C'git_repository -> CString -> IO (CInt)
type C'git_submodule_foreach_callback = FunPtr (Ptr (C'git_submodule) -> CString -> Ptr () -> IO CInt)
c'git_submodule_foreach :: Ptr C'git_repository -> C'git_submodule_foreach_callback -> Ptr () -> IO (CInt)
p'git_submodule_lookup :: FunPtr (Ptr (Ptr C'git_submodule) -> Ptr C'git_repository -> CString -> IO (CInt))
mk'git_submodule_foreach_callback :: (Ptr (C'git_submodule) -> CString -> Ptr () -> IO CInt) -> IO C'git_submodule_foreach_callback
c'git_submodule_add_setup :: Ptr (Ptr C'git_submodule) -> Ptr C'git_repository -> CString -> CString -> CInt -> IO (CInt)
c'git_submodule_add_finalize :: Ptr C'git_submodule -> IO (CInt)
p'git_submodule_foreach :: FunPtr (Ptr C'git_repository -> C'git_submodule_foreach_callback -> Ptr () -> IO (CInt))
mK'git_submodule_foreach_callback :: C'git_submodule_foreach_callback -> (Ptr (C'git_submodule) -> CString -> Ptr () -> IO CInt)
c'git_submodule_add_to_index :: Ptr C'git_submodule -> CInt -> IO (CInt)
p'git_submodule_add_setup :: FunPtr (Ptr (Ptr C'git_submodule) -> Ptr C'git_repository -> CString -> CString -> CInt -> IO (CInt))
c'git_submodule_save :: Ptr C'git_submodule -> IO (CInt)
p'git_submodule_add_finalize :: FunPtr (Ptr C'git_submodule -> IO (CInt))
c'git_submodule_owner :: Ptr C'git_submodule -> IO (Ptr C'git_repository)
p'git_submodule_add_to_index :: FunPtr (Ptr C'git_submodule -> CInt -> IO (CInt))
c'git_submodule_name :: Ptr C'git_submodule -> IO (CString)
p'git_submodule_save :: FunPtr (Ptr C'git_submodule -> IO (CInt))
c'git_submodule_path :: Ptr C'git_submodule -> IO (CString)
p'git_submodule_owner :: FunPtr (Ptr C'git_submodule -> IO (Ptr C'git_repository))
c'git_submodule_url :: Ptr C'git_submodule -> IO (CString)
p'git_submodule_name :: FunPtr (Ptr C'git_submodule -> IO (CString))
c'git_submodule_set_url :: Ptr C'git_submodule -> CString -> IO (CInt)
p'git_submodule_path :: FunPtr (Ptr C'git_submodule -> IO (CString))
c'git_submodule_index_id :: Ptr C'git_submodule -> IO (Ptr C'git_oid)
p'git_submodule_url :: FunPtr (Ptr C'git_submodule -> IO (CString))
c'git_submodule_head_id :: Ptr C'git_submodule -> IO (Ptr C'git_oid)
p'git_submodule_set_url :: FunPtr (Ptr C'git_submodule -> CString -> IO (CInt))
c'git_submodule_wd_id :: Ptr C'git_submodule -> IO (Ptr C'git_oid)
p'git_submodule_index_id :: FunPtr (Ptr C'git_submodule -> IO (Ptr C'git_oid))
p'git_submodule_head_id :: FunPtr (Ptr C'git_submodule -> IO (Ptr C'git_oid))
c'git_submodule_ignore :: Ptr C'git_submodule -> IO (C'git_submodule_ignore_t)
p'git_submodule_wd_id :: FunPtr (Ptr C'git_submodule -> IO (Ptr C'git_oid))
c'git_submodule_set_ignore :: Ptr C'git_submodule -> C'git_submodule_ignore_t -> IO (C'git_submodule_ignore_t)
c'git_submodule_update :: Ptr C'git_submodule -> IO (C'git_submodule_update_t)
p'git_submodule_ignore :: FunPtr (Ptr C'git_submodule -> IO (C'git_submodule_ignore_t))
c'git_submodule_set_update :: Ptr C'git_submodule -> C'git_submodule_update_t -> IO (C'git_submodule_update_t)
p'git_submodule_set_ignore :: FunPtr (Ptr C'git_submodule -> C'git_submodule_ignore_t -> IO (C'git_submodule_ignore_t))
c'git_submodule_fetch_recurse_submodules :: Ptr C'git_submodule -> IO (CInt)
p'git_submodule_update :: FunPtr (Ptr C'git_submodule -> IO (C'git_submodule_update_t))
c'git_submodule_set_fetch_recurse_submodules :: Ptr C'git_submodule -> CInt -> IO (CInt)
p'git_submodule_set_update :: FunPtr (Ptr C'git_submodule -> C'git_submodule_update_t -> IO (C'git_submodule_update_t))
c'git_submodule_init :: Ptr C'git_submodule -> CInt -> IO (CInt)
p'git_submodule_fetch_recurse_submodules :: FunPtr (Ptr C'git_submodule -> IO (CInt))
c'git_submodule_sync :: Ptr C'git_submodule -> IO (CInt)
p'git_submodule_set_fetch_recurse_submodules :: FunPtr (Ptr C'git_submodule -> CInt -> IO (CInt))
p'git_submodule_init :: FunPtr (Ptr C'git_submodule -> CInt -> IO (CInt))
c'git_submodule_open :: Ptr (Ptr C'git_repository) -> Ptr C'git_submodule -> IO (CInt)
c'git_submodule_reload :: Ptr C'git_submodule -> IO (CInt)
p'git_submodule_sync :: FunPtr (Ptr C'git_submodule -> IO (CInt))
c'git_submodule_reload_all :: Ptr C'git_repository -> IO (CInt)
p'git_submodule_open :: FunPtr (Ptr (Ptr C'git_repository) -> Ptr C'git_submodule -> IO (CInt))
p'git_submodule_reload :: FunPtr (Ptr C'git_submodule -> IO (CInt))
c'git_submodule_status :: Ptr CUInt -> Ptr C'git_submodule -> IO (CInt)
p'git_submodule_reload_all :: FunPtr (Ptr C'git_repository -> IO (CInt))
c'git_submodule_location :: Ptr CUInt -> Ptr C'git_submodule -> IO (CInt)
p'git_submodule_status :: FunPtr (Ptr CUInt -> Ptr C'git_submodule -> IO (CInt))
p'git_submodule_location :: FunPtr (Ptr CUInt -> Ptr C'git_submodule -> IO (CInt))

module Bindings.Libgit2.Tag
c'git_tag_lookup :: Ptr (Ptr C'git_tag) -> Ptr C'git_repository -> Ptr C'git_oid -> IO (CInt)
c'git_tag_lookup_prefix :: Ptr (Ptr C'git_tag) -> Ptr C'git_repository -> Ptr C'git_oid -> CSize -> IO (CInt)
c'git_tag_free :: Ptr C'git_tag -> IO ()
c'git_tag_id :: Ptr C'git_tag -> IO (Ptr C'git_oid)
c'git_tag_target :: Ptr (Ptr C'git_object) -> Ptr C'git_tag -> IO (CInt)
c'git_tag_target_id :: Ptr C'git_tag -> IO (Ptr C'git_oid)
p'git_tag_id :: FunPtr (Ptr C'git_tag -> IO (Ptr C'git_oid))
c'git_tag_target_type :: Ptr C'git_tag -> IO (C'git_otype)
p'git_tag_target :: FunPtr (Ptr (Ptr C'git_object) -> Ptr C'git_tag -> IO (CInt))
c'git_tag_name :: Ptr C'git_tag -> IO (CString)
p'git_tag_target_id :: FunPtr (Ptr C'git_tag -> IO (Ptr C'git_oid))
c'git_tag_tagger :: Ptr C'git_tag -> IO (Ptr C'git_signature)
p'git_tag_target_type :: FunPtr (Ptr C'git_tag -> IO (C'git_otype))
c'git_tag_message :: Ptr C'git_tag -> IO (CString)
p'git_tag_name :: FunPtr (Ptr C'git_tag -> IO (CString))
p'git_tag_tagger :: FunPtr (Ptr C'git_tag -> IO (Ptr C'git_signature))
c'git_tag_create :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_object -> Ptr C'git_signature -> CString -> CInt -> IO (CInt)
p'git_tag_message :: FunPtr (Ptr C'git_tag -> IO (CString))
c'git_tag_create_frombuffer :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> CInt -> IO (CInt)
c'git_tag_create_lightweight :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_object -> CInt -> IO (CInt)
p'git_tag_create :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_object -> Ptr C'git_signature -> CString -> CInt -> IO (CInt))
c'git_tag_delete :: Ptr C'git_repository -> CString -> IO (CInt)
p'git_tag_create_frombuffer :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> CInt -> IO (CInt))
c'git_tag_list :: Ptr C'git_strarray -> Ptr C'git_repository -> IO (CInt)
p'git_tag_create_lightweight :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_object -> CInt -> IO (CInt))
p'git_tag_delete :: FunPtr (Ptr C'git_repository -> CString -> IO (CInt))
c'git_tag_list_match :: Ptr C'git_strarray -> CString -> Ptr C'git_repository -> IO (CInt)
p'git_tag_list :: FunPtr (Ptr C'git_strarray -> Ptr C'git_repository -> IO (CInt))
p'git_tag_list_match :: FunPtr (Ptr C'git_strarray -> CString -> Ptr C'git_repository -> IO (CInt))
type C'git_tag_foreach_cb = FunPtr (CString -> Ptr (C'git_oid) -> Ptr () -> IO CInt)
c'git_tag_foreach :: Ptr C'git_repository -> C'git_tag_foreach_cb -> Ptr () -> IO (CInt)
mk'git_tag_foreach_cb :: (CString -> Ptr (C'git_oid) -> Ptr () -> IO CInt) -> IO C'git_tag_foreach_cb
c'git_tag_peel :: Ptr (Ptr C'git_object) -> Ptr C'git_tag -> IO (CInt)
mK'git_tag_foreach_cb :: C'git_tag_foreach_cb -> (CString -> Ptr (C'git_oid) -> Ptr () -> IO CInt)
p'git_tag_foreach :: FunPtr (Ptr C'git_repository -> C'git_tag_foreach_cb -> Ptr () -> IO (CInt))
p'git_tag_peel :: FunPtr (Ptr (Ptr C'git_object) -> Ptr C'git_tag -> IO (CInt))

module Bindings.Libgit2.Trace
type C'git_trace_level_t = CUInt
c'GIT_TRACE_NONE :: Num a => a
c'GIT_TRACE_FATAL :: Num a => a
c'GIT_TRACE_ERROR :: Num a => a
c'GIT_TRACE_WARN :: Num a => a
c'GIT_TRACE_INFO :: Num a => a
c'GIT_TRACE_DEBUG :: Num a => a
c'GIT_TRACE_TRACE :: Num a => a
type C'git_trace_callback = FunPtr (C'git_trace_level_t -> CString -> IO ())
c'git_trace_set :: C'git_trace_level_t -> C'git_trace_callback -> IO (CInt)
mk'git_trace_callback :: (C'git_trace_level_t -> CString -> IO ()) -> IO C'git_trace_callback
p'git_trace_set :: FunPtr (C'git_trace_level_t -> C'git_trace_callback -> IO (CInt))
mK'git_trace_callback :: C'git_trace_callback -> (C'git_trace_level_t -> CString -> IO ())

module Bindings.Libgit2.Transport
type C'git_credtype_t = CUInt
c'GIT_CREDTYPE_USERPASS_PLAINTEXT :: Num a => a
type C'git_cred_free_callback = FunPtr (Ptr C'git_cred -> IO ())
mk'git_cred_free_callback :: (Ptr C'git_cred -> IO ()) -> IO C'git_cred_free_callback
mK'git_cred_free_callback :: C'git_cred_free_callback -> (Ptr C'git_cred -> IO ())
data C'git_cred
C'git_cred :: C'git_credtype_t -> C'git_cred_free_callback -> C'git_cred
c'git_cred'credtype :: C'git_cred -> C'git_credtype_t
c'git_cred'free :: C'git_cred -> C'git_cred_free_callback
p'git_cred'credtype :: Ptr (C'git_cred) -> Ptr (C'git_credtype_t)
p'git_cred'free :: Ptr (C'git_cred) -> Ptr (C'git_cred_free_callback)
data C'git_cred_userpass_plaintext
C'git_cred_userpass_plaintext :: C'git_cred -> CString -> CString -> C'git_cred_userpass_plaintext
c'git_cred_userpass_plaintext'parent :: C'git_cred_userpass_plaintext -> C'git_cred
c'git_cred_userpass_plaintext'username :: C'git_cred_userpass_plaintext -> CString
c'git_cred_userpass_plaintext'password :: C'git_cred_userpass_plaintext -> CString
c'git_cred_userpass_plaintext_new :: Ptr (Ptr C'git_cred) -> CString -> CString -> IO (CInt)
p'git_cred_userpass_plaintext_new :: FunPtr (Ptr (Ptr C'git_cred) -> CString -> CString -> IO (CInt))
p'git_cred_userpass_plaintext'parent :: Ptr (C'git_cred_userpass_plaintext) -> Ptr (C'git_cred)
type C'git_cred_acquire_cb = FunPtr (Ptr (Ptr (C'git_cred)) -> CString -> CString -> CUInt -> Ptr () -> IO CInt)
p'git_cred_userpass_plaintext'username :: Ptr (C'git_cred_userpass_plaintext) -> Ptr (CString)
mk'git_cred_acquire_cb :: (Ptr (Ptr (C'git_cred)) -> CString -> CString -> CUInt -> Ptr () -> IO CInt) -> IO C'git_cred_acquire_cb
p'git_cred_userpass_plaintext'password :: Ptr (C'git_cred_userpass_plaintext) -> Ptr (CString)
mK'git_cred_acquire_cb :: C'git_cred_acquire_cb -> (Ptr (Ptr (C'git_cred)) -> CString -> CString -> CUInt -> Ptr () -> IO CInt)
type C'git_transport_flags_t = CUInt
c'GIT_TRANSPORTFLAGS_NONE :: Num a => a
c'GIT_TRANSPORTFLAGS_NO_CHECK_CERT :: Num a => a
type C'git_transport_message_cb = FunPtr (CString -> CInt -> Ptr () -> IO ())
mk'git_transport_message_cb :: (CString -> CInt -> Ptr () -> IO ()) -> IO C'git_transport_message_cb
mK'git_transport_message_cb :: C'git_transport_message_cb -> (CString -> CInt -> Ptr () -> IO ())
type C'git_transport_set_callbacks_callback = FunPtr (Ptr C'git_transport -> C'git_transport_message_cb -> C'git_transport_message_cb -> Ptr () -> IO CInt)
type C'git_transport_connect_callback = FunPtr (Ptr C'git_transport -> CString -> C'git_cred_acquire_cb -> Ptr () -> CInt -> CInt -> IO CInt)
mk'git_transport_set_callbacks_callback :: (Ptr C'git_transport -> C'git_transport_message_cb -> C'git_transport_message_cb -> Ptr () -> IO CInt) -> IO C'git_transport_set_callbacks_callback
type C'git_transport_ls_callback = FunPtr (Ptr C'git_transport -> C'git_headlist_cb -> Ptr () -> IO CInt)
mk'git_transport_connect_callback :: (Ptr C'git_transport -> CString -> C'git_cred_acquire_cb -> Ptr () -> CInt -> CInt -> IO CInt) -> IO C'git_transport_connect_callback
type C'git_transport_push_callback = FunPtr (Ptr C'git_transport -> Ptr C'git_push -> IO CInt)
mk'git_transport_ls_callback :: (Ptr C'git_transport -> C'git_headlist_cb -> Ptr () -> IO CInt) -> IO C'git_transport_ls_callback
mK'git_transport_set_callbacks_callback :: C'git_transport_set_callbacks_callback -> (Ptr C'git_transport -> C'git_transport_message_cb -> C'git_transport_message_cb -> Ptr () -> IO CInt)
type C'git_transport_negotiate_fetch_callback = FunPtr (Ptr C'git_transport -> Ptr C'git_repository -> Ptr (Ptr C'git_remote_head) -> CSize -> IO CInt)
mk'git_transport_push_callback :: (Ptr C'git_transport -> Ptr C'git_push -> IO CInt) -> IO C'git_transport_push_callback
mK'git_transport_connect_callback :: C'git_transport_connect_callback -> (Ptr C'git_transport -> CString -> C'git_cred_acquire_cb -> Ptr () -> CInt -> CInt -> IO CInt)
type C'git_transport_download_pack_callback = FunPtr (Ptr C'git_transport -> Ptr C'git_repository -> Ptr C'git_transfer_progress -> C'git_transfer_progress_callback -> Ptr () -> IO CInt)
mK'git_transport_ls_callback :: C'git_transport_ls_callback -> (Ptr C'git_transport -> C'git_headlist_cb -> Ptr () -> IO CInt)
mk'git_transport_negotiate_fetch_callback :: (Ptr C'git_transport -> Ptr C'git_repository -> Ptr (Ptr C'git_remote_head) -> CSize -> IO CInt) -> IO C'git_transport_negotiate_fetch_callback
type C'git_transport_is_connected_callback = FunPtr (Ptr C'git_transport -> IO CInt)
mK'git_transport_push_callback :: C'git_transport_push_callback -> (Ptr C'git_transport -> Ptr C'git_push -> IO CInt)
mk'git_transport_download_pack_callback :: (Ptr C'git_transport -> Ptr C'git_repository -> Ptr C'git_transfer_progress -> C'git_transfer_progress_callback -> Ptr () -> IO CInt) -> IO C'git_transport_download_pack_callback
type C'git_transport_read_flags_callback = FunPtr (Ptr C'git_transport -> Ptr CInt -> IO CInt)
mk'git_transport_is_connected_callback :: (Ptr C'git_transport -> IO CInt) -> IO C'git_transport_is_connected_callback
mK'git_transport_negotiate_fetch_callback :: C'git_transport_negotiate_fetch_callback -> (Ptr C'git_transport -> Ptr C'git_repository -> Ptr (Ptr C'git_remote_head) -> CSize -> IO CInt)
type C'git_transport_cancel_callback = FunPtr (Ptr C'git_transport -> IO ())
mk'git_transport_read_flags_callback :: (Ptr C'git_transport -> Ptr CInt -> IO CInt) -> IO C'git_transport_read_flags_callback
mK'git_transport_download_pack_callback :: C'git_transport_download_pack_callback -> (Ptr C'git_transport -> Ptr C'git_repository -> Ptr C'git_transfer_progress -> C'git_transfer_progress_callback -> Ptr () -> IO CInt)
type C'git_transport_close_callback = FunPtr (Ptr C'git_transport -> IO CInt)
mk'git_transport_cancel_callback :: (Ptr C'git_transport -> IO ()) -> IO C'git_transport_cancel_callback
mK'git_transport_is_connected_callback :: C'git_transport_is_connected_callback -> (Ptr C'git_transport -> IO CInt)
type C'git_transport_free_callback = FunPtr (Ptr C'git_transport -> IO ())
mk'git_transport_close_callback :: (Ptr C'git_transport -> IO CInt) -> IO C'git_transport_close_callback
mK'git_transport_read_flags_callback :: C'git_transport_read_flags_callback -> (Ptr C'git_transport -> Ptr CInt -> IO CInt)
mK'git_transport_cancel_callback :: C'git_transport_cancel_callback -> (Ptr C'git_transport -> IO ())
mk'git_transport_free_callback :: (Ptr C'git_transport -> IO ()) -> IO C'git_transport_free_callback
mK'git_transport_close_callback :: C'git_transport_close_callback -> (Ptr C'git_transport -> IO CInt)
mK'git_transport_free_callback :: C'git_transport_free_callback -> (Ptr C'git_transport -> IO ())
data C'git_transport
C'git_transport :: CUInt -> C'git_transport_set_callbacks_callback -> C'git_transport_connect_callback -> C'git_transport_ls_callback -> C'git_transport_push_callback -> C'git_transport_negotiate_fetch_callback -> C'git_transport_download_pack_callback -> C'git_transport_is_connected_callback -> C'git_transport_read_flags_callback -> C'git_transport_cancel_callback -> C'git_transport_close_callback -> C'git_transport_free_callback -> C'git_transport
c'git_transport'version :: C'git_transport -> CUInt
c'git_transport'set_callbacks :: C'git_transport -> C'git_transport_set_callbacks_callback
c'git_transport'connect :: C'git_transport -> C'git_transport_connect_callback
c'git_transport'ls :: C'git_transport -> C'git_transport_ls_callback
c'git_transport'push :: C'git_transport -> C'git_transport_push_callback
c'git_transport'negotiate_fetch :: C'git_transport -> C'git_transport_negotiate_fetch_callback
c'git_transport'download_pack :: C'git_transport -> C'git_transport_download_pack_callback
c'git_transport'is_connected :: C'git_transport -> C'git_transport_is_connected_callback
c'git_transport'read_flags :: C'git_transport -> C'git_transport_read_flags_callback
c'git_transport'cancel :: C'git_transport -> C'git_transport_cancel_callback
c'git_transport'close :: C'git_transport -> C'git_transport_close_callback
c'git_transport'free :: C'git_transport -> C'git_transport_free_callback
c'git_transport_new :: Ptr (Ptr C'git_transport) -> Ptr C'git_remote -> CString -> IO (CInt)
p'git_transport_new :: FunPtr (Ptr (Ptr C'git_transport) -> Ptr C'git_remote -> CString -> IO (CInt))
type C'git_transport_cb = FunPtr (Ptr (Ptr (C'git_transport)) -> Ptr (C'git_remote) -> Ptr () -> IO CInt)
c'git_transport_dummy :: Ptr (Ptr C'git_transport) -> Ptr C'git_remote -> Ptr () -> IO (CInt)
mk'git_transport_cb :: (Ptr (Ptr (C'git_transport)) -> Ptr (C'git_remote) -> Ptr () -> IO CInt) -> IO C'git_transport_cb
c'git_transport_local :: Ptr (Ptr C'git_transport) -> Ptr C'git_remote -> Ptr () -> IO (CInt)
c'git_transport_smart :: Ptr (Ptr C'git_transport) -> Ptr C'git_remote -> Ptr () -> IO (CInt)
p'git_transport_dummy :: FunPtr (Ptr (Ptr C'git_transport) -> Ptr C'git_remote -> Ptr () -> IO (CInt))
mK'git_transport_cb :: C'git_transport_cb -> (Ptr (Ptr (C'git_transport)) -> Ptr (C'git_remote) -> Ptr () -> IO CInt)
p'git_transport_local :: FunPtr (Ptr (Ptr C'git_transport) -> Ptr C'git_remote -> Ptr () -> IO (CInt))
p'git_transport_smart :: FunPtr (Ptr (Ptr C'git_transport) -> Ptr C'git_remote -> Ptr () -> IO (CInt))
type C'git_smart_service_t = CUInt
p'git_transport'version :: Ptr (C'git_transport) -> Ptr (CUInt)
c'GIT_SERVICE_UPLOADPACK_LS :: Num a => a
p'git_transport'set_callbacks :: Ptr (C'git_transport) -> Ptr (C'git_transport_set_callbacks_callback)
c'GIT_SERVICE_UPLOADPACK :: Num a => a
c'GIT_SERVICE_RECEIVEPACK_LS :: Num a => a
p'git_transport'connect :: Ptr (C'git_transport) -> Ptr (C'git_transport_connect_callback)
c'GIT_SERVICE_RECEIVEPACK :: Num a => a
p'git_transport'ls :: Ptr (C'git_transport) -> Ptr (C'git_transport_ls_callback)
p'git_transport'push :: Ptr (C'git_transport) -> Ptr (C'git_transport_push_callback)
p'git_transport'negotiate_fetch :: Ptr (C'git_transport) -> Ptr (C'git_transport_negotiate_fetch_callback)
p'git_transport'download_pack :: Ptr (C'git_transport) -> Ptr (C'git_transport_download_pack_callback)
p'git_transport'is_connected :: Ptr (C'git_transport) -> Ptr (C'git_transport_is_connected_callback)
p'git_transport'read_flags :: Ptr (C'git_transport) -> Ptr (C'git_transport_read_flags_callback)
p'git_transport'cancel :: Ptr (C'git_transport) -> Ptr (C'git_transport_cancel_callback)
type C'git_smart_subtransport_stream_read_callback = FunPtr (Ptr C'git_smart_subtransport_stream -> CString -> CSize -> Ptr CSize -> IO CInt)
type C'git_smart_subtransport_stream_write_callback = FunPtr (Ptr C'git_smart_subtransport_stream -> CString -> CSize -> IO CInt)
mk'git_smart_subtransport_stream_read_callback :: (Ptr C'git_smart_subtransport_stream -> CString -> CSize -> Ptr CSize -> IO CInt) -> IO C'git_smart_subtransport_stream_read_callback
p'git_transport'close :: Ptr (C'git_transport) -> Ptr (C'git_transport_close_callback)
type C'git_smart_subtransport_stream_free_callback = FunPtr (Ptr C'git_smart_subtransport_stream -> IO ())
mk'git_smart_subtransport_stream_write_callback :: (Ptr C'git_smart_subtransport_stream -> CString -> CSize -> IO CInt) -> IO C'git_smart_subtransport_stream_write_callback
mk'git_smart_subtransport_stream_free_callback :: (Ptr C'git_smart_subtransport_stream -> IO ()) -> IO C'git_smart_subtransport_stream_free_callback
mK'git_smart_subtransport_stream_read_callback :: C'git_smart_subtransport_stream_read_callback -> (Ptr C'git_smart_subtransport_stream -> CString -> CSize -> Ptr CSize -> IO CInt)
p'git_transport'free :: Ptr (C'git_transport) -> Ptr (C'git_transport_free_callback)
mK'git_smart_subtransport_stream_write_callback :: C'git_smart_subtransport_stream_write_callback -> (Ptr C'git_smart_subtransport_stream -> CString -> CSize -> IO CInt)
mK'git_smart_subtransport_stream_free_callback :: C'git_smart_subtransport_stream_free_callback -> (Ptr C'git_smart_subtransport_stream -> IO ())
data C'git_smart_subtransport_stream
C'git_smart_subtransport_stream :: Ptr C'git_smart_subtransport -> C'git_smart_subtransport_stream_read_callback -> C'git_smart_subtransport_stream_write_callback -> C'git_smart_subtransport_stream_free_callback -> C'git_smart_subtransport_stream
c'git_smart_subtransport_stream'subtransport :: C'git_smart_subtransport_stream -> Ptr C'git_smart_subtransport
c'git_smart_subtransport_stream'read :: C'git_smart_subtransport_stream -> C'git_smart_subtransport_stream_read_callback
c'git_smart_subtransport_stream'write :: C'git_smart_subtransport_stream -> C'git_smart_subtransport_stream_write_callback
c'git_smart_subtransport_stream'free :: C'git_smart_subtransport_stream -> C'git_smart_subtransport_stream_free_callback
p'git_smart_subtransport_stream'subtransport :: Ptr (C'git_smart_subtransport_stream) -> Ptr (Ptr C'git_smart_subtransport)
p'git_smart_subtransport_stream'read :: Ptr (C'git_smart_subtransport_stream) -> Ptr (C'git_smart_subtransport_stream_read_callback)
type C'git_smart_subtransport_action_callback = FunPtr (Ptr (Ptr C'git_smart_subtransport_stream) -> Ptr C'git_smart_subtransport -> CString -> C'git_smart_service_t -> IO CInt)
type C'git_smart_subtransport_close_callback = FunPtr (Ptr C'git_smart_subtransport -> IO CInt)
mk'git_smart_subtransport_action_callback :: (Ptr (Ptr C'git_smart_subtransport_stream) -> Ptr C'git_smart_subtransport -> CString -> C'git_smart_service_t -> IO CInt) -> IO C'git_smart_subtransport_action_callback
type C'git_smart_subtransport_free_callback = FunPtr (Ptr C'git_smart_subtransport -> IO ())
p'git_smart_subtransport_stream'write :: Ptr (C'git_smart_subtransport_stream) -> Ptr (C'git_smart_subtransport_stream_write_callback)
mk'git_smart_subtransport_close_callback :: (Ptr C'git_smart_subtransport -> IO CInt) -> IO C'git_smart_subtransport_close_callback
mk'git_smart_subtransport_free_callback :: (Ptr C'git_smart_subtransport -> IO ()) -> IO C'git_smart_subtransport_free_callback
mK'git_smart_subtransport_action_callback :: C'git_smart_subtransport_action_callback -> (Ptr (Ptr C'git_smart_subtransport_stream) -> Ptr C'git_smart_subtransport -> CString -> C'git_smart_service_t -> IO CInt)
p'git_smart_subtransport_stream'free :: Ptr (C'git_smart_subtransport_stream) -> Ptr (C'git_smart_subtransport_stream_free_callback)
mK'git_smart_subtransport_close_callback :: C'git_smart_subtransport_close_callback -> (Ptr C'git_smart_subtransport -> IO CInt)
mK'git_smart_subtransport_free_callback :: C'git_smart_subtransport_free_callback -> (Ptr C'git_smart_subtransport -> IO ())
data C'git_smart_subtransport
C'git_smart_subtransport :: C'git_smart_subtransport_action_callback -> C'git_smart_subtransport_close_callback -> C'git_smart_subtransport_free_callback -> C'git_smart_subtransport
c'git_smart_subtransport'action :: C'git_smart_subtransport -> C'git_smart_subtransport_action_callback
c'git_smart_subtransport'close :: C'git_smart_subtransport -> C'git_smart_subtransport_close_callback
c'git_smart_subtransport'free :: C'git_smart_subtransport -> C'git_smart_subtransport_free_callback
type C'git_smart_subtransport_cb = FunPtr (Ptr (Ptr (C'git_smart_subtransport)) -> Ptr (C'git_transport) -> IO CInt)
mk'git_smart_subtransport_cb :: (Ptr (Ptr (C'git_smart_subtransport)) -> Ptr (C'git_transport) -> IO CInt) -> IO C'git_smart_subtransport_cb
p'git_smart_subtransport'action :: Ptr (C'git_smart_subtransport) -> Ptr (C'git_smart_subtransport_action_callback)
mK'git_smart_subtransport_cb :: C'git_smart_subtransport_cb -> (Ptr (Ptr (C'git_smart_subtransport)) -> Ptr (C'git_transport) -> IO CInt)
p'git_smart_subtransport'close :: Ptr (C'git_smart_subtransport) -> Ptr (C'git_smart_subtransport_close_callback)
p'git_smart_subtransport'free :: Ptr (C'git_smart_subtransport) -> Ptr (C'git_smart_subtransport_free_callback)
data C'git_smart_subtransport_definition
C'git_smart_subtransport_definition :: C'git_smart_subtransport_cb -> CUInt -> C'git_smart_subtransport_definition
c'git_smart_subtransport_definition'callback :: C'git_smart_subtransport_definition -> C'git_smart_subtransport_cb
c'git_smart_subtransport_definition'rpc :: C'git_smart_subtransport_definition -> CUInt
c'git_smart_subtransport_http :: Ptr (Ptr C'git_smart_subtransport) -> Ptr C'git_transport -> IO (CInt)
c'git_smart_subtransport_git :: Ptr (Ptr C'git_smart_subtransport) -> Ptr C'git_transport -> IO (CInt)
p'git_smart_subtransport_http :: FunPtr (Ptr (Ptr C'git_smart_subtransport) -> Ptr C'git_transport -> IO (CInt))
p'git_smart_subtransport_git :: FunPtr (Ptr (Ptr C'git_smart_subtransport) -> Ptr C'git_transport -> IO (CInt))
p'git_smart_subtransport_definition'callback :: Ptr (C'git_smart_subtransport_definition) -> Ptr (C'git_smart_subtransport_cb)
p'git_smart_subtransport_definition'rpc :: Ptr (C'git_smart_subtransport_definition) -> Ptr (CUInt)
instance Eq C'git_cred
instance Show C'git_cred
instance Eq C'git_cred_userpass_plaintext
instance Show C'git_cred_userpass_plaintext
instance Eq C'git_transport
instance Show C'git_transport
instance Eq C'git_smart_subtransport
instance Show C'git_smart_subtransport
instance Eq C'git_smart_subtransport_stream
instance Show C'git_smart_subtransport_stream
instance Eq C'git_smart_subtransport_definition
instance Show C'git_smart_subtransport_definition
instance Storable C'git_smart_subtransport_definition
instance Storable C'git_smart_subtransport
instance Storable C'git_smart_subtransport_stream
instance Storable C'git_transport
instance Storable C'git_cred_userpass_plaintext
instance Storable C'git_cred

module Bindings.Libgit2.CredHelpers
data C'git_cred_userpass_payload
C'git_cred_userpass_payload :: CString -> CString -> C'git_cred_userpass_payload
c'git_cred_userpass_payload'username :: C'git_cred_userpass_payload -> CString
c'git_cred_userpass_payload'password :: C'git_cred_userpass_payload -> CString
c'git_cred_userpass :: Ptr (Ptr C'git_cred) -> CString -> CString -> CUInt -> Ptr () -> IO (CInt)
p'git_cred_userpass :: FunPtr (Ptr (Ptr C'git_cred) -> CString -> CString -> CUInt -> Ptr () -> IO (CInt))
p'git_cred_userpass_payload'username :: Ptr (C'git_cred_userpass_payload) -> Ptr (CString)
p'git_cred_userpass_payload'password :: Ptr (C'git_cred_userpass_payload) -> Ptr (CString)
instance Eq C'git_cred_userpass_payload
instance Show C'git_cred_userpass_payload
instance Storable C'git_cred_userpass_payload

module Bindings.Libgit2.Remote
type C'git_remote_rename_problem_cb = FunPtr (CString -> Ptr () -> IO CInt)
mk'git_remote_rename_problem_cb :: (CString -> Ptr () -> IO CInt) -> IO C'git_remote_rename_problem_cb
c'git_remote_create :: Ptr (Ptr C'git_remote) -> Ptr C'git_repository -> CString -> CString -> IO (CInt)
c'git_remote_create_inmemory :: Ptr (Ptr C'git_remote) -> Ptr C'git_repository -> CString -> CString -> IO (CInt)
mK'git_remote_rename_problem_cb :: C'git_remote_rename_problem_cb -> (CString -> Ptr () -> IO CInt)
c'git_remote_load :: Ptr (Ptr C'git_remote) -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_remote_create :: FunPtr (Ptr (Ptr C'git_remote) -> Ptr C'git_repository -> CString -> CString -> IO (CInt))
c'git_remote_save :: Ptr C'git_remote -> IO (CInt)
p'git_remote_create_inmemory :: FunPtr (Ptr (Ptr C'git_remote) -> Ptr C'git_repository -> CString -> CString -> IO (CInt))
c'git_remote_name :: Ptr C'git_remote -> IO (CString)
p'git_remote_load :: FunPtr (Ptr (Ptr C'git_remote) -> Ptr C'git_repository -> CString -> IO (CInt))
c'git_remote_url :: Ptr C'git_remote -> IO (CString)
p'git_remote_save :: FunPtr (Ptr C'git_remote -> IO (CInt))
c'git_remote_pushurl :: Ptr C'git_remote -> IO (CString)
p'git_remote_name :: FunPtr (Ptr C'git_remote -> IO (CString))
c'git_remote_set_url :: Ptr C'git_remote -> CString -> IO (CInt)
p'git_remote_url :: FunPtr (Ptr C'git_remote -> IO (CString))
c'git_remote_set_pushurl :: Ptr C'git_remote -> CString -> IO (CInt)
p'git_remote_pushurl :: FunPtr (Ptr C'git_remote -> IO (CString))
c'git_remote_set_fetchspec :: Ptr C'git_remote -> CString -> IO (CInt)
p'git_remote_set_url :: FunPtr (Ptr C'git_remote -> CString -> IO (CInt))
c'git_remote_fetchspec :: Ptr C'git_remote -> IO (Ptr C'git_refspec)
p'git_remote_set_pushurl :: FunPtr (Ptr C'git_remote -> CString -> IO (CInt))
c'git_remote_set_pushspec :: Ptr C'git_remote -> CString -> IO (CInt)
p'git_remote_set_fetchspec :: FunPtr (Ptr C'git_remote -> CString -> IO (CInt))
c'git_remote_pushspec :: Ptr C'git_remote -> IO (Ptr C'git_refspec)
p'git_remote_fetchspec :: FunPtr (Ptr C'git_remote -> IO (Ptr C'git_refspec))
c'git_remote_connect :: Ptr C'git_remote -> C'git_direction -> IO (CInt)
p'git_remote_set_pushspec :: FunPtr (Ptr C'git_remote -> CString -> IO (CInt))
p'git_remote_pushspec :: FunPtr (Ptr C'git_remote -> IO (Ptr C'git_refspec))
c'git_remote_ls :: Ptr C'git_remote -> C'git_headlist_cb -> Ptr () -> IO (CInt)
p'git_remote_connect :: FunPtr (Ptr C'git_remote -> C'git_direction -> IO (CInt))
c'git_remote_download :: Ptr C'git_remote -> C'git_transfer_progress_callback -> Ptr () -> IO (CInt)
c'git_remote_connected :: Ptr C'git_remote -> IO (CInt)
p'git_remote_ls :: FunPtr (Ptr C'git_remote -> C'git_headlist_cb -> Ptr () -> IO (CInt))
c'git_remote_stop :: Ptr C'git_remote -> IO ()
p'git_remote_download :: FunPtr (Ptr C'git_remote -> C'git_transfer_progress_callback -> Ptr () -> IO (CInt))
c'git_remote_disconnect :: Ptr C'git_remote -> IO ()
p'git_remote_connected :: FunPtr (Ptr C'git_remote -> IO (CInt))
c'git_remote_free :: Ptr C'git_remote -> IO ()
p'git_remote_stop :: FunPtr (Ptr C'git_remote -> IO ())
c'git_remote_update_tips :: Ptr C'git_remote -> IO (CInt)
p'git_remote_disconnect :: FunPtr (Ptr C'git_remote -> IO ())
c'git_remote_valid_url :: CString -> IO (CInt)
p'git_remote_free :: FunPtr (Ptr C'git_remote -> IO ())
c'git_remote_supported_url :: CString -> IO (CInt)
p'git_remote_update_tips :: FunPtr (Ptr C'git_remote -> IO (CInt))
p'git_remote_valid_url :: FunPtr (CString -> IO (CInt))
c'git_remote_list :: Ptr C'git_strarray -> Ptr C'git_repository -> IO (CInt)
p'git_remote_supported_url :: FunPtr (CString -> IO (CInt))
c'git_remote_check_cert :: Ptr C'git_remote -> CInt -> IO ()
c'git_remote_set_cred_acquire_cb :: Ptr C'git_remote -> C'git_cred_acquire_cb -> Ptr () -> IO ()
p'git_remote_list :: FunPtr (Ptr C'git_strarray -> Ptr C'git_repository -> IO (CInt))
p'git_remote_check_cert :: FunPtr (Ptr C'git_remote -> CInt -> IO ())
c'git_remote_set_transport :: Ptr C'git_remote -> Ptr C'git_transport -> IO (CInt)
p'git_remote_set_cred_acquire_cb :: FunPtr (Ptr C'git_remote -> C'git_cred_acquire_cb -> Ptr () -> IO ())
p'git_remote_set_transport :: FunPtr (Ptr C'git_remote -> Ptr C'git_transport -> IO (CInt))
type C'git_remote_completion_type = CUInt
c'GIT_REMOTE_COMPLETION_DOWNLOAD :: Num a => a
c'GIT_REMOTE_COMPLETION_INDEXING :: Num a => a
c'GIT_REMOTE_COMPLETION_ERROR :: Num a => a
type C'git_remote_callbacks_progress_callback = FunPtr (CString -> CInt -> Ptr () -> IO ())
type C'git_remote_callbacks_completion_callback = FunPtr (C'git_remote_completion_type -> Ptr () -> IO CInt)
mk'git_remote_callbacks_progress_callback :: (CString -> CInt -> Ptr () -> IO ()) -> IO C'git_remote_callbacks_progress_callback
type C'git_remote_callbacks_update_tips_callback = FunPtr (CString -> Ptr C'git_oid -> Ptr C'git_oid -> Ptr () -> IO CInt)
mk'git_remote_callbacks_completion_callback :: (C'git_remote_completion_type -> Ptr () -> IO CInt) -> IO C'git_remote_callbacks_completion_callback
mK'git_remote_callbacks_progress_callback :: C'git_remote_callbacks_progress_callback -> (CString -> CInt -> Ptr () -> IO ())
mk'git_remote_callbacks_update_tips_callback :: (CString -> Ptr C'git_oid -> Ptr C'git_oid -> Ptr () -> IO CInt) -> IO C'git_remote_callbacks_update_tips_callback
mK'git_remote_callbacks_completion_callback :: C'git_remote_callbacks_completion_callback -> (C'git_remote_completion_type -> Ptr () -> IO CInt)
mK'git_remote_callbacks_update_tips_callback :: C'git_remote_callbacks_update_tips_callback -> (CString -> Ptr C'git_oid -> Ptr C'git_oid -> Ptr () -> IO CInt)
data C'git_remote_callbacks
C'git_remote_callbacks :: CUInt -> C'git_remote_callbacks_progress_callback -> C'git_remote_callbacks_completion_callback -> C'git_remote_callbacks_update_tips_callback -> Ptr () -> C'git_remote_callbacks
c'git_remote_callbacks'version :: C'git_remote_callbacks -> CUInt
c'git_remote_callbacks'progress :: C'git_remote_callbacks -> C'git_remote_callbacks_progress_callback
c'git_remote_callbacks'completion :: C'git_remote_callbacks -> C'git_remote_callbacks_completion_callback
c'git_remote_callbacks'update_tips :: C'git_remote_callbacks -> C'git_remote_callbacks_update_tips_callback
c'git_remote_callbacks'payload :: C'git_remote_callbacks -> Ptr ()
c'git_remote_set_callbacks :: Ptr C'git_remote -> Ptr C'git_remote_callbacks -> IO (CInt)
c'git_remote_stats :: Ptr C'git_remote -> IO (Ptr C'git_transfer_progress)
p'git_remote_set_callbacks :: FunPtr (Ptr C'git_remote -> Ptr C'git_remote_callbacks -> IO (CInt))
p'git_remote_stats :: FunPtr (Ptr C'git_remote -> IO (Ptr C'git_transfer_progress))
p'git_remote_callbacks'version :: Ptr (C'git_remote_callbacks) -> Ptr (CUInt)
type C'git_remote_autotag_option_t = CUInt
p'git_remote_callbacks'progress :: Ptr (C'git_remote_callbacks) -> Ptr (C'git_remote_callbacks_progress_callback)
c'GIT_REMOTE_DOWNLOAD_TAGS_UNSET :: Num a => a
c'GIT_REMOTE_DOWNLOAD_TAGS_NONE :: Num a => a
p'git_remote_callbacks'completion :: Ptr (C'git_remote_callbacks) -> Ptr (C'git_remote_callbacks_completion_callback)
c'GIT_REMOTE_DOWNLOAD_TAGS_AUTO :: Num a => a
c'GIT_REMOTE_DOWNLOAD_TAGS_ALL :: Num a => a
p'git_remote_callbacks'update_tips :: Ptr (C'git_remote_callbacks) -> Ptr (C'git_remote_callbacks_update_tips_callback)
c'git_remote_autotag :: Ptr C'git_remote -> IO (C'git_remote_autotag_option_t)
c'git_remote_set_autotag :: Ptr C'git_remote -> C'git_remote_autotag_option_t -> IO ()
p'git_remote_callbacks'payload :: Ptr (C'git_remote_callbacks) -> Ptr (Ptr ())
p'git_remote_autotag :: FunPtr (Ptr C'git_remote -> IO (C'git_remote_autotag_option_t))
c'git_remote_rename :: Ptr C'git_remote -> CString -> C'git_remote_rename_problem_cb -> Ptr () -> IO (CInt)
c'git_remote_update_fetchhead :: Ptr C'git_remote -> IO (CInt)
p'git_remote_set_autotag :: FunPtr (Ptr C'git_remote -> C'git_remote_autotag_option_t -> IO ())
c'git_remote_set_update_fetchhead :: Ptr C'git_remote -> CInt -> IO ()
p'git_remote_rename :: FunPtr (Ptr C'git_remote -> CString -> C'git_remote_rename_problem_cb -> Ptr () -> IO (CInt))
c'git_remote_is_valid_name :: CString -> IO (CInt)
p'git_remote_update_fetchhead :: FunPtr (Ptr C'git_remote -> IO (CInt))
p'git_remote_set_update_fetchhead :: FunPtr (Ptr C'git_remote -> CInt -> IO ())
p'git_remote_is_valid_name :: FunPtr (CString -> IO (CInt))
instance Eq C'git_remote_callbacks
instance Show C'git_remote_callbacks
instance Storable C'git_remote_callbacks

module Bindings.Libgit2.Tree
c'git_tree_lookup :: Ptr (Ptr C'git_tree) -> Ptr C'git_repository -> Ptr C'git_oid -> IO (CInt)
c'git_tree_lookup_prefix :: Ptr (Ptr C'git_tree) -> Ptr C'git_repository -> Ptr C'git_oid -> CSize -> IO (CInt)
c'git_tree_free :: Ptr C'git_tree -> IO ()
c'git_tree_id :: Ptr C'git_tree -> IO (Ptr C'git_oid)
c'git_tree_owner :: Ptr C'git_tree -> IO (Ptr C'git_repository)
c'git_tree_entrycount :: Ptr C'git_tree -> IO (CSize)
p'git_tree_id :: FunPtr (Ptr C'git_tree -> IO (Ptr C'git_oid))
p'git_tree_owner :: FunPtr (Ptr C'git_tree -> IO (Ptr C'git_repository))
c'git_tree_entry_byname :: Ptr C'git_tree -> CString -> IO (Ptr C'git_tree_entry)
p'git_tree_entrycount :: FunPtr (Ptr C'git_tree -> IO (CSize))
c'git_tree_entry_byindex :: Ptr C'git_tree -> CSize -> IO (Ptr C'git_tree_entry)
c'git_tree_entry_byoid :: Ptr C'git_tree -> Ptr C'git_oid -> IO (Ptr C'git_tree_entry)
p'git_tree_entry_byname :: FunPtr (Ptr C'git_tree -> CString -> IO (Ptr C'git_tree_entry))
p'git_tree_entry_byindex :: FunPtr (Ptr C'git_tree -> CSize -> IO (Ptr C'git_tree_entry))
c'git_tree_entry_bypath :: Ptr (Ptr C'git_tree_entry) -> Ptr C'git_tree -> CString -> IO (CInt)
c'git_tree_entry_dup :: Ptr C'git_tree_entry -> IO (Ptr C'git_tree_entry)
p'git_tree_entry_byoid :: FunPtr (Ptr C'git_tree -> Ptr C'git_oid -> IO (Ptr C'git_tree_entry))
c'git_tree_entry_free :: Ptr C'git_tree_entry -> IO ()
p'git_tree_entry_bypath :: FunPtr (Ptr (Ptr C'git_tree_entry) -> Ptr C'git_tree -> CString -> IO (CInt))
c'git_tree_entry_name :: Ptr C'git_tree_entry -> IO (CString)
p'git_tree_entry_dup :: FunPtr (Ptr C'git_tree_entry -> IO (Ptr C'git_tree_entry))
p'git_tree_entry_free :: FunPtr (Ptr C'git_tree_entry -> IO ())
c'git_tree_entry_id :: Ptr C'git_tree_entry -> IO (Ptr C'git_oid)
c'git_tree_entry_type :: Ptr C'git_tree_entry -> IO (C'git_otype)
p'git_tree_entry_name :: FunPtr (Ptr C'git_tree_entry -> IO (CString))
c'git_tree_entry_filemode :: Ptr C'git_tree_entry -> IO (C'git_filemode_t)
p'git_tree_entry_id :: FunPtr (Ptr C'git_tree_entry -> IO (Ptr C'git_oid))
p'git_tree_entry_type :: FunPtr (Ptr C'git_tree_entry -> IO (C'git_otype))
c'git_tree_entry_cmp :: Ptr C'git_tree_entry -> Ptr C'git_tree_entry -> IO (CInt)
p'git_tree_entry_filemode :: FunPtr (Ptr C'git_tree_entry -> IO (C'git_filemode_t))
c'git_tree_entry_to_object :: Ptr (Ptr C'git_object) -> Ptr C'git_repository -> Ptr C'git_tree_entry -> IO (CInt)
c'git_treebuilder_create :: Ptr (Ptr C'git_treebuilder) -> Ptr C'git_tree -> IO (CInt)
p'git_tree_entry_cmp :: FunPtr (Ptr C'git_tree_entry -> Ptr C'git_tree_entry -> IO (CInt))
c'git_treebuilder_clear :: Ptr C'git_treebuilder -> IO ()
p'git_tree_entry_to_object :: FunPtr (Ptr (Ptr C'git_object) -> Ptr C'git_repository -> Ptr C'git_tree_entry -> IO (CInt))
c'git_treebuilder_entrycount :: Ptr C'git_treebuilder -> IO (CUInt)
p'git_treebuilder_create :: FunPtr (Ptr (Ptr C'git_treebuilder) -> Ptr C'git_tree -> IO (CInt))
c'git_treebuilder_free :: Ptr C'git_treebuilder -> IO ()
p'git_treebuilder_clear :: FunPtr (Ptr C'git_treebuilder -> IO ())
p'git_treebuilder_entrycount :: FunPtr (Ptr C'git_treebuilder -> IO (CUInt))
c'git_treebuilder_get :: Ptr C'git_treebuilder -> CString -> IO (Ptr C'git_tree_entry)
p'git_treebuilder_free :: FunPtr (Ptr C'git_treebuilder -> IO ())
c'git_treebuilder_insert :: Ptr (Ptr C'git_tree_entry) -> Ptr C'git_treebuilder -> CString -> Ptr C'git_oid -> C'git_filemode_t -> IO (CInt)
c'git_treebuilder_remove :: Ptr C'git_treebuilder -> CString -> IO (CInt)
p'git_treebuilder_get :: FunPtr (Ptr C'git_treebuilder -> CString -> IO (Ptr C'git_tree_entry))
p'git_treebuilder_insert :: FunPtr (Ptr (Ptr C'git_tree_entry) -> Ptr C'git_treebuilder -> CString -> Ptr C'git_oid -> C'git_filemode_t -> IO (CInt))
p'git_treebuilder_remove :: FunPtr (Ptr C'git_treebuilder -> CString -> IO (CInt))
type C'git_treebuilder_filter_cb = FunPtr (Ptr (C'git_tree_entry) -> Ptr () -> IO CInt)
c'git_treebuilder_filter :: Ptr C'git_treebuilder -> C'git_treebuilder_filter_cb -> Ptr () -> IO ()
mk'git_treebuilder_filter_cb :: (Ptr (C'git_tree_entry) -> Ptr () -> IO CInt) -> IO C'git_treebuilder_filter_cb
c'git_treebuilder_write :: Ptr C'git_oid -> Ptr C'git_repository -> Ptr C'git_treebuilder -> IO (CInt)
mK'git_treebuilder_filter_cb :: C'git_treebuilder_filter_cb -> (Ptr (C'git_tree_entry) -> Ptr () -> IO CInt)
p'git_treebuilder_filter :: FunPtr (Ptr C'git_treebuilder -> C'git_treebuilder_filter_cb -> Ptr () -> IO ())
p'git_treebuilder_write :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> Ptr C'git_treebuilder -> IO (CInt))
type C'git_treewalk_cb = FunPtr (CString -> Ptr (C'git_tree_entry) -> Ptr () -> IO CInt)
mk'git_treewalk_cb :: (CString -> Ptr (C'git_tree_entry) -> Ptr () -> IO CInt) -> IO C'git_treewalk_cb
mK'git_treewalk_cb :: C'git_treewalk_cb -> (CString -> Ptr (C'git_tree_entry) -> Ptr () -> IO CInt)
type C'git_treewalk_mode = CUInt
c'GIT_TREEWALK_PRE :: Num a => a
c'GIT_TREEWALK_POST :: Num a => a
c'git_tree_walk :: Ptr C'git_tree -> C'git_treewalk_mode -> C'git_treewalk_cb -> Ptr () -> IO (CInt)
p'git_tree_walk :: FunPtr (Ptr C'git_tree -> C'git_treewalk_mode -> C'git_treewalk_cb -> Ptr () -> IO (CInt))

module Bindings.Libgit2.Diff
type C'git_diff_option_t = CUInt
c'GIT_DIFF_NORMAL :: Num a => a
c'GIT_DIFF_REVERSE :: Num a => a
c'GIT_DIFF_FORCE_TEXT :: Num a => a
c'GIT_DIFF_IGNORE_WHITESPACE :: Num a => a
c'GIT_DIFF_IGNORE_WHITESPACE_CHANGE :: Num a => a
c'GIT_DIFF_IGNORE_WHITESPACE_EOL :: Num a => a
c'GIT_DIFF_IGNORE_SUBMODULES :: Num a => a
c'GIT_DIFF_PATIENCE :: Num a => a
c'GIT_DIFF_INCLUDE_IGNORED :: Num a => a
c'GIT_DIFF_INCLUDE_UNTRACKED :: Num a => a
c'GIT_DIFF_INCLUDE_UNMODIFIED :: Num a => a
c'GIT_DIFF_RECURSE_UNTRACKED_DIRS :: Num a => a
c'GIT_DIFF_DISABLE_PATHSPEC_MATCH :: Num a => a
c'GIT_DIFF_DELTAS_ARE_ICASE :: Num a => a
c'GIT_DIFF_INCLUDE_UNTRACKED_CONTENT :: Num a => a
c'GIT_DIFF_SKIP_BINARY_CHECK :: Num a => a
c'GIT_DIFF_INCLUDE_TYPECHANGE :: Num a => a
c'GIT_DIFF_INCLUDE_TYPECHANGE_TREES :: Num a => a
c'GIT_DIFF_IGNORE_FILEMODE :: Num a => a
c'GIT_DIFF_RECURSE_IGNORED_DIRS :: Num a => a
data C'git_diff_list
C'git_diff_list :: C'git_diff_list
type C'git_diff_flag_t = CUInt
c'GIT_DIFF_FLAG_BINARY :: Num a => a
c'GIT_DIFF_FLAG_NOT_BINARY :: Num a => a
c'GIT_DIFF_FLAG_VALID_OID :: Num a => a
type C'git_delta_t = CUInt
c'GIT_DELTA_UNMODIFIED :: Num a => a
c'GIT_DELTA_ADDED :: Num a => a
c'GIT_DELTA_DELETED :: Num a => a
c'GIT_DELTA_MODIFIED :: Num a => a
c'GIT_DELTA_RENAMED :: Num a => a
c'GIT_DELTA_COPIED :: Num a => a
c'GIT_DELTA_IGNORED :: Num a => a
c'GIT_DELTA_UNTRACKED :: Num a => a
c'GIT_DELTA_TYPECHANGE :: Num a => a
data C'git_diff_file
C'git_diff_file :: C'git_oid -> CString -> CLong -> CUInt -> CUShort -> C'git_diff_file
c'git_diff_file'oid :: C'git_diff_file -> C'git_oid
c'git_diff_file'path :: C'git_diff_file -> CString
c'git_diff_file'size :: C'git_diff_file -> CLong
c'git_diff_file'flags :: C'git_diff_file -> CUInt
c'git_diff_file'mode :: C'git_diff_file -> CUShort
p'git_diff_file'oid :: Ptr (C'git_diff_file) -> Ptr (C'git_oid)
p'git_diff_file'path :: Ptr (C'git_diff_file) -> Ptr (CString)
p'git_diff_file'size :: Ptr (C'git_diff_file) -> Ptr (CLong)
p'git_diff_file'flags :: Ptr (C'git_diff_file) -> Ptr (CUInt)
data C'git_diff_delta
C'git_diff_delta :: C'git_diff_file -> C'git_diff_file -> C'git_delta_t -> CUInt -> CUInt -> C'git_diff_delta
c'git_diff_delta'old_file :: C'git_diff_delta -> C'git_diff_file
c'git_diff_delta'new_file :: C'git_diff_delta -> C'git_diff_file
c'git_diff_delta'status :: C'git_diff_delta -> C'git_delta_t
c'git_diff_delta'similarity :: C'git_diff_delta -> CUInt
c'git_diff_delta'flags :: C'git_diff_delta -> CUInt
p'git_diff_file'mode :: Ptr (C'git_diff_file) -> Ptr (CUShort)
type C'git_diff_notify_cb = FunPtr (Ptr (C'git_diff_list) -> Ptr (C'git_diff_delta) -> CString -> Ptr () -> IO CInt)
mk'git_diff_notify_cb :: (Ptr (C'git_diff_list) -> Ptr (C'git_diff_delta) -> CString -> Ptr () -> IO CInt) -> IO C'git_diff_notify_cb
p'git_diff_delta'old_file :: Ptr (C'git_diff_delta) -> Ptr (C'git_diff_file)
mK'git_diff_notify_cb :: C'git_diff_notify_cb -> (Ptr (C'git_diff_list) -> Ptr (C'git_diff_delta) -> CString -> Ptr () -> IO CInt)
p'git_diff_delta'new_file :: Ptr (C'git_diff_delta) -> Ptr (C'git_diff_file)
p'git_diff_delta'status :: Ptr (C'git_diff_delta) -> Ptr (C'git_delta_t)
p'git_diff_delta'similarity :: Ptr (C'git_diff_delta) -> Ptr (CUInt)
p'git_diff_delta'flags :: Ptr (C'git_diff_delta) -> Ptr (CUInt)
data C'git_diff_options
C'git_diff_options :: CUInt -> CUInt -> CUShort -> CUShort -> CString -> CString -> C'git_strarray -> CLong -> C'git_diff_notify_cb -> Ptr () -> C'git_diff_options
c'git_diff_options'version :: C'git_diff_options -> CUInt
c'git_diff_options'flags :: C'git_diff_options -> CUInt
c'git_diff_options'context_lines :: C'git_diff_options -> CUShort
c'git_diff_options'interhunk_lines :: C'git_diff_options -> CUShort
c'git_diff_options'old_prefix :: C'git_diff_options -> CString
c'git_diff_options'new_prefix :: C'git_diff_options -> CString
c'git_diff_options'pathspec :: C'git_diff_options -> C'git_strarray
c'git_diff_options'max_size :: C'git_diff_options -> CLong
c'git_diff_options'notify_cb :: C'git_diff_options -> C'git_diff_notify_cb
c'git_diff_options'notify_payload :: C'git_diff_options -> Ptr ()
type C'git_diff_file_cb = FunPtr (Ptr (C'git_diff_delta) -> CFloat -> Ptr () -> IO CInt)
mk'git_diff_file_cb :: (Ptr (C'git_diff_delta) -> CFloat -> Ptr () -> IO CInt) -> IO C'git_diff_file_cb
mK'git_diff_file_cb :: C'git_diff_file_cb -> (Ptr (C'git_diff_delta) -> CFloat -> Ptr () -> IO CInt)
p'git_diff_options'version :: Ptr (C'git_diff_options) -> Ptr (CUInt)
data C'git_diff_range
C'git_diff_range :: CInt -> CInt -> CInt -> CInt -> C'git_diff_range
c'git_diff_range'old_start :: C'git_diff_range -> CInt
c'git_diff_range'old_lines :: C'git_diff_range -> CInt
c'git_diff_range'new_start :: C'git_diff_range -> CInt
c'git_diff_range'new_lines :: C'git_diff_range -> CInt
p'git_diff_options'flags :: Ptr (C'git_diff_options) -> Ptr (CUInt)
p'git_diff_options'context_lines :: Ptr (C'git_diff_options) -> Ptr (CUShort)
p'git_diff_options'interhunk_lines :: Ptr (C'git_diff_options) -> Ptr (CUShort)
type C'git_diff_hunk_cb = FunPtr (Ptr (C'git_diff_delta) -> Ptr (C'git_diff_range) -> CString -> CSize -> Ptr () -> IO CInt)
p'git_diff_range'old_start :: Ptr (C'git_diff_range) -> Ptr (CInt)
mk'git_diff_hunk_cb :: (Ptr (C'git_diff_delta) -> Ptr (C'git_diff_range) -> CString -> CSize -> Ptr () -> IO CInt) -> IO C'git_diff_hunk_cb
p'git_diff_options'old_prefix :: Ptr (C'git_diff_options) -> Ptr (CString)
p'git_diff_range'old_lines :: Ptr (C'git_diff_range) -> Ptr (CInt)
mK'git_diff_hunk_cb :: C'git_diff_hunk_cb -> (Ptr (C'git_diff_delta) -> Ptr (C'git_diff_range) -> CString -> CSize -> Ptr () -> IO CInt)
p'git_diff_options'new_prefix :: Ptr (C'git_diff_options) -> Ptr (CString)
p'git_diff_range'new_start :: Ptr (C'git_diff_range) -> Ptr (CInt)
p'git_diff_options'pathspec :: Ptr (C'git_diff_options) -> Ptr (C'git_strarray)
p'git_diff_range'new_lines :: Ptr (C'git_diff_range) -> Ptr (CInt)
p'git_diff_options'max_size :: Ptr (C'git_diff_options) -> Ptr (CLong)
p'git_diff_options'notify_cb :: Ptr (C'git_diff_options) -> Ptr (C'git_diff_notify_cb)
type C'git_diff_line_t = CUInt
p'git_diff_options'notify_payload :: Ptr (C'git_diff_options) -> Ptr (Ptr ())
c'GIT_DIFF_LINE_CONTEXT :: Num a => a
c'GIT_DIFF_LINE_ADDITION :: Num a => a
c'GIT_DIFF_LINE_DELETION :: Num a => a
c'GIT_DIFF_LINE_ADD_EOFNL :: Num a => a
c'GIT_DIFF_LINE_DEL_EOFNL :: Num a => a
c'GIT_DIFF_LINE_FILE_HDR :: Num a => a
c'GIT_DIFF_LINE_HUNK_HDR :: Num a => a
c'GIT_DIFF_LINE_BINARY :: Num a => a
type C'git_diff_data_cb = FunPtr (Ptr (C'git_diff_delta) -> Ptr (C'git_diff_range) -> CChar -> CString -> CSize -> Ptr () -> IO CInt)
mk'git_diff_data_cb :: (Ptr (C'git_diff_delta) -> Ptr (C'git_diff_range) -> CChar -> CString -> CSize -> Ptr () -> IO CInt) -> IO C'git_diff_data_cb
data C'git_diff_patch
C'git_diff_patch :: C'git_diff_patch
mK'git_diff_data_cb :: C'git_diff_data_cb -> (Ptr (C'git_diff_delta) -> Ptr (C'git_diff_range) -> CChar -> CString -> CSize -> Ptr () -> IO CInt)
type C'git_diff_find_t = CUInt
c'GIT_DIFF_FIND_RENAMES :: Num a => a
c'GIT_DIFF_FIND_RENAMES_FROM_REWRITES :: Num a => a
c'GIT_DIFF_FIND_COPIES :: Num a => a
c'GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED :: Num a => a
c'GIT_DIFF_FIND_AND_BREAK_REWRITES :: Num a => a
c'GIT_DIFF_FIND_ALL :: Num a => a
c'GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE :: Num a => a
c'GIT_DIFF_FIND_IGNORE_WHITESPACE :: Num a => a
c'GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE :: Num a => a
type C'git_diff_similarity_metric_file_signature_callback = FunPtr (Ptr (Ptr ()) -> Ptr C'git_diff_file -> CString -> Ptr () -> IO CInt)
type C'git_diff_similarity_metric_buffer_signature_callback = FunPtr (Ptr (Ptr ()) -> Ptr C'git_diff_file -> CString -> CSize -> Ptr () -> IO CInt)
mk'git_diff_similarity_metric_file_signature_callback :: (Ptr (Ptr ()) -> Ptr C'git_diff_file -> CString -> Ptr () -> IO CInt) -> IO C'git_diff_similarity_metric_file_signature_callback
type C'git_diff_similarity_metric_free_signature_callback = FunPtr (Ptr () -> Ptr () -> IO ())
mk'git_diff_similarity_metric_buffer_signature_callback :: (Ptr (Ptr ()) -> Ptr C'git_diff_file -> CString -> CSize -> Ptr () -> IO CInt) -> IO C'git_diff_similarity_metric_buffer_signature_callback
type C'git_diff_similarity_metric_similarity_callback = FunPtr (Ptr CInt -> Ptr () -> Ptr () -> Ptr () -> IO CInt)
mk'git_diff_similarity_metric_free_signature_callback :: (Ptr () -> Ptr () -> IO ()) -> IO C'git_diff_similarity_metric_free_signature_callback
mK'git_diff_similarity_metric_file_signature_callback :: C'git_diff_similarity_metric_file_signature_callback -> (Ptr (Ptr ()) -> Ptr C'git_diff_file -> CString -> Ptr () -> IO CInt)
mk'git_diff_similarity_metric_similarity_callback :: (Ptr CInt -> Ptr () -> Ptr () -> Ptr () -> IO CInt) -> IO C'git_diff_similarity_metric_similarity_callback
mK'git_diff_similarity_metric_buffer_signature_callback :: C'git_diff_similarity_metric_buffer_signature_callback -> (Ptr (Ptr ()) -> Ptr C'git_diff_file -> CString -> CSize -> Ptr () -> IO CInt)
mK'git_diff_similarity_metric_free_signature_callback :: C'git_diff_similarity_metric_free_signature_callback -> (Ptr () -> Ptr () -> IO ())
mK'git_diff_similarity_metric_similarity_callback :: C'git_diff_similarity_metric_similarity_callback -> (Ptr CInt -> Ptr () -> Ptr () -> Ptr () -> IO CInt)
data C'git_diff_similarity_metric
C'git_diff_similarity_metric :: C'git_diff_similarity_metric_file_signature_callback -> C'git_diff_similarity_metric_buffer_signature_callback -> C'git_diff_similarity_metric_free_signature_callback -> C'git_diff_similarity_metric_similarity_callback -> Ptr () -> C'git_diff_similarity_metric
c'git_diff_similarity_metric'file_signature :: C'git_diff_similarity_metric -> C'git_diff_similarity_metric_file_signature_callback
c'git_diff_similarity_metric'buffer_signature :: C'git_diff_similarity_metric -> C'git_diff_similarity_metric_buffer_signature_callback
c'git_diff_similarity_metric'free_signature :: C'git_diff_similarity_metric -> C'git_diff_similarity_metric_free_signature_callback
c'git_diff_similarity_metric'similarity :: C'git_diff_similarity_metric -> C'git_diff_similarity_metric_similarity_callback
c'git_diff_similarity_metric'payload :: C'git_diff_similarity_metric -> Ptr ()
p'git_diff_similarity_metric'file_signature :: Ptr (C'git_diff_similarity_metric) -> Ptr (C'git_diff_similarity_metric_file_signature_callback)
p'git_diff_similarity_metric'buffer_signature :: Ptr (C'git_diff_similarity_metric) -> Ptr (C'git_diff_similarity_metric_buffer_signature_callback)
p'git_diff_similarity_metric'free_signature :: Ptr (C'git_diff_similarity_metric) -> Ptr (C'git_diff_similarity_metric_free_signature_callback)
p'git_diff_similarity_metric'similarity :: Ptr (C'git_diff_similarity_metric) -> Ptr (C'git_diff_similarity_metric_similarity_callback)
p'git_diff_similarity_metric'payload :: Ptr (C'git_diff_similarity_metric) -> Ptr (Ptr ())
data C'git_diff_find_options
C'git_diff_find_options :: CUInt -> CUInt -> CUInt -> CUInt -> CUInt -> CUInt -> CUInt -> Ptr C'git_diff_similarity_metric -> C'git_diff_find_options
c'git_diff_find_options'version :: C'git_diff_find_options -> CUInt
c'git_diff_find_options'flags :: C'git_diff_find_options -> CUInt
c'git_diff_find_options'rename_threshold :: C'git_diff_find_options -> CUInt
c'git_diff_find_options'rename_from_rewrite_threshold :: C'git_diff_find_options -> CUInt
c'git_diff_find_options'copy_threshold :: C'git_diff_find_options -> CUInt
c'git_diff_find_options'break_rewrite_threshold :: C'git_diff_find_options -> CUInt
c'git_diff_find_options'target_limit :: C'git_diff_find_options -> CUInt
c'git_diff_find_options'metric :: C'git_diff_find_options -> Ptr C'git_diff_similarity_metric
c'git_diff_list_free :: Ptr C'git_diff_list -> IO ()
c'git_diff_tree_to_tree :: Ptr (Ptr C'git_diff_list) -> Ptr C'git_repository -> Ptr C'git_tree -> Ptr C'git_tree -> Ptr C'git_diff_options -> IO (CInt)
p'git_diff_list_free :: FunPtr (Ptr C'git_diff_list -> IO ())
c'git_diff_tree_to_index :: Ptr (Ptr C'git_diff_list) -> Ptr C'git_repository -> Ptr C'git_tree -> Ptr C'git_index -> Ptr C'git_diff_options -> IO (CInt)
c'git_diff_index_to_workdir :: Ptr (Ptr C'git_diff_list) -> Ptr C'git_repository -> Ptr C'git_index -> Ptr C'git_diff_options -> IO (CInt)
p'git_diff_tree_to_tree :: FunPtr (Ptr (Ptr C'git_diff_list) -> Ptr C'git_repository -> Ptr C'git_tree -> Ptr C'git_tree -> Ptr C'git_diff_options -> IO (CInt))
c'git_diff_tree_to_workdir :: Ptr (Ptr C'git_diff_list) -> Ptr C'git_repository -> Ptr C'git_tree -> Ptr C'git_diff_options -> IO (CInt)
p'git_diff_tree_to_index :: FunPtr (Ptr (Ptr C'git_diff_list) -> Ptr C'git_repository -> Ptr C'git_tree -> Ptr C'git_index -> Ptr C'git_diff_options -> IO (CInt))
c'git_diff_merge :: Ptr C'git_diff_list -> Ptr C'git_diff_list -> IO (CInt)
p'git_diff_index_to_workdir :: FunPtr (Ptr (Ptr C'git_diff_list) -> Ptr C'git_repository -> Ptr C'git_index -> Ptr C'git_diff_options -> IO (CInt))
c'git_diff_find_similar :: Ptr C'git_diff_list -> Ptr C'git_diff_find_options -> IO (CInt)
p'git_diff_tree_to_workdir :: FunPtr (Ptr (Ptr C'git_diff_list) -> Ptr C'git_repository -> Ptr C'git_tree -> Ptr C'git_diff_options -> IO (CInt))
p'git_diff_merge :: FunPtr (Ptr C'git_diff_list -> Ptr C'git_diff_list -> IO (CInt))
c'git_diff_foreach :: Ptr C'git_diff_list -> C'git_diff_file_cb -> C'git_diff_hunk_cb -> C'git_diff_data_cb -> Ptr () -> IO (CInt)
c'git_diff_print_compact :: Ptr C'git_diff_list -> C'git_diff_data_cb -> Ptr () -> IO (CInt)
p'git_diff_find_similar :: FunPtr (Ptr C'git_diff_list -> Ptr C'git_diff_find_options -> IO (CInt))
c'git_diff_status_char :: C'git_delta_t -> IO (CChar)
p'git_diff_foreach :: FunPtr (Ptr C'git_diff_list -> C'git_diff_file_cb -> C'git_diff_hunk_cb -> C'git_diff_data_cb -> Ptr () -> IO (CInt))
p'git_diff_find_options'version :: Ptr (C'git_diff_find_options) -> Ptr (CUInt)
c'git_diff_print_patch :: Ptr C'git_diff_list -> C'git_diff_data_cb -> Ptr () -> IO (CInt)
p'git_diff_print_compact :: FunPtr (Ptr C'git_diff_list -> C'git_diff_data_cb -> Ptr () -> IO (CInt))
c'git_diff_num_deltas :: Ptr C'git_diff_list -> IO (CSize)
p'git_diff_status_char :: FunPtr (C'git_delta_t -> IO (CChar))
p'git_diff_find_options'flags :: Ptr (C'git_diff_find_options) -> Ptr (CUInt)
c'git_diff_num_deltas_of_type :: Ptr C'git_diff_list -> C'git_delta_t -> IO (CSize)
p'git_diff_print_patch :: FunPtr (Ptr C'git_diff_list -> C'git_diff_data_cb -> Ptr () -> IO (CInt))
p'git_diff_num_deltas :: FunPtr (Ptr C'git_diff_list -> IO (CSize))
c'git_diff_get_patch :: Ptr (Ptr C'git_diff_patch) -> Ptr (Ptr C'git_diff_delta) -> Ptr C'git_diff_list -> CSize -> IO (CInt)
p'git_diff_find_options'rename_threshold :: Ptr (C'git_diff_find_options) -> Ptr (CUInt)
c'git_diff_patch_free :: Ptr C'git_diff_patch -> IO ()
p'git_diff_num_deltas_of_type :: FunPtr (Ptr C'git_diff_list -> C'git_delta_t -> IO (CSize))
c'git_diff_patch_delta :: Ptr C'git_diff_patch -> IO (Ptr C'git_diff_delta)
p'git_diff_get_patch :: FunPtr (Ptr (Ptr C'git_diff_patch) -> Ptr (Ptr C'git_diff_delta) -> Ptr C'git_diff_list -> CSize -> IO (CInt))
p'git_diff_find_options'rename_from_rewrite_threshold :: Ptr (C'git_diff_find_options) -> Ptr (CUInt)
c'git_diff_patch_num_hunks :: Ptr C'git_diff_patch -> IO (CSize)
p'git_diff_patch_free :: FunPtr (Ptr C'git_diff_patch -> IO ())
p'git_diff_patch_delta :: FunPtr (Ptr C'git_diff_patch -> IO (Ptr C'git_diff_delta))
c'git_diff_patch_line_stats :: Ptr CSize -> Ptr CSize -> Ptr CSize -> Ptr C'git_diff_patch -> IO (CInt)
p'git_diff_find_options'copy_threshold :: Ptr (C'git_diff_find_options) -> Ptr (CUInt)
p'git_diff_patch_num_hunks :: FunPtr (Ptr C'git_diff_patch -> IO (CSize))
c'git_diff_patch_get_hunk :: Ptr (Ptr C'git_diff_range) -> Ptr (CString) -> Ptr CSize -> Ptr CSize -> Ptr C'git_diff_patch -> CSize -> IO (CInt)
c'git_diff_patch_num_lines_in_hunk :: Ptr C'git_diff_patch -> CSize -> IO (CInt)
p'git_diff_patch_line_stats :: FunPtr (Ptr CSize -> Ptr CSize -> Ptr CSize -> Ptr C'git_diff_patch -> IO (CInt))
p'git_diff_find_options'break_rewrite_threshold :: Ptr (C'git_diff_find_options) -> Ptr (CUInt)
c'git_diff_patch_get_line_in_hunk :: CString -> Ptr (CString) -> Ptr CSize -> Ptr CInt -> Ptr CInt -> Ptr C'git_diff_patch -> CSize -> CSize -> IO (CInt)
p'git_diff_patch_get_hunk :: FunPtr (Ptr (Ptr C'git_diff_range) -> Ptr (CString) -> Ptr CSize -> Ptr CSize -> Ptr C'git_diff_patch -> CSize -> IO (CInt))
p'git_diff_patch_num_lines_in_hunk :: FunPtr (Ptr C'git_diff_patch -> CSize -> IO (CInt))
c'git_diff_patch_print :: Ptr C'git_diff_patch -> C'git_diff_data_cb -> Ptr () -> IO (CInt)
p'git_diff_find_options'target_limit :: Ptr (C'git_diff_find_options) -> Ptr (CUInt)
c'git_diff_patch_to_str :: Ptr (CString) -> Ptr C'git_diff_patch -> IO (CInt)
p'git_diff_patch_get_line_in_hunk :: FunPtr (CString -> Ptr (CString) -> Ptr CSize -> Ptr CInt -> Ptr CInt -> Ptr C'git_diff_patch -> CSize -> CSize -> IO (CInt))
p'git_diff_patch_print :: FunPtr (Ptr C'git_diff_patch -> C'git_diff_data_cb -> Ptr () -> IO (CInt))
c'git_diff_blobs :: Ptr C'git_blob -> Ptr C'git_blob -> Ptr C'git_diff_options -> C'git_diff_file_cb -> C'git_diff_hunk_cb -> C'git_diff_data_cb -> Ptr () -> IO (CInt)
p'git_diff_find_options'metric :: Ptr (C'git_diff_find_options) -> Ptr (Ptr C'git_diff_similarity_metric)
p'git_diff_patch_to_str :: FunPtr (Ptr (CString) -> Ptr C'git_diff_patch -> IO (CInt))
c'git_diff_blob_to_buffer :: Ptr C'git_blob -> CString -> CSize -> Ptr C'git_diff_options -> C'git_diff_file_cb -> C'git_diff_hunk_cb -> C'git_diff_data_cb -> Ptr () -> IO (CInt)
p'git_diff_blobs :: FunPtr (Ptr C'git_blob -> Ptr C'git_blob -> Ptr C'git_diff_options -> C'git_diff_file_cb -> C'git_diff_hunk_cb -> C'git_diff_data_cb -> Ptr () -> IO (CInt))
p'git_diff_blob_to_buffer :: FunPtr (Ptr C'git_blob -> CString -> CSize -> Ptr C'git_diff_options -> C'git_diff_file_cb -> C'git_diff_hunk_cb -> C'git_diff_data_cb -> Ptr () -> IO (CInt))
instance Eq C'git_diff_file
instance Show C'git_diff_file
instance Eq C'git_diff_delta
instance Show C'git_diff_delta
instance Eq C'git_diff_options
instance Show C'git_diff_options
instance Eq C'git_diff_range
instance Show C'git_diff_range
instance Eq C'git_diff_similarity_metric
instance Show C'git_diff_similarity_metric
instance Eq C'git_diff_find_options
instance Show C'git_diff_find_options
instance Storable C'git_diff_find_options
instance Storable C'git_diff_similarity_metric
instance Storable C'git_diff_range
instance Storable C'git_diff_options
instance Storable C'git_diff_delta
instance Storable C'git_diff_file

module Bindings.Libgit2.Commit
c'git_commit_lookup :: Ptr (Ptr C'git_commit) -> Ptr C'git_repository -> Ptr C'git_oid -> IO (CInt)
c'git_commit_lookup_prefix :: Ptr (Ptr C'git_commit) -> Ptr C'git_repository -> Ptr C'git_oid -> CSize -> IO (CInt)
c'git_commit_free :: Ptr C'git_commit -> IO ()
c'git_commit_id :: Ptr C'git_commit -> IO (Ptr C'git_oid)
c'git_commit_message_encoding :: Ptr C'git_commit -> IO (CString)
c'git_commit_message :: Ptr C'git_commit -> IO (CString)
c'git_commit_time :: Ptr C'git_commit -> IO (CLong)
p'git_commit_message_encoding :: FunPtr (Ptr C'git_commit -> IO (CString))
c'git_commit_time_offset :: Ptr C'git_commit -> IO (CInt)
p'git_commit_message :: FunPtr (Ptr C'git_commit -> IO (CString))
p'git_commit_time :: FunPtr (Ptr C'git_commit -> IO (CLong))
c'git_commit_committer :: Ptr C'git_commit -> IO (Ptr C'git_signature)
p'git_commit_time_offset :: FunPtr (Ptr C'git_commit -> IO (CInt))
c'git_commit_author :: Ptr C'git_commit -> IO (Ptr C'git_signature)
c'git_commit_tree :: Ptr (Ptr C'git_tree) -> Ptr C'git_commit -> IO (CInt)
p'git_commit_committer :: FunPtr (Ptr C'git_commit -> IO (Ptr C'git_signature))
c'git_commit_tree_id :: Ptr C'git_commit -> IO (Ptr C'git_oid)
p'git_commit_author :: FunPtr (Ptr C'git_commit -> IO (Ptr C'git_signature))
c'git_commit_parentcount :: Ptr C'git_commit -> IO (CUInt)
p'git_commit_tree :: FunPtr (Ptr (Ptr C'git_tree) -> Ptr C'git_commit -> IO (CInt))
p'git_commit_tree_id :: FunPtr (Ptr C'git_commit -> IO (Ptr C'git_oid))
c'git_commit_parent :: Ptr (Ptr C'git_commit) -> Ptr C'git_commit -> CUInt -> IO (CInt)
p'git_commit_parentcount :: FunPtr (Ptr C'git_commit -> IO (CUInt))
c'git_commit_parent_id :: Ptr C'git_commit -> CUInt -> IO (Ptr C'git_oid)
c'git_commit_nth_gen_ancestor :: Ptr (Ptr C'git_commit) -> Ptr C'git_commit -> CUInt -> IO (CInt)
p'git_commit_parent :: FunPtr (Ptr (Ptr C'git_commit) -> Ptr C'git_commit -> CUInt -> IO (CInt))
p'git_commit_parent_id :: FunPtr (Ptr C'git_commit -> CUInt -> IO (Ptr C'git_oid))
c'git_commit_create :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_signature -> Ptr C'git_signature -> CString -> CString -> Ptr C'git_tree -> CInt -> Ptr (Ptr C'git_commit) -> IO (CInt)
p'git_commit_nth_gen_ancestor :: FunPtr (Ptr (Ptr C'git_commit) -> Ptr C'git_commit -> CUInt -> IO (CInt))
c'git_commit_create_v :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_signature -> Ptr C'git_signature -> CString -> CString -> Ptr C'git_tree -> CInt -> IO (CInt)
c'git_commit_create_oid :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_signature -> Ptr C'git_signature -> CString -> CString -> Ptr C'git_oid -> CInt -> Ptr (Ptr C'git_oid) -> IO (CInt)
p'git_commit_create :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_signature -> Ptr C'git_signature -> CString -> CString -> Ptr C'git_tree -> CInt -> Ptr (Ptr C'git_commit) -> IO (CInt))
p'git_commit_create_v :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_signature -> Ptr C'git_signature -> CString -> CString -> Ptr C'git_tree -> CInt -> IO (CInt))
p'git_commit_create_oid :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> Ptr C'git_signature -> Ptr C'git_signature -> CString -> CString -> Ptr C'git_oid -> CInt -> Ptr (Ptr C'git_oid) -> IO (CInt))

module Bindings.Libgit2.Checkout
type C'git_checkout_strategy_t = CUInt
c'GIT_CHECKOUT_NONE :: Num a => a
c'GIT_CHECKOUT_SAFE :: Num a => a
c'GIT_CHECKOUT_SAFE_CREATE :: Num a => a
c'GIT_CHECKOUT_FORCE :: Num a => a
c'GIT_CHECKOUT_ALLOW_CONFLICTS :: Num a => a
c'GIT_CHECKOUT_REMOVE_UNTRACKED :: Num a => a
c'GIT_CHECKOUT_REMOVE_IGNORED :: Num a => a
c'GIT_CHECKOUT_UPDATE_ONLY :: Num a => a
c'GIT_CHECKOUT_DONT_UPDATE_INDEX :: Num a => a
c'GIT_CHECKOUT_NO_REFRESH :: Num a => a
c'GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH :: Num a => a
c'GIT_CHECKOUT_SKIP_UNMERGED :: Num a => a
c'GIT_CHECKOUT_USE_OURS :: Num a => a
c'GIT_CHECKOUT_USE_THEIRS :: Num a => a
c'GIT_CHECKOUT_UPDATE_SUBMODULES :: Num a => a
c'GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED :: Num a => a
type C'git_checkout_notify_t = CUInt
c'GIT_CHECKOUT_NOTIFY_NONE :: Num a => a
c'GIT_CHECKOUT_NOTIFY_CONFLICT :: Num a => a
c'GIT_CHECKOUT_NOTIFY_DIRTY :: Num a => a
c'GIT_CHECKOUT_NOTIFY_UPDATED :: Num a => a
c'GIT_CHECKOUT_NOTIFY_UNTRACKED :: Num a => a
c'GIT_CHECKOUT_NOTIFY_IGNORED :: Num a => a
type C'git_checkout_notify_cb = FunPtr (C'git_checkout_notify_t -> CString -> Ptr (C'git_diff_file) -> Ptr (C'git_diff_file) -> Ptr (C'git_diff_file) -> Ptr () -> IO CInt)
mk'git_checkout_notify_cb :: (C'git_checkout_notify_t -> CString -> Ptr (C'git_diff_file) -> Ptr (C'git_diff_file) -> Ptr (C'git_diff_file) -> Ptr () -> IO CInt) -> IO C'git_checkout_notify_cb
mK'git_checkout_notify_cb :: C'git_checkout_notify_cb -> (C'git_checkout_notify_t -> CString -> Ptr (C'git_diff_file) -> Ptr (C'git_diff_file) -> Ptr (C'git_diff_file) -> Ptr () -> IO CInt)
type C'git_checkout_progress_cb = FunPtr (CString -> CSize -> CSize -> Ptr () -> IO ())
mk'git_checkout_progress_cb :: (CString -> CSize -> CSize -> Ptr () -> IO ()) -> IO C'git_checkout_progress_cb
mK'git_checkout_progress_cb :: C'git_checkout_progress_cb -> (CString -> CSize -> CSize -> Ptr () -> IO ())
data C'git_checkout_opts
C'git_checkout_opts :: CUInt -> CUInt -> CInt -> CUInt -> CUInt -> CInt -> CUInt -> C'git_checkout_notify_cb -> Ptr () -> C'git_checkout_progress_cb -> Ptr () -> C'git_strarray -> Ptr C'git_tree -> C'git_checkout_opts
c'git_checkout_opts'version :: C'git_checkout_opts -> CUInt
c'git_checkout_opts'checkout_strategy :: C'git_checkout_opts -> CUInt
c'git_checkout_opts'disable_filters :: C'git_checkout_opts -> CInt
c'git_checkout_opts'dir_mode :: C'git_checkout_opts -> CUInt
c'git_checkout_opts'file_mode :: C'git_checkout_opts -> CUInt
c'git_checkout_opts'file_open_flags :: C'git_checkout_opts -> CInt
c'git_checkout_opts'notify_flags :: C'git_checkout_opts -> CUInt
c'git_checkout_opts'notify_cb :: C'git_checkout_opts -> C'git_checkout_notify_cb
c'git_checkout_opts'notify_payload :: C'git_checkout_opts -> Ptr ()
c'git_checkout_opts'progress_cb :: C'git_checkout_opts -> C'git_checkout_progress_cb
c'git_checkout_opts'progress_payload :: C'git_checkout_opts -> Ptr ()
c'git_checkout_opts'paths :: C'git_checkout_opts -> C'git_strarray
c'git_checkout_opts'baseline :: C'git_checkout_opts -> Ptr C'git_tree
c'git_checkout_head :: Ptr C'git_repository -> Ptr C'git_checkout_opts -> IO (CInt)
c'git_checkout_index :: Ptr C'git_repository -> Ptr C'git_index -> Ptr C'git_checkout_opts -> IO (CInt)
p'git_checkout_head :: FunPtr (Ptr C'git_repository -> Ptr C'git_checkout_opts -> IO (CInt))
c'git_checkout_tree :: Ptr C'git_repository -> Ptr C'git_object -> Ptr C'git_checkout_opts -> IO (CInt)
p'git_checkout_index :: FunPtr (Ptr C'git_repository -> Ptr C'git_index -> Ptr C'git_checkout_opts -> IO (CInt))
p'git_checkout_tree :: FunPtr (Ptr C'git_repository -> Ptr C'git_object -> Ptr C'git_checkout_opts -> IO (CInt))
p'git_checkout_opts'version :: Ptr (C'git_checkout_opts) -> Ptr (CUInt)
p'git_checkout_opts'checkout_strategy :: Ptr (C'git_checkout_opts) -> Ptr (CUInt)
p'git_checkout_opts'disable_filters :: Ptr (C'git_checkout_opts) -> Ptr (CInt)
p'git_checkout_opts'dir_mode :: Ptr (C'git_checkout_opts) -> Ptr (CUInt)
p'git_checkout_opts'file_mode :: Ptr (C'git_checkout_opts) -> Ptr (CUInt)
p'git_checkout_opts'file_open_flags :: Ptr (C'git_checkout_opts) -> Ptr (CInt)
p'git_checkout_opts'notify_flags :: Ptr (C'git_checkout_opts) -> Ptr (CUInt)
p'git_checkout_opts'notify_cb :: Ptr (C'git_checkout_opts) -> Ptr (C'git_checkout_notify_cb)
p'git_checkout_opts'notify_payload :: Ptr (C'git_checkout_opts) -> Ptr (Ptr ())
p'git_checkout_opts'progress_cb :: Ptr (C'git_checkout_opts) -> Ptr (C'git_checkout_progress_cb)
p'git_checkout_opts'progress_payload :: Ptr (C'git_checkout_opts) -> Ptr (Ptr ())
p'git_checkout_opts'paths :: Ptr (C'git_checkout_opts) -> Ptr (C'git_strarray)
p'git_checkout_opts'baseline :: Ptr (C'git_checkout_opts) -> Ptr (Ptr C'git_tree)
instance Eq C'git_checkout_opts
instance Show C'git_checkout_opts
instance Storable C'git_checkout_opts

module Bindings.Libgit2.Clone
data C'git_clone_options
C'git_clone_options :: CUInt -> C'git_checkout_opts -> CInt -> CInt -> Ptr () -> CString -> CString -> CString -> CString -> CInt -> Ptr () -> Ptr C'git_transport -> Ptr C'git_remote_callbacks -> C'git_remote_autotag_option_t -> CString -> C'git_clone_options
c'git_clone_options'version :: C'git_clone_options -> CUInt
c'git_clone_options'checkout_opts :: C'git_clone_options -> C'git_checkout_opts
c'git_clone_options'bare :: C'git_clone_options -> CInt
c'git_clone_options'fetch_progress_cb :: C'git_clone_options -> CInt
c'git_clone_options'fetch_progress_payload :: C'git_clone_options -> Ptr ()
c'git_clone_options'remote_name :: C'git_clone_options -> CString
c'git_clone_options'pushurl :: C'git_clone_options -> CString
c'git_clone_options'fetch_spec :: C'git_clone_options -> CString
c'git_clone_options'push_spec :: C'git_clone_options -> CString
c'git_clone_options'cred_acquire_cb :: C'git_clone_options -> CInt
c'git_clone_options'cred_acquire_payload :: C'git_clone_options -> Ptr ()
c'git_clone_options'transport :: C'git_clone_options -> Ptr C'git_transport
c'git_clone_options'remote_callbacks :: C'git_clone_options -> Ptr C'git_remote_callbacks
c'git_clone_options'remote_autotag :: C'git_clone_options -> C'git_remote_autotag_option_t
c'git_clone_options'checkout_branch :: C'git_clone_options -> CString
c'git_clone :: Ptr (Ptr C'git_repository) -> CString -> CString -> Ptr C'git_clone_options -> IO (CInt)
p'git_clone :: FunPtr (Ptr (Ptr C'git_repository) -> CString -> CString -> Ptr C'git_clone_options -> IO (CInt))
p'git_clone_options'version :: Ptr (C'git_clone_options) -> Ptr (CUInt)
p'git_clone_options'checkout_opts :: Ptr (C'git_clone_options) -> Ptr (C'git_checkout_opts)
p'git_clone_options'bare :: Ptr (C'git_clone_options) -> Ptr (CInt)
p'git_clone_options'fetch_progress_cb :: Ptr (C'git_clone_options) -> Ptr (CInt)
p'git_clone_options'fetch_progress_payload :: Ptr (C'git_clone_options) -> Ptr (Ptr ())
p'git_clone_options'remote_name :: Ptr (C'git_clone_options) -> Ptr (CString)
p'git_clone_options'pushurl :: Ptr (C'git_clone_options) -> Ptr (CString)
p'git_clone_options'fetch_spec :: Ptr (C'git_clone_options) -> Ptr (CString)
p'git_clone_options'push_spec :: Ptr (C'git_clone_options) -> Ptr (CString)
p'git_clone_options'cred_acquire_cb :: Ptr (C'git_clone_options) -> Ptr (CInt)
p'git_clone_options'cred_acquire_payload :: Ptr (C'git_clone_options) -> Ptr (Ptr ())
p'git_clone_options'transport :: Ptr (C'git_clone_options) -> Ptr (Ptr C'git_transport)
p'git_clone_options'remote_callbacks :: Ptr (C'git_clone_options) -> Ptr (Ptr C'git_remote_callbacks)
p'git_clone_options'remote_autotag :: Ptr (C'git_clone_options) -> Ptr (C'git_remote_autotag_option_t)
p'git_clone_options'checkout_branch :: Ptr (C'git_clone_options) -> Ptr (CString)
instance Eq C'git_clone_options
instance Show C'git_clone_options
instance Storable C'git_clone_options

module Bindings.Libgit2.Branch
c'git_branch_create :: Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> Ptr C'git_commit -> CInt -> IO (CInt)
c'git_branch_delete :: Ptr C'git_reference -> IO (CInt)
p'git_branch_create :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> Ptr C'git_commit -> CInt -> IO (CInt))
p'git_branch_delete :: FunPtr (Ptr C'git_reference -> IO (CInt))
type C'git_branch_foreach_cb = FunPtr (CString -> C'git_branch_t -> Ptr () -> IO (CInt))
c'git_branch_foreach :: Ptr C'git_repository -> CUInt -> C'git_branch_foreach_cb -> Ptr () -> IO (CInt)
mk'git_branch_foreach_cb :: (CString -> C'git_branch_t -> Ptr () -> IO (CInt)) -> IO C'git_branch_foreach_cb
c'git_branch_move :: Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> CString -> CInt -> IO (CInt)
mK'git_branch_foreach_cb :: C'git_branch_foreach_cb -> (CString -> C'git_branch_t -> Ptr () -> IO (CInt))
p'git_branch_foreach :: FunPtr (Ptr C'git_repository -> CUInt -> C'git_branch_foreach_cb -> Ptr () -> IO (CInt))
c'git_branch_lookup :: Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> C'git_branch_t -> IO (CInt)
c'git_branch_name :: Ptr (CString) -> Ptr C'git_reference -> IO (CInt)
p'git_branch_move :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> CString -> CInt -> IO (CInt))
c'git_branch_upstream :: Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> IO (CInt)
p'git_branch_lookup :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_repository -> CString -> C'git_branch_t -> IO (CInt))
c'git_branch_set_upstream :: Ptr C'git_reference -> CString -> IO (CInt)
p'git_branch_name :: FunPtr (Ptr (CString) -> Ptr C'git_reference -> IO (CInt))
c'git_branch_upstream_name :: CString -> CSize -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_branch_upstream :: FunPtr (Ptr (Ptr C'git_reference) -> Ptr C'git_reference -> IO (CInt))
c'git_branch_is_head :: Ptr C'git_reference -> IO (CInt)
p'git_branch_set_upstream :: FunPtr (Ptr C'git_reference -> CString -> IO (CInt))
c'git_branch_remote_name :: CString -> CSize -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_branch_upstream_name :: FunPtr (CString -> CSize -> Ptr C'git_repository -> CString -> IO (CInt))
p'git_branch_is_head :: FunPtr (Ptr C'git_reference -> IO (CInt))
p'git_branch_remote_name :: FunPtr (CString -> CSize -> Ptr C'git_repository -> CString -> IO (CInt))

module Bindings.Libgit2.Blob
c'git_blob_lookup :: Ptr (Ptr C'git_blob) -> Ptr C'git_repository -> Ptr C'git_oid -> IO (CInt)
c'git_blob_lookup_prefix :: Ptr (Ptr C'git_blob) -> Ptr C'git_repository -> Ptr C'git_oid -> CSize -> IO (CInt)
c'git_blob_free :: Ptr C'git_blob -> IO ()
c'git_blob_id :: Ptr C'git_blob -> IO (Ptr C'git_oid)
c'git_blob_rawcontent :: Ptr C'git_blob -> IO (Ptr ())
c'git_blob_rawsize :: Ptr C'git_blob -> IO (CLong)
p'git_blob_rawcontent :: FunPtr (Ptr C'git_blob -> IO (Ptr ()))
c'git_blob_create_fromworkdir :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_blob_rawsize :: FunPtr (Ptr C'git_blob -> IO (CLong))
c'git_blob_create_fromdisk :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> IO (CInt)
p'git_blob_create_fromworkdir :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> IO (CInt))
p'git_blob_create_fromdisk :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> IO (CInt))
type C'git_blob_chunk_cb = FunPtr (CString -> CSize -> Ptr () -> IO CInt)
mk'git_blob_chunk_cb :: (CString -> CSize -> Ptr () -> IO CInt) -> IO C'git_blob_chunk_cb
c'git_blob_create_fromchunks :: Ptr C'git_oid -> Ptr C'git_repository -> CString -> C'git_blob_chunk_cb -> Ptr () -> IO (CInt)
c'git_blob_create_frombuffer :: Ptr C'git_oid -> Ptr C'git_repository -> Ptr () -> CSize -> IO (CInt)
c'git_blob_is_binary :: Ptr C'git_blob -> IO (CInt)
mK'git_blob_chunk_cb :: C'git_blob_chunk_cb -> (CString -> CSize -> Ptr () -> IO CInt)
p'git_blob_create_fromchunks :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> CString -> C'git_blob_chunk_cb -> Ptr () -> IO (CInt))
p'git_blob_create_frombuffer :: FunPtr (Ptr C'git_oid -> Ptr C'git_repository -> Ptr () -> CSize -> IO (CInt))
p'git_blob_is_binary :: FunPtr (Ptr C'git_blob -> IO (CInt))

module Bindings.Libgit2.Attr
type C'git_attr_t = CUInt
c'GIT_ATTR_UNSPECIFIED_T :: Num a => a
c'GIT_ATTR_TRUE_T :: Num a => a
c'GIT_ATTR_FALSE_T :: Num a => a
c'GIT_ATTR_VALUE_T :: Num a => a
c'git_attr_value :: CString -> IO (C'git_attr_t)
c'git_attr_get :: Ptr (CString) -> Ptr C'git_repository -> CUInt -> CString -> CString -> IO (CInt)
p'git_attr_value :: FunPtr (CString -> IO (C'git_attr_t))
c'git_attr_get_many :: Ptr (CString) -> Ptr C'git_repository -> CUInt -> CString -> CSize -> Ptr (CString) -> IO (CInt)
type C'git_attr_foreach_callback = FunPtr (CString -> CString -> Ptr () -> IO CInt)
p'git_attr_get :: FunPtr (Ptr (CString) -> Ptr C'git_repository -> CUInt -> CString -> CString -> IO (CInt))
mk'git_attr_foreach_callback :: (CString -> CString -> Ptr () -> IO CInt) -> IO C'git_attr_foreach_callback
c'git_attr_foreach :: Ptr C'git_repository -> CUInt -> CString -> C'git_attr_foreach_callback -> Ptr () -> IO (CInt)
p'git_attr_get_many :: FunPtr (Ptr (CString) -> Ptr C'git_repository -> CUInt -> CString -> CSize -> Ptr (CString) -> IO (CInt))
c'git_attr_cache_flush :: Ptr C'git_repository -> IO ()
c'git_attr_add_macro :: Ptr C'git_repository -> CString -> CString -> IO (CInt)
mK'git_attr_foreach_callback :: C'git_attr_foreach_callback -> (CString -> CString -> Ptr () -> IO CInt)
p'git_attr_foreach :: FunPtr (Ptr C'git_repository -> CUInt -> CString -> C'git_attr_foreach_callback -> Ptr () -> IO (CInt))
p'git_attr_cache_flush :: FunPtr (Ptr C'git_repository -> IO ())
p'git_attr_add_macro :: FunPtr (Ptr C'git_repository -> CString -> CString -> IO (CInt))

module Bindings.Libgit2

-- | Write an IO action so that proper initialization and shutdown of the
--   thread libgit2 library is performed.
withLibGitDo :: IO a -> IO a
