-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Experimental markdown processor.
--   
@package cheapskate
@version 0.1.0.4

module Cheapskate.Types

-- | Structured representation of a document. The <a>Options</a> affect how
--   the document is rendered by <tt>toHtml</tt>.
data Doc
Doc :: Options -> Blocks -> Doc

-- | Block-level elements.
data Block
Para :: Inlines -> Block
Header :: Int -> Inlines -> Block
Blockquote :: Blocks -> Block
List :: Bool -> ListType -> [Blocks] -> Block
CodeBlock :: CodeAttr -> Text -> Block
HtmlBlock :: Text -> Block
HRule :: Block

-- | Attributes for fenced code blocks. <a>codeLang</a> is the first word
--   of the attribute line, <a>codeInfo</a> is the rest.
data CodeAttr
CodeAttr :: Text -> Text -> CodeAttr
codeLang :: CodeAttr -> Text
codeInfo :: CodeAttr -> Text
data ListType
Bullet :: Char -> ListType
Numbered :: NumWrapper -> Int -> ListType
data NumWrapper
PeriodFollowing :: NumWrapper
ParenFollowing :: NumWrapper

-- | Simple representation of HTML tag.
data HtmlTagType
Opening :: Text -> HtmlTagType
Closing :: Text -> HtmlTagType
SelfClosing :: Text -> HtmlTagType
type Blocks = Seq Block

-- | Inline elements.
data Inline
Str :: Text -> Inline
Space :: Inline
SoftBreak :: Inline
LineBreak :: Inline
Emph :: Inlines -> Inline
Strong :: Inlines -> Inline
Code :: Text -> Inline
Link :: Inlines -> Text -> Text -> Inline
Image :: Inlines -> Text -> Text -> Inline
Entity :: Text -> Inline
RawHtml :: Text -> Inline
type Inlines = Seq Inline
type ReferenceMap = Map Text (Text, Text)

-- | Rendering and parsing options.
data Options
Options :: Bool -> Bool -> Bool -> Bool -> Options

-- | Sanitize raw HTML, link/image attributes
sanitize :: Options -> Bool

-- | Allow raw HTML (if false it gets escaped)
allowRawHtml :: Options -> Bool

-- | Preserve hard line breaks in the source
preserveHardBreaks :: Options -> Bool

-- | Print container structure for debugging
debug :: Options -> Bool
instance Typeable CodeAttr
instance Typeable NumWrapper
instance Typeable ListType
instance Typeable HtmlTagType
instance Typeable Inline
instance Typeable Block
instance Typeable Options
instance Typeable Doc
instance Show CodeAttr
instance Data CodeAttr
instance Eq NumWrapper
instance Show NumWrapper
instance Data NumWrapper
instance Eq ListType
instance Show ListType
instance Data ListType
instance Show HtmlTagType
instance Data HtmlTagType
instance Show Inline
instance Data Inline
instance Show Block
instance Data Block
instance Show Options
instance Data Options
instance Show Doc
instance Data Doc
instance Default Options

module Cheapskate.Html

-- | Render a markdown document as <a>Html</a>. (This can be turned into a
--   <a>Text</a> or <tt>ByteString</tt> using a renderer from the
--   <tt>blaze-html</tt> library.)
renderDoc :: Doc -> Html
renderBlocks :: Options -> Blocks -> Html
renderInlines :: Options -> Inlines -> Html

module Cheapskate.Parse

-- | Parses the input as a markdown document. Note that <a>Doc</a> is an
--   instance of <tt>ToMarkup</tt>, so the document can be converted to
--   <tt>Html</tt> using <tt>toHtml</tt>. A simple <a>Text</a> to
--   <tt>Html</tt> filter would be
--   
--   <pre>
--   markdownToHtml :: Text -&gt; Html
--   markdownToHtml = toHtml . markdown def
--   </pre>
markdown :: Options -> Text -> Doc
instance Eq ContainerType
instance Show ContainerType
instance Show Leaf
instance Show Elt
instance Show Container

module Cheapskate

-- | Parses the input as a markdown document. Note that <a>Doc</a> is an
--   instance of <tt>ToMarkup</tt>, so the document can be converted to
--   <tt>Html</tt> using <tt>toHtml</tt>. A simple <a>Text</a> to
--   <tt>Html</tt> filter would be
--   
--   <pre>
--   markdownToHtml :: Text -&gt; Html
--   markdownToHtml = toHtml . markdown def
--   </pre>
markdown :: Options -> Text -> Doc

-- | The default value for this type.
def :: Default a => a

-- | Apply a transformation bottom-up to every node of a parsed document.
--   This can be used, for example, to transform specially marked code
--   blocks to highlighted code or images. Here is a simple example that
--   promotes the levels of headers:
--   
--   <pre>
--   promoteHeaders :: Doc -&gt; Doc
--   promoteHeaders = walk promoteHeader
--     where promoteHeader (Header n ils) = Header (n+1) ils
--           promoteHeader x              = x
--   </pre>
walk :: (Data a, Data b) => (a -> a) -> (b -> b)

-- | Monadic version of <a>walk</a>.
walkM :: (Data a, Data b, Monad m) => (a -> m a) -> (b -> m b)
instance ToMarkup Doc
