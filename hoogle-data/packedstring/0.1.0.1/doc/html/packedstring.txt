-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | (Deprecated) Packed Strings.
--   
--   (Deprecated) Packed Strings.
@package packedstring
@version 0.1.0.1


-- | This API is deprecated. You might be able to use Data.ByteString or
--   Data.ByteString.Char8 from the bytestring package, provided you don't
--   need full Unicode support. The long term aim is to provide a Unicode
--   layer on Data.ByteString, and then to provide a replacement for this
--   <a>Data.PackedString</a> API based on that.
module Data.PackedString

-- | A space-efficient representation of a <a>String</a>, which supports
--   various efficient operations. A <a>PackedString</a> contains full
--   Unicode <a>Char</a>s.
data PackedString

-- | Convert a <a>String</a> into a <a>PackedString</a>
packString :: String -> PackedString

-- | Convert a <a>PackedString</a> into a <a>String</a>
unpackPS :: PackedString -> String

-- | Outputs a <a>PackedString</a> to the specified <a>Handle</a>.
--   
--   NOTE: the representation of the <a>PackedString</a> in the file is
--   assumed to be in the ISO-8859-1 encoding. In other words, only the
--   least significant byte is taken from each character in the
--   <a>PackedString</a>.
hPutPS :: Handle -> PackedString -> IO ()

-- | Read a <a>PackedString</a> directly from the specified <a>Handle</a>.
--   This is far more efficient than reading the characters into a
--   <a>String</a> and then using <a>packString</a>.
--   
--   NOTE: as with <a>hPutPS</a>, the string representation in the file is
--   assumed to be ISO-8859-1.
hGetPS :: Handle -> Int -> IO PackedString

-- | The <a>nilPS</a> value is the empty string.
nilPS :: PackedString

-- | The <a>consPS</a> function prepends the given character to the given
--   string.
consPS :: Char -> PackedString -> PackedString

-- | The <a>headPS</a> function returns the first element of a
--   <a>PackedString</a> or throws an error if the string is empty.
headPS :: PackedString -> Char

-- | The <a>tailPS</a> function returns the tail of a <a>PackedString</a>
--   or throws an error if the string is empty.
tailPS :: PackedString -> PackedString

-- | The <a>nullPS</a> function returns True iff the argument is null.
nullPS :: PackedString -> Bool

-- | The <a>appendPS</a> function appends the second string onto the first.
appendPS :: PackedString -> PackedString -> PackedString

-- | The <a>lengthPS</a> function returns the length of the input list.
--   Analogous to <a>length</a>.
lengthPS :: PackedString -> Int

-- | The <a>indexPS</a> function returns the character in the string at the
--   given position.
indexPS :: PackedString -> Int -> Char

-- | The <a>mapPS</a> function applies a function to each character in the
--   string.
mapPS :: (Char -> Char) -> PackedString -> PackedString

-- | The <a>filterPS</a> function filters out the appropriate substring.
filterPS :: (Char -> Bool) -> PackedString -> PackedString

-- | The <a>reversePS</a> function reverses the string.
reversePS :: PackedString -> PackedString

-- | The <a>concatPS</a> function concatenates a list of
--   <a>PackedString</a>s.
concatPS :: [PackedString] -> PackedString

-- | The <a>elemPS</a> function returns True iff the given element is in
--   the string.
elemPS :: Char -> PackedString -> Bool

-- | The <a>substrPS</a> function takes a <a>PackedString</a> and two
--   indices and returns the substring of the input string between (and
--   including) these indices.
substrPS :: PackedString -> Int -> Int -> PackedString

-- | The <a>takePS</a> function takes the first <tt>n</tt> characters of a
--   <a>PackedString</a>.
takePS :: Int -> PackedString -> PackedString

-- | The <a>dropPS</a> function drops the first <tt>n</tt> characters of a
--   <a>PackedString</a>.
dropPS :: Int -> PackedString -> PackedString

-- | The <a>splitWithPS</a> function splits a <a>PackedString</a> at a
--   given index.
splitAtPS :: Int -> PackedString -> (PackedString, PackedString)

-- | The <a>foldlPS</a> function behaves like <a>foldl</a> on
--   <a>PackedString</a>s.
foldlPS :: (a -> Char -> a) -> a -> PackedString -> a

-- | The <a>foldrPS</a> function behaves like <a>foldr</a> on
--   <a>PackedString</a>s.
foldrPS :: (Char -> a -> a) -> a -> PackedString -> a

-- | The <a>takeWhilePS</a> function is analogous to the <a>takeWhile</a>
--   function.
takeWhilePS :: (Char -> Bool) -> PackedString -> PackedString

-- | The <a>dropWhilePS</a> function is analogous to the <a>dropWhile</a>
--   function.
dropWhilePS :: (Char -> Bool) -> PackedString -> PackedString

-- | The <a>spanPS</a> function returns a pair containing the result of
--   running both <a>takeWhilePS</a> and <a>dropWhilePS</a>.
spanPS :: (Char -> Bool) -> PackedString -> (PackedString, PackedString)

-- | The <a>breakPS</a> function breaks a string at the first position
--   which satisfies the predicate.
breakPS :: (Char -> Bool) -> PackedString -> (PackedString, PackedString)

-- | The <a>linesPS</a> function splits the input on line-breaks.
linesPS :: PackedString -> [PackedString]

-- | The <a>unlinesPS</a> function concatenates the input list after
--   interspersing newlines.
unlinesPS :: [PackedString] -> PackedString

-- | The <a>wordsPS</a> function is analogous to the <a>words</a> function.
wordsPS :: PackedString -> [PackedString]

-- | The <a>unwordsPS</a> function is analogous to the <a>unwords</a>
--   function.
unwordsPS :: [PackedString] -> PackedString

-- | The <a>splitPS</a> function splits the input string on each occurrence
--   of the given <a>Char</a>.
splitPS :: Char -> PackedString -> [PackedString]

-- | The <a>splitWithPS</a> function takes a character predicate and splits
--   the input string at each character which satisfies the predicate.
splitWithPS :: (Char -> Bool) -> PackedString -> [PackedString]

-- | The <a>joinPS</a> function takes a <a>PackedString</a> and a list of
--   <a>PackedString</a>s and concatenates the list after interspersing the
--   first argument between each element of the list.
joinPS :: PackedString -> [PackedString] -> PackedString
instance Data PackedString
instance Typeable PackedString
instance Show PackedString
instance Ord PackedString
instance Eq PackedString
