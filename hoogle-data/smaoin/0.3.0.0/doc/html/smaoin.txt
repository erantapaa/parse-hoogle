-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities for the Smaoin semantic information model.
--   
@package smaoin
@version 0.3.0.0

module Data.Smaoin

-- | A Smaoin resource identifier, also known as a Uid.
--   
--   A resource in Smaoin is some idea or object in the broad sense, which
--   can be described using statements, and be related to other resources.
newtype Resource
Resource :: ByteString -> Resource

-- | Shortcut for creating a <a>Resource</a> from a <a>String</a>. The
--   string is simply converted into a byte sequence.
res :: String -> Resource

-- | Arbitrary precision real number.
--   
--   While <tt>RealNum</tt> is an instance of <tt>Num</tt>, the
--   implementation isn't intended for general math use, and is probably
--   much simpler than what the scientific Haskell packages provide.
--   However, it is certainly suitable for basic manipulations.
data RealNum

-- | Get the significand of a <a>RealNum</a>, i.e. the <i>s</i> in <i>s *
--   10^e</i>
sig :: RealNum -> Integer

-- | Get the exponent of a <a>RealNum</a>, i.e. the <i>e</i> in <i>s *
--   10^e</i>
expo :: RealNum -> Integer

-- | Create a <a>RealNum</a>. The first argument is the significand, and
--   the second is an exponent. <tt>realnum s e</tt> represents the number
--   <tt>s * 10^e</tt>. This representation allows to precisely encode any
--   real number expressed in Idan (excluding rational numbers expressed as
--   ratios).
realnum :: Integer -> Integer -> RealNum

-- | Arbitrary-precision rational numbers, represented as a ratio of two
--   <a>Integer</a> values. A rational number may be constructed using the
--   <a>%</a> operator.
type Rational = Ratio Integer

-- | A Smaoin number can be represented as a real number or as a ratio.
data Number
RealNumber :: RealNum -> Number
RatioNumber :: Rational -> Number

-- | A Smaoin value, i.e. an entity with predefined meaning and traits. The
--   type can be specified statically through a dedicated data constructor,
--   or generically as a resource.
data Value
Boolean :: Bool -> Value
Number :: Number -> Value
Character :: Char -> Value
String :: Text -> Value
Chunk :: ByteString -> Value
Generic :: Text -> Resource -> Value

-- | A Smaoin entity. It is the atomic concept in Smaoin: Everything is an
--   entity. An entity can be described (resource) or predefined (value).
data Entity
ResourceE :: Resource -> Entity
ValueE :: Value -> Entity

-- | Statements can be grouped in lists and containers to form simple
--   in-memory datastores, query results and so on.
--   
--   Parameters are: Identifier, subject, predicate, object.
data Statement
Statement :: Resource -> Resource -> Resource -> Entity -> Statement
data ObjectSection
ObjectSection :: Entity -> Resource -> ObjectSection

-- | A predicate section is meant to be attached to a subject. It describes
--   it through one or more statements. It expresses
--   predicate-object-identifier triples. But instead of repeating
--   predicates, it gives each predicate its own set of object-identifier
--   pairs.
--   
--   Parameters: Predicate; Objects and identifiers.
data PredicateSection
PredicateSection :: Resource -> [ObjectSection] -> PredicateSection

-- | A statement block describes a single subject, by expressing one or
--   more statements which share that subject. The predicate sections
--   contain the predicates, objects and identifiers. With the subject
--   attached, they form statements. Statement blocks can be grouped in
--   lists and countainers to form simple in-memory datastores, query
--   results and so on.
--   
--   Parameters: 1) Subject; 2) Predicates, objects, identifiers.
data StatementBlock
StatementBlock :: Resource -> [PredicateSection] -> StatementBlock

-- | Create a fresh new Uid. It is randomly generated, using the global
--   random generator. <a>Resource</a> is a <a>Random</a> instance, so you
--   can use any other random generator.
generateUid :: IO Resource
instance Eq Resource
instance Show Resource
instance Eq RealNum
instance Show RealNum
instance Eq Number
instance Show Number
instance Eq Value
instance Show Value
instance Eq Entity
instance Show Entity
instance Eq Statement
instance Show Statement
instance Show ObjectSection
instance Show PredicateSection
instance Show StatementBlock
instance Num RealNum
instance Random Resource
