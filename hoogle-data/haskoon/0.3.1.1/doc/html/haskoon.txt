-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Web Application Abstraction
--   
--   Web Astraction Layer with a binding to CGI providing a simple way to
--   map parameter and header values to data structures (inspired by HAppS)
--   and a sitemap functionality to map URLs to functions that answer the
--   request.
@package haskoon
@version 0.3.1.1

module Factis.Haskoon.WebHelper
statusCodeMessageMap :: [(Int, String)]

module Factis.Haskoon.RqAccess
class (MonadPlus m) => RqAccess m
param :: (RqAccess m) => String -> m String
header :: (RqAccess m) => String -> m String
repl :: (RqAccess m) => Int -> m String
cookie :: (RqAccess m) => String -> m String
checkMethod :: (RqAccess m) => (String -> Bool) -> m String
class FromRq a
fromRq :: (FromRq a, RqAccess m) => m a

module Factis.Haskoon.RqAccessM
data RqData
RqData :: String -> [(String, String)] -> [(String, String)] -> [String] -> [(String, String)] -> RqData
rqd_method :: RqData -> String
rqd_params :: RqData -> [(String, String)]
rqd_headers :: RqData -> [(String, String)]
rqd_repls :: RqData -> [String]
rqd_cookies :: RqData -> [(String, String)]
class (MonadPlus m) => RqAccess m
param :: (RqAccess m) => String -> m String
header :: (RqAccess m) => String -> m String
repl :: (RqAccess m) => Int -> m String
cookie :: (RqAccess m) => String -> m String
checkMethod :: (RqAccess m) => (String -> Bool) -> m String
newtype RqAccessM a
RqAccessM :: (RqRead a) -> RqAccessM a
runRqAccessM :: RqAccessM t -> RqData -> Either String t
instance Monad RqAccessM
instance MonadPlus RqAccessM
instance RqAccess RqAccessM

module Factis.Haskoon.Web

-- | You may either define <tt>webRec</tt> or all of
--   <tt>webDocumentRoot</tt>, <tt>webContainerUri</tt>,
--   <tt>webPathInfo</tt>, <tt>webMethod</tt>, <tt>webGetBody</tt>,
--   <tt>webGetParams</tt>, <tt>webGetHeaders</tt>, <tt>webGetCookies</tt>,
--   <tt>webSetStatus</tt>, <tt>webSendBSL</tt>, <tt>webSetHeader</tt>,
--   <tt>webSetCookie</tt>, <tt>webUnsetCookie</tt>, <tt>webLog</tt> and
--   <tt>webGetRepls</tt>, <tt>webWithRepls</tt> and <tt>webFail</tt>.
class (Monad m) => Web m where { type family WebRes m; { webGetParam n = liftM (lookup n) webGetParams webGetHeader n = liftM lookup' webGetHeaders where lookup' = fmap snd . find ((== map toLower n) . map toLower . fst) webSendError status msg = do { webSetStatus status Nothing; webSetHeader "Content-Type" "text/plain; charset=UTF-8"; webSendBSL (fromString msg) } webRunFromRq = do { meth <- webMethod; headers <- webGetHeaders; repls <- webGetRepls; params <- webGetParams; cookies <- webGetCookies; let rqdata = RqData meth params headers repls cookies; return (runRqAccessM fromRq rqdata) } webFail = web_fail webRec webWithRepls = web_withRepls webRec webGetRepls = web_getRepls webRec webLog = web_log webRec webUnsetCookie = web_unsetCookie webRec webSetCookie = web_setCookie webRec webSetHeader = web_setHeader webRec webSendBSL = web_sendBSL webRec webSetStatus = web_setStatus webRec webGetCookies = web_getCookies webRec webGetHeaders = web_getHeaders webRec webGetParams = web_getParams webRec webGetBody = web_getBody webRec webMethod = web_method webRec webPathInfo = web_pathInfo webRec webRequestUri = web_requestUri webRec webContainerUri = web_containerUri webRec webDocumentRoot = web_documentRoot webRec webRec = WebRec webDocumentRoot webContainerUri webRequestUri webPathInfo webMethod webGetBody webGetParams webGetHeaders webGetCookies webSetStatus webSendBSL webSetHeader webSetCookie webUnsetCookie webLog webGetRepls webFail webWithRepls } }
webRec :: (Web m) => WebRec m
webDocumentRoot :: (Web m) => m FilePath
webContainerUri :: (Web m) => m URI
webRequestUri :: (Web m) => m URI
webPathInfo :: (Web m) => m String
webMethod :: (Web m) => m String
webGetBody :: (Web m) => m ByteString
webGetParams :: (Web m) => m WebParams
webGetHeaders :: (Web m) => m WebHeaders
webGetCookies :: (Web m) => m WebCookies
webSetStatus :: (Web m) => Int -> Maybe String -> m ()
webSendBSL :: (Web m) => ByteString -> m (WebRes m)
webSetHeader :: (Web m) => String -> String -> m ()
webSetCookie :: (Web m) => Cookie -> m ()
webUnsetCookie :: (Web m) => Cookie -> m ()
webLog :: (Web m) => String -> Priority -> String -> m ()
webGetRepls :: (Web m) => m [String]
webWithRepls :: (Web m) => [String] -> m a -> m a
webFail :: (Web m) => String -> m a
webRunFromRq :: (Web m, FromRq a) => m (Either String a)
webSendError :: (Web m) => Int -> String -> m (WebRes m)
webGetHeader :: (Web m) => String -> m (Maybe String)
webGetParam :: (Web m) => String -> m (Maybe String)
class (MonadIO m, Web m) => WebIO m
class FromRq a
fromRq :: (FromRq a, RqAccess m) => m a
class ToWebRes a
toWebContentType :: (ToWebRes a) => a -> String
toWebBody :: (ToWebRes a) => a -> ByteString
toWebRes :: (ToWebRes a, Web m) => a -> m (WebRes m)
type WebWebRes m = m (WebRes m)
data WebRec m
WebRec :: m FilePath -> m URI -> m URI -> m String -> m String -> m ByteString -> m WebParams -> m WebHeaders -> m WebCookies -> (Int -> Maybe String -> m ()) -> (ByteString -> m (WebRes m)) -> (String -> String -> m ()) -> (Cookie -> m ()) -> (Cookie -> m ()) -> (String -> Priority -> String -> m ()) -> m [String] -> (forall a. String -> m a) -> (forall a. [String] -> m a -> m a) -> WebRec m
web_documentRoot :: WebRec m -> m FilePath
web_containerUri :: WebRec m -> m URI
web_requestUri :: WebRec m -> m URI
web_pathInfo :: WebRec m -> m String
web_method :: WebRec m -> m String
web_getBody :: WebRec m -> m ByteString
web_getParams :: WebRec m -> m WebParams
web_getHeaders :: WebRec m -> m WebHeaders
web_getCookies :: WebRec m -> m WebCookies
web_setStatus :: WebRec m -> Int -> Maybe String -> m ()
web_sendBSL :: WebRec m -> ByteString -> m (WebRes m)
web_setHeader :: WebRec m -> String -> String -> m ()
web_setCookie :: WebRec m -> Cookie -> m ()
web_unsetCookie :: WebRec m -> Cookie -> m ()
web_log :: WebRec m -> String -> Priority -> String -> m ()
web_getRepls :: WebRec m -> m [String]
web_fail :: WebRec m -> forall a. String -> m a
web_withRepls :: WebRec m -> forall a. [String] -> m a -> m a
webRepl :: (Web m) => Int -> m String
webOk :: (Web m, ToWebRes a) => a -> m (WebRes m)
webNotFound :: (Web m) => [Char] -> m (WebRes m)
webFileNotFound :: (Web m) => [Char] -> m (WebRes m)
webBadRequest :: (Web m) => [Char] -> m (WebRes m)
webSendString :: (Web m) => String -> m (WebRes m)
webGetCookie :: (Web m) => String -> m (Maybe String)
webRedirect :: (Web m) => Bool -> String -> m (WebRes m)
webWithData :: (Web m, FromRq a) => (a -> m (WebRes m)) -> m (WebRes m)
webCheckData :: (Web m, FromRq a) => (a -> m (WebRes m)) -> (String -> m (WebRes m)) -> m (WebRes m)
webSendFile :: (WebIO m) => FilePath -> m (WebRes m)
notEmpty :: (Monad m) => m String -> m String
optional :: (MonadPlus m) => m a -> m (Maybe a)
webLogNotice :: (Web m) => String -> m ()
webLogTrace :: (Web m) => String -> m ()
webLogDebug :: (Web m) => String -> m ()

-- | Contains all information about a cookie set by the server.
data Cookie :: *
Cookie :: String -> String -> Maybe CalendarTime -> Maybe String -> Maybe String -> Bool -> Cookie

-- | Name of the cookie.
cookieName :: Cookie -> String

-- | Value of the cookie.
cookieValue :: Cookie -> String

-- | Expiry date of the cookie. If <a>Nothing</a>, the cookie expires when
--   the browser sessions ends. If the date is in the past, the client
--   should delete the cookie immediately.
cookieExpires :: Cookie -> Maybe CalendarTime

-- | The domain suffix to which this cookie will be sent.
cookieDomain :: Cookie -> Maybe String

-- | The path to which this cookie will be sent.
cookiePath :: Cookie -> Maybe String

-- | <a>True</a> if this cookie should only be sent using secure means.
cookieSecure :: Cookie -> Bool

-- | Construct a cookie with only name and value set. This client will
--   expire when the browser sessions ends, will only be sent to the server
--   and path which set it and may be sent using any means.
newCookie :: String -> String -> Cookie

-- | Get the value of a cookie from a string on the form
--   <tt>"cookieName1=cookieValue1;...;cookieName2=cookieValue2"</tt>. This
--   is the format of the <tt>Cookie</tt> HTTP header.
findCookie :: String -> String -> Maybe String

-- | Delete a cookie from the client by setting the cookie expiry date to a
--   date in the past.
deleteCookie :: Cookie -> Cookie

-- | Show a cookie on the format used as the value of the Set-Cookie
--   header.
showCookie :: Cookie -> String

-- | Gets all the cookies from a Cookie: header value
readCookies :: String -> [(String, String)]
instance ToWebRes String

module Factis.Haskoon.WebTrans
class (MonadTrans t) => WebTrans t
liftWeb :: (WebTrans t, Web m) => m a -> t m a
liftWebFun :: (WebTrans t, Web m) => (forall a. m a -> m a) -> t m b -> t m b
liftWebRec :: (Web m, WebTrans t) => (m (WebRes m) -> m (WebRes (t m))) -> WebRec m -> WebRec (t m)

module Factis.Haskoon.WebSitemap
data SitemapT m a
type Sitemap m = [SitemapT m (WebRes m)]
liftMaybe :: (Web m) => m (Maybe a) -> SitemapT m a
matchFirst :: (Web m) => [SitemapT m (WebRes m)] -> SitemapT m (WebRes m)
matchPath :: (Web m) => String -> SitemapT m (WebRes m) -> SitemapT m (WebRes m)
matchRegex :: (Web m) => String -> SitemapT m (WebRes m) -> SitemapT m (WebRes m)
matchMeth :: (Web m) => String -> SitemapT m a -> SitemapT m a
runSitemapT :: (Web m) => SitemapT m a -> m (Maybe a)
fromSitemapT :: (Web m) => SitemapT m (WebRes m) -> m (WebRes m) -> m (WebRes m)
runSitemap :: (Web m) => Sitemap m -> m (WebRes m)
runWithSitemap :: (Web m) => (m (WebRes m) -> a) -> Sitemap m -> a
instance (Monad m) => Monad (SitemapT m)
instance (MonadIO m) => MonadIO (SitemapT m)
instance MonadTrans SitemapT
instance (MonadIO m, Web m) => WebIO (SitemapT m)
instance (Web m) => MonadPlus (SitemapT m)
instance WebTrans SitemapT
instance (Web m) => Web (SitemapT m)

module Factis.Haskoon.WebIdT
class (MonadTrans t) => WebTrans t
liftWeb :: (WebTrans t, Web m) => m a -> t m a
liftWebFun :: (WebTrans t, Web m) => (forall a. m a -> m a) -> t m b -> t m b
newtype WebIdT m a
WebIdT :: m a -> WebIdT m a
runWebIdT :: WebIdT m a -> m a
instance (Monad m) => Monad (WebIdT m)
instance WebTrans WebIdT
instance (MonadIO m) => MonadIO (WebIdT m)
instance MonadTrans WebIdT

module Factis.Haskoon.WebCGI
data WebCGI m a
runFastCgi :: String -> CGIT IO CGIResult -> IO ()
runFastWebCGI :: String -> WebWebRes (WebCGI (CGIT IO)) -> IO ()
runWebCGI :: (MonadCGI m, MonadIO m) => WebCGI m a -> m (Either String a)
runWebCGIResult :: (MonadIO m, MonadCGI m) => WebCGI m (WebRes (WebCGI m)) -> m CGIResult
instance (Monad m) => Monad (WebCGI m)
instance (MonadIO m) => MonadIO (WebCGI m)
instance (MonadCGI m, MonadIO m) => WebIO (WebCGI m)
instance (MonadCGI m) => MonadCGI (MaybeT m)
instance (MonadIO m, MonadCGI m) => Web (WebCGI m)

module Factis.Haskoon.WebHsp
type HSPT m :: (* -> *) = XMLGenT (HSPT' m)

-- | The XML datatype representation. Is either an Element or CDATA.
data XML :: *
asChild :: (EmbedAsChild m c) => c -> GenChildList m
genElement :: (XMLGen m) => Name -> [XMLGenT m [Attribute m]] -> [XMLGenT m [Child m]] -> XMLGenT m (XML m)
genEElement :: (XMLGen m) => Name -> [XMLGenT m [Attribute m]] -> XMLGenT m (XML m)
asAttr :: (EmbedAsAttr m a) => a -> GenAttributeList m
data Attr n a :: * -> * -> *
(:=) :: n -> a -> Attr n a
webHspHtml :: (WebIO m) => HSPT m XML -> m (WebRes m)
webToHsp :: (Web m) => m a -> HSPT m a

module Factis.Haskoon.WebReaderT
data WebReaderT r m a
runWebReaderT :: (Monad m) => WebReaderT r m a -> r -> m a
instance (Monad m) => Monad (WebReaderT r m)
instance MonadTrans (WebReaderT r)
instance (MonadIO m) => MonadIO (WebReaderT r m)
instance (Web m) => Web (WebReaderT r m)
instance WebTrans (WebReaderT r)
instance (Monad m) => MonadReader r (WebReaderT r m)
