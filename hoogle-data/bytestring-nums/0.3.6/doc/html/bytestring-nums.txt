-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parse numeric literals from ByteStrings.
--   
--   Parse numeric literals from ByteStrings.
@package bytestring-nums
@version 0.3.6

module Data.ByteString.Nums.Careless.Hex

-- | Types that can be read from hexadecimal strings. Characters that are
--   not hexadecimal digits are skipped over. One pleasant consequence of
--   this is that a leading <tt>0x</tt> is simply ignored.
class Num n => Hexable b n
hex :: Hexable b n => b -> n
hexalize :: Num n => n -> Word8 -> n
strict_hex :: Num n => ByteString -> n
lazy_hex :: Num n => ByteString -> n
instance Hexable ByteString Integer
instance Hexable ByteString Rational
instance Hexable ByteString Double
instance Hexable ByteString Float
instance Hexable ByteString Int
instance Hexable ByteString Int64
instance Hexable ByteString Int32
instance Hexable ByteString Int16
instance Hexable ByteString Int8
instance Hexable ByteString Word
instance Hexable ByteString Word64
instance Hexable ByteString Word32
instance Hexable ByteString Word16
instance Hexable ByteString Word8
instance Hexable ByteString Integer
instance Hexable ByteString Rational
instance Hexable ByteString Double
instance Hexable ByteString Float
instance Hexable ByteString Int
instance Hexable ByteString Int64
instance Hexable ByteString Int32
instance Hexable ByteString Int16
instance Hexable ByteString Int8
instance Hexable ByteString Word
instance Hexable ByteString Word64
instance Hexable ByteString Word32
instance Hexable ByteString Word16
instance Hexable ByteString Word8

module Data.ByteString.Nums.Careless.Int

-- | Types that can be read from integer strings. Parses only decimal
--   digits. Signed types can be read from strings that begin with a plus
--   or minus; unsigned types are read from strings consisting solely of
--   decimal digits.
class Num n => Intable b n
int :: Intable b n => b -> n
lazy_unsigned :: Num n => ByteString -> n
lazy_signed :: Num n => ByteString -> n
strict_unsigned :: Num n => ByteString -> n
strict_signed :: Num n => ByteString -> n
positive :: Num n => n -> Word8 -> n
negative :: Num n => n -> Word8 -> n
instance Intable ByteString Integer
instance Intable ByteString Rational
instance Intable ByteString Double
instance Intable ByteString Float
instance Intable ByteString Int
instance Intable ByteString Int64
instance Intable ByteString Int32
instance Intable ByteString Int16
instance Intable ByteString Int8
instance Intable ByteString Word
instance Intable ByteString Word64
instance Intable ByteString Word32
instance Intable ByteString Word16
instance Intable ByteString Word8
instance Intable ByteString Integer
instance Intable ByteString Rational
instance Intable ByteString Double
instance Intable ByteString Float
instance Intable ByteString Int
instance Intable ByteString Int64
instance Intable ByteString Int32
instance Intable ByteString Int16
instance Intable ByteString Int8
instance Intable ByteString Word
instance Intable ByteString Word64
instance Intable ByteString Word32
instance Intable ByteString Word16
instance Intable ByteString Word8

module Data.ByteString.Nums.Careless.Float

-- | Types that can be read from floating point strings. A floating point
--   string is taken to be a string of digits with up to one comma or
--   period mixed in with the digits.
class (Intable b f, Fractional f) => Floatable b f
float :: Floatable b f => b -> f
strict_float :: Fractional f => ByteString -> f
lazy_float :: Fractional f => ByteString -> f
point :: Char -> Bool
instance Floatable ByteString Rational
instance Floatable ByteString Double
instance Floatable ByteString Float
instance Floatable ByteString Rational
instance Floatable ByteString Double
instance Floatable ByteString Float


-- | Careless conversion of <tt>ByteString</tt>s to numbers, ignoring bytes
--   that aren't hex or decimal digits.
module Data.ByteString.Nums.Careless
