-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Functional Implementation of the Garsia-Wachs Algorithm
--   
--   The Garsia-Wachs algorithm builds a binary tree with minimum weighted
--   path length from weighted leaf nodes given in symmetric order. This
--   can be used to build optimum search tables, to balance a <a>ropes</a>
--   data structure in an optimal way.
@package garsia-wachs
@version 1.2


-- | This module a direct translation from ML of the functional pearl <a>A
--   Functional Implementation of the Garsia-Wachs Algorithm</a>
--   
--   This pearl was presented by Jean-Christophe Fillitre on the ML
--   Workshop 2008.
--   
--   Quote from the paper:
--   
--   <pre>
--   This functional pearl proposes an ML implementation of the
--   Garsia-Wachs algorithm. This somewhat obscure algorithm builds
--   a binary tree with minimum weighted path length from weighted
--   leaf nodes given in symmetric order. Our solution exhibits the usual
--   benefits of functional programming (use of immutable data structures,
--   pattern-matching, polymorphism) and nicely compares to
--   the purely imperative implementation from The Art of Computer
--   Programming.
--   </pre>
--   
--   <pre>
--   The Garsia-Wachs algorithm addresses the following problem.
--   Given a sequence of values X0, ..., Xn, together with nonnegative
--   integer weights w0, ..., wn, we want to construct a binary tree with
--   X0, ..., Xn as leaf nodes in symmetric order, such that the sum
--   </pre>
--   
--   <pre>
--   sum [ w!i * d!i | i &lt;- [i..n] ]
--   </pre>
--   
--   <pre>
--   is minimum, where di is the distance of leaf node Xi to the root.
--   </pre>
--   
--   <pre>
--   This can be used to build optimum search tables, when data is
--   organized within a binary search tree and when access frequencies
--   are known in advance. It may also be used to balance a <tt>ropes</tt>
--   data structure in an optimal way, since a rope is precisely a
--   binary tree with a character string on each leaf; thus taking
--   wi as the length of this string would minimize the average
--   access cost to a character in the rope.
--   </pre>
module Data.Algorithm.GarsiaWachs
data Tree a
Leaf :: a -> Tree a
Node :: !Tree a -> !Tree a -> Tree a
garsiaWachs :: (Ord i, Num i) => [(a, i)] -> Maybe (Tree a)
instance Show a => Show (Tree a)
instance Eq a => Eq (Tree a)
instance Traversable Tree
instance Foldable Tree
instance Functor Tree
