-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Chemistry
--   
@package radium
@version 0.4.2


-- | Module Radium.Formats.Smiles Copyright : Copyright (C) 2014 Krzysztof
--   Langner License : BSD3
--   
--   Maintainer : Krzysztof Langner <a>klangner@gmail.com</a> Stability :
--   alpha Portability : portable
--   
--   SMILES is popular format for describing the structure of chemical
--   molecules.
--   http:/<i>en.wikipedia.org</i>wiki/Simplified_molecular-input_line-entry_system
module Radium.Formats.Smiles

-- | Parses textual representation
readSmiles :: String -> Smiles

-- | Write SMILES to string
writeSmiles :: Smiles -> String
instance Eq Smiles
instance Show Smiles


-- | Parser for condensed formula format
--   (http:/<i>en.wikipedia.org</i>wiki/Structural_formula#Condensed_formulas).
--   . Formula can be entered as H2O, 2H2O, SO4+2 (Sulfate) or (CH3)2CO
--   (Acetone)
module Radium.Formats.Condensed
data Molecule a
Ion :: (Molecule a) -> Int -> Molecule a
Molecule :: [Molecule a] -> Int -> Molecule a
Element :: a -> Int -> Molecule a

-- | Parse formula
--   
--   <pre>
--   parseFormula "C2H4" `shouldBe` Molecule [Element "C" 2, Element "H", 4)]  
--   </pre>
readCondensed :: String -> SymbolMolecule

-- | Write Molecule to string
writeCondensed :: SymbolMolecule -> String
instance Eq a => Eq (Molecule a)
instance Show a => Show (Molecule a)
instance Functor Molecule


-- | Module Radium.Element Copyright : Copyright (C) 2014 Krzysztof Langner
--   License : BSD3
--   
--   Maintainer : Krzysztof Langner <a>klangner@gmail.com</a> Stability :
--   alpha Portability : portable
--   
--   This module contains Periodic Table with information about all known
--   elements.
module Radium.Element
data Element
atomicNumber :: Element -> Int
atomWeight :: Element -> Double
electroNegativity :: Element -> Double
ionizationEnergy :: Element -> Double

-- | Show number of electrons in each shell For elements which are
--   exception to Aufbau principle configuration is given manually Is it
--   possible to calculate it for all elements based only on atom
--   properties?
--   
--   <pre>
--   let e = element 8
--   shellElectrons e == [2, 6] 
--   </pre>
electronConfig :: Element -> [Int]

-- | Find element by its atomic number
--   
--   <pre>
--   atomicNumber (element 8) == 8 
--   </pre>
element :: Int -> Element

-- | Find element by its symbol
--   
--   <pre>
--   atomicNumber (elementBySymbol "O") == 8 
--   </pre>
elementBySymbol :: String -> Element

-- | Number of valance electrons
--   
--   <pre>
--   let e = element 8
--   valanceElectrons e == 6 
--   </pre>
valanceElectrons :: Element -> Int

-- | Number of covalent bounds in element
--   
--   <pre>
--   let e = element 8
--   covalentBounds e == 2 
--   </pre>
covalentBounds :: Element -> Int
instance Eq Element
instance Show Element
