-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parser and serializer for the Kort information language.
--   
@package language-kort
@version 0.1.0.0

module Language.Kort.Types

-- | A resource, either an actual Uid or a placeholder.
data Resource

-- | A resource Uid.
Uid :: String -> Resource

-- | A generator with a label. When generating Uids to fill the
--   placeholders, generators with the same label get assigned the same
--   Uid.
LGenerator :: String -> Resource

-- | A unique generator. When generating Uids, it will get assigned its own
--   unique Uid.
UGenerator :: Resource

-- | A statement element, i.e. a relation tuple member. Either a resource
--   or a value with a literal and a type resource.
data Element
Resource :: Resource -> Element
Value :: String -> Resource -> Element

-- | Kort comment line.
type Comment = String

-- | A tuple of arbitrary arity, which is a member of a given relation.
--   Parameters:
--   
--   <ol>
--   <li>Identifier</li>
--   <li>Relation</li>
--   <li>Elements: subject, object, etc.</li>
--   </ol>
data Statement
Statement :: Resource -> Resource -> [Element] -> Statement

-- | A Kort line. Either a comment or an arbitrary-arity statement.
type Line = Either Comment Statement

-- | A Kort document, represented as a list of lines. Note that in Kort the
--   order of lines is semantically insignificant.
type Document = [Line]

-- | Returned when the parser fails.
type ParseError = LexError Line

-- | Returned from the parser. Provides either the parsed line, or error
--   information.
type ParseResult = LexResult Line

-- | A structure storing generated Uids for insertion to placeholders.
type UidMap = ([(String, String)], [String])
instance Eq Resource
instance Show Resource
instance Eq Element
instance Show Element
instance Eq Statement
instance Show Statement

module Language.Kort.UidGen

-- | Check if a statement has generators.
stmtHasGens :: Statement -> Bool

-- | Check if a document has generators.
docHasGens :: Document -> Bool

-- | Replace generators with newly generated unique resources.
generateResources :: RandomGen g => Document -> g -> (Document, g)

-- | Like <a>generateResources</a>, but uses specifically the global system
--   random generator.
generateResourcesIO :: Document -> IO Document

-- | Replace generators with dummy resource Uids (ASCII question marks).
sweepGenerators :: Document -> Document

module Language.Kort.Writer

-- | Write Kort model into a <a>String</a>.
writeString :: Document -> String

-- | Write Kort model into <a>Text</a>.
writeText :: Document -> Text

-- | Write Kort model into a file.
writeFile :: FilePath -> Document -> IO ()

-- | Write a Smaoin value as a Kort literal.
fromSmaoinValue :: Value -> (String, Resource)

-- | Write a Smaoin model as a Kort document.
fromSmaoinModel :: [Statement] -> Document

module Language.Kort.Parser

-- | Parse Kort source text from a <a>String</a>.
parseString :: String -> ParseResult

-- | Parse Kort source text from <a>Text</a>.
parseText :: Text -> ParseResult

-- | Parse Kort source text read from a file.
parseFile :: FilePath -> IO ParseResult

-- | Parse a Kort literal into a typed value. Return an error message if
--   the literal body format doesn't match the type.
toSmaoinValue :: String -> Resource -> Either String Value

-- | Convert from the Kort document model to a list of Smaoin statements.
--   
--   This function doesn't handle Uid generation or other shortcuts. It
--   just collects statements invalid for Smaoin and statements with
--   generators into separate lists. If you want Uids to be generated, use
--   the functions in <a>Language.Kort.UidGen</a>.
--   
--   5 lists are returned:
--   
--   <ol>
--   <li>Kort statements which don't have exactly 2 elements</li>
--   <li>Kort statements with 2 elements, but containing generators</li>
--   <li>Kort statements with 2 elements, but the 1st is a value, not a
--   resource</li>
--   <li>Kort statement with 2 elements, but invalid object value</li>
--   <li>Successfully converted Smaoin statements</li>
--   </ol>
--   
--   Kort comments are ignored and dropped.
toSmaoinModel :: Document -> ([Statement], [Statement], [Statement], [Statement], [Statement])

module Language.Kort
