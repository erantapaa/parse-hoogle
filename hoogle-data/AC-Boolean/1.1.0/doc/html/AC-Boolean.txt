-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Handle Boolean values generatically.
--   
--   This package provides various functions and classes for dealing with
--   things which are like Boolean values. It also defines a few useful
--   instances. The main benefit is the ability to use the usual
--   <tt>&amp;&amp;</tt>, etc. operators without having to invent new
--   operator names for every kind of Bool-like thing.
--   
--   Changes:
--   
--   <ul>
--   <li>Increase efficiency of <tt>Boolean</tt> instance for
--   <tt>Bool</tt>.</li>
--   <li>Shorten source code.</li>
--   <li>Remove function instance. (<tt>Control.Monad.Instances</tt>
--   provides an equivilent <tt>Monad</tt> instance.)</li>
--   </ul>
@package AC-Boolean
@version 1.1.0


-- | Type classes (and instances) for things that are like Booleans.
--   
--   The names of methods in <a>Boolean</a> clash with the standard
--   Prelude, so you probably want to inport the Prelude hiding these three
--   names (since the class methods do the same thing, but with more
--   general type signatures).
--   
--   Please note the following points:
--   
--   <ul>
--   <li>This module imports <a>Control.Monad.Instances</a>, which brings
--   several new <a>Monad</a> instances into scope.</li>
--   <li>Among other things, a monad instance for functions is brought into
--   scope. This, combined with the <a>Boolean</a> instance for monads,
--   causes any function that returns a <a>Boolean</a> to become a
--   <a>Boolean</a> itself. This allows you to write constructions such as
--   <tt>(&gt; 5) &amp;&amp; (&lt; 9)</tt>, which has the obvious
--   meaning.</li>
--   <li>Another interesting consequence of the <a>Boolean</a> instance for
--   monads is that <a>Maybe</a> <a>Bool</a> is a <a>Boolean</a>. You can
--   use this to implement 3-value logic ("true", "false" and "other"),
--   with <a>Nothing</a> implementing "other". Any logical operations yield
--   <a>Nothing</a> unless all arguments are <a>Just</a> something. (This
--   is usually the behaviour you want.)</li>
--   </ul>
module Data.Boolean

-- | Typeclass for things that have true and false values.
--   
--   Instances:
--   
--   <ul>
--   <li>Normal <a>Bool</a> values (obviously).</li>
--   <li>Any function that yields a <a>BoolValue</a> as its result.
--   (<tt><a>true</a> = <a>const</a> <a>True</a></tt>, <tt><a>false</a> =
--   <a>const</a> <a>False</a></tt>) This instance arrises due to the monad
--   instance for functions.</li>
--   <li>Any monadic action that yields a <a>BoolValue</a> as its result.
--   (<tt><a>true</a> = <a>return</a> <a>True</a></tt>, <tt><a>false</a> =
--   <a>return</a> <a>False</a></tt>)</li>
--   </ul>
class BoolValue b
true :: BoolValue b => b
false :: BoolValue b => b

-- | Convert a <a>Bool</a> value to the appropriate <a>BoolValue</a>.
lift_bool :: BoolValue b => Bool -> b

-- | Typeclass for things that support Boolean operators.
--   
--   Instances:
--   
--   <ul>
--   <li>Normal <a>Bool</a> values (obviously).</li>
--   <li>Any function that returns a <a>Boolean</a>. This instance arrises
--   due to the monad instance for functions.</li>
--   <li>Any monadic action that returns a <a>Boolean</a>. The left action
--   is performed before the right action (which may be significant,
--   depending on the monad).</li>
--   </ul>
class Boolean b
(&&) :: Boolean b => b -> b -> b
(||) :: Boolean b => b -> b -> b
not :: Boolean b => b -> b
xor :: Boolean b => b -> b -> b
instance (Monad m, Boolean b) => Boolean (m b)
instance Boolean Bool
instance (Monad m, BoolValue b) => BoolValue (m b)
instance BoolValue Bool
