-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Low level bindings to libusb.
--   
--   Low level bindings to <tt>libusb-1.*</tt>:
--   
--   <a>http://libusb.sourceforge.net/api-1.0/</a>
--   
--   This package uses <tt>bindings-DSL</tt> and conforms to its naming
--   convention.
--   
--   For a higher-level and more Haskell friendly binding (which uses this
--   package) see the <tt>usb</tt> package:
--   
--   <a>http://hackage.haskell.org/package/usb</a>
@package bindings-libusb
@version 1.4.5.0


-- | <a>http://libusb.sourceforge.net/api-1.0/group__misc.html</a>
module Bindings.Libusb.Miscellaneous
type C'libusb_capability = CUInt
c'LIBUSB_CAP_HAS_CAPABILITY :: Num a => a
c'LIBUSB_CAP_HAS_HOTPLUG :: Num a => a
c'LIBUSB_CAP_HAS_HID_ACCESS :: Num a => a
c'LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER :: Num a => a
c'libusb_has_capability :: C'libusb_capability -> CInt
c'libusb_cpu_to_le16 :: Word16 -> Word16
p'libusb_has_capability :: FunPtr (C'libusb_capability -> CInt)
c'libusb_le16_to_cpu :: Word16 -> Word16
type C'libusb_standard_request = CUInt
c'LIBUSB_REQUEST_GET_STATUS :: Num a => a
c'LIBUSB_REQUEST_CLEAR_FEATURE :: Num a => a
c'LIBUSB_REQUEST_SET_FEATURE :: Num a => a
c'LIBUSB_REQUEST_SET_ADDRESS :: Num a => a
c'LIBUSB_REQUEST_GET_DESCRIPTOR :: Num a => a
c'LIBUSB_REQUEST_SET_DESCRIPTOR :: Num a => a
c'LIBUSB_REQUEST_GET_CONFIGURATION :: Num a => a
c'LIBUSB_REQUEST_SET_CONFIGURATION :: Num a => a
c'LIBUSB_REQUEST_GET_INTERFACE :: Num a => a
c'LIBUSB_REQUEST_SET_INTERFACE :: Num a => a
c'LIBUSB_REQUEST_SYNCH_FRAME :: Num a => a
type C'libusb_request_type = CUInt
c'LIBUSB_REQUEST_TYPE_STANDARD :: Num a => a
c'LIBUSB_REQUEST_TYPE_CLASS :: Num a => a
c'LIBUSB_REQUEST_TYPE_VENDOR :: Num a => a
c'LIBUSB_REQUEST_TYPE_RESERVED :: Num a => a
type C'libusb_request_recipient = CUInt
c'LIBUSB_RECIPIENT_DEVICE :: Num a => a
c'LIBUSB_RECIPIENT_INTERFACE :: Num a => a
c'LIBUSB_RECIPIENT_ENDPOINT :: Num a => a
c'LIBUSB_RECIPIENT_OTHER :: Num a => a
type C'libusb_error = CInt
c'LIBUSB_SUCCESS :: Num a => a
c'LIBUSB_ERROR_IO :: Num a => a
c'LIBUSB_ERROR_INVALID_PARAM :: Num a => a
c'LIBUSB_ERROR_ACCESS :: Num a => a
c'LIBUSB_ERROR_NO_DEVICE :: Num a => a
c'LIBUSB_ERROR_NOT_FOUND :: Num a => a
c'LIBUSB_ERROR_BUSY :: Num a => a
c'LIBUSB_ERROR_TIMEOUT :: Num a => a
c'LIBUSB_ERROR_OVERFLOW :: Num a => a
c'LIBUSB_ERROR_PIPE :: Num a => a
c'LIBUSB_ERROR_INTERRUPTED :: Num a => a
c'LIBUSB_ERROR_NO_MEM :: Num a => a
c'LIBUSB_ERROR_NOT_SUPPORTED :: Num a => a
c'LIBUSB_ERROR_OTHER :: Num a => a


-- | <a>http://libusb.sourceforge.net/api-1.0/group__lib.html</a>
module Bindings.Libusb.InitializationDeinitialization
data C'libusb_context
C'libusb_context :: C'libusb_context
type C'libusb_log_level = CUInt
c'LIBUSB_LOG_LEVEL_NONE :: Num a => a
c'LIBUSB_LOG_LEVEL_ERROR :: Num a => a
c'LIBUSB_LOG_LEVEL_WARNING :: Num a => a
c'LIBUSB_LOG_LEVEL_INFO :: Num a => a
c'LIBUSB_LOG_LEVEL_DEBUG :: Num a => a
data C'libusb_version
C'libusb_version :: Word16 -> Word16 -> Word16 -> Word16 -> CString -> CString -> C'libusb_version
c'libusb_version'major :: C'libusb_version -> Word16
c'libusb_version'minor :: C'libusb_version -> Word16
c'libusb_version'micro :: C'libusb_version -> Word16
c'libusb_version'nano :: C'libusb_version -> Word16
c'libusb_version'rc :: C'libusb_version -> CString
c'libusb_version'describe :: C'libusb_version -> CString
c'libusb_set_debug :: Ptr C'libusb_context -> CInt -> IO ()
c'libusb_init :: Ptr (Ptr C'libusb_context) -> IO CInt
c'libusb_exit :: Ptr C'libusb_context -> IO ()
p'libusb_set_debug :: FunPtr (Ptr C'libusb_context -> CInt -> IO ())
c'libusb_get_version :: IO (Ptr C'libusb_version)
p'libusb_init :: FunPtr (Ptr (Ptr C'libusb_context) -> IO CInt)
p'libusb_exit :: FunPtr (Ptr C'libusb_context -> IO ())
p'libusb_get_version :: FunPtr (IO (Ptr C'libusb_version))
p'libusb_version'major :: Ptr (C'libusb_version) -> Ptr (Word16)
p'libusb_version'minor :: Ptr (C'libusb_version) -> Ptr (Word16)
p'libusb_version'micro :: Ptr (C'libusb_version) -> Ptr (Word16)
p'libusb_version'nano :: Ptr (C'libusb_version) -> Ptr (Word16)
p'libusb_version'rc :: Ptr (C'libusb_version) -> Ptr (CString)
p'libusb_version'describe :: Ptr (C'libusb_version) -> Ptr (CString)
instance Eq C'libusb_version
instance Show C'libusb_version
instance Storable C'libusb_version


-- | <a>http://libusb.sourceforge.net/api-1.0/group__poll.html</a>
module Bindings.Libusb.PollingAndTiming
data C'timeval
C'timeval :: C'timeval
data C'libusb_pollfd
C'libusb_pollfd :: CInt -> CShort -> C'libusb_pollfd
c'libusb_pollfd'fd :: C'libusb_pollfd -> CInt
c'libusb_pollfd'events :: C'libusb_pollfd -> CShort
type C'libusb_pollfd_added_cb = FunPtr (CInt -> CShort -> Ptr () -> IO ())
type C'libusb_pollfd_removed_cb = FunPtr (CInt -> Ptr () -> IO ())
mk'libusb_pollfd_added_cb :: (CInt -> CShort -> Ptr () -> IO ()) -> IO C'libusb_pollfd_added_cb
mk'libusb_pollfd_removed_cb :: (CInt -> Ptr () -> IO ()) -> IO C'libusb_pollfd_removed_cb
p'libusb_pollfd'fd :: Ptr (C'libusb_pollfd) -> Ptr (CInt)
c'libusb_try_lock_events :: Ptr C'libusb_context -> IO CInt
mK'libusb_pollfd_added_cb :: C'libusb_pollfd_added_cb -> (CInt -> CShort -> Ptr () -> IO ())
c'libusb_lock_events :: Ptr C'libusb_context -> IO ()
mK'libusb_pollfd_removed_cb :: C'libusb_pollfd_removed_cb -> (CInt -> Ptr () -> IO ())
p'libusb_pollfd'events :: Ptr (C'libusb_pollfd) -> Ptr (CShort)
c'libusb_unlock_events :: Ptr C'libusb_context -> IO ()
p'libusb_try_lock_events :: FunPtr (Ptr C'libusb_context -> IO CInt)
c'libusb_event_handling_ok :: Ptr C'libusb_context -> IO CInt
p'libusb_lock_events :: FunPtr (Ptr C'libusb_context -> IO ())
c'libusb_event_handler_active :: Ptr C'libusb_context -> IO CInt
p'libusb_unlock_events :: FunPtr (Ptr C'libusb_context -> IO ())
c'libusb_lock_event_waiters :: Ptr C'libusb_context -> IO ()
p'libusb_event_handling_ok :: FunPtr (Ptr C'libusb_context -> IO CInt)
c'libusb_unlock_event_waiters :: Ptr C'libusb_context -> IO ()
p'libusb_event_handler_active :: FunPtr (Ptr C'libusb_context -> IO CInt)
p'libusb_lock_event_waiters :: FunPtr (Ptr C'libusb_context -> IO ())
c'libusb_wait_for_event :: Ptr C'libusb_context -> Ptr C'timeval -> IO CInt
p'libusb_unlock_event_waiters :: FunPtr (Ptr C'libusb_context -> IO ())
c'libusb_handle_events_timeout :: Ptr C'libusb_context -> Ptr C'timeval -> IO CInt
p'libusb_wait_for_event :: FunPtr (Ptr C'libusb_context -> Ptr C'timeval -> IO CInt)
c'libusb_handle_events_completed :: Ptr C'libusb_context -> Ptr CInt -> IO CInt
p'libusb_handle_events_timeout :: FunPtr (Ptr C'libusb_context -> Ptr C'timeval -> IO CInt)
p'libusb_handle_events_completed :: FunPtr (Ptr C'libusb_context -> Ptr CInt -> IO CInt)
c'libusb_handle_events_timeout_completed :: Ptr C'libusb_context -> Ptr C'timeval -> Ptr CInt -> IO CInt
c'libusb_handle_events :: Ptr C'libusb_context -> IO CInt
p'libusb_handle_events_timeout_completed :: FunPtr (Ptr C'libusb_context -> Ptr C'timeval -> Ptr CInt -> IO CInt)
c'libusb_handle_events_locked :: Ptr C'libusb_context -> Ptr C'timeval -> IO CInt
p'libusb_handle_events :: FunPtr (Ptr C'libusb_context -> IO CInt)
c'libusb_pollfds_handle_timeouts :: Ptr C'libusb_context -> IO CInt
p'libusb_handle_events_locked :: FunPtr (Ptr C'libusb_context -> Ptr C'timeval -> IO CInt)
c'libusb_get_next_timeout :: Ptr C'libusb_context -> Ptr C'timeval -> IO CInt
p'libusb_pollfds_handle_timeouts :: FunPtr (Ptr C'libusb_context -> IO CInt)
p'libusb_get_next_timeout :: FunPtr (Ptr C'libusb_context -> Ptr C'timeval -> IO CInt)
c'libusb_set_pollfd_notifiers :: Ptr C'libusb_context -> C'libusb_pollfd_added_cb -> C'libusb_pollfd_removed_cb -> Ptr () -> IO ()
p'libusb_set_pollfd_notifiers :: FunPtr (Ptr C'libusb_context -> C'libusb_pollfd_added_cb -> C'libusb_pollfd_removed_cb -> Ptr () -> IO ())
c'libusb_get_pollfds :: Ptr C'libusb_context -> IO (Ptr (Ptr C'libusb_pollfd))
p'libusb_get_pollfds :: FunPtr (Ptr C'libusb_context -> IO (Ptr (Ptr C'libusb_pollfd)))
instance Eq C'libusb_pollfd
instance Show C'libusb_pollfd
instance Storable C'libusb_pollfd


-- | <a>http://libusb.sourceforge.net/api-1.0/group__dev.html</a>
module Bindings.Libusb.HandlingAndEnumeration
data C'libusb_device
C'libusb_device :: C'libusb_device
data C'libusb_device_handle
C'libusb_device_handle :: C'libusb_device_handle
type C'ssize_t = Int64
type C'libusb_speed = CUInt
c'LIBUSB_SPEED_UNKNOWN :: Num a => a
c'LIBUSB_SPEED_LOW :: Num a => a
c'LIBUSB_SPEED_FULL :: Num a => a
c'LIBUSB_SPEED_HIGH :: Num a => a
c'LIBUSB_SPEED_SUPER :: Num a => a
type C'libusb_supported_speed = CUInt
c'LIBUSB_LOW_SPEED_OPERATION :: Num a => a
c'LIBUSB_FULL_SPEED_OPERATION :: Num a => a
c'LIBUSB_HIGH_SPEED_OPERATION :: Num a => a
c'LIBUSB_SUPER_SPEED_OPERATION :: Num a => a
type C'libusb_usb_2_0_extension_attributes = CUInt
c'LIBUSB_BM_LPM_SUPPORT :: Num a => a
type C'libusb_ss_usb_device_capability_attributes = CUInt
c'LIBUSB_BM_LTM_SUPPORT :: Num a => a
type C'libusb_bos_type = CUInt
c'LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY :: Num a => a
c'LIBUSB_BT_USB_2_0_EXTENSION :: Num a => a
c'LIBUSB_BT_SS_USB_DEVICE_CAPABILITY :: Num a => a
c'LIBUSB_BT_CONTAINER_ID :: Num a => a
c'libusb_get_device_list :: Ptr C'libusb_context -> Ptr (Ptr (Ptr C'libusb_device)) -> IO C'ssize_t
c'libusb_free_device_list :: Ptr (Ptr C'libusb_device) -> CInt -> IO ()
p'libusb_get_device_list :: FunPtr (Ptr C'libusb_context -> Ptr (Ptr (Ptr C'libusb_device)) -> IO C'ssize_t)
c'libusb_get_bus_number :: Ptr C'libusb_device -> IO Word8
p'libusb_free_device_list :: FunPtr (Ptr (Ptr C'libusb_device) -> CInt -> IO ())
c'libusb_get_port_number :: Ptr C'libusb_device -> IO Word8
p'libusb_get_bus_number :: FunPtr (Ptr C'libusb_device -> IO Word8)
c'libusb_get_port_numbers :: Ptr C'libusb_device -> Ptr Word8 -> CInt -> IO CInt
p'libusb_get_port_number :: FunPtr (Ptr C'libusb_device -> IO Word8)
c'libusb_get_parent :: Ptr C'libusb_device -> IO (Ptr C'libusb_device)
p'libusb_get_port_numbers :: FunPtr (Ptr C'libusb_device -> Ptr Word8 -> CInt -> IO CInt)
c'libusb_get_device_address :: Ptr C'libusb_device -> IO Word8
c'libusb_get_device_speed :: Ptr C'libusb_device -> IO CInt
p'libusb_get_parent :: FunPtr (Ptr C'libusb_device -> IO (Ptr C'libusb_device))
c'libusb_get_max_packet_size :: Ptr C'libusb_device -> CUChar -> IO CInt
p'libusb_get_device_address :: FunPtr (Ptr C'libusb_device -> IO Word8)
p'libusb_get_device_speed :: FunPtr (Ptr C'libusb_device -> IO CInt)
c'libusb_get_max_iso_packet_size :: Ptr C'libusb_device -> CUChar -> IO CInt
p'libusb_get_max_packet_size :: FunPtr (Ptr C'libusb_device -> CUChar -> IO CInt)
c'libusb_ref_device :: Ptr C'libusb_device -> IO (Ptr C'libusb_device)
p'libusb_get_max_iso_packet_size :: FunPtr (Ptr C'libusb_device -> CUChar -> IO CInt)
c'libusb_unref_device :: Ptr C'libusb_device -> IO ()
p'libusb_ref_device :: FunPtr (Ptr C'libusb_device -> IO (Ptr C'libusb_device))
c'libusb_open :: Ptr C'libusb_device -> Ptr (Ptr C'libusb_device_handle) -> IO CInt
p'libusb_unref_device :: FunPtr (Ptr C'libusb_device -> IO ())
c'libusb_open_device_with_vid_pid :: Ptr C'libusb_context -> Word16 -> Word16 -> IO (Ptr C'libusb_device_handle)
p'libusb_open :: FunPtr (Ptr C'libusb_device -> Ptr (Ptr C'libusb_device_handle) -> IO CInt)
p'libusb_open_device_with_vid_pid :: FunPtr (Ptr C'libusb_context -> Word16 -> Word16 -> IO (Ptr C'libusb_device_handle))
c'libusb_close :: Ptr C'libusb_device_handle -> IO ()
c'libusb_get_device :: Ptr C'libusb_device_handle -> IO (Ptr C'libusb_device)
p'libusb_close :: FunPtr (Ptr C'libusb_device_handle -> IO ())
c'libusb_get_configuration :: Ptr C'libusb_device_handle -> Ptr CInt -> IO CInt
p'libusb_get_device :: FunPtr (Ptr C'libusb_device_handle -> IO (Ptr C'libusb_device))
c'libusb_set_configuration :: Ptr C'libusb_device_handle -> CInt -> IO CInt
p'libusb_get_configuration :: FunPtr (Ptr C'libusb_device_handle -> Ptr CInt -> IO CInt)
c'libusb_claim_interface :: Ptr C'libusb_device_handle -> CInt -> IO CInt
p'libusb_set_configuration :: FunPtr (Ptr C'libusb_device_handle -> CInt -> IO CInt)
c'libusb_release_interface :: Ptr C'libusb_device_handle -> CInt -> IO CInt
p'libusb_claim_interface :: FunPtr (Ptr C'libusb_device_handle -> CInt -> IO CInt)
c'libusb_set_interface_alt_setting :: Ptr C'libusb_device_handle -> CInt -> CInt -> IO CInt
p'libusb_release_interface :: FunPtr (Ptr C'libusb_device_handle -> CInt -> IO CInt)
c'libusb_clear_halt :: Ptr C'libusb_device_handle -> CUChar -> IO CInt
p'libusb_set_interface_alt_setting :: FunPtr (Ptr C'libusb_device_handle -> CInt -> CInt -> IO CInt)
c'libusb_reset_device :: Ptr C'libusb_device_handle -> IO CInt
p'libusb_clear_halt :: FunPtr (Ptr C'libusb_device_handle -> CUChar -> IO CInt)
c'libusb_kernel_driver_active :: Ptr C'libusb_device_handle -> CInt -> IO CInt
p'libusb_reset_device :: FunPtr (Ptr C'libusb_device_handle -> IO CInt)
c'libusb_detach_kernel_driver :: Ptr C'libusb_device_handle -> CInt -> IO CInt
p'libusb_kernel_driver_active :: FunPtr (Ptr C'libusb_device_handle -> CInt -> IO CInt)
c'libusb_attach_kernel_driver :: Ptr C'libusb_device_handle -> CInt -> IO CInt
p'libusb_detach_kernel_driver :: FunPtr (Ptr C'libusb_device_handle -> CInt -> IO CInt)
c'libusb_set_auto_detach_kernel_driver :: Ptr C'libusb_device_handle -> CInt -> IO CInt
p'libusb_attach_kernel_driver :: FunPtr (Ptr C'libusb_device_handle -> CInt -> IO CInt)
p'libusb_set_auto_detach_kernel_driver :: FunPtr (Ptr C'libusb_device_handle -> CInt -> IO CInt)


-- | <a>http://libusb.sourceforge.net/api-1.0/group__syncio.html</a>
module Bindings.Libusb.Synchronous
c'libusb_control_transfer :: Ptr C'libusb_device_handle -> Word8 -> Word8 -> Word16 -> Word16 -> Ptr CUChar -> Word16 -> CUInt -> IO CInt
p'libusb_control_transfer :: FunPtr (Ptr C'libusb_device_handle -> Word8 -> Word8 -> Word16 -> Word16 -> Ptr CUChar -> Word16 -> CUInt -> IO CInt)
c'libusb_bulk_transfer :: Ptr C'libusb_device_handle -> CUChar -> Ptr CUChar -> CInt -> Ptr CInt -> CUInt -> IO CInt
c'libusb_interrupt_transfer :: Ptr C'libusb_device_handle -> CUChar -> Ptr CUChar -> CInt -> Ptr CInt -> CUInt -> IO CInt
p'libusb_bulk_transfer :: FunPtr (Ptr C'libusb_device_handle -> CUChar -> Ptr CUChar -> CInt -> Ptr CInt -> CUInt -> IO CInt)
p'libusb_interrupt_transfer :: FunPtr (Ptr C'libusb_device_handle -> CUChar -> Ptr CUChar -> CInt -> Ptr CInt -> CUInt -> IO CInt)


-- | <a>http://libusb.sourceforge.net/api-1.0/group__desc.html</a>
module Bindings.Libusb.Descriptors
data C'libusb_device_descriptor
C'libusb_device_descriptor :: Word8 -> Word8 -> Word16 -> Word8 -> Word8 -> Word8 -> Word8 -> Word16 -> Word16 -> Word16 -> Word8 -> Word8 -> Word8 -> Word8 -> C'libusb_device_descriptor
c'libusb_device_descriptor'bLength :: C'libusb_device_descriptor -> Word8
c'libusb_device_descriptor'bDescriptorType :: C'libusb_device_descriptor -> Word8
c'libusb_device_descriptor'bcdUSB :: C'libusb_device_descriptor -> Word16
c'libusb_device_descriptor'bDeviceClass :: C'libusb_device_descriptor -> Word8
c'libusb_device_descriptor'bDeviceSubClass :: C'libusb_device_descriptor -> Word8
c'libusb_device_descriptor'bDeviceProtocol :: C'libusb_device_descriptor -> Word8
c'libusb_device_descriptor'bMaxPacketSize0 :: C'libusb_device_descriptor -> Word8
c'libusb_device_descriptor'idVendor :: C'libusb_device_descriptor -> Word16
c'libusb_device_descriptor'idProduct :: C'libusb_device_descriptor -> Word16
c'libusb_device_descriptor'bcdDevice :: C'libusb_device_descriptor -> Word16
c'libusb_device_descriptor'iManufacturer :: C'libusb_device_descriptor -> Word8
c'libusb_device_descriptor'iProduct :: C'libusb_device_descriptor -> Word8
c'libusb_device_descriptor'iSerialNumber :: C'libusb_device_descriptor -> Word8
c'libusb_device_descriptor'bNumConfigurations :: C'libusb_device_descriptor -> Word8
data C'libusb_endpoint_descriptor
C'libusb_endpoint_descriptor :: Word8 -> Word8 -> Word8 -> Word8 -> Word16 -> Word8 -> Word8 -> Word8 -> Ptr CUChar -> CInt -> C'libusb_endpoint_descriptor
c'libusb_endpoint_descriptor'bLength :: C'libusb_endpoint_descriptor -> Word8
c'libusb_endpoint_descriptor'bDescriptorType :: C'libusb_endpoint_descriptor -> Word8
c'libusb_endpoint_descriptor'bEndpointAddress :: C'libusb_endpoint_descriptor -> Word8
c'libusb_endpoint_descriptor'bmAttributes :: C'libusb_endpoint_descriptor -> Word8
c'libusb_endpoint_descriptor'wMaxPacketSize :: C'libusb_endpoint_descriptor -> Word16
c'libusb_endpoint_descriptor'bInterval :: C'libusb_endpoint_descriptor -> Word8
c'libusb_endpoint_descriptor'bRefresh :: C'libusb_endpoint_descriptor -> Word8
c'libusb_endpoint_descriptor'bSynchAddress :: C'libusb_endpoint_descriptor -> Word8
c'libusb_endpoint_descriptor'extra :: C'libusb_endpoint_descriptor -> Ptr CUChar
c'libusb_endpoint_descriptor'extra_length :: C'libusb_endpoint_descriptor -> CInt
p'libusb_device_descriptor'bLength :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_device_descriptor'bDescriptorType :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_device_descriptor'bcdUSB :: Ptr (C'libusb_device_descriptor) -> Ptr (Word16)
p'libusb_device_descriptor'bDeviceClass :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_device_descriptor'bDeviceSubClass :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_endpoint_descriptor'bLength :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (Word8)
p'libusb_device_descriptor'bDeviceProtocol :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_endpoint_descriptor'bDescriptorType :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (Word8)
data C'libusb_interface_descriptor
C'libusb_interface_descriptor :: Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> Ptr C'libusb_endpoint_descriptor -> Ptr CUChar -> CInt -> C'libusb_interface_descriptor
c'libusb_interface_descriptor'bLength :: C'libusb_interface_descriptor -> Word8
c'libusb_interface_descriptor'bDescriptorType :: C'libusb_interface_descriptor -> Word8
c'libusb_interface_descriptor'bInterfaceNumber :: C'libusb_interface_descriptor -> Word8
c'libusb_interface_descriptor'bAlternateSetting :: C'libusb_interface_descriptor -> Word8
c'libusb_interface_descriptor'bNumEndpoints :: C'libusb_interface_descriptor -> Word8
c'libusb_interface_descriptor'bInterfaceClass :: C'libusb_interface_descriptor -> Word8
c'libusb_interface_descriptor'bInterfaceSubClass :: C'libusb_interface_descriptor -> Word8
c'libusb_interface_descriptor'bInterfaceProtocol :: C'libusb_interface_descriptor -> Word8
c'libusb_interface_descriptor'iInterface :: C'libusb_interface_descriptor -> Word8
c'libusb_interface_descriptor'endpoint :: C'libusb_interface_descriptor -> Ptr C'libusb_endpoint_descriptor
c'libusb_interface_descriptor'extra :: C'libusb_interface_descriptor -> Ptr CUChar
c'libusb_interface_descriptor'extra_length :: C'libusb_interface_descriptor -> CInt
p'libusb_device_descriptor'bMaxPacketSize0 :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_endpoint_descriptor'bEndpointAddress :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (Word8)
p'libusb_device_descriptor'idVendor :: Ptr (C'libusb_device_descriptor) -> Ptr (Word16)
p'libusb_endpoint_descriptor'bmAttributes :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (Word8)
p'libusb_device_descriptor'idProduct :: Ptr (C'libusb_device_descriptor) -> Ptr (Word16)
data C'libusb_interface
C'libusb_interface :: Ptr C'libusb_interface_descriptor -> CInt -> C'libusb_interface
c'libusb_interface'altsetting :: C'libusb_interface -> Ptr C'libusb_interface_descriptor
c'libusb_interface'num_altsetting :: C'libusb_interface -> CInt
p'libusb_endpoint_descriptor'wMaxPacketSize :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (Word16)
p'libusb_device_descriptor'bcdDevice :: Ptr (C'libusb_device_descriptor) -> Ptr (Word16)
p'libusb_endpoint_descriptor'bInterval :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (Word8)
p'libusb_device_descriptor'iManufacturer :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_endpoint_descriptor'bRefresh :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (Word8)
p'libusb_interface'altsetting :: Ptr (C'libusb_interface) -> Ptr (Ptr C'libusb_interface_descriptor)
p'libusb_device_descriptor'iProduct :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_interface'num_altsetting :: Ptr (C'libusb_interface) -> Ptr (CInt)
p'libusb_endpoint_descriptor'bSynchAddress :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (Word8)
p'libusb_device_descriptor'iSerialNumber :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_endpoint_descriptor'extra :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (Ptr CUChar)
p'libusb_interface_descriptor'bLength :: Ptr (C'libusb_interface_descriptor) -> Ptr (Word8)
p'libusb_device_descriptor'bNumConfigurations :: Ptr (C'libusb_device_descriptor) -> Ptr (Word8)
p'libusb_endpoint_descriptor'extra_length :: Ptr (C'libusb_endpoint_descriptor) -> Ptr (CInt)
p'libusb_interface_descriptor'bDescriptorType :: Ptr (C'libusb_interface_descriptor) -> Ptr (Word8)
p'libusb_interface_descriptor'bInterfaceNumber :: Ptr (C'libusb_interface_descriptor) -> Ptr (Word8)
data C'libusb_config_descriptor
C'libusb_config_descriptor :: Word8 -> Word8 -> Word16 -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> Ptr C'libusb_interface -> Ptr CUChar -> CInt -> C'libusb_config_descriptor
c'libusb_config_descriptor'bLength :: C'libusb_config_descriptor -> Word8
c'libusb_config_descriptor'bDescriptorType :: C'libusb_config_descriptor -> Word8
c'libusb_config_descriptor'wTotalLength :: C'libusb_config_descriptor -> Word16
c'libusb_config_descriptor'bNumInterfaces :: C'libusb_config_descriptor -> Word8
c'libusb_config_descriptor'bConfigurationValue :: C'libusb_config_descriptor -> Word8
c'libusb_config_descriptor'iConfiguration :: C'libusb_config_descriptor -> Word8
c'libusb_config_descriptor'bmAttributes :: C'libusb_config_descriptor -> Word8
c'libusb_config_descriptor'MaxPower :: C'libusb_config_descriptor -> Word8
c'libusb_config_descriptor'interface :: C'libusb_config_descriptor -> Ptr C'libusb_interface
c'libusb_config_descriptor'extra :: C'libusb_config_descriptor -> Ptr CUChar
c'libusb_config_descriptor'extra_length :: C'libusb_config_descriptor -> CInt
type C'libusb_class_code = CUInt
p'libusb_interface_descriptor'bAlternateSetting :: Ptr (C'libusb_interface_descriptor) -> Ptr (Word8)
p'libusb_interface_descriptor'bNumEndpoints :: Ptr (C'libusb_interface_descriptor) -> Ptr (Word8)
c'LIBUSB_CLASS_PER_INTERFACE :: Num a => a
c'LIBUSB_CLASS_AUDIO :: Num a => a
p'libusb_interface_descriptor'bInterfaceClass :: Ptr (C'libusb_interface_descriptor) -> Ptr (Word8)
c'LIBUSB_CLASS_COMM :: Num a => a
c'LIBUSB_CLASS_HID :: Num a => a
p'libusb_interface_descriptor'bInterfaceSubClass :: Ptr (C'libusb_interface_descriptor) -> Ptr (Word8)
c'LIBUSB_CLASS_PRINTER :: Num a => a
c'LIBUSB_CLASS_PTP :: Num a => a
p'libusb_interface_descriptor'bInterfaceProtocol :: Ptr (C'libusb_interface_descriptor) -> Ptr (Word8)
c'LIBUSB_CLASS_MASS_STORAGE :: Num a => a
c'LIBUSB_CLASS_HUB :: Num a => a
p'libusb_interface_descriptor'iInterface :: Ptr (C'libusb_interface_descriptor) -> Ptr (Word8)
c'LIBUSB_CLASS_DATA :: Num a => a
c'LIBUSB_CLASS_VENDOR_SPEC :: Num a => a
p'libusb_config_descriptor'bLength :: Ptr (C'libusb_config_descriptor) -> Ptr (Word8)
p'libusb_interface_descriptor'endpoint :: Ptr (C'libusb_interface_descriptor) -> Ptr (Ptr C'libusb_endpoint_descriptor)
type C'libusb_descriptor_type = CUInt
p'libusb_config_descriptor'bDescriptorType :: Ptr (C'libusb_config_descriptor) -> Ptr (Word8)
p'libusb_interface_descriptor'extra :: Ptr (C'libusb_interface_descriptor) -> Ptr (Ptr CUChar)
c'LIBUSB_DT_DEVICE :: Num a => a
p'libusb_config_descriptor'wTotalLength :: Ptr (C'libusb_config_descriptor) -> Ptr (Word16)
p'libusb_interface_descriptor'extra_length :: Ptr (C'libusb_interface_descriptor) -> Ptr (CInt)
c'LIBUSB_DT_CONFIG :: Num a => a
c'LIBUSB_DT_STRING :: Num a => a
p'libusb_config_descriptor'bNumInterfaces :: Ptr (C'libusb_config_descriptor) -> Ptr (Word8)
c'LIBUSB_DT_INTERFACE :: Num a => a
c'LIBUSB_DT_ENDPOINT :: Num a => a
p'libusb_config_descriptor'bConfigurationValue :: Ptr (C'libusb_config_descriptor) -> Ptr (Word8)
c'LIBUSB_DT_HID :: Num a => a
c'LIBUSB_DT_REPORT :: Num a => a
p'libusb_config_descriptor'iConfiguration :: Ptr (C'libusb_config_descriptor) -> Ptr (Word8)
c'LIBUSB_DT_PHYSICAL :: Num a => a
c'LIBUSB_DT_HUB :: Num a => a
p'libusb_config_descriptor'bmAttributes :: Ptr (C'libusb_config_descriptor) -> Ptr (Word8)
type C'libusb_endpoint_direction = CUInt
p'libusb_config_descriptor'MaxPower :: Ptr (C'libusb_config_descriptor) -> Ptr (Word8)
c'LIBUSB_ENDPOINT_IN :: Num a => a
p'libusb_config_descriptor'interface :: Ptr (C'libusb_config_descriptor) -> Ptr (Ptr C'libusb_interface)
c'LIBUSB_ENDPOINT_OUT :: Num a => a
type C'libusb_transfer_type = CUInt
p'libusb_config_descriptor'extra :: Ptr (C'libusb_config_descriptor) -> Ptr (Ptr CUChar)
p'libusb_config_descriptor'extra_length :: Ptr (C'libusb_config_descriptor) -> Ptr (CInt)
c'LIBUSB_TRANSFER_TYPE_CONTROL :: Num a => a
c'LIBUSB_TRANSFER_TYPE_ISOCHRONOUS :: Num a => a
c'LIBUSB_TRANSFER_TYPE_BULK :: Num a => a
c'LIBUSB_TRANSFER_TYPE_INTERRUPT :: Num a => a
type C'libusb_iso_sync_type = CUInt
c'LIBUSB_ISO_SYNC_TYPE_NONE :: Num a => a
c'LIBUSB_ISO_SYNC_TYPE_ASYNC :: Num a => a
c'LIBUSB_ISO_SYNC_TYPE_ADAPTIVE :: Num a => a
c'LIBUSB_ISO_SYNC_TYPE_SYNC :: Num a => a
type C'libusb_iso_usage_type = CUInt
c'LIBUSB_ISO_USAGE_TYPE_DATA :: Num a => a
c'LIBUSB_ISO_USAGE_TYPE_FEEDBACK :: Num a => a
c'LIBUSB_ISO_USAGE_TYPE_IMPLICIT :: Num a => a
c'libusb_get_device_descriptor :: Ptr C'libusb_device -> Ptr C'libusb_device_descriptor -> IO CInt
p'libusb_get_device_descriptor :: FunPtr (Ptr C'libusb_device -> Ptr C'libusb_device_descriptor -> IO CInt)
c'libusb_get_active_config_descriptor :: Ptr C'libusb_device -> Ptr (Ptr C'libusb_config_descriptor) -> IO CInt
p'libusb_get_active_config_descriptor :: FunPtr (Ptr C'libusb_device -> Ptr (Ptr C'libusb_config_descriptor) -> IO CInt)
c'libusb_get_config_descriptor :: Ptr C'libusb_device -> Word8 -> Ptr (Ptr C'libusb_config_descriptor) -> IO CInt
p'libusb_get_config_descriptor :: FunPtr (Ptr C'libusb_device -> Word8 -> Ptr (Ptr C'libusb_config_descriptor) -> IO CInt)
c'libusb_get_config_descriptor_by_value :: Ptr C'libusb_device -> Word8 -> Ptr (Ptr C'libusb_config_descriptor) -> IO CInt
p'libusb_get_config_descriptor_by_value :: FunPtr (Ptr C'libusb_device -> Word8 -> Ptr (Ptr C'libusb_config_descriptor) -> IO CInt)
c'libusb_free_config_descriptor :: Ptr C'libusb_config_descriptor -> IO ()
p'libusb_free_config_descriptor :: FunPtr (Ptr C'libusb_config_descriptor -> IO ())
c'libusb_get_string_descriptor_ascii :: Ptr C'libusb_device_handle -> Word8 -> Ptr CUChar -> CInt -> IO CInt
p'libusb_get_string_descriptor_ascii :: FunPtr (Ptr C'libusb_device_handle -> Word8 -> Ptr CUChar -> CInt -> IO CInt)
c'libusb_get_descriptor :: Ptr C'libusb_device_handle -> Word8 -> Word8 -> Ptr CUChar -> CInt -> IO CInt
c'libusb_get_string_descriptor :: Ptr C'libusb_device_handle -> Word8 -> Word16 -> Ptr CUChar -> CInt -> IO CInt
instance Eq C'libusb_device_descriptor
instance Show C'libusb_device_descriptor
instance Eq C'libusb_endpoint_descriptor
instance Show C'libusb_endpoint_descriptor
instance Eq C'libusb_interface_descriptor
instance Show C'libusb_interface_descriptor
instance Eq C'libusb_interface
instance Show C'libusb_interface
instance Eq C'libusb_config_descriptor
instance Show C'libusb_config_descriptor
instance Storable C'libusb_config_descriptor
instance Storable C'libusb_interface
instance Storable C'libusb_interface_descriptor
instance Storable C'libusb_endpoint_descriptor
instance Storable C'libusb_device_descriptor


-- | <a>http://libusb.sourceforge.net/api-1.0/group__asyncio.html</a>
module Bindings.Libusb.Asynchronous
data C'libusb_control_setup
C'libusb_control_setup :: Word8 -> Word8 -> Word16 -> Word16 -> Word16 -> C'libusb_control_setup
c'libusb_control_setup'bmRequestType :: C'libusb_control_setup -> Word8
c'libusb_control_setup'bRequest :: C'libusb_control_setup -> Word8
c'libusb_control_setup'wValue :: C'libusb_control_setup -> Word16
c'libusb_control_setup'wIndex :: C'libusb_control_setup -> Word16
c'libusb_control_setup'wLength :: C'libusb_control_setup -> Word16
data C'libusb_iso_packet_descriptor
C'libusb_iso_packet_descriptor :: CUInt -> CUInt -> C'libusb_transfer_status -> C'libusb_iso_packet_descriptor
c'libusb_iso_packet_descriptor'length :: C'libusb_iso_packet_descriptor -> CUInt
c'libusb_iso_packet_descriptor'actual_length :: C'libusb_iso_packet_descriptor -> CUInt
c'libusb_iso_packet_descriptor'status :: C'libusb_iso_packet_descriptor -> C'libusb_transfer_status
p'libusb_control_setup'bmRequestType :: Ptr (C'libusb_control_setup) -> Ptr (Word8)
p'libusb_control_setup'bRequest :: Ptr (C'libusb_control_setup) -> Ptr (Word8)
p'libusb_control_setup'wValue :: Ptr (C'libusb_control_setup) -> Ptr (Word16)
p'libusb_iso_packet_descriptor'length :: Ptr (C'libusb_iso_packet_descriptor) -> Ptr (CUInt)
p'libusb_control_setup'wIndex :: Ptr (C'libusb_control_setup) -> Ptr (Word16)
p'libusb_iso_packet_descriptor'actual_length :: Ptr (C'libusb_iso_packet_descriptor) -> Ptr (CUInt)
p'libusb_control_setup'wLength :: Ptr (C'libusb_control_setup) -> Ptr (Word16)
p'libusb_iso_packet_descriptor'status :: Ptr (C'libusb_iso_packet_descriptor) -> Ptr (C'libusb_transfer_status)
data C'libusb_transfer
C'libusb_transfer :: Ptr C'libusb_device_handle -> Word8 -> CUChar -> CUChar -> CUInt -> C'libusb_transfer_status -> CInt -> CInt -> C'libusb_transfer_cb_fn -> Ptr () -> Ptr CUChar -> CInt -> [C'libusb_iso_packet_descriptor] -> C'libusb_transfer
c'libusb_transfer'dev_handle :: C'libusb_transfer -> Ptr C'libusb_device_handle
c'libusb_transfer'flags :: C'libusb_transfer -> Word8
c'libusb_transfer'endpoint :: C'libusb_transfer -> CUChar
c'libusb_transfer'type :: C'libusb_transfer -> CUChar
c'libusb_transfer'timeout :: C'libusb_transfer -> CUInt
c'libusb_transfer'status :: C'libusb_transfer -> C'libusb_transfer_status
c'libusb_transfer'length :: C'libusb_transfer -> CInt
c'libusb_transfer'actual_length :: C'libusb_transfer -> CInt
c'libusb_transfer'callback :: C'libusb_transfer -> C'libusb_transfer_cb_fn
c'libusb_transfer'user_data :: C'libusb_transfer -> Ptr ()
c'libusb_transfer'buffer :: C'libusb_transfer -> Ptr CUChar
c'libusb_transfer'num_iso_packets :: C'libusb_transfer -> CInt
c'libusb_transfer'iso_packet_desc :: C'libusb_transfer -> [C'libusb_iso_packet_descriptor]
type C'libusb_transfer_cb_fn = FunPtr (Ptr C'libusb_transfer -> IO ())
mk'libusb_transfer_cb_fn :: (Ptr C'libusb_transfer -> IO ()) -> IO C'libusb_transfer_cb_fn
type C'libusb_transfer_status = CUInt
mK'libusb_transfer_cb_fn :: C'libusb_transfer_cb_fn -> (Ptr C'libusb_transfer -> IO ())
c'LIBUSB_TRANSFER_COMPLETED :: Num a => a
c'LIBUSB_TRANSFER_ERROR :: Num a => a
c'LIBUSB_TRANSFER_TIMED_OUT :: Num a => a
c'LIBUSB_TRANSFER_CANCELLED :: Num a => a
c'LIBUSB_TRANSFER_STALL :: Num a => a
c'LIBUSB_TRANSFER_NO_DEVICE :: Num a => a
c'LIBUSB_TRANSFER_OVERFLOW :: Num a => a
type C'libusb_transfer_flags = CUInt
p'libusb_transfer'dev_handle :: Ptr (C'libusb_transfer) -> Ptr (Ptr C'libusb_device_handle)
c'LIBUSB_TRANSFER_SHORT_NOT_OK :: Num a => a
c'LIBUSB_TRANSFER_FREE_BUFFER :: Num a => a
p'libusb_transfer'flags :: Ptr (C'libusb_transfer) -> Ptr (Word8)
c'LIBUSB_TRANSFER_FREE_TRANSFER :: Num a => a
p'libusb_transfer'endpoint :: Ptr (C'libusb_transfer) -> Ptr (CUChar)
c'libusb_alloc_transfer :: CInt -> IO (Ptr C'libusb_transfer)
p'libusb_transfer'type :: Ptr (C'libusb_transfer) -> Ptr (CUChar)
c'libusb_free_transfer :: Ptr C'libusb_transfer -> IO ()
p'libusb_alloc_transfer :: FunPtr (CInt -> IO (Ptr C'libusb_transfer))
c'libusb_submit_transfer :: Ptr C'libusb_transfer -> IO CInt
p'libusb_transfer'timeout :: Ptr (C'libusb_transfer) -> Ptr (CUInt)
c'libusb_cancel_transfer :: Ptr C'libusb_transfer -> IO CInt
p'libusb_free_transfer :: FunPtr (Ptr C'libusb_transfer -> IO ())
c'libusb_control_transfer_get_data :: Ptr C'libusb_transfer -> IO (Ptr CUChar)
p'libusb_submit_transfer :: FunPtr (Ptr C'libusb_transfer -> IO CInt)
p'libusb_transfer'status :: Ptr (C'libusb_transfer) -> Ptr (C'libusb_transfer_status)
p'libusb_cancel_transfer :: FunPtr (Ptr C'libusb_transfer -> IO CInt)
c'libusb_control_transfer_get_setup :: Ptr C'libusb_transfer -> IO (Ptr C'libusb_control_setup)
p'libusb_transfer'length :: Ptr (C'libusb_transfer) -> Ptr (CInt)
c'libusb_fill_control_setup :: Ptr CUChar -> Word8 -> Word8 -> Word16 -> Word16 -> Word16 -> IO ()
p'libusb_transfer'actual_length :: Ptr (C'libusb_transfer) -> Ptr (CInt)
c'libusb_fill_control_transfer :: Ptr C'libusb_transfer -> Ptr C'libusb_device_handle -> Ptr CUChar -> C'libusb_transfer_cb_fn -> Ptr () -> CUInt -> IO ()
p'libusb_transfer'callback :: Ptr (C'libusb_transfer) -> Ptr (C'libusb_transfer_cb_fn)
p'libusb_transfer'user_data :: Ptr (C'libusb_transfer) -> Ptr (Ptr ())
c'libusb_fill_bulk_transfer :: Ptr C'libusb_transfer -> Ptr C'libusb_device_handle -> CUChar -> Ptr CUChar -> CInt -> C'libusb_transfer_cb_fn -> Ptr () -> CUInt -> IO ()
p'libusb_transfer'buffer :: Ptr (C'libusb_transfer) -> Ptr (Ptr CUChar)
c'libusb_fill_interrupt_transfer :: Ptr C'libusb_transfer -> Ptr C'libusb_device_handle -> CUChar -> Ptr CUChar -> CInt -> C'libusb_transfer_cb_fn -> Ptr () -> CUInt -> IO ()
p'libusb_transfer'num_iso_packets :: Ptr (C'libusb_transfer) -> Ptr (CInt)
p'libusb_transfer'iso_packet_desc :: Ptr (C'libusb_transfer) -> Ptr (C'libusb_iso_packet_descriptor)
c'libusb_fill_iso_transfer :: Ptr C'libusb_transfer -> Ptr C'libusb_device_handle -> CUChar -> Ptr CUChar -> CInt -> CInt -> C'libusb_transfer_cb_fn -> Ptr () -> CUInt -> IO ()
c'libusb_set_iso_packet_lengths :: Ptr C'libusb_transfer -> CUInt -> IO ()
c'libusb_get_iso_packet_buffer :: Ptr C'libusb_transfer -> CUInt -> IO (Ptr CUChar)
c'libusb_get_iso_packet_buffer_simple :: Ptr C'libusb_transfer -> CUInt -> IO (Ptr CUChar)
instance Eq C'libusb_control_setup
instance Show C'libusb_control_setup
instance Eq C'libusb_iso_packet_descriptor
instance Show C'libusb_iso_packet_descriptor
instance Eq C'libusb_transfer
instance Show C'libusb_transfer
instance Storable C'libusb_transfer
instance Storable C'libusb_iso_packet_descriptor
instance Storable C'libusb_control_setup


-- | <a>http://libusb.sourceforge.net/api-1.0/group__hotplug.html</a>
module Bindings.Libusb.DeviceHotplugEventNotification
c'LIBUSB_HOTPLUG_MATCH_ANY :: Num a => a
type C'libusb_hotplug_callback_handle = CInt
type C'libusb_hotplug_callback_fn = FunPtr (Ptr C'libusb_context -> Ptr C'libusb_device -> C'libusb_hotplug_event -> Ptr () -> IO CInt)
mk'libusb_hotplug_callback_fn :: (Ptr C'libusb_context -> Ptr C'libusb_device -> C'libusb_hotplug_event -> Ptr () -> IO CInt) -> IO C'libusb_hotplug_callback_fn
type C'libusb_hotplug_flag = CUInt
mK'libusb_hotplug_callback_fn :: C'libusb_hotplug_callback_fn -> (Ptr C'libusb_context -> Ptr C'libusb_device -> C'libusb_hotplug_event -> Ptr () -> IO CInt)
c'LIBUSB_HOTPLUG_ENUMERATE :: Num a => a
type C'libusb_hotplug_event = CUInt
c'LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED :: Num a => a
c'LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT :: Num a => a
c'libusb_hotplug_register_callback :: Ptr C'libusb_context -> C'libusb_hotplug_event -> C'libusb_hotplug_flag -> CInt -> CInt -> CInt -> C'libusb_hotplug_callback_fn -> Ptr () -> Ptr C'libusb_hotplug_callback_handle -> IO CInt
p'libusb_hotplug_register_callback :: FunPtr (Ptr C'libusb_context -> C'libusb_hotplug_event -> C'libusb_hotplug_flag -> CInt -> CInt -> CInt -> C'libusb_hotplug_callback_fn -> Ptr () -> Ptr C'libusb_hotplug_callback_handle -> IO CInt)
c'libusb_hotplug_deregister_callback :: Ptr C'libusb_context -> C'libusb_hotplug_callback_handle -> IO ()
p'libusb_hotplug_deregister_callback :: FunPtr (Ptr C'libusb_context -> C'libusb_hotplug_callback_handle -> IO ())

module Bindings.Libusb
