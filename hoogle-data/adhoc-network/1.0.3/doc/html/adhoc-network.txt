-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Ad-hoc P2P network protocol
--   
--   This is a library for ad hoc P2p networking, developed for the
--   Barracuda chat client (by Stephan Friedrichs, Henning GÃ¼nther, Oliver
--   Mielentz and Martin Wegner).
--   
--   This library implements the RFCs (see for example
--   <a>http://tools.ietf.org/html/draft-strauss-p2p-chat</a>).
--   
--   The Darcs repository can be found at
--   <a>http://repos.mroot.net/sep07-adhoc</a>
@package adhoc-network
@version 1.0.3


-- | A module used to render an XML <a>Document</a>.
module Network.AdHoc.XMLRenderer

-- | Given a <a>Document</a>, this function converts it into a fully valid
--   XML <a>String</a>.
renderDocument :: Document i -> String

-- | An escaper used to escape special characters, e.g. '&lt;', from XML.
escaper :: XmlEscaper


module Network.AdHoc.UserID

-- | Identifies a user in the network.
data UserID
UserID :: String -> String -> UserID

-- | The users name.
userName :: UserID -> String

-- | The users host.
userHost :: UserID -> String
instance Ord UserID
instance Eq UserID
instance Show UserID


-- | This module is a helper for signature checking. It gives the text that
--   needs to be hashed in order to create or verify a signature.
module Network.AdHoc.Signature

-- | A raw signature.
data Signature
Signature :: SignType -> ByteString -> Signature

-- | The type of the signature
sign_type :: Signature -> SignType

-- | The actual signature
signature :: Signature -> ByteString

-- | Specifies the signature algorithm used to sign a message.
data SignType

-- | MD5 has been used to sign the message
MD5 :: SignType

-- | An unknown signature algorithm was used
SignUnknown :: String -> SignType

-- | This type represents the possible results of verifying a signature.
data SignatureStatus

-- | The signature was valid
SignatureOK :: SignatureStatus

-- | The signature was invalid
SignatureWrong :: SignatureStatus

-- | The signature could not be checked, becuase a <a>Certificate</a> was
--   missing. The function is a callback to be called when the missing
--   certificate has been acquired.
CertificateMissing :: (Certificate -> SignatureStatus) -> SignatureStatus

-- | No signature has been given.
type NoSignature = ()

-- | The message has been locally created, so we know the private key.
type InternalSignature = Either PrivateKey ExternalSignature

-- | The signature has been received via network. The signature might be
--   knwon or not.
type ExternalSignature = Maybe (Signature, SignatureStatus)

-- | A class of types that have an internal signature status.
class ToInternalSignature s
toInternal :: (ToInternalSignature s) => s -> InternalSignature

-- | Calculates the concatenation of all text nodes in the list of
--   contents, except for receiver elements
getHashString :: [Content i] -> String

-- | Given a certificate, this function verifies the Signature of a
--   <a>String</a>.
verifySignature :: String -> Signature -> Certificate -> SignatureStatus
instance Show SignType
instance Eq SignType
instance Show Signature
instance Eq Signature
instance ToInternalSignature InternalSignature
instance ToInternalSignature ExternalSignature
instance ToInternalSignature NoSignature
instance Eq SignatureStatus
instance Show SignatureStatus


module Network.AdHoc.MessageID

-- | This is just a <a>String</a>.
type MessageID = String

-- | Generate an infinite(!) stream of <a>MessageID</a>s.
type MessageIDGenerator g = g -> [MessageID]

-- | Simplest possible generator type: counts from 0 upwards. Very
--   insecure.
counter :: MessageIDGenerator g

-- | Generates a stream of <a>MessageID</a>s by shuffling a sorted stream
--   couting from 0 upwards (<tt>[0..]</tt>). <tt>scrambler n g</tt> would
--   randomly remove the i-th element (where i is a random number between 0
--   and n) from the sorted list and place it at the head of the result
--   list. It deals with the following elements in the same way.
scrambler :: (RandomGen g) => Int -> MessageIDGenerator g

-- | Generates a stream of IDs by hashing an up-counting number and a
--   random number with SHA512.
hasher :: (RandomGen g) => MessageIDGenerator g


module Network.AdHoc.Encryption

-- | Represents encrypted data.
data Encrypted a
Encrypted :: Word64 -> ByteString -> Encrypted a
encryptedIV :: Encrypted a -> Word64
encryptedData :: Encrypted a -> ByteString

-- | A class of types that can be encrypted with 64 bit keys and initial
--   vectors.
class Encryptable a
encrypt :: (Encryptable a) => Word64 -> Word64 -> a -> Encrypted a
decrypt :: (Encryptable a) => Word64 -> Encrypted a -> Maybe a

-- | Represents data encrypted by RSA.
data RSAEncrypted a
RSAEncrypted :: ByteString -> RSAEncrypted a
rsaData :: RSAEncrypted a -> ByteString

-- | A class of types that can be encrypted with RSA.
class RSAEncryptable a
rsaEncrypt :: (RSAEncryptable a, RandomGen g) => g -> Certificate -> a -> RSAEncrypted a
rsaDecrypt :: (RSAEncryptable a) => PrivateKey -> RSAEncrypted a -> Maybe a

-- | Packs a stream of 8-bit Words into a stream of 64-bit Words.
pack64 :: [Word8] -> [Word64]

-- | Converts a list of 64-bit words into a list of 8-bit words.
unpack64 :: [Word64] -> [Word8]

-- | Randomly creates a key for DES.
generateDESKey :: (RandomGen g) => g -> (Word64, g)
checkParity :: (Bits a) => a -> Bool
splitBlock :: Int -> [Word8] -> [[Word8]]
instance Show (RSAEncrypted a)
instance Eq (RSAEncrypted a)
instance Show (Encrypted a)
instance Eq (Encrypted a)
instance RSAEncryptable Word64
instance RSAEncryptable ByteString
instance RSAEncryptable String
instance Encryptable String
instance Encryptable ByteString


module Network.AdHoc.Channel

-- | The <a>ChannelName</a> type, see <a>mkChannelName</a>.
data ChannelName

-- | Creates a new <a>ChannelName</a>.
mkChannelName :: String -> ChannelName

-- | The anonymous <a>ChannelName</a>
anonymous :: ChannelName

-- | Check <a>ChannelName</a> for validity. Return <a>Nothing</a> if it is
--   alright, <a>Just</a> err if it is illegal (err is the reason for
--   that).
validateChannelName :: ChannelName -> Maybe String

-- | The unique <a>ChannelID</a> type identifying each channel.
data ChannelID
ChannelID :: String -> String -> ChannelID

-- | A locally set value, unique per host.
channelValue :: ChannelID -> String

-- | The hostname of the <a>ChannelID</a>.
channelHost :: ChannelID -> String
instance Eq ChannelID
instance Ord ChannelID
instance Show ChannelID
instance Ord ChannelName
instance Eq ChannelName
instance Show ChannelName


-- | This module contains types representing the different kinds of
--   messages defined by the protocol.
module Network.AdHoc.Message

-- | Specifies the encryption algorithm used to encrypt a message
data CipherType
CipherDES_CBC :: CipherType
CipherNone :: CipherType

-- | An unknown cipher was used
CipherUnknown :: String -> CipherType

-- | TimeToLive has a maximum of 360, so 16 bit unsigned is enough to hold
--   it
type TTL = Word16

-- | The message-delay can be represented by this type.
type Delay = Word

-- | An attachmet as defined in the protocoll.
data Attachment
Attachment :: String -> String -> ByteString -> Attachment

-- | Name of the attached file
attachmentFilename :: Attachment -> String

-- | Mime-type of the very same
attachmentAppType :: Attachment -> String

-- | The actual content of the file
attachmentContent :: Attachment -> ByteString

-- | An attachment that has been encrypted.
data EncryptedAttachment
EncryptedAttachment :: Encrypted String -> Encrypted String -> Encrypted ByteString -> EncryptedAttachment

-- | Encrypted filename
encryptedAttachmentFilename :: EncryptedAttachment -> Encrypted String

-- | Encrypted mime-type
encryptedAttachmentAppType :: EncryptedAttachment -> Encrypted String

-- | Encrypted content
encryptedAttachmentContent :: EncryptedAttachment -> Encrypted ByteString

-- | Uses DES to encrypt an <a>Attachment</a>.
encryptAttachment :: Word64 -> Word64 -> Attachment -> EncryptedAttachment

-- | Uses DES to decrypt an <a>EncryptedAttachment</a>.
decryptAttachment :: Word64 -> EncryptedAttachment -> Maybe Attachment

-- | A class of messages that can be routed.
data Routed a sign
Routed :: TTL -> UserID -> MessageID -> a -> sign -> Routed a sign

-- | The time-to-live of the message
routedTTL :: Routed a sign -> TTL

-- | Receiver of the routed message
routedUserID :: Routed a sign -> UserID

-- | ID of the routed message
routedMsgID :: Routed a sign -> MessageID

-- | The actual content of the message
routedContent :: Routed a sign -> a

-- | Signature of the message
routedSignature :: Routed a sign -> sign

-- | An unsigned message.
type UnsignedMessage = ProtocolMessage NoSignature

-- | An internal message that is subject to internal signature guidelines.
type InternalMessage = ProtocolMessage InternalSignature

-- | An external message.
type ExternalMessage = ProtocolMessage ExternalSignature

-- | Basic protocol message representation.
data ProtocolMessage sign

-- | Informs about a user on the sending node, giving the user-id, the
--   protocol version and a friendly greeting
Hello :: [UserID] -> Int -> Maybe String -> ProtocolMessage sign
helloSenders :: ProtocolMessage sign -> [UserID]
helloVersion :: ProtocolMessage sign -> Int
helloGreeting :: ProtocolMessage sign -> Maybe String

-- | Sender of the original message and the sended message-id
Ack :: UserID -> MessageID -> ProtocolMessage sign
ackSender :: ProtocolMessage sign -> UserID
ackMsgId :: ProtocolMessage sign -> MessageID

-- | Routing informations, a list of users and how much hops it takes to
--   reach them
Routing :: [(UserID, Int)] -> ProtocolMessage sign
routingRoutes :: ProtocolMessage sign -> [(UserID, Int)]

-- | Messages with one specified receiver
Target :: (Routed TargetContent sign) -> ProtocolMessage sign

-- | Messages flooded through the network
Flood :: (Routed FloodContent sign) -> ProtocolMessage sign

-- | Obscure messages
Obscure :: (Routed (RSAEncrypted String) ()) -> ProtocolMessage sign

-- | Messages directed to a specified receiver.
data TargetContent

-- | Negative ACK
Nack :: (Routed TargetContent ExternalSignature) -> TargetContent

-- | Requesting a certificate
GetCertificate :: UserID -> TargetContent
getCertificateFor :: TargetContent -> UserID

-- | Transmitting a certificate
Certificate :: [UserID] -> UserID -> ByteString -> TargetContent
certificateReceivers :: TargetContent -> [UserID]
certificateFor :: TargetContent -> UserID
certificateData :: TargetContent -> ByteString

-- | A chat message
Message :: [UserID] -> ChannelName -> ChannelID -> MessageContent -> UTCTime -> Delay -> TargetContent
messageReceivers :: TargetContent -> [UserID]
messageChannelName :: TargetContent -> ChannelName
messageChannelID :: TargetContent -> ChannelID
messageContent :: TargetContent -> MessageContent
messageTime :: TargetContent -> UTCTime
messageDelay :: TargetContent -> Delay

-- | Key request for a private channel
GetKey :: UserID -> ChannelName -> ChannelID -> TargetContent
getKeyReceiver :: TargetContent -> UserID
getKeyChannelName :: TargetContent -> ChannelName
getKeyChannelID :: TargetContent -> ChannelID

-- | Key message for a private channel
Key :: UserID -> ChannelName -> ChannelID -> CipherType -> RSAEncrypted Word64 -> TargetContent
keyReceiver :: TargetContent -> UserID
keyChannelName :: TargetContent -> ChannelName
keyChannelID :: TargetContent -> ChannelID
keyCipherType :: TargetContent -> CipherType
keyKey :: TargetContent -> RSAEncrypted Word64

-- | Messages flooded throughout the entire network.
data FloodContent

-- | Channel announcements
Channel :: ChannelName -> ChannelID -> String -> [UserID] -> Bool -> FloodContent
channelChannelName :: FloodContent -> ChannelName
channelChannelID :: FloodContent -> ChannelID
channelChannelTitle :: FloodContent -> String
channelUsers :: FloodContent -> [UserID]
channelPrivate :: FloodContent -> Bool

-- | Join message for a channel
Join :: ChannelName -> ChannelID -> FloodContent
joinChannelName :: FloodContent -> ChannelName
joinChannelID :: FloodContent -> ChannelID

-- | The users leaves a channel
Leave :: ChannelName -> ChannelID -> FloodContent
leaveChannelName :: FloodContent -> ChannelName
leaveChannelID :: FloodContent -> ChannelID

-- | An anonymous message that has been unpacked and will be flooded
Anonymous :: String -> [Attachment] -> UTCTime -> Delay -> FloodContent
anonymousText :: FloodContent -> String
anonymousAttachments :: FloodContent -> [Attachment]
anonymousTime :: FloodContent -> UTCTime
anonymousDelay :: FloodContent -> Delay

-- | A messages content can either be encrypted or not.
data MessageContent
EncryptedMessage :: (Encrypted String) -> [EncryptedAttachment] -> MessageContent
UnencryptedMessage :: String -> [Attachment] -> MessageContent

-- | Decrements the time-to-live of a message. If it sinks under zero,
--   <a>Nothing</a> is returned. <a>Just</a> <tt>msg</tt> otherwise, where
--   <tt>msg</tt> has a decremented ttl.
decrementTTL :: Routed a sign -> Maybe (Routed a sign)

-- | Extracts the information from a message, that indicates, where to
--   route it.
routeTo :: Routed TargetContent sign -> [UserID]
instance Show MessageContent
instance Eq MessageContent
instance Show FloodContent
instance Eq FloodContent
instance Show TargetContent
instance Eq TargetContent
instance (Show sign) => Show (ProtocolMessage sign)
instance (Eq sign) => Eq (ProtocolMessage sign)
instance (Show a, Show sign) => Show (Routed a sign)
instance (Eq a, Eq sign) => Eq (Routed a sign)
instance Show EncryptedAttachment
instance Eq EncryptedAttachment
instance Show Attachment
instance Eq Attachment
instance Show CipherType
instance Eq CipherType
instance Functor ProtocolMessage
instance Functor (Routed a)


-- | Date: 2007-06-15
module Network.AdHoc.Generator

-- | Takes an <a>InternalMessage</a> and generates the XML document from
--   it.
generateMessage :: [MessageID] -> InternalMessage -> (String, [MessageID])

-- | Takes an <a>AbstractElement</a> and generates the XML document from
--   it.
generateMessage' :: AbstractElement -> String

-- | Takes the given element and puts it into the root element of a
--   message.
genRootElem :: String -> AbstractElement -> Bool -> Maybe Delay -> TTL -> InternalSignature -> AbstractElement

-- | Generates the tree of <a>AbstractElement</a>s for an anonymous
--   message.
genAnonymous :: Bool -> Maybe UserID -> Maybe MessageID -> String -> [Attachment] -> UTCTime -> AbstractElement

-- | Generates the tree of <a>AbstractElement</a>s for an obscure message.
genObscure :: UserID -> Maybe MessageID -> ByteString -> AbstractElement
instance Show AbstractElement


module Network.AdHoc.Routing

-- | This class abstracts routing strategies for data-structures like
--   Barracuda.RoutingTable.SimpleRT. Minimal definition: one of
--   <a>routeSingle</a> or <a>routeMulti</a>.
class RoutingStrategy rs
routeSingle :: (RoutingStrategy rs) => UserID -> rs -> Maybe SockAddr
routeMulti :: (RoutingStrategy rs) => [UserID] -> rs -> (Map SockAddr [UserID], [UserID])

-- | Abstracts addressed contents that can be sent to (several) users.
class Addressed a
route :: (Addressed a, RoutingStrategy r) => r -> a -> (Map SockAddr a, Maybe a)
instance Ord SockAddr
instance Addressed (Routed TargetContent sign)
instance Addressed (Routed (RSAEncrypted String) sign)


-- | A module containing functions to parse the XML specified by the
--   protocol into the internal message types.
module Network.AdHoc.ParserStrict

-- | Parses a message without verifying the signature. It must only be used
--   for testing or debugging issues!
parseMessageNoValidate :: Document Posn -> Either String ExternalMessage

-- | Given a validation function for signatures, this function parses an
--   XML <a>Document</a> into an <a>ExternalMessage</a>.
parseMessage :: (String -> Signature -> UserID -> SignatureStatus) -> Document Posn -> Either String ExternalMessage

-- | Parses an Obscure-message.
parseInnerMessage :: Document Posn -> Either String (Either (UserID, RSAEncrypted String) (UTCTime, String, [Attachment]))
