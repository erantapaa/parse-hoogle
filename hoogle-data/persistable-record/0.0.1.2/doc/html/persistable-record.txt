-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding between SQL database values and haskell records.
--   
--   This package contiains types to represent table constraints and
--   interfaces to bind between SQL database values and Haskell records.
@package persistable-record
@version 0.0.1.2


-- | This module provides proof object definitions of table constraint
--   specifiey by keys.
module Database.Record.KeyConstraint

-- | Proof object to specify table constraint for table record type
--   <tt>r</tt> and constraint <tt>c</tt> specified by a single column.
data ColumnConstraint c r

-- | Index of key which specifies table constraint.
index :: ColumnConstraint c r -> Int

-- | Unsafely generate <a>ColumnConstraint</a> proof object using specified
--   key index.
unsafeSpecifyColumnConstraint :: Int -> ColumnConstraint c r

-- | Constraint type. Unique key.
data Unique

-- | Specialized unique constraint.
type UniqueColumnConstraint = ColumnConstraint Unique

-- | Constraint type. Not-null key.
data NotNull

-- | Specialized not-null constraint.
type NotNullColumnConstraint = ColumnConstraint NotNull

-- | Constraint type. Primary key.
data Primary

-- | Specialized primary constraint.
type PrimaryColumnConstraint = ColumnConstraint Primary

-- | Proof object to specify table constraint for table record type
--   <tt>r</tt> and constraint <tt>c</tt>. Constraint is specified by
--   composite key.
data KeyConstraint c r

-- | Index of key which specifies table constraint.
indexes :: KeyConstraint c r -> [Int]

-- | Unsafely generate <a>KeyConstraint</a> proof object using specified
--   key indexes.
unsafeSpecifyKeyConstraint :: [Int] -> KeyConstraint c r

-- | Specialized unique constraint.
type UniqueConstraint = KeyConstraint Unique

-- | Specialized primary constraint.
type PrimaryConstraint = KeyConstraint Primary

-- | Derivation rule for <a>UniqueColumnConstraint</a>. Derive Unique from
--   Primary.
uniqueColumn :: PrimaryColumnConstraint r -> UniqueColumnConstraint r

-- | Derivation rule for <a>NotNullColumnConstraint</a>. Derive NotNull
--   from Primary.
notNullColumn :: PrimaryColumnConstraint r -> NotNullColumnConstraint r

-- | Derivation rule of <a>ColumnConstraint</a> <a>NotNull</a> for tuple
--   (,) type.
leftColumnConstraint :: ColumnConstraint NotNull a -> ColumnConstraint NotNull (a, b)

-- | Unsafely generate <a>NotNullColumnConstraint</a> proof object of
--   single column value.
unsafeSpecifyNotNullValue :: NotNullColumnConstraint a

-- | Derivation rule for <a>KeyConstraint</a>. Derive from
--   <a>ColumnConstraint</a>.
deriveComposite :: ColumnConstraint c r -> KeyConstraint c r

-- | Derivation rule for <a>UniqueConstraint</a>.
unique :: PrimaryConstraint r -> UniqueConstraint r

-- | Interface of inference rule for <a>ColumnConstraint</a> proof object.
class HasColumnConstraint c a
columnConstraint :: HasColumnConstraint c a => ColumnConstraint c a

-- | Inferred <a>UniqueColumnConstraint</a> proof object. Record type
--   <tt>r</tt> has unique key which is derived <tt>r</tt> has primary key.
derivedUniqueColumnConstraint :: HasColumnConstraint Primary r => UniqueColumnConstraint r

-- | Inferred <a>NotNullColumnConstraint</a> proof object. Record type
--   <tt>r</tt> has not-null key which is derived <tt>r</tt> has primary
--   key.
derivedNotNullColumnConstraint :: HasColumnConstraint Primary r => NotNullColumnConstraint r

-- | Interface of inference rule for <a>KeyConstraint</a> proof object.
class HasKeyConstraint c a
keyConstraint :: HasKeyConstraint c a => KeyConstraint c a

-- | Inferred <a>PrimaryConstraint</a> proof object. Record type <tt>r</tt>
--   has composite primary key which is derived <tt>r</tt> has single
--   column primary key.
derivedCompositePrimary :: HasColumnConstraint Primary r => PrimaryConstraint r

-- | Inferred <a>UniqueConstraint</a> proof object. Record type <tt>r</tt>
--   has unique key which is derived <tt>r</tt> has primary key.
derivedUniqueConstraint :: HasKeyConstraint Primary r => UniqueConstraint r
instance HasColumnConstraint NotNull a => HasColumnConstraint NotNull (a, b)


-- | This module defines interfaces between Haskell type and list of SQL
--   type.
module Database.Record.Persistable

-- | Proof object to specify type <tt>q</tt> is SQL type
data PersistableSqlType q

-- | Null value of SQL type <tt>q</tt>.
runPersistableNullValue :: PersistableSqlType q -> q

-- | Unsafely generate <a>PersistableSqlType</a> proof object from
--   specified SQL null value which type is <tt>q</tt>.
unsafePersistableSqlTypeFromNull :: q -> PersistableSqlType q

-- | Proof object to specify width of Haskell type <tt>a</tt> when
--   converting to SQL type list.
data PersistableRecordWidth a

-- | Get width <a>Int</a> value of record type <tt>a</tt>.
runPersistableRecordWidth :: PersistableRecordWidth a -> Int

-- | Unsafely generate <a>PersistableRecordWidth</a> proof object from
--   specified width of Haskell type <tt>a</tt>.
unsafePersistableRecordWidth :: Int -> PersistableRecordWidth a

-- | Unsafely generate <a>PersistableRecordWidth</a> proof object for
--   Haskell type <tt>a</tt> which is single column type.
unsafeValueWidth :: PersistableRecordWidth a

-- | Derivation rule of <a>PersistableRecordWidth</a> for tuple (,) type.
(<&>) :: PersistableRecordWidth a -> PersistableRecordWidth b -> PersistableRecordWidth (a, b)

-- | Derivation rule of <a>PersistableRecordWidth</a> from from Haskell
--   type <tt>a</tt> into for Haskell type <a>Maybe</a> <tt>a</tt>.
maybeWidth :: PersistableRecordWidth a -> PersistableRecordWidth (Maybe a)

-- | Proof object to specify value type <tt>a</tt> is convertible with SQL
--   type <tt>q</tt>
data PersistableSqlValue q a

-- | Axiom of <a>PersistableSqlValue</a> for SQL type <tt>q</tt> and
--   Haskell type <tt>a</tt>.
persistableSqlValue :: PersistableSqlType q -> (q -> a) -> (a -> q) -> PersistableSqlValue q a

-- | Run <a>PersistableSqlValue</a> proof object. Convert from SQL type
--   <tt>q</tt> into Haskell type <tt>a</tt>.
toValue :: PersistableSqlValue q a -> q -> a

-- | Run <a>PersistableSqlValue</a> proof object. Convert from Haskell type
--   <tt>a</tt> into SQL type <tt>q</tt>.
fromValue :: PersistableSqlValue q a -> a -> q

-- | Interface of inference rule for <a>PersistableSqlType</a> proof object
class Eq q => PersistableType q
persistableType :: PersistableType q => PersistableSqlType q

-- | Inferred Null value of SQL type.
sqlNullValue :: PersistableType q => q

-- | Interface of inference rule for <a>PersistableSqlValue</a> proof
--   object
class PersistableType q => PersistableValue q a
persistableValue :: PersistableValue q a => PersistableSqlValue q a

-- | Run inferred <a>PersistableSqlValue</a> proof object. Convert from SQL
--   type <tt>q</tt> into Haskell type <tt>a</tt>.
fromSql :: PersistableValue q a => q -> a

-- | Run inferred <a>PersistableSqlValue</a> proof object. Convert from
--   Haskell type <tt>a</tt> into SQL type <tt>q</tt>.
toSql :: PersistableValue q a => a -> q

-- | Interface of inference rule for <a>PersistableRecordWidth</a> proof
--   object
class PersistableWidth a
persistableWidth :: PersistableWidth a => PersistableRecordWidth a

-- | Pass type parameter and inferred width value.
derivedWidth :: PersistableWidth a => (PersistableRecordWidth a, Int)
instance PersistableWidth ()
instance PersistableWidth a => PersistableWidth (Maybe a)
instance (PersistableWidth a, PersistableWidth b) => PersistableWidth (a, b)


-- | This module defines interfaces from Haskell type into list of SQL
--   type.
module Database.Record.ToSql

-- | Context type to convert SQL type list.
type ToSqlM q a = Writer (DList q) a

-- | Proof object type to convert from Haskell type <tt>a</tt> into list of
--   SQL type [<tt>q</tt>].
data RecordToSql q a

-- | Run <a>RecordToSql</a> proof object. Convert from Haskell type
--   <tt>a</tt> into list of SQL type [<tt>q</tt>].
runFromRecord :: RecordToSql q a -> a -> [q]

-- | Axiom of <a>RecordToSql</a> for SQL type <tt>q</tt> and Haksell type
--   <tt>a</tt>.
createRecordToSql :: (a -> [q]) -> RecordToSql q a

-- | Derivation rule of <a>RecordToSql</a> proof object for Haskell tuple
--   (,) type.
(<&>) :: RecordToSql q a -> RecordToSql q b -> RecordToSql q (a, b)

-- | Inference rule interface for <a>RecordToSql</a> proof object.
class ToSql q a
recordToSql :: ToSql q a => RecordToSql q a

-- | Run inferred <a>RecordToSql</a> proof object. Context to convert
--   haskell record type <tt>a</tt> into SQL type <tt>q</tt> list.
putRecord :: ToSql q a => a -> ToSqlM q ()

-- | Run <a>RecordToSql</a> empty printer.
putEmpty :: () -> ToSqlM q ()

-- | Run inferred <a>RecordToSql</a> proof object. Convert from haskell
--   type <tt>a</tt> into list of SQL type [<tt>q</tt>].
fromRecord :: ToSql q a => a -> [q]

-- | Finalize <a>RecordToSql</a> record printer.
wrapToSql :: (a -> ToSqlM q ()) -> RecordToSql q a

-- | Derived <a>RecordToSql</a> from persistable value.
valueToSql :: PersistableValue q a => RecordToSql q a

-- | Convert from Haskell type <tt>ra</tt> into SQL value <tt>q</tt> list
--   expected by update form like
--   
--   <i>UPDATE <a>table</a> SET c0 = ?, c1 = ?, ..., cn = ? WHERE key0 = ?
--   AND key1 = ? AND key2 = ? ... </i>
--   
--   using <a>RecordToSql</a> proof object.
updateValuesByUnique' :: RecordToSql q ra -> KeyConstraint Unique ra -> ra -> [q]

-- | Convert like <a>updateValuesByUnique'</a> using inferred
--   <a>RecordToSql</a> proof object.
updateValuesByUnique :: ToSql q ra => KeyConstraint Unique ra -> ra -> [q]

-- | Convert like <a>updateValuesByUnique'</a> using inferred
--   <a>RecordToSql</a> and <tt>ColumnConstraint</tt> proof objects.
updateValuesByPrimary :: (HasKeyConstraint Primary ra, ToSql q ra) => ra -> [q]

-- | Make untyped indexes to update column from key indexes and record
--   width. Expected by update form like
--   
--   <i>UPDATE <a>table</a> SET c0 = ?, c1 = ?, ..., cn = ? WHERE key0 = ?
--   AND key1 = ? AND key2 = ? ... </i>
untypedUpdateValuesIndex :: [Int] -> Int -> [Int]

-- | Unsafely specify key indexes to convert from Haskell type <tt>ra</tt>
--   into SQL value <tt>q</tt> list expected by update form like
--   
--   <i>UPDATE <a>table</a> SET c0 = ?, c1 = ?, ..., cn = ? WHERE key0 = ?
--   AND key1 = ? AND key2 = ? ... </i>
--   
--   using <a>RecordToSql</a> proof object.
unsafeUpdateValuesWithIndexes :: RecordToSql q ra -> [Int] -> ra -> [q]
instance ToSql q ()
instance (PersistableType q, PersistableWidth a, ToSql q a) => ToSql q (Maybe a)
instance (ToSql q a, ToSql q b) => ToSql q (a, b)


-- | This module defines interfaces from list of SQL type into Haskell
--   type.
module Database.Record.FromSql

-- | Proof object type to convert from sql value type <tt>q</tt> list into
--   Haskell type <tt>a</tt>.
data RecordFromSql q a

-- | Run <a>RecordFromSql</a> proof object. Convert from list of SQL type
--   [<tt>q</tt>] into Haskell type <tt>a</tt> and rest of list
--   [<tt>q</tt>].
runTakeRecord :: RecordFromSql q a -> [q] -> (a, [q])

-- | Run <a>RecordFromSql</a> proof object. Convert from list of SQL type
--   [<tt>q</tt>] into Haskell type <tt>a</tt>.
runToRecord :: RecordFromSql q a -> [q] -> a

-- | Axiom of <a>RecordFromSql</a> for SQL type <tt>q</tt> and Haskell type
--   <tt>a</tt>
createRecordFromSql :: ([q] -> (a, [q])) -> RecordFromSql q a

-- | Derivation rule of <a>RecordFromSql</a> proof object for Haskell tuple
--   (,) type.
(<&>) :: RecordFromSql q a -> RecordFromSql q b -> RecordFromSql q (a, b)

-- | Derivation rule of <a>RecordFromSql</a> proof object for Haskell
--   <a>Maybe</a> type.
maybeRecord :: PersistableType q => RecordFromSql q a -> ColumnConstraint NotNull a -> RecordFromSql q (Maybe a)

-- | Inference rule interface for <a>RecordFromSql</a> proof object.
class FromSql q a
recordFromSql :: FromSql q a => RecordFromSql q a

-- | Run inferred <a>RecordFromSql</a> proof object. Convert from list of
--   SQL type [<tt>q</tt>] into haskell type <tt>a</tt> and rest of list
--   [<tt>q</tt>].
takeRecord :: FromSql q a => [q] -> (a, [q])

-- | Run inferred <a>RecordFromSql</a> proof object. Convert from list of
--   SQL type [<tt>q</tt>] into haskell type <tt>a</tt>.
toRecord :: FromSql q a => [q] -> a

-- | Derived <a>RecordFromSql</a> from persistable value.
valueFromSql :: PersistableValue q a => RecordFromSql q a
instance FromSql q ()
instance (HasColumnConstraint NotNull a, FromSql q a, PersistableType q) => FromSql q (Maybe a)
instance (FromSql q a, FromSql q b) => FromSql q (a, b)
instance Applicative (RecordFromSql q)
instance Functor (RecordFromSql q)
instance Monad (RecordFromSql q)


-- | This is integrated module which contains types to represent table
--   constraints and interfaces to bind between SQL database values and
--   Haskell records.
module Database.Record


-- | This module defines templates for Haskell record type and type class
--   instances to map between list of untyped SQL type and Haskell record
--   type.
module Database.Record.TH

-- | All templates for record type.
defineRecord :: TypeQ -> (VarName, VarName) -> ConName -> [(VarName, TypeQ)] -> [ConName] -> Q [Dec]

-- | All templates for record type with default names.
defineRecordDefault :: TypeQ -> String -> [(String, TypeQ)] -> [ConName] -> Q [Dec]

-- | Name to specify deriving <a>Eq</a>
derivingEq :: ConName

-- | Name to specify deriving <a>Show</a>
derivingShow :: ConName

-- | Name to specify deriving <a>Read</a>
derivingRead :: ConName

-- | Name to specify deriving <tt>Data</tt>
derivingData :: ConName

-- | Name to specify deriving <tt>Typable</tt>
derivingTypable :: ConName

-- | Template of <a>HasColumnConstraint</a> instance.
defineHasColumnConstraintInstance :: TypeQ -> TypeQ -> Int -> Q [Dec]

-- | Template of <a>HasKeyConstraint</a> instance.
defineHasPrimaryConstraintInstanceDerived :: TypeQ -> Q [Dec]

-- | Template of <a>HasColumnConstraint</a> <a>NotNull</a> instance.
defineHasNotNullKeyInstance :: TypeQ -> Int -> Q [Dec]

-- | Template of <a>HasColumnConstraint</a> <a>Primary</a> instance.
defineHasPrimaryKeyInstance :: TypeQ -> [Int] -> Q [Dec]

-- | Template of <a>HasColumnConstraint</a> <a>Primary</a> instance from
--   SQL table name <a>String</a> and key index.
defineHasPrimaryKeyInstanceDefault :: String -> [Int] -> Q [Dec]

-- | Template of <a>HasColumnConstraint</a> <a>NotNull</a> instance from
--   SQL table name <a>String</a> and key index.
defineHasNotNullKeyInstanceDefault :: String -> Int -> Q [Dec]

-- | Record type declaration template.
defineRecordType :: ConName -> [(VarName, TypeQ)] -> [ConName] -> Q [Dec]

-- | Record type declaration template from SQL table name <a>String</a> and
--   column name <a>String</a> - type pairs, derivings.
defineRecordTypeDefault :: String -> [(String, TypeQ)] -> [ConName] -> Q [Dec]

-- | All templates depending on SQL value type.
makeRecordPersistableWithSqlType :: TypeQ -> (VarName, VarName) -> (TypeQ, ExpQ) -> Int -> Q [Dec]

-- | All templates depending on SQL value type with default names.
makeRecordPersistableWithSqlTypeDefault :: TypeQ -> String -> Int -> Q [Dec]

-- | All templates depending on SQL value type. Defined record type
--   information is used.
makeRecordPersistableWithSqlTypeFromDefined :: TypeQ -> (VarName, VarName) -> Name -> Q [Dec]

-- | All templates depending on SQL value type with default names. Defined
--   record type information is used.
makeRecordPersistableWithSqlTypeDefaultFromDefined :: TypeQ -> Name -> Q [Dec]

-- | Column offset array and <a>PersistableWidth</a> instance declaration.
defineColumnOffsets :: ConName -> [TypeQ] -> Q [Dec]

-- | Record type width expression template.
recordWidthTemplate :: TypeQ -> ExpQ

-- | Record parser template.
defineRecordParser :: TypeQ -> VarName -> (TypeQ, ExpQ) -> Int -> Q [Dec]

-- | Record printer template.
defineRecordPrinter :: TypeQ -> VarName -> (TypeQ, ExpQ) -> Int -> Q [Dec]

-- | Record parser and printer instance templates for converting between
--   list of SQL type and Haskell record type.
definePersistableInstance :: TypeQ -> TypeQ -> VarName -> VarName -> Int -> Q [Dec]

-- | Low-level reify interface for record type name.
reifyRecordType :: Name -> Q ((TypeQ, ExpQ), (Maybe [Name], [TypeQ]))

-- | Generate default name of record type constructor from SQL table name
--   <a>String</a>
recordTypeNameDefault :: String -> ConName

-- | Record type constructor template from SQL table name <a>String</a>.
--   Type name is generated by <a>recordTypeNameDefault</a>.
recordTypeDefault :: String -> TypeQ

-- | Variable expression of record column offset array.
columnOffsetsVarNameDefault :: Name -> VarName

-- | Generate persistable function symbol names using default rule.
persistableFunctionNamesDefault :: Name -> (VarName, VarName)

-- | Templates for single column value type.
deriveNotNullType :: TypeQ -> Q [Dec]


-- | Single column instances for example to load schema of system catalogs.
module Database.Record.Instances
instance HasColumnConstraint NotNull Int64
instance PersistableWidth Int64
instance HasColumnConstraint NotNull Int32
instance PersistableWidth Int32
instance HasColumnConstraint NotNull Int16
instance PersistableWidth Int16
instance HasColumnConstraint NotNull Int8
instance PersistableWidth Int8
instance HasColumnConstraint NotNull String
instance PersistableWidth String
instance HasColumnConstraint NotNull Char
instance PersistableWidth Char
instance HasColumnConstraint NotNull Bool
instance PersistableWidth Bool
