-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell wrapper around the GIZA++ toolkit.
--   
--   This provides a simple wrapper around the GIZA++ toolkit, which is
--   used for Statistical Machine Translation for training IBM Models 1-5
--   and an HMM word alignment model. See
--   <a>http://code.google.com/p/giza-pp/</a> for more details on GIZA++
--   
--   This work was made possible by EPSRC grant (EP/E029116/1)
--   
--   darcs get <a>http://code.haskell.org/~kowey/hs-gizapp</a>
--   
--   Note that while this wrapper is BSD3 licensed, GIZA++ itself is
--   released under GPLv2.
@package hs-gizapp
@version 0.1.0.3

module NLP.GizaPlusPlus.Parsec
type OneToManyPair = (String, [Integer])
alignFile :: CharParser () [([String], [OneToManyPair])]
alignSentencePair :: CharParser () ([String], [OneToManyPair])
alignWordPair :: CharParser () OneToManyPair
alignWord :: CharParser () String
justSpace :: CharParser () Char
natural :: CharParser () Integer
readM :: (Monad m, Read a) => String -> m a

module NLP.GizaPlusPlus
data WordPos
WordPos :: String -> Int -> WordPos
data Align
Align :: WordPos -> WordPos -> Align
data GizaCfg
GizaCfg :: Int -> Int -> Int -> Int -> Int -> Int -> Bool -> Bool -> Bool -> Bool -> GizaCfg
gizaHmmiterations :: GizaCfg -> Int
gizaModel1iterations :: GizaCfg -> Int
gizaModel2iterations :: GizaCfg -> Int
gizaModel3iterations :: GizaCfg -> Int
gizaModel4iterations :: GizaCfg -> Int
gizaModel5iterations :: GizaCfg -> Int
gizaPegging :: GizaCfg -> Bool
gizaNBestAlignments :: GizaCfg -> Bool
gizaCompactTable :: GizaCfg -> Bool
gizaVerbose :: GizaCfg -> Bool
defaultGizaCfg :: GizaCfg

-- | Convert a <a>GizaCfg</a> into a (fragment of a) GIZA++ configuration
--   file (when we call giza, we will append other entries)
fromGizaCfg :: GizaCfg -> String
type Alignment = ([String], [String], [Align])

-- | Run GIZA++ and extract a list of word alignments
align :: GizaCfg -> [(String, String)] -> IO [Alignment]
_dev_null :: FilePath
type OneToManyPair = (String, [Integer])
toAlignment :: ([String], [OneToManyPair]) -> Alignment
count :: (Ord a) => [a] -> [(a, Int)]
withTempFile :: FilePath -> String -> ((FilePath, Handle) -> IO a) -> IO a
instance Read Align
instance Show Align
instance Eq Align
instance Ord Align
instance Read WordPos
instance Show WordPos
instance Eq WordPos
instance Ord WordPos
