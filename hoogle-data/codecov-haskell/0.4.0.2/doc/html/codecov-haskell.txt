-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Codecov.io support for Haskell.
--   
@package codecov-haskell
@version 0.4.0.2

module Paths_codecov_haskell
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath
getSysconfDir :: IO FilePath


-- | Utility functions.
module Trace.Hpc.Codecov.Util
fst3 :: (a, b, c) -> a
snd3 :: (a, b, c) -> b
trd3 :: (a, b, c) -> c
fst4 :: (a, b, c, d) -> a
toFirstAndRest :: (a, b, c, d) -> (a, (b, c, d))
listToMaybe :: [a] -> Maybe [a]
matchAny :: [String] -> String -> Bool
mapFirst :: (a -> a) -> [a] -> [a]
mapLast :: (a -> a) -> [a] -> [a]
subSeq :: Int -> Int -> [a] -> [a]
subSubSeq :: Int -> Int -> [[a]] -> [[a]]
groupByIndex :: Int -> [(Int, a)] -> [[a]]


-- | Types to represent hpc code coverage data.
module Trace.Hpc.Codecov.Types
type CoverageEntry = ([MixEntry], [Integer], [String])
data Hit
Full :: Hit
Partial :: Hit
None :: Hit
Irrelevant :: Hit
type Lix = [Hit]

-- | Result to the POST request to codecov.io
data PostResult

-- | Codecov job url and wait url
PostSuccess :: URLString -> URLString -> PostResult

-- | error message
PostFailure :: String -> PostResult
instance Eq Hit
instance Show Hit


-- | Functions for converting hpc output to line-based code coverage data.
module Trace.Hpc.Codecov.Lix
toHit :: [Bool] -> Hit
getLine :: MixEntry -> Int
toLineHit :: CoverageEntry -> (Int, Bool)
isOtherwiseEntry :: CoverageEntry -> Bool
adjust :: CoverageEntry -> CoverageEntry

-- | Convert hpc coverage entries into a line based coverage format
toLix :: Int -> [CoverageEntry] -> Lix


-- | Functions for converting and sending hpc output to codecov.io.
module Trace.Hpc.Codecov

-- | Generate codecov json formatted code coverage from hpc coverage data
generateCodecovFromTix :: Config -> IO Value
