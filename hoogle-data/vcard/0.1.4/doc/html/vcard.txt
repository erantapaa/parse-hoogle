-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for parsing/printing vCards from/to various formats.
--   
--   A library for parsing/printing vCards from/to various formats.
--   Currently only vCard 3.0 defined in RFC 2426 is supported.
@package vcard
@version 0.1.4


module Text.VCard.Types
data Version
Version :: Int -> Int -> Version
version_major :: Version -> Int
version_minor :: Version -> Int

-- | Additional value specifications in RFC 2426.
data ExtraValue
Struct :: [[ByteString]] -> ExtraValue
Binary :: ByteString -> ExtraValue
PhoneNumber :: ByteString -> ExtraValue
UTCOffset :: Char -> Int -> Int -> ExtraValue
utcOffset_sign :: ExtraValue -> Char

-- | Valid range: 0-23
utcOffset_hours :: ExtraValue -> Int

-- | Valid range: 0-25
utcOffset_minutes :: ExtraValue -> Int
SubVCard :: VCard -> ExtraValue
data VCard
VCard :: Version -> Map ByteString [VProperty] -> VCard
vcard_version :: VCard -> Version
vcard_properties :: VCard -> Map ByteString [VProperty]

-- | A |VCardValue| obeys the union of the value specifications in RFC 2425
--   and RFC 2426.
type VCardValue = Value ExtraValue
type VProperty = Property ExtraValue
type SourceName = String
instance Show VCard
instance Show ExtraValue
instance Show Version


-- | Field selectors for struct values, such as in N or ADR properties.
module Text.VCard.Selectors


-- | Convenience functions to extract values in vCards and mapping over
--   these values.
module Text.VCard.Query

-- | Analog to |Data.List.lookup|. In general an attribute may map to a
--   number of values. vCards should maintain the invariant that <tt>forall
--   attr, lookup attr vcard /= Just []</tt>.
lookup :: ByteString -> VCard -> Maybe [VCardValue]

-- | Unsafe variant of |lookup| that assumes given type name maps to
--   exactly one value in the vCard.
lookup' :: ByteString -> VCard -> VCardValue
insert :: VProperty -> VCard -> VCard

-- | Supports the most general filter predicates of the <tt>filter</tt>
--   family of functions.
filterWithProperty :: (VProperty -> Bool) -> [VCard] -> [VCard]

-- | A specialization of |filterWithProperty|.
filterWithType :: (Type -> VCardValue -> Bool) -> [VCard] -> [VCard]

-- | Filter by property value only.
filter :: (VCardValue -> Bool) -> [VCard] -> [VCard]

-- | Supports the most general map predicates of the <tt>map</tt> family of
--   functions.
mapWithProperty :: (VProperty -> VCardValue) -> [VCard] -> [VCard]

-- | A specialization of |mapWithProperty|.
mapWithType :: (Type -> VCardValue -> VCardValue) -> [VCard] -> [VCard]

-- | Map by property value only.
map :: (VCardValue -> VCardValue) -> [VCard] -> [VCard]


-- | This module reexports most of the modules in the vCard library in
--   additionto the mime-directory library, with the exception of
--   |Text.VCard.Query|, since that library should be imported qualified,
--   as many of the names clash with standard |Prelude| names.
--   
--   To use this library, you probably want to import one of the modules in
--   |Text.VCard.Format| only, to parse and serialize vcards in specific
--   formats.
module Text.VCard


-- | Implements the vCard format defined in RFC 2426, based on the
--   text/directory MIME type defined in RFC 2425.
module Text.VCard.Format.Directory
readVCards :: SourceName -> ByteString -> [VCard]
fromProperties :: [VProperty] -> VCard
writeVCard :: VCard -> ByteString
instance PrintValue ExtraValue
