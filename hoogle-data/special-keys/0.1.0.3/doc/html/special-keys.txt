-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple data types that help me here and there.
--   
--   Datatypes that I use as keys to index other data types. Here you will
--   find a wrap of UUID and also constraints on Text so that it never
--   exceeds a given number of characters.
@package special-keys
@version 0.1.0.3

module Keys.Constraints

-- | Text with a maximum of 128 characters
data Text128
data Text256
data Text512
data Text1024
data Text2048
data Text4096
class TextConstraint a
txtConstraint :: TextConstraint a => Text -> a
getTxt :: TextConstraint a => a -> Text
t128 :: Text -> Text128
t256 :: Text -> Text256
t512 :: Text -> Text512
t1024 :: Text -> Text1024
t2048 :: Text -> Text2048
t4096 :: Text -> Text4096
instance Typeable Text128
instance Typeable Text256
instance Typeable Text512
instance Typeable Text1024
instance Typeable Text2048
instance Typeable Text4096
instance Eq Text128
instance Data Text128
instance Ord Text128
instance Read Text128
instance Show Text128
instance IsString Text128
instance Monoid Text128
instance NFData Text128
instance Eq Text256
instance Data Text256
instance Ord Text256
instance Read Text256
instance Show Text256
instance IsString Text256
instance Monoid Text256
instance NFData Text256
instance Eq Text512
instance Data Text512
instance Ord Text512
instance Read Text512
instance Show Text512
instance IsString Text512
instance Monoid Text512
instance NFData Text512
instance Eq Text1024
instance Data Text1024
instance Ord Text1024
instance Read Text1024
instance Show Text1024
instance IsString Text1024
instance Monoid Text1024
instance NFData Text1024
instance Eq Text2048
instance Data Text2048
instance Ord Text2048
instance Read Text2048
instance Show Text2048
instance IsString Text2048
instance Monoid Text2048
instance NFData Text2048
instance Eq Text4096
instance Data Text4096
instance Ord Text4096
instance Read Text4096
instance Show Text4096
instance IsString Text4096
instance Monoid Text4096
instance NFData Text4096
instance ToJSON Text4096
instance ToJSON Text2048
instance ToJSON Text1024
instance ToJSON Text512
instance ToJSON Text256
instance ToJSON Text128
instance FromJSON Text4096
instance FromJSON Text2048
instance FromJSON Text1024
instance FromJSON Text512
instance FromJSON Text256
instance FromJSON Text128
instance SafeCopy Text4096
instance SafeCopy Text2048
instance SafeCopy Text1024
instance SafeCopy Text512
instance SafeCopy Text256
instance SafeCopy Text128
instance Serialize Text4096
instance Serialize Text2048
instance Serialize Text1024
instance Serialize Text512
instance Serialize Text256
instance Serialize Text128
instance Hashable Text4096
instance Hashable Text2048
instance Hashable Text1024
instance Hashable Text512
instance Hashable Text256
instance Hashable Text128
instance TextConstraint a => TextConstraint (Maybe a)
instance TextConstraint Text4096
instance TextConstraint Text2048
instance TextConstraint Text1024
instance TextConstraint Text512
instance TextConstraint Text256
instance TextConstraint Text128

module Keys.Random

-- | Converts a Char to a Word8. Took from MissingH
c2w8 :: Char -> Word8
charRangeStart :: Word8
charRangeEnd :: Word8
genString :: Gen (PrimState IO) -> IO ByteString
genInt :: Gen (PrimState IO) -> IO Int
genIntRange :: (Int, Int) -> Gen (PrimState IO) -> IO Int
rndTxt :: IO Text
rndInt :: IO Int
rndIntRange :: (Int, Int) -> IO Int
class HasRandom a
rnd :: HasRandom a => IO a
instance HasRandom Text4096
instance HasRandom Text2048
instance HasRandom Text1024
instance HasRandom Text512
instance HasRandom Text256
instance HasRandom Text128
instance HasRandom a => HasRandom (Maybe a)
instance HasRandom ByteString
instance HasRandom Text

module Keys.UUID
newtype UUID
UUID :: UUID -> UUID
unUUID :: UUID -> UUID
strUUID :: UUID -> String
txtUUID :: UUID -> Text
nil :: UUID
instance Typeable UUID
instance Ord UUID
instance Eq UUID
instance Data UUID
instance Storable UUID
instance PathPiece UUID
instance SafeCopy UUID
instance Hashable UUID
instance FromJSON UUID
instance ToJSON UUID
instance ToMarkup UUID
instance HasRandom UUID
instance Serialize UUID
instance Read UUID
instance Show UUID
