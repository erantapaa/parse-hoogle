-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Data To Class transformation.
--   
--   Create a class definition from a data declaration.
--   
--   How this package works is explained in <i>Data Declarations to Class
--   Definitions</i> (see
--   <a>http://daniel-diaz.github.io/projects/dtc/dtc.pdf</a>).
@package DTC
@version 1.1.0.1


-- | Some useful functions.
module Language.Haskell.DTC.Mod

-- | Lift a function over <tt>[</tt><tt>HsDecl</tt><tt>]</tt> to a function
--   over <tt>HsModule</tt>.
modifyHsDecls :: ([Decl] -> [Decl]) -> (Module -> Module)

-- | Skip a bang in a type.
unBangType :: BangType -> Type

-- | Extract the <a>Name</a> of a <a>TyVarBind</a>.
tyVarName :: TyVarBind -> Name

-- | Lift a function over <a>String</a> to a function over <tt>HsName</tt>.
modifyHsName :: (String -> String) -> (Name -> Name)


-- | Class definition from a data declaration.
module Language.Haskell.DTC.Class

-- | Transform a data declaration to a class definition. The <a>String</a>
--   argument will be the name of the type variable of the class
--   definition.
dataToClassWith :: String -> Decl -> Decl

-- | Transform a data declaration to a class definition. Equivalent to
--   <tt>dataToClassWith "t"</tt>.
dataToClass :: Decl -> Decl

module Language.Haskell.DTC.DataInfo

-- | Information about names in a data declaration.
data DataInfo
DataInfo :: Name -> [(Name, Int)] -> [(Name, [Name])] -> DataInfo

-- | The data type name.
dataName :: DataInfo -> Name

-- | Ordinary constructor names, and their number of arguments.
consList :: DataInfo -> [(Name, Int)]

-- | Record constructor names and their field names.
rconsList :: DataInfo -> [(Name, [Name])]

-- | Extract a <a>DataInfo</a> from a declaration. Returns <a>Nothing</a>
--   if the argument is not a data declaration.
dataInfo :: Decl -> Maybe DataInfo

-- | Extract <a>DataInfo</a> from all data declarations in a module.
moduleDataInfo :: Module -> [DataInfo]
instance Show DataInfo


-- | All you need to parse a module.
module Language.Haskell.DTC.Parser

-- | The result of a parse.
data ParseResult a :: * -> *

-- | The parse succeeded, yielding a value.
ParseOk :: a -> ParseResult a

-- | The parse failed at the specified source location, with an error
--   message.
ParseFailed :: SrcLoc -> String -> ParseResult a

-- | A complete Haskell source module.
data Module :: *

-- | Static parameters governing a parse. Note that the various parse
--   functions in <a>Language.Haskell.Exts.Parser</a> never look at
--   LANGUAGE pragmas, regardless of what the
--   <tt>ignoreLanguagePragmas</tt> flag is set to. Only the various
--   <tt>parseFile</tt> functions in <a>Language.Haskell.Exts</a> will act
--   on it, when set to <a>False</a>.
data ParseMode :: *
ParseMode :: String -> [Extension] -> Bool -> Bool -> Maybe [Fixity] -> ParseMode

-- | original name of the file being parsed
parseFilename :: ParseMode -> String

-- | list of extensions enabled for parsing
extensions :: ParseMode -> [Extension]

-- | if <a>True</a>, the parser won't care about further extensions in
--   LANGUAGE pragmas in source files
ignoreLanguagePragmas :: ParseMode -> Bool

-- | if <a>True</a>, the parser won't read line position information from
--   LINE pragmas in source files
ignoreLinePragmas :: ParseMode -> Bool

-- | list of fixities to be aware of
fixities :: ParseMode -> Maybe [Fixity]

-- | Default parameters for a parse. The default is an unknown filename, no
--   extensions (i.e. Haskell 98), don't ignore LANGUAGE pragmas, do ignore
--   LINE pragmas, and be aware of fixities from the <tt>Prelude</tt>.
defaultParseMode :: ParseMode

-- | Parse of a string, which should contain a complete Haskell module.
parseModule :: String -> ParseResult Module

-- | Parse of a string containing a complete Haskell module, using an
--   explicit mode.
parseModuleWithMode :: ParseMode -> String -> ParseResult Module

-- | Parse a module from a source code file. It throws an error if parsing
--   fails.
parseModuleWithSrc :: FilePath -> ParseMode -> IO Module


-- | Main module of <tt>DTC</tt>.
module Language.Haskell.DTC
