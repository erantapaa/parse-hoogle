-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | media plugin for clckwrks
--   
--   media plugin for clckwrks
@package clckwrks-plugin-media
@version 0.6.9

module Paths_clckwrks_plugin_media
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath
getSysconfDir :: IO FilePath

module Clckwrks.Media.Types
newtype MediumId
MediumId :: Integer -> MediumId
unMediumId :: MediumId -> Integer
data MediumKind
JPEG :: MediumKind
PNG :: MediumKind
GIF :: MediumKind
mediumContentType :: MediumKind -> String
data Medium
Medium :: MediumId -> FilePath -> FilePath -> MediumKind -> Medium
mediumId :: Medium -> MediumId
uploadName :: Medium -> FilePath
mediumPath :: Medium -> FilePath
mediumKind :: Medium -> MediumKind
data PreviewSize
Tall :: PreviewSize
Grande :: PreviewSize
Venti :: PreviewSize
instance Indexable Medium
instance SafeCopy PreviewSize
instance Typeable PreviewSize
instance Eq PreviewSize
instance Ord PreviewSize
instance Read PreviewSize
instance Show PreviewSize
instance Data PreviewSize
instance SafeCopy Medium
instance Typeable Medium
instance Eq Medium
instance Ord Medium
instance Read Medium
instance Show Medium
instance Data Medium
instance SafeCopy MediumKind
instance Typeable MediumId
instance Typeable MediumKind
instance Eq MediumId
instance Ord MediumId
instance Read MediumId
instance Show MediumId
instance Data MediumId
instance PathInfo MediumId
instance Eq MediumKind
instance Ord MediumKind
instance Read MediumKind
instance Show MediumKind
instance Data MediumKind
instance SafeCopy MediumId

module Clckwrks.Media.Acid
data MediaState
MediaState :: MediumId -> IxSet Medium -> MediaState
nextMediumId :: MediaState -> MediumId
media :: MediaState -> IxSet Medium
initialMediaState :: MediaState

-- | get the next unused <tt>MediaId</tt>
genMediumId :: Update MediaState MediumId

-- | get <tt>Media</tt> by <a>MediumId</a>
getMediumById :: MediumId -> Query MediaState (Maybe Medium)

-- | store <tt>Media</tt> in the state. Will overwrite an existing entry
--   with the same <a>MediumId</a>
putMedium :: Medium -> Update MediaState ()
allMediumIds :: Query MediaState [MediumId]
data GenMediumId
GenMediumId :: GenMediumId
newtype GetMediumById
GetMediumById :: MediumId -> GetMediumById
newtype PutMedium
PutMedium :: Medium -> PutMedium
data AllMediumIds
AllMediumIds :: AllMediumIds
instance Typeable GenMediumId
instance Typeable GetMediumById
instance Typeable PutMedium
instance Typeable AllMediumIds
instance QueryEvent AllMediumIds
instance Method AllMediumIds
instance SafeCopy AllMediumIds
instance UpdateEvent PutMedium
instance Method PutMedium
instance SafeCopy PutMedium
instance QueryEvent GetMediumById
instance Method GetMediumById
instance SafeCopy GetMediumById
instance UpdateEvent GenMediumId
instance Method GenMediumId
instance SafeCopy GenMediumId
instance IsAcidic MediaState
instance SafeCopy MediaState
instance Typeable MediaState
instance Data MediaState

module Clckwrks.Media.Preview
jpgThumbnail :: PreviewSize -> FilePath -> FilePath -> IO ()
pngThumbnail :: PreviewSize -> FilePath -> FilePath -> IO ()
gifThumbnail :: PreviewSize -> FilePath -> FilePath -> IO ()
mkThumbnail :: MediumKind -> PreviewSize -> FilePath -> FilePath -> IO ()
applyTransforms :: FilePath -> FilePath -> (Medium, PreviewSize) -> IO FilePath

module Clckwrks.Media.URL
data MediaAdminURL
Upload :: MediaAdminURL
AllMedia :: MediaAdminURL
data MediaURL
GetMedium :: MediumId -> MediaURL
Preview :: MediumId -> MediaURL
MediaAdmin :: MediaAdminURL -> MediaURL
instance PathInfo MediaURL
instance Typeable MediaURL
instance Eq MediaURL
instance Ord MediaURL
instance Read MediaURL
instance Show MediaURL
instance Data MediaURL
instance PathInfo MediaAdminURL
instance Typeable MediaAdminURL
instance Eq MediaAdminURL
instance Ord MediaAdminURL
instance Read MediaAdminURL
instance Show MediaAdminURL
instance Data MediaAdminURL

module Clckwrks.Media.PreProcess
parseAttr :: Text -> Parser ()
width :: Parser Attribute
height :: Parser Attribute
parseCmd :: Parser (MediumId, [Attribute])
mediaCmd :: Monad m => (MediaURL -> [(Text, Maybe Text)] -> Text) -> Text -> ClckT url m Text
applyCmd :: (Monad m, ToValue a) => (MediaURL -> [a1] -> a) -> (MediumId, [Attribute]) -> m Builder

module Clckwrks.Media.Monad
data MediaConfig
MediaConfig :: FilePath -> AcidState MediaState -> Magic -> IOThread (Medium, PreviewSize) FilePath -> (ClckURL -> [(Text, Maybe Text)] -> Text) -> MediaConfig

-- | directory in which to store uploaded media files
mediaDirectory :: MediaConfig -> FilePath
mediaState :: MediaConfig -> AcidState MediaState
mediaMagic :: MediaConfig -> Magic
mediaIOThread :: MediaConfig -> IOThread (Medium, PreviewSize) FilePath
mediaClckURL :: MediaConfig -> ClckURL -> [(Text, Maybe Text)] -> Text
type MediaT m = ClckT MediaURL (ReaderT MediaConfig m)
type MediaM = ClckT MediaURL (ReaderT MediaConfig (ServerPartT IO))
data MediaFormError
MediaCFE :: (CommonFormError [Input]) -> MediaFormError
type MediaForm = ClckFormT MediaFormError MediaM
runMediaT :: MediaConfig -> MediaT m a -> ClckT MediaURL m a
withMediaConfig :: Maybe FilePath -> FilePath -> (MediaConfig -> IO a) -> IO a
instance Show MediaFormError
instance (Functor m, Monad m) => GetAcidState (MediaT m) MediaState
instance Monad m => MonadReader MediaConfig (MediaT m)
instance IsName n Text => EmbedAsAttr MediaM (Attr n ClckURL)
instance IsName n Text => EmbedAsAttr MediaM (Attr n MediaURL)
instance (Functor m, Monad m) => EmbedAsChild (MediaT m) MediaFormError
instance FormError MediaFormError

module Clckwrks.Media.Page.GetMedium
getMedium :: MediumId -> MediaM Response

module Clckwrks.Media.Page.Preview
previewMedium :: MediumId -> MediaM Response
lookSize :: MediaM PreviewSize
previewMediumFilePath :: MediumId -> PreviewSize -> MediaM (Maybe FilePath)

module Clckwrks.Media.Page.AllMedia
allMedia :: MediaM Response
mkGallery :: [MediumId] -> XMLGenT MediaM XML
mkPreview :: MediumId -> XMLGenT MediaM XML

module Clckwrks.Media.Page.Upload
extensionMap :: Map String (String, MediumKind)
acceptedTypes :: [String]
contentTypeExtension :: String -> Maybe (String, MediumKind)
uploadMedium :: MediaURL -> MediaM Response
uploadForm :: MediaForm (FilePath, FilePath, ContentType)

module Clckwrks.Media.Route
checkAuth :: MediaURL -> MediaM MediaURL
routeMedia :: MediaURL -> MediaM Response

module Clckwrks.Media.Plugin
mediaHandler :: (MediaURL -> [(Text, Maybe Text)] -> Text) -> MediaConfig -> ClckPlugins -> [Text] -> ClckT ClckURL (ServerPartT IO) Response
mediaInit :: ClckPlugins -> IO (Maybe Text)
addMediaAdminMenu :: ClckT url IO ()
mediaPlugin :: Plugin MediaURL Theme (ClckT ClckURL (ServerPartT IO) Response) (ClckT ClckURL IO ()) ClckwrksConfig ClckPluginsSt
plugin :: ClckPlugins -> Text -> IO (Maybe Text)

module Clckwrks.Media
