-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | RSA encryption with PKCS1 padding
--   
--   This is an implementation of RSA encryption with PKCS1 padding,
--   developed as part of the Barracuda ad-hoc P2P chat client.
--   
--   The Darcs repository can be found at
--   <a>http://repos.mroot.net/sep07-adhoc</a>
@package pkcs1
@version 1.0.2


-- | This module implements RSA encryption with PKCS1 padding.
module Codec.Encryption.PKCS1

-- | Encrypts a ByteString using RSA with PKCS1 padding
encrypt :: RandomGen g => Int -> PublicKey -> g -> ByteString -> ByteString

-- | Decrypts a ByteString using RSA with PKCS1 padding. If the ByteString
--   couldn't be decrypted, nothing is returned.
decrypt :: Int -> PrivateKey -> ByteString -> Maybe ByteString

-- | The public key is contained in a certificate.
data PublicKey
PublicKey :: Integer -> Integer -> PublicKey

-- | The modulus
publicN :: PublicKey -> Integer

-- | Public exponent
publicE :: PublicKey -> Integer
newtype PrivateKey
PrivateKey :: (Either PrivateKeySimple PrivateKeyComplex) -> PrivateKey

-- | This private key variant is considerably faster.
data PrivateKeyComplex
PrivateKeyComplex :: Integer -> Integer -> Integer -> Integer -> Integer -> PrivateKeyComplex

-- | The modulus
privateN' :: PrivateKeyComplex -> Integer

-- | The private exponent
privateD' :: PrivateKeyComplex -> Integer

-- | The first prime number
privateP :: PrivateKeyComplex -> Integer

-- | The second prime number
privateQ :: PrivateKeyComplex -> Integer

-- | Go read a book about it for god sake
privateU :: PrivateKeyComplex -> Integer

-- | This private key variant takes longer to decrypt.
data PrivateKeySimple
PrivateKeySimple :: Integer -> Integer -> PrivateKeySimple

-- | The modulus
privateN :: PrivateKeySimple -> Integer

-- | Private exponent
privateD :: PrivateKeySimple -> Integer

-- | Converts a block of bytes into a number
os2ip :: (Bits a, Integral a) => ByteString -> a

-- | Converts a number into a block of bytes
i2osp :: (Bits a, Integral a) => Int -> a -> ByteString
instance Show PrivateKeyComplex
instance Eq PrivateKeyComplex
instance Show PrivateKeySimple
instance Eq PrivateKeySimple
instance Show PublicKey
instance Eq PublicKey
