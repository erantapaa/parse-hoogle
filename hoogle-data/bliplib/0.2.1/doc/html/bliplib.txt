-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Support code for Blip.
--   
--   Support code for the Blip compiler. In particular, a library for
--   reading, writing and manipulating Python 3 bytecode files.
@package bliplib
@version 0.2.1


-- | Version number of Blip, derived magically from cabal file.
module Blip.Version
version :: Version
versionString :: String


-- | Convert Haskell Doubles to and from a list of bytes.
--   
--   XXX not sure if this is complete or immune from endian issues.
module Blip.MarshalDouble
doubleToBytes :: Double -> [Word8]
bytesToDouble :: [Word8] -> Double


-- | Pretty printing utilities.
module Blip.Pretty

-- | Pretty printing interface.
class Pretty a
pretty :: Pretty a => a -> Doc

-- | Render an instance of <a>Pretty</a> as a <a>String</a>.
prettyString :: Pretty a => a -> String
prettyList :: [Doc] -> Doc
prettyTuple :: [Doc] -> Doc

-- | Render an instance of <a>Bits</a> as a <a>String</a>.
showBits :: Bits a => a -> String
instance Pretty ByteString
instance (Pretty a, Pretty b) => Pretty (a, b)
instance Pretty Double
instance Pretty Integer
instance Pretty Int
instance Pretty Word64
instance Pretty Word32
instance Pretty Word16
instance Pretty Word8
instance Pretty a => Pretty (Maybe a)


-- | Python 3 bytecode.
module Blip.Bytecode
decode :: ByteString -> [Bytecode]
encode :: [Bytecode] -> ByteString
data Opcode
POP_TOP :: Opcode
ROT_TWO :: Opcode
ROT_THREE :: Opcode
DUP_TOP :: Opcode
DUP_TOP_TWO :: Opcode
NOP :: Opcode
UNARY_POSITIVE :: Opcode
UNARY_NEGATIVE :: Opcode
UNARY_NOT :: Opcode
UNARY_INVERT :: Opcode
BINARY_POWER :: Opcode
BINARY_MULTIPLY :: Opcode
BINARY_MODULO :: Opcode
BINARY_ADD :: Opcode
BINARY_SUBTRACT :: Opcode
BINARY_SUBSCR :: Opcode
BINARY_FLOOR_DIVIDE :: Opcode
BINARY_TRUE_DIVIDE :: Opcode
INPLACE_FLOOR_DIVIDE :: Opcode
INPLACE_TRUE_DIVIDE :: Opcode
STORE_MAP :: Opcode
INPLACE_ADD :: Opcode
INPLACE_SUBTRACT :: Opcode
INPLACE_MULTIPLY :: Opcode
INPLACE_MODULO :: Opcode
STORE_SUBSCR :: Opcode
DELETE_SUBSCR :: Opcode
BINARY_LSHIFT :: Opcode
BINARY_RSHIFT :: Opcode
BINARY_AND :: Opcode
BINARY_XOR :: Opcode
BINARY_OR :: Opcode
INPLACE_POWER :: Opcode
GET_ITER :: Opcode
STORE_LOCALS :: Opcode
PRINT_EXPR :: Opcode
LOAD_BUILD_CLASS :: Opcode
YIELD_FROM :: Opcode
INPLACE_LSHIFT :: Opcode
INPLACE_RSHIFT :: Opcode
INPLACE_AND :: Opcode
INPLACE_XOR :: Opcode
INPLACE_OR :: Opcode
BREAK_LOOP :: Opcode
WITH_CLEANUP :: Opcode
RETURN_VALUE :: Opcode
IMPORT_STAR :: Opcode
YIELD_VALUE :: Opcode
POP_BLOCK :: Opcode
END_FINALLY :: Opcode
POP_EXCEPT :: Opcode

-- | HAVE_ARGUMENT -- 90 Opcodes from here have an argument:
STORE_NAME :: Opcode
DELETE_NAME :: Opcode
UNPACK_SEQUENCE :: Opcode
FOR_ITER :: Opcode
UNPACK_EX :: Opcode
STORE_ATTR :: Opcode
DELETE_ATTR :: Opcode
STORE_GLOBAL :: Opcode
DELETE_GLOBAL :: Opcode
LOAD_CONST :: Opcode
LOAD_NAME :: Opcode
BUILD_TUPLE :: Opcode
BUILD_LIST :: Opcode
BUILD_SET :: Opcode
BUILD_MAP :: Opcode
LOAD_ATTR :: Opcode
COMPARE_OP :: Opcode
IMPORT_NAME :: Opcode
IMPORT_FROM :: Opcode
JUMP_FORWARD :: Opcode
JUMP_IF_FALSE_OR_POP :: Opcode
JUMP_IF_TRUE_OR_POP :: Opcode
JUMP_ABSOLUTE :: Opcode
POP_JUMP_IF_FALSE :: Opcode
POP_JUMP_IF_TRUE :: Opcode
LOAD_GLOBAL :: Opcode
CONTINUE_LOOP :: Opcode
SETUP_LOOP :: Opcode
SETUP_EXCEPT :: Opcode
SETUP_FINALLY :: Opcode
LOAD_FAST :: Opcode
STORE_FAST :: Opcode
DELETE_FAST :: Opcode
RAISE_VARARGS :: Opcode
CALL_FUNCTION :: Opcode
MAKE_FUNCTION :: Opcode
BUILD_SLICE :: Opcode
MAKE_CLOSURE :: Opcode
LOAD_CLOSURE :: Opcode
LOAD_DEREF :: Opcode
STORE_DEREF :: Opcode
DELETE_DEREF :: Opcode
CALL_FUNCTION_VAR :: Opcode
CALL_FUNCTION_KW :: Opcode
CALL_FUNCTION_VAR_KW :: Opcode
SETUP_WITH :: Opcode
EXTENDED_ARG :: Opcode
LIST_APPEND :: Opcode
SET_ADD :: Opcode
MAP_ADD :: Opcode
data Bytecode
Bytecode :: Opcode -> Maybe BytecodeArg -> Bytecode
opcode :: Bytecode -> Opcode
args :: Bytecode -> Maybe BytecodeArg
data BytecodeArg
Arg16 :: Word16 -> BytecodeArg
newtype BytecodeSeq
BytecodeSeq :: [Bytecode] -> BytecodeSeq
bytecodeSize :: Bytecode -> Int
instance Eq Opcode
instance Ord Opcode
instance Show Opcode
instance Show BytecodeArg
instance Show Bytecode
instance Pretty BytecodeSeq
instance Pretty Bytecode
instance Pretty BytecodeArg


-- | Reading, writing and representation of Python bytecode files.
module Blip.Marshal
readPyc :: Handle -> IO PycFile
writePyc :: Handle -> PycFile -> IO ()
data PycFile
PycFile :: Word32 -> Word32 -> Word32 -> PyObject -> PycFile
magic :: PycFile -> Word32
modified_time :: PycFile -> Word32
size :: PycFile -> Word32
object :: PycFile -> PyObject
data PyObject
Code :: !Word32 -> !Word32 -> !Word32 -> !Word32 -> !Word32 -> !PyObject -> !PyObject -> !PyObject -> !PyObject -> !PyObject -> !PyObject -> !PyObject -> !PyObject -> !Word32 -> !PyObject -> PyObject
argcount :: PyObject -> !Word32
kwonlyargcount :: PyObject -> !Word32
nlocals :: PyObject -> !Word32
stacksize :: PyObject -> !Word32
flags :: PyObject -> !Word32
code :: PyObject -> !PyObject
consts :: PyObject -> !PyObject
names :: PyObject -> !PyObject
varnames :: PyObject -> !PyObject
freevars :: PyObject -> !PyObject
cellvars :: PyObject -> !PyObject
filename :: PyObject -> !PyObject
name :: PyObject -> !PyObject
firstlineno :: PyObject -> !Word32
lnotab :: PyObject -> !PyObject
String :: !ByteString -> PyObject
string :: PyObject -> !ByteString
Tuple :: ![PyObject] -> PyObject
elements :: PyObject -> ![PyObject]
Int :: !Word32 -> PyObject
int_value :: PyObject -> !Word32
Float :: !Double -> PyObject
float_value :: PyObject -> !Double
None :: PyObject
Ellipsis :: PyObject
Unicode :: !String -> PyObject
unicode :: PyObject -> !String
TrueObj :: PyObject
FalseObj :: PyObject
Complex :: !Double -> !Double -> PyObject
real :: PyObject -> !Double
imaginary :: PyObject -> !Double
Long :: !Integer -> PyObject
long_value :: PyObject -> !Integer
type CodeObjectFlagMask = Word32
co_optimized :: CodeObjectFlagMask
co_newlocals :: CodeObjectFlagMask
co_varargs :: CodeObjectFlagMask
co_varkeywords :: CodeObjectFlagMask
co_nested :: CodeObjectFlagMask
co_generator :: CodeObjectFlagMask
co_nofree :: CodeObjectFlagMask
instance Eq PyObject
instance Ord PyObject
instance Show PyObject
instance Show PycFile
instance Eq ObjectType
instance Ord ObjectType
instance Show ObjectType
instance Pretty PyObject
instance Pretty PycFile
