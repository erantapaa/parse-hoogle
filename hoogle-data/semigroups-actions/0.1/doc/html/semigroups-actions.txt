-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Semigroups actions
--   
--   In mathematics, an action of a semigroup on a set is an operation that
--   associates each element of the semigroup is with a transformation on
--   the set.
@package semigroups-actions
@version 0.1

module Data.Semigroup.Act

-- | Represents an action of semigroup <tt>g</tt> to set <tt>a</tt>.
--   
--   Laws: <tt><a>Endo</a> . <a>act</a></tt> must be a homomorphism of
--   semigroups.
class Semigroup g => SemigroupAct g a
act :: SemigroupAct g a => g -> (a -> a)

-- | Represents an action of monoid <tt>g</tt> to set <tt>a</tt>.
--   
--   Laws: <tt><a>Endo</a> . <a>act</a></tt> must be a homomorphism of
--   monoids.
class (Monoid g, SemigroupAct g a) => MonoidAct g a

-- | A wrapper for constructing a monoid action from <a>Option</a>.
newtype OptionSet g a
OptionSet :: a -> OptionSet g a
getOptionSet :: OptionSet g a -> a

-- | A wrapper for a group acting on itself.
newtype SelfAct a
SelfAct :: a -> SelfAct a

-- | A wrapper for represeting the action of natural numbers with
--   multiplication on a monoid.
newtype Repeat a
Repeat :: a -> Repeat a
unwrapRepeat :: Repeat a -> a
instance Show a => Show (SelfAct a)
instance Read a => Read (SelfAct a)
instance Eq a => Eq (SelfAct a)
instance Ord a => Ord (SelfAct a)
instance Show a => Show (Repeat a)
instance Read a => Read (Repeat a)
instance Eq a => Eq (Repeat a)
instance Ord a => Ord (Repeat a)
instance (Monoid w, Whole n) => SemigroupAct (Product n) (Repeat w)
instance Functor Repeat
instance (Semigroup g, Monoid g) => MonoidAct (SelfAct g) (SelfAct g)
instance Semigroup g => SemigroupAct (SelfAct g) (SelfAct g)
instance Monoid g => Monoid (SelfAct g)
instance Semigroup g => Semigroup (SelfAct g)
instance Functor SelfAct
instance (SemigroupAct g a, Monoid g) => MonoidAct (Option g) (OptionSet g a)
instance (SemigroupAct g a, Semigroup g) => SemigroupAct (Option g) (OptionSet g a)

module Data.Semigroup.Act.Enum

-- | A wrapper for an integer acting on an <a>Enum</a>. If the resulting
--   index is out of the enum bounds, an exception is raised.
newtype EnumIntAct a
EnumIntAct :: a -> EnumIntAct a

-- | A wrapper for an integer acting on an instance of both <a>Enum</a> and
--   <a>Bounded</a>. The index wrap around the bounds, so <tt>Sum 1
--   <a>act</a> (EnumBoundedIntAct maxBound) == (EnumBoundedIntAct
--   minBound)</tt> etc.
newtype EnumBoundedIntAct a
EnumBoundedIntAct :: a -> EnumBoundedIntAct a
instance Show a => Show (EnumIntAct a)
instance Read a => Read (EnumIntAct a)
instance Eq a => Eq (EnumIntAct a)
instance Ord a => Ord (EnumIntAct a)
instance Show a => Show (EnumBoundedIntAct a)
instance Read a => Read (EnumBoundedIntAct a)
instance Eq a => Eq (EnumBoundedIntAct a)
instance Ord a => Ord (EnumBoundedIntAct a)
instance (Bounded a, Enum a, Integral n) => SemigroupAct (Sum n) (EnumBoundedIntAct a)
instance Functor EnumBoundedIntAct
instance (Integral n, Enum a) => SemigroupAct (Sum n) (EnumIntAct a)
instance Functor EnumIntAct
