-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parsec parsers for Tagsoup tag streams
--   
--   This package provides a Tag token parser, as well as Tag specific
--   parsing combinators.
@package parsec-tagsoup
@version 0.1

module Text.ParserCombinators.Parsec.Tag

-- | The type of Tag parsers, a synonym for GenParser (Tag str)
type TagParser str st = GenParser (Tag str) st

-- | Parse a tag if it satisfies the predicate. As all the tag parsers, it
--   consumes the whitespace immediately after the parsed tag.
satisfy :: (StringLike str, Show str) => (Tag str -> Bool) -> TagParser str st (Tag str)

-- | <tt>lexeme p</tt> first applies parser <tt>p</tt> and then
--   <a>whitespace</a>, returning the value of <tt>p</tt>.
--   
--   <pre>
--   lexeme = (&lt;* whitespace)
--   </pre>
--   
--   Every tag parser is defined using <a>lexeme</a>, this way every parse
--   starts at a point without whitespace.
--   
--   The only point where <a>whitespace</a> should be called explicitly is
--   at the start of the top level parser, in order to skip any leading
--   whitespace.
lexeme :: (Show str, StringLike str) => TagParser str st a -> TagParser str st a

-- | Parses a text block containing only characters which satisfy
--   <a>isSpace</a>.
space :: (Show str, StringLike str) => TagParser str st (Tag str)

-- | Parses any whitespace. Whitespace consists of zero or more ocurrences
--   of <a>space</a>.
whitespace :: (Show str, StringLike str) => TagParser str st ()

-- | Parses any tag.
anyTag :: (Show str, StringLike str) => TagParser str st (Tag str)

-- | Parse any opening or closing tag. As all the tag parsers, these
--   consume the whitespace immediately after the parsed tag.
anyTagOpen, anyTagClose :: (Show str, StringLike str) => TagParser str st (Tag str)

-- | <tt>tag t</tt> parses any tag for which <tt>(~== t)</tt> is true.
tag :: (StringLike str, Show str, TagRep rep) => rep -> TagParser str st (Tag str)

-- | Parse the given opening or closing tag As all the tag parsers, these
--   consume the whitespace immediately after the parsed tag.
tagOpen, tagClose :: (Show str, StringLike str) => str -> TagParser str st (Tag str)

-- | The main workhorse.
--   
--   <tt>tagP t p</tt> parses an opening tag <tt>u</tt> for which <tt>(~==
--   t)</tt> is true. Then it runs the continuation parser <tt>p</tt>. Next
--   it skips all the tags until the closing tag for <tt>u</tt>. Finally it
--   returns the results of <tt>p</tt>.
--   
--   The <tt>p</tt> parser should never consume the closing tag for
--   <tt>u</tt>, or tagP will fail.
tagP :: (StringLike str, Show str, TagRep rep) => rep -> (Tag str -> TagParser str st a) -> TagParser str st a

-- | Behaves like <tt>tagP</tt> sans the predicate. Expects that the next
--   tag will be an opening tag or fails otherwise.
anyTagP :: (Show str, StringLike str) => (Tag str -> TagParser str st a) -> TagParser str st a

-- | Parses a chunk of text. As all the tag parsers, it consumes the
--   whitespace immediately after the parsed tag.
tagText :: (Show str, StringLike str) => TagParser str st str

-- | Versions of these Parsec combinators for tags
oneOf, noneOf :: (Show str, StringLike str) => [Tag str] -> TagParser str st (Tag str)
