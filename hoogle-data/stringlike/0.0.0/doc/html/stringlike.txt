-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Transformations to several string-like types
--   
--   Transformations to several string-like types
@package stringlike
@version 0.0.0

module Data.String.Like

-- | This type class can be used to transform any string like from lazy
--   <a>Text</a>, there is no default implementation for <a>String</a>
--   consciously, beacause we don't want to incite <a>String</a> using.
class StringLike a
fromLazyText :: StringLike a => Text -> a

-- | This type class can be used to transform any type to <a>StringLike</a>
--   type. Minimal complete definition: <a>toText</a>.
class ToString a
toText :: ToString a => a -> Text

-- | Transform any <a>ToString</a> type to any <a>StringLike</a> type, it
--   can be inferred or should be explicitly defined.
string :: (ToString a, StringLike b) => a -> b

-- | Transform any <a>ToString</a> type to strict <a>Text</a>
text :: ToString a => a -> Text

-- | Transform any <a>ToString</a> type to lazy <a>Text</a>
ltext :: ToString a => a -> Text

-- | Transform any <a>ToString</a> type to strict <a>ByteString</a>
bs :: ToString a => a -> ByteString

-- | Transform any <a>ToString</a> type to lazy <a>ByteString</a>
lbs :: ToString a => a -> ByteString

-- | The <a>readFile</a> function reads a file and returns the contents of
--   the file as a string. The file is read lazily, on demand, as with
--   <a>getContents</a>.
readFile :: FilePath -> IO String

-- | The computation <a>writeFile</a> <tt>file str</tt> function writes the
--   string <tt>str</tt>, to the file <tt>file</tt>.
writeFile :: FilePath -> String -> IO ()

-- | The computation <a>appendFile</a> <tt>file str</tt> function appends
--   the string <tt>str</tt>, to the file <tt>file</tt>.
--   
--   Note that <a>writeFile</a> and <a>appendFile</a> write a literal
--   string to a file. To write a value of any printable type, as with
--   <a>print</a>, use the <a>show</a> function to convert the value to a
--   string first.
--   
--   <pre>
--   main = appendFile "squares" (show [(x,x*x) | x &lt;- [0,0.1..2]])
--   </pre>
appendFile :: FilePath -> String -> IO ()
instance ToString ByteString
instance ToString ByteString
instance ToString Text
instance ToString Text
instance ToString String
instance ToString Float
instance ToString Double
instance ToString Integer
instance ToString Word64
instance ToString Word32
instance ToString Word16
instance ToString Word8
instance ToString Word
instance ToString Int64
instance ToString Int32
instance ToString Int16
instance ToString Int8
instance ToString Int
instance StringLike ByteString
instance StringLike ByteString
instance StringLike Text
instance StringLike Text
