-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Construct a Dec's ancestor list.
--   
--   This package provides the ability to pass in a name for a type and it
--   will return all of the Dec's that are necessary for the type and its
--   ancestors to be constructed.
@package universe-th
@version 0.0.0.6

module Language.Haskell.TH.Universe

-- | Collect all the ancestor Dec's for whatever is passed in by name. For
--   instance if we have
--   
--   <pre>
--   data Otherthing = Otherthing Float
--   </pre>
--   
--   <pre>
--   data Thing = Thing OtherThing Int
--   </pre>
--   
--   then
--   
--   <pre>
--   get_universe ''Thing
--   </pre>
--   
--   would return the Dec's for Thing, OtherThing, Int and Float
get_universe :: Name -> Q (Universe)

-- | Find the type in the passed in universe of Decs ([Dec]), and all of
--   the ancestors in the universe.
sub_universe :: [Dec] -> Name -> Universe
get_type_names :: Type -> [Name]
filter_dups' :: Eq a => [a] -> [(a, b)] -> [a]
collect_new_dec_names :: (Monad m, MonadPlus m, MonadState Universe m, MonadError String m) => Dec -> m [Name]
collect_dec_type_names :: Dec -> [Name]
eval_state :: (Monad m, Functor m) => ErrorStateT e [a1] m a -> m (Either e a)
type Universe = [(Name, Dec)]
instance (Monad m, Error e) => Monad (ErrorStateT e s m)
instance (Monad m, Error e) => MonadState s (ErrorStateT e s m)
instance (Monad m, Error e) => MonadError e (ErrorStateT e s m)
instance Functor m => Functor (ErrorStateT e s m)
instance (Monad m, Error e) => MonadPlus (ErrorStateT e s m)
instance (Monad m, Error e) => MonadReader s (ErrorStateT e s m)
instance MonadTrans (ErrorStateT String Universe)
