-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Ordinal arithmetic
--   
--   Ordinal arithmetic implementation up to epsilon_0. Currently based on
--   interated multiset representation, planning to add CNF based
--   implenetation.
@package Ordinals
@version 0.0.0.2


-- | Encoding of ordinals up to epsilon_0 as an iterated multiset:
--   definition in Basic Proof Theory by Troelstra and Schwichenberg. Note,
--   this is not the most efficient way to calculate ordinals. This library
--   is better than having none. I think CNF representation would be more
--   efficent, planning to add in the next version of this library.
--   
--   For further analysis on efficiency of implementations on ordinals see
--   <a>http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.91.8089</a>
--   
--   FYI, an ordinal calculator that covers wider range beyond epsion_0 can
--   be found at <a>http://www.mtnmath.com/ord/</a> which is written C++.
--   However, I found a serious error in this calculator (ver 0.2): the
--   property a^b * a^c == a^(b+c) does not hold. For example,
--   
--   <pre>
--   ordCalc&gt; 3 ^(w^w + w + 1) * 3^(w^w) == 3 ^ (w^w + w + 1 + w^w)
--   FALSE
--   </pre>
--   
--   This calculator didn't seem to run QuickCeck style automatic testing,
--   although it does have hundreds (or maybe more than a thousand) tests
--   cases but some of them even causes segmentation faults depending on
--   the machine I built this ordCalc.
module Math.Ordinals.MultiSet
newtype Ordinal
O :: [Ordinal] -> Ordinal

-- | Exponentiation. Defined a new operator since neither <a>^</a> nor
--   <a>^^</a> will work. Note, <tt>(w o)</tt> is same as <tt>(w 1 :^
--   o)</tt> for any oridnal <tt>o</tt>.
(^:) :: Ordinal -> Ordinal -> Ordinal

-- | convenience function that takes an argument as the power of omega (the
--   first limit ordinal).
w :: Ordinal -> Ordinal

-- | well formedness of ordinals
wf :: Ordinal -> Bool
(.:) :: Ordinal -> Ordinal -> Ordinal
(++.) :: [Ordinal] -> Ordinal -> Ordinal
(.++.) :: Ordinal -> Ordinal -> Ordinal
instance Eq Ordinal
instance Num Ordinal
instance Integral Ordinal
instance Real Ordinal
instance Enum Ordinal
instance Ord Ordinal
instance Show Ordinal
