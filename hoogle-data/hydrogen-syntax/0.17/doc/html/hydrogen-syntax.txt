-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Hydrogen Syntax
--   
@package hydrogen-syntax
@version 0.17

module Hydrogen.Syntax.Types
type POPs a = [(SourcePos, POP a)]
data POP a
Token :: TokenType -> [Char] -> [Char] -> POP a
Block :: BlockType -> [Char] -> POPs a -> POP a
Value :: a -> String -> POP a
data TokenType
AposString :: TokenType
QuotString :: TokenType
TickString :: TokenType
SomethingT :: TokenType
data BlockType
Grouping :: BlockType
Brackets :: BlockType
Mustache :: BlockType
data Token
TSpecial :: Char -> Token
TBraceOpen :: [Char] -> Char -> Token
TBraceClose :: Char -> Token
TSomething :: [Char] -> Token
TIndent :: Int -> Token
TSpaces :: Token
TString :: [Char] -> Char -> [Char] -> Token
instance Typeable TokenType
instance Typeable BlockType
instance Typeable POP
instance Typeable Token
instance Eq TokenType
instance Ord TokenType
instance Enum TokenType
instance Show TokenType
instance Generic TokenType
instance Eq BlockType
instance Ord BlockType
instance Enum BlockType
instance Show BlockType
instance Generic BlockType
instance Eq a => Eq (POP a)
instance Show a => Show (POP a)
instance Generic (POP a)
instance Eq Token
instance Ord Token
instance Show Token
instance Generic Token
instance Datatype D1TokenType
instance Constructor C1_0TokenType
instance Constructor C1_1TokenType
instance Constructor C1_2TokenType
instance Constructor C1_3TokenType
instance Datatype D1BlockType
instance Constructor C1_0BlockType
instance Constructor C1_1BlockType
instance Constructor C1_2BlockType
instance Datatype D1POP
instance Constructor C1_0POP
instance Constructor C1_1POP
instance Constructor C1_2POP
instance Datatype D1Token
instance Constructor C1_0Token
instance Constructor C1_1Token
instance Constructor C1_2Token
instance Constructor C1_3Token
instance Constructor C1_4Token
instance Constructor C1_5Token
instance Constructor C1_6Token
instance Serialize Token
instance Serialize BlockType
instance Serialize TokenType
instance Serialize a => Serialize (POP a)

module Hydrogen.Syntax.Parser.LayoutParser
data LayoutConfig a
LayoutConfig :: (String -> Maybe a) -> (POP a -> POP a) -> String -> LayoutConfig a
cfgValueTokens :: LayoutConfig a -> String -> Maybe a
cfgBlockTransformer :: LayoutConfig a -> POP a -> POP a
cfgIndentToken :: LayoutConfig a -> String
parseLayout :: LayoutConfig a -> Parser (Tokens Token) (POPs a)
instance Default (LayoutConfig a)

module Hydrogen.Syntax.Parser.TokenParser
data TokenizerConfig
TokenizerConfig :: [Char] -> [(Char, Char)] -> String -> [Char] -> [Char] -> [Char] -> [Char] -> [Char] -> [Char] -> TokenizerConfig
cfgSpaces :: TokenizerConfig -> [Char]
cfgEscapes :: TokenizerConfig -> [(Char, Char)]
cfgComments :: TokenizerConfig -> String
cfgOpeningBraces :: TokenizerConfig -> [Char]
cfgClosingBraces :: TokenizerConfig -> [Char]
cfgControlCharacters :: TokenizerConfig -> [Char]
cfgSpecialCharacters :: TokenizerConfig -> [Char]
cfgSpecialSemantics :: TokenizerConfig -> [Char]
cfgFoldSpecials :: TokenizerConfig -> [Char]
parseTokens :: TokenizerConfig -> String -> Parser String (Tokens Token)
instance Eq TokenizerConfig
instance Show TokenizerConfig
instance Default TokenizerConfig

module Hydrogen.Syntax.Parser
parse :: String -> Parser String (POPs a)
parse' :: TokenizerConfig -> LayoutConfig a -> String -> Parser String (POPs a)
