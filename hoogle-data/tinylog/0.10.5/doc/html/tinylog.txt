-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simplistic logging using fast-logger.
--   
@package tinylog
@version 0.10.5


-- | <a>Msg</a> and <a>ToBytes</a> assist in constructing log messages. For
--   example:
--   
--   <pre>
--   &gt; g &lt;- new (setBufSize 1 . setOutput StdOut $ defSettings)
--   &gt; info g $ msg "some text" ~~ "key" .= "value" ~~ "okay" .= True
--   2014-04-28T21:18:20Z, I, some text, key=value, okay=True
--   &gt;
--   </pre>
module System.Logger.Message

-- | Convert some value to a <a>Builder</a>.
class ToBytes a
bytes :: ToBytes a => a -> Builder

-- | Type representing log messages.
data Msg
data Builder

-- | Turn some value into a <a>Msg</a>.
msg :: ToBytes a => a -> Msg -> Msg

-- | Render some field, i.e. a key-value pair delimited by "=".
field :: ToBytes a => ByteString -> a -> Msg -> Msg

-- | Alias of <a>field</a>.
(.=) :: ToBytes a => ByteString -> a -> Msg -> Msg

-- | Concatenate two <a>ToBytes</a> values.
(+++) :: (ToBytes a, ToBytes b) => a -> b -> Builder

-- | Alias of <a>.</a> with lowered precedence to allow combination with
--   <a>.=</a> without requiring parentheses.
(~~) :: (b -> c) -> (a -> b) -> a -> c

-- | Type restriction. Useful to disambiguate string literals when using
--   <tt>OverloadedStrings</tt> pragma.
val :: ByteString -> Builder
eval :: Builder -> ByteString

-- | Intersperse parts of the log message with the given delimiter and
--   render the whole builder into a <a>ByteString</a>.
--   
--   If the second parameter is set to <tt>True</tt>, netstrings encoding
--   is used for the message elements. Cf.
--   <a>http://cr.yp.to/proto/netstrings.txt</a> for details.
render :: ByteString -> Bool -> (Msg -> Msg) -> ByteString
instance ToBytes Bool
instance ToBytes [Char]
instance ToBytes Char
instance ToBytes Text
instance ToBytes Text
instance ToBytes Double
instance ToBytes Float
instance ToBytes Word64
instance ToBytes Word32
instance ToBytes Word16
instance ToBytes Word8
instance ToBytes Word
instance ToBytes Integer
instance ToBytes Int64
instance ToBytes Int32
instance ToBytes Int16
instance ToBytes Int8
instance ToBytes Int
instance ToBytes ByteString
instance ToBytes ByteString
instance ToBytes Builder
instance IsString Builder
instance Monoid Builder


-- | Small layer on top of <tt>fast-logger</tt> which adds log-levels and
--   timestamp support (using <tt>date-cache</tt>) and not much more.
module System.Logger
data Settings

-- | Default settings:
--   
--   <ul>
--   <li><a>logLevel</a> = <a>Debug</a></li>
--   <li><a>output</a> = <a>StdOut</a></li>
--   <li><a>format</a> = <a>iso8601UTC</a></li>
--   <li><a>delimiter</a> = ", "</li>
--   <li><a>netstrings</a> = False</li>
--   <li><a>bufSize</a> = <a>defaultBufSize</a></li>
--   <li><a>name</a> = ""</li>
--   </ul>
defSettings :: Settings
logLevel :: Settings -> Level
setLogLevel :: Level -> Settings -> Settings
output :: Settings -> Output
setOutput :: Output -> Settings -> Settings
format :: Settings -> DateFormat
setFormat :: DateFormat -> Settings -> Settings
delimiter :: Settings -> ByteString
setDelimiter :: ByteString -> Settings -> Settings
netstrings :: Settings -> Bool
setNetStrings :: Bool -> Settings -> Settings
bufSize :: Settings -> Int
setBufSize :: Int -> Settings -> Settings
name :: Settings -> Text
setName :: Text -> Settings -> Settings
data Level
Trace :: Level
Debug :: Level
Info :: Level
Warn :: Level
Error :: Level
Fatal :: Level
data Output
StdOut :: Output
StdErr :: Output
Path :: FilePath -> Output
data DateFormat

-- | ISO 8601 date-time format.
iso8601UTC :: DateFormat
data Logger

-- | Create a new <a>Logger</a> with the given <a>Settings</a>. Please note
--   that the <a>logLevel</a> can be dynamically adjusted by setting the
--   environment variable <tt>LOG_LEVEL</tt> accordingly. Likewise the
--   buffer size can be dynamically set via <tt>LOG_BUFFER</tt> and
--   netstrings encoding can be enabled with <tt>LOG_NETSTR=True</tt>
new :: MonadIO m => Settings -> m Logger

-- | Invokes <a>new</a> with default settings and the given output as log
--   sink.
create :: MonadIO m => Output -> m Logger

-- | Inspect this logger's threshold.
level :: Logger -> Level

-- | Force buffered bytes to output sink.
flush :: MonadIO m => Logger -> m ()

-- | Closes the logger.
close :: MonadIO m => Logger -> m ()

-- | Clone the given logger and optionally give it a name (use <tt>(Just
--   "")</tt> to clear).
clone :: Maybe Text -> Logger -> Logger
settings :: Logger -> Settings

-- | Logs a message with the given level if greater or equal to the
--   logger's threshold.
log :: MonadIO m => Logger -> Level -> (Msg -> Msg) -> m ()

-- | Abbreviation of <a>log</a> using the corresponding log level.
trace :: MonadIO m => Logger -> (Msg -> Msg) -> m ()

-- | Abbreviation of <a>log</a> using the corresponding log level.
debug :: MonadIO m => Logger -> (Msg -> Msg) -> m ()

-- | Abbreviation of <a>log</a> using the corresponding log level.
info :: MonadIO m => Logger -> (Msg -> Msg) -> m ()

-- | Abbreviation of <a>log</a> using the corresponding log level.
warn :: MonadIO m => Logger -> (Msg -> Msg) -> m ()

-- | Abbreviation of <a>log</a> using the corresponding log level.
err :: MonadIO m => Logger -> (Msg -> Msg) -> m ()

-- | Abbreviation of <a>log</a> using the corresponding log level.
fatal :: MonadIO m => Logger -> (Msg -> Msg) -> m ()


-- | The <a>MonadLogger</a> type-class and associated functions.
module System.Logger.Class
data Settings

-- | Default settings:
--   
--   <ul>
--   <li><a>logLevel</a> = <a>Debug</a></li>
--   <li><a>output</a> = <a>StdOut</a></li>
--   <li><a>format</a> = <a>iso8601UTC</a></li>
--   <li><a>delimiter</a> = ", "</li>
--   <li><a>netstrings</a> = False</li>
--   <li><a>bufSize</a> = <a>defaultBufSize</a></li>
--   <li><a>name</a> = ""</li>
--   </ul>
defSettings :: Settings
logLevel :: Settings -> Level
setLogLevel :: Level -> Settings -> Settings
output :: Settings -> Output
setOutput :: Output -> Settings -> Settings
format :: Settings -> DateFormat
setFormat :: DateFormat -> Settings -> Settings
delimiter :: Settings -> ByteString
setDelimiter :: ByteString -> Settings -> Settings
netstrings :: Settings -> Bool
setNetStrings :: Bool -> Settings -> Settings
bufSize :: Settings -> Int
setBufSize :: Int -> Settings -> Settings
name :: Settings -> Text
setName :: Text -> Settings -> Settings
data Level
Trace :: Level
Debug :: Level
Info :: Level
Warn :: Level
Error :: Level
Fatal :: Level
data Output
StdOut :: Output
StdErr :: Output
Path :: FilePath -> Output
data DateFormat

-- | ISO 8601 date-time format.
iso8601UTC :: DateFormat
data Logger

-- | Create a new <a>Logger</a> with the given <a>Settings</a>. Please note
--   that the <a>logLevel</a> can be dynamically adjusted by setting the
--   environment variable <tt>LOG_LEVEL</tt> accordingly. Likewise the
--   buffer size can be dynamically set via <tt>LOG_BUFFER</tt> and
--   netstrings encoding can be enabled with <tt>LOG_NETSTR=True</tt>
new :: MonadIO m => Settings -> m Logger

-- | Invokes <a>new</a> with default settings and the given output as log
--   sink.
create :: MonadIO m => Output -> m Logger

-- | Inspect this logger's threshold.
level :: Logger -> Level

-- | Force buffered bytes to output sink.
flush :: MonadIO m => Logger -> m ()

-- | Closes the logger.
close :: MonadIO m => Logger -> m ()

-- | Clone the given logger and optionally give it a name (use <tt>(Just
--   "")</tt> to clear).
clone :: Maybe Text -> Logger -> Logger
settings :: Logger -> Settings
class Monad m => MonadLogger m
log :: MonadLogger m => Level -> (Msg -> Msg) -> m ()

-- | Abbreviation for <a>log</a> using the corresponding log level.
trace :: MonadLogger m => (Msg -> Msg) -> m ()

-- | Abbreviation for <a>log</a> using the corresponding log level.
debug :: MonadLogger m => (Msg -> Msg) -> m ()

-- | Abbreviation for <a>log</a> using the corresponding log level.
info :: MonadLogger m => (Msg -> Msg) -> m ()

-- | Abbreviation for <a>log</a> using the corresponding log level.
warn :: MonadLogger m => (Msg -> Msg) -> m ()

-- | Abbreviation for <a>log</a> using the corresponding log level.
err :: MonadLogger m => (Msg -> Msg) -> m ()

-- | Abbreviation for <a>log</a> using the corresponding log level.
fatal :: MonadLogger m => (Msg -> Msg) -> m ()
