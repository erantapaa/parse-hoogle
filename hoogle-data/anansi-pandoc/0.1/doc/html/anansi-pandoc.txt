-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Looms which use Pandoc to parse and produce a variety of formats.
--   
--   Looms which use Pandoc to parse and produce a variety of formats.
@package anansi-pandoc
@version 0.1

module Anansi.Pandoc

-- | A loom which uses Pandoc to parse and produce a variety of formats.
--   
--   Documents using this loom should set the options
--   <tt>anansi-pandoc.reader</tt> and <tt>anansi-pandoc.writer</tt>, to
--   control how the markup is parsed, and what output format is produced.
--   Both settings default to <tt>"html"</tt>.
--   
--   <pre>
--   :# mydocument.anansi
--   :option anansi-pandoc.reader=markdown
--   :option anansi-pandoc.writer=latex
--   
--   My Document
--   ===========
--   ...
--   </pre>
--   
--   The <i>readers</i> and <i>writers</i> parameters allow the user to
--   define a custom set of Pandoc formats.
--   
--   To work around a limitation in Pandoc, the name specified for
--   <tt>anansi‑pandoc.reader</tt> must also be present in
--   <tt>anansi‑pandoc.writer</tt>. That is, if
--   <tt>anansi‑pandoc.reader=foo</tt>, then there must be both a reader
--   and writer named <tt>"foo"</tt>.
loomPandoc :: [(String, ParserState -> String -> Pandoc)] -> [(String, WriterOptions -> Pandoc -> String)] -> Loom

-- | Looms which use Pandoc to parse and produce a variety of formats.
--   
--   Use this with <a>defaultMain</a>:
--   
--   <pre>
--   #!/usr/bin/env runhaskell
--   import Anansi
--   import Anansi.Pandoc
--   import Data.Map
--   
--   main = defaultMain (unions [Anansi.looms, Anansi.Pandoc.looms])
--   </pre>
looms :: Map Text Loom
