-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Tiny and Incrementally-Growing HTTP library
--   
--   Example programs
--   
--   examples/get.hs
--   
--   This is simple client. This send GET request and show page source. Run
--   as following.
--   
--   <pre>
--   runhaskell get.hs hackage.haskell.org /packages/
--   </pre>
--   
--   extensions
--   
--   <ul>
--   <li>PackageImports</li>
--   </ul>
--   
--   <pre>
--   import "monads-tf" Control.Monad.Trans
--   import Data.Pipe
--   import System.Environment
--   import Network
--   import Network.TigHTTP.Client
--   import Network.TigHTTP.Types
--   
--   import qualified Data.ByteString as BS
--   
--   main :: IO ()
--   main = do
--   	addr : pth : _ &lt;- getArgs
--   	h &lt;- connectTo addr $ PortNumber 80
--   	r &lt;- request h $ get addr 80 pth
--   	_ &lt;- runPipe $ responseBody r =$= finally printP (putStrLn "")
--   	return ()
--   
--   printP :: MonadIO m =&gt; Pipe BS.ByteString () m ()
--   printP = await &gt;&gt;= maybe (return ()) (\s -&gt; liftIO (BS.putStr s) &gt;&gt; printP)
--   </pre>
--   
--   examples/server.hs
--   
--   This is simple server. This recieve client's request. And send command
--   line arguments as response. Run as following.
--   
--   <pre>
--   runhaskell server.hs Hello World I Am TigHTTP
--   </pre>
--   
--   <pre>
--   import Control.Monad
--   import Control.Concurrent
--   import Data.Pipe
--   import System.IO
--   import System.Environment
--   import Network
--   import Network.TigHTTP.Server
--   import Network.TigHTTP.Types
--   
--   import qualified Data.ByteString.Char8 as BSC
--   import qualified Data.ByteString.Lazy as LBS
--   
--   main :: IO ()
--   main = do
--   	as &lt;- getArgs
--   	soc &lt;- listenOn $ PortNumber 80
--   	forever $ do
--   		(h, _, _) &lt;- accept soc
--   		void . forkIO $ do
--   			req &lt;- getRequest h
--   			print $ requestPath req
--   			putResponse h
--   			. (response :: LBS.ByteString -&gt; Response Pipe Handle)
--   			. LBS.fromChunks $ map BSC.pack as
--   </pre>
--   
--   If you want more examples. Please see examples directory.
@package tighttp
@version 0.0.0.2

module Network.TigHTTP.Server
getRequest :: HandleLike h => h -> HandleMonad h (Request h)
putResponse :: (PipeClass p, MonadTrans (p ByteString ()), Monad (p ByteString () (HandleMonad h)), HandleLike h) => h -> Response p h -> HandleMonad h ()
response :: (PipeClass p, Monad (p () ByteString (HandleMonad h)), HandleLike h) => ByteString -> Response p h
requestBody :: HandleLike h => Request h -> Pipe () ByteString (HandleMonad h) ()
requestPath :: Request h -> Path

module Network.TigHTTP.Types
data Request h
RequestGet :: Path -> Version -> Get -> Request h
RequestPost :: Path -> Version -> (Post h) -> Request h
RequestRaw :: RequestType -> Path -> Version -> [(ByteString, ByteString)] -> Request h
data Get
Get :: Maybe [CacheControl] -> Maybe [Connection] -> Maybe [Accept] -> Maybe [AcceptEncoding] -> Maybe [AcceptLanguage] -> Maybe Host -> Maybe [Product] -> [(ByteString, ByteString)] -> Get
getCacheControl :: Get -> Maybe [CacheControl]
getConnection :: Get -> Maybe [Connection]
getAccept :: Get -> Maybe [Accept]
getAcceptEncoding :: Get -> Maybe [AcceptEncoding]
getAcceptLanguage :: Get -> Maybe [AcceptLanguage]
getHost :: Get -> Maybe Host
getUserAgent :: Get -> Maybe [Product]
getOthers :: Get -> [(ByteString, ByteString)]
data Post h
Post :: Maybe [CacheControl] -> Maybe [Connection] -> Maybe TransferEncoding -> Maybe [Accept] -> Maybe [AcceptEncoding] -> Maybe [AcceptLanguage] -> Maybe Host -> Maybe [Product] -> Maybe ContentLength -> Maybe ContentType -> [(ByteString, ByteString)] -> Pipe () ByteString (HandleMonad h) () -> Post h
postCacheControl :: Post h -> Maybe [CacheControl]
postConnection :: Post h -> Maybe [Connection]
postTransferEncoding :: Post h -> Maybe TransferEncoding
postAccept :: Post h -> Maybe [Accept]
postAcceptEncoding :: Post h -> Maybe [AcceptEncoding]
postAcceptLanguage :: Post h -> Maybe [AcceptLanguage]
postHost :: Post h -> Maybe Host
postUserAgent :: Post h -> Maybe [Product]
postContentLength :: Post h -> Maybe ContentLength
postContentType :: Post h -> Maybe ContentType
postOthers :: Post h -> [(ByteString, ByteString)]
postBody :: Post h -> Pipe () ByteString (HandleMonad h) ()
data Response p h
Response :: Version -> StatusCode -> Maybe ByteString -> Maybe UTCTime -> Maybe TransferEncoding -> Maybe ByteString -> Maybe ByteString -> Maybe [Product] -> Maybe ContentLength -> ContentType -> Maybe UTCTime -> [(ByteString, ByteString)] -> p () ByteString (HandleMonad h) () -> Response p h
responseVersion :: Response p h -> Version
responseStatusCode :: Response p h -> StatusCode
responseConnection :: Response p h -> Maybe ByteString
responseDate :: Response p h -> Maybe UTCTime
responseTransferEncoding :: Response p h -> Maybe TransferEncoding
responseAcceptRanges :: Response p h -> Maybe ByteString
responseETag :: Response p h -> Maybe ByteString
responseServer :: Response p h -> Maybe [Product]
responseContentLength :: Response p h -> Maybe ContentLength
responseContentType :: Response p h -> ContentType
responseLastModified :: Response p h -> Maybe UTCTime
responseOthers :: Response p h -> [(ByteString, ByteString)]
responseBody :: Response p h -> p () ByteString (HandleMonad h) ()
data Version
Version :: Int -> Int -> Version
data Path
Path :: ByteString -> Path
data RequestType
RequestTypeGet :: RequestType
RequestTypePost :: RequestType
RequestTypeRaw :: ByteString -> RequestType
data StatusCode
Continue :: StatusCode
SwitchingProtocols :: StatusCode
OK :: StatusCode
MovedPermanently :: StatusCode
Found :: StatusCode
BadRequest :: StatusCode
data CacheControl
MaxAge :: Int -> CacheControl
CacheControlRaw :: ByteString -> CacheControl
data Connection
Connection :: ByteString -> Connection
data TransferEncoding
Chunked :: TransferEncoding
data Accept
Accept :: (ByteString, ByteString) -> Qvalue -> Accept
data AcceptEncoding
AcceptEncoding :: ByteString -> Qvalue -> AcceptEncoding
data AcceptLanguage
AcceptLanguage :: ByteString -> Qvalue -> AcceptLanguage
data Host
Host :: ByteString -> (Maybe Int) -> Host
data ContentLength
ContentLength :: Int -> ContentLength
data ContentType
ContentType :: Type -> Subtype -> [Parameter] -> ContentType
data Type
Text :: Type
TypeRaw :: ByteString -> Type
data Subtype
Plain :: Subtype
Html :: Subtype
SubtypeRaw :: ByteString -> Subtype
data Parameter
Charset :: Charset -> Parameter
ParameterRaw :: ByteString -> ByteString -> Parameter
data Charset
Utf8 :: Charset
CharsetRaw :: ByteString -> Charset
data Product
Product :: ByteString -> (Maybe ByteString) -> Product
ProductComment :: ByteString -> Product
data Qvalue
Qvalue :: Double -> Qvalue
type HostName = String

module Network.TigHTTP.Client
request :: (PipeClass p, MonadTrans (p () ByteString), Monad (p () ByteString (HandleMonad h)), HandleLike h) => h -> Request h -> HandleMonad h (Response p h)
get :: HostName -> Int -> FilePath -> Request h
post :: HandleLike h => HostName -> Int -> FilePath -> (Maybe Int, ByteString) -> Request h
