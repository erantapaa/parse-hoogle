-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Embed shell commands with interpolated Haskell variables, and capture output
--   
--   This library provides a quasiquoter for executing shell commands,
--   somewhat similar to Perl's backtick operator. Shell commands are IO
--   actions, and they capture the command's standard output as a
--   <tt>String</tt> result.
--   
--   You can use Haskell variables in a shell command. A string
--   representation of the contents will be interpolated. The shell will
--   see each interpolated variable as a single token without interpreting
--   special characters, unless you choose otherwise.
--   
--   Note: The shell escaping is not correct for the Windows shell. This
--   library should fail to build on Windows, as well.
--   
--   Examples of using this library are included in <tt>examples/</tt>.
@package shqq
@version 0.1


-- | Embed shell commands with interpolated Haskell variables, and capture
--   output.
module System.ShQQ

-- | Execute a shell command, capturing output.
--   
--   This requires the <tt>QuasiQuotes</tt> extension.
--   
--   The expression <tt>[sh| ... |]</tt> has type <tt><a>IO</a>
--   <a>String</a></tt>. Executing this IO action will invoke the quoted
--   shell command and produce its standard output as a
--   <tt><a>String</a></tt>.
--   
--   <pre>
--   &gt;&gt;&gt; [sh| sha1sum /proc/uptime |]
--   "ebe14a88cf9be69d2192dcd7bec395e3f00ca7a4  /proc/uptime\n"
--   </pre>
--   
--   You can interpolate Haskell <tt><a>String</a></tt> variables using the
--   syntax <tt>$x</tt>. Special characters are escaped, so that the
--   program invoked by the shell will see each interpolated variable as a
--   single argument.
--   
--   <pre>
--   &gt;&gt;&gt; let x = "foo bar" in [sh| cat $x |]
--   cat: foo bar: No such file or directory
--   *** Exception: ExitFailure 1
--   </pre>
--   
--   You can also write <tt>${x}</tt> to separate the variable name from
--   adjacent characters.
--   
--   <pre>
--   &gt;&gt;&gt; let x = "b" in [sh| echo a${x}c |]
--   "abc\n"
--   </pre>
--   
--   Be careful: the automatic escaping means that <tt>[sh| cat '$x'
--   |]</tt> is <i>less safe</i> than <tt>[sh| cat $x |]</tt>, though it
--   will work "by accident" in common cases.
--   
--   To interpolate <i>without</i> escaping special characters, use the
--   syntax <tt>$+x</tt> .
--   
--   <pre>
--   &gt;&gt;&gt; let x = "foo bar" in [sh| cat $+x |]
--   cat: foo: No such file or directory
--   cat: bar: No such file or directory
--   *** Exception: ExitFailure 1
--   </pre>
--   
--   You can pass a literal <tt>$</tt> to the shell as <tt>\$</tt>, or a
--   literal <tt>\</tt> as <tt>\\</tt>.
--   
--   As demonstrated above, a non-zero exit code from the subprocess will
--   raise an exception in your Haskell program.
--   
--   Variables of type other than <tt><a>String</a></tt> are interpolated
--   via <tt><a>show</a></tt>.
--   
--   <pre>
--   &gt;&gt;&gt; let x = Just (2 + 2) in [sh| touch $x; ls -l J* |]
--   "-rw-r--r-- 1 keegan keegan 0 Oct  7 23:28 Just 4\n"
--   </pre>
--   
--   The interpolated variable's type must be an instance of
--   <tt><a>Show</a></tt> and of <tt><a>Typeable</a></tt>.
sh :: QuasiQuoter

-- | Execute a shell command, capturing output and exit code.
--   
--   The expression <tt>[shc| ... |]</tt> has type <tt><a>IO</a>
--   (<a>ExitCode</a>, <a>String</a>)</tt>. A non-zero exit code does not
--   raise an exception your the Haskell program.
--   
--   Otherwise, <tt><a>shc</a></tt> acts like <tt><a>sh</a></tt>.
shc :: QuasiQuoter

-- | Execute a shell command, capturing output.
--   
--   Used in the implementation of <tt><a>sh</a></tt>.
readShell :: String -> IO String

-- | Execute a shell command, capturing output and exit code.
--   
--   Used in the implementation of <tt><a>shc</a></tt>.
readShellWithCode :: String -> IO (ExitCode, String)

-- | Acts like the identity function on <tt><a>String</a></tt>, and like
--   <tt><a>show</a></tt> on other types.
showNonString :: (Typeable a, Show a) => a -> String
instance Show Tok
