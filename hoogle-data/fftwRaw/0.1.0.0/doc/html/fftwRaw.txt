-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Low level bindings to FFTW.
--   
--   Yet another set of Haskell bindings to <a>FFTW</a>, the Fastest
--   Fourier Transform in the West.
--   
--   These are low level bindings with some type safety for a small subset
--   of FFTW's functionality. Raise an Issue on Github if you need
--   something I haven't implemented.
--   
--   Unlike the <a>fft</a> package, this package provides low level
--   manipulation of FFTW plans (such as <a>fftw_plan_dft_1d</a>).
--   
--   Unlike the <a>vector-fftw</a> package, this package is based on
--   pointers instead of the Vector datatype and it avoids copying the
--   input arrays by assuming that the pointers are aligned as FFTW
--   expects.
@package fftwRaw
@version 0.1.0.0


-- | Bindings to FFTW.
--   
--   Example usage:
--   
--   <pre>
--   import Foreign.Marshal.Array
--   import Data.Complex
--   import Foreign.Storable.Complex
--   import FFTW
--   
--   main = do
--       inA  &lt;- fftwAllocComplex 1024
--       outA &lt;- fftwAllocComplex 1024
--   
--       plan &lt;- planDFT1d 1024 inA outA Forward fftwEstimate
--   
--       pokeArray inA $ map (:+ 0) [0..1023]
--       execute plan
--       res &lt;- peekArray 1024 outA
--   
--       fftwFree inA
--       fftwFree outA
--   
--       print res
--   </pre>
module Numeric.FFTW

-- | Like malloc, but ensures that the pointer obeys the alignment
--   restrictions of FFTW (e.g. for SIMD acceleration). You probably want
--   to use <a>fftwAllocReal</a> or <a>fftwAllocComplex</a> instead.
fftwMalloc :: Word32 -> IO (Ptr a)

-- | Free a pointer returned by <a>fftwMalloc</a>, <a>fftwAllocReal</a>, or
--   <a>fftwAllocComplex</a>
fftwFree :: Ptr a -> IO ()

-- | A function pointer to <tt>fftwFree</tt>.
fftwFreePtr :: FunPtr (Ptr a -> IO ())

-- | Allocates an array of Doubles. It ensures that the pointer obeys the
--   alignment restrictions of FFTW (e.g. for SIMD acceleration).
fftwAllocReal :: Word32 -> IO (Ptr CDouble)

-- | Allocates an array of complex Doubles (i.e. the c type "double
--   complex"). It ensures that the pointer obeys the alignment
--   restrictions of FFTW (e.g. for SIMD acceleration).
fftwAllocComplex :: Word32 -> IO (Ptr (Complex CDouble))

-- | The direction of the transform: Forward for a normal transform,
--   Backward for an inverse transform
data Direction
[Forward] :: Direction
[Backward] :: Direction

-- | FFTW planner flags. These flags affect the planning process. They can
--   be combined using the <a>Monoid</a> instance. See the FFTW flag
--   documentation: <a>http://www.fftw.org/doc/Planner-Flags.html</a>.
data Flag
fftwMeasure :: Flag
fftwExhaustive :: Flag
fftwPatient :: Flag
fftwEstimate :: Flag
fftwWisdomOnly :: Flag
fftwDestroyInput :: Flag
fftwUnaligned :: Flag
fftwPreserveInput :: Flag

-- | A <tt>FFTWPlan i o</tt> contains all of the information necessary to
--   perform a transform from an input array of type <tt>i</tt> to an
--   output array of type <tt>o</tt>, including pointers to the input and
--   output arrays.
data FFTWPlan i o

-- | Create a plan for a 1 dimensional complex to complex DFT. The plan
--   stores pointers to the input and output arrays, and these will be used
--   if you <a>execute</a> the plan in the future. They are required even
--   if you intend to specify different input and output arrays in the
--   future (i.e. using <a>executeDFT</a>)
planDFT1d :: Int -> Ptr (Complex CDouble) -> Ptr (Complex CDouble) -> Direction -> Flag -> IO (FFTWPlan (Complex CDouble) (Complex CDouble))

-- | Create a plan for a 1 dimensional real to complex DFT. The plan stores
--   pointers to the input and output arrays, and these will be used if you
--   <a>execute</a> the plan in the future. They are required even if you
--   intend to specify different input and output arrays in the future
--   (i.e. using <a>executeDFTR2C</a>)
planDFTR2C1d :: Int -> Ptr CDouble -> Ptr (Complex CDouble) -> Flag -> IO (FFTWPlan CDouble (Complex CDouble))

-- | Execute a plan. Performs an FFT. The input and output arrays are
--   stored within the plan so do not need to be given.
execute :: FFTWPlan i o -> IO ()

-- | Execute a complex to complex DFT but on different input and output
--   arrays to those specified when the plan was created.
executeDFT :: FFTWPlan (Complex CDouble) (Complex CDouble) -> Ptr (Complex CDouble) -> Ptr (Complex CDouble) -> IO ()

-- | Execute a real to complex DFT but on different input and output arrays
--   to those specified when the plan was created.
executeDFTR2C :: FFTWPlan CDouble (Complex CDouble) -> Ptr CDouble -> Ptr (Complex CDouble) -> IO ()
instance Monoid Flag
