-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A POSIX, extended regex-engine.
--   
@package regexchar
@version 0.9.0.12


-- | <ul>
--   <li><i><tt>AUTHOR</tt></i> Dr. Alistair Ward</li>
--   <li><i><tt>DESCRIPTION</tt></i></li>
--   </ul>
--   
--   <ul>
--   <li>Implements <a>ShortcutExpander</a> <a>Char</a>, to implement some
--   of the traditional <i>Perl-style shortcuts</i>:</li>
--   </ul>
--   
--   <ul>
--   <li><i><tt>\d</tt></i> =&gt; Any <a>isDigit</a>-character.</li>
--   <li><i><tt>\D</tt></i> =&gt; Any non-<a>isDigit</a> character.</li>
--   <li><i><tt>\s</tt></i> =&gt; Any <a>isSpace</a>-character.</li>
--   <li><i><tt>\S</tt></i> =&gt; Any non-<a>isSpace</a> character.</li>
--   <li><i><tt>\w</tt></i> =&gt; Any <a>isWord</a> letter.</li>
--   <li><i><tt>\W</tt></i> =&gt; Any non-<a>isWord</a> letter.</li>
--   </ul>
--   
--   <ul>
--   <li>Enables one to compose concise regexen, containing any <a>Char</a>
--   that's a member of one of these predefined sets.</li>
--   <li>Though <a>Meta</a> is polymorphic, &amp; the type-parameter can't
--   be assumed to implement either <a>Enum</a> or <a>Ord</a>, <a>Char</a>
--   actually does, so this module is able to implement ranges within a
--   <i>Bracket-expression</i>.</li>
--   <li>Defines specialised instances of <a>Read</a> &amp; <a>Show</a>, to
--   cope with <i>Perl-style shortcuts</i>, <i>Posix Character-classes</i>
--   &amp; <i>Bracket-expression</i> range-specifications.</li>
--   </ul>
--   
--   <ul>
--   <li><i><tt>TODO</tt></i> Use <tt>Environment.getLocale</tt>.
--   Regrettably, this returns in the <a>IO</a>-monad, &amp; even it
--   didn't, how does one pass that information to <a>Read</a> ?!</li>
--   </ul>
module RegExChar.MetaChar

-- | A specialised instance, encapsulated to permit tailored
--   instance-declarations.
newtype MetaChar
MkMetaChar :: (Meta Char) -> MetaChar

-- | Builds a parser of traditional regex-syntax, which understands
--   <a>Char</a>-specific concepts like <i>Perl-style shortcuts</i> &amp;
--   <i>Posix Character-classes</i>.
metaCharParser :: Parser MetaChar

-- | Accessor.
deconstruct :: MetaChar -> Meta Char
instance Eq MetaChar
instance Show MetaChar
instance Read MetaChar
instance Consumer MetaChar
instance SelfValidator MetaChar
instance ShortcutExpander Char
instance ShortcutExpander Char


-- | <ul>
--   <li><i><tt>AUTHOR</tt></i> Dr. Alistair Ward</li>
--   <li><i><tt>DESCRIPTION</tt></i> An <a>ExtendedRegEx</a>, which has
--   been specialised for <a>Char</a>, to create a tradition
--   non-polymorphic <i>regex</i>.</li>
--   </ul>
module RegExChar.ExtendedRegExChar

-- | Specialise a <a>ExtendedRegEx</a> for <a>Char</a>, &amp; encapsulate
--   it to permit tailored instance-declarations.
data ExtendedRegExChar
MkExtendedRegExChar :: Bool -> ExtendedRegEx Char -> ExtendedRegExChar

-- | The string from which a <a>ExtendedRegEx</a> is read, may, if
--   data-capture isn't required, omit explicit delimiters around top-level
--   <a>Alternatives</a>.
hasNonCapturingTopLevelAlternatives :: ExtendedRegExChar -> Bool
extendedRegEx :: ExtendedRegExChar -> ExtendedRegEx Char

-- | Abbreviation.
type InputData = InputData Char

-- | A veneer over the underlying polymorphic operator, <a>+~</a>.
(+~) :: InputData -> RegExOpts ExtendedRegExChar -> Result Char

-- | A veneer over the underlying polymorphic operator, <a>=~</a>.
(=~) :: InputData -> RegExOpts ExtendedRegExChar -> Bool

-- | Pattern-mismatch operator.
(/~) :: InputData -> RegExOpts ExtendedRegExChar -> Bool
instance Eq ExtendedRegExChar
instance Show ExtendedRegExChar
instance Read ExtendedRegExChar
instance ShortcutExpander Char
instance Consumer ExtendedRegExChar
instance SelfValidator ExtendedRegExChar


-- | <ul>
--   <li><i><tt>AUTHOR</tt></i> Dr. Alistair Ward</li>
--   <li><i><tt>DESCRIPTION</tt></i> Creates a <i>back-end</i>
--   implementation, conforming to
--   <a>http://hackage.haskell.org/packages/archive/regex-base/latest/doc/html/Text-Regex-Base-RegexLike.html</a>.</li>
--   <li><i><tt>CAVEATS</tt></i></li>
--   </ul>
--   
--   <ul>
--   <li>The underlying polymorphic (in terms of the base-type of the list
--   of input data) <a>ExtendedRegEx</a>-engine is never going to be a
--   drop-in replacement for other <i>regex</i>-engines, so this standard
--   interface has only been implemented for traditional input data-type
--   [<a>Char</a>].</li>
--   <li>The standard interface requires many Haskell-extensions, but since
--   this implementation is just a thin layer over the underlying portable
--   polymorphic <a>ExtendedRegEx</a>-engine, the latter can still be used
--   directly, where any of these extensions are unavailable.</li>
--   </ul>
module RegExChar.RegExOptsChar

-- | The offset and length of the <a>InputData</a> consumed in one
--   <a>Match</a>.
type MatchSpan = (MatchOffset, MatchLength)

-- | Defines a specific instance of the polymorphic base-type.
type RegExOptsChar = RegExOpts ExtendedRegExChar

-- | Convert the specified list, into a zero-indexed array.
toZeroIndexedArray :: [e] -> Array Int e

-- | <ul>
--   <li>Match-operator.</li>
--   <li>The polymorphic return-type is resolved by the caller's
--   <a>RegexLike.RegexContext</a>.</li>
--   </ul>
(=~) :: RegexContext RegExOptsChar InputData target => InputData -> String -> target
instance RegexLike RegExOptsChar InputData
instance RegexMaker RegExOptsChar CompilationOptions ExecutionOptions String
instance RegexOptions RegExOptsChar CompilationOptions ExecutionOptions
