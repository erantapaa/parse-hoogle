-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Enumerators for network sockets
--   
--   Enumerators for network sockets
@package network-enumerator
@version 0.1.5


module Network.Socket.Enumerator

-- | Enumerate binary data from a <a>Socket</a>, using <a>recv</a>. The
--   socket must be connected.
--   
--   The buffer size should be a small power of 2, such as 4096.
enumSocket :: MonadIO m => Integer -> Socket -> Enumerator ByteString m b

-- | Enumerate binary data from a <a>Socket</a>, using <a>recvFrom</a>. The
--   socket does not have to be connected. Each chunk of data received will
--   be paired with its address.
enumSocketFrom :: MonadIO m => Integer -> Socket -> Enumerator (ByteString, SockAddr) m b

-- | Enumerate binary data from a <tt>Socket</tt>, using <a>recv</a>. The
--   socket must be connected.
--   
--   The buffer size should be a small power of 2, such as 4096.
--   
--   If any call to <a>recv</a> takes longer than the timeout,
--   <a>enumSocketTimed</a> will throw an error. To add a timeout for the
--   entire session, wrap the call to <a>run</a> in <a>timeout</a>.
--   
--   Since: 0.1.2
enumSocketTimed :: MonadIO m => Integer -> Integer -> Socket -> Enumerator ByteString m b

-- | Write data to a <a>Socket</a>, using <a>sendMany</a>. The socket must
--   be connected.
iterSocket :: MonadIO m => Socket -> Iteratee ByteString m ()

-- | Write data to a <a>Socket</a>, using <a>sendManyTo</a>. The socket
--   does not have to be connected.
iterSocketTo :: MonadIO m => Socket -> SockAddr -> Iteratee ByteString m ()

-- | Write data to a <a>Socket</a>, using <a>sendMany</a>. The socket must
--   be connected.
--   
--   If any call to <a>sendMany</a> takes longer than the timeout,
--   <a>iterSocketTimed</a> will throw an error. To add a timeout for the
--   entire session, wrap the call to <a>run</a> in <a>timeout</a>.
--   
--   Since: 0.1.2
iterSocketTimed :: MonadIO m => Integer -> Socket -> Iteratee ByteString m ()
