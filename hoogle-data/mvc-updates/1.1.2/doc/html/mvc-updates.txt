-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Concurrent and combinable updates
--   
@package mvc-updates
@version 1.1.2


-- | Use this library to build <tt>mvc</tt> applications that consume many
--   individually <a>Updatable</a> values, such as:
--   
--   <ul>
--   <li>spread sheets,<ul><li>control panels, and:</li><li>data
--   visualizations.</li><li>build systems</li></ul>This library builds on
--   top of the <tt>mvc</tt> library, so you may want to read the
--   documentation in the <a>MVC</a> module if you haven't already.Here is
--   an example program to illustrate how this library works:</li>
--   </ul>
--   
--   <pre>
--   import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))
--   import Control.Foldl (last, length)
--   import MVC.Updates (Updatable, on, listen, runUpdatable)
--   import MVC.Prelude (stdinLines, tick)
--   import Prelude hiding (last, length)
--   
--   data Example = Example (Maybe String) Int deriving (Show)
--   
--   debug :: Show a =&gt; String -&gt; Updatable a -&gt; Updatable a
--   debug label = listen (\x -&gt; putStrLn (label ++ ": " ++ show x))
--   
--   lastLine :: Updatable (Maybe String)
--   lastLine = debug "lastLine" (on last stdinLines)
--   
--   seconds  :: Updatable Int
--   seconds  = debug "seconds " (on length (tick 1.0))
--   
--   example  :: Updatable Example
--   example  = debug "example " (Example &lt;$&gt; lastLine &lt;*&gt; seconds)
--   
--   main :: IO ()
--   main = runUpdatable example
--   </pre>
--   
--   First we build two simple <a>Updatable</a> values:
--   
--   <ul>
--   <li><tt>lastLine</tt> updates every time the user enters a new line at
--   standard input<ul><li><tt>seconds</tt> increments every
--   second</li></ul>Additionally, the <tt>debug</tt> function attaches a
--   listener to each value that prints updates to the console. Every
--   listener triggers once at the beginning of the program and once for
--   each update to the attached value.Then we assemble these two
--   <a>Updatable</a> values into a derived <a>Updatable</a> value using
--   <a>Applicative</a> operations. This derived value updates every time
--   one of the two original values updates:</li>
--   </ul>
--   
--   <pre>
--   $ ./example
--   lastLine: Nothing
--   seconds : 0
--   example : Example Nothing 0
--   Test&lt;Enter&gt;
--   lastLine: Just "Test"
--   example : Example (Just "Test") 0
--   seconds : 1
--   example : Example (Just "Test") 1
--   seconds : 2
--   example : Example (Just "Test") 2
--   ABC&lt;Enter&gt;
--   lastLine: Just "ABC"
--   example : Example (Just "ABC") 2
--   seconds : 3
--   example : Example (Just "ABC") 3
--   ...
--   </pre>
--   
--   At the beginning of the program we see one debug output for each
--   value's initialization. Afterwards, we see updates every time the user
--   enters a line of input or one second passes.
--   
--   Updates are efficient. When the user enters a new line, the
--   <tt>Example</tt> value reuses the cached value for seconds. Similarly,
--   when one second passes, the <tt>Example</tt> reuses the cached value
--   for the last line.
--   
--   The Example section at the bottom of this module contains an extended
--   example for how to build a GTK-based spreadsheet using this library.
module MVC.Updates

-- | A concurrent, updatable value
data Updatable a
Updatable :: (Managed (Controller e, FoldM IO e a)) -> Updatable a

-- | Create an <a>Updatable</a> value using a pure <a>Fold</a>
on :: Fold e a -> Managed (Controller e) -> Updatable a

-- | Attach a listener that runs every time an <a>Updatable</a> value
--   updates
--   
--   <pre>
--   -- Treating `a -&gt; IO ()` as the `View a` `Monoid`:
--   
--   listen mempty = id
--   
--   listen (f &lt;&gt; g) = listen g . listen f
--   </pre>
listen :: (a -> IO ()) -> Updatable a -> Updatable a

-- | Run an <a>Updatable</a> value, discarding the result
--   
--   Use this if you only care about running the associated listeners
runUpdatable :: Updatable a -> IO ()

-- | Convert an <a>Updatable</a> value to a <a>Managed</a>
--   <a>Controller</a> that emits updates
--   
--   You must specify how to <a>Buffer</a> the updates
updates :: Buffer a -> Updatable a -> Managed (Controller a)
instance Applicative Updatable
instance Functor Updatable
