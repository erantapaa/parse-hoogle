-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Jcase library for Haskell
--   
@package hjcase
@version 0.2.0.0

module Data.Jcase
data Jsuite a
Jsuite :: Maybe Text -> Vector a -> Jsuite a
_jsDescription :: Jsuite a -> Maybe Text
_jsCases :: Jsuite a -> Vector a
data Jcase a b
Jcase :: Maybe Text -> Maybe a -> Vector b -> Jcase a b
_jcDescription :: Jcase a b -> Maybe Text
_jcContext :: Jcase a b -> Maybe a
_jcAssertions :: Jcase a b -> Vector b
data Jassertion a b
Jassertion :: a -> b -> Jassertion a b
_jaInput :: Jassertion a b -> a
_jaOutput :: Jassertion a b -> b
hUnitJsuite :: (FromJSON a, FromJSON b, FromJSON c, Eq a, Eq b, Show a, Show b) => (Maybe c -> a -> b) -> Jsuite (Jcase c (Jassertion a b)) -> Test
hUnitSimple :: (FromJSON a, FromJSON b, Eq a, Eq b, Show a, Show b) => (a -> b) -> Jsuite (Jcase (Maybe Value) (Jassertion a b)) -> Test
stdinJsuite :: (FromJSON a, FromJSON b, FromJSON c, Eq a, Eq b, Show a, Show b) => (Maybe c -> a -> b) -> IO ()
stdinSimple :: (FromJSON a, FromJSON b, Eq a, Eq b, Show a, Show b) => (a -> b) -> IO ()
instance (FromJSON a0, FromJSON b0) => FromJSON (Jassertion a0 b0)
instance (FromJSON a0, FromJSON b0) => FromJSON (Jcase a0 b0)
instance FromJSON a0 => FromJSON (Jsuite a0)
instance Eq a => Eq (Jsuite a)
instance Show a => Show (Jsuite a)
instance (Eq a, Eq b) => Eq (Jcase a b)
instance (Show a, Show b) => Show (Jcase a b)
instance (Eq a, Eq b) => Eq (Jassertion a b)
instance (Show a, Show b) => Show (Jassertion a b)
