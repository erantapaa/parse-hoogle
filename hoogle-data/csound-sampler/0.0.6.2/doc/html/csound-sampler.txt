-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A musical sampler based on Csound
--   
@package csound-sampler
@version 0.0.6.2


-- | The core types/ They are not imported by default.
module Csound.Sam.Core

-- | The main type. A stereo sample.
type Sam = Sample Sig2
runSam :: Bpm -> Sam -> SE Sig2

-- | The generic type for samples.
newtype Sample a
Sam :: ReaderT Bpm SE (S a) -> Sample a
unSam :: Sample a -> ReaderT Bpm SE (S a)
data S a
S :: a -> Dur -> S a
samSig :: S a -> a
samDur :: S a -> Dur
data Dur
Dur :: D -> Dur
InfDur :: Dur

-- | The Beats Per Minute measure (BPM). Almost all values are measured in
--   BPMs.
type Bpm = D

-- | Hides the effects inside sample.
liftSam :: Sample (SE a) -> Sample a

-- | Transforms the sample with BPM.
mapBpm :: (Bpm -> Sig2 -> Sig2) -> Sam -> Sam

-- | Lifts bind on stereo signals to samples.
bindSam :: (Sig2 -> SE Sig2) -> Sam -> Sam

-- | Lifts bind on stereo signals to samples with BPM.
bindBpm :: (Bpm -> Sig2 -> SE Sig2) -> Sam -> Sam
instance Functor S
instance Functor Sample
instance SigSpace a => SigSpace (Sample a)
instance Fractional a => Fractional (Sample a)
instance Num a => Num (Sample a)
instance Applicative S
instance Applicative Sample
instance RenderCsd Sam

module Csound.Sam.Trig

-- | Triggers the sample with any char from the first string and stops the
--   sample with any char from the second string.
samCharTrig :: String -> String -> Sam -> Sam

-- | Char trigger with fixed note limiting by length in second. It's useful
--   optimization. It's good to use for drum notes and short sounds.
samCharTap :: D -> String -> Sam -> Sam

-- | Plays a sample while the key is pressed.
samCharPush :: Char -> Sam -> Sam

-- | Toggles the sample when the key is pressed.
samCharToggle :: Char -> Sam -> Sam

-- | Plays one of the sample from the list when corresponding char is
--   pressed. The last string is for stopping the samples.
samCharGroup :: [(Char, Sam)] -> String -> Sam

-- | Plays samples in sequence when key is pressed. The last string is for
--   stopping the sequence.
samCharCycle :: Char -> String -> [Sam] -> Sam

-- | Triggers a sample with midi key. The key is an integer midi code. The
--   C1 is 60 and the A1 is 69.
samMidiTrig :: MidiChn -> Int -> Sam -> Sam

-- | Midi trigger with fixed note limiting by length in second. It's useful
--   optimization. It's good to use for drum notes and short sounds. The
--   key is an integer midi code. The C1 is 60 and the A1 is 69.
samMidiTap :: MidiChn -> D -> Int -> Sam -> Sam
samMidiPush :: MidiChn -> Int -> Sam -> Sam

-- | Toggles samples with midi key. The key is an integer midi code. The C1
--   is 60 and the A1 is 69.
samMidiToggle :: MidiChn -> Int -> Sam -> Sam

-- | Plays samples in the group. It's like the samCharGroup. The key is an
--   integer midi code. The C1 is 60 and the A1 is 69.
samMidiGroup :: MidiChn -> [(Int, Sam)] -> Sam

-- | Generic samMidiTrig. We can specify the midi triggering function. The
--   midi function takes in a signal and a volume of the pressed key (it
--   ranges from 0 to 1). It produces some output. The default is scaling
--   the signal with the amplitude.
samMidiTrigBy :: MidiTrigFun Sig2 -> MidiChn -> Int -> Sam -> Sam

-- | Generic samMidiTap. We can specify the midi triggering function. The
--   midi function takes in a signal and a volume of the pressed key (it
--   ranges from 0 to 1). It produces some output. The default is scaling
--   the signal with the amplitude.
samMidiTapBy :: MidiTrigFun Sig2 -> MidiChn -> D -> Int -> Sam -> Sam

-- | Generic samMidiPush. We can specify the midi triggering function. The
--   midi function takes in a signal and a volume of the pressed key (it
--   ranges from 0 to 1). It produces some output. The default is scaling
--   the signal with the amplitude.
samMidiPushBy :: MidiTrigFun Sig2 -> MidiChn -> Int -> Sam -> Sam

-- | Generic samMidiToggle. We can specify the midi triggering function.
--   The midi function takes in a signal and a volume of the pressed key
--   (it ranges from 0 to 1). It produces some output. The default is
--   scaling the signal with the amplitude.
samMidiToggleBy :: MidiTrigFun Sig2 -> MidiChn -> Int -> Sam -> Sam

-- | Generic samMidiGroup. We can specify the midi triggering function. The
--   midi function takes in a signal and a volume of the pressed key (it
--   ranges from 0 to 1). It produces some output. The default is scaling
--   the signal with the amplitude.
samMidiGroupBy :: MidiTrigFun Sig2 -> MidiChn -> [(Int, Sam)] -> Sam


-- | Graphical widgets for playing samples
module Csound.Sam.Ui

-- | A widget for playing several samples at the same time (aka
--   <a>sim</a>ultaneously). The prefix <tt>free</tt> means no
--   syncronization. the samples start to play when the button is pressed.
freeSim :: [(String, Sam)] -> Source Sam

-- | It's just like the function <tt>freeSim</tt> but the visual
--   representation is horizontal. That's why there is a prefix <tt>h</tt>.
hfreeSim :: [(String, Sam)] -> Source Sam

-- | It's just like the function <a>freeSim</a> but the user can activate
--   some samples right in the code. If the third element is <tt>True</tt>
--   the sample is played.
freeSimWith :: [(String, Sam, Bool)] -> Source Sam

-- | It's just like the function <a>freeSimWith</a> but the visual
--   representation is horizontal. That's why there is a prefix <tt>h</tt>.
hfreeSimWith :: [(String, Sam, Bool)] -> Source Sam

-- | The widget to toggle between several samples (aka <a>tog</a>gle). The
--   prefix <tt>free</tt> means no syncronization. the samples start to
--   play when the button is pressed.
freeTog :: [(String, Sam)] -> Source Sam

-- | It's just like the function <tt>freeTog</tt> but the visual
--   representation is horizontal.
hfreeTog :: [(String, Sam)] -> Source Sam

-- | A widget for playing several samples at the same time (aka
--   <a>sim</a>ultaneously). The first argument is about syncronization.
--   
--   <pre>
--   sim n nameAndSamples
--   </pre>
--   
--   The samples are started only on every n'th beat. The tempo is
--   specified with rendering the sample (see the function
--   <tt>runSam</tt>).
sim :: Int -> [(String, Sam)] -> Source Sam

-- | It's just like the function <tt>sim</tt> but the visual representation
--   is horizontal. That's why there is a prefix <tt>h</tt>.
hsim :: Int -> [(String, Sam)] -> Source Sam

-- | It's just like the function <a>sim</a> but the user can activate some
--   samples right in the code. If the third element is <tt>True</tt> the
--   sample is played.
simWith :: Int -> [(String, Sam, Bool)] -> Source Sam

-- | It's just like the function <a>hsimWith</a> but the visual
--   representation is horizontal. That's why there is a prefix <tt>h</tt>.
hsimWith :: Int -> [(String, Sam, Bool)] -> Source Sam

-- | A widget to toggle playing of several samples. The switch of the
--   playing is synchronized with each n'th beat where n is the first
--   argument of the function.
tog :: Int -> [(String, Sam)] -> Source Sam

-- | It's just like the function <tt>tog</tt> but the visual representation
--   is horizontal. That's why there is a prefix <tt>h</tt>.
htog :: Int -> [(String, Sam)] -> Source Sam

-- | The widget resembles the Ableton Live session view. We create a matrix
--   of samples. we can toggle the samples in each row and we can start
--   playing the whole row of samples.
--   
--   <pre>
--   live n groupNames samples
--   </pre>
--   
--   The first argument is for synchroization. we can start samples only on
--   every n'th beat. The second argument gives names to the columns. the
--   length of the list is the number of columns. the column represents
--   samples that belong to the same group. The third argument is a list of
--   samples. It represents the matrix of samples in row-wise fashion.
live :: Int -> [String] -> [Sam] -> Source Sam

-- | It's just like the function <tt>live</tt> but we can provide the list
--   of effects for each column. The double value specifies the mix between
--   dry and wet signals.
liveEf :: Int -> [String] -> [Sam] -> (Double, FxFun) -> [(Double, FxFun)] -> Source Sam

-- | It's useful to convert samples to signals an insert them in the widget
--   <tt>mixer</tt>.
mixSam :: String -> Bpm -> Sam -> (String, SE Sig2)

-- | Creates fx-unit from sampler widget.
--   
--   <pre>
--   uisam name isOn bpm samWidget
--   </pre>
uiSam :: String -> Bool -> D -> Source Sam -> Source FxFun

-- | Adds gain slider on top of the widget.
addGain :: SigSpace a => Source a -> Source a


-- | The sampler
module Csound.Sam

-- | The generic type for samples.
data Sample a

-- | The main type. A stereo sample.
type Sam = Sample Sig2

-- | The Beats Per Minute measure (BPM). Almost all values are measured in
--   BPMs.
type Bpm = D
runSam :: Bpm -> Sam -> SE Sig2

-- | Transforms the sample with BPM.
mapBpm :: (Bpm -> Sig2 -> Sig2) -> Sam -> Sam

-- | Lifts bind on stereo signals to samples.
bindSam :: (Sig2 -> SE Sig2) -> Sam -> Sam

-- | Lifts bind on stereo signals to samples with BPM.
bindBpm :: (Bpm -> Sig2 -> SE Sig2) -> Sam -> Sam

-- | Hides the effects inside sample.
liftSam :: Sample (SE a) -> Sample a

-- | Constructs sample from limited mono signal (duration is in seconds)
sig1 :: D -> Sig -> Sam

-- | Constructs sample from limited stereo signal (duration is in seconds)
sig2 :: D -> Sig2 -> Sam

-- | Constructs sample from mono signal
infSig1 :: Sig -> Sam

-- | Constructs sample from stereo signal
infSig2 :: Sig2 -> Sam

-- | Constructs sample from limited mono signal (duration is in BPMs)
fromSig1 :: D -> Sig -> Sam

-- | Constructs sample from limited stereo signal (duration is in BPMs)
fromSig2 :: D -> Sig2 -> Sam
class ToSam a
toSam :: ToSam a => a -> Sam
limSam :: ToSam a => D -> a -> Sam

-- | Constructs sample from wav or aiff files.
wav :: String -> Sam

-- | Constructs sample from wav that is played in reverse.
wavr :: String -> Sam

-- | Constructs sample from the segment of a wav file. The start and end
--   times are measured in seconds.
--   
--   <pre>
--   seg begin end fileName
--   </pre>
seg :: D -> D -> String -> Sam
segr :: D -> D -> String -> Sam

-- | Picks segments from the wav file at random. The first argument is the
--   length of the segment.
rndWav :: D -> String -> Sam

-- | Picks segments from the wav file at random. The first argument is the
--   length of the segment.
rndWavr :: D -> String -> Sam

-- | Constructs random segments of the given length from an interval.
rndSeg :: D -> D -> D -> String -> Sam

-- | Constructs reversed random segments of the given length from an
--   interval.
rndSegr :: D -> D -> D -> String -> Sam

-- | Reads a sample from the file in RAM.
--   
--   <pre>
--   ramWav loopMode speed fileName
--   </pre>
ramWav :: LoopMode -> Sig -> String -> Sam

-- | Constructs sample from mono wav or aiff files.
wav1 :: String -> Sam

-- | Constructs sample from mono wav that is played in reverse.
wavr1 :: String -> Sam

-- | Constructs sample from the segment of a mono wav file. The start and
--   end times are measured in seconds.
--   
--   <pre>
--   seg begin end fileName
--   </pre>
seg1 :: D -> D -> String -> Sam
segr1 :: D -> D -> String -> Sam

-- | Picks segments from the mono wav file at random. The first argument is
--   the length of the segment.
rndWav1 :: D -> String -> Sam

-- | Picks segments from the mono wav file at random. The first argument is
--   the length of the segment.
rndWavr1 :: D -> String -> Sam

-- | Constructs random segments of the given length from an interval.
rndSeg1 :: D -> D -> D -> String -> Sam

-- | Constructs reversed random segments of the given length from an
--   interval.
rndSegr1 :: D -> D -> D -> String -> Sam

-- | Reads a sample from the mono file in RAM.
--   
--   <pre>
--   ramWav1 loopMode speed fileName
--   </pre>
ramWav1 :: LoopMode -> Sig -> String -> Sam

-- | It's the same as loopRam but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
ramLoop :: Fidelity -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as readRam but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
ramRead :: Fidelity -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as loopSeg but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
segLoop :: Fidelity -> (Sig, Sig) -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as readSeg but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
segRead :: Fidelity -> (Sig, Sig) -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as loopRel but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
relLoop :: Fidelity -> (Sig, Sig) -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as readRel but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
relRead :: Fidelity -> (Sig, Sig) -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as loopRam1 but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
ramLoop1 :: Fidelity -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as readRam1 but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
ramRead1 :: Fidelity -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as loopSeg1 but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
segLoop1 :: Fidelity -> (Sig, Sig) -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as readSeg1 but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
segRead1 :: Fidelity -> (Sig, Sig) -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as loopRel1 but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
relLoop1 :: Fidelity -> (Sig, Sig) -> TempoSig -> PitchSig -> String -> Sam

-- | It's the same as readRel1 but wrapped in Sam (see
--   <a>Csound.Air.Wav</a>).
relRead1 :: Fidelity -> (Sig, Sig) -> TempoSig -> PitchSig -> String -> Sam

-- | A linear rise-decay envelope. Times a given in BPMs.
--   
--   <pre>
--   linEnv rise dec sample
--   </pre>
linEnv :: D -> D -> Sam -> Sam

-- | An exponential rise-decay envelope. Times a given in BPMs.
--   
--   <pre>
--   expEnv rise dec sample
--   </pre>
expEnv :: D -> D -> Sam -> Sam

-- | Parabolic envelope that starts and ends at zero and reaches maximum at
--   the center.
hatEnv :: Sam -> Sam

-- | Fade out linear envelope.
decEnv :: Sam -> Sam

-- | Fade in linear envelope.
riseEnv :: Sam -> Sam

-- | Fade out exponential envelope.
edecEnv :: Sam -> Sam

-- | Fade in exponential envelope.
eriseEnv :: Sam -> Sam

-- | Makes the sampler broader. It's reciprocal of str
--   
--   <pre>
--   wide k = str (1 / k)
--   </pre>
wide :: D -> Sam -> Sam

-- | Plays a list of samples one after another.
flow :: [Sam] -> Sam

-- | Picks samples at random. The first argument is the period ofmetronome
--   in BPMs. The tick of metronome produces new random sample from the
--   list.
pick :: Sig -> [Sam] -> Sam

-- | Picks samples at random. We can specify a frequency of the occurernce.
--   The sum of all frequencies should be equal to 1.
pickBy :: Sig -> [(D, Sam)] -> Sam

-- | Panning. 0 is all left and 1 is all right.
atPan :: Sig -> Sam -> Sam

-- | Scales sample by pitch in tones.
atPch :: Sig -> Sam -> Sam

-- | Scales sample by pitch in factor of frequency.
atCps :: Sig -> Sam -> Sam

-- | Applies random panning to every sample playback.
atPanRnd :: Sam -> Sam

-- | Applies random amplitude scaling to every sample playback.
atVolRnd :: (D, D) -> Sam -> Sam

-- | Applies random amplitude scaling with gauss distribution with given
--   radius (centered at 1).
atVolGauss :: D -> Sam -> Sam

-- | Plays the sample at the given period (in BPMs). The samples don't
--   overlap.
rep1 :: D -> Sam -> Sam

-- | Plays the sample at the given pattern of periods (in BPMs). The
--   samples don't overlap.
rep :: [D] -> Sam -> Sam

-- | Plays the sample at the given period (in BPMs). The overlapped samples
--   are mixed together.
pat1 :: D -> Sam -> Sam

-- | Plays the sample at the given pattern of periods (in BPMs). The
--   overlapped samples are mixed together.
pat :: [D] -> Sam -> Sam

-- | Plays the sample at the given pattern of volumes and periods (in
--   BPMs). The overlapped samples are mixed together.
--   
--   <pre>
--   pat' volumes periods
--   </pre>
pat' :: [D] -> [D] -> Sam -> Sam

-- | The tones of the chord.
type Chord = [D]

-- | Plays ascending arpeggio of samples.
arpUp :: Chord -> [D] -> Sam -> Sam

-- | Plays descending arpeggio of samples.
arpDown :: Chord -> [D] -> Sam -> Sam

-- | Plays arpeggio of samles with random notes from the chord.
arpOneOf :: Chord -> [D] -> Sam -> Sam

-- | Plays arpeggio of samles with random notes from the chord. We can
--   assign the frequencies of the notes.
arpFreqOf :: [D] -> Chord -> [D] -> Sam -> Sam

-- | Plays ascending arpeggio of samples.
arpUp1 :: Chord -> Sig -> Sam -> Sam

-- | Plays descending arpeggio of samples.
arpDown1 :: Chord -> Sig -> Sam -> Sam

-- | Plays arpeggio of samles with random notes from the chord.
arpOneOf1 :: Chord -> Sig -> Sam -> Sam

-- | Plays arpeggio of samles with random notes from the chord. We can
--   assign the frequencies of the notes.
arpFreqOf1 :: [D] -> Chord -> Sig -> Sam -> Sam

-- | Constructs the wall of sound from the initial segment of the sample.
--   The segment length is given in BPMs.
--   
--   <pre>
--   wall segLength
--   </pre>
wall :: D -> Sam -> Sam

-- | The pattern is influenced by the Brian Eno's work "Music fo Airports".
--   The argument is list of tripples:
--   
--   <pre>
--   (delayTime, repeatPeriod, pitch)
--   </pre>
--   
--   It takes a Sample and plays it in the loop with given initial delay
--   time. The third cell in the tuple pitch is a value for scaling of the
--   pitch in tones.
forAirports :: [(D, D, D)] -> Sam -> Sam

-- | The pattern is influenced by the Brian Eno's work "Music fo Airports".
--   It's more generic than pattern <tt>forAirport</tt> The argument is
--   list of tripples:
--   
--   <pre>
--   (delayTime, repeatPeriod, Sample)
--   </pre>
--   
--   It takes a list of Samples and plays them in the loop with given
--   initial delay time and repeat period.
genForAirports :: [(D, D, Sam)] -> Sam

-- | The arpeggiator for the sequence of chords.
--   
--   <pre>
--   arpy instrument chordPeriod speedOfTheNote accentNumber chords 
--   </pre>
--   
--   The first argument is an instrument that takes in a frequency of the
--   note in Hz. The second argument is the period of chord change (in
--   beats). The next argument is the speed of the single note (in beats).
--   The integer argument is number of notes in the group. Every n'th note
--   is louder. The last argument is the sequence of chords. The chord is
--   the list of frequencies.
arpy :: (D -> SE Sig2) -> D -> D -> Int -> [[D]] -> Sam
metroS :: Bpm -> Sig -> Evt Unit
toSec :: Bpm -> D -> D
instance ToSam (SE Sig2)
instance ToSam (SE Sig)
instance ToSam Sig2
instance ToSam Sig
instance Rest Sam
instance Loop Sam
instance Limit Sam
instance Stretch Sam
instance Delay Sam
instance Compose Sam
instance Harmony Sam
instance Melody Sam


-- | Shortcuts for common chords.
module Csound.Sam.Chord
chTrans :: D -> Chord -> Chord

-- | Rotates the chord.
chRot :: Int -> Chord -> Chord

-- | A minor chord
chMin :: Chord

-- | A major chord.
chMaj :: Chord

-- | A lead tone triad.
chLead :: Chord

-- | A major seventh chord.
chMaj7 :: Chord

-- | A minor seventh chord.
chMin7 :: Chord

-- | A dominant seventh chord.
ch7 :: Chord

-- | A lead tone seventh chord.
chLead7 :: Chord

-- | Chord in major scale at the given note (if there are seven notes)
atMaj :: Int -> Chord

-- | Chord in minor scale at the given note (if there are seven notes)
atMin :: Int -> Chord

-- | Seventh chord in major scale at the given note (if there are seven
--   notes)
atMaj7 :: Int -> Chord

-- | Seventh chord in minor scale at the given note (if there are seven
--   notes)
atMin7 :: Int -> Chord
