-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell binding to the ANTLR parser generator C runtime library.
--   
--   ANTLR is a LL(*) parser generator that supports semantic predicates,
--   syntax predicates and backtracking. antlrc provides a Haskell
--   interface to the ANTLR C runtime. ANTLR generates the lexer and/or
--   parser C code, which can call Haskell code for things such as:
--   semantic predicates which may look up entries in the symbol table,
--   creating symbol table entries, type checking, creating abstract syntax
--   trees, etc.
--   
--   The C source code for the lexer and/or parser are generated from the
--   ANTLR grammar file, which by convention has a .g filename extension.
--   
--   The generated C files can be compiled as C or C++.
--   
--   The main entry point to the program can be written in C or C++, which
--   calls the generated parser and lexer. The parser can make calls to
--   Haskell to build the AST and symbol table, and to implement
--   dis-ambiguating semantic predicates if necessary (for context
--   sensitive languages).
--   
--   The ANTLR parser generator is written in Java. It is necessary to use
--   the same ANTLR parser generator version as the ANTLR C runtime
--   version. antlrc is tested with ANTLR 3.2 and libantlr3c 3.2.
--   
--   In addition to creating the GrammarLexer.c and GrammarParser.c files,
--   the antlr parser generator creates a Grammar.tokens file which
--   contains a list of lexer token identifier numbers and any associated
--   name that is is specified in the tokens section of the Grammar.g file.
--   The antlrcmkenums is run specifying the input Grammar.tokens file, and
--   generates a GrammarTokens.h C/C++ header file containing an enum with
--   enum members for those tokens that have user specified names. This
--   enum is then processed by c2hs to create a Haskell enum for the token
--   identifiers.
--   
--   Examples are provided on github:
--   
--   <a>https://github.com/markwright/antlrc-examples</a>
--   
--   Documentation for the ANTLR C runtime library is at:
--   
--   
--   <a>http://www.antlr.org/wiki/display/ANTLR3/ANTLR3+Code+Generation+-+C</a>
--   
--   Documentation for the ANTLR parser generator is at:
--   
--   <a>http://www.antlr.org/wiki/display/ANTLR3/ANTLR+v3+documentation</a>
@package antlrc
@version 0.0.2

module Text.Antlrc.Lexer

-- | Lexer token struct.
newtype CommonToken
CommonToken :: (Ptr (CommonToken)) -> CommonToken

-- | Lexer input stream struct.
newtype InputStream
InputStream :: (Ptr (InputStream)) -> InputStream

-- | Lexer struct.
newtype Lexer
Lexer :: (Ptr (Lexer)) -> Lexer

-- | Cast from a pointer to an input stream to an input stream.
toInputStream :: Ptr InputStream -> InputStream

-- | Cast from a pointer to a token to a token.
toCommonToken :: Ptr CommonToken -> CommonToken

-- | Cast from a token to a pointer to a token.
fromCommonToken :: CommonToken -> Ptr b

-- | Lookahead in the input stream at the token at the specified positive
--   offset, where:
--   
--   <pre>
--   LT input 1 
--   </pre>
--   
--   is the current token. Or a negative offset may be specified, where:
--   
--   <pre>
--   LT input (-1) 
--   </pre>
--   
--   is the previous token.
--   
--   <pre>
--   foreign export ccall isUnsignedInt :: Ptr InputStream -&gt; IO Bool
--   isUnsignedInt input =
--     do token1 &lt;- lT input 1 &gt;&gt;= tokenGetType
--        if token1 /= UNSIGNED
--          then return False
--          else 
--          do 
--            token2 &lt;- lT input 2 &gt;&gt;= tokenGetType
--            return ((token2 /= CHAR) &amp;&amp; (token2 /= SHORT) &amp;&amp; (token2 /= LONG))
--   </pre>
lT :: Ptr (InputStream) -> Int -> IO (Ptr (CommonToken))

-- | Pointer to an ANTLR string.
newtype AntlrString
AntlrString :: (Ptr (AntlrString)) -> AntlrString

-- | Cast from an ANTLR string to a pointer to an ANTLR string.
fromAntlrString :: AntlrString -> Ptr b

-- | Obtain the token name ANTLR string for the specified token.
--   
--   <pre>
--   tokenGetAntlrString token
--   </pre>
--   
--   For identifier tokens, the token string is interesting. For other
--   tokens such as operator tokens, the token string is uninteresting, and
--   may not be present, the token identifier enum should be used instead.
tokenGetAntlrString :: Ptr (CommonToken) -> IO (Ptr (AntlrString))

-- | Convert an ANTLR string to a Maybe String.
fromAntlrStringToMaybeString :: AntlrString -> IO (Maybe String)

-- | Obtain the token Maybe String for the specified token. For identifier
--   tokens, the token string is interesting. For other tokens such as
--   operator tokens, the token string is uninteresting, and may not be
--   present, the token identifier enum should be used instead.
tokenGetTextMaybe :: Ptr (CommonToken) -> IO (Maybe String)

-- | Convert from an ANTLR string to a String. Note: the peekCStringLen
--   function does not say what will happen if the C pointer is 0.
fromAntlrStringToString :: AntlrString -> IO String

-- | Obtain the token String for the specified token. Note: the
--   peekCStringLen function does not say what will happen if the C pointer
--   is 0.
--   
--   <pre>
--   foreign export ccall saIntV :: Ptr CommonToken -&gt; IO (StablePtr TermInfo)
--   saIntV token =
--     do
--       -- read the IntV integer value from the token text into n
--       t &lt;- tokenGetText token
--       n &lt;- readIO t
--       -- obtain the source code line and charPosition from the token
--       l &lt;- tokenGetLine token
--       c &lt;- tokenGetCharPositionInLine token
--       -- return the term, which is TmZero, or TmSucc TmZero, or TmSucc (TmSucc (...TmSucc TmZero))
--       newStablePtr (intV (Info l c) n)
--   </pre>
tokenGetText :: Ptr (CommonToken) -> IO String

-- | Obtain the token identifier for the specified token.
--   
--   <pre>
--   foreign export ccall isInt :: Ptr InputStream -&gt; IO Bool
--   isInt input =
--     do 
--       token1 &lt;- lT input 1 &gt;&gt;= tokenGetType
--       return (token1 == INT)
--   </pre>
tokenGetType :: Enum e => Ptr (CommonToken) -> IO e

-- | Obtain the character position in the source code line of where the
--   token was read, for non-imaginary tokens.
--   
--   <pre>
--   foreign export ccall saTrue :: Ptr CommonToken -&gt; IO (StablePtr TermInfo)
--   saTrue token =
--     do
--       -- obtain the source code line and charPosition from the token
--       l &lt;- tokenGetLine token
--       c &lt;- tokenGetCharPositionInLine token
--       -- return the TmTrue term
--       newStablePtr (TmTrue (Info l c))
--   </pre>
tokenGetCharPositionInLine :: Ptr (CommonToken) -> IO Int

-- | Obtain the the source code line of where the token was read, for
--   non-imaginary tokens.
--   
--   <pre>
--   foreign export ccall saFalse :: Ptr CommonToken -&gt; IO (StablePtr TermInfo)
--   saFalse token =
--     do
--       -- obtain the source code line and charPosition from the token
--       l &lt;- tokenGetLine token
--       c &lt;- tokenGetCharPositionInLine token
--       -- return the TmFalse term
--       newStablePtr (TmFalse (Info l c))
--   </pre>
tokenGetLine :: Ptr (CommonToken) -> IO Int
lT'_ :: (InputStream) -> (CInt -> (IO (CommonToken)))
tokenGetAntlrString'_ :: (CommonToken) -> (IO (AntlrString))


-- | ANTLR C runtime library Haskell binding, for the ANTLR LL(*) parser
--   generator.
module Text.Antlrc
