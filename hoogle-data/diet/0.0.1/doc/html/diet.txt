-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Discrete Interval Encoding Tree
--   
--   Discrete Interval Encoding Tree described by Martin Erwig in <i>Diets
--   for Fat Sets, January 1993</i>.
@package diet
@version 0.0.1


-- | Discrete Interval Encoding Tree described by Martin Erwig in <i>Diets
--   for Fat Sets, January 1993</i>.
module Data.Set.Diet

-- | An interval with discrete values between.
data Interval a

-- | An interval with the same minimum and maximum.
point :: a -> Interval a

-- | Construct an interval ensuring that the minimum is less than or equal
--   to maximum.
interval :: Ord a => a -> a -> Interval a

-- | The minimum of the interval.
intervalMin :: Interval a -> a

-- | The maximum of the interval.
intervalMax :: Interval a -> a

-- | Merge two intervals if they are overlapping or adjacent.
mergeI :: (Ord a, Enum a) => Interval a -> Interval a -> Maybe (Interval a)

-- | Returns whether or not the interval has the same minimum and maximum.
isPointed :: Eq a => Interval a -> Bool

-- | Map a function across the minimum and maximum of the interval.
mapI :: Ord b => (a -> b) -> Interval a -> Interval b

-- | A Discrete Interval Encoding Tree.
data Diet a

-- | Test for membership in the interval tree.
member :: Ix a => a -> Diet a -> Bool

-- | Test for non-membership in the interval tree.
notMember :: Ix a => a -> Diet a -> Bool

-- | Insert an element into the interval tree.
insert :: (Ord a, Enum a) => a -> Diet a -> Diet a

-- | Delete an element from the interval tree.
delete :: (Ord a, Enum a) => a -> Diet a -> Diet a

-- | Construct an interval tree with no elements.
empty :: Diet a

-- | Construct an interval tree with a single element.
single :: a -> Diet a

-- | Construct an interval tree with a single interval.
singleI :: Interval a -> Diet a

-- | Return the number of elements in the interval tree.
size :: Ix a => Diet a -> Int

-- | Fold on the interval tree.
diet :: (b -> Interval a -> b -> b) -> b -> Diet a -> b

-- | Return all elements of the interval tree as a list.
toList :: Ix a => Diet a -> [a]

-- | Construct an interval tree with the elements of the list.
fromList :: (Foldable t, Ord a, Enum a) => t a -> Diet a

-- | Map a function across the interval tree.
mapD :: Ord b => (a -> b) -> Diet a -> Diet b
instance Eq a => Eq (Interval a)
instance Ord a => Ord (Interval a)
instance Eq a => Eq (Diet a)
instance Ord a => Ord (Diet a)
instance (Eq a, Show a) => Show (Diet a)
instance (Eq a, Show a) => Show (Interval a)
