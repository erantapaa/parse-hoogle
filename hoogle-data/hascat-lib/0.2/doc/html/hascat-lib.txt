-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Hascat Package
--   
--   Library for programming Hascat applications
@package hascat-lib
@version 0.2

module Hascat.Protocol

-- | The value of an input parameter, and some metadata.
data Input
Input :: ByteString -> Maybe String -> ContentType -> Input
inputValue :: Input -> ByteString
inputFilename :: Input -> Maybe String
inputContentType :: Input -> ContentType
data ServletRequest
ServletRequest :: URI -> RequestMethod -> [Header] -> [(String, Input)] -> ByteString -> ServletRequest
rqURI :: ServletRequest -> URI
rqMethod :: ServletRequest -> RequestMethod
rqHeaders :: ServletRequest -> [Header]

-- | Input parameters. For better laziness in reading inputs, this is not a
--   Map.
rqInputs :: ServletRequest -> [(String, Input)]
rqBody :: ServletRequest -> ByteString

-- | Gets and decodes the input according to the request method and the
--   content-type.
decodeInput :: Request ByteString -> ServletRequest

-- | Takes the right number of bytes from the input.
takeInput :: [Header] -> ByteString -> ByteString

-- | Gets the name-value pairs from application/x-www-form-urlencoded data.
formDecode :: String -> [(String, String)]

-- | Converts a single value from the application/x-www-form-urlencoded
--   encoding.
urlDecode :: String -> String
maybeRead :: Read a => String -> Maybe a

-- | Replaces all instances of a value in a list by another value.
replace :: Eq a => a -> a -> [a] -> [a]
instance Show Input
instance Show ServletRequest

module Hascat.Config
data Config
Config :: Config_Attrs -> General -> AppController -> Config
data Config_Attrs
Config_Attrs :: String -> Config_Attrs
configVersion :: Config_Attrs -> String
data General
General :: Port -> ServerRoot -> PluginLoader -> General
newtype Port
Port :: Int -> Port
newtype ServerRoot
ServerRoot :: String -> ServerRoot
data PluginLoader
PluginLoader :: [IncludePath] -> [PkgConfFile] -> PluginLoader
newtype IncludePath
IncludePath :: String -> IncludePath
newtype PkgConfFile
PkgConfFile :: String -> PkgConfFile
newtype AppController
AppController :: [AppConfig] -> AppController
data AppConfig
AppConfig :: AppConfig_Attrs -> Name -> Description -> Root -> Code -> ContextPath -> InitTimeout -> RespondTimeout -> DoneTimeout -> AppConfig
appAttr :: AppConfig -> AppConfig_Attrs
appName :: AppConfig -> Name
appDesc :: AppConfig -> Description
appRoot :: AppConfig -> Root
appCode :: AppConfig -> Code
appContextPath :: AppConfig -> ContextPath
appInitTimeOut :: AppConfig -> InitTimeout
appResponseTimeOut :: AppConfig -> RespondTimeout
appDoneTimeOut :: AppConfig -> DoneTimeout
data AppConfig_Attrs
AppConfig_Attrs :: Maybe AppConfig_type -> Maybe AppConfig_autoStart -> AppConfig_Attrs
appConfigType :: AppConfig_Attrs -> Maybe AppConfig_type
appConfigAutoStart :: AppConfig_Attrs -> Maybe AppConfig_autoStart
data AppConfig_type
AppConfig_type_normal :: AppConfig_type
AppConfig_type_system :: AppConfig_type
data AppConfig_autoStart
AppConfig_autoStart_yes :: AppConfig_autoStart
AppConfig_autoStart_no :: AppConfig_autoStart
newtype Name
Name :: String -> Name
newtype Description
Description :: String -> Description
newtype Root
Root :: String -> Root
newtype Code
Code :: String -> Code
newtype ContextPath
ContextPath :: String -> ContextPath
newtype InitTimeout
InitTimeout :: Int -> InitTimeout
newtype RespondTimeout
RespondTimeout :: Int -> RespondTimeout
newtype DoneTimeout
DoneTimeout :: Int -> DoneTimeout
fromInt :: Int -> String
toInt :: (Maybe String, [Content]) -> (Maybe Int, [Content])
getPort :: General -> Int
getServerRoot :: General -> FilePath
getPluginLoader :: General -> PluginLoader
getIncludePaths :: PluginLoader -> [FilePath]
getPkgConfFiles :: PluginLoader -> [FilePath]
getAppType :: AppConfig -> AppConfig_type
getAppAutoStart :: AppConfig -> AppConfig_autoStart
getAppName :: AppConfig -> String
getAppDescription :: AppConfig -> String
getAppRoot :: AppConfig -> FilePath
getAppCode :: AppConfig -> FilePath
getAppContextPath :: AppConfig -> ContextPath
getAppInitTimeout :: AppConfig -> Int
getAppRespondTimeout :: AppConfig -> Int
getAppDoneTimeout :: AppConfig -> Int
instance Eq Config_Attrs
instance Show Config_Attrs
instance Eq Port
instance Show Port
instance Eq ServerRoot
instance Show ServerRoot
instance Eq IncludePath
instance Show IncludePath
instance Eq PkgConfFile
instance Show PkgConfFile
instance Eq PluginLoader
instance Show PluginLoader
instance Eq General
instance Show General
instance Eq AppConfig_type
instance Show AppConfig_type
instance Eq AppConfig_autoStart
instance Show AppConfig_autoStart
instance Eq AppConfig_Attrs
instance Show AppConfig_Attrs
instance Eq Name
instance Show Name
instance Eq Description
instance Show Description
instance Eq Root
instance Show Root
instance Eq Code
instance Show Code
instance Eq ContextPath
instance Eq InitTimeout
instance Show InitTimeout
instance Eq RespondTimeout
instance Show RespondTimeout
instance Eq DoneTimeout
instance Show DoneTimeout
instance Eq AppConfig
instance Show AppConfig
instance Eq AppController
instance Show AppController
instance Eq Config
instance Show Config
instance XmlContent DoneTimeout
instance XmlContent RespondTimeout
instance XmlContent InitTimeout
instance XmlContent ContextPath
instance XmlContent Code
instance XmlContent Root
instance XmlContent Description
instance XmlContent Name
instance XmlAttrType AppConfig_autoStart
instance XmlAttrType AppConfig_type
instance XmlAttributes AppConfig_Attrs
instance XmlContent AppConfig
instance XmlContent AppController
instance XmlContent PkgConfFile
instance XmlContent IncludePath
instance XmlContent PluginLoader
instance XmlContent ServerRoot
instance XmlContent Port
instance XmlContent General
instance XmlAttributes Config_Attrs
instance XmlContent Config
instance Show ContextPath

module Hascat.App
type InitHandler a = AppConfig -> IO a
type RespondHandler a = AppConfig -> a -> ServletRequest -> IO (Response ByteString)
type DoneHandler a = AppConfig -> a -> IO ()
data Handlers a
Handlers :: InitHandler a -> RespondHandler a -> DoneHandler a -> Handlers a
initHandler :: Handlers a -> InitHandler a
respondHandler :: Handlers a -> RespondHandler a
doneHandler :: Handlers a -> DoneHandler a
data SystemHandler a
SystemHandler :: (RespondHandler a) -> SystemHandler a
data App
App :: AppConfig -> Module -> Handlers a -> Maybe a -> Bool -> App
appConfig :: App -> AppConfig
appModule :: App -> Module
appHandlers :: App -> Handlers a
appState :: App -> Maybe a
appPaused :: App -> Bool
defaultInit :: InitHandler ()
defaultDone :: DoneHandler a
defaultHandlers :: Handlers ()

module Hascat.Toolkit

-- | For easy pattern matching, HTTP response codes <tt>xyz</tt> are
--   represented as <tt>(x,y,z)</tt>.
type ResponseCode = (Int, Int, Int)
class Show a => Content a
toResponse :: Content a => ResponseCode -> [Header] -> a -> Response ByteString
(//) :: String -> String -> String
getRelativePath :: String -> String -> Maybe String
getReason :: ResponseCode -> String
getCodeString :: ResponseCode -> String
getResponse200 :: Content a => a -> Response ByteString
getResponse303 :: String -> Response ByteString
getResponse400 :: Response ByteString
getResponse401 :: String -> Response ByteString
getResponse404 :: String -> Response ByteString
getResponse405 :: RequestMethod -> Response ByteString
getResponse500 :: String -> Response ByteString
getResponse503 :: String -> Response ByteString
getDirectoryIndex :: FilePath -> Bool -> IO [String]
getFileOrDirectoryIndex :: FilePath -> Bool -> IO (Either (FilePath, ByteString) [String])
getFileResponse :: String -> FilePath -> Maybe String -> IO (Response ByteString)
getFileOrDirectoryIndexResponse :: String -> FilePath -> Maybe String -> Bool -> IO (Response ByteString)
getErrorResponse :: ResponseCode -> [Header] -> Html -> Response ByteString
guessContentType :: FilePath -> String
data ServletRequest
ServletRequest :: URI -> RequestMethod -> [Header] -> [(String, Input)] -> ByteString -> ServletRequest
rqURI :: ServletRequest -> URI
rqMethod :: ServletRequest -> RequestMethod
rqHeaders :: ServletRequest -> [Header]

-- | Input parameters. For better laziness in reading inputs, this is not a
--   Map.
rqInputs :: ServletRequest -> [(String, Input)]
rqBody :: ServletRequest -> ByteString

-- | The value of an input parameter, and some metadata.
data Input
Input :: ByteString -> Maybe String -> ContentType -> Input
inputValue :: Input -> ByteString
inputFilename :: Input -> Maybe String
inputContentType :: Input -> ContentType
instance Content Html
instance Content String
instance Content ByteString
