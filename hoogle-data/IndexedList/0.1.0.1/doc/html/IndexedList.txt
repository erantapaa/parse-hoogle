-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Length- and element-indexed lists sitting somewhere between homogeneous and fully heterogeneous.
--   
@package IndexedList
@version 0.1.0.1


-- | This module implements conic lists, which are lists where every
--   element is of type <tt>(f a)</tt> for <i>some</i> <tt>a</tt>, but the
--   <tt>a</tt> index may vary. This sits between homogeneous and fully
--   heterogeneous lists in terms of expressivity and also the ease to
--   manipulate.
module Data.List.Indexed.Conic
data (:-:) x y
data Nil

-- | Conic lists are lists where each element is an (f a) for some a, but
--   the a may be different for each element. Types of elements are kept
--   track of in the type of the list.
data ConicList f ts
(:-:) :: f a -> ConicList f rest -> ConicList f (a :-: rest)
ConicNil :: ConicList f Nil
tack :: f t -> ConicList f ts -> ConicList f (Tack t ts)


-- | This module implements homogeneous counted lists, which are
--   type-indexed by length.
module Data.List.Indexed.Counted

-- | Counted lists are indexed by length in the type.
data CountedList n a
(:::) :: a -> CountedList n a -> CountedList (Succ n) a
CountedNil :: CountedList Zero a

-- | The <a>count</a> of a list is the natural number corresponding to its
--   length.
count :: CountedList n a -> Natural n

-- | Convert a counted list to a regular Haskell list.
unCount :: CountedList n a -> [a]

-- | Replicate some element a certain number of times.
replicate :: Natural n -> x -> CountedList n x

-- | Appending two counted lists yields one of length equal to the sum of
--   the lengths of the two initial lists.
append :: CountedList n a -> CountedList m a -> CountedList (m + n) a

-- | Take the nth element of a list. We statically prevent taking the nth
--   element of a list of length less than n.
nth :: n < m => Natural n -> CountedList m a -> a

-- | Pad the length of a list to a given length. If the number specified is
--   less than the length of the list given, it won't pass the
--   type-checker.
padTo :: m <= n => Natural n -> x -> CountedList m x -> CountedList ((n - m) + m) x

-- | Zip two equal-length lists together.
zip :: CountedList n a -> CountedList n b -> CountedList n (a, b)
instance ReifyNatural n => Applicative (CountedList n)
instance Functor (CountedList n)
instance Show x => Show (CountedList n x)


-- | This module re-exports the <a>ConicList</a> and <a>CountedList</a>
--   types and functions to work with them.
module Data.List.Indexed

-- | Turn a <a>CountedList</a> into a <a>ConicList</a> by means of a
--   function from some <tt>a</tt> to an <tt>(f t)</tt>.
heterogenize :: (a -> f t) -> CountedList n a -> ConicList f (Replicate n t)

-- | Given a function to collapse any <tt>(f t)</tt> into an <tt>a</tt>,
--   turn a <a>ConicList</a> into a <a>CountedList</a>.
homogenize :: (forall t. f t -> a) -> ConicList f ts -> CountedList (Length ts) a
