-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library and tools to manipulate the Ogg container format
--   
--   The HOgg package provides a commandline tool for manipulating Ogg
--   files. It supports chained and multiplexed Ogg bitstreams and Ogg
--   Skeleton. HOgg also includes a library that may be used by other
--   packages for handling the Ogg container format.
@package hogg
@version 0.4.1.2

module Codec.Container.Ogg.TimeScheme
data TimeScheme
TimeScheme :: String -> Rational -> TimeScheme
timeSchemeName :: TimeScheme -> String
timeSchemeRate :: TimeScheme -> Rational

-- | Guess the TimeScheme by rate
guessTimeScheme :: Rational -> Maybe TimeScheme
npt :: TimeScheme
smpte24 :: TimeScheme
smpte24drop :: TimeScheme
smpte25 :: TimeScheme
smpte25drop :: TimeScheme
smpte30 :: TimeScheme
smpte30drop :: TimeScheme
smpte50 :: TimeScheme
smpte60 :: TimeScheme
smpte60drop :: TimeScheme
instance Show TimeScheme
instance Read TimeScheme

module Codec.Container.Ogg.Granulerate
newtype Granulerate
Granulerate :: Rational -> Granulerate
intRate :: Integer -> Granulerate
fracRate :: Integer -> Integer -> Granulerate
instance Eq Granulerate
instance Show Granulerate

module Codec.Container.Ogg.RawPage
data OggRawPage
OggRawPage :: !Word8 -> !Word8 -> !Word64 -> !Word32 -> !Word32 -> !Word32 -> !Int -> ![Int] -> !ByteString -> OggRawPage
rawPageVersion :: OggRawPage -> !Word8
rawPageHType :: OggRawPage -> !Word8
rawPageGranulepos :: OggRawPage -> !Word64
rawPageSerialno :: OggRawPage -> !Word32
rawPageSeqno :: OggRawPage -> !Word32
rawPageCRC :: OggRawPage -> !Word32
rawPageNumseg :: OggRawPage -> !Int
rawPageSegtab :: OggRawPage -> ![Int]
rawPageBody :: OggRawPage -> !ByteString
pageMarker :: ByteString

-- | Ogg version supported by this library
pageVersion :: Word8
rawPageScan :: ByteString -> [OggRawPage]
rawPageBuild :: ByteString -> (OggRawPage, Int64)
instance Show OggRawPage

module Codec.Container.Ogg.Timestamp
data Timestamp
Timestamp :: (Integer, Integer) -> Timestamp
stamp :: Timestamp -> (Integer, Integer)
class Timestampable a
timestampOf :: Timestampable a => a -> Maybe Timestamp
zeroTimestamp :: Timestamp
between :: Timestampable a => Maybe Timestamp -> Maybe Timestamp -> [a] -> [a]
before :: Timestampable a => Maybe Timestamp -> a -> Bool
instance Read Timestamp
instance Show Timestamp
instance Eq Timestamp
instance Ord Timestamp

module Codec.Container.Ogg.Serial
type Serial = Word32

-- | Typeclass: Serialled
class Serialled a
serialOf :: Serialled a => a -> Serial

-- | Demux
demux :: Serialled a => [a] -> [[a]]

-- | Generate a serial number
genSerial :: IO Serial

module Codec.Container.Ogg.Granulepos
newtype Granulepos
Granulepos :: (Maybe Word64) -> Granulepos
gpPack :: Word64 -> Granulepos
gpUnpack :: Granulepos -> Word64
instance Eq Granulepos
instance Show Granulepos

module Codec.Container.Ogg.ContentType

-- | Data: ContentType
data ContentType
ContentType :: String -> [String] -> (ByteString -> Bool) -> (ByteString -> Int) -> Int -> Maybe (ByteString -> Granulerate) -> Maybe (ByteString -> Int) -> (ByteString -> MessageHeaders) -> ContentType
label :: ContentType -> String
mime :: ContentType -> [String]
identifyP :: ContentType -> ByteString -> Bool
headers :: ContentType -> ByteString -> Int
preroll :: ContentType -> Int
granulerateF :: ContentType -> Maybe (ByteString -> Granulerate)
granuleshiftF :: ContentType -> Maybe (ByteString -> Int)
metadata :: ContentType -> ByteString -> MessageHeaders
knownContentTypes :: [String]
identify :: ByteString -> Maybe ContentType
granulerate :: ContentType -> ByteString -> Maybe Granulerate
granuleshift :: ContentType -> ByteString -> Maybe Int
parseType :: String -> Maybe ContentType

-- | Typeclass: ContentTyped
class ContentTyped a
contentTypeIs :: ContentTyped a => ContentType -> a -> Bool
contentTypeOf :: ContentTyped a => a -> Maybe ContentType
contentTypeEq :: (ContentTyped a, ContentTyped b) => a -> b -> Bool

-- | Group a list of ContentTyped items by their Content-Type
demuxByContentType :: ContentTyped a => [a] -> [[a]]
skeleton :: ContentType
cmml :: ContentType
flac :: ContentType
speex :: ContentType
celt :: ContentType
theora :: ContentType
vorbis :: ContentType
instance Show ContentType
instance Read ContentType
instance Eq ContentType

module Codec.Container.Ogg.Track
data OggTrack
OggTrack :: Serial -> Maybe ContentType -> Int -> Maybe Granulerate -> Maybe Int -> MessageHeaders -> OggTrack
trackSerialno :: OggTrack -> Serial
trackType :: OggTrack -> Maybe ContentType
trackHeaders :: OggTrack -> Int
trackGranulerate :: OggTrack -> Maybe Granulerate
trackGranuleshift :: OggTrack -> Maybe Int
trackMetadata :: OggTrack -> MessageHeaders

-- | A new track, with a given serialno
newTrack :: Serial -> OggTrack

-- | The null track
nullTrack :: OggTrack
bosToTrack :: Serial -> ByteString -> OggTrack

-- | Convert a granulepos to a timestamp
gpToTimestamp :: Granulepos -> OggTrack -> Maybe Timestamp

-- | Convert a granluepos to a count of granules
gpToGranules :: Granulepos -> OggTrack -> Maybe Integer

-- | Split a granulepos by its track's granuleshift
gpSplit :: Granulepos -> OggTrack -> Maybe (Integer, Integer)
gpExplain :: Granulepos -> OggTrack -> String

-- | Typeclass: ContentTypeImplied
class ContentTyped a => ContentTypeImplied a
contentTypeImplies :: ContentTypeImplied a => [OggTrack] -> ContentType -> a -> Bool
instance Show OggTrack
instance Ord OggTrack
instance Eq OggTrack
instance Serialled OggTrack
instance ContentTypeImplied OggTrack
instance ContentTyped OggTrack

module Codec.Container.Ogg.Page
data OggPage
OggPage :: !Int64 -> !OggTrack -> !Bool -> !Bool -> !Bool -> !Bool -> !Granulepos -> !Word32 -> ![ByteString] -> OggPage
pageOffset :: OggPage -> !Int64
pageTrack :: OggPage -> !OggTrack
pageContinued :: OggPage -> !Bool
pageIncomplete :: OggPage -> !Bool
pageBOS :: OggPage -> !Bool
pageEOS :: OggPage -> !Bool
pageGranulepos :: OggPage -> !Granulepos
pageSeqno :: OggPage -> !Word32
pageSegments :: OggPage -> ![ByteString]

-- | Read a list of data bytes into Ogg pages
pageScan :: ByteString -> ([OggTrack], [OggPage], ByteString)

-- | Construct a binary representation of an Ogg page
pageWrite :: OggPage -> ByteString

-- | Determine the length in bytes of a page that would be written
pageLength :: OggPage -> Int

-- | Determine the number of packets completed by this page
pageCompletedPackets :: OggPage -> Int

-- | Determine the keygranule of a page
pageKeyGranule :: OggPage -> Maybe Integer
instance Show OggPage
instance Ord OggPage
instance Eq OggPage
instance Timestampable OggPage
instance Serialled OggPage
instance ContentTyped OggPage

module Codec.Container.Ogg.Packet
data OggPacket
OggPacket :: !ByteString -> !OggTrack -> !Granulepos -> !Bool -> !Bool -> !Maybe [OggSegment] -> OggPacket
packetData :: OggPacket -> !ByteString
packetTrack :: OggPacket -> !OggTrack
packetGranulepos :: OggPacket -> !Granulepos
packetBOS :: OggPacket -> !Bool
packetEOS :: OggPacket -> !Bool
packetSegments :: OggPacket -> !Maybe [OggSegment]
data OggSegment
OggSegment :: !Int -> !Int -> !Bool -> OggSegment
segmentLength :: OggSegment -> !Int

-- | page index (NOT seqno) of this segment
segmentPageIx :: OggSegment -> !Int

-- | whether or not the segment ends a page
segmentEndsPage :: OggSegment -> !Bool

-- | Create a page which contains only a single complete packet
uncutPage :: ByteString -> OggTrack -> Granulepos -> OggPage

-- | Create a packet which spans a single page, ie. consists of only one
--   segment
uncutPacket :: ByteString -> OggTrack -> Granulepos -> OggPacket

-- | Pack packets into pages
packetsToPages :: [OggPacket] -> [OggPage]

-- | Pull the packets out of pages
pagesToPackets :: [OggPage] -> [OggPacket]

-- | Create a dump of a packet, as used by <a>hogg dump</a>
packetToBS :: OggPacket -> ByteString
instance Show OggPacket
instance Ord CarryPage
instance Eq CarryPage
instance Timestampable OggPacket
instance Serialled OggPacket
instance ContentTyped OggPacket

module Codec.Container.Ogg.Skeleton
data OggFishead
OggFishead :: Timestamp -> Timestamp -> OggFishead
fisheadPrestime :: OggFishead -> Timestamp
fisheadBasetime :: OggFishead -> Timestamp
data OggFisbone
OggFisbone :: Serial -> Int -> Granulerate -> Word64 -> Word32 -> Int -> MessageHeaders -> OggFisbone
fisboneSerialno :: OggFisbone -> Serial
fisboneNHeaders :: OggFisbone -> Int
fisboneGranulerate :: OggFisbone -> Granulerate
fisboneStartgranule :: OggFisbone -> Word64
fisbonePreroll :: OggFisbone -> Word32
fisboneGranuleshift :: OggFisbone -> Int
fisboneMsgHeaders :: OggFisbone -> MessageHeaders
emptyFishead :: OggFishead
pageToFishead :: OggPage -> Maybe OggFishead
packetToFishead :: OggPacket -> Maybe OggFishead
pageToFisbone :: OggPage -> Maybe OggFisbone
packetToFisbone :: OggPacket -> Maybe OggFisbone
fisheadToPage :: OggTrack -> OggFishead -> OggPage
fisheadToPacket :: OggTrack -> OggFishead -> OggPacket
fisboneToPage :: OggTrack -> OggFisbone -> OggPage
fisboneToPacket :: OggTrack -> OggFisbone -> OggPacket

-- | Create an OggFisbone from a given OggTrack
trackToFisbone :: OggTrack -> Maybe OggFisbone

-- | Create a list of OggFisbones from a list of OggTracks, not including |
--   any OggTracks with unknown ContentType or Granulerate
tracksToFisbones :: [OggTrack] -> [OggFisbone]
instance ContentTypeImplied OggPacket
instance ContentTypeImplied OggPage

module Codec.Container.Ogg.Headers
processHeaders :: ([OggPage] -> [OggPage]) -> [OggPage] -> [OggPage]

module Codec.Container.Ogg.Sort
merge :: [[OggPage]] -> [OggPage]
sort :: [OggPage] -> [OggPage]

module Codec.Container.Ogg.Chain

-- | A section of a chained Ogg physical bitstream. This corresponds to an
--   entire song or video, and most Ogg files in the wild contain only a
--   single chain.
data OggChain
OggChain :: [OggTrack] -> [OggPage] -> [OggPacket] -> OggChain
chainTracks :: OggChain -> [OggTrack]
chainPages :: OggChain -> [OggPage]
chainPackets :: OggChain -> [OggPacket]

-- | Parse a ByteString into a list of OggChains
chainScan :: ByteString -> [OggChain]

-- | Add a Skeleton logical bitstream to an OggChain
chainAddSkeleton :: OggChain -> IO OggChain

module Codec.Container.Ogg.Chop

-- | Chop a bitstream, do NOT add a Skeleton bitstream | chop start end
--   chain
chop :: Maybe Timestamp -> Maybe Timestamp -> OggChain -> IO OggChain

-- | Chop a bitstream, adding a Skeleton bitstream | chopWithSkel start end
--   chain
chopWithSkel :: Maybe Timestamp -> Maybe Timestamp -> OggChain -> IO OggChain
