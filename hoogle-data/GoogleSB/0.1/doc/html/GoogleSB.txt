-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interface to Google Safe Browsing API
--   
--   This package implements support for Google Safe Browsing API, that
--   provides almost real-time information about malware &amp; other
--   malicious sites on the Web
@package GoogleSB
@version 0.1


-- | This module provides support for Google Safe Browsing API
--   (<a>http://code.google.com/apis/safebrowsing/</a>). To use this module
--   you need to obtain access key from project's page.
--   
--   Typical use of this module will look like:
--   
--   <pre>
--   Right mhsh &lt;- updateHash your_key makeEmptyMalwareHash
--   checkURL mhsh "http://kaishi2009.com/"
--   checkURL mhsh ...
--   </pre>
--   
--   It's better to save hashes between runs to avoid of full updates every
--   time. So at the end of program it's better to store hash on disk with
--   following code:
--   
--   <pre>
--   saveHash "malware.dat" mhsh
--   </pre>
--   
--   And during startup, load it from file, if it exists on disk:
--   
--   <pre>
--   Right mhsh &lt;- load Hash "malware.dat"
--   </pre>
module GoogleSB

-- | Data structure to store data about Hash. It contains information about
--   version, name of hash, and actual Hash data
data Hash

-- | Performs update of Hash from server. For first update, you need to
--   provide hash created by <a>makeEmptyBlackHash</a> or
--   <a>makeEmptyMalwareHash</a>. And for later updates, you will use
--   existing hashes to get only updates to hashes, not the full database.
updateHash :: String -> Hash -> IO (Either String Hash)

-- | Loads Hash from given file
loadHash :: FilePath -> IO (Either String Hash)

-- | Saves Hash into given file
saveHash :: FilePath -> Hash -> IO ()

-- | Performs checking of presence of given URL (second argument of
--   function) in the Hash (first argument).
checkURL :: Hash -> String -> Bool

-- | Creates empty <tt>black</tt> Hash object
makeEmptyBlackHash :: Hash

-- | Creates empty <tt>malware</tt> Hash object
makeEmptyMalwareHash :: Hash
instance Show Hash
instance Eq Hash
instance Binary Hash
