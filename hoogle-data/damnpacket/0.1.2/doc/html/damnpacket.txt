-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parsing dAmn packets
--   
--   Parsing dAmn packets
@package damnpacket
@version 0.1.2


-- | Provides convenience functions for manipulating dAmn packets.
module Text.Damn.Packet

-- | Represents a dAmn packet.
--   
--   Packets are comprised of a command, which is mandatory, and three
--   other optional elements: a "parameter", an argument list, and a body.
--   Any combination of the latter three (or none of them) is valid, so the
--   parser is fairly lenient.
--   
--   A packet with all four elements will look something like this:
--   
--   <pre>
--   property chat:SomeChatroom
--   p=propertyName
--   by=name of setter
--   ts=timestamp
--   
--   value of property
--   </pre>
--   
--   Parsing this results in the packet:
--   
--   <pre>
--   <a>Packet</a> { <a>pktCommand</a> = "property"
--          , <a>pktParameter</a> = <a>Just</a> "chat:SomeChatroom"
--          , <a>pktArgs</a> = <tt>fromList</tt> [("p","propertyName"),("by","name of setter"),("ts","timestamp")]
--          , <a>pktBody</a> = <a>Just</a> "value of property"
--          }
--   </pre>
data Packet
Packet :: Text -> Maybe Text -> Arguments -> Maybe Text -> Packet
pktCommand :: Packet -> Text
pktParameter :: Packet -> Maybe Text
pktArgs :: Packet -> Arguments
pktBody :: Packet -> Maybe Text

-- | A type synonym--because pressing spacebar is pretty irritating.
type Arguments = Map Text Text

-- | Due to the way dAmn packets are designed, it's not possible to
--   unambiguously determine whether a packet has a subpacket or just a
--   body. Thus you will need to request a subpacket yourself.
pktSubpacket :: Packet -> Either String Packet

-- | Use when you don't care about the reason for parse failure.
pktSubpacket' :: Packet -> Maybe Packet

-- | A lens on <a>pktCommand</a>.
pktCommandL :: Functor f => (Text -> f Text) -> Packet -> f Packet

-- | A lens on <a>pktParameter</a>.
pktParameterL :: Functor f => (Maybe Text -> f (Maybe Text)) -> Packet -> f Packet

-- | A lens on <a>pktArgs</a>.
pktArgsL :: Functor f => (Arguments -> f Arguments) -> Packet -> f Packet

-- | A lens on <a>pktBody</a>.
pktBodyL :: Functor f => (Maybe Text -> f (Maybe Text)) -> Packet -> f Packet

-- | A lens on <a>pktSubpacket'</a>.
pktSubpacketL :: Functor f => (Maybe Packet -> f (Maybe Packet)) -> Packet -> f Packet

-- | Parse some text, providing a packet or the reason for parse failure.
parse :: Text -> Either String Packet

-- | Parse some text, discarding any failure message.
parse' :: Text -> Maybe Packet

-- | <a>render</a> converts a packet back into the dAmn text format. This
--   is used by <a>pktSubpacketL</a> to fulfill the lens laws, but you
--   might find it useful if you want to write packets to dAmn.
render :: Packet -> Text
