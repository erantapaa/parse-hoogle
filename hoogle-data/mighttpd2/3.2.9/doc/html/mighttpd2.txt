-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | High performance web server on WAI/warp
--   
@package mighttpd2
@version 3.2.9

module Program.Mighty.Signal

-- | The signal to stop Mighty.
sigStop :: Signal

-- | The signal to reload a configration file.
sigReload :: Signal

-- | The signal to top accepting new connections and to finish current
--   connections.
sigRetire :: Signal

-- | The signal to get information from Mighty.
sigInfo :: Signal

-- | Setting <a>Handler</a> for <a>Signal</a>.
setHandler :: Signal -> Handler -> IO ()

module Program.Mighty.Resource

-- | Checking if this process has the root privilege.
amIrootUser :: IO Bool

-- | Setting user and group.
setGroupUser :: String -> String -> IO ()

-- | Set the limit of open files.
unlimit :: Integer -> IO ()

module Program.Mighty.Process

-- | Getting the process id of a running Mighty.
getMightyPid :: IO [ProcessID]
instance Eq PsResult
instance Show PsResult

module Program.Mighty.Network

-- | Run a program detaching its terminal.
daemonize :: IO () -> IO ()

module Program.Mighty.ByteString

-- | Converting showalbe data to <a>ByteString</a>.
bshow :: Show a => a -> ByteString

-- | Appending two <a>ByteString</a>.
(+++) :: ByteString -> ByteString -> ByteString

module Program.Mighty.Report
data Reporter
initReporter :: Bool -> FilePath -> IO (Either SomeException Reporter)
finReporter :: Reporter -> IO ()
report :: Reporter -> ByteString -> IO ()
reportDo :: Reporter -> IO () -> IO ()
warpHandler :: Reporter -> Maybe Request -> SomeException -> IO ()
printStdout :: Maybe Request -> SomeException -> IO ()
instance Eq Method

module Program.Mighty.FileCache
type GetInfo = Path -> IO FileInfo
type RemoveInfo = IO ()
fileCacheInit :: IO GetInfo


-- | Parsers for Mighty
module Program.Mighty.Parser

-- | Parsing a file. If parsing fails, an <a>IOException</a> is thrown.
parseFile :: Parser a -> FilePath -> IO a

-- | <a>Parser</a> to consume zero or more white spaces
--   
--   <pre>
--   &gt;&gt;&gt; parse spcs "" "    "
--   Right ()
--   
--   &gt;&gt;&gt; parse spcs "" ""
--   Right ()
--   </pre>
spcs :: Parser ()

-- | <a>Parser</a> to consume one or more white spaces
--   
--   <pre>
--   &gt;&gt;&gt; parse spcs1 "" "    "
--   Right ()
--   
--   &gt;&gt;&gt; parse spcs1 "" " "
--   Right ()
--   
--   &gt;&gt;&gt; isLeft $ parse spcs1 "" ""
--   True
--   </pre>
spcs1 :: Parser ()

-- | <a>Parser</a> to consume exactly one white space
--   
--   <pre>
--   &gt;&gt;&gt; parse spc "" " "
--   Right ' '
--   
--   &gt;&gt;&gt; isLeft $ parse spc "" ""
--   True
--   </pre>
spc :: Parser Char

-- | <a>Parser</a> to consume one or more comment lines
--   
--   <pre>
--   &gt;&gt;&gt; parse commentLines "" "# comments\n# comments\n# comments\n"
--   Right ()
--   </pre>
commentLines :: Parser ()

-- | <a>Parser</a> to consume a trailing comment
--   
--   <pre>
--   &gt;&gt;&gt; parse trailing "" "# comments\n"
--   Right ()
--   
--   &gt;&gt;&gt; isLeft $ parse trailing "" "X# comments\n"
--   True
--   </pre>
trailing :: Parser ()

-- | <a>Parser</a> to consume a trailing comment
--   
--   <pre>
--   &gt;&gt;&gt; parse comment "" "# comments"
--   Right ()
--   
--   &gt;&gt;&gt; isLeft $ parse comment "" "foo"
--   True
--   </pre>
comment :: Parser ()

module Program.Mighty.Route

-- | Parsing a route file.
parseRoute :: FilePath -> Domain -> Port -> IO RouteDB
type RouteDB = [Block]
data Route
RouteFile :: Src -> Dst -> Route
RouteRedirect :: Src -> Dst -> Route
RouteCGI :: Src -> Dst -> Route
RouteRevProxy :: Src -> Dst -> Domain -> Port -> Route
data Block
Block :: [Domain] -> [Route] -> Block

-- | A logical path specified in URL.
type Src = Path

-- | A physical path in a file system.
type Dst = Path
type Domain = ByteString
type Port = Int
data RouteDBRef
newRouteDBRef :: RouteDB -> IO RouteDBRef
readRouteDBRef :: RouteDBRef -> IO RouteDB
writeRouteDBRef :: RouteDBRef -> RouteDB -> IO ()
instance Eq Route
instance Show Route
instance Eq Block
instance Show Block

module Program.Mighty.Config

-- | Parsing a configuration file to get an <a>Option</a>.
parseOption :: FilePath -> String -> IO Option

-- | Getting a default <a>Option</a>.
defaultOption :: String -> Option
data Option
Option :: !Int -> !String -> !Bool -> !String -> !String -> !FilePath -> !Bool -> !FilePath -> !Int -> !Int -> !FilePath -> !FilePath -> !FilePath -> !Int -> !Int -> !Int -> !String -> !(Maybe FilePath) -> !Int -> !FilePath -> !FilePath -> !Int -> !FilePath -> Option
opt_port :: Option -> !Int
opt_host :: Option -> !String
opt_debug_mode :: Option -> !Bool
opt_user :: Option -> !String
opt_group :: Option -> !String
opt_pid_file :: Option -> !FilePath
opt_logging :: Option -> !Bool
opt_log_file :: Option -> !FilePath
opt_log_file_size :: Option -> !Int
opt_log_backup_number :: Option -> !Int
opt_index_file :: Option -> !FilePath
opt_index_cgi :: Option -> !FilePath
opt_status_file_dir :: Option -> !FilePath
opt_connection_timeout :: Option -> !Int
opt_proxy_timeout :: Option -> !Int
opt_fd_cache_duration :: Option -> !Int
opt_server_name :: Option -> !String
opt_routing_file :: Option -> !(Maybe FilePath)
opt_tls_port :: Option -> !Int
opt_tls_cert_file :: Option -> !FilePath
opt_tls_key_file :: Option -> !FilePath
opt_service :: Option -> !Int
opt_report_file :: Option -> !FilePath
instance Eq Option
instance Show Option
instance Eq ConfValue
instance Show ConfValue
instance FromConf String
instance FromConf Bool
instance FromConf Int


-- | Special library for Mighty.
module Program.Mighty
