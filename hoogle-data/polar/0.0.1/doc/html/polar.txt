-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Complex numbers in polar form
--   
@package polar
@version 0.0.1

module Data.Complex.Polar

-- | Complex numbers are an algebraic type.
--   
--   For a complex number <tt>z</tt>, <tt><a>abs</a> z</tt> is a number
--   with the magnitude of <tt>z</tt>, but oriented in the positive real
--   direction, whereas <tt><a>signum</a> z</tt> has the phase of
--   <tt>z</tt>, but unit magnitude.
data RealFloat a => Polar a

-- | forms a complex number from its magnitude and its phase in radians.
(:<) :: !a -> !a -> Polar a

-- | Convert to rectangular form.
fromPolar :: RealFloat a => Polar a -> Complex a

-- | Convert to polar form.
fromComplex :: RealFloat a => Complex a -> Polar a

-- | Extracts the real part of a complex number.
realPart :: RealFloat a => Polar a -> a

-- | Extracts the imaginary part of a complex number.
imagPart :: RealFloat a => Polar a -> a

-- | The conjugate of a complex number.
conjugate :: RealFloat a => Polar a -> Polar a

-- | Form a complex number from polar components of magnitude and phase.
--   Phase is wrapped into (-pi,pi].
mkPolar :: RealFloat a => a -> a -> Polar a

-- | <tt><a>cis</a> t</tt> is a complex value with magnitude <tt>1</tt> and
--   phase <tt>t</tt> (modulo <tt>2*<a>pi</a></tt>).
cis :: RealFloat a => a -> Polar a

-- | The function <a>polar</a> takes a complex number and returns a
--   (magnitude, phase) pair in canonical form: the magnitude is
--   nonnegative, and the phase in the range <tt>(-<a>pi</a>,
--   <a>pi</a>]</tt>; if the magnitude is zero, then so is the phase.
polar :: RealFloat a => Polar a -> (a, a)

-- | The nonnegative magnitude of a complex number.
magnitude :: RealFloat a => Polar a -> a

-- | The phase of a complex number, in the range <tt>(-<a>pi</a>,
--   <a>pi</a>]</tt>. If the magnitude is zero, then so is the phase.
phase :: RealFloat a => Polar a -> a
instance Typeable Polar
instance RealFloat a => Eq (Polar a)
instance (RealFloat a, Show a) => Show (Polar a)
instance (Read a, RealFloat a) => Read (Polar a)
instance (Data a, RealFloat a) => Data (Polar a)
instance RealFloat a => Floating (Polar a)
instance RealFloat a => Fractional (Polar a)
instance RealFloat a => Num (Polar a)
