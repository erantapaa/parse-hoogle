-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding to GUI library FLTK
--   
--   hs-fltk is a Haskell interface to the FLTK. FLTK is a small and
--   portable GUI toolkit and the interface tries to be quite highlevel.
--   
--   The library is very much a work in progress.
@package hs-fltk
@version 0.2.5

module Graphics.UI.FLTK.Widget

-- | An attribute is just a getter and a setter function.
data Attr c a
Attr :: (c -> IO a) -> (c -> a -> IO ()) -> Attr c a

-- | Properties are the heart of the system.
data Prop c
(:=) :: Attr c a -> a -> Prop c
(::=) :: Attr c a -> IO a -> Prop c
(:=>) :: Attr c a -> (a -> a) -> Prop c
(::=>) :: Attr c a -> (a -> IO a) -> Prop c

-- | Set a number of properties for some object.
set :: c -> [Prop c] -> IO ()

-- | Get an Attr of an object.
get :: c -> Attr c a -> IO a

-- | Function class to get and set the value of a widget.
class Value_FC c v | c -> v
value :: Value_FC c v => Attr c v

-- | Type for widgets
data Widget

-- | Class for widgets
class Widget_C a
_widget :: Widget_C a => a -> Ptr Widget
action :: Widget_C a => Attr a (Act a)

-- | Has the widget changed?
changed :: Widget_C c => Attr c Bool

-- | The label of the widget.
label :: Widget_C c => Attr c String

-- | When are actions fired?
data When

-- | Change when the action is fired.
when :: Widget_C c => Attr c When

-- | The tooltip of the widget.
tooltip :: Widget_C c => Attr c String

-- | Size of label in pt.
labelSize :: Widget_C c => Attr c Int

-- | Redraw a widget.
redraw :: Widget_C w => w -> IO ()

-- | Redraw a widget label
redrawLabel :: Widget_C w => w -> IO ()
wNever :: When
wChanged :: When
wRelease :: When
wReleaseAllways :: When
wEnter :: When
wEnterAllways :: When
wEnterChanged :: When
wNotChanged :: When

-- | The type for actions.
type Act t = t -> IO ()

-- | Destroy a widget
destroy :: Widget_C w => w -> IO ()
wait :: IO ()
data Color
black :: Color
red :: Color
green :: Color
yellow :: Color
blue :: Color
magenta :: Color
cyan :: Color
white :: Color
rgb :: Int -> Int -> Int -> Color

-- | Change Color the action is fired.
color :: Widget_C c => Attr c Color

-- | Change Color the action is fired.
labelColor :: Widget_C c => Attr c Color

-- | Change Color the action is fired.
selectionColor :: Widget_C c => Attr c Color
class CFlag a
(+|+) :: CFlag a => a -> a -> a
data Align

-- | Change Align the action is fired.
align :: Widget_C c => Attr c Align

-- | Coordinates (x,y,width,heigth) of a widget
coords :: Widget_C c => Attr c (Int, Int, Int, Int)
aBottom :: Align
aCenter :: Align
aClip :: Align
aInside :: Align
aLeft :: Align
aRight :: Align
aTextOverImage :: Align
aTop :: Align
aWrap :: Align
instance CFlag Align
instance Widget_C Widget

module Graphics.UI.FLTK.Menu
data MenuBar

-- | Create a new menu bar.
newMenuBar :: Int -> Int -> Int -> Int -> [Prop MenuBar] -> IO MenuBar
addM :: MenuBar -> String -> Act MenuBar -> IO ()
addL :: MenuBar -> [(String, Act MenuBar)] -> IO ()
addC :: MenuBar -> String -> String -> Act MenuBar -> MenuType -> IO ()
data MenuType
mDefault :: MenuType
mInactive :: MenuType
mToggle :: MenuType
mValue :: MenuType
mRadio :: MenuType
mInvisible :: MenuType
mDivider :: MenuType

module Graphics.UI.FLTK.Input

-- | New text input field.
newInput :: Int -> Int -> Int -> Int -> [Prop Input] -> IO Input

-- | New file input field. Graphics.UI.FLTK.ASK's file_chooser is better...
newFileInput :: Int -> Int -> Int -> Int -> [Prop Input] -> IO Input

-- | New float input field.
newFloatInput :: Int -> Int -> Int -> Int -> [Prop Input] -> IO Input

-- | New int input field.
newIntInput :: Int -> Int -> Int -> Int -> [Prop Input] -> IO Input

-- | New multiline input field.
newMultiInput :: Int -> Int -> Int -> Int -> [Prop Input] -> IO Input

-- | New password input field.
newSecretInput :: Int -> Int -> Int -> Int -> [Prop Input] -> IO Input

-- | New simple output field.
newOutput :: Int -> Int -> Int -> Int -> [Prop Input] -> IO Input

-- | New multiline output field.
newMultiOutput :: Int -> Int -> Int -> Int -> [Prop Input] -> IO Input
data Input
instance Value_FC Input String
instance Widget_C Input

module Graphics.UI.FLTK.Image

-- | Type for images.
data Image

-- | Load new image from a file. Supports bmp, png, jpeg, gif and xpm...
newImage :: FilePath -> IO Image

-- | Image for deactived widget.
deimage :: Widget_C w => Attr w Image

-- | Image for actived widget.
image :: Widget_C w => Attr w Image
width :: Image -> IO Int
height :: Image -> IO Int

module Graphics.UI.FLTK.Group

-- | Begin a group for layout. FIXME not thread safe.
begin :: Group_C g => g -> IO ()

-- | End a group for layout. FIXME not thread safe.
end :: Group_C g => g -> IO ()

-- | Mark a widget resizable in the group. Fixme =&gt; accessor?
resizable :: (Group_C g, Widget_C w) => g -> w -> IO ()

-- | Create a new Group widget
newGroup :: Int -> Int -> Int -> Int -> [Prop Group] -> IO Group

-- | Class for Groups.
class Group_C a
_group :: Group_C a => a -> Ptr Group

-- | Group widgets.
data Group

-- | Tabs Group allows one to display several tabs of widgets.
data Tabs

-- | Create a new Tabs widget
newTabs :: Int -> Int -> Int -> Int -> [Prop Tabs] -> IO Tabs
instance Value_FC Tabs Widget
instance Widget_C Tabs
instance Group_C Tabs
instance Widget_C Group
instance Group_C Group

module Graphics.UI.FLTK.WidgetMisc

-- | Type for progress bars.
data Progress

-- | New progress bar.
newProgress :: Int -> Int -> Int -> Int -> [Prop Progress] -> IO Progress

-- | Maximum value for the progress bar.
maxValue :: Attr Progress Float

-- | Minumum value for the progress bar.
minValue :: Attr Progress Float

-- | Pack multiple widgets with layout.
data Pack

-- | new Pack for managing multiple widgets with layout.
newPack :: Int -> Int -> Int -> Int -> [Prop Pack] -> IO Pack

-- | Spacing between widgets in a Pack.
spacing :: Attr Pack Int
instance Group_C Pack
instance Widget_C Pack
instance Value_FC Progress Float
instance Widget_C Progress

module Graphics.UI.FLTK.Window

-- | Create a new top level window.
newWindow :: Int -> Int -> Int -> Int -> [Prop Window] -> IO Window

-- | Type for top level windows.
data Window

-- | Toggle a whether a window is shown or hidden.
shown :: Window_C c => Attr c Bool
run :: Window_C c => c -> IO ()
instance Window_C Window
instance Group_C Window
instance Widget_C Window

module Graphics.UI.FLTK.Button

-- | The Button type is used for all buttons.
data Button

-- | Create a new normal button.
newButton :: Int -> Int -> Int -> Int -> [Prop Button] -> IO Button

-- | Create a new checkbox
newCheckButton :: Int -> Int -> Int -> Int -> [Prop Button] -> IO Button

-- | Create a new button with a light showing the current state.
newLightButton :: Int -> Int -> Int -> Int -> [Prop Button] -> IO Button

-- | Create a button that sends the callback in a repeated fashion.
newRepeatButton :: Int -> Int -> Int -> Int -> [Prop Button] -> IO Button

-- | Create a new button with a "Return" symbol on it (for Ok buttons).
newReturnButton :: Int -> Int -> Int -> Int -> [Prop Button] -> IO Button

-- | Create a new radiobutton.
newRoundButton :: Int -> Int -> Int -> Int -> [Prop Button] -> IO Button
instance Widget_C Button

module Graphics.UI.FLTK.Browser

-- | The type for Browsers, which is a subtype of Widget.
data Browser

-- | Class for Browsers.
class Browser_C a
_browser :: Browser_C a => a -> Ptr Browser

-- | Add a new row to the browser.
add :: Browser_C c => c -> String -> IO ()

-- | Insert a new row at the specified position. Indeces start at 1.
insert :: Browser_C c => c -> Int -> String -> IO ()

-- | Delete all rows from the browser.
clear :: Browser_C c => c -> IO ()
bottomline :: Browser_C c => c -> Int -> IO ()
middleline :: Browser_C c => c -> Int -> IO ()
topline :: Browser_C c => c -> Int -> IO ()
columnChar :: Browser_C b => Attr b Char
formatChar :: Browser_C b => Attr b Char

-- | Column-separator character. The default is '\t'.
--   
--   Format character. The default is '@'.
--   
--   Column widths as pixels.
columnWidths :: Browser_C b => Attr b [Int]

-- | Move a row in the browser.
move :: Browser_C c => c -> Int -> Int -> IO ()

-- | Remove a row in the browser.
remove :: Browser_C c => c -> Int -> IO ()

-- | Return the number of rows in the browser.
size :: Browser_C c => c -> IO Int

-- | Create a new browser.
newBrowser :: Int -> Int -> Int -> Int -> [Prop Browser] -> IO Browser
instance Browser_C Browser
instance Widget_C Browser

module Graphics.UI.FLTK.MultiBrowser

-- | The type for MultiBrowsers, which is a subtype of Browser.
data MultiBrowser

-- | Create a new browser.
newMultiBrowser :: Int -> Int -> Int -> Int -> [Prop MultiBrowser] -> IO MultiBrowser
deselect :: MultiBrowser -> IO ()

-- | Toggle whether the specified row is selected or not.
select :: Int -> Attr MultiBrowser Bool
instance Value_FC MultiBrowser Int
instance Browser_C MultiBrowser
instance Widget_C MultiBrowser

module Graphics.UI.FLTK.Ask

-- | Display a message with a single line input and return the result.
input :: String -> IO String

-- | Ask a simple question with Ok and Cancel.
ask :: String -> IO Bool

-- | Display a messagebox.
message :: String -> IO ()

-- | Choose a directory. The first argument is the dialog title and the
--   second one the initial location.
dirChooser :: String -> FilePath -> IO FilePath

-- | Choose a file. This first argument is the dialog title. The second one
--   is filename patterns in the format like "Haskell (*.{hs,lhs})\tC
--   (*.c)". The final argument is the start location.
fileChooser :: String -> String -> FilePath -> IO FilePath

module Graphics.UI.FLTK
