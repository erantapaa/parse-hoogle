-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell library for retrieving data from various booru image sites
--   
@package h-booru
@version 0.3.0.0


-- | Module definining types used by the library.
module HBooru.Types

-- | Tags used for searching in sites. No special escaping is done. Note
--   that many sites would treat a tag like "striped panties" as two
--   separate tags and you wouldn't get the results you were after.
type Tag = String

-- | Data format used by various <a>Site</a>s. See instances for currently
--   used formats.
class DataFormat a

-- | Used as one of the data formats.
data XML
XML :: XML

-- | Used as one of the data formats.
data JSON
JSON :: JSON

-- | Thanks to this class, we're able to provide instances converting from
--   a <a>DataFormat</a> to <a>Response</a>. This is useful if we need a
--   <a>DataFormat</a> while we only have a type that's an instance of
--   <a>Response</a>. Note that the functional dependency currently
--   requires that there is only one way to coerce between two types.
class Response r => CoerceResponse x r | x -> r, r -> x
toResponse :: CoerceResponse x r => x -> String -> r
fromResponse :: CoerceResponse x r => r -> x

-- | Class specifying a parser that can fetch posts. A post usually
--   consists of links to the image, samples, and some meta-data. The
--   reason for this class is that sometimes we might get different
--   information based on the <a>DataFormat</a> we use so we use type
--   families to denote this rather than forcing the library user to make
--   do with our best guess on what goes into the post. It also allows us
--   to use different post types for sites that provide different
--   information.
class (Site s, DataFormat r) => PostParser s r where type family ImageTy s r
parseResponse :: (PostParser s r, CoerceResponse r r') => s -> r' -> [ImageTy s r]

-- | Describes whether a response from a <a>Site</a> in given
--   <a>DataFormat</a> allows us to get the information about total number
--   of posts matching our query. Some sites don't provide this
--   information.
class (Site s, DataFormat r) => Counted s r
parseCount :: (Counted s r, CoerceResponse r r') => s -> r' -> Integer
class (Counted s r, Postable s r) => PostablePaged s r where postUrlPaged s r ts i = postUrl s r ts ++ "&pid=" ++ show i
postUrlPaged :: PostablePaged s r => s -> r -> [Tag] -> Integer -> String

-- | If we can make an API request to <a>Site</a> in a specific
--   <a>DataFormat</a>, we can use instances of this class to pass in
class PostParser s r => Postable s r
postUrl :: Postable s r => s -> r -> [Tag] -> String
hardLimit :: Postable s r => s -> r -> Limit

-- | Describes a site for a parser. The reason why this isn't a simple data
--   type is to allow us to write additional parsers in the future without
--   modifying this library if we wish to do so.
class Site s

-- | Rating used on *booru sites.
data Rating
Safe :: Rating
Questionable :: Rating
Explicit :: Rating

-- | Denotes whethere there's a hard limit on the number of posts we can
--   fetch at a time from a site. NoLimit implies that we can fetch
--   everything at once and not that we don't know. See <a>Counted</a> for
--   a way to potentially retrieve number of posts present on the site.
data Limit
NoLimit :: Limit
Limit :: Integer -> Limit

-- | One of the formats we can receive responses from sites in. For things
--   like parsers parametrisation, use <a>XML</a> instead and use methods
--   in <a>CoerceResponse</a> if you need to.
data XMLResponse
XMLResponse :: String -> XMLResponse

-- | One of the formats we can receive responses from sites in. For things
--   like parsers parametrisation, use <a>JSON</a> instead and use methods
--   in <a>CoerceResponse</a> if you need to.
data JSONResponse
JSONResponse :: String -> JSONResponse

-- | Specifies what is considered a response. You'll almost certainly also
--   want new <a>DataFormat</a> and <a>CoerceResponse</a> instances if
--   you're adding some here. This class assumes that all responses carry
--   the response in a string we can extract. Note that this is not for use
--   as network response if you're scraping, only for putting data into
--   after you have done all the error checking and whatnot.
class Response r
getResponse :: Response r => r -> String
bA :: ArrowApply cat => cat c' b -> (b -> cat c' c) -> cat c' c

-- | Parse failures from various parsers
newtype ParseFailure
PF :: String -> ParseFailure

-- | Alias for our parser monad with failure possibility
type Parse = Either ParseFailure
data RealWorldExcs
Network :: HttpException -> RealWorldExcs
IOE :: IOException -> RealWorldExcs
SomethingElse :: String -> RealWorldExcs
type ExcIO a = ErrorT RealWorldExcs IO a
data ElF (el_a9Nl :: TyFun Symbol *)
ElF :: ElF

-- | Handy synonym hiding <a>ElF</a>.
type R a = PlainRec ElF a

-- | <a>R</a> wrapped in a <a>Parse</a>.
type PR a = Parse (R a)
height :: Proxy "height"
score :: Proxy "score"
file_url :: Proxy "file_url"
parent_id :: Proxy "parent_id"
sample_url :: Proxy "sample_url"
sample_width :: Proxy "sample_width"
sample_height :: Proxy "sample_height"
preview_url :: Proxy "preview_url"
rating :: Proxy "rating"
tags :: Proxy "tags"
id :: Proxy "id"
width :: Proxy "width"
change :: Proxy "change"
md5 :: Proxy "md5"
creator_id :: Proxy "creator_id"
has_children :: Proxy "has_children"
created_at :: Proxy "created_at"
status :: Proxy "status"
source :: Proxy "source"
has_notes :: Proxy "has_notes"
has_comments :: Proxy "has_comments"
preview_width :: Proxy "preview_width"
preview_height :: Proxy "preview_height"
author :: Proxy "author"
frames :: Proxy "frames"
frames_pending :: Proxy "frames_pending"
frames_pending_string :: Proxy "frames_pending_string"
frames_string :: Proxy "frames_string"
is_held :: Proxy "is_held"
is_shown_in_index :: Proxy "is_shown_in_index"
jpeg_file_size :: Proxy "jpeg_file_size"
jpeg_height :: Proxy "jpeg_height"
jpeg_url :: Proxy "jpeg_url"
jpeg_width :: Proxy "jpeg_width"
sample_file_size :: Proxy "sample_file_size"
actual_preview_height :: Proxy "actual_preview_height"
actual_preview_width :: Proxy "actual_preview_width"
file_size :: Proxy "file_size"
instance Show XML
instance Show JSON
instance Show Rating
instance Eq Rating
instance Show Limit
instance Eq Limit
instance Show XMLResponse
instance Show JSONResponse
instance Show ParseFailure
instance Eq ParseFailure
instance Show RealWorldExcs
instance Error RealWorldExcs
instance Error ParseFailure
instance Monad (LA XmlTree)
instance Applicative (LA XmlTree)
instance Functor (LA XmlTree)
instance Response JSONResponse
instance Response XMLResponse
instance CoerceResponse JSON JSONResponse
instance CoerceResponse XML XMLResponse
instance DataFormat JSON
instance DataFormat XML


-- | A collection of arrow parsers for known fields. We can use these (and
--   write new ones) by composing these parsers together for each site we
--   want to parse. As we carry the field information with us, this can
--   later be used when trying to extract the parsed information from the
--   sites into a homogenous list. Currently this moduel only deals with
--   parsing out XML attributes.
module HBooru.Parsers.FieldParsers
newtype E
E :: String -> E

-- | Alias for the common constraint blob
type ParseArrow cat = (Functor (cat XmlTree), ArrowXml cat)

-- | Alias for named fields
type Field cat s = cat XmlTree (Parse (R '[s]))

-- | Helper that provides better error messages when a <a>read</a> fails.
readAttr :: (ArrowXml cat, Read (App ElF s), Functor (cat XmlTree)) => String -> sing s -> Field cat s
readAttrWith :: (ArrowXml cat, Functor (cat XmlTree)) => String -> sing s -> (String -> Maybe (App ElF s)) -> Field cat s
readCustom :: (ArrowXml cat, Functor (cat XmlTree)) => String -> sing s -> (String -> Parse (App ElF s)) -> Field cat s
readNormalAttr :: (ArrowXml cat, (App ElF s) ~ String, Functor (cat XmlTree)) => String -> sing s -> Field cat s

-- | Parser arrow for a "height" XML attribute.
heightA :: ParseArrow cat => Field cat "height"

-- | Parser arrow for a "score" XML attribute.
scoreA :: ParseArrow cat => Field cat "score"

-- | Parser arrow for a "file_url" XML attribute.
file_urlA :: ParseArrow cat => Field cat "file_url"

-- | Parser arrow for a "parent_id" XML attribute.
parent_idA :: ParseArrow cat => Field cat "parent_id"

-- | Parser arrow for a "sample_url" XML attribute.
sample_urlA :: ParseArrow cat => Field cat "sample_url"

-- | Parser arrow for a "sample_width" XML attribute.
sample_widthA :: ParseArrow cat => Field cat "sample_width"

-- | Parser arrow for a "sample_height" XML attribute.
sample_heightA :: ParseArrow cat => Field cat "sample_height"

-- | Parser arrow for a "preview_url" XML attribute.
preview_urlA :: ParseArrow cat => Field cat "preview_url"

-- | Parser arrow for a "rating" XML attribute.
ratingA :: ParseArrow cat => Field cat "rating"

-- | Parser arrow for a "tags" XML attribute.
tagsA :: ParseArrow cat => Field cat "tags"

-- | Parser arrow for a "id" XML attribute.
idA :: ParseArrow cat => Field cat "id"

-- | Parser arrow for a "width" XML attribute.
widthA :: ParseArrow cat => Field cat "width"

-- | Parser arrow for a "change" XML attribute.
changeA :: ParseArrow cat => Field cat "change"

-- | Parser arrow for a "md5" XML attribute.
md5A :: ParseArrow cat => Field cat "md5"

-- | Parser arrow for a "creator_id" XML attribute.
creator_idA :: ParseArrow cat => Field cat "creator_id"

-- | Parser arrow for a "has_children" XML attribute.
has_childrenA :: ParseArrow cat => Field cat "has_children"

-- | Parser arrow for a "created_at" XML attribute.
created_atA :: ParseArrow cat => Field cat "created_at"

-- | Parser arrow for a "status" XML attribute.
statusA :: ParseArrow cat => Field cat "status"

-- | Parser arrow for a "source" XML attribute.
sourceA :: ParseArrow cat => Field cat "source"

-- | Parser arrow for a "has_notes" XML attribute.
has_notesA :: ParseArrow cat => Field cat "has_notes"

-- | Parser arrow for a "has_comments" XML attribute.
has_commentsA :: ParseArrow cat => Field cat "has_comments"

-- | Parser arrow for a "preview_width" XML attribute.
preview_widthA :: ParseArrow cat => Field cat "preview_width"

-- | Parser arrow for a "preview_height" XML attribute.
preview_heightA :: ParseArrow cat => Field cat "preview_height"

-- | Parser arrow for a "author" XML attribute.
authorA :: ParseArrow cat => Field cat "author"

-- | Parser arrow for a "actual_preview_height" XML attribute.
actual_preview_heightA :: ParseArrow cat => Field cat "actual_preview_height"

-- | Parser arrow for a "actual_preview_width" XML attribute.
actual_preview_widthA :: ParseArrow cat => Field cat "actual_preview_width"

-- | Parser arrow for a "frames" XML attribute.
framesA :: ParseArrow cat => Field cat "frames"

-- | Parser arrow for a "frames_pending" XML attribute.
frames_pendingA :: ParseArrow cat => Field cat "frames_pending"

-- | Parser arrow for a "frames_pending_string" XML attribute.
frames_pending_stringA :: ParseArrow cat => Field cat "frames_pending_string"

-- | Parser arrow for a "frames_string" XML attribute.
frames_stringA :: ParseArrow cat => Field cat "frames_string"

-- | Parser arrow for a "is_held" XML attribute.
is_heldA :: ParseArrow cat => Field cat "is_held"

-- | Parser arrow for a "is_shown_in_index" XML attribute.
is_shown_in_indexA :: ParseArrow cat => Field cat "is_shown_in_index"

-- | Parser arrow for a "jpeg_file_size" XML attribute.
jpeg_file_sizeA :: ParseArrow cat => Field cat "jpeg_file_size"

-- | Parser arrow for a "jpeg_height" XML attribute.
jpeg_heightA :: ParseArrow cat => Field cat "jpeg_height"

-- | Parser arrow for a "jpeg_url" XML attribute.
jpeg_urlA :: ParseArrow cat => Field cat "jpeg_url"

-- | Parser arrow for a "jpeg_width" XML attribute.
jpeg_widthA :: ParseArrow cat => Field cat "jpeg_width"

-- | Parser arrow for a "sample_file_size" XML attribute.
sample_file_sizeA :: ParseArrow cat => Field cat "sample_file_size"

-- | Parser arrow for a "file_size" XML attribute.
file_sizeA :: ParseArrow cat => Field cat "file_size"

-- | Parses a string returned from a Gelbooru-like site into one of the
--   commonly used <a>Rating</a>s. Note that this is a partial function so
--   you should make sure that the site in question only ever returns the
--   values in a format specified in the function
parseRating :: String -> Maybe Rating

-- | Splits returned tag string into separate <a>Tag</a>s. For
--   Gelbooru-like sites, this is just the question of splitting on
--   whitespace.
parseTags :: String -> [Tag]

-- | Reads a lowercase <a>Bool</a> string representation into its Haskell
--   type. If we can't parse the boolean, return <a>Nothing</a>.
parseBool :: String -> Maybe Bool

-- | A little helper that lifts <a>&lt;+&gt;</a> into <a>Arrow</a> which
--   allows us to compose parsers returning records very easily.
(<:+>) :: Arrow cat => cat b (Parse (R as)) -> cat b (Parse (R bs)) -> cat b (Parse (R (as ++ bs)))
instance Typeable E
instance Show E
instance Eq E
instance Exception E


-- | Module for parsing content from <a>Ichijou/vectorbooru</a>.
module HBooru.Parsers.Ichijou

-- | We use this type and its <a>Site</a> instance to distinguish between
--   various parsers.
data Ichijou
Ichijou :: Ichijou

-- | Ichijou post record alias
type IchijouPost = PR '["creator_id", "md5", "status", "preview_height", "has_notes", "author", "source", "score", "file_size", "sample_width", "width", "file_url", "sample_height", "has_children", "tags", "change", "preview_url", "has_comments", "id", "sample_url", "rating", "created_at", "preview_width", "parent_id", "height"]

-- | Parser arrow used for Ichijou.
parsePost :: (Functor (cat XmlTree), ArrowXml cat) => cat XmlTree IchijouPost
instance Show Ichijou
instance Eq Ichijou
instance Counted Ichijou XML
instance PostParser Ichijou XML
instance Site Ichijou
instance PostablePaged Ichijou XML
instance Postable Ichijou XML


-- | Module providing functions to interface with some booru sites. Amongst
--   other things, it should (semi-transparently) handle post count limits.
--   The user should simply be able to ask for all images with certain
--   rather than worrying about hard limits per page set by the sites
--   &amp;c.
module HBooru.Network

-- | Given a <a>Site</a>, <a>DataFormat</a> and a list of <a>Tag</a>s,
--   naively fetch the first page or so and parse it to the appropriate
--   image type. Both the site and the format need to together form an
--   instance of <a>Postable</a> and the data format has to exist in an
--   instance of <a>CoerceResponse</a>. Uses <a>fetchPostPage</a> to fetch
--   the data.
fetchTaggedPosts :: (Postable s d, CoerceResponse d r) => s -> d -> [Tag] -> ExcIO [ImageTy s d]

-- | As <a>fetchTaggedPosts</a> but works with sites which allow indexing
--   by page.
fetchTaggedPostsIndexed :: (CoerceResponse r a, PostablePaged s r) => s -> r -> [Tag] -> Integer -> ExcIO [ImageTy s r]

-- | Given an instance of <a>Postable</a>, <a>CoerceResponse</a>, and a
--   list of <a>Tag</a>s, fetch the post page.
fetchPostPage :: (Postable s d, CoerceResponse d r) => s -> d -> [Tag] -> ExcIO r

-- | Given an instance of <a>Postable</a>, <a>CoerceResponse</a>, and a
--   list of <a>Tag</a>s, fetch the post page.
fetchPostPageIndexed :: (PostablePaged s d, CoerceResponse d r) => s -> d -> [Tag] -> Integer -> ExcIO r

-- | Given a URL and protocol, tries to fetch a response.
fetchResponse :: CoerceResponse r r' => String -> r -> ExcIO r'

-- | Uses <a>fetchPostPage</a> to parse the number of posts available based
--   on provided <a>Tag</a>s.
fetchPostCount :: (Postable s r, Counted s r, CoerceResponse r a) => s -> r -> [Tag] -> ExcIO Integer

-- | Attemps to fetch all posts from a site, from all its pages. The upper
--   limit of images per page is used.
fetchAllTaggedPosts :: (CoerceResponse r a, PostablePaged s r) => s -> r -> [Tag] -> IO [ImageTy s r]
data DownloadStatus
OK :: String -> DownloadStatus
Failed :: (Either HttpException IOException, String) -> DownloadStatus
EndOfQueue :: DownloadStatus

-- | Downloads the given files. Writes the status information back to the
--   provided TChan.
downloadFiles :: [(String, FilePath)] -> TChan DownloadStatus -> Int -> IO ()
instance Show DownloadStatus


-- | Module for parsing content from <a>Gelbooru</a>.
module HBooru.Parsers.Gelbooru

-- | Record used for Gelbooru posts
type GelbooruPost = PR '["height", "score", "file_url", "parent_id", "sample_url", "sample_width", "sample_height", "preview_url", "rating", "tags", "id", "width", "change", "md5", "creator_id", "has_children", "created_at", "status", "source", "has_notes", "has_comments", "preview_width", "preview_height"]

-- | XML parser for Gelbooru used by "Postable Gelbooru XML" instance.
parsePost :: (Functor (cat XmlTree), ArrowXml cat) => cat XmlTree GelbooruPost

-- | We use this type and its <a>Site</a> instance to distinguish between
--   various parsers.
data Gelbooru
Gelbooru :: Gelbooru
instance Show Gelbooru
instance Eq Gelbooru
instance Counted Gelbooru XML
instance PostParser Gelbooru XML
instance Site Gelbooru
instance PostablePaged Gelbooru XML
instance Postable Gelbooru XML


-- | Module for parsing content from <a>Konachan</a>.
module HBooru.Parsers.Konachan

-- | We use this type and its <a>Site</a> instance to distinguish between
--   various parsers.
data Konachan
Konachan :: Konachan

-- | Konachan post record
type KonachanPost = PR '["actual_preview_height", "actual_preview_width", "author", "change", "created_at", "file_size", "file_url", "frames", "frames_pending", "frames_pending_string", "frames_string", "has_children", "height", "id", "is_held", "is_shown_in_index", "jpeg_file_size", "jpeg_height", "jpeg_url", "jpeg_width", "md5", "preview_height", "preview_url", "preview_width", "rating", "sample_file_size", "sample_height", "sample_url", "sample_width", "score", "source", "status", "tags", "width"]

-- | Parser arrow used for Konachan.
parsePost :: (Functor (cat XmlTree), ArrowXml cat) => cat XmlTree KonachanPost
instance Show Konachan
instance Eq Konachan
instance Counted Konachan XML
instance PostParser Konachan XML
instance Site Konachan
instance PostablePaged Konachan XML
instance Postable Konachan XML


-- | Module for parsing content from <a>safebooru</a>.
module HBooru.Parsers.Safebooru

-- | We use this type and its <a>Site</a> instance to distinguish between
--   various parsers.
data Safebooru
Safebooru :: Safebooru

-- | Safebooru post record.
type SafebooruPost = PR '["height", "score", "file_url", "parent_id", "sample_url", "sample_width", "sample_height", "preview_url", "rating", "tags", "id", "width", "change", "md5", "creator_id", "has_children", "created_at", "status", "source", "has_notes", "has_comments", "preview_width", "preview_height"]

-- | Parser arrow used for Safebooru.
parsePost :: (Functor (cat XmlTree), ArrowXml cat) => cat XmlTree SafebooruPost
instance Show Safebooru
instance Eq Safebooru
instance Counted Safebooru XML
instance PostParser Safebooru XML
instance Site Safebooru
instance PostablePaged Safebooru XML
instance Postable Safebooru XML


-- | Module for parsing content from <a>Yandere</a>, known in the past as
--   <a>MoeImouto</a>.
module HBooru.Parsers.Yandere

-- | We use this type and its <a>Site</a> instance to distinguish between
--   various parsers.
data Yandere
Yandere :: Yandere

-- | Alias for a record representing typical Yandere post.
type YanderePost = PR '["actual_preview_height", "actual_preview_width", "author", "change", "created_at", "creator_id", "file_size", "file_url", "frames", "frames_pending", "frames_pending_string", "frames_string", "has_children", "height", "id", "is_held", "is_shown_in_index", "jpeg_file_size", "jpeg_height", "jpeg_url", "jpeg_width", "md5", "preview_height", "preview_url", "preview_width", "rating", "sample_file_size", "sample_height", "sample_url", "sample_width", "score", "source", "status", "tags", "width"]

-- | Parser arrow for XML Yandere posts.
parsePost :: (Functor (cat XmlTree), ArrowXml cat) => cat XmlTree YanderePost
instance Show Yandere
instance Eq Yandere
instance Counted Yandere XML
instance PostParser Yandere XML
instance Site Yandere
instance PostablePaged Yandere XML
instance Postable Yandere XML
