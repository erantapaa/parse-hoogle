-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Reference cells that need two independent indices to be accessed.
--   
--   Reference cells that need two independent indices to be accessed.
@package data-quotientref
@version 0.1


-- | A Quotient Reference is a reference cell that needs two values to
--   dereference. In a way it is a two-dimensional table indexed by
--   references. The trick is that if a cell is indexed by <tt>a</tt> and
--   <tt>b</tt>, then if <i>either</i> <tt>a</tt> or <tt>b</tt> gets
--   cleaned up by the garbage collector, then so does the cell, because it
--   would not be able to be accessed anymore.
--   
--   There are two different types of indices, <a>LeftRef</a> and
--   <a>RightRef</a>. You need one of each, of the same type, to access a
--   cell.
--   
--   The name comes from the idea that the product of two indices is a
--   reference, so each index is a quotient.
--   
--   Example usage:
--   
--   <pre>
--   do
--     l_1 &lt;- newLeft
--     l_2 &lt;- newLeft
--     r_1 &lt;- newRight
--     r_2 &lt;- newRight
--     write l_1 r_1 "Foo"
--     write l_2 r_1 "Bar"
--     print =&lt;&lt; read l_1 r_1  -- Just "Foo"
--     print =&lt;&lt; read l_1 r_2  -- Nothing
--     print =&lt;&lt; read l_2 r_1  -- Just "Bar"
--     print =&lt;&lt; read l_2 r_2  -- Nothing
--   </pre>
module Data.QuotientRef

-- | The left half of a reference cell. Combine this with a <a>RightRef</a>
--   to access a cell.
data LeftRef a

-- | The right half of a reference cell. Combine this with a <a>LeftRef</a>
--   to access a cell.
data RightRef a
newLeft :: IO (LeftRef a)
newRight :: IO (RightRef a)

-- | Combine the two halves of a reference and return the result if it
--   exists.
read :: LeftRef a -> RightRef a -> IO (Maybe a)

-- | Combine the two halves of a reference and write a value to the
--   product.
write :: LeftRef a -> RightRef a -> a -> IO ()
