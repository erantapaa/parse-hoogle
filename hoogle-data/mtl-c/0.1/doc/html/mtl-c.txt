-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Very strict CPS'd transformers
--   
@package mtl-c
@version 0.1

module Control.Monad.State.CPS
newtype StateT s m a
StateT :: (forall r. s -> (a -> s -> m r) -> m r) -> StateT s m a
unStateT :: StateT s m a -> forall r. s -> (a -> s -> m r) -> m r
runStateT :: Monad m => StateT s m a -> s -> m (a, s)
evalStateT :: Monad m => StateT s m a -> s -> m a
execStateT :: Monad m => StateT s m a -> s -> m s
mapStateT :: (Monad m, Monad n) => (m (a, s) -> n (b, s)) -> StateT s m a -> StateT s n b
type State s = StateT s Identity
runState :: State s a -> s -> (a, s)
evalState :: State s a -> s -> a
execState :: State s a -> s -> s
instance MonadTrans (StateT s)
instance MonadState s (StateT s m)
instance Monad (StateT s m)
instance Applicative (StateT s m)
instance Functor (StateT s m)

module Control.Monad.Writer.CPS
newtype WriterT w m a
WriterT :: (forall r. (a -> w -> m r) -> m r) -> WriterT w m a
unWriterT :: WriterT w m a -> forall r. (a -> w -> m r) -> m r
runWriterT :: Monad m => WriterT w m a -> m (a, w)
execWriterT :: Monad m => WriterT w m a -> m w
mapWriterT :: (Monad m, Monad n) => (m (a, w) -> n (b, w)) -> WriterT w m a -> WriterT w n b
type Writer w = WriterT w Identity
runWriter :: Writer w a -> (a, w)
execWriter :: Writer w a -> w
instance Monoid w => MonadTrans (WriterT w)
instance Monoid w => MonadWriter w (WriterT w m)
instance Monoid w => Monad (WriterT w m)
instance Monoid w => Applicative (WriterT w m)
instance Functor (WriterT w m)

module Control.Monad.Reader.CPS
newtype ReaderT r m a
ReaderT :: (forall b. r -> (a -> m b) -> m b) -> ReaderT r m a
unReaderT :: ReaderT r m a -> forall b. r -> (a -> m b) -> m b
runReaderT :: Monad m => ReaderT r m a -> r -> m a
mapReaderT :: (Monad m, Monad n) => (m a -> n b) -> ReaderT r m a -> ReaderT r n b
type Reader r = ReaderT r Identity
runReader :: Reader r a -> r -> a
instance MonadTrans (ReaderT r)
instance MonadReader r (ReaderT r m)
instance Monad (ReaderT r m)
instance Applicative (ReaderT r m)
instance Functor (ReaderT r m)
