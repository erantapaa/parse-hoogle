-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A port of John Skilling's nested sampling C code to Haskell.
--   
--   Nested Sampling is a numerical algorithm for approximate Bayesian
--   inference. It generates samples from the posterior distribution but
--   its main purpose is to estimate the evidence P(M|D) of the model
--   conditioned on the observed data. More information on Nested Sampling
--   is available at
--   <a>http://en.wikipedia.org/wiki/Nested_sampling_algorithm</a>.
--   
--   The original code can be found at
--   <a>http://www.inference.phy.cam.ac.uk/bayesys/sivia/</a> along with
--   documentation at <a>http://www.inference.phy.cam.ac.uk/bayesys/</a>.
--   An example program called lighthouse.hs is included.
--   
--   So far, only the simple demonstration file called mininest.c has been
--   ported. There is a more sophisticated C library available at
--   <a>http://www.inference.phy.cam.ac.uk/bayesys/nest/nest.tar.gz</a> but
--   it has not been ported to Haskell yet.
@package NestedSampling
@version 0.1.4

module Statistics.MiniNest
data NestedSamplingResult a
class SamplingObject a
setLogWt :: SamplingObject a => a -> Double -> a
getLogWt :: SamplingObject a => a -> Double
getLogL :: SamplingObject a => a -> Double

-- | nestedSampling computes the evidence Z and samples from the posterior.
--   Args: priorSamples: a list of samples from the prior. explore: a
--   function that evolves an object within a likelihood constraint.
--   iterations: number of iterations to run.
nestedSampling :: (Ord a, SamplingObject a) => [a] -> (a -> Double -> IO a) -> Int -> IO (NestedSamplingResult a)
instance Show (NestedSamplingResult a)
