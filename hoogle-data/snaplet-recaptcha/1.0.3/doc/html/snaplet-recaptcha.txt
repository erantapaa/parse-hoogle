-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A ReCAPTCHA verification snaplet with Heist integration and connection sharing.
--   
@package snaplet-recaptcha
@version 1.0.3


-- | This is a snaplet for google's ReCaptcha verification api. This
--   library uses `http-conduit` and keeps connections alive (a maximum of
--   10). This is an important point in order to avoid denial of service
--   attacks.
--   
--   See <a>Snap.Snaplet.ReCaptcha.Example</a> and the docs provided here
--   for example usage.
module Snap.Snaplet.ReCaptcha
data ReCaptcha
class HasReCaptcha b
captchaLens :: HasReCaptcha b => SnapletLens (Snaplet b) ReCaptcha

-- | Initialise the <a>ReCaptcha</a> snaplet. You are required to have
--   "site_key" and "secret_key" set in the snaplet's configuration file.
--   See 'initReCaptcha\'' if you don't want to use Snap's snaplet
--   configuration mechanism.
--   
--   This provides optional Heist support, which is implemented using
--   <a>recaptchaScript</a> and <a>recaptchaDiv</a>.
initReCaptcha :: Maybe (Snaplet (Heist b)) -> SnapletInit b ReCaptcha

-- | Same as <a>initReCaptcha</a>, but passing the site key and private key
--   explicitly - no configuration on the filesystem is required.
initReCaptcha' :: Maybe (Snaplet (Heist b)) -> (SiteKey, PrivateKey) -> SnapletInit b ReCaptcha

-- | <a>pass</a> if the cstate failed. Logs errors (not incorrect captchas)
--   with <a>logError</a>.
--   
--   <pre>
--   <a>checkCaptcha</a> <a>&lt;|&gt;</a> <a>writeText</a> "Captcha failed!"
--   </pre>
--   
--   See <a>getCaptcha</a>
checkCaptcha :: HasReCaptcha b => Handler b c ()

-- | Run one of two handlers on either failing or succeeding a captcha.
--   
--   <pre>
--   <a>withCaptcha</a> banForever $ do
--     postId &lt;- <a>getParam</a> "id"
--     thing  &lt;- <a>getPostParam</a> thing
--     addCommentToDB postId thing
--   </pre>
--   
--   See <a>getCaptcha</a>
withCaptcha :: HasReCaptcha b => Handler b c () -> Handler b c () -> Handler b c ()

-- | Get the ReCaptcha result by querying Google's API.
--   
--   This requires a "g-recaptcha-response" (POST) parameter to be set in
--   the current request.
--   
--   See <tt>ReCaptchaResult</tt> for possible failure types.
--   
--   <pre>
--   cstate &lt;- getCaptcha
--   case cstate of
--     Success               -&gt; writeText "Congratulations! You won."
--     Failure               -&gt; writeText "Incorrect cstate answer."
--     MissingResponseParam  -&gt; writeText "No g-recaptcha-response in POST"
--     InvalidServerResponse -&gt; writeText "Did Google change their API?"
--     Errors errs           -&gt; writeText ("Errors: " &lt;&gt; <a>pack</a> (<a>show</a> errs))
--   </pre>
--   
--   This may throw a <a>HttpException</a> if there is a connection-related
--   error.
getCaptcha :: HasReCaptcha b => Handler b c Captcha

-- | Get the <a>recaptchaDiv</a> for this <a>ReCaptcha</a>. Useful inside a
--   <a>Handler</a>.
--   
--   This is computed when the snaplet is first initialised.
getCaptchaDiv :: HasReCaptcha b => Handler b c Builder
getCaptchaSiteKey :: HasReCaptcha b => Handler b c SiteKey
data Captcha
Success :: Captcha
Failure :: Captcha

-- | Errors returned by the Captcha. See
--   <a>https://developers.google.com/recaptcha/docs/verify</a> for
--   possible error codes. Note that <a>Failure</a> is used for the case
--   that the only error code returned is "invalid-input-response".
Errors :: [Text] -> Captcha

-- | The server didn't respond with the JSON object required as per
--   <a>https://developers.google.com/recaptcha/docs/verify</a>
InvalidServerResponse :: Captcha

-- | There was no "recaptcha_response_field" parameter set in the user
--   request.
MissingResponseParam :: Captcha
type PrivateKey = ByteString
type SiteKey = ByteString
cstate :: Lens' ReCaptcha Captcha

-- | <pre>
--   &lt;script src='https://www.google.com/recaptcha/api.js' async defer&gt;&lt;/script&gt;
--   </pre>
recaptchaScript :: Builder

-- | For use in a HTML form.
recaptchaDiv :: ByteString -> Builder
instance FromJSON ReCaptchaResponse
instance FromJSON Captcha
instance ToJSON Captcha
instance HasReCaptcha ReCaptcha
instance Typeable Captcha
instance Typeable ReCaptcha
instance Show Captcha


-- | Provides example usage for <a>Snap.Snaplet.ReCaptcha</a>.
module Snap.Snaplet.ReCaptcha.Example

-- | <pre>
--   <a>main</a> = <a>serveSnaplet</a> <a>defaultConfig</a> <a>initSample</a>
--   </pre>
--   
--   You can load this into GHCi and run it, with full logging to
--   stdout/stderr
--   
--   <pre>
--   &gt;&gt;&gt; :main --verbose --access-log= --error-log=
--   </pre>
main :: IO ()

-- | Requires 'snaplets/heist/templates/sample.tpl' - a suggested version
--   of which is available in this module as <a>sampleTemplate</a>.
--   
--   This reads the ReCaptcha configuration as an ordinary snaplet config
--   on the filesystem as per <a>initReCaptcha</a>
--   (<tt>snaplets<i>recaptcha</i>devel.cfg</tt>).
initSample :: SnapletInit Sample Sample

-- | Heist template, written to $PWD/snaplets/heist/recaptcha-example.tpl
--   
--   <pre>
--   sampleTemplate ≈
--     &lt;html&gt;
--      &lt;head&gt;
--        &lt;recaptcha-script /&gt;
--      &lt;/head&gt;
--      &lt;body&gt;
--        &lt;form method='POST'&gt;
--          &lt;input type='text' name='name' placeholder='Name'&gt;
--          &lt;input type='text' name='email' placeholder='Email'&gt;
--          &lt;br&gt;
--          &lt;textarea class='field' name='content' rows='20' placeholder='Content'&gt;&lt;/textarea&gt;
--          &lt;br&gt;
--          &lt;recaptcha-div /&gt;
--          &lt;input type='submit' value='Comment'&gt;
--        &lt;/form&gt;
--      &lt;/body&gt;
--     &lt;/html&gt;
--   </pre>
sampleTemplate :: Text

-- | A "blog" snaplet which reads hypothetical "posts" by their id, and
--   displays a comment form there.
--   
--   <tt>GET</tt> on <tt>posts/:id</tt> → a comment form
--   
--   <tt>POST</tt> on <tt>posts/:id</tt> → the comment poster which
--   verifies that the user correctly responded to the captcha.
initBlog :: (HasReCaptcha b, HasHeist b) => Snaplet (Heist b) -> SnapletInit b Blog
instance HasHeist Sample
instance HasReCaptcha Sample
