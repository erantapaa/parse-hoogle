-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Client for a limited part of PayPal's Adaptive Payments API
--   
@package paypal-adaptive-hoops
@version 0.11.0.2


-- | Start the process of someone paying you. You have to redirect the
--   payer's browser to PayPal to finish it.
--   
--   <a>Pay</a> operation docs:
--   <a>https://developer.paypal.com/docs/classic/api/adaptive-payments/Pay_API_Operation/</a>
--   
--   This is a "Simple Payment" which means there's a single sender and
--   receiver (same as Withdrawal).
--   
--   It uses the <a>Explicit</a> payment approval type, meaning the payer
--   must go to PayPal in their browser to approve the payment. Here's an
--   example payment approval URL with a PayKey of "foo":
--   
--   
--   <a>https://www.paypal.com/cgi-bin/webscr?cmd=_ap-payment&amp;paykey=foo</a>
module PayPal.Adaptive.Deposit
data Deposit
Deposit :: Money -> Text -> Text -> Text -> Deposit
_amount :: Deposit -> Money
_senderEmail :: Deposit -> Text
_returnUrl :: Deposit -> Text
_cancelUrl :: Deposit -> Text

-- | For internal use.
data SerializeDeposit
SerializeDeposit :: Deposit -> Text -> SerializeDeposit
req :: Client -> Deposit -> IO (Either AdaptiveErr PayKey)
approvalUrl :: Client -> PayKey -> Text
senderEmail :: Lens' Deposit Text
returnUrl :: Lens' Deposit Text
cancelUrl :: Lens' Deposit Text
amount :: Lens' Deposit Money
instance Eq Deposit
instance Show Deposit
instance ToJSON SerializeDeposit


-- | Look up information about a payment.
--   
--   
--   <a>https://developer.paypal.com/docs/classic/api/adaptive-payments/PaymentDetails_API_Operation/</a>
module PayPal.Adaptive.Lookup
data LookupPayment a
LookupTrID :: TransactionId -> LookupPayment TransactionId
LookupPayKey :: PayKey -> LookupPayment PayKey
req :: Client -> LookupPayment a -> IO (Either AdaptiveErr PayResp)
instance ToJSON (LookupPayment a)


-- | Send a single payment from your account.
--   
--   <a>Pay</a> operation docs:
--   <a>https://developer.paypal.com/docs/classic/api/adaptive-payments/Pay_API_Operation/</a>
--   
--   This is a "Simple Payment" which means there's a single sender and
--   receiver (same as Deposit).
--   
--   It uses the <a>Implicit</a> payment approval type, meaning the
--   application making the API call must also be the sender of the
--   payment.
module PayPal.Adaptive.Withdrawal
data Withdrawal
Withdrawal :: Money -> Text -> Withdrawal
_amount :: Withdrawal -> Money
_receiverEmail :: Withdrawal -> Text

-- | For internal use.
data SerializeWithdrawal
SerializeWithdrawal :: Withdrawal -> Text -> SerializeWithdrawal

-- | If a PayPal account doesn't exist yet PayPal responds with an empty
--   list of PayInfos. We return this as Left <a>AePending</a>.
req :: Client -> Withdrawal -> IO (Either AdaptiveErr CompletePayResp)
receiverEmail :: Lens' Withdrawal Text
amount :: Lens' Withdrawal Money
instance Eq Withdrawal
instance Show Withdrawal
instance ToJSON SerializeWithdrawal

module PayPal.Adaptive.Internal
ppPost :: ToJSON a => Client -> Text -> a -> IO (Either AdaptiveErr (Response ByteString))
ppDecode :: Response ByteString -> Either AdaptiveErr PayResp

-- | Exported by PayPal.Adaptive.Internal
parseErrId :: Value -> Parser Int

-- | "en_US" is hardcoded because it's the only supported error language.
requestEnvelope :: Value
payExecStatusCompleted :: PayResp -> Either AdaptiveErr ()

-- | TODO: this makes the assumption that an empty PayInfo list means the
--   transaction is pending. Is this always right?
getPayInfo :: PayResp -> Either AdaptiveErr PayInfo
transactionStatusCompleted :: PayResp -> PayInfo -> Either AdaptiveErr ()
errorFieldNothing :: PayResp -> Either AdaptiveErr ()
checkPayKey :: PayResp -> Either AdaptiveErr ()
payExecStatusCreated :: PayResp -> Either AdaptiveErr ()
noPayInfo :: PayResp -> Either AdaptiveErr ()
transactionIdJust :: PayResp -> Maybe TransactionId -> Either AdaptiveErr TransactionId

module PayPal.Adaptive
data Client
Client :: Text -> Text -> Env -> Text -> Text -> Text -> Client
_clAppId :: Client -> Text
_clUserId :: Client -> Text
_clEnv :: Client -> Env
_clPassword :: Client -> Text
_clSig :: Client -> Text

-- | Not needed for authentication, but deposits are sent to here and
--   withdrawals are sent from here. Must be the email associated with your
--   PayPal app.
_clAccountEmail :: Client -> Text
data Env
Sandbox :: Env
Production :: Env

-- | Text is an error message in all the below types.
--   
--   AeShouldNotHappen is meant to cover PayPal responses to API requests
--   that this library doesn't support sending in the first place. TODO: is
--   this actually how we're using it?
data AdaptiveErr
AeConnectionErr :: Text -> AdaptiveErr
AeDecodeFailed :: ByteString -> Text -> AdaptiveErr

-- | Just a wrapper around an AeErrCodes Int.
AeInvalidCredentials :: AdaptiveErr

-- | Just a wrapper around an AeErrCodes Int. Raised when the Deposit
--   sender email or the Withdrawal account email doesn't exist.
AeNoSuchEmail :: AdaptiveErr
AeErrCodes :: [Int] -> AdaptiveErr
AePending :: PayResp -> AdaptiveErr
AeRefused :: PayResp -> AdaptiveErr
AeShouldNotHappen :: PayResp -> Text -> AdaptiveErr

-- | Used for forgiving attempts to parse PayPal responses. For instance,
--   this library never expects more than one PayInfo. We still try to
--   parse them as a list here so we can still sucessfully parse a PayResp
--   to use in an <tt>AdaptiveError</tt> if for some reason more than one
--   <a>PayInfo</a> is returned
data PayResp
PayResp :: Maybe Text -> PayExecStatus -> PayKey -> [PayInfo] -> PayResp
_prPayError :: PayResp -> Maybe Text
_prPayExecStatus :: PayResp -> PayExecStatus
_prPayKey :: PayResp -> PayKey
_prPayInfos :: PayResp -> [PayInfo]

-- | A version of <a>PayResp</a> for completed transactions.
--   
--   Status fields are omitted since they should be complete.
--   
--   Has no separate field for a <a>PayInfo</a> list since successful
--   transactions will always have exactly one. Instead the pay info fields
--   have been flattened into the top level of this structure.
data CompletePayResp
CompletePayResp :: PayKey -> Receiver -> TransactionId -> TransactionId -> CompletePayResp
_crPayKey :: CompletePayResp -> PayKey
_crReceiver :: CompletePayResp -> Receiver
_crSenderTransactionId :: CompletePayResp -> TransactionId
_crTransactionId :: CompletePayResp -> TransactionId
checkComplete :: PayResp -> Either AdaptiveErr CompletePayResp

-- | This refers to the processing of this request. To make sure a payment
--   has actually gone through, check <a>TransactionStatus</a> instead.
--   
--   PayPal returns this using the JSON object key "paymentExecStatus" in
--   responses to Withdrawal and Deposit and "status" in responses to
--   LookupPayment.
data PayExecStatus
PeCreated :: PayExecStatus
PeCompleted :: PayExecStatus
PeIncomplete :: PayExecStatus
PeError :: PayExecStatus
PeReversalError :: PayExecStatus
PeProcessing :: PayExecStatus
PePending :: PayExecStatus

-- | Expires after three hours.
--   
--   
--   <a>https://developer.paypal.com/docs/classic/api/adaptive-payments/Pay_API_Operation/</a>
newtype PayKey
PayKey :: Text -> PayKey
_unPayKey :: PayKey -> Text

-- | Right toPayPal responses return a PayInfo along with a
--   _piTransactionStatus Just, with some exceptions.
--   
--   <ol>
--   <li>Withdrawals to nonexistent accounts return no
--   PayInfos.<ol><li>Lookups on such transactions return one PayInfo with
--   a _piTransactionStatus of Nothing.</li><li>Deposits don't return
--   PayInfos.</li><li>Lookups on such transactions return one PayInfo with
--   a _piTransactionStatus of Nothing.</li></ol></li>
--   </ol>
--   
--   NOTE: We use the same newtype for both _piSenderTransactionId and
--   _piTransactionStatus. They will have different values, but either can
--   be used to look up a payment.
data PayInfo
PayInfo :: Receiver -> Maybe TransactionId -> Maybe TransactionStatus -> Maybe TransactionId -> PayInfo
_piReceiver :: PayInfo -> Receiver
_piSenderTransactionId :: PayInfo -> Maybe TransactionId
_piTransactionStatus :: PayInfo -> Maybe TransactionStatus
_piTransactionId :: PayInfo -> Maybe TransactionId
data Receiver
Receiver :: Text -> Text -> Text -> Receiver

-- | Haven't converted this to Money yet because I'm not sure how to
--   determine its currency.
_reAmount :: Receiver -> Text
_reEmail :: Receiver -> Text
_reAccountId :: Receiver -> Text
newtype TransactionId
TransactionId :: Text -> TransactionId
_unTransactionId :: TransactionId -> Text
data TransactionStatus
TsCompleted :: TransactionStatus
TsPending :: TransactionStatus
TsCreated :: TransactionStatus
TsPartiallyRefunded :: TransactionStatus
TsDenied :: TransactionStatus
TsProcessing :: TransactionStatus
TsReversed :: TransactionStatus
TsRefunded :: TransactionStatus
TsFailed :: TransactionStatus
data Money
USD :: Int -> Money
_usdCents :: Money -> Int
m2Currency :: Money -> Text
m2PayPal :: Money -> String
clUserId :: Lens' Client Text
clSig :: Lens' Client Text
clPassword :: Lens' Client Text
clEnv :: Lens' Client Env
clAppId :: Lens' Client Text
clAccountEmail :: Lens' Client Text
crTransactionId :: Lens' CompletePayResp TransactionId
crSenderTransactionId :: Lens' CompletePayResp TransactionId
crReceiver :: Lens' CompletePayResp Receiver
crPayKey :: Lens' CompletePayResp PayKey
_AeShouldNotHappen :: Prism' AdaptiveErr (PayResp, Text)
_AeRefused :: Prism' AdaptiveErr PayResp
_AePending :: Prism' AdaptiveErr PayResp
_AeErrCodes :: Prism' AdaptiveErr [Int]
_AeNoSuchEmail :: Prism' AdaptiveErr ()
_AeInvalidCredentials :: Prism' AdaptiveErr ()
_AeDecodeFailed :: Prism' AdaptiveErr (ByteString, Text)
_AeConnectionErr :: Prism' AdaptiveErr Text
_Production :: Prism' Env ()
_Sandbox :: Prism' Env ()
_PePending :: Prism' PayExecStatus ()
_PeProcessing :: Prism' PayExecStatus ()
_PeReversalError :: Prism' PayExecStatus ()
_PeError :: Prism' PayExecStatus ()
_PeIncomplete :: Prism' PayExecStatus ()
_PeCompleted :: Prism' PayExecStatus ()
_PeCreated :: Prism' PayExecStatus ()
piTransactionStatus :: Lens' PayInfo (Maybe TransactionStatus)
piTransactionId :: Lens' PayInfo (Maybe TransactionId)
piSenderTransactionId :: Lens' PayInfo (Maybe TransactionId)
piReceiver :: Lens' PayInfo Receiver
prPayKey :: Lens' PayResp PayKey
prPayInfos :: Lens' PayResp [PayInfo]
prPayExecStatus :: Lens' PayResp PayExecStatus
prPayError :: Lens' PayResp (Maybe Text)
reEmail :: Lens' Receiver Text
reAmount :: Lens' Receiver Text
reAccountId :: Lens' Receiver Text
_TransactionId :: Iso' TransactionId Text
_TsFailed :: Prism' TransactionStatus ()
_TsRefunded :: Prism' TransactionStatus ()
_TsReversed :: Prism' TransactionStatus ()
_TsProcessing :: Prism' TransactionStatus ()
_TsDenied :: Prism' TransactionStatus ()
_TsPartiallyRefunded :: Prism' TransactionStatus ()
_TsCreated :: Prism' TransactionStatus ()
_TsPending :: Prism' TransactionStatus ()
_TsCompleted :: Prism' TransactionStatus ()
