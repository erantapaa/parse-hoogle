-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Statically-sized array wrappers with Storable instances
for FFI marshaling
--   
--   Uses type-level numeric literals to wrap arrays in a type that
--   statically fixes their size. The wrapper has a <tt>Storable</tt>
--   instance, for easy integration with fixed-size native arrays.
@package storable-static-array
@version 0.6.1.0


-- | <a>IxStatic</a> is a class that uses type-level constraints to
--   generate the values used by an <a>Ix</a> instance.
--   
--   This module contains instances of <a>IxStatic</a> for types of kind
--   <a>Nat</a>, types of the promoted kind '[<a>Nat</a>], and promoted
--   tuples of <a>Nat</a> up to 5 elements. This is the largest size of
--   tuple that has an <a>Ix</a> instance.
--   
--   There are also data types provided to simulate promoted tuples and
--   lists. These are less syntactically pleasant to use, but are sometimes
--   helpful. In particular, the single <tt>'</tt> used by promoted types
--   can interfere with <tt>CPP</tt> operation, so alternate means of
--   specifying multiple dimensions are provided.
module Data.Ix.Static

-- | This class connects dimension description types with <a>Ix</a> index
--   types and values.
class Ix (Index d) => IxStatic d where type family Index d :: *
taggedBounds :: IxStatic d => Tagged d (Index d, Index d)

-- | A conversion function for converting type-level naturals to
--   value-level. This is being exposed to aid in the creation of
--   additional <a>IxStatic</a> instances for those who might desire to do
--   so.
--   
--   Haddock is currently eating the important qualification that the type
--   variable <tt>n</tt> must have the kind <a>Nat</a>. The <a>SingI</a>
--   instance is automatically fulfilled for all types of kind <a>Nat</a>.
--   Its explicit presence in the signature is an artifact of how GHC
--   implements dictionary passing and type erasure.
fromNat :: SingI n => proxy n -> Int

-- | <a>:.</a> is provided as an alternative means of constructing a
--   type-level list of dimensions. <tt>DataKinds</tt>-promoted lists are
--   also supported and easier to use in almost all cases. The exception is
--   when <tt>CPP</tt> is involved, when a single <tt>'</tt> on a line
--   causes <tt>CPP</tt> to fail.
--   
--   With <tt>TypeOperators</tt> and <tt>DataKinds</tt> enabled,
--   <tt><tt>StaticArray</tt> <tt>UArray</tt> (2:.10:.25:.<a>Nil</a>)
--   <a>Int</a></tt> is equivalent to <tt><tt>StaticArray</tt>
--   <tt>UArray</tt> '[2,10,25] <a>Int</a></tt> and both wrap a
--   <tt><tt>UArray</tt> (<a>Int</a>,(<a>Int</a>,<a>Int</a>))
--   <a>Int</a></tt> with bounds <tt>((0,(0,0)),(1,(9,24)))</tt>.
--   
--   Neither promoted lists nor this approach support creating
--   0-dimensional arrays, because they make no sense with <a>Storable</a>.
data (:.) a b

-- | <a>Nil</a> is the terminator for type-level lists created with
--   <a>:.</a>
data Nil

-- | An alternative dimension type to promoted pairs, provided for
--   syntactic compatibility with <tt>CPP</tt>.
data D2 (a :: Nat) (b :: Nat)

-- | An alternative dimension type to promoted triples, provided for
--   syntactic compatibility with <tt>CPP</tt>.
data D3 (a :: Nat) (b :: Nat) (c :: Nat)

-- | An alternative dimension type to promoted 4-tuples, provided for
--   syntactic compatibility with <tt>CPP</tt>.
data D4 (a :: Nat) (b :: Nat) (c :: Nat) (d :: Nat)

-- | An alternative dimension type to promoted 5-tuples, provided for
--   syntactic compatibility with <tt>CPP</tt>.
data D5 (a :: Nat) (b :: Nat) (c :: Nat) (d :: Nat) (e :: Nat)
instance (SingI Nat a, SingI Nat b, SingI Nat c, SingI Nat d, SingI Nat e) => IxStatic * (D5 a b c d e)
instance (SingI Nat a, SingI Nat b, SingI Nat c, SingI Nat d) => IxStatic * (D4 a b c d)
instance (SingI Nat a, SingI Nat b, SingI Nat c) => IxStatic * (D3 a b c)
instance (SingI Nat a, SingI Nat b) => IxStatic * (D2 a b)
instance (SingI Nat n, IxStatic * ((:.) k k1 n2 ns)) => IxStatic * ((:.) Nat * n ((:.) k k1 n2 ns))
instance SingI Nat n => IxStatic * ((:.) Nat * n Nil)
instance (SingI Nat a, SingI Nat b, SingI Nat c, SingI Nat d, SingI Nat e) => IxStatic ((,,,,) Nat Nat Nat Nat Nat) ('(,,,,) Nat Nat Nat Nat Nat a b c d e)
instance (SingI Nat a, SingI Nat b, SingI Nat c, SingI Nat d) => IxStatic ((,,,) Nat Nat Nat Nat) ('(,,,) Nat Nat Nat Nat a b c d)
instance (SingI Nat a, SingI Nat b, SingI Nat c) => IxStatic ((,,) Nat Nat Nat) ('(,,) Nat Nat Nat a b c)
instance (SingI Nat a, SingI Nat b) => IxStatic ((,) Nat Nat) ('(,) Nat Nat a b)
instance (SingI Nat n, IxStatic [Nat] ((':) Nat n2 ns)) => IxStatic [Nat] ((':) Nat n ((':) Nat n2 ns))
instance SingI Nat n => IxStatic [Nat] ((':) Nat n ('[] Nat))
instance SingI Nat a => IxStatic Nat a


-- | This module defines <a>StaticArray</a>, a simple wrapper around arrays
--   with their dimensions in the type. <a>StaticArray</a> provides
--   <a>Storable</a> instances using the type-level dimensions. This eases
--   writing FFI bindings to fixed-size native arrays. For example,
--   <tt><a>StaticArray</a> <a>UArray</a> 10 CInt</tt> has a
--   <a>Storable</a> instance that is directly compatible with <tt>int
--   foo[10]</tt> in native code.
--   
--   Multidimensional native arrays are also supported.
--   <tt><a>StaticArray</a> <a>UArray</a> '(10,20,100) CUChar</tt> is
--   compatible with <tt>unsigned char foo[10][20][100]</tt>. Note the
--   leading <tt>'</tt> before the tuple containing the dimensions. It
--   marks it as a <tt>DataKinds</tt> promoted tuple, necessary to store
--   the dimensions.
--   
--   To operate on the contents of a <a>StaticArray</a>, use
--   <a>toArray</a>. <a>toArray</a> returns the backing array with the
--   correct type and index values already in place. For example, the
--   result of <a>toArray</a> on a <tt><a>StaticArray</a> <a>UArray</a>
--   '(10,20,100) CUChar</tt> is a <tt><a>UArray</a> (Int, Int, Int)
--   CUChar</tt> with its bounds set to <tt>((0,0,0),(9,19,99))</tt>.
module Foreign.Marshal.StaticArray

-- | A minimal array wrapper that encodes the full dimensions of the array
--   in the type. Intended for interfacing with (possibly-)multidimensional
--   arrays of fixed size in native code.
--   
--   The constructor is not exported to prevent creating a
--   <a>StaticArray</a> with a size that doesn't match its dimensions.
data StaticArray backing dimensions (elements :: *)

-- | Returns the backing value of this <a>StaticArray</a>.
toArray :: StaticArray backing dimensions elements -> backing (Index dimensions) elements

-- | Get the compile-time bounds from a <a>StaticArray</a>. Does not
--   examine its argument.
staticBounds :: IxStatic d => StaticArray b d e -> (Index d, Index d)

-- | Create a new <a>StaticArray</a> from a list of indices and elements.
--   This has all the semantic caveats of <a>array</a>, except that the
--   bounds are as good as those provided by the <a>IxStatic</a> instance.
staticArray :: (IArray b e, IxStatic d) => [(Index d, e)] -> StaticArray b d e

-- | Create a new <a>StaticArray</a> from a list of elements in index
--   order. Implemented in terms of <a>listArray</a>, with the same
--   caveats.
listStaticArray :: (IxStatic d, IArray b e) => [e] -> StaticArray b d e
instance [overlap ok] Eq (backing (Index k dimensions) elements) => Eq (StaticArray k backing dimensions elements)
instance [overlap ok] (IxStatic k d, Storable e, IArray UArray e, MArray IOUArray e IO) => Storable (StaticArray k UArray d e)
instance [overlap ok] (IxStatic k d, Storable e, IArray b e) => Storable (StaticArray k b d e)
instance [overlap ok] (IArray b e, IxStatic k d, Show e) => Show (StaticArray k b d e)


-- | This module defines <a>StaticVector</a>, a simple wrapper around
--   <a>Vector</a> with the dimensions in the type. <a>StaticVector</a>
--   provides a <a>Storable</a> instance using the type-level dimensions.
--   This eases writing FFI bindings to fixed-size native arrays.
--   
--   Support for interop with multi-dimensional native arrays is provided
--   via the <a>IxStatic</a> class. This results in the slightly unnatural
--   case where you might need to convert <a>Ix</a> coordinates to
--   <a>Vector</a> indices, but it felt like an acceptable tradeoff when
--   interfacing with multi-dimensional native arrays.
module Foreign.Marshal.StaticVector

-- | A minimal <a>Vector</a> wrapper that encodes the full dimensions of
--   the array in the type. Intended for interfacing with
--   (possibly-)multidimensional arrays of fixed size in native code.
--   
--   If this is used with multidimensional arrays, it will be up to users
--   to deal with converting <a>Ix</a> coordinates to internal
--   <a>Vector</a> indices.
--   
--   The constructor is not exported to prevent creating a
--   <a>StaticVector</a> with a size that doesn't match its dimensions.
data StaticVector backing dimensions (elements :: *)

-- | Returns the backing value of this <a>StaticVector</a>.
toVector :: StaticVector backing dimensions elements -> backing elements

-- | Get the compile-time bounds from a <a>StaticVector</a>. Does not
--   examine its argument.
staticBounds :: IxStatic d => StaticVector b d e -> (Index d, Index d)

-- | Get the compile-time size from a <a>StaticVector</a>. Does not examine
--   its argument.
staticSize :: IxStatic d => StaticVector b d e -> Int

-- | Create a new <a>StaticVector</a> with the contents of the list. If the
--   list passed in contains too many elements, the result will be
--   truncated. If it contains too few elements, they will be cycled to pad
--   out the remaining space. If it contains 0 elements, this will result
--   in an error.
fromList :: (Vector b e, IxStatic d) => [e] -> StaticVector b d e
instance [overlap ok] Eq (backing elements) => Eq (StaticVector k backing dimensions elements)
instance [overlap ok] (IxStatic k d, Storable e) => Storable (StaticVector k Vector d e)
instance [overlap ok] (IxStatic k d, Storable e, Vector b e) => Storable (StaticVector k b d e)
instance [overlap ok] (Vector b e, Show e) => Show (StaticVector k b d e)
