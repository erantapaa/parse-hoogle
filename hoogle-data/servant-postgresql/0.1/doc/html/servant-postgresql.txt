-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Useful functions and instances for using servant with a PostgreSQL context
--   
--   Useful functions and instances for using servant with a PostgreSQL
--   context
@package servant-postgresql
@version 0.1


-- | Useful functions and instances for using servant with a PostgreSQL
--   database.
--   
--   <ul>
--   <li>Use <a>contextOfConnInfo</a> or <a>contextOfConnStr</a> to create
--   a PostgreSQL <a>Context</a>s. * If you want connection-pooling, use
--   <a>pooledContextOfConnInfo</a> and <a>pooledContextOfConnStr</a>.</li>
--   </ul>
module Servant.Context.PostgreSQL

-- | Create a <tt><a>Context</a> <a>Connection</a></tt> from the given
--   <a>ConnectInfo</a>.
--   
--   This means a new connection will be fired whenever you perform a
--   database operation. If you want to avoid that, see the
--   <i>pooledContextOfXXX</i> functions.
contextOfConnInfo :: ConnectInfo -> Context Connection

-- | Create a <tt><a>Context</a> <a>Connection</a></tt> from the given
--   connection string.
--   
--   This means a new connection will be fired whenever you perform a
--   database operation. If you want to avoid that, see the
--   <i>pooledContextOfXXX</i> functions.
contextOfConnStr :: ByteString -> Context Connection

-- | Create a <a>Context</a> that'll use a <tt>Pool</tt> of PostgreSQL
--   <a>Connection</a>s internally, from a <a>ConnectInfo</a> value.
pooledContextOfConnInfo :: Int -> NominalDiffTime -> Int -> ConnectInfo -> IO (Context Connection)

-- | Create a <a>Context</a> that'll use a <tt>Pool</tt> of PostgreSQL
--   <a>Connection</a>s internally, from a connection string (a
--   <a>ByteString</a>).
pooledContextOfConnStr :: Int -> NominalDiffTime -> Int -> ByteString -> IO (Context Connection)


-- | An helpful wrapper around <a>Int64</a> that you can tie to the
--   standard response types in <a>Servant.Response.Prelude</a> with the
--   instances defined in this module.
module Servant.PostgreSQL.Prelude

-- | A wrapper around <a>Int64</a>, which is what PG hands us back when
--   running <a>execute</a>.
--   
--   The <tt>o</tt> type parameter lets us tag the result with the
--   operation that we're running. This lets us turn results into a proper
--   response (response body + status) differently for <a>Add</a> and
--   <a>Update</a> for example.
data PGResult o

-- | Class of types that can be converted to a <a>PGResult</a>.
--   
--   This package provides instances for <a>Int64</a> and <tt>[<a>Only</a>
--   <a>Int</a>]</tt>
class ToPGResult r
fromRes :: ToPGResult r => r -> PGResult o

-- | Run a database action and convert its result to a <a>PGResult</a>.
--   
--   This will only typecheck on queries that return <a>Int64</a> or
--   <tt>[<a>Only</a> <a>Int</a>]</tt>, or a custom type of yours for which
--   you provide a <a>ToPGResult</a> instance.
toPGResult :: ToPGResult r => IO r -> IO (PGResult o)

-- | Run an <a>IO</a> action that returns <tt>[<a>Only</a> <a>Int</a>]</tt>
--   and convert the result to a <a>PGResult</a>.
pgresultOfInts :: IO [Only Int] -> IO (PGResult o)

-- | Run an <a>IO</a> action that returns <a>Int64</a> and convert the
--   result to a <a>PGResult</a>.
pgresultOfInt64 :: IO Int64 -> IO (PGResult o)
instance Eq (PGResult o)
instance Ord (PGResult o)
instance Num (PGResult o)
instance Show (PGResult o)
instance Response (UpdateResponse Update) (PGResult Update)
instance Response (UpdateResponse Delete) (PGResult Delete)
instance Response (UpdateResponse Add) (PGResult Add)
instance ToPGResult [Only Int]
instance ToPGResult Int64
