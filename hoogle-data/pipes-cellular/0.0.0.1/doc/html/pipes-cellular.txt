-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pipes-based combinators for cellular data processing
--   
--   This library provides a number of miscellaneous utilities for
--   pipes-based processing of cellular data.
@package pipes-cellular
@version 0.0.0.1


-- | Conversion between finite and infinite pipe using the <a>Either</a>
--   type.
module Pipes.Either

-- | A pipe that receives and forwards all <a>Left</a> values in its input
--   up to the first occurence of a 'Right r' value, returning the value
--   <tt>r</tt>.
catWhileLeft :: Monad m => Pipe (Either a r) a m r

-- | A pipe that receives and forwards all <a>Right</a> values in its input
--   up to the first occurence of a 'Left r' value, returning the value
--   <tt>r</tt>.
catWhileRight :: Monad m => Pipe (Either r a) a m r

-- | Converts a finite pipe into an infinite pipe, in which the original
--   pipe's values are followed by an infinite stream of 'Left r'.
extendWithLeft :: Monad m => Pipe a b m r -> Pipe a (Either r b) m r'

-- | Converts a finite pipe into an infinite pipe, in which the original
--   pipe's values are followed by an infinite stream of 'Right r'.
extendWithRight :: Monad m => Pipe a b m r -> Pipe a (Either b r) m r'


-- | Conversion between finite and infinite pipe using the <a>Either</a>
--   type.
module Pipes.Maybe

-- | A pipe that receives and forwards all <a>Just</a> values in its input
--   up to the first occurence of <a>Nothing</a>.
catWhileJust :: Monad m => Pipe (Maybe a) a m ()

-- | Converts a finite pipe into an infinite pipe, in which the original
--   pipe's values are followed by an infinite stream of <a>Nothing</a>.
extendWithNothing :: Monad m => Pipe a b m r -> Pipe a (Maybe b) m r'


-- | Pipes converting between cellular and traditional tabular data.
module Pipes.Cell

-- | An infinite pipe that converts a stream of cells into a stream of
--   rows, with each row represented by a non-empty list of cell values.
toRows :: (Monad m, Monoid a) => Pipe (Cell a) [a] m ()

-- | An infinite pipe that converts a stream of rows to a stream of cells.
fromRows :: Monad m => Pipe [a] (Cell a) m r


-- | When binary data is streamed through a pipe, it's often partitioned
--   arbitrarily into <i>packets</i> with no semantic significance, beyond
--   facilitation of processing in constant space. This is similar to the
--   chunking mechanism within lazy bytestrings, and, accordingly, it's
--   often convenient to unify the two mechanisms, by converting between
--   pipes over lazy bytestrings and pipes over strict chunks these
--   bytestrings. This module provides efficient implementations of these
--   conversions.
module Pipes.ByteString.Chunks

-- | An infinite pipe that converts lazy bytestring input into strict
--   bytestring chunk output.
toChunks :: Monad m => Pipe ByteString ByteString m r

-- | An infinite pipe that converts strict bytestrings into lazy
--   bytestrings with the specified minimum and maximum size, without
--   copying any data.
fromChunks :: Monad m => Int64 -> Int64 -> Pipe ByteString ByteString m r
