-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An FRP-based game engine written in Haskell.
--   
@package spice
@version 0.5.0.0


-- | This module re-exports the core elements of the library, along with
--   all of the types housed within the library.
module FRP.Spice

-- | Creating a <tt><a>LoadAsset</a></tt> call to load a
--   <tt><a>Sprite</a></tt>.
loadSpriteAsset :: FilePath -> LoadAssets

-- | Binding a color to change the current OpenGL color.
bindColor :: Color -> Scene

-- | Constructing a color from 4 <tt><a>Float</a></tt>s.
color4f :: Float -> Float -> Float -> Float -> Color

-- | Constructing a color from 3 <tt><a>Float</a></tt>s, with the alpha
--   channel defaulting to its maximum (of 1.0).
color3f :: Float -> Float -> Float -> Color

-- | Constructing a color from 4 <tt><a>Int</a></tt>s.
color4i :: Int -> Int -> Int -> Int -> Color

-- | Constructing a color from 3 <tt><a>Int</a></tt>s, with the alpha
--   channel defaulting to its maximum (of 255).
color3i :: Int -> Int -> Int -> Color

-- | The color black.
black :: Color

-- | The color white.
white :: Color

-- | The color gray.
grey :: Color

-- | A synonym for the color grey.
gray :: Color

-- | The color red.
red :: Color

-- | The color green.
green :: Color

-- | The color blue.
blue :: Color

-- | Rendering a position.
renderPoint :: Vector Float -> Scene

-- | Rendering a line.
renderLine :: Vector Float -> Vector Float -> Scene

-- | Rendering a triangle.
renderTriangle :: Vector Float -> Vector Float -> Vector Float -> Scene

-- | Rendering a rectangle.
renderRectangle :: Vector Float -> Vector Float -> Scene

-- | Rendering a square.
renderSquare :: Vector Float -> Float -> Scene

-- | Rendering a polygon of any n sides.
renderPolygon :: [Vector Float] -> Scene

-- | Rendering a <tt><a>Sprite</a></tt> at the position specified.
renderSprite :: Sprite -> Vector Float -> Scene

-- | Rendering a <tt><a>Sprite</a></tt> at the position specified with the
--   size specified.
renderSpriteWithSize :: Sprite -> Vector Float -> Vector Float -> Scene

-- | Starting the engine with window parameters described within the
--   provided <tt><a>WindowConfig</a></tt>.
startEngine :: Game a => WindowConfig -> a -> IO ()

-- | Starting the engine with default window parameter.
startEngineDefault :: Game a => a -> IO ()

-- | A data type that can be composed (so long as the data stored is a
--   Monoid) in do-notation.
data DoListT a b
DoListT :: a -> b -> DoListT a b

-- | A type synonym for the <tt><a>DoListT</a></tt> that should be used.
type DoList a = DoListT a ()

-- | A Functor instance to satisfy the Applicative's requirements.

-- | An Applicative instance to satisfy the Monad's requirements in the
--   future.

-- | The Monad instance to allow the DoList to compose through do-notation.

-- | The config that is used to define the GLFW window's properties.
data WindowConfig
WindowConfig :: Int -> Int -> Bool -> String -> WindowConfig
getWindowWidth :: WindowConfig -> Int
getWindowHeight :: WindowConfig -> Int
getWindowFullscreen :: WindowConfig -> Bool
getWindowTitle :: WindowConfig -> String

-- | The default state for a <tt><a>WindowConfig</a></tt>.

-- | A data type representing a color as 4 floats (r, g, b, a) representing
--   red, green, blue, and the alpha channel respectively. The floats
--   should range from 0 to 1, representing 0 to 255 in more classical
--   representations.
data Color
Color :: Float -> Float -> Float -> Float -> Color
colorRed :: Color -> Float
colorGreen :: Color -> Float
colorBlue :: Color -> Float
colorAlpha :: Color -> Float

-- | A data type that stores two values. It can be used to perform basic
--   vector logic. It should be noted that the <tt><a>Vector</a></tt> logic
--   provided in this library is not linear-algebra style vector logic.
data Vector a
Vector :: a -> a -> Vector a

-- | The default state for a <tt><a>Vector</a></tt>.

-- | A functor instance to apply a function onto both values stored in a
--   <tt><a>Vector</a></tt>.

-- | An applicative instance to allow one to write functions on
--   <tt><a>Vector</a></tt>s that have separate functions for both values.

-- | A wrapper around the sinks for the mouse position, mouse buttons, and
--   keyboard keys.
data Sinks
Sinks :: (Vector Float -> IO ()) -> Map MouseButton (Bool -> IO ()) -> Map Key (Bool -> IO ()) -> Sinks
mousePosSink :: Sinks -> Vector Float -> IO ()
mouseButtonSink :: Sinks -> Map MouseButton (Bool -> IO ())
keySink :: Sinks -> Map Key (Bool -> IO ())

-- | A data structure that represents the current state of the input. Used
--   in the <tt><a>InputContainer</a></tt> along with the
--   <tt><a>Sink</a></tt> to handle all input -- updating and referencing.
data Input
Input :: Vector Float -> Map MouseButton Bool -> Map Key Bool -> Input
mousePos :: Input -> Vector Float
mouseButton :: Input -> Map MouseButton Bool
key :: Input -> Map Key Bool

-- | The container for both <tt><a>Sink</a></tt> and <tt><a>Input</a></tt>.
--   The <tt><a>Input</a></tt> is stored within a <tt><a>Signal</a></tt> so
--   it may be used within the FRP/Elerea part of the framework.
data InputContainer
InputContainer :: Sinks -> Signal Input -> InputContainer
getSinks :: InputContainer -> Sinks
getInput :: InputContainer -> Signal Input

-- | Containing all of the necessary information for rendering an image on
--   screen (aside from the position where the sprite should be rendered.)
data Sprite
Sprite :: TextureObject -> Vector Float -> Sprite
spriteTex :: Sprite -> TextureObject
spriteSize :: Sprite -> Vector Float

-- | Representing the loading of an asset into the game framework.
data LoadAsset
LoadSprite :: FilePath -> LoadAsset

-- | A <tt><a>DoList</a></tt> synonym for <tt><a>LoadAsset</a></tt>.
type LoadAssets = DoList [LoadAsset]

-- | Storing the loaded assets in a single data structure.
data Assets
Assets :: Map FilePath Sprite -> Assets
sprites :: Assets -> Map FilePath Sprite

-- | The default state for an <tt><a>Assets</a></tt>.

-- | A type synonym to imply that functions performed in this function
--   should solely render.
type Scene = IO ()

-- | A type synonym to make the delta time (in the <tt><a>Game</a></tt>
--   definition) more self documenting.
type DeltaTime = Float

-- | The requirements for a given data structure to be used as a game
--   within the framework.
class Game a
update :: Game a => DeltaTime -> Input -> a -> a
render :: Game a => Assets -> a -> Scene
loadAssets :: Game a => a -> LoadAssets

-- | The cardinal directions.
up :: Num a => Vector a

-- | The cardinal directions.
right :: Num a => Vector a

-- | The cardinal directions.
left :: Num a => Vector a

-- | The cardinal directions.
down :: Num a => Vector a

-- | Adding two <tt><a>Vector</a></tt>s.
(^+) :: Num a => Vector a -> Vector a -> Vector a

-- | Subtracting a <tt><a>Vector</a></tt> from another
--   <tt><a>Vector</a></tt>.
(^-) :: Num a => Vector a -> Vector a -> Vector a

-- | Multiplying two <tt><a>Vector</a></tt>s (not a dot product, but rather
--   multiplying the first value in the first vector by the second value in
--   the second vector, and the same with with the second value.)
(^*) :: Num a => Vector a -> Vector a -> Vector a

-- | The dot product of two <tt><a>Vector</a></tt>s.
(^.) :: Num a => Vector a -> Vector a -> a

-- | Adding a <tt><a>Vector</a></tt> and a given number. Effectively the
--   same as calling (^+) on a <tt><a>Vector</a></tt> and a
--   <tt><a>Vector</a></tt> n n.
(^+>) :: Num a => Vector a -> a -> Vector a

-- | Subtracting a number from a <tt><a>Vector</a></tt>. Effectively the
--   same as calling (^-) on a <tt><a>Vector</a></tt> and a
--   <tt><a>Vector</a></tt> n n.
(^->) :: Num a => Vector a -> a -> Vector a

-- | Multiplying a <tt><a>Vector</a></tt> by a given number. Effecitvely
--   the same as calling (^*) on a <tt><a>Vector</a></tt> and a
--   <tt><a>Vector</a></tt> n n.
(^*>) :: Num a => Vector a -> a -> Vector a

-- | The dot product of two <tt><a>Vector</a></tt>s.
(^.>) :: Num a => Vector a -> a -> a
