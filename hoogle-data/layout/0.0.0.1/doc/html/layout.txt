-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Turn values into pretty text or markup
--   
--   A library for turning values into text or markup. Flexibility is
--   achieved by separating the semantics from the formatting
--   implementation. This way, a function can output, for example, a table,
--   which can then be rendered to any format. This library provides
--   <a>standard</a> objects that can be formatted, in module
--   <tt>Text.Layout.Objects</tt>. It also provides data types for a few
--   formats. These data types are glued together with instances of
--   <tt>Convertible</tt>
@package layout
@version 0.0.0.1

module Text.Layout.DisplayLatex
newtype DisplayLatex
DisplayLatex :: String -> DisplayLatex
fromDisplayLatex :: DisplayLatex -> String

-- | Shortcut for convert
dltx :: Convertible a DisplayLatex => a -> DisplayLatex
instance Convertible DisplayLatex DisplayLatex
instance Show DisplayLatex

module Text.Layout.Objects
data Table a b c
Table :: String -> (String, String) -> [((a, b), c)] -> Table a b c
tableCaption :: Table a b c -> String
tableAxes :: Table a b c -> (String, String)
tableValues :: Table a b c -> [((a, b), c)]
instance Functor (Table a b)

module Text.Layout.Class
class Monoid format => IsFormat format
formatVerbatim :: IsFormat format => String -> format
fromShow :: (IsFormat format, Show a) => a -> format
class IsFormat format => Layout a format
format :: Layout a format => a -> format
formatList :: Layout a format => [a] -> format

module Text.Layout.DisplayText
newtype DisplayText
DisplayText :: String -> DisplayText
fromDisplayText :: DisplayText -> String

-- | Shortcut for <tt>(Layout :: a -&gt; DisplayText)</tt>
dt :: Layout a DisplayText => a -> DisplayText
instance (Layout a DisplayText, Layout b DisplayText, Layout c DisplayText) => Layout (Table a b c) DisplayText
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h, Show i) => Layout (a, b, c, d, e, f, g, h, i) DisplayText
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h) => Layout (a, b, c, d, e, f, g, h) DisplayText
instance (Show a, Show b, Show c, Show d, Show e, Show f, Show g) => Layout (a, b, c, d, e, f, g) DisplayText
instance (Show a, Show b, Show c, Show d, Show e, Show f) => Layout (a, b, c, d, e, f) DisplayText
instance (Show a, Show b, Show c, Show d, Show e) => Layout (a, b, c, d, e) DisplayText
instance (Show a, Show b, Show c, Show d) => Layout (a, b, c, d) DisplayText
instance (Show a, Show b, Show c) => Layout (a, b, c) DisplayText
instance (Show a, Show b) => Layout (a, b) DisplayText
instance (Show a, Show b) => Layout (Either a b) DisplayText
instance Show a => Layout (Maybe a) DisplayText
instance Show (Ratio a) => Layout (Ratio a) DisplayText
instance Layout Double DisplayText
instance Layout Float DisplayText
instance Layout Int DisplayText
instance Layout Integer DisplayText
instance Layout () DisplayText
instance Layout a DisplayText => Convertible a DisplayText
instance Layout a DisplayText => Layout [a] DisplayText
instance Layout Char DisplayText
instance Layout DisplayText DisplayText
instance IsFormat DisplayText
instance Monoid DisplayText
instance Show DisplayText

module Text.Layout
instance Convertible DisplayHtml DisplayHtml
