-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Posix utilities for the uniform workbench
--   
--   posix utilities
@package uni-posixutil
@version 2.2.1.1


-- | Module that should also compile on Windows for blocking sigPIPE on
--   Unix, something you need to do to avoid the entire system crashing
--   when a pipe is closed.
module Posixutil.BlockSigPIPE
blockSigPIPE :: IO ()


-- | ProcessClasses describes some classes which tools encapsulating
--   processes may instance.
module Posixutil.ProcessClasses
type ToolStatus = Maybe ExitCode
class Tool t
getToolStatus :: Tool t => t -> IO ToolStatus
class SingleInstanceTool t
getToolInstance :: SingleInstanceTool t => IO t
class Tool t => CommandTool t where execCmd cmd t = do { _ <- evalCmd cmd t; return () }
evalCmd :: CommandTool t => String -> t -> IO String
execCmd :: CommandTool t => String -> t -> IO ()
execOneWayCmd :: CommandTool t => String -> t -> IO ()


-- | Calling other programs.
--   
--   This module now serves basically as an interface to GHC's new
--   System.Process module.
module Posixutil.ChildProcess

-- | A running process
data ChildProcess

-- | Describes configuration options for the process.
data PosixProcess

-- | Status if a process
data ChildProcessStatus
ChildExited :: ExitCode -> ChildProcessStatus
ChildTerminated :: ChildProcessStatus

-- | If <a>True</a>, <a>readMsg</a> returns lines, otherwise it returs the
--   first input that's available
linemode :: Bool -> Config PosixProcess

-- | Set command arguments
arguments :: [String] -> Config PosixProcess

-- | Append command arguments
appendArguments :: [String] -> Config PosixProcess

-- | Set the process' environment.
environment :: [(String, String)] -> Config PosixProcess
standarderrors :: Bool -> Config PosixProcess

-- | Set a <a>challenge</a> and <a>response</a>. This is used as a test
--   when the tool starts up, to make sure that everything is working
--   properly.
challengeResponse :: (String, String) -> Config PosixProcess

-- | The name of the tool, used in error messages and in the debug file.
toolName :: String -> Config PosixProcess

-- | Starting a new <a>ChildProcess</a>
newChildProcess :: FilePath -> [Config PosixProcess] -> IO ChildProcess

-- | Sends a String to the ChildProcess, adding a new line for line mode.
sendMsg :: ChildProcess -> String -> IO ()

-- | Writes a CStringLen to the child process. It does not append a
--   newline.
sendMsgRaw :: ChildProcess -> CStringLen -> IO ()

-- | Reads a string from the ChildProcess
readMsg :: ChildProcess -> IO String

-- | Waits for the ChildProcess to exit or be terminated
waitForChildProcess :: ChildProcess -> IO ChildProcessStatus
instance Eq ChildProcessStatus
instance Ord ChildProcessStatus
instance Show ChildProcessStatus
instance Tool ChildProcess
instance Destroyable ChildProcess
instance Object ChildProcess


-- | SafeSystem.safeSystem executes a command (supplied as a String) and
--   returns its exit code. It differs from System.system in that it does
--   NOT stop the world while doing this, so that other threads can run.
--   How it works: we use ChildProcess to run the runCommand C program, and
--   feed it the command over stdin. Ugly, but is there a better way?
module Posixutil.SafeSystem

-- | Run "command", displaying any output using the supplied outputSink
--   function. (This output had better not include "EXITCODE [number]".)
--   
--   outputSink is fed output line by line, and without the newlines.
safeSystemGeneral :: String -> (String -> IO ()) -> IO ExitCode
safeSystem :: String -> IO ExitCode


-- | This contains functions for copying to and from files
module Posixutil.CopyFile
copyFile :: String -> String -> IO ()
copyFileWE :: String -> String -> IO (WithError ())
copyStringToFile :: String -> FilePath -> IO ()

-- | Write to a file, catching certain errors. (At the moment this is not
--   very helpful, returning messages like "system error").
copyStringToFileCheck :: String -> FilePath -> IO (WithError ())

-- | Reads in a file to a String. NB - differs from readFile in that this
--   is done instantly, so we don't have to worry about semi-closed handles
--   hanging around.
copyFileToString :: FilePath -> IO String

-- | Read in a file, catching certain errors
copyFileToStringCheck :: FilePath -> IO (WithError String)
copyICStringLenToFile :: ICStringLen -> FilePath -> IO ()
copyFileToICStringLenCheck :: FilePath -> IO (WithError ICStringLen)
copyCStringLenToFile :: CStringLen -> FilePath -> IO ()
copyFileToCStringLen :: FilePath -> IO CStringLen
copyFileToICStringLen :: FilePath -> IO ICStringLen
