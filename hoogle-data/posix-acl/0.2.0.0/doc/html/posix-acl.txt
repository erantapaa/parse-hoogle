-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Support for Posix ACL
--   
@package posix-acl
@version 0.2.0.0


-- | Functions in this module are bindings to the C API defined in <a>IEEE
--   Std 1003.1e</a>. The design goal is to be as low level as possible
--   without having to allocate or deallocate memory, and remaining
--   type-safe. In order to reach this goal, all pointers to opaque C
--   structures are represented by monad transformers representing actions
--   on those pointers. Here is the pointer to monad transformer
--   correspondence:
--   
--   <pre>
--   acl_t         &lt;--&gt; <a>AclT</a>
--   acl_entry_t   &lt;--&gt; <a>EntryT</a>
--   acl_permset_t &lt;--&gt; <a>PermsetT</a>
--   </pre>
--   
--   A common usage pattern is to modify the permset of an entry inside an
--   ACL. This is done in three steps:
--   
--   <ol>
--   <li>convert the <tt><a>PermsetT</a> m a</tt> modification of permset
--   into an <tt><a>EntryT</a> m a</tt> modification of entry;</li>
--   <li>convert the <tt><a>EntryT</a> m a</tt> into an <tt><a>AclT</a> m
--   a</tt> modification of ACL;</li>
--   <li>execute the <tt><a>AclT</a> m a</tt> in the base monad
--   <tt>m</tt>.</li>
--   </ol>
--   
--   For example in
--   
--   <pre>
--   <a>fromText</a> "u::rw,g::r,o::r" $ <a>getEntry</a> 0 $ <a>changePermset</a> $ <a>addPerm</a> <a>Execute</a>
--   </pre>
--   
--   <tt><a>addPerm</a> <a>Execute</a></tt> is the <tt><a>PermsetT</a></tt>
--   that adds the execute permission, <tt><a>changePermset</a></tt>
--   converts <tt><a>PermsetT</a></tt> into <tt><a>EntryT</a></tt>,
--   <tt><a>getEntry</a> 0</tt> modifies the 1st entry of the ACL according
--   to the action contained in <tt><a>EntryT</a></tt> (thus converts
--   <tt><a>EntryT</a></tt> into <tt><a>AclT</a></tt>), and finally
--   <tt><a>fromText</a> "u::rw,g::r,o::r"</tt> runs the
--   <tt><a>AclT</a></tt> action on the ACL represented by the short text
--   form <tt>u::rw,g::r,o::r</tt>. In words, it adds execute permission to
--   the 1st entry of <tt>u::rw,g::r,o::r</tt>, producing
--   <tt>u::rwx,g::r,o::r</tt>.
module System.Posix.ACL.C

-- | Action to be performed on an ACL. The action contained in the
--   transformer <tt><a>AclT</a></tt> can be executed in the base monad
--   using one of the functions <tt><a>newACL</a></tt>,
--   <tt><a>getFdACL</a></tt>, <tt><a>getFileACL</a></tt>,
--   <tt><a>fromExt</a></tt> or <tt><a>fromText</a></tt>.
data AclT m a

-- | Run the given action on a newly created ACL with enough preallocated
--   memory to hold <tt>n</tt> entries. Use <tt><a>createEntry</a></tt> to
--   create entries in the preallocated memory.
--   
--   Call to <tt>acl_init()</tt>.
newACL :: MonadBaseControl IO m => Int -> AclT m a -> m a

-- | Create a copy of the current ACL and run the given action on the
--   duplicate. For example
--   
--   <pre>
--   <a>fromText</a> "u::rw,g::r,o::r" $ <a>dupACL</a> (<a>calcMask</a> &gt;&gt; <a>toText</a> &gt;&gt;= <a>lift</a> . <a>print</a>) &gt;&gt; <a>toText</a> &gt;&gt;= <a>lift</a> . <a>print</a>
--   </pre>
--   
--   copies the ACL represented by <tt>u::rw,g::r,o::r</tt> to a new ACL,
--   calculates and sets the permissions of <tt><a>Mask</a></tt> (see
--   <tt><a>calcMask</a></tt>) in the newly created ACL and prints out the
--   result. It also prints out the original ACL.
--   
--   Call to <tt>acl_dup()</tt>.
dupACL :: MonadBaseControl IO m => AclT m a -> AclT m a

-- | Action to be performed on an ACL entry. In order to execute the action
--   contained in the <tt><a>EntryT</a></tt> transformer in the base monad,
--   <tt><a>EntryT</a></tt> must first be converted into
--   <tt><a>AclT</a></tt> using one of the functions
--   <tt><a>createEntry</a></tt>, <tt><a>getEntries</a></tt> or
--   <tt><a>getEntry</a></tt>.
data EntryT m a

-- | Create a new entry in the ACL an run the given action on it. If
--   necessary, the ACL will allocate memory for the new entry.
--   
--   Call to <tt>acl_create_entry()</tt>.
createEntry :: MonadBase IO m => EntryT m a -> AclT m a

-- | Run the list of given actions on the list of entries of the ACL.
--   
--   <i>Warning</i>: using <tt><a>setTag</a></tt> as one of the
--   <tt><a>EntryT</a></tt>s of <tt><a>getEntries</a></tt> is not
--   recommended, as it may rearrange the list of entries inside the ACL,
--   yielding unexpected results.
--   
--   Call to <tt>acl_get_entry()</tt>.
getEntries :: MonadBase IO m => [EntryT m a] -> ListT (AclT m) a

-- | Run the given action on the <tt>n</tt>-th entry of the ACL (entry
--   enumeration begins from 0).
--   
--   Call to <tt>acl_get_entry()</tt>.
getEntry :: MonadBase IO m => Int -> EntryT m a -> AclT m a

-- | Copy the contents of an ACL entry to an existing ACL entry of a
--   possibly different ACL. For example
--   
--   <pre>
--   <a>fromText</a> "u::rw,u:2:rwx,g::r,m:rwx,o::r" $ <a>getEntry</a> 1 $ <a>fromText</a> "u::rw,u:1:rw,u:8:rw,g::r,m:rwxo::r" (<a>getEntry</a> 2 <a>copyEntry</a> &gt;&gt; <a>toText</a>)
--   </pre>
--   
--   copies the 2nd entry of <tt>u::rw,u:2:rwx,g::r,m:rwx,o::r</tt> (namely
--   <tt>u:2:rwx</tt>) into the 3rd entry of
--   <tt>u::rw,u:1:rw,u:8:rw,g::r,m:rwxo::r</tt> (namely <tt>u:8:rw</tt>)
--   and prints the result.
--   
--   Call to <tt>acl_copy_entry()</tt>.
copyEntry :: MonadBase IO m => EntryT (EntryT m) ()

-- | Delete the entry.
--   
--   Call to <tt>acl_delete_entry()</tt>.
--   
--   <i>Warning</i>: no further action should be performed on this entry.
deleteEntry :: MonadBase IO m => EntryT m ()

-- | Run a validity check on the ACL (see <tt>acl_valid()</tt> in section
--   23.4.28 of <a>IEEE Std 1003.1e</a>).
--   
--   Call to <tt>acl_valid()</tt>.
valid :: MonadBase IO m => AclT m Bool

-- | Action to be performed on the permission set of an ACL entry. In order
--   to execute the action contained in the <tt><a>PermsetT</a></tt>
--   transformer in the base monad, <tt><a>PermsetT</a></tt> must first be
--   converted into <tt><a>EntryT</a></tt> using
--   <tt><a>changePermset</a></tt>, and then into <tt><a>AclT</a></tt>.
data PermsetT m a

-- | A single permission.
data Perm
Read :: Perm
Write :: Perm
Execute :: Perm

-- | Change the permission set of the entry.
--   
--   Call to <tt>acl_get_permset()</tt> and <tt>acl_set_permset()</tt>.
changePermset :: MonadBase IO m => PermsetT m a -> EntryT m a

-- | Add a specific permission.
--   
--   Call to <tt>acl_add_perm()</tt>.
addPerm :: MonadBase IO m => Perm -> PermsetT m ()

-- | Calculate and set the permissions associated with the
--   <tt><a>Mask</a></tt> ACL entry of the ACL. The value of the new
--   permissions is the union of the permissions granted by all entries of
--   tag type <tt><a>Group</a></tt>, <tt><a>GroupObj</a></tt>, or
--   <tt><a>User</a></tt>. If the ACL already contains a
--   <tt><a>Mask</a></tt> entry, its permissions are overwritten; if it
--   does not contain a <tt><a>Mask</a></tt> entry, one is added.
--   
--   Call to <tt>acl_calc_mask()</tt>.
calcMask :: MonadBase IO m => AclT m ()

-- | Clear all permissions from the permission set.
--   
--   Call to <tt>acl_clear_perms()</tt>.
clearPerms :: MonadBase IO m => PermsetT m ()

-- | Remove a specific permission.
--   
--   Call to <tt>acl_delete_perm()</tt>.
deletePerm :: MonadBase IO m => Perm -> PermsetT m ()

-- | Tag type and qualifier of an ACL.
data Tag
UserObj :: Tag
User :: UserID -> Tag
tagUserID :: Tag -> UserID
GroupObj :: Tag
Group :: GroupID -> Tag
tagGroupID :: Tag -> GroupID
Mask :: Tag
Other :: Tag
Undefined :: Tag

-- | Get the entry's tag.
--   
--   Call to <tt>acl_get_tag_type()</tt> and possibly
--   <tt>acl_get_qualifier()</tt>.
getTag :: MonadBase IO m => EntryT m Tag

-- | Set the tag of the entry.
--   
--   Call to <tt>acl_set_tag_type()</tt> and possibly
--   <tt>acl_set_qualifier()</tt>.
--   
--   <i>Warning</i>: using <tt><a>setTag</a></tt> may rearrange the list of
--   entries inside the ACL, yielding unexpected results when used together
--   with <tt><a>getEntries</a></tt>.
setTag :: MonadBase IO m => Tag -> EntryT m ()

-- | The type of an ACL (see section 23.1.3 of <a>IEEE Std 1003.1e</a>).
data Type
Access :: Type
Default :: Type

-- | Delete the default ACL from a directory.
--   
--   Call to <tt>acl_delete_def_file()</tt>.
deleteDefaultACL :: FilePath -> IO ()

-- | Run the action on the ACL of the given file descriptor.
--   
--   Call to <tt>acl_get_fd()</tt>.
getFdACL :: MonadBaseControl IO m => Fd -> AclT m a -> m a

-- | Run the action on the ACL of type <tt><a>Type</a></tt> of the given
--   file.
--   
--   Call to <tt>acl_get_file()</tt>.
getFileACL :: MonadBaseControl IO m => FilePath -> Type -> AclT m a -> m a

-- | Set the ACL of the given file descriptor.
--   
--   Call to <tt>acl_set_fd()</tt>.
setFdACL :: MonadBase IO m => Fd -> AclT m ()

-- | Set the ACL of type <tt><a>Type</a></tt> of the given file.
--   
--   Call to <tt>acl_set_file()</tt>.
setFileACL :: MonadBase IO m => FilePath -> Type -> AclT m ()

-- | The <i>external representation</i> of an ACL is an unspecified binary
--   format stored in a contiguous portion of memory.
data ExtRepr

-- | Return the external representation of the ACL.
--   
--   Call to <tt>acl_copy_ext()</tt> and <tt>acl_size()</tt>.
copyExt :: MonadBase IO m => AclT m ExtRepr

-- | Run the given action on an ACL created according to the given external
--   representation.
--   
--   Call to <tt>acl_copy_int()</tt>.
fromExt :: MonadBaseControl IO m => ExtRepr -> AclT m a -> m a

-- | Run the given action on an ACL created according to the given textual
--   representation (both the <i>Long Text Form</i> and <i>Short Text
--   Form</i> are accepted).
--   
--   Call to <tt>acl_from_text()</tt>.
fromText :: MonadBaseControl IO m => String -> AclT m a -> m a

-- | Return the <i>Long Text Form</i> of the ACL (section 23.3.1 of <a>IEEE
--   Std 1003.1e</a>).
--   
--   Call to <tt>acl_to_text()</tt>.
toText :: MonadBase IO m => AclT m String
instance Eq Perm
instance Read Perm
instance Show Perm
instance Eq Type
instance Read Type
instance Show Type
instance Eq Tag
instance Read Tag
instance Show Tag
instance Alternative m => Alternative (AclT m)
instance Applicative m => Applicative (AclT m)
instance Functor m => Functor (AclT m)
instance Monad m => Monad (AclT m)
instance MonadBase b m => MonadBase b (AclT m)
instance MonadFix m => MonadFix (AclT m)
instance MonadIO m => MonadIO (AclT m)
instance MonadPlus m => MonadPlus (AclT m)
instance MonadTrans AclT
instance Alternative m => Alternative (EntryT m)
instance Applicative m => Applicative (EntryT m)
instance Functor m => Functor (EntryT m)
instance Monad m => Monad (EntryT m)
instance MonadBase b m => MonadBase b (EntryT m)
instance MonadFix m => MonadFix (EntryT m)
instance MonadIO m => MonadIO (EntryT m)
instance MonadPlus m => MonadPlus (EntryT m)
instance MonadTrans EntryT
instance Alternative m => Alternative (PermsetT m)
instance Applicative m => Applicative (PermsetT m)
instance Functor m => Functor (PermsetT m)
instance Monad m => Monad (PermsetT m)
instance MonadBase b m => MonadBase b (PermsetT m)
instance MonadFix m => MonadFix (PermsetT m)
instance MonadIO m => MonadIO (PermsetT m)
instance MonadPlus m => MonadPlus (PermsetT m)
instance MonadTrans PermsetT
instance Eq ExtRepr
instance Show ExtRepr
instance MonadBaseControl b m => MonadBaseControl b (PermsetT m)
instance MonadTransControl PermsetT
instance MonadBaseControl b m => MonadBaseControl b (EntryT m)
instance MonadTransControl EntryT
instance MonadBaseControl b m => MonadBaseControl b (AclT m)
instance MonadTransControl AclT


-- | Support for POSIX.1e <i>Access Control Lists</i> (ACL), defined in
--   section 23 of the draft standard <a>IEEE Std 1003.1e</a>.
module System.Posix.ACL

-- | A combination of read, write and execute permissions.
data Permset
Permset :: Bool -> Bool -> Bool -> Permset
hasRead :: Permset -> Bool
hasWrite :: Permset -> Bool
hasExecute :: Permset -> Bool

-- | No permission.
emptyPermset :: Permset

-- | Read, write and execute permissions.
fullPermset :: Permset

-- | Give a permission if any of the two arguments grant that permission.
unionPermsets :: Permset -> Permset -> Permset

-- | Give a permission if both the arguments grant that permission.
intersectPermsets :: Permset -> Permset -> Permset

-- | Represent a valid ACL as defined in POSIX.1e. The <tt><a>Show</a></tt>
--   instance is defined to output the <i>Short Text Form</i> of the ACL
--   (see section 23.3.2 of <a>IEEE Std 1003.1e</a>), while the
--   <tt><a>Read</a></tt> instance is defined to be able to parse both the
--   long and short text form (<tt><a>read</a></tt> only parses valid
--   ACLs).
data ACL
MinimumACL :: Permset -> Permset -> Permset -> ACL
ownerPerms :: ACL -> Permset
owningGroupPerms :: ACL -> Permset
otherPerms :: ACL -> Permset
ExtendedACL :: Permset -> Map UserID Permset -> Permset -> Map GroupID Permset -> Permset -> Permset -> ACL
ownerPerms :: ACL -> Permset
usersPerms :: ACL -> Map UserID Permset
owningGroupPerms :: ACL -> Permset
groupsPerms :: ACL -> Map GroupID Permset
mask :: ACL -> Permset
otherPerms :: ACL -> Permset

-- | Convert an ACL to its <i>Long Text Form</i> (see section 23.3.1 of
--   <a>IEEE Std 1003.1e</a>).
longTextForm :: ACL -> String

-- | Convert an ACL to its <i>Short Text Form</i> (see section 23.3.2 of
--   <a>IEEE Std 1003.1e</a>).
shortTextFrom :: ACL -> String

-- | Retrieve the ACL from a file.
getACL :: FilePath -> IO ACL

-- | Retrieve the default ACL from a directory (return
--   <tt><a>Nothing</a></tt> if there is no default ACL).
getDefaultACL :: FilePath -> IO (Maybe ACL)

-- | Retrieve the ACL from a file, given its file descriptor.
fdGetACL :: Fd -> IO ACL

-- | Set the ACL for a file.
setACL :: FilePath -> ACL -> IO ()

-- | Set the default ACL for a directory.
setDefaultACL :: FilePath -> ACL -> IO ()

-- | Set the ACL for a file, given its file descriptor.
fdSetACL :: Fd -> ACL -> IO ()

-- | Delete the default ACL from a directory.
--   
--   Call to <tt>acl_delete_def_file()</tt>.
deleteDefaultACL :: FilePath -> IO ()
instance [safe] Eq Permset
instance [safe] Eq Entry
instance [safe] Read Entry
instance [safe] Show Entry
instance [safe] Eq TextForm
instance [safe] Eq ACL
instance [safe] Read ACL
instance [safe] Show ACL
instance [safe] Read Permset
instance [safe] Show Permset
