-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | PPDev bindings
--   
--   PPDev bindings
@package bindings-ppdev
@version 0.0.3

module Bindings.PpDev
data C'timeval
C'timeval :: CLong -> CLong -> C'timeval
c'timeval'tv_sec :: C'timeval -> CLong
c'timeval'tv_usec :: C'timeval -> CLong
c'PP_IOCTL :: Num a => a

-- | Set mode for read/write (e.g. IEEE1284_MODE_EPP)
c'PPSETMODE :: Num a => a
data C'PPSETMODE
C'PPSETMODE :: C'PPSETMODE

-- | Read status
c'PPRSTATUS :: Num a => a
data C'PPRSTATUS
C'PPRSTATUS :: C'PPRSTATUS

-- | Read/write control
c'PPRCONTROL :: Num a => a
data C'PPRCONTROL
C'PPRCONTROL :: C'PPRCONTROL
c'PPWCONTROL :: Num a => a
data C'PPWCONTROL
C'PPWCONTROL :: C'PPWCONTROL
data C'ppdev_frob_struct
C'ppdev_frob_struct :: CUChar -> CUChar -> C'ppdev_frob_struct
c'ppdev_frob_struct'mask :: C'ppdev_frob_struct -> CUChar
c'ppdev_frob_struct'val :: C'ppdev_frob_struct -> CUChar
c'PPFCONTROL :: Num a => a
data C'PPFCONTROL
C'PPFCONTROL :: C'PPFCONTROL

-- | Read/write data
c'PPRDATA :: Num a => a
data C'PPRDATA
C'PPRDATA :: C'PPRDATA
c'PPWDATA :: Num a => a
data C'PPWDATA
C'PPWDATA :: C'PPWDATA

-- | Claim the port to start using it
c'PPCLAIM :: Num a => a
data C'PPCLAIM
C'PPCLAIM :: C'PPCLAIM

-- | Release the port when you aren't using it
c'PPRELEASE :: Num a => a
data C'PPRELEASE
C'PPRELEASE :: C'PPRELEASE

-- | Yield the port (release it if another driver is waiting, then reclaim)
c'PPYIELD :: Num a => a
data C'PPYIELD
C'PPYIELD :: C'PPYIELD

-- | Register device exclusively (must be before PPCLAIM).
data C'PPEXCL
C'PPEXCL :: C'PPEXCL
c'PPEXCL :: Num a => a

-- | Data line direction: non-zero for input mode.
c'PPDATADIR :: Num a => a
data C'PPDATADIR
C'PPDATADIR :: C'PPDATADIR

-- | Negotiate a particular IEEE 1284 mode.
c'PPNEGOT :: Num a => a
data C'PPNEGOT
C'PPNEGOT :: C'PPNEGOT

-- | Set control lines when an interrupt occurs.
c'PPWCTLONIRQ :: Num a => a
data C'PPWCTLONIRQ
C'PPWCTLONIRQ :: C'PPWCTLONIRQ

-- | Clear (and return) interrupt count.
c'PPCLRIRQ :: Num a => a
data C'PPCLRIRQ
C'PPCLRIRQ :: C'PPCLRIRQ

-- | Set the IEEE 1284 phase that we're in (e.g. IEEE1284_PH_FWD_IDLE)
c'PPSETPHASE :: Num a => a
data C'PPSETPHASE
C'PPSETPHASE :: C'PPSETPHASE

-- | Set and get port timeout (struct timeval's)
c'PPGETTIME :: Num a => a
data C'PPGETTIME
C'PPGETTIME :: C'PPGETTIME
c'PPSETTIME :: Num a => a
data C'PPSETTIME
C'PPSETTIME :: C'PPSETTIME

-- | Get available modes (what the hardware can do)
c'PPGETMODES :: Num a => a
data C'PPGETMODES
C'PPGETMODES :: C'PPGETMODES

-- | Get the current mode and phaze
c'PPGETMODE :: Num a => a
data C'PPGETMODE
C'PPGETMODE :: C'PPGETMODE
c'PPGETPHASE :: Num a => a
data C'PPGETPHASE
C'PPGETPHASE :: C'PPGETPHASE

-- | get/set flags
c'PPGETFLAGS :: Num a => a
data C'PPGETFLAGS
C'PPGETFLAGS :: C'PPGETFLAGS
c'PPSETFLAGS :: Num a => a
data C'PPSETFLAGS
C'PPSETFLAGS :: C'PPSETFLAGS

-- | flags visible to the world
c'PP_FASTWRITE :: Num a => a
c'PP_FASTREAD :: Num a => a
c'PP_W91284PIC :: Num a => a

-- | only masks user-visible flags
c'PP_FLAGMASK :: Num a => a
instance Typeable C'ppdev_frob_struct
instance Typeable C'timeval
instance Eq C'timeval
instance Show C'timeval
instance Eq C'ppdev_frob_struct
instance Show C'ppdev_frob_struct
instance IOControl C'PPSETFLAGS CInt
instance IOControl C'PPGETFLAGS CInt
instance IOControl C'PPGETPHASE CInt
instance IOControl C'PPGETMODE CInt
instance IOControl C'PPGETMODES CUInt
instance IOControl C'PPSETTIME C'timeval
instance IOControl C'PPGETTIME C'timeval
instance IOControl C'PPSETPHASE CInt
instance IOControl C'PPCLRIRQ CInt
instance IOControl C'PPWCTLONIRQ CUChar
instance IOControl C'PPNEGOT CInt
instance IOControl C'PPDATADIR CInt
instance IOControl C'PPEXCL CInt
instance IOControl C'PPYIELD CInt
instance IOControl C'PPRELEASE CInt
instance IOControl C'PPCLAIM CInt
instance IOControl C'PPWDATA CUChar
instance IOControl C'PPRDATA CUChar
instance IOControl C'PPFCONTROL C'ppdev_frob_struct
instance Storable C'ppdev_frob_struct
instance IOControl C'PPWCONTROL CUChar
instance IOControl C'PPRCONTROL CUChar
instance IOControl C'PPRSTATUS CUChar
instance IOControl C'PPSETMODE CInt
instance Storable C'timeval
