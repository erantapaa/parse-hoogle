-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | vector-space operations for finite maps using Data.Map
--   
--   Data.Map.Vector provides <tt>MapVector</tt>, a wrapper around
--   <tt>Map</tt> from <tt>containers</tt> which supports constant maps,
--   i.e. maps containing only one value. This allows an identity under
--   intersection and an <tt>Applicative</tt> instance. It also has
--   instances of <tt>AdditiveGroup</tt>, <tt>VectorSpace</tt>,
--   <tt>InnerSpace</tt>, and <tt>Num</tt> with appropriate value types.
--   Provides operations for addition, subtraction, element-wise
--   multiplication (through <tt>Num</tt>), scalar multiplication (through
--   <tt>VectorSpace</tt>), and dot product.
@package vector-space-map
@version 0.1.0.1

module Data.Map.Vector

-- | Note: <a>&lt;*&gt;</a> in the <a>Applicative</a> instance operates
--   under <i>intersection</i>. i.e.:
--   
--   <pre>
--   &gt;&gt;&gt; (MapVector $ Map.fromList [("x", id)]) &lt;*&gt; (MapVector $ Map.fromList [("y", 3)])
--   MapVector (Map.fromList [])
--   </pre>
--   
--   <a>*</a> in the <a>Num</a> instance performs elementwise
--   multiplication. It is defined in terms of <a>&lt;*&gt;</a> and
--   therefore also operates under intersection:
--   
--   <pre>
--   &gt;&gt;&gt; (MapVector $ Map.fromList [("x", 2), ("y", 3)]) * (MapVector $ Map.fromList [("x", 5),("y", 7)])
--   MapVector (Map.fromList [("x", 10), ("y", 21)])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (MapVector $ Map.fromList [("x", 2), ("y", 3)]) * (MapVector $ Map.fromList [("y", 7)])
--   MapVector (Map.fromList [("y", 21)])
--   </pre>
--   
--   <a>*^</a> in the <a>VectorSpace</a> instance multiplies by the scalar
--   of v. Nesting MapVectors preserves the scalar type, e.g. <tt>Scalar
--   (MapVector k (MapVector k' v))</tt> = <tt>Scalar v</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; 2 *^ (ConstantMap $ MapVector $ Map.fromList [("x", 3 :: Int), ("y", 5)])
--   ConstantMap (MapVector (fromList [("x",6),("y",10)]))
--   </pre>
--   
--   Finally, <a>&lt;.&gt;</a> in <a>InnerSpace</a> is the dot-product
--   operator. Again, it operates under intersection.
--   
--   <pre>
--   &gt;&gt;&gt; (MapVector $ Map.fromList [("x", 2 :: Int), ("y", 3)]) &lt;.&gt; (MapVector $ Map.fromList [("x", 5),("y", 7)])
--   31
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (pure . MapVector $ Map.fromList [("x", 2 :: Int), ("y", 3)]) &lt;.&gt; (MapVector $ Map.fromList [("a", pure (5::Int))])
--   25
--   </pre>
--   
--   Addition, using either <a>+</a> or <a>^+^</a>, operates under union.
data MapVector k v
MapVector :: (Map k v) -> MapVector k v

-- | An infinite-dimensional vector with the same value on all dimensions
ConstantMap :: v -> MapVector k v
instance Typeable2 MapVector
instance (Eq k, Eq v) => Eq (MapVector k v)
instance Functor (MapVector k)
instance (Show k, Show v) => Show (MapVector k v)
instance (Ord k, Read k, Read v) => Read (MapVector k v)
instance Foldable (MapVector k)
instance Traversable (MapVector k)
instance (Data k, Data v, Ord k) => Data (MapVector k v)
instance (Ord k, AdditiveGroup v, Num v) => Num (MapVector k v)
instance (Ord k, VectorSpace v, InnerSpace v, AdditiveGroup (Scalar v)) => InnerSpace (MapVector k v)
instance (Ord k, VectorSpace v) => VectorSpace (MapVector k v)
instance (AdditiveGroup v, Ord k) => AdditiveGroup (MapVector k v)
instance Ord k => Applicative (MapVector k)
