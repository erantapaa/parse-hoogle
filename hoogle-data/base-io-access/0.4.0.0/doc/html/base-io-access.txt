-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The IO functions included in base delimited into small, composable classes
--   
@package base-io-access
@version 0.4.0.0


module Access.Core

-- | The <a>Access</a> type class. It belongs to several of the same type
--   classes as <a>IO</a>. Notably, it is a <a>Monad</a>, a <a>Functor</a>,
--   and an <a>Applicative</a>.
class (Monad io, Functor io, Typeable io, MonadFix io, Applicative io) => Access io
instance Access IO

module Access.Data.Unique
class Access io => UniqueAccess io
newUnique' :: UniqueAccess io => io Unique
instance UniqueAccess IO

module Access.Debug.Trace
class Access io => TraceAccess io
traceIO' :: TraceAccess io => String -> io ()
traceEventIO' :: TraceAccess io => String -> io ()
traceMarkerIO' :: TraceAccess io => String -> io ()
instance TraceAccess IO

module Access.System.CPUTime
class Access io => CPUTimeAccess io
getCPUTime' :: CPUTimeAccess io => io Integer
instance CPUTimeAccess IO

module Access.System.Environment
class Access io => EnvironmentAccess io
getArgs' :: EnvironmentAccess io => io [String]
getProgName' :: EnvironmentAccess io => io String
getExecutablePath' :: EnvironmentAccess io => io FilePath
getEnv' :: EnvironmentAccess io => String -> io String
lookupEnv' :: EnvironmentAccess io => String -> io (Maybe String)
setEnv' :: EnvironmentAccess io => String -> String -> io ()
unsetEnv' :: EnvironmentAccess io => String -> io ()
withArgs' :: EnvironmentAccess io => [String] -> IO a -> io a
withProgName' :: EnvironmentAccess io => String -> IO a -> io a
getEnvironment' :: EnvironmentAccess io => io [(String, String)]
instance EnvironmentAccess IO

module Access.System.Exit
class Access io => ExitAccess io
exitWith' :: ExitAccess io => ExitCode -> io a
exitFailure' :: ExitAccess io => io a
exitSuccess' :: ExitAccess io => io a
instance ExitAccess IO


module Access.System.IO

-- | Provides access to <a>Handle</a> write functions
class Access io => HandleWriteAccess io
hPutChar' :: HandleWriteAccess io => Handle -> Char -> io ()
hPutStr' :: HandleWriteAccess io => Handle -> String -> io ()
hPutStrLn' :: HandleWriteAccess io => Handle -> String -> io ()
hPrint' :: (HandleWriteAccess io, Show a) => Handle -> a -> io ()
hPutBuf' :: HandleWriteAccess io => Handle -> Ptr a -> Int -> io ()
hPutBufNonBlocking' :: HandleWriteAccess io => Handle -> Ptr a -> Int -> io Int

-- | Provides access to <a>Handle</a> read functions
class Access io => HandleReadAccess io
hWaitForInput' :: HandleReadAccess io => Handle -> Int -> io Bool
hGetChar' :: HandleReadAccess io => Handle -> io Char
hGetLine' :: HandleReadAccess io => Handle -> io String
hLookAhead' :: HandleReadAccess io => Handle -> io Char
hGetContents' :: HandleReadAccess io => Handle -> io String
hGetBuf' :: HandleReadAccess io => Handle -> Ptr a -> Int -> io Int
hGetBufSome' :: HandleReadAccess io => Handle -> Ptr a -> Int -> io Int
hGetBufNonBlocking' :: HandleReadAccess io => Handle -> Ptr a -> Int -> io Int

-- | Combines the <a>HandleWriteAccess</a> and <a>HandleReadAccess</a>
--   classes and adds additional miscellaneous functions for <a>Handle</a>
--   manipulation
class (HandleWriteAccess io, HandleReadAccess io) => HandleAccess io
hClose' :: HandleAccess io => Handle -> io ()
hFileSize' :: HandleAccess io => Handle -> io Integer
hSetFileSize' :: HandleAccess io => Handle -> Integer -> io ()
hIsEOF' :: HandleAccess io => Handle -> io Bool
hSetBuffering' :: HandleAccess io => Handle -> BufferMode -> io ()
hGetBuffering' :: HandleAccess io => Handle -> io BufferMode
hFlush' :: HandleAccess io => Handle -> io ()
hGetPosn' :: HandleAccess io => Handle -> io HandlePosn
hSetPosn' :: HandleAccess io => HandlePosn -> io ()
hSeek' :: HandleAccess io => Handle -> SeekMode -> Integer -> io ()
hTell' :: HandleAccess io => Handle -> io Integer
hIsOpen' :: HandleAccess io => Handle -> io Bool
hIsClosed' :: HandleAccess io => Handle -> io Bool
hIsReadable' :: HandleAccess io => Handle -> io Bool
hIsWritable' :: HandleAccess io => Handle -> io Bool
hIsSeekable' :: HandleAccess io => Handle -> io Bool
hIsTerminalDevice' :: HandleAccess io => Handle -> io Bool
hSetEcho' :: HandleAccess io => Handle -> Bool -> io ()
hGetEcho' :: HandleAccess io => Handle -> io Bool
hShow' :: HandleAccess io => Handle -> io String
hReady' :: HandleAccess io => Handle -> io Bool
hSetEncoding' :: HandleAccess io => Handle -> TextEncoding -> io ()
hGetEncoding' :: HandleAccess io => Handle -> io (Maybe TextEncoding)
hSetNewlineMode' :: HandleAccess io => Handle -> NewlineMode -> io ()

-- | Provides access to functions to read from <a>stdin</a>
class Access io => StdInAccess io
getChar' :: StdInAccess io => io Char
getLine' :: StdInAccess io => io String
getContents' :: StdInAccess io => io String
readLn' :: (StdInAccess io, Read a) => io a
interact' :: StdInAccess io => (String -> String) -> io ()

-- | Provides access to functions to write to <a>stdout</a>
class Access io => StdOutAccess io
putChar' :: StdOutAccess io => Char -> io ()
putStr' :: StdOutAccess io => String -> io ()
putStrLn' :: StdOutAccess io => String -> io ()
print' :: (StdOutAccess io, Show a) => a -> io ()

-- | Combines the <a>StdInAccess</a> and <a>StdOutAccess</a> into a single
--   class
class (StdInAccess io, StdOutAccess io) => StdIOAccess io
isEOF' :: StdIOAccess io => io Bool

-- | Provides the function <a>readFile'</a> for reading the contents of a
--   file
class FileReadAccess io
readFile' :: FileReadAccess io => FilePath -> io String

-- | Provides functions for writing to files
class Access io => FileWriteAccess io
writeFile' :: FileWriteAccess io => FilePath -> String -> io ()
appendFile' :: FileWriteAccess io => FilePath -> String -> io ()

-- | Combines <a>HandleAccess</a>, <a>FileReadAccess</a>, and
--   <a>FileWriteAccess</a> for manipulating files (this does allow for
--   general <a>Handle</a> access and should be considered unsafe)
class (HandleAccess io, FileReadAccess io, FileWriteAccess io) => FileAccess io
withFile' :: FileAccess io => FilePath -> IOMode -> (Handle -> io r) -> io r
openFile' :: FileAccess io => FilePath -> IOMode -> io Handle
withBinaryFile' :: FileAccess io => FilePath -> IOMode -> (Handle -> io r) -> io r
openBinaryFile' :: FileAccess io => FilePath -> IOMode -> io Handle

-- | Provides access to functions for opening temporary file <a>Handle</a>s
class Access io => TempFileAccess io
openTempFile' :: TempFileAccess io => FilePath -> String -> io (FilePath, Handle)
openBinaryTempFile' :: TempFileAccess io => FilePath -> String -> io (FilePath, Handle)
openTempFileWithDefaultPermissions' :: TempFileAccess io => FilePath -> String -> io (FilePath, Handle)
openBinaryTempFileWithDefaultPermissions' :: TempFileAccess io => FilePath -> String -> io (FilePath, Handle)

-- | Provides access to <a>mkTextEncoding'</a>
class Access io => TextEncodingAccess io
mkTextEncoding' :: TextEncodingAccess io => String -> io TextEncoding
instance TextEncodingAccess IO
instance TempFileAccess IO
instance FileAccess IO
instance FileWriteAccess IO
instance FileReadAccess IO
instance StdIOAccess IO
instance StdOutAccess IO
instance StdInAccess IO
instance HandleAccess IO
instance HandleReadAccess IO
instance HandleWriteAccess IO

module Access.System.IO.Error
class Access io => IOErrorAccess io
ioError' :: IOErrorAccess io => IOError -> io a
catchIOError' :: IOErrorAccess io => io a -> (IOError -> io a) -> io a
tryIOError' :: IOErrorAccess io => io a -> io (Either IOError a)
modifyIOError' :: IOErrorAccess io => (IOError -> IOError) -> io a -> io a
instance IOErrorAccess IO

module Access.System.Mem.StableName
class Access io => StableNameAccess io
makeStableName' :: StableNameAccess io => a -> io (StableName a)
instance StableNameAccess IO

module Access.System.Timeout
class Access io => TimeoutAccess io
timeout' :: TimeoutAccess io => Int -> IO a -> io (Maybe a)
instance TimeoutAccess IO

module Access.System.Mem.Weak
class Access io => WeakMemAccess io
mkWeak' :: WeakMemAccess io => k -> v -> Maybe (IO ()) -> io (Weak v)
deRefWeak' :: WeakMemAccess io => Weak v -> io (Maybe v)
finalize' :: WeakMemAccess io => Weak v -> io ()
instance WeakMemAccess IO

module Access.Data.IORef
class Access io => IORefAccess io
newIORef' :: IORefAccess io => a -> io (IORef a)
readIORef' :: IORefAccess io => IORef a -> io a
writeIORef' :: IORefAccess io => IORef a -> a -> io ()
modifyIORef_ :: IORefAccess io => IORef a -> (a -> a) -> io ()
modifyIORef_' :: IORefAccess io => IORef a -> (a -> a) -> io ()
atomicModifyIORef_ :: IORefAccess io => IORef a -> (a -> (a, b)) -> io b
atomicModifyIORef_' :: IORefAccess io => IORef a -> (a -> (a, b)) -> io b
atomicWriteIORef' :: IORefAccess io => IORef a -> a -> io ()
class (WeakMemAccess io, IORefAccess io) => WeakIORefAccess io
mkWeakIORef' :: WeakIORefAccess io => IORef a -> IO () -> io (Weak (IORef a))
instance WeakIORefAccess IO
instance IORefAccess IO

module Access.System.Mem
class Access io => MemAccess io
performGC' :: MemAccess io => io ()
performMajorGC' :: MemAccess io => io ()
performMinorGC' :: MemAccess io => io ()
instance MemAccess IO

module Access.Control.Exception
class Access io => ExceptionAccess io
throwIO' :: (ExceptionAccess io, Exception e) => e -> io a
ioError' :: ExceptionAccess io => IOError -> io a
throwTo' :: (ExceptionAccess io, Exception e) => ThreadId -> e -> io ()
catch' :: (ExceptionAccess io, Exception e) => io a -> (e -> io a) -> io a
catches' :: ExceptionAccess io => io a -> [Handler a] -> io a
catchJust' :: (ExceptionAccess io, Exception e) => (e -> Maybe b) -> io a -> (b -> io a) -> io a
handle' :: (ExceptionAccess io, Exception e) => (e -> io a) -> io a -> io a
handleJust' :: (ExceptionAccess io, Exception e) => (e -> Maybe b) -> (b -> io a) -> io a -> io a
try' :: (ExceptionAccess io, Exception e) => io a -> io (Either e a)
tryJust' :: (ExceptionAccess io, Exception e) => (e -> Maybe b) -> io a -> io (Either b a)
evaluate' :: ExceptionAccess io => a -> io a
bracket' :: ExceptionAccess io => io a -> (a -> io b) -> (a -> io c) -> io c
bracket_' :: ExceptionAccess io => io a -> io b -> io c -> io c
bracketOnError' :: ExceptionAccess io => io a -> (a -> io b) -> (a -> io c) -> io c
finally' :: ExceptionAccess io => io a -> io b -> io a
onException' :: ExceptionAccess io => io a -> io b -> io a
class ExceptionAccess io => MaskingAccess io
mask' :: MaskingAccess io => ((forall a. io a -> io a) -> io b) -> io b
mask_' :: MaskingAccess io => io a -> io a
uninterruptibleMask' :: MaskingAccess io => ((forall a. io a -> io a) -> io b) -> io b
uninterruptibleMask_' :: MaskingAccess io => io a -> io a
getMaskingState' :: MaskingAccess io => io MaskingState
allowInterrupt' :: MaskingAccess io => io ()
instance MaskingAccess IO
instance ExceptionAccess IO

module Access.Control.Concurrent.QSemN
class Access io => QSemNAccess io
newQSemN' :: QSemNAccess io => Int -> io QSemN
waitQSemN' :: QSemNAccess io => QSemN -> Int -> io ()
signalQSemN' :: QSemNAccess io => QSemN -> Int -> io ()
instance QSemNAccess IO

module Access.Control.Concurrent.QSem
class Access io => QSemAccess io
newQSem' :: QSemAccess io => Int -> io QSem
waitQSem' :: QSemAccess io => QSem -> io ()
signalQSem' :: QSemAccess io => QSem -> io ()
instance QSemAccess IO

module Access.Control.Concurrent.Chan
class Access io => ChanAccess io
newChan' :: ChanAccess io => io (Chan a)
writeChan' :: ChanAccess io => Chan a -> a -> io ()
readChan' :: ChanAccess io => Chan a -> io a
dupChan' :: ChanAccess io => Chan a -> io (Chan a)
getChanContents' :: ChanAccess io => Chan a -> io [a]
writeList2Chan' :: ChanAccess io => Chan a -> [a] -> io ()
instance ChanAccess IO

module Access.Control.Concurrent.MVar
class Access io => MVarAccess io
newEmptyMVar' :: MVarAccess io => io (MVar a)
newMVar' :: MVarAccess io => a -> io (MVar a)
takeMVar' :: MVarAccess io => MVar a -> io a
putMVar' :: MVarAccess io => MVar a -> a -> io ()
readMVar' :: MVarAccess io => MVar a -> io a
swapMVar' :: MVarAccess io => MVar a -> a -> io a
tryTakeMVar' :: MVarAccess io => MVar a -> io (Maybe a)
tryPutMVar' :: MVarAccess io => MVar a -> a -> io Bool
tryReadMVar' :: MVarAccess io => MVar a -> io (Maybe a)
isEmptyMVar' :: MVarAccess io => MVar a -> io Bool
withMVar' :: MVarAccess io => MVar a -> (a -> IO b) -> io b
withMVarMasked' :: MVarAccess io => MVar a -> (a -> IO b) -> io b
modifyMVar_' :: MVarAccess io => MVar a -> (a -> IO a) -> io ()
modifyMVar' :: MVarAccess io => MVar a -> (a -> IO (a, b)) -> io b
modifyMVarMasked_' :: MVarAccess io => MVar a -> (a -> IO a) -> io ()
modifyMVarMasked' :: MVarAccess io => MVar a -> (a -> IO (a, b)) -> io b
class (WeakMemAccess io, MVarAccess io) => WeakMVarAccess io
mkWeakMVar' :: WeakMVarAccess io => MVar a -> IO () -> io (Weak (MVar a))
instance WeakMVarAccess IO
instance MVarAccess IO


module Access.Control.Concurrent

-- | Inherits from <a>ExceptionAccess</a>, and gives access to Thread
--   related functions
class ExceptionAccess io => ThreadAccess io where throwTo' = throwTo'
myThreadId' :: ThreadAccess io => io ThreadId
forkIO' :: ThreadAccess io => io () -> io ThreadId
forkFinally' :: ThreadAccess io => io a -> (Either SomeException a -> io ()) -> io ThreadId
forkIOWithUnmask' :: ThreadAccess io => ((forall a. io a -> io a) -> io ()) -> io ThreadId
killThread' :: ThreadAccess io => ThreadId -> io ()
throwTo' :: (ThreadAccess io, Exception e) => ThreadId -> e -> io ()
forkOn' :: ThreadAccess io => Int -> io () -> io ThreadId
forkOnWithUnmask' :: ThreadAccess io => Int -> ((forall a. io a -> io a) -> io ()) -> io ThreadId
getNumCapabilities' :: ThreadAccess io => io Int
setNumCapabilities' :: ThreadAccess io => Int -> io ()
threadCapability' :: ThreadAccess io => ThreadId -> io (Int, Bool)
yield' :: ThreadAccess io => io ()
threadDelay' :: ThreadAccess io => Int -> io ()
threadWaitRead' :: ThreadAccess io => Fd -> io ()
threadWaitWrite' :: ThreadAccess io => Fd -> io ()
threadWaitReadSTM' :: ThreadAccess io => Fd -> io (STM (), io ())
threadWaitWriteSTM' :: ThreadAccess io => Fd -> io (STM (), io ())

-- | Provides access to bounded thread functions
class ThreadAccess io => BoundThreadAccess io
forkOS' :: BoundThreadAccess io => io () -> io ThreadId
isCurrentThreadBound' :: BoundThreadAccess io => io Bool
runInBoundThread' :: BoundThreadAccess io => io a -> io a
runInUnboundThread' :: BoundThreadAccess io => io a -> io a

-- | Provides access to the <a>mkWeakThreadId</a> function, inherits from
--   <a>WeakMemAccess</a>
class WeakMemAccess io => WeakThreadAccess io
mkWeakThreadId' :: WeakThreadAccess io => ThreadId -> io (Weak ThreadId)
instance WeakThreadAccess IO
instance BoundThreadAccess IO
instance ThreadAccess IO
