-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simulation experiments for the Aivika library
--   
@package aivika-experiment
@version 4.0.3


-- | Tested with: GHC 7.10.1
--   
--   The module defines a shared mutable reference accessible from
--   different threads.
module Simulation.Aivika.Experiment.MRef

-- | This is a shared mutable reference accessible from different threads.
data MRef a

-- | Create a new shared reference with the specified initial value.
newMRef :: a -> IO (MRef a)

-- | Read the contents of the shared reference.
readMRef :: MRef a -> IO a

-- | Like <a>maybe</a> but for the shared reference under assumption that
--   the reference is updated only once by its initial value.
maybeReadMRef :: b -> (a -> IO b) -> MRef (Maybe a) -> IO b

-- | Update the contents of the shared reference.
writeMRef :: MRef a -> a -> IO ()

-- | Update the contents if the reference was empty and then return a
--   result of applying the specified function to either the initial or
--   current value.
maybeWriteMRef :: MRef (Maybe a) -> IO a -> (a -> IO b) -> IO b

-- | Modify the contents of the shared reference.
modifyMRef_ :: MRef a -> (a -> IO a) -> IO ()

-- | Modify the contents of the shared reference but allow returning the
--   result.
modifyMRef :: MRef a -> (a -> IO (a, b)) -> IO b

-- | A safe wrapper for operating with the contents of shared reference.
withMRef :: MRef a -> (a -> IO b) -> IO b


-- | Tested with: GHC 7.10.1
--   
--   It defines utility functions missed in the standard library.
module Simulation.Aivika.Experiment.Utils

-- | Divide into the groups removing those elements that satisfy the
--   predicate.
divideBy :: (a -> Bool) -> [a] -> [[a]]

-- | Replace the string.
replace :: String -> String -> String -> String


-- | Tested with: GHC 7.10.1
--   
--   It defines the <tt>Exp</tt> monad that allows providing computation
--   with an ability to resolve file paths.
module Simulation.Aivika.Experiment.ExperimentWriter

-- | Defines an <a>IO</a> derived computation whithin which we can resolve
--   the unique file paths.
data ExperimentWriter a

-- | Run the <a>ExperimentWriter</a> computation.
runExperimentWriter :: ExperimentWriter a -> IO a

-- | Specifies the file name, unique or writable, which can be appended
--   with extension if required.
data ExperimentFilePath

-- | The file which is overwritten in case if it existed before.
WritableFilePath :: FilePath -> ExperimentFilePath

-- | The file which is always unique, when an automatically generated
--   suffix is added to the name in case of need.
UniqueFilePath :: FilePath -> ExperimentFilePath

-- | Resolve the file path relative to the specified directory passed in
--   the first argument and taking into account a possible requirement to
--   have an unique file name.
resolveFilePath :: FilePath -> ExperimentFilePath -> ExperimentWriter FilePath

-- | Expand the file path using the specified table of substitutions.
expandFilePath :: ExperimentFilePath -> Map String String -> ExperimentFilePath

-- | Transform the file path using the specified function.
mapFilePath :: (FilePath -> FilePath) -> ExperimentFilePath -> ExperimentFilePath
instance MonadIO ExperimentWriter
instance Monad ExperimentWriter
instance Applicative ExperimentWriter
instance Functor ExperimentWriter


-- | Tested with: GHC 7.10.1
--   
--   | This module computes the histogram by the specified data and
--   strategy applied for such computing.
--   
--   The code in this module is essentially based on the
--   <a>http://hackage.haskell.org/package/Histogram</a> package by Mike
--   Izbicki, who kindly agreed to re-license his library under BSD3, which
--   allowed me to use his code and comments with some modifications.
module Simulation.Aivika.Experiment.Histogram

-- | Holds all the information needed to plot the histogram for a list of
--   different series. Each series produces its own item in the resuling
--   <tt>[Int]</tt> list that may contain zeros.
type Histogram = [(Double, [Int])]

-- | Creates a histogram by specifying the list of series. Call it with one
--   of the binning strategies that is appropriate to the type of data you
--   have. If you don't know, then try using <a>binSturges</a>.
histogram :: BinningStrategy -> [[Double]] -> Histogram

-- | Create a histogram by specifying the exact bin size. You probably
--   don't want to use this function, and should use histogram with an
--   appropriate binning strategy.
histogramBinSize :: Double -> [[Double]] -> Histogram

-- | Create a histogram by the specified approximated number of bins. You
--   probably don't want to use this function, and should use histogram
--   with an appropriate binning strategy.
histogramNumBins :: Int -> [[Double]] -> Histogram

-- | The strategy applied to calculate the histogram bins.
type BinningStrategy = [Double] -> Int

-- | Sturges' binning strategy is the least computational work, but
--   recommended for only normal data.
binSturges :: BinningStrategy

-- | Doane's binning strategy extends Sturges' for non-normal data. It
--   takes a little more time because it must calculate the kurtosis
--   (peakkiness) of the distribution.
binDoane :: BinningStrategy

-- | Using the sqrt of the number of samples is not supported by any
--   theory, but is commonly used by excel and other histogram making
--   software.
binSqrt :: BinningStrategy

-- | Scott's rule is the optimal solution for normal data, but requires
--   more computation than Sturges'.
binScott :: BinningStrategy


-- | Tested with: GHC 7.10.1
--   
--   This is an utility module that provides an HTML writer.
module Simulation.Aivika.Experiment.HtmlWriter

-- | It writes fast an HTML code.
data HtmlWriter a

-- | Run the HTML writer monad.
runHtmlWriter :: HtmlWriter a -> ShowS -> ExperimentWriter (a, ShowS)

-- | Compose the HTML applying the corresponded transformation.
composeHtml :: ShowS -> HtmlWriter ()

-- | Write the HTML code.
writeHtml :: String -> HtmlWriter ()

-- | Write the HTML code.
writeHtmlLn :: String -> HtmlWriter ()

-- | Write the text in HTML.
writeHtmlText :: String -> HtmlWriter ()

-- | Write the <tt>&lt;p&gt;</tt> element with the specified contents.
writeHtmlParagraph :: HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;p&gt;</tt> element with the specified id and
--   contents.
writeHtmlParagraphWithId :: String -> HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h1&gt;</tt> element with the specified contents.
writeHtmlHeader1 :: HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h1&gt;</tt> element with the specified id and
--   contents.
writeHtmlHeader1WithId :: String -> HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h2&gt;</tt> element with the specified contents.
writeHtmlHeader2 :: HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h2&gt;</tt> element with the specified id and
--   contents.
writeHtmlHeader2WithId :: String -> HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h3&gt;</tt> element with the specified contents.
writeHtmlHeader3 :: HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h3&gt;</tt> element with the specified id and
--   contents.
writeHtmlHeader3WithId :: String -> HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h4&gt;</tt> element with the specified contents.
writeHtmlHeader4 :: HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h4&gt;</tt> element with the specified id and
--   contents.
writeHtmlHeader4WithId :: String -> HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h5&gt;</tt> element with the specified contents.
writeHtmlHeader5 :: HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h5&gt;</tt> element with the specified id and
--   contents.
writeHtmlHeader5WithId :: String -> HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h6&gt;</tt> element with the specified contents.
writeHtmlHeader6 :: HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;h6&gt;</tt> element with the specified id and
--   contents.
writeHtmlHeader6WithId :: String -> HtmlWriter () -> HtmlWriter ()

-- | Write the <tt>&lt;br&gt;</tt> element.
writeHtmlBreak :: HtmlWriter ()

-- | Write the HTML link with the specified URI and contents.
writeHtmlLink :: String -> HtmlWriter () -> HtmlWriter ()

-- | Write the HTML image with the specified URI.
writeHtmlImage :: String -> HtmlWriter ()

-- | Write the list of items wrapped in <tt>&lt;ul&gt;</tt>.
writeHtmlList :: HtmlWriter () -> HtmlWriter ()

-- | Write the item list wrapped in <tt>&lt;li&gt;</tt>.
writeHtmlListItem :: HtmlWriter () -> HtmlWriter ()

-- | Write the HTML document with the specified title and contents
writeHtmlDocumentWithTitle :: String -> HtmlWriter () -> HtmlWriter ()

-- | Escape special HTML characters in the <a>String</a>. It is based on
--   one function from package Web-Encodings, which is licensed under BSD3
--   but obsolete now.
encodeHtmlText :: String -> String
instance Applicative HtmlWriter
instance Functor HtmlWriter
instance MonadIO HtmlWriter
instance Monad HtmlWriter


-- | Tested with: GHC 7.10.1
--   
--   The module defines the simulation experiments. They automate the
--   process of generating and analyzing the results. Moreover, this module
--   is open to extensions, allowing you to define your own output views
--   for the simulation results, for example, such views that would allow
--   saving the results in PDF or as charts. To decrease the number of
--   dependencies, such possible extenstions are not included in this
--   package, although simple views are provided.
module Simulation.Aivika.Experiment.Types

-- | It defines the simulation experiment with the specified rendering
--   backend and its bound data.
data Experiment
Experiment :: Specs -> ResultTransform -> ResultLocalisation -> Int -> ExperimentFilePath -> String -> String -> Bool -> IO Int -> Experiment

-- | The simulation specs for the experiment.
experimentSpecs :: Experiment -> Specs

-- | How the results must be transformed before rendering.
experimentTransform :: Experiment -> ResultTransform

-- | Specifies a localisation applied when rendering the experiment.
experimentLocalisation :: Experiment -> ResultLocalisation

-- | How many simulation runs should be launched.
experimentRunCount :: Experiment -> Int

-- | The directory in which the output results should be saved.
experimentDirectoryName :: Experiment -> ExperimentFilePath

-- | The experiment title.
experimentTitle :: Experiment -> String

-- | The experiment description.
experimentDescription :: Experiment -> String

-- | Whether the process of generating the results is verbose.
experimentVerbose :: Experiment -> Bool

-- | The number of threads used for the Monte-Carlo simulation if the
--   executable was compiled with the support of multi-threading.
experimentNumCapabilities :: Experiment -> IO Int

-- | The default experiment.
defaultExperiment :: Experiment

-- | It allows rendering the simulation results in an arbitrary way.
class ExperimentRendering r where data family ExperimentContext r :: *
renderExperiment :: ExperimentRendering r => Experiment -> r -> [ExperimentReporter r] -> FilePath -> ExperimentWriter ()

-- | This is a generator of the reporter with the specified rendering
--   backend.
data ExperimentGenerator r
ExperimentGenerator :: (Experiment -> r -> FilePath -> ExperimentWriter (ExperimentReporter r)) -> ExperimentGenerator r

-- | Generate a reporter bound up with the specified directory.
generateReporter :: ExperimentGenerator r -> Experiment -> r -> FilePath -> ExperimentWriter (ExperimentReporter r)

-- | Defines a view in which the simulation results should be saved. You
--   should extend this type class to define your own views such as the PDF
--   document.
class ExperimentRendering r => ExperimentView v r
outputView :: ExperimentView v r => v -> ExperimentGenerator r

-- | It describes the source simulation data used in the experiment.
data ExperimentData
ExperimentData :: Results -> ResultPredefinedSignals -> ExperimentData

-- | The simulation results used in the experiment.
experimentResults :: ExperimentData -> Results

-- | The predefined signals provided by every model.
experimentPredefinedSignals :: ExperimentData -> ResultPredefinedSignals

-- | Defines what creates the simulation reports by the specified renderer.
data ExperimentReporter r
ExperimentReporter :: ExperimentWriter () -> ExperimentWriter () -> (ExperimentData -> Event DisposableEvent) -> ExperimentContext r -> ExperimentReporter r

-- | Initialise the reporting before the simulation runs are started.
reporterInitialise :: ExperimentReporter r -> ExperimentWriter ()

-- | Finalise the reporting after all simulation runs are finished.
reporterFinalise :: ExperimentReporter r -> ExperimentWriter ()

-- | Start the simulation run in the start time and return a finalizer that
--   will be called in the stop time after the last signal is triggered and
--   processed.
reporterSimulate :: ExperimentReporter r -> ExperimentData -> Event DisposableEvent

-- | Return a context used by the renderer.
reporterContext :: ExperimentReporter r -> ExperimentContext r

-- | Run the simulation experiment sequentially. For example, it can be a
--   Monte-Carlo simulation dependentent on the external <a>Parameter</a>
--   values.
runExperiment :: ExperimentRendering r => Experiment -> [ExperimentGenerator r] -> r -> Simulation Results -> IO ()

-- | Run the simulation experiment in parallel.
--   
--   Make sure that you compile with <tt>-threaded</tt> and supply <tt>+RTS
--   -N2 -RTS</tt> to the generated Haskell executable on dual core
--   processor, or you won't get any parallelism. Generally, the mentioned
--   <tt>N</tt> parameter should correspond to the number of cores for your
--   processor.
--   
--   In case of need you might want to specify the number of threads
--   directly with help of <a>experimentNumCapabilities</a>, although the
--   real number of parallel threads can depend on many factors.
runExperimentParallel :: ExperimentRendering r => Experiment -> [ExperimentGenerator r] -> r -> Simulation Results -> IO ()

-- | Run the simulation experiment with the specified executor.
runExperimentWithExecutor :: ExperimentRendering r => ([IO ()] -> IO ()) -> Experiment -> [ExperimentGenerator r] -> r -> Simulation Results -> IO ()


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>TimingStatsWriter</a> that knows how to write
--   the timing statistics in HTML.
module Simulation.Aivika.Experiment.TimingStatsWriter

-- | Defines a writer that knows how to represent the <a>TimingStats</a> as
--   the HTML table.
data TimingStatsWriter a
TimingStatsWriter :: Int -> String -> String -> String -> String -> String -> ShowS -> (TimingStatsWriter a -> String -> TimingStats a -> HtmlWriter ()) -> TimingStatsWriter a

-- | The width of the HTML table.
timingStatsWidth :: TimingStatsWriter a -> Int

-- | Translated text "time".
timingStatsTimeText :: TimingStatsWriter a -> String

-- | Translated text "mean".
timingStatsMeanText :: TimingStatsWriter a -> String

-- | Translated text "deviation".
timingStatsDeviationText :: TimingStatsWriter a -> String

-- | Translated text "minimum".
timingStatsMinText :: TimingStatsWriter a -> String

-- | Translated text "maximum".
timingStatsMaxText :: TimingStatsWriter a -> String

-- | The formatter of numbers.
timingStatsFormatter :: TimingStatsWriter a -> ShowS

-- | This function reprensents the named statistics as the HTML table.
timingStatsWrite :: TimingStatsWriter a -> TimingStatsWriter a -> String -> TimingStats a -> HtmlWriter ()

-- | The default writer.
defaultTimingStatsWriter :: (Show a, TimingData a) => TimingStatsWriter a


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>SamplingStatsWriter</a> that knows how to write
--   the sampling statistics in HTML.
module Simulation.Aivika.Experiment.SamplingStatsWriter

-- | Defines a writer that knows how to represent the <a>SamplingStats</a>
--   as the HTML table.
data SamplingStatsWriter a
SamplingStatsWriter :: Int -> String -> String -> String -> String -> String -> ShowS -> (SamplingStatsWriter a -> String -> SamplingStats a -> HtmlWriter ()) -> SamplingStatsWriter a

-- | The width of the HTML table.
samplingStatsWidth :: SamplingStatsWriter a -> Int

-- | Translated text "mean".
samplingStatsMeanText :: SamplingStatsWriter a -> String

-- | Translated text "deviation".
samplingStatsDeviationText :: SamplingStatsWriter a -> String

-- | Translated text "minimum".
samplingStatsMinText :: SamplingStatsWriter a -> String

-- | Translated text "maximum".
samplingStatsMaxText :: SamplingStatsWriter a -> String

-- | Translated text "count".
samplingStatsCountText :: SamplingStatsWriter a -> String

-- | The formatter of numbers.
samplingStatsFormatter :: SamplingStatsWriter a -> ShowS

-- | This function reprensents the named statistics as the HTML table.
samplingStatsWrite :: SamplingStatsWriter a -> SamplingStatsWriter a -> String -> SamplingStats a -> HtmlWriter ()

-- | The default writer.
defaultSamplingStatsWriter :: Show a => SamplingStatsWriter a


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>ExperimentSpecsWriter</a> that knows how to
--   write in HTML the experiment specs which include the simulation specs
--   and the number of simulation runs.
module Simulation.Aivika.Experiment.ExperimentSpecsWriter

-- | Defines a writer that knows how to represent the experiment specs as
--   the HTML table.
data ExperimentSpecsWriter
ExperimentSpecsWriter :: Int -> String -> String -> String -> String -> String -> String -> String -> String -> String -> ShowS -> (ExperimentSpecsWriter -> Experiment -> HtmlWriter ()) -> ExperimentSpecsWriter

-- | The width of the HTML table.
experimentSpecsWidth :: ExperimentSpecsWriter -> Int

-- | Translated text "Experiment Specs".
experimentSpecsNameText :: ExperimentSpecsWriter -> String

-- | Translated text "start time".
experimentSpecsStartTimeText :: ExperimentSpecsWriter -> String

-- | Translated text "stop time".
experimentSpecsStopTimeText :: ExperimentSpecsWriter -> String

-- | Translated text "time step".
experimentSpecsDTText :: ExperimentSpecsWriter -> String

-- | Translated text "run count".
experimentSpecsRunCountText :: ExperimentSpecsWriter -> String

-- | Translated text "integration method".
experimentSpecsIntegMethodText :: ExperimentSpecsWriter -> String

-- | Translated text "Euler's".
experimentSpecsEulerText :: ExperimentSpecsWriter -> String

-- | Translated text "the 2-nd order Runge-Kutta".
experimentSpecsRungeKutta2Text :: ExperimentSpecsWriter -> String

-- | Translated text "the 4-th order Runge-Kutta".
experimentSpecsRungeKutta4Text :: ExperimentSpecsWriter -> String

-- | The formatter of numbers.
experimentSpecsFormatter :: ExperimentSpecsWriter -> ShowS

-- | This function creates HTML.
experimentSpecsWrite :: ExperimentSpecsWriter -> ExperimentSpecsWriter -> Experiment -> HtmlWriter ()

-- | The default writer.
defaultExperimentSpecsWriter :: ExperimentSpecsWriter


-- | Tested with: GHC 7.10.1
--   
--   It defines a renderer that creates a web page when running the
--   simulation experiment.
module Simulation.Aivika.Experiment.WebPageRenderer

-- | It defines the web page renderer for simulation <a>Experiment</a>.
data WebPageRenderer a

-- | A renderer that depends on the provided parameter.
WebPageRenderer :: a -> WebPageRenderer a

-- | It replies to the requests made by the web page renderer.
data WebPageWriter
WebPageWriter :: (Int -> HtmlWriter ()) -> (Int -> HtmlWriter ()) -> WebPageWriter

-- | Return a TOC (Table of Contents) item for the HTML index file after
--   the finalisation function is called, i.e. in the very end. The agument
--   specifies the ordered number of the item.
--   
--   You should wrap your HTML in <a>writeHtmlListItem</a>.
reporterWriteTOCHtml :: WebPageWriter -> Int -> HtmlWriter ()

-- | Return an HTML code for the index file after the finalisation function
--   is called, i.e. in the very end. The agument specifies the ordered
--   number of the item.
reporterWriteHtml :: WebPageWriter -> Int -> HtmlWriter ()

-- | A convenient type synonym for describing a web page generator.
type WebPageGenerator a = ExperimentGenerator (WebPageRenderer a)

-- | Rending a web page with results when running the simulation
--   experiment.
instance ExperimentRendering (WebPageRenderer a)


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>LastValueView</a> that shows the last values for
--   the simulation variables.
module Simulation.Aivika.Experiment.LastValueView

-- | Defines the <tt>View</tt> that shows the last values of the simulation
--   variables.
data LastValueView
LastValueView :: String -> String -> String -> ShowS -> ResultTransform -> ResultTransform -> LastValueView

-- | The title for the view.
lastValueTitle :: LastValueView -> String

-- | The run title for the view. It may include special variables
--   <tt>$RUN_INDEX</tt>, <tt>$RUN_COUNT</tt> and <tt>$TITLE</tt>.
--   
--   An example is
--   
--   <pre>
--   lastValueRunTitle = "$TITLE / Run $RUN_INDEX of $RUN_COUNT"
--   </pre>
lastValueRunTitle :: LastValueView -> String

-- | The description for the view.
lastValueDescription :: LastValueView -> String

-- | It transforms data before they will be shown.
lastValueFormatter :: LastValueView -> ShowS

-- | The transform applied to the results before receiving series.
lastValueTransform :: LastValueView -> ResultTransform

-- | It defines the series for which the last values to be shown.
lastValueSeries :: LastValueView -> ResultTransform

-- | This is the default view.
defaultLastValueView :: LastValueView
instance ExperimentView LastValueView (WebPageRenderer a)


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>TimingStatsView</a> that shows the timing
--   statistics for the variables for every simulation run separately.
module Simulation.Aivika.Experiment.TimingStatsView

-- | Defines the <tt>View</tt> that shows the timing statistics for
--   variables for every simulation run separately.
data TimingStatsView
TimingStatsView :: String -> String -> String -> TimingStatsWriter Double -> Event Bool -> ResultTransform -> ResultTransform -> TimingStatsView

-- | The title for the view.
timingStatsTitle :: TimingStatsView -> String

-- | The run title for the view. It may include special variables
--   <tt>$RUN_INDEX</tt>, <tt>$RUN_COUNT</tt> and <tt>$TITLE</tt>.
--   
--   An example is
--   
--   <pre>
--   timingStatsRunTitle = "$TITLE / Run $RUN_INDEX of $RUN_COUNT"
--   </pre>
timingStatsRunTitle :: TimingStatsView -> String

-- | The description for the view.
timingStatsDescription :: TimingStatsView -> String

-- | It shows the timing statistics.
timingStatsWriter :: TimingStatsView -> TimingStatsWriter Double

-- | Specifies when gathering the statistics.
timingStatsPredicate :: TimingStatsView -> Event Bool

-- | The transform applied to the results before receiving series.
timingStatsTransform :: TimingStatsView -> ResultTransform

-- | It defines the series for which the statistics to be collected.
timingStatsSeries :: TimingStatsView -> ResultTransform

-- | This is the default view.
defaultTimingStatsView :: TimingStatsView
instance ExperimentView TimingStatsView (WebPageRenderer a)


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>FinalStatsView</a> gathers the statistics in the
--   final time points for different simulation runs.
module Simulation.Aivika.Experiment.FinalStatsView

-- | Defines the <tt>View</tt> that gathers the statistics in the final
--   time points.
data FinalStatsView
FinalStatsView :: String -> String -> SamplingStatsWriter Double -> Event Bool -> ResultTransform -> ResultTransform -> FinalStatsView

-- | This is a title for the view.
finalStatsTitle :: FinalStatsView -> String

-- | This is a description used in HTML.
finalStatsDescription :: FinalStatsView -> String

-- | It shows the sampling statistics.
finalStatsWriter :: FinalStatsView -> SamplingStatsWriter Double

-- | It specifies the predicate that defines when we count data when
--   gathering the statistics.
finalStatsPredicate :: FinalStatsView -> Event Bool

-- | The transform applied to the results before receiving series.
finalStatsTransform :: FinalStatsView -> ResultTransform

-- | It defines the series for which the statistics to be collected.
finalStatsSeries :: FinalStatsView -> ResultTransform

-- | The default statistics view.
defaultFinalStatsView :: FinalStatsView
instance ExperimentView FinalStatsView (WebPageRenderer a)


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>ExperimentSpecsView</a> that shows the
--   experiment specs.
module Simulation.Aivika.Experiment.ExperimentSpecsView

-- | Defines the <tt>View</tt> that shows the experiment specs.
data ExperimentSpecsView
ExperimentSpecsView :: String -> String -> ExperimentSpecsWriter -> ExperimentSpecsView

-- | The title for the view.
experimentSpecsTitle :: ExperimentSpecsView -> String

-- | The description for the view.
experimentSpecsDescription :: ExperimentSpecsView -> String

-- | It shows the specs.
experimentSpecsWriter :: ExperimentSpecsView -> ExperimentSpecsWriter

-- | This is the default view.
defaultExperimentSpecsView :: ExperimentSpecsView
instance ExperimentView ExperimentSpecsView (WebPageRenderer a)


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>InfoView</a> that shows the description of
--   series.
module Simulation.Aivika.Experiment.InfoView

-- | Defines the <tt>View</tt> that shows the description of series.
data InfoView
InfoView :: String -> String -> ResultTransform -> ResultTransform -> ResultLocalisation -> InfoView

-- | This is a title for the view.
infoTitle :: InfoView -> String

-- | This is a text description used in HTML.
infoDescription :: InfoView -> String

-- | The transform applied to the results before receiving series.
infoTransform :: InfoView -> ResultTransform

-- | It defines the series for which the description is shown.
infoSeries :: InfoView -> ResultTransform

-- | It specifies the localisation.
infoLocalisation :: InfoView -> ResultLocalisation

-- | The default description view.
defaultInfoView :: InfoView
instance ExperimentView InfoView (WebPageRenderer a)


-- | Tested with: GHC 7.10.1
--   
--   It defines a renderer that saves the results in files when running the
--   simulation experiment.
module Simulation.Aivika.Experiment.FileRenderer

-- | It defines a simulation <a>Experiment</a> renderer that saves the
--   results in files.
data FileRenderer a

-- | A file renderer that depends on the provided parameter.
FileRenderer :: a -> FileRenderer a

-- | A convenient type synonym for describing a file generator.
type FileGenerator a = ExperimentGenerator (FileRenderer a)

-- | Saving the results of simulation in files when running the experiment.
instance ExperimentRendering (FileRenderer a)


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>TableView</a> that saves the simulation results
--   in the CSV file(s).
module Simulation.Aivika.Experiment.TableView

-- | Defines the <tt>View</tt> that saves the simulation results in the CSV
--   file(s).
data TableView
TableView :: String -> String -> String -> String -> ExperimentFilePath -> String -> ShowS -> Event Bool -> ResultTransform -> ResultTransform -> TableView

-- | This is a title used in HTML.
tableTitle :: TableView -> String

-- | This is a description in the HTML.
tableDescription :: TableView -> String

-- | It specifies the text for the link which is displayed in the HTML page
--   if there is only one simulation run. The link downloads the
--   corresponded CSV file in the browser. If there are more simulation
--   runs, then this link is not shown.
--   
--   An example is
--   
--   <pre>
--   tableLinkText = "Download the CSV file"
--   </pre>
tableLinkText :: TableView -> String

-- | It specifies the link text which is displayed in the HTML page if
--   there are many simulation runs. Such a link downloads the CSV file for
--   the corresponded run. To define the text, you can use special
--   variables <tt>$LINK</tt>, <tt>$RUN_INDEX</tt> and <tt>$RUN_COUNT</tt>.
--   
--   An example is
--   
--   <pre>
--   tableRunLinkText = "$LINK / Run $RUN_INDEX of $RUN_COUNT"
--   </pre>
--   
--   If there is only one run, then the link of this kind is not displayed.
--   Instead, only one link is shown, which text is defined by the
--   <a>tableLinkText</a> field.
tableRunLinkText :: TableView -> String

-- | It defines the file name for each CSV file. It may include special
--   variables <tt>$TITLE</tt>, <tt>$RUN_INDEX</tt> and
--   <tt>$RUN_COUNT</tt>.
--   
--   An example is
--   
--   <pre>
--   tableFileName = UniqueFilePath "$TITLE - $RUN_INDEX.csv"
--   </pre>
tableFileName :: TableView -> ExperimentFilePath

-- | It defines the separator for the view. It delimits the cells in the
--   rows of the CSV file.
tableSeparator :: TableView -> String

-- | It defines the formatter which is applied to all values before they
--   will be written in the CSV file(s).
tableFormatter :: TableView -> ShowS

-- | It specifies the predicate that defines when we can save data in the
--   table.
tablePredicate :: TableView -> Event Bool

-- | The transform applied to the results before receiving series.
tableTransform :: TableView -> ResultTransform

-- | It defines the series to save in the CSV file(s).
tableSeries :: TableView -> ResultTransform

-- | The default table view.
defaultTableView :: TableView
instance ExperimentView TableView (FileRenderer a)
instance ExperimentView TableView (WebPageRenderer a)


-- | Tested with: GHC 7.10.1
--   
--   The module defines <a>FinalTableView</a> that saves the simulation
--   results in the final time points for all simulation runs in the CSV
--   file.
module Simulation.Aivika.Experiment.FinalTableView

-- | Defines the <tt>View</tt> that saves the simulation results in the
--   final time points for all simulation runs in the CSV file.
data FinalTableView
FinalTableView :: String -> String -> String -> String -> ExperimentFilePath -> String -> ShowS -> Event Bool -> ResultTransform -> ResultTransform -> FinalTableView

-- | This is a title used in HTML.
finalTableTitle :: FinalTableView -> String

-- | This is a description used in HTML.
finalTableDescription :: FinalTableView -> String

-- | Translated text "Run".
finalTableRunText :: FinalTableView -> String

-- | It specifies the text for the link which is displayed in the HTML
--   page. The link downloads the corresponded CSV file in the browser.
--   
--   An example is
--   
--   <pre>
--   finalTableLinkText = "Download the CSV file"
--   </pre>
finalTableLinkText :: FinalTableView -> String

-- | It defines the file name for the CSV file. It may include special
--   variable <tt>$TITLE</tt>.
--   
--   An example is
--   
--   <pre>
--   finalTableFileName = UniqueFilePath "$TITLE.csv"
--   </pre>
finalTableFileName :: FinalTableView -> ExperimentFilePath

-- | It defines the separator for the view. It delimits the cells in the
--   rows of the CSV file.
finalTableSeparator :: FinalTableView -> String

-- | It defines the formatter which is applied to all values before they
--   will be written in the CSV file.
finalTableFormatter :: FinalTableView -> ShowS

-- | It specifies the predicate that defines when we can save data in the
--   table.
finalTablePredicate :: FinalTableView -> Event Bool

-- | The transform applied to the results before receiving series.
finalTableTransform :: FinalTableView -> ResultTransform

-- | It defines the series to save in the CSV file.
finalTableSeries :: FinalTableView -> ResultTransform

-- | The default table view.
defaultFinalTableView :: FinalTableView
instance ExperimentView FinalTableView (FileRenderer a)
instance ExperimentView FinalTableView (WebPageRenderer a)


-- | Tested with: GHC 7.10.1
--   
--   This module re-exports the library functionality.
module Simulation.Aivika.Experiment
