-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Painfully simple URL writing combinators
--   
--   Simple URL DSL for Haskell.
--   
--   This library tries to make it easier for people to write Url strings,
--   structurally. Packages like <a>Yesod Routes</a> do a wonderful job at
--   implementing string-free routing and references, but sometimes we have
--   to compromise. This tries to make that compromise less painful.
--   
--   Use bare combinators to render your strings (kinda useless):
--   
--   <pre>
--   expandRelative $ "foo.php" &lt;?&gt; ("key1","bar") &lt;&amp;&gt; ("key2","baz")
--   
--   ↪ "foo.php?key1=bar&amp;key2=baz"
--   </pre>
--   
--   ... or use the MonadReader instance for a configurable host:
--   
--   <pre>
--   let path = runAbsoluteUrl $ url $ "foo.php" &lt;?&gt; ("key1","bar") &lt;&amp;&gt; ("key2","baz")
--   path "example.com"
--   
--   ↪ "example.com/foo.php?key1=bar&amp;key2=baz"
--   </pre>
--   
--   <tt>url</tt> puts the <tt>UrlString</tt> in a MonadReader that we can
--   use for applying our host. We use different monads for different
--   deployment schemes (currently we have 3 - <tt>RelativeUrl</tt>,
--   <tt>GroundedUrl</tt>, and <tt>AbsoluteUrl</tt>), which we can
--   integrate in different libraries, like Lucid:
--   
--   <pre>
--   (runAbsoluteUrl $ renderTextT $ do
--       foo &lt;- lift $ url $ "foo" &lt;?&gt; ("bar","baz")
--       script_ [src_ foo] "" )
--   ) "example.com"
--   
--   ↪ "&lt;script src=\"example.com/foo?bar=baz\"&gt;&lt;/script&gt;"
--   </pre>
--   
--   ... and in Scotty ...
--   
--   <pre>
--   main :: IO ()
--   main = scottyT 3000
--       rootConf
--       rootConf
--       run
--   
--     where
--       rootConf = flip runAbsoluteT "http://example.com"
--   
--       run :: ( MonadIO m
--              , MonadReader T.Text m
--              , Url T.Text m ) =&gt;
--              ScottyT LT.Text m ()
--       run = get "/" $ do
--         path &lt;- lift $ url $ "foo" &lt;?&gt; ("bar","baz")
--         text $ LT.fromStrict path
--   
--   λ&gt; curl localhost:3000/
--   ↪ "http://example.com/foo?bar=baz"
--   </pre>
--   
--   Note that in the scotty example, we don't use one of our deployment
--   schemes - this is because the <tt>scottyT</tt> function expects it's
--   underlying monad to be an instance of <tt>MonadIO</tt>, which we can
--   only instantiate in our monad transformers.
--   
--   Please take mind - the string type underlying the Url rendering is
--   generalized to <tt>Data.String.IsString</tt> for convenient use with
--   <tt>-XOverloadedStrings</tt>. However, due to that generality, we need
--   to specify the monomorphic type (like <tt>Data.Text.Text</tt> above).
@package urlpath
@version 2.1.0

module Data.Url.Types

-- | Abstract data type for a Url - a "target" and GET parameters. We
--   require <tt>IsString</tt> and <tt>Monoid</tt> for generic
--   construction, but rendering will require a monomorphic type.
--   
--   The type constructor is parameterized over it's underlying
--   <tt>IsString</tt> &amp; <tt>Monoid</tt> instance.
data QueryString a
[QueryString] :: a -> [(a, a)] -> Maybe a -> QueryString a

-- | We can't provide a <tt>Show</tt> instance for <tt>QueryString</tt>
--   because that would force us to use <tt>String</tt>.
showUrlString :: QueryString a -> a

-- | Makes a <tt>QueryString</tt> out of a raw target path and a GET
--   parameter pair.
(<?>) :: (TextualMonoid a) => a -> (a, a) -> QueryString a

-- | Adds another GET parameter pair to a <tt>QueryString</tt>.
(<&>) :: (TextualMonoid a) => QueryString a -> (a, a) -> QueryString a
class Hashable l r
(<#>) :: Hashable l r => l -> r -> QueryString r
fromRoute :: (TextualMonoid a) => ([a], [(a, a)]) -> QueryString a

-- | Render the Url String flatly - without anything prepended to the
--   target.
expandRelative :: (TextualMonoid plain) => QueryString plain -> plain

-- | Render the Url String as grounded - prepended with a "root"
--   <tt>//</tt> character.
expandGrounded :: (TextualMonoid plain) => QueryString plain -> plain

-- | Render the Url String as absolute - getting the root from a
--   <tt>MonadReader</tt> context.
expandAbsolute :: (MonadReader plain m, TextualMonoid plain) => QueryString plain -> m plain

-- | Render the Url String as absolute, but with your own configuration
--   type.
--   
--   <pre>
--   data SiteConfig = SiteConfig { host :: T.Text
--                                , cdnHost :: T.Text
--                                }
--     deriving (Show, Eq)
--   
--   foo :: HtmlT (Reader SiteConfig) ()
--   foo = do
--     url &lt;- lift $ expandAbsoluteWith ("foo.php" &lt;?&gt; ("bar","baz")) host
--     script_ [src_ url] ""
--   
--   bar :: LT.Text
--   bar = (runReader (runTextT foo)) $
--     SiteConfig "example.com" "cdn.example.com"
--   </pre>
expandAbsoluteWith :: (MonadReader a m, TextualMonoid plain) => QueryString plain -> (a -> plain) -> m plain
newtype RelativeUrlT h m b
[RelativeUrlT] :: (h -> m b) -> RelativeUrlT h m b
[runRelativeUrlT] :: RelativeUrlT h m b -> h -> m b
type RelativeUrl h b = RelativeUrlT h Identity b
newtype GroundedUrlT h m b
[GroundedUrlT] :: (h -> m b) -> GroundedUrlT h m b
[runGroundedUrlT] :: GroundedUrlT h m b -> h -> m b
type GroundedUrl h b = GroundedUrlT h Identity b
newtype AbsoluteUrlT h m b
[AbsoluteUrlT] :: (h -> m b) -> AbsoluteUrlT h m b
[runAbsoluteUrlT] :: AbsoluteUrlT h m b -> h -> m b
type AbsoluteUrl h b = AbsoluteUrlT h Identity b
instance Functor m => Functor (AbsoluteUrlT h m)
instance Functor m => Functor (GroundedUrlT h m)
instance Functor m => Functor (RelativeUrlT h m)
instance TextualMonoid a => Hashable a a
instance TextualMonoid a => Hashable (QueryString a) a
instance Applicative f => Applicative (RelativeUrlT h f)
instance Monad m => Monad (RelativeUrlT h m)
instance MonadTrans (RelativeUrlT h)
instance (Monad m, IsString h) => MonadReader h (RelativeUrlT h m)
instance MonadIO m => MonadIO (RelativeUrlT h m)
instance Applicative f => Applicative (GroundedUrlT h f)
instance Monad m => Monad (GroundedUrlT h m)
instance MonadTrans (GroundedUrlT h)
instance (Monad m, IsString h) => MonadReader h (GroundedUrlT h m)
instance MonadIO m => MonadIO (GroundedUrlT h m)
instance Applicative f => Applicative (AbsoluteUrlT h f)
instance Monad m => Monad (AbsoluteUrlT h m)
instance MonadTrans (AbsoluteUrlT h)
instance (Monad m, IsString h) => MonadReader h (AbsoluteUrlT h m)
instance MonadIO m => MonadIO (AbsoluteUrlT h m)

module Data.Url

-- | Overload deployment schemes with this - then, all that's needed is a
--   type coercion to change deployment.
class Url plain m => UrlReader plain m where type family Result m :: * -> *
runUrlReader :: (UrlReader plain m, Url plain m) => m b -> plain -> Result m b

-- | <tt>Url</tt> is a relationship between an underlying string type
--   <tt>plain</tt>, and a deployment context <tt>m</tt>. We try to make
--   the deployment style coercible at the top level - if the expression
--   has a type <tt>Url String (AbsoluteUrlT String Identity)</tt> or
--   <tt>Monad m =&gt; Url T.Text (GroundedUrlT LT.Text m)</tt> will force
--   <i>all use-cases within the expression</i> to coerce to that type.
class (TextualMonoid plain, MonadReader plain m) => Url plain (m :: * -> *)
queryUrl :: Url plain m => QueryString plain -> m plain
plainUrl :: Url plain m => plain -> m plain
instance (Monad m, TextualMonoid plain) => Url plain (RelativeUrlT plain m)
instance (Monad m, TextualMonoid plain) => UrlReader plain (RelativeUrlT plain m)
instance (Monad m, TextualMonoid plain) => Url plain (GroundedUrlT plain m)
instance (Monad m, TextualMonoid plain) => UrlReader plain (GroundedUrlT plain m)
instance (Monad m, TextualMonoid plain) => Url plain (AbsoluteUrlT plain m)
instance (Monad m, TextualMonoid plain) => UrlReader plain (AbsoluteUrlT plain m)
