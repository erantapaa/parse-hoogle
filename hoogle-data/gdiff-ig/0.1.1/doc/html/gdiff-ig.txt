-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generic diff for the instant-generics library
--   
--   The generic diff of <a>http://hackage.haskell.org/package/gdiff</a>
--   adapted to the
--   <a>http://hackage.haskell.org/package/instant-generics</a> library.
--   
--   The Test.hs file (included in the package) shows an example of use of
--   this library.
@package gdiff-ig
@version 0.1.1

module Generics.Instant.GDiff

-- | Generic diff
diff :: GDiff a => a -> a -> EditScript

-- | Generic diff
patch :: GDiff a => EditScript -> a -> Maybe a

-- | Edit distance
diffLen :: GDiff a => a -> a -> Float

-- | Tying the recursive knot
class (Typeable a, SEq a, Children a, Build a) => GDiff a

-- | Shallow equality: compare the constructor name only
class SEq a
shallowEq :: SEq a => a -> a -> Bool
shallowEqDef :: (Representable a, SEq' (Rep a)) => a -> a -> Bool

-- | Rebuilds a term, replacing the children with elements from the list
class Build a
build :: Build a => a -> [Ex] -> Maybe (a, [Ex])
buildDef :: (Representable a, Build' (Rep a)) => a -> [Ex] -> Maybe (a, [Ex])

-- | Gets all the immediate children of a term
class Children a
children :: Children a => a -> [Ex]
childrenDef :: (Representable a, Children' (Rep a)) => a -> [Ex]

-- | Existentials
data Ex
Ex :: !a -> Ex
instance Show Edit
instance Show EditScript
instance Show Ex
instance GDiff a => GDiff [a]
instance GDiff Int
instance GDiff Char
instance SEq [a]
instance SEq Int
instance SEq Char
instance SEq' (C c a)
instance (SEq' a, SEq' b) => SEq' (a :+: b)
instance Typeable a => Build [a]
instance Build Int
instance Build Char
instance GDiff a => Build' (Rec a)
instance GDiff a => Build' (Var a)
instance Build' a => Build' (C c a)
instance (Build' a, Build' b) => Build' (a :*: b)
instance (Build' a, Build' b) => Build' (a :+: b)
instance Build' U
instance GDiff a => Children [a]
instance Children Int
instance Children Char
instance GDiff a => Children' (Rec a)
instance GDiff a => Children' (Var a)
instance Children' a => Children' (C c a)
instance (Children' a, Children' b) => Children' (a :*: b)
instance (Children' a, Children' b) => Children' (a :+: b)
instance Children' U
