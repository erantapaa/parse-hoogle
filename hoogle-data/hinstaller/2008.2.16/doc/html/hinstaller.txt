-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Installer wrapper for Haskell applications
--   
--   This module allows you to incorporate arbitrary files into a haskell
--   module during compilation. The files are then available to you through
--   functions which allows you to write installer-type applications which
--   write out the files when run. Thus this can be considered in the same
--   model as Java .jar files or executable zip or other file archives.
--   
--   The current implementation is now reasonably efficient. However, it
--   does require that you have a C compiler installed which can be invoked
--   through <tt>cc</tt>.
@package hinstaller
@version 2008.2.16


-- | This module allows you to include any file into a module during
--   compilation. You can then write out the file at run time.
--   
--   Expected use is via the Template Haskell splicing syntax. E.g.
--   
--   <pre>
--   $(installBinariesFunc "installMyFiles"
--     [("FileOne", "/foo/bar/fileOne.txt"),
--      ("FileTwo", "/foo/bar/fileTwo.txt"),
--      ("Three",   "/foo/baz/thirdFile.qux")
--     ])
--   </pre>
--   
--   This will cause an enumeration ADT to be defined as:
--   
--   <pre>
--   data Installer_installMyFiles =
--            Installer_installMyFiles_FileOne
--          | Installer_installMyFiles_FileTwo
--          | Installer_installMyFiles_Three
--   </pre>
--   
--   with instances for Enum, Eq, Ord and Show. The install for Show will
--   return the <tt>fst</tt> element of the tuple in the list passed to
--   <a>installBinariesFunc</a>. A function called <tt>installMyFiles</tt>
--   will also be defined of type <tt>Installer_installMyFiles -&gt;
--   FilePath -&gt; IO ()</tt>. Calling this will cause the file content to
--   be written out to the filepath. If the filepath provided is a
--   directory, then the file will be created within that directory with
--   the same name as the leaf of the path in the <tt>snd</tt> elem of the
--   tuples passed to <a>installBinariesFunc</a>.
--   
--   Note that the files written out are not set executable so you must
--   correct file permissions yourself.
--   
--   The module works by, at compile time, reading in the files specified
--   and converting them to C files with a header. These files will be
--   stored in a directory called <tt>hinstaller-tmp</tt> under the same
--   leaf name as the original. Then, the module calls a C compiler by
--   invoking the process <tt>cc</tt> which must exist. Finally, the names
--   of the files must be passed to the linker. With GHC, use <tt>-optl
--   hinstaller-tmp/<i>file</i>.o</tt> where <i>file</i> is the name of the
--   file you're including. Repeat for each file.
--   
--   In order to clean up this <tt>hinstaller-tmp</tt> directory, the
--   module exports a function <a>cabalCleanHInstallerDir</a>. To use this,
--   modify your <tt>Setup.hs</tt> along the lines of the following:
--   
--   <pre>
--   #!/usr/bin/env runghc
--   
--   import Distribution.Simple
--   import System.Installer
--   
--   main = defaultMainWithHooks myHooks
--   
--   myHooks :: UserHooks
--   myHooks = defaultUserHooks { postBuild = cabalCleanHInstallerDir }
--   </pre>
--   
--   Then, once the build is complete, the directory will be cleaned up.
--   With Cabal, use the <tt>ld-options</tt> field to pass in the names of
--   compiled C files: <tt>ld-options: hinstaller-tmp/<i>file</i>.o</tt>
module System.Installer
installBinariesFunc :: String -> [(String, FilePath)] -> Q [Dec]
cabalCleanHInstallerDir :: Args -> BuildFlags -> PackageDescription -> LocalBuildInfo -> IO ExitCode
