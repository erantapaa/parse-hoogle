-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | High-level file download based on URLs
--   
--   High-level file download based on URLs
--   
--   Download web content as strict bytestring, strings, HTML tags, XML,
--   RSS or Atom feeds or JSON, via HTTP, FTP or file protocols, using a
--   URL interface.
--   
--   Importing the library:
--   
--   <pre>
--   import Network.Download
--   </pre>
--   
--   Loading a webpage as a <a>ByteString</a>:
--   
--   <pre>
--   doc  &lt;- openURI "http://haskell.org"
--   </pre>
--   
--   Loading from a file:
--   
--   <pre>
--   doc  &lt;- openURI "file:///tmp/A.hs"
--   </pre>
--   
--   Loading a HTML page as a list of tags:
--   
--   <pre>
--   tags &lt;- openAsTags "http://haskell.org"
--   </pre>
--   
--   Loading a HTML page as XML:
--   
--   <pre>
--   tags &lt;- openAsXML "http://haskell.org"
--   </pre>
--   
--   Loading an RSS or Atom feed:
--   
--   <pre>
--   feed &lt;- openAsFeed "http://haskell.org"
--   </pre>
--   
--   These data types can the be processed further with the XML, Feed and
--   TagSoup libraries.
@package download
@version 0.3.2


-- | A binding to libdownload, an efficient, high level library for
--   retrieving files using Uniform Resource Locators (URLs). This provides
--   simple, uniform access to file, FTP and HTTP resources. Content may be
--   retrieved as a strings, <a>ByteString</a> or parsed as HTML tags, XML
--   or RSS and Atom feeds.
--   
--   Error handling is encapsulated in the <a>Either</a> type.
module Network.Download

-- | Download content specified by url (in RFC1738 form), using either FTP,
--   HTTP or file protocols, returning the content as a strict
--   <a>ByteString</a>.
--   
--   If the url is malformed, a <a>Left</a> value is returned. Similarly,
--   if an error occurs, <a>Left</a> is returned, with a protocol-specific
--   error string.
--   
--   If the file protocol is used, documents will be retrieved from the
--   local filesystem. If the ftp scheme is used, the FTP protocol (RFC959)
--   is used. If no user name or passoword are provided, anonymous login,
--   with user name <tt>anonymous</tt> and password <tt>anonymous</tt> will
--   be attempted.
--   
--   If the http method is used, HTTP/1.1 will be used.
--   
--   Examples:
--   
--   <pre>
--   openURI "http://haskell.org"
--   </pre>
openURI :: String -> IO (Either String ByteString)

-- | Like openURI, but returns the result as a <a>String</a>
--   
--   Examples:
--   
--   <pre>
--   openURIString "http://haskell.org"
--   </pre>
openURIString :: String -> IO (Either String String)

-- | Download the content as for <a>openURI</a>, but return it as a list of
--   parsed tags using the tagsoup html parser.
openAsTags :: String -> IO (Either String [Tag String])

-- | Download the content as for <a>openURI</a>, but return it as parsed
--   XML, using the xml-light parser.
openAsXML :: String -> IO (Either String [Content])

-- | Download the content as for <a>openURI</a>, but return it as parsed
--   RSS or Atom content, using the feed library parser.
openAsFeed :: String -> IO (Either String Feed)
instance Eq URL
instance Ord URL
instance Show URL
instance Eq Flag
instance Show Flag
instance Eq DLError
instance Show DLError
