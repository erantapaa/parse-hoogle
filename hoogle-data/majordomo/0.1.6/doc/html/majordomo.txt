-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Majordomo protocol for ZeroMQ
--   
--   The Majordomo Protocol (MDP) defines a reliable service-oriented
--   request-reply dialog between a set of client applications, a broker
--   and a set of worker applications. MDP covers presence, heartbeating,
--   and service-oriented request-reply processing. It originated from the
--   Majordomo pattern defined in Chapter 4 of the Guide.
--   http:<i></i>rfc.zeromq.org/spec:7
@package majordomo
@version 0.1.6

module System.Network.ZMQ.MDP.Client
data Response
Response :: Protocol -> ByteString -> [ByteString] -> Response
protocol :: Response -> Protocol
service :: Response -> ByteString
response :: Response -> [ByteString]
data ClientSocket
data ClientError
ClientTimedOut :: ClientError
ClientBadProtocol :: ClientError
sendAndReceive :: ClientSocket -> ByteString -> [ByteString] -> IO (Either ClientError Response)
withClientSocket :: String -> (ClientSocket -> IO a) -> IO a

module System.Network.ZMQ.MDP.Worker
data Protocol
WORKER_PROTOCOL :: Protocol
type Address = ByteString
data Response
Response :: ![Address] -> ![ByteString] -> Response
envelope :: Response -> ![Address]
body :: Response -> ![ByteString]
data ResponseCode
REPLY :: ResponseCode
READY :: ResponseCode
WORKER_HEARTBEAT :: ResponseCode
data CommandCode
REQUEST :: CommandCode
HEARTBEAT :: CommandCode
DISCONNECT :: CommandCode
parseCommand :: ByteString -> Maybe CommandCode
type MDError = ByteString
sendToBroker :: Socket a -> ResponseCode -> [ByteString] -> [ByteString] -> IO ()
sendResponse :: Socket a -> Response -> IO ()
whileJust :: Monad m => (b -> m (Maybe b)) -> b -> m b
start :: WorkerState a -> IO ()
readTillDrop :: Socket a -> WorkerState a1 -> IO (WorkerState a1)
data WorkerState a
WorkerState :: !UTCTime -> !Int -> !Int64 -> !Int -> String -> Context -> ByteString -> ([ByteString] -> IO [ByteString]) -> WorkerState a
heartbeat_at :: WorkerState a -> !UTCTime
liveness :: WorkerState a -> !Int
heartbeat :: WorkerState a -> !Int64
reconnect :: WorkerState a -> !Int
broker :: WorkerState a -> String
context :: WorkerState a -> Context
svc :: WorkerState a -> ByteString
handler :: WorkerState a -> [ByteString] -> IO [ByteString]
epoch :: UTCTime
lIVENESS :: Int
withWorker :: String -> ByteString -> ([ByteString] -> IO [ByteString]) -> IO ()
withBroker :: (Socket XReq -> WorkerState a -> IO b) -> WorkerState t -> IO b
loggedPut :: String -> IO ()
receive :: Socket a -> WorkerState a1 -> IO (Maybe (WorkerState a2))
instance Show CommandCode
instance Show ResponseCode
instance Show Protocol
