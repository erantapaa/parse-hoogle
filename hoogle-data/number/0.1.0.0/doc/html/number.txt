-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for real numbers
--   
--   Data.Number is an attempt to give an almost complete representation
--   and arithmetics to real numbers without precision loss using continued
--   fractions and Gosper’s algorithms.
@package number
@version 0.1.0.0


-- | Value-level Peano arithmetic.
module Data.Number.Peano

-- | Lazy Peano numbers. Allow calculation with infinite values.
data Nat

-- | Zero
[Z] :: Nat

-- | Successor
[S] :: Nat -> Nat

-- | Sign for whole numbers.
data Sign
[Pos] :: Sign
[Neg] :: Sign

-- | Whole numbers (Z).
data Whole

-- | Construct a whole number out of a magnitue and a sign.
[Whole] :: Nat -> Sign -> Whole

-- | The class of Peano-like constructions (i.e. Nat and Whole).
class Enum a => Peano a
isZero :: Peano a => a -> Bool
infinity :: Peano a => a
fromPeano :: Peano a => a -> Integer
decr :: Peano a => a -> a

-- | Negation of <a>isZero</a>.
isSucc :: Peano n => n -> Bool

-- | Peano class instance

-- | Peano class instance defines infinity (positive) and other functions
--   handling the sign

-- | Removes at most <a>S</a> constructors from a Peano number. Outputs the
--   number of removed constructors and the remaining number.
takeNat :: (Num a, Enum a, Ord a, Peano n) => a -> n -> (a, n)

-- | Extract the <a>Nat</a> value of a <a>Whole</a>
toNat :: Whole -> Nat

-- | Alias to quot
(//) :: Integral a => a -> a -> a

-- | The lower bound is zero, the upper bound is infinity.

-- | The bounds are negative and positive infinity.

-- | The <a>pred</a> function is bounded at Zero.

-- | <a>succ</a> and <a>pred</a> work according to the total order on the
--   whole numbers, i.e. <tt>succ n = n+1</tt> and <tt>pred n = n-1</tt>.

-- | Addition, multiplication, and subtraction are lazy in both arguments,
--   meaning that, in the case of infinite values, they can produce an
--   infinite stream of S-constructors. As long as the callers of these
--   functions only consume a finite amount of these, the program will not
--   hang.
--   
--   <tt>fromInteger</tt> is not injective in case of <a>Nat</a>, since
--   negative integers are all converted to zero (<a>Z</a>).

-- | Implements arithmetics for Whole numbers

-- | <a>==</a> and <a>/=</a> work as long as at least one operand is
--   finite.

-- | Positive and negative zero are considered equal.

-- | All methods work as long as at least one operand is finite.

-- | The ordering is the standard total order on Z. Positive and negative
--   zero are equal.

-- | Returns the length of a foldable container as <a>Nat</a>. The number
--   is generated lazily and thus, infinitely large containers are
--   supported.
natLength :: Foldable f => f a -> Nat

-- | Since <a>toRational</a> returns a <tt>Ratio Integer</tt>, it WILL NOT
--   terminate on infinities.

-- | Since <a>toRational</a> returns a <tt>Ratio Integer</tt>, it WILL NOT
--   terminate on infinities.

-- | Since negative numbers are not allowed, <tt><a>quot</a> =
--   <a>div</a></tt> and <tt><a>rem</a> = <a>mod</a></tt>. The methods
--   <a>quot</a>, <a>rem</a>, <a>div</a>, <a>mod</a>, <a>quotRem</a> and
--   <a>divMod</a> will terminate as long as their first argument is
--   finite. Infinities in their second arguments are permitted and are
--   handled as follows:
--   
--   <pre>
--   n <a>quot</a> infinity   =   n <a>div</a> infinity   =   0
--   n <a>rem</a>  infinity   =   n <a>mod</a> infinity   =   n
--   </pre>

-- | Integer conversions and division
instance Bounded Sign
instance Read Sign
instance Enum Sign
instance Ord Sign
instance Eq Sign
instance Show Sign
instance Show Nat
instance Peano Nat
instance Peano Whole
instance Bounded Nat
instance Bounded Whole
instance Enum Nat
instance Enum Whole
instance Num Nat
instance Num Whole
instance Eq Nat
instance Eq Whole
instance Ord Nat
instance Ord Whole
instance Real Nat
instance Real Whole
instance Integral Nat
instance Integral Whole


-- | Definition of the continued fraction type
module Data.Number.Types

-- | <h2>Continued fraction type</h2>
--   
--   Represents a simple continued fraction of the form:
--   
--   
--   Supports Haskell arithmetic operators though the use of the
--   <tt>operator</tt> function is to be preferred since provide shortcuts
--   to calculations.
--   
--   It can be an infinite sequence. Be careful with functions like
--   <tt>show</tt> and <tt>precision</tt>: they may not terminate.
--   
--   <h3>Cons operator</h3>
--   
--   <tt>n :| x </tt> equivalent to <tt>n</tt> + 1/<tt>x</tt>
--   
--   <h3>Negate operator</h3>
--   
--   <tt>M x </tt> equivalent to <tt>-x</tt>
data Continued a

-- | Negative number
[M] :: (Continued a) -> Continued a

-- | Positive number
[:|] :: a -> (Continued a) -> Continued a

-- | Zero
[E] :: Continued a

-- | Real numbers datatype (a continued fraction of naturals)
type Number = Continued Nat
instance Read a => Read (Continued a)
instance Show a => Show (Continued a)
instance Ord a => Ord (Continued a)
instance Eq a => Eq (Continued a)


-- | Data.Number internals
module Data.Number.Internal

-- | Operator Matrix
type Matrix = (Whole, Whole, Whole, Whole, Whole, Whole, Whole, Whole)

-- | Continued fraction operator (implements Gosper's arithmetics)
--   
--   Given two <a>Number</a> <tt>x</tt>, <tt>y</tt> and the operator matrix
--   
--   
--   calculates
--   
--   
--   See <a>http://perl.plover.com/yak/cftalk/INFO/gosper.txt</a> for a
--   complete explanation.
operator :: Matrix -> Number -> Number -> Number

-- | Truncate a <a>Number</a> to a given length <tt>n</tt>
cut :: Nat -> Number -> Number

-- | Extract the first natural of the fraction as a <a>Whole</a> number
first :: Number -> Whole

-- | Extract the "tail" of a <a>Number</a> as a new <a>Number</a>
--   Equivalent to <tt>(x - floor x)</tt> for a floating point.
rest :: Number -> Number

-- | Split a Number into a <a>Whole</a> (the most significant of the
--   fraction) and the rest of the Number. Equivalent to <tt>(floor x, x -
--   floor x)</tt> for a floating point.
split :: Number -> (Whole, Number)


-- | Class instances for the continued fraction datatype
module Data.Number.Instances

-- | transform a number applying a function (<tt>Nat</tt> -&gt;
--   <tt>Nat</tt>) to each number preserving the sign.

-- | Basic Foldable instance implemented exactly as a list.

-- | Same as above.

-- | The sign is given by the first number of the fraction. Other number
--   are always considered positive.

-- | Allows conversion to a rational

-- | Allows division between <a>Number</a>s and conversion from a rational

-- | Convert a <a>Number</a> into a <a>RealFrac</a> number
fromNumber :: RealFrac a => Number -> a

-- | Convert a <a>RealFrac</a> number into a <a>Number</a>
toNumber :: (Show a, RealFrac a) => a -> Number
instance Functor Continued
instance Foldable Continued
instance Traversable Continued
instance Num Number
instance Real Number
instance Fractional Number


-- | Common functions and constants
module Data.Number.Functions

-- | Get the precision of a <a>Number</a> (i.e. length)
precision :: Number -> Nat

-- | Alternative show function that pretty prints a <a>Number</a> also
--   doing conversions from Peano numbers
show' :: Number -> String

-- | Create a <a>Number</a> from a list of naturals
fromList :: [Nat] -> Number

-- | Convert a <a>Number</a> to a list of naturals (losing the sign)
toList :: Number -> [Nat]

-- | The infinite continued fraction whose terms are naturals numbers
--   
σ :: Number

-- | The golden ratio
--   
φ :: Number

-- | Pi: the ratio of a circle's circumference to its diameter
--   
π :: Number

-- | Euler's number: the base of the natural logarithm
--   
e :: Number


-- | A library for real number arithmetics
module Data.Number

-- | <h2>Continued fraction type</h2>
--   
--   Represents a simple continued fraction of the form:
--   
--   
--   Supports Haskell arithmetic operators though the use of the
--   <tt>operator</tt> function is to be preferred since provide shortcuts
--   to calculations.
--   
--   It can be an infinite sequence. Be careful with functions like
--   <tt>show</tt> and <tt>precision</tt>: they may not terminate.
--   
--   <h3>Cons operator</h3>
--   
--   <tt>n :| x </tt> equivalent to <tt>n</tt> + 1/<tt>x</tt>
--   
--   <h3>Negate operator</h3>
--   
--   <tt>M x </tt> equivalent to <tt>-x</tt>
data Continued a

-- | Negative number
[M] :: (Continued a) -> Continued a

-- | Positive number
[:|] :: a -> (Continued a) -> Continued a

-- | Zero
[E] :: Continued a

-- | Real numbers datatype (a continued fraction of naturals)
type Number = Continued Nat

-- | Lazy Peano numbers. Allow calculation with infinite values.
data Nat

-- | Zero
[Z] :: Nat

-- | Successor
[S] :: Nat -> Nat

-- | Whole numbers (Z).
data Whole

-- | Construct a whole number out of a magnitue and a sign.
[Whole] :: Nat -> Sign -> Whole

-- | Create a <a>Number</a> from a list of naturals
fromList :: [Nat] -> Number

-- | Convert a <a>Number</a> to a list of naturals (losing the sign)
toList :: Number -> [Nat]

-- | Convert a <a>Number</a> into a <a>RealFrac</a> number
fromNumber :: RealFrac a => Number -> a

-- | Convert a <a>RealFrac</a> number into a <a>Number</a>
toNumber :: (Show a, RealFrac a) => a -> Number

-- | The infinite continued fraction whose terms are naturals numbers
--   
σ :: Number

-- | The golden ratio
--   
φ :: Number

-- | Pi: the ratio of a circle's circumference to its diameter
--   
π :: Number

-- | Euler's number: the base of the natural logarithm
--   
e :: Number

-- | Continued fraction operator (implements Gosper's arithmetics)
--   
--   Given two <a>Number</a> <tt>x</tt>, <tt>y</tt> and the operator matrix
--   
--   
--   calculates
--   
--   
--   See <a>http://perl.plover.com/yak/cftalk/INFO/gosper.txt</a> for a
--   complete explanation.
operator :: Matrix -> Number -> Number -> Number

-- | Truncate a <a>Number</a> to a given length <tt>n</tt>
cut :: Nat -> Number -> Number
