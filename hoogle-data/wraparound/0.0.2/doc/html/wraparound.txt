-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convenient handling of points on a seamless 2-dimensional plane
--   
--   WrapAround helps you perform calculations involving points on a
--   finite, unbounded plane, in which objects that move across one edge of
--   the map appear on the other. Add points, calculate distance, and so
--   forth without worrying about the edge cases and frustrating math
--   mistakes.
@package wraparound
@version 0.0.2


-- | WrapAround is a convenience module which helps you perform
--   calculations with points that are supposed to exist on a
--   2-dimensional, finite, unbounded plane. (Or infinite, bounded plane,
--   depending on who you ask.) On such a plane, space wraps around so that
--   an object travelling vertically or horizontally eventually comes back
--   to the place where it started. This allows you to move objects around
--   on a seamless map. For example, in some video games when an object
--   crosses the bottom of the screen it reappears at the top.
--   
--   WrapAround represents the points and handles the common calculations
--   properly so you don't have to bother with the messy math and edge
--   cases. This is done with two data structures: a <a>WrapMap</a>, which
--   stores information about the size of the plane, and a
--   <a>WrapPoint</a>, which stores information about the location of the
--   point.
--   
--   When you need the actual x, y coordinates, use the <a>toCoords</a>
--   conversion function.
--   
--   A WrapPoint is represented internally as a pair of angles, like in a
--   torus. The WrapMap and WrapPoint structures are kept separate because
--   some WrapPoint calculations can be performed without a WrapMap
--   context. Functions typically only need a WrapMap when a WrapPoint must
--   be converted to actual x, y coordinates or vice versa. Typically you
--   do not want perform calculations with WrapPoints that were generated
--   with different WrapMaps, but this is possible and sometimes useful.
--   
--   If you are grateful for this software, I gladly accept donations!
--   
--   <a>https://frigidcode.com/donate/</a>
module Data.WrapAround

-- | Contains the contextual information necessary to convert a WrapPoint
--   to coordinates and vice versa.
data WrapMap
type WM = WrapMap

-- | Generates a <a>WrapMap</a>.
wrapmap :: Double -> Double -> WrapMap

-- | Generates a <a>WrapMap</a>.
wm :: Double -> Double -> WrapMap

-- | A representation of a point location that allows for wrapping in the
--   vertical or horizontal direction.
data WrapPoint
type WP = WrapPoint

-- | Generates a <a>WrapPoint</a>.
wrappoint :: WrapMap -> (Double, Double) -> WrapPoint

-- | Generates a <a>WrapPoint</a>.
wp :: WrapMap -> (Double, Double) -> WrapPoint

-- | Adds two WrapPoints together (vector style).
addPoints :: WrapPoint -> WrapPoint -> WrapPoint

-- | Adds two WrapPoints together (vector style).
add :: WrapPoint -> WrapPoint -> WrapPoint

-- | Adds a WrapPoint and a pair of x, y coordinates (vector style).
addPoints' :: WrapMap -> WrapPoint -> (Double, Double) -> WrapPoint

-- | Adds a WrapPoint and a pair of x, y coordinates (vector style).
add' :: WrapMap -> WrapPoint -> (Double, Double) -> WrapPoint

-- | Finds the distance between two WrapPoints.
distance :: WrapMap -> WrapPoint -> WrapPoint -> Double

-- | Subtracts a WrapPoint from a WrapPoint (vector style).
subtractPoints :: WrapPoint -> WrapPoint -> WrapPoint

-- | Subtracts a WrapPoint from a WrapPoint (vector style).
diff :: WrapPoint -> WrapPoint -> WrapPoint

-- | Subtracts coordinates from a WrapPoint (vector style).
subtractPoints' :: WrapMap -> WrapPoint -> (Double, Double) -> WrapPoint

-- | Subtracts coordinates from a WrapPoint (vector style).
diff' :: WrapMap -> WrapPoint -> (Double, Double) -> WrapPoint

-- | Converts a <a>WrapPoint</a> to coordinates.
toCoords :: WrapMap -> WrapPoint -> (Double, Double)

-- | Converts a <a>WrapPoint</a> to coordinates.
coords :: WrapMap -> WrapPoint -> (Double, Double)

-- | Converts a <a>WrapPoint</a> to coordinates.
vec :: WrapMap -> WrapPoint -> (Double, Double)

-- | Returns the relationship between two WrapPoints as a pair of x, y
--   coordinates (a vector).
vectorRelation :: WrapMap -> WrapPoint -> WrapPoint -> (Double, Double)

-- | Returns the relationship between two WrapPoints as a pair of x, y
--   coordinates (a vector).
relation :: WrapMap -> WrapPoint -> WrapPoint -> (Double, Double)
instance Show WrapMap
instance Show WrapPoint
