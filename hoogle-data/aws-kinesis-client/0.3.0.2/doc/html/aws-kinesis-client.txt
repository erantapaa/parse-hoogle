-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A producer & consumer client library for AWS Kinesis
--   
@package aws-kinesis-client
@version 0.3.0.2


module Aws.Kinesis.Client.Common

-- | The <a>KinesisKit</a> contains what is necessary to make a request to
--   Kinesis.
data KinesisKit
KinesisKit :: !Configuration -> !(KinesisConfiguration NormalQuery) -> !Manager -> KinesisKit
_kkConfiguration :: KinesisKit -> !Configuration
_kkKinesisConfiguration :: KinesisKit -> !(KinesisConfiguration NormalQuery)
_kkManager :: KinesisKit -> !Manager

-- | A lens for <a>_kkConfiguration</a>.
kkConfiguration :: Lens' KinesisKit Configuration

-- | A lens for <a>_kkKinesisConfiguration</a>.
kkKinesisConfiguration :: Lens' KinesisKit (KinesisConfiguration NormalQuery)

-- | A lens for <a>_kkManager</a>.
kkManager :: Lens' KinesisKit Manager

-- | The minimal effect modality for running Kinesis commands.
type MonadKinesis m = (MonadIO m, MonadReader KinesisKit m, MonadError SomeException m)

-- | Run a Kinesis request inside <a>MonadKinesis</a>.
runKinesis :: (MonadKinesis m, ServiceConfiguration req ~ KinesisConfiguration, Transaction req resp) => req -> m resp

-- | A <a>Source</a> of shards for a stream.
streamShardSource :: MonadKinesis m => StreamName -> Source m Shard

-- | A <a>Source</a> of open shards for a stream.
streamOpenShardSource :: MonadKinesis m => StreamName -> Source m Shard
shardIsOpen :: Shard -> Bool

-- | This function may be used to transform a computation with errors in
--   one type to one with errors in another type. Whilst the argument is
--   fixed at <a>EitherT</a>, this may be used where the argument is in an
--   <i>arbitrary</i> monad, since it will simply get instantiated at
--   <a>EitherT</a>.
mapError :: MonadError e' m => (e -> e') -> EitherT e m a -> m a

-- | This is a verion of <a>catchError</a> with its arguments flipped.
handleError :: MonadError e m => (e -> m α) -> m α -> m α

-- | Analogous to <a>withReader</a>, but supports a result in
--   <a>MonadReader</a>.
mapEnvironment :: MonadReader r' m => Getter r' r -> ReaderT r m a -> m a


module Aws.Kinesis.Client.Consumer

-- | The <a>KinesisConsumer</a> maintains state about which shards to pull
--   from.
data KinesisConsumer

-- | This constructs a <a>KinesisConsumer</a> and closes it when you have
--   done with it; this is equivalent to <a>withKinesisConsumer</a>, except
--   that the continuation is replaced with returning the consumer in
--   <a>Codensity</a>.
managedKinesisConsumer :: MonadConsumer m => ConsumerKit -> Codensity m KinesisConsumer

-- | This constructs a <a>KinesisConsumer</a> and closes it when you have
--   done with it.
withKinesisConsumer :: MonadConsumer m => ConsumerKit -> (KinesisConsumer -> m α) -> m α

-- | A conduit for getting records.
consumerSource :: MonadConsumer m => KinesisConsumer -> Source m Record

-- | Await and read a single record from the consumer.
readConsumer :: MonadConsumer m => KinesisConsumer -> m Record

-- | Try to read a single record from the consumer; if there is non queued
--   up, then <a>Nothing</a> will be returned.
tryReadConsumer :: MonadConsumer m => KinesisConsumer -> m (Maybe Record)

-- | Get the last read sequence number at each shard.
consumerStreamState :: MonadConsumer m => KinesisConsumer -> m SavedStreamState

-- | The <a>ConsumerKit</a> contains what is needed to initialize a
--   <a>KinesisConsumer</a>.
data ConsumerKit
ConsumerKit :: !KinesisKit -> !StreamName -> {-# UNPACK #-} !Int -> !ShardIteratorType -> !(Maybe SavedStreamState) -> ConsumerKit

-- | The credentials and configuration for making requests to AWS Kinesis.
_ckKinesisKit :: ConsumerKit -> !KinesisKit

-- | The name of the stream to consume from.
_ckStreamName :: ConsumerKit -> !StreamName

-- | The number of records to fetch at once from the stream.
_ckBatchSize :: ConsumerKit -> {-# UNPACK #-} !Int

-- | The type of iterator to consume.
_ckIteratorType :: ConsumerKit -> !ShardIteratorType

-- | Optionally, an initial stream state. The iterator type in
--   <a>_ckIteratorType</a> will be used for any shards not present in the
--   saved stream state; otherwise, <a>AfterSequenceNumber</a> will be
--   used.
_ckSavedStreamState :: ConsumerKit -> !(Maybe SavedStreamState)

-- | A lens for <a>_ckKinesisKit</a>.
ckKinesisKit :: Lens' ConsumerKit KinesisKit

-- | A lens for <a>_ckStreamName</a>.
ckStreamName :: Lens' ConsumerKit StreamName

-- | A lens for <a>_ckBatchSize</a>.
ckBatchSize :: Lens' ConsumerKit Int
data ConsumerError

-- | A stream must always have at least one open shard.
NoShards :: ConsumerError

-- | An error which derives from a request made to Kinesis.
KinesisError :: !SomeException -> ConsumerError

-- | The basic effect modality required for operating the consumer.
type MonadConsumer m = (MonadIO m, MonadBaseControl IO m, MonadError ConsumerError m)
data SavedStreamState
instance Show ConsumerError
instance FromJSON SavedStreamState
instance ToJSON SavedStreamState
instance Eq ShardState


module Aws.Kinesis.Client.Producer

-- | The (abstract) Kinesis producer client.
data KinesisProducer

-- | This constructs a <a>KinesisProducer</a> and closes it when you have
--   done with it.
withKinesisProducer :: (MonadIO m, MonadBaseControl IO m, MonadError ProducerError m) => ProducerKit -> (KinesisProducer -> m α) -> m α

-- | This constructs a <a>KinesisProducer</a> and closes it when you have
--   done with it. This is equivalent to <a>withKinesisProducer</a>, but
--   replaces the continuation with a return in <a>Codensity</a>.
managedKinesisProducer :: (MonadIO m, MonadBaseControl IO m, MonadError ProducerError m) => ProducerKit -> Codensity m KinesisProducer

-- | Enqueues a message to Kinesis on the next shard. If a message cannot
--   be enqueued (because the client has exceeded its queue size), the
--   <a>MessageNotEnqueued</a> exception will be thrown.
writeProducer :: MonadProducer m => KinesisProducer -> Message -> m ()
type Message = Text

-- | The basic effect modality required to use the Kinesis producer.
type MonadProducer m = (MonadIO m, MonadBaseControl IO m, MonadError ProducerError m)

-- | The basic input required to construct a Kinesis producer.
data ProducerKit
ProducerKit :: !KinesisKit -> !StreamName -> !BatchPolicy -> !RetryPolicy -> {-# UNPACK #-} !Int -> {-# UNPACK #-} !Int -> ProducerKit

-- | The basic information required to send requests to AWS Kinesis.
_pkKinesisKit :: ProducerKit -> !KinesisKit

-- | The name of the stream to send records to.
_pkStreamName :: ProducerKit -> !StreamName

-- | The record batching policy for the producer.
_pkBatchPolicy :: ProducerKit -> !BatchPolicy

-- | The retry policy for the producer.
_pkRetryPolicy :: ProducerKit -> !RetryPolicy

-- | The maximum number of records that may be enqueued at one time.
_pkMessageQueueBounds :: ProducerKit -> {-# UNPACK #-} !Int

-- | The number of requests to run concurrently (minimum: 1).
_pkMaxConcurrency :: ProducerKit -> {-# UNPACK #-} !Int

-- | A lens for <a>_pkKinesisKit</a>.
pkKinesisKit :: Lens' ProducerKit KinesisKit

-- | A lens for <a>_pkStreamName</a>.
pkStreamName :: Lens' ProducerKit StreamName

-- | A lens for <a>_pkBatchPolicy</a>.
pkBatchPolicy :: Lens' ProducerKit BatchPolicy

-- | A lens for <a>_pkRetryPolicy</a>.
pkRetryPolicy :: Lens' ProducerKit RetryPolicy

-- | A lens for <a>_pkMessageQueueBounds</a>.
pkMessageQueueBounds :: Lens' ProducerKit Int

-- | A lens for <a>_pkMaxConcurrency</a>.
pkMaxConcurrency :: Lens' ProducerKit Int
data ProducerError

-- | Represents an error which occured as a result of a request to Kinesis.
KinesisError :: !SomeException -> ProducerError

-- | Thrown when a message could not be enqueued since the queue was full.
--   This error must be handled at the call-site.
MessageNotEnqueued :: Message -> ProducerError

-- | Thrown when the message was larger than the maximum message size
--   (<a>MaxMessageSize</a>).
MessageTooLarge :: ProducerError

-- | Thrown when <a>pkMaxConcurrency</a> is set with an invalid value.
InvalidConcurrentConsumerCount :: ProducerError

-- | A prism for <a>KinesisError</a>.
_KinesisError :: Prism' ProducerError SomeException

-- | A prism for <a>MessageNotEnqueued</a>.
_MessageNotEnqueued :: Prism' ProducerError Message

-- | A prism for <a>InvalidConcurrentConsumerCount</a>.
_InvalidConcurrentConsumerCount :: Prism' ProducerError ()

-- | A prism for <a>MessageTooLarge</a>.
_MessageTooLarge :: Prism' ProducerError ()

-- | The producer batches records according to a user-specified policy.
data BatchPolicy

-- | The default batching policy sends <tt>200</tt> records per
--   <a>PutRecordsEndpoint</a> request.
defaultBatchPolicy :: BatchPolicy

-- | The number of records to send in a single request. This is only used
--   when the endpoint is set to <a>PutRecordsEndpoint</a>.
bpBatchSize :: Lens' BatchPolicy Int

-- | The endpoint to use when sending records to Kinesis.
bpEndpoint :: Lens' BatchPolicy RecordEndpoint

-- | The producer will attempt to re-send records which failed according to
--   a user-specified policy. This policy applies to failures which occur
--   in the process of sending a message to Kinesis, not those which occur
--   in the course of enqueuing a message.
data RetryPolicy

-- | The default retry policy will attempt <tt>5</tt> retries for a
--   message.
defaultRetryPolicy :: RetryPolicy

-- | The number of times to retry sending a message after it has first
--   failed.
rpRetryCount :: Lens' RetryPolicy Int

-- | There are two endpoints which may be used to send records to Kinesis.
data RecordEndpoint

-- | Use the <tt>PutRecord</tt> endpoint, which sends records one at a
--   time.
PutRecordEndpoint :: RecordEndpoint

-- | Use the <tt>PutRecords</tt> endpoint, which sends records in batches.
PutRecordsEndpoint :: RecordEndpoint
instance Typeable ProducerError
instance Eq RecordEndpoint
instance Show RecordEndpoint
instance Eq BatchPolicy
instance Show BatchPolicy
instance Eq RetryPolicy
instance Show RetryPolicy
instance Eq MessageQueueItem
instance Show MessageQueueItem
instance Show ProducerError
instance Exception ProducerError
