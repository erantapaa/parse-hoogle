-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A generic build tool
--   
--   Coadjute is a generic build tool, intended as an easier to use and
--   more portable replacement for make. It's not tailored toward any
--   particular language, and is not meant to replace tools which target a
--   specific environment.
--   
--   Portability is striven towards in two ways: - You don't have to deal
--   with the idiosyncrasies of many make implementations (well, people
--   don't, but they call their GNU Make files makefiles instead of
--   GNUmakefiles, which causes misunderstandings). - You have Haskell at
--   your disposal, and are encouraged to use that whenever possible
--   instead of system-specific binaries like the POSIX commands we all
--   know and love.
--   
--   With support for: - Parallel task performing. - Advanced
--   out-of-dateness detection: - Choice between timestamps and hashes. -
--   Keeping track of what arguments have been passed. - Haskell!
@package Coadjute
@version 0.1.1


-- | Coadjute is a generic build tool, intended as an easier to use and
--   more portable (in the sense that implementations don't differ)
--   replacement for make. It's not tailored toward any particular
--   language, and is not meant to replace tools which target a specific
--   environment.
--   
--   An example of simple usage:
--   
--   <pre>
--   import Coadjute
--   import System.Directory
--   
--   main = coadjute $ do
--      rule' "Copy foo from src to obj"
--            (\[s] t -&gt; copyFile s t)
--            (sourceDatum' (("obj"++) . drop 3) ["src/foo"])
--   </pre>
--   
--   By convention, this file should be called <i>Adjutant.hs</i>.
--   
--   Compiled and run, it would copy <tt>src/foo</tt> to <tt>obj/foo</tt>
--   whenever <tt>src/foo</tt> is older than <tt>obj/foo</tt>. With
--   <tt>-d</tt> or <tt>--use-db</tt> passed, it would hash (currently MD5)
--   <tt>src/foo</tt>, using that instead of modification time data to
--   decide whether to run the <tt>copyFile</tt> or not.
module Coadjute

-- | Coadjute is the main monad you'll be working in. You can use the
--   <a>rule</a> family of functions to add rules whilst within this monad,
--   and you can have a look at what arguments were given to you with
--   <a>getUserArgs</a>.
--   
--   For your convenience, a <a>MonadIO</a> instance is provided.
data Coadjute a
coadjute :: Coadjute a -> IO a

-- | A rule for building targets individually.
rule :: String -> [String] -> ([Source] -> Target -> IO ()) -> [([Source], Target)] -> Coadjute ()

-- | A rule for building multiple targets at once.
ruleM :: String -> [String] -> ([Source] -> [Target] -> IO ()) -> [([Source], [Target])] -> Coadjute ()

-- | <pre>
--   rule' = flip rule []
--   </pre>
rule' :: String -> ([Source] -> Target -> IO ()) -> [([Source], Target)] -> Coadjute ()

-- | <pre>
--   ruleM' = flip ruleM []
--   </pre>
ruleM' :: String -> ([Source] -> [Target] -> IO ()) -> [([Source], [Target])] -> Coadjute ()

-- | You should use this instead of <tt>System.Environment.getArgs</tt>, to
--   let Coadjute handle its own command line arguments first.
getUserArgs :: Coadjute [String]
type Source = FilePath
type Target = FilePath
