-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell client for the Cayley graph database
--   
@package cayley-client
@version 0.1.3.0

module Database.Cayley.Types
data APIVersion
V1 :: APIVersion
data QueryLang
Gremlin :: QueryLang
MQL :: QueryLang
data CayleyConfig
CayleyConfig :: Int -> String -> APIVersion -> QueryLang -> CayleyConfig
serverPort :: CayleyConfig -> Int
serverName :: CayleyConfig -> String
apiVersion :: CayleyConfig -> APIVersion
queryLang :: CayleyConfig -> QueryLang

-- | CayleyConfig { serverPort = 64210 , serverName = "localhost" ,
--   apiVersion = V1 , queryLang = Gremlin }
defaultCayleyConfig :: CayleyConfig
data CayleyConnection
CayleyConnection :: (CayleyConfig, Manager) -> CayleyConnection
data Quad
Quad :: Text -> Text -> Text -> Maybe Text -> Quad

-- | Subject node
subject :: Quad -> Text

-- | Predicate node
predicate :: Quad -> Text

-- | Object node
object :: Quad -> Text

-- | Label node
label :: Quad -> Maybe Text
instance Show CayleyConfig
instance FromJSON Quad
instance ToJSON Quad
instance Eq Quad
instance Show Quad
instance Show QueryLang
instance Show APIVersion

module Database.Cayley.Internal
apiRequest :: Manager -> String -> Int -> RequestBody -> ReaderT CayleyConfig IO (Maybe Value)
toRequestBody :: [Quad] -> RequestBody
getManager :: CayleyConnection -> Manager
getConfig :: CayleyConnection -> CayleyConfig

module Database.Cayley.Client
data Quad
Quad :: Text -> Text -> Text -> Maybe Text -> Quad

-- | Subject node
subject :: Quad -> Text

-- | Predicate node
predicate :: Quad -> Text

-- | Object node
object :: Quad -> Text

-- | Label node
label :: Quad -> Maybe Text

-- | CayleyConfig { serverPort = 64210 , serverName = "localhost" ,
--   apiVersion = V1 , queryLang = Gremlin }
defaultCayleyConfig :: CayleyConfig

-- | Get a connection to Cayley with the given configuration.
--   
--   <pre>
--   λ&gt; conn &lt;- connectCayley defaultCayleyConfig
--   </pre>
connectCayley :: CayleyConfig -> IO CayleyConnection

-- | Perform a query in Gremlin graph query language per default (or in
--   MQL).
--   
--   <pre>
--   λ&gt; query conn "graph.Vertex('Humphrey Bogart').In('name').All()"
--   Right (Array (fromList [Object (fromList [("id",String "/en/humphrey_bogart")])]))
--   </pre>
query :: CayleyConnection -> Text -> IO (Either String Value)

-- | Write a <a>Quad</a> with the given subject, predicate, object and
--   optional label. Throw result or extract amount of query
--   <a>successfulResults</a> from it.
--   
--   <pre>
--   λ&gt; writeQuad conn "Humphrey" "loves" "Lauren" (Just "In love")
--   Just (Object (fromList [("result",String "Successfully wrote 1 quads.")]))
--   </pre>
writeQuad :: CayleyConnection -> Text -> Text -> Text -> Maybe Text -> IO (Maybe Value)

-- | Delete the <a>Quad</a> defined by the given subject, predicate, object
--   and optional label.
deleteQuad :: CayleyConnection -> Text -> Text -> Text -> Maybe Text -> IO (Maybe Value)

-- | Write the given list of <a>Quad</a>(s).
writeQuads :: CayleyConnection -> [Quad] -> IO (Maybe Value)

-- | Delete the given list of <a>Quad</a>(s).
deleteQuads :: CayleyConnection -> [Quad] -> IO (Maybe Value)

-- | Write a N-Quad file.
--   
--   <pre>
--   λ&gt; writeNQuadFile conn "testdata.nq"
--   Just (Object (fromList [("result",String "Successfully wrote 11 quads.")]))
--   </pre>
writeNQuadFile :: (MonadIO m, MonadThrow m) => CayleyConnection -> FilePath -> m (Maybe Value)

-- | Get amount of successful results from a write/delete <a>Quad</a>(s)
--   operation.
--   
--   <pre>
--   λ&gt; writeNQuadFile conn "testdata.nq" &gt;&gt;= successfulResults
--   Right 11
--   </pre>
successfulResults :: Maybe Value -> IO (Either String Int)
