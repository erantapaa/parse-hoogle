-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | iteratees for statistical processing
--   
--   efficient statistical values of data streams
@package iter-stats
@version 0.1.0.4

module Statistics.Iteratee.Compat
type ListLikey s el = (ListLike s el, Nullable s)

module Statistics.Iteratee.Sample
minMaxNBy :: (Monad m, Ord prio, ListLikey s el) => Int -> (el -> prio) -> Iteratee s m ([(prio, el)], [(prio, el)])

-- | <i>O(n)</i> Range. The difference between the largest and smallest
--   elements of a stream.
range :: (Monad m, ListLikey s el, Num el, Ord el) => Iteratee s m el

-- | <i>O(n)</i> Arithmetic mean. Uses Welford's algorithm.
mean :: (Fractional el, Monad m, ListLikey s el) => Iteratee s m el

-- | <i>O(n)</i> Harmonic mean.
harmonicMean :: (Fractional el, Monad m, ListLikey s el) => Iteratee s m el

-- | <i>O(n)</i> Maximum likelihood estimate of a sample's variance, using
--   Knuth's algorithm.
variance :: (Fractional b, Monad m, ListLikey s b) => Iteratee s m b

-- | /O(n) Standard deviation, using Knuth's algorithm.
stdDev :: (Floating b, Monad m, Functor m, ListLikey s b) => Iteratee s m b


-- | some functions for working with uniformly-sampled data
module Statistics.Iteratee.Uniform
someRollingFunction :: (Monad m, ListLikey s el) => Int -> (s -> summary) -> Enumeratee s [summary] m a
movingAverage :: (Fractional el, Monad m, ListLikey s el) => Int -> Enumeratee s [el] m a

module Statistics.Iteratee
