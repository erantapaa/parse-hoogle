-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | CurryDB: In-memory Key/Value Database
--   
--   CurryDB: Simple, Persistent, Polymorphic, Transactional, In-memory
--   Key/Value Database
@package CurryDB
@version 0.1.0.0

module Database.Curry.Binary
instance Binary v => Binary (HashMap ByteString v)

module Database.Curry.Types
type DBMT v m = DBMT_ (StateT (DBMState v) m)
unDBMT :: DBMT_ m a -> IdentityT m a
type DBMS v = DBMT v STM
liftSTM :: STM a -> DBMS v a
data DBMState v
DBMState :: TVar (HashMap ByteString v) -> STM () -> Logger -> Config -> DBMState v
_dbmTable :: DBMState v -> TVar (HashMap ByteString v)
_dbmUpdate :: DBMState v -> STM ()
_dbmLogger :: DBMState v -> Logger
_dbmConfig :: DBMState v -> Config
dbmTable :: Lens (DBMState v_a7fm) (TVar (HashMap ByteString v_a7fm))
dbmUpdate :: Lens (DBMState v_a7fm) (STM ())
dbmLogger :: Lens (DBMState v_a7fm) Logger
dbmConfig :: Lens (DBMState v_a7fm) Config
data Config
Config :: Maybe FilePath -> [SaveStrategy] -> LogLevel -> Config
configPath :: Config -> Maybe FilePath
configSaveStrategy :: Config -> [SaveStrategy]
configVerbosity :: Config -> LogLevel

-- | The default value for this type.
def :: Default a => a
data SaveStrategy
SaveByFrequency :: Int -> Int -> SaveStrategy
freqSecond :: SaveStrategy -> Int
freqUpdates :: SaveStrategy -> Int
instance Default Config
instance MonadState (DBMState v) m => MonadState (DBMState v) (DBMT_ m)
instance Functor m => Functor (DBMT_ m)
instance Applicative m => Applicative (DBMT_ m)
instance Monad m => Monad (DBMT_ m)
instance Alternative m => Alternative (DBMT_ m)
instance MonadIO m => MonadIO (DBMT_ m)
instance MonadTrans DBMT_
instance MonadBase b m => MonadBase b (DBMT_ m)
instance MonadThrow m => MonadThrow (DBMT_ m)
instance MonadResource m => MonadResource (DBMT_ m)
instance MonadIO m => MonadLogger (DBMT v m)
instance MonadBaseControl b m => MonadBaseControl b (DBMT_ m)
instance MonadTransControl DBMT_

module Database.Curry.Storage
saveThread :: (Functor m, MonadIO m, Binary v) => TVar Bool -> STM () -> DBMT v m ()
createNotifyer :: [SaveStrategy] -> IO (STM (), STM (), TVar Bool)
saveToFile :: (MonadIO m, Binary v) => DBMT v m ()
loadFromFile :: (MonadIO m, Binary v) => DBMT v m ()

module Database.Curry.Commands
insert :: ByteString -> v -> DBMS v ()
insertWith :: (v -> v -> v) -> ByteString -> v -> DBMS v ()
delete :: ByteString -> DBMS v ()
lookup :: ByteString -> DBMS v (Maybe v)
lookupDefault :: Default v => ByteString -> DBMS v v
keys :: Monad m => DBMS v (Source (DBMT v m) ByteString)
transaction :: MonadIO m => DBMS v a -> DBMT v m a

module Database.Curry

-- | Run <a>DBMT</a> monad.
runDBMT :: (MonadIO m, MonadBaseControl IO m, Binary v) => Config -> DBMT v m a -> m a

module Database.Memcached.Commands
type MemcachedT m = DBMT ByteString m
data Command
Set :: ByteString -> Word32 -> Int -> ByteString -> Command
Add :: ByteString -> Word32 -> Int -> ByteString -> Command
Replace :: ByteString -> Word32 -> Int -> ByteString -> Command
Append :: ByteString -> Word32 -> Int -> ByteString -> Command
Prepend :: ByteString -> Word32 -> Int -> ByteString -> Command
Cas :: ByteString -> Word32 -> Int -> Word64 -> ByteString -> Command
Get :: [ByteString] -> Command
Gets :: [ByteString] -> Command
Delete :: ByteString -> Command
Incr :: ByteString -> Word64 -> Command
Decr :: ByteString -> Word64 -> Command
Touch :: ByteString -> Int -> Command

-- | Slabs
Stats :: Command
FlushAll :: Command
Version :: Command
Verbosity :: Int -> Command
Quit :: Command
data Response
Stored :: Response
NotStored :: Response
Exists :: Response
NotFound :: Response
Values :: [(ByteString, ByteString)] -> Response
Deleted :: Response
Value :: ByteString -> Response
data Error
Error :: Error
ClientError :: Text -> Error
ServerError :: Text -> Error
parseCommand :: Parser Command
fromResponse :: Response -> Builder
execCommand :: Command -> MemcachedT IO Response
instance Show Command

module Database.Memcached.Server
runServer :: ServerSettings (MemcachedT IO) -> IO ()

-- | Settings for a TCP server. It takes a port to listen on, and an
--   optional hostname to bind to.
--   
--   Since 0.6.0
data ServerSettings (m :: * -> *) :: (* -> *) -> *

-- | Smart constructor.
--   
--   Since 0.6.0
serverSettings :: Monad m => Int -> HostPreference -> ServerSettings m

module Database.Memcached

module Database.Redis.Types
type RedisT m = DBMT Value m
data Value
VString :: {-# UNPACK #-} !ByteString -> Value
VList :: !(Seq ByteString) -> Value
VSet :: !(HashSet ByteString) -> Value
VHash :: !(HashMap ByteString ByteString) -> Value
VSortedSet :: {-# UNPACK #-} !SortedSet -> Value
type Score = Int32
type SortedSet = (Set (Score, ByteString), HashMap ByteString Score)
data Request
Request :: [ByteString] -> Request
data Reply
StatusReply :: {-# UNPACK #-} !ByteString -> Reply
ErrorReply :: {-# UNPACK #-} !ByteString -> Reply
IntReply :: {-# UNPACK #-} !Int -> Reply
BulkReply :: !(Maybe ByteString) -> Reply
MultiBulkReply :: !(Maybe [Maybe ByteString]) -> Reply
instance Show Request
instance Show Reply
instance Binary Value

module Database.Redis.Builder
fromReply :: Reply -> Builder

module Database.Redis.Parser
parseRequest :: Parser Request

module Database.Redis.Commands
process :: (Functor m, Applicative m, MonadIO m) => (a, Request) -> RedisT m Reply

module Database.Redis.Server
runServer :: Config -> ServerSettings (RedisT IO) -> IO ()

-- | Settings for a TCP server. It takes a port to listen on, and an
--   optional hostname to bind to.
--   
--   Since 0.6.0
data ServerSettings (m :: * -> *) :: (* -> *) -> *

-- | Smart constructor.
--   
--   Since 0.6.0
serverSettings :: Monad m => Int -> HostPreference -> ServerSettings m

-- | The default value for this type.
def :: Default a => a

module Database.Redis
