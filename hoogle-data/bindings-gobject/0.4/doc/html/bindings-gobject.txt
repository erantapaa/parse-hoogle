-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Low level bindings supporting GObject and derived libraries.
--   
--   This package contains bindings to GObject library, using bindings-DSL
--   macros and style. Like GObject, it's not useful by itself, but as a
--   foundation for other libraries making use of its type system.
@package bindings-gobject
@version 0.4


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-Varargs-Value-Collection.html</a>
module Bindings.GObject.Varargs
data C'GTypeCValue
C'GTypeCValue :: C'gint -> C'glong -> C'gint64 -> C'gdouble -> C'gpointer -> C'GTypeCValue
c'GTypeCValue'v_int :: C'GTypeCValue -> C'gint
c'GTypeCValue'v_long :: C'GTypeCValue -> C'glong
c'GTypeCValue'v_int64 :: C'GTypeCValue -> C'gint64
c'GTypeCValue'v_double :: C'GTypeCValue -> C'gdouble
c'GTypeCValue'v_pointer :: C'GTypeCValue -> C'gpointer
c'G_VALUE_COLLECT_FORMAT_MAX_LENGTH :: Num a => a
p'GTypeCValue'v_int :: Ptr (C'GTypeCValue) -> Ptr (C'gint)
p'GTypeCValue'v_long :: Ptr (C'GTypeCValue) -> Ptr (C'glong)
p'GTypeCValue'v_int64 :: Ptr (C'GTypeCValue) -> Ptr (C'gint64)
p'GTypeCValue'v_double :: Ptr (C'GTypeCValue) -> Ptr (C'gdouble)
p'GTypeCValue'v_pointer :: Ptr (C'GTypeCValue) -> Ptr (C'gpointer)
instance Eq C'GTypeCValue
instance Show C'GTypeCValue
instance Storable C'GTypeCValue


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-Type-Information.html</a>
module Bindings.GObject.TypeInformation
type C'GType = CUInt
data C'GTypePlugin
C'GTypePlugin :: C'GTypePlugin
data C'GValue
C'GValue :: C'GValue
c'G_TYPE_FUNDAMENTAL :: C'GType -> C'GType
c'G_TYPE_FUNDAMENTAL_MAX :: Num a => a
c'G_TYPE_MAKE_FUNDAMENTAL :: C'GType -> C'GType
c'G_TYPE_IS_ABSTRACT :: C'GType -> C'gboolean
c'G_TYPE_IS_DERIVED :: C'GType -> C'gboolean
c'G_TYPE_IS_FUNDAMENTAL :: C'GType -> C'gboolean
c'G_TYPE_IS_VALUE_TYPE :: C'GType -> C'gboolean
c'G_TYPE_HAS_VALUE_TABLE :: C'GType -> C'gboolean
c'G_TYPE_IS_CLASSED :: C'GType -> C'gboolean
c'G_TYPE_IS_INSTANTIATABLE :: C'GType -> C'gboolean
c'G_TYPE_IS_DERIVABLE :: C'GType -> C'gboolean
c'G_TYPE_IS_DEEP_DERIVABLE :: C'GType -> C'gboolean
c'G_TYPE_IS_INTERFACE :: C'GType -> C'gboolean
data C'GTypeInterface
C'GTypeInterface :: C'GTypeInterface
data C'GTypeInstance
C'GTypeInstance :: C'GTypeInstance
data C'GTypeClass
C'GTypeClass :: C'GTypeClass
data C'GTypeInfo
C'GTypeInfo :: C'guint16 -> C'GBaseInitFunc -> C'GBaseFinalizeFunc -> C'GClassInitFunc -> C'GClassFinalizeFunc -> C'gconstpointer -> C'guint16 -> C'GInstanceInitFunc -> Ptr C'GTypeValueTable -> C'GTypeInfo
c'GTypeInfo'class_size :: C'GTypeInfo -> C'guint16
c'GTypeInfo'base_init :: C'GTypeInfo -> C'GBaseInitFunc
c'GTypeInfo'base_finalize :: C'GTypeInfo -> C'GBaseFinalizeFunc
c'GTypeInfo'class_init :: C'GTypeInfo -> C'GClassInitFunc
c'GTypeInfo'class_finalize :: C'GTypeInfo -> C'GClassFinalizeFunc
c'GTypeInfo'class_data :: C'GTypeInfo -> C'gconstpointer
c'GTypeInfo'instance_size :: C'GTypeInfo -> C'guint16
c'GTypeInfo'instance_init :: C'GTypeInfo -> C'GInstanceInitFunc
c'GTypeInfo'value_table :: C'GTypeInfo -> Ptr C'GTypeValueTable
data C'GTypeFundamentalInfo
C'GTypeFundamentalInfo :: C'GTypeFundamentalFlags -> C'GTypeFundamentalInfo
c'GTypeFundamentalInfo'type_flags :: C'GTypeFundamentalInfo -> C'GTypeFundamentalFlags
p'GTypeFundamentalInfo'type_flags :: Ptr (C'GTypeFundamentalInfo) -> Ptr (C'GTypeFundamentalFlags)
data C'GInterfaceInfo
C'GInterfaceInfo :: C'GInterfaceInitFunc -> C'GInterfaceFinalizeFunc -> C'gpointer -> C'GInterfaceInfo
c'GInterfaceInfo'interface_init :: C'GInterfaceInfo -> C'GInterfaceInitFunc
c'GInterfaceInfo'interface_finalize :: C'GInterfaceInfo -> C'GInterfaceFinalizeFunc
c'GInterfaceInfo'interface_data :: C'GInterfaceInfo -> C'gpointer
p'GTypeInfo'class_size :: Ptr (C'GTypeInfo) -> Ptr (C'guint16)
p'GTypeInfo'base_init :: Ptr (C'GTypeInfo) -> Ptr (C'GBaseInitFunc)
p'GTypeInfo'base_finalize :: Ptr (C'GTypeInfo) -> Ptr (C'GBaseFinalizeFunc)
p'GInterfaceInfo'interface_init :: Ptr (C'GInterfaceInfo) -> Ptr (C'GInterfaceInitFunc)
p'GTypeInfo'class_init :: Ptr (C'GTypeInfo) -> Ptr (C'GClassInitFunc)
p'GInterfaceInfo'interface_finalize :: Ptr (C'GInterfaceInfo) -> Ptr (C'GInterfaceFinalizeFunc)
p'GInterfaceInfo'interface_data :: Ptr (C'GInterfaceInfo) -> Ptr (C'gpointer)
p'GTypeInfo'class_finalize :: Ptr (C'GTypeInfo) -> Ptr (C'GClassFinalizeFunc)
data C'GTypeValueTable
C'GTypeValueTable :: FunPtr (Ptr C'GValue -> IO ()) -> FunPtr (Ptr C'GValue -> IO ()) -> FunPtr (Ptr C'GValue -> Ptr C'GValue -> IO ()) -> FunPtr (Ptr C'GValue -> IO C'gpointer) -> Ptr C'gchar -> FunPtr (Ptr C'GValue -> C'guint -> Ptr C'GTypeCValue -> C'guint -> IO (Ptr C'gchar)) -> Ptr C'gchar -> FunPtr (Ptr C'GValue -> C'guint -> Ptr C'GTypeCValue -> C'guint -> IO (Ptr C'gchar)) -> C'GTypeValueTable
c'GTypeValueTable'value_init :: C'GTypeValueTable -> FunPtr (Ptr C'GValue -> IO ())
c'GTypeValueTable'value_free :: C'GTypeValueTable -> FunPtr (Ptr C'GValue -> IO ())
c'GTypeValueTable'value_copy :: C'GTypeValueTable -> FunPtr (Ptr C'GValue -> Ptr C'GValue -> IO ())
c'GTypeValueTable'value_peek_pointer :: C'GTypeValueTable -> FunPtr (Ptr C'GValue -> IO C'gpointer)
c'GTypeValueTable'collect_format :: C'GTypeValueTable -> Ptr C'gchar
c'GTypeValueTable'collect_value :: C'GTypeValueTable -> FunPtr (Ptr C'GValue -> C'guint -> Ptr C'GTypeCValue -> C'guint -> IO (Ptr C'gchar))
c'GTypeValueTable'lcopy_format :: C'GTypeValueTable -> Ptr C'gchar
c'GTypeValueTable'lcopy_value :: C'GTypeValueTable -> FunPtr (Ptr C'GValue -> C'guint -> Ptr C'GTypeCValue -> C'guint -> IO (Ptr C'gchar))
p'GTypeInfo'class_data :: Ptr (C'GTypeInfo) -> Ptr (C'gconstpointer)
c'G_TYPE_FLAG_RESERVED_ID_BIT :: Num a => a
p'GTypeInfo'instance_size :: Ptr (C'GTypeInfo) -> Ptr (C'guint16)
c'g_type_init :: IO ()
type C'GTypeDebugFlags = CUInt
p'GTypeInfo'instance_init :: Ptr (C'GTypeInfo) -> Ptr (C'GInstanceInitFunc)
p'g_type_init :: FunPtr (IO ())
c'G_TYPE_DEBUG_NONE :: Num a => a
p'GTypeInfo'value_table :: Ptr (C'GTypeInfo) -> Ptr (Ptr C'GTypeValueTable)
c'G_TYPE_DEBUG_OBJECTS :: Num a => a
c'G_TYPE_DEBUG_SIGNALS :: Num a => a
c'G_TYPE_DEBUG_MASK :: Num a => a
p'GTypeValueTable'value_init :: Ptr (C'GTypeValueTable) -> Ptr (FunPtr (Ptr C'GValue -> IO ()))
c'g_type_init_with_debug_flags :: C'GTypeDebugFlags -> IO ()
c'g_type_name :: C'GType -> IO (Ptr C'gchar)
p'GTypeValueTable'value_free :: Ptr (C'GTypeValueTable) -> Ptr (FunPtr (Ptr C'GValue -> IO ()))
c'g_type_qname :: C'GType -> IO C'GQuark
p'g_type_init_with_debug_flags :: FunPtr (C'GTypeDebugFlags -> IO ())
c'g_type_from_name :: Ptr C'gchar -> IO C'GType
p'g_type_name :: FunPtr (C'GType -> IO (Ptr C'gchar))
p'GTypeValueTable'value_copy :: Ptr (C'GTypeValueTable) -> Ptr (FunPtr (Ptr C'GValue -> Ptr C'GValue -> IO ()))
c'g_type_parent :: C'GType -> IO C'GType
p'g_type_qname :: FunPtr (C'GType -> IO C'GQuark)
c'g_type_depth :: C'GType -> IO C'guint
p'g_type_from_name :: FunPtr (Ptr C'gchar -> IO C'GType)
p'GTypeValueTable'value_peek_pointer :: Ptr (C'GTypeValueTable) -> Ptr (FunPtr (Ptr C'GValue -> IO C'gpointer))
p'g_type_parent :: FunPtr (C'GType -> IO C'GType)
c'g_type_next_base :: C'GType -> C'GType -> IO C'GType
p'g_type_depth :: FunPtr (C'GType -> IO C'guint)
c'g_type_is_a :: C'GType -> C'GType -> IO C'gboolean
p'GTypeValueTable'collect_format :: Ptr (C'GTypeValueTable) -> Ptr (Ptr C'gchar)
c'g_type_class_ref :: C'GType -> IO C'gpointer
p'g_type_next_base :: FunPtr (C'GType -> C'GType -> IO C'GType)
c'g_type_class_peek :: C'GType -> IO C'gpointer
p'g_type_is_a :: FunPtr (C'GType -> C'GType -> IO C'gboolean)
p'GTypeValueTable'collect_value :: Ptr (C'GTypeValueTable) -> Ptr (FunPtr (Ptr C'GValue -> C'guint -> Ptr C'GTypeCValue -> C'guint -> IO (Ptr C'gchar)))
c'g_type_class_peek_static :: C'GType -> IO C'gpointer
p'g_type_class_ref :: FunPtr (C'GType -> IO C'gpointer)
c'g_type_class_unref :: C'gpointer -> IO ()
p'g_type_class_peek :: FunPtr (C'GType -> IO C'gpointer)
p'GTypeValueTable'lcopy_format :: Ptr (C'GTypeValueTable) -> Ptr (Ptr C'gchar)
c'g_type_class_peek_parent :: C'gpointer -> IO C'gpointer
p'g_type_class_peek_static :: FunPtr (C'GType -> IO C'gpointer)
p'g_type_class_unref :: FunPtr (C'gpointer -> IO ())
c'g_type_class_add_private :: C'gpointer -> C'gsize -> IO ()
p'GTypeValueTable'lcopy_value :: Ptr (C'GTypeValueTable) -> Ptr (FunPtr (Ptr C'GValue -> C'guint -> Ptr C'GTypeCValue -> C'guint -> IO (Ptr C'gchar)))
p'g_type_class_peek_parent :: FunPtr (C'gpointer -> IO C'gpointer)
c'g_type_interface_peek :: C'gpointer -> C'GType -> IO C'gpointer
c'g_type_interface_peek_parent :: C'gpointer -> IO C'gpointer
p'g_type_class_add_private :: FunPtr (C'gpointer -> C'gsize -> IO ())
c'g_type_default_interface_ref :: C'GType -> IO C'gpointer
p'g_type_interface_peek :: FunPtr (C'gpointer -> C'GType -> IO C'gpointer)
c'g_type_default_interface_peek :: C'GType -> IO C'gpointer
p'g_type_interface_peek_parent :: FunPtr (C'gpointer -> IO C'gpointer)
c'g_type_default_interface_unref :: C'gpointer -> IO ()
p'g_type_default_interface_ref :: FunPtr (C'GType -> IO C'gpointer)
p'g_type_default_interface_peek :: FunPtr (C'GType -> IO C'gpointer)
c'g_type_children :: C'GType -> Ptr C'guint -> IO (Ptr C'GType)
p'g_type_default_interface_unref :: FunPtr (C'gpointer -> IO ())
c'g_type_interfaces :: C'GType -> Ptr C'guint -> IO (Ptr C'GType)
c'g_type_interface_prerequisites :: C'GType -> Ptr C'guint -> IO (Ptr C'GType)
p'g_type_children :: FunPtr (C'GType -> Ptr C'guint -> IO (Ptr C'GType))
c'g_type_set_qdata :: C'GType -> C'GQuark -> C'gpointer -> IO ()
p'g_type_interfaces :: FunPtr (C'GType -> Ptr C'guint -> IO (Ptr C'GType))
c'g_type_get_qdata :: C'GType -> C'GQuark -> IO C'gpointer
p'g_type_interface_prerequisites :: FunPtr (C'GType -> Ptr C'guint -> IO (Ptr C'GType))
c'g_type_query :: C'GType -> Ptr C'GTypeQuery -> IO ()
p'g_type_set_qdata :: FunPtr (C'GType -> C'GQuark -> C'gpointer -> IO ())
p'g_type_get_qdata :: FunPtr (C'GType -> C'GQuark -> IO C'gpointer)
p'g_type_query :: FunPtr (C'GType -> Ptr C'GTypeQuery -> IO ())
data C'GTypeQuery
C'GTypeQuery :: C'GType -> Ptr C'gchar -> C'guint -> C'guint -> C'GTypeQuery
c'GTypeQuery'type :: C'GTypeQuery -> C'GType
c'GTypeQuery'type_name :: C'GTypeQuery -> Ptr C'gchar
c'GTypeQuery'class_size :: C'GTypeQuery -> C'guint
c'GTypeQuery'instance_size :: C'GTypeQuery -> C'guint
type C'GBaseInitFunc = FunPtr (C'gpointer -> IO ())
type C'GBaseFinalizeFunc = FunPtr (C'gpointer -> IO ())
mk'GBaseInitFunc :: (C'gpointer -> IO ()) -> IO C'GBaseInitFunc
type C'GClassInitFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
mk'GBaseFinalizeFunc :: (C'gpointer -> IO ()) -> IO C'GBaseFinalizeFunc
type C'GClassFinalizeFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
mK'GBaseInitFunc :: C'GBaseInitFunc -> (C'gpointer -> IO ())
mk'GClassInitFunc :: (C'gpointer -> C'gpointer -> IO ()) -> IO C'GClassInitFunc
type C'GInstanceInitFunc = FunPtr (Ptr C'GTypeInstance -> C'gpointer -> IO ())
mK'GBaseFinalizeFunc :: C'GBaseFinalizeFunc -> (C'gpointer -> IO ())
mk'GClassFinalizeFunc :: (C'gpointer -> C'gpointer -> IO ()) -> IO C'GClassFinalizeFunc
p'GTypeQuery'type :: Ptr (C'GTypeQuery) -> Ptr (C'GType)
type C'GInterfaceInitFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
mK'GClassInitFunc :: C'GClassInitFunc -> (C'gpointer -> C'gpointer -> IO ())
mk'GInstanceInitFunc :: (Ptr C'GTypeInstance -> C'gpointer -> IO ()) -> IO C'GInstanceInitFunc
type C'GInterfaceFinalizeFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
mK'GClassFinalizeFunc :: C'GClassFinalizeFunc -> (C'gpointer -> C'gpointer -> IO ())
mk'GInterfaceInitFunc :: (C'gpointer -> C'gpointer -> IO ()) -> IO C'GInterfaceInitFunc
p'GTypeQuery'type_name :: Ptr (C'GTypeQuery) -> Ptr (Ptr C'gchar)
type C'GTypeClassCacheFunc = FunPtr (C'gpointer -> Ptr C'GTypeClass -> IO C'gboolean)
mk'GInterfaceFinalizeFunc :: (C'gpointer -> C'gpointer -> IO ()) -> IO C'GInterfaceFinalizeFunc
mK'GInstanceInitFunc :: C'GInstanceInitFunc -> (Ptr C'GTypeInstance -> C'gpointer -> IO ())
mK'GInterfaceInitFunc :: C'GInterfaceInitFunc -> (C'gpointer -> C'gpointer -> IO ())
mk'GTypeClassCacheFunc :: (C'gpointer -> Ptr C'GTypeClass -> IO C'gboolean) -> IO C'GTypeClassCacheFunc
type C'GTypeFlags = CUInt
p'GTypeQuery'class_size :: Ptr (C'GTypeQuery) -> Ptr (C'guint)
mK'GInterfaceFinalizeFunc :: C'GInterfaceFinalizeFunc -> (C'gpointer -> C'gpointer -> IO ())
mK'GTypeClassCacheFunc :: C'GTypeClassCacheFunc -> (C'gpointer -> Ptr C'GTypeClass -> IO C'gboolean)
p'GTypeQuery'instance_size :: Ptr (C'GTypeQuery) -> Ptr (C'guint)
c'G_TYPE_FLAG_ABSTRACT :: Num a => a
c'G_TYPE_FLAG_VALUE_ABSTRACT :: Num a => a
type C'GTypeFundamentalFlags = CUInt
c'G_TYPE_FLAG_CLASSED :: Num a => a
c'G_TYPE_FLAG_INSTANTIATABLE :: Num a => a
c'G_TYPE_FLAG_DERIVABLE :: Num a => a
c'G_TYPE_FLAG_DEEP_DERIVABLE :: Num a => a
c'g_type_register_static :: C'GType -> Ptr C'gchar -> Ptr C'GTypeInfo -> C'GTypeFlags -> IO (C'GType)
c'g_type_register_static_simple :: C'GType -> Ptr C'gchar -> C'guint -> C'GClassInitFunc -> C'guint -> C'GInstanceInitFunc -> C'GTypeFlags -> IO (C'GType)
c'g_type_register_dynamic :: C'GType -> Ptr C'gchar -> Ptr C'GTypePlugin -> C'GTypeFlags -> IO (C'GType)
p'g_type_register_static :: FunPtr (C'GType -> Ptr C'gchar -> Ptr C'GTypeInfo -> C'GTypeFlags -> IO (C'GType))
c'g_type_register_fundamental :: C'GType -> Ptr C'gchar -> Ptr C'GTypeInfo -> Ptr C'GTypeFundamentalInfo -> C'GTypeFlags -> IO (C'GType)
p'g_type_register_static_simple :: FunPtr (C'GType -> Ptr C'gchar -> C'guint -> C'GClassInitFunc -> C'guint -> C'GInstanceInitFunc -> C'GTypeFlags -> IO (C'GType))
c'g_type_add_interface_static :: C'GType -> C'GType -> Ptr C'GInterfaceInfo -> IO ()
p'g_type_register_dynamic :: FunPtr (C'GType -> Ptr C'gchar -> Ptr C'GTypePlugin -> C'GTypeFlags -> IO (C'GType))
c'g_type_add_interface_dynamic :: C'GType -> C'GType -> Ptr C'GTypePlugin -> IO ()
p'g_type_register_fundamental :: FunPtr (C'GType -> Ptr C'gchar -> Ptr C'GTypeInfo -> Ptr C'GTypeFundamentalInfo -> C'GTypeFlags -> IO (C'GType))
c'g_type_interface_add_prerequisite :: C'GType -> C'GType -> IO ()
p'g_type_add_interface_static :: FunPtr (C'GType -> C'GType -> Ptr C'GInterfaceInfo -> IO ())
c'g_type_get_plugin :: C'GType -> IO (Ptr C'GTypePlugin)
p'g_type_add_interface_dynamic :: FunPtr (C'GType -> C'GType -> Ptr C'GTypePlugin -> IO ())
p'g_type_interface_add_prerequisite :: FunPtr (C'GType -> C'GType -> IO ())
c'g_type_interface_get_plugin :: C'GType -> C'GType -> IO (Ptr C'GTypePlugin)
c'g_type_fundamental_next :: IO (C'GType)
p'g_type_get_plugin :: FunPtr (C'GType -> IO (Ptr C'GTypePlugin))
c'g_type_add_class_cache_func :: C'gpointer -> C'GTypeClassCacheFunc -> IO ()
p'g_type_interface_get_plugin :: FunPtr (C'GType -> C'GType -> IO (Ptr C'GTypePlugin))
p'g_type_fundamental_next :: FunPtr (IO (C'GType))
c'g_type_remove_class_cache_func :: C'gpointer -> C'GTypeClassCacheFunc -> IO ()
c'g_type_class_unref_uncached :: C'gpointer -> IO ()
p'g_type_add_class_cache_func :: FunPtr (C'gpointer -> C'GTypeClassCacheFunc -> IO ())
c'g_type_add_interface_check :: C'gpointer -> C'GTypeInterfaceCheckFunc -> IO ()
p'g_type_remove_class_cache_func :: FunPtr (C'gpointer -> C'GTypeClassCacheFunc -> IO ())
p'g_type_class_unref_uncached :: FunPtr (C'gpointer -> IO ())
c'g_type_remove_interface_check :: C'gpointer -> C'GTypeInterfaceCheckFunc -> IO ()
p'g_type_add_interface_check :: FunPtr (C'gpointer -> C'GTypeInterfaceCheckFunc -> IO ())
type C'GTypeInterfaceCheckFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
p'g_type_remove_interface_check :: FunPtr (C'gpointer -> C'GTypeInterfaceCheckFunc -> IO ())
mk'GTypeInterfaceCheckFunc :: (C'gpointer -> C'gpointer -> IO ()) -> IO C'GTypeInterfaceCheckFunc
c'G_TYPE_INVALID :: Num a => a
mK'GTypeInterfaceCheckFunc :: C'GTypeInterfaceCheckFunc -> (C'gpointer -> C'gpointer -> IO ())
c'G_TYPE_NONE :: Num a => a
c'G_TYPE_INTERFACE :: Num a => a
c'G_TYPE_CHAR :: Num a => a
c'G_TYPE_UCHAR :: Num a => a
c'G_TYPE_BOOLEAN :: Num a => a
c'G_TYPE_INT :: Num a => a
c'G_TYPE_UINT :: Num a => a
c'G_TYPE_LONG :: Num a => a
c'G_TYPE_ULONG :: Num a => a
c'G_TYPE_INT64 :: Num a => a
c'G_TYPE_UINT64 :: Num a => a
c'G_TYPE_FLOAT :: Num a => a
c'G_TYPE_DOUBLE :: Num a => a
c'G_TYPE_STRING :: Num a => a
c'G_TYPE_POINTER :: Num a => a
c'G_TYPE_BOXED :: Num a => a
c'G_TYPE_PARAM :: Num a => a
c'G_TYPE_GTYPE :: IO C'GType
c'G_TYPE_RESERVED_GLIB_FIRST :: Num a => a
c'G_TYPE_RESERVED_GLIB_LAST :: Num a => a
c'G_TYPE_RESERVED_BSE_FIRST :: Num a => a
c'G_TYPE_RESERVED_BSE_LAST :: Num a => a
c'G_TYPE_RESERVED_USER_FIRST :: Num a => a
instance Eq C'GValue
instance Show C'GValue
instance Eq C'GTypeInterface
instance Show C'GTypeInterface
instance Eq C'GTypeInstance
instance Show C'GTypeInstance
instance Eq C'GTypeClass
instance Show C'GTypeClass
instance Eq C'GTypeValueTable
instance Show C'GTypeValueTable
instance Eq C'GTypeQuery
instance Show C'GTypeQuery
instance Eq C'GTypeInfo
instance Show C'GTypeInfo
instance Eq C'GInterfaceInfo
instance Show C'GInterfaceInfo
instance Eq C'GTypeFundamentalInfo
instance Show C'GTypeFundamentalInfo
instance Storable C'GTypeQuery
instance Storable C'GTypeValueTable
instance Storable C'GInterfaceInfo
instance Storable C'GTypeFundamentalInfo
instance Storable C'GTypeInfo
instance Storable C'GTypeClass
instance Storable C'GTypeInstance
instance Storable C'GTypeInterface
instance Storable C'GValue


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-Value-arrays.html</a>
module Bindings.GObject.ValueArrays
data C'GValueArray
C'GValueArray :: C'guint -> Ptr C'GValue -> C'GValueArray
c'GValueArray'n_values :: C'GValueArray -> C'guint
c'GValueArray'values :: C'GValueArray -> Ptr C'GValue
c'g_value_array_get_nth :: Ptr C'GValueArray -> C'guint -> IO (Ptr C'GValue)
c'g_value_array_new :: C'guint -> IO (Ptr C'GValueArray)
c'g_value_array_copy :: Ptr C'GValueArray -> IO (Ptr C'GValueArray)
p'g_value_array_get_nth :: FunPtr (Ptr C'GValueArray -> C'guint -> IO (Ptr C'GValue))
p'GValueArray'n_values :: Ptr (C'GValueArray) -> Ptr (C'guint)
c'g_value_array_free :: Ptr C'GValueArray -> IO ()
p'g_value_array_new :: FunPtr (C'guint -> IO (Ptr C'GValueArray))
p'g_value_array_copy :: FunPtr (Ptr C'GValueArray -> IO (Ptr C'GValueArray))
c'g_value_array_append :: Ptr C'GValueArray -> Ptr C'GValue -> IO (Ptr C'GValueArray)
p'GValueArray'values :: Ptr (C'GValueArray) -> Ptr (Ptr C'GValue)
p'g_value_array_free :: FunPtr (Ptr C'GValueArray -> IO ())
c'g_value_array_prepend :: Ptr C'GValueArray -> Ptr C'GValue -> IO (Ptr C'GValueArray)
p'g_value_array_append :: FunPtr (Ptr C'GValueArray -> Ptr C'GValue -> IO (Ptr C'GValueArray))
c'g_value_array_insert :: Ptr C'GValueArray -> C'guint -> Ptr C'GValue -> IO (Ptr C'GValueArray)
c'g_value_array_remove :: Ptr C'GValueArray -> C'guint -> IO (Ptr C'GValueArray)
p'g_value_array_prepend :: FunPtr (Ptr C'GValueArray -> Ptr C'GValue -> IO (Ptr C'GValueArray))
c'g_value_array_sort :: Ptr C'GValueArray -> C'GCompareFunc -> IO (Ptr C'GValueArray)
p'g_value_array_insert :: FunPtr (Ptr C'GValueArray -> C'guint -> Ptr C'GValue -> IO (Ptr C'GValueArray))
p'g_value_array_remove :: FunPtr (Ptr C'GValueArray -> C'guint -> IO (Ptr C'GValueArray))
c'g_value_array_sort_with_data :: Ptr C'GValueArray -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GValueArray)
p'g_value_array_sort :: FunPtr (Ptr C'GValueArray -> C'GCompareFunc -> IO (Ptr C'GValueArray))
p'g_value_array_sort_with_data :: FunPtr (Ptr C'GValueArray -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GValueArray))
instance Eq C'GValueArray
instance Show C'GValueArray
instance Storable C'GValueArray


-- | <a>http://library.gnome.org/devel/gobject/stable/GTypePlugin.html</a>
module Bindings.GObject.GTypePlugin
data C'GTypePluginClass
C'GTypePluginClass :: C'GTypePluginUse -> C'GTypePluginUnuse -> C'GTypePluginCompleteTypeInfo -> C'GTypePluginCompleteInterfaceInfo -> C'GTypePluginClass
c'GTypePluginClass'use_plugin :: C'GTypePluginClass -> C'GTypePluginUse
c'GTypePluginClass'unuse_plugin :: C'GTypePluginClass -> C'GTypePluginUnuse
c'GTypePluginClass'complete_type_info :: C'GTypePluginClass -> C'GTypePluginCompleteTypeInfo
c'GTypePluginClass'complete_interface_info :: C'GTypePluginClass -> C'GTypePluginCompleteInterfaceInfo
type C'GTypePluginUse = FunPtr (Ptr C'GTypePlugin -> IO ())
type C'GTypePluginUnuse = FunPtr (Ptr C'GTypePlugin -> IO ())
mk'GTypePluginUse :: (Ptr C'GTypePlugin -> IO ()) -> IO C'GTypePluginUse
type C'GTypePluginCompleteTypeInfo = FunPtr (Ptr C'GTypePlugin -> C'GType -> Ptr C'GTypeInfo -> Ptr C'GTypeValueTable -> IO ())
mk'GTypePluginUnuse :: (Ptr C'GTypePlugin -> IO ()) -> IO C'GTypePluginUnuse
mK'GTypePluginUse :: C'GTypePluginUse -> (Ptr C'GTypePlugin -> IO ())
mk'GTypePluginCompleteTypeInfo :: (Ptr C'GTypePlugin -> C'GType -> Ptr C'GTypeInfo -> Ptr C'GTypeValueTable -> IO ()) -> IO C'GTypePluginCompleteTypeInfo
type C'GTypePluginCompleteInterfaceInfo = FunPtr (Ptr C'GTypePlugin -> C'GType -> C'GType -> Ptr C'GInterfaceInfo -> IO ())
mK'GTypePluginUnuse :: C'GTypePluginUnuse -> (Ptr C'GTypePlugin -> IO ())
p'GTypePluginClass'use_plugin :: Ptr (C'GTypePluginClass) -> Ptr (C'GTypePluginUse)
mk'GTypePluginCompleteInterfaceInfo :: (Ptr C'GTypePlugin -> C'GType -> C'GType -> Ptr C'GInterfaceInfo -> IO ()) -> IO C'GTypePluginCompleteInterfaceInfo
mK'GTypePluginCompleteTypeInfo :: C'GTypePluginCompleteTypeInfo -> (Ptr C'GTypePlugin -> C'GType -> Ptr C'GTypeInfo -> Ptr C'GTypeValueTable -> IO ())
p'GTypePluginClass'unuse_plugin :: Ptr (C'GTypePluginClass) -> Ptr (C'GTypePluginUnuse)
mK'GTypePluginCompleteInterfaceInfo :: C'GTypePluginCompleteInterfaceInfo -> (Ptr C'GTypePlugin -> C'GType -> C'GType -> Ptr C'GInterfaceInfo -> IO ())
p'GTypePluginClass'complete_type_info :: Ptr (C'GTypePluginClass) -> Ptr (C'GTypePluginCompleteTypeInfo)
p'GTypePluginClass'complete_interface_info :: Ptr (C'GTypePluginClass) -> Ptr (C'GTypePluginCompleteInterfaceInfo)
instance Eq C'GTypePluginClass
instance Show C'GTypePluginClass
instance Storable C'GTypePluginClass


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-GParamSpec.html</a>
module Bindings.GObject.GParamSpec
data C'GParamSpec
C'GParamSpec :: C'GParamSpec
data C'GParamSpecClass
C'GParamSpecClass :: C'GParamSpecClass
c'G_TYPE_IS_PARAM :: C'GType -> C'gboolean
c'G_PARAM_SPEC :: Ptr a -> Ptr C'GParamSpec
c'G_IS_PARAM_SPEC :: Ptr a -> C'gboolean
c'G_PARAM_SPEC_CLASS :: Ptr a -> Ptr C'GParamSpecClass
c'G_IS_PARAM_SPEC_CLASS :: Ptr a -> C'gboolean
c'G_PARAM_SPEC_GET_CLASS :: Ptr a -> Ptr C'GParamSpecClass
c'G_PARAM_SPEC_TYPE :: Ptr a -> C'GType
c'G_PARAM_SPEC_TYPE_NAME :: Ptr a -> IO (Ptr C'gchar)
c'G_PARAM_SPEC_VALUE_TYPE :: Ptr a -> C'GType
type C'GParamFlags = CInt
c'G_PARAM_READABLE :: Num a => a
c'G_PARAM_WRITABLE :: Num a => a
c'G_PARAM_CONSTRUCT :: Num a => a
c'G_PARAM_CONSTRUCT_ONLY :: Num a => a
c'G_PARAM_LAX_VALIDATION :: Num a => a
c'G_PARAM_STATIC_NAME :: Num a => a
c'G_PARAM_STATIC_NICK :: Num a => a
c'G_PARAM_STATIC_BLURB :: Num a => a
c'G_PARAM_READWRITE :: Num a => a
c'G_PARAM_STATIC_STRINGS :: Num a => a
c'G_PARAM_MASK :: Num a => a
c'G_PARAM_USER_SHIFT :: Num a => a
c'g_param_spec_ref :: Ptr C'GParamSpec -> IO (Ptr C'GParamSpec)
c'g_param_spec_unref :: Ptr C'GParamSpec -> IO ()
c'g_param_spec_sink :: Ptr C'GParamSpec -> IO ()
p'g_param_spec_ref :: FunPtr (Ptr C'GParamSpec -> IO (Ptr C'GParamSpec))
p'g_param_spec_unref :: FunPtr (Ptr C'GParamSpec -> IO ())
c'g_param_spec_ref_sink :: Ptr C'GParamSpec -> IO (Ptr C'GParamSpec)
p'g_param_spec_sink :: FunPtr (Ptr C'GParamSpec -> IO ())
c'g_param_value_set_default :: Ptr C'GParamSpec -> Ptr C'GValue -> IO ()
c'g_param_value_defaults :: Ptr C'GParamSpec -> Ptr C'GValue -> IO C'gboolean
p'g_param_spec_ref_sink :: FunPtr (Ptr C'GParamSpec -> IO (Ptr C'GParamSpec))
c'g_param_value_validate :: Ptr C'GParamSpec -> Ptr C'GValue -> IO C'gboolean
p'g_param_value_set_default :: FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> IO ())
p'g_param_value_defaults :: FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> IO C'gboolean)
c'g_param_value_convert :: Ptr C'GParamSpec -> Ptr C'GValue -> Ptr C'GValue -> C'gboolean -> IO C'gboolean
p'g_param_value_validate :: FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> IO C'gboolean)
c'g_param_values_cmp :: Ptr C'GParamSpec -> Ptr C'GValue -> Ptr C'GValue -> IO C'gint
c'g_param_spec_get_name :: Ptr C'GParamSpec -> IO (Ptr C'gchar)
p'g_param_value_convert :: FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> Ptr C'GValue -> C'gboolean -> IO C'gboolean)
c'g_param_spec_get_nick :: Ptr C'GParamSpec -> IO (Ptr C'gchar)
p'g_param_values_cmp :: FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> Ptr C'GValue -> IO C'gint)
c'g_param_spec_get_blurb :: Ptr C'GParamSpec -> IO (Ptr C'gchar)
p'g_param_spec_get_name :: FunPtr (Ptr C'GParamSpec -> IO (Ptr C'gchar))
c'g_param_spec_get_qdata :: Ptr C'GParamSpec -> C'GQuark -> IO C'gpointer
p'g_param_spec_get_nick :: FunPtr (Ptr C'GParamSpec -> IO (Ptr C'gchar))
p'g_param_spec_get_blurb :: FunPtr (Ptr C'GParamSpec -> IO (Ptr C'gchar))
c'g_param_spec_set_qdata :: Ptr C'GParamSpec -> C'GQuark -> C'gpointer -> IO ()
p'g_param_spec_get_qdata :: FunPtr (Ptr C'GParamSpec -> C'GQuark -> IO C'gpointer)
c'g_param_spec_set_qdata_full :: Ptr C'GParamSpec -> C'GQuark -> C'gpointer -> C'GDestroyNotify -> IO ()
c'g_param_spec_steal_qdata :: Ptr C'GParamSpec -> C'GQuark -> IO C'gpointer
p'g_param_spec_set_qdata :: FunPtr (Ptr C'GParamSpec -> C'GQuark -> C'gpointer -> IO ())
c'g_param_spec_get_redirect_target :: Ptr C'GParamSpec -> IO (Ptr C'GParamSpec)
p'g_param_spec_set_qdata_full :: FunPtr (Ptr C'GParamSpec -> C'GQuark -> C'gpointer -> C'GDestroyNotify -> IO ())
p'g_param_spec_steal_qdata :: FunPtr (Ptr C'GParamSpec -> C'GQuark -> IO C'gpointer)
c'g_param_spec_internal :: C'GType -> Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GParamFlags -> IO C'gpointer
p'g_param_spec_get_redirect_target :: FunPtr (Ptr C'GParamSpec -> IO (Ptr C'GParamSpec))
p'g_param_spec_internal :: FunPtr (C'GType -> Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GParamFlags -> IO C'gpointer)
data C'GParamSpecTypeInfo
C'GParamSpecTypeInfo :: C'guint16 -> C'guint16 -> FunPtr (Ptr C'GParamSpec -> IO ()) -> C'GType -> FunPtr (Ptr C'GParamSpec -> IO ()) -> FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> IO ()) -> FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> IO C'gboolean) -> FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> Ptr C'GValue -> IO C'gint) -> C'GParamSpecTypeInfo
c'GParamSpecTypeInfo'instance_size :: C'GParamSpecTypeInfo -> C'guint16
c'GParamSpecTypeInfo'n_preallocs :: C'GParamSpecTypeInfo -> C'guint16
c'GParamSpecTypeInfo'instance_init :: C'GParamSpecTypeInfo -> FunPtr (Ptr C'GParamSpec -> IO ())
c'GParamSpecTypeInfo'value_type :: C'GParamSpecTypeInfo -> C'GType
c'GParamSpecTypeInfo'finalize :: C'GParamSpecTypeInfo -> FunPtr (Ptr C'GParamSpec -> IO ())
c'GParamSpecTypeInfo'value_set_default :: C'GParamSpecTypeInfo -> FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> IO ())
c'GParamSpecTypeInfo'value_validate :: C'GParamSpecTypeInfo -> FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> IO C'gboolean)
c'GParamSpecTypeInfo'values_cmp :: C'GParamSpecTypeInfo -> FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> Ptr C'GValue -> IO C'gint)
c'g_param_type_register_static :: Ptr C'gchar -> Ptr C'GParamSpecTypeInfo -> IO C'GType
data C'GParamSpecPool
C'GParamSpecPool :: C'GParamSpecPool
p'g_param_type_register_static :: FunPtr (Ptr C'gchar -> Ptr C'GParamSpecTypeInfo -> IO C'GType)
c'g_param_spec_pool_insert :: Ptr C'GParamSpecPool -> Ptr C'GParamSpec -> C'GType -> IO ()
c'g_param_spec_pool_remove :: Ptr C'GParamSpecPool -> Ptr C'GParamSpec -> IO ()
p'g_param_spec_pool_insert :: FunPtr (Ptr C'GParamSpecPool -> Ptr C'GParamSpec -> C'GType -> IO ())
c'g_param_spec_pool_lookup :: Ptr C'GParamSpecPool -> Ptr C'gchar -> C'GType -> C'gboolean -> IO (Ptr C'GParamSpec)
p'g_param_spec_pool_remove :: FunPtr (Ptr C'GParamSpecPool -> Ptr C'GParamSpec -> IO ())
c'g_param_spec_pool_list :: Ptr C'GParamSpecPool -> C'GType -> Ptr C'guint -> IO (Ptr (Ptr C'GParamSpec))
c'g_param_spec_pool_list_owned :: Ptr C'GParamSpecPool -> C'GType -> IO (Ptr C'GList)
p'g_param_spec_pool_lookup :: FunPtr (Ptr C'GParamSpecPool -> Ptr C'gchar -> C'GType -> C'gboolean -> IO (Ptr C'GParamSpec))
p'GParamSpecTypeInfo'instance_size :: Ptr (C'GParamSpecTypeInfo) -> Ptr (C'guint16)
p'g_param_spec_pool_list :: FunPtr (Ptr C'GParamSpecPool -> C'GType -> Ptr C'guint -> IO (Ptr (Ptr C'GParamSpec)))
p'g_param_spec_pool_list_owned :: FunPtr (Ptr C'GParamSpecPool -> C'GType -> IO (Ptr C'GList))
p'GParamSpecTypeInfo'n_preallocs :: Ptr (C'GParamSpecTypeInfo) -> Ptr (C'guint16)
p'GParamSpecTypeInfo'instance_init :: Ptr (C'GParamSpecTypeInfo) -> Ptr (FunPtr (Ptr C'GParamSpec -> IO ()))
p'GParamSpecTypeInfo'value_type :: Ptr (C'GParamSpecTypeInfo) -> Ptr (C'GType)
p'GParamSpecTypeInfo'finalize :: Ptr (C'GParamSpecTypeInfo) -> Ptr (FunPtr (Ptr C'GParamSpec -> IO ()))
p'GParamSpecTypeInfo'value_set_default :: Ptr (C'GParamSpecTypeInfo) -> Ptr (FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> IO ()))
p'GParamSpecTypeInfo'value_validate :: Ptr (C'GParamSpecTypeInfo) -> Ptr (FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> IO C'gboolean))
p'GParamSpecTypeInfo'values_cmp :: Ptr (C'GParamSpecTypeInfo) -> Ptr (FunPtr (Ptr C'GParamSpec -> Ptr C'GValue -> Ptr C'GValue -> IO C'gint))
instance Eq C'GParamSpecTypeInfo
instance Show C'GParamSpecTypeInfo
instance Storable C'GParamSpecTypeInfo


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-Standard-Parameter-and-Value-Types.html</a>
module Bindings.GObject.ParametersAndValues
data C'GParamSpecBoolean
C'GParamSpecBoolean :: C'GParamSpecBoolean
c'G_IS_PARAM_SPEC_BOOLEAN :: Ptr a -> C'gboolean
c'G_PARAM_SPEC_BOOLEAN :: Ptr a -> Ptr C'GParamSpecBoolean
c'G_TYPE_PARAM_BOOLEAN :: C'GType
c'G_VALUE_HOLDS_BOOLEAN :: Ptr C'GValue -> C'gboolean
c'g_param_spec_boolean :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gboolean -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_boolean :: Ptr C'GValue -> C'gboolean -> IO ()
c'g_value_get_boolean :: Ptr C'GValue -> IO C'gboolean
p'g_param_spec_boolean :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gboolean -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_boolean :: FunPtr (Ptr C'GValue -> C'gboolean -> IO ())
c'G_IS_PARAM_SPEC_CHAR :: Ptr a -> C'gboolean
p'g_value_get_boolean :: FunPtr (Ptr C'GValue -> IO C'gboolean)
c'G_PARAM_SPEC_CHAR :: Ptr a -> Ptr C'GParamSpecChar
data C'GParamSpecChar
C'GParamSpecChar :: C'GParamSpecChar
c'G_TYPE_PARAM_CHAR :: C'GType
c'G_VALUE_HOLDS_CHAR :: Ptr C'GValue -> C'gboolean
c'g_param_spec_char :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gint8 -> C'gint8 -> C'gint8 -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_char :: Ptr C'GValue -> C'gchar -> IO ()
c'g_value_get_char :: Ptr C'GValue -> IO C'gchar
p'g_param_spec_char :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gint8 -> C'gint8 -> C'gint8 -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_char :: FunPtr (Ptr C'GValue -> C'gchar -> IO ())
c'G_IS_PARAM_SPEC_UCHAR :: Ptr a -> C'gboolean
p'g_value_get_char :: FunPtr (Ptr C'GValue -> IO C'gchar)
c'G_PARAM_SPEC_UCHAR :: Ptr a -> Ptr C'GParamSpecUChar
data C'GParamSpecUChar
C'GParamSpecUChar :: C'GParamSpecUChar
c'G_TYPE_PARAM_UCHAR :: C'GType
c'G_VALUE_HOLDS_UCHAR :: Ptr C'GValue -> C'gboolean
c'g_param_spec_uchar :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'guint8 -> C'guint8 -> C'guint8 -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_uchar :: Ptr C'GValue -> C'guchar -> IO ()
c'g_value_get_uchar :: Ptr C'GValue -> IO C'guchar
p'g_param_spec_uchar :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'guint8 -> C'guint8 -> C'guint8 -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_uchar :: FunPtr (Ptr C'GValue -> C'guchar -> IO ())
c'G_IS_PARAM_SPEC_INT :: Ptr a -> C'gboolean
p'g_value_get_uchar :: FunPtr (Ptr C'GValue -> IO C'guchar)
c'G_PARAM_SPEC_INT :: Ptr a -> Ptr C'GParamSpecInt
data C'GParamSpecInt
C'GParamSpecInt :: C'GParamSpecInt
c'G_TYPE_PARAM_INT :: C'GType
c'G_VALUE_HOLDS_INT :: Ptr C'GValue -> C'gboolean
c'g_param_spec_int :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gint -> C'gint -> C'gint -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_int :: Ptr C'GValue -> C'gint -> IO ()
c'g_value_get_int :: Ptr C'GValue -> IO C'gint
p'g_param_spec_int :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gint -> C'gint -> C'gint -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_int :: FunPtr (Ptr C'GValue -> C'gint -> IO ())
c'G_IS_PARAM_SPEC_UINT :: Ptr a -> C'gboolean
p'g_value_get_int :: FunPtr (Ptr C'GValue -> IO C'gint)
c'G_PARAM_SPEC_UINT :: Ptr a -> Ptr C'GParamSpecUInt
data C'GParamSpecUInt
C'GParamSpecUInt :: C'GParamSpecUInt
c'G_TYPE_PARAM_UINT :: C'GType
c'G_VALUE_HOLDS_UINT :: Ptr C'GValue -> C'gboolean
c'g_param_spec_uint :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'guint -> C'guint -> C'guint -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_uint :: Ptr C'GValue -> C'guint -> IO ()
c'g_value_get_uint :: Ptr C'GValue -> IO C'guint
p'g_param_spec_uint :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'guint -> C'guint -> C'guint -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_uint :: FunPtr (Ptr C'GValue -> C'guint -> IO ())
c'G_IS_PARAM_SPEC_LONG :: Ptr a -> C'gboolean
p'g_value_get_uint :: FunPtr (Ptr C'GValue -> IO C'guint)
c'G_PARAM_SPEC_LONG :: Ptr a -> Ptr C'GParamSpecLong
data C'GParamSpecLong
C'GParamSpecLong :: C'GParamSpecLong
c'G_TYPE_PARAM_LONG :: C'GType
c'G_VALUE_HOLDS_LONG :: Ptr C'GValue -> C'gboolean
c'g_param_spec_long :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'glong -> C'glong -> C'glong -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_long :: Ptr C'GValue -> C'glong -> IO ()
c'g_value_get_long :: Ptr C'GValue -> IO C'glong
p'g_param_spec_long :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'glong -> C'glong -> C'glong -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_long :: FunPtr (Ptr C'GValue -> C'glong -> IO ())
c'G_IS_PARAM_SPEC_ULONG :: Ptr a -> C'gboolean
p'g_value_get_long :: FunPtr (Ptr C'GValue -> IO C'glong)
c'G_PARAM_SPEC_ULONG :: Ptr a -> Ptr C'GParamSpecULong
data C'GParamSpecULong
C'GParamSpecULong :: C'GParamSpecULong
c'G_TYPE_PARAM_ULONG :: C'GType
c'G_VALUE_HOLDS_ULONG :: Ptr C'GValue -> C'gboolean
c'g_param_spec_ulong :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gulong -> C'gulong -> C'gulong -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_ulong :: Ptr C'GValue -> C'gulong -> IO ()
c'g_value_get_ulong :: Ptr C'GValue -> IO C'gulong
p'g_param_spec_ulong :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gulong -> C'gulong -> C'gulong -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_ulong :: FunPtr (Ptr C'GValue -> C'gulong -> IO ())
c'G_IS_PARAM_SPEC_INT64 :: Ptr a -> C'gboolean
p'g_value_get_ulong :: FunPtr (Ptr C'GValue -> IO C'gulong)
c'G_PARAM_SPEC_INT64 :: Ptr a -> Ptr C'GParamSpecInt64
data C'GParamSpecInt64
C'GParamSpecInt64 :: C'GParamSpecInt64
c'G_TYPE_PARAM_INT64 :: C'GType
c'G_VALUE_HOLDS_INT64 :: Ptr C'GValue -> C'gboolean
c'g_param_spec_int64 :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gint64 -> C'gint64 -> C'gint64 -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_int64 :: Ptr C'GValue -> C'gint64 -> IO ()
c'g_value_get_int64 :: Ptr C'GValue -> IO C'gint64
p'g_param_spec_int64 :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gint64 -> C'gint64 -> C'gint64 -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_int64 :: FunPtr (Ptr C'GValue -> C'gint64 -> IO ())
c'G_IS_PARAM_SPEC_UINT64 :: Ptr a -> C'gboolean
p'g_value_get_int64 :: FunPtr (Ptr C'GValue -> IO C'gint64)
c'G_PARAM_SPEC_UINT64 :: Ptr a -> Ptr C'GParamSpecUInt64
data C'GParamSpecUInt64
C'GParamSpecUInt64 :: C'GParamSpecUInt64
c'G_TYPE_PARAM_UINT64 :: C'GType
c'G_VALUE_HOLDS_UINT64 :: Ptr C'GValue -> C'gboolean
c'g_param_spec_uint64 :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'guint64 -> C'guint64 -> C'guint64 -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_uint64 :: Ptr C'GValue -> C'guint64 -> IO ()
c'g_value_get_uint64 :: Ptr C'GValue -> IO C'guint64
p'g_param_spec_uint64 :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'guint64 -> C'guint64 -> C'guint64 -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_uint64 :: FunPtr (Ptr C'GValue -> C'guint64 -> IO ())
c'G_IS_PARAM_SPEC_FLOAT :: Ptr a -> C'gboolean
p'g_value_get_uint64 :: FunPtr (Ptr C'GValue -> IO C'guint64)
c'G_PARAM_SPEC_FLOAT :: Ptr a -> Ptr C'GParamSpecFloat
data C'GParamSpecFloat
C'GParamSpecFloat :: C'GParamSpecFloat
c'G_TYPE_PARAM_FLOAT :: C'GType
c'G_VALUE_HOLDS_FLOAT :: Ptr C'GValue -> C'gboolean
c'g_param_spec_float :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gfloat -> C'gfloat -> C'gfloat -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_float :: Ptr C'GValue -> C'gfloat -> IO ()
c'g_value_get_float :: Ptr C'GValue -> IO C'gfloat
p'g_param_spec_float :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gfloat -> C'gfloat -> C'gfloat -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_float :: FunPtr (Ptr C'GValue -> C'gfloat -> IO ())
c'G_IS_PARAM_SPEC_DOUBLE :: Ptr a -> C'gboolean
p'g_value_get_float :: FunPtr (Ptr C'GValue -> IO C'gfloat)
c'G_PARAM_SPEC_DOUBLE :: Ptr a -> Ptr C'GParamSpecDouble
data C'GParamSpecDouble
C'GParamSpecDouble :: C'GParamSpecDouble
c'G_TYPE_PARAM_DOUBLE :: C'GType
c'G_VALUE_HOLDS_DOUBLE :: Ptr C'GValue -> C'gboolean
c'g_param_spec_double :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gdouble -> C'gdouble -> C'gdouble -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_double :: Ptr C'GValue -> C'gdouble -> IO ()
c'g_value_get_double :: Ptr C'GValue -> IO C'gdouble
p'g_param_spec_double :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gdouble -> C'gdouble -> C'gdouble -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_double :: FunPtr (Ptr C'GValue -> C'gdouble -> IO ())
c'G_IS_PARAM_SPEC_ENUM :: Ptr a -> C'gboolean
p'g_value_get_double :: FunPtr (Ptr C'GValue -> IO C'gdouble)
c'G_PARAM_SPEC_ENUM :: Ptr a -> Ptr C'GParamSpecEnum
data C'GParamSpecEnum
C'GParamSpecEnum :: C'GParamSpecEnum
c'G_TYPE_PARAM_ENUM :: C'GType
c'G_VALUE_HOLDS_ENUM :: Ptr C'GValue -> C'gboolean
c'g_param_spec_enum :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'gint -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_enum :: Ptr C'GValue -> C'gint -> IO ()
c'g_value_get_enum :: Ptr C'GValue -> IO C'gint
p'g_param_spec_enum :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'gint -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_enum :: FunPtr (Ptr C'GValue -> C'gint -> IO ())
c'G_IS_PARAM_SPEC_FLAGS :: Ptr a -> C'gboolean
p'g_value_get_enum :: FunPtr (Ptr C'GValue -> IO C'gint)
c'G_PARAM_SPEC_FLAGS :: Ptr a -> Ptr C'GParamSpecFlags
data C'GParamSpecFlags
C'GParamSpecFlags :: C'GParamSpecFlags
c'G_TYPE_PARAM_FLAGS :: C'GType
c'G_VALUE_HOLDS_FLAGS :: Ptr C'GValue -> C'gboolean
c'g_param_spec_flags :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'guint -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_flags :: Ptr C'GValue -> C'guint -> IO ()
c'g_value_get_flags :: Ptr C'GValue -> IO C'guint
p'g_param_spec_flags :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'guint -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_flags :: FunPtr (Ptr C'GValue -> C'guint -> IO ())
c'G_IS_PARAM_SPEC_STRING :: Ptr a -> C'gboolean
p'g_value_get_flags :: FunPtr (Ptr C'GValue -> IO C'guint)
c'G_PARAM_SPEC_STRING :: Ptr a -> Ptr C'GParamSpecString
data C'GParamSpecString
C'GParamSpecString :: C'GParamSpecString
c'G_TYPE_PARAM_STRING :: C'GType
c'G_VALUE_HOLDS_STRING :: Ptr C'GValue -> C'gboolean
type C'gchararray = Ptr C'gchar
c'g_param_spec_string :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_string :: Ptr C'GValue -> Ptr C'gchar -> IO ()
c'g_value_set_static_string :: Ptr C'GValue -> Ptr C'gchar -> IO ()
p'g_param_spec_string :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GParamFlags -> IO (Ptr C'GParamSpec))
c'g_value_take_string :: Ptr C'GValue -> Ptr C'gchar -> IO ()
p'g_value_set_string :: FunPtr (Ptr C'GValue -> Ptr C'gchar -> IO ())
c'g_value_get_string :: Ptr C'GValue -> IO (Ptr C'gchar)
p'g_value_set_static_string :: FunPtr (Ptr C'GValue -> Ptr C'gchar -> IO ())
c'g_value_dup_string :: Ptr C'GValue -> IO (Ptr C'gchar)
p'g_value_take_string :: FunPtr (Ptr C'GValue -> Ptr C'gchar -> IO ())
p'g_value_get_string :: FunPtr (Ptr C'GValue -> IO (Ptr C'gchar))
c'G_IS_PARAM_SPEC_PARAM :: Ptr a -> C'gboolean
p'g_value_dup_string :: FunPtr (Ptr C'GValue -> IO (Ptr C'gchar))
c'G_PARAM_SPEC_PARAM :: Ptr a -> Ptr C'GParamSpecParam
data C'GParamSpecParam
C'GParamSpecParam :: C'GParamSpecParam
c'G_TYPE_PARAM_PARAM :: C'GType
c'G_VALUE_HOLDS_PARAM :: Ptr C'GValue -> C'gboolean
c'g_param_spec_param :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_param :: Ptr C'GValue -> Ptr C'GParamSpec -> IO ()
c'g_value_take_param :: Ptr C'GValue -> Ptr C'GParamSpec -> IO ()
p'g_param_spec_param :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'GParamFlags -> IO (Ptr C'GParamSpec))
c'g_value_get_param :: Ptr C'GValue -> IO (Ptr C'GParamSpec)
p'g_value_set_param :: FunPtr (Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
c'g_value_dup_param :: Ptr C'GValue -> IO (Ptr C'GParamSpec)
p'g_value_take_param :: FunPtr (Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
p'g_value_get_param :: FunPtr (Ptr C'GValue -> IO (Ptr C'GParamSpec))
c'G_IS_PARAM_SPEC_BOXED :: Ptr a -> C'gboolean
p'g_value_dup_param :: FunPtr (Ptr C'GValue -> IO (Ptr C'GParamSpec))
c'G_PARAM_SPEC_BOXED :: Ptr a -> Ptr C'GParamSpecBoxed
data C'GParamSpecBoxed
C'GParamSpecBoxed :: C'GParamSpecBoxed
c'G_TYPE_PARAM_BOXED :: C'GType
c'G_VALUE_HOLDS_BOXED :: Ptr C'GValue -> C'gboolean
c'g_param_spec_boxed :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_boxed :: Ptr C'GValue -> C'gconstpointer -> IO ()
c'g_value_set_static_boxed :: Ptr C'GValue -> C'gconstpointer -> IO ()
p'g_param_spec_boxed :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'GParamFlags -> IO (Ptr C'GParamSpec))
c'g_value_take_boxed :: Ptr C'GValue -> C'gconstpointer -> IO ()
p'g_value_set_boxed :: FunPtr (Ptr C'GValue -> C'gconstpointer -> IO ())
c'g_value_get_boxed :: Ptr C'GValue -> IO C'gpointer
p'g_value_set_static_boxed :: FunPtr (Ptr C'GValue -> C'gconstpointer -> IO ())
c'g_value_dup_boxed :: Ptr C'GValue -> IO C'gpointer
p'g_value_take_boxed :: FunPtr (Ptr C'GValue -> C'gconstpointer -> IO ())
p'g_value_get_boxed :: FunPtr (Ptr C'GValue -> IO C'gpointer)
c'G_IS_PARAM_SPEC_POINTER :: Ptr a -> C'gboolean
p'g_value_dup_boxed :: FunPtr (Ptr C'GValue -> IO C'gpointer)
c'G_PARAM_SPEC_POINTER :: Ptr a -> Ptr C'GParamSpecPointer
data C'GParamSpecPointer
C'GParamSpecPointer :: C'GParamSpecPointer
c'G_TYPE_PARAM_POINTER :: C'GType
c'G_VALUE_HOLDS_POINTER :: Ptr C'GValue -> C'gboolean
c'g_param_spec_pointer :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_pointer :: Ptr C'GValue -> C'gpointer -> IO ()
c'g_value_get_pointer :: Ptr C'GValue -> IO C'gpointer
p'g_param_spec_pointer :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_set_pointer :: FunPtr (Ptr C'GValue -> C'gpointer -> IO ())
c'G_IS_PARAM_SPEC_OBJECT :: Ptr a -> C'gboolean
p'g_value_get_pointer :: FunPtr (Ptr C'GValue -> IO C'gpointer)
c'G_PARAM_SPEC_OBJECT :: Ptr a -> Ptr C'GParamSpecObject
data C'GParamSpecObject
C'GParamSpecObject :: C'GParamSpecObject
c'G_TYPE_PARAM_OBJECT :: C'GType
c'G_VALUE_HOLDS_OBJECT :: Ptr C'GValue -> C'gboolean
c'g_param_spec_object :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_set_object :: Ptr C'GValue -> C'gpointer -> IO ()
c'g_value_take_object :: Ptr C'GValue -> C'gpointer -> IO ()
p'g_param_spec_object :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'GParamFlags -> IO (Ptr C'GParamSpec))
c'g_value_get_object :: Ptr C'GValue -> IO C'gpointer
p'g_value_set_object :: FunPtr (Ptr C'GValue -> C'gpointer -> IO ())
c'g_value_dup_object :: Ptr C'GValue -> IO C'gpointer
p'g_value_take_object :: FunPtr (Ptr C'GValue -> C'gpointer -> IO ())
p'g_value_get_object :: FunPtr (Ptr C'GValue -> IO C'gpointer)
c'G_IS_PARAM_SPEC_UNICHAR :: Ptr a -> C'gboolean
p'g_value_dup_object :: FunPtr (Ptr C'GValue -> IO C'gpointer)
c'G_PARAM_SPEC_UNICHAR :: Ptr a -> Ptr C'GParamSpecUnichar
data C'GParamSpecUnichar
C'GParamSpecUnichar :: C'GParamSpecUnichar
c'G_TYPE_PARAM_UNICHAR :: C'GType
c'g_param_spec_unichar :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gunichar -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'G_IS_PARAM_SPEC_VALUE_ARRAY :: Ptr a -> C'gboolean
p'g_param_spec_unichar :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gunichar -> C'GParamFlags -> IO (Ptr C'GParamSpec))
c'G_PARAM_SPEC_VALUE_ARRAY :: Ptr a -> Ptr C'GParamSpecValueArray
data C'GParamSpecValueArray
C'GParamSpecValueArray :: C'GParamSpecValueArray
c'G_TYPE_PARAM_VALUE_ARRAY :: C'GType
c'g_param_spec_value_array :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> Ptr C'GParamSpec -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'G_IS_PARAM_SPEC_OVERRIDE :: Ptr a -> C'gboolean
p'g_param_spec_value_array :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> Ptr C'GParamSpec -> C'GParamFlags -> IO (Ptr C'GParamSpec))
c'G_PARAM_SPEC_OVERRIDE :: Ptr a -> Ptr C'GParamSpecOverride
data C'GParamSpecOverride
C'GParamSpecOverride :: C'GParamSpecOverride
c'G_TYPE_PARAM_OVERRIDE :: C'GType
c'g_param_spec_override :: Ptr C'gchar -> Ptr C'GParamSpec -> IO (Ptr C'GParamSpec)
c'G_IS_PARAM_SPEC_GTYPE :: Ptr a -> C'gboolean
p'g_param_spec_override :: FunPtr (Ptr C'gchar -> Ptr C'GParamSpec -> IO (Ptr C'GParamSpec))
c'G_PARAM_SPEC_GTYPE :: Ptr a -> Ptr C'GParamSpecGType
data C'GParamSpecGType
C'GParamSpecGType :: C'GParamSpecGType
c'G_TYPE_PARAM_GTYPE :: C'GType
c'G_VALUE_HOLDS_GTYPE :: Ptr C'GValue -> C'gboolean
c'g_param_spec_gtype :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'GParamFlags -> IO (Ptr C'GParamSpec)
c'g_value_get_gtype :: Ptr C'GValue -> IO C'GType
c'g_value_set_gtype :: Ptr C'GValue -> C'GType -> IO ()
p'g_param_spec_gtype :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'GType -> C'GParamFlags -> IO (Ptr C'GParamSpec))
p'g_value_get_gtype :: FunPtr (Ptr C'GValue -> IO C'GType)
p'g_value_set_gtype :: FunPtr (Ptr C'GValue -> C'GType -> IO ())


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-Generic-values.html</a>
module Bindings.GObject.GenericValues
c'G_VALUE_HOLDS :: Ptr a -> C'GType -> C'gboolean
c'G_VALUE_TYPE :: Ptr a -> C'GType
c'G_VALUE_TYPE_NAME :: Ptr a -> IO (Ptr C'gchar)
c'G_TYPE_IS_VALUE :: C'GType -> C'gboolean
c'G_TYPE_IS_VALUE_ABSTRACT :: C'GType -> C'gboolean
c'G_IS_VALUE :: Ptr a -> C'gboolean
c'g_value_init :: Ptr C'GValue -> C'GType -> IO (Ptr C'GValue)
c'g_value_copy :: Ptr C'GValue -> Ptr C'GValue -> IO ()
c'g_value_reset :: Ptr C'GValue -> IO (Ptr C'GValue)
p'g_value_init :: FunPtr (Ptr C'GValue -> C'GType -> IO (Ptr C'GValue))
c'g_value_unset :: Ptr C'GValue -> IO ()
p'g_value_copy :: FunPtr (Ptr C'GValue -> Ptr C'GValue -> IO ())
c'g_value_set_instance :: Ptr C'GValue -> C'gpointer -> IO ()
p'g_value_reset :: FunPtr (Ptr C'GValue -> IO (Ptr C'GValue))
p'g_value_unset :: FunPtr (Ptr C'GValue -> IO ())
c'g_value_type_compatible :: C'GType -> C'GType -> IO C'gboolean
c'g_value_type_transformable :: C'GType -> C'GType -> IO C'gboolean
p'g_value_set_instance :: FunPtr (Ptr C'GValue -> C'gpointer -> IO ())
p'g_value_type_compatible :: FunPtr (C'GType -> C'GType -> IO C'gboolean)
c'g_value_transform :: Ptr C'GValue -> Ptr C'GValue -> IO C'gboolean
p'g_value_type_transformable :: FunPtr (C'GType -> C'GType -> IO C'gboolean)
type C'GValueTransform = FunPtr (Ptr C'GValue -> Ptr C'GValue -> IO ())
p'g_value_transform :: FunPtr (Ptr C'GValue -> Ptr C'GValue -> IO C'gboolean)
mk'GValueTransform :: (Ptr C'GValue -> Ptr C'GValue -> IO ()) -> IO C'GValueTransform
c'g_value_register_transform_func :: C'GType -> C'GType -> C'GValueTransform -> IO ()
c'g_strdup_value_contents :: Ptr C'GValue -> IO (Ptr C'gchar)
mK'GValueTransform :: C'GValueTransform -> (Ptr C'GValue -> Ptr C'GValue -> IO ())
p'g_value_register_transform_func :: FunPtr (C'GType -> C'GType -> C'GValueTransform -> IO ())
p'g_strdup_value_contents :: FunPtr (Ptr C'GValue -> IO (Ptr C'gchar))


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-Enumeration-and-Flag-Types.html</a>
module Bindings.GObject.EnumerationAndFlagTypes
data C'GEnumClass
C'GEnumClass :: C'GEnumClass
data C'GFlagsClass
C'GFlagsClass :: C'GFlagsClass
c'G_ENUM_CLASS_TYPE :: Ptr C'GEnumClass -> C'GType
c'G_ENUM_CLASS_TYPE_NAME :: Ptr C'GEnumClass -> Ptr C'gchar
c'G_TYPE_IS_ENUM :: C'GType -> C'gboolean
c'G_ENUM_CLASS :: Ptr a -> Ptr C'GEnumClass
c'G_IS_ENUM_CLASS :: Ptr a -> C'gboolean
c'G_TYPE_IS_FLAGS :: C'GType -> IO C'gboolean
c'G_FLAGS_CLASS :: Ptr a -> Ptr C'GFlagsClass
c'G_IS_FLAGS_CLASS :: Ptr a -> C'gboolean
c'G_FLAGS_CLASS_TYPE :: Ptr C'GFlagsClass -> C'GType
c'G_FLAGS_CLASS_TYPE_NAME :: Ptr C'GFlagsClass -> IO (Ptr C'gchar)
data C'GEnumValue
C'GEnumValue :: C'gint -> Ptr C'gchar -> Ptr C'gchar -> C'GEnumValue
c'GEnumValue'value :: C'GEnumValue -> C'gint
c'GEnumValue'value_name :: C'GEnumValue -> Ptr C'gchar
c'GEnumValue'value_nick :: C'GEnumValue -> Ptr C'gchar
p'GEnumValue'value :: Ptr (C'GEnumValue) -> Ptr (C'gint)
data C'GFlagsValue
C'GFlagsValue :: C'gint -> Ptr C'gchar -> Ptr C'gchar -> C'GFlagsValue
c'GFlagsValue'value :: C'GFlagsValue -> C'gint
c'GFlagsValue'value_name :: C'GFlagsValue -> Ptr C'gchar
c'GFlagsValue'value_nick :: C'GFlagsValue -> Ptr C'gchar
p'GEnumValue'value_name :: Ptr (C'GEnumValue) -> Ptr (Ptr C'gchar)
c'g_enum_get_value :: Ptr C'GEnumClass -> C'gint -> IO (Ptr C'GEnumValue)
c'g_enum_get_value_by_name :: Ptr C'GEnumClass -> Ptr C'gchar -> IO (Ptr C'GEnumValue)
p'GEnumValue'value_nick :: Ptr (C'GEnumValue) -> Ptr (Ptr C'gchar)
c'g_enum_get_value_by_nick :: Ptr C'GEnumClass -> Ptr C'gchar -> IO (Ptr C'GEnumValue)
p'g_enum_get_value :: FunPtr (Ptr C'GEnumClass -> C'gint -> IO (Ptr C'GEnumValue))
c'g_flags_get_first_value :: Ptr C'GFlagsClass -> C'guint -> IO (Ptr C'GFlagsValue)
p'g_enum_get_value_by_name :: FunPtr (Ptr C'GEnumClass -> Ptr C'gchar -> IO (Ptr C'GEnumValue))
p'GFlagsValue'value :: Ptr (C'GFlagsValue) -> Ptr (C'gint)
c'g_flags_get_value_by_name :: Ptr C'GFlagsClass -> Ptr C'gchar -> IO (Ptr C'GFlagsValue)
p'g_enum_get_value_by_nick :: FunPtr (Ptr C'GEnumClass -> Ptr C'gchar -> IO (Ptr C'GEnumValue))
c'g_flags_get_value_by_nick :: Ptr C'GFlagsClass -> Ptr C'gchar -> IO (Ptr C'GFlagsValue)
p'g_flags_get_first_value :: FunPtr (Ptr C'GFlagsClass -> C'guint -> IO (Ptr C'GFlagsValue))
p'GFlagsValue'value_name :: Ptr (C'GFlagsValue) -> Ptr (Ptr C'gchar)
c'g_enum_register_static :: Ptr C'gchar -> Ptr C'GEnumValue -> IO C'GType
p'g_flags_get_value_by_name :: FunPtr (Ptr C'GFlagsClass -> Ptr C'gchar -> IO (Ptr C'GFlagsValue))
c'g_flags_register_static :: Ptr C'gchar -> Ptr C'GFlagsValue -> IO C'GType
p'g_flags_get_value_by_nick :: FunPtr (Ptr C'GFlagsClass -> Ptr C'gchar -> IO (Ptr C'GFlagsValue))
p'GFlagsValue'value_nick :: Ptr (C'GFlagsValue) -> Ptr (Ptr C'gchar)
p'g_enum_register_static :: FunPtr (Ptr C'gchar -> Ptr C'GEnumValue -> IO C'GType)
c'g_enum_complete_type_info :: C'GType -> Ptr C'GTypeInfo -> Ptr C'GEnumValue -> IO ()
p'g_flags_register_static :: FunPtr (Ptr C'gchar -> Ptr C'GFlagsValue -> IO C'GType)
c'g_flags_complete_type_info :: C'GType -> Ptr C'GTypeInfo -> Ptr C'GFlagsValue -> IO ()
p'g_enum_complete_type_info :: FunPtr (C'GType -> Ptr C'GTypeInfo -> Ptr C'GEnumValue -> IO ())
p'g_flags_complete_type_info :: FunPtr (C'GType -> Ptr C'GTypeInfo -> Ptr C'GFlagsValue -> IO ())
instance Eq C'GEnumValue
instance Show C'GEnumValue
instance Eq C'GFlagsValue
instance Show C'GFlagsValue
instance Storable C'GFlagsValue
instance Storable C'GEnumValue


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-Closures.html</a>
module Bindings.GObject.Closures
c'G_CLOSURE_NEEDS_MARSHAL :: Ptr C'GClosure -> CInt
c'G_CLOSURE_N_NOTIFIERS :: Ptr C'GClosure -> C'guint
c'G_CCLOSURE_SWAP_DATA :: Ptr C'GClosure -> C'guint
c'G_CALLBACK :: FunPtr a -> C'GCallback
data C'GClosure
C'GClosure :: C'GClosure
type C'GCallback = FunPtr (IO ())
mk'GCallback :: (IO ()) -> IO C'GCallback
type C'GClosureNotify = FunPtr (C'gpointer -> Ptr C'GClosure -> IO ())
mK'GCallback :: C'GCallback -> (IO ())
mk'GClosureNotify :: (C'gpointer -> Ptr C'GClosure -> IO ()) -> IO C'GClosureNotify
mK'GClosureNotify :: C'GClosureNotify -> (C'gpointer -> Ptr C'GClosure -> IO ())
data C'GCClosure
C'GCClosure :: C'GClosure -> C'gpointer -> C'GCClosure
c'GCClosure'closure :: C'GCClosure -> C'GClosure
c'GCClosure'callback :: C'GCClosure -> C'gpointer
type C'GClosureMarshal = FunPtr (Ptr C'GClosure -> Ptr C'GValue -> C'guint -> Ptr C'GValue -> C'gpointer -> C'gpointer -> IO ())
mk'GClosureMarshal :: (Ptr C'GClosure -> Ptr C'GValue -> C'guint -> Ptr C'GValue -> C'gpointer -> C'gpointer -> IO ()) -> IO C'GClosureMarshal
p'GCClosure'closure :: Ptr (C'GCClosure) -> Ptr (C'GClosure)
c'g_cclosure_new :: C'GCallback -> C'gpointer -> C'GClosureNotify -> IO (Ptr C'GClosure)
mK'GClosureMarshal :: C'GClosureMarshal -> (Ptr C'GClosure -> Ptr C'GValue -> C'guint -> Ptr C'GValue -> C'gpointer -> C'gpointer -> IO ())
p'GCClosure'callback :: Ptr (C'GCClosure) -> Ptr (C'gpointer)
c'g_cclosure_new_swap :: C'GCallback -> C'gpointer -> C'GClosureNotify -> IO (Ptr C'GClosure)
p'g_cclosure_new :: FunPtr (C'GCallback -> C'gpointer -> C'GClosureNotify -> IO (Ptr C'GClosure))
c'g_closure_ref :: Ptr C'GClosure -> IO (Ptr C'GClosure)
p'g_cclosure_new_swap :: FunPtr (C'GCallback -> C'gpointer -> C'GClosureNotify -> IO (Ptr C'GClosure))
c'g_closure_sink :: Ptr C'GClosure -> IO ()
c'g_closure_unref :: Ptr C'GClosure -> IO ()
p'g_closure_ref :: FunPtr (Ptr C'GClosure -> IO (Ptr C'GClosure))
p'g_closure_sink :: FunPtr (Ptr C'GClosure -> IO ())
c'g_closure_new_simple :: C'guint -> C'gpointer -> IO (Ptr C'GClosure)
p'g_closure_unref :: FunPtr (Ptr C'GClosure -> IO ())
c'g_closure_add_finalize_notifier :: Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> IO ()
p'g_closure_new_simple :: FunPtr (C'guint -> C'gpointer -> IO (Ptr C'GClosure))
c'g_closure_remove_finalize_notifier :: Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> IO ()
p'g_closure_add_finalize_notifier :: FunPtr (Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> IO ())
c'g_closure_add_invalidate_notifier :: Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> IO ()
p'g_closure_remove_finalize_notifier :: FunPtr (Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> IO ())
c'g_closure_remove_invalidate_notifier :: Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> IO ()
p'g_closure_add_invalidate_notifier :: FunPtr (Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> IO ())
p'g_closure_remove_invalidate_notifier :: FunPtr (Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> IO ())
c'g_closure_add_marshal_guards :: Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> C'gpointer -> C'GClosureNotify -> IO ()
c'g_closure_set_marshal :: Ptr C'GClosure -> C'GClosureMarshal -> IO ()
p'g_closure_add_marshal_guards :: FunPtr (Ptr C'GClosure -> C'gpointer -> C'GClosureNotify -> C'gpointer -> C'GClosureNotify -> IO ())
c'g_closure_set_meta_marshal :: Ptr C'GClosure -> C'gpointer -> C'GClosureMarshal -> IO ()
p'g_closure_set_marshal :: FunPtr (Ptr C'GClosure -> C'GClosureMarshal -> IO ())
c'g_closure_invalidate :: Ptr C'GClosure -> IO ()
p'g_closure_set_meta_marshal :: FunPtr (Ptr C'GClosure -> C'gpointer -> C'GClosureMarshal -> IO ())
c'g_closure_invoke :: Ptr C'GClosure -> Ptr C'GValue -> C'guint -> Ptr C'GValue -> C'gpointer -> IO ()
p'g_closure_invalidate :: FunPtr (Ptr C'GClosure -> IO ())
p'g_closure_invoke :: FunPtr (Ptr C'GClosure -> Ptr C'GValue -> C'guint -> Ptr C'GValue -> C'gpointer -> IO ())
instance Eq C'GClosure
instance Show C'GClosure
instance Eq C'GCClosure
instance Show C'GCClosure
instance Storable C'GCClosure
instance Storable C'GClosure


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-Signals.html</a>
module Bindings.GObject.Signals
data C'GSignalInvocationHint
C'GSignalInvocationHint :: C'guint -> C'GQuark -> C'GSignalFlags -> C'GSignalInvocationHint
c'GSignalInvocationHint'signal_id :: C'GSignalInvocationHint -> C'guint
c'GSignalInvocationHint'detail :: C'GSignalInvocationHint -> C'GQuark
c'GSignalInvocationHint'run_type :: C'GSignalInvocationHint -> C'GSignalFlags
type C'GSignalAccumulator = FunPtr (Ptr C'GSignalInvocationHint -> Ptr C'GValue -> Ptr C'GValue -> C'gpointer -> IO C'gboolean)
mk'GSignalAccumulator :: (Ptr C'GSignalInvocationHint -> Ptr C'GValue -> Ptr C'GValue -> C'gpointer -> IO C'gboolean) -> IO C'GSignalAccumulator
type C'GSignalCMarshaller = C'GClosureMarshal
mK'GSignalAccumulator :: C'GSignalAccumulator -> (Ptr C'GSignalInvocationHint -> Ptr C'GValue -> Ptr C'GValue -> C'gpointer -> IO C'gboolean)
p'GSignalInvocationHint'signal_id :: Ptr (C'GSignalInvocationHint) -> Ptr (C'guint)
type C'GSignalEmissionHook = FunPtr (Ptr C'GSignalInvocationHint -> C'guint -> Ptr C'GValue -> C'gpointer -> IO C'gboolean)
p'GSignalInvocationHint'detail :: Ptr (C'GSignalInvocationHint) -> Ptr (C'GQuark)
mk'GSignalEmissionHook :: (Ptr C'GSignalInvocationHint -> C'guint -> Ptr C'GValue -> C'gpointer -> IO C'gboolean) -> IO C'GSignalEmissionHook
type C'GSignalFlags = CUInt
p'GSignalInvocationHint'run_type :: Ptr (C'GSignalInvocationHint) -> Ptr (C'GSignalFlags)
mK'GSignalEmissionHook :: C'GSignalEmissionHook -> (Ptr C'GSignalInvocationHint -> C'guint -> Ptr C'GValue -> C'gpointer -> IO C'gboolean)
c'G_SIGNAL_RUN_FIRST :: Num a => a
c'G_SIGNAL_RUN_LAST :: Num a => a
c'G_SIGNAL_RUN_CLEANUP :: Num a => a
c'G_SIGNAL_NO_RECURSE :: Num a => a
c'G_SIGNAL_DETAILED :: Num a => a
c'G_SIGNAL_ACTION :: Num a => a
c'G_SIGNAL_NO_HOOKS :: Num a => a
type C'GSignalMatchType = CUInt
c'G_SIGNAL_MATCH_ID :: Num a => a
c'G_SIGNAL_MATCH_DETAIL :: Num a => a
c'G_SIGNAL_MATCH_CLOSURE :: Num a => a
c'G_SIGNAL_MATCH_FUNC :: Num a => a
c'G_SIGNAL_MATCH_DATA :: Num a => a
c'G_SIGNAL_MATCH_UNBLOCKED :: Num a => a
data C'GSignalQuery
C'GSignalQuery :: C'guint -> Ptr C'gchar -> C'GType -> C'GSignalFlags -> C'GType -> C'guint -> Ptr C'GType -> C'GSignalQuery
c'GSignalQuery'signal_id :: C'GSignalQuery -> C'guint
c'GSignalQuery'signal_name :: C'GSignalQuery -> Ptr C'gchar
c'GSignalQuery'itype :: C'GSignalQuery -> C'GType
c'GSignalQuery'signal_flags :: C'GSignalQuery -> C'GSignalFlags
c'GSignalQuery'return_type :: C'GSignalQuery -> C'GType
c'GSignalQuery'n_params :: C'GSignalQuery -> C'guint
c'GSignalQuery'param_types :: C'GSignalQuery -> Ptr C'GType
c'G_SIGNAL_TYPE_STATIC_SCOPE :: Num a => a
c'G_SIGNAL_MATCH_MASK :: Num a => a
c'G_SIGNAL_FLAGS_MASK :: Num a => a
c'g_signal_newv :: Ptr C'gchar -> C'GType -> C'GSignalFlags -> Ptr C'GClosure -> C'GSignalAccumulator -> C'gpointer -> C'GSignalCMarshaller -> C'GType -> C'guint -> Ptr C'GType -> IO C'guint
p'g_signal_newv :: FunPtr (Ptr C'gchar -> C'GType -> C'GSignalFlags -> Ptr C'GClosure -> C'GSignalAccumulator -> C'gpointer -> C'GSignalCMarshaller -> C'GType -> C'guint -> Ptr C'GType -> IO C'guint)
c'g_signal_query :: C'guint -> Ptr C'GSignalQuery -> IO ()
p'GSignalQuery'signal_id :: Ptr (C'GSignalQuery) -> Ptr (C'guint)
c'g_signal_lookup :: Ptr C'gchar -> C'GType -> IO C'guint
c'g_signal_name :: C'guint -> IO (Ptr C'gchar)
p'g_signal_query :: FunPtr (C'guint -> Ptr C'GSignalQuery -> IO ())
p'GSignalQuery'signal_name :: Ptr (C'GSignalQuery) -> Ptr (Ptr C'gchar)
c'g_signal_list_ids :: C'GType -> Ptr C'guint -> IO (Ptr C'guint)
p'g_signal_lookup :: FunPtr (Ptr C'gchar -> C'GType -> IO C'guint)
p'g_signal_name :: FunPtr (C'guint -> IO (Ptr C'gchar))
c'g_signal_emitv :: Ptr C'GValue -> C'guint -> C'GQuark -> Ptr C'GValue -> IO ()
p'GSignalQuery'itype :: Ptr (C'GSignalQuery) -> Ptr (C'GType)
p'g_signal_list_ids :: FunPtr (C'GType -> Ptr C'guint -> IO (Ptr C'guint))
p'g_signal_emitv :: FunPtr (Ptr C'GValue -> C'guint -> C'GQuark -> Ptr C'GValue -> IO ())
p'GSignalQuery'signal_flags :: Ptr (C'GSignalQuery) -> Ptr (C'GSignalFlags)
c'g_signal_connect :: C'gpointer -> Ptr C'gchar -> C'GCallback -> C'gpointer -> IO C'gulong
c'g_signal_connect_after :: C'gpointer -> Ptr C'gchar -> C'GCallback -> C'gpointer -> IO C'gulong
p'GSignalQuery'return_type :: Ptr (C'GSignalQuery) -> Ptr (C'GType)
c'g_signal_connect_swapped :: C'gpointer -> Ptr C'gchar -> C'GCallback -> C'gpointer -> IO C'gulong
p'GSignalQuery'n_params :: Ptr (C'GSignalQuery) -> Ptr (C'guint)
c'g_signal_connect_object :: C'gpointer -> Ptr C'gchar -> C'GCallback -> C'gpointer -> C'GConnectFlags -> IO C'gulong
p'GSignalQuery'param_types :: Ptr (C'GSignalQuery) -> Ptr (Ptr C'GType)
p'g_signal_connect_object :: FunPtr (C'gpointer -> Ptr C'gchar -> C'GCallback -> C'gpointer -> C'GConnectFlags -> IO C'gulong)
type C'GConnectFlags = CUInt
c'G_CONNECT_AFTER :: Num a => a
c'G_CONNECT_SWAPPED :: Num a => a
c'g_signal_connect_data :: C'gpointer -> Ptr C'gchar -> C'GCallback -> C'gpointer -> C'GClosureNotify -> C'GConnectFlags -> IO C'gulong
p'g_signal_connect_data :: FunPtr (C'gpointer -> Ptr C'gchar -> C'GCallback -> C'gpointer -> C'GClosureNotify -> C'GConnectFlags -> IO C'gulong)
c'g_signal_connect_closure :: C'gpointer -> Ptr C'gchar -> Ptr C'GClosure -> C'gboolean -> IO C'gulong
c'g_signal_connect_closure_by_id :: C'gpointer -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gboolean -> IO C'gulong
p'g_signal_connect_closure :: FunPtr (C'gpointer -> Ptr C'gchar -> Ptr C'GClosure -> C'gboolean -> IO C'gulong)
c'g_signal_handler_block :: C'gpointer -> C'gulong -> IO ()
p'g_signal_connect_closure_by_id :: FunPtr (C'gpointer -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gboolean -> IO C'gulong)
c'g_signal_handler_unblock :: C'gpointer -> C'gulong -> IO ()
c'g_signal_handler_disconnect :: C'gpointer -> C'gulong -> IO ()
p'g_signal_handler_block :: FunPtr (C'gpointer -> C'gulong -> IO ())
p'g_signal_handler_unblock :: FunPtr (C'gpointer -> C'gulong -> IO ())
c'g_signal_handler_find :: C'gpointer -> C'GSignalMatchType -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gpointer -> C'gpointer -> IO C'gulong
p'g_signal_handler_disconnect :: FunPtr (C'gpointer -> C'gulong -> IO ())
p'g_signal_handler_find :: FunPtr (C'gpointer -> C'GSignalMatchType -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gpointer -> C'gpointer -> IO C'gulong)
c'g_signal_handlers_block_matched :: C'gpointer -> C'GSignalMatchType -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gpointer -> C'gpointer -> IO C'guint
p'g_signal_handlers_block_matched :: FunPtr (C'gpointer -> C'GSignalMatchType -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gpointer -> C'gpointer -> IO C'guint)
c'g_signal_handlers_unblock_matched :: C'gpointer -> C'GSignalMatchType -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gpointer -> C'gpointer -> IO C'guint
p'g_signal_handlers_unblock_matched :: FunPtr (C'gpointer -> C'GSignalMatchType -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gpointer -> C'gpointer -> IO C'guint)
c'g_signal_handlers_disconnect_matched :: C'gpointer -> C'GSignalMatchType -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gpointer -> C'gpointer -> IO C'guint
p'g_signal_handlers_disconnect_matched :: FunPtr (C'gpointer -> C'GSignalMatchType -> C'guint -> C'GQuark -> Ptr C'GClosure -> C'gpointer -> C'gpointer -> IO C'guint)
c'g_signal_handler_is_connected :: C'gpointer -> C'gulong -> IO C'gboolean
p'g_signal_handler_is_connected :: FunPtr (C'gpointer -> C'gulong -> IO C'gboolean)
c'g_signal_handlers_block_by_func :: C'gpointer -> C'gpointer -> C'gpointer -> IO C'guint
c'g_signal_handlers_unblock_by_func :: C'gpointer -> C'gpointer -> C'gpointer -> IO C'guint
c'g_signal_handlers_disconnect_by_func :: C'gpointer -> C'gpointer -> C'gpointer -> IO C'guint
c'g_signal_has_handler_pending :: C'gpointer -> C'guint -> C'GQuark -> C'gboolean -> IO C'gboolean
c'g_signal_stop_emission :: C'gpointer -> C'guint -> C'GQuark -> IO ()
p'g_signal_has_handler_pending :: FunPtr (C'gpointer -> C'guint -> C'GQuark -> C'gboolean -> IO C'gboolean)
c'g_signal_stop_emission_by_name :: C'gpointer -> Ptr C'gchar -> IO ()
c'g_signal_override_class_closure :: C'guint -> C'GType -> Ptr C'GClosure -> IO ()
p'g_signal_stop_emission :: FunPtr (C'gpointer -> C'guint -> C'GQuark -> IO ())
p'g_signal_stop_emission_by_name :: FunPtr (C'gpointer -> Ptr C'gchar -> IO ())
c'g_signal_chain_from_overridden :: Ptr C'GValue -> Ptr C'GValue -> IO ()
p'g_signal_override_class_closure :: FunPtr (C'guint -> C'GType -> Ptr C'GClosure -> IO ())
c'g_signal_override_class_handler :: Ptr C'gchar -> C'GType -> C'GCallback -> IO ()
p'g_signal_chain_from_overridden :: FunPtr (Ptr C'GValue -> Ptr C'GValue -> IO ())
p'g_signal_override_class_handler :: FunPtr (Ptr C'gchar -> C'GType -> C'GCallback -> IO ())
c'g_signal_add_emission_hook :: C'guint -> C'GQuark -> C'GSignalEmissionHook -> C'gpointer -> C'GDestroyNotify -> IO C'gulong
c'g_signal_remove_emission_hook :: C'guint -> C'gulong -> IO ()
p'g_signal_add_emission_hook :: FunPtr (C'guint -> C'GQuark -> C'GSignalEmissionHook -> C'gpointer -> C'GDestroyNotify -> IO C'gulong)
c'g_signal_parse_name :: Ptr C'gchar -> C'GType -> Ptr C'guint -> Ptr C'GQuark -> C'gboolean -> IO C'gboolean
p'g_signal_remove_emission_hook :: FunPtr (C'guint -> C'gulong -> IO ())
c'g_signal_get_invocation_hint :: C'gpointer -> IO (Ptr C'GSignalInvocationHint)
p'g_signal_parse_name :: FunPtr (Ptr C'gchar -> C'GType -> Ptr C'guint -> Ptr C'GQuark -> C'gboolean -> IO C'gboolean)
c'g_signal_type_cclosure_new :: C'GType -> C'guint -> IO (Ptr C'GClosure)
p'g_signal_get_invocation_hint :: FunPtr (C'gpointer -> IO (Ptr C'GSignalInvocationHint))
c'g_signal_accumulator_true_handled :: Ptr C'GSignalInvocationHint -> Ptr C'GValue -> Ptr C'GValue -> C'gpointer -> IO C'gboolean
p'g_signal_type_cclosure_new :: FunPtr (C'GType -> C'guint -> IO (Ptr C'GClosure))
p'g_signal_accumulator_true_handled :: FunPtr (Ptr C'GSignalInvocationHint -> Ptr C'GValue -> Ptr C'GValue -> C'gpointer -> IO C'gboolean)
instance Eq C'GSignalInvocationHint
instance Show C'GSignalInvocationHint
instance Eq C'GSignalQuery
instance Show C'GSignalQuery
instance Storable C'GSignalQuery
instance Storable C'GSignalInvocationHint


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-Boxed-Types.html</a>
module Bindings.GObject.BoxedTypes
type C'GBoxedCopyFunc = FunPtr (C'gpointer -> IO C'gpointer)
type C'GBoxedFreeFunc = FunPtr (C'gpointer -> IO ())
mk'GBoxedCopyFunc :: (C'gpointer -> IO C'gpointer) -> IO C'GBoxedCopyFunc
mk'GBoxedFreeFunc :: (C'gpointer -> IO ()) -> IO C'GBoxedFreeFunc
c'g_boxed_copy :: C'GType -> C'gconstpointer -> IO C'gpointer
mK'GBoxedCopyFunc :: C'GBoxedCopyFunc -> (C'gpointer -> IO C'gpointer)
c'g_boxed_free :: C'GType -> C'gpointer -> IO ()
mK'GBoxedFreeFunc :: C'GBoxedFreeFunc -> (C'gpointer -> IO ())
p'g_boxed_copy :: FunPtr (C'GType -> C'gconstpointer -> IO C'gpointer)
c'g_boxed_type_register_static :: Ptr C'gchar -> C'GBoxedCopyFunc -> C'GBoxedFreeFunc -> IO C'GType
c'g_pointer_type_register_static :: Ptr C'gchar -> IO C'GType
p'g_boxed_free :: FunPtr (C'GType -> C'gpointer -> IO ())
p'g_boxed_type_register_static :: FunPtr (Ptr C'gchar -> C'GBoxedCopyFunc -> C'GBoxedFreeFunc -> IO C'GType)
c'G_TYPE_HASH_TABLE :: C'GType
p'g_pointer_type_register_static :: FunPtr (Ptr C'gchar -> IO C'GType)
c'G_TYPE_DATE :: C'GType
c'G_TYPE_GSTRING :: C'GType
c'G_TYPE_STRV :: C'GType
c'G_TYPE_REGEX :: C'GType
c'G_TYPE_ARRAY :: C'GType
c'G_TYPE_BYTE_ARRAY :: C'GType
c'G_TYPE_PTR_ARRAY :: C'GType
type C'GStrv = Ptr (Ptr C'gchar)


-- | 
--   <a>http://library.gnome.org/devel/gobject/stable/gobject-The-Base-Object-Type.html</a>
module Bindings.GObject.BaseObjectType
data C'GObject
C'GObject :: C'GTypeInstance -> C'guint -> Ptr () -> C'GObject
c'GObject'g_type_instance :: C'GObject -> C'GTypeInstance
c'GObject'ref_count :: C'GObject -> C'guint
c'GObject'qdata :: C'GObject -> Ptr ()
type C'GObjectClass_constructor = FunPtr (C'GType -> C'guint -> Ptr C'GObjectConstructParam -> IO (Ptr C'GObject))
type C'GObjectClass_set_property = FunPtr (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
mk'GObjectClass_constructor :: (C'GType -> C'guint -> Ptr C'GObjectConstructParam -> IO (Ptr C'GObject)) -> IO C'GObjectClass_constructor
type C'GObjectClass_get_property = FunPtr (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
mk'GObjectClass_set_property :: (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ()) -> IO C'GObjectClass_set_property
type C'GObjectClass_dispose = FunPtr (Ptr C'GObject -> IO ())
mK'GObjectClass_constructor :: C'GObjectClass_constructor -> (C'GType -> C'guint -> Ptr C'GObjectConstructParam -> IO (Ptr C'GObject))
mk'GObjectClass_get_property :: (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ()) -> IO C'GObjectClass_get_property
type C'GObjectClass_finalize = FunPtr (Ptr C'GObject -> IO ())
p'GObject'g_type_instance :: Ptr (C'GObject) -> Ptr (C'GTypeInstance)
mk'GObjectClass_dispose :: (Ptr C'GObject -> IO ()) -> IO C'GObjectClass_dispose
mK'GObjectClass_set_property :: C'GObjectClass_set_property -> (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
type C'GObjectClass_dispatch_properties_changed = FunPtr (Ptr C'GObject -> C'guint -> Ptr (Ptr C'GParamSpec) -> IO ())
mk'GObjectClass_finalize :: (Ptr C'GObject -> IO ()) -> IO C'GObjectClass_finalize
mK'GObjectClass_get_property :: C'GObjectClass_get_property -> (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
p'GObject'ref_count :: Ptr (C'GObject) -> Ptr (C'guint)
type C'GObjectClass_notify = FunPtr (Ptr C'GObject -> Ptr C'GParamSpec -> IO ())
mK'GObjectClass_dispose :: C'GObjectClass_dispose -> (Ptr C'GObject -> IO ())
mk'GObjectClass_dispatch_properties_changed :: (Ptr C'GObject -> C'guint -> Ptr (Ptr C'GParamSpec) -> IO ()) -> IO C'GObjectClass_dispatch_properties_changed
type C'GObjectClass_constructed = FunPtr (Ptr C'GObject -> IO ())
mK'GObjectClass_finalize :: C'GObjectClass_finalize -> (Ptr C'GObject -> IO ())
mk'GObjectClass_notify :: (Ptr C'GObject -> Ptr C'GParamSpec -> IO ()) -> IO C'GObjectClass_notify
p'GObject'qdata :: Ptr (C'GObject) -> Ptr (Ptr ())
mk'GObjectClass_constructed :: (Ptr C'GObject -> IO ()) -> IO C'GObjectClass_constructed
mK'GObjectClass_dispatch_properties_changed :: C'GObjectClass_dispatch_properties_changed -> (Ptr C'GObject -> C'guint -> Ptr (Ptr C'GParamSpec) -> IO ())
mK'GObjectClass_notify :: C'GObjectClass_notify -> (Ptr C'GObject -> Ptr C'GParamSpec -> IO ())
mK'GObjectClass_constructed :: C'GObjectClass_constructed -> (Ptr C'GObject -> IO ())
data C'GObjectClass
C'GObjectClass :: C'GTypeClass -> Ptr C'GSList -> C'GObjectClass_constructor -> C'GObjectClass_set_property -> C'GObjectClass_get_property -> C'GObjectClass_dispose -> C'GObjectClass_finalize -> C'GObjectClass_dispatch_properties_changed -> C'GObjectClass_notify -> C'GObjectClass_constructed -> C'gsize -> [C'gpointer] -> C'GObjectClass
c'GObjectClass'g_type_class :: C'GObjectClass -> C'GTypeClass
c'GObjectClass'construct_properties :: C'GObjectClass -> Ptr C'GSList
c'GObjectClass'constructor :: C'GObjectClass -> C'GObjectClass_constructor
c'GObjectClass'set_property :: C'GObjectClass -> C'GObjectClass_set_property
c'GObjectClass'get_property :: C'GObjectClass -> C'GObjectClass_get_property
c'GObjectClass'dispose :: C'GObjectClass -> C'GObjectClass_dispose
c'GObjectClass'finalize :: C'GObjectClass -> C'GObjectClass_finalize
c'GObjectClass'dispatch_properties_changed :: C'GObjectClass -> C'GObjectClass_dispatch_properties_changed
c'GObjectClass'notify :: C'GObjectClass -> C'GObjectClass_notify
c'GObjectClass'constructed :: C'GObjectClass -> C'GObjectClass_constructed
c'GObjectClass'flags :: C'GObjectClass -> C'gsize
c'GObjectClass'pdummy :: C'GObjectClass -> [C'gpointer]
c'G_TYPE_OBJECT :: C'GType
c'G_OBJECT :: Ptr a -> Ptr C'GObject
c'G_IS_OBJECT :: Ptr a -> C'gboolean
data C'GObjectConstructParam
C'GObjectConstructParam :: Ptr C'GParamSpec -> Ptr C'GValue -> C'GObjectConstructParam
c'GObjectConstructParam'pspec :: C'GObjectConstructParam -> Ptr C'GParamSpec
c'GObjectConstructParam'value :: C'GObjectConstructParam -> Ptr C'GValue
c'G_OBJECT_CLASS :: Ptr a -> Ptr C'GObjectClass
type C'GObjectGetPropertyFunc = FunPtr (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
type C'GObjectSetPropertyFunc = FunPtr (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
c'G_IS_OBJECT_CLASS :: Ptr a -> C'gboolean
mk'GObjectGetPropertyFunc :: (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ()) -> IO C'GObjectGetPropertyFunc
type C'GObjectFinalizeFunc = FunPtr (Ptr C'GObject -> IO ())
mk'GObjectSetPropertyFunc :: (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ()) -> IO C'GObjectSetPropertyFunc
p'GObjectConstructParam'pspec :: Ptr (C'GObjectConstructParam) -> Ptr (Ptr C'GParamSpec)
c'G_OBJECT_GET_CLASS :: Ptr a -> Ptr C'GObjectClass
mk'GObjectFinalizeFunc :: (Ptr C'GObject -> IO ()) -> IO C'GObjectFinalizeFunc
mK'GObjectGetPropertyFunc :: C'GObjectGetPropertyFunc -> (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
c'G_TYPE_IS_OBJECT :: C'GType -> C'gboolean
mK'GObjectSetPropertyFunc :: C'GObjectSetPropertyFunc -> (Ptr C'GObject -> C'guint -> Ptr C'GValue -> Ptr C'GParamSpec -> IO ())
p'GObjectConstructParam'value :: Ptr (C'GObjectConstructParam) -> Ptr (Ptr C'GValue)
c'G_OBJECT_TYPE :: Ptr a -> C'GType
mK'GObjectFinalizeFunc :: C'GObjectFinalizeFunc -> (Ptr C'GObject -> IO ())
p'GObjectClass'g_type_class :: Ptr (C'GObjectClass) -> Ptr (C'GTypeClass)
c'G_OBJECT_TYPE_NAME :: Ptr a -> IO (Ptr C'gchar)
c'G_OBJECT_CLASS_TYPE :: Ptr a -> IO C'GType
p'GObjectClass'construct_properties :: Ptr (C'GObjectClass) -> Ptr (Ptr C'GSList)
c'G_OBJECT_CLASS_NAME :: Ptr a -> IO (Ptr C'gchar)
p'GObjectClass'constructor :: Ptr (C'GObjectClass) -> Ptr (C'GObjectClass_constructor)
c'g_object_class_install_property :: Ptr C'GObjectClass -> C'guint -> Ptr C'GParamSpec -> IO ()
c'g_object_class_find_property :: Ptr C'GObjectClass -> Ptr C'gchar -> IO (Ptr C'GParamSpec)
p'GObjectClass'set_property :: Ptr (C'GObjectClass) -> Ptr (C'GObjectClass_set_property)
c'g_object_class_list_properties :: Ptr C'GObjectClass -> Ptr C'guint -> IO (Ptr (Ptr C'GParamSpec))
p'g_object_class_install_property :: FunPtr (Ptr C'GObjectClass -> C'guint -> Ptr C'GParamSpec -> IO ())
c'g_object_class_override_property :: Ptr C'GObjectClass -> C'guint -> Ptr C'gchar -> IO ()
p'g_object_class_find_property :: FunPtr (Ptr C'GObjectClass -> Ptr C'gchar -> IO (Ptr C'GParamSpec))
p'GObjectClass'get_property :: Ptr (C'GObjectClass) -> Ptr (C'GObjectClass_get_property)
c'g_object_interface_install_property :: C'gpointer -> Ptr C'GParamSpec -> IO ()
p'g_object_class_list_properties :: FunPtr (Ptr C'GObjectClass -> Ptr C'guint -> IO (Ptr (Ptr C'GParamSpec)))
c'g_object_interface_find_property :: C'gpointer -> Ptr C'gchar -> IO (Ptr C'GParamSpec)
p'g_object_class_override_property :: FunPtr (Ptr C'GObjectClass -> C'guint -> Ptr C'gchar -> IO ())
p'GObjectClass'dispose :: Ptr (C'GObjectClass) -> Ptr (C'GObjectClass_dispose)
p'g_object_interface_install_property :: FunPtr (C'gpointer -> Ptr C'GParamSpec -> IO ())
c'g_object_interface_list_properties :: C'gpointer -> Ptr C'guint -> IO (Ptr (Ptr C'GParamSpec))
c'g_object_newv :: C'GType -> C'guint -> Ptr C'GParameter -> IO C'gpointer
p'g_object_interface_find_property :: FunPtr (C'gpointer -> Ptr C'gchar -> IO (Ptr C'GParamSpec))
p'GObjectClass'finalize :: Ptr (C'GObjectClass) -> Ptr (C'GObjectClass_finalize)
p'g_object_interface_list_properties :: FunPtr (C'gpointer -> Ptr C'guint -> IO (Ptr (Ptr C'GParamSpec)))
p'g_object_newv :: FunPtr (C'GType -> C'guint -> Ptr C'GParameter -> IO C'gpointer)
p'GObjectClass'dispatch_properties_changed :: Ptr (C'GObjectClass) -> Ptr (C'GObjectClass_dispatch_properties_changed)
p'GObjectClass'notify :: Ptr (C'GObjectClass) -> Ptr (C'GObjectClass_notify)
data C'GParameter
C'GParameter :: Ptr C'gchar -> C'GValue -> C'GParameter
c'GParameter'name :: C'GParameter -> Ptr C'gchar
c'GParameter'value :: C'GParameter -> C'GValue
p'GObjectClass'constructed :: Ptr (C'GObjectClass) -> Ptr (C'GObjectClass_constructed)
c'g_object_ref :: C'gpointer -> IO C'gpointer
c'g_object_unref :: C'gpointer -> IO ()
p'GObjectClass'flags :: Ptr (C'GObjectClass) -> Ptr (C'gsize)
c'g_object_ref_sink :: C'gpointer -> IO C'gpointer
p'g_object_ref :: FunPtr (C'gpointer -> IO C'gpointer)
p'GParameter'name :: Ptr (C'GParameter) -> Ptr (Ptr C'gchar)
p'g_object_unref :: FunPtr (C'gpointer -> IO ())
p'GObjectClass'pdummy :: Ptr (C'GObjectClass) -> Ptr (C'gpointer)
p'g_object_ref_sink :: FunPtr (C'gpointer -> IO C'gpointer)
p'GParameter'value :: Ptr (C'GParameter) -> Ptr (C'GValue)
data C'GInitiallyUnowned
C'GInitiallyUnowned :: C'GInitiallyUnowned
data C'GInitiallyUnownedClass
C'GInitiallyUnownedClass :: C'GInitiallyUnownedClass
c'G_TYPE_INITIALLY_UNOWNED :: IO C'GType
c'g_object_is_floating :: C'gpointer -> IO C'gboolean
c'g_object_force_floating :: Ptr C'GObject -> IO ()
p'g_object_is_floating :: FunPtr (C'gpointer -> IO C'gboolean)
type C'GWeakNotify = FunPtr (C'gpointer -> Ptr C'GObject -> IO ())
p'g_object_force_floating :: FunPtr (Ptr C'GObject -> IO ())
mk'GWeakNotify :: (C'gpointer -> Ptr C'GObject -> IO ()) -> IO C'GWeakNotify
c'g_object_weak_ref :: Ptr C'GObject -> C'GWeakNotify -> C'gpointer -> IO ()
c'g_object_weak_unref :: Ptr C'GObject -> C'GWeakNotify -> C'gpointer -> IO ()
mK'GWeakNotify :: C'GWeakNotify -> (C'gpointer -> Ptr C'GObject -> IO ())
c'g_object_add_weak_pointer :: Ptr C'GObject -> Ptr C'gpointer -> IO ()
p'g_object_weak_ref :: FunPtr (Ptr C'GObject -> C'GWeakNotify -> C'gpointer -> IO ())
c'g_object_remove_weak_pointer :: Ptr C'GObject -> Ptr C'gpointer -> IO ()
p'g_object_weak_unref :: FunPtr (Ptr C'GObject -> C'GWeakNotify -> C'gpointer -> IO ())
p'g_object_add_weak_pointer :: FunPtr (Ptr C'GObject -> Ptr C'gpointer -> IO ())
type C'GToggleNotify = FunPtr (C'gpointer -> Ptr C'GObject -> C'gboolean -> IO ())
p'g_object_remove_weak_pointer :: FunPtr (Ptr C'GObject -> Ptr C'gpointer -> IO ())
mk'GToggleNotify :: (C'gpointer -> Ptr C'GObject -> C'gboolean -> IO ()) -> IO C'GToggleNotify
c'g_object_add_toggle_ref :: Ptr C'GObject -> C'GToggleNotify -> C'gpointer -> IO ()
c'g_object_remove_toggle_ref :: Ptr C'GObject -> C'GToggleNotify -> C'gpointer -> IO ()
mK'GToggleNotify :: C'GToggleNotify -> (C'gpointer -> Ptr C'GObject -> C'gboolean -> IO ())
c'g_object_notify :: Ptr C'GObject -> Ptr C'gchar -> IO ()
p'g_object_add_toggle_ref :: FunPtr (Ptr C'GObject -> C'GToggleNotify -> C'gpointer -> IO ())
c'g_object_freeze_notify :: Ptr C'GObject -> IO ()
p'g_object_remove_toggle_ref :: FunPtr (Ptr C'GObject -> C'GToggleNotify -> C'gpointer -> IO ())
c'g_object_thaw_notify :: Ptr C'GObject -> IO ()
p'g_object_notify :: FunPtr (Ptr C'GObject -> Ptr C'gchar -> IO ())
p'g_object_freeze_notify :: FunPtr (Ptr C'GObject -> IO ())
c'g_object_get_data :: Ptr C'GObject -> Ptr C'gchar -> IO C'gpointer
p'g_object_thaw_notify :: FunPtr (Ptr C'GObject -> IO ())
c'g_object_set_data :: Ptr C'GObject -> Ptr C'gchar -> C'gpointer -> IO ()
p'g_object_get_data :: FunPtr (Ptr C'GObject -> Ptr C'gchar -> IO C'gpointer)
c'g_object_set_data_full :: Ptr C'GObject -> Ptr C'gchar -> C'gpointer -> C'GDestroyNotify -> IO ()
c'g_object_steal_data :: Ptr C'GObject -> Ptr C'gchar -> IO C'gpointer
p'g_object_set_data :: FunPtr (Ptr C'GObject -> Ptr C'gchar -> C'gpointer -> IO ())
c'g_object_get_qdata :: Ptr C'GObject -> C'GQuark -> IO C'gpointer
p'g_object_set_data_full :: FunPtr (Ptr C'GObject -> Ptr C'gchar -> C'gpointer -> C'GDestroyNotify -> IO ())
c'g_object_set_qdata :: Ptr C'GObject -> C'GQuark -> C'gpointer -> IO ()
p'g_object_steal_data :: FunPtr (Ptr C'GObject -> Ptr C'gchar -> IO C'gpointer)
p'g_object_get_qdata :: FunPtr (Ptr C'GObject -> C'GQuark -> IO C'gpointer)
c'g_object_set_qdata_full :: Ptr C'GObject -> C'GQuark -> C'gpointer -> C'GDestroyNotify -> IO ()
c'g_object_steal_qdata :: Ptr C'GObject -> C'GQuark -> IO C'gpointer
p'g_object_set_qdata :: FunPtr (Ptr C'GObject -> C'GQuark -> C'gpointer -> IO ())
c'g_object_set_property :: Ptr C'GObject -> Ptr C'gchar -> Ptr C'GValue -> IO ()
p'g_object_set_qdata_full :: FunPtr (Ptr C'GObject -> C'GQuark -> C'gpointer -> C'GDestroyNotify -> IO ())
p'g_object_steal_qdata :: FunPtr (Ptr C'GObject -> C'GQuark -> IO C'gpointer)
c'g_object_get_property :: Ptr C'GObject -> Ptr C'gchar -> Ptr C'GValue -> IO ()
c'g_object_watch_closure :: Ptr C'GObject -> Ptr C'GClosure -> IO ()
p'g_object_set_property :: FunPtr (Ptr C'GObject -> Ptr C'gchar -> Ptr C'GValue -> IO ())
c'g_object_run_dispose :: Ptr C'GObject -> IO ()
p'g_object_get_property :: FunPtr (Ptr C'GObject -> Ptr C'gchar -> Ptr C'GValue -> IO ())
p'g_object_watch_closure :: FunPtr (Ptr C'GObject -> Ptr C'GClosure -> IO ())
p'g_object_run_dispose :: FunPtr (Ptr C'GObject -> IO ())
c'G_OBJECT_WARN_INVALID_PROPERTY_ID :: Ptr C'GObject -> C'guint -> Ptr C'GParamSpec -> IO ()
instance Eq C'GObject
instance Show C'GObject
instance Eq C'GObjectConstructParam
instance Show C'GObjectConstructParam
instance Eq C'GObjectClass
instance Show C'GObjectClass
instance Eq C'GParameter
instance Show C'GParameter
instance Eq C'GInitiallyUnowned
instance Show C'GInitiallyUnowned
instance Eq C'GInitiallyUnownedClass
instance Show C'GInitiallyUnownedClass
instance Storable C'GInitiallyUnownedClass
instance Storable C'GInitiallyUnowned
instance Storable C'GParameter
instance Storable C'GObjectConstructParam
instance Storable C'GObjectClass
instance Storable C'GObject


-- | <a>http://library.gnome.org/devel/gobject/stable/GTypeModule.html</a>
module Bindings.GObject.GTypeModule
data C'GTypeModule
C'GTypeModule :: Ptr C'gchar -> C'GTypeModule
c'GTypeModule'name :: C'GTypeModule -> Ptr C'gchar
p'GTypeModule'name :: Ptr (C'GTypeModule) -> Ptr (Ptr C'gchar)
data C'GTypeModuleClass
C'GTypeModuleClass :: FunPtr (Ptr C'GTypeModule -> IO C'gboolean) -> FunPtr (Ptr C'GTypeModule -> IO ()) -> C'GTypeModuleClass
c'GTypeModuleClass'load :: C'GTypeModuleClass -> FunPtr (Ptr C'GTypeModule -> IO C'gboolean)
c'GTypeModuleClass'unload :: C'GTypeModuleClass -> FunPtr (Ptr C'GTypeModule -> IO ())
c'g_type_module_use :: Ptr C'GTypeModule -> IO C'gboolean
c'g_type_module_unuse :: Ptr C'GTypeModule -> IO ()
c'g_type_module_set_name :: Ptr C'GTypeModule -> Ptr C'gchar -> IO ()
p'g_type_module_use :: FunPtr (Ptr C'GTypeModule -> IO C'gboolean)
p'GTypeModuleClass'load :: Ptr (C'GTypeModuleClass) -> Ptr (FunPtr (Ptr C'GTypeModule -> IO C'gboolean))
p'g_type_module_unuse :: FunPtr (Ptr C'GTypeModule -> IO ())
c'g_type_module_register_type :: Ptr C'GTypeModule -> C'GType -> Ptr C'gchar -> Ptr C'GTypeInfo -> C'GTypeFlags -> IO C'GType
p'g_type_module_set_name :: FunPtr (Ptr C'GTypeModule -> Ptr C'gchar -> IO ())
c'g_type_module_add_interface :: Ptr C'GTypeModule -> C'GType -> C'GType -> Ptr C'GInterfaceInfo -> IO ()
p'GTypeModuleClass'unload :: Ptr (C'GTypeModuleClass) -> Ptr (FunPtr (Ptr C'GTypeModule -> IO ()))
c'g_type_module_register_enum :: Ptr C'GTypeModule -> Ptr C'gchar -> Ptr C'GEnumValue -> IO C'GType
p'g_type_module_register_type :: FunPtr (Ptr C'GTypeModule -> C'GType -> Ptr C'gchar -> Ptr C'GTypeInfo -> C'GTypeFlags -> IO C'GType)
c'g_type_module_register_flags :: Ptr C'GTypeModule -> Ptr C'gchar -> Ptr C'GFlagsValue -> IO C'GType
p'g_type_module_add_interface :: FunPtr (Ptr C'GTypeModule -> C'GType -> C'GType -> Ptr C'GInterfaceInfo -> IO ())
p'g_type_module_register_enum :: FunPtr (Ptr C'GTypeModule -> Ptr C'gchar -> Ptr C'GEnumValue -> IO C'GType)
p'g_type_module_register_flags :: FunPtr (Ptr C'GTypeModule -> Ptr C'gchar -> Ptr C'GFlagsValue -> IO C'GType)
instance Eq C'GTypeModule
instance Show C'GTypeModule
instance Eq C'GTypeModuleClass
instance Show C'GTypeModuleClass
instance Storable C'GTypeModuleClass
instance Storable C'GTypeModule

module Bindings.GObject
