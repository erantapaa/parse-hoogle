-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utility functions to extend Aeson
--   
--   Utility functions to extend Aeson
@package json-extra
@version 0.1.0.1


-- | Utilities to extend Aeson's parsing functionality.
module Data.Aeson.ParseUtils

-- | Like <a>fromJSON</a>, but takes a default object and merges it with
--   the parsed JSON before decoding into a typed value.
fromJSONWithDefaults :: (ToJSON a, FromJSON a) => a -> Value -> Result a

-- | Helper function to perform a deep merge on two JSON <a>Value</a>s. The
--   merging semantics are defined as such: 1. If both values are objects,
--   they are merged; collisions are resolved recursively. 2. If either
--   value is <tt>null</tt>, the other takes precedence 3. Otherwise, the
--   second value takes precedence
mergeValues :: Value -> Value -> Value

-- | Like <a>decode</a>, but takes a defaul object and merges it with the
--   parsed JSON before decoding.
decodeWithDefaults :: (ToJSON a, FromJSON a) => a -> ByteString -> Maybe a


-- | Create more idiomatic JSON/YAML representations of lens-enabled or
--   plain record types using <a>deriveJSON</a>.
--   
--   <pre>
--   data Foobar =
--       Foobar
--           { _foobarSnickerSnack :: Int
--           , _foobarTumTumTree :: String
--           }
--   
--   $(deriveLensJSON ''Foobar)
--   
--   foobar = Foobar 23 "Hello, world!"
--   </pre>
--   
--   ...encodes to:
--   
--   <pre>
--   {"snicker-snack":23,"tum-tum-tree":"Hello, world!"}
--   </pre>
module Data.Aeson.DeriveUtils

-- | A drop-in replacement for <a>deriveJSON</a> with options suitable for
--   record fields designed for <tt>makeLenses</tt>. Constructor names are
--   converted to <tt>lowercase-with-dashes</tt>; for field names, a
--   leading underscore and the record prefix is stripped off, and then the
--   same conversion to <tt>lowercase-with-dashes</tt> is performed.
deriveLensJSON :: Name -> Q [Dec]

-- | Same as <a>deriveLensJSON</a>, but allows for different separator
--   characters than <tt>-</tt> (the typical alternative choice being
--   <tt>_</tt>).
deriveLensJSON' :: Char -> Name -> Q [Dec]

-- | Options for <a>deriveJSON</a> as used by <a>deriveLensJSON</a>. Use
--   this with <a>deriveJSON</a> to get more control over deriving.
lensJSONOptions :: Options

-- | Options for <a>deriveJSON</a> as used by <a>deriveLensJSON'</a>. Use
--   this with <a>deriveJSON</a> to get more control over deriving.
lensJSONOptions' :: Char -> Options

-- | Build a dashed name from a record constructor name, e.g.
--   <tt>FoobarBaz</tt> -&gt; <tt>foobar-baz</tt>.
ctorToDashedIdentifier :: Char -> [Char] -> [Char]

-- | Build a dashed name from a record field name, e.g.
--   <tt>_foobarBazQuux</tt> -&gt; <tt>baz-quux</tt>.
recordToDashedIdentifier :: Char -> [Char] -> [Char]

-- | Helper that converts a camel-cased (<tt>somethingLikeThis</tt>) or
--   pascal-cased (<tt>SomethingLikeThis</tt>) into all-lowercase with
--   separators, e.g. <tt>something-like-this</tt>.
camelToDashed :: Char -> [Char] -> [Char]

-- | Strip record prefixes off a typical record field identifier. The
--   prefix is assumed to be everything up to the first uppercase character
--   in the identifier.
stripRecordPrefix :: [Char] -> [Char]
