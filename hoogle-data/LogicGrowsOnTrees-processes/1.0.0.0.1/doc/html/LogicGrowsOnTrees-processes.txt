-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | an adapter for LogicGrowsOnTrees that uses multiple processes for parallelism
--   
--   This package provides a adapter for the LogicGrowsOnTrees package that
--   uses multiple processes for parallelism; see the module documentation
--   for more details.
@package LogicGrowsOnTrees-processes
@version 1.0.0.0.1


-- | This adapter implements parallelism by spawning multiple processes.
--   The number of processes can be changed during the run and even be set
--   to zero.
module LogicGrowsOnTrees.Parallel.Adapter.Processes

-- | This is the driver for the threads adapter; the number of workers is
--   specified via. the (required) command-line option <a>-n</a>.
--   
--   Note that there are not seperate drivers for the supervisor process
--   and the worker process; instead, the same executable is used for both
--   the supervisor and the worker, with a sentinel argument (or arguments)
--   determining which role it should run as.
driver :: (Serialize shared_configuration, Serialize (ProgressFor exploration_mode), Serialize (WorkerFinishedProgressFor exploration_mode)) => Driver IO shared_configuration supervisor_configuration m n exploration_mode

-- | The monad in which the processes controller will run.
data ProcessesControllerMonad exploration_mode Î±

-- | Abort the supervisor.
abort :: RequestQueueMonad m => m ()

-- | Change the number of workers; the first argument is a map that
--   computes the new number of workers given the old number of workers,
--   and the second argument is a callback that will be invoked with the
--   new number of workers.
--   
--   See <a>changeNumberOfWorkers</a> for the synchronous version of this
--   request.
--   
--   If you just want to set the number of workers to some fixed value,
--   then see <a>setNumberOfWorkers</a> / <a>setNumberOfWorkersAsync</a>.
changeNumberOfWorkersAsync :: WorkgroupRequestQueueMonad m => (Word -> Word) -> (Word -> IO ()) -> m ()

-- | Like <a>changeNumberOfWorkersAsync</a>, but it blocks until the number
--   of workers has been changed and returns the new number of workers.
changeNumberOfWorkers :: WorkgroupRequestQueueMonad m => (Word -> Word) -> m Word

-- | Fork a new thread running in this monad; all controller threads are
--   automnatically killed when the run is finished.
fork :: RequestQueueMonad m => m () -> m ThreadId

-- | Request the current progress, invoking the given callback with the
--   result; see <a>getCurrentProgress</a> for the synchronous version.
getCurrentProgressAsync :: RequestQueueMonad m => (ProgressFor (ExplorationModeFor m) -> IO ()) -> m ()

-- | Like <a>getCurrentProgressAsync</a>, but blocks until the result is
--   ready.
getCurrentProgress :: RequestQueueMonad m => m (ProgressFor (ExplorationModeFor m))

-- | Request the number of workers, invoking the given callback with the
--   result; see <a>getNumberOfWorkers</a> for the synchronous version.
getNumberOfWorkersAsync :: RequestQueueMonad m => (Int -> IO ()) -> m ()

-- | Like <a>getNumberOfWorkersAsync</a>, but blocks until the result is
--   ready.
getNumberOfWorkers :: RequestQueueMonad m => m Int

-- | Request that a global progress update be performed, invoking the given
--   callback with the result; see <a>requestProgressUpdate</a> for the
--   synchronous version.
requestProgressUpdateAsync :: RequestQueueMonad m => (ProgressFor (ExplorationModeFor m) -> IO ()) -> m ()

-- | Like <a>requestProgressUpdateAsync</a>, but blocks until the progress
--   update has completed.
requestProgressUpdate :: RequestQueueMonad m => m (ProgressFor (ExplorationModeFor m))

-- | Request that the number of workers be set to the given amount,
--   invoking the given callback when this has been done.
setNumberOfWorkersAsync :: WorkgroupRequestQueueMonad m => Word -> IO () -> m ()

-- | Like <a>setNumberOfWorkersAsync</a>, but blocks until the number of
--   workers has been set to the desired value.
setNumberOfWorkers :: WorkgroupRequestQueueMonad m => Word -> m ()

-- | Sets the size of the workload buffer; for more information, see
--   <a>setWorkloadBufferSize</a> (which links to the
--   <a>LogicGrowsOnTrees.Parallel.Common.Supervisor</a> module).
setWorkloadBufferSize :: RequestQueueMonad m => Int -> m ()

-- | A type that represents the outcome of a run.
data RunOutcome progress final_result :: * -> * -> *

-- | Statistics gathered about the run.
data RunStatistics :: *
RunStatistics :: !UTCTime -> !UTCTime -> !NominalDiffTime -> !Float -> !Float -> !Int -> !Float -> !Float -> !(FunctionOfTimeStatistics NominalDiffTime) -> !IndependentMeasurementsStatistics -> !(FunctionOfTimeStatistics Int) -> !(FunctionOfTimeStatistics Int) -> !(FunctionOfTimeStatistics Float) -> !(FunctionOfTimeStatistics Float) -> RunStatistics

-- | the start time of the run
runStartTime :: RunStatistics -> !UTCTime

-- | the end time of the run
runEndTime :: RunStatistics -> !UTCTime

-- | the wall time of the run
runWallTime :: RunStatistics -> !NominalDiffTime

-- | the fraction of the time the supervisor spent processing events
runSupervisorOccupation :: RunStatistics -> !Float

-- | the fraction of the time the supervisor spent processing events while
--   inside the <tt>SupervisorMonad</tt>
runSupervisorMonadOccupation :: RunStatistics -> !Float

-- | the number of calls made to functions in
--   <a>LogicGrowsOnTrees.Parallel.Common.Supervisor</a>
runNumberOfCalls :: RunStatistics -> !Int

-- | the average amount of time per call made to functions in
--   <a>LogicGrowsOnTrees.Parallel.Common.Supervisor</a>
runAverageTimePerCall :: RunStatistics -> !Float

-- | the fraction of the total time that workers were occupied
runWorkerOccupation :: RunStatistics -> !Float

-- | statistics for how long it took for workers to obtain a workload
runWorkerWaitTimes :: RunStatistics -> !(FunctionOfTimeStatistics NominalDiffTime)

-- | statistics for the time needed to steal a workload from a worker
runStealWaitTimes :: RunStatistics -> !IndependentMeasurementsStatistics

-- | statistics for the number of workers waiting for a workload
runWaitingWorkerStatistics :: RunStatistics -> !(FunctionOfTimeStatistics Int)

-- | statistics for the number of available workloads waiting for a worker
runAvailableWorkloadStatistics :: RunStatistics -> !(FunctionOfTimeStatistics Int)

-- | statistics for the instantaneous rate at which workloads were
--   requested (using an exponentially decaying sum)
runInstantaneousWorkloadRequestRateStatistics :: RunStatistics -> !(FunctionOfTimeStatistics Float)

-- | statistics for the instantaneous time needed for workloads to be
--   stolen (using an exponentially decaying weighted average)
runInstantaneousWorkloadStealTimeStatistics :: RunStatistics -> !(FunctionOfTimeStatistics Float)

-- | A type that represents the reason why a run terminated.
data TerminationReason progress final_result :: * -> * -> *

-- | the run was aborted with the given progress
Aborted :: progress -> TerminationReason progress final_result

-- | the run completed with the given final result
Completed :: final_result -> TerminationReason progress final_result

-- | the run failed with the given progress for the given reason
Failure :: progress -> String -> TerminationReason progress final_result

-- | This runs the supervisor, which will spawn and kill worker processes
--   as needed so that the total number is equal to the number set by the
--   controller.
runSupervisor :: (Serialize (ProgressFor exploration_mode), Serialize (WorkerFinishedProgressFor exploration_mode)) => ExplorationMode exploration_mode -> String -> [String] -> (Handle -> IO ()) -> ProgressFor exploration_mode -> ProcessesControllerMonad exploration_mode () -> IO (RunOutcomeFor exploration_mode)

-- | Runs a loop that continually fetches and reacts to messages from the
--   supervisor until the worker quits.
runWorker :: ExplorationMode exploration_mode -> Purity m n -> TreeT m (ResultFor exploration_mode) -> IO MessageForWorker -> (MessageForSupervisorFor exploration_mode -> IO ()) -> IO ()

-- | The same as <a>runWorker</a>, but it lets you provide handles through
--   which the messages will be sent and received. (Note that the reading
--   and writing handles might be the same.)
runWorkerUsingHandles :: (Serialize (ProgressFor exploration_mode), Serialize (WorkerFinishedProgressFor exploration_mode)) => ExplorationMode exploration_mode -> Purity m n -> TreeT m (ResultFor exploration_mode) -> Handle -> Handle -> IO ()

-- | Explores the given tree using multiple processes to achieve
--   parallelism.
--   
--   This function grants access to all of the functionality of this
--   adapter, rather than having to go through the more restricted driver
--   interface. The signature of this function is very complicated because
--   it is meant to be used in both the supervisor and worker; it figures
--   out which role it is supposed to play based on whether the list of
--   command line arguments matches a sentinel.
--   
--   The configuration information is divided into two parts: information
--   shared between the supervisor and the workers, and information that is
--   specific to the supervisor and not sent to the workers. (Note that
--   only the former needs to be serializable.) An action must be supplied
--   that obtains this configuration information, and most of the arguments
--   are functions that are given all or part of this information.
runExplorer :: (Serialize shared_configuration, Serialize (ProgressFor exploration_mode), Serialize (WorkerFinishedProgressFor exploration_mode)) => (shared_configuration -> ExplorationMode exploration_mode) -> Purity m n -> IO (shared_configuration, supervisor_configuration) -> (shared_configuration -> IO ()) -> (shared_configuration -> TreeT m (ResultFor exploration_mode)) -> (shared_configuration -> supervisor_configuration -> IO (ProgressFor exploration_mode)) -> (shared_configuration -> supervisor_configuration -> ProcessesControllerMonad exploration_mode ()) -> IO (Maybe ((shared_configuration, supervisor_configuration), RunOutcomeFor exploration_mode))

-- | Gets the full path to this executable.
getProgFilepath :: IO String
instance Applicative (ProcessesControllerMonad exploration_mode)
instance Functor (ProcessesControllerMonad exploration_mode)
instance Monad (ProcessesControllerMonad exploration_mode)
instance MonadCatchIO (ProcessesControllerMonad exploration_mode)
instance MonadIO (ProcessesControllerMonad exploration_mode)
instance RequestQueueMonad (ProcessesControllerMonad exploration_mode)
instance WorkgroupRequestQueueMonad (ProcessesControllerMonad exploration_mode)
instance HasExplorationMode (ProcessesControllerMonad exploration_mode)
