-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell-only implementation of zlib / DEFLATE
--   
@package pure-zlib
@version 0.3

module Codec.Compression.Zlib.OutputWindow
data OutputWindow
emptyWindow :: OutputWindow
addByte :: OutputWindow -> Word8 -> OutputWindow
addChunk :: OutputWindow -> ByteString -> OutputWindow
addOldChunk :: OutputWindow -> Int -> Int64 -> (OutputWindow, ByteString)
outByteString :: OutputWindow -> ByteString
instance Measured Int ByteString
instance Monoid Int

module Codec.Compression.Zlib.HuffmanTree
data HuffmanTree a
createHuffmanTree :: Show a => [(a, Int, Int)] -> HuffmanTree a
advanceTree :: Bool -> HuffmanTree a -> Either (HuffmanTree a) a
instance Show a => Show (HuffmanTree a)

module Codec.Compression.Zlib.Adler32
data AdlerState
initialAdlerState :: AdlerState
advanceAdler :: AdlerState -> Word8 -> AdlerState
finalizeAdler :: AdlerState -> Word32

module Codec.Compression.Zlib.Monad
type DeflateM = State DecompressState
runDeflateM :: Show a => DeflateM a -> ByteString -> a
nextBit :: DeflateM Bool
nextBits :: (Num a, Bits a) => Int -> DeflateM a
nextByte :: DeflateM Word8
nextWord16 :: DeflateM Word16
nextBlock :: Integral a => a -> DeflateM ByteString
nextCode :: Show a => HuffmanTree a -> DeflateM a
readRest :: DeflateM ByteString
advanceToByte :: DeflateM ()
emitByte :: Word8 -> DeflateM ()
emitBlock :: ByteString -> DeflateM ()
emitPastChunk :: Int -> Int64 -> DeflateM ()
finalAdler :: DeflateM Word32
finalOutput :: DeflateM ByteString

module Codec.Compression.Zlib.Deflate
inflate :: DeflateM (Maybe ByteString)
computeCodeValues :: Ord a => [(a, Int)] -> [(a, Int, Int)]

module Codec.Compression.Zlib
decompress :: ByteString -> Maybe ByteString
