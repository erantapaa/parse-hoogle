-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple memoisation function
--   
--   This module provides yet another simple memoisation with simple table
--   operations (only lookup and insert).
@package yamemo
@version 0.3.0.1


-- | Memoisation. It's useful for dynamic programming.
module Data.Function.YaMemo
class MemoTable t
emptyMemoTable :: (MemoTable t, Ord a) => t a b
lookupMemoTable :: (MemoTable t, Ord a) => a -> t a b -> Maybe b
insertMemoTable :: (MemoTable t, Ord a) => a -> b -> t a b -> t a b
type Memo t a b = a -> State (t a b) b
memo :: (MemoTable t, Ord a) => (a -> State (t a b) b) -> ((a -> State (t a b) b) -> Memo t a b) -> (a -> b)
instance (MemoTable t, Ord a, Monoid b) => Monoid (State (t a b) b)
instance (MemoTable t, Ord a, Num b) => Num (State (t a b) b)
instance (MemoTable t, Ord a, Num b, Show b) => Show (State (t a b) b)
instance (MemoTable t, Ord a, Num b, Eq b) => Eq (State (t a b) b)
instance MemoTableT Map []
instance MemoTable Map
