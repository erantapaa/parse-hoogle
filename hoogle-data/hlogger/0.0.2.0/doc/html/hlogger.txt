-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple, concurrent, extendable and easy-to-use logging
library
--   
--   This is a work in progress for a logging framework that aims to be
--   simple, concurrent, extendable and easy-to-use.
@package hlogger
@version 0.0.2.0


module System.Log.HLogger

-- | Used by logging implementations only. Contains information about the
--   log message.
data LogMessage
LogMessage :: String -> LogLevel -> LogMessage
message :: LogMessage -> String
level :: LogMessage -> LogLevel

-- | This object provides the logging API. Consult the documentation for
--   the logging implementation (or SimpleLogger) about how to acquire a
--   Logger object.
data Logger
Logger :: (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> IO () -> Logger

-- | Logs a debug message. Debug messages are the least significant
--   messages.
logDebug :: Logger -> String -> IO ()

-- | Logs a purely informational message. Use logNotice instead of the
--   information message is significant.
logInfo :: Logger -> String -> IO ()

-- | Logs a significant purely informational message. Use logNotice instead
--   of the information message is significant.
logNotice :: Logger -> String -> IO ()

-- | Logs a message signaling a warning condition.
logWarning :: Logger -> String -> IO ()

-- | Logs a message signaling that a non-critical error has occurred.
logError :: Logger -> String -> IO ()

-- | Logs a message signaling that a critical error has occurred.
logCritical :: Logger -> String -> IO ()

-- | Logs a message signaling that an action must be taken.
logAlert :: Logger -> String -> IO ()

-- | Logs a message signaling that the system is unusable.
logEmergency :: Logger -> String -> IO ()

-- | Stops the logger. This action is asynchronous.
stopLogger :: Logger -> IO ()

-- | Used by logging implementations only. Provides a Logger object, given
--   a looping function operating on a <a>LogMessage</a> channel.
logger :: (Chan (Maybe LogMessage) -> IO ()) -> IO Logger
instance Eq LogLevel
instance Ord LogLevel
instance Read LogLevel
instance Show LogLevel


module System.Log.SimpleHLogger

-- | This object provides the logging API. Consult the documentation for
--   the logging implementation (or SimpleLogger) about how to acquire a
--   Logger object.
data Logger
Logger :: (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> (String -> IO ()) -> IO () -> Logger

-- | Logs a debug message. Debug messages are the least significant
--   messages.
logDebug :: Logger -> String -> IO ()

-- | Logs a purely informational message. Use logNotice instead of the
--   information message is significant.
logInfo :: Logger -> String -> IO ()

-- | Logs a significant purely informational message. Use logNotice instead
--   of the information message is significant.
logNotice :: Logger -> String -> IO ()

-- | Logs a message signaling a warning condition.
logWarning :: Logger -> String -> IO ()

-- | Logs a message signaling that a non-critical error has occurred.
logError :: Logger -> String -> IO ()

-- | Logs a message signaling that a critical error has occurred.
logCritical :: Logger -> String -> IO ()

-- | Logs a message signaling that an action must be taken.
logAlert :: Logger -> String -> IO ()

-- | Logs a message signaling that the system is unusable.
logEmergency :: Logger -> String -> IO ()

-- | Stops the logger. This action is asynchronous.
stopLogger :: Logger -> IO ()

-- | Acquires a SimpleLogger Logger object. It takes a String,
--   <tt>prefix</tt>, and creates a file <tt>prefix-YYYYMMDDHHMMSS.log</tt>
--   in the current directory. It will use UTC time on system that supports
--   it, and local time otherwise.
simpleLogger :: String -> IO Logger
