-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | IO as Alternative instance (deprecated)
--   
--   This package is deprecated, Please use io-choice.
@package alternative-io
@version 0.0.1


-- | Lifted <a>IO</a> like <tt>Alternative</tt> instance. Due to technical
--   limitation, Lifted <a>IO</a> is not an instance of
--   <tt>Alternative</tt>. (<a>&lt;||&gt;</a>) is provided instead.
module Data.Alternative.IO.Lifted

-- | If the left <a>IO</a> monad of (<a>&lt;||&gt;</a>) causes an error or
--   <a>goNext</a> is used, the right <a>IO</a> monad is executed.
(<||>) :: MonadBaseControl IO m => m a -> m a -> m a

-- | Go to the next <a>IO</a> monad by throwing <a>AltIOLiftedGoNext</a>.
goNext :: (MonadIO m, MonadBase IO m) => m a

-- | Run any one lifted <a>IO</a> monad.
runAnyOne :: (MonadIO m, MonadBaseControl IO m) => [m a] -> m a
data AltIOLiftedGoNext
AltIOLiftedGoNext :: AltIOLiftedGoNext
instance Typeable AltIOLiftedGoNext
instance Show AltIOLiftedGoNext
instance Exception AltIOLiftedGoNext


-- | <a>IO</a> as <a>Alternative</a> instance.
--   
--   If the left <a>IO</a> monad of (<a>&lt;|&gt;</a>) causes an error or
--   <a>goNext</a> is used, the right <a>IO</a> monad is executed.
--   
--   Of course, side effects cannot be rolled back. This means that this
--   <a>Alternative</a> instance breaks the <a>Alternative</a> laws. But
--   it's common in parsers.
module Data.Alternative.IO

-- | Go to the next <a>IO</a> monad by throwing <a>AltIOgoNext</a>.
goNext :: IO a

-- | Run any one <a>IO</a> monad.
runAnyOne :: [IO a] -> IO a

-- | Exception to control <a>Alternative</a> <a>IO</a>.
data AltIOgoNext
AltIOgoNext :: AltIOgoNext
instance Typeable AltIOgoNext
instance Show AltIOgoNext
instance Exception AltIOgoNext
instance Alternative IO
