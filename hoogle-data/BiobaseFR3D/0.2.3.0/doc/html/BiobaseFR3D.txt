-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Importer for FR3D resources
--   
--   Provides importers for FR3D resource files. Of particular interest are
--   basepairs files which describe canonical and non-canonical
--   (non-Watson-Crick) base pairings in RNA secondary structure.
--   
--   The original FR3D paper is:
--   
--   FR3D: Finding Local and Composite Recurrent Structural Motifs in RNA
--   3D Structures, Michael Sarver; Craig L. Zirbel; Jesse Stombaugh; Ali
--   Mokdad; Neocles B. Leontis. /Journal of Mathematical Biology/ (2008)
--   56:215â€“252.
--   
--   Changes since any 0.1.*:
--   
--   <ul>
--   <li>Zero-based indexing (FR3D is one-based!) for sequence positions.
--   We do not change the nucleotide PDB number.</li>
--   <li>Some sanity checks, a number of FR3D files fall through at this
--   and need to be checked for consistency</li>
--   </ul>
@package BiobaseFR3D
@version 0.2.3.0


-- | FR3D provides a very convenient library of explored RNA structures. We
--   are mostly interested in the <a>basepairs</a> files. In contrast to
--   the RNAstrand library or melting experiments, these data sets provide
--   non-canonical RNA pairing.
--   
--   NOTE that FR3D entries contain basepairs both in (i,j) as well as
--   (j,i) orientation (with i&lt;j).
module Biobase.FR3D

-- | Encapsulates all the <a>basepairs</a> information.
data FR3D
FR3D :: ByteString -> [(ByteString, ByteString)] -> [Basepair] -> FR3D
pdbid :: FR3D -> ByteString
chains :: FR3D -> [(ByteString, ByteString)]
basepairs :: FR3D -> [Basepair]

-- | A single basepair in a basepair system.
data Basepair
Basepair :: ExtPairAnnotation -> Char -> Int -> ByteString -> Int -> Char -> Int -> ByteString -> Int -> Basepair
interaction :: Basepair -> ExtPairAnnotation
nucleotide1 :: Basepair -> Char
pdbnumber1 :: Basepair -> Int
chain1 :: Basepair -> ByteString
seqpos1 :: Basepair -> Int
nucleotide2 :: Basepair -> Char
pdbnumber2 :: Basepair -> Int
chain2 :: Basepair -> ByteString
seqpos2 :: Basepair -> Int

-- | Linearized FR3D format.
data LinFR3D
LinFR3D :: ByteString -> ByteString -> [TriPair] -> LinFR3D
pdbID :: LinFR3D -> ByteString
sequence :: LinFR3D -> ByteString
pairs :: LinFR3D -> [TriPair]
type TriPair = (ExtPairIdx, ExtPair, Basepair)

-- | The default format is a bit unwieldy; Linearization assumes that all
--   sequences are in 5'-&gt;3' order; then produces one sequence with
--   <a>&amp;</a> separating the sequences and pairs reduced to
--   (Int,Int,cWW).
linearizeFR3D :: FR3D -> LinFR3D
class RemoveDuplicatePairs a
removeDuplicatePairs :: RemoveDuplicatePairs a => a -> a

-- | Checks an FR3D file for correctness. Returns either a Left on errors
--   or Right FR3D if correct.
--   
--   TODO chain existence check
checkFR3D :: FR3D -> Either (FR3D, [Basepair]) FR3D
checkLinFR3D :: LinFR3D -> Either (LinFR3D, [TriPair]) LinFR3D
instance Show Basepair
instance Eq Basepair
instance Ord Basepair
instance Show FR3D
instance Show LinFR3D
instance RemoveDuplicatePairs LinFR3D
instance RemoveDuplicatePairs FR3D


-- | Importing of FR3D data. Both <a>basepairs</a> and <a>near
--   interactions</a> are currently supported. More parsers will come if
--   required.
module Biobase.FR3D.Import

-- | An Iteratee from a bytestring to one FR3D entry. Since each file
--   contains exactly one entry, this is no problem.
iFR3D :: Monad m => Iteratee ByteString m FR3D

-- | Helper function turning a bytestring line into a basepair entry
bs2basepair :: ByteString -> Basepair

-- | Convenience function: given a directory name, extracts a list of all
--   FR3D entries.
fromDirSelect :: String -> FilePath -> IO [FR3D]

-- | This one select the <a>near interactions</a>
fromDirNear :: FilePath -> IO [FR3D]

-- | And this one the <a>basepairs</a> (this one you normally want).
fromDir :: FilePath -> IO [FR3D]
