-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | PNM image format header parsing and pretty printing
--   
--   PNM image format header parsing and pretty printing. PNM is PBM + PGM
--   + PPM, a family of lowest common denominator image file formats. This
--   library makes no attempt to interpret raster data, instead providing a
--   lazy ByteString.
@package pnm
@version 0.1.0.0


-- | Lower-level functions for parsing PNM image format headers. Most users
--   shouldn't need to import this module directly.
module Codec.PNM.Parse

-- | The result of parsing.
data Parse p
Wrong :: ByteString -> Parse p
parseMalformed :: Parse p -> ByteString
Empty :: Parse p
Parse :: p -> ByteString -> ByteString -> Parse p
parseResult :: Parse p -> p
parseRawResult :: Parse p -> ByteString
parseRemainder :: Parse p -> ByteString

-- | The next character.
rawChar :: ByteString -> Parse Word8

-- | The next non-comment character. Comments can occur in the middle of
--   what might be considered tokens.
char :: ByteString -> Parse Word8

-- | Drop input while a predicate holds.
dropWhile :: (Word8 -> Bool) -> (ByteString -> Parse Word8) -> ByteString -> Parse ()

-- | Take input until a predicate holds.
takeUntil :: (Word8 -> Bool) -> (ByteString -> Parse Word8) -> ByteString -> Parse ByteString

-- | Parse a token.
token :: ByteString -> Parse ByteString

-- | Parse a fixed string.
string :: ByteString -> ByteString -> Parse ()

-- | Parse a positive decimal number.
number :: ByteString -> Parse Integer

-- | Number conversion.
decimal :: ByteString -> Maybe Integer

-- | Parse a single space.
oneSpace :: ByteString -> Parse ()

-- | Convert from a string. Crashes hard on non-ASCII input.
str :: String -> ByteString

-- | Character classes.
isSpace, isEndComment, isStartComment, isDigit :: Word8 -> Bool

-- | White space characters.
ht, space, cr, ff, vt, lf :: Word8

-- | Comment start character.
hash :: Word8

-- | Decimal digit characters.
d0, d9, d8, d7, d6, d5, d4, d3, d2, d1 :: Word8

-- | Alias for <a>append</a>.
(++) :: ByteString -> ByteString -> ByteString
instance Eq p => Eq (Parse p)
instance Ord p => Ord (Parse p)
instance Show p => Show (Parse p)


-- | PNM image format header parsing and pretty printing.
--   
--   PNM is PBM + PGM + PPM, a family of lowest common denominator image
--   file formats.
--   
--   References: <a>http://netpbm.sourceforge.net/doc/pnm.html</a>.
module Codec.PNM

-- | PNM image headers.
data PNM
PBM :: Bool -> Integer -> Integer -> PNM
pnmPlain :: PNM -> Bool
pnmWidth :: PNM -> Integer
pnmHeight :: PNM -> Integer
PGM :: Bool -> Integer -> Integer -> Integer -> PNM
pnmPlain :: PNM -> Bool
pnmWidth :: PNM -> Integer
pnmHeight :: PNM -> Integer
pnmMaxVal :: PNM -> Integer
PPM :: Bool -> Integer -> Integer -> Integer -> PNM
pnmPlain :: PNM -> Bool
pnmWidth :: PNM -> Integer
pnmHeight :: PNM -> Integer
pnmMaxVal :: PNM -> Integer

-- | Compute the raster size in bytes for binary PNM images.
pnmRasterBytes :: PNM -> Maybe Integer

-- | Pretty-print a PNM image header without any comments.
pnmPretty :: PNM -> ByteString

-- | The result of parsing.
data Parse p
Wrong :: ByteString -> Parse p
parseMalformed :: Parse p -> ByteString
Empty :: Parse p
Parse :: p -> ByteString -> ByteString -> Parse p
parseResult :: Parse p -> p
parseRawResult :: Parse p -> ByteString
parseRemainder :: Parse p -> ByteString

-- | Parse a PNM image header.
pnmParse :: ByteString -> Parse PNM

-- | Parse a sequence of binary PNM images.
--   
--   Malformed input (including huge raster sizes or plain images) is
--   treated as end-of-image-stream.
pnms :: ByteString -> [(PNM, ByteString)]

-- | Pretty-print a sequence of binary PNM images.
--   
--   The precondition that the raster is of the correct length is not
--   checked, so malformed output is possible.
unpnms :: [(PNM, ByteString)] -> ByteString

-- | Process a sequence of binary PNM images.
--   
--   Malformed input (including huge raster sizes or plain images) is
--   treated as end-of-image-stream.
--   
--   The precondition that the raster is of the correct length is not
--   checked, so malformed output is possible.
--   
--   Header comments are not preserved.
onPNMs :: (PNM -> ByteString -> (PNM, ByteString)) -> ByteString -> ByteString

-- | Process a sequence of binary PNM images.
--   
--   Malformed input (including huge raster sizes or plain images) is
--   treated as end-of-image-stream.
--   
--   The precondition that the raster is of the correct length is not
--   checked, so malformed output is possible.
--   
--   Header comments are preserved. Assuming well-formed input:
--   
--   <pre>
--   onPNMs' (\_ r -&gt; r) = id
--   </pre>
onPNMs' :: (PNM -> ByteString -> ByteString) -> ByteString -> ByteString
instance Eq PNM
instance Ord PNM
instance Show PNM
