-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | control JackMiniMix
--   
--   This is a module to control JackMiniMix, a GPL mixer for the Jack
--   Audio Connection Kit using OpenSoundControl (OSC).
@package jackminimix
@version 0.1


-- | This is a module to control JackMiniMix, a GPL mixer for the Jack
--   Audio Connection Kit using OpenSoundControl (OSC).
--   
--   JackMiniMix was written by Nicholas J Humfrey.
--   <a>http://www.aelius.com/njh/jackminimix/</a>
--   
--   OSC was developed at CNMAT by Adrian Freed and Matt Wright.
--   <a>http://opensoundcontrol.org/</a>
--   
--   The documentation was mostly taken from the source of JackMiniMix by
--   Humfrey.
--   
--   This module requires that the JackMiniMix program be installed.
--   
--   For general usage, use the camel case functions; they're easier. The
--   functions with underscores in the name need to be called using the
--   withJackMiniMix function; the camelCase ones already include it.
module Sound.JackMiniMix

-- | Bracket JackMiniMix communication.
withJackMiniMix :: Int -> (UDP -> IO a) -> IO a
channel_count :: Transport t => t -> IO OSC

-- | Returns the number of stereo input channels that the mixer has.
--   
--   The OSC message:
--   
--   /mixer/get_channel_count - Get the number of channels
--   
--   replies with:
--   
--   /mixer/channel_count (i)
channelCount :: Int -> IO OSC
get_channel_gain :: Transport t => t -> Int -> IO OSC

-- | Returns the gain (in decibels) of channel.
--   
--   The OSC message:
--   
--   /mixer/channel/get_gain (i) - Get gain of channel i
--   
--   replies with:
--   
--   /mixer/channel/gain (if)
--   
--   channel is the number of the channel (in range 1 to total number of
--   channels).
getChannelGain :: Int -> Int -> IO OSC
set_channel_gain :: Transport t => t -> Int -> Double -> IO OSC

-- | Sets the gain of channel channel to gain dB.
--   
--   The OSC message:
--   
--   /mixer/channel/set_gain (if) - Set the gain of channel i to f dB
--   
--   replies with:
--   
--   /mixer/channel/gain (if)
--   
--   channel is the number of the channel (in range 1 to total number of
--   channels).
--   
--   gain is the gain (in decibels) to set the channel to (in range -90 to
--   90 dB).
setChannelGain :: Int -> Int -> Double -> IO OSC
get_channel_label :: Transport t => t -> Int -> IO OSC

-- | Returns the label (string) of channel number channel.
--   
--   The OSC message:
--   
--   /mixer/channel/get_label (i) - Get the label of channel i
--   
--   replies with:
--   
--   /mixer/channel/label (is)
--   
--   channel is the number of the channel (in range 1 to total number of
--   channels).
getChannelLabel :: Int -> Int -> IO OSC
set_channel_label :: Transport t => t -> Int -> String -> IO OSC

-- | Sets the label (string) of channel number channel to label.
--   
--   The OSC message:
--   
--   /mixer/channel/set_label (is) - Set the label of channel i to s
--   
--   replies with:
--   
--   /mixer/channel/label (is)
--   
--   channel is the number of the channel (in range 1 to total number of
--   channels).
--   
--   label is the new label for the channel.
setChannelLabel :: Int -> Int -> String -> IO OSC
ping :: Transport t => t -> IO OSC

-- | Pings the mixer to see if it is there.
--   
--   The OSC message:
--   
--   /ping - Check mixer is still there
--   
--   replies with:
--   
--   /pong
pingMixer :: Int -> IO OSC
