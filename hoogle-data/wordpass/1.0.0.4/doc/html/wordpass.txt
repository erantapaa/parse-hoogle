-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Dictionary-based password generator
--   
@package wordpass
@version 1.0.0.4


-- | Random choice between two alternatives of inequal probability.
module Data.Random.Choice

-- | Performs random choice between two RVar values. Input is a _ratio_ of
--   the _relative_ probabilities between first and second option (A/B).
randomChoice :: (Fractional r, Ord r, Distribution Uniform r) => r -> RVar b -> RVar b -> RVar b


-- | Provides a random variable (<tt>RVar</tt>) instance for any
--   <tt>Enum</tt> instance. Very convenient, even if may overlap with more
--   specific instances for integer types.
module Data.Random.RVar.Enum
instance [overlap ok] Enum a => Distribution Uniform a


-- | Provides a convenient way to pick a random element of a vector.
module Data.Random.Vector

-- | Take a random element of a vector.
randomElement :: Vector a -> RVar a


-- | Main module generating passwords.
module Text.WordPass

-- | Explanatory type alias for the type of wordlists during preprocessing.
type WordSet = Set Text

-- | Explanatory type alias for immutable, preprocessed wordlist used by
--   random number generator.
type WordList = Vector Text

-- | Try to resolve symbolic link chain for given filename.
resolveSymbolicLink :: FilePath -> IO FilePath

-- | Reads a dict format to get a list of unique words without any special
--   chars.
readDict :: FilePath -> IO WordSet

-- | Find all plausible dictionaries in a given directory
dictFiles :: FilePath -> IO [FilePath]

-- | Read a set of dictionaries and put the together.
readDicts :: [FilePath] -> IO (Set Text)

-- | Read all dictionaries from a given directory.
readDictDir :: FilePath -> IO (Set Text)

-- | Filename for default dictionary (should be command line argument or
--   default glob.)
defaultDictionary :: FilePath

-- | Pick a random password, given a words list, and a number of words it
--   will contain.
randomPassword :: WordList -> Int -> RVar Text

-- | Estimate strength of random password with given inputs.
randomPasswordStrength :: Vector a -> Int -> Double

-- | Number of characters within alphabet.
numSymbols :: Int
numNumericSeparators :: Int

-- | Randomly pick a word separator as a two-digit number, or a symbol
--   character.
randomSeparator :: RVar Text

-- | Two-digit number as a separator 10^2 = 6.6 bits of entropy.
randomNumericSeparator :: RVar Text

-- | Conjunction of two unary predicates
(|||) :: (t -> Bool) -> (t -> Bool) -> t -> Bool

-- | List of symbol and punctuation characters in ASCII Should be 5 bits of
--   entropy
symbolChars :: Vector Char

-- | Text with random symbol character, 5 bits of entropy
randomSymbolSeparator :: RVar Text
