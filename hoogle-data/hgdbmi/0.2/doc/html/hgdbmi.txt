-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | GDB Machine Interface: program-driven control of GDB
--   
--   GDB/MI lets programs drive GDB. It can be used, for example, by GDB
--   frontends. See section 27 of the GDB manual
--   
--   This module encapsualtes a GDB subprocess and provides an API to send
--   commands as well as receive both responses and notifications.
--   
--   The actual GDB behavior diverges from the GDB manual in many points,
--   so the implementation of the Machine Interface highly depends on the
--   GDB version. This module is tested with GDB version 7.4.
@package hgdbmi
@version 0.2


-- | Data structures, parsers and printers for GDB/MI communication.
--   
--   This is a low-level module not intended to be used by clients of this
--   library. Use <a>Commands</a> to create commands and receive responses
--   as well as notifications via <a>IO</a>.
--   
--   On-the-wire types reflect the GDB/MI grammar. Please consult the cited
--   GDB documentation for details. The simplified types provide a simple
--   abstraction over the on-the-wire types.
module Gdbmi.Representation
data Command
CLICommand :: (Maybe Token) -> String -> Command
MICommand :: (Maybe Token) -> Operation -> [Option] -> [Parameter] -> Command
type Token = Int
type Operation = String
data Option
Option :: Parameter -> (Maybe Parameter) -> Option
data Parameter
RawString :: String -> Parameter
QuotedString :: String -> Parameter
data Output
Output :: [OutOfBandRecord] -> (Maybe ResultRecord) -> Output
data ResultRecord
ResultRecord :: (Maybe Token) -> ResultClass -> [Result] -> ResultRecord
data OutOfBandRecord
OOBAsyncRecord :: AsyncRecord -> OutOfBandRecord
OOBStreamRecord :: StreamRecord -> OutOfBandRecord
data AsyncRecord
ARExecAsyncOutput :: ExecAsyncOutput -> AsyncRecord
ARStatusAsyncOutput :: StatusAsyncOutput -> AsyncRecord
ARNotifyAsyncOutput :: NotifyAsyncOutput -> AsyncRecord
data ExecAsyncOutput
ExecAsyncOutput :: (Maybe Token) -> AsyncOutput -> ExecAsyncOutput
data StatusAsyncOutput
StatusAsyncOutput :: (Maybe Token) -> AsyncOutput -> StatusAsyncOutput
data NotifyAsyncOutput
NotifyAsyncOutput :: (Maybe Token) -> AsyncOutput -> NotifyAsyncOutput
data AsyncOutput
AsyncOutput :: AsyncClass -> [Result] -> AsyncOutput
data ResultClass
RCDone :: ResultClass
RCRunning :: ResultClass
RCConnected :: ResultClass
RCError :: ResultClass
RCExit :: ResultClass
data AsyncClass
ACStop :: AsyncClass
ACThreadGroupAdded :: AsyncClass
ACThreadGroupStarted :: AsyncClass
ACThreadCreated :: AsyncClass
ACRunning :: AsyncClass
ACLibraryLoaded :: AsyncClass
ACThreadExited :: AsyncClass
ACThreadGroupExited :: AsyncClass
ACBreakpointModified :: AsyncClass
data Result
Result :: Variable -> Value -> Result
resVariable :: Result -> Variable
resValue :: Result -> Value
type Variable = String
data Value
VConst :: Const -> Value
VTuple :: Tuple -> Value
VList :: List -> Value
type Const = CString
data Tuple
Tuple :: [Result] -> Tuple
tupleResults :: Tuple -> [Result]
data List
EmptyList :: List
ValueList :: [Value] -> List
ResultList :: [Result] -> List
data StreamRecord
SRConsoleStreamOutput :: ConsoleStreamOutput -> StreamRecord
SRTargetStreamOutput :: TargetStreamOutput -> StreamRecord
SRLogStreamOutput :: LogStreamOutput -> StreamRecord
data ConsoleStreamOutput
ConsoleStreamOutput :: CString -> ConsoleStreamOutput
data TargetStreamOutput
TargetStreamOutput :: CString -> TargetStreamOutput
data LogStreamOutput
LogStreamOutput :: CString -> LogStreamOutput
type CString = String
data Response

-- | The <a>ResultRecord</a> of an <a>Output</a>
Response :: ResultClass -> [Result] -> Response
respClass :: Response -> ResultClass
respResults :: Response -> [Result]
data Notification

-- | Simplification of the <a>AsyncRecord</a> type hierarchie, a possible
--   <a>OutOfBandRecord</a> value of an <a>Output</a>.
Notification :: NotificationClass -> AsyncClass -> [Result] -> Notification
notiClass :: Notification -> NotificationClass
notiAsyncClass :: Notification -> AsyncClass
notiResults :: Notification -> [Result]
data NotificationClass

-- | <a>ARExecAsyncOutput</a>
Exec :: NotificationClass

-- | <a>ARStatusAsyncOutput</a>
Status :: NotificationClass

-- | <a>ARNotifyAsyncOutput</a>
Notify :: NotificationClass
data Stream

-- | Simplifcation of the <a>StreamRecord</a> type hierarchie, a possible
--   <a>OutOfBandRecord</a> value of an <a>Output</a>.
Stream :: StreamClass -> String -> Stream
data StreamClass

-- | <a>SRConsoleStreamOutput</a>
Console :: StreamClass

-- | <tt>SRTargetStreamOutpu</tt>
Target :: StreamClass

-- | <a>SRLogStreamOutput</a>
Log :: StreamClass

-- | Generate the on-the-wire string suitable to be sent to GDB.
render_command :: Command -> String

-- | Turn an GDB output string to an <a>Output</a> value.
parse_output :: String -> Output

-- | Extract the response from an output, if existent.
output_response :: Output -> Maybe Response

-- | Extract the (possible empty) list of notifications of an output.
output_notification :: Output -> [Notification]

-- | Extract the (possibly) empty list of notifications of an output.
output_stream :: Output -> [Stream]

-- | Return the token of the given object, if existent.
class GetToken a
get_token :: GetToken a => a -> Maybe Token

-- | Coerce a value to a const.
asConst :: Value -> Maybe Const

-- | Coerce a value to a tuple.
asTuple :: Value -> Maybe Tuple

-- | Coerce a value to a list.
asList :: Value -> Maybe List

-- | Verify that the given parameter is either a c-string or a
--   "non-blank-sequence". See
--   <a>http://sourceware.org/gdb/current/onlinedocs/gdb/GDB_002fMI-Input-Syntax.html</a>
parameter_valid :: Parameter -> Bool
instance Show ResultClass
instance Eq ResultClass
instance Show AsyncClass
instance Eq AsyncClass
instance Show LogStreamOutput
instance Show TargetStreamOutput
instance Show ConsoleStreamOutput
instance Show StreamRecord
instance Show Value
instance Show List
instance Show Result
instance Show Tuple
instance Show AsyncOutput
instance Show Response
instance Show NotificationClass
instance Eq NotificationClass
instance Show Notification
instance Show StreamClass
instance Show Stream
instance Show NotifyAsyncOutput
instance Show StatusAsyncOutput
instance Show ExecAsyncOutput
instance Show AsyncRecord
instance Show OutOfBandRecord
instance Show ResultRecord
instance Show Output
instance GetToken NotifyAsyncOutput
instance GetToken StatusAsyncOutput
instance GetToken ExecAsyncOutput
instance GetToken AsyncRecord
instance GetToken OutOfBandRecord
instance GetToken Output
instance GetToken Command
instance GetToken ResultRecord


-- | Semantical data structures and conversion functions for GDB/MI output.
--   
--   While working with <a>Response</a> and <a>Notification</a> is always
--   possible in general, handling the generic <a>Result</a> lists is
--   cumbersome. This module provides convenient data types instead to
--   facilitate pattern matching etc..
--   
--   This module is incomplete, as we only implemented what we needed up to
--   now.
module Gdbmi.Semantics

-- | Convert the result list of a <a>break_insert</a> command response.
response_break_insert :: [Result] -> Maybe Breakpoint

-- | Convert the result list of a <a>data_evaluate_expression</a> command
--   response.
response_data_evaluate_expression :: [Result] -> Maybe String

-- | Convert the result list of a <a>exec_return</a> command response.
response_exec_return :: [Result] -> Maybe Frame

-- | Convert the result list of a <a>stack_list_frames</a> command
--   response.
response_stack_list_frames :: [Result] -> Maybe Stack

-- | Convert the result list of a <a>Response</a> with <a>ResultClass</a>
--   <a>RCError</a>.
response_error :: [Result] -> Maybe String

-- | Convert the result list of a <a>Notification</a> with
--   <a>NotificationClass</a> <a>Exec</a> and <a>AsyncClass</a>
--   <a>ACStop</a>.
notification_stopped :: [Result] -> Maybe Stopped
data Breakpoint
Breakpoint :: BkptNumber -> BreakpointType -> BreakpointDisp -> Bool -> String -> String -> String -> String -> Int -> Int -> String -> Breakpoint
bkptNumber :: Breakpoint -> BkptNumber
bkptType :: Breakpoint -> BreakpointType
bkptDisp :: Breakpoint -> BreakpointDisp
bkptEnabled :: Breakpoint -> Bool
bkptAddress :: Breakpoint -> String
bkptFunc :: Breakpoint -> String
bkptFile :: Breakpoint -> String
bkptFullname :: Breakpoint -> String
bkptLine :: Breakpoint -> Int
bkptTimes :: Breakpoint -> Int
bkptOriginalLocation :: Breakpoint -> String
type BreakpointType = String
data BreakpointDisp
BreakpointKeep :: BreakpointDisp
BreakpointDel :: BreakpointDisp
type BkptNumber = Int
newtype Stack
Stack :: [Frame] -> Stack
stackFrames :: Stack -> [Frame]
data Frame
Frame :: Maybe Int -> String -> String -> Maybe [Arg] -> String -> Maybe String -> Int -> Frame
frameLevel :: Frame -> Maybe Int
frameAddr :: Frame -> String
frameFunc :: Frame -> String
frameArgs :: Frame -> Maybe [Arg]
frameFile :: Frame -> String
frameFullname :: Frame -> Maybe String
frameLine :: Frame -> Int
data Arg
Arg :: String -> String -> Arg
argName :: Arg -> String
argValue :: Arg -> String
data Stopped
Stopped :: StopReason -> Frame -> Int -> String -> Int -> Stopped
stoppedReason :: Stopped -> StopReason
stoppedFrame :: Stopped -> Frame
stoppedThreadId :: Stopped -> Int
stoppedThreads :: Stopped -> String
stoppedCore :: Stopped -> Int
data StopReason
BreakpointHit :: BreakpointDisp -> BkptNumber -> StopReason
bkptHitDisp :: StopReason -> BreakpointDisp
bkptHitNumber :: StopReason -> BkptNumber
EndSteppingRange :: StopReason
FunctionFinished :: StopReason
instance Show BreakpointDisp
instance Show Breakpoint
instance Show StopReason
instance Show Arg
instance Show Frame
instance Show Stopped
instance Show Stack
instance Read BreakpointDisp


-- | Constructor functions for <a>Command</a> values.
--   
--   Please consult the cited GDB documentation for the semantics of the
--   individual commands.
module Gdbmi.Commands
break_after :: Int -> Int -> Command
break_commands :: Int -> [String] -> Command
break_condition :: Int -> String -> Command
break_delete :: [Int] -> Command
break_disable :: [Int] -> Command
break_enable :: [Int] -> Command
break_info :: Int -> Command
break_insert :: Bool -> Bool -> Bool -> Bool -> Bool -> Maybe String -> Maybe Int -> Maybe Int -> Location -> Command
break_list :: Command
break_passcount :: Int -> Int -> Command
break_watch :: Bool -> Command
exec_arguments :: [String] -> Command
environment_cd :: String -> Command
environment_directory :: Bool -> [String] -> Command
environment_path :: Bool -> [String] -> Command
environment_pwd :: Command
thread_info :: Maybe Int -> Command
thread_list_ids :: Command
thread_select :: Int -> Command
ada_task_info :: Maybe Int -> Command
exec_continue :: Bool -> Either Bool Int -> Command
exec_finish :: Bool -> Command
exec_interrupt :: Either Bool Int -> Command
exec_jump :: Location -> Command
exec_next :: Command
exec_next_instruction :: Bool -> Command
exec_return :: Command
exec_run :: Either Bool Int -> Command
exec_step :: Command
exec_step_instruction :: Bool -> Command
exec_until :: Location -> Command
stack_info_frame :: Command
stack_info_depth :: Maybe Int -> Command
stack_list_arguments :: PrintValues -> Maybe (Int, Int) -> Command
stack_list_arguments' :: Int -> Maybe (Int, Int) -> Command
stack_list_frames :: Maybe (Int, Int) -> Command
stack_list_locals :: PrintValues -> Command
stack_list_locals' :: Int -> Command
stack_list_variables :: PrintValues -> Command
stack_list_variables' :: Int -> Command
stack_select_frame :: Int -> Command
enable_pretty_printing :: Command
var_create :: Maybe String -> FrameSelect -> String -> Command
var_delete :: Bool -> String -> Command
var_set_format :: String -> FormatSpec -> Command
var_gdbShow_format :: String -> Command
var_info_num_children :: String -> Command
var_list_children :: Maybe PrintValues -> String -> Maybe (Int, Int) -> Command
var_list_children' :: Int -> String -> Maybe (Int, Int) -> Command
var_info_type :: Command
var_info_expression :: String -> Command
var_info_path_expressoin :: String -> Command
var_gdbShow_attributes :: String -> Command
var_evaluate_expression :: Maybe FormatSpec -> String -> Command
var_assign :: String -> String -> Command
var_update :: Maybe PrintValues -> Maybe String -> Command
var_set_frozen :: String -> FrozenFlag -> Command
var_set_update_range :: String -> Int -> Int -> Command
var_set_visualizer :: String -> String -> Command
data_disassemble :: Either (String, String) (String, Int, Maybe Int) -> DisassemblyMode -> Command
data_evaluate_expression :: String -> Command
data_list_changed_registers :: Command
data_list_register_names :: [Int] -> Command
data_list_register_values :: DataFormat -> [Int] -> Command
data_read_memory :: Maybe Int -> String -> OutputFormat -> Int -> Int -> Int -> Maybe Char -> Command
data_read_memory_bytes :: Maybe Int -> String -> Int -> Command
data_write_memory_bytes :: String -> String -> Command
trace_find :: TraceMode -> Command
trace_define_variable :: String -> Maybe String -> Command
trace_list_variables :: Command
trace_save :: Bool -> String -> Command
trace_start :: Command
trace_status :: Command
trace_stop :: Command
symbol_list_lines :: String -> Command
file_exec_and_symbols :: Maybe FilePath -> Command
file_exec_file :: Maybe FilePath -> Command
file_list_exec_source_file :: Command
file_list_exec_source_files :: Command
file_symbol_file :: Maybe FilePath -> Command
target_attach :: Either Int FilePath -> Command
target_detach :: Maybe Int -> Command
target_disconnect :: Command
target_download :: Command
target_select :: Target -> Command
target_file_put :: FilePath -> FilePath -> Command
target_file_get :: FilePath -> FilePath -> Command
target_file_delete :: FilePath -> Command
gdb_exit :: Command
gdb_set :: String -> Command
gdb_gdbShow :: String -> Command
gdb_version :: Command
list_features :: Command
list_target_features :: Command
list_thread_groups :: Bool -> Maybe Int -> [Int] -> Command
info_os :: Maybe String -> Command
add_inferior :: Command
interpreter_exec :: Interpreter -> Command -> Command
inferior_tty_set :: String -> Command
inferior_tty_gdbShow :: Command
enable_timings :: Bool -> Command
data Location
positive_offset_location :: Int -> Location
negative_offset_location :: Int -> Location
file_line_location :: String -> Int -> Location
function_location :: String -> Location
function_label_location :: String -> String -> Location
file_function_location :: String -> String -> Location
label_location :: String -> Location
plain_address_location :: String -> Location
expr_address_location :: String -> Location
func_address_location :: String -> Location
file_func_address_location :: String -> String -> Location
data PrintValues

-- | "--no-values" or "0"
NoValues :: PrintValues

-- | "--all-values" or "1"
AllValues :: PrintValues

-- | "--simple-values" or "2"
SimpleValues :: PrintValues
data FrameSelect

-- | just the given address
FrameAddr :: String -> FrameSelect

-- | "*"
CurrentFrame :: FrameSelect

-- | "@"
Floating :: FrameSelect
data FormatSpec

-- | "binary"
Binary :: FormatSpec

-- | "decimal"
Decimal :: FormatSpec

-- | "hexadecimal"
Hexadecimal :: FormatSpec

-- | "octal"
Octal :: FormatSpec

-- | "natural"
Natural :: FormatSpec
data FrozenFlag

-- | "1"
Frozen :: FrozenFlag

-- | "0"
Unfrozen :: FrozenFlag
data DisassemblyMode

-- | with mixed source?, with raw opcodes?
DisassemblyMode :: Bool -> Bool -> DisassemblyMode
data DataFormat

-- | "x"
DHexadecimal :: DataFormat

-- | "o"
DOctal :: DataFormat

-- | "t"
DBinary :: DataFormat

-- | "d"
DDecimal :: DataFormat

-- | "r"
DRaw :: DataFormat

-- | "N"
DNatural :: DataFormat
data OutputFormat

-- | "x"
HexadecimalInteger :: OutputFormat

-- | "d"
SignedDecimalInteger :: OutputFormat

-- | "u"
UnsignedDecimalInteger :: OutputFormat

-- | "o"
OctalInteger :: OutputFormat

-- | "t"
BinaryInteger :: OutputFormat

-- | "a"
Address :: OutputFormat

-- | "c"
CharacterConstantInteger :: OutputFormat

-- | "f"
FloatingPointNumber :: OutputFormat

-- | "s"
OString :: OutputFormat

-- | "r"
Raw :: OutputFormat
data TraceMode

-- | "none"
None :: TraceMode

-- | "frame-number"
FrameNumber :: Int -> TraceMode

-- | "tracepoint-number"
TracepointNumber :: Int -> TraceMode

-- | "pc"
PC :: String -> TraceMode

-- | "pc-inside-range"
PCInsideRange :: String -> String -> TraceMode

-- | "pc-outside-range"
PCOutsideRange :: String -> String -> TraceMode

-- | "line"
Line :: Location -> TraceMode
data Target

-- | "exec"
Exec :: FilePath -> Target

-- | "core"
Core :: FilePath -> Target

-- | "remote"
Remote :: Medium -> Target

-- | "sim"
Sim :: [String] -> Target

-- | "nrom"
Nrom :: Target
data Medium

-- | just the given device
SerialDevice :: String -> Medium

-- | "tcp:%s:%d" host port
TcpHost :: String -> Int -> Medium

-- | "udp:%s:%d" host port
UdpHost :: String -> Int -> Medium

-- | "|%s" command
Pipe :: String -> Medium
data Interpreter

-- | "console"
Console :: Interpreter

-- | "mi"
MI :: Interpreter

-- | "mi2"
MI2 :: Interpreter

-- | "mi1"
MI1 :: Interpreter

-- | Create a CLI command, i.e., use the provided string literaly.
--   
--   Some GDB commands are not reflected in the Machine Interface. In those
--   cases one has to resort to Command Line Interface commands, which the
--   MI accepts as well.
cli_command :: String -> Command

-- | Set the token of a command.
--   <a>http://sourceware.org/gdb/current/onlinedocs/gdb/GDB_002fMI-Input-Syntax.html</a>
--   
--   Newly created commands have no token, but setting a token manually is
--   usually not necessary. <a>send_command</a> will assign a unique token
--   to a given command in any case.
set_token :: Token -> Command -> Command
instance GdbShow Interpreter
instance GdbShow Medium
instance GdbShow Target
instance GdbShow TraceMode
instance GdbShow OutputFormat
instance GdbShow DataFormat
instance GdbShow DisassemblyMode
instance GdbShow FrozenFlag
instance GdbShow FormatSpec
instance GdbShow FrameSelect
instance GdbShow PrintValues
instance GdbShow Location
instance GdbShow Int
instance GdbShow a => GdbShow [a]
instance GdbShow Char


-- | Control execution of a GDB instance, send commands and receive
--   results, notifications and stream information.
--   
--   Due to <a>http://sourceware.org/bugzilla/show_bug.cgi?id=8759</a> the
--   first command issued should be to set the output terminal for GDB to
--   /dev/null. Unfortunatelly, there is no MI command for this, so we have
--   to resort to the CLI command "tty". For example:
--   
--   <pre>
--   &gt;&gt;&gt; ctx  &lt;- setup config callback
--   
--   &gt;&gt;&gt; resp &lt;- send_command ctx (cli_command "tty /dev/null")
--   
--   &gt;&gt;&gt; when (respClass resp /= RCDone) (error ("unexpected response: " ++ show resp))
--   </pre>
module Gdbmi.IO
data Context

-- | Configuration
data Config
Config :: [String] -> Maybe FilePath -> Config

-- | command line to execute. The library will add "--interpreter mi".
confCommandLine :: Config -> [String]

-- | optinonally a file path to a log file for GDB/MI input and output. '-'
--   means stdout.
confLogfile :: Config -> Maybe FilePath

-- | Call-back functions for asynchronous GDB output.
--   
--   The call-backs are called in a separate thread per GDB output, so they
--   may block.
--   
--   Stop events are <a>Notification</a> events with
--   <a>NotificationClass</a> <a>Exec</a> and <a>AsyncClass</a>
--   <a>ACStop</a>. If <a>cbStopped</a> is given stop events are delivered
--   to that call-back instead of <a>cbNotify</a>.
data Callback
Callback :: ([Stream] -> IO ()) -> ([Notification] -> IO ()) -> Maybe ([Stopped] -> IO ()) -> Callback

-- | call-back for <a>Stream</a> events
cbStream :: Callback -> [Stream] -> IO ()

-- | call-back for <a>Notification</a> events
cbNotify :: Callback -> [Notification] -> IO ()

-- | optionally a special call-back for <a>Stopped</a> events
cbStopped :: Callback -> Maybe ([Stopped] -> IO ())

-- | Default configuration: <a>gdb</a> command line, no log file
default_config :: Config

-- | Launch a GDB instance in Machine Interface mode.
--   
--   The child process is run in a new session to avoid receiving SIGINTs
--   when issuing -exec-interrupt.
setup :: Config -> Callback -> IO Context

-- | Shut down the GDB instance and all resources associated with the
--   <a>Context</a>.
shutdown :: Context -> IO ()

-- | Send a GDB command and wait for the response.
--   
--   This function is thread safe, i.e., it can be called by multiple
--   threads in an interleaved fashion.
send_command :: Context -> Command -> IO Response
