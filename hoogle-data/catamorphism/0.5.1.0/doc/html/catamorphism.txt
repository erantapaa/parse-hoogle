-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A package exposing a helper function for generating catamorphisms.
--   
@package catamorphism
@version 0.5.1.0


-- | This module exposes a <a>makeCata</a> function which can create
--   catamorphisms for arbitrary Haskell types. Catamorphisms are functions
--   which deconstruct some value by replacing each data constructor with a
--   custom function yielding a new value. See
--   <a>http://www.haskell.org/haskellwiki/Catamorphisms</a> for a more
--   in-depth discussion of catamorphisms in Haskell.
--   
--   The Haskell base package already comes with a couple of standard
--   catamorphisms such as <tt>bool</tt> (for Bool values), <a>maybe</a>
--   (for Maybe values) values, <a>either</a> for (Either values) values
--   and <a>foldr</a> (for lists). These catamorphisms could have been
--   generated using <a>makeCata</a> as follows:
--   
--   <pre>
--   -- Defines 'bool :: a -&gt; a -&gt; Bool -&gt; a'
--   $(makeCata defaultOptions ''Bool)
--   
--   -- Defines 'maybe :: b -&gt; (a -&gt; b) -&gt; Maybe a -&gt; b'
--   $(makeCata defaultOptions ''Maybe)
--   
--   -- Defines 'either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c'
--   $(makeCata defaultOptions ''Either)
--   
--   -- Defines 'fold :: b -&gt; (a -&gt; b -&gt; b) -&gt; [a] -&gt; b', i.e. 'flip foldr'. Note
--   -- that a custom catamorphism name has to be specified since '[]' is not a
--   -- valid function name.
--   $(makeCata defaultOptions { cataName = "fold" } ''[])
--   </pre>
--   
--   However, catamorphisms are especially useful for recursive data
--   structures. Consider the following simple example which defines a
--   basic data type for modelling sums of numbers, supporting variables:
--   
--   <pre>
--   import Data.Morphism.Cata
--   import Data.Maybe (fromJust)
--   
--   data Expr a = Number a
--               | Variable Char
--               | Sum (Expr a) (Expr a)
--   
--   -- Defines 'cataExpr :: (a -&gt; b) -&gt; (Char -&gt; b) -&gt; (b -&gt; b -&gt; b) -&gt; Expr a -&gt; b'
--   $(makeCata defaultOptions { cataName = "cataExpr" } ''Expr)
--   </pre>
--   
--   The <a>makeCata</a> invocation defines a <tt>cataExpr</tt> function
--   which works like a fold on <tt>Expr</tt> values; it can be used to
--   implement various useful other functions:
--   
--   <pre>
--   -- Evaluate an Expr, given some variable bindings
--   eval :: Num a =&gt; [(Char, a)] -&gt; Expr a -&gt; a
--   eval vars = cataExpr id (fromJust . (`lookup` vars)) (+)
--   
--   -- Pretty-prints an Expr
--   pprint :: Show a =&gt; Expr a -&gt; String
--   pprint = cataExpr show show (\a b -&gt; a ++ " + " ++ b)
--   
--   -- Counts the number of variables used in an expr
--   numVars :: Expr a -&gt; Int
--   numVars = cataExpr (const 1) (const 0) (+)
--   </pre>
module Data.Morphism.Cata

-- | Values of the <a>CataOptions</a> type can be passed to <a>makeCata</a>
--   in order to customize the generated catamorphism. At this point, only
--   the name of the function can be changed.
data CataOptions
CataOptions :: String -> CataOptions

-- | The desired name for the catamorphism. An empty string will make
--   <a>makeCata</a> derive the catamorphism name from the type by just
--   taking the type name and making the first letter lower-case.
cataName :: CataOptions -> String

-- | The default catamorphism generation options; the catamorphism will be
--   named after the type, e.g.
--   
--   <pre>
--   $(makeCata defaultOptions ''Bool)
--   </pre>
--   
--   defines a function <tt>bool</tt>.
defaultOptions :: CataOptions

-- | The <a>makeCata</a> function creates a catamorphism for the given
--   type.
makeCata :: CataOptions -> Name -> Q [Dec]
