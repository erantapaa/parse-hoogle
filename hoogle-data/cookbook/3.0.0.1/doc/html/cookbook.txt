-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Tiered general-purpose libraries with domain-specific applications.
--   
--   Cookbook is a line of libraries covering a wide variety of Haskell
--   applications. Every application that I make, I add its functions to
--   Cookbook, turning Cookbook into an all-encompassing general-purpose
--   library over time. The claim-to-fame for the library is its use of
--   overloaded typeclasses, called <a>Continuities</a>.
@package cookbook
@version 3.0.0.1


-- | Q2Prelude is the entry-level module for Quill2. It defines the data
--   types that define data, databases, and errors throughout the rest of
--   Quill2.
module Cookbook.Project.Quill2.Q2Prelude

-- | The body of a table or list.
data Element a
List :: [a] -> Element a
Table :: [(a, a)] -> Element a

-- | Helper type. Binds a name to a body.
type Quill = (String, Element String)

-- | Encapsulates errors in the quill database. Currently supports Missing
--   elements and Multiple Instances.
data QuillStatus a
QuillSuccess :: a -> QuillStatus a
QuillMissing :: String -> QuillStatus a
QuillMultiple :: String -> QuillStatus a

-- | Safe way of adding items to a Quill database. Allows type-checking on
--   Lists and Tables when manipulating Elements.
data QuillAddition
AList :: (String, String) -> QuillAddition
ATable :: (String, String, String) -> QuillAddition
instance Eq a => Eq (Element a)
instance Show a => Show (Element a)
instance Eq a => Eq (QuillStatus a)
instance Show a => Show (QuillStatus a)
instance Eq QuillAddition
instance Show QuillAddition


-- | Library for defining high-level generic data structures, most commonly
--   containers. Specialized data types for specialized projects should go
--   into Projects. It's sort of why it exists.
module Cookbook.Recipes.DataStructures

-- | Implementation of a binary tree.
data Tree a
Empty :: Tree a
Branch :: a -> (Tree a) -> (Tree a) -> Tree a
instance Show a => Show (Tree a)


-- | Library for using tupples as an associative list. It can be thought of
--   like a <a>map</a> in Clojure, or a database of key-value pairs. This
--   is also the general-purpose tupple library, so there's stragglers.
module Cookbook.Ingredients.Tupples.Look

-- | Look up an lval in a list of tupples.
look :: Eq a => [(a, b)] -> a -> Maybe b

-- | Returns all elements where the lval matches the element.
lookList :: Eq a => [(a, b)] -> a -> [b]

-- | Swap the lval with the rval, and vice-versa.
swp :: (a, b) -> (b, a)

-- | Removes all matches of the lval.
rmLook :: Eq a => [(a, b)] -> a -> [(a, b)]

-- | Turns a list into as many double-tupples (a,a) as it can, dropping
--   items from uneven lists.
group :: [a] -> [(a, a)]


-- | Library for working with numbers more easily. It includes somewhat
--   lazy functions for when a lambda will clutter code up too much, as
--   well as more involved mathematical formulae.
module Cookbook.Recipes.Math

-- | Increase value by one.
inc :: Enum a => a -> a

-- | Decrease value by one,
dec :: Enum a => a -> a

-- | Multiply a number by itself.
sqr :: Num a => a -> a

-- | Find the average of a group of Fractionals.
avg :: Fractional a => [a] -> a

-- | Find the standard deviation of a list of data.
stdev :: (Fractional a, Floating a) => [a] -> a

-- | Factorial, from 1 to point.
fact :: (Num a, Enum a) => a -> a


-- | Library for arranging and modifying lists of twopples. Dubber Tuppers?
--   There has to be a better word for this. It works on two-sided Tupples.
module Cookbook.Ingredients.Tupples.Assemble

-- | Sorts a list of Tupples based on their second element.
tupsort :: Ord b => [(a, b)] -> [(a, b)]

-- | Order a list of tupples by their rval, and collect the lvals as a
--   list.
assemble :: Ord b => [(a, b)] -> [a]

-- | Removes all double-entries from a list of tupples, contingent on just
--   lval.
rmDb :: Eq a => [(a, b)] -> [(a, b)]

module Cookbook.Ingredients.Tupples.Meta


-- | Library for breaking conditionally on lists. When one filters a list,
--   it will filter all of the elements. When one filterBREAKS a list, it
--   will stop collecting the list at a desired element. This library also
--   includes functions for conditionally transforming a list.
module Cookbook.Ingredients.Functional.Break

-- | Drop a list until a predicate yields false, returning the false item
--   and the rest of the list.
removeBreak :: (a -> Bool) -> [a] -> [a]

-- | Collect a list until a predicate yields false for a value.
filterBreak :: (a -> Bool) -> [a] -> [a]

-- | Returns true if any element in the list yields true for a predicate.
imbreak :: (a -> Bool) -> [a] -> Bool

-- | Conditionally transform a list. If a predicate returns true, use lval.
--   Otherwise, use rval.
btr :: (a -> Bool) -> (b, b) -> [a] -> [b]

module Cookbook.Ingredients.Functional.Meta


-- | <a>global</a> functions for the entirety of the Cookbook library.
--   Common is the potpourri of Cookbook, with no category except
--   <a>everything uses me!</a>
module Cookbook.Essential.Common

-- | Return a list starting at an index. Indices start at 0.
sub :: Eq a => [a] -> Int -> [a]

-- | Find the occurrences of an element in a list.
positions :: Eq a => [a] -> a -> [Int]

-- | C-style wrapper for positions. Returns the first occurrence in a list,
--   or -1 on notElem.
pos :: Eq a => [a] -> a -> Int

-- | Reversal of map function. Chains calls of functions over a parameter,
--   starting with head.
apply :: [(a -> a)] -> a -> a

-- | Flatten a list one level.
flt :: [[a]] -> [a]

-- | Execute a function from the end of a list to the front.
fromLast :: ([a] -> [a]) -> [a] -> [a]

-- | After a certain number of an element, return the list.
afterX :: Eq a => [a] -> a -> Int -> [a]

-- | Internal implementation of <a>intersperse</a>.
iSp :: [a] -> a -> [a]


-- | Library for accessing the information from a list. Modify and Access
--   are six in one and half-dozen in the other in a purely functional
--   language, but the overall theme is this: Access is for functions which
--   return portions of the list, or information about a list. Modify is
--   the library which transforms a list.
module Cookbook.Ingredients.Lists.Access

-- | Counts the occurrences an element has within a list.
count :: Eq a => [a] -> a -> Int

-- | Checks to see if a list is a sub-list of the list.
contains :: Eq a => [a] -> [a] -> Bool

-- | QuickSort implementation. Sorts a list of data quickly?
qsort :: Ord a => [a] -> [a]

-- | Safe implementation of !!. Uses maybe instead of error.
pull :: [a] -> Int -> Maybe a

-- | Referrential positioning. Find the position of an element in the first
--   list, and return the element from the second list of the same
--   position. In the event that the second list is shorter than the
--   position where the element is found in the first list, it returns the
--   parameter.
refpos :: Eq a => ([a], [a]) -> a -> a

-- | Test to make sure that all elements in a list are equal to a value.
areAll :: Eq a => [a] -> a -> Bool

-- | Re-implementation of isPrefixOf for some reason. Tests to see if a
--   list is the first part of antoher list.
isBefore :: Eq a => [a] -> [a] -> Bool

-- | Test to see if a list is surrounded by an item.
surrounds :: Eq a => (a, a) -> [a] -> Bool


-- | Library for overloading functions across lists and singular items, as
--   well as tupples. Somewhat abuses FlexibleInstance and Typeclasses.
module Cookbook.Essential.Continuous

-- | Classifies items that can be modified by either a list or item.
class Continuous list part
after :: Continuous list part => list -> part -> list
before :: Continuous list part => list -> part -> list
delete :: Continuous list part => list -> part -> list

-- | Classifies information which can be split by a tupple.
class Splicable a b
splice :: Splicable a b => a -> b -> a
between :: Splicable a b => a -> b -> a

-- | Classifies data which can be replaced.
class Replacable list repls
replace :: Replacable list repls => list -> repls -> list

-- | Classifies data which can be removed from a list.
class Removable list toRm
remove :: Removable list toRm => list -> toRm -> list
instance Eq a => Removable [a] [a]
instance Eq a => Removable [a] a
instance Eq a => Replacable [a] [([a], [a])]
instance Eq a => Replacable [a] ([a], [a])
instance Eq a => Replacable [a] [(a, a)]
instance Eq a => Replacable [a] (a, a)
instance Eq a => Splicable [a] ([a], [a])
instance Eq a => Splicable [a] (a, a)
instance Eq a => Continuous [a] [a]
instance Eq a => Continuous [a] a


-- | Library for modifying data within a list, and transforming lists in
--   certain ways. While that's vague, so is the definition of <a>To
--   Modify</a>.
module Cookbook.Ingredients.Lists.Modify

-- | Reverses a list.
rev :: [a] -> [a]

-- | Removes all occurances of an element from a list. See MDN1 in the
--   source for a run-down on why it's implemented here and in Continuous.
rm :: Eq a => [a] -> a -> [a]

-- | Splits a list on an element, making a list of lists based on the
--   element as a seperator.
splitOn :: Eq a => [a] -> a -> [[a]]

-- | Implementation of between that works on a list of lists, and using
--   Contains rather than elem.
linesBetween :: Eq a => [[a]] -> ([a], [a]) -> [[a]]

-- | Put an element after every element of a list, not including the last
--   element.
intersperse :: [a] -> a -> [a]

-- | An equivelant to the terenary operator for Haskell.
(?) :: a -> a -> Bool -> a

-- | Returns a list of all elements surrounded by elements. Basically a
--   between which works more than once.
surroundedBy :: Eq a => [a] -> (a, a) -> [[a]]


-- | Library for completing common IO tasks, integrating with files and
--   UNIX functions.
module Cookbook.Essential.IO

-- | Return the lines of a file as a list of Strings.
filelines :: String -> IO [String]

-- | Prompts the user for keyboard input
prompt :: String -> IO String

-- | Returns the path of a file in the user's home directory.
inhome :: String -> IOMode -> IO Handle

-- | Pure. Returns the file name with the directory truncated.
filename :: String -> String

-- | Pure. Returns the module name. That is, path to the file with the file
--   cut off.
modulename :: String -> String


-- | Library for interacting with high-evel data structures found in
--   Cookbook.Recipes.DataStructures (Ds). It also implements some data
--   types that would have just been type synonyms if implemented in Ds.
module Cookbook.Recipes.Algorithm

-- | Get every node of a tree, put it into a list.
climb :: Tree a -> [a]

-- | Apply a function to every node in a tree.
treeMap :: Tree a -> (a -> a) -> Tree a

-- | Collectively nullify nodes on a tree.
treeFilter :: Tree a -> (a -> Bool) -> Tree a

-- | Generates a list of points, with the specified null data in the snd of
--   the tupples.
genMatrix :: (Int, Int) -> a -> [((Int, Int), a)]


-- | Configuration is a library for simple configuration files. It's pretty
--   fragile, but it's been used for some pretty majorly used scripts,
--   namely espion. The lvalue becomes the fst of a name-value pair, and
--   the rvalue becomes the second, with the syntax: lvalue : rvaluen
module Cookbook.Project.Configuration.Configuration

-- | Read the lines of a configuration file, query it, and return an answer
--   to the query.
conf :: [String] -> String -> String

module Cookbook.Essential.Meta


-- | Library for sanitizing data, mainly strings.
module Cookbook.Recipes.Sanitize

-- | Restricts an entire list of information from appearing in another list
--   bit-by-bit.
blacklist :: Eq a => [a] -> [a] -> [a]

-- | Removes a leading character from a list.
rmleading :: Eq a => [a] -> a -> [a]

-- | Refpos wrapper for two lists, last to first.
up :: Eq a => ([a], [a]) -> [a] -> [a]

-- | Refpos wrapper for two lists, first to last.
down :: Eq a => ([a], [a]) -> [a] -> [a]

-- | Removes all doubles in the list, turning them into just one
--   occurrence.
rmdb :: Eq a => [a] -> [a]

-- | Wholly removes doubles from a list.
rmdbAll :: Eq a => [a] -> [a]

-- | Moves a string to lower-case.
tolower :: String -> String

-- | Moves a string to upper-case.
toupper :: String -> String

-- | Removes all of the leading whitespace from a string.
rmlws :: String -> String

-- | Removes all <a>symbols</a> from a string
rmsymbols :: String -> String

-- | Check to see if the string is a non-numeral
notNumeral :: String -> Bool

-- | Check to see if the string is numeral.
numeral :: String -> Bool


-- | Library for determining mathematically whether two lists are similar.
module Cookbook.Ingredients.Lists.Stats

-- | Creates a list with the frequency of elements in a list.
frequency :: Eq a => [a] -> [(a, Int)]

-- | Returns the x-amount of most frequent elements in a list. If there is
--   a <a>tie</a>, the order it appears in a list takes precedence.
mostFrequent :: Eq a => [a] -> Int -> [a]

-- | Provides a mathematical score out of 1 based on the similarities
--   between the two words. This is freqScore, but it takes into account
--   length.
wordscore :: Eq a => [a] -> [a] -> Double

-- | Provides a frequency score between two lists.
freqScore :: Eq a => [a] -> [a] -> Double

module Cookbook.Ingredients.Lists.Encompass

-- | Get the entire section of a list contained within the scope delimited
--   by the parameters, even sub-scopes.
encompassing :: Eq a => [a] -> (a, a) -> [a]

-- | Partial implementation of after, but working with scopes. Dangerous
--   implementation, use with caution.
afterEncompassing :: Eq a => [a] -> (a, a) -> [a]

-- | Partial implementation of before, but working with scopes. Less
--   dangerous implementation than afterEncompassing, but still dangerous.
beforeEncompassing :: Eq a => [a] -> (a, a) -> [a]

-- | Gets all of the elements outside a given scope.
splitEncompassing :: Eq a => [a] -> (a, a) -> [[a]]

-- | There is a long story behind this function, and why it sucks. See ENN1
--   in the source.
notEncompassedSplit :: Eq a => [a] -> (a, a) -> a -> [[a]]
toGaps :: Eq a => [[a]] -> [[a]]

-- | Returns all of the elements inside of a scope.
gatherEncompassing :: Eq a => [a] -> (a, a) -> [[a]]

module Cookbook.Ingredients.Lists.Meta

module Cookbook.Recipes.Cline

-- | Parse a flat string into a list of Clines.
parse :: String -> [Cline]

-- | Represents command-line options. Works on either arguments or flags.
data Cline
Flag :: Char -> Cline
Argument :: String -> String -> Cline

-- | Extract arguments from a list of word-separated strings.
clineExtract :: [String] -> [Cline]

-- | Cleans a command line argument. If it's not a number, it will add a
--   couple of dashes in front of it.
clArg :: String -> String
instance Show Cline
instance Eq Cline


-- | A library for preprocessing information using replacing sweeps.
--   Supports inline comments. Does not currently support
--   whitespace-insignificant parsing.
module Cookbook.Project.Preprocess.Preprocess

-- | Binds possibly multiple inputs on one line to one input. General
--   syntax is: inp1|inp2_out
makeParams :: String -> [(String, String)]

-- | Sanitizes the strings before parsing.
sanitize :: String -> String

-- | Generate Program Language. Generates a list of input-output pairs to
--   be replaced.
gPL :: [String] -> [(String, String)]


-- | Q2Parse is the <a>engine</a> of Quill2. It is able to turn a string
--   (or a list of them) into a Quill database. The syntax of Quill
--   currently supports Whitespace-inclusive strings, comments, and
--   whitespace-independence.
module Cookbook.Project.Quill2.Q2Parse

-- | Remove all C-style comments frm the code. Does not support single-line
--   comments, because Quill2 is fully whitespace independant.
decomment :: String -> String

-- | Prepare the lines of a file for processing.
prepare :: [String] -> String

-- | Process a single entry in the database into a Table.
pTable :: String -> Quill

-- | Turn the lines of a file into a list of tables, AKA a Database.
pFile :: [String] -> [Quill]


-- | Q2Api is the user-facing part of Quill. It has all the functions
--   necessar to Create, Read, Update, and Delete information from the
--   database, and turn a database back into a Quill-readable string.
module Cookbook.Project.Quill2.Q2Api

-- | Get the name of a Quill.
getQuillName :: Quill -> String

-- | Return the element of the Quill, specifically useful for lists.
getQuillBody :: Quill -> Element String

-- | Find a quill in the database by name, returning it or a possible error
--   type.
getQuill :: [Quill] -> String -> QuillStatus Quill

-- | Look up the value of a Quill TABLE. Will produce an error on a list.
lookUp :: [Quill] -> (String, String) -> QuillStatus String

-- | Remove a quill from the database by name.
removeQuill :: [Quill] -> String -> [Quill]

-- | Remove an item from a Quill within a database. Works aggressively,
--   meaning it removes all copies to help sanitize QuillMultiples out. th
removeItem :: [Quill] -> (String, String) -> QuillStatus [Quill]

-- | Adds a Quill databse to the file.
addQuill :: [Quill] -> Quill -> [Quill]

-- | Add a QuillAddition to the databse. QuillAddition is a safe
--   encapsulation of list and table values.
addItem :: [Quill] -> QuillAddition -> QuillStatus [Quill]

-- | Map a Quill function.
qMap :: QuillStatus [Quill] -> ([Quill] -> QuillStatus [Quill]) -> QuillStatus [Quill]

-- | Change an item within the database using a Quill addition. Wrapper of
--   addItem and removeItem.
changeItem :: [Quill] -> QuillAddition -> QuillStatus [Quill]

-- | Turn a Quill table into a string.
toString :: Quill -> String


-- | Q2Io is a helper library for interacting with Quill files. It aids in
--   the reading of and writing to files on the user's system.
module Cookbook.Project.Quill2.Q2Io

-- | Read a Quill database from a file.
fromFile :: FilePath -> IO [Quill]

-- | Send a Quill database into a parsable format in a file.
toFile :: FilePath -> [Quill] -> IO ()

module Cookbook.Project.Quill2.Meta

module Cookbook.Recipes.Meta

module Cookbook.Ingredients.Meta

module Cookbook.Meta
