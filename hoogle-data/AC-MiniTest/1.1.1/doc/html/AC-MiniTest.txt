-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple test framework.
--   
--   This is a simple testing library. It focuses mainly on making it easy
--   to run large test suites and collect the results together.
--   
--   This package is currently fairly experimental. The API may change in
--   the near future. Hopefully this release should be relatively bug-free,
--   however.
--   
--   Changes:
--   
--   <ul>
--   <li>Initial release.</li>
--   </ul>
@package AC-MiniTest
@version 1.1.1


-- | This is the main testing module. Start reading here if you want to
--   know what this package is all about.
--   
--   There's a documentation section at the bottom of this page. You might
--   want to start by reading that. Otherwise, here's a quick summary:
--   
--   <ul>
--   <li>You create <a>Test</a> objects to represent your tests.</li>
--   <li><tt><a>run_test</a> :: <a>Test</a> -&gt; <a>IO</a>
--   <a>Bool</a></tt> to quickly run a test interactively (e.g., during
--   debugging activity).</li>
--   <li><a>run_test_full</a> allows more control, including recording
--   detailed test results to an XML log file.</li>
--   <li><tt><a>test</a> :: <a>Bool</a> -&gt; <a>Test</a></tt> creates a
--   test from pure code.</li>
--   <li><tt>(<a>?=</a>) :: <a>Eq</a> x =&gt; x -&gt; x -&gt;
--   <a>Test</a></tt> for tests with known answers.</li>
--   <li>Tests can be annotated with <a>title</a>, <a>argument</a>,
--   <a>temporary</a>, <a>note</a> and so on.</li>
--   <li><tt><a>tests</a> :: [<a>Test</a>] -&gt; <a>Test</a></tt> for
--   combining multiple tests into a single <a>Test</a> object. Tests can
--   be nested arbitrarily in this mannar to group related tests
--   together.</li>
--   <li><tt><a>testIO</a> :: <a>IO</a> <a>Bool</a> -&gt; <a>Test</a></tt>
--   for tests that need to perform I/O.</li>
--   <li>The <a>TestM</a> monad supports <a>liftIO</a> and allows limited
--   test annotations from within monadic code.</li>
--   <li><tt><a>testM</a> :: <a>TestM</a> <a>Bool</a> -&gt;
--   <a>Test</a></tt> to use the <a>TestM</a> monad.</li>
--   <li><a>throws</a>, <a>throwsIO</a>, <a>throwsM</a> to test for
--   exceptions.</li>
--   </ul>
module Test.AC.Test

-- | An executable test.
data Test

-- | Create a <a>Test</a> from a simple <a>Bool</a> value.
--   
--   The test passes if the value is <a>True</a>. The test fails if the
--   value is <a>False</a>, or if an exception is thrown in the course of
--   computing the value.
test :: Bool -> Test

-- | This test always succeeds, but writes a note in the log to say that
--   the test case was "inapplicable".
--   
--   This is generally useful if you have a test generation function which
--   doesn't work for certain combinations of inputs. In that instance, the
--   test still passes, but there is a note in the log letting you know it
--   was only a "null" test.
inapplicable :: Test

-- | Test for exceptions.
--   
--   Ordinarily, any test which throws an exception is deemed to have
--   failed. However, this test <i>passes</i> if evaluating the argument to
--   WHNF causes an exception to be thrown. The test <i>fails</i> if no
--   exception is thrown.
--   
--   This can be useful for checking that functions reject invalid input by
--   throwing an exception. (Of course, you cannot check that the
--   <i>correct</i> exception is thrown!)
--   
--   If WHNF is not enough to trigger the exception, you can wrap the
--   expression in some suitable forcing function. (The function
--   <a>length</a> <a>.</a> <a>show</a> can sometimes be used for this
--   purpose.)
--   
--   Note that an infinite loop is not an exception (unless the loop
--   exhausts some resource).
--   
--   If an exception is not thrown, the actual value returned is not
--   recorded. See <a>throws</a> for a function that records this
--   information. (Note that this requires adding a <a>Show</a>
--   constraint.)
throws_ :: x -> Test

-- | Test for exceptions.
--   
--   Ordinarily, any test which throws an exception is deemed to have
--   failed. However, this test <i>passes</i> if evaluating the argument to
--   WHNF causes an exception to be thrown. The test <i>fails</i> if no
--   exception is thrown.
--   
--   This can be useful for checking that functions reject invalid input by
--   throwing an exception. (Of course, you cannot check that the
--   <i>correct</i> exception is thrown!)
--   
--   If WHNF is not enough to trigger the exception, you can wrap the
--   expression in some suitable forcing function. (The function
--   <a>length</a> <a>.</a> <a>show</a> can sometimes be used for this
--   purpose.)
--   
--   Note that an infinite loop is not an exception (unless the loop
--   exhausts some resource).
--   
--   If no exception is thrown, the actual value returned is recorded. This
--   requires adding a <a>Show</a> constraint. See <a>throws_</a> for a
--   function without this constraint.
throws :: Show x => x -> Test

-- | Compare two values for equality.
--   
--   The right-hand value is the "target" value, and the left-hand value
--   (next to the <tt>?</tt> sign) is the "actual" value. The test passes
--   if both values are equal according to <a>==</a>. The test fails if any
--   exceptions are thrown by <a>==</a> or <a>show</a>.
--   
--   This operator has the same precedence as <a>==</a> (i.e., 4).
(?=) :: (Eq x, Show x) => x -> x -> Test

-- | Compare two values for inequality.
--   
--   The right-hand value is the "target" value, and the left-hand value
--   (next to the <tt>?</tt> sign) is the "actual" value. The test passes
--   if both values are unequal according to <a>/=</a>. The test fails if
--   any exceptions are thrown by <a>/=</a> or <a>show</a>.
--   
--   This operator has the same precedence as <a>/=</a> (i.e., 4).
(?/=) :: (Eq x, Show x) => x -> x -> Test

-- | Compare two values for inequality.
--   
--   The right-hand value is the "target" value, and the left-hand value
--   (next to the <tt>?</tt> sign) is the "actual" value. The test passes
--   if the actual value is less than the target value according to
--   <a>&lt;</a>. The test fails if any exceptions are thrown by
--   <a>&lt;</a> or <a>show</a>.
--   
--   This operator has the same precedence as <a>&lt;</a> (i.e., 4).
(?<) :: (Ord x, Show x) => x -> x -> Test

-- | Compare two values for inequality.
--   
--   The right-hand value is the "target" value, and the left-hand value
--   (next to the <tt>?</tt> sign) is the "actual" value. The test passes
--   if the actual value is less than or equal to the target value
--   according to <a>&lt;=</a>. The test fails if any exceptions are thrown
--   by <a>&lt;=</a> or <a>show</a>.
--   
--   This operator has the same precedence as <a>&lt;=</a> (i.e., 4).
(?<=) :: (Ord x, Show x) => x -> x -> Test

-- | Compare two values for inequality.
--   
--   The right-hand value is the "target" value, and the left-hand value
--   (next to the <tt>?</tt> sign) is the "actual" value. The test passes
--   if the actual value is more than the target value according to
--   <a>&gt;</a>. The test fails if any exceptions are thrown by
--   <a>&gt;</a> or <a>show</a>.
--   
--   This operator has the same precedence as <a>&gt;</a> (i.e., 4).
(?>) :: (Ord x, Show x) => x -> x -> Test

-- | Compare two values for inequality.
--   
--   The right-hand value is the "target" value, and the left-hand value
--   (next to the <tt>?</tt> sign) is the "actual" value. The test passes
--   if the actual value is more than or equal to the target value
--   according to <a>&gt;=</a>. The test fails if any exceptions are thrown
--   by <a>&gt;=</a> or <a>show</a>.
--   
--   This operator has the same precedence as <a>&gt;=</a> (i.e., 4).
(?>=) :: (Ord x, Show x) => x -> x -> Test

-- | Attach a title to a test.
--   
--   This title is an arbitrary human-readable label. It is recorded in
--   relation to the test, but has no other function.
title :: String -> Test -> Test

-- | Attach an argument value note.
--   
--   The <a>String</a> is the argument name, and the <tt>x</tt> is that
--   argument's value, which must implement <a>show</a>.
argument :: Show x => String -> x -> Test -> Test

-- | Attach an argument value note.
--   
--   The first <a>String</a> is the argument name, and the second is some
--   suitable textual representation of that argument's value.
argument_ :: String -> String -> Test -> Test

-- | Note down a temporary intermediate value computed in the process of
--   constructing a test.
--   
--   The <a>String</a> is a name for this value, and the <tt>x</tt> is the
--   value itself, which must implement <a>show</a>.
temporary :: Show x => String -> x -> Test -> Test

-- | Note down a temporary intermediate value computed in the process of
--   constructing a test.
--   
--   The first <a>String</a> is the temporary name, and the second is some
--   suitable textual representation of the temporary's value.
temporary_ :: String -> String -> Test -> Test

-- | Add a textual note to the test log.
note :: String -> Test -> Test

-- | Create a <a>Test</a> from an <a>IO</a> action that returns a
--   <a>Bool</a>.
--   
--   The test passes if the value returned is <a>True</a>. The test fails
--   if the value returned is <a>False</a>, or if an uncaught exception
--   escapes.
testIO :: IO Bool -> Test

-- | Create a <a>Test</a> from an <a>IO</a> action with seperate set-up and
--   clean-up phases.
--   
--   The first argument is a set-up action. This might be used to
--   initialise mutable storage or create disk structures, or just to open
--   some handles. Its result is passed to the second argument, which then
--   does the actual test propper. Finally, the third argument is run
--   (again with the set-up result as argument) to do any post-test
--   clean-up operations required. Its result is discarded.
--   
--   If any of these <a>IO</a> actions throw an exception, the test is
--   marked failed. Note that if the set-up action throws an exception, the
--   test and clean-up actions are not run. (If only the main test action
--   throws an exception, the clean-up is still run.)
testIO3 :: IO x -> (x -> IO Bool) -> (x -> IO y) -> Test

-- | Test for exceptions in the <a>IO</a> monad.
--   
--   Ordinarily, any test which throws an exception is deemed to have
--   failed. However, this test <i>passes</i> if evaluating the action's
--   result to WHNF causes an exception to be thrown. The test <i>fails</i>
--   if no exception is thrown.
--   
--   This can be useful for checking that a function rejects invalid input
--   by throwing an exception, or that invalid I/O operations are reported.
--   (Of course, you cannot check that the <i>correct</i> exception is
--   thrown!)
--   
--   Note that the <a>IO</a> action is run <i>and</i> its result is reduced
--   (to WHNF only). Note also that infinite loops are not exceptions
--   (unless the loop exhausts some resource).
--   
--   If no exception is thrown, the actual value returned is not recorded.
--   See <a>throwsIO</a> for a function which does record this information.
--   (This requires adding a <a>Show</a> constraint.)
throws_IO :: IO x -> Test

-- | Test for exceptions in the <a>IO</a> monad.
--   
--   Ordinarily, any test which throws an exception is deemed to have
--   failed. However, this test <i>passes</i> if evaluating the action's
--   result to WHNF causes an exception to be thrown. The test <i>fails</i>
--   if no exception is thrown.
--   
--   This can be useful for checking that a function rejects invalid input
--   by throwing an exception, or that invalid I/O operations are reported.
--   (Of course, you cannot check that the <i>correct</i> exception is
--   thrown!)
--   
--   Note that the <a>IO</a> action is run <i>and</i> its result is reduced
--   (to WHNF only). Note also that infinite loops are not exceptions
--   (unless the loop exhausts some resource).
--   
--   If no exception is thrown, the actual value returned is recorded. This
--   requires adding a <a>Show</a> constraint; see <a>throws_IO</a> for a
--   function without this constraint.
throwsIO :: Show x => IO x -> Test

-- | The test monad.
--   
--   Notice the <a>MonadIO</a> instance. This allows you to call
--   <a>liftIO</a> to perform arbitrary <a>IO</a> actions at any point
--   within the test monad.
data TestM x

-- | Create a <a>Test</a> from a <a>TestM</a> action.
--   
--   The test passes if the <a>TestM</a> action returns <a>True</a>. The
--   test fails if it returns <a>False</a> or an uncaught exception
--   escapes.
testM :: TestM Bool -> Test

-- | Check a <a>TestM</a> action for exceptions.
--   
--   Ordinarily, any test which throws an exception is deemed to have
--   failed. However, this test <i>passes</i> if evaluating the action's
--   result to WHNF causes an exception to be thrown. The test <i>fails</i>
--   if no exception is thrown.
--   
--   This can be useful for checking that a function rejects invalid input
--   by throwing an exception, or that invalid I/O operations are reported.
--   (Of course, you cannot check that the <i>correct</i> exception is
--   thrown!)
--   
--   Note that the <a>TestM</a> action is run <i>and</i> its result is
--   reduced (to WHNF only). Note also that infinite loops are not
--   exceptions (unless the loop exhausts some resource).
--   
--   If no exception is thrown, the actual value returned is not recorded.
--   See <a>throwsM</a> for a function that does record the value. This
--   requires adding a <a>Show</a> constraint.
throws_M :: TestM x -> Test

-- | Check a <a>TestM</a> action for exceptions.
--   
--   Ordinarily, any test which throws an exception is deemed to have
--   failed. However, this test <i>passes</i> if evaluating the action's
--   result to WHNF causes an exception to be thrown. The test <i>fails</i>
--   if no exception is thrown.
--   
--   This can be useful for checking that a function rejects invalid input
--   by throwing an exception, or that invalid I/O operations are reported.
--   (Of course, you cannot check that the <i>correct</i> exception is
--   thrown!)
--   
--   Note that the <a>TestM</a> action is run <i>and</i> its result is
--   reduced (to WHNF only). Note also that infinite loops are not
--   exceptions (unless the loop exhausts some resource).
--   
--   If no exception is thrown, the actual value returns is recorded. This
--   requires adding a <a>Show</a> constraint. See <a>throws_M</a> for a
--   function without this constraint.
throwsM :: Show x => TestM x -> Test

-- | Mark the current test as "inapplicable" and return <a>True</a>. (See
--   <a>inapplicable</a>.)
inapplicableM :: TestM Bool

-- | Note down a temporary intermediate value computed in the process of
--   constructing a test.
--   
--   The <a>String</a> is a name for this value, and the <tt>x</tt> is the
--   value itself, which must implement <a>show</a>.
temporaryM :: Show x => String -> x -> TestM ()

-- | Note down a temporary intermediate value computed in the process of
--   constructing a test.
--   
--   The first <a>String</a> is the name, and the second is some suitable
--   textual representation of the value.
temporaryM_ :: String -> String -> TestM ()

-- | Add a textual note to the log file.
noteM :: String -> TestM ()

-- | Combine multiple tests into a single composite test.
--   
--   The composite test fails if any of its constituent tests fail. Whether
--   the remaining tests are run depends on the testing mode (the
--   <a>cfg_FailAbort</a> parameter in <a>TestConfig</a>).
--   
--   Essentially, this takes the logical-AND of several tests. You can
--   achieve the same result using the normal <a>&amp;&amp;</a> operator or
--   the <a>and</a> function, operating on plain <a>Bool</a> values rather
--   than <a>Test</a> objects. However, by turning subexpressions into
--   <a>Test</a> objects and using <a>tests</a>, the result of each
--   subexpression will be logged to file in addition to the overall
--   result. Depending on the context, that may or may not be helpful. You
--   decide which you want.
tests :: [Test] -> Test

-- | Create a composite test which passes if at least one child test
--   passes.
--   
--   All child tests are always run, regardless of error reporting mode. No
--   test failures are reported, unless all children fail.
--   
--   Essentially, this takes the logical-OR of several tests. You can
--   achieve the same result using the normal <a>||</a> operator or the
--   <a>or</a> function, operating on plain <a>Bool</a> values rather than
--   <a>Test</a> objects. However, by turning subexpressions into
--   <a>Test</a> objects and using <a>alternatives</a>, the result of each
--   subexpression will be logged to file in addition to the overall
--   result. Depending on the context, that may or may not be helpful. You
--   decide which you want.
alternatives :: [Test] -> Test

-- | Execute a test.
--   
--   Ordinarily, "the test" will be a composite test created with
--   <a>tests</a>, and will actually contain multiple sub-tests within it.
--   
--   A <a>Bool</a> value is returned indicating whether the test was
--   successful or not. Test progress information is printed to
--   <a>stdout</a>. If any test fails, detailed information for that test
--   is printed to <a>stdout</a>, and testing aborts.
--   
--   For more control, see <a>run_test_full</a>.
run_test :: Test -> IO Bool

-- | Execute a test.
--   
--   Ordinarily, "the test" will be a composite test created with
--   <a>tests</a>, and will actually contain multiple sub-tests within it.
--   
--   A <a>Bool</a> value is returned indicating whether the test was
--   successful or not. Test progress information is printed to
--   <a>stdout</a>. Various testing options can be configured using the
--   <a>TestConfig</a> argument. In particular, it is possible to log
--   detailed testing data to an XML log file (the <a>cfg_LogFile</a>
--   parameter).
--   
--   The related <a>run_test</a> function runs a test with the
--   <a>default_config</a> test settings, which are useful for quick
--   interactive testing during a debugging session.
run_test_full :: TestConfig -> Test -> IO Bool

-- | Configuration settings for a test run.
data TestConfig
TestConfig :: Maybe FilePath -> Maybe String -> Bool -> Bool -> TestConfig

-- | If <a>Nothing</a>, no log file is produced. Otherwise, this is the
--   full path to the XML log file.
cfg_LogFile :: TestConfig -> Maybe FilePath

-- | Path to an XSL file. If given, the XML log file will use this XSL as a
--   stylesheet. This value is ignored if no XML log is produced.
cfg_LogXSL :: TestConfig -> Maybe String

-- | If <a>True</a>, report test failures to <a>stdout</a>. If
--   <a>False</a>, just report test progress to <a>stdout</a>.
cfg_FailReport :: TestConfig -> Bool

-- | If <a>True</a>, abort testing if a test fails, otherwise continue
--   testing. (In other words, <a>False</a> causes <i>all</i> tests to be
--   run, regardless of test failures, while <a>True</a> runs until a test
--   fails and then stops.)
cfg_FailAbort :: TestConfig -> Bool

-- | The default test configuration, as used by <a>run_test</a>.
--   
--   <pre>
--   cfg_LogFile    = Nothing
--   cfg_LogXSL     = Nothing
--   cfg_FailReport = True
--   cfg_FailAbort  = True
--   </pre>
--   
--   You can use this as a starting point if you only want to customise a
--   few test settings. (More options may be added in future.)
default_config :: TestConfig
instance MonadIO TestM
instance Monad TestM


-- | Properties for testing that instances of the <a>Eq</a> class perform
--   correctly.
--   
--   <a>p_reflexive</a>, <a>p_symmetric</a> and <a>p_transitive</a> check
--   the basic properties of an equity relation. In other words, they test
--   the <a>==</a> method. <a>p_not_equal</a> checks for the
--   extraordinarily unlikely case of <a>==</a> and <a>/=</a> not agreeing
--   on equity. (The default implementation of <a>/=</a> automatically
--   guarantees that this test will pass, and that's what most people
--   presumably use.)
module Test.AC.Class.Eq

-- | Check that <tt>x == x</tt>.
p_reflexive :: (Show x, Eq x) => x -> Test

-- | Check that if <tt>x == y</tt> then <tt>y == x</tt> as well.
p_symmetric :: (Show x, Eq x) => x -> x -> Test

-- | Check that if <tt>x == y</tt> and <tt>y == z</tt> then <tt>x ==
--   z</tt>.
p_transitive :: (Show x, Eq x) => x -> x -> x -> Test

-- | Check that <tt>x /= y</tt> is the same as <tt>not (x == y)</tt>.
p_not_equal :: (Show x, Eq x) => x -> x -> Test

-- | Given a list of <i>distinct</i> values, perform all applicable tests
--   on all possible combinations of inputs. (If the inputs are not
--   distinct, some redundant tests are performed.)
p_Eq :: (Show x, Eq x) => [x] -> Test


-- | Properties for testing that instances of the <a>Ord</a> class perform
--   correctly.
--   
--   <a>p_symmetric</a> and <a>p_transitive</a> check the basic properties
--   of the ordering. In other words, they test the <a>compare</a> method.
--   <a>p_equal</a> checks that <a>Ord</a> agrees with <a>Eq</a> (that is,
--   <a>compare</a> returns <a>EQ</a> when <a>==</a> returns <a>True</a>).
--   The <a>Test.AC.Class.Eq</a> module already checks that <a>Eq</a> is
--   reflexive, so if <a>Ord</a> agrees with <a>Eq</a> then <a>Ord</a> too
--   is reflexive, and we don't need a seperate test for that. The
--   remaining tests (i.e., <a>p_compare</a>, <a>p_min</a> and
--   <a>p_max</a>) check for the extraordinarily unlikely case that the
--   various <a>Ord</a> methods do not agree with each other. (Usually they
--   are implemented in terms of each other.)
module Test.AC.Class.Ord

-- | Check that <a>compare</a> agrees with <a>==</a> on equity.
p_equal :: (Show x, Ord x) => x -> x -> Test

-- | Check that swapping the arguments to <a>compare</a> works correctly.
p_symmetric :: (Show x, Ord x) => x -> x -> Test

-- | Check that if <tt>x &lt; y</tt> and <tt>y &lt; z</tt> then <tt>x &lt;
--   z</tt>.
p_transitive :: (Show x, Ord x) => x -> x -> x -> Test

-- | Check that <a>compare</a> agrees with <a>&gt;</a>, <a>&lt;</a>, etc.
p_compare :: (Show x, Ord x) => x -> x -> Test

-- | Check that <a>min</a> works correctly.
p_min :: (Show x, Ord x) => x -> x -> Test

-- | Check that <a>max</a> works correctly.
p_max :: (Show x, Ord x) => x -> x -> Test

-- | Given a list of <i>distinct</i> values, perform all applicable tests
--   on all possible combinations of inputs. (If the inputs are not
--   distinct, some redundant tests are performed.)
p_Ord :: (Show x, Ord x) => [x] -> Test


-- | Defines the <a>Label</a> type, for making values <a>show</a>able.
module Test.AC.Label

-- | The <tt>Label</tt> type.
--   
--   A value of type <tt>Label x</tt> is really a value of type <tt>x</tt>,
--   but with a textual label. The <a>Show</a> instance returns this label.
--   
--   This can be tremendously useful for allowing you to <a>show</a> values
--   which would not otherwise be printable. For example, functions. Rather
--   than passing a function, you can pass a labelled function. This allows
--   you to know, at runtime, <i>which</i> function you're dealing with,
--   which is very useful for test purposes.
--   
--   You can use <a>label</a> to extract the label text, and <a>value</a>
--   to extract the actual data value.
--   
--   The <a>Show</a> instance uses the <a>label</a>, but the other
--   instances use only the <a>value</a>, ignoring the <a>label</a>. (In
--   particular, any operations which alter the <a>value</a> leave the
--   <a>label</a> untouched.)
data Label x
Label :: String -> !x -> Label x
label :: Label x -> String
value :: Label x -> !x

-- | This type is similar to <a>Label</a>. However, <a>Label</a> cannot be
--   made an instance of higher-kinded classes such as <a>Functor</a> and
--   <a>Monad</a>. This type gets around that irritating limitation.
data Label1 c x1
Label1 :: String -> c x1 -> Label1 c x1
label1 :: Label1 c x1 -> String
value1 :: Label1 c x1 -> c x1
instance Monad c => Monad (Label1 c)
instance Functor c => Functor (Label1 c)
instance Show (Label1 c x1)
instance Bounded (c x1) => Bounded (Label1 c x1)
instance Enum (c x1) => Enum (Label1 c x1)
instance Ord (c x1) => Ord (Label1 c x1)
instance Eq (c x1) => Eq (Label1 c x1)
instance Show (Label x)
instance Bounded x => Bounded (Label x)
instance Enum x => Enum (Label x)
instance Ord x => Ord (Label x)
instance Eq x => Eq (Label x)


-- | Properties for testing that instances of the <a>Functor</a> class
--   perform correctly.
--   
--   This testing requires an <a>Eq</a> instance, which not all
--   <a>Functor</a>s actually have. It also requires a <a>Show</a>
--   instance, which is also uncommon. The <a>Label1</a> wrapper may be
--   useful in dealing with the <a>Show</a> requirement.
--   
--   Tests are supplied both in regular "unlabelled" form, and also in a
--   special "labelled" form, where function objects have <a>Label</a>s
--   attached to them. Because of this, the function used for each test can
--   be recorded in the test log, which can be quite helpful.
module Test.AC.Class.Functor

-- | Check that <tt><a>fmap</a> <a>id</a> <a>==</a> <a>id</a></tt>.
p_map_id :: (Functor f, Eq (f x), Show (f x)) => f x -> Test

-- | Check that <tt><a>fmap</a> (f <a>.</a> g) <a>==</a> <a>fmap</a>
--   <tt>f</tt> <a>.</a> <a>fmap</a> g</tt>.
p_map_compose :: (Functor f, Eq (f z), Show (f x), Show (f y), Show (f z)) => f x -> (x -> y) -> (y -> z) -> Test

-- | Given a list of <i>distinct</i> <a>Functor</a> values and functions,
--   perform all tests on all combinations of inputs. (If the inputs are
--   not distinct, some redundant tests will be performed.)
--   
--   The argument types are somewhat constrained to keep the type signature
--   reasonably simple.
p_Functor :: (Functor f, Eq (f x), Show (f x)) => [f x] -> [x -> x] -> Test

-- | Check that <tt><a>fmap</a> (f <a>.</a> g) <a>==</a> <a>fmap</a>
--   <tt>f</tt> <a>.</a> <a>fmap</a> g</tt>.
p_map_compose_L :: (Functor f, Eq (f z), Show (f x), Show (f y), Show (f z)) => f x -> Label (x -> y) -> Label (y -> z) -> Test

-- | Given a list of <i>distinct</i> <a>Functor</a> values and functions,
--   perform all tests on all combinations of inputs. (If the inputs are
--   not distinct, some redundant tests will be performed.)
--   
--   The argument types are somewhat constrained to keep the function's
--   type signature reasonably simple.
p_Functor_L :: (Functor f, Eq (f x), Show (f x)) => [f x] -> [Label (x -> x)] -> Test


-- | Properties for testing that instances of the <a>Monad</a> class
--   perform correctly.
--   
--   This testing requires an <a>Eq</a> instance, which not all
--   <a>Monad</a>s actually have. It also requires a <a>Show</a> instance,
--   which is also uncommon. The <a>Label1</a> wrapper may be useful in
--   dealing with the <a>Show</a> requirement.
--   
--   Tests are supplied both in regular "unlabelled" form, and also in a
--   special "labelled" form, where function objects have <a>Label</a>s
--   attached to them. Because of this, the function used for each test can
--   be recorded in the test log, which can be quite helpful.
module Test.AC.Class.Monad

-- | Check that <tt>return x &gt;&gt;= f <a>==</a> f x</tt>.
p_return_bind :: (Monad m, Eq (m y), Show x, Show (m x), Show (m y)) => x -> (x -> m y) -> Test

-- | Check that <tt>mx &gt;&gt;= return <a>==</a> mx</tt>.
p_bind_return :: (Monad m, Eq (m x), Show (m x)) => m x -> Test

-- | Check that <a>&gt;&gt;=</a> is associative.
--   
--   Approximately, <tt>mx &gt;&gt;= (f &gt;&gt;= g) <a>==</a> (mx
--   &gt;&gt;= f) &gt;&gt;= g</tt>, but that doesn't type-check. To be
--   exact, <tt>mx &gt;&gt;= (\ x -&gt; f x &gt;&gt;= g) <a>==</a> (mx
--   &gt;&gt;= f) &gt;&gt;= g</tt>.
p_bind_associative :: (Monad m, Eq (m z), Show (m x), Show (m y), Show (m z)) => m x -> (x -> m y) -> (y -> m z) -> Test

-- | Given a list of <i>distinct</i> inputs, run all applicable
--   <a>Monad</a> tests on all combinations of inputs. (If the inputs are
--   not distinct, some redundant tests will be performed.)
--   
--   The argument types have been constrainted a bit to keep the function's
--   type signature reasonably simple.
p_Monad :: (Monad m, Eq (m x), Show x, Show (m x)) => [x] -> [x -> m x] -> [m x] -> Test

-- | Check that <tt>fmap f mx <a>==</a> mx &gt;&gt;= return . f</tt>.
p_Functor_Monad :: (Functor m, Monad m, Eq (m y), Show (m x), Show (m y)) => m x -> (x -> y) -> Test

-- | Check that <tt>return x &gt;&gt;= f <a>==</a> f x</tt>.
p_return_bind_L :: (Monad m, Eq (m y), Show x, Show (m x), Show (m y)) => x -> Label (x -> m y) -> Test

-- | Check that <a>&gt;&gt;=</a> is associative.
--   
--   Approximately, <tt>mx &gt;&gt;= (f &gt;&gt;= g) <a>==</a> (mx
--   &gt;&gt;= f) &gt;&gt;= g</tt>, but that doesn't type-check. To be
--   exact, <tt>mx &gt;&gt;= (\ x -&gt; f x &gt;&gt;= g) <a>==</a> (mx
--   &gt;&gt;= f) &gt;&gt;= g</tt>.
p_bind_associative_L :: (Monad m, Eq (m z), Show (m x), Show (m y), Show (m z)) => m x -> Label (x -> m y) -> Label (y -> m z) -> Test

-- | Given a list of <i>distinct</i> inputs, run all applicable
--   <a>Monad</a> tests on all combinations of inputs. (If the inputs are
--   not distinct, some redundant tests will be performed.)
--   
--   The argument types have been constrainted a bit to keep the function's
--   type signature reasonably simple.
p_Monad_L :: (Monad m, Eq (m x), Show x, Show (m x)) => [x] -> [Label (x -> m x)] -> [m x] -> Test

-- | Check that <tt>fmap f mx <a>==</a> mx &gt;&gt;= return . f</tt>.
p_Functor_Monad_L :: (Functor m, Monad m, Eq (m y), Show (m x), Show (m y)) => m x -> Label (x -> y) -> Test
