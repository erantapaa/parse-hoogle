-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | mysql backend for sql-simple
--   
--   mysql backend for sql-simple
@package sql-simple-mysql
@version 0.3.0

module Database.Sql.Simple.MySQL
data MySQL
MySQL :: Connection -> MySQL
mySQL :: Proxy '[MySQL]
class QueryResults a => QueryResultsN a
queryLength :: QueryResultsN a => proxy a -> Int
instance Typeable MySQL
instance Eq (ConnectInfo MySQL)
instance Read (ConnectInfo MySQL)
instance Show (ConnectInfo MySQL)
instance Default (ConnectInfo MySQL)
instance Transaction MySQL
instance Backend MySQL
instance (QueryResultsN a, QueryResultsN b) => QueryResults (a :. b)
instance (QueryResultsN a, QueryResultsN b) => QueryResultsN (a :. b)
instance (Result a, Result b, Result c, Result d, Result e, Result f, Result g, Result h, Result i, Result j) => QueryResultsN (a, b, c, d, e, f, g, h, i, j)
instance (Result a, Result b, Result c, Result d, Result e, Result f, Result g, Result h, Result i) => QueryResultsN (a, b, c, d, e, f, g, h, i)
instance (Result a, Result b, Result c, Result d, Result e, Result f, Result g, Result h) => QueryResultsN (a, b, c, d, e, f, g, h)
instance (Result a, Result b, Result c, Result d, Result e, Result f, Result g) => QueryResultsN (a, b, c, d, e, f, g)
instance (Result a, Result b, Result c, Result d, Result e, Result f) => QueryResultsN (a, b, c, d, e, f)
instance (Result a, Result b, Result c, Result d, Result e) => QueryResultsN (a, b, c, d, e)
instance (Result a, Result b, Result c, Result d) => QueryResultsN (a, b, c, d)
instance (Result a, Result b, Result c) => QueryResultsN (a, b, c)
instance (Result a, Result b) => QueryResultsN (a, b)
instance Result a => QueryResultsN (Only a)
instance (QueryParams a, QueryParams b) => QueryParams (a :. b)
instance Result a => QueryResults (Only a)
instance Param a => QueryParams (Only a)
