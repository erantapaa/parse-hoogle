-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Quote arguments to be passed through the Unix shell
--   
--   This library provides functions to wrap a <tt>String</tt> so it can be
--   used within a Unix shell command line, and end up as a single argument
--   to the program invoked.
--   
--   The module <tt>System.Posix.Escape</tt> is the safer option. The
--   module <tt>System.Posix.Escape.Unicode</tt> has extra caveats which
--   are documented with that module.
--   
--   There is a similar function within the <tt>process</tt> package as
--   <tt>System.Process.Internals.translate</tt>.
@package posix-escape
@version 0.1


-- | Quote Unicode arguments to be passed through the Unix shell.
--   
--   If you are escaping ASCII-only strings, use
--   <tt>System.Posix.Escape</tt> as a safer alternative.
--   
--   If you are escaping untrusted input, you must guarantee that the
--   Unicode characters of the escaped <tt>String</tt> will be serialized
--   using the character encoding expected by <tt>/bin/sh</tt>.
--   
--   Some software incorrectly interprets characters as bytes, and will use
--   only the low 8 bits of each Unicode code point. This includes version
--   1.0 of the Haskell <tt>process</tt> package, which is bundled with GHC
--   7.0. Under such circumstances this module <i>will not</i> prevent
--   malicious input from escaping the quotation.
--   
--   This bug was fixed in <tt>process-1.1</tt>, which ships with GHC 7.2:
--   
--   <ul>
--   <li><a>http://hackage.haskell.org/trac/ghc/ticket/4006</a></li>
--   <li><a>http://hackage.haskell.org/trac/ghc/ticket/1414</a></li>
--   </ul>
--   
--   To repeat: Escaping untrusted input using this module and passing it
--   to the <tt>process</tt> package in GHC 7.0 is NOT SAFE and can allow
--   MALICIOUS CODE EXECUTION. Use <tt>System.Posix.Escape</tt> as a safer
--   alternative.
module System.Posix.Escape.Unicode

-- | Wrap a <tt>String</tt> so it can be used within a Unix shell command
--   line, and end up as a single argument to the program invoked.
escape :: String -> String

-- | Wrap some <tt>String</tt>s as separate arguments, by inserting spaces
--   before and after each. This will break if, for example, prefixed with
--   a backslash.
escapeMany :: [String] -> String


-- | Quote ASCII arguments to be passed through the Unix shell.
--   
--   For safety, these functions drop all non-ASCII characters.
module System.Posix.Escape

-- | Wrap a <tt>String</tt> so it can be used within a Unix shell command
--   line, and end up as a single argument to the program invoked.
escape :: String -> String

-- | Wrap some <tt>String</tt>s as separate arguments, by inserting spaces
--   before and after each. This will break if, for example, prefixed with
--   a backslash.
escapeMany :: [String] -> String
