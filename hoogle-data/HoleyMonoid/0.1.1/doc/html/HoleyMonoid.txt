-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monoids with holes.
--   
@package HoleyMonoid
@version 0.1.1


-- | Monoids with holes. The <a>HoleyMonoid</a> allows building monoidal
--   values of which certain components are to be filled in later. For
--   example:
--   
--   <pre>
--   &gt; let holey :: (Show a, Show b) =&gt; HoleyMonoid String r (a -&gt; b -&gt; r)
--         holey = now "x = " . later show . now ", y = " . later show
--   
--   &gt; run holey 3 5
--   "x = 3, y = 5"
--   </pre>
--   
--   This module is intended to be imported in qualified fashion, e.g.
--   
--   <pre>
--   import qualified Data.HoleyMonoid as HM
--   </pre>
module Data.HoleyMonoid

-- | The type of a monoid with holes. The underlying monoid is represented
--   by type parameter <tt>m</tt>. The <tt>r</tt> is the result type and
--   stays polymorphic until the very last moment when <a>run</a> is
--   called. The last argument <tt>a</tt> is always a function with zero or
--   more arguments, finally resulting in <tt>r</tt>. Ordering the
--   arguments in this order allows holey monoids to be composed using
--   <a>.</a>, stacking the expected arguments. Note that the <a>Monoid</a>
--   constraint is only used in the identity <a>HoleyMonoid</a> and in
--   composing two <a>HoleyMonoid</a>s.
newtype HoleyMonoid m r a
HoleyMonoid :: ((m -> r) -> a) -> HoleyMonoid m r a
runHM :: HoleyMonoid m r a -> (m -> r) -> a

-- | Run the computation, resulting in a function that still expects some
--   arguments. The number of arguments that is still expected will be
--   equal to the number of <a>later</a>s the computation is built of.
run :: HoleyMonoid m m a -> a

-- | Insert a constant monoidal value.
now :: m -> HoleyMonoid m r r

-- | Insert a monoidal value that is not specified until the computation is
--   <a>run</a>. The argument that is expected later is converted to the
--   monoid type using the given conversion function.
later :: (a -> m) -> HoleyMonoid m r (a -> r)

-- | Monadic indexed bind on the underlying <a>Monoid</a> types.
bind :: HoleyMonoid m b c -> (m -> HoleyMonoid n a b) -> HoleyMonoid n a c

-- | Map between underlying <a>Monoid</a> types.
map :: (m -> n) -> HoleyMonoid m r a -> HoleyMonoid n r a
instance Monad (HoleyMonoid m r)
instance Applicative (HoleyMonoid m r)
instance Functor (HoleyMonoid m r)
instance Monoid m => Category (HoleyMonoid m)
