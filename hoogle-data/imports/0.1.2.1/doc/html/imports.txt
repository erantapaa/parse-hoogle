-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate code for importing directories automatically
--   
--   This module helps to automatically generate code for importing all the
--   haskell files from directories.
--   
--   <h1>Synopsis</h1>
--   
--   For <a>cabal</a> inited project, we customize <tt>Setup.hs</tt> file
--   to generate the importing code.
--   
--   <ul>
--   <li>Be sure to modify the <tt>build-type</tt> field in the
--   <tt>.cabal</tt> file from <tt>Simple</tt> to <tt>Custom</tt>.</li>
--   <li>Then modify the <tt>main</tt> function in <tt>Setup.hs</tt> to
--   generate importing code by either header file or a module file.</li>
--   </ul>
--   
--   Setup.hs:
--   
--   <pre>
--   import Distribution.Simple
--   import System.Imports (writeImportsHeader, writeImportsModule)
--   
--   main = do
--     writeImportsHeader "imports.header" "Export" "Some.Where" "Some/Where"
--     -- or
--     writeImportsModule "ImportAll.hs" "ImportAll" "Some.Where" "Some/Where"
--   
--     defaultMain
--   </pre>
--   
--   Target.hs: (by header)
--   
--   <pre>
--   {-# LANGUAGE CPP #-}
--   module Target where
--   
--   #include "imports.header"
--   
--   func = Export.funcFromSomeWhere
--   </pre>
--   
--   Target.hs: (by module)
--   
--   <pre>
--   module Target where
--   
--   import qualified ImportAll
--   
--   func = ImportAll.funcFromSomeWhere
--   </pre>
@package imports
@version 0.1.2.1


-- | This module helps to automatically generate code for importing all the
--   haskell files from directories.
--   
--   <h1>Synopsis</h1>
--   
--   For <a>cabal</a> inited project, we customize <tt>Setup.hs</tt> file
--   to generate the importing code.
--   
--   <ul>
--   <li>Be sure to modify the <tt>build-type</tt> field in the
--   <tt>.cabal</tt> file from <tt>Simple</tt> to <tt>Custom</tt>.</li>
--   <li>Then modify the <tt>main</tt> function in <tt>Setup.hs</tt> to
--   generate importing code by either header file or a module
--   file.Setup.hs:<pre>import Distribution.Simple import System.Imports
--   (writeImportsHeader, writeImportsModule) main = do writeImportsHeader
--   "imports.header" "Export" "Some.Where" "Some/Where" -- or
--   writeImportsModule "ImportAll.hs" "ImportAll" "Some.Where"
--   "Some/Where" defaultMain</pre>Target.hs: (by header)<pre> {-# LANGUAGE
--   CPP #-} module Target where #include "imports.header" func =
--   Export.funcFromSomeWhere </pre>Target.hs: (by module)<pre> module
--   Target where import qualified ImportAll func =
--   ImportAll.funcFromSomeWhere </pre></li>
--   </ul>
module System.Imports
type Predictor = FilePath -> IO Bool

-- | The default predictor will skip files or directories whose names are
--   beginned with '.' or '_'. And it will take only files whose extension
--   are ".hs" or ".lhs"
defaultPred :: Predictor
searchImportsWith :: Predictor -> FilePath -> IO [String]
searchImports :: FilePath -> IO [String]
importsContentWith :: Predictor -> String -> [(String, FilePath)] -> IO String
importsContent :: String -> [(String, FilePath)] -> IO String
writeMultiImportsHeaderWith :: Predictor -> FilePath -> String -> [(String, FilePath)] -> IO ()
writeMultiImportsHeader :: FilePath -> String -> [(String, FilePath)] -> IO ()
writeImportsHeaderWith :: Predictor -> FilePath -> String -> String -> FilePath -> IO ()
writeImportsHeader :: FilePath -> String -> String -> FilePath -> IO ()
writeMultiImportsModuleWith :: Predictor -> FilePath -> String -> [(String, FilePath)] -> IO ()
writeMultiImportsModule :: FilePath -> String -> [(String, FilePath)] -> IO ()
writeImportsModuleWith :: Predictor -> FilePath -> String -> String -> FilePath -> IO ()
writeImportsModule :: FilePath -> String -> String -> FilePath -> IO ()
