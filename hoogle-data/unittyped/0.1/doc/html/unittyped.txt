-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An extendable library for type-safe computations including units.
--   
--   UnitTyped is a Haskell library that makes it possible to do
--   computations on values with a dimension and a unit. The typechecker
--   ensures that all operations are using the proper dimensions, and all
--   units can be converted to compatible units automatically. New
--   dimensions and units can be defined from other modules, requiring just
--   a data type and one class instance to work with everything else. The
--   library comes with all SI dimensions and units, and many units derived
--   from those.
@package unittyped
@version 0.1


-- | Module defining values with dimensions and units, and mathematical
--   operations on those.
module UnitTyped

-- | Convertable is a class that models the fact that the unit <tt>b</tt>
--   has dimension <tt>a</tt> (of kind <a>UnitMap</a>).
class Convertable (a :: UnitMap) b | b -> a
factor :: (Convertable a b, Fractional f) => Value f a b -> f
showunit :: (Convertable a b, Fractional f) => Bool -> Value f a b -> String

-- | A value tagged with its dimension b and unit c.
data Value a (b :: UnitMap) c
Value :: a -> Value a c

-- | A unit representing the multplication of the units b and d.
data Mul b d

-- | A unit representing the division of the units b by d.
data Div b d

-- | This is for dimensionless values.
type NoDimension = UnitNil

-- | One thing.
data Count

-- | This is meant to be use as a datatype promoted to a kind. It
--   represents a map of dimensions to type level integers. If two maps are
--   equal, then the dimension they represent is the same.
data UnitMap
UnitNil :: UnitMap
UnitCons :: a -> Number -> UnitMap -> UnitMap

-- | Type level natural numbers (excluding zero, though).
data Nat
One :: Nat
Suc :: Nat -> Nat

-- | Type level integers.
data Number
Zero :: Number
Neg :: Nat -> Number
Pos :: Nat -> Number

-- | States that merging the first map with the second map produces the
--   third argument. Merging happens by summing the two values for the same
--   key. Typically, dimensions are merged when multiplicing two values.
class UnitMerge (map1 :: UnitMap) (map2 :: UnitMap) (rest :: UnitMap) | map1 map2 -> rest

-- | <tt>b</tt> is equal to <a>True</a> if and only if <tt>map1</tt> and
--   <tt>map2</tt> represent the same dimension.
class UnitEq (map1 :: UnitMap) (map2 :: UnitMap) (b :: Bool) | map1 map2 -> b

-- | States that <tt>rest</tt> is the same dimension as <tt>map1</tt>, but
--   all integers inverted. Used for division.
class UnitNeg (map1 :: UnitMap) (rest :: UnitMap) | map1 -> rest

-- | Type level +1
type POne = Pos One

-- | Type level +2
type PTwo = Pos (Suc One)

-- | Type level +3
type PThree = Pos (Suc (Suc One))

-- | Type level +4
type PFour = Pos (Suc (Suc (Suc One)))

-- | Type level +5
type PFive = Pos (Suc (Suc (Suc (Suc One))))

-- | Type level +6
type PSix = Pos (Suc (Suc (Suc (Suc (Suc One)))))

-- | Type level -1
type NOne = Neg One

-- | Type level -2
type NTwo = Neg (Suc One)

-- | Type level -3
type NThree = Neg (Suc (Suc One))

-- | Type level -4
type NFour = Neg (Suc (Suc (Suc One)))

-- | <a>^</a> is not definable on <a>Value</a>s in general, as the result
--   depends on the exponent. However, we can use this class to raise a
--   unit to a type level <a>Number</a>.
class (Convertable a b, Convertable c d) => Pow a b (i :: Number) c d | a b -> c, a b -> d

-- | coerce something of a specific dimension into any other unit in the
--   same dimension. The second argument is only used for its type, but it
--   allows nice syntax like:
--   
--   <pre>
--   &gt;&gt;&gt; coerce (120 meter / second) (kilo meter / hour)
--   432.0 km/h
--   </pre>
coerce :: (Convertable a b, Convertable c d, Fractional f, UnitEq a c True) => Value f a b -> Value f c d -> Value f c d

-- | Shorthand for <a>coerce</a>.
as :: (Convertable a b, Convertable c d, Fractional f, UnitEq a c True) => Value f a b -> Value f c d -> Value f c d

-- | A wrapped value with scalar value 1.
one :: (Fractional f, Convertable a b) => Value f a b

-- | Create a new value with given scalar as value.
mkVal :: Fractional f => f -> Value f a b

-- | Obtain the value of a value wrapped in a type.
val :: Fractional f => Value f a b -> f

-- | Multiply two values, constructing a value with as dimension the
--   product of the dimensions, and as unit the multplication of the units.
(.*.) :: (Fractional f, Convertable a b, Convertable c d, UnitMerge a c u) => Value f a b -> Value f c d -> Value f u (Mul b d)

-- | Divide two values, constructing a value with as dimension the division
--   of the dimension of the lhs by the dimension of the rhs, and the same
--   for the units.
(./.) :: (Fractional f, Convertable a b, Convertable c d, UnitMerge a c' u, UnitNeg c c') => Value f a b -> Value f c d -> Value f u (Div b d)

-- | Add two values with matching dimensions. Units are automatically
--   resolved. The result will have the same unit as the lhs.
(.+.) :: (Fractional f, Convertable a b, Convertable c d, UnitEq c a True) => Value f a b -> Value f c d -> Value f a b

-- | Subtract two values with matching dimensions. Units are automatically
--   resolved. The result will have the same unit as the lhs.
(.-.) :: (Fractional f, Convertable a b, Convertable c d, UnitEq c a True) => Value f a b -> Value f c d -> Value f a b

-- | Multiply a unit by a scalar.
(.$.) :: (Convertable a b, Fractional f) => f -> Value f a b -> Value f a b

-- | Shorthand for <a>coerce</a>.
(~.) :: (Convertable a b, Convertable c d, Fractional f, UnitEq a c True) => Value f a b -> Value f c d -> Value f c d

-- | <a>==</a> for values. Only defined for values with rational contents.
--   Can be used on any two values with the same dimension.
(.==.) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool

-- | <a>&lt;=</a> on values. Only defined for values with rational
--   contents. Can be used on any two values with the same dimension.
(.<=.) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool

-- | <a>&lt;</a> on values. Only defined for values with rational contents.
--   Can be used on any two values with the same dimension.
(.<.) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool

-- | <a>&gt;=</a> on values. Only defined for values with rational
--   contents. Can be used on any two values with the same dimension.
(.>=.) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool

-- | <a>&gt;</a> on values. Only defined for values with rational contents.
--   Can be used on any two values with the same dimension.
(.>.) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool

-- | Calculate the square of a value. Identical to pow2, reads better on
--   units:
--   
--   <pre>
--   &gt;&gt;&gt; 100 . square meter `as` square yard
--   119.59900463010803 yd⋅yd⋅#
--   </pre>
square :: (Fractional f, Convertable a b, Pow a b PTwo c d) => Value f a b -> Value f c d

-- | Calculate the third power of a value. Identical to pow3, reads better
--   on units:
--   
--   <pre>
--   &gt;&gt;&gt; 1 . cubic inch `as` mili liter
--   16.387063999999995 mL
--   </pre>
cubic :: (Fractional f, Convertable a b, Pow a b PThree c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^(-3)</tt>.
pown3 :: (Fractional f, Convertable a b, Pow a b NThree c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^(-2)</tt>.
pown2 :: (Fractional f, Convertable a b, Pow a b NTwo c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^(-1)</tt>.
pown1 :: (Fractional f, Convertable a b, Pow a b NOne c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^0</tt>. Yes, this is always <tt>one :: Value f
--   NoDimension Count</tt>.
pow0 :: (Fractional f, Convertable a b, Pow a b Zero c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^1</tt>.
pow1 :: (Fractional f, Convertable a b, Pow a b POne c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^2</tt>.
pow2 :: (Fractional f, Convertable a b, Pow a b PTwo c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^3</tt>.
pow3 :: (Fractional f, Convertable a b, Pow a b PThree c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^4</tt>.
pow4 :: (Fractional f, Convertable a b, Pow a b PFour c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^5</tt>.
pow5 :: (Fractional f, Convertable a b, Pow a b PFive c d) => Value f a b -> Value f c d

-- | Calculate <tt>x^6</tt>.
pow6 :: (Fractional f, Convertable a b, Pow a b PSix c d) => Value f a b -> Value f c d
instance [overlap ok] Pow' () a b i c d => Pow a b i c d
instance [overlap ok] (Convertable a b, Convertable a'' b'', Pow' q a b i' a' b', Pre' ('Pos i) i', UnitMerge a a' a'', b'' ~ Mul b b') => Pow' q a b ('Pos i) a'' b''
instance [overlap ok] (Convertable a b, Convertable a'' b'', Pow' q a b i' a' b', UnitNeg a' a'', Negate ('Neg i) i', b'' ~ Div Count b') => Pow' q a b ('Neg i) a'' b''
instance [overlap ok] Convertable a b => Pow' () a b 'Zero 'UnitNil Count
instance [overlap ok] Convertable NoDimension Count
instance [overlap ok] (Fractional f, Show f, Convertable a b, Show b) => Show (Value f a b)
instance [overlap ok] Convertable a b => Show b
instance [overlap ok] (Convertable a b, Convertable c d, UnitMerge a c' u, UnitNeg c c') => Convertable u (Div b d)
instance [overlap ok] (Convertable a b, Convertable c d, UnitMerge a c u) => Convertable u (Mul b d)
instance [overlap ok] (UnitNeg map2 map2', UnitMerge map1 map2' sum, UnitNull sum b) => UnitEq map1 map2 b
instance [overlap ok] (UnitNull rest b', IsZero value b, And b b' result) => UnitNull ('UnitCons * unit value rest) result
instance [overlap ok] UnitNull 'UnitNil 'True
instance [overlap ok] (Negate value value', UnitNeg rest rest') => UnitNeg ('UnitCons * unit value rest) ('UnitCons * unit value' rest')
instance [overlap ok] UnitNeg 'UnitNil 'UnitNil
instance [overlap ok] (UnitMerge rest map2 rest2, UnitAppend unit value rest2 rec) => UnitMerge ('UnitCons * unit value rest) map2 rec
instance [overlap ok] UnitMerge 'UnitNil map2 map2
instance [overlap ok] UnitAppend' () unit value map rest => UnitAppend unit value map rest
instance [overlap ok] (UnitAppend' q unit value rest rest', value'' ~ value', unit'' ~ unit') => UnitAppend' q unit value ('UnitCons * unit' value' rest) ('UnitCons * unit'' value'' rest')
instance [overlap ok] Add value value' sum => UnitAppend' () unit value ('UnitCons * unit value' rest) ('UnitCons * unit sum rest)
instance [overlap ok] UnitAppend' q unit value 'UnitNil ('UnitCons * unit value 'UnitNil)
instance [overlap ok] And 'False 'False 'False
instance [overlap ok] And 'True 'False 'False
instance [overlap ok] And 'False 'True 'False
instance [overlap ok] And 'True 'True 'True
instance [overlap ok] IsZero ('Neg s) 'False
instance [overlap ok] IsZero ('Pos s) 'False
instance [overlap ok] IsZero 'Zero 'True
instance [overlap ok] Negate ('Neg a) ('Pos a)
instance [overlap ok] Negate ('Pos a) ('Neg a)
instance [overlap ok] Negate 'Zero 'Zero
instance [overlap ok] (Add ('Pos a) b sum, Suc' sum sump) => Add ('Pos ('Suc a)) b sump
instance [overlap ok] (Add ('Neg a) b sum, Pre' sum sump) => Add ('Neg ('Suc a)) b sump
instance [overlap ok] Pre' b b' => Add ('Neg 'One) b b'
instance [overlap ok] Suc' b b' => Add ('Pos 'One) b b'
instance [overlap ok] Add 'Zero b b
instance [overlap ok] Pre' ('Pos ('Suc a)) ('Pos a)
instance [overlap ok] Pre' ('Pos 'One) 'Zero
instance [overlap ok] Pre' ('Neg a) ('Neg ('Suc a))
instance [overlap ok] Pre' 'Zero ('Neg 'One)
instance [overlap ok] Suc' ('Neg ('Suc a)) ('Neg a)
instance [overlap ok] Suc' ('Neg 'One) 'Zero
instance [overlap ok] Suc' ('Pos a) ('Pos ('Suc a))
instance [overlap ok] Suc' 'Zero ('Pos 'One)


-- | Module definig all SI units and their dimensions.
module UnitTyped.SI

-- | Unit for moles. Officially, this is a SI unit, but we definite it in
--   terms of <a>Count</a>.
data Mole

-- | Dimension of length.
data Length

-- | The dimension defining <tt>Length^1</tt>.
type LengthDimension = UnitCons Length (Pos One) UnitNil

-- | The SI unit for <a>Length</a>: meter (m).
data Meter

-- | Dimension of time.
data Time

-- | The dimension defining <tt>Time^1</tt>.
type TimeDimension = UnitCons Time (Pos One) UnitNil

-- | The SI unit for <a>Time</a>: second (s).
data Second

-- | Dimension of mass.
data Mass

-- | The dimension defining <tt>Mass^1</tt>.
type MassDimension = UnitCons Mass (Pos One) UnitNil

-- | The SI unit for <a>Mass</a> is officially kilogram, but we define
--   grams (g) here, so <tt>kilo gram</tt> will work when using
--   <a>Meta</a>.
data Gram

-- | Dimension of temperature.
data Temperature

-- | The dimension defining <tt>Temperature^1</tt>.
type TemperatureDimension = UnitCons Temperature (Pos One) UnitNil

-- | The SI unit for <a>Temperature</a>: Kelvin (K).
data Kelvin

-- | Dimension of electric current.
data Current

-- | The dimension defining <tt>Current^1</tt>.
type CurrentDimension = UnitCons Current (Pos One) UnitNil

-- | The SI unit for <a>Current</a>: ampere (A).
data Ampere

-- | Dimension of luminous intensity.
data Luminous

-- | The dimension defining <tt>Luminous^1</tt>.
type LuminousDimension = UnitCons Luminous (Pos One) UnitNil

-- | The SI unit for <a>Luminous</a> intensity: candela (cd).
data Candela

-- | One thing (#).
count :: Fractional f => Value f NoDimension Count

-- | One mole (mol).
mole :: Fractional f => Value f NoDimension Mole

-- | One meter (m).
meter :: Fractional f => Value f LengthDimension Meter

-- | One second (s).
second :: Fractional f => Value f TimeDimension Second

-- | One gram (g).
gram :: Fractional f => Value f MassDimension Gram

-- | One Kelvin (K).
kelvin :: Fractional f => Value f TemperatureDimension Kelvin

-- | One ampere (A).
ampere :: Fractional f => Value f CurrentDimension Ampere

-- | One candela (cd).
candela :: Fractional f => Value f LuminousDimension Candela
instance [overlap ok] Convertable LuminousDimension Candela
instance [overlap ok] Convertable CurrentDimension Ampere
instance [overlap ok] Convertable TemperatureDimension Kelvin
instance [overlap ok] Convertable MassDimension Gram
instance [overlap ok] Convertable TimeDimension Second
instance [overlap ok] Convertable LengthDimension Meter
instance [overlap ok] Convertable NoDimension Mole


-- | A module with dimensionless units often used with SI.
module UnitTyped.SI.Derived.Count

-- | Percentage: 1% == 0.001
data Percentage

-- | Per mille: 1‰ == 0.001
data Permil

-- | Parts per million: 1 ppm == 0.1^6
data Ppm

-- | Parts per billion: 1 ppb == 0.1^9
data Ppb

-- | Parts per trillion: 1 ppt == 0.1^12
data Ppt

-- | Angles are dimensionless, these are radians (rad).
data Radian

-- | Angles are dimensionless, these are degrees (˚).
data Degree

-- | One percent (%).
percent :: Fractional f => Value f NoDimension Percentage

-- | One per mille (‰).
permil :: Fractional f => Value f NoDimension Permil

-- | One part per million (ppm).
ppm :: Fractional f => Value f NoDimension Ppm

-- | One part per billion (ppb).
ppb :: Fractional f => Value f NoDimension Ppb

-- | One part per trillion (ppt).
ppt :: Fractional f => Value f NoDimension Ppt

-- | One rad (rad).
rad :: Fractional f => Value f NoDimension Radian

-- | One degree (˚).
deg :: Fractional f => Value f NoDimension Degree
instance [overlap ok] Convertable NoDimension Degree
instance [overlap ok] Convertable NoDimension Radian
instance [overlap ok] Convertable NoDimension Ppt
instance [overlap ok] Convertable NoDimension Ppb
instance [overlap ok] Convertable NoDimension Ppm
instance [overlap ok] Convertable NoDimension Permil
instance [overlap ok] Convertable NoDimension Percentage


-- | A module renaming operators on values to names that would normally
--   collide with the <a>Prelude</a>. E.g. <a>+</a>, <a>*</a>, <a>sin</a>.
--   
--   Also adds instances for <tt>Num</tt> that makes it possible to write:
--   
--   <pre>
--   &gt;&gt;&gt; 1 meter / second
--   </pre>
module UnitTyped.NoPrelude

-- | See <a>.*.</a>
(*) :: (Fractional f, Convertable a b, Convertable c d, UnitMerge a c u) => Value f a b -> Value f c d -> Value f u (Mul b d)

-- | See <a>./.</a>
(/) :: (Fractional f, Convertable a b, Convertable c d, UnitMerge a c' u, UnitNeg c c') => Value f a b -> Value f c d -> Value f u (Div b d)

-- | See <a>.+.</a>
(+) :: (Fractional f, Convertable a b, Convertable c d, UnitEq c a True) => Value f a b -> Value f c d -> Value f a b

-- | See <a>.-.</a>
(-) :: (Fractional f, Convertable a b, Convertable c d, UnitEq c a True) => Value f a b -> Value f c d -> Value f a b

-- | See <a>.$.</a>
(.) :: (Convertable a b, Fractional f) => f -> Value f a b -> Value f a b

-- | Calculate the sinus of a value. Works on <a>Degree</a> and
--   <a>Radian</a>.
sin :: (Floating f, Convertable NoDimension b) => Value f NoDimension b -> Value f NoDimension Count

-- | Calculate the cosinus of a value. Works on <a>Degree</a> and
--   <a>Radian</a>.
cos :: (Floating f, Convertable NoDimension b) => Value f NoDimension b -> Value f NoDimension Count

-- | Calculate the tangens of a value. Works on <a>Degree</a> and
--   <a>Radian</a>.
tan :: (Floating f, Convertable NoDimension b) => Value f NoDimension b -> Value f NoDimension Count

-- | Calculate the arcsinus of a value. Always computes <a>Radian</a>s.
asin :: Floating f => Value f NoDimension Count -> Value f NoDimension Radian

-- | Calculate the arccosinus of a value. Always computes <a>Radian</a>s.
acos :: Floating f => Value f NoDimension Count -> Value f NoDimension Radian

-- | Calculate the arctangens of a value. Always computes <a>Radian</a>s.
atan :: Floating f => Value f NoDimension Count -> Value f NoDimension Radian

-- | See <a>.==.</a>
(==) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool

-- | See <a>.&lt;=.</a>
(<=) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool

-- | See <a>.&lt;.</a>
(<) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool

-- | See <a>.&gt;.</a>
(>=) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool

-- | See <a>.&gt;.</a>
(>) :: (Convertable a b, Convertable c d, UnitEq c a True) => Value Rational a b -> Value Rational c d -> Bool
instance [overlap ok] (Fractional f, Convertable a (m b), c ~ (Value f a b -> Value f a (m b))) => Fractional ((Value f a b -> Value f a (m b)) -> c)
instance [overlap ok] (Fractional f, Convertable a (m b), c ~ (Value f a b -> Value f a (m b))) => Num ((Value f a b -> Value f a (m b)) -> c)
instance [overlap ok] (Fractional f, Convertable a b, t ~ Value f a b) => Fractional (Value f a b -> t)
instance [overlap ok] (Fractional f, Convertable a b, t ~ Value f a b) => Num (Value f a b -> t)


-- | This module creates the SI prefixes for units. This module allows
--   syntax like:
--   
--   <pre>
--   &gt;&gt;&gt; 42 kilo meter
--   42.0 km
--   </pre>
module UnitTyped.SI.Meta

-- | Create a unit 10^1 times an existing unit.
data Deca a

-- | Create a unit 10^2 times an existing unit.
data Hecto a

-- | Create a unit 10^3 times an existing unit.
data Kilo a

-- | Create a unit 10^6 times an existing unit.
data Mega a

-- | Create a unit 10^9 times an existing unit.
data Giga a

-- | Create a unit 10^12 times an existing unit.
data Tera a

-- | Create a unit 10^15 times an existing unit.
data Peta a

-- | Create a unit 10^18 times an existing unit.
data Exa a

-- | Create a unit 10^21 times an existing unit.
data Zetta a

-- | Create a unit 10^24 times an existing unit.
data Yotta a

-- | Create a unit 10^-1 times an existing unit.
data Deci a

-- | Create a unit 10^-2 times an existing unit.
data Centi a

-- | Create a unit 10^-3 times an existing unit.
data Mili a

-- | Create a unit 10^-6 times an existing unit.
data Micro a

-- | Create a unit 10^-9 times an existing unit.
data Nano a

-- | Create a unit 10^-12 times an existing unit.
data Pico a

-- | Create a unit 10^-15 times an existing unit.
data Femto a

-- | Create a unit 10^-18 times an existing unit.
data Atto a

-- | Create a unit 10^-21 times an existing unit.
data Zepto a

-- | Create a unit 10^-24 times an existing unit.
data Yocto a

-- | Take a unit and return one deca(unit).
deca :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Deca b)

-- | Take a unit and return one hecto(unit).
hecto :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Hecto b)

-- | Take a unit and return one kilo(unit).
kilo :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Kilo b)

-- | Take a unit and return one mega(unit).
mega :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Mega b)

-- | Take a unit and return one giga(unit).
giga :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Giga b)

-- | Take a unit and return one tera(unit).
tera :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Tera b)

-- | Take a unit and return one peta(unit).
peta :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Peta b)

-- | Take a unit and return one exa(unit).
exa :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Exa b)

-- | Take a unit and return one zetta(unit).
zetta :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Zetta b)

-- | Take a unit and return one yotta(unit).
yotta :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Yotta b)

-- | Take a unit and return one deci(unit).
deci :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Deci b)

-- | Take a unit and return one centi(unit).
centi :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Centi b)

-- | Take a unit and return one mili(unit).
mili :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Mili b)

-- | Take a unit and return one micro(unit).
micro :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Micro b)

-- | Take a unit and return one nano(unit).
nano :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Nano b)

-- | Take a unit and return one pico(unit).
pico :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Pico b)

-- | Take a unit and return one femto(unit).
femto :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Femto b)

-- | Take a unit and return one atto(unit).
atto :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Atto b)

-- | Take a unit and return one zepto(unit).
zepto :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Zepto b)

-- | Take a unit and return one yocto(unit).
yocto :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Yocto b)

-- | Create a unit 2^10 times an existing unit.
data Kibi a

-- | Create a unit 2^20 times an existing unit.
data Mebi a

-- | Create a unit 2^30 times an existing unit.
data Gibi a

-- | Create a unit 2^40 times an existing unit.
data Tebi a

-- | Create a unit 2^50 times an existing unit.
data Pebi a

-- | Create a unit 2^60 times an existing unit.
data Exbi a

-- | Create a unit 2^70 times an existing unit.
data Zebi a

-- | Create a unit 2^80 times an existing unit.
data Yobi a

-- | Take a unit and return one kibi(unit).
kibi :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Kibi b)

-- | Take a unit and return one mebi(unit).
mebi :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Mebi b)

-- | Take a unit and return one gibi(unit).
gibi :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Gibi b)

-- | Take a unit and return one tebi(unit).
tebi :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Tebi b)

-- | Take a unit and return one pebi(unit).
pebi :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Pebi b)

-- | Take a unit and return one exbi(unit).
exbi :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Exbi b)

-- | Take a unit and return one zebi(unit).
zebi :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Zebi b)

-- | Take a unit and return one yobi(unit).
yobi :: (Convertable a b, Fractional f) => Value f a b -> Value f a (Yobi b)
instance [overlap ok] Convertable a b => MetaUnit Yobi a b
instance [overlap ok] Convertable a b => MetaUnit Zebi a b
instance [overlap ok] Convertable a b => MetaUnit Exbi a b
instance [overlap ok] Convertable a b => MetaUnit Pebi a b
instance [overlap ok] Convertable a b => MetaUnit Tebi a b
instance [overlap ok] Convertable a b => MetaUnit Gibi a b
instance [overlap ok] Convertable a b => MetaUnit Mebi a b
instance [overlap ok] Convertable a b => MetaUnit Kibi a b
instance [overlap ok] Convertable a b => MetaUnit Yocto a b
instance [overlap ok] Convertable a b => MetaUnit Zepto a b
instance [overlap ok] Convertable a b => MetaUnit Atto a b
instance [overlap ok] Convertable a b => MetaUnit Femto a b
instance [overlap ok] Convertable a b => MetaUnit Pico a b
instance [overlap ok] Convertable a b => MetaUnit Nano a b
instance [overlap ok] Convertable a b => MetaUnit Micro a b
instance [overlap ok] Convertable a b => MetaUnit Mili a b
instance [overlap ok] Convertable a b => MetaUnit Centi a b
instance [overlap ok] Convertable a b => MetaUnit Deci a b
instance [overlap ok] Convertable a b => MetaUnit Yotta a b
instance [overlap ok] Convertable a b => MetaUnit Zetta a b
instance [overlap ok] Convertable a b => MetaUnit Exa a b
instance [overlap ok] Convertable a b => MetaUnit Peta a b
instance [overlap ok] Convertable a b => MetaUnit Tera a b
instance [overlap ok] Convertable a b => MetaUnit Giga a b
instance [overlap ok] Convertable a b => MetaUnit Mega a b
instance [overlap ok] Convertable a b => MetaUnit Kilo a b
instance [overlap ok] Convertable a b => MetaUnit Hecto a b
instance [overlap ok] Convertable a b => MetaUnit Deca a b
instance [overlap ok] (MetaUnit m a b, Convertable a b) => Convertable a (m b)


-- | A module with a number of currencies. Values updated on: 22-11-2012
module UnitTyped.Currency

-- | Dimension of currency.
data Currency

-- | Dimension representing <tt>Currency^1</tt>.
type CurrencyUnit = UnitCons Currency (Pos One) UnitNil

-- | A euro (€).
data Euro

-- | A dollar ($).
data Dollar

-- | A Yen (¥).
data Yen

-- | British Pound (£)
data Pound

-- | No longer used, Dutch Guilders (ƒ)
data Gulden

-- | One euro.
euro :: Fractional f => Value f CurrencyUnit Euro

-- | One eurocent.
eurocent :: Fractional f => Value f CurrencyUnit Euro

-- | One dollar.
dollar :: Fractional f => Value f CurrencyUnit Dollar

-- | One dollarcent.
dollarcent :: Fractional f => Value f CurrencyUnit Dollar

-- | One yen.
yen :: Fractional f => Value f CurrencyUnit Yen

-- | One pound.
pound :: Fractional f => Value f CurrencyUnit Pound

-- | One gulden.
gulden :: Fractional f => Value f CurrencyUnit Gulden
instance [overlap ok] Convertable CurrencyUnit Gulden
instance [overlap ok] Convertable CurrencyUnit Pound
instance [overlap ok] Convertable CurrencyUnit Yen
instance [overlap ok] Convertable CurrencyUnit Dollar
instance [overlap ok] Convertable CurrencyUnit Euro


-- | Units derived from the SI unit for time: <a>second</a>.
module UnitTyped.SI.Derived.Time

-- | Hour (h).
data Hour

-- | Minute (min.).
data Minute

-- | Day (day).
data Day

-- | Year (yr). This is an average year in the Gregorian calender (so
--   365.2425 days).
data Year

-- | Month (month). Average length of a month (365.2425 / 12).
data Month

-- | Julian year (a). This is an average year in the Julian calender (so
--   365.25 days). Still used in astronomy.
data JulianYear

-- | Frequency in Hertz. (Hz)
data Hertz

-- | One minute (min.).
minute :: Fractional f => Value f TimeDimension Minute

-- | One hour (h).
hour :: Fractional f => Value f TimeDimension Hour

-- | One day (day).
day :: Fractional f => Value f TimeDimension Day

-- | One year (yr).
year :: Fractional f => Value f TimeDimension Year

-- | One Julian year (a).
julian_year :: Fractional f => Value f TimeDimension JulianYear

-- | One month (month).
month :: Fractional f => Value f TimeDimension Month

-- | One herz (Hz).
hertz :: Fractional f => Value f (UnitCons Time (Neg One) UnitNil) Hertz
instance [overlap ok] Convertable ('UnitCons * Time ('Neg 'One) 'UnitNil) Hertz
instance [overlap ok] Convertable TimeDimension JulianYear
instance [overlap ok] Convertable TimeDimension Month
instance [overlap ok] Convertable TimeDimension Year
instance [overlap ok] Convertable TimeDimension Day
instance [overlap ok] Convertable TimeDimension Minute
instance [overlap ok] Convertable TimeDimension Hour


-- | A module with dimensions and units derived from combining SI units.
module UnitTyped.SI.Derived

-- | Speed. <tt>Length^1 Time^-1</tt>.
type Speed = UnitCons Time NOne (UnitCons Length POne UnitNil)

-- | Acceleration. <tt>Length^1 Time^-2</tt>.
type Acceleration = UnitCons Time NTwo (UnitCons Length POne UnitNil)

-- | Derived unit of speed (kn).
data Knot

-- | Force. <tt>Length^1 Time^-1 Mass^1</tt>.
type Force = UnitCons Time NTwo (UnitCons Mass POne (UnitCons Length POne UnitNil))

-- | Unit of force (N).
data Newton

-- | Energy. <tt>Length^2 Time^-2 Mass^1</tt>.
type Energy = UnitCons Time NTwo (UnitCons Mass POne (UnitCons Length PTwo UnitNil))

-- | Unit of energy (J).
data Joule

-- | Unit of energy (eV).
data Ev

-- | Energy. <tt>Length^2 Time^-3 Mass^1</tt>.
type Power = UnitCons Time NThree (UnitCons Length PTwo (UnitCons Mass POne UnitNil))

-- | Unit of power (W).
data Watt

-- | Energy. <tt>Length^-1 Time^-2 Mass^1</tt>.
type Pressure = UnitCons Time NTwo (UnitCons Mass POne (UnitCons Length NOne UnitNil))

-- | Unit of pressure (Pa).
data Pascal

-- | Unit of pressure (bar).
data Bar

-- | Unit of pressure (mmHg).
data MmHg

-- | Electric charge. <tt>Time^1 Current^1</tt>.
type Charge = UnitCons Time POne (UnitCons Current POne UnitNil)

-- | Unit of chage (C).
data Coulomb

-- | Electric potential. <tt>Time^-3 Current^-1 Mass^1 Length^2</tt>.
type Potential = UnitCons Current NOne (UnitCons Mass POne (UnitCons Length PTwo (UnitCons Time NThree UnitNil)))

-- | Unit of potential (V).
data Volt

-- | Electric capacitance. <tt>Current^2 Mass^-1 Length^2 Time^4</tt>.
type Capacitance = UnitCons Current PTwo (UnitCons Mass NOne (UnitCons Length NTwo (UnitCons Time PFour UnitNil)))

-- | Unit of capacitance (F).
data Farad

-- | Electric resistance. <tt>Current^-2 Time^-3 Length^2 Mass^1</tt>.
type Resistance = UnitCons Current NTwo (UnitCons Time NThree (UnitCons Length PTwo (UnitCons Mass POne UnitNil)))

-- | Unit of resistance (Ω).
data Ohm

-- | Electric conductance. <tt>Current^2 Mass^-1 Length^-2 Time^3</tt>.
type Conductance = UnitCons Current PTwo (UnitCons Mass NOne (UnitCons Length NTwo (UnitCons Time PThree UnitNil)))

-- | Unit of conductance (S).
data Siemens

-- | Magnetic flux. <tt>Current^-1 Length^2 Mass^1 Time^-2</tt>.
type Flux = UnitCons Current NOne (UnitCons Length PTwo (UnitCons Mass POne (UnitCons Time NTwo UnitNil)))

-- | Unit of magnetic flux (Wb).
data Weber

-- | Magnetic field strength. <tt>Time^-2 Mass^1 Current^-1</tt>.
type FluxDensity = UnitCons Time NTwo (UnitCons Mass POne (UnitCons Current NOne UnitNil))

-- | Unit of magnetic field strength (T).
data Tesla

-- | Inductance. <tt>Current^-2 Time^-2 Mass^1 Length^2</tt>.
type Inductance = UnitCons Current NTwo (UnitCons Time NTwo (UnitCons Mass POne (UnitCons Length PTwo UnitNil)))

-- | Unit of Inductance (H).
data Henry

-- | One knot.
knot :: Fractional f => Value f Speed Knot

-- | One newton.
newton :: Fractional f => Value f Force Newton

-- | One joule.
joule :: Fractional f => Value f Energy Joule

-- | One eV.
eV :: Fractional f => Value f Energy Ev

-- | One kwh.
kwh :: Fractional f => Value f Energy (Mul (Kilo Watt) Hour)

-- | One watt.
watt :: Fractional f => Value f Power Watt

-- | One pascal.
pascal :: Fractional f => Value f Pressure Pascal

-- | One bar.
bar :: Fractional f => Value f Pressure Bar

-- | One mmHg.
mmHg :: Fractional f => Value f Pressure MmHg

-- | One coulomb.
coulomb :: Fractional f => Value f Charge Coulomb

-- | One volt.
volt :: Fractional f => Value f Potential Volt

-- | One farad.
farad :: Fractional f => Value f Capacitance Farad

-- | One ohm.
ohm :: Fractional f => Value f Resistance Ohm

-- | One siemens.
siemens :: Fractional f => Value f Conductance Siemens

-- | One weber.
weber :: Fractional f => Value f Flux Weber

-- | One tesla.
tesla :: Fractional f => Value f FluxDensity Tesla

-- | One henry.
henry :: Fractional f => Value f Inductance Henry
instance [overlap ok] Convertable Inductance Henry
instance [overlap ok] Convertable FluxDensity Tesla
instance [overlap ok] Convertable Flux Weber
instance [overlap ok] Convertable Conductance Siemens
instance [overlap ok] Convertable Resistance Ohm
instance [overlap ok] Convertable Capacitance Farad
instance [overlap ok] Convertable Potential Volt
instance [overlap ok] Convertable Charge Coulomb
instance [overlap ok] Convertable Pressure MmHg
instance [overlap ok] Convertable Pressure Bar
instance [overlap ok] Convertable Pressure Pascal
instance [overlap ok] Convertable Power Watt
instance [overlap ok] Convertable Energy Ev
instance [overlap ok] Convertable Energy Joule
instance [overlap ok] Convertable Force Newton
instance [overlap ok] Convertable Speed Knot


-- | A number of mathematical or physical constants.
module UnitTyped.SI.Constants

-- | π as the floating point value it has in the <a>Prelude</a>.
pi' :: (Fractional f, Floating f) => Value f NoDimension Count

-- | π as a rational value. Which it isn't. But we can pretend it is.
pi :: Fractional f => Value f NoDimension Count

-- | The speed of light
c :: Fractional f => Value f Speed (Div Meter Second)

-- | Planck constant
h :: Fractional f => Value f (UnitCons Time NOne (UnitCons Length PTwo (UnitCons Mass POne UnitNil))) (Mul Joule Second)

-- | Reduced Planck constant
hbar :: Fractional f => Value f (UnitCons Time NOne (UnitCons Length PTwo (UnitCons Mass POne UnitNil))) (Mul Joule Second)

-- | Atomic unit of charge (elementary charge)
e :: Fractional f => Value f Charge Coulomb

-- | Atomic unit of mass (electron mass)
m_e :: Fractional f => Value f MassDimension (Kilo Gram)

-- | Atomic unit of length
a_0 :: Fractional f => Value f LengthDimension Meter

-- | Atomic unit of energy
e_h :: Fractional f => Value f Energy Joule

-- | Gas constant.
r :: Fractional f => Value f (UnitCons Temperature NOne (UnitCons Length PTwo (UnitCons Mass POne (UnitCons Time (Neg (Suc One)) UnitNil)))) (Div Joule (Mul Kelvin Mole))

-- | Gravitational constant
g :: Fractional f => Value f (UnitCons Time (Neg (Suc One)) (UnitCons Length (Pos (Suc (Suc One))) (UnitCons Mass (Neg One) UnitNil))) (Div (Div (Mul (Mul Meter Meter) Meter) (Kilo Gram)) (Mul Second Second))

-- | Planck mass
m_P :: (Fractional f, Floating f) => Value f MassDimension (Kilo Gram)

-- | Reduced Planck mass
m_P' :: (Fractional f, Floating f) => Value f MassDimension (Kilo Gram)


-- | A module for working with amounts of bytes and bits.
module UnitTyped.Bytes

-- | An of amount of data.
data Data

-- | The dimension representing <tt>Data^1</tt>.
type DataUnit = UnitCons Data (Pos One) UnitNil

-- | A byte of data.
data Byte

-- | A bit of data.
data Bit

-- | One byte.
byte :: Fractional f => Value f DataUnit Byte

-- | One bit.
bit :: Fractional f => Value f DataUnit Bit
instance [overlap ok] Convertable DataUnit Bit
instance [overlap ok] Convertable DataUnit Byte


-- | Units derived from the SI unit for length, and higher dimensions of
--   length (area, volume).
module UnitTyped.SI.Derived.Length

-- | The international mile (mile).
data Mile

-- | The international inch (in).
data Inch

-- | The international yard (yd).
data Yard

-- | The international foot (ft).
data Foot

-- | Ångström, length unit for atoms and molecules (Å).
data Ångström

-- | Nautical miles (M).
data NauticalMile

-- | Area: <tt>Length^2</tt>.
type AreaUnit = UnitCons Length (Pos (Suc One)) UnitNil

-- | Area, often used in nuclear physics (b).
data Barn

-- | Volume: <tt>Length^3</tt>.
type VolumeUnit = UnitCons Length (Pos (Suc (Suc One))) UnitNil

-- | Liter, unit of volume (L).
data Liter

-- | Gallon, unit of volume (gallon).
data Gallon

-- | Fluid ounce, unit of volume (fl oz).
data FluidOunce

-- | One mile (mile).
mile :: Fractional f => Value f LengthDimension Mile

-- | One inch (in).
inch :: Fractional f => Value f LengthDimension Inch

-- | One yard (yd).
yard :: Fractional f => Value f LengthDimension Yard

-- | One foot (ft).
foot :: Fractional f => Value f LengthDimension Foot

-- | One ångström (Å).
ångström :: Fractional f => Value f LengthDimension Ångström

-- | One ångström, for those with bad UTF-8 support (Å).
angstrom :: Fractional f => Value f LengthDimension Ångström

-- | One nautical mile (M).
nautical_mile :: Fractional f => Value f LengthDimension NauticalMile

-- | One barn (b).
barn :: Fractional f => Value f AreaUnit Barn

-- | One liter (L).
liter :: Fractional f => Value f VolumeUnit Liter

-- | One gallon (gallon).
gallon :: Fractional f => Value f VolumeUnit Gallon

-- | One fluid ounce (fl oz).
fluid_ounce :: Fractional f => Value f VolumeUnit FluidOunce
instance [overlap ok] Convertable VolumeUnit FluidOunce
instance [overlap ok] Convertable VolumeUnit Gallon
instance [overlap ok] Convertable VolumeUnit Liter
instance [overlap ok] Convertable AreaUnit Barn
instance [overlap ok] Convertable LengthDimension NauticalMile
instance [overlap ok] Convertable LengthDimension Ångström
instance [overlap ok] Convertable LengthDimension Foot
instance [overlap ok] Convertable LengthDimension Yard
instance [overlap ok] Convertable LengthDimension Inch
instance [overlap ok] Convertable LengthDimension Mile


-- | Units derived from the SI unit for mass.
module UnitTyped.SI.Derived.Mass

-- | Pound, imperial unit of mass (lb).
data Pound

-- | One pound (lb).
pound :: Fractional f => Value f MassDimension Pound
instance [overlap ok] Convertable MassDimension Pound
