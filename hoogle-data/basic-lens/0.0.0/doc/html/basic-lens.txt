-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Basic lens type and functions
--   
--   Necessary type and functions for basic lens work.
--   
--   Handy to depend on for libraries and general light-weight use,
--   including PITA environments, old GHCs and non-GHC implementations with
--   Rank-N type support. Depends on only on base.
@package basic-lens
@version 0.0.0


-- | Basic lens type and functions.
--   
--   The lens package should be a drop-in replacement for this.
module Control.Lens.Basic

-- | <b>Purpose</b>
--   
--   A value of type <tt>Lens s t a b</tt> provides the following:
--   
--   <ul>
--   <li>A reference into the structure <tt>s</tt> to read and update the
--   value <tt>a</tt> inside it.</li>
--   <li>The possibility to change the type of <tt>s</tt> to <tt>t</tt> and
--   the type of <tt>a</tt> to <tt>b</tt>.</li>
--   </ul>
--   
--   <b>The <tt>Functor</tt> constraint</b>
--   
--   Operations may do something more interesting inside the <tt>f</tt>
--   functor. For the purpose of this module and package, all the functions
--   below (<a>view</a>, <a>over</a>, <a>set</a>) use a no-op functor and
--   therefore the above type is equivalent to:
--   
--   <pre>
--   type Lens s t a b = (a -&gt; b) -&gt; (s -&gt; t)
--   </pre>
--   
--   But it is left generic for forward compatibilty with the lens package.
--   
--   <b>Example</b>
--   
--   <pre>
--   λ&gt; data Person = Person Char Int deriving Show
--   λ&gt; let _age f (Person x a) = fmap (\b -&gt; Person x b) (f a)
--   λ&gt; view _age (Person <tt>a</tt> 10)
--   10
--   λ&gt; over _age (+1) (Person <tt>a</tt> 10)
--   Person <tt>a</tt> 11
--   λ&gt; set _age 100 (Person <tt>a</tt> 10)
--   Person <tt>a</tt> 100
--   λ&gt;
--   </pre>
--   
--   <b>Laws</b>
--   
--   1) <i>Get-Put</i>: You get back what you put in.
--   
--   <pre>
--   view l (set l v s) ≡ v
--   </pre>
--   
--   2) <i>Put-Get</i>: Putting back what you got doesn't change anything.
--   
--   <pre>
--   set l (view l s) s ≡ s
--   </pre>
--   
--   3) <i>Put-Put</i>: Setting is idempotent.
--   
--   <pre>
--   set l v (set l v s) ≡ set l v s
--   </pre>
type Lens s t a b = forall f. Functor f => (a -> f b) -> (s -> f t)

-- | Get the <tt>a</tt> inside the <tt>s</tt>.
view :: Lens s t a b -> s -> a

-- | Set the <tt>a</tt> inside the <tt>s</tt>, optionally changing the
--   types to <tt>b</tt> and <tt>t</tt>.
set :: Lens s t a b -> b -> s -> t

-- | Modify the <tt>a</tt> inside the <tt>s</tt>, optionally changing the
--   types to <tt>b</tt> and <tt>t</tt>.
over :: Lens s t a b -> (a -> b) -> s -> t
instance Functor Id
