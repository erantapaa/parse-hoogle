-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | DOOM WAD file utilities.
--   
@package waddle
@version 0.1.0.5


-- | All public data types used by the Waddle library. The <a>Wad</a> type
--   is a good entry point into understanding the types.
--   
--   I recommend the Unofficial Doom Specification by Matthew S Fell,
--   available at <a>http://aiforge.net/test/wadview/dmspec16.txt</a> and
--   the Doom Wiki at <a>http://doomwiki.org</a> for details.
module Game.Waddle.Types

-- | Exception thrown when reading and decoding WAD files.
data WadException

-- | General WAD file format error. The first string is the context where
--   the error occured, the second contains details on the error.
WadExceptionFormatError :: String -> String -> WadException

-- | Decoding of the general WAD format or individual lumps failed. The
--   first string is the context where the error occured, the second
--   contains details on the error.
WadExceptionDecodeError :: String -> String -> WadException

-- | WAD structure, including the file contents and decoded common lumps.
data Wad
Wad :: WadHeader -> [WadEntry] -> [ByteString] -> Map (CI LumpName) ByteString -> Map (CI LumpName) Flat -> Map (CI LumpName) Sprite -> Map (CI LumpName) Patch -> Map (CI LumpName) Texture -> Map (CI LumpName) Level -> Map Int LumpName -> Maybe Colormap -> Maybe Palettes -> Wad

-- | WAD header.
wadHeader :: Wad -> WadHeader

-- | All WAD directory entries, in the same order as in the file.
wadDirectory :: Wad -> [WadEntry]

-- | All WAD lumps, each entry matching the corresponding entry in
--   wadDirectory.
wadLumps :: Wad -> [ByteString]

-- | Mapping from lump names to lump content.
wadLumpLookup :: Wad -> Map (CI LumpName) ByteString

-- | Mapping from lump names to flats (floors and ceilings).
wadFlats :: Wad -> Map (CI LumpName) Flat

-- | Mapping from lump names to sprites (monsters and things).
wadSprites :: Wad -> Map (CI LumpName) Sprite

-- | Mapping from lump names to patches (parts of wall textures).
wadPatches :: Wad -> Map (CI LumpName) Patch

-- | Mapping from lump names to wall textures.
wadTextures :: Wad -> Map (CI LumpName) Texture

-- | Mapping from lump names to levels.
wadLevels :: Wad -> Map (CI LumpName) Level

-- | Mapping from patch indices to patch names.
wadPNames :: Wad -> Map Int LumpName

-- | WAD colormap for mapping palette entries according to light levels.
wadColormap :: Wad -> Maybe Colormap

-- | Palettes for mapping color indices to RGB tuples.
wadPalettes :: Wad -> Maybe Palettes

-- | Lump name. This is at mot 8 bytes long, and internally, all trailing
--   NULs are stripped.
type LumpName = ByteString

-- | WAD file header.
data WadHeader
WadHeader :: ByteString -> Int32 -> Int32 -> WadHeader

-- | Normally "IWAD" or "PWAD", always of length 4.
wadHeaderIdentifier :: WadHeader -> ByteString

-- | Number of lumps in the file.
wadHeaderLumpCount :: WadHeader -> Int32

-- | Byte offset (relative to beginning of the file) of the WAD directory.
wadHeaderDirectoryOffset :: WadHeader -> Int32

-- | Entry in WAd directory.
data WadEntry
WadEntry :: Int32 -> Int32 -> ByteString -> WadEntry

-- | Offset of the lump data in the file.
wadEntryOffset :: WadEntry -> Int32

-- | Size (in bytes) of the lump data.
wadEntrySize :: WadEntry -> Int32

-- | Name of the lump. Note that trailing NULs are stripped when the name
--   is read in.
wadEntryName :: WadEntry -> ByteString

-- | Sprites are used for players, monsters, and things in general.
data Sprite
Sprite :: LumpName -> Picture -> Sprite

-- | Lump name for this sprite.
spriteName :: Sprite -> LumpName

-- | Picture for the sprite. It is drawn relative to the thing's position.
spritePicture :: Sprite -> Picture

-- | Picture. Sprites and wall patches are stored in this format.
data Picture
Picture :: Int -> Int -> Int -> Int -> [[Post]] -> Picture

-- | Width of the picture.
pictureWidth :: Picture -> Int

-- | Height of the picture.
pictureHeight :: Picture -> Int

-- | Offset of the left side to the origin of the picture.
pictureLeftOffset :: Picture -> Int

-- | Offset of the top to the origin of the picture.
pictureTopOffset :: Picture -> Int

-- | Each element in this list is a column, where each column is a list of
--   posts.
picturePosts :: Picture -> [[Post]]

-- | A <a>Post</a> is a part of a column. There can (and often will) be
--   gaps in columns for transparent parts in sprites and walls.
data Post
Post :: Word8 -> ByteString -> Post

-- | Where to start drawing this part of the column.
postTop :: Post -> Word8

-- | Pixels of this post. The length of this field defines how many pixels
--   to draw.
postPixels :: Post -> ByteString

-- | Wall texture.
data Texture
Texture :: LumpName -> Int16 -> Int16 -> [PatchDescriptor] -> Texture

-- | Name of the texture.
textureName :: Texture -> LumpName

-- | Texture width.
textureWidth :: Texture -> Int16

-- | Texture height.
textureHeight :: Texture -> Int16

-- | List of patches, in the order they appear in the WAD.
texturePatchDescriptors :: Texture -> [PatchDescriptor]

-- | A wall patch. Wall textures are made up of one or more patches, which
--   are positioned as defined by the patch descriptors in the
--   <a>Texture</a> value.
data Patch
Patch :: LumpName -> Picture -> Patch

-- | Name of this patch.
patchName :: Patch -> LumpName

-- | Picture for the patch. The offsets in the picture are ignored, because
--   positioning is defined in the patch descriptor referencing this patch.
patchPicture :: Patch -> Picture

-- | Patch descriptor.
data PatchDescriptor
PatchDescriptor :: Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> PatchDescriptor

-- | X offset in wall coordinate system for this patch.
patchDescriptorXOffset :: PatchDescriptor -> Int16

-- | Y offset in wall coordinate system for this patch.
patchDescriptorYOffset :: PatchDescriptor -> Int16

-- | Index in PNAMES of the picture to use.
patchDescriptorPNameIndex :: PatchDescriptor -> Int16

-- | Documented in UDS, but usage unknown.
patchDescriptorStepDir :: PatchDescriptor -> Int16

-- | Documented in UDS, but usage unknown.
patchDescriptorColorMap :: PatchDescriptor -> Int16

-- | Flats are images for texturing floors and ceiling.
data Flat
Flat :: LumpName -> ByteString -> Flat

-- | Name of this flat.
flatName :: Flat -> LumpName

-- | Always 64 x 64 = 4096 bytes.
flatData :: Flat -> ByteString

-- | Colormap contains 34 maps, 256 bytes each.
data Colormap
Colormap :: [ByteString] -> Colormap

-- | 14 palettes, each a list of 256 RGB tuples.
data Palettes
Palettes :: [[(Word8, Word8, Word8)]] -> Palettes

-- | One level.
data Level
Level :: LumpName -> [Thing] -> [Vertex] -> [LineDef] -> [SideDef] -> [Seg] -> [SSector] -> [Sector] -> [Node] -> Maybe Reject -> Maybe Blockmap -> Level

-- | Level name, E?M? style for DOOM 1 maps, MAP?? for DOOM 2 maps.
levelName :: Level -> LumpName

-- | List of things that are to be placed in the level on start.
levelThings :: Level -> [Thing]

-- | List of vertices referenced by linedefs, segs, etc.
levelVertices :: Level -> [Vertex]

-- | List of linedefs.
levelLineDefs :: Level -> [LineDef]

-- | List of sidedefs.
levelSideDefs :: Level -> [SideDef]

-- | List of segs (parts of linedefs referenced in BSP tree.
levelSegs :: Level -> [Seg]

-- | List of ssectors (sub-sectors), created from sectors during BSP
--   building. A ssector is made up of segs.
levelSSectors :: Level -> [SSector]

-- | List of sectors of the level.
levelSectors :: Level -> [Sector]

-- | BSP tree nodes.
levelNodes :: Level -> [Node]

-- | Reject bitmap. Used for determining whether one sector can be seen
--   from another.
levelReject :: Level -> Maybe Reject

-- | Blockmap. For each block of the map, lists the linedefs intersecting
--   that block. Used for actor-wall collision detection.
levelBlockmap :: Level -> Maybe Blockmap

-- | Things are parts of levels. When a level is loaded, the things define
--   where to place players, monsters, items and so on.
data Thing
Thing :: Int16 -> Int16 -> Int16 -> ThingType -> Int16 -> Thing

-- | X position of the thing.
thingX :: Thing -> Int16

-- | Y position of the thing.
thingY :: Thing -> Int16

-- | Angle the thing is looking at when created. This only affects things
--   that have a direction, such as players and monsters.
thingAngle :: Thing -> Int16

-- | Kind of thing.
thingType :: Thing -> ThingType

-- | Flags of the thing. Not decoded yet.
thingFlags :: Thing -> Int16

-- | All supported thing types. Unrecogized types are encoded as
--   <a>ThingTypeOther</a>.
data ThingType
ZeroThing :: ThingType
Player1StartPos :: ThingType
Player2StartPos :: ThingType
Player3StartPos :: ThingType
Player4StartPos :: ThingType
DeathMatchStartPos :: ThingType
FormerHuman :: ThingType
WolfensteinOfficer :: ThingType
FormerHumanSergeant :: ThingType
FormerHumanCommando :: ThingType
Imp :: ThingType
Demon :: ThingType
Spectre :: ThingType
LostSoul :: ThingType
Cacodemon :: ThingType
HellKnight :: ThingType
BaronOfHell :: ThingType
Arachnotron :: ThingType
PainElemental :: ThingType
Revenant :: ThingType
Mancubus :: ThingType
ArchVile :: ThingType
Spiderdemon :: ThingType
Cyberdemon :: ThingType
BossBrain :: ThingType
TeleportLanding :: ThingType
BossShooter :: ThingType
SpawnSpot :: ThingType
Chainsaw :: ThingType
Shotgun :: ThingType
SuperShotgun :: ThingType
Chaingun :: ThingType
RocketLauncher :: ThingType
Plasmagun :: ThingType
BFG9000 :: ThingType
AmmoClip :: ThingType
ShotgunShells :: ThingType
Rocket :: ThingType
CellCharge :: ThingType
BoxOfAmmo :: ThingType
BoxOfShells :: ThingType
BoxOfRockets :: ThingType
CellChargePack :: ThingType
Backpack :: ThingType
StimPack :: ThingType
Medikit :: ThingType
HealthPotion :: ThingType
SpiritArmor :: ThingType
SecurityArmor :: ThingType
CombatArmor :: ThingType
MegaSphere :: ThingType
SoulSphere :: ThingType
Invulnerability :: ThingType
BerserkPack :: ThingType
Invisibility :: ThingType
RadiationSuit :: ThingType
ComputerMap :: ThingType
LightAmplificationGoggles :: ThingType
BlueKeyCard :: ThingType
RedKeyCard :: ThingType
YellowKeyCard :: ThingType
BlueSkullKey :: ThingType
RedSkullKey :: ThingType
YellowSkullKey :: ThingType
Barrel :: ThingType
BurningBarrel :: ThingType
Candle :: ThingType
Candelabra :: ThingType
TallTechnocolumn :: ThingType
TallGreenPillar :: ThingType
TallRedPillar :: ThingType
ShortGreenPillar :: ThingType
ShortGreenPillarWithHeart :: ThingType
ShortGreenPillarWithBeatingHeart :: ThingType
ShortRedPillar :: ThingType
ShortRedPillarWithSkull :: ThingType
Stalagmite :: ThingType
BurntGrayTree :: ThingType
LargeBrownTree :: ThingType
TallBlueFirestick :: ThingType
TallGreenFirestick :: ThingType
TallRedFirestick :: ThingType
ShortBlueFirestick :: ThingType
ShortGreenFirestick :: ThingType
ShortRedFirestick :: ThingType
FloorLamp :: ThingType
TallTechnoLamp :: ThingType
ShortTechnoLamp :: ThingType
EvilEyeSymbol :: ThingType
FlamingSkullRock :: ThingType
ImpaledHuman :: ThingType
TwitchingImpaledHuman :: ThingType
SkullOnPole :: ThingType
FiveSkullShishKebap :: ThingType
PileOfSkullsAndCandles :: ThingType
HangingVictim :: ThingType
HangingVictimTwitching :: ThingType
HangingPairOfLegs :: ThingType
HangingVictim1Leg :: ThingType
HangingLeg :: ThingType
HangingVictimNoGuts :: ThingType
HangingVictimNoGutsBrain :: ThingType
HangingTorsoLookingDown :: ThingType
HangingTorsoOpenSkull :: ThingType
HangingTorsoLookingUp :: ThingType
HangingTorsoNoBrain :: ThingType
HangingBilly :: ThingType
DeadPlayer :: ThingType
DeadFormerHuman :: ThingType
DeadFormerSergeant :: ThingType
DeadImp :: ThingType
DeadDemon :: ThingType
DeadCacodemon :: ThingType
DeadLostSoulInvisible :: ThingType
BloodyMessExplodedPlayer :: ThingType
BloodyMessAsAbove :: ThingType
PoolOfBlood :: ThingType
PoolOfGuts :: ThingType
SmallPoolOfGuts :: ThingType
PoolOfBrains :: ThingType
HangingVictimTwitching2 :: ThingType
HangingVictimArmsSpread :: ThingType
HangingVictim1Legged :: ThingType
HangingPairOfLegs2 :: ThingType
HangingLeg2 :: ThingType
ThingTypeOther :: Int -> ThingType

-- | Convert an integer thing type as found in the WAD file to Haskell.
thingTypeFromNumber :: Integral a => a -> ThingType

-- | A vertex defines the X/Y coordinates of linedefs, segs etc.
--   
--   They are referenced by their position in the VERTEXES lump of the
--   level they are used in.
data Vertex
Vertex :: Int16 -> Int16 -> Vertex

-- | X coordinate.
vertexX :: Vertex -> Int16

-- | Y coordinate.
vertexY :: Vertex -> Int16

-- | A sidedef defines the textures to use on walls and to what sector the
--   wall is connected.
--   
--   Linedefs can have one or two sidedefs.
data SideDef
SideDef :: Int16 -> Int16 -> ByteString -> ByteString -> ByteString -> Int16 -> SideDef

-- | X offset of the sidedef.
sideDefXOffset :: SideDef -> Int16

-- | Y offset of the sidedef.
sideDefYOffset :: SideDef -> Int16

-- | Name of upper texture.
sideDefUpperTextureName :: SideDef -> ByteString

-- | Name of lower texture.
sideDefLowerTextureName :: SideDef -> ByteString

-- | Name of middle texture.
sideDefMiddleTextureName :: SideDef -> ByteString

-- | Index of sector this sidedef faces.
sideDefSector :: SideDef -> Int16

-- | Linedefs make up the geometry of a level and additionally define most
--   of the interactivity.
data LineDef
LineDef :: Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Maybe Int16 -> LineDef

-- | The linedef starts at the vertex with this index,
lineDefStartVertex :: LineDef -> Int16

-- | ... and ends at the vertex with this index.
lineDefEndVertex :: LineDef -> Int16

-- | Linedef flags. Not decoded yet.
lineDefFlags :: LineDef -> Int16

-- | Linedef effect. Not decoded yet.
lineDefEffect :: LineDef -> Int16

-- | Linedef tag. Triggers on this linedef affect sectors witht the same
--   tag.
lineDefTag :: LineDef -> Int16

-- | Right sidedef of this linedef. Defines textures and sector this
--   linedef is connected to.
lineDefRightSideDef :: LineDef -> Int16

-- | For two-sided linedefs, this is the left side.
lineDefLeftSideDef :: LineDef -> Maybe Int16

-- | Sectors are defined by enclosing linedefs, and the properties below.
--   In WADs, each region of a map with different ceiling or floor heights
--   or textures, or different specials and tags need to be their own
--   sectors.
data Sector
Sector :: Int16 -> Int16 -> LumpName -> LumpName -> Int16 -> Int16 -> Int16 -> Sector

-- | Height of floor.
sectorFloorHeight :: Sector -> Int16

-- | Height of ceiling.
sectorCeilingHeight :: Sector -> Int16

-- | Name of flat for floor texturing.
sectorFloorFlat :: Sector -> LumpName

-- | Name of flat for ceiling texturing.
sectorCeilingFlat :: Sector -> LumpName

-- | Light level of sector. Used as index in COLORMAP for darkening colors.
sectorLightLevel :: Sector -> Int16

-- | Sector special. Not decoded yet.
sectorSpecial :: Sector -> Int16

-- | Sector tag. Not decoded yet.
sectorTag :: Sector -> Int16

-- | Node of the BSP tree. This is created by the BSP construction process
--   and is used to speed up rendering.
data Node
Node :: Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Either Int16 Int16 -> Either Int16 Int16 -> Node

-- | X position of start of node line.
nodeX :: Node -> Int16

-- | Y position of start of node line.
nodeY :: Node -> Int16

-- | Delta X for end of node line.
nodeDX :: Node -> Int16

-- | Delta Y for end of node line.
nodeDY :: Node -> Int16

-- | Upper Y coordinate of right bounding box.
nodeRightBBUY :: Node -> Int16

-- | Lower Y coordinate of right bounding box.
nodeRightBBLY :: Node -> Int16

-- | Lower X coordinate of right bounding box.
nodeRightBBLX :: Node -> Int16

-- | Upper X coordinate of right bounding box.
nodeRightBBUX :: Node -> Int16

-- | Upper Y coordinate of left bounding box.
nodeLeftBBUY :: Node -> Int16

-- | Lower Y coordinate of left bounding box.
nodeLeftBBLY :: Node -> Int16

-- | Lower X coordinate of left bounding box.
nodeLeftBBLX :: Node -> Int16

-- | Upper X coordinate of left bounding box.
nodeLeftBBUX :: Node -> Int16

-- | When Left, index of right recursive node, when Right index of right
--   ssector.
nodeRightNodeOrSSector :: Node -> Either Int16 Int16

-- | When Left, index of left recursive node, when Right index of left
--   ssector.
nodeLeftNodeOrSSector :: Node -> Either Int16 Int16

-- | A SSector (sub-sector?) is also produced by the BSP construction
--   process. All sectors are split into ssectors (convex polygons).
data SSector
SSector :: Int16 -> Int16 -> SSector

-- | Number of segs that make up this ssector.
ssectorSegCount :: SSector -> Int16

-- | Index of first seg of this sector.
ssectorSegStart :: SSector -> Int16

-- | Segs are split up linedefs that are produced by the BSP construction
--   process. Whenever a BSP node splits a linedef, two segs are created
--   representing both sides of the split.
data Seg
Seg :: Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Seg

-- | Index of start vertex.
segStartVertex :: Seg -> Int16

-- | Index of end vertex.
segEndVertex :: Seg -> Int16

-- | Angle of the seg.
segAngle :: Seg -> Int16

-- | Index of linedef this seg is part of.
segLineDef :: Seg -> Int16

-- | 0 if seg is in same diretion as linedef, 1 otherwise.
segDirection :: Seg -> Int16

-- | Offset of the seg relative to the linedef.
segOffset :: Seg -> Int16

-- | Reject array. This is a bit map and not decoded yet.
data Reject
Reject :: ByteString -> Reject
rejectBytes :: Reject -> ByteString

-- | Blocklist is a list of linedef indices.
type Blocklist = [Int16]

-- | Blockmap, determines which blocks intersect with linedefs.
data Blockmap
Blockmap :: Int16 -> Int16 -> Int16 -> Int16 -> [Blocklist] -> Blockmap

-- | X origin in level coordinates.
blockmapOriginX :: Blockmap -> Int16

-- | Y origin in level coordinates.
blockmapOriginY :: Blockmap -> Int16

-- | Number of columns.
blockmapColumns :: Blockmap -> Int16

-- | Number of rows.
blockmapRows :: Blockmap -> Int16

-- | Blocklists for all blocks, left-to-right, bottom-to-top in level
--   coordinates.
blockmapBlocklists :: Blockmap -> [Blocklist]
instance Typeable WadException
instance Eq WadException
instance Show WadException
instance Show Post
instance Show ThingType
instance Exception WadException


-- | WAD file loader. Loads the file into memory and parses the common
--   lumps into Haskell values.
--   
--   I recommend the Unofficial Doom Specification by Matthew S Fell,
--   available at <a>http://aiforge.net/test/wadview/dmspec16.txt</a> and
--   the Doom Wiki at <a>http://doomwiki.org</a> for details.
module Game.Waddle.Load

-- | Load a WAD file into a <a>Wad</a> value. The complete file is read
--   into memory eagerly, assuming that all the content will be needed
--   anyway by the application.
--   
--   May throw <a>IOException</a> or <a>WadException</a>.
load :: FilePath -> IO Wad
instance Show PState
instance Show ExtPicture
instance Show ExtPost


-- | The function <a>exportJS</a> exports a WAD file into several
--   JavaScript files, where each file defines an object:
--   
--   <ul>
--   <li>One file for each level, called <tt>level-E1M1.js</tt>,
--   <tt>level-MAP03.js</tt> etc. Each file defines an object for the
--   level, called e.g. <tt>level_E1M1</tt>. Example:</li>
--   </ul>
--   
--   <pre>
--   var level_E1M1 = {
--    things: [ ... ],
--   ...
--    vertices: [
--       {x:1088,y:-3680},
--   ...
--    ],
--   ...
--   };
--   </pre>
--   
--   <ul>
--   <li>One file <tt>levels.js</tt>, which includes all levels and defines
--   an object called <tt>levels</tt>. Example:</li>
--   </ul>
--   
--   <pre>
--   var levels = {"MAP01": level_MAP01, ..., "MAP32": level_MAP32};
--   </pre>
--   
--   <ul>
--   <li>One file for textures, called <tt>textures.js</tt>, defining an
--   object <tt>textures</tt>. Example:</li>
--   </ul>
--   
--   <pre>
--   var textures = {
--     "AASHITTY": {name:"AASHITTY",width:64,height:64,patches:[
--     {xoffset:0,yoffset:0,pname:0,stepdir:1,colormap:0}
--    ]},
--   ...
--   };
--   </pre>
--   
--   <ul>
--   <li>One file for flats (floors and ceilings), called
--   <tt>flats.js</tt>, defining an object <tt>flats</tt>. Example:</li>
--   </ul>
--   
--   <pre>
--   var flats = {
--     "BLOOD1":{name:"BLOOD1",data:[46,46,45,...]},
--     ...
--   };
--   </pre>
--   
--   <ul>
--   <li>One file for sprites, called <tt>sprites.js</tt>, defining an
--   object <tt>sprites</tt>. No example, I think you get the idea!</li>
--   <li>One file for patches, called <tt>patches.js</tt>, defining an
--   object <tt>patches</tt>.</li>
--   <li>One file for pnames, called <tt>pnames.js</tt>, defining a list
--   <tt>pnames</tt>.</li>
--   <li>One file for palettes, called <tt>palettes.js</tt>, defining a
--   list of lists <tt>palettes</tt>.</li>
--   <li>One file for colormaps, called <tt>colormap.js</tt>, defining a
--   list <tt>colormap</tt>.</li>
--   </ul>
--   
--   To see how this data can be used, have a look at the HTML5 view
--   included in the distribution in directory "visualize".
module Game.Waddle.ExportJS

-- | Exports a WAD structure into several JavaScript files:
--   
--   <ul>
--   <li>One file for each level, called like <tt>level_E1M1.js</tt> or
--   <tt>level_MAP13.js</tt></li>
--   <li><pre>levels.js</pre></li>
--   <li><pre>textures.js</pre></li>
--   <li><pre>flats.js</pre></li>
--   <li><pre>sprites.js</pre></li>
--   <li><pre>patches.js</pre></li>
--   <li><pre>pnames.js</pre></li>
--   <li>@palettes.js</li>
--   <li><pre>colormap.js</pre></li>
--   </ul>
exportJS :: Wad -> FilePath -> IO ()


-- | Waddle is a library of WAD file utilities.
--   
--   This is a convenience module which re-exports the modules which are
--   essential for using Waddle.
module Game.Waddle
mergeWads :: [Wad] -> Wad
