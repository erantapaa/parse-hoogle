-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell wrapper over Microsoft Azure ServiceBus REST API
--   
--   <i>Overview</i>
--   
--   This library provides haskell wrappers over Microsoft Azure ServiceBus
--   REST API. The current version provides Runtime API for <a>queues and
--   topics</a>.
--   
--   The following functionality is covered:
--   
--   <ul>
--   <li>Send bytestring (lazy as well as strict) to a Queue.</li>
--   <li>Send bytestring (lazy as well as strict) to a topic.</li>
--   <li>Destructively read data from a queue or topic into a lazy
--   bytestring</li>
--   <li>acquire peek-locks on messages on Queues and Subscriptions</li>
--   <li>renew lock</li>
--   <li>delete a locked message</li>
--   <li>unlock a locked message</li>
--   </ul>
@package azure-servicebus
@version 0.1.6.0


-- | Provides API to pull from and push to ServiceBus topic Please refer to
--   <a>Service Bus Rest API</a> for information on the API provided by
--   Microsoft Service bus.
--   
--   Simple example for how to use this library is as below
--   
--   <pre>
--    import Network.MicrosoftAzure.ServiceBus.Topic
--    import Network.MicrosoftAzure.ServiceBus
--    import qualified Data.ByteString.Char8 as C
--   
--   topicName = <a>topicName</a>
--    subscriptionName = <a>subscriptionName</a>
--    sbNamespace = <a>namespace</a>
--    sbIssuerKey = C.pack <a>1287361251262as=</a>
--    sbIssuerName = C.pack <a>owner</a>
--   
--   sbinfo = SBInfo sbNamespace sbIssuerName sbIssuerKey
--    message = C.pack <a>Hello from Haskell</a>
--   
--   main = do
--      sbContext &lt;- sbContext sbinfo
--      sendTopicBS topicName message sbContext
--      res &lt;- destructiveRead topicName subscriptionName 30 sbContext
--      print res
--   </pre>
--   
--   see examples (available as a part of distribution) for a more detailed
--   example.
module Network.MicrosoftAzure.ServiceBus.Topic

-- | publish a message containing <a>ByteString</a> to a topic.
--   
--   The following publishes a strict bytestring bs to topic t\
--   
--   <pre>
--   sendTopicBS t bs ctx
--   </pre>
sendTopicBS :: String -> ByteString -> SBContext -> IO ()

-- | publish a message containing <a>ByteString</a> to a topic
--   
--   The following publishes a lazy bytestring ,lbs, to topic t,
--   
--   <pre>
--   sendTopicLBS t lbs  ctx
--   </pre>
sendTopicLBS :: String -> ByteString -> SBContext -> IO ()

-- | publish from a <a>Source</a> (refer to <a>requestBodySource</a>)
sendTopicBodySrc :: String -> Int64 -> Source IO ByteString -> SBContext -> IO ()

-- | Reads and deletes the message from a topic at a given subscription.
--   
--   In order to destructively read the latest message from the
--   subscription <i>subsc</i> on topic <i>t</i> (with a time out of n
--   seconds),
--   
--   <tt> destructiveRead t subsc n context </tt> Note that the timeout can
--   be at the most 55 seconds.
destructiveRead :: String -> String -> Int -> SBContext -> IO (ByteString)

-- | Peek Lock Message from a Topic. Non-Destructive Read.
--   
--   Atomically retrieves the message from a topic (on a given
--   subscription) without deleting it. The message is locked for a
--   duration so that it is not visible to other receivers.
--   
--   Refer <a>ServiceBus documentation</a> for semantics of the underlying
--   REST API.
peekLockTopic :: String -> String -> Int -> SBContext -> IO (LockedMsgInfo, ByteString)


-- | Provides API to pull from and push to ServiceBus queue Please refer to
--   <a>Service Bus Rest API</a> for information on the API provided by
--   Microsoft Service bus.
--   
--   Simple example for how to use this library is as below
--   
--   <pre>
--    import Network.MicrosoftAzure.ServiceBus.Queue
--    import Network.MicrosoftAzure.ServiceBus
--    import qualified Data.ByteString.Char8 as C
--   
--   queueName = <a>queueName</a>
--    sbNamespace = <a>namespace</a>
--    sbIssuerKey = C.pack <a>1287361251262as=</a>
--    sbIssuerName = C.pack <a>owner</a>
--   
--   sbinfo = SBInfo sbNamespace sbIssuerName sbIssuerKey
--    message = C.pack <a>Hello from Haskell</a>
--   
--   main = do
--      sbContext &lt;- sbContext sbinfo
--      enQueueBS queueName message sbContext
--      res &lt;- deQueue queueName 30 sbContext
--      print res
--   </pre>
--   
--   see examples (available as a part of distribution) for a more detailed
--   example.
module Network.MicrosoftAzure.ServiceBus.Queue

-- | <a>QLockedMsgInfo</a> provides Information of the locked message from
--   a queue.
data QLockedMsgInfo

-- | publish a message containing <a>ByteString</a> to queue.
--   
--   The following publishes a strict bytestring bs to queue q\
--   
--   <pre>
--   enQueueBS q bs ctx
--   </pre>
enQueueBS :: String -> ByteString -> SBContext -> IO ()

-- | publish a message containing <a>ByteString</a> to queue
--   
--   The following publishes a lazy bytestring ,lbs, to queue q,
--   
--   <pre>
--   enQueueLBS q lbs  ctx
--   </pre>
enQueueLBS :: String -> ByteString -> SBContext -> IO ()

-- | publish from a <a>Source</a> (refer to <a>requestBodySource</a>)
enQueueBodySrc :: String -> Int64 -> Source IO ByteString -> SBContext -> IO ()

-- | Reads and deletes the message from a queue.
--   
--   In order to destructively read the latest message from the queue (with
--   a time out of n seconds),
--   
--   <tt> deQueue queueName n context </tt> Note that the timeout can be at
--   the most 55 seconds. This silently ignores the timeouts greater than
--   55
deQueue :: String -> Int -> SBContext -> IO (ByteString)

-- | Peek Lock Message from a Queue. Non-Destructive Read.
--   
--   Atomically retrieves the next message from a queue and locks it for
--   further processing. The message is guaranteed not to be delivered to
--   other receivers (on the same subscription) during the duration of the
--   lock.
--   
--   Refer <a>ServiceBus documentation</a> for semantics of the underlying
--   REST API.
peekLockQueue :: String -> Int -> SBContext -> IO (LockedMsgInfo, ByteString)
instance Show QLockedMsgInfo


-- | Haskell API for working with <a>Microsoft Azure ServiceBus</a>
module Network.MicrosoftAzure.ServiceBus

-- | <a>SBInfo</a> is encapsulation of Connection Information needed to
--   connect to a Service Bus Namespace.
--   
--   This information is typically found when you click on the
--   <i>Connection Information</i> link on the azure portal and comprises
--   of
--   
--   <ul>
--   <li>ServiceBus namespace</li>
--   <li>Issuer Name</li>
--   <li>Issuer Key</li>
--   </ul>
data SBInfo
SBInfo :: String -> ByteString -> ByteString -> SBInfo

-- | Abstract type representing the service bus context.
data SBContext

-- | BrokerProperties
data BrokerProperties
BrokerProperties :: Int -> Integer -> String -> String -> String -> String -> Integer -> String -> Integer -> BrokerProperties
deliveryCount :: BrokerProperties -> Int
enqueuedSeqNumber :: BrokerProperties -> Integer
enqueuedTimeUtc :: BrokerProperties -> String
lockToken :: BrokerProperties -> String
lockedUntilUtc :: BrokerProperties -> String
bpMessageId :: BrokerProperties -> String
bpSequenceNumber :: BrokerProperties -> Integer
bpState :: BrokerProperties -> String
bpTimeToLive :: BrokerProperties -> Integer

-- | a convenience function, where issuer name is owner
simpleSBInfo :: String -> String -> SBInfo

-- | Create SB Context from <a>SBInfo</a>
sbContext :: SBInfo -> IO SBContext

-- | Unlock a messages that has been locked earlier.
--   
--   see <a>peekLockTopic</a> and <a>peekLockQueue</a>.
--   
--   Also consult <a>Unlock message from Queue</a> and <a>Unlock message
--   from Subscription</a> for details on the underlying REST API.
unlockMessage :: LockedMsgInfo -> SBContext -> IO ()

-- | Renews lock on a locked message
--   
--   see <a>peekLockTopic</a> and <a>peekLockQueue</a>.
--   
--   Also consult <a>Renew Lock for message from Queue</a> and
--   <a>Renew-Lock for a message from subscription</a> for details on the
--   underlying REST API.
renewLock :: LockedMsgInfo -> SBContext -> IO ()

-- | Delete a message that has been locked earlier.
--   
--   see <a>peekLockTopic</a> and <a>peekLockQueue</a>.
--   
--   Also consult <a>Delete Message from a Queue</a> and <a>Delete Message
--   from Subscription</a> for details on the underlying REST API.
deleteMessage :: LockedMsgInfo -> SBContext -> IO ()


-- | __ Deprecated __ Use <a>Network.MicrosoftAzure.ServiceBus.Topic</a>
--   instead.
--   
--   Provides API to pull from and push to ServiceBus topic Please refer to
--   <a>Service Bus Rest API</a> for information on the API provided by
--   Microsoft Service bus.
--   
--   Simple example for how to use this library is as below
--   
--   <pre>
--    import Web.WindowsAzure.ServiceBus.Topic
--    import Web.WindowsAzure.ServiceBus
--    import qualified Data.ByteString.Char8 as C
--   
--   topicName = <a>topicName</a>
--    subscriptionName = <a>subscriptionName</a>
--    sbNamespace = <a>namespace</a>
--    sbIssuerKey = C.pack <a>1287361251262as=</a>
--    sbIssuerName = C.pack <a>owner</a>
--   
--   sbinfo = SBInfo sbNamespace sbIssuerName sbIssuerKey
--    message = C.pack <a>Hello from Haskell</a>
--   
--   main = do
--      sbContext &lt;- sbContext sbinfo
--      sendTopicBS topicName message sbContext
--      res &lt;- destructiveRead topicName subscriptionName 30 sbContext
--      print res
--   </pre>
--   
--   see examples (available as a part of distribution) for a more detailed
--   example.
module Web.WindowsAzure.ServiceBus.Topic

-- | publish a message containing <a>ByteString</a> to a topic.
--   
--   The following publishes a strict bytestring bs to topic t\
--   
--   <pre>
--   sendTopicBS t bs ctx
--   </pre>
sendTopicBS :: String -> ByteString -> SBContext -> IO ()

-- | publish a message containing <a>ByteString</a> to a topic
--   
--   The following publishes a lazy bytestring ,lbs, to topic t,
--   
--   <pre>
--   sendTopicLBS t lbs  ctx
--   </pre>
sendTopicLBS :: String -> ByteString -> SBContext -> IO ()

-- | publish from a <a>Source</a> (refer to <a>requestBodySource</a>)
sendTopicBodySrc :: String -> Int64 -> Source IO ByteString -> SBContext -> IO ()

-- | Reads and deletes the message from a topic at a given subscription.
--   
--   In order to destructively read the latest message from the
--   subscription <i>subsc</i> on topic <i>t</i> (with a time out of n
--   seconds),
--   
--   <tt> destructiveRead t subsc n context </tt> Note that the timeout can
--   be at the most 55 seconds.
destructiveRead :: String -> String -> Int -> SBContext -> IO (ByteString)

-- | Peek Lock Message from a Topic. Non-Destructive Read.
--   
--   Atomically retrieves the message from a topic (on a given
--   subscription) without deleting it. The message is locked for a
--   duration so that it is not visible to other receivers.
--   
--   Refer <a>ServiceBus documentation</a> for semantics of the underlying
--   REST API.
peekLockTopic :: String -> String -> Int -> SBContext -> IO (LockedMsgInfo, ByteString)


-- | __ deprecated __ Use <a>Network.MicrosoftAzure.ServiceBus.Queue</a>
--   instead.
--   
--   Provides API to pull from and push to ServiceBus queue Please refer to
--   <a>Service Bus Rest API</a> for information on the API provided by
--   Microsoft Service bus.
--   
--   Simple example for how to use this library is as below
--   
--   <pre>
--    import Web.WindowsAzure.ServiceBus.Queue
--    import Web.WindowsAzure.ServiceBus
--    import qualified Data.ByteString.Char8 as C
--   
--   queueName = <a>queueName</a>
--    sbNamespace = <a>namespace</a>
--    sbIssuerKey = C.pack <a>1287361251262as=</a>
--    sbIssuerName = C.pack <a>owner</a>
--   
--   sbinfo = SBInfo sbNamespace sbIssuerName sbIssuerKey
--    message = C.pack <a>Hello from Haskell</a>
--   
--   main = do
--      sbContext &lt;- sbContext sbinfo
--      enQueueBS queueName message sbContext
--      res &lt;- deQueue queueName 30 sbContext
--      print res
--   </pre>
--   
--   see examples (available as a part of distribution) for a more detailed
--   example.
module Web.WindowsAzure.ServiceBus.Queue

-- | <a>QLockedMsgInfo</a> provides Information of the locked message from
--   a queue.
data QLockedMsgInfo

-- | publish a message containing <a>ByteString</a> to queue.
--   
--   The following publishes a strict bytestring bs to queue q\
--   
--   <pre>
--   enQueueBS q bs ctx
--   </pre>
enQueueBS :: String -> ByteString -> SBContext -> IO ()

-- | publish a message containing <a>ByteString</a> to queue
--   
--   The following publishes a lazy bytestring ,lbs, to queue q,
--   
--   <pre>
--   enQueueLBS q lbs  ctx
--   </pre>
enQueueLBS :: String -> ByteString -> SBContext -> IO ()

-- | publish from a <a>Source</a> (refer to <a>requestBodySource</a>)
enQueueBodySrc :: String -> Int64 -> Source IO ByteString -> SBContext -> IO ()

-- | Reads and deletes the message from a queue.
--   
--   In order to destructively read the latest message from the queue (with
--   a time out of n seconds),
--   
--   <tt> deQueue queueName n context </tt> Note that the timeout can be at
--   the most 55 seconds. This silently ignores the timeouts greater than
--   55
deQueue :: String -> Int -> SBContext -> IO (ByteString)

-- | Peek Lock Message from a Queue. Non-Destructive Read.
--   
--   Atomically retrieves the next message from a queue and locks it for
--   further processing. The message is guaranteed not to be delivered to
--   other receivers (on the same subscription) during the duration of the
--   lock.
--   
--   Refer <a>ServiceBus documentation</a> for semantics of the underlying
--   REST API.
peekLockQueue :: String -> Int -> SBContext -> IO (LockedMsgInfo, ByteString)
instance Show QLockedMsgInfo


-- | __deprecated__ Use <a>Network.MicrosoftAzure.ServiceBus</a> instead.
--   
--   Haskell API for working with <a>Microsoft Azure ServiceBus</a>
module Web.WindowsAzure.ServiceBus

-- | <a>SBInfo</a> is encapsulation of Connection Information needed to
--   connect to a Service Bus Namespace.
--   
--   This information is typically found when you click on the
--   <i>Connection Information</i> link on the azure portal and comprises
--   of
--   
--   <ul>
--   <li>ServiceBus namespace * Issuer Name * Issuer Key</li>
--   </ul>
data SBInfo
SBInfo :: String -> ByteString -> ByteString -> SBInfo

-- | Abstract type representing the service bus context.
data SBContext

-- | BrokerProperties
data BrokerProperties
BrokerProperties :: Int -> Integer -> String -> String -> String -> String -> Integer -> String -> Integer -> BrokerProperties
deliveryCount :: BrokerProperties -> Int
enqueuedSeqNumber :: BrokerProperties -> Integer
enqueuedTimeUtc :: BrokerProperties -> String
lockToken :: BrokerProperties -> String
lockedUntilUtc :: BrokerProperties -> String
bpMessageId :: BrokerProperties -> String
bpSequenceNumber :: BrokerProperties -> Integer
bpState :: BrokerProperties -> String
bpTimeToLive :: BrokerProperties -> Integer

-- | a convenience function, where issuer name is owner
simpleSBInfo :: String -> String -> SBInfo

-- | Create SB Context from <a>SBInfo</a>
sbContext :: SBInfo -> IO SBContext

-- | Unlock a messages that has been locked earlier.
--   
--   see <a>peekLockTopic</a> and <a>peekLockQueue</a>.
--   
--   Also consult <a>Unlock message from Queue</a> and <a>Unlock message
--   from Subscription</a> for details on the underlying REST API.
unlockMessage :: LockedMsgInfo -> SBContext -> IO ()

-- | Renews lock on a locked message
--   
--   see <a>peekLockTopic</a> and <a>peekLockQueue</a>.
--   
--   Also consult <a>Renew Lock for message from Queue</a> and
--   <a>Renew-Lock for a message from subscription</a> for details on the
--   underlying REST API.
renewLock :: LockedMsgInfo -> SBContext -> IO ()

-- | Delete a message that has been locked earlier.
--   
--   see <a>peekLockTopic</a> and <a>peekLockQueue</a>.
--   
--   Also consult <a>Delete Message from a Queue</a> and <a>Delete Message
--   from Subscription</a> for details on the underlying REST API.
deleteMessage :: LockedMsgInfo -> SBContext -> IO ()
