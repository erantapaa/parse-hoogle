-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A modified Merkle Patricia DB
--   
--   The modified Merkle Patricia DB described in the Ethereum Yellowpaper
@package ethereum-merkle-patricia-db
@version 0.0.1


-- | This is an implementation of the modified Merkle Patricia database
--   described in the Ethereum Yellowpaper
--   (<a>http://gavwood.com/paper.pdf</a>). This modified version works
--   like a canonical Merkle Patricia database, but includes certain
--   optimizations. In particular, a new type of "shortcut node" has been
--   added to represent multiple traditional nodes that fall in a linear
--   string (ie- a stretch of parent child nodes where no branch choices
--   exist).
--   
--   A Merkle Patricia Database effeciently retains its full history, and a
--   snapshot of all key-value pairs at a given time can be looked up using
--   a "stateRoot" (a pointer to the root of the tree representing that
--   data). Many of the functions in this module work by updating this
--   object, so for anything more complicated than a single update, use of
--   the state monad is recommended.
--   
--   The underlying data is actually stored in LevelDB. This module
--   provides the logic to organize the key-value pairs in the appropriate
--   Patricia Merkle Tree.
module Blockchain.Database.MerklePatricia

-- | The type of the database key
type Key = NibbleString

-- | The type of the values in the database
type Val = RLPObject
initializeBlank :: MPDB -> ResourceT IO ()

-- | Adds a new key/value pair.
putKeyVal :: MPDB -> Key -> Val -> ResourceT IO MPDB

-- | Retrieves all key/value pairs whose key starts with the given
--   parameter.
getKeyVals :: MPDB -> Key -> ResourceT IO [(Key, Val)]

-- | Deletes a key (and its corresponding data) from the database.
--   
--   Note that the key/value pair will still be present in the history, and
--   can be accessed by using an older <a>MPDB</a> object.
deleteKey :: MPDB -> Key -> ResourceT IO MPDB

-- | This is the database reference type, contianing both the handle to the
--   underlying database, as well as the stateRoot to the current tree
--   holding the data.
--   
--   The MPDB acts a bit like a traditional database handle, although
--   because it contains the stateRoot, many functions act by updating its
--   value. Because of this, it is recommended that this item be stored and
--   modified within the state monad.
data MPDB
MPDB :: DB -> SHAPtr -> MPDB
ldb :: MPDB -> DB
stateRoot :: MPDB -> SHAPtr

-- | This function is used to create an MPDB object corresponding to the
--   blank database. After creation, the stateRoot can be changed to a
--   previously saved version.
openMPDB :: String -> ResourceT IO MPDB

-- | Internal nodes are indexed in the underlying database by their 256-bit
--   SHA3 hash. This types represents said hash.
--   
--   The stateRoot is of this type, (ie- the pointer to the full set of
--   key/value pairs at a particular time in history), and will be of
--   interest if you need to refer to older or parallel version of the
--   data.
newtype SHAPtr
SHAPtr :: ByteString -> SHAPtr

-- | The stateRoot of the empty database.
emptyTriePtr :: SHAPtr
