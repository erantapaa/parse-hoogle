-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Parallel batch driver for QuickCheck
--   
--   Parallel batch driver for QuickCheck
@package pqc
@version 0.8


-- | A parallel batch driver for running QuickCheck on threaded or SMP
--   systems. See the <i>Example.hs</i> file for a complete overview.
module Test.QuickCheck.Parallel

-- | Run a list of QuickCheck properties in parallel chunks, and test to a
--   depth of <tt>d</tt> (first argument). Parallel Chunks is Haskell
--   thread that can run truly simultaneously (on separate physical
--   processors) at any given time.
--   
--   Compile your application with '-threaded' and run with the SMP
--   runtime's '-N4' (or however many OS threads you want to donate), for
--   best results.
--   
--   <pre>
--   import Test.QuickCheck.Parallel
--   
--   pRun 1000
--      [ ("sort1", pDet prop_sort1)
--      , ("sort2", pDet prop_sort2) ]
--   </pre>
--   
--   with SMP runtime's '-N[n]' flag will run <tt>n</tt> threads over the
--   property list, to depth 1000. (see <a>getNumCapabilities</a> for more
--   details.)
pRun :: Depth -> [Test] -> IO ()

-- | Variant of <a>pRun</a>. Run a list of QuickCheck properties in
--   parallel chunks, using all Processors.
pRunAllProcessors :: Depth -> [Test] -> IO ()

-- | Variant of <a>pRun</a>. Run a list of QuickCheck properties in
--   parallel chunks, using <tt>n</tt> Haskell threads (first argument),
--   and test to a depth of <tt>d</tt> (second argument). Compile your
--   application with '-threaded' and run with the SMP runtime's '-N4' (or
--   however many OS threads you want to donate), for best results.
--   
--   <pre>
--   import Test.QuickCheck.Parallel
--   
--   do n &lt;- getArgs &gt;&gt;= readIO . head
--      pRunWithNum n 1000 [ ("sort1", pDet prop_sort1) ]
--   </pre>
--   
--   Will run <tt>n</tt> threads over the property list, to depth 1000.
--   
--   If you want to specify <tt>n</tt> by using '-N[n]' or
--   <a>setNumCapabilities</a>, use <a>pRun</a> instead of this function.
pRunWithNum :: Int -> Depth -> [Test] -> IO ()

-- | A name or description for test
type Name = String

-- | Maximum number of successful test values
type Depth = Int

-- | Test case for parallel batch driver
type Test = (Name, Depth -> IO Result)

-- | Wrap a property, and run it on a deterministic set of data
pDet :: Testable a => a -> Depth -> IO Result

-- | Wrap a property, and run it on a non-deterministic set of data
pNon :: Testable a => a -> Depth -> IO Result
