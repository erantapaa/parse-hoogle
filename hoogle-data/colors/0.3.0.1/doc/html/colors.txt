-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A type for colors
--   
@package colors
@version 0.3.0.1


-- | Classes for colors
module Data.Color.Class
class HasRGB f
fromRGB :: (HasRGB f, RealFrac a) => a -> a -> a -> f a
_Red :: (HasRGB f, RealFrac a) => Lens' (f a) a
_Green :: (HasRGB f, RealFrac a) => Lens' (f a) a
_Blue :: (HasRGB f, RealFrac a) => Lens' (f a) a
class HasHSB f
fromHSB :: (HasHSB f, RealFrac a) => a -> a -> a -> f a
_Hue :: (HasHSB f, RealFrac a) => Lens' (f a) a
_Saturation :: (HasHSB f, RealFrac a) => Lens' (f a) a
_Brightness :: (HasHSB f, RealFrac a) => Lens' (f a) a
class HasAlpha f
_Alpha :: HasAlpha f => Lens' (f a) a
_8Bit :: RealFrac a => Iso' a Word8


-- | Entities
module Data.Color.Names
white :: (HasRGB f, RealFrac a) => f a
gray :: (HasRGB f, RealFrac a) => f a
black :: (HasRGB f, RealFrac a) => f a
red :: (HasRGB f, RealFrac a) => f a
green :: (HasRGB f, RealFrac a) => f a
blue :: (HasRGB f, RealFrac a) => f a
yellow :: (HasRGB f, RealFrac a) => f a
cyan :: (HasRGB f, RealFrac a) => f a
magenta :: (HasRGB f, RealFrac a) => f a


-- | RGBAs and its operations
module Data.Color
type RGBA = V4
type Color = RGBA

-- | Blend two colors.
blend :: (Functor f, Additive f, Num a) => a -> f a -> f a -> f a

-- | <i>Deprecated: Use (*) instead</i>
multRGBA :: Integer -> Integer -> Integer
instance Fractional a => IsString (V4 a)
instance HasAlpha V4
instance HasHSB V4
instance HasRGB V4
