-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Differential solving with lazy splines
--   
@package lazysplines
@version 0.2


-- | This module consists of source code to accompany the draft paper:
--   "Declarative Equations, Compositional Strategies: Solving Differential
--   Systems with Lazy Splines" at
--   <a>http://gbaz.github.io/slides/ode-draft-2009.pdf</a>.
--   
--   See the paper for a description of how the system works, and the
--   source of the Examples module for usage.
--   
--   Some slides from a more recent description of the core mechanism are
--   at <a>http://gbaz.github.io/slides/integration.html</a>.
module Numeric.LazySplines

-- | Something that can be sampled.
class Sampleable a
at :: Sampleable a => a -> Double -> Double
type Poly = [Double]
type PolySegment = (Double, Poly)
type Spline = [PolySegment]
type SplinePredicate = Double -> Double -> Poly -> Double
duration :: Spline -> Double
maxDuration :: Double
liftS :: Double -> Spline
deriveSpline :: Spline -> Spline
integrateSpline :: Spline -> Spline
inSpline2 :: (Poly -> Poly -> Poly) -> Spline -> Spline -> Spline
shiftBy :: Double -> Poly -> Poly
mapSpline :: Bool -> (Double -> Double -> Poly -> Poly) -> Spline -> Spline
match :: a -> [a] -> [a]
matchScale :: Double -> Double -> [Double] -> [Double]
trimmingTo :: Spline -> Int -> Spline
extrapForward :: Spline -> Double -> Spline
scaleRest :: Poly -> Double -> Poly
satisfying :: Spline -> (Double, SplinePredicate) -> Spline
splitWhen :: Spline -> (Double, Double, SplinePredicate) -> Spline
extendWhen :: Spline -> (Double, Double, SplinePredicate) -> Spline
lastDef :: t -> [t] -> t
trimSmart :: Spline -> SplinePredicate -> Spline
headDef :: t -> [t] -> t
(#) :: (Num [a], Num a, Eq a) => [a] -> [a] -> [a]
integ :: [Double] -> [Double]
diff :: Num c => [c] -> [c]
countFrom :: Num a => a -> [a]
dropZeros :: [Double] -> [Double]
newton :: Double -> (Double -> Double) -> [Double]
pickValue :: Double -> (a -> Double) -> [a] -> a
findValue :: Double -> (a -> Double) -> (Double -> a) -> a
instance Fractional Poly
instance Num Poly
instance Num Spline
instance Sampleable Spline
instance Sampleable PolySegment
instance Sampleable [Poly]
instance Sampleable Poly

module Numeric.LazySplines.Examples
duckDeathAtAge :: [(Double, [Double])]
initialLife :: [(Double, [Double])]
survival :: Spline
duckLife :: [(Double, [Double])]
duckLife' :: [(Double, [Double])]
initialSpring :: [(Double, [Double])]
spring'' :: Spline
spring :: Spline
spring2'' :: Spline
spring2 :: [(Double, [Double])]
flameDefect :: Spline -> Spline
initialFlame :: [(Double, [Double])]
flame' :: Spline
flame :: Spline
flamePred :: SplinePredicate
flame2' :: Spline
flame2 :: Spline
flame3' :: Spline
flame3 :: Spline
flame4' :: Spline
flame4 :: Spline
flame5' :: Spline
flame5 :: Spline
