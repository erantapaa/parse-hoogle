-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings for libpuz
--   
--   Provides support for reading and writing the .puz crossword puzzle
--   format from haskell.
@package hpuz
@version 1.1.2

module Codec.Game.Puz

-- | The <a>Style</a> type enumerates the possible styles of fillable
--   squares. Currently, there are only two: plain squares and circled
--   squares.
data Style
Plain :: Style
Circle :: Style

-- | The <a>Square</a> type represents a square in a puzzle.
data Square

-- | Black squares
Black :: Square

-- | Standard letter squares, optionally filled in
Letter :: (Maybe Char) -> Style -> Square

-- | Rebus squares, optionally filled in
Rebus :: String -> Style -> Square
data Dir
Across :: Dir
Down :: Dir

-- | The <a>Puzzle</a> type represents a particular crossword. The
--   crossword's dimensions are specified by <a>width</a> and
--   <a>height</a>.
--   
--   The contents of the puzzle are given by two arrays of <a>Square</a>s -
--   <a>grid</a> and <a>solution</a>. The board arrays are in row-major
--   order and are numbered from (0,0) to (width-1,height-1). The
--   <a>grid</a> board represents the current state of play, and as such
--   its squares may be partially or entirely filled in, correctly or
--   incorrectly. The <a>solution</a> board should have the same basic
--   layout as the <a>grid</a> board (in terms of black vs letter squares),
--   and should be entirely filled in.
--   
--   Various other pieces of data about the puzzle are given bu
--   <a>title</a>, <a>author</a>, <a>notes</a> and <a>copyright</a>, all
--   <a>String</a>s.
--   
--   There is an optional <a>timer</a>, which is a number of seconds
--   elapsed and a bool that is true if the timer is stopped and false
--   otherwise.
--   
--   The field <a>clues</a> gives the puzzle's clues. The numbers in this
--   array correspond to the numbering that would appear on the grid. To
--   reconstruct this information, see the <a>numberGrid</a> function.
data Puzzle
Puzzle :: Int -> Int -> Array Index Square -> Array Index Square -> String -> String -> String -> String -> Maybe (Int, Bool) -> [(Int, Dir, String)] -> Maybe CUShort -> Puzzle
width :: Puzzle -> Int
height :: Puzzle -> Int
grid :: Puzzle -> Array Index Square
solution :: Puzzle -> Array Index Square
title :: Puzzle -> String
author :: Puzzle -> String
notes :: Puzzle -> String
copyright :: Puzzle -> String
timer :: Puzzle -> Maybe (Int, Bool)
clues :: Puzzle -> [(Int, Dir, String)]
locked :: Puzzle -> Maybe CUShort
type Index = (Int, Int)
numberGrid :: Array Index Square -> Array Index (Maybe Int)
unlockPuz :: Puzzle -> CUShort -> IO (Either ErrMsg Puzzle)
bruteForceUnlockPuz :: Puzzle -> IO (Either ErrMsg (Puzzle, Int))
loadPuzzle :: String -> IO (Either Puzzle ErrMsg)
savePuzzle :: String -> Puzzle -> IO (Maybe ErrMsg)
stringCksum :: String -> IO CUShort
instance Eq Style
instance Show Style
instance Eq Square
instance Show Square
instance Eq Dir
instance Show Dir
instance Show Puzzle
