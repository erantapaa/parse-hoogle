-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Efficient pipes-based cellular CSV codec
--   
--   This library provides an efficient pipes-based implementation of a
--   cellular CSV codec designed for fast streaming of data with guaranteed
--   constant memory usage.
@package pipes-cellular-csv
@version 1.0.0.0


-- | CSV syntax elements as defined in RFC 4180.
module Pipes.CSV.Syntax

-- | line byte value

-- | carriage return byte value

-- | quote character byte value

-- | comma character byte value

-- | Identifies special byte values, which should never appear within
--   unquoted CSV fields.
isSpecial :: Word8 -> Bool

-- | The field delimiter string (a quote character.)
fieldDelimiter :: ByteString

-- | The field separator string (a comma character.)
fieldSeparator :: ByteString

-- | The field separator (CR+LF byte sequence.)
recordSeparator :: ByteString

-- | An escaped quote string (double quote character.)
quoteSequence :: ByteString


-- | Streaming CSV file decoder compliant with RFC 4180. All fields are
--   quoted except for short fields consisting entirely of “safe” ASCII
--   characters, i.e., printable 7-bit characters other than quote and
--   comma. The maximum length of an unquoted field is supplied explicitly
--   to the encoder, which allows us to decide whether a given field
--   requires quoting without unbounded lookahead.
module Pipes.CSV.Encoder

-- | <tt>encodeCSV n</tt> is an infinite pipe that converts a stream of
--   cells into a fragmented strict representation of of a CSV file,
--   unconditionally quoting any field values with length greater than
--   <tt>n</tt>.
encodeCSV :: Monad m => Int -> Pipe (Cell ByteString) ByteString m ()

-- | <tt>encodeLazyCSV n</tt> is an infinite pipe that converts a stream of
--   cells into a fragmented lazy representation of of a CSV file,
--   unconditionally quoting any field values with length greater than
--   <tt>n</tt>.
encodeLazyCSV :: Monad m => Int -> Pipe (Cell ByteString) ByteString m ()


-- | Streaming CSV file decoder compliant with RFC 4180. It follows the RFC
--   4180 quite strictly, with the following minor extensions:
--   
--   <ul>
--   <li>arbitrary characters, including ASCII control codes and non-ASCII
--   code points are accepted anywhere in the input,</li>
--   <li>CR and LF are accepted as row separators in addition to the
--   standard CR+LF,</li>
--   <li>rows can have varying number of fields,</li>
--   <li>within quoted field, a quote character that is not followed by
--   another quote, comma or line break is accepted literally.</li>
--   </ul>
module Pipes.CSV.Decoder

-- | An infinite pipe that parses a fragmented strict representation of of
--   a CSV file into a stream of cells.
decodeCSV :: Monad m => Pipe ByteString (Cell ByteString) m ()

-- | An infinite pipe that parses a fragmented lazy representation of of a
--   CSV file into a stream of cells.
decodeLazyCSV :: Monad m => Pipe ByteString (Cell ByteString) m ()
