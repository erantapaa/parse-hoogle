-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Event handlers
--   
--   Simple event handler set management.
@package event-handlers
@version 0.0.0.3

module Data.Handler

-- | A collection of handlers that can be fired in a batch. Consists of a
--   collection of handlers and a sequencing rule that determines how
--   multiple handlers are ordered and their results threaded or
--   aggregated.
data HandlerSet m a b

-- | An opaque identifier for handlers, useful for removing them from a set
--   later.
data HandlerID

-- | Create a new handler set with a simple default sequencer
--   (<a>sequenceHandlers</a> ())
emptyHandlerSet :: Monad m => HandlerSet m a ()

-- | Create a new handler set using the provided function to coordinate the
--   dispatch of the handlers
emptyHandlerSetWithSequencer :: (a -> [a -> m b] -> m b) -> HandlerSet m a b

-- | Replace the handler sequencing rule in a <a>HandlerSet</a>.
setHandlerSequencer :: (a -> [a -> m b] -> m b) -> HandlerSet m a b -> HandlerSet m a b

-- | Add a handler to a set and return the updated set and the assigned
--   <a>HandlerID</a>
addHandlerToSet :: (a -> m b) -> HandlerSet m a b -> (HandlerSet m a b, HandlerID)

-- | Attempt to remove a handler from a set (based on its
--   <a>HandlerID</a>), returning the modified set and the handler removed,
--   if any.
removeHandlerFromSet :: HandlerID -> HandlerSet m a b -> (HandlerSet m a b, Maybe (a -> m b))

-- | Invoke the handlers in a <a>HandlerSet</a> with the provided input.
invokeHandlers :: Monad m => HandlerSet m a b -> a -> m b
instance Eq HandlerID
instance Ord HandlerID
instance Enum HandlerID
