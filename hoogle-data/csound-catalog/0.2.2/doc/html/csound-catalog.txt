-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | a gallery of Csound instruments.
--   
@package csound-catalog
@version 0.2.2


-- | Resonators
module Csound.Catalog.Reson

-- | List of pairs of
--   
--   <pre>
--   [(centerFrequency, bandWidth)]
--   </pre>
--   
--   It's a list of parameters for a bunch of the band pass filters (like
--   reson, or bp). Reson is intended to be used with functions
--   <a>resons</a> and <a>resonsBy</a>.
type Reson = [(Sig, Sig)]
anO :: Reson
anA :: Reson
anE :: Reson
anIY :: Reson
anO2 :: Reson

-- | Produces a <a>wow</a>-effect if modifier rises and then falls down.
--   
--   <pre>
--   y = wow modifierSig x
--   </pre>
wow :: Sig -> Reson -> Reson
strikeModes :: Modes Sig -> Sig -> Sig
scrapeModes :: Modes Sig -> Sig -> SE Sig
modesInstr :: Modes Sig -> Sig -> Sig -> Sig
wetModesInstr :: D -> Modes Sig -> Sig -> Sig -> Sig
strike :: D -> SE Sig
scrape :: Sig -> Sig -> SE Sig
simpleStrike :: Sig
simpleScrape :: SE Sig
data Modes a
Modes :: [a] -> a -> [a] -> a -> Modes a
modesFrequencies :: Modes a -> [a]
modesQualityFactor :: Modes a -> a
modesQualityRatios :: Modes a -> [a]
modesGain :: Modes a -> a
fromModes :: Num a => Modes a -> [(a, a)]
singleModes :: Fractional a => Modes a
dahinaModes :: Fractional a => Modes a
banyanModes :: Fractional a => Modes a
xylophoneModes :: Fractional a => Modes a
tibetanBowlModes180 :: Fractional a => Modes a
spinelSphereModes :: Fractional a => Modes a
potLidModes :: Fractional a => Modes a
redCedarWoodPlateModes :: Fractional a => Modes a
tubularBellModes :: Fractional a => Modes a
redwoodPlateModes :: Fractional a => Modes a
douglasFirWoodPlateModes :: Fractional a => Modes a
uniformWoodenBarModes :: Fractional a => Modes a
uniformAluminumBarModes :: Fractional a => Modes a
vibraphoneModes1 :: Fractional a => Modes a
vibraphoneModes2 :: Fractional a => Modes a
chalandiPlatesModes :: Fractional a => Modes a
tibetanBowlModes152 :: Fractional a => Modes a
tibetanBowlModes140 :: Fractional a => Modes a
wineGlassModes :: Fractional a => Modes a
smallHandbellModes :: Fractional a => Modes a
albertClockBellBelfastModes :: Fractional a => Modes a
woodBlockModes :: Fractional a => Modes a


-- | Envelopes
module Csound.Catalog.Envelope

-- | An exponential envelope for the percussive sound. It takes in a time
--   of the decay section.
percussive :: D -> Sig

-- | A reversed exponential envelope for the percussive sound. It takes a
--   time of the decay section of the original envelope.
revPercussive :: D -> Sig


-- | A gallery of sound processors (effects).
module Csound.Catalog.Effect

-- | Chorus effect, borrowed from
--   <a>http://www.jlpublishing.com/Csound.htm</a> I made some of its
--   parameters accesible trhough score delay in milliseconds (by John Lato
--   in Csound)
--   
--   <pre>
--   nightChorus idlym iscale asig
--   </pre>
--   
--   <ul>
--   <li>idlym -- delay in milliseconds</li>
--   <li>iscale -- amplitude of the vibrato on delay time (in
--   milliseconds).</li>
--   </ul>
nightChorus :: D -> D -> Sig -> Sig

-- | Reverb
--   
--   A bunch of delay lines FDN reverb, with feedback matrix based upon
--   physical modeling scattering junction of 8 lossless waveguides of
--   equal characteristic impedance. Based on Julius O. Smith III, "A New
--   Approach to Digital Reverberation using Closed Waveguide Networks,"
--   Proceedings of the International Computer Music Conference 1985, p.
--   47-53 (also available as a seperate publication from CCRMA), as well
--   as some more recent papers by Smith and others.
--   
--   Coded by Sean Costello, October 1999 (in Csound)
--   
--   <pre>
--   nightReverb n igain ipitchmod itone cps
--   </pre>
--   
--   <ul>
--   <li><tt>n</tt> -- a number of delay lines (typical value is 8)</li>
--   <li><tt>igain</tt> -- gain of reverb. adjust empirically for desired
--   reverb time. 0.6 gives a good small "live" room sound, 0.8 a small
--   hall, 0.9 a large hall, 0.99 an enormous stone cavern.</li>
--   <li><tt>ipitchmod</tt> -- amount of random pitch modulation for the
--   delay lines. 1 is the "normal" amount, but this may be too high for
--   held pitches such as piano tones. adjust to taste.</li>
--   <li><tt>itone</tt> -- cutoff frequency of lowpass filters in feedback
--   loops of delay lines, in hz. lower cutoff frequencies results in a
--   sound with more high-frequency damping.</li>
--   </ul>
nightReverb :: Int -> D -> D -> D -> Sig -> SE (Sig, Sig)

-- | A signal goes throgh the chain of varible delays. Delay time is
--   affected by vibrato.
--   
--   <pre>
--   aout = vibroDelay n delayBufferSize vibDepth vibRate asig
--   </pre>
--   
--   <ul>
--   <li><tt>n</tt> -- number of delay lines</li>
--   <li><tt>delayBufSize</tt> -- buffer size for the delay lines (it
--   should be greater than absolute maximum of the depth of the
--   vibrato)</li>
--   <li><tt>vibDepth</tt> -- the amplitude of the delay line time
--   vibrato</li>
--   <li><tt>vibRate</tt> -- the frequency of the delay lie time
--   vibrato</li>
--   </ul>
vibroDelay :: Int -> D -> Sig -> Sig -> Sig -> Sig

-- | A chain of delay lines.
--   
--   <pre>
--   delayLine n k dt asig
--   </pre>
--   
--   A signal (<tt>asig</tt>) is passed through the chain of fixed time
--   delays (A <tt>dt</tt> is the delay time <tt>n</tt> is a number of
--   filters, k - is scale of the signals that is passed through each delay
--   line).
delayLine :: Int -> D -> D -> Sig -> (Sig, Sig)

-- | Enhances all frequencies below the give frequency by the given
--   coefficient. Original signal is added to the filtered signal with
--   low-pass filter and scaled.
--   
--   <pre>
--   bassEnhancment centerFrequency coefficient asig
--   </pre>
bassEnhancment :: D -> D -> Sig -> Sig

-- | Adds a very short fade in to remove the click at the beggining of the
--   note.
declick :: Sig -> Sig

-- | Sweep band pass filter (center frequency ramps from one value to
--   another)
--   
--   <pre>
--   sweepFilter dur startCps endCps bandWidth asignal
--   </pre>
sweepFilter :: D -> D -> D -> Sig -> Sig -> Sig

-- | Sweep band pass filter in loops (center frequency ramps from one value
--   to another and back)
--   
--   <pre>
--   sweepFilter dur startCps endCps bandWidth asignal
--   </pre>
loopSweepFilter :: D -> D -> D -> Sig -> Sig -> Sig

-- | The effect that was used in the piece "Bay at night".
bayAtNight :: Sig -> SE (Sig, Sig)

-- | The effect that was used in the piece "Vestige of time".
vestigeOfTime :: Sig -> (Sig, Sig)


-- | Timbres
module Csound.Catalog.Wave

-- | An emulation of the flute. Parameters
--   
--   <pre>
--   flute seed vibDepth attack sustain decay brightnessLevel cps = 
--   </pre>
--   
--   <ul>
--   <li>seed - a seed for the random signals/numbers. It's in (0, 1)</li>
--   <li>vibDepth - Amount of the vibrato. It's in [-1, 1]</li>
--   <li>attack - duration of the attack. Recommended value: 0.12 for
--   slurred notes, 0.06 for tongued notes, 0.03 for short notes.</li>
--   <li>sustain - duration of the sustain</li>
--   <li>decay - duration of the decay. Recommended value: 0.1 (0.05 for
--   short notes).</li>
--   <li>brightnessLevel - filter cutoff factor. It's in (0, 1). The 0 is
--   40 Hz, the 1 s 10240 Hz</li>
--   <li>cps - frequency of the note</li>
--   </ul>
flute :: D -> D -> D -> D -> D -> D -> D -> Sig

-- | An emulation of the bass clarinet. Parameters
--   
--   <pre>
--   bassClarinet seed vibDepth attack sustain decay brightnessLevel cps = 
--   </pre>
--   
--   <ul>
--   <li>seed - a seed for the random signals/numbers. It's in (0, 1)</li>
--   <li>vibDepth - Amount of the vibrato. It's in [-1, 1]</li>
--   <li>attack - duration of the attack. Recommended value: 0.06 for
--   tongued notes, 0.03 for short notes.</li>
--   <li>sustain - duration of the sustain</li>
--   <li>decay - duration of the decay. Recommended value: 0.15 (0.04 for
--   short notes).</li>
--   <li>brightnessLevel - filter cutoff factor. It's in (0, 1). The 0 is
--   40 Hz, the 1 s 10240 Hz</li>
--   <li>cps - frequency of the note</li>
--   </ul>
bassClarinet :: D -> D -> D -> D -> D -> D -> D -> Sig

-- | An emulation of the french horn. Parameters
--   
--   <pre>
--   frenchHorn seed vibDepth attack sustain decay brightnessLevel cps = 
--   </pre>
--   
--   <ul>
--   <li>seed - a seed for the random signals/numbers. It's in (0, 1)</li>
--   <li>vibDepth - Amount of the vibrato. It's in [-1, 1]</li>
--   <li>attack - duration of the attack. Recommended value: 0.06 for
--   tongued notes (up to 0.12 for lower notes, up to G2), 0.03 for short
--   notes.</li>
--   <li>sustain - duration of the sustain</li>
--   <li>decay - duration of the decay. Recommended value: 0.25 (0.04 for
--   short notes).</li>
--   <li>brightnessLevel - filter cutoff factor. It's in (0, 1). The 0 is
--   40 Hz, the 1 s 10240 Hz</li>
--   <li>cps - frequency of the note</li>
--   </ul>
frenchHorn :: D -> D -> D -> D -> D -> D -> D -> Sig

-- | An emulation of the sheng. Parameters
--   
--   <pre>
--   sheng seed vibDepth attack sustain decay brightnessLevel cps = 
--   </pre>
--   
--   <ul>
--   <li>seed - a seed for the random signals/numbers. It's in (0, 1)</li>
--   <li>vibDepth - Amount of the vibrato. It's in [-1, 1]</li>
--   <li>attack - duration of the attack. Recommended value: 0.1, 0.03 for
--   short notes.</li>
--   <li>sustain - duration of the sustain</li>
--   <li>decay - duration of the decay. Recommended value: 0.2 (0.04 for
--   short notes).</li>
--   <li>brightnessLevel - filter cutoff factor. It's in (0, 1). The 0 is
--   40 Hz, the 1 s 10240 Hz</li>
--   <li>cps - frequency of the note</li>
--   </ul>
sheng :: D -> D -> D -> D -> D -> D -> D -> Sig

-- | An emulation of the hulusi. Parameters
--   
--   <pre>
--   hulusi seed vibDepth attack sustain decay brightnessLevel cps = 
--   </pre>
--   
--   <ul>
--   <li>seed - a seed for the random signals/numbers. It's in (0, 1)</li>
--   <li>vibDepth - Amount of the vibrato. It's in [-1, 1]</li>
--   <li>attack - duration of the attack. Recommended value: 0.03</li>
--   <li>sustain - duration of the sustain</li>
--   <li>decay - duration of the decay. Recommended value: 0.1 (0.04 for
--   short notes).</li>
--   <li>brightnessLevel - filter cutoff factor. It's in (0, 1). The 0 is
--   40 Hz, the 1 s 10240 Hz</li>
--   <li>cps - frequency of the note</li>
--   </ul>
hulusi :: D -> D -> D -> D -> D -> D -> D -> Sig

-- | An emulation of the dizi. Parameters
--   
--   <pre>
--   dizi seed vibDepth attack sustain decay brightnessLevel cps = 
--   </pre>
--   
--   <ul>
--   <li>seed - a seed for the random signals/numbers. It's in (0, 1)</li>
--   <li>vibDepth - Amount of the vibrato. It's in [-1, 1]</li>
--   <li>attack - duration of the attack. Recommended value: 0.12 for
--   slurred notes, 0.07 for tongued notes, 0.03 for short notes.</li>
--   <li>sustain - duration of the sustain</li>
--   <li>decay - duration of the decay. Recommended value: 0.14 (0.04 for
--   short notes).</li>
--   <li>brightnessLevel - filter cutoff factor. It's in (0, 1). The 0 is
--   40 Hz, the 1 s 10240 Hz</li>
--   <li>cps - frequency of the note</li>
--   </ul>
dizi :: D -> D -> D -> D -> D -> D -> D -> Sig

-- | <pre>
--   aout = pulseWidth amplitude cps
--   </pre>
pulseWidth :: Sig -> Sig -> Sig

-- | <pre>
--   aout &lt;- xanadu1 cps
--   </pre>
xanadu1 :: D -> SE Sig

-- | <pre>
--   aout &lt;- xanadu2 cps
--   </pre>
xanadu2 :: D -> SE Sig

-- | <pre>
--   stringPad amplitude cps
--   </pre>
stringPad :: Sig -> Sig -> Sig

-- | Tone wheel organ by Mikelson
--   
--   <pre>
--   toneWheel cps
--   </pre>
toneWheel :: D -> Sig

-- | Guitar, Michael Gogins
--   
--   <pre>
--   guitar cps
--   </pre>
guitar :: D -> Sig
harpsichord :: D -> Sig

-- | Xing by Andrew Horner
--   
--   <pre>
--   xing cycleDuration cps
--   </pre>
xing :: D -> Sig -> Sig

-- | FM modulated left and right detuned chorusing, Thomas Kung
--   
--   <pre>
--   fmMod cycleDuration cps
--   </pre>
fmMod :: D -> Sig -> Sig

-- | Filtered chorus, Michael Bergeman
--   
--   <pre>
--   filteredChorus cycleDuration cps
--   </pre>
filteredChorus :: D -> Sig -> Sig

-- | Plain plucked string, Michael Gogins
--   
--   <pre>
--   plainString cps
--   </pre>
plainString :: D -> Sig

-- | Tubular bell model, Perry Cook
--   
--   <pre>
--   fmTubularBell cps
--   </pre>
fmTubularBell :: Sig -> Sig

-- | Delayed plucked string, Michael Gogins
--   
--   <pre>
--   delayedString cps
--   </pre>
delayedString :: D -> Sig

-- | Melody (Chebyshev <i> FM </i> additive), Jon Nelson
--   
--   <pre>
--   melody cycleDuration cps
--   </pre>
melody :: D -> Sig -> SE Sig

-- | Rhodes electric piano model, Perry Cook
--   
--   <pre>
--   rhodes cps
--   </pre>
rhodes :: Sig -> Sig

-- | Tibetan chant. It's a chorus of many sinusoids.
--   
--   <pre>
--   tibetan n off cps
--   </pre>
--   
--   <ul>
--   <li>n - the number of sinusoids (the best is 9)</li>
--   <li>off - frequency step of the harmonics ~ (0.01, 0.03)</li>
--   <li>cps - the frequency of the note</li>
--   </ul>
tibetan :: Int -> Sig -> D -> Sig

-- | <pre>
--   nightPad fadeInTime cps
--   </pre>
nightPad :: D -> Sig -> Sig

-- | The saw is filtered with band pass filter. Centere frequency of the
--   filter can vary.
--   
--   <pre>
--   filteredSaw centerFrequency sawCps
--   </pre>
filteredSaw :: Sig -> Sig -> Sig

-- | Filtered saw with rising envelope. Centere frequency starts at 500 Hz
--   and then rises to 5000 by <tt>riseDur</tt> seconds.
--   
--   <pre>
--   filteredSawRising riseDur cps
--   </pre>
filteredSawRising :: D -> Sig -> Sig

-- | Filtered saw with falling envelope. Centere frequency starts at 5000
--   Hz and then falls down to 500 by <tt>riseDur</tt> seconds.
--   
--   <pre>
--   filteredSawFalling riseDur cps
--   </pre>
filteredSawFalling :: D -> Sig -> Sig

-- | The white noise is filtered with band pass filter. Centere frequency
--   of the filter can vary.
--   
--   <pre>
--   filteredNoise centerFrequency sawCps
--   </pre>
filteredNoise :: Sig -> Sig -> SE Sig

-- | Signal is passed through three band-pass filters. We can alter the
--   relative center frequencies of the filters.
--   
--   <pre>
--   resonInstr filt1 filt2 filt3 amp cps = aout
--   </pre>
resonInstr :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | <pre>
--   simpleResonInstr cycleLength cps
--   </pre>
simpleResonInstr :: D -> Sig -> Sig

-- | Vibrato and resonant filter with varying center frequency.
--   
--   <pre>
--   resonVibrato vibDepth vibRate filtCps amp cps = aout
--   </pre>
resonVibrato :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Delayed saw wave.
delaySaw :: Sig -> Sig

-- | Singing a reson's vowels (see <a>Csound.Catalog.Reson</a>).
femaleVowel :: Reson -> Sig -> Sig

-- | Detuned bell.
--   
--   <pre>
--   amBell amp cps
--   </pre>
amBell :: D -> Sig -> Sig

-- | Simple marimba (by John Fitch) with percussive envelope.
--   
--   <pre>
--   simpleMarimba noteDur cps
--   </pre>
simpleMarimba :: D -> Sig -> Sig

-- | Simple marimba (by John Fitch) without fixed envelope.
--   
--   <pre>
--   marimba noteDur amp cps
--   </pre>
marimbaWave :: D -> Sig -> Sig -> Sig

-- | <pre>
--   phasingSynth amp cps
--   </pre>
phasingSynth :: Sig -> Sig -> Sig

-- | <pre>
--   noiz cps
--   </pre>
noiz :: Sig -> SE Sig

-- | Sound of the wind.
--   
--   <pre>
--   wind noteDur (bandRise, bandDecay) (freqRise, freqDecay) attackDecayRatio
--   </pre>
--   
--   <ul>
--   <li>* bandRise, banDecay, freqRise, freqDecay -- (50, 1000)</li>
--   <li>attackDecayRatio -- (0, 1)</li>
--   </ul>
wind :: D -> (D, D) -> (D, D) -> D -> SE Sig

-- | Deep kick sound.
heartbeat :: Sig

-- | <pre>
--   monoPluck xdur cps
--   </pre>
monoPluck :: D -> D -> Sig

-- | <pre>
--   chorusel dur rise dec cps
--   </pre>
--   
--   <ul>
--   <li>dur - note duration</li>
--   <li>rise - rise time</li>
--   <li>dec - decay time</li>
--   <li>cps - frequency of the note</li>
--   </ul>
chorusel :: D -> D -> D -> Sig -> (Sig, Sig)

-- | <pre>
--   ivory xdur glisDur vibRate cpsCoeff cps
--   </pre>
ivory :: D -> D -> Sig -> D -> Sig -> Sig

-- | <pre>
--   blue noteDuration numberOfHarmonics sweepRate lfoCps cps
--   </pre>
--   
--   <ul>
--   <li>numberOfHarmonics ~ (6, 10)</li>
--   <li>sweepRate ~ (0, 1)</li>
--   <li>lfoCps ~ 20</li>
--   </ul>
blue :: D -> D -> D -> Sig -> Sig -> SE Sig

-- | Noise filtered with sweep filter.
--   
--   <pre>
--   black noteDuration filterSweepStart filterSweepEnd bandWidth cps
--   </pre>
--   
--   <ul>
--   <li><tt>filterSweepStart</tt>, <tt>filterSweepEnd</tt> - hearing
--   range</li>
--   <li><tt>bandWidth</tt> - (10, 50)</li>
--   </ul>
black :: D -> D -> D -> Sig -> Sig -> SE Sig

-- | Black with fixed parameters.
--   
--   <pre>
--   blackMarimba cps
--   </pre>
blackMarimba :: Sig -> SE Sig
dahina :: Sig -> Sig
banyan :: Sig -> Sig
xylophone :: Sig -> Sig
tibetanBowl180 :: Sig -> Sig
spinelSphere :: Sig -> Sig
potLid :: Sig -> Sig
redCedarWoodPlate :: Sig -> Sig
tubularBell :: Sig -> Sig
redwoodPlate :: Sig -> Sig
douglasFirWoodPlate :: Sig -> Sig
uniformWoodenBar :: Sig -> Sig
uniformAluminumBar :: Sig -> Sig
vibraphone1 :: Sig -> Sig
vibraphone2 :: Sig -> Sig
chalandiPlates :: Sig -> Sig
tibetanBowl152 :: Sig -> Sig
tibetanBowl140 :: Sig -> Sig
wineGlass :: Sig -> Sig
smallHandbell :: Sig -> Sig
albertClockBellBelfast :: Sig -> Sig
woodBlock :: Sig -> Sig

-- | Sings a sequence of vowels with the given frequency.
--   
--   <pre>
--   vowels maxDur [(vowel1, dur1), (vowel2, dur2), (vowel3, dur3), ...] lastVowel cps
--   </pre>
--   
--   <ul>
--   <li>maxDur - total duration of the note</li>
--   <li><tt>vowel1</tt>, <tt>vowel2</tt>, ... lastVowel -- vowels</li>
--   <li>dur1, dur2, ... - durations</li>
--   <li>cps - frequency of the note.</li>
--   </ul>
vowels :: D -> [(Vowel, D)] -> Vowel -> Sig -> Sig

-- | Sings a loop of vowels with the given frequency.
--   
--   <pre>
--   loopVowels maxDur xdur [(vowel1, dur1), (vowel2, dur2), (vowel3, dur3), ...] cps
--   </pre>
--   
--   <ul>
--   <li>maxDur - total duration of the note</li>
--   <li>xdur - the duration of the loop of vowels.</li>
--   <li><tt>vowel1</tt>, <tt>vowel2</tt>, ... -- vowels</li>
--   <li>dur1, dur2, ... - durations</li>
--   <li>cps - frequency of the note.</li>
--   </ul>
loopVowels :: D -> Sig -> [(Vowel, D)] -> Sig -> Sig

-- | Sings a single vowel with the given frequency.
--   
--   <pre>
--   oneVowel maxDur vowel cps
--   </pre>
--   
--   <ul>
--   <li>maxDur - total duration of the note.</li>
--   </ul>
oneVowel :: D -> Vowel -> Sig -> Sig

-- | Abstract type that represents a vowel.
data Vowel
maleA :: Vowel
maleE :: Vowel
maleIY :: Vowel
maleO :: Vowel
maleOO :: Vowel
maleU :: Vowel
maleER :: Vowel
maleUH :: Vowel
femaleA :: Vowel
femaleE :: Vowel
femaleIY :: Vowel
femaleO :: Vowel
femaleOO :: Vowel

-- | Tech sound. Random sinusoids palyed at the very fast rate.
--   
--   <pre>
--   okComputer rate
--   </pre>
--   
--   <ul>
--   <li><tt>rate</tt> -- rate of new notes ~ (5, 20)</li>
--   </ul>
okComputer :: Sig -> SE Sig


-- | A gallery of the percussive sounds.
module Csound.Catalog.Drum

-- | A "dumb" drum.
dumb :: SE Sig
dumbBass :: SE Sig
pluckSnare :: Sig
sortaKnockSweep :: SE Sig
metalBoink :: Sig
snare :: SE Sig
openHihat :: SE Sig
closedHihat :: SE Sig
bassDrum :: D -> Sig

-- | Recommended values cpspch(13.03) - cpspch(13.10)
crash :: D -> SE Sig
handClap :: D -> SE Sig


-- | The implementation of the instruments that I've found in the Csound
--   catalog and collection of Csond-algorithmic composition (by Michael
--   Gogins) and some other sources.
--   
--   Requirements:
--   
--   <ul>
--   <li>Library strives for modularity and simplicity.</li>
--   <li>It must be possible to use all instruments live with midi, so the
--   function <a>idur</a> is forbidden.</li>
--   </ul>
module Csound.Catalog
