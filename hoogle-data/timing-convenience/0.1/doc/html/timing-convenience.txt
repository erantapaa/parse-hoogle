-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convenient functions for getting times.
--   
--   Inspired by Rails' ActiveSupport, this package provides nice looking
--   convenience functions for getting a time and date, offset from today.
@package timing-convenience
@version 0.1

module Data.Time.Convenience.Data

-- | The number of units to count. Singulars are provided to make your code
--   read nicely.
data Unit
Second :: Unit
Seconds :: Unit
Minute :: Unit
Minutes :: Unit
Hour :: Unit
Hours :: Unit
Day :: Unit
Days :: Unit
Week :: Unit
Weeks :: Unit
Fortnight :: Unit
Fortnights :: Unit

-- | The direction in which to travel from the current time (or, in the
--   case of FromThat, from the given time). As just hinted at,
--   <tt>FromNow</tt> and <tt>FromThat</tt> are the same thing, but one
--   reads better sometimes. Same with <tt>Ago</tt> and
--   <tt>BeforeThat</tt>.
data Direction
Ago :: Direction
BeforeThat :: Direction
FromNow :: Direction
FromThat :: Direction
instance Eq Unit
instance Show Unit
instance Ord Unit
instance Eq Direction
instance Show Direction
instance Ord Direction

module Data.Time.Convenience.Calculators

-- | The number of seconds from the current time in the specified
--   direction. For example, three seconds in the past is:
--   
--   <pre>
--   seconds 3 Ago
--   </pre>
--   
--   And three seconds into the future is:
--   
--   <pre>
--   seconds 3 FromNow
--   </pre>
--   
--   This only produces seconds, it does not produce the actual time. See
--   the functions in <a>Data.Time.Convenience</a> for <tt>timeFor</tt> and
--   <tt>timeSince</tt>.
seconds :: Num i => i -> Direction -> i

-- | Similar to <a>seconds</a>, this produces the number of minutes from
--   the current time in the specified direction, in seconds. It is most
--   useful as an offset for functions in the <a>Data.Time.Convenience</a>
--   module.
minutes :: Num i => i -> Direction -> i

-- | Similar to <a>seconds</a>, this produces the number of hours from the
--   current time in the specified direction, in seconds. It is most useful
--   as an offset for functions in the <a>Data.Time.Convenience</a> module.
--   See <a>seconds</a> for an example.
hours :: Num i => i -> Direction -> i

-- | Similar to <a>seconds</a>, this produces the number of days from the
--   current time in the specified direction, in seconds. It is most useful
--   as an offset for functions in the <a>Data.Time.Convenience</a> module.
--   See <a>seconds</a> for an example.
days :: Num i => i -> Direction -> i

-- | Similar to <a>seconds</a>, this produces the number of weeks from the
--   current time in the specified direction, in seconds. It is most useful
--   as an offset for functions in the <a>Data.Time.Convenience</a> module.
--   See <a>seconds</a> for an example.
weeks :: Num i => i -> Direction -> i

-- | Similar to <a>seconds</a>, this produces the number of fortnights (two
--   weeks) from the current time in the specified direction, in seconds.
--   It is most useful as an offset for functions in the
--   <a>Data.Time.Convenience</a> module. See <a>seconds</a> for an
--   example.
fortnights :: Num i => i -> Direction -> i

module Data.Time.Convenience

-- | Produce the time following the specified offset. For example, to get
--   the date and time from two weeks from right now:
--   
--   <pre>
--   timeFor 1 Fortnight FromNow
--   </pre>
timeFor :: NominalDiffTime -> Unit -> Direction -> IO UTCTime

-- | Given a time, produce a new time offset from that time. For example,
--   to get the date and time from a month after two weeks ago:
--   
--   <pre>
--   do
--     twoWeeksAgo &lt;- timeFor 1 Fortnight Ago
--     return $ timeSince twoWeeksAgo 1 Month FromThat
--   </pre>
timeSince :: UTCTime -> NominalDiffTime -> Unit -> Direction -> UTCTime
