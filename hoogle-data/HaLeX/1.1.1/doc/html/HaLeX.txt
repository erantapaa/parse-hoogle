-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HaLeX enables modelling, manipulation and animation of regular languages
--   
--   This library was developed in the context of a programming methodology
--   course for undergraduate students, and as a consequence, it was
--   defined mainly for educational purposes. Indeed, it provides a clear,
--   efficient and concise way to define, to understand and to manipulate
--   regular languages in Haskell. Furthermore, the construction of the
--   complete library has been proposed as assignment projects to the
--   students following the course. HaLeX is now being used to support this
--   course.
@package HaLeX
@version 1.1.1

module Language.HaLex.Parser
type Parser s r = [s] -> [(r, [s])]
symbol :: (Eq a) => a -> Parser a a
satisfy :: (s -> Bool) -> Parser s s
token :: (Eq s) => [s] -> Parser s [s]
succeed :: a -> Parser s a
(<|>) :: Parser s a -> Parser s a -> Parser s a


-- | HaLeX Utility Functions
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.Util

-- | List Function: l1 - l2. Unlike List.(\), this function removes
--   duplicates as well.
(<->) :: (Eq a) => [a] -> [a] -> [a]

-- | Apply a function repeatedly, until a fix point is reached, i.e. until
--   the result of the function is the same as the argument.
limit :: (Eq a) => (a -> a) -> a -> a

-- | Compute the permutations of a given list. For instance,
--   
--   permutations [1,2,3] =
--   [[1,2,3],[2,1,3],[2,3,1],[1,3,2],[3,1,2],[3,2,1]]
permutations :: [a] -> [[a]]


-- | Deterministic Finite Automata in Haskell.
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.Dfa

-- | The type of Deterministic Finite Automata parameterized with the type
--   <tt>st</tt> of states and <tt>sy</tt> of symbols.
data Dfa st sy
Dfa :: [sy] -> [st] -> st -> [st] -> (st -> sy -> st) -> Dfa st sy

-- | Test whether the given automaton accepts the given list of input
--   symbols (expressed as a fold).
dfaaccept :: (Eq st) => Dfa st sy -> [sy] -> Bool

-- | Execute the transition function of a <a>Dfa</a> on an initial state
--   and list of input symbol. Return the final state when all input
--   symbols have been consumed.
dfawalk :: (st -> sy -> st) -> st -> [sy] -> st

-- | Reconstruct a <a>Dfa</a> from a transition table. Given an automaton
--   expressed by a transition table (ie a list of triples of the form <tt>
--   (Origin,Symbol,Destination) </tt> it constructs a <a>Dfa</a>. The
--   other elements of the input tuple are the vocabulary, a set of states,
--   an initial state, and a set of final states.
ttDfa2Dfa :: (Eq st, Eq sy) => ([sy], [st], st, [st], [(st, sy, st)]) -> Dfa st sy

-- | Dfa to a Table-based Dfa
dfa2tdfa :: (Eq st, Ord sy) => Dfa st sy -> TableDfa st

-- | Compute the labels with the same (giving) origin and destination
--   states
transitionsFromTo :: (Eq st) => (st -> sy -> st) -> [sy] -> st -> st -> [sy]

-- | Compute the destination states giving the origin state
destinationsFrom :: (st -> sy -> st) -> [sy] -> st -> [st]

-- | Produce the transition table of a given <a>Dfa</a>. Given a
--   <a>Dfa</a>, it returns a list of triples of the form <tt>
--   (Origin,Symbol,Destination) </tt> defining all the transitions of the
--   <a>Dfa</a>.
transitionTableDfa :: (Ord st, Ord sy) => Dfa st sy -> [(st, sy, st)]

-- | Compute the states that can be reached from a state according to a
--   given transition function and vocabulary
reachedStatesFrom :: (Eq [st], Ord st) => (st -> sy -> st) -> [sy] -> st -> [st]

-- | Beautify a <a>Dfa</a> by assigning (natural) numbers to states.
beautifyDfa :: (Ord st, Ord sy) => Dfa st sy -> Dfa Int sy

-- | Renames a <a>Dfa</a>. It renames a DFA in such a way that the renaming
--   of two isomorphic DFA returns the same DFA. It is the basis for the
--   equivalence test for minimized DFA.
renameDfa :: (Ord st, Ord sy) => Dfa st sy -> Int -> Dfa Int sy

-- | Helper function to show the transition function of a <a>Dfa</a>.
showDfaDelta :: (Show st, Show sy) => [st] -> [sy] -> (st -> sy -> st) -> [Char] -> [Char]
beautifyDfaWithSyncSt :: (Eq st) => Dfa [st] sy -> Dfa [Int] sy

-- | Write a <a>Dfa</a> to a Haskell module in a file.
dfaIO :: (Show st, Show sy) => (Dfa st sy) -> String -> IO ()

-- | Compute the size of a deterministic finite automaton. The size of an
--   automaton is the number of its states.
sizeDfa :: Dfa st sy -> Int

-- | Compute the dead states of a <a>Dfa</a>
dfadeadstates :: (Ord st) => Dfa st sy -> [st]

-- | Checks whether a state is dead or not.
--   
--   One state is dead when it is not possible to reach a final state from
--   it. (probably we should consider that it has to be reachable from the
--   initial state, as well)
isStDead :: (Ord st) => (st -> sy -> st) -> [sy] -> [st] -> st -> Bool

-- | Checks whether a state is a sync state or not
--   
--   A sync state is a state that has transitions to itself for all symbols
--   of the vocabulary
isStSync :: (Eq st) => (st -> sy -> st) -> [sy] -> [st] -> st -> Bool

-- | Compute the number of outgoing arrows for a given state
numberOutgoingArrows :: (st -> sy -> st) -> [sy] -> st -> Int

-- | Compute the number of incoming arrows for a given state
numberIncomingArrows :: (Eq st) => (st -> sy -> st) -> [sy] -> [st] -> st -> Int
instance (Show st, Show sy) => Show (Dfa st sy)


-- | Non-Deterministic Finite Automata in Haskell.
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.Ndfa

-- | Type of Non-Deterministic Finite Automata. Parameterized with the type
--   <tt>st</tt> of states and <tt>sy</tt> of symbols.
data Ndfa st sy
Ndfa :: [sy] -> [st] -> [st] -> [st] -> (st -> Maybe sy -> [st]) -> Ndfa st sy

-- | Test whether the given automaton accepts the given list of input
--   symbols.
ndfaaccept :: (Ord st) => Ndfa st sy -> [sy] -> Bool

-- | Execute the transition function of a <a>Ndfa</a> on an initial state
--   and list of input symbol. Return the final state when all input
--   symbols have been consumed.
ndfawalk :: (Ord st) => (st -> Maybe sy -> [st]) -> [st] -> [sy] -> [st]

-- | Compute the eplison closure of a <a>Ndfa</a>.
epsilon_closure :: (Ord st) => (st -> Maybe sy -> [st]) -> [st] -> [st]

-- | Reconstruct a <a>Ndfa</a> from a transition table. Given a <a>Ndfa</a>
--   expressed by a transition table (ie a list of triples of the form <tt>
--   (Origin,Maybe Symbol,Destination) </tt> it constructs a <a>Ndfa</a>.
--   The other elements of the input tuple are the vocabulary, a set of
--   states, and the sets of initial and final states
ttNdfa2Ndfa :: (Eq st, Eq sy) => ([sy], [st], [st], [st], [(st, Maybe sy, st)]) -> Ndfa st sy

-- | Compute the labels with the same (giving) origin and destination
ndfaTransitionsFromTo :: (Eq st) => (st -> Maybe sy -> [st]) -> [sy] -> st -> st -> [Maybe sy]

-- | Compute the destination states giving the origin state
ndfadestinationsFrom :: (Ord st) => (st -> Maybe sy -> [st]) -> [sy] -> st -> [st]

-- | Produce the transition table of a given <a>Ndfa</a>.
--   
--   Given a <a>Ndfa</a> it returns a list of triples of the form <tt>
--   (Origin,Symbol,Destination) </tt> defining all the transitions of the
--   <a>Ndfa</a>.
transitionTableNdfa :: Ndfa st sy -> [(st, Maybe sy, st)]

-- | Compute the states that can be reached from a given state according to
--   a given transition function and vocabulary
ndfareachedStatesFrom :: (Ord st) => (st -> Maybe sy -> [st]) -> [sy] -> st -> [st]

-- | Helper function to show the transition function of a <a>Ndfa</a>.
--   
--   Produce the transition table of a given finite automaton.
toHaskell :: (Show fa) => fa -> [Char] -> IO ()

-- | Renames a <a>Ndfa</a>.
renameNdfa :: (Eq st) => Ndfa st sy -> Int -> Ndfa Int sy
showNdfaDelta :: (Show a1, Show t, Show a, Eq a) => [a1] -> [t] -> (a1 -> Maybe t -> [a]) -> String -> String

-- | The size of an automaton is the number of its states.
sizeNdfa :: Ndfa st sy -> Int

-- | Compute the dead states of a <a>Ndfa</a>
ndfadeadstates :: (Ord st) => Ndfa st sy -> [st]

-- | Checks whether a <a>Ndfa</a> state is dead or not.
ndfaIsStDead :: (Ord st) => (st -> Maybe sy -> [st]) -> [sy] -> [st] -> st -> Bool

-- | Compute the number of incoming arrows for a given state
ndfanumberIncomingArrows :: (Eq st) => (st -> Maybe sy -> [st]) -> [sy] -> [st] -> st -> Int

-- | Compute the number of outgoing arrows for a given state
ndfanumberOutgoingArrows :: (Ord st) => (st -> Maybe sy -> [st]) -> [sy] -> st -> Int
instance (Eq st, Show st, Show sy) => Show (Ndfa st sy)

module Language.HaLex.DfaMonad
data Dfa m st sy
Dfa :: [sy] -> [st] -> st -> [st] -> (st -> sy -> m st) -> Dfa m st sy
dfawalk :: (Monad m) => (st -> sy -> m st) -> st -> [sy] -> m st
dfaaccept' :: (Monad m, Eq st) => Dfa m st sy -> [sy] -> m Bool
dfaaccept :: (Monad m, Eq st) => Dfa m st sy -> [sy] -> m Bool
runDfa :: (Eq st) => Dfa (State s) st sy -> [sy] -> s -> (Bool, s)
showDfa :: (Monad m, Show st, Show sy) => Dfa m st sy -> m String
showDfaDelta :: (Monad m, Show st, Show sy) => [st] -> [sy] -> (st -> sy -> m st) -> m ([Char] -> [Char])
showInDot :: (Monad m, Eq st, Show st, Show sy) => Dfa m st sy -> Bool -> m [Char]
showElemsListPerLine :: [String] -> String
showArrows :: (Monad m, Eq st, Show st, Show sy) => Dfa m st sy -> [st] -> Bool -> m [[Char]]
buildLine :: (Monad m, Eq st, Show st, Show sy) => st -> (st -> sy -> m st) -> [st] -> Bool -> sy -> m [Char]
(<->) :: (Eq a) => [a] -> [a] -> [a]
xpto :: (Monad m) => [m [a]] -> m [a]
deadstates :: (Monad m, Eq st) => Dfa m st sy -> m [st]
deadstates' :: (Monad m, Eq st) => [st] -> [sy] -> (st -> sy -> m st) -> m [st]
isStDead :: (Monad m, Eq st) => st -> m [st] -> m Bool
isSyncState :: (Monad m, Eq st) => st -> m [st] -> m Bool
robot :: Dfa Maybe [Char] [Char]
ex2 :: Dfa IO Char Char
ex3 :: Dfa (State Integer) Char Char
ex4 :: Dfa (State [Char]) Char Char
ex5 :: Dfa (State [Char]) Char Char
ex_int :: Dfa (State [Char]) Integer Char
ex6 :: Dfa (State ([Char], Int)) Integer Char
type Instr = [Code]
data Code
Open :: String -> Code
Locate :: Int -> Code
Insert :: String -> Code
Delete :: [Int] -> Code
Save :: Code
End :: Code
te :: Dfa (State ([Char], [Code])) Integer Char
pr :: Dfa (State ([Char], [Int])) Integer Char
converte :: [Char] -> Int
runAccept_pr :: [Char] -> (Bool, ([Char], [Int]))
instance Show Code

module Language.HaLex.FaOperations
ndfa2dfa :: (Ord st, Eq sy) => Ndfa st sy -> Dfa [st] sy
dfa2ndfa :: Dfa st sy -> Ndfa st sy
ndfa2ct :: (Ord st) => Ndfa st sy -> CT st
type CT st = [(StDfa st, [StDfa st])]
lookupCT :: (Eq a1, Eq a2) => a2 -> a1 -> [(a2, [[a]])] -> [a1] -> [a]
stsDfa :: [(a, b)] -> [a]
concatNdfa :: (Eq a, Eq b) => Ndfa b a -> Ndfa b a -> Ndfa b a
unionNdfa :: (Eq a, Eq b) => Ndfa b a -> Ndfa b a -> Ndfa b a
starNdfa :: (Eq st) => Ndfa st sy -> Ndfa st sy
plusNdfa :: (Eq st) => Ndfa st sy -> Ndfa st sy
expNdfa :: (Eq st, Eq sy) => Ndfa st sy -> Int -> Ndfa Int sy
unionDfa :: (Eq a, Eq b) => Dfa b a -> Dfa b a -> Ndfa b a
concatDfa :: (Eq a, Eq b) => Dfa b a -> Dfa b a -> Ndfa b a
starDfa :: (Eq st) => Dfa st sy -> Ndfa st sy
plusDfa :: (Eq st) => Dfa st sy -> Ndfa st sy


-- | Minimization of the States of a Deterministica Finite Automata
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.Minimize

-- | Minimize the number of states of a given <a>Dfa</a>. This function
--   uses Brzozowski's algorithm
minimizeDfa :: (Eq sy, Ord st) => Dfa st sy -> Dfa [[st]] sy

-- | Minimize the number of states of a given <a>Dfa</a>.
--   
--   This minimization algorithm is described in "An Introduction to Formal
--   Languages and Automata", Peter Linz, 3rd Ed. Jones and Bartlett
--   Publishers
stdMinimizeDfa :: (Ord st, Ord sy) => Dfa st sy -> Dfa [st] sy

-- | Minimize the number of states of a given <a>Dfa</a>.
--   
--   (a third algorithm)
minimizeExp :: (Ord st) => Dfa st sy -> Dfa [st] sy

-- | Minimize the number of states of a given <a>Ndfa</a>. This function
--   uses Brzozowski's algorithm
minimizeNdfa :: (Eq sy, Ord st) => Ndfa st sy -> Dfa [[st]] sy

-- | Reverse a <a>Dfa</a>
reverseDfa :: (Eq st) => Dfa st sy -> Ndfa st sy

-- | Reverse a <a>Dfa</a> into a <a>Dfa</a>. It uses a <a>Ndfa</a> as an
--   intermediate representation.
reverseDfaAsDfa :: (Ord st, Eq sy) => Dfa st sy -> Dfa [st] sy

-- | Reverse a <a>Ndfa</a>
reverseNdfa :: (Eq st) => Ndfa st sy -> Ndfa st sy


-- | Regular Expressions in Haskell.
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.RegExp

-- | Type of regular expressions.
data RegExp sy

-- | Empty Language
Empty :: RegExp sy

-- | Empty String
Epsilon :: RegExp sy

-- | Literals
Literal :: sy -> RegExp sy

-- | Disjuncion
Or :: (RegExp sy) -> (RegExp sy) -> RegExp sy

-- | Sequence
Then :: (RegExp sy) -> (RegExp sy) -> RegExp sy

-- | Repetition, possibly zero time
Star :: (RegExp sy) -> RegExp sy

-- | One or more times (extended RegExp)
OneOrMore :: (RegExp sy) -> RegExp sy

-- | Optional (extended RegExp)
Optional :: (RegExp sy) -> RegExp sy

-- | Catamorphism induced by the <a>RegExp</a> inductive data type
cataRegExp :: (re, re, re -> re -> re, re -> re, sy -> re, re -> re -> re, re -> re, re -> re) -> RegExp sy -> re

-- | Test whether a match can be found for the given regular expression in
--   the given sequence of characters. The regular expression is assumed
--   not to contain <a>OneOrMore</a> or <a>Optional</a>. See also
--   <tt>matches'</tt>.
matchesRE :: (Eq sy) => RegExp sy -> [sy] -> Bool

-- | Test whether a match can be found for the given regular expression in
--   the given sequence of characters. The regular expression is allowed to
--   contain <a>OneOrMore</a> or <a>Optional</a>.
matches' :: (Eq sy) => RegExp sy -> [sy] -> Bool

-- | Compute the size of a regular expression. We define the size of a
--   regular expression as the number of occurrences of symbols of the
--   alfabeth
sizeRegExp :: RegExp sy -> Int

-- | Print regular expression to String as a catamorphism. A
--   straightforward (catamorphic) show function.
--   
--   (it produces too many brackets, making it difficult to read or
--   understand the expression)
showRE :: (Show sy) => RegExp sy -> [Char]

-- | Simplify regular expressions according to the algebra of regular
--   expressions.
simplifyRegExp :: (Eq sy) => RegExp sy -> RegExp sy

-- | Rewrite extended regular expressions to plain regular expression. This
--   means that the <a>OneOrMore</a> and <a>Optional</a> constructors are
--   normalized away.
extREtoRE :: RegExp sy -> RegExp sy
instance (Read sy) => Read (RegExp sy)
instance (Eq sy) => Eq (RegExp sy)
instance (Show sy) => Show (RegExp sy)


-- | From Regular Expressions into Non-Deterministic and Deterministic
--   Finite Automata
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.RegExp2Fa

-- | Compute a <a>Ndfa</a> from a <a>RegExp</a>.
regExp2Ndfa :: (Eq sy) => RegExp sy -> Ndfa Int sy

-- | Compute a <a>Dfa</a> from a <a>RegExp</a>. (via the intermediate
--   <a>Ndfa</a>)
regExp2Dfa :: (Eq sy) => RegExp sy -> Dfa [Int] sy

-- | Compute a <a>Ndfa</a> from a <a>RegExp</a>. Auxiliar function
--   threading the context: the first available int to name the states
regExp2Ndfa' :: (Eq sy) => RegExp sy -> Int -> (Ndfa Int sy, Int)


-- | Finite Automata as Directed Graphs in GraphViz. Code Included in the
--   Lecture Notes on Language Processing (with a functional flavour).
module Language.HaLex.FaAsDiGraph
ndfa2graphviz :: (Show st, Eq sy, Show sy, Ord st) => Ndfa st sy -> [Char] -> [Char]
ndfa2graphviz2file :: (Show st, Eq sy, Show sy, Ord st) => Ndfa st sy -> [Char] -> IO ()
dfa2graphviz :: (Show st, Eq sy, Show sy, Ord st) => Dfa st sy -> [Char] -> [Char]
dfa2graphviz2file :: (Show st, Eq sy, Show sy, Ord st) => Dfa st sy -> [Char] -> IO ()

-- | Print a <a>Ndfa</a> in GraphViz
--   
--   Print a <a>Ndfa</a> in GraphViz in a file
--   
--   Print a <a>Dfa</a> in GraphViz
--   
--   Print a <a>Dfa</a> in GraphViz in a file
--   
--   Print a <a>Ndfa</a> in GraphViz
tographviz :: (Eq sy, Show sy, Ord st, Show st) => Ndfa st sy -> [Char] -> [Char] -> [Char] -> (st -> [Char]) -> [Char]
tographvizIO :: (Eq sy, Show sy, Ord st, Show st) => Ndfa st sy -> [Char] -> [Char] -> [Char] -> (st -> [Char]) -> IO ()
dfa2DiGraphWithNoSyncSt :: (Show st, Eq sy, Show sy, Ord st) => Dfa st sy -> [Char] -> [Char]
dfaDiGraphWithNoSyncStIO :: (Show st, Eq sy, Show sy, Ord st) => Dfa st sy -> [Char] -> FilePath -> IO ()
genOneArrow :: (Show a) => [Char] -> a -> [Char] -> [Char]

module Language.HaLex.Examples.Robot
robotM :: Dfa Maybe [Char] [Char]
robotM2 :: Dfa IO [Char] [Char]

module Language.HaLex.Dfa2MDfa
showDfaMDelta :: (Show st, Show sy) => [st] -> [sy] -> (st -> sy -> st) -> [Char] -> [Char]
dfa2MIO :: (Show st, Show sy) => (Dfa st sy) -> IO ()
re2MDfa :: (Show sy, Ord sy) => RegExp sy -> Bool -> Bool -> String -> String


-- | From Finite Automata into Regular Expressions
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.Fa2RegExp

-- | Compute a regular expression from a <a>Dfa</a>.
dfa2RegExp :: (Eq sy) => Dfa Int sy -> RegExp sy

-- | Compute a regular expression that defines the transitions from an
--   origin to a destination in a <a>Dfa</a>.
regExpFromTo :: (Eq st) => (st -> sy -> st) -> [sy] -> st -> st -> RegExp sy

-- | Compute a regular expression that defines the transitions from an
--   origin to a destination in a <a>Ndfa</a>.
ndfaregExpFromTo :: (Eq st) => (st -> Maybe sy -> [st]) -> [sy] -> st -> st -> RegExp sy


-- | Parsing (through parsing combinators) concrete regular Expressions (in
--   the Unix like notation)
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.RegExpParser

-- | Parser for regular expressions
parseRegExp :: [Char] -> Maybe (RegExp Char)


-- | Equivalence of Regular Expressions
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.Equivalence

-- | Test whether two <a>Dfa</a> are quivalent or not.
equivDfa :: (Ord st, Ord sy) => Dfa st sy -> Dfa st sy -> Bool

-- | Test whether two <a>Ndfa</a> are quivalent or not.
equivNdfa :: (Ord st, Ord sy) => Ndfa st sy -> Ndfa st sy -> Bool

-- | Test whether two <a>RegExp</a> are quivalent or not.
equivRE :: (Ord sy) => RegExp sy -> RegExp sy -> Bool

-- | Test whether a list of <a>RegExp</a> are quivalent or not.
equivREs :: (Ord sy) => [RegExp sy] -> Bool


-- | The Class of Finite Automaton in Haskell
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.FaClasses

-- | Class of Finite automaton
class Fa fa st sy
accept :: (Fa fa st sy) => fa st sy -> [sy] -> Bool
sizeFa :: (Fa fa st sy) => fa st sy -> Int
equiv :: (Fa fa st sy) => fa st sy -> fa st sy -> Bool
minimize :: (Fa fa st sy) => fa st sy -> Dfa [[st]] sy
reverseFa :: (Fa fa st sy) => fa st sy -> Ndfa st sy
deadstates :: (Fa fa st sy) => fa st sy -> [st]
toHaskell' :: (Fa fa st sy) => fa st sy -> String -> IO ()
toGraph :: (Fa fa st sy) => fa st sy -> String -> String
toGraphIO :: (Fa fa st sy) => fa st sy -> String -> IO ()
unionFa :: (Fa fa st sy) => fa st sy -> fa st sy -> Ndfa st sy
concatFa :: (Fa fa st sy) => fa st sy -> fa st sy -> Ndfa st sy
starFa :: (Fa fa st sy) => fa st sy -> Ndfa st sy
plusFa :: (Fa fa st sy) => fa st sy -> Ndfa st sy
instance (Show st, Show sy, Ord st, Ord sy) => Fa Ndfa st sy
instance (Show st, Show sy, Ord st, Ord sy) => Fa Dfa st sy


-- | Regular Expressions as Directed Graphs (in GraphViz)
--   
--   Code Included in the Lecture Notes on Language Processing (with a
--   functional flavour).
module Language.HaLex.RegExpAsDiGraph

-- | Print a <a>RegExp</a> in GraphViz-dot (as a string)
re2graphviz :: (Ord sy, Show sy) => RegExp sy -> [Char] -> Bool -> Bool -> Bool -> Bool -> [Char]

module Language.HaLex.Examples.Real
delta_realdfa :: Char -> Char -> Char
isreal :: String -> Bool
