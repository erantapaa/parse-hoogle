-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Provide a service at the data type level.
--   
@package network-service
@version 0.1.0.0


-- | A service is an endpoint that can receive and send messages.
module Network.Service

-- | Services operate on Messages, the ServiceMessage class abstracts the
--   serialization.
class ServiceMessage a
toBS :: ServiceMessage a => a -> ByteString
fromBS :: ServiceMessage a => ByteString -> a

-- | A Service of a certain Message data.
data Service a
Service :: IO Bool -> IO a -> (a -> IO ()) -> IO () -> Service a

-- | tells whether the service is done or not.
sDone :: Service a -> IO Bool

-- | receive a message.
sRecv :: Service a -> IO a

-- | send a message.
sSend :: Service a -> a -> IO ()

-- | terminate the service.
sTerm :: Service a -> IO ()

-- | A handler takes a service and returns an IO action. The idea is that a
--   service handler will <tt>run</tt> a service
--   
--   a simple echo handler might look like the following:
--   
--   <pre>
--   handler service = do { msg &lt;- sRecv service
--                        ; sSend service msg
--                        ; isDone &lt;- sDone service
--                        ; unless isDone (handler service)
--                        }
--   </pre>
type ServiceHandler a = Service a -> IO ()


-- | A trivial service that uses base64 as encoding for the messages and
--   newlines for message separation.
module Network.Transport.Encoding.Base64

-- | Builds a simple service, that uses base64 as the base encoding for the
--   messages. Messages are separated by newlines.
mkService :: ServiceMessage a => (Socket, SockAddr) -> IO (Service a)
