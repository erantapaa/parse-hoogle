-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Concurrent actions that may fail
--   
@package conceit
@version 0.3.2.0

module Control.Concurrent.Conceit

-- | <a>Conceit</a> is very similar to <a>Concurrently</a> from the
--   <tt>async</tt> package, but it has an explicit error type <tt>e</tt>.
--   
--   The <a>Applicative</a> instance runs two actions concurrently, waits
--   until they finish, and combines their results.
--   
--   However, if any of the actions fails with <tt>e</tt> the other action
--   is immediately cancelled and the whole computation fails with
--   <tt>e</tt>.
--   
--   To put it another way: <a>Conceit</a> behaves like
--   <tt>Concurrently</tt> for successes and like <a>race</a> for errors.
newtype Conceit e a
Conceit :: IO (Either e a) -> Conceit e a
runConceit :: Conceit e a -> IO (Either e a)
_Conceit :: IO a -> Conceit e a
_runConceit :: Conceit Void a -> IO a
conceit :: IO (Either e a) -> IO (Either e b) -> IO (Either e (a, b))

-- | Works similarly to <a>mapConcurrently</a> from the <tt>async</tt>
--   package, but if any of the computations fails with <tt>e</tt>, the
--   others are immediately cancelled and the whole computation fails with
--   <tt>e</tt>.
mapConceit :: Traversable t => (a -> IO (Either e b)) -> t a -> IO (Either e (t b))

-- | Verbatim copy of the internal <tt>concurrently'</tt> function from the
--   <tt>async</tt> package.
conceit' :: IO a -> IO b -> (MVar (Either SomeException (Either a b)) -> IO r) -> IO r
instance Functor (Conceit e)
instance MonadCatch (Conceit e)
instance MonadThrow (Conceit e)
instance Apply (Conceit s)
instance Bind (Conceit s)
instance Plus (Conceit e)
instance Alt (Conceit e)
instance MonadIO (Conceit e)
instance MonadPlus (Conceit e)
instance Monad (Conceit e)
instance Monoid a => Monoid (Conceit e a)
instance Alternative (Conceit e)
instance Applicative (Conceit e)
instance Bifunctor Conceit
