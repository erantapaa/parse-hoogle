-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A monad transformer for backtracking exceptions
--   
--   A monad transformer that adds backtracking exceptions to its base
--   monad.
@package backtracking-exceptions
@version 0.1.0.0


module Control.Monad.Except.Backtracking

-- | <a>BExceptT</a> is a monad transformer that adds backtracking
--   exception handling to its base monad.
data BExceptT e m a

-- | <a>bExceptT</a> constructs a <a>BExceptT</a> from the base monad.
bExceptT :: Monad m => m (Either e a) -> BExceptT e m a

-- | <a>runBExceptT</a> does the opposite of <a>bExceptT</a>
runBExceptT :: Monad m => BExceptT e m a -> m (Either e a)

-- | <a>hoistEither</a> constructs a <a>BExceptT</a> from an <a>Either</a>
--   value.
hoistEither :: Monad m => Either e a -> BExceptT e m a
instance Functor (BExceptT e m)
instance Applicative (BExceptT e m)
instance Monad (BExceptT e m)
instance Apply (BExceptT e m)
instance MonadIO m => MonadIO (BExceptT e m)
instance (Monad m, Semigroup e, Monoid e) => MonadPlus (BExceptT e m)
instance (Monad m, Semigroup e, Monoid e) => Alternative (BExceptT e m)
instance (Monad m, Semigroup e, Monoid e) => Plus (BExceptT e m)
instance (Monad m, Semigroup e) => Alt (BExceptT e m)
instance Monad m => MonadError e (BExceptT e m)
instance (Functor m, MonadRWS r w s m) => MonadRWS r w s (BExceptT e m)
instance (Functor m, MonadWriter w m) => MonadWriter w (BExceptT e m)
instance MonadState s m => MonadState s (BExceptT e m)
instance MonadReader r m => MonadReader r (BExceptT e m)
instance MonadTrans (BExceptT e)
instance (Functor f, MonadFree f m) => MonadFree f (BExceptT e m)
