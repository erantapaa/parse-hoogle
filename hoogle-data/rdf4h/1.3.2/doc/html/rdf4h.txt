-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for RDF processing in Haskell
--   
@package rdf4h
@version 1.3.2

module Data.RDF.Types

-- | The actual value of an RDF literal, represented as the <a>LValue</a>
--   parameter of an <a>LNode</a>.
data LValue

-- | A plain (untyped) literal value in an unspecified language.
PlainL :: !Text -> LValue

-- | A plain (untyped) literal value with a language specifier.
PlainLL :: !Text -> !Text -> LValue

-- | A typed literal value consisting of the literal value and the URI of
--   the datatype of the value, respectively.
TypedL :: !Text -> !Text -> LValue

-- | An RDF node, which may be either a URIRef node (<a>UNode</a>), a blank
--   node (<a>BNode</a>), or a literal node (<a>LNode</a>).
data Node

-- | An RDF URI reference. URIs conform to the RFC3986 standard. See
--   <a>http://www.w3.org/TR/rdf-concepts/#section-Graph-URIref</a> for
--   more information.
UNode :: !Text -> Node

-- | An RDF blank node. See
--   <a>http://www.w3.org/TR/rdf-concepts/#section-blank-nodes</a> for more
--   information.
BNode :: !Text -> Node

-- | An RDF blank node with an auto-generated identifier, as used in
--   Turtle.
BNodeGen :: !Int -> Node

-- | An RDF literal. See
--   <a>http://www.w3.org/TR/rdf-concepts/#section-Graph-Literal</a> for
--   more information.
LNode :: !LValue -> Node

-- | An alias for <a>Node</a>, defined for convenience and readability
--   purposes.
type Subject = Node

-- | An alias for <a>Node</a>, defined for convenience and readability
--   purposes.
type Predicate = Node

-- | An alias for <a>Node</a>, defined for convenience and readability
--   purposes.
type Object = Node

-- | An RDF triple is a statement consisting of a subject, predicate, and
--   object, respectively.
--   
--   See <a>http://www.w3.org/TR/rdf-concepts/#section-triples</a> for more
--   information.
data Triple
Triple :: !Node -> !Node -> !Node -> Triple

-- | A list of triples. This is defined for convenience and readability.
type Triples = [Triple]

-- | A type class for ADTs that expose views to clients.
class View a b
view :: View a b => a -> b

-- | Return a PlainL LValue for the given string value.
plainL :: Text -> LValue

-- | Return a PlainLL LValue for the given string value and language,
--   respectively.
plainLL :: Text -> Text -> LValue

-- | Return a TypedL LValue for the given string value and datatype URI,
--   respectively.
typedL :: Text -> Text -> LValue

-- | Return a URIRef node for the given bytetring URI.
unode :: Text -> Node

-- | Return a blank node using the given string identifier.
bnode :: Text -> Node

-- | Return a literal node using the given LValue.
lnode :: LValue -> Node

-- | A smart constructor function for <a>Triple</a> that verifies the node
--   arguments are of the correct type and creates the new <a>Triple</a> if
--   so or calls <a>error</a>. <i>subj</i> must be a <a>UNode</a> or
--   <a>BNode</a>, and <i>pred</i> must be a <a>UNode</a>.
triple :: Subject -> Predicate -> Object -> Triple

-- | Answer if given node is a URI Ref node.
isUNode :: Node -> Bool

-- | Answer if given node is a literal node.
isLNode :: Node -> Bool

-- | Answer if given node is a blank node.
isBNode :: Node -> Bool
resolveQName :: Maybe BaseUrl -> Text -> PrefixMappings -> Maybe Text
absolutizeUrl :: Maybe BaseUrl -> Maybe Text -> Text -> Text
isAbsoluteUri :: Text -> Bool
mkAbsoluteUrl :: Text -> Text -> Text

-- | An RDF value is a set of (unique) RDF triples, together with the
--   operations defined upon them.
--   
--   For information about the efficiency of the functions, see the
--   documentation for the particular RDF instance.
--   
--   For more information about the concept of an RDF graph, see the
--   following:
--   <a>http://www.w3.org/TR/rdf-concepts/#section-rdf-graph</a>.
class RDF rdf
baseUrl :: RDF rdf => rdf -> Maybe BaseUrl
prefixMappings :: RDF rdf => rdf -> PrefixMappings
addPrefixMappings :: RDF rdf => rdf -> PrefixMappings -> Bool -> rdf
empty :: RDF rdf => rdf
mkRdf :: RDF rdf => Triples -> Maybe BaseUrl -> PrefixMappings -> rdf
triplesOf :: RDF rdf => rdf -> Triples
uniqTriplesOf :: RDF rdf => rdf -> Triples
select :: RDF rdf => rdf -> NodeSelector -> NodeSelector -> NodeSelector -> Triples
query :: RDF rdf => rdf -> Maybe Node -> Maybe Node -> Maybe Node -> Triples

-- | An RdfParser is a parser that knows how to parse 1 format of RDF and
--   can parse an RDF document of that type from a string, a file, or a
--   URL. Required configuration options will vary from instance to
--   instance.
class RdfParser p
parseString :: (RdfParser p, RDF rdf) => p -> Text -> Either ParseFailure rdf
parseFile :: (RdfParser p, RDF rdf) => p -> String -> IO (Either ParseFailure rdf)
parseURL :: (RdfParser p, RDF rdf) => p -> String -> IO (Either ParseFailure rdf)

-- | An RdfSerializer is a serializer of RDF to some particular output
--   format, such as NTriples or Turtle.
class RdfSerializer s
hWriteRdf :: (RdfSerializer s, RDF rdf) => s -> Handle -> rdf -> IO ()
writeRdf :: (RdfSerializer s, RDF rdf) => s -> rdf -> IO ()
hWriteH :: (RdfSerializer s, RDF rdf) => s -> Handle -> rdf -> IO ()
writeH :: (RdfSerializer s, RDF rdf) => s -> rdf -> IO ()
hWriteTs :: RdfSerializer s => s -> Handle -> Triples -> IO ()
writeTs :: RdfSerializer s => s -> Triples -> IO ()
hWriteT :: RdfSerializer s => s -> Handle -> Triple -> IO ()
writeT :: RdfSerializer s => s -> Triple -> IO ()
hWriteN :: RdfSerializer s => s -> Handle -> Node -> IO ()
writeN :: RdfSerializer s => s -> Node -> IO ()

-- | Represents a namespace as either a prefix and uri, respectively, or
--   just a uri.
data Namespace
PrefixedNS :: Text -> Text -> Namespace
PlainNS :: Text -> Namespace

-- | An alias for a map from prefix to namespace URI.
newtype PrefixMappings
PrefixMappings :: (Map Text Text) -> PrefixMappings

-- | A mapping of a prefix to the URI for that prefix.
newtype PrefixMapping
PrefixMapping :: (Text, Text) -> PrefixMapping

-- | The base URL of an RDF.
newtype BaseUrl
BaseUrl :: Text -> BaseUrl

-- | A <a>NodeSelector</a> is either a function that returns <a>True</a> or
--   <a>False</a> for a node, or Nothing, which indicates that all nodes
--   would return <a>True</a>.
--   
--   The selector is said to select, or match, the nodes for which it
--   returns <a>True</a>.
--   
--   When used in conjunction with the <a>select</a> method of
--   <tt>Graph</tt>, three node selectors are used to match a triple.
type NodeSelector = Maybe (Node -> Bool)

-- | Represents a failure in parsing an N-Triples document, including an
--   error message with information about the cause for the failure.
newtype ParseFailure
ParseFailure :: String -> ParseFailure
instance Generic LValue
instance Generic Node
instance Generic Triple
instance Eq BaseUrl
instance Ord BaseUrl
instance Show BaseUrl
instance NFData BaseUrl
instance Generic BaseUrl
instance Eq ParseFailure
instance Show ParseFailure
instance Eq PrefixMappings
instance Ord PrefixMappings
instance NFData PrefixMappings
instance Generic PrefixMappings
instance Eq PrefixMapping
instance Ord PrefixMapping
instance Datatype D1LValue
instance Constructor C1_0LValue
instance Constructor C1_1LValue
instance Constructor C1_2LValue
instance Datatype D1Node
instance Constructor C1_0Node
instance Constructor C1_1Node
instance Constructor C1_2Node
instance Constructor C1_3Node
instance Datatype D1Triple
instance Constructor C1_0Triple
instance Datatype D1BaseUrl
instance Constructor C1_0BaseUrl
instance Datatype D1PrefixMappings
instance Constructor C1_0PrefixMappings
instance Show PrefixMapping
instance Show PrefixMappings
instance Binary PrefixMappings
instance Show Namespace
instance Eq Namespace
instance Show LValue
instance Show Node
instance Show Triple
instance Hashable LValue
instance Ord LValue
instance Eq LValue
instance Ord Triple
instance Eq Triple
instance Hashable Node
instance Ord Node
instance Eq Node
instance Binary BaseUrl
instance NFData Triple
instance Binary Triple
instance NFData Node
instance Binary Node
instance NFData LValue
instance Binary LValue


-- | A serializer for RDF as N-Triples
--   <a>http://www.w3.org/TR/rdf-testcases/#ntriples</a>.
module Text.RDF.RDF4H.NTriplesSerializer
data NTriplesSerializer
NTriplesSerializer :: NTriplesSerializer
instance RdfSerializer NTriplesSerializer


-- | Defines types and utility functions related to namespaces, and some
--   predefined values for commonly used namespaces, such as rdf, xsd,
--   dublin core, etc.
module Data.RDF.Namespace

-- | Represents a namespace as either a prefix and uri, respectively, or
--   just a uri.
data Namespace
PrefixedNS :: Text -> Text -> Namespace
PlainNS :: Text -> Namespace

-- | Make a namespace for the given URI reference.
mkPlainNS :: Text -> Namespace

-- | Make a namespace having the given prefix for the given URI reference,
--   respectively.
mkPrefixedNS :: Text -> Text -> Namespace

-- | Make a namespace having the given prefix for the given URI reference,
--   respectively, using strings which will be converted to bytestrings
--   automatically.
mkPrefixedNS' :: String -> String -> Namespace

-- | A mapping of a prefix to the URI for that prefix.
newtype PrefixMapping
PrefixMapping :: (Text, Text) -> PrefixMapping

-- | An alias for a map from prefix to namespace URI.
newtype PrefixMappings
PrefixMappings :: (Map Text Text) -> PrefixMappings

-- | View the prefix mappings as a list of key-value pairs. The PM in in
--   the name is to reduce name clashes if used without qualifying.
toPMList :: PrefixMappings -> [(Text, Text)]

-- | Perform a left-biased merge of the two sets of prefix mappings.
mergePrefixMappings :: PrefixMappings -> PrefixMappings -> PrefixMappings

-- | Make a URI consisting of the given namespace and the given localname.
mkUri :: Namespace -> Text -> Text

-- | Determine the prefix of the given namespace, if it has one.
prefixOf :: Namespace -> Maybe Text

-- | Determine the URI of the given namespace.
uriOf :: Namespace -> Text

-- | The RDF namespace.
rdf :: Namespace

-- | The RDF Schema namespace.
rdfs :: Namespace

-- | The Dublin Core namespace.
dc :: Namespace

-- | The Dublin Core terms namespace.
dct :: Namespace

-- | The OWL namespace.
owl :: Namespace

-- | The XML Schema namespace.
xsd :: Namespace

-- | The SKOS namespace.
skos :: Namespace

-- | The friend of a friend namespace.
foaf :: Namespace

-- | Example namespace #1.
ex :: Namespace

-- | Example namespace #2.
ex2 :: Namespace

-- | The set of common predefined namespaces as a <a>PrefixMappings</a>
--   value.
standard_ns_mappings :: PrefixMappings

-- | Takes a list of <a>Namespace</a>s and returns <a>PrefixMappings</a>.
ns_mappings :: [Namespace] -> PrefixMappings

module Data.RDF.Query

-- | Determine whether two triples have equal subjects. Note that it
--   doesn't perform namespace expansion!
equalSubjects :: Triple -> Triple -> Bool

-- | Determine whether two triples have equal predicates. Note that it
--   doesn't perform namespace expansion!
equalPredicates :: Triple -> Triple -> Bool

-- | Determine whether two triples have equal objects. Note that it doesn't
--   perform namespace expansion!
equalObjects :: Triple -> Triple -> Bool

-- | Answer the subject node of the triple.
subjectOf :: Triple -> Node

-- | Answer the predicate node of the triple.
predicateOf :: Triple -> Node

-- | Answer the object node of the triple.
objectOf :: Triple -> Node

-- | Determines whether the <a>RDF</a> contains zero triples.
isEmpty :: RDF rdf => rdf -> Bool

-- | Answer if rdf contains node.
rdfContainsNode :: RDF rdf => rdf -> Node -> Bool

-- | Answer if triple contains node. Note that it doesn't perform namespace
--   expansion!
tripleContainsNode :: Node -> Triple -> Bool

-- | Lists of all subjects of triples with the given predicate.
listSubjectsWithPredicate :: RDF rdf => rdf -> Predicate -> [Subject]

-- | Lists of all objects of triples with the given predicate.
listObjectsOfPredicate :: RDF rdf => rdf -> Predicate -> [Object]

-- | This determines if two RDF representations are equal regardless of
--   blank node names, triple order and prefixes. In math terms, this is
--   the simeq latex operator, or ~=
isIsomorphic :: (RDF rdf1, RDF rdf2) => rdf1 -> rdf2 -> Bool

-- | Expand the triples in a graph with the prefix map and base URL for
--   that graph.
expandTriples :: RDF rdf => rdf -> Triples

-- | Convert a parse result into an RDF if it was successful and error and
--   terminate if not.
fromEither :: RDF rdf => Either ParseFailure rdf -> rdf

-- | Expand the triple with the prefix map.
expandTriple :: PrefixMappings -> Triple -> Triple

-- | Expand the node with the prefix map. Only UNodes are expanded, other
--   kinds of nodes are returned as-is.
expandNode :: PrefixMappings -> Node -> Node

-- | Expand the URI with the prefix map. Also expands "a" to
--   "<a>http://www.w3.org/1999/02/22-rdf-syntax-ns#type"</a>.
expandURI :: PrefixMappings -> Text -> Text

-- | Prefixes relative URIs in the triple with BaseUrl.
absolutizeTriple :: Maybe BaseUrl -> Triple -> Triple

-- | Prepends BaseUrl to UNodes with relative URIs.
absolutizeNode :: Maybe BaseUrl -> Node -> Node


-- | <a>TriplesGraph</a> contains a list-backed graph implementation
--   suitable for smallish graphs or for temporary graphs that will not be
--   queried. It maintains the triples in the order that they are given in,
--   and is especially useful for holding N-Triples, where it is often
--   desirable to preserve the order of the triples when they were
--   originally parsed. Duplicate triples are not filtered. If you might
--   have duplicate triples, use <tt>MGraph</tt> instead, which is also
--   more efficient. However, the query functions of this graph (select,
--   query) remove duplicates from their result triples (but triplesOf does
--   not) since it is usually cheap to do so.
module Data.RDF.TriplesGraph

-- | A simple implementation of the <a>RDF</a> type class that represents
--   the graph internally as a list of triples.
--   
--   Note that this type of RDF is fine for interactive experimentation and
--   querying of smallish (&lt;10,000 triples) graphs, but there are better
--   options for larger graphs or graphs that you will do many queries
--   against (e.g., <tt>MGraph</tt> is faster for queries).
--   
--   The time complexity of the functions (where n == num_triples) are:
--   
--   <ul>
--   <li><a>empty</a> : O(1)</li>
--   <li><a>mkRdf</a> : O(n)</li>
--   <li><a>triplesOf</a>: O(1)</li>
--   <li><a>select</a> : O(n)</li>
--   <li><a>query</a> : O(n)</li>
--   </ul>
data TriplesGraph

-- | Return an empty RDF.
empty :: RDF rdf => rdf

-- | Return a RDF containing all the given triples. Handling of duplicates
--   in the input depend on the particular RDF implementation.
mkRdf :: RDF rdf => Triples -> Maybe BaseUrl -> PrefixMappings -> rdf

-- | Return all triples in the RDF, as a list.
--   
--   Note that this function returns a list of triples in the RDF as they
--   were added, without removing duplicates and without expanding
--   namespaces.
triplesOf :: RDF rdf => rdf -> Triples

-- | Return unique triples in the RDF, as a list.
--   
--   This function performs namespace expansion and removal of duplicates.
uniqTriplesOf :: RDF rdf => rdf -> Triples

-- | Select the triples in the RDF that match the given selectors.
--   
--   The three NodeSelector parameters are optional functions that match
--   the respective subject, predicate, and object of a triple. The triples
--   returned are those in the given graph for which the first selector
--   returns true when called on the subject, the second selector returns
--   true when called on the predicate, and the third selector returns true
--   when called on the ojbect. A <a>Nothing</a> parameter is equivalent to
--   a function that always returns true for the appropriate node; but
--   implementations may be able to much more efficiently answer a select
--   that involves a <a>Nothing</a> parameter rather than an <tt>(id
--   True)</tt> parameter.
--   
--   The following call illustrates the use of select, and would result in
--   the selection of all and only the triples that have a blank node as
--   subject and a literal node as object:
--   
--   <pre>
--   select gr (Just isBNode) Nothing (Just isLNode)
--   </pre>
--   
--   Note: this function may be very slow; see the documentation for the
--   particular RDF implementation for more information.
select :: RDF rdf => rdf -> NodeSelector -> NodeSelector -> NodeSelector -> Triples

-- | Return the triples in the RDF that match the given pattern, where the
--   pattern (3 Maybe Node parameters) is interpreted as a triple pattern.
--   
--   The <tt>Maybe Node</tt> params are interpreted as the subject,
--   predicate, and object of a triple, respectively. <tt>Just n</tt> is
--   true iff the triple has a node equal to <tt>n</tt> in the appropriate
--   location; <tt>Nothing</tt> is always true, regardless of the node in
--   the appropriate location.
--   
--   For example, <tt> query rdf (Just n1) Nothing (Just n2) </tt> would
--   return all and only the triples that have <tt>n1</tt> as subject and
--   <tt>n2</tt> as object, regardless of the predicate of the triple.
query :: RDF rdf => rdf -> Maybe Node -> Maybe Node -> Maybe Node -> Triples
instance Generic TriplesGraph
instance NFData TriplesGraph
instance Datatype D1TriplesGraph
instance Constructor C1_0TriplesGraph
instance Show TriplesGraph
instance RDF TriplesGraph
instance Binary TriplesGraph


-- | A simple graph implementation backed by <a>HashMap</a>.
module Data.RDF.MGraph

-- | A map-based graph implementation.
--   
--   Worst-case time complexity of the graph functions, with respect to the
--   number of triples, are:
--   
--   <ul>
--   <li><a>empty</a> : O(1)</li>
--   <li><a>mkRdf</a> : O(n)</li>
--   <li><a>triplesOf</a>: O(n)</li>
--   <li><a>select</a> : O(n)</li>
--   <li><a>query</a> : O(log n)</li>
--   </ul>
data MGraph

-- | Return an empty RDF.
empty :: RDF rdf => rdf

-- | Return a RDF containing all the given triples. Handling of duplicates
--   in the input depend on the particular RDF implementation.
mkRdf :: RDF rdf => Triples -> Maybe BaseUrl -> PrefixMappings -> rdf

-- | Return all triples in the RDF, as a list.
--   
--   Note that this function returns a list of triples in the RDF as they
--   were added, without removing duplicates and without expanding
--   namespaces.
triplesOf :: RDF rdf => rdf -> Triples

-- | Return unique triples in the RDF, as a list.
--   
--   This function performs namespace expansion and removal of duplicates.
uniqTriplesOf :: RDF rdf => rdf -> Triples

-- | Select the triples in the RDF that match the given selectors.
--   
--   The three NodeSelector parameters are optional functions that match
--   the respective subject, predicate, and object of a triple. The triples
--   returned are those in the given graph for which the first selector
--   returns true when called on the subject, the second selector returns
--   true when called on the predicate, and the third selector returns true
--   when called on the ojbect. A <a>Nothing</a> parameter is equivalent to
--   a function that always returns true for the appropriate node; but
--   implementations may be able to much more efficiently answer a select
--   that involves a <a>Nothing</a> parameter rather than an <tt>(id
--   True)</tt> parameter.
--   
--   The following call illustrates the use of select, and would result in
--   the selection of all and only the triples that have a blank node as
--   subject and a literal node as object:
--   
--   <pre>
--   select gr (Just isBNode) Nothing (Just isLNode)
--   </pre>
--   
--   Note: this function may be very slow; see the documentation for the
--   particular RDF implementation for more information.
select :: RDF rdf => rdf -> NodeSelector -> NodeSelector -> NodeSelector -> Triples

-- | Return the triples in the RDF that match the given pattern, where the
--   pattern (3 Maybe Node parameters) is interpreted as a triple pattern.
--   
--   The <tt>Maybe Node</tt> params are interpreted as the subject,
--   predicate, and object of a triple, respectively. <tt>Just n</tt> is
--   true iff the triple has a node equal to <tt>n</tt> in the appropriate
--   location; <tt>Nothing</tt> is always true, regardless of the node in
--   the appropriate location.
--   
--   For example, <tt> query rdf (Just n1) Nothing (Just n2) </tt> would
--   return all and only the triples that have <tt>n1</tt> as subject and
--   <tt>n2</tt> as object, regardless of the predicate of the triple.
query :: RDF rdf => rdf -> Maybe Node -> Maybe Node -> Maybe Node -> Triples
instance NFData MGraph
instance Show MGraph
instance RDF MGraph

module Data.RDF.PatriciaTreeGraph
newtype PatriciaTreeGraph
PatriciaTreeGraph :: (Gr Node Node, IntMap Node, Maybe BaseUrl, PrefixMappings) -> PatriciaTreeGraph
empty' :: PatriciaTreeGraph
prefixMappings' :: PatriciaTreeGraph -> PrefixMappings
addPrefixMappings' :: PatriciaTreeGraph -> PrefixMappings -> Bool -> PatriciaTreeGraph
baseUrl' :: PatriciaTreeGraph -> Maybe BaseUrl
data AutoIncrMap
AutoIncrMap :: Map Node (Int, Node) -> !Int -> AutoIncrMap
theMap :: AutoIncrMap -> Map Node (Int, Node)
idxPtr :: AutoIncrMap -> !Int
insertIncr :: Node -> AutoIncrMap -> (Int, AutoIncrMap)
mkRdf' :: Triples -> Maybe BaseUrl -> PrefixMappings -> PatriciaTreeGraph
triplesOf' :: PatriciaTreeGraph -> Triples
uniqTriplesOf' :: PatriciaTreeGraph -> Triples
mkTriples :: IntMap Node -> Node -> [(Node, Key)] -> [(Node, Key)] -> [Triple]
select' :: PatriciaTreeGraph -> NodeSelector -> NodeSelector -> NodeSelector -> Triples
query' :: PatriciaTreeGraph -> Maybe Subject -> Maybe Predicate -> Maybe Object -> Triples
instance Show PatriciaTreeGraph
instance NFData PatriciaTreeGraph
instance RDF PatriciaTreeGraph
instance NFData (Gr Node Node)


-- | An RDF serializer for Turtle
--   <a>http://www.w3.org/TeamSubmission/turtle/</a>.
module Text.RDF.RDF4H.TurtleSerializer
data TurtleSerializer
TurtleSerializer :: (Maybe Text) -> PrefixMappings -> TurtleSerializer
instance RdfSerializer TurtleSerializer


-- | A parser for RDF in N-Triples format
--   <a>http://www.w3.org/TR/rdf-testcases/#ntriples</a>.
module Text.RDF.RDF4H.NTriplesParser

-- | NTriplesParser is an <a>RdfParser</a> implementation for parsing RDF
--   in the NTriples format. It requires no configuration options. To use
--   this parser, pass an <a>NTriplesParser</a> value as the first argument
--   to any of the <a>parseString</a>, <a>parseFile</a>, or <a>parseURL</a>
--   methods of the <a>RdfParser</a> type class.
data NTriplesParser
NTriplesParser :: NTriplesParser

-- | Represents a failure in parsing an N-Triples document, including an
--   error message with information about the cause for the failure.
data ParseFailure
instance RdfParser NTriplesParser


-- | An <a>RdfParser</a> implementation for the Turtle format
--   <a>http://www.w3.org/TeamSubmission/turtle/</a>.
module Text.RDF.RDF4H.TurtleParser

-- | An <a>RdfParser</a> implementation for parsing RDF in the Turtle
--   format. It is an implementation of W3C Turtle grammar rules at
--   <a>http://www.w3.org/TR/turtle/#sec-grammar-grammar</a> . It takes
--   optional arguments representing the base URL to use for resolving
--   relative URLs in the document (may be overridden in the document
--   itself using the @base directive), and the URL to use for the document
--   itself for resolving references to &lt;&gt; in the document. To use
--   this parser, pass a <a>TurtleParser</a> value as the first argument to
--   any of the <a>parseString</a>, <a>parseFile</a>, or <a>parseURL</a>
--   methods of the <a>RdfParser</a> type class.
data TurtleParser
TurtleParser :: (Maybe BaseUrl) -> (Maybe Text) -> TurtleParser
instance RdfParser TurtleParser


-- | An parser for the RDF/XML format
--   <a>http://www.w3.org/TR/REC-rdf-syntax/</a>.
module Text.RDF.RDF4H.XmlParser
data XmlParser
XmlParser :: (Maybe BaseUrl) -> (Maybe Text) -> XmlParser
instance Show GParseState
instance Show LParseState
instance RdfParser XmlParser


-- | The Core module exports all serializers and parsers, types, and query
--   functions of the library.
module Data.RDF

-- | An RDF value is a set of (unique) RDF triples, together with the
--   operations defined upon them.
--   
--   For information about the efficiency of the functions, see the
--   documentation for the particular RDF instance.
--   
--   For more information about the concept of an RDF graph, see the
--   following:
--   <a>http://www.w3.org/TR/rdf-concepts/#section-rdf-graph</a>.
class RDF rdf
baseUrl :: RDF rdf => rdf -> Maybe BaseUrl
prefixMappings :: RDF rdf => rdf -> PrefixMappings
addPrefixMappings :: RDF rdf => rdf -> PrefixMappings -> Bool -> rdf
empty :: RDF rdf => rdf
mkRdf :: RDF rdf => Triples -> Maybe BaseUrl -> PrefixMappings -> rdf
triplesOf :: RDF rdf => rdf -> Triples
uniqTriplesOf :: RDF rdf => rdf -> Triples
select :: RDF rdf => rdf -> NodeSelector -> NodeSelector -> NodeSelector -> Triples
query :: RDF rdf => rdf -> Maybe Node -> Maybe Node -> Maybe Node -> Triples

-- | An RdfSerializer is a serializer of RDF to some particular output
--   format, such as NTriples or Turtle.
class RdfSerializer s
hWriteRdf :: (RdfSerializer s, RDF rdf) => s -> Handle -> rdf -> IO ()
writeRdf :: (RdfSerializer s, RDF rdf) => s -> rdf -> IO ()
hWriteH :: (RdfSerializer s, RDF rdf) => s -> Handle -> rdf -> IO ()
writeH :: (RdfSerializer s, RDF rdf) => s -> rdf -> IO ()
hWriteTs :: RdfSerializer s => s -> Handle -> Triples -> IO ()
writeTs :: RdfSerializer s => s -> Triples -> IO ()
hWriteT :: RdfSerializer s => s -> Handle -> Triple -> IO ()
writeT :: RdfSerializer s => s -> Triple -> IO ()
hWriteN :: RdfSerializer s => s -> Handle -> Node -> IO ()
writeN :: RdfSerializer s => s -> Node -> IO ()

-- | An RdfParser is a parser that knows how to parse 1 format of RDF and
--   can parse an RDF document of that type from a string, a file, or a
--   URL. Required configuration options will vary from instance to
--   instance.
class RdfParser p
parseString :: (RdfParser p, RDF rdf) => p -> Text -> Either ParseFailure rdf
parseFile :: (RdfParser p, RDF rdf) => p -> String -> IO (Either ParseFailure rdf)
parseURL :: (RdfParser p, RDF rdf) => p -> String -> IO (Either ParseFailure rdf)
