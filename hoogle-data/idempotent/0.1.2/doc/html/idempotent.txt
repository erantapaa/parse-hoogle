-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Idempotent monoids
--   
--   A typeclass, and instances, for monoids that are idempotent.
@package idempotent
@version 0.1.2


-- | Idempotent monoids.
module Data.Monoid.Idempotent

-- | The class of monoids that are also idempotent.
--   
--   Instances must satisfy the following law:
--   
--   <ul>
--   <li><pre>mappend a a = a</pre></li>
--   </ul>
class Monoid m => Idempotent m
instance Idempotent (IntMap a)
instance Ord a => Idempotent (Map a b)
instance Idempotent IntSet
instance Ord a => Idempotent (Set a)
instance (Idempotent a, Idempotent b, Idempotent c, Idempotent d, Idempotent e) => Idempotent (a, b, c, d, e)
instance (Idempotent a, Idempotent b, Idempotent c, Idempotent d) => Idempotent (a, b, c, d)
instance (Idempotent a, Idempotent b, Idempotent c) => Idempotent (a, b, c)
instance (Idempotent a, Idempotent b) => Idempotent (a, b)
instance Idempotent m => Idempotent (r -> m)
instance Idempotent m => Idempotent (Dual m)
instance Idempotent Ordering
instance Idempotent All
instance Idempotent Any
instance Idempotent (Last a)
instance Idempotent (First a)
instance Idempotent ()


-- | Extrema (minimum and maximum) monoids.
module Data.Monoid.Extrema

-- | Monoid under minimum.
newtype Min x
Min :: x -> Min x
getMin :: Min x -> x

-- | Monoid under maximum.
newtype Max x
Max :: x -> Max x
getMax :: Max x -> x
instance Show x => Show (Min x)
instance Read x => Read (Min x)
instance Ord x => Ord (Min x)
instance Eq x => Eq (Min x)
instance Show x => Show (Max x)
instance Read x => Read (Max x)
instance Ord x => Ord (Max x)
instance Eq x => Eq (Max x)
instance (Bounded x, Ord x) => Idempotent (Max x)
instance (Bounded x, Ord x) => Monoid (Max x)
instance (Bounded x, Ord x) => Idempotent (Min x)
instance (Bounded x, Ord x) => Monoid (Min x)
