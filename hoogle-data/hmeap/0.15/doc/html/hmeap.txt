-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell Meapsoft Parser
--   
@package hmeap
@version 0.15


-- | Functions related to meapsoft analysis measures.
module Sound.Analysis.Meapsoft.Measure

-- | Cycles per second to MEL conversion, see Stevens &amp; Volkman, 1940.
cps_mel :: Floating n => n -> n

-- | MEL to cycles per second conversion, see Stevens &amp; Volkman, 1940.
mel_cps :: Floating n => n -> n

-- | Cycles per second to ERB conversion, see Glasberg &amp; Moore, 1990,
--   p. 114.
cps_erb :: Floating n => n -> n


-- | Meapsoft analysis data structure.
module Sound.Analysis.Meapsoft.Header

-- | Data type representing a MEAPsoft analysis feature. The
--   <a>feature_column</a> is the integer column index for the feature in
--   the analysis data. The <a>feature_degree</a> is the number of columns
--   the feature requires.
data Feature
Feature :: String -> Int -> Int -> Feature
feature_name :: Feature -> String
feature_column :: Feature -> Int
feature_degree :: Feature -> Int

-- | Read the header of a MEAPsoft analysis file and extract the list of
--   stored features.
read_header :: FilePath -> IO (Either String [Feature])

-- | Search for a named feature.
find_feature :: String -> [Feature] -> Maybe Feature

-- | A variant of <a>find_feature</a> that raises an error if the feature
--   is not located. All analysis files have the features onset_time and
--   chunk_length.
required_feature :: String -> [Feature] -> Feature

-- | True iff the analysis data contains the named feature.
has_feature :: String -> [Feature] -> Bool
instance Show Feature


-- | Meapsoft analysis data input.
module Sound.Analysis.Meapsoft.Data

-- | Read positive and negative <tt>Infinity</tt>, error if string is
--   malformed.
read_inf :: Fractional n => String -> n

-- | <tt>ByteString</tt> to <a>Fractional</a> via <a>realToFrac</a> and
--   <a>read_inf</a>.
to_f :: Fractional n => ByteString -> n

-- | Given the number of columns, reads an entire MEAPsoft data set into a
--   list and returns the data paired with the number of rows.
read_data :: Fractional n => FilePath -> Int -> IO (Int, [n])

-- | Class to form <a>UArray</a> given interleaved input data.
class Floating a => Meap_Data a
meap_data_uarray :: Meap_Data a => Int -> Int -> [a] -> UArray (Int, Int) a
meap_data_index :: Meap_Data a => UArray (Int, Int) a -> (Int, Int) -> a
instance Meap_Data Double
instance Meap_Data Float


-- | Data representation and parser for MEAPsoft analysis frames.
module Sound.Analysis.Meapsoft

-- | Data type representing a MEAPsoft anaylsis file.
data MEAP t

-- | Load a MEAPsoft analysis file, either a segmentation file or a feature
--   file.
--   
--   <pre>
--   let fn = "/home/rohan/data/audio/xenakis/jonchaies.wav.seg"
--   Right m &lt;- read_meap fn :: IO (Either String (MEAP Double))
--   map feature_name (features m) == ["onset_time","chunk_length"]
--   </pre>
read_meap :: Meap_Data t => FilePath -> IO (Either String (MEAP t))

-- | The list of <a>Feature</a>s contained in the analysis file.
features :: MEAP t -> [Feature]

-- | The number of frames (rows) contained in the analysis file.
n_frames :: MEAP t -> Int

-- | The analysis data stored in a <a>UArray</a>. Indices are of the form
--   (row, column).
uarray_data :: MEAP t -> UArray (Int, Int) t

-- | The number of columns at each analysis frame (row). Segmentation files
--   have two columns, onset time and segment length.
--   
--   <pre>
--   n_columns m == 2
--   </pre>
n_columns :: MEAP t -> Int

-- | Extract the indicated frame (row) as a list.
--   
--   <pre>
--   length (frame_l m 0) == n_columns m
--   </pre>
frame_l :: Meap_Data t => MEAP t -> Int -> [t]

-- | Extract the indicated column as a list. The length of the column is
--   the <a>n_frames</a> of the analysis file.
--   
--   <pre>
--   length (column_l m 0) == n_frames m
--   </pre>
column_l :: Meap_Data t => MEAP t -> Int -> [t]

-- | Extract data from the indicated frame and column.
--   
--   <pre>
--   position m (0,0) == frame_l m 0 !! 0
--   </pre>
position :: Meap_Data t => MEAP t -> (Int, Int) -> t

-- | Extract segmentation data as a list. The segmentation data is given by
--   the two columns onset_time and chunk_length.
--   
--   <pre>
--   length (segments_l m) == n_frames m
--   segments_l m !! 0 == (\[i,j] -&gt; (i,j)) (frame_l m 0)
--   </pre>
segments_l :: Meap_Data t => MEAP t -> [(t, t)]

-- | The list of feature names generated by MEAPsoft 2.0.
--   
--   <pre>
--   map (`elem` feature_names) ["onset_time","chunk_length"] == [True,True]
--   </pre>
feature_names :: [String]

-- | Given a list of <tt>(onset-time,duration)</tt> pairs generate a
--   <tt>MEAP</tt>.
from_onsets :: Meap_Data t => [(t, t)] -> MEAP t
