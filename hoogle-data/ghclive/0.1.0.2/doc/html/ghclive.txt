-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interactive Haskell interpreter in a browser.
--   
--   ghclive is an interactive multi-user Haskell interpreter in a browser.
--   It mixes a pastebin with an interpreter and is designed for remote
--   teaching.
@package ghclive
@version 0.1.0.2

module Network.Web.GHCLive.Display
data ClientType
Html :: ClientType
Svg :: ClientType
Text :: ClientType
newtype DisplayResult
DisplayResult :: [DR] -> DisplayResult
data DR
DR :: ClientType -> Text -> DR
clientType :: DR -> ClientType
result :: DR -> Text
text :: Text -> DisplayResult
html :: Markup -> DisplayResult
svg :: Markup -> DisplayResult
displayString :: String -> DisplayResult
displayChar :: Char -> DisplayResult
displayListOf :: (a -> DisplayResult) -> [a] -> DisplayResult

-- | Too fool ExtendedDefaultRules into firing
displaying :: (Display a, Show a) => a -> DisplayResult
class GDisplay f
gdisplay :: GDisplay f => f a -> DisplayResult
class Display a where displayList = displayListOf display display = gdisplay . from
displayList :: Display a => [a] -> DisplayResult
display :: Display a => a -> DisplayResult
displayEmpty :: DisplayResult
renderMyDiagramToSvg :: Double -> Diagram SVG R2 -> Html
instance Typeable DR
instance Typeable DisplayResult
instance Eq ClientType
instance Show ClientType
instance Enum ClientType
instance Eq DR
instance Show DR
instance Eq DisplayResult
instance Monoid DisplayResult
instance ToJSON DisplayResult
instance Show (QDiagram b v m)
instance Show Markup
instance (Display a, Display b) => Display (Either a b)
instance Display a => Display (Maybe a)
instance Display ()
instance Display Char
instance Display Double
instance Display Float
instance Display Integer
instance Display Word64
instance Display Word32
instance Display Word16
instance Display Word8
instance Display Word
instance Display Int64
instance Display Int32
instance Display Int16
instance Display Int8
instance Display Int
instance (Display a, Display b, Display c) => Display (a, b, c)
instance (Display a, Display b) => Display (a, b)
instance Display Markup
instance Display a => Display [a]
instance Display Text
instance Display Text
instance (a ~ SVG, b ~ R2, c ~ Any) => Display (QDiagram a b c)
instance Display DisplayResult
instance GDisplay f => GDisplay (M1 D c f)
instance GDisplay f => GDisplay (M1 S c f)
instance (Constructor c, GDisplay f) => GDisplay (M1 C c f)
instance (GDisplay f, GDisplay g) => GDisplay (f :*: g)
instance (GDisplay f, GDisplay g) => GDisplay (f :+: g)
instance Display a => GDisplay (K1 i a)
instance GDisplay U1
instance ToJSON DR
instance ToJSON ClientType
