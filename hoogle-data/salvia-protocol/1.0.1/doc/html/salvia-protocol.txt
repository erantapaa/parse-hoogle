-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Salvia webserver protocol suite supporting URI, HTTP, Cookie and MIME.
--   
--   Protocol suite for the Salvia webserver, including functionality for
--   URI, HTTP, Cookie and MIME. This pacakage exposes the datatypes,
--   parsers, pretty printers and some utility functions to deal with
--   several web protocols. The <i>fclabels</i> package is used to generate
--   labels pointing into the exposed datatypes, allowing to easily get,
--   set and modify parts of the structures.
@package salvia-protocol
@version 1.0.1

module Network.Protocol.Uri.Chars
unreserved :: Char -> Bool
genDelims :: Char -> Bool
subDelims :: Char -> Bool

module Network.Protocol.Uri.Encode

-- | URI encode a string.
encode :: String -> String

-- | URI decode a string.
decode :: String -> String

-- | Decoding and encoding as a label.
encoded :: String :<->: String

module Network.Protocol.Uri.Data
type Scheme = String
type RegName = String
type Port = Int
type Query = String
type Fragment = String
type Hash = String
type UserInfo = String
type PathSegment = String
data IPv4
IPv4 :: Int -> Int -> Int -> Int -> IPv4
data Domain
Domain :: [String] -> Domain
__parts :: Domain -> [String]
data Host
Hostname :: Domain -> Host
__domain :: Host -> Domain
RegName :: RegName -> Host
__regname :: Host -> RegName
IP :: IPv4 -> Host
__ipv4 :: Host -> IPv4
data Authority
Authority :: UserInfo -> Host -> Maybe Port -> Authority
__userinfo :: Authority -> UserInfo
__host :: Authority -> Host
__port :: Authority -> Maybe Port
data Path
Path :: [PathSegment] -> Path
__segments :: Path -> [PathSegment]
data Uri
Uri :: Bool -> Scheme -> Authority -> Path -> Query -> Fragment -> Uri
_relative :: Uri -> Bool
_scheme :: Uri -> Scheme
_authority :: Uri -> Authority
__path :: Uri -> Path
__query :: Uri -> Query
__fragment :: Uri -> Fragment
_parts :: Domain :-> [String]
_domain :: Host :-> Domain
_ipv4 :: Host :-> IPv4
_regname :: Host :-> String
_host :: Authority :-> Host
_port :: Authority :-> Maybe Port
_userinfo :: Authority :-> UserInfo
_segments :: Path :-> [PathSegment]
_path :: Uri :-> Path

-- | Access raw (URI-encoded) query.
_query :: Uri :-> Query

-- | Access authority part of the URI.
authority :: Uri :-> Authority

-- | Access domain part of the URI, returns <a>Nothing</a> when the host is
--   a regname or IP-address.
domain :: Uri :-> Maybe Domain

-- | Access regname part of the URI, returns <a>Nothing</a> when the host
--   is a domain or IP-address.
regname :: Uri :-> Maybe RegName

-- | Access IPv4-address part of the URI, returns <a>Nothing</a> when the
--   host is a domain or regname.
ipv4 :: Uri :-> Maybe IPv4

-- | Access raw (URI-encoded) fragment.
_fragment :: Uri :-> Fragment

-- | Access the port number part of the URI when available.
port :: Uri :-> Maybe Port

-- | Access the query part of the URI, the part that follows the ?. The
--   query will be properly decoded when reading and encoded when writing.
query :: Uri :-> Query

-- | Access the fragment part of the URI, the part that follows the #. The
--   fragment will be properly decoded when reading and encoded when
--   writing.
fragment :: Uri :-> Fragment

-- | Is a URI relative?
relative :: Uri :-> Bool

-- | Access the scheme part of the URI. A scheme is probably the protocol
--   indicator like <i>http</i>, <i>ftp</i>, etc.
scheme :: Uri :-> Scheme

-- | Access the path part of the URI as a list of path segments. The
--   segments will still be URI-encoded.
segments :: Uri :-> [PathSegment]

-- | Access the userinfo part of the URI. The userinfo contains an optional
--   username and password or some other credentials.
userinfo :: Uri :-> String

-- | Constructors for making empty URI.
mkUri :: Uri

-- | Constructors for making empty <a>Scheme</a>.
mkScheme :: Scheme

-- | Constructors for making empty <a>Path</a>.
mkPath :: Path

-- | Constructors for making empty <a>Authority</a>.
mkAuthority :: Authority

-- | Constructors for making empty <a>Query</a>.
mkQuery :: Query

-- | Constructors for making empty <a>Fragment</a>.
mkFragment :: Fragment

-- | Constructors for making empty <a>UserInfo</a>.
mkUserinfo :: UserInfo

-- | Constructors for making empty <a>Host</a>.
mkHost :: Host

-- | Constructors for making empty <a>Port</a>.
mkPort :: Maybe Port
instance Eq Uri
instance Ord Uri
instance Eq Path
instance Ord Path
instance Eq Authority
instance Ord Authority
instance Eq Host
instance Ord Host
instance Eq Domain
instance Ord Domain
instance Eq IPv4
instance Ord IPv4

module Network.Protocol.Uri.Printer
ss :: String -> ShowS
sc :: Char -> ShowS

-- | ShowS version of intersperse.
intersperseS :: ShowS -> [ShowS] -> ShowS
instance Show Uri
instance Show Authority
instance Show Host
instance Show Domain
instance Show IPv4
instance Show Path

module Network.Protocol.Uri.Remap

-- | Map one URI to another using a URI mapping scheme. A URI mapping
--   scheme is simply a pair of URIs of which only the host part, port
--   number and path will be taken into account when mapping.
remap :: (Uri, Uri) -> Uri -> Maybe Uri


-- | Handling mime types. This module contains a mapping from file
--   extensions to mime-types taken from the Apache webserver project.
module Network.Protocol.Mime
type Mime = String

-- | Get the mimetype for the specified extension.
mime :: String -> Maybe Mime

-- | The default mimetype is text/plain.
defaultMime :: Mime

-- | The mapping from extension to mimetype.
extensionToMime :: Map String Mime

module Network.Protocol.Uri.Path

-- | Label to access the extension of a filename.
extension :: FilePath :-> Maybe String

-- | Try to guess the correct mime type for the input file based on the
--   file extension.
mimetype :: FilePath -> Maybe String

-- | Normalize a path by removing or merging all dot or dot-dot segments
--   and double slashes.
normalize :: FilePath -> FilePath

-- | Jail a filepath within a jail directory.
jail :: FilePath -> FilePath -> Maybe FilePath

-- | Concatenate and normalize two filepaths.
(/+) :: FilePath -> FilePath -> FilePath

module Network.Protocol.Http.Status

-- | HTTP status codes.
data Status

-- | 100
Continue :: Status

-- | 101
SwitchingProtocols :: Status

-- | 200
OK :: Status

-- | 201
Created :: Status

-- | 202
Accepted :: Status

-- | 203
NonAuthoritativeInformation :: Status

-- | 204
NoContent :: Status

-- | 205
ResetContent :: Status

-- | 206
PartialContent :: Status

-- | 300
MultipleChoices :: Status

-- | 301
MovedPermanently :: Status

-- | 302
Found :: Status

-- | 303
SeeOther :: Status

-- | 304
NotModified :: Status

-- | 305
UseProxy :: Status

-- | 307
TemporaryRedirect :: Status

-- | 400
BadRequest :: Status

-- | 401
Unauthorized :: Status

-- | 402
PaymentRequired :: Status

-- | 403
Forbidden :: Status

-- | 404
NotFound :: Status

-- | 405
MethodNotAllowed :: Status

-- | 406
NotAcceptable :: Status

-- | 407
ProxyAuthenticationRequired :: Status

-- | 408
RequestTimeOut :: Status

-- | 409
Conflict :: Status

-- | 410
Gone :: Status

-- | 411
LengthRequired :: Status

-- | 412
PreconditionFailed :: Status

-- | 413
RequestEntityTooLarge :: Status

-- | 414
RequestURITooLarge :: Status

-- | 415
UnsupportedMediaType :: Status

-- | 416
RequestedRangeNotSatisfiable :: Status

-- | 417
ExpectationFailed :: Status

-- | 500
InternalServerError :: Status

-- | 501
NotImplemented :: Status

-- | 502
BadGateway :: Status

-- | 503
ServiceUnavailable :: Status

-- | 504
GatewayTimeOut :: Status

-- | 505
HTTPVersionNotSupported :: Status
CustomStatus :: Int -> String -> Status

-- | RFC2616 sec6.1.1 Status Code and Reason Phrase.
--   
--   Bidirectional mapping from status numbers to codes.
statusCodes :: Bimap Int Status

-- | Every status greater-than or equal to 400 is considered to be a
--   failure.
statusFailure :: Status -> Bool

-- | Conversion from status numbers to codes.
statusFromCode :: Int -> Status

-- | Conversion from status codes to numbers.
codeFromStatus :: Status -> Int
instance Eq Status
instance Ord Status
instance Show Status

module Network.Protocol.Uri.Query
type Parameters = [(String, Maybe String)]

-- | Fetch the query parameters form a URI.
queryParams :: Uri :-> Parameters

-- | Generic lens to parse/print a string as query parameters.
params :: String :<->: Parameters

-- | Generic label for accessing key value pairs encoded in a string.
keyValues :: String -> String -> String :<->: Parameters

-- | Generic label for accessing lists of values encoded in a string.
values :: String -> String :<->: [String]
trim :: String -> String

module Network.Protocol.Uri.Parser

-- | Access the host part of the URI.
host :: Uri :-> String

-- | Access the path part of the URI. The query will be properly decoded
--   when reading and encoded when writing.
path :: Uri :-> FilePath

-- | Access the path and query parts of the URI as a single string. The
--   string will will be properly decoded when reading and encoded when
--   writing.
pathAndQuery :: Uri :-> String

-- | Parse string into a URI and ignore all failures by returning an empty
--   URI when parsing fails. Can be quite useful in situations that parse
--   errors are unlikely.
toUri :: String -> Uri

-- | Parse string into a URI.
parseUri :: String -> Either ParseError Uri

-- | Parse string into a URI and only accept absolute URIs.
parseAbsoluteUri :: String -> Either ParseError Uri

-- | Parse string into an authority.
parseAuthority :: String -> Either ParseError Authority

-- | Parse string into a path.
parsePath :: String -> Either ParseError Path

-- | Parse string into a host.
parseHost :: String -> Either ParseError Host
pDigit :: CharParser st Char
pAlphanum :: CharParser st Char
pAlpha :: CharParser st Char
pUnreserved :: GenParser Char st Char
pReserved :: GenParser Char st Char
pGenDelims :: CharParser st Char
pSubDelims :: CharParser st Char
pPctEncoded :: GenParser Char st String
pHex :: GenParser Char st String
pUri :: GenParser Char st Uri
pScheme :: GenParser Char st String
pAuthority :: GenParser Char st Authority
pUserinfo :: GenParser Char st String
pHost :: GenParser Char st Host
pIPv4address :: GenParser Char st [Int]
pDecOctet :: GenParser Char st Int
pRegName :: GenParser Char st String
pHostname :: GenParser Char st [String]
pDomainlabel :: GenParser Char st String
pPort :: GenParser Char st (Maybe Port)
pQuery :: GenParser Char st String
pFragment :: GenParser Char st String
pPathAbempty :: GenParser Char st Path
pPathAbsolute :: GenParser Char st Path
pPathNoscheme :: GenParser Char st Path
pPathRootless :: GenParser Char st Path
pPathEmpty :: GenParser Char st Path
pPath :: GenParser Char st Path
pSegmentNz :: GenParser Char st String
pSegmentNzNc :: GenParser Char st String
pSegment :: GenParser Char st String
_pSlashSegments :: GenParser Char st [PathSegment]
pPchar :: GenParser Char st String
pUriReference :: GenParser Char st Uri
pRelativeRef :: GenParser Char st Uri
pRelativePart :: GenParser Char st (Query -> Fragment -> Uri)
pAbsoluteUri :: GenParser Char st Uri
instance Alternative (GenParser Char st)
instance Applicative (GenParser Char st)


-- | See rfc2396 for more info.
module Network.Protocol.Uri
type Scheme = String
type RegName = String
type Port = Int
type Query = String
type Fragment = String
type Hash = String
type UserInfo = String
type PathSegment = String
type Parameters = [(String, Maybe String)]
data Domain
Domain :: [String] -> Domain
data IPv4
IPv4 :: Int -> Int -> Int -> Int -> IPv4
data Path
Path :: [PathSegment] -> Path
data Host
Hostname :: Domain -> Host
RegName :: RegName -> Host
IP :: IPv4 -> Host
data Authority
Authority :: UserInfo -> Host -> Maybe Port -> Authority
data Uri
Uri :: Bool -> Scheme -> Authority -> Path -> Query -> Fragment -> Uri

-- | Is a URI relative?
relative :: Uri :-> Bool

-- | Access the scheme part of the URI. A scheme is probably the protocol
--   indicator like <i>http</i>, <i>ftp</i>, etc.
scheme :: Uri :-> Scheme

-- | Access the userinfo part of the URI. The userinfo contains an optional
--   username and password or some other credentials.
userinfo :: Uri :-> String

-- | Access authority part of the URI.
authority :: Uri :-> Authority

-- | Access the host part of the URI.
host :: Uri :-> String

-- | Access domain part of the URI, returns <a>Nothing</a> when the host is
--   a regname or IP-address.
domain :: Uri :-> Maybe Domain

-- | Access IPv4-address part of the URI, returns <a>Nothing</a> when the
--   host is a domain or regname.
ipv4 :: Uri :-> Maybe IPv4

-- | Access regname part of the URI, returns <a>Nothing</a> when the host
--   is a domain or IP-address.
regname :: Uri :-> Maybe RegName

-- | Access the port number part of the URI when available.
port :: Uri :-> Maybe Port

-- | Access the path part of the URI. The query will be properly decoded
--   when reading and encoded when writing.
path :: Uri :-> FilePath

-- | Access the path part of the URI as a list of path segments. The
--   segments will still be URI-encoded.
segments :: Uri :-> [PathSegment]

-- | Access the query part of the URI, the part that follows the ?. The
--   query will be properly decoded when reading and encoded when writing.
query :: Uri :-> Query

-- | Access the fragment part of the URI, the part that follows the #. The
--   fragment will be properly decoded when reading and encoded when
--   writing.
fragment :: Uri :-> Fragment

-- | Access the path and query parts of the URI as a single string. The
--   string will will be properly decoded when reading and encoded when
--   writing.
pathAndQuery :: Uri :-> String

-- | Fetch the query parameters form a URI.
queryParams :: Uri :-> Parameters

-- | Generic lens to parse/print a string as query parameters.
params :: String :<->: Parameters

-- | Label to access the extension of a filename.
extension :: FilePath :-> Maybe String

-- | Map one URI to another using a URI mapping scheme. A URI mapping
--   scheme is simply a pair of URIs of which only the host part, port
--   number and path will be taken into account when mapping.
remap :: (Uri, Uri) -> Uri -> Maybe Uri

-- | URI encode a string.
encode :: String -> String

-- | URI decode a string.
decode :: String -> String

-- | Decoding and encoding as a label.
encoded :: String :<->: String

-- | Constructors for making empty URI.
mkUri :: Uri

-- | Constructors for making empty <a>Scheme</a>.
mkScheme :: Scheme

-- | Constructors for making empty <a>Path</a>.
mkPath :: Path

-- | Constructors for making empty <a>Authority</a>.
mkAuthority :: Authority

-- | Constructors for making empty <a>Query</a>.
mkQuery :: Query

-- | Constructors for making empty <a>Fragment</a>.
mkFragment :: Fragment

-- | Constructors for making empty <a>UserInfo</a>.
mkUserinfo :: UserInfo

-- | Constructors for making empty <a>Host</a>.
mkHost :: Host

-- | Constructors for making empty <a>Port</a>.
mkPort :: Maybe Port

-- | Parse string into a URI and ignore all failures by returning an empty
--   URI when parsing fails. Can be quite useful in situations that parse
--   errors are unlikely.
toUri :: String -> Uri

-- | Parse string into a URI.
parseUri :: String -> Either ParseError Uri

-- | Parse string into a URI and only accept absolute URIs.
parseAbsoluteUri :: String -> Either ParseError Uri

-- | Parse string into an authority.
parseAuthority :: String -> Either ParseError Authority

-- | Parse string into a path.
parsePath :: String -> Either ParseError Path

-- | Parse string into a host.
parseHost :: String -> Either ParseError Host

-- | Try to guess the correct mime type for the input file based on the
--   file extension.
mimetype :: FilePath -> Maybe String

-- | Normalize a path by removing or merging all dot or dot-dot segments
--   and double slashes.
normalize :: FilePath -> FilePath

-- | Jail a filepath within a jail directory.
jail :: FilePath -> FilePath -> Maybe FilePath

-- | Concatenate and normalize two filepaths.
(/+) :: FilePath -> FilePath -> FilePath

module Network.Protocol.Http.Data

-- | List of HTTP request methods.
data Method
OPTIONS :: Method
GET :: Method
HEAD :: Method
POST :: Method
PUT :: Method
DELETE :: Method
TRACE :: Method
CONNECT :: Method
OTHER :: String -> Method

-- | HTTP protocol version.
data Version
Version :: Int -> Int -> Version
_major :: Version -> Int
_minor :: Version -> Int
type Key = String
type Value = String

-- | HTTP headers as mapping from keys to values.
newtype Headers
Headers :: [(Key, Value)] -> Headers
unHeaders :: Headers -> [(Key, Value)]

-- | Request specific part of HTTP messages.
data Request
Request :: Method -> String -> Request
__method :: Request -> Method
__uri :: Request -> String

-- | Response specific part of HTTP messages.
data Response
Response :: Status -> Response
__status :: Response -> Status

-- | An HTTP message. The message body is *not* included.
data Http a
Http :: a -> Version -> Headers -> Http a
_headline :: Http a -> a
_version :: Http a -> Version
_headers :: Http a -> Headers

-- | All recognized method constructors as a list.
methods :: [Method]

-- | Create HTTP 1.0 version.
http10 :: Version

-- | Create HTTP 1.1 version.
http11 :: Version

-- | Create an empty set of headers.
emptyHeaders :: Headers

-- | Create an empty HTTP request message.
emptyRequest :: Http Request

-- | Create an empty HTTP response message.
emptyResponse :: Http Response

-- | Label to access the major part of the version.
major :: Version :-> Int

-- | Label to access the minor part of the version.
minor :: Version :-> Int
_uri :: Request :-> String
_method :: Request :-> Method
_status :: Response :-> Status

-- | Label to access the header of an HTTP message.
headers :: Http a :-> Headers

-- | Label to access the version part of an HTTP message.
version :: Http a :-> Version

-- | Label to access the header line part of an HTTP message.
headline :: Http a :-> a

-- | Label to access the method part of an HTTP request message.
method :: Http Request :-> Method

-- | Label to access the URI part of an HTTP request message.
uri :: Http Request :-> String

-- | Label to access the URI part of an HTTP request message and access it
--   as a true URI data type.
asUri :: Http Request :-> Uri

-- | Label to access the status part of an HTTP response message.
status :: Http Response :-> Status

-- | Normalize the capitalization of an HTTP header key.
normalizeHeader :: Key -> Key

-- | Generic label to access an HTTP header field by key.
header :: Key -> Http a :-> Maybe Value
instance (Eq a) => Eq (Http a)
instance Eq Response
instance Eq Request
instance Eq Headers
instance Eq Version
instance Ord Version
instance Show Method
instance Eq Method

module Network.Protocol.Http.Parser

-- | Parse a string as an HTTP request message. This parser is very
--   forgiving.
parseRequest :: String -> Either String (Http Request)

-- | Parse a string as an HTTP request message. This parser is very
--   forgiving.
parseResponse :: String -> Either String (Http Response)

-- | Parse a string as a list of HTTP headers.
parseHeaders :: String -> Either String Headers

-- | Parsec parser to parse the header part of an HTTP request.
pRequest :: GenParser Char st (Http Request)

-- | Parsec parser to parse the header part of an HTTP response.
pResponse :: GenParser Char st (Http Response)

-- | Parsec parser to parse one or more, possibly multiline, HTTP header
--   lines.
pHeaders :: GenParser Char st Headers

-- | Parsec parser to parse HTTP versions. Recognizes X.X versions only.
pVersion :: GenParser Char st Version

-- | Parsec parser to parse an HTTP method. Parses arbitrary method but
--   actually recognizes the ones listed as a constructor for
--   <a>Method</a>.
pMethod :: GenParser Char st Method

-- | Recognizes HTTP protocol version 1.0 and 1.1, all other string will
--   produce version 1.1.
versionFromString :: String -> Version

-- | Helper to turn fully capitalized string into request method.
methodFromString :: String -> Method

module Network.Protocol.Http.Printer

-- | Show HTTP request status line.
showRequestLine :: Http Request -> String -> String

-- | Show HTTP response status line.
showResponseLine :: Http Response -> String -> String
instance Show Version
instance Show Headers
instance Show (Http Response)
instance Show (Http Request)

module Network.Protocol.Http.Headers

-- | Access the <i>Content-Length</i> header field.
contentLength :: (Read i, Integral i) => Http a :-> Maybe i

-- | Access the <i>Connection</i> header field.
connection :: Http a :-> Maybe String

-- | Access the <i>Accept</i> header field.
accept :: Http a :-> Maybe Parameters

-- | Access the <i>Accept-Encoding</i> header field.
acceptEncoding :: Http a :-> Maybe [String]

-- | Access the <i>Accept-Language</i> header field.
acceptLanguage :: Http a :-> Maybe [String]

-- | Access the <i>Connection</i> header field.
cacheControl :: Http a :-> Maybe String

-- | Access the <i>Keep-Alive</i> header field.
keepAlive :: (Read i, Integral i) => Http a :-> Maybe i

-- | Access the <i>Cookie</i> header field.
cookie :: Http Request :-> Maybe String

-- | Access the <i>Set-Cookie</i> header field.
setCookie :: Http Response :-> Maybe String

-- | Access the <i>Location</i> header field.
location :: Http a :-> Maybe String

-- | Access the <i>Content-Type</i> header field. The content-type will be
--   parsed into a mimetype and optional charset.
contentType :: Http a :-> Maybe (String, Maybe String)

-- | Access the <i>Date</i> header field.
date :: Http a :-> Maybe String

-- | Access the <i>Host</i> header field.
hostname :: Http a :-> Maybe String

-- | Access the <i>Server</i> header field.
server :: Http a :-> Maybe String

-- | Access the <i>User-Agent</i> header field.
userAgent :: Http a :-> Maybe String

-- | Access the <i>Upgrade</i> header field.
upgrade :: Http a :-> Maybe String

-- | Access the <i>Last-Modified</i> header field.
lastModified :: Http a :-> Maybe Value

-- | Access the <i>Accept-Ranges</i> header field.
acceptRanges :: Http a :-> Maybe Value

-- | Access the <i>ETag</i> header field.
eTag :: Http a :-> Maybe Value

module Network.Protocol.Http

-- | List of HTTP request methods.
data Method
OPTIONS :: Method
GET :: Method
HEAD :: Method
POST :: Method
PUT :: Method
DELETE :: Method
TRACE :: Method
CONNECT :: Method
OTHER :: String -> Method

-- | HTTP protocol version.
data Version
type Key = String
type Value = String

-- | HTTP headers as mapping from keys to values.
newtype Headers
Headers :: [(Key, Value)] -> Headers
unHeaders :: Headers -> [(Key, Value)]

-- | Request specific part of HTTP messages.
data Request
Request :: Method -> String -> Request

-- | Response specific part of HTTP messages.
data Response
Response :: Status -> Response

-- | An HTTP message. The message body is *not* included.
data Http a
Http :: a -> Version -> Headers -> Http a

-- | Create HTTP 1.0 version.
http10 :: Version

-- | Create HTTP 1.1 version.
http11 :: Version

-- | Create an empty set of headers.
emptyHeaders :: Headers

-- | Create an empty HTTP request message.
emptyRequest :: Http Request

-- | Create an empty HTTP response message.
emptyResponse :: Http Response

-- | All recognized method constructors as a list.
methods :: [Method]

-- | Label to access the major part of the version.
major :: Version :-> Int

-- | Label to access the minor part of the version.
minor :: Version :-> Int

-- | Label to access the header of an HTTP message.
headers :: Http a :-> Headers

-- | Label to access the version part of an HTTP message.
version :: Http a :-> Version

-- | Label to access the header line part of an HTTP message.
headline :: Http a :-> a

-- | Label to access the method part of an HTTP request message.
method :: Http Request :-> Method

-- | Label to access the URI part of an HTTP request message.
uri :: Http Request :-> String

-- | Label to access the URI part of an HTTP request message and access it
--   as a true URI data type.
asUri :: Http Request :-> Uri

-- | Label to access the status part of an HTTP response message.
status :: Http Response :-> Status

-- | Normalize the capitalization of an HTTP header key.
normalizeHeader :: Key -> Key

-- | Generic label to access an HTTP header field by key.
header :: Key -> Http a :-> Maybe Value

-- | Access the <i>Content-Length</i> header field.
contentLength :: (Read i, Integral i) => Http a :-> Maybe i

-- | Access the <i>Connection</i> header field.
connection :: Http a :-> Maybe String

-- | Access the <i>Accept</i> header field.
accept :: Http a :-> Maybe Parameters

-- | Access the <i>Accept-Encoding</i> header field.
acceptEncoding :: Http a :-> Maybe [String]

-- | Access the <i>Accept-Language</i> header field.
acceptLanguage :: Http a :-> Maybe [String]

-- | Access the <i>Connection</i> header field.
cacheControl :: Http a :-> Maybe String

-- | Access the <i>Keep-Alive</i> header field.
keepAlive :: (Read i, Integral i) => Http a :-> Maybe i

-- | Access the <i>Cookie</i> header field.
cookie :: Http Request :-> Maybe String

-- | Access the <i>Set-Cookie</i> header field.
setCookie :: Http Response :-> Maybe String

-- | Access the <i>Location</i> header field.
location :: Http a :-> Maybe String

-- | Access the <i>Content-Type</i> header field. The content-type will be
--   parsed into a mimetype and optional charset.
contentType :: Http a :-> Maybe (String, Maybe String)

-- | Access the <i>Date</i> header field.
date :: Http a :-> Maybe String

-- | Access the <i>Host</i> header field.
hostname :: Http a :-> Maybe String

-- | Access the <i>Server</i> header field.
server :: Http a :-> Maybe String

-- | Access the <i>User-Agent</i> header field.
userAgent :: Http a :-> Maybe String

-- | Access the <i>Upgrade</i> header field.
upgrade :: Http a :-> Maybe String

-- | Access the <i>Last-Modified</i> header field.
lastModified :: Http a :-> Maybe Value

-- | Access the <i>Accept-Ranges</i> header field.
acceptRanges :: Http a :-> Maybe Value

-- | Access the <i>ETag</i> header field.
eTag :: Http a :-> Maybe Value

-- | Parse a string as an HTTP request message. This parser is very
--   forgiving.
parseRequest :: String -> Either String (Http Request)

-- | Parse a string as an HTTP request message. This parser is very
--   forgiving.
parseResponse :: String -> Either String (Http Response)

-- | Parse a string as a list of HTTP headers.
parseHeaders :: String -> Either String Headers

-- | Parsec parser to parse the header part of an HTTP request.
pRequest :: GenParser Char st (Http Request)

-- | Parsec parser to parse the header part of an HTTP response.
pResponse :: GenParser Char st (Http Response)

-- | Parsec parser to parse one or more, possibly multiline, HTTP header
--   lines.
pHeaders :: GenParser Char st Headers

-- | Parsec parser to parse HTTP versions. Recognizes X.X versions only.
pVersion :: GenParser Char st Version

-- | Parsec parser to parse an HTTP method. Parses arbitrary method but
--   actually recognizes the ones listed as a constructor for
--   <a>Method</a>.
pMethod :: GenParser Char st Method

-- | Recognizes HTTP protocol version 1.0 and 1.1, all other string will
--   produce version 1.1.
versionFromString :: String -> Version

-- | Helper to turn fully capitalized string into request method.
methodFromString :: String -> Method

-- | Show HTTP request status line.
showRequestLine :: Http Request -> String -> String

-- | Show HTTP response status line.
showResponseLine :: Http Response -> String -> String

-- | HTTP status codes.
data Status

-- | 100
Continue :: Status

-- | 101
SwitchingProtocols :: Status

-- | 200
OK :: Status

-- | 201
Created :: Status

-- | 202
Accepted :: Status

-- | 203
NonAuthoritativeInformation :: Status

-- | 204
NoContent :: Status

-- | 205
ResetContent :: Status

-- | 206
PartialContent :: Status

-- | 300
MultipleChoices :: Status

-- | 301
MovedPermanently :: Status

-- | 302
Found :: Status

-- | 303
SeeOther :: Status

-- | 304
NotModified :: Status

-- | 305
UseProxy :: Status

-- | 307
TemporaryRedirect :: Status

-- | 400
BadRequest :: Status

-- | 401
Unauthorized :: Status

-- | 402
PaymentRequired :: Status

-- | 403
Forbidden :: Status

-- | 404
NotFound :: Status

-- | 405
MethodNotAllowed :: Status

-- | 406
NotAcceptable :: Status

-- | 407
ProxyAuthenticationRequired :: Status

-- | 408
RequestTimeOut :: Status

-- | 409
Conflict :: Status

-- | 410
Gone :: Status

-- | 411
LengthRequired :: Status

-- | 412
PreconditionFailed :: Status

-- | 413
RequestEntityTooLarge :: Status

-- | 414
RequestURITooLarge :: Status

-- | 415
UnsupportedMediaType :: Status

-- | 416
RequestedRangeNotSatisfiable :: Status

-- | 417
ExpectationFailed :: Status

-- | 500
InternalServerError :: Status

-- | 501
NotImplemented :: Status

-- | 502
BadGateway :: Status

-- | 503
ServiceUnavailable :: Status

-- | 504
GatewayTimeOut :: Status

-- | 505
HTTPVersionNotSupported :: Status
CustomStatus :: Int -> String -> Status

-- | Every status greater-than or equal to 400 is considered to be a
--   failure.
statusFailure :: Status -> Bool

-- | Conversion from status numbers to codes.
statusFromCode :: Int -> Status

-- | Conversion from status codes to numbers.
codeFromStatus :: Status -> Int


-- | For more information: http:<i></i>www.ietf.org<i>rfc</i>rfc2109.txt
module Network.Protocol.Cookie

-- | The <a>Cookie</a> data type containg one key/value pair with all the
--   (potentially optional) meta-data.
data Cookie
Cookie :: String -> String -> Maybe String -> Maybe String -> Bool -> Maybe String -> Maybe Int -> Maybe String -> Maybe String -> [Int] -> Bool -> Int -> Cookie

-- | Create an empty cookie.
empty :: Cookie

-- | Cookie parser and pretty printer as a lens. To be used in combination
--   with the <i>Cookie</i> header field.
cookie :: String :<->: Cookie

-- | Cookie parser and pretty printer as a lens. To be used in combination
--   with the <i>Set-Cookie</i> header field.
setCookie :: String :<->: Cookie

-- | Access name/key of a cookie.
name :: Cookie :-> String

-- | Access value of a cookie.
value :: Cookie :-> String

-- | Access comment of a cookie.
comment :: Cookie :-> Maybe String

-- | Access comment-URL of a cookie.
commentURL :: Cookie :-> Maybe String

-- | Access discard flag of a cookie.
discard :: Cookie :-> Bool

-- | Access domain of a cookie.
domain :: Cookie :-> Maybe String

-- | Access max-age of a cookie.
maxAge :: Cookie :-> Maybe Int

-- | Access expiration of a cookie.
expires :: Cookie :-> Maybe String

-- | Access path of a cookie.
path :: Cookie :-> Maybe String

-- | Access port of a cookie.
port :: Cookie :-> [Int]

-- | Access secure flag of a cookie.
secure :: Cookie :-> Bool

-- | Access version of a cookie.
version :: Cookie :-> Int

-- | A collection of multiple cookies. These can all be set in one single
--   HTTP <i>Set-Cookie</i> header field.
data Cookies

-- | Access raw cookie mapping from collection.
unCookies :: Cookies :-> Map String Cookie

-- | Label for printing and parsing collections of cookies.
cookies :: String :<->: Cookies

-- | Cookies parser and pretty printer as a lens.
setCookies :: String :<->: Cookies

-- | Case-insensitive way of getting a cookie out of a collection by name.
pickCookie :: String -> Cookies :-> Maybe Cookie

-- | Convert a list to a cookies collection.
fromList :: [Cookie] -> Cookies

-- | Get the cookies as a list.
toList :: Cookies -> [Cookie]
instance Show Cookies
instance Eq Cookies
instance Show Cookie
instance Eq Cookie
