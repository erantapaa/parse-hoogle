-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to the isoHunt torrent search API
--   
--   Bindings to the isoHunt torrent search API, as described in
--   <a>http://ca.isohunt.com/forum/viewtopic.php?p=433527#433527</a>
--   
--   To get started, see <a>IsoHunt.Search</a>.
@package isohunt
@version 0.1.3


-- | The <a>Image</a> data type. This should be imported qualified so as
--   not to conflict with the accessors from the <tt>Response</tt> and
--   <tt>Item</tt> data types:
--   
--   <pre>
--   import qualified IsoHunt.Response as Response
--   import qualified IsoHunt.Item as Item
--   import qualified IsoHunt.Image as Image
--   
--   ... Response.title r ... Item.title i ... Image.title im ...
--   </pre>
--   
--   These fields are mostly undocumented; see
--   <a>http://ca.isohunt.com/js/json.php?ihq=ubuntu&amp;start=1&amp;rows=4</a>
--   for an example response.
module IsoHunt.Image
data Image
Image :: Text -> Text -> Text -> Integer -> Integer -> Image
title :: Image -> Text
url :: Image -> Text
link :: Image -> Text
width :: Image -> Integer
height :: Image -> Integer
instance Typeable Image
instance Eq Image
instance Ord Image
instance Show Image
instance Generic Image
instance Datatype D1Image
instance Constructor C1_0Image
instance Selector S1_0_0Image
instance Selector S1_0_1Image
instance Selector S1_0_2Image
instance Selector S1_0_3Image
instance Selector S1_0_4Image
instance FromJSON Image


-- | The <a>Item</a> data type. This should be imported qualified so as not
--   to conflict with the accessors from the <tt>Response</tt> and
--   <tt>Image</tt> data types:
--   
--   <pre>
--   import qualified IsoHunt.Response as Response
--   import qualified IsoHunt.Item as Item
--   import qualified IsoHunt.Image as Image
--   
--   ... Response.title r ... Item.title i ... Image.title im ...
--   </pre>
--   
--   These fields are mostly undocumented; see
--   <a>http://ca.isohunt.com/js/json.php?ihq=ubuntu&amp;start=1&amp;rows=4</a>
--   for an example response.
module IsoHunt.Item
data Item
Item :: Text -> Text -> Text -> Text -> Integer -> Text -> Text -> Text -> Text -> Text -> Text -> Text -> Text -> Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Integer -> Integer -> Text -> Text -> Item
title :: Item -> Text
link :: Item -> Text
guid :: Item -> Text

-- | The link for the *.torrent file on isohunt's website, eg
--   <a>http://ca.isohunt.com/download/52510650/ubuntu.torrent</a>
enclosureUrl :: Item -> Text

-- | Size in bytes
length :: Item -> Integer
tracker :: Item -> Text
trackerUrl :: Item -> Text
kws :: Item -> Text
exempts :: Item -> Text
category :: Item -> Text
originalSite :: Item -> Text
originalLink :: Item -> Text

-- | human-readable filesize (eg "1.4GB")
size :: Item -> Text
files :: Item -> Integer
seeds :: Item -> Maybe Integer
leechers :: Item -> Maybe Integer
downloads :: Item -> Maybe Integer
votes :: Item -> Integer
comments :: Item -> Integer
hash :: Item -> Text
pubDate :: Item -> Text
instance Typeable Item
instance Generic Item
instance Eq Item
instance Show Item
instance Ord Item
instance Datatype D1Item
instance Constructor C1_0Item
instance Selector S1_0_0Item
instance Selector S1_0_1Item
instance Selector S1_0_2Item
instance Selector S1_0_3Item
instance Selector S1_0_4Item
instance Selector S1_0_5Item
instance Selector S1_0_6Item
instance Selector S1_0_7Item
instance Selector S1_0_8Item
instance Selector S1_0_9Item
instance Selector S1_0_10Item
instance Selector S1_0_11Item
instance Selector S1_0_12Item
instance Selector S1_0_13Item
instance Selector S1_0_14Item
instance Selector S1_0_15Item
instance Selector S1_0_16Item
instance Selector S1_0_17Item
instance Selector S1_0_18Item
instance Selector S1_0_19Item
instance Selector S1_0_20Item
instance FromJSON Item


-- | The <a>Response</a> data type. This should be imported qualified so as
--   not to conflict with the accessors from the <a>Item</a> and
--   <a>Image</a> data types:
--   
--   <pre>
--   import qualified IsoHunt.Response as Response
--   import qualified IsoHunt.Item as Item
--   import qualified IsoHunt.Image as Image
--   
--   ... Response.title r ... Item.title i ... Image.title im ...
--   </pre>
--   
--   These fields are mostly undocumented; see
--   <a>http://ca.isohunt.com/js/json.php?ihq=ubuntu&amp;start=1&amp;rows=4</a>
--   for an example response.
module IsoHunt.Response
data Response
Response :: Text -> Text -> Text -> Text -> Text -> Text -> Integer -> Integer -> Image -> Text -> Integer -> Vector Item -> Integer -> Response
title :: Response -> Text
link :: Response -> Text
category :: Response -> Text
pubDate :: Response -> Text
description :: Response -> Text
language :: Response -> Text
maxResults :: Response -> Integer
ttl :: Response -> Integer
image :: Response -> Image
lastBuildDate :: Response -> Text
totalResults :: Response -> Integer

-- | search results
items :: Response -> Vector Item
censored :: Response -> Integer
instance Typeable Response
instance Eq Response
instance Ord Response
instance Show Response
instance Generic Response
instance Datatype D1Response
instance Constructor C1_0Response
instance Selector S1_0_0Response
instance Selector S1_0_1Response
instance Selector S1_0_2Response
instance Selector S1_0_3Response
instance Selector S1_0_4Response
instance Selector S1_0_5Response
instance Selector S1_0_6Response
instance Selector S1_0_7Response
instance Selector S1_0_8Response
instance Selector S1_0_9Response
instance Selector S1_0_10Response
instance Selector S1_0_11Response
instance Selector S1_0_12Response
instance FromJSON Response


-- | IsoHunt API; see
--   <a>http://ca.isohunt.com/forum/viewtopic.php?p=433527#433527</a>.
--   
--   Sample use:
--   
--   <pre>
--   resp &lt;- search (simpleQuery "ubuntu")
--   </pre>
--   
--   The following terms and conditions apply to the IsoHunt API, as stated
--   in the above link:
--   
--   In using our search API, you are free to do with it as you wish on
--   condition that if your app is available publicly to users, you must
--   link to torrent details pages on isoHunt.com, whether you link to the
--   .torrent files or not. We reserve the right to ban you from using our
--   API if you don't follow this simple rule. Refer to Louish's iPhone app
--   for a good example of including links to our torrent details pages.
--   Our torrent details pages have URLs like this:
--   <a>http://isohunt.com/torrent_details/28289948/ubuntu?tab=summary</a>
--   
--   While we don't require developer tokens or place hard limits on api
--   calls usage, excessive calls will also result in bans. If you think
--   your app will consistently sustain multiple calls per second to our
--   api, email admin at this site's domain first.
--   
--   You are free to promote your app using our API, by replying under this
--   post
--   (<a>http://ca.isohunt.com/forum/viewtopic.php?p=433527#433527</a>) or
--   post under this forum
--   (<a>http://isohunt.com/forum/viewforum.php?f=19</a>). If your app is
--   really good, we'll likely want to spotlight it on isoHunt's frontpage.
--   Multiple posts to promote your app on our forum or comments is not
--   allowed however, and will be treated as spam.
module IsoHunt.Search

-- | Search IsoHunt with the given query.
--   
--   Throws <a>MalformedJSON</a> or <a>MalformedResponse</a> if the result
--   is of an expected format.
search :: Query -> IO Response

-- | See also <a>simpleQuery</a> and <a>def</a> for constructing queries
data Query
Query :: !String -> !Int -> !Int -> !Sort -> !Order -> Query
searchTerm :: Query -> !String

-- | start+rows &lt;= 1000
start :: Query -> !Int

-- | &lt;= 100
rows :: Query -> !Int
sort :: Query -> !Sort
order :: Query -> !Order

-- | A default query for the given search term
simpleQuery :: String -> Query
data Sort

-- | Overall factors such as age, query relevance seed/leechers counts and
--   vots
Composite :: Sort

-- | Seeds + leechers
Seeds :: Sort
Age :: Sort
Size :: Sort
data Order
Descending :: Order
Ascending :: Order
data Response
data Item
data Image

-- | The response was invalid JSON. The unparsed contents are included.
data MalformedJSON
MalformedJSON :: !ByteString -> MalformedJSON

-- | The response was valid JSON, but not of the expected format. Error
--   message and the JSON value are included.
data MalformedResponse
MalformedResponse :: !String -> !Value -> MalformedResponse
instance Typeable Sort
instance Typeable Order
instance Typeable Query
instance Typeable MalformedJSON
instance Typeable MalformedResponse
instance Eq Sort
instance Ord Sort
instance Show Sort
instance Eq Order
instance Ord Order
instance Show Order
instance Eq Query
instance Ord Query
instance Show Query
instance Show MalformedJSON
instance Show MalformedResponse
instance Exception MalformedResponse
instance Exception MalformedJSON
instance Default Query
