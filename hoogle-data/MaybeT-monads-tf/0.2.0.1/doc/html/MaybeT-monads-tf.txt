-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | MaybeT monad transformer compatible with monads-tf (deprecated)
--   
--   Support for computations with failures. This is a fork of the MaybeT
--   package by Eric Kidd, but compatible with the type-family based monad
--   classes of the monads-tf package.
--   
--   This package is deprecated: the MaybeT transformer exists in the
--   transformers package nowadays, and the only advantage this package
--   provides over that one is the presence of a MonadFix instance, but
--   it's incorrect anyway.
@package MaybeT-monads-tf
@version 0.2.0.1


-- | The <a>MaybeT</a> monad. See
--   <a>http://www.haskell.org/haskellwiki/New_monads/MaybeT</a> for more
--   widely-used version. Our <a>Functor</a> instance and our
--   implementation of <a>&gt;&gt;=</a> are borrowed from there.
--   
--   <ul>
--   <li><i>Computation type:</i> Computations which may fail or return
--   nothing.</li>
--   <li><i>Binding strategy:</i> Failure returns the value <a>Nothing</a>,
--   bypassing any bound functions which follow. Success returns a value
--   wrapped in <a>Just</a>.</li>
--   <li><i>Useful for:</i> Building computations from steps which may
--   fail. No error information is returned. (If error information is
--   required, see <tt>Control.Monad.Error</tt>.)</li>
--   </ul>
module Control.Monad.Maybe

-- | The parameterizable maybe monad, obtained by composing an arbitrary
--   monad with the <a>Maybe</a> monad.
--   
--   Computations are actions that may produce a value or fail.
--   
--   The <a>return</a> function yields a successful computation, while
--   <tt>&gt;&gt;=</tt> sequences two subcomputations, failing on the first
--   error.
newtype MaybeT m :: (* -> *) a :: (* -> *) -> * -> *
MaybeT :: m (Maybe a) -> MaybeT a
runMaybeT :: MaybeT a -> m (Maybe a)
instance MonadFix m => MonadFix (MaybeT m)
