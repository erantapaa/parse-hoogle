-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Easy lightweight tracing of function arguments and results for ad hoc debugging
--   
--   Example:
--   
--   You have a pure function that may be giving you incorrect results.
--   
--   <pre>
--   fib :: Int -&gt; Int
--   fib n | n &lt; 2     = n
--         | otherwise = fib (n-1) - fib (n-2)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fib 3
--   0
--   </pre>
--   
--   Insert a call to <tt>traceFunction</tt> to aid with debugging.
--   
--   <pre>
--   fib, fib' :: Int -&gt; Int
--   fib = traceFunction "fib" fib'
--   fib' n | n &lt; 2     = n
--          | otherwise = fib (n-1) - fib (n-2)
--   </pre>
--   
--   Calls to your pure function now provide its parameters and result as
--   debugging information.
--   
--   <pre>
--   &gt;&gt;&gt; fib 3
--   fib 1 = 1
--   fib 0 = 0
--   fib 2 = 1
--   fib 1 = 1
--   fib 3 = 0
--   0
--   </pre>
--   
--   Hopefully this will help you home in on your bug.
--   
--   Note that <tt>traceFunction</tt> works with functions of more than one
--   parameter...
--   
--   <pre>
--   traceElem :: Eq a =&gt; a -&gt; [a] -&gt; Bool
--   traceElem = traceFunction "elem" elem
--   </pre>
--   
--   ...and with "functions" of no parameters at all.
--   
--   <pre>
--   alpha = traceFunction "Fine-structure constant" $ e * e * c * mu0 / 2 / h
--   </pre>
--   
--   Parameters and results must implement the <a>Show</a> typeclass. As a
--   special case, parameters may instead be functions, and are shown as an
--   underscore (<tt>_</tt>).
--   
--   <pre>
--   &gt;&gt;&gt; :set -XNoMonomorphismRestriction
--   
--   &gt;&gt;&gt; let map' = traceFunction "map" map
--   
--   &gt;&gt;&gt; map' (2 *) [1..3]
--   map _ [1,2,3] = [2,4,6]
--   [2,4,6]
--   </pre>
--   
--   KNOWN BUG: The resultant function is strict, even when the input
--   function is non-strict in some of its parameters. In particular,
--   
--   <ul>
--   <li>if one of the parameters is <tt>error "foo"</tt>, the return value
--   when the resultant function call is evaluated will be <tt>error
--   "foo"</tt>; no trace message will be output</li>
--   <li>if one of the parameters doesn't terminate when evaluated, the
--   resultant function call will not terminate when evaluated either; no
--   trace message will be output</li>
--   </ul>
@package trace-function-call
@version 0.1


-- | See the package page for a short tutorial.
module Debug.Trace.FunctionCall
class Traceable a
traceFunction :: Traceable a => String -> a -> a
class Showable a
showFunction :: Showable a => a -> String
instance [overlap ok] Showable (a -> b)
instance [overlap ok] Show a => Showable a
instance [overlap ok] (Showable a, Traceable b) => Traceable (a -> b)
instance [overlap ok] Show a => Traceable a
