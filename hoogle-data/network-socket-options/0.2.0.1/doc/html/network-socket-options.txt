-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Type-safe, portable alternative to getSocketOption/setSocketOption
--   
--   The network package provides getSocketOption and setSocketOption
--   functions. These work fine for socket options represented using the
--   <tt>int</tt> type (namely, all boolean options, and a few quantity
--   options). However, it doesn't work for, say, <tt>SO_LINGER</tt>,
--   <tt>SO_RCVTIMEO</tt>, and <tt>SO_SNDTIMEO</tt>, as these use
--   different, platform-specific representations.
--   
--   This package implements the getters and setters as separate functions.
--   At the moment, it only provides socket options that are available for
--   both Unix and Windows.
--   
--   This package also provides a workaround needed to time out network
--   operations in Windows without leaking resources.
@package network-socket-options
@version 0.2.0.1


-- | Documentation is currently lacking. For now, see <tt>man 7 socket</tt>
--   and <tt>man 7 tcp</tt> of the Linux man-pages, or look up setsockopt
--   in MSDN.
module Network.Socket.Options

-- | This option is get-only.
getAcceptConn :: HasSocket sock => sock -> IO Bool
getBroadcast :: HasSocket sock => sock -> IO Bool
getDebug :: HasSocket sock => sock -> IO Bool
getDontRoute :: HasSocket sock => sock -> IO Bool

-- | This option is get-only.
getError :: HasSocket sock => sock -> IO Int
getKeepAlive :: HasSocket sock => sock -> IO Bool
getLinger :: HasSocket sock => sock -> IO (Maybe Seconds)
getOOBInline :: HasSocket sock => sock -> IO Bool
getRecvBuf :: HasSocket sock => sock -> IO Int
getRecvTimeout :: HasSocket sock => sock -> IO Microseconds
getReuseAddr :: HasSocket sock => sock -> IO Bool
getSendBuf :: HasSocket sock => sock -> IO Int
getSendTimeout :: HasSocket sock => sock -> IO Microseconds

-- | This option is get-only.
getType :: HasSocket sock => sock -> IO SocketType
getTcpNoDelay :: HasSocket sock => sock -> IO Bool
setBroadcast :: HasSocket sock => sock -> Bool -> IO ()
setDebug :: HasSocket sock => sock -> Bool -> IO ()
setDontRoute :: HasSocket sock => sock -> Bool -> IO ()
setKeepAlive :: HasSocket sock => sock -> Bool -> IO ()

-- | On Windows, the <a>Seconds</a> value is truncated to 16 bits. This
--   means if a linger time of more than 65535 seconds (about 18.2 hours)
--   is given, it will wrap around.
setLinger :: HasSocket sock => sock -> Maybe Seconds -> IO ()
setOOBInline :: HasSocket sock => sock -> Bool -> IO ()
setRecvBuf :: HasSocket sock => sock -> Int -> IO ()

-- | Note the following about timeout values:
--   
--   <ul>
--   <li>A value of 0 or less means the operation will never time out</li>
--   <li>On Windows, the timeout is truncated to milliseconds, 32-bit.
--   However, if the number of microseconds is from 1 to 999, it will be
--   rounded up to one millisecond, to prevent it from being treated as
--   "never time out".</li>
--   </ul>
setRecvTimeout :: HasSocket sock => sock -> Microseconds -> IO ()
setReuseAddr :: HasSocket sock => sock -> Bool -> IO ()
setSendBuf :: HasSocket sock => sock -> Int -> IO ()
setSendTimeout :: HasSocket sock => sock -> Microseconds -> IO ()
setTcpNoDelay :: HasSocket sock => sock -> Bool -> IO ()

-- | The getters and setters in this module can be used not only on
--   <a>Socket</a>s, but on raw <a>Fd</a>s (file descriptors) as well.
class HasSocket a
getSocket :: HasSocket a => a -> CInt
type Seconds = Int
type Microseconds = Int64

-- | On Windows, set the socket's <tt>SO_RCVTIMEO</tt> and
--   <tt>SO_SNDTIMEO</tt> values to the ones given. On other platforms, do
--   nothing.
setSocketTimeouts :: HasSocket sock => sock -> Microseconds -> Microseconds -> IO ()

-- | On Windows, set timeouts for a socket that has already been wrapped in
--   a <a>Handle</a> by <a>connectTo</a> or <a>accept</a>. On other
--   platforms, do nothing.
setHandleTimeouts :: Handle -> Microseconds -> Microseconds -> IO ()
instance HasSocket FD
instance HasSocket Socket
instance HasSocket Fd
