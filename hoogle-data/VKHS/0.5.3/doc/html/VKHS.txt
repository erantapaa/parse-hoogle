-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Provides access to Vkontakte social network via public API
--   
--   Provides access to Vkontakte API methods. Library requires no
--   interaction with the user during Implicit-flow authentication.
@package VKHS
@version 0.5.3

module Web.VKHS.API.Types
data Response a
Response :: a -> Response a
data SizedList a
SL :: Int -> a -> SizedList a
data MusicRecord
MR :: Int -> Int -> String -> String -> Int -> String -> MusicRecord
aid :: MusicRecord -> Int
owner_id :: MusicRecord -> Int
artist :: MusicRecord -> String
title :: MusicRecord -> String
duration :: MusicRecord -> Int
url :: MusicRecord -> String
data UserRecord
UR :: Int -> String -> String -> String -> Maybe Int -> Maybe String -> Maybe Int -> Maybe String -> Maybe Int -> UserRecord
uid :: UserRecord -> Int
first_name :: UserRecord -> String
last_name :: UserRecord -> String
photo :: UserRecord -> String
university :: UserRecord -> Maybe Int
university_name :: UserRecord -> Maybe String
faculty :: UserRecord -> Maybe Int
faculty_name :: UserRecord -> Maybe String
graduation :: UserRecord -> Maybe Int
data WallRecord
WR :: Int -> Int -> Int -> String -> Int -> WallRecord
wid :: WallRecord -> Int
to_id :: WallRecord -> Int
from_id :: WallRecord -> Int
wtext :: WallRecord -> String
wdate :: WallRecord -> Int
publishedAt :: WallRecord -> UTCTime
data RespError
ER :: Int -> String -> RespError
error_code :: RespError -> Int
error_msg :: RespError -> String
instance Typeable MusicRecord
instance Typeable UserRecord
instance Show a => Show (Response a)
instance Show MusicRecord
instance Data MusicRecord
instance Show UserRecord
instance Data UserRecord
instance Show WallRecord
instance Show RespError

module Web.VKHS.Types

-- | AccessToken is a authentication data, required by all VK API
--   functions. It is a tuple of access_token, user_id, expires_in fields,
--   returned by login procedure.
--   
--   See
--   http:/<i>vk.com</i>developers.php?oid=-1&amp;p=Авторизация_клиентских_приложений
--   (in Russian) for more details
type AccessToken = (String, String, String)

-- | Access rigth to request from VK.
data AccessRight
Notify :: AccessRight
Friends :: AccessRight
Photos :: AccessRight
Audio :: AccessRight
Video :: AccessRight
Docs :: AccessRight
Notes :: AccessRight
Pages :: AccessRight
Status :: AccessRight
Offers :: AccessRight
Questions :: AccessRight
Wall :: AccessRight
Groups :: AccessRight
Messages :: AccessRight
Notifications :: AccessRight
Stats :: AccessRight
Ads :: AccessRight
Offline :: AccessRight
allAccess :: [AccessRight]

-- | Verbosity level. Debug will dump *html and output curl log
data Verbosity
Normal :: Verbosity
Trace :: Verbosity
Debug :: Verbosity
type ClientId = String
data LoginEnv
LoginEnv :: [(String, String)] -> [AccessRight] -> ClientId -> LoginEnv

-- | Dictionary containig forms input/value
formdata :: LoginEnv -> [(String, String)]

-- | Access rights, required by later API calls
ac_rights :: LoginEnv -> [AccessRight]

-- | Application ID provided by vk.com
clientId :: LoginEnv -> ClientId
data CallEnv
CallEnv :: String -> CallEnv

-- | Access token, the result of login operation
access_token :: CallEnv -> String

-- | VKHS environment
data Env subenv
Env :: subenv -> Verbosity -> String -> Int -> Env subenv
sub :: Env subenv -> subenv

-- | Verbosity level
verbose :: Env subenv -> Verbosity

-- | User agent identifier, defaults to Mozilla Firefox
useragent :: Env subenv -> String

-- | Delay after each transaction, in milliseconds. Library uses it for
--   preventing application from being banned for flooding.
delay_ms :: Env subenv -> Int
mkEnv :: s -> Env s
callEnv :: Env a -> String -> Env CallEnv
instance Show AccessRight
instance Enum Verbosity
instance Eq Verbosity
instance Ord Verbosity
instance Show Verbosity
instance Show LoginEnv
instance Show CallEnv
instance Show subenv => Show (Env subenv)

module Web.VKHS.Curl

-- | Generic request sender. Returns whole HTTP answer as a ByteString
vk_curl :: Env a -> Writer [CURLoption] () -> IO (Either String ByteString)

-- | Downloads the file and saves it on disk
vk_curl_file :: Env a -> String -> (ByteString -> IO ()) -> IO (Either String ())

-- | Return HTTP payload, ignore headers
vk_curl_payload :: Env a -> Writer [CURLoption] () -> IO (Either String ByteString)
pack :: [Char] -> ByteString
unpack :: ByteString -> [Char]

module Web.VKHS.API.Base

-- | Invoke the request. Return answer (normally, string representation of
--   JSON data). See documentation:
--   
--   
--   <a>http://vk.com/developers.php?oid=-1&amp;p=%D0%9E%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%BE%D0%B2_API</a>
api :: Env CallEnv -> String -> [(String, String)] -> IO (Either String ByteString)
envcall :: String -> Env CallEnv

module Web.VKHS.API.Aeson
api :: Env CallEnv -> String -> [(String, String)] -> IO (Either APIError Value)
api' :: FromJSON a => Env CallEnv -> String -> [(String, String)] -> IO (Either APIError a)
envcall :: String -> Env CallEnv
data APIError
APIE_resp :: RespError -> APIError
APIE_other :: String -> APIError
APIE_badAccessToken :: APIError
instance Show APIError
instance Error APIError
instance FromJSON RespError
instance FromJSON a => FromJSON (SizedList [a])
instance FromJSON WallRecord
instance FromJSON MusicRecord
instance FromJSON a => FromJSON (Response a)

module Web.VKHS.API

module Web.VKHS.Login

-- | Execute login procedure, return (Right AccessToken) on success
login :: Env LoginEnv -> IO (Either String AccessToken)

-- | Gathers login information into Env data set.
env :: String -> String -> String -> [AccessRight] -> Env LoginEnv
instance Show Action
instance Show ActionHist


-- | <ul>
--   <li><i><tt>VKHS</tt></i></li>
--   </ul>
--   
--   VKHS is written in Haskell and provides access to Vkontakte
--   <a>http://vk.com</a> social network, popular mainly in Russia. Library
--   can be used to login into the network as a standalone application
--   (OAuth implicit flow as they call it). Interaction with user is not
--   required. For now, vkhs offers limited error detection and no captcha
--   support.
--   
--   Following example illustrates basic usage (please fill client_id,
--   email and password with correct values):
--   
--   <pre>
--   import Web.VKHS.Login
--   import Web.VKHS.API
--   
--   main = do
--       let client_id = "111111"
--       let e = env client_id "user@example.com" "password" [Photos,Audio,Groups]
--       (Right at) &lt;- login e
--   
--       let user_of_interest = "222222"
--       (Right ans) &lt;- api e at "users.get" [
--             ("uids",user_of_interest)
--           , ("fields","first_name,last_name,nickname,screen_name")
--           , ("name_case","nom")
--           ]
--       putStrLn ans
--   </pre>
--   
--   client_id is an application identifier, provided by vk.com. Users
--   receive it after registering their applications after SMS
--   confirmation. Registration form is located here
--   <a>http://vk.com/editapp?act=create</a>.
--   
--   Internally, library uses small curl-based HTTP automata and tagsoup
--   for jumping over relocations and submitting various 'Yes I agree'
--   forms. Curl .so library is required for vkhs to work. I am using
--   curl-7.26.0 on my system.
--   
--   <ul>
--   <li><i><tt>Debugging</tt></i></li>
--   </ul>
--   
--   To authenticate the user, vkhs acts like a browser: it analyzes html
--   but fills all forms by itself instead of displaying pages. Of cause,
--   would vk.com change html design, things stop working.
--   
--   To deal with that potential problem, I've included some debugging
--   facilities: changing:
--   
--   writing
--   
--   <pre>
--   (Right at) &lt;- login e { verbose = Debug }
--   </pre>
--   
--   will trigger curl output plus html dumping to the current directory.
--   Please, mail those .html to me if problem appears.
--   
--   <ul>
--   <li><i><tt>Limitations</tt></i> <ul><li>Ignores 'Invalid password'
--   answers</li><li>Captchas are treated as errors</li><li>Implicit-flow
--   authentication, see documentation in Russian
--   <a>http://vk.com/developers.php</a> for details</li><li>Probably, low
--   speed due to restarting curl session on every request. But anyway,
--   vk.com limits request rate to 3 per second.</li></ul></li>
--   </ul>
module Web.VKHS

module Web.VKHS.API.Monad
api :: MonadIO m => String -> [(String, String)] -> VKAPI m Value
api' :: (FromJSON a, MonadIO m) => String -> [(String, String)] -> VKAPI m a
runVKAPI :: MonadIO m => VKAPI m a -> AccessToken -> Env LoginEnv -> m (Either APIError (a, AccessToken))
newtype VKAPI m a
VKAPI :: ReaderT (Env LoginEnv) (StateT AccessToken (ErrorT APIError m)) a -> VKAPI m a
unVKAPI :: VKAPI m a -> ReaderT (Env LoginEnv) (StateT AccessToken (ErrorT APIError m)) a
instance Monad m => Monad (VKAPI m)
instance (Monad m, Functor m) => Applicative (VKAPI m)
instance Functor m => Functor (VKAPI m)
instance MonadIO m => MonadIO (VKAPI m)
instance Monad m => MonadState AccessToken (VKAPI m)
instance Monad m => MonadReader (Env LoginEnv) (VKAPI m)
instance Monad m => MonadError APIError (VKAPI m)
