-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | opcodes for the library csound-expression
--   
@package csound-expression-opcodes
@version 0.0.2

module Csound.Typed.Opcode.Miscellaneous

-- | returns the length of a Farey Sequence.
--   
--   This opcode can be used in conjunction with GENfarey. It calculates
--   the length of Farey Sequence Fn. Its length is given by: |Fn| = 1 +
--   SUM over n phi(m) where phi(m) is Euler's totient function, which
--   gives the number of integers â¤ m that are coprime to m.
--   
--   <pre>
--   kfl  fareylen  kfn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fareylen.html</a>
fareylen :: Tab -> Sig

-- | returns the length of a Farey Sequence.
--   
--   This opcode can be used in conjunction with GENfarey. It calculates
--   the length of Farey Sequence Fn. Its length is given by: |Fn| = 1 +
--   SUM over n phi(m) where phi(m) is Euler's totient function, which
--   gives the number of integers â¤ m that are coprime to m.
--   
--   <pre>
--   ifl  fareyleni  ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fareyleni.html</a>
fareyleni :: Tab -> D

-- | Modulation matrix opcode with optimizations for sparse matrices.
--   
--   The opcode can be used to let a large number of k-rate modulator
--   variables modulate a large number of k-rate parameter variables, with
--   arbitrary scaling of each modulator-to-parameter connection. Csound
--   ftables are used to hold both the input (parameter) variables, the
--   modulator variables, and the scaling coefficients. Output variables
--   are written to another Csound ftable.
--   
--   <pre>
--   modmatrix  iresfn, isrcmodfn, isrcparmfn, imodscale, inum_mod, \\
--      inum_parm, kupdate
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/modmatrix.html</a>
modmatrix :: Tab -> Tab -> Tab -> D -> D -> D -> Sig -> SE ()

-- | Asks the underlying operating system for the current directory name as
--   a string.
--   
--   pwd call the operating system to determine the current directory
--   (folder). pwd runs at i-time only.
--   
--   <pre>
--   Sres  pwd  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pwd.html</a>
pwd :: Str

-- | Call an external program via the system call
--   
--   system and system_i call any external command understood by the
--   operating system, similarly to the C function system(). system_i runs
--   at i-time only, while system runs both at initialization and
--   performance time.
--   
--   <pre>
--   ires  system_i  itrig, Scmd, [inowait]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/system.html</a>
system_i :: D -> Str -> D

-- | Call an external program via the system call
--   
--   system and system_i call any external command understood by the
--   operating system, similarly to the C function system(). system_i runs
--   at i-time only, while system runs both at initialization and
--   performance time.
--   
--   <pre>
--   kres  system  ktrig, Scmd, [knowait]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/system.html</a>
system :: Sig -> Str -> Sig

-- | shuffles the content of a function table so that each element of the
--   source table is put into a different random position.
--   
--   This opcode can be used in order to shuffle the content of function
--   tables into a random order but without loosing any of the elements.
--   Imagine shuffling a deck of cards. Each element of the table is copied
--   to a different random position. If that position was already chosen
--   before then the next free position is chosen. The length of the table
--   remains the same.
--   
--   <pre>
--   tableshuffle  ktablenum
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/tableshuffle.html</a>
tableshuffle :: Sig -> SE ()

-- | shuffles the content of a function table so that each element of the
--   source table is put into a different random position.
--   
--   This opcode can be used in order to shuffle the content of function
--   tables into a random order but without loosing any of the elements.
--   Imagine shuffling a deck of cards. Each element of the table is copied
--   to a different random position. If that position was already chosen
--   before then the next free position is chosen. The length of the table
--   remains the same.
--   
--   <pre>
--   tableshufflei  itablenum
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/tableshuffle.html</a>
tableshufflei :: D -> SE ()

module Csound.Typed.Opcode.ImageProcessingOpcodes

-- | Create an empty image of a given size.
--   
--   Create an empty image of a given size. Individual pixel values can
--   then be set with. imagegetpixel.
--   
--   <pre>
--   iimagenum  imagecreate  iwidth, iheight
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/imagecreate.html</a>
imagecreate :: D -> D -> SE D

-- | Frees memory allocated for a previously loaded or created image.
--   
--   <pre>
--   imagefree  iimagenum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/imagefree.html</a>
imagefree :: D -> SE ()

-- | Return the RGB pixel values of a previously opened or created image.
--   
--   Return the RGB pixel values of a previously opened or created image.
--   An image can be loaded with imageload. An empty image can be created
--   with imagecreate.
--   
--   <pre>
--   ared, agreen, ablue  imagegetpixel  iimagenum, ax, ay
--   kred, kgreen, kblue  imagegetpixel  iimagenum, kx, ky
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/imagegetpixel.html</a>
imagegetpixel :: D -> Sig -> Sig -> (Sig, Sig, Sig)

-- | Load an image.
--   
--   Load an image and return a reference to it. Individual pixel values
--   can then be accessed with imagegetpixel.
--   
--   <pre>
--   iimagenum  imageload  filename
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/imageload.html</a>
imageload :: Spec -> SE D

-- | Save a previously created image.
--   
--   Save a previously created image. An empty image can be created with
--   imagecreate and its pixel RGB values can be set with imagesetpixel.
--   The image will be saved in PNG format.
--   
--   <pre>
--   imagesave  iimagenum, filename
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/imagesave.html</a>
imagesave :: D -> Spec -> SE ()

-- | Set the RGB value of a pixel inside a previously opened or created
--   image.
--   
--   Set the RGB value of a pixel inside a previously opened or created
--   image. An image can be loaded with imageload. An empty image can be
--   created with imagecreate and saved with imagesave.
--   
--   <pre>
--   imagesetpixel  iimagenum, ax, ay, ared, agreen, ablue
--   imagesetpixel  iimagenum, kx, ky, kred, kgreen, kblue
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/imagesetpixel.html</a>
imagesetpixel :: D -> Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Return the width and height of a previously opened or created image.
--   
--   Return the width and height of a previously opened or created image.
--   An image can be loaded with imageload. An empty image can be created
--   with imagecreate.
--   
--   <pre>
--   iwidth, iheight  imagesize  iimagenum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/imagesize.html</a>
imagesize :: D -> (D, D)

module Csound.Typed.Opcode.MixerOpcodes

-- | Resets all channels of a buss to 0.
--   
--   <pre>
--   MixerClear  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/MixerClear.html</a>
mixerClear :: SE ()

-- | Gets the level of a send to a buss.
--   
--   Gets the level at which signals from the send are being added to the
--   buss. The actual sending of the signal to the buss is performed by the
--   MixerSend opcode.
--   
--   <pre>
--   kgain  MixerGetLevel  isend, ibuss
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/MixerGetLevel.html</a>
mixerGetLevel :: D -> D -> SE Sig

-- | Receives an arate signal from a channel of a buss.
--   
--   Receives an arate signal that has been mixed onto a channel of a buss.
--   
--   <pre>
--   asignal  MixerReceive  ibuss, ichannel
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/MixerReceive.html</a>
mixerReceive :: D -> D -> SE Sig

-- | Mixes an arate signal into a channel of a buss.
--   
--   <pre>
--   MixerSend  asignal, isend, ibuss, ichannel
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/MixerSend.html</a>
mixerSend :: Sig -> D -> D -> D -> SE ()

-- | Sets the level of a send to a buss.
--   
--   Sets the level at which signals from the send are added to the buss.
--   The actual sending of the signal to the buss is performed by the
--   MixerSend opcode.
--   
--   <pre>
--   MixerSetLevel  isend, ibuss, kgain
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/MixerSetLevel.html</a>
mixerSetLevel :: D -> D -> Sig -> SE ()

-- | Sets the level of a send to a buss.
--   
--   Sets the level at which signals from the send are added to the buss.
--   This opcode, because all parameters are irate, may be used in the
--   orchestra header. The actual sending of the signal to the buss is
--   performed by the MixerSend opcode.
--   
--   <pre>
--   MixerSetLevel_i  isend, ibuss, igain
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/MixerSetLevel_i.html</a>
mixerSetLevel_i :: D -> D -> D -> SE ()

module Csound.Typed.Opcode.RemoteOpcodes

-- | An opcode which can be used to implement a remote orchestra. This
--   opcode will send note events from a source machine to many
--   destinations.
--   
--   With the insremot and insglobal opcodes you are able to perform
--   instruments on remote machines and control them from a master machine.
--   The remote opcodes are implemented using the master/client model. All
--   the machines involved contain the same orchestra but only the master
--   machine contains the information of the score. During the performance
--   the master machine sends the note events to the clients. The insglobal
--   opcode sends the events to all the machines involved in the remote
--   concert. These machines are determined by the insremot definitions
--   made above the insglobal command. To send events to only one machine
--   use insremot.
--   
--   <pre>
--   insglobal  isource, instrnum [,instrnum...] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/insglobal.html</a>
insglobal :: D -> D -> SE ()

-- | An opcode which can be used to implement a remote orchestra. This
--   opcode will send note events from a source machine to one destination.
--   
--   With the insremot and insglobal opcodes you are able to perform
--   instruments on remote machines and control them from a master machine.
--   The remote opcodes are implemented using the master/client model. All
--   the machines involved contain the same orchestra but only the master
--   machine contains the information of the score. During the performance
--   the master machine sends the note events to the clients. The insremot
--   opcode will send events from a source machine to one destination if
--   you want to send events to many destinations (broadcast) use the
--   insglobal opcode instead. These two opcodes can be used in
--   combination.
--   
--   <pre>
--   insremot  idestination, isource, instrnum [,instrnum...] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/insremot.html</a>
insremot :: D -> D -> D -> SE ()

-- | An opcode which can be used to implement a remote midi orchestra. This
--   opcode will broadcast the midi events to all the machines involved in
--   the remote concert.
--   
--   With the midremot and midglobal opcodes you are able to perform
--   instruments on remote machines and control them from a master machine.
--   The remote opcodes are implemented using the master/client model. All
--   the machines involved contain the same orchestra but only the master
--   machine contains the information of the midi score. During the
--   performance the master machine sends the midi events to the clients.
--   The midglobal opcode sends the events to all the machines involved in
--   the remote concert. These machines are determined by the midremot
--   definitions made above the midglobal command. To send events to only
--   one machine use midremot.
--   
--   <pre>
--   midglobal  isource, instrnum [,instrnum...] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midglobal.html</a>
midglobal :: D -> D -> SE ()

-- | An opcode which can be used to implement a remote midi orchestra. This
--   opcode will send midi events from a source machine to one destination.
--   
--   With the midremot and midglobal opcodes you are able to perform
--   instruments on remote machines and control them from a master machine.
--   The remote opcodes are implemented using the master/client model. All
--   the machines involved contain the same orchestra but only the master
--   machine contains the information of the midi score. During the
--   performance the master machine sends the midi events to the clients.
--   The midremot opcode will send events from a source machine to one
--   destination if you want to send events to many destinations
--   (broadcast) use the midglobal opcode instead. These two opcodes can be
--   used in combination.
--   
--   <pre>
--   midremot  idestination, isource, instrnum [,instrnum...] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midremot.html</a>
midremot :: D -> D -> D -> SE ()

module Csound.Typed.Opcode.Network

-- | Defines the port for use with the remote system.
--   
--   Defines the port for use with the insremot, midremot, insglobal and
--   midglobal opcodes.
--   
--   <pre>
--   remoteport  iportnum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/remoteport.html</a>
remoteport :: D -> SE ()

-- | Receives data from other processes using the low-level UDP or TCP
--   protocols
--   
--   Receives directly using the UDP (sockrecv and sockrecvs) or TCP
--   (strecv) protocol onto a network. The data is not subject to any
--   encoding or special routing. The sockrecvs opcode receives a stereo
--   signal interleaved.
--   
--   <pre>
--   asig  sockrecv  iport, ilength
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sockrecv.html</a>
sockrecv :: D -> D -> Sig

-- | Receives data from other processes using the low-level UDP or TCP
--   protocols
--   
--   Receives directly using the UDP (sockrecv and sockrecvs) or TCP
--   (strecv) protocol onto a network. The data is not subject to any
--   encoding or special routing. The sockrecvs opcode receives a stereo
--   signal interleaved.
--   
--   <pre>
--   asigl, asigr  sockrecvs  iport, ilength
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sockrecv.html</a>
sockrecvs :: D -> D -> (Sig, Sig)

-- | Receives data from other processes using the low-level UDP or TCP
--   protocols
--   
--   Receives directly using the UDP (sockrecv and sockrecvs) or TCP
--   (strecv) protocol onto a network. The data is not subject to any
--   encoding or special routing. The sockrecvs opcode receives a stereo
--   signal interleaved.
--   
--   <pre>
--   asig  strecv  Sipaddr, iport
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sockrecv.html</a>
strecv :: Str -> D -> Sig

-- | Sends data to other processes using the low-level UDP or TCP protocols
--   
--   Transmits data directly using the UDP (socksend and socksends) or TCP
--   (stsend) protocol onto a network. The data is not subject to any
--   encoding or special routing. The socksends opcode send a stereo signal
--   interleaved.
--   
--   <pre>
--   socksend  asig, Sipaddr, iport, ilength
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/socksend.html</a>
socksend :: Sig -> Str -> D -> D -> SE ()

-- | Sends data to other processes using the low-level UDP or TCP protocols
--   
--   Transmits data directly using the UDP (socksend and socksends) or TCP
--   (stsend) protocol onto a network. The data is not subject to any
--   encoding or special routing. The socksends opcode send a stereo signal
--   interleaved.
--   
--   <pre>
--   socksends  asigl, asigr, Sipaddr, iport,
--          ilength
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/socksend.html</a>
socksends :: Sig -> Sig -> Str -> D -> D -> SE ()

-- | Sends data to other processes using the low-level UDP or TCP protocols
--   
--   Transmits data directly using the UDP (socksend and socksends) or TCP
--   (stsend) protocol onto a network. The data is not subject to any
--   encoding or special routing. The socksends opcode send a stereo signal
--   interleaved.
--   
--   <pre>
--   stsend  asig, Sipaddr, iport
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/socksend.html</a>
stsend :: Sig -> Str -> D -> SE ()

module Csound.Typed.Opcode.OSC

-- | Start a listening process for OSC messages to a particular port.
--   
--   Starts a listening process, which can be used by OSClisten.
--   
--   <pre>
--   ihandle  OSCinit  iport
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/OSCinit.html</a>
oscInit :: D -> SE D

-- | Listen for OSC messages to a particular path.
--   
--   On each k-cycle looks to see if an OSC message has been send to a
--   given path of a given type.
--   
--   <pre>
--   kans  OSClisten  ihandle, idest, itype [, xdata1, xdata2, ...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/OSClisten.html</a>
oscListen :: D -> D -> D -> [Sig] -> SE Sig

-- | Sends data to other processes using the OSC protocol
--   
--   Uses the OSC protocol to send message to other OSC listening
--   processes.
--   
--   <pre>
--   OSCsend  kwhen, ihost, iport, idestination, itype [, kdata1, kdata2, ...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/OSCsend.html</a>
oscSend :: Sig -> D -> D -> D -> D -> [Sig] -> SE ()

module Csound.Typed.Opcode.PluginHosting

-- | Activates or deactivates a DSSI or LADSPA plugin.
--   
--   dssiactivate is used to activate or deactivate a DSSI or LADSPA
--   plugin. It calles the plugin's activate() and deactivate() functions
--   if they are provided.
--   
--   <pre>
--   dssiactivate  ihandle, ktoggle 
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/dssiactivate.html</a>
dssiactivate :: D -> Sig -> SE ()

-- | Processes audio using a LADSPA or DSSI plugin.
--   
--   dssiaudio generates audio by processing an input signal through a
--   LADSPA plugin.
--   
--   <pre>
--   [aout1, aout2, ..., aout9]  dssiaudio  ihandle, [ain1, ain2, ..., ain9]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dssiaudio.html</a>
dssiaudio :: Tuple a => D -> [Sig] -> a

-- | Send control information to a LADSPA or DSSI plugin.
--   
--   dssictls sends control values to a plugin's control port
--   
--   <pre>
--   dssictls  ihandle, iport, kvalue, ktrigger 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dssictls.html</a>
dssictls :: D -> D -> Sig -> Sig -> SE ()

-- | Loads a DSSI or LADSPA plugin.
--   
--   dssiinit is used to load a DSSI or LADSPA plugin into memory for use
--   with the other dssi4cs opcodes. Both LADSPA effects and DSSI
--   instruments can be used.
--   
--   <pre>
--   ihandle  dssiinit  ilibraryname, iplugindex [, iverbose] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dssiinit.html</a>
dssiinit :: D -> D -> SE D

-- | Lists all available DSSI and LADSPA plugins.
--   
--   dssilist checks the variables DSSI_PATH and LADSPA_PATH and lists all
--   plugins available in all plugin libraries there.
--   
--   <pre>
--   dssilist  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dssilist.html</a>
dssilist :: SE ()
vstaudio :: D -> (Sig, Sig)
vstaudiog :: D -> (Sig, Sig)

-- | Loads parameter banks to a VST plugin.
--   
--   vstbankload is used for loading parameter banks to a VST plugin.
--   
--   <pre>
--   vstbankload  instance, ipath
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vstbankload.html</a>
vstbankload :: D -> D -> SE ()

-- | Opens the GUI editor window for a VST plugin.
--   
--   vstedit opens the custom GUI editor window for a VST plugin. Note that
--   not all VST plugins have custom GUI editors. It may be necessary to
--   use the --displays command-line option to ensure that Csound handles
--   events from the editor window and displays it properly.
--   
--   <pre>
--   vstedit  instance
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vstedit.html</a>
vstedit :: D -> SE ()

-- | Displays the parameters and the programs of a VST plugin.
--   
--   vstinfo displays the parameters and the programs of a VST plugin.
--   
--   <pre>
--   vstinfo  instance
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vstinfo.html</a>
vstinfo :: D -> SE ()

-- | Load a VST plugin into memory for use with the other vst4cs opcodes.
--   
--   vstinit is used to load a VST plugin into memory for use with the
--   other vst4cs opcodes. Both VST effects and instruments (synthesizers)
--   can be used.
--   
--   <pre>
--   instance  vstinit  ilibrarypath [,iverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vstinit.html</a>
vstinit :: D -> SE D

-- | Sends MIDI information to a VST plugin.
--   
--   vstmidiout is used for sending MIDI information to a VST plugin.
--   
--   <pre>
--   vstmidiout  instance, kstatus, kchan, kdata1, kdata2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vstmidiout.html</a>
vstmidiout :: D -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Sends a MIDI note with definite duration to a VST plugin.
--   
--   vstnote sends a MIDI note with definite duration to a VST plugin.
--   
--   <pre>
--   vstnote  instance, kchan, knote, kveloc, kdur
--          
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vstnote.html</a>
vstnote :: D -> Sig -> Sig -> Sig -> Sig -> SE ()
vstparamset :: D -> Sig -> Sig -> SE ()
vstparamget :: D -> Sig -> Sig

-- | Loads parameter banks to a VST plugin.
--   
--   vstprogset sets one of the programs in an .fxb bank.
--   
--   <pre>
--   vstprogset  instance, kprogram
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vstprogset.html</a>
vstprogset :: D -> Sig -> SE ()

module Csound.Typed.Opcode.ZakPatchSystem

-- | Clears one or more variables in the za space.
--   
--   <pre>
--   zacl  kfirst, klast
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zacl.html</a>
zacl :: Sig -> Sig -> SE ()

-- | Establishes zak space.
--   
--   Establishes zak space. Must be called only once.
--   
--   <pre>
--   zakinit  isizea, isizek
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zakinit.html</a>
zakinit :: D -> D -> SE ()

-- | Modulates one a-rate signal by a second one.
--   
--   <pre>
--   ares  zamod  asig, kzamod
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zamod.html</a>
zamod :: Sig -> Sig -> Sig

-- | Reads from a location in za space at a-rate.
--   
--   <pre>
--   ares  zar  kndx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zar.html</a>
zar :: Sig -> Sig

-- | Reads from a location in za space at a-rate, adds some gain.
--   
--   <pre>
--   ares  zarg  kndx, kgain
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zarg.html</a>
zarg :: Sig -> Sig -> Sig

-- | Writes to a za variable at a-rate without mixing.
--   
--   <pre>
--   zaw  asig, kndx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zaw.html</a>
zaw :: Sig -> Sig -> SE ()

-- | Writes to a za variable at a-rate with mixing.
--   
--   <pre>
--   zawm  asig, kndx [, imix]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zawm.html</a>
zawm :: Sig -> Sig -> SE ()

-- | Reads from a location in zk space at i-rate.
--   
--   <pre>
--   ir  zir  indx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zir.html</a>
zir :: D -> D

-- | Writes to a zk variable at i-rate without mixing.
--   
--   <pre>
--   ziw  isig, indx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ziw.html</a>
ziw :: D -> D -> SE ()

-- | Writes to a zk variable to an i-rate variable with mixing.
--   
--   <pre>
--   ziwm  isig, indx [, imix]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ziwm.html</a>
ziwm :: D -> D -> SE ()

-- | Clears one or more variables in the zk space.
--   
--   <pre>
--   zkcl  kfirst, klast
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zkcl.html</a>
zkcl :: Sig -> Sig -> SE ()

-- | Facilitates the modulation of one signal by another.
--   
--   <pre>
--   kres  zkmod  ksig, kzkmod
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zkmod.html</a>
zkmod :: Sig -> Sig -> Sig

-- | Reads from a location in zk space at k-rate.
--   
--   <pre>
--   kres  zkr  kndx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zkr.html</a>
zkr :: Sig -> Sig

-- | Writes to a zk variable at k-rate without mixing.
--   
--   <pre>
--   zkw  ksig, kndx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zkw.html</a>
zkw :: Sig -> Sig -> SE ()

-- | Writes to a zk variable at k-rate with mixing.
--   
--   <pre>
--   zkwm  ksig, kndx [, imix]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zkwm.html</a>
zkwm :: Sig -> Sig -> SE ()

module Csound.Typed.Opcode.Vectorial

-- | Read vectors (from tables -or arrays of vectors).
--   
--   This opcode reads vectors from tables at a-rate.
--   
--   <pre>
--   vtaba   andx, ifn, aout1 [, aout2, aout3, .... , aoutN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtaba.html</a>
vtaba :: Sig -> Tab -> Sig -> SE ()

-- | Read vectors (from tables -or arrays of vectors).
--   
--   This opcode reads vectors from tables.
--   
--   <pre>
--   vtabi   indx, ifn, iout1 [, iout2, iout3, .... , ioutN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtabi.html</a>
vtabi :: D -> Tab -> D -> SE ()

-- | Read vectors (from tables -or arrays of vectors).
--   
--   This opcode reads vectors from tables at k-rate.
--   
--   <pre>
--   vtabk   kndx, ifn, kout1 [, kout2, kout3, .... , koutN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtabk.html</a>
vtabk :: Sig -> Tab -> Sig -> SE ()

-- | Read a vector (several scalars simultaneously) from a table.
--   
--   This opcode reads vectors from tables at k-rate.
--   
--   <pre>
--   vtable1k   kfn,kout1 [, kout2, kout3, .... , koutN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtable1k.html</a>
vtable1k :: Tab -> Sig -> SE ()

-- | Read vectors (from tables -or arrays of vectors).
--   
--   This opcode reads vectors from tables at a-rate.
--   
--   <pre>
--   vtablea   andx, kfn, kinterp, ixmode, aout1 [, aout2, aout3, .... , aoutN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtablea.html</a>
vtablea :: Sig -> Tab -> Sig -> D -> Sig -> SE ()

-- | Read vectors (from tables -or arrays of vectors).
--   
--   This opcode reads vectors from tables.
--   
--   <pre>
--   vtablei   indx, ifn, interp, ixmode, iout1 [, iout2, iout3, .... , ioutN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtablei.html</a>
vtablei :: D -> Tab -> D -> D -> D -> SE ()

-- | Read vectors (from tables -or arrays of vectors).
--   
--   This opcode reads vectors from tables at k-rate.
--   
--   <pre>
--   vtablek   kndx, kfn, kinterp, ixmode, kout1 [, kout2, kout3, .... , koutN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtablek.html</a>
vtablek :: Sig -> Tab -> Sig -> D -> Sig -> SE ()

-- | Write vectors (to tables -or arrays of vectors).
--   
--   This opcode writes vectors to tables at a-rate.
--   
--   <pre>
--   vtablewa   andx, kfn, ixmode, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtablewa.html</a>
vtablewa :: Sig -> Tab -> D -> Sig -> SE ()

-- | Write vectors (to tables -or arrays of vectors).
--   
--   This opcode writes vectors to tables at init time.
--   
--   <pre>
--   vtablewi   indx, ifn, ixmode, inarg1 [, inarg2, inarg3 , .... , inargN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtablewi.html</a>
vtablewi :: D -> Tab -> D -> D -> SE ()

-- | Write vectors (to tables -or arrays of vectors).
--   
--   This opcode writes vectors to tables at k-rate.
--   
--   <pre>
--   vtablewk   kndx, kfn, ixmode, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtablewk.html</a>
vtablewk :: Sig -> Tab -> D -> Sig -> SE ()

-- | Write vectors (to tables -or arrays of vectors).
--   
--   This opcode writes vectors to tables at a-rate.
--   
--   <pre>
--   vtabwa   andx, ifn, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtabwa.html</a>
vtabwa :: Sig -> Tab -> Sig -> SE ()

-- | Write vectors (to tables -or arrays of vectors).
--   
--   This opcode writes vectors to tables at init time.
--   
--   <pre>
--   vtabwi   indx, ifn, inarg1 [, inarg2, inarg3 , .... , inargN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtabwi.html</a>
vtabwi :: D -> Tab -> D -> SE ()

-- | Write vectors (to tables -or arrays of vectors).
--   
--   This opcode writes vectors to tables at k-rate.
--   
--   <pre>
--   vtabwk   kndx, ifn, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vtabwk.html</a>
vtabwk :: Sig -> Tab -> Sig -> SE ()

-- | Adds a scalar value to a vector in a table.
--   
--   <pre>
--   vadd   ifn, kval, kelements [, kdstoffset] [, kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vadd.html</a>
vadd :: Tab -> Sig -> Sig -> SE ()

-- | Adds a scalar value to a vector in a table.
--   
--   <pre>
--   vadd_i   ifn, ival, ielements [, idstoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vadd_i.html</a>
vadd_i :: Tab -> D -> D -> SE ()

-- | Performs power-of operations between a vector and a scalar
--   
--   <pre>
--   vexp   ifn, kval, kelements [, kdstoffset] [, kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vexp.html</a>
vexp :: Tab -> Sig -> Sig -> SE ()

-- | Performs power-of operations between a vector and a scalar
--   
--   <pre>
--   vexp_i   ifn, ival, ielements[, idstoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vexp_i.html</a>
vexp_i :: Tab -> D -> D -> SE ()

-- | Multiplies a vector in a table by a scalar value.
--   
--   <pre>
--   vmult   ifn, kval, kelements [, kdstoffset] [, kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vmult.html</a>
vmult :: Tab -> Sig -> Sig -> SE ()

-- | Multiplies a vector in a table by a scalar value.
--   
--   <pre>
--   vmult_i   ifn, ival, ielements [, idstoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vmult_i.html</a>
vmult_i :: Tab -> D -> D -> SE ()

-- | Raises each element of a vector to a scalar power.
--   
--   <pre>
--   vpow   ifn, kval, kelements [, kdstoffset] [, kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vpow.html</a>
vpow :: Tab -> Sig -> Sig -> SE ()

-- | Raises each element of a vector to a scalar power
--   
--   <pre>
--   vpow_i   ifn, ival, ielements [, idstoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vpow_i.html</a>
vpow_i :: Tab -> D -> D -> SE ()

-- | Performs addition between two vectorial control signals.
--   
--   <pre>
--   vaddv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vaddv.html</a>
vaddv :: Tab -> Tab -> Sig -> SE ()

-- | Performs addition between two vectorial control signals at init time.
--   
--   <pre>
--   vaddv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vaddv_i.html</a>
vaddv_i :: Tab -> Tab -> D -> SE ()

-- | Copies between two vectorial control signals
--   
--   <pre>
--   vcopy   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [, kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vcopy.html</a>
vcopy :: Tab -> Tab -> Sig -> SE ()

-- | Copies a vector from one table to another.
--   
--   <pre>
--   vcopy_i   ifn1, ifn2, ielements [,idstoffset, isrcoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vcopy_i.html</a>
vcopy_i :: Tab -> Tab -> D -> SE ()

-- | Performs division between two vectorial control signals
--   
--   <pre>
--   vdivv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdivv.html</a>
vdivv :: Tab -> Tab -> Sig -> SE ()

-- | Performs division between two vectorial control signals at init time.
--   
--   <pre>
--   vdivv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdivv_i.html</a>
vdivv_i :: Tab -> Tab -> D -> SE ()

-- | Performs exponential operations between two vectorial control signals
--   
--   <pre>
--   vexpv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vexpv.html</a>
vexpv :: Tab -> Tab -> Sig -> SE ()

-- | Performs exponential operations between two vectorial control signals
--   at init time.
--   
--   <pre>
--   vexpv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vexpv_i.html</a>
vexpv_i :: Tab -> Tab -> D -> SE ()

-- | Maps elements from a vector according to indexes contained in another
--   vector.
--   
--   Maps elements from a vector onto another according to the indexes of a
--   this vector.
--   
--   <pre>
--   vmap   ifn1, ifn2, ielements [,idstoffset, isrcoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vmap.html</a>
vmap :: Tab -> Tab -> D -> SE ()

-- | Performs mutiplication between two vectorial control signals
--   
--   <pre>
--   vmultv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vmultv.html</a>
vmultv :: Tab -> Tab -> Sig -> SE ()

-- | Performs mutiplication between two vectorial control signals at init
--   time.
--   
--   <pre>
--   vmultv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vmultv_i.html</a>
vmultv_i :: Tab -> Tab -> D -> SE ()

-- | Performs power-of operations between two vectorial control signals
--   
--   <pre>
--   vpowv  ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vpowv.html</a>
vpowv :: Tab -> Tab -> Sig -> SE ()

-- | Performs power-of operations between two vectorial control signals at
--   init time.
--   
--   <pre>
--   vpowv_i  ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vpowv_i.html</a>
vpowv_i :: Tab -> Tab -> D -> SE ()

-- | Performs subtraction between two vectorial control signals
--   
--   <pre>
--   vsubv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vsubv.html</a>
vsubv :: Tab -> Tab -> Sig -> SE ()

-- | Performs subtraction between two vectorial control signals at init
--   time.
--   
--   <pre>
--   vsubv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vsubv_i.html</a>
vsubv_i :: Tab -> Tab -> D -> SE ()

-- | Vectorial envelope generator
--   
--   Generate exponential vectorial segments
--   
--   <pre>
--   vexpseg   ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vexpseg.html</a>
vexpseg :: Tab -> D -> Tab -> D -> Tab -> SE ()

-- | Vectorial envelope generator
--   
--   Generate linear vectorial segments
--   
--   <pre>
--   vlinseg   ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vlinseg.html</a>
vlinseg :: Tab -> D -> Tab -> D -> Tab -> SE ()

-- | Limiting and Wrapping Vectorial Signals
--   
--   Limits elements of vectorial control signals.
--   
--   <pre>
--   vlimit   ifn, kmin, kmax, ielements
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vlimit.html</a>
vlimit :: Tab -> Sig -> Sig -> D -> SE ()

-- | Limiting and Wrapping Vectorial Signals
--   
--   <tt>Reflects</tt> elements of vectorial control signals on thresholds.
--   
--   <pre>
--   vmirror   ifn, kmin, kmax, ielements
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vmirror.html</a>
vmirror :: Tab -> Sig -> Sig -> D -> SE ()

-- | Limiting and Wrapping Vectorial Signals
--   
--   Wraps elements of vectorial control signals.
--   
--   <pre>
--   vwrap   ifn, kmin, kmax, ielements
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vwrap.html</a>
vwrap :: Tab -> Sig -> Sig -> D -> SE ()

-- | k-rate variable time delay.
--   
--   Variable delay applied to a k-rate signal
--   
--   <pre>
--   kout  vdelayk   ksig, kdel, imaxdel [, iskip, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdelayk.html</a>
vdelayk :: Sig -> Sig -> D -> Sig

-- | Vectorial Control-rate Delay Paths
--   
--   Generate a sort of <tt>vectorial</tt> delay
--   
--   <pre>
--   vecdelay   ifn, ifnIn, ifnDel, ielements, imaxdel [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vecdelay.html</a>
vecdelay :: Tab -> Tab -> Tab -> D -> D -> SE ()

-- | Vectorial Control-rate Delay Paths
--   
--   Generate a sort of <tt>vectorial</tt> portamento
--   
--   <pre>
--   vport  ifn, khtime, ielements [, ifnInit]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vport.html</a>
vport :: Tab -> Sig -> D -> SE ()

-- | Generates a vector of random numbers stored into a table, holding the
--   values for a period of time.
--   
--   Generates a vector of random numbers stored into a table, holding the
--   values for a period of time. Generates a sort of 'vectorial
--   band-limited noise'.
--   
--   <pre>
--   vrandh   ifn,  krange, kcps, ielements [, idstoffset] [, iseed] \
--            [, isize] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vrandh.html</a>
vrandh :: Tab -> Sig -> Sig -> D -> SE ()

-- | Generate a sort of 'vectorial band-limited noise'
--   
--   <pre>
--   vrandi   ifn,  krange, kcps, ielements [, idstoffset] [, iseed] \
--            [, isize] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vrandi.html</a>
vrandi :: Tab -> Sig -> Sig -> D -> SE ()

-- | Cellular Automaton
--   
--   One-Dimensional Cellular Automaton. This opcode is the modified
--   version of vcella by Gabriel Maldonado.
--   
--   <pre>
--   cell  ktrig, kreinit, ioutFunc, initStateFunc, iRuleFunc, ielements
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cell.html</a>
cell :: Sig -> Sig -> D -> D -> D -> D -> SE ()

-- | Cellular Automata
--   
--   Unidimensional Cellular Automata applied to Csound vectors
--   
--   <pre>
--   vcella  ktrig, kreinit, ioutFunc, initStateFunc, \
--            iRuleFunc, ielements, irulelen [, iradius]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vcella.html</a>
vcella :: Sig -> Sig -> D -> D -> D -> D -> D -> SE ()

module Csound.Typed.Opcode.Strings

-- | Set string variable to value from strset table or string p-field
--   
--   strget sets a string variable at initialization time to the value
--   stored in strset table at the specified index, or a string p-field
--   from the score. If there is no string defined for the index, the
--   variable is set to an empty string.
--   
--   <pre>
--   Sdst  strget  indx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strget.html</a>
strget :: D -> Str

-- | Allows a string to be linked with a numeric value.
--   
--   <pre>
--   strset  iarg, istring
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strset.html</a>
strset :: D -> D -> SE ()

-- | Print a string constant or variable
--   
--   puts prints a string with an optional newline at the end whenever the
--   trigger signal is positive and changes.
--   
--   <pre>
--   puts  Sstr, ktrig[, inonl]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/puts.html</a>
puts :: Str -> Sig -> SE ()

-- | printf-style formatted output to a string variable.
--   
--   sprintf write printf-style formatted output to a string variable,
--   similarly to the C function sprintf(). sprintf runs at i-time only.
--   
--   <pre>
--   Sdst  sprintf  Sfmt, xarg1[, xarg2[, ... ]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sprintf.html</a>
sprintf :: Str -> Sig -> Str

-- | printf-style formatted output to a string variable at k-rate.
--   
--   sprintfk writes printf-style formatted output to a string variable,
--   similarly to the C function sprintf(). sprintfk runs both at
--   initialization and performance time.
--   
--   <pre>
--   Sdst  sprintfk  Sfmt, xarg1[, xarg2[, ... ]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sprintfk.html</a>
sprintfk :: Str -> Sig -> Str

-- | Concatenate strings
--   
--   Concatenate two strings and store the result in a variable. strcat
--   runs at i-time only. It is allowed for any of the input arguments to
--   be the same as the output variable.
--   
--   <pre>
--   Sdst  strcat  Ssrc1, Ssrc2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strcat.html</a>
strcat :: Str -> Str -> Str

-- | Concatenate strings (k-rate)
--   
--   Concatenate two strings and store the result in a variable. strcatk
--   does the concatenation both at initialization and performance time. It
--   is allowed for any of the input arguments to be the same as the output
--   variable.
--   
--   <pre>
--   Sdst  strcatk  Ssrc1, Ssrc2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strcatk.html</a>
strcatk :: Str -> Str -> Str

-- | Compare strings
--   
--   Compare strings and set the result to -1, 0, or 1 if the first string
--   is less than, equal to, or greater than the second, respectively.
--   strcmp compares at i-time only.
--   
--   <pre>
--   ires  strcmp  S1, S2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strcmp.html</a>
strcmp :: Str -> Str -> D

-- | Compare strings
--   
--   Compare strings and set the result to -1, 0, or 1 if the first string
--   is less than, equal to, or greater than the second, respectively.
--   strcmpk does the comparison both at initialization and performance
--   time.
--   
--   <pre>
--   kres  strcmpk  S1, S2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strcmpk.html</a>
strcmpk :: Str -> Str -> Sig

-- | Assign value to a string variable
--   
--   Assign to a string variable by copying the source which may be a
--   constant or another string variable. strcpy and = copy the string at
--   i-time only.
--   
--   <pre>
--   Sdst  strcpy  Ssrc
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strcpy.html</a>
strcpy :: Str -> Str

-- | Assign value to a string variable (k-rate)
--   
--   Assign to a string variable by copying the source which may be a
--   constant or another string variable. strcpyk does the assignment both
--   at initialization and performance time.
--   
--   <pre>
--   Sdst  strcpyk  Ssrc
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strcpyk.html</a>
strcpyk :: Str -> Str

-- | Return the position of the first occurence of a string in another
--   string
--   
--   Return the position of the first occurence of S2 in S1, or -1 if not
--   found. If S2 is empty, 0 is returned. strindex runs at init time only.
--   
--   <pre>
--   ipos  strindex  S1, S2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strindex.html</a>
strindex :: Str -> Str -> D

-- | Return the position of the first occurence of a string in another
--   string
--   
--   Return the position of the first occurence of S2 in S1, or -1 if not
--   found. If S2 is empty, 0 is returned. strindexk runs both at init and
--   performance time.
--   
--   <pre>
--   kpos  strindexk  S1, S2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strindexk.html</a>
strindexk :: Str -> Str -> Sig

-- | Return the length of a string
--   
--   Return the length of a string, or zero if it is empty. strlen runs at
--   init time only.
--   
--   <pre>
--   ilen  strlen  Sstr
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strlen.html</a>
strlen :: Str -> D

-- | Return the length of a string
--   
--   Return the length of a string, or zero if it is empty. strlenk runs
--   both at init and performance time.
--   
--   <pre>
--   klen  strlenk  Sstr
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strlenk.html</a>
strlenk :: Str -> Sig

-- | Return the position of the last occurence of a string in another
--   string
--   
--   Return the position of the last occurence of S2 in S1, or -1 if not
--   found. If S2 is empty, the length of S1 is returned. strrindex runs at
--   init time only.
--   
--   <pre>
--   ipos  strrindex  S1, S2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strrindex.html</a>
strrindex :: Str -> Str -> D

-- | Return the position of the last occurence of a string in another
--   string
--   
--   Return the position of the last occurence of S2 in S1, or -1 if not
--   found. If S2 is empty, the length of S1 is returned. strrindexk runs
--   both at init and performance time.
--   
--   <pre>
--   kpos  strrindexk  S1, S2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strrindexk.html</a>
strrindexk :: Str -> Str -> Sig

-- | Extract a substring
--   
--   Return a substring of the source string. strsub runs at init time
--   only.
--   
--   <pre>
--   Sdst  strsub  Ssrc[, istart[, iend]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strsub.html</a>
strsub :: Str -> Str

-- | Extract a substring
--   
--   Return a substring of the source string. strsubk runs both at init and
--   performance time.
--   
--   <pre>
--   Sdst  strsubk  Ssrc, kstart, kend
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strsubk.html</a>
strsubk :: Str -> Sig -> Sig -> Str

-- | Return the ASCII code of a character in a string
--   
--   Return the ASCII code of the character in Sstr at ipos (defaults to
--   zero which means the first character), or zero if ipos is out of
--   range. strchar runs at init time only.
--   
--   <pre>
--   ichr  strchar  Sstr[, ipos]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strchar.html</a>
strchar :: Str -> D

-- | Return the ASCII code of a character in a string
--   
--   Return the ASCII code of the character in Sstr at kpos (defaults to
--   zero which means the first character), or zero if kpos is out of
--   range. strchark runs both at init and performance time.
--   
--   <pre>
--   kchr  strchark  Sstr[, kpos]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strchark.html</a>
strchark :: Str -> Sig

-- | Convert a string to lower case
--   
--   Convert Ssrc to lower case, and write the result to Sdst. strlower
--   runs at init time only.
--   
--   <pre>
--   Sdst  strlower  Ssrc
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strlower.html</a>
strlower :: Str -> Str

-- | Convert a string to lower case
--   
--   Convert Ssrc to lower case, and write the result to Sdst. strlowerk
--   runs both at init and performance time.
--   
--   <pre>
--   Sdst  strlowerk  Ssrc
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strlowerk.html</a>
strlowerk :: Str -> Str

-- | Converts a string to a float (i-rate).
--   
--   Convert a string to a floating point value. It is also possible to
--   pass an strset index or a string p-field from the score instead of a
--   string argument. If the string cannot be parsed as a floating point or
--   integer number, an init or perf error occurs and the instrument is
--   deactivated.
--   
--   <pre>
--   ir  strtod  Sstr
--   ir  strtod  indx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strtod.html</a>
strtod :: Str -> D

-- | Converts a string to a float (k-rate).
--   
--   Convert a string to a floating point value at i- or k-rate. It is also
--   possible to pass an strset index or a string p-field from the score
--   instead of a string argument. If the string cannot be parsed as a
--   floating point or integer number, an init or perf error occurs and the
--   instrument is deactivated.
--   
--   <pre>
--   kr  strtodk  Sstr
--   kr  strtodk  kndx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strtodk.html</a>
strtodk :: Str -> Sig

-- | Converts a string to a signed integer (i-rate).
--   
--   Convert a string to a signed integer value. It is also possible to
--   pass an strset index or a string p-field from the score instead of a
--   string argument. If the string cannot be parsed as an integer number,
--   an init error occurs and the instrument is deactivated.
--   
--   <pre>
--   ir  strtol  Sstr
--   ir  strtol  indx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strtol.html</a>
strtol :: Str -> D

-- | Converts a string to a signed integer (k-rate).
--   
--   Convert a string to a signed integer value at i- or k-rate. It is also
--   possible to pass an strset index or a string p-field from the score
--   instead of a string argument. If the string cannot be parsed as an
--   integer number, an init or perf error occurs and the instrument is
--   deactivated.
--   
--   <pre>
--   kr  strtolk  Sstr
--   kr  strtolk  kndx
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strtolk.html</a>
strtolk :: Str -> Sig

-- | Convert a string to upper case
--   
--   Convert Ssrc to upper case, and write the result to Sdst. strupper
--   runs at init time only.
--   
--   <pre>
--   Sdst  strupper  Ssrc
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strupper.html</a>
strupper :: Str -> Str

-- | Convert a string to upper case
--   
--   Convert Ssrc to upper case, and write the result to Sdst. strupperk
--   runs both at init and performance time.
--   
--   <pre>
--   Sdst  strupperk  Ssrc
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/strupperk.html</a>
strupperk :: Str -> Str

module Csound.Typed.Opcode.SpectralProcessing

-- | Deprecated.
--   
--   Deprecated. Use the tableseg opcode instead.
--   
--   <pre>
--   ktableseg  ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ktableseg.html</a>
ktableseg :: Tab -> D -> Tab -> SE ()

-- | Reads from a pvoc file and uses the data to perform additive
--   synthesis.
--   
--   pvadd reads from a pvoc file and uses the data to perform additive
--   synthesis using an internal array of interpolating oscillators. The
--   user supplies the wave table (usually one period of a sine wave), and
--   can choose which analysis bins will be used in the re-synthesis.
--   
--   <pre>
--   ares  pvadd  ktimpnt, kfmod, ifilcod, ifn, ibins [, ibinoffset] \
--             [, ibinincr] [, iextractmode] [, ifreqlim] [, igatefn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvadd.html</a>
pvadd :: Sig -> Sig -> Str -> Tab -> D -> Sig

-- | Reads from a phase vocoder analysis file and makes the retrieved data
--   available.
--   
--   pvbufread reads from a pvoc file and makes the retrieved data
--   available to any following pvinterp and pvcross units that appear in
--   an instrument before a subsequent pvbufread (just as lpread and
--   lpreson work together). The data is passed internally and the unit has
--   no output of its own.
--   
--   <pre>
--   pvbufread  ktimpnt, ifile
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvbufread.html</a>
pvbufread :: Sig -> Str -> SE ()

-- | Applies the amplitudes from one phase vocoder analysis file to the
--   data from a second file.
--   
--   pvcross applies the amplitudes from one phase vocoder analysis file to
--   the data from a second file and then performs the resynthesis. The
--   data is passed, as described above, from a previously called pvbufread
--   unit. The two k-rate amplitude arguments are used to scale the
--   amplitudes of each files separately before they are added together and
--   used in the resynthesis (see below for further explanation). The
--   frequencies of the first file are not used at all in this process.
--   This unit simply allows for cross-synthesis through the application of
--   the amplitudes of the spectra of one signal to the frequencies of a
--   second signal. Unlike pvinterp, pvcross does allow for the use of the
--   ispecwp as in pvoc and vpvoc.
--   
--   <pre>
--   ares  pvcross  ktimpnt, kfmod, ifile, kampscale1, kampscale2 [, ispecwp]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvcross.html</a>
pvcross :: Sig -> Sig -> Str -> Sig -> Sig -> Sig

-- | Interpolates between the amplitudes and frequencies of two phase
--   vocoder analysis files.
--   
--   pvinterp interpolates between the amplitudes and frequencies, on a bin
--   by bin basis, of two phase vocoder analysis files (one from a
--   previously called pvbufread unit and the other from within its own
--   argument list), allowing for user defined transitions between analyzed
--   sounds. It also allows for general scaling of the amplitudes and
--   frequencies of each file separately before the interpolated values are
--   calculated and sent to the resynthesis routines. The kfmod argument in
--   pvinterp performs its frequency scaling on the frequency values after
--   their derivation from the separate scaling and subsequent
--   interpolation is performed so that this acts as an overall scaling
--   value of the new frequency components.
--   
--   <pre>
--   ares  pvinterp  ktimpnt, kfmod, ifile, kfreqscale1, kfreqscale2, \
--             kampscale1, kampscale2, kfreqinterp, kampinterp
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvinterp.html</a>
pvinterp :: Sig -> Sig -> Str -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Implements signal reconstruction using an fft-based phase vocoder.
--   
--   <pre>
--   ares  pvoc  ktimpnt, kfmod, ifilcod [, ispecwp] [, iextractmode] \
--             [, ifreqlim] [, igatefn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvoc.html</a>
pvoc :: Sig -> Sig -> Str -> Sig

-- | Reads from a phase vocoder analysis file and returns the frequency and
--   amplitude from a single analysis channel or bin.
--   
--   pvread reads from a pvoc file and returns the frequency and amplitude
--   from a single analysis channel or bin. The returned values can be used
--   anywhere else in the Csound instrument. For example, one can use them
--   as arguments to an oscillator to synthesize a single component from an
--   analyzed signal or a bank of pvreads can be used to resynthesize the
--   analyzed sound using additive synthesis by passing the frequency and
--   magnitude values to a bank of oscillators.
--   
--   <pre>
--   kfreq, kamp  pvread  ktimpnt, ifile, ibin
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvread.html</a>
pvread :: Sig -> Str -> D -> (Sig, Sig)

-- | Creates a new function table by making linear segments between values
--   in stored function tables.
--   
--   tableseg is like linseg but interpolate between values in a stored
--   function tables. The result is a new function table passed internally
--   to any following vpvoc which occurs before a subsequent tableseg (much
--   like lpread/lpreson pairs work). The uses of these are described below
--   under vpvoc.
--   
--   <pre>
--   tableseg  ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tableseg.html</a>
tableseg :: Tab -> D -> Tab -> SE ()

-- | Creates a new function table by making exponential segments between
--   values in stored function tables.
--   
--   tablexseg is like expseg but interpolate between values in a stored
--   function tables. The result is a new function table passed internally
--   to any following vpvoc which occurs before a subsequent tablexseg
--   (much like lpread/lpreson pairs work). The uses of these are described
--   below under vpvoc.
--   
--   <pre>
--   tablexseg  ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tablexseg.html</a>
tablexseg :: Tab -> D -> Tab -> SE ()

-- | Implements signal reconstruction using an fft-based phase vocoder and
--   an extra envelope.
--   
--   <pre>
--   ares  vpvoc  ktimpnt, kfmod, ifile [, ispecwp] [, ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vpvoc.html</a>
vpvoc :: Sig -> Sig -> Str -> Sig

-- | Resynthesises a signal from the data passed internally by a previous
--   lpread, applying formant shifting.
--   
--   <pre>
--   ares  lpfreson  asig, kfrqratio
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lpfreson.html</a>
lpfreson :: Sig -> Sig -> Sig

-- | Computes a new set of poles from the interpolation between two
--   analysis.
--   
--   <pre>
--   lpinterp  islot1, islot2, kmix
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lpinterp.html</a>
lpinterp :: D -> D -> Sig -> SE ()

-- | Reads a control file of time-ordered information frames.
--   
--   <pre>
--   krmsr, krmso, kerr, kcps  lpread  ktimpnt, ifilcod [, inpoles] [, ifrmrate]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lpread.html</a>
lpread :: Sig -> Str -> (Sig, Sig, Sig, Sig)

-- | Resynthesises a signal from the data passed internally by a previous
--   lpread.
--   
--   <pre>
--   ares  lpreson  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lpreson.html</a>
lpreson :: Sig -> Sig

-- | Selects the slot to be use by further lp opcodes.
--   
--   <pre>
--   lpslot  islot
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lpslot.html</a>
lpslot :: D -> SE ()

-- | Perform a weighted add of two input spectra.
--   
--   <pre>
--   wsig  specaddm  wsig1, wsig2 [, imul2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/specaddm.html</a>
specaddm :: Wspec -> Wspec -> Wspec

-- | Finds the positive difference values between consecutive spectral
--   frames.
--   
--   <pre>
--   wsig  specdiff  wsigin
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/specdiff.html</a>
specdiff :: Wspec -> Wspec

-- | Displays the magnitude values of the spectrum.
--   
--   <pre>
--   specdisp  wsig, iprd [, iwtflg]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/specdisp.html</a>
specdisp :: Wspec -> D -> SE ()

-- | Filters each channel of an input spectrum.
--   
--   <pre>
--   wsig  specfilt  wsigin, ifhtim
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/specfilt.html</a>
specfilt :: Wspec -> D -> Wspec

-- | Accumulates the values of successive spectral frames.
--   
--   <pre>
--   wsig  spechist  wsigin
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/spechist.html</a>
spechist :: Wspec -> Wspec

-- | Estimates the pitch of the most prominent complex tone in the
--   spectrum.
--   
--   Estimate the pitch of the most prominent complex tone in the spectrum.
--   
--   <pre>
--   koct, kamp  specptrk  wsig, kvar, ilo, ihi, istr, idbthresh, inptls, \
--             irolloff [, iodd] [, iconfs] [, interp] [, ifprd] [, iwtflg]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/specptrk.html</a>
specptrk :: Wspec -> Sig -> D -> D -> D -> D -> D -> D -> (Sig, Sig)

-- | Scales an input spectral datablock with spectral envelopes.
--   
--   <pre>
--   wsig  specscal  wsigin, ifscale, ifthresh
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/specscal.html</a>
specscal :: Wspec -> D -> D -> Wspec

-- | Sums the magnitudes across all channels of the spectrum.
--   
--   <pre>
--   ksum  specsum  wsig [, interp]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/specsum.html</a>
specsum :: Wspec -> Sig

-- | Generate a constant-Q, exponentially-spaced DFT.
--   
--   Generate a constant-Q, exponentially-spaced DFT across all octaves of
--   a multiply-downsampled control or audio input signal.
--   
--   <pre>
--   wsig  spectrum  xsig, iprd, iocts, ifrqa [, iq] [, ihann] [, idbout] \
--             [, idsprd] [, idsinrs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/spectrum.html</a>
spectrum :: Sig -> D -> D -> D -> Wspec

-- | PVS tracks to amplitude+frequency conversion.
--   
--   The binit opcode takes an input containg a TRACKS pv streaming signal
--   (as generated, for instance by partials) and converts it into a
--   equal-bandwidth bin-frame containing amplitude and frequency pairs
--   (PVS_AMP_FREQ), suitable for overlap-add resynthesis (such as
--   performed by pvsynth) or further PVS streaming phase vocoder signal
--   transformations. For each frequency bin, it will look for a suitable
--   track signal to fill it; if not found, the bin will be empty (0
--   amplitude). If more than one track fits a certain bin, the one with
--   highest amplitude will be chosen. This means that not all of the input
--   signal is actually <tt>binned</tt>, the operation is lossy. However,
--   in many situations this loss is not perceptually relevant.
--   
--   <pre>
--   fsig  binit  fin, isize
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/binit.html</a>
binit :: Spec -> D -> Spec

-- | Partial track spectral analysis.
--   
--   The partials opcode takes two input PV streaming signals containg
--   AMP_FREQ and AMP_PHASE signals (as generated for instance by pvsifd or
--   in the first case, by pvsanal) and performs partial track analysis, as
--   described in Lazzarini et al, "Time-stretching using the Instantaneous
--   Frequency Distribution and Partial Tracking", Proc.of ICMC05,
--   Barcelona. It generates a TRACKS PV streaming signal, containing
--   amplitude, frequency, phase and track ID for each output track. This
--   type of signal will contain a variable number of output tracks, up to
--   the total number of analysis bins contained in the inputs (fftsize/2 +
--   1 bins). The second input (AMP_PHASE) is optional, as it can take the
--   same signal as the first input. In this case, however, all phase
--   information will be NULL and resynthesis using phase information
--   cannot be performed.
--   
--   <pre>
--   ftrks  partials  ffr, fphs, kthresh, kminpts, kmaxgap, imaxtracks
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/partials.html</a>
partials :: Spec -> Spec -> Sig -> Sig -> Sig -> D -> Spec

-- | Resynthesize using a fast oscillator-bank.
--   
--   <pre>
--   ares  pvsadsyn  fsrc, inoscs, kfmod [, ibinoffset] [, ibinincr] [, iinit]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsadsyn.html</a>
pvsadsyn :: Spec -> D -> Sig -> Sig

-- | Generate an fsig from a mono audio source ain, using phase vocoder
--   overlap-add analysis.
--   
--   <pre>
--   fsig  pvsanal  ain, ifftsize, ioverlap, iwinsize, iwintype [, iformat] [, iinit]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsanal.html</a>
pvsanal :: Sig -> D -> D -> D -> D -> Spec

-- | Arpeggiate the spectral components of a streaming pv signal.
--   
--   This opcode arpeggiates spectral components, by amplifying one bin and
--   attenuating all the others around it. Used with an LFO it will provide
--   a spectral arpeggiator similar to Trevor Wishart's CDP program
--   specarp.
--   
--   <pre>
--   fsig  pvsarp  fsigin, kbin, kdepth, kgain
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsarp.html</a>
pvsarp :: Spec -> Sig -> Sig -> Sig -> Spec

-- | A band pass filter working in the spectral domain.
--   
--   Filter the pvoc frames, passing bins whose frequency is within a band,
--   and with linear interpolation for transitional bands.
--   
--   <pre>
--   fsig  pvsbandp  fsigin, xlowcut, xlowfull, \
--             xhighfull, xhighcut[, ktype]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsbandp.html</a>
pvsbandp :: Spec -> Sig -> Sig -> Sig -> Sig -> Spec

-- | A band reject filter working in the spectral domain.
--   
--   Filter the pvoc frames, rejecting bins whose frequency is within a
--   band, and with linear interpolation for transitional bands.
--   
--   <pre>
--   fsig  pvsbandr  fsigin, xlowcut, xlowfull, \
--             xhighfull, xhighcut[, ktype]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsbandr.html</a>
pvsbandr :: Spec -> Sig -> Sig -> Sig -> Sig -> Spec

-- | Obtain the amp and freq values off a PVS signal bin.
--   
--   Obtain the amp and freq values off a PVS signal bin as k-rate
--   variables.
--   
--   <pre>
--   kamp, kfr  pvsbin  fsig, kbin
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsbin.html</a>
pvsbin :: Spec -> Sig -> (Sig, Sig)

-- | Average the amp/freq time functions of each analysis channel for a
--   specified time.
--   
--   Average the amp/freq time functions of each analysis channel for a
--   specified time (truncated to number of frames). As a side-effect the
--   input pvoc stream will be delayed by that amount.
--   
--   <pre>
--   fsig  pvsblur  fsigin, kblurtime, imaxdel
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsblur.html</a>
pvsblur :: Spec -> Sig -> D -> Spec

-- | This opcode creates and writes to a circular buffer for f-signals
--   (streaming PV signals).
--   
--   This opcode sets up and writes to a circular buffer of length ilen
--   (secs), giving a handle for the buffer and a time pointer, which holds
--   the current write position (also in seconds). It can be used with one
--   or more pvsbufread opcodes. Writing is circular, wrapping around at
--   the end of the buffer.
--   
--   <pre>
--   ihandle, ktime   pvsbuffer  fsig, ilen 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsbuffer.html</a>
pvsbuffer :: Spec -> D -> (D, Sig)

-- | This opcode reads a circular buffer of f-signals (streaming PV
--   signals).
--   
--   This opcode reads from a circular buffer of length ilen (secs), taking
--   a handle for the buffer and a time pointer, which holds the current
--   read position (also in seconds). It is used in conjunction with a
--   pvsbuffer opocde. Reading is circular, wrapping around at the end of
--   the buffer.
--   
--   <pre>
--   fsig  pvsbufread   ktime, khandle[, ilo, ihi, iclear] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsbufread.html</a>
pvsbufread :: Sig -> Sig -> Spec

-- | This opcode reads a circular buffer of f-signals (streaming PV
--   signals), with binwise additional delays.
--   
--   This opcode reads from a circular buffer of length ilen (secs), taking
--   a handle for the buffer and a time pointer, which holds the current
--   read position (also in seconds). It is used in conjunction with a
--   pvsbuffer opocde. Reading is circular, wrapping around at the end of
--   the buffer. Extra delay times are taken from a function table, with
--   each point on it defining a delay time in seconds affecting the
--   corresponding bin.
--   
--   <pre>
--   fsig  pvsbufread2   ktime, khandle, ift1, ift2 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsbufread2.html</a>
pvsbufread2 :: Sig -> Sig -> D -> D -> Spec

-- | Scale the frequency components of a pv stream.
--   
--   Scale the frequency components of a pv stream, resulting in pitch
--   shift. Output amplitudes can be optionally modified in order to
--   attempt formant preservation.
--   
--   <pre>
--   fsig  pvscale  fsigin, kscal[, kkeepform, kgain, kcoefs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvscale.html</a>
pvscale :: Spec -> Sig -> Spec

-- | Calculate the spectral centroid of a signal.
--   
--   Calculate the spectral centroid of a signal from its discrete Fourier
--   transform.
--   
--   <pre>
--   kcent  pvscent  fsig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvscent.html</a>
pvscent :: Spec -> Sig

-- | Performs cross-synthesis between two source fsigs.
--   
--   <pre>
--   fsig  pvscross  fsrc, fdest, kamp1, kamp2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvscross.html</a>
pvscross :: Spec -> Spec -> Sig -> Sig -> Spec

-- | Spectral azimuth-based de-mixing of stereo sources.
--   
--   Spectral azimuth-based de-mixing of stereo sources, with a
--   reverse-panning result. This opcode implements the Azimuth
--   Discrimination and Resynthesis (ADRess) algorithm, developed by Dan
--   Barry (Barry et Al. "Sound Source Separation Azimuth Discrimination
--   and Resynthesis". DAFx'04, Univ. of Napoli). The source separation, or
--   de-mixing, is controlled by two parameters: an azimuth position (kpos)
--   and a subspace width (kwidth). The first one is used to locate the
--   spectral peaks of individual sources on a stereo mix, whereas the
--   second widens the 'search space', including/exclufing the peaks around
--   kpos. These two parameters can be used interactively to extract source
--   sounds from a stereo mix. The algorithm is particularly successful
--   with studio recordings where individual instruments occupy individual
--   panning positions; it is, in fact, a reverse-panning algorithm.
--   
--   <pre>
--   fsig  pvsdemix  fleft, fright, kpos, kwidth, ipoints
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsdemix.html</a>
pvsdemix :: Spec -> Spec -> Sig -> Sig -> D -> Spec

-- | Read a selected channel from a PVOC-EX analysis file.
--   
--   Create an fsig stream by reading a selected channel from a PVOC-EX
--   analysis file, with frame interpolation.
--   
--   <pre>
--   fsig  pvsdiskin  SFname,ktscal,kgain[,ioffset, ichan]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsdiskin.html</a>
pvsdiskin :: Str -> Sig -> Sig -> Spec

-- | Displays a PVS signal as an amplitude vs. freq graph.
--   
--   This opcode will display a PVS signal fsig. Uses X11 or FLTK windows
--   if enabled, else (or if -g flag is set) displays are approximated in
--   ASCII characters.
--   
--   <pre>
--   pvsdisp  fsig[, ibins, iwtflg] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsdisp.html</a>
pvsdisp :: Spec -> SE ()

-- | Multiply amplitudes of a pvoc stream by those of a second pvoc stream,
--   with dynamic scaling.
--   
--   <pre>
--   fsig  pvsfilter  fsigin, fsigfil, kdepth[, igain]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsfilter.html</a>
pvsfilter :: Spec -> Spec -> Sig -> Spec

-- | Read a selected channel from a PVOC-EX analysis file.
--   
--   Create an fsig stream by reading a selected channel from a PVOC-EX
--   analysis file loaded into memory, with frame interpolation. Only
--   format 0 files (amplitude+frequency) are currently supported. The
--   operation of this opcode mirrors that of pvoc, but outputs an fsig
--   instead of a resynthesized signal.
--   
--   <pre>
--   fsig  pvsfread  ktimpt, ifn [, ichan]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsfread.html</a>
pvsfread :: Sig -> Tab -> Spec

-- | Freeze the amplitude and frequency time functions of a pv stream
--   according to a control-rate trigger.
--   
--   This opcodes <tt>freezes</tt> the evolution of pvs stream by locking
--   into steady amplitude and/or frequency values for each bin. The
--   freezing is controlled, independently for amplitudes and frequencies,
--   by a control-rate trigger, which switches the freezing <tt>on</tt> if
--   equal to or above 1 and <tt>off</tt> if below 1.
--   
--   <pre>
--   fsig  pvsfreeze  fsigin, kfreeza, kfreezf
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsfreeze.html</a>
pvsfreeze :: Spec -> Sig -> Sig -> Spec

-- | Reads amplitude and/or frequency data from function tables.
--   
--   <pre>
--   pvsftr  fsrc, ifna [, ifnf]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsftr.html</a>
pvsftr :: Spec -> Tab -> SE ()

-- | Writes amplitude and/or frequency data to function tables.
--   
--   <pre>
--   kflag  pvsftw  fsrc, ifna [, ifnf]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsftw.html</a>
pvsftw :: Spec -> Tab -> Sig

-- | Write a fsig to a PVOCEX file.
--   
--   This opcode writes a fsig to a PVOCEX file (which in turn can be read
--   by pvsfread or other programs that support PVOCEX file input).
--   
--   <pre>
--   pvsfwrite  fsig, ifile
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsfwrite.html</a>
pvsfwrite :: Spec -> Str -> SE ()

-- | Scale the amplitude of a pv stream.
--   
--   <pre>
--   fsig  pvsgain  fsigin, kgain 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsgain.html</a>
pvsgain :: Spec -> Sig -> Spec

-- | Shift the frequency components of a pv stream, stretching/compressing
--   its spectrum.
--   
--   <pre>
--   fsig  pvshift  fsigin, kshift, klowest[, kkeepform, igain, kcoefs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvshift.html</a>
pvshift :: Spec -> Sig -> Sig -> Spec

-- | Instantaneous Frequency Distribution, magnitude and phase analysis.
--   
--   The pvsifd opcode takes an input a-rate signal and performs an
--   Instantaneous Frequency, magnitude and phase analysis, using the STFT
--   and pvsifd (Instantaneous Frequency Distribution), as described in
--   Lazzarini et al, "Time-stretching using the Instantaneous Frequency
--   Distribution and Partial Tracking", Proc.of ICMC05, Barcelona. It
--   generates two PV streaming signals, one containing the amplitudes and
--   frequencies (a similar output to pvsanal) and another containing
--   amplitudes and unwrapped phases.
--   
--   <pre>
--   ffr,fphs  pvsifd  ain, ifftsize, ihopsize, iwintype[,iscal]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsifd.html</a>
pvsifd :: Sig -> D -> D -> D -> (Spec, Spec)

-- | Retrieve an fsig from the input software bus; a pvs equivalent to
--   chani.
--   
--   This opcode retrieves an f-sig from the pvs in software bus, which can
--   be used to get data from an external source, using the Csound 5 API. A
--   channel is created if not already existing. The fsig channel is in
--   that case initialised with the given parameters. It is important to
--   note that the pvs input and output (pvsout opcode) busses are
--   independent and data is not shared between them.
--   
--   <pre>
--   fsig  pvsin  kchan[, isize, iolap, iwinsize, iwintype, iformat]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsin.html</a>
pvsin :: Sig -> Spec

-- | Get information from a PVOC-EX formatted source.
--   
--   Get format information about fsrc, whether created by an opcode such
--   as pvsanal, or obtained from a PVOCEX file by pvsfread. This
--   information is available at init time, and can be used to set
--   parameters for other pvs opcodes, and in particular for creating
--   function tables (e.g. for pvsftw), or setting the number of
--   oscillators for pvsadsyn.
--   
--   <pre>
--   ioverlap, inumbins, iwinsize, iformat  pvsinfo  fsrc
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsinfo.html</a>
pvsinfo :: Spec -> (D, D, D, D)

-- | Initialise a spectral (f) variable to zero.
--   
--   Performs the equivalent to an init operation on an f-variable.
--   
--   <pre>
--   fsig  pvsinit  isize[, iolap, iwinsize, iwintype, iformat]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsinit.html</a>
pvsinit :: D -> Spec

-- | Frequency lock an input fsig
--   
--   This opcode searches for spectral peaks and then locks the frequencies
--   around those peaks. This is similar to phase-locking in non-streaming
--   PV processing. It can be used to improve timestretching and
--   pitch-shifting quality in PV processing.
--   
--   <pre>
--   fsig  pvslock  fsigin, klock
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvslock.html</a>
pvslock :: Spec -> Sig -> Spec

-- | Modify amplitudes using a function table, with dynamic scaling.
--   
--   Modify amplitudes of fsrc using function table, with dynamic scaling.
--   
--   <pre>
--   fsig  pvsmaska  fsrc, ifn, kdepth
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsmaska.html</a>
pvsmaska :: Spec -> Tab -> Sig -> Spec

-- | Mix <tt>seamlessly</tt> two pv signals.
--   
--   Mix <tt>seamlessly</tt> two pv signals. This opcode combines the most
--   prominent components of two pvoc streams into a single mixed stream.
--   
--   <pre>
--   fsig  pvsmix  fsigin1, fsigin2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsmix.html</a>
pvsmix :: Spec -> Spec -> Spec

-- | Smooth the amplitude and frequency time functions of a pv stream using
--   parallel 1st order lowpass IIR filters with time-varying cutoff
--   frequency.
--   
--   Smooth the amplitude and frequency time functions of a pv stream using
--   a 1st order lowpass IIR with time-varying cutoff frequency. This
--   opcode uses the same filter as the tone opcode, but this time acting
--   separately on the amplitude and frequency time functions that make up
--   a pv stream. The cutoff frequency parameter runs at the control-rate,
--   but unlike tone and tonek, it is not specified in Hz, but as fractions
--   of 1/2 frame-rate (actually the pv stream sampling rate), which is
--   easier to understand. This means that the highest cutoff frequency is
--   1 and the lowest 0; the lower the frequency the smoother the functions
--   and more pronounced the effect will be.
--   
--   <pre>
--   fsig  pvsmooth  fsigin, kacf, kfcf
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsmooth.html</a>
pvsmooth :: Spec -> Sig -> Sig -> Spec

-- | Performs morphing (or interpolation) between two source fsigs.
--   
--   Performs morphing (or interpolation) between two source fsigs.
--   
--   <pre>
--   fsig  pvsmorph  fsig1, fsig2, kampint, kfrqint
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsmorph.html</a>
pvsmorph :: Spec -> Spec -> Sig -> Sig -> Spec

-- | PVS-based oscillator simulator.
--   
--   Generates periodic signal spectra in AMP-FREQ format, with the option
--   of four wave types:
--   
--   <pre>
--   fsig  pvsosc  kamp, kfreq, ktype, isize [,ioverlap] [, iwinsize] [, iwintype] [, iformat]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsosc.html</a>
pvsosc :: Sig -> Sig -> Sig -> D -> Spec

-- | Write a fsig to the pvs output bus.
--   
--   This opcode writes a fsig to a channel of the pvs output bus. Note
--   that the pvs out bus and the pvs in bus are separate and independent.
--   A new channel is created if non-existent.
--   
--   <pre>
--   pvsout  fsig, kchan
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsout.html</a>
pvsout :: Spec -> Sig -> SE ()

-- | Track the pitch and amplitude of a PVS signal.
--   
--   Track the pitch and amplitude of a PVS signal as k-rate variables.
--   
--   <pre>
--   kfr, kamp  pvspitch  fsig, kthresh
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvspitch.html</a>
pvspitch :: Spec -> Sig -> (Sig, Sig)

-- | Transforms a pvoc stream according to a masking function table.
--   
--   Transforms a pvoc stream according to a masking function table; if the
--   pvoc stream amplitude falls below the value of the function for a
--   specific pvoc channel, it applies a gain to that channel.
--   
--   <pre>
--   fsig  pvstencil  fsigin, kgain, klevel, iftable
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvstencil.html</a>
pvstencil :: Spec -> Sig -> Sig -> D -> Spec

-- | Combine the spectral envelope of one fsig with the excitation
--   (frequencies) of another.
--   
--   This opcode provides support for cross-synthesis of amplitudes and
--   frequencies. It takes the amplitudes of one input fsig and combines
--   with frequencies from another. It is a spectral version of the
--   well-known channel vocoder.
--   
--   <pre>
--   fsig  pvsvoc  famp, fexc, kdepth, kgain [,kcoefs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsvoc.html</a>
pvsvoc :: Spec -> Spec -> Sig -> Sig -> Spec

-- | Warp the spectral envelope of a PVS signal
--   
--   Warp the spectral envelope of a PVS signal by means of shifting and
--   scaling.
--   
--   <pre>
--   fsig  pvswarp  fsigin, kscal, kshift[, klowest, kmeth, kgain, kcoefs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvswarp.html</a>
pvswarp :: Spec -> Sig -> Sig -> Spec

-- | Resynthesise using a FFT overlap-add.
--   
--   Resynthesise phase vocoder data (f-signal) using a FFT overlap-add.
--   
--   <pre>
--   ares  pvsynth  fsrc, [iinit]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pvsynth.html</a>
pvsynth :: Spec -> Sig

-- | Streaming partial track additive synthesis with cubic phase
--   interpolation with pitch control and support for timescale-modified
--   input
--   
--   The resyn opcode takes an input containg a TRACKS pv streaming signal
--   (as generated, for instance by partials). It resynthesises the signal
--   using linear amplitude and cubic phase interpolation to drive a bank
--   of interpolating oscillators with amplitude and pitch scaling
--   controls. Resyn is a modified version of sinsyn, allowing for the
--   resynthesis of data with pitch and timescale changes.
--   
--   <pre>
--   asig  resyn  fin, kscal, kpitch, kmaxtracks, ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/resyn.html</a>
resyn :: Spec -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Streaming partial track additive synthesis with cubic phase
--   interpolation
--   
--   The sinsyn opcode takes an input containg a TRACKS pv streaming signal
--   (as generated, for instance by the partials opcode). It resynthesises
--   the signal using linear amplitude and cubic phase interpolation to
--   drive a bank of interpolating oscillators with amplitude scaling
--   control. sinsyn attempts to preserve the phase of the partials in the
--   original signal and in so doing it does not allow for pitch or
--   timescale modifications of the signal.
--   
--   <pre>
--   asig  sinsyn  fin, kscal, kmaxtracks, ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sinsyn.html</a>
sinsyn :: Spec -> Sig -> Sig -> Tab -> Sig

-- | Streaming partial track additive synthesis
--   
--   The tradsyn opcode takes an input containg a TRACKS pv streaming
--   signal (as generated, for instance by partials),as described in
--   Lazzarini et al, "Time-stretching using the Instantaneous Frequency
--   Distribution and Partial Tracking", Proc.of ICMC05, Barcelona. It
--   resynthesises the signal using linear amplitude and frequency
--   interpolation to drive a bank of interpolating oscillators with
--   amplitude and pitch scaling controls.
--   
--   <pre>
--   asig  tradsyn  fin, kscal, kpitch, kmaxtracks, ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tradsyn.html</a>
tradsyn :: Spec -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Streaming partial track cross-synthesis.
--   
--   The trcross opcode takes two inputs containg TRACKS pv streaming
--   signals (as generated, for instance by partials) and cross-synthesises
--   them into a single TRACKS stream. Two different modes of operation are
--   used: mode 0, cross-synthesis by multiplication of the amplitudes of
--   the two inputs and mode 1, cross-synthesis by the substititution of
--   the amplitudes of input 1 by the input 2. Frequencies and phases of
--   input 1 are preserved in the output. The cross-synthesis is done by
--   matching tracks between the two inputs using a 'search interval'. The
--   matching algorithm will look for tracks in the second input that are
--   within the search interval around each track in the first input. This
--   interval can be changed at the control rate. Wider search intervals
--   will find more matches.
--   
--   <pre>
--   fsig  trcross  fin1, fin2, ksearch, kdepth [, kmode] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trcross.html</a>
trcross :: Spec -> Spec -> Sig -> Sig -> Spec

-- | Streaming partial track filtering.
--   
--   The trfilter opcode takes an input containg a TRACKS pv streaming
--   signal (as generated, for instance by partials) and filters it using
--   an amplitude response curve stored in a function table. The function
--   table can have any size (no restriction to powers-of-two). The table
--   lookup is done by linear-interpolation. It is possible to create
--   time-varying filter curves by updating the amlitude response table
--   with a table-writing opcode.
--   
--   <pre>
--   fsig  trfilter  fin, kamnt, ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trfilter.html</a>
trfilter :: Spec -> Sig -> Tab -> Spec

-- | Extracts the highest-frequency track from a streaming track input
--   signal.
--   
--   The trhighest opcode takes an input containg TRACKS pv streaming
--   signals (as generated, for instance by partials) and outputs only the
--   highest track. In addition it outputs two k-rate signals,
--   corresponding to the frequency and amplitude of the highest track
--   signal.
--   
--   <pre>
--   fsig, kfr, kamp  trhighest  fin1, kscal
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trhighest.html</a>
trhighest :: Spec -> Sig -> (Spec, Sig, Sig)

-- | Extracts the lowest-frequency track from a streaming track input
--   signal.
--   
--   The trlowest opcode takes an input containg TRACKS pv streaming
--   signals (as generated, for instance by partials) and outputs only the
--   lowest track. In addition it outputs two k-rate signals, corresponding
--   to the frequency and amplitude of the lowest track signal.
--   
--   <pre>
--   fsig, kfr, kamp  trlowest  fin1, kscal
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trlowest.html</a>
trlowest :: Spec -> Sig -> (Spec, Sig, Sig)

-- | Streaming partial track mixing.
--   
--   The trmix opcode takes two inputs containg TRACKS pv streaming signals
--   (as generated, for instance by partials) and mixes them into a single
--   TRACKS stream. Tracks will be mixed up to the available space (defined
--   by the original number of FFT bins in the analysed signals). If the
--   sum of the input tracks exceeds this space, the higher-ordered tracks
--   in the second input will be pruned.
--   
--   <pre>
--   fsig  trmix  fin1, fin2 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trmix.html</a>
trmix :: Spec -> Spec -> Spec

-- | Streaming partial track frequency scaling.
--   
--   The trscale opcode takes an input containg a TRACKS pv streaming
--   signal (as generated, for instance by partials) and scales all
--   frequencies by a k-rate amount. It can also, optionally, scale the
--   gain of the signal by a k-rate amount (default 1). The result is pitch
--   shifting of the input tracks.
--   
--   <pre>
--   fsig  trscale  fin, kpitch[, kgain]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trscale.html</a>
trscale :: Spec -> Sig -> Spec

-- | Streaming partial track frequency scaling.
--   
--   The trshift opcode takes an input containg a TRACKS pv streaming
--   signal (as generated, for instance by partials) and shifts all
--   frequencies by a k-rate frequency. It can also, optionally, scale the
--   gain of the signal by a k-rate amount (default 1). The result is
--   frequency shifting of the input tracks.
--   
--   <pre>
--   fsig  trshift  fin, kpshift[, kgain]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trshift.html</a>
trshift :: Spec -> Sig -> Spec

-- | Streaming partial track frequency splitting.
--   
--   The trsplit opcode takes an input containg a TRACKS pv streaming
--   signal (as generated, for instance by partials) and splits it into two
--   signals according to a k-rate frequency 'split point'. The first
--   output will contain all tracks up from 0Hz to the split frequency and
--   the second will contain the tracks from the split frequency up to the
--   Nyquist. It can also, optionally, scale the gain of the output signals
--   by a k-rate amount (default 1). The result is two output signals
--   containing only part of the original spectrum.
--   
--   <pre>
--   fsiglow, fsighi  trsplit  fin, ksplit[, kgainlow, kgainhigh]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trsplit.html</a>
trsplit :: Spec -> Sig -> (Spec, Spec)

-- | uses the data from an ATS analysis file to perform additive synthesis.
--   
--   ATSadd reads from an ATS analysis file and uses the data to perform
--   additive synthesis using an internal array of interpolating
--   oscillators.
--   
--   <pre>
--   ar  ATSadd  ktimepnt, kfmod, iatsfile, ifn, ipartials[, ipartialoffset, \
--               ipartialincr, igatefn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ATSadd.html</a>
atsAdd :: Sig -> Sig -> D -> Tab -> D -> Sig

-- | uses the data from an ATS analysis file to perform noise resynthesis.
--   
--   ATSaddnz reads from an ATS analysis file and uses the data to perform
--   additive synthesis using a modified randi function.
--   
--   <pre>
--   ar  ATSaddnz  ktimepnt, iatsfile, ibands[, ibandoffset, ibandincr]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ATSaddnz.html</a>
atsAddnz :: Sig -> D -> D -> Sig

-- | reads data from and ATS data file and stores it in an internal data
--   table of frequency, amplitude pairs.
--   
--   ATSbufread reads data from and ATS data file and stores it in an
--   internal data table of frequency, amplitude pairs.
--   
--   <pre>
--   ATSbufread  ktimepnt, kfmod, iatsfile, ipartials[, ipartialoffset, \
--                ipartialincr]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ATSbufread.html</a>
atsBufread :: Sig -> Sig -> D -> D -> SE ()

-- | perform cross synthesis from ATS analysis files.
--   
--   ATScross uses data from an ATS analysis file and data from an
--   ATSbufread to perform cross synthesis.
--   
--   <pre>
--   ar  ATScross  ktimepnt, kfmod, iatsfile, ifn, kmylev, kbuflev, ipartials \
--                 [, ipartialoffset, ipartialincr]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ATScross.html</a>
atsCross :: Sig -> Sig -> D -> Tab -> Sig -> Sig -> D -> Sig

-- | reads data out of the header of an ATS file.
--   
--   atsinfo reads data out of the header of an ATS file.
--   
--   <pre>
--   idata  ATSinfo  iatsfile, ilocation
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ATSinfo.html</a>
atsInfo :: D -> D -> D

-- | allows a user to determine the frequency envelope of any ATSbufread.
--   
--   ATSinterpread allows a user to determine the frequency envelope of any
--   ATSbufread.
--   
--   <pre>
--   kamp  ATSinterpread  kfreq
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/ATSinterpread.html</a>
atsInterpread :: Sig -> Sig

-- | returns a frequency, amplitude pair from an ATSbufread opcode.
--   
--   ATSpartialtap takes a partial number and returns a frequency,
--   amplitude pair. The frequency and amplitude data comes from an
--   ATSbufread opcode.
--   
--   <pre>
--   kfrq, kamp  ATSpartialtap  ipartialnum
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/ATSpartialtap.html</a>
atsPartialtap :: D -> (Sig, Sig)

-- | reads data from an ATS file.
--   
--   ATSread returns the amplitude (kamp) and frequency (kfreq) information
--   of a user specified partial contained in the ATS analysis file at the
--   time indicated by the time pointer ktimepnt.
--   
--   <pre>
--   kfreq, kamp  ATSread  ktimepnt, iatsfile, ipartial
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ATSread.html</a>
atsRead :: Sig -> D -> D -> (Sig, Sig)

-- | reads data from an ATS file.
--   
--   ATSreadnz returns the energy (kenergy) of a user specified noise band
--   (1-25 bands) at the time indicated by the time pointer ktimepnt.
--   
--   <pre>
--   kenergy  ATSreadnz  ktimepnt, iatsfile, iband
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ATSreadnz.html</a>
atsReadnz :: Sig -> D -> D -> Sig

-- | uses the data from an ATS analysis file to perform resynthesis.
--   
--   ATSsinnoi reads data from an ATS data file and uses the information to
--   synthesize sines and noise together.
--   
--   <pre>
--   ar  ATSsinnoi  ktimepnt, ksinlev, knzlev, kfmod, iatsfile, ipartials \
--                 [, ipartialoffset, ipartialincr]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ATSsinnoi.html</a>
atsSinnoi :: Sig -> Sig -> Sig -> Sig -> D -> D -> Sig

-- | Morphs two stored sets of bandwidth-enhanced partials and stores a new
--   set of partials representing the morphed sound. The morph is performed
--   by linearly interpolating the parameter envelopes (frequency,
--   amplitude, and bandwidth, or noisiness) of the bandwidth-enhanced
--   partials according to control-rate frequency, amplitude, and bandwidth
--   morphing functions.
--   
--   lorismorph morphs two stored sets of bandwidth-enhanced partials and
--   stores a new set of partials representing the morphed sound. The morph
--   is performed by linearly interpolating the parameter envelopes
--   (frequency, amplitude, and bandwidth, or noisiness) of the
--   bandwidth-enhanced partials according to control-rate frequency,
--   amplitude, and bandwidth morphing functions.
--   
--   <pre>
--   lorismorph  isrcidx, itgtidx, istoreidx, kfreqmorphenv, kampmorphenv, kbwmorphenv
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lorismorph.html</a>
lorismorph :: D -> D -> D -> Sig -> Sig -> Sig -> SE ()

-- | renders a stored set of bandwidth-enhanced partials using the method
--   of Bandwidth-Enhanced Additive Synthesis implemented in the Loris
--   software, applying control-rate frequency, amplitude, and bandwidth
--   scaling envelopes.
--   
--   lorisplay renders a stored set of bandwidth-enhanced partials using
--   the method of Bandwidth-Enhanced Additive Synthesis implemented in the
--   Loris software, applying control-rate frequency, amplitude, and
--   bandwidth scaling envelopes.
--   
--   <pre>
--   ar  lorisplay  ireadidx, kfreqenv, kampenv, kbwenv
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lorisplay.html</a>
lorisplay :: D -> Sig -> Sig -> Sig -> Sig

-- | Imports a set of bandwidth-enhanced partials from a SDIF-format data
--   file, applying control-rate frequency, amplitude, and bandwidth
--   scaling envelopes, and stores the modified partials in memory.
--   
--   lorisread imports a set of bandwidth-enhanced partials from a
--   SDIF-format data file, applying control-rate frequency, amplitude, and
--   bandwidth scaling envelopes, and stores the modified partials in
--   memory.
--   
--   <pre>
--   lorisread  ktimpnt, ifilcod, istoreidx, kfreqenv, kampenv, kbwenv[, ifadetime]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lorisread.html</a>
lorisread :: Sig -> Str -> D -> Sig -> Sig -> Sig -> SE ()

module Csound.Typed.Opcode.SignalFlowGraphOpcodes

-- | Generate a function table from within an instrument definition,
--   without duplication of data.
--   
--   Enables the creation of function tables entirely inside instrument
--   definitions, without any duplication of data.
--   
--   <pre>
--   ifno  ftgenonce  ip1, ip2dummy, isize, igen, iarga, iargb, ...
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ftgenonce.html</a>
ftgenonce :: D -> D -> D -> D -> D -> [D] -> SE Tab

-- | Receives an arate signal into an instrument through a named port.
--   
--   <pre>
--   asignal  inleta Sname
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inleta.html</a>
inleta :: Str -> Sig

-- | Receives an frate signal (fsig) into an instrument from a named port.
--   
--   <pre>
--   fsignal  inletf Sname
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inletf.html</a>
inletf :: Str -> Spec

-- | Receives a krate signal into an instrument from a named port.
--   
--   <pre>
--   ksignal  inletk Sname
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inletk.html</a>
inletk :: Str -> Sig

-- | Receives a krate signal into an instrument from a named port.
--   
--   <pre>
--   ksignal  inletkid Sname, SinstanceID
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inletkid.html</a>
inletkid :: Str -> Str -> Sig

-- | Sends an arate signal out from an instrument to a named port.
--   
--   <pre>
--   outleta Sname, asignal
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outleta.html</a>
outleta :: Str -> Sig -> SE ()

-- | Sends a frate signal (fsig) out from an instrument to a named port.
--   
--   <pre>
--   outletf Sname, fsignal
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outletf.html</a>
outletf :: Str -> Spec -> SE ()

-- | Sends a krate signal out from an instrument to a named port.
--   
--   <pre>
--   outletk Sname, ksignal
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outletk.html</a>
outletk :: Str -> Sig -> SE ()

-- | Sends a krate signal out from an instrument to a named port.
--   
--   <pre>
--   outletkid Sname, SinstanceID, ksignal
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outletkid.html</a>
outletkid :: Str -> Str -> Sig -> SE ()

module Csound.Typed.Opcode.RealtimeMIDI

-- | Get the current after-touch value for this channel.
--   
--   <pre>
--   kaft  aftouch  [imin] [, imax]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/aftouch.html</a>
aftouch :: Sig

-- | Get the current value of a MIDI channel controller.
--   
--   Get the current value of a controller and optionally map it onto
--   specified range.
--   
--   <pre>
--   ival  chanctrl  ichnl, ictlno [, ilow] [, ihigh]
--   kval  chanctrl  ichnl, ictlno [, ilow] [, ihigh]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chanctrl.html</a>
chanctrl :: D -> D -> Sig

-- | Allows a floating-point 14-bit MIDI signal scaled with a minimum and a
--   maximum range.
--   
--   <pre>
--   idest  ctrl14  ichan, ictlno1, ictlno2, imin, imax [, ifn]
--   kdest  ctrl14  ichan, ictlno1, ictlno2, kmin, kmax [, ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ctrl14.html</a>
ctrl14 :: D -> D -> D -> D -> D -> Sig

-- | Allows a floating-point 21-bit MIDI signal scaled with a minimum and a
--   maximum range.
--   
--   <pre>
--   idest  ctrl21  ichan, ictlno1, ictlno2, ictlno3, imin, imax [, ifn]
--   kdest  ctrl21  ichan, ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ctrl21.html</a>
ctrl21 :: D -> D -> D -> D -> D -> D -> Sig

-- | Allows a floating-point 7-bit MIDI signal scaled with a minimum and a
--   maximum range.
--   
--   <pre>
--   idest  ctrl7  ichan, ictlno, imin, imax [, ifn]
--   kdest  ctrl7  ichan, ictlno, kmin, kmax [, ifn]
--   adest  ctrl7  ichan, ictlno, kmin, kmax [, ifn] [, icutoff]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ctrl7.html</a>
ctrl7 :: D -> D -> D -> D -> Sig

-- | Sets the initial values for a set of MIDI controllers.
--   
--   <pre>
--   ctrlinit  ichnl, ictlno1, ival1 [, ictlno2] [, ival2] [, ictlno3] \
--            [, ival3] [,...ival32]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ctrlinit.html</a>
ctrlinit :: [D] -> SE ()

-- | Initializes the controllers used to create a 14-bit MIDI value.
--   
--   <pre>
--   initc14  ichan, ictlno1, ictlno2, ivalue
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/initc14.html</a>
initc14 :: D -> D -> D -> D -> SE ()

-- | Initializes the controllers used to create a 21-bit MIDI value.
--   
--   <pre>
--   initc21  ichan, ictlno1, ictlno2, ictlno3, ivalue
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/initc21.html</a>
initc21 :: D -> D -> D -> D -> D -> SE ()

-- | Initializes the controller used to create a 7-bit MIDI value.
--   
--   Initializes MIDI controller ictlno with ivalue
--   
--   <pre>
--   initc7  ichan, ictlno, ivalue
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/initc7.html</a>
initc7 :: D -> D -> D -> SE ()

-- | Assigns a MIDI channel number to a Csound instrument.
--   
--   <pre>
--   massign  ichnl, insnum[, ireset]
--   massign  ichnl, "insname"[, ireset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/massign.html</a>
massign :: D -> D -> SE ()

-- | Allows a floating-point 14-bit MIDI signal scaled with a minimum and a
--   maximum range.
--   
--   <pre>
--   idest  midic14  ictlno1, ictlno2, imin, imax [, ifn]
--   kdest  midic14  ictlno1, ictlno2, kmin, kmax [, ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midic14.html</a>
midic14 :: D -> D -> D -> D -> Sig

-- | Allows a floating-point 21-bit MIDI signal scaled with a minimum and a
--   maximum range.
--   
--   <pre>
--   idest  midic21  ictlno1, ictlno2, ictlno3, imin, imax [, ifn]
--   kdest  midic21  ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midic21.html</a>
midic21 :: D -> D -> D -> D -> D -> Sig

-- | Allows a floating-point 7-bit MIDI signal scaled with a minimum and a
--   maximum range.
--   
--   <pre>
--   idest  midic7  ictlno, imin, imax [, ifn]
--   kdest  midic7  ictlno, kmin, kmax [, ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midic7.html</a>
midic7 :: D -> D -> D -> Sig

-- | Get the current value (0-127) of a specified MIDI controller.
--   
--   <pre>
--   ival  midictrl  inum [, imin] [, imax]
--   kval  midictrl  inum [, imin] [, imax]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midictrl.html</a>
midictrl :: D -> Sig

-- | Get a note number from a MIDI event.
--   
--   <pre>
--   ival  notnum  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/notnum.html</a>
notnum :: Msg -> D

-- | Get the current pitch-bend value for this channel.
--   
--   <pre>
--   ibend  pchbend  [imin] [, imax]
--   kbend  pchbend  [imin] [, imax]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pchbend.html</a>
pchbend :: Msg -> Sig

-- | Assigns an instrument number to a specified MIDI program.
--   
--   Assigns an instrument number to a specified (or all) MIDI program(s).
--   
--   <pre>
--   pgmassign  ipgm, inst[, ichn]
--   pgmassign  ipgm, "insname"[, ichn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pgmassign.html</a>
pgmassign :: D -> D -> SE ()

-- | Returns the polyphonic after-touch pressure of the selected note
--   number.
--   
--   polyaft returns the polyphonic pressure of the selected note number,
--   optionally mapped to an user-specified range.
--   
--   <pre>
--   ires  polyaft  inote [, ilow] [, ihigh]
--   kres  polyaft  inote [, ilow] [, ihigh]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/polyaft.html</a>
polyaft :: D -> Sig

-- | Get the velocity from a MIDI event.
--   
--   <pre>
--   ival  veloc  [ilow] [, ihigh]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/veloc.html</a>
veloc :: Msg -> D

-- | Sends a Non-Registered Parameter Number to the MIDI OUT port.
--   
--   Sends a NPRN (Non-Registered Parameter Number) message to the MIDI OUT
--   port each time one of the input arguments changes.
--   
--   <pre>
--   nrpn  kchan, kparmnum, kparmvalue
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/nrpn.html</a>
nrpn :: Sig -> Sig -> Sig -> SE ()

-- | Sends MIDI aftertouch messages at i-rate.
--   
--   <pre>
--   outiat  ichn, ivalue, imin, imax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outiat.html</a>
outiat :: D -> D -> D -> D -> SE ()

-- | Sends MIDI controller output at i-rate.
--   
--   <pre>
--   outic  ichn, inum, ivalue, imin, imax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outic.html</a>
outic :: D -> D -> D -> D -> D -> SE ()

-- | Sends 14-bit MIDI controller output at i-rate.
--   
--   <pre>
--   outic14  ichn, imsb, ilsb, ivalue, imin, imax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outic14.html</a>
outic14 :: D -> D -> D -> D -> D -> D -> SE ()

-- | Sends polyphonic MIDI aftertouch messages at i-rate.
--   
--   <pre>
--   outipat  ichn, inotenum, ivalue, imin, imax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outipat.html</a>
outipat :: D -> D -> D -> D -> D -> SE ()

-- | Sends MIDI pitch-bend messages at i-rate.
--   
--   <pre>
--   outipb  ichn, ivalue, imin, imax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outipb.html</a>
outipb :: D -> D -> D -> D -> SE ()

-- | Sends MIDI program change messages at i-rate
--   
--   <pre>
--   outipc  ichn, iprog, imin, imax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outipc.html</a>
outipc :: D -> D -> D -> D -> SE ()

-- | Sends MIDI aftertouch messages at k-rate.
--   
--   <pre>
--   outkat  kchn, kvalue, kmin, kmax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outkat.html</a>
outkat :: Sig -> Sig -> Sig -> Sig -> SE ()

-- | Sends MIDI controller messages at k-rate.
--   
--   <pre>
--   outkc  kchn, knum, kvalue, kmin, kmax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outkc.html</a>
outkc :: Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Sends 14-bit MIDI controller output at k-rate.
--   
--   <pre>
--   outkc14  kchn, kmsb, klsb, kvalue, kmin, kmax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outkc14.html</a>
outkc14 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Sends polyphonic MIDI aftertouch messages at k-rate.
--   
--   <pre>
--   outkpat  kchn, knotenum, kvalue, kmin, kmax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outkpat.html</a>
outkpat :: Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Sends MIDI pitch-bend messages at k-rate.
--   
--   <pre>
--   outkpb  kchn, kvalue, kmin, kmax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outkpb.html</a>
outkpb :: Sig -> Sig -> Sig -> Sig -> SE ()

-- | Sends MIDI program change messages at k-rate.
--   
--   <pre>
--   outkpc  kchn, kprog, kmin, kmax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outkpc.html</a>
outkpc :: Sig -> Sig -> Sig -> Sig -> SE ()

-- | Get the velocity of the current MIDI event.
--   
--   <pre>
--   iamp  ampmidi  iscal [, ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ampmidi.html</a>
ampmidi :: Msg -> D -> D

-- | Musically map MIDI velocity to peak amplitude within a specified
--   dynamic range in decibels.
--   
--   <pre>
--   iamplitude  ampmidid  ivelocity, idecibels
--   kamplitude  ampmidid  kvelocity, idecibels
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ampmidid.html</a>
ampmidid :: Msg -> D -> D -> Sig

-- | Get the note number of the current MIDI event, expressed in
--   cycles-per-second.
--   
--   <pre>
--   icps  cpsmidi  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpsmidi.html</a>
cpsmidi :: Msg -> D

-- | Get the note number of the current MIDI event and modify it by the
--   current pitch-bend value, express it in cycles-per-second.
--   
--   <pre>
--   icps  cpsmidib  [irange]
--   kcps  cpsmidib  [irange]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpsmidib.html</a>
cpsmidib :: Msg -> Sig

-- | Get a MIDI note number (allows customized micro-tuning scales).
--   
--   This unit is similar to cpsmidi, but allows fully customized
--   micro-tuning scales.
--   
--   <pre>
--   icps  cpstmid  ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpstmid.html</a>
cpstmid :: Msg -> Tab -> D

-- | Get the note number, in octave-point-decimal units, of the current
--   MIDI event.
--   
--   <pre>
--   ioct  octmidi  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/octmidi.html</a>
octmidi :: Msg -> D

-- | Get the note number of the current MIDI event and modify it by the
--   current pitch-bend value, express it in octave-point-decimal.
--   
--   <pre>
--   ioct  octmidib  [irange]
--   koct  octmidib  [irange]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/octmidib.html</a>
octmidib :: Msg -> Sig

-- | Get the note number of the current MIDI event, expressed in
--   pitch-class units.
--   
--   <pre>
--   ipch  pchmidi  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pchmidi.html</a>
pchmidi :: Msg -> D

-- | Get the note number of the current MIDI event and modify it by the
--   current pitch-bend value, express it in pitch-class units.
--   
--   <pre>
--   ipch  pchmidib  [irange]
--   kpch  pchmidib  [irange]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pchmidib.html</a>
pchmidib :: Msg -> Sig

-- | Returns a generic MIDI message received by the MIDI IN port.
--   
--   Returns a generic MIDI message received by the MIDI IN port
--   
--   <pre>
--   kstatus, kchan, kdata1, kdata2  midiin  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midiin.html</a>
midiin :: (Sig, Sig, Sig, Sig)

-- | Sends a generic MIDI message to the MIDI OUT port.
--   
--   <pre>
--   midiout  kstatus, kchan, kdata1, kdata2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midiout.html</a>
midiout :: Sig -> Sig -> Sig -> Sig -> SE ()

-- | Indicates whether a note is in its âreleaseâ stage.
--   
--   Provides a way of knowing when a note off message for the current note
--   is received. Only a noteoff message with the same MIDI note number as
--   the one which triggered the note will be reported by release.
--   
--   <pre>
--   kflag  release  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/release.html</a>
release :: Sig

-- | Extend the duration of real-time generated events.
--   
--   Extend the duration of real-time generated events and handle their
--   extra life (Usually for usage along with release instead of linenr,
--   linsegr, etc).
--   
--   <pre>
--   xtratim  iextradur
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/xtratim.html</a>
xtratim :: D -> SE ()

-- | Generates MIDI note messages at k-rate.
--   
--   <pre>
--   midion  kchn, knum, kvel
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midion.html</a>
midion :: Sig -> Sig -> Sig -> SE ()

-- | Sends noteon and noteoff messages to the MIDI OUT port.
--   
--   Sends noteon and noteoff messages to the MIDI OUT port when triggered
--   by a value different than zero.
--   
--   <pre>
--   midion2  kchn, knum, kvel, ktrig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midion2.html</a>
midion2 :: Sig -> Sig -> Sig -> Sig -> SE ()

-- | Sends a stream of the MIDI notes.
--   
--   <pre>
--   moscil  kchn, knum, kvel, kdur, kpause
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/moscil.html</a>
moscil :: Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Send a noteoff message to the MIDI OUT port.
--   
--   <pre>
--   noteoff  ichn, inum, ivel
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/noteoff.html</a>
noteoff :: D -> D -> D -> SE ()

-- | Send a noteon message to the MIDI OUT port.
--   
--   <pre>
--   noteon  ichn, inum, ivel
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/noteon.html</a>
noteon :: D -> D -> D -> SE ()

-- | Sends a noteon and a noteoff MIDI message both with the same channel,
--   number and velocity.
--   
--   <pre>
--   noteondur  ichn, inum, ivel, idur
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/noteondur.html</a>
noteondur :: D -> D -> D -> D -> SE ()

-- | Sends a noteon and a noteoff MIDI message both with the same channel,
--   number and velocity.
--   
--   <pre>
--   noteondur2  ichn, inum, ivel, idur
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/noteondur2.html</a>
noteondur2 :: D -> D -> D -> D -> SE ()

-- | Gets a MIDI channel's aftertouch value.
--   
--   midichannelaftertouch is designed to simplify writing instruments that
--   can be used interchangeably for either score or MIDI input, and to
--   make it easier to adapt instruments originally written for score input
--   to work with MIDI input.
--   
--   <pre>
--   midichannelaftertouch  xchannelaftertouch [, ilow] [, ihigh]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/midichannelaftertouch.html</a>
midichannelaftertouch :: Sig -> SE ()

-- | Returns the MIDI channel number from which the note was activated.
--   
--   midichn returns the MIDI channel number (1 - 16) from which the note
--   was activated. In the case of score notes, it returns 0.
--   
--   <pre>
--   ichn  midichn  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midichn.html</a>
midichn :: D

-- | Gets a MIDI control change value.
--   
--   midicontrolchange is designed to simplify writing instruments that can
--   be used interchangeably for either score or MIDI input, and to make it
--   easier to adapt instruments originally written for score input to work
--   with MIDI input.
--   
--   <pre>
--   midicontrolchange  xcontroller, xcontrollervalue [, ilow] [, ihigh]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/midicontrolchange.html</a>
midicontrolchange :: Sig -> Sig -> SE ()

-- | Changes values, depending on MIDI activation.
--   
--   mididefault is designed to simplify writing instruments that can be
--   used interchangeably for either score or MIDI input, and to make it
--   easier to adapt instruments originally written for score input to work
--   with MIDI input.
--   
--   <pre>
--   mididefault  xdefault, xvalue
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mididefault.html</a>
mididefault :: Sig -> Sig -> SE ()

-- | Gets a MIDI noteoff value.
--   
--   midinoteoff is designed to simplify writing instruments that can be
--   used interchangeably for either score or MIDI input, and to make it
--   easier to adapt instruments originally written for score input to work
--   with MIDI input.
--   
--   <pre>
--   midinoteoff  xkey, xvelocity
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/midinoteoff.html</a>
midinoteoff :: Sig -> Sig -> SE ()

-- | Gets a MIDI note number as a cycles-per-second frequency.
--   
--   midinoteoncps is designed to simplify writing instruments that can be
--   used interchangeably for either score or MIDI input, and to make it
--   easier to adapt instruments originally written for score input to work
--   with MIDI input.
--   
--   <pre>
--   midinoteoncps  xcps, xvelocity
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/midinoteoncps.html</a>
midinoteoncps :: Sig -> Sig -> SE ()

-- | Gets a MIDI note number value.
--   
--   midinoteonkey is designed to simplify writing instruments that can be
--   used interchangeably for either score or MIDI input, and to make it
--   easier to adapt instruments originally written for score input to work
--   with MIDI input.
--   
--   <pre>
--   midinoteonkey  xkey, xvelocity
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/midinoteonkey.html</a>
midinoteonkey :: Sig -> Sig -> SE ()

-- | Gets a MIDI note number value as octave-point-decimal value.
--   
--   midinoteonoct is designed to simplify writing instruments that can be
--   used interchangeably for either score or MIDI input, and to make it
--   easier to adapt instruments originally written for score input to work
--   with MIDI input.
--   
--   <pre>
--   midinoteonoct  xoct, xvelocity
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/midinoteonoct.html</a>
midinoteonoct :: Sig -> Sig -> SE ()

-- | Gets a MIDI note number as a pitch-class value.
--   
--   midinoteonpch is designed to simplify writing instruments that can be
--   used interchangeably for either score or MIDI input, and to make it
--   easier to adapt instruments originally written for score input to work
--   with MIDI input.
--   
--   <pre>
--   midinoteonpch  xpch, xvelocity
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/midinoteonpch.html</a>
midinoteonpch :: Sig -> Sig -> SE ()

-- | Gets a MIDI pitchbend value.
--   
--   midipitchbend is designed to simplify writing instruments that can be
--   used interchangeably for either score or MIDI input, and to make it
--   easier to adapt instruments originally written for score input to work
--   with MIDI input.
--   
--   <pre>
--   midipitchbend  xpitchbend [, ilow] [, ihigh]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/midipitchbend.html</a>
midipitchbend :: Sig -> SE ()

-- | Gets a MIDI polyphonic aftertouch value.
--   
--   midipolyaftertouch is designed to simplify writing instruments that
--   can be used interchangeably for either score or MIDI input, and to
--   make it easier to adapt instruments originally written for score input
--   to work with MIDI input.
--   
--   <pre>
--   midipolyaftertouch  xpolyaftertouch, xcontrollervalue [, ilow] [, ihigh]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/midipolyaftertouch.html</a>
midipolyaftertouch :: Sig -> Sig -> SE ()

-- | Gets a MIDI program change value.
--   
--   midiprogramchange is designed to simplify writing instruments that can
--   be used interchangeably for either score or MIDI input, and to make it
--   easier to adapt instruments originally written for score input to work
--   with MIDI input.
--   
--   <pre>
--   midiprogramchange  xprogram
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/midiprogramchange.html</a>
midiprogramchange :: Sig -> SE ()

-- | Sends a MIDI CLOCK message.
--   
--   <pre>
--   mclock  ifreq
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mclock.html</a>
mclock :: D -> SE ()

-- | Send system real-time messages to the MIDI OUT port.
--   
--   <pre>
--   mrtmsg  imsgtype
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mrtmsg.html</a>
mrtmsg :: D -> SE ()

module Csound.Typed.Opcode.PitchConverters

-- | Calculates a factor to raise/lower a frequency by a given amount of
--   cents.
--   
--   <pre>
--   cent (x) 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cent.html</a>
cent :: SigOrD a => a -> a

-- | Converts a Midi note number value to cycles-per-second.
--   
--   <pre>
--   cpsmidinn  (MidiNoteNumber)  (init- or control-rate args only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpsmidinn.html</a>
cpsmidinn :: SigOrD a => a -> a

-- | Converts an octave-point-decimal value to cycles-per-second.
--   
--   <pre>
--   cpsoct  (oct)  (no rate restriction)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpsoct.html</a>
cpsoct :: SigOrD a => a -> a

-- | Converts a pitch-class value to cycles-per-second.
--   
--   <pre>
--   cpspch  (pch)  (init- or control-rate args only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpspch.html</a>
cpspch :: SigOrD a => a -> a

-- | Calculates a factor to raise/lower a frequency by a given amount of
--   octaves.
--   
--   <pre>
--   octave (x)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/octave.html</a>
octave :: SigOrD a => a -> a

-- | Converts a cycles-per-second value to octave-point-decimal.
--   
--   <pre>
--   octcps  (cps)  (init- or control-rate args only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/octcps.html</a>
octcps :: SigOrD a => a -> a

-- | Converts a Midi note number value to octave-point-decimal.
--   
--   <pre>
--   octmidinn  (MidiNoteNumber)  (init- or control-rate args only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/octmidinn.html</a>
octmidinn :: SigOrD a => a -> a

-- | Converts a pitch-class value to octave-point-decimal.
--   
--   <pre>
--   octpch  (pch)  (init- or control-rate args only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/octpch.html</a>
octpch :: SigOrD a => a -> a

-- | Converts a Midi note number value to octave point pitch-class units.
--   
--   <pre>
--   pchmidinn  (MidiNoteNumber)  (init- or control-rate args only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pchmidinn.html</a>
pchmidinn :: SigOrD a => a -> a

-- | Converts an octave-point-decimal value to pitch-class.
--   
--   <pre>
--   pchoct  (oct)  (init- or control-rate args only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pchoct.html</a>
pchoct :: SigOrD a => a -> a

-- | Calculates a factor to raise/lower a frequency by a given amount of
--   semitones.
--   
--   <pre>
--   semitone (x)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/semitone.html</a>
semitone :: SigOrD a => a -> a

-- | Converts a pitch-class value into cycles-per-second (Hz) for equal
--   divisions of the octave.
--   
--   <pre>
--   icps  cps2pch  ipch, iequal
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cps2pch.html</a>
cps2pch :: D -> D -> D

-- | Returns micro-tuning values at k-rate.
--   
--   <pre>
--   kcps  cpstun  ktrig, kindex, kfn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpstun.html</a>
cpstun :: Sig -> Sig -> Tab -> Sig

-- | Returns micro-tuning values at init-rate.
--   
--   <pre>
--   icps  cpstuni  index, ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpstuni.html</a>
cpstuni :: D -> Tab -> D

-- | Converts a pitch-class value into cycles-per-second (Hz) for equal
--   divisions of any interval.
--   
--   Converts a pitch-class value into cycles-per-second (Hz) for equal
--   divisions of any interval. There is a restriction of no more than 100
--   equal divisions.
--   
--   <pre>
--   icps  cpsxpch  ipch, iequal, irepeat, ibase
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpsxpch.html</a>
cpsxpch :: D -> D -> D -> D -> D

module Csound.Typed.Opcode.MathematicalOperations

-- | Zeroes a list of audio signals.
--   
--   clear zeroes a list of audio signals.
--   
--   <pre>
--   clear  avar1 [, avar2] [, avar3] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/clear.html</a>
clear :: [Sig] -> SE ()

-- | Accumulates audio signals.
--   
--   vincr increments one audio variable with another signal, i.e. it
--   accumulates output.
--   
--   <pre>
--   vincr  accum, aincr
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vincr.html</a>
vincr :: Sig -> Sig -> SE ()

-- | Returns the amplitude equivalent of the decibel value x.
--   
--   Returns the amplitude equivalent of the decibel value x. Thus:
--   
--   <pre>
--   ampdb (x)  (no rate restriction)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ampdb.html</a>
ampdb :: SigOrD a => a -> a

-- | Returns the amplitude equivalent (in 16-bit signed integer scale) of
--   the full scale decibel (dB FS) value x.
--   
--   Returns the amplitude equivalent of the full scale decibel (dB FS)
--   value x. The logarithmic full scale decibel values will be converted
--   to linear 16-bit signed integer values from â32,768 to +32,767.
--   
--   <pre>
--   ampdbfs (x)  (no rate restriction)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ampdbfs.html</a>
ampdbfs :: SigOrD a => a -> a

-- | Returns the decibel equivalent of the raw amplitude x.
--   
--   <pre>
--   dbamp (x)  (init-rate or control-rate args only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dbamp.html</a>
dbamp :: SigOrD a => a -> a

-- | Returns the decibel equivalent of the raw amplitude x, relative to
--   full scale amplitude.
--   
--   Returns the decibel equivalent of the raw amplitude x, relative to
--   full scale amplitude. Full scale is assumed to be 16 bit. New is
--   Csound version 4.10.
--   
--   <pre>
--   dbfsamp (x)  (init-rate or control-rate args only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dbfsamp.html</a>
dbfsamp :: SigOrD a => a -> a

-- | Returns a random number in a bi-polar range.
--   
--   <pre>
--   birnd (x) (init- or control-rate only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/birnd.html</a>
birnd :: SigOrD a => a -> a

-- | Returns a random number in a unipolar range at the rate given by the
--   input argument.
--   
--   <pre>
--   rnd (x) (init- or control-rate only)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/rnd.html</a>
rnd :: SigOrD a => a -> a

-- | Safely divides two numbers.
--   
--   <pre>
--   ares  divz  xa, xb, ksubst
--   ires  divz  ia, ib, isubst
--   kres  divz  ka, kb, ksubst
--   ... divz (ka, kb, ksubst)... (no rate restriction)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/divz.html</a>
divz :: SigOrD a => a -> a -> a

-- | Multiplies and accumulates a- and k-rate signals.
--   
--   <pre>
--   ares  mac  ksig1, asig1 [, ksig2] [, asig2] [, ksig3] [, asig3] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mac.html</a>
mac :: [Sig] -> Sig

-- | Multiply and accumulate a-rate signals only.
--   
--   <pre>
--   ares  maca  asig1 , asig2 [, asig3] [, asig4] [, asig5] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/maca.html</a>
maca :: [Sig] -> Sig

-- | Efficiently evaluates a polynomial of arbitrary order.
--   
--   The polynomial opcode calculates a polynomial with a single a-rate
--   input variable. The polynomial is a sum of any number of terms in the
--   form kn*x^n where kn is the nth coefficient of the expression. These
--   coefficients are k-rate values.
--   
--   <pre>
--   aout  polynomial  ain, k0 [, k1 [, k2 [...]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/polynomial.html</a>
polynomial :: Sig -> [Sig] -> Sig

-- | Computes one argument to the power of another argument.
--   
--   Computes xarg to the power of kpow (or ipow) and scales the result by
--   inorm.
--   
--   <pre>
--   ares  pow  aarg, kpow [, inorm]
--   ires  pow  iarg, ipow [, inorm]
--   kres  pow  karg, kpow [, inorm]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pow.html</a>
pow :: Sig -> Sig -> Sig

-- | Multiplies any number of a-rate signals.
--   
--   <pre>
--   ares  product  asig1, asig2 [, asig3] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/product.html</a>
product' :: [Sig] -> Sig

-- | Sums any number of a-rate signals.
--   
--   <pre>
--   ares  sum  asig1 [, asig2] [, asig3] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sum.html</a>
sum' :: [Sig] -> Sig

-- | Returns an arctangent.
--   
--   Returns the arctangent of iy<i>ix, ky</i>kx, or ay/ax.
--   
--   <pre>
--   ares  taninv2  ay, ax
--   ires  taninv2  iy, ix
--   kres  taninv2  ky, kx
--   ... taninv2 (ky, kx)... (no rate restriction)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/taninv2.html</a>
taninv2 :: SigOrD a => a -> a -> a

module Csound.Typed.Opcode.FLTK

-- | A FLTK container opcode that groups child widgets.
--   
--   <pre>
--   FLgroup  "label", iwidth, iheight, ix, iy [, iborder] [, image]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLgroup.html</a>
flGroup :: Str -> D -> D -> D -> D -> SE ()

-- | Marks the end of a group of FLTK child widgets.
--   
--   <pre>
--   FLgroupEnd  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLgroupEnd.html</a>
flGroupEnd :: SE ()

-- | Provides the functionality of compressing and aligning FLTK widgets.
--   
--   FLpack provides the functionality of compressing and aligning widgets.
--   
--   <pre>
--   FLpack  iwidth, iheight, ix, iy, itype, ispace, iborder
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLpack.html</a>
flPack :: D -> D -> D -> D -> D -> D -> D -> SE ()

-- | Marks the end of a group of compressed or aligned FLTK widgets.
--   
--   <pre>
--   FLpackEnd  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLpackEnd.html</a>
flPackEnd :: SE ()

-- | Creates a window that contains FLTK widgets.
--   
--   <pre>
--   FLpanel  "label", iwidth, iheight [, ix] [, iy] [, iborder] [, ikbdcapture] [, iclose]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLpanel.html</a>
flPanel :: Str -> D -> D -> SE ()

-- | Marks the end of a group of FLTK widgets contained inside of a window
--   (panel).
--   
--   <pre>
--   FLpanelEnd  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLpanelEnd.html</a>
flPanelEnd :: SE ()

-- | A FLTK opcode that adds scroll bars to an area.
--   
--   FLscroll adds scroll bars to an area.
--   
--   <pre>
--   FLscroll  iwidth, iheight [, ix] [, iy]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLscroll.html</a>
flScroll :: D -> D -> SE ()

-- | A FLTK opcode that marks the end of an area with scrollbars.
--   
--   <pre>
--   FLscrollEnd  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLscrollEnd.html</a>
flScrollEnd :: SE ()

-- | Creates a tabbed FLTK interface.
--   
--   FLtabs is a âfile card tabsâ interface that is useful to display
--   several areas containing widgets in the same windows, alternatively.
--   It must be used together with FLgroup, another container that groups
--   child widgets.
--   
--   <pre>
--   FLtabs  iwidth, iheight, ix, iy
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLtabs.html</a>
flTabs :: D -> D -> D -> D -> SE ()

-- | Marks the end of a tabbed FLTK interface.
--   
--   <pre>
--   FLtabsEnd  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLtabsEnd.html</a>
flTabsEnd :: SE ()

-- | A FLTK widget opcode that creates a counter.
--   
--   Allows the user to increase/decrease a value with mouse clicks on a
--   corresponding arrow button.
--   
--   <pre>
--   kout, ihandle  FLcount  "label", imin, imax, istep1, istep2, itype, \
--             iwidth, iheight, ix, iy, iopcode [, kp1] [, kp2] [, kp3] [...] [, kpN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLcount.html</a>
flCount :: Str -> D -> D -> D -> D -> D -> D -> D -> D -> D -> D -> SE (Sig, D)

-- | A FLTK opcode that acts like a joystick.
--   
--   FLjoy is a squared area that allows the user to modify two output
--   values at the same time. It acts like a joystick.
--   
--   <pre>
--   koutx, kouty, ihandlex, ihandley  FLjoy  "label", iminx, imaxx, iminy, \
--             imaxy, iexpx, iexpy, idispx, idispy, iwidth, iheight, ix, iy
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLjoy.html</a>
flJoy :: Str -> D -> D -> D -> D -> D -> D -> D -> D -> D -> D -> D -> D -> SE (Sig, Sig, D, D)

-- | A FLTK widget opcode that creates a knob.
--   
--   <pre>
--   kout, ihandle  FLknob  "label", imin, imax, iexp, itype, idisp, iwidth, \
--             ix, iy [, icursorsize]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLknob.html</a>
flKnob :: Str -> D -> D -> D -> D -> D -> D -> D -> D -> SE (Sig, D)

-- | A FLTK widget that creates a transversal knob.
--   
--   FLroller is a sort of knob, but put transversally.
--   
--   <pre>
--   kout, ihandle  FLroller  "label", imin, imax, istep, iexp, itype, idisp, \
--             iwidth, iheight, ix, iy
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLroller.html</a>
flRoller :: Str -> D -> D -> D -> D -> D -> D -> D -> D -> D -> D -> SE (Sig, D)

-- | Puts a slider into the corresponding FLTK container.
--   
--   FLslider puts a slider into the corresponding container.
--   
--   <pre>
--   kout, ihandle  FLslider  "label", imin, imax, iexp, itype, idisp, iwidth, \
--             iheight, ix, iy
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLslider.html</a>
flSlider :: Str -> D -> D -> D -> D -> D -> D -> D -> D -> D -> SE (Sig, D)

-- | A FLTK widget opcode that creates a textbox.
--   
--   FLtext allows the user to modify a parameter value by directly typing
--   it into a text field.
--   
--   <pre>
--   kout, ihandle  FLtext  "label", imin, imax, istep, itype, iwidth, \
--             iheight, ix, iy
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLtext.html</a>
flText :: Str -> D -> D -> D -> D -> D -> D -> D -> D -> SE (Sig, D)

-- | A FLTK widget that displays text inside of a box.
--   
--   <pre>
--   ihandle  FLbox  "label", itype, ifont, isize, iwidth, iheight, ix, iy [, image]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLbox.html</a>
flBox :: Str -> D -> D -> D -> D -> D -> D -> D -> SE D

-- | A FLTK widget opcode that creates a bank of buttons.
--   
--   <pre>
--   kout, ihandle  FLbutBank  itype, inumx, inumy, iwidth, iheight, ix, iy, \
--             iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLbutBank.html</a>
flButBank :: D -> D -> D -> D -> D -> D -> D -> D -> SE (Sig, D)

-- | A FLTK widget opcode that creates a button.
--   
--   <pre>
--   kout, ihandle  FLbutton  "label", ion, ioff, itype, iwidth, iheight, ix, \
--             iy, iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLbutton.html</a>
flButton :: Str -> D -> D -> D -> D -> D -> D -> D -> D -> SE (Sig, D)

-- | A FLTK widget opcode that creates a button that will close the panel
--   window it is a part of.
--   
--   <pre>
--   ihandle  FLcloseButton  "label", iwidth, iheight, ix, iy
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLcloseButton.html</a>
flCloseButton :: Str -> D -> D -> D -> D -> SE D

-- | A FLTK widget opcode that creates a button that executes a command.
--   
--   A FLTK widget opcode that creates a button that executes a command.
--   Useful for opening up HTML documentation as About text or to start a
--   separate program from an FLTK widget interface.
--   
--   <pre>
--   ihandle  FLexecButton  "command", iwidth, iheight, ix, iy
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLexecButton.html</a>
flExecButton :: Str -> D -> D -> D -> D -> SE D

-- | Retrieves a previously stored FLTK snapshot.
--   
--   Retrieves a previously stored snapshot (in memory), i.e. sets all
--   valuator to the corresponding values stored in that snaphot.
--   
--   <pre>
--   inumsnap  FLgetsnap  index [, igroup]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLgetsnap.html</a>
flGetsnap :: D -> SE D

-- | Displays a box with a grid useful for visualizing two-dimensional
--   Hyper Vectorial Synthesis.
--   
--   FLhvsBox displays a box with a grid useful for visualizing
--   two-dimensional Hyper Vectorial Synthesis.
--   
--   <pre>
--   ihandle  FLhvsBox  inumlinesX, inumlinesY, iwidth, iheight, ix, iy [, image]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLhvsBox.html</a>
flHvsBox :: D -> D -> D -> D -> D -> D -> SE D

-- | Sets the cursor position of a previously-declared FLhvsBox widget.
--   
--   FLhvsBoxSetValue sets the cursor position of a previously-declared
--   FLhvsBox widget.
--   
--   <pre>
--   FLhvsBoxSetValue  kx, ky, ihandle
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLhvsBoxSetValue.html</a>
flHvsBoxSetValue :: Sig -> Sig -> D -> SE ()

-- | Reports keys pressed (on alphanumeric keyboard) when an FLTK panel has
--   focus.
--   
--   FLkeyIn informs about the status of a key pressed by the user on the
--   alphanumeric keyboard when an FLTK panel has got the focus.
--   
--   <pre>
--   kascii  FLkeyIn  [ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLkeyIn.html</a>
flKeyIn :: SE Sig

-- | Loads all snapshots into the memory bank of the current orchestra.
--   
--   FLloadsnap loads all the snapshots contained in a file into the memory
--   bank of the current orchestra.
--   
--   <pre>
--   FLloadsnap  "filename" [, igroup]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLloadsnap.html</a>
flLoadsnap :: Str -> SE ()

-- | Returns the mouse position and the state of the three mouse buttons.
--   
--   FLmouse returns the coordinates of the mouse position within an FLTK
--   panel and the state of the three mouse buttons.
--   
--   <pre>
--   kx, ky, kb1, kb2, kb3  FLmouse  [imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLmouse.html</a>
flMouse :: Tuple a => SE a

-- | A FLTK opcode that prints a k-rate value at specified intervals.
--   
--   FLprintk is similar to printk but shows values of a k-rate signal in a
--   text field instead of on the console.
--   
--   <pre>
--   FLprintk  itime, kval, idisp
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLprintk.html</a>
flPrintk :: D -> Sig -> D -> SE ()

-- | A FLTK opcode that prints a new value every time a control-rate
--   variable changes.
--   
--   FLprintk2 is similar to FLprintk but shows a k-rate variable's value
--   only when it changes.
--   
--   <pre>
--   FLprintk2  kval, idisp
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLprintk2.html</a>
flPrintk2 :: Sig -> D -> SE ()

-- | Starts the FLTK widget thread.
--   
--   <pre>
--   FLrun  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLrun.html</a>
flRun :: SE ()

-- | Saves all snapshots currently created into a file.
--   
--   FLsavesnap saves all snapshots currently created (i.e. the entire
--   memory bank) into a file.
--   
--   <pre>
--   FLsavesnap  "filename" [, igroup]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsavesnap.html</a>
flSavesnap :: Str -> SE ()

-- | Stores the current status of all FLTK valuators into a snapshot
--   location.
--   
--   FLsetsnap stores the current status of all valuators present in the
--   orchestra into a snapshot location (in memory).
--   
--   <pre>
--   inumsnap, inumval  FLsetsnap  index [, ifn, igroup]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetsnap.html</a>
flSetsnap :: D -> SE (D, D)

-- | Determines the snapshot group for FL valuators.
--   
--   FLsetSnapGroup determines the snapshot group of valuators declared
--   after it.
--   
--   <pre>
--   FLsetSnapGroup  igroup
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLsetSnapGroup.html</a>
flSetSnapGroup :: D -> SE ()

-- | Sets the value of a FLTK valuator at control-rate.
--   
--   FLsetVal is almost identical to FLsetVal_i. Except it operates at
--   k-rate and it affects the target valuator only when ktrig is set to a
--   non-zero value.
--   
--   <pre>
--   FLsetVal  ktrig, kvalue, ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetVal.html</a>
flSetVal :: Sig -> Sig -> D -> SE ()

-- | Sets the value of a FLTK valuator to a number provided by the user.
--   
--   FLsetVal_i forces the value of a valuator to a number provided by the
--   user.
--   
--   <pre>
--   FLsetVal_i  ivalue, ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetVal_i.html</a>
flSetVal_i :: D -> D -> SE ()

-- | A FLTK widget containing a bank of horizontal sliders.
--   
--   FLslidBnk is a widget containing a bank of horizontal sliders.
--   
--   <pre>
--   FLslidBnk  "names", inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] \
--            [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLslidBnk.html</a>
flSlidBnk :: Str -> D -> SE ()

-- | A FLTK widget containing a bank of horizontal sliders.
--   
--   FLslidBnk2 is a widget containing a bank of horizontal sliders.
--   
--   <pre>
--   FLslidBnk2  "names", inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLslidBnk2.html</a>
flSlidBnk2 :: Str -> D -> D -> D -> SE ()

-- | modify the values of a slider bank.
--   
--   FLslidBnk2Set modifies the values of a slider bank according to an
--   array of values stored in a table.
--   
--   <pre>
--   FLslidBnk2Set  ihandle, ifn [, istartIndex, istartSlid, inumSlid]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLslidBnk2Set.html</a>
flSlidBnk2Set :: D -> Tab -> SE ()

-- | modify the values of a slider bank.
--   
--   FLslidBnk2Setk modifies the values of a slider bank according to an
--   array of values stored in a table.
--   
--   <pre>
--   FLslidBnk2Setk   ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLslidBnk2Setk.html</a>
flSlidBnk2Setk :: Sig -> D -> Tab -> SE ()

-- | gets the handle of last slider bank created.
--   
--   FLslidBnkGetHandle gets the handle of last slider bank created.
--   
--   <pre>
--   ihandle  FLslidBnkGetHandle  
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLslidBnkGetHandle.html</a>
flSlidBnkGetHandle :: SE D

-- | modify the values of a slider bank.
--   
--   FLslidBnkSet modifies the values of a slider bank according to an
--   array of values stored in a table.
--   
--   <pre>
--   FLslidBnkSet  ihandle, ifn [, istartIndex, istartSlid, inumSlid]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLslidBnkSet.html</a>
flSlidBnkSet :: D -> Tab -> SE ()

-- | modify the values of a slider bank.
--   
--   FLslidBnkSetk modifies the values of a slider bank according to an
--   array of values stored in a table.
--   
--   <pre>
--   FLslidBnkSetk   ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLslidBnkSetk.html</a>
flSlidBnkSetk :: Sig -> D -> Tab -> SE ()

-- | Same as the FLrun opcode.
--   
--   <pre>
--   FLupdate  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLupdate.html</a>
flUpdate :: SE ()

-- | Shows the current value of a FLTK valuator.
--   
--   FLvalue shows current the value of a valuator in a text field.
--   
--   <pre>
--   ihandle  FLvalue  "label", iwidth, iheight, ix, iy
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLvalue.html</a>
flValue :: Str -> D -> D -> D -> D -> SE D

-- | An FLTK widget opcode that creates a virtual keyboard widget.
--   
--   An FLTK widget opcode that creates a virtual keyboard widget. This
--   must be used in conjunction with the virtual midi keyboard driver for
--   this to operate correctly. The purpose of this opcode is for making
--   demo versions of MIDI orchestras with the virtual keyboard embedded
--   within the main window.
--   
--   <pre>
--   FLvkeybd  "keyboard.map", iwidth, iheight, ix, iy
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLvkeybd.html</a>
flVkeybd :: Str -> D -> D -> D -> D -> SE ()

-- | A FLTK widget containing a bank of vertical sliders.
--   
--   FLvslidBnk is a widget containing a bank of vertical sliders.
--   
--   <pre>
--   FLvslidBnk  "names", inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] \
--            [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLvslidBnk.html</a>
flVslidBnk :: Str -> D -> SE ()

-- | A FLTK widget containing a bank of vertical sliders.
--   
--   FLvslidBnk2 is a widget containing a bank of vertical sliders.
--   
--   <pre>
--   FLvslidBnk2  "names", inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLvslidBnk2.html</a>
flVslidBnk2 :: Str -> D -> D -> D -> SE ()

-- | Senses the mouse cursor position in a user-defined area inside an
--   FLpanel.
--   
--   Similar to xyin, sense the mouse cursor position in a user-defined
--   area inside an FLpanel.
--   
--   <pre>
--   koutx, kouty, kinside   FLxyin  ioutx_min, ioutx_max, iouty_min, iouty_max, \
--             iwindx_min, iwindx_max, iwindy_min, iwindy_max [, iexpx, iexpy, ioutx, iouty]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLxyin.html</a>
flXyin :: D -> D -> D -> D -> D -> D -> D -> D -> SE (Sig, Sig, Sig)

-- | Allows one-dimensional HVS (Hyper-Vectorial Synthesis).
--   
--   vphaseseg allows one-dimensional HVS (Hyper-Vectorial Synthesis).
--   
--   <pre>
--   vphaseseg  kphase, ioutab, ielems, itab1,idist1,itab2 \
--            [,idist2,itab3, ... ,idistN-1,itabN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vphaseseg.html</a>
vphaseseg :: Sig -> D -> D -> [D] -> SE ()

-- | A FLTK opcode that sets the primary colors.
--   
--   Sets the primary colors to RGB values given by the user.
--   
--   <pre>
--   FLcolor  ired, igreen, iblue [, ired2, igreen2, iblue2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLcolor.html</a>
flColor :: D -> D -> D -> SE ()

-- | A FLTK opcode that sets the secondary (selection) color.
--   
--   FLcolor2 is the same of FLcolor except it affects the secondary
--   (selection) color.
--   
--   <pre>
--   FLcolor2  ired, igreen, iblue
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLcolor2.html</a>
flColor2 :: D -> D -> D -> SE ()

-- | Hides the target FLTK widget.
--   
--   Hides the target FLTK widget, making it invisible.
--   
--   <pre>
--   FLhide  ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLhide.html</a>
flHide :: D -> SE ()

-- | A FLTK opcode that modifies the appearance of a text label.
--   
--   Modifies a set of parameters related to the text label appearence of a
--   widget (i.e. size, font, alignment and color of corresponding text).
--   
--   <pre>
--   FLlabel  isize, ifont, ialign, ired, igreen, iblue
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLlabel.html</a>
flLabel :: D -> D -> D -> D -> D -> D -> SE ()

-- | Sets the text alignment of a label of a FLTK widget.
--   
--   FLsetAlign sets the text alignment of the label of the target widget.
--   
--   <pre>
--   FLsetAlign  ialign, ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetAlign.html</a>
flSetAlign :: D -> D -> SE ()

-- | Sets the appearance of a box surrounding a FLTK widget.
--   
--   FLsetBox sets the appearance of a box surrounding the target widget.
--   
--   <pre>
--   FLsetBox  itype, ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetBox.html</a>
flSetBox :: D -> D -> SE ()

-- | Sets the primary color of a FLTK widget.
--   
--   FLsetColor sets the primary color of the target widget.
--   
--   <pre>
--   FLsetColor  ired, igreen, iblue, ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetColor.html</a>
flSetColor :: D -> D -> D -> D -> SE ()

-- | Sets the secondary (or selection) color of a FLTK widget.
--   
--   FLsetColor2 sets the secondary (or selection) color of the target
--   widget.
--   
--   <pre>
--   FLsetColor2  ired, igreen, iblue, ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetColor2.html</a>
flSetColor2 :: D -> D -> D -> D -> SE ()

-- | Sets the font type of a FLTK widget.
--   
--   FLsetFont sets the font type of the target widget.
--   
--   <pre>
--   FLsetFont  ifont, ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetFont.html</a>
flSetFont :: D -> D -> SE ()

-- | Sets the position of a FLTK widget.
--   
--   FLsetPosition sets the position of the target widget according to the
--   ix and iy arguments.
--   
--   <pre>
--   FLsetPosition  ix, iy, ihandle
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLsetPosition.html</a>
flSetPosition :: D -> D -> D -> SE ()

-- | Resizes a FLTK widget.
--   
--   FLsetSize resizes the target widget (not the size of its text)
--   according to the iwidth and iheight arguments.
--   
--   <pre>
--   FLsetSize  iwidth, iheight, ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetSize.html</a>
flSetSize :: D -> D -> D -> SE ()

-- | Sets the label of a FLTK widget.
--   
--   FLsetText sets the label of the target widget to the double-quoted
--   text string provided with the itext argument.
--   
--   <pre>
--   FLsetText  "itext", ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLsetText.html</a>
flSetText :: Str -> D -> SE ()

-- | Sets the color of the text label of a FLTK widget.
--   
--   FLsetTextColor sets the color of the text label of the target widget.
--   
--   <pre>
--   FLsetTextColor  ired, iblue, igreen, ihandle
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLsetTextColor.html</a>
flSetTextColor :: D -> D -> D -> D -> SE ()

-- | Sets the size of the text label of a FLTK widget.
--   
--   FLsetTextSize sets the size of the text label of the target widget.
--   
--   <pre>
--   FLsetTextSize  isize, ihandle
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLsetTextSize.html</a>
flSetTextSize :: D -> D -> SE ()

-- | Sets some font attributes of the text label of a FLTK widget.
--   
--   FLsetTextType sets some attributes related to the fonts of the text
--   label of the target widget.
--   
--   <pre>
--   FLsetTextType  itype, ihandle
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/FLsetTextType.html</a>
flSetTextType :: D -> D -> SE ()

-- | Restores the visibility of a previously hidden FLTK widget.
--   
--   FLshow restores the visibility of a previously hidden widget.
--   
--   <pre>
--   FLshow  ihandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/FLshow.html</a>
flShow :: D -> SE ()

module Csound.Typed.Opcode.TableControl

-- | Deletes function table.
--   
--   <pre>
--   ftfree  ifno, iwhen
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ftfree.html</a>
ftfree :: Tab -> D -> SE ()

-- | Generate a score function table from within the orchestra.
--   
--   <pre>
--   gir  ftgen  ifn, itime, isize, igen, iarga [, iargb ] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ftgen.html</a>
ftgen :: Tab -> D -> D -> D -> D -> SE D

-- | Generate a score function table from within the orchestra, which is
--   deleted at the end of the note.
--   
--   Generate a score function table from within the orchestra, which is
--   optionally deleted at the end of the note.
--   
--   <pre>
--   ifno  ftgentmp  ip1, ip2dummy, isize, igen, iarga, iargb, ...
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ftgentmp.html</a>
ftgentmp :: D -> D -> D -> D -> D -> [D] -> SE Tab

-- | Loads a sound file into memory for use by loscilx
--   
--   sndload loads a sound file into memory for use by loscilx.
--   
--   <pre>
--   sndload  Sfname[, ifmt[, ichns[, isr[, ibas[, iamp[, istrt   \
--            [, ilpmod[, ilps[, ilpe]]]]]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sndload.html</a>
sndload :: Str -> SE ()

module Csound.Typed.Opcode.SerialIO

-- | Open a serial port.
--   
--   Open a serial port for arduino.
--   
--   <pre>
--   iPort  serialBegin  SPortName [, ibaudRate]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/serialBegin.html</a>
serialBegin :: Str -> SE D

-- | Close a serial port.
--   
--   Close a serial port for arduino.
--   
--   <pre>
--   serialEnd  iPort
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/serialEnd.html</a>
serialEnd :: D -> SE ()

-- | Flush data from a serial port.
--   
--   Flush to the screen any bytes (up to 32k) in the input buffer. Note
--   that these bytes will be cleared from the buffer. use this opcode
--   mainly for debugging messages. If you want to mix debugging and other
--   communication messages over the same port, you will need to manually
--   parse the data with the serialRead opcode.
--   
--   <pre>
--   serialFlush  iPort
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/serialFlush.html</a>
serialFlush :: D -> SE ()

-- | Print data from a serial port.
--   
--   Print to the screen any bytes (up to 32k) in the input buffer. Note
--   that these bytes will be cleared from the buffer. use this opcode
--   mainly for debugging messages. If you want to mix debugging and other
--   communication messages over the same port, you will need to manually
--   parse the data with the serialRead opcode.
--   
--   <pre>
--   serialPrint  iPort
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/serialPrint.html</a>
serialPrint :: D -> SE ()

-- | Read data from a serial port.
--   
--   Read data from a serial port for arduino.
--   
--   <pre>
--   kByte  serialRead  iPort
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/serialRead.html</a>
serialRead :: D -> Sig

-- | Write data to a serial port.
--   
--   Write data to a serial port for arduino.
--   
--   <pre>
--   serialWrite  iPort, iByte
--   serialWrite  iPort, kByte
--   serialWrite  iPort, SBytes
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/serialWrite.html</a>
serialWrite :: D -> D -> SE ()

-- | Write data to a serial port.
--   
--   Write data to a serial port for arduino.
--   
--   <pre>
--   serialWrite_i  iPort, iByte
--   serialWrite_i  iPort, SBytes
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/serialWrite_i.html</a>
serialWrite_i :: D -> D -> SE ()

module Csound.Typed.Opcode.JackoOpcodes

-- | Receives an audio signal from a Jack port.
--   
--   Receives an audio signal from a Jack audio input port inside this
--   instance of Csound, which in turn has received the signal from its
--   connected external Jack audio output port.
--   
--   <pre>
--   asignal  JackoAudioIn ScsoundPortName
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoAudioIn.html</a>
jackoAudioIn :: Str -> SE Sig

-- | Creates an audio connection from a Jack port to Csound.
--   
--   In the orchestra header, creates an audio connection from an external
--   Jack audio output port to a Jack audio input port inside this instance
--   of Csound.
--   
--   <pre>
--   JackoAudioInConnect SexternalPortName, ScsoundPortName
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoAudioInConnect.html</a>
jackoAudioInConnect :: Str -> Str -> SE ()

-- | Sends an audio signal to a Jack port.
--   
--   Sends an audio signal to an internal Jack audio output port, and in
--   turn to its connected external Jack audio input port.
--   
--   <pre>
--   JackoAudioOut  ScsoundPortName, asignal
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoAudioOut.html</a>
jackoAudioOut :: Str -> Sig -> SE ()

-- | Creates an audio connection from Csound to a Jack port.
--   
--   In the orchestra header, creates an audio connection from a Jack audio
--   output port inside this instance of Csound to an external Jack audio
--   input port.
--   
--   <pre>
--   JackoAudioOutConnect ScsoundPortName, SexternalPortName
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoAudioOutConnect.html</a>
jackoAudioOutConnect :: Str -> Str -> SE ()

-- | Turns Jack's freewheeling mode on or off.
--   
--   <pre>
--   JackoFreewheel [ienabled]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoFreewheel.html</a>
jackoFreewheel :: SE ()

-- | Prints information about the Jack system.
--   
--   Prints the Jack daemon and client names, the sampling rate and frames
--   per period, and all active Jack port names, types, states, and
--   connections.
--   
--   <pre>
--   JackoInfo  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/JackoInfo.html</a>
jackoInfo :: SE ()

-- | Initializes Csound as a Jack client.
--   
--   Initializes this instance of Csound as a Jack client.
--   
--   <pre>
--   JackoInit SclientName, ServerName
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/JackoInit.html</a>
jackoInit :: Str -> Str -> SE ()

-- | Creates a MIDI connection from a Jack port to Csound.
--   
--   In the orchestra header, creates a MIDI connection from an external
--   Jack MIDI output port to this instance of Csound.
--   
--   <pre>
--   JackoMidiInConnect SexternalPortName, ScsoundPortName
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoMidiInConnect.html</a>
jackoMidiInConnect :: Str -> Str -> SE ()

-- | Sends a MIDI channel message to a Jack port.
--   
--   Sends a MIDI channel message to a Jack MIDI output port inside this
--   instance of Csound, and in turn to its connected external Jack MIDI
--   input port.
--   
--   <pre>
--   JackoMidiOut  ScsoundPortName, kstatus, kchannel, kdata1[, kdata2]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoMidiOut.html</a>
jackoMidiOut :: Str -> Sig -> Sig -> Sig -> SE ()

-- | Creates a MIDI connection from Csound to a Jack port.
--   
--   In the orchestra header, creates a connection from a Jack MIDI output
--   port inside this instance of Csound to an external Jack MIDI input
--   port.
--   
--   <pre>
--   JackoMidiOutConnect ScsoundPortName, SexternalPortName
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoMidiOutConnect.html</a>
jackoMidiOutConnect :: Str -> Str -> SE ()

-- | Sends a MIDI channel message to a Jack port.
--   
--   Sends a MIDI channel message to a Jack MIDI output port inside this
--   instance of Csound, and in turn to its connected external Jack MIDI
--   input port.
--   
--   <pre>
--   JackoNoteOut  ScsoundPortName, kstatus, kchannel, kdata1[, kdata2]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoNoteOut.html</a>
jackoNoteOut :: Str -> Sig -> Sig -> Sig -> SE ()

-- | Enables or disables all Jack ports.
--   
--   In the orchestra header, after all Jack connections have been created,
--   enables or disables all Jack input and output opcodes inside this
--   instance of Csound to read or write data.
--   
--   <pre>
--   JackoOn [iactive] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/JackoOn.html</a>
jackoOn :: SE ()

-- | Control the Jack transport.
--   
--   Starts, stops, or repositions the Jack transport. This is useful,
--   e.g., for starting an external sequencer playing to send MIDI messages
--   to Csound.
--   
--   <pre>
--   JackoTransport  kcommand, [kposition]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/JackoTransport.html</a>
jackoTransport :: Sig -> SE ()

module Csound.Typed.Opcode.InstrumentControl

-- | Stops one of a number of internal clocks.
--   
--   <pre>
--   clockoff  inum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/clockoff.html</a>
clockoff :: D -> SE ()

-- | Starts one of a number of internal clocks.
--   
--   <pre>
--   clockon  inum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/clockon.html</a>
clockon :: D -> SE ()

-- | Creates a held note.
--   
--   Causes a finite-duration note to become a âheldâ note
--   
--   <pre>
--   ihold  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ihold.html</a>
ihold :: SE ()

-- | Enables an instrument to turn itself off.
--   
--   <pre>
--   turnoff  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/turnoff.html</a>
turnoff :: SE ()

-- | Turn off instance(s) of other instruments at performance time.
--   
--   <pre>
--   turnoff2  kinsno, kmode, krelease
--          
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/turnoff2.html</a>
turnoff2 :: Sig -> Sig -> Sig -> SE ()

-- | Activate an instrument for an indefinite time.
--   
--   <pre>
--   turnon  insnum [, itime]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/turnon.html</a>
turnon :: D -> SE ()

-- | Generates a score event from an instrument.
--   
--   <pre>
--   event  "scorechar", kinsnum, kdelay, kdur, [, kp4] [, kp5] [, ...]
--   event  "scorechar", "insname", kdelay, kdur, [, kp4] [, kp5] [, ...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/event.html</a>
event :: Str -> Sig -> Sig -> Sig -> [Sig] -> SE ()

-- | Generates a score event from an instrument.
--   
--   <pre>
--   event_i  "scorechar", iinsnum, idelay, idur, [, ip4] [, ip5] [, ...]
--   event_i  "scorechar", "insname", idelay, idur, [, ip4] [, ip5] [, ...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/event_i.html</a>
event_i :: Str -> D -> D -> D -> [D] -> SE ()

-- | Mutes/unmutes new instances of a given instrument.
--   
--   <pre>
--   mute  insnum [, iswitch]
--   mute  "insname" [, iswitch]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mute.html</a>
mute :: D -> SE ()

-- | Read, preprocess and schedule a score from an input string.
--   
--   Readscore will issue one or more score events. It can handle strings
--   in the same conditions as the standard score, including preprocessing
--   (carry, sort, ramp, etc). Multi-line strings are accepted, using {{ }}
--   to enclose the string.
--   
--   <pre>
--   readscore  Sin 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/readscore.html</a>
readscore :: Str -> SE ()

-- | Removes the definition of an instrument.
--   
--   Removes the definition of an instrument as long as it is not in use.
--   
--   <pre>
--   remove  insnum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/remove.html</a>
remove :: D -> SE ()

-- | Adds a new score event generated by a k-rate trigger.
--   
--   <pre>
--   schedkwhen  ktrigger, kmintim, kmaxnum, kinsnum, kwhen, kdur \
--            [, ip4] [, ip5] [...]
--   schedkwhen  ktrigger, kmintim, kmaxnum, "insname", kwhen, kdur \
--            [, ip4] [, ip5] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/schedkwhen.html</a>
schedkwhen :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Similar to schedkwhen but uses a named instrument at init-time.
--   
--   <pre>
--   schedkwhennamed  ktrigger, kmintim, kmaxnum, "name", kwhen, kdur \
--            [, ip4] [, ip5] [...]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/schedkwhennamed.html</a>
schedkwhennamed :: Sig -> Sig -> Sig -> Str -> Sig -> Sig -> SE ()

-- | Adds a new score event.
--   
--   <pre>
--   schedule  insnum, iwhen, idur [, ip4] [, ip5] [...]
--   schedule  "insname", iwhen, idur [, ip4] [, ip5] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/schedule.html</a>
schedule :: D -> D -> D -> SE ()

-- | Adds a new score event.
--   
--   <pre>
--   schedwhen  ktrigger, kinsnum, kwhen, kdur [, ip4] [, ip5] [...]
--   schedwhen  ktrigger, "insname", kwhen, kdur [, ip4] [, ip5] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/schedwhen.html</a>
schedwhen :: Sig -> Sig -> Sig -> Sig -> SE ()

-- | Issues one or more score line events from an instrument.
--   
--   Scoreline will issue one or more score events, if ktrig is 1 every
--   k-period. It can handle strings in the same conditions as the standard
--   score. Multi-line strings are accepted, using {{ }} to enclose the
--   string.
--   
--   <pre>
--   scoreline  Sin, ktrig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/scoreline.html</a>
scoreline :: Str -> Sig -> SE ()

-- | Issues one or more score line events from an instrument at i-time.
--   
--   scoreline_i will issue score events at i-time. It can handle strings
--   in the same conditions as the standard score. Multi-line strings are
--   accepted, using {{ }} to enclose the string.
--   
--   <pre>
--   scoreline_i  Sin
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/scoreline_i.html</a>
scoreline_i :: Str -> SE ()

-- | Returns the number of active instances of an instrument.
--   
--   <pre>
--   ir  active  insnum [,iopt]
--   ir  active  Sinsname [,iopt]
--   kres  active  kinsnum [,iopt]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/active.html</a>
active :: D -> Sig

-- | Control allocation of cpu resources on a per-instrument basis, to
--   optimize realtime output.
--   
--   <pre>
--   cpuprc  insnum, ipercent
--   cpuprc  Sinsname, ipercent
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cpuprc.html</a>
cpuprc :: D -> D -> SE ()

-- | Exit Csound as fast as possible, with no cleaning up.
--   
--   In Csound4 calls an exit function to leave Csound as fast as possible.
--   On Csound5 exits back to the driving code.
--   
--   <pre>
--   exitnow  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/exitnow.html</a>
exitnow :: SE ()

-- | Start/stop jack_transport and can optionally relocate the playback
--   head.
--   
--   <pre>
--   jacktransport  icommand [, ilocation]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/jacktransport.html</a>
jacktransport :: D -> SE ()

-- | Limits the number of allocations of an instrument.
--   
--   <pre>
--   maxalloc  insnum, icount
--   maxalloc  Sinsname, icount
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/maxalloc.html</a>
maxalloc :: D -> D -> SE ()

-- | Creates space for instruments but does not run them.
--   
--   <pre>
--   prealloc  insnum, icount
--   prealloc  "insname", icount
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/prealloc.html</a>
prealloc :: D -> D -> SE ()

-- | Sense on-screen controls.
--   
--   Sense on-screen controls. Requires Winsound or TCL/TK.
--   
--   <pre>
--   kres  button  knum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/button.html</a>
button :: Sig -> Sig

-- | k-rate signal change detector.
--   
--   This opcode outputs a trigger signal that informs when any one of its
--   k-rate arguments has changed. Useful with valuator widgets or MIDI
--   controllers.
--   
--   <pre>
--   ktrig  changed  kvar1 [, kvar2,..., kvarN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/changed.html</a>
changed :: [Sig] -> Sig

-- | Sense on-screen controls.
--   
--   Sense on-screen controls. Requires Winsound or TCL/TK.
--   
--   <pre>
--   kres  checkbox  knum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/checkbox.html</a>
checkbox :: Sig -> Sig

-- | Configurable slider controls for realtime user input.
--   
--   Configurable slider controls for realtime user input. Requires
--   Winsound or TCL/TK. control reads a slider's value.
--   
--   <pre>
--   kres  control  knum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/control.html</a>
control :: Sig -> Sig

-- | Envelope follower unit generator.
--   
--   <pre>
--   ares  follow  asig, idt
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/follow.html</a>
follow :: Sig -> D -> Sig

-- | Another controllable envelope extractor.
--   
--   A controllable envelope extractor using the algorithm attributed to
--   Jean-Marc Jot.
--   
--   <pre>
--   ares  follow2  asig, katt, krel
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/follow2.html</a>
follow2 :: Sig -> Sig -> Sig -> Sig

-- | Return Csound settings.
--   
--   Return various configuration settings in Svalue as a string at init
--   time.
--   
--   <pre>
--   Svalue  getcfg  iopt
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/getcfg.html</a>
getcfg :: D -> Str

-- | Reads data from a joystick controller.
--   
--   Reads data from a Linux joystick controller
--   
--   <pre>
--   kres  joystick  kdevice ktab
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/joystick.html</a>
joystick :: Sig -> Sig -> Sig

-- | Trigger Metronome
--   
--   Generate a metronomic signal to be used in any circumstance an
--   isochronous trigger is needed.
--   
--   <pre>
--   ktrig   metro   kfreq [, initphase]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/metro.html</a>
metro :: Sig -> Sig

-- | Returns the current tempo at k-rate, of either the MIDI file (if
--   available) or the score
--   
--   <pre>
--   ksig   miditempo  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/miditempo.html</a>
miditempo :: Sig

-- | Reads data from a P5 Glove controller.
--   
--   Opens and at control-rate polls a P5 Glove controller.
--   
--   <pre>
--   p5gconnect  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/p5gconnect.html</a>
p5gconnect :: SE ()

-- | Reads data fields from an external P5 Glove.
--   
--   Reads data fields from a P5 Glove controller.
--   
--   <pre>
--   kres  p5gdata  kcontrol
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/p5gdata.html</a>
p5gdata :: Sig -> Sig

-- | Returns the number of pfields belonging to a note event.
--   
--   pcount returns the number of pfields belonging to a note event.
--   
--   <pre>
--   icount  pcount  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pcount.html</a>
pcount :: D

-- | Maintains the output equal to the highest absolute value received.
--   
--   These opcodes maintain the output k-rate variable as the peak absolute
--   level so far received.
--   
--   <pre>
--   kres  peak  asig
--   kres  peak  ksig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/peak.html</a>
peak :: Sig -> Sig

-- | Returns the value of a specified pfield.
--   
--   pindex returns the value of a specified pfield.
--   
--   <pre>
--   ivalue  pindex  ipfieldIndex
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pindex.html</a>
pindex :: D -> D

-- | Tracks the pitch of a signal.
--   
--   Using the same techniques as spectrum and specptrk, pitch tracks the
--   pitch of the signal in octave point decimal form, and amplitude in dB.
--   
--   <pre>
--   koct, kamp  pitch  asig, iupdte, ilo, ihi, idbthresh [, ifrqs] [, iconf] \
--             [, istrt] [, iocts] [, iq] [, inptls] [, irolloff] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pitch.html</a>
pitch :: Sig -> D -> D -> D -> D -> (Sig, Sig)

-- | Follows the pitch of a signal based on the AMDF method.
--   
--   Follows the pitch of a signal based on the AMDF method (Average
--   Magnitude Difference Function). Outputs pitch and amplitude tracking
--   signals. The method is quite fast and should run in realtime. This
--   technique usually works best for monophonic signals.
--   
--   <pre>
--   kcps, krms  pitchamdf  asig, imincps, imaxcps [, icps] [, imedi] \
--             [, idowns] [, iexcps] [, irmsmedi]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pitchamdf.html</a>
pitchamdf :: Sig -> D -> D -> (Sig, Sig)

-- | Tracks the pitch of a signal.
--   
--   plltrack, a pitch tracker based on a phase-locked loop algorithm,
--   described in Zolzer, U, Sankarababu, S.V. and Moller, S, "PLL-based
--   Pitch Detection and Tracking for Audio Signals. Proc. of IIH-MSP
--   2012".
--   
--   <pre>
--   acps, alock  plltrack  asig, kd [, kloopf, kloopq, klf, khf, kthresh]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/plltrack.html</a>
plltrack :: Sig -> Sig -> (Sig, Sig)

-- | Tracks the pitch of a signal.
--   
--   ptrack takes an input signal, splits it into ihopsize blocks and using
--   a STFT method, extracts an estimated pitch for its fundamental
--   frequency as well as estimating the total amplitude of the signal in
--   dB, relative to full-scale (0dB). The method implies an analysis
--   window size of 2*ihopsize samples (overlaping by 1/2 window), which
--   has to be a power-of-two, between 128 and 8192 (hopsizes between 64
--   and 4096). Smaller windows will give better time precision, but worse
--   frequency accuracy (esp. in low fundamentals).This opcode is based on
--   an original algorithm by M. Puckette.
--   
--   <pre>
--   kcps, kamp  ptrack  asig, ihopsize[,ipeaks]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ptrack.html</a>
ptrack :: Sig -> D -> (Sig, Sig)

-- | Rewinds the playback position of the current score performance.
--   
--   Rewinds the playback position of the current score performance..
--   
--   <pre>
--   rewindscore  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/rewindscore.html</a>
rewindscore :: SE ()

-- | Determines the root-mean-square amplitude of an audio signal.
--   
--   Determines the root-mean-square amplitude of an audio signal. It
--   low-pass filters the actual value, to average in the manner of a VU
--   meter.
--   
--   <pre>
--   kres  rms  asig [, ihp] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/rms.html</a>
rms :: Sig -> Sig

-- | Returns the ASCII code of a key that has been pressed.
--   
--   Returns the ASCII code of a key that has been pressed, or -1 if no key
--   has been pressed.
--   
--   <pre>
--   kres[, kkeydown]  sensekey  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sensekey.html</a>
sensekey :: Tuple a => a

-- | Generates a trigger signal according to the values stored in a table.
--   
--   <pre>
--   ktrig_out  seqtime  ktime_unit, kstart, kloop, kinitndx, kfn_times
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/seqtime.html</a>
seqtime :: Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Generates a trigger signal according to the values stored in a table.
--   
--   <pre>
--   ktrig_out  seqtime2  ktrig_in, ktime_unit, kstart, kloop, kinitndx, kfn_times
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/seqtime2.html</a>
seqtime2 :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Configurable slider controls for realtime user input.
--   
--   Configurable slider controls for realtime user input. Requires
--   Winsound or TCL/TK. setctrl sets a slider to a specific value, or sets
--   a minimum or maximum range.
--   
--   <pre>
--   setctrl  inum, ival, itype
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/setctrl.html</a>
setctrl :: D -> D -> D -> SE ()

-- | Split a trigger signal
--   
--   splitrig splits a trigger signal (i.e. a timed sequence of
--   control-rate impulses) into several channels following a structure
--   designed by the user.
--   
--   <pre>
--   splitrig  ktrig, kndx, imaxtics, ifn, kout1 [,kout2,...,koutN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/splitrig.html</a>
splitrig :: Sig -> Sig -> D -> Tab -> [Sig] -> SE ()

-- | Estimate the tempo of beat patterns in a control signal.
--   
--   <pre>
--   ktemp  tempest  kin, iprd, imindur, imemdur, ihp, ithresh, ihtim, ixfdbak, \
--             istartempo, ifn [, idisprd] [, itweek]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tempest.html</a>
tempest :: Sig -> D -> D -> D -> D -> D -> D -> D -> D -> Tab -> Sig

-- | Apply tempo control to an uninterpreted score.
--   
--   <pre>
--   tempo  ktempo, istartempo
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tempo.html</a>
tempo :: Sig -> D -> SE ()

-- | Reads the current value of the tempo.
--   
--   <pre>
--   kres  tempoval  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tempoval.html</a>
tempoval :: Sig

-- | Time Variant Sequencer
--   
--   An event-sequencer in which time can be controlled by a time-pointer.
--   Sequence data are stored into a table.
--   
--   <pre>
--   ktrig   timedseq   ktimpnt, ifn, kp1 [,kp2, kp3, ...,kpN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/timedseq.html</a>
timedseq :: Sig -> Tab -> [Sig] -> Sig

-- | Informs when a krate signal crosses a threshold.
--   
--   <pre>
--   kout  trigger  ksig, kthreshold, kmode
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trigger.html</a>
trigger :: Sig -> Sig -> Sig -> Sig

-- | Accepts a trigger signal as input and outputs a group of values.
--   
--   <pre>
--   trigseq  ktrig_in, kstart, kloop, kinitndx, kfn_values, kout1 [, kout2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trigseq.html</a>
trigseq :: Sig -> Sig -> Sig -> Sig -> Tab -> [Sig] -> SE ()

-- | Reads data from a number of external Nintendo Wiimote controllers.
--   
--   Opens and at control-rate polls up to four external Nintendo Wiimote
--   controllers.
--   
--   <pre>
--   ires  wiiconnect  [itimeout, imaxnum]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wiiconnect.html</a>
wiiconnect :: D

-- | Reads data fields from a number of external Nintendo Wiimote
--   controllers.
--   
--   Reads data fields from upto four external Nintendo Wiimote
--   controllers.
--   
--   <pre>
--   kres  wiidata  kcontrol[, knum]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wiidata.html</a>
wiidata :: Sig -> Sig

-- | Sets scaling and range limits for certain Wiimote fields.
--   
--   <pre>
--   wiirange  icontrol, iminimum, imaximum[, inum]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wiirange.html</a>
wiirange :: D -> D -> D -> SE ()

-- | Sends data to one of a number of external Nintendo Wiimote
--   controllers.
--   
--   <pre>
--   kres  wiisend  kcontrol, kvalue[, knum]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wiisend.html</a>
wiisend :: Sig -> Sig -> Sig

-- | Sense the cursor position in an output window
--   
--   Sense the cursor position in an output window. When xyin is called the
--   position of the mouse within the output window is used to reply to the
--   request. This simple mechanism does mean that only one xyin can be
--   used accurately at once. The position of the mouse is reported in the
--   output window.
--   
--   <pre>
--   kx, ky  xyin  iprd, ixmin, ixmax, iymin, iymax [, ixinit] [, iyinit]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/xyin.html</a>
xyin :: D -> D -> D -> D -> D -> (Sig, Sig)

-- | Pops values from the global stack.
--   
--   <pre>
--   xval1, [xval2, ... , xval31]  pop  
--   ival1, [ival2, ... , ival31]  pop  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pop.html</a>
pop :: Tuple a => a

-- | Pops an f-sig frame from the global stack.
--   
--   <pre>
--   fsig  pop_f  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pop_f.html</a>
pop_f :: Spec

-- | Pushes a value into the global stack.
--   
--   <pre>
--   push   xval1, [xval2, ... , xval31]
--   push   ival1, [ival2, ... , ival31]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/push.html</a>
push :: [Sig] -> SE ()

-- | Pushes an f-sig frame into the global stack.
--   
--   <pre>
--   push_f   fsig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/push_f.html</a>
push_f :: Spec -> SE ()

-- | Initializes the stack.
--   
--   Initializes and sets the size of the global stack.
--   
--   <pre>
--   stack   iStackSize
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/stack.html</a>
stack :: D -> SE ()

-- | Creates and runs a numbered instrument instance.
--   
--   Creates an instance of another instrument and is used as if it were an
--   opcode.
--   
--   <pre>
--   a1, [...] [, a8]  subinstr  instrnum [, p4] [, p5] [...]
--   a1, [...] [, a8]  subinstr  "insname" [, p4] [, p5] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/subinstr.html</a>
subinstr :: Tuple a => D -> [D] -> a

-- | Creates and runs a numbered instrument instance at init-time.
--   
--   Same as subinstr, but init-time only and has no output arguments.
--   
--   <pre>
--   subinstrinit  instrnum [, p4] [, p5] [...]
--   subinstrinit  "insname" [, p4] [, p5] [...]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/subinstrinit.html</a>
subinstrinit :: D -> [D] -> SE ()

-- | Returns the number seconds since a base date.
--   
--   Returns the number seconds since a base date, using the operating
--   system's clock. The base is 1 January 1970 for Csound using doubles,
--   and 1 January 2010 for versions using floats.
--   
--   <pre>
--   ir  date  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/date.html</a>
date :: D

-- | Returns as a string the date and time specified.
--   
--   <pre>
--   Sir  dates  [ itime]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dates.html</a>
dates :: Str

-- | Reads the value of an internal clock.
--   
--   <pre>
--   ir  readclock  inum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/readclock.html</a>
readclock :: D -> D

-- | Read the real time clock from the operating system.
--   
--   Read the real-time clock from the operating system.
--   
--   <pre>
--   ires  rtclock  
--   kres  rtclock  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/rtclock.html</a>
rtclock :: Sig

-- | Read absolute time in k-rate cycles.
--   
--   Read absolute time, in k-rate cycles, since the start of an instance
--   of an instrument. Called at both i-time as well as k-time.
--   
--   <pre>
--   kres  timeinstk  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/timeinstk.html</a>
timeinstk :: Sig

-- | Read absolute time in seconds.
--   
--   Read absolute time, in seconds, since the start of an instance of an
--   instrument.
--   
--   <pre>
--   kres  timeinsts  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/timeinsts.html</a>
timeinsts :: Sig

-- | Read absolute time in k-rate cycles.
--   
--   Read absolute time, in k-rate cycles, since the start of the
--   performance.
--   
--   <pre>
--   ires  timek  
--   kres  timek  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/timek.html</a>
timek :: SE Sig

-- | Read absolute time in seconds.
--   
--   Read absolute time, in seconds, since the start of the performance.
--   
--   <pre>
--   ires  times  
--   kres  times  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/times.html</a>
times :: SE Sig

module Csound.Typed.Opcode.SignalModifiers

-- | Adjust one audio signal according to the values of another.
--   
--   The rms power of asig can be interrogated, set, or adjusted to match
--   that of a comparator signal.
--   
--   <pre>
--   ares  balance  asig, acomp [, ihp] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/balance.html</a>
balance :: Sig -> Sig -> Sig

-- | Clips a signal to a predefined limit.
--   
--   Clips an a-rate signal to a predefined limit, in a âsoftâ manner,
--   using one of three methods.
--   
--   <pre>
--   ares  clip  asig, imeth, ilimit [, iarg]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/clip.html</a>
clip :: Sig -> D -> D -> Sig

-- | Compress, limit, expand, duck or gate an audio signal.
--   
--   This unit functions as an audio compressor, limiter, expander, or
--   noise gate, using either soft-knee or hard-knee mapping, and with
--   dynamically variable performance characteristics. It takes two audio
--   input signals, aasig and acsig, the first of which is modified by a
--   running analysis of the second. Both signals can be the same, or the
--   first can be modified by a different controlling signal.
--   
--   <pre>
--   ar  compress  aasig, acsig, kthresh, kloknee, khiknee, kratio, katt, krel, ilook
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/compress.html</a>
compress :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> Sig

-- | A dynamic compressor/expander.
--   
--   This opcode dynamically modifies a gain value applied to the input
--   sound ain by comparing its power level to a given threshold level. The
--   signal will be compressed/expanded with different factors regarding
--   that it is over or under the threshold.
--   
--   <pre>
--   ares  dam  asig, kthreshold, icomp1, icomp2, irtime, iftime
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dam.html</a>
dam :: Sig -> Sig -> D -> D -> D -> D -> Sig

-- | Adjusts the amplitude audio signal according to a root-mean-square
--   value.
--   
--   <pre>
--   ares  gain  asig, krms [, ihp] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gain.html</a>
gain :: Sig -> Sig -> Sig

-- | Convolves a signal and an impulse response.
--   
--   Output is the convolution of signal ain and the impulse response
--   contained in ifilcod. If more than one output signal is supplied, each
--   will be convolved with the same impulse response. Note that it is
--   considerably more efficient to use one instance of the operator when
--   processing a mono input to create stereo, or quad, outputs.
--   
--   <pre>
--   ar1 [, ar2] [, ar3] [, ar4]  convolve  ain, ifilcod [, ichannel]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/convolve.html</a>
convolve :: Tuple a => Sig -> Str -> a

-- | Cross synthesis using FFT's.
--   
--   This is an implementation of cross synthesis using FFT's.
--   
--   <pre>
--   ares  cross2  ain1, ain2, isize, ioverlap, iwin, kbias
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cross2.html</a>
cross2 :: Sig -> Sig -> D -> D -> D -> Sig -> Sig

-- | A direct convolution opcode.
--   
--   <pre>
--   ares  dconv  asig, isize, ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dconv.html</a>
dconv :: Sig -> D -> Tab -> Sig

-- | Low latency multichannel convolution, using a function table as
--   impulse response source.
--   
--   Low latency multichannel convolution, using a function table as
--   impulse response source. The algorithm is to split the impulse
--   response to partitions of length determined by the iplen parameter,
--   and delay and mix partitions so that the original, full length impulse
--   response is reconstructed without gaps. The output delay (latency) is
--   iplen samples, and does not depend on the control rate, unlike in the
--   case of other convolve opcodes.
--   
--   <pre>
--   a1[, a2[, a3[, ... a8]]]  ftconv  ain, ift, iplen[, iskipsamples \
--             [, iirlen[, iskipinit]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ftconv.html</a>
ftconv :: Tuple a => Sig -> D -> D -> a

-- | Morphs between multiple ftables as specified in a list.
--   
--   Uses an index into a table of ftable numbers to morph between adjacent
--   tables in the list.This morphed function is written into the table
--   referenced by iresfn on every k-cycle.
--   
--   <pre>
--   ftmorf  kftndx, iftfn, iresfn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ftmorf.html</a>
ftmorf :: Sig -> Tab -> Tab -> SE ()

-- | Convolution based on a uniformly partitioned overlap-save algorithm
--   
--   Convolution based on a uniformly partitioned overlap-save algorithm.
--   Compared to the convolve opcode, pconvolve has these benefits:
--   
--   <pre>
--   ar1 [, ar2] [, ar3] [, ar4]  pconvolve  ain, ifilcod [, ipartitionsize, ichannel]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pconvolve.html</a>
pconvolve :: Tuple a => Sig -> Str -> a

-- | Delays an input signal by some time interval.
--   
--   A signal can be read from or written into a delay path, or it can be
--   automatically delayed by some time interval.
--   
--   <pre>
--   ares  delay  asig, idlt [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/delay.html</a>
delay :: Sig -> D -> Sig

-- | Delays an input signal by one sample.
--   
--   <pre>
--   ares  delay1  asig [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/delay1.html</a>
delay1 :: Sig -> Sig

-- | Delays an input signal by some time interval.
--   
--   k-rate delay opcodes
--   
--   <pre>
--   kr  delayk   ksig, idel[, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/delayk.html</a>
delayk :: Sig -> D -> Sig

-- | Delays an input signal by some time interval.
--   
--   k-rate delay opcodes
--   
--   <pre>
--   kr  vdel_k   ksig, kdel, imdel[, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/delayk.html</a>
vdel_k :: Sig -> Sig -> D -> Sig

-- | Reads from an automatically established digital delay line.
--   
--   <pre>
--   ares  delayr  idlt [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/delayr.html</a>
delayr :: D -> SE Sig

-- | Writes the audio signal to a digital delay line.
--   
--   <pre>
--   delayw  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/delayw.html</a>
delayw :: Sig -> SE ()

-- | Taps a delay line at variable offset times.
--   
--   Tap a delay line at variable offset times.
--   
--   <pre>
--   ares  deltap  kdlt
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/deltap.html</a>
deltap :: Sig -> SE Sig

-- | Taps a delay line at variable offset times, uses cubic interpolation.
--   
--   <pre>
--   ares  deltap3  xdlt
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/deltap3.html</a>
deltap3 :: Sig -> SE Sig

-- | Taps a delay line at variable offset times, uses interpolation.
--   
--   <pre>
--   ares  deltapi  xdlt
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/deltapi.html</a>
deltapi :: Sig -> SE Sig

-- | Taps a delay line at variable offset times.
--   
--   Tap a delay line at variable offset times.
--   
--   <pre>
--   ares  deltapn  xnumsamps
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/deltapn.html</a>
deltapn :: Sig -> Sig

-- | Read from or write to a delay line with interpolation.
--   
--   deltapx is similar to deltapi or deltap3. However, it allows higher
--   quality interpolation. This opcode can read from and write to a
--   delayr/delayw delay line with interpolation.
--   
--   <pre>
--   aout  deltapx  adel, iwsize
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/deltapx.html</a>
deltapx :: Sig -> D -> SE Sig

-- | Mixes the input signal to a delay line.
--   
--   deltapxw mixes the input signal to a delay line. This opcode can be
--   mixed with reading units (deltap, deltapn, deltapi, deltap3, and
--   deltapx) in any order; the actual delay time is the difference of the
--   read and write time. This opcode can read from and write to a
--   delayr/delayw delay line with interpolation.
--   
--   <pre>
--   deltapxw  ain, adel, iwsize
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/deltapxw.html</a>
deltapxw :: Sig -> Sig -> D -> SE ()

-- | Multitap delay line implementation.
--   
--   <pre>
--   ares  multitap  asig [, itime1, igain1] [, itime2, igain2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/multitap.html</a>
multitap :: Sig -> [D] -> Sig

-- | An interpolating variable time delay.
--   
--   This is an interpolating variable time delay, it is not very different
--   from the existing implementation (deltapi), it is only easier to use.
--   
--   <pre>
--   ares  vdelay  asig, adel, imaxdel [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdelay.html</a>
vdelay :: Sig -> Sig -> D -> Sig

-- | A variable time delay with cubic interpolation.
--   
--   vdelay3 is experimental. It is the same as vdelay except that it uses
--   cubic interpolation. (New in Version 3.50.)
--   
--   <pre>
--   ares  vdelay3  asig, adel, imaxdel [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdelay3.html</a>
vdelay3 :: Sig -> Sig -> D -> Sig

-- | A variable delay opcode with high quality interpolation.
--   
--   <pre>
--   aout  vdelayx  ain, adl, imd, iws [, ist]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdelayx.html</a>
vdelayx :: Sig -> Sig -> D -> D -> Sig

-- | A 4-channel variable delay opcode with high quality interpolation.
--   
--   <pre>
--   aout1, aout2, aout3, aout4  vdelayxq  ain1, ain2, ain3, ain4, adl, imd, iws [, ist]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdelayxq.html</a>
vdelayxq :: Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> (Sig, Sig, Sig, Sig)

-- | A stereo variable delay opcode with high quality interpolation.
--   
--   <pre>
--   aout1, aout2  vdelayxs  ain1, ain2, adl, imd, iws [, ist]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdelayxs.html</a>
vdelayxs :: Sig -> Sig -> Sig -> D -> D -> (Sig, Sig)

-- | Variable delay opcodes with high quality interpolation.
--   
--   <pre>
--   aout  vdelayxw  ain, adl, imd, iws [, ist]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdelayxw.html</a>
vdelayxw :: Sig -> Sig -> D -> D -> Sig

-- | Variable delay opcodes with high quality interpolation.
--   
--   <pre>
--   aout1, aout2, aout3, aout4  vdelayxwq  ain1, ain2, ain3, ain4, adl, \
--             imd, iws [, ist]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdelayxwq.html</a>
vdelayxwq :: Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> (Sig, Sig, Sig, Sig)

-- | Variable delay opcodes with high quality interpolation.
--   
--   <pre>
--   aout1, aout2  vdelayxws  ain1, ain2, adl, imd, iws [, ist]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vdelayxws.html</a>
vdelayxws :: Sig -> Sig -> Sig -> D -> D -> (Sig, Sig)

-- | Deprecated. Decodes an ambisonic B format signal.
--   
--   Decodes an ambisonic B format signal into loudspeaker specific
--   signals. Note that this opcode is deprecated as it is inaccurate, and
--   is replaced by the much better opcode bformdec1 which replicates all
--   the important features.
--   
--   <pre>
--   ao1, ao2  bformdec  isetup, aw, ax, ay, az [, ar, as, at, au, av \
--             [, abk, al, am, an, ao, ap, aq]]
--   ao1, ao2, ao3, ao4  bformdec  isetup, aw, ax, ay, az [, ar, as, at, \
--             au, av [, abk, al, am, an, ao, ap, aq]]
--   ao1, ao2, ao3, ao4, ao5  bformdec  isetup, aw, ax, ay, az [, ar, as, \
--             at, au, av [, abk, al, am, an, ao, ap, aq]]
--   ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8  bformdec  isetup, aw, ax, ay, az \
--             [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/bformdec.html</a>
bformdec :: Tuple a => D -> Sig -> Sig -> Sig -> Sig -> a

-- | Decodes an ambisonic B format signal
--   
--   Decodes an ambisonic B format signal into loudspeaker specific
--   signals.
--   
--   <pre>
--   ao1, ao2  bformdec1  isetup, aw, ax, ay, az [, ar, as, at, au, av \
--             [, abk, al, am, an, ao, ap, aq]]
--   ao1, ao2, ao3, ao4  bformdec1  isetup, aw, ax, ay, az [, ar, as, at, \
--             au, av [, abk, al, am, an, ao, ap, aq]]
--   ao1, ao2, ao3, ao4, ao5  bformdec1  isetup, aw, ax, ay, az [, ar, as, \
--             at, au, av [, abk, al, am, an, ao, ap, aq]]
--   ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8  bformdec1  isetup, aw, ax, ay, az \
--             [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/bformdec1.html</a>
bformdec1 :: Tuple a => D -> Sig -> Sig -> Sig -> Sig -> a

-- | Deprecated. Codes a signal into the ambisonic B format.
--   
--   Codes a signal into the ambisonic B format. Note that this opcode is
--   deprecated as it is inaccurate, and is replaced by the much better
--   opcode bformenc1 which replicates all the important features; also
--   note that the gain arguments are not available in bformenc1.
--   
--   <pre>
--   aw, ax, ay, az  bformenc  asig, kalpha, kbeta, kord0, kord1
--   aw, ax, ay, az, ar, as, at, au, av  bformenc  asig, kalpha, kbeta, \
--             kord0, kord1 , kord2
--   aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq  bformenc  \
--             asig, kalpha, kbeta, kord0, kord1, kord2, kord3
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/bformenc.html</a>
bformenc :: Tuple a => Sig -> Sig -> Sig -> Sig -> Sig -> a

-- | Codes a signal into the ambisonic B format.
--   
--   Codes a signal into the ambisonic B format
--   
--   <pre>
--   aw, ax, ay, az  bformenc1  asig, kalpha, kbeta
--   aw, ax, ay, az, ar, as, at, au, av  bformenc1  asig, kalpha, kbeta
--   aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq  bformenc1  \
--             asig, kalpha, kbeta
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/bformenc1.html</a>
bformenc1 :: Tuple a => Sig -> Sig -> Sig -> a

-- | Generates 3D binaural audio with high-fidelity early reflections in a
--   parametric room using a Phase Truncation algorithm.
--   
--   This opcode essentially nests the hrtfmove opcode in an image model
--   for a user-definable shoebox-shaped room. A default room can be
--   selected, or advanced room parameters can be used. Room surfaces can
--   be controlled with high and low-frequency absorption coefficients and
--   gain factors of a three-band equaliser.
--   
--   <pre>
--   aleft, aright, irt60low, irt60high, imfp  hrtfearly  asrc, ksrcx, ksrcy, ksrcz, klstnrx, klstnry, klstnrz, \
--             ifilel, ifiler, idefroom [,ifade, isr, iorder, ithreed, kheadrot, iroomx, iroomy, iroomz, iwallhigh, \
--             iwalllow, iwallgain1, iwallgain2, iwallgain3, ifloorhigh, ifloorlow, ifloorgain1, ifloorgain2, \
--             ifloorgain3, iceilinghigh, iceilinglow, iceilinggain1, iceilinggain2, iceilinggain3]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hrtfearly.html</a>
hrtfearly :: Tuple a => Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> D -> a

-- | Generates dynamic 3d binaural audio for headphones using magnitude
--   interpolation and phase truncation.
--   
--   This opcode takes a source signal and spatialises it in the 3
--   dimensional space around a listener by convolving the source with
--   stored head related transfer function (HRTF) based filters.
--   
--   <pre>
--   aleft, aright  hrtfmove  asrc, kAz, kElev, ifilel, ifiler [, imode, ifade, isr]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hrtfmove.html</a>
hrtfmove :: Sig -> Sig -> Sig -> D -> D -> (Sig, Sig)

-- | Generates dynamic 3d binaural audio for headphones using a Woodworth
--   based spherical head model with improved low frequency phase accuracy.
--   
--   This opcode takes a source signal and spatialises it in the 3
--   dimensional space around a listener using head related transfer
--   function (HRTF) based filters.
--   
--   <pre>
--   aleft, aright  hrtfmove2  asrc, kAz, kElev, ifilel, ifiler [,ioverlap, iradius, isr]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hrtfmove2.html</a>
hrtfmove2 :: Sig -> Sig -> Sig -> D -> D -> (Sig, Sig)

-- | A binaural, dynamic FDN based diffuse-field reverberator. The opcode
--   works independently as an efficient, flexible reverberator.
--   
--   A frequency-dependent, efficient reverberant field is created based on
--   low and high frequency desired reverb times. The opcode is designed to
--   work with hrtfearly, ideally using its outputs as inputs. However,
--   hrtfreverb can be used as a standalone tool. Stability is enforced.
--   
--   <pre>
--   aleft, aright, idel  hrtfreverb  asrc, ilowrt60, ihighrt60, ifilel, ifiler [,isr, imfp, iorder]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hrtfreverb.html</a>
hrtfreverb :: Sig -> D -> D -> D -> D -> (Sig, Sig, D)

-- | Generates static 3d binaural audio for headphones using a Woodworth
--   based spherical head model with improved low frequency phase accuracy.
--   
--   This opcode takes a source signal and spatialises it in the 3
--   dimensional space around a listener using head related transfer
--   function (HRTF) based filters. It produces a static output (azimuth
--   and elevation parameters are i-rate), because a static source allows
--   much more efficient processing than hrtfmove and hrtfmove2,.
--   
--   <pre>
--   aleft, aright  hrtfstat  asrc, iAz, iElev, ifilel, ifiler [,iradius, isr]
--   
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hrtfstat.html</a>
hrtfstat :: Sig -> D -> D -> D -> D -> (Sig, Sig)

-- | Distributes the audio signals of a previous locsig opcode.
--   
--   locsend depends upon the existence of a previously defined locsig. The
--   number of output signals must match the number in the previous locsig.
--   The output signals from locsend are derived from the values given for
--   distance and reverb in the locsig and are ready to be sent to local or
--   global reverb units (see example below). The reverb amount and the
--   balance between the 2 or 4 channels are calculated in the same way as
--   described in the Dodge book (an essential text!).
--   
--   <pre>
--   a1, a2  locsend  
--   a1, a2,  a3, a4  locsend  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/locsend.html</a>
locsend :: (Sig, Sig, Sig, Sig)

-- | Takes an input signal and distributes between 2 or 4 channels.
--   
--   locsig takes an input signal and distributes it among 2 or 4 channels
--   using values in degrees to calculate the balance between adjacent
--   channels. It also takes arguments for distance (used to attenuate
--   signals that are to sound as if they are some distance further than
--   the loudspeaker itself), and for the amount the signal that will be
--   sent to reverberators. This unit is based upon the example in the
--   Charles Dodge/Thomas Jerse book, Computer Music, page 320.
--   
--   <pre>
--   a1, a2  locsig  asig, kdegree, kdistance, kreverbsend
--   a1, a2,  a3, a4  locsig  asig, kdegree, kdistance, kreverbsend
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/locsig.html</a>
locsig :: Sig -> Sig -> Sig -> Sig -> (Sig, Sig, Sig, Sig)

-- | Distribute an audio signal amongst four channels.
--   
--   Distribute an audio signal amongst four channels with localization
--   control.
--   
--   <pre>
--   a1, a2, a3, a4  pan  asig, kx, ky, ifn [, imode] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pan.html</a>
pan :: Sig -> Sig -> Sig -> Tab -> (Sig, Sig, Sig, Sig)

-- | Distribute an audio signal across two channels.
--   
--   Distribute an audio signal across two channels with a choice of
--   methods.
--   
--   <pre>
--   a1, a2  pan2  asig, xp [, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pan2.html</a>
pan2 :: Sig -> Sig -> (Sig, Sig)

-- | Distributes an input signal among 4 channels using cartesian
--   coordinates.
--   
--   space takes an input signal and distributes it among 4 channels using
--   Cartesian xy coordinates to calculate the balance of the outputs. The
--   xy coordinates can be defined in a separate text file and accessed
--   through a Function statement in the score using Gen28, or they can be
--   specified using the optional kx, ky arguments. The advantages to the
--   former are:
--   
--   <pre>
--   a1, a2, a3, a4   space  asig, ifn, ktime, kreverbsend, kx, ky
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/space.html</a>
space :: Sig -> Tab -> Sig -> Sig -> Sig -> Sig -> (Sig, Sig, Sig, Sig)

-- | Positions the input sound in a 3D space and allows moving the sound at
--   k-rate.
--   
--   This opcode positions the input sound in a 3D space, with optional
--   simulation of room acoustics, in various output formats. spat3d allows
--   moving the sound at k-rate (this movement is interpolated internally
--   to eliminate "zipper noise" if sr not equal to kr).
--   
--   <pre>
--   aW, aX, aY, aZ  spat3d  ain, kX, kY, kZ, idist, ift, imode, imdel, iovr [, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/spat3d.html</a>
spat3d :: Sig -> Sig -> Sig -> Sig -> D -> D -> D -> D -> D -> (Sig, Sig, Sig, Sig)

-- | Positions the input sound in a 3D space with the sound source position
--   set at i-time.
--   
--   This opcode positions the input sound in a 3D space, with optional
--   simulation of room acoustics, in various output formats. With spat3di,
--   sound source position is set at i-time.
--   
--   <pre>
--   aW, aX, aY, aZ  spat3di  ain, iX, iY, iZ, idist, ift, imode [, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/spat3di.html</a>
spat3di :: Sig -> D -> D -> D -> D -> D -> D -> (Sig, Sig, Sig, Sig)

-- | Can be used to render an impulse response for a 3D space at i-time.
--   
--   This opcode positions the input sound in a 3D space, with optional
--   simulation of room acoustics, in various output formats. spat3dt can
--   be used to render the impulse response at i-time, storing output in a
--   function table, suitable for convolution.
--   
--   <pre>
--   spat3dt  ioutft, iX, iY, iZ, idist, ift, imode, irlen [, iftnocl]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/spat3dt.html</a>
spat3dt :: D -> D -> D -> D -> D -> D -> D -> D -> SE ()

-- | Calculates distance values from xy coordinates.
--   
--   spdist uses the same xy data as space, also either from a text file
--   using Gen28 or from x and y arguments given to the unit directly. The
--   purpose of this unit is to make available the values for distance that
--   are calculated from the xy coordinates.
--   
--   <pre>
--   k1  spdist  ifn, ktime, kx, ky
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/spdist.html</a>
spdist :: Tab -> Sig -> Sig -> Sig -> Sig

-- | Generates output signals based on a previously defined space opcode.
--   
--   spsend depends upon the existence of a previously defined space. The
--   output signals from spsend are derived from the values given for xy
--   and reverb in the space and are ready to be sent to local or global
--   reverb units (see example below).
--   
--   <pre>
--   a1, a2, a3, a4  spsend  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/spsend.html</a>
spsend :: (Sig, Sig, Sig, Sig)

-- | Distributes an audio signal among many channels.
--   
--   Distributes an audio signal amongmany channels, up to 64.
--   
--   <pre>
--   ar1[, ar2...]  vbap  asig, kazim [,
--           kelev] [, kspread] [, ilayout]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbap.html</a>
vbap :: Tuple a => Sig -> Sig -> a

-- | Distributes an audio signal among 16 channels.
--   
--   <pre>
--   ar1, ..., ar16  vbap16  asig, kazim [, kelev] [, kspread]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbap16.html</a>
vbap16 :: Tuple a => Sig -> Sig -> a

-- | Distribute an audio signal among 16 channels with moving virtual
--   sources.
--   
--   <pre>
--   ar1, ..., ar16  vbap16move  asig, idur, ispread, ifldnum, ifld1 \
--             [, ifld2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbap16move.html</a>
vbap16move :: Tuple a => Sig -> D -> D -> D -> [D] -> a

-- | Distributes an audio signal among 4 channels.
--   
--   <pre>
--   ar1, ar2, ar3, ar4  vbap4  asig, kazim [, kelev] [, kspread]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbap4.html</a>
vbap4 :: Sig -> Sig -> (Sig, Sig, Sig, Sig)

-- | Distributes an audio signal among 4 channels with moving virtual
--   sources.
--   
--   <pre>
--   ar1, ar2, ar3, ar4  vbap4move  asig, idur, ispread, ifldnum, ifld1 \
--             [, ifld2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbap4move.html</a>
vbap4move :: Tuple a => Sig -> D -> D -> D -> [D] -> a

-- | Distributes an audio signal among 8 channels.
--   
--   <pre>
--   ar1, ..., ar8  vbap8  asig, kazim [, kelev] [, kspread]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbap8.html</a>
vbap8 :: Tuple a => Sig -> Sig -> a

-- | Distributes an audio signal among 8 channels with moving virtual
--   sources.
--   
--   <pre>
--   ar1, ..., ar8  vbap8move  asig, idur, ispread, ifldnum, ifld1 \
--             [, ifld2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbap8move.html</a>
vbap8move :: Tuple a => Sig -> D -> D -> D -> [D] -> a

-- | Calculates the gains for a sound location between multiple channels.
--   
--   Calculates the gains for a sound location for up to 64.
--   
--   <pre>
--   k1[, k2...]  vbapg  kazim [,kelev] [, kspread] [, ilayout]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbapg.html</a>
vbapg :: Tuple a => Sig -> a

-- | Configures VBAP output according to loudspeaker parameters.
--   
--   <pre>
--   vbaplsinit  idim, ilsnum [, idir1] [, idir2] [...] [, idir32]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbaplsinit.html</a>
vbaplsinit :: D -> D -> SE ()

-- | Distributes an audio signal among many channels with moving virtual
--   sources.
--   
--   Distributes an audio signal among upto 64 channels with moving virtual
--   sources.
--   
--   <pre>
--   ar1[, ar2...]  vbapmove  asig, idur, ispread, ifldnum, ifld1 \
--             [, ifld2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbapmove.html</a>
vbapmove :: Tuple a => Sig -> D -> D -> D -> [D] -> a

-- | Writes a multi-channel audio signal to a ZAK array.
--   
--   <pre>
--   vbapz  inumchnls, istartndx, asig, kazim [, kelev] [, kspread]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbapz.html</a>
vbapz :: D -> D -> Sig -> Sig -> SE ()

-- | Writes a multi-channel audio signal to a ZAK array with moving virtual
--   sources.
--   
--   <pre>
--   vbapzmove  inumchnls, istartndx, asig, idur, ispread, ifldnum, ifld1, \
--            ifld2, [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vbapzmove.html</a>
vbapzmove :: Sig -> D -> D -> D -> [D] -> SE ()

-- | Reverberates an input signal with a flat frequency response.
--   
--   <pre>
--   ares  alpass  asig, krvt, ilpt [, iskip] [, insmps]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/alpass.html</a>
alpass :: Sig -> Sig -> D -> Sig

-- | A physical model reverberator.
--   
--   babo stands for ball-within-the-box. It is a physical model
--   reverberator based on the paper by Davide Rocchesso "The Ball within
--   the Box: a sound-processing metaphor", Computer Music Journal, Vol 19,
--   N.4, pp.45-47, Winter 1995.
--   
--   <pre>
--   a1, a2  babo  asig, ksrcx, ksrcy, ksrcz, irx, iry, irz [, idiff] [, ifno]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/babo.html</a>
babo :: Sig -> Sig -> Sig -> Sig -> D -> D -> D -> (Sig, Sig)

-- | Reverberates an input signal with a âcoloredâ frequency response.
--   
--   <pre>
--   ares  comb  asig, krvt, ilpt [, iskip] [, insmps]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/comb.html</a>
comb :: Sig -> Sig -> D -> Sig

-- | Reverberates an input signal with a âcoloredâ frequency response.
--   
--   Reverberates an input signal with a âcoloredâ frequency response
--   with a FIR filter.
--   
--   <pre>
--   ares  combinv  asig, krvt, ilpt [, iskip] [, insmps]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/combinv.html</a>
combinv :: Sig -> Sig -> D -> Sig

-- | Opcode version of Jezar's Freeverb
--   
--   freeverb is a stereo reverb unit based on Jezar's public domain C++
--   sources, composed of eight parallel comb filters on both channels,
--   followed by four allpass units in series. The filters on the right
--   channel are slightly detuned compared to the left channel in order to
--   create a stereo effect.
--   
--   <pre>
--   aoutL, aoutR  freeverb  ainL, ainR, kRoomSize, kHFDamp[, iSRate[, iSkip]] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/freeverb.html</a>
freeverb :: Sig -> Sig -> Sig -> Sig -> (Sig, Sig)

-- | Three different nested all-pass filters.
--   
--   Three different nested all-pass filters, useful for implementing
--   reverbs.
--   
--   <pre>
--   ares  nestedap  asig, imode, imaxdel, idel1, igain1 [, idel2] [, igain2] \
--             [, idel3] [, igain3] [, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/nestedap.html</a>
nestedap :: Sig -> D -> D -> D -> D -> Sig

-- | A reverberator consisting of 6 parallel comb-lowpass filters.
--   
--   This is a reverberator consisting of 6 parallel comb-lowpass filters
--   being fed into a series of 5 allpass filters. nreverb replaces reverb2
--   (version 3.48) and so both opcodes are identical.
--   
--   <pre>
--   ares  nreverb  asig, ktime, khdif [, iskip] [,inumCombs] [, ifnCombs] \
--             [, inumAlpas] [, ifnAlpas]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/nreverb.html</a>
nreverb :: Sig -> Sig -> Sig -> Sig

-- | Models the reverberation of a metal plate.
--   
--   Models the reverberation of a rectangular metal plate with settable
--   physical characteristics when excited by audio signal(s).
--   
--   <pre>
--   a1[, a2, ...]  platerev  itabexcite. itabouts, kbndry, iaspect, istiff, idecay, iloss, aexcite1[, aexcite2, ...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/platerev.html</a>
platerev :: Tuple a => D -> D -> Sig -> D -> D -> D -> D -> [Sig] -> a

-- | Reverberates an input signal with a ânatural roomâ frequency
--   response.
--   
--   <pre>
--   ares  reverb  asig, krvt [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/reverb.html</a>
reverb :: Sig -> Sig -> Sig

-- | Same as the nreverb opcode.
--   
--   <pre>
--   ares  reverb2  asig, ktime, khdif [, iskip] [,inumCombs] \
--             [, ifnCombs] [, inumAlpas] [, ifnAlpas]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/reverb2.html</a>
reverb2 :: Sig -> Sig -> Sig -> Sig

-- | 8 delay line stereo FDN reverb, based on work by Sean Costello
--   
--   8 delay line stereo FDN reverb, with feedback matrix based upon
--   physical modeling scattering junction of 8 lossless waveguides of
--   equal characteristic impedance. Based on Csound orchestra version by
--   Sean Costello.
--   
--   <pre>
--   aoutL, aoutR  reverbsc  ainL, ainR, kfblvl, kfco[, israte[, ipitchm[, iskip]]] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/reverbsc.html</a>
reverbsc :: Sig -> Sig -> Sig -> Sig -> (Sig, Sig)

-- | Variably reverberates an input signal with a flat frequency response.
--   
--   <pre>
--   ares  valpass  asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/valpass.html</a>
valpass :: Sig -> Sig -> Sig -> D -> Sig

-- | Variably reverberates an input signal with a âcoloredâ frequency
--   response.
--   
--   <pre>
--   ares  vcomb  asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vcomb.html</a>
vcomb :: Sig -> Sig -> Sig -> D -> Sig

-- | Mixes low level noise to a list of a-rate signals
--   
--   Mixes low level (~1e-20 for floats, and ~1e-56 for doubles) noise to a
--   list of a-rate signals. Can be used before IIR filters and reverbs to
--   avoid denormalized numbers which may otherwise result in significantly
--   increased CPU usage.
--   
--   <pre>
--   denorm  a1[, a2[, a3[, ... ]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/denorm.html</a>
denorm :: [Sig] -> SE ()

-- | Modify a signal by differentiation.
--   
--   <pre>
--   ares  diff  asig [, iskip]
--   kres  diff  ksig [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/diff.html</a>
diff :: Sig -> Sig

-- | Modify a signal by down-sampling.
--   
--   <pre>
--   kres  downsamp  asig [, iwlen]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/downsamp.html</a>
downsamp :: Sig -> Sig

-- | Adds artificial foldover to an audio signal.
--   
--   <pre>
--   ares  fold  asig, kincr
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fold.html</a>
fold :: Sig -> Sig -> Sig

-- | Modify a signal by integration.
--   
--   <pre>
--   ares  integ  asig [, iskip]
--   kres  integ  ksig [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/integ.html</a>
integ :: Sig -> Sig

-- | Converts a control signal to an audio signal using linear
--   interpolation.
--   
--   <pre>
--   ares  interp  ksig [, iskip] [, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/interp.html</a>
interp :: Sig -> Sig

-- | Calculates the weighted mean value of two input signals.
--   
--   Calculates the weighted mean value (i.e. linear interpolation) of two
--   input signals
--   
--   <pre>
--   ares  ntrpol  asig1, asig2, kpoint [, imin] [, imax]
--   ires  ntrpol  isig1, isig2, ipoint [, imin] [, imax]
--   kres  ntrpol  ksig1, ksig2, kpoint [, imin] [, imax]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ntrpol.html</a>
ntrpol :: Sig -> Sig -> Sig -> Sig

-- | Performs a sample-and-hold operation on its input.
--   
--   <pre>
--   ares  samphold  asig, agate [, ival] [, ivstor]
--   kres  samphold  ksig, kgate [, ival] [, ivstor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/samphold.html</a>
samphold :: Sig -> Sig -> Sig

-- | Modify a signal by up-sampling.
--   
--   <pre>
--   ares  upsamp  ksig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/upsamp.html</a>
upsamp :: Sig -> Sig

-- | Access values of the current buffer of an a-rate variable by indexing.
--   
--   Access values of the current buffer of an a-rate variable by indexing.
--   Useful for doing sample-by-sample manipulation at k-rate without using
--   setksmps 1.
--   
--   <pre>
--   kval  vaget  kndx, avar
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vaget.html</a>
vaget :: Sig -> Sig -> Sig

-- | Write value of into the current buffer of an a-rate variable by index.
--   
--   Write values into the current buffer of an a-rate variable at the
--   given index. Useful for doing sample-by-sample manipulation at k-rate
--   without using setksmps 1.
--   
--   <pre>
--   vaset  kval, kndx, avar
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vaset.html</a>
vaset :: Sig -> Sig -> Sig -> SE ()

-- | Sets the lower and upper limits of the value it processes.
--   
--   <pre>
--   ares  limit  asig, klow, khigh
--   ires  limit  isig, ilow, ihigh
--   kres  limit  ksig, klow, khigh
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/limit.html</a>
limit :: Sig -> Sig -> Sig -> Sig

-- | Reflects the signal that exceeds the low and high thresholds.
--   
--   <pre>
--   ares  mirror  asig, klow, khigh
--   ires  mirror  isig, ilow, ihigh
--   kres  mirror  ksig, klow, khigh
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mirror.html</a>
mirror :: Sig -> Sig -> Sig -> Sig

-- | Wraps-around the signal that exceeds the low and high thresholds.
--   
--   <pre>
--   ares  wrap  asig, klow, khigh
--   ires  wrap  isig, ilow, ihigh
--   kres  wrap  ksig, klow, khigh
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wrap.html</a>
wrap :: Sig -> Sig -> Sig -> Sig

-- | Distort an audio signal via waveshaping and optional clipping.
--   
--   <pre>
--   ar  distort  asig, kdist, ifn[, ihp, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/distort.html</a>
distort :: Sig -> Sig -> Tab -> Sig

-- | Modified hyperbolic tangent distortion.
--   
--   Implementation of modified hyperbolic tangent distortion. distort1 can
--   be used to generate wave shaping distortion based on a modification of
--   the tanh function.
--   
--   <pre>
--   ares  distort1  asig, kpregain, kpostgain, kshape1, kshape2[, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/distort1.html</a>
distort1 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | A user controlled flanger.
--   
--   <pre>
--   ares  flanger  asig, adel, kfeedback [, imaxd]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/flanger.html</a>
flanger :: Sig -> Sig -> Sig -> Sig

-- | Analyze an audio input and generate harmonizing voices in synchrony.
--   
--   <pre>
--   ares  harmon  asig, kestfrq, kmaxvar, kgenfreq1, kgenfreq2, imode, \
--             iminfrq, iprd
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/harmon.html</a>
harmon :: Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> D -> Sig

-- | Analyze an audio input and generate harmonizing voices in synchrony
--   with formants preserved.
--   
--   Generate harmonizing voices with formants preserved.
--   
--   <pre>
--   ares  harmon2  asig, koct, kfrq1, kfrq2, icpsmode, ilowest[, ipolarity]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/harmon2.html</a>
harmon2 :: Sig -> Sig -> Sig -> Sig -> D -> D -> Sig

-- | Analyze an audio input and generate harmonizing voices in synchrony
--   with formants preserved.
--   
--   Generate harmonizing voices with formants preserved.
--   
--   <pre>
--   ares  harmon3  asig, koct, kfrq1, \
--           kfrq2, kfrq3, icpsmode, ilowest[, ipolarity]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/harmon2.html</a>
harmon3 :: Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> Sig

-- | Analyze an audio input and generate harmonizing voices in synchrony
--   with formants preserved.
--   
--   Generate harmonizing voices with formants preserved.
--   
--   <pre>
--   ares  harmon4  asig, koct, kfrq1, \
--           kfrq2, kfrq3, kfrq4, icpsmode, ilowest[, ipolarity]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/harmon2.html</a>
harmon4 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> Sig

-- | First-order allpass filters arranged in a series.
--   
--   An implementation of iord number of first-order allpass filters in
--   series.
--   
--   <pre>
--   ares  phaser1  asig, kfreq, kord, kfeedback [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/phaser1.html</a>
phaser1 :: Sig -> Sig -> Sig -> Sig -> Sig

-- | Second-order allpass filters arranged in a series.
--   
--   An implementation of iord number of second-order allpass filters in
--   series.
--   
--   <pre>
--   ares  phaser2  asig, kfreq, kq, kord, kmode, ksep, kfeedback
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/phaser2.html</a>
phaser2 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | A hi-pass filter whose transfer functions are the complements of the
--   tone opcode.
--   
--   <pre>
--   ares  atone  asig, khp [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/atone.html</a>
atone :: Sig -> Sig -> Sig

-- | Emulates a stack of filters using the atone opcode.
--   
--   atonex is equivalent to a filter consisting of more layers of atone
--   with the same arguments, serially connected. Using a stack of a larger
--   number of filters allows a sharper cutoff. They are faster than using
--   a larger number instances in a Csound orchestra of the old opcodes,
--   because only one initialization and k- cycle are needed at time and
--   the audio loop falls entirely inside the cache memory of processor.
--   
--   <pre>
--   ares  atonex  asig, khp [, inumlayer] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/atonex.html</a>
atonex :: Sig -> Sig -> Sig

-- | A sweepable general purpose biquadratic digital filter.
--   
--   <pre>
--   ares  biquad  asig, kb0, kb1, kb2, ka0, ka1, ka2 [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/biquad.html</a>
biquad :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | A sweepable general purpose biquadratic digital filter with a-rate
--   parameters.
--   
--   A sweepable general purpose biquadratic digital filter.
--   
--   <pre>
--   ares  biquada  asig, ab0, ab1, ab2, aa0, aa1, aa2 [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/biquada.html</a>
biquada :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Same as the butterbp opcode.
--   
--   <pre>
--   ares  butbp  asig, kfreq, kband [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/butbp.html</a>
butbp :: Sig -> Sig -> Sig -> Sig

-- | Same as the butterbr opcode.
--   
--   <pre>
--   ares  butbr  asig, kfreq, kband [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/butbr.html</a>
butbr :: Sig -> Sig -> Sig -> Sig

-- | Same as the butterhp opcode.
--   
--   <pre>
--   ares  buthp  asig, kfreq [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/buthp.html</a>
buthp :: Sig -> Sig -> Sig

-- | Same as the butterlp opcode.
--   
--   <pre>
--   ares  butlp  asig, kfreq [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/butlp.html</a>
butlp :: Sig -> Sig -> Sig

-- | A band-pass Butterworth filter.
--   
--   Implementation of a second-order band-pass Butterworth filter. This
--   opcode can also be written as butbp.
--   
--   <pre>
--   ares  butterbp  asig, kfreq, kband [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/butterbp.html</a>
butterbp :: Sig -> Sig -> Sig -> Sig

-- | A band-reject Butterworth filter.
--   
--   Implementation of a second-order band-reject Butterworth filter. This
--   opcode can also be written as butbr.
--   
--   <pre>
--   ares  butterbr  asig, kfreq, kband [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/butterbr.html</a>
butterbr :: Sig -> Sig -> Sig -> Sig

-- | A high-pass Butterworth filter.
--   
--   Implementation of second-order high-pass Butterworth filter. This
--   opcode can also be written as buthp.
--   
--   <pre>
--   ares  butterhp  asig, kfreq [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/butterhp.html</a>
butterhp :: Sig -> Sig -> Sig

-- | A low-pass Butterworth filter.
--   
--   Implementation of a second-order low-pass Butterworth filter. This
--   opcode can also be written as butlp.
--   
--   <pre>
--   ares  butterlp  asig, kfreq [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/butterlp.html</a>
butterlp :: Sig -> Sig -> Sig

-- | Implements low-pass and high-pass filters of different styles.
--   
--   Implements the classical standard analog filter types: low-pass and
--   high-pass. They are implemented with the four classical kinds of
--   filters: Butterworth, Chebyshev Type I, Chebyshev Type II, and
--   Elliptical. The number of poles may be any even number from 2 to 80.
--   
--   <pre>
--   ares  clfilt  asig, kfreq, itype, inpol [, ikind] [, ipbr] [, isba] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/clfilt.html</a>
clfilt :: Sig -> Sig -> D -> D -> Sig

-- | A fast and robust method for approximating sound propagation,
--   achieving convincing Doppler shifts without having to solve equations.
--   
--   A fast and robust method for approximating sound propagation,
--   achieving convincing Doppler shifts without having to solve equations.
--   The method computes frequency shifts based on reading an input delay
--   line at a delay time computed from the distance between source and mic
--   and the speed of sound. One instance of the opcode is required for
--   each dimension of space through which the sound source moves. If the
--   source sound moves at a constant speed from in front of the
--   microphone, through the microphone, to behind the microphone, then the
--   output will be frequency shifted above the source frequency at a
--   constant frequency while the source approaches, then discontinuously
--   will be shifted below the source frequency at a constant frequency as
--   the source recedes from the microphone. If the source sound moves at a
--   constant speed through a point to one side of the microphone, then the
--   rate of change of position will not be constant, and the familiar
--   Doppler frequency shift typical of a siren or engine approaching and
--   receding along a road beside a listener will be heard.
--   
--   <pre>
--   ashifted  doppler  asource, ksourceposition, kmicposition [, isoundspeed, ifiltercutoff]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/doppler.html</a>
doppler :: Sig -> Sig -> Sig -> Sig

-- | A filter that simulates a mass-spring-damper system
--   
--   Filters the incoming signal with the specified resonance frequency and
--   quality factor. It can also be seen as a signal generator for high
--   quality factor, with an impulse for the excitation. You can combine
--   several modes to built complex instruments such as bells or guitar
--   tables.
--   
--   <pre>
--   aout  mode  ain, kfreq, kQ [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mode.html</a>
mode :: Sig -> Sig -> Sig -> Sig

-- | A first-order recursive low-pass filter with variable frequency
--   response.
--   
--   <pre>
--   ares  tone  asig, khp [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tone.html</a>
tone :: Sig -> Sig -> Sig

-- | Emulates a stack of filters using the tone opcode.
--   
--   tonex is equivalent to a filter consisting of more layers of tone with
--   the same arguments, serially connected. Using a stack of a larger
--   number of filters allows a sharper cutoff. They are faster than using
--   a larger number instances in a Csound orchestra of the old opcodes,
--   because only one initialization and k- cycle are needed at time and
--   the audio loop falls entirely inside the cache memory of processor.
--   
--   <pre>
--   ares  tonex   asig, khp [, inumlayer] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tonex.html</a>
tonex :: Sig -> Sig -> Sig

-- | A notch filter whose transfer functions are the complements of the
--   reson opcode.
--   
--   <pre>
--   ares  areson  asig, kcf, kbw [, iscl] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/areson.html</a>
areson :: Sig -> Sig -> Sig -> Sig

-- | A second-order multi-mode filter.
--   
--   <pre>
--   ares  bqrez  asig, xfco, xres [, imode] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/bqrez.html</a>
bqrez :: Sig -> Sig -> Sig -> Sig

-- | A resonant lowpass filter.
--   
--   Implementation of a resonant second-order lowpass filter.
--   
--   <pre>
--   ares  lowpass2  asig, kcf, kq [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lowpass2.html</a>
lowpass2 :: Sig -> Sig -> Sig -> Sig

-- | Another resonant lowpass filter.
--   
--   lowres is a resonant lowpass filter.
--   
--   <pre>
--   ares  lowres  asig, kcutoff, kresonance [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lowres.html</a>
lowres :: Sig -> Sig -> Sig -> Sig

-- | Simulates layers of serially connected resonant lowpass filters.
--   
--   lowresx is equivalent to more layers of lowres with the same arguments
--   serially connected.
--   
--   <pre>
--   ares  lowresx  asig, kcutoff, kresonance [, inumlayer] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lowresx.html</a>
lowresx :: Sig -> Sig -> Sig -> Sig

-- | A 3-pole sweepable resonant lowpass filter.
--   
--   Implementation of a 3 pole sweepable resonant lowpass filter.
--   
--   <pre>
--   ares  lpf18  asig, kfco, kres, kdist [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lpf18.html</a>
lpf18 :: Sig -> Sig -> Sig -> Sig -> Sig

-- | Moog ladder lowpass filter.
--   
--   Moogladder is an new digital implementation of the Moog ladder filter
--   based on the work of Antti Huovilainen, described in the paper
--   "Non-Linear Digital Implementation of the Moog Ladder Filter"
--   (Proceedings of DaFX04, Univ of Napoli). This implementation is
--   probably a more accurate digital representation of the original
--   analogue filter.
--   
--   <pre>
--   asig  moogladder  ain, kcf, kres[, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/moogladder.html</a>
moogladder :: Sig -> Sig -> Sig -> Sig

-- | A digital emulation of the Moog diode ladder filter configuration.
--   
--   <pre>
--   ares  moogvcf  asig, xfco, xres [,iscale, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/moogvcf.html</a>
moogvcf :: Sig -> Sig -> Sig -> Sig

-- | A digital emulation of the Moog diode ladder filter configuration.
--   
--   <pre>
--   ares  moogvcf2  asig, xfco, xres [,iscale, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/moogvcf2.html</a>
moogvcf2 :: Sig -> Sig -> Sig -> Sig

-- | A second-order resonant filter.
--   
--   <pre>
--   ares  reson  asig, kcf, kbw [, iscl] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/reson.html</a>
reson :: Sig -> Sig -> Sig -> Sig

-- | A bandpass filter with variable frequency response.
--   
--   Implementations of a second-order, two-pole two-zero bandpass filter
--   with variable frequency response.
--   
--   <pre>
--   ares  resonr  asig, kcf, kbw [, iscl] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/resonr.html</a>
resonr :: Sig -> Sig -> Sig -> Sig

-- | Emulates a stack of filters using the reson opcode.
--   
--   resonx is equivalent to a filters consisting of more layers of reson
--   with the same arguments, serially connected. Using a stack of a larger
--   number of filters allows a sharper cutoff. They are faster than using
--   a larger number instances in a Csound orchestra of the old opcodes,
--   because only one initialization and k- cycle are needed at time and
--   the audio loop falls entirely inside the cache memory of processor.
--   
--   <pre>
--   ares  resonx  asig, kcf, kbw [, inumlayer] [, iscl] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/resonx.html</a>
resonx :: Sig -> Sig -> Sig -> Sig

-- | A bank of second-order bandpass filters, connected in parallel.
--   
--   <pre>
--   ares  resony  asig, kbf, kbw, inum, ksep [, isepmode] [, iscl] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/resony.html</a>
resony :: Sig -> Sig -> Sig -> D -> Sig -> Sig

-- | A bandpass filter with variable frequency response.
--   
--   Implementations of a second-order, two-pole two-zero bandpass filter
--   with variable frequency response.
--   
--   <pre>
--   ares  resonz  asig, kcf, kbw [, iscl] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/resonz.html</a>
resonz :: Sig -> Sig -> Sig -> Sig

-- | A resonant low-pass filter.
--   
--   <pre>
--   ares  rezzy  asig, xfco, xres [, imode, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/rezzy.html</a>
rezzy :: Sig -> Sig -> Sig -> Sig

-- | State-variable filter.
--   
--   Statevar is a new digital implementation of the analogue
--   state-variable filter. This filter has four simultaneous outputs:
--   high-pass, low-pass, band-pass and band-reject. This filter uses
--   oversampling for sharper resonance (default: 3 times oversampling). It
--   includes a resonance limiter that prevents the filter from getting
--   unstable.
--   
--   <pre>
--   ahp,alp,abp,abr  statevar  ain, kcf, kq [, iosamps, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/statevar.html</a>
statevar :: Sig -> Sig -> Sig -> (Sig, Sig, Sig, Sig)

-- | A resonant second order filter, with simultaneous lowpass, highpass
--   and bandpass outputs.
--   
--   Implementation of a resonant second order filter, with simultaneous
--   lowpass, highpass and bandpass outputs.
--   
--   <pre>
--   alow, ahigh, aband  svfilter   asig, kcf, kq [, iscl]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/svfilter.html</a>
svfilter :: Sig -> Sig -> Sig -> (Sig, Sig, Sig)

-- | Models some of the filter characteristics of a Roland TB303
--   voltage-controlled filter.
--   
--   This opcode attempts to model some of the filter characteristics of a
--   Roland TB303 voltage-controlled filter. Euler's method is used to
--   approximate the system, rather than traditional filter methods. Cutoff
--   frequency, Q, and distortion are all coupled. Empirical methods were
--   used to try to unentwine, but frequency is only approximate as a
--   result. Future fixes for some problems with this opcode may break
--   existing orchestras relying on this version of tbvcf.
--   
--   <pre>
--   ares  tbvcf  asig, xfco, xres, kdist, kasym [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tbvcf.html</a>
tbvcf :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | A bank of filters in which the cutoff frequency can be separated under
--   user control.
--   
--   A bank of filters in which the cutoff frequency can be separated under
--   user control
--   
--   <pre>
--   ares  vlowres  asig, kfco, kres, iord, ksep
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vlowres.html</a>
vlowres :: Sig -> Sig -> Sig -> D -> Sig -> Sig

-- | A notch filter whose transfer functions are the complements of the
--   reson opcode.
--   
--   <pre>
--   kres  aresonk  ksig, kcf, kbw [, iscl] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/aresonk.html</a>
aresonk :: Sig -> Sig -> Sig -> Sig

-- | A hi-pass filter whose transfer functions are the complements of the
--   tonek opcode.
--   
--   <pre>
--   kres  atonek  ksig, khp [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/atonek.html</a>
atonek :: Sig -> Sig -> Sig

-- | Generate glissandos starting from a control signal.
--   
--   <pre>
--   kres  lineto  ksig, ktime
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lineto.html</a>
lineto :: Sig -> Sig -> Sig

-- | Applies portamento to a step-valued control signal.
--   
--   <pre>
--   kres  port  ksig, ihtim [, isig]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/port.html</a>
port :: Sig -> D -> Sig

-- | Applies portamento to a step-valued control signal.
--   
--   <pre>
--   kres  portk  ksig, khtim [, isig]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/portk.html</a>
portk :: Sig -> Sig -> Sig

-- | A second-order resonant filter.
--   
--   <pre>
--   kres  resonk  ksig, kcf, kbw [, iscl] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/resonk.html</a>
resonk :: Sig -> Sig -> Sig -> Sig

-- | Control signal resonant filter stack.
--   
--   resonxk is equivalent to a group of resonk filters, with the same
--   arguments, serially connected. Using a stack of a larger number of
--   filters allows a sharper cutoff.
--   
--   <pre>
--   kres  resonxk  ksig, kcf, kbw[, inumlayer, iscl, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/resonxk.html</a>
resonxk :: Sig -> Sig -> Sig -> Sig

-- | Generate glissandos starting from a control signal.
--   
--   Generate glissandos starting from a control signal with a trigger.
--   
--   <pre>
--   kres  tlineto  ksig, ktime, ktrig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tlineto.html</a>
tlineto :: Sig -> Sig -> Sig -> Sig

-- | A first-order recursive low-pass filter with variable frequency
--   response.
--   
--   <pre>
--   kres  tonek  ksig, khp [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tonek.html</a>
tonek :: Sig -> Sig -> Sig

-- | A DC blocking filter.
--   
--   Implements the DC blocking filter
--   
--   <pre>
--   ares  dcblock  ain [, igain]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dcblock.html</a>
dcblock :: Sig -> Sig

-- | A DC blocking filter.
--   
--   Implements a DC blocking filter with improved DC attenuation.
--   
--   <pre>
--   ares  dcblock2  ain [, iorder] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dcblock2.html</a>
dcblock2 :: Sig -> Sig

-- | Equalizer filter
--   
--   The opcode eqfil is a 2nd order tunable equalisation filter based on
--   Regalia and Mitra design ("Tunable Digital Frequency Response
--   Equalization Filters", IEEE Trans. on Ac., Sp. and Sig Proc., 35 (1),
--   1987). It provides a peak/notch filter for building parametric/graphic
--   equalisers.
--   
--   <pre>
--   asig  eqfil  ain, kcf, kbw, kgain[, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/eqfil.html</a>
eqfil :: Sig -> Sig -> Sig -> Sig -> Sig

-- | Performs filtering using a transposed form-II digital filter lattice
--   with no time-varying control.
--   
--   General purpose custom filter with no time-varying pole control. The
--   filter coefficients implement the following difference equation:
--   
--   <pre>
--   ares  filter2  asig, iM, iN, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN
--   kres  filter2  ksig, iM, iN, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/filter2.html</a>
filter2 :: Sig -> D -> D -> [D] -> Sig

-- | Formant filter.
--   
--   Fofilter generates a stream of overlapping sinewave grains, when fed
--   with a pulse train. Each grain is the impulse response of a
--   combination of two BP filters. The grains are defined by their attack
--   time (determining the skirtwidth of the formant region at -60dB) and
--   decay time (-6dB bandwidth). Overlapping will occur when 1/freq &lt;
--   decay, but, unlike FOF, there is no upper limit on the number of
--   overlaps. The original idea for this opcode came from J McCartney's
--   formlet class in SuperCollider, but this is possibly implemented
--   differently(?).
--   
--   <pre>
--   asig  fofilter  ain, kcf, kris, kdec[, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fofilter.html</a>
fofilter :: Sig -> Sig -> Sig -> Sig -> Sig

-- | A Hilbert transformer.
--   
--   An IIR implementation of a Hilbert transformer.
--   
--   <pre>
--   ar1, ar2  hilbert  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hilbert.html</a>
hilbert :: Sig -> (Sig, Sig)

-- | A filter with a non-linear effect.
--   
--   Implements the filter:
--   
--   <pre>
--   ares  nlfilt  ain, ka, kb, kd, kC, kL
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/nlfilt.html</a>
nlfilt :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | A filter with a non-linear effect and blowup protection.
--   
--   Implements the filter:
--   
--   <pre>
--   ares  nlfilt2  ain, ka, kb, kd, kC, kL
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/nlfilt2.html</a>
nlfilt2 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Implementation of Zoelzer's parametric equalizer filters.
--   
--   Implementation of Zoelzer's parametric equalizer filters, with some
--   modifications by the author.
--   
--   <pre>
--   ares  pareq  asig, kc, kv, kq [, imode] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pareq.html</a>
pareq :: Sig -> Sig -> Sig -> Sig -> Sig

-- | Parametric equalizer and filter opcode with 7 filter types, based on
--   algorithm by Robert Bristow-Johnson.
--   
--   Parametric equalizer and filter opcode with 7 filter types, based on
--   algorithm by Robert Bristow-Johnson.
--   
--   <pre>
--   ar  rbjeq  asig, kfco, klvl, kQ, kS[, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/rbjeq.html</a>
rbjeq :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Performs filtering using a transposed form-II digital filter lattice
--   with radial pole-shearing and angular pole-warping.
--   
--   General purpose custom filter with time-varying pole control. The
--   filter coefficients implement the following difference equation:
--   
--   <pre>
--   ares  zfilter2  asig, kdamp, kfreq, iM, iN, ib0, ib1, ..., ibM, \
--             ia1,ia2, ..., iaN
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/zfilter2.html</a>
zfilter2 :: Sig -> Sig -> Sig -> D -> D -> [D] -> Sig

-- | A simple waveguide model consisting of one delay-line and one
--   first-order lowpass filter.
--   
--   <pre>
--   ares  wguide1  asig, xfreq, kcutoff, kfeedback
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wguide1.html</a>
wguide1 :: Sig -> Sig -> Sig -> Sig -> Sig

-- | A model of beaten plate consisting of two parallel delay-lines and two
--   first-order lowpass filters.
--   
--   <pre>
--   ares  wguide2  asig, xfreq1, xfreq2, kcutoff1, kcutoff2, \
--             kfeedback1, kfeedback2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wguide2.html</a>
wguide2 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Efficiently evaluates the sum of Chebyshev polynomials of arbitrary
--   order.
--   
--   The chebyshevpoly opcode calculates the value of a polynomial
--   expression with a single a-rate input variable that is made up of a
--   linear combination of the first N Chebyshev polynomials of the first
--   kind. Each Chebyshev polynomial, Tn(x), is weighted by a k-rate
--   coefficient, kn, so that the opcode is calculating a sum of any number
--   of terms in the form kn*Tn(x). Thus, the chebyshevpoly opcode allows
--   for the waveshaping of an audio signal with a dynamic transfer
--   function that gives precise control over the harmonic content of the
--   output.
--   
--   <pre>
--   aout  chebyshevpoly  ain, k0 [, k1 [, k2 [...]]]
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/chebyshevpoly.html</a>
chebyshevpoly :: Sig -> [Sig] -> Sig

-- | Performs linear clipping on an audio signal or a phasor.
--   
--   The pdclip opcode allows a percentage of the input range of a signal
--   to be clipped to fullscale. It is similar to simply multiplying the
--   signal and limiting the range of the result, but pdclip allows you to
--   think about how much of the signal range is being distorted instead of
--   the scalar factor and has a offset parameter for assymetric clipping
--   of the signal range. pdclip is also useful for remapping phasors for
--   phase distortion synthesis.
--   
--   <pre>
--   aout  pdclip  ain, kWidth, kCenter [, ibipolar [, ifullscale]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pdclip.html</a>
pdclip :: Sig -> Sig -> Sig -> Sig

-- | Distorts a phasor for reading the two halves of a table at different
--   rates.
--   
--   The pdhalf opcode is designed to emulate the "classic" phase
--   distortion synthesis method of the Casio CZ-series of synthesizers
--   from the mid-1980's. This technique reads the first and second halves
--   of a function table at different rates in order to warp the waveform.
--   For example, pdhalf can smoothly transform a sine wave into something
--   approximating the shape of a saw wave.
--   
--   <pre>
--   aout  pdhalf  ain, kShapeAmount [, ibipolar [, ifullscale]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pdhalf.html</a>
pdhalf :: Sig -> Sig -> Sig

-- | Distorts a phasor for reading two unequal portions of a table in equal
--   periods.
--   
--   The pdhalfy opcode is a variation on the phase distortion synthesis
--   method of the pdhalf opcode. It is useful for distorting a phasor in
--   order to read two unequal portions of a table in the same number of
--   samples.
--   
--   <pre>
--   aout  pdhalfy  ain, kShapeAmount [, ibipolar [, ifullscale]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pdhalfy.html</a>
pdhalfy :: Sig -> Sig -> Sig

-- | Waveshapes a signal by raising it to a variable exponent.
--   
--   The powershape opcode raises an input signal to a power with pre- and
--   post-scaling of the signal so that the output will be in a predictable
--   range. It also processes negative inputs in a symmetrical way to
--   positive inputs, calculating a dynamic transfer function that is
--   useful for waveshaping.
--   
--   <pre>
--   aout  powershape  ain, kShapeAmount [, ifullscale]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/powershape.html</a>
powershape :: Sig -> Sig -> Sig

-- | Produces a signal that is the maximum of any number of input signals.
--   
--   The max opcode takes any number of a-rate or k-rate signals as input
--   (all of the same rate), and outputs a signal at the same rate that is
--   the maximum of all of the inputs. For a-rate signals, the inputs are
--   compared one sample at a time (i.e. max does not scan an entire ksmps
--   period of a signal for its local maximum as the max_k opcode does).
--   
--   <pre>
--   amax  max  ain1, ain2 [, ain3] [, ain4] [...]
--   kmax  max  kin1, kin2 [, kin3] [, kin4] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/max.html</a>
max' :: [Sig] -> Sig

-- | Local maximum (or minimum) value of an incoming asig signal
--   
--   max_k outputs the local maximum (or minimum) value of the incoming
--   asig signal, checked in the time interval between ktrig has become
--   true twice.
--   
--   <pre>
--   knumkout  max_k  asig, ktrig, itype
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/max_k.html</a>
max_k :: Sig -> Sig -> D -> Sig

-- | Produces a signal that is the maximum of the absolute values of any
--   number of input signals.
--   
--   The maxabs opcode takes any number of a-rate or k-rate signals as
--   input (all of the same rate), and outputs a signal at the same rate
--   that is the maximum of all of the inputs. It is identical to the max
--   opcode except that it takes the absolute value of each input before
--   comparing them. Therefore, the output is always non-negative. For
--   a-rate signals, the inputs are compared one sample at a time (i.e.
--   maxabs does not scan an entire ksmps period of a signal for its local
--   maximum as the max_k opcode does).
--   
--   <pre>
--   amax  maxabs  ain1, ain2 [, ain3] [, ain4] [...]
--   kmax  maxabs  kin1, kin2 [, kin3] [, kin4] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/maxabs.html</a>
maxabs :: [Sig] -> Sig

-- | Accumulates the maximum of the absolute values of audio signals.
--   
--   maxabsaccum compares two audio-rate variables and stores the maximum
--   of their absolute values into the first.
--   
--   <pre>
--   maxabsaccum  aAccumulator, aInput
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/maxabsaccum.html</a>
maxabsaccum :: Sig -> Sig -> SE ()

-- | Accumulates the maximum value of audio signals.
--   
--   maxaccum compares two audio-rate variables and stores the maximum
--   value between them into the first.
--   
--   <pre>
--   maxaccum  aAccumulator, aInput
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/maxaccum.html</a>
maxaccum :: Sig -> Sig -> SE ()

-- | Produces a signal that is the minimum of any number of input signals.
--   
--   The min opcode takes any number of a-rate or k-rate signals as input
--   (all of the same rate), and outputs a signal at the same rate that is
--   the minimum of all of the inputs. For a-rate signals, the inputs are
--   compared one sample at a time (i.e. min does not scan an entire ksmps
--   period of a signal for its local minimum as the max_k opcode does).
--   
--   <pre>
--   amin  min  ain1, ain2 [, ain3] [, ain4] [...]
--   kmin  min  kin1, kin2 [, kin3] [, kin4] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/min.html</a>
min' :: [Sig] -> Sig

-- | Produces a signal that is the minimum of the absolute values of any
--   number of input signals.
--   
--   The minabs opcode takes any number of a-rate or k-rate signals as
--   input (all of the same rate), and outputs a signal at the same rate
--   that is the minimum of all of the inputs. It is identical to the min
--   opcode except that it takes the absolute value of each input before
--   comparing them. Therefore, the output is always non-negative. For
--   a-rate signals, the inputs are compared one sample at a time (i.e.
--   minabs does not scan an entire ksmps period of a signal for its local
--   minimum as the max_k opcode does).
--   
--   <pre>
--   amin  minabs  ain1, ain2 [, ain3] [, ain4] [...]
--   kmin  minabs  kin1, kin2 [, kin3] [, kin4] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/minabs.html</a>
minabs :: [Sig] -> Sig

-- | Accumulates the minimum of the absolute values of audio signals.
--   
--   minabsaccum compares two audio-rate variables and stores the minimum
--   of their absolute values into the first.
--   
--   <pre>
--   minabsaccum  aAccumulator, aInput
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/minabsaccum.html</a>
minabsaccum :: Sig -> Sig -> SE ()

-- | Accumulates the minimum value of audio signals.
--   
--   minaccum compares two audio-rate variables and stores the minimum
--   value between them into the first.
--   
--   <pre>
--   minaccum  aAccumulator, aInput
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/minaccum.html</a>
minaccum :: Sig -> Sig -> SE ()

module Csound.Typed.Opcode.SignalIO

-- | Periodically writes an orchestra control-signal value to an external
--   file.
--   
--   Periodically writes an orchestra control-signal value to a named
--   external file in a specific format.
--   
--   <pre>
--   dumpk   ksig, ifilname, iformat, iprd
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dumpk.html</a>
dumpk :: Sig -> Str -> D -> D -> SE ()

-- | Periodically writes two orchestra control-signal values to an external
--   file.
--   
--   Periodically writes two orchestra control-signal values to a named
--   external file in a specific format.
--   
--   <pre>
--   dumpk2  ksig1, ksig2, ifilname, iformat, iprd
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dumpk2.html</a>
dumpk2 :: Sig -> Sig -> Str -> D -> D -> SE ()

-- | Periodically writes three orchestra control-signal values to an
--   external file.
--   
--   Periodically writes three orchestra control-signal values to a named
--   external file in a specific format.
--   
--   <pre>
--   dumpk3  ksig1, ksig2, ksig3, ifilname, iformat, iprd
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dumpk3.html</a>
dumpk3 :: Sig -> Sig -> Sig -> Str -> D -> D -> SE ()

-- | Periodically writes four orchestra control-signal values to an
--   external file.
--   
--   Periodically writes four orchestra control-signal values to a named
--   external file in a specific format.
--   
--   <pre>
--   dumpk4  ksig1, ksig2, ksig3, ksig4, ifilname, iformat, iprd
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dumpk4.html</a>
dumpk4 :: Sig -> Sig -> Sig -> Sig -> Str -> D -> D -> SE ()

-- | Closes a previously opened file.
--   
--   ficlose can be used to close a file which was opened with fiopen.
--   
--   <pre>
--   ficlose  ihandle
--   ficlose  Sfilename
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ficlose.html</a>
ficlose :: D -> SE ()

-- | Read signals from a file at a-rate.
--   
--   <pre>
--   fin  ifilename, iskipframes, iformat, ain1 [, ain2] [, ain3] [,...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fin.html</a>
fin :: Str -> D -> D -> [Sig] -> SE ()

-- | Read signals from a file at i-rate.
--   
--   <pre>
--   fini  ifilename, iskipframes, iformat, in1 [, in2] [, in3] [, ...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fini.html</a>
fini :: Str -> D -> D -> [D] -> SE ()

-- | Read signals from a file at k-rate.
--   
--   <pre>
--   fink  ifilename, iskipframes, iformat, kin1 [, kin2] [, kin3] [,...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fink.html</a>
fink :: Str -> D -> D -> [Sig] -> SE ()

-- | Opens a file in a specific mode.
--   
--   fiopen can be used to open a file in one of the specified modes.
--   
--   <pre>
--   ihandle  fiopen  ifilename, imode
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fiopen.html</a>
fiopen :: Str -> D -> SE D

-- | Outputs a-rate signals to an arbitrary number of channels.
--   
--   fout outputs N a-rate signals to a specified file of N channels.
--   
--   <pre>
--   fout  ifilename, iformat, aout1 [, aout2, aout3,...,aoutN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fout.html</a>
fout :: Str -> D -> [Sig] -> SE ()

-- | Outputs i-rate signals of an arbitrary number of channels to a
--   specified file.
--   
--   fouti output N i-rate signals to a specified file of N channels.
--   
--   <pre>
--   fouti  ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fouti.html</a>
fouti :: Str -> D -> D -> [D] -> SE ()

-- | Outputs i-rate signals from an arbitrary number of channels to a
--   specified file.
--   
--   foutir output N i-rate signals to a specified file of N channels.
--   
--   <pre>
--   foutir  ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/foutir.html</a>
foutir :: Str -> D -> D -> [D] -> SE ()

-- | Outputs k-rate signals of an arbitrary number of channels to a
--   specified file, in raw (headerless) format.
--   
--   foutk outputs N k-rate signals to a specified file of N channels.
--   
--   <pre>
--   foutk  ifilename, iformat, kout1 [, kout2, kout3,....,koutN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/foutk.html</a>
foutk :: Str -> D -> [Sig] -> SE ()

-- | Similar to printks but prints to a file.
--   
--   <pre>
--   fprintks  "filename", "string", [, kval1] [, kval2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fprintks.html</a>
fprintks :: Str -> Str -> [Sig] -> SE ()

-- | Similar to prints but prints to a file.
--   
--   <pre>
--   fprints  "filename", "string" [, ival1] [, ival2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fprints.html</a>
fprints :: Str -> Str -> [D] -> SE ()

-- | Periodically reads an orchestra control-signal value from an external
--   file.
--   
--   Periodically reads an orchestra control-signal value from a named
--   external file in a specific format.
--   
--   <pre>
--   kres  readk  ifilname, iformat, iprd
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/readk.html</a>
readk :: Str -> D -> D -> Sig

-- | Periodically reads two orchestra control-signal values from an
--   external file.
--   
--   <pre>
--   kr1, kr2  readk2  ifilname, iformat, iprd
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/readk2.html</a>
readk2 :: Str -> D -> D -> (Sig, Sig)

-- | Periodically reads three orchestra control-signal values from an
--   external file.
--   
--   <pre>
--   kr1, kr2, kr3  readk3  ifilname, iformat, iprd
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/readk3.html</a>
readk3 :: Str -> D -> D -> (Sig, Sig, Sig)

-- | Periodically reads four orchestra control-signal values from an
--   external file.
--   
--   <pre>
--   kr1, kr2, kr3, kr4  readk4  ifilname, iformat, iprd
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/readk4.html</a>
readk4 :: Str -> D -> D -> (Sig, Sig, Sig, Sig)

-- | Deprecated. Reads audio data from an external device or stream and can
--   alter its pitch.
--   
--   <pre>
--   ar1 [, ar2 [, ar3 [, ... arN]]]  diskin  ifilcod, kpitch [, iskiptim] \
--             [, iwraparound] [, iformat] [, iskipinit]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/diskin.html</a>
diskin :: Tuple a => Str -> Sig -> a

-- | Reads audio data from a file, and can alter its pitch using one of
--   several available interpolation types, as well as convert the sample
--   rate to match the orchestra sr setting.
--   
--   Reads audio data from a file, and can alter its pitch using one of
--   several available interpolation types, as well as convert the sample
--   rate to match the orchestra sr setting. diskin2 can also read
--   multichannel files with any number of channels in the range 1 to 24 in
--   versions before 5.14, and 40 after. . diskin2 allows more control and
--   higher sound quality than diskin, but there is also the disadvantage
--   of higher CPU usage.
--   
--   <pre>
--   a1[, a2[, ... aN]]  diskin2  ifilcod, kpitch[, iskiptim \
--             [, iwrap[, iformat [, iwsize[, ibufsize[, iskipinit]]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/diskin2.html</a>
diskin2 :: Tuple a => Str -> Sig -> a

-- | Reads mono audio data from an external device or stream.
--   
--   <pre>
--   ar1  in  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/in.html</a>
in' :: Sig

-- | Reads a 32-channel audio signal from an external device or stream.
--   
--   <pre>
--   ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, \
--             ar15, ar16, ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, \
--             ar27, ar28, ar29, ar30, ar31, ar32  in32  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/in32.html</a>
in32 :: Tuple a => a

-- | Reads from numbered channels in an external audio signal or stream.
--   
--   <pre>
--   ain1[, ...]  inch  kchan1[,...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inch.html</a>
inch :: Tuple a => [Sig] -> a

-- | Reads six-channel audio data from an external device or stream.
--   
--   <pre>
--   ar1, ar2, ar3, ar4, ar5, ar6  inh  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inh.html</a>
inh :: Tuple a => a

-- | Reads eight-channel audio data from an external device or stream.
--   
--   <pre>
--   ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8  ino  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ino.html</a>
ino :: Tuple a => a

-- | Reads quad audio data from an external device or stream.
--   
--   <pre>
--   ar1, ar2,  ar3, a4  inq  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inq.html</a>
inq :: (Sig, Sig, Sig, Sig)

-- | Allow input from a range of adjacent audio channels from the audio
--   input device
--   
--   inrg reads audio from a range of adjacent audio channels from the
--   audio input device.
--   
--   <pre>
--   inrg  kstart, ain1 [,ain2, ain3, ..., ainN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inrg.html</a>
inrg :: Sig -> [Sig] -> SE ()

-- | Reads stereo audio data from an external device or stream.
--   
--   <pre>
--   ar1, ar2  ins  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ins.html</a>
ins :: (Sig, Sig)

-- | Reads a k-rate signal from a user-defined channel.
--   
--   Reads a k-rate signal or string from a user-defined channel.
--   
--   <pre>
--   kvalue  invalue  "channel name"
--   Sname  invalue  "channel name"
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/invalue.html</a>
invalue :: Str -> Str

-- | Reads a 16-channel audio signal from an external device or stream.
--   
--   <pre>
--   ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, \
--             ar13, ar14, ar15, ar16  inx  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inx.html</a>
inx :: Tuple a => a

-- | Reads multi-channel audio samples into a ZAK array from an external
--   device or stream.
--   
--   <pre>
--   inz  ksig1
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/inz.html</a>
inz :: Sig -> SE ()

-- | Reads stereo audio data from an external MP3 file.
--   
--   <pre>
--   ar1, ar2  mp3in  ifilcod[, iskptim, iformat, iskipinit, ibufsize]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mp3in.html</a>
mp3in :: Str -> (Sig, Sig)

-- | Reads audio data from an external device or stream.
--   
--   Reads audio data from an external device or stream. Up to 24 channels
--   may be read before v5.14, extended to 40 in later versions.
--   
--   <pre>
--   ar1[, ar2[, ar3[, ... a24]]]  soundin  ifilcod [, iskptim] [, iformat] \
--             [, iskipinit] [, ibufsize]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/soundin.html</a>
soundin :: Tuple a => Str -> a

-- | A MIDI delay opcode.
--   
--   <pre>
--   mdelay  kstatus, kchan, kd1, kd2, kdelay
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mdelay.html</a>
mdelay :: Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Returns the audio spout frame.
--   
--   Returns the audio spout frame (if active), otherwise it returns zero.
--   
--   <pre>
--   aout1 [,aout2 ... aoutX]  monitor  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/monitor.html</a>
monitor :: Tuple a => a

-- | Writes mono audio data to an external device or stream.
--   
--   <pre>
--   out  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/out.html</a>
out :: Sig -> SE ()

-- | Writes 32-channel audio data to an external device or stream.
--   
--   <pre>
--   out32  asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, asig10, \
--            asig11, asig12, asig13, asig14, asig15, asig16, asig17, asig18, \
--            asig19, asig20, asig21, asig22, asig23, asig24, asig25, asig26, \
--            asig27, asig28, asig29, asig30, asig31, asig32
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/out32.html</a>
out32 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Writes audio data with an arbitrary number of channels to an external
--   device or stream.
--   
--   <pre>
--   outc  asig1 [, asig2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outc.html</a>
outc :: [Sig] -> SE ()

-- | Writes multi-channel audio data, with user-controllable channels, to
--   an external device or stream.
--   
--   <pre>
--   outch  kchan1, asig1 [, kchan2] [, asig2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outch.html</a>
outch :: Sig -> [Sig] -> SE ()

-- | Writes 6-channel audio data to an external device or stream.
--   
--   <pre>
--   outh  asig1, asig2, asig3, asig4, asig5, asig6
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outh.html</a>
outh :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Writes 8-channel audio data to an external device or stream.
--   
--   <pre>
--   outo  asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outo.html</a>
outo :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Writes 4-channel audio data to an external device or stream.
--   
--   <pre>
--   outq  asig1, asig2, asig3, asig4
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outq.html</a>
outq :: Sig -> Sig -> Sig -> Sig -> SE ()

-- | Writes samples to quad channel 1 of an external device or stream.
--   
--   <pre>
--   outq1  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outq1.html</a>
outq1 :: Sig -> SE ()

-- | Writes samples to quad channel 2 of an external device or stream.
--   
--   <pre>
--   outq2  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outq2.html</a>
outq2 :: Sig -> SE ()

-- | Writes samples to quad channel 3 of an external device or stream.
--   
--   <pre>
--   outq3  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outq3.html</a>
outq3 :: Sig -> SE ()

-- | Writes samples to quad channel 4 of an external device or stream.
--   
--   <pre>
--   outq4  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outq4.html</a>
outq4 :: Sig -> SE ()

-- | Allow output to a range of adjacent audio channels on the audio output
--   device
--   
--   outrg outputs audio to a range of adjacent audio channels on the audio
--   output device.
--   
--   <pre>
--   outrg  kstart, aout1 [,aout2, aout3, ..., aoutN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outrg.html</a>
outrg :: Sig -> [Sig] -> SE ()

-- | Writes stereo audio data to an external device or stream.
--   
--   <pre>
--   outs  asig1, asig2
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outs.html</a>
outs :: Sig -> Sig -> SE ()

-- | Writes samples to stereo channel 1 of an external device or stream.
--   
--   <pre>
--   outs1  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outs1.html</a>
outs1 :: Sig -> SE ()

-- | Writes samples to stereo channel 2 of an external device or stream.
--   
--   <pre>
--   outs2  asig
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outs2.html</a>
outs2 :: Sig -> SE ()

-- | Sends a k-rate signal or string to a user-defined channel.
--   
--   <pre>
--   outvalue  "channel name", kvalue
--   outvalue  "channel name", "string"
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outvalue.html</a>
outvalue :: Str -> Sig -> SE ()

-- | Writes 16-channel audio data to an external device or stream.
--   
--   <pre>
--   outx  asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, \
--            asig9, asig10, asig11, asig12, asig13, asig14, asig15, asig16
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outx.html</a>
outx :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Writes multi-channel audio data from a ZAK array to an external device
--   or stream.
--   
--   <pre>
--   outz  ksig1
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/outz.html</a>
outz :: Sig -> SE ()

-- | Deprecated. Writes audio output to a disk file.
--   
--   The usage of soundout is discouraged. Please use fout instead.
--   
--   <pre>
--   soundout   asig1, ifilcod [, iformat]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/soundout.html</a>
soundout :: Sig -> Str -> SE ()

-- | Deprecated. Writes audio output to a disk file.
--   
--   The usage of soundouts is discouraged. Please use fout instead.
--   
--   <pre>
--   soundouts   asigl, asigr, ifilcod [, iformat]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/soundouts.html</a>
soundouts :: Sig -> Sig -> Str -> SE ()

-- | Reads data from the software bus
--   
--   Reads data from a channel of the inward software bus.
--   
--   <pre>
--   kval  chani  kchan
--   aval  chani  kchan
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chani.html</a>
chani :: Sig -> SE Sig

-- | Send data to the outwards software bus
--   
--   Send data to a channel of the outward software bus.
--   
--   <pre>
--   chano  kval, kchan
--   chano  aval, kchan
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chano.html</a>
chano :: Sig -> Sig -> SE ()

-- | Declare a channel of the named software bus.
--   
--   Declare a channel of the named software bus, with setting optional
--   parameters in the case of a control channel. If the channel does not
--   exist yet, it is created, with an inital value of zero or empty
--   string. Otherwise, the type (control, audio, or string) of the
--   existing channel must match the declaration, or an init error occurs.
--   The input/output mode of an existing channel is updated so that it
--   becomes the bitwise OR of the previous and the newly specified value.
--   
--   <pre>
--   chn_k  Sname, imode[, itype, idflt, imin, ima, ix, iy, iwidth, iheight, Sattributes]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chn.html</a>
chn_k :: Str -> D -> SE ()

-- | Declare a channel of the named software bus.
--   
--   Declare a channel of the named software bus, with setting optional
--   parameters in the case of a control channel. If the channel does not
--   exist yet, it is created, with an inital value of zero or empty
--   string. Otherwise, the type (control, audio, or string) of the
--   existing channel must match the declaration, or an init error occurs.
--   The input/output mode of an existing channel is updated so that it
--   becomes the bitwise OR of the previous and the newly specified value.
--   
--   <pre>
--   chn_a  Sname, imode
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chn.html</a>
chn_a :: Str -> D -> SE ()

-- | Declare a channel of the named software bus.
--   
--   Declare a channel of the named software bus, with setting optional
--   parameters in the case of a control channel. If the channel does not
--   exist yet, it is created, with an inital value of zero or empty
--   string. Otherwise, the type (control, audio, or string) of the
--   existing channel must match the declaration, or an init error occurs.
--   The input/output mode of an existing channel is updated so that it
--   becomes the bitwise OR of the previous and the newly specified value.
--   
--   <pre>
--   chn_S  Sname, imode
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chn.html</a>
chn_S :: Str -> D -> SE ()

-- | Clears an audio output channel of the named software bus.
--   
--   Clears an audio channel of the named software bus to zero. Implies
--   declaring the channel with imode=2 (see also chn_a).
--   
--   <pre>
--   chnclear  Sname
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chnclear.html</a>
chnclear :: Str -> SE ()

-- | Export a global variable as a channel of the bus.
--   
--   Export a global variable as a channel of the bus; the channel should
--   not already exist, otherwise an init error occurs. This opcode is
--   normally called from the orchestra header, and allows the host
--   application to read or write orchestra variables directly, without
--   having to use chnget or chnset to copy data.
--   
--   <pre>
--   gival  chnexport  Sname, imode[, itype, idflt, imin, imax]
--   gkval  chnexport  Sname, imode[, itype, idflt, imin, imax]
--   gaval  chnexport  Sname, imode
--   gSval  chnexport  Sname, imode
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chnexport.html</a>
chnexport :: Str -> D -> Str

-- | Reads data from the software bus.
--   
--   Reads data from a channel of the inward named software bus. Implies
--   declaring the channel with imode=1 (see also chn_k, chn_a, and chn_S).
--   
--   <pre>
--   ival  chnget  Sname
--   kval  chnget  Sname
--   aval  chnget  Sname
--   Sval  chnget  Sname
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chnget.html</a>
chnget :: Str -> SE Str

-- | Writes audio data to the named software bus, mixing to the previous
--   output.
--   
--   Adds an audio signal to a channel of the named software bus. Implies
--   declaring the channel with imode=2 (see also chn_a).
--   
--   <pre>
--   chnmix  aval, Sname
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chnmix.html</a>
chnmix :: Sig -> Str -> SE ()

-- | Query parameters of a channel.
--   
--   Query parameters of a channel (if it does not exist, all returned
--   values are zero).
--   
--   <pre>
--   itype, imode, ictltype, idflt, imin, imax  chnparams  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chnparams.html</a>
chnparams :: Tuple a => a

-- | Recieves data from the software bus.
--   
--   Receives data from a channel of the inward named software bus. Implies
--   declaring the channel with imode=1 (see also chn_k, chn_a, and chn_S).
--   Note that chnsend<i>chnrecv (which in Csound6 work identically to
--   invalue</i>outvalue) are usually used for the callback-based
--   communication between Csound and an external host. Use the
--   chnset/chnget opcodes for sending and receiving data inside Csound.
--   
--   <pre>
--   ival  chnrecv  Sname
--   kval  chnrecv  Sname
--   aval  chnrecv  Sname
--   Sval  chnrecv  Sname
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chnrecv.html</a>
chnrecv :: Str -> SE Str

-- | Sends data via the named software bus.
--   
--   Send to a channel of the named software bus. Implies declaring the
--   channel with imode=2 (see also chn_k, chn_a, and chn_S). Note that
--   chnsend<i>chnrecv (which in Csound6 work identically to
--   invalue</i>outvalue) are usually used for the callback-based
--   communication between Csound and an external host. Use the
--   chnset/chnget opcodes for sending and receiving data inside Csound.
--   
--   <pre>
--   chnsend  ival, Sname
--   chnsend  kval, Sname
--   chnsend  aval, Sname
--   chnsend  Sval, Sname
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chnsend.html</a>
chnsend :: D -> Str -> SE ()

-- | Writes data to the named software bus.
--   
--   Write to a channel of the named software bus. Implies declaring the
--   channel with imod=2 (see also chn_k, chn_a, and chn_S).
--   
--   <pre>
--   chnset  ival, Sname
--   chnset  kval, Sname
--   chnset  aval, Sname
--   chnset  Sval, Sname
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chnset.html</a>
chnset :: D -> Str -> SE ()

-- | Sets the local ksmps value in an instrument or user-defined opcode
--   block
--   
--   Sets the local ksmps value in an instrument or user-defined opcode
--   block.
--   
--   <pre>
--   setksmps  iksmps
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/setksmps.html</a>
setksmps :: D -> SE ()

-- | Passes variables to a user-defined opcode block,
--   
--   The xin and xout opcodes copy variables to and from the opcode
--   definition, allowing communication with the calling instrument.
--   
--   <pre>
--   xinarg1 [, xinarg2] ... [xinargN]  xin  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/xin.html</a>
xin :: Tuple a => a

-- | Retrieves variables from a user-defined opcode block,
--   
--   The xin and xout opcodes copy variables to and from the opcode
--   definition, allowing communication with the calling instrument.
--   
--   <pre>
--   xout  xoutarg1 [, xoutarg2] ... [, xoutargN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/xout.html</a>
xout :: [Sig] -> SE ()

-- | Displays the Fourier Transform of an audio or control signal.
--   
--   These units will print orchestra init-values, or produce graphic
--   display of orchestra control signals and audio signals. Uses X11
--   windows if enabled, else (or if -g flag is set) displays are
--   approximated in ASCII characters.
--   
--   <pre>
--   dispfft  xsig, iprd, iwsiz [, iwtyp] [, idbout] [, iwtflg]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dispfft.html</a>
dispfft :: Sig -> D -> D -> SE ()

-- | Displays the audio or control signals as an amplitude vs. time graph.
--   
--   These units will print orchestra init-values, or produce graphic
--   display of orchestra control signals and audio signals. Uses X11
--   windows if enabled, else (or if -g flag is set) displays are
--   approximated in ASCII characters.
--   
--   <pre>
--   display  xsig, iprd [, inprds] [, iwtflg]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/display.html</a>
display :: Sig -> D -> SE ()

-- | Allows text to be displayed from instruments like sliders
--   
--   Allows text to be displayed from instruments like sliders etc. (only
--   on Unix and Windows at present)
--   
--   <pre>
--   flashtxt   iwhich, String
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/flashtxt.html</a>
flashtxt :: D -> Str -> SE ()

-- | Displays the values init (i-rate) variables.
--   
--   These units will print orchestra init-values.
--   
--   <pre>
--   print  iarg [, iarg1] [, iarg2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/print.html</a>
print' :: [D] -> SE ()

-- | printf-style formatted output
--   
--   printf and printf_i write formatted output, similarly to the C
--   function printf(). printf_i runs at i-time only, while printf runs
--   both at initialization and performance time.
--   
--   <pre>
--   printf_i  Sfmt, itrig, [iarg1[, iarg2[, ... ]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/printf.html</a>
printf_i :: Str -> D -> [D] -> SE ()

-- | printf-style formatted output
--   
--   printf and printf_i write formatted output, similarly to the C
--   function printf(). printf_i runs at i-time only, while printf runs
--   both at initialization and performance time.
--   
--   <pre>
--   printf  Sfmt, ktrig, [xarg1[, xarg2[, ... ]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/printf.html</a>
printf :: Str -> Sig -> [Sig] -> SE ()

-- | Prints one k-rate value at specified intervals.
--   
--   <pre>
--   printk  itime, kval [, ispace]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/printk.html</a>
printk :: D -> Sig -> SE ()

-- | Prints a new value every time a control variable changes.
--   
--   <pre>
--   printk2  kvar [, inumspaces]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/printk2.html</a>
printk2 :: Sig -> SE ()

-- | Prints at k-rate using a printf() style syntax.
--   
--   <pre>
--   printks  "string", itime [, kval1] [, kval2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/printks.html</a>
printks :: Str -> D -> [Sig] -> SE ()

-- | Prints at init-time using a printf() style syntax.
--   
--   <pre>
--   prints  "string" [, kval1] [, kval2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/prints.html</a>
prints :: Str -> [Sig] -> SE ()

-- | Returns the number of bits in each sample in a sound file.
--   
--   <pre>
--   ir  filebit  ifilcod [, iallowraw]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/filebit.html</a>
filebit :: Str -> D

-- | Returns the length of a sound file.
--   
--   <pre>
--   ir  filelen  ifilcod, [iallowraw]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/filelen.html</a>
filelen :: Str -> D

-- | Returns the number of channels in a sound file.
--   
--   <pre>
--   ir  filenchnls  ifilcod [, iallowraw]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/filenchnls.html</a>
filenchnls :: Str -> D

-- | Returns the peak absolute value of a sound file.
--   
--   <pre>
--   ir  filepeak  ifilcod [, ichnl]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/filepeak.html</a>
filepeak :: Str -> D

-- | Returns the sample rate of a sound file.
--   
--   <pre>
--   ir  filesr  ifilcod [, iallowraw]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/filesr.html</a>
filesr :: Str -> D

-- | Checks that a file can be used.
--   
--   Returns 1 if the sound file is valid, or 0 if not.
--   
--   <pre>
--   ir  filevalid  ifilcod
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/filevalid.html</a>
filevalid :: Str -> D

-- | Returns the length of an MP3 sound file.
--   
--   <pre>
--   ir  mp3len  ifilcod
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mp3len.html</a>
mp3len :: Str -> D

module Csound.Typed.Opcode.SignalGenerators

-- | Output is an additive set of individually controlled sinusoids, using
--   an oscillator bank.
--   
--   <pre>
--   ares  adsyn  kamod, kfmod, ksmod, ifilcod
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/adsyn.html</a>
adsyn :: Sig -> Sig -> Sig -> Str -> Sig

-- | Performs additive synthesis with an arbitrary number of partials, not
--   necessarily harmonic.
--   
--   <pre>
--   ares  adsynt  kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/adsynt.html</a>
adsynt :: Sig -> Sig -> Tab -> Tab -> Tab -> D -> Sig

-- | Performs additive synthesis with an arbitrary number of partials -not
--   necessarily harmonic- with interpolation.
--   
--   Performs additive synthesis with an arbitrary number of partials, not
--   necessarily harmonic. (see adsynt for detailed manual)
--   
--   <pre>
--   ar  adsynt2  kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/adsynt2.html</a>
adsynt2 :: Sig -> Sig -> Tab -> Tab -> Tab -> D -> Sig

-- | An oscillator which takes tonality and brightness as arguments.
--   
--   An oscillator which takes tonality and brightness as arguments,
--   relative to a base frequency.
--   
--   <pre>
--   ares  hsboscil  kamp, ktone, kbrite, ibasfreq, iwfn, ioctfn \
--                      [, ioctcnt] [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hsboscil.html</a>
hsboscil :: Sig -> Sig -> Sig -> D -> Tab -> Tab -> Sig

-- | A low frequency oscillator of various shapes.
--   
--   <pre>
--   kres  lfo  kamp, kcps [, itype]
--   ares  lfo  kamp, kcps [, itype]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lfo.html</a>
lfo :: Sig -> Sig -> Sig

-- | Mixes the output of any number of oscillators.
--   
--   This unit generator mixes the output of any number of oscillators. The
--   frequency, phase, and amplitude of each oscillator can be modulated by
--   two LFOs (all oscillators have a separate set of LFOs, with different
--   phase and frequency); additionally, the output of each oscillator can
--   be filtered through an optional parametric equalizer (also controlled
--   by the LFOs). This opcode is most useful for rendering ensemble
--   (strings, choir, etc.) instruments.
--   
--   <pre>
--   ares  oscbnk   kcps, kamd, kfmd, kpmd, iovrlap, iseed, kl1minf, kl1maxf, \
--             kl2minf, kl2maxf, ilfomode, keqminf, keqmaxf, keqminl, keqmaxl, \
--             keqminq, keqmaxq, ieqmode, kfn [, il1fn] [, il2fn] [, ieqffn]   \
--             [, ieqlfn] [, ieqqfn] [, itabl] [, ioutfn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/oscbnk.html</a>
oscbnk :: Sig -> Sig -> Sig -> Sig -> D -> D -> Sig -> Sig -> Sig -> Sig -> D -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> Tab -> Sig

-- | A simple oscillator.
--   
--   oscil reads table ifn sequentially and repeatedly at a frequency xcps.
--   The amplitude is scaled by xamp.
--   
--   <pre>
--   ares  oscil  xamp, xcps [, ifn, iphs]
--   kres  oscil  kamp, kcps [, ifn, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/oscil.html</a>
oscil :: Sig -> Sig -> Tab -> Sig

-- | A simple oscillator with cubic interpolation.
--   
--   oscil3 reads table ifn sequentially and repeatedly at a frequency
--   xcps. The amplitude is scaled by xamp. Cubic interpolation is applied
--   for table look up from internal phase values.
--   
--   <pre>
--   ares  oscil3  xamp, xcps [, ifn, iphs]
--   kres  oscil3  kamp, kcps [, ifn, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/oscil3.html</a>
oscil3 :: Sig -> Sig -> Tab -> Sig

-- | A simple oscillator with linear interpolation.
--   
--   oscili reads table ifn sequentially and repeatedly at a frequency
--   xcps. The amplitude is scaled by xamp. Linear interpolation is applied
--   for table look up from internal phase values.
--   
--   <pre>
--   ares  oscili  xamp, xcps, ifn [, iphs]
--   kres  oscili  kamp, kcps, ifn [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/oscili.html</a>
oscili :: Sig -> Sig -> Tab -> Sig

-- | A linearly interpolated oscillator that allows changing the table
--   number at k-rate.
--   
--   oscilikt is very similar to oscili, but allows changing the table
--   number at k-rate. It is slightly slower than oscili (especially with
--   high control rate), although also more accurate as it uses a 31-bit
--   phase accumulator, as opposed to the 24-bit one used by oscili.
--   
--   <pre>
--   ares  oscilikt  xamp, xcps, kfn [, iphs] [, istor]
--   kres  oscilikt  kamp, kcps, kfn [, iphs] [, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/oscilikt.html</a>
oscilikt :: Sig -> Sig -> Tab -> Sig

-- | A linearly interpolated oscillator that allows allows phase
--   modulation.
--   
--   osciliktp allows phase modulation (which is actually implemented as
--   k-rate frequency modulation, by differentiating phase input). The
--   disadvantage is that there is no amplitude control, and frequency can
--   be varied only at the control-rate. This opcode can be faster or
--   slower than oscilikt, depending on the control-rate.
--   
--   <pre>
--   ares  osciliktp  kcps, kfn, kphs [, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/osciliktp.html</a>
osciliktp :: Sig -> Tab -> Sig -> Sig

-- | A linearly interpolated oscillator with sync status that allows
--   changing the table number at k-rate.
--   
--   oscilikts is the same as oscilikt. Except it has a sync input that can
--   be used to re-initialize the oscillator to a k-rate phase value. It is
--   slower than oscilikt and osciliktp.
--   
--   <pre>
--   ares  oscilikts  xamp, xcps, kfn, async, kphs [, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/oscilikts.html</a>
oscilikts :: Sig -> Sig -> Tab -> Sig -> Sig -> Sig

-- | Accesses table values at a user-defined frequency.
--   
--   Accesses table values at a user-defined frequency. This opcode can
--   also be written as oscilx.
--   
--   <pre>
--   ares  osciln  kamp, ifrq, ifn, itimes
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/osciln.html</a>
osciln :: Sig -> D -> Tab -> D -> Sig

-- | A simple, fast sine oscillator
--   
--   Simple, fast sine oscillator, that uses only one multiply, and two add
--   operations to generate one sample of output, and does not require a
--   function table.
--   
--   <pre>
--   ares  oscils  iamp, icps, iphs [, iflg]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/oscils.html</a>
oscils :: D -> D -> D -> Sig

-- | High precision oscillator.
--   
--   <pre>
--   ares  poscil  aamp, acps [, ifn, iphs]
--   ares  poscil  aamp, kcps [, ifn, iphs]
--   ares  poscil  kamp, acps [, ifn, iphs]
--   ares  poscil  kamp, kcps [, ifn, iphs]
--   ires  poscil  kamp, kcps [, ifn, iphs]
--   kres  poscil  kamp, kcps [, ifn, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/poscil.html</a>
poscil :: Sig -> Sig -> Tab -> Sig

-- | High precision oscillator with cubic interpolation.
--   
--   <pre>
--   ares  poscil3  aamp, acps [, ifn, iphs]
--   ares  poscil3  aamp, kcps [, ifn, iphs]
--   ares  poscil3  kamp, acps [, ifn, iphs]
--   ares  poscil3  kamp, kcps [, ifn, iphs]
--   ires  poscil3  kamp, kcps [, ifn, iphs]
--   kres  poscil3  kamp, kcps [, ifn, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/poscil3.html</a>
poscil3 :: Sig -> Sig -> Tab -> Sig

-- | Easier-to-use user-controllable vibrato.
--   
--   <pre>
--   kout  vibr  kAverageAmp, kAverageFreq, ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vibr.html</a>
vibr :: Sig -> Sig -> Tab -> Sig

-- | Generates a natural-sounding user-controllable vibrato.
--   
--   <pre>
--   kout  vibrato  kAverageAmp, kAverageFreq, kRandAmountAmp, kRandAmountFreq, kAmpMinRate, kAmpMaxRate, kcpsMinRate, kcpsMaxRate, ifn [, iphs
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vibrato.html</a>
vibrato :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Output is a set of harmonically related sine partials.
--   
--   <pre>
--   ares  buzz  xamp, xcps, knh, ifn [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/buzz.html</a>
buzz :: Sig -> Sig -> Sig -> Tab -> Sig

-- | Output is a set of harmonically related cosine partials.
--   
--   <pre>
--   ares  gbuzz  xamp, xcps, knh, klh, kmul, ifn [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gbuzz.html</a>
gbuzz :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Generates a set of impulses.
--   
--   Generates a set of impulses of amplitude kamp separated by kintvl
--   seconds (or samples if kintvl is negative). The first impulse is
--   generated after a delay of ioffset seconds.
--   
--   <pre>
--   ares  mpulse  kamp, kintvl [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mpulse.html</a>
mpulse :: Sig -> Sig -> Sig

-- | Implementation of a band limited, analog modeled oscillator.
--   
--   Implementation of a band limited, analog modeled oscillator, based on
--   integration of band limited impulses. vco can be used to simulate a
--   variety of analog wave forms.
--   
--   <pre>
--   ares  vco  xamp, xcps, iwave, kpw [, ifn] [, imaxd] [, ileak] [, inyx] \
--             [, iphs] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vco.html</a>
vco :: Sig -> Sig -> D -> Sig -> Sig

-- | Implementation of a band-limited oscillator using pre-calculated
--   tables.
--   
--   vco2 is similar to vco. But the implementation uses pre-calculated
--   tables of band-limited waveforms (see also GEN30) rather than
--   integrating impulses. This opcode can be faster than vco (especially
--   if a low control-rate is used) and also allows better sound quality.
--   Additionally, there are more waveforms and oscillator phase can be
--   modulated at k-rate. The disadvantage is increased memory usage. For
--   more details about vco2 tables, see also vco2init and vco2ft.
--   
--   <pre>
--   ares  vco2  kamp, kcps [, imode] [, kpw] [, kphs] [, inyx]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vco2.html</a>
vco2 :: Sig -> Sig -> Sig

-- | Returns a table number at k-time for a given oscillator frequency and
--   wavform.
--   
--   vco2ft returns the function table number to be used for generating the
--   specified waveform at a given frequency. This function table number
--   can be used by any Csound opcode that generates a signal by reading
--   function tables (like oscilikt). The tables must be calculated by
--   vco2init before vco2ft is called and shared as Csound ftables
--   (ibasfn).
--   
--   <pre>
--   kfn  vco2ft  kcps, iwave [, inyx]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vco2ft.html</a>
vco2ft :: Sig -> D -> Tab

-- | Returns a table number at i-time for a given oscillator frequency and
--   wavform.
--   
--   vco2ift is the same as vco2ft, but works at i-time. It is suitable for
--   use with opcodes that expect an i-rate table number (for example,
--   oscili).
--   
--   <pre>
--   ifn  vco2ift  icps, iwave [, inyx]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vco2ift.html</a>
vco2ift :: D -> D -> Tab

-- | Calculates tables for use by vco2 opcode.
--   
--   vco2init calculates tables for use by vco2 opcode. Optionally, it is
--   also possible to access these tables as standard Csound function
--   tables. In this case, vco2ft can be used to find the correct table
--   number for a given oscillator frequency.
--   
--   <pre>
--   ifn  vco2init  iwave [, ibasfn] [, ipmul] [, iminsiz] [, imaxsiz] [, isrcft]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vco2init.html</a>
vco2init :: D -> SE Tab

-- | Two mutually frequency and/or phase modulated oscillators.
--   
--   Two oscillators, mutually frequency and/or phase modulated by each
--   other.
--   
--   <pre>
--   a1, a2  crossfm  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/crossfm.html</a>
crossfm :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> (Sig, Sig)

-- | Two mutually frequency and/or phase modulated oscillators.
--   
--   Two oscillators, mutually frequency and/or phase modulated by each
--   other.
--   
--   <pre>
--   a1, a2  crossfmi  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/crossfm.html</a>
crossfmi :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> (Sig, Sig)

-- | Two mutually frequency and/or phase modulated oscillators.
--   
--   Two oscillators, mutually frequency and/or phase modulated by each
--   other.
--   
--   <pre>
--   a1, a2  crosspm  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/crossfm.html</a>
crosspm :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> (Sig, Sig)

-- | Two mutually frequency and/or phase modulated oscillators.
--   
--   Two oscillators, mutually frequency and/or phase modulated by each
--   other.
--   
--   <pre>
--   a1, a2  crosspmi  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/crossfm.html</a>
crosspmi :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> (Sig, Sig)

-- | Two mutually frequency and/or phase modulated oscillators.
--   
--   Two oscillators, mutually frequency and/or phase modulated by each
--   other.
--   
--   <pre>
--   a1, a2  crossfmpm  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/crossfm.html</a>
crossfmpm :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> (Sig, Sig)

-- | Two mutually frequency and/or phase modulated oscillators.
--   
--   Two oscillators, mutually frequency and/or phase modulated by each
--   other.
--   
--   <pre>
--   a1, a2  crossfmpmi  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/crossfm.html</a>
crossfmpmi :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> (Sig, Sig)

-- | Uses FM synthesis to create a Hammond B3 organ sound.
--   
--   Uses FM synthesis to create a Hammond B3 organ sound. It comes from a
--   family of FM sounds, all using 4 basic oscillators and various
--   architectures, as used in the TX81Z synthesizer.
--   
--   <pre>
--   ares  fmb3  kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, ifn3, \
--             ifn4, ivfn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fmb3.html</a>
fmb3 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Uses FM synthesis to create a tublar bell sound.
--   
--   Uses FM synthesis to create a tublar bell sound. It comes from a
--   family of FM sounds, all using 4 basic oscillators and various
--   architectures, as used in the TX81Z synthesizer.
--   
--   <pre>
--   ares  fmbell  kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, ifn3, \
--             ifn4, ivfn, isus]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fmbell.html</a>
fmbell :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Uses FM synthesis to create a âHeavy Metalâ sound.
--   
--   Uses FM synthesis to create a âHeavy Metalâ sound. It comes from a
--   family of FM sounds, all using 4 basic oscillators and various
--   architectures, as used in the TX81Z synthesizer.
--   
--   <pre>
--   ares  fmmetal  kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, \
--             ifn4, ivfn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fmmetal.html</a>
fmmetal :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> Tab -> Tab -> Tab -> Sig

-- | Uses FM synthesis to create a percussive flute sound.
--   
--   Uses FM synthesis to create a percussive flute sound. It comes from a
--   family of FM sounds, all using 4 basic oscillators and various
--   architectures, as used in the TX81Z synthesizer.
--   
--   <pre>
--   ares  fmpercfl  kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, \
--             ifn3, ifn4, ivfn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fmpercfl.html</a>
fmpercfl :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Uses FM synthesis to create a Fender Rhodes electric piano sound.
--   
--   Uses FM synthesis to create a Fender Rhodes electric piano sound. It
--   comes from a family of FM sounds, all using 4 basic oscillators and
--   various architectures, as used in the TX81Z synthesizer.
--   
--   <pre>
--   ares  fmrhode  kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, \
--             ifn3, ifn4, ivfn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fmrhode.html</a>
fmrhode :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> Tab -> Tab -> Tab -> Sig

-- | FM Singing Voice Synthesis
--   
--   <pre>
--   ares  fmvoice  kamp, kfreq, kvowel, ktilt, kvibamt, kvibrate[, ifn1, \
--             ifn2, ifn3, ifn4, ivibfn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fmvoice.html</a>
fmvoice :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Uses FM synthesis to create a Wurlitzer electric piano sound.
--   
--   Uses FM synthesis to create a Wurlitzer electric piano sound. It comes
--   from a family of FM sounds, all using 4 basic oscillators and various
--   architectures, as used in the TX81Z synthesizer.
--   
--   <pre>
--   ares  fmwurlie  kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, \
--             ifn4, ivfn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fmwurlie.html</a>
fmwurlie :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> Tab -> Tab -> Tab -> Sig

-- | A basic frequency modulated oscillator.
--   
--   <pre>
--   ares  foscil  xamp, kcps, xcar, xmod, kndx, ifn [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/foscil.html</a>
foscil :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Basic frequency modulated oscillator with linear interpolation.
--   
--   <pre>
--   ares  foscili  xamp, kcps, xcar, xmod, kndx, ifn [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/foscili.html</a>
foscili :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Synchronous granular synthesis, using a soundfile as source.
--   
--   diskgrain implements synchronous granular synthesis. The source sound
--   for the grains is obtained by reading a soundfile containing the
--   samples of the source waveform.
--   
--   <pre>
--   asig  diskgrain  Sfname, kamp, kfreq, kpitch, kgrsize, kprate, \
--             ifun, iolaps [,imaxgrsize , ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/diskgrain.html</a>
diskgrain :: Str -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> Sig

-- | Produces sinusoid bursts useful for formant and granular synthesis.
--   
--   Audio output is a succession of sinusoid bursts initiated at frequency
--   xfund with a spectral peak at xform. For xfund above 25 Hz these
--   bursts produce a speech-like formant with spectral characteristics
--   determined by the k-input parameters. For lower fundamentals this
--   generator provides a special form of granular synthesis.
--   
--   <pre>
--   ares  fof  xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, \
--             ifna, ifnb, itotdur [, iphs] [, ifmode] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fof.html</a>
fof :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> Tab -> Tab -> D -> Sig

-- | Produces sinusoid bursts including k-rate incremental indexing with
--   each successive burst.
--   
--   Audio output is a succession of sinusoid bursts initiated at frequency
--   xfund with a spectral peak at xform. For xfund above 25 Hz these
--   bursts produce a speech-like formant with spectral characteristics
--   determined by the k-input parameters. For lower fundamentals this
--   generator provides a special form of granular synthesis.
--   
--   <pre>
--   ares  fof2  xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, \
--             ifna, ifnb, itotdur, kphs, kgliss [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fof2.html</a>
fof2 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> Tab -> Tab -> D -> Sig -> Sig -> Sig

-- | Audio output is a succession of grains derived from data in a stored
--   function table
--   
--   Audio output is a succession of grains derived from data in a stored
--   function table ifna. The local envelope of these grains and their
--   timing is based on the model of fof synthesis and permits detailed
--   control of the granular synthesis.
--   
--   <pre>
--   ares  fog  xamp, xdens, xtrans, aspd, koct, kband, kris, kdur, kdec, \
--             iolaps, ifna, ifnb, itotdur [, iphs] [, itmode] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fog.html</a>
fog :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> Tab -> Tab -> D -> Sig

-- | Generates granular synthesis textures.
--   
--   <pre>
--   ares  grain  xamp, xpitch, xdens, kampoff, kpitchoff, kgdur, igfn, \
--             iwfn, imgdur [, igrnd]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/grain.html</a>
grain :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> D -> Sig

-- | Easy-to-use granular synthesis texture generator.
--   
--   Generate granular synthesis textures. grain2 is simpler to use, but
--   grain3 offers more control.
--   
--   <pre>
--   ares  grain2  kcps, kfmd, kgdur, iovrlp, kfn, iwfn [, irpow] \
--             [, iseed] [, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/grain2.html</a>
grain2 :: Sig -> Sig -> Sig -> D -> Tab -> Tab -> Sig

-- | Generate granular synthesis textures with more user control.
--   
--   Generate granular synthesis textures. grain2 is simpler to use but
--   grain3 offers more control.
--   
--   <pre>
--   ares  grain3  kcps, kphs, kfmd, kpmd, kgdur, kdens, imaxovr, kfn, iwfn, \
--             kfrpow, kprpow [, iseed] [, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/grain3.html</a>
grain3 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> Tab -> Tab -> Sig -> Sig -> Sig

-- | A more complex granular synthesis texture generator.
--   
--   The granule unit generator is more complex than grain, but does add
--   new possibilities.
--   
--   <pre>
--   ares  granule  xamp, ivoice, iratio, imode, ithd, ifn, ipshift, igskip, \
--             igskip_os, ilength, kgap, igap_os, kgsize, igsize_os, iatt, idec \
--             [, iseed] [, ipitch1] [, ipitch2] [, ipitch3] [, ipitch4] [, ifnenv]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/granule.html</a>
granule :: Sig -> D -> D -> D -> D -> Tab -> D -> D -> D -> D -> Sig -> D -> Sig -> D -> D -> D -> Sig

-- | Granular synthesizer with "per grain" control over many of its
--   parameters. Has a sync input to sychronize its internal grain
--   scheduler clock to an external clock source.
--   
--   partikkel was conceived after reading Curtis Roads' book
--   <a>Microsound</a>, and the goal was to create an opcode that was
--   capable of all time-domain varieties of granular synthesis described
--   in this book. The idea being that most of the techniques only differ
--   in parameter values, and by having a single opcode that can do all
--   varieties of granular synthesis makes it possible to interpolate
--   between techniques. Granular synthesis is sometimes dubbed particle
--   synthesis, and it was thought apt to name the opcode partikkel to
--   distinguish it from other granular opcodes.
--   
--   <pre>
--   a1 [, a2, a3, a4, a5, a6, a7, a8]  partikkel  agrainfreq, \
--                     kdistribution, idisttab, async, kenv2amt, ienv2tab, ienv_attack, \
--                     ienv_decay, ksustain_amount, ka_d_ratio, kduration, kamp, igainmasks, \
--                     kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfm, \
--                     ifmamptab, kfmenv, icosine, ktraincps, knumpartials, kchroma, \
--                     ichannelmasks, krandommask, kwaveform1, kwaveform2, kwaveform3, \
--                     kwaveform4, iwaveamptab, asamplepos1, asamplepos2, asamplepos3, \
--                     asamplepos4, kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains \
--                     [, iopcode_id]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/partikkel.html</a>
partikkel :: Tuple a => Sig -> Sig -> D -> Sig -> Sig -> D -> D -> D -> Sig -> Sig -> Sig -> Sig -> D -> Sig -> Sig -> D -> D -> Sig -> D -> Sig -> D -> Sig -> Sig -> Sig -> D -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> a

-- | Outputs partikkel's grain scheduler clock pulse and phase to
--   synchronize several instances of the partikkel opcode to the same
--   clock source.
--   
--   partikkelsync is an opcode for outputting partikkel's grain scheduler
--   clock pulse and phase. partikkelsync's output can be used to
--   synchronize other instances of the partikkel opcode to the same clock.
--   
--   <pre>
--   async [,aphase]  partikkelsync  iopcode_id
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/partikkelsync.html</a>
partikkelsync :: Tuple a => D -> a

-- | Reads a mono sound sample from a table and applies time-stretching
--   and/or pitch modification.
--   
--   sndwarp reads sound samples from a table and applies time-stretching
--   and/or pitch modification. Time and frequency modification are
--   independent from one another. For example, a sound can be stretched in
--   time while raising the pitch!
--   
--   <pre>
--   ares [, ac]  sndwarp  xamp, xtimewarp, xresample, ifn1, ibeg, iwsize, \
--             irandw, ioverlap, ifn2, itimemode
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sndwarp.html</a>
sndwarp :: Tuple a => Sig -> Sig -> Sig -> Tab -> D -> D -> D -> D -> Tab -> D -> a

-- | Reads a stereo sound sample from a table and applies time-stretching
--   and/or pitch modification.
--   
--   sndwarpst reads stereo sound samples from a table and applies
--   time-stretching and/or pitch modification. Time and frequency
--   modification are independent from one another. For example, a sound
--   can be stretched in time while raising the pitch!
--   
--   <pre>
--   ar1, ar2 [,ac1] [, ac2]  sndwarpst  xamp, xtimewarp, xresample, ifn1, \
--             ibeg, iwsize, irandw, ioverlap, ifn2, itimemode
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sndwarpst.html</a>
sndwarpst :: Tuple a => Sig -> Sig -> Sig -> Tab -> D -> D -> D -> D -> Tab -> D -> a

-- | Synchronous granular synthesis.
--   
--   syncgrain implements synchronous granular synthesis. The source sound
--   for the grains is obtained by reading a function table containing the
--   samples of the source waveform. For sampled-sound sources, GEN01 is
--   used. syncgrain will accept deferred allocation tables.
--   
--   <pre>
--   asig  syncgrain  kamp, kfreq, kpitch, kgrsize, kprate, ifun1, \
--             ifun2, iolaps
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/syncgrain.html</a>
syncgrain :: Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> D -> Sig

-- | Synchronous granular synthesis.
--   
--   syncloop is a variation on syncgrain, which implements synchronous
--   granular synthesis. syncloop adds loop start and end points and an
--   optional start position. Loop start and end control grain start
--   positions, so the actual grains can go beyond the loop points (if the
--   loop points are not at the extremes of the table), enabling seamless
--   crossfading. For more information on the granular synthesis process,
--   check the syncgrain manual page.
--   
--   <pre>
--   asig  syncloop  kamp, kfreq, kpitch, kgrsize, kprate, klstart, \
--             klend, ifun1, ifun2, iolaps[,istart, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/syncloop.html</a>
syncloop :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> D -> Sig

-- | Simple vocal simulation based on glottal pulses with formant
--   characteristics.
--   
--   This opcode produces a simple vocal simulation based on glottal pulses
--   with formant characteristics. Output is a series of sound events,
--   where each event is composed of a burst of squared sine pulses
--   followed by silence. The VOSIM (VOcal SIMulation) synthesis method was
--   developed by Kaegi and Tempelaars in the 1970's.
--   
--   <pre>
--   ar  vosim  kamp, kFund, kForm, kDecay, kPulseCount, kPulseFactor, ifn [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vosim.html</a>
vosim :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Allows one-dimensional Hyper Vectorial Synthesis (HVS) controlled by
--   externally-updated k-variables.
--   
--   hvs1 allows one-dimensional Hyper Vectorial Synthesis (HVS) controlled
--   by externally-updated k-variables.
--   
--   <pre>
--   hvs1  kx, inumParms, inumPointsX, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hvs1.html</a>
hvs1 :: Sig -> D -> D -> D -> D -> D -> SE ()

-- | Allows two-dimensional Hyper Vectorial Synthesis (HVS) controlled by
--   externally-updated k-variables.
--   
--   hvs2 allows two-dimensional Hyper Vectorial Synthesis (HVS) controlled
--   by externally-updated k-variables.
--   
--   <pre>
--   hvs2  kx, ky, inumParms, inumPointsX, inumPointsY, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hvs2.html</a>
hvs2 :: Sig -> Sig -> D -> D -> D -> D -> D -> D -> SE ()

-- | Allows three-dimensional Hyper Vectorial Synthesis (HVS) controlled by
--   externally-updated k-variables.
--   
--   hvs3 allows three-dimensional Hyper Vectorial Synthesis (HVS)
--   controlled by externally-updated k-variables.
--   
--   <pre>
--   hvs3  kx, ky, kz, inumParms, inumPointsX, inumPointsY, inumPointsZ, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/hvs3.html</a>
hvs3 :: Sig -> Sig -> Sig -> D -> D -> D -> D -> D -> D -> D -> SE ()

-- | Trace a series of line segments between specified points with cosine
--   interpolation.
--   
--   <pre>
--   ares  cosseg  ia, idur1, ib [, idur2] [, ic] [...]
--   kres  cosseg  ia, idur1, ib [, idur2] [, ic] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cosseg.html</a>
cosseg :: [D] -> Sig

-- | Trace a series of line segments between specified absolute points with
--   cosine interpolation.
--   
--   <pre>
--   ares  cossegb  ia, itim1, ib [, itim2] [, ic] [...]
--   kres  cossegb  ia, itim1, ib [, itim2] [, ic] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cossegb.html</a>
cossegb :: [D] -> Sig

-- | Trace a series of line segments between specified points with cosine
--   interpolation, including a release segment.
--   
--   <pre>
--   ares  cossegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz
--   kres  cossegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cossegr.html</a>
cossegr :: [D] -> D -> D -> Sig

-- | This opcode implements a formula for generating a normalised
--   exponential curve in range 0 - 1. It is based on the Max / MSP work of
--   Eric Singer (c) 1994.
--   
--   Generates an exponential curve in range 0 to 1 of arbitrary steepness.
--   Steepness index equal to or lower than 1.0 will result in Not-a-Number
--   errors and cause unstable behavior.
--   
--   <pre>
--   kout  expcurve  kindex, ksteepness
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/expcurve.html</a>
expcurve :: Sig -> Sig -> Sig

-- | Trace an exponential curve between specified points.
--   
--   <pre>
--   ares  expon  ia, idur, ib
--   kres  expon  ia, idur, ib
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/expon.html</a>
expon :: D -> D -> D -> Sig

-- | Trace a series of exponential segments between specified points.
--   
--   <pre>
--   ares  expseg  ia, idur1, ib [, idur2] [, ic] [...]
--   kres  expseg  ia, idur1, ib [, idur2] [, ic] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/expseg.html</a>
expseg :: [D] -> Sig

-- | An exponential segment generator operating at a-rate.
--   
--   An exponential segment generator operating at a-rate. This unit is
--   almost identical to expseg, but more precise when defining segments
--   with very short durations (i.e., in a percussive attack phase) at
--   audio rate.
--   
--   <pre>
--   ares  expsega  ia, idur1, ib [, idur2] [, ic] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/expsega.html</a>
expsega :: [D] -> Sig

-- | Trace a series of exponential segments between specified absolute
--   points.
--   
--   <pre>
--   ares  expsegb  ia, itim1, ib [, itim2] [, ic] [...]
--   kres  expsegb  ia, itim1, ib [, itim2] [, ic] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/expsegb.html</a>
expsegb :: [D] -> Sig

-- | An exponential segment generator operating at a-rate with absolute
--   times.
--   
--   An exponential segment generator operating at a-rate. This unit is
--   almost identical to expsegb, but more precise when defining segments
--   with very short durations (i.e., in a percussive attack phase) at
--   audio rate.
--   
--   <pre>
--   ares  expsegba  ia, itim1, ib [, itim2] [, ic] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/expsegba.html</a>
expsegba :: D -> D -> D -> Sig

-- | Trace a series of exponential segments between specified points
--   including a release segment.
--   
--   <pre>
--   ares  expsegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz
--   kres  expsegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/expsegr.html</a>
expsegr :: [D] -> D -> D -> Sig

-- | An implementation of a logarithmic gain curve which is similar to the
--   gainslider~ object from Cycling 74 Max / MSP.
--   
--   This opcode is intended for use to multiply by an audio signal to give
--   a console mixer like feel. There is no bounds in the source code so
--   you can for example give higher than 127 values for extra amplitude
--   but possibly clipped audio.
--   
--   <pre>
--   kout  gainslider  kindex
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gainslider.html</a>
gainslider :: Sig -> Sig

-- | A jitter-spline generator.
--   
--   <pre>
--   ares  jspline  xamp, kcpsMin, kcpsMax
--   kres  jspline  kamp, kcpsMin, kcpsMax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/jspline.html</a>
jspline :: Sig -> Sig -> Sig -> SE Sig

-- | Trace a straight line between specified points.
--   
--   <pre>
--   ares  line  ia, idur, ib
--   kres  line  ia, idur, ib
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/line.html</a>
line :: D -> D -> D -> Sig

-- | Trace a series of line segments between specified points.
--   
--   <pre>
--   ares  linseg  ia, idur1, ib [, idur2] [, ic] [...]
--   kres  linseg  ia, idur1, ib [, idur2] [, ic] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/linseg.html</a>
linseg :: [D] -> Sig

-- | Trace a series of line segments between specified absolute points.
--   
--   <pre>
--   ares  linsegb  ia, itim1, ib [, itim2] [, ic] [...]
--   kres  linsegb  ia, itim1, ib [, itim2] [, ic] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/linsegb.html</a>
linsegb :: [D] -> Sig

-- | Trace a series of line segments between specified points including a
--   release segment.
--   
--   <pre>
--   ares  linsegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz
--   kres  linsegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/linsegr.html</a>
linsegr :: [D] -> D -> D -> Sig

-- | This opcode implements a formula for generating a normalised
--   logarithmic curve in range 0 - 1. It is based on the Max / MSP work of
--   Eric Singer (c) 1994.
--   
--   Generates a logarithmic curve in range 0 to 1 of arbitrary steepness.
--   Steepness index equal to or lower than 1.0 will result in Not-a-Number
--   errors and cause unstable behavior.
--   
--   <pre>
--   kout  logcurve  kindex, ksteepness
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/logcurve.html</a>
logcurve :: Sig -> Sig -> Sig

-- | Generate control signal consisting of linear segments delimited by two
--   or more specified points.
--   
--   Generate control signal consisting of linear segments delimited by two
--   or more specified points. The entire envelope is looped at kfreq rate.
--   Each parameter can be varied at k-rate.
--   
--   <pre>
--   ksig  loopseg  kfreq, ktrig, iphase, ktime0, kvalue0 [, ktime1] [, kvalue1] \
--             [, ktime2] [, kvalue2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/loopseg.html</a>
loopseg :: Sig -> Sig -> D -> [Sig] -> Sig

-- | Control signals based on linear segments.
--   
--   Generate control signal consisiting of linear segments delimited by
--   two or more specified points. The entire envelope can be looped at
--   time-variant rate. Each segment coordinate can also be varied at
--   k-rate.
--   
--   <pre>
--   ksig  loopsegp   kphase, kvalue0, kdur0, kvalue1 \
--             [, kdur1, ... , kdurN-1, kvalueN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/loopsegp.html</a>
loopsegp :: Sig -> [Sig] -> Sig

-- | Generate control signal consisting of exponential or linear segments
--   delimited by two or more specified points.
--   
--   Generate control signal consisting of controllable exponential
--   segments or linear segments delimited by two or more specified points.
--   The entire envelope is looped at kfreq rate. Each parameter can be
--   varied at k-rate.
--   
--   <pre>
--   ksig  looptseg  kfreq, ktrig, ktime0, kvalue0, ktype0, [, ktime1] [, kvalue1] [,ktype1] \
--             [, ktime2] [, kvalue2] [,ktype2] [...][, ktimeN] [, kvalueN]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/looptseg.html</a>
looptseg :: Sig -> Sig -> [Sig] -> Sig

-- | Generate control signal consisting of exponential segments delimited
--   by two or more specified points.
--   
--   Generate control signal consisting of exponential segments delimited
--   by two or more specified points. The entire envelope is looped at
--   kfreq rate. Each parameter can be varied at k-rate.
--   
--   <pre>
--   ksig  loopxseg  kfreq, ktrig, iphase, ktime0, kvalue0 [, ktime1] [, kvalue1] \
--             [, ktime2] [, kvalue2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/loopxseg.html</a>
loopxseg :: Sig -> Sig -> D -> [Sig] -> Sig

-- | Generate control signal consisting of held segments.
--   
--   Generate control signal consisting of held segments delimited by two
--   or more specified points. The entire envelope is looped at kfreq rate.
--   Each parameter can be varied at k-rate.
--   
--   <pre>
--   ksig  lpshold  kfreq, ktrig, iphase, ktime0, kvalue0  [, ktime1] [, kvalue1] [, ktime2] [, kvalue2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lpshold.html</a>
lpshold :: Sig -> Sig -> D -> [Sig] -> Sig

-- | Control signals based on held segments.
--   
--   Generate control signal consisiting of held segments delimited by two
--   or more specified points. The entire envelope can be looped at
--   time-variant rate. Each segment coordinate can also be varied at
--   k-rate.
--   
--   <pre>
--   ksig  lpsholdp   kphase, ktrig, ktime0, kvalue0  [, ktime1] [, kvalue1] \
--             [, ktime2] [, kvalue2] [...]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lpsholdp.html</a>
lpsholdp :: Sig -> Sig -> [Sig] -> Sig

-- | Generate random spline curves.
--   
--   <pre>
--   ares  rspline  xrangeMin, xrangeMax, kcpsMin, kcpsMax
--   kres  rspline  krangeMin, krangeMax, kcpsMin, kcpsMax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/rspline.html</a>
rspline :: Sig -> Sig -> Sig -> Sig -> SE Sig

-- | Arbitrary signal scaling.
--   
--   Scales incoming value to user-definable range. Similar to scale object
--   found in popular dataflow languages.
--   
--   <pre>
--   kscl  scale  kinput, kmax, kmin
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/scale.html</a>
scale :: Sig -> Sig -> Sig -> Sig

-- | Constructs a user-definable envelope.
--   
--   <pre>
--   ares  transeg  ia, idur, itype, ib [, idur2] [, itype] [, ic] ...
--   kres  transeg  ia, idur, itype, ib [, idur2] [, itype] [, ic] ...
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/transeg.html</a>
transeg :: [D] -> Sig

-- | Constructs a user-definable envelope in absolute time.
--   
--   <pre>
--   ares  transegb  ia, itim, itype, ib [, itim2] [, itype] [, ic] ...
--   kres  transegb  ia, itim, itype, ib [, itim2] [, itype] [, ic] ...
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/transegb.html</a>
transegb :: [D] -> Sig

-- | Constructs a user-definable envelope with extended release segment.
--   
--   Constructs a user-definable envelope. It is the same as transeg, with
--   an extended release segment.
--   
--   <pre>
--   ares  transegr  ia, idur, itype, ib [, idur2] [, itype] [, ic] ...
--   kres  transegr  ia, idur, itype, ib [, idur2] [, itype] [, ic] ...
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/transegr.html</a>
transegr :: [D] -> D -> D -> Sig

-- | Calculates the classical ADSR envelope using linear segments.
--   
--   <pre>
--   ares  adsr  iatt, idec, islev, irel [, idel]
--   kres  adsr  iatt, idec, islev, irel [, idel]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/adsr.html</a>
adsr :: D -> D -> D -> D -> Sig

-- | Applies an envelope consisting of 3 segments.
--   
--   envlpx -- apply an envelope consisting of 3 segments:
--   
--   <pre>
--   ares  envlpx  xamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]
--   kres  envlpx  kamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/envlpx.html</a>
envlpx :: Sig -> D -> D -> D -> Tab -> D -> D -> Sig

-- | The envlpx opcode with a final release segment.
--   
--   envlpxr is the same as envlpx except that the final segment is entered
--   only on sensing a MIDI note release. The note is then extended by the
--   decay time.
--   
--   <pre>
--   ares  envlpxr  xamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]
--   kres  envlpxr  kamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/envlpxr.html</a>
envlpxr :: Sig -> D -> D -> Tab -> D -> D -> Sig

-- | Applies a straight line rise and decay pattern to an input amp signal.
--   
--   linen -- apply a straight line rise and decay pattern to an input amp
--   signal.
--   
--   <pre>
--   ares  linen  xamp, irise, idur, idec
--   kres  linen  kamp, irise, idur, idec
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/linen.html</a>
linen :: Sig -> D -> D -> D -> Sig

-- | The linen opcode extended with a final release segment.
--   
--   linenr -- same as linen except that the final segment is entered only
--   on sensing a MIDI note release. The note is then extended by the decay
--   time.
--   
--   <pre>
--   ares  linenr  xamp, irise, idec, iatdec
--   kres  linenr  kamp, irise, idec, iatdec
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/linenr.html</a>
linenr :: Sig -> D -> D -> D -> Sig

-- | Calculates the classical ADSR envelope using the linsegr mechanism.
--   
--   <pre>
--   ares  madsr  iatt, idec, islev, irel [, idel] [, ireltim]
--   kres  madsr  iatt, idec, islev, irel [, idel] [, ireltim]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/madsr.html</a>
madsr :: D -> D -> D -> D -> Sig

-- | Calculates the classical ADSR envelope using the expsegr mechanism.
--   
--   <pre>
--   ares  mxadsr  iatt, idec, islev, irel [, idel] [, ireltim]
--   kres  mxadsr  iatt, idec, islev, irel [, idel] [, ireltim]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mxadsr.html</a>
mxadsr :: D -> D -> D -> D -> Sig

-- | Calculates the classical ADSR envelope.
--   
--   Calculates the classical ADSR envelope
--   
--   <pre>
--   ares  xadsr  iatt, idec, islev, irel [, idel]
--   kres  xadsr  iatt, idec, islev, irel [, idel]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/xadsr.html</a>
xadsr :: D -> D -> D -> D -> Sig

-- | Semi-physical model of a bamboo sound.
--   
--   bamboo is a semi-physical model of a bamboo sound. It is one of the
--   PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic
--   Event Modeling) is an algorithmic approach for simulating collisions
--   of multiple independent sound producing objects.
--   
--   <pre>
--   ares  bamboo  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \
--             [, ifreq1] [, ifreq2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/bamboo.html</a>
bamboo :: Sig -> D -> Sig

-- | Creates a tone similar to a struck metal bar.
--   
--   Audio output is a tone similar to a struck metal bar, using a physical
--   model developed from solving the partial differential equation. There
--   are controls over the boundary conditions as well as the bar
--   characteristics.
--   
--   <pre>
--   ares  barmodel  kbcL, kbcR, iK, ib, kscan, iT30, ipos, ivel, iwid
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/barmodel.html</a>
barmodel :: Sig -> Sig -> D -> D -> Sig -> D -> D -> D -> D -> Sig

-- | Semi-physical model of a cabasa sound.
--   
--   cabasa is a semi-physical model of a cabasa sound. It is one of the
--   PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic
--   Event Modeling) is an algorithmic approach for simulating collisions
--   of multiple independent sound producing objects.
--   
--   <pre>
--   ares  cabasa  iamp, idettack [, inum] [, idamp] [, imaxshake]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cabasa.html</a>
cabasa :: D -> D -> Sig

-- | Simulates Chua's oscillator, an LRC oscillator with an active
--   resistor, proved capable of bifurcation and chaotic attractors, with
--   k-rate control of circuit elements.
--   
--   <pre>
--   aI3, aV2, aV1  chuap  kL, kR0, kC1, kG, kGa, kGb, kE, kC2, iI3, iV2, iV1, ktime_step
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/chuap.html</a>
chuap :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> D -> Sig -> (Sig, Sig, Sig)

-- | Semi-physical model of a crunch sound.
--   
--   crunch is a semi-physical model of a crunch sound. It is one of the
--   PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic
--   Event Modeling) is an algorithmic approach for simulating collisions
--   of multiple independent sound producing objects.
--   
--   <pre>
--   ares  crunch  iamp, idettack [, inum] [, idamp] [, imaxshake]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/crunch.html</a>
crunch :: D -> D -> Sig

-- | Semi-physical model of a water drop.
--   
--   dripwater is a semi-physical model of a water drop. It is one of the
--   PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic
--   Event Modeling) is an algorithmic approach for simulating collisions
--   of multiple independent sound producing objects.
--   
--   <pre>
--   ares  dripwater  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \
--             [, ifreq1] [, ifreq2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dripwater.html</a>
dripwater :: Sig -> D -> Sig

-- | Dynamic stochastic approach to waveform synthesis conceived by Iannis
--   Xenakis.
--   
--   Implementation of the GÃ©nÃ©ration Dynamique Stochastique (GENDYN), a
--   dynamic stochastic approach to waveform synthesis conceived by Iannis
--   Xenakis.
--   
--   <pre>
--   ares  gendy  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
--                  kampscl, kdurscl [, initcps] [, knum]
--   kres  gendy  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
--                  kampscl, kdurscl [, initcps] [, knum]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gendy.html</a>
gendy :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Dynamic stochastic approach to waveform synthesis using cubic
--   interpolation.
--   
--   Implementation with cubic interpolation of the GÃ©nÃ©ration Dynamique
--   Stochastique (GENDYN), a dynamic stochastic approach to waveform
--   synthesis conceived by Iannis Xenakis.
--   
--   <pre>
--   ares  gendyc  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
--                   kampscl, kdurscl [, initcps] [, knum]
--   kres  gendyc  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
--                   kampscl, kdurscl [, initcps] [, knum]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gendyc.html</a>
gendyc :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Variation of the dynamic stochastic approach to waveform synthesis
--   conceived by Iannis Xenakis.
--   
--   gendyx (gendy eXtended) is an implementation of the GÃ©nÃ©ration
--   Dynamique Stochastique (GENDYN), a dynamic stochastic approach to
--   waveform synthesis conceived by Iannis Xenakis, using curves instead
--   of segments.
--   
--   <pre>
--   ares  gendyx  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
--                   kampscl, kdurscl, kcurveup, kcurvedown [, initcps] [, knum]
--   kres  gendyx  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
--                   kampscl, kdurscl, kcurveup, kcurvedown [, initcps] [, knum]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gendyx.html</a>
gendyx :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Audio output is a tone related to the striking of a cow bell or
--   similar.
--   
--   Audio output is a tone related to the striking of a cow bell or
--   similar. The method is a physical model developed from Perry Cook, but
--   re-coded for Csound.
--   
--   <pre>
--   ares  gogobel  kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivfn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gogobel.html</a>
gogobel :: Sig -> Sig -> D -> D -> D -> Sig -> Sig -> Tab -> Sig

-- | Semi-physical model of a guiro sound.
--   
--   guiro is a semi-physical model of a guiro sound. It is one of the
--   PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic
--   Event Modeling) is an algorithmic approach for simulating collisions
--   of multiple independent sound producing objects.
--   
--   <pre>
--   ares  guiro  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/guiro.html</a>
guiro :: Sig -> D -> Sig

-- | Implements the Lorenz system of equations.
--   
--   Implements the Lorenz system of equations. The Lorenz system is a
--   chaotic-dynamic system which was originally used to simulate the
--   motion of a particle in convection currents and simplified weather
--   systems. Small differences in initial conditions rapidly lead to
--   diverging values. This is sometimes expressed as the butterfly effect.
--   If a butterfly flaps its wings in Australia, it will have an effect on
--   the weather in Alaska. This system is one of the milestones in the
--   development of chaos theory. It is useful as a chaotic audio source or
--   as a low frequency modulation source.
--   
--   <pre>
--   ax, ay, az  lorenz  ksv, krv, kbv, kh, ix, iy, iz, iskip [, iskipinit]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lorenz.html</a>
lorenz :: Sig -> Sig -> Sig -> Sig -> D -> D -> D -> D -> (Sig, Sig, Sig)

-- | Mandelbrot set
--   
--   Returns the number of iterations corresponding to a given point of
--   complex plane by applying the Mandelbrot set formula.
--   
--   <pre>
--   kiter, koutrig  mandel   ktrig, kx, ky, kmaxIter
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mandel.html</a>
mandel :: Sig -> Sig -> Sig -> Sig -> (Sig, Sig)

-- | An emulation of a mandolin.
--   
--   <pre>
--   ares  mandol  kamp, kfreq, kpluck, kdetune, kgain, ksize, ifn [, iminfreq]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/mandol.html</a>
mandol :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Physical model related to the striking of a wooden block.
--   
--   Audio output is a tone related to the striking of a wooden block as
--   found in a marimba. The method is a physical model developed from
--   Perry Cook but re-coded for Csound.
--   
--   <pre>
--   ares  marimba  kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec \
--             [, idoubles] [, itriples]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/marimba.html</a>
marimba :: Sig -> Sig -> D -> D -> D -> Sig -> Sig -> Tab -> D -> Sig

-- | An emulation of a mini-Moog synthesizer.
--   
--   <pre>
--   ares  moog  kamp, kfreq, kfiltq, kfiltrate, kvibf, kvamp, iafn, iwfn, ivfn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/moog.html</a>
moog :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> Tab -> Sig

-- | Simulates a planet orbiting in a binary star system.
--   
--   planet simulates a planet orbiting in a binary star system. The
--   outputs are the x, y and z coordinates of the orbiting planet. It is
--   possible for the planet to achieve escape velocity by a close
--   encounter with a star. This makes this system somewhat unstable.
--   
--   <pre>
--   ax, ay, az  planet  kmass1, kmass2, ksep, ix, iy, iz, ivx, ivy, ivz, idelta \
--             [, ifriction] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/planet.html</a>
planet :: Sig -> Sig -> Sig -> D -> D -> D -> D -> D -> D -> D -> (Sig, Sig, Sig)

-- | Creates a tone similar to a piano string prepared in a Cageian
--   fashion.
--   
--   Audio output is a tone similar to a piano string, prepared with a
--   number of rubbers and rattles. The method uses a physical model
--   developed from solving the partial differential equation.
--   
--   <pre>
--   ares  prepiano  ifreq, iNS, iD, iK, \
--           iT30,iB, kbcl, kbcr, imass, ifreq, iinit, ipos, ivel, isfreq, \
--           isspread[, irattles, irubbers]
--   al,ar  prepiano  ifreq, iNS, iD, iK, \
--           iT30,iB, kbcl, kbcr, imass, ifreq, iinit, ipos, ivel, isfreq, \
--           isspread[, irattles, irubbers]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/prepiano.html</a>
prepiano :: D -> D -> D -> D -> D -> D -> Sig -> Sig -> D -> D -> D -> D -> D -> D -> D -> (Sig, Sig)

-- | Semi-physical model of a sandpaper sound.
--   
--   sandpaper is a semi-physical model of a sandpaper sound. It is one of
--   the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic
--   Event Modeling) is an algorithmic approach for simulating collisions
--   of multiple independent sound producing objects.
--   
--   <pre>
--   ares  sandpaper  iamp, idettack [, inum] [, idamp] [, imaxshake]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sandpaper.html</a>
sandpaper :: D -> D -> Sig

-- | Semi-physical model of a sekere sound.
--   
--   sekere is a semi-physical model of a sekere sound. It is one of the
--   PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic
--   Event Modeling) is an algorithmic approach for simulating collisions
--   of multiple independent sound producing objects.
--   
--   <pre>
--   ares  sekere  iamp, idettack [, inum] [, idamp] [, imaxshake]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sekere.html</a>
sekere :: D -> D -> Sig

-- | Sounds like the shaking of a maraca or similar gourd instrument.
--   
--   Audio output is a tone related to the shaking of a maraca or similar
--   gourd instrument. The method is a physically inspired model developed
--   from Perry Cook, but re-coded for Csound.
--   
--   <pre>
--   ares  shaker  kamp, kfreq, kbeans, kdamp, ktimes [, idecay]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/shaker.html</a>
shaker :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Semi-physical model of a sleighbell sound.
--   
--   sleighbells is a semi-physical model of a sleighbell sound. It is one
--   of the PhISEM percussion opcodes. PhISEM (Physically Informed
--   Stochastic Event Modeling) is an algorithmic approach for simulating
--   collisions of multiple independent sound producing objects.
--   
--   <pre>
--   ares  sleighbells  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \
--             [, ifreq1] [, ifreq2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sleighbells.html</a>
sleighbells :: Sig -> D -> Sig

-- | Semi-physical model of a stick sound.
--   
--   stix is a semi-physical model of a stick sound. It is one of the
--   PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic
--   Event Modeling) is an algorithmic approach for simulating collisions
--   of multiple independent sound producing objects.
--   
--   <pre>
--   ares  stix  iamp, idettack [, inum] [, idamp] [, imaxshake]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/stix.html</a>
stix :: D -> D -> Sig

-- | Semi-physical model of a tambourine sound.
--   
--   tambourine is a semi-physical model of a tambourine sound. It is one
--   of the PhISEM percussion opcodes. PhISEM (Physically Informed
--   Stochastic Event Modeling) is an algorithmic approach for simulating
--   collisions of multiple independent sound producing objects.
--   
--   <pre>
--   ares  tambourine  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \
--             [, ifreq1] [, ifreq2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tambourine.html</a>
tambourine :: Sig -> D -> Sig

-- | Physical model related to the striking of a metal block.
--   
--   Audio output is a tone related to the striking of a metal block as
--   found in a vibraphone. The method is a physical model developed from
--   Perry Cook, but re-coded for Csound.
--   
--   <pre>
--   ares  vibes  kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/vibes.html</a>
vibes :: Sig -> Sig -> D -> D -> D -> Sig -> Sig -> Tab -> D -> Sig

-- | An emulation of a human voice.
--   
--   <pre>
--   ares  voice  kamp, kfreq, kphoneme, kform, kvibf, kvamp, ifn, ivfn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/voice.html</a>
voice :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Tab -> Sig

-- | Produce a normalized moving phase value.
--   
--   <pre>
--   ares  phasor  xcps [, iphs]
--   kres  phasor  kcps [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/phasor.html</a>
phasor :: Sig -> Sig

-- | Produce an arbitrary number of normalized moving phase values.
--   
--   Produce an arbitrary number of normalized moving phase values,
--   accessable by an index.
--   
--   <pre>
--   ares  phasorbnk  xcps, kndx, icnt [, iphs]
--   kres  phasorbnk  kcps, kndx, icnt [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/phasorbnk.html</a>
phasorbnk :: Sig -> Sig -> D -> Sig

-- | Produces a normalized moving phase value with sync input and output.
--   
--   Produces a moving phase value between zero and one and an extra
--   impulse output ("sync out") whenever its phase value crosses or is
--   reset to zero. The phase can be reset at any time by an impulse on the
--   "sync in" parameter.
--   
--   <pre>
--   aphase, asyncout  syncphasor  xcps, asyncin, [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/syncphasor.html</a>
syncphasor :: Sig -> Sig -> (Sig, Sig)

-- | Beta distribution random number generator (positive values only).
--   
--   Beta distribution random number generator (positive values only). This
--   is an x-class noise generator.
--   
--   <pre>
--   ares  betarand  krange, kalpha, kbeta
--   ires  betarand  krange, kalpha, kbeta
--   kres  betarand  krange, kalpha, kbeta
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/betarand.html</a>
betarand :: SigOrD a => a -> a -> a -> SE a

-- | Exponential distribution random number generator.
--   
--   Exponential distribution random number generator. This is an x-class
--   noise generator.
--   
--   <pre>
--   ares  bexprnd  krange
--   ires  bexprnd  krange
--   kres  bexprnd  krange
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/bexprnd.html</a>
bexprnd :: SigOrD a => a -> SE a

-- | Cauchy distribution random number generator.
--   
--   Cauchy distribution random number generator. This is an x-class noise
--   generator.
--   
--   <pre>
--   ares  cauchy  kalpha
--   ires  cauchy  kalpha
--   kres  cauchy  kalpha
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cauchy.html</a>
cauchy :: SigOrD a => a -> SE a

-- | Cauchy distribution random number generator with interpolation.
--   
--   Cauchy distribution random number generator with controlled
--   interpolation between values. This is an x-class noise generator.
--   
--   <pre>
--   ares  cauchyi  klambda, xamp, xcps
--   ires  cauchyi  klambda, xamp, xcps
--   kres  cauchyi  klambda, xamp, xcps
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cauchyi.html</a>
cauchyi :: SigOrD a => a -> a -> a -> SE a

-- | Continuous USER-defined-distribution RaNDom generator.
--   
--   <pre>
--   aout  cuserrnd  kmin, kmax, ktableNum
--   iout  cuserrnd  imin, imax, itableNum
--   kout  cuserrnd  kmin, kmax, ktableNum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/cuserrnd.html</a>
cuserrnd :: SigOrD a => a -> a -> a -> SE a

-- | Discrete USER-defined-distribution RaNDom generator.
--   
--   <pre>
--   aout  duserrnd  ktableNum
--   iout  duserrnd  itableNum
--   kout  duserrnd  ktableNum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/duserrnd.html</a>
duserrnd :: SigOrD a => a -> SE a

-- | Random impulses.
--   
--   Generates random impulses from 0 to 1.
--   
--   <pre>
--   ares  dust  kamp, kdensity
--   kres  dust  kamp, kdensity
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dust.html</a>
dust :: Sig -> Sig -> SE Sig

-- | Random impulses.
--   
--   Generates random impulses from -1 to 1.
--   
--   <pre>
--   ares  dust2  kamp, kdensity
--   kres  dust2  kamp, kdensity
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/dust2.html</a>
dust2 :: Sig -> Sig -> SE Sig

-- | Exponential distribution random number generator (positive values
--   only).
--   
--   Exponential distribution random number generator (positive values
--   only). This is an x-class noise generator.
--   
--   <pre>
--   ares  exprand  klambda
--   ires  exprand  klambda
--   kres  exprand  klambda
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/exprand.html</a>
exprand :: SigOrD a => a -> SE a

-- | Exponential distribution random number generator with interpolation
--   (positive values only).
--   
--   Exponential distribution random number generator with controlled
--   interpolation between values (positive values only). This is an
--   x-class noise generator.
--   
--   <pre>
--   ares  exprandi  klambda, xamp, xcps
--   ires  exprandi  klambda, xamp, xcps
--   kres  exprandi  klambda, xamp, xcps
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/exprandi.html</a>
exprandi :: SigOrD a => a -> a -> a -> SE a

-- | A fractal noise generator.
--   
--   A fractal noise generator implemented as a white noise filtered by a
--   cascade of 15 first-order filters.
--   
--   <pre>
--   ares  fractalnoise  kamp, kbeta
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/fractalnoise.html</a>
fractalnoise :: Sig -> Sig -> SE Sig

-- | Gaussian distribution random number generator.
--   
--   Gaussian distribution random number generator. This is an x-class
--   noise generator.
--   
--   <pre>
--   ares  gauss  krange
--   ires  gauss  krange
--   kres  gauss  krange
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gauss.html</a>
gauss :: Sig -> SE Sig

-- | Gaussian distribution random number generator with interpolation.
--   
--   Gaussian distribution random number generator with controlled
--   interpolation between values. This is an x-class noise generator.
--   
--   <pre>
--   ares  gaussi  krange, xamp, xcps
--   ires  gaussi  krange, xamp, xcps
--   kres  gaussi  krange, xamp, xcps
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gaussi.html</a>
gaussi :: SigOrD a => a -> a -> a -> SE a

-- | Random impulses around a certain frequency.
--   
--   Generates random impulses around a certain frequency.
--   
--   <pre>
--   ares  gausstrig  kamp, kcps, kdev [, imode]
--   kres  gausstrig  kamp, kcps, kdev [, imode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/gausstrig.html</a>
gausstrig :: Sig -> Sig -> Sig -> SE Sig

-- | Generates a segmented line whose segments are randomly generated.
--   
--   <pre>
--   kout  jitter  kamp, kcpsMin, kcpsMax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/jitter.html</a>
jitter :: Sig -> Sig -> Sig -> SE Sig

-- | Generates a segmented line with user-controllable random segments.
--   
--   <pre>
--   kout  jitter2  ktotamp, kamp1, kcps1, kamp2, kcps2, kamp3, kcps3
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/jitter2.html</a>
jitter2 :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> SE Sig

-- | Linear distribution random number generator (positive values only).
--   
--   Linear distribution random number generator (positive values only).
--   This is an x-class noise generator.
--   
--   <pre>
--   ares  linrand  krange
--   ires  linrand  krange
--   kres  linrand  krange
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/linrand.html</a>
linrand :: SigOrD a => a -> SE a

-- | A white noise generator with an IIR lowpass filter.
--   
--   <pre>
--   ares  noise  xamp, kbeta
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/noise.html</a>
noise :: Sig -> Sig -> SE Sig

-- | Cauchy distribution random number generator (positive values only).
--   
--   Cauchy distribution random number generator (positive values only).
--   This is an x-class noise generator.
--   
--   <pre>
--   ares  pcauchy  kalpha
--   ires  pcauchy  kalpha
--   kres  pcauchy  kalpha
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pcauchy.html</a>
pcauchy :: SigOrD a => a -> SE a

-- | Generates approximate pink noise.
--   
--   Generates approximate pink noise (-3dB/oct response) by one of two
--   different methods:
--   
--   <pre>
--   ares  pinkish  xin [, imethod] [, inumbands] [, iseed] [, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pinkish.html</a>
pinkish :: Sig -> SE Sig

-- | Poisson distribution random number generator (positive values only).
--   
--   Poisson distribution random number generator (positive values only).
--   This is an x-class noise generator.
--   
--   <pre>
--   ares  poisson  klambda
--   ires  poisson  klambda
--   kres  poisson  klambda
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/poisson.html</a>
poisson :: SigOrD a => a -> SE a

-- | Generates a controlled random number series.
--   
--   Output is a controlled random number series between -amp and +amp
--   
--   <pre>
--   ares  rand  xamp [, iseed] [, isel] [, ioffset]
--   kres  rand  xamp [, iseed] [, isel] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/rand.html</a>
rand :: Sig -> SE Sig

-- | Generates random numbers and holds them for a period of time.
--   
--   <pre>
--   ares  randh  xamp, xcps [, iseed] [, isize] [, ioffset]
--   kres  randh  kamp, kcps [, iseed] [, isize] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/randh.html</a>
randh :: Sig -> Sig -> SE Sig

-- | Generates a controlled random number series with interpolation between
--   each new number.
--   
--   <pre>
--   ares  randi  xamp, xcps [, iseed] [, isize] [, ioffset]
--   kres  randi  kamp, kcps [, iseed] [, isize] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/randi.html</a>
randi :: Sig -> Sig -> SE Sig

-- | Generates a controlled pseudo-random number series between min and max
--   values.
--   
--   Generates is a controlled pseudo-random number series between min and
--   max values.
--   
--   <pre>
--   ares  random  kmin, kmax
--   ires  random  imin, imax
--   kres  random  kmin, kmax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/random.html</a>
random :: SigOrD a => a -> a -> SE a

-- | Generates random numbers with a user-defined limit and holds them for
--   a period of time.
--   
--   <pre>
--   ares  randomh  kmin, kmax, xcps [,imode] [,ifirstval]
--   kres  randomh  kmin, kmax, kcps [,imode] [,ifirstval]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/randomh.html</a>
randomh :: Sig -> Sig -> Sig -> SE Sig

-- | Generates a user-controlled random number series with interpolation
--   between each new number.
--   
--   <pre>
--   ares  randomi  kmin, kmax, xcps [,imode] [,ifirstval]
--   kres  randomi  kmin, kmax, kcps [,imode] [,ifirstval]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/randomi.html</a>
randomi :: Sig -> Sig -> Sig -> SE Sig

-- | 31-bit bipolar random opcodes with controllable distribution.
--   
--   31-bit bipolar random opcodes with controllable distribution. These
--   units are portable, i.e. using the same seed value will generate the
--   same random sequence on all systems. The distribution of generated
--   random numbers can be varied at k-rate.
--   
--   <pre>
--   ax  rnd31  kscl, krpow [, iseed]
--   ix  rnd31  iscl, irpow [, iseed]
--   kx  rnd31  kscl, krpow [, iseed]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/rnd31.html</a>
rnd31 :: SigOrD a => a -> a -> SE a

-- | Sets the global seed value.
--   
--   Sets the global seed value for all x-class noise generators, as well
--   as other opcodes that use a random call, such as grain.
--   
--   <pre>
--   seed  ival
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/seed.html</a>
seed :: D -> SE ()

-- | Generates a controlled pseudo-random number series between min and max
--   values according to a trigger.
--   
--   Generates a controlled pseudo-random number series between min and max
--   values at k-rate whenever the trigger parameter is different to 0.
--   
--   <pre>
--   kout  trandom  ktrig, kmin, kmax
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trandom.html</a>
trandom :: Sig -> Sig -> Sig -> SE Sig

-- | Triangular distribution random number generator
--   
--   Triangular distribution random number generator. This is an x-class
--   noise generator.
--   
--   <pre>
--   ares  trirand  krange
--   ires  trirand  krange
--   kres  trirand  krange
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/trirand.html</a>
trirand :: SigOrD a => a -> SE a

-- | Uniform distribution random number generator (positive values only).
--   
--   Uniform distribution random number generator (positive values only).
--   This is an x-class noise generator.
--   
--   <pre>
--   ares  unirand  krange
--   ires  unirand  krange
--   kres  unirand  krange
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/unirand.html</a>
unirand :: SigOrD a => a -> SE a

-- | truly random opcodes with controllable range.
--   
--   truly random opcodes with controllable range. These units are for
--   Linux only and use <i>dev</i>urandom to construct Csound random values
--   
--   <pre>
--   ax  urandom  [imin, imax]
--   ix  urandom  [imin, imax]
--   kx  urandom  [imin, imax]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/urandom.html</a>
urandom :: SigOrD a => SE a

-- | A discrete user-defined-distribution random generator that can be used
--   as a function.
--   
--   <pre>
--   aout =  urd (ktableNum)
--   iout =  urd (itableNum)
--   kout =  urd (ktableNum)
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/urd.html</a>
urd :: SigOrD a => a -> SE a

-- | Weibull distribution random number generator (positive values only).
--   
--   Weibull distribution random number generator (positive values only).
--   This is an x-class noise generator
--   
--   <pre>
--   ares  weibull  ksigma, ktau
--   ires  weibull  ksigma, ktau
--   kres  weibull  ksigma, ktau
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/weibull.html</a>
weibull :: SigOrD a => a -> a -> SE a

-- | Generates breakbeat-style cut-ups of a mono audio stream.
--   
--   The BreakBeat Cutter automatically generates cut-ups of a source audio
--   stream in the style of drum and bass/jungle breakbeat manipulations.
--   There are two versions, for mono (bbcutm) or stereo (bbcuts) sources.
--   Whilst originally based on breakbeat cutting, the opcode can be
--   applied to any type of source audio.
--   
--   <pre>
--   a1  bbcutm  asource, ibps, isubdiv, ibarlength, iphrasebars, inumrepeats \
--             [, istutterspeed] [, istutterchance] [, ienvchoice ]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/bbcutm.html</a>
bbcutm :: Sig -> D -> D -> D -> D -> D -> Sig

-- | Generates breakbeat-style cut-ups of a stereo audio stream.
--   
--   The BreakBeat Cutter automatically generates cut-ups of a source audio
--   stream in the style of drum and bass/jungle breakbeat manipulations.
--   There are two versions, for mono (bbcutm) or stereo (bbcuts) sources.
--   Whilst originally based on breakbeat cutting, the opcode can be
--   applied to any type of source audio.
--   
--   <pre>
--   a1,a2  bbcuts  asource1, asource2, ibps, isubdiv, ibarlength, iphrasebars, \
--             inumrepeats [, istutterspeed] [, istutterchance] [, ienvchoice]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/bbcuts.html</a>
bbcuts :: Sig -> Sig -> D -> D -> D -> D -> D -> (Sig, Sig)

-- | Function-table-based crossfading looper.
--   
--   This opcode reads audio from a function table and plays it back in a
--   loop with user-defined start time, duration and crossfade time. It
--   also allows the pitch of the loop to be controlled, including reversed
--   playback. It accepts non-power-of-two tables, such as
--   deferred-allocation GEN01 tables.
--   
--   <pre>
--   asig  flooper  kamp, kpitch, istart, idur, ifad, ifn
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/flooper.html</a>
flooper :: Sig -> Sig -> D -> D -> D -> Tab -> Sig

-- | Function-table-based crossfading looper.
--   
--   This opcode implements a crossfading looper with variable loop
--   parameters and three looping modes, optionally using a table for its
--   crossfade shape. It accepts non-power-of-two tables for its source
--   sounds, such as deferred-allocation GEN01 tables.
--   
--   <pre>
--   asig  flooper2  kamp, kpitch, kloopstart, kloopend, kcrossfade, ifn \
--             [, istart, imode, ifenv, iskip]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/flooper2.html</a>
flooper2 :: Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Collects all audio from all Fluidsynth engines in a performance
--   
--   <pre>
--   aleft, aright  fluidAllOut  
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fluidAllOut.html</a>
fluidAllOut :: (Sig, Sig)

-- | Sends a MIDI controller data message to fluid.
--   
--   Sends a MIDI controller data (MIDI controller number and value to use)
--   message to a fluid engine by number on the user specified MIDI channel
--   number.
--   
--   <pre>
--   fluidCCi  iEngineNumber, iChannelNumber, iControllerNumber, iValue
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fluidCCi.html</a>
fluidCCi :: D -> D -> D -> D -> SE ()

-- | Sends a MIDI controller data message to fluid.
--   
--   Sends a MIDI controller data (MIDI controller number and value to use)
--   message to a fluid engine by number on the user specified MIDI channel
--   number.
--   
--   <pre>
--   fluidCCk  iEngineNumber, iChannelNumber, iControllerNumber, kValue
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fluidCCk.html</a>
fluidCCk :: D -> D -> D -> Sig -> SE ()

-- | Sends MIDI note on, note off, and other messages to a SoundFont
--   preset.
--   
--   The fluid opcodes provide a simple Csound opcode wrapper around Peter
--   Hanappe's Fluidsynth SoundFont2 synthesizer. This implementation
--   accepts any MIDI note on, note off, controller, pitch bend, or program
--   change message at k-rate. Maximum polyphony is 4096 simultaneously
--   sounding voices. Any number of SoundFonts may be loaded and played
--   simultaneously.
--   
--   <pre>
--   fluidControl  ienginenum, kstatus, kchannel, kdata1, kdata2
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/fluidControl.html</a>
fluidControl :: D -> Sig -> Sig -> Sig -> Sig -> SE ()

-- | Instantiates a fluidsynth engine.
--   
--   Instantiates a fluidsynth engine, and returns ienginenum to identify
--   the engine. ienginenum is passed to other other opcodes for loading
--   and playing SoundFonts and gathering the generated sound.
--   
--   <pre>
--   ienginenum  fluidEngine  [iReverbEnabled] [, iChorusEnabled] [,iNumChannels] [, iPolyphony] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fluidEngine.html</a>
fluidEngine :: D

-- | Loads a SoundFont into a fluidEngine, optionally listing SoundFont
--   contents.
--   
--   Loads a SoundFont into an instance of a fluidEngine, optionally
--   listing banks and presets for SoundFont.
--   
--   <pre>
--   isfnum  fluidLoad  soundfont, ienginenum[, ilistpresets]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fluidLoad.html</a>
fluidLoad :: D -> D -> Tab

-- | Plays a note on a channel in a fluidSynth engine.
--   
--   Plays a note at imidikey pitch and imidivel velocity on ichannelnum
--   channel of number ienginenum fluidEngine.
--   
--   <pre>
--   fluidNote  ienginenum, ichannelnum, imidikey, imidivel
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fluidNote.html</a>
fluidNote :: D -> D -> D -> D -> SE ()

-- | Outputs sound from a given fluidEngine
--   
--   Outputs the sound from a fluidEngine.
--   
--   <pre>
--   aleft, aright  fluidOut  ienginenum
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/fluidOut.html</a>
fluidOut :: D -> (Sig, Sig)

-- | Assigns a preset from a SoundFont to a channel on a fluidEngine.
--   
--   <pre>
--   fluidProgramSelect  ienginenum, ichannelnum, isfnum, ibanknum, ipresetnum
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/fluidProgramSelect.html</a>
fluidProgramSelect :: D -> D -> Tab -> D -> D -> SE ()

-- | Set interpolation method for channel in Fluid Engine
--   
--   Set interpolation method for channel in Fluid Engine. Lower order
--   interpolation methods will render faster at lower fidelity while
--   higher order interpolation methods will render slower at higher
--   fidelity. Default interpolation for a channel is 4th order
--   interpolation.
--   
--   <pre>
--   fluidSetInterpMethod  ienginenum, ichannelnum, iInterpMethod
--   </pre>
--   
--   csound doc:
--   <a>http://www.csounds.com/manual/html/fluidSetInterpMethod.html</a>
fluidSetInterpMethod :: D -> D -> D -> SE ()

-- | Read sampled sound from a table.
--   
--   Read sampled sound (mono or stereo) from a table, with optional
--   sustain and release looping.
--   
--   <pre>
--   ar1 [,ar2]  loscil  xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] \
--             [, imod2] [, ibeg2] [, iend2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/loscil.html</a>
loscil :: Tuple a => Sig -> Sig -> Tab -> a

-- | Read sampled sound from a table using cubic interpolation.
--   
--   Read sampled sound (mono or stereo) from a table, with optional
--   sustain and release looping, using cubic interpolation.
--   
--   <pre>
--   ar1 [,ar2]  loscil3  xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] \
--             [, imod2] [, ibeg2] [, iend2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/loscil3.html</a>
loscil3 :: Tuple a => Sig -> Sig -> Tab -> a

-- | Loop oscillator.
--   
--   This file is currently a stub, but the syntax should be correct.
--   
--   <pre>
--   ar1 [, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, \
--             ar15, ar16]  loscilx  xamp, kcps, ifn \
--             [, iwsize, ibas, istrt, imod1, ibeg1, iend1]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/loscilx.html</a>
loscilx :: Tuple a => Sig -> Sig -> Tab -> a

-- | Generates a table index for sample playback
--   
--   This opcode can be used to generate table index for sample playback
--   (e.g. tablexkt).
--   
--   <pre>
--   ares  lphasor  xtrns [, ilps] [, ilpe] [, imode] [, istrt] [, istor]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lphasor.html</a>
lphasor :: Sig -> Sig

-- | Read sampled sound from a table with looping and high precision.
--   
--   Read sampled sound (mono or stereo) from a table, with looping, and
--   high precision.
--   
--   <pre>
--   ares  lposcil  kamp, kfreqratio, kloop, kend, ifn [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lposcil.html</a>
lposcil :: Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Read sampled sound from a table with high precision and cubic
--   interpolation.
--   
--   Read sampled sound (mono or stereo) from a table, with looping, and
--   high precision. lposcil3 uses cubic interpolation.
--   
--   <pre>
--   ares  lposcil3  kamp, kfreqratio, kloop, kend, ifn [, iphs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lposcil3.html</a>
lposcil3 :: Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Read sampled sound from a table with looping and high precision.
--   
--   lposcila reads sampled sound from a table with looping and high
--   precision.
--   
--   <pre>
--   ar  lposcila  aamp, kfreqratio, kloop, kend, ift [,iphs] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lposcila.html</a>
lposcila :: Sig -> Sig -> Sig -> Sig -> D -> Sig

-- | Read stereo sampled sound from a table with looping and high
--   precision.
--   
--   lposcilsa reads stereo sampled sound from a table with looping and
--   high precision.
--   
--   <pre>
--   ar1, ar2  lposcilsa  aamp, kfreqratio, kloop, kend, ift [,iphs] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lposcilsa.html</a>
lposcilsa :: Sig -> Sig -> Sig -> Sig -> D -> (Sig, Sig)

-- | Read stereo sampled sound from a table with looping and high
--   precision.
--   
--   lposcilsa2 reads stereo sampled sound from a table with looping and
--   high precision.
--   
--   <pre>
--   ar1, ar2  lposcilsa2  aamp, kfreqratio, kloop, kend, ift [,iphs] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/lposcilsa2.html</a>
lposcilsa2 :: Sig -> Sig -> Sig -> Sig -> D -> (Sig, Sig)

-- | Prints a list of all instruments of a previously loaded SoundFont2
--   (SF2) file.
--   
--   Prints a list of all instruments of a previously loaded SoundFont2
--   (SF2) sample file. These opcodes allow management the sample-structure
--   of SF2 files. In order to understand the usage of these opcodes, the
--   user must have some knowledge of the SF2 format, so a brief
--   description of this format can be found in the SoundFont2 File Format
--   Appendix.
--   
--   <pre>
--   sfilist  ifilhandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfilist.html</a>
sfilist :: Sf -> SE ()

-- | Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound.
--   
--   Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound.
--   These opcodes allow management the sample-structure of SF2 files. In
--   order to understand the usage of these opcodes, the user must have
--   some knowledge of the SF2 format, so a brief description of this
--   format can be found in the SoundFont2 File Format Appendix.
--   
--   <pre>
--   ar1, ar2  sfinstr  ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \
--             [, iflag] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfinstr.html</a>
sfinstr :: D -> D -> Sig -> Sig -> D -> Sf -> (Sig, Sig)

-- | Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound
--   with cubic interpolation.
--   
--   Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound
--   with cubic interpolation. These opcodes allow management the
--   sample-structure of SF2 files. In order to understand the usage of
--   these opcodes, the user must have some knowledge of the SF2 format, so
--   a brief description of this format can be found in the SoundFont2 File
--   Format Appendix.
--   
--   <pre>
--   ar1, ar2  sfinstr3  ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \
--             [, iflag] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfinstr3.html</a>
sfinstr3 :: D -> D -> Sig -> Sig -> D -> Sf -> (Sig, Sig)

-- | Plays a SoundFont2 (SF2) sample instrument, generating a mono sound
--   with cubic interpolation.
--   
--   Plays a SoundFont2 (SF2) sample instrument, generating a mono sound
--   with cubic interpolation. These opcodes allow management the
--   sample-structure of SF2 files. In order to understand the usage of
--   these opcodes, the user must have some knowledge of the SF2 format, so
--   a brief description of this format can be found in the SoundFont2 File
--   Format Appendix.
--   
--   <pre>
--   ares  sfinstr3m  ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \
--             [, iflag] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfinstr3m.html</a>
sfinstr3m :: D -> D -> Sig -> Sig -> D -> Sf -> Sig

-- | Plays a SoundFont2 (SF2) sample instrument, generating a mono sound.
--   
--   Plays a SoundFont2 (SF2) sample instrument, generating a mono sound.
--   These opcodes allow management the sample-structure of SF2 files. In
--   order to understand the usage of these opcodes, the user must have
--   some knowledge of the SF2 format, so a brief description of this
--   format can be found in the SoundFont2 File Format Appendix.
--   
--   <pre>
--   ares  sfinstrm  ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \
--             [, iflag] [, ioffset]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfinstrm.html</a>
sfinstrm :: D -> D -> Sig -> Sig -> D -> Sf -> Sig

-- | Loads an entire SoundFont2 (SF2) sample file into memory.
--   
--   Loads an entire SoundFont2 (SF2) sample file into memory. These
--   opcodes allow management the sample-structure of SF2 files. In order
--   to understand the usage of these opcodes, the user must have some
--   knowledge of the SF2 format, so a brief description of this format can
--   be found in the SoundFont2 File Format Appendix.
--   
--   <pre>
--   ir  sfload  "filename"
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfload.html</a>
sfload :: Str -> D

-- | Plays a SoundFont2 (SF2) sample preset, generating a stereo sound,
--   with user-defined time-varying crossfade looping.
--   
--   Plays a SoundFont2 (SF2) sample preset, generating a stereo sound,
--   similarly to sfplay. Unlike that opcode, though, it ignores the
--   looping points set in the SF2 file and substitutes them for a
--   user-defined crossfade loop. It is a cross between sfplay and
--   flooper2.
--   
--   <pre>
--   ar1, ar2  sflooper  ivel, inotenum, kamp, kpitch, ipreindex, kloopstart, kloopend, kcrossfade \
--             [, istart, imode, ifenv, iskip] 
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sflooper.html</a>
sflooper :: D -> D -> Sig -> Sig -> Sf -> Sig -> Sig -> Sig -> (Sig, Sig)

-- | Assigns all presets of a SoundFont2 (SF2) sample file to a sequence of
--   progressive index numbers.
--   
--   Assigns all presets of a previously loaded SoundFont2 (SF2) sample
--   file to a sequence of progressive index numbers. These opcodes allow
--   management the sample-structure of SF2 files. In order to understand
--   the usage of these opcodes, the user must have some knowledge of the
--   SF2 format, so a brief description of this format can be found in the
--   SoundFont2 File Format Appendix.
--   
--   <pre>
--   sfpassign  istartindex, ifilhandle[, imsgs]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfpassign.html</a>
sfpassign :: D -> Sf -> SE ()

-- | Plays a SoundFont2 (SF2) sample preset, generating a stereo sound.
--   
--   Plays a SoundFont2 (SF2) sample preset, generating a stereo sound.
--   These opcodes allow management the sample-structure of SF2 files. In
--   order to understand the usage of these opcodes, the user must have
--   some knowledge of the SF2 format, so a brief description of this
--   format can be found in the SoundFont2 File Format Appendix.
--   
--   <pre>
--   ar1, ar2  sfplay  ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfplay.html</a>
sfplay :: D -> D -> Sig -> Sig -> Sf -> (Sig, Sig)

-- | Plays a SoundFont2 (SF2) sample preset, generating a stereo sound with
--   cubic interpolation.
--   
--   Plays a SoundFont2 (SF2) sample preset, generating a stereo sound with
--   cubic interpolation. These opcodes allow management the
--   sample-structure of SF2 files. In order to understand the usage of
--   these opcodes, the user must have some knowledge of the SF2 format, so
--   a brief description of this format can be found in the SoundFont2 File
--   Format Appendix.
--   
--   <pre>
--   ar1, ar2  sfplay3  ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfplay3.html</a>
sfplay3 :: D -> D -> Sig -> Sig -> Sf -> (Sig, Sig)

-- | Plays a SoundFont2 (SF2) sample preset, generating a mono sound with
--   cubic interpolation.
--   
--   Plays a SoundFont2 (SF2) sample preset, generating a mono sound with
--   cubic interpolation. These opcodes allow management the
--   sample-structure of SF2 files. In order to understand the usage of
--   these opcodes, the user must have some knowledge of the SF2 format, so
--   a brief description of this format can be found in the SoundFont2 File
--   Format Appendix.
--   
--   <pre>
--   ares  sfplay3m  ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfplay3m.html</a>
sfplay3m :: D -> D -> Sig -> Sig -> Sf -> Sig

-- | Plays a SoundFont2 (SF2) sample preset, generating a mono sound.
--   
--   Plays a SoundFont2 (SF2) sample preset, generating a mono sound. These
--   opcodes allow management the sample-structure of SF2 files. In order
--   to understand the usage of these opcodes, the user must have some
--   knowledge of the SF2 format, so a brief description of this format can
--   be found in the SoundFont2 File Format Appendix.
--   
--   <pre>
--   ares  sfplaym  ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfplaym.html</a>
sfplaym :: D -> D -> Sig -> Sig -> Sf -> Sig

-- | Prints a list of all presets of a SoundFont2 (SF2) sample file.
--   
--   Prints a list of all presets of a previously loaded SoundFont2 (SF2)
--   sample file. These opcodes allow management the sample-structure of
--   SF2 files. In order to understand the usage of these opcodes, the user
--   must have some knowledge of the SF2 format, so a brief description of
--   this format can be found in the SoundFont2 File Format Appendix.
--   
--   <pre>
--   sfplist  ifilhandle
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfplist.html</a>
sfplist :: Sf -> SE ()

-- | Assigns an existing preset of a SoundFont2 (SF2) sample file to an
--   index number.
--   
--   Assigns an existing preset of a previously loaded SoundFont2 (SF2)
--   sample file to an index number. These opcodes allow management the
--   sample-structure of SF2 files. In order to understand the usage of
--   these opcodes, the user must have some knowledge of the SF2 format, so
--   a brief description of this format can be found in the SoundFont2 File
--   Format Appendix.
--   
--   <pre>
--   ir  sfpreset  iprog, ibank, ifilhandle, ipreindex
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sfpreset.html</a>
sfpreset :: D -> D -> Sf -> Sf -> D

-- | A sound looper with pitch control.
--   
--   This opcode records input audio and plays it back in a loop with
--   user-defined duration and crossfade time. It also allows the pitch of
--   the loop to be controlled, including reversed playback.
--   
--   <pre>
--   asig, krec  sndloop  ain, kpitch, ktrig, idur, ifad
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/sndloop.html</a>
sndloop :: Sig -> Sig -> Sig -> D -> D -> (Sig, Sig)

-- | A simple time stretch by repeating cycles.
--   
--   <pre>
--   ares  waveset  ain, krep [, ilen]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/waveset.html</a>
waveset :: Sig -> Sig -> Sig

-- | Copies from one table to another with a gain control.
--   
--   This is is a variant of tablecopy, copying from one table to another,
--   starting at ipos, and with a gain control. The number of points copied
--   is determined by the length of the source. Other points are not
--   changed. This opcode can be used to âhitâ a string in the scanned
--   synthesis code.
--   
--   <pre>
--   scanhammer  isrc, idst, ipos, imult
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/scanhammer.html</a>
scanhammer :: D -> D -> D -> D -> SE ()

-- | Generate audio output using scanned synthesis.
--   
--   <pre>
--   ares  scans  kamp, kfreq, ifn, id [, iorder]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/scans.html</a>
scans :: Sig -> Sig -> Tab -> D -> Sig

-- | A simpler scanned synthesis implementation.
--   
--   A simpler scanned synthesis implementation. This is an implementation
--   of a circular string scanned using external tables. This opcode will
--   allow direct modification and reading of values with the table
--   opcodes.
--   
--   <pre>
--   aout  scantable  kamp, kpch, ipos, imass, istiff, idamp, ivel
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/scantable.html</a>
scantable :: Sig -> Sig -> D -> D -> D -> D -> D -> Sig

-- | Compute the waveform and the wavetable for use in scanned synthesis.
--   
--   <pre>
--   scanu  init, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, kmass, \
--            kstif, kcentr, kdamp, ileft, iright, kpos, kstrngth, ain, idisp, id
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/scanu.html</a>
scanu :: D -> D -> Tab -> Tab -> Tab -> Tab -> Tab -> Sig -> Sig -> Sig -> Sig -> D -> D -> Sig -> Sig -> Sig -> D -> D -> SE ()

-- | Allows the position and velocity of a node in a scanned process to be
--   read.
--   
--   <pre>
--   kpos, kvel  xscanmap  iscan, kamp, kvamp [, iwhich]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/xscanmap.html</a>
xscanmap :: D -> Sig -> Sig -> (Sig, Sig)

-- | Fast scanned synthesis waveform and the wavetable generator.
--   
--   Experimental version of scans. Allows much larger matrices and is
--   faster and smaller but removes some (unused?) flexibility. If liked,
--   it will replace the older opcode as it is syntax compatible but
--   extended.
--   
--   <pre>
--   ares  xscans  kamp, kfreq, ifntraj, id [, iorder]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/xscans.html</a>
xscans :: Sig -> Sig -> Tab -> D -> Sig

-- | Allows the position and velocity of a node in a scanned process to be
--   read.
--   
--   <pre>
--   xscansmap  kpos, kvel, iscan, kamp, kvamp [, iwhich]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/xscansmap.html</a>
xscansmap :: Sig -> Sig -> D -> Sig -> Sig -> SE ()

-- | Compute the waveform and the wavetable for use in scanned synthesis.
--   
--   Experimental version of scanu. Allows much larger matrices and is
--   faster and smaller but removes some (unused?) flexibility. If liked,
--   it will replace the older opcode as it is syntax compatible but
--   extended.
--   
--   <pre>
--   xscanu  init, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, kmass, \
--            kstif, kcentr, kdamp, ileft, iright, kpos, kstrngth, ain, idisp, id
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/xscanu.html</a>
xscanu :: D -> D -> Tab -> Tab -> Tab -> Tab -> Tab -> Sig -> Sig -> Sig -> Sig -> D -> D -> Sig -> Sig -> Sig -> D -> D -> SE ()

-- | STKBandedWG uses banded waveguide techniques to model a variety of
--   sounds.
--   
--   This opcode uses banded waveguide techniques to model a variety of
--   sounds, including bowed bars, glasses, and bowls.
--   
--   <pre>
--   asignal  STKBandedWG  ifrequency, iamplitude, [kpress, kv1[, kmot, kv2[, klfo, kv3[, klfodepth, kv4[, kvel, kv5[, kstrk, kv6[, kinstr, kv7]]]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKBandedWG.html</a>
stkBandedWG :: D -> D -> Sig

-- | STK Hammond-oid organ-like FM synthesis instrument.
--   
--   <pre>
--   asignal  STKBeeThree  ifrequency, iamplitude, [kop4, kv1[, kop3, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKBeeThree.html</a>
stkBeeThree :: D -> D -> Sig

-- | STKBlowBotl uses a helmholtz resonator (biquad filter) with a
--   polynomial jet excitation.
--   
--   This opcode implements a helmholtz resonator (biquad filter) with a
--   polynomial jet excitation (a la Cook).
--   
--   <pre>
--   asignal  STKBlowBotl  ifrequency, iamplitude, [knoise, kv1[, klfo, kv2[, klfodepth, kv3[, kvol, kv4]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKBlowBotl.html</a>
stkBlowBotl :: D -> D -> Sig

-- | STK clarinet physical model with one register hole and one tonehole.
--   
--   This opcode is based on the clarinet model, with the addition of a
--   two-port register hole and a three-port dynamic tonehole
--   implementation.
--   
--   <pre>
--   asignal  STKBlowHole  ifrequency, iamplitude, [kreed, kv1[, knoise, kv2[, khole, kv3[, kreg, kv4[, kbreath, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKBlowHole.html</a>
stkBlowHole :: D -> D -> Sig

-- | STKBowed is a bowed string instrument.
--   
--   STKBowed is a bowed string instrument, using a waveguide model.
--   
--   <pre>
--   asignal  STKBowed  ifrequency, iamplitude, [kpress, kv1[, kpos, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKBowed.html</a>
stkBowed :: D -> D -> Sig

-- | STKBrass is a simple brass instrument.
--   
--   STKBrass uses a simple brass instrument waveguide model, a la Cook.
--   
--   <pre>
--   asignal  STKBrass  ifrequency, iamplitude, [klip, kv1[, kslide, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKBrass.html</a>
stkBrass :: D -> D -> Sig

-- | STKClarinet uses a simple clarinet physical model.
--   
--   <pre>
--   asignal  STKClarinet  ifrequency, iamplitude, [kstiff, kv1[, knoise, kv2[, klfo, kv3[, klfodepth, kv4[, kbreath, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKClarinet.html</a>
stkClarinet :: D -> D -> Sig

-- | STKDrummer is a drum sampling synthesizer.
--   
--   STKDrummer is a drum sampling synthesizer using raw waves and one-pole
--   filters, The drum rawwave files are sampled at 22050 Hz, but will be
--   appropriately interpolated for other sample rates.
--   
--   <pre>
--   asignal  STKDrummer  ifrequency, iamplitude
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKDrummer.html</a>
stkDrummer :: D -> D -> Sig

-- | STKFMVoices is a singing FM synthesis instrument.
--   
--   STKFMVoices is a singing FM synthesis instrument. It has 3 carriers
--   and a common modulator, also referred to as algorithm 6 of the TX81Z.
--   
--   <pre>
--   asignal  STKFMVoices  ifrequency, iamplitude, [kvowel, kv1[, kspec, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKFMVoices.html</a>
stkFMVoices :: D -> D -> Sig

-- | STKFlute uses a simple flute physical model.
--   
--   STKFlute uses a simple flute physical model. The jet model uses a
--   polynomial, a la Cook.
--   
--   <pre>
--   asignal  STKFlute  ifrequency, iamplitude, [kjet, kv1[, knoise, kv2[, klfo, kv3[, klfodepth, kv4[, kbreath, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKFlute.html</a>
stkFlute :: D -> D -> Sig

-- | STKHevyMetl produces metal sounds.
--   
--   STKHevyMetl produces metal sounds, using FM synthesis. It uses 3
--   cascade operators with feedback modulation, also referred to as
--   algorithm 3 of the TX81Z.
--   
--   <pre>
--   asignal  STKHevyMetl  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKHevyMetl.html</a>
stkHevyMetl :: D -> D -> Sig

-- | STKMandolin produces mamdolin-like sounds.
--   
--   STKMandolin produces mamdolin-like sounds, using "commuted synthesis"
--   techniques to model a mandolin instrument.
--   
--   <pre>
--   asignal  STKMandolin  ifrequency, iamplitude, [kbody, kv1[, kpos, kv2[, ksus, kv3[, kdetune, kv4[, kmic, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKMandolin.html</a>
stkMandolin :: D -> D -> Sig

-- | STKModalBar is a resonant bar instrument.
--   
--   This opcode is a resonant bar instrument.It has a number of different
--   struck bar instruments.
--   
--   <pre>
--   asignal  STKModalBar  ifrequency, iamplitude, [khard, kv1[, kpos, kv2[, klfo, kv3[, klfodepth, kv4[, kmix, kv5[, kvol, kv6[, kinstr, kv7]]]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKModalBar.html</a>
stkModalBar :: D -> D -> Sig

-- | STKMoog produces moog-like swept filter sounds.
--   
--   STKMoog produces moog-like swept filter sounds, using one attack wave,
--   one looped wave, and an ADSR envelope and adds two sweepable formant
--   filters.
--   
--   <pre>
--   asignal  STKMoog  ifrequency, iamplitude, [kq, kv1[, krate, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKMoog.html</a>
stkMoog :: D -> D -> Sig

-- | STKPercFlut is a percussive flute FM synthesis instrument.
--   
--   STKPercFlut is a percussive flute FM synthesis instrument. The
--   instrument uses an algorithm like the algorithm 4 of the TX81Z.
--   
--   <pre>
--   asignal  STKPercFlut  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKPercFlut.html</a>
stkPercFlut :: D -> D -> Sig

-- | STKPlucked uses a plucked string physical model.
--   
--   STKPlucked uses a plucked string physical model based on the
--   Karplus-Strong algorithm.
--   
--   <pre>
--   asignal  STKPlucked  ifrequency, iamplitude
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKPlucked.html</a>
stkPlucked :: D -> D -> Sig

-- | STKResonate is a noise driven formant filter.
--   
--   STKResonate is a noise driven formant filter. This instrument contains
--   a noise source, which excites a biquad resonance filter, with volume
--   controlled by an ADSR.
--   
--   <pre>
--   asignal  STKResonate  ifrequency, iamplitude, [kfreq, kv1[, kpole, kv2[, knotch, kv3[, kzero, kv4[, kenv, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKResonate.html</a>
stkResonate :: D -> D -> Sig

-- | STK Fender Rhodes-like electric piano FM synthesis instrument.
--   
--   <pre>
--   asignal  STKRhodey  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKRhodey.html</a>
stkRhodey :: D -> D -> Sig

-- | STKSaxofony is a faux conical bore reed instrument.
--   
--   STKSaxofony is a faux conical bore reed instrument. This opcode uses a
--   "hybrid" digital waveguide instrument that can generate a variety of
--   wind-like sounds. It has also been referred to as the "blowed string"
--   model. The waveguide section is essentially that of a string, with one
--   rigid and one lossy termination. The non-linear function is a reed
--   table. The string can be "blown" at any point between the
--   terminations, though just as with strings, it is impossible to excite
--   the system at either end. If the excitation is placed at the string
--   mid-point, the sound is that of a clarinet. At points closer to the
--   "bridge", the sound is closer to that of a saxophone.
--   
--   <pre>
--   asignal  STKSaxofony  ifrequency, iamplitude, [kstiff, kv1[, kapert, kv2[, kblow, kv3[, knoise, kv4[, klfo, kv5[, klfodepth, kv6[, kbreath, kv7]]]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKSaxofony.html</a>
stkSaxofony :: D -> D -> Sig

-- | STKShakers is an instrument that simulates environmental sounds or
--   collisions of multiple independent sound producing objects.
--   
--   STKShakers are a set of PhISEM and PhOLIES instruments: PhISEM
--   (Physically Informed Stochastic Event Modeling) is an algorithmic
--   approach for simulating collisions of multiple independent sound
--   producing objects. It can simulate a Maraca, Sekere, Cabasa, Bamboo
--   Wind Chimes, Water Drops, Tambourine, Sleighbells, and a Guiro. On
--   <a>http://soundlab.cs.princeton.edu/research/controllers/shakers/</a>
--   PhOLIES (Physically-Oriented Library of Imitated Environmental Sounds)
--   there is a similar approach for the synthesis of environmental sounds.
--   It simulates of breaking sticks, crunchy snow (or not), a wrench,
--   sandpaper, and more..
--   
--   <pre>
--   asignal  STKShakers  ifrequency, iamplitude, [kenerg, kv1[, kdecay, kv2[, kshake, kv3[, knum, kv4[, kres, kv5[, kinstr, kv6]]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKShakers.html</a>
stkShakers :: D -> D -> Sig

-- | STKSimple is a wavetable/noise instrument.
--   
--   STKSimple is a wavetable/noise instrument. It combines a looped wave,
--   a noise source, a biquad resonance filter, a one-pole filter, and an
--   ADSR envelope to create some interesting sounds.
--   
--   <pre>
--   asignal  STKSimple  ifrequency, iamplitude, [kpos, kv1[, kcross, kv2[, kenv, kv3[, kgain, kv4]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKSimple.html</a>
stkSimple :: D -> D -> Sig

-- | STKSitar uses a plucked string physical model.
--   
--   STKSitar uses a plucked string physical model based on the
--   Karplus-Strong algorithm.
--   
--   <pre>
--   asignal  STKSitar  ifrequency, iamplitude
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKSitar.html</a>
stkSitar :: D -> D -> Sig

-- | STKStifKarp is a plucked stiff string instrument.
--   
--   STKStifKarp is a plucked stiff string instrument. It a simple plucked
--   string algorithm (Karplus Strong) with enhancements, including string
--   stiffness and pluck position controls. The stiffness is modeled with
--   allpass filters.
--   
--   <pre>
--   asignal  STKStifKarp  ifrequency, iamplitude, [kpos, kv1[, ksus, kv2[, kstretch, kv3]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKStifKarp.html</a>
stkStifKarp :: D -> D -> Sig

-- | STKTubeBell is a tubular bell (orchestral chime) FM synthesis
--   instrument.
--   
--   STKTubeBell is a tubular bell (orchestral chime) FM synthesis
--   instrument. It uses two simple FM Pairs summed together, also referred
--   to as algorithm 5 of the TX81Z.
--   
--   <pre>
--   asignal  STKTubeBell  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKTubeBell.html</a>
stkTubeBell :: D -> D -> Sig

-- | STKVoicForm is a four formant synthesis instrument.
--   
--   STKVoicForm is a four formant synthesis instrument. This instrument
--   contains an excitation singing wavetable (looping wave with random and
--   periodic vibrato, smoothing on frequency, etc.), excitation noise, and
--   four sweepable complex resonances. Measured formant data is included,
--   and enough data is there to support either parallel or cascade
--   synthesis. In the floating point case cascade synthesis is the most
--   natural so that's what you'll find here.
--   
--   <pre>
--   asignal  STKVoicForm  ifrequency, iamplitude, [kmix, kv1[, ksel, kv2[, klfo, kv3[, klfodepth, kv4[, kloud, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKVoicForm.html</a>
stkVoicForm :: D -> D -> Sig

-- | STKWhistle produces whistle sounds.
--   
--   STKWhistle produces (police) whistle sounds. It uses a hybrid
--   physical/spectral model of a police whistle (a la Cook).
--   
--   <pre>
--   asignal  STKWhistle  ifrequency, iamplitude, [kmod, kv1[, knoise, kv2[, kfipfreq, kv3[, kfipgain, kv4[, kvol, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKWhistle.html</a>
stkWhistle :: D -> D -> Sig

-- | STKWurley simulates a Wurlitzer electric piano FM synthesis
--   instrument.
--   
--   STKWurley simulates a Wurlitzer electric piano FM synthesis
--   instrument. It uses two simple FM Pairs summed together, also referred
--   to as algorithm 5 of the TX81Z.
--   
--   <pre>
--   asignal  STKWurley  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/STKWurley.html</a>
stkWurley :: D -> D -> Sig

-- | Accesses table values by incremental sampling.
--   
--   <pre>
--   kres  oscil1  idel, kamp, idur [, ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/oscil1.html</a>
oscil1 :: D -> Sig -> D -> Sig

-- | Accesses table values by incremental sampling with linear
--   interpolation.
--   
--   <pre>
--   kres  oscil1i  idel, kamp, idur [, ifn]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/oscil1i.html</a>
oscil1i :: D -> Sig -> D -> Sig

-- | Accesses table values by direct indexing.
--   
--   <pre>
--   ares  ptable  andx, ifn [, ixmode] [, ixoff] [, iwrap]
--   ires  ptable  indx, ifn [, ixmode] [, ixoff] [, iwrap]
--   kres  ptable  kndx, ifn [, ixmode] [, ixoff] [, iwrap]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ptable.html</a>
ptable :: Sig -> Tab -> Sig

-- | Accesses table values by direct indexing with cubic interpolation.
--   
--   <pre>
--   ares  ptable3  andx, ifn [, ixmode] [, ixoff] [, iwrap]
--   ires  ptable3  indx, ifn [, ixmode] [, ixoff] [, iwrap]
--   kres  ptable3  kndx, ifn [, ixmode] [, ixoff] [, iwrap]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ptable3.html</a>
ptable3 :: Sig -> Tab -> Sig

-- | Accesses table values by direct indexing with linear interpolation.
--   
--   <pre>
--   ares  ptablei  andx, ifn [, ixmode] [, ixoff] [, iwrap]
--   ires  ptablei  indx, ifn [, ixmode] [, ixoff] [, iwrap]
--   kres  ptablei  kndx, ifn [, ixmode] [, ixoff] [, iwrap]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/ptablei.html</a>
ptablei :: Sig -> Tab -> Sig

-- | Fast table opcodes.
--   
--   Fast table opcodes. Faster than table and tablew because don't allow
--   wrap-around and limit and don't check index validity. Have been
--   implemented in order to provide fast access to arrays. Support
--   non-power of two tables (can be generated by any GEN function by
--   giving a negative length value).
--   
--   <pre>
--   ir  tab_i  indx, ifn[, ixmode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tab.html</a>
tab_i :: D -> Tab -> D

-- | Fast table opcodes.
--   
--   Fast table opcodes. Faster than table and tablew because don't allow
--   wrap-around and limit and don't check index validity. Have been
--   implemented in order to provide fast access to arrays. Support
--   non-power of two tables (can be generated by any GEN function by
--   giving a negative length value).
--   
--   <pre>
--   kr  tab  kndx, ifn[, ixmode]
--   ar  tab  xndx, ifn[, ixmode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tab.html</a>
tab :: Sig -> Tab -> Sig

-- | Fast table opcodes.
--   
--   Fast table opcodes. Faster than table and tablew because don't allow
--   wrap-around and limit and don't check index validity. Have been
--   implemented in order to provide fast access to arrays. Support
--   non-power of two tables (can be generated by any GEN function by
--   giving a negative length value).
--   
--   <pre>
--   tabw_i  isig, indx, ifn [,ixmode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tab.html</a>
tabw_i :: D -> D -> Tab -> SE ()

-- | Fast table opcodes.
--   
--   Fast table opcodes. Faster than table and tablew because don't allow
--   wrap-around and limit and don't check index validity. Have been
--   implemented in order to provide fast access to arrays. Support
--   non-power of two tables (can be generated by any GEN function by
--   giving a negative length value).
--   
--   <pre>
--   tabw  ksig, kndx, ifn [,ixmode]
--   tabw  asig, andx, ifn [,ixmode]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tab.html</a>
tabw :: Sig -> Sig -> Tab -> SE ()

-- | Accesses table values by direct indexing.
--   
--   <pre>
--   ares  table  andx, ifn [, ixmode] [, ixoff] [, iwrap]
--   ires  table  indx, ifn [, ixmode] [, ixoff] [, iwrap]
--   kres  table  kndx, ifn [, ixmode] [, ixoff] [, iwrap]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/table.html</a>
table :: SigOrD a => a -> Tab -> a

-- | Accesses table values by direct indexing with cubic interpolation.
--   
--   <pre>
--   ares  table3  andx, ifn [, ixmode] [, ixoff] [, iwrap]
--   ires  table3  indx, ifn [, ixmode] [, ixoff] [, iwrap]
--   kres  table3  kndx, ifn [, ixmode] [, ixoff] [, iwrap]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/table3.html</a>
table3 :: SigOrD a => a -> Tab -> a

-- | Accesses table values by direct indexing with linear interpolation.
--   
--   <pre>
--   ares  tablei  andx, ifn [, ixmode] [, ixoff] [, iwrap]
--   ires  tablei  indx, ifn [, ixmode] [, ixoff] [, iwrap]
--   kres  tablei  kndx, ifn [, ixmode] [, ixoff] [, iwrap]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/tablei.html</a>
tablei :: SigOrD a => a -> Tab -> a

-- | A simple wave-terrain synthesis opcode.
--   
--   <pre>
--   aout  wterrain  kamp, kpch, k_xcenter, k_ycenter, k_xradius, k_yradius, \
--             itabx, itaby
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wterrain.html</a>
wterrain :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> D -> D -> Sig

-- | Produces a naturally decaying plucked string or drum sound.
--   
--   Audio output is a naturally decaying plucked string or drum sound
--   based on the Karplus-Strong algorithms.
--   
--   <pre>
--   ares  pluck  kamp, kcps, icps, ifn, imeth [, iparm1] [, iparm2]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/pluck.html</a>
pluck :: Sig -> Sig -> D -> Tab -> D -> Sig

-- | Physical model of the plucked string.
--   
--   repluck is an implementation of the physical model of the plucked
--   string. A user can control the pluck point, the pickup point, the
--   filter, and an additional audio signal, axcite. axcite is used to
--   excite the <tt>string</tt>. Based on the Karplus-Strong algorithm.
--   
--   <pre>
--   ares  repluck  iplk, kamp, icps, kpick, krefl, axcite
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/repluck.html</a>
repluck :: D -> Sig -> D -> Sig -> Sig -> Sig -> Sig

-- | A string resonator with variable fundamental frequency.
--   
--   An audio signal is modified by a string resonator with variable
--   fundamental frequency.
--   
--   <pre>
--   ares  streson  asig, kfr, ifdbgain
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/streson.html</a>
streson :: Sig -> Sig -> D -> Sig

-- | Creates a tone similar to a bowed string.
--   
--   Audio output is a tone similar to a bowed string, using a physical
--   model developed from Perry Cook, but re-coded for Csound.
--   
--   <pre>
--   ares  wgbow  kamp, kfreq, kpres, krat, kvibf, kvamp, ifn [, iminfreq]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wgbow.html</a>
wgbow :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig -> Tab -> Sig

-- | A physical model of a bowed bar.
--   
--   A physical model of a bowed bar, belonging to the Perry Cook family of
--   waveguide instruments.
--   
--   <pre>
--   ares  wgbowedbar  kamp, kfreq, kpos, kbowpres, kgain [, iconst] [, itvel] \
--             [, ibowpos] [, ilow]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wgbowedbar.html</a>
wgbowedbar :: Sig -> Sig -> Sig -> Sig -> Sig -> Sig

-- | Creates a tone related to a brass instrument.
--   
--   Audio output is a tone related to a brass instrument, using a physical
--   model developed from Perry Cook, but re-coded for Csound.
--   
--   <pre>
--   ares  wgbrass  kamp, kfreq, ktens, iatt, kvibf, kvamp, ifn [, iminfreq]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wgbrass.html</a>
wgbrass :: Sig -> Sig -> Sig -> D -> Sig -> Sig -> Tab -> Sig

-- | Creates a tone similar to a clarinet.
--   
--   Audio output is a tone similar to a clarinet, using a physical model
--   developed from Perry Cook, but re-coded for Csound.
--   
--   <pre>
--   ares  wgclar  kamp, kfreq, kstiff, iatt, idetk, kngain, kvibf, kvamp, ifn \
--             [, iminfreq]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wgclar.html</a>
wgclar :: Sig -> Sig -> Sig -> D -> D -> Sig -> Sig -> Sig -> Tab -> Sig

-- | Creates a tone similar to a flute.
--   
--   Audio output is a tone similar to a flute, using a physical model
--   developed from Perry Cook, but re-coded for Csound.
--   
--   <pre>
--   ares  wgflute  kamp, kfreq, kjet, iatt, idetk, kngain, kvibf, kvamp, ifn \
--             [, iminfreq] [, ijetrf] [, iendrf]
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wgflute.html</a>
wgflute :: Sig -> Sig -> Sig -> D -> D -> Sig -> Sig -> Sig -> Tab -> Sig

-- | A high fidelity simulation of a plucked string.
--   
--   A high fidelity simulation of a plucked string, using interpolating
--   delay-lines.
--   
--   <pre>
--   ares  wgpluck  icps, iamp, kpick, iplk, idamp, ifilt, axcite
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wgpluck.html</a>
wgpluck :: D -> D -> Sig -> D -> D -> D -> Sig -> Sig

-- | Physical model of the plucked string.
--   
--   wgpluck2 is an implementation of the physical model of the plucked
--   string, with control over the pluck point, the pickup point and the
--   filter. Based on the Karplus-Strong algorithm.
--   
--   <pre>
--   ares  wgpluck2  iplk, kamp, icps, kpick, krefl
--   </pre>
--   
--   csound doc: <a>http://www.csounds.com/manual/html/wgpluck2.html</a>
wgpluck2 :: D -> Sig -> D -> Sig -> Sig -> Sig

module Csound.Typed.Opcode
