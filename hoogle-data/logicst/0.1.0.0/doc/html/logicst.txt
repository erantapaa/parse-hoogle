-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Backtracking mutable references in the ST and IO monads
--   
--   Backtracking mutable references in the ST and IO monads
@package logicst
@version 0.1.0.0

module Control.Monad.ST.Logic.Internal
data LogicT s m a
runLogicT :: MonadST m => (forall s. LogicT s m a) -> (a -> m r -> m r) -> m r -> m r
observeT :: MonadST m => (forall s. LogicT s m a) -> m a
observeAllT :: MonadST m => (forall s. LogicT s m a) -> m [a]
observeManyT :: MonadST m => Int -> (forall s. LogicT s m a) -> m [a]
liftST :: MonadST m => ST (World m) a -> m a
runLogicST :: (forall s. LogicT s (ST s) a) -> (a -> r -> r) -> r -> r
observeST :: (forall s. LogicT s (ST s) a) -> a
observeAllST :: (forall s. LogicT s (ST s) a) -> [a]
observeManyST :: Int -> (forall s. LogicT s (ST s) a) -> [a]
data Ref s m a
newRef :: MonadST m => a -> LogicT s m (Ref s m a)
readRef :: MonadST m => Ref s m a -> LogicT s m a
writeRef :: MonadST m => Ref s m a -> a -> LogicT s m ()
modifyRef :: MonadST m => Ref s m a -> (a -> a) -> LogicT s m ()
modifyRef' :: MonadST m => Ref s m a -> (a -> a) -> LogicT s m ()
instance MonadST m => MonadST (LogicT s m)
instance MonadIO m => MonadIO (LogicT s m)
instance MonadST m => MonadLogic (LogicT s m)
instance MonadST m => MonadPlus (LogicT s m)
instance Monad (LogicT s m)
instance MonadST m => Alternative (LogicT s m)
instance Applicative (LogicT s m)
instance Functor (LogicT s m)
instance MonadST IO
instance MonadST (ST s)

module Control.Monad.ST.Logic
type LogicST s = LogicT s (ST s)
runLogicST :: (forall s. LogicST s a) -> (a -> r -> r) -> r -> r
observeST :: (forall s. LogicST s a) -> a
observeAllST :: (forall s. LogicST s a) -> [a]
observeManyST :: Int -> (forall s. LogicST s a) -> [a]
liftST :: ST s a -> LogicST s a

module Data.STRef.Logic
type STRef s = Ref s (ST s)
newSTRef :: a -> LogicST s (STRef s a)
readSTRef :: STRef s a -> LogicST s a
writeSTRef :: STRef s a -> a -> LogicST s ()
modifySTRef :: STRef s a -> (a -> a) -> LogicST s ()
modifySTRef' :: STRef s a -> (a -> a) -> LogicST s ()

module Control.Monad.IO.Logic
type LogicIO s = LogicT s IO
runLogicIO :: (forall s. LogicIO s a) -> (a -> IO r -> IO r) -> IO r -> IO r
observeIO :: (forall s. LogicIO s a) -> IO a
observeAllIO :: (forall s. LogicIO s a) -> IO [a]
observeManyIO :: Int -> (forall s. LogicIO s a) -> IO [a]
liftST :: ST RealWorld a -> LogicIO s a

module Data.IORef.Logic
type IORef s = Ref s IO
newIORef :: a -> LogicIO s (IORef s a)
readIORef :: IORef s a -> LogicIO s a
writeIORef :: IORef s a -> a -> LogicIO s ()
modifyIORef :: IORef s a -> (a -> a) -> LogicIO s ()
modifyIORef' :: IORef s a -> (a -> a) -> LogicIO s ()
