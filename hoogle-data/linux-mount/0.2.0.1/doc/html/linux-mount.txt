-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Mount and unmount filesystems
--   
--   Bindings to the Linux <tt><a>mount()</a></tt> and
--   <tt><a>umount()</a></tt> syscalls.
@package linux-mount
@version 0.2.0.1


-- | <tt>linux-mount</tt> provides bindings to the Linux
--   <tt><a>mount()</a></tt> and <tt><a>umount()</a></tt> syscalls. All
--   functions below may fail with <tt><a>isPermissionError</a></tt> if the
--   user does not have the required privileges.
module System.Linux.Mount

-- | Mount a filesystem (call to <tt><a>mount()</a></tt>).
mount :: String -> FilePath -> String -> [MountFlag] -> DriverData -> IO ()

-- | Alter flags of a mounted filesystem (call to <tt><a>mount()</a></tt>
--   with <tt>MS_REMOUNT</tt>).
remount :: FilePath -> [MountFlag] -> DriverData -> IO ()

-- | A filesystem independent option to be used when mounting a filesystem.
data MountFlag

-- | Mount read-only (<tt>MS_RDONLY</tt>).
ReadOnly :: MountFlag

-- | Ignore suid and sgid bits (<tt>MS_NOSUID</tt>).
NoSUID :: MountFlag

-- | Disallow access to device special files (<tt>MS_NODEV</tt>).
NoDev :: MountFlag

-- | Disallow program execution (<tt>MS_NOEXEC</tt>).
NoExec :: MountFlag

-- | Writes are synced at once (<tt>MS_SYNCHRONOUS</tt>).
Synchronous :: MountFlag

-- | Allow mandatory locks on a filesystem (<tt>MS_MANDLOCK</tt>).
MandLock :: MountFlag

-- | Directory modifications are synchronous (<tt>MS_DIRSYNC</tt>).
DirSync :: MountFlag

-- | Do not update access times (<tt>MS_NOATIME</tt>).
NoATime :: MountFlag

-- | Do not update directory access times (<tt>MS_NODIRATIME</tt>).
NoDirATime :: MountFlag

-- | Silent mount (<tt>MS_SILENT</tt>).
Silent :: MountFlag

-- | VFS does not apply the umask (<tt>MS_POSIXACL</tt>).
PosixACL :: MountFlag

-- | Update atime relative to mtime/ctime (<tt>MS_RELATIME</tt>).
RelATime :: MountFlag

-- | Update inode I_version field (<tt>MS_I_VERSION</tt>).
IVersion :: MountFlag

-- | Always perform atime updates (<tt>MS_STRICTATIME</tt>).
StrictATime :: MountFlag

-- | Filesystem dependent options to be used when mounting a filesystem;
--   the content of <tt><a>DriverData</a></tt> is passed directly to the
--   filesystem driver.
type DriverData = ByteString

-- | Empty <tt><a>DriverData</a></tt>.
noData :: DriverData

-- | Mount an already mounted filesystem under a new directory (call to
--   <tt><a>mount()</a></tt> with <tt>MS_BIND</tt>).
bind :: FilePath -> FilePath -> IO ()

-- | Mount an already mounted filesystem and all its submounts under a new
--   directory (call to <tt><a>mount()</a></tt> with <tt>MS_BIND</tt> and
--   <tt>MS_REC</tt>).
rBind :: FilePath -> FilePath -> IO ()

-- | Alter flags of a bound filesystem (call to <tt><a>mount()</a></tt>
--   with <tt>MS_REMOUNT</tt> and <tt>MS_BIND</tt>).
rebind :: FilePath -> [MountFlag] -> IO ()

-- | Set the <tt>MS_SHARED</tt> propagation flag on a mounted filesystem.
makeShared :: FilePath -> IO ()

-- | Set the <tt>MS_SHARED</tt> propagation flag on a mounted filesystem
--   and recursively on all submounts.
makeRShared :: FilePath -> IO ()

-- | Set the <tt>MS_SLAVE</tt> propagation flag on a mounted filesystem.
makeSlave :: FilePath -> IO ()

-- | Set the <tt>MS_SLAVE</tt> propagation flag on a mounted filesystem
--   recursively on all submounts.
makeRSlave :: FilePath -> IO ()

-- | Set the <tt>MS_PRIVATE</tt> propagation flag on a mounted filesystem.
makePrivate :: FilePath -> IO ()

-- | Set the <tt>MS_PRIVATE</tt> propagation flag on a mounted filesystem
--   and recursively on all submounts.
makeRPrivate :: FilePath -> IO ()

-- | Set the <tt>MS_UNBINDABLE</tt> propagation flag on a mounted
--   filesystem.
makeUnbindable :: FilePath -> IO ()

-- | Set the <tt>MS_UNBINDABLE</tt> propagation flag on a mounted
--   filesystem and recursively on all submounts.
makeRUnbindable :: FilePath -> IO ()

-- | Atomically move a mounted filesystem to another mount point (call to
--   <tt><a>mount()</a></tt> with <tt>MS_MOVE</tt>).
move :: FilePath -> FilePath -> IO ()

-- | Unmount a filesystem (call to <tt><a>umount()</a></tt>).
umount :: FilePath -> IO ()

-- | Unmount a filesystem using specific unmount options (call to
--   <tt><a>umount2()</a></tt>). See <tt><a>UmountFlag</a></tt> for
--   details.
umountWith :: UmountFlag -> SymLink -> FilePath -> IO ()

-- | A filesystem independent option to be used when unmounting a
--   filesystem.
data UmountFlag

-- | Plain unmount, behaves like <tt><a>umount</a></tt>.
Plain :: UmountFlag

-- | Force unmount even if busy.
Force :: UmountFlag

-- | Perform a lazy unmount: make the mount point unavailable for new
--   accesses, and actually perform the unmount when the mount point ceases
--   to be busy.
Detach :: UmountFlag

-- | Mark the mount point as expired. If a mount point is not currently in
--   use, then an initial call to <tt><a>umountWith</a></tt> with this flag
--   fails with the error <tt><a>eAGAIN</a></tt>, but marks the mount point
--   as expired. The mount point remains expired as long as it isn't
--   accessed by any process. A second <tt><a>umountWith</a></tt> call
--   specifying <tt><a>Expire</a></tt> unmounts an expired mount point.
Expire :: UmountFlag

-- | Whether to follow symbolic links on umount.
data SymLink
Follow :: SymLink
NoFollow :: SymLink
instance [safe] Eq MountFlag
instance [safe] Read MountFlag
instance [safe] Show MountFlag
instance [safe] Eq UmountFlag
instance [safe] Read UmountFlag
instance [safe] Show UmountFlag
instance [safe] Eq SymLink
instance [safe] Read SymLink
instance [safe] Show SymLink
