-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | BrainFuck monad
--   
--   This is a BrainFuck monad, for generating brainfuck programs.
@package brainfuck-monad
@version 0.4.0

module Control.Monad.BrainFuck
newtype BrainFuck a
BrainFuck :: (DataPointer -> ([Char], DataPointer, a)) -> BrainFuck a
type DataPointer = Integer

-- | Retrieve the inner function
func :: BrainFuck f -> DataPointer -> ([Char], DataPointer, f)

-- | Evaluate the monad and get a brainfuck program
brainfuck :: BrainFuck f -> String

-- | move data pointer right
next :: BrainFuck ()

-- | if byte at data pointer is nonzero, jump to optoce after matching open
close :: BrainFuck ()

-- | if byte at data pointer is zero, jump to opcode after close
open :: BrainFuck ()

-- | input byte, storing at data pointer
input :: BrainFuck ()

-- | output byte at data pointer
output :: BrainFuck ()

-- | decrement data
decr :: BrainFuck ()

-- | increment data
incr :: BrainFuck ()

-- | move data pointer left
prev :: BrainFuck ()

-- | ignored if brainfuck machine does not support debugging
debug :: BrainFuck ()

-- | Adds an arbitrary character to the program. Should not be used
--   directly.
opcode :: Char -> BrainFuck ()

-- | Adds an arbitrary character to the program, and updates the data
--   pointer. Should not be used directly.
opcode' :: (DataPointer -> DataPointer) -> Char -> BrainFuck ()

-- | The loop is only run if the data pointer doesn't point to 0.
--   
--   On entry, the loop body is run, and then it loops, until the address
--   the data pointer originally pointed at has a value of 0.
--   
--   Any change that the loop body makes to the address of the data pointer
--   is reset each time through the loop (and at the end). This is
--   necessary to keep the BrainFuck monad's DataPointer consistent no
--   matter what happens when running the loop.
loopUnless0 :: BrainFuck a -> BrainFuck a

-- | Gets the current address of the data pointer.
addr :: BrainFuck DataPointer

-- | Moves the data pointer to a specific address.
setAddr :: Integer -> BrainFuck ()

-- | Runs an action with the data pointer temporarily set to an address,
--   then restores the data pointer.
withAddr :: Integer -> BrainFuck a -> BrainFuck a

-- | Run an action multiple times.
multi :: BrainFuck () -> Int -> BrainFuck ()
add :: Word8 -> BrainFuck ()
sub :: Word8 -> BrainFuck ()

-- | Zeros the current data cell.
zero :: BrainFuck ()

-- | Changes the current data cell to contain a specific value. (It can
--   start at any value).
set :: Word8 -> BrainFuck ()

-- | For higher-level programming in brainfuck, it's useful to have a way
--   to run a function, while allocating a memory cell, which is
--   initialized to contain 0.
--   
--   This and many of the functions below assume that cells to the left are
--   in use, while cells to the right are unused and may contain any data.
--   Higher-level functions should generally avoid changing the current
--   cell, and should instead alloc a new one to use.
alloc :: BrainFuck a -> BrainFuck a
alloc' :: (DataPointer -> BrainFuck a) -> BrainFuck a

-- | Allocates a new memory cell, populates it with a Char, and runs the
--   action.
withChar :: Char -> BrainFuck a -> BrainFuck a

-- | Allocates a cell and uses it as the loop counter, starting from the
--   provided value. The action will continue running in a loop until it
--   decrements the counter to 0.
loopFrom :: Word8 -> (DataPointer -> BrainFuck ()) -> BrainFuck ()

-- | Runs an action in an infinite loop. The action can modify its current
--   memory cell, or allocate and use new ones, and will not exit the loop.
forever :: BrainFuck a -> BrainFuck ()

-- | Copies the value of a cell.
copy :: DataPointer -> DataPointer -> BrainFuck ()

-- | Runs the action with a new cell that is logically NOT the value of the
--   passed pointer.
withNot :: DataPointer -> BrainFuck () -> BrainFuck ()

-- | Runs the action unless the data pointer points to 0.
unless0 :: DataPointer -> BrainFuck () -> BrainFuck ()

-- | Runs the action when the data pointer points to 0.
when0 :: DataPointer -> BrainFuck () -> BrainFuck ()

-- | Monadic if; the first action is run if the data pointer points to 0,
--   else the second action is run.
if0 :: DataPointer -> (BrainFuck (), BrainFuck ()) -> BrainFuck ()

-- | Adds the current and next data cells. The next cell is zeroed and the
--   sum is left in the current cell.
sumNext :: BrainFuck ()

-- | Multiplies the current data cell by some value. Uses and zeros some of
--   the following cells.
mult :: Word8 -> BrainFuck ()

-- | Displays a string. Tries to generate a fairly small brainfuck program,
--   using a few encoding tricks. The current cell is modified, and not
--   cleaned up at the end, so run using alloc if necessary.
display :: String -> BrainFuck ()

-- | Prints out the alphabet, repeatedly, with some whitespace fun to make
--   it more interesting.
demo :: String

-- | Copy input to output.
cat :: String

-- | Simple hello world.
helloworld :: String

-- | Optimized to use less space.
helloworld' :: String

-- | Simple optimiser for brainfuck code.
optimize :: String -> String
instance Monad BrainFuck
