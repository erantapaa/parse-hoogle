-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The fast and fun way to write Slack.com bots
--   
@package linklater
@version 3.1.0.0


-- | Here's a <tt>/jpgto</tt> bot! If you run this program and then tell
--   Slack about your server (incoming hook and custom slash command) and
--   then type <tt>/jpgto baby corgi</tt> in one of your channels, you'll
--   get the image from <tt><a>http://baby.corgi.jpg.to</a></tt>.
--   
--   
--   <a>https://github.com/hlian/linklater/blob/master/examples/JointPhotographicExpertsGroupTonga.hs</a>
--   
--   One <tt>/jpgto baby corgi</tt>, et voila.
--   
module Network.Linklater

-- | The <a>say</a> function posts a <a>Message</a>, with a capital M, to
--   Slack. It'll, however, need a <a>Config</a> (a.k.a. incoming token)
--   first.
say :: Message -> Config -> IO (Response ByteString)

-- | A bot server! As if by magic. This acts like a <a>WAI</a> middleware:
--   Linklater wraps around your application. (Really, it just gives you a
--   <a>Command</a> to work with instead of a raw HTTP request.)
slash :: (Maybe Command -> Application) -> Application

-- | A bot server for people who are in a hurry. Make a function that takes
--   a <a>Command</a> and returns some <a>Text</a> in <a>IO</a> world, and
--   we'll convert it into a <a>WAI</a> application. If you want more
--   control over the request and respond, see <a>slash</a>.
slashSimple :: (Maybe Command -> IO Text) -> Application

-- | Where <a>slash</a> commands come from, and where <a>Message</a>s go.
data Channel

-- | A public or private group.
GroupChannel :: Text -> Channel

-- | A private conversation with your best friend -- or lover ;).
IMChannel :: Text -> Channel

-- | A username: no at-signs, just text!
newtype User
User :: Text -> User

-- | Here's how you talk: you make one of these and pass it to <a>say</a>.
--   Before the day is done, Linklater will convert this to a JSON blob
--   using <a>Aeson</a>.
--   
--   <ul>
--   <li>Simple messages are parsed by Slack with parse=full (i.e. as if
--   you had typed it into the input box).</li>
--   <li>Complex messages are parsed according to Slack formatting. See
--   <a>Format</a>.</li>
--   </ul>
data Message
SimpleMessage :: Icon -> Text -> Channel -> Text -> Message
FormattedMessage :: Icon -> Text -> Channel -> [Format] -> Message

-- | Like a curiosity about the world, you'll need one of these to
--   <a>say</a> something.
data Config
Config :: Text -> Config

-- | This is the incoming web hook URL that Slack gave you. It's usually
--   <tt><a>https://hooks.slack.com/services/..</a>.</tt>.
_configHookURL :: Config -> Text

-- | Incoming HTTP requests to the slash function get parsed into one of
--   these babies.
data Command
Command :: Text -> User -> Channel -> Maybe Text -> Command

-- | The command name.
_commandName :: Command -> Text

-- | Who ran your slash command.
_commandUser :: Command -> User

-- | Where the person ran your slash command.
_commandChannel :: Command -> Channel

-- | Text for the slash command, if any.
_commandText :: Command -> Maybe Text

-- | The icon next to the messages you <a>say</a>. (Images unsupported
--   right now, sorry.)
newtype Icon

-- | For example, ":stars2:".
EmojiIcon :: Text -> Icon

-- | A little DSL for <a>Slack formatting</a>.
data Format

-- | <pre>
--   "&lt;@user|user&gt;"
--   </pre>
FormatAt :: User -> Format

-- | <pre>
--   "&lt;@user|user did this and that&gt;"
--   </pre>
FormatUser :: User -> Text -> Format

-- | <pre>
--   "&lt;http://example.com|user did this and that&gt;"
--   </pre>
FormatLink :: Text -> Text -> Format

-- | <pre>
--   "user did this &amp;amp; that"
--   </pre>
FormatString :: Text -> Format
instance Eq Channel
instance Ord Channel
instance Show Channel
instance Eq User
instance Ord User
instance Show User
instance Eq Command
instance Ord Command
instance Show Command
instance Eq Icon
instance Ord Icon
instance Show Icon
instance ToJSON Message
instance ToJSON Channel
