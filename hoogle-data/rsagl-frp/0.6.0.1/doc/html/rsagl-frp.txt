-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The RogueStar Animation and Graphics Library: Functional Reactive Programming
--   
--   RSAGL, the RogueStar Animation and Graphics Library, was specifically
--   designed for a computer game called roguestar, but effort has been
--   made to make it accessable to other projects that might benefit from
--   it.
--   
--   This package implements the RSAGL functional reactive programming
--   architecture.
@package rsagl-frp
@version 0.6.0.1


-- | A memoization scheme in which a piece of information is tagged with a
--   unique identifier for its source. Messages can be combined, and the
--   tagging information indicates the specific combination. On the
--   receiving end, we memoize the single most recent incoming message, and
--   reuse it if the source information matches.
module RSAGL.FRP.Message

-- | A sourced packet of information.
data Message a

-- | Two messages are consistent if they arrive from identical sources.
consistent :: Message a -> Message b -> Bool

-- | An arbitrary ordering scheme on messages.
consistency :: Message a -> Message b -> Ordering

-- | Examine a message without memoization.
peek :: Message a -> a

-- | An object that can memoize matching sequential outgoing messages.
data Transmitter a
newTransmitterBy :: (a -> a -> Bool) -> IO (Transmitter a)

-- | Equivalent to <tt>newTransmitterBy (==)</tt>.
newTransmitter :: Eq a => IO (Transmitter a)

-- | An object that can memoize sequentially matching incoming messages.
data Receiver a
newReceiver :: IO (Receiver a)

-- | Bind two messages.
(<<*>>) :: Message (a -> b) -> Message a -> Message b

-- | Construct a new message from a one-time source.
send :: a -> IO (Message a)

-- | Memoizes an incomming message stream.
receive :: Receiver a -> Message a -> IO a

-- | Tags an outgoing stream for memoization.
transmit :: Transmitter a -> a -> IO (Message a)
instance Eq Source
instance Ord Source

module RSAGL.FRP.FactoryArrow

-- | An <a>Arrow</a> that constructs an associated monadic computation.
newtype FactoryArrow m n i o
FactoryArrow :: m (Kleisli n i o) -> FactoryArrow m n i o
runFactory :: FactoryArrow m n i o -> m (Kleisli n i o)
instance (Monad m, MonadPlus n) => ArrowPlus (FactoryArrow m n)
instance (Monad m, MonadPlus n) => ArrowZero (FactoryArrow m n)
instance (Monad m, Monad n) => ArrowChoice (FactoryArrow m n)
instance Monad m => ArrowApply (FactoryArrow m m)
instance (Monad m, MonadFix n) => ArrowLoop (FactoryArrow m n)
instance (Monad m, Monad n) => Arrow (FactoryArrow m n)
instance (Monad m, Monad n) => Category (FactoryArrow m n)

module RSAGL.FRP.RecombinantState

-- | Describes concurrency-aware state. The goal is to take some stateful
--   information, clone it into a variety of concurrent threads, and then
--   recombine using the (possibly modified) state.
class RecombinantState s where { type family SubState s :: *; }
clone :: RecombinantState s => s -> SubState s
recombine :: RecombinantState s => s -> SubState s -> s
instance RecombinantState ()

module RSAGL.FRP.Time
data Time
data Rate a
type Acceleration a = Rate (Rate a)
type Frequency = Rate RSdouble
fps30 :: Frequency
fps60 :: Frequency
fps120 :: Frequency
minute :: Time
day :: Time
month :: Time
year :: Time
pack :: [Rate a] -> Rate [a]
unpack :: Rate [a] -> [Rate a]
packa :: [Acceleration a] -> Acceleration [a]
unpacka :: Acceleration [a] -> [Acceleration a]
fromSeconds :: RSdouble -> Time
toSeconds :: Time -> RSdouble
getTime :: IO Time
cyclical :: Time -> Time -> Time
cyclical' :: Time -> Time -> RSdouble
over :: AbstractVector a => Rate a -> Time -> a
rate :: AbstractVector a => (a, Time) -> (a, Time) -> Rate a
time :: RSdouble -> Rate RSdouble -> Time
perSecond :: a -> Rate a
per :: AbstractVector a => a -> Time -> Rate a
interval :: Frequency -> Time
withTime :: (AbstractVector a, AbstractVector b) => Time -> (a -> b) -> Rate a -> Rate b
instance Show Time
instance Eq Time
instance Ord Time
instance Show a => Show (Rate a)
instance Eq a => Eq (Rate a)
instance Ord a => Ord (Rate a)
instance AffineTransformable a => AffineTransformable (Rate a)
instance AbstractVector a => AbstractVector (Rate a)
instance AbstractScale a => AbstractScale (Rate a)
instance AbstractSubtract a a => AbstractSubtract (Rate a) (Rate a)
instance AbstractAdd a a => AbstractAdd (Rate a) (Rate a)
instance AbstractZero a => AbstractZero (Rate a)
instance AbstractVector Time
instance AbstractScale Time
instance AbstractSubtract Time Time
instance AbstractAdd Time Time
instance AbstractZero Time

module RSAGL.FRP.RK4

-- | Implementation of RK4 that time steps a system in which velocity is a
--   function of absolute time and position.
rk4 :: AbstractVector v => (p -> v -> p) -> (Time -> p -> Rate v) -> p -> Time -> Time -> p

-- | Implementation of RK4 that repeatedly time steps a system in which
--   velocity is a function of absolute time and position.
integrateRK4 :: AbstractVector v => (p -> v -> p) -> (Time -> p -> Rate v) -> p -> Time -> Time -> Integer -> p

-- | Implementation of RK4 that time steps a system in which acceleration
--   is a function of absolute time, position and velocity.
rk4' :: AbstractVector v => (p -> v -> p) -> (Time -> p -> Rate v -> Acceleration v) -> (p, Rate v) -> Time -> Time -> (p, Rate v)

-- | Implementation of RK4 that repeatedly time steps a system in which
--   acceleration is a function of absolute time, position and velocity.
integrateRK4' :: AbstractVector v => (p -> v -> p) -> (Time -> p -> Rate v -> Acceleration v) -> (p, Rate v) -> Time -> Time -> Integer -> (p, Rate v)


-- | A model of the types used by an FRP program.
module RSAGL.FRP.FRPModel
data Enabled
data Disabled
class RSAGL_FRP_FRPMODEL a => Capability a
class (RSAGL_FRP_FRPMODEL frp, Eq (ThreadIDOf frp)) => FRPModel frp where { type family ThreadingOf frp :: *; type family ThreadIDOf frp :: *; type family StateOf frp :: *; type family SwitchInputOf frp :: *; type family SwitchOutputOf frp :: *; type family InputOutputOf frp :: *; type family Unwrap frp :: *; }

-- | A root-level single-threaded program. IO is enabled by default.
type FRP1 s i o = Switch Disabled () s Enabled i o ()

-- | A root-level multi-threaded program. IO is enabled by default.
type FRPX t s i o = FRPContext t i o (FRP1 s i [(t, o)])

-- | A multi-threaded embedded subprogram.
type FRPContext t i o m = Switch Enabled t (SubState (StateOf m)) (InputOutputOf m) i o m

-- | A single-threaded embedded subprogram.
type FRP1Context i o m = Switch Disabled (ThreadIDOf m) (StateOf m) (InputOutputOf m) i o m

-- | A subprogram with IO capabilities disabled.
type IODisabled i o m = Switch (ThreadingOf m) (ThreadIDOf m) (StateOf m) Disabled i o m

-- | The FRPModel type that represents a switch. Consists of the following
--   type variables.
--   
--   Note: Don't pattern-match against this type directly, as it is a
--   volatile interface. Either use a type synonym, such as
--   <a>SimpleSwitch</a>, or match against the type functions in FRPModel.
--   
--   <ul>
--   <li>k - See, ThreadingOf. * t - See, ThreadIDOf. * s - See, StateOf. *
--   i - See, SwitchInputOf. * o - See, SwitchOutputOf. * m - A variable
--   that represents switch nesting.</li>
--   </ul>
data Switch k t s io i o m

-- | A legacy configuration, IO capabilities enabled.
type SimpleSwitch k t s i o m = Switch k t s Enabled i o m
instance (RSAGL_FRP_FRPMODEL m, Eq t, Capability k) => FRPModel (Switch k t s io i o m)
instance (RSAGL_FRP_FRPMODEL m, Capability k) => RSAGL_FRP_FRPMODEL (Switch k t s io i o m)
instance FRPModel ()
instance RSAGL_FRP_FRPMODEL ()
instance Capability Disabled
instance RSAGL_FRP_FRPMODEL Disabled
instance Capability Enabled
instance RSAGL_FRP_FRPMODEL Enabled

module RSAGL.FRP.FRP

-- | A switchable automata with timewise numerical methods.
data FRP e m j p

-- | Whenever a value is provided, change the presently running switch (or
--   thread) to the specified new value, and execute that switch before
--   continuing. This destroys all state local to the currently running
--   switch (or thread). This function acts as if the switch were performed
--   at frame begin.
switchContinue :: FRP e m (Maybe (FRP e m (SwitchInputOf m) (SwitchOutputOf m)), SwitchInputOf m) (SwitchInputOf m)

-- | Whenever a value is provided, change the presently running switch (or
--   thread) to the specified new value, and execute that switch before
--   continuing. This destroys all state local to the currently running
--   switch (or thread). This function acts as if the switch were performed
--   at frame end.
switchTerminate :: FRP e m (Maybe (FRP e m (SwitchInputOf m) (SwitchOutputOf m)), SwitchOutputOf m) (SwitchOutputOf m)

-- | Spawn new threads once per frame.
spawnThreads :: (ThreadingOf m) ~ Enabled => FRP e m [(ThreadIDOf m, FRP e m (SwitchInputOf m) (SwitchOutputOf m))] ()

-- | Kill the current thread, only when the given parameter is true.
killThreadIf :: (ThreadingOf m) ~ Enabled => FRP e m Bool ()

-- | Get the current thread's identity.
threadIdentity :: FRP e m () (ThreadIDOf m)

-- | Construct an arrow from its thread identity.
withThreadIdentity :: (ThreadIDOf m -> FRP e m j p) -> FRP e m j p
frpTest :: (forall e. [FRP e (FRPX () () i o) i o]) -> [i] -> IO [[o]]
type FRPProgram s i o = FRPInit s () i o

-- | Construct a multi-threaded FRPProgram.
newFRPProgram :: (RecombinantState s, Eq t) => ThreadIdentityRule t -> (forall e. [(t, FRP e (FRPX t s i o) i o)]) -> IO (FRPProgram s i [(t, o)])

-- | Construct a single-threaded FRPProgram.
newFRP1Program :: (forall e. FRP e (FRP1 s i o) i o) -> IO (FRPProgram s i o)

-- | Bring an FRPProgram up-to-date with the current time or a specific
--   time.
updateFRPProgram :: Maybe Time -> (i, s) -> FRPProgram s i o -> IO (o, s)

-- | Framewise accumulation of signals. The embedded function recieves the
--   current input and the previous output.
accumulate :: p -> (j -> p -> p) -> FRP e m j p

-- | Get the current absolute time.
absoluteTime :: FRP e m () Time

-- | Get the change in time since the last update.
deltaTime :: FRP e m () Time

-- | Should a thread be allowed to spawn? Typical values are
--   <a>nullaryThreadIdentity</a>, <a>forbidDuplicates</a>. The predicate
--   tests whether or not a particular thread is already running.
type ThreadIdentityRule t = (t -> Bool) -> t -> Bool

-- | Forbig duplicate threads by equality on the thread identity.
forbidDuplicates :: Eq t => ThreadIdentityRule t

-- | Allow unlimited duplicate <a>Nothing</a> threads, while restricting
--   all other threads according to the specified rule.
allowAnonymous :: ThreadIdentityRule t -> ThreadIdentityRule (Maybe t)

-- | Allow unlimited duplicate threads.
nullaryThreadIdentity :: ThreadIdentityRule a

-- | Embed some threads inside another running thread, as
--   <tt>threadGroup</tt>.
frpContext :: (RecombinantState s, s ~ (StateOf m), FRPModel m, Eq t) => ThreadIdentityRule t -> [(t, FRP e (FRPContext t j p m) j p)] -> FRP e m j [(t, p)]

-- | Embed a single-threaded, bracketed switch inside another running
--   thread.
frp1Context :: FRPModel m => FRP e (FRP1Context j p m) j p -> FRP e m j p

-- | Value recusion (see fix).
frpFix :: FRPModel m => FRP e (FRP1Context (j, x) (p, x) m) (j, x) (p, x) -> FRP e m j p

-- | Run a computation only when the input is defined.
whenJust :: FRPModel m => (forall x y. FRP e (FRP1Context x y m) j p) -> FRP e m (Maybe j) (Maybe p)

-- | Perform an IO action when a stream is first initialized.
ioInit :: (InputOutputOf m) ~ Enabled => (IO p) -> FRP e m () p

-- | Perform an arbitrary IO action.
ioAction :: (InputOutputOf m) ~ Enabled => (j -> IO p) -> FRP e m j p

-- | Send tagged information.
outgoingBy :: (j -> j -> Bool) -> FRP e m j (Message j)

-- | Send tagged information.
outgoing :: Eq j => FRP e m j (Message j)

-- | Receive tagged information, with memoization.
incoming :: FRP e m (Message j) j

-- | An FRP-embedded functor.
class StreamFunctor s
streampure :: StreamFunctor s => a -> FRP e m () (s a)
streammap :: StreamFunctor s => (a -> b) -> FRP e m (s a) (s b)

-- | Get a bounded random value, as <a>randomRIO</a>. A new value is pulled
--   for each frame of animation.
randomA :: Random a => FRP e m (a, a) a
instance StreamFunctor Message
instance StateOf m ~ s => ArrowState s (FRP e m)
instance Arrow (FRP e m)
instance Category (FRP e m)
instance Applicative (FRP e m j)
instance Functor (FRP e m j)

module RSAGL.FRP.Accumulation

-- | Delay a piece of data for one frame.
delay :: x -> FRP e m x x

-- | Take the integral of a rate over time, using the trapezoidal rule.
integral :: (AbstractVector v, AbstractAdd p v) => p -> FRP e m (Rate v) p

-- | Take the derivative of a value over time, by simple subtraction
--   between frames.
derivative :: (AbstractVector v, AbstractSubtract p v) => FRP e m p (Rate v)

-- | <a>accumulate</a> harness for some numerical methods. Parameters are:
--   current input, previous output, delta time, absolute time, and number
--   of frames at the specified frequency.
accumulateNumerical :: Frequency -> (i -> o -> Time -> Time -> Integer -> o) -> o -> FRP e m i o
integralRK4 :: AbstractVector v => Frequency -> (p -> v -> p) -> p -> FRP e m (Time -> p -> Rate v) p
integralRK4' :: AbstractVector v => Frequency -> (p -> v -> p) -> (p, Rate v) -> FRP e m (Time -> p -> Rate v -> Acceleration v) (p, Rate v)

-- | Sum some data frame-by-frame.
summation :: AbstractAdd p v => p -> FRP e m v p

-- | Elapsed time since the instantiation of this switch or thread. Reset
--   when a thread switches.
threadTime :: FRP e m () Time

-- | Answer the most recent input that satisfies the predicate. Accepts an
--   initial value, which need not itself satisfy the predicate.
--   
--   This can be a performance optimization, if it prevents unecessary
--   evaluation of an input.
sticky :: (x -> Bool) -> x -> FRP e m x x

-- | Answer the first input that ever passes through a function.
initial :: FRP e m x x

-- | The edge detection mode. If <a>Discrete</a>, detect edge between
--   subsequent frames only. If <a>Fuzzy</a> detect edge since the most
--   recent previous detected edge. If <tt>HashedDiscrete</tt>, the
--   comparison function is itself expensive, and the FRP runtime will
--   compare by <tt>StableName</tt>s as a short-circuit optimization.
data EdgeDetectionMode
Fuzzy :: EdgeDetectionMode
Discrete :: EdgeDetectionMode

-- | Returns <a>True</a> only during frames on which the input has changed,
--   based on a user-specified equality predicate. The predicate function
--   takes the most recent input as its first parameter.
edge :: EdgeDetectionMode -> (x -> x -> Bool) -> FRP e m x Bool

-- | Same as 'edge Discrete'.
changed :: (x -> x -> Bool) -> FRP e m x Bool

-- | Recalculate a function only at the edges of it's input.
clingy :: EdgeDetectionMode -> (j -> j -> Bool) -> (j -> p) -> FRP e m j p

module RSAGL.FRP
