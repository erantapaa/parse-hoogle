-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Functional 3D
--   
--   FieldTrip is a library for functional 3D geometry
--   
--   Please see the project wiki page:
--   <a>http://haskell.org/haskellwiki/FieldTrip</a>
--   
--   © 2008 by Andy Gill and Conal Elliott; BSD3 license.
@package FieldTrip
@version 0.2.4


-- | Parametric surfaces with automatic normals
module Graphics.FieldTrip.ParamSurf
type HeightField s = Two s -> One s
type Surf s = Two s -> Three s
type USurf = forall s. (Floating s) => Surf s
type Curve2 s = One s -> Two s
type Curve3 s = One s -> Three s
type Warp1 s = One s -> One s
type Warp2 s = Two s -> Two s
type Warp3 s = Three s -> Three s
mul2pi :: (Floating s) => s -> s

-- | Trig functions with unit period ([-1<i>2,1</i>2])
sinU :: (Floating s) => s -> s
cosU :: (Floating s) => s -> s

-- | Turn a height field into a surface
hfSurf :: HeightField s -> Surf s

-- | Like <a>hfSurf</a> but for curve construction
fcurve :: Warp1 s -> Curve2 s

-- | Unit circle.
circle :: (Floating s) => Curve2 s

-- | Half semi circle, with theta in [-pi<i>2,pi</i>2]
semiCircle :: (Floating s) => Curve2 s

-- | Torus, given radius of sweep circle and cross section
torus :: (Floating s, VectorSpace s, (Scalar s) ~ s) => s -> s -> Surf s
revolveG :: (Floating s) => (s -> Curve2 s) -> Surf s
revolve :: (Floating s) => Curve2 s -> Surf s
sphere1 :: (Floating s) => Surf s

-- | Profile product.
profile :: (Num s) => Curve2 s -> Curve2 s -> Surf s
sphere3 :: (Floating s) => Surf s
sphere2 :: (Floating s) => Surf s

-- | Frustum, given base &amp; cap radii and height.
frustum :: (Floating s, VectorSpace s, (Scalar s) ~ s) => s -> s -> s -> Surf s

-- | Unit cylinder. Unit height and radii
ucylinder :: (Floating s, VectorSpace s) => Surf s

-- | Given a combining op and two curves, make a surface. A sort of
--   Cartesian product with combination.
cartF :: (a -> b -> c) -> (u -> a) -> (v -> b) -> ((u, v) -> c)
sweep :: (VectorSpace s) => Curve3 s -> Curve3 s -> Surf s

-- | One period, unit height eggcrate
eggcrateH :: (Floating s) => HeightField s
revolveH :: (Floating s, InnerSpace s, (Scalar s) ~ s) => Warp1 s -> HeightField s
rippleH :: (Floating s, InnerSpace s, (Scalar s) ~ s) => HeightField s

-- | Simple ripply pond shape
ripple :: (Floating s) => Surf s

-- | Apply a displacement map at a value
displaceV :: (InnerSpace v, s ~ (Scalar v), Floating s, HasNormal v) => v -> Scalar v -> v

-- | Apply a displacement map to a function (e.g., <a>Curve2</a> or
--   <a>Surf</a>) or other container.
displace :: (InnerSpace v, (Scalar v) ~ s, Floating s, HasNormal v, Applicative f) => f v -> f (Scalar v) -> f v
rotate :: (Floating s) => s -> Warp2 s
addY :: (Num s) => (a -> Two s) -> (a -> Three s)
addZ :: (Num s) => (a -> Two s) -> (a -> Three s)
addX :: (Num s) => (a -> Two s) -> (a -> Three s)
addXZ :: (Num s) => (a -> One s) -> (a -> Three s)
addXY :: (Num s) => (a -> One s) -> (a -> Three s)
addYZ :: (Num s) => (a -> One s) -> (a -> Three s)
onY :: Warp1 s -> Warp3 s
onZ :: Warp1 s -> Warp3 s
onX :: Warp1 s -> Warp3 s
onYZ :: Warp2 s -> Warp3 s
onXZ :: Warp2 s -> Warp3 s
onXY :: Warp2 s -> Warp3 s
onY' :: Warp1 s -> (a -> Three s) -> (a -> Three s)
onZ' :: Warp1 s -> (a -> Three s) -> (a -> Three s)
onX' :: Warp1 s -> (a -> Three s) -> (a -> Three s)
onXZ' :: Warp2 s -> (a -> Three s) -> (a -> Three s)
onYZ' :: Warp2 s -> (a -> Three s) -> (a -> Three s)
onXY' :: Warp2 s -> (a -> Three s) -> (a -> Three s)


-- | General transform class
module Graphics.FieldTrip.Transform

-- | General transform class
class Transform xf a
(*%) :: (Transform xf a) => xf -> a -> a

-- | Invertible transformations
class Invertible xf
inverse :: (Invertible xf) => xf -> xf
instance (Invertible xf, Transform xf a, Transform xf b) => Transform xf (a -> b)
instance (Transform xf a, Transform xf b, Transform xf c, Transform xf d) => Transform xf (a, b, c, d)
instance (Transform xf a, Transform xf b, Transform xf c) => Transform xf (a, b, c)
instance (Transform xf a, Transform xf b) => Transform xf (a, b)


-- | Vectors in 2D. Uses the OpenGL <a>Vector2</a> type, for convenience
--   and efficiency.
module Graphics.FieldTrip.Vector2

-- | Construct a 3D vector in rectangular coordinates.
vector2 :: s -> s -> Vector2 s
vector2x :: Vector2 s -> s
vector2y :: Vector2 s -> s

-- | The unit vector in the positive X direction.
xVector2 :: (Num s) => Vector2 s

-- | The unit vector in the positive Y direction.
yVector2 :: (Num s) => Vector2 s

-- | Vector from polar coordinates. See also <a>vector2PolarCoords</a>.
vector2Polar :: (Floating s) => s -> s -> Vector2 s

-- | Polar coordinates of a vector. See also <a>vector2Polar</a>.
vector2PolarCoords :: (InnerSpace s, Floating s, (Scalar s) ~ s) => Vector2 s -> (s, s)
vector2D :: (HasBasis a, HasTrie (Basis a), VectorSpace s) => Two (a :> s) -> a :> (Vector2 s)
unvector2D :: (HasBasis a, HasTrie (Basis a), VectorSpace s) => a :> (Vector2 s) -> Two (a :> s)
instance HasNormal (Float :> Vector2 Float)
instance (Num s) => HasCross2 (Vector2 s)
instance (HasBasis u) => HasBasis (Vector2 u)
instance (InnerSpace u, AdditiveGroup (Scalar u)) => InnerSpace (Vector2 u)
instance (VectorSpace u) => VectorSpace (Vector2 u)
instance (AdditiveGroup u) => AdditiveGroup (Vector2 u)
instance Applicative Vector2
instance Functor Vector2


-- | Vectors in 3D. Uses the OpenGL <a>Vector3</a> type, for convenience
--   and efficiency.
module Graphics.FieldTrip.Vector3

-- | Construct a 3D vector in rectangular coordinates.
vector3 :: s -> s -> s -> Vector3 s

-- | The unit vector in the positive X direction.
xVector3 :: (Num s) => Vector3 s

-- | The unit vector in the positive Y direction.
yVector3 :: (Num s) => Vector3 s

-- | The unit vector in the positive Z direction.
zVector3 :: (Num s) => Vector3 s
vector3x :: Vector3 s -> s
vector3y :: Vector3 s -> s
vector3z :: Vector3 s -> s

-- | Vector from spherical coordinates. See also vector2SphericalCoords.
vector3Spherical :: (Floating s) => s -> s -> s -> Vector3 s

-- | Spherical coordinates of a vector. See also vector2Spherical.
vector3SphericalCoords :: (InnerSpace s, Floating s, (Scalar s) ~ s) => Vector3 s -> (s, s, s)
vector3D :: (VectorSpace s, HasBasis a, HasTrie (Basis a)) => Three (a :> s) -> a :> (Vector3 s)
unvector3D :: (VectorSpace s, HasBasis a, HasTrie (Basis a)) => a :> (Vector3 s) -> Three (a :> s)
instance HasNormal (Three (Vector2 Double :> Double))
instance HasNormal (Three (Vector2 Float :> Float))
instance (Num s) => HasCross3 (Vector3 s)
instance (Basis s ~ (), Num s, VectorSpace s, HasBasis s, HasTrie (Basis s)) => HasNormal (Vector2 s :> Vector3 s)
instance (HasBasis u) => HasBasis (Vector3 u)
instance (InnerSpace u, AdditiveGroup (Scalar u)) => InnerSpace (Vector3 u)
instance (VectorSpace u) => VectorSpace (Vector3 u)
instance (AdditiveGroup u) => AdditiveGroup (Vector3 u)
instance Applicative Vector3
instance Functor Vector3


-- | Points in 3D
module Graphics.FieldTrip.Point3

-- | Synonym for Vertex3, a 3D point, parameterized over coordinate type.
type Point3 = Vertex3

-- | Construct a 3D point in rectangular coordinates.
point3 :: s -> s -> s -> Point3 s
origin3 :: (Num s) => Point3 s

-- | Vector from spherical coordinates. See also vectorSphericalCoords.
point3Spherical :: (Floating s) => s -> s -> s -> Point3 s

-- | Spherical coordinates of a point. See also <a>point3Spherical</a>.
point3SphericalCoords :: (InnerSpace s, Floating s, s ~ (Scalar s)) => Point3 s -> (s, s, s)
instance (VectorSpace u) => AffineSpace (Vertex3 u)


-- | Normals and Vertex/normal pairs
module Graphics.FieldTrip.Normal3

-- | Vertex and normal
data VN v n
VN :: !v -> !n -> VN v n

-- | 3D vertex/normal pair
type VN3 s = VN (Point3 s) (Normal3 s)

-- | Treat a vector as a normal
vectorToNormal3 :: Vector3 s -> Normal3 s
instance (Vertex v, Normal n) => Vertex (VN v n)


-- | Points in 3D
module Graphics.FieldTrip.Point2

-- | Synonym for Vertex2, a 2D point, parameterized over coordinate type.
type Point2 = Vertex2

-- | Construct a 2D point in rectangular coordinates.
point2 :: s -> s -> Point2 s
origin2 :: (Num s) => Point2 s

-- | Vector from polar coordinates. See also vectorPolarCoords.
point2Polar :: (Floating s) => s -> s -> Point2 s

-- | Polar coordinates of a point. See also <a>point2Polar</a>.
point2PolarCoords :: (InnerSpace s, s ~ (Scalar s), Floating s) => Point2 s -> (s, s)
instance (VectorSpace u) => AffineSpace (Vertex2 u)


-- | Miscellany for FieldTrip graphics
module Graphics.FieldTrip.Misc

-- | Values commonly used for coordinates, coefficients, etc.
type R = Float

-- | Fractional portion, <tt>x - floor x</tt>
fracPart :: R -> R

-- | Unary operations
type Unop a = a -> a

-- | Binary operations
type Binop a = a -> a -> a

-- | Memoize an approximation to a given function, discretizing its domain
--   by scaling. An input <tt>x</tt> discretizes into <tt>round (logBase
--   base x)</tt>.
logMemo :: (Floating s, RealFrac s) => s -> (s -> a) -> (s -> a)


-- | Color helpers
module Graphics.FieldTrip.Color

-- | Our color type (with alpha)
type Col = Color4 R
rgb :: (Num s) => s -> s -> s -> Color4 s
rgba :: s -> s -> s -> s -> Color4 s
rgb255 :: (Fractional s) => s -> s -> s -> Color4 s
transparent :: (Fractional s) => Color4 s
black :: (Fractional s) => Color4 s
white :: (Fractional s) => Color4 s
red :: (Fractional s) => Color4 s
green :: (Fractional s) => Color4 s
blue :: (Fractional s) => Color4 s
yellow :: (Fractional s) => Color4 s
purple :: (Fractional s) => Color4 s
class HasColor c
toColor :: (HasColor c) => c -> Col

-- | Vertex and color
data VC v c
VC :: !v -> !c -> VC v c

-- | Overlay (alpha-blend) first color onto the second, accounting for
--   transparency
overC :: (Fractional s) => Color4 s -> Color4 s -> Color4 s
overPre :: (Fractional s) => Binop (Color4 s)
overNon :: (Fractional s) => Binop (Color4 s)
instance Functor Color4
instance (InnerSpace r, AdditiveGroup (Scalar r)) => InnerSpace (Color4 r)
instance (VectorSpace u) => VectorSpace (Color4 u)
instance (AdditiveGroup u) => AdditiveGroup (Color4 u)
instance (Vertex v, Color c) => Vertex (VC v c)
instance Color R
instance Color Bool
instance HasColor Float
instance HasColor Bool

module Graphics.FieldTrip.Material
data Material
Mat :: Col -> Col -> Col -> Col -> R -> Material
ambientM :: Material -> Col
diffuseM :: Material -> Col
specularM :: Material -> Col
emissionM :: Material -> Col
shininessM :: Material -> R
setAmbient :: Col -> Material -> Material
setDiffuse :: Col -> Material -> Material
setSpecular :: Col -> Material -> Material
setEmission :: Col -> Material -> Material
setShininess :: R -> Material -> Material
plastic :: Col -> Material
flat :: Col -> Material
defaultMat :: Material
bluePlastic :: Material
material :: Material -> IO ()
instance Show Material


-- | Misc rendering-related
module Graphics.FieldTrip.Render

-- | For use in dynamically approximating curved surfaces
type ErrorBound = R

-- | A transformation on materials. Accumulated during rendering.
type MaterialTrans = Unop Material

-- | Rendering context for geometry
data GContext
GC :: ErrorBound -> MaterialTrans -> Maybe Col -> GContext
gcErr :: GContext -> ErrorBound
gcMaterialTrans :: GContext -> MaterialTrans
gcNormals :: GContext -> Maybe Col

-- | Default graphics context
defaultGC :: GContext

-- | Modify the error-bound in a <a>GContext</a>
onErr :: Unop ErrorBound -> Unop GContext

-- | Turn on visible normals.
enableNormals :: Col -> GContext -> GContext

-- | renderer
type Renderer = GContext -> IO ()


-- | 3D transforms
module Graphics.FieldTrip.Transform3

-- | 3D affine transform
data Transform3 s
Identity3 :: Transform3 s
Translate3 :: (Vector3 s) -> Transform3 s

-- | angle (radians) and axis
Rotate3 :: s -> (Vector3 s) -> Transform3 s
Scale3 :: s -> s -> s -> Transform3 s
Compose3 :: (Transform3 s) -> (Transform3 s) -> Transform3 s

-- | Translation (motion) in 3D
translate3 :: Vector3 s -> Transform3 s

-- | Rotation in 3D, with angle in radians.
rotate3 :: s -> Vector3 s -> Transform3 s

-- | Scaling in 3D
scale3 :: s -> s -> s -> Transform3 s

-- | Uniform scale in 3D.
uscale3 :: s -> Transform3 s

-- | Change the matrix state, according to the given transform.
tweakMatrix3 :: (Floating s, MatrixComponent s) => Transform3 s -> IO ()

-- | Change the required upper error bound, to one that applies before
--   transforming. Hack for now.
tweakError3 :: (Real s, Fractional s) => Transform3 s -> ErrorBound -> ErrorBound
instance (Eq s) => Eq (Transform3 s)
instance (Show s) => Show (Transform3 s)
instance Monoid (Transform3 s)
instance (Fractional s, AdditiveGroup s) => Invertible (Transform3 s)


-- | 3D transforms
module Graphics.FieldTrip.Transform2

-- | 3D affine transform
data Transform2 s

-- | Translation (motion) in 3D
translate2 :: (Num s) => Vector2 s -> Transform2 s

-- | Rotation in 3D, with angle <tt>theta</tt> in radians.
rotate2 :: (Num s) => s -> Transform2 s

-- | Scaling in 3D
scale2 :: (Num s) => s -> s -> Transform2 s

-- | Uniform scale in 2D.
uscale2 :: (Num s) => s -> Transform2 s

-- | Change the matrix state, according to the given transform.
tweakMatrix2 :: (Floating s, MatrixComponent s) => Transform2 s -> IO ()

-- | Change the required upper error bound, to one that applies before
--   transforming. Hack for now.
tweakError2 :: (Real s, Fractional s) => Transform2 s -> ErrorBound -> ErrorBound
toT3 :: Transform2 s -> Transform3 s
instance Monoid (Transform2 s)
instance (Fractional s, AdditiveGroup s) => Invertible (Transform2 s)


-- | 2D imagery
module Graphics.FieldTrip.Image
type Image o = (R, R) -> o
type ImageC = Image Col
type Region = Image Bool
over :: Binop ImageC
smallFrac :: R -> Bool
rings :: Region
checker :: Region


-- | 2D geometry
module Graphics.FieldTrip.Geometry2

-- | 2D geometry In the <a>Monoid</a> instance, <a>mempty</a> is completely
--   invisible (aka transparent or empty), and <tt>a <a>mappend</a> b</tt>
--   places <tt>a</tt> on top of <tt>b</tt>.
data Geometry2

-- | Make a geometry from a rendering action. The action must leave
--   graphics state as it found it.
renderer2 :: Renderer -> Geometry2

-- | Render the geometry, given a graphics context. Leaves graphics state
--   unchanged.
renderWith2 :: GContext -> Geometry2 -> IO ()

-- | Render the geometry with default graphics context. See also
--   <a>renderWith2</a>.
render2 :: Geometry2 -> IO ()

-- | Box2 of unit <tt>width</tt> and <tt>height</tt>. See also 'box2.
ubox2 :: Geometry2

-- | Box2 of given <tt>width</tt> and <tt>height</tt>. See also 'ubox2.
box2 :: (Real s, Floating s, MatrixComponent s) => s -> s -> Geometry2

-- | Approximate one geometry by another, given an error bound
approx2 :: (ErrorBound -> Geometry2) -> Geometry2

-- | The unit disk, approximated as regular n-gons
udisk :: Geometry2

-- | A polygon
polygon :: (VertexComponent s) => [Vertex2 s] -> Geometry2

-- | Regular polygon
regularPolygon :: Int -> Geometry2

-- | Portion of a disk
diskWedge :: R -> Geometry2

-- | Regular polygon wedge. Oops! only works for frac &lt;= 1/2, since
--   otherwise the polygon is non-convex.
regularPolygonWedge :: (Ord s, Floating s, VertexComponent s) => s -> Int -> Geometry2

-- | The passed string of text centered at the origin with height 1.0
utext :: String -> Geometry2

-- | The width of the geometry of utext of that string.
utextWidth :: String -> Double

-- | The height of the baseline of geometry created by utext. This can be
--   used for underlining, for example.
utextBaseline :: Double

-- | Geometry2 filter
type Filter2 = Geometry2 -> Geometry2

-- | Simplified interface to <a>translate2</a>
move2 :: (MatrixComponent s, Real s, Floating s) => s -> s -> Filter2
move2X :: (MatrixComponent s, Real s, Floating s) => s -> Filter2

-- | Specializations of <a>move2</a>
move2Y :: (MatrixComponent s, Real s, Floating s) => s -> Filter2

-- | A geometry plus its a rotated-by-pi version.
andFlip2 :: Filter2
instance (Floating s, Real s, MatrixComponent s) => Transform (Transform2 s) Geometry2
instance Monoid Geometry2


-- | 3D geometry
module Graphics.FieldTrip.Geometry3

-- | 3D geometry
data Geometry3

-- | Modify the material in a geometry. See also <a>materialG</a>.
onMaterialG :: MaterialTrans -> Filter3

-- | Replace the material of a geometry. More generally, see
--   <a>onMaterialG</a>.
materialG :: Material -> Filter3

-- | Make a geometry from a rendering action. The action must leave
--   graphics state as it found it.
rendererG :: Renderer -> Geometry3
renderableG :: (Renderable a) => a -> Geometry3

-- | Flat geometry
flatG :: Geometry2 -> Geometry3

-- | Render the geometry, given a graphics context. Leaves graphics state
--   unchanged.
renderWith3 :: GContext -> Geometry3 -> IO ()

-- | Render the geometry with default graphics context. See also
--   <a>renderWith3</a>.
render3 :: Geometry3 -> IO ()
normalArrowG :: Col -> Filter3
cube :: Geometry3
box3 :: (MatrixComponent s, Real s, Floating s) => s -> s -> s -> Geometry3

-- | Sphere with given radius
sphere :: R -> Geometry3

-- | Unit sphere
usphere :: Geometry3

-- | Frustum of a cone, with given base radius, top radius, and height,
--   centered at origin.
frustum :: R -> R -> R -> Geometry3

-- | Cone with given base radius and height, and height, centered at
--   origin..
cone :: R -> R -> Geometry3

-- | Cylinder with given radius and height, centered at origin, and height,
--   centered at origin..
cylinder :: R -> R -> Geometry3

-- | Torus with given radii for the sweep and the swept circle
torus :: R -> R -> Geometry3

-- | Parametric surface without texture
surfG :: Surf (Vector2 R :> R) -> Geometry3

-- | Parametric surface with texture surfG' :: Surf (Vector2 R :&gt; R)
--   -&gt; ImageC -&gt; Geometry3
surfG' :: (Floating s, InnerSpace s, (Scalar s) ~ s, HasBasis s, HasTrie (Basis s), (Basis s) ~ (), VertexComponent s, NormalComponent s, Color c) => Surf (Vector2 s :> s) -> ((s, s) -> c) -> Geometry3
type Filter3 = Geometry3 -> Geometry3
move3 :: (MatrixComponent s, Real s, Floating s) => s -> s -> s -> Filter3
move3X :: (MatrixComponent s, Real s, Floating s) => s -> Filter3
move3Y :: (MatrixComponent s, Real s, Floating s) => s -> Filter3
move3Z :: (MatrixComponent s, Real s, Floating s) => s -> Filter3
pivot3 :: (MatrixComponent s, Floating s, Real s) => Vector3 s -> Filter3
andFlip3 :: (MatrixComponent s, Floating s, Real s) => Vector3 s -> Filter3
pivot3X :: Filter3
pivot3Y :: Filter3
pivot3Z :: Filter3
vsurf :: (InnerSpace s, Floating s, (Scalar s) ~ s, HasBasis s, HasTrie (Basis s), (Basis s) ~ ()) => Surf (Vector2 s :> s) -> (Vector2 s -> VN3 s)
instance Functor Quad
instance (Floating s, Real s, MatrixComponent s) => Transform (Transform3 s) Geometry3
instance Monoid Geometry3


-- | A functional library for 3D graphics
module Graphics.FieldTrip
