-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Sequential and parallel implementations of Lloyd's algorithm.
--   
--   Sequential and parallel implementations of Lloyd's algorithm.
@package kmeans-par
@version 1.5.1

module Algorithms.Lloyd.Sequential
data Point
Point :: Vector Double -> Point
point :: Point -> Vector Double
data Cluster
Cluster :: Int -> Point -> Cluster
identifier :: Cluster -> Int
centroid :: Cluster -> Point
newtype ExpectDivergent
ExpectDivergent :: Int -> ExpectDivergent
expectDivergent :: ExpectDivergent -> Int
kmeans :: Metric a => ExpectDivergent -> (Vector Double -> a) -> Vector Point -> Vector Cluster -> Vector (Vector Point)
data PointSum
PointSum :: Int -> Point -> PointSum
makeNewClusters :: Vector PointSum -> Vector Cluster
assign :: Metric a => (Vector Double -> a) -> Vector Cluster -> Vector Point -> Vector (Vector Point)
assignPS :: Metric a => (Vector Double -> a) -> Vector Cluster -> Vector Point -> Vector PointSum
step :: Metric a => (Vector Double -> a) -> Vector Cluster -> Vector Point -> Vector Cluster
instance Eq Point
instance Show Point
instance Show Cluster
instance Show PointSum
instance Semigroup PointSum
instance Eq Cluster
instance Semigroup Point

module Algorithms.Lloyd.Strategies
data Point
Point :: Vector Double -> Point
point :: Point -> Vector Double
data Cluster
Cluster :: Int -> Point -> Cluster
identifier :: Cluster -> Int
centroid :: Cluster -> Point
newtype ExpectDivergent
ExpectDivergent :: Int -> ExpectDivergent
expectDivergent :: ExpectDivergent -> Int
newtype Partitions
Partitions :: Int -> Partitions
partitions :: Partitions -> Int
kmeans :: Metric a => ExpectDivergent -> (Vector Double -> a) -> Partitions -> Vector Point -> Vector Cluster -> Vector (Vector Point)
step :: Metric a => (Vector Double -> a) -> Vector Cluster -> Vector (Vector Point) -> Vector Cluster
instance Semigroup a => Semigroup (Vector a)
