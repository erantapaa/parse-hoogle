-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Display simple diagrams from ghci
--   
--   This library provides a simple 2D graphics environment which is used
--   in our beginner's Haskell course at ELTE University in Budapest.
--   
--   Example&gt; draw $ circle 10 <a>fill</a> lightblue
--   
--   Changes since version 0.1: resizeable diagram, easier exit
@package ghci-diagrams
@version 0.1.1

module DrawDiagrams

-- | <a>Diagram</a> is the core data type which describes a diagram.
--   <a>Diagram</a>s may be constructed, transformed, combined, and
--   ultimately rendered as an image.
data Diagram :: *
circle :: Double -> Diagram

-- | <tt>rect w h</tt> is a rectangle of width <tt>w</tt> and height
--   <tt>h</tt>.
rect :: Double -> Double -> Diagram
(>-<) :: Point -> Point -> Diagram
move :: Diagram -> (Double, Double) -> Diagram
rotate :: Diagram -> Double -> Diagram
scale :: Diagram -> Double -> Diagram
(<|>) :: Diagram -> Diagram -> Diagram

-- | Create a <a>Diagram</a> as a union of subdiagrams which will not be
--   repositioned. If the subdiagrams overlap, they will appear with the
--   first <a>Diagram</a> on the bottom, and the last on top.
union :: [Diagram] -> Diagram
polygon :: [Point] -> Diagram
polyline :: [Point] -> Diagram
strokeWidth :: Diagram -> Double -> Diagram
fill :: Color c => Diagram -> c -> Diagram
stroke :: Color c => Diagram -> c -> Diagram

-- | The <a>Color</a> type class encompasses color representations which
--   can be used by the Diagrams library; that is, every function in the
--   Diagrams library which expects a color can take any type which is an
--   instance of <a>Color</a>. Instances are provided for both the
--   <a>Colour</a> and <a>AlphaColour</a> types from the <a>Data.Colour</a>
--   library.
class Color c

-- | Constructs a <a>Colour</a> from RGB values using the <i>linear</i> RGB
--   colour with the same gamut as sRGB.
rgb :: Fractional a => a -> a -> a -> Colour a

-- | Basic 2D points/vectors.
type Point = (Double, Double)
(.+.) :: Point -> Point -> Point

-- | Elementwise addition, subtraction and multiplication for
--   <a>Point</a>s.
(.-.) :: Point -> Point -> Point
(.*.) :: Point -> Point -> Point

-- | Scalar multiplication.
(*.) :: Double -> Point -> Point

-- | Scale a diagram along the y-axis only. <tt>scaleY s</tt> is equivalent
--   to <tt>stretch 1 s</tt>.
scaleY :: Double -> Diagram -> Diagram
draw :: Diagram -> IO ()
drawOn :: Int -> Int -> Diagram -> IO ()
