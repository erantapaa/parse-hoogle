-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | From a regex, generate all possible strings it can match
--   
--   From a regex, generate all possible strings it can match
@package regex-genex
@version 0.6.2

module Regex.Genex.Normalize

-- | Normalize a regex into <tt>strong star normal form</tt>, as defined in
--   the paper <tt>Simplifying Regular Expressions: A Quantitative
--   Perspective</tt>.
normalize :: BackReferences -> Pattern -> Pattern


-- | This module and the accompanying <a>genex</a> program finds all
--   permutations of strings that matches every input regular expressions,
--   ordered from shortest to longest, with full support for back
--   references ('\1' .. '\9') and word boundaries ('\b').
--   
--   It requires the <tt>z3</tt> or <tt>yices</tt> binary in PATH. The
--   latter may be downloaded from:
--   <a>http://yices.csl.sri.com/download-yices2.shtml</a>
module Regex.Genex

-- | A match consists of a string (list of codepoints), and a rank
--   representing alternation order.
data Model
Model :: [Word8] -> Word64 -> Model
modelChars :: Model -> [Word8]
modelRank :: Model -> Word64

-- | Given a list of regular repressions, returns all possible strings that
--   matches every one of them. Guarantees to return shorter strings before
--   longer ones.
genex :: [String] -> IO [String]

-- | A pure and much faster variant of <a>genex</a>, but without support
--   for back-references, anchors or word boundaries. Does not guarantee
--   orders about length of strings. Does not depend on the external
--   <tt>yices</tt> SMT solver.
genexPure :: [String] -> [String]

-- | Same as <a>genexModels</a>, but print the models to standard output
--   instead.
genexPrint :: [String] -> IO ()

-- | Same as <a>genex</a>, but with the entire model returned instead.
genexModels :: [String] -> IO [Model]
genexWith :: (?maxRepeat :: Int, Monoid a) => ([SatResult] -> Hits -> (Hits -> IO a) -> IO a) -> [[Char]] -> IO a
regexMatch :: ?maxRepeat :: Int => [[Char]] -> Str -> Symbolic SBool
instance Show Model
instance Eq Model
instance Ord Model
instance Mergeable Status
