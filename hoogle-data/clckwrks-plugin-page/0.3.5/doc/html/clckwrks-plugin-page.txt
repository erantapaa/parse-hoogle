-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | support for CMS/Blogging in clckwrks
--   
--   support for CMS/Blogging in clckwrks
@package clckwrks-plugin-page
@version 0.3.5

module Clckwrks.Page.Types
newtype PageId
PageId :: Integer -> PageId
unPageId :: PageId -> Integer
data PreProcessor
HsColour :: PreProcessor
Markdown :: PreProcessor
runPreProcessors :: MonadIO m => [PreProcessor] -> Trust -> Text -> m (Either Text Text)
runPreProcessor :: MonadIO m => PreProcessor -> Trust -> Text -> m (Either Text Text)
data Markup_001
Markup_001 :: [PreProcessor] -> Text -> Markup_001
preProcessors_001 :: Markup_001 -> [PreProcessor]
markup_001 :: Markup_001 -> Text
data Markup
Markup :: [PreProcessor] -> Text -> Trust -> Markup
preProcessors :: Markup -> [PreProcessor]
markup :: Markup -> Text
trust :: Markup -> Trust
data PublishStatus
Draft :: PublishStatus
Revoked :: PublishStatus
Published :: PublishStatus
Scheduled :: PublishStatus
publishStatusString :: PublishStatus -> String
data PageKind
PlainPage :: PageKind
Post :: PageKind
data Page_001
Page_001 :: PageId -> Text -> Markup -> Maybe Markup -> Maybe UTCTime -> PublishStatus -> PageKind -> Page_001
pageId_001 :: Page_001 -> PageId
pageTitle_001 :: Page_001 -> Text
pageSrc_001 :: Page_001 -> Markup
pageExcerpt_001 :: Page_001 -> Maybe Markup
pageDate_001 :: Page_001 -> Maybe UTCTime
pageStatus_001 :: Page_001 -> PublishStatus
pageKind_001 :: Page_001 -> PageKind
data Page_002
Page_002 :: PageId -> UserId -> Text -> Markup -> Maybe Markup -> UTCTime -> UTCTime -> PublishStatus -> PageKind -> UUID -> Page_002
pageId_002 :: Page_002 -> PageId
pageAuthor_002 :: Page_002 -> UserId
pageTitle_002 :: Page_002 -> Text
pageSrc_002 :: Page_002 -> Markup
pageExcerpt_002 :: Page_002 -> Maybe Markup
pageDate_002 :: Page_002 -> UTCTime
pageUpdated_002 :: Page_002 -> UTCTime
pageStatus_002 :: Page_002 -> PublishStatus
pageKind_002 :: Page_002 -> PageKind
pageUUID_002 :: Page_002 -> UUID
newtype Slug
Slug :: Text -> Slug
unSlug :: Slug -> Text
slugify :: Text -> Slug
toSlug :: Text -> Maybe Slug -> Slug
data Page_3
Page_3 :: PageId -> UserId -> Text -> Maybe Slug -> Markup -> Maybe Markup -> UTCTime -> UTCTime -> PublishStatus -> PageKind -> UUID -> Page_3
pageId_3 :: Page_3 -> PageId
pageAuthor_3 :: Page_3 -> UserId
pageTitle_3 :: Page_3 -> Text
pageSlug_3 :: Page_3 -> Maybe Slug
pageSrc_3 :: Page_3 -> Markup
pageExcerpt_3 :: Page_3 -> Maybe Markup
pageDate_3 :: Page_3 -> UTCTime
pageUpdated_3 :: Page_3 -> UTCTime
pageStatus_3 :: Page_3 -> PublishStatus
pageKind_3 :: Page_3 -> PageKind
pageUUID_3 :: Page_3 -> UUID
data Page
Page :: PageId -> UserId -> Text -> Maybe Slug -> Markup -> Maybe Markup -> UTCTime -> UTCTime -> PublishStatus -> PageKind -> UUID -> ThemeStyleId -> Page
pageId :: Page -> PageId
pageAuthor :: Page -> UserId
pageTitle :: Page -> Text
pageSlug :: Page -> Maybe Slug
pageSrc :: Page -> Markup
pageExcerpt :: Page -> Maybe Markup
pageDate :: Page -> UTCTime
pageUpdated :: Page -> UTCTime
pageStatus :: Page -> PublishStatus
pageKind :: Page -> PageKind
pageUUID :: Page -> UUID
pageThemeStyleId :: Page -> ThemeStyleId
type Pages = IxSet Page
data FeedConfig
FeedConfig :: UUID -> Text -> Text -> Text -> FeedConfig

-- | UUID which identifies this feed. Should probably never change ,
--   feedCategory :: Set Text
feedUUID :: FeedConfig -> UUID
feedTitle :: FeedConfig -> Text
feedLink :: FeedConfig -> Text
feedAuthorName :: FeedConfig -> Text
initialFeedConfig :: IO FeedConfig
instance SafeCopy FeedConfig
instance Typeable FeedConfig
instance Eq FeedConfig
instance Ord FeedConfig
instance Read FeedConfig
instance Show FeedConfig
instance Data FeedConfig
instance Indexable Page
instance Migrate Page
instance SafeCopy Page
instance Typeable Page
instance Eq Page
instance Ord Page
instance Read Page
instance Show Page
instance Data Page
instance Migrate Page_3
instance SafeCopy Page_3
instance Typeable Page_3
instance Eq Page_3
instance Ord Page_3
instance Read Page_3
instance Show Page_3
instance Data Page_3
instance PathInfo (Maybe Slug)
instance PathInfo Slug
instance SafeCopy Slug
instance Typeable Slug
instance Eq Slug
instance Ord Slug
instance Data Slug
instance Read Slug
instance Show Slug
instance Migrate Page_002
instance SafeCopy Page_002
instance Typeable Page_002
instance Eq Page_002
instance Ord Page_002
instance Read Page_002
instance Show Page_002
instance Data Page_002
instance SafeCopy Page_001
instance Typeable Page_001
instance Eq Page_001
instance Ord Page_001
instance Read Page_001
instance Show Page_001
instance Data Page_001
instance SafeCopy PageKind
instance Typeable PageKind
instance Eq PageKind
instance Ord PageKind
instance Read PageKind
instance Show PageKind
instance Data PageKind
instance SafeCopy PublishStatus
instance Typeable PublishStatus
instance Eq PublishStatus
instance Ord PublishStatus
instance Read PublishStatus
instance Show PublishStatus
instance Data PublishStatus
instance Migrate Markup
instance SafeCopy Markup
instance Typeable Markup
instance Eq Markup
instance Ord Markup
instance Read Markup
instance Show Markup
instance Data Markup
instance SafeCopy Markup_001
instance Typeable Markup_001
instance Eq Markup_001
instance Ord Markup_001
instance Read Markup_001
instance Show Markup_001
instance Data Markup_001
instance SafeCopy PreProcessor
instance Typeable PreProcessor
instance Eq PreProcessor
instance Ord PreProcessor
instance Read PreProcessor
instance Show PreProcessor
instance Data PreProcessor
instance FromJSON PageId
instance ToJSON PageId
instance SafeCopy PageId
instance Typeable PageId
instance Eq PageId
instance Ord PageId
instance Show PageId
instance Read PageId
instance Data PageId
instance PathInfo PageId

module Clckwrks.Page.Acid
data PageState
initialPageState :: IO PageState
data NewPage
NewPage :: PageKind -> UserId -> UUID -> UTCTime -> NewPage
newtype PageById
PageById :: PageId -> PageById
newtype GetPageTitle
GetPageTitle :: PageId -> GetPageTitle
newtype IsPublishedPage
IsPublishedPage :: PageId -> IsPublishedPage
data PagesSummary
PagesSummary :: PagesSummary
newtype UpdatePage
UpdatePage :: Page -> UpdatePage
data AllPosts
AllPosts :: AllPosts
data AllPublishedPages
AllPublishedPages :: AllPublishedPages
data GetFeedConfig
GetFeedConfig :: GetFeedConfig
newtype SetFeedConfig
SetFeedConfig :: FeedConfig -> SetFeedConfig
data GetBlogTitle
GetBlogTitle :: GetBlogTitle
data GetOldUACCT
GetOldUACCT :: GetOldUACCT
data ClearOldUACCT
ClearOldUACCT :: ClearOldUACCT
instance Typeable NewPage
instance Typeable PageById
instance Typeable GetPageTitle
instance Typeable IsPublishedPage
instance Typeable PagesSummary
instance Typeable UpdatePage
instance Typeable AllPosts
instance Typeable AllPublishedPages
instance Typeable GetFeedConfig
instance Typeable SetFeedConfig
instance Typeable GetBlogTitle
instance Typeable GetOldUACCT
instance Typeable ClearOldUACCT
instance UpdateEvent ClearOldUACCT
instance Method ClearOldUACCT
instance SafeCopy ClearOldUACCT
instance QueryEvent GetOldUACCT
instance Method GetOldUACCT
instance SafeCopy GetOldUACCT
instance QueryEvent GetBlogTitle
instance Method GetBlogTitle
instance SafeCopy GetBlogTitle
instance UpdateEvent SetFeedConfig
instance Method SetFeedConfig
instance SafeCopy SetFeedConfig
instance QueryEvent GetFeedConfig
instance Method GetFeedConfig
instance SafeCopy GetFeedConfig
instance QueryEvent AllPublishedPages
instance Method AllPublishedPages
instance SafeCopy AllPublishedPages
instance QueryEvent AllPosts
instance Method AllPosts
instance SafeCopy AllPosts
instance UpdateEvent UpdatePage
instance Method UpdatePage
instance SafeCopy UpdatePage
instance QueryEvent PagesSummary
instance Method PagesSummary
instance SafeCopy PagesSummary
instance QueryEvent IsPublishedPage
instance Method IsPublishedPage
instance SafeCopy IsPublishedPage
instance QueryEvent GetPageTitle
instance Method GetPageTitle
instance SafeCopy GetPageTitle
instance QueryEvent PageById
instance Method PageById
instance SafeCopy PageById
instance UpdateEvent NewPage
instance Method NewPage
instance SafeCopy NewPage
instance IsAcidic PageState
instance Migrate PageState
instance SafeCopy PageState
instance Typeable PageState
instance Eq PageState
instance Read PageState
instance Show PageState
instance Data PageState
instance Migrate PageState_002
instance SafeCopy PageState_002
instance Typeable PageState_002
instance Eq PageState_002
instance Read PageState_002
instance Show PageState_002
instance Data PageState_002
instance SafeCopy PageState_001
instance Typeable PageState_001
instance Eq PageState_001
instance Read PageState_001
instance Show PageState_001
instance Data PageState_001

module Clckwrks.Page.URL
data PageAdminURL
EditPage :: PageId -> PageAdminURL
PreviewPage :: PageId -> PageAdminURL
Pages :: PageAdminURL
NewPage :: PageAdminURL
NewPost :: PageAdminURL
EditFeedConfig :: PageAdminURL
data PageURL
ViewPage :: PageId -> PageURL
ViewPageSlug :: PageId -> Slug -> PageURL
Blog :: PageURL
AtomFeed :: PageURL
PageAdmin :: PageAdminURL -> PageURL
instance PathInfo PageURL
instance SafeCopy PageURL
instance Typeable PageURL
instance Eq PageURL
instance Ord PageURL
instance Data PageURL
instance Read PageURL
instance Show PageURL
instance PathInfo PageAdminURL
instance SafeCopy PageAdminURL
instance Typeable PageAdminURL
instance Eq PageAdminURL
instance Ord PageAdminURL
instance Data PageAdminURL
instance Read PageAdminURL
instance Show PageAdminURL

module Clckwrks.Page.NavBarCallback
navBarCallback :: AcidState PageState -> (PageURL -> [(Text, Maybe Text)] -> Text) -> ClckT ClckURL IO (String, [NamedLink])

module Clckwrks.Page.PreProcess
parseAttr :: Text -> Parser ()
qchar :: Parser Char
text :: Parser Text
qtext :: Parser Text
data PageCmd
PageLink :: PageId -> (Maybe Text) -> Bool -> PageCmd
PageTitle :: PageId -> PageCmd
parseCmd :: Parser PageCmd
pageCmd :: (Functor m, MonadIO m) => AcidState PageState -> (PageURL -> [(Text, Maybe Text)] -> Text) -> Text -> ClckT url m Text
applyCmd :: (MonadIO m, EmbedAsAttr m (Attr Text Text), EmbedAsChild m Text, ~ * (StringType m) Text, ~ * (XMLType m) XML) => AcidState (EventState GetPageTitle) -> (PageURL -> [a] -> Text) -> PageCmd -> m Builder
instance Eq PageCmd
instance Ord PageCmd
instance Show PageCmd

module Clckwrks.Page.Monad
data PageConfig
PageConfig :: AcidState PageState -> (ClckURL -> [(Text, Maybe Text)] -> Text) -> PageConfig
pageState :: PageConfig -> AcidState PageState
pageClckURL :: PageConfig -> ClckURL -> [(Text, Maybe Text)] -> Text
type PageT m = ClckT PageURL (ReaderT PageConfig m)
type PageT' url m = ClckT url (ReaderT PageConfig m)
type PageM = ClckT PageURL (ReaderT PageConfig (ServerPartT IO))
type PageAdminM = ClckT PageAdminURL (ReaderT PageConfig (ServerPartT IO))
runPageT :: PageConfig -> PageT m a -> ClckT PageURL m a
runPageT'' :: Monad m => (PageURL -> [(Text, Maybe Text)] -> Text) -> PageConfig -> PageT m a -> ClckT url m a
flattenURLClckT :: (url1 -> [(Text, Maybe Text)] -> Text) -> ClckT url1 m a -> ClckT url2 m a
clckT2PageT :: (Functor m, MonadIO m, Typeable url1) => ClckT url1 m a -> PageT m a
data PageFormError
PageCFE :: (CommonFormError [Input]) -> PageFormError
PageErrorInternal :: PageFormError
type PageForm = ClckFormT PageFormError PageM

-- | convert <a>Markup</a> to <a>Content</a> that can be embedded.
--   Generally by running the pre-processors needed. markupToContent ::
--   (Functor m, MonadIO m, Happstack m) =&gt; Markup -&gt; ClckT url m
--   Content
markupToContent :: (Functor m, MonadIO m, Happstack m) => Markup -> ClckT url m Content
instance Show PageFormError
instance IsName n Text => EmbedAsAttr PageM (Attr n ClckURL)
instance IsName n Text => EmbedAsAttr PageM (Attr n PageURL)
instance (Functor m, Monad m) => GetAcidState (PageT' url m) PageState
instance Monad m => MonadReader PageConfig (PageT' url m)
instance (Functor m, Monad m) => EmbedAsChild (PageT m) PageFormError
instance FormError PageFormError

module Clckwrks.Page.Admin.EditFeedConfig
editFeedConfig :: PageURL -> PageM Response
feedConfigForm :: FeedConfig -> PageForm FeedConfig

module Clckwrks.Page.Admin.EditPage
editPage :: PageURL -> PageId -> PageM Response

module Clckwrks.Page.Admin.NewPage
newPage :: PageKind -> PageM Response

module Clckwrks.Page.Admin.Pages
pages :: PageM Response
editList :: [(PageId, Text, Maybe Slug, UTCTime, UserId, PublishStatus)] -> GenChildList PageM

module Clckwrks.Page.Admin.PreviewPage
previewPage :: PageId -> PageM Response

module Clckwrks.Page.Atom
atom :: FeedConfig -> [Page] -> PageM XML
mostRecentUpdate :: [Page] -> UTCTime
entry :: Page -> PageM XML
atomDate :: UTCTime -> String
atomContent :: Markup -> PageM XML
handleAtomFeed :: PageM Response

module Clckwrks.Page.API
newtype PageId
PageId :: Integer -> PageId
unPageId :: PageId -> Integer
getPagesSummary :: PageM [(PageId, Text, Maybe Slug, UTCTime, UserId, PublishStatus)]
getPageSummary :: PageId -> PageM Content
getPageMenu :: GenXML PageM
getPosts :: XMLGenT (PageM) [Page]
extractExcerpt :: (MonadIO m, Functor m, Happstack m) => Page -> ClckT url m Content
getBlogTitle :: PageM Text
googleAnalytics :: XMLGenT (PageM) XML

module Clckwrks.Page.BlogPage
postsHTML :: XMLGenT PageM XML
postHTML :: Page -> XMLGenT PageM XML
blog :: PageM Response

module Clckwrks.Page.Route
checkAuth :: PageURL -> PageM PageURL

-- | routes for <tt>AdminURL</tt>
routePageAdmin :: PageAdminURL -> PageM Response
routePage :: PageURL -> PageM Response

module Clckwrks.Page.Plugin
pageHandler :: (PageURL -> [(Text, Maybe Text)] -> Text) -> PageConfig -> ClckPlugins -> [Text] -> ClckT ClckURL (ServerPartT IO) Response
pageInit :: ClckPlugins -> IO (Maybe Text)
addPageAdminMenu :: ClckT url IO ()
migrateUACCT :: AcidState PageState -> ClckT url IO ()
pagePlugin :: Plugin PageURL Theme (ClckT ClckURL (ServerPartT IO) Response) (ClckT ClckURL IO ()) ClckwrksConfig ClckPluginsSt
plugin :: ClckPlugins -> Text -> IO (Maybe Text)
