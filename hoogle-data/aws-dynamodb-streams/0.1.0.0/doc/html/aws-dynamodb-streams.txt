-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings for Amazon DynamoDB Streams
--   
@package aws-dynamodb-streams
@version 0.1.0.0


module Aws.DynamoDb.Streams.Types

-- | Identifier for a record.
--   
--   Length constraints: <tt>21 ≤ n ≤ 40</tt>
data SequenceNumber

-- | The beginning and ending sequence numbers for the stream records
--   contained within a shard.
data SequenceNumberRange
SequenceNumberRange :: !(Maybe SequenceNumber) -> !(Maybe SequenceNumber) -> SequenceNumberRange
_sqnrStartingSequenceNumber :: SequenceNumberRange -> !(Maybe SequenceNumber)
_sqnrEndingSequenceNumber :: SequenceNumberRange -> !(Maybe SequenceNumber)

-- | A lens for <a>_sqnrStartingSequenceNumber</a>.
--   
--   <pre>
--   <a>sqnrStartingSequenceNumber</a> ∷ Lens' <a>SequenceNumberRange</a> (<a>Maybe</a> <a>SequenceNumber</a>)
--   </pre>
sqnrStartingSequenceNumber :: Functor f => (Maybe SequenceNumber -> f (Maybe SequenceNumber)) -> SequenceNumberRange -> f SequenceNumberRange

-- | A lens for <a>_sqnrEndingSequenceNumber</a>.
--   
--   <pre>
--   <a>sqnrEndingSequenceNumber</a> ∷ Lens' <a>SequenceNumberRange</a> (<a>Maybe</a> <a>SequenceNumber</a>)
--   </pre>
sqnrEndingSequenceNumber :: Functor f => (Maybe SequenceNumber -> f (Maybe SequenceNumber)) -> SequenceNumberRange -> f SequenceNumberRange

-- | Identifier for a shard.
--   
--   Length constraints: <tt>28 ≤ n ≤ 65</tt>.
data ShardId

-- | A uniquely identified group of stream records within a stream.
data Shard
Shard :: !(Maybe ShardId) -> !(Maybe ShardId) -> !(Maybe SequenceNumberRange) -> Shard

-- | The system-generated identifier for this shard
_shShardId :: Shard -> !(Maybe ShardId)

-- | The shard ID of this shard's parent
_shParentShardId :: Shard -> !(Maybe ShardId)

-- | The range of possible sequence numbers for this shard
_shSequenceNumberRange :: Shard -> !(Maybe SequenceNumberRange)

-- | A lens for <a>_shShardId</a>.
--   
--   <pre>
--   <tt>shshardId</tt> ∷ Lens' <a>Shard</a> (<a>Maybe</a> <a>ShardId</a>)
--   </pre>
shShardId :: Functor f => (Maybe ShardId -> f (Maybe ShardId)) -> Shard -> f Shard

-- | A lens for <a>_shParentShardId</a>.
--   
--   <pre>
--   <a>shParentShardId</a> ∷ Lens' <a>Shard</a> (<a>Maybe</a> <a>ShardId</a>)
--   </pre>
shParentShardId :: Functor f => (Maybe ShardId -> f (Maybe ShardId)) -> Shard -> f Shard

-- | A lens for <a>_shSequenceNumberRange</a>.
--   
--   <pre>
--   <a>shSequenceNumberRange</a> ∷ Lens' <a>Shard</a> (<a>Maybe</a> <a>SequenceNumberRange</a>)
--   </pre>
shSequenceNumberRange :: Functor f => (Maybe SequenceNumberRange -> f (Maybe SequenceNumberRange)) -> Shard -> f Shard

-- | The position in the shard from which to start reading stream records
--   sequentially. A shard iterator specifies this position using the
--   sequence number of a stream record in a shard.
--   
--   Length constraints: <tt>1 ≤ n ≤ 2048</tt>.
data ShardIterator
data ShardIteratorType
ShardIteratorTrimHorizon :: ShardIteratorType
ShardIteratorLatest :: ShardIteratorType
ShardIteratorAtSequenceNumber :: ShardIteratorType
ShardIteratorAfterSequenceNumber :: ShardIteratorType

-- | A prism for <a>ShardIteratorTrimHorizon</a>.
--   
--   <pre>
--   <a>_ShardIteratorTrimHorizon</a> ∷ Prism' <a>ShardIteratorType</a> '()'
--   </pre>
_ShardIteratorTrimHorizon :: (Choice p, Applicative f) => p () (f ()) -> p ShardIteratorType (f ShardIteratorType)

-- | A prism for <a>ShardIteratorLatest</a>.
--   
--   <pre>
--   <a>_ShardIteratorLatest</a> ∷ Prism' <a>ShardIteratorType</a> '()'
--   </pre>
_ShardIteratorLatest :: (Choice p, Applicative f) => p () (f ()) -> p ShardIteratorType (f ShardIteratorType)

-- | A prism for <a>ShardIteratorAtSequenceNumber</a>.
--   
--   <pre>
--   <a>_ShardIteratorAtSequenceNumber</a> ∷ Prism' <a>ShardIteratorType</a> '()'
--   </pre>
_ShardIteratorAtSequenceNumber :: (Choice p, Applicative f) => p () (f ()) -> p ShardIteratorType (f ShardIteratorType)

-- | A prism for <a>ShardIteratorAfterSequenceNumber</a>.
--   
--   <pre>
--   <a>_ShardIteratorAfterSequenceNumber</a> ∷ Prism' <a>ShardIteratorType</a> '()'
--   </pre>
_ShardIteratorAfterSequenceNumber :: (Choice p, Applicative f) => p () (f ()) -> p ShardIteratorType (f ShardIteratorType)

-- | Represents the data for an attribute.
data AttributeValue

-- | Binary data will automatically be base64 marshalled
AVBin :: !ByteString -> AttributeValue
AVBool :: !Bool -> AttributeValue

-- | Binary data will automatically be base64 marshalled
AVBinSet :: !(Set ByteString) -> AttributeValue
AVList :: ![AttributeValue] -> AttributeValue
AVMap :: !(Map Text AttributeValue) -> AttributeValue
AVNum :: !Scientific -> AttributeValue
AVNumSet :: !(Set Scientific) -> AttributeValue
AVNull :: !Bool -> AttributeValue
AVString :: !Text -> AttributeValue
AVStringSet :: !(Set Text) -> AttributeValue

-- | A prism for <a>AVBin</a>.
--   
--   <pre>
--   <a>_AVBin</a> ∷ Prism' <a>AttributeValue</a> <a>ByteString</a>
--   </pre>
_AVBin :: (Choice p, Applicative f) => p ByteString (f ByteString) -> p AttributeValue (f AttributeValue)

-- | A prism for <a>AVBool</a>.
--   
--   <pre>
--   <a>_AVBool</a> ∷ Prism' <a>AttributeValue</a> <a>Bool</a>
--   </pre>
_AVBool :: (Choice p, Applicative f) => p Bool (f Bool) -> p AttributeValue (f AttributeValue)

-- | A prism for <a>AVBinSet</a>.
--   
--   <pre>
--   <a>_AVBinSet</a> ∷ Prism' <a>AttributeValue</a> (<a>Set</a> <a>ByteString</a>)
--   </pre>
_AVBinSet :: (Choice p, Applicative f) => p (Set ByteString) (f (Set ByteString)) -> p AttributeValue (f AttributeValue)

-- | A prism for <a>AVList</a>.
--   
--   <pre>
--   <a>_AVList</a> ∷ Prism' <a>AttributeValue</a> [<a>AttributeValue</a>]
--   </pre>
_AVList :: (Choice p, Applicative f) => p [AttributeValue] (f [AttributeValue]) -> p AttributeValue (f AttributeValue)

-- | A prism for <a>AVMap</a>.
--   
--   <pre>
--   <a>_AVMap</a> ∷ Prism' <a>AttributeValue</a> (<a>Map</a> <a>Text</a> <a>AttributeValue</a>)
--   </pre>
_AVMap :: (Choice p, Applicative f) => p (Map Text AttributeValue) (f (Map Text AttributeValue)) -> p AttributeValue (f AttributeValue)

-- | A prism for <a>AVNum</a>.
--   
--   <pre>
--   <a>_AVNum</a> ∷ Prism' <a>AttributeValue</a> <a>Scientific</a>
--   </pre>
_AVNum :: (Choice p, Applicative f) => p Scientific (f Scientific) -> p AttributeValue (f AttributeValue)

-- | A prism for <a>AVNumSet</a>.
--   
--   <pre>
--   <a>_AVNumSet</a> ∷ Prism' <a>AttributeValue</a> (<a>Set</a> <a>Scientific</a>)
--   </pre>
_AVNumSet :: (Choice p, Applicative f) => p (Set Scientific) (f (Set Scientific)) -> p AttributeValue (f AttributeValue)

-- | A prism for <a>AVNull</a>.
--   
--   <pre>
--   <a>_AVNull</a> ∷ Prism' <a>AttributeValue</a> <a>Bool</a>
--   </pre>
_AVNull :: (Choice p, Applicative f) => p Bool (f Bool) -> p AttributeValue (f AttributeValue)

-- | A prism for <a>AVString</a>.
--   
--   <pre>
--   <a>_AVString</a> ∷ Prism' <a>AttributeValue</a> <a>Text</a>
--   </pre>
_AVString :: (Choice p, Applicative f) => p Text (f Text) -> p AttributeValue (f AttributeValue)

-- | A prism for <a>AVStringSet</a>.
--   
--   <pre>
--   <a>_AVStringSet</a> ∷ Prism' <a>AttributeValue</a> (<a>Set</a> <a>Text</a>)
--   </pre>
_AVStringSet :: (Choice p, Applicative f) => p (Set Text) (f (Set Text)) -> p AttributeValue (f AttributeValue)
data KeyType
KeyTypeHash :: KeyType
KeyTypeRange :: KeyType
keyTypeToText :: IsString s => KeyType -> s

-- | A prism for <a>KeyTypeHash</a>.
--   
--   <pre>
--   <a>_KeyTypeHash</a> ∷ Prism' <a>KeyType</a> ()
--   </pre>
_KeyTypeHash :: (Choice p, Applicative f) => p () (f ()) -> p KeyType (f KeyType)

-- | A prism for <a>KeyTypeRange</a>.
--   
--   <pre>
--   <a>_KeyTypeRange</a> ∷ Prism' <a>KeyType</a> ()
--   </pre>
_KeyTypeRange :: (Choice p, Applicative f) => p () (f ()) -> p KeyType (f KeyType)
data KeySchemaElement
KeySchemaElement :: !Text -> !KeyType -> KeySchemaElement
_kseAttributeName :: KeySchemaElement -> !Text
_kseKeyType :: KeySchemaElement -> !KeyType

-- | A lens for <a>_kseAttributeName</a>.
--   
--   <pre>
--   <a>kseAttributeName</a> ∷ Lens' <a>KeySchemaElement</a> <a>Text</a>
--   </pre>
kseAttributeName :: Functor f => (Text -> f Text) -> KeySchemaElement -> f KeySchemaElement

-- | A lens for <a>_kseKeyType</a>.
--   
--   <pre>
--   <a>kseKeyType</a> ∷ Lens' <a>KeySchemaElement</a> <a>KeyType</a>
--   </pre>
kseKeyType :: Functor f => (KeyType -> f KeyType) -> KeySchemaElement -> f KeySchemaElement
data StreamViewType

-- | only the key attributes of the modified item
StreamViewKeysOnly :: StreamViewType

-- | the entire item, as it appears after it was modified
StreamViewNewImage :: StreamViewType

-- | the entire item, as it appeared before it was modified
StreamViewOldImage :: StreamViewType

-- | both the new and the old images of the item
StreamViewNewAndOldImages :: StreamViewType

-- | A prism for <a>StreamViewKeysOnly</a>.
--   
--   <pre>
--   <a>_StreamViewKeysOnly</a> ∷ Prism' <a>StreamViewType</a> ()
--   </pre>
_StreamViewKeysOnly :: (Choice p, Applicative f) => p () (f ()) -> p StreamViewType (f StreamViewType)

-- | A prism for <a>StreamViewNewImage</a>.
--   
--   <pre>
--   <a>_StreamViewNewImage</a> ∷ Prism' <a>StreamViewType</a> ()
--   </pre>
_StreamViewNewImage :: (Choice p, Applicative f) => p () (f ()) -> p StreamViewType (f StreamViewType)

-- | A prism for <a>StreamViewOldImage</a>.
--   
--   <pre>
--   <a>_StreamViewOldImage</a> ∷ Prism' <a>StreamViewType</a> ()
--   </pre>
_StreamViewOldImage :: (Choice p, Applicative f) => p () (f ()) -> p StreamViewType (f StreamViewType)

-- | A prism for <a>StreamViewNewAndOldImages</a>.
--   
--   <pre>
--   <a>_StreamViewNewAndOldImages</a> ∷ Prism' <a>StreamViewType</a> ()
--   </pre>
_StreamViewNewAndOldImages :: (Choice p, Applicative f) => p () (f ()) -> p StreamViewType (f StreamViewType)
data StreamRecord
StreamRecord :: !(Maybe (Map Text AttributeValue)) -> !(Maybe (Map Text AttributeValue)) -> !(Maybe (Map Text AttributeValue)) -> !(Maybe SequenceNumber) -> !(Maybe Integer) -> !(Maybe StreamViewType) -> StreamRecord
_strKeys :: StreamRecord -> !(Maybe (Map Text AttributeValue))
_strNewImage :: StreamRecord -> !(Maybe (Map Text AttributeValue))
_strOldImage :: StreamRecord -> !(Maybe (Map Text AttributeValue))
_strSequenceNumber :: StreamRecord -> !(Maybe SequenceNumber)
_strSizeBytes :: StreamRecord -> !(Maybe Integer)
_strStreamViewType :: StreamRecord -> !(Maybe StreamViewType)

-- | A lens for <a>_strKeys</a>.
--   
--   <pre>
--   <a>strKeys</a> ∷ Lens' <a>StreamRecord</a> (<a>Maybe</a> (<a>Map</a> <a>Text</a> <a>AttributeValue</a>))
--   </pre>
strKeys :: Functor f => (Maybe (Map Text AttributeValue) -> f (Maybe (Map Text AttributeValue))) -> StreamRecord -> f StreamRecord

-- | A lens for <a>_strNewImage</a>.
--   
--   <pre>
--   <a>strNewImage</a> ∷ Lens' <a>StreamRecord</a> (<a>Maybe</a> (<a>Map</a> <a>Text</a> <a>AttributeValue</a>))
--   </pre>
strNewImage :: Functor f => (Maybe (Map Text AttributeValue) -> f (Maybe (Map Text AttributeValue))) -> StreamRecord -> f StreamRecord

-- | A lens for <a>_strOldImage</a>.
--   
--   <pre>
--   <a>strOldImage</a> ∷ Lens' <a>StreamRecord</a> (<a>Maybe</a> (<a>Map</a> <a>Text</a> <a>AttributeValue</a>))
--   </pre>
strOldImage :: Functor f => (Maybe (Map Text AttributeValue) -> f (Maybe (Map Text AttributeValue))) -> StreamRecord -> f StreamRecord

-- | A lens for <a>_strSequenceNumber</a>.
--   
--   <pre>
--   <a>strSequenceNumber</a> ∷ Lens' <a>StreamRecord</a> (<a>Maybe</a> <a>SequenceNumber</a>)
--   </pre>
strSequenceNumber :: Functor f => (Maybe SequenceNumber -> f (Maybe SequenceNumber)) -> StreamRecord -> f StreamRecord

-- | A lens for <a>_strSizeBytes</a>.
--   
--   <pre>
--   <a>strSizeBytes</a> ∷ Lens' <a>StreamRecord</a> (<a>Maybe</a> <a>Integer</a>)
--   </pre>
strSizeBytes :: Functor f => (Maybe Integer -> f (Maybe Integer)) -> StreamRecord -> f StreamRecord

-- | A lens for <a>_strStreamViewType</a>.
--   
--   <pre>
--   <a>strStreamViewType</a> ∷ Lens' <a>StreamRecord</a> (<a>Maybe</a> <a>StreamViewType</a>)
--   </pre>
strStreamViewType :: Functor f => (Maybe StreamViewType -> f (Maybe StreamViewType)) -> StreamRecord -> f StreamRecord
data EventName
EventInsert :: EventName
EventModify :: EventName
EventRemove :: EventName

-- | A prism for <a>EventInsert</a>.
--   
--   <pre>
--   <a>_EventInsert</a> ∷ Prism' <a>EventName</a> ()
--   </pre>
_EventInsert :: (Choice p, Applicative f) => p () (f ()) -> p EventName (f EventName)

-- | A prism for <a>EventModify</a>.
--   
--   <pre>
--   <a>_EventModify</a> ∷ Prism' <a>EventName</a> ()
--   </pre>
_EventModify :: (Choice p, Applicative f) => p () (f ()) -> p EventName (f EventName)

-- | A prism for <a>EventRemove</a>.
--   
--   <pre>
--   <a>_EventRemove</a> ∷ Prism' <a>EventName</a> ()
--   </pre>
_EventRemove :: (Choice p, Applicative f) => p () (f ()) -> p EventName (f EventName)
data Record
Record :: !(Maybe Region) -> !(Maybe StreamRecord) -> !(Maybe EventId) -> !(Maybe EventName) -> !(Maybe Text) -> !(Maybe Text) -> Record
_rAwsRegion :: Record -> !(Maybe Region)
_rStreamRecord :: Record -> !(Maybe StreamRecord)
_rEventId :: Record -> !(Maybe EventId)
_rEventName :: Record -> !(Maybe EventName)
_rEventSource :: Record -> !(Maybe Text)
_rEventVersion :: Record -> !(Maybe Text)

-- | A lens for <a>_rAwsRegion</a>.
--   
--   <pre>
--   <a>rAwsRegion</a> ∷ Lens' <a>Record</a> (<a>Maybe</a> <a>Region</a>)
--   </pre>
rAwsRegion :: Functor f => (Maybe Region -> f (Maybe Region)) -> Record -> f Record

-- | A lens for <a>_rStreamRecord</a>.
--   
--   <pre>
--   <a>rStreamRecord</a> ∷ Lens' <a>Record</a> (<a>Maybe</a> <a>StreamRecord</a>)
--   </pre>
rStreamRecord :: Functor f => (Maybe StreamRecord -> f (Maybe StreamRecord)) -> Record -> f Record

-- | A lens for <a>_rEventId</a>.
--   
--   <pre>
--   <a>rEventId</a> ∷ Lens' <a>Record</a> (<a>Maybe</a> <a>EventId</a>)
--   </pre>
rEventId :: Functor f => (Maybe EventId -> f (Maybe EventId)) -> Record -> f Record

-- | A lens for <a>_rEventName</a>.
--   
--   <pre>
--   <a>rEventName</a> ∷ Lens' <a>Record</a> (<a>Maybe</a> <a>EventName</a>)
--   </pre>
rEventName :: Functor f => (Maybe EventName -> f (Maybe EventName)) -> Record -> f Record

-- | A lens for <a>_rEventSource</a>.
--   
--   <pre>
--   <a>rEventSource</a> ∷ Lens' <a>Record</a> (<a>Maybe</a> <a>Text</a>)
--   </pre>
rEventSource :: Functor f => (Maybe Text -> f (Maybe Text)) -> Record -> f Record

-- | A lens for <a>_rEventVersion</a>.
--   
--   <pre>
--   <a>rEventVersion</a> ∷ Lens' <a>Record</a> (<a>Maybe</a> <a>Text</a>)
--   </pre>
rEventVersion :: Functor f => (Maybe Text -> f (Maybe Text)) -> Record -> f Record
data StreamStatus

-- | DynamoDB Streams is currently being enabled on the table
StatusEnabling :: StreamStatus

-- | The stream is enabled
StatusEnabled :: StreamStatus

-- | DynamoDB Streams is currently being disabled on the table
StatusDisabling :: StreamStatus

-- | The stream is disabled
StatusDisabled :: StreamStatus

-- | A prism for <a>StatusEnabling</a>.
--   
--   <pre>
--   <a>_StatusEnabling</a> ∷ Prism' <a>StreamStatus</a> ()
--   </pre>
_StatusEnabling :: (Choice p, Applicative f) => p () (f ()) -> p StreamStatus (f StreamStatus)

-- | A prism for <a>StatusEnabled</a>.
--   
--   <pre>
--   <a>_StatusEnabled</a> ∷ Prism' <a>StreamStatus</a> ()
--   </pre>
_StatusEnabled :: (Choice p, Applicative f) => p () (f ()) -> p StreamStatus (f StreamStatus)

-- | A prism for <a>StatusDisabling</a>.
--   
--   <pre>
--   <a>_StatusDisabling</a> ∷ Prism' <a>StreamStatus</a> ()
--   </pre>
_StatusDisabling :: (Choice p, Applicative f) => p () (f ()) -> p StreamStatus (f StreamStatus)

-- | A prism for <a>StatusDisabled</a>.
--   
--   <pre>
--   <a>_StatusDisabled</a> ∷ Prism' <a>StreamStatus</a> ()
--   </pre>
_StatusDisabled :: (Choice p, Applicative f) => p () (f ()) -> p StreamStatus (f StreamStatus)

-- | Identifier for a stream.
--   
--   Length constraints: <tt>56 ≤ n ≤ 128</tt>.
data StreamId
data StreamDescription
StreamDescription :: !(Maybe UTCTime) -> ![KeySchemaElement] -> !(Maybe ShardId) -> ![Shard] -> !(Maybe Text) -> !(Maybe StreamId) -> !(Maybe StreamStatus) -> !(Maybe StreamViewType) -> !(Maybe Text) -> StreamDescription
_sdCreationRequestDateTime :: StreamDescription -> !(Maybe UTCTime)
_sdKeySchema :: StreamDescription -> ![KeySchemaElement]
_sdLastEvaluatedShardId :: StreamDescription -> !(Maybe ShardId)
_sdShards :: StreamDescription -> ![Shard]
_sdStreamARN :: StreamDescription -> !(Maybe Text)
_sdStreamId :: StreamDescription -> !(Maybe StreamId)
_sdStreamStatus :: StreamDescription -> !(Maybe StreamStatus)
_sdStreamViewType :: StreamDescription -> !(Maybe StreamViewType)
_sdTableName :: StreamDescription -> !(Maybe Text)

-- | A lens for <a>_sdCreationRequestDateTime</a>.
--   
--   <pre>
--   <a>sdCreationRequestDateTime</a> ∷ Lens' <a>StreamDescription</a> (<a>Maybe</a> <a>UTCTime</a>)
--   </pre>
sdCreationRequestDateTime :: Functor f => (Maybe UTCTime -> f (Maybe UTCTime)) -> StreamDescription -> f StreamDescription

-- | A lens for <a>_sdKeySchema</a>.
--   
--   <pre>
--   <a>sdKeySchema</a> ∷ Lens' <a>StreamDescription</a> [<a>KeySchemaElement</a>]
--   </pre>
sdKeySchema :: Functor f => ([KeySchemaElement] -> f [KeySchemaElement]) -> StreamDescription -> f StreamDescription

-- | A lens for <a>_sdLastEvaluatedShardId</a>.
--   
--   <pre>
--   <a>sdLastEvaluatedShardId</a> ∷ Lens' <a>StreamDescription</a> (<a>Maybe</a> <a>ShardId</a>)
--   </pre>
sdLastEvaluatedShardId :: Functor f => (Maybe ShardId -> f (Maybe ShardId)) -> StreamDescription -> f StreamDescription

-- | A lens for <a>_sdShards</a>.
--   
--   <pre>
--   <a>sdShards</a> ∷ Lens' <a>StreamDescription</a> [<a>Shard</a>]
--   </pre>
sdShards :: Functor f => ([Shard] -> f [Shard]) -> StreamDescription -> f StreamDescription

-- | A lens for <a>_sdStreamARN</a>.
--   
--   <pre>
--   <a>sdStreamARN</a> ∷ Lens' <a>StreamDescription</a> (<a>Maybe</a> <a>Text</a>)
--   </pre>
sdStreamARN :: Functor f => (Maybe Text -> f (Maybe Text)) -> StreamDescription -> f StreamDescription

-- | A lens for <a>_sdStreamId</a>.
--   
--   <pre>
--   <a>sdStreamId</a> ∷ Lens' <a>StreamDescription</a> (<a>Maybe</a> <a>StreamId</a>)
--   </pre>
sdStreamId :: Functor f => (Maybe StreamId -> f (Maybe StreamId)) -> StreamDescription -> f StreamDescription

-- | A lens for <a>_sdStreamStatus</a>.
--   
--   <pre>
--   <a>sdStreamStatus</a> ∷ Lens' <a>StreamDescription</a> (<a>Maybe</a> <a>StreamStatus</a>)
--   </pre>
sdStreamStatus :: Functor f => (Maybe StreamStatus -> f (Maybe StreamStatus)) -> StreamDescription -> f StreamDescription

-- | A lens for <a>_sdStreamViewType</a>.
--   
--   <pre>
--   <a>sdStreamViewType</a> ∷ Lens' <a>StreamDescription</a> (<a>Maybe</a> <a>StreamViewType</a>)
--   </pre>
sdStreamViewType :: Functor f => (Maybe StreamViewType -> f (Maybe StreamViewType)) -> StreamDescription -> f StreamDescription

-- | A lens for <a>_sdTableName</a>.
--   
--   <pre>
--   <a>sdTableName</a> ∷ Lens' <a>StreamDescription</a> (<a>Maybe</a> <a>Text</a>)
--   </pre>
sdTableName :: Functor f => (Maybe Text -> f (Maybe Text)) -> StreamDescription -> f StreamDescription
instance Typeable ShardId
instance Typeable SequenceNumber
instance Typeable SequenceNumberRange
instance Typeable Shard
instance Typeable AttributeValue
instance Typeable KeyType
instance Typeable KeySchemaElement
instance Typeable StreamViewType
instance Typeable StreamRecord
instance Typeable StreamId
instance Typeable StreamStatus
instance Typeable StreamDescription
instance Typeable EventId
instance Typeable EventName
instance Typeable Record
instance Typeable ShardIteratorType
instance Typeable ShardIterator
instance Eq ShardId
instance Ord ShardId
instance Show ShardId
instance Read ShardId
instance Eq SequenceNumber
instance Ord SequenceNumber
instance Show SequenceNumber
instance Read SequenceNumber
instance Eq SequenceNumberRange
instance Ord SequenceNumberRange
instance Show SequenceNumberRange
instance Read SequenceNumberRange
instance Eq Shard
instance Ord Shard
instance Show Shard
instance Read Shard
instance Eq AttributeValue
instance Ord AttributeValue
instance Show AttributeValue
instance Read AttributeValue
instance Eq KeyType
instance Ord KeyType
instance Enum KeyType
instance Show KeyType
instance Read KeyType
instance Eq KeySchemaElement
instance Ord KeySchemaElement
instance Show KeySchemaElement
instance Read KeySchemaElement
instance Eq StreamViewType
instance Ord StreamViewType
instance Enum StreamViewType
instance Show StreamViewType
instance Read StreamViewType
instance Eq StreamRecord
instance Ord StreamRecord
instance Show StreamRecord
instance Read StreamRecord
instance Eq StreamId
instance Ord StreamId
instance Show StreamId
instance Read StreamId
instance Eq StreamStatus
instance Ord StreamStatus
instance Enum StreamStatus
instance Show StreamStatus
instance Read StreamStatus
instance Eq StreamDescription
instance Ord StreamDescription
instance Show StreamDescription
instance Read StreamDescription
instance Eq EventId
instance Ord EventId
instance Show EventId
instance Read EventId
instance Eq EventName
instance Ord EventName
instance Enum EventName
instance Show EventName
instance Read EventName
instance Eq Record
instance Ord Record
instance Show Record
instance Read Record
instance Eq ShardIteratorType
instance Ord ShardIteratorType
instance Enum ShardIteratorType
instance Read ShardIteratorType
instance Show ShardIteratorType
instance Eq ShardIterator
instance Ord ShardIterator
instance Show ShardIterator
instance Read ShardIterator
instance FromJSON ShardIterator
instance ToJSON ShardIterator
instance FromJSON ShardIteratorType
instance ToJSON ShardIteratorType
instance FromJSON Record
instance ToJSON Record
instance FromJSON EventName
instance ToJSON EventName
instance FromJSON EventId
instance ToJSON EventId
instance FromJSON StreamDescription
instance ToJSON StreamDescription
instance FromJSON StreamStatus
instance ToJSON StreamStatus
instance FromJSON StreamId
instance ToJSON StreamId
instance FromJSON StreamRecord
instance ToJSON StreamRecord
instance FromJSON StreamViewType
instance ToJSON StreamViewType
instance FromJSON KeySchemaElement
instance ToJSON KeySchemaElement
instance FromJSON KeyType
instance ToJSON KeyType
instance FromJSON AttributeValue
instance ToJSON AttributeValue
instance FromJSON Shard
instance ToJSON Shard
instance FromJSON SequenceNumberRange
instance ToJSON SequenceNumberRange
instance FromJSON SequenceNumber
instance ToJSON SequenceNumber
instance FromJSON ShardId
instance ToJSON ShardId


module Aws.DynamoDb.Streams.Core
data StreamsAction
ActionDescribeStream :: StreamsAction
ActionGetRecords :: StreamsAction
ActionGetShardIterator :: StreamsAction
ActionListStreams :: StreamsAction

-- | Render a <a>StreamsAction</a> as a string for use in an AWS request.
streamsActionToText :: IsString s => StreamsAction -> s

-- | Parse a <a>StreamsAction</a>; this is the inverse of
--   <a>streamsActionToText</a>.
parseStreamsAction :: CharParsing m => m StreamsAction

-- | Currently, only <a>UsEast1</a> and <a>EuWest1</a> are supported.
streamsServiceEndpoint :: Region -> ByteString
data StreamsMetadata
StreamsMetadata :: !(Maybe Text) -> !(Maybe Text) -> StreamsMetadata
_stmAmzId2 :: StreamsMetadata -> !(Maybe Text)
_stmRequestId :: StreamsMetadata -> !(Maybe Text)

-- | A lens for <a>_stmAmzId2</a>.
--   
--   <pre>
--   <a>stmAmzId2</a> ∷ Lens' <a>StreamsMetadata</a> (<a>Maybe</a> <a>Text</a>)
--   </pre>
stmAmzId2 :: Functor f => (Maybe Text -> f (Maybe Text)) -> StreamsMetadata -> f StreamsMetadata

-- | A lens for <a>_stmRequestId</a>.
--   
--   <pre>
--   <a>stmRequestId</a> ∷ Lens' <a>StreamsMetadata</a> (<a>Maybe</a> <a>Text</a>)
--   </pre>
stmRequestId :: Functor f => (Maybe Text -> f (Maybe Text)) -> StreamsMetadata -> f StreamsMetadata
data StreamsConfiguration qt
StreamsConfiguration :: !Region -> StreamsConfiguration qt
_stcRegion :: StreamsConfiguration qt -> !Region

-- | A lens for <a>_stcRegion</a>.
--   
--   <pre>
--   <a>stcRegion</a> ∷ Lens' <a>StreamsConfiguration</a> <a>Region</a>
--   </pre>
stcRegion :: Functor f => (Region -> f Region) -> StreamsConfiguration qt -> f (StreamsConfiguration qt)
data StreamsQuery
StreamsQuery :: !StreamsAction -> !ByteString -> StreamsQuery
_stqAction :: StreamsQuery -> !StreamsAction
_stqBody :: StreamsQuery -> !ByteString

-- | A lens for <a>_stqAction</a>.
--   
--   <pre>
--   <a>stqAction</a> ∷ Lens' <a>StreamsQuery</a> <a>StreamsAction</a>
--   </pre>
stqAction :: Functor f => (StreamsAction -> f StreamsAction) -> StreamsQuery -> f StreamsQuery

-- | A lens for <a>_stqBody</a>.
--   
--   <pre>
--   <a>stqBody</a> ∷ Lens' <a>StreamsQuery</a> <a>ByteString</a>
--   </pre>
stqBody :: Functor f => (ByteString -> f ByteString) -> StreamsQuery -> f StreamsQuery

-- | Creates a signed query.
--   
--   Uses AWS Signature V4. All requests are POST requests with the
--   signature placed in an HTTP header
streamsSignQuery :: StreamsQuery -> StreamsConfiguration qt -> SignatureData -> SignedQuery
data StreamsResponseJsonErrorData
StreamsResponseJsonErrorData :: !Text -> !ByteString -> StreamsResponseJsonErrorData
_srjedMessage :: StreamsResponseJsonErrorData -> !Text
_srjedJSON :: StreamsResponseJsonErrorData -> !ByteString

-- | A lens for <a>_srjedMessage</a>.
--   
--   <pre>
--   <a>srjedMessage</a> ∷ Lens' <a>StreamsResponseJsonErrorData</a> <a>Text</a>
--   </pre>
srjedMessage :: Functor f => (Text -> f Text) -> StreamsResponseJsonErrorData -> f StreamsResponseJsonErrorData

-- | A lens for <a>_srjedJSON</a>.
--   
--   <pre>
--   <a>srjedJSON</a> ∷ Lens' <a>StreamsResponseJsonErrorData</a> <a>ByteString</a>
--   </pre>
srjedJSON :: Functor f => (ByteString -> f ByteString) -> StreamsResponseJsonErrorData -> f StreamsResponseJsonErrorData
data StreamsErrorResponse
StreamsResponseJsonError :: StreamsResponseJsonErrorData -> StreamsErrorResponse
StreamsErrorResponse :: StreamsErrorResponseData -> StreamsErrorResponse
StreamsOtherError :: StreamsOtherErrorData -> StreamsErrorResponse

-- | A prism for <a>StreamsResponseJsonError</a>.
--   
--   <pre>
--   <a>_StreamsResponseJsonError</a> ∷ Prism' <a>StreamsErrorResponse</a> <a>StreamsResponseJsonErrorData</a>
--   </pre>
_StreamsResponseJsonError :: (Choice p, Applicative f) => p StreamsResponseJsonErrorData (f StreamsResponseJsonErrorData) -> p StreamsErrorResponse (f StreamsErrorResponse)

-- | A prism for <a>StreamsErrorResponse</a>.
--   
--   <pre>
--   <a>_StreamsErrorResponse</a> ∷ Prism' <a>StreamsErrorResponse</a> <a>StreamsErrorResponseData</a>
--   </pre>
_StreamsErrorResponse :: (Choice p, Applicative f) => p StreamsErrorResponseData (f StreamsErrorResponseData) -> p StreamsErrorResponse (f StreamsErrorResponse)

-- | A prism for <a>StreamsOtherError</a>.
--   
--   <pre>
--   <a>_StreamsOtherError</a> ∷ Prism' <a>StreamsErrorResponse</a> <a>StreamsOtherErrorData</a>
--   </pre>
_StreamsOtherError :: (Choice p, Applicative f) => p StreamsOtherErrorData (f StreamsOtherErrorData) -> p StreamsErrorResponse (f StreamsErrorResponse)
data StreamsErrorResponseData
StreamsErrorResponseData :: !Text -> !Text -> StreamsErrorResponseData
_sterdErrorCode :: StreamsErrorResponseData -> !Text
_sterdErrorMessage :: StreamsErrorResponseData -> !Text

-- | A lens for <a>_sterdErrorCode</a>.
--   
--   <pre>
--   <a>sterdErrorCode</a> ∷ Lens' <a>StreamsErrorResponseData</a> <a>Text</a>
--   </pre>
sterdErrorCode :: Functor f => (Text -> f Text) -> StreamsErrorResponseData -> f StreamsErrorResponseData

-- | A lens for <a>_sterdErrorMessage</a>.
--   
--   <pre>
--   <a>sterdErrorMessage</a> ∷ Lens' <a>StreamsErrorResponseData</a> <a>Text</a>
--   </pre>
sterdErrorMessage :: Functor f => (Text -> f Text) -> StreamsErrorResponseData -> f StreamsErrorResponseData
data StreamsOtherErrorData
StreamsOtherErrorData :: !Status -> !Text -> StreamsOtherErrorData
_stoeStatus :: StreamsOtherErrorData -> !Status
_stoeMessage :: StreamsOtherErrorData -> !Text

-- | A lens for <a>_stoeStatus</a>
--   
--   <pre>
--   <a>stoeStatus</a> ∷ Lens' <a>StreamsOtherErrorData</a> <a>Status</a>
--   </pre>
stoeStatus :: Functor f => (Status -> f Status) -> StreamsOtherErrorData -> f StreamsOtherErrorData

-- | A lens for <a>_stoeMessage</a>
--   
--   <pre>
--   <a>stoeMessage</a> ∷ Lens' <a>StreamsOtherErrorData</a> <a>Text</a>
--   </pre>
stoeMessage :: Functor f => (Text -> f Text) -> StreamsOtherErrorData -> f StreamsOtherErrorData

-- | Create a complete <a>HTTPResponseConsumer</a> for response types with
--   an <a>FromJSON</a> instance
jsonResponseConsumer :: FromJSON α => HTTPResponseConsumer α
errorResponseConsumer :: HTTPResponseConsumer a
streamsResponseConsumer :: FromJSON a => IORef StreamsMetadata -> HTTPResponseConsumer a
instance Typeable StreamsAction
instance Typeable StreamsErrorResponseData
instance Typeable StreamsOtherErrorData
instance Typeable StreamsResponseJsonErrorData
instance Typeable StreamsErrorResponse
instance Eq StreamsAction
instance Ord StreamsAction
instance Enum StreamsAction
instance Bounded StreamsAction
instance Read StreamsAction
instance Show StreamsAction
instance Eq StreamsMetadata
instance Show StreamsMetadata
instance Eq (StreamsConfiguration qt)
instance Show (StreamsConfiguration qt)
instance Eq StreamsQuery
instance Show StreamsQuery
instance Eq StreamsErrorResponseData
instance Show StreamsErrorResponseData
instance Eq StreamsOtherErrorData
instance Show StreamsOtherErrorData
instance Eq StreamsResponseJsonErrorData
instance Show StreamsResponseJsonErrorData
instance Eq StreamsErrorResponse
instance Show StreamsErrorResponse
instance FromJSON StreamsErrorResponse
instance Exception StreamsErrorResponse
instance Monoid StreamsMetadata
instance Loggable StreamsMetadata
instance AwsType StreamsAction


module Aws.DynamoDb.Streams.Commands.ListStreams
data ListStreams
ListStreams :: !(Maybe StreamId) -> !(Maybe Int) -> !(Maybe Text) -> ListStreams

-- | The stream ID of the first item that this operation will evaluate;
--   also see <a>_lstrLastEvalutedStreamId</a>.
_lstExclusiveStartStreamId :: ListStreams -> !(Maybe StreamId)

-- | The maximum number of streams to return.
_lstLimit :: ListStreams -> !(Maybe Int)

-- | If this parameter is provided, then only the streams associated with
--   this table are returned.
_lstTableName :: ListStreams -> !(Maybe Text)

-- | An empty <a>ListStreams</a> request.
--   
--   <pre>
--   myRequest = <a>listStreams</a> &amp; <a>lstTableName</a> ?~ <a>UsersTable</a>
--   </pre>
listStreams :: ListStreams

-- | A lens for <a>_lstExclusiveStartStreamId</a>.
--   
--   <pre>
--   lstExclusiveStartStreamId ∷ Lens' <a>ListStreams</a> (<a>Maybe</a> <a>StreamId</a>)
--   </pre>
lstExclusiveStartStreamId :: Functor f => (Maybe StreamId -> f (Maybe StreamId)) -> ListStreams -> f ListStreams

-- | A lens for <tt>_lstlimit</tt>.
--   
--   <pre>
--   lstLimit ∷ Lens' <a>ListStreams</a> (<a>Maybe</a> <a>Int</a>)
--   </pre>
lstLimit :: Functor f => (Maybe Int -> f (Maybe Int)) -> ListStreams -> f ListStreams

-- | A lens for <a>_lstTableName</a>.
--   
--   <pre>
--   lstTableName ∷ Lens' <a>ListStreams</a> (<a>Maybe</a> <a>Text</a>)
--   </pre>
lstTableName :: Functor f => (Maybe Text -> f (Maybe Text)) -> ListStreams -> f ListStreams
data ListStreamsResponse
ListStreamsResponse :: !(Maybe StreamId) -> ![StreamId] -> ListStreamsResponse

-- | When empty, this indicates that there are no more streams to be
--   retrieved.
_lstrLastEvalutedStreamId :: ListStreamsResponse -> !(Maybe StreamId)

-- | A list of stream IDs associated with the current account and endpoint.
_lstrStreamIds :: ListStreamsResponse -> ![StreamId]

-- | A lens for <a>_lstrLastEvalutedStreamId</a>.
--   
--   <pre>
--   lstrLastEvalutedStreamId ∷ Lens' <a>ListStreamsResponse</a> (<a>Maybe</a> <a>StreamId</a>)
--   </pre>
lstrLastEvalutedStreamId :: Functor f => (Maybe StreamId -> f (Maybe StreamId)) -> ListStreamsResponse -> f ListStreamsResponse

-- | A lens for <a>_lstrStreamIds</a>.
--   
--   <pre>
--   lstrStreamIds ∷ Lens' <a>ListStreamsResponse</a> [<a>StreamId</a>]
--   </pre>
lstrStreamIds :: Functor f => ([StreamId] -> f [StreamId]) -> ListStreamsResponse -> f ListStreamsResponse
instance Typeable ListStreams
instance Typeable ListStreamsResponse
instance Eq ListStreams
instance Ord ListStreams
instance Show ListStreams
instance Read ListStreams
instance Eq ListStreamsResponse
instance Ord ListStreamsResponse
instance Read ListStreamsResponse
instance Show ListStreamsResponse
instance IteratedTransaction ListStreams ListStreamsResponse
instance ListResponse ListStreamsResponse StreamId
instance AsMemoryResponse ListStreamsResponse
instance Transaction ListStreams ListStreamsResponse
instance SignQuery ListStreams
instance ResponseConsumer r ListStreamsResponse
instance FromJSON ListStreamsResponse
instance ToJSON ListStreamsResponse
instance Monoid ListStreams
instance FromJSON ListStreams
instance ToJSON ListStreams


module Aws.DynamoDb.Streams.Commands.DescribeStream
data DescribeStream
DescribeStream :: !(Maybe ShardId) -> !(Maybe Int) -> !StreamId -> DescribeStream

-- | The shard id of the first item this operation will evalute; see also
--   <a>_sdLastEvaluatedShardId</a>.
_dstExclusiveStartShardId :: DescribeStream -> !(Maybe ShardId)

-- | The maximum number of shard objects to return.
_dstLimit :: DescribeStream -> !(Maybe Int)

-- | The unique ID of the stream to be described.
_dstStreamId :: DescribeStream -> !StreamId

-- | A basic <a>DescribeStream</a> request for a given stream id.
--   
--   <pre>
--   myRequest =
--     <a>describeStream</a> myStream
--       &amp; <a>dstLimit</a> ?~ 3
--   </pre>
describeStream :: StreamId -> DescribeStream

-- | A lens for <a>_dstExclusiveStartShardId</a>.
--   
--   <pre>
--   <a>dstExclusiveStartShardId</a> ∷ Lens' <a>DescribeStream</a> (<a>Maybe</a> <a>ShardId</a>)
--   </pre>
dstExclusiveStartShardId :: Functor f => (Maybe ShardId -> f (Maybe ShardId)) -> DescribeStream -> f DescribeStream

-- | A lens for <a>_dstLimit</a>.
--   
--   <pre>
--   <a>dstLimit</a> ∷ Lens' <a>DescribeStream</a> (<a>Maybe</a> <a>Int</a>)
--   </pre>
dstLimit :: Functor f => (Maybe Int -> f (Maybe Int)) -> DescribeStream -> f DescribeStream

-- | A lens for <a>_dstStreamId</a>.
--   
--   <pre>
--   <a>dstStreamId</a> ∷ Lens' <a>DescribeStream</a> <a>StreamId</a>
--   </pre>
dstStreamId :: Functor f => (StreamId -> f StreamId) -> DescribeStream -> f DescribeStream
data DescribeStreamResponse
DescribeStreamResponse :: !StreamDescription -> DescribeStreamResponse
_dstrStreamDescription :: DescribeStreamResponse -> !StreamDescription

-- | A lens for <a>_dstrStreamDescription</a>.
--   
--   <pre>
--   <a>dstrStreamDescription</a> ∷ Lens' <a>DescribeStreamResponse</a> <a>StreamDescription</a>
--   </pre>
dstrStreamDescription :: Functor f => (StreamDescription -> f StreamDescription) -> DescribeStreamResponse -> f DescribeStreamResponse
instance Typeable DescribeStream
instance Typeable DescribeStreamResponse
instance Eq DescribeStream
instance Ord DescribeStream
instance Show DescribeStream
instance Read DescribeStream
instance Eq DescribeStreamResponse
instance Ord DescribeStreamResponse
instance Show DescribeStreamResponse
instance Read DescribeStreamResponse
instance IteratedTransaction DescribeStream DescribeStreamResponse
instance ListResponse DescribeStreamResponse Shard
instance AsMemoryResponse DescribeStreamResponse
instance Transaction DescribeStream DescribeStreamResponse
instance SignQuery DescribeStream
instance ResponseConsumer r DescribeStreamResponse
instance FromJSON DescribeStreamResponse
instance ToJSON DescribeStreamResponse
instance FromJSON DescribeStream
instance ToJSON DescribeStream


module Aws.DynamoDb.Streams.Commands.GetShardIterator

-- | A shard iterator provides information about how to retrieve stream
--   records from within a shard. Note: A shard iterator expires 15 minutes
--   after it is returned to the requester.
data GetShardIterator
GetShardIterator :: !(Maybe SequenceNumber) -> !ShardId -> !ShardIteratorType -> !StreamId -> GetShardIterator

-- | The sequence number of a stream record in the shard from which to
--   start reading.
_gsiSequenceNumber :: GetShardIterator -> !(Maybe SequenceNumber)

-- | The identifier of the shard.
_gsiShardId :: GetShardIterator -> !ShardId

-- | Determines how the shard iterator is used to start reading stream
--   records from the shard.
_gsiShardIteratorType :: GetShardIterator -> !ShardIteratorType
_gsiStreamId :: GetShardIterator -> !StreamId

-- | A basic <a>GetShardIterator</a> request for a given stream id.
--   
--   <pre>
--   myRequest =
--     <a>getShardIterator</a> myStream myShard <a>ShardIteratorLatest</a>
--       &amp; <a>gsiSequenceNumber</a> ?~ sqn
--   </pre>
getShardIterator :: StreamId -> ShardId -> ShardIteratorType -> GetShardIterator

-- | A lens for <a>_gsiSequenceNumber</a>.
--   
--   <pre>
--   <a>gsiSequenceNumber</a> ∷ Lens' <a>GetShardIterator</a> (<a>Maybe</a> <a>SequenceNumber</a>)
--   </pre>
gsiSequenceNumber :: Functor f => (Maybe SequenceNumber -> f (Maybe SequenceNumber)) -> GetShardIterator -> f GetShardIterator

-- | A lens for <a>_gsiShardId</a>.
--   
--   <pre>
--   <a>gsiShardId</a> ∷ Lens' <a>GetShardIterator</a> <a>ShardId</a>
--   </pre>
gsiShardId :: Functor f => (ShardId -> f ShardId) -> GetShardIterator -> f GetShardIterator

-- | A lens for <a>_gsiShardIteratorType</a>.
--   
--   <pre>
--   <a>gsiShardIteratorType</a> ∷ Lens' <a>GetShardIterator</a> <a>ShardIteratorType</a>
--   </pre>
gsiShardIteratorType :: Functor f => (ShardIteratorType -> f ShardIteratorType) -> GetShardIterator -> f GetShardIterator

-- | A lens for <a>_gsiStreamId</a>.
--   
--   <pre>
--   <a>gsiStreamId</a> ∷ Lens' <a>GetShardIterator</a> <a>StreamId</a>
--   </pre>
gsiStreamId :: Functor f => (StreamId -> f StreamId) -> GetShardIterator -> f GetShardIterator
data GetShardIteratorResponse
GetShardIteratorResponse :: !ShardIterator -> GetShardIteratorResponse
_gsirShardIterator :: GetShardIteratorResponse -> !ShardIterator

-- | A lens for <a>_gsirShardIterator</a>.
--   
--   <pre>
--   <a>gsirShardIterator</a> ∷ Lens' <a>GetShardIteratorResponse</a> <a>ShardIterator</a>
--   </pre>
gsirShardIterator :: Functor f => (ShardIterator -> f ShardIterator) -> GetShardIteratorResponse -> f GetShardIteratorResponse
instance Typeable GetShardIterator
instance Typeable GetShardIteratorResponse
instance Eq GetShardIterator
instance Ord GetShardIterator
instance Read GetShardIterator
instance Show GetShardIterator
instance Eq GetShardIteratorResponse
instance Ord GetShardIteratorResponse
instance Show GetShardIteratorResponse
instance Read GetShardIteratorResponse
instance AsMemoryResponse GetShardIteratorResponse
instance Transaction GetShardIterator GetShardIteratorResponse
instance SignQuery GetShardIterator
instance ResponseConsumer r GetShardIteratorResponse
instance FromJSON GetShardIteratorResponse
instance ToJSON GetShardIteratorResponse
instance FromJSON GetShardIterator
instance ToJSON GetShardIterator


module Aws.DynamoDb.Streams.Commands.GetRecords
data GetRecords
GetRecords :: !ShardIterator -> !(Maybe Int) -> GetRecords
_grShardIterator :: GetRecords -> !ShardIterator
_grLimit :: GetRecords -> !(Maybe Int)

-- | A basic <a>GetRecords</a> request for a given shard iterator.
--   
--   <pre>
--   myRequest = getRecords it &amp; grLimit ?~ 42
--   </pre>
getRecords :: ShardIterator -> GetRecords

-- | A lens for <a>_grShardIterator</a>.
--   
--   <pre>
--   grShardIterator ∷ Lens' <a>GetRecords</a> <a>ShardIterator</a>
--   </pre>
grShardIterator :: Functor f => (ShardIterator -> f ShardIterator) -> GetRecords -> f GetRecords

-- | A lens for <a>_grLimit</a>.
--   
--   <pre>
--   grLimit ∷ Lens' <a>GetRecords</a> (<a>Maybe</a> <a>Int</a>)
--   </pre>
grLimit :: Functor f => (Maybe Int -> f (Maybe Int)) -> GetRecords -> f GetRecords
data GetRecordsResponse
GetRecordsResponse :: !(Maybe ShardIterator) -> ![Record] -> GetRecordsResponse
_grrNextShardIterator :: GetRecordsResponse -> !(Maybe ShardIterator)
_grrRecords :: GetRecordsResponse -> ![Record]

-- | A lens for <a>_grrRecords</a>.
--   
--   <pre>
--   grrRecords ∷ Lens' <a>GetRecordsResponse</a> [<a>Record</a>]
--   </pre>
grrRecords :: Functor f => ([Record] -> f [Record]) -> GetRecordsResponse -> f GetRecordsResponse

-- | A lens for <a>_grrNextShardIterator</a>.
--   
--   <pre>
--   grrNextShardIterator ∷ Lens' <a>GetRecordsResponse</a> (<a>Maybe</a> <a>ShardIterator</a>)
--   </pre>
grrNextShardIterator :: Functor f => (Maybe ShardIterator -> f (Maybe ShardIterator)) -> GetRecordsResponse -> f GetRecordsResponse
instance Typeable GetRecords
instance Typeable GetRecordsResponse
instance Eq GetRecords
instance Ord GetRecords
instance Show GetRecords
instance Read GetRecords
instance Eq GetRecordsResponse
instance Ord GetRecordsResponse
instance Show GetRecordsResponse
instance Read GetRecordsResponse
instance IteratedTransaction GetRecords GetRecordsResponse
instance ListResponse GetRecordsResponse Record
instance AsMemoryResponse GetRecordsResponse
instance Transaction GetRecords GetRecordsResponse
instance SignQuery GetRecords
instance ResponseConsumer r GetRecordsResponse
instance FromJSON GetRecordsResponse
instance ToJSON GetRecordsResponse
instance FromJSON GetRecords
instance ToJSON GetRecords


module Aws.DynamoDb.Streams
