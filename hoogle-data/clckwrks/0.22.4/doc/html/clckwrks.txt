-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A secure, reliable content management system (CMS) and blogging platform
--   
--   clckwrks (pronounced, clockworks) aims to compete directly with
--   popular PHP-based blogging and CMS platforms. Clckwrks aims to support
--   one-click installation of plugins and themes. End users should be able
--   to use it with zero Haskell knowledge. Haskell developers can extend
--   clckwrks by creating new plugins or by building sites around the
--   existing clckwrks core and plugins.
--   
--   clckwrks is still in very early development. Not all features have
--   been implement yet.
@package clckwrks
@version 0.22.4

module Clckwrks.Markup.HsColour

-- | run the text through the <tt>markdown</tt> executable and, if
--   successful, run the output through xss-sanitize / sanitizeBalance to
--   prevent injection attacks.
hscolour :: MonadIO m => Maybe [String] -> Text -> m (Either Text Text)

module Paths_clckwrks
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath
getSysconfDir :: IO FilePath

module Clckwrks.ProfileData.URL
data ProfileDataURL
CreateNewProfileData :: ProfileDataURL
EditProfileData :: ProfileDataURL
EditNewProfileData :: ProfileDataURL
EditProfileDataFor :: UserId -> ProfileDataURL
instance SafeCopy ProfileDataURL
instance PathInfo ProfileDataURL
instance Typeable ProfileDataURL
instance Eq ProfileDataURL
instance Ord ProfileDataURL
instance Read ProfileDataURL
instance Show ProfileDataURL
instance Data ProfileDataURL


-- | this module provides a simple mechanism for adding IO operations to a
--   queue and running them in a single thread. This is useful if the IO
--   operations have side-effects which could collide if run from multiple
--   threads. For example, creating an image thumbnail and storing it on
--   disk, running LaTeX, etc.
module Clckwrks.IOThread
data IOThread a b
IOThread :: ThreadId -> (Chan (a, MVar (Either SomeException b))) -> IOThread a b
ioThreadId :: IOThread a b -> ThreadId
ioThreadChan :: IOThread a b -> (Chan (a, MVar (Either SomeException b)))

-- | start the IO thread.
startIOThread :: (a -> IO b) -> IO (IOThread a b)

-- | kill the IOThread
--   
--   WARNING: no attempt is made to wait for the queue to empty... we
--   should probably have safer version that waits for the operations to
--   complete?
killIOThread :: IOThread a b -> IO ()

-- | issue a request to the IO thread and get back the result if the thread
--   function throws an exception <a>ioRequest</a> will rethrow the
--   exception.
ioRequest :: (IOThread a b) -> a -> IO b

module Clckwrks.Admin.URL
data AdminURL
Console :: AdminURL
EditSettings :: AdminURL
EditNavBar :: AdminURL
NavBarPost :: AdminURL
instance SafeCopy AdminURL
instance PathInfo AdminURL
instance Typeable AdminURL
instance Eq AdminURL
instance Ord AdminURL
instance Read AdminURL
instance Show AdminURL
instance Data AdminURL

module Clckwrks.URL
data ClckURL
ThemeData :: String -> ClckURL
ThemeDataNoEscape :: (NoEscape FilePath) -> ClckURL
PluginData :: Text -> FilePath -> ClckURL
Admin :: AdminURL -> ClckURL
Profile :: ProfileDataURL -> ClckURL
Auth :: AuthProfileURL -> ClckURL
data AdminURL
Console :: AdminURL
EditSettings :: AdminURL
EditNavBar :: AdminURL
NavBarPost :: AdminURL
data AuthURL :: *
A_Login :: AuthURL
A_AddAuth :: AuthURL
A_Logout :: AuthURL
A_Signup :: AuthURL
A_Local :: AuthURL
A_CreateAccount :: AuthURL
A_ChangePassword :: AuthURL
A_OpenId :: OpenIdURL -> AuthURL
A_OpenIdProvider :: AuthMode -> OpenIdProvider -> AuthURL
A_Facebook :: AuthMode -> AuthURL
A_FacebookRedirect :: AuthMode -> AuthURL
data ProfileURL :: *
P_SetPersonality :: UserId -> ProfileURL
P_SetAuthId :: AuthId -> ProfileURL
P_PickProfile :: ProfileURL
data AuthProfileURL :: *
AuthURL :: AuthURL -> AuthProfileURL
ProfileURL :: ProfileURL -> AuthProfileURL
data ProfileDataURL
CreateNewProfileData :: ProfileDataURL
EditProfileData :: ProfileDataURL
EditNewProfileData :: ProfileDataURL
EditProfileDataFor :: UserId -> ProfileDataURL
newtype NoEscape a
NoEscape :: a -> NoEscape a
instance PathInfo ClckURL
instance SafeCopy OpenIdProvider
instance SafeCopy AuthMode
instance SafeCopy OpenIdURL
instance SafeCopy AuthProfileURL
instance SafeCopy ProfileURL
instance SafeCopy AuthURL
instance Typeable1 NoEscape
instance Typeable ClckURL
instance Eq a => Eq (NoEscape a)
instance Ord a => Ord (NoEscape a)
instance Data a => Data (NoEscape a)
instance Read a => Read (NoEscape a)
instance Show a => Show (NoEscape a)
instance Eq ClckURL
instance Ord ClckURL
instance Data ClckURL
instance Read ClckURL
instance Show ClckURL
instance PathInfo (NoEscape String)

module Clckwrks.Unauthorized
unauthorizedPage :: (Happstack m, XMLGenerator m, StringType m ~ Text, EmbedAsChild m msg, ToMessage (XMLType m)) => msg -> m Response

module Clckwrks.Types

-- | The UUID type. A <a>Random</a> instance is provided which produces
--   version 4 UUIDs as specified in RFC 4122. The <a>Storable</a> and
--   <a>Binary</a> instances are compatible with RFC 4122, storing the
--   fields in network order as 16 bytes.
data UUID :: *

-- | at present this is only used by the menu editor
newtype Prefix
Prefix :: Text -> Prefix
prefixText :: Prefix -> Text
data Trust

-- | used when the author can be trusted (sanitization is not performed)
Trusted :: Trust

-- | used when the author can not be trusted (sanitization is performed)
Untrusted :: Trust
data NamedLink
NamedLink :: Text -> Text -> NamedLink
namedLinkTitle :: NamedLink -> Text
namedLinkURL :: NamedLink -> Text
instance ToJSON NamedLink
instance SafeCopy NamedLink
instance Typeable NamedLink
instance Eq NamedLink
instance Read NamedLink
instance Show NamedLink
instance Data NamedLink
instance SafeCopy Trust
instance Typeable Prefix
instance Typeable Trust
instance Eq Prefix
instance Ord Prefix
instance Read Prefix
instance Show Prefix
instance Data Prefix
instance Eq Trust
instance Ord Trust
instance Read Trust
instance Show Trust
instance Data Trust
instance SafeCopy Prefix
instance SafeCopy UUID
instance SafeCopy UACCT

module Clckwrks.NavBar.Types
newtype NavBar
NavBar :: [NavBarItem] -> NavBar
navBarItems :: NavBar -> [NavBarItem]
data NavBarItem
NBLink :: NamedLink -> NavBarItem
NBSubNavBar :: Text -> NavBar -> NavBarItem
newtype NavBarLinks
NavBarLinks :: [(String, [NamedLink])] -> NavBarLinks
instance Typeable NavBarLinks
instance Eq NavBarLinks
instance Read NavBarLinks
instance Show NavBarLinks
instance Data NavBarLinks
instance ToJSON NavBarLinks
instance SafeCopy NavBarItem
instance SafeCopy NavBar
instance Typeable NavBarItem
instance Typeable NavBar
instance Eq NavBarItem
instance Read NavBarItem
instance Show NavBarItem
instance Data NavBarItem
instance Eq NavBar
instance Read NavBar
instance Show NavBar
instance Data NavBar

module Clckwrks.NavBar.Acid
data NavBarState
NavBarState :: NavBar -> NavBarState
navBar :: NavBarState -> NavBar
initialNavBarState :: NavBarState
setNavBar :: NavBar -> Update NavBarState ()
getNavBar :: Query NavBarState NavBar
data GetNavBar
GetNavBar :: GetNavBar
newtype SetNavBar
SetNavBar :: NavBar -> SetNavBar
instance Typeable GetNavBar
instance Typeable SetNavBar
instance UpdateEvent SetNavBar
instance Method SetNavBar
instance SafeCopy SetNavBar
instance QueryEvent GetNavBar
instance Method GetNavBar
instance SafeCopy GetNavBar
instance IsAcidic NavBarState
instance SafeCopy NavBarState
instance Typeable NavBarState
instance Eq NavBarState
instance Read NavBarState
instance Show NavBarState
instance Data NavBarState

module Clckwrks.Markup.Markdown

-- | run the text through the <a>markdown</a> executable. If successful,
--   and the input is marked <a>Untrusted</a>, run the output through
--   xss-sanitize / sanitizeBalance to prevent injection attacks.
markdown :: MonadIO m => Maybe [String] -> Trust -> Text -> m (Either Text Text)

module Clckwrks.ProfileData.Types
data ProfileData
ProfileData :: UserId -> Text -> Maybe Text -> Set Role -> Map Text Text -> ProfileData
dataFor :: ProfileData -> UserId
username :: ProfileData -> Text
email :: ProfileData -> Maybe Text
roles :: ProfileData -> Set Role
attributes :: ProfileData -> Map Text Text
data Role
Administrator :: Role
Visitor :: Role
Moderator :: Role
Editor :: Role
emptyProfileData :: ProfileData
newtype Username
Username :: Text -> Username
unUsername :: Username -> Text
instance Typeable Username
instance Eq Username
instance Ord Username
instance Read Username
instance Show Username
instance Data Username
instance Indexable ProfileData
instance SafeCopy ProfileData
instance Typeable ProfileData
instance Eq ProfileData
instance Ord ProfileData
instance Read ProfileData
instance Show ProfileData
instance Data ProfileData
instance Migrate Role
instance SafeCopy Role
instance Typeable Role
instance Eq Role
instance Ord Role
instance Read Role
instance Show Role
instance Data Role
instance Enum Role
instance Bounded Role
instance SafeCopy Role_001
instance Typeable Role_001
instance Eq Role_001
instance Ord Role_001
instance Read Role_001
instance Show Role_001
instance Data Role_001
instance Enum Role_001
instance Bounded Role_001

module Clckwrks.ProfileData.Acid
data ProfileDataState
ProfileDataState :: IxSet ProfileData -> ProfileDataState
profileData :: ProfileDataState -> IxSet ProfileData
initialProfileDataState :: ProfileDataState
data ProfileDataError
UsernameAlreadyInUse :: ProfileDataError
profileDataErrorStr :: ProfileDataError -> String
newtype SetProfileData
SetProfileData :: ProfileData -> SetProfileData
newtype GetProfileData
GetProfileData :: UserId -> GetProfileData
newtype NewProfileData
NewProfileData :: ProfileData -> NewProfileData
newtype GetUsername
GetUsername :: UserId -> GetUsername
data GetUserIdUsernames
GetUserIdUsernames :: GetUserIdUsernames
data HasRole
HasRole :: UserId -> Set Role -> HasRole
newtype GetRoles
GetRoles :: UserId -> GetRoles
data AddRole
AddRole :: UserId -> Role -> AddRole
data RemoveRole
RemoveRole :: UserId -> Role -> RemoveRole
newtype UsernameForId
UsernameForId :: UserId -> UsernameForId
instance Typeable SetProfileData
instance Typeable GetProfileData
instance Typeable NewProfileData
instance Typeable GetUsername
instance Typeable GetUserIdUsernames
instance Typeable GetRoles
instance Typeable HasRole
instance Typeable AddRole
instance Typeable RemoveRole
instance Typeable UsernameForId
instance Typeable DataForUsername
instance QueryEvent DataForUsername
instance Method DataForUsername
instance SafeCopy DataForUsername
instance QueryEvent UsernameForId
instance Method UsernameForId
instance SafeCopy UsernameForId
instance UpdateEvent RemoveRole
instance Method RemoveRole
instance SafeCopy RemoveRole
instance UpdateEvent AddRole
instance Method AddRole
instance SafeCopy AddRole
instance QueryEvent HasRole
instance Method HasRole
instance SafeCopy HasRole
instance QueryEvent GetRoles
instance Method GetRoles
instance SafeCopy GetRoles
instance QueryEvent GetUserIdUsernames
instance Method GetUserIdUsernames
instance SafeCopy GetUserIdUsernames
instance QueryEvent GetUsername
instance Method GetUsername
instance SafeCopy GetUsername
instance UpdateEvent NewProfileData
instance Method NewProfileData
instance SafeCopy NewProfileData
instance QueryEvent GetProfileData
instance Method GetProfileData
instance SafeCopy GetProfileData
instance UpdateEvent SetProfileData
instance Method SetProfileData
instance SafeCopy SetProfileData
instance IsAcidic ProfileDataState
instance SafeCopy ProfileDataError
instance Typeable ProfileDataError
instance Eq ProfileDataError
instance Ord ProfileDataError
instance Read ProfileDataError
instance Show ProfileDataError
instance Data ProfileDataError
instance SafeCopy ProfileDataState
instance Typeable ProfileDataState
instance Eq ProfileDataState
instance Ord ProfileDataState
instance Read ProfileDataState
instance Show ProfileDataState
instance Data ProfileDataState

module Clckwrks.Acid

-- | <a>CoreState</a> holds some values that are required by the core
--   itself, or which are useful enough to be shared with numerous
--   plugins/themes.
data CoreState_v0
CoreState_v0 :: Maybe UACCT -> Maybe Text -> CoreState_v0

-- | Google Account UAACT
coreUACCT_v0 :: CoreState_v0 -> Maybe UACCT
coreRootRedirect_v0 :: CoreState_v0 -> Maybe Text

-- | <a>CoreState</a> holds some values that are required by the core
--   itself, or which are useful enough to be shared with numerous
--   plugins/themes.
data CoreState
CoreState :: Maybe Text -> Maybe UACCT -> Maybe Text -> Maybe Text -> CoreState
coreSiteName :: CoreState -> Maybe Text

-- | Google Account UAACT
coreUACCT :: CoreState -> Maybe UACCT
coreRootRedirect :: CoreState -> Maybe Text
coreLoginRedirect :: CoreState -> Maybe Text
initialCoreState :: CoreState

-- | get the <a>UACCT</a> for Google Analytics
getUACCT :: Query CoreState (Maybe UACCT)

-- | set the <a>UACCT</a> for Google Analytics
setUACCT :: Maybe UACCT -> Update CoreState ()

-- | get the path that <tt>/</tt> should redirect to
getRootRedirect :: Query CoreState (Maybe Text)

-- | set the path that <tt>/</tt> should redirect to
setRootRedirect :: Maybe Text -> Update CoreState ()

-- | get the path that we should redirect to after login
getLoginRedirect :: Query CoreState (Maybe Text)

-- | set the path that we should redirect to after login
setLoginRedirect :: Maybe Text -> Update CoreState ()

-- | get the site name
getSiteName :: Query CoreState (Maybe Text)

-- | set the site name
setSiteName :: Maybe Text -> Update CoreState ()

-- | get the entire <a>CoreState</a>
getCoreState :: Query CoreState CoreState

-- | set the entire <a>CoreState</a>
setCoreState :: CoreState -> Update CoreState ()
data GetUACCT
GetUACCT :: GetUACCT
newtype SetUACCT
SetUACCT :: Maybe UACCT -> SetUACCT
data GetRootRedirect
GetRootRedirect :: GetRootRedirect
newtype SetRootRedirect
SetRootRedirect :: Maybe Text -> SetRootRedirect
data GetLoginRedirect
GetLoginRedirect :: GetLoginRedirect
newtype SetLoginRedirect
SetLoginRedirect :: Maybe Text -> SetLoginRedirect
data GetSiteName
GetSiteName :: GetSiteName
newtype SetSiteName
SetSiteName :: Maybe Text -> SetSiteName
data GetCoreState
GetCoreState :: GetCoreState
newtype SetCoreState
SetCoreState :: CoreState -> SetCoreState
data Acid
Acid :: AcidState AuthState -> AcidState ProfileState -> AcidState ProfileDataState -> AcidState CoreState -> AcidState NavBarState -> Acid
acidAuth :: Acid -> AcidState AuthState
acidProfile :: Acid -> AcidState ProfileState
acidProfileData :: Acid -> AcidState ProfileDataState
acidCore :: Acid -> AcidState CoreState
acidNavBar :: Acid -> AcidState NavBarState
class GetAcidState m st
getAcidState :: GetAcidState m st => m (AcidState st)
withAcid :: Maybe FilePath -> (Acid -> IO a) -> IO a
instance Typeable GetUACCT
instance Typeable SetUACCT
instance Typeable GetRootRedirect
instance Typeable SetRootRedirect
instance Typeable GetLoginRedirect
instance Typeable SetLoginRedirect
instance Typeable GetSiteName
instance Typeable SetSiteName
instance Typeable GetCoreState
instance Typeable SetCoreState
instance UpdateEvent SetCoreState
instance Method SetCoreState
instance SafeCopy SetCoreState
instance QueryEvent GetCoreState
instance Method GetCoreState
instance SafeCopy GetCoreState
instance UpdateEvent SetSiteName
instance Method SetSiteName
instance SafeCopy SetSiteName
instance QueryEvent GetSiteName
instance Method GetSiteName
instance SafeCopy GetSiteName
instance UpdateEvent SetLoginRedirect
instance Method SetLoginRedirect
instance SafeCopy SetLoginRedirect
instance QueryEvent GetLoginRedirect
instance Method GetLoginRedirect
instance SafeCopy GetLoginRedirect
instance UpdateEvent SetRootRedirect
instance Method SetRootRedirect
instance SafeCopy SetRootRedirect
instance QueryEvent GetRootRedirect
instance Method GetRootRedirect
instance SafeCopy GetRootRedirect
instance UpdateEvent SetUACCT
instance Method SetUACCT
instance SafeCopy SetUACCT
instance QueryEvent GetUACCT
instance Method GetUACCT
instance SafeCopy GetUACCT
instance IsAcidic CoreState
instance Migrate CoreState
instance SafeCopy CoreState
instance Typeable CoreState
instance Eq CoreState
instance Data CoreState
instance Show CoreState
instance SafeCopy CoreState_v0
instance Typeable CoreState_v0
instance Eq CoreState_v0
instance Data CoreState_v0
instance Show CoreState_v0

module Clckwrks.Monad
type Clck url = ClckT url (ServerPartT IO)

-- | ClckPlugins
--   
--   newtype Plugins theme m hook config st
type ClckPlugins = Plugins Theme (ClckT ClckURL (ServerPartT IO) Response) (ClckT ClckURL IO ()) ClckwrksConfig ClckPluginsSt
data ClckPluginsSt
initialClckPluginsSt :: ClckPluginsSt
newtype ClckT url m a
ClckT :: RouteT url (StateT ClckState m) a -> ClckT url m a
unClckT :: ClckT url m a -> RouteT url (StateT ClckState m) a
type ClckForm url = Form (ClckT url (ServerPartT IO)) [Input] ClckFormError [XMLGenT (ClckT url (ServerPartT IO)) XML] ()

-- | ClckForm - type for reform forms
type ClckFormT error m = Form m [Input] error [XMLGenT m XML] ()

-- | error returned when a reform <a>Form</a> fails to validate
data ClckFormError
ClckCFE :: (CommonFormError [Input]) -> ClckFormError
PDE :: ProfileDataError -> ClckFormError
EmptyUsername :: ClckFormError
data ClckwrksConfig
ClckwrksConfig :: String -> Int -> Maybe TLSSettings -> Bool -> FilePath -> FilePath -> FilePath -> FilePath -> Maybe FilePath -> Bool -> (Text -> ClckState -> ClckwrksConfig -> IO (ClckState, ClckwrksConfig)) -> ClckwrksConfig

-- | external name of the host
clckHostname :: ClckwrksConfig -> String

-- | port to listen on
clckPort :: ClckwrksConfig -> Int

-- | HTTPS
clckTLS :: ClckwrksConfig -> Maybe TLSSettings

-- | hide port number in URL (useful when running behind a reverse proxy)
clckHidePort :: ClckwrksConfig -> Bool

-- | path to <tt>jquery.js</tt> on disk
clckJQueryPath :: ClckwrksConfig -> FilePath

-- | path to <tt>jquery-ui.js</tt> on disk
clckJQueryUIPath :: ClckwrksConfig -> FilePath

-- | path to <tt>jstree.js</tt> on disk
clckJSTreePath :: ClckwrksConfig -> FilePath

-- | path to <tt>JSON2.js</tt> on disk
clckJSON2Path :: ClckwrksConfig -> FilePath

-- | path to top-level directory for all acid-state files<i>file
--   uploads</i>etc
clckTopDir :: ClckwrksConfig -> Maybe FilePath

-- | enable google analytics
clckEnableAnalytics :: ClckwrksConfig -> Bool

-- | init hook
clckInitHook :: ClckwrksConfig -> Text -> ClckState -> ClckwrksConfig -> IO (ClckState, ClckwrksConfig)
data TLSSettings
TLSSettings :: Int -> FilePath -> FilePath -> Maybe FilePath -> TLSSettings
clckTLSPort :: TLSSettings -> Int
clckTLSCert :: TLSSettings -> FilePath
clckTLSKey :: TLSSettings -> FilePath
clckTLSCA :: TLSSettings -> Maybe FilePath
data Theme
Theme :: ThemeName -> [ThemeStyle] -> IO FilePath -> Theme
themeName :: Theme -> ThemeName
themeStyles :: Theme -> [ThemeStyle]
themeDataDir :: Theme -> IO FilePath
data ThemeStyle
ThemeStyle :: Text -> Text -> Maybe FilePath -> (forall headers body. (EmbedAsChild (ClckT ClckURL (ServerPartT IO)) headers, EmbedAsChild (ClckT ClckURL (ServerPartT IO)) body) => Text -> headers -> body -> XMLGenT (ClckT ClckURL (ServerPartT IO)) XML) -> ThemeStyle
themeStyleName :: ThemeStyle -> Text
themeStyleDescription :: ThemeStyle -> Text
themeStylePreview :: ThemeStyle -> Maybe FilePath
themeStyleTemplate :: ThemeStyle -> forall headers body. (EmbedAsChild (ClckT ClckURL (ServerPartT IO)) headers, EmbedAsChild (ClckT ClckURL (ServerPartT IO)) body) => Text -> headers -> body -> XMLGenT (ClckT ClckURL (ServerPartT IO)) XML
newtype ThemeStyleId
ThemeStyleId :: Int -> ThemeStyleId
unThemeStyleId :: ThemeStyleId -> Int
type ThemeName = Text
getThemeStyles :: MonadIO m => ClckPlugins -> m [(ThemeStyleId, ThemeStyle)]
themeTemplate :: (EmbedAsChild (ClckT ClckURL (ServerPartT IO)) headers, EmbedAsChild (ClckT ClckURL (ServerPartT IO)) body) => ClckPlugins -> ThemeStyleId -> Text -> headers -> body -> ClckT ClckURL (ServerPartT IO) Response

-- | calculate the baseURI from the <a>clckHostname</a>, <a>clckPort</a>
--   and <a>clckHidePort</a> options
calcBaseURI :: ClckwrksConfig -> Text
calcTLSBaseURI :: ClckwrksConfig -> Maybe Text

-- | evaluate a <a>ClckT</a> returning the inner monad
--   
--   similar to <a>evalStateT</a>.
evalClckT :: Monad m => (url -> [(Text, Maybe Text)] -> Text) -> ClckState -> ClckT url m a -> m a

-- | execute a <a>ClckT</a> returning the final <a>ClckState</a>
--   
--   similar to <a>execStateT</a>.
execClckT :: Monad m => (url -> [(Text, Maybe Text)] -> Text) -> ClckState -> ClckT url m a -> m ClckState

-- | run a <a>ClckT</a>
--   
--   similar to <a>runStateT</a>.
runClckT :: Monad m => (url -> [(Text, Maybe Text)] -> Text) -> ClckState -> ClckT url m a -> m (a, ClckState)

-- | map a transformation function over the inner monad
--   
--   similar to <a>mapStateT</a>
mapClckT :: (m (a, ClckState) -> n (b, ClckState)) -> ClckT url m a -> ClckT url n b

-- | change the route url
withRouteClckT :: ((url' -> [(Text, Maybe Text)] -> Text) -> url -> [(Text, Maybe Text)] -> Text) -> ClckT url m a -> ClckT url' m a
data ClckState
ClckState :: Acid -> TVar Integer -> [(Text, [(Set Role, Text, Text)])] -> Bool -> ClckPlugins -> ServerPart () -> ClckState
acidState :: ClckState -> Acid
uniqueId :: ClckState -> TVar Integer
adminMenus :: ClckState -> [(Text, [(Set Role, Text, Text)])]

-- | enable Google Analytics
enableAnalytics :: ClckState -> Bool
plugins :: ClckState -> ClckPlugins

-- | an action which gets called at the beginning of each request
requestInit :: ClckState -> ServerPart ()

-- | The the <a>UserId</a> of the current user. While return <a>Nothing</a>
--   if they are not logged in.
getUserId :: (Happstack m, GetAcidState m AuthState, GetAcidState m ProfileState) => m (Maybe UserId)

-- | a wrapper which identifies how to treat different <tt>Text</tt> values
--   when attempting to embed them.
--   
--   In general <a>Content</a> values have already been
--   flatten<i>preprocessed</i>etc and are now basic formats like
--   <tt>text<i>plain@, @text</i>html</tt>, etc
data Content
TrustedHtml :: Text -> Content
PlainText :: Text -> Content

-- | add an Admin menu
addAdminMenu :: Monad m => (Text, [(Set Role, Text, Text)]) -> ClckT url m ()

-- | append an action to the request init
appendRequestInit :: Monad m => ServerPart () -> ClckT url m ()
getNavBarLinks :: MonadIO m => Plugins theme n hook config ClckPluginsSt -> ClckT ClckURL m NavBarLinks
addPreProc :: MonadIO m => Plugins theme n hook config ClckPluginsSt -> (Text -> ClckT ClckURL IO Text) -> m ()
addNavBarCallback :: MonadIO m => Plugins theme n hook config ClckPluginsSt -> ClckT ClckURL IO (String, [NamedLink]) -> m ()
getPreProcessors :: MonadIO m => Plugins theme n hook config ClckPluginsSt -> ClckT url m [Text -> ClckT ClckURL IO Text]

-- | get the <a>Bool</a> value indicating if Google Analytics should be
--   enabled or not
getEnableAnalytics :: (Functor m, MonadState ClckState m) => m Bool

-- | create a google analytics tracking code block
--   
--   This will under two different conditions:
--   
--   <ul>
--   <li>the <a>enableAnalytics</a> field in <a>ClckState</a> is
--   <a>False</a></li>
--   <li>the <tt>uacct</tt> field in <tt>PageState</tt> is
--   <a>Nothing</a></li>
--   </ul>
googleAnalytics :: XMLGenT (Clck url) XML

-- | get a unique <a>Integer</a>.
--   
--   Only unique for the current request
getUnique :: (Functor m, MonadIO m) => ClckT url m Integer
setUnique :: (Functor m, MonadIO m) => Integer -> ClckT url m ()
requiresRole :: Happstack m => Set Role -> url -> ClckT ClckURL m url
requiresRole_ :: Happstack m => (ClckURL -> [(Text, Maybe Text)] -> Text) -> Set Role -> url -> ClckT u m url
setRedirectCookie :: Happstack m => String -> m ()
getRedirectCookie :: Happstack m => m (Maybe String)
getUserRoles :: (Happstack m, MonadIO m) => ClckT u m (Set Role)

-- | similar to the normal acid-state <a>query</a> except it automatically
--   gets the correct <a>AcidState</a> handle from the environment
query :: (QueryEvent event, GetAcidState m (EventState event), Functor m, MonadIO m, MonadState ClckState m) => event -> m (EventResult event)

-- | similar to the normal acid-state <a>update</a> except it automatically
--   gets the correct <a>AcidState</a> handle from the environment
update :: (UpdateEvent event, GetAcidState m (EventState event), Functor m, MonadIO m, MonadState ClckState m) => event -> m (EventResult event)
nestURL :: (url1 -> url2) -> ClckT url1 m a -> ClckT url2 m a
withAbs :: Happstack m => ClckT url m a -> ClckT url m a
withAbs' :: Text -> ClckT url m a -> ClckT url m a
segments :: Text -> Parser a -> Parser [Segment a]
transform :: Monad m => (cmd -> m Builder) -> [Segment cmd] -> m Builder
instance Typeable ThemeStyleId
instance Typeable Content
instance Eq ThemeStyleId
instance Ord ThemeStyleId
instance Read ThemeStyleId
instance Show ThemeStyleId
instance Data ThemeStyleId
instance Show ClckFormError
instance Functor m => Functor (ClckT url m)
instance (Monad m, Functor m) => Applicative (ClckT url m)
instance (Functor m, MonadPlus m) => Alternative (ClckT url m)
instance Monad m => Monad (ClckT url m)
instance MonadIO m => MonadIO (ClckT url m)
instance MonadPlus m => MonadPlus (ClckT url m)
instance ServerMonad m => ServerMonad (ClckT url m)
instance (Monad m, HasRqData m) => HasRqData (ClckT url m)
instance FilterMonad r m => FilterMonad r (ClckT url m)
instance WebMonad r m => WebMonad r (ClckT url m)
instance Monad m => MonadState ClckState (ClckT url m)
instance Eq Content
instance Ord Content
instance Read Content
instance Show Content
instance Data Content
instance Show cmd => Show (Segment cmd)
instance Functor Segment
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) Content
instance (Functor m, Monad m) => XMLGenerator (ClckT url m)
instance (Functor m, Monad m) => SetAttr (ClckT url m) XML
instance (Functor m, Monad m) => AppendChild (ClckT url m) XML
instance (Functor m, Monad m, EmbedAsChild (ClckT url m) a) => EmbedAsChild (ClckT url m) (Maybe a)
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) UTCTime
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) ()
instance (Functor m, MonadIO m, Happstack m) => EmbedAsChild (ClckT url m) ClckFormError
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) Html
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) XML
instance (Functor m, MonadIO m, EmbedAsChild (ClckT url m) a) => EmbedAsChild (ClckT url m) (IO a)
instance (EmbedAsChild (ClckT url1 m) a, url1 ~ url2) => EmbedAsChild (ClckT url1 m) (ClckT url2 m a)
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) Text
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) Text
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) Float
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) Double
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) Integer
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) Int
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) String
instance (Functor m, Monad m) => EmbedAsChild (ClckT url m) Char
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ClckT url m) (Attr n Text)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ClckT url m) (Attr n Text)
instance IsName n Text => EmbedAsAttr (Clck AdminURL) (Attr n AdminURL)
instance IsName n Text => EmbedAsAttr (Clck ClckURL) (Attr n ClckURL)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ClckT url m) (Attr n Integer)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ClckT url m) (Attr n Int)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ClckT url m) (Attr n Bool)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ClckT url m) (Attr n Char)
instance (Functor m, Monad m, IsName n Text) => EmbedAsAttr (ClckT url m) (Attr n String)
instance (Functor m, Monad m) => EmbedAsAttr (ClckT url m) Attribute
instance (Functor m, Monad m) => XMLGen (ClckT url m)
instance (Functor m, Monad m) => GetAcidState (ClckT url m) ProfileDataState
instance (Functor m, Monad m) => GetAcidState (ClckT url m) NavBarState
instance (Functor m, Monad m) => GetAcidState (ClckT url m) CoreState
instance (Functor m, Monad m) => GetAcidState (ClckT url m) ProfileState
instance (Functor m, Monad m) => GetAcidState (ClckT url m) AuthState
instance GetAcidState m st => GetAcidState (XMLGenT m) st
instance Monad m => MonadRoute (ClckT url m)
instance ToJExpr Text
instance (Functor m, MonadIO m) => IntegerSupply (ClckT url m)
instance FormError ClckFormError
instance MonadTrans (ClckT url)
instance Happstack m => Happstack (ClckT url m)
instance SafeCopy ThemeStyleId

module Clckwrks.BasicTemplate
basicTemplate :: (Functor m, Monad m, EmbedAsChild (ClckT url m) headers, EmbedAsChild (ClckT url m) body) => Text -> headers -> body -> ClckT url m Response

module Clckwrks.GetOpts

-- | command-line Flags
data Flag
ModifyConfig :: (ClckwrksConfig -> ClckwrksConfig) -> Flag
Help :: Flag
Version :: Flag

-- | Flag selectors
isHelp :: Flag -> Bool

-- | Flag selectors
isVersion :: Flag -> Bool

-- | Command line options.
clckwrksOpts :: ClckwrksConfig -> [OptDescr Flag]

-- | Parse the command line arguments into a list of flags. Exits with
--   usage message, in case of failure.
parseArgs :: [OptDescr Flag] -> [String] -> IO (ClckwrksConfig -> IO ClckwrksConfig)

-- | A simple usage message listing all flags possible.
helpMessage :: [OptDescr Flag] -> String

module Clckwrks.ProfileData.API
getProfileData :: UserId -> Clck url (Maybe ProfileData)
getUsername :: UserId -> Clck url (Maybe Text)
whoami :: Clck url (Maybe UserId)

module Clckwrks

module Clckwrks.Admin.Template
template :: (Happstack m, EmbedAsChild (ClckT url m) headers, EmbedAsChild (ClckT url m) body) => String -> headers -> body -> ClckT url m Response
emptyTemplate :: (Happstack m, EmbedAsChild (ClckT url m) headers, EmbedAsChild (ClckT url m) body) => String -> headers -> body -> ClckT url m Response
sidebar :: Happstack m => XMLGenT (ClckT url m) XML
adminMenuXML :: Happstack m => XMLGenT (ClckT url m) XML

module Clckwrks.Admin.Console
consolePage :: Clck AdminURL Response

module Clckwrks.Admin.EditSettings
editSettings :: ClckURL -> Clck ClckURL Response
editSettingsForm :: CoreState -> ClckForm ClckURL CoreState

module Clckwrks.NavBar.EditNavBar
editNavBar :: Clck ClckURL Response
initializeDropDowns :: NavBarLinks -> JStat
saveChanges :: Text -> JStat
removeItem :: JStat
jstree :: NavBar -> Value
navBarToJSTree :: NavBar -> Value
navBarItemToJSTree :: NavBarItem -> Value
navBarPost :: Clck ClckURL Response
newtype NavBarUpdate
NavBarUpdate :: NavBar -> NavBarUpdate
instance Show NavBarUpdate
instance FromJSON NavBarItem
instance FromJSON NavBarUpdate

module Clckwrks.Admin.Route

-- | routes for <a>AdminURL</a>
routeAdmin :: AdminURL -> Clck ClckURL Response

module Clckwrks.NavBar.API
getNavBarData :: (Functor m, MonadIO m) => ClckT url m NavBar
getNavBar :: GenXML (Clck ClckURL)
navBarHTML :: NavBar -> GenXML (Clck ClckURL)
mkNavBarItem :: NavBarItem -> GenXML (Clck ClckURL)

module Clckwrks.ProfileData.EditProfileData
editProfileDataPage :: ProfileDataURL -> Clck ProfileDataURL Response
profileDataFormlet :: ProfileData -> ClckForm ProfileDataURL ()

module Clckwrks.ProfileData.EditNewProfileData
editNewProfileDataPage :: ProfileDataURL -> Clck ProfileDataURL Response

module Clckwrks.ProfileData.EditProfileDataFor
editProfileDataForPage :: ProfileDataURL -> UserId -> Clck ProfileDataURL Response
profileDataFormlet :: ProfileData -> ClckForm ProfileDataURL ()

module Clckwrks.ProfileData.Route
routeProfileData :: ProfileDataURL -> Clck ProfileDataURL Response

module Clckwrks.Server
withClckwrks :: ClckwrksConfig -> (ClckState -> IO b) -> IO b
simpleClckwrks :: ClckwrksConfig -> IO ()
jsHandlers :: Happstack m => ClckwrksConfig -> m Response
clckSite :: ClckwrksConfig -> ClckState -> ServerPart Response
pluginsHandler :: (Functor m, ServerMonad m, FilterMonad Response m, MonadIO m) => Plugins theme (m Response) hook config ppm -> m Response

module Clckwrks.Route
checkAuth :: (Happstack m, Monad m) => ClckURL -> ClckT ClckURL m ClckURL
routeClck :: ClckURL -> Clck ClckURL Response

module Clckwrks.Plugin
clckHandler :: (ClckURL -> [(Text, Maybe Text)] -> Text) -> ClckPlugins -> [Text] -> ClckT ClckURL (ServerPartT IO) Response
clckMenuCallback :: ClckT ClckURL IO (String, [NamedLink])
clckInit :: ClckPlugins -> IO (Maybe Text)
addClckAdminMenu :: ClckT url IO ()
clckPlugin :: Plugin ClckURL Theme (ClckT ClckURL (ServerPartT IO) Response) (ClckT ClckURL IO ()) ClckwrksConfig ClckPluginsSt
plugin :: ClckPlugins -> Text -> IO (Maybe Text)
