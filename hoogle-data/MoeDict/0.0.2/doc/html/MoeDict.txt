-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities working with MoeDict.tw JSON dataset
--   
@package MoeDict
@version 0.0.2

module Text.MoeDict
type Str = Text
data Pronounciation
Pronounciation :: Str -> Str -> Str -> Pronounciation
bopomofo :: Pronounciation -> Str
bopomofo2 :: Pronounciation -> Str
pinyin :: Pronounciation -> Str
newtype Quote
Quote :: Str -> Quote
data Radical
Radical :: Char -> Count -> Count -> Radical
letter :: Radical -> Char
strokeCount :: Radical -> Count
nonRadicalStrokeCount :: Radical -> Count
newtype Example
Example :: Str -> Example
newtype Title
Title :: Str -> Title
titleText :: Title -> Str
newtype Link
Link :: Str -> Link
newtype Count
Count :: Int -> Count
data Part
Preposition :: Part
Pronoun :: Part
Adverb :: Part
Particle :: Part
Verb :: Part
Noun :: Part
Adjective :: Part
Exclamation :: Part
Onomatopoeia :: Part
Affix :: Part
Conjunction :: Part
Note :: Part
data POS
POS :: Text -> Part -> POS
label :: POS -> Text
part :: POS -> Part
data Entry
Entry :: Title -> Maybe Radical -> [Heteronym] -> Entry
title :: Entry -> Title
radical :: Entry -> Maybe Radical
heteronyms :: Entry -> [Heteronym]
data Heteronym
Heteronym :: Pronounciation -> [Definition] -> Heteronym
pronounciation :: Heteronym -> Pronounciation
definitions :: Heteronym -> [Definition]
data Definition
Definition :: Text -> Maybe POS -> [Example] -> [Quote] -> [Link] -> [Title] -> [Title] -> Definition
definition :: Definition -> Text
pos :: Definition -> Maybe POS
examples :: Definition -> [Example]
quotes :: Definition -> [Quote]
links :: Definition -> [Link]
antonyms :: Definition -> [Title]
synonyms :: Definition -> [Title]
parseMoeDictFile :: FilePath -> IO [Entry]
type RadicalLetter = Char
type PinYin = Text
data HeadWord
HeadWord :: !Char -> !PinYin -> HeadWord
headChar :: HeadWord -> !Char
headSound :: HeadWord -> !PinYin
type EntryMap = Map HeadWord [Entry]
data Cluster
Cluster :: RadicalLetter -> !HeadWord -> [Entry] -> Cluster
radicalLetter :: Cluster -> RadicalLetter
headWord :: Cluster -> !HeadWord
clusterEntries :: Cluster -> [Entry]
entriesToMap :: [Entry] -> Map RadicalLetter EntryMap
splitHeteronym :: Entry -> [Entry]
entryHead :: Entry -> HeadWord
instance Show Quote
instance IsString Quote
instance FromJSON Quote
instance ToJSON Quote
instance Eq Quote
instance Ord Quote
instance Show Example
instance IsString Example
instance FromJSON Example
instance ToJSON Example
instance Eq Example
instance Ord Example
instance Show Title
instance IsString Title
instance FromJSON Title
instance ToJSON Title
instance Ord Title
instance Eq Title
instance Show Link
instance IsString Link
instance FromJSON Link
instance ToJSON Link
instance Eq Link
instance Ord Link
instance Show Count
instance Ord Count
instance Eq Count
instance FromJSON Count
instance ToJSON Count
instance Enum Count
instance Show Radical
instance Ord Radical
instance Eq Radical
instance Show Part
instance Eq Part
instance Ord Part
instance Show POS
instance Eq POS
instance Ord POS
instance Show Definition
instance Eq Definition
instance Ord Definition
instance Show Heteronym
instance Eq Heteronym
instance Ord Heteronym
instance Show Entry
instance Eq Entry
instance Ord Entry
instance Show HeadWord
instance Eq HeadWord
instance Ord HeadWord
instance Show Cluster
instance ToJSON Heteronym
instance FromJSON Heteronym
instance ToJSON Definition
instance FromJSON Definition
instance FromJSON Entry
instance FromJSON (Maybe Heteronym)
instance FromJSON (Maybe Entry)
instance FromJSON POS
instance FromJSON Pronounciation
instance ToJSON Pronounciation
instance Show Pronounciation
instance Eq Pronounciation
instance Ord Pronounciation
