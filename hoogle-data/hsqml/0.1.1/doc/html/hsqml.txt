-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell binding for Qt Quick
--   
--   A Haskell binding for Qt Quick. General documentation is present in
--   the <a>Graphics.QML</a> module.
@package hsqml
@version 0.1.1


-- | Debug Options
module Graphics.QML.Debug

-- | Sets the global debug log level. At level zero, no logging information
--   will be printed. Higher levels will increase debug verbosity.
setDebugLogLevel :: Int -> IO ()


-- | Facilities for defining new object types which can be marshalled
--   between Haskell and QML.
module Graphics.QML.Objects

-- | The class <a>Object</a> allows Haskell types to expose an
--   object-oriented interface to QML.
class Typeable tt => Object tt
classDef :: Object tt => ClassDef tt

-- | Represents the API of the QML class which wraps the type <tt>tt</tt>.
data ClassDef tt

-- | Represents a named member of the QML class which wraps type
--   <tt>tt</tt>.
data Member tt

-- | Generates a <a>ClassDef</a> from a list of <a>Member</a>s.
defClass :: Object tt => [Member tt] -> ClassDef tt

-- | Defines a named method using a function <tt>f</tt> in the IO monad.
--   
--   The first argument to <tt>f</tt> receives the "this" object and hence
--   must match the type of the class on which the method is being defined.
--   Subsequently, there may be zero or more parameter arguments followed
--   by an optional return argument in the IO monad. These argument types
--   must be members of the <a>MarshalThis</a>, <a>MarshalIn</a>, and
--   <a>MarshalOut</a> typeclasses respectively.
defMethod :: (MarshalThis tt, MethodSuffix ms) => String -> (tt -> ms) -> Member (ThisObj tt)

-- | Supports marshalling Haskell functions with an arbitrary number of
--   arguments.
class MethodSuffix a

-- | Defines a named read-only property using an accessor function in the
--   IO monad.
defPropertyRO :: (MarshalThis tt, MarshalOut tr) => String -> (tt -> IO tr) -> Member (ThisObj tt)

-- | Defines a named read-write property using a pair of accessor and
--   mutator functions in the IO monad.
defPropertyRW :: (MarshalThis tt, MarshalOut tr) => String -> (tt -> IO tr) -> (tt -> tr -> IO ()) -> Member (ThisObj tt)

-- | Represents an instance of the QML class which wraps the type
--   <tt>tt</tt>.
data ObjRef tt

-- | Creates an instance of a QML class given a value of the underlying
--   Haskell type <tt>tt</tt>.
newObject :: Object tt => tt -> IO (ObjRef tt)

-- | Returns the associated value of the underlying Haskell type
--   <tt>tt</tt> from an instance of the QML class which wraps it.
fromObjRef :: ObjRef tt -> tt

-- | Provides an <a>InMarshaller</a> which allows you to define instances
--   of <a>MarshalIn</a> for custom object types. For example:
--   
--   <pre>
--   instance MarshalIn MyObjectType where
--       mIn = objectInMarshaller
--   </pre>
--   
--   This instance would allow <tt>MyObjectType</tt> to be used as a
--   parameter type in callbacks. An instance is provided for
--   <tt><a>ObjRef</a> MyObjectType</tt> by default.
objectInMarshaller :: Object tt => InMarshaller tt

-- | The class <a>MarshalThis</a> allows objects to be marshalled back into
--   Haskell as the "this" value for callbacks.
class Object (ThisObj tt) => MarshalThis tt where type family ThisObj tt
mThis :: MarshalThis tt => ThisMarshaller tt

-- | Provides an <a>ThisMarshaller</a> which allows you to define instances
--   of <a>MarshalThis</a> for custom object types. For example:
--   
--   <pre>
--   instance MarshalThis MyObjectType where
--       type (ThisObj MyObjectType) = MyObjectType
--       mIn = objectInMarshaller
--   </pre>
--   
--   This instance would allow <tt>MyObjectType</tt> to be used as the
--   "this" type for callbacks. An instance is provided for
--   <tt><a>ObjRef</a> MyObjectType</tt> by default.
objectThisMarshaller :: (Object tt, (ThisObj tt) ~ tt) => ThisMarshaller tt
instance Show MOCState
instance MarshalOut a => MethodSuffix (IO a)
instance (MarshalIn a, MethodSuffix b) => MethodSuffix (a -> b)
instance Object tt => MarshalThis (ObjRef tt)
instance Object tt => MarshalIn (ObjRef tt)
instance Object tt => MarshalOut (ObjRef tt)


-- | Type classs and instances for marshalling values between Haskell and
--   QML.
module Graphics.QML.Marshal

-- | The class <a>MarshalIn</a> allows QML values to be converted into
--   Haskell values.
class MarshalIn a
mIn :: MarshalIn a => InMarshaller a

-- | Encapsulates the functionality to needed to implement an instance of
--   <a>MarshalIn</a> so that such instances can be defined without access
--   to implementation details.
data InMarshaller a

-- | The class <a>MarshalOut</a> allows Haskell values to be converted into
--   QML values.
class MarshalIn a => MarshalOut a
instance MarshalIn URI
instance MarshalOut URI
instance MarshalIn String
instance MarshalOut String
instance MarshalIn Text
instance MarshalOut Text
instance MarshalIn Double
instance MarshalOut Double
instance MarshalIn Int
instance MarshalOut Int


-- | Functions for starting QML engines, displaying content in a window.
module Graphics.QML.Engine

-- | Specifies the intial state of the display window.
data InitialWindowState

-- | A visible window should be created for the initial document with a
--   default title.
ShowWindow :: InitialWindowState

-- | A visible window should be created for the initial document with the
--   given title.
ShowWindowWithTitle :: String -> InitialWindowState

-- | A window should be created for the initial document, but it will
--   remain hidden until made visible by the QML script.
HideWindow :: InitialWindowState

-- | Holds parameters for configuring a QML runtime engine.
data EngineConfig a
EngineConfig :: URI -> InitialWindowState -> Maybe (ObjRef a) -> EngineConfig a

-- | URL for the first QML document to be loaded.
initialURL :: EngineConfig a -> URI

-- | Window state for the initial QML document.
initialWindowState :: EngineConfig a -> InitialWindowState

-- | Context <a>Object</a> made available to QML script code.
contextObject :: EngineConfig a -> Maybe (ObjRef a)

-- | Default engine configuration. Loads <tt>"main.qml"</tt> from the
--   current working directory into a visible window with no context
--   object.
defaultEngineConfig :: EngineConfig a

-- | Create a QML engine from a specification of its configuration.
createEngine :: Object a => EngineConfig a -> IO ()

-- | Enters the Qt event loop and runs until all engines have terminated.
runEngines :: IO ()

-- | Convenience function for converting local file paths into URIs.
filePathToURI :: FilePath -> URI


-- | This module imports the entire package, except <a>Debug</a>.
module Graphics.QML
