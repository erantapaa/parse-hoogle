-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Anti-forensic Information Splitter
--   
--   Anti-forensic Information Splitter as defined for LUKS
@package afis
@version 0.1.1


-- | haskell implementation of the Anti-forensic information splitter
--   available in LUKS. <a>http://clemens.endorphin.org/AFsplitter</a>
--   
--   The algorithm bloats an arbitrary secret with many bits that are
--   necessary for the recovery of the key (merge), and allow greater way
--   to permanently destroy a key stored on disk.
module Crypto.Data.AFIS

-- | Split data to diffused data, using a random generator and an hash
--   algorithm.
--   
--   the diffused data will consist of random data for (expandTimes-1) then
--   the last block will be xor of the accumulated random data diffused by
--   the hash algorithm.
--   
--   <ul>
--   <li>--------- - orig - ----------</li>
--   <li>--------- ---------- -------------- - rand1 - - rand2 - - orig ^
--   acc - ---------- ---------- --------------</li>
--   </ul>
--   
--   where acc is : acc(n+1) = hash (n ++ rand(n)) ^ acc(n)
split :: (HashAlgorithm a, CPRG rng) => HashFunctionBS a -> rng -> Int -> ByteString -> (ByteString, rng)

-- | Merge previously diffused data back to the original data.
merge :: HashAlgorithm a => HashFunctionBS a -> Int -> ByteString -> ByteString
