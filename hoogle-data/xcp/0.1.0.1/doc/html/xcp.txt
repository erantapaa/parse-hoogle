-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Partial implementation of the XCP protocol with ethernet as transport layer.
--   
@package xcp
@version 0.1.0.1

module Network.Xcp

-- | XCP commands from the standard. Note: Not all of these are implemented
--   and a few from the XCP reference are missing. Please add them as
--   needed if you like.
data XcpCommandId
ConnectXcp :: XcpCommandId
DisconnectXcp :: XcpCommandId
GetStatus :: XcpCommandId
Synch :: XcpCommandId
GetCommModeInfo :: XcpCommandId
GetId :: XcpCommandId
SetRequest :: XcpCommandId
GetSeed :: XcpCommandId
Unlock :: XcpCommandId
SetMta :: XcpCommandId
Upload :: XcpCommandId
ShortUpload :: XcpCommandId
BuildChecksum :: XcpCommandId
TransportLayerCmd :: XcpCommandId
UserCmd :: XcpCommandId
Download :: XcpCommandId
DownloadNext :: XcpCommandId
DownloadMax :: XcpCommandId
ShortDownload :: XcpCommandId
ModifyBits :: XcpCommandId
pid :: XcpCommandId -> Word8

-- | Class for types that can be converted to a lazy <tt>ByteString</tt>
--   for transmission.
class Storable a => ToByteString a
data XcpError
GenericError :: Word8 -> XcpError

-- | Create an XCP packet to get a number of bytes from an address.
xcpGet :: Word32 -> Word8 -> ByteString

-- | Create an XCP packet to set a number of bytes at an address.
xcpSet :: ToByteString a => Word32 -> a -> ByteString

-- | The XCP <i>connect</i> packet.
xcpConnect :: ByteString

-- | The XCP <i>disconnect</i> packet.
xcpDisconnect :: ByteString

-- | Result structure for the result of XCP commands, received from a
--   slave.
data XcpResult
XcpResult :: ByteString -> Word16 -> Word16 -> XcpResult
xcpResultPayload :: XcpResult -> ByteString
xcpResultSize :: XcpResult -> Word16
xcpResultCounter :: XcpResult -> Word16
XcpErr :: XcpError -> ByteString -> Word16 -> Word16 -> XcpResult
xcpErr :: XcpResult -> XcpError
xcpErrPayload :: XcpResult -> ByteString
xcpErrSize :: XcpResult -> Word16
xcpErrCounter :: XcpResult -> Word16

-- | Convert a result XCP message received from a slave into a
--   <a>XcpResult</a>.
byteStringToResult :: ByteString -> XcpResult

-- | Generate a value from a list of bytes by poking them into memory.
fromBytes :: Storable a => a -> [Word8] -> Maybe a

-- | Show a string of bytes.
bytesToString :: [Word8] -> String
instance ToByteString Int32
instance ToByteString Int16
instance ToByteString Int8
instance ToByteString Float
instance ToByteString Word32
instance ToByteString Word16
instance ToByteString Word8

module Network.Udp

-- | The same as <a>withSocketsDo</a>, since some operating systems require
--   some initialisation when using sockets.
withUdpDo :: IO a -> IO a

-- | Creates a socket with the given local IP address and port.
udpSocket :: String -> PortNumber -> IO Socket


-- | This module is the one to use when you want to use XCP over ethernet.
--   Usage goes somewhat like this:
--   
--   <pre>
--   import Network.XcpEth
--   import Data.Int
--   
--   main = do
--      am &lt;- loadAddressMap "myAddresses"
--      a &lt;- runXcpEth $ do
--             connect "192.168.0.1" 12345 "192.168.0.2" 12345
--             a &lt;- getVariable (0::Float) "myOwnVariable"
--             setVariable "myOtherVariable" (42::Int8)
--             return a
--             disconnect
--      putStrLn $ "Received " ++ show a
--   </pre>
--   
--   If you want to add other transport layer protocols, just look at
--   <tt>Xcp</tt> and add the parts of the XCP message that are specific to
--   your transport layer protocol to the XCP packets you get from
--   <tt>Xcp</tt>.
module Network.XcpEth

-- | The XcpEth monad. It is used to encapsulate sending commands from the
--   host to the slave and receiving results.
data XcpEth a

-- | Run an action and return either an error message, or the resulting
--   value and log strings, if any.
runXcpEth :: XcpEth a -> IO (Either String (a, [String]))

-- | Connect to the given slave IP and portnumber, and send an XCP
--   <i>connect</i> packet.
connect :: IPAddress -> PortNumber -> IPAddress -> PortNumber -> XcpEth ()

-- | Sends a <i>disconnect</i> XCP packet to the slave and closes the UDP
--   socket.
disconnect :: XcpEth ()

-- | Set a variable in the slave memory.
setVariable :: ToByteString a => String -> a -> XcpEth ()

-- | Get the value of a variable in the slave memory.
getVariable :: ToByteString a => a -> String -> XcpEth a

-- | Stores a log message in the internal log.
logString :: String -> XcpEth ()
readCommands :: [String] -> XcpEth ()
type AddressMap = Map String Word32

-- | Reads a mapping from memory addresses to names from a simple text
--   file. Each line is expected of the form <i>address</i> <i>name</i>.
loadAddressMap :: FilePath -> XcpEth ()

-- | Sets the address map to use by subsequent actions.
setAddressMap :: AddressMap -> XcpEth ()
throwError :: String -> XcpEth a

-- | Class for types that can be converted to a lazy <tt>ByteString</tt>
--   for transmission.
class Storable a => ToByteString a
type IPAddress = String
instance Show XcpCommand
instance Read XcpCommand
instance Monad XcpEth
instance Applicative XcpEth
instance Functor XcpEth
