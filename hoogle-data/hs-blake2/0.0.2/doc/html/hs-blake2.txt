-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A cryptohash-inspired library for blake2
--   
@package hs-blake2
@version 0.0.2

module Crypto.Hash.Tsuraan.Blake2.Serial

-- | Opaque type that tracks the Blake2 hashing state. The update and
--   finalize functions mutate this context.
data Ctx

-- | Create a hashing context.
init :: Int -> IO Ctx

-- | Create a hashing context for key-based hashing.
init_key :: ByteString -> Int -> IO Ctx

-- | Add more data to the hash.
update :: Ctx -> ByteString -> IO ()

-- | Finish hashing. This returns the digest of all the data that's been
--   given to the <a>update</a> function.
finalize :: Ctx -> IO ByteString

-- | Hash a <a>ByteString</a> into a digest <a>ByteString</a>. This
--   function always runs in serial, which is faster for very small strings
--   but slower as the strings get larger.
hash :: Int -> ByteString -> ByteString

-- | Hash a <a>ByteString</a> into a digest <a>ByteString</a> using a key.
--   This function always runs in serial, which is faster for very small
--   strings but slower as the strings get larger.
hash_key :: ByteString -> Int -> ByteString -> ByteString
instance Show Ctx
instance Storable Blake2bState

module Crypto.Hash.Tsuraan.Blake2.Parallel

-- | Opaque type that tracks the Blake2 hashing state. The update and
--   finalize functions mutate this context.
data Ctx

-- | Create a hashing context.
init :: Int -> IO Ctx

-- | Create a hashing context for key-based hashing.
init_key :: ByteString -> Int -> IO Ctx

-- | Add more data to the hash.
update :: Ctx -> ByteString -> IO ()

-- | Finish hashing. This returns the digest of all the data that's been
--   given to the <a>update</a> function.
finalize :: Ctx -> IO ByteString

-- | Hash a <a>ByteString</a> into a digest <a>ByteString</a>. This
--   function always runs in parallel, which is slower for very small
--   strings but faster as the strings get larger.
hash :: Int -> ByteString -> ByteString

-- | Hash a <a>ByteString</a> into a digest <a>ByteString</a> using a key.
--   This function always runs in parallel, which is slower for very small
--   strings but faster as the strings get larger.
hash_key :: ByteString -> Int -> ByteString -> ByteString
instance Show Ctx
instance Storable Blake2bpState

module Crypto.Hash.Tsuraan.Blake2

-- | Hash a strict <a>ByteString</a> into a digest <a>ByteString</a>. This
--   will choose to use parallel or serial Blake2 depending on the size of
--   the input <a>ByteString</a>
hash :: Int -> ByteString -> ByteString

-- | Hash a strict <a>ByteString</a> into a digest <a>ByteString</a> using
--   a key. This will choose to use parallel or serial Blake2 depending on
--   the size of the input <a>ByteString</a>.
hash_key :: ByteString -> Int -> ByteString -> ByteString
