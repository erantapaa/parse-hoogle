-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Efficient free and operational monads.
--   
--   Free and operational monad that efficiently support alternating
--   between building and observing.
@package reflection-without-remorse
@version 0.9.5


-- | An operational monad that supports alternating between building and
--   observing. It supports all operations (<a>&gt;&gt;=</a>,
--   <a>return</a>, <a>fromView</a> and <a>toView</a>) in worst case
--   constant time.
--   
--   See the paper Reflection without Remorse: Revealing a hidden sequence
--   to speed up Monadic Reflection, Atze van der Ploeg and Oleg Kiselyov,
--   Haskell Symposium 2014 for more details.
--   
--   Paper: <a>http://homepages.cwi.nl/~ploeg/zseq.pdf</a> Talk :
--   <a>http://www.youtube.com/watch?v=_XoI65Rxmss</a>
module Control.Monad.Operational.Reflectable
data Program r a
data ProgramView r a
Bind :: r w -> (w -> Program r a) -> ProgramView r a
Return :: a -> ProgramView r a
fromView :: ProgramView r a -> Program r a
toView :: Program r a -> ProgramView r a
instr :: r x -> Program r x
interpretWithMonad :: Monad m => (forall a. r a -> m a) -> Program r b -> m b
instance Applicative (Program r)
instance Functor (Program r)
instance Monad (Program r)


-- | A free monad that supports alternating between building and observing.
--   It supports all operations (<a>&gt;&gt;=</a>, <a>return</a>,
--   <a>fromView</a> and <a>toView</a>) in worst case constant time.
--   
--   See the paper Reflection without Remorse: Revealing a hidden sequence
--   to speed up Monadic Reflection, Atze van der Ploeg and Oleg Kiselyov,
--   Haskell Symposium 2014 for more details.
--   
--   Paper: <a>http://homepages.cwi.nl/~ploeg/zseq.pdf</a> Talk :
--   <a>http://www.youtube.com/watch?v=_XoI65Rxmss</a>
module Control.Monad.Free.Reflectable
data FreeMonadView f a
Pure :: a -> FreeMonadView f a
Impure :: (f (FreeMonad f a)) -> FreeMonadView f a
data FreeMonad f a
fromView :: FreeMonadView f a -> FreeMonad f a
toView :: Functor f => FreeMonad f a -> FreeMonadView f a
instance Applicative (FreeMonad f)
instance Functor (FreeMonad f)
instance Monad (FreeMonad f)
