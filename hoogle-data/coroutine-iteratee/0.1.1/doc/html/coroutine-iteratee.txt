-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bridge between the monad-coroutine and iteratee packages.
--   
--   This package acts as a bidirectional bridge between two monad
--   transformers: the Data.Iteratee.Base.Iteratee in the iteratee package,
--   and the Control.Monad.Coroutine.Coroutine in the monad-coroutine
--   package.
@package coroutine-iteratee
@version 0.1.1


-- | This module provides a bridge between the Control.Monad.Coroutine and
--   the Data.Enumerator monad transformers.
module Control.Monad.Coroutine.Iteratee

-- | Converts a <a>Coroutine</a> parameterized with the <a>Yield</a>
--   functor into an <a>Enumerator</a>.
coroutineEnumerator :: (Monad m, Monoid s) => Coroutine (Yield [s]) m b -> Enumerator s m c

-- | Converts an <a>Enumerator</a> into a <a>Coroutine</a> parameterized
--   with the <a>Yield</a> functor.
enumeratorCoroutine :: Monad m => Enumerator s (Coroutine (Yield [s]) m) () -> Coroutine (Yield [s]) m ()

-- | Converts a <a>Coroutine</a> parameterized with the <a>Await</a> [x]
--   functor, treating an empty input chunk as <a>EOF</a>, into an
--   <a>Iteratee</a>.
coroutineIteratee :: (Monad m, Monoid s) => Coroutine (Await [s]) m (Either SomeException (b, [s])) -> Iteratee s m b

-- | Converts an <a>Iteratee</a> into a <a>Coroutine</a> parameterized with
--   the <a>Await</a> [x] functor. The coroutine treats an empty input
--   chunk as <a>EOF</a>.
iterateeCoroutine :: (Monad m, Monoid s) => Iteratee s m b -> Coroutine (Await [s]) m (Either SomeException (b, [s]))

-- | Converts an <a>Iteratee</a> into a <a>Coroutine</a> parameterized with
--   the <a>Await</a> (<a>Stream</a> x) functor.
iterateeStreamCoroutine :: Monad m => Iteratee s m b -> Coroutine (Await (Stream s)) m (Either SomeException (b, Stream s))

-- | Converts a <a>Coroutine</a> parameterized with the <a>Await</a>
--   functor into an <a>Iteratee</a>.
streamCoroutineIteratee :: Monad m => Coroutine (Await (Stream s)) m (Either SomeException (b, Stream s)) -> Iteratee s m b
