-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | GLFW instance of netwire-input
--   
@package netwire-input-glfw
@version 0.0.4


-- | This module contains data types with instances needed to create wires
--   that can be used with the netwire-input combinators. In particular,
--   this package implements <a>GLFWInputT</a> which has instances of
--   <a>MonadKeyboard</a> and <a>MonadMouse</a>
module FRP.Netwire.Input.GLFW

-- | The <a>GLFWInput</a> monad is simply a state monad around the
--   GLFWInputState
type GLFWInput = State GLFWInputState

-- | The <a>GLFWInputT</a> monad transformer is simply a state monad
--   transformer using <a>GLFWInputState</a>
type GLFWInputT m = StateT GLFWInputState m

-- | This is an <a>STM</a> variable that holds the current input state. It
--   cannot be manipulated directly, but it is updated by GLFW each time
--   <a>pollGLFW</a> is called.
data GLFWInputControl

-- | The GLFW input state is a record that keeps track of which buttons and
--   keys are currently pressed. Because GLFW works with callbacks, a call
--   to pollEvents must be made in order to process any of the events. At
--   this time, all of the appropriate callbacks are fired in order of the
--   events received, and this record is updated to reflect the most recent
--   input state.
data GLFWInputState

-- | Returns a current snapshot of the input
getInput :: GLFWInputControl -> IO (GLFWInputState)

-- | Creates and returns an <a>STM</a> variable for the window that holds
--   all of the most recent input state information
mkInputControl :: Window -> IO (GLFWInputControl)

-- | Allows GLFW to interact with the windowing system to update the
--   current state. The old state must be passed in order to properly reset
--   certain properties such as the scroll wheel. The returned input state
--   is identical to a subsequent call to <a>getInput</a> right after a
--   call to <a>pollEvents</a>
pollGLFW :: GLFWInputState -> GLFWInputControl -> IO (GLFWInputState)
instance Show GLFWInputState
instance (Functor m, Monad m) => MonadMouse MouseButton (StateT GLFWInputState m)
instance (Functor m, Monad m) => MonadKeyboard Key (StateT GLFWInputState m)
instance MouseButton MouseButton
instance Key Key
