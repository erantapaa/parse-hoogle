-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | thread-friendly file locks that don't block the entire program
--   
--   This module provides file locks that (unlike their counterparts in
--   System.Posix.IO) leave other threads running while one waits for the
--   lock.
@package colock
@version 0.2.2


-- | <a>System.IO.Lock</a> provides thread-friendly file locks. The locking
--   functions in <a>System.Posix.IO</a> (actually, it's just
--   <tt>System.Posix.IO.waitToSetLock</tt>) will block the entire program,
--   not just the calling thread (even with the threaded runtime). This
--   module avoids the problem by spawning a new process for each lock and
--   communicating with it over pipes.
--   
--   Advantages:
--   
--   <ul>
--   <li>Only blocks the calling thread</li>
--   <li>Works both with and without <tt>-threaded</tt></li>
--   </ul>
--   
--   Disadvantages:
--   
--   <ul>
--   <li>Forks one new process per lock</li>
--   <li>Consumes one file descriptor per lock</li>
--   </ul>
--   
--   Oddities:
--   
--   <ul>
--   <li>Closing the file descriptor doesn't affect the lock (because it's
--   really in a separate process); you must call <a>unLock</a>
--   instead.</li>
--   </ul>
module System.IO.Lock
data LockMode
LockRead :: LockMode
LockWrite :: LockMode
data LockDescriptor

-- | <a>setLock</a> locks the specified region of the file. It blocks the
--   calling thread until the lock is granted.
setLock :: Fd -> (LockMode, SeekMode, FileOffset, FileOffset) -> IO LockDescriptor

-- | <tt><a>setLockAll</a> fd lm</tt> is equivalent to <tt><a>setLock</a>
--   fd (lm, <a>AbsoluteSeek</a>, 0, 0)</tt>. It locks the entire file, no
--   matter how big it is.
setLockAll :: Fd -> LockMode -> IO LockDescriptor

-- | <a>unLock</a> destroys the given lock.
unLock :: LockDescriptor -> IO ()
instance Typeable LockDescriptor
instance Typeable LockMode
instance Show LockDescriptor
instance Eq LockMode
instance Ord LockMode
instance Read LockMode
instance Show LockMode
instance Enum LockMode
instance Bounded LockMode
