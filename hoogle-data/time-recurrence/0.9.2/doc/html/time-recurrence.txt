-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate recurring dates.
--   
--   time-recurrence is a library for generating recurring dates. It is
--   based on the iCalendar spec (RFC 5545). However it makes no attempt to
--   strictly follow the spec.
@package time-recurrence
@version 0.9.2

module Data.Time.Recurrence.AndThen
class AndThen a b c | a b -> c
(>==>) :: AndThen a b c => a -> b -> c

module Data.Time.Calendar.WeekDay
data WeekDay
Monday :: WeekDay
Tuesday :: WeekDay
Wednesday :: WeekDay
Thursday :: WeekDay
Friday :: WeekDay
Saturday :: WeekDay
Sunday :: WeekDay
instance Read WeekDay
instance Show WeekDay
instance Eq WeekDay
instance Ord WeekDay
instance Enum WeekDay
instance Bounded WeekDay

module Data.Time.Calendar.Month
data Month
January :: Month
February :: Month
March :: Month
April :: Month
May :: Month
June :: Month
July :: Month
August :: Month
September :: Month
October :: Month
November :: Month
December :: Month
instance Read Month
instance Show Month
instance Eq Month
instance Ord Month
instance Bounded Month
instance Enum Month

module Data.Time.CalendarTime

-- | A representation of calendar time separated into year, month, day, and
--   so on.
data CalendarTime
CalendarTime :: Int -> Int -> Int -> Int -> Month -> Integer -> WeekDay -> Int -> TimeZone -> CalendarTime
calendarSecond :: CalendarTime -> Int
calendarMinute :: CalendarTime -> Int
calendarHour :: CalendarTime -> Int
calendarDay :: CalendarTime -> Int
calendarMonth :: CalendarTime -> Month
calendarYear :: CalendarTime -> Integer
calendarWeekDay :: CalendarTime -> WeekDay
calendarYearDay :: CalendarTime -> Int
calendarTimeZone :: CalendarTime -> TimeZone

-- | Convert to a <a>Day</a>
toDay :: CalendarTime -> Maybe Day

-- | Change y-m-d in <a>CalendarTime</a>
withDay :: CalendarTime -> Day -> CalendarTime

-- | Convert to a <a>TimeOfDay</a>
toTimeOfDay :: CalendarTime -> Maybe TimeOfDay
daysInYear :: CalendarTimeConvertible a => a -> Int
lastDayOfMonth :: CalendarTimeConvertible a => a -> Int
weekNumber :: CalendarTimeConvertible a => StartOfWeek -> a -> Maybe Int

-- | The class of types which can be converted to a <a>CalendarTime</a>
class CalendarTimeConvertible t
toCalendarTime :: CalendarTimeConvertible t => t -> CalendarTime
fromCalendarTime :: CalendarTimeConvertible t => CalendarTime -> Maybe t

module Data.Time.Moment

module Data.Time.Recurrence.ScheduleDetails
data ScheduleDetails a
eval :: (CalendarTimeConvertible a, Ord a, Moment a) => ScheduleDetails b -> ([a] -> FutureMoments a)
enum :: PeriodFilter Month WeekDay NotEnumerable -> ScheduleDetails EnumerablePeriodFilter
filter :: PeriodFilter Month NotFilterable WeekDay -> ScheduleDetails FilterablePeriodFilter
select :: PeriodFilter Int Int Int -> ScheduleDetails SelectablePeriodFilter
data PeriodFilter m e f
Seconds :: [Int] -> PeriodFilter m e f
Minutes :: [Int] -> PeriodFilter m e f
Hours :: [Int] -> PeriodFilter m e f
Days :: [Int] -> PeriodFilter m e f
Weeks :: [Int] -> PeriodFilter m e f
WeekDays :: [f] -> PeriodFilter m e f
WeekDaysInWeek :: [e] -> PeriodFilter m e f
WeekDaysInMonth :: [e] -> PeriodFilter m e f
Months :: [m] -> PeriodFilter m e f
YearDays :: [Int] -> PeriodFilter m e f
newtype EnumerablePeriodFilter
EPF :: PeriodFilter Month WeekDay NotEnumerable -> EnumerablePeriodFilter
fromEPF :: EnumerablePeriodFilter -> PeriodFilter Month WeekDay NotEnumerable
newtype FilterablePeriodFilter
FPF :: PeriodFilter Month NotFilterable WeekDay -> FilterablePeriodFilter
fromFPF :: FilterablePeriodFilter -> PeriodFilter Month NotFilterable WeekDay
newtype SelectablePeriodFilter
SPF :: PeriodFilter Int Int Int -> SelectablePeriodFilter
fromSPF :: SelectablePeriodFilter -> PeriodFilter Int Int Int
instance Show (ScheduleDetails a)
instance (Read m, Read e, Read f) => Read (PeriodFilter m e f)
instance (Show m, Show e, Show f) => Show (PeriodFilter m e f)
instance Read EnumerablePeriodFilter
instance Show EnumerablePeriodFilter
instance Read FilterablePeriodFilter
instance Show FilterablePeriodFilter
instance Read SelectablePeriodFilter
instance Show SelectablePeriodFilter
instance Read NotFilterable
instance Show NotFilterable
instance Read NotEnumerable
instance Show NotEnumerable
instance AndThen WrapEPF WrapSPF WrapSPF
instance AndThen WrapFPF WrapSPF WrapSPF
instance AndThen WrapEPF WrapFPF WrapFPF
instance AndThen WrapSPF WrapSPF WrapSPF
instance AndThen BareSPF WrapSPF WrapSPF
instance AndThen BareSPF BareSPF WrapSPF
instance AndThen WrapFPF WrapFPF WrapFPF
instance AndThen BareFPF WrapFPF WrapFPF
instance AndThen BareFPF BareFPF WrapFPF
instance AndThen WrapEPF WrapEPF WrapEPF
instance AndThen BareEPF WrapEPF WrapEPF
instance AndThen BareEPF BareEPF WrapEPF

module Data.Time.Recurrence.Schedule
data Schedule a
Recur :: Freq -> Schedule Freq
And :: Schedule Freq -> ScheduleDetails b -> Schedule (ScheduleDetails b)
data Freq
recur :: Freq -> Schedule Freq

-- | Typically called infix on an existing <a>Freq</a>, like:
--   
--   <pre>
--   monthly `by` 2
--   </pre>
by :: Freq -> Integer -> Freq

-- | Typically called infix on an existing <a>Freq</a>, like:
--   
--   <pre>
--   weekly `withStartOfWeek` Tuesday
--   </pre>
withStartOfWeek :: Freq -> WeekDay -> Freq
secondly :: Freq
minutely :: Freq
hourly :: Freq
daily :: Freq
weekly :: Freq
monthly :: Freq
yearly :: Freq
eval :: (CalendarTimeConvertible a, Ord a, Moment a) => Schedule b -> (a -> [a])
starting :: (CalendarTimeConvertible a, Ord a, Moment a) => a -> Schedule b -> [a]
instance Show (Schedule a)
instance Show Freq
instance AndThen (Schedule Freq) (ScheduleDetails b) (Schedule (ScheduleDetails b))

module Data.Time.Recurrence

-- | A representation of calendar time separated into year, month, day, and
--   so on.
data CalendarTime
CalendarTime :: Int -> Int -> Int -> Int -> Month -> Integer -> WeekDay -> Int -> TimeZone -> CalendarTime
calendarSecond :: CalendarTime -> Int
calendarMinute :: CalendarTime -> Int
calendarHour :: CalendarTime -> Int
calendarDay :: CalendarTime -> Int
calendarMonth :: CalendarTime -> Month
calendarYear :: CalendarTime -> Integer
calendarWeekDay :: CalendarTime -> WeekDay
calendarYearDay :: CalendarTime -> Int
calendarTimeZone :: CalendarTime -> TimeZone

-- | The <tt>Moment</tt> class is for representing a instance in time.
--   
--   Instances of <tt>Moment</tt> can be derived for any user-defined
--   datatype for which can satisfy the minimal complete definition.
--   
--   Minimal complete definition: <a>epoch</a>, <a>addSeconds</a>,
--   <a>addMonths</a>, <a>addYears</a>
class Moment a where addMinutes a = addSeconds a . (* oneMinute) addHours a = addSeconds a . (* oneHour) addDays a = addSeconds a . (* oneDay) addWeeks a = addSeconds a . (* oneWeek) next (Interval interval) freq = case freq of { Seconds -> add oneSecond Minutes -> add oneMinute Hours -> add oneHour Days -> add oneDay Weeks -> add oneWeek Months -> flip addMonths interval Years -> flip addYears interval } where add x = flip addSeconds (interval * x) prev (Interval interval) = next $ Interval (- interval)
