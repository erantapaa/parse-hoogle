-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A state monad that runs the state in reverse through the computation
--   
--   A state monad that runs the state in reverse through the computation
@package backward-state
@version 0.1.0.2


-- | Backward state monad and transformer, in which <tt>m &gt;&gt; n</tt>
--   passes the incoming state to n, then passes <tt>n</tt>'s resulting
--   state to <tt>m</tt>. This can only work lazily.
module Control.Monad.Trans.BackwardState
type BackwardState s = BackwardStateT s Identity
runBackwardState :: BackwardState s a -> s -> (a, s)
evalBackwardState :: BackwardState s a -> s -> a
execBackwardState :: BackwardState s a -> s -> s
newtype BackwardStateT s m a
BackwardStateT :: (s -> m (a, s)) -> BackwardStateT s m a
runBackwardStateT :: BackwardStateT s m a -> s -> m (a, s)
evalBackwardStateT :: Functor m => BackwardStateT s m a -> s -> m a
execBackwardStateT :: Functor m => BackwardStateT s m a -> s -> m s
get :: Monad m => BackwardStateT s m s
put :: Monad m => s -> BackwardStateT s m ()
modify :: Monad m => (s -> s) -> BackwardStateT s m ()
instance (MonadFix m, MonadIO m) => MonadIO (BackwardStateT s m)
instance MonadFix m => MonadFix (BackwardStateT s m)
instance (MonadFix m, MonadPlus m) => MonadPlus (BackwardStateT s m)
instance MonadTrans (BackwardStateT s)
instance MonadFix m => Monad (BackwardStateT s m)
instance (Functor m, MonadFix m, MonadPlus m) => Alternative (BackwardStateT s m)
instance (Functor m, MonadFix m) => Applicative (BackwardStateT s m)
instance Functor m => Functor (BackwardStateT s m)
