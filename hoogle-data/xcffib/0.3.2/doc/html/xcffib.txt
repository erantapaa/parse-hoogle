-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A cffi-based python binding for X
--   
@package xcffib
@version 0.3.2

module Data.XCB.Python.PyHelpers
mkImport :: String -> Statement ()
mkRelImport :: String -> Statement ()
mkInt :: Int -> Expr ()
mkAssign :: PseudoExpr a => a -> Expr () -> Statement ()
mkCall :: (PseudoExpr a, PseudoArgument b) => a -> [b] -> Expr ()
noArgs :: [Argument ()]
mkEnum :: String -> [(String, Expr ())] -> Statement ()

-- | Make an Expr out of a string like "foo.bar" describing the name.
mkName :: String -> Expr ()
mkDot :: PseudoExpr a => a -> String -> Expr ()

-- | Make an attribute access, i.e. self.<a>string</a>.
mkAttr :: String -> Expr ()
mkIncr :: String -> Expr () -> Statement ()
mkClass :: String -> String -> Suite () -> Statement ()
mkEmptyClass :: String -> String -> Statement ()
mkXClass :: String -> String -> Suite () -> Suite () -> Statement ()
mkStr :: String -> Expr ()
mkUnpackFrom :: PseudoExpr a => a -> [String] -> String -> Suite ()
mkDict :: String -> Statement ()
mkDictUpdate :: String -> Int -> String -> Statement ()
mkMethod :: String -> [Parameter ()] -> Suite () -> Statement ()
mkReturn :: Expr () -> Statement ()
pyTruth :: Bool -> Expr ()
mkParams :: [String] -> [Parameter ()]

-- | Create and sanatize a python identifier.
ident :: String -> Ident ()
pyNone :: Expr ()
mkIf :: Expr () -> Suite () -> Statement ()
repeatStr :: String -> Expr () -> Expr ()
instance PseudoArgument (Argument ())
instance PseudoArgument (Expr ())
instance PseudoExpr (Expr ())
instance PseudoExpr String

module Data.XCB.Python.Parse
parseXHeaders :: FilePath -> IO [XHeader]

-- | Generate the code for a set of X headers. Note that the code is
--   generated in dependency order, NOT in the order you pass them in.
--   Thus, you get a string (a suggested filename) along with the python
--   code for that XHeader back.
xform :: [XHeader] -> [(String, Suite ())]
renderPy :: Suite () -> String

-- | Clone of python's struct.calcsize.
calcsize :: String -> Int
instance Eq TypeInfo
instance Ord TypeInfo
instance Show TypeInfo
instance Show BindingPart
