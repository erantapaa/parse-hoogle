-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for the analysis and creation of Graphviz DOT files
--   
--   A library for the analysis and creation of Graphviz DOT files.
@package language-dot
@version 0.0.8


-- | DOT AST. See <a>http://www.graphviz.org/doc/info/lang.html</a>.
module Language.Dot.Syntax
data Graph
Graph :: GraphStrictness -> GraphDirectedness -> (Maybe Id) -> [Statement] -> Graph
data GraphStrictness
StrictGraph :: GraphStrictness
UnstrictGraph :: GraphStrictness
data GraphDirectedness
DirectedGraph :: GraphDirectedness
UndirectedGraph :: GraphDirectedness
data Id
NameId :: String -> Id
StringId :: String -> Id
IntegerId :: Integer -> Id
FloatId :: Float -> Id
XmlId :: Xml -> Id
data Statement
NodeStatement :: NodeId -> [Attribute] -> Statement
EdgeStatement :: [Entity] -> [Attribute] -> Statement
AttributeStatement :: AttributeStatementType -> [Attribute] -> Statement
AssignmentStatement :: Id -> Id -> Statement
SubgraphStatement :: Subgraph -> Statement
data AttributeStatementType
GraphAttributeStatement :: AttributeStatementType
NodeAttributeStatement :: AttributeStatementType
EdgeAttributeStatement :: AttributeStatementType
data Attribute
AttributeSetTrue :: Id -> Attribute
AttributeSetValue :: Id -> Id -> Attribute
data NodeId
NodeId :: Id -> (Maybe Port) -> NodeId
data Port
PortI :: Id -> (Maybe Compass) -> Port
PortC :: Compass -> Port
data Compass
CompassN :: Compass
CompassE :: Compass
CompassS :: Compass
CompassW :: Compass
CompassNE :: Compass
CompassNW :: Compass
CompassSE :: Compass
CompassSW :: Compass
data Subgraph
NewSubgraph :: (Maybe Id) -> [Statement] -> Subgraph
SubgraphRef :: Id -> Subgraph
data Entity
ENodeId :: EdgeType -> NodeId -> Entity
ESubgraph :: EdgeType -> Subgraph -> Entity
data EdgeType
NoEdge :: EdgeType
DirectedEdge :: EdgeType
UndirectedEdge :: EdgeType
data Xml
XmlEmptyTag :: XmlName -> [XmlAttribute] -> Xml
XmlTag :: XmlName -> [XmlAttribute] -> [Xml] -> Xml
XmlText :: String -> Xml
data XmlName
XmlName :: String -> XmlName
data XmlAttribute
XmlAttribute :: XmlName -> XmlAttributeValue -> XmlAttribute
data XmlAttributeValue
XmlAttributeValue :: String -> XmlAttributeValue
instance Eq GraphStrictness
instance Show GraphStrictness
instance Eq GraphDirectedness
instance Show GraphDirectedness
instance Eq AttributeStatementType
instance Show AttributeStatementType
instance Eq Compass
instance Show Compass
instance Eq EdgeType
instance Show EdgeType
instance Eq XmlName
instance Show XmlName
instance Eq XmlAttributeValue
instance Show XmlAttributeValue
instance Eq XmlAttribute
instance Show XmlAttribute
instance Eq Xml
instance Show Xml
instance Eq Id
instance Show Id
instance Eq Port
instance Show Port
instance Eq NodeId
instance Show NodeId
instance Eq Attribute
instance Show Attribute
instance Eq Statement
instance Show Statement
instance Eq Entity
instance Show Entity
instance Eq Subgraph
instance Show Subgraph
instance Eq Graph
instance Show Graph

module Language.Dot.Pretty
prettyPrintDot :: Graph -> Doc
renderDot :: Graph -> String
class PP a
pp :: PP a => a -> Doc
instance PP XmlAttributeValue
instance PP XmlAttribute
instance PP XmlName
instance PP Xml
instance PP EdgeType
instance PP Entity
instance PP Subgraph
instance PP Compass
instance PP Port
instance PP NodeId
instance PP Attribute
instance PP AttributeStatementType
instance PP Statement
instance PP Id
instance PP GraphDirectedness
instance PP GraphStrictness
instance PP Graph
instance PP a => PP (Maybe a)

module Language.Dot.Parser
parseDot :: String -> String -> Either ParseError Graph

module Language.Dot
