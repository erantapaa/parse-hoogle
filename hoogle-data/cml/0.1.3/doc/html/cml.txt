-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Events and Channels as in Concurrent ML
--   
--   Implementation of Events and Channels as in CML (extended with
--   communication guards). See <i>A Concurrent ML Library in Concurrent
--   Haskell</i> by Avik Chaudhuri (avik@cs.umd.edu) for details. The
--   original code as well as the papers can be found at
--   <a>http://www.cs.umd.edu/~avik/projects/cmllch/</a>.
@package cml
@version 0.1.3


-- | Events and Channels as in Concurrent ML (extended with communication
--   guards)
--   
--   See <i>A Concurrent ML Library in Concurrent Haskell</i> by Avik
--   Chaudhuri (avik@cs.ucsc.edu). The original code as well as the papers
--   can be found at <a>http://www.cs.umd.edu/~avik/projects/cmllch/</a>.
module Control.Concurrent.CML

-- | Values of type <tt>a</tt> can be transported over channels of type
--   <tt>Channel a</tt>.
data Channel a

-- | Create a new channel.
channel :: IO (Channel a)

-- | Receive a message from a channel.
--   
--   More precisely, <tt>receive c cond</tt> returns an event that, on
--   synchronization, accepts a message <tt>m</tt> on channel <tt>c</tt>
--   and returns <tt>m</tt>. The resulting event is eligible for
--   synchronization with a <tt>transmit c m</tt> only if <tt>cond m</tt>
--   is true.
receive :: Channel a -> (a -> Bool) -> Event a

-- | Transmit a message over a channel.
--   
--   More precisely, <tt>transmit c m</tt> returns an event that, on
--   synchronization, sends the message <tt>m</tt> on channel <tt>c</tt>
--   and returns <tt>()</tt>. Such an event must synchronize with
--   <tt>receive c</tt>.
transmit :: Channel a -> a -> Event ()

-- | Events return a value on synchronization.
--   
--   Note that by construction, an event can synchronize at exactly one
--   <i>commit point</i>, where a message is either sent or accepted on a
--   channel. This commit point may be selected among several other,
--   potential commit points. Some code may be run before synchronization,
--   as specified by <a>guard</a> functions throughout the event. Some more
--   code may be run after synchronization, as specified by <a>wrap</a>
--   functions that surround the commit point, and by <a>wrapabort</a>
--   functions that do not surround the commit point.
data Event a

-- | Synchronize an event.
--   
--   This blocks the calling thread until a matching event is available.
sync :: Event a -> IO a

-- | Non-deterministically select an event from a list of events, so that
--   the selected event can be synchronized. The other events in the list
--   are <i>aborted</i>.
choose :: [Event a] -> Event a

-- | Specify a post-synchronization action.
--   
--   More precisely, <tt>wrap v f</tt> returns an event that, on
--   synchronization, synchronizes the event <tt>v</tt> and then runs the
--   action returned by <tt>f</tt> applied to the result.
wrap :: Event a -> (a -> IO b) -> Event b

-- | Specify a pre-synchronization action.
--   
--   More precisely, <tt>guard a</tt> returns an event that, on
--   synchronization, synchronizes the event returned by the action
--   <tt>a</tt>. Here, <tt>a</tt> is run every time a thread <i>tries</i>
--   to synchronize <tt>guard a</tt>.
guard :: IO (Event a) -> Event a

-- | Specify a post-synchronization action that is spawned if an event is
--   <i>not</i> selected by a <a>choose</a>.
--   
--   More precisely, <tt>wrapabort a v</tt> returns an event that, on
--   synchronization, synchronizes the event <tt>v</tt>, and on abortion,
--   spawns a thread that runs the action <tt>a</tt>. Here, if <tt>v</tt>
--   itself is of the form <tt>choose vs</tt> and one of the events in
--   <tt>vs</tt> is selected, then <tt>v</tt> is considered selected, so
--   <tt>a</tt> is not spawned.
wrapabort :: IO () -> Event a -> Event a

-- | A synonym for <a>forkIO</a>.
spawn :: IO () -> IO ThreadId
instance Eq (Channel a)
