-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Internationalization for Haskell
--   
--   Internationalization for Haskell
@package i18n
@version 0.3


-- | A slightly modified version of Text.Printf module. (with permission)
--   
--   This module is internal to Text.I18n.
module Text.I18n.Printf
printf :: PrintfType r => String -> r
hPrintf :: HPrintfType r => Handle -> String -> r
class PrintfType t
spr :: PrintfType t => String -> [UPrintf] -> t
class HPrintfType t
class PrintfArg a
class IsChar c
uprintf :: String -> [UPrintf] -> String
instance IsChar Char
instance PrintfArg Double
instance PrintfArg Float
instance PrintfArg Integer
instance PrintfArg Word64
instance PrintfArg Word32
instance PrintfArg Word16
instance PrintfArg Word8
instance PrintfArg Word
instance PrintfArg Int64
instance PrintfArg Int32
instance PrintfArg Int16
instance PrintfArg Int8
instance PrintfArg Int
instance IsChar c => PrintfArg [c]
instance PrintfArg Char
instance (PrintfArg a, HPrintfType r) => HPrintfType (a -> r)
instance (PrintfArg a, PrintfType r) => PrintfType (a -> r)
instance HPrintfType (IO a)
instance PrintfType (IO a)
instance IsChar c => PrintfType [c]


-- | Internationalization support for Haskell. Use Text.I18n.Po module.
--   
--   Plural forms are not yet implemented.
module Text.I18n
newtype Msgid
Msgid :: String -> Msgid
type Msgstr = String
newtype Locale
Locale :: String -> Locale
type Context = String

-- | The Internationalization monad built using monad transformers.
type I18n a = ReaderT (Locale, L10n, Maybe Context) Identity a

-- | The Localization structure.
type L10n = Map Locale (Map (Maybe Context) (Map Msgid [Msgstr]))

-- | The heart of I18n monad. Based on <tt>Text.Printf.printf</tt>.
--   
--   <pre>
--   example :: String -&gt; I18n String
--   example name = do
--       hello &lt;- gettext "Hello, %s!"
--       return (hello name)
--   </pre>
gettext :: PrintfType a => String -> I18n a

-- | The top level localization function.
--   
--   <pre>
--   import Text.I18n.Po
--   import Prelude hiding (putStr,putStrLn)
--   
--   main = do
--       (l10n,errors) &lt;- getL10n "dir/to/po" -- directory containing PO files
--       putStrLn $ localize l10n (Locale "en") (example "Joe")
--   </pre>
localize :: L10n -> Locale -> I18n a -> a

-- | Sets a local <a>Context</a> for an internationalized expression. If
--   there is no translation, then no context version is tried.
--   
--   <pre>
--   example2 :: String -&gt; I18n String
--   example2 = withContext (Just "test") . example
--   </pre>
withContext :: Maybe Context -> I18n a -> I18n a

-- | Sets a local <a>Locale</a> for an internationalized expression.
--   
--   <pre>
--   example3 :: String -&gt; I18n String
--   example3 = withLocale (Locale "ru") . example2
--   </pre>
withLocale :: Locale -> I18n a -> I18n a
instance Show Locale
instance Eq Locale
instance Ord Locale
instance Show Msgid
instance Eq Msgid
instance Ord Msgid
instance PrintfType (I18n String)


-- | Internationalization support for Haskell. This module contains PO
--   parser. PO files are assumed to be in UTF-8 encoding.
--   
--   Plural forms are not yet implemented.
--   
--   modules Text.I18n, Control.Monad.Trans, and function putStrLn and
--   putStr from System.IO.UTF8 are exported for convenience.
--   
--   <pre>
--   import Prelude hiding (putStr,putStrLn)
--   </pre>
module Text.I18n.Po
newtype Msgid
Msgid :: String -> Msgid
type Msgstr = String
newtype Locale
Locale :: String -> Locale
type Context = String

-- | The Internationalization monad built using monad transformers.
type I18n a = ReaderT (Locale, L10n, Maybe Context) Identity a

-- | The Localization structure.
type L10n = Map Locale (Map (Maybe Context) (Map Msgid [Msgstr]))

-- | Builds <a>L10n</a> structure by parsing <i> .po </i> files contained
--   in a given directory. <a>L10n</a> structure is to be passed to
--   <a>localize</a> function. <a>L10n</a> structure is used internaly by
--   the <a>I18n</a> monad.
getL10n :: FilePath -> IO (L10n, [ParseError])

-- | The top level localization function.
--   
--   <pre>
--   import Text.I18n.Po
--   import Prelude hiding (putStr,putStrLn)
--   
--   main = do
--       (l10n,errors) &lt;- getL10n "dir/to/po" -- directory containing PO files
--       putStrLn $ localize l10n (Locale "en") (example "Joe")
--   </pre>
localize :: L10n -> Locale -> I18n a -> a

-- | The heart of I18n monad. Based on <tt>Text.Printf.printf</tt>.
--   
--   <pre>
--   example :: String -&gt; I18n String
--   example name = do
--       hello &lt;- gettext "Hello, %s!"
--       return (hello name)
--   </pre>
gettext :: PrintfType a => String -> I18n a

-- | Sets a local <a>Context</a> for an internationalized expression. If
--   there is no translation, then no context version is tried.
--   
--   <pre>
--   example2 :: String -&gt; I18n String
--   example2 = withContext (Just "test") . example
--   </pre>
withContext :: Maybe Context -> I18n a -> I18n a

-- | Sets a local <a>Locale</a> for an internationalized expression.
--   
--   <pre>
--   example3 :: String -&gt; I18n String
--   example3 = withLocale (Locale "ru") . example2
--   </pre>
withLocale :: Locale -> I18n a -> I18n a

-- | The same as <a>putStr</a>, but adds a newline character.
putStrLn :: String -> IO ()

-- | Write a UTF8 string to the standard output device
putStr :: String -> IO ()
