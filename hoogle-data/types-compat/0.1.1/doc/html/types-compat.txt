-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | ghc-7.6/7.8 compatible GHC.TypeLits, Data.Typeable and Data.Proxy.
--   
@package types-compat
@version 0.1.1

module Data.Proxy.Compat

-- | A concrete, poly-kinded proxy type
data Proxy (t :: k) :: k -> *
Proxy :: Proxy

-- | <a>asProxyTypeOf</a> is a type-restricted version of <a>const</a>. It
--   is usually used as an infix operator, and its typing forces its first
--   argument (which is usually overloaded) to have the same type as the
--   tag of the second.
asProxyTypeOf :: a -> Proxy * a -> a

module Data.Typeable.Compat

-- | The class <a>Typeable</a> allows a concrete representation of a type
--   to be calculated.
class Typeable (a :: k)
typeOf :: Typeable * a => a -> TypeRep

-- | The type-safe cast operation
cast :: (Typeable * a, Typeable * b) => a -> Maybe b

-- | A flexible variation parameterised in a type constructor
gcast :: (Typeable k a, Typeable k b) => c a -> Maybe (c b)

-- | A concrete representation of a (monomorphic) type. <a>TypeRep</a>
--   supports reasonably efficient equality.
data TypeRep :: *
showsTypeRep :: TypeRep -> ShowS

-- | An abstract representation of a type constructor. <a>TyCon</a> objects
--   can be built using <a>mkTyCon</a>.
data TyCon :: *

-- | Observe string encoding of a type representation
tyConString :: TyCon -> String

-- | <i>Since: 4.5.0.0</i>
tyConPackage :: TyCon -> String

-- | <i>Since: 4.5.0.0</i>
tyConModule :: TyCon -> String

-- | <i>Since: 4.5.0.0</i>
tyConName :: TyCon -> String

-- | Builds a <a>TyCon</a> object representing a type constructor. An
--   implementation of <a>Data.Typeable</a> should ensure that the
--   following holds:
--   
--   <pre>
--   A==A' ^ B==B' ^ C==C' ==&gt; mkTyCon A B C == mkTyCon A' B' C'
--   </pre>
mkTyCon3 :: String -> String -> String -> TyCon

-- | Applies a type constructor to a sequence of types
mkTyConApp :: TyCon -> [TypeRep] -> TypeRep

-- | Adds a TypeRep argument to a TypeRep.
mkAppTy :: TypeRep -> TypeRep -> TypeRep

-- | A special case of <a>mkTyConApp</a>, which applies the function type
--   constructor to a pair of types.
mkFunTy :: TypeRep -> TypeRep -> TypeRep

-- | Splits a type constructor application
splitTyConApp :: TypeRep -> (TyCon, [TypeRep])

-- | Applies a type to a function type. Returns: <tt><a>Just</a> u</tt> if
--   the first argument represents a function of type <tt>t -&gt; u</tt>
--   and the second argument represents a function of type <tt>t</tt>.
--   Otherwise, returns <a>Nothing</a>.
funResultTy :: TypeRep -> TypeRep -> Maybe TypeRep

-- | Observe the type constructor of a type representation
typeRepTyCon :: TypeRep -> TyCon

-- | Observe the argument types of a type representation
typeRepArgs :: TypeRep -> [TypeRep]

-- | Takes a value of type <tt>a</tt> and returns a concrete representation
--   of that type.
--   
--   <i>Since: 4.7.0.0</i>
typeRep :: Typeable k a => proxy a -> TypeRep

-- | A concrete, poly-kinded proxy type
data Proxy (t :: k) :: k -> *
Proxy :: Proxy


-- | this module exports:
--   
--   Kinds:
--   
--   <pre>
--   Nat
--   Symbol
--   </pre>
--   
--   Classes:
--   
--   <pre>
--   KnownNat n
--   KnownSymbol n
--   </pre>
--   
--   Values:
--   
--   <pre>
--   natVal :: forall n proxy. KnownNat n =&gt; proxy n -&gt; Integer
--   symbolVal :: forall n proxy. KnownSymbol n =&gt; proxy n -&gt; String
--   </pre>
--   
--   types
--   
--   <pre>
--   type (&lt;=) x y = (x &lt;=? y) ~ True
--   
--   type family m &lt;=? n :: Bool
--   type family m + n :: Nat
--   type family m * n :: Nat
--   type family m * n :: Nat
--   </pre>
module GHC.TypeLits.Compat
