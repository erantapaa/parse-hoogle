-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library to authenticate with OAuth for Haskell web applications.
--   
@package authenticate-oauth
@version 1.5.1.1

module Web.Authenticate.OAuth

-- | Data type for OAuth client (consumer).
--   
--   The constructor for this data type is not exposed. Instead, you should
--   use the <a>def</a> method or <a>newOAuth</a> function to retrieve a
--   default instance, and then use the records below to make
--   modifications. This approach allows us to add configuration options
--   without breaking backwards compatibility.
data OAuth

-- | The default value for this type.
def :: Default a => a

-- | Default value for OAuth datatype. You must specify at least
--   oauthServerName, URIs and Tokens.
newOAuth :: OAuth

-- | Service name (default: <tt>""</tt>)
oauthServerName :: OAuth -> String

-- | URI to request temporary credential (default: <tt>""</tt>). You MUST
--   specify if you use <a>getTemporaryCredential'</a>,
--   <a>getTemporaryCredentialProxy</a> or <a>getTemporaryCredential</a>;
--   otherwise you can just leave this empty.
oauthRequestUri :: OAuth -> String

-- | Uri to obtain access token (default: <tt>""</tt>). You MUST specify if
--   you use <tt>getAcessToken</tt> or <a>getAccessToken'</a> or
--   <a>getAccessTokenWith</a>; otherwise you can just leave this empty.
oauthAccessTokenUri :: OAuth -> String

-- | Uri to authorize (default: <tt>""</tt>). You MUST specify if you use
--   <a>authorizeUrl</a> or <tt>authorizeZUrl'</tt>; otherwise you can just
--   leave this empty.
oauthAuthorizeUri :: OAuth -> String

-- | Signature Method (default: <a>HMACSHA1</a>)
oauthSignatureMethod :: OAuth -> SignMethod

-- | Consumer key (You MUST specify)
oauthConsumerKey :: OAuth -> ByteString

-- | Consumer Secret (You MUST specify)
oauthConsumerSecret :: OAuth -> ByteString

-- | Callback uri to redirect after authentication (default:
--   <tt>Nothing</tt>)
oauthCallback :: OAuth -> Maybe ByteString

-- | Optional authorization realm (default: <tt>Nothing</tt>)
oauthRealm :: OAuth -> Maybe ByteString

-- | OAuth spec version (default: <a>OAuth10a</a>)
oauthVersion :: OAuth -> OAuthVersion
data OAuthVersion

-- | OAuth protocol ver 1.0 (no oauth_verifier; differs from RFC 5849).
OAuth10 :: OAuthVersion

-- | OAuth protocol ver 1.0a. This corresponds to community's 1.0a spec and
--   RFC 5849.
OAuth10a :: OAuthVersion

-- | Data type for signature method.
data SignMethod
PLAINTEXT :: SignMethod
HMACSHA1 :: SignMethod
RSASHA1 :: PrivateKey -> SignMethod

-- | Data type for redential.
data Credential
Credential :: [(ByteString, ByteString)] -> Credential
unCredential :: Credential -> [(ByteString, ByteString)]
data OAuthException
OAuthException :: String -> OAuthException

-- | Data type for getAccessTokenWith method.
--   
--   You can create values of this type using
--   <a>defaultAccessTokenRequest</a>.
--   
--   Since 1.5.1
data AccessTokenRequest

-- | Create a value of type <a>AccessTokenRequest</a> with default values
--   filled in.
--   
--   Note that this is a settings type. More information on usage can be
--   found at: <a>http://www.yesodweb.com/book/settings-types</a>.
--   
--   Since 1.5.1
defaultAccessTokenRequest :: OAuth -> Credential -> Manager -> AccessTokenRequest

-- | add auth hook.
--   
--   Default: addAuthHeader
--   
--   Since 1.5.1
accessTokenAddAuth :: AccessTokenRequest -> (ByteString -> Credential -> Request -> Request)

-- | Request Hook.
--   
--   Default: <tt>id</tt>
--   
--   Since 1.5.1
accessTokenRequestHook :: AccessTokenRequest -> (Request -> Request)

-- | OAuth Application
--   
--   Since 1.5.1
accessTokenOAuth :: AccessTokenRequest -> OAuth

-- | Temporary Credential (with oauth_verifier if &gt;= 1.0a)
--   
--   Since 1.5.1
accessTokenTemporaryCredential :: AccessTokenRequest -> Credential

-- | Manager
--   
--   Since 1.5.1
accessTokenManager :: AccessTokenRequest -> Manager

-- | Convenient function to create <a>Credential</a> with OAuth Token and
--   Token Secret.
newCredential :: ByteString -> ByteString -> Credential

-- | Empty credential.
emptyCredential :: Credential

-- | Insert an oauth parameter into given <a>Credential</a>.
insert :: ByteString -> ByteString -> Credential -> Credential

-- | Remove an oauth parameter for key from given <a>Credential</a>.
delete :: ByteString -> Credential -> Credential

-- | Convenient method for inserting multiple parameters into credential.
inserts :: [(ByteString, ByteString)] -> Credential -> Credential

-- | Insert <tt>oauth-verifier</tt> on a <a>Credential</a>.
injectVerifier :: ByteString -> Credential -> Credential

-- | Add OAuth headers &amp; sign to <a>Request</a>.
signOAuth :: MonadIO m => OAuth -> Credential -> Request -> m Request

-- | Generate OAuth signature. Used by <a>signOAuth</a>.
genSign :: MonadIO m => OAuth -> Credential -> Request -> m ByteString

-- | Get temporary credential for requesting acces token.
getTemporaryCredential :: MonadIO m => OAuth -> Manager -> m Credential

-- | Get temporary credential for requesting access token with Scope
--   parameter.
getTemporaryCredentialWithScope :: MonadIO m => ByteString -> OAuth -> Manager -> m Credential

-- | Get temporary credential for requesting access token via the proxy.
getTemporaryCredentialProxy :: MonadIO m => Maybe Proxy -> OAuth -> Manager -> m Credential
getTemporaryCredential' :: MonadIO m => (Request -> Request) -> OAuth -> Manager -> m Credential

-- | URL to obtain OAuth verifier.
authorizeUrl :: OAuth -> Credential -> String

-- | Convert OAuth and Credential to URL to authorize. This takes function
--   to choice parameter to pass to the server other than
--   <i>oauth_callback</i> or <i>oauth_token</i>.
authorizeUrl' :: (OAuth -> Credential -> SimpleQuery) -> OAuth -> Credential -> String

-- | Place the authentication information in a URL encoded body instead of
--   the Authorization header.
--   
--   Note that the first parameter is used for realm in addAuthHeader, and
--   this function needs the same type. The parameter, however, is unused.
--   
--   Since 1.5.1
addAuthBody :: a -> Credential -> Request -> Request

-- | Get Access token.
getAccessToken :: MonadIO m => OAuth -> Credential -> Manager -> m Credential

-- | Get Access token via the proxy.
getAccessTokenProxy :: MonadIO m => Maybe Proxy -> OAuth -> Credential -> Manager -> m Credential

-- | Get Access token.
getTokenCredential :: MonadIO m => OAuth -> Credential -> Manager -> m Credential

-- | Get Access token via the proxy.
getTokenCredentialProxy :: MonadIO m => Maybe Proxy -> OAuth -> Credential -> Manager -> m Credential
getAccessToken' :: MonadIO m => (Request -> Request) -> OAuth -> Credential -> Manager -> m Credential
getAccessTokenWith :: MonadIO m => AccessTokenRequest -> m (Either (Response ByteString) Credential)

-- | Encode a string using the percent encoding method for OAuth.
paramEncode :: ByteString -> ByteString
addScope :: ByteString -> Request -> Request
addMaybeProxy :: Maybe Proxy -> Request -> Request
instance Typeable OAuthVersion
instance Typeable SignMethod
instance Typeable OAuth
instance Typeable OAuthException
instance Typeable Credential
instance Show OAuthVersion
instance Eq OAuthVersion
instance Enum OAuthVersion
instance Ord OAuthVersion
instance Data OAuthVersion
instance Read OAuthVersion
instance Show SignMethod
instance Eq SignMethod
instance Read SignMethod
instance Data SignMethod
instance Show OAuth
instance Eq OAuth
instance Read OAuth
instance Data OAuth
instance Show OAuthException
instance Eq OAuthException
instance Data OAuthException
instance Show Credential
instance Eq Credential
instance Ord Credential
instance Read Credential
instance Data Credential
instance Exception OAuthException
instance Default OAuth


-- | This Module provides interface for the instance of <a>MonadIO</a>
--   instead of <a>MonadIO</a>. What this module do is just adding
--   <a>withManager</a> or <tt>runResourceT</tt>.

-- | <i>Deprecated: This module is deprecated; rewrite your code using
--   MonadResource</i>
module Web.Authenticate.OAuth.IO

-- | Get Access token.
getAccessToken :: MonadIO m => OAuth -> Credential -> m Credential

-- | Get temporary credential for requesting acces token.
getTemporaryCredential :: MonadIO m => OAuth -> m Credential

-- | Get temporary credential for requesting access token with Scope
--   parameter.
getTemporaryCredentialWithScope :: MonadIO m => ByteString -> OAuth -> m Credential

-- | Get temporary credential for requesting access token via the proxy.
getTemporaryCredentialProxy :: MonadIO m => Maybe Proxy -> OAuth -> m Credential
getTemporaryCredential' :: MonadIO m => (Request -> Request) -> OAuth -> m Credential

-- | Get Access token.
getTokenCredential :: MonadIO m => OAuth -> Credential -> m Credential

-- | Get Access token via the proxy.
getAccessTokenProxy :: MonadIO m => Maybe Proxy -> OAuth -> Credential -> m Credential

-- | Get Access token via the proxy.
getTokenCredentialProxy :: MonadIO m => Maybe Proxy -> OAuth -> Credential -> m Credential
getAccessToken' :: MonadIO m => (Request -> Request) -> OAuth -> Credential -> m Credential
