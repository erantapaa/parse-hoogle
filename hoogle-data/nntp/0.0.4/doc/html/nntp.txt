-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library to connect to an NNTP Server
--   
--   This library allows to connect to NNTP server.
@package nntp
@version 0.0.4


-- | This module contains definition of Group
module Network.NNTP.Internal.Group

-- | Represents a single group.
data Group
Group :: String -> Integer -> Integer -> Group

-- | Returns the group name.
groupName :: Group -> String

-- | Returns the number of first article avaible.
groupArticleFirst :: Group -> Integer

-- | Returns the number of last article avaible.
groupArticleLast :: Group -> Integer
instance Eq Group
instance Show Group


-- | This module contains definition of article
module Network.NNTP.Internal.Article

-- | Represents a single article. Please note that except the splitting
--   into header and body no parsing is done.
data Article
Article :: String -> Maybe ByteString -> Maybe ByteString -> Article

-- | Returns the article ID
articleID :: Article -> String

-- | Returns the article header. <tt>Data.Maybe.Nothing</tt> indicates not
--   fetched header.
articleHeader :: Article -> Maybe ByteString

-- | Returns the article body. <tt>Data.Maybe.Nothing</tt> indicates not
--   fetched body.
articleBody :: Article -> Maybe ByteString
instance Eq Article
instance Show Article


-- | This module contains internalities of NNTP library
module Network.NNTP.Internal

-- | NntpT represents a connection. Since some servers have short timeouts
--   it is recommended to keep the connections short.
newtype NntpT m a
NntpT :: (NntpState m -> m (NntpState m, Either NntpError a)) -> NntpT m a
runNntpT :: NntpT m a -> NntpState m -> m (NntpState m, Either NntpError a)

-- | NntpState represents a state at given moment. Please note that this
--   type is not a part of stable API (when we will have one).
data NntpState m
NntpState :: NntpConnection m -> NntpState m
connection :: NntpState m -> NntpConnection m

-- | NntpConnection represents a connection in a NntpT monad.
--   
--   Please note that for <tt>runNntpWithConnection</tt> you need to supply
--   both <a>input</a> and <a>output</a> functions.
data NntpConnection m
NntpConnection :: ByteString -> (ByteString -> m ()) -> NntpConnection m

-- | Input is an stream which is from a server.
input :: NntpConnection m -> ByteString

-- | Output is a function which sends the data to a server.
output :: NntpConnection m -> ByteString -> m ()

-- | Indicates an error of handling NNTP connection. Please note that this
--   should indicate client errors only (with the exception of
--   <a>ServiceDiscontinued</a>, in some cases <a>PostingFailed</a> and
--   <a>NoSuchCommand</a>. The last one if propagated outside NNTP module
--   indicates a bug in library or server.).
data NntpError

-- | Indicates that operation was performed on group that does not exists.
NoSuchGroup :: NntpError

-- | Indicates that operation was performed on article that does not
--   exists.
NoSuchArticle :: NntpError

-- | Indicates that posting operation failed for some reason.
PostingFailed :: NntpError

-- | Indicates that posting is not allowed.
PostingNotAllowed :: NntpError

-- | Indicates that service was discontinued.
ServiceDiscontinued :: NntpError

-- | Indicates that command does not exists.
NoSuchCommand :: NntpError
type NntpParser m a = ParsecT ByteString () (NntpT m) a

-- | Transforms <a>NntpParser</a> into <a>NntpT</a> monad taking care about
--   input position
runNntpParser :: Monad m => NntpParser m a -> NntpT m a

-- | Puts an argument to output.
nntpPutStr :: Monad m => ByteString -> NntpT m ()

-- | Puts an argument to output followed by end-of-line.
nntpPutStrLn :: Monad m => ByteString -> NntpT m ()

-- | Sends a command.
nntpSendCommand :: Monad m => String -> ByteString -> [(Int, NntpParser m a)] -> NntpT m a

-- | Sends text
nntpSendText :: Monad m => ByteString -> [(Int, NntpParser m a)] -> NntpT m a

-- | Sends a command.
nntpPSendCommand :: Monad m => String -> ByteString -> [(Int, NntpParser m a)] -> NntpParser m a

-- | Sends text
nntpPSendText :: Monad m => ByteString -> [(Int, NntpParser m a)] -> NntpParser m a

-- | Try commands one by one to check for existing command.
tryCommands :: Monad m => [NntpT m a] -> NntpT m a

-- | Converts into postable form.
postize :: ByteString -> ByteString

-- | Converts from postable form
depostize :: ByteString -> ByteString
instance Eq NntpError
instance Show NntpError
instance Read NntpError
instance MonadTrans NntpT
instance Monad m => Monad (NntpT m)
instance (Functor m, Monad m) => Applicative (NntpT m)
instance Functor m => Functor (NntpT m)


-- | This module contains the parser helpers
module Network.NNTP.ParserHelpers

-- | Parsers 3-digit response code. In some cases it may throw errors such
--   as <a>ServiceDiscontinued</a> and <a>NoSuchCommand</a>. It skip to the
--   end of line automatically in sych case.
code :: Monad m => NntpParser m Int

-- | Parses an integer.
integer :: Monad m => NntpParser m Integer

-- | Parses an article ID.
iD :: Monad m => NntpParser m String

-- | Parses an group name.
groupName :: Monad m => NntpParser m String

-- | Gets a multiline output.
text :: Monad m => NntpParser m ByteString

-- | Gets rest of line.
line :: Monad m => NntpParser m ByteString


-- | This module contains the common features and common interface.
module Network.NNTP.Common
xhdr :: Monad m => (Article -> m a) -> NntpT m [a]


-- | This module contains the common features and common interface.
module Network.NNTP.Core
article :: Monad m => ByteString -> NntpT m (Maybe Article)
head :: Monad m => ByteString -> NntpT m (Maybe Article)
body :: Monad m => ByteString -> NntpT m (Maybe Article)
stat :: Monad m => ByteString -> NntpT m (Maybe Article)
group :: Monad m => ByteString -> NntpT m (Maybe Group)
last :: Monad m => NntpT m (Maybe Article)
list :: Monad m => (Group -> m a) -> NntpT m [a]
newgroups :: Monad m => UTCTime -> (Group -> m a) -> NntpT m [a]
newnews :: Monad m => UTCTime -> Group -> (Article -> m a) -> NntpT m [a]
next :: Monad m => NntpT m (Maybe Article)
post :: Monad m => ByteString -> NntpT m ()


-- | This module contains the common features and common interface.
module Network.NNTP

-- | Represents a single article. Please note that except the splitting
--   into header and body no parsing is done.
data Article
Article :: String -> Maybe ByteString -> Maybe ByteString -> Article

-- | Returns the article ID
articleID :: Article -> String

-- | Returns the article header. <tt>Data.Maybe.Nothing</tt> indicates not
--   fetched header.
articleHeader :: Article -> Maybe ByteString

-- | Returns the article body. <tt>Data.Maybe.Nothing</tt> indicates not
--   fetched body.
articleBody :: Article -> Maybe ByteString

-- | Represents a single group.
data Group
Group :: String -> Integer -> Integer -> Group

-- | Returns the group name.
groupName :: Group -> String

-- | Returns the number of first article avaible.
groupArticleFirst :: Group -> Integer

-- | Returns the number of last article avaible.
groupArticleLast :: Group -> Integer

-- | NntpConnection represents a connection in a NntpT monad.
--   
--   Please note that for <tt>runNntpWithConnection</tt> you need to supply
--   both <a>input</a> and <a>output</a> functions.
data NntpConnection m
NntpConnection :: ByteString -> (ByteString -> m ()) -> NntpConnection m

-- | Input is an stream which is from a server.
input :: NntpConnection m -> ByteString

-- | Output is a function which sends the data to a server.
output :: NntpConnection m -> ByteString -> m ()

-- | NntpState represents a state at given moment. Please note that this
--   type is not a part of stable API (when we will have one).
data NntpState m
NntpState :: NntpConnection m -> NntpState m
connection :: NntpState m -> NntpConnection m

-- | NntpT represents a connection. Since some servers have short timeouts
--   it is recommended to keep the connections short.
newtype NntpT m a
NntpT :: (NntpState m -> m (NntpState m, Either NntpError a)) -> NntpT m a
runNntpT :: NntpT m a -> NntpState m -> m (NntpState m, Either NntpError a)

-- | Indicates an error of handling NNTP connection. Please note that this
--   should indicate client errors only (with the exception of
--   <a>ServiceDiscontinued</a>, in some cases <a>PostingFailed</a> and
--   <a>NoSuchCommand</a>. The last one if propagated outside NNTP module
--   indicates a bug in library or server.).
data NntpError

-- | Indicates that operation was performed on group that does not exists.
NoSuchGroup :: NntpError

-- | Indicates that operation was performed on article that does not
--   exists.
NoSuchArticle :: NntpError

-- | Indicates that posting operation failed for some reason.
PostingFailed :: NntpError

-- | Indicates that posting is not allowed.
PostingNotAllowed :: NntpError

-- | Indicates that service was discontinued.
ServiceDiscontinued :: NntpError

-- | Indicates that command does not exists.
NoSuchCommand :: NntpError

-- | This is utility function which connects to a host, creates
--   <a>NntpState</a> and supplies it to <tt>runNntpWithState</tt>.
runNntpWithHost :: MonadIO m => String -> Maybe Word16 -> (Bool -> NntpT m a) -> m (Either NntpError a)

-- | Runs Nntp with given connection.
runNntpWithConnection :: Monad m => NntpConnection m -> (Bool -> NntpT m a) -> m (Either NntpError a)

-- | Returns the Article for given ID. Please note that it may or may not
--   fetch the header and body. Preferred is lazy loading.
articleFromID :: Monad m => String -> NntpT m (Maybe Article)

-- | Returns the Article of given number from given Group. Please note that
--   it may or may not fetch the header and body. Preferred is lazy
--   loading.
articleFromNo :: Monad m => Group -> Integer -> NntpT m (Maybe Article)

-- | Returns the Group of given name.
groupFromName :: Monad m => String -> NntpT m (Maybe Group)

-- | Iterates over every group on server collecting values. Please note
--   that the function may be called before all I/O operations finished and
--   the implementation may or may not allaw to call other NNTP functions
--   during the call.
forGroups :: Monad m => (Group -> m a) -> NntpT m [a]

-- | Iterates over new group on server collecting values. Please note that
--   the function may be called before all I/O operations finished and the
--   implementation may or may not allaw to call other NNTP functions
--   during the call.
forNewGroups :: Monad m => UTCTime -> (Group -> m a) -> NntpT m [a]

-- | Iterates over the articles in group collecting values. Please note
--   that the function may be called before all I/O operations finished and
--   the implementation may or may not allaw to call other NNTP functions
--   during the call.
forArticles :: Monad m => Group -> (Article -> m a) -> NntpT m [a]

-- | Iterates over the new articles in group collecting values. Please note
--   that the function may be called before all I/O operations finished and
--   the implementation may or may not allaw to call other NNTP functions
--   during the call.
forNewArticles :: Monad m => UTCTime -> Group -> (Article -> m a) -> NntpT m [a]

-- | Fetch the article.
fetchArticle :: Monad m => Article -> NntpT m Article

-- | Fetch the article header.
fetchArticleHeader :: Monad m => Article -> NntpT m Article

-- | Fetch the article header.
fetchArticleBody :: Monad m => Article -> NntpT m Article

-- | Fetchs the article only if it is not fetched.
fetchArticleLazy :: Monad m => Article -> NntpT m Article

-- | Fetchs the article header if it is not fetched.
fetchArticleHeaderLazy :: Monad m => Article -> NntpT m Article

-- | Fetchs the article body if it is not fetched.
fetchArticleBodyLazy :: Monad m => Article -> NntpT m Article

-- | Updates group.
fetchGroup :: Monad m => Group -> NntpT m Group

-- | Posts an article.
post :: Monad m => ByteString -> NntpT m ()
