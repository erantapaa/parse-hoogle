-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | GTK+ pixel plotting.
--   
--   This package is a thin layer over Gtk2hs providing an easy interface
--   for people who want to do bitmapped graphics.
--   
--   Cairo already provides easy access to <i>vector</i> graphics; this
--   package is directed at <i>bitmap</i> graphics (i.e., reading and
--   writing individual pixels). This is useful for applications such as
--   fractal generators, ray tracers, etc.
--   
--   Changes:
--   
--   <ul>
--   <li>Should work with Gtk2hs 0.11.x now.</li>
--   <li>Fix minor documentation glitches.</li>
--   </ul>
@package AC-EasyRaster-GTK
@version 1.1.3


-- | This module provides pixel-oriented graphics operations. It defines an
--   <a>ImageBuffer</a> type, which is a thin layer over a GTK+
--   <a>Pixbuf</a>. It then provides functions for doing pixel-oriented
--   graphics on this without having to do a lot of bit-twiddling math by
--   hand. It also provides for quickly and easily loading and saving
--   images, and displaying them on the screen.
--   
--   In the simplest case, you can import this module alone and never need
--   to touch the actual GTK modules; however, this module provides access
--   to the underlying GTK resources as well, in case you want to use it as
--   part of a larger GTK program.
--   
--   Note that <i>displaying</i> an image on screen requires you to run the
--   GTK event loop. If you only want to load, save and process image
--   files, you can completely ignore the GTK event loop. (You do still
--   need to call <a>init_system</a>, however.)
module Graphics.EasyRaster.GTK

-- | Initialise the GTK runtime system. This function <i>must</i> be called
--   before any other functions in this module. (If not, your program will
--   likely summarily crash with an obscure error to <tt>stderr</tt>.)
--   
--   Note that Gtk2hs by default will crash with a warning message if the
--   program is compiled with the threaded RTS; this module disables that
--   warning. However, be warned: You must <i>only</i> call the GTK-based
--   functions from thread 0.
init_system :: IO ()

-- | The type of pixel coordinates.
type Coord = Int

-- | The type of pixel channels.
type Channel = Word8

-- | Used to indicate image file type.
data ImageFileType

-- | PNG image.
IFT_PNG :: ImageFileType

-- | JPEG image.
IFT_JPEG :: ImageFileType

-- | Convert an <a>ImageFileType</a> to a plain string (all lower-case).
type_string :: ImageFileType -> String

-- | An <tt>ImageBuffer</tt> is a space-efficient grid of 24-bit RGB pixels
--   (i.e., 8 bits per channel) that the GTK library can also access. (The
--   latter gives us the ability to load/save/display the graphics, rather
--   than just manipulate it in memory.)
data ImageBuffer

-- | Make a new <a>ImageBuffer</a> of the specified size. Valid coordinates
--   will be in the range (0,0) to (x-1, y-1), with (0,0) being the
--   top-left corner of the image.
ib_new :: (Int, Int) -> IO ImageBuffer

-- | Load a graphics file into a newly created <a>ImageBuffer</a>. The file
--   type is determined automatically (any type that GTK+ supports), as is
--   the size for the <a>ImageBuffer</a>. (This can be queried later.)
ib_load :: FilePath -> IO ImageBuffer

-- | Save an <a>ImageBuffer</a> into a file with the specified file type.
--   Note that the filename should include an appropriate suffix (e.g.,
--   <tt>.png</tt>). The type of file is determined by the
--   <a>ImageFileType</a> argument, <i>not</i> by the filename.
ib_save :: ImageBuffer -> ImageFileType -> FilePath -> IO ()

-- | Query the size of an <a>ImageBuffer</a>. This returns the width and
--   height in pixels. Valid coordinates for this <tt>ImageBuffer</tt> are
--   from (0,0) to (x-1, y-1), where (x,y) is the value returned from
--   <tt>ib_size</tt>.
--   
--   Note that this is a <i>pure</i> function (since the size of an
--   <a>ImageBuffer</a> is immutable).
ib_size :: ImageBuffer -> (Coord, Coord)

-- | Return a list containing all valid coordinates for this
--   <a>ImageBuffer</a>. Useful when you want to process all pixels in the
--   image; now you can just use <a>mapM</a> or whatever.
ib_coords :: ImageBuffer -> [(Coord, Coord)]

-- | Return all valid coordinates as a list of lists instead of a single
--   flat list. (In case you need to do something at the end of each row.)
ib_coords2 :: ImageBuffer -> [[(Coord, Coord)]]

-- | Determine whether the specified pixel coordinates are valid for this
--   <a>ImageBuffer</a> (i.e., check they're not off the edge of the
--   image).
ib_valid_coords :: ImageBuffer -> (Coord, Coord) -> Bool

-- | Overwrite the specified pixel with the specified colour (R, G, B).
--   
--   Note that pixel coordinates are <i>not</i> checked, for efficiency
--   reasons. However, supplying invalid pixel coordinates may result in
--   behaviour ranging from corrupted graphical output to random program
--   crashes. See <a>Graphics.EasyRaster.GTK.Paranoid</a> for a version of
--   this function with bounds checking turned on.
ib_write_pixel :: ImageBuffer -> (Coord, Coord) -> (Channel, Channel, Channel) -> IO ()

-- | Read the current (R, G, B) colour valid of the specified pixel.
--   
--   Note that pixel coordinates are <i>not</i> checked, for efficiency
--   reasons. However, supplying invalid pixel coordinates will at best
--   result in gibberish being returned, and at worst a segmentation fault.
--   See <a>Graphics.EasyRaster.Paranoid</a> for a version of this function
--   with bounds checking turned on.
ib_read_pixel :: ImageBuffer -> (Coord, Coord) -> IO (Channel, Channel, Channel)

-- | This is a quick shortcut for displaying an image on screen. Given an
--   <a>ImageBuffer</a> and a window title, this will display the image in
--   a new window. Clicking the window's close button will call GTK's
--   <a>mainQuit</a> function. For example,
--   
--   <pre>
--   ib_display buf "My Window Title"
--   main_loop
--   </pre>
--   
--   will display <tt>buf</tt> on screen and halt the program (or at least
--   thread 0) until the user clicks the close button. Crude, but useful
--   for quick testing.
ib_display :: ImageBuffer -> String -> IO ()

-- | Returns a GTK+ canvas object which displays the graphcs in the
--   <a>ImageBuffer</a> and will automatically repaint itself in response
--   to damage.
ib_canvas :: ImageBuffer -> IO DrawingArea

-- | Process one GTK event if there are any waiting, otherwise do nothing.
process_event :: IO ()

-- | Process one GTK event. Wait for an event to arrive if necessary.
wait_event :: IO ()

-- | Run the GTK "main loop" until GTK's <a>mainQuit</a> function is
--   called. (Note that this means that thread 0 can do no other work while
--   the main loop is running.)
main_loop :: IO ()

-- | Return the underlying GTK <a>Pixbuf</a> used by an <a>ImageBuffer</a>.
--   (In case you want to do something to it with GTK.)
ib_pixbuf :: ImageBuffer -> Pixbuf
instance Eq ImageFileType
instance Enum ImageFileType
instance Bounded ImageFileType
instance Read ImageFileType
instance Show ImageFileType


-- | This module provides exactly the same interface as
--   <a>Graphics.EasyRaster.GTK</a>, but with run-time sanity checks. This
--   results in greater safety and reduced performance. Typically you will
--   use this module while developing and debugging your application, and
--   then change your import statement when you're happy that any bugs have
--   been corrected.
module Graphics.EasyRaster.GTK.Paranoid

-- | Initialise the GTK runtime system. This function <i>must</i> be called
--   before any other functions in this module. (If not, your program will
--   likely summarily crash with an obscure error to <tt>stderr</tt>.)
--   
--   Note that Gtk2hs will crash with a warning message if the program is
--   compiled with the threaded RTS. (Use the non-paranoid version of
--   <tt>init_system</tt> to turn this warning off.)
init_system :: IO ()

-- | The type of pixel coordinates.
type Coord = Int

-- | The type of pixel channels.
type Channel = Word8

-- | Used to indicate image file type.
data ImageFileType

-- | PNG image.
IFT_PNG :: ImageFileType

-- | JPEG image.
IFT_JPEG :: ImageFileType

-- | Convert an <a>ImageFileType</a> to a plain string (all lower-case).
type_string :: ImageFileType -> String

-- | An <tt>ImageBuffer</tt> is a space-efficient grid of 24-bit RGB pixels
--   (i.e., 8 bits per channel) that the GTK library can also access. (The
--   latter gives us the ability to load/save/display the graphics, rather
--   than just manipulate it in memory.)
data ImageBuffer

-- | Make a new <a>ImageBuffer</a> of the specified size. Valid coordinates
--   will be in the range (0,0) to (x-1, y-1), with (0,0) being the
--   top-left corner of the image.
ib_new :: (Int, Int) -> IO ImageBuffer

-- | Load a graphics file into a newly created <a>ImageBuffer</a>. The file
--   type is determined automatically (any type that GTK+ supports), as is
--   the size for the <a>ImageBuffer</a>. (This can be queried later.)
ib_load :: FilePath -> IO ImageBuffer

-- | Save an <a>ImageBuffer</a> into a file with the specified file type.
--   Note that the filename should include an appropriate suffix (e.g.,
--   <tt>.png</tt>). The type of file is determined by the
--   <a>ImageFileType</a> argument, <i>not</i> by the filename.
ib_save :: ImageBuffer -> ImageFileType -> FilePath -> IO ()

-- | Query the size of an <a>ImageBuffer</a>. This returns the width and
--   height in pixels. Valid coordinates for this <tt>ImageBuffer</tt> are
--   from (0,0) to (x-1, y-1), where (x,y) is the value returned from
--   <tt>ib_size</tt>.
--   
--   Note that this is a <i>pure</i> function (since the size of an
--   <a>ImageBuffer</a> is immutable).
ib_size :: ImageBuffer -> (Coord, Coord)

-- | Return a list containing all valid coordinates for this
--   <a>ImageBuffer</a>. Useful when you want to process all pixels in the
--   image; now you can just use <a>mapM</a> or whatever.
ib_coords :: ImageBuffer -> [(Coord, Coord)]

-- | Return all valid coordinates as a list of lists instead of a single
--   flat list. (In case you need to do something at the end of each row.)
ib_coords2 :: ImageBuffer -> [[(Coord, Coord)]]

-- | Determine whether the specified pixel coordinates are valid for this
--   <a>ImageBuffer</a> (i.e., check they're not off the edge of the
--   image).
ib_valid_coords :: ImageBuffer -> (Coord, Coord) -> Bool

-- | Overwrite the specified pixel with the (R, G, B) colour.
--   
--   If the pixel coordinates are out of range, the <a>error</a> function
--   is called.
ib_write_pixel :: ImageBuffer -> (Coord, Coord) -> (Channel, Channel, Channel) -> IO ()

-- | Read the (R, G, B) colour of the specified pixel.
--   
--   If the pixel coordinates are out of range, the <a>error</a> function
--   is called.
ib_read_pixel :: ImageBuffer -> (Coord, Coord) -> IO (Channel, Channel, Channel)

-- | This is a quick shortcut for displaying an image on screen. Given an
--   <a>ImageBuffer</a> and a window title, this will display the image in
--   a new window. Clicking the window's close button will call GTK's
--   <a>mainQuit</a> function. For example,
--   
--   <pre>
--   ib_display buf "My Window Title"
--   main_loop
--   </pre>
--   
--   will display <tt>buf</tt> on screen and halt the program (or at least
--   thread 0) until the user clicks the close button. Crude, but useful
--   for quick testing.
ib_display :: ImageBuffer -> String -> IO ()

-- | Returns a GTK+ canvas object which displays the graphcs in the
--   <a>ImageBuffer</a> and will automatically repaint itself in response
--   to damage.
ib_canvas :: ImageBuffer -> IO DrawingArea

-- | Process one GTK event if there are any waiting, otherwise do nothing.
process_event :: IO ()

-- | Process one GTK event. Wait for an event to arrive if necessary.
wait_event :: IO ()

-- | Run the GTK "main loop" until GTK's <a>mainQuit</a> function is
--   called. (Note that this means that thread 0 can do no other work while
--   the main loop is running.)
main_loop :: IO ()

-- | Return the underlying GTK <a>Pixbuf</a> used by an <a>ImageBuffer</a>.
--   (In case you want to do something to it with GTK.)
ib_pixbuf :: ImageBuffer -> Pixbuf
