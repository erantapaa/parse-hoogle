-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple higher order function for Maybe
--   
@package maybe-justify
@version 0.1.0.0

module Data.Maybe.Justify

-- | Control flow has always been obtuse, and justify makes simple
--   if-then-else statements simple one liners.
--   
--   <h3>Examples</h3>
--   
--   Realistically this is very ineffecient, but interesting to see
--   
--   <pre>
--   &gt;&gt;&gt; justify fromJust isJust (Maybe True) == id (Maybe True)
--   True
--   </pre>
--   
--   A somewhat more realistic example where you generate a maybe with
--   control flow then make a change to the returned value with a provided
--   default.
--   
--   <pre>
--   &gt;&gt;&gt; maybe "Default" (&lt;&gt; "!") (justify (&lt;&gt; " World") (/= mempty) "Hello")
--   "Hello World!"
--   </pre>
justify :: (a -> b) -> (a -> Bool) -> a -> Maybe b
