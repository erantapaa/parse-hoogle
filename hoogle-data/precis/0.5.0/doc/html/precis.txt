-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Diff Cabal packages.
--   
--   Summarize API differences between revisions of Cabal packages.
--   
--   Precis library is BSD3, Precis executable is LGPL apropos the
--   dependency on CppHs.
--   
--   NOTE for version 0.5.0 - the next version is likely to have
--   substantial changes. Version 0.5.0 does have a better strategy to
--   resolve conditional modules, but otherwise it is not a compelling
--   upgrade. If you have 0.4.0 installed, I recommend you skip this
--   revision and wait for the next version.
--   
--   CHANGES 0.4.0 to 0.5.0
--   
--   <ul>
--   <li>Major re-organization. Module-to-file resolution substantially
--   changed. Should be better for Cabal fines that use condition
--   variables.</li>
--   </ul>
--   
--   <ol>
--   <li>3.1 to 0.4.0</li>
--   </ol>
--   
--   <ul>
--   <li>Substantial changes to reporting - now a summary is printed to the
--   console, and an HTML report can be generated via a command line
--   flag.</li>
--   <li>Changed constructor names for Edit data type</li>
--   </ul>
@package precis
@version 0.5.0


module Precis.VersionNumber

-- | Version number
precis_version_number :: String


-- | Pretty print combinators for ShowS
module Precis.Utils.PPShowS
toString :: ShowS -> String
putShowS :: ShowS -> IO ()
putShowSLine :: ShowS -> IO ()
punctuate :: ShowS -> [ShowS] -> [ShowS]
encloseSep :: ShowS -> ShowS -> ShowS -> [ShowS] -> ShowS
list :: [ShowS] -> ShowS
tupled :: [ShowS] -> ShowS
semiBrace :: [ShowS] -> ShowS
hcat :: [ShowS] -> ShowS
hsep :: [ShowS] -> ShowS
vsep :: [ShowS] -> ShowS
(<>) :: ShowS -> ShowS -> ShowS
(<+>) :: ShowS -> ShowS -> ShowS
sep :: ShowS -> ShowS -> ShowS
line :: ShowS -> ShowS -> ShowS
squotes :: ShowS -> ShowS
dquotes :: ShowS -> ShowS
braces :: ShowS -> ShowS
parens :: ShowS -> ShowS
angles :: ShowS -> ShowS
brackets :: ShowS -> ShowS
lparen :: ShowS
rparen :: ShowS
langle :: ShowS
rangle :: ShowS
lbrace :: ShowS
rbrace :: ShowS
lbracket :: ShowS
rbracket :: ShowS
sglquote :: ShowS
dblquote :: ShowS
semi :: ShowS
colon :: ShowS
comma :: ShowS
space :: ShowS
dot :: ShowS
equal :: ShowS
backslash :: ShowS
newline :: ShowS
bar :: ShowS
empty :: ShowS
text :: String -> ShowS
char :: Char -> ShowS
int :: Int -> ShowS
repeatChar :: Int -> Char -> ShowS
prefixLines :: ShowS -> String -> ShowS

-- | Note - this function evaluates the second arg and uses (++) via
--   <a>showString</a>.
nextLine :: ShowS -> ShowS -> ShowS


-- | Creating a report in HTML...
module Precis.StyleSheet
inline_stylesheet :: Html


module Precis.HsSrc.Datatypes
type TextRep = String
type StrName = String
data MacroExpandedSrcFile
MacroExpandedSrcFile :: String -> String -> MacroExpandedSrcFile
source_file_name :: MacroExpandedSrcFile -> String
expanded_source :: MacroExpandedSrcFile -> String

-- | Module file names are derived from the cabal file. So the name is
--   tracked if it is missing...
data ModuleParseError
ERR_MODULE_FILE_MISSING :: String -> ModuleParseError
ERR_MODULE_FILE_PARSE :: String -> ModuleParseError
moduleParseErrorMsg :: ModuleParseError -> String
data ExportItem
ModuleExport :: StrName -> ExportItem
DataOrClass :: StrName -> TextRep -> ExportItem
Variable :: StrName -> ExportItem
exportItemName :: ExportItem -> StrName
data InstanceDecl
InstanceDecl :: StrName -> TextRep -> TextRep -> InstanceDecl
class_name :: InstanceDecl -> StrName
type_rep :: InstanceDecl -> TextRep
full_rep :: InstanceDecl -> TextRep
instanceDeclName :: InstanceDecl -> StrName
data DatatypeDecl
DatatypeDecl :: StrName -> TextRep -> DatatypeDecl
datatype_name :: DatatypeDecl -> StrName
datatype_rep :: DatatypeDecl -> TextRep
datatypeDeclName :: DatatypeDecl -> StrName
data TypeSigDecl
TypeSigDecl :: StrName -> TextRep -> TypeSigDecl
type_decl_name :: TypeSigDecl -> StrName
type_signature :: TypeSigDecl -> TextRep
typeSigDeclName :: TypeSigDecl -> StrName
instance Eq TypeSigDecl
instance Show TypeSigDecl
instance Eq DatatypeDecl
instance Show DatatypeDecl
instance Eq InstanceDecl
instance Show InstanceDecl
instance Eq ExportItem
instance Show ExportItem
instance Eq ModuleParseError
instance Show ModuleParseError


module Precis.HsSrc.Utils
readModule :: MacroExpandedSrcFile -> Either ModuleParseError Module
parseModuleWithExts :: [Extension] -> FilePath -> String -> ParseResult Module
extractQName :: QName -> String
extractCName :: CName -> String
extractModuleName :: ModuleName -> String
extractName :: Name -> String
extractSpecialCon :: SpecialCon -> String
getModuleName :: Module -> ModuleName
namedDecls :: Decl -> [(StrName, TextRep)]
hsppList :: Pretty a => [a] -> String


-- | ALL NAMES PROVISIONAL...
module Precis.Utils.ControlOperators
suppress :: Either e a -> Maybe a
elaborate :: e -> Maybe a -> Either e a

-- | Apply the function to the list
firstSuccess :: Monad m => (a -> m (Maybe b)) -> [a] -> m (Maybe b)
valid :: Monad m => (a -> m Bool) -> a -> m (Maybe a)
validE :: Monad m => ex -> (a -> m Bool) -> a -> m (Either ex a)


-- | Utils
module Precis.Utils.Common
type H a = [a] -> [a]
emptyH :: H a
wrapH :: a -> H a
consH :: a -> H a -> H a
snocH :: H a -> a -> H a
appendH :: H a -> H a -> H a

-- | Traverse a list as per <a>map</a> applying the supplied function to
--   each element, *but* pruduce a Hughes list as output.
veloH :: (a -> b) -> [a] -> H b
concatH :: [H a] -> H a
toListH :: H a -> [a]
fromListH :: [a] -> H a
unlist :: [String] -> String
mapLeft :: (a -> s) -> Either a b -> Either s b
mapRight :: (b -> t) -> Either a b -> Either a t
onSuccessM :: Monad m => m (Either a b) -> (b -> m c) -> m (Either a c)
pstar :: (a -> r -> ans) -> (r -> a) -> r -> ans
pstar2 :: (a -> b -> r -> ans) -> (r -> a) -> (r -> b) -> r -> ans
star :: (r -> a) -> (a -> r -> ans) -> r -> ans
star2 :: (r -> a) -> (r -> b) -> (a -> b -> r -> ans) -> r -> ans


-- | Two Diff types (3 state and 4 state)
module Precis.Diff
data Edit4 a
ADD :: a -> Edit4 a
DIF :: a -> a -> Edit4 a
EQU :: a -> Edit4 a
DEL :: a -> Edit4 a
data Edit3 a
Add :: a -> Edit3 a
Equ :: a -> Edit3 a
Del :: a -> Edit3 a
diff4 :: (a -> a -> Bool) -> (a -> a -> Bool) -> [a] -> [a] -> [Edit4 a]
diff3 :: (a -> a -> Bool) -> [a] -> [a] -> [Edit3 a]
addedRemoved :: [Edit4 a] -> ([a], [a])
conflictRemoved :: [Edit4 a] -> ([(a, a)], [a])
addedConflictRemoved :: [Edit4 a] -> ([a], [(a, a)], [a])
instance Eq a => Eq (Edit3 a)
instance Show a => Show (Edit3 a)
instance Eq a => Eq (Edit4 a)
instance Show a => Show (Edit4 a)
instance Functor Edit3
instance Functor Edit4


-- | Datatype for working with Cabal files...
module Precis.Cabal.InterimDatatypes
type FileExtension = String

-- | <a>CabalFilePath</a> is both the full, normalized path to the cabal
--   file and the directory parts to the file.
--   
--   This is an opaque type - construct with <a>cabalFilePath</a>.
data CabalFilePath

-- | Constructor for <a>CabalFilePath</a> - the input FilePath is
--   normalized before constructing the data type.
cabalFilePath :: FilePath -> CabalFilePath
pathToCabalFile :: CabalFilePath -> FilePath
directoriesToCabalFile :: CabalFilePath -> [FilePath]
newtype ExeMainPath
ExeMainPath :: FilePath -> ExeMainPath
relPathToExeMain :: ExeMainPath -> FilePath
data CabalSourceDir
cabalSourceDir :: FilePath -> CabalSourceDir
directoriesToSource :: CabalSourceDir -> [FilePath]
data ModName
modName :: ModuleName -> ModName
getModName :: ModName -> String
data ModuleDesc
moduleDesc :: ModuleName -> ModuleDesc
moduleDescName :: ModuleDesc -> ModName
moduleDirectories :: ModuleDesc -> [FilePath]
data CabalPrecis
CabalPrecis :: String -> String -> CabalFilePath -> [CabalLibrary] -> [CabalExe] -> CabalPrecis
pkg_name :: CabalPrecis -> String
pkg_version :: CabalPrecis -> String
path_to_cabal_file :: CabalPrecis -> CabalFilePath
cond_libraries :: CabalPrecis -> [CabalLibrary]
cond_exes :: CabalPrecis -> [CabalExe]
data CabalLibrary
CabalLibrary :: [CabalSourceDir] -> [ModuleDesc] -> [ModuleDesc] -> CabalLibrary
library_src_dirs :: CabalLibrary -> [CabalSourceDir]
public_modules :: CabalLibrary -> [ModuleDesc]
private_modules :: CabalLibrary -> [ModuleDesc]
data CabalExe
CabalExe :: ExeMainPath -> [CabalSourceDir] -> [ModuleDesc] -> CabalExe
exe_main_module :: CabalExe -> ExeMainPath
exe_src_dirs :: CabalExe -> [CabalSourceDir]
exe_other_modules :: CabalExe -> [ModuleDesc]
instance Eq CabalExe
instance Ord CabalExe
instance Show CabalExe
instance Eq CabalLibrary
instance Ord CabalLibrary
instance Show CabalLibrary
instance Eq CabalPrecis
instance Show CabalPrecis
instance Eq ModuleDesc
instance Ord ModuleDesc
instance Show ModuleDesc
instance Eq ModName
instance Ord ModName
instance Show ModName
instance Eq CabalSourceDir
instance Ord CabalSourceDir
instance Show CabalSourceDir
instance Eq ExeMainPath
instance Ord ExeMainPath
instance Show ExeMainPath
instance Eq CabalFilePath
instance Ord CabalFilePath
instance Show CabalFilePath


-- | Datatype for working with <i>Packages</i> ...
module Precis.Cabal.Datatypes
data Package
Package :: String -> String -> [HsSourceFile] -> [HsSourceFile] -> [UnresolvedModule] -> Package
package_name :: Package -> String
package_version :: Package -> String
exposed_modules :: Package -> [HsSourceFile]
internal_modules :: Package -> [HsSourceFile]
unresolved_modules :: Package -> [UnresolvedModule]
data CabalFileError
ERR_CABAL_FILE_MISSING :: FilePath -> CabalFileError
ERR_CABAL_FILE_PARSE :: String -> CabalFileError
cabalFileErrorMsg :: CabalFileError -> String
data HsSourceFile
HsSourceFile :: ModName -> FilePath -> HsSourceFile
module_name :: HsSourceFile -> ModName
full_path_to :: HsSourceFile -> FilePath
hsSourceFile :: ModName -> FilePath -> HsSourceFile

-- | An unresolved module couldn't be found in the listed source
--   directories.
newtype UnresolvedModule
UnresolvedModule :: ModName -> UnresolvedModule
unresolved_name :: UnresolvedModule -> ModName
instance Eq UnresolvedModule
instance Ord UnresolvedModule
instance Show UnresolvedModule
instance Eq HsSourceFile
instance Ord HsSourceFile
instance Show HsSourceFile
instance Eq CabalFileError
instance Show CabalFileError
instance Eq Package
instance Show Package


module Precis.Cabal.CabalPackage

-- | File extensions that Precis can handle:
--   
--   <pre>
--   ["hs", "lhs"]
--   </pre>
known_extensions :: [FileExtension]
extractPrecis :: FilePath -> IO (Either CabalFileError CabalPrecis)


-- | A Monad transofrmer (over IO) for revolving module names to FilePaths.
module Precis.Cabal.ResolveM
resolvePrecis :: CabalPrecis -> [FileExtension] -> IO ([HsSourceFile], [HsSourceFile], [UnresolvedModule])
data ResolveM a
runResolve :: CabalFilePath -> [FileExtension] -> ResolveM a -> IO (a, RSt)
getFilePathLoc :: [CabalSourceDir] -> ModuleDesc -> ResolveM (Maybe (FilePath))
getEIU :: RSt -> ([HsSourceFile], [HsSourceFile], [UnresolvedModule])
instance Monad ResolveM
instance Applicative ResolveM
instance Functor ResolveM


-- | Logging monad for collecting report fragments
module Precis.ReportMonad
data ReportM a
type Log = ([Html], ChangeStats)
data CMP a
NEW :: a -> CMP a
OLD :: a -> CMP a
data ChangeStats
ChangeStats :: [CMP StrName] -> [CMP StrName] -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> ChangeStats
unresolved_mods :: ChangeStats -> [CMP StrName]
unparseable_mods :: ChangeStats -> [CMP StrName]
removed_mods :: ChangeStats -> Int
removed_exports :: ChangeStats -> Int
changed_exports :: ChangeStats -> Int
removed_datatypes :: ChangeStats -> Int
changed_datatypes :: ChangeStats -> Int
removed_typesigs :: ChangeStats -> Int
changed_typesigs :: ChangeStats -> Int
removed_instances :: ChangeStats -> Int
changed_instances :: ChangeStats -> Int
type ModuleParseFunction = HsSourceFile -> IO (Either ModuleParseError Module)
data ReportLevel
JUST_MSG :: ReportLevel
MSG_AND_HTML :: ReportLevel
runReportM :: ModuleParseFunction -> ReportLevel -> ReportM a -> IO (a, Log)
execReportM :: ModuleParseFunction -> ReportLevel -> ReportM a -> IO Log
askParseFun :: ReportM ModuleParseFunction
liftIO :: IO a -> ReportM a
tellHtml :: Html -> ReportM ()
tellUnresolved :: CMP StrName -> ReportM ()
tellParseFail :: CMP StrName -> ReportM ()
incrRemovedModules :: ReportM ()
incrRemovedExports :: ReportM ()
incrChangedExports :: ReportM ()
incrRemovedDatatypes :: ReportM ()
incrChangedDatatypes :: ReportM ()
incrRemovedTypeSigs :: ReportM ()
incrChangedTypeSigs :: ReportM ()
incrRemovedInstances :: ReportM ()
incrChangedInstances :: ReportM ()
instance Eq ReportLevel
instance Show ReportLevel
instance Show ChangeStats
instance Eq a => Eq (CMP a)
instance Show a => Show (CMP a)
instance Monad ReportM
instance Functor ReportM
instance Functor CMP


-- | Print ChangeStats to the console.
module Precis.TextOutput
showChangeStats :: ChangeStats -> ShowS
comparingMsg :: Package -> Package -> ShowS


-- | Import module for Cabal libs
module Precis.Cabal
data ModName
getModName :: ModName -> String
extractPackageInfo :: FilePath -> IO (Either CabalFileError Package)


module Precis.ModuleProperties
diffExposedModules :: Package -> Package -> [Edit3 ModName]
diffInternalModules :: Package -> Package -> [Edit3 ModName]
diffExposedSrcFiles :: [HsSourceFile] -> [HsSourceFile] -> [Edit4 HsSourceFile]
diffExports :: Module -> Module -> [Edit4 ExportItem]
diffInstances :: Module -> Module -> [Edit4 InstanceDecl]
diffDataDecls :: Module -> Module -> [Edit4 DatatypeDecl]
diffTypeSigs :: Module -> Module -> [Edit4 TypeSigDecl]


-- | Creating a report in HTML...
module Precis.HtmlReport
makeShortReport :: ModuleParseFunction -> Package -> Package -> IO TextSummary
makeFullReport :: ModuleParseFunction -> Package -> Package -> IO (Html, TextSummary)
