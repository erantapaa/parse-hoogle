-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A thin GeoJSON Layer above the aeson library
--   
@package geojson
@version 1.3.0


-- | Refer to the GeoJSON Spec
--   <a>http://geojson.org/geojson-spec.html#linestring</a>
--   
--   A LinearString is a List with at least 2 elements
module Data.LineString

-- | a LineString has at least 2 elements
data LineString a

-- | When converting a List to a LineString, here is a list of things that
--   can go wrong:
--   
--   <ul>
--   <li>The list was empty</li>
--   <li>The list only had one element</li>
--   </ul>
data ListToLineStringError
ListEmpty :: ListToLineStringError
SingletonList :: ListToLineStringError

-- | This function converts it into a list and appends the given element to
--   the end.
--   
--   (xs -&gt; safeLast (fromLineString xs) == Just (lineStringHead xs))
--   (xs :: LineString Int)
--   
--   (xs -&gt; length (fromLineString xs) &gt;= 4) (xs :: LineString Int)
fromLineString :: LineString a -> [a]

-- | creates a LineString out of a list of elements, if there are enough
--   elements (needs at least 2) elements
--   
--   <pre>
--   &gt;&gt;&gt; fromList [] :: Validation ListToLineStringError (LineString Int)
--   Failure List Empty
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0] :: Validation ListToLineStringError (LineString Int)
--   Failure Singleton List
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0, 1] :: Validation ListToLineStringError (LineString Int)
--   Success [0,1]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0, 1, 2] :: Validation ListToLineStringError (LineString Int)
--   Success [0,1,2]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0, 1, 2, 4, 5, 0] :: Validation ListToLineStringError (LineString Int)
--   Success [0,1,2,4,5,0]
--   </pre>
fromList :: Validate v => [a] -> v ListToLineStringError (LineString a)

-- | Creates a LineString <tt>makeLineString x y zs</tt> creates a
--   <a>LineString</a> homomorphic to the list <tt>[x, y] ++ zs</tt>
makeLineString :: a -> a -> [a] -> LineString a

-- | returns the element at the head of the string
lineStringHead :: LineString a -> a

-- | returns the last element in the string
lineStringLast :: LineString a -> a

-- | returns the number of elements in the list, including the replicated
--   element at the end of the list.
--   
--   (xs -&gt; lineStringLength xs == (length (fromLineString xs))) (xs ::
--   LineString Int)
lineStringLength :: LineString a -> Int
instance Eq a => Eq (LineString a)
instance (FromJSON a, Show a) => FromJSON (LineString a)
instance ToJSON a => ToJSON (LineString a)
instance Traversable LineString
instance Foldable LineString
instance Functor LineString
instance Show a => Show (LineString a)
instance Show ListToLineStringError


-- | Refer to the GeoJSON Spec
--   <a>http://geojson.org/geojson-spec.html#polygon</a>
--   
--   A LinearRing is a List with at least 4 elements, where the first
--   element is expected to be the same as the last.
module Data.LinearRing

-- | a LinearRing has at least 3 (distinct) elements
data LinearRing a

-- | When converting a List to a LinearRing there are some things that can
--   go wrong
--   
--   <ul>
--   <li>The list can be too short</li>
--   <li>The head may not be equal to the last element in the list (NB this
--   is not currently checked due to performance concerns, and it also
--   doesnt make much sense since its likely to contain doubles)</li>
--   </ul>
data ListToLinearRingError a
ListTooShort :: Int -> ListToLinearRingError a
HeadNotEqualToLast :: a -> a -> ListToLinearRingError a

-- | This function converts it into a list and appends the given element to
--   the end.
--   
--   (xs -&gt; safeLast (fromLinearRing xs) == Just (ringHead xs)) (xs ::
--   LinearRing Int)
--   
--   (xs -&gt; length (fromLinearRing xs) &gt;= 4) (xs :: LinearRing Int)
fromLinearRing :: LinearRing a -> [a]

-- | creates a LinearRing out of a list of elements, if there arent enough
--   elements (needs at least 4) elements
--   
--   This version doesnt check equality of the head and tail in case you
--   wish to use it for elements with no Eq instance defined.
--   
--   Also its a list, finding the last element could be expensive with
--   large lists. So just follow the spec and make sure the ring is closed.
--   
--   Ideally the Spec would be modified to remove the redundant last
--   element from the Polygons/LineRings. Its just going to waste
--   bandwidth...
--   
--   And be aware that the last element of the list will be dropped.
--   
--   <pre>
--   &gt;&gt;&gt; fromList [] :: AccValidation (NonEmpty (ListToLinearRingError Int)) (LinearRing Int)
--   AccFailure (List too short: (length = 0) :| [])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0] :: AccValidation (NonEmpty (ListToLinearRingError Int)) (LinearRing Int)
--   AccFailure (List too short: (length = 1) :| [])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0, 1] :: AccValidation (NonEmpty (ListToLinearRingError Int)) (LinearRing Int)
--   AccFailure (List too short: (length = 2) :| [])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0, 1, 2] :: AccValidation (NonEmpty (ListToLinearRingError Int)) (LinearRing Int)
--   AccFailure (List too short: (length = 3) :| [])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0, 1, 2, 3] :: AccValidation (NonEmpty (ListToLinearRingError Int)) (LinearRing Int)
--   AccSuccess [0,1,2,0]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0, 1, 2, 4, 0] :: AccValidation (NonEmpty (ListToLinearRingError Int)) (LinearRing Int)
--   AccSuccess [0,1,2,4,0]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0, 1, 2, 4, 5, 0] :: AccValidation (NonEmpty (ListToLinearRingError Int)) (LinearRing Int)
--   AccSuccess [0,1,2,4,5,0]
--   </pre>
--   
--   Unfortunately it doesn't check that the last element is the same as
--   the first at the moment...
--   
--   <pre>
--   &gt;&gt;&gt; fromList [0, 1, 2, 4, 5, 6] :: AccValidation (NonEmpty (ListToLinearRingError Int)) (LinearRing Int)
--   AccSuccess [0,1,2,4,5,0]
--   </pre>
fromList :: (Validate v, Functor (v (NonEmpty (ListToLinearRingError a)))) => [a] -> v (NonEmpty (ListToLinearRingError a)) (LinearRing a)

-- | The expensive version of fromList that checks whether the head and
--   last elements are equal.
fromListWithEqCheck :: (Eq a, Validate v, Applicative (v (NonEmpty (ListToLinearRingError a)))) => [a] -> v (NonEmpty (ListToLinearRingError a)) (LinearRing a)

-- | Creates a LinearRing <tt>makeLinearRing x y z xs</tt> creates a
--   <a>LinearRing</a> homomorphic to the list <tt>[x, y, z] ++ xs</tt> the
--   list <tt>xs</tt> should NOT contain the first element repeated, i.e
--   the loop does not need to be closed, makeLinearRing will close it off.
--   
--   Repeating the first element is just redundant.
makeLinearRing :: a -> a -> a -> [a] -> LinearRing a

-- | returns the element at the head of the ring
ringHead :: LinearRing a -> a

-- | returns the number of elements in the list, including the replicated
--   element at the end of the list.
--   
--   <pre>
--   (\xs -&gt; ringLength xs == (length (fromLinearRing xs))) (xs :: LinearRing Int)
--   </pre>
ringLength :: LinearRing a -> Int
instance Eq a => Eq (LinearRing a)
instance (FromJSON a, Show a) => FromJSON (LinearRing a)
instance ToJSON a => ToJSON (LinearRing a)
instance Traversable LinearRing
instance Foldable LinearRing
instance Functor LinearRing
instance Show a => Show (LinearRing a)
instance Show a => Show (ListToLinearRingError a)


-- | Refer to the GeoJSON Spec
--   <a>http://www.geojson.org/geojson-spec.html</a>
module Data.Geospatial
type Latitude = Double
type Longitude = Double
type Easting = Double
type Northing = Double
type Altitude = Double

-- | (<a>GeoPositionWithoutCRS</a> is a catch all for indeterminate CRSs
--   and for expression of positions before a CRS has been determined
type GeoPositionWithoutCRS = [Double]

-- | see Section 2.1.1 <i>Position</i> in the GeoJSON Spec, I make the
--   assumption here that the only position types we will use will involve
--   easting or northing (+ve or -ve Altitude) or lon or lat (+ve or -ve
--   Altitude)
data GeoPosition
LonLat :: Longitude -> Latitude -> GeoPosition
LonLatAlt :: Longitude -> Latitude -> Altitude -> GeoPosition
EastingNorthing :: Easting -> Northing -> GeoPosition
EastingNorthingAlt :: Easting -> Northing -> Altitude -> GeoPosition
newtype GeoPoint
GeoPoint :: GeoPositionWithoutCRS -> GeoPoint
_unGeoPoint :: GeoPoint -> GeoPositionWithoutCRS
newtype GeoMultiPoint
GeoMultiPoint :: [GeoPositionWithoutCRS] -> GeoMultiPoint
_unGeoMultiPoint :: GeoMultiPoint -> [GeoPositionWithoutCRS]

-- | Split GeoMultiPoint coordinates into multiple GeoPoints
splitGeoMultiPoint :: GeoMultiPoint -> [GeoPoint]

-- | Merge multiple GeoPoints into one GeoMultiPoint
mergeGeoPoints :: [GeoPoint] -> GeoMultiPoint
newtype GeoPolygon
GeoPolygon :: [LinearRing GeoPositionWithoutCRS] -> GeoPolygon
_unGeoPolygon :: GeoPolygon -> [LinearRing GeoPositionWithoutCRS]
newtype GeoMultiPolygon
GeoMultiPolygon :: [[LinearRing GeoPositionWithoutCRS]] -> GeoMultiPolygon
_unGeoMultiPolygon :: GeoMultiPolygon -> [[LinearRing GeoPositionWithoutCRS]]

-- | Split GeoMultiPolygon coordinates into multiple GeoPolygons
splitGeoMultiPolygon :: GeoMultiPolygon -> [GeoPolygon]

-- | Merge multiple GeoPolygons into one GeoMultiPolygon
mergeGeoPolygons :: [GeoPolygon] -> GeoMultiPolygon
newtype GeoLine
GeoLine :: LineString GeoPositionWithoutCRS -> GeoLine
_unGeoLine :: GeoLine -> LineString GeoPositionWithoutCRS
newtype GeoMultiLine
GeoMultiLine :: [LineString GeoPositionWithoutCRS] -> GeoMultiLine
_unGeoMultiLine :: GeoMultiLine -> [LineString GeoPositionWithoutCRS]

-- | Split GeoMultiLine coordinates into multiple GeoLines
splitGeoMultiLine :: GeoMultiLine -> [GeoLine]

-- | Merge multiple GeoLines into one GeoMultiLine
mergeGeoLines :: [GeoLine] -> GeoMultiLine

-- | See section 2.1 <i>Geometry Objects</i> in the GeoJSON Spec.
data GeospatialGeometry
NoGeometry :: GeospatialGeometry
Point :: GeoPoint -> GeospatialGeometry
MultiPoint :: GeoMultiPoint -> GeospatialGeometry
Polygon :: GeoPolygon -> GeospatialGeometry
MultiPolygon :: GeoMultiPolygon -> GeospatialGeometry
Line :: GeoLine -> GeospatialGeometry
MultiLine :: GeoMultiLine -> GeospatialGeometry
Collection :: [GeospatialGeometry] -> GeospatialGeometry
type Name = Text
type Code = Int
type Href = Text
type FormatString = Text
type ProjectionType = Text

-- | See Section 3 <i>Coordinate Reference System Objects</i> in the
--   GeoJSON Spec <a>NoCRS</a> is required because no <tt>crs</tt>
--   attribute in a GeoJSON feature is NOT the same thing as a null
--   <tt>crs</tt> attribute. no <tt>crs</tt> value implies the default CRS,
--   while a null CRS means you cannot assume a CRS, null will mapped to
--   <a>NoCRS</a> while a non-existent attribute will be mapped to a
--   <a>Nothing</a> <a>Maybe</a> value
data CRSObject
NoCRS :: CRSObject
NamedCRS :: !Name -> CRSObject
EPSG :: Code -> CRSObject
LinkedCRS :: !Href -> !FormatString -> CRSObject
type FeatureID = Text

-- | See Section 4 <i>Bounding Boxes</i> of the GeoJSON spec, The length of
--   the list/array must be 2*n where n is the dimensionality of the
--   position type for the CRS with min values first followed by the max
--   values, wich both the min/max sets following the same axis order as
--   the CRS, e.g for WGS84: minLongitude, minLatitude, maxLongitude,
--   maxLatitude The spec mentions that it can be part of a geometry object
--   too but doesnt give an example, This implementation will ignore bboxes
--   on Geometry objects, they can be added if required.
type BoundingBoxWithoutCRS = [Double]

-- | See Section 2.2 <i>Feature Objects</i> of the GeoJSON spec.
--   Parameterised on the property type
data GeoFeature a
GeoFeature :: Maybe BoundingBoxWithoutCRS -> GeospatialGeometry -> a -> Maybe FeatureID -> GeoFeature a
_bbox :: GeoFeature a -> Maybe BoundingBoxWithoutCRS
_geometry :: GeoFeature a -> GeospatialGeometry
_properties :: GeoFeature a -> a
_featureId :: GeoFeature a -> Maybe FeatureID

-- | See Section 2.3 <i>Feature Collection Objects</i> of the GeoJSON spec
data GeoFeatureCollection a
GeoFeatureCollection :: Maybe BoundingBoxWithoutCRS -> [GeoFeature a] -> GeoFeatureCollection a
_boundingbox :: GeoFeatureCollection a -> Maybe BoundingBoxWithoutCRS
_geofeatures :: GeoFeatureCollection a -> [GeoFeature a]

-- | the <a>GeoPosition</a> is a bit special in that when you convert it to
--   GeoJSON, it will lose the CRS info attached to it and cannot be read
--   back in from the GeoJSON. Hence it is ineligible for the
--   <tt>FromJSON</tt> type class, so this function will strip it down to a
--   <a>GeoPositionWithoutCRS</a>, which is eligible
stripCRSFromPosition :: GeoPosition -> GeoPositionWithoutCRS

-- | The default CRS according to Section 3 <i>Coordinate Reference System
--   Objects</i> is WGS84 which I believe, from
--   <a>http://spatialreference.org/ref/epsg/4326/</a> which translates to
--   this in JSON: <a>http://spatialreference.org/ref/epsg/4326/json/</a>)
--   is represented thus:
defaultCRS :: CRSObject
unGeoPoint :: Iso' GeoPoint GeoPositionWithoutCRS
unGeoMultiPoint :: Iso' GeoMultiPoint [GeoPositionWithoutCRS]
unGeoPolygon :: Iso' GeoPolygon [LinearRing GeoPositionWithoutCRS]
unGeoLine :: Iso' GeoLine (LineString GeoPositionWithoutCRS)
unGeoMultiLine :: Iso' GeoMultiLine [LineString GeoPositionWithoutCRS]
unGeoMultiPolygon :: Iso' GeoMultiPolygon [[LinearRing GeoPositionWithoutCRS]]
bbox :: Lens' (GeoFeature a_aial) (Maybe BoundingBoxWithoutCRS)
geometry :: Lens' (GeoFeature a_aial) GeospatialGeometry
properties :: Lens (GeoFeature a_aial) (GeoFeature a_aiFR) a_aial a_aiFR
featureId :: Lens' (GeoFeature a_aial) (Maybe FeatureID)
boundingbox :: Lens' (GeoFeatureCollection a_ajqg) (Maybe BoundingBoxWithoutCRS)
geofeatures :: Lens (GeoFeatureCollection a_ajqg) (GeoFeatureCollection a_ajst) [GeoFeature a_ajqg] [GeoFeature a_ajst]
_NoGeometry :: Prism' GeospatialGeometry ()
_Point :: Prism' GeospatialGeometry GeoPoint
_MultiPoint :: Prism' GeospatialGeometry GeoMultiPoint
_Polygon :: Prism' GeospatialGeometry GeoPolygon
_MultiPolygon :: Prism' GeospatialGeometry GeoMultiPolygon
_Line :: Prism' GeospatialGeometry GeoLine
_MultiLine :: Prism' GeospatialGeometry GeoMultiLine
_Collection :: Prism' GeospatialGeometry [GeospatialGeometry]
_NoCRS :: Prism' CRSObject ()
_NamedCRS :: Prism' CRSObject Name
_EPSG :: Prism' CRSObject Code
_LinkedCRS :: Prism' CRSObject (Href, FormatString)
