-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An alternative to some of the Prelude.
--   
@package overture
@version 0.0.5


-- | Overture is an alternative to some of the <a>Prelude</a>. It aims to
--   make Haskell easier to read by providing a few well-named functions
--   and operators.
--   
--   Overture does not export anything that conflicts with the
--   <a>Prelude</a>. Whenever possible, it tries not to conflict with any
--   other well-known packages. The recommended way to use Overture is to
--   import it unqualified.
--   
--   <pre>
--   &gt;&gt;&gt; import Overture
--   </pre>
--   
--   <h2>Motivation</h2>
--   
--   I have been using Haskell for more than I year. In that time, I
--   created libraries and executables. I deployed Haskell to production at
--   my day job. I wrote several blog posts about Haskell. All this to say
--   that I'm not a complete beginner.
--   
--   Yet I sometimes have trouble undestanding Haskell code. Usually
--   function composition and pointfree expressions are to blame. To me,
--   they read backwards. Take this function for example.
--   
--   <pre>
--   &gt;&gt;&gt; let f = negate . recip . succ
--   </pre>
--   
--   Is it immediately obvious to you what this does? If so, this package
--   probably isn't for you. For me, I start reading "negate" before I
--   realize that this is a chain of composed functions, which means I have
--   to start at the end. Eventually I end up understanding that this
--   function adds one, then takes the reciprocal, then negates.
--   
--   <pre>
--   &gt;&gt;&gt; f 3
--   -0.25
--   </pre>
--   
--   Let's explore some alternative ways to write this function.
--   
--   <pre>
--   &gt;&gt;&gt; let f1 x = negate . recip . succ $ x
--   
--   &gt;&gt;&gt; let f2 x = negate . recip $ succ x
--   
--   &gt;&gt;&gt; let f3 x = negate (recip (succ x))
--   </pre>
--   
--   Of those, I like reading <tt>f3</tt> the best. But the parentheses add
--   some visual noise and we still have to understand it from the inside
--   out. Let's see how you might write this function with Overture.
--   
--   <pre>
--   &gt;&gt;&gt; let f4 x = negate &lt;. recip &lt;. succ &lt;| x
--   
--   &gt;&gt;&gt; let f5 x = negate &lt;. recip &lt;| succ x
--   
--   &gt;&gt;&gt; let f6 = negate &lt;. recip &lt;. succ
--   
--   &gt;&gt;&gt; let f7 = succ .&gt; recip .&gt; negate
--   
--   &gt;&gt;&gt; let f8 x = succ x |&gt; recip .&gt; negate
--   
--   &gt;&gt;&gt; let f9 x = x |&gt; succ .&gt; recip .&gt; negate
--   </pre>
--   
--   <tt>f6</tt> is basically the same as the original <tt>f</tt>, but it
--   hints at which way the data will be flowing through it. <tt>f9</tt> is
--   my favorite because I can easily see that I take some value and apply
--   a series of transformations to it. If I wanted to express this
--   function in the pointfree style, I would prefer <tt>f7</tt> because it
--   reads from left to right.
module Overture

-- | <a>Function composition</a>. This is like the <a>.</a> operator from
--   the <a>Prelude</a>.
--   
--   This function combines two other functions. The result of
--   <tt><a>compose</a> f g</tt> is a new function that applies <tt>f</tt>
--   first and then applies <tt>g</tt>. In other words, <tt><a>compose</a>
--   f g x</tt> is the same as <tt>g (f x)</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; let f = compose succ recip
--   
--   &gt;&gt;&gt; f 9
--   0.1
--   </pre>
--   
--   Composing many functions together quickly becomes unwieldy. Use
--   <a>.&gt;</a> or <a>&lt;.</a> instead.
--   
--   <pre>
--   &gt;&gt;&gt; let g = succ `compose` recip `compose` negate
--   
--   &gt;&gt;&gt; g 9
--   -0.1
--   </pre>
compose :: (a -> b) -> (b -> c) -> (a -> c)

-- | Left-associative <a>compose</a> operator. This is like a flipped
--   version of the <a>.</a> operator from the <a>Prelude</a>. It is also
--   similar to the <a>&gt;&gt;&gt;</a> operator from
--   <a>Control.Category</a>.
--   
--   This operator combines two other functions more naturally than
--   <a>compose</a>. The result of <tt>f <a>.&gt;</a> g</tt> is a new
--   function that applies <tt>f</tt> first and then applies <tt>g</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; let f = succ .&gt; recip
--   
--   &gt;&gt;&gt; f 9
--   0.1
--   </pre>
--   
--   When reading code, pronounce this operator as "and then". So the above
--   example could be read as: "Add one, <i>and then</i> take the
--   reciprocal."
--   
--   Thanks to its high precedence, composing many functions together is
--   easy with this operator.
--   
--   <pre>
--   &gt;&gt;&gt; let g = succ .&gt; recip .&gt; negate
--   
--   &gt;&gt;&gt; g 9
--   -0.1
--   </pre>
(.>) :: (a -> b) -> (b -> c) -> (a -> c)

-- | Right-associative <a>compose</a> operator. This is like the <a>.</a>
--   operator from the <a>Prelude</a>. It is also similar to the
--   <a>&lt;&lt;&lt;</a> operator from <a>Control.Category</a>.
--   
--   Sometimes it is more convenient to combine functions from right to
--   left. The result of <tt>g <a>&lt;.</a> f</tt> is a new function that
--   applies <tt>g</tt> but first applies <tt>f</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; let f = recip &lt;. succ
--   
--   &gt;&gt;&gt; f 9
--   0.1
--   </pre>
--   
--   Pronounce this operator as "but first" when reading code. The example
--   above could be read as: "Take the reciprocal, <i>but first</i> add
--   one."
--   
--   Composing many functions together is easy with this operator thanks to
--   its high precedence.
--   
--   <pre>
--   &gt;&gt;&gt; let g = negate &lt;. recip &lt;. succ
--   
--   &gt;&gt;&gt; g 9
--   -0.1
--   </pre>
(<.) :: (b -> c) -> (a -> b) -> (a -> c)

-- | <a>Function application</a>. This is like the <a>$</a> operator from
--   the <a>Prelude</a>.
--   
--   This function applies an argument to function.
--   
--   <pre>
--   &gt;&gt;&gt; apply 4 succ
--   5
--   </pre>
--   
--   Using this function to apply many arguments is cumbersome. Use
--   <a>|&gt;</a> or <a>&lt;|</a> instead.
--   
--   <pre>
--   &gt;&gt;&gt; 4 `apply` succ `apply` recip
--   0.2
--   </pre>
--   
--   This function usually isn't necessary since <tt><a>apply</a> x f</tt>
--   is the same as <tt>f x</tt>. However it can come in handy when working
--   with higher-order functions.
--   
--   <pre>
--   &gt;&gt;&gt; map (apply 4) [succ, recip]
--   [5.0,0.25]
--   </pre>
apply :: a -> (a -> b) -> b

-- | Left-associative <a>apply</a> operator. This is like a flipped version
--   of the <a>$</a> operator from the <a>Prelude</a>.
--   
--   This operator applies an argument to a function. The result of <tt>x
--   <a>|&gt;</a> f</tt> is <tt>f x</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; 4 |&gt; succ
--   5
--   </pre>
--   
--   Since this operator has such low precedence, it can be used to remove
--   parentheses in complicated expressions.
--   
--   <pre>
--   &gt;&gt;&gt; 4 |&gt; succ |&gt; recip
--   0.2
--   </pre>
--   
--   When reading code, pronounce this operator as "pipe into". So the
--   above example can be read as: "Four <i>piped into</i> plus one,
--   <i>piped into</i> the reciprocal."
--   
--   It can also be used with higher-order functions, although <a>apply</a>
--   might be clearer.
--   
--   <pre>
--   &gt;&gt;&gt; map (4 |&gt;) [succ, recip]
--   [5.0,0.25]
--   </pre>
(|>) :: a -> (a -> b) -> b

-- | Right-associative <a>apply</a> operator. This is like the <a>$</a>
--   operator from the <a>Prelude</a>.
--   
--   Sometimes it is more convenient to apply arguments right to left. The
--   result of <tt>f <a>&lt;|</a> x</tt> is <tt>f x</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; succ &lt;| 4
--   5
--   </pre>
--   
--   Like <a>|&gt;</a>, this operator has low precedence so it can be used
--   to remove parentheses.
--   
--   <pre>
--   &gt;&gt;&gt; recip &lt;| succ &lt;| 4
--   0.2
--   </pre>
--   
--   Pronounce this operator as "pipe from" when reading code. The example
--   above can be read as: "The reciprocal <i>piped from</i> plus one,
--   <i>piped from</i> five."
--   
--   This operator is a convenient alternative to <tt>flip
--   <a>apply</a></tt>.
--   
--   <pre>
--   &gt;&gt;&gt; map (&lt;| 4) [succ, recip]
--   [5.0,0.25]
--   </pre>
(<|) :: (a -> b) -> a -> b

-- | Strict function application. This is like the <a>$!</a> operator from
--   the <a>Prelude</a>.
--   
--   This is the strict version of <a>apply</a>. It evaluates its argument
--   with <a>seq</a> before applying it to the given function. In other
--   words, <tt><a>apply'</a> x f</tt> is the same as <tt>x `seq`
--   <a>apply</a> x f</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; apply' undefined (const 0)
--   *** Exception: Prelude.undefined
--   </pre>
apply' :: a -> (a -> b) -> b

-- | Left-associative <a>apply'</a> operator. This is like a flipped
--   version of the <a>$!</a> operator from the <a>Prelude</a>.
--   
--   This is the strict version of the <a>|&gt;</a> operator.
--   
--   <pre>
--   &gt;&gt;&gt; undefined !&gt; const 0
--   *** Exception: Prelude.undefined
--   </pre>
(!>) :: a -> (a -> b) -> b

-- | Right-associative <a>apply'</a> operator. This is like the <a>$!</a>
--   operator from the <a>Prelude</a>.
--   
--   This is the strict version of the <a>&lt;!</a> operator.
--   
--   <pre>
--   &gt;&gt;&gt; const 0 &lt;! undefined
--   *** Exception: Prelude.undefined
--   </pre>
(<!) :: (a -> b) -> a -> b
