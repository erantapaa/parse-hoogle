-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | RFC 5389: Session Traversal Utilities for NAT (STUN) client
--   
--   RFC 5389: Session Traversal Utilities for NAT (STUN) client
@package stunclient
@version 0.1.0.0


-- | This module exports <i>everything</i> from this package (except some
--   functions defined in Network.Stun) to avoid the need for copy/paste.
module Network.Stun.Internal
type Method = Word16
data MessageClass
Request :: MessageClass
Success :: MessageClass
Failure :: MessageClass
Indication :: MessageClass
data Attribute
Attribute :: {-# UNPACK #-} !Word16 -> ByteString -> Attribute
attributeType :: Attribute -> {-# UNPACK #-} !Word16
attributeValue :: Attribute -> ByteString
data TransactionID
TID :: {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> TransactionID
data Message
Message :: !Method -> !MessageClass -> !TransactionID -> [Attribute] -> !Bool -> Message
messageMethod :: Message -> !Method
messageClass :: Message -> !MessageClass
transactionID :: Message -> !TransactionID
messageAttributes :: Message -> [Attribute]
fingerprint :: Message -> !Bool

-- | <a>magic cookie</a> constant
cookie :: Word32
data AttributeError
AttributeWrongType :: AttributeError
AttributeDecodeError :: AttributeError
class Serialize a => IsAttribute a where toAttribute x = Attribute {attributeType = attributeTypeValue x, attributeValue = encode x} fromAttribute (Attribute tp vl) = x where x = if tp == attributeTypeValue ((\ (Right r) -> r) x) then case decode vl of { Left _ -> Left AttributeDecodeError Right r -> Right r } else Left AttributeWrongType
attributeTypeValue :: IsAttribute a => a -> Word16
toAttribute :: IsAttribute a => a -> Attribute
fromAttribute :: IsAttribute a => Attribute -> Either AttributeError a
findAttribute :: IsAttribute a => [Attribute] -> Either AttributeError [a]
putAttribute :: Attribute -> PutM ()
getAttribute :: Get Attribute
encodeMessageType :: Method -> MessageClass -> Word16
decodeMessageType :: Word16 -> (Method, MessageClass)
fingerprintXorConstant :: Word32
fingerprintAttribute :: Word32 -> Attribute
putPlainMessage :: Int -> Message -> PutM ()
putMessage :: Message -> PutM ()
getMessage :: Get Message
showBits :: Bits a => a -> [Char]
data Credentials

-- | username realm password
LongTerm :: !Text -> !Text -> !Text -> Credentials

-- | username password
ShortTerm :: !Text -> !Text -> Credentials
data Username
Username :: !Text -> Username
unUsername :: Username -> !Text
data MessageIntegrity
MessageIntegrity :: !ByteString -> MessageIntegrity
miHmac :: MessageIntegrity -> !ByteString

-- | Generate a MESSAGE-INTEGRITY attribute and append it to the message
--   attribute list
withMessageIntegrity :: Credentials -> Message -> Message

-- | Checks the credentials of a message
--   
--   <ul>
--   <li>returns Nothing when the credentials don't match</li>
--   <li>returns Just (False, oldmsg) when no MESSAGE-INTEGRITY attribute
--   is present</li>
--   </ul>
--   
--   where oldmsg is the unchanged message passed to the function
--   
--   <ul>
--   <li>returns Just (True, prunedmsg) when the attribute is present and
--   matches</li>
--   </ul>
--   
--   where prunedmsg is the message with all fields after MESSAGE-INTEGRITY
--   removed
checkMessageIntegrity :: Credentials -> Message -> Maybe (Bool, Message)
data ErrorAttribute
ErrorAttribute :: {-# UNPACK #-} !Int -> !Text -> ErrorAttribute

-- | Code has to be between 300 and 699 inclusive
code :: ErrorAttribute -> {-# UNPACK #-} !Int

-- | At most 128 unicode characters
reason :: ErrorAttribute -> !Text
putErrorAttribute :: ErrorAttribute -> PutM ()
getErrorAttribute :: Get ErrorAttribute
errTryAlternate :: ErrorAttribute
errBadRequest :: ErrorAttribute
errUnauthorized :: ErrorAttribute
errUnknownAttribute :: ErrorAttribute
errStaleNonce :: ErrorAttribute
errServerError :: ErrorAttribute
xmaAttributeType :: Word16
maAttributeType :: Word16
newtype MappedAddress
MA :: SockAddr -> MappedAddress
unMA :: MappedAddress -> SockAddr
newtype XorMappedAddress
XMA :: SockAddr -> XorMappedAddress
unXMA :: XorMappedAddress -> SockAddr
halfCookie :: Word16
putAddress :: SockAddr -> PutM ()
getAddress :: Get SockAddr
fromXorMappedAddress :: TransactionID -> XorMappedAddress -> SockAddr
xorMappedAddress :: TransactionID -> SockAddr -> XorMappedAddress
xorAddress :: TransactionID -> SockAddr -> SockAddr


-- | Session Traversal Utilities for NAT (STUN)
--   
--   <a>http://tools.ietf.org/html/rfc5389</a>
--   
--   For a simple way to find the mapped address see
--   <a>findMappedAddress</a>
module Network.Stun

-- | Generate a new bind request
bindRequest :: IO Message

-- | Send a STUN request to the server denoted by address and wait for an
--   answer. The request will be sucessively sent once for each element of
--   timeOuts until an answer is received or all requests time out.
stunRequest :: SockAddr -> PortNumber -> [Integer] -> Message -> IO (Either StunError Message)

-- | Same as <a>stunRequest</a> but returns the used socket
stunRequest' :: SockAddr -> PortNumber -> [Integer] -> Message -> IO (Either StunError (Message, Socket))
data Message
Message :: !Method -> !MessageClass -> !TransactionID -> [Attribute] -> !Bool -> Message
messageMethod :: Message -> !Method
messageClass :: Message -> !MessageClass
transactionID :: Message -> !TransactionID
messageAttributes :: Message -> [Attribute]
fingerprint :: Message -> !Bool
data MessageClass
Request :: MessageClass
Success :: MessageClass
Failure :: MessageClass
Indication :: MessageClass
data TransactionID
TID :: {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> {-# UNPACK #-} !Word32 -> TransactionID
data Attribute
Attribute :: {-# UNPACK #-} !Word16 -> ByteString -> Attribute
attributeType :: Attribute -> {-# UNPACK #-} !Word16
attributeValue :: Attribute -> ByteString
findAttribute :: IsAttribute a => [Attribute] -> Either AttributeError [a]
class Serialize a => IsAttribute a where toAttribute x = Attribute {attributeType = attributeTypeValue x, attributeValue = encode x} fromAttribute (Attribute tp vl) = x where x = if tp == attributeTypeValue ((\ (Right r) -> r) x) then case decode vl of { Left _ -> Left AttributeDecodeError Right r -> Right r } else Left AttributeWrongType
attributeTypeValue :: IsAttribute a => a -> Word16
toAttribute :: IsAttribute a => a -> Attribute
fromAttribute :: IsAttribute a => Attribute -> Either AttributeError a

-- | Get the mapped address by sending a bind request to <i>host</i>, using
--   <i>localport</i> . The request will be retransmitted for each entry of
--   <i>timeOuts</i>. If the list of time outs is empty, a default of
--   500ms, 1s and 2s is used returns the reflexive and the local address
findMappedAddress :: SockAddr -> PortNumber -> [Integer] -> IO (Either StunError (SockAddr, SockAddr))
data MappedAddress
data XorMappedAddress
fromXorMappedAddress :: TransactionID -> XorMappedAddress -> SockAddr
xorMappedAddress :: TransactionID -> SockAddr -> XorMappedAddress
data Username
Username :: !Text -> Username
unUsername :: Username -> !Text
data Credentials

-- | username realm password
LongTerm :: !Text -> !Text -> !Text -> Credentials

-- | username password
ShortTerm :: !Text -> !Text -> Credentials

-- | Generate a MESSAGE-INTEGRITY attribute and append it to the message
--   attribute list
withMessageIntegrity :: Credentials -> Message -> Message

-- | Checks the credentials of a message
--   
--   <ul>
--   <li>returns Nothing when the credentials don't match</li>
--   <li>returns Just (False, oldmsg) when no MESSAGE-INTEGRITY attribute
--   is present</li>
--   </ul>
--   
--   where oldmsg is the unchanged message passed to the function
--   
--   <ul>
--   <li>returns Just (True, prunedmsg) when the attribute is present and
--   matches</li>
--   </ul>
--   
--   where prunedmsg is the message with all fields after MESSAGE-INTEGRITY
--   removed
checkMessageIntegrity :: Credentials -> Message -> Maybe (Bool, Message)
data StunError
TimeOut :: StunError
ProtocolError :: StunError
ErrorMsg :: !Message -> StunError
WrongMessageType :: !Message -> StunError
data ErrorAttribute
ErrorAttribute :: {-# UNPACK #-} !Int -> !Text -> ErrorAttribute

-- | Code has to be between 300 and 699 inclusive
code :: ErrorAttribute -> {-# UNPACK #-} !Int

-- | At most 128 unicode characters
reason :: ErrorAttribute -> !Text
errTryAlternate :: ErrorAttribute
errBadRequest :: ErrorAttribute
errUnauthorized :: ErrorAttribute
errUnknownAttribute :: ErrorAttribute
errStaleNonce :: ErrorAttribute
errServerError :: ErrorAttribute
instance Show StunError
instance Eq StunError
instance Error StunError
