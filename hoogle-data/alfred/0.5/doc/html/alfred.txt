-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | utility library for Alfred version 2
--   
@package alfred
@version 0.5


-- | This module provides utility functions to query web APIs. These
--   queries can then be used to feed Alfred with suggestions.
module Alfred.Query

-- | This function performs a query by performing an HTTP GET request at
--   the url obtained by concatenating the first argument with the second
--   one (after escaping it). The returned query takes a string as an
--   argument and appends it to the base url to obtain the url that is used
--   for the query. The result is then parsed as a JSON object. For
--   example, for a Google search:
--   
--   <pre>
--   runQuery :: Query (Text,[Text])
--   runQuery = jsonQuery suggestURL
--   
--   suggestURL = "<a>http://google.com/complete/search?client=firefox&amp;q="</a>
--   </pre>
jsonQuery :: FromJSON a => Text -> Query a

-- | This function is a variant of <a>jsonQuery</a> that takes a function
--   as an additional argument that is used to transform the raw
--   <a>ByteString</a> that is returned by the query. This can be helpful
--   if the source does not provide valid UTF-8 formatted JSON. For
--   example, for a Google search:
--   
--   <pre>
--   runQuery :: Query (Text,[Text])
--   runQuery = jsonQuery' (encodeUtf8 . decodeLatin1) suggestURL
--   
--   suggestURL = "<a>http://google.com/complete/search?client=firefox&amp;q="</a>
--   </pre>
jsonQuery' :: FromJSON a => (ByteString -> ByteString) -> Text -> Query a

-- | This function performs a query by performing an HTTP GET request at
--   the url obtained by concatenating the first argument with the second
--   one (after escaping it). The returned query takes a string as an
--   argument and appends it to the base url to obtain the url that is used
--   for the query. The result is then parsed as an XML document. For
--   example, for a DBLP search:
--   
--   <pre>
--   runQuery :: Query (Node Text Text)
--   runQuery query = xmlQuery suggestURL query
--   
--   suggestURL = "<a>http://dblp.uni-trier.de/search/author?xauthor="</a>
--   </pre>
xmlQuery :: (GenericXMLString a, GenericXMLString b) => Text -> Query (Node a b)

-- | Lazy variant of <a>xmlQueryLazy</a>. This function may be useful if
--   results tend to be lengthy and only a small prefix of the result is
--   used.
xmlQueryLazy :: (GenericXMLString a, GenericXMLString b) => Text -> Query (Node a b)

-- | Escapes the string for use in a URL.
escapeString :: String -> String

-- | Escapes the text for use in a URL.
escapeText :: Text -> Text

-- | Type representing queries for use in <a>runScript</a>.
type Query a = Query' Text a

-- | Functorial map for <a>Query'</a>.
transformQuery :: (a -> b) -> Query' q a -> Query' q b

-- | Alternative type representing queries for use in <a>runScript'</a>.
type Query' q a = q -> IO (Either Text a)


-- | This module provides utility functions to interact with Alfred version
--   2. It is intended to be used for writing "script filters" used in
--   Alfred workflows.
--   
--   For example the following excerpt defines a script for Google search
--   with auto completion:
--   
--   <pre>
--   import Alfred
--   import Alfred.Query
--   import qualified Data.Text as T
--   import Data.Text (Text)
--   
--   runQuery :: Query (Text,[Text])
--   runQuery = jsonQuery suggestURL
--   
--   suggestURL = "<a>http://google.com/complete/search?client=firefox&amp;q="</a>
--   
--   mkItems :: Renderer [Text]
--   mkItems = searchRenderer Search {
--               searchURL = s -&gt; T.concat ["<a>https://www.google.com/search?q="</a>, s],
--               notFound = s -&gt; T.concat ["No suggestion. Google for ", s, "."],
--               found = s -&gt; T.concat ["Search results for ", s]}
--   
--   main = runScript (transformQuery snd runQuery) mkItems
--   </pre>
module Alfred

-- | This type represents items that should be rendered by Alfred as the
--   result of a script filter.
data Item
Item :: Maybe Text -> Text -> Bool -> Maybe Bool -> Maybe Text -> Text -> Text -> Maybe Icon -> Item
uid :: Item -> Maybe Text
arg :: Item -> Text
isFile :: Item -> Bool
valid :: Item -> Maybe Bool
autocomplete :: Item -> Maybe Text
title :: Item -> Text
subtitle :: Item -> Text
icon :: Item -> Maybe Icon

-- | Default item.
item :: Item

-- | Represents icons of an item.
data Icon
FileIcon :: Text -> Icon
FileType :: Text -> Icon
IconFile :: Text -> Icon

-- | This type represents rendering functions as used by <a>runScript</a>.
type Renderer a = Renderer' Text a

-- | This type represents rendering functions as used by <a>runScript'</a>.
type Renderer' q a = q -> Either Text a -> Items

-- | This function runs a script consisting of a query function and a
--   rendering function. The query function takes string parameters and
--   produces an output that is then passed to the rendering function to
--   produce items that are then passed to Alfred.
runScript :: Query a -> Renderer a -> IO ()

-- | This function runs a script consisting of a query function and a
--   rendering function. The query function takes string parameters and
--   produces an output that is then passed to the rendering function to
--   produce items that are then passed to Alfred.
runScript' :: ([Text] -> q) -> Query' q a -> Renderer' q a -> IO ()

-- | This function produces a rendering function for standard search
--   scripts. For example a Google search rendering function is defined as
--   follows:
--   
--   <pre>
--   mkItems :: Renderer [Text]
--   mkItems = searchRenderer Search {
--               searchURL = s -&gt; T.concat ["<a>https://www.google.com/search?q="</a>, s],
--               notFound = s -&gt; T.concat ["No suggestion. Google for ", s, "."],
--               found = s -&gt; T.concat ["Search results for ", s]}
--   </pre>
searchRenderer :: Search Text -> Renderer [Text]

-- | This function produces a rendering function for standard search
--   scripts. As opposed to the simpler variant <a>searchRenderer</a>, this
--   function works on arbitrary query result types. For example a DBLP
--   search rendering function is defined as follows:
--   
--   <pre>
--   mkItems :: Renderer [(Text, Text)]
--   mkItems = searchRenderer' Search'{
--               simpleSearch = Search {
--                 searchURL = s -&gt; T.concat ["<a>http://dblp.uni-trier.de/search/author?author="</a>, s],
--                 notFound = s -&gt; T.concat ["No suggestion. Search DBLP for ", s, "."],
--                 found = (s,_) -&gt; T.concat ["Open bibliography of ", s]},
--               resultURL = (_,r) -&gt; T.concat ["<a>http://dblp.uni-trier.de/pers/hd/",r,".html"]</a>,
--               resultTitle = fst}
--   </pre>
--   
--   In the above example the query result type is <tt>(Text,Text)</tt>
--   where the first component is the name of the result and the second
--   component is used to construct a URL that leads directly to the search
--   result.
searchRenderer' :: Search' a -> Renderer [a]

-- | This data type represents standard search scripts used by
--   <a>searchRenderer</a>.
data Search a
Search :: (Text -> Text) -> (Text -> Text) -> (a -> Text) -> Search a
searchURL :: Search a -> Text -> Text
notFound :: Search a -> Text -> Text
found :: Search a -> a -> Text

-- | This data type represents advanced standard search scripts used by
--   <a>searchRenderer'</a>.
data Search' a
Search' :: Search a -> (a -> Text) -> (a -> Text) -> Search' a
simpleSearch :: Search' a -> Search a
resultURL :: Search' a -> a -> Text
resultTitle :: Search' a -> a -> Text
