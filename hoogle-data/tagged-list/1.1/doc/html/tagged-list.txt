-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lists tagged with a type-level natural number representing their length.
--   
--   This package contains a datatype, <a>TaggedList</a>, that provides a
--   fixed-length list tagged with a phantom type-level natural number that
--   corresponds to the length of the list. It also contains some basic
--   operations on these lists, as well as a typeclass for converting
--   tagged lists to and from tuples.
--   
--   New in version 1.1: added function castTag, improved error reporting
--   in fromList, and fixed compiler error with GHC 7.0.*
@package tagged-list
@version 1.1

module Data.List.Tagged

-- | <a>TaggedList</a> is a data structure that represents a linked-list
--   tagged with a phantom type-level natural number representing the
--   length of the list.
data TaggedList n α
E :: TaggedList Zero α
(:.) :: α -> TaggedList n α -> TaggedList (SuccessorTo n) α

-- | <a>UntaggedList</a> is a wrapper around TaggedList that lets you hide
--   the length tag; the purpose of this is to allow for situations in
--   which you have a tagged list with an unknown length.
data UntaggedList α
UntaggedList :: (TaggedList n α) -> UntaggedList α

-- | <a>TL</a> is a newtype wrapper around a <a>TaggedList</a> which flips
--   the two type arguments; this type was introduced to make it easier to
--   define inductive operations on TaggedLists.
newtype TL α n
TL :: TaggedList n α -> TL α n
unwrapTL :: TL α n -> TaggedList n α

-- | <a>ATL</a> is a newtype wrapper around some functor of
--   <a>TaggedList</a> which flips the two type arguments; this type was
--   introduced to make it easier to define inductive operations on
--   functors of TaggedLists.
newtype ATL t α n
ATL :: t (TaggedList n α) -> ATL t α n
unwrapATL :: ATL t α n -> t (TaggedList n α)

-- | Appends two tagged lists.
--   
--   (Note: The order of the arguments to Plus is important since append is
--   defined recursively over its *first* argument.)
append :: TaggedList m α -> TaggedList n α -> TaggedList (Plus m n) α

-- | Casts the tag of a list, given a proof that the new tag is equal to
--   the old tag.
castTag :: m :=: n -> TaggedList m α -> TaggedList n α

-- | Compares two lists, which may be of different sizes; <a>False</a> is
--   returned if the lists do not have the same size.
eqLists :: Eq α => TaggedList m α -> TaggedList n α -> Bool

-- | If the input list of <a>Either</a> values has only <tt>Rights</tt>,
--   then this function returns a tagged list of the same length with the
--   values contained in each <a>Right</a>. Otherwise, this function
--   returns an ordinary list with the values contained in each
--   <a>Left</a>.
extractRightsOrLefts :: TaggedList n (Either α β) -> Either [α] (TaggedList n β)

-- | Converts a list to a <a>TaggedList</a>, returning _|_ if the length of
--   the list does not match the length tag of the return type.
fromList :: NaturalNumber n => [α] -> TaggedList n α

-- | Converts an arbitrary list to an <a>UntaggedList</a>.
fromListAsUntagged :: [α] -> UntaggedList α

-- | Returns the head of a tagged list.
--   
--   Note that unlike its List counterpart, this function never returns _|_
--   since the existence of at least one element is guaranteed by the type
--   system.
head :: TaggedList (SuccessorTo n) α -> α

-- | Appends two lists together, and returns both the result and a splitter
--   function that allows you to take another list of the same size as the
--   result (though possible of a different type) and split it back into
--   two lists of the sizes of the arguments to this function.
join :: TaggedList m α -> TaggedList n α -> (TaggedList (Plus m n) α, TaggedList (Plus m n) β -> (TaggedList m β, TaggedList n β))

-- | Returns the length of the list as a value-level natural number.
length :: NaturalNumber n => TaggedList n α -> N n

-- | Applies a function to every element of the list.
map :: (α -> β) -> TaggedList n α -> TaggedList n β

-- | Performs an action for every element in the list and returns ().
mapM_ :: Monad m => (α -> m β) -> TaggedList n α -> m ()

-- | Replaces all of the elements in a given tagged list with the members
--   of an ordinary list, returning _|_ if the length of the list does not
--   match the length tag.
replace :: [α] -> TaggedList n β -> TaggedList n α

-- | Returns the tail of a tagged list.
--   
--   Note that unlike its List counterpart, this function never returns _|_
--   since the existence of at least one element is guaranteed by the type
--   system.
tail :: TaggedList (SuccessorTo n) α -> TaggedList n α

-- | Converts a tagged list to an ordinary list.
toList :: TaggedList n α -> [α]

-- | This is a convenience function for lifting a function on <a>TL</a> to
--   a function on <a>TaggedList</a>.
--   
--   (Note: <a>TL</a> is just a newtype wrapper around <a>TaggedList</a>
--   that swaps the two type arguments to make it easier to perform
--   inductive operations.)
withTL :: (TL α n -> TL β n) -> TaggedList n α -> TaggedList n β

-- | Applies a list of functions to a list of inputs.
zipf :: TaggedList n (α -> β) -> TaggedList n α -> TaggedList n β

-- | TupleOf is a type family that maps type-level natural numbers (from N0
--   to N15) to tuples with the corresponding number of entries.

-- | The class TupleConvertable provides methods for converting tagged
--   lists to and from tuples.
class TupleConvertable n
fromTuple :: TupleConvertable n => TupleOf n α -> TaggedList n α
toTuple :: TupleConvertable n => TaggedList n α -> TupleOf n α
instance Typeable2 TaggedList
instance Typeable1 UntaggedList
instance TupleConvertable N15
instance TupleConvertable N14
instance TupleConvertable N13
instance TupleConvertable N12
instance TupleConvertable N11
instance TupleConvertable N10
instance TupleConvertable N9
instance TupleConvertable N8
instance TupleConvertable N7
instance TupleConvertable N6
instance TupleConvertable N5
instance TupleConvertable N4
instance TupleConvertable N3
instance TupleConvertable N2
instance TupleConvertable N1
instance TupleConvertable N0
instance Induction n => Traversable (TaggedList n)
instance Induction n => Functor (TaggedList n)
instance Induction n => Foldable (TaggedList n)
instance (Induction n, Eq α) => Eq (TaggedList n α)
instance Binary α => Binary (UntaggedList α)
instance (NaturalNumber n, Binary α) => Binary (TaggedList n α)
