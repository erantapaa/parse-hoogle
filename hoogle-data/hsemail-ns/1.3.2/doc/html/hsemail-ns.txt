-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Internet Message Parsers
--   
--   Nonstandard parsers for the syntax defined in RFC2822, forked from
--   hsemail proper. Should not be used for parsing incoming emails, only
--   emails stored on disk.
@package hsemail-ns
@version 1.3.2


-- | This module provides parsers for the grammar defined in RFC2234,
--   "Augmented BNF for Syntax Specifications: ABNF",
--   <a>http://www.faqs.org/rfcs/rfc2234.html</a>. The terminal called
--   <tt>char</tt> in the RFC is called <a>character</a> here to avoid
--   conflicts with Parsec's <a>char</a> function.
--   
--   Addendum for Nonstandard Version: This module deviates from the RFC
--   currently in * none currently.
--   
--   These allowances are subject to change, and should not be used when
--   parsing incoming messages, only for parsing messages that have been
--   stored on disk. The goal of these nonstandard Parsers is to provide a
--   higher probability of parsing _common_ Headers (rather than only those
--   explicitly defined in the RFC) as well as allowing for potential
--   oddities / changes that may occur during storage of an email message.
--   These parsers have be rebranded so as not to conflict with the
--   standard parsers available from the excellent <tt>hsemail</tt>
--   package, upon which this package depends. For patches to this package
--   only (namely 'hsemail-ns', patches should be sent to
--   <a>jfredett@gmail.com</a>, for patches to the Proper parsers, you can
--   send them to the original maintainer.
module Text.ParserCombinators.Parsec.Rfc2234NS

-- | Case-insensitive variant of Parsec's <a>char</a> function.
caseChar :: Char -> CharParser st Char

-- | Case-insensitive variant of Parsec's <a>string</a> function.
caseString :: String -> CharParser st ()

-- | Match a parser at least <tt>n</tt> times.
manyN :: Int -> GenParser a b c -> GenParser a b [c]

-- | Match a parser at least <tt>n</tt> times, but no more than <tt>m</tt>
--   times.
manyNtoM :: Int -> Int -> GenParser a b c -> GenParser a b [c]

-- | Helper function to generate <a>Parser</a>-based instances for the
--   <a>Read</a> class.
parsec2read :: Parser a -> String -> [(a, String)]

-- | Match any character of the alphabet.
alpha :: CharParser st Char

-- | Match either "1" or "0".
bit :: CharParser st Char

-- | Match any 7-bit US-ASCII character except for NUL (ASCII value 0, that
--   is).
character :: CharParser st Char

-- | Match the carriage return character <tt>\r</tt>.
cr :: CharParser st Char

-- | Match returns the linefeed character <tt>\n</tt>.
lf :: CharParser st Char

-- | Match the Internet newline <tt>\r\n</tt>.
crlf :: CharParser st String

-- | Match any US-ASCII control character. That is any character with a
--   decimal value in the range of [0..31,127].
ctl :: CharParser st Char

-- | Match the double quote character "<tt>"</tt>".
dquote :: CharParser st Char

-- | Match any character that is valid in a hexadecimal number; ['0'..'9']
--   and ['A'..'F','a'..'f'] that is.
hexdig :: CharParser st Char

-- | Match the tab ("<tt>\t</tt>") character.
htab :: CharParser st Char

-- | Match "linear white-space". That is any number of consecutive
--   <a>wsp</a>, optionally followed by a <a>crlf</a> and (at least) one
--   more <a>wsp</a>.
lwsp :: CharParser st String

-- | Match <i>any</i> character.
octet :: CharParser st Char

-- | Match the space.
sp :: CharParser st Char

-- | Match any printable ASCII character. (The "v" stands for "visible".)
--   That is any character in the decimal range of [33..126].
vchar :: CharParser st Char

-- | Match either <a>sp</a> or <a>htab</a>.
wsp :: CharParser st Char

-- | Match a "quoted pair". Any characters (excluding CR and LF) may be
--   quoted.
quotedPair :: CharParser st String

-- | Match a quoted string. The specials "<tt>\</tt>" and "<tt>"</tt>" must
--   be escaped inside a quoted string; CR and LF are not allowed at all.
quotedString :: CharParser st String


-- | This module provides parsers for the grammar defined in RFC2822,
--   "Internet Message Format",
--   <a>http://www.faqs.org/rfcs/rfc2822.html</a>.
--   
--   <i>Please note:</i> The module is not particularly well tested.
--   
--   Addendum for Nonstandard Version: This module deviates from the RFC
--   currently in * Allowing for non-standard line endings.
--   
--   These allowances are subject to change, and should not be used when
--   parsing incoming messages, only for parsing messages that have been
--   stored on disk. The goal of these nonstandard Parsers is to provide a
--   higher probability of parsing Common_ Headers (rather than only those
--   explicitly defined in the RFC) as well as allowing for potential
--   oddities / changes that may occur during storage of an email message.
--   These parsers have be rebranded so as not to conflict with the
--   standard parsers available from the excellent <tt>hsemail</tt>
--   package, upon which this package depends. For patches to this package
--   only (namely 'hsemail-ns', patches should be sent to
--   <a>jfredett@gmail.com</a>, for patches to the Proper parsers, you can
--   send them to the original maintainer.
module Text.ParserCombinators.Parsec.Rfc2822NS

-- | Return <tt>Nothing</tt> if the given parser doesn't match. This
--   combinator is included in the latest parsec distribution as
--   <tt>optionMaybe</tt>, but ghc-6.6.1 apparently doesn't have it.
maybeOption :: GenParser tok st a -> GenParser tok st (Maybe a)

-- | <tt>unfold</tt> <tt>=</tt> <tt>between (optional cfws) (optional
--   cfws)</tt>
unfold :: CharParser a b -> CharParser a b

-- | Construct a parser for a message header line from the header's name
--   and a parser for the body.
header :: String -> CharParser a b -> CharParser a b

-- | Like <a>header</a>, but allows the obsolete white-space rules.
obsHeader :: String -> CharParser a b -> CharParser a b

-- | Match any US-ASCII non-whitespace control character.
noWsCtl :: CharParser a Char

-- | Match any US-ASCII character except for <tt>r</tt>, <tt>n</tt>.
text :: CharParser a Char

-- | Match any of the RFC's "special" characters:
--   <tt>()&lt;&gt;[]:;@,.\"</tt>.
specials :: CharParser a Char

-- | Match a "quoted pair". All characters matched by <a>text</a> may be
--   quoted. Note that the parsers returns <i>both</i> characters, the
--   backslash and the actual content.
quotedPair :: CharParser a String

-- | Match "folding whitespace". That is any combination of <a>wsp</a> and
--   <a>crlf</a> followed by <a>wsp</a>.
fws :: CharParser a String

-- | Match any non-whitespace, non-control character except for
--   "<tt>(</tt>", "<tt>)</tt>", and "<tt>\</tt>". This is used to describe
--   the legal content of <a>comment</a>s.
--   
--   <i>Note</i>: This parser accepts 8-bit characters, even though this is
--   not legal according to the RFC. Unfortunately, 8-bit content in
--   comments has become fairly common in the real world, so we'll just
--   accept the fact.
ctext :: CharParser a Char

-- | Match a "comments". That is any combination of <a>ctext</a>,
--   'quotedPair 's, and <a>fws</a> between brackets. Comments may nest.
comment :: CharParser a String

-- | Match any combination of <a>fws</a> and <a>comments</a>.
cfws :: CharParser a String

-- | Match any US-ASCII character except for control characters,
--   <a>specials</a>, or space. <a>atom</a> and <a>dotAtom</a> are made up
--   of this.
atext :: CharParser a Char

-- | Match one or more <a>atext</a> characters and skip any preceeding or
--   trailing <a>cfws</a>.
atom :: CharParser a String

-- | Match <a>dotAtomText</a> and skip any preceeding or trailing
--   <a>cfws</a>.
dotAtom :: CharParser a String

-- | Match two or more <a>atext</a>s interspersed by dots.
dotAtomText :: CharParser a String

-- | Match any non-whitespace, non-control US-ASCII character except for
--   "<tt>\</tt>" and "<tt>"</tt>".
qtext :: CharParser a Char

-- | Match either <a>qtext</a> or 'quotedPair '.
qcontent :: CharParser a String

-- | Match any number of <a>qcontent</a> between double quotes. Any
--   <a>cfws</a> preceeding or following the "atom" is skipped
--   automatically.
quotedString :: CharParser a String

-- | Match either <a>atom</a> or <a>quotedString</a>.
word :: CharParser a String

-- | Match either one or more <a>word</a>s or an <a>obsPhrase</a>.
phrase :: CharParser a [String]

-- | Match any non-whitespace, non-control US-ASCII character except for
--   "<tt>\</tt>" and "<tt>"</tt>".
utext :: CharParser a Char

-- | Match any number of <a>utext</a> tokens.
--   
--   "Unstructured text" is used in free text fields such as
--   <a>subject</a>. Please note that any comments or whitespace that
--   prefaces or follows the actual <a>utext</a> is <i>included</i> in the
--   returned string.
unstructured :: CharParser a String

-- | Parse a date and time specification of the form
--   
--   <pre>
--   Thu, 19 Dec 2002 20:35:46 +0200
--   </pre>
--   
--   where the weekday specification "<tt>Thu,</tt>" is optional. The
--   parser returns a <a>CalendarTime</a>, which is set to the appropriate
--   values. Note, though, that not all fields of <a>CalendarTime</a> will
--   necessarily be set correctly! Obviously, when no weekday has been
--   provided, the parser will set this field to <a>Monday</a> - regardless
--   of whether the day actually is a monday or not. Similarly, the day of
--   the year will always be returned as <tt>0</tt>. The timezone name will
--   always be empty: <tt>""</tt>.
--   
--   Nor will the <a>dateTime</a> parser perform <i>any</i> consistency
--   checking. It will accept
--   
--   <pre>
--   40 Apr 2002 13:12 +0100
--   </pre>
--   
--   as a perfectly valid date.
--   
--   In order to get all fields set to meaningful values, and in order to
--   verify the date's consistency, you will have to feed it into any of
--   the conversion routines provided in <a>System.Time</a>, such as
--   <a>toClockTime</a>. (When doing this, keep in mind that most functions
--   return <i>local time</i>. This will not necessarily be the time you're
--   expecting.)
dateTime :: CharParser a CalendarTime

-- | This parser will match a <a>dayName</a>, optionally wrapped in folding
--   whitespace, or an <a>obsDayOfWeek</a> and return it's <a>Day</a>
--   value.
dayOfWeek :: CharParser a Day

-- | This parser will the abbreviated weekday names ("<tt>Mon</tt>",
--   "<tt>Tue</tt>", ...) and return the appropriate <a>Day</a> value.
dayName :: CharParser a Day

-- | This parser will match a date of the form "<tt>dd:mm:yyyy</tt>" and
--   return a tripple of the form (Int,Month,Int) - corresponding to
--   (year,month,day).
date :: CharParser a (Int, Month, Int)

-- | This parser will match a four digit number and return it's integer
--   value. No range checking is performed.
year :: CharParser a Int

-- | This parser will match a <a>monthName</a>, optionally wrapped in
--   folding whitespace, or an <a>obsMonth</a> and return it's <a>Month</a>
--   value.
month :: CharParser a Month

-- | This parser will the abbreviated month names ("<tt>Jan</tt>",
--   "<tt>Feb</tt>", ...) and return the appropriate <a>Month</a> value.
monthName :: CharParser a Month

-- | Match either an <a>obsDay</a>, or a one or two digit number and return
--   it.
day :: CharParser a Int

-- | This parser will match a <a>timeOfDay</a> specification followed by a
--   <a>zone</a>. It returns the tuple (TimeDiff,Int) corresponding to the
--   return values of either parser.
time :: CharParser a (TimeDiff, Int)

-- | This parser will match a time-of-day specification of "<tt>hh:mm</tt>"
--   or "<tt>hh:mm:ss</tt>" and return the corrsponding time as a
--   <a>TimeDiff</a>.
timeOfDay :: CharParser a TimeDiff

-- | This parser will match a two-digit number and return it's integer
--   value. No range checking is performed.
hour :: CharParser a Int

-- | This parser will match a two-digit number and return it's integer
--   value. No range checking is performed.
minute :: CharParser a Int

-- | This parser will match a two-digit number and return it's integer
--   value. No range checking takes place.
second :: CharParser a Int

-- | This parser will match a timezone specification of the form
--   "<tt>+hhmm</tt>" or "<tt>-hhmm</tt>" and return the zone's offset to
--   UTC in seconds as an integer. <a>obsZone</a> is matched as well.
zone :: CharParser a Int

-- | A NameAddr is composed of an optional realname a mandatory e-mail
--   <a>address</a>.
data NameAddr
NameAddr :: Maybe String -> String -> NameAddr
nameAddrName :: NameAddr -> Maybe String
nameAddrAddr :: NameAddr -> String

-- | Parse a single <a>mailbox</a> or an address <a>group</a> and return
--   the address(es).
address :: CharParser a [NameAddr]

-- | Parse a <a>nameAddr</a> or an <a>addrSpec</a> and return the address.
mailbox :: CharParser a NameAddr

-- | Parse an <a>angleAddr</a>, optionally prefaced with a
--   <a>displayName</a>, and return the address.
nameAddr :: CharParser a NameAddr

-- | Parse an <tt>angle_addr</tt> or an <a>obsAngleAddr</a> and return the
--   address.
angleAddr :: CharParser a String

-- | Parse a "group" of addresses. That is a <a>displayName</a>, followed
--   by a colon, optionally followed by a <a>mailboxList</a>, followed by a
--   semicolon. The found address(es) are returned - what may be none. Here
--   is an example:
--   
--   <pre>
--   parse group "" "my group: user1@example.org, user2@example.org;"
--   </pre>
--   
--   This input comes out as:
--   
--   <pre>
--   Right ["user1@example.org","user2@example.org"]
--   </pre>
group :: CharParser a [NameAddr]

-- | Parse and return a <a>phrase</a>.
displayName :: CharParser a String

-- | Parse a list of <a>mailbox</a> addresses, every two addresses being
--   separated by a comma, and return the list of found address(es).
mailboxList :: CharParser a [NameAddr]

-- | Parse a list of <a>address</a> addresses, every two addresses being
--   separated by a comma, and return the list of found address(es).
addressList :: CharParser a [NameAddr]

-- | Parse an "address specification". That is a <a>localPart</a>, followed
--   by an "<tt>@</tt>" character, followed by a <a>domain</a>. Return the
--   complete address as <a>String</a>, ignoring any whitespace or any
--   comments.
addrSpec :: CharParser a String

-- | Parse and return a "local part" of an <a>addrSpec</a>. That is either
--   a <a>dotAtom</a> or a <a>quotedString</a>.
localPart :: CharParser a String

-- | Parse and return a "domain part" of an <a>addrSpec</a>. That is either
--   a <a>dotAtom</a> or a <a>domainLiteral</a>.
domain :: CharParser a String

-- | Parse a "domain literal". That is a "<tt>[</tt>" character, followed
--   by any amount of <a>dcontent</a>, followed by a terminating
--   "<tt>]</tt>" character. The complete string is returned verbatim.
domainLiteral :: CharParser a String

-- | Parse and return any characters that are legal in a
--   <a>domainLiteral</a>. That is <a>dtext</a> or a 'quotedPair '.
dcontent :: CharParser a String

-- | Parse and return any ASCII characters except "<tt>[</tt>",
--   "<tt>]</tt>", and "<tt>\</tt>".
dtext :: CharParser a Char

-- | This data type repesents a parsed Internet Message as defined in this
--   RFC. It consists of an arbitrary number of header lines, represented
--   in the <a>Field</a> data type, and a message body, which may be empty.
data Message
Message :: [Field] -> String -> Message

-- | Parse a complete message as defined by this RFC and it broken down
--   into the separate header fields and the message body. Header lines,
--   which contain syntax errors, will not cause the parser to abort.
--   Rather, these headers will appear as <a>OptionalField</a>s (which are
--   unparsed) in the resulting <a>Message</a>. A message must be really,
--   really badly broken for this parser to fail.
--   
--   This behaviour was chosen because it is impossible to predict what the
--   user of this module considers to be a fatal error; traditionally,
--   parsers are very forgiving when it comes to Internet messages.
--   
--   If you want to implement a really strict parser, you'll have to put
--   the appropriate parser together yourself. You'll find that this is
--   rather easy to do. Refer to the <a>fields</a> parser for further
--   details.
message :: CharParser a Message

-- | This parser will return a message body as specified by this RFC; that
--   is basically any number of <a>text</a> characters, which may be
--   divided into separate lines by <a>crlf</a>.
body :: CharParser a String

-- | This data type represents any of the header fields defined in this
--   RFC. Each of the various instances contains with the return value of
--   the corresponding parser.
data Field
OptionalField :: String -> String -> Field
From :: [NameAddr] -> Field
Sender :: NameAddr -> Field
ReturnPath :: String -> Field
ReplyTo :: [NameAddr] -> Field
To :: [NameAddr] -> Field
Cc :: [NameAddr] -> Field
Bcc :: [NameAddr] -> Field
MessageID :: String -> Field
InReplyTo :: [String] -> Field
References :: [String] -> Field
Subject :: String -> Field
Comments :: String -> Field
Keywords :: [[String]] -> Field
Date :: CalendarTime -> Field
ResentDate :: CalendarTime -> Field
ResentFrom :: [NameAddr] -> Field
ResentSender :: NameAddr -> Field
ResentTo :: [NameAddr] -> Field
ResentCc :: [NameAddr] -> Field
ResentBcc :: [NameAddr] -> Field
ResentMessageID :: String -> Field
ResentReplyTo :: [NameAddr] -> Field
Received :: ([(String, String)], CalendarTime) -> Field
ObsReceived :: [(String, String)] -> Field

-- | This parser will parse an arbitrary number of header fields as defined
--   in this RFC. For each field, an appropriate <a>Field</a> value is
--   created, all of them making up the <a>Field</a> list that this parser
--   returns.
--   
--   If you look at the implementation of this parser, you will find that
--   it uses Parsec's <a>try</a> modifier around <i>all</i> of the fields.
--   The idea behind this is that fields, which contain syntax errors, fall
--   back to the catch-all <a>optionalField</a>. Thus, this parser will
--   hardly ever return a syntax error -- what conforms with the idea that
--   any message that can possibly be accepted <i>should</i> be.
fields :: CharParser a [Field]

-- | Parse a "<tt>Date:</tt>" header line and return the date it contains a
--   <a>CalendarTime</a>.
origDate :: CharParser a CalendarTime

-- | Parse a "<tt>From:</tt>" header line and return the <a>mailboxList</a>
--   address(es) contained in it.
from :: CharParser a [NameAddr]

-- | Parse a "<tt>Sender:</tt>" header line and return the <a>mailbox</a>
--   address contained in it.
sender :: CharParser a NameAddr

-- | Parse a "<tt>Reply-To:</tt>" header line and return the
--   <a>addressList</a> address(es) contained in it.
replyTo :: CharParser a [NameAddr]

-- | Parse a "<tt>To:</tt>" header line and return the <a>addressList</a>
--   address(es) contained in it.
to :: CharParser a [NameAddr]

-- | Parse a "<tt>Cc:</tt>" header line and return the <a>addressList</a>
--   address(es) contained in it.
cc :: CharParser a [NameAddr]

-- | Parse a "<tt>Bcc:</tt>" header line and return the <a>addressList</a>
--   address(es) contained in it.
bcc :: CharParser a [NameAddr]

-- | Parse a "<tt>Message-Id:</tt>" header line and return the <a>msgId</a>
--   contained in it.
messageId :: CharParser a String

-- | Parse a "<tt>In-Reply-To:</tt>" header line and return the list of
--   <a>msgId</a>s contained in it.
inReplyTo :: CharParser a [String]

-- | Parse a "<tt>References:</tt>" header line and return the list of
--   <a>msgId</a>s contained in it.
references :: CharParser a [String]

-- | Parse a "<tt>message ID:</tt>" and return it. A message ID is almost
--   identical to an <a>angleAddr</a>, but with stricter rules about
--   folding and whitespace.
msgId :: CharParser a String

-- | Parse a "left ID" part of a <a>msgId</a>. This is almost identical to
--   the <a>localPart</a> of an e-mail address, but with stricter rules
--   about folding and whitespace.
idLeft :: CharParser a String

-- | Parse a "right ID" part of a <a>msgId</a>. This is almost identical to
--   the <a>domain</a> of an e-mail address, but with stricter rules about
--   folding and whitespace.
idRight :: CharParser a String

-- | Parse one or more occurences of <a>qtext</a> or 'quotedPair ' and
--   return the concatenated string. This makes up the <a>idLeft</a> of a
--   <a>msgId</a>.
noFoldQuote :: CharParser a String

-- | Parse one or more occurences of <a>dtext</a> or 'quotedPair ' and
--   return the concatenated string. This makes up the <a>idRight</a> of a
--   <a>msgId</a>.
noFoldLiteral :: CharParser a String

-- | Parse a "<tt>Subject:</tt>" header line and return it's contents
--   verbatim.
subject :: CharParser a String

-- | Parse a "<tt>Comments:</tt>" header line and return it's contents
--   verbatim.
comments :: CharParser a String

-- | Parse a "<tt>Keywords:</tt>" header line and return the list of
--   <a>phrase</a>s found. Please not that each phrase is again a list of
--   <a>atom</a>s, as returned by the <a>phrase</a> parser.
keywords :: CharParser a [[String]]

-- | Parse a "<tt>Resent-Date:</tt>" header line and return the date it
--   contains as <a>CalendarTime</a>.
resentDate :: CharParser a CalendarTime

-- | Parse a "<tt>Resent-From:</tt>" header line and return the
--   <a>mailboxList</a> address(es) contained in it.
resentFrom :: CharParser a [NameAddr]

-- | Parse a "<tt>Resent-Sender:</tt>" header line and return the
--   <a>mailboxList</a> address(es) contained in it.
resentSender :: CharParser a NameAddr

-- | Parse a "<tt>Resent-To:</tt>" header line and return the
--   <a>mailbox</a> address contained in it.
resentTo :: CharParser a [NameAddr]

-- | Parse a "<tt>Resent-Cc:</tt>" header line and return the
--   <a>addressList</a> address(es) contained in it.
resentCc :: CharParser a [NameAddr]

-- | Parse a "<tt>Resent-Bcc:</tt>" header line and return the
--   <a>addressList</a> address(es) contained in it. (This list may be
--   empty.)
resentBcc :: CharParser a [NameAddr]

-- | Parse a "<tt>Resent-Message-ID:</tt>" header line and return the
--   <a>msgId</a> contained in it.
resentMsgId :: CharParser a String
returnPath :: CharParser a String
path :: CharParser a String
received :: CharParser a ([(String, String)], CalendarTime)
nameValList :: CharParser a [(String, String)]
nameValPair :: CharParser a (String, String)
itemName :: CharParser a String
itemValue :: CharParser a String

-- | Parse an arbitrary header field and return a tuple containing the
--   <a>fieldName</a> and <a>unstructured</a> text of the header. The name
--   will <i>not</i> contain the terminating colon.
optionalField :: CharParser a (String, String)

-- | Parse and return an arbitrary header field name. That is one or more
--   <a>ftext</a> characters.
fieldName :: CharParser a String

-- | Match and return any ASCII character except for control characters,
--   whitespace, and "<tt>:</tt>".
ftext :: CharParser a Char

-- | Match the obsolete "quoted pair" syntax, which - unlike 'quotedPair '
--   - allowed <i>any</i> ASCII character to be specified when quoted. The
--   parser will return both, the backslash and the actual character.
obsQp :: CharParser a String

-- | Match the obsolete "text" syntax, which - unlike <a>text</a> - allowed
--   "carriage returns" and "linefeeds". This is really weird; you better
--   consult the RFC for details. The parser will return the complete
--   string, including those special characters.
obsText :: CharParser a String

-- | Match and return the obsolete "char" syntax, which - unlike
--   <a>character</a> - did not allow "carriage return" and "linefeed".
obsChar :: CharParser a Char

-- | Match and return the obsolete "utext" syntax, which is identical to
--   <a>obsText</a>.
obsUtext :: CharParser a String

-- | Match the obsolete "phrase" syntax, which - unlike <a>phrase</a> -
--   allows dots between tokens.
obsPhrase :: CharParser a [String]

-- | Match a "phrase list" syntax and return the list of <a>String</a>s
--   that make up the phrase. In contrast to a <a>phrase</a>, the
--   <a>obsPhraseList</a> separates the individual words by commas. This
--   syntax is - as you will have guessed - obsolete.
obsPhraseList :: CharParser a [String]

-- | Parse and return an "obsolete fws" token. That is at least one
--   <a>wsp</a> character, followed by an arbitrary number (including zero)
--   of <a>crlf</a> followed by at least one more <a>wsp</a> character.
obsFws :: CharParser a String

-- | Parse a <a>dayName</a> but allow for the obsolete folding syntax.
obsDayOfWeek :: CharParser a Day

-- | Parse a <a>year</a> but allow for a two-digit number (obsolete) and
--   the obsolete folding syntax.
obsYear :: CharParser a Int

-- | Parse a <a>monthName</a> but allow for the obsolete folding syntax.
obsMonth :: CharParser a Month

-- | Parse a <a>day</a> but allow for the obsolete folding syntax.
obsDay :: CharParser a Int

-- | Parse a <a>hour</a> but allow for the obsolete folding syntax.
obsHour :: CharParser a Int

-- | Parse a <a>minute</a> but allow for the obsolete folding syntax.
obsMinute :: CharParser a Int

-- | Parse a <a>second</a> but allow for the obsolete folding syntax.
obsSecond :: CharParser a Int

-- | Match the obsolete zone names and return the appropriate offset.
obsZone :: CharParser a Int

-- | This parser will match the "obsolete angle address" syntax. This
--   construct used to be known as a "route address" in earlier RFCs. There
--   are two differences between this construct and the <a>angleAddr</a>:
--   For one - as usual -, the obsolete form allows for more liberal
--   insertion of folding whitespace and comments.
--   
--   Secondly, and more importantly, angle addresses used to allow the
--   (optional) specification of a "route". The newer version does not.
--   Such a routing address looks like this:
--   
--   <pre>
--   &lt;@example1.org,@example2.org:simons@example.org&gt;
--   </pre>
--   
--   The parser will return a tuple that - in case of the above address -
--   looks like this:
--   
--   <pre>
--   (["example1.org","example2.org"],"simons@example.org")
--   </pre>
--   
--   The first part contains a list of hosts that constitute the route
--   part. This list may be empty! The second part of the tuple is the
--   actual <a>addrSpec</a> address.
obsAngleAddr :: CharParser a String

-- | This parser parses the "route" part of <a>obsAngleAddr</a> and returns
--   the list of <a>String</a>s that make up this route. Relies on
--   <a>obsDomainList</a> for the actual parsing.
obsRoute :: CharParser a [String]

-- | This parser parses a list of domain names, each of them prefaced with
--   an "at". Multiple names are separated by a comma. The list of
--   <a>domain</a>s is returned - and may be empty.
obsDomainList :: CharParser a [String]

-- | Parse the obsolete syntax of a <a>localPart</a>, which allowed for
--   more liberal insertion of folding whitespace and comments. The actual
--   string is returned.
obsLocalPart :: CharParser a String

-- | Parse the obsolete syntax of a <a>domain</a>, which allowed for more
--   liberal insertion of folding whitespace and comments. The actual
--   string is returned.
obsDomain :: CharParser a String

-- | This parser will match the obsolete syntax for a <a>mailboxList</a>.
--   This one is quite weird: An <a>obsMboxList</a> contains an arbitrary
--   number of <a>mailbox</a>es - including none -, which are separated by
--   commas. But you may have multiple consecutive commas without giving a
--   <a>mailbox</a>. You may also have a valid <a>obsMboxList</a> that
--   contains <i>no</i> <a>mailbox</a> at all. On the other hand, you
--   <i>must</i> have at least one comma.
--   
--   So, this input is perfectly valid:
--   
--   <pre>
--   ","
--   </pre>
--   
--   But this one is - contrary to all intuition - not:
--   
--   <pre>
--   "simons@example.org"
--   </pre>
--   
--   Strange, isn't it?
obsMboxList :: CharParser a [NameAddr]

-- | This parser is identical to <a>obsMboxList</a> but parses a list of
--   <a>address</a>es rather than <a>mailbox</a>es. The main difference is
--   that an <a>address</a> may contain <a>group</a>s. Please note that as
--   of now, the parser will return a simple list of addresses; the
--   grouping information is lost.
obsAddrList :: CharParser a [NameAddr]
obsFields :: GenParser Char a [Field]

-- | Parse a <a>date</a> header line but allow for the obsolete folding
--   syntax.
obsOrigDate :: CharParser a CalendarTime

-- | Parse a <a>from</a> header line but allow for the obsolete folding
--   syntax.
obsFrom :: CharParser a [NameAddr]

-- | Parse a <a>sender</a> header line but allow for the obsolete folding
--   syntax.
obsSender :: CharParser a NameAddr

-- | Parse a <a>replyTo</a> header line but allow for the obsolete folding
--   syntax.
obsReplyTo :: CharParser a [NameAddr]

-- | Parse a <a>to</a> header line but allow for the obsolete folding
--   syntax.
obsTo :: CharParser a [NameAddr]

-- | Parse a <a>cc</a> header line but allow for the obsolete folding
--   syntax.
obsCc :: CharParser a [NameAddr]

-- | Parse a <a>bcc</a> header line but allow for the obsolete folding
--   syntax.
obsBcc :: CharParser a [NameAddr]

-- | Parse a <a>messageId</a> header line but allow for the obsolete
--   folding syntax.
obsMessageId :: CharParser a String

-- | Parse an <a>inReplyTo</a> header line but allow for the obsolete
--   folding and the obsolete phrase syntax.
obsInReplyTo :: CharParser a [String]

-- | Parse a <a>references</a> header line but allow for the obsolete
--   folding and the obsolete phrase syntax.
obsReferences :: CharParser a [String]

-- | Parses the "left part" of a message ID, but allows the obsolete
--   syntax, which is identical to a <a>localPart</a>.
obsIdLeft :: CharParser a String

-- | Parses the "right part" of a message ID, but allows the obsolete
--   syntax, which is identical to a <a>domain</a>.
obsIdRight :: CharParser a String

-- | Parse a <a>subject</a> header line but allow for the obsolete folding
--   syntax.
obsSubject :: CharParser a String

-- | Parse a <a>comments</a> header line but allow for the obsolete folding
--   syntax.
obsComments :: CharParser a String

-- | Parse a <a>keywords</a> header line but allow for the obsolete folding
--   syntax. Also, this parser accepts <a>obsPhraseList</a>.
obsKeywords :: CharParser a [String]

-- | Parse a <a>resentFrom</a> header line but allow for the obsolete
--   folding syntax.
obsResentFrom :: CharParser a [NameAddr]

-- | Parse a <a>resentSender</a> header line but allow for the obsolete
--   folding syntax.
obsResentSend :: CharParser a NameAddr

-- | Parse a <a>resentDate</a> header line but allow for the obsolete
--   folding syntax.
obsResentDate :: CharParser a CalendarTime

-- | Parse a <a>resentTo</a> header line but allow for the obsolete folding
--   syntax.
obsResentTo :: CharParser a [NameAddr]

-- | Parse a <a>resentCc</a> header line but allow for the obsolete folding
--   syntax.
obsResentCc :: CharParser a [NameAddr]

-- | Parse a <a>resentBcc</a> header line but allow for the obsolete
--   folding syntax.
obsResentBcc :: CharParser a [NameAddr]

-- | Parse a <a>resentMsgId</a> header line but allow for the obsolete
--   folding syntax.
obsResentMid :: CharParser a String

-- | Parse a <tt>Resent-Reply-To</tt> header line but allow for the
--   obsolete folding syntax.
obsResentReply :: CharParser a [NameAddr]
obsReturn :: CharParser a String
obsReceived :: CharParser a [(String, String)]

-- | Match <a>obsAngleAddr</a>.
obsPath :: CharParser a String

-- | This parser is identical to <a>optionalField</a> but allows the more
--   liberal line-folding syntax between the "fieldName" and the "field
--   text".
obsOptional :: CharParser a (String, String)
instance Show Field
instance Show Message
instance Show NameAddr
instance Eq NameAddr
