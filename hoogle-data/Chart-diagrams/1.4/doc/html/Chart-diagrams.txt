-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Diagrams backend for Charts.
--   
@package Chart-diagrams
@version 1.4


-- | The backend to render charts with the diagrams library.
module Graphics.Rendering.Chart.Backend.Diagrams

-- | Run this backends renderer.
runBackend :: (Backend b R2, Renderable (Path R2) b) => DEnv -> ChartBackend a -> (Diagram b R2, a)

-- | Run this backends renderer.
runBackendR :: (Backend b R2, Renderable (Path R2) b) => DEnv -> Renderable a -> (Diagram b R2, PickFn a)

-- | Produce a default environment with the default fonts.
defaultEnv :: AlignmentFns -> Double -> Double -> IO DEnv

-- | Produce an environment with a custom set of fonts. The defult fonts
--   are still loaded as fall back.
customFontEnv :: AlignmentFns -> Double -> Double -> Map (String, FontSlant, FontWeight) FilePath -> IO DEnv

-- | The diagrams backend environement.
data DEnv
DEnv :: AlignmentFns -> FontStyle -> (FontStyle -> DFont) -> (Double, Double) -> Map (String, FontSlant, FontWeight) (Set String) -> DEnv

-- | The used alignment functions.
envAlignmentFns :: DEnv -> AlignmentFns

-- | The current/initial font style.
envFontStyle :: DEnv -> FontStyle

-- | The font selection function.
envSelectFont :: DEnv -> FontStyle -> DFont

-- | The size of the rendered output.
envOutputSize :: DEnv -> (Double, Double)

-- | The map of all glyphs that are used from a specific font.
envUsedGlyphs :: DEnv -> Map (String, FontSlant, FontWeight) (Set String)

-- | A font a delivered by SVGFonts.
type DFont = (FontData, OutlineMap)

-- | The file output format: EPS -&gt; Embedded Postscript SVG -&gt; SVG
--   with text rendered as stroked paths SVG -&gt; SVG with embedded font
--   information and text rendered as text operations
data FileFormat
EPS :: FileFormat
SVG :: FileFormat
SVG_EMBEDDED :: FileFormat
data FileOptions
FileOptions :: (Double, Double) -> FileFormat -> Map (String, FontSlant, FontWeight) FilePath -> FileOptions
_fo_size :: FileOptions -> (Double, Double)
_fo_format :: FileOptions -> FileFormat
_fo_customFonts :: FileOptions -> Map (String, FontSlant, FontWeight) FilePath
fo_size :: Lens' FileOptions (Double, Double)
fo_format :: Lens' FileOptions FileFormat
fo_customFonts :: Lens' FileOptions (Map (String, FontSlant, FontWeight) FilePath)

-- | Generate an image file for the given renderable, at the specified
--   path. Size, format, and text rendering mode are all set through the
--   <a>FileOptions</a> parameter.
renderableToFile :: FileOptions -> FilePath -> Renderable a -> IO (PickFn a)

-- | Generate an image file from from the state content of an EC
--   computation. The state may have any type that is an instance of
--   <a>ToRenderable</a>
toFile :: (Default r, ToRenderable r) => FileOptions -> FilePath -> EC r () -> IO ()

-- | Generate an image file for the given drawing instructions, at the
--   specified path. Size and format are set through the <a>FileOptions</a>
--   parameter.
cBackendToFile :: FileOptions -> ChartBackend a -> FilePath -> IO a
cBackendToEPSFile :: ChartBackend a -> DEnv -> FilePath -> IO a
cBackendToSVG :: ChartBackend a -> DEnv -> (Svg, a)
cBackendToEmbeddedFontSVG :: ChartBackend a -> DEnv -> (Svg, a)

-- | Output the given renderable as a SVG of the specifed size (in points)
--   using the default environment.
renderableToSVG :: Renderable a -> Double -> Double -> IO (Svg, PickFn a)

-- | Output the given renderable as a SVG using the given environment.
renderableToSVG' :: Renderable a -> DEnv -> (Svg, PickFn a)

-- | Output the given renderable to a string containing a SVG of the
--   specifed size (in points) using the default environment.
renderableToSVGString :: Renderable a -> Double -> Double -> IO (ByteString, PickFn a)

-- | Output the given renderable to a string containing a SVG using the
--   given environment.
renderableToSVGString' :: Renderable a -> DEnv -> (ByteString, PickFn a)

-- | Output the given renderable as a SVG of the specifed size (in points)
--   using the default environment. Font are embedded to save space.
renderableToEmbeddedFontSVG :: Renderable a -> Double -> Double -> IO (Svg, PickFn a)

-- | Output the given renderable as a SVG using the given environment. Font
--   are embedded to save space.
renderableToEmbeddedFontSVG' :: Renderable a -> DEnv -> (Svg, PickFn a)
instance Default FileOptions
