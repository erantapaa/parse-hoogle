-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Quiver finite stream processing library
--   
--   <i>Quiver</i> is a powerful stream processing library for
--   combinatorial and monadic representation of computations over both
--   inductive and coinductive data streams. It is similar to Gabriel
--   Gonzalez's <i>pipes</i> and Michael Snoyman's <i>conduit</i>, but
--   generalises both with support for functor-based computations and a
--   clean support for finite (i.e., inductive) data streams, both upstream
--   and downstream of the computation being defined.
@package quiver
@version 0.0.0.6


-- | This module provides a host of common definitions, including the main
--   Quiver <i>processor</i> type <tt>P</tt>, that are reexported by other
--   Quiver modules as required.
--   
--   This is the only module in the Quiver library that exposes the actual
--   four constructors of the stream processor type <tt>P</tt>, allowing
--   for definition of low level stream processor transformations, such as
--   conversions between <tt>P</tt> and other stream processing libraries.
--   
--   As a matter of style, Quiver users should strive to avoid explicit
--   pattern matching on the <tt>P</tt> type and rely instead on the
--   various high level combinators exported elsewhere, in order to improve
--   chances of successful deforestation by the various Quiver rewrite
--   rules.
module Control.Quiver.Internal

-- | The main Quiver <i>stream processor</i> type <tt>P a' a b b' f r</tt>,
--   representing a producer<i>consumer structure with </i>bidirectional/,
--   <i>bounded</i> communication on both the upstream (consumer) and
--   downstream (producer) channel. The six type parameters have the
--   following intuitive meaning:
--   
--   <ul>
--   <li><tt>a'</tt> is the type of a <i>request</i> values sent by the
--   stream processor to its upstream partner in order to receive the next
--   element of the input stream.</li>
--   <li><tt>a</tt> is the type of the actual information being consumed by
--   this stream processor (i.e., elements of its input stream.)</li>
--   <li><tt>b</tt> is the type of the actual information being produced by
--   this stream processor (i.e., elements of its output stream.)</li>
--   <li><tt>b'</tt> is the type of the <i>response</i> values received
--   from the downstream partner for each elemnet of the output stream
--   produced by this stream processor.</li>
--   <li><tt>f</tt> is the type of the stream processor's <i>base
--   functor</i>; usually this is a monad used for stateful stream
--   processing, exception handling and/or real-world interaction.</li>
--   <li><tt>r</tt> is the stream processor's <i>delivery type</i>, used
--   for monadic stream processor definition.</li>
--   </ul>
--   
--   Every stream processor is a functor over its delivery type. However,
--   if the base functor <tt>f</tt> meets the additional requirements of
--   <a>Applicative</a> or <a>Monad</a>, so will the stream processor
--   itself. Note that, unlike most other stream processing libraries,
--   <tt>f</tt> is not required to be a monad in most applications,
--   although only time will tell whether this generalisation has useful
--   applications in the real world.
data P a' a b b' f r

-- | <tt>Consume x k q</tt> represents a <i>consumer step</i>, in which the
--   request <tt>x</tt> is sent upstream and the returned input value is
--   supplied to the <i>continuation processor</i> <tt>k</tt>, or, if the
--   upstream partner has been <i>depleted</i> (i.e., delivered its
--   ultimate result, hence reaching the end of processing), to the
--   <i>decoupled continuation</i> <tt>q</tt>.
[Consume] :: a' -> (a -> P a' a b b' f r) -> (Producer b b' f r) -> P a' a b b' f r

-- | <tt>Produce y k q</tt> represent a <i>producer step</i>, in which the
--   output value <tt>y</tt> is sent downstream, and the returned
--   acknowledgement is supplied to the <i>continuation processor</i>
--   <tt>k</tt>, or, if the downstream partner has been <i>decoupled</i>
--   (i.e., delivered its ultimate result, hence reaching the end of
--   processing), to the <i>depleted continuation</i> <tt>q</tt>.
[Produce] :: b -> (b' -> P a' a b b' f r) -> (Consumer a' a f r) -> P a' a b b' f r

-- | <tt>Enclose</tt> allows for selective application of the base functor
--   <tt>f</tt> the the remainder of the computation.
[Enclose] :: (f (P a' a b b' f r)) -> P a' a b b' f r

-- | <tt>Deliver r</tt> completes processing of information, delivering its
--   ultimate result <tt>r</tt>.
[Deliver] :: r -> P a' a b b' f r

-- | A <i>simple processor</i> with a unit request type and an unspecified
--   response type:
type SP a b f r = forall b'. P () a b b' f r

-- | A Quiver <i>producer</i>, represented by a stream processor with
--   unspecified input types.
type Producer b b' f r = forall a' a. P a' a b b' f r

-- | A Quiver <i>consumer</i>, represented by a stream processor with
--   unspecified output types.
type Consumer a' a f r = forall b b'. P a' a b b' f r

-- | A Quiver <i>effect</i>, represented by a stream processor with
--   unspecified input and output types.
type Effect f r = forall a' a b b'. P a' a b b' f r

-- | <tt>consume x k q</tt> represents a <i>consumer step</i>, in which the
--   request <tt>x</tt> is sent upstream and the returned input value is
--   supplied to the <i>continuation processor</i> <tt>k</tt>, or, if the
--   upstream partner has been <i>depleted</i> (i.e., delivered its
--   ultimate result, hence reaching the end of processing), to the
--   <i>decoupled continuation</i> <tt>q</tt>.
consume :: a' -> (a -> P a' a b b' f r) -> Producer b b' f r -> P a' a b b' f r

-- | <tt>produce y k q</tt> represent a <i>producer step</i>, in which the
--   output value <tt>y</tt> is sent downstream, and the returned
--   acknowledgement is supplied to the <i>continuation processor</i>
--   <tt>k</tt>, or, if the downstream partner has been <i>decoupled</i>
--   (i.e., delivered its ultimate result, hence reaching the end of
--   processing), to the <i>depleted continuation</i> <tt>q</tt>.
produce :: b -> (b' -> P a' a b b' f r) -> Consumer a' a f r -> P a' a b b' f r

-- | <tt>enclose</tt> allows for selective application of the base functor
--   <tt>f</tt> the the remainder of the computation.
enclose :: f (P a' a b b' f r) -> P a' a b b' f r

-- | <tt>deliver r</tt> completes processing of information, delivering its
--   ultimate result <tt>r</tt>.
deliver :: r -> P a' a b b' f r

-- | <tt>decouple p</tt> <i>decouples</i> the stream processor <tt>p</tt>,
--   by replacing the first consumer step in <tt>p</tt> with that step's
--   decoupled contination, effectively converting <tt>p</tt> into a
--   producer processor that no longer expects to receive any input.
decouple :: Functor f => P a' a b b' f r -> Producer b b' f r

-- | <tt>deplete p</tt> <i>depletes</i> the stream processor <tt>p</tt>, by
--   replacing the first producer step in <tt>p</tt> with that step's
--   depleted contination, effectively converting <tt>p</tt> into a
--   consumer processor that will never produce any more output.
deplete :: Functor f => P a' a b b' f r -> Consumer a' a f r
instance Functor f => Functor (P a' a b b' f)
instance Applicative f => Applicative (P a' a b b' f)
instance Monad f => Monad (P a' a b b' f)


-- | This module provides the core types and combinators of the Quiver
--   stream processing library.
module Control.Quiver

-- | The main Quiver <i>stream processor</i> type <tt>P a' a b b' f r</tt>,
--   representing a producer<i>consumer structure with </i>bidirectional/,
--   <i>bounded</i> communication on both the upstream (consumer) and
--   downstream (producer) channel. The six type parameters have the
--   following intuitive meaning:
--   
--   <ul>
--   <li><tt>a'</tt> is the type of a <i>request</i> values sent by the
--   stream processor to its upstream partner in order to receive the next
--   element of the input stream.</li>
--   <li><tt>a</tt> is the type of the actual information being consumed by
--   this stream processor (i.e., elements of its input stream.)</li>
--   <li><tt>b</tt> is the type of the actual information being produced by
--   this stream processor (i.e., elements of its output stream.)</li>
--   <li><tt>b'</tt> is the type of the <i>response</i> values received
--   from the downstream partner for each elemnet of the output stream
--   produced by this stream processor.</li>
--   <li><tt>f</tt> is the type of the stream processor's <i>base
--   functor</i>; usually this is a monad used for stateful stream
--   processing, exception handling and/or real-world interaction.</li>
--   <li><tt>r</tt> is the stream processor's <i>delivery type</i>, used
--   for monadic stream processor definition.</li>
--   </ul>
--   
--   Every stream processor is a functor over its delivery type. However,
--   if the base functor <tt>f</tt> meets the additional requirements of
--   <a>Applicative</a> or <a>Monad</a>, so will the stream processor
--   itself. Note that, unlike most other stream processing libraries,
--   <tt>f</tt> is not required to be a monad in most applications,
--   although only time will tell whether this generalisation has useful
--   applications in the real world.
data P a' a b b' f r

-- | A <i>simple processor</i> with a unit request type and an unspecified
--   response type:
type SP a b f r = forall b'. P () a b b' f r

-- | A Quiver <i>consumer</i>, represented by a stream processor with
--   unspecified output types.
type Consumer a' a f r = forall b b'. P a' a b b' f r

-- | A Quiver <i>producer</i>, represented by a stream processor with
--   unspecified input types.
type Producer b b' f r = forall a' a. P a' a b b' f r

-- | A Quiver <i>effect</i>, represented by a stream processor with
--   unspecified input and output types.
type Effect f r = forall a' a b b'. P a' a b b' f r

-- | <tt>consume x k q</tt> represents a <i>consumer step</i>, in which the
--   request <tt>x</tt> is sent upstream and the returned input value is
--   supplied to the <i>continuation processor</i> <tt>k</tt>, or, if the
--   upstream partner has been <i>depleted</i> (i.e., delivered its
--   ultimate result, hence reaching the end of processing), to the
--   <i>decoupled continuation</i> <tt>q</tt>.
consume :: a' -> (a -> P a' a b b' f r) -> Producer b b' f r -> P a' a b b' f r

-- | <tt>produce y k q</tt> represent a <i>producer step</i>, in which the
--   output value <tt>y</tt> is sent downstream, and the returned
--   acknowledgement is supplied to the <i>continuation processor</i>
--   <tt>k</tt>, or, if the downstream partner has been <i>decoupled</i>
--   (i.e., delivered its ultimate result, hence reaching the end of
--   processing), to the <i>depleted continuation</i> <tt>q</tt>.
produce :: b -> (b' -> P a' a b b' f r) -> Consumer a' a f r -> P a' a b b' f r

-- | <tt>enclose</tt> allows for selective application of the base functor
--   <tt>f</tt> the the remainder of the computation.
enclose :: f (P a' a b b' f r) -> P a' a b b' f r

-- | <tt>deliver r</tt> completes processing of information, delivering its
--   ultimate result <tt>r</tt>.
deliver :: r -> P a' a b b' f r

-- | <tt>decouple p</tt> <i>decouples</i> the stream processor <tt>p</tt>,
--   by replacing the first consumer step in <tt>p</tt> with that step's
--   decoupled contination, effectively converting <tt>p</tt> into a
--   producer processor that no longer expects to receive any input.
decouple :: Functor f => P a' a b b' f r -> Producer b b' f r

-- | <tt>deplete p</tt> <i>depletes</i> the stream processor <tt>p</tt>, by
--   replacing the first producer step in <tt>p</tt> with that step's
--   depleted contination, effectively converting <tt>p</tt> into a
--   consumer processor that will never produce any more output.
deplete :: Functor f => P a' a b b' f r -> Consumer a' a f r

-- | <tt>fetch x</tt> represents a singleton stream processor that sends
--   the request value <tt>x</tt> upstream and delivers the next input
--   value received, or <tt>Nothing</tt> if the upstream processor has been
--   depleted.
fetch :: a' -> P a' a b b' f (Maybe a)

-- | <tt>fetch' x q</tt> represents a singleton stream processor that sends
--   the request value <tt>x</tt> upstream and delivers the next input
--   value received, or, if the upstream processor has been depleted,
--   continues with the decoupled processor <tt>q</tt>.
fetch' :: a' -> Producer b b' f a -> P a' a b b' f a

-- | <tt>emit y</tt> represents a singleton stream processor that produces
--   a single output value <tt>y</tt> and delivers the response received
--   from the downstream processor, or <tt>Nothing</tt> if the downstream
--   processor has been decoupled.
emit :: b -> P a' a b b' f (Maybe b')

-- | <tt>emit' y q</tt> represents a singleton stream processor that
--   produces a single output value <tt>y</tt> and delivers the response
--   received from the downstream processor, or, if the downstream
--   processor has been decoupled, continues with the depleted processor
--   <tt>q</tt>.
emit' :: b -> Consumer a' a f b' -> P a' a b b' f b'

-- | <tt>emit' y q</tt> represents a singleton stream processor that
--   produces a single output value <tt>y</tt>, ignoring any response
--   received from the downstream processor.
emit_ :: b -> P a' a b b' f ()

-- | <tt>qlift</tt> lifts the value of a base functor into a stream
--   processor.
qlift :: Functor f => f r -> P a' a b b' f r

-- | <tt>qpure g f z</tt> produces an infinite consumer/producer that uses
--   a pure function <tt>f</tt> to convert every input value into an
--   output, and <tt>f</tt> to convert each downstream response value into
--   an upstream request; the initial request is obtained by applying
--   <tt>g</tt> to the initial response value <tt>z</tt>.
qpure :: (b' -> a') -> (a -> b) -> b' -> P a' a b b' f ()

-- | <tt>qpure_ f</tt> produces an infinite consumer/producer that uses a
--   pure function <tt>f</tt> to convert every input value into an output;
--   equivalent to <tt>qpure id f (const ())</tt>.
qpure_ :: (a -> b) -> SP a b f ()

-- | A pull-based identity processor, equivalent to 'qpure id id'.
qid :: b -> P b a a b f ()

-- | A pull-based list flattening processor, delivering the list of inputs
--   that could not be produced and a list of responses that could not be
--   consumed.
qconcat :: [b] -> P [b] [a] a b f ([a], [b])

-- | A pull-based list flattening processor without requests.
qconcat_ :: SP [a] a f [a]

-- | Evaluates an <i>effect</i>, i.e., a processor that is both detached
--   and depleted and hence neither consumes nor produces any input,
--   returning its delivered value. The base functor must be a monad.
runEffect :: Monad f => Effect f r -> f r

-- | The <tt>&gt;&gt;-&gt;</tt> represents a push-based composition of
--   stream processor. <tt>p1 &gt;&gt;-&gt; p2</tt> represents a stream
--   processor that forwards the output of <tt>p1</tt> to <tt>p2</tt>,
--   delivering the result of both processors. The new processor is
--   <i>driven</i> by <tt>p2</tt>, so, if the base functor represents a
--   non-commutative monad, any effects of <tt>p2</tt> will be observed
--   before those of <tt>p1</tt>.
(>>->) :: Functor f => P a' a b b' f r1 -> P b' b c c' f r2 -> P a' a c c' f (r1, r2)

-- | The <tt>&gt;-&gt;&gt;</tt> represents a pull-based composition of
--   stream processor. <tt>p1 &gt;-&gt;&gt; p2</tt> represents a stream
--   processor that forwards the output of <tt>p1</tt> to <tt>p2</tt>,
--   delivering the result of both processors. The new processor is
--   <i>driven</i> by <tt>p1</tt>, so, if the base functor represents a
--   non-commutative monad, any effects of <tt>p1</tt> will be observed
--   before those of <tt>p2</tt>.
(>->>) :: Functor f => P a' a b b' f r1 -> P b' b c c' f r2 -> P a' a c c' f (r1, r2)
