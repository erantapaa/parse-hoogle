-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A first order logic library in Haskell
--   
--   An implementation of first order logic in Haskell that includes a
--   library of modules for incorporating first order logic into other
--   programs as well as an executable theorem prover that uses resolution
--   to prove theorems in first order logic.
@package Folly
@version 0.1.3.0

module Folly.Utils
type Name = String
data Error a
Succeeded :: a -> Error a
Failed :: String -> Error a
extractValue :: Error a -> a
instance Show a => Show (Error a)
instance Eq a => Eq (Error a)
instance Monad Error

module Folly.Formula
data Term
data Formula
fvt :: Term -> Set Term
subTerm :: Map Term Term -> Term -> Term
isVar :: Term -> Bool
isConst :: Term -> Bool
isFunc :: Term -> Bool
funcName :: Term -> String
funcArgs :: Term -> [Term]
appendVarName :: String -> Term -> Term
var :: String -> Term
func :: [Char] -> [Term] -> Term
constant :: String -> Term
te :: Term -> Formula -> Formula
fa :: Term -> Formula -> Formula
pr :: String -> [Term] -> Formula
con :: Formula -> Formula -> Formula
dis :: Formula -> Formula -> Formula
neg :: Formula -> Formula
imp :: Formula -> Formula -> Formula
bic :: Formula -> Formula -> Formula
t :: Formula
f :: Formula
vars :: Formula -> Set Term
freeVars :: Formula -> Set Term
generalize :: Formula -> Formula
subFormula :: Map Term Term -> Formula -> Formula
applyToTerms :: Formula -> (Term -> Term) -> Formula
literalArgs :: Formula -> [Term]
toPNF :: Formula -> Formula
toSkolemForm :: Formula -> Formula
skf :: Int -> [Term] -> Term
type Clause = [Formula]
toClausalForm :: Formula -> [Clause]
isTautology :: Clause -> Bool
matchingLiterals :: Formula -> Formula -> Bool
instance Eq Term
instance Ord Term
instance Eq Formula
instance Ord Formula
instance Show Formula
instance Show Term

module Folly.Unification
applyUnifier :: Unifier -> Term -> Term
mostGeneralUnifier :: [(Term, Term)] -> Maybe Unifier
unifier :: [(Term, Term)] -> Unifier

module Folly.Theorem
data Theorem
theorem :: [Formula] -> Formula -> Theorem
hypothesis :: Theorem -> [Formula]
conclusion :: Theorem -> Formula
instance Eq Theorem
instance Ord Theorem
instance Show Theorem

module Folly.Resolution
isValid :: Theorem -> Bool
