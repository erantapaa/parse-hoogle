-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding to the GNOME Virtual File System library.
--   
--   GNOME VFS is the GNOME virtual file system. It is the foundation of
--   the Nautilus file manager. It provides a modular architecture and
--   ships with several modules that implement support for local files,
--   http, ftp and others. It provides an URI-based API, a backend
--   supporting asynchronous file operations, a MIME type manipulation
--   library and other features.
@package gnomevfs
@version 0.11.0


module System.Gnome.VFS.Init

-- | If gnome-vfs is not already initialized, initialize it. This must be
--   called prior to performing any other gnome-vfs operations, and may be
--   called multiple times without error.
init :: IO Bool

-- | Cease all active gnome-vfs operations and unload the MIME database
--   from memory.
shutdown :: IO ()

-- | Detects if gnome-vfs has already been initialized (gnome-vfs must be
--   initialized prior to using any methods or operations).
initialized :: IO Bool


module System.Gnome.VFS.Error
newtype Error
Error :: Result -> Error
error :: Result -> IO a
errors :: Exception -> Maybe Error
eofErrors :: Exception -> Maybe Error


module System.Gnome.VFS.FileInfo

-- | A record type containing information about a file.
data FileInfo
FileInfo :: Maybe String -> Maybe FileType -> Maybe [FilePermissions] -> Maybe [FileFlags] -> Maybe DeviceID -> Maybe InodeNumber -> Maybe Int -> Maybe IDs -> Maybe FileSize -> Maybe FileSize -> Maybe FileSize -> Maybe EpochTime -> Maybe EpochTime -> Maybe EpochTime -> Maybe String -> Maybe MIMEType -> FileInfo

-- | the name of the file, without the path
fileInfoName :: FileInfo -> Maybe String

-- | the type of the file; i.e. regular, directory, block-device, etc.
fileInfoType :: FileInfo -> Maybe FileType

-- | the permissions for the file
fileInfoPermissions :: FileInfo -> Maybe [FilePermissions]

-- | flags providing additional information about the file
fileInfoFlags :: FileInfo -> Maybe [FileFlags]

-- | the device the file resides on
fileInfoDevice :: FileInfo -> Maybe DeviceID

-- | the inode number of the file
fileInfoInode :: FileInfo -> Maybe InodeNumber

-- | the total number of hard links to the file
fileInfoLinkCount :: FileInfo -> Maybe Int

-- | the user and group IDs owning the file
fileInfoIDs :: FileInfo -> Maybe IDs

-- | the size of the file in bytes
fileInfoSize :: FileInfo -> Maybe FileSize

-- | the size of the file in filesystem blocks
fileInfoBlockCount :: FileInfo -> Maybe FileSize

-- | the optimal buffer size for reading from and writing to the file
fileInfoIOBlockSize :: FileInfo -> Maybe FileSize

-- | the time of last access
fileInfoATime :: FileInfo -> Maybe EpochTime

-- | the time of last modification
fileInfoMTime :: FileInfo -> Maybe EpochTime

-- | the time of last attribute modification
fileInfoCTime :: FileInfo -> Maybe EpochTime

-- | the location this symlink points to, if <tt>fileInfoFlags</tt>
--   contains <a>FileFlagsSymlink</a>
fileInfoSymlinkName :: FileInfo -> Maybe String

-- | the MIME-type of the file
fileInfoMIMEType :: FileInfo -> Maybe MIMEType

-- | Flags specifying additional information about a file.
data FileFlags
FileFlagsNone :: FileFlags
FileFlagsSymlink :: FileFlags
FileFlagsLocal :: FileFlags

-- | Identifies the type of a file.
data FileType
FileTypeUnknown :: FileType
FileTypeRegular :: FileType
FileTypeDirectory :: FileType
FileTypeFifo :: FileType
FileTypeSocket :: FileType
FileTypeCharacterDevice :: FileType
FileTypeBlockDevice :: FileType
FileTypeSymbolicLink :: FileType

-- | An integral type wide enough to hold the inode number of a file.
type InodeNumber = Word64

-- | A pair holding the user ID and group ID of a file owner.
type IDs = (Int, Int)
instance Storable FileInfo


module System.Gnome.VFS.MIME

-- | A string that will be treated as a MIME-type.
type MIMEType = String

-- | Try to determine the MIME-type of the file at <tt>filename</tt>, using
--   only the filename and the Gnome VFS MIME type database. If the
--   MIME-type is not found, return <tt>defaultv</tt>.
mimeTypeFromNameOrDefault :: FilePath -> Maybe MIMEType -> Maybe MIMEType

-- | Try to get the MIME-type of the file represented by <tt>uri</tt>. This
--   function favors the contents of the file over the extension of the
--   filename. If the file does not exist, the MIME-type for the extension
--   is returned. If no MIME-type can be found for the file, the function
--   returns "application/octet-stream".
--   
--   Note: This function will not necessarily return the same MIME-type as
--   <tt>System.Gnome.VFS.Ops.getFileInfo</tt>.
getMIMETypeCommon :: URI -> IO String

-- | Try to get the MIME-type of the file represented by <tt>uri</tt>. This
--   function looks only at the filename pointed to by <tt>uri</tt>.
getMIMETypeFromURI :: URI -> IO String
getFileMIMETypeFast :: FilePath -> IO String

-- | Try to guess the MIME-type of the file represented by <tt>path</tt>.
--   If <tt>suffixOnly</tt> is <a>False</a>, use the MIME-magic based
--   lookup first. Handles non-existant files by returning a type based on
--   the file extension.
getFileMIMEType :: FilePath -> Bool -> IO String

-- | Returns <a>True</a> if <tt>mimeType</tt> is of the form
--   <tt>foo/*</tt>, and <a>False</a> otherwise.
mimeTypeIsSupertype :: String -> Bool

-- | Returns the supertype for <tt>mimeType</tt>. The supertype of an
--   application is computed by removing its suffix, and replacing it with
--   <tt>*</tt>. Thus, <tt>foo/bar</tt> will be converted to
--   <tt>foo/*</tt>.
getSupertypeFromMIMEType :: String -> String

-- | Reload the MIME information for the specified directory.
mimeInfoCacheReload :: FilePath -> IO ()


module System.Gnome.VFS.Monitor

-- | A handle to a file-system monitor.
data MonitorHandle

-- | A callback that must be passed to <tt>monitorAdd</tt>. It will be
--   called any time a file or directory is changed.
--   
--   The parameters, from left to right, are: * the handle to a filesystem
--   monitor, * the URI being monitored, * the actual file that was
--   modified, * the event that occured.
type MonitorCallback = MonitorHandle -> TextURI -> TextURI -> MonitorEventType -> IO ()

-- | Watch the object at <tt>textURI</tt> for changes, and call
--   <tt>callback</tt> when a change occurs.
monitorAdd :: String -> MonitorType -> MonitorCallback -> IO MonitorHandle

-- | Cancels the monitor referred to by <tt>monitorHandle</tt>.
monitorCancel :: MonitorHandle -> IO ()


module System.Gnome.VFS.Ops

-- | A handle to an open file
data Handle

-- | The result of a file operation.
data Result
Ok :: Result
ErrorNotFound :: Result
ErrorGeneric :: Result
ErrorInternal :: Result
ErrorBadParameters :: Result
ErrorNotSupported :: Result
ErrorIo :: Result
ErrorCorruptedData :: Result
ErrorWrongFormat :: Result
ErrorBadFile :: Result
ErrorTooBig :: Result
ErrorNoSpace :: Result
ErrorReadOnly :: Result
ErrorInvalidUri :: Result
ErrorNotOpen :: Result
ErrorInvalidOpenMode :: Result
ErrorAccessDenied :: Result
ErrorTooManyOpenFiles :: Result
ErrorEof :: Result
ErrorNotADirectory :: Result
ErrorInProgress :: Result
ErrorInterrupted :: Result
ErrorFileExists :: Result
ErrorLoop :: Result
ErrorNotPermitted :: Result
ErrorIsDirectory :: Result
ErrorNoMemory :: Result
ErrorHostNotFound :: Result
ErrorInvalidHostName :: Result
ErrorHostHasNoAddress :: Result
ErrorLoginFailed :: Result
ErrorCancelled :: Result
ErrorDirectoryBusy :: Result
ErrorDirectoryNotEmpty :: Result
ErrorTooManyLinks :: Result
ErrorReadOnlyFileSystem :: Result
ErrorNotSameFileSystem :: Result
ErrorNameTooLong :: Result
ErrorServiceNotAvailable :: Result
ErrorServiceObsolete :: Result
ErrorProtocolError :: Result
ErrorNoMasterBrowser :: Result
ErrorNoDefault :: Result
ErrorNoHandler :: Result
ErrorParse :: Result
ErrorLaunch :: Result
ErrorTimeout :: Result
ErrorNameserver :: Result
ErrorLocked :: Result
ErrorDeprecatedFunction :: Result
ErrorInvalidFilename :: Result
ErrorNotASymbolicLink :: Result
NumErrors :: Result
data OpenMode
OpenNone :: OpenMode
OpenRead :: OpenMode
OpenWrite :: OpenMode
OpenRandom :: OpenMode
OpenTruncate :: OpenMode

-- | Specifies the start position for a seek operation.
data SeekPosition
SeekStart :: SeekPosition
SeekCurrent :: SeekPosition
SeekEnd :: SeekPosition

-- | UNIX-like permissions for a file.
data FilePermissions
PermSUID :: FilePermissions
PermSGID :: FilePermissions
PermSticky :: FilePermissions
PermUserRead :: FilePermissions
PermUserWrite :: FilePermissions
PermUserExec :: FilePermissions
PermGroupRead :: FilePermissions
PermGroupWrite :: FilePermissions
PermGroupExec :: FilePermissions
PermOtherRead :: FilePermissions
PermOtherWrite :: FilePermissions
PermOtherExec :: FilePermissions
PermAccessReadable :: FilePermissions
PermAccessWritable :: FilePermissions
PermAccessExecutable :: FilePermissions

-- | An integral type wide enough to hold the size of a file.
type FileSize = Word64

-- | An integral type wide enough to hold an offset into a file.
type FileOffset = Word64

-- | Open the file at <tt>textURI</tt>.
open :: TextURI -> OpenMode -> IO Handle

-- | Open the file at <tt>uri</tt>.
openURI :: URI -> OpenMode -> IO Handle

-- | Create a file at <tt>textURI</tt>.
create :: TextURI -> OpenMode -> Bool -> [FilePermissions] -> IO Handle

-- | Create a file at <tt>uri</tt>.
createURI :: URI -> OpenMode -> Bool -> [FilePermissions] -> IO Handle

-- | Close a <a>Handle</a>.
close :: Handle -> IO ()

-- | Seek to a position in a file.
seek :: Handle -> SeekPosition -> FileOffset -> IO ()

-- | Return the current position in the file.
tell :: Handle -> IO FileSize

-- | Free any cache associated with the file opened on <tt>handle</tt>, in
--   the region of <tt>size</tt> bytes starting at <tt>offset</tt>.
forgetCache :: Handle -> FileOffset -> FileSize -> IO ()

-- | Truncate the file at <tt>textURI</tt> to <tt>length</tt> bytes.
truncate :: String -> FileSize -> IO ()

-- | Truncate the file at <tt>uri</tt> to <tt>length</tt> bytes.
truncateURI :: URI -> FileSize -> IO ()

-- | Truncate the file opened on <tt>handle</tt> to <tt>length</tt> bytes.
truncateHandle :: Handle -> FileSize -> IO ()

-- | Get the file information for the file at <tt>textURI</tt>.
getFileInfo :: String -> [FileInfoOptions] -> IO FileInfo

-- | Get the file information for the file at <tt>uri</tt>.
getFileInfoURI :: URI -> [FileInfoOptions] -> IO FileInfo

-- | Get the file information for the file opened on <tt>handle</tt>.
getFileInfoFromHandle :: Handle -> [FileInfoOptions] -> IO FileInfo

-- | Set the file information for the file at <tt>textURI</tt>.
setFileInfo :: String -> FileInfo -> [SetFileInfoMask] -> IO ()

-- | Set the file information for the file at <tt>uri</tt>.
setFileInfoURI :: URI -> FileInfo -> [SetFileInfoMask] -> IO ()


module System.Gnome.VFS.URI

-- | A <a>URI</a> is a semi-textual representation of a uniform resource
--   identifier. It contains the information about a resource location
--   encoded as canononicalized text, but also holds extra information
--   about the context in which the URI is used.
data URI

-- | The toplevel URI element used to access resources stored on a remote
--   server.
data ToplevelURI

-- | A string that can be passed to <tt>uriFromString</tt> to create a
--   valid <a>URI</a>.
type TextURI = String

-- | Flags specifying which fields of a <a>URI</a> should be hidden when
--   converted to a string using <tt>uriToString</tt>.
data URIHideOptions
URIHideNone :: URIHideOptions
URIHideUserName :: URIHideOptions
URIHidePassword :: URIHideOptions
URIHideHostName :: URIHideOptions
URIHideHostPort :: URIHideOptions
URIHideToplevelMethod :: URIHideOptions
URIHideFragmentIdentifier :: URIHideOptions

-- | Create a new <a>URI</a> from <tt>textURI</tt>. Unsupported and unsafe
--   methods are not allowed and will result in <a>Nothing</a> being
--   returned. URL transforms are allowed.
uriFromString :: TextURI -> Maybe URI

-- | Create a new uri from <tt>relativeReference</tt>, relative to
--   <tt>base</tt>. The resolution algorithm in some aspects follows RFC
--   2396, section 5.2, but is not identical due to some extra assumptions
--   GnomeVFS makes about URIs.
--   
--   If relative_reference begins with a valid scheme identifier followed
--   by <tt>':'</tt>, it is assumed to refer to an absolute URI, and a
--   <a>URI</a> is created from it using <a>uriFromString</a>.
--   
--   Otherwise, depending on its precise syntax, it inherits some aspects
--   of the parent URI, but the parents' fragment and query components are
--   ignored.
--   
--   If relative_reference begins with <tt>"//"</tt>, it only inherits the
--   base scheme; if it begins with <tt>'/'</tt> (i.e., it is an absolute
--   path reference), it inherits everything except the base path.
--   Otherwise, it replaces the part of base after the last <tt>'/'</tt>.
--   
--   Note: This function should not be used by application authors unless
--   they expect very distinct semantics. Instead, authors should use
--   <a>uriAppendFileName</a>, <a>uriAppendPath</a>, <a>uriAppendString</a>
--   or <a>uriResolveSymbolicLink</a>.
uriResolveRelative :: URI -> String -> Maybe URI

-- | Create a new uri from <tt>symbolicLink</tt>, relative to
--   <tt>base</tt>.
--   
--   If symbolic_link begins with a <tt>'/'</tt>, it replaces the path of
--   base, otherwise it is appended after the last <tt>'/'</tt> character
--   of base.
uriResolveSymbolicLink :: URI -> String -> Maybe URI

-- | Create a new URI obtained by appending <tt>uriFragment</tt> to
--   <tt>uri</tt>. This will take care of adding an appropriate directory
--   separator between the end of <tt>uri</tt> and the start of
--   <tt>uriFragment</tt> if necessary.
--   
--   This function will return <a>Nothing</a> if the resulting URI is not
--   valid.
uriAppendString :: URI -> String -> Maybe URI

-- | Create a new uri obtained by appending <tt>path</tt> to <tt>uri</tt>.
--   This will take care of adding an appropriate directory separator
--   between the end of <tt>uri</tt> and the start of <tt>path</tt> if
--   necessary, as well as escaping <tt>path</tt> as necessary.
--   
--   This function will return <a>Nothing</a> if the resulting URI is not
--   valid.
uriAppendPath :: URI -> FilePath -> Maybe URI

-- | Create a new URI obtained by appending <tt>fileName</tt> to
--   <tt>uri</tt>. This will take care of adding an appropriate directory
--   separator between the end of <tt>uri</tt> and the start of
--   <tt>fileName</tt> if necessary. <tt>fileName</tt> might, for instance,
--   be the result of a call to
--   <tt>System.Posix.Directory.readDirStream</tt>.
--   
--   This function will return <a>Nothing</a> if the resulting URI is not
--   valid.
uriAppendFileName :: URI -> FilePath -> Maybe URI

-- | Translate <tt>uri</tt> into a printable string. The string will not
--   contain the URI elements specified by <tt>hideOptions</tt>.
--   
--   A <tt>file:</tt> URI on Win32 might look like
--   <tt>file:///x:/foo/bar.txt</tt>. Note that the part after
--   <tt>file://</tt> is not a legal file name, you need to remove the
--   <tt>/</tt> in front of the drive letter. This function does that
--   automatically if <tt>hideOptions</tt> specifies that the toplevel
--   method, user name, password, host name and host port should be hidden.
--   
--   On the other hand, a <tt>file:</tt> URI for a UNC path looks like
--   <tt>file:////server/share/foo/bar.txt</tt>, and in that case the part
--   after <tt>file://</tt> is the correct file name.
uriToString :: URI -> URIHideOptions -> TextURI

-- | Check if <tt>uri</tt> is a local URI. Note that the return value of
--   this function entirely depends on the method associated with the URI.
--   It is up to the method author to distinguish between remote URIs and
--   URIs referring to entities on the local computer.
--   
--   Warning, this can be slow, as it does I/O to detect things like NFS
--   mounts.
uriIsLocal :: URI -> IO Bool

-- | Check whether <tt>uri</tt> has a parent or not.
uriHasParent :: URI -> Bool

-- | Retrieve <tt>uri</tt>'s parent URI.
uriGetParent :: URI -> Maybe URI

-- | Retrieve <tt>uri</tt>'s toplevel URI.
uriGetToplevel :: URI -> ToplevelURI

-- | Retrieve the hostname for <tt>uri</tt>.
uriGetHostName :: URI -> Maybe String

-- | Retrieve the scheme for <tt>uri</tt>.
uriGetScheme :: URI -> Maybe String

-- | Retrieve the host port for <tt>uri</tt>.
uriGetHostPort :: URI -> Word

-- | Retrieve the user name for <tt>uri</tt>.
uriGetUserName :: URI -> Maybe String

-- | Retrieve the password for <tt>uri</tt>.
uriGetPassword :: URI -> Maybe String

-- | Create a new <a>URI</a> using <tt>uri</tt>, replacing the host name by
--   <tt>hostName</tt>.
uriSetHostName :: URI -> Maybe String -> URI

-- | Create a new <a>URI</a> using <tt>uri</tt>, replacing the host port by
--   <tt>hostPort</tt>.
--   
--   If <tt>hostPort</tt> is <tt>0</tt>, use the default port for
--   <tt>uri</tt>'s toplevel access method.
uriSetHostPort :: URI -> Word -> URI

-- | Create a new <a>URI</a> using <tt>uri</tt>, replacing the user name by
--   <tt>userName</tt>.
uriSetUserName :: URI -> Maybe String -> URI

-- | Create a new <a>URI</a> using <tt>uri</tt>, replacing the password by
--   <tt>password</tt>.
uriSetPassword :: URI -> Maybe String -> URI

-- | Compare two <a>URI</a>s for equality.
uriEqual :: URI -> URI -> Bool

-- | Check if <tt>possibleChild</tt> is contained in
--   <tt>possibleParent</tt>. If <tt>recursive</tt> is <a>False</a>, just
--   try the immediate parent; otherwise search up through the heirarchy.
uriIsParent :: URI -> URI -> Bool -> Bool

-- | Retrieve the path name for <tt>uri</tt>.
uriGetPath :: URI -> Maybe FilePath

-- | Retrieve the fragment identifier for <tt>uri</tt>.
uriGetFragmentIdentifier :: URI -> Maybe String

-- | Extract the name of the directory in which the file pointed to by
--   <tt>uri</tt> is stored as a string. The string will end with a
--   directory separator.
uriExtractDirname :: URI -> Maybe FilePath

-- | Retrieve base file name for <tt>uri</tt>, ignoring any trailing path
--   separators. This matches the XPG definition of basename, but not
--   <tt>System.FilePath.basename</tt>. This is often useful when you want
--   the name of something that's pointed to by a URI, and don't care
--   whether the uri has a directory or file form. If <tt>uri</tt> points
--   to the root of a domain, returns the host name. If there's no host
--   name, returns the path separator.
--   
--   See also: <a>uriExtractShortPathName</a>.
uriExtractShortName :: URI -> String

-- | Retrieve base file name for <tt>uri</tt>, ignoring any trailing path
--   separators. This matches the XPG definition of basename, but not
--   <tt>System.FilePath.basename</tt>. This is often useful when you want
--   the name of something that's pointed to by a URI, and don't care
--   whether the uri has a directory or file form. If <tt>uri</tt> points
--   to the root of any domain, returns the path separator.
--   
--   See also: <a>uriExtractShortName</a>.
uriExtractShortPathName :: URI -> String

-- | Extracts a list of URIs from a standard <tt>text/uri-list</tt>, such
--   as one would get on a drop operation.
uriListParse :: String -> [URI]

-- | Returns a full URI given a full base URI, and a secondary URI which
--   may be relative.
uriMakeFullFromRelative :: String -> String -> Maybe String


module System.Gnome.VFS.Util

-- | Formats <tt>size</tt> so that it is easy for the user to read. Gives
--   the size in bytes, kilobytes, megabytes or gigabytes, choosing
--   whatever is appropriate.
formatFileSizeForDisplay :: FileSize -> String

-- | Filter, modify, unescape, and change <tt>textURI</tt> to make it
--   appropriate for display to users.
--   
--   Rules: A <tt>file:</tt> URI without fragments should appear as a local
--   path. A <tt>file:</tt> URI with fragments should appear as
--   <tt>file:uri</tt>. All other URIs appear as expected.
formatURIForDisplay :: TextURI -> Maybe String

-- | Launches the default application or component associated with the
--   given URL.
urlShow :: String -> IO ()

-- | Like <a>urlShow</a>, but using the specified environment variables.
urlShowWithEnv :: String -> [String] -> IO ()

-- | Checks if <tt>commandString</tt> starts with the full path of an
--   executable file or an executable in the system path.
isExecutableCommandString :: String -> IO Bool

-- | Escapes <tt>string</tt>, replacing any and all special characters with
--   equivalent escape sequences.
escapeString :: String -> String

-- | Escapes path, replacing only special characters that would not be
--   found in paths (so <tt>'/'</tt>, <tt>'&amp;'</tt>, and <tt>'='</tt>
--   will not be escaped by this function).
escapePathString :: FilePath -> String

-- | Escapes path, replacing only special characters that would not be
--   found in a path or host name (so <tt>'/'</tt>, <tt>'&amp;'</tt>,
--   <tt>'='</tt>, <tt>':'</tt> and <tt>'@'</tt> will not be escaped by
--   this function).
escapeHostAndPathString :: FilePath -> String

-- | Escapes only <tt>'/'</tt> and <tt>'%'</tt> characters in
--   <tt>string</tt>, replacing them with their escape sequence
--   equivalents.
escapeSlashes :: String -> String

-- | Escapes the characters listed in <tt>matchSet</tt> in <tt>string</tt>.
escapeSet :: String -> String -> String

-- | Decodes escaped characters (i.e., <tt>%xx</tt> sequences) in
--   <tt>escapedString</tt>. Characters are decoded in <tt>%xx</tt> form,
--   where <tt>xx</tt> is the hex code for an ASCII character.
unescapeString :: String -> String -> String

-- | Similar to <tt>unescapeString</tt>, but returns something
--   semi-intelligible to the user, even upon receiving traumatic input
--   such as <tt>00</tt> or URIs in bad form.
--   
--   WARNING: You should never use this function on a whole URI! It
--   unescapes reserved characters, and can result in a mangled URI that
--   can not be re-entered. For example, it unescapes <tt>'#'</tt>,
--   <tt>'&amp;'</tt> and <tt>'?'</tt>, which have special meanings in URI
--   strings.
unescapeStringForDisplay :: String -> String

-- | Standardizes the format of <tt>uri</tt>, so that it can be used later
--   in other functions that expect a canonical URI.
makeURICanonical :: TextURI -> Maybe TextURI

-- | Returns a canonicalized URI. If <tt>uri</tt> contains a fragment
--   (anything after a <tt>'#'</tt>), it is stripped off, and the resulting
--   URI is made canonical.
makeURICanonicalStripFragment :: TextURI -> Maybe TextURI

-- | Returns a canonicalized path name.
makePathNameCanonical :: FilePath -> Maybe TextURI

-- | Takes a user input path/URI and makes a valid URI out of it.
--   
--   This function is the reverse of <a>formatURIForDisplay</a>.
makeURIFromInput :: String -> Maybe TextURI

-- | Determine a fully qualified URI from a relative or absolute input
--   path. The directories specified by <tt>dirs</tt> are searched when the
--   path is relative.
makeURIFromInputWithDirs :: FilePath -> [MakeURIDirs] -> IO TextURI

-- | Similar to <a>makeURIFromInput</a>, except:
--   
--   <ol>
--   <li>guesses relative paths instead of HTTP domains</li>
--   <li>doesn't bother stripping leading/trailing white space</li>
--   <li>doesn't bother with tilde expansion -- that's done by the
--   shell</li>
--   </ol>
makeURIFromShellArg :: String -> String

-- | If <tt>path</tt> begins with a tilde, representing the user's home
--   directory, expand it to the actual directory.
expandInitialTilde :: String -> IO String

-- | Create a local path for a uri.
--   
--   If <tt>uri</tt> is not a <tt>file:///</tt> URI, or it contains a
--   fragment identifier or is chained, this function returns
--   <a>Nothing</a>.
getLocalPathFromURI :: TextURI -> Maybe FilePath

-- | Returns a <tt>file:///</tt> URI for the local path
--   <tt>localFullPath</tt>, such as a path provided by
--   <tt>Graphics.UI.Gtk.Selectors.FileChooser.fileChooserGetFilename</tt>.
--   The resulting URI may be provided, for instance, to
--   <tt>System.Gnome.VFS.URI.uriFromString</tt>.
--   
--   On Windows <tt>localFullPath</tt> should be in the UTF-8 encoding, and
--   can start with a drive letter, but doesn't have to.
getURIFromLocalPath :: FilePath -> TextURI

-- | Returns the icon path for <tt>filename</tt>. Example:
--   
--   <tt><a>iconPathFromFilename</a> "nautilus/nautilus-desktop.png"</tt>
--   will return a string forming the full path of the file
--   <tt>nautilus-desktop.png</tt>, i.e.
--   <tt>${prefix}/share/pixmaps/nautilus/nautilus-desktop.png</tt>.
iconPathFromFilename :: String -> IO String

-- | Stores the amount of free space in bytes on <tt>uri</tt>'s volume in |
--   size.
getVolumeFreeSpace :: URI -> IO FileSize

-- | Compare two URIs.
urisMatch :: TextURI -> TextURI -> Bool

-- | Retrieves the scheme used in <tt>uri</tt>.
getURIScheme :: TextURI -> Maybe String

-- | Check if the current thread is the thread with the main glib event
--   loop.
isPrimaryThread :: IO Bool

-- | Convert an open 1 file descriptor into a <a>Handle</a> object.
openFD :: Fd -> IO Handle


module System.Gnome.VFS.Volume
data Volume
class GObjectClass o => VolumeClass o

-- | Identifies a <a>Volume</a>.
type VolumeID = CULong
castToVolume :: GObjectClass obj => obj -> Volume

-- | Compares two <a>Volume</a> objects <tt>a</tt> and <tt>b</tt>. Two
--   <a>Volume</a> objects referring to different volumes are guaranteed to
--   not return <a>EQ</a> when comparing them. If they refer to the same
--   volume <a>EQ</a> is returned.
--   
--   The resulting gint should be used to determine the order in which
--   <tt>a</tt> and <tt>b</tt> are displayed in graphical user interfaces.
--   
--   The comparison algorithm first of all peeks the device type of
--   <tt>a</tt> and <tt>b</tt>, they will be sorted in the following order:
--   
--   <ul>
--   <li>Magnetic and opto-magnetic volumes (ZIP, floppy)</li>
--   <li>Optical volumes (CD, DVD)</li>
--   <li>External volumes (USB sticks, music players)</li>
--   <li>Mounted hard disks</li>
--   <li>Network mounts</li>
--   <li>Other volumes</li>
--   </ul>
--   
--   Afterwards, the display name of <tt>a</tt> and <tt>b</tt> is compared
--   using a locale-sensitive sorting algorithm.
--   
--   If two volumes have the same display name, their unique ID is compared
--   which can be queried using <a>volumeGetID</a>.
volumeCompare :: (VolumeClass volume1, VolumeClass volume2) => volume1 -> volume2 -> IO Ordering
volumeEject :: VolumeClass volume => volume -> VolumeOpSuccessCallback -> VolumeOpFailureCallback -> IO ()

-- | Returns the activation URI of <tt>volume</tt>.
--   
--   The returned URI usually refers to a valid location. You can check the
--   validity of the location by calling
--   <tt>System.Gnome.VFS.URI.uriFromString</tt> with the URI, and checking
--   whether the return value is not <a>Nothing</a>.
volumeGetActivationURI :: VolumeClass volume => volume -> IO TextURI

-- | Returns the device path of a <a>Volume</a> object.
--   
--   For HAL volumes, this returns the value of the volume's
--   <tt>block.device</tt> key. For UNIX mounts, it returns the
--   <tt>mntent</tt>'s <tt>mnt_fsname</tt> entry.
--   
--   Otherwise, it returns <a>Nothing</a>.
volumeGetDevicePath :: VolumeClass volume => volume -> IO String

-- | Returns the <a>DeviceType</a> of a <a>Volume</a> object.
volumeGetDeviceType :: VolumeClass volume => volume -> IO DeviceType

-- | Returns the display name of a <a>Volume</a> object.
volumeGetDisplayName :: VolumeClass volume => volume -> IO String

-- | Returns the <a>Drive</a> that <tt>volume</tt> is on.
volumeGetDrive :: VolumeClass volume => volume -> IO Drive

-- | Returns a string describing the file system on <tt>volume</tt>, or
--   <a>Nothing</a> if no information on the underlying file system is
--   available.
--   
--   The file system may be used to provide special functionality that
--   depends on the file system type, for instance to determine whether
--   trashing is supported (cf. <a>volumeHandlesTrash</a>).
--   
--   For HAL mounts, this returns the value of the <tt>"volume.fstype"</tt>
--   key, for traditional UNIX mounts it is set to the mntent's mnt_type
--   key, for connected servers, <a>Nothing</a> is returned.
volumeGetFilesystemType :: VolumeClass volume => volume -> IO (Maybe String)

-- | Returns the HAL UDI of a <a>Volume</a> object.
--   
--   For HAL volumes, this matches the value of the <tt>info.udi</tt> key,
--   for other volumes it is <a>Nothing</a>.
volumeGetHalUDI :: VolumeClass volume => volume -> IO (Maybe String)

-- | Returns the icon filename for a <a>Volume</a> object.
volumeGetIcon :: VolumeClass volume => volume -> IO FilePath

-- | Returns a unique identifier for a <a>Volume</a> object.
volumeGetID :: VolumeClass volume => volume -> IO VolumeID

-- | Returns the volume type of <tt>volume</tt>.
volumeGetVolumeType :: VolumeClass volume => volume -> IO VolumeType

-- | Returns whether the file system on a volume supports trashing of
--   files.
--   
--   If the volume has an AutoFS file system (i.e.,
--   <a>volumeGetDeviceType</a> returns <a>DeviceTypeAutofs</a>), or if the
--   volume is mounted read-only (i.e., <a>volumeIsReadOnly</a> returns
--   <a>True</a>), it is assumed to not support trashing of files.
--   
--   Otherwise, if the volume provides file system information, it is
--   determined whether the file system supports trashing of files.
volumeHandlesTrash :: VolumeClass volume => volume -> IO Bool

-- | Returns whether the file system on a volume is currently mounted.
--   
--   For HAL volumes, this reflects the value of the
--   <tt>"volume.is_mounted"</tt> key, for traditional UNIX mounts and
--   connected servers, <a>True</a> is returned, because their existence
--   implies that they are mounted.
volumeIsMounted :: VolumeClass volume => volume -> IO Bool

-- | Returns whether the file system on a volume is read-only.
--   
--   For HAL volumes, the <tt>"volume.is_mounted_read_only"</tt> key is
--   authoritative, for traditional UNIX mounts it returns (!(0)) if the
--   mount was done with the <tt>"ro"</tt> option. For servers,
--   <a>False</a> is returned.
volumeIsReadOnly :: VolumeClass volume => volume -> IO Bool

-- | Returns a <a>Bool</a> for whether a volume is user-visible. This
--   should be used by applications to determine whether the volume should
--   be listed in user interfaces listing available volumes.
volumeIsUserVisible :: VolumeClass volume => volume -> IO Bool
volumeUnmount :: VolumeClass volume => volume -> VolumeOpSuccessCallback -> VolumeOpFailureCallback -> IO ()


module System.Gnome.VFS.VolumeMonitor
data VolumeMonitor
class GObjectClass o => VolumeMonitorClass o

-- | The global volume monitor object.
volumeMonitor :: VolumeMonitor

-- | Returns a list of all drives connected to the machine.
volumeMonitorGetConnectedDrives :: VolumeMonitorClass volumeMonitor => volumeMonitor -> IO [Drive]

-- | Try to find the <a>Drive</a> with ID <tt>id</tt>.
volumeMonitorGetDriveByID :: VolumeMonitorClass volumeMonitor => volumeMonitor -> DriveID -> IO (Maybe Drive)

-- | Returns a list of all volumes currently mounted on the machine.
volumeMonitorGetMountedVolumes :: VolumeMonitorClass volumeMonitor => volumeMonitor -> IO [Volume]

-- | Try to find the <a>Volume</a> with ID <tt>id</tt>.
volumeMonitorGetVolumeByID :: VolumeMonitorClass volumeMonitor => volumeMonitor -> VolumeID -> IO (Maybe Volume)

-- | Returns the <a>Volume</a> corresponding to path, or <a>Nothing</a>.
--   
--   The volume referring to path is found by calling <tt>stat</tt> on
--   path, and then iterating through the list of volumes that refer to
--   currently mounted local file systems. The first volume in this list
--   maching the path's UNIX device is returned.
--   
--   If the <tt>stat</tt> on path was not successful, or no volume matches
--   path, <a>Nothing</a> is returned.
volumeMonitorGetVolumeForPath :: VolumeMonitorClass volumeMonitor => volumeMonitor -> FilePath -> IO (Maybe Volume)
onVolumeMonitorVolumeMounted :: VolumeMonitorClass volumeMonitor => volumeMonitor -> (Volume -> IO ()) -> IO (ConnectId volumeMonitor)
afterVolumeMonitorVolumeMounted :: VolumeMonitorClass volumeMonitor => volumeMonitor -> (Volume -> IO ()) -> IO (ConnectId volumeMonitor)
onVolumeMonitorVolumePreUnmount :: VolumeMonitorClass volumeMonitor => volumeMonitor -> (Volume -> IO ()) -> IO (ConnectId volumeMonitor)
afterVolumeMonitorVolumePreUnmount :: VolumeMonitorClass volumeMonitor => volumeMonitor -> (Volume -> IO ()) -> IO (ConnectId volumeMonitor)
onVolumeMonitorVolumeUnmounted :: VolumeMonitorClass volumeMonitor => volumeMonitor -> (Volume -> IO ()) -> IO (ConnectId volumeMonitor)
afterVolumeMonitorVolumeUnmounted :: VolumeMonitorClass volumeMonitor => volumeMonitor -> (Volume -> IO ()) -> IO (ConnectId volumeMonitor)


module System.Gnome.VFS.Xfer
data XferProgressInfo
XferProgressInfo :: Result -> XferPhase -> Maybe String -> Maybe String -> Word -> Word -> FileSize -> FileSize -> FileSize -> FileSize -> Bool -> XferProgressInfo

-- | current VFS status
xferProgressInfoVFSStatus :: XferProgressInfo -> Result

-- | phase of the transfer
xferProgressInfoPhase :: XferProgressInfo -> XferPhase

-- | currently transferring source URI
xferProgressInfoSourceName :: XferProgressInfo -> Maybe String

-- | currently transferring target URI
xferProgressInfoTargetName :: XferProgressInfo -> Maybe String

-- | index of the file currently being transferred
xferProgressInfoFileIndex :: XferProgressInfo -> Word

-- | total number of files being transferred
xferProgressInfoFilesTotal :: XferProgressInfo -> Word

-- | total size of all files in bytes
xferProgressInfoBytesTotal :: XferProgressInfo -> FileSize

-- | size of the file currently being transferred
xferProgressInfoFileSize :: XferProgressInfo -> FileSize

-- | number of bytes already transferred in the current file
xferProgressInfoBytesCopied :: XferProgressInfo -> FileSize

-- | total number of bytes already transferred
xferProgressInfoTotalBytesCopied :: XferProgressInfo -> FileSize

-- | <a>True</a> if the file being transferred is a top-level item;
--   <a>False</a> if it is inside a directory
xferProgressInfoTopLevelItem :: XferProgressInfo -> Bool

-- | Options controlling how the <tt>System.Gnome.VFS.Xfer.xferURI</tt> and
--   related functions behave.
data XferOptions
XferFollowLinks :: XferOptions
XferRecursive :: XferOptions
XferSamefs :: XferOptions
XferDeleteItems :: XferOptions
XferEmptyDirectories :: XferOptions
XferNewUniqueDirectory :: XferOptions
XferRemovesource :: XferOptions
XferUseUniqueNames :: XferOptions
XferLinkItems :: XferOptions
XferFollowLinksRecursive :: XferOptions
XferTargetDefaultPerms :: XferOptions
data XferOverwriteMode
XferOverwriteModeAbort :: XferOverwriteMode
XferOverwriteModeReplace :: XferOverwriteMode
XferOverwriteModeSkip :: XferOverwriteMode
data XferErrorAction
XferErrorActionAbort :: XferErrorAction
XferErrorActionRetry :: XferErrorAction
XferErrorActionSkip :: XferErrorAction
data XferOverwriteAction
XferOverwriteActionAbort :: XferOverwriteAction
XferOverwriteActionReplace :: XferOverwriteAction
XferOverwriteActionReplaceAll :: XferOverwriteAction
XferOverwriteActionSkip :: XferOverwriteAction
XferOverwriteActionSkipAll :: XferOverwriteAction

-- | The type of the first callback that is passed to
--   <tt>System.Gnome.VFS.Xfer.xferURI</tt> and related functions. This
--   callback will be called periodically during transfers that are
--   progressing normally.
--   
--   The callback must return <a>False</a> to abort the transfer, or
--   <a>True</a> otherwise.
type XferProgressCallback = XferProgressInfo -> IO Bool

-- | The type of the second callback that is passed to
--   <tt>System.Gnome.VFS.Xfer.xferURI</tt>. This callback will be called
--   whenever an error occurs.
--   
--   The callback must return the action to be performed in response to the
--   error.
type XferErrorCallback = XferProgressInfo -> IO XferErrorAction

-- | The type of the third callback that is passed to
--   <tt>System.Gnome.VFS.Xfer.xferURI</tt>. This callback will be called
--   when a file would be overwritten.
--   
--   The callback must return the action to be performed when the target
--   file already exists.
type XferOverwriteCallback = XferProgressInfo -> IO XferOverwriteAction

-- | The type of the fourth callback that is passed to
--   <tt>System.Gnome.VFS.Xfer.xferURI</tt>. This callback will be called
--   when a duplicate filename is found.
--   
--   The parameters, from left to right, are: * <tt>info</tt> - information
--   about the progress of the current transfer, * <tt>duplicateName</tt> -
--   the name of the target file, * <tt>duplicateCount</tt> - the number of
--   duplicates that exist.
--   
--   The callback must return the new filename that should be used, or
--   <a>Nothing</a> to abort.
type XferDuplicateCallback = XferProgressInfo -> String -> Int -> IO (Maybe String)

-- | Transfer the file located at <tt>sourceURI</tt> to <tt>targetURI</tt>,
--   using the specified options and callbacks.
xferURI :: URI -> URI -> [XferOptions] -> Maybe XferProgressCallback -> Maybe XferErrorCallback -> Either XferOverwriteMode XferOverwriteCallback -> Maybe XferDuplicateCallback -> IO ()

-- | For each pair in <tt>sourceTargetURIList</tt>, transfer the file at
--   the first <a>URI</a> to the second <a>URI</a>.
xferURIList :: [(URI, URI)] -> [XferOptions] -> Maybe XferProgressCallback -> Maybe XferErrorCallback -> Either XferOverwriteMode XferOverwriteCallback -> Maybe XferDuplicateCallback -> IO ()

-- | Delete the files at the <a>URI</a>s in <tt>sourceURIList</tt>.
xferDeleteList :: [URI] -> [XferOptions] -> Maybe XferProgressCallback -> Maybe XferErrorCallback -> IO ()
instance Storable XferProgressInfo


module System.Gnome.VFS.Drive
data Drive
class GObjectClass o => DriveClass o

-- | Identifies a <a>Drive</a>
type DriveID = CULong

-- | Identifies the device type of a <a>Volume</a> or <a>Drive</a>.
data DeviceType
castToDrive :: GObjectClass obj => obj -> Drive

-- | Compares two <a>DriveClass</a> objects <tt>a</tt> and <tt>b</tt>. Two
--   <a>DriveClass</a> objects referring to different drives are guaranteed
--   to not return <a>EQ</a> when comparing them. If they refer to the same
--   drive <a>EQ</a> is returned.
--   
--   The resulting gint should be used to determine the order in which
--   <tt>a</tt> and <tt>b</tt> are displayed in graphical user interfaces.
--   
--   The comparison algorithm first of all peeks the device type of
--   <tt>a</tt> and <tt>b</tt>, they will be sorted in the following order:
--   
--   <ul>
--   <li>Magnetic and opto-magnetic drives (ZIP, floppy)</li>
--   <li>Optical drives (CD, DVD)</li>
--   <li>External drives (USB sticks, music players)</li>
--   <li>Mounted hard disks</li>
--   <li>Other drives</li>
--   </ul>
--   
--   Afterwards, the display name of <tt>a</tt> and <tt>b</tt> is compared
--   using a locale-sensitive sorting algorithm.
--   
--   If two drives have the same display name, their unique ID is compared
--   which can be queried using <a>driveGetID</a>.
driveCompare :: DriveClass drive => drive -> drive -> IO Ordering

-- | Returns the activation URI of <tt>drive</tt>.
--   
--   The returned URI usually refers to a valid location. You can check the
--   validity of the location by calling
--   <tt>System.Gnome.VFS.URI.uriFromString</tt> with the URI, and checking
--   whether the return value is not <a>Nothing</a>.
driveGetActivationURI :: DriveClass drive => drive -> IO String

-- | Returns the device path of a <a>Drive</a> object.
--   
--   For HAL drives, this returns the value of the drive's
--   <tt>block.device</tt> key. For UNIX mounts, it returns the
--   <tt>mntent</tt>'s <tt>mnt_fsname</tt> entry.
--   
--   Otherwise, it returns <a>Nothing</a>.
driveGetDevicePath :: DriveClass drive => drive -> IO (Maybe String)

-- | Returns the <a>DeviceType</a> of a <a>Drive</a> object.
driveGetDeviceType :: DriveClass drive => drive -> IO DeviceType

-- | Returns the display name of a <a>Drive</a> object.
driveGetDisplayName :: DriveClass drive => drive -> IO String

-- | Returns the HAL UDI of a <a>Drive</a> object.
--   
--   For HAL drives, this matches the value of the <tt>info.udi</tt> key,
--   for other drives it is <a>Nothing</a>.
driveGetHalUDI :: DriveClass drive => drive -> IO (Maybe String)

-- | Returns the icon filename for a <a>Drive</a> object.
driveGetIcon :: DriveClass drive => drive -> IO FilePath

-- | Returns a unique identifier for a <a>Drive</a> object.
driveGetID :: DriveClass drive => drive -> IO DriveID

-- | Returns a <a>Bool</a> for whether a drive is connected.
driveIsConnected :: DriveClass drive => drive -> IO Bool

-- | Returns a <a>Bool</a> for whether a drive is mounted.
driveIsMounted :: DriveClass drive => drive -> IO Bool

-- | Returns a <a>Bool</a> for whether a drive is user-visible. This should
--   be used by applications to determine whether the drive should be
--   listed in user interfaces listing available drives.
driveIsUserVisible :: DriveClass drive => drive -> IO Bool

-- | Returns a list of mounted volumes for a <a>Drive</a> object.
driveGetMountedVolumes :: DriveClass drive => drive -> IO [Volume]

-- | If drive has associated <a>Volume</a> objects, all of them will be
--   unmounted by calling <tt>System.Gnome.VFS.Volume.volumeUnmount</tt>
--   for each volume in <a>driveGetMountedVolumes</a>, except for the last
--   one, for which <tt>System.Gnome.VFS.Volume.volumeEject</tt> is called
--   to ensure that the drive's media is ejected.
driveEject :: DriveClass drive => drive -> VolumeOpSuccessCallback -> VolumeOpFailureCallback -> IO ()

-- | Mounts a <a>Drive</a> object.
driveMount :: DriveClass drive => drive -> VolumeOpSuccessCallback -> VolumeOpFailureCallback -> IO ()
onDriveVolumeMounted :: DriveClass drive => drive -> (Volume -> IO ()) -> IO (ConnectId drive)
afterDriveVolumeMounted :: DriveClass drive => drive -> (Volume -> IO ()) -> IO (ConnectId drive)
onDriveVolumePreUnmount :: DriveClass drive => drive -> (Volume -> IO ()) -> IO (ConnectId drive)
afterDriveVolumePreUnmount :: DriveClass drive => drive -> (Volume -> IO ()) -> IO (ConnectId drive)
onDriveVolumeUnmounted :: DriveClass drive => drive -> (Volume -> IO ()) -> IO (ConnectId drive)
afterDriveVolumeUnmounted :: DriveClass drive => drive -> (Volume -> IO ()) -> IO (ConnectId drive)


-- | Functions for creating, removing, and accessing directories and their
--   contents.
module System.Gnome.VFS.Directory

-- | A handle to an open directory.
data DirectoryHandle

-- | Options controlling the way in which a directories are visited.
data DirectoryVisitOptions
DirectoryVisitDefault :: DirectoryVisitOptions
DirectoryVisitSamefs :: DirectoryVisitOptions
DirectoryVisitLoopcheck :: DirectoryVisitOptions
DirectoryVisitIgnoreRecurseError :: DirectoryVisitOptions

-- | An enumerated value that must be returned from a
--   <a>DirectoryVisitCallback</a>. The <tt>directoryVisit</tt> and related
--   functions will perform the action specified.
data DirectoryVisitResult

-- | stop visiting files
DirectoryVisitStop :: DirectoryVisitResult

-- | continue as normal
DirectoryVisitContinue :: DirectoryVisitResult

-- | recursively visit the current entry
DirectoryVisitRecurse :: DirectoryVisitResult

-- | Create <tt>textURI</tt> as a directory. Only succeeds if a file or
--   directory does not already exist at <tt>textURI</tt>.
makeDirectory :: TextURI -> [FilePermissions] -> IO ()

-- | Create <tt>uri</tt> as a directory. Only succeeds if a file or
--   directory does not already exist at <tt>uri</tt>.
makeDirectoryForURI :: URI -> [FilePermissions] -> IO ()

-- | Remove the directory at <tt>textURI</tt>. The object at
--   <tt>textURI</tt> must be an empty directory.
removeDirectory :: TextURI -> IO ()

-- | Remove the directory at <tt>uri</tt>. The object at <tt>uri</tt> must
--   be an empty directory.
removeDirectoryFromURI :: URI -> IO ()

-- | Open directory textURI for reading. Returns a <a>DirectoryHandle</a>
--   which can be used to read directory entries one by one.
directoryOpen :: TextURI -> [FileInfoOptions] -> IO DirectoryHandle

-- | Open directory textURI for reading. Returns a <a>DirectoryHandle</a>
--   which can be used to read directory entries one by one.
directoryOpenFromURI :: URI -> [FileInfoOptions] -> IO DirectoryHandle

-- | Read the next directory entry from a <a>DirectoryHandle</a>.
directoryReadNext :: DirectoryHandle -> IO FileInfo

-- | Close a <a>DirectoryHandle</a>.
directoryClose :: DirectoryHandle -> IO ()

-- | Create a list of <a>FileInfo</a> objects representing each entry in
--   the directory at <tt>textURI</tt>, using options <tt>options</tt>.
directoryListLoad :: TextURI -> [FileInfoOptions] -> IO [FileInfo]

-- | Visit each entry in a directory at a <a>TextURI</a>, calling a
--   <a>DirectoryVisitCallback</a> for each one.
directoryVisit :: String -> [FileInfoOptions] -> [DirectoryVisitOptions] -> DirectoryVisitCallback -> IO ()

-- | Visit each entry in a directory at a <a>URI</a>, calling a
--   <a>DirectoryVisitCallback</a> for each one.
directoryVisitURI :: URI -> [FileInfoOptions] -> [DirectoryVisitOptions] -> DirectoryVisitCallback -> IO ()

-- | Visit each file in a list contained with a directory at a
--   <a>TextURI</a>, calling a <a>DirectoryVisitCallback</a> for each one.
directoryVisitFiles :: TextURI -> [String] -> [FileInfoOptions] -> [DirectoryVisitOptions] -> DirectoryVisitCallback -> IO ()

-- | Visit each file in a list contained with a directory at a <a>URI</a>,
--   calling a <a>DirectoryVisitCallback</a> for each one.
directoryVisitFilesAtURI :: URI -> [String] -> [FileInfoOptions] -> [DirectoryVisitOptions] -> DirectoryVisitCallback -> IO ()


module System.Gnome.VFS.Cancellation

-- | An object that can be used for signalling cancellation of an
--   operation.
data Cancellation

-- | Create a new <a>Cancellation</a> object for reporting cancellation to
--   a gnome-vfs module.
cancellationNew :: IO Cancellation

-- | Send a cancellation request through a <a>Cancellation</a> object.
cancellationCancel :: Cancellation -> IO ()

-- | Check for pending cancellation.
cancellationCheck :: Cancellation -> IO Bool

-- | Acknowledge a cancellation. This should be called if
--   <a>cancellationCheck</a> returns <a>True</a>.
cancellationAck :: Cancellation -> IO ()

-- | Get a file descriptor-based notificator for cancellation. When
--   cancellation receives a cancellation request, a character will be made
--   available on the returned file descriptor for input.
--   
--   This is very useful for detecting cancellation during I/O operations:
--   you can use the select() call to check for available input/output on
--   the file you are reading/writing, and on the notificator's file
--   descriptor at the same time. If a data is available on the
--   notificator's file descriptor, you know you have to cancel the
--   read/write operation.
cancellationGetFD :: Cancellation -> IO Fd


module System.Gnome.VFS
