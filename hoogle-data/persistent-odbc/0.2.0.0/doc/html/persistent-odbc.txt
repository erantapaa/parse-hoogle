-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Backend for the persistent library using ODBC
--   
--   This package contains backends for persistent using ODBC. It currently
--   supports the following databases: MSSQL, MySql, Oracle, Sqlite, DB2,
--   Postgres. Uses HDBC-ODBC for accessing ODBC.
@package persistent-odbc
@version 0.2.0.0

module Database.Persist.ODBCTypes

-- | List of DBMS that are supported
data DBType
MySQL :: DBType
Postgres :: DBType
MSSQL :: Bool -> DBType
mssql2012 :: DBType -> Bool
Oracle :: Bool -> DBType
oracle12c :: DBType -> Bool
DB2 :: DBType
Sqlite :: Bool -> DBType
sqlite3619 :: DBType -> Bool
mysql :: DBType
sqliteMin3619 :: DBType
sqlite :: DBType
db2 :: DBType
oracle :: DBType
oracleMin12c :: DBType
mssql :: DBType
mssqlMin2012 :: DBType
postgres :: DBType
data MigrationStrategy
MigrationStrategy :: ((Int, Int) -> Bool -> Text -> Text) -> ([EntityDef] -> (Text -> IO Statement) -> EntityDef -> IO (Either [Text] [(Bool, Text)])) -> (EntityDef -> [PersistValue] -> InsertSqlResult) -> (DBName -> Text) -> DBType -> MigrationStrategy
dbmsLimitOffset :: MigrationStrategy -> (Int, Int) -> Bool -> Text -> Text
dbmsMigrate :: MigrationStrategy -> [EntityDef] -> (Text -> IO Statement) -> EntityDef -> IO (Either [Text] [(Bool, Text)])
dbmsInsertSql :: MigrationStrategy -> EntityDef -> [PersistValue] -> InsertSqlResult
dbmsEscape :: MigrationStrategy -> DBName -> Text
dbmsType :: MigrationStrategy -> DBType
instance Show DBType
instance Read DBType


-- | A Sqlite backend for <tt>persistent</tt>.
module Database.Persist.MigrateSqlite
getMigrationStrategy :: DBType -> MigrationStrategy


-- | A DB2 backend for <tt>persistent</tt>.
module Database.Persist.MigrateDB2
getMigrationStrategy :: DBType -> MigrationStrategy


-- | A Oracle backend for <tt>persistent</tt>.
module Database.Persist.MigrateOracle
getMigrationStrategy :: DBType -> MigrationStrategy


-- | A MSSQL backend for <tt>persistent</tt>.
module Database.Persist.MigrateMSSQL
getMigrationStrategy :: DBType -> MigrationStrategy


-- | A MySQL backend for <tt>persistent</tt>.
module Database.Persist.MigrateMySQL
getMigrationStrategy :: DBType -> MigrationStrategy


-- | An ODBC backend for persistent.
module Database.Persist.MigratePostgres
getMigrationStrategy :: DBType -> MigrationStrategy


-- | An ODBC backend for persistent.
module Database.Persist.ODBC

-- | Create an ODBC connection pool and run the given action. The pool is
--   properly released after the action finishes using it. Note that you
--   should not use the given <a>ConnectionPool</a> outside the action
--   since it may be already been released.
withODBCPool :: (MonadBaseControl IO m, MonadLogger m, MonadIO m) => Maybe DBType -> ConnectionString -> Int -> (ConnectionPool -> m a) -> m a

-- | Same as <a>withODBCPool</a>, but instead of opening a pool of
--   connections, only one connection is opened.
withODBCConn :: (MonadLogger m, MonadIO m, MonadBaseControl IO m) => Maybe DBType -> ConnectionString -> (SqlBackend -> m a) -> m a

-- | Create an ODBC connection pool. Note that it's your responsibility to
--   properly close the connection pool when unneeded. Use
--   <a>withODBCPool</a> for an automatic resource control.
createODBCPool :: (MonadLogger m, MonadIO m, MonadBaseControl IO m) => Maybe DBType -> ConnectionString -> Int -> m ConnectionPool

-- | An <tt>HDBC-odbc</tt> connection string. A simple example of
--   connection string would be <tt>DSN=hdbctest1</tt>.
type ConnectionString = String

-- | Information required to connect to a PostgreSQL database using
--   <tt>persistent</tt>'s generic facilities. These values are the same
--   that are given to <a>withODBCPool</a>.
data OdbcConf
OdbcConf :: ConnectionString -> Int -> String -> OdbcConf

-- | The connection string.
odbcConnStr :: OdbcConf -> ConnectionString

-- | How many connections should be held on the connection pool.
odbcPoolSize :: OdbcConf -> Int
odbcDbtype :: OdbcConf -> String

-- | Generate a persistent <a>Connection</a> from an odbc <a>Connection</a>
openSimpleConn :: LogFunc -> Maybe DBType -> Connection -> IO SqlBackend

-- | List of DBMS that are supported
data DBType
MySQL :: DBType
Postgres :: DBType
MSSQL :: Bool -> DBType
mssql2012 :: DBType -> Bool
Oracle :: Bool -> DBType
oracle12c :: DBType -> Bool
DB2 :: DBType
Sqlite :: Bool -> DBType
sqlite3619 :: DBType -> Bool
mysql :: DBType
postgres :: DBType
mssqlMin2012 :: DBType
mssql :: DBType
oracleMin12c :: DBType
oracle :: DBType
db2 :: DBType
sqlite :: DBType
instance Show P
instance Convertible SqlValue P
instance Convertible P SqlValue
instance PersistConfig OdbcConf
