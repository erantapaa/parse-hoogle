-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Abstraction for markup languages
--   
@package markup
@version 1.1.0

module Data.Markup.Types
newtype InlineMarkupT m a
InlineMarkupT :: m a -> InlineMarkupT m a
runInlineMarkupT :: InlineMarkupT m a -> m a
newtype HostedMarkupT m a
HostedMarkupT :: m a -> HostedMarkupT m a
runHostedMarkupT :: HostedMarkupT m a -> m a
newtype LocalMarkupT m a
LocalMarkupT :: m a -> LocalMarkupT m a
runLocalMarkupT :: LocalMarkupT m a -> m a
newtype InlineMarkupM a
InlineMarkupM :: a -> InlineMarkupM a
runInlineMarkupM :: InlineMarkupM a -> a
newtype HostedMarkupM a
HostedMarkupM :: a -> HostedMarkupM a
runHostedMarkupM :: HostedMarkupM a -> a
newtype LocalMarkupM a
LocalMarkupM :: a -> LocalMarkupM a
runLocalMarkupM :: LocalMarkupM a -> a
instance Monoid a => Monoid (LocalMarkupM a)
instance Monoid a => Monoid (HostedMarkupM a)
instance Monoid a => Monoid (InlineMarkupM a)
instance Monad m => Monad (LocalMarkupT m)
instance Applicative f => Applicative (LocalMarkupT f)
instance Monoid (m a) => Monoid (LocalMarkupT m a)
instance Monad m => Monad (HostedMarkupT m)
instance Applicative f => Applicative (HostedMarkupT f)
instance Monoid (m a) => Monoid (HostedMarkupT m a)
instance Monad m => Monad (InlineMarkupT m)
instance Applicative f => Applicative (InlineMarkupT f)
instance Monoid (m a) => Monoid (InlineMarkupT m a)
instance Functor m => Functor (InlineMarkupT m)
instance Functor m => Functor (HostedMarkupT m)
instance Functor m => Functor (LocalMarkupT m)
instance Functor InlineMarkupM
instance Functor HostedMarkupM
instance Functor LocalMarkupM
instance Comonad LocalMarkupM
instance Monad LocalMarkupM
instance Applicative LocalMarkupM
instance Comonad HostedMarkupM
instance Monad HostedMarkupM
instance Applicative HostedMarkupM
instance Comonad InlineMarkupM
instance Monad InlineMarkupM
instance Applicative InlineMarkupM
instance MonadTrans LocalMarkupT
instance (Comonad m, Monad m) => Comonad (LocalMarkupT m)
instance MonadTrans HostedMarkupT
instance (Comonad m, Monad m) => Comonad (HostedMarkupT m)
instance MonadTrans InlineMarkupT
instance (Comonad m, Monad m) => Comonad (InlineMarkupT m)

module Data.Markup.Class

-- | Overload assets and their markup library, over some deployment
class Deploy symbol input markup (m :: * -> *)
deploy :: Deploy symbol input markup m => symbol -> input -> m markup

-- | Overload extraction of (co)monad
class Markup (m :: * -> *)
renderMarkup :: Markup m => m a -> a
toMarkup :: Markup m => a -> m a
instance (Monad m, Comonad m) => Markup m

module Data.Markup.Library
data Image
Image :: Image
data JavaScript
JavaScript :: JavaScript
data Css
Css :: Css
data WebComponent
WebComponent :: WebComponent
instance Show Image
instance Eq Image
instance Show JavaScript
instance Eq JavaScript
instance Show Css
instance Eq Css
instance Show WebComponent
instance Eq WebComponent
instance (Monad m', Url Text MarkupM) => Deploy WebComponent (QueryString Text) (MarkupM ()) (LocalMarkupT m')
instance (Monad m', Url Text MarkupM) => Deploy WebComponent Text (MarkupM ()) (LocalMarkupT m')
instance (ToValue input, Monad m') => Deploy WebComponent input (MarkupM ()) (HostedMarkupT m')
instance Url Text MarkupM => Deploy WebComponent (QueryString Text) (MarkupM ()) LocalMarkupM
instance Url Text MarkupM => Deploy WebComponent Text (MarkupM ()) LocalMarkupM
instance ToValue input => Deploy WebComponent input (MarkupM ()) HostedMarkupM
instance (Url Text MarkupM, Monad m) => Deploy Css (QueryString Text) (MarkupM ()) (LocalMarkupT m)
instance (Url Text MarkupM, Monad m) => Deploy Css Text (MarkupM ()) (LocalMarkupT m)
instance (ToValue input, Monad m) => Deploy Css input (MarkupM ()) (HostedMarkupT m)
instance (ToMarkup input, Monad m) => Deploy Css input (MarkupM ()) (InlineMarkupT m)
instance Url Text MarkupM => Deploy Css (QueryString Text) (MarkupM ()) LocalMarkupM
instance Url Text MarkupM => Deploy Css Text (MarkupM ()) LocalMarkupM
instance ToValue input => Deploy Css input (MarkupM ()) HostedMarkupM
instance ToMarkup input => Deploy Css input (MarkupM ()) InlineMarkupM
instance (Url Text MarkupM, Monad m) => Deploy JavaScript (QueryString Text) (MarkupM ()) (LocalMarkupT m)
instance (Url Text MarkupM, Monad m) => Deploy JavaScript Text (MarkupM ()) (LocalMarkupT m)
instance (ToValue input, Monad m) => Deploy JavaScript input (MarkupM ()) (HostedMarkupT m)
instance (ToMarkup input, Monad m) => Deploy JavaScript input (MarkupM ()) (InlineMarkupT m)
instance Url Text MarkupM => Deploy JavaScript (QueryString Text) (MarkupM ()) LocalMarkupM
instance Url Text MarkupM => Deploy JavaScript Text (MarkupM ()) LocalMarkupM
instance ToValue input => Deploy JavaScript input (MarkupM ()) HostedMarkupM
instance ToMarkup input => Deploy JavaScript input (MarkupM ()) InlineMarkupM
instance (Url Text MarkupM, Monad m) => Deploy Image (QueryString Text) (MarkupM ()) (LocalMarkupT m)
instance (Url Text MarkupM, Monad m) => Deploy Image Text (MarkupM ()) (LocalMarkupT m)
instance (ToValue input, Monad m) => Deploy Image input (MarkupM ()) (HostedMarkupT m)
instance Url Text MarkupM => Deploy Image (QueryString Text) (MarkupM ()) LocalMarkupM
instance Url Text MarkupM => Deploy Image Text (MarkupM ()) LocalMarkupM
instance ToValue input => Deploy Image input (MarkupM ()) HostedMarkupM
instance (Monad m, Monad m', Url Text m) => Deploy WebComponent (QueryString Text) (HtmlT m ()) (LocalMarkupT m')
instance (Monad m, Monad m', Url Text m) => Deploy WebComponent Text (HtmlT m ()) (LocalMarkupT m')
instance (Monad m, Monad m') => Deploy WebComponent Text (HtmlT m ()) (HostedMarkupT m')
instance (Monad m, Url Text m) => Deploy WebComponent (QueryString Text) (HtmlT m ()) LocalMarkupM
instance (Monad m, Url Text m) => Deploy WebComponent Text (HtmlT m ()) LocalMarkupM
instance Monad m => Deploy WebComponent Text (HtmlT m ()) HostedMarkupM
instance (Url Text m, Monad m') => Deploy Css (QueryString Text) (HtmlT m ()) (LocalMarkupT m')
instance (Url Text m, Monad m') => Deploy Css Text (HtmlT m ()) (LocalMarkupT m')
instance (Monad m, Monad m') => Deploy Css Text (HtmlT m ()) (HostedMarkupT m')
instance (Monad m, Monad m') => Deploy Css Text (HtmlT m ()) (InlineMarkupT m')
instance (Monad m, Monad m') => Deploy Css Text (HtmlT m ()) (InlineMarkupT m')
instance Url Text m => Deploy Css (QueryString Text) (HtmlT m ()) LocalMarkupM
instance Url Text m => Deploy Css Text (HtmlT m ()) LocalMarkupM
instance Monad m => Deploy Css Text (HtmlT m ()) HostedMarkupM
instance Monad m => Deploy Css Text (HtmlT m ()) InlineMarkupM
instance Monad m => Deploy Css Text (HtmlT m ()) InlineMarkupM
instance (Url Text m, Monad m') => Deploy JavaScript (QueryString Text) (HtmlT m ()) (LocalMarkupT m')
instance (Url Text m, Monad m') => Deploy JavaScript Text (HtmlT m ()) (LocalMarkupT m')
instance (Monad m, Monad m') => Deploy JavaScript Text (HtmlT m ()) (HostedMarkupT m')
instance (Monad m, Monad m') => Deploy JavaScript Text (HtmlT m ()) (InlineMarkupT m')
instance (Monad m, Monad m') => Deploy JavaScript Text (HtmlT m ()) (InlineMarkupT m')
instance Url Text m => Deploy JavaScript Text (HtmlT m ()) LocalMarkupM
instance Url Text m => Deploy JavaScript (QueryString Text) (HtmlT m ()) LocalMarkupM
instance Monad m => Deploy JavaScript Text (HtmlT m ()) HostedMarkupM
instance Monad m => Deploy JavaScript Text (HtmlT m ()) InlineMarkupM
instance Monad m => Deploy JavaScript Text (HtmlT m ()) InlineMarkupM
instance (Url Text m, Monad m') => Deploy Image (QueryString Text) (HtmlT m ()) (LocalMarkupT m')
instance (Monad m, Monad m', Url Text m) => Deploy Image Text (HtmlT m ()) (LocalMarkupT m')
instance (Monad m, Monad m') => Deploy Image Text (HtmlT m ()) (HostedMarkupT m')
instance Url Text m => Deploy Image (QueryString Text) (HtmlT m ()) LocalMarkupM
instance (Monad m, Url Text m) => Deploy Image Text (HtmlT m ()) LocalMarkupM
instance Monad m => Deploy Image Text (HtmlT m ()) HostedMarkupM

module Data.Markup
