-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple BF interpreter.
--   
@package brainfuck-tut
@version 0.7.0.0


module Language.Brainfuck.Types

-- | <a>Tape</a> is an alias for the interpreter storage type
type Tape = Array Int Word8

-- | <a>DataPointer</a> is an alias for the memory pointer
type DataPointer = Int

-- | <a>ProgramCounter</a> is a nominal type to track the current
--   instruction while distinguishing it from <a>DataPointer</a>
newtype ProgramCounter
PC :: Int -> ProgramCounter

-- | <a>Term</a> represents the abstract syntax for the BF language
data Term

-- | &gt;
IncDP :: Term

-- | &lt;
DecDP :: Term

-- | ?
OutDP :: Term

-- | +
IncByte :: Term

-- | -
DecByte :: Term

-- | .
OutByte :: Term

-- | ,
InByte :: Term

-- | [
JumpForward :: Term

-- | ]
JumpBackward :: Term

-- | <a>Direction</a> is used to track which direction we're jumping in
data Direction
Forward :: Direction
Backward :: Direction
instance Show Term
instance Eq Term
instance Eq Direction


module Language.Brainfuck.Parse

-- | A total function over the BF syntax.
parse :: String -> [Term]

-- | Given a list of terms, precomputes jump locations for matching '[' ']'
--   |Respects nesting of '[' and ']' terms.
matchJumps :: [Term] -> Either JumpPairs JumpMatchError
type JumpPairs = [(Int, Int)]
instance Show JumpMatchError


module Language.Brainfuck.Eval

-- | <a>eval</a> operates over the given tape, parses the string, and
--   returns the state of the tape.
--   
--   Potential unhandled errors:
--   
--   <ul>
--   <li>Out of bounds access to the tape</li>
--   <li>Infinite loops</li>
--   <li>Exceptions thrown by <a>print</a></li>
--   <li>Exceptions thrown by <a>putChar</a></li>
--   </ul>
--   
--   Handled errors:
--   
--   <ul>
--   <li>Matching jump not found for '[' and ']': terminate eval and return
--   tape</li>
--   </ul>
--   
--   As a result of evaluating the BF program, the following instructions
--   are effectful:
--   
--   <ul>
--   <li>',': pauses evaluation to receive user input</li>
--   <li><a>.</a>: prints the tape contents at DP as a Char</li>
--   </ul>
--   
--   Here's how <a>eval</a> might be called:
--   
--   <pre>
--   &gt;&gt;&gt; let tape = listArray (0,99) (replicate 100 0)
--   
--   &gt;&gt;&gt; eval tape "+.+."
--   \1\2
--   
--   &gt;&gt;&gt; eval tape ",."
--   aa
--   </pre>
eval :: Tape -> String -> IO Tape
