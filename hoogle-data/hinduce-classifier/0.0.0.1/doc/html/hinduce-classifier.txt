-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interface and utilities for classifiers
--   
--   Provides an interface for classifiers and functions to use and analyze
--   them. Take one or more hinduce-classifier-* packages for actual
--   classifier implementations.
@package hinduce-classifier
@version 0.0.0.1

module Data.HInduce.Classifier.Class
class Classifier classifier attributes label | classifier -> attributes label
classify :: Classifier classifier attributes label => classifier -> attributes -> label


-- | In machine learning and pattern recognition, classification refers to
--   an algorithmic procedure for assigning a given piece of input data
--   into one of a given number of categories. An example would be
--   assigning a given email into spam or non-spam classes or assigning
--   a diagnosis to a given patient as described by observed
--   characteristics of the patient (gender, blood pressure, presence or
--   absence of certain symptoms, etc.). An algorithm that implements
--   classification, especially in a concrete implementation, is known as a
--   classifier. The term classifier sometimes also refers to the
--   mathematical function, implemented by a classification algorithm, that
--   maps input data to a category.
--   (<a>https://en.wikipedia.org/wiki/Classification_in_machine_learning</a>,
--   Nov 28 2011)
module Data.HInduce.Classifier

-- | Calculate the confusion matrix of a classifier. Prefer
--   <tt>confusion'</tt> in ghci.
confusion :: (Classifier classifier attributes label, Ord label, Fractional f) => classifier -> [(attributes, label)] -> [((label, label), f)]

-- | Like <tt>confusion</tt>, but puts it in a nice table.
confusion' :: (Classifier classifier attributes label, Ord label, Show label) => classifier -> [(attributes, label)] -> Table label label Double

-- | Calculate the confusion matrix of a classifier, showing numbers of
--   occurance instead of relative frequencies. Prefer
--   <tt>absConfusion'</tt> in ghci.
absConfusion :: (Classifier classifier attributes label, Ord label) => classifier -> [(attributes, label)] -> [((label, label), Int)]

-- | Like <tt>absConfusion</tt>, but puts it in a nice table.
absConfusion' :: (Classifier classifier attributes label, Ord label, Show label) => classifier -> [(attributes, label)] -> Table label label Int
instance Eq label => Eq (Confusion label)
instance Ord label => Ord (Confusion label)
instance Read label => Read (Confusion label)
instance Show label => Show (Confusion label)
