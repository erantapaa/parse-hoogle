-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Read and write MIDI files.
--   
--   Minimalist library to read and write MIDI files, with dependencies
--   only on ByteString and Data.Binary.
--   
--   Changelog:
--   
--   v0.5.0 to v0.6.0:
--   
--   <ul>
--   <li>Extended the parser and changed the syntax tree to interpret MIDI
--   Running Status.</li>
--   <li>Added a module <tt>ZMidi.Core.Canonical</tt> to translate
--   MidiFiles to a canonical form where any shorthand NoteOff introduced
--   by Running Status is expanded to regular NoteOn and NoteOff events
--   (with Running Status set, MidiFiles can signal NoteOff events as
--   another NoteOn with 0 channel velocity).</li>
--   <li>Added a hack to the pretty printer to stop printing ASCII chars
--   greater than 164 causing an error when printing to stdout.</li>
--   </ul>
--   
--   v0.4.0 to v0.5.0:
--   
--   <ul>
--   <li>Changed order of <tt>MidiVoiceEvent</tt> constructors so the Ord
--   instance follows the order of the <i>tag</i> in the MIDI binary
--   representation.</li>
--   <li>Changed <tt>MidiSysCommonEvent</tt> to have different constructors
--   for unidentified F4 anf F5 events.</li>
--   <li>Changed <tt>MidiSysRealTimeEvent</tt> to have different
--   constructors for unidentified F9 and FD events.</li>
--   <li>Added more Haddock docs.</li>
--   <li>Various internal code changes.</li>
--   </ul>
--   
--   v0.3.0 to v0.4.0:
--   
--   <ul>
--   <li>Added new constructors to <tt>MidiMetaEvent</tt> for MidiPort and
--   MetaOther. MetaOther recognizes otherwise unrecognized events
--   improving the robustness of the parser. Similarly a new <i>other</i>
--   constructor has been added to <tt>MidiScaleType</tt> to avoid parse
--   errors.</li>
--   </ul>
--   
--   v0.2.1 to v0.3.0:
--   
--   <ul>
--   <li>Revised naming of the MIDI data types. All data types now have the
--   prefix Midi (previously only MidiFile followed this scheme). The
--   rationale for this is client software, that might want a higher-level
--   representation, is then free to use the more generic names Track,
--   Message, etc.</li>
--   <li><tt>DeltaTime</tt> made a newtype wrapper rather than a type
--   synonym.</li>
--   <li>Renamed the pretty print functions <tt>track</tt> to
--   <tt>printMidiTrack</tt> and <tt>header</tt> to
--   <tt>printMidiHeader</tt>.</li>
--   <li>Moved internal dataypes (SplitByte, Varlen) into a private
--   module.</li>
--   </ul>
--   
--   v0.2.0 to v0.2.1:
--   
--   <ul>
--   <li>Added Show class constraints to various type signatures to
--   accommodate changes to Num superclass hierarchy in GHC 7.4. Thanks to
--   Remy Moueza for the patches.</li>
--   </ul>
--   
--   v0.1.0 to v0.2.0:
--   
--   <ul>
--   <li>Added a top-level <i>shim</i> module to import all the exposed
--   modules. Added a version number module</li>
--   </ul>
@package zmidi-core
@version 0.6.0


-- | Version number
module ZMidi.Core.VersionNumber

-- | Version number
--   
--   <pre>
--   (0,6,0)
--   </pre>
zmidi_core_version :: (Int, Int, Int)


-- | Concrete syntax tree for MIDI files.
--   
--   Values are sometimes not interpreted. This means that the the data
--   types do not fully represent the sematics of MIDI events, but all the
--   data is either stored within the data type or synthesizeable. Hence,
--   <tt> readFile &gt;&gt;= writeFile </tt> will produce an identical
--   binary [1].
--   
--   [1] Or it should, failure indicates a bug...
module ZMidi.Core.Datatypes

-- | All time values in a MIDI track are represented as a delta from the
--   previous event rather than an absolute time.
--   
--   DeltaTime is a newtype wrapper over Word32, note that in MIDI files it
--   is represented as a <tt>varlen</tt> to save space rather than a four
--   byte number.
data DeltaTime

-- | TagByte is an alias to <a>Word8</a>.
type TagByte = Word8

-- | <a>MidiFile</a> : <tt> header * tracks </tt>
data MidiFile
MidiFile :: MidiHeader -> [MidiTrack] -> MidiFile
mf_header :: MidiFile -> MidiHeader
mf_tracks :: MidiFile -> [MidiTrack]

-- | <tt>Header</tt> : <tt> format * num_tracks * time_division </tt>
--   
--   <tt>TimeDivision</tt> is often 384 or 480 ticks per beat.
--   
--   The header is the start of a MIDI file, it is indicated by the 4
--   character marker <tt>MThd</tt>.
data MidiHeader
MidiHeader :: MidiFormat -> Word16 -> MidiTimeDivision -> MidiHeader
hdr_format :: MidiHeader -> MidiFormat
num_tracks :: MidiHeader -> Word16
time_division :: MidiHeader -> MidiTimeDivision

-- | <tt>Track</tt> : <tt> [message] </tt>
--   
--   In MIDI files, the start of a track is indicated by the 4 character
--   marker <tt>MTrk</tt>.
newtype MidiTrack
MidiTrack :: [MidiMessage] -> MidiTrack
getTrackMessages :: MidiTrack -> [MidiMessage]

-- | The file format - in a MIDI file this is a big-endian word16 with 0,1
--   or 2 being the only valid values.
data MidiFormat

-- | Format 0 file - single multi-channel track.
MF0 :: MidiFormat

-- | Format 1 file - 1 or more tracks, played simultaneously.
MF1 :: MidiFormat

-- | Format 2 file - 1 or more independent tracks.
MF2 :: MidiFormat

-- | Running Status.
--   
--   MIDI allows a compact representation of voice events where consecutive
--   events (same event, same channel) only need to include the first
--   event-channel byte - subsequent events only send payload until the
--   next event or channel change.
--   
--   Including <tt>MidiRunningStatus</tt> in the data representation is
--   important for ZMidi as an aim is to allow round-tripping of exisiting
--   MIDI files. However it makes MIDI generation more complicated (there
--   is more scope to generate bad output) - if you are only generating
--   MIDI it is wise to always set <tt>MidiRunningStatus</tt> to
--   <tt>RS_OFF</tt>.
data MidiRunningStatus
RS_ON :: MidiRunningStatus
RS_OFF :: MidiRunningStatus

-- | MIDI messages are pairs of <a>DeltaTime</a> and <tt>Event</tt> wrapped
--   in a newtype.
--   
--   Sequential messages with delta time 0 are played simultaneously.
type MidiMessage = (DeltaTime, MidiEvent)

-- | Recognised event types - some types (<a>MidiEventOther</a> and
--   <a>SysEx</a>) are not interpreted.
data MidiEvent

-- | An unrecognized event. This event is not expected in well formed MIDI,
--   but the parser may insert it - if it encounters ill-formed data.
MidiEventOther :: MidiDataOther -> MidiEvent

-- | Voice event (e.g <tt>note-on</tt>, <tt>note-off</tt>) are relayed to
--   specific channels.
--   
--   Note - they are tagged with Running Status, this is pertinent to
--   parsing MIDI where a input stream may use running status to save
--   space. If you are generating MIDI use RunningStatus with caution and
--   ensure that consecutive events are all of the same sort.
VoiceEvent :: MidiRunningStatus -> MidiVoiceEvent -> MidiEvent

-- | SysEx - system exclusive event. Usually synthesizer specific, not
--   interpreted.
SysExEvent :: MidiSysExEvent -> MidiEvent

-- | SysCommon - system common event.
SysCommonEvent :: MidiSysCommonEvent -> MidiEvent

-- | SysRealTime - system realtime event.
SysRealTimeEvent :: MidiSysRealTimeEvent -> MidiEvent

-- | Meta event - interpreted (e.g. <tt>end-of-track</tt>,
--   <tt>set-tempo</tt>).
MetaEvent :: MidiMetaEvent -> MidiEvent

-- | Data events are events with tags from 0x00 to 0x7F.
--   
--   Data events have no payload - they are represented only by the tag
--   byte.
newtype MidiDataOther
MidiDataOther :: TagByte -> MidiDataOther
getMidiDataOther :: MidiDataOther -> TagByte

-- | Voice events control the output of the synthesizer.
--   
--   Note - change in v0.5.0 - the constructors have been reordered so the
--   Ord instance matches the order of the <i>tag</i> bytes. Any code that
--   relied on sorting MIDI events is likely to need reworking.
--   
--   In serialized MIDI data the top 4 bits of the first byte of the Voice
--   Event are a tag, the bottom 4 bits are the channel number. ZMidi
--   stores the channel number with a Word8 though values should be limited
--   to the range 0-15.
data MidiVoiceEvent

-- | Note off.
--   
--   <pre>
--   80 to 8F (0 to F is channel number) * note * velocity
--   </pre>
--   
--   Turn off a sounding note.
NoteOff :: Word8 -> Word8 -> Word8 -> MidiVoiceEvent

-- | Note on.
--   
--   <pre>
--   90 to 9F (0 to F is channel number) * note * velocity
--   </pre>
--   
--   Start playing a note.
NoteOn :: Word8 -> Word8 -> Word8 -> MidiVoiceEvent

-- | Polyphonic key pressure.
--   
--   <pre>
--   A0 to AF (0 to F is channel number) * note * pressure_value
--   </pre>
--   
--   Change of pressure applied to the synthesizer key.
NoteAftertouch :: Word8 -> Word8 -> Word8 -> MidiVoiceEvent

-- | Set a controller.
--   
--   <pre>
--   B0 to BF (0 to F is channel number) * controller_number * value 
--   </pre>
--   
--   Controller change, e.g. by a footswitch.
Controller :: Word8 -> Word8 -> Word8 -> MidiVoiceEvent

-- | Set the program.
--   
--   <pre>
--   C0 to CF (0 to F is channel number) * program_number 
--   </pre>
--   
--   Change the instrument playing on the specified channel. For playback
--   on computers (rather than synthesizers) the program numbers will
--   correspond to the <i>General MIDI</i> instrument numbers.
ProgramChange :: Word8 -> Word8 -> MidiVoiceEvent

-- | Channel pressure.
--   
--   <pre>
--   D0 to DF (0 to F is channel number) * pressure_value
--   </pre>
ChanAftertouch :: Word8 -> Word8 -> MidiVoiceEvent

-- | Pitch bend
--   
--   <pre>
--   E0 to EF (0 to F is channel number) * value
--   </pre>
--   
--   Change the pitch of a sounding note. Often used to approximate
--   microtonal tunings.
--   
--   NOTE - currently value is uninterpreted.
PitchBend :: Word8 -> Word16 -> MidiVoiceEvent

-- | SysEx - system exclusive event.
data MidiSysExEvent

-- | SysEx event.
--   
--   <pre>
--   F0 * length * data
--   </pre>
--   
--   An uninterpreted sys-ex event.
SysEx :: Word32 -> [Word8] -> MidiSysExEvent

-- | System common event.
--   
--   Common information for all channels in a system.
--   
--   These events may not be pertinent to MIDI files generated on a
--   computer (as opposed to MIDI generated by a synthesizer or sequencer).
data MidiSysCommonEvent

-- | Time code quarter frame.
--   
--   <pre>
--   F1 * payload
--   </pre>
--   
--   Note the payload is really a byte split into two 4-bit values, however
--   here it is uninterpreted.
QuarterFrame :: Word8 -> MidiSysCommonEvent

-- | Song position pointer.
--   
--   <pre>
--   F2 * lsb * msb
--   </pre>
SongPosPointer :: Word8 -> Word8 -> MidiSysCommonEvent

-- | Song number.
--   
--   <pre>
--   F3 * song_number
--   </pre>
--   
--   Song number should be in the range 0..127.
SongSelect :: Word8 -> MidiSysCommonEvent

-- | Undefined system common event.
--   
--   <pre>
--   F4
--   </pre>
UndefinedF4 :: MidiSysCommonEvent

-- | Undefined system common event.
--   
--   <pre>
--   F5
--   </pre>
UndefinedF5 :: MidiSysCommonEvent

-- | Tune request.
--   
--   <pre>
--   F6
--   </pre>
--   
--   Tune request message for analogue synthesizers.
TuneRequest :: MidiSysCommonEvent

-- | End-of-system-exclusive message.
--   
--   <pre>
--   F7
--   </pre>
EOX :: MidiSysCommonEvent

-- | System real-time event.
--   
--   These events may not be pertinent to MIDI files generated on a
--   computer (as opposed to MIDI generated by a synthesizer or sequencer).
data MidiSysRealTimeEvent

-- | Timing signal.
--   
--   <pre>
--   F8 
--   </pre>
TimingClock :: MidiSysRealTimeEvent

-- | Undefined real time event.
--   
--   <pre>
--   F9
--   </pre>
UndefinedF9 :: MidiSysRealTimeEvent

-- | Start playing a sequence.
--   
--   <pre>
--   FA
--   </pre>
StartSequence :: MidiSysRealTimeEvent

-- | Continue playing a stopped sequence.
--   
--   <pre>
--   FB
--   </pre>
ContinueSequence :: MidiSysRealTimeEvent

-- | Stop playing a sequence.
--   
--   <pre>
--   FC
--   </pre>
StopSequence :: MidiSysRealTimeEvent

-- | Undefined real time event.
--   
--   <pre>
--   FD
--   </pre>
UndefinedFD :: MidiSysRealTimeEvent

-- | Active sensing
--   
--   <pre>
--   FE
--   </pre>
--   
--   Synchronization pulse...
ActiveSensing :: MidiSysRealTimeEvent

-- | Reset to power-up status.
--   
--   <pre>
--   FF
--   </pre>
SystemReset :: MidiSysRealTimeEvent

-- | Meta event
--   
--   In Format 1 files general events (e.g. text events) should only appear
--   in track 1. Certain events (e.g. end-of-track) can appear in any track
--   where necessary.
data MidiMetaEvent

-- | Text / copywright etc.
--   
--   <pre>
--   FF * text_type * contents
--   </pre>
--   
--   Free text field (e.g. copyright statement). The contents can
--   notionally be any length.
TextEvent :: MidiTextType -> String -> MidiMetaEvent

-- | Sequence Number
--   
--   <pre>
--   FF 00 02 * value
--   </pre>
--   
--   Format 1 files - only track 1 should have a sequence number.
--   
--   Format 2 files - a sequence number should identify each track.
--   
--   The sequence number event should occur at the start of a track, before
--   any non-zero time events.
SequenceNumber :: Word16 -> MidiMetaEvent

-- | Channel prefix
--   
--   <pre>
--   FF 20 01 * channel
--   </pre>
--   
--   Relay all meta and sys-ex events to the given channel.
--   
--   The first byte should always be 1.
ChannelPrefix :: Word8 -> Word8 -> MidiMetaEvent

-- | Midi port
--   
--   <pre>
--   FF 21 01 * port
--   </pre>
--   
--   Midi port number - used to workaround 16 channel limit...
MidiPort :: Word8 -> MidiMetaEvent

-- | End-of-track event.
--   
--   <pre>
--   FF 2F 00
--   </pre>
EndOfTrack :: MidiMetaEvent

-- | Set tempo
--   
--   <pre>
--   FF 51 03 * microseconds_per_quarter_note
--   </pre>
SetTempo :: Word32 -> MidiMetaEvent

-- | SMPTE offest
--   
--   <pre>
--   FF 54 05 * hour * minute * second * frac * subfrac
--   </pre>
--   
--   The SMPTE time when a track should start. This event should occur at
--   the start of a track, before any non-zero time events.
SMPTEOffset :: Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> MidiMetaEvent

-- | Time signature
--   
--   <pre>
--   FF 58 04 * numerator * denominator * metro * num_32nd_notes
--   </pre>
TimeSignature :: Word8 -> Word8 -> Word8 -> Word8 -> MidiMetaEvent

-- | Key signature
--   
--   <pre>
--   FF 59 02 * key_type * scale_type
--   </pre>
--   
--   <tt>key_type</tt> is the number of sharps (postive numbers) or flats
--   (negative numbers), e.g. (-1) is 1 flat.
--   
--   <tt>scale_type</tt> indicates major or minor.
KeySignature :: Int8 -> MidiScaleType -> MidiMetaEvent

-- | SSME
--   
--   <pre>
--   FF 7F * length * data
--   </pre>
--   
--   Sequencer specific meta-event - uninterpreted.
SSME :: Word32 -> [Word8] -> MidiMetaEvent

-- | Unrecognized Meta Event
--   
--   <pre>
--   FF * type * length * data 
--   </pre>
MetaOther :: Word8 -> Word32 -> [Word8] -> MidiMetaEvent

-- | Default unit of time in the MIDI file.
data MidiTimeDivision

-- | Frames-per-second.
FPS :: Word16 -> MidiTimeDivision

-- | Ticks-per-beat, i.e. the number of units for a quarter note.
TPB :: Word16 -> MidiTimeDivision

-- | Enumeration of the text meta event types.
data MidiTextType
GENERIC_TEXT :: MidiTextType
COPYRIGHT_NOTICE :: MidiTextType
SEQUENCE_NAME :: MidiTextType
INSTRUMENT_NAME :: MidiTextType
LYRICS :: MidiTextType
MARKER :: MidiTextType
CUE_POINT :: MidiTextType

-- | Scale type - <tt>major</tt> or <tt>minor</tt> or <tt>SCALE_OTHER</tt>.
--   
--   <tt>SCALE_OTHER</tt> represents a parse error.
data MidiScaleType
MAJOR :: MidiScaleType
MINOR :: MidiScaleType
SCALE_OTHER :: Word8 -> MidiScaleType
instance Enum DeltaTime
instance Eq DeltaTime
instance Ord DeltaTime
instance Num DeltaTime
instance Integral DeltaTime
instance Real DeltaTime
instance Eq MidiFormat
instance Enum MidiFormat
instance Show MidiFormat
instance Eq MidiTimeDivision
instance Show MidiTimeDivision
instance Eq MidiHeader
instance Show MidiHeader
instance Eq MidiTextType
instance Enum MidiTextType
instance Ord MidiTextType
instance Show MidiTextType
instance Enum MidiRunningStatus
instance Eq MidiRunningStatus
instance Ord MidiRunningStatus
instance Show MidiRunningStatus
instance Eq MidiDataOther
instance Ord MidiDataOther
instance Show MidiDataOther
instance Eq MidiVoiceEvent
instance Show MidiVoiceEvent
instance Ord MidiVoiceEvent
instance Eq MidiSysExEvent
instance Show MidiSysExEvent
instance Ord MidiSysExEvent
instance Eq MidiSysCommonEvent
instance Show MidiSysCommonEvent
instance Ord MidiSysCommonEvent
instance Eq MidiSysRealTimeEvent
instance Show MidiSysRealTimeEvent
instance Ord MidiSysRealTimeEvent
instance Eq MidiScaleType
instance Ord MidiScaleType
instance Show MidiScaleType
instance Eq MidiMetaEvent
instance Show MidiMetaEvent
instance Ord MidiMetaEvent
instance Eq MidiEvent
instance Show MidiEvent
instance Ord MidiEvent
instance Eq MidiTrack
instance Show MidiTrack
instance Eq MidiFile
instance Show MidiFile
instance Show DeltaTime


-- | Pretty print the MIDI representation.
--   
--   The output format is lossy - the content of Meta and SysEx events may
--   be abbreviated. This makes the format unsuitable as a text
--   representation of MIDI, however it can enable quick <i>disassembly</i>
--   of MIDI files in order to see the note events.
module ZMidi.Core.Pretty

-- | Print the MIDI file to std-out.
--   
--   One event is printed per line, so the output may be huge.
printMidi :: MidiFile -> IO ()

-- | Print the MIDI header.
--   
--   Results are returned as a list of String to avoid extraneous
--   concatenation.
printMidiHeader :: MidiHeader -> [String]

-- | Print a track.
--   
--   Results are returned as a list of String to avoid extraneous
--   concatenation.
printMidiTrack :: MidiTrack -> [String]


-- | A top down (Parsec style) MIDI file parser.
--   
--   For valid input, the parser should parse without error (i.e all cases
--   of event types are fully enumerated). Malformed input (syntactically
--   bad events, or truncated data) will cause fatal parse errors.
--   
--   Note - the parser returns a <i>literal</i> result if the input uses
--   Running Status, i.e, - the answer matches the input - where running
--   status uses a NoteOn event with velocity 0 to stand for a NoteOff, the
--   parser likewise returns a Note-On. Use the
--   <tt>ZMidi.Core.Canonical</tt> to translate the input to canonical form
--   where note-offs are encoded directly with NoteOff.
module ZMidi.Core.ReadFile

-- | Read a well formed MIDI file.
readMidi :: FilePath -> IO (Either ParseErr MidiFile)

-- | ParseErr is the position of the error and a message.
data ParseErr
ParseErr :: !Pos -> !ErrMsg -> ParseErr

-- | Position of the parser in the input stream.
--   
--   This is exposed by the ReadFile API and may be useful for
--   <i>disassembling</i> a MIDI file that causes a parse failure.
type Pos = Int

-- | Error message - alias for String.
type ErrMsg = String


-- | Write a MIDI file.
module ZMidi.Core.WriteFile

-- | Write a MIDI file.
writeMidi :: FilePath -> MidiFile -> IO ()


-- | Convert a MidiFile into "canonical" form - i.e. expand any use of
--   Running Status and translate Running Status high, NoteOn channel
--   velocity 0 events to NoteOff events.
module ZMidi.Core.Canonical

-- | Convert an MidiFile into "canonical" form where any abbreviation
--   introduced by Running Status is expanded.
--   
--   Note - even with Running Status on the syntax tree is almost canonical
--   (some expansion takes place in the Parser), so this translation is
--   quite simplistic.
canonical :: MidiFile -> MidiFile


-- | Common interface to <tt>ZMidi.Core</tt>.
--   
--   This is a <i>shim</i> module re-exporting types and functions from the
--   exposed ZMidi-Core modules. Just import this module to use ZMidi-Core.
module ZMidi.Core
