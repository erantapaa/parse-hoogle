-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Geodetic calculations
--   
@package geodetic
@version 0.1.4


-- | A sphere with a radius in metres.
module Data.Geo.Geodetic.Sphere
data Sphere
class AsSphere p f s
_Sphere :: AsSphere p f s => Optic' p f s Sphere
earthMean :: Sphere
instance Eq Sphere
instance Ord Sphere
instance (Functor f, Profunctor p) => AsSphere p f Double
instance AsSphere p f Sphere
instance Show Sphere


-- | Haversine geodetic distance algorithm.
module Data.Geo.Geodetic.Haversine

-- | Haversine algorithm.
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (haversine earthMean fr to)) :: Maybe String
--   Just "15000950.5589"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- (-16.7889) &lt;°&gt; 41.935; to &lt;- 6.933 &lt;°&gt; (-162.55); return (haversine earthMean fr to)) :: Maybe String
--   Just "17128743.0669"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (haversine ((6350000 :: Double) ^. _Sphere) fr to)) :: Maybe String
--   Just "14959840.4461"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- (-16.7889) &lt;°&gt; 41.935; to &lt;- 6.933 &lt;°&gt; (-162.55); return (haversine ((6350000 :: Double) ^. _Sphere) fr to)) :: Maybe String
--   Just "17081801.7377"
--   </pre>
haversine :: (AsCoordinate (->) (Const Coordinate) start, AsCoordinate (->) (Const Coordinate) end) => Sphere -> start -> end -> Double

-- | Haversine algorithm with a default sphere of the earth mean.
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (haversineD fr to)) :: Maybe String
--   Just "15000950.5589"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- (-16.7889) &lt;°&gt; 41.935; to &lt;- 6.933 &lt;°&gt; (-162.55); return (haversineD fr to)) :: Maybe String
--   Just "17128743.0669"
--   </pre>
haversineD :: (AsCoordinate (->) (Const Coordinate) start, AsCoordinate (->) (Const Coordinate) end) => start -> end -> Double

-- | Haversine algorithm with an optionally applied default sphere of the
--   earth mean.
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (haversine' fr to :: Double)) :: Maybe String
--   Just "15000950.5589"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- (-16.7889) &lt;°&gt; 41.935; to &lt;- 6.933 &lt;°&gt; (-162.55); return (haversine' fr to :: Double)) :: Maybe String
--   Just "17128743.0669"
--   </pre>
haversine' :: Optional1 Sphere (Coordinate -> Coordinate -> Double) x => x


-- | Great circle geodetic distance algorithm.
module Data.Geo.Geodetic.GreatCircle

-- | Great circle spherical law algorithm.
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (sphericalLaw earthMean fr to)) :: Maybe String
--   Just "15000950.5589"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- (-16.7889) &lt;°&gt; 41.935; to &lt;- 6.933 &lt;°&gt; (-162.55); return (sphericalLaw earthMean fr to)) :: Maybe String
--   Just "17128743.0669"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (sphericalLaw ((6350000 :: Double) ^. _Sphere) fr to)) :: Maybe String
--   Just "14959840.4461"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- (-16.7889) &lt;°&gt; 41.935; to &lt;- 6.933 &lt;°&gt; (-162.55); return (sphericalLaw ((6350000 :: Double) ^. _Sphere) fr to)) :: Maybe String
--   Just "17081801.7377"
--   </pre>
sphericalLaw :: (AsCoordinate (->) (Const Coordinate) start, AsCoordinate (->) (Const Coordinate) end) => Sphere -> start -> end -> Double

-- | Great circle spherical law algorithm with a default sphere of the
--   earth mean.
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (sphericalLawD fr to)) :: Maybe String
--   Just "15000950.5589"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- (-16.7889) &lt;°&gt; 41.935; to &lt;- 6.933 &lt;°&gt; (-162.55); return (sphericalLawD fr to)) :: Maybe String
--   Just "17128743.0669"
--   </pre>
sphericalLawD :: (AsCoordinate (->) (Const Coordinate) start, AsCoordinate (->) (Const Coordinate) end) => start -> end -> Double

-- | Great circle spherical law algorithm with an optionally applied
--   default sphere of the earth mean.
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (sphericalLaw' fr to :: Double)) :: Maybe String
--   Just "15000950.5589"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (printf "%0.4f") (do fr &lt;- (-16.7889) &lt;°&gt; 41.935; to &lt;- 6.933 &lt;°&gt; (-162.55); return (sphericalLaw' fr to :: Double)) :: Maybe String
--   Just "17128743.0669"
--   </pre>
sphericalLaw' :: Optional1 Sphere (Coordinate -> Coordinate -> Double) x => x

module Data.Geo.Geodetic.Ellipsoid
data Ellipsoid
class AsEllipsoid p f s
_Ellipsoid :: AsEllipsoid p f s => Optic' p f s Ellipsoid
class AsSemiMajor p f s
_SemiMajor :: AsSemiMajor p f s => Optic' p f s Double
class AsSemiMinor p f s
_SemiMinor :: AsSemiMinor p f s => Optic' p f s Double
class AsFlattening p f s
_Flattening :: AsFlattening p f s => Optic' p f s Double
class AsInverseFlattening p f s
_InverseFlattening :: AsInverseFlattening p f s => Optic' p f s Double
semiMajorFlattening :: Double -> Double -> Ellipsoid
semiMinorFlattening :: Double -> Double -> Ellipsoid
semiMajorInverseFlattening :: Double -> Double -> Ellipsoid
semiMinorInverseFlattening :: Double -> Double -> Ellipsoid
wgs84 :: Ellipsoid
grs80 :: Ellipsoid
grs67 :: Ellipsoid
ans :: Ellipsoid
wgs72 :: Ellipsoid
au1965 :: Ellipsoid
krasovsky1940 :: Ellipsoid
international1924 :: Ellipsoid
hayford1909 :: Ellipsoid
airy1830 :: Ellipsoid
everest1830 :: Ellipsoid
bessel1841 :: Ellipsoid
clarke1858 :: Ellipsoid
clarke1866 :: Ellipsoid
clarke1880 :: Ellipsoid
instance Eq Ellipsoid
instance Ord Ellipsoid
instance Show Ellipsoid
instance (p ~ (->), Functor f) => AsInverseFlattening p f Ellipsoid
instance AsInverseFlattening p f Double
instance (p ~ (->), Functor f) => AsFlattening p f Ellipsoid
instance AsFlattening p f Double
instance (p ~ (->), Functor f) => AsSemiMinor p f Ellipsoid
instance AsSemiMinor p f Double
instance (p ~ (->), Functor f) => AsSemiMajor p f Ellipsoid
instance AsSemiMajor p f Double
instance AsEllipsoid p f Ellipsoid


-- | A bearing in degrees between 0 and 360.
module Data.Geo.Geodetic.Bearing
data Bearing
class AsBearing p f s
_Bearing :: AsBearing p f s => Optic' p f s Bearing

-- | Construct a bearing such that if the given value is out of bounds, a
--   modulus is taken to keep it within 0 inclusive and 360 exclusive.
--   
--   <pre>
--   &gt;&gt;&gt; modBearing 7
--   Bearing 7.0000
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; modBearing 0
--   Bearing 0.0000
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; modBearing (-0.0001)
--   Bearing 359.9999
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; modBearing 360
--   Bearing 0.0000
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; modBearing 359.99999
--   Bearing 360.0000
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; modBearing 359.999
--   Bearing 359.9990
--   </pre>
modBearing :: Double -> Bearing
instance Eq Bearing
instance Ord Bearing
instance (Choice p, Applicative f) => AsBearing p f Double
instance AsBearing p f Bearing
instance Show Bearing


-- | An azimuth in degrees between 0 and 360.
module Data.Geo.Geodetic.Azimuth
data Azimuth
class AsAzimuth p f s
_Azimuth :: AsAzimuth p f s => Optic' p f s Azimuth

-- | Construct an azimuth such that if the given value is out of bounds, a
--   modulus is taken to keep it within 0 inclusive and 360 exclusive.
--   
--   <pre>
--   &gt;&gt;&gt; modAzimuth 7
--   Azimuth 7.0000
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; modAzimuth 0
--   Azimuth 0.0000
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; modAzimuth 360
--   Azimuth 0.0000
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; modAzimuth 361
--   Azimuth 1.0000
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; modAzimuth 359.999
--   Azimuth 359.9990
--   </pre>
modAzimuth :: Double -> Azimuth
instance Eq Azimuth
instance Ord Azimuth
instance (Choice p, Applicative f) => AsAzimuth p f Double
instance AsAzimuth p f Azimuth
instance Show Azimuth


-- | A geodetic curve is made of a distance in metres, an azimuth and a
--   reverse azimuth.
module Data.Geo.Geodetic.Curve
data Curve
class AsCurve p f s
_Curve :: AsCurve p f s => Optic' p f s Curve

-- | Construct a geodetic curve with the given parameters.
curve :: Double -> Azimuth -> Azimuth -> Curve
curveDistance :: Lens' Curve Double
curveAzimuth :: Lens' Curve Azimuth
curveReverseAzimuth :: Lens' Curve Azimuth
instance Eq Curve
instance Ord Curve
instance (Profunctor p, Functor f) => AsCurve p f (Double, Azimuth, Azimuth)
instance AsCurve p f Curve
instance Show Curve


-- | An implementation of Thaddeus Vincenty's direct and inverse geodetic
--   algorithms. <a>http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf</a>
module Data.Geo.Geodetic.Vincenty
type Convergence = Double

-- | A typically acceptable convergence value.
convergence :: Convergence
data VincentyDirectResult
VincentyDirectResult :: Coordinate -> Bearing -> VincentyDirectResult
class AsVincentyDirectResult p f s
_VincentyDirectResult :: AsVincentyDirectResult p f s => Optic' p f s VincentyDirectResult

-- | Vincenty direct algorithm.
--   
--   <pre>
--   &gt;&gt;&gt; fmap (\c' -&gt; direct wgs84 convergence c' (modBearing 165.34) 4235) (27.812 &lt;°&gt; 154.295)
--   Just (VincentyDirectResult (Coordinate (Latitude (DegreesLatitude 27) (Minutes 46) (Seconds 30.0981)) (Longitude (DegreesLongitude 154) (Minutes 18) (Seconds 21.1466))) (Bearing 165.3451))
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (\c' -&gt; direct wgs84 convergence c' (modBearing 165.34) 4235) ((-66.093) &lt;°&gt; 12.84)
--   Just (VincentyDirectResult (Coordinate (Latitude (DegreesLatitude (-66)) (Minutes 7) (Seconds 47.0667)) (Longitude (DegreesLongitude 12) (Minutes 51) (Seconds 49.4142))) (Bearing 165.3183))
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (\c' -&gt; direct ans convergence c' (modBearing 165.34) 4235) (27.812 &lt;°&gt; 154.295)
--   Just (VincentyDirectResult (Coordinate (Latitude (DegreesLatitude 27) (Minutes 46) (Seconds 30.0986)) (Longitude (DegreesLongitude 154) (Minutes 18) (Seconds 21.1464))) (Bearing 165.3451))
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (\c' -&gt; direct ans convergence c' (modBearing 165.34) 4235) ((-66.093) &lt;°&gt; 12.84)
--   Just (VincentyDirectResult (Coordinate (Latitude (DegreesLatitude (-66)) (Minutes 7) (Seconds 47.0662)) (Longitude (DegreesLongitude 12) (Minutes 51) (Seconds 49.4139))) (Bearing 165.3183))
--   </pre>
direct :: (AsCoordinate (->) (Const Coordinate) c, AsBearing (->) (Const Bearing) b, AsEllipsoid (->) (Const Ellipsoid) e) => e -> Convergence -> c -> b -> Double -> VincentyDirectResult

-- | Vincenty direct algorithm with a default ellipsoid of WGS84 and
--   standard convergence.
--   
--   <pre>
--   &gt;&gt;&gt; fmap (\c' -&gt; directD c' (modBearing 165.34) 4235) (27.812 &lt;°&gt; 154.295)
--   Just (VincentyDirectResult (Coordinate (Latitude (DegreesLatitude 27) (Minutes 46) (Seconds 30.0981)) (Longitude (DegreesLongitude 154) (Minutes 18) (Seconds 21.1466))) (Bearing 165.3451))
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (\c' -&gt; directD c' (modBearing 165.34) 4235) ((-66.093) &lt;°&gt; 12.84)
--   Just (VincentyDirectResult (Coordinate (Latitude (DegreesLatitude (-66)) (Minutes 7) (Seconds 47.0667)) (Longitude (DegreesLongitude 12) (Minutes 51) (Seconds 49.4142))) (Bearing 165.3183))
--   </pre>
directD :: (AsCoordinate (->) (Const Coordinate) c, AsBearing (->) (Const Bearing) b) => c -> b -> Double -> VincentyDirectResult

-- | Vincenty direct algorithm with an optionally applied default ellipsoid
--   of WGS84 and standard convergence.
--   
--   <pre>
--   &gt;&gt;&gt; fmap (\c' -&gt; direct' c' (modBearing 165.34) (4235 :: Double) :: VincentyDirectResult) (27.812 &lt;°&gt; 154.295)
--   Just (VincentyDirectResult (Coordinate (Latitude (DegreesLatitude 27) (Minutes 46) (Seconds 30.0981)) (Longitude (DegreesLongitude 154) (Minutes 18) (Seconds 21.1466))) (Bearing 165.3451))
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fmap (\c' -&gt; direct' c' (modBearing 165.34) (4235 :: Double) :: VincentyDirectResult) ((-66.093) &lt;°&gt; 12.84)
--   Just (VincentyDirectResult (Coordinate (Latitude (DegreesLatitude (-66)) (Minutes 7) (Seconds 47.0667)) (Longitude (DegreesLongitude 12) (Minutes 51) (Seconds 49.4142))) (Bearing 165.3183))
--   </pre>
direct' :: Optional2 Ellipsoid Convergence (Coordinate -> Bearing -> Double -> VincentyDirectResult) x => x

-- | Vincenty inverse algorithm.
--   
--   <pre>
--   &gt;&gt;&gt; do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (inverse wgs84 convergence fr to)
--   Just (GeodeticCurve 14998576.9860 Azimuth 180.0000 Azimuth 0.0000)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- 87.7769 &lt;°&gt; 19.944; return (inverse wgs84 convergence fr to)
--   Just (GeodeticCurve 7099204.2589 Azimuth 0.0000 Azimuth 180.0000)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (inverse ans convergence fr to)
--   Just (GeodeticCurve 14998630.4056 Azimuth 180.0000 Azimuth 0.0000)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- 87.7769 &lt;°&gt; 19.944; return (inverse ans convergence fr to)
--   Just (GeodeticCurve 7099229.9126 Azimuth 0.0000 Azimuth 180.0000)
--   </pre>
inverse :: (AsCoordinate (->) (Const Coordinate) start, AsCoordinate (->) (Const Coordinate) end, AsEllipsoid (->) (Const Ellipsoid) e) => e -> Convergence -> start -> end -> Curve

-- | Vincenty inverse algorithm with a default ellipsoid of WGS84 and
--   standard convergence.
--   
--   <pre>
--   &gt;&gt;&gt; do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (inverseD fr to)
--   Just (GeodeticCurve 14998576.9860 Azimuth 180.0000 Azimuth 0.0000)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- 87.7769 &lt;°&gt; 19.944; return (inverseD fr to)
--   Just (GeodeticCurve 7099204.2589 Azimuth 0.0000 Azimuth 180.0000)
--   </pre>
inverseD :: (AsCoordinate (->) (Const Coordinate) start, AsCoordinate (->) (Const Coordinate) end) => start -> end -> Curve

-- | Vincenty inverse algorithm with an optionally applied default
--   ellipsoid of WGS84 and standard convergence.
--   
--   <pre>
--   &gt;&gt;&gt; do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- (-66.093) &lt;°&gt; 12.84; return (inverse' fr to :: Curve)
--   Just (GeodeticCurve 14998576.9860 Azimuth 180.0000 Azimuth 0.0000)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; do fr &lt;- 27.812 &lt;°&gt; 154.295; to &lt;- 87.7769 &lt;°&gt; 19.944; return (inverse' fr to :: Curve)
--   Just (GeodeticCurve 7099204.2589 Azimuth 0.0000 Azimuth 180.0000)
--   </pre>
inverse' :: Optional2 Ellipsoid Convergence (Coordinate -> Coordinate -> Curve) x => x
data P
P :: Double -> Double -> Double -> P
origSigma' :: P -> Double
sigma' :: P -> Double
prevSigma' :: P -> Double
vmap2 :: (a -> b) -> (a, a) -> (b, b)
ps :: Double -> P
transition :: P -> Double -> P
sinSigma' :: P -> Double
cosSigma' :: P -> Double
sigmaM2' :: Double -> P -> Double
cosSigmaM2' :: Double -> P -> Double
cos2SigmaM2' :: Double -> P -> Double
square :: Num a => a -> a
doWhile :: (a -> a) -> (a -> Bool) -> a -> a
whileDo :: (a -> a) -> (a -> Bool) -> a -> a
data InverseResult
Continue :: InverseResult
Limit :: InverseResult
Converge :: InverseResult
data Q
Q :: Int -> InverseResult -> Double -> Double -> Double -> Double -> Q
count :: Q -> Int
result :: Q -> InverseResult
lambda :: Q -> Double
a' :: Q -> Double
sigma :: Q -> Double
deltasigma :: Q -> Double
instance Eq VincentyDirectResult
instance Ord VincentyDirectResult
instance Show VincentyDirectResult
instance Show P
instance Eq InverseResult
instance (p ~ (->), Functor f) => AsBearing p f VincentyDirectResult
instance (p ~ (->), Functor f) => AsCoordinate p f VincentyDirectResult
instance (Profunctor p, Functor f) => AsVincentyDirectResult p f (Coordinate, Bearing)
instance AsVincentyDirectResult p f VincentyDirectResult

module Data.Geo.Geodetic
