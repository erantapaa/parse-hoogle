-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Applicative permutation parser for Parsec intended as
a replacement for Text.Parsec.Perm.
--   
--   Applicative permutation parser for Parsec intended as a replacement
--   for Text.Parsec.Perm.
@package parsec-permutation
@version 0.1.2.0


-- | Text.Parsec.Permutation is a permutation parser for parsec intended as
--   a generalized replacement for Text.Parsec.Perm in parsec.
--   
--   Example usage:
--   
--   <pre>
--   import Text.Parsec.Permutation
--   
--   fooParser :: ParsecT s u m a -&gt; ParsecT s u m [a]
--   fooParser = runPermParser $
--                   (,,) &lt;$&gt; oncePerm (char 'A')
--                        &lt;*&gt; manyPerm (char 'B')
--                        &lt;*&gt; optionMaybePerm (char 'C' &gt;&gt; char 'D')
--   </pre>
--   
--   This parser will return (<tt>A</tt>, "BBB", Just <tt>D</tt>) when
--   parsing for example the strings "BCDABB", "CDBBAB", &amp;etc.
module Text.Parsec.Permutation
data PermParser s u m a

-- | Turns a permutation parser into a regular parsec parser.
runPermParser :: Stream s m t => PermParser s u m a -> ParsecT s u m a

-- | Similar to runPermParser, but attempts parsing permutations only until
--   the given <tt>untilParser</tt> succeeds (similar to <tt>manyTill</tt>
--   in Text.Parsec).
--   
--   The text parsed by the untilParser is not consumed, however, so that
--   its contents can be parsed later if necessary.
runPermParserTill :: Stream s m t => ParsecT s u m end -> PermParser s u m a -> ParsecT s u m a

-- | Attempt parsing a value once. Fails if parsing the value succeeds
--   multiple times.
oncePerm :: Stream s m t => ParsecT s u m a -> PermParser s u m a

-- | Parses a given value as many times as possible in the permutation. As
--   with Parsec.Prim.many in parsec, you need to make sure that the
--   provided parser consumes input when succeeding to prevent infinite
--   recursion.
manyPerm :: ParsecT s u m a -> PermParser s u m [a]

-- | Same as <a>manyPerm</a>, but fails when the parsing doesn't succeed at
--   least once.
many1Perm :: ParsecT s u m a -> PermParser s u m [a]

-- | Attempt parsing a value at most once. Fails when parsing the value
--   succeeds multiple times. The first argument is the default value to be
--   used when parsing never succeeds.
optionPerm :: Stream s m t => a -> ParsecT s u m a -> PermParser s u m a

-- | Similar to <a>optionPerm</a>, but uses Nothing as the default value.
optionMaybePerm :: Stream s m t => ParsecT s u m a -> PermParser s u m (Maybe a)
instance Stream s m t => Applicative (PermParser s u m)
instance Functor (PermParser s u m)
