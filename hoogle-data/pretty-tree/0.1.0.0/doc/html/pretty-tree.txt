-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pretty-print trees
--   
--   Alternative pretty-printing functions for Data.Tree.
@package pretty-tree
@version 0.1.0.0


-- | <a>Data.Tree</a> exports <a>drawTree</a> and <a>drawForest</a>, which
--   provide 2D pretty-printing of rose-trees, but in a left-to-right
--   fashion.
--   
--   The functions here draw trees more "naturally" in a top-down fashion.
--   
--   For example, consider the following tree:
--   
--   <pre>
--   tree :: Tree String
--   tree = Node "hello" [ Node "foo" []
--                       , Node "bars" [ Node "oi!" []
--                                     , Node "baz" [ Node "a" [ Node "b" []
--                                                             , Node "c" []]
--                                                  , Node "d" [ Node "e" []]]]
--                       , Node "foobar" []]
--   </pre>
--   
--   Comparing <a>drawTree</a> and <a>drawVerticalTree</a>:
--   
--   <pre>
--   &gt;&gt;&gt; putStrLn $ drawTree tree
--   hello
--   |
--   +- foo
--   |
--   +- bars
--   |  |
--   |  +- oi!
--   |  |
--   |  `- baz
--   |     |
--   |     +- a
--   |     |  |
--   |     |  +- b
--   |     |  |
--   |     |  `- c
--   |     |
--   |     `- d
--   |        |
--   |        `- e
--   |
--   `- foobar
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; putStrLn $ drawVerticalTree
--             hello
--               |
--     -------------------
--    /        |          \
--   foo      bars      foobar
--             |
--          ------
--         /      \
--        oi!    baz
--                |
--               ----
--              /    \
--              a    d
--              |    |
--              --   e
--             /  \
--             b  c
--   </pre>
--   
--   Also consider the <tt>Diagrams.TwoD.Layout.Tree</tt> module from
--   <i>diagrams-contrib</i> for actual image rendering of rose-trees:
--   <a>http://hackage.haskell.org/package/diagrams-contrib</a>
module Data.Tree.Pretty

-- | Draw a tree top-down.
drawVerticalTree :: Tree String -> String

-- | Draw a tree top-down using the specified gap between sub-trees.
drawVerticalTreeWith :: Width -> Tree String -> String

-- | Draw a forest with each tree being top-down.
drawVerticalForest :: Forest String -> String

-- | Draw a forest with each tree being top-down and the specified
--   horizontal gap between trees.
drawVerticalForestWith :: Width -> Forest String -> String

-- | The size of the gap to use. It is recommended that you use a value
--   <tt>&gt;=2</tt> for best results (with <tt>2</tt> being the default).
type Width = Int
defaultGap :: Width

-- | This is exported in case you want to do further pretty-printing using
--   <a>Text.PrettyPrint.Boxes</a>.
treeToBox :: Width -> Tree String -> Box
instance Eq WidthLabel
instance Ord WidthLabel
instance Show WidthLabel
instance Read WidthLabel
