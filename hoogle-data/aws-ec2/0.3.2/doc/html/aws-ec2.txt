-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | AWS EC2/VPC, ELB and CloudWatch client library for Haskell
--   
--   AWS client library with focus on infrastructure services like EC2
--   (with VPC), ELB and CloudWatch, extension to
--   <a>https://github.com/aristidb/aws</a>.
@package aws-ec2
@version 0.3.2

module Aws.TH
derivePatchedShowRead :: Name -> (String -> String) -> Q [Dec]
patchPer :: [Char] -> [Char]

module Aws.CloudWatch.Types
data Unit
Seconds :: Unit
Microseconds :: Unit
Milliseconds :: Unit
Bytes :: Unit
Kilobytes :: Unit
Megabytes :: Unit
Gigabytes :: Unit
Terabytes :: Unit
Bits :: Unit
Kilobits :: Unit
Megabits :: Unit
Gigabits :: Unit
Terabits :: Unit
Percent :: Unit
Count :: Unit
BytesPerSecond :: Unit
KilobytesPerSecond :: Unit
MegabytesPerSecond :: Unit
GigabytesPerSecond :: Unit
TerabytesPerSecond :: Unit
BitsPerSecond :: Unit
KilobitsPerSecond :: Unit
MegabitsPerSecond :: Unit
GigabitsPerSecond :: Unit
TerabitsPerSecond :: Unit
CountPerSecond :: Unit
None :: Unit
instance Read Unit
instance Show Unit
instance Eq Unit
instance Enum Unit

module Aws.Query.Types

-- | A JSON value represented as a Haskell value.
data Value :: *
Object :: SrictNotUnpackedObject -> Value
Array :: SrictNotUnpackedArray -> Value
String :: SrictNotUnpackedText -> Value
Number :: SrictNotUnpackedScientific -> Value
Bool :: SrictNotUnpackedBool -> Value
Null :: Value
data XMLValueOptions
XMLValueOptions :: Text -> XMLValueOptions
arrayElementTag :: XMLValueOptions -> Text
toValue :: XMLValueOptions -> Node -> Value
castValue :: FromJSON a => Value -> Maybe a
instance Show ElementKind
instance AsMemoryResponse Value


-- | AWS Query API. See
--   http:/<i>docs.aws.amazon.com</i>AWSEC2<i>latest</i>UserGuide/using-query-api.html
module Aws.Query
data QueryAPIConfiguration qt
QueryAPIConfiguration :: ByteString -> QueryAPIConfiguration qt
qaRegion :: QueryAPIConfiguration qt -> ByteString
data QueryData
QueryData :: ByteString -> ByteString -> ByteString -> QueryData
qdEndpoint :: QueryData -> ByteString
qdRegion :: QueryData -> ByteString

-- | matters only for v4 signatures
qdService :: QueryData -> ByteString
data QueryMetadata
QueryMetadata :: Maybe Text -> QueryMetadata
requestId :: QueryMetadata -> Maybe Text
data QueryError
QueryError :: Status -> Text -> Text -> QueryError
queryStatusCode :: QueryError -> Status
queryErrorCode :: QueryError -> Text
queryErrorMessage :: QueryError -> Text
querySignQuery :: Query -> QueryData -> SignatureData -> SignedQuery
v2SignQuery :: Query -> QueryData -> SignatureData -> SignedQuery
qArg :: Text -> Maybe ByteString
qShow :: Show a => a -> Maybe ByteString
qBool :: Bool -> Maybe ByteString
valueConsumer :: Text -> (Value -> a) -> Cursor -> Response QueryMetadata a
valueConsumerOpt :: XMLValueOptions -> Text -> (Value -> a) -> Cursor -> Response QueryMetadata a
queryResponseConsumer :: (Cursor -> Response QueryMetadata a) -> IORef QueryMetadata -> HTTPResponseConsumer a
(+++) :: Monoid a => a -> a -> a
optional :: ByteString -> Maybe a -> (a -> Maybe ByteString) -> Query
optionalA :: ByteString -> Maybe Text -> Query
enumerate :: String -> [a] -> (a -> Maybe ByteString) -> Query
enumerateLists :: ByteString -> [Query] -> Query
instance Typeable QueryError
instance Show (QueryAPIConfiguration qt)
instance Show QueryData
instance Show QueryError
instance Show QueryMetadata
instance Monoid QueryMetadata
instance Loggable QueryMetadata
instance Exception QueryError
instance DefaultServiceConfiguration (QueryAPIConfiguration NormalQuery)

module Aws.Query.TH

-- | A space efficient, packed, unboxed Unicode text type.
data Text :: *

-- | This is the simplest representation of UTC. It consists of the day
--   number, and a time offset from midnight. Note that if a day has a leap
--   second added to it, it will have 86401 seconds.
data UTCTime :: *

-- | A type that can be converted from JSON, with the possibility of
--   failure.
--   
--   When writing an instance, use <tt>empty</tt>, <tt>mzero</tt>, or
--   <a>fail</a> to make a conversion fail, e.g. if an <a>Object</a> is
--   missing a required key, or the value is of the wrong type.
--   
--   An example type and instance:
--   
--   @{-# LANGUAGE OverloadedStrings #-}
--   
--   data Coord = Coord { x :: Double, y :: Double }
--   
--   instance FromJSON Coord where parseJSON (<a>Object</a> v) = Coord
--   <tt>&lt;$&gt;</tt> v <tt>.:</tt> "x" <tt>&lt;*&gt;</tt> v <tt>.:</tt>
--   "y"
--   
--   -- A non-<a>Object</a> value is of the wrong type, so use
--   <tt>mzero</tt> to fail. parseJSON _ = <tt>mzero</tt> @
--   
--   Note the use of the <tt>OverloadedStrings</tt> language extension
--   which enables <tt>Text</tt> values to be written as string literals.
--   
--   Instead of manually writing your <a>FromJSON</a> instance, there are
--   three options to do it automatically:
--   
--   <ul>
--   <li><a>Data.Aeson.TH</a> provides template-haskell functions which
--   will derive an instance at compile-time. The generated instance is
--   optimized for your type so will probably be more efficient than the
--   following two options:</li>
--   <li><a>Data.Aeson.Generic</a> provides a generic <tt>fromJSON</tt>
--   function that parses to any type which is an instance of
--   <tt>Data</tt>.</li>
--   <li>If your compiler has support for the <tt>DeriveGeneric</tt> and
--   <tt>DefaultSignatures</tt> language extensions, <tt>parseJSON</tt>
--   will have a default generic implementation.</li>
--   </ul>
--   
--   To use this, simply add a <tt>deriving <a>Generic</a></tt> clause to
--   your datatype and declare a <tt>FromJSON</tt> instance for your
--   datatype without giving a definition for <tt>parseJSON</tt>.
--   
--   For example the previous example can be simplified to just:
--   
--   @{-# LANGUAGE DeriveGeneric #-}
--   
--   import GHC.Generics
--   
--   data Coord = Coord { x :: Double, y :: Double } deriving Generic
--   
--   instance FromJSON Coord @
--   
--   Note that, instead of using <tt>DefaultSignatures</tt>, it's also
--   possible to parameterize the generic decoding using
--   <a>genericParseJSON</a> applied to your encoding/decoding
--   <a>Options</a>:
--   
--   <pre>
--   instance FromJSON Coord where
--       parseJSON = <a>genericParseJSON</a> <a>defaultOptions</a>
--   </pre>
class FromJSON a

module Aws.CloudWatch.Core
cwSignQuery :: Query -> QueryAPIConfiguration qt -> SignatureData -> SignedQuery

module Aws.CloudWatch.Commands.PutMetricData
data Dimension
Dimension :: Text -> Text -> Dimension
di_name :: Dimension -> Text
di_value :: Dimension -> Text
data MetricDatum
MetricDatum :: [Dimension] -> Text -> Maybe UTCTime -> Maybe Unit -> MetricDatumValue -> MetricDatum
md_dimensions :: MetricDatum -> [Dimension]
md_metricName :: MetricDatum -> Text
md_timestamp :: MetricDatum -> Maybe UTCTime
md_unit :: MetricDatum -> Maybe Unit
md_value :: MetricDatum -> MetricDatumValue
data MetricDatumValue
MetricValue :: Double -> MetricDatumValue
MetricStatisticValue :: StatisticSet -> MetricDatumValue
data StatisticSet
StatisticSet :: Double -> Double -> Double -> Double -> StatisticSet
ss_maximum :: StatisticSet -> Double
ss_minimum :: StatisticSet -> Double
ss_sampleCount :: StatisticSet -> Double
ss_sum :: StatisticSet -> Double
data PutMetricData
PutMetricData :: Text -> [MetricDatum] -> PutMetricData
enumerateDimensions :: [Dimension] -> Query
enumerateMetrics :: [MetricDatum] -> Query
instance Show Dimension
instance Eq Dimension
instance Show StatisticSet
instance Eq StatisticSet
instance Show MetricDatumValue
instance Eq MetricDatumValue
instance Show MetricDatum
instance Eq MetricDatum
instance Show PutMetricData
instance Transaction PutMetricData Value
instance ResponseConsumer PutMetricData Value
instance SignQuery PutMetricData

module Aws.CloudWatch

module Aws.Ec2.Core
type EC2Configuration = QueryAPIConfiguration
type EC2Metadata = QueryMetadata
ec2SignQuery :: Query -> QueryAPIConfiguration qt -> SignatureData -> SignedQuery
ec2ResponseConsumer :: (Cursor -> Response QueryMetadata a) -> IORef QueryMetadata -> HTTPResponseConsumer a
valueConsumer :: Text -> (Value -> a) -> Cursor -> Response QueryMetadata a
defVersion :: QueryItem

module Aws.Ec2.Types
data InstanceTenancy
Default :: InstanceTenancy
Dedicated :: InstanceTenancy
data VolumeType
Standard :: VolumeType
GP2SSD :: VolumeType
IOPSSD :: Int -> VolumeType
data BlockDeviceMapping
BlockDeviceMapping :: Text -> BlockDevice -> BlockDeviceMapping
bdm_deviceName :: BlockDeviceMapping -> Text
bdm_device :: BlockDeviceMapping -> BlockDevice
data BlockDevice
Ephemeral :: Text -> BlockDevice
bdm_virtualName :: BlockDevice -> Text
EBS :: EbsBlockDevice -> BlockDevice
data EbsBlockDevice
EbsBlockDevice :: Maybe Text -> Bool -> VolumeType -> Int -> Bool -> EbsBlockDevice
ebd_snapshotId :: EbsBlockDevice -> Maybe Text
ebd_deleteOnTermination :: EbsBlockDevice -> Bool
ebd_volumeType :: EbsBlockDevice -> VolumeType
ebd_volumeSize :: EbsBlockDevice -> Int
ebd_encrypted :: EbsBlockDevice -> Bool
queryEbsBlockDevice :: EbsBlockDevice -> [(ByteString, Maybe ByteString)]
instanceTypes :: [Text]
instance Show EbsBlockDevice
instance Show BlockDevice
instance Show BlockDeviceMapping
instance Show VolumeType
instance Show InstanceTenancy

module Aws.Ec2.TH

-- | A space efficient, packed, unboxed Unicode text type.
data Text :: *

-- | This is the simplest representation of UTC. It consists of the day
--   number, and a time offset from midnight. Note that if a day has a leap
--   second added to it, it will have 86401 seconds.
data UTCTime :: *

-- | A type that can be converted from JSON, with the possibility of
--   failure.
--   
--   When writing an instance, use <tt>empty</tt>, <tt>mzero</tt>, or
--   <a>fail</a> to make a conversion fail, e.g. if an <a>Object</a> is
--   missing a required key, or the value is of the wrong type.
--   
--   An example type and instance:
--   
--   @{-# LANGUAGE OverloadedStrings #-}
--   
--   data Coord = Coord { x :: Double, y :: Double }
--   
--   instance FromJSON Coord where parseJSON (<a>Object</a> v) = Coord
--   <tt>&lt;$&gt;</tt> v <tt>.:</tt> "x" <tt>&lt;*&gt;</tt> v <tt>.:</tt>
--   "y"
--   
--   -- A non-<a>Object</a> value is of the wrong type, so use
--   <tt>mzero</tt> to fail. parseJSON _ = <tt>mzero</tt> @
--   
--   Note the use of the <tt>OverloadedStrings</tt> language extension
--   which enables <tt>Text</tt> values to be written as string literals.
--   
--   Instead of manually writing your <a>FromJSON</a> instance, there are
--   three options to do it automatically:
--   
--   <ul>
--   <li><a>Data.Aeson.TH</a> provides template-haskell functions which
--   will derive an instance at compile-time. The generated instance is
--   optimized for your type so will probably be more efficient than the
--   following two options:</li>
--   <li><a>Data.Aeson.Generic</a> provides a generic <tt>fromJSON</tt>
--   function that parses to any type which is an instance of
--   <tt>Data</tt>.</li>
--   <li>If your compiler has support for the <tt>DeriveGeneric</tt> and
--   <tt>DefaultSignatures</tt> language extensions, <tt>parseJSON</tt>
--   will have a default generic implementation.</li>
--   </ul>
--   
--   To use this, simply add a <tt>deriving <a>Generic</a></tt> clause to
--   your datatype and declare a <tt>FromJSON</tt> instance for your
--   datatype without giving a definition for <tt>parseJSON</tt>.
--   
--   For example the previous example can be simplified to just:
--   
--   @{-# LANGUAGE DeriveGeneric #-}
--   
--   import GHC.Generics
--   
--   data Coord = Coord { x :: Double, y :: Double } deriving Generic
--   
--   instance FromJSON Coord @
--   
--   Note that, instead of using <tt>DefaultSignatures</tt>, it's also
--   possible to parameterize the generic decoding using
--   <a>genericParseJSON</a> applied to your encoding/decoding
--   <a>Options</a>:
--   
--   <pre>
--   instance FromJSON Coord where
--       parseJSON = <a>genericParseJSON</a> <a>defaultOptions</a>
--   </pre>
class FromJSON a

module Aws.Ec2.Commands.DescribeAvailabilityZones
data DescribeAvailabilityZones
DescribeAvailabilityZones :: [Text] -> DescribeAvailabilityZones
instance Show DescribeAvailabilityZones
instance Transaction DescribeAvailabilityZones Value
instance ResponseConsumer DescribeAvailabilityZones Value
instance SignQuery DescribeAvailabilityZones

module Aws.Ec2.Commands.DescribeRegions
data DescribeRegions
DescribeRegions :: [Text] -> DescribeRegions
instance Show DescribeRegions
instance Transaction DescribeRegions Value
instance ResponseConsumer DescribeRegions Value
instance SignQuery DescribeRegions

module Aws.Ec2.Commands.DescribeImages
data DescribeImages
DescribeImages :: [Text] -> DescribeImages
di_imageIds :: DescribeImages -> [Text]
instance Show DescribeImages
instance Transaction DescribeImages Value
instance ResponseConsumer DescribeImages Value
instance SignQuery DescribeImages

module Aws.Ec2.Commands.DescribeSecurityGroups
type SecurityGroupId = Text
type SecurityGroupName = Text
data DescribeSecurityGroups
DescribeSecurityGroups :: [SecurityGroupId] -> [SecurityGroupName] -> DescribeSecurityGroups
sg_ids :: DescribeSecurityGroups -> [SecurityGroupId]
sg_names :: DescribeSecurityGroups -> [SecurityGroupName]
instance Show DescribeSecurityGroups
instance Transaction DescribeSecurityGroups Value
instance ResponseConsumer DescribeSecurityGroups Value
instance SignQuery DescribeSecurityGroups

module Aws.Ec2.Commands.CreateSecurityGroup
data CreateSecurityGroup
CreateSecurityGroup :: Text -> Text -> Maybe Text -> CreateSecurityGroup
csec_name :: CreateSecurityGroup -> Text
csec_description :: CreateSecurityGroup -> Text
csec_vpcId :: CreateSecurityGroup -> Maybe Text
instance Show CreateSecurityGroup
instance Transaction CreateSecurityGroup Value
instance ResponseConsumer CreateSecurityGroup Value
instance SignQuery CreateSecurityGroup

module Aws.Ec2.Commands.AuthorizeSecurityGroupIngress
data IpProtocol
TCP :: IpProtocol
UDP :: IpProtocol
ICMP :: IpProtocol
Proto :: Int -> IpProtocol
All :: IpProtocol
type CidrIp = Text
data IpPermission
IpPermission :: IpProtocol -> (Maybe Int) -> (Maybe Int) -> [CidrIp] -> IpPermission
data AuthorizeSecurityGroupIngress
AuthorizeSecurityGroupIngress :: Text -> [IpPermission] -> AuthorizeSecurityGroupIngress
asi_groupId :: AuthorizeSecurityGroupIngress -> Text
asi_permissions :: AuthorizeSecurityGroupIngress -> [IpPermission]
enumeratePermissions :: [IpPermission] -> Query
instance Show IpPermission
instance Show AuthorizeSecurityGroupIngress
instance Transaction AuthorizeSecurityGroupIngress Value
instance ResponseConsumer AuthorizeSecurityGroupIngress Value
instance SignQuery AuthorizeSecurityGroupIngress
instance Show IpProtocol

module Aws.Ec2.Commands.CreateTags
type Tag = (Text, Text)
data CreateTags
CreateTags :: [Text] -> [Tag] -> CreateTags
ct_resources :: CreateTags -> [Text]
ct_tags :: CreateTags -> [Tag]
enumerateTags :: [Tag] -> Query
instance Show CreateTags
instance Transaction CreateTags Value
instance ResponseConsumer CreateTags Value
instance SignQuery CreateTags

module Aws.Ec2.Commands.DescribeTags
data DescribeTags
DescribeTags :: [Text] -> DescribeTags
instance Show DescribeTags
instance Transaction DescribeTags Value
instance ResponseConsumer DescribeTags Value
instance SignQuery DescribeTags

module Aws.Ec2.Commands.DescribeKeyPairs
data DescribeKeyPairs
DescribeKeyPairs :: [Text] -> DescribeKeyPairs
instance Show DescribeKeyPairs
instance Transaction DescribeKeyPairs Value
instance ResponseConsumer DescribeKeyPairs Value
instance SignQuery DescribeKeyPairs

module Aws.Ec2.Commands.ImportKeyPair
data ImportKeyPair
ImportKeyPair :: Text -> Text -> ImportKeyPair
ikp_keyName :: ImportKeyPair -> Text
ikp_publicKeyMaterial :: ImportKeyPair -> Text
instance Show ImportKeyPair
instance Transaction ImportKeyPair Value
instance ResponseConsumer ImportKeyPair Value
instance SignQuery ImportKeyPair

module Aws.Ec2.Commands.DescribeInstances
data DescribeInstances
DescribeInstances :: [Text] -> DescribeInstances
di_instanceIds :: DescribeInstances -> [Text]
instance Show DescribeInstances
instance Transaction DescribeInstances Value
instance ResponseConsumer DescribeInstances Value
instance SignQuery DescribeInstances

module Aws.Ec2.Commands.DescribeInstanceStatus
data DescribeInstanceStatus
DescribeInstanceStatus :: [Text] -> DescribeInstanceStatus
dis_instanceIds :: DescribeInstanceStatus -> [Text]
instance Show DescribeInstanceStatus
instance Transaction DescribeInstanceStatus Value
instance ResponseConsumer DescribeInstanceStatus Value
instance SignQuery DescribeInstanceStatus

module Aws.Ec2.Commands.RunInstances
data RunInstances
RunInstances :: Text -> (Int, Int) -> Text -> [Text] -> [BlockDeviceMapping] -> Maybe Text -> Bool -> Bool -> Maybe InstanceInitiatedShutdownBehavior -> Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Bool -> RunInstances
run_imageId :: RunInstances -> Text
run_count :: RunInstances -> (Int, Int)
run_instanceType :: RunInstances -> Text
run_securityGroupIds :: RunInstances -> [Text]
run_blockDeviceMappings :: RunInstances -> [BlockDeviceMapping]
run_subnetId :: RunInstances -> Maybe Text
run_monitoringEnabled :: RunInstances -> Bool
run_disableApiTermination :: RunInstances -> Bool
run_instanceInitiatedShutdownBehavior :: RunInstances -> Maybe InstanceInitiatedShutdownBehavior
run_ebsOptimized :: RunInstances -> Bool
run_keyName :: RunInstances -> Maybe Text
run_userData :: RunInstances -> Maybe Text
run_kernelId :: RunInstances -> Maybe Text
run_ramdiskId :: RunInstances -> Maybe Text
run_clientToken :: RunInstances -> Maybe Text
run_iamInstanceProfileARN :: RunInstances -> Maybe Text
run_availabilityZone :: RunInstances -> Maybe Text
run_associatePublicIpAddress :: RunInstances -> Bool
data InstanceInitiatedShutdownBehavior
Stop :: InstanceInitiatedShutdownBehavior
Terminate :: InstanceInitiatedShutdownBehavior
enumerateBlockDevices :: [BlockDeviceMapping] -> Query
instance Show RunInstances
instance Transaction RunInstances Value
instance ResponseConsumer RunInstances Value
instance SignQuery RunInstances
instance Show InstanceInitiatedShutdownBehavior

module Aws.Ec2.Commands.StartInstances
data StartInstances
StartInstances :: [Text] -> StartInstances
start_instanceIds :: StartInstances -> [Text]
instance Show StartInstances
instance Transaction StartInstances Value
instance ResponseConsumer StartInstances Value
instance SignQuery StartInstances

module Aws.Ec2.Commands.StopInstances
data StopInstances
StopInstances :: [Text] -> StopInstances
stop_instanceIds :: StopInstances -> [Text]
instance Show StopInstances
instance Transaction StopInstances Value
instance ResponseConsumer StopInstances Value
instance SignQuery StopInstances

module Aws.Ec2.Commands.TerminateInstances
data TerminateInstances
TerminateInstances :: [Text] -> TerminateInstances
term_instanceIds :: TerminateInstances -> [Text]
instance Show TerminateInstances
instance Transaction TerminateInstances Value
instance ResponseConsumer TerminateInstances Value
instance SignQuery TerminateInstances

module Aws.Ec2.Commands.GetConsoleOutput
data GetConsoleOutput
GetConsoleOutput :: Text -> GetConsoleOutput
gco_instanceId :: GetConsoleOutput -> Text
data ConsoleOutput
ConsoleOutput :: Text -> Text -> UTCTime -> Text -> ConsoleOutput
requestId :: ConsoleOutput -> Text
instanceId :: ConsoleOutput -> Text
timestamp :: ConsoleOutput -> UTCTime
output :: ConsoleOutput -> Text
instance Show GetConsoleOutput
instance Generic ConsoleOutput
instance Show ConsoleOutput
instance Datatype D1ConsoleOutput
instance Constructor C1_0ConsoleOutput
instance Selector S1_0_0ConsoleOutput
instance Selector S1_0_1ConsoleOutput
instance Selector S1_0_2ConsoleOutput
instance Selector S1_0_3ConsoleOutput
instance Transaction GetConsoleOutput Value
instance ResponseConsumer GetConsoleOutput Value
instance SignQuery GetConsoleOutput
instance FromJSON ConsoleOutput

module Aws.Ec2.Commands.DescribeVpcs
data DescribeVpcs
DescribeVpcs :: [Text] -> DescribeVpcs
dvpc_vpcIds :: DescribeVpcs -> [Text]
instance Show DescribeVpcs
instance Transaction DescribeVpcs Value
instance ResponseConsumer DescribeVpcs Value
instance SignQuery DescribeVpcs

module Aws.Ec2.Commands.CreateVpc
data CreateVpc
CreateVpc :: Text -> InstanceTenancy -> CreateVpc
cvpc_cidrBlock :: CreateVpc -> Text
cvpc_instanceTenancy :: CreateVpc -> InstanceTenancy
instance Show CreateVpc
instance Transaction CreateVpc Value
instance ResponseConsumer CreateVpc Value
instance SignQuery CreateVpc

module Aws.Ec2.Commands.ModifyVpcAttribute
data VpcAttribute
EnableDnsSupport :: Bool -> VpcAttribute
EnableDnsHostnames :: Bool -> VpcAttribute
data ModifyVpcAttribute
ModifyVpcAttribute :: Text -> VpcAttribute -> ModifyVpcAttribute
mva_vpcId :: ModifyVpcAttribute -> Text
mva_attribute :: ModifyVpcAttribute -> VpcAttribute
instance Show VpcAttribute
instance Show ModifyVpcAttribute
instance Transaction ModifyVpcAttribute Value
instance ResponseConsumer ModifyVpcAttribute Value
instance SignQuery ModifyVpcAttribute

module Aws.Ec2.Commands.CreateInternetGateway
data CreateInternetGateway
CreateInternetGateway :: CreateInternetGateway
instance Show CreateInternetGateway
instance Transaction CreateInternetGateway Value
instance ResponseConsumer CreateInternetGateway Value
instance SignQuery CreateInternetGateway

module Aws.Ec2.Commands.AttachInternetGateway
data AttachInternetGateway
AttachInternetGateway :: Text -> Text -> AttachInternetGateway
aig_internetGatewayId :: AttachInternetGateway -> Text
aig_vpcId :: AttachInternetGateway -> Text
instance Show AttachInternetGateway
instance Transaction AttachInternetGateway Value
instance ResponseConsumer AttachInternetGateway Value
instance SignQuery AttachInternetGateway


-- | Optimized to lookup a default route table for VPC.
module Aws.Ec2.Commands.DescribeRouteTables
data DescribeRouteTables
DescribeRouteTables :: Text -> DescribeRouteTables
drt_vpcId :: DescribeRouteTables -> Text
instance Show DescribeRouteTables
instance Transaction DescribeRouteTables Value
instance ResponseConsumer DescribeRouteTables Value
instance SignQuery DescribeRouteTables


-- | Optimized to lookup a default route table for VPC.
module Aws.Ec2.Commands.CreateRoute
data RouteTarget
GatewayId :: Text -> RouteTarget
InstanceId :: Text -> RouteTarget
NetworkInterfaceId :: Text -> RouteTarget
VpcPeeringConnectionId :: Text -> RouteTarget
data CreateRoute
CreateRoute :: Text -> Text -> RouteTarget -> CreateRoute
cr_routeTableId :: CreateRoute -> Text
cr_destinationCidrBlock :: CreateRoute -> Text
cr_target :: CreateRoute -> RouteTarget
instance Show RouteTarget
instance Show CreateRoute
instance Transaction CreateRoute Value
instance ResponseConsumer CreateRoute Value
instance SignQuery CreateRoute

module Aws.Ec2.Commands.DescribeSubnets
data DescribeSubnets
DescribeSubnets :: [Text] -> DescribeSubnets
instance Show DescribeSubnets
instance Transaction DescribeSubnets Value
instance ResponseConsumer DescribeSubnets Value
instance SignQuery DescribeSubnets

module Aws.Ec2.Commands.CreateSubnet
data CreateSubnet
CreateSubnet :: Text -> Text -> Maybe Text -> CreateSubnet
csub_vpcId :: CreateSubnet -> Text
csub_cidrBlock :: CreateSubnet -> Text
csub_availabilityZone :: CreateSubnet -> Maybe Text
instance Show CreateSubnet
instance Transaction CreateSubnet Value
instance ResponseConsumer CreateSubnet Value
instance SignQuery CreateSubnet

module Aws.Ec2.Commands.DescribeVolumes
data DescribeVolumes
DescribeVolumes :: [Text] -> DescribeVolumes
instance Show DescribeVolumes
instance Transaction DescribeVolumes Value
instance ResponseConsumer DescribeVolumes Value
instance SignQuery DescribeVolumes

module Aws.Ec2.Commands.DescribeVolumeStatus
data DescribeVolumeStatus
DescribeVolumeStatus :: [Text] -> DescribeVolumeStatus
instance Show DescribeVolumeStatus
instance Transaction DescribeVolumeStatus Value
instance ResponseConsumer DescribeVolumeStatus Value
instance SignQuery DescribeVolumeStatus

module Aws.Ec2.Commands.CreateVolume
data CreateVolume
CreateVolume :: Text -> EbsBlockDevice -> CreateVolume
cvol_AvailabilityZone :: CreateVolume -> Text
cvol_ebs :: CreateVolume -> EbsBlockDevice
instance Show CreateVolume
instance Transaction CreateVolume Value
instance ResponseConsumer CreateVolume Value
instance SignQuery CreateVolume

module Aws.Ec2.Commands.AttachVolume
data AttachVolume
AttachVolume :: Text -> Text -> Text -> AttachVolume
avol_volumeId :: AttachVolume -> Text
avol_instanceId :: AttachVolume -> Text
avol_device :: AttachVolume -> Text
instance Show AttachVolume
instance Transaction AttachVolume Value
instance ResponseConsumer AttachVolume Value
instance SignQuery AttachVolume

module Aws.Ec2

-- | Associates a request type and a response type in a bi-directional way.
--   
--   This allows the type-checker to infer the response type when given the
--   request type and vice versa.
--   
--   Note that the actual request generation and response parsing resides
--   in <a>SignQuery</a> and <a>ResponseConsumer</a> respectively.
class (SignQuery r, ResponseConsumer r a, Loggable (ResponseMetadata a)) => Transaction r a | r -> a

module Aws.Elb.Core
type ELBMetadata = QueryMetadata
elbSignQuery :: Query -> QueryAPIConfiguration qt -> SignatureData -> SignedQuery
elbResponseConsumer :: (Cursor -> Response QueryMetadata a) -> IORef QueryMetadata -> HTTPResponseConsumer a
valueConsumer :: Text -> (Value -> a) -> Cursor -> Response QueryMetadata a
defVersion :: QueryItem

module Aws.Elb.Types
enumerateInstanceIds :: [Text] -> Query

module Aws.Elb.TH

-- | A space efficient, packed, unboxed Unicode text type.
data Text :: *

-- | A type that can be converted from JSON, with the possibility of
--   failure.
--   
--   When writing an instance, use <tt>empty</tt>, <tt>mzero</tt>, or
--   <a>fail</a> to make a conversion fail, e.g. if an <a>Object</a> is
--   missing a required key, or the value is of the wrong type.
--   
--   An example type and instance:
--   
--   @{-# LANGUAGE OverloadedStrings #-}
--   
--   data Coord = Coord { x :: Double, y :: Double }
--   
--   instance FromJSON Coord where parseJSON (<a>Object</a> v) = Coord
--   <tt>&lt;$&gt;</tt> v <tt>.:</tt> "x" <tt>&lt;*&gt;</tt> v <tt>.:</tt>
--   "y"
--   
--   -- A non-<a>Object</a> value is of the wrong type, so use
--   <tt>mzero</tt> to fail. parseJSON _ = <tt>mzero</tt> @
--   
--   Note the use of the <tt>OverloadedStrings</tt> language extension
--   which enables <tt>Text</tt> values to be written as string literals.
--   
--   Instead of manually writing your <a>FromJSON</a> instance, there are
--   three options to do it automatically:
--   
--   <ul>
--   <li><a>Data.Aeson.TH</a> provides template-haskell functions which
--   will derive an instance at compile-time. The generated instance is
--   optimized for your type so will probably be more efficient than the
--   following two options:</li>
--   <li><a>Data.Aeson.Generic</a> provides a generic <tt>fromJSON</tt>
--   function that parses to any type which is an instance of
--   <tt>Data</tt>.</li>
--   <li>If your compiler has support for the <tt>DeriveGeneric</tt> and
--   <tt>DefaultSignatures</tt> language extensions, <tt>parseJSON</tt>
--   will have a default generic implementation.</li>
--   </ul>
--   
--   To use this, simply add a <tt>deriving <a>Generic</a></tt> clause to
--   your datatype and declare a <tt>FromJSON</tt> instance for your
--   datatype without giving a definition for <tt>parseJSON</tt>.
--   
--   For example the previous example can be simplified to just:
--   
--   @{-# LANGUAGE DeriveGeneric #-}
--   
--   import GHC.Generics
--   
--   data Coord = Coord { x :: Double, y :: Double } deriving Generic
--   
--   instance FromJSON Coord @
--   
--   Note that, instead of using <tt>DefaultSignatures</tt>, it's also
--   possible to parameterize the generic decoding using
--   <a>genericParseJSON</a> applied to your encoding/decoding
--   <a>Options</a>:
--   
--   <pre>
--   instance FromJSON Coord where
--       parseJSON = <a>genericParseJSON</a> <a>defaultOptions</a>
--   </pre>
class FromJSON a

module Aws.Elb.Commands.DescribeLoadBalancers
data DescribeLoadBalancers
DescribeLoadBalancers :: [Text] -> DescribeLoadBalancers
instance Transaction DescribeLoadBalancers Value
instance ResponseConsumer DescribeLoadBalancers Value
instance SignQuery DescribeLoadBalancers

module Aws.Elb.Commands.CreateLoadBalancer
data LbProtocol
HTTP :: LbProtocol
HTTPS :: LbProtocol
TCP :: LbProtocol
SSL :: LbProtocol
data Scheme
Internal :: Scheme
Public :: Scheme
data Listener
Listener :: Int -> Int -> LbProtocol -> LbProtocol -> Maybe Text -> Listener
l_lbPort :: Listener -> Int
l_instancePort :: Listener -> Int
l_instanceProtocol :: Listener -> LbProtocol
l_lbProtocol :: Listener -> LbProtocol
l_sslCertificateId :: Listener -> Maybe Text
data CreateLoadBalancer
CreateLoadBalancer :: Text -> [Listener] -> Scheme -> [Text] -> [Text] -> CreateLoadBalancer
clb_name :: CreateLoadBalancer -> Text
clb_listeners :: CreateLoadBalancer -> [Listener]
clb_scheme :: CreateLoadBalancer -> Scheme
clb_securityGroupIds :: CreateLoadBalancer -> [Text]

-- | one per AZ
clb_subnetIds :: CreateLoadBalancer -> [Text]
enumerateListeners :: [Listener] -> Query
instance Show LbProtocol
instance Show Scheme
instance Show Listener
instance Show CreateLoadBalancer
instance Transaction CreateLoadBalancer Value
instance ResponseConsumer CreateLoadBalancer Value
instance SignQuery CreateLoadBalancer

module Aws.Elb.Commands.DescribeLoadBalancerPolicyTypes
data DescribeLoadBalancerPolicyTypes
ListLoadBalancerPolicyTypes :: DescribeLoadBalancerPolicyTypes
DescribeLoadBalancerPolicyTypes :: [Text] -> DescribeLoadBalancerPolicyTypes
instance Transaction DescribeLoadBalancerPolicyTypes Value
instance ResponseConsumer DescribeLoadBalancerPolicyTypes Value
instance SignQuery DescribeLoadBalancerPolicyTypes

module Aws.Elb.Commands.DescribeInstanceHealth
data DescribeInstanceHealth
DescribeInstanceHealth :: Text -> DescribeInstanceHealth
instance Transaction DescribeInstanceHealth Value
instance ResponseConsumer DescribeInstanceHealth Value
instance SignQuery DescribeInstanceHealth

module Aws.Elb.Commands.DescribeLoadBalancerPolicies
data DescribeLoadBalancerPolicies
DescribeLoadBalancerPolicies :: Text -> DescribeLoadBalancerPolicies
instance Transaction DescribeLoadBalancerPolicies Value
instance ResponseConsumer DescribeLoadBalancerPolicies Value
instance SignQuery DescribeLoadBalancerPolicies

module Aws.Elb.Commands.ModifyLoadBalancerAttributes
type S3BucketName = Text
type S3BucketPrefix = Text
data EmitInterval
Min5 :: EmitInterval
Min60 :: EmitInterval
data LoadBalancerAttribute
AccessLog :: Bool -> EmitInterval -> S3BucketName -> S3BucketPrefix -> LoadBalancerAttribute
ConnectionDraining :: Bool -> Int -> LoadBalancerAttribute
CrossZoneLoadBalancing :: Bool -> LoadBalancerAttribute
data ModifyLoadBalancerAttributes
ModifyLoadBalancerAttributes :: Text -> [LoadBalancerAttribute] -> ModifyLoadBalancerAttributes
mlba_name :: ModifyLoadBalancerAttributes -> Text
mlba_attributes :: ModifyLoadBalancerAttributes -> [LoadBalancerAttribute]
attributeQuery :: IsString t => LoadBalancerAttribute -> [(t, Maybe ByteString)]
instance Show EmitInterval
instance Show LoadBalancerAttribute
instance Show ModifyLoadBalancerAttributes
instance Transaction ModifyLoadBalancerAttributes Value
instance ResponseConsumer ModifyLoadBalancerAttributes Value
instance SignQuery ModifyLoadBalancerAttributes

module Aws.Elb.Commands.RegisterInstancesWithLoadBalancer
data RegisterInstancesWithLoadBalancer
RegisterInstancesWithLoadBalancer :: Text -> [Text] -> RegisterInstancesWithLoadBalancer
rilb_name :: RegisterInstancesWithLoadBalancer -> Text
rilb_instanceIds :: RegisterInstancesWithLoadBalancer -> [Text]
instance Show RegisterInstancesWithLoadBalancer
instance Transaction RegisterInstancesWithLoadBalancer Value
instance ResponseConsumer RegisterInstancesWithLoadBalancer Value
instance SignQuery RegisterInstancesWithLoadBalancer

module Aws.Elb.Commands.DeregisterInstancesFromLoadBalancer
data DeregisterInstancesFromLoadBalancer
DeregisterInstancesFromLoadBalancer :: Text -> [Text] -> DeregisterInstancesFromLoadBalancer
dilb_name :: DeregisterInstancesFromLoadBalancer -> Text
dilb_instanceIds :: DeregisterInstancesFromLoadBalancer -> [Text]
instance Show DeregisterInstancesFromLoadBalancer
instance Transaction DeregisterInstancesFromLoadBalancer Value
instance ResponseConsumer DeregisterInstancesFromLoadBalancer Value
instance SignQuery DeregisterInstancesFromLoadBalancer

module Aws.Elb.Commands.CreateAppCookieStickinessPolicy
data CreateAppCookieStickinessPolicy
CreateAppCookieStickinessPolicy :: Text -> Text -> Text -> CreateAppCookieStickinessPolicy
cacsp_loadBalancerName :: CreateAppCookieStickinessPolicy -> Text
cacsp_cookieName :: CreateAppCookieStickinessPolicy -> Text
cacsp_policyName :: CreateAppCookieStickinessPolicy -> Text
instance Show CreateAppCookieStickinessPolicy
instance Transaction CreateAppCookieStickinessPolicy Value
instance ResponseConsumer CreateAppCookieStickinessPolicy Value
instance SignQuery CreateAppCookieStickinessPolicy

module Aws.Elb.Commands.CreateLBCookieStickinessPolicy
data CreateLBCookieStickinessPolicy
CreateLBCookieStickinessPolicy :: Text -> Maybe Integer -> Text -> CreateLBCookieStickinessPolicy
clbcsp_loadBalancerName :: CreateLBCookieStickinessPolicy -> Text
clbcsp_cookieExpirationPeriod :: CreateLBCookieStickinessPolicy -> Maybe Integer
clbcsp_policyName :: CreateLBCookieStickinessPolicy -> Text
instance Show CreateLBCookieStickinessPolicy
instance Transaction CreateLBCookieStickinessPolicy Value
instance ResponseConsumer CreateLBCookieStickinessPolicy Value
instance SignQuery CreateLBCookieStickinessPolicy

module Aws.Elb.Commands.SetLoadBalancerPoliciesOfListener
data SetLoadBalancerPoliciesOfListener
SetLoadBalancerPoliciesOfListener :: Text -> Integer -> [Text] -> SetLoadBalancerPoliciesOfListener
spl_loadBalancerName :: SetLoadBalancerPoliciesOfListener -> Text
spl_loadBalancerPort :: SetLoadBalancerPoliciesOfListener -> Integer
spl_policyNames :: SetLoadBalancerPoliciesOfListener -> [Text]
instance Show SetLoadBalancerPoliciesOfListener
instance Transaction SetLoadBalancerPoliciesOfListener Value
instance ResponseConsumer SetLoadBalancerPoliciesOfListener Value
instance SignQuery SetLoadBalancerPoliciesOfListener

module Aws.Elb.Commands.ConfigureHealthCheck
data Target
TargetTCP :: Integer -> Target
TargetSSL :: Integer -> Target
TargetHTTP :: Integer -> Text -> Target
TargetHTTPS :: Integer -> Text -> Target
data HealthCheck
HealthCheck :: Target -> Integer -> Integer -> Integer -> Integer -> HealthCheck
hc_target :: HealthCheck -> Target
hc_healthyThreshold :: HealthCheck -> Integer
hc_unhealthyThreshold :: HealthCheck -> Integer
hc_interval :: HealthCheck -> Integer

-- | must be less than <a>hc_interval</a>
hc_timeout :: HealthCheck -> Integer
data ConfigureHealthCheck
ConfigureHealthCheck :: Text -> HealthCheck -> ConfigureHealthCheck
chc_name :: ConfigureHealthCheck -> Text
chc_healthCheck :: ConfigureHealthCheck -> HealthCheck
instance Show HealthCheck
instance Transaction ConfigureHealthCheck Value
instance ResponseConsumer ConfigureHealthCheck Value
instance SignQuery ConfigureHealthCheck
instance Show Target

module Aws.Elb

-- | Associates a request type and a response type in a bi-directional way.
--   
--   This allows the type-checker to infer the response type when given the
--   request type and vice versa.
--   
--   Note that the actual request generation and response parsing resides
--   in <a>SignQuery</a> and <a>ResponseConsumer</a> respectively.
class (SignQuery r, ResponseConsumer r a, Loggable (ResponseMetadata a)) => Transaction r a | r -> a

module Aws.Canonical
canonicalSigData :: IO SignatureData
baseTime :: UTCTime
