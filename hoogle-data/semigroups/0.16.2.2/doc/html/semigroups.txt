-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Anything that associates
--   
--   In mathematics, a semigroup is an algebraic structure consisting of a
--   set together with an associative binary operation. A semigroup
--   generalizes a monoid in that there might not exist an identity
--   element. It also (originally) generalized a group (a monoid with all
--   inverses) to a type where every element did not have to have an
--   inverse, thus the name semigroup.
@package semigroups
@version 0.16.2.2


-- | A NonEmpty list forms a monad as per list, but always contains at
--   least one element.
module Data.List.NonEmpty
data NonEmpty a
[:|] :: a -> [a] -> NonEmpty a

-- | Map a function over a <a>NonEmpty</a> stream.
map :: (a -> b) -> NonEmpty a -> NonEmpty b

-- | 'intersperse x xs' alternates elements of the list with copies of
--   <tt>x</tt>.
--   
--   <pre>
--   intersperse 0 (1 :| [2,3]) == 1 :| [0,2,0,3]
--   </pre>
intersperse :: a -> NonEmpty a -> NonEmpty a

-- | <a>scanl</a> is similar to <a>foldl</a>, but returns a stream of
--   successive reduced values from the left:
--   
--   <pre>
--   scanl f z [x1, x2, ...] == z :| [z `f` x1, (z `f` x1) `f` x2, ...]
--   </pre>
--   
--   Note that
--   
--   <pre>
--   last (scanl f z xs) == foldl f z xs.
--   </pre>
scanl :: Foldable f => (b -> a -> b) -> b -> f a -> NonEmpty b

-- | <a>scanr</a> is the right-to-left dual of <a>scanl</a>. Note that
--   
--   <pre>
--   head (scanr f z xs) == foldr f z xs.
--   </pre>
scanr :: Foldable f => (a -> b -> b) -> b -> f a -> NonEmpty b

-- | <a>scanl1</a> is a variant of <a>scanl</a> that has no starting value
--   argument:
--   
--   <pre>
--   scanl1 f [x1, x2, ...] == x1 :| [x1 `f` x2, x1 `f` (x2 `f` x3), ...]
--   </pre>
scanl1 :: (a -> a -> a) -> NonEmpty a -> NonEmpty a

-- | <a>scanr1</a> is a variant of <a>scanr</a> that has no starting value
--   argument.
scanr1 :: (a -> a -> a) -> NonEmpty a -> NonEmpty a

-- | <a>transpose</a> for <a>NonEmpty</a>, behaves the same as
--   <a>transpose</a> The rows/columns need not be the same length, in
--   which case &gt; transpose . transpose /= id
transpose :: NonEmpty (NonEmpty a) -> NonEmpty (NonEmpty a)

-- | <a>sortBy</a> for <a>NonEmpty</a>, behaves the same as <a>sortBy</a>
sortBy :: (a -> a -> Ordering) -> NonEmpty a -> NonEmpty a

-- | <a>sortOn</a> for <a>NonEmpty</a>, behaves the same as:
--   
--   <pre>
--   sortBy . comparing
--   </pre>
sortOn :: Ord o => (a -> o) -> NonEmpty a -> NonEmpty a
length :: NonEmpty a -> Int

-- | Extract the first element of the stream.
head :: NonEmpty a -> a

-- | Extract the possibly-empty tail of the stream.
tail :: NonEmpty a -> [a]

-- | Extract the last element of the stream.
last :: NonEmpty a -> a

-- | Extract everything except the last element of the stream.
init :: NonEmpty a -> [a]

-- | Prepend an element to the stream.
(<|) :: a -> NonEmpty a -> NonEmpty a

-- | Synonym for <a>&lt;|</a>.
cons :: a -> NonEmpty a -> NonEmpty a

-- | <a>uncons</a> produces the first element of the stream, and a stream
--   of the remaining elements, if any.
uncons :: NonEmpty a -> (a, Maybe (NonEmpty a))
unfoldr :: (a -> (b, Maybe a)) -> a -> NonEmpty b

-- | Sort a stream.
sort :: Ord a => NonEmpty a -> NonEmpty a

-- | <a>reverse</a> a finite NonEmpty stream.
reverse :: NonEmpty a -> NonEmpty a

-- | The <a>inits</a> function takes a stream <tt>xs</tt> and returns all
--   the finite prefixes of <tt>xs</tt>.
inits :: Foldable f => f a -> NonEmpty [a]

-- | The <a>tails</a> function takes a stream <tt>xs</tt> and returns all
--   the suffixes of <tt>xs</tt>.
tails :: Foldable f => f a -> NonEmpty [a]

-- | <tt><a>iterate</a> f x</tt> produces the infinite sequence of repeated
--   applications of <tt>f</tt> to <tt>x</tt>.
--   
--   <pre>
--   iterate f x = x :| [f x, f (f x), ..]
--   </pre>
iterate :: (a -> a) -> a -> NonEmpty a

-- | <tt><a>repeat</a> x</tt> returns a constant stream, where all elements
--   are equal to <tt>x</tt>.
repeat :: a -> NonEmpty a

-- | <tt><a>cycle</a> xs</tt> returns the infinite repetition of
--   <tt>xs</tt>:
--   
--   <pre>
--   cycle [1,2,3] = 1 :| [2,3,1,2,3,...]
--   </pre>
cycle :: NonEmpty a -> NonEmpty a

-- | <a>unfold</a> produces a new stream by repeatedly applying the
--   unfolding function to the seed value to produce an element of type
--   <tt>b</tt> and a new seed value. When the unfolding function returns
--   <a>Nothing</a> instead of a new seed value, the stream ends.
unfold :: (a -> (b, Maybe a)) -> a -> NonEmpty b

-- | <tt><a>insert</a> x xs</tt> inserts <tt>x</tt> into the last position
--   in <tt>xs</tt> where it is still less than or equal to the next
--   element. In particular, if the list is sorted beforehand, the result
--   will also be sorted.
insert :: (Foldable f, Ord a) => a -> f a -> NonEmpty a

-- | <tt><a>some1</a> x</tt> sequences <tt>x</tt> one or more times.
some1 :: Alternative f => f a -> f (NonEmpty a)

-- | <tt><a>take</a> n xs</tt> returns the first <tt>n</tt> elements of
--   <tt>xs</tt>.
take :: Int -> NonEmpty a -> [a]

-- | <tt><a>drop</a> n xs</tt> drops the first <tt>n</tt> elements off the
--   front of the sequence <tt>xs</tt>.
drop :: Int -> NonEmpty a -> [a]

-- | <tt><a>splitAt</a> n xs</tt> returns a pair consisting of the prefix
--   of <tt>xs</tt> of length <tt>n</tt> and the remaining stream
--   immediately following this prefix.
--   
--   <pre>
--   'splitAt' n xs == ('take' n xs, 'drop' n xs)
--   xs == ys ++ zs where (ys, zs) = 'splitAt' n xs
--   </pre>
splitAt :: Int -> NonEmpty a -> ([a], [a])

-- | <tt><a>takeWhile</a> p xs</tt> returns the longest prefix of the
--   stream <tt>xs</tt> for which the predicate <tt>p</tt> holds.
takeWhile :: (a -> Bool) -> NonEmpty a -> [a]

-- | <tt><a>dropWhile</a> p xs</tt> returns the suffix remaining after
--   <tt><a>takeWhile</a> p xs</tt>.
dropWhile :: (a -> Bool) -> NonEmpty a -> [a]

-- | <tt><a>span</a> p xs</tt> returns the longest prefix of <tt>xs</tt>
--   that satisfies <tt>p</tt>, together with the remainder of the stream.
--   
--   <pre>
--   'span' p xs == ('takeWhile' p xs, 'dropWhile' p xs)
--   xs == ys ++ zs where (ys, zs) = 'span' p xs
--   </pre>
span :: (a -> Bool) -> NonEmpty a -> ([a], [a])

-- | The <tt><a>break</a> p</tt> function is equivalent to <tt><a>span</a>
--   (not . p)</tt>.
break :: (a -> Bool) -> NonEmpty a -> ([a], [a])

-- | <tt><a>filter</a> p xs</tt> removes any elements from <tt>xs</tt> that
--   do not satisfy <tt>p</tt>.
filter :: (a -> Bool) -> NonEmpty a -> [a]

-- | The <a>partition</a> function takes a predicate <tt>p</tt> and a
--   stream <tt>xs</tt>, and returns a pair of lists. The first list
--   corresponds to the elements of <tt>xs</tt> for which <tt>p</tt> holds;
--   the second corresponds to the elements of <tt>xs</tt> for which
--   <tt>p</tt> does not hold.
--   
--   <pre>
--   'partition' p xs = ('filter' p xs, 'filter' (not . p) xs)
--   </pre>
partition :: (a -> Bool) -> NonEmpty a -> ([a], [a])

-- | The <a>group</a> function takes a stream and returns a list of streams
--   such that flattening the resulting list is equal to the argument.
--   Moreover, each stream in the resulting list contains only equal
--   elements. For example, in list notation:
--   
--   <pre>
--   'group' $ 'cycle' "Mississippi" = "M" : "i" : "ss" : "i" : "ss" : "i" : "pp" : "i" : "M" : "i" : ...
--   </pre>
group :: (Foldable f, Eq a) => f a -> [NonEmpty a]

-- | <a>groupBy</a> operates like <a>group</a>, but uses the provided
--   equality predicate instead of <a>==</a>.
groupBy :: Foldable f => (a -> a -> Bool) -> f a -> [NonEmpty a]

-- | <a>group1</a> operates like <a>group</a>, but uses the knowledge that
--   its input is non-empty to produce guaranteed non-empty output.
group1 :: Eq a => NonEmpty a -> NonEmpty (NonEmpty a)

-- | <a>groupBy1</a> is to <a>group1</a> as <a>groupBy</a> is to
--   <a>group</a>.
groupBy1 :: (a -> a -> Bool) -> NonEmpty a -> NonEmpty (NonEmpty a)

-- | The <tt>isPrefix</tt> function returns <tt>True</tt> if the first
--   argument is a prefix of the second.
isPrefixOf :: Eq a => [a] -> NonEmpty a -> Bool

-- | The <a>nub</a> function removes duplicate elements from a list. In
--   particular, it keeps only the first occurence of each element. (The
--   name <a>nub</a> means 'essence'.) It is a special case of
--   <a>nubBy</a>, which allows the programmer to supply their own
--   inequality test.
nub :: Eq a => NonEmpty a -> NonEmpty a

-- | The <a>nubBy</a> function behaves just like <a>nub</a>, except it uses
--   a user-supplied equality predicate instead of the overloaded <a>==</a>
--   function.
nubBy :: (a -> a -> Bool) -> NonEmpty a -> NonEmpty a

-- | <tt>xs !! n</tt> returns the element of the stream <tt>xs</tt> at
--   index <tt>n</tt>. Note that the head of the stream has index 0.
--   
--   <i>Beware</i>: a negative or out-of-bounds index will cause an error.
(!!) :: NonEmpty a -> Int -> a

-- | The <a>zip</a> function takes two streams and returns a stream of
--   corresponding pairs.
zip :: NonEmpty a -> NonEmpty b -> NonEmpty (a, b)

-- | The <a>zipWith</a> function generalizes <a>zip</a>. Rather than
--   tupling the elements, the elements are combined using the function
--   passed as the first argument.
zipWith :: (a -> b -> c) -> NonEmpty a -> NonEmpty b -> NonEmpty c

-- | The <a>unzip</a> function is the inverse of the <a>zip</a> function.
unzip :: Functor f => f (a, b) -> (f a, f b)

-- | The <a>words</a> function breaks a stream of characters into a stream
--   of words, which were delimited by white space.
--   
--   <i>Beware</i>: if the input contains no words (i.e. is entirely
--   whitespace), this will cause an error.
words :: NonEmpty Char -> NonEmpty String

-- | The <a>unwords</a> function is an inverse operation to <a>words</a>.
--   It joins words with separating spaces.
--   
--   <i>Beware</i>: the input <tt>("" :| [])</tt> will cause an error.
unwords :: NonEmpty String -> NonEmpty Char

-- | The <a>lines</a> function breaks a stream of characters into a stream
--   of strings at newline characters. The resulting strings do not contain
--   newlines.
lines :: NonEmpty Char -> NonEmpty String

-- | The <a>unlines</a> function is an inverse operation to <a>lines</a>.
--   It joins lines, after appending a terminating newline to each.
unlines :: NonEmpty String -> NonEmpty Char

-- | Converts a normal list to a <a>NonEmpty</a> stream.
--   
--   Raises an error if given an empty list.
fromList :: [a] -> NonEmpty a

-- | Convert a stream to a normal list efficiently.
toList :: NonEmpty a -> [a]

-- | <a>nonEmpty</a> efficiently turns a normal list into a <a>NonEmpty</a>
--   stream, producing <a>Nothing</a> if the input is empty.
nonEmpty :: [a] -> Maybe (NonEmpty a)
xor :: NonEmpty Bool -> Bool
instance Constructor C1_0NonEmpty
instance Datatype D1NonEmpty
instance Generic1 NonEmpty
instance Generic (NonEmpty a)
instance Data a => Data (NonEmpty a)
instance Read a => Read (NonEmpty a)
instance Show a => Show (NonEmpty a)
instance Ord a => Ord (NonEmpty a)
instance Eq a => Eq (NonEmpty a)
instance Hashable a => Hashable (NonEmpty a)
instance IsList (NonEmpty a)
instance NFData a => NFData (NonEmpty a)
instance MonadFix NonEmpty
instance MonadZip NonEmpty
instance Functor NonEmpty
instance Applicative NonEmpty
instance Monad NonEmpty
instance Traversable NonEmpty
instance Foldable NonEmpty


-- | In mathematics, a semigroup is an algebraic structure consisting of a
--   set together with an associative binary operation. A semigroup
--   generalizes a monoid in that there might not exist an identity
--   element. It also (originally) generalized a group (a monoid with all
--   inverses) to a type where every element did not have to have an
--   inverse, thus the name semigroup.
--   
--   The use of <tt>(&lt;&gt;)</tt> in this module conflicts with an
--   operator with the same name that is being exported by Data.Monoid.
--   However, this package re-exports (most of) the contents of
--   Data.Monoid, so to use semigroups and monoids in the same package just
--   
--   <pre>
--   import Data.Semigroup
--   </pre>
module Data.Semigroup
class Semigroup a where (<>) = mappend sconcat (a :| as) = go a as where go b (c : cs) = b <> go c cs go b [] = b times1p y0 x0 = f x0 (1 + y0) where f x y | even y = f (x <> x) (y `quot` 2) | y == 1 = x | otherwise = g (x <> x) (pred y `quot` 2) x g x y z | even y = g (x <> x) (y `quot` 2) z | y == 1 = x <> z | otherwise = g (x <> x) (pred y `quot` 2) (x <> z)
(<>) :: Semigroup a => a -> a -> a
sconcat :: Semigroup a => NonEmpty a -> a
times1p :: Semigroup a => Natural -> a -> a
newtype Min a
[Min] :: a -> Min a
[getMin] :: Min a -> a
newtype Max a
[Max] :: a -> Max a
[getMax] :: Max a -> a

-- | Use <tt><a>Option</a> (<a>First</a> a)</tt> to get the behavior of
--   <a>First</a> from <tt>Data.Monoid</tt>.
newtype First a
[First] :: a -> First a
[getFirst] :: First a -> a

-- | Use <tt><a>Option</a> (<a>Last</a> a)</tt> to get the behavior of
--   <a>Last</a> from <tt>Data.Monoid</tt>
newtype Last a
[Last] :: a -> Last a
[getLast] :: Last a -> a

-- | Provide a Semigroup for an arbitrary Monoid.
newtype WrappedMonoid m
[WrapMonoid] :: m -> WrappedMonoid m
[unwrapMonoid] :: WrappedMonoid m -> m

-- | Repeat a value <tt>n</tt> times.
--   
--   <pre>
--   timesN n a = a &lt;&gt; a &lt;&gt; ... &lt;&gt; a  -- using &lt;&gt; (n-1) times
--   </pre>
--   
--   Implemented using <a>times1p</a>.
timesN :: Monoid a => Natural -> a -> a

-- | The class of monoids (types with an associative binary operation that
--   has an identity). Instances should satisfy the following laws:
--   
--   <ul>
--   <li><pre>mappend mempty x = x</pre></li>
--   <li><pre>mappend x mempty = x</pre></li>
--   <li><pre>mappend x (mappend y z) = mappend (mappend x y) z</pre></li>
--   <li><pre>mconcat = <a>foldr</a> mappend mempty</pre></li>
--   </ul>
--   
--   The method names refer to the monoid of lists under concatenation, but
--   there are many other instances.
--   
--   Some types can be viewed as a monoid in more than one way, e.g. both
--   addition and multiplication on numbers. In such cases we often define
--   <tt>newtype</tt>s and make those instances of <a>Monoid</a>, e.g.
--   <tt>Sum</tt> and <tt>Product</tt>.
class Monoid a
mempty :: Monoid a => a
mappend :: Monoid a => a -> a -> a
mconcat :: Monoid a => [a] -> a

-- | The dual of a <a>Monoid</a>, obtained by swapping the arguments of
--   <a>mappend</a>.
newtype Dual a :: * -> *
[Dual] :: a -> Dual a
[getDual] :: Dual a -> a

-- | The monoid of endomorphisms under composition.
newtype Endo a :: * -> *
[Endo] :: (a -> a) -> Endo a
[appEndo] :: Endo a -> a -> a

-- | Boolean monoid under conjunction (<a>&amp;&amp;</a>).
newtype All :: *
[All] :: Bool -> All
[getAll] :: All -> Bool

-- | Boolean monoid under disjunction (<a>||</a>).
newtype Any :: *
[Any] :: Bool -> Any
[getAny] :: Any -> Bool

-- | Monoid under addition.
newtype Sum a :: * -> *
[Sum] :: a -> Sum a
[getSum] :: Sum a -> a

-- | Monoid under multiplication.
newtype Product a :: * -> *
[Product] :: a -> Product a
[getProduct] :: Product a -> a

-- | <a>Option</a> is effectively <a>Maybe</a> with a better instance of
--   <a>Monoid</a>, built off of an underlying <a>Semigroup</a> instead of
--   an underlying <a>Monoid</a>.
--   
--   Ideally, this type would not exist at all and we would just fix the
--   <a>Monoid</a> instance of <a>Maybe</a>
newtype Option a
[Option] :: Maybe a -> Option a
[getOption] :: Option a -> Maybe a

-- | Fold an <a>Option</a> case-wise, just like <a>maybe</a>.
option :: b -> (a -> b) -> Option a -> b

-- | This lets you use a difference list of a <a>Semigroup</a> as a
--   <a>Monoid</a>.
diff :: Semigroup m => m -> Endo m

-- | A generalization of <a>cycle</a> to an arbitrary <a>Semigroup</a>. May
--   fail to terminate for some values in some semigroups.
cycle1 :: Semigroup m => m -> m

-- | <a>Arg</a> isn't itself a <a>Semigroup</a> in its own right, but it
--   can be placed inside <a>Min</a> and <a>Max</a> to compute an arg min
--   or arg max.
data Arg a b
[Arg] :: a -> b -> Arg a b
type ArgMin a b = Min (Arg a b)
type ArgMax a b = Max (Arg a b)
instance Selector S1_0_0Option
instance Constructor C1_0Option
instance Datatype D1Option
instance Selector S1_0_0WrappedMonoid
instance Constructor C1_0WrappedMonoid
instance Datatype D1WrappedMonoid
instance Selector S1_0_0Last
instance Constructor C1_0Last
instance Datatype D1Last
instance Selector S1_0_0First
instance Constructor C1_0First
instance Datatype D1First
instance Constructor C1_0Arg
instance Datatype D1Arg
instance Selector S1_0_0Max
instance Constructor C1_0Max
instance Datatype D1Max
instance Selector S1_0_0Min
instance Constructor C1_0Min
instance Datatype D1Min
instance Generic1 Option
instance Generic (Option a)
instance Data a => Data (Option a)
instance Read a => Read (Option a)
instance Show a => Show (Option a)
instance Ord a => Ord (Option a)
instance Eq a => Eq (Option a)
instance Generic1 WrappedMonoid
instance Generic (WrappedMonoid m)
instance Data m => Data (WrappedMonoid m)
instance Read m => Read (WrappedMonoid m)
instance Show m => Show (WrappedMonoid m)
instance Ord m => Ord (WrappedMonoid m)
instance Eq m => Eq (WrappedMonoid m)
instance Generic1 Last
instance Generic (Last a)
instance Data a => Data (Last a)
instance Read a => Read (Last a)
instance Show a => Show (Last a)
instance Ord a => Ord (Last a)
instance Eq a => Eq (Last a)
instance Generic1 First
instance Generic (First a)
instance Data a => Data (First a)
instance Read a => Read (First a)
instance Show a => Show (First a)
instance Ord a => Ord (First a)
instance Eq a => Eq (First a)
instance Generic1 (Arg a)
instance Generic (Arg a b)
instance (Data a, Data b) => Data (Arg a b)
instance (Read a, Read b) => Read (Arg a b)
instance (Show a, Show b) => Show (Arg a b)
instance Generic1 Max
instance Generic (Max a)
instance Data a => Data (Max a)
instance Read a => Read (Max a)
instance Show a => Show (Max a)
instance Ord a => Ord (Max a)
instance Eq a => Eq (Max a)
instance Generic1 Min
instance Generic (Min a)
instance Data a => Data (Min a)
instance Read a => Read (Min a)
instance Show a => Show (Min a)
instance Ord a => Ord (Min a)
instance Eq a => Eq (Min a)
instance Semigroup ()
instance Semigroup b => Semigroup (a -> b)
instance Semigroup [a]
instance Semigroup a => Semigroup (Maybe a)
instance Semigroup (Either a b)
instance (Semigroup a, Semigroup b) => Semigroup (a, b)
instance (Semigroup a, Semigroup b, Semigroup c) => Semigroup (a, b, c)
instance (Semigroup a, Semigroup b, Semigroup c, Semigroup d) => Semigroup (a, b, c, d)
instance (Semigroup a, Semigroup b, Semigroup c, Semigroup d, Semigroup e) => Semigroup (a, b, c, d, e)
instance Semigroup Ordering
instance Semigroup a => Semigroup (Dual a)
instance Semigroup (Endo a)
instance Semigroup All
instance Semigroup Any
instance Num a => Semigroup (Sum a)
instance Num a => Semigroup (Product a)
instance Semigroup a => Semigroup (Const a b)
instance Semigroup (First a)
instance Semigroup (Last a)
instance Semigroup (NonEmpty a)
instance Bounded a => Bounded (Min a)
instance Enum a => Enum (Min a)
instance Hashable a => Hashable (Min a)
instance Ord a => Semigroup (Min a)
instance (Ord a, Bounded a) => Monoid (Min a)
instance Functor Min
instance Foldable Min
instance Traversable Min
instance Applicative Min
instance Monad Min
instance MonadFix Min
instance NFData a => NFData (Min a)
instance Bounded a => Bounded (Max a)
instance Enum a => Enum (Max a)
instance Hashable a => Hashable (Max a)
instance Ord a => Semigroup (Max a)
instance (Ord a, Bounded a) => Monoid (Max a)
instance Functor Max
instance Foldable Max
instance Traversable Max
instance Applicative Max
instance Monad Max
instance MonadFix Max
instance NFData a => NFData (Max a)
instance Functor (Arg a)
instance Foldable (Arg a)
instance Traversable (Arg a)
instance Eq a => Eq (Arg a b)
instance Ord a => Ord (Arg a b)
instance (NFData a, NFData b) => NFData (Arg a b)
instance (Hashable a, Hashable b) => Hashable (Arg a b)
instance Bifunctor Arg
instance Bounded a => Bounded (First a)
instance Enum a => Enum (First a)
instance Hashable a => Hashable (First a)
instance Semigroup (First a)
instance Functor First
instance Foldable First
instance Traversable First
instance Applicative First
instance Monad First
instance MonadFix First
instance NFData a => NFData (First a)
instance Bounded a => Bounded (Last a)
instance Enum a => Enum (Last a)
instance Hashable a => Hashable (Last a)
instance Semigroup (Last a)
instance Functor Last
instance Foldable Last
instance Traversable Last
instance Applicative Last
instance Monad Last
instance MonadFix Last
instance NFData a => NFData (Last a)
instance Semigroup ByteString
instance Semigroup ByteString
instance Semigroup Builder
instance Semigroup ShortByteString
instance Semigroup Text
instance Semigroup Text
instance Semigroup Builder
instance (Hashable k, Eq k) => Semigroup (HashMap k a)
instance (Hashable a, Eq a) => Semigroup (HashSet a)
instance Hashable a => Hashable (WrappedMonoid a)
instance Monoid m => Semigroup (WrappedMonoid m)
instance Monoid m => Monoid (WrappedMonoid m)
instance Bounded a => Bounded (WrappedMonoid a)
instance Enum a => Enum (WrappedMonoid a)
instance NFData m => NFData (WrappedMonoid m)
instance Hashable a => Hashable (Option a)
instance Functor Option
instance Applicative Option
instance Monad Option
instance Alternative Option
instance MonadPlus Option
instance MonadFix Option
instance Foldable Option
instance Traversable Option
instance NFData a => NFData (Option a)
instance Semigroup a => Semigroup (Option a)
instance Semigroup a => Monoid (Option a)
instance Semigroup (Seq a)
instance Semigroup IntSet
instance Ord a => Semigroup (Set a)
instance Semigroup (IntMap v)
instance Ord k => Semigroup (Map k v)


-- | This module provides generic deriving tools for monoids and semigroups
--   for product-like structures.
module Data.Semigroup.Generic
class GSemigroup f

-- | Generically generate a <a>Semigroup</a> (<a>&lt;&gt;</a>) operation
--   for any type implementing <a>Generic</a>. This operation will append
--   two values by point-wise appending their component fields. It is only
--   defined for product types.
--   
--   <pre>
--   <a>gmappend</a> a (<a>gmappend</a> b c) = <a>gmappend</a> (<a>gmappend</a> a b) c
--   </pre>
gmappend :: (Generic a, GSemigroup (Rep a)) => a -> a -> a
class GSemigroup f => GMonoid f

-- | Generically generate a <a>Monoid</a> <a>mempty</a> for any
--   product-like type implementing <a>Generic</a>.
--   
--   It is only defined for product types.
--   
--   <pre>
--   <a>gmappend</a> <a>gmempty</a> a = a = <a>gmappend</a> a <a>gmempty</a>
--   </pre>
gmempty :: (Generic a, GMonoid (Rep a)) => a
instance [safe] GSemigroup U1
instance [safe] GSemigroup V1
instance [safe] Semigroup a => GSemigroup (K1 i a)
instance [safe] GSemigroup f => GSemigroup (M1 i c f)
instance [safe] (GSemigroup f, GSemigroup g) => GSemigroup (f :*: g)
instance [safe] GMonoid U1
instance [safe] (Semigroup a, Monoid a) => GMonoid (K1 i a)
instance [safe] GMonoid f => GMonoid (M1 i c f)
instance [safe] (GMonoid f, GMonoid g) => GMonoid (f :*: g)
