-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Extends safer-file-handles with ByteString operations
--   
--   Extends <tt>safer-file-handles</tt> with <tt>ByteString</tt>
--   operations
@package safer-file-handles-bytestring
@version 0.3.0.1


-- | This module lifts the bytestring IO operations into the region monad.
module Data.ByteString.Lazy.Char8.SaferFileHandles

-- | Wraps: <tt>Data.ByteString.<a>hGetContents</a></tt>.
hGetContents :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGet</a></tt>.
hGet :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> Int -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGetNonBlocking</a></tt>.
hGetNonBlocking :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> Int -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hPut</a></tt>.
hPut :: (FileHandle handle, WriteModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> ByteString -> cr ()


-- | This module lifts the bytestring IO operations into the region monad.
module Data.ByteString.Lazy.SaferFileHandles

-- | Wraps: <tt>Data.ByteString.<a>hGetContents</a></tt>.
hGetContents :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGet</a></tt>.
hGet :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> Int -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGetNonBlocking</a></tt>.
hGetNonBlocking :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> Int -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hPut</a></tt>.
hPut :: (FileHandle handle, WriteModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> ByteString -> cr ()

-- | Wraps: <tt>Data.ByteString.<a>hPutStr</a></tt>.
hPutStr :: (FileHandle handle, WriteModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> ByteString -> cr ()


-- | This module lifts the bytestring IO operations into the region monad.
module Data.ByteString.Char8.SaferFileHandles

-- | Wraps: <tt>Data.ByteString.<a>hGetLine</a></tt>.
hGetLine :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGetContents</a></tt>.
hGetContents :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGet</a></tt>.
hGet :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> Int -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGetNonBlocking</a></tt>.
hGetNonBlocking :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> Int -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hPut</a></tt>.
hPut :: (FileHandle handle, WriteModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> ByteString -> cr ()

-- | Wraps: <tt>Data.ByteString.<a>hPutStr</a></tt>.
hPutStr :: (FileHandle handle, WriteModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> ByteString -> cr ()

-- | Wraps: <tt>Data.ByteString.<a>hPutStrLn</a></tt>.
hPutStrLn :: (FileHandle handle, WriteModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> ByteString -> cr ()


-- | This module lifts the bytestring IO operations into the region monad.
module Data.ByteString.SaferFileHandles

-- | Wraps: <tt>Data.ByteString.<a>hGetLine</a></tt>.
hGetLine :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGetContents</a></tt>.
hGetContents :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGet</a></tt>.
hGet :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> Int -> cr ByteString

-- | Wraps <tt>Data.ByteString.</tt><a>hGetSome</a>.
hGetSome :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> Int -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hGetNonBlocking</a></tt>.
hGetNonBlocking :: (FileHandle handle, ReadModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> Int -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hPut</a></tt>.
hPut :: (FileHandle handle, WriteModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> ByteString -> cr ()

-- | Wraps <tt>Data.ByteString.</tt><a>hPutNonBlocking</a>.
hPutNonBlocking :: (FileHandle handle, WriteModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> ByteString -> cr ByteString

-- | Wraps: <tt>Data.ByteString.<a>hPutStr</a></tt>.
hPutStr :: (FileHandle handle, WriteModes ioMode, AncestorRegion pr cr, MonadIO cr) => handle ioMode pr -> ByteString -> cr ()
