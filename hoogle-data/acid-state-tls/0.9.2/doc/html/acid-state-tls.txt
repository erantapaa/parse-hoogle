-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Add TLS support for Data.Acid.Remote
--   
--   Adds TLS support for connections to remote AcidState databases
@package acid-state-tls
@version 0.9.2


-- | This module provides the same functionality as <a>Data.Acid.Remote</a>
--   but over a secured TLS socket.
module Data.Acid.Remote.TLS

-- | Accept connections on <tt>port</tt> and handle requests using the
--   given <a>AcidState</a>. This call doesn't return.
--   
--   The connection is secured using TLS/SSL.
--   
--   On UnixÂ®-like systems you can use<a>UnixSocket</a> to communicate
--   using a socket file. To control access, you can set the permissions of
--   the parent directory which contains the socket file.
--   
--   see also: <a>openRemoteStateTLS</a> and <a>sharedSecretCheck</a>.
acidServerTLS :: SafeCopy st => FilePath -> FilePath -> (CommChannel -> IO Bool) -> PortID -> AcidState st -> IO ()

-- | Connect to an acid-state server which is sharing an <a>AcidState</a>.
--   
--   The connection is secured using SSL/TLS.
openRemoteStateTLS :: IsAcidic st => (CommChannel -> IO ()) -> HostName -> PortID -> IO (AcidState st)

-- | skip server-side authentication checking entirely.
skipAuthenticationCheck :: CommChannel -> IO Bool

-- | skip client-side authentication entirely.
skipAuthenticationPerform :: CommChannel -> IO ()

-- | check that the client knows a shared secret.
--   
--   The function takes a <a>Set</a> of shared secrets. If a client knows
--   any of them, it is considered to be trusted.
--   
--   The shared secret is any <tt>ByteString</tt> of your choice.
--   
--   If you give each client a different shared secret then you can revoke
--   access individually.
--   
--   see also: <a>sharedSecretPerform</a>
sharedSecretCheck :: Set ByteString -> CommChannel -> IO Bool

-- | attempt to authenticate with the server using a shared secret.
sharedSecretPerform :: ByteString -> CommChannel -> IO ()
