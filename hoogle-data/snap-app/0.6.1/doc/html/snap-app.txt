-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple modules for writing apps with Snap, abstracted from hpaste.
--   
--   Simple modules for writing apps with Snap, abstracted from hpaste.
@package snap-app
@version 0.6.1


-- | Useful operator (++) = mappend.
module Data.Monoid.Operator
(++) :: Monoid a => a -> a -> a

module Network.URI.Params
updateUrlParam :: String -> String -> URI -> URI
clearUrlQueries :: URI -> URI
deleteQueryKey :: String -> URI -> URI
editQuery :: ([(String, String)] -> [(String, String)]) -> String -> String
formEncodeUrl :: [(String, String)] -> [Char]
updateUrlParams :: [(String, String)] -> URI -> URI
uriParams :: URI -> [(String, String)]

module Text.Blaze.Extra
(!.) :: Attributable h => h -> AttributeValue -> h
(!#) :: Attributable h => h -> AttributeValue -> h
linesToHtml :: String -> Html
htmlIntercalate :: Html -> [Html] -> Html
htmlCommasAnd :: [Html] -> Html
htmlCommas :: [Html] -> Html
hrefSet :: URI -> String -> String -> Attribute
hrefURI :: URI -> Attribute
hrefURIWithHash :: URI -> String -> Attribute
hrefAssoc :: String -> [(String, String)] -> Attribute
instance ToValue URI


-- | Data pagination.
module Data.Pagination

-- | A pagination object, holds information about the name, total, per
--   page, current page, etc.
data Pagination
Pagination :: Integer -> Integer -> String -> Integer -> Bool -> Pagination
pnTotal :: Pagination -> Integer
pnPerPage :: Pagination -> Integer
pnName :: Pagination -> String
pnCurrentPage :: Pagination -> Integer
pnShowDesc :: Pagination -> Bool

-- | Get the page count of the pagination results.
pnPageCount :: Pagination -> Integer

-- | Add the current page of the pagination from the current URI.
addCurrentPNData :: URI -> Pagination -> Pagination
instance Show Pagination
instance Default Pagination


-- | Simple pagination support for blaze.
module Text.Blaze.Pagination

-- | Render pagination as html.
pagination :: PN -> Html
data PN
PN :: URI -> Pagination -> Maybe [Integer] -> PN
pnURI :: PN -> URI
pnPn :: PN -> Pagination
pnResultsPerPage :: PN -> Maybe [Integer]


-- | Abstraction of environment functions (could be state, could be reader,
--   whatever). Intended to ease migration from Reader/State.
module Control.Monad.Env
env :: MonadReader env m => (env -> val) -> m val


-- | Model-view-controller app types.
module Snap.App.Types

-- | The controller monad.
newtype Controller config state a
Controller :: ReaderT (ControllerState config state) Snap a -> Controller config state a
runController :: Controller config state a -> ReaderT (ControllerState config state) Snap a

-- | The model monad (limited access to IO, only DB access).
newtype Model config state a
Model :: ReaderT (ModelState config state) IO a -> Model config state a
runModel :: Model config state a -> ReaderT (ModelState config state) IO a

-- | The state accessible to the controller (DB/session stuff).
data ControllerState config state
ControllerState :: config -> Connection -> state -> ControllerState config state
controllerStateConfig :: ControllerState config state -> config
controllerStateConn :: ControllerState config state -> Connection
controllerState :: ControllerState config state -> state

-- | The state accessible to the model (just DB connection).
data ModelState config state
ModelState :: Connection -> state -> config -> ModelState config state
modelStateConn :: ModelState config state -> Connection
modelStateAnns :: ModelState config state -> state
modelStateConfig :: ModelState config state -> config
class AppConfig config
getConfigDomain :: AppConfig config => config -> String
class AppLiftModel c s
liftModel :: AppLiftModel c s => Model c s a -> Controller c s a
instance Monad (Controller config state)
instance Functor (Controller config state)
instance Applicative (Controller config state)
instance Alternative (Controller config state)
instance MonadReader (ControllerState config state) (Controller config state)
instance MonadSnap (Controller config state)
instance MonadIO (Controller config state)
instance MonadPlus (Controller config state)
instance MonadCatchIO (Controller config state)
instance Monad (Model config state)
instance Functor (Model config state)
instance Applicative (Model config state)
instance MonadReader (ModelState config state) (Model config state)
instance MonadIO (Model config state)


-- | Model running.
module Snap.App.Model

-- | Run a model action from within a controller.
model :: AppLiftModel c s => Model c s a -> Controller c s a

-- | Run a model action at the top-level.
runDB :: s -> c -> Pool -> Model c s () -> IO ()

-- | Query with some parameters.
query :: (ToRow ps, FromRow r) => [String] -> ps -> Model c s [r]

-- | Query a single field from a single result.
single :: (ToRow ps, FromRow (Only r)) => [String] -> ps -> Model c s (Maybe r)

-- | Query a single field from a single result (no params).
singleNoParams :: FromRow (Only r) => [String] -> Model c s (Maybe r)

-- | Query with no parameters.
queryNoParams :: FromRow r => [String] -> Model c s [r]

-- | Use the connection pool.
withPoolConnection :: (MonadCatchIO m, MonadIO m) => Pool -> (Connection -> m a) -> m ()

-- | Execute some SQL returning the rows affected.
exec :: ToRow ps => [String] -> ps -> Model c s Int64

-- | A single-value "collection".
--   
--   This is useful if you need to supply a single parameter to a SQL
--   query, or extract a single column from a SQL result.
--   
--   Parameter example:
--   
--   <pre>
--   query c "select x from scores where x &gt; ?" (<a>Only</a> (42::Int))
--   </pre>
--   
--   Result example:
--   
--   <pre>
--   xs &lt;- query_ c "select id from users"
--   forM_ xs $ \(<a>Only</a> id) -&gt; {- ... -}
--   </pre>
newtype Only a :: * -> *
Only :: a -> Only a
fromOnly :: Only a -> a

-- | Create a new connection pool.
newPool :: MonadIO m => ConnectInfo -> m Pool
data Pool


-- | Controller routing/handling.
module Snap.App.Controller

-- | Run a controller handler.
runHandler :: s -> c -> Pool -> Controller c s () -> Snap ()

-- | Strictly renders HTML to Text before outputting it via Snap. This
--   ensures that any lazy exceptions are caught by the Snap handler.
output :: Markup -> Controller c s ()

-- | Strictly renders text before outputting it via Snap. This ensures that
--   any lazy exceptions are caught by the Snap handler.
outputText :: Text -> Controller c s ()

-- | Generic redirect to home page.
goHome :: Controller c s ()

-- | Extract a Just value or go home.
justOrGoHome :: Maybe a -> (a -> Controller c s ()) -> Controller c s ()

-- | Get integer parmater.
getInteger :: ByteString -> Integer -> Controller c s Integer

-- | Get string.
getString :: ByteString -> String -> Controller c s String

-- | Get string (maybe).
getStringMaybe :: ByteString -> Controller c s (Maybe String)

-- | Get pagination data.
getPagination :: AppConfig c => String -> Controller c s PN
getMyURI :: AppConfig c => Controller c s URI

module Snap.App


-- | Caching of Blaze HTML pages caching.
module Snap.App.Cache

-- | Generate and save into the cache, or retrieve existing from the |
--   cache.
cache :: (CacheDir c, Key key) => key -> Controller c s (Maybe Markup) -> Controller c s (Maybe Text)

-- | Cache conditionally.
cacheIf :: (CacheDir c, Key key) => Bool -> key -> Controller c s (Maybe Markup) -> Controller c s (Maybe Text)

-- | Reset an item in the cache.
resetCache :: (CacheDir c, Key key) => key -> Controller c s ()

-- | Clear the whole cache.
clearCache :: CacheDir c => c -> IO ()

-- | Reset an item in the cache.
resetCacheModel :: (CacheDir c, Key key) => key -> Model c s ()

-- | View some HTML generator cached.
viewCached :: (CacheDir c, Key key) => key -> Controller c s Markup -> Controller c s ()

-- | A key for the cache.
class Key key
keyToString :: Key key => key -> FilePath

-- | A config that can return a cache directory.
class CacheDir config
getCacheDir :: CacheDir config => config -> FilePath

module Snap.App.XML

-- | Output the given XML element.
outputXML :: Element -> Controller c s ()


-- | Output RSS feeds.
module Snap.App.RSS

-- | Output the given XML element.
outputRSS :: String -> String -> [(UTCTime, Text, Text, Text)] -> Controller c s ()

-- | Make a simple RSS feed.
makeFeed :: String -> String -> [(UTCTime, Text, Text, Text)] -> Element


-- | Migration library
module Snap.App.Migrate

-- | Migrate the DB to the latest version.
migrate :: Bool -> [(Int, Model c s Int64)] -> Model c s ()

-- | Set the current database version.
setVersion :: Int -> Model c s ()

-- | Ensure the version table exists.
ensureExists :: Model c s ()

-- | Create the version number.
createVersion :: Model c s ()

-- | Just print to stdout for now.
echo :: String -> Model c s ()
