-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Concurrent iteratees using STM
--   
--   Enumerators and iteratees which read from/write to STM channels. This
--   allows for processes with dedicated IO threads.
@package iteratee-stm
@version 0.1.2

module Data.Iteratee.STM

-- | An iteratee which writes all its data to a TBMChan.
--   
--   The iteratee moves to a complete state when the channel is closed.
iterChan :: (Nullable s, MonadIO m) => TBMChan s -> Iteratee s m ()

-- | Enumerate over data provided by a TBMChan.
enumChan :: (NullPoint s, MonadIO m) => TBMChan s -> Enumerator s m a

-- | Close a channel.
iterCloseChan :: (Nullable s, MonadIO m) => TBMChan s -> Iteratee s m ()

-- | An enumerator which closes the provided channel and sends EOF to the
--   iteratee.
enumCloseChan :: MonadIO m => TBMChan s -> Enumerator s m a

-- | Fork an iteratee to run in a separate thread, with a <tt>sz</tt> upper
--   bound on the channel size.
--   
--   The current thread will wait for the forked thread to finish before
--   returning.
forkIter :: (Nullable s, NullPoint s, MonadIO m) => Int -> Iteratee s IO () -> Iteratee s m ()

-- | Fork an enumerator to run in a separate thread, with a <tt>sz</tt>
--   upper bound on the channel size.
--   
--   The current thread will wait for the forked thread to terminate
forkEnum :: (MonadIO m, Nullable s, NullPoint s) => Int -> Enumerator s IO () -> Enumerator s m a
