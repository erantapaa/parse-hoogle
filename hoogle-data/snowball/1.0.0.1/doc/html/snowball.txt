-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to the Snowball library.
--   
--   The Snowball library is used to compute the stems of words in natural
--   languages.
--   
--   Compared to the older <a>stemmer</a> package, this one:
--   
--   <ul>
--   <li>Correctly handles unicode without relying on the system
--   locale</li>
--   <li>Takes greater care to avoid memory leaks and to be thread
--   safe</li>
--   <li>Uses Text rather than String</li>
--   <li>Gets rid of the need for <tt>stemWords</tt> by using rewrite rules
--   to make <tt>map stem</tt> efficient</li>
--   <li>Includes a more recent release of Snowball</li>
--   <li>Attempts to comply with the Snowball licensing terms</li>
--   <li>Supports <tt>SafeHaskell</tt> when available and is otherwise
--   <tt>Haskell2010</tt></li>
--   <li>Comes with a test suite</li>
--   </ul>
--   
--   However, although this code is written from scratch, it is heavily
--   modeled after the code of the "stemmer" package.
@package snowball
@version 1.0.0.1


-- | Bindings to the Snowball library.
module NLP.Snowball

-- | Snowball algorithm used for stemming words.
data Algorithm
Danish :: Algorithm
Dutch :: Algorithm
English :: Algorithm
Finnish :: Algorithm
French :: Algorithm
German :: Algorithm
Hungarian :: Algorithm
Italian :: Algorithm
Norwegian :: Algorithm
Portuguese :: Algorithm
Romanian :: Algorithm
Russian :: Algorithm
Spanish :: Algorithm
Swedish :: Algorithm
Turkish :: Algorithm

-- | Use <a>English</a> instead.
Porter :: Algorithm

-- | Compute the stem of a word using the specified algorithm.
--   
--   <pre>
--   &gt;&gt;&gt; stem English "fantastically"
--   "fantast"
--   </pre>
stem :: Algorithm -> Text -> Text

-- | Compute the stems of several words in one go. This can be more
--   efficient than <tt><a>map</a> <a>stem</a></tt> because it uses a
--   single <a>Stemmer</a> instance, however the <tt>map</tt> version is
--   rewritten to use this function with a rewrite rule. You can still use
--   this function though if you want to make sure it is used or if you
--   find it more convenient.
stems :: Algorithm -> [Text] -> [Text]

-- | A thread and memory safe Snowball stemmer instance.
data Stemmer

-- | Create a new reusable <a>Stemmer</a> instance.
newStemmer :: Algorithm -> IO Stemmer

-- | Use a <a>Stemmer</a> to stem a word. This can be used more efficiently
--   than <a>stem</a> because you can keep a stemmer around and reuse it,
--   but it requires <a>IO</a> to ensure thread safety.
stemWith :: Stemmer -> Text -> IO Text

-- | Use a <a>Stemmer</a> to stem multiple words in one go. This can be
--   more efficient than <tt><a>mapM</a> <a>stemWith</a></tt> because the
--   <a>Stemmer</a> is only locked once.
stemsWith :: Stemmer -> [Text] -> IO [Text]
