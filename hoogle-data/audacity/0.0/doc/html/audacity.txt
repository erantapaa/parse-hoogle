-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Interchange with the Audacity sound signal editor
--   
@package audacity
@version 0.0

module Sound.Audacity.LabelTrack
newtype T time label
Cons :: [Interval time label] -> T time label
decons :: T time label -> [Interval time label]
type Interval time label = ((time, time), label)
empty :: T time label
singleton :: (time, time) -> label -> T time label
fromAdjacentChunks :: Num time => [(time, label)] -> T time label
lift :: ([Interval time0 label0] -> [Interval time1 label1]) -> T time0 label0 -> T time1 label1
lift2 :: ([Interval time0 label0] -> [Interval time1 label1] -> [Interval time2 label2]) -> T time0 label0 -> T time1 label1 -> T time2 label2

-- | Format the times using a comma, which is certainly only correct in
--   German locale.
formatTime :: RealFrac time => time -> String

-- | You must make sure, that the time mapping function preserves the
--   order. This is not checked.
mapTime :: (time0 -> time1) -> T time0 label -> T time1 label
realTimes :: Fractional time => time -> T Int String -> T time String
writeFile :: RealFrac time => FilePath -> T time String -> IO ()
writeFileInt :: RealFrac time => time -> FilePath -> T Int String -> IO ()
parseTime :: Fractional time => String -> Maybe time

-- | Read label file in a strict way.
readFile :: Fractional time => FilePath -> IO (T time String)
instance (NFData time, NFData label) => NFData (T time label)
instance Monoid (T time label)
instance Traversable (T time)
instance Foldable (T time)
instance Functor (T time)
