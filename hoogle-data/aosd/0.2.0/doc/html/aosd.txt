-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings to libaosd, a library for Cairo-based on-screen displays
--   
--   <a>http://www.atheme.org/project/libaosd</a>
--   
--   <pre>
--   An advanced on screen display (OSD) library, which uses Cairo to create high quality rendered graphics to be overlaid on top of the screen.
--   </pre>
--   
--   Distro packages providing <i>libaosd</i>:
--   
--   <ul>
--   <li><i>Debian</i>: <tt>libaosd2</tt></li>
--   </ul>
--   
--   Example:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   import <a>Graphics.Aosd.Pango</a>
--   
--   markup = pSized 50 (pUnlines [pItalic "AOSD","Example"])
--   
--   main = do
--       withAosd
--           defaultOpts
--           (textRenderer markup) { alignment = Just AlignCenter, colour = orange }
--           (a -&gt; aosdFlash a (symDurations 3000 3000))
--   </pre>
--   
--   Tested with <i>libaosd</i> version 0.2.7.
@package aosd
@version 0.2.0


-- | Raw bindings.
--   
--   Note: The <a>Cairo</a> type (C <tt>cairo_t*</tt>) is from
--   <a>Graphics.Rendering.Cairo.Types</a>, whose haddock is (as of
--   writing) hidden
module Graphics.Aosd.AOSD_H
data C'Aosd
C'Aosd :: C'Aosd
type C'AosdCoordinate = CUInt
c'COORDINATE_MINIMUM :: Num a => a
c'COORDINATE_CENTER :: Num a => a
c'COORDINATE_MAXIMUM :: Num a => a
data C'AosdMouseEvent
C'AosdMouseEvent :: CInt -> CInt -> CInt -> CInt -> CUInt -> CULong -> C'AosdMouseEvent
c'AosdMouseEvent'x :: C'AosdMouseEvent -> CInt
c'AosdMouseEvent'y :: C'AosdMouseEvent -> CInt
c'AosdMouseEvent'x_root :: C'AosdMouseEvent -> CInt
c'AosdMouseEvent'y_root :: C'AosdMouseEvent -> CInt
c'AosdMouseEvent'button :: C'AosdMouseEvent -> CUInt
c'AosdMouseEvent'time :: C'AosdMouseEvent -> CULong
type C'AosdRenderer = FunPtr (Cairo -> Ptr () -> IO ())
type C'AosdMouseEventCb = FunPtr (Ptr C'AosdMouseEvent -> Ptr () -> IO ())
mk'AosdRenderer :: (Cairo -> Ptr () -> IO ()) -> IO C'AosdRenderer
mk'AosdMouseEventCb :: (Ptr C'AosdMouseEvent -> Ptr () -> IO ()) -> IO C'AosdMouseEventCb
type C'AosdTransparency = CUInt
mK'AosdRenderer :: C'AosdRenderer -> (Cairo -> Ptr () -> IO ())
mK'AosdMouseEventCb :: C'AosdMouseEventCb -> (Ptr C'AosdMouseEvent -> Ptr () -> IO ())
c'TRANSPARENCY_NONE :: Num a => a
c'TRANSPARENCY_FAKE :: Num a => a
c'TRANSPARENCY_COMPOSITE :: Num a => a
p'AosdMouseEvent'x :: Ptr (C'AosdMouseEvent) -> Ptr (CInt)
p'AosdMouseEvent'y :: Ptr (C'AosdMouseEvent) -> Ptr (CInt)
p'AosdMouseEvent'x_root :: Ptr (C'AosdMouseEvent) -> Ptr (CInt)
data C'XClassHint
C'XClassHint :: CString -> CString -> C'XClassHint
c'XClassHint'res_name :: C'XClassHint -> CString
c'XClassHint'res_class :: C'XClassHint -> CString
p'AosdMouseEvent'y_root :: Ptr (C'AosdMouseEvent) -> Ptr (CInt)
c'aosd_new :: IO (Ptr C'Aosd)
c'aosd_destroy :: Ptr C'Aosd -> IO ()
p'AosdMouseEvent'button :: Ptr (C'AosdMouseEvent) -> Ptr (CUInt)
p'aosd_new :: FunPtr (IO (Ptr C'Aosd))
p'XClassHint'res_name :: Ptr (C'XClassHint) -> Ptr (CString)
p'aosd_destroy :: FunPtr (Ptr C'Aosd -> IO ())
p'AosdMouseEvent'time :: Ptr (C'AosdMouseEvent) -> Ptr (CULong)
p'XClassHint'res_class :: Ptr (C'XClassHint) -> Ptr (CString)
c'aosd_set_name :: Ptr C'Aosd -> Ptr C'XClassHint -> IO ()
c'aosd_set_names :: Ptr C'Aosd -> CString -> CString -> IO ()
c'aosd_set_transparency :: Ptr C'Aosd -> C'AosdTransparency -> IO ()
p'aosd_set_name :: FunPtr (Ptr C'Aosd -> Ptr C'XClassHint -> IO ())
p'aosd_set_names :: FunPtr (Ptr C'Aosd -> CString -> CString -> IO ())
c'aosd_set_geometry :: Ptr C'Aosd -> CInt -> CInt -> CInt -> CInt -> IO ()
c'aosd_set_position :: Ptr C'Aosd -> CUInt -> CInt -> CInt -> IO ()
p'aosd_set_transparency :: FunPtr (Ptr C'Aosd -> C'AosdTransparency -> IO ())
c'aosd_set_position_offset :: Ptr C'Aosd -> CInt -> CInt -> IO ()
p'aosd_set_geometry :: FunPtr (Ptr C'Aosd -> CInt -> CInt -> CInt -> CInt -> IO ())
p'aosd_set_position :: FunPtr (Ptr C'Aosd -> CUInt -> CInt -> CInt -> IO ())
c'aosd_set_position_with_offset :: Ptr C'Aosd -> C'AosdCoordinate -> C'AosdCoordinate -> CInt -> CInt -> CInt -> CInt -> IO ()
p'aosd_set_position_offset :: FunPtr (Ptr C'Aosd -> CInt -> CInt -> IO ())
c'aosd_set_renderer :: Ptr C'Aosd -> C'AosdRenderer -> Ptr () -> IO ()
c'aosd_set_mouse_event_cb :: Ptr C'Aosd -> C'AosdMouseEventCb -> Ptr () -> IO ()
p'aosd_set_position_with_offset :: FunPtr (Ptr C'Aosd -> C'AosdCoordinate -> C'AosdCoordinate -> CInt -> CInt -> CInt -> CInt -> IO ())
c'aosd_set_hide_upon_mouse_event :: Ptr C'Aosd -> CInt -> IO ()
p'aosd_set_renderer :: FunPtr (Ptr C'Aosd -> C'AosdRenderer -> Ptr () -> IO ())
p'aosd_set_mouse_event_cb :: FunPtr (Ptr C'Aosd -> C'AosdMouseEventCb -> Ptr () -> IO ())
p'aosd_set_hide_upon_mouse_event :: FunPtr (Ptr C'Aosd -> CInt -> IO ())
c'aosd_render :: Ptr C'Aosd -> IO ()
c'aosd_show :: Ptr C'Aosd -> IO ()
c'aosd_hide :: Ptr C'Aosd -> IO ()
p'aosd_render :: FunPtr (Ptr C'Aosd -> IO ())
p'aosd_show :: FunPtr (Ptr C'Aosd -> IO ())
p'aosd_hide :: FunPtr (Ptr C'Aosd -> IO ())
c'aosd_loop_once :: Ptr C'Aosd -> IO ()
c'aosd_loop_for :: Ptr C'Aosd -> CUInt -> IO ()
p'aosd_loop_once :: FunPtr (Ptr C'Aosd -> IO ())
p'aosd_loop_for :: FunPtr (Ptr C'Aosd -> CUInt -> IO ())
c'aosd_flash :: Ptr C'Aosd -> CUInt -> CUInt -> CUInt -> IO ()
p'aosd_flash :: FunPtr (Ptr C'Aosd -> CUInt -> CUInt -> CUInt -> IO ())
instance Eq C'AosdMouseEvent
instance Show C'AosdMouseEvent
instance Eq C'XClassHint
instance Show C'XClassHint
instance Storable C'XClassHint
instance Storable C'AosdMouseEvent


-- | For a higher-level API for textual OSDs using <i>Pango</i>, use
--   <a>Graphics.Aosd.Pango</a>.
module Graphics.Aosd
class AosdRenderer a
toGeneralRenderer :: AosdRenderer a => a -> IO GeneralRenderer
data GeneralRenderer
GeneralRenderer :: Render () -> Rectangle -> Rectangle -> GeneralRenderer
grRender :: GeneralRenderer -> Render ()

-- | Part of the surface that the renderer actually draws on (determines
--   the window size).
grInkExtent :: GeneralRenderer -> Rectangle

-- | Part of the surface whose...
--   
--   <ul>
--   <li>... left edge is aligned to the left edge of the screen, if
--   <tt>xPos</tt> is <tt>Min</tt></li>
--   <li>... center is aligned to the center of the screen, if
--   <tt>xPos</tt> is <tt>Center</tt></li>
--   <li>... right edge is aligned to the right edge of the screen, if
--   <tt>xPos</tt> is <tt>Max</tt></li>
--   </ul>
--   
--   (Likewise for the <i>y</i> axis)
grPositioningExtent :: GeneralRenderer -> Rectangle
data AosdOptions
AosdOptions :: Maybe XClassHint -> Maybe Transparency -> Position -> Position -> (CInt, CInt) -> Maybe Bool -> Maybe (AosdPtr -> C'AosdMouseEvent -> IO ()) -> AosdOptions

-- | <a>Nothing</a> = use <i>libaosd</i> default.
classHint :: AosdOptions -> Maybe XClassHint

-- | <a>Nothing</a> = use <i>libaosd</i> default.
transparency :: AosdOptions -> Maybe Transparency
xPos :: AosdOptions -> Position
yPos :: AosdOptions -> Position

-- | Positive values denote a rightwards respectively downwards offset (in
--   pixels).
offset :: AosdOptions -> (CInt, CInt)

-- | <a>Nothing</a> = use <i>libaosd</i> default.
hideUponMouseEvent :: AosdOptions -> Maybe Bool

-- | Mouse-click event handler.
mouseEventCB :: AosdOptions -> Maybe (AosdPtr -> C'AosdMouseEvent -> IO ())
data Transparency
None :: Transparency
Fake :: Transparency
Composite :: Transparency
data Position

-- | Left/top
Min :: Position
Center :: Position

-- | Right/bottom
Max :: Position
data XClassHint
XClassHint :: String -> String -> XClassHint
resName :: XClassHint -> String
resClass :: XClassHint -> String

-- | Non-<a>Nothing</a> defaults:
--   
--   <ul>
--   <li>transparency = Just Composite,</li>
--   <li>xPos = Center,</li>
--   <li>yPos = Center,</li>
--   <li>offset = (0,0),</li>
--   <li>hideUponMouseEvent = Just True</li>
--   </ul>
defaultOpts :: AosdOptions
data AosdPtr
aosdNew :: AosdRenderer renderer => AosdOptions -> renderer -> IO AosdPtr
aosdDestroy :: AosdPtr -> IO ()

-- | 'aosdNew'/'aosdDestroy' bracket. Leaking the <a>AosdPtr</a> out of the
--   third argument leads to undefined behaviour.
withAosd :: AosdRenderer renderer => AosdOptions -> renderer -> (AosdPtr -> IO c) -> IO c

-- | Main high-level displayer. Blocks.
aosdFlash :: AosdPtr -> FlashDurations -> IO ()
data FlashDurations
FlashDurations :: CUInt -> CUInt -> CUInt -> FlashDurations

-- | Fade-in time in milliseconds
inMillis :: FlashDurations -> CUInt

-- | Full display time in milliseconds
fullMillis :: FlashDurations -> CUInt

-- | Fade-out time in milliseconds
outMillis :: FlashDurations -> CUInt

-- | Construct a <a>FlashDurations</a> with equal <a>inMillis</a> and
--   <a>outMillis</a>.
symDurations :: CUInt -> CUInt -> FlashDurations
reconfigure :: AosdRenderer renderer => AosdOptions -> renderer -> AosdPtr -> IO ()
aosdRender :: AosdPtr -> IO ()
aosdShow :: AosdPtr -> IO ()
aosdHide :: AosdPtr -> IO ()
aosdLoopOnce :: AosdPtr -> IO ()
aosdLoopFor :: AosdPtr -> CUInt -> IO ()
debugRenderer :: GeneralRenderer

-- | Rectangle
--   
--   <ul>
--   <li>Specifies x, y, width and height</li>
--   </ul>
data Rectangle :: *
Rectangle :: Int -> Int -> Int -> Int -> Rectangle

-- | Haskell type representing the C <tt>int</tt> type.
data CInt :: *

-- | Haskell type representing the C <tt>unsigned int</tt> type.
data CUInt :: *

module Graphics.Aosd.Pango
data TextRenderer
TextRenderer :: Colour Double -> Double -> Maybe Width -> Maybe LayoutWrapMode -> Maybe Bool -> Maybe LayoutAlignment -> Maybe Double -> Maybe [TabPosition] -> Maybe Bool -> PangoText -> TextRenderer

-- | Hint: Use <a>sRGB</a> or <a>Data.Colour.Names</a>.
colour :: TextRenderer -> Colour Double

-- | 0: Transparent, 1: Opaque.
opacity :: TextRenderer -> Double

-- | Uses <a>layoutSetWidth</a> if set.
width :: TextRenderer -> Maybe Width

-- | Uses <a>layoutSetWrap</a> if set.
wrapMode :: TextRenderer -> Maybe LayoutWrapMode

-- | Uses <a>layoutSetJustify</a> if set.
justify :: TextRenderer -> Maybe Bool

-- | Uses <a>layoutSetAlignment</a> if set.
alignment :: TextRenderer -> Maybe LayoutAlignment

-- | Uses <a>layoutSetSpacing</a> if set.
lineSpacing :: TextRenderer -> Maybe Double

-- | Uses <a>layoutSetTabs</a> if set.
tabs :: TextRenderer -> Maybe [TabPosition]

-- | Uses <a>layoutSetSingleParagraphMode</a> if set.
singleParagraphMode :: TextRenderer -> Maybe Bool

-- | The actual text
tcText :: TextRenderer -> PangoText
data Width

-- | The layout will be as wide as necessary to hold all the lines without
--   wrapping
Unlimited :: Width

-- | The layout will be wrapped (according to <a>wrapMode</a>) to the given
--   width in Pango units
Width :: Double -> Width

-- | Construct a <tt>TextConf</tt> with most fields set to <a>Nothing</a>
textRenderer :: PangoText -> TextRenderer

-- | Plain text or some Pango markup. Suggestion: Use {-# LANGUAGE
--   OverloadedStrings #-}.
data PangoText

-- | Plain text.
pText :: String -> PangoText

-- | Raw Pango markup, see
--   <a>http://developer.gnome.org/pango/stable/PangoMarkupFormat.html</a>.
pRaw :: String -> PangoText
pEmpty :: PangoText
pTag :: String -> PangoText -> PangoText
pSpan :: [SpanAttribute] -> PangoText -> PangoText
pBold :: PangoText -> PangoText
pBig :: PangoText -> PangoText
pItalic :: PangoText -> PangoText
pStrikethrough :: PangoText -> PangoText
pSmall :: PangoText -> PangoText

-- | Subscript
pSub :: PangoText -> PangoText

-- | Superscript
pSup :: PangoText -> PangoText

-- | Underline
pUnderline :: PangoText -> PangoText

-- | Monospace font
pMono :: PangoText -> PangoText

-- | Set font size in points
pSized :: Double -> PangoText -> PangoText
pIntercalate :: PangoText -> [PangoText] -> PangoText
pUnlines :: [PangoText] -> PangoText
pUnwords :: [PangoText] -> PangoText
pShow :: Show a => a -> PangoText

-- | These are all the attributes the <a>markSpan</a> function can express.
data SpanAttribute :: *

-- | Choose a font by textual description.
--   
--   <ul>
--   <li>Takes a string to completely describe the font, example:
--   <tt>FontDescr</tt> "Sans Italic 12"</li>
--   </ul>
FontDescr :: String -> SpanAttribute

-- | Specify the family of font to use.
--   
--   <ul>
--   <li>Example: <tt>FontFamily</tt> "Sans"</li>
--   </ul>
FontFamily :: String -> SpanAttribute

-- | Change the size of the current font.
--   
--   <ul>
--   <li>The constuctor takes the size in points (pt) or a predefined
--   sizes. Setting the absolute size 12.5pt can be achieved by passing
--   <a>FontSize</a> (<tt>SizePoint</tt> 12.5) to <a>markSpan</a>. Next to
--   predefined absolute sizes such as <a>SizeSmall</a> the size can be
--   changed by asking for the next larger or smaller front with
--   <a>SizeLarger</a> and <a>SizeSmaller</a>, respectively.</li>
--   </ul>
FontSize :: Size -> SpanAttribute

-- | Change the slant of the current font.
FontStyle :: FontStyle -> SpanAttribute

-- | Change the thickness of the current font.
--   
--   <ul>
--   <li>The constructor takes one of the six predefined weights. Most
--   likely to be supported: <a>WeightBold</a>.</li>
--   </ul>
FontWeight :: Weight -> SpanAttribute

-- | Choosing an alternative rendering for lower case letters.
--   
--   <ul>
--   <li>The argument <a>VariantSmallCaps</a> will display lower case
--   letters as smaller upper case letters, if this option is
--   available.</li>
--   </ul>
FontVariant :: Variant -> SpanAttribute

-- | Choose a different width.
--   
--   <ul>
--   <li>Takes one of nine font widths, e.g.
--   <tt>Pango.WidthExpanded</tt>.</li>
--   </ul>
FontStretch :: Stretch -> SpanAttribute

-- | Foreground color.
--   
--   <ul>
--   <li>This constructor and <a>FontBackground</a> take both a description
--   of the color to be used for rendering. The name is either a hex code
--   of the form "#RRGGBB" or an X11 color name like "dark olive
--   green".</li>
--   </ul>
FontForeground :: String -> SpanAttribute

-- | Background color.
FontBackground :: String -> SpanAttribute

-- | Specify underlining of text.
FontUnderline :: Underline -> SpanAttribute

-- | Specify a vertical displacement.
--   
--   <ul>
--   <li>Takes the vertical displacement in em (the width of the 'm'
--   character in the current font).</li>
--   </ul>
FontRise :: Double -> SpanAttribute

-- | Give a hint about the language to be displayed.
--   
--   <ul>
--   <li>This hint might help the system rendering a particular piece of
--   text with different fonts that are more suitable for the given
--   language.</li>
--   </ul>
FontLang :: Language -> SpanAttribute

-- | Gravity of text, use for ratation.
FontGravity :: PangoGravity -> SpanAttribute

-- | Intensity of gravity.
FontGravityHint :: PangoGravityHint -> SpanAttribute

-- | Enumerate to which side incomplete lines are flushed.
data LayoutAlignment :: *
AlignLeft :: LayoutAlignment
AlignCenter :: LayoutAlignment
AlignRight :: LayoutAlignment

-- | Enumerates how a line can be wrapped.
--   
--   <ul>
--   <li><i><tt>WrapWholeWords</tt></i> Breaks lines only between
--   words.</li>
--   </ul>
--   
--   <ul>
--   <li>This variant does not guarantee that the requested width is not
--   exceeded. A word that is longer than the paragraph width is not
--   split.</li>
--   </ul>
--   
--   <ul>
--   <li><i><tt>WrapAnywhere</tt></i> Break lines anywhere.</li>
--   <li><i><tt>WrapPartialWords</tt></i> Wrap within a word if it is the
--   only one on this line.</li>
--   </ul>
--   
--   <ul>
--   <li>This option acts like <a>WrapWholeWords</a> but will split a word
--   if it is the only one on this line and it exceeds the specified
--   width.</li>
--   </ul>
data LayoutWrapMode :: *
WrapWholeWords :: LayoutWrapMode
WrapAnywhere :: LayoutWrapMode
WrapPartialWords :: LayoutWrapMode

-- | A Tab position.
type TabPosition = (Double, TabAlign)

-- | Define attributes for <tt>FontSize</tt>.
data Size :: *
SizePoint :: Double -> Size
SizeUnreadable :: Size
SizeTiny :: Size
SizeSmall :: Size
SizeMedium :: Size
SizeLarge :: Size
SizeHuge :: Size
SizeGiant :: Size
SizeSmaller :: Size
SizeLarger :: Size

-- | Construct a colour from an sRGB specification. Input components are
--   expected to be in the range [0..1].
sRGB :: (Ord b, Floating b) => b -> b -> b -> Colour b
instance Show Width
instance Eq Width
instance AosdRenderer TextRenderer
instance Show PangoText
instance Monoid PangoText
instance IsString PangoText
instance Fractional Width
instance Num Width
