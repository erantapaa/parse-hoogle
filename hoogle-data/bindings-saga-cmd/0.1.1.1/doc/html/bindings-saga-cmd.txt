-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wrapping saga_cmd
--   
@package bindings-saga-cmd
@version 0.1.1.1

module Gis.Saga.LUT

-- | Create a color lookup-table based on minimum and maximum values
bgrColTable :: Float -> Float -> String

module Gis.Saga.Types

-- | Parameters passed in with command-line
type CmdPars = Map String String

-- | Information needed to call saga_cmd
data SagaCmd
SagaCmd :: String -> String -> (String, String) -> ParaMap -> Maybe (FilePath -> FilePath -> IO ()) -> Maybe (FilePath -> FilePath -> IO ()) -> FilePath -> FilePath -> SagaCmd

-- | library to call
sLib :: SagaCmd -> String

-- | module number
sMod :: SagaCmd -> String

-- | Keys to use for input and output
sInOutKey :: SagaCmd -> (String, String)

-- | Parameters in addition to input and output
sParas :: SagaCmd -> ParaMap

-- | Pre-processing (input/output-file)
sPre :: SagaCmd -> Maybe (FilePath -> FilePath -> IO ())

-- | Post-processing (input/output-file)
sPost :: SagaCmd -> Maybe (FilePath -> FilePath -> IO ())

-- | Output-file
sOutFile :: SagaCmd -> FilePath

-- | Input-file
sInFile :: SagaCmd -> FilePath

-- | Parameter-Map in a <a>SagaCmd</a>
type ParaMap = Map String (String, String)

-- | Saga Command which takes only one input-, and one output-file
type SagaIoCmd = FilePath -> FilePath -> SagaCmd

-- | SagaIO-Command with output file extension
type SagaIoCmdExt = (SagaIoCmd, String)

-- | Data-base with available Saga-Input-Output-commands
type SagaIoCmdDB = Map String SagaIoCmdExt

-- | Node-map for form-to-combinations
type NodeMap = Map String ([String], [String])

module Gis.Saga.Utils
defaultCmdPars :: SagaCmd -> [(String, String)]

-- | Copy a grid data-set
copyGrid :: FilePath -> FilePath -> IO ()

-- | Move a grid data-set
moveGrid :: FilePath -> FilePath -> IO ()

-- | Utility function to append to basename of a file-name
appendFileName :: FilePath -> String -> FilePath

-- | Dispatch on field seperator dispSep :: String -&gt; String dispSep s =
--   case s of "space" -&gt; "space" <a>Space</a> -&gt; "space" " " -&gt;
--   "space" "t" -&gt; "tabulator" "tab" -&gt; "tabulator" <a>Tab</a> -&gt;
--   "tabulator" <a>Tabulator</a> -&gt; "tabulator" ";" -&gt; ";" "," -&gt;
--   ","
renderStringPairs :: [(String, String)] -> String

-- | render two strings in two columns
twoCol :: String -> String -> String
writeReclassifyTableFlatSlope :: String -> IO ()

module Gis.Saga.Cmd

-- | Actual Program to do the work
progName :: String

-- | Call saga with a specific configuration
doSaga :: SagaCmd -> IO FilePath

-- | Wrapper around saga
saga :: String -> String -> [(String, String)] -> IO ExitCode

-- | adjust default parameters with the ones given on the command-line
adjustSagaCmdParas :: CmdPars -> SagaCmd -> SagaCmd

-- | Overwrite default parameters with parameters given on the command-line
adjustParas :: ParaMap -> CmdPars -> ParaMap

-- | Execute a <a>SagaIoCmdExt</a>
doCmdChain :: [SagaIoCmdExt] -> CmdPars -> FilePath -> Maybe FilePath -> IO FilePath

-- | Lookup a chain
lkpChain :: SagaIoCmdDB -> [String] -> [SagaIoCmdExt]

-- | Lookup a single command
lkpCmd :: String -> SagaIoCmdDB -> SagaIoCmdExt

module Gis.Saga.Data

-- | Implemented command for piping
sIoDB :: SagaIoCmdDB

-- | Pathsway nodes with input and output commands
sNodes :: NodeMap

module Gis.Saga.Doc
renderTable :: TableView a => a -> String
renderDot :: DotGraphics a => a -> String
renderNodes :: NodeView a => a -> String
instance NodeView (String, ([String], [String]))
instance NodeView NodeMap
instance DotGraphics (String, ([String], [String]))
instance DotGraphics NodeMap
instance DotGraphics ParaMap
instance DotGraphics (String, SagaIoCmdExt)
instance DotGraphics (SagaIoCmdDB, NodeMap)
instance TableView (String, (String, String))
instance TableView ParaMap
instance TableView (String, SagaIoCmdExt)
instance TableView SagaIoCmdDB

module Gis.Saga.Node

-- | Get all possible routes for some nodes
getAllRoutes :: NodeMap -> [((String, String), [String])]
