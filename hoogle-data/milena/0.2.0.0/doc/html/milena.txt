-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Kafka client for Haskell.
--   
@package milena
@version 0.2.0.0

module Network.Kafka.Protocol
class Serializable a
serialize :: Serializable a => a -> Put
class Deserializable a
deserialize :: Deserializable a => Get a
data Response
Response :: CorrelationId -> ResponseMessage -> Response
_responseCorrelationId :: Response -> CorrelationId
_responseMessage :: Response -> ResponseMessage
getResponse :: Int -> Get Response
newtype ConsumerMetadataResponse
ConsumerMetadataResp :: (KafkaError, Broker) -> ConsumerMetadataResponse
getResponseMessage :: Int -> Get ResponseMessage
newtype ApiKey
ApiKey :: Int16 -> ApiKey
newtype ApiVersion
ApiVersion :: Int16 -> ApiVersion
newtype CorrelationId
CorrelationId :: Int32 -> CorrelationId
newtype ClientId
ClientId :: KafkaString -> ClientId
data RequestMessage
MetadataRequest :: MetadataRequest -> RequestMessage
ProduceRequest :: ProduceRequest -> RequestMessage
FetchRequest :: FetchRequest -> RequestMessage
OffsetRequest :: OffsetRequest -> RequestMessage
OffsetCommitRequest :: OffsetCommitRequest -> RequestMessage
OffsetFetchRequest :: OffsetFetchRequest -> RequestMessage
ConsumerMetadataRequest :: ConsumerMetadataRequest -> RequestMessage
newtype MetadataRequest
MetadataReq :: [TopicName] -> MetadataRequest
newtype TopicName
TName :: KafkaString -> TopicName
_tName :: TopicName -> KafkaString
newtype KafkaBytes
KBytes :: ByteString -> KafkaBytes
_kafkaByteString :: KafkaBytes -> ByteString
newtype KafkaString
KString :: ByteString -> KafkaString
_kString :: KafkaString -> ByteString
newtype ProduceResponse
ProduceResp :: [(TopicName, [(Partition, KafkaError, Offset)])] -> ProduceResponse
_produceResponseFields :: ProduceResponse -> [(TopicName, [(Partition, KafkaError, Offset)])]
newtype OffsetResponse
OffsetResp :: [(TopicName, [PartitionOffsets])] -> OffsetResponse
_offsetResponseFields :: OffsetResponse -> [(TopicName, [PartitionOffsets])]
newtype PartitionOffsets
PartitionOffsets :: (Partition, KafkaError, [Offset]) -> PartitionOffsets
_partitionOffsetsFields :: PartitionOffsets -> (Partition, KafkaError, [Offset])
newtype FetchResponse
FetchResp :: [(TopicName, [(Partition, KafkaError, Offset, MessageSet)])] -> FetchResponse
_fetchResponseFields :: FetchResponse -> [(TopicName, [(Partition, KafkaError, Offset, MessageSet)])]
newtype MetadataResponse
MetadataResp :: ([Broker], [TopicMetadata]) -> MetadataResponse
_metadataResponseFields :: MetadataResponse -> ([Broker], [TopicMetadata])
newtype Broker
Broker :: (NodeId, Host, Port) -> Broker
_brokerFields :: Broker -> (NodeId, Host, Port)
newtype NodeId
NodeId :: Int32 -> NodeId
_nodeId :: NodeId -> Int32
newtype Host
Host :: KafkaString -> Host
_hostKString :: Host -> KafkaString
newtype Port
Port :: Int32 -> Port
_portInt :: Port -> Int32
newtype TopicMetadata
TopicMetadata :: (KafkaError, TopicName, [PartitionMetadata]) -> TopicMetadata
_topicMetadataFields :: TopicMetadata -> (KafkaError, TopicName, [PartitionMetadata])
newtype PartitionMetadata
PartitionMetadata :: (KafkaError, Partition, Leader, Replicas, Isr) -> PartitionMetadata
_partitionMetadataFields :: PartitionMetadata -> (KafkaError, Partition, Leader, Replicas, Isr)
newtype Leader
Leader :: Maybe Int32 -> Leader
_leaderId :: Leader -> Maybe Int32
newtype Replicas
Replicas :: [Int32] -> Replicas
newtype Isr
Isr :: [Int32] -> Isr
newtype OffsetCommitResponse
OffsetCommitResp :: [(TopicName, [(Partition, KafkaError)])] -> OffsetCommitResponse
newtype OffsetFetchResponse
OffsetFetchResp :: [(TopicName, [(Partition, Offset, Metadata, KafkaError)])] -> OffsetFetchResponse
newtype OffsetRequest
OffsetReq :: (ReplicaId, [(TopicName, [(Partition, Time, MaxNumberOfOffsets)])]) -> OffsetRequest
newtype Time
Time :: Int64 -> Time
_timeInt :: Time -> Int64
newtype MaxNumberOfOffsets
MaxNumberOfOffsets :: Int32 -> MaxNumberOfOffsets
newtype FetchRequest
FetchReq :: (ReplicaId, MaxWaitTime, MinBytes, [(TopicName, [(Partition, Offset, MaxBytes)])]) -> FetchRequest
newtype ReplicaId
ReplicaId :: Int32 -> ReplicaId
newtype MaxWaitTime
MaxWaitTime :: Int32 -> MaxWaitTime
newtype MinBytes
MinBytes :: Int32 -> MinBytes
newtype MaxBytes
MaxBytes :: Int32 -> MaxBytes
newtype ProduceRequest
ProduceReq :: (RequiredAcks, Timeout, [(TopicName, [(Partition, MessageSet)])]) -> ProduceRequest
newtype RequiredAcks
RequiredAcks :: Int16 -> RequiredAcks
newtype Timeout
Timeout :: Int32 -> Timeout
newtype Partition
Partition :: Int32 -> Partition
newtype MessageSet
MessageSet :: [MessageSetMember] -> MessageSet
_messageSetMembers :: MessageSet -> [MessageSetMember]
data MessageSetMember
MessageSetMember :: Offset -> Message -> MessageSetMember
_setOffset :: MessageSetMember -> Offset
_setMessage :: MessageSetMember -> Message
newtype Offset
Offset :: Int64 -> Offset
newtype Message
Message :: (Crc, MagicByte, Attributes, Key, Value) -> Message
_messageFields :: Message -> (Crc, MagicByte, Attributes, Key, Value)
newtype Crc
Crc :: Int32 -> Crc
newtype MagicByte
MagicByte :: Int8 -> MagicByte
newtype Attributes
Attributes :: Int8 -> Attributes
newtype Key
Key :: Maybe KafkaBytes -> Key
_keyBytes :: Key -> Maybe KafkaBytes
newtype Value
Value :: Maybe KafkaBytes -> Value
_valueBytes :: Value -> Maybe KafkaBytes
data ResponseMessage
MetadataResponse :: MetadataResponse -> ResponseMessage
ProduceResponse :: ProduceResponse -> ResponseMessage
FetchResponse :: FetchResponse -> ResponseMessage
OffsetResponse :: OffsetResponse -> ResponseMessage
OffsetCommitResponse :: OffsetCommitResponse -> ResponseMessage
OffsetFetchResponse :: OffsetFetchResponse -> ResponseMessage
ConsumerMetadataResponse :: ConsumerMetadataResponse -> ResponseMessage
newtype ConsumerMetadataRequest
ConsumerMetadataReq :: ConsumerGroup -> ConsumerMetadataRequest
newtype OffsetCommitRequest
OffsetCommitReq :: (ConsumerGroup, [(TopicName, [(Partition, Offset, Time, Metadata)])]) -> OffsetCommitRequest
newtype OffsetFetchRequest
OffsetFetchReq :: (ConsumerGroup, [(TopicName, [Partition])]) -> OffsetFetchRequest
newtype ConsumerGroup
ConsumerGroup :: KafkaString -> ConsumerGroup
newtype Metadata
Metadata :: KafkaString -> Metadata
errorKafka :: KafkaError -> Int16
data KafkaError

-- | <tt>0</tt> No error--it worked!
NoError :: KafkaError

-- | <tt>-1</tt> An unexpected server error
Unknown :: KafkaError

-- | <tt>1</tt> The requested offset is outside the range of offsets
--   maintained by the server for the given topic/partition.
OffsetOutOfRange :: KafkaError

-- | <tt>2</tt> This indicates that a message contents does not match its
--   CRC
InvalidMessage :: KafkaError

-- | <tt>3</tt> This request is for a topic or partition that does not
--   exist on this broker.
UnknownTopicOrPartition :: KafkaError

-- | <tt>4</tt> The message has a negative size
InvalidMessageSize :: KafkaError

-- | <tt>5</tt> This error is thrown if we are in the middle of a
--   leadership election and there is currently no leader for this
--   partition and hence it is unavailable for writes.
LeaderNotAvailable :: KafkaError

-- | <tt>6</tt> This error is thrown if the client attempts to send
--   messages to a replica that is not the leader for some partition. It
--   indicates that the clients metadata is out of date.
NotLeaderForPartition :: KafkaError

-- | <tt>7</tt> This error is thrown if the request exceeds the
--   user-specified time limit in the request.
RequestTimedOut :: KafkaError

-- | <tt>8</tt> This is not a client facing error and is used mostly by
--   tools when a broker is not alive.
BrokerNotAvailable :: KafkaError

-- | <tt>9</tt> If replica is expected on a broker, but is not.
ReplicaNotAvailable :: KafkaError

-- | <tt>10</tt> The server has a configurable maximum message size to
--   avoid unbounded memory allocation. This error is thrown if the client
--   attempt to produce a message larger than this maximum.
MessageSizeTooLarge :: KafkaError

-- | <tt>11</tt> Internal error code for broker-to-broker communication.
StaleControllerEpochCode :: KafkaError

-- | <tt>12</tt> If you specify a string larger than configured maximum for
--   offset metadata
OffsetMetadataTooLargeCode :: KafkaError

-- | <tt>14</tt> The broker returns this error code for an offset fetch
--   request if it is still loading offsets (after a leader change for that
--   offsets topic partition).
OffsetsLoadInProgressCode :: KafkaError

-- | <tt>15</tt> The broker returns this error code for consumer metadata
--   requests or offset commit requests if the offsets topic has not yet
--   been created.
ConsumerCoordinatorNotAvailableCode :: KafkaError

-- | <tt>16</tt> The broker returns this error code if it receives an
--   offset fetch or commit request for a consumer group that it is not a
--   coordinator for.
NotCoordinatorForConsumerCode :: KafkaError
newtype Request
Request :: (CorrelationId, ClientId, RequestMessage) -> Request
requestBytes :: Request -> ByteString
apiVersion :: RequestMessage -> ApiVersion
apiKey :: RequestMessage -> ApiKey
responseMessage :: Lens' Response ResponseMessage
responseCorrelationId :: Lens' Response CorrelationId
tName :: Iso' TopicName KafkaString
kafkaByteString :: Iso' KafkaBytes ByteString
kString :: Iso' KafkaString ByteString
produceResponseFields :: Iso' ProduceResponse [(TopicName, [(Partition, KafkaError, Offset)])]
offsetResponseFields :: Iso' OffsetResponse [(TopicName, [PartitionOffsets])]
partitionOffsetsFields :: Iso' PartitionOffsets (Partition, KafkaError, [Offset])
fetchResponseFields :: Iso' FetchResponse [(TopicName, [(Partition, KafkaError, Offset, MessageSet)])]
metadataResponseFields :: Iso' MetadataResponse ([Broker], [TopicMetadata])
brokerFields :: Iso' Broker (NodeId, Host, Port)
nodeId :: Iso' NodeId Int32
hostKString :: Iso' Host KafkaString
portInt :: Iso' Port Int32
topicMetadataFields :: Iso' TopicMetadata (KafkaError, TopicName, [PartitionMetadata])
partitionMetadataFields :: Iso' PartitionMetadata (KafkaError, Partition, Leader, Replicas, Isr)
leaderId :: Iso' Leader (Maybe Int32)
timeInt :: Iso' Time Int64
messageSetMembers :: Iso' MessageSet [MessageSetMember]
setOffset :: Lens' MessageSetMember Offset
setMessage :: Lens' MessageSetMember Message
messageFields :: Iso' Message (Crc, MagicByte, Attributes, Key, Value)
keyBytes :: Iso' Key (Maybe KafkaBytes)
valueBytes :: Iso' Value (Maybe KafkaBytes)
_ConsumerMetadataResponse :: Prism' ResponseMessage ConsumerMetadataResponse
_OffsetFetchResponse :: Prism' ResponseMessage OffsetFetchResponse
_OffsetCommitResponse :: Prism' ResponseMessage OffsetCommitResponse
_OffsetResponse :: Prism' ResponseMessage OffsetResponse
_FetchResponse :: Prism' ResponseMessage FetchResponse
_ProduceResponse :: Prism' ResponseMessage ProduceResponse
_MetadataResponse :: Prism' ResponseMessage MetadataResponse
keyed :: (Field1 a a b b, Choice p, Applicative f, Eq b) => b -> Optic' p f a a
metadataResponseBrokers :: Lens' MetadataResponse [Broker]
topicsMetadata :: Lens' MetadataResponse [TopicMetadata]
topicMetadataKafkaError :: Lens' TopicMetadata KafkaError
topicMetadataName :: Lens' TopicMetadata TopicName
partitionsMetadata :: Lens' TopicMetadata [PartitionMetadata]
partitionId :: Lens' PartitionMetadata Partition
partitionMetadataLeader :: Lens' PartitionMetadata Leader
brokerNode :: Lens' Broker NodeId
brokerHost :: Lens' Broker Host
brokerPort :: Lens' Broker Port
fetchResponseMessages :: Fold FetchResponse MessageSet
fetchResponseByTopic :: TopicName -> Fold FetchResponse (Partition, KafkaError, Offset, MessageSet)
messageSetByPartition :: Partition -> Fold (Partition, KafkaError, Offset, MessageSet) MessageSetMember
fetchResponseMessageMembers :: Fold FetchResponse MessageSetMember
messageValue :: Lens' Message Value
payload :: Fold Message ByteString
offsetResponseOffset :: Partition -> Fold OffsetResponse Offset
messageSet :: Partition -> TopicName -> Fold FetchResponse MessageSetMember
nextOffset :: Lens' MessageSetMember Offset
findPartitionMetadata :: Applicative f => TopicName -> LensLike' f TopicMetadata [PartitionMetadata]
findPartition :: Partition -> Prism' PartitionMetadata PartitionMetadata
hostString :: Lens' Host String
portId :: IndexPreservingGetter Port PortID
instance Show ApiKey
instance Eq ApiKey
instance Deserializable ApiKey
instance Serializable ApiKey
instance Num ApiKey
instance Show ApiVersion
instance Eq ApiVersion
instance Deserializable ApiVersion
instance Serializable ApiVersion
instance Num ApiVersion
instance Show CorrelationId
instance Eq CorrelationId
instance Deserializable CorrelationId
instance Serializable CorrelationId
instance Num CorrelationId
instance Enum CorrelationId
instance Show KafkaBytes
instance Eq KafkaBytes
instance IsString KafkaBytes
instance Show KafkaString
instance Eq KafkaString
instance Ord KafkaString
instance IsString KafkaString
instance Show TopicName
instance Eq TopicName
instance Ord TopicName
instance Deserializable TopicName
instance Serializable TopicName
instance IsString TopicName
instance Show MetadataRequest
instance Eq MetadataRequest
instance Serializable MetadataRequest
instance Deserializable MetadataRequest
instance Show ClientId
instance Eq ClientId
instance Deserializable ClientId
instance Serializable ClientId
instance IsString ClientId
instance Show NodeId
instance Eq NodeId
instance Ord NodeId
instance Deserializable NodeId
instance Num NodeId
instance Show Host
instance Eq Host
instance Ord Host
instance Deserializable Host
instance IsString Host
instance Show Port
instance Eq Port
instance Ord Port
instance Deserializable Port
instance Num Port
instance Show Broker
instance Eq Broker
instance Ord Broker
instance Deserializable Broker
instance Show Leader
instance Eq Leader
instance Ord Leader
instance Show Replicas
instance Eq Replicas
instance Serializable Replicas
instance Deserializable Replicas
instance Show Isr
instance Eq Isr
instance Deserializable Isr
instance Show Time
instance Eq Time
instance Serializable Time
instance Num Time
instance Bounded Time
instance Show MaxNumberOfOffsets
instance Eq MaxNumberOfOffsets
instance Serializable MaxNumberOfOffsets
instance Num MaxNumberOfOffsets
instance Show ReplicaId
instance Eq ReplicaId
instance Num ReplicaId
instance Serializable ReplicaId
instance Deserializable ReplicaId
instance Show MaxWaitTime
instance Eq MaxWaitTime
instance Num MaxWaitTime
instance Serializable MaxWaitTime
instance Deserializable MaxWaitTime
instance Show MinBytes
instance Eq MinBytes
instance Num MinBytes
instance Serializable MinBytes
instance Deserializable MinBytes
instance Show MaxBytes
instance Eq MaxBytes
instance Num MaxBytes
instance Serializable MaxBytes
instance Deserializable MaxBytes
instance Show RequiredAcks
instance Eq RequiredAcks
instance Serializable RequiredAcks
instance Deserializable RequiredAcks
instance Num RequiredAcks
instance Show Timeout
instance Eq Timeout
instance Serializable Timeout
instance Deserializable Timeout
instance Num Timeout
instance Show Partition
instance Ord Partition
instance Eq Partition
instance Serializable Partition
instance Deserializable Partition
instance Num Partition
instance Show OffsetRequest
instance Eq OffsetRequest
instance Serializable OffsetRequest
instance Show Offset
instance Eq Offset
instance Serializable Offset
instance Deserializable Offset
instance Num Offset
instance Show FetchRequest
instance Eq FetchRequest
instance Deserializable FetchRequest
instance Serializable FetchRequest
instance Show Crc
instance Eq Crc
instance Serializable Crc
instance Deserializable Crc
instance Num Crc
instance Show MagicByte
instance Eq MagicByte
instance Serializable MagicByte
instance Deserializable MagicByte
instance Num MagicByte
instance Show Attributes
instance Eq Attributes
instance Serializable Attributes
instance Deserializable Attributes
instance Num Attributes
instance Show Key
instance Eq Key
instance Show Value
instance Eq Value
instance Show Message
instance Eq Message
instance Deserializable Message
instance Show MessageSetMember
instance Eq MessageSetMember
instance Show MessageSet
instance Eq MessageSet
instance Show ProduceRequest
instance Eq ProduceRequest
instance Serializable ProduceRequest
instance Show ConsumerGroup
instance Eq ConsumerGroup
instance Serializable ConsumerGroup
instance Deserializable ConsumerGroup
instance IsString ConsumerGroup
instance Show OffsetFetchRequest
instance Eq OffsetFetchRequest
instance Serializable OffsetFetchRequest
instance Show ConsumerMetadataRequest
instance Eq ConsumerMetadataRequest
instance Serializable ConsumerMetadataRequest
instance Show Metadata
instance Eq Metadata
instance Serializable Metadata
instance Deserializable Metadata
instance IsString Metadata
instance Show OffsetCommitRequest
instance Eq OffsetCommitRequest
instance Serializable OffsetCommitRequest
instance Show RequestMessage
instance Eq RequestMessage
instance Eq KafkaError
instance Show KafkaError
instance Show OffsetFetchResponse
instance Eq OffsetFetchResponse
instance Deserializable OffsetFetchResponse
instance Show OffsetCommitResponse
instance Eq OffsetCommitResponse
instance Deserializable OffsetCommitResponse
instance Show PartitionMetadata
instance Eq PartitionMetadata
instance Deserializable PartitionMetadata
instance Show TopicMetadata
instance Eq TopicMetadata
instance Deserializable TopicMetadata
instance Show MetadataResponse
instance Eq MetadataResponse
instance Deserializable MetadataResponse
instance Show FetchResponse
instance Eq FetchResponse
instance Serializable FetchResponse
instance Deserializable FetchResponse
instance Show PartitionOffsets
instance Eq PartitionOffsets
instance Deserializable PartitionOffsets
instance Show OffsetResponse
instance Eq OffsetResponse
instance Deserializable OffsetResponse
instance Show ProduceResponse
instance Eq ProduceResponse
instance Deserializable ProduceResponse
instance Serializable ProduceResponse
instance Show ConsumerMetadataResponse
instance Eq ConsumerMetadataResponse
instance Deserializable ConsumerMetadataResponse
instance Show ResponseMessage
instance Eq ResponseMessage
instance Show Response
instance Eq Response
instance Show Request
instance Eq Request
instance Deserializable Int8
instance Deserializable Int16
instance Deserializable Int32
instance Deserializable Int64
instance (Deserializable a, Deserializable b, Deserializable c, Deserializable d, Deserializable e) => Deserializable (a, b, c, d, e)
instance (Deserializable a, Deserializable b, Deserializable c, Deserializable d) => Deserializable (a, b, c, d)
instance (Deserializable a, Deserializable b, Deserializable c) => Deserializable (a, b, c)
instance (Deserializable a, Deserializable b) => Deserializable (a, b)
instance Deserializable a => Deserializable [a]
instance Deserializable Value
instance Deserializable Key
instance Deserializable KafkaString
instance Deserializable KafkaBytes
instance Deserializable Leader
instance Deserializable MessageSetMember
instance Deserializable MessageSet
instance (Serializable a, Serializable b, Serializable c, Serializable d, Serializable e) => Serializable (a, b, c, d, e)
instance (Serializable a, Serializable b, Serializable c, Serializable d) => Serializable (a, b, c, d)
instance (Serializable a, Serializable b, Serializable c) => Serializable (a, b, c)
instance (Serializable a, Serializable b) => Serializable (a, b)
instance Serializable a => Serializable [a]
instance Serializable Message
instance Serializable MessageSetMember
instance Serializable KafkaBytes
instance Serializable MessageSet
instance Serializable KafkaString
instance Serializable Value
instance Serializable Key
instance Serializable Int8
instance Serializable Int16
instance Serializable Int32
instance Serializable Int64
instance Serializable RequestMessage
instance Serializable Request
instance Deserializable KafkaError
instance Serializable KafkaError

module Network.Kafka
data KafkaState
KafkaState :: KafkaString -> RequiredAcks -> Timeout -> MinBytes -> MaxBytes -> MaxWaitTime -> CorrelationId -> Map Leader Broker -> Map Broker (Pool Handle) -> Map TopicName TopicMetadata -> KafkaState

-- | Name to use as a client ID.
_stateName :: KafkaState -> KafkaString

-- | How many acknowledgements are required for producing.
_stateRequiredAcks :: KafkaState -> RequiredAcks

-- | Time in milliseconds to wait for messages to be produced by broker.
_stateRequestTimeout :: KafkaState -> Timeout

-- | Minimum size of response bytes to block for.
_stateWaitSize :: KafkaState -> MinBytes

-- | Maximum size of response bytes to retrieve.
_stateBufferSize :: KafkaState -> MaxBytes

-- | Maximum time in milliseconds to wait for response.
_stateWaitTime :: KafkaState -> MaxWaitTime

-- | An incrementing counter of requests.
_stateCorrelationId :: KafkaState -> CorrelationId

-- | Broker cache
_stateBrokers :: KafkaState -> Map Leader Broker

-- | Connection cache
_stateConnections :: KafkaState -> Map Broker (Pool Handle)

-- | Topic metadata cache
_stateTopicMetadata :: KafkaState -> Map TopicName TopicMetadata
stateWaitTime :: Lens' KafkaState MaxWaitTime
stateWaitSize :: Lens' KafkaState MinBytes
stateTopicMetadata :: Lens' KafkaState (Map TopicName TopicMetadata)
stateRequiredAcks :: Lens' KafkaState RequiredAcks
stateRequestTimeout :: Lens' KafkaState Timeout
stateName :: Lens' KafkaState KafkaString
stateCorrelationId :: Lens' KafkaState CorrelationId
stateConnections :: Lens' KafkaState (Map Broker (Pool Handle))
stateBufferSize :: Lens' KafkaState MaxBytes
stateBrokers :: Lens' KafkaState (Map Leader Broker)
data KafkaClient
KafkaClient :: KafkaState -> Handle -> KafkaClient
_kafkaClientState :: KafkaClient -> KafkaState
_kafkaClientHandle :: KafkaClient -> Handle
kafkaClientState :: Lens' KafkaClient KafkaState
kafkaClientHandle :: Lens' KafkaClient Handle

-- | The core Kafka monad.
type Kafka = StateT KafkaClient (EitherT KafkaClientError IO)
type KafkaAddress = (Host, Port)
type KafkaClientId = KafkaString

-- | Errors given from the Kafka monad.
data KafkaClientError

-- | A response did not contain an offset.
KafkaNoOffset :: KafkaClientError

-- | Got a different form of a response than was requested.
KafkaExpected :: KafkaExpectedResponse -> KafkaClientError

-- | A value could not be deserialized correctly.
KafkaDeserializationError :: String -> KafkaClientError

-- | Could not find a cached broker for the found leader.
KafkaInvalidBroker :: Leader -> KafkaClientError
KafkaFailedToFetchMetadata :: KafkaClientError

-- | Type of response to expect, used for <a>KafkaExpected</a> error.
data KafkaExpectedResponse
ExpectedMetadata :: KafkaExpectedResponse
ExpectedFetch :: KafkaExpectedResponse
ExpectedProduce :: KafkaExpectedResponse

-- | An abstract form of Kafka's time. Used for querying offsets.
data KafkaTime

-- | The latest time on the broker.
LatestTime :: KafkaTime

-- | The earliest time on the broker.
EarliestTime :: KafkaTime

-- | A specific time.
OtherTime :: Time -> KafkaTime
data PartitionAndLeader
PartitionAndLeader :: TopicName -> Partition -> Leader -> PartitionAndLeader
_palTopic :: PartitionAndLeader -> TopicName
_palPartition :: PartitionAndLeader -> Partition
_palLeader :: PartitionAndLeader -> Leader
palTopic :: Lens' PartitionAndLeader TopicName
palPartition :: Lens' PartitionAndLeader Partition
palLeader :: Lens' PartitionAndLeader Leader
data TopicAndPartition
TopicAndPartition :: TopicName -> Partition -> TopicAndPartition
_tapTopic :: TopicAndPartition -> TopicName
_tapPartition :: TopicAndPartition -> Partition

-- | A topic with a serializable message.
data TopicAndMessage
TopicAndMessage :: TopicName -> Message -> TopicAndMessage
_tamTopic :: TopicAndMessage -> TopicName
_tamMessage :: TopicAndMessage -> Message
tamTopic :: Lens' TopicAndMessage TopicName
tamMessage :: Lens' TopicAndMessage Message

-- | Get the bytes from the Kafka message, ignoring the topic.
tamPayload :: TopicAndMessage -> ByteString

-- | Default: <tt>0</tt>
defaultCorrelationId :: CorrelationId

-- | Default: <tt>1</tt>
defaultRequiredAcks :: RequiredAcks

-- | Default: <tt>10000</tt>
defaultRequestTimeout :: Timeout

-- | Default: <tt>0</tt>
defaultMinBytes :: MinBytes

-- | Default: <tt>1024 * 1024</tt>
defaultMaxBytes :: MaxBytes

-- | Default: <tt>0</tt>
defaultMaxWaitTime :: MaxWaitTime

-- | Create a consumer using default values.
defaultState :: KafkaClientId -> KafkaState

-- | Run the underlying Kafka monad at the given leader address and initial
--   state.
runKafka :: KafkaAddress -> KafkaState -> Kafka a -> IO (Either KafkaClientError a)

-- | Make a request, incrementing the <a>_stateCorrelationId</a>.
makeRequest :: RequestMessage -> Kafka Request

-- | Perform a request and deserialize the response.
doRequest :: Request -> Kafka Response
doRequest' :: Handle -> Request -> Kafka Response

-- | Send a metadata request
metadata :: MetadataRequest -> Kafka MetadataResponse

-- | Send a metadata request
metadata' :: Handle -> MetadataRequest -> Kafka MetadataResponse

-- | Function to give an error when the response seems wrong.
expectResponse :: KafkaExpectedResponse -> Getting (Leftmost b) ResponseMessage b -> Response -> Kafka b

-- | Convert an abstract time to a serializable protocol value.
protocolTime :: KafkaTime -> Time

-- | Default: <tt>-1</tt>
ordinaryConsumerId :: ReplicaId

-- | Construct a fetch request from the values in the state.
fetchRequest :: Offset -> Partition -> TopicName -> Kafka FetchRequest

-- | Execute a fetch request and get the raw fetch response.
fetch :: FetchRequest -> Kafka FetchResponse

-- | Extract out messages with their topics from a fetch response.
fetchMessages :: FetchResponse -> [TopicAndMessage]
updateMetadatas :: [TopicName] -> Kafka ()
updateMetadata :: TopicName -> Kafka ()
updateAllMetadata :: Kafka ()

-- | Execute a handler action, creating a new Pool and updating the
--   connections Map if needed.
withBrokerHandle :: Broker -> (Handle -> Kafka a) -> Kafka a

-- | Fields to construct an offset request, per topic and partition.
data PartitionOffsetRequestInfo
PartitionOffsetRequestInfo :: KafkaTime -> MaxNumberOfOffsets -> PartitionOffsetRequestInfo

-- | Time to find an offset for.
_kafkaTime :: PartitionOffsetRequestInfo -> KafkaTime

-- | Number of offsets to retrieve.
_maxNumOffsets :: PartitionOffsetRequestInfo -> MaxNumberOfOffsets

-- | Get the first found offset.
getLastOffset :: KafkaTime -> Partition -> TopicName -> Kafka Offset

-- | Create an offset request.
offsetRequest :: [(TopicAndPartition, PartitionOffsetRequestInfo)] -> RequestMessage
instance Eq TopicAndPartition
instance Ord TopicAndPartition
instance Show TopicAndPartition
instance Eq TopicAndMessage
instance Show TopicAndMessage
instance Eq KafkaExpectedResponse
instance Show KafkaExpectedResponse
instance Eq KafkaClientError
instance Show KafkaClientError
instance Show PartitionAndLeader

module Network.Kafka.Producer

-- | Execute a produce request and get the raw preduce response.
produce :: Handle -> ProduceRequest -> Kafka ProduceResponse

-- | Construct a produce request with explicit arguments.
produceRequest :: RequiredAcks -> Timeout -> [(TopicAndPartition, MessageSet)] -> ProduceRequest

-- | Send messages to partition calculated by <a>partitionAndCollate</a>.
produceMessages :: [TopicAndMessage] -> Kafka [ProduceResponse]

-- | Create a protocol message set from a list of messages.
groupMessagesToSet :: [TopicAndMessage] -> MessageSet

-- | Group messages together with the leader they should be sent to.
partitionAndCollate :: [TopicAndMessage] -> Kafka (Map Leader (Map TopicAndPartition [TopicAndMessage]))

-- | Execute a produce request using the values in the state.
send :: Leader -> [(TopicAndPartition, MessageSet)] -> Kafka ProduceResponse

-- | Find a leader and partition for the topic.
brokerPartitionInfo :: TopicName -> Kafka [PartitionAndLeader]
findMetadataOrElse :: [TopicName] -> Getting (Maybe a) KafkaClient (Maybe a) -> KafkaClientError -> Kafka a
getPartition :: [PartitionAndLeader] -> Kafka (Maybe PartitionAndLeader)

-- | Default: <tt>1</tt>
defaultMessageCrc :: Crc

-- | Default: <tt>0</tt>
defaultMessageMagicByte :: MagicByte

-- | Default: <tt>Nothing</tt>
defaultMessageKey :: Key

-- | Default: <tt>0</tt>
defaultMessageAttributes :: Attributes

-- | Construct a message from a string of bytes using default attributes.
makeMessage :: ByteString -> Message
