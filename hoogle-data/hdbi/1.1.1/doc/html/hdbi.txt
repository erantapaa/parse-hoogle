-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell Database Independent interface
--   
--   HDBI provides an abstraction layer between Haskell programs and SQL
--   relational databases. This lets you write database code once, in
--   Haskell, and have it work with any number of backend SQL databases
--   (MySQL, Oracle, PostgreSQL, ODBC-compliant databases, etc.)
@package hdbi
@version 1.1.1


module Database.HDBI.Parsers

-- | Parse bit field literal in format ''b'00101011'''. Takes just last 64
--   bits of input, other bits are ignored
parseBitField :: Parser Word64
parseIsoZonedTime :: Parser ZonedTime
parseIsoDay :: Parser Day
parseIsoTimeOfDay :: Parser TimeOfDay
parseIsoLocalTime :: Parser LocalTime


module Database.HDBI.Formaters
formatBitField :: Word64 -> String
formatIsoUTCTime :: UTCTime -> String
formatIsoDay :: Day -> String
formatIsoTimeOfDay :: TimeOfDay -> String
formatIsoLocalTime :: LocalTime -> String


module Database.HDBI.SqlValue

-- | All types must convert to SqlValue safely and unambiguously. That's
--   why there is no ''safeToSql'' method
class ToSql a
toSql :: ToSql a => a -> SqlValue
class FromSql a where fromSql s = case safeFromSql s of { Left e -> throw e Right a -> a }
safeFromSql :: FromSql a => SqlValue -> Either ConvertError a
fromSql :: FromSql a => SqlValue -> a

-- | Convertion error description. Used in <a>FromSql</a> typeclass.
data ConvertError
ConvertError :: String -> ConvertError

-- | Detailed description of convertion error
ceReason :: ConvertError -> String

-- | Type names must unique. Expecting names are generated by (<a>show</a>
--   . <a>typeOf</a>) function
IncompatibleTypes :: String -> String -> ConvertError

-- | name of type trying to convert from.
ceFromType :: ConvertError -> String

-- | name of target type.
ceToType :: ConvertError -> String

-- | Auxiliary type to represent bit field outside of SqlValue
newtype BitField
BitField :: Word64 -> BitField
unBitField :: BitField -> Word64

-- | <a>SqlValue</a> is the main type for expressing Haskell values to SQL
--   databases.
--   
--   <i>WHAT IS SQLVALUE</i>
--   
--   SqlValue is an intermediate type to store<i>recevie data to</i>from
--   the database. Every database driver will do it's best to properly
--   convert any SqlValue to the database record's field, and properly
--   convert the record's field to SqlValue back.
--   
--   The <a>SqlValue</a> has predefined <a>FromSql</a> and <a>ToSql</a>
--   instances for many Haskell's types. Any Haskell's type can be
--   converted to the <a>SqlValue</a> with <a>toSql</a> function. There is
--   no safeToSql function because <a>toSql</a> never fails. Also, any
--   <a>SqlValue</a> type can be converted to almost any Haskell's type as
--   well. Not any <a>SqlValue</a> can be converted back to Haskell's type,
--   so there is <a>safeFromSql</a> function to do that safely. There is
--   also unsafe <a>toSql</a> function of caurse.
--   
--   You can sure, that <tt>fromSql . toSql == id</tt>
--   
--   <i>SQLVALUE CONSTRUCTORS</i>
--   
--   <a>SqlValue</a> constructors is the MINIMAL set of constructors,
--   required to represent the most wide range of native database types.
--   
--   For example, there is FLOAT native database type and DOUBLE, but any
--   DOUBLE can carry any FLOAT value, so there is no need to create
--   <a>SqlValue</a> constructor to represent FLOAT type, we can do it with
--   Double. But there is DECIMAL database type, representing arbitrary
--   precision value which can be carried just by <a>Decimal</a> Haskell's
--   type, so we need a constructor for it.
--   
--   There is no SqlRational any more, because there is no one database
--   which have native Rational type. This is the key idea: if database can
--   not store this type natively we will not create <a>SqlValue</a> clause
--   for it.
--   
--   Each <a>SqlValue</a> constructor is documented or self-explaining to
--   understand what it is needed for.
--   
--   <i>'ToSql' and 'FromSql' INSTANCES</i>
--   
--   The key idea is to do the most obvious conversion between types only
--   if it is not ambiguous. For example, the most obvious conversion of
--   <a>Double</a> to <a>Int32</a> is just truncate the <a>Double</a>, the
--   most obvious conversion of String to <a>UTCTime</a> is to try read the
--   <a>String</a> as date and time. But there is no obvious way to convert
--   <a>Int32</a> to <a>UTCTime</a>, so if you will try to convert
--   (<a>SqlInteger</a> 44) to date you will fail. User must handle this
--   cases properly converting values with right way. It is not very good
--   idea to silently perform strange and ambiguous convertions between
--   absolutely different data types.
--   
--   <i>ERROR CONDITIONS</i>
--   
--   There may be sometimes an error during conversion. For instance, if
--   you have an <a>SqlText</a> and attempting to convert it to an
--   <a>Integer</a>, but it doesn't parse as an <a>Integer</a>, you will
--   get an error. This will be indicated as an exception using
--   <a>fromSql</a>, or a Left result using <a>safeFromSql</a>.
--   
--   <i>STORING SQLVALUE TO DATABASE</i>
--   
--   Any <a>SqlValue</a> can be converted to <tt>Text</tt> and then readed
--   from <tt>Text</tt> back. This is guaranteed by tests, so the database
--   driver's author can use it to store and read data through
--   <tt>Text</tt> for types which is not supported by the database
--   natively.
--   
--   <i>TEXT AND BYTESTRINGS</i>
--   
--   We are using lazy Text everywhere because it is faster than
--   <a>String</a> and has builders. Strict text can be converted to
--   one-chanked lazy text with O(1) complexity, but lazy to strict
--   converts with O(n) complexity, so it is logical to use lazy Text.
--   
--   We are not using ByteString as text encoded in UTF-8, ByteStrings are
--   just sequences of bytes. We are using strict ByteStrings because HDBI
--   drivers uses them to pass the ByteString to the C library as
--   <tt>CString</tt>, so it must be strict.
--   
--   We are not using <a>String</a> as data of query or as query itself
--   because it is not effective in memory and cpu.
--   
--   <i>DATE AND TIME</i>
--   
--   We are not using time with timezone, because there is no one database
--   working with it natively except PostgreSQL, but the documentations of
--   PostgreSQL says
--   
--   <i>To address these difficulties, we recommend using date</i>time
--   types that contain both date and time when using time zones. We do not
--   recommend using the type time with time zone (though it is supported
--   by PostgreSQL for legacy applications and for compliance with the SQL
--   standard). PostgreSQL assumes your local time zone for any type
--   containing only date or time./
--   
--   This is not recomended to use time with timezone.
--   
--   We are using <a>UTCTime</a> instead of <tt>TimeWithTimezone</tt>
--   because no one database actually save timezone information. All
--   databases just convert datetime to <a>UTCTime</a> when save data and
--   convert UTCTime back to LOCAL SERVER TIMEZONE when returning the data.
--   So it is logical to work with timezones on the haskell side.
--   
--   Time intervals are not widely supported, actually just in PostgreSQL
--   and Oracle. So, if you need them you can serialize throgh
--   <a>SqlText</a> by hands, or write your own <a>ToSql</a> and
--   <a>FromSql</a> instances to do that more convenient.
--   
--   <i>EQUALITY OF SQLVALUE</i>
--   
--   Two SqlValues are considered to be equal if one of these hold. The
--   first comparison that can be made is controlling; if none of these
--   comparisons can be made, then they are not equal:
--   
--   <ul>
--   <li>Both are NULL</li>
--   <li>Both represent the same type and the encapsulated values are
--   considered equal by applying (==) to them</li>
--   <li>The values of each, when converted to a <a>String</a>, are
--   equal.</li>
--   </ul>
data SqlValue

-- | Arbitrary precision DECIMAL value
SqlDecimal :: Decimal -> SqlValue

-- | Any Integer, including Int32, Int64 and Words.
SqlInteger :: Integer -> SqlValue
SqlDouble :: Double -> SqlValue
SqlText :: Text -> SqlValue

-- | Blob field in the database. This field can not be implicitly converted
--   to any other type because it is just an array of bytes, not an UTF-8
--   encoded string.
SqlBlob :: ByteString -> SqlValue
SqlBool :: Bool -> SqlValue

-- | Represent bit field with 64 bits
SqlBitField :: BitField -> SqlValue

-- | UUID value http:<i></i>en.wikipedia.org<i>wiki</i>UUID
SqlUUID :: UUID -> SqlValue

-- | UTC YYYY-MM-DD HH:MM:SS
SqlUTCTime :: UTCTime -> SqlValue

-- | Local YYYY-MM-DD (no timezone)
SqlLocalDate :: Day -> SqlValue

-- | Local HH:MM:SS (no timezone)
SqlLocalTimeOfDay :: TimeOfDay -> SqlValue

-- | Local YYYY-MM-DD HH:MM:SS (no timezone)
SqlLocalTime :: LocalTime -> SqlValue

-- | NULL in SQL or Nothing in Haskell
SqlNull :: SqlValue
instance Typeable ConvertError
instance Typeable BitField
instance Typeable SqlValue
instance Show ConvertError
instance Eq ConvertError
instance Bounded BitField
instance Enum BitField
instance Eq BitField
instance Integral BitField
instance Data BitField
instance Num BitField
instance Ord BitField
instance Real BitField
instance Ix BitField
instance Bits BitField
instance Show SqlValue
instance Ord SqlValue
instance FromSql SqlValue
instance ToSql SqlValue
instance FromSql a => FromSql (Maybe a)
instance ToSql a => ToSql (Maybe a)
instance FromSql LocalTime
instance ToSql LocalTime
instance FromSql TimeOfDay
instance ToSql TimeOfDay
instance FromSql Day
instance ToSql Day
instance FromSql UTCTime
instance ToSql UTCTime
instance FromSql UUID
instance ToSql UUID
instance FromSql BitField
instance ToSql BitField
instance FromSql Bool
instance ToSql Bool
instance FromSql ByteString
instance ToSql ByteString
instance FromSql ByteString
instance ToSql ByteString
instance FromSql Text
instance ToSql Text
instance FromSql Text
instance ToSql Text
instance FromSql [Char]
instance ToSql [Char]
instance FromSql Double
instance ToSql Double
instance FromSql Word
instance ToSql Word
instance FromSql Word64
instance ToSql Word64
instance FromSql Word32
instance ToSql Word32
instance FromSql Integer
instance ToSql Integer
instance FromSql Int64
instance ToSql Int64
instance FromSql Int32
instance ToSql Int32
instance FromSql Int
instance ToSql Int
instance FromSql Decimal
instance ToSql Decimal
instance Eq SqlValue
instance Show BitField
instance Exception ConvertError


-- | Types for HDBI.
--   
--   Written by John Goerzen, jgoerzen@complete.org
module Database.HDBI.Types

-- | Typeclass to abstract the working with connection.
class (Typeable conn, Statement (ConnStatement conn)) => Connection conn where type family ConnStatement conn :: * run conn query values = withStatement conn query $ \ s -> execute s values runRaw conn query = withStatement conn query executeRaw runMany conn query values = withStatement conn query $ \ s -> executeMany s values
disconnect :: Connection conn => conn -> IO ()
begin :: Connection conn => conn -> IO ()
commit :: Connection conn => conn -> IO ()
rollback :: Connection conn => conn -> IO ()
inTransaction :: Connection conn => conn -> IO Bool
connStatus :: Connection conn => conn -> IO ConnStatus
prepare :: Connection conn => conn -> Query -> IO (ConnStatement conn)
run :: Connection conn => conn -> Query -> [SqlValue] -> IO ()
runRaw :: Connection conn => conn -> Query -> IO ()
runMany :: Connection conn => conn -> Query -> [[SqlValue]] -> IO ()
clone :: Connection conn => conn -> IO conn
hdbiDriverName :: Connection conn => conn -> String
dbTransactionSupport :: Connection conn => conn -> Bool

-- | Statement prepared on database side or just in memory
class Typeable stmt => Statement stmt where executeRaw stmt = execute stmt [] executeMany stmt vals = forM_ vals $ \ val -> do { execute stmt val; reset stmt } fetchAllRows stmt = do { e <- f mempty; return $ (appEndo e) [] } where f acc = do { res <- fetchRow stmt; case res of { Just r -> f (acc `mappend` (Endo (r :))) Nothing -> return acc } } getColumnsCount stmt = fmap length $ getColumnNames stmt
execute :: Statement stmt => stmt -> [SqlValue] -> IO ()
executeRaw :: Statement stmt => stmt -> IO ()
executeMany :: Statement stmt => stmt -> [[SqlValue]] -> IO ()
statementStatus :: Statement stmt => stmt -> IO StatementStatus
finish :: Statement stmt => stmt -> IO ()
reset :: Statement stmt => stmt -> IO ()
fetchRow :: Statement stmt => stmt -> IO (Maybe [SqlValue])
fetchAllRows :: Statement stmt => stmt -> IO [[SqlValue]]
getColumnNames :: Statement stmt => stmt -> IO [Text]
getColumnsCount :: Statement stmt => stmt -> IO Int
originalQuery :: Statement stmt => stmt -> Query

-- | safe newtype wrapper for queries. Just lazy Text inside.
newtype Query
Query :: Text -> Query

-- | Unwrap query to lazy Text
unQuery :: Query -> Text

-- | Connection status
data ConnStatus

-- | Successfully connected
ConnOK :: ConnStatus

-- | Successfully disconnected, all statements must be closed at this state
ConnDisconnected :: ConnStatus

-- | Connection is in some bad state
ConnBad :: ConnStatus

-- | Wrapps the specific connection. You can write database-independent
--   code mixing it with database-dependent using <a>castConnection</a>
--   function to cast Wrapper to specific connection type, if you need.
data ConnWrapper
ConnWrapper :: conn -> ConnWrapper

-- | Statement's status returning by function <a>statementStatus</a>.
data StatementStatus

-- | Newly created statement
StatementNew :: StatementStatus

-- | Expression executed, now you can fetch the rows <a>Statement</a>
StatementExecuted :: StatementStatus

-- | Fetching is done, no more rows can be queried
StatementFetched :: StatementStatus

-- | Finished, no more actions with this statement
StatementFinished :: StatementStatus

-- | Wrapper around some specific <a>Statement</a> instance to write
--   database-independent code
data StmtWrapper
StmtWrapper :: stmt -> StmtWrapper

-- | Error throwing by driver when database operation fails
data SqlError

-- | Internal database error
SqlError :: String -> String -> SqlError

-- | Low level database-specific error code
seErrorCode :: SqlError -> String

-- | Error description
--   
--   Error description from the database client library
seErrorMsg :: SqlError -> String

-- | Driver-specific operational error
SqlDriverError :: String -> SqlError

-- | Error description
--   
--   Error description from the database client library
seErrorMsg :: SqlError -> String

-- | Cast wrapped connection to the specific connection type using
--   <a>cast</a> of <a>Typeable</a>. You can write database-specific code
--   safely casting wrapped connection to specific type dynamically.
castConnection :: Connection conn => ConnWrapper -> Maybe conn

-- | Cast wrapped statement to specific type. You can write
--   database-specific code safely casting wrapped statement to specific
--   type dynamically.
castStatement :: Statement stmt => StmtWrapper -> Maybe stmt

-- | Execute some code. If any uncaught exception occurs, run
--   <a>rollback</a> and re-raise it. Otherwise, run <a>commit</a> and
--   return.
--   
--   This function, therefore, encapsulates the logical property that a
--   transaction is all about: all or nothing.
--   
--   The <a>Connection</a> object passed in is passed directly to the
--   specified function as a convenience.
--   
--   This function traps <i>all</i> uncaught exceptions, not just
--   <a>SqlError</a>. Therefore, you will get a rollback for any exception
--   that you don't handle. That's probably what you want anyway.
--   
--   If there was an error while running <a>rollback</a>, this error will
--   not be reported since the original exception will be propogated back.
--   (You'd probably like to know about the root cause for all of this
--   anyway.) Feedback on this behavior is solicited.
withTransaction :: Connection conn => conn -> IO a -> IO a

-- | Create statement and execute monadic action using it. Safely finalize
--   Statement after action is done.
withStatement :: (Connection conn, Statement stmt, stmt ~ (ConnStatement conn)) => conn -> Query -> (stmt -> IO a) -> IO a
instance Typeable SqlError
instance Typeable Query
instance Typeable ConnStatus
instance Typeable StatementStatus
instance Typeable ConnWrapper
instance Typeable StmtWrapper
instance Eq SqlError
instance Show SqlError
instance Eq Query
instance Data Query
instance Ord Query
instance Read Query
instance Show Query
instance IsString Query
instance Monoid Query
instance NFData Query
instance Show ConnStatus
instance Read ConnStatus
instance Eq ConnStatus
instance Show StatementStatus
instance Read StatementStatus
instance Eq StatementStatus
instance Statement StmtWrapper
instance Connection ConnWrapper
instance Exception SqlError


-- | Written by John Goerzen, jgoerzen@complete.org
module Database.HDBI.DriverUtils

-- | List of weak pointers to childs with concurrent access
data ChildList stmt
ChildList :: TVar (IntMap (Weak stmt)) -> TVar Int -> MVar Int -> ChildList stmt
clList :: ChildList stmt -> TVar (IntMap (Weak stmt))

-- | Little hackish child counter, need to wait all child finalizers in
--   <a>closeAllChildren</a>
clCounter :: ChildList stmt -> TVar Int
clNextKey :: ChildList stmt -> MVar Int

-- | Close all children. Intended to be called by the <tt>disconnect</tt>
--   function in <tt>Connection</tt>.
--   
--   There may be a potential race condition wherein a call to newSth at
--   the same time as a call to this function may result in the new child
--   not being closed.
closeAllChildren :: Statement stmt => (ChildList stmt) -> IO ()

-- | Adds a new child to the existing list. Also takes care of registering
--   a finalizer for it, to remove it from the list when possible.
addChild :: Statement stmt => (ChildList stmt) -> stmt -> IO ()

-- | new empty child list
newChildList :: IO (ChildList stmt)


module Database.HDBI
