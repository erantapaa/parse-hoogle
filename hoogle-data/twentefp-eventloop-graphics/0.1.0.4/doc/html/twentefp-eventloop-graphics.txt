-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Used as Lab Assignments Environment at Univeriteit Twente
--   
@package twentefp-eventloop-graphics
@version 0.1.0.4


-- | In the <a>EventLoop</a> module, <a>Float</a>s are used to express
--   positions and other characteristics. As that package is also used in
--   the functional programming lab at the University of Twente,
--   compatibility with the <a>FPPrac</a> module is needed. That module
--   expresses a <a>Number</a> type which abstracts from <a>Int</a> and
--   <a>Double</a> types. This module is used to normalize both the
--   <a>Number</a> type and the original <a>Num</a> class instances defined
--   in Haskell.
module FPPrac.Graphics.NormalizeNumber

-- | Class to express that the instance <tt>a</tt> is able to be normalized
--   to a <a>Float</a>.
class Num a => NormalizeNumber a
normalize :: NormalizeNumber a => a -> Float

-- | How to normalize a <a>Float</a>

-- | How to normalize an <a>Int</a>

-- | How to normalize an <a>Integer</a>

-- | How to normalize a <a>Double</a>

-- | How to normalize a <a>Number</a>. This is definied in
--   <a>FPPrac.Prelude.Number</a> in the twentefp-number package
instance NormalizeNumber Number
instance NormalizeNumber Double
instance NormalizeNumber Integer
instance NormalizeNumber Int
instance NormalizeNumber Float


-- | All common types throughout the <a>EventLoop</a> module
module EventLoop.CommonTypes

-- | Type to express a position on the screen. It uses the format (x,y). As
--   Canvas is used in the example implementation, remember that the
--   lefttop corner is (0,0) and the leftbottom corner is (0, height of
--   screen).
type Pos = (Float, Float)

-- | Type to express the dimension of an element. It uses the format (w,h).
type Dimension = (Float, Float)

-- | The name of a graphical element. It is used for <a>Mouse</a> to
--   express the name of which element is clicked on.
type Element = [Char]

module EventLoop.Input

-- | The central <a>InputEvent</a> type.
data InputEvent

-- | A <a>Mouse</a> event.
InMouse :: Mouse -> InputEvent

-- | A <a>Keyboard</a> event.
InKeyboard :: Keyboard -> InputEvent

-- | A <a>SystemMessage</a> event.
InSysMessage :: SystemMessageIn -> InputEvent

-- | Datatype to express the different <a>Keyboard</a> events.
data Keyboard
KeyPress :: KeyboardButton -> Keyboard

-- | Type to express how a <a>KeyboardButton</a> is modelled.
type KeyboardButton = [Char]

-- | Datatype to express the different <a>Mouse</a> events. The <a>Pos</a>
--   expresses where on the screen the event happened. The <a>Element</a>
--   expresses on which top element on screen the event happened. The
--   <a>Element</a> value is the name of the <a>GObject</a>.
data Mouse

-- | Expresses a complete <a>MouseClick</a> consisting of a <a>MouseUp</a>
--   and a <a>MouseDown</a>.
MouseClick :: MouseButton -> Pos -> Element -> Mouse

-- | Expresses when a <a>MouseButton</a> moves upward.
MouseUp :: MouseButton -> Pos -> Element -> Mouse

-- | Expresses when a <a>MouseButton</a> is pushed down.
MouseDown :: MouseButton -> Pos -> Element -> Mouse

-- | The <a>MouseButton</a> on the mouse.
data MouseButton
MLeft :: MouseButton
MRight :: MouseButton
MMiddle :: MouseButton

-- | The different possible <a>SystemMessageIn</a>s.
data SystemMessageIn

-- | A request for the <a>Setup</a>. This should be generated when the
--   connection to a client is made. The answer should be a
--   <a>CanvasSetup</a> message.
Setup :: SystemMessageIn

-- | A request for the <a>Background</a>. This should be generated when the
--   connection to a client is made. The answer could be the background of
--   the graphical application.
Background :: SystemMessageIn

-- | When a timer has been spawn, each 'tick' a <a>Time</a> is generated by
--   the client to let the server know it is time.
Time :: SystemMessageIn

module EventLoop.Output.Graphical

-- | Graphical Responses Out
data Graphical

-- | Draw the graphical object with the given groupname.
Draw :: GObject -> Groupname -> Graphical

-- | Move an entire group to a new position possibly relative to the old
--   position.
MoveGroup :: Groupname -> Pos -> Relative -> Graphical

-- | Move a single element to a new position possibly relative to the old
--   position.
MoveElement :: Name -> Pos -> Relative -> Graphical

-- | Remove a group.
RemoveGroup :: Groupname -> Graphical

-- | Remove an element.
RemoveElement :: Name -> Graphical

-- | Clears all from the canvas.
ClearAll :: Graphical

-- | A general graphical object containing the common attributes of each
--   <a>Primitive</a>.
data GObject

-- | Graphical Object
GObject :: Name -> Primitive -> [GObject] -> GObject

-- | Name of the graphical object/element
name :: GObject -> Name

-- | The graphical primitive that should be drawn
prim :: GObject -> Primitive

-- | Children of the graphical primitive. Can be used to create composited
--   graphical components containing multiple <a>GObject</a>s.
children :: GObject -> [GObject]

-- | A container for Graphical Objects
Container :: [GObject] -> GObject

-- | Children of the graphical primitive. Can be used to create composited
--   graphical components containing multiple <a>GObject</a>s.
children :: GObject -> [GObject]

-- | Primitive graphical structures
data Primitive

-- | The text graphical primitive
Text :: Color -> Float -> Color -> Pos -> Float -> Font -> [Char] -> Bool -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The <a>Color</a> of the fill of the text
color :: Primitive -> Color

-- | The position on the screen of the text
position :: Primitive -> Pos

-- | The height of the text in pixels
size :: Primitive -> Float

-- | Which font to be used
font :: Primitive -> Font

-- | The actual text to be displayed
text :: Primitive -> [Char]

-- | Is the position the topleft corner of the text or the center of the
--   text
fromCenter :: Primitive -> Bool

-- | The line graphical primitive
Line :: Color -> Float -> [Pos] -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The list of positions the line should go through. A line will be drawn
--   from point 1 to point 2 to point...
positions :: Primitive -> [Pos]

-- | The rectangle graphical primitive
Rect :: Color -> Float -> Color -> Pos -> Dimension -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The <a>Color</a> of the fill of the text
color :: Primitive -> Color

-- | The position on the screen of the text
position :: Primitive -> Pos

-- | The dimensions of the rectangle
dimensions :: Primitive -> Dimension

-- | The arc graphical primitive. This is the part of a circle. When
--   startAng=0 and endAng=360 you get a full circle.
Arc :: Color -> Float -> Color -> Pos -> Float -> Float -> Float -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The <a>Color</a> of the fill of the text
color :: Primitive -> Color

-- | The position on the screen of the text
position :: Primitive -> Pos

-- | The radius of the arc
radius :: Primitive -> Float

-- | The starting angle of the arc in degrees.
startAng :: Primitive -> Float

-- | The ending angle of the arc in degrees.
endAng :: Primitive -> Float

-- | The name of a graphical object. Another synonym in the package used
--   for this is <a>Element</a>.
type Name = [Char]

-- | The groupname of a set of graphical objects.
type Groupname = [Char]

-- | The color expressed in (red, green, blue) code where each value is
--   between 0 &lt;= 255.
type Color = (Float, Float, Float)

-- | The font associated with a <a>Text</a> primitive.
type Font = [Char]

-- | A boolean expressing if an event should be carried out relative to the
--   old situation or to the absolute situation Example of this is when
--   moving an element. Should the move be relative to the old <a>Pos</a>
--   or to the absolute <a>Pos</a> on the screen.
type Relative = Bool


-- | Makeshift server to output a single <a>OutputEvent</a> to the client.
--   The function <a>outSingle</a> is the heart of this module.
module EventLoop.Output.Single

-- | Outputs a single <a>OutputEvent</a>. Right now only <a>Draw</a> events
--   are implemented. The server automatically determines the maximum
--   <a>Dimension</a>s of the picture and sends a <a>Setup</a> containing
--   those <a>Dimension</a>s.
outSingle :: OutputEvent -> IO ()

module EventLoop.Output

-- | The central <a>OutputEvent</a> type.
data OutputEvent
OutGraphical :: Graphical -> OutputEvent
OutSysMessage :: [SystemMessageOut] -> OutputEvent

-- | The different possible <a>SystemMessageOut</a>s.
data SystemMessageOut

-- | Answer to the <a>Setup</a> containing the dimensions of the canvas
--   that will be used.
CanvasSetup :: Dimension -> SystemMessageOut

-- | Request to create a timer at the clientside that will generate a
--   <a>Time</a> message each 'tick'.
Timer :: TimeData -> SystemMessageOut

-- | A request for the client to completely close the connection to the
--   server.
Close :: SystemMessageOut
data TimeData

-- | Tells that the timer should be on with the time in ms
On :: Int -> TimeData

-- | Tells that the timer should be off
Off :: TimeData

-- | Graphical Responses Out
data Graphical

-- | Draw the graphical object with the given groupname.
Draw :: GObject -> Groupname -> Graphical

-- | Move an entire group to a new position possibly relative to the old
--   position.
MoveGroup :: Groupname -> Pos -> Relative -> Graphical

-- | Move a single element to a new position possibly relative to the old
--   position.
MoveElement :: Name -> Pos -> Relative -> Graphical

-- | Remove a group.
RemoveGroup :: Groupname -> Graphical

-- | Remove an element.
RemoveElement :: Name -> Graphical

-- | Clears all from the canvas.
ClearAll :: Graphical

-- | A general graphical object containing the common attributes of each
--   <a>Primitive</a>.
data GObject

-- | Graphical Object
GObject :: Name -> Primitive -> [GObject] -> GObject

-- | Name of the graphical object/element
name :: GObject -> Name

-- | The graphical primitive that should be drawn
prim :: GObject -> Primitive

-- | Children of the graphical primitive. Can be used to create composited
--   graphical components containing multiple <a>GObject</a>s.
children :: GObject -> [GObject]

-- | A container for Graphical Objects
Container :: [GObject] -> GObject

-- | Children of the graphical primitive. Can be used to create composited
--   graphical components containing multiple <a>GObject</a>s.
children :: GObject -> [GObject]

-- | Primitive graphical structures
data Primitive

-- | The text graphical primitive
Text :: Color -> Float -> Color -> Pos -> Float -> Font -> [Char] -> Bool -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The <a>Color</a> of the fill of the text
color :: Primitive -> Color

-- | The position on the screen of the text
position :: Primitive -> Pos

-- | The height of the text in pixels
size :: Primitive -> Float

-- | Which font to be used
font :: Primitive -> Font

-- | The actual text to be displayed
text :: Primitive -> [Char]

-- | Is the position the topleft corner of the text or the center of the
--   text
fromCenter :: Primitive -> Bool

-- | The line graphical primitive
Line :: Color -> Float -> [Pos] -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The list of positions the line should go through. A line will be drawn
--   from point 1 to point 2 to point...
positions :: Primitive -> [Pos]

-- | The rectangle graphical primitive
Rect :: Color -> Float -> Color -> Pos -> Dimension -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The <a>Color</a> of the fill of the text
color :: Primitive -> Color

-- | The position on the screen of the text
position :: Primitive -> Pos

-- | The dimensions of the rectangle
dimensions :: Primitive -> Dimension

-- | The arc graphical primitive. This is the part of a circle. When
--   startAng=0 and endAng=360 you get a full circle.
Arc :: Color -> Float -> Color -> Pos -> Float -> Float -> Float -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The <a>Color</a> of the fill of the text
color :: Primitive -> Color

-- | The position on the screen of the text
position :: Primitive -> Pos

-- | The radius of the arc
radius :: Primitive -> Float

-- | The starting angle of the arc in degrees.
startAng :: Primitive -> Float

-- | The ending angle of the arc in degrees.
endAng :: Primitive -> Float

-- | The name of a graphical object. Another synonym in the package used
--   for this is <a>Element</a>.
type Name = [Char]

-- | The groupname of a set of graphical objects.
type Groupname = [Char]

-- | The color expressed in (red, green, blue) code where each value is
--   between 0 &lt;= 255.
type Color = (Float, Float, Float)

-- | The font associated with a <a>Text</a> primitive.
type Font = [Char]

-- | A boolean expressing if an event should be carried out relative to the
--   old situation or to the absolute situation Example of this is when
--   moving an element. Should the move be relative to the old <a>Pos</a>
--   or to the absolute <a>Pos</a> on the screen.
type Relative = Bool

-- | Outputs a single <a>OutputEvent</a>. Right now only <a>Draw</a> events
--   are implemented. The server automatically determines the maximum
--   <a>Dimension</a>s of the picture and sends a <a>Setup</a> containing
--   those <a>Dimension</a>s.
outSingle :: OutputEvent -> IO ()


-- | Complete import of all the exposed features of this library. The
--   Eventloop package is used to express the communication between a
--   Haskell server and a program modelling an 'IO Device'. This package
--   contains an example implementation of how such a server would like
--   when a browser is used as a graphical IO device also containing a
--   mouse and keyboard. The <a>InputEvent</a> models the possible mouse
--   and keyboard events. The <a>OutputEvent</a> models the possible
--   graphical output events. There are also input and output
--   systemmessages to communicate metadata between the Haskell server and
--   the graphical IO browser. The starting point for this example
--   implementation is <a>start</a>.
module EventLoop

-- | High-level function to start an eventloop. The eventloop takes an
--   <a>InputEvent</a> and outputs an <a>OutputEvent</a>. Starting place
--   for the example implementation of the eventloop. It takes a variable
--   of type a to hold information in between handler calls.
start :: (a -> InputEvent -> ([OutputEvent], a)) -> a -> IO ()

-- | Type to express a position on the screen. It uses the format (x,y). As
--   Canvas is used in the example implementation, remember that the
--   lefttop corner is (0,0) and the leftbottom corner is (0, height of
--   screen).
type Pos = (Float, Float)

-- | Type to express the dimension of an element. It uses the format (w,h).
type Dimension = (Float, Float)

-- | The name of a graphical element. It is used for <a>Mouse</a> to
--   express the name of which element is clicked on.
type Element = [Char]

-- | The central <a>InputEvent</a> type.
data InputEvent

-- | A <a>Mouse</a> event.
InMouse :: Mouse -> InputEvent

-- | A <a>Keyboard</a> event.
InKeyboard :: Keyboard -> InputEvent

-- | A <a>SystemMessage</a> event.
InSysMessage :: SystemMessageIn -> InputEvent

-- | Datatype to express the different <a>Keyboard</a> events.
data Keyboard
KeyPress :: KeyboardButton -> Keyboard

-- | Type to express how a <a>KeyboardButton</a> is modelled.
type KeyboardButton = [Char]

-- | Datatype to express the different <a>Mouse</a> events. The <a>Pos</a>
--   expresses where on the screen the event happened. The <a>Element</a>
--   expresses on which top element on screen the event happened. The
--   <a>Element</a> value is the name of the <a>GObject</a>.
data Mouse

-- | Expresses a complete <a>MouseClick</a> consisting of a <a>MouseUp</a>
--   and a <a>MouseDown</a>.
MouseClick :: MouseButton -> Pos -> Element -> Mouse

-- | Expresses when a <a>MouseButton</a> moves upward.
MouseUp :: MouseButton -> Pos -> Element -> Mouse

-- | Expresses when a <a>MouseButton</a> is pushed down.
MouseDown :: MouseButton -> Pos -> Element -> Mouse

-- | The <a>MouseButton</a> on the mouse.
data MouseButton
MLeft :: MouseButton
MRight :: MouseButton
MMiddle :: MouseButton

-- | The different possible <a>SystemMessageIn</a>s.
data SystemMessageIn

-- | A request for the <a>Setup</a>. This should be generated when the
--   connection to a client is made. The answer should be a
--   <a>CanvasSetup</a> message.
Setup :: SystemMessageIn

-- | A request for the <a>Background</a>. This should be generated when the
--   connection to a client is made. The answer could be the background of
--   the graphical application.
Background :: SystemMessageIn

-- | When a timer has been spawn, each 'tick' a <a>Time</a> is generated by
--   the client to let the server know it is time.
Time :: SystemMessageIn

-- | The central <a>OutputEvent</a> type.
data OutputEvent
OutGraphical :: Graphical -> OutputEvent
OutSysMessage :: [SystemMessageOut] -> OutputEvent

-- | The different possible <a>SystemMessageOut</a>s.
data SystemMessageOut

-- | Answer to the <a>Setup</a> containing the dimensions of the canvas
--   that will be used.
CanvasSetup :: Dimension -> SystemMessageOut

-- | Request to create a timer at the clientside that will generate a
--   <a>Time</a> message each 'tick'.
Timer :: TimeData -> SystemMessageOut

-- | A request for the client to completely close the connection to the
--   server.
Close :: SystemMessageOut

-- | Graphical Responses Out
data Graphical

-- | Draw the graphical object with the given groupname.
Draw :: GObject -> Groupname -> Graphical

-- | Move an entire group to a new position possibly relative to the old
--   position.
MoveGroup :: Groupname -> Pos -> Relative -> Graphical

-- | Move a single element to a new position possibly relative to the old
--   position.
MoveElement :: Name -> Pos -> Relative -> Graphical

-- | Remove a group.
RemoveGroup :: Groupname -> Graphical

-- | Remove an element.
RemoveElement :: Name -> Graphical

-- | Clears all from the canvas.
ClearAll :: Graphical

-- | A general graphical object containing the common attributes of each
--   <a>Primitive</a>.
data GObject

-- | Graphical Object
GObject :: Name -> Primitive -> [GObject] -> GObject

-- | Name of the graphical object/element
name :: GObject -> Name

-- | The graphical primitive that should be drawn
prim :: GObject -> Primitive

-- | Children of the graphical primitive. Can be used to create composited
--   graphical components containing multiple <a>GObject</a>s.
children :: GObject -> [GObject]

-- | A container for Graphical Objects
Container :: [GObject] -> GObject

-- | Children of the graphical primitive. Can be used to create composited
--   graphical components containing multiple <a>GObject</a>s.
children :: GObject -> [GObject]

-- | Primitive graphical structures
data Primitive

-- | The text graphical primitive
Text :: Color -> Float -> Color -> Pos -> Float -> Font -> [Char] -> Bool -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The <a>Color</a> of the fill of the text
color :: Primitive -> Color

-- | The position on the screen of the text
position :: Primitive -> Pos

-- | The height of the text in pixels
size :: Primitive -> Float

-- | Which font to be used
font :: Primitive -> Font

-- | The actual text to be displayed
text :: Primitive -> [Char]

-- | Is the position the topleft corner of the text or the center of the
--   text
fromCenter :: Primitive -> Bool

-- | The line graphical primitive
Line :: Color -> Float -> [Pos] -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The list of positions the line should go through. A line will be drawn
--   from point 1 to point 2 to point...
positions :: Primitive -> [Pos]

-- | The rectangle graphical primitive
Rect :: Color -> Float -> Color -> Pos -> Dimension -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The <a>Color</a> of the fill of the text
color :: Primitive -> Color

-- | The position on the screen of the text
position :: Primitive -> Pos

-- | The dimensions of the rectangle
dimensions :: Primitive -> Dimension

-- | The arc graphical primitive. This is the part of a circle. When
--   startAng=0 and endAng=360 you get a full circle.
Arc :: Color -> Float -> Color -> Pos -> Float -> Float -> Float -> Primitive

-- | <a>Color</a> of the edges of the text
edgeColor :: Primitive -> Color

-- | The edge thickness of the text (Should be 1 most of the time)
edgeThickness :: Primitive -> Float

-- | The <a>Color</a> of the fill of the text
color :: Primitive -> Color

-- | The position on the screen of the text
position :: Primitive -> Pos

-- | The radius of the arc
radius :: Primitive -> Float

-- | The starting angle of the arc in degrees.
startAng :: Primitive -> Float

-- | The ending angle of the arc in degrees.
endAng :: Primitive -> Float

-- | The name of a graphical object. Another synonym in the package used
--   for this is <a>Element</a>.
type Name = [Char]

-- | The groupname of a set of graphical objects.
type Groupname = [Char]

-- | The color expressed in (red, green, blue) code where each value is
--   between 0 &lt;= 255.
type Color = (Float, Float, Float)

-- | The font associated with a <a>Text</a> primitive.
type Font = [Char]

-- | A boolean expressing if an event should be carried out relative to the
--   old situation or to the absolute situation Example of this is when
--   moving an element. Should the move be relative to the old <a>Pos</a>
--   or to the absolute <a>Pos</a> on the screen.
type Relative = Bool

-- | Outputs a single <a>OutputEvent</a>. Right now only <a>Draw</a> events
--   are implemented. The server automatically determines the maximum
--   <a>Dimension</a>s of the picture and sends a <a>Setup</a> containing
--   those <a>Dimension</a>s.
outSingle :: OutputEvent -> IO ()
