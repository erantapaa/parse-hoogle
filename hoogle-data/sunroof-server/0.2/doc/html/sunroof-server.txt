-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monadic Javascript Compiler - Server Utilities
--   
--   Utilities to use Sunroof together with Kansas-Comet to create web
--   applications.
@package sunroof-server
@version 0.2


-- | The Sunroof server module provides infrastructure to use Sunroof
--   together with kansas-comet.
--   
--   It supports setting up a simple server with <a>sunroofServer</a> and
--   provides basic functions for serverside communication with the
--   connected website (<a>syncJS</a>, <a>asyncJS</a> and <a>rsyncJS</a>).
--   
--   This module also provides the abstractions for <a>Downlink</a> and
--   <a>Uplink</a>. They represent directed channels for sending data from
--   the server to the website and the other way aroun. The sent data is
--   queued and operations block properly if there is no data available.
module Language.Sunroof.Server

-- | Executes the Javascript in the browser and waits for the result value.
--   The result value is given the corresponding Haskell type, if possible
--   (see <a>SunroofResult</a>).
syncJS :: SunroofResult a => SunroofEngine -> JS t a -> IO (ResultOf a)

-- | Executes the Javascript in the browser without waiting for a result.
asyncJS :: SunroofEngine -> JS t () -> IO ()

-- | Executes the Javascript in the browser and waits for the result. The
--   returned value is just a reference to the computed value. This allows
--   to precompile values like function in the browser.
rsyncJS :: Sunroof a => SunroofEngine -> JS t a -> IO a

-- | Provides correspondant Haskell types for certain Sunroof types.
class Sunroof a => SunroofResult a where type family ResultOf a
jsonToValue :: SunroofResult a => Proxy a -> Value -> ResultOf a

-- | The <a>SunroofEngine</a> provides the verbosity level and kansas comet
--   document to the <a>SunroofApp</a>.
data SunroofEngine
SunroofEngine :: Document -> TVar Uniq -> Int -> CompilerOpts -> Maybe (TVar (Timings NominalDiffTime)) -> SunroofEngine

-- | The document comet uses to manage the connected website.
cometDocument :: SunroofEngine -> Document

-- | Unique number supply for our engine
uVar :: SunroofEngine -> TVar Uniq

-- | <tt>0</tt> for none, <tt>1</tt> for initializations, <tt>2</tt> for
--   commands done and <tt>3</tt> for a complete log.
engineVerbose :: SunroofEngine -> Int

-- | The options used to setup the compiler.
compilerOpts :: SunroofEngine -> CompilerOpts

-- | Performance timings of the compiler and communication.
timings :: SunroofEngine -> Maybe (TVar (Timings NominalDiffTime))

-- | Converts a JSON value to a Sunroof Javascript expression.
jsonToJS :: Value -> Expr

-- | Sets up a comet server ready to use with sunroof.
--   
--   <tt>sunroofServer opts app</tt>: The <tt>opts</tt> give various
--   configuration for the comet server. See <a>SunroofServerOptions</a>
--   for further information on this. The application to run is given by
--   <tt>app</tt>. It takes the current engine/document as parameter. The
--   document is needed for calls to <a>syncJS</a>, <a>asyncJS</a> and
--   <a>rsyncJS</a>.
--   
--   The server provides the kansas comet Javascript on the path
--   <tt>js/kansas-comet.js</tt>.
--   
--   Since <tt>kansas-comet.js</tt> is a JQuery plugin you have to also
--   load a decent version of <tt>jquery.js</tt> (or
--   <tt>jquery.min.js</tt>) and also <tt>jquery-json.js</tt>. They are
--   available at:
--   
--   <ul>
--   <li><a>http://jquery.com/</a></li>
--   <li><a>https://code.google.com/p/jquery-json/</a></li>
--   </ul>
--   
--   For the index file to setup the communication correctly with the comet
--   server it has to load the <tt>kansas-comet.js</tt> after the JQuery
--   code inside the <tt>head</tt> (assuming you placed the JQuery code
--   under <tt>js/</tt>):
--   
--   <pre>
--   &lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
--   &lt;script type="text/javascript" src="js/jquery-json.js"&gt;&lt;/script&gt;
--   &lt;script type="text/javascript" src="js/kansas-comet.js"&gt;&lt;/script&gt;
--   </pre>
--   
--   It also has to execute the following Javascript at the end of the
--   index file to initialize the communication:
--   
--   <pre>
--   &lt;script type="text/javascript"&gt;
--     $(document).ready(function() {
--       $.kc.connect("/ajax");
--     });
--   &lt;/script&gt;
--   </pre>
--   
--   The string <tt>/ajax</tt> has to be set to whatever the comet prefix
--   in the <a>Options</a> provided by the <a>SunroofServerOptions</a> is.
--   These snippits will work for the <a>def</a> instance.
--   
--   Additional debug information can be displayed in the browser when
--   adding the following element to the index file:
--   
--   <pre>
--   &lt;div id="debug-log"&gt;&lt;/div&gt;
--   </pre>
--   
--   Look into the example folder to see all of this in action.
sunroofServer :: SunroofServerOptions -> SunroofApp -> IO ()

-- | The <a>SunroofServerOptions</a> specify the configuration of the
--   sunroof comet server infrastructure.
--   
--   See <a>sunroofServer</a> and <a>SunroofServerOptions</a> for further
--   information.
data SunroofServerOptions
SunroofServerOptions :: Port -> FilePath -> FilePath -> Policy -> Options -> Int -> CompilerOpts -> SunroofServerOptions

-- | The port the server is reachable from.
cometPort :: SunroofServerOptions -> Port

-- | Will be used as base directory to search for all static files. Make
--   this path absolute to run the server from anywhere.
cometResourceBaseDir :: SunroofServerOptions -> FilePath

-- | The file to be used as index file (or landing page). This path is
--   given relative to the <a>cometResourceBaseDir</a>.
cometIndexFile :: SunroofServerOptions -> FilePath

-- | The default policy is to allow the <tt>css</tt>, <tt>img</tt> and
--   <tt>js</tt> folders to be used by the server, as well as the noDots
--   policy. This policy can be overwritten to allow delivery of other
--   files.
cometPolicy :: SunroofServerOptions -> Policy

-- | Provides the kansas comet options to use. Default options are provided
--   with the <a>def</a> instance.
cometOptions :: SunroofServerOptions -> Options

-- | <tt>0</tt> for none, <tt>1</tt> for initializations, <tt>2</tt> for
--   commands done and <tt>3</tt> for a complete log.
sunroofVerbose :: SunroofServerOptions -> Int

-- | The set of options to configure the Sunroof compiler. Default options
--   are provided with the <a>def</a> instance.
sunroofCompilerOpts :: SunroofServerOptions -> CompilerOpts

-- | A comet application takes the engine/document we are currently
--   communicating with and delivers the IO action to be executed as server
--   application.
type SunroofApp = SunroofEngine -> IO ()

-- | Setup a <a>SunroofEngine</a> for debugging.
debugSunroofEngine :: IO SunroofEngine

-- | <a>Downlink</a>s are an abstraction provided for sending Javascript
--   data from the server to the website. The type parameter describes the
--   elements that are transmited through the downlink.
data Downlink a

-- | Create a new downlink.
newDownlink :: (Sunroof a, SunroofArgument a) => SunroofEngine -> IO (Downlink a)

-- | Request data in the downlink. This may block until data is available.
getDownlink :: (Sunroof a, SunroofArgument a) => Downlink a -> JSB a

-- | Send data to the website.
putDownlink :: (Sunroof a, SunroofArgument a) => Downlink a -> JSA a -> IO ()

-- | <a>Uplink</a>s are an abstraction provided for sending Javascript data
--   from the website back to the server. Only data that can be translated
--   back to a Haskell value can be sent back. The type parameter describes
--   the elements that are transmited through the uplink.
data Uplink a

-- | Create a new uplink.
newUplink :: SunroofEngine -> IO (Uplink a)

-- | Request data in the uplink. This may block until data is available.
getUplink :: SunroofResult a => Uplink a -> IO (ResultOf a)

-- | Send Javascript data back to the server.
putUplink :: Sunroof a => a -> Uplink a -> JS t ()

-- | Timings for communication and compilation.
data Timings a
Timings :: !a -> !a -> !a -> Timings a

-- | How long spent compiling.
compileTime :: Timings a -> !a

-- | How long spent sending.
sendTime :: Timings a -> !a

-- | How long spent waiting for a response.
waitTime :: Timings a -> !a

-- | Create timings in the <a>SunroofEngine</a>.
newTimings :: SunroofEngine -> IO SunroofEngine

-- | Reset all timings.
resetTimings :: SunroofEngine -> IO ()

-- | Get timings from the <a>SunroofEngine</a>.
getTimings :: SunroofEngine -> IO (Timings NominalDiffTime)
instance Show a => Show (Timings a)
instance Semigroup a => Semigroup (Timings a)
instance Functor Timings
instance SunroofResult a => SunroofResult (JSArray a)
instance SunroofResult JSString
instance SunroofResult JSNumber
instance SunroofResult JSBool
instance SunroofResult ()
instance Default SunroofServerOptions
