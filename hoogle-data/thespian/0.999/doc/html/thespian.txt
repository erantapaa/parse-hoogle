-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lightweight Erlang-style actors for Haskell
--   
--   Lightweight Erlang-style actors for Haskell
@package thespian
@version 0.999


-- | This module implements Erlang-style actors (what Erlang calls
--   processes). It does not implement network distribution (yet?). Here is
--   an example:
--   
--   <pre>
--   act1 :: Actor
--   act1 = do
--       me &lt;- self
--       liftIO $ print <a>act1 started</a>
--       forever $ receive
--         [ Case $ ((n, a) :: (Int, Address)) -&gt;
--               if n &gt; 10000
--                   then do
--                       liftIO . throwIO $ NonTermination 
--                   else do
--                       liftIO . putStrLn $ <a>act1 got </a> ++ (show n) ++ <a> from </a> ++ (show a)
--                       send a (n+1, me)
--         , Case $ (e :: RemoteException) -&gt; 
--               liftIO . print $ <a>act1 received a remote exception</a>
--         , Default $ liftIO . print $ <a>act1: received a malformed message</a>
--         ]
--   
--   act2 :: Address -&gt; Actor
--   act2 addr = do
--       monitor addr
--       -- setFlag TrapRemoteExceptions
--       me &lt;- self
--       send addr (0 :: Int, me)
--       forever $ receive 
--         [ Case $ ((n, a) :: (Int, Address)) -&gt; do
--                       liftIO . putStrLn $ <a>act2 got </a> ++ (show n) ++ <a> from </a> ++ (show a)
--                       send a (n+1, me)
--         , Case $ (e :: RemoteException) -&gt; 
--               liftIO . print $ <a>act2 received a remote exception: </a> ++ (show e)
--         ]
--   
--   act3 :: Address -&gt; Actor
--   act3 addr = do
--       monitor addr
--       setFlag TrapRemoteExceptions
--       forever $ receive
--         [ Case $ (e :: RemoteException) -&gt; 
--               liftIO . print $ <a>act3 received a remote exception: </a> ++ (show e)
--         ]
--   
--   main = do
--       addr1 &lt;- spawn act1
--       addr2 &lt;- spawn (act2 addr1)
--       spawn (act3 addr2)
--       threadDelay 20000000
--   </pre>
module Control.Concurrent.Actor

-- | The address of an actor, used to send messages
data Address
data Handler
Case :: (m -> ActorM ()) -> Handler
Default :: (ActorM ()) -> Handler

-- | The actor monad, just a reader monad on top of <a>IO</a>.
type ActorM = ReaderT Context IO

-- | The type of an actor. It is just a monadic action in the <a>ActorM</a>
--   monad, returning ()
type Actor = ActorM ()
data RemoteException

-- | Exception raised by an actor on exit
data ActorExitNormal
data Flag
TrapRemoteExceptions :: Flag

-- | Sends a message from inside the <a>ActorM</a> monad
send :: Typeable m => Address -> m -> ActorM ()

-- | Infix form of <a>send</a>
(◁) :: Typeable m => Address -> m -> ActorM ()

-- | Infix form of <a>send</a> with the arguments flipped
(▷) :: Typeable m => m -> Address -> ActorM ()

-- | Used to obtain an actor's own address inside the actor
self :: ActorM Address

-- | Try to handle a message using a list of handlers. The first handler
--   matching the type of the message is used.
receive :: [Handler] -> ActorM ()

-- | Same as receive, but times out after a specified amount of time and
--   runs a default action
receiveWithTimeout :: Int -> [Handler] -> ActorM () -> ActorM ()

-- | Spawn a new actor with default flags
spawn :: Actor -> IO Address

-- | Monitors the actor at the specified address. If an exception is raised
--   in the monitored actor's thread, it is wrapped in an
--   <tt>ActorException</tt> and forwarded to the monitoring actor. If the
--   monitored actor terminates, an <tt>ActorException</tt> is raised in
--   the monitoring Actor
monitor :: Address -> ActorM ()

-- | Like <a>monitor</a>, but bi-directional
link :: Address -> ActorM ()

-- | Sets the specified flag in the actor's environment
setFlag :: Flag -> ActorM ()

-- | Clears the specified flag in the actor's environment
clearFlag :: Flag -> ActorM ()

-- | Toggles the specified flag in the actor's environment
toggleFlag :: Flag -> ActorM ()

-- | Checks if the specified flag is set in the actor's environment
testFlag :: Flag -> ActorM Bool
instance Typeable ActorExitNormal
instance Typeable Message
instance Typeable Address
instance Typeable Context
instance Typeable RemoteException
instance Show ActorExitNormal
instance Eq Flag
instance Enum Flag
instance Show RemoteException
instance Ord Address
instance Eq Address
instance Show Address
instance Show Message
instance Exception RemoteException
instance Exception ActorExitNormal
