-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lenses and traversals for the Cabal library.
--   
@package cabal-lenses
@version 0.4.5

module CabalLenses.Section

-- | A section of the cabal file.
data Section
Library :: Section
Executable :: Name -> Section
TestSuite :: Name -> Section
Benchmark :: Name -> Section

-- | All sections defined in <a>GenericPackageDescription</a>.
allSections :: GenericPackageDescription -> [Section]
instance Show Section
instance Eq Section


-- | Lenses for several data types of the <a>Version</a> module. All lenses
--   are named after their field names with a <tt>L</tt> appended.
module CabalLenses.Version
versionTagsL :: Lens' Version [String]
versionBranchL :: Lens' Version [Int]
intervals :: Iso' VersionRange [VersionInterval]
lowerBound :: Lens' VersionInterval LowerBound
version :: Lens' LowerBound Version
bound :: Lens' LowerBound Bound
upperBound :: Lens' VersionInterval UpperBound
noLowerBound :: LowerBound


-- | Lenses for several data types of the <a>Package</a> module. All lenses
--   are named after their field names with a <tt>L</tt> appended.
module CabalLenses.Package
pkgVersionL :: Lens' PackageIdentifier Version
pkgNameL :: Lens' PackageIdentifier PackageName
packageName :: Lens' Dependency PackageName
versionRange :: Lens' Dependency VersionRange
instance Wrapped PackageName
instance t ~ PackageName => Rewrapped PackageName t


-- | Lenses for several data types of the <a>PackageDescription</a> module.
--   All lenses are named after their field names with a <tt>L</tt>
--   appended.
module CabalLenses.PackageDescription
packageDescriptionL :: Lens' GenericPackageDescription PackageDescription
genPackageFlagsL :: Lens' GenericPackageDescription [Flag]
condTestSuitesL :: Lens' GenericPackageDescription [(String, CondTree ConfVar [Dependency] TestSuite)]
condLibraryL :: Lens' GenericPackageDescription (Maybe (CondTree ConfVar [Dependency] Library))
condExecutablesL :: Lens' GenericPackageDescription [(String, CondTree ConfVar [Dependency] Executable)]
condBenchmarksL :: Lens' GenericPackageDescription [(String, CondTree ConfVar [Dependency] Benchmark)]
testedWithL :: Lens' PackageDescription [(CompilerFlavor, VersionRange)]
testSuitesL :: Lens' PackageDescription [TestSuite]
synopsisL :: Lens' PackageDescription String
stabilityL :: Lens' PackageDescription String
specVersionRawL :: Lens' PackageDescription (Either Version VersionRange)
sourceReposL :: Lens' PackageDescription [SourceRepo]
pkgUrlL :: Lens' PackageDescription String
packageL :: Lens' PackageDescription PackageIdentifier
maintainerL :: Lens' PackageDescription String
licenseL :: Lens' PackageDescription License
licenseFileL :: Lens' PackageDescription FilePath
libraryL :: Lens' PackageDescription (Maybe Library)
homepageL :: Lens' PackageDescription String
extraTmpFilesL :: Lens' PackageDescription [FilePath]
extraSrcFilesL :: Lens' PackageDescription [FilePath]
executablesL :: Lens' PackageDescription [Executable]
descriptionL :: Lens' PackageDescription String
dataFilesL :: Lens' PackageDescription [FilePath]
dataDirL :: Lens' PackageDescription FilePath
customFieldsPDL :: Lens' PackageDescription [(String, String)]
copyrightL :: Lens' PackageDescription String
categoryL :: Lens' PackageDescription String
buildTypeL :: Lens' PackageDescription (Maybe BuildType)
buildDependsL :: Lens' PackageDescription [Dependency]
bugReports :: Lens' PackageDescription String
benchmarksL :: Lens' PackageDescription [Benchmark]
authorL :: Lens' PackageDescription String
libExposedL :: Lens' Library Bool
libBuildInfoL :: Lens' Library BuildInfo
exposedModulesL :: Lens' Library [ModuleName]
modulePathL :: Lens' Executable FilePath
exeNameL :: Lens' Executable String
buildInfoL :: Lens' Executable BuildInfo
testNameL :: Lens' TestSuite String
testInterfaceL :: Lens' TestSuite TestSuiteInterface
testEnabledL :: Lens' TestSuite Bool
testBuildInfoL :: Lens' TestSuite BuildInfo
benchmarkNameL :: Lens' Benchmark String
benchmarkInterfaceL :: Lens' Benchmark BenchmarkInterface
benchmarkEnabledL :: Lens' Benchmark Bool
benchmarkBuildInfoL :: Lens' Benchmark BuildInfo
targetBuildDependsL :: Lens' BuildInfo [Dependency]
optionsL :: Lens' BuildInfo [(CompilerFlavor, [String])]
ldOptionsL :: Lens' BuildInfo [String]
includesL :: Lens' BuildInfo [FilePath]
includeDirsL :: Lens' BuildInfo [FilePath]
hsSourceDirsL :: Lens' BuildInfo [FilePath]
extraLibsL :: Lens' BuildInfo [String]
extraLibDirsL :: Lens' BuildInfo [String]
defaultLanguageL :: Lens' BuildInfo (Maybe Language)
cppOptionsL :: Lens' BuildInfo [String]
ccOptionsL :: Lens' BuildInfo [String]
cSourcesL :: Lens' BuildInfo [FilePath]
condTreeDataL :: Lens' (CondTree v_a7Gy c_a7Gz a_a7GA) a_a7GA
condTreeConstraintsL :: Lens' (CondTree v_a7Gy c_a7Gz a_a7GA) c_a7Gz
condTreeComponentsL :: Lens (CondTree v_a7Gy c_a7Gz a_a7GA) (CondTree v_ac2V c_a7Gz a_a7GA) [(Condition v_a7Gy, CondTree v_a7Gy c_a7Gz a_a7GA, Maybe (CondTree v_a7Gy c_a7Gz a_a7GA))] [(Condition v_ac2V, CondTree v_ac2V c_a7Gz a_a7GA, Maybe (CondTree v_ac2V c_a7Gz a_a7GA))]

module CabalLenses.CondVars

-- | The variables that are used to resolve the conditionals inside of the
--   cabal file. Holds the enable state of the cabal flags, the used OS,
--   ARCH, CompilerFlavor and compiler version.
data CondVars
CondVars :: FlagMap -> OS -> Arch -> CompilerFlavor -> Maybe Version -> CondVars

-- | the enable state of the flags, initialized with the default flag
--   values in the cabal file
flags :: CondVars -> FlagMap

-- | the used OS, by default the one cabal was build on
os :: CondVars -> OS

-- | the used ARCH, by default the one cabal was build on
arch :: CondVars -> Arch

-- | the used CompilerFlavor, by default the one cabal was build on
compilerFlavor :: CondVars -> CompilerFlavor

-- | the user specified compiler version
compilerVersion :: CondVars -> Maybe Version

-- | Create a <a>CondVars</a> from the default flags of the cabal package
--   description. The <a>os</a>, <a>arch</a> and <a>compilerFlavor</a>
--   fields are initialized by the ones the cabal library was build on.
fromDefaults :: GenericPackageDescription -> CondVars

-- | Enable the given flag in <a>CondVars</a>.
enableFlag :: FlagName -> CondVars -> CondVars

-- | Disable the given flag in <a>CondVars</a>.
disableFlag :: FlagName -> CondVars -> CondVars

-- | Evaluate the <a>Condition</a> using the <a>CondVars</a>.
eval :: CondVars -> Condition ConfVar -> Bool
instance Show CondVars

module CabalLenses.Traversals.BuildInfo

-- | A traversal for all <a>BuildInfo</a> of all <a>Section</a>
allBuildInfo :: Traversal' GenericPackageDescription BuildInfo

-- | A traversal for all <a>BuildInfo</a> of <a>Section</a>.
buildInfo :: Section -> Traversal' GenericPackageDescription BuildInfo

-- | A traversal for the <a>BuildInfo</a> of <a>Section</a> that match
--   <a>CondVars</a>.
buildInfoIf :: CondVars -> Section -> Traversal' GenericPackageDescription BuildInfo

module CabalLenses.Traversals.Dependency

-- | A traversal for all <a>Dependency</a> of all <a>Section</a>.
allDependency :: Traversal' GenericPackageDescription Dependency

-- | A traversal for all <a>Dependency</a> of all <a>Section</a> that match
--   <a>CondVars</a>.
allDependencyIf :: CondVars -> Traversal' GenericPackageDescription Dependency

-- | A traversal for all <a>Dependency</a> of <a>Section</a>.
dependency :: Section -> Traversal' GenericPackageDescription Dependency

-- | A traversal for the <a>Dependency</a> of <a>Section</a> that match
--   <a>CondVars</a>.
dependencyIf :: CondVars -> Section -> Traversal' GenericPackageDescription Dependency

module CabalLenses
