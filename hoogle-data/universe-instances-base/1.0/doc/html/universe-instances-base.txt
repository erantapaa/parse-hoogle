-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Universe instances for types from the base package
--   
--   Universe instances for types from the base package
@package universe-instances-base
@version 1.0

module Data.Universe.Instances.Base

-- | Creating an instance of this class is a declaration that your type is
--   recursively enumerable (and that <a>universe</a> is that enumeration).
--   In particular, you promise that any finite inhabitant has a finite
--   index in <a>universe</a>, and that no inhabitant appears at two
--   different finite indices.
class Universe a
universe :: Universe a => [a]

-- | Creating an instance of this class is a declaration that your
--   <a>universe</a> eventually ends. Minimal definition: no methods
--   defined. By default, <tt>universeF = universe</tt>, but for some types
--   (like <a>Either</a>) the <a>universeF</a> method may have a more
--   intuitive ordering.
class Universe a => Finite a
universeF :: Finite a => [a]
instance (Ord a, Finite a, Finite b) => Finite (a -> b)
instance Finite a => Finite (Last a)
instance Finite a => Finite (First a)
instance Finite a => Finite (Dual a)
instance Finite a => Finite (Product a)
instance Finite a => Finite (Sum a)
instance Finite Any
instance Finite All
instance (Finite a, Finite b, Finite c, Finite d, Finite e) => Finite (a, b, c, d, e)
instance (Finite a, Finite b, Finite c, Finite d) => Finite (a, b, c, d)
instance (Finite a, Finite b, Finite c) => Finite (a, b, c)
instance (Finite a, Finite b) => Finite (a, b)
instance (Finite a, Finite b) => Finite (Either a b)
instance Finite a => Finite (Maybe a)
instance Finite Word64
instance Finite Word32
instance Finite Word16
instance Finite Word8
instance Finite Word
instance Finite Int64
instance Finite Int32
instance Finite Int16
instance Finite Int8
instance Finite Int
instance Finite Ordering
instance Finite Char
instance Finite Bool
instance Finite ()
instance (Finite a, Ord a, Universe b) => Universe (a -> b)
instance a ~ Integer => Universe (Ratio a)
instance Universe a => Universe (Last a)
instance Universe a => Universe (First a)
instance Universe a => Universe (Dual a)
instance Universe a => Universe (Product a)
instance Universe a => Universe (Sum a)
instance Universe Any
instance Universe All
instance Universe a => Universe [a]
instance (Universe a, Universe b, Universe c, Universe d, Universe e) => Universe (a, b, c, d, e)
instance (Universe a, Universe b, Universe c, Universe d) => Universe (a, b, c, d)
instance (Universe a, Universe b, Universe c) => Universe (a, b, c)
instance (Universe a, Universe b) => Universe (a, b)
instance Universe a => Universe (Maybe a)
instance (Universe a, Universe b) => Universe (Either a b)
instance Universe Word64
instance Universe Word32
instance Universe Word16
instance Universe Word8
instance Universe Word
instance Universe Int64
instance Universe Int32
instance Universe Int16
instance Universe Int8
instance Universe Int
instance Universe Integer
instance Universe Ordering
instance Universe Char
instance Universe Bool
instance Universe ()
