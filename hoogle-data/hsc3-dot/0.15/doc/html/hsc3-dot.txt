-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | haskell supercollider graph drawing
--   
@package hsc3-dot
@version 0.15


-- | Dot types.
module Sound.SC3.UGen.Dot.Type

-- | Dot output formats.
data Dot_Format
DOT :: Dot_Format
SVG :: Dot_Format
SVG_GZ :: Dot_Format

-- | Dot options record.
data Dot_Options
Dot_Options :: Bool -> Bool -> Dot_Format -> Bool -> Int -> Bool -> Bool -> Bool -> FilePath -> String -> String -> String -> String -> Int -> Maybe (Double, Double) -> Dot_Options

-- | Select <tt>record</tt> or <tt>html/table</tt> rendering.
use_tables :: Dot_Options -> Bool

-- | Select edge rendering
use_splines :: Dot_Options -> Bool

-- | Select viewer format.
output_format :: Dot_Options -> Dot_Format

-- | Select output port edge location.
fix_edge_location :: Dot_Options -> Bool

-- | Printing precision for constants.
numeric_precision :: Dot_Options -> Int

-- | Print to precision even if not required
indicate_precision :: Dot_Options -> Bool

-- | Draw controls within UGen input port slots.
inline_controls :: Dot_Options -> Bool

-- | Elide control names if <a>False</a>.
display_control_names :: Dot_Options -> Bool

-- | File name (without suffix).
output_directory :: Dot_Options -> FilePath

-- | File name (without suffix).
output_file_name :: Dot_Options -> String

-- | <tt>dot</tt> file viewer (ie. "dotty")
dot_viewer :: Dot_Options -> String

-- | <tt>svg</tt> file viewer (ie. "rsvg-view","inkview")
svg_viewer :: Dot_Options -> String

-- | Name of font to use
font_name :: Dot_Options -> String

-- | Font size
font_size :: Dot_Options -> Int

-- | Graph box size (inches)
graph_size :: Dot_Options -> Maybe (Double, Double)
instance Eq Dot_Format


-- | Implementation of <tt>Dot</tt> language writer.
module Sound.SC3.UGen.Dot.Internal

-- | Bracket with elements.
bracket1 :: (a, a) -> [a] -> [a]

-- | Bracket with lists.
bracket :: ([a], [a]) -> [a] -> [a]

-- | <a>bracket</a> with double quotes.
string_pp :: String -> String

-- | <a>bracket</a> with double quotes and braces.
label_pp :: String -> String

-- | Key value pair.
type Attr = (String, String)

-- | Dot attributes are written <tt>key=value</tt>.
attr_pp :: Attr -> String

-- | If <tt>value</tt> is <a>null</a> then <a>Nothing</a>.
attr_pp_maybe :: Attr -> Maybe String

-- | Attribute lists are in square brackets and comma seperated.
attr_list_pp :: [Attr] -> String

-- | Attribute sets are named and semi-colon terminated.
attr_set_pp :: String -> [Attr] -> String

-- | Type specialised <a>show</a>.
int_pp :: Int -> String

-- | Size is given as <tt>(width,height)</tt>.
size_pp :: (Double, Double) -> String

-- | <a>toLower</a> of <a>show</a>.
bool_pp :: Bool -> String

-- | Basic attribute sets given <a>Dot_Options</a>.
std_style :: Dot_Options -> [String]

-- | Generate dot representation of the provided unit generator graph.
dotGraph :: Dot_Options -> Graph -> String

-- | View <tt>dot</tt> graph according to <a>Dot_Options</a>.
view_with :: Dot_Options -> String -> IO ()

-- | Input port.
data IP
IP_Label :: String -> IP
IP_Port :: String -> Char -> Int -> IP
IP_Const :: (Maybe String, String, Int) -> Sample -> IP

-- | <a>reverse</a> of <i>f</i> of <a>reverse</a>.
--   
--   <pre>
--   let drop_while_right f = right_variant (dropWhile f)
--   in drop_while_right isUpper "abcDEF" == "abc"
--   </pre>
right_variant :: ([a] -> [b]) -> [a] -> [b]

-- | Limited precision PP for <a>Sample</a>, no scientific notation.
--   
--   <pre>
--   map (limit_precision_p True 2) [1,1.25,1.12345,0,0.05,pi*1e8,1e9]
--   </pre>
limit_precision_p :: Bool -> Int -> Sample -> String

-- | Limited precision PP for <a>Sample</a>, with scientific notation.
--   
--   <pre>
--   map (limit_precision_e 3) [1,1.25,0.05,pi*1e8,1e9]
--   </pre>
limit_precision_e :: Int -> Sample -> String

-- | Variant selecting scientific notation more cautiously than haskells
--   default PP.
--   
--   <pre>
--   map (limit_precision True 3) [1,1.25,0.05,0,pi*1e8,1e9]
--   </pre>
limit_precision :: Bool -> Int -> Sample -> String

-- | Variant of <a>limit_precision</a> reading parameters from
--   <a>Dot_Options</a>.
limit_precision_o :: Dot_Options -> Sample -> String

-- | IP in record form.
ip_record :: Dot_Options -> IP -> String

-- | Very rudimentary HTML escaping.
escape_html :: String -> String

-- | <a>IP</a> as <tt>HTML</tt> string.
ip_html :: Dot_Options -> IP -> String
record :: Dot_Options -> String -> String -> ([IP], [IP]) -> String
table :: Dot_Options -> String -> String -> ([IP], [IP]) -> String
dot_edge :: Dot_Options -> Graph -> Edge -> String
input :: Dot_Options -> Graph -> Node -> FromPort -> Int -> IP
dot_node_u :: Dot_Options -> Graph -> Node -> String
dot_node_k_color :: Node -> Attr
dot_node_k_rec :: Dot_Options -> Node -> String
dot_node_k_html :: Dot_Options -> Node -> String
dot_node_k :: Dot_Options -> Node -> String

-- | Considering <a>output_format</a> read either the environment variable
--   <tt>DOTVIEWER</tt> or <tt>SVGVIEWER</tt>, the default values are
--   <a>dot_viewer</a> and <a>svg_viewer</a>.
get_viewer :: Dot_Options -> IO String


-- | Typeclass for <a>Drawable</a> values.
module Sound.SC3.UGen.Dot.Class

-- | Draw the unit generator graph provided using the viewer at the
--   environment variable <tt>DOTVIEWER</tt>, or <tt>dotty</tt> if that
--   variable is not defined.
class Drawable a
dot_with_opt :: Drawable a => Dot_Options -> a -> String

-- | <a>Graph</a>s are <a>Drawable</a>, by <a>dotGraph</a>.

-- | <a>UGens</a>s are <a>Drawable</a>, by <a>ugen_to_graph</a>.

-- | <a>Synthdef</a>s are <a>Drawable</a>, by <a>synthdefGraph</a>.
instance Drawable Synthdef
instance Drawable UGen
instance Drawable Graph


-- | Module to provide graph drawing of unit generator graphs. The output
--   is in the form of a dot graph, which can be layed out using the
--   <tt>graphviz</tt> tools, see <a>http://graphviz.org</a>.
--   
--   <pre>
--   import Sound.SC3.ID
--   import Sound.SC3.UGen.Dot
--   </pre>
--   
--   Simple a-rate only graph.
--   
--   <pre>
--   draw (out 0 (sinOsc AR 440 0 * 0.1))
--   </pre>
--   
--   
--   As above, but using the <i>record</i> interface.
--   
--   <pre>
--   import Sound.SC3.UGen.Dot.Type
--   </pre>
--   
--   <pre>
--   let o = dot_options {use_tables = False}
--   in draw_with_opt o (out 0 (sinOsc AR 440 0 * 0.1))
--   </pre>
--   
--   
--   With k-rate subgraph.
--   
--   <pre>
--   let f = lfSaw KR 1 0 * 220 + 440
--   in draw (out 0 (sinOsc AR f 0 * 0.1))
--   </pre>
--   
--   
--   With k-rate &amp; i-rate subgraphs
--   
--   <pre>
--   let {l = rand 'a' 200 400
--       ;m = rand 'b' l 600
--       ;a = rand 'c' 500 900
--       ;f = lfSaw KR 1 0 * m + a}
--   in draw (out 0 (sinOsc AR f 0 * 0.1))
--   </pre>
--   
--   
--   With control input
--   
--   <pre>
--   let f = control KR "freq" 440
--   in draw (out 0 (sinOsc AR f 0 * 0.1))
--   </pre>
--   
--   
--   As above but with inlined controls.
--   
--   <pre>
--   let {f = control KR "freq" 440
--       ;o = dot_options {inline_controls = True}}
--   in draw_with_opt o (out 0 (sinOsc AR f 0 * 0.1))
--   </pre>
--   
--   
--   As above but without control name label.
--   
--   <pre>
--   let {o = dot_options {inline_controls = True
--                        ,display_control_names = False}
--       ;f = control KR "freq" 440}
--   in draw_with_opt o (out 0 (sinOsc AR f 0 * 0.1))
--   </pre>
--   
--   
--   With multiple channel expansion.
--   
--   <pre>
--   let f = mce2 440 220
--   in draw (out 0 (sinOsc AR f 0 * 0.1))
--   </pre>
--   
--   
--   With multiple root graph.
--   
--   <pre>
--   let {f = mce2 440 220 + in' 2 KR 0
--       ;o1 = sinOsc AR f 0 * 0.1
--       ;o2 = sinOsc KR (mce2 0.25 0.35) 0 * mce2 10 15 }
--   in draw (mrg [out 0 o1,out 0 o2])
--   </pre>
--   
--   
--   With multiple channel UGen.
--   
--   <pre>
--   draw (out 0 (pan2 (sinOsc AR 440 0 * 0.1) 0 1))
--   </pre>
--   
--   
--   With reserved labels (ie. <a>,</a>,&amp;), and fixed size graph (size
--   in inches).
--   
--   <pre>
--   let o = svg_options {graph_size = Just (1,4)}
--   in draw_with_opt o (out 0 (sinOsc AR 440 0 &gt;* 0))
--   </pre>
--   
module Sound.SC3.UGen.Dot

-- | <a>dot_with_opt</a> of <a>dot_options</a>.
dot :: Drawable a => a -> String

-- | <a>dot_with_opt</a> of <a>svg_options</a>.
dot_svg :: Drawable a => a -> String

-- | <a>view_with</a> of <a>dot_with_opt</a>.
draw_with_opt :: Drawable a => Dot_Options -> a -> IO ()

-- | <a>draw_with_opt</a> of <a>dot_options</a>.
draw :: Drawable a => a -> IO ()

-- | <a>draw_with_opt</a> of <a>svg_options</a>.
draw_svg :: Drawable a => a -> IO ()

-- | Default <tt>dot</tt> format <a>Dot_Options</a>.
--   
--   <pre>
--   std_style dot_options
--   </pre>
dot_options :: Dot_Options

-- | Default <tt>svg</tt> format <a>Dot_Options</a>.
svg_options :: Dot_Options
