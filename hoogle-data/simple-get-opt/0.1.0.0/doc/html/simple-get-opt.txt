-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple library for processing command-line options.
--   
--   A simple library for processing command-line options. The library
--   captures a common usage pattern of the GetOpt module form the standard
--   libraries.
@package simple-get-opt
@version 0.1.0.0


-- | Provides support for processing command-line arguments. This is a
--   simple wrapper around get-opt. Here is an example of a typical usage:
--   
--   <pre>
--   data Settings = Settings
--     { verbose :: Bool
--     , inPar   :: Int
--     , files   :: [String]
--     }
--   
--   options :: OptSpec Settings
--   options = OptSpec
--     { progDefaults = Settings { verbose = False
--                               , inPar   = 1
--                               , files   = []
--                               }
--   
--     , progOptions =
--         [ Option ['v'] ["verbose"]
--           "Display more information while working."
--           $ NoArg $ \s -&gt; Right s { verbose = True }
--   
--         , Option ['p'] ["par"]
--           "Process that many files at once."
--           $ ReqArg "NUM" $ \a s -&gt;
--             case readMaybe a of
--               Just n | n &gt; 0  -&gt; Right s { inPar = n }
--               _               -&gt; Left "Invalid value for `par`"
--         ]
--   
--     , progParamDocs =
--         [ ("FILES",   "The files that need processing.") ]
--   
--     , progParams = \p s -&gt; Right s { files = p : files s }
--     }
--   </pre>
--   
--   Here is what the usage information looks like:
--   
--   <pre>
--   *Main&gt; dumpUsage options 
--   Parameters:
--     FILES    The files that need processing.
--   
--   Flags:
--     -v      --verbose  Display more information while working.
--     -p NUM  --par=NUM  Process that many files at once.
--   </pre>
module SimpleGetOpt

-- | Get the command-line options and process them according to the given
--   spec. The options will be permuted to get flags.
getOpts :: OptSpec a -> IO a

-- | Specification of a collection of options, described by type
--   <tt>a</tt>.
data OptSpec a
OptSpec :: a -> [OptDescr a] -> [(String, String)] -> (String -> OptSetter a) -> OptSpec a

-- | Default options. This is what is used if no other options are
--   provided.
progDefaults :: OptSpec a -> a

-- | A list of options and command-line flags.
progOptions :: OptSpec a -> [OptDescr a]

-- | Documentatio for the free-form parameters.
progParamDocs :: OptSpec a -> [(String, String)]

-- | Add a parameter that is not an option or a flag (i.e., this is just a
--   free form command line parameter).
progParams :: OptSpec a -> String -> OptSetter a

-- | Describe an option.
data OptDescr a
Option :: [Char] -> [String] -> String -> ArgDescr a -> OptDescr a
optShortFlags :: OptDescr a -> [Char]
optLongFlags :: OptDescr a -> [String]
optDescription :: OptDescr a -> String
optArgument :: OptDescr a -> ArgDescr a

-- | Manipulate options of type <tt>a</tt>, with support for errors.
type OptSetter a = a -> Either String a

-- | Describe an option argumnet.
data ArgDescr a

-- | This option does not take an argument.
NoArg :: (OptSetter a) -> ArgDescr a

-- | This optoin has a required arugment. The string describes the type of
--   the argument.
ReqArg :: String -> (String -> OptSetter a) -> ArgDescr a

-- | This optoin has an optional arugment. The string describes the type of
--   the argument.
OptArg :: String -> (Maybe String -> OptSetter a) -> ArgDescr a

-- | Show the program's usage information on <a>stderr</a>.
dumpUsage :: OptSpec a -> IO ()

-- | Print the given messages on <a>stderr</a> and show the program's usage
--   info.
reportUsageError :: OptSpec a -> [String] -> IO b

-- | A string descibing the options.
usageString :: OptSpec a -> String
