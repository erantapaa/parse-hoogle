-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Accelerate instances for vect-floating types
--   
@package vect-floating-accelerate
@version 0.1.0.4


-- | This module exports vect-floating instances to make Vec2, Normal2,
--   Vec3, Normal3, Vec4, Normal4, Quaternion, and UnitQuaternion
--   compatible with accelerate.
--   
--   The instances are defined:
--   
--   <a>Vec2</a> Accelerate Instances:
--   
--   <ul>
--   <li><pre>instance <a>Elt</a> a =&gt; <a>Elt</a> (<a>Vec2</a>
--   a)</pre></li>
--   <li><pre>instance <a>IsTuple</a> (<a>Vec2</a> a)</pre></li>
--   <li><pre>instance (<a>Lift</a> <a>Exp</a> a, <a>Elt</a> (<a>Plain</a>
--   a)) =&gt; <a>Lift</a> <a>Exp</a> (<a>Vec2</a> a)</pre></li>
--   <li><pre>instance (<a>Elt</a> a) =&gt; <a>Unlift</a> <a>Exp</a>
--   (<a>Vec2</a> (<a>Exp</a> a))</pre></li>
--   </ul>
--   
--   <a>Normal2</a> Accelerate Instances:
--   
--   <ul>
--   <li><pre>instance (<a>Elt</a> a, <a>Floating</a> a) =&gt; <a>Elt</a>
--   (<a>Normal2</a> a)</pre></li>
--   <li><pre>instance <a>Floating</a> a =&gt; <a>IsTuple</a>
--   (<a>Normal2</a> a)</pre></li>
--   <li><pre>instance (<a>Lift</a> <a>Exp</a> a, <a>Elt</a> (<a>Plain</a>
--   a), <a>Floating</a> a, <a>Floating</a> (<a>Plain</a> a)) =&gt;
--   <a>Lift</a> <a>Exp</a> (<a>Normal2</a> a)</pre></li>
--   <li><pre>instance (<a>Elt</a> a, <a>Floating</a> a, <a>IsFloating</a>
--   a) =&gt; <a>Unlift</a> <a>Exp</a> (<a>Normal2</a> (<a>Exp</a>
--   a))</pre></li>
--   </ul>
--   
--   <a>Vec3</a> Accelerate Instances:
--   
--   <ul>
--   <li><pre>instance <a>Elt</a> a =&gt; <a>Elt</a> (<a>Vec3</a>
--   a)</pre></li>
--   <li><pre>instance <a>IsTuple</a> (<a>Vec3</a> a)</pre></li>
--   <li><pre>instance (<a>Lift</a> <a>Exp</a> a, <a>Elt</a> (<a>Plain</a>
--   a)) =&gt; <a>Lift</a> <a>Exp</a> (<a>Vec3</a> a)</pre></li>
--   <li><pre>instance <a>Elt</a> a =&gt; <a>Unlift</a> <a>Exp</a>
--   (<a>Vec3</a> (<a>Exp</a> a))</pre></li>
--   </ul>
--   
--   <a>Normal3</a> Accelerate Instances:
--   
--   <ul>
--   <li><pre>instance (<a>Elt</a> a, <a>Floating</a> a) =&gt; <a>Elt</a>
--   (<a>Normal3</a> a)</pre></li>
--   <li><pre>instance <a>Floating</a> a =&gt; <a>IsTuple</a>
--   (<a>Normal3</a> a)</pre></li>
--   <li><pre>instance (<a>Lift</a> <a>Exp</a> a, <a>Elt</a> (<a>Plain</a>
--   a), <a>Floating</a> a, <a>Floating</a> (<a>Plain</a> a)) =&gt;
--   <a>Lift</a> <a>Exp</a> (<a>Normal3</a> a)</pre></li>
--   <li><pre>instance (<a>Elt</a> a, <a>Floating</a> a, <a>IsFloating</a>
--   a) =&gt; <a>Unlift</a> <a>Exp</a> (<a>Normal3</a> (<a>Exp</a>
--   a))</pre></li>
--   </ul>
--   
--   <a>Vec4</a> Accelerate Instances:
--   
--   <ul>
--   <li><pre>instance <a>Elt</a> a =&gt; <a>Elt</a> (<a>Vec4</a>
--   a)</pre></li>
--   <li><pre>instance <a>IsTuple</a> (<a>Vec4</a> a)</pre></li>
--   <li><pre>instance (<a>Lift</a> <a>Exp</a> a, <a>Elt</a> (<a>Plain</a>
--   a)) =&gt; <a>Lift</a> <a>Exp</a> (<a>Vec4</a> a)</pre></li>
--   <li><pre>instance <a>Elt</a> a =&gt; <a>Unlift</a> <a>Exp</a>
--   (<a>Vec4</a> (<a>Exp</a> a))</pre></li>
--   </ul>
--   
--   <a>Normal4</a> Accelerate Instances:
--   
--   <ul>
--   <li><pre>instance (<a>Elt</a> a, <a>Floating</a> a) =&gt; <a>Elt</a>
--   (<a>Normal4</a> a)</pre></li>
--   <li><pre>instance <a>Floating</a> a =&gt; <a>IsTuple</a>
--   (<a>Normal4</a> a)</pre></li>
--   <li><pre>instance (<a>Lift</a> <a>Exp</a> a, <a>Elt</a> (<a>Plain</a>
--   a), <a>Floating</a> a, <a>Floating</a> (<a>Plain</a> a)) =&gt;
--   <a>Lift</a> <a>Exp</a> (<a>Normal4</a> a)</pre></li>
--   <li><pre>instance (<a>Elt</a> a, <a>Floating</a> a, <a>IsFloating</a>
--   a) =&gt; <a>Unlift</a> <a>Exp</a> (<a>Normal4</a> (<a>Exp</a>
--   a))</pre></li>
--   </ul>
--   
--   <a>Quaternion</a> Accelerate Instances:
--   
--   <ul>
--   <li><pre>instance <a>Elt</a> a =&gt; <a>Elt</a> (<a>Quaternion</a>
--   a)</pre></li>
--   <li><pre>instance <a>IsTuple</a> (<a>Quaternion</a> a)</pre></li>
--   <li><pre>instance (<a>Lift</a> <a>Exp</a> a, <a>Elt</a> (<a>Plain</a>
--   a)) =&gt; <a>Lift</a> <a>Exp</a> (<a>Quaternion</a> a)</pre></li>
--   <li><pre>instance <a>Elt</a> a =&gt; <a>Unlift</a> <a>Exp</a>
--   (<a>Quaternion</a> (<a>Exp</a> a))</pre></li>
--   </ul>
--   
--   <a>UnitQuaternion</a> Accelerate Instances:
--   
--   <ul>
--   <li><pre>instance (<a>Elt</a> a, <a>Floating</a> a) =&gt; <a>Elt</a>
--   (<a>UnitQuaternion</a> a)</pre></li>
--   <li><pre>instance <a>Floating</a> a =&gt; <a>IsTuple</a>
--   (<a>UnitQuaternion</a> a)</pre></li>
--   <li><pre>instance (<a>Lift</a> <a>Exp</a> a, <a>Elt</a> (<a>Plain</a>
--   a), <a>Floating</a> a, <a>Floating</a> (<a>Plain</a> a)) =&gt;
--   <a>Lift</a> <a>Exp</a> (<a>UnitQuaternion</a> a)</pre></li>
--   <li><pre>instance (<a>Elt</a> a, <a>IsFloating</a> a) =&gt;
--   <a>Unlift</a> <a>Exp</a> (<a>UnitQuaternion</a> (<a>Exp</a>
--   a))</pre></li>
--   </ul>
module Data.Vect.Floating.Accelerate.Instances
instance (Elt a, IsFloating a) => Unlift Exp (UnitQuaternion (Exp a))
instance (Lift Exp a, Elt (Plain a), Floating a, Floating (Plain a)) => Lift Exp (UnitQuaternion a)
instance Floating a => IsTuple (UnitQuaternion a)
instance (Elt a, Floating a) => Elt (UnitQuaternion a)
instance Elt a => Unlift Exp (Quaternion (Exp a))
instance (Lift Exp a, Elt (Plain a)) => Lift Exp (Quaternion a)
instance IsTuple (Quaternion a)
instance Elt a => Elt (Quaternion a)
instance (Elt a, Floating a, IsFloating a) => Unlift Exp (Normal4 (Exp a))
instance (Lift Exp a, Elt (Plain a), Floating a, Floating (Plain a)) => Lift Exp (Normal4 a)
instance Floating a => IsTuple (Normal4 a)
instance (Elt a, Floating a) => Elt (Normal4 a)
instance Elt a => Unlift Exp (Vec4 (Exp a))
instance (Lift Exp a, Elt (Plain a)) => Lift Exp (Vec4 a)
instance IsTuple (Vec4 a)
instance Elt a => Elt (Vec4 a)
instance (Elt a, Floating a, IsFloating a) => Unlift Exp (Normal3 (Exp a))
instance (Lift Exp a, Elt (Plain a), Floating a, Floating (Plain a)) => Lift Exp (Normal3 a)
instance Floating a => IsTuple (Normal3 a)
instance (Elt a, Floating a) => Elt (Normal3 a)
instance Elt a => Unlift Exp (Vec3 (Exp a))
instance (Lift Exp a, Elt (Plain a)) => Lift Exp (Vec3 a)
instance IsTuple (Vec3 a)
instance Elt a => Elt (Vec3 a)
instance (Elt a, Floating a, IsFloating a) => Unlift Exp (Normal2 (Exp a))
instance (Lift Exp a, Elt (Plain a), Floating a, Floating (Plain a)) => Lift Exp (Normal2 a)
instance Floating a => IsTuple (Normal2 a)
instance (Elt a, Floating a) => Elt (Normal2 a)
instance Elt a => Unlift Exp (Vec2 (Exp a))
instance (Lift Exp a, Elt (Plain a)) => Lift Exp (Vec2 a)
instance IsTuple (Vec2 a)
instance Elt a => Elt (Vec2 a)
