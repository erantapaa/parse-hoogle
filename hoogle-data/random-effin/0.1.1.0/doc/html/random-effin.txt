-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple random generator library for effin
--   
--   A simple random generator library for effin
@package random-effin
@version 0.1.1.0

module Control.Effect.Random

-- | Random number generator
--   
--   Since 0.1.0.0
data Rand g a
class (RandomGen g, MemberEffect Rand (Rand g) l) => EffectRandom g l

-- | Run a computation with random numbers
--   
--   Since 0.1.0.0
runRand :: RandomGen g => g -> Effect (Rand g :+ l) a -> Effect l (a, g)

-- | Run a computation with random numbers, discarding the final generator.
--   
--   Since 0.1.0.0
evalRand :: RandomGen g => g -> Effect (Rand g :+ l) a -> Effect l a

-- | Run a computation with random numbers, discarding the final generator.
--   
--   Since 0.1.0.0
evalRandIO :: EffectLift IO l => Effect (Rand StdGen :+ l) a -> Effect l a

-- | Return a randomly-selected value of type a. See <a>random</a> for
--   details.
--   
--   Since 0.1.0.0
getRandom :: (Random a, EffectRandom g l) => Effect l a

-- | Return a randomly-selected value of type a in the range
--   <tt>(lo,hi)</tt>. See <a>randomR</a> for details.
--   
--   Since 0.1.0.0
getRandomR :: (Random a, EffectRandom g l) => (a, a) -> Effect l a

-- | Return an infinite stream of random values of type a. See
--   <a>randoms</a> for details.
--   
--   Since 0.1.0.0
getRandoms :: (Random a, EffectRandom g l) => Effect l [a]

-- | Return an infinite stream of randomly-selected value of type
--   <tt>a</tt> in the range <tt>(lo,hi)</tt>. See <a>randomRs</a> for
--   details.
--   
--   Since 0.1.0.0
getRandomRs :: (Random a, EffectRandom g l) => (a, a) -> Effect l [a]

-- | Sample a random value from a weighted list. The total weight of all
--   elements must not be 0.
--   
--   Since 0.1.0.0
fromList :: EffectRandom g l => [(a, Rational)] -> Effect l a

-- | Sample a value from a uniform distribution of a list of elements.
--   
--   Since 0.1.0.0
uniform :: EffectRandom g l => [a] -> Effect l a

-- | Split the current generator and execute the given computation with it.
--   
--   Since 0.1.0.0
withSplit :: EffectRandom g l => Effect l a -> Effect l a
instance Typeable Rand
instance (RandomGen g, MemberEffect Rand (Rand g) l) => EffectRandom g l
instance Functor (Rand g)
