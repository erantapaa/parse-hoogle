-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Regexp-like engine to scrap web data
--   
--   A web scrapping utility mixing CSS selector syntax and regular
--   expressions
@package Webrexp
@version 1.1.2


-- | This module store the interface between the evaluator and the
--   manipulated graph.
module Text.Webrexp.GraphWalker

-- | The aim of this typeclass is to permit the use of different html/xml
--   parser if if the first one is found to be bad. All the logic should
--   use this interface.
--   
--   Minimal implementation : everything but deepValueOf.
class (GraphPath rezPath, Eq a) => GraphWalker a rezPath | a -> rezPath where deepValueOf node = (valueOf node ++) <$> childrenText where childrenText = concat <$> (childrenOf node >>= mapM deepValueOf)
attribOf :: GraphWalker a rezPath => String -> a -> Maybe String
nameOf :: GraphWalker a rezPath => a -> Maybe String
childrenOf :: (GraphWalker a rezPath, IOMockable m, Monad m) => a -> m [a]
valueOf :: GraphWalker a rezPath => a -> String
indirectLinks :: GraphWalker a rezPath => a -> [rezPath]
accessGraph :: (GraphWalker a rezPath, IOMockable m, Functor m, Monad m) => Loggers m -> rezPath -> m (AccessResult a rezPath)
rawAccess :: (GraphWalker a rezPath, IOMockable m, Functor m, Monad m) => Loggers m -> rezPath -> m (AccessResult a rezPath)
isHistoryMutable :: GraphWalker a rezPath => a -> Bool
deepValueOf :: (GraphWalker a rezPath, IOMockable m, Functor m, Monad m) => a -> m String

-- | Represent indirect links or links which necessitate the use of the IO
--   monad to walk around the graph.
class Show a => GraphPath a
(<//>) :: GraphPath a => a -> a -> a
importPath :: GraphPath a => String -> Maybe a
dumpDataAtPath :: (GraphPath a, Monad m, IOMockable m) => Loggers m -> a -> m ()
localizePath :: GraphPath a => a -> FilePath

-- | Result of indirect access demand.
data AccessResult a rezPath

-- | We got a result and parsed it, maybe it has changed of location, so we
--   give back the location
Result :: rezPath -> a -> AccessResult a rezPath

-- | We got something, but we can't interpret it, so we return a binary
--   blob.
DataBlob :: rezPath -> ByteString -> AccessResult a rezPath

-- | Cannot access the resource.
AccessError :: AccessResult a rezPath

-- | Type used to propagate different logging level across the software.
type Logger m = String -> m ()

-- | Normal<i>Err</i>verbose loggers.
type Loggers m = (Logger m, Logger m, Logger m)

-- | Represent the path used to find the node from the starting point of
--   the graph.
type NodePath a = [(a, Int)]

-- | Return a list of all the <a>children</a>/linked node of a given node.
--   The given node is not included in the list. A list of node with the
--   taken path is returned.
descendants :: (IOMockable m, Monad m, GraphWalker a r) => a -> m [(a, [(a, Int)])]

-- | Given a tag and a name, retrieve the first matching tags in the
--   hierarchy. It must return the list of ancestors permitting the acess
--   to the path used to find children
--   
--   the returned list must contain : the node itself if it match the name,
--   and all the children containing the good name.
findNamed :: (Functor m, Monad m, IOMockable m, GraphWalker a r) => String -> a -> m [(a, [(a, Int)])]

-- | Return the first found node if any.
findFirstNamed :: (Functor m, Monad m, IOMockable m, GraphWalker a r) => String -> [a] -> m (Maybe (a, [(a, Int)]))

-- | like <a>descendants</a>, but without the monadic interface.
pureDescendants :: (a -> [a]) -> a -> [(a, [(a, Int)])]

-- | Like <a>findNamed</a> but without the monadic interface.
findNamedPure :: GraphWalker a r => (a -> [a]) -> String -> a -> [(a, [(a, Int)])]

-- | Like <a>findFirstNamed</a>, but without the monadic interface.
findFirstNamedPure :: GraphWalker a r => (a -> [a]) -> String -> [a] -> Maybe (a, [(a, Int)])


-- | Module implementing plumbing to get a unified path locator, handling
--   URI &amp; local path. Implement the <a>GraphPath</a> and
--   <a>GraphWalker</a> typeclass with <tt>HxtNode</tt>
module Text.Webrexp.ResourcePath

-- | Main data type
data ResourcePath

-- | Represent a file stored on the hard-drive of this machine.
Local :: FilePath -> ResourcePath

-- | Represent a ressource spread on internet.
Remote :: URI -> ResourcePath

-- | Given a ressource, transforme it to a string representation. This
--   function should be used instead of the <a>Show</a> instance, which is
--   aimed at debugging only.
rezPathToString :: ResourcePath -> String

-- | Helper function to grab a resource on internet and returning it's
--   binary representation, and it's real place if any.
downloadBinary :: (Monad m, IOMockable m) => Loggers m -> URI -> m (URI, Response ByteString)
accessResourcePath :: (Monad m, IOMockable m, Functor m) => Loggers m -> ResourcePath -> m (AccessResult a ResourcePath)

-- | Extract a blob of data from a resourcepath and return the result.
rawLoadData :: (Monad m, IOMockable m) => Loggers m -> ResourcePath -> m (Maybe ByteString)
instance Eq ResourcePath
instance Show ResourcePath
instance GraphPath ResourcePath


-- | Datatypes used to describe webrexps, and some helper functions.
module Text.Webrexp.Exprtypes

-- | represent an element
data WebRef

-- | '*' Any subelement.
Wildcard :: WebRef

-- | ... Search for a named element.
Elem :: String -> WebRef

-- | ... . ... Check the value of the 'class' attribute
OfClass :: WebRef -> String -> WebRef

-- | @... Check for the presence of an attribute
Attrib :: WebRef -> String -> WebRef

-- | #... Check the value of the 'id' attribute
OfName :: WebRef -> String -> WebRef

-- | Ranges to be able to filter nodes by position.
data NodeRange

-- | ...
Index :: Int -> NodeRange

-- | min-max
Interval :: Int -> Int -> NodeRange

-- | Definitions of the operators available in the actions of the webrexp.
data Op

-- | <a>+</a>
OpAdd :: Op

-- | <a>-</a>
OpSub :: Op

-- | <a>*</a>
OpMul :: Op

-- | <a>div</a>
OpDiv :: Op

-- | <a>&lt;</a>
OpLt :: Op

-- | <a>&lt;=</a>
OpLe :: Op

-- | <a>&gt;</a>
OpGt :: Op

-- | <a>&gt;=</a>
OpGe :: Op

-- | '=' in webrexp (<a>==</a> in Haskell)
OpEq :: Op

-- | '!=' (<a>/=</a> in Haskell)
OpNe :: Op

-- | '&amp;' (<a>&amp;&amp;</a> in Haksell)
OpAnd :: Op

-- | '|' (<a>||</a> in Haskell)
OpOr :: Op

-- | '=~' regexp matching
OpMatch :: Op

-- | '~=' op contain, as the CSS3 operator.
OpContain :: Op

-- | '^=' op beginning, as the CSS3 operator.
OpBegin :: Op

-- | '$=' op beginning, as the CSS3 operator.
OpEnd :: Op

-- | '^=' op beginning, as the CSS3 operator.
OpSubstring :: Op

-- | '|=' op beginning, as the CSS3 operator.
OpHyphenBegin :: Op

-- | ':' concatenate two strings
OpConcat :: Op

-- | Represent an action Each production of the grammar more or less map to
--   a data constructor of this type.
data ActionExpr

-- | { ... ; ... ; ... ; ... } A list of action to execute, each one must
--   return a <tt>valid</tt> value to continue the evaluation
ActionExprs :: [ActionExpr] -> ActionExpr

-- | Basic binary opertor application
BinOp :: Op -> ActionExpr -> ActionExpr -> ActionExpr

-- | Find a value of a given attribute for the current element.
ARef :: String -> ActionExpr

-- | An integer constant.
CstI :: Int -> ActionExpr

-- | A string constant
CstS :: String -> ActionExpr

-- | '$'... operator Used to put the action value back into the evaluation
--   pipeline.
NodeReplace :: ActionExpr -> ActionExpr

-- | the <a>.</a> action. Dump the content of the current element.
OutputAction :: ActionExpr

-- | Translate a node and all it's children into text.
DeepOutputAction :: ActionExpr

-- | Retrieve a node name
NodeNameOutputAction :: ActionExpr

-- | funcName(..., ...)
Call :: BuiltinFunc -> [ActionExpr] -> ActionExpr

-- | Type representation of web-regexp, main type.
data WebRexp

-- | ( ... ; ... ; ... )
Branch :: [WebRexp] -> WebRexp

-- | ( ... , ... , ... )
Unions :: [WebRexp] -> WebRexp

-- | ... ... (each action followed, no rollback)
List :: [WebRexp] -> WebRexp

-- | ... *
Star :: WebRexp -> WebRexp

-- | ... #{ }
Repeat :: RepeatCount -> WebRexp -> WebRexp

-- | '|' Represent two alternative path, if the first fail, the second one
--   is taken
Alternative :: WebRexp -> WebRexp -> WebRexp

-- | '!' Possess an unique index to differentiate all the differents
--   uniques. Negative value are considered invalid, all positive or null
--   one are accepted.
Unique :: Int -> WebRexp

-- | "..." A string constant in the source expression.
Str :: String -> WebRexp

-- | "{ ... }"
Action :: ActionExpr -> WebRexp

-- | '[ ... ]' Filtering Range The Int is used as an index for a counter in
--   the DFS evaluator.
Range :: Int -> [NodeRange] -> WebRexp

-- | every tag/class name
Ref :: WebRef -> WebRexp

-- | Find children who are the different descendent of the current nodes.
DirectChild :: WebRef -> WebRexp

-- | This constructor is an optimisation, it combine an Ref followed by an
--   action, where every action is a predicate. Help pruning quickly the
--   evaluation tree in DFS evaluation.
ConstrainedRef :: WebRef -> ActionExpr -> WebRexp

-- | '&gt;&gt;' operator in the language, used to follow hyper link
DiggLink :: WebRexp

-- | '-&gt;' operator in the language, used to follow hyper link and dump
--   the resulting content on hard drive (if permited).
DumpLink :: WebRexp

-- | '+' operator in the language, used to select the next sibling node.
NextSibling :: WebRexp

-- | '~' operator in the language, used to select the previous sibling
--   node.
PreviousSibling :: WebRexp

-- | '&lt;' operator in the language. Select the parent node
Parent :: WebRexp
data RepeatCount
RepeatTimes :: Int -> RepeatCount
RepeatAtLeast :: Int -> RepeatCount
RepeatBetween :: Int -> Int -> RepeatCount

-- | Type used to index built-in functions in actions.
data BuiltinFunc
BuiltinTrim :: BuiltinFunc
BuiltinSubsitute :: BuiltinFunc
BuiltinToNum :: BuiltinFunc
BuiltinToString :: BuiltinFunc
BuiltinFormat :: BuiltinFunc
BuiltinSystem :: BuiltinFunc

-- | This function is an helper function to simplify the handling the node
--   range. After simplification, the ranges are sorted in ascending order
--   and no node range overlap.
simplifyNodeRanges :: [NodeRange] -> [NodeRange]

-- | This function permit the rewriting of a wabrexp in a depth-first
--   fashion while carying out an accumulator.
foldWebRexp :: (a -> WebRexp -> (a, WebRexp)) -> a -> WebRexp -> (a, WebRexp)

-- | Preparation function for webrexp, assign all indices used for
--   evaluation as an automata.
assignWebrexpIndices :: WebRexp -> (Int, Int, WebRexp)

-- | Pretty printing for <a>WebRef</a>. It's should be reparsable by the
--   WebRexp parser.
prettyShowWebRef :: WebRef -> String
packRefFiltering :: WebRexp -> WebRexp

-- | Helper function to check if a given in dex is within all the ranges
isInNodeRange :: Int -> [NodeRange] -> Bool

-- | Tell if an action operator return a boolean operation. Useful to tell
--   if an action is a predicate. See <a>isActionPredicate</a>
isOperatorBoolean :: Op -> Bool

-- | Tell if an action is a predicate and is only used to filter nodes.
--   Expression can be modified with this information to help prunning as
--   soon as possible with the DFS evaluator.
isActionPredicate :: ActionExpr -> Bool
instance Show WebRef
instance Eq NodeRange
instance Show NodeRange
instance Eq Op
instance Show Op
instance Enum Op
instance Eq BuiltinFunc
instance Show BuiltinFunc
instance Enum BuiltinFunc
instance Eq ActionExpr
instance Show ActionExpr
instance Show RepeatCount
instance Show WebRexp
instance Lift WebRexp
instance Lift RepeatCount
instance Lift ActionExpr
instance Lift BuiltinFunc
instance Lift Op
instance Lift NodeRange
instance Lift WebRef
instance Ord NodeRange


-- | Module implementing the parsing of webrexp. It shouldn't be used
--   directly.
module Text.Webrexp.Parser

-- | Parser used to parse a webrexp. Use just like any <a>Parsec</a> 3.0
--   parser.
webRexpParser :: ParsecT String st Identity WebRexp

module Text.Webrexp.Eval

-- | Evaluate embedded action in WebRexp
evalAction :: (GraphWalker node rezPath, IOMockable (WebContextT array node rezPath m), Functor m, Monad m) => ActionExpr -> Maybe (EvalState node rezPath) -> WebContextT array node rezPath m (ActionValue, Maybe (EvalState node rezPath))

-- | Evaluate the leaf nodes of a webrexp, this way the code can be shared
--   between the Breadth first evaluator and the Depth first one.
evalWebRexpFor :: (GraphWalker node rezPath, IOMockable (WebContextT array node rezPath m), Functor m, MArray array (Set String) m) => WebRexp -> EvalState node rezPath -> WebContextT array node rezPath m (Bool, [EvalState node rezPath])


-- | Generic module for using Webrexp as a user. the main functions for the
--   user are queryDocument to perform an in-memory evaluation, and
--   evalWebRexpDepthFirst
module Text.Webrexp

-- | Describe different kind of content parser usable
data ParseableType

-- | Indicate a parser which must be tolerant enough to parse HTML
ParseableHTML :: ParseableType

-- | You can go ahead and use a rather strict parser.
ParseableXML :: ParseableType

-- | Do what you want with it for now.
ParseableJson :: ParseableType

-- | Query a document in memory and retrieve the results, you can use it in
--   combination to the quasiquoting facility to embed the webrexp in
--   haskell :
--   
--   <pre>
--   {-# LANGUAGE QuasiQuotes #-}
--   import Text.Webrexp
--   import Text.Webrexp.Quote
--   import qualified Data.ByteString.Char8 as B
--   
--   main :: IO ()
--   main = print $ queryDocument ParseableJson document [webrexpParse| some things [.] |]
--       where document = B.pack "{ \"some\": { \"things\": \"a phrase\" } }"
--   </pre>
--   
--   The returned values contain possible errors as <a>Left</a> and real
--   value as 'Right.
queryDocument :: ParseableType -> ByteString -> WebRexp -> [Either String String]

-- | Exactly same thing as <a>queryDocument</a>, but in ST
queryDocumentM :: ParseableType -> ByteString -> WebRexp -> ST s [Either String String]

-- | Simple evaluation function, evaluation is the breadth first type.
evalWebRexp :: String -> IO Bool

-- | Evaluate a webrexp in depth first fashion, returning a success status
--   telling if the evaluation got up to the end.
evalWebRexpDepthFirst :: String -> IO Bool

-- | Prepare a webrexp. This function is useful if the expression has to be
--   applied many times.
parseWebRexp :: String -> Maybe WebRexp

-- | Evaluation for pre-parsed webrexp. Best method if a webrexp has to be
--   evaluated many times. Evaluated using breadth first method.
evalParsedWebRexp :: WebRexp -> IO Bool

-- | Evaluate a webrexp and return all the dumped text as <a>Right</a> and
--   all errors as <a>Left</a>. Evaluated using depth first method.
executeParsedWebRexp :: WebRexp -> IO [Either String String]
data Conf
Conf :: Int -> String -> Handle -> Bool -> Bool -> String -> Bool -> Bool -> Bool -> Conf
hammeringDelay :: Conf -> Int
userAgent :: Conf -> String
output :: Conf -> Handle
verbose :: Conf -> Bool
quiet :: Conf -> Bool
expr :: Conf -> String
showHelp :: Conf -> Bool
depthEvaluation :: Conf -> Bool
outputGraphViz :: Conf -> Bool
defaultConf :: Conf

-- | Function used in the command line program.
evalWebRexpWithConf :: Conf -> IO Bool

module Text.Webrexp.Quote

-- | QuasiQuotation to transform a webrexp to it's AST representation,
--   resulting type is :: Webrexp. You can use it the following way :
--   
--   <pre>
--   {-# LANGUAGE QuasiQuotes #-}
--   import Text.Webrexp.Quote
--   
--   [webrexpParse| some webrexp [.] |]
--   </pre>
webrexpParse :: QuasiQuoter

-- | Quasi quote to transform a webrexp into it's compiled representation.
--   You can use it the following way :
--   
--   <pre>
--   {-# LANGUAGE QuasiQuotes #-}
--   import Text.Webrexp.Quote
--   
--   [webrexpCompile| some webrexp [.] |]
--   </pre>
webrexpCompile :: QuasiQuoter
