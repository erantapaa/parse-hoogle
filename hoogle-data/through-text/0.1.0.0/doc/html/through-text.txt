-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convert textual types through Text without needing O(n^2) instances.
--   
@package through-text
@version 0.1.0.0

module Data.Text.Through
class ToText a
toText :: ToText a => a -> StrictText
class FromText a
fromText :: FromText a => StrictText -> a

-- | Convert between all textual types.
throughText :: (ToText a, FromText b) => a -> b
type LazyByteString = ByteString
type LazyText = Text
type StrictByteString = ByteString
type StrictText = Text

-- | A <tt>CI s</tt> provides <i>C</i>ase <i>I</i>nsensitive comparison for
--   the string-like type <tt>s</tt> (for example: <tt>String</tt>,
--   <a>Text</a>, <a>ByteString</a>, etc.).
--   
--   Note that <tt>CI s</tt> has an instance for <a>IsString</a> which
--   together with the <tt>OverloadedStrings</tt> language extension allows
--   you to write case insensitive string literals as in:
--   
--   <pre>
--   &gt; ("Content-Type" :: <a>CI</a> <a>Text</a>) == ("CONTENT-TYPE" :: <a>CI</a> <a>Text</a>)
--   True
--   </pre>
data CI s :: * -> *

-- | More efficient than throughText, replaces invalid characters with
--   U+FFFD.
lazyByteStringToLazyText :: LazyByteString -> LazyText

-- | More efficient than throughText
lazyTextToLazyByteString :: LazyText -> LazyByteString
instance (FoldCase a, FromText a) => FromText (CI a)
instance ToText a => ToText (CI a)
instance FromText LazyByteString
instance ToText LazyByteString
instance FromText StrictByteString
instance ToText StrictByteString
instance FromText LazyText
instance ToText LazyText
instance FromText [Char]
instance ToText [Char]
instance FromText StrictText
instance ToText StrictText
