-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A web interface to Antisplice dungeons.
--   
@package antagonist
@version 0.1.0.29


-- | Datatypes for a subsite serving a single-user dungeon.
module Web.Antagonist.Server.Data

-- | Server-side session state. Everything we need to know about the
--   dungeon.
type SessionState = ((((DungeonState, TST Token), AVL (Int, Container)), Int), [(String, EnvVar)])

-- | Subsite foundation type, containing the dungeon constructor and the
--   session states.
data SingleUserSub
SingleUserSub :: IORef Int -> IORef (AVL (Int, SessionState, String, NominalDiffTime)) -> Constructor () -> SingleUserSub
currentCounter :: SingleUserSub -> IORef Int
dungeonStates :: SingleUserSub -> IORef (AVL (Int, SessionState, String, NominalDiffTime))
constructor :: SingleUserSub -> Constructor ()
resourcesSingleUserSub :: [ResourceTree String]
instance Show (Route SingleUserSub)
instance Eq (Route SingleUserSub)
instance Read (Route SingleUserSub)
instance RouteAttrs SingleUserSub
instance RenderRoute SingleUserSub
instance ParseRoute SingleUserSub


-- | A subsite serving a single-user dungeon.
module Web.Antagonist.Server
class (Yesod master, RenderMessage master FormMessage) => YesodAntagonist master where getNick = return "Bernd" antagonistLayout = defaultLayout getAuthR = return Nothing getCustomizeR = return Nothing
getNick :: YesodAntagonist master => HandlerT master IO Text
antagonistLayout :: YesodAntagonist master => WidgetT master IO () -> HandlerT master IO Html
getAuthR :: YesodAntagonist master => HandlerT master IO (Maybe (AuthRoute -> Route master))
getCustomizeR :: YesodAntagonist master => HandlerT master IO (Maybe (Route master))
instance YesodAntagonist master => YesodSubDispatch SingleUserSub (HandlerT master IO)
