-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A parser for the modelica language
--   
--   According to the Modelica Language Specification 3.3, Apendix B:
--   <a>https://modelica.org/documents/ModelicaSpec33.pdf</a>. The main
--   interface of the parser is in <a>Language.Modelica.Parser</a>. The
--   main entry point to the parser is <a>stored_definition</a>.
@package modelicaparser
@version 0.1.0.0

module Language.Modelica.Parser.Option
data Option

-- | Usefull for files generated with <a>https://openmodelica.org/</a>
PermitAnnotationFirst :: Option
type OptionSet = Set Option
defaultOptions :: OptionSet
instance Show Option
instance Eq Option
instance Ord Option

module Language.Modelica.Parser.Parser
type Parser = Parsec String OptionSet

module Language.Modelica.Parser.Utility
(~+) :: Parser a -> Parser b -> Parser (a, b)
(~*) :: Parser a -> Parser b -> Parser [(a, b)]
followedBy :: Parser a -> Parser b -> Parser [b]
cst :: Applicative f => b -> f a -> f b
eitherOr :: Parser a -> Parser b -> Parser (Either a b)
eitherOrOr :: Parser a -> Parser b -> Parser c -> Parser (Either a (Either b c))
alternate1 :: Parser a -> Parser a -> Parser [a]
alternate :: Parser a -> Parser a -> Parser [a]
stringParser :: Parser a -> Parser a
until :: (String -> b) -> Parser a -> Parser b

module Language.Modelica.Syntax.ToString
newline :: String
class ToString a
toString :: ToString a => a -> String
maybeSpace :: ToString a => Maybe a -> String
spaceMaybe :: ToString a => Maybe a -> String
listSpace :: ToString a => [a] -> String
spaceList :: ToString a => [a] -> String
toSemiListSpace :: ToString a => [a] -> String
toSemiList :: ToString a => [a] -> String
toCommaList :: ToString a => [a] -> String
instance (ToString a, ToString b) => ToString (a, b)
instance (ToString a, ToString b) => ToString (Either a b)
instance ToString a => ToString (Maybe a)

module Language.Modelica.Syntax.Modelica
type EitherOrOr a b c = Either a (Either b c)
type TypeSpecifier = Name
data Ident
Ident :: SourcePos -> String -> Ident
QIdent :: SourcePos -> String -> Ident
data Dot
Dot :: Dot
data Star
Star :: Star
data Colon
Colon :: Colon
data Each
Each :: Each
data Final
Final :: Final
data Partial
Partial :: Partial
data Redeclare
Redeclare :: Redeclare
data Inner
Inner :: Inner
data Outer
Outer :: Outer
data Init
Init :: Init
data Encapsulated
Encapsulated :: Encapsulated
data Name
Name :: (Maybe Dot) -> Ident -> [Ident] -> Name
data Modification
Modification :: ClassModification -> (Maybe Expression) -> Modification
ModificationAssign :: Expression -> Modification
ModificationColonAssign :: Expression -> Modification
data ClassModification
ClassModification :: (Maybe ArgumentList) -> ClassModification
data ArgumentList
ArgumentList :: Argument -> [Argument] -> ArgumentList
data Argument
ArgElementModOrRep :: ElementModOrRep -> Argument
ArgElementRedeclaration :: ElementRedeclaration -> Argument
data ElementModOrRep
ElementModOrRep :: (Maybe Each) -> (Maybe Final) -> (Either ElementModification ElementReplaceableShort) -> ElementModOrRep
data ElementModification
ElementModification :: Name -> (Maybe Modification) -> (Maybe StringComment) -> ElementModification
data ElementRedeclaration
ElementRedeclaration :: (Maybe Each) -> (Maybe Final) -> (EitherOrOr ShortClassDefinition ComponentClause1 ElementReplaceableShort) -> ElementRedeclaration
data ElementReplaceableShort
ElementReplaceableShort :: (Either ShortClassDefinition ComponentClause1) -> (Maybe ConstrainingClause) -> ElementReplaceableShort
data ShortClassDefinition
ShortClassDefinition :: ClassPrefixes -> Ident -> ShortClassDef -> ShortClassDefinition
data ShortClassDef
ShortClassDef1 :: (Either Colon (Maybe EnumList)) -> Comment -> ShortClassDef
ShortClassDef2 :: TypePrefix -> Name -> (Maybe ArraySubscripts) -> (Maybe ClassModification) -> Comment -> ShortClassDef
data ComponentClause1
ComponentClause1 :: TypePrefix -> TypeSpecifier -> ComponentDeclaration1 -> ComponentClause1
data ComponentDeclaration1
ComponentDeclaration1 :: Declaration -> Comment -> ComponentDeclaration1
data ConstrainingClause
ConstrainingClause :: Name -> (Maybe ClassModification) -> ConstrainingClause
data ExtendsClause
ExtendsClause :: Name -> (Maybe ClassModification) -> (Maybe Annotation) -> ExtendsClause
data Comment
Comment :: (Maybe StringComment) -> (Maybe Annotation) -> Comment
data StringComment
StringComment :: (Maybe (String, [String])) -> StringComment
newtype Annotation
Annotation :: ClassModification -> Annotation
data Expression
IfExpression :: Expression -> Expression -> [ElseIfExpression] -> Expression -> Expression
Expression :: SimpleExpression -> Expression
data ElseIfExpression
ElseIfExpression :: Expression -> Expression -> ElseIfExpression
data SimpleExpression
SimpleExpression1 :: LogicalExpression -> SimpleExpression
SimpleExpression2 :: LogicalExpression -> LogicalExpression -> SimpleExpression
SimpleExpression3 :: LogicalExpression -> LogicalExpression -> LogicalExpression -> SimpleExpression
data LogicalExpression
LogicalExpression :: LogicalTerm -> [LogicalTerm] -> LogicalExpression
data LogicalTerm
LogicalTerm :: LogicalFactor -> [LogicalFactor] -> LogicalTerm
data Not
Not :: Not
data LogicalFactor
LogicalFactor :: (Maybe Not) -> Relation -> LogicalFactor
data Relation
Relation :: ArithmeticExpression -> (Maybe (RelOp, ArithmeticExpression)) -> Relation
data RelOp
Equal :: RelOp
UnEqual :: RelOp
GTH :: RelOp
LTH :: RelOp
GEQ :: RelOp
LEQ :: RelOp
data ArithmeticExpression
ArithmeticExpression :: (Maybe AddOp) -> Term -> [(AddOp, Term)] -> ArithmeticExpression
data AddOp
Plus :: AddOp
Minus :: AddOp
DotPlus :: AddOp
DotMinus :: AddOp
data Term
Term :: Factor -> [(MulOp, Factor)] -> Term
data MulOp
Mul :: MulOp
Div :: MulOp
DotMul :: MulOp
DotDiv :: MulOp
data Factor
Factor :: Primary -> (Maybe (PotOp, Primary)) -> Factor
data PotOp
Pot :: PotOp
DotPot :: PotOp
data DIN
Der :: DIN
Initial :: DIN
FuncCallName :: Name -> DIN
data Primary
PUnsignedNumber :: SourcePos -> Double -> Primary
PModelicaStr :: SourcePos -> String -> Primary
PBoolValue :: SourcePos -> Bool -> Primary
PFuncCall :: DIN -> FunctionCallArgs -> Primary
PCompRef :: ComponentReference -> Primary
PFuncArgs :: FunctionArguments -> Primary
POutputExprList :: OutputExpressionList -> Primary
PExpressionList :: ExpressionList -> [ExpressionList] -> Primary
PEnd :: Primary
data NamedArguments
NamedArguments :: NamedArgument -> [NamedArgument] -> NamedArguments
data FunctionCallArgs
FunctionCallArgs :: (Maybe FunctionArguments) -> FunctionCallArgs
data FunctionArguments
FunctionArguments :: FunctionArgument -> (Maybe (Either FunctionArguments ForIndices)) -> FunctionArguments
FANamedArguments :: NamedArguments -> FunctionArguments
data FunctionArgument
FAExpression :: Expression -> FunctionArgument
Function :: Name -> (Maybe NamedArguments) -> FunctionArgument
data NamedArgument
NamedArgument :: Ident -> FunctionArgument -> NamedArgument
data OutputExpressionList
OutputExpressionList :: [Maybe Expression] -> OutputExpressionList
data ExpressionList
ExpressionList :: Expression -> [Expression] -> ExpressionList
data Subscript
Subscript :: Expression -> Subscript
SubscriptColon :: Subscript
data ArraySubscripts
ArraySubscripts :: Subscript -> [Subscript] -> ArraySubscripts
data ComponentReference
ComponentReference :: (Maybe Dot) -> Ident -> (Maybe ArraySubscripts) -> [(Ident, Maybe ArraySubscripts)] -> ComponentReference
data ForIndices
ForIndices :: ForIndex -> [ForIndex] -> ForIndices
data ForIndex
ForIndex :: Ident -> (Maybe Expression) -> ForIndex
data TypePrefix
TypePrefix :: (Maybe FS) -> (Maybe DPC) -> (Maybe OI) -> TypePrefix
type BasePrefix = TypePrefix
data FS
Flow :: FS
Stream :: FS
data DPC
Discrete :: DPC
Parameter :: DPC
Constant :: DPC
data OI
Output :: OI
Input :: OI
data ClassPrefixes
ClassPrefixes :: (Maybe Partial) -> Prefix -> ClassPrefixes
data Prefix
Class :: Prefix
Model :: Prefix
Block :: Prefix
Type :: Prefix
Package :: Prefix
Operator :: Prefix
Record :: (Maybe OperatorRecord) -> Prefix
Connector :: (Maybe Expandable) -> Prefix
FunctionPrefix :: (Maybe PureImpure) -> (Maybe OperatorFunction) -> Prefix
data PureImpure
Pure :: PureImpure
Impure :: PureImpure
data OperatorFunction
OperatorFunction :: OperatorFunction
data OperatorRecord
OperatorRecord :: OperatorRecord
data Expandable
Expandable :: Expandable
data Declaration
Declaration :: Ident -> (Maybe ArraySubscripts) -> (Maybe Modification) -> Declaration
data ConditionAttribute
ConditionAttribute :: Expression -> ConditionAttribute
data ComponentDeclaration
ComponentDeclaration :: Declaration -> (Maybe ConditionAttribute) -> Comment -> ComponentDeclaration
data ComponentList
ComponentList :: ComponentDeclaration -> [ComponentDeclaration] -> ComponentList
data ComponentClause
ComponentClause :: TypePrefix -> TypeSpecifier -> (Maybe ArraySubscripts) -> ComponentList -> ComponentClause
data EnumerationLiteral
EnumerationLiteral :: Ident -> Comment -> EnumerationLiteral
data EnumList
EnumList :: EnumerationLiteral -> [EnumerationLiteral] -> EnumList
data EquationSection
EquationSection :: (Maybe Init) -> [Equation] -> EquationSection
data Equation
Equation :: Eqn -> Comment -> Equation
data Eqn
IfEquation :: Expression -> [Equation] -> [ElseIfEquation] -> (Maybe [Equation]) -> Eqn
ForEquation :: ForIndices -> [Equation] -> Eqn
WhenEquation :: Expression -> [Equation] -> [ElseWhenEquation] -> Eqn
ConnectClause :: ComponentReference -> ComponentReference -> Eqn
EqFunctionCall :: Name -> FunctionCallArgs -> Eqn
Eqn :: SimpleExpression -> Expression -> Eqn
data ElseIfEquation
ElseIfEquation :: Expression -> [Equation] -> ElseIfEquation
data ElseWhenEquation
ElseWhenEquation :: Expression -> [Equation] -> ElseWhenEquation
data AlgorithmSection
AlgorithmSection :: (Maybe Init) -> [Statement] -> AlgorithmSection
data Statement
Statement :: Stmt -> Comment -> Statement
data Stmt
Break :: Stmt
Return :: Stmt
IfStatement :: Expression -> [Statement] -> [ElseIfStatement] -> (Maybe [Statement]) -> Stmt
ForStatement :: ForIndices -> [Statement] -> Stmt
WhenStatement :: Expression -> [Statement] -> [ElseWhenStatement] -> Stmt
WhileStatement :: Expression -> [Statement] -> Stmt
CompRefStatement :: ComponentReference -> (Either Expression FunctionCallArgs) -> Stmt
OutputListStatement :: OutputExpressionList -> ComponentReference -> FunctionCallArgs -> Stmt
data ElseIfStatement
ElseIfStatement :: Expression -> [Statement] -> ElseIfStatement
data ElseWhenStatement
ElseWhenStatement :: Expression -> [Statement] -> ElseWhenStatement
data ImportList
ImportList :: Ident -> [Ident] -> ImportList
data Import
Assign :: Ident -> Name -> Import
IList :: Name -> (Maybe (Either Star ImportList)) -> Import
data ImportClause
ImportClause :: Import -> Comment -> ImportClause
data ElementOptions
ElementOptions :: (Maybe Redeclare) -> (Maybe Final) -> (Maybe Inner) -> (Maybe Outer) -> ElementOptions
data Element
ElementImportClause :: ImportClause -> Element
ElementExtendsClause :: ExtendsClause -> Element
Element :: ElementOptions -> (Either ClassDefinition ComponentClause) -> Element
ElementReplaceable :: ElementOptions -> (Either ClassDefinition ComponentClause) -> (Maybe (ConstrainingClause, Comment)) -> Element
data ElementList
ElementList :: [Element] -> ElementList
data ExternalFunctionCall
ExternalFunctionCall :: (Maybe ComponentReference) -> Ident -> (Maybe ExpressionList) -> ExternalFunctionCall
type LanguageSpecification = String
data Composition
Composition :: ElementList -> [CompositionList] -> (Maybe CompositionExternal) -> (Maybe Annotation) -> Composition
data CompositionList
PublicElementList :: ElementList -> CompositionList
ProtectedElementList :: ElementList -> CompositionList
ESec :: EquationSection -> CompositionList
ASec :: AlgorithmSection -> CompositionList
data CompositionExternal
CompositionExternal :: (Maybe LanguageSpecification) -> (Maybe ExternalFunctionCall) -> (Maybe Annotation) -> CompositionExternal
data ClassSpecifier
ClassSpecifierEnd :: Ident -> StringComment -> Composition -> Ident -> ClassSpecifier
ClassSpecifierA :: Ident -> BasePrefix -> Name -> (Maybe ArraySubscripts) -> (Maybe ClassModification) -> Comment -> ClassSpecifier
ClassSpecifierEnum :: Ident -> (Either Colon (Maybe EnumList)) -> Comment -> ClassSpecifier
ClassSpecifierDer :: Ident -> (Name, Ident, [Ident]) -> Comment -> ClassSpecifier
ClassSpecifierExtends :: Ident -> (Maybe ClassModification) -> StringComment -> Composition -> Ident -> ClassSpecifier
data ClassDefinition
ClassDefinition :: (Maybe Encapsulated) -> ClassPrefixes -> ClassSpecifier -> ClassDefinition
data StoredDefinition
StoredDefinition :: (Maybe (Maybe Name)) -> [(Maybe Final, ClassDefinition)] -> StoredDefinition
instance Show Ident
instance Show Dot
instance Eq Dot
instance Show Star
instance Eq Star
instance Show Colon
instance Eq Colon
instance Show Each
instance Eq Each
instance Show Final
instance Eq Final
instance Show Partial
instance Eq Partial
instance Show Redeclare
instance Eq Redeclare
instance Show Inner
instance Eq Inner
instance Show Outer
instance Eq Outer
instance Show Init
instance Eq Init
instance Show Encapsulated
instance Eq Encapsulated
instance Show Name
instance Eq Name
instance Show StringComment
instance Eq StringComment
instance Show Not
instance Eq Not
instance Show RelOp
instance Eq RelOp
instance Show AddOp
instance Eq AddOp
instance Show MulOp
instance Eq MulOp
instance Show PotOp
instance Eq PotOp
instance Show DIN
instance Eq DIN
instance Show ForIndex
instance Eq ForIndex
instance Show Expression
instance Eq Expression
instance Show SimpleExpression
instance Eq SimpleExpression
instance Show LogicalExpression
instance Eq LogicalExpression
instance Show LogicalTerm
instance Eq LogicalTerm
instance Show LogicalFactor
instance Eq LogicalFactor
instance Show Relation
instance Eq Relation
instance Show ArithmeticExpression
instance Eq ArithmeticExpression
instance Show Term
instance Eq Term
instance Show Factor
instance Eq Factor
instance Show Primary
instance Show ComponentReference
instance Eq ComponentReference
instance Show ArraySubscripts
instance Eq ArraySubscripts
instance Show Subscript
instance Eq Subscript
instance Show ExpressionList
instance Eq ExpressionList
instance Show OutputExpressionList
instance Eq OutputExpressionList
instance Show FunctionArguments
instance Eq FunctionArguments
instance Show ForIndices
instance Eq ForIndices
instance Show FunctionArgument
instance Eq FunctionArgument
instance Show NamedArguments
instance Eq NamedArguments
instance Show NamedArgument
instance Eq NamedArgument
instance Show FunctionCallArgs
instance Eq FunctionCallArgs
instance Show ElseIfExpression
instance Eq ElseIfExpression
instance Show FS
instance Eq FS
instance Show DPC
instance Eq DPC
instance Show OI
instance Eq OI
instance Show TypePrefix
instance Eq TypePrefix
instance Show PureImpure
instance Eq PureImpure
instance Show OperatorFunction
instance Eq OperatorFunction
instance Show OperatorRecord
instance Eq OperatorRecord
instance Show Expandable
instance Eq Expandable
instance Show Prefix
instance Eq Prefix
instance Show ClassPrefixes
instance Eq ClassPrefixes
instance Show ConditionAttribute
instance Eq ConditionAttribute
instance Show EnumList
instance Eq EnumList
instance Show EnumerationLiteral
instance Eq EnumerationLiteral
instance Show Comment
instance Eq Comment
instance Show Annotation
instance Eq Annotation
instance Show ClassModification
instance Eq ClassModification
instance Show ArgumentList
instance Eq ArgumentList
instance Show Argument
instance Eq Argument
instance Show ElementRedeclaration
instance Eq ElementRedeclaration
instance Show ComponentClause1
instance Eq ComponentClause1
instance Show ComponentDeclaration1
instance Eq ComponentDeclaration1
instance Show Declaration
instance Eq Declaration
instance Show Modification
instance Eq Modification
instance Show ShortClassDefinition
instance Eq ShortClassDefinition
instance Show ShortClassDef
instance Eq ShortClassDef
instance Show ElementReplaceableShort
instance Eq ElementReplaceableShort
instance Show ConstrainingClause
instance Eq ConstrainingClause
instance Show ElementModOrRep
instance Eq ElementModOrRep
instance Show ElementModification
instance Eq ElementModification
instance Show ExtendsClause
instance Eq ExtendsClause
instance Show ComponentDeclaration
instance Eq ComponentDeclaration
instance Show ComponentList
instance Eq ComponentList
instance Show ComponentClause
instance Eq ComponentClause
instance Show ElseWhenEquation
instance Eq ElseWhenEquation
instance Show Equation
instance Eq Equation
instance Show Eqn
instance Eq Eqn
instance Show ElseIfEquation
instance Eq ElseIfEquation
instance Show EquationSection
instance Eq EquationSection
instance Show ElseWhenStatement
instance Eq ElseWhenStatement
instance Show Statement
instance Eq Statement
instance Show Stmt
instance Eq Stmt
instance Show ElseIfStatement
instance Eq ElseIfStatement
instance Show AlgorithmSection
instance Eq AlgorithmSection
instance Show ImportList
instance Eq ImportList
instance Show Import
instance Eq Import
instance Show ImportClause
instance Eq ImportClause
instance Show ElementOptions
instance Eq ElementOptions
instance Show ExternalFunctionCall
instance Eq ExternalFunctionCall
instance Show CompositionExternal
instance Eq CompositionExternal
instance Show ClassDefinition
instance Eq ClassDefinition
instance Show ClassSpecifier
instance Eq ClassSpecifier
instance Show Composition
instance Eq Composition
instance Show CompositionList
instance Eq CompositionList
instance Show ElementList
instance Eq ElementList
instance Show Element
instance Eq Element
instance Show StoredDefinition
instance Eq StoredDefinition
instance ToString StoredDefinition
instance ToString ClassDefinition
instance ToString ClassSpecifier
instance ToString CompositionExternal
instance ToString CompositionList
instance ToString [CompositionList]
instance ToString Composition
instance ToString ExternalFunctionCall
instance ToString ElementList
instance ToString Element
instance ToString ElementOptions
instance ToString ImportClause
instance ToString Import
instance ToString ImportList
instance ToString ElseWhenStatement
instance ToString ElseIfStatement
instance ToString Stmt
instance ToString Statement
instance ToString AlgorithmSection
instance ToString ElseWhenEquation
instance ToString ElseIfEquation
instance ToString Eqn
instance ToString Equation
instance ToString EquationSection
instance ToString EnumList
instance ToString EnumerationLiteral
instance ToString ComponentClause
instance ToString ComponentList
instance ToString ComponentDeclaration
instance ToString ConditionAttribute
instance ToString Declaration
instance ToString Expandable
instance ToString OperatorRecord
instance ToString OperatorFunction
instance ToString PureImpure
instance ToString Prefix
instance ToString ClassPrefixes
instance ToString OI
instance ToString DPC
instance ToString FS
instance ToString TypePrefix
instance ToString ForIndex
instance ToString ForIndices
instance ToString ComponentReference
instance ToString ArraySubscripts
instance ToString Subscript
instance ToString ExpressionList
instance ToString OutputExpressionList
instance ToString NamedArgument
instance ToString FunctionArgument
instance ToString FunctionArguments
instance ToString FunctionCallArgs
instance ToString NamedArguments
instance ToString Primary
instance Eq Primary
instance ToString DIN
instance ToString PotOp
instance ToString Factor
instance ToString MulOp
instance ToString Term
instance ToString AddOp
instance ToString ArithmeticExpression
instance ToString RelOp
instance ToString Relation
instance ToString LogicalFactor
instance ToString LogicalTerm
instance ToString LogicalExpression
instance ToString SimpleExpression
instance ToString ElseIfExpression
instance ToString Expression
instance ToString Annotation
instance ToString StringComment
instance ToString Comment
instance ToString ExtendsClause
instance ToString ConstrainingClause
instance ToString ComponentDeclaration1
instance ToString ComponentClause1
instance ToString ShortClassDef
instance ToString ShortClassDefinition
instance ToString ElementReplaceableShort
instance ToString ElementRedeclaration
instance ToString ElementModification
instance ToString ElementModOrRep
instance ToString Argument
instance ToString ArgumentList
instance ToString ClassModification
instance ToString Modification
instance ToString Name
instance ToString Encapsulated
instance ToString Init
instance ToString Outer
instance ToString Inner
instance ToString Redeclare
instance ToString Partial
instance ToString Final
instance ToString Each
instance ToString Colon
instance ToString Star
instance ToString Dot
instance ToString Ident
instance Eq Ident

module Language.Modelica.Parser.Lexer
eol :: Parser ()
nondigit :: Parser Char
schar :: Parser String
qchar :: Parser String
sescape :: Parser String
qident :: Parser String
unicode_string :: Parser String
ident :: Parser Ident
ident' :: Parser String
identChar :: Parser String
unsigned_integer :: Parser Integer
makeNumber :: Integer -> Integer -> Integer -> Double
unsigned_number :: Parser Double
fraction :: Parser Integer
eE :: Parser Char
plusMinus :: Parser Integer
expo :: Parser Integer
symbol :: String -> Parser String
lexeme :: Parser a -> Parser a
whiteSpace :: Parser ()
parens, quotation, quotes, brackets, braces :: Parser a -> Parser a
dot :: Parser Dot
star :: Parser Star
colon :: Parser Colon
comma, colon_assign, assign, semicolon, plus :: Parser String
cpp_block_cmt_start, cpp_block_cmt_end :: Parser String
cpp_line_cmt_start :: Parser String
slash :: Parser String
eol_or_eof :: Parser ()
keyword :: String -> Parser ()
kwds :: Set String
isKeyword :: String -> Bool
in_, within_, external_, protected_, public_, import_, extends_, elsewhen_, enumeration_, constrainedby_, connector_, record_, replaceable_, algorithm_, equation_, end_when_, end_while_, end_if_, end_for_, annotation_, function_, or_, and_, connect_, end_, loop_, while_, when_, for_, elseif_, else_, then_, if_ :: Parser ()
not_ :: Parser Not
true_, false_ :: Parser Bool
der_, initial_ :: Parser DIN
init_ :: Parser Init
each_ :: Parser Each
final_ :: Parser Final
redeclare_ :: Parser Redeclare
inner_ :: Parser Inner
outer_ :: Parser Outer
flow_, stream_ :: Parser FS
discrete_, constant_, parameter_ :: Parser DPC
input_, output_ :: Parser OI
partial_ :: Parser Partial
encapsulated_ :: Parser Encapsulated
class_, operator_, package_, type_, block_, model_ :: Parser Prefix
pure_, impure_ :: Parser PureImpure
operatorfunction_ :: Parser OperatorFunction
operatorrecord_ :: Parser OperatorRecord
expandable_ :: Parser Expandable
break_, return_ :: Parser Stmt
rel_op :: Parser RelOp
add_op :: Parser AddOp
mul_op :: Parser MulOp
pot_op :: Parser PotOp
operator :: [(String, a)] -> Parser a
commaList :: Parser a -> Parser [a]
semiList :: Parser a -> Parser [a]
dotList :: Parser a -> Parser [a]
plusList :: Parser a -> Parser [a]

module Language.Modelica.Parser.Expression
expression :: Parser Expression
if_expression :: Parser Expression
else_if_expression :: Parser ElseIfExpression
simple_expression :: Parser SimpleExpression
logical_expression :: Parser LogicalExpression
logical_term :: Parser LogicalTerm
logical_factor :: Parser LogicalFactor
relation :: Parser Relation
arithmetic_expression :: Parser ArithmeticExpression
term :: Parser Term
factor :: Parser Factor
primary :: Parser Primary
din :: Parser DIN
primary_output_expression_list :: Parser Primary
primary_expression_list :: Parser Primary
component_reference :: Parser ComponentReference
named_arguments :: Parser NamedArguments
named_argument :: Parser NamedArgument
function_call_args :: Parser FunctionCallArgs
function_arguments :: Parser FunctionArguments
function_argument :: Parser FunctionArgument
output_expression_list :: Parser OutputExpressionList
expression_list :: Parser ExpressionList
name :: Parser Name
for_indices :: Parser ForIndices
for_index :: Parser ForIndex
array_subscripts :: Parser ArraySubscripts
subscript :: Parser Subscript

module Language.Modelica.Parser.Basic
class_prefixes :: Parser ClassPrefixes
class_prefixes_function :: Parser Prefix
class_prefixes_record :: Parser Prefix
class_prefixes_connector :: Parser Prefix
type_prefix :: Parser TypePrefix
type_specifier :: Parser Name
base_prefix :: Parser BasePrefix
string_comment :: Parser StringComment

module Language.Modelica.Parser.Modification
modification :: Parser Modification
class_modification :: Parser ClassModification
argument_list :: Parser ArgumentList
argument :: Parser Argument
element_modification_or_replacable :: Parser ElementModOrRep
element_modification :: Parser ElementModification
element_redeclaration :: Parser ElementRedeclaration
element_replaceable :: Parser ElementReplaceableShort
short_class_definition :: Parser ShortClassDefinition
short_class_def_1 :: Parser ShortClassDef
enum_list_or_colon :: Parser (Either Colon (Maybe EnumList))
enum_list :: Parser EnumList
enumeration_literal :: Parser EnumerationLiteral
short_class_def_2 :: Parser ShortClassDef
component_clause1 :: Parser ComponentClause1
component_declaration1 :: Parser ComponentDeclaration1
extends_clause :: Parser ExtendsClause
constraining_clause :: Parser ConstrainingClause
declaration :: Parser Declaration
annotation :: Parser Annotation
comment :: Parser Comment

module Language.Modelica.Parser.ComponentClause
component_clause :: Parser ComponentClause
component_list :: Parser ComponentList
component_declaration :: Parser ComponentDeclaration
condition_attribute :: Parser ConditionAttribute

module Language.Modelica.Parser.Equation
equations :: Parser [Equation]
equation_section :: Parser EquationSection
equation :: Parser Equation
if_equation :: Parser Eqn
else_if_equation :: Parser ElseIfEquation
for_equation :: Parser Eqn
when_equation :: Parser Eqn
else_when_equation :: Parser ElseWhenEquation
connect_clause :: Parser Eqn
statements :: Parser [Statement]
algorithm_section :: Parser AlgorithmSection
statement :: Parser Statement
if_statement :: Parser Stmt
else_if_statement :: Parser ElseIfStatement
for_statement :: Parser Stmt
when_statement :: Parser Stmt
else_when_statement :: Parser ElseWhenStatement
while_statement :: Parser Stmt
comp_ref_statement :: Parser Stmt
output_list_statement :: Parser Stmt

module Language.Modelica.Parser.ClassDefinition
import_clause :: Parser ImportClause
import_clause1 :: Parser Import
import_clause2 :: Parser Import
import_list :: Parser ImportList
element :: Parser Element
element_help :: Parser Element
element_options :: Parser ElementOptions
classDefOrCompClause :: Parser (Either ClassDefinition ComponentClause)
element_list :: Parser ElementList
external_function_call :: Parser ExternalFunctionCall
language_specification :: Parser LanguageSpecification
composition_list :: Parser [CompositionList]
composition_external :: Parser CompositionExternal

-- | This parser behaves according to the specification.
composition_annotation_last :: Parser Composition

-- | In order to succeed, this parser needs the <i>annotation</i> keyword
--   first.
composition_annotation_first :: Parser Composition
composition :: Parser Composition
class_specifier :: Parser ClassSpecifier
class_specifier_a :: Parser ClassSpecifier
class_specifier_enum :: Parser ClassSpecifier
class_specifier_der :: Parser ClassSpecifier
class_specifier_end :: Parser ClassSpecifier
class_specifier_extends :: Parser ClassSpecifier
class_definition :: Parser ClassDefinition

-- | Main entry point for parsing
stored_definition :: Parser StoredDefinition

module Language.Modelica.Syntax.Programme
data TextSegment
Str :: String -> TextSegment
LineComment :: String -> TextSegment
BlockComment :: String -> TextSegment
Code :: String -> TextSegment
instance Show TextSegment
instance Eq TextSegment
instance ToString [TextSegment]
instance ToString TextSegment

module Language.Modelica.Parser.Programme
code :: Parser TextSegment
block :: Parser TextSegment
modelica_programme :: Parser [TextSegment]

module Language.Modelica.Parser
commentsAndCode :: OptionSet -> FilePath -> String -> [TextSegment]
simple :: FilePath -> String -> StoredDefinition
withOptions :: OptionSet -> FilePath -> String -> StoredDefinition
