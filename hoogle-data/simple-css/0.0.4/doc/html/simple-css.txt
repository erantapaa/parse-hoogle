-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | simple binding of css and html
--   
--   Library binds css and html. It takes notion of <i>html for content,
--   css for styling</i> to extreme. There are functions to build 'styling
--   tree' and html elements can be placed only in the lists of the tree.
--   Html elements can be groupped with <a>div</a>, <a>span</a> or <a>a</a>
--   tags and styled with subset of css. Result of the programm is string
--   of css code and list of html elements. Module <a>SimpleCss</a>
--   contains core functions of the library and <a>SimpleCss.Tricks</a>
--   translates some css tricks i've found in the web. See
--   'example/Main.hs' to get started
@package simple-css
@version 0.0.4

module SimpleCss

-- | representing Css data type
--   
--   Css's parameter is html type
data Css a
type CssCode = String
type Href = String
type Tag = String
type Pseudo = [(PseudoVal, [Decl])]
type Context = [Tag]

-- | html element constructor
prim :: a -> Css a

-- | <tt>span</tt> groupping
hcat :: [Css a] -> Css a

-- | <tt>div</tt> groupping
vcat :: [Css a] -> Css a

-- | <tt>a</tt> groupping
acat :: Href -> [Css a] -> Css a

-- | vcat for singleton
div' :: Css a -> Css a

-- | hcat for singleton
span' :: Css a -> Css a

-- | acat for singleton
a' :: Href -> Css a -> Css a

-- | set class
dot :: [Decl] -> Css a -> Css a

-- | set class with pseudo- element/class
pseudo :: Pseudo -> Css a -> Css a

-- | styles descendants
context :: Context -> [Decl] -> Css a -> Css a

-- | Html specification
--   
--   to render css you should specify html's elements groupping with
--   <tt>a</tt>, <tt>div</tt> and <tt>span</tt> tags and way to assign
--   values of <tt>class</tt> attribute
data HtmlSpec a
HtmlSpec :: ([a] -> a) -> ([a] -> a) -> (Href -> [a] -> a) -> (String -> a -> a) -> HtmlSpec a
divTag :: HtmlSpec a -> [a] -> a
spanTag :: HtmlSpec a -> [a] -> a
aTag :: HtmlSpec a -> Href -> [a] -> a
classAttr :: HtmlSpec a -> String -> a -> a

-- | render css
--   
--   returns string of css code and list of htmls
renderCss :: HtmlSpec a -> [Css a] -> ([RuleSet], [a])

-- | render css for blaze-html
toBlaze :: [Css Html] -> ([RuleSet], [Html])
instance Eq Rule
instance Show RuleType
instance Eq RuleType
instance Ord RuleType
instance Hashable PseudoVal
instance Hashable Decl
instance Hashable Rule

module SimpleCss.Tricks.Shortcuts.Html

-- | <tt>p</tt> tag
p :: String -> Css Html

-- | <tt>a</tt> tag
--   
--   arguments
--   
--   <ul>
--   <li>href</li>
--   <li>text</li>
--   </ul>
a :: String -> String -> Css Html

-- | images
--   
--   arguments :
--   
--   <ul>
--   <li><tt>alt</tt> atribute value</li>
--   <li><tt>src</tt> atribute value</li>
--   </ul>
img :: String -> String -> Css Html

-- | <tt>pre</tt> tag
pre :: String -> Css Html

-- | <tt>h1</tt> tag
h1 :: String -> Css Html

-- | <tt>h2</tt> tag
h2 :: String -> Css Html

-- | <tt>h3</tt> tag
h3 :: String -> Css Html

-- | <tt>h4</tt> tag
h4 :: String -> Css Html

-- | <tt>h5</tt> tag
h5 :: String -> Css Html

-- | <tt>h6</tt> tag
h6 :: String -> Css Html

-- | <tt>ul</tt> tag
ul :: [String] -> Css Html

-- | <tt>ol</tt> tag
ol :: [String] -> Css Html

-- | <tt>ul</tt> tag with links
--   
--   arguments : [(href, text)]
aul :: [(String, String)] -> Css Html

-- | <tt>ol</tt> tag with links
--   
--   arguments : [(href, text)]
aol :: [(String, String)] -> Css Html

-- | table
--   
--   arguments :
--   
--   <ul>
--   <li>Maybe header</li>
--   <li>[rows]</li>
--   </ul>
table :: Maybe [String] -> [[String]] -> Css Html
encoding :: String -> Html

-- | writes css and htmls to files
--   
--   arguments :
--   
--   <ul>
--   <li>css file name</li>
--   <li>global css StyleSheet i.e. ruleSets about <tt>body</tt> or some
--   html elements</li>
--   <li>list of ((filename, html head sub elements), css)</li>
--   </ul>
writeBlazeCss :: String -> StyleSheet -> [((String, Html), Css Html)] -> IO ()

-- | genereates html filenames and head's sublelements from list of titles
initHtmls :: [String] -> [(String, Html)]


-- | styling shortcuts
module SimpleCss.Tricks.Shortcuts.Css
data Dir
DAll :: Dir
DLeft :: Dir
DRight :: Dir
DBottom :: Dir
DTop :: Dir
top :: Dir
bottom :: Dir
left :: Dir
right :: Dir

-- | <pre>
--   hor = [left, right]
--   </pre>
hor :: [Dir]

-- | <pre>
--   ver = [top, bottom]
--   </pre>
ver :: [Dir]

-- | <pre>
--   sides = [left, top, right, bottom]
--   </pre>
sides :: [Dir]

-- | sets <tt>float</tt> property to <tt>left</tt>
lfloat :: [Decl]

-- | sets <tt>float</tt> property to <tt>right</tt>
rfloat :: [Decl]

-- | sets <tt>clear</tt> property to <tt>right</tt>
rclear :: [Decl]

-- | sets <tt>clear</tt> property to <tt>left</tt>
lclear :: [Decl]

-- | sets <tt>clear</tt> property to <tt>both</tt>
bclear :: [Decl]
type BorderStyle = Expr
type BorderWidth = Expr
type BorderColor = Expr

-- | sets <tt>border</tt> properties
border :: [Dir] -> BorderStyle -> BorderWidth -> BorderColor -> [Decl]

-- | sets <tt>border</tt> property to none and assigns
--   <tt>border-width</tt> to zero
borderNone :: [Dir] -> [Decl]

-- | sets <tt>border-radius</tt> property
borderRadius :: [Expr] -> [Decl]

-- | sets <tt>margin</tt> width
margin :: [Dir] -> Expr -> [Decl]

-- | sets <tt>padding</tt> width
padding :: [Dir] -> Expr -> [Decl]

-- | sets <tt>wdth</tt>
width :: Expr -> [Decl]

-- | sets <tt>height</tt>
height :: Expr -> [Decl]

-- | sets <tt>background-color</tt> property
bkgColor :: Expr -> [Decl]

-- | sets color and background-color properties
brick :: Expr -> Expr -> [Decl]

-- | loads picture to background
pict :: String -> [Decl]

-- | sets <tt>color</tt> property to specified color
color :: Expr -> [Decl]

-- | Box model
--   
--   elements groupped in box can be displayed as <tt>block</tt> or as
--   <tt>inline-block</tt>
data Box

-- | block box
box :: [Decl] -> Box

-- | inline-block box
ibox :: [Decl] -> Box

-- | static box
static :: Box -> Css a -> Css a

-- | rollover box
--   
--   arguments :
--   
--   <ul>
--   <li>static box</li>
--   <li>on hover box</li>
--   </ul>
rollOver :: Box -> Box -> Css a -> Css a

-- | mouse-interaction box arguments :
--   
--   <ul>
--   <li>link</li>
--   <li>visited</li>
--   <li>hover</li>
--   <li>active</li>
--   </ul>
--   
--   box
onMouse :: Box -> Box -> Box -> Box -> (Css a -> Css a)
instance Show Dir

module SimpleCss.Tricks.Layouts

-- | setting width in procents
(^-) :: Double -> Css a -> Css a

-- | setting height in procents
(^|) :: Double -> Css a -> Css a

-- | represents column layout
data ColumnWidth a
ColumnWidth :: a -> a -> a -> ColumnWidth a

-- | left padding width
leftPad :: ColumnWidth a -> a

-- | content width
midWidth :: ColumnWidth a -> a

-- | right padding width
rightPad :: ColumnWidth a -> a

-- | <pre>
--   leftPad + midWidth + rightPad
--   </pre>
totalWidth :: Num a => ColumnWidth a -> a

-- | short-cut for <a>ColumnWidth</a> constructor
colw :: Num a => a -> a -> a -> ColumnWidth a

-- | construct list of columnWidth values from list of triplets
toColumnWidth :: [(a, a, a)] -> [ColumnWidth a]

-- | left menu + content
--   
--   arguments are :
--   
--   <ul>
--   <li>length constructor</li>
--   <li>left menu column width</li>
--   <li>left menu</li>
--   <li>content</li>
--   </ul>
leftContent :: Num t => (t -> Expr) -> t -> Css a -> Css a -> Css a

-- | content + right menu
--   
--   arguments are :
--   
--   <ul>
--   <li>length constructor</li>
--   <li>right menu column width</li>
--   <li>right menu</li>
--   <li>content</li>
--   </ul>
rightContent :: Num t => (t -> Expr) -> t -> Css a -> Css a -> Css a

-- | left menu + content + right menu
--   
--   arguments are :
--   
--   <ul>
--   <li>length constructor</li>
--   <li>left menu column width</li>
--   <li>right menu column width</li>
--   <li>left menu</li>
--   <li>right menu</li>
--   <li>content</li>
--   </ul>
leftRightContent :: Num t => (t -> Expr) -> t -> t -> Css a -> Css a -> Css a -> Css a

-- | liquid layouts
--   
--   Places n-columns, implementation of Matthew James Taylor's liquid
--   layout technique.
--   
--   See
--   <a>http://matthewjamestaylor.com/blog/equal-height-columns-cross-browser-css-no-hacks</a>
--   
--   every columns is wrapped in two divs (inner an outer) and floated,
--   styling is applied to both divs, it makes possible to construct
--   columns of equal height, they look like.
--   
--   All inherited properties should be assigned for each column.
--   
--   For example if you want to make two columns one is black background
--   and white text and another mirrors colors, you should define colors
--   for BOTH columns. Otherwise one column will spread all over the screen
--   
--   <pre>
--   elems = [p text1, p text2]
--   
--   decl1 = dot [C.color &lt;:&gt; white, C.backgroundColor &lt;:&gt; black]
--   decl2 = dot [C.color &lt;:&gt; black, C.backgroundColor &lt;:&gt; white]
--   ds = [decl1, decl2]
--    
--   ws = toColumnWidth [(10, 40, 10), (10, 40, 10)]
--   
--   res = columns pct (zip (zip ws ds) elems) 
--   </pre>
columns :: Num t => (t -> Expr) -> [((ColumnWidth t, Css a -> Css a), Css a)] -> Css a
instance Show a => Show (ColumnWidth a)

module SimpleCss.Tricks.Menus

-- | horizontal menu
hmenu :: [Css a] -> Css a

-- | relative horizontal menu, everything is forced to equal width
hmenuRel :: [Css a] -> Css a

-- | vertical menu
vmenu :: [Css a] -> Css a

-- | making tabs
--   
--   arguments
--   
--   <ul>
--   <li>menu constructor</li>
--   <li>active style</li>
--   <li>passive style</li>
--   <li>elements</li>
--   </ul>
--   
--   result
--   
--   <ul>
--   <li>list of menus' with different active tabs</li>
--   </ul>
tabs :: ([Css a] -> Css a) -> [Box] -> [Box] -> [Css a] -> [Css a]

module SimpleCss.Tricks.Images

-- | representing background images
data BkgIm
BkgIm :: String -> Expr -> Expr -> Expr -> BkgIm
bkgImUrl :: BkgIm -> String
bkgImRepeat :: BkgIm -> Expr
bkgImXPos :: BkgIm -> Expr
bkgImYPos :: BkgIm -> Expr

-- | synonym to <a>BkgIm</a>
--   
--   arguments are
--   
--   <ul>
--   <li>url</li>
--   <li>repeat property</li>
--   <li>x coordinate</li>
--   <li>y coordinate</li>
--   </ul>
bkgIm :: String -> Expr -> Expr -> Expr -> BkgIm

-- | set of background images
--   
--   arguments
--   
--   <ul>
--   <li>background color</li>
--   <li>list of images</li>
--   </ul>
--   
--   head of list is on top, then goes second image and etc.
bkgIms :: Expr -> [BkgIm] -> Css a -> Css a

-- | floating gallery of images
gallery :: [Css a] -> Css a

module SimpleCss.Tricks
