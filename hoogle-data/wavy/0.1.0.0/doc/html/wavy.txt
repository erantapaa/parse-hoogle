-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Process WAVE files in Haskell.
--   
--   Wavy was designed to be a fast and efficient method of extracting and
--   writing PCM data to and from WAV files. It is here to help you make
--   fast use of Audio data in your Haskell programs and thus encourage
--   many more audio projects in Haskell.
@package wavy
@version 0.1.0.0


-- | This module allows us to deal with channel data inside of a riff file.
--   You may wish to extract audio data from WAVE files or put audio data
--   into wave files and your data may be in integral or floating formats.
--   These methods make it trivial for you to put that data inside
--   WaveFiles. This module is designed to make the manipulation of the
--   channel data inside a wave file easier.
module Sound.Wav.ChannelData

-- | Generate a getter that will parse a WAVE <a>data </a> chunk from a raw
--   stream given a wave format.
getWaveData :: WaveFormat -> Get [[Int64]]

-- | Given a WaveFile you will either get back an integral lossless
--   representation of the audio data or you will get back a parser error.
extractIntegralWaveData :: WaveFile -> Either WaveParseError IntegralWaveData

-- | Extracts the data in the WaveFile in the floating format. This method
--   allows you to view the audio data in this file in the range [-1, 1] so
--   that you can process a normalised view of the data no matter how it
--   was internally encoded. Be aware that the conversion to floating point
--   and back will be a lossy operation.
extractFloatingWaveData :: WaveFile -> Either WaveParseError FloatingWaveData

-- | Given a WaveFile replace it's data contents with the integral data
--   that you provide.
encodeIntegralWaveData :: WaveFile -> IntegralWaveData -> WaveFile

-- | Given a WaveFile replace it's data contents with the floating data
--   that you provide.
encodeFloatingWaveData :: WaveFile -> FloatingWaveData -> WaveFile

-- | A putter for integral wave data given a format so that you can output
--   correctly formatted data to any stream.
putIntegralWaveData :: WaveFormat -> IntegralWaveData -> Put

-- | A putter for floating wave data given a format so that you can output
--   correctly formatted data to any stream.
putFloatingWaveData :: WaveFormat -> FloatingWaveData -> Put


-- | Everything about WAVE files is contained here: reading, editing and
--   writing the data within is all possible in this module.
module Sound.Wav

-- | Decodes a lazy bytestring into a WaveFile.
decodeWave :: ByteString -> WaveFile

-- | Give this function the path to a WAVE file and it will parse it into
--   our internal | representation.
decodeWaveFile :: FilePath -> IO WaveFile

-- | Give this function the path to a WAVE file and it will Either return
--   an error or a WaveFile containing WAVE data. This does the exact same
--   thing as decodeWaveFile except that, instead of failing on an error,
--   it returns the error in an either.
decodeWaveFileOrFail :: FilePath -> IO (Either (ByteOffset, String) WaveFile)

-- | We would like to be able to pass in a path to a WaveFile and a handler
--   so that we don't have to deal with opening / closing a file and
--   parsing the contents just to apply a handler to the data. This is a
--   convenience method that just lets you do something with a wave file.
withWaveFile :: FilePath -> (Either WaveParseError WaveFile -> IO ()) -> IO ()

-- | Outputs a WAVE file representation to a file (that can then be
--   understood by other WAVE file reading programs). The output of this
--   function should fully comply to the WAVE specifications.
encodeWaveFile :: FilePath -> WaveFile -> IO ()

-- | The representation of a WaveFile. This ADT is this libraries
--   representation of a WaveFile. It is important to note that the format
--   chunk and data chunks are not optional. Also, the wave data is left in
--   it's raw format so that it can be parsed appropriately later depending
--   on wether you even want to parse the data or if you have the data in a
--   special encoding that requires special handling.
data WaveFile
WaveFile :: WaveFormat -> RawWaveData -> Maybe WaveFact -> Maybe WaveInfo -> WaveFile

-- | The format chunk that specifies what data is present in this audio
--   file.
waveFormat :: WaveFile -> WaveFormat

-- | The unparsed wave data so that you can choose to parse it in whichever
--   way you please, if at all. Having this option makes metadata queries
--   on wave files extremely fast.
waveData :: WaveFile -> RawWaveData

-- | A potential FACT chunk in the WaveFile.
waveFact :: WaveFile -> Maybe WaveFact

-- | An optional INFO chunk in the wave file that contains many different
--   forms of metadata.
waveInfo :: WaveFile -> Maybe WaveInfo

-- | Each Riff file has a Format chunk and this data structure encapsulates
--   the data that is usually contained within. The format chunk gives you
--   useful information: such as what encoding was run over the data in the
--   file and how many bits were used per sample.
data WaveFormat
WaveFormat :: AudioFormat -> Word16 -> SampleRate -> ByteRate -> BlockAlignment -> BitsPerSample -> WaveFormat

-- | The audio format that this file was encoded with.
waveAudioFormat :: WaveFormat -> AudioFormat

-- | The number of channels in this recorded data. This is the difference
--   between Mono, Stereo and more.
waveNumChannels :: WaveFormat -> Word16

-- | The rate at which samples were taken. Measured in Hz.
waveSampleRate :: WaveFormat -> SampleRate

-- | The rate at which bytes should be consumed in Hz.
waveByteRate :: WaveFormat -> ByteRate

-- | The number of bytes per block in this file.
waveBlockAlignment :: WaveFormat -> BlockAlignment

-- | The number of bits of data in every sample. This is important as it
--   gives you an upper and lower bound on the values present in the data.
waveBitsPerSample :: WaveFormat -> BitsPerSample

-- | From the specifications:
--   
--   "The fact chunk is required if the waveform data is contained in a
--   wavl LIST chunk and for all compressed audio formats. The chunk is not
--   required for PCM files using the data chunk format."
--   
--   This means that this section will become more important as this
--   library matures and begins to support a whole range of
--   <a>AudioFormat</a>s.
data WaveFact
WaveFact :: Word32 -> WaveFact

-- | The number of WAVE samples in this file.
waveFactSampleCount :: WaveFact -> Word32

-- | This datatype defines an INFO chunk and our internal representation of
--   it. It is actually defined very clearly in section 2-14 of the Spec
--   and we have tried to mirror that representation here. The spec says
--   the following:
--   
--   <pre>
--   An INFO list should contain only the following
--   chunks. New chunks may be defined, but an application
--   should ignore any chunk it doesn't understand. The
--   chunks listed below may only appear in an INFO list.
--   Each chunk contains a ZSTR, or null-terminated text
--   string.
--   </pre>
--   
--   Manipulations of that data structure should adhere to that
--   specification.
data WaveInfo
WaveInfo :: Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe [String] -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe [String] -> Maybe String -> Maybe [String] -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> WaveInfo
archiveLocation :: WaveInfo -> Maybe String
artist :: WaveInfo -> Maybe String
commissionedBy :: WaveInfo -> Maybe String
comments :: WaveInfo -> Maybe String
copyrights :: WaveInfo -> Maybe [String]
creationDate :: WaveInfo -> Maybe String
croppedDetails :: WaveInfo -> Maybe String
originalDimensions :: WaveInfo -> Maybe String
dotsPerInch :: WaveInfo -> Maybe String
engineers :: WaveInfo -> Maybe [String]
genre :: WaveInfo -> Maybe String
keywords :: WaveInfo -> Maybe [String]
lightness :: WaveInfo -> Maybe String
originalMedium :: WaveInfo -> Maybe String
name :: WaveInfo -> Maybe String
coloursInPalette :: WaveInfo -> Maybe String
originalProduct :: WaveInfo -> Maybe String
subject :: WaveInfo -> Maybe String
creationSoftware :: WaveInfo -> Maybe String
sharpness :: WaveInfo -> Maybe String
contentSource :: WaveInfo -> Maybe String
originalForm :: WaveInfo -> Maybe String
technician :: WaveInfo -> Maybe String

-- | This is the default value that an INFO chunk can take, a chunk that
--   contains no metadata at all.
waveInfoDefault :: WaveInfo

-- | A multi-channel structure for holding integral wave data efficiently.
data IntegralWaveData
IntegralWaveData :: [IntegralWaveChannel] -> IntegralWaveData

-- | An efficient data structure for holding a single channel of integral
--   wave data.
type IntegralWaveChannel = Vector Int64

-- | A multi-channel structure for holding floating wave data efficiently.
data FloatingWaveData
FloatingWaveData :: [FloatingWaveChannel] -> FloatingWaveData

-- | An efficient data structure for holding a single channel of floating
--   wave data.
type FloatingWaveChannel = Vector Double

-- | The representation for parser errors when attempting to read WaveFiles
--   or their data.
type WaveParseError = String

-- | You want to be able to get the info chunk from your WaveFiles,
--   however, if the info chunk does not exist then you will be provided
--   with a default info chunk.
getInfoData :: WaveFile -> WaveInfo

-- | Update the INFO metadata chunk inside an existing WaveFile. This will
--   allow you to edit the metadata inside a file.
updateWaveInfo :: (WaveInfo -> WaveInfo) -> WaveFile -> WaveFile

-- | This function is reponsible for converting an AudioFormat into a
--   representation that is human readable and what people would expect. It
--   is useful if you need to display your AudioFormat to a human and you
--   want to know, quickly, what to call it.
prettyShowAudioFormat :: AudioFormat -> String

-- | This is a massive data structure that contains every single different
--   audio format that I could find. It allows us to represent AudioFormats
--   in a very human readable and easy to understand manner insize wavy.
--   This data structure will be constantly growing and changing. Do not be
--   surprised if names change or elements are added. Because this list is
--   always growing we have an UnknownFormat element that can wrap and
--   AudioFormatData so that, in the event that we do not know about an
--   audio format. You can still deal with it naturally.
data AudioFormat
MicrosoftPCM :: AudioFormat
MicrosoftADPCM :: AudioFormat
MicrosoftIEEEfloat :: AudioFormat
CompaqVSELP :: AudioFormat
IBMCVSD :: AudioFormat
MicrosoftaLaw :: AudioFormat
MicrosoftuLaw :: AudioFormat
MicrosoftDTS :: AudioFormat
DRM :: AudioFormat
WMA9Speech :: AudioFormat
MicrosoftWindowsMediaRTVoice :: AudioFormat
OKIADPCM :: AudioFormat
IntelIMADVIADPCM :: AudioFormat
VideologicMediaspaceADPCM :: AudioFormat
SierraADPCM :: AudioFormat
AntexG723ADPCM :: AudioFormat
DSPSolutionsDIGISTD :: AudioFormat
DSPSolutionsDIGIFIX :: AudioFormat
DialoicOKIADPCM :: AudioFormat
MediaVisionADPCM :: AudioFormat
HPCU :: AudioFormat
HPDynamicVoice :: AudioFormat
YamahaADPCM :: AudioFormat
SONARCSpeechCompression :: AudioFormat
DSPGroupTrueSpeech :: AudioFormat
EchoSpeechCorp :: AudioFormat
VirtualMusicAudiofileAF36 :: AudioFormat
AudioProcessingTech :: AudioFormat
VirtualMusicAudiofileAF10 :: AudioFormat
AculabProsody1612 :: AudioFormat
MergingTechLRC :: AudioFormat
DolbyAC2 :: AudioFormat
MicrosoftGSM610 :: AudioFormat
MSNAudio :: AudioFormat
AntexADPCME :: AudioFormat
ControlResourcesVQLPC :: AudioFormat
DSPSolutionsDIGIREAL :: AudioFormat
DSPSolutionsDIGIADPCM :: AudioFormat
ControlResourcesCR10 :: AudioFormat
NaturalMicroSystemsVBXADPCM :: AudioFormat
CrystalSemiconductorIMAADPCM :: AudioFormat
EchoSpeechECHOSC3 :: AudioFormat
RockwellADPCM :: AudioFormat
RockwellDIGITALK :: AudioFormat
XebecMultimedia :: AudioFormat
AntexG721ADPCM :: AudioFormat
AntexG728CELP :: AudioFormat
MicrosoftMSG723 :: AudioFormat
IBMAVCADPCM :: AudioFormat
ITUTG726 :: AudioFormat
MicrosoftMPEG :: AudioFormat
RT23orPAC :: AudioFormat
InSoftRT24 :: AudioFormat
InSoftPAC :: AudioFormat
MP3 :: AudioFormat
Cirrus :: AudioFormat
CirrusLogic :: AudioFormat
ESSTechPCM :: AudioFormat
VoxwareInc :: AudioFormat
CanopusATRAC :: AudioFormat
APICOMG726ADPCM :: AudioFormat
APICOMG722ADPCM :: AudioFormat
MicrosoftDSAT :: AudioFormat
MicorsoftDSATDISPLAY :: AudioFormat
VoxwareByteAligned :: AudioFormat
VoxwareAC8 :: AudioFormat
VoxwareAC10 :: AudioFormat
VoxwareAC16 :: AudioFormat
VoxwareAC20 :: AudioFormat
VoxwareMetaVoice :: AudioFormat
VoxwareMetaSound :: AudioFormat
VoxwareRT29HW :: AudioFormat
VoxwareVR12 :: AudioFormat
VoxwareVR18 :: AudioFormat
VoxwareTQ40 :: AudioFormat
VoxwareSC3 :: AudioFormat
Soundsoft :: AudioFormat
VoxwareTQ60 :: AudioFormat
MicrosoftMSRT24 :: AudioFormat
ATandTG729A :: AudioFormat
MotionPixelsMVIMV12 :: AudioFormat
DataFusionG726 :: AudioFormat
DataFusionGSM610 :: AudioFormat
IteratedSystemsAudio :: AudioFormat
Onlive :: AudioFormat
MultitudeIncFTSX20 :: AudioFormat
InfocomITSASG721ADPCM :: AudioFormat
ConvediaG729 :: AudioFormat
NotspecifiedcongruencyInc :: AudioFormat
SiemensSBC24 :: AudioFormat
SonicFoundryDolbyAC3APDIF :: AudioFormat
MediaSonicG723 :: AudioFormat
AculabProsody8kbps :: AudioFormat
ZyXELADPCM :: AudioFormat
PhilipsLPCBB :: AudioFormat
StuderProfessionalAudioPacked :: AudioFormat
MaldenPhonyTalk :: AudioFormat
RacalRecorderGSM :: AudioFormat
RacalRecorderG720a :: AudioFormat
RacalG7231 :: AudioFormat
RacalTetraACELP :: AudioFormat
NECAACNECCorporation :: AudioFormat
AAC :: AudioFormat
RhetorexADPCM :: AudioFormat
IBMuLaw :: AudioFormat
IBMaLaw :: AudioFormat
IBMADPCM :: AudioFormat
VivoG723 :: AudioFormat
VivoSiren :: AudioFormat
PhilipsSpeechProcessingCELP :: AudioFormat
PhilipsSpeechProcessingGRUNDIG :: AudioFormat
DigitalG723 :: AudioFormat
SanyoLDADPCM :: AudioFormat
SiproLabACEPLNET :: AudioFormat
SiproLabACELP4800 :: AudioFormat
SiproLabACELP8V3 :: AudioFormat
SiproLabG729 :: AudioFormat
SiproLabG729A :: AudioFormat
SiproLabKelvin :: AudioFormat
VoiceAgeAMR :: AudioFormat
DictaphoneG726ADPCM :: AudioFormat
QualcommPureVoice :: AudioFormat
QualcommHalfRate :: AudioFormat
RingZeroSystemsTUBGSM :: AudioFormat
MicrosoftAudio1 :: AudioFormat
WindowsMediaAudioV2V7V8V9DivXaudioSpecWMAAlexAC3Audio :: AudioFormat
WindowsMediaAudioProfessionalV9 :: AudioFormat
WindowsMediaAudioLosslessV9 :: AudioFormat
WMAProoverSPDIF :: AudioFormat
UNISYSNAPADPCM :: AudioFormat
UNISYSNAPULAW :: AudioFormat
UNISYSNAPALAW :: AudioFormat
UNISYSNAP16K :: AudioFormat
MMSYCOMACMSYC008SyComTechnologies :: AudioFormat
MMSYCOMACMSYC701G726LSyComTechnologies :: AudioFormat
MMSYCOMACMSYC701CELP54SyComTechnologies :: AudioFormat
MMSYCOMACMSYC701CELP68SyComTechnologies :: AudioFormat
KnowledgeAdventureADPCM :: AudioFormat
FraunhoferIISMPEG2AAC :: AudioFormat
DigitalTheaterSystemsDTSDS :: AudioFormat
CreativeLabsADPCM :: AudioFormat
CreativeLabsFASTSPEECH8 :: AudioFormat
CreativeLabsFASTSPEECH10 :: AudioFormat
UHERADPCM :: AudioFormat
UleadDVACM :: AudioFormat
QuarterdeckCorp :: AudioFormat
ILinkVC :: AudioFormat
AurealSemiconductorRawSport :: AudioFormat
ESSTAC3 :: AudioFormat
InteractiveProductsHSX :: AudioFormat
InteractiveProductsRPELP :: AudioFormat
ConsistentCS2 :: AudioFormat
SonySCX :: AudioFormat
SonySCY :: AudioFormat
SonyATRAC3 :: AudioFormat
SonySPC :: AudioFormat
TELUMTelumInc :: AudioFormat
TELUMIATelumInc :: AudioFormat
NorcomVoiceSystemsADPCM :: AudioFormat
FujitsuFMTOWNSSND :: AudioFormat
FujitsuSpecnotspecified :: AudioFormat
MicronasSemiconductorsIncDevelopment :: AudioFormat
MicronasSemiconductorsIncCELP833 :: AudioFormat
BrooktreeDigital :: AudioFormat
IntelMusicCoderSpecIMC :: AudioFormat
LigosIndeoAudio :: AudioFormat
QDesignMusic :: AudioFormat
On2VP7On2Technologies :: AudioFormat
On2VP6On2Technologies :: AudioFormat
ATandTVMEVMPCM :: AudioFormat
ATandTTCP :: AudioFormat
YMPEGAlphaSpecdummyforMPEG2compressor :: AudioFormat
ClearJumpLiteWaveSpeclossless :: AudioFormat
OlivettiGSM :: AudioFormat
OlivettiADPCM :: AudioFormat
OlivettiCELP :: AudioFormat
OlivettiSBC :: AudioFormat
OlivettiOPR :: AudioFormat
LernoutandHauspie :: AudioFormat
LernoutandHauspieCELPcodec :: AudioFormat
LernoutandHauspieSBCcodec :: AudioFormat
NorrisCommInc :: AudioFormat
ISIAudio :: AudioFormat
ATandTSoundspaceMusicCompression :: AudioFormat
VoxWareRT24speechcodec :: AudioFormat
LucentelemediaAX24000PMusiccodec :: AudioFormat
SonicFoundryLOSSLESS :: AudioFormat
InningsTelecomIncADPCM :: AudioFormat
LucentSX8300Pspeechcodec :: AudioFormat
LucentSX5363SG723compliantcodec :: AudioFormat
CUseeMeDigiTalkSpecexRocwell :: AudioFormat
NCTSoftALF2CDACM :: AudioFormat
FASTMultimediaDVM :: AudioFormat
DolbyDTSSpecDigitalTheaterSystem :: AudioFormat
RealAudio12144 :: AudioFormat
RealAudio1Slash2288 :: AudioFormat
RealAudioG2Slash8CookSpeclowbitrate :: AudioFormat
RealAudio3Slash4Slash5MusicSpecDNET :: AudioFormat
RealAudio10AACSpecRAAC :: AudioFormat
RealAudio10AACPlusSpecRACP :: AudioFormat
Reservedrangeto0x2600Microsoft :: AudioFormat
MakeAVISSpecffvfwfakeAVIsoundfromAviSynthscripts :: AudioFormat
DivioMPEG4AACaudio :: AudioFormat
Nokiaadaptivemultirate :: AudioFormat
DivioG726DivioInc :: AudioFormat
LEADSpeech :: AudioFormat
LEADVorbis :: AudioFormat
WavPackAudio :: AudioFormat
OggVorbisSpecmode1 :: AudioFormat
OggVorbisSpecmode2 :: AudioFormat
OggVorbisSpecmode3 :: AudioFormat
OggVorbisSpecmode1Plus :: AudioFormat
OggVorbisSpecmode2Plus :: AudioFormat
OggVorbisSpecmode3Plus :: AudioFormat
ThreeCOMNBX3ComCorporation :: AudioFormat
FAADAAC :: AudioFormat
GSMAMRSpecCBRnoSID :: AudioFormat
GSMAMRSpecVBRincludingSID :: AudioFormat
ComverseInfosysLtdG7231 :: AudioFormat
ComverseInfosysLtdAVQSBC :: AudioFormat
ComverseInfosysLtdOLDSBC :: AudioFormat
SymbolTechnologiesG729A :: AudioFormat
VoiceAgeAMRWBVoiceAgeCorporation :: AudioFormat
IngenientTechnologiesIncG726 :: AudioFormat
ISOSlashMPEG4advancedaudioCoding :: AudioFormat
EncoreSoftwareLtdG726 :: AudioFormat
SpeexACMCodecxiphorg :: AudioFormat
DebugModeSonicFoundryVegasFrameServerACMCodec :: AudioFormat
Unknown :: AudioFormat
FreeLosslessAudioCodecFLAC :: AudioFormat
Extensible :: AudioFormat
Development :: AudioFormat
UnknownFormat :: AudioFormatData -> AudioFormat

-- | An offset, counted in bytes.
type ByteOffset = Int64
instance Binary WaveFile
