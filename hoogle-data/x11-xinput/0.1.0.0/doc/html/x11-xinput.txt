-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell FFI bindings for X11 XInput library (-lXi)
--   
--   Haskell FFI bindings for X11 XInput library (-lXi). Only XInput
--   version 2.0 is supported. See XInput manual pages and XInput2.h, XI2.h
--   for more documentation.
@package x11-xinput
@version 0.1.0.0


-- | This module contains declarations of used XInput event structures. See
--   XInput2.h for more info.
module Graphics.X11.XInput.Types
genericEvent :: EventType
type Opcode = CInt

-- | Type for X11 cookie events
data EventCookie
EventCookie :: Event -> Opcode -> EventType -> CUInt -> Event -> EventCookie

-- | Usual X11 event
ecEvent :: EventCookie -> Event

-- | X11 extension identifier
ecExtension :: EventCookie -> Opcode

-- | Event type
ecType :: EventCookie -> EventType
ecCookie :: EventCookie -> CUInt

-- | XInput event
ecData :: EventCookie -> Event

-- | XInput events
data Event
Event :: Bool -> Display -> Opcode -> EventType -> DeviceID -> EventSpecific -> Event

-- | True if event was sent by SendEvent
eSendEvent :: Event -> Bool
eDisplay :: Event -> Display

-- | X11 extension identifier
eExtension :: Event -> Opcode

-- | Event type
eType :: Event -> EventType

-- | Device identifier
eDeviceId :: Event -> DeviceID

-- | Event-specific data
eSpecific :: Event -> EventSpecific

-- | Event-specific info
data EventSpecific

-- | General constructor for all pointer-related events
GPointerEvent :: CInt -> Int -> Window -> Window -> Window -> CDouble -> CDouble -> CDouble -> CDouble -> PointerEvent -> EventSpecific

-- | Source device identifier
peSourceId :: EventSpecific -> CInt

-- | Detailed info; for example, button number or keycode
peDetail :: EventSpecific -> Int

-- | Root window
peRoot :: EventSpecific -> Window

-- | Event window
peEvent :: EventSpecific -> Window

-- | Child window
peChild :: EventSpecific -> Window
peRootX :: EventSpecific -> CDouble
peRootY :: EventSpecific -> CDouble
peEventX :: EventSpecific -> CDouble
peEventY :: EventSpecific -> CDouble

-- | Event-specific
peSpecific :: EventSpecific -> PointerEvent
PropertyEvent :: Atom -> CInt -> EventSpecific
peProperty :: EventSpecific -> Atom
peWhat :: EventSpecific -> CInt
DeviceChangedEvent :: CInt -> [GDeviceClass] -> EventSpecific
dceReason :: EventSpecific -> CInt
dceClasses :: EventSpecific -> [GDeviceClass]
UnsupportedEvent :: CInt -> EventSpecific

-- | All pointer-related event details
data PointerEvent

-- | XIEnterEvent or XILeaveEvent
EnterLeaveEvent :: CInt -> Bool -> Bool -> ButtonState -> ModifierState -> GroupState -> PointerEvent
eeMode :: PointerEvent -> CInt
eeFocus :: PointerEvent -> Bool
eeSameScreen :: PointerEvent -> Bool
peButtons :: PointerEvent -> ButtonState
peMods :: PointerEvent -> ModifierState
peGroup :: PointerEvent -> GroupState
RawEvent :: EventType -> CInt -> ValuatorState -> PointerEvent
reType :: PointerEvent -> EventType
reFlags :: PointerEvent -> CInt
reValuators :: PointerEvent -> ValuatorState

-- | Device event, such as button press
DeviceEvent :: EventType -> CInt -> ButtonState -> ValuatorState -> ModifierState -> GroupState -> PointerEvent
deType :: PointerEvent -> EventType
deFlags :: PointerEvent -> CInt
peButtons :: PointerEvent -> ButtonState
deValuators :: PointerEvent -> ValuatorState
peMods :: PointerEvent -> ModifierState
peGroup :: PointerEvent -> GroupState

-- | XInput event type
data EventType
XI_DeviceChanged :: EventType
XI_KeyPress :: EventType
XI_KeyRelease :: EventType
XI_ButtonPress :: EventType
XI_ButtonRelease :: EventType
XI_Motion :: EventType
XI_Enter :: EventType
XI_Leave :: EventType
XI_FocusIn :: EventType
XI_FocusOut :: EventType
XI_HierarchyChanged :: EventType
XI_PropertyEvent :: EventType
XI_RawKeyPress :: EventType
XI_RawKeyRelease :: EventType
XI_RawButtonPress :: EventType
XI_RawButtonRelease :: EventType
XI_RawMotion :: EventType
eventType2int :: Num a => EventType -> a
int2eventType :: Integral a => a -> EventType
data EventMask
EventMask :: DeviceID -> [Int] -> EventMask
emDeviceID :: EventMask -> DeviceID
emMask :: EventMask -> [Int]
type EventMaskPtr = Ptr (EventMask)
type EventCookiePtr = Ptr (EventCookie)
type EventPtr = Ptr (Event)
data DeviceType
XIMasterPointer :: DeviceType
XIMasterKeyboard :: DeviceType
XISlavePointer :: DeviceType
XISlaveKeyboard :: DeviceType
XIFloatingSlave :: DeviceType
deviceType2int :: DeviceType -> CInt
int2deviceType :: CInt -> DeviceType
type DeviceID = CInt

-- | Device info
data DeviceInfo
DeviceInfo :: DeviceID -> String -> DeviceType -> DeviceID -> Bool -> [GDeviceClass] -> DeviceInfo

-- | Device identifier
diID :: DeviceInfo -> DeviceID

-- | Device name
diName :: DeviceInfo -> String

-- | Device type: master or slave
diUse :: DeviceInfo -> DeviceType

-- | Identifier of device this device is attached to
diAttachment :: DeviceInfo -> DeviceID
diEnabled :: DeviceInfo -> Bool

-- | Device classes
diClasses :: DeviceInfo -> [GDeviceClass]
type DeviceInfoPtr = Ptr (DeviceInfo)

-- | Type of device class
data DeviceClassType
XIKeyClass :: DeviceClassType
XIButtonClass :: DeviceClassType
XIValuatorClass :: DeviceClassType

-- | Any device class
data GDeviceClass
GDeviceClass :: DeviceClassType -> Int -> DeviceClass -> GDeviceClass
dcType :: GDeviceClass -> DeviceClassType
dcSourceId :: GDeviceClass -> Int
dcSpecific :: GDeviceClass -> DeviceClass
type GDeviceClassPtr = Ptr (GDeviceClass)
type Mask = [CUChar]
data ButtonState
ButtonState :: [Int] -> ButtonState
bsMask :: ButtonState -> [Int]
type ButtonStatePtr = Ptr (ButtonState)
data ModifierState
ModifierState :: Int -> Int -> Int -> Int -> ModifierState
msBase :: ModifierState -> Int
msLatched :: ModifierState -> Int
msLocked :: ModifierState -> Int
msEffective :: ModifierState -> Int
type ModifierStatePtr = Ptr (ModifierState)
type GroupState = ModifierState
type ValuatorState = Map Int Double
type ValuatorStatePtr = Ptr (ValuatorState)

-- | Device class specific info
data DeviceClass
ButtonClass :: Int -> [Atom] -> ButtonState -> DeviceClass
dcNumButtons :: DeviceClass -> Int
dcLabels :: DeviceClass -> [Atom]
dcState :: DeviceClass -> ButtonState
KeyClass :: Int -> [Int] -> DeviceClass
dcNumKeycodes :: DeviceClass -> Int
dcKeycodes :: DeviceClass -> [Int]
ValuatorClass :: Int -> Atom -> Double -> Double -> Double -> Int -> Int -> DeviceClass
dcNumber :: DeviceClass -> Int
dcLabel :: DeviceClass -> Atom
dcMin :: DeviceClass -> Double
dcMax :: DeviceClass -> Double
dcValue :: DeviceClass -> Double
dcResolution :: DeviceClass -> Int
dcMode :: DeviceClass -> Int
data SelectDevices
XIAllDevices :: SelectDevices
XIAllMasterDevices :: SelectDevices
OneDevice :: DeviceID -> SelectDevices
data GrabModifiers
GrabModifiers :: Int -> Int -> GrabModifiers
gModifiers :: GrabModifiers -> Int
gStatus :: GrabModifiers -> Int
xiAnyModifier :: GrabModifiers
keymask2grabModifiers :: KeyMask -> GrabModifiers
type GrabModifiersPtr = Ptr (GrabModifiers)
selectDevices :: SelectDevices -> CInt
ptr2display :: Ptr () -> Display
display2ptr :: Display -> Ptr ()
toBool :: (Eq a, Num a) => a -> Bool
fromBool :: Num a => Bool -> a

-- | XInput initialization result
data XInputInitResult

-- | Extension is not supported at all.
NoXInput :: XInputInitResult

-- | XInput 2.0 is not supported, but other version is.
VersionMismatch :: Int -> Int -> XInputInitResult

-- | XInput 2.0 is supported, return xi_opcode.
InitOK :: Opcode -> XInputInitResult
instance Eq EventType
instance Show EventType
instance Ord EventType
instance Enum EventType
instance Eq DeviceType
instance Show DeviceType
instance Ord DeviceType
instance Enum DeviceType
instance Eq EventMask
instance Show EventMask
instance Eq DeviceClassType
instance Show DeviceClassType
instance Ord DeviceClassType
instance Enum DeviceClassType
instance Eq ButtonState
instance Show ButtonState
instance Eq ModifierState
instance Show ModifierState
instance Eq PointerEvent
instance Show PointerEvent
instance Eq DeviceClass
instance Eq GDeviceClass
instance Eq DeviceInfo
instance Eq EventSpecific
instance Eq Event
instance Eq EventCookie
instance Eq SelectDevices
instance Show SelectDevices
instance Ord SelectDevices
instance Eq GrabModifiers
instance Show GrabModifiers
instance Eq XInputInitResult
instance Show XInputInitResult
instance Storable GrabModifiers
instance Show DeviceClass
instance Show GDeviceClass
instance Show DeviceInfo
instance Storable EventMask
instance Show EventSpecific
instance Show Event
instance Show EventCookie
instance Eq Event

module Graphics.X11.XInput.Devices
data Device
Device :: DeviceInfo -> [DeviceInfo] -> Device
masterDevice :: Device -> DeviceInfo
slaveDevices :: Device -> [DeviceInfo]
data DevicesMap
DevicesMap :: Map DeviceID Device -> Map DeviceID DeviceInfo -> Map String DeviceInfo -> DevicesMap
masterDevices :: DevicesMap -> Map DeviceID Device
allDevices :: DevicesMap -> Map DeviceID DeviceInfo
byName :: DevicesMap -> Map String DeviceInfo
buildDevicesMap :: [DeviceInfo] -> DevicesMap
showDevicesMap :: DevicesMap -> String
isMasterDevice :: DeviceID -> DevicesMap -> Bool
deviceById :: DeviceID -> DevicesMap -> Maybe DeviceInfo
masterDeviceById :: DeviceID -> DevicesMap -> Maybe Device
deviceByName :: String -> DevicesMap -> Maybe DeviceInfo
instance Eq Device
instance Show Device
instance Eq DevicesMap
instance Show DevicesMap


-- | Functions of this module perform parsing of XInput events structures.
module Graphics.X11.XInput.Parser
class Struct a where type family Pointer a
peekStruct :: Struct a => Pointer a -> IO a
peekClasses :: Int -> Ptr a -> IO [GDeviceClass]
checkByte :: CUChar -> [Int]
parseMask :: Mask -> [Int]
peekMask :: (Ptr a -> IO CInt) -> (Ptr a -> IO (Ptr CUChar)) -> Ptr a -> IO [Int]
packMask :: [Int] -> KeyMask
peekButtonClass :: GDeviceClassPtr -> IO DeviceClass
peekKeyClass :: GDeviceClassPtr -> IO DeviceClass
peekValuatorClass :: GDeviceClassPtr -> IO DeviceClass
get_event_type :: XEventPtr -> IO EventType
get_event_extension :: XEventPtr -> IO Opcode
getXGenericEventCookie :: XEventPtr -> IO EventCookie
peekEventSpecific :: EventType -> Ptr b -> IO EventSpecific
trace :: Show a => String -> IO a -> IO a
peekPointerEvent :: EventType -> Ptr b -> IO PointerEvent
peekRawEvent :: EventType -> Ptr b -> IO PointerEvent
instance Struct Event
instance Struct EventCookie
instance Struct Int
instance Struct ButtonState
instance Struct GDeviceClass
instance Struct DeviceInfo


-- | This module contains FFI imports and thin wrappers for them.
module Graphics.X11.XInput.Foreign
xinputVersion :: Display -> Ptr CInt -> Ptr CInt -> IO CInt

-- | Select XInput events.
setEventMask :: Display -> Window -> [EventType] -> IO ()

-- | Query list of devices
queryDevice :: Display -> SelectDevices -> IO [DeviceInfo]
grabDevice :: Display -> DeviceID -> Window -> Cursor -> GrabMode -> GrabMode -> Bool -> EventMask -> IO Status
ungrabDevice :: Display -> DeviceID -> IO Status
grabButton :: Display -> SelectDevices -> Button -> Window -> Cursor -> GrabMode -> GrabMode -> Bool -> [EventType] -> [GrabModifiers] -> IO [GrabModifiers]
ungrabButton :: Display -> SelectDevices -> Button -> Window -> [GrabModifiers] -> IO Status
grabKeycode :: Display -> SelectDevices -> KeyCode -> Window -> GrabMode -> GrabMode -> Bool -> [EventType] -> [GrabModifiers] -> IO [GrabModifiers]
ungrabKeycode :: Display -> SelectDevices -> KeyCode -> Window -> [GrabModifiers] -> IO Status
xiQueryDevice :: Display -> CInt -> Ptr CInt -> IO DeviceInfoPtr
xQueryExtension :: Display -> CString -> Ptr CInt -> Ptr CInt -> Ptr CInt -> IO CInt
getEventData :: Display -> EventCookiePtr -> IO (Bool)
freeEventData :: Display -> EventCookiePtr -> IO ()


-- | This module contains some higher-level functions, - wrapping XInput
--   calls. #
module Graphics.X11.XInput.Functions

-- | Initialize XInput 2.0 extension.
xinputInit :: Display -> IO XInputInitResult

-- | Returns Nothing if XInput 2.0 is supported, or Just (major, minor) if
--   another version is supported
xinputCheckVersion :: Display -> IO (Maybe (Int, Int))

-- | Handle usual X11 event or cookie event.
handleXCookie :: MonadIO m => Display -> Opcode -> XEventPtr -> (Event -> m a) -> (EventCookie -> m a) -> m a

-- | Shortcut to get button number or keycode from keyboard or mouse event.
--   Returns Nothing if this is not mouse or keyboard event.
eventButton :: Event -> Maybe Int

-- | Shortcut to get event window. Returns Nothing if this is not
--   pointer-related event
eventWindow :: Event -> Maybe Window

-- | Shortcut to get keymask from event
eventKeyMask :: Event -> Maybe KeyMask

-- | Shortcut to get pointer position from event
eventMousePos :: Event -> Maybe (Position, Position)

module Graphics.X11.XInput
