-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wrap the select(2) POSIX function
--   
--   While tinkering on a project, I frequently found myself having to make
--   FFI calls to <tt>select(2)</tt>. This package provides an interface to
--   that system call.
--   
--   Changed in version 0.4.0.1:
--   
--   <ul>
--   <li>Minor internal cleanups.</li>
--   <li>TODO moved to file.</li>
--   </ul>
--   
--   Changes in version 0.4:
--   
--   <ul>
--   <li>Introduce an interface to <tt>fd_set</tt>.</li>
--   <li>Add functions with various amounts of abstraction; in particular,
--   <a>select''</a> matches <a>select</a> in previous versions.</li>
--   <li>Retry <tt>select(2)</tt> in case of interruption by signals.</li>
--   <li>Remove dependence on the vector package.</li>
--   </ul>
--   
--   WARNINGS:
--   
--   <ul>
--   <li>Behavior with write and exception file descriptors is
--   under-tested. Feedback is welcome.</li>
--   <li>This package is far from complete, and should be tested throughly
--   before being relied upon.</li>
--   </ul>
--   
--   <i>NOTE</i>: I feel I'm occupying prime namespace realestate with a
--   package name like select. I'll happily let myself be chased away if
--   someone more qualified wants to use this package name. Let me know.
@package select
@version 0.4.0.1


-- | Interface to <tt>fd_set</tt>. See <tt>select(2)</tt>.
--   
--   The type <a>FdSet</a> is opaque, but is implemented internally as a
--   pointer to an <tt>fd_set</tt>. All operations on <a>FdSet</a>s must
--   adhere to the requirements of <tt>FD_CLR</tt>, <tt>FD_ISSET</tt>,
--   <tt>FD_SET</tt> and <tt>FD_ZERO</tt> (see <tt>select(2)</tt>). This
--   includes requiring <i>valid</i> file descriptors for all operations.
--   Most functions in this module are kept in the <a>IO</a> monad to make
--   it easier to guarantee validity of the file descriptors, but since
--   invalid ones seem to work fine in practice (at least on Linux), the
--   module <a>System.Posix.IO.Select.FdSet.Unsafe</a> provides a
--   non-<a>IO</a> interface.
--   
--   Functions that return an <a>FdSet</a>, such as <a>insert</a>, copy the
--   underlying <tt>fd_set</tt> in order to be referentially transparent.
--   
--   In the documentation that follows, a file descriptor is said to be
--   <i>in range</i> if it is non-negative and strictly smaller than the
--   system-defined <tt>FD_SETSIZE</tt>. Many functions silently ignore
--   file descriptors that are not in range.
module System.Posix.IO.Select.FdSet
data FdSet

-- | Create an <tt>FdSet</tt> from a list of file descriptors. File
--   descriptors not in range (see above) are silently ignored.
fromList :: [Fd] -> IO FdSet

-- | Insert a file descriptor.
insert :: Fd -> FdSet -> IO FdSet

-- | Insert multiple file descriptors. This is more efficient than multiple
--   <a>insert</a>s (only a single copy of the set is made).
insertList :: [Fd] -> FdSet -> IO FdSet

-- | An empty <tt>FdSet</tt>.
empty :: IO FdSet

-- | Test for membership. Recall that POSIX allows undefined behavior if
--   the file descriptor is not valid (it does, however, seem to work fine
--   on Linux).
elem :: Fd -> FdSet -> IO Bool

-- | Remove a file descriptor.
remove :: Fd -> FdSet -> IO FdSet

-- | Remove multiple file descriptors. This is more efficient than multiple
--   <a>remove</a>s (only a single copy of the set is made).
removeList :: [Fd] -> FdSet -> IO FdSet

-- | <tt><a>inList</a> fds fdset</tt> gives a list of all file descriptors
--   in <tt>fd</tt> that are in <tt>fdset</tt>.
inList :: [Fd] -> FdSet -> IO [Fd]

-- | Test if a file descriptor is in range (see introduction).
inRange :: Fd -> Bool

-- | This file descriptor is at least as large as the largest in the set.
--   If no file descriptors have ever been removed from the set, the value
--   is <i>the largest</i> in the set, but this assumption may not hold
--   after removals or other operations.
bound :: FdSet -> Fd

-- | Copy an <tt>FdSet</tt>.
duplicate :: FdSet -> IO FdSet


-- | Pure interface to <tt>fd_set</tt>.
--   
--   As far as I can tell, the data structure and functions in
--   <a>System.Posix.IO.Select.FdSet</a> are referentially transparent, and
--   it should be OK to escape the <a>IO</a> monad. However, POSIX requires
--   that all operations on <tt>fd_set</tt>s are done with <i>valid</i>
--   file descriptors. This can potentially be hard to ensure with lazy
--   evaluation in a pure setting, so for now this module bears the unsafe
--   label. On Linux, invalid file descriptors <i>seem</i> to be just fine.
--   
--   See <a>System.Posix.IO.Select.FdSet</a> for documentation in general.
--   All functions here essentially just add <a>unsafePerformIO</a>.
module System.Posix.IO.Select.FdSet.Unsafe
data FdSet
fromList :: [Fd] -> FdSet
insert :: Fd -> FdSet -> FdSet
insertList :: [Fd] -> FdSet -> FdSet
elem :: Fd -> FdSet -> Bool
remove :: Fd -> FdSet -> FdSet
removeList :: [Fd] -> FdSet -> FdSet
inList :: [Fd] -> FdSet -> [Fd]
empty :: FdSet

-- | This converts an <tt>FdSet</tt> to a list by testing every file
--   descriptor in range for membership, which tends to involve invalid
--   file descriptors, giving undefined behavior according to POSIX. Use
--   <a>inList</a> if possible.
unsafeToList :: FdSet -> [Fd]


-- | Various types.
module System.Posix.IO.Select.Types

-- | A timeout of <tt><a>Never</a></tt> tells <tt>select(2)</tt> to never
--   time out, while <tt><a>Time</a></tt> sets a finite timeout.
data Timeout
Never :: Timeout
Time :: CTimeval -> Timeout

-- | A <a>Storable</a> instance for <tt>struct timeval</tt> (see
--   <tt>select(2)</tt>). The first argument corresponds to
--   <tt>tv_sec</tt>, the second to <tt>tv_usec</tt>.
data CTimeval
CTimeval :: CLong -> CLong -> CTimeval

-- | <tt><a>finite</a> s us</tt> tells <tt>select</tt> to time out after
--   <tt>s</tt> seconds and <tt>us</tt> microseconds.
finite :: CLong -> CLong -> Timeout

-- | Abstraction for the return value of <tt>select</tt>.
--   <tt><a>Error</a></tt> means that <tt>select</tt> returned an error,
--   while <a>Timeout</a> means it timed out. <tt><a>Ready</a> n rfds wfds
--   efds</tt> specifies that it returned because the file descriptors in
--   <tt>rfds</tt>, <tt>wfds</tt> and <tt>efds</tt> are ready in their
--   respective ways (see <tt>select(2)</tt>), with <tt>n</tt> descriptors
--   in total.
data Result
Error :: Result
Timeout :: Result
Ready :: CInt -> FdSet -> FdSet -> FdSet -> Result

-- | The total number of ready file descriptors across all three sets.
numReady :: Result -> CInt

-- | The file descriptors ready for reading.
readyRead :: Result -> FdSet

-- | The file descriptors ready for writing.
readyWrite :: Result -> FdSet

-- | The file descriptors having exceptional conditions.
readyException :: Result -> FdSet
instance Storable CTimeval


-- | Interface to <tt>select(2)</tt>. The arguments to the functions
--   exposed here must fulfill the same requirements as the arguments for
--   <tt>select</tt> itself; see the man page.
--   
--   If the <tt>select</tt> call made by any of these functions is
--   interrupted (<tt>select</tt> returning <tt>-1</tt> and <tt>errno</tt>
--   being <tt>EINTR</tt>) before the given time has elapsed, the call will
--   be retried. If the specified amount of time has passed and
--   <tt>select</tt> is still being interrupted, the functions below will
--   make one last attempt with timeout zero. If that call too is
--   interrupted, behavior will be as if <tt>select</tt> returned an error.
module System.Posix.IO.Select

-- | The first <a>FdSet</a> is watched for readiness to read, the second
--   for readiness to write, and the third for exceptions. The
--   <a>Timeout</a> argument specifies when <tt>select</tt> should time out
--   (if at all).
select :: FdSet -> FdSet -> FdSet -> Timeout -> IO Result

-- | A simpler version of <a>select</a> that uses file descriptor lists
--   instead of <a>FdSet</a>s. <a>Nothing</a> is returned in case
--   <tt>select</tt> gives an error, otherwise <tt><a>Just</a> (rfds, wfds,
--   efds)</tt> is returned, where <tt>rfds</tt>, <tt>wfds</tt> and
--   <tt>efds</tt> are lists of ready file descriptors (they may be empty,
--   such as in the case of <tt>select</tt> timing out).
select' :: [Fd] -> [Fd] -> [Fd] -> Timeout -> IO (Maybe ([Fd], [Fd], [Fd]))

-- | This simpler version of <a>select</a> takes the same arguments as
--   <a>select'</a>, but only returns the return value of
--   <tt>select(2)</tt> itself (i.e. <tt>-1</tt> on error, otherwise the
--   number of ready file descriptors in total).
select'' :: [Fd] -> [Fd] -> [Fd] -> Timeout -> IO CInt
