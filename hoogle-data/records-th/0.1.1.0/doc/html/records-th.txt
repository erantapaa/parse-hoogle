-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Template Haskell declarations for the records package
--   
--   Records-TH generates a variety of declarations for use with the
--   records package, including datatypes, Name, FromJSON, ToJSON and
--   Default instances, and a default field type.
@package records-th
@version 0.1.1.0

module Data.Record.TH

-- | Specify what level of JSON generation you want
data JSONSpec
ALL :: JSONSpec
TO :: JSONSpec
FROM :: JSONSpec
NONE :: JSONSpec

-- | Generate field declarations for the given strings. For example: <tt>
--   $(fields [<a>A</a>, <a>B</a>]) </tt> generates the code <tt> data A =
--   A instance Name A where name = A </tt>
fields :: [(String, TypeQ, JSONSpec)] -> Q [Dec]

-- | A field representing its TypeOf
type Field a = a ::: TypeOf a

-- | A record using the Id type function as its sort
type Rec a = a (Id KindStar)

-- | The data carried by a particular field name
instance Show JSONSpec
instance Eq JSONSpec
instance (Eq (a style), Eq (App style f), Name n) => Eq ((:&) a (n ::: f) style)
instance Eq (X style)
instance (Default (a style), Default (App style f), Name n) => Default ((:&) a (n ::: f) style)
instance Default (X style)
instance (FromJSON (a (Id KindStar)), FromJSONField (b (Id KindStar))) => FromJSON ((:&) a b (Id KindStar))
instance FromJSON (X (Id KindStar))
instance (ToJSON (a (Id KindStar)), ToJSONField (b (Id KindStar))) => ToJSON ((:&) a b (Id KindStar))
instance ToJSON (X (Id KindStar))
