-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Hexadecimal ByteString literals, with placeholders that bind variables
--   
--   This library defines a quasiquoter for <tt>ByteString</tt>s. As an
--   expression, it provides hexadecimal <tt>ByteString</tt> literals. As a
--   pattern, the hexdump can contain named placeholders of fixed size,
--   which bind local variables when pattern matching.
@package hexquote
@version 0.1


-- | Provides a quasiquoter for hexadecimal ByteString literals, with
--   placeholders that bind variables.
module Data.Hex.Quote

-- | As an expression, the <tt><a>hex</a></tt> quasiquoter provides
--   hexadecimal <tt><a>ByteString</a></tt> literals:
--   
--   <pre>
--   import Data.Hex.Quote
--   import qualified Data.ByteString as B
--   
--   main = B.putStr [hex|
--       57 65 2c 20 61 6c 6f 6e 65 20 6f 6e 20 65 61 72
--       74 68 2c 20 63 61 6e 20 72 65 62 65 6c 20 61 67
--       61 69 6e 73 74 20 74 68 65 20 74 79 72 61 6e 6e
--       79 20 6f 66 20 74 68 65 20 73 65 6c 66 69 73 68
--       20 72 65 70 6c 69 63 61 74 6f 72 73 2e 0a |]
--   </pre>
--   
--   All characters other than <tt>0123456789abcdefABCDEF</tt> are ignored,
--   including whitespace. Comments start with "<tt>--</tt>" and continue
--   to end-of-line:
--   
--   <pre>
--   code = [hex|
--       7e3a          -- jle  0x3c
--       4889f5        -- mov  rbp, rsi
--       bb01000000    -- mov  ebx, 0x1
--       488b7d08 |]   -- mov  rdi, [rbp+0x8]
--   </pre>
--   
--   When using <tt><a>hex</a></tt> as a pattern, you can include
--   placeholders of the form <tt>&lt;name:size&gt;</tt>, where
--   
--   <ul>
--   <li><tt>name</tt> is a Haskell identifier, or the wildcard pattern
--   "<tt>_</tt>"</li>
--   <li><tt>size</tt> is the size of the field in bytes, or the word
--   <tt>rest</tt> to consume the rest of the
--   <tt><a>ByteString</a></tt>.</li>
--   </ul>
--   
--   The named placeholders bind local variables of type
--   <tt><a>ByteString</a></tt>. Here's an example of pattern-matching an
--   IPv4-over-Ethernet-II frame:
--   
--   <pre>
--   import Data.Hex.Quote
--   
--   describe [hex|
--       &lt;src_mac:6&gt; &lt;dst_mac:6&gt; 08 00  -- ethernet header
--       45 &lt;_:1&gt; &lt;len:2&gt;               -- start of IP header
--       &lt;_:rest&gt;                       -- discard remaining frame
--     |] = (src_mac, dst_mac, len)
--   
--   describe _ = error "unknown frame"
--   </pre>
--   
--   Quasiquotes require the <tt>QuasiQuotes</tt> extension. In pattern
--   context, <tt><a>hex</a></tt> also requires the <tt>ViewPatterns</tt>
--   extension.
hex :: QuasiQuoter

-- | The hexadecimal parser used for <tt><a>hex</a></tt> expressions.
parseHex :: String -> [Word8]
instance Show Tok
