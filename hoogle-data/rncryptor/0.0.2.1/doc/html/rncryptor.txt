-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell implementation of the RNCryptor file format
--   
--   Pure Haskell implementation of the RNCrytor spec.
@package rncryptor
@version 0.0.2.1

module Crypto.RNCryptor.Types
data RNCryptorHeader
RNCryptorHeader :: !Word8 -> !Word8 -> !ByteString -> !ByteString -> !ByteString -> (ByteString -> ByteString) -> RNCryptorHeader

-- | Data format version. Currently 3.
rncVersion :: RNCryptorHeader -> !Word8

-- | bit 0 - uses password
rncOptions :: RNCryptorHeader -> !Word8

-- | iff option includes "uses password"
rncEncryptionSalt :: RNCryptorHeader -> !ByteString

-- | iff options includes "uses password"
rncHMACSalt :: RNCryptorHeader -> !ByteString

-- | The initialisation vector The ciphertext is variable and encrypted in
--   CBC mode
rncIV :: RNCryptorHeader -> !ByteString

-- | The HMAC (32 bytes). This field is a continuation as the HMAC is at
--   the end of the file.
rncHMAC :: RNCryptorHeader -> (ByteString -> ByteString)
data RNCryptorContext
newtype UserInput
UI :: ByteString -> UserInput
unInput :: UserInput -> ByteString
newRNCryptorContext :: ByteString -> RNCryptorHeader -> RNCryptorContext

-- | Generates a new <a>RNCryptorHeader</a>, suitable for encryption.
newRNCryptorHeader :: ByteString -> IO RNCryptorHeader

-- | Concatenates this <a>RNCryptorHeader</a> into a raw sequence of bytes,
--   up to the IV. This means you need to append the ciphertext plus the
--   HMAC to finalise the encrypted file.
renderRNCryptorHeader :: RNCryptorHeader -> ByteString
blockSize :: Int
instance Show UserInput
instance Arbitrary UserInput
instance Arbitrary RNCryptorHeader
instance Show RNCryptorHeader

module Crypto.RNCryptor.V3.Decrypt

-- | Parse the input <a>ByteString</a> to extract the
--   <a>RNCryptorHeader</a>, as defined in the V3 spec. The incoming
--   <a>ByteString</a> is expected to have at least 34 bytes available. As
--   the HMAC can be found only at the very end of an encrypted file,
--   <a>RNCryptorHeader</a> provides by default a function to parse the
--   HMAC, callable at the right time during streaming/parsing.
parseHeader :: ByteString -> RNCryptorHeader

-- | Decrypt an encrypted message. Please be aware that this is a
--   user-friendly but dangerous function, in the sense that it will load
--   the *ENTIRE* input in memory. It's mostly suitable for small inputs
--   like passwords. For large inputs, where size exceeds the available
--   memory, please use <a>decryptStream</a>.
decrypt :: ByteString -> ByteString -> ByteString

-- | Decrypt a raw Bytestring block. The function returns the clear text
--   block plus a new <a>RNCryptorContext</a>, which is needed because the
--   IV needs to be set to the last 16 bytes of the previous cipher text.
--   (Thanks to Rob Napier for the insight).
decryptBlock :: RNCryptorContext -> ByteString -> (RNCryptorContext, ByteString)

-- | Efficiently decrypts an incoming stream of bytes.
decryptStream :: ByteString -> InputStream ByteString -> OutputStream ByteString -> IO ()

module Crypto.RNCryptor.Padding

-- | Computes the padding as per PKCS#7. The specification can be found
--   here: <a>http://tools.ietf.org/html/rfc5652#section-6.3</a>
pkcs7Padding :: Int -> Int -> ByteString

module Crypto.RNCryptor.V3.Encrypt

-- | Encrypt a message. Please be aware that this is a user-friendly but
--   dangerous function, in the sense that it will load the *ENTIRE* input
--   in memory. It's mostly suitable for small inputs like passwords. For
--   large inputs, where size exceeds the available memory, please use
--   <a>encryptStream</a>.
encrypt :: RNCryptorContext -> ByteString -> ByteString

-- | Encrypt a raw Bytestring block. The function returns the encrypt text
--   block plus a new <a>RNCryptorContext</a>, which is needed because the
--   IV needs to be set to the last 16 bytes of the previous cipher text.
--   (Thanks to Rob Napier for the insight).
encryptBlock :: RNCryptorContext -> ByteString -> (RNCryptorContext, ByteString)

-- | Efficiently encrypt an incoming stream of bytes.
encryptStream :: ByteString -> InputStream ByteString -> OutputStream ByteString -> IO ()

module Crypto.RNCryptor.V3
