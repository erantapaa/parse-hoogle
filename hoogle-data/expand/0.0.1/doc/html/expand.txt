-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Extensible Pandoc
--   
--   Extensible Pandoc
@package expand
@version 0.0.1

module Document.Decl
data Document
Document :: BlockL -> Document
blocks :: Document -> BlockL
type BlockL = [Block]
data Block
Header :: Int -> InlineL -> Block
level_header :: Block -> Int
inlines_header :: Block -> InlineL
Paragraph :: InlineL -> Block
inlines_par :: Block -> InlineL
type InlineL = [Inline]
data Inline
Plain :: String -> Inline
str_plainInl :: Inline -> String
Bold :: InlineL -> Inline
inlines_boldInl :: Inline -> InlineL
Italics :: InlineL -> Inline
inlines_italInl :: Inline -> InlineL
data P_Document
data Ch_blocks
data P_BlockL_Cons
data Ch_hd_BlockL_Cons
data Ch_tl_BlockL_Cons
data P_Paragraph
data Ch_inlines_par
data P_Header
data Ch_level_header
data Ch_inlines_header
data P_InlineL_Cons
data Ch_hd_InlineL_Cons
data Ch_tl_InlineL_Cons
data P_Italics
data Ch_inlines_italInl
data P_Bold
data Ch_inlines_boldInl
data P_Plain
data Ch_str_plainInl
data P_InlineL_Nil
data P_BlockL_Nil
p_BlockL_Nil :: Proxy P_BlockL_Nil
p_InlineL_Nil :: Proxy P_InlineL_Nil
ch_str_plainInl :: Proxy ((,) Ch_str_plainInl String)
p_Plain :: Proxy P_Plain
ch_inlines_boldInl :: Proxy ((,) Ch_inlines_boldInl InlineL)
p_Bold :: Proxy P_Bold
ch_inlines_italInl :: Proxy ((,) Ch_inlines_italInl InlineL)
p_Italics :: Proxy P_Italics
nt_Inline :: Proxy Inline
ch_tl_InlineL_Cons :: Proxy ((,) Ch_tl_InlineL_Cons InlineL)
ch_hd_InlineL_Cons :: Proxy ((,) Ch_hd_InlineL_Cons Inline)
p_InlineL_Cons :: Proxy P_InlineL_Cons
nt_InlineL :: Proxy InlineL
ch_inlines_header :: Proxy ((,) Ch_inlines_header InlineL)
ch_level_header :: Proxy ((,) Ch_level_header Int)
p_Header :: Proxy P_Header
ch_inlines_par :: Proxy ((,) Ch_inlines_par InlineL)
p_Paragraph :: Proxy P_Paragraph
nt_Block :: Proxy Block
ch_tl_BlockL_Cons :: Proxy ((,) Ch_tl_BlockL_Cons BlockL)
ch_hd_BlockL_Cons :: Proxy ((,) Ch_hd_BlockL_Cons Block)
p_BlockL_Cons :: Proxy P_BlockL_Cons
nt_BlockL :: Proxy BlockL
ch_blocks :: Proxy ((,) Ch_blocks BlockL)
p_Document :: Proxy P_Document
nt_Document :: Proxy Document
semP_BlockL_Nil :: (HLeftUnion (Record HNil) ho fc', Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> ip -> sp
semP_InlineL_Nil :: (HLeftUnion (Record HNil) ho fc', Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> ip -> sp
semP_Plain :: (HLeftUnion (Record (HCons (LVPair (Proxy (Ch_str_plainInl, String)) v) HNil)) ho fc', Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> v -> ip -> sp
semP_Bold :: (HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) v) HNil)) ho fc', Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> v -> ip -> sp
semP_Italics :: (HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) v) HNil)) ho fc', Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> v -> ip -> sp
semP_InlineL_Cons :: (HEq (Proxy (Ch_hd_InlineL_Cons, Inline)) (Proxy (Ch_tl_InlineL_Cons, InlineL)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) v) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) v1) HNil))) ho fc', HRLabelSet' (Proxy (Ch_hd_InlineL_Cons, Inline)) v (Proxy (Ch_tl_InlineL_Cons, InlineL)) v1 leq HNil, Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> v -> v1 -> ip -> sp
sem_InlineL :: (HEq (Proxy (Ch_hd_InlineL_Cons, Inline)) (Proxy (Ch_tl_InlineL_Cons, InlineL)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip1 -> sp1)) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip -> sp)) HNil))) ho fc', HLeftUnion (Record HNil) ho1 fc'1, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) (ip -> sp)) HNil)) ho2 fc'2, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) (ip -> sp)) HNil)) ho3 fc'3, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_str_plainInl, String)) (Record HNil -> String)) HNil)) ho4 fc'4, HasField (Proxy P_InlineL_Cons) r (Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp), HasField (Proxy P_InlineL_Nil) r (Rule l1 ho1 sc1 ip (Record HNil) (Record HNil) ec1 (Record HNil) l1 ho1 ic1 sp), HasField (Proxy P_Italics) r (Rule l2 ho2 sc2 ip1 (Record HNil) (Record HNil) ec2 (Record HNil) l2 ho2 ic2 sp1), HasField (Proxy P_Bold) r (Rule l3 ho3 sc3 ip1 (Record HNil) (Record HNil) ec3 (Record HNil) l3 ho3 ic3 sp1), HasField (Proxy P_Plain) r (Rule l4 ho4 sc4 ip1 (Record HNil) (Record HNil) ec4 (Record HNil) l4 ho4 ic4 sp1), HRLabelSet' (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip1 -> sp1) (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip -> sp) leq HNil, Kn fc' ic sc, Kn fc'1 ic1 sc1, Kn fc'2 ic2 sc2, Kn fc'3 ic3 sc3, Kn fc'4 ic4 sc4, Empties fc' ec, Empties fc'1 ec1, Empties fc'2 ec2, Empties fc'3 ec3, Empties fc'4 ec4) => r -> [Inline] -> ip -> sp
sem_Inline :: (HEq (Proxy (Ch_hd_InlineL_Cons, Inline)) (Proxy (Ch_tl_InlineL_Cons, InlineL)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip1 -> sp1)) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip -> sp)) HNil))) ho fc', HLeftUnion (Record HNil) ho1 fc'1, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) (ip -> sp)) HNil)) ho2 fc'2, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) (ip -> sp)) HNil)) ho3 fc'3, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_str_plainInl, String)) (Record HNil -> String)) HNil)) ho4 fc'4, HasField (Proxy P_InlineL_Cons) r (Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp), HasField (Proxy P_InlineL_Nil) r (Rule l1 ho1 sc1 ip (Record HNil) (Record HNil) ec1 (Record HNil) l1 ho1 ic1 sp), HasField (Proxy P_Italics) r (Rule l2 ho2 sc2 ip1 (Record HNil) (Record HNil) ec2 (Record HNil) l2 ho2 ic2 sp1), HasField (Proxy P_Bold) r (Rule l3 ho3 sc3 ip1 (Record HNil) (Record HNil) ec3 (Record HNil) l3 ho3 ic3 sp1), HasField (Proxy P_Plain) r (Rule l4 ho4 sc4 ip1 (Record HNil) (Record HNil) ec4 (Record HNil) l4 ho4 ic4 sp1), HRLabelSet' (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip1 -> sp1) (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip -> sp) leq HNil, Kn fc' ic sc, Kn fc'1 ic1 sc1, Kn fc'2 ic2 sc2, Kn fc'3 ic3 sc3, Kn fc'4 ic4 sc4, Empties fc' ec, Empties fc'1 ec1, Empties fc'2 ec2, Empties fc'3 ec3, Empties fc'4 ec4) => r -> Inline -> ip1 -> sp1
semP_Header :: (HEq (Proxy (Ch_level_header, Int)) (Proxy (Ch_inlines_header, InlineL)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_level_header, Int)) v) (HCons (LVPair (Proxy (Ch_inlines_header, InlineL)) v1) HNil))) ho fc', HRLabelSet' (Proxy (Ch_level_header, Int)) v (Proxy (Ch_inlines_header, InlineL)) v1 leq HNil, Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> v -> v1 -> ip -> sp
semP_Paragraph :: (HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_par, InlineL)) v) HNil)) ho fc', Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> v -> ip -> sp
sem_Block :: (HEq (Proxy (Ch_hd_InlineL_Cons, Inline)) (Proxy (Ch_tl_InlineL_Cons, InlineL)) leq1, HEq (Proxy (Ch_level_header, Int)) (Proxy (Ch_inlines_header, InlineL)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_par, InlineL)) (ip1 -> sp1)) HNil)) ho fc', HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip2 -> sp2)) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip1 -> sp1)) HNil))) ho1 fc'1, HLeftUnion (Record HNil) ho2 fc'2, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) (ip1 -> sp1)) HNil)) ho3 fc'3, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) (ip1 -> sp1)) HNil)) ho4 fc'4, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_str_plainInl, String)) (Record HNil -> String)) HNil)) ho5 fc'5, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_level_header, Int)) (Record HNil -> Int)) (HCons (LVPair (Proxy (Ch_inlines_header, InlineL)) (ip1 -> sp1)) HNil))) ho6 fc'6, HasField (Proxy P_Paragraph) r (Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp), HasField (Proxy P_InlineL_Cons) r (Rule l1 ho1 sc1 ip1 (Record HNil) (Record HNil) ec1 (Record HNil) l1 ho1 ic1 sp1), HasField (Proxy P_InlineL_Nil) r (Rule l2 ho2 sc2 ip1 (Record HNil) (Record HNil) ec2 (Record HNil) l2 ho2 ic2 sp1), HasField (Proxy P_Italics) r (Rule l3 ho3 sc3 ip2 (Record HNil) (Record HNil) ec3 (Record HNil) l3 ho3 ic3 sp2), HasField (Proxy P_Bold) r (Rule l4 ho4 sc4 ip2 (Record HNil) (Record HNil) ec4 (Record HNil) l4 ho4 ic4 sp2), HasField (Proxy P_Plain) r (Rule l5 ho5 sc5 ip2 (Record HNil) (Record HNil) ec5 (Record HNil) l5 ho5 ic5 sp2), HasField (Proxy P_Header) r (Rule l6 ho6 sc6 ip (Record HNil) (Record HNil) ec6 (Record HNil) l6 ho6 ic6 sp), HRLabelSet' (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip2 -> sp2) (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip1 -> sp1) leq1 HNil, HRLabelSet' (Proxy (Ch_level_header, Int)) (Record HNil -> Int) (Proxy (Ch_inlines_header, InlineL)) (ip1 -> sp1) leq HNil, Kn fc' ic sc, Kn fc'1 ic1 sc1, Kn fc'2 ic2 sc2, Kn fc'3 ic3 sc3, Kn fc'4 ic4 sc4, Kn fc'5 ic5 sc5, Kn fc'6 ic6 sc6, Empties fc' ec, Empties fc'1 ec1, Empties fc'2 ec2, Empties fc'3 ec3, Empties fc'4 ec4, Empties fc'5 ec5, Empties fc'6 ec6) => r -> Block -> ip -> sp
semP_BlockL_Cons :: (HEq (Proxy (Ch_hd_BlockL_Cons, Block)) (Proxy (Ch_tl_BlockL_Cons, BlockL)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_BlockL_Cons, Block)) v) (HCons (LVPair (Proxy (Ch_tl_BlockL_Cons, BlockL)) v1) HNil))) ho fc', HRLabelSet' (Proxy (Ch_hd_BlockL_Cons, Block)) v (Proxy (Ch_tl_BlockL_Cons, BlockL)) v1 leq HNil, Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> v -> v1 -> ip -> sp
sem_BlockL :: (HEq (Proxy (Ch_hd_InlineL_Cons, Inline)) (Proxy (Ch_tl_InlineL_Cons, InlineL)) leq2, HEq (Proxy (Ch_level_header, Int)) (Proxy (Ch_inlines_header, InlineL)) leq1, HEq (Proxy (Ch_hd_BlockL_Cons, Block)) (Proxy (Ch_tl_BlockL_Cons, BlockL)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_par, InlineL)) (ip2 -> sp2)) HNil)) ho1 fc'1, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip3 -> sp3)) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip2 -> sp2)) HNil))) ho2 fc'2, HLeftUnion (Record HNil) ho3 fc'3, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) (ip2 -> sp2)) HNil)) ho4 fc'4, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) (ip2 -> sp2)) HNil)) ho5 fc'5, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_str_plainInl, String)) (Record HNil -> String)) HNil)) ho6 fc'6, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_level_header, Int)) (Record HNil -> Int)) (HCons (LVPair (Proxy (Ch_inlines_header, InlineL)) (ip2 -> sp2)) HNil))) ho7 fc'7, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_BlockL_Cons, Block)) (ip1 -> sp1)) (HCons (LVPair (Proxy (Ch_tl_BlockL_Cons, BlockL)) (ip -> sp)) HNil))) ho fc', HLeftUnion (Record HNil) ho8 fc'8, HasField (Proxy P_BlockL_Cons) r (Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp), HasField (Proxy P_Paragraph) r (Rule l1 ho1 sc1 ip1 (Record HNil) (Record HNil) ec1 (Record HNil) l1 ho1 ic1 sp1), HasField (Proxy P_InlineL_Cons) r (Rule l2 ho2 sc2 ip2 (Record HNil) (Record HNil) ec2 (Record HNil) l2 ho2 ic2 sp2), HasField (Proxy P_InlineL_Nil) r (Rule l3 ho3 sc3 ip2 (Record HNil) (Record HNil) ec3 (Record HNil) l3 ho3 ic3 sp2), HasField (Proxy P_Italics) r (Rule l4 ho4 sc4 ip3 (Record HNil) (Record HNil) ec4 (Record HNil) l4 ho4 ic4 sp3), HasField (Proxy P_Bold) r (Rule l5 ho5 sc5 ip3 (Record HNil) (Record HNil) ec5 (Record HNil) l5 ho5 ic5 sp3), HasField (Proxy P_Plain) r (Rule l6 ho6 sc6 ip3 (Record HNil) (Record HNil) ec6 (Record HNil) l6 ho6 ic6 sp3), HasField (Proxy P_Header) r (Rule l7 ho7 sc7 ip1 (Record HNil) (Record HNil) ec7 (Record HNil) l7 ho7 ic7 sp1), HasField (Proxy P_BlockL_Nil) r (Rule l8 ho8 sc8 ip (Record HNil) (Record HNil) ec8 (Record HNil) l8 ho8 ic8 sp), HRLabelSet' (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip3 -> sp3) (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip2 -> sp2) leq2 HNil, HRLabelSet' (Proxy (Ch_level_header, Int)) (Record HNil -> Int) (Proxy (Ch_inlines_header, InlineL)) (ip2 -> sp2) leq1 HNil, HRLabelSet' (Proxy (Ch_hd_BlockL_Cons, Block)) (ip1 -> sp1) (Proxy (Ch_tl_BlockL_Cons, BlockL)) (ip -> sp) leq HNil, Kn fc' ic sc, Kn fc'1 ic1 sc1, Kn fc'2 ic2 sc2, Kn fc'3 ic3 sc3, Kn fc'4 ic4 sc4, Kn fc'5 ic5 sc5, Kn fc'6 ic6 sc6, Kn fc'7 ic7 sc7, Kn fc'8 ic8 sc8, Empties fc' ec, Empties fc'1 ec1, Empties fc'2 ec2, Empties fc'3 ec3, Empties fc'4 ec4, Empties fc'5 ec5, Empties fc'6 ec6, Empties fc'7 ec7, Empties fc'8 ec8) => r -> [Block] -> ip -> sp
semP_Document :: (HLeftUnion (Record (HCons (LVPair (Proxy (Ch_blocks, BlockL)) v) HNil)) ho fc', Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> v -> ip -> sp
sem_Document :: (HEq (Proxy (Ch_hd_InlineL_Cons, Inline)) (Proxy (Ch_tl_InlineL_Cons, InlineL)) leq2, HEq (Proxy (Ch_level_header, Int)) (Proxy (Ch_inlines_header, InlineL)) leq1, HEq (Proxy (Ch_hd_BlockL_Cons, Block)) (Proxy (Ch_tl_BlockL_Cons, BlockL)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_blocks, BlockL)) (ip1 -> sp1)) HNil)) ho fc', HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_par, InlineL)) (ip3 -> sp3)) HNil)) ho2 fc'2, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip4 -> sp4)) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip3 -> sp3)) HNil))) ho3 fc'3, HLeftUnion (Record HNil) ho4 fc'4, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) (ip3 -> sp3)) HNil)) ho5 fc'5, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) (ip3 -> sp3)) HNil)) ho6 fc'6, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_str_plainInl, String)) (Record HNil -> String)) HNil)) ho7 fc'7, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_level_header, Int)) (Record HNil -> Int)) (HCons (LVPair (Proxy (Ch_inlines_header, InlineL)) (ip3 -> sp3)) HNil))) ho8 fc'8, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_BlockL_Cons, Block)) (ip2 -> sp2)) (HCons (LVPair (Proxy (Ch_tl_BlockL_Cons, BlockL)) (ip1 -> sp1)) HNil))) ho1 fc'1, HLeftUnion (Record HNil) ho9 fc'9, HasField (Proxy P_Document) r (Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp), HasField (Proxy P_BlockL_Cons) r (Rule l1 ho1 sc1 ip1 (Record HNil) (Record HNil) ec1 (Record HNil) l1 ho1 ic1 sp1), HasField (Proxy P_Paragraph) r (Rule l2 ho2 sc2 ip2 (Record HNil) (Record HNil) ec2 (Record HNil) l2 ho2 ic2 sp2), HasField (Proxy P_InlineL_Cons) r (Rule l3 ho3 sc3 ip3 (Record HNil) (Record HNil) ec3 (Record HNil) l3 ho3 ic3 sp3), HasField (Proxy P_InlineL_Nil) r (Rule l4 ho4 sc4 ip3 (Record HNil) (Record HNil) ec4 (Record HNil) l4 ho4 ic4 sp3), HasField (Proxy P_Italics) r (Rule l5 ho5 sc5 ip4 (Record HNil) (Record HNil) ec5 (Record HNil) l5 ho5 ic5 sp4), HasField (Proxy P_Bold) r (Rule l6 ho6 sc6 ip4 (Record HNil) (Record HNil) ec6 (Record HNil) l6 ho6 ic6 sp4), HasField (Proxy P_Plain) r (Rule l7 ho7 sc7 ip4 (Record HNil) (Record HNil) ec7 (Record HNil) l7 ho7 ic7 sp4), HasField (Proxy P_Header) r (Rule l8 ho8 sc8 ip2 (Record HNil) (Record HNil) ec8 (Record HNil) l8 ho8 ic8 sp2), HasField (Proxy P_BlockL_Nil) r (Rule l9 ho9 sc9 ip1 (Record HNil) (Record HNil) ec9 (Record HNil) l9 ho9 ic9 sp1), HRLabelSet' (Proxy (Ch_hd_InlineL_Cons, Inline)) (ip4 -> sp4) (Proxy (Ch_tl_InlineL_Cons, InlineL)) (ip3 -> sp3) leq2 HNil, HRLabelSet' (Proxy (Ch_level_header, Int)) (Record HNil -> Int) (Proxy (Ch_inlines_header, InlineL)) (ip3 -> sp3) leq1 HNil, HRLabelSet' (Proxy (Ch_hd_BlockL_Cons, Block)) (ip2 -> sp2) (Proxy (Ch_tl_BlockL_Cons, BlockL)) (ip1 -> sp1) leq HNil, Kn fc' ic sc, Kn fc'1 ic1 sc1, Kn fc'2 ic2 sc2, Kn fc'3 ic3 sc3, Kn fc'4 ic4 sc4, Kn fc'5 ic5 sc5, Kn fc'6 ic6 sc6, Kn fc'7 ic7 sc7, Kn fc'8 ic8 sc8, Kn fc'9 ic9 sc9, Empties fc' ec, Empties fc'1 ec1, Empties fc'2 ec2, Empties fc'3 ec3, Empties fc'4 ec4, Empties fc'5 ec5, Empties fc'6 ec6, Empties fc'7 ec7, Empties fc'8 ec8, Empties fc'9 ec9) => r -> Document -> ip -> sp
data DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl
DocSF :: (_hd_BlockL_Cons -> _tl_BlockL_Cons -> _BlockL_Cons) -> _BlockL_Nil -> (_inlines_boldInl -> _Bold) -> (_blocks -> _Document) -> (_level_header -> _inlines_header -> _Header) -> (_hd_InlineL_Cons -> _tl_InlineL_Cons -> _InlineL_Cons) -> _InlineL_Nil -> (_inlines_italInl -> _Italics) -> (_inlines_par -> _Paragraph) -> (_str_plainInl -> _Plain) -> DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl
pBlockL_Cons :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _hd_BlockL_Cons -> _tl_BlockL_Cons -> _BlockL_Cons
pBlockL_Nil :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _BlockL_Nil
pBold :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _inlines_boldInl -> _Bold
pDocument :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _blocks -> _Document
pHeader :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _level_header -> _inlines_header -> _Header
pInlineL_Cons :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _hd_InlineL_Cons -> _tl_InlineL_Cons -> _InlineL_Cons
pInlineL_Nil :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _InlineL_Nil
pItalics :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _inlines_italInl -> _Italics
pParagraph :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _inlines_par -> _Paragraph
pPlain :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl _Document _blocks _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> _str_plainInl -> _Plain
mkDoc :: (HEq (Proxy (Ch_hd_BlockL_Cons, Block)) (Proxy (Ch_tl_BlockL_Cons, BlockL)) leq, HEq (Proxy (Ch_level_header, Int)) (Proxy (Ch_inlines_header, InlineL)) leq1, HEq (Proxy (Ch_hd_InlineL_Cons, Inline)) (Proxy (Ch_tl_InlineL_Cons, InlineL)) leq2, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_BlockL_Cons, Block)) _hd_BlockL_Cons) (HCons (LVPair (Proxy (Ch_tl_BlockL_Cons, BlockL)) _tl_BlockL_Cons) HNil))) ho fc', HLeftUnion (Record HNil) ho1 fc'1, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) _inlines_boldInl) HNil)) ho2 fc'2, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_blocks, BlockL)) _blocks) HNil)) ho3 fc'3, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_level_header, Int)) _level_header) (HCons (LVPair (Proxy (Ch_inlines_header, InlineL)) _inlines_header) HNil))) ho4 fc'4, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) _hd_InlineL_Cons) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) _tl_InlineL_Cons) HNil))) ho5 fc'5, HLeftUnion (Record HNil) ho6 fc'6, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) _inlines_italInl) HNil)) ho7 fc'7, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_par, InlineL)) _inlines_par) HNil)) ho8 fc'8, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_str_plainInl, String)) _str_plainInl) HNil)) ho9 fc'9, HRLabelSet' (Proxy (Ch_hd_BlockL_Cons, Block)) _hd_BlockL_Cons (Proxy (Ch_tl_BlockL_Cons, BlockL)) _tl_BlockL_Cons leq HNil, HRLabelSet' (Proxy (Ch_level_header, Int)) _level_header (Proxy (Ch_inlines_header, InlineL)) _inlines_header leq1 HNil, HRLabelSet' (Proxy (Ch_hd_InlineL_Cons, Inline)) _hd_InlineL_Cons (Proxy (Ch_tl_InlineL_Cons, InlineL)) _tl_InlineL_Cons leq2 HNil, Kn fc' ic sc, Kn fc'1 ic1 sc1, Kn fc'2 ic2 sc2, Kn fc'3 ic3 sc3, Kn fc'4 ic4 sc4, Kn fc'5 ic5 sc5, Kn fc'6 ic6 sc6, Kn fc'7 ic7 sc7, Kn fc'8 ic8 sc8, Kn fc'9 ic9 sc9, Empties fc' ec, Empties fc'1 ec1, Empties fc'2 ec2, Empties fc'3 ec3, Empties fc'4 ec4, Empties fc'5 ec5, Empties fc'6 ec6, Empties fc'7 ec7, Empties fc'8 ec8, Empties fc'9 ec9) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> Rule l1 ho1 sc1 ip1 (Record HNil) (Record HNil) ec1 (Record HNil) l1 ho1 ic1 sp1 -> Rule l2 ho2 sc2 ip2 (Record HNil) (Record HNil) ec2 (Record HNil) l2 ho2 ic2 sp2 -> Rule l3 ho3 sc3 ip3 (Record HNil) (Record HNil) ec3 (Record HNil) l3 ho3 ic3 sp3 -> Rule l4 ho4 sc4 ip4 (Record HNil) (Record HNil) ec4 (Record HNil) l4 ho4 ic4 sp4 -> Rule l5 ho5 sc5 ip5 (Record HNil) (Record HNil) ec5 (Record HNil) l5 ho5 ic5 sp5 -> Rule l6 ho6 sc6 ip6 (Record HNil) (Record HNil) ec6 (Record HNil) l6 ho6 ic6 sp6 -> Rule l7 ho7 sc7 ip7 (Record HNil) (Record HNil) ec7 (Record HNil) l7 ho7 ic7 sp7 -> Rule l8 ho8 sc8 ip8 (Record HNil) (Record HNil) ec8 (Record HNil) l8 ho8 ic8 sp8 -> Rule l9 ho9 sc9 ip9 (Record HNil) (Record HNil) ec9 (Record HNil) l9 ho9 ic9 sp9 -> DocSF (ip -> sp) _hd_BlockL_Cons _tl_BlockL_Cons (ip1 -> sp1) (ip2 -> sp2) _inlines_boldInl (ip3 -> sp3) _blocks (ip4 -> sp4) _level_header _inlines_header (ip5 -> sp5) _hd_InlineL_Cons _tl_InlineL_Cons (ip6 -> sp6) (ip7 -> sp7) _inlines_italInl (ip8 -> sp8) _inlines_par (ip9 -> sp9) _str_plainInl
semAst :: DocSF [_hd_BlockL_Cons] _hd_BlockL_Cons [_hd_BlockL_Cons] [a] Inline InlineL Document BlockL Block Int InlineL [_hd_InlineL_Cons] _hd_InlineL_Cons [_hd_InlineL_Cons] [a1] Inline InlineL Block InlineL Inline String
instance Show Inline
instance Show Block
instance Show Document

module HRef.Decl
data EXT_Inline
Href :: String -> String -> EXT_Inline
href_address :: EXT_Inline -> String
href_description :: EXT_Inline -> String
data P_Href
data Ch_href_address
data Ch_href_description
ch_href_description :: Proxy ((,) Ch_href_description String)
ch_href_address :: Proxy ((,) Ch_href_address String)
p_Href :: Proxy P_Href
semP_Href :: (HEq (Proxy (Ch_href_address, String)) (Proxy (Ch_href_description, String)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_href_address, String)) v) (HCons (LVPair (Proxy (Ch_href_description, String)) v1) HNil))) ho fc', HRLabelSet' (Proxy (Ch_href_address, String)) v (Proxy (Ch_href_description, String)) v1 leq HNil, Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> v -> v1 -> ip -> sp
data DocHrefSF _Href _href_address _href_description
DocHrefSF :: (_href_address -> _href_description -> _Href) -> DocHrefSF _Href _href_address _href_description
pHref :: DocHrefSF _Href _href_address _href_description -> _href_address -> _href_description -> _Href
mkDocHref :: (HEq (Proxy (Ch_href_address, String)) (Proxy (Ch_href_description, String)) leq, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_href_address, String)) _href_address) (HCons (LVPair (Proxy (Ch_href_description, String)) _href_description) HNil))) ho fc', HRLabelSet' (Proxy (Ch_href_address, String)) _href_address (Proxy (Ch_href_description, String)) _href_description leq HNil, Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> DocHrefSF (ip -> sp) _href_address _href_description
semAstHref :: DocHrefSF Inline _href_address String

module Document.Semantics.Html
data Att_html
html :: Proxy Att_html
document_html :: (HExtend (Att (Proxy Att_html) a) sp sp', HasField (Proxy (Ch_blocks, [Block])) chi r, HasField (Proxy Att_html) r a) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
blockLnil_html :: HExtend (Att (Proxy Att_html) [Char]) sp sp' => Rule lf hof sc ip l ho ic sp l ho ic sp'
blockLcons_html :: (HExtend (Att (Proxy Att_html) [a]) sp sp', HasField (Proxy (Ch_tl_BlockL_Cons, [Block])) chi r1, HasField (Proxy (Ch_hd_BlockL_Cons, Block)) chi r, HasField (Proxy Att_html) r [a], HasField (Proxy Att_html) r1 [a]) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
header_html :: (Show a, HExtend (Att (Proxy Att_html) [Char]) sp sp', HasField (Proxy (Ch_inlines_header, [Inline])) chi r, HasField (Proxy (Ch_level_header, Int)) chi a, HasField (Proxy Att_html) r [Char]) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
paragraph_html :: (HExtend (Att (Proxy Att_html) [Char]) sp sp', HasField (Proxy (Ch_inlines_par, [Inline])) chi r, HasField (Proxy Att_html) r [Char]) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
inlineLnil_html :: HExtend (Att (Proxy Att_html) [Char]) sp sp' => Rule lf hof sc ip l ho ic sp l ho ic sp'
inlineLcons_html :: (HExtend (Att (Proxy Att_html) [a]) sp sp', HasField (Proxy (Ch_tl_InlineL_Cons, [Inline])) chi r1, HasField (Proxy (Ch_hd_InlineL_Cons, Inline)) chi r, HasField (Proxy Att_html) r [a], HasField (Proxy Att_html) r1 [a]) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
plain_html :: (HExtend (Att (Proxy Att_html) a) sp sp', HasField (Proxy (Ch_str_plainInl, [Char])) chi a) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
bold_html :: (HExtend (Att (Proxy Att_html) [Char]) sp sp', HasField (Proxy (Ch_inlines_boldInl, [Inline])) chi r, HasField (Proxy Att_html) r [Char]) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
italics_html :: (HExtend (Att (Proxy Att_html) [Char]) sp sp', HasField (Proxy (Ch_inlines_italInl, [Inline])) chi r, HasField (Proxy Att_html) r [Char]) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
semHtml :: (Show _level_header, HasField (Proxy (Ch_tl_BlockL_Cons, [Block])) sc r1, HasField (Proxy (Ch_hd_BlockL_Cons, Block)) sc r, HasField (Proxy Att_html) r [a], HasField (Proxy Att_html) r1 [a], HasField (Proxy (Ch_inlines_boldInl, [Inline])) sc1 r2, HasField (Proxy Att_html) r2 [Char], HasField (Proxy (Ch_blocks, [Block])) sc2 r3, HasField (Proxy Att_html) r3 a1, HasField (Proxy (Ch_inlines_header, [Inline])) scr r4, HasField (Proxy Att_html) r4 [Char], HasField (Proxy (Ch_tl_InlineL_Cons, [Inline])) sc3 r6, HasField (Proxy (Ch_hd_InlineL_Cons, Inline)) sc3 r5, HasField (Proxy Att_html) r5 [a2], HasField (Proxy Att_html) r6 [a2], HasField (Proxy (Ch_inlines_italInl, [Inline])) sc4 r7, HasField (Proxy Att_html) r7 [Char], HasField (Proxy (Ch_inlines_par, [Inline])) sc5 r8, HasField (Proxy Att_html) r8 [Char], Kn (HCons (LVPair (Proxy (Ch_hd_BlockL_Cons, Block)) _hd_BlockL_Cons) (HCons (LVPair (Proxy (Ch_tl_BlockL_Cons, BlockL)) _tl_BlockL_Cons) HNil)) (HCons (Chi (Proxy (Ch_hd_BlockL_Cons, Block)) (Record HNil)) (HCons (Chi (Proxy (Ch_tl_BlockL_Cons, BlockL)) (Record HNil)) HNil)) sc, Kn (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) _inlines_boldInl) HNil) (HCons (Chi (Proxy (Ch_inlines_boldInl, InlineL)) (Record HNil)) HNil) sc1, Kn (HCons (LVPair (Proxy (Ch_blocks, BlockL)) _blocks) HNil) (HCons (Chi (Proxy (Ch_blocks, BlockL)) (Record HNil)) HNil) sc2, Kn (HCons (LVPair (Proxy (Ch_inlines_header, InlineL)) _inlines_header) HNil) (HCons (Chi (Proxy (Ch_inlines_header, InlineL)) (Record HNil)) HNil) scr, Kn (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) _hd_InlineL_Cons) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) _tl_InlineL_Cons) HNil)) (HCons (Chi (Proxy (Ch_hd_InlineL_Cons, Inline)) (Record HNil)) (HCons (Chi (Proxy (Ch_tl_InlineL_Cons, InlineL)) (Record HNil)) HNil)) sc3, Kn (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) _inlines_italInl) HNil) (HCons (Chi (Proxy (Ch_inlines_italInl, InlineL)) (Record HNil)) HNil) sc4, Kn (HCons (LVPair (Proxy (Ch_inlines_par, InlineL)) _inlines_par) HNil) (HCons (Chi (Proxy (Ch_inlines_par, InlineL)) (Record HNil)) HNil) sc5) => DocSF (ip -> Record (HCons (LVPair (Proxy Att_html) [a]) HNil)) _hd_BlockL_Cons _tl_BlockL_Cons (ip1 -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) (ip2 -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) _inlines_boldInl (ip3 -> Record (HCons (LVPair (Proxy Att_html) a1) HNil)) _blocks (ip4 -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) _level_header _inlines_header (ip5 -> Record (HCons (LVPair (Proxy Att_html) [a2]) HNil)) _hd_InlineL_Cons _tl_InlineL_Cons (ip6 -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) (ip7 -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) _inlines_italInl (ip8 -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) _inlines_par (ip9 -> Record (HCons (LVPair (Proxy Att_html) _str_plainInl) HNil)) _str_plainInl
mkDoc' :: (HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_BlockL_Cons, Block)) _hd_BlockL_Cons) (HCons (LVPair (Proxy (Ch_tl_BlockL_Cons, BlockL)) _tl_BlockL_Cons) HNil))) ho fc', HLeftUnion (Record HNil) ho1 fc'1, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) _inlines_boldInl) HNil)) ho2 fc'2, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_blocks, BlockL)) _blocks) HNil)) ho3 fc'3, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_level_header, Int)) (Record HNil -> _level_header)) (HCons (LVPair (Proxy (Ch_inlines_header, InlineL)) _inlines_header) HNil))) ho4 fc'4, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) _hd_InlineL_Cons) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) _tl_InlineL_Cons) HNil))) ho5 fc'5, HLeftUnion (Record HNil) ho6 fc'6, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) _inlines_italInl) HNil)) ho7 fc'7, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_inlines_par, InlineL)) _inlines_par) HNil)) ho8 fc'8, HLeftUnion (Record (HCons (LVPair (Proxy (Ch_str_plainInl, String)) (Record HNil -> _str_plainInl)) HNil)) ho9 fc'9, Kn fc' ic sc, Kn fc'1 ic1 sc1, Kn fc'2 ic2 sc2, Kn fc'3 ic3 sc3, Kn fc'4 ic4 sc4, Kn fc'5 ic5 sc5, Kn fc'6 ic6 sc6, Kn fc'7 ic7 sc7, Kn fc'8 ic8 sc8, Kn fc'9 ic9 sc9, Empties fc' ec, Empties fc'1 ec1, Empties fc'2 ec2, Empties fc'3 ec3, Empties fc'4 ec4, Empties fc'5 ec5, Empties fc'6 ec6, Empties fc'7 ec7, Empties fc'8 ec8, Empties fc'9 ec9) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> Rule l1 ho1 sc1 ip1 (Record HNil) (Record HNil) ec1 (Record HNil) l1 ho1 ic1 sp1 -> Rule l2 ho2 sc2 ip2 (Record HNil) (Record HNil) ec2 (Record HNil) l2 ho2 ic2 sp2 -> Rule l3 ho3 sc3 ip3 (Record HNil) (Record HNil) ec3 (Record HNil) l3 ho3 ic3 sp3 -> Rule l4 ho4 sc4 ip4 (Record HNil) (Record HNil) ec4 (Record HNil) l4 ho4 ic4 sp4 -> Rule l5 ho5 sc5 ip5 (Record HNil) (Record HNil) ec5 (Record HNil) l5 ho5 ic5 sp5 -> Rule l6 ho6 sc6 ip6 (Record HNil) (Record HNil) ec6 (Record HNil) l6 ho6 ic6 sp6 -> Rule l7 ho7 sc7 ip7 (Record HNil) (Record HNil) ec7 (Record HNil) l7 ho7 ic7 sp7 -> Rule l8 ho8 sc8 ip8 (Record HNil) (Record HNil) ec8 (Record HNil) l8 ho8 ic8 sp8 -> Rule l9 ho9 sc9 ip9 (Record HNil) (Record HNil) ec9 (Record HNil) l9 ho9 ic9 sp9 -> DocSF (ip -> sp) _hd_BlockL_Cons _tl_BlockL_Cons (ip1 -> sp1) (ip2 -> sp2) _inlines_boldInl (ip3 -> sp3) _blocks (ip4 -> sp4) _level_header _inlines_header (ip5 -> sp5) _hd_InlineL_Cons _tl_InlineL_Cons (ip6 -> sp6) (ip7 -> sp7) _inlines_italInl (ip8 -> sp8) _inlines_par (ip9 -> sp9) _str_plainInl

module HRef.Semantics.Html
href_html :: (HExtend (Att (Proxy Att_html) [Char]) sp sp', HasField (Proxy (Ch_href_description, [Char])) chi [Char], HasField (Proxy (Ch_href_address, [Char])) chi [Char]) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
aspHref :: (HExtend (Att (Proxy Att_html) [Char]) sp sp', HasField (Proxy (Ch_href_description, [Char])) chi [Char], HasField (Proxy (Ch_href_address, [Char])) chi [Char]) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
semHtmlHref :: (HasField (Proxy (Ch_href_description, [Char])) sc [Char], HasField (Proxy (Ch_href_address, [Char])) sc [Char], Kn (HCons (LVPair (Proxy (Ch_href_address, String)) _href_address) (HCons (LVPair (Proxy (Ch_href_description, String)) _href_description) HNil)) (HCons (Chi (Proxy (Ch_href_address, String)) (Record HNil)) (HCons (Chi (Proxy (Ch_href_description, String)) (Record HNil)) HNil)) sc) => DocHrefSF (ip -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) _href_address _href_description

module Document.Semantics.NumberedHeaders
data Att_cHeaderNum
data Att_headerNum
headerNum :: Proxy Att_headerNum
cHeaderNum :: Proxy Att_cHeaderNum

-- | Computes the header number from the level and its parent header
--   number.
updateHeaderNum :: Int -> [Int] -> [Int]

-- | Formats a header number, i.e. [3,1,4] becomes <a>3.1.4</a>
formatNH :: [Int] -> String
cHeaderNum_NTs :: HCons (Proxy BlockL) (HCons (Proxy Block) HNil)
default_cHeaderNum :: (HasField (Proxy Att_cHeaderNum) ip val, Chain' msp (Proxy Att_cHeaderNum) (HCons (Proxy BlockL) (HCons (Proxy Block) HNil)) val sc l ho ic sp ic' sp', HasLabel (Proxy Att_cHeaderNum) sp msp) => Rule lf hof sc ip l ho ic sp l ho ic' sp'
document_cHeaderNum :: (SingleDef mch HTrue (Proxy Att_cHeaderNum) (Chi (Proxy (Ch_blocks, [Block])) [Int]) ic' ic'1, HasLabel (Proxy (Ch_blocks, [Block])) ic' mch) => Rule lf hof sc ip l ho ic' sp l ho ic'1 sp
header_cHeaderNum :: (HExtend (Att (Proxy Att_cHeaderNum) a) sp sp', HasField (Proxy Att_headerNum) lf a) => Rule lf ho chi par l ho1 ic sp l ho1 ic sp'
header_headerNum :: (HExtend (Att (Proxy Att_headerNum) [Int]) l1 l', HasField (Proxy (Ch_level_header, Int)) chi Int, HasField (Proxy Att_cHeaderNum) par [Int]) => Rule l ho chi par l1 ho1 ic sp l' ho1 ic sp

module Document.Semantics.HtmlNumberedHeaders

-- | Redefines the html attribute for headers so that it will print the
--   associated number
header_html' :: (Show a, HFind (Proxy Att_html) ls n, HUpdateAtHNat n (Att (Proxy Att_html) [Char]) sp sp', HasField (Proxy (Ch_inlines_header, [Inline])) chi r, HasField (Proxy (Ch_level_header, Int)) chi a, HasField (Proxy Att_headerNum) l [Int], HasField (Proxy Att_html) r [Char], RecordLabels sp ls) => Rule l ho chi par l1 ho1 ic (Record sp) l1 ho1 ic (Record sp')
semHtml' :: (HasField (Proxy Att_cHeaderNum) ip val, HasField (Proxy (Ch_tl_BlockL_Cons, [Block])) sc r1, HasField (Proxy (Ch_hd_BlockL_Cons, Block)) sc r, HasField (Proxy Att_html) r [a], HasField (Proxy Att_html) r1 [a], HasField (Proxy Att_cHeaderNum) ip1 val1, HasField (Proxy (Ch_inlines_boldInl, [Inline])) sc1 r2, HasField (Proxy Att_html) r2 [Char], HasField (Proxy (Ch_blocks, [Block])) sc2 r3, HasField (Proxy Att_html) r3 a1, HasField (Proxy Att_cHeaderNum) ip4 [Int], HasField (Proxy (Ch_inlines_header, [Inline])) scr r4, HasField (Proxy Att_html) r4 [Char], HasField (Proxy (Ch_tl_InlineL_Cons, [Inline])) sc3 r6, HasField (Proxy (Ch_hd_InlineL_Cons, Inline)) sc3 r5, HasField (Proxy Att_html) r5 [a2], HasField (Proxy Att_html) r6 [a2], HasField (Proxy (Ch_inlines_italInl, [Inline])) sc4 r7, HasField (Proxy Att_html) r7 [Char], HasField (Proxy Att_cHeaderNum) ip8 val2, HasField (Proxy (Ch_inlines_par, [Inline])) sc5 r8, HasField (Proxy Att_html) r8 [Char], Kn (HCons (LVPair (Proxy (Ch_hd_BlockL_Cons, Block)) _hd_BlockL_Cons) (HCons (LVPair (Proxy (Ch_tl_BlockL_Cons, BlockL)) _tl_BlockL_Cons) HNil)) ic sc, Kn (HCons (LVPair (Proxy (Ch_inlines_par, InlineL)) _inlines_par) HNil) ic1 sc5, Kn (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) _inlines_boldInl) HNil) (HCons (Chi (Proxy (Ch_inlines_boldInl, InlineL)) (Record HNil)) HNil) sc1, Kn (HCons (LVPair (Proxy (Ch_inlines_header, InlineL)) _inlines_header) HNil) (HCons (Chi (Proxy (Ch_inlines_header, InlineL)) (Record HNil)) HNil) scr, Kn (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) _hd_InlineL_Cons) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) _tl_InlineL_Cons) HNil)) (HCons (Chi (Proxy (Ch_hd_InlineL_Cons, Inline)) (Record HNil)) (HCons (Chi (Proxy (Ch_tl_InlineL_Cons, InlineL)) (Record HNil)) HNil)) sc3, Kn (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) _inlines_italInl) HNil) (HCons (Chi (Proxy (Ch_inlines_italInl, InlineL)) (Record HNil)) HNil) sc4, Kn (HCons (LVPair (Proxy (Ch_blocks, BlockL)) _blocks) HNil) (HCons (LVPair (Proxy (Ch_blocks, [Block])) (Record (HCons (LVPair (Proxy Att_cHeaderNum) [Int]) HNil))) HNil) sc2, ChnChi (Proxy Att_cHeaderNum) (HCons (Proxy BlockL) (HCons (Proxy Block) HNil)) val (Record sc) (Record (HCons (Chi (Proxy (Ch_hd_BlockL_Cons, Block)) (Record HNil)) (HCons (Chi (Proxy (Ch_tl_BlockL_Cons, BlockL)) (Record HNil)) HNil))) (Record ic), ChnChi (Proxy Att_cHeaderNum) (HCons (Proxy BlockL) (HCons (Proxy Block) HNil)) val2 (Record sc5) (Record (HCons (Chi (Proxy (Ch_inlines_par, InlineL)) (Record HNil)) HNil)) (Record ic1)) => DocSF (ip -> Record (HCons (LVPair (Proxy Att_cHeaderNum) val) (HCons (LVPair (Proxy Att_html) [a]) HNil))) _hd_BlockL_Cons _tl_BlockL_Cons (ip1 -> Record (HCons (LVPair (Proxy Att_cHeaderNum) val1) (HCons (LVPair (Proxy Att_html) [Char]) HNil))) (ip2 -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) _inlines_boldInl (ip3 -> Record (HCons (LVPair (Proxy Att_html) a1) HNil)) _blocks (ip4 -> Record (HCons (LVPair (Proxy Att_cHeaderNum) [Int]) (HCons (Att (Proxy Att_html) [Char]) HNil))) Int _inlines_header (ip5 -> Record (HCons (LVPair (Proxy Att_html) [a2]) HNil)) _hd_InlineL_Cons _tl_InlineL_Cons (ip6 -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) (ip7 -> Record (HCons (LVPair (Proxy Att_html) [Char]) HNil)) _inlines_italInl (ip8 -> Record (HCons (LVPair (Proxy Att_cHeaderNum) val2) (HCons (LVPair (Proxy Att_html) [Char]) HNil))) _inlines_par (ip9 -> Record (HCons (LVPair (Proxy Att_html) _str_plainInl) HNil)) _str_plainInl

module Toc.Semantics.Toc
data Att_sToc
data Att_toc
data Att_sInlStr
sInlStr :: Proxy Att_sInlStr
toc :: Proxy Att_toc
sToc :: Proxy Att_sToc
sInlStr_NTs :: HCons (Proxy InlineL) (HCons (Proxy Inline) HNil)
default_sInlStr :: (HExtend (Att (Proxy Att_sInlStr) [Char]) sp sp', Use (Proxy Att_sInlStr) (HCons (Proxy InlineL) (HCons (Proxy Inline) HNil)) [Char] sc) => Rule lf hof sc ip l ho ic sp l ho ic sp'
plain_sInlStr :: (HExtend (Att (Proxy Att_sInlStr) a) sp sp', HasField (Proxy (Ch_str_plainInl, [Char])) chi a) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
bold_sInlStr :: (HExtend (Att (Proxy Att_sInlStr) a) sp sp', HasField (Proxy (Ch_inlines_boldInl, [Inline])) chi r, HasField (Proxy Att_sInlStr) r a) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
italics_sInlStr :: (HExtend (Att (Proxy Att_sInlStr) a) sp sp', HasField (Proxy (Ch_inlines_italInl, [Inline])) chi r, HasField (Proxy Att_sInlStr) r a) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
sToc_NTs :: HCons (Proxy Block) (HCons (Proxy BlockL) HNil)
default_sToc :: (HExtend (Att (Proxy Att_sToc) [a]) sp sp', Use (Proxy Att_sToc) (HCons (Proxy Block) (HCons (Proxy BlockL) HNil)) [a] sc) => Rule lf hof sc ip l ho ic sp l ho ic sp'
header_sToc :: (HExtend (Att (Proxy Att_sToc) [(t, t1)]) sp sp', HasField (Proxy (Ch_inlines_header, [Inline])) chi r, HasField (Proxy Att_headerNum) l t, HasField (Proxy Att_sInlStr) r t1) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'
toc_NTs :: HCons (Proxy Block) (HCons (Proxy BlockL) HNil)
document_toc :: (HasField (Proxy (Ch_blocks, [Block])) chi r, HasField (Proxy Att_sToc) r v, SingleDef mch HTrue (Proxy Att_toc) (Chi (Proxy (Ch_blocks, [Block])) v) ic' ic'1, HasLabel (Proxy (Ch_blocks, [Block])) ic' mch) => Rule l ho chi par l1 ho1 ic' sp l1 ho1 ic'1 sp
default_toc :: (HasField (Proxy Att_toc) ip vp, Copy (Proxy Att_toc) (HCons (Proxy Block) (HCons (Proxy BlockL) HNil)) vp ic ic') => Rule lf hof sc ip l ho ic sp l ho ic' sp

module Toc.Decl
data EXT_Block
Toc :: EXT_Block
data P_Toc
p_Toc :: Proxy P_Toc
semP_Toc :: (HLeftUnion (Record HNil) ho fc', Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> ip -> sp
data DocTocSF _Toc
DocTocSF :: _Toc -> DocTocSF _Toc
pToc :: DocTocSF _Toc -> _Toc
mkDocToc :: (HLeftUnion (Record HNil) ho fc', Kn fc' ic sc, Empties fc' ec) => Rule l ho sc ip (Record HNil) (Record HNil) ec (Record HNil) l ho ic sp -> DocTocSF (ip -> sp)

module Toc.Semantics.Html

-- | Rule that redefines the html attribute for headers such that the
--   associated header number is printed and its <a>id</a> value is set for
--   navigation.
header_html' :: (Show a, HExtend (Att (Proxy Att_html) [Char]) sp sp', HasField (Proxy (Ch_inlines_header, [Inline])) chi r, HasField (Proxy (Ch_level_header, Int)) chi a, HasField (Proxy Att_headerNum) l [Int], HasField (Proxy Att_html) r [Char]) => Rule l ho chi par l1 ho1 ic sp l1 ho1 ic sp'

-- | Rule that defines the html attribute for the table of contents
toc_html :: (HExtend (Att (Proxy Att_html) String) sp sp', HasField (Proxy Att_toc) ip [([Int], String)]) => Rule l ho chi ip l1 ho1 ic sp l1 ho1 ic sp'

-- | Formats the table of contents to html
formatToc :: [([Int], String)] -> String
semHtml'' :: (HasField (Proxy Att_toc) ip vp, HasField (Proxy (Ch_tl_BlockL_Cons, [Block])) sc r1, HasField (Proxy (Ch_hd_BlockL_Cons, Block)) sc r, HasField (Proxy Att_html) r [a], HasField (Proxy Att_html) r1 [a], HasField (Proxy Att_cHeaderNum) ip val, HasField (Proxy Att_toc) ip1 vp1, HasField (Proxy Att_cHeaderNum) ip1 val1, HasField (Proxy (Ch_inlines_boldInl, [Inline])) sc1 r2, HasField (Proxy Att_html) r2 [Char], HasField (Proxy Att_sInlStr) r2 a3, HasField (Proxy (Ch_blocks, [Block])) sc2 r3, HasField (Proxy Att_sToc) r3 v, HasField (Proxy Att_html) r3 a4, HasField (Proxy (Ch_inlines_header, [Inline])) scr r4, HasField (Proxy Att_html) r4 [Char], HasField (Proxy Att_cHeaderNum) ip4 [Int], HasField (Proxy Att_sInlStr) r4 t1, HasField (Proxy (Ch_tl_InlineL_Cons, [Inline])) sc3 r6, HasField (Proxy (Ch_hd_InlineL_Cons, Inline)) sc3 r5, HasField (Proxy Att_html) r5 [a5], HasField (Proxy Att_html) r6 [a5], HasField (Proxy (Ch_inlines_italInl, [Inline])) sc4 r7, HasField (Proxy Att_html) r7 [Char], HasField (Proxy Att_sInlStr) r7 a6, HasField (Proxy Att_toc) ip8 vp2, HasField (Proxy (Ch_inlines_par, [Inline])) sc5 r8, HasField (Proxy Att_html) r8 [Char], HasField (Proxy Att_cHeaderNum) ip8 val2, Kn (HCons (LVPair (Proxy (Ch_hd_BlockL_Cons, Block)) _hd_BlockL_Cons) (HCons (LVPair (Proxy (Ch_tl_BlockL_Cons, BlockL)) _tl_BlockL_Cons) HNil)) ic sc, Kn (HCons (LVPair (Proxy (Ch_inlines_par, InlineL)) _inlines_par) HNil) ic1 sc5, Kn (HCons (LVPair (Proxy (Ch_inlines_boldInl, InlineL)) _inlines_boldInl) HNil) (HCons (Chi (Proxy (Ch_inlines_boldInl, InlineL)) (Record HNil)) HNil) sc1, Kn (HCons (LVPair (Proxy (Ch_inlines_header, InlineL)) _inlines_header) HNil) (HCons (Chi (Proxy (Ch_inlines_header, InlineL)) (Record HNil)) HNil) scr, Kn (HCons (LVPair (Proxy (Ch_hd_InlineL_Cons, Inline)) _hd_InlineL_Cons) (HCons (LVPair (Proxy (Ch_tl_InlineL_Cons, InlineL)) _tl_InlineL_Cons) HNil)) (HCons (Chi (Proxy (Ch_hd_InlineL_Cons, Inline)) (Record HNil)) (HCons (Chi (Proxy (Ch_tl_InlineL_Cons, InlineL)) (Record HNil)) HNil)) sc3, Kn (HCons (LVPair (Proxy (Ch_inlines_italInl, InlineL)) _inlines_italInl) HNil) (HCons (Chi (Proxy (Ch_inlines_italInl, InlineL)) (Record HNil)) HNil) sc4, Kn (HCons (LVPair (Proxy (Ch_blocks, BlockL)) _blocks) HNil) (HCons (LVPair (Proxy (Ch_blocks, [Block])) (Record (HCons (LVPair (Proxy Att_toc) v) (HCons (LVPair (Proxy Att_cHeaderNum) [Int]) HNil)))) HNil) sc2, Copy (Proxy Att_toc) (HCons (Proxy Block) (HCons (Proxy BlockL) HNil)) vp ic' (Record ic), Copy (Proxy Att_toc) (HCons (Proxy Block) (HCons (Proxy BlockL) HNil)) vp2 ic'1 (Record ic1), Use (Proxy Att_sToc) (HCons (Proxy Block) (HCons (Proxy BlockL) HNil)) [a1] sc, Use (Proxy Att_sInlStr) (HCons (Proxy InlineL) (HCons (Proxy Inline) HNil)) [Char] sc3, Use (Proxy Att_sToc) (HCons (Proxy Block) (HCons (Proxy BlockL) HNil)) [a7] sc5, ChnChi (Proxy Att_cHeaderNum) (HCons (Proxy BlockL) (HCons (Proxy Block) HNil)) val (Record sc) (Record (HCons (Chi (Proxy (Ch_hd_BlockL_Cons, Block)) (Record HNil)) (HCons (Chi (Proxy (Ch_tl_BlockL_Cons, BlockL)) (Record HNil)) HNil))) ic', ChnChi (Proxy Att_cHeaderNum) (HCons (Proxy BlockL) (HCons (Proxy Block) HNil)) val2 (Record sc5) (Record (HCons (Chi (Proxy (Ch_inlines_par, InlineL)) (Record HNil)) HNil)) ic'1) => DocSF (ip -> Record (HCons (LVPair (Proxy Att_html) [a]) (HCons (LVPair (Proxy Att_cHeaderNum) val) (HCons (LVPair (Proxy Att_sToc) [a1]) HNil)))) _hd_BlockL_Cons _tl_BlockL_Cons (ip1 -> Record (HCons (LVPair (Proxy Att_html) [Char]) (HCons (LVPair (Proxy Att_cHeaderNum) val1) (HCons (LVPair (Proxy Att_sToc) [a2]) HNil)))) (ip2 -> Record (HCons (LVPair (Proxy Att_html) [Char]) (HCons (LVPair (Proxy Att_sInlStr) a3) HNil))) _inlines_boldInl (ip3 -> Record (HCons (LVPair (Proxy Att_html) a4) HNil)) _blocks (ip4 -> Record (HCons (LVPair (Proxy Att_html) [Char]) (HCons (LVPair (Proxy Att_cHeaderNum) [Int]) (HCons (LVPair (Proxy Att_sToc) [([Int], t1)]) HNil)))) Int _inlines_header (ip5 -> Record (HCons (LVPair (Proxy Att_html) [a5]) (HCons (LVPair (Proxy Att_sInlStr) [Char]) HNil))) _hd_InlineL_Cons _tl_InlineL_Cons (ip6 -> Record (HCons (LVPair (Proxy Att_html) [Char]) (HCons (LVPair (Proxy Att_sInlStr) [Char]) HNil))) (ip7 -> Record (HCons (LVPair (Proxy Att_html) [Char]) (HCons (LVPair (Proxy Att_sInlStr) a6) HNil))) _inlines_italInl (ip8 -> Record (HCons (LVPair (Proxy Att_html) [Char]) (HCons (LVPair (Proxy Att_cHeaderNum) val2) (HCons (LVPair (Proxy Att_sToc) [a7]) HNil)))) _inlines_par (ip9 -> Record (HCons (LVPair (Proxy Att_html) _str_plainInl) (HCons (LVPair (Proxy Att_sInlStr) _str_plainInl) HNil))) _str_plainInl
semHtmlToc :: (HasField (Proxy Att_toc) ip [([Int], String)], HasField (Proxy Att_cHeaderNum) ip val) => DocTocSF (ip -> Record (HCons (LVPair (Proxy Att_html) String) (HCons (LVPair (Proxy Att_cHeaderNum) val) (HCons (LVPair (Proxy Att_sToc) [a]) HNil))))

module Preprocessors
preprocessHtml :: String -> String

module Utils

-- | Recognizes one or more characters except from the given list
someExcept :: [Char] -> PreProductions TL env String

-- | Recognizes zero or more characters except from the given list
manyExcept :: [Char] -> PreProductions TL env String

-- | Recognizes one or more characters from the given list
someOf :: [Char] -> PreProductions TL env String

-- | Recognizes zero or more characters from the given list
manyOf :: [Char] -> PreProductions TL env String

-- | Recognizes alternating occurences of p1 and p2, starting with p1
alternate :: PreProductions l env a -> PreProductions l env a -> PreProductions l env [a]
result :: ParseResult a -> a
errors :: ParseResult t -> [Error LineCol]
parsePretty :: Show a => Parser a -> String -> IO a
shorten :: Show a => Int -> a -> [Char]
newtype PreProductionsTrafo l env a b
PPT :: (PreProductions l env a -> PreProductions l env b) -> PreProductionsTrafo l env a b
unppt :: PreProductionsTrafo l env a b -> PreProductions l env a -> PreProductions l env b
class Shortcuts l env a a' a'' b x | x -> l env a a' a'' b
(?) :: Shortcuts l env a a' a'' b x => x -> PreProductionsTrafo l env a b
(+) :: Shortcuts l env a a' a'' b x => x -> PreProductionsTrafo l env a' b
(*) :: Shortcuts l env a a' a'' b x => x -> PreProductionsTrafo l env a'' b
data Ign a
Ign :: a -> Ign a
ign :: a -> Ign a
class Error (e :: Symbol)
instance Error "Missing a closing Ii" => Idiomatic l env x (PreProductions l a env)
instance Idiomatic l env f g => Idiomatic l env f (Ign String -> g)
instance Idiomatic l env f g => Idiomatic l env f (Ign (Symbol a TNonT env) -> g)
instance Idiomatic l env f g => Idiomatic l env f (Ign (PreProductions l env a) -> g)
instance Shortcuts TL env (Maybe a -> b) ([a] -> b) ([a] -> b) b (Symbol a t env)
instance Shortcuts TL env a a a a [Char]
instance Idiomatic l env b g => Idiomatic l env a (PreProductionsTrafo l env a b -> g)

module Document.Grammars.Latex
data Cs_cs_document
data Cs_cs_blockL
data Cs_cs_block
data Cs_cs_paragraph
data Cs_cs_header
data Cs_cs_inline
data Cs_cs_inlineL
cs_inlineL :: Cs_cs_inlineL
cs_inline :: Cs_cs_inline
cs_header :: Cs_cs_header
cs_paragraph :: Cs_cs_paragraph
cs_block :: Cs_cs_block
cs_blockL :: Cs_cs_blockL
cs_document :: Cs_cs_document
gLatex :: Num _level_header => DocSF a f1 a a f2 a1 f a f1 _level_header a1 a1 f2 a1 a1 f2 a1 f1 a1 f2 String -> Trafo Unit (Productions TL) env () (Export f (NTCons Cs_cs_document f (NTCons Cs_cs_blockL a (NTCons Cs_cs_block f1 (NTCons Cs_cs_paragraph f1 (NTCons Cs_cs_header f1 (NTCons Cs_cs_inline f2 (NTCons Cs_cs_inlineL a1 NTNil))))))) env)
pText :: [Char] -> [Char] -> [Char]

module Document.Grammars.Html
data Cs_cs_document
data Cs_cs_blockL
data Cs_cs_paragraph
data Cs_cs_header
data Cs_cs_inline
data Cs_cs_inlineL
cs_inlineL :: Cs_cs_inlineL
cs_inline :: Cs_cs_inline
cs_header :: Cs_cs_header
cs_paragraph :: Cs_cs_paragraph
cs_blockL :: Cs_cs_blockL
cs_document :: Cs_cs_document
headerLvl :: (Show a, Idiomatic l env (a1 -> a1) (t1 -> [Char] -> t2 -> [Char] -> Ii -> t)) => (a -> t1) -> t2 -> a -> t

-- | The grammar for a simplified version of Html
gHtml :: (Enum _level_header, Num _level_header, Show _level_header) => DocSF a f1 a a f2 a1 f a f1 _level_header a1 a1 f2 a1 a1 f2 a1 f1 a1 f2 String -> Trafo Unit (Productions TL) env () (Export f (NTCons Cs_cs_document f (NTCons Cs_cs_blockL a (NTCons Cs_cs_paragraph f1 (NTCons Cs_cs_header f1 (NTCons Cs_cs_inline f2 (NTCons Cs_cs_inlineL a1 NTNil)))))) env)

module HRef.Grammars.Html
gHtmlHref :: (NTRecord (nts env), GetNTLabel Cs_cs_inline (nts env) (Symbol f TNonT env) (nts env)) => DocHrefSF f String String -> Trafo Unit (Productions TL) env (Export start nts env) (Export start nts env)

module Document.Grammars.Markdown
data Cs_cs_header
data Cs_cs_atxPrefix
data Cs_cs_atxTitle
cs_atxTitle :: Cs_cs_atxTitle
cs_atxPrefix :: Cs_cs_atxPrefix
cs_header :: Cs_cs_header
gMarkdown :: DocSF _BlockL_Cons _hd_BlockL_Cons _tl_BlockL_Cons _BlockL_Nil _Bold _inlines_boldInl f [[Char]] _Header _level_header _inlines_header _InlineL_Cons _hd_InlineL_Cons _tl_InlineL_Cons _InlineL_Nil _Italics _inlines_italInl _Paragraph _inlines_par _Plain _str_plainInl -> [Char] -> Trafo Unit (Productions TL) env () (Export [[Char]] (NTCons Cs_cs_header [Char] (NTCons Cs_cs_atxPrefix Int (NTCons Cs_cs_atxTitle [Char] NTNil))) env)
lineChars :: [Char]
semLine :: [DTerm b] -> [b]
semNewLine :: t -> ()
semHeaderAtx :: [DTerm String] -> String -> Block
semHeaderSetext :: String -> (DTerm String) -> Block

module Toc.Grammars.Latex
gLatexToc :: (NTRecord (nts env), GetNTLabel Cs_cs_block (nts env) (Symbol f TNonT env) (nts env), Idiomatic l env1 (a -> a) (_Toc -> [Char] -> Ii -> PreProductions TL env f)) => DocTocSF _Toc -> Trafo Unit (Productions TL) env (Export start nts env) (Export start nts env)

module Testing
ex :: IO ()

-- | Builds a converter tool from an extensible grammar fragment and a
--   label of the synthesized output.
buildConverter :: HasField l syn v => (forall env. ExtGram env (Record HNil -> syn) nts) -> l -> String -> v
latex2html :: String -> [Char]
latex2html' :: String -> [Char]
latex2html'' :: String -> [Char]
test :: String -> ParseResult [[Char]]
html2html :: [Char] -> [Char]
doc :: Document
