-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Evaluation strategies for port-graph rewriting systems
--   
--   Defines a mechanism to add evaluation strategies to graph rewriting
--   systems defined in terms of the graph-rewriting library. Currently
--   only leftmost-outermost reduction is implemented.
@package graph-rewriting-strategies
@version 0.2.3

module GraphRewriting.Strategies.Control
data Wrapper n
Wrapper :: Control -> n -> Wrapper n
control :: Wrapper n -> Control
wrapped :: Wrapper n -> n
data Control
Control :: [Node] -> Control
stack :: Control -> [Node]
NoControl :: Control

-- | Wraps the nodes of a graph, augmenting them with control information
wrapGraph :: Graph n -> Graph (Wrapper n)
instance [overlap ok] View v n => View v (Wrapper n)
instance [overlap ok] View Control (Wrapper n)

module GraphRewriting.Strategies.LeftmostOutermost

-- | Gives us the the <tt>left</tt> port for a given node
class LeftmostOutermost n
lmoPort :: LeftmostOutermost n => n -> Maybe Port
getLmoPort :: LeftmostOutermost n => Node -> Pattern n Port
moveControl :: (View [Port] n, View Control n, LeftmostOutermost n) => Rule n
leftmostOutermost :: (View Control n, View [Port] n) => Rule n -> Rule n
instance [overlap ok] LeftmostOutermost n => LeftmostOutermost (Wrapper n)
