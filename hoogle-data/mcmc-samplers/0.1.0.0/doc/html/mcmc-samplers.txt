-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library of combinators to build MCMC kernels, proposals, and targets
--   
--   A library of combinators to build MCMC kernels, proposals, and targets
@package mcmc-samplers
@version 0.1.0.0

module Distributions
type Rand = Gen (PrimState IO)
type Probability = Double
data Target a
T :: (Density a) -> Target a
makeTarget :: Density a -> Target a
density :: HasDensity d a => d a -> Density a
data Proposal a
P :: (Density a) -> (Sample a) -> Proposal a
makeProposal :: Density a -> Sample a -> Proposal a
sampleFrom :: Proposal a -> Sample a
fromProposal :: Proposal a -> Target a
uniform :: (Variate a, Real a) => [a] -> [a] -> Proposal [a]
diag :: [Double] -> [[Double]]
normal :: [Double] -> [[Double]] -> Proposal [Double]
categorical :: [a] -> [Probability] -> Proposal (a, Int)
targetMix :: HasDensity t a => [t a] -> [Probability] -> Target a
proposalMix :: [Proposal a] -> [Probability] -> Proposal a
first :: (a -> a') -> ((a, b) -> (a', b))
second :: (b -> b') -> ((a, b) -> (a, b'))
car :: (a -> a) -> ([a] -> [a])
cdr :: ([a] -> [a]) -> ([a] -> [a])
nth :: Int -> (a -> a) -> ([a] -> [a])
block :: Int -> Int -> ([a] -> [a]) -> ([a] -> [a])
swapWith :: a -> (b -> a)
updateNth :: Int -> ([a] -> Proposal [a]) -> ([a] -> Proposal [a])
updateBlock :: Int -> Int -> ([a] -> Proposal [a]) -> [a] -> Proposal [a]
instance [overlap ok] HasDensity Proposal a
instance [overlap ok] HasDensity Target a

module Actions
data Action x m a b
Action :: (Act x m a) -> (a -> m b) -> a -> Action x m a b
execute :: Monad m => Action x m a b -> x -> m (Action x m a b)
every :: Monad m => Int -> Action x m a b -> Action x m (a, Int) b
type Batch x = ([x], Int)
type BatchAct x m = Act x m (Batch x)
type BatchAction x m b = Action x m (Batch x) b
inBatches :: Monad m => (Batch x -> m b) -> Int -> BatchAct x m
pack :: (Batch x -> m b) -> BatchAct x m -> BatchAction x m b
type PrintF x s = [x] -> [s]
batchViz :: Show s => PrintF x s -> Int -> BatchAction x IO ()
batchPrint :: Show s => PrintF x s -> Int -> BatchAction x IO ()

module Kernels
type Step x = Rand -> x -> IO x
type Kernel x a = Target a -> (a -> Proposal a) -> Step x
walk :: Step x -> x -> Int -> Rand -> Action x IO a b -> IO b
metropolisHastings :: Kernel [a] [a]
vizMH :: PrintF [Double] Double
printMH :: PrintF [Double] [String]
type Temp = Double
type CoolingSchedule = Temp -> Temp
type StateSA a = (a, Temp, CoolingSchedule)
simulatedAnnealing :: Kernel (StateSA [a]) [a]
vizSA :: PrintF (StateSA [Double]) Double
printSA :: PrintF (StateSA [Double]) [String]
mixSteps :: [Step x] -> [Probability] -> Step x
cycleKernel :: Kernel x a -> Target a -> [a -> Proposal a] -> Step x
