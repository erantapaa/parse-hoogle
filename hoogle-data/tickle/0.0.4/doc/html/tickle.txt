-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A port of @Data.Binary@
--   
@package tickle
@version 0.0.4

module Data.Tickle.RunGetResult
data RunGetResult e a

-- | <pre>
--   &gt;&gt;&gt; runGetResult (+) (*2) (_RunGet # 12)
--   24
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGetResult (+) (*2) (_RunGetFail # (23, 12))
--   35
--   </pre>
runGetResult :: (Int64 -> e -> x) -> (a -> x) -> RunGetResult e a -> x

-- | <pre>
--   &gt;&gt;&gt; _RunGetFail # (10, "abc")
--   RunGetFail 10 "abc"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_RunGet # 8) ^? _RunGetFail
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_RunGetFail # (8, "abc")) ^? _RunGetFail
--   Just (8,"abc")
--   </pre>
_RunGetFail :: Prism' (RunGetResult e a) (Int64, e)

-- | <pre>
--   &gt;&gt;&gt; :t _RunGet # 8
--   _RunGet # 8 :: Num b =&gt; RunGetResult e b
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_RunGet # 8) ^? _RunGet
--   Just 8
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_RunGetFail # (8, "abc")) ^? _RunGet
--   Nothing
--   </pre>
_RunGet :: Prism' (RunGetResult e a) a

-- | <pre>
--   &gt;&gt;&gt; runGetResultEitherIso # Right 99
--   RunGet 99
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGetResultEitherIso # Left (12, "abc")
--   RunGetFail 12 "abc"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; from runGetResultEitherIso # _RunGet # 99
--   Right 99
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; from runGetResultEitherIso # _RunGetFail # (12, "abc")
--   Left (12,"abc")
--   </pre>
runGetResultEitherIso :: Iso (RunGetResult a b) (RunGetResult b d) (Either (Int64, a) b) (Either (Int64, b) d)

-- | <pre>
--   &gt;&gt;&gt; runGetResultValidationIso # _Success # 99
--   RunGet 99
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGetResultValidationIso # _Failure # (12, "abc")
--   RunGetFail 12 "abc"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; from runGetResultValidationIso # _RunGet # 99
--   Success 99
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; from runGetResultValidationIso # _RunGetFail # (12, "abc")
--   Failure (12,"abc")
--   </pre>
runGetResultValidationIso :: Iso (RunGetResult a b) (RunGetResult b d) (Validation (Int64, a) b) (Validation (Int64, b) d)

-- | <pre>
--   &gt;&gt;&gt; runGetResultValidation'Iso . from _Validation' # _Right # 99
--   RunGet 99
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGetResultValidation'Iso . from _Validation' # _Left # (12, "abc")
--   RunGetFail 12 "abc"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; from (runGetResultValidation'Iso . from _Validation') # _RunGet # 99 :: Validation (Int64, ()) Int
--   Success 99
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; from (runGetResultValidation'Iso . from _Validation') # _RunGetFail # (12, "abc") :: Validation (Int64, String) ()
--   Failure (12,"abc")
--   </pre>
runGetResultValidation'Iso :: Iso (RunGetResult a b) (RunGetResult b d) (Validation' (Int64, a) b) (Validation' (Int64, b) d)

-- | <pre>
--   &gt;&gt;&gt; runGetResultAccValidationIso # _Success # 99
--   RunGet 99
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGetResultAccValidationIso # _Failure # (12, "abc")
--   RunGetFail 12 "abc"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; from runGetResultAccValidationIso # _RunGet # 99
--   AccSuccess 99
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; from runGetResultAccValidationIso # _RunGetFail # (12, "abc")
--   AccFailure (12,"abc")
--   </pre>
runGetResultAccValidationIso :: Iso (RunGetResult a b) (RunGetResult b d) (AccValidation (Int64, a) b) (AccValidation (Int64, b) d)
instance [safe] (Eq e, Eq a) => Eq (RunGetResult e a)
instance [safe] (Ord e, Ord a) => Ord (RunGetResult e a)
instance [safe] (Show e, Show a) => Show (RunGetResult e a)
instance [safe] Semigroup (RunGetResult e a)
instance [safe] Extend (RunGetResult e)
instance [safe] Alt (RunGetResult e)
instance [safe] Monad (RunGetResult e)
instance [safe] Bind (RunGetResult e)
instance [safe] Applicative (RunGetResult e)
instance [safe] Apply (RunGetResult e)
instance [safe] Traversable (RunGetResult e)
instance [safe] Bitraversable RunGetResult
instance [safe] Foldable (RunGetResult e)
instance [safe] Bifoldable RunGetResult
instance [safe] Functor (RunGetResult e)
instance [safe] Bifunctor RunGetResult

module Data.Tickle.IsolateError
data IsolateError e

-- | <pre>
--   &gt;&gt;&gt; isolateError 7 (\_ -&gt; 8) (\_ _ -&gt; 9) (_NegativeSize # ())
--   7
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isolateError 7 (+10) (\_ _ -&gt; 9) (_IsolateXFail # 99)
--   109
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isolateError 7 (\_ -&gt; 8) (+) (_UnexpectedConsumed # (12, 14))
--   26
--   </pre>
isolateError :: a -> (e -> a) -> (Int -> Int -> a) -> IsolateError e -> a

-- | <pre>
--   &gt;&gt;&gt; _NegativeSize # ()
--   NegativeSize
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_NegativeSize # ()) ^? _NegativeSize
--   Just ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_IsolateXFail # 8) ^? _NegativeSize
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_UnexpectedConsumed # (12, 13)) ^? _NegativeSize
--   Nothing
--   </pre>
_NegativeSize :: Prism' (IsolateError e) ()

-- | <pre>
--   &gt;&gt;&gt; _IsolateXFail # 8
--   IsolateXFail 8
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_NegativeSize # ()) ^? _IsolateXFail
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_IsolateXFail # 8) ^? _IsolateXFail
--   Just 8
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_UnexpectedConsumed # (12, 13)) ^? _IsolateXFail
--   Nothing
--   </pre>
_IsolateXFail :: Prism' (IsolateError e) e

-- | <pre>
--   &gt;&gt;&gt; _UnexpectedConsumed # (12,13)
--   UnexpectedConsumed 12 13
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_NegativeSize # ()) ^? _UnexpectedConsumed
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_IsolateXFail # 8) ^? _UnexpectedConsumed
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_UnexpectedConsumed # (12, 13)) ^? _UnexpectedConsumed
--   Just (12,13)
--   </pre>
_UnexpectedConsumed :: Prism' (IsolateError e) (Int, Int)
instance [safe] Eq e => Eq (IsolateError e)
instance [safe] Ord e => Ord (IsolateError e)
instance [safe] Show e => Show (IsolateError e)
instance [safe] Extend IsolateError
instance [safe] Functor IsolateError

module Data.Tickle.Get
data Get e a

-- | <pre>
--   &gt;&gt;&gt; runGet (lazyByteString 5) (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (lazyByteString 5) (BLC.pack "abc")
--   RunGetFail 3 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (lazyByteString 5) (BLC.pack "abcdefg")
--   RunGet "abcde"
--   </pre>
lazyByteString :: Int64 -> Get () ByteString

-- | <pre>
--   &gt;&gt;&gt; runGet lazyByteStringNul (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet lazyByteStringNul (BLC.pack "abc")
--   RunGetFail 3 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet lazyByteStringNul (BLC.pack "abc\0")
--   RunGet "abc"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet lazyByteStringNul (BLC.pack "abc\0def")
--   RunGet "abc"
--   </pre>
lazyByteStringNul :: Get () ByteString

-- | <pre>
--   &gt;&gt;&gt; runGet remainingLazyByteString  (BLC.pack "")
--   RunGet ""
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet remainingLazyByteString  (BLC.pack "abc")
--   RunGet "abc"
--   </pre>
remainingLazyByteString :: Get e ByteString
ptr :: Storable a => Int -> Get () a

-- | <pre>
--   &gt;&gt;&gt; runGet word8 (BLC.pack "abc")
--   RunGet 97
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word8 (BLC.pack "123")
--   RunGet 49
--   </pre>
word8 :: Get () Word8

-- | <pre>
--   &gt;&gt;&gt; runGet word16be (BLC.pack "abc")
--   RunGet 24930
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word16be (BLC.pack "123")
--   RunGet 12594
--   </pre>
word16be :: Get () Word16

-- | <pre>
--   &gt;&gt;&gt; runGet word16le (BLC.pack "abc")
--   RunGet 25185
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word16le (BLC.pack "123")
--   RunGet 12849
--   </pre>
word16le :: Get () Word16

-- | <pre>
--   &gt;&gt;&gt; runGet word32be (BLC.pack "abcdef")
--   RunGet 1633837924
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word32be (BLC.pack "123456")
--   RunGet 825373492
--   </pre>
word32be :: Get () Word32

-- | <ul>
--   <li>- &gt;&gt;&gt; runGet word32le (BLC.pack "abcdef") RunGet
--   1684234849</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word32le (BLC.pack "123456")
--   RunGet 875770417
--   </pre>
word32le :: Get () Word32

-- | <pre>
--   &gt;&gt;&gt; runGet word64be (BLC.pack "abcdefghi")
--   RunGet 7017280452245743464
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word64be (BLC.pack "123456789")
--   RunGet 3544952156018063160
--   </pre>
word64be :: Get () Word64

-- | <pre>
--   &gt;&gt;&gt; runGet word64le (BLC.pack "abcdefghi")
--   RunGet 7523094288207667809
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word64le (BLC.pack "123456789")
--   RunGet 4050765991979987505
--   </pre>
word64le :: Get () Word64

-- | <pre>
--   &gt;&gt;&gt; runGet wordhost (BLC.pack "abcdefghi")
--   RunGet 7523094288207667809
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet wordhost (BLC.pack "123456789")
--   RunGet 4050765991979987505
--   </pre>
wordhost :: Get () Word

-- | <pre>
--   &gt;&gt;&gt; runGet word16host (BLC.pack "abcde")
--   RunGet 25185
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word16host (BLC.pack "12345")
--   RunGet 12849
--   </pre>
word16host :: Get () Word16

-- | <pre>
--   &gt;&gt;&gt; runGet word32host (BLC.pack "abcde")
--   RunGet 1684234849
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word32host (BLC.pack "12345")
--   RunGet 875770417
--   </pre>
word32host :: Get () Word32

-- | <pre>
--   &gt;&gt;&gt; runGet word64host (BLC.pack "abcdeghi")
--   RunGet 7595434456733934177
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet word64host (BLC.pack "123456789")
--   RunGet 4050765991979987505
--   </pre>
word64host :: Get () Word64

-- | A <tt>Get</tt> decoder that always fails with the given value.
--   
--   <pre>
--   runGet (failGet x :: Get Int ()) (BLC.pack s) == _RunGetFail # (0, x)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (failGet "abc" :: Get String ()) (BLC.pack "def")
--   RunGetFail 0 "abc"
--   </pre>
failGet :: e -> Get e a
constant :: (forall r. XDecoder e r) -> Get e a

-- | <pre>
--   &gt;&gt;&gt; runGet (bytesRead :: Get () Int64) (BLC.pack "")
--   RunGet 0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (bytesRead :: Get () Int64) (BLC.pack "abc")
--   RunGet 0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (word8 &gt;&gt; word16be &gt;&gt; word32le &gt;&gt; bytesRead) (BLC.pack "abcdefghijk")
--   RunGet 7
--   </pre>
bytesRead :: Get e Int64

-- | <pre>
--   &gt;&gt;&gt; runGet demandInput (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet demandInput (BLC.pack "a")
--   RunGet ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet demandInput (BLC.pack "abc")
--   RunGet ()
--   </pre>
demandInput :: Get () ()

-- | <pre>
--   &gt;&gt;&gt; runGet (word8 &gt;&gt;= \c -&gt; skip 2 &gt;&gt; word8 &gt;&gt;= \d -&gt; return (c,d)) (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (word8 &gt;&gt;= \c -&gt; skip 2 &gt;&gt; word8 &gt;&gt;= \d -&gt; return (c,d)) (BLC.pack "abcdefghi")
--   RunGet (97,100)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (word8 &gt;&gt;= \c -&gt; skip 2 &gt;&gt; word8 &gt;&gt;= \d -&gt; return (c,d)) (BLC.pack "abc")
--   RunGetFail 3 ()
--   </pre>
skip :: Int -> Get () ()

-- | <pre>
--   &gt;&gt;&gt; runGet isNotEmpty (BLC.pack "")
--   RunGet False
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet isNotEmpty (BLC.pack "abc")
--   RunGet True
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isNotEmpty &gt;&gt;= \p -&gt; word8 &gt;&gt;= \w -&gt; return (w, p)) (BLC.pack "abc")
--   RunGet (97,True)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isNotEmpty &gt;&gt;= \p -&gt; word8 &gt;&gt;= \w -&gt; return (w, p)) (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isNotEmpty &gt;&gt;= \p -&gt; word8 &gt;&gt;= \w -&gt; return (w, p)) (BLC.pack "a")
--   RunGet (97,True)
--   </pre>
isNotEmpty :: Get e Bool

-- | <pre>
--   &gt;&gt;&gt; runGet isEmpty (BLC.pack "")
--   RunGet True
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet isEmpty (BLC.pack "abc")
--   RunGet False
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isEmpty &gt;&gt;= \p -&gt; word8 &gt;&gt;= \w -&gt; return (w, p)) (BLC.pack "abc")
--   RunGet (97,False)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isEmpty &gt;&gt;= \p -&gt; word8 &gt;&gt;= \w -&gt; return (w, p)) (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isEmpty &gt;&gt;= \p -&gt; word8 &gt;&gt;= \w -&gt; return (w, p)) (BLC.pack "a")
--   RunGet (97,False)
--   </pre>
isEmpty :: Get e Bool

-- | <pre>
--   &gt;&gt;&gt; runGet (getByteString (-3)) (BLC.pack "")
--   RunGet ""
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (getByteString 3) (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (getByteString 3) (BLC.pack "abc")
--   RunGet "abc"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (getByteString 3) (BLC.pack "abcdef")
--   RunGet "abc"
--   </pre>
getByteString :: Int -> Get () ByteString
modify :: (ByteString -> ByteString) -> Get e ()

-- | <pre>
--   &gt;&gt;&gt; runGet (readN 3 id) (BLC.pack "abc")
--   RunGet "abc"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (readN 3 id) (BLC.pack "ab")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (readN 3 id) (BLC.pack "abcdef")
--   RunGet "abcdef"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (readN (-3) id) (BLC.pack "abcdef")
--   RunGet ""
--   </pre>
readN :: Int -> (ByteString -> a) -> Get () a

-- | <pre>
--   &gt;&gt;&gt; runGet (ensureN 3) (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (ensureN 3) (BLC.pack "abc")
--   RunGet ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (ensureN 3) (BLC.pack "abcdef")
--   RunGet ()
--   </pre>
ensureN :: Int -> Get () ()
toFloat :: (Storable w, Storable f) => w -> f
toFloat16 :: Word16 -> Float
float16be :: Get () Float
float16le :: Get () Float
float32be :: Get () Float
float32le :: Get () Float
float64be :: Get () Double
float64le :: Get () Double
int8 :: Get () Int8
int16be :: Get () Int16
int16le :: Get () Int16
int32be :: Get () Int32
int32le :: Get () Int32
int64be :: Get () Int64
int64le :: Get () Int64
data IntegerError
integerError :: a -> (Word8 -> a) -> a -> (ListError -> a) -> IntegerError -> a
_IntegerTagUnexpectedEof :: Prism' IntegerError ()
_Integer0TagUnexpectedEof :: Prism' IntegerError Word8
_Integer1TagUnexpectedEof :: Prism' IntegerError ()
_IntegerListError :: Prism' IntegerError ListError
integer :: Get IntegerError Integer
data ListError
listError :: a -> a -> ListError -> a
listErrorIso :: Iso' Bool ListError
list :: Get e a -> Get ListError [a]
many :: Get e a -> Int64 -> Get e [a]

-- | Run a <tt>Get</tt> decoder, but keep a track of the input that ran it
--   to completion.
--   
--   <pre>
--   &gt;&gt;&gt; runGet (runAndKeepTrack word8 :: Get () (CompletedXDecoder () Word8, [BC.ByteString])) (BLC.pack "")
--   RunGet (CompletedFail "" (),[])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (runAndKeepTrack word8 :: Get () (CompletedXDecoder () Word8, [BC.ByteString])) (BLC.pack "abc")
--   RunGet (CompletedDone "bc" 97,["abc"])
--   </pre>
runAndKeepTrack :: Get e a -> Get x (CompletedXDecoder e a, [ByteString])

-- | <pre>
--   &gt;&gt;&gt; runGet (pushBack [] :: Get () ()) (BLC.pack "")
--   RunGet ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (pushBack [] :: Get () ()) (BLC.pack "abc")
--   RunGet ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (pushBack [BC.pack "def"] :: Get () ()) (BLC.pack "")
--   RunGet ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (pushBack [BC.pack "def"] :: Get () ()) (BLC.pack "abc")
--   RunGet ()
--   </pre>
pushBack :: [ByteString] -> Get e ()

-- | <pre>
--   &gt;&gt;&gt; runGet (pushFront (BC.pack "def") :: Get () ()) (BLC.pack "")
--   RunGet ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (pushFront (BC.pack "def") :: Get () ()) (BLC.pack "abc")
--   RunGet ()
--   </pre>
pushFront :: ByteString -> Get e ()
xrunGetIncremental :: Get e a -> XDecoder e a
noMeansNo :: XDecoder e a -> XDecoder e a
prompt :: ByteString -> XDecoder e a -> (ByteString -> XDecoder e a) -> XDecoder e a

-- | <pre>
--   &gt;&gt;&gt; runGet (isolate 1 word8) (BLC.pack "ab")
--   RunGet 97
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isolate 1 word8) (BLC.pack "abcde")
--   RunGet 97
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isolate 2 word16le) (BLC.pack "abcde")
--   RunGet 25185
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isolate 1 word16le) (BLC.pack "abcde")
--   RunGetFail 0 (IsolateXFail ())
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isolate (-3) word16le) (BLC.pack "abcde")
--   RunGetFail 0 NegativeSize
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (isolate 3 word16le) (BLC.pack "abcde")
--   RunGetFail 2 (UnexpectedConsumed 2 3)
--   </pre>
isolate :: Int -> Get e a -> Get (IsolateError e) a

-- | <pre>
--   &gt;&gt;&gt; runGet (lookAhead word8) (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (lookAhead word8) (BLC.pack "abc")
--   RunGet 97
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (lookAhead word8) (BLC.pack "a")
--   RunGet 97
--   </pre>
lookAhead :: Get e a -> Get e a

-- | <pre>
--   &gt;&gt;&gt; runGet (lookAheadM (word8 &gt;&gt;= \w -&gt; return (if even w then Just (w + 5) else Nothing))) (BLC.pack "abc")
--   RunGet Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (lookAheadM (word8 &gt;&gt;= \w -&gt; return (if even w then Just (w + 5) else Nothing))) (BLC.pack "bc")
--   RunGet (Just 103)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (lookAheadM (word8 &gt;&gt;= \w -&gt; return (if even w then Just (w + 5) else Nothing))) (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
lookAheadM :: Get e (Maybe a) -> Get e (Maybe a)

-- | <pre>
--   &gt;&gt;&gt; runGet (lookAheadE (word8 &gt;&gt;= \w -&gt; return (if even w then Left (w + 5) else Right (w - 4)))) (BLC.pack "abc")
--   RunGet (Right 93)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (lookAheadE (word8 &gt;&gt;= \w -&gt; return (if even w then Left (w + 5) else Right (w - 4)))) (BLC.pack "bc")
--   RunGet (Left 103)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (lookAheadE (word8 &gt;&gt;= \w -&gt; return (if even w then Left (w + 5) else Right (w - 4)))) (BLC.pack "")
--   RunGetFail 0 ()
--   </pre>
lookAheadE :: Get e (Either a b) -> Get e (Either a b)
readNWith :: Int -> (Ptr a -> IO a) -> Get () a
calculateOffset :: XDecoder e a -> Decoder e a
pushChunk :: Decoder e a -> ByteString -> Decoder e a
pushChunks :: Decoder e a -> ByteString -> Decoder e a
pushEndOfInput :: Decoder e a -> Decoder e a

-- | <pre>
--   &gt;&gt;&gt; runGet ([(), ()] !+ (setLabel [] word8)) (BLC.pack "")
--   RunGetFail 0 [(),()]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet ([(), ()] !+ (setLabel [] word8)) (BLC.pack "abc")
--   RunGet 97
--   </pre>
(!+) :: Semigroup e => e -> Get e a -> Get e a

-- | <pre>
--   &gt;&gt;&gt; runGet ([(), ()] `addLabel` (setLabel [] word8)) (BLC.pack "")
--   RunGetFail 0 [(),()]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet ([(), ()] `addLabel` (setLabel [] word8)) (BLC.pack "abc")
--   RunGet 97
--   </pre>
addLabel :: Semigroup e => e -> Get e a -> Get e a

-- | <pre>
--   &gt;&gt;&gt; runGet ("error" !- word8) (BLC.pack "")
--   RunGetFail 0 "error"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet ("error" !- word8) (BLC.pack "abc")
--   RunGet 97
--   </pre>
(!-) :: e -> Get d a -> Get e a

-- | <pre>
--   &gt;&gt;&gt; runGet ("error" `setLabel` word8) (BLC.pack "")
--   RunGetFail 0 "error"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet ("error" `setLabel` word8) (BLC.pack "abc")
--   RunGet 97
--   </pre>
setLabel :: e -> Get d a -> Get e a

-- | <pre>
--   &gt;&gt;&gt; runGet (reverse !!- setLabel "error" word8) (BLC.pack "")
--   RunGetFail 0 "rorre"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (reverse !!- setLabel "error" word8) (BLC.pack "abc")
--   RunGet 97
--   </pre>
(!!-) :: (d -> e) -> Get d a -> Get e a

-- | <pre>
--   &gt;&gt;&gt; runGet (reverse `modifyLabel` setLabel "error" word8) (BLC.pack "")
--   RunGetFail 0 "rorre"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; runGet (reverse `modifyLabel` setLabel "error" word8) (BLC.pack "abc")
--   RunGet 97
--   </pre>
modifyLabel :: (d -> e) -> Get d a -> Get e a
data Decoder e a

-- | <pre>
--   &gt;&gt;&gt; decoder (\b i n -&gt; B.length b + fromIntegral i + n) (\_ -&gt; 99) (\b n a -&gt; B.length b + fromIntegral n + a) (_Fail # (BC.pack "abc", 12, 19))
--   34
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; decoder (\b i n -&gt; B.length b + fromIntegral i + n) (\_ -&gt; 99) (\b n a -&gt; B.length b + fromIntegral n + a) (_Partial # (\b -&gt; _Fail # (fromMaybe (BC.pack "abc") b, 12, 19)))
--   99
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; decoder (\b i n -&gt; B.length b + fromIntegral i + n) (\_ -&gt; 99) (\b n a -&gt; B.length b + fromIntegral n + a) (_Done # (BC.pack "abc", 12, 19))
--   34
--   </pre>
decoder :: (ByteString -> Int64 -> e -> x) -> ((Maybe ByteString -> Decoder e a) -> x) -> (ByteString -> Int64 -> a -> x) -> Decoder e a -> x

-- | <pre>
--   &gt;&gt;&gt; (_Fail # (BC.pack "abc", 19, 31)) ^? _Fail
--   Just ("abc",19,31)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isNothing ((_Fail # (BC.pack "abc", 19, 31)) ^? _Partial)
--   True
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_Fail # (BC.pack "abc", 19, 31)) ^? _Done
--   Nothing
--   </pre>
_Fail :: Prism' (Decoder e a) (ByteString, Int64, e)

-- | <pre>
--   &gt;&gt;&gt; (_Partial # (\b -&gt; _Fail # (fromMaybe (BC.pack "abc") b, 12, 19))) ^? _Fail
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isJust ((_Partial # (\b -&gt; _Fail # (fromMaybe (BC.pack "abc") b, 12, 19))) ^? _Partial)
--   True
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_Partial # (\b -&gt; _Fail # (fromMaybe (BC.pack "abc") b, 12, 19))) ^? _Done
--   Nothing
--   </pre>
_Partial :: Prism' (Decoder e a) (Maybe ByteString -> Decoder e a)

-- | <pre>
--   &gt;&gt;&gt; (_Done # (BC.pack "abc", 19, 31)) ^? _Fail
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isNothing ((_Done # (BC.pack "abc", 19, 31)) ^? _Partial)
--   True
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (_Done # (BC.pack "abc", 19, 31)) ^? _Done
--   Just ("abc",19,31)
--   </pre>
_Done :: Prism' (Decoder e a) (ByteString, Int64, a)
runGet :: Get e a -> ByteString -> RunGetResult e a

-- | An alias for <tt>runGet</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; (word8 &gt;&gt;= \c1 -&gt; word8 &gt;&gt;= \c2 -&gt; return (c1 + c2)) .&gt;&gt; BLC.pack "abc"
--   RunGet 195
--   </pre>
(.>>) :: Get e a -> ByteString -> RunGetResult e a

-- | An alias for <tt>runGet</tt> with the arguments flipped.
--   
--   <pre>
--   &gt;&gt;&gt; BLC.pack "abc" &lt;&lt;. (word8 &gt;&gt;= \c1 -&gt; word8 &gt;&gt;= \c2 -&gt; return (c1 + c2))
--   RunGet 195
--   </pre>
(<<.) :: ByteString -> Get e a -> RunGetResult e a
runGetIncremental :: Get e a -> Decoder e a
data XDecoder e a
xdecoder :: (ByteString -> e -> x) -> ((Maybe ByteString -> XDecoder e a) -> x) -> (ByteString -> a -> x) -> (Int64 -> (Int64 -> XDecoder e a) -> x) -> XDecoder e a -> x
_XFail :: Prism' (XDecoder e a) (ByteString, e)
_XPartial :: Prism' (XDecoder e a) (Maybe ByteString -> XDecoder e a)
_XDone :: Prism' (XDecoder e a) (ByteString, a)
_XBytesRead :: Prism' (XDecoder e a) (Int64, Int64 -> XDecoder e a)
data CompletedXDecoder e a
completedXDecoder :: (ByteString -> e -> x) -> (ByteString -> a -> x) -> CompletedXDecoder e a -> x
_CompletedFail :: Prism' (CompletedXDecoder e a) (ByteString, e)
_CompletedDone :: Prism' (CompletedXDecoder e a) (ByteString, a)
completedIso :: Iso (CompletedXDecoder e a) (CompletedXDecoder f b) (Either e a, ByteString) (Either f b, ByteString)
completedByteString :: Lens' (CompletedXDecoder e a) ByteString
completedValue :: Lens' (CompletedXDecoder e a) (Either e a)
uncomplete :: Prism' (XDecoder e a) (CompletedXDecoder e a)
uncompletedByteString :: Traversal' (XDecoder e a) ByteString
uncompletedValue :: Traversal' (XDecoder e a) (Either e a)
instance Eq ListError
instance Ord ListError
instance Show ListError
instance Eq IntegerError
instance Ord IntegerError
instance Show IntegerError
instance (Eq e, Eq a) => Eq (CompletedXDecoder e a)
instance (Ord e, Ord a) => Ord (CompletedXDecoder e a)
instance (Show e, Show a) => Show (CompletedXDecoder e a)
instance Bitraversable CompletedXDecoder
instance Bifoldable CompletedXDecoder
instance Traversable (CompletedXDecoder e)
instance Foldable (CompletedXDecoder e)
instance Bifunctor CompletedXDecoder
instance Functor (CompletedXDecoder e)
instance Foldable (XDecoder e)
instance Bifoldable XDecoder
instance Bifunctor XDecoder
instance Functor (XDecoder e)
instance Functor (Decoder e)
instance Bifunctor Decoder
instance Semigroup (Get e a)
instance Alt (Get e)
instance Monad (Get e)
instance Bind (Get e)
instance Applicative (Get e)
instance Apply (Get e)
instance Functor (Get e)
instance Bifunctor Get

module Data.Tickle
