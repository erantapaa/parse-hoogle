-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A monad transformer for resumable exceptions
--   
--   This package defines a monad transformer for resumable exceptions;
--   like <tt>ErrorT</tt> except the exceptions include a resumption. It
--   interoperates with the <tt>mtl</tt> monads, but beware!, many of those
--   instances are unvalidated.
@package resumable-exceptions
@version 0.0.0.20100920


-- | A monadic interface for resumable exceptions.
module Control.Monad.Resumable.Class

-- | A monadic interface for resumable exceptions.
class Monad m => MonadResumable req res m | m -> req res
yield :: MonadResumable req res m => req -> (res -> m a) -> m a
handle :: MonadResumable req res m => m a -> (req -> (res -> m a) -> m a) -> m a

-- | Variation on <a>yield</a> that immediately returns the result.
signal :: MonadResumable req res m => req -> m res

-- | Variation on <a>handle</a> that always applies the resumption.
respond :: MonadResumable req res m => (req -> m res) -> m a -> m a
instance MonadResumable req res m => MonadResumable req res (ContT r m)
instance (Error e, MonadResumable req res m) => MonadResumable req res (ErrorT e m)
instance MonadResumable req res m => MonadResumable req res (StateT s m)
instance (Monoid w, MonadResumable req res m) => MonadResumable req res (WriterT w m)
instance MonadResumable req res m => MonadResumable req res (ReaderT r m)
instance (Monoid w, MonadResumable req res m) => MonadResumable req res (RWST r w s m)


-- | A monad transformer for resumable exceptions. The <a>ResumableT</a>
--   transformer is isomorphic to <tt>ReactT</tt>, the dominant reactivity
--   monad in the literature. The differences serve to match the
--   <tt>mtl</tt> style.
module Control.Monad.Resumable

-- | A monadic interface for resumable exceptions.
class Monad m => MonadResumable req res m | m -> req res
yield :: MonadResumable req res m => req -> (res -> m a) -> m a
handle :: MonadResumable req res m => m a -> (req -> (res -> m a) -> m a) -> m a

-- | Variation on <a>yield</a> that immediately returns the result.
signal :: MonadResumable req res m => req -> m res

-- | Variation on <a>handle</a> that always applies the resumption.
respond :: MonadResumable req res m => (req -> m res) -> m a -> m a
type Resumable scope req res = ResumableT scope req res Identity
newtype ResumableT scope req res m a
ResumableT :: m (Either (req, res -> ResumableT scope req res m a) a) -> ResumableT scope req res m a
unResumableT :: ResumableT scope req res m a -> m (Either (req, res -> ResumableT scope req res m a) a)

-- | The preferred top-level interface nevers allows exceptions to go
--   unhandled.
runResumableT :: Monad m => ResumableT scope req res m a -> m (req -> (res -> ResumableT scope req res m a) -> ResumableT scope req res m a) -> m a

-- | This variation recognizes that the handling of requests primarily
--   involves generating responses.
runResumableT_responder :: Monad m => ResumableT scope req res m a -> m (req -> ResumableT scope req res m res) -> m a

-- | The handler does not depend on the inner monad.
runResumableT' :: Monad m => ResumableT scope req res m a -> (req -> (res -> ResumableT scope req res m a) -> ResumableT scope req res m a) -> m a

-- | The responder does not depend on the inner monad.
runResumableT_responder' :: Monad m => ResumableT scope req res m a -> (req -> ResumableT scope req res m res) -> m a
data Static :: *
data Dynamic :: *

-- | Establishes static scoping as default.
asStatic :: ResumableT Static req res m a -> ResumableT Static req res m a

-- | Establishes dynamic scoping as default.
asDynamic :: ResumableT Dynamic req res m a -> ResumableT Dynamic req res m a
statically :: Scoped Static m => (ScopedAs Static m a -> ScopedAs Static m b) -> m a -> m b
dynamically :: Scoped Dynamic m => (ScopedAs Dynamic m a -> ScopedAs Dynamic m b) -> m a -> m b

-- | This manipulation of the inner monad acheives static scoping -- the
--   manipulation is not preserved in the resumption.
mapResumableT_static :: (m (Either (req, res -> ResumableT scope req res m a) a) -> n (Either (req', res' -> ResumableT scope' req' res' n b) b)) -> ResumableT scope req res m a -> ResumableT scope' req' res' n b

-- | This manipulation of the inner monad acheives dynamic scoping -- the
--   manipulation is preserved in the resumption.
mapResumableT_dynamic :: (Monad m, Monad n) => (m (Either (req, res -> ResumableT scope req res m a) a) -> n (Either (req, res -> ResumableT scope req res m a) b)) -> ResumableT scope req res m a -> ResumableT scope req res n b
instance MonadFix m => MonadFix (ResumableT scope req res m)
instance MonadIO m => MonadIO (ResumableT scope req res m)
instance MonadCont m => MonadCont (ResumableT scope req res m)
instance MonadWriter w m => MonadWriter w (ResumableT scope req res m)
instance MonadError e m => MonadError e (ResumableT Dynamic req res m)
instance MonadError e m => MonadError e (ResumableT Static req res m)
instance MonadState s m => MonadState s (ResumableT scope req res m)
instance MonadReader r m => MonadReader r (ResumableT Dynamic req res m)
instance MonadReader r m => MonadReader r (ResumableT Static req res m)
instance (Monoid w, MonadReader r m, MonadState s m, MonadWriter w m) => MonadRWS r w s (ResumableT Dynamic req res m)
instance (Monoid w, MonadReader r m, MonadState s m, MonadWriter w m) => MonadRWS r w s (ResumableT Static req res m)
instance Monad m => MonadResumable req res (ResumableT Dynamic req res m)
instance Monad m => MonadResumable req res (ResumableT Static req res m)
instance Monad m => Monad (ResumableT scope req res m)
instance Functor m => Functor (ResumableT scope req res m)
instance MonadTrans (ResumableT scope req res)


-- | A class with an associated type for converting the phantom
--   <tt>scope</tt> type of the <a>ResumableT</a> transformer.
module Control.Monad.Resumable.Scoped

-- | Token type for static scoping.
data Static
Static :: Static

-- | Token type for dynamic scoping.
data Dynamic
Dynamic :: Dynamic

-- | Ascribes the <a>Static</a> scoping token to a <a>ResumableT</a>
--   transformer.
asStatic :: ResumableT Static req res m a -> ResumableT Static req res m a

-- | Ascribes the <a>Dynamic</a> scoping token to a <a>ResumableT</a>
--   transformer.
asDynamic :: ResumableT Dynamic req res m a -> ResumableT Dynamic req res m a

-- | Ascribes the <a>Static</a> scoping token to a monad transformer stack.
statically :: Scoped Static m => (ScopedAs Static m a -> ScopedAs Static m b) -> m a -> m b

-- | Ascribes the <a>Dynamic</a> scoping token to a monad transformer
--   stack.
dynamically :: Scoped Dynamic m => (ScopedAs Dynamic m a -> ScopedAs Dynamic m b) -> m a -> m b

-- | Type class with an associated type for setting the <tt>scope</tt>
--   phantom of the <a>ResumableT</a> transformer.
class Scoped scope m where { type family ScopedAs scope m :: * -> *; { scoped _ f = unsafeCoerce . f . unsafeCoerce } }
scoped :: Scoped scope m => scope -> (ScopedAs scope m a -> ScopedAs scope m b) -> m a -> m b
instance Scoped scope m => Scoped scope (WriterT w m)
instance Scoped scope m => Scoped scope (StateT s m)
instance Scoped scope m => Scoped scope (ReaderT r m)
instance Scoped scope m => Scoped scope (RWST r w s m)
instance Scoped scope m => Scoped scope (ListT m)
instance Scoped scope m => Scoped scope (ErrorT e m)
instance Scoped scope m => Scoped scope (ContT r m)
instance Scoped scope (ResumableT scope' req res m)
