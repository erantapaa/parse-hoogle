-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Yeller Client For Haskell
--   
@package yeller
@version 0.1.0.4

module Network.Yeller.Internals

-- | An error notification. This is what is sent to Yeller's servers
data ErrorNotification a
ErrorNotification :: Text -> Text -> [StackFrame] -> Text -> Text -> Text -> ExtraErrorInfo a -> ErrorNotification a

-- | The type of the error. E.g. SomeException, DivideByZero
errorType :: ErrorNotification a -> Text

-- | The message of the exception
errorMessage :: ErrorNotification a -> Text

-- | The stacktrace of the error. Usually grabbed using <a>whoCreated</a>
errorStackTrace :: ErrorNotification a -> [StackFrame]

-- | The host that this error occurred on
errorHost :: ErrorNotification a -> Text

-- | The application environment this error occurred in
errorEnvironment :: ErrorNotification a -> Text

-- | The version of the yeller client reporting the error
errorClientVersion :: ErrorNotification a -> Text

-- | See <a>ExtraErrorInfo</a>
errorExtra :: ErrorNotification a -> ExtraErrorInfo a

-- | A line of the stacktrace
data StackFrame
StackFrame :: Text -> Text -> Text -> StackOptions -> StackFrame

-- | The filename this line occurred in
stackFilename :: StackFrame -> Text

-- | The line number(s) this line occurred in
stackLineNumber :: StackFrame -> Text

-- | The function this line occurred in
stackFunction :: StackFrame -> Text
stackOptions :: StackFrame -> StackOptions

-- | Options to be associated with each line in the stacktrace. Currently
--   only supports if the line is in the application or not.
data StackOptions
StackOptions :: Bool -> StackOptions
stackOptionsInApp :: StackOptions -> Bool

-- | Extra error information to be passed along with an error. All fields
--   are optional.
data ExtraErrorInfo a
ExtraErrorInfo :: Maybe Text -> Maybe (Map Text a) -> Maybe Text -> Maybe UserInfo -> Maybe HTTPRequest -> ExtraErrorInfo a

-- | If the error happened during a web request, the url that was hit
--   during that request
errorURL :: ExtraErrorInfo a -> Maybe Text

-- | A map of data that has to conform to Aeson's ToJSON typeclass. Can be
--   anything you want that helps you debug the error.
errorCustomData :: ExtraErrorInfo a -> Maybe (Map Text a)

-- | What toplevel part of the application the request that caused the
--   error came from e.g. web controller name, background job name
errorLocation :: ExtraErrorInfo a -> Maybe Text

-- | Which user the error happened from. Lets you see how many total users
--   were affected by an error
errorUser :: ExtraErrorInfo a -> Maybe UserInfo

-- | Which http request was happening when the error occurred
errorHTTPRequest :: ExtraErrorInfo a -> Maybe HTTPRequest

-- | Lets you attach which user the error happened with which lets you
--   count the total number of affected users
data UserInfo
UserInfo :: Integer -> UserInfo

-- | The user id of the affected user
userID :: UserInfo -> Integer

-- | Extra error info with all fields turned off.
--   
--   Useful when getting started, but real apps should fill in as many
--   fields as possible for better debugging context
emptyExtraErrorInfo :: ExtraErrorInfo Int

-- | Lets you attach which http request was occurring when the error
--   happened which lets you see the browser, if the request came from a
--   spider and so on
data HTTPRequest
HTTPRequest :: Text -> HTTPRequest

-- | The user agent of the impacted http request
httpRequestUserAgent :: HTTPRequest -> Text
makeJSONCustomData :: ToJSON a => ExtraErrorInfo a -> Value
maybeAddUser :: ExtraErrorInfo a -> Map Text Value -> Map Text Value
maybeAddHTTPUserAgent :: ExtraErrorInfo a -> Map Text Value -> Map Text Value
maybeOr :: Maybe a -> a -> a
yellerVersion :: Text

-- | An endpoint to send errors with. Must end with "/" sample:
--   
--   <pre>
--   Backend "https://collector1.yellerapp.com"
--   </pre>
newtype Backend
Backend :: Text -> Backend

-- | A Yeller client. Build one with <a>client</a> like so: <tt> client
--   (defaultClientSettings { clientSettingsToken = YellerToken
--   <a>YOUR_TOKEN_HERE</a> }) </tt>
--   
--   Used to keep persistent http connections alive, keep track of which
--   endpoint to send to, and a bunch of data that's sent along with the
--   error.
data YellerClient
YellerClient :: Text -> Text -> Text -> Text -> Text -> Manager -> TVar [Backend] -> YellerClientErrorHandler -> Int -> YellerClient

-- | The token used to authenticate with Yeller's servers.
clientToken :: YellerClient -> Text

-- | The server this client is running on.
clientHost :: YellerClient -> Text

-- | The environment this client is running in
clientEnvironment :: YellerClient -> Text

-- | The version number of this client
clientVersion :: YellerClient -> Text

-- | The name of the application package that is using this client
clientApplicationPackage :: YellerClient -> Text

-- | The http manager for tracking open connections
clientManager :: YellerClient -> Manager

-- | The set of backends to use. The next backend that will be used is
--   second in the list.
clientBackends :: YellerClient -> TVar [Backend]

-- | The client error handler. See <a>YellerClientErrorHandler</a>
clientErrorHandler :: YellerClient -> YellerClientErrorHandler

-- | The maximum number of retries
clientMaxRetries :: YellerClient -> Int
DisabledYellerClient :: YellerClient

-- | An error handler, for dealing with errors when sending errors to
--   Yeller's servers <a>defaultErrorHandler</a> just prints to stderr when
--   receiving errors, but you might want to override that to make it go to
--   your logging system of choice.
data YellerClientErrorHandler
YellerClientErrorHandler :: (Response BodyReader -> IO ()) -> (SomeException -> ErrorNotification Value -> IO ()) -> YellerClientErrorHandler

-- | Used when handling authentication (401, 403) failures from Yeller's
--   servers. These errors are *not* retried like other ones.
handleAuthenticationErrors :: YellerClientErrorHandler -> Response BodyReader -> IO ()

-- | Used when handling any errors that aren't authentication related. This
--   function will only be called after <a>clientMaxRetries</a> is
--   exceeded.
handleIOErrors :: YellerClientErrorHandler -> SomeException -> ErrorNotification Value -> IO ()

-- | The Environment your client is running in. If set to
--   <a>TestEnvironment</a>, then no errors will be reported (which you
--   should do for development/testing)
data ApplicationEnvironment

-- | Clients constructed with this environment don't send errors.
TestEnvironment :: ApplicationEnvironment

-- | Any client in this kind of environment will report errors.
ApplicationEnvironment :: Text -> ApplicationEnvironment

-- | The name of the package your application is in.
newtype ApplicationPackage
ApplicationPackage :: Text -> ApplicationPackage

-- | An api token. Get one from your project's settings page
newtype YellerToken
YellerToken :: Text -> YellerToken

-- | Options you pass when creating a client, usually done like this:
--   
--   <pre>
--   <a>client</a> (<a>defaultClientSettings</a> { <a>clientSettingsToken</a> = <a>YellerToken</a> "YOUR_TOKEN_HERE" })
--   </pre>
data YellerClientSettings
YellerClientSettings :: YellerToken -> Maybe Text -> ApplicationEnvironment -> ApplicationPackage -> [Backend] -> YellerClientErrorHandler -> Int -> YellerClientSettings

-- | The api token used for authenticating with Yeller's servers
clientSettingsToken :: YellerClientSettings -> YellerToken

-- | (optional): the name of the server this client is running on if set to
--   <a>Nothing</a>, <a>client</a> will default it to <a>getHostName</a>
clientSettingsHost :: YellerClientSettings -> Maybe Text

-- | The name of the environment the application is running in for example:
--   production, test etc if set to <a>TestEnvironment</a>, the client will
--   be disabled
clientSettingsEnvironment :: YellerClientSettings -> ApplicationEnvironment

-- | The name of the application package, used to filter out noisy
--   stacktrace lines by default in the UI. Lines from functions starting
--   with this are marked as "in-app", others will only show up via a
--   toggle in the UI.
clientSettingsApplicationPackage :: YellerClientSettings -> ApplicationPackage

-- | A list of servers to contact. Weird things will probably happen if
--   it's set to []
clientSettingsBackends :: YellerClientSettings -> [Backend]

-- | Used for handling errors when sending to Yeller's servers. See
--   <a>YellerClientErrorHandler</a> for more.
clientSettingsErrorHandler :: YellerClientSettings -> YellerClientErrorHandler

-- | The maximum number of times to retry sending to the servers before
--   logging a failure. Weird things will probably happen if set to less
--   than 1.
clientSettingsMaxRetries :: YellerClientSettings -> Int

-- | The default client settings, used for constructing a client
defaultClientSettings :: YellerClientSettings

-- | The default error handler, which logs errors when sending things to
--   Yeller to stderr
defaultErrorHandler :: YellerClientErrorHandler
bogusClientToken :: Text
defaultBackends :: [Text]

-- | A class for converting things into errors. Means you can pass both
--   exceptions, and any other error like values in your code.
class (Typeable a, Show a) => ToError a
toError :: ToError a => a -> ErrorNotification b -> ErrorNotification b
defaultToError :: (Typeable e, Show e) => e -> ErrorNotification b -> ErrorNotification b
parseStackLine :: String -> StackFrame
manageNoLocationFilename :: Text -> Text
parseStackTrace :: [String] -> [StackFrame]
markInApp :: Text -> StackFrame -> StackFrame
filterInAppLines :: Text -> [StackFrame] -> [StackFrame]

-- | Sends an error to Yeller's servers needs a client, something that can
--   be turned into an error (via ToError), and extra error information
--   (which describes additional information to be sent along with the
--   error). See <a>ExtraErrorInfo</a> for the extra info, and
--   <a>client</a> for how to create a client.
--   
--   Sample invocation:
--   
--   <pre>
--   sendError yellerClient someError <a>emptyExtraErrorInfo</a>
--   </pre>
sendError :: (ToError e, ToJSON a) => YellerClient -> e -> ExtraErrorInfo a -> IO ()
sendNotification :: ToJSON a => YellerClient -> ErrorNotification a -> IO ()
sendNotificationWithRetry :: ToJSON a => Int -> YellerClient -> ErrorNotification a -> ByteString -> IO ()
handleNonExceptionalSendRequest :: ToJSON a => Response BodyReader -> Int -> YellerClient -> ErrorNotification a -> ByteString -> IO ()
encodeCustomDataAsJSON :: ToJSON a => ErrorNotification a -> ErrorNotification Value
cycleBackends :: YellerClient -> IO Backend
cycleBackends_ :: [Backend] -> [Backend]
modifyTVar_ :: TVar a -> (a -> a) -> STM ()
makeRequest :: YellerClient -> Backend -> ByteString -> IO Request

-- | Initializes a Yeller client, given some client settings Call it like
--   this with the default client settings:
--   
--   <pre>
--   <a>client</a> (<a>defaultClientSettings</a> { <a>clientSettingsToken</a> = <a>YellerToken</a> "YOUR_TOKEN_HERE" })
--   </pre>
client :: YellerClientSettings -> IO YellerClient
shutdownClient :: YellerClient -> IO ()
instance Show StackOptions
instance Eq StackOptions
instance Show StackFrame
instance Eq StackFrame
instance Show UserInfo
instance Eq UserInfo
instance Show HTTPRequest
instance Eq HTTPRequest
instance Show a => Show (ExtraErrorInfo a)
instance Eq a => Eq (ExtraErrorInfo a)
instance Show a => Show (ErrorNotification a)
instance Eq a => Eq (ErrorNotification a)
instance ToError SomeException
instance ToJSON b => ToJSON (ErrorNotification b)
instance ToJSON StackFrame
instance ToJSON StackOptions
instance ToJSON HTTPRequest
instance ToJSON UserInfo

module Network.Yeller

-- | Sends an error to Yeller's servers needs a client, something that can
--   be turned into an error (via ToError), and extra error information
--   (which describes additional information to be sent along with the
--   error). See <a>ExtraErrorInfo</a> for the extra info, and
--   <a>client</a> for how to create a client.
--   
--   Sample invocation:
--   
--   <pre>
--   sendError yellerClient someError <a>emptyExtraErrorInfo</a>
--   </pre>
sendError :: (ToError e, ToJSON a) => YellerClient -> e -> ExtraErrorInfo a -> IO ()

-- | Initializes a Yeller client, given some client settings Call it like
--   this with the default client settings:
--   
--   <pre>
--   <a>client</a> (<a>defaultClientSettings</a> { <a>clientSettingsToken</a> = <a>YellerToken</a> "YOUR_TOKEN_HERE" })
--   </pre>
client :: YellerClientSettings -> IO YellerClient

-- | The default client settings, used for constructing a client
defaultClientSettings :: YellerClientSettings

-- | Options you pass when creating a client, usually done like this:
--   
--   <pre>
--   <a>client</a> (<a>defaultClientSettings</a> { <a>clientSettingsToken</a> = <a>YellerToken</a> "YOUR_TOKEN_HERE" })
--   </pre>
data YellerClientSettings
YellerClientSettings :: YellerToken -> Maybe Text -> ApplicationEnvironment -> ApplicationPackage -> [Backend] -> YellerClientErrorHandler -> Int -> YellerClientSettings

-- | The api token used for authenticating with Yeller's servers
clientSettingsToken :: YellerClientSettings -> YellerToken

-- | (optional): the name of the server this client is running on if set to
--   <a>Nothing</a>, <a>client</a> will default it to <a>getHostName</a>
clientSettingsHost :: YellerClientSettings -> Maybe Text

-- | The name of the environment the application is running in for example:
--   production, test etc if set to <a>TestEnvironment</a>, the client will
--   be disabled
clientSettingsEnvironment :: YellerClientSettings -> ApplicationEnvironment

-- | The name of the application package, used to filter out noisy
--   stacktrace lines by default in the UI. Lines from functions starting
--   with this are marked as "in-app", others will only show up via a
--   toggle in the UI.
clientSettingsApplicationPackage :: YellerClientSettings -> ApplicationPackage

-- | A list of servers to contact. Weird things will probably happen if
--   it's set to []
clientSettingsBackends :: YellerClientSettings -> [Backend]

-- | Used for handling errors when sending to Yeller's servers. See
--   <a>YellerClientErrorHandler</a> for more.
clientSettingsErrorHandler :: YellerClientSettings -> YellerClientErrorHandler

-- | The maximum number of times to retry sending to the servers before
--   logging a failure. Weird things will probably happen if set to less
--   than 1.
clientSettingsMaxRetries :: YellerClientSettings -> Int

-- | The Environment your client is running in. If set to
--   <a>TestEnvironment</a>, then no errors will be reported (which you
--   should do for development/testing)
data ApplicationEnvironment

-- | Clients constructed with this environment don't send errors.
TestEnvironment :: ApplicationEnvironment

-- | Any client in this kind of environment will report errors.
ApplicationEnvironment :: Text -> ApplicationEnvironment

-- | The name of the package your application is in.
newtype ApplicationPackage
ApplicationPackage :: Text -> ApplicationPackage

-- | An api token. Get one from your project's settings page
newtype YellerToken
YellerToken :: Text -> YellerToken

-- | Extra error information to be passed along with an error. All fields
--   are optional.
data ExtraErrorInfo a
ExtraErrorInfo :: Maybe Text -> Maybe (Map Text a) -> Maybe Text -> Maybe UserInfo -> Maybe HTTPRequest -> ExtraErrorInfo a

-- | If the error happened during a web request, the url that was hit
--   during that request
errorURL :: ExtraErrorInfo a -> Maybe Text

-- | A map of data that has to conform to Aeson's ToJSON typeclass. Can be
--   anything you want that helps you debug the error.
errorCustomData :: ExtraErrorInfo a -> Maybe (Map Text a)

-- | What toplevel part of the application the request that caused the
--   error came from e.g. web controller name, background job name
errorLocation :: ExtraErrorInfo a -> Maybe Text

-- | Which user the error happened from. Lets you see how many total users
--   were affected by an error
errorUser :: ExtraErrorInfo a -> Maybe UserInfo

-- | Which http request was happening when the error occurred
errorHTTPRequest :: ExtraErrorInfo a -> Maybe HTTPRequest

-- | Extra error info with all fields turned off.
--   
--   Useful when getting started, but real apps should fill in as many
--   fields as possible for better debugging context
emptyExtraErrorInfo :: ExtraErrorInfo Int

-- | Lets you attach which http request was occurring when the error
--   happened which lets you see the browser, if the request came from a
--   spider and so on
data HTTPRequest
HTTPRequest :: Text -> HTTPRequest

-- | The user agent of the impacted http request
httpRequestUserAgent :: HTTPRequest -> Text

-- | Lets you attach which user the error happened with which lets you
--   count the total number of affected users
data UserInfo
UserInfo :: Integer -> UserInfo

-- | The user id of the affected user
userID :: UserInfo -> Integer

-- | An error notification. This is what is sent to Yeller's servers
data ErrorNotification a
ErrorNotification :: Text -> Text -> [StackFrame] -> Text -> Text -> Text -> ExtraErrorInfo a -> ErrorNotification a

-- | The type of the error. E.g. SomeException, DivideByZero
errorType :: ErrorNotification a -> Text

-- | The message of the exception
errorMessage :: ErrorNotification a -> Text

-- | The stacktrace of the error. Usually grabbed using <a>whoCreated</a>
errorStackTrace :: ErrorNotification a -> [StackFrame]

-- | The host that this error occurred on
errorHost :: ErrorNotification a -> Text

-- | The application environment this error occurred in
errorEnvironment :: ErrorNotification a -> Text

-- | The version of the yeller client reporting the error
errorClientVersion :: ErrorNotification a -> Text

-- | See <a>ExtraErrorInfo</a>
errorExtra :: ErrorNotification a -> ExtraErrorInfo a

-- | A line of the stacktrace
data StackFrame
StackFrame :: Text -> Text -> Text -> StackOptions -> StackFrame

-- | The filename this line occurred in
stackFilename :: StackFrame -> Text

-- | The line number(s) this line occurred in
stackLineNumber :: StackFrame -> Text

-- | The function this line occurred in
stackFunction :: StackFrame -> Text
stackOptions :: StackFrame -> StackOptions

-- | Options to be associated with each line in the stacktrace. Currently
--   only supports if the line is in the application or not.
data StackOptions
StackOptions :: Bool -> StackOptions
stackOptionsInApp :: StackOptions -> Bool

-- | A class for converting things into errors. Means you can pass both
--   exceptions, and any other error like values in your code.
class (Typeable a, Show a) => ToError a

-- | An error handler, for dealing with errors when sending errors to
--   Yeller's servers <a>defaultErrorHandler</a> just prints to stderr when
--   receiving errors, but you might want to override that to make it go to
--   your logging system of choice.
data YellerClientErrorHandler
YellerClientErrorHandler :: (Response BodyReader -> IO ()) -> (SomeException -> ErrorNotification Value -> IO ()) -> YellerClientErrorHandler

-- | Used when handling authentication (401, 403) failures from Yeller's
--   servers. These errors are *not* retried like other ones.
handleAuthenticationErrors :: YellerClientErrorHandler -> Response BodyReader -> IO ()

-- | Used when handling any errors that aren't authentication related. This
--   function will only be called after <a>clientMaxRetries</a> is
--   exceeded.
handleIOErrors :: YellerClientErrorHandler -> SomeException -> ErrorNotification Value -> IO ()

-- | The default error handler, which logs errors when sending things to
--   Yeller to stderr
defaultErrorHandler :: YellerClientErrorHandler

-- | An endpoint to send errors with. Must end with "/" sample:
--   
--   <pre>
--   Backend "https://collector1.yellerapp.com"
--   </pre>
newtype Backend
Backend :: Text -> Backend

-- | A Yeller client. Build one with <a>client</a> like so: <tt> client
--   (defaultClientSettings { clientSettingsToken = YellerToken
--   <a>YOUR_TOKEN_HERE</a> }) </tt>
--   
--   Used to keep persistent http connections alive, keep track of which
--   endpoint to send to, and a bunch of data that's sent along with the
--   error.
data YellerClient
