-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A monad which is powerful enough to interpret any action
--   
@package acme-all-monad
@version 0.1.0.0


-- | The <tt>AllT</tt> monad monad transformer.
module Control.Monad.All.Trans

-- | The <tt>AllT</tt> monad transformer.
--   
--   <tt>AllT</tt> is powerful enough to interpret any monadic action,
--   which makes it very convenient for defining domain specific languages.
--   
--   Of course, any actions supported by the base monad are also supported
--   by <tt>AllT</tt>.
data AllT (m :: * -> *) a

-- | Create any value in the <tt>AllT</tt> monad.
anything :: AllT m a
instance MonadIO (AllT m)
instance MonadTrans AllT
instance MonadPlus (AllT m)
instance Alternative (AllT m)
instance Monad (AllT m)
instance Applicative (AllT m)
instance Functor (AllT m)


-- | The <tt>MonadAll</tt> type class, which represents monads which are
--   powerful enough to interpret any monadic action.
module Control.Monad.All.Class

-- | The <tt>MonadAll</tt> class represents those monads which support
--   every monadic action.
--   
--   Instances are provided for <tt>AllT</tt> and the standard monad
--   transformers, so that you can use arbitrary actions in other monad
--   transformer stacks.
class Monad m => MonadAll m
action :: MonadAll m => a -> m b

-- | Perform an action, discarding the result.
action_ :: MonadAll m => a -> m ()
instance (MonadAll m, Monoid w) => MonadAll (RWST r w s m)
instance (MonadAll m, Monoid w) => MonadAll (RWST r w s m)
instance MonadAll m => MonadAll (StateT s m)
instance MonadAll m => MonadAll (StateT s m)
instance (MonadAll m, Monoid w) => MonadAll (WriterT w m)
instance (MonadAll m, Monoid w) => MonadAll (WriterT w m)
instance MonadAll m => MonadAll (ReaderT r m)
instance MonadAll m => MonadAll (MaybeT m)
instance MonadAll m => MonadAll (ListT m)
instance MonadAll m => MonadAll (ExceptT e m)
instance MonadAll m => MonadAll (IdentityT m)
instance MonadAll (AllT m)


-- | The <tt>All</tt> monad, which is powerful enough to interpret any
--   monadic action.
module Control.Monad.All

-- | The <tt>All</tt> monad.
--   
--   <tt>All</tt> is powerful enough to interpret any monadic action, which
--   makes it very convenient for defining domain specific languages.
--   
--   <tt>All</tt> is defined as a type synonym for <tt><a>AllT</a>
--   <a>Identity</a></tt>.
type All = AllT Identity
