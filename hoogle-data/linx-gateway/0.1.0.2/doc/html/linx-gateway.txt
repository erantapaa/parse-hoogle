-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Implementation of the Enea LINX gateway protocol.
--   
--   Implementation of the Enea LINX gateway protocol. The protocol enables
--   clients to communicate through a gateway server. Base transport for
--   the protocol is TCP.
@package linx-gateway
@version 0.1.0.2

module Network.Linx.Gateway.Types

-- | Status indicator
data Status
Success :: Status
Error :: Status

-- | Length descriptor.
newtype Length
Length :: Int32 -> Length

-- | Index descriptor.
newtype Index
Index :: Int32 -> Index

-- | Signal number descriptor.
newtype SigNo
SigNo :: Int32 -> SigNo

-- | Version descriptor.
data Version
V100 :: Version
Version :: !Int32 -> Version

-- | Flags descriptor.
data Flags
BigEndian :: Flags
LittleEndian :: Flags
Flags :: !Int32 -> Flags

-- | Null terminated C-string.
newtype CString
CString :: ByteString -> CString

-- | User identifier (always zero).
data User
AlwaysZero :: User

-- | Process identifier for a Linx process.
newtype Pid
Pid :: Int32 -> Pid

-- | Timeout value.
data Timeout
Infinity :: Timeout
Timeout :: Int32 -> Timeout

-- | Attach reference
newtype Attref
Attref :: Int32 -> Attref

-- | Make a CString.
mkCString :: String -> CString

-- | Calculate the length of a CString
cstrlen :: CString -> Length

-- | Convert an integral value to Length.
toLength :: Integral a => a -> Length

-- | Convert Length to an integral value.
asInt :: Num a => Length -> a
instance Show Status
instance Eq Status
instance Show Length
instance Eq Length
instance Generic Length
instance Show Index
instance Eq Index
instance Generic Index
instance Show SigNo
instance Eq SigNo
instance Generic SigNo
instance Show Version
instance Eq Version
instance Show Flags
instance Eq Flags
instance Show CString
instance Eq CString
instance Show User
instance Eq User
instance Show Pid
instance Eq Pid
instance Generic Pid
instance Eq Timeout
instance Show Timeout
instance Show Attref
instance Eq Attref
instance Generic Attref
instance Datatype D1Length
instance Constructor C1_0Length
instance Datatype D1Index
instance Constructor C1_0Index
instance Datatype D1SigNo
instance Constructor C1_0SigNo
instance Datatype D1Pid
instance Constructor C1_0Pid
instance Datatype D1Attref
instance Constructor C1_0Attref
instance Binary Timeout
instance Binary User
instance Binary CString
instance Binary Flags
instance Binary Version
instance Binary Status
instance Binary Attref
instance Binary Pid
instance Binary SigNo
instance Binary Index
instance Binary Length


-- | The module is implementing the LINX signal concept, which is the user
--   level payload exchanged between two services.
module Network.Linx.Gateway.Signal

-- | A signal - user lever payload data - is coded into three different
--   fields in the gateway protocol: Signal length in bytes, including
--   signal number. Signal number. Array of signal data. Even in the case
--   of <a>NoSignal</a> the binary encoding is eight bytes.
data Signal

-- | A full bodied signal with number and data.
Signal :: !SigNo -> !ByteString -> Signal
sigNo :: Signal -> !SigNo
sigData :: Signal -> !ByteString

-- | A signal data only is carrying a signal number, but no data.
NumericSignal :: !SigNo -> Signal
sigNo :: Signal -> !SigNo

-- | An <tt>empty</tt> signal.
NoSignal :: Signal

-- | A signal selector is used to filter which signals to expect when
--   calling receive. It can either be one of two specific filters -
--   AnySignal or Cancel - or a generic filter.
data SignalSelector

-- | Accept any kind of signal.
AnySignal :: SignalSelector

-- | Cancel the last receive.
Cancel :: SignalSelector

-- | Accept any of the specified signals. The list must not be empty.
Sel :: ![SigNo] -> SignalSelector
selection :: SignalSelector -> ![SigNo]

-- | Signal number descriptor.
newtype SigNo
SigNo :: Int32 -> SigNo

-- | Type class to determine the size of a signal.
class PayloadSize a
payloadSize :: PayloadSize a => a -> Length

-- | Encode a value using binary serialisation to a lazy ByteString.
encode :: Binary a => a -> ByteString

-- | Decode a value from a lazy ByteString, reconstructing the original
--   structure.
decode :: Binary a => ByteString -> a
instance Eq Signal
instance Show Signal
instance Eq SignalSelector
instance Show SignalSelector
instance Binary SignalSelector
instance Binary Signal
instance PayloadSize SignalSelector
instance PayloadSize Signal


-- | Implementation of <i>low level</i> messages from the LINX Gateway
--   protocol. Details about the protocol can be found at:
--   <a>http://linx.sourceforge.net/linxdoc/doc/linxprotocols/book-linx-protocols-html/index.html</a>
module Network.Linx.Gateway.Message

-- | Message, carrying a <a>Header</a> and a <a>ProtocolPayload</a>.
data Message
Message :: !Header -> !ProtocolPayload -> Message

-- | Message header.
data Header
Header :: !PayloadType -> !Length -> Header
payloadType :: Header -> !PayloadType
payloadLength :: Header -> !Length

-- | Protocol payload.
data ProtocolPayload
FailedRequest :: ProtocolPayload

-- | This request has two puposes. The client sends this request to
--   retrieve information about the gateway server, e.g. supported
--   requests, protocol verions etc. It is also used as a ping-message to
--   check that the server is alive.
InterfaceRequest :: !Version -> !Flags -> ProtocolPayload
version :: ProtocolPayload -> !Version
flags :: ProtocolPayload -> !Flags
InterfaceReply :: !Status -> !Version -> !Flags -> !Length -> ![PayloadType] -> ProtocolPayload
status :: ProtocolPayload -> !Status
version :: ProtocolPayload -> !Version
flags :: ProtocolPayload -> !Flags
typesLen :: ProtocolPayload -> !Length
payloadTypes :: ProtocolPayload -> ![PayloadType]

-- | This request it used to create a client instance on the server that
--   the client communicated with.
CreateRequest :: !User -> !CString -> ProtocolPayload
user :: ProtocolPayload -> !User
myName :: ProtocolPayload -> !CString
CreateReply :: !Status -> !Pid -> !Length -> ProtocolPayload
status :: ProtocolPayload -> !Status
pid :: ProtocolPayload -> !Pid
maxSigSize :: ProtocolPayload -> !Length

-- | This request is used to remove a client instance on the server, i.e.
--   end the session that was started with the create request.
DestroyRequest :: !Pid -> ProtocolPayload
pid :: ProtocolPayload -> !Pid
DestroyReply :: !Status -> ProtocolPayload
status :: ProtocolPayload -> !Status

-- | This request is to used to ask the gateway server to execute a hunt
--   call.
HuntRequest :: !User -> !Index -> !Index -> !Signal -> !CString -> ProtocolPayload
user :: ProtocolPayload -> !User
nameIndex :: ProtocolPayload -> !Index
sigIndex :: ProtocolPayload -> !Index
signal :: ProtocolPayload -> !Signal
huntName :: ProtocolPayload -> !CString
HuntReply :: !Status -> !Pid -> ProtocolPayload
status :: ProtocolPayload -> !Status
pid :: ProtocolPayload -> !Pid

-- | This request is used to ask the server to execute a receive or
--   receive_w_tmo call. It differs from other requests, because the client
--   may send a second receive request or an interface request before it
--   has received the reply from the previous receive request. The client
--   may send a second receive request to cancel the first one. Beware that
--   server may already have sent a receive reply before the cancel request
--   was received, in this case the client must also wait for the cancel
--   reply. The client may send an interface request to the server, which
--   returns an interface reply. This is used by the client to detect if
--   the server has died while waiting for a receive reply.
ReceiveRequest :: !Timeout -> !SignalSelector -> ProtocolPayload
timeout :: ProtocolPayload -> !Timeout
sigSel :: ProtocolPayload -> !SignalSelector
ReceiveReply :: !Status -> !Pid -> !Pid -> !Signal -> ProtocolPayload
status :: ProtocolPayload -> !Status
senderPid :: ProtocolPayload -> !Pid
addresseePid :: ProtocolPayload -> !Pid
signal :: ProtocolPayload -> !Signal

-- | This request is used to ask the gateway server to execute a send or
--   send_w_s call.
SendRequest :: !Pid -> !Pid -> !Signal -> ProtocolPayload
fromPid :: ProtocolPayload -> !Pid
destPid :: ProtocolPayload -> !Pid
signal :: ProtocolPayload -> !Signal
SendReply :: !Status -> ProtocolPayload
status :: ProtocolPayload -> !Status

-- | This request is used to ask the gateway server to execute an attach
--   call.
AttachRequest :: !Pid -> !Signal -> ProtocolPayload
pid :: ProtocolPayload -> !Pid
signal :: ProtocolPayload -> !Signal
AttachReply :: !Status -> !Attref -> ProtocolPayload
status :: ProtocolPayload -> !Status
attref :: ProtocolPayload -> !Attref

-- | This request is used to ask the gateway server to execute a detach
--   call.
DetachRequest :: !Attref -> ProtocolPayload
attref :: ProtocolPayload -> !Attref
DetachReply :: !Status -> ProtocolPayload
status :: ProtocolPayload -> !Status

-- | This request is to retrieve the gateway server's mame.
NameRequest :: !Int32 -> ProtocolPayload
reserved :: ProtocolPayload -> !Int32
NameReply :: !Status -> !Length -> !CString -> ProtocolPayload
status :: ProtocolPayload -> !Status
nameLen :: ProtocolPayload -> !Length
name :: ProtocolPayload -> !CString

-- | Payload type discriminator.
data PayloadType
InterfaceRequestOp :: PayloadType
InterfaceReplyOp :: PayloadType
LoginRequestOp :: PayloadType
ChallengeResponseOp :: PayloadType
ChallengeReplyOp :: PayloadType
LoginReplyOp :: PayloadType
CreateRequestOp :: PayloadType
CreateReplyOp :: PayloadType
DestroyRequestOp :: PayloadType
DestroyReplyOp :: PayloadType
SendRequestOp :: PayloadType
SendReplyOp :: PayloadType
ReceiveRequestOp :: PayloadType
ReceiveReplyOp :: PayloadType
HuntRequestOp :: PayloadType
HuntReplyOp :: PayloadType
AttachRequestOp :: PayloadType
AttachReplyOp :: PayloadType
DetachRequestOp :: PayloadType
DetachReplyOp :: PayloadType
NameRequestOp :: PayloadType
NameReplyOp :: PayloadType

-- | Encode a value using binary serialisation to a lazy ByteString.
encode :: Binary a => a -> ByteString

-- | Make an <a>InterfaceRequest</a> message.
mkInterfaceRequest :: Version -> Flags -> Message

-- | Make an <a>InterfaceReply</a> message.
mkInterfaceReply :: Version -> Flags -> [PayloadType] -> Message

-- | Make a <a>CreateRequest</a> message.
mkCreateRequest :: String -> Message

-- | Make a <a>CreateReply</a> message.
mkCreateReply :: Pid -> Length -> Message

-- | Make a <a>DestroyRequest</a> message.
mkDestroyRequest :: Pid -> Message

-- | Make a <a>DestroyReply</a> message.
mkDestroyReply :: Message

-- | Make a <a>HuntRequest</a> message.
mkHuntRequest :: Signal -> CString -> Message

-- | Make a <a>HuntReply</a> message.
mkHuntReply :: Pid -> Message

-- | Make a <a>ReceiveRequest</a> message.
mkReceiveRequest :: Timeout -> SignalSelector -> Message

-- | Make a <a>ReceiveReply</a> message.
mkReceiveReply :: Pid -> Pid -> Signal -> Message

-- | Make a <a>SendRequest</a> message.
mkSendRequest :: Pid -> Pid -> Signal -> Message

-- | Make <a>SendReply</a> message.
mkSendReply :: Message

-- | Make <a>AttachRequest</a> message.
mkAttachRequest :: Pid -> Signal -> Message

-- | Make <a>AttachReply</a> message.
mkAttachReply :: Attref -> Message

-- | Make <a>DetachRequest</a> message.
mkDetachRequest :: Attref -> Message

-- | Make <a>DetachReply</a> message.
mkDetachReply :: Message

-- | Make <a>NameRequest</a> message.
mkNameRequest :: Message

-- | Make <a>NameReply</a> message.
mkNameReply :: String -> Message

-- | Get the header size in bytes.
headerSize :: Length

-- | Decode the header.
decodeHeader :: ByteString -> Header

-- | Decode the protocol payload.
decodeProtocolPayload :: PayloadType -> ByteString -> ProtocolPayload
instance Show PayloadType
instance Eq PayloadType
instance Show ProtocolPayload
instance Eq ProtocolPayload
instance Show Header
instance Eq Header
instance Generic Header
instance Show Message
instance Eq Message
instance Datatype D1Header
instance Constructor C1_0Header
instance Selector S1_0_0Header
instance Selector S1_0_1Header
instance Binary PayloadType
instance Binary ProtocolPayload
instance Binary Message
instance Payload ProtocolPayload
instance Binary Header


-- | Implementation of the Enea LINX Gateway protocol in Haskell. More
--   information about LINX and the LINX Gateway can be found on its
--   project page on Sourceforge:
--   <a>http://sourceforge.net/projects/linx/</a>
--   
--   <ul>
--   <li><i>LINX Gateway Documentation</i></li>
--   </ul>
--   
--   User's guide:
--   <a>http://linx.sourceforge.net/linxdoc/doc/usersguide/UsersGuide_LINX_Gateway.html</a>
--   
--   LINX protcols:
--   <a>http://linx.sourceforge.net/linxdoc/doc/linxprotocols/book-linx-protocols-html/index.html</a>
--   
--   <ul>
--   <li><i>Example application</i></li>
--   </ul>
--   
--   Bundled with this software package is an example application
--   consisting of one ping server program and one ping client program. The
--   example programs are demonstrating several aspects of the gateway API.
--   
--   The code can be browsed in the examples directory at the project's
--   GitHub: <a>https://github.com/kosmoskatten/linx-gateway</a>
--   
--   In order to run the examples a LINX Gateway server must be setup and
--   be available in your IP network. For the samples below the gateway
--   server is running at 192.168.122.8 port 21768.
--   
--   <pre>
--   cabal configure
--   cabal build
--   cabal run Ping client 192.168.122.8 21768
--   cabal run Ping 192.168.122.8 21768
--   </pre>
--   
--   The order in which the server and the client is started is not
--   important. The client is also supervising the server, so if the server
--   is terminated the client is trying to reconnect to the server again
--   once it's restarted.
--   
--   Several clients can be started.
module Network.Linx.Gateway

-- | Gateway instance.
data Gateway
Gateway :: !Handle -> !Pid -> !Length -> ![PayloadType] -> Gateway

-- | The socket handle towards the gateway server.
handle :: Gateway -> !Handle

-- | The LINX <a>Pid</a> of the gateway instance.
self :: Gateway -> !Pid

-- | The max length of a <a>Signal</a> payload the gateway server is
--   accepting.
maxSignal :: Gateway -> !Length

-- | The type of operations in the gateway protocol that the gateway server
--   is accepting.
accept :: Gateway -> ![PayloadType]

-- | Either a host name e.g., <tt>"haskell.org"</tt> or a numeric host
--   address string consisting of a dotted decimal IPv4 address or an IPv6
--   address e.g., <tt>"192.168.0.1"</tt>.
type HostName = String
data PortID :: *
Service :: String -> PortID
PortNumber :: PortNumber -> PortID
UnixSocket :: String -> PortID

-- | A signal - user lever payload data - is coded into three different
--   fields in the gateway protocol: Signal length in bytes, including
--   signal number. Signal number. Array of signal data. Even in the case
--   of <a>NoSignal</a> the binary encoding is eight bytes.
data Signal

-- | A full bodied signal with number and data.
Signal :: !SigNo -> !ByteString -> Signal
sigNo :: Signal -> !SigNo
sigData :: Signal -> !ByteString

-- | A signal data only is carrying a signal number, but no data.
NumericSignal :: !SigNo -> Signal
sigNo :: Signal -> !SigNo

-- | An <tt>empty</tt> signal.
NoSignal :: Signal

-- | Signal number descriptor.
newtype SigNo
SigNo :: Int32 -> SigNo

-- | A signal selector is used to filter which signals to expect when
--   calling receive. It can either be one of two specific filters -
--   AnySignal or Cancel - or a generic filter.
data SignalSelector

-- | Accept any kind of signal.
AnySignal :: SignalSelector

-- | Cancel the last receive.
Cancel :: SignalSelector

-- | Accept any of the specified signals. The list must not be empty.
Sel :: ![SigNo] -> SignalSelector
selection :: SignalSelector -> ![SigNo]

-- | Process identifier for a Linx process.
data Pid

-- | Timeout value.
data Timeout
Infinity :: Timeout
Timeout :: Int32 -> Timeout

-- | Create a new client instance in the gateway. The gateway is addressed
--   by a hostname and a port id.
create :: String -> HostName -> PortID -> IO Gateway

-- | Destroy a client.
destroy :: Gateway -> IO ()

-- | Ask the gateway server to execute a hunt call. If the hunted process
--   is available at the moment of the hunt its pid is returned
--   immediately.
hunt :: Gateway -> String -> Signal -> IO (Maybe Pid)

-- | Ask the gateway server to execute a receive call with the specified
--   timeout value. If no signal is received within the time the value of
--   <a>Nothing</a> is returned.
receiveWithTimeout :: Gateway -> Timeout -> SignalSelector -> IO (Maybe (Pid, Signal))

-- | Ask the gateway server to execute a receive call with infinitely long
--   waiting time.
receive :: Gateway -> SignalSelector -> IO (Pid, Signal)

-- | Ask the gateway server to execute a send_w_s call.
sendWithSender :: Gateway -> Pid -> Pid -> Signal -> IO ()

-- | Ask the gateway server to execute a send call_w_s call where the
--   sender is the pid stored in the gateway record.
sendWithSelf :: Gateway -> Pid -> Signal -> IO ()

-- | Ask the gateway server to execute an attach call.
attach :: Gateway -> Pid -> Signal -> IO Attref

-- | Ask the gateway server to execute a detach call.
detach :: Gateway -> Attref -> IO ()

-- | Ask the gateway server about its name.
askName :: Gateway -> IO String

-- | Convenience function to handle acquire and release semantics for
--   creating and destroying a gateway instance.
withGateway :: String -> HostName -> PortID -> (Gateway -> IO a) -> IO a
instance Show Gateway
instance Eq Gateway
