-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monad for observation extraction
--   
--   The library provides an Ox monad and accompanying functions which are
--   intended to simplify writing functional expressions over input
--   sentence with arbitrary type of token. Values of such functional
--   expressions can be subsequently used as observations in input data for
--   sequential classifiers.
@package monad-ox
@version 0.3.0


-- | Popular transformation functions for the <a>Text</a> observation type.
module Control.Monad.Ox.Text.Lazy

-- | Prefix of the given size or <a>Nothing</a> if the size exceeds the
--   length of the text.
prefix :: Int -> Text -> Maybe Text

-- | Suffix of the given size or <a>Nothing</a> if the size exceeds the
--   length of the text.
suffix :: Int -> Text -> Maybe Text

-- | All substrings of the given size.
substr :: Int -> Text -> [Text]

-- | Shape of the text. All lower-case characters are mapped to <tt>l</tt>,
--   upper-case characters to <tt>u</tt>, digits to <tt>d</tt> and rest of
--   characters to <tt>x</tt>.
shape :: Text -> Text

-- | Pack the text, that is remove all adjacent repetitions, for example
--   <i>aabcccdde -&gt; abcde</i>.
pack :: Text -> Text


-- | Popular transformation functions for the <a>Text</a> observation type.
module Control.Monad.Ox.Text

-- | Prefix of the given size or <a>Nothing</a> if the size exceeds the
--   length of the text.
prefix :: Int -> Text -> Maybe Text

-- | Suffix of the given size or <a>Nothing</a> if the size exceeds the
--   length of the text.
suffix :: Int -> Text -> Maybe Text

-- | All substrings of the given size.
substr :: Int -> Text -> [Text]

-- | Shape of the text. All lower-case characters are mapped to <tt>l</tt>,
--   upper-case characters to <tt>u</tt>, digits to <tt>d</tt> and rest of
--   characters to <tt>x</tt>.
shape :: Text -> Text

-- | Pack the text, that is remove all adjacent repetitions, for example
--   <i>aabcccdde -&gt; abcde</i>.
pack :: Text -> Text


-- | Popular transformation functions for the <a>String</a> observation
--   type.
module Control.Monad.Ox.String

-- | Prefix of the given size or <a>Nothing</a> if the size exceeds the
--   length of the string.
prefix :: Int -> String -> Maybe String

-- | Suffix of the given size or <a>Nothing</a> if the size exceeds the
--   length of the string.
suffix :: Int -> String -> Maybe String

-- | All substrings of the given size.
substr :: Int -> String -> [String]

-- | Shape of the string. All lower-case characters are mapped to
--   <tt>l</tt>, upper-case characters to <tt>u</tt>, digits to <tt>d</tt>
--   and rest of characters to <tt>x</tt>.
shape :: String -> String

-- | Pack the string, that is remove all adjacent repetitions, for example
--   <i>aabcccdde -&gt; abcde</i>.
pack :: String -> String


-- | The Ox monad facilitates writing functional expressions over the input
--   sentence with arbitrary type of sentence token.
module Control.Monad.Ox

-- | The Ox is a monad stack with observation type identifier handled by
--   the state monad and the resulting observation values paired with
--   identifiers printed using the writer monad.
type Ox o a = WriterT [(Id, o)] (State Id) a

-- | Observation type identifier. It consists of a list of integers, each
--   integer representing a state of the Ox monad on the particular level.
type Id = [Int]

-- | Save the observation value.
save :: Maybe o -> Ox o ()

-- | Save observation values in the writer monad of the Ox stack.
saves :: [o] -> Ox o ()

-- | Perform the Ox action only when the <tt>cond</tt> is True. It works
--   like the standard <a>when</a> function but also changes the current
--   identifier value.
when :: Bool -> Ox o a -> Ox o (Maybe a)

-- | Perform the action only when the given condition is equal to Just
--   True.
whenJT :: Maybe Bool -> Ox o a -> Ox o (Maybe a)

-- | Make all embedded observations to be indistinguishable with respect to
--   their top-most identifier components. TODO: Perhaps should set only
--   the current level, not the deeper ones.
group :: Ox o a -> Ox o a

-- | Execute the Ox monad and retrieve the saved (with the <a>save</a> and
--   <a>saves</a> functions) results.
execOx :: Ox o a -> [(Id, o)]

-- | Value of the 't -&gt; a' function with respect to the given sentence
--   and sentence position. Return Nothing if the position is out of
--   bounds.
atWith :: Vector a -> (a -> b) -> Int -> Maybe b

-- | Value of the 't -&gt; [a]' function with respect to the given sentence
--   and sentence position. Return empty list if the position is out of
--   bounds.
atsWith :: Vector a -> (a -> [b]) -> Int -> [b]
