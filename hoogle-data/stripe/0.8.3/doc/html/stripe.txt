-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell implementation of the Stripe API.
--   
--   This is an implementation of the Stripe API as it is documented at
--   https://stripe.com/docs/api
@package stripe
@version 0.8.3

module Web.Stripe.Utils

-- | Represents a 'Customer'\'s ID in the Stripe system.
newtype CustomerId
CustomerId :: Text -> CustomerId
unCustomerId :: CustomerId -> Text
data CardId
CardId :: Text -> CardId
unCardId :: CardId -> Text
newtype SubscriptionId
SubscriptionId :: Text -> SubscriptionId
unSubscriptionId :: SubscriptionId -> Text

-- | Represents an amount in cents in the Stripe system.
newtype Amount
Amount :: Int -> Amount
unAmount :: Amount -> Int

-- | A maximum number of objects that the Stripe API will return. This
--   value should be between 1 and 100, inclusive.
newtype Count
Count :: Int -> Count
unCount :: Count -> Int

-- | Represents a currency (e.g., "usd") in the Stripe system. This is a
--   3-letter ISO code.
newtype Currency
Currency :: Text -> Currency
unCurrency :: Currency -> Text

-- | Describes an object in the Stripe system.
newtype Description
Description :: Text -> Description
unDescription :: Description -> Text

-- | A positive integer that is an offset into the array of objects
--   returned by the Stripe API.
newtype Offset
Offset :: Int -> Offset
unOffset :: Offset -> Int

-- | Takes a list of key-value arguments, where the value is optional, and
--   returns a list of key-value pairs with only the supplied values.
--   
--   Essentially, this filters out all <a>Nothing</a>s and unwraps the
--   <a>Just</a>s.
--   
--   <pre>
--   &gt;&gt;&gt; optionalArgs [("k1", Just "supplied"), ("k2", Nothing)]
--   [("k1","supplied")]
--   </pre>
optionalArgs :: [(a, Maybe b)] -> [(a, b)]

-- | Convert a time in seconds (from Stripe's servers) to <a>UTCTime</a>.
--   See <a>Data.Time.Format</a> for more on working with <a>UTCTime</a>.
fromSeconds :: Integer -> UTCTime

-- | Convert a <a>UTCTime</a> back to an Integer suitable for use with
--   Stripe's API.
toSeconds :: UTCTime -> Integer
stringToByteString :: String -> ByteString
textToByteString :: Text -> ByteString
showByteString :: Show a => a -> ByteString
instance Show CustomerId
instance Eq CustomerId
instance Show CardId
instance Eq CardId
instance Show SubscriptionId
instance Eq SubscriptionId
instance Show Amount
instance Eq Amount
instance Show Count
instance Eq Count
instance Show Currency
instance Eq Currency
instance Show Description
instance Eq Description
instance Show Offset
instance Eq Offset

module Web.Stripe.Client

-- | Configuration for the <a>StripeT</a> monad transformer.
data StripeConfig
StripeConfig :: SecretKey -> FilePath -> StripeVersion -> StripeConfig
stripeSecretKey :: StripeConfig -> SecretKey
stripeCAFile :: StripeConfig -> FilePath
stripeVersion :: StripeConfig -> StripeVersion

-- | A key used when authenticating to the Stripe API.
newtype SecretKey
SecretKey :: Text -> SecretKey
unSecretKey :: SecretKey -> Text

-- | Stripe Version Represents Stripe API Versions
data StripeVersion
V20110915d :: StripeVersion

-- | "Format: 2011-09-15-d"
OtherVersion :: String -> StripeVersion

-- | This represents the possible successes that a connection to the Stripe
--   API can encounter. For specificity, a success can be represented by
--   other error codes, and so the same is true in this data type.
--   
--   Please consult the official Stripe REST API documentation on error
--   codes at <a>https://stripe.com/docs/api#errors</a> for more
--   information.
data StripeResponseCode
OK :: StripeResponseCode
Unknown :: Int -> StripeResponseCode

-- | This represents the possible failures that a connection to the Stripe
--   API can encounter.
--   
--   Please consult the official Stripe REST API documentation on error
--   codes at <a>https://stripe.com/docs/api#errors</a> for more
--   information.
data StripeFailure
BadRequest :: (Maybe StripeError) -> StripeFailure
Unauthorized :: (Maybe StripeError) -> StripeFailure
NotFound :: (Maybe StripeError) -> StripeFailure
PaymentRequired :: (Maybe StripeError) -> StripeFailure
InternalServerError :: (Maybe StripeError) -> StripeFailure
BadGateway :: (Maybe StripeError) -> StripeFailure
ServiceUnavailable :: (Maybe StripeError) -> StripeFailure
GatewayTimeout :: (Maybe StripeError) -> StripeFailure
HttpFailure :: (Maybe Text) -> StripeFailure
OtherFailure :: (Maybe Text) -> StripeFailure

-- | Describes a <a>StripeFailure</a> in more detail, categorizing the
--   error and providing additional information about it. At minimum, this
--   is a message, and for <a>CardError</a>, this is a message, even more
--   precise code (<a>StripeErrorCode</a>), and potentially a paramter that
--   helps suggest where an error message should be displayed.
--   
--   In case the appropriate error could not be determined from the
--   specified type, <tt>UnkownError</tt> will be returned with the
--   supplied type and message.
--   
--   Please consult the official Stripe REST API documentation on error
--   codes at <a>https://stripe.com/docs/api#errors</a> for more
--   information.
data StripeError
InvalidRequestError :: Text -> StripeError
APIError :: Text -> StripeError
CardError :: Text -> StripeErrorCode -> (Maybe Text) -> StripeError
UnknownError :: Text -> Text -> StripeError

-- | Attempts to describe a <a>CardError</a> in more detail, classifying in
--   what specific way it failed.
--   
--   Please consult the official Stripe REST API documentation on error
--   codes at <a>https://stripe.com/docs/api#errors</a> for more
--   information.
data StripeErrorCode
InvalidNumber :: StripeErrorCode
IncorrectNumber :: StripeErrorCode
InvalidExpiryMonth :: StripeErrorCode
InvalidExpiryYear :: StripeErrorCode
InvalidCVC :: StripeErrorCode
ExpiredCard :: StripeErrorCode
InvalidAmount :: StripeErrorCode
IncorrectCVC :: StripeErrorCode
CardDeclined :: StripeErrorCode
Missing :: StripeErrorCode
DuplicateTransaction :: StripeErrorCode
ProcessingError :: StripeErrorCode

-- | Could not be matched; text gives error name.
UnknownErrorCode :: Text -> StripeErrorCode

-- | Represents a request to the Stripe API, providing the fields necessary
--   to specify a Stripe resource. More generally, <a>baseSReq</a> will be
--   desired as it provides sensible defaults that can be overriden as
--   needed.
data StripeRequest
StripeRequest :: StdMethod -> [Text] -> [(ByteString, ByteString)] -> [(String, String)] -> StripeRequest
sMethod :: StripeRequest -> StdMethod
sDestination :: StripeRequest -> [Text]
sData :: StripeRequest -> [(ByteString, ByteString)]
sQString :: StripeRequest -> [(String, String)]

-- | A convenience specialization of the <a>StripeT</a> monad transformer
--   in which the underlying monad is IO.
type Stripe a = StripeT IO a

-- | Defines the monad transformer under which all Stripe REST API resource
--   calls take place.
newtype StripeT m a
StripeT :: StateT StripeConfig (ErrorT StripeFailure m) a -> StripeT m a

-- | Provides a default <a>StripeConfig</a>. Essentially, this inserts the
--   <a>SecretKey</a>, but leaves other fields blank. This is especially
--   relavent due to the current CA file check bug.
defaultConfig :: SecretKey -> StripeConfig

-- | Runs the <a>StripeT</a> monad transformer with a given
--   <a>StripeConfig</a>. This will handle all of the authorization dance
--   steps necessary to utilize the Stripe API.
--   
--   Its use is demonstrated in other functions, such as <a>query</a>.
runStripeT :: MonadIO m => StripeConfig -> StripeT m a -> m (Either StripeFailure a)

-- | The basic <a>StripeRequest</a> environment upon which all other Stripe
--   API requests will be built. Standard usage involves overriding one or
--   more of the fields. E.g., for a request to
--   "https:/<i>api.stripe.com</i>v1/coupons", one would have:
--   
--   <pre>
--   baseSReq { sDestinaton = ["charges"] }
--   </pre>
baseSReq :: StripeRequest

-- | Queries the Stripe API and attempts to parse the results into a data
--   type that is an instance of <tt>JSON</tt>. This is primarily for
--   internal use by other Stripe submodules, which supply the request
--   values accordingly. However, it can also be used directly. E.g.,
--   
--   <pre>
--   let conf = StripeConfig "key" "CA file"
--   
--   runStripeT conf $
--      query baseSReq { sDestination = ["charges"] }
--   </pre>
query :: (MonadIO m, FromJSON a) => StripeRequest -> StripeT m (StripeResponseCode, a)

-- | same as <a>query</a> but pulls out the value inside a data field and
--   returns that
queryData :: (MonadIO m, FromJSON a) => StripeRequest -> StripeT m (StripeResponseCode, a)

-- | Acts just like <a>query</a>, but on success, throws away the response.
--   Errors contacting the Stripe API will still be reported.
query_ :: MonadIO m => StripeRequest -> StripeT m ()

-- | HTTP standard method (as defined by RFC 2616, and PATCH which is
--   defined by RFC 5789).
data StdMethod :: *
GET :: StdMethod
POST :: StdMethod
HEAD :: StdMethod
PUT :: StdMethod
DELETE :: StdMethod
TRACE :: StdMethod
CONNECT :: StdMethod
OPTIONS :: StdMethod
PATCH :: StdMethod
instance Show SecretKey
instance Show StripeResponseCode
instance Eq StripeResponseCode
instance Show StripeErrorCode
instance Eq StripeErrorCode
instance Show StripeError
instance Eq StripeError
instance Show StripeFailure
instance Eq StripeFailure
instance Show StripeRequest
instance Show StripeConfig
instance Functor m => Functor (StripeT m)
instance Monad m => Monad (StripeT m)
instance MonadIO m => MonadIO (StripeT m)
instance Monad m => MonadPlus (StripeT m)
instance Monad m => MonadError StripeFailure (StripeT m)
instance Monad m => MonadState StripeConfig (StripeT m)
instance (Monad m, Functor m) => Alternative (StripeT m)
instance (Monad m, Functor m) => Applicative (StripeT m)
instance Error StripeFailure
instance FromJSON StripeError
instance MonadTrans StripeT
instance Show StripeVersion

module Web.Stripe.Plan

-- | Represents a plan in the Stripe system.
data Plan
Plan :: PlanId -> Amount -> PlanInterval -> Text -> Currency -> Maybe PlanTrialDays -> Plan
planId :: Plan -> PlanId
planAmount :: Plan -> Amount
planInterval :: Plan -> PlanInterval
planName :: Plan -> Text
planCurrency :: Plan -> Currency
planTrialDays :: Plan -> Maybe PlanTrialDays
amount :: Plan -> Int

-- | Represents the billing cycle for a plan. If an interval identifier is
--   not known, <a>UnknownPlan</a> is used to carry the original identifier
--   supplied by Stripe.
data PlanInterval
Monthly :: PlanInterval
Yearly :: PlanInterval
UnknownPlan :: Text -> PlanInterval

-- | Represents the identifier for a given <a>Plan</a> in the Stripe
--   system.
newtype PlanId
PlanId :: Text -> PlanId
unPlanId :: PlanId -> Text

-- | Represents the length of the trial period. That is, the number of days
--   before the customer is billed.
newtype PlanTrialDays
PlanTrialDays :: Int -> PlanTrialDays
unPlanTrialDays :: PlanTrialDays -> Int

-- | Creates a <a>Plan</a> in the Stripe system.
createPlan :: MonadIO m => Plan -> StripeT m ()

-- | Retrieves a specific <a>Plan</a> based on its <a>PlanId</a>.
getPlan :: MonadIO m => PlanId -> StripeT m Plan

-- | Retrieves a list of all <a>Plan</a>s. The query can optionally be
--   refined to a specific:
--   
--   <ul>
--   <li>number of charges, via <a>Count</a> and</li>
--   <li>page of results, via <a>Offset</a>.</li>
--   </ul>
getPlans :: MonadIO m => Maybe Count -> Maybe Offset -> StripeT m [Plan]

-- | Deletes a <a>Plan</a> if it exists. If it does not, an
--   <tt>InvalidRequestError</tt> will be thrown indicating this.
delPlan :: MonadIO m => Plan -> StripeT m Bool

-- | Deletes a <a>Plan</a>, identified by its <a>PlanId</a>, if it exists.
--   If it does not, an <tt>InvalidRequestError</tt> will be thrown
--   indicating this.
delPlanById :: MonadIO m => PlanId -> StripeT m Bool

-- | Represents an amount in cents in the Stripe system.
newtype Amount
Amount :: Int -> Amount
unAmount :: Amount -> Int

-- | A maximum number of objects that the Stripe API will return. This
--   value should be between 1 and 100, inclusive.
newtype Count
Count :: Int -> Count
unCount :: Count -> Int

-- | Represents a currency (e.g., "usd") in the Stripe system. This is a
--   3-letter ISO code.
newtype Currency
Currency :: Text -> Currency
unCurrency :: Currency -> Text

-- | A positive integer that is an offset into the array of objects
--   returned by the Stripe API.
newtype Offset
Offset :: Int -> Offset
unOffset :: Offset -> Int

-- | Configuration for the <a>StripeT</a> monad transformer.
data StripeConfig
StripeConfig :: SecretKey -> FilePath -> StripeVersion -> StripeConfig
stripeSecretKey :: StripeConfig -> SecretKey
stripeCAFile :: StripeConfig -> FilePath
stripeVersion :: StripeConfig -> StripeVersion

-- | Defines the monad transformer under which all Stripe REST API resource
--   calls take place.
newtype StripeT m a
StripeT :: StateT StripeConfig (ErrorT StripeFailure m) a -> StripeT m a

-- | Runs the <a>StripeT</a> monad transformer with a given
--   <a>StripeConfig</a>. This will handle all of the authorization dance
--   steps necessary to utilize the Stripe API.
--   
--   Its use is demonstrated in other functions, such as <a>query</a>.
runStripeT :: MonadIO m => StripeConfig -> StripeT m a -> m (Either StripeFailure a)
instance Show PlanInterval
instance Eq PlanInterval
instance Show PlanId
instance Eq PlanId
instance Show PlanTrialDays
instance Eq PlanTrialDays
instance Show Plan
instance FromJSON Plan

module Web.Stripe.Coupon

-- | Represents a coupon in the Stripe system.
data Coupon
Coupon :: Maybe CpnId -> CpnDuration -> CpnPercentOff -> Coupon
cpnId :: Coupon -> Maybe CpnId
cpnDuration :: Coupon -> CpnDuration
cpnPercentOff :: Coupon -> CpnPercentOff

-- | Represents the identifier for a given <a>Coupon</a> in the Stripe
--   system.
newtype CpnId
CpnId :: Text -> CpnId
unCpnId :: CpnId -> Text

-- | Represents the duration of a coupon. If an interval identifier is not
--   known, <a>UnknownDuration</a> is used to carry the original identifier
--   supplied by Stripe.
data CpnDuration
Once :: CpnDuration

-- | Field specifies how long (months) discount is in effect
Repeating :: Int -> CpnDuration
Forever :: CpnDuration
UnknownDuration :: Text -> CpnDuration

-- | Represents the percent off that is applied by a coupon. This must be
--   between 1 and 100.
newtype CpnPercentOff
CpnPercentOff :: Int -> CpnPercentOff
unCpnPercentOff :: CpnPercentOff -> Int

-- | A positive number representing the maximum number of times that a
--   coupon can be redeemed.
newtype CpnMaxRedeems
CpnMaxRedeems :: Int -> CpnMaxRedeems
unCpnMaxRedeems :: CpnMaxRedeems -> Int

-- | UTC timestamp specifying the last time at which the coupon can be
--   redeemed.
newtype CpnRedeemBy
CpnRedeemBy :: Int -> CpnRedeemBy
unCpnRedeemBy :: CpnRedeemBy -> Int
applyCoupon :: Maybe Coupon -> Plan -> Int

-- | Creates a <a>Coupon</a> in the Stripe system.
createCoupon :: MonadIO m => Coupon -> Maybe CpnMaxRedeems -> Maybe CpnRedeemBy -> StripeT m ()

-- | Retrieves a specific <a>Coupon</a> based on its <a>CpnId</a>.
getCoupon :: MonadIO m => CpnId -> StripeT m Coupon

-- | Retrieves a list of all <a>Coupon</a>s. The query can optionally be
--   refined to a specific:
--   
--   <ul>
--   <li>number of charges, via <a>Count</a> and</li>
--   <li>page of results, via <a>Offset</a>.</li>
--   </ul>
getCoupons :: MonadIO m => Maybe Count -> Maybe Offset -> StripeT m [Coupon]

-- | Deletes a <a>Coupon</a> if it exists. If it does not, an
--   <tt>InvalidRequestError</tt> will be thrown indicating this.
delCoupon :: MonadIO m => Coupon -> StripeT m Bool

-- | Deletes a <a>Coupon</a>, identified by its <a>CpnId</a>, if it exists.
--   If it does not, an <tt>InvalidRequestError</tt> will be thrown
--   indicating this.
delCouponById :: MonadIO m => CpnId -> StripeT m Bool

-- | A maximum number of objects that the Stripe API will return. This
--   value should be between 1 and 100, inclusive.
newtype Count
Count :: Int -> Count
unCount :: Count -> Int

-- | A positive integer that is an offset into the array of objects
--   returned by the Stripe API.
newtype Offset
Offset :: Int -> Offset
unOffset :: Offset -> Int

-- | Configuration for the <a>StripeT</a> monad transformer.
data StripeConfig
StripeConfig :: SecretKey -> FilePath -> StripeVersion -> StripeConfig
stripeSecretKey :: StripeConfig -> SecretKey
stripeCAFile :: StripeConfig -> FilePath
stripeVersion :: StripeConfig -> StripeVersion

-- | Defines the monad transformer under which all Stripe REST API resource
--   calls take place.
newtype StripeT m a
StripeT :: StateT StripeConfig (ErrorT StripeFailure m) a -> StripeT m a

-- | Runs the <a>StripeT</a> monad transformer with a given
--   <a>StripeConfig</a>. This will handle all of the authorization dance
--   steps necessary to utilize the Stripe API.
--   
--   Its use is demonstrated in other functions, such as <a>query</a>.
runStripeT :: MonadIO m => StripeConfig -> StripeT m a -> m (Either StripeFailure a)
instance Show CpnId
instance Eq CpnId
instance Show CpnDuration
instance Eq CpnDuration
instance Show CpnPercentOff
instance Eq CpnPercentOff
instance Show Coupon
instance Show CpnMaxRedeems
instance Eq CpnMaxRedeems
instance Show CpnRedeemBy
instance Eq CpnRedeemBy
instance FromJSON Coupon

module Web.Stripe.Discount
data Discount
Discount :: CustomerId -> Coupon -> Maybe SubscriptionId -> Maybe UTCTime -> Maybe UTCTime -> Discount
disCustomerId :: Discount -> CustomerId
disCoupon :: Discount -> Coupon
disSubscriptionId :: Discount -> Maybe SubscriptionId
disStart :: Discount -> Maybe UTCTime
disEnd :: Discount -> Maybe UTCTime
instance Show Discount
instance FromJSON Discount

module Web.Stripe.Card

-- | Represents a credit card in the Stripe system.
data Card
Card :: Text -> Text -> Maybe Text -> Text -> Int -> Int -> Text -> CardChecks -> Card
cardId :: Card -> Text
cardType :: Card -> Text
cardCountry :: Card -> Maybe Text
cardLastFour :: Card -> Text
cardExpMonth :: Card -> Int
cardExpYear :: Card -> Int
cardFingerprint :: Card -> Text
cardChecks :: Card -> CardChecks

-- | Represents a credit car (with full details) that is used as input to
--   the Stripe API.
data RequestCard
RequestCard :: Text -> Int -> Int -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> RequestCard
rCardNumber :: RequestCard -> Text
rCardExpMonth :: RequestCard -> Int
rCardExpYear :: RequestCard -> Int

-- | Highly recommended to supply
rCardCVC :: RequestCard -> Maybe Text
rCardFullName :: RequestCard -> Maybe Text
rCardAddrLineOne :: RequestCard -> Maybe Text
rCardAddrLineTwo :: RequestCard -> Maybe Text
rCardCity :: RequestCard -> Maybe Text
rCardAddrZip :: RequestCard -> Maybe Text
rCardAddrState :: RequestCard -> Maybe Text
rCardAddrCountry :: RequestCard -> Maybe Text
data CardChecks
CardChecks :: CardCheckResult -> CardCheckResult -> CardCheckResult -> CardChecks
checkCVC :: CardChecks -> CardCheckResult
checkAddrLineOne :: CardChecks -> CardCheckResult
checkZip :: CardChecks -> CardCheckResult
data CardCheckResult
NotProvided :: CardCheckResult
NotChecked :: CardCheckResult
Passed :: CardCheckResult
Failed :: CardCheckResult

-- | Turns a <a>RequestCard</a> into a list of key-value pairs that can be
--   submitted to the Stripe API in a query.
rCardKV :: RequestCard -> [(ByteString, ByteString)]
deleteCard :: MonadIO m => CustomerId -> CardId -> StripeT m Bool
instance Show RequestCard
instance Show CardCheckResult
instance Eq CardCheckResult
instance Show CardChecks
instance Show Card
instance FromJSON CardCheckResult
instance FromJSON Card

module Web.Stripe.Token

-- | Represents a token in the Stripe system.
data Token
Token :: TokenId -> Bool -> Bool -> UTCTime -> Card -> Token
tokId :: Token -> TokenId
tokLive :: Token -> Bool
tokUsed :: Token -> Bool
tokCreated :: Token -> UTCTime
tokCard :: Token -> Card

-- | Represents the identifier for a given <a>Token</a> in the Stripe
--   system.
newtype TokenId
TokenId :: Text -> TokenId
unTokenId :: TokenId -> Text

-- | Creates a <a>Token</a> in the Stripe system.
createToken :: MonadIO m => RequestCard -> StripeT m Token

-- | Retrieves a specific <a>Token</a> based on its <a>Token</a>.
getToken :: MonadIO m => TokenId -> StripeT m Token

-- | Convenience function to create a <a>StripeRequest</a> specific to
--   tokens.
tokRq :: [Text] -> StripeRequest

-- | This is the simplest representation of UTC. It consists of the day
--   number, and a time offset from midnight. Note that if a day has a leap
--   second added to it, it will have 86401 seconds.
data UTCTime :: *
UTCTime :: Day -> DiffTime -> UTCTime

-- | the day
utctDay :: UTCTime -> Day

-- | the time from midnight, 0 &lt;= t &lt; 86401s (because of
--   leap-seconds)
utctDayTime :: UTCTime -> DiffTime

-- | Represents an amount in cents in the Stripe system.
newtype Amount
Amount :: Int -> Amount
unAmount :: Amount -> Int

-- | Represents a credit card in the Stripe system.
data Card
Card :: Text -> Text -> Maybe Text -> Text -> Int -> Int -> Text -> CardChecks -> Card
cardId :: Card -> Text
cardType :: Card -> Text
cardCountry :: Card -> Maybe Text
cardLastFour :: Card -> Text
cardExpMonth :: Card -> Int
cardExpYear :: Card -> Int
cardFingerprint :: Card -> Text
cardChecks :: Card -> CardChecks

-- | Represents a currency (e.g., "usd") in the Stripe system. This is a
--   3-letter ISO code.
newtype Currency
Currency :: Text -> Currency
unCurrency :: Currency -> Text

-- | Configuration for the <a>StripeT</a> monad transformer.
data StripeConfig
StripeConfig :: SecretKey -> FilePath -> StripeVersion -> StripeConfig
stripeSecretKey :: StripeConfig -> SecretKey
stripeCAFile :: StripeConfig -> FilePath
stripeVersion :: StripeConfig -> StripeVersion

-- | Defines the monad transformer under which all Stripe REST API resource
--   calls take place.
newtype StripeT m a
StripeT :: StateT StripeConfig (ErrorT StripeFailure m) a -> StripeT m a

-- | Runs the <a>StripeT</a> monad transformer with a given
--   <a>StripeConfig</a>. This will handle all of the authorization dance
--   steps necessary to utilize the Stripe API.
--   
--   Its use is demonstrated in other functions, such as <a>query</a>.
runStripeT :: MonadIO m => StripeConfig -> StripeT m a -> m (Either StripeFailure a)
instance Show TokenId
instance Eq TokenId
instance Show Token
instance FromJSON Token

module Web.Stripe.Customer

-- | Represents a customer in the Stripe system.
data Customer
Customer :: CustomerId -> Maybe Email -> Maybe Description -> Bool -> UTCTime -> Maybe Card -> Maybe Discount -> Customer
custId :: Customer -> CustomerId
custEmail :: Customer -> Maybe Email
custDescription :: Customer -> Maybe Description
custLive :: Customer -> Bool
custCreated :: Customer -> UTCTime
custActiveCard :: Customer -> Maybe Card
custDiscount :: Customer -> Maybe Discount

-- | Represents a 'Customer'\'s ID in the Stripe system.
newtype CustomerId
CustomerId :: Text -> CustomerId
unCustomerId :: CustomerId -> Text

-- | Represents a standard email address.
newtype Email
Email :: Text -> Email
unEmail :: Email -> Text

-- | Create a new <a>Customer</a> in the Stripe system.
createCustomer :: MonadIO m => Maybe RequestCard -> Maybe CpnId -> Maybe Email -> Maybe Description -> Maybe PlanId -> Maybe Int -> StripeT m Customer

-- | Create a new <a>Customer</a> in the Stripe system using a TokenId.
createCustomerByTokenId :: MonadIO m => Maybe TokenId -> Maybe CpnId -> Maybe Email -> Maybe Description -> Maybe PlanId -> Maybe Int -> StripeT m Customer

-- | Update an existing <a>Customer</a> in the Stripe system.
updateCustomer :: MonadIO m => Customer -> Maybe RequestCard -> Maybe CpnId -> Maybe Email -> Maybe Description -> StripeT m Customer

-- | Update an existing <a>Customer</a>, identified by <a>CustomerId</a>,
--   in the Stripe system.
updateCustomerById :: MonadIO m => CustomerId -> Maybe RequestCard -> Maybe CpnId -> Maybe Email -> Maybe Description -> StripeT m Customer

-- | Update an existing <a>Customer</a> in the Stripe system.
updateCustomerByTokenId :: MonadIO m => Customer -> Maybe TokenId -> Maybe CpnId -> Maybe Email -> Maybe Description -> StripeT m Customer

-- | Update an existing <a>Customer</a>, identified by <a>CustomerId</a>,
--   in the Stripe system.
updateCustomerByIdByTokenId :: MonadIO m => CustomerId -> Maybe TokenId -> Maybe CpnId -> Maybe Email -> Maybe Description -> StripeT m Customer

-- | Retrieves a specific <a>Customer</a> based on its <a>CustomerId</a>.
getCustomer :: MonadIO m => CustomerId -> StripeT m Customer

-- | Retrieves a list of all <a>Customer</a>s. The query can optionally be
--   refined to a specific:
--   
--   <ul>
--   <li>number of charges, via <a>Count</a> and</li>
--   <li>page of results, via <a>Offset</a>.</li>
--   </ul>
getCustomers :: MonadIO m => Maybe Count -> Maybe Offset -> StripeT m [Customer]

-- | Deletes a <a>Customer</a> if it exists. If it does not, an
--   <tt>InvalidRequestError</tt> will be thrown indicating this.
delCustomer :: MonadIO m => Customer -> StripeT m Bool

-- | Deletes a <a>Customer</a>, identified by its <a>CustomerId</a>, if it
--   exists. If it does not, an <tt>InvalidRequestError</tt> will be thrown
--   indicating this.
delCustomerById :: MonadIO m => CustomerId -> StripeT m Bool

-- | A maximum number of objects that the Stripe API will return. This
--   value should be between 1 and 100, inclusive.
newtype Count
Count :: Int -> Count
unCount :: Count -> Int

-- | A positive integer that is an offset into the array of objects
--   returned by the Stripe API.
newtype Offset
Offset :: Int -> Offset
unOffset :: Offset -> Int

-- | Describes an object in the Stripe system.
newtype Description
Description :: Text -> Description
unDescription :: Description -> Text

-- | This is the simplest representation of UTC. It consists of the day
--   number, and a time offset from midnight. Note that if a day has a leap
--   second added to it, it will have 86401 seconds.
data UTCTime :: *
UTCTime :: Day -> DiffTime -> UTCTime

-- | the day
utctDay :: UTCTime -> Day

-- | the time from midnight, 0 &lt;= t &lt; 86401s (because of
--   leap-seconds)
utctDayTime :: UTCTime -> DiffTime

-- | Configuration for the <a>StripeT</a> monad transformer.
data StripeConfig
StripeConfig :: SecretKey -> FilePath -> StripeVersion -> StripeConfig
stripeSecretKey :: StripeConfig -> SecretKey
stripeCAFile :: StripeConfig -> FilePath
stripeVersion :: StripeConfig -> StripeVersion

-- | Defines the monad transformer under which all Stripe REST API resource
--   calls take place.
newtype StripeT m a
StripeT :: StateT StripeConfig (ErrorT StripeFailure m) a -> StripeT m a

-- | Runs the <a>StripeT</a> monad transformer with a given
--   <a>StripeConfig</a>. This will handle all of the authorization dance
--   steps necessary to utilize the Stripe API.
--   
--   Its use is demonstrated in other functions, such as <a>query</a>.
runStripeT :: MonadIO m => StripeConfig -> StripeT m a -> m (Either StripeFailure a)
instance Show Email
instance Eq Email
instance Show Customer
instance FromJSON Customer

module Web.Stripe.Charge

-- | Represents a charge in the Stripe system.
data Charge
Charge :: ChargeId -> UTCTime -> Maybe Description -> Currency -> Amount -> Bool -> Bool -> Bool -> Card -> Charge
chargeId :: Charge -> ChargeId
chargeCreated :: Charge -> UTCTime
chargeDescription :: Charge -> Maybe Description
chargeCurrency :: Charge -> Currency
chargeAmount :: Charge -> Amount
chargeLive :: Charge -> Bool
chargePaid :: Charge -> Bool
chargeRefunded :: Charge -> Bool
chargeCard :: Charge -> Card

-- | Represents the identifier for a given <a>Charge</a> in the Stripe
--   system.
newtype ChargeId
ChargeId :: Text -> ChargeId
unChargeId :: ChargeId -> Text

-- | Submit a <a>Charge</a> to the Stripe API using an already constructed
--   <a>Token</a>.
chargeToken :: MonadIO m => Token -> Amount -> Currency -> Maybe Description -> Maybe Amount -> StripeT m Charge

-- | Submit a <a>Charge</a> to the Stripe API using a <a>TokenId</a>.
chargeTokenById :: MonadIO m => TokenId -> Amount -> Currency -> Maybe Description -> Maybe Amount -> StripeT m Charge

-- | Submit a <a>Charge</a> to the Stripe for a specific <a>Customer</a>
--   that already has payment details on file.
chargeCustomer :: MonadIO m => Customer -> Amount -> Currency -> Maybe Description -> Maybe Amount -> StripeT m Charge

-- | Submit a <a>Charge</a> to the Stripe for a specific <a>Customer</a>,
--   identified by its <a>CustomerId</a>, that already has payment details
--   on file.
chargeCustomerById :: MonadIO m => CustomerId -> Amount -> Currency -> Maybe Description -> Maybe Amount -> StripeT m Charge

-- | Submit a <a>Charge</a> to the Stripe API using a <a>RequestCard</a> to
--   describe payment details.
chargeRCard :: MonadIO m => RequestCard -> Amount -> Currency -> Maybe Description -> Maybe Amount -> StripeT m Charge

-- | Retrieve a <a>Charge</a> from the Stripe API, identified by
--   <a>ChargeId</a>.
getCharge :: MonadIO m => ChargeId -> StripeT m Charge

-- | Retrieve a list of <a>Charge</a>s from the Stripe API. The query can
--   optionally be refined to a specific:
--   
--   <ul>
--   <li>number of charges, via <a>Count</a>,</li>
--   <li>page of results, via <a>Offset</a>, and</li>
--   <li><a>Customer</a>.</li>
--   </ul>
getCharges :: MonadIO m => Maybe CustomerId -> Maybe Count -> Maybe Offset -> StripeT m [Charge]

-- | Requests that Stripe issue a partial refund to a specific
--   <a>Charge</a> for a particular <a>Amount</a>.
partialRefund :: MonadIO m => Charge -> Amount -> StripeT m Charge

-- | Requests that Stripe issue a partial refund to a specific
--   <a>Charge</a>, identified by <a>ChargeId</a>, for a particular
--   <a>Amount</a>.
partialRefundById :: MonadIO m => ChargeId -> Amount -> StripeT m Charge

-- | Requests that Stripe issue a full refund to a specific <a>Charge</a>.
fullRefund :: MonadIO m => Charge -> StripeT m Charge

-- | Requests that Stripe issue a full refund to a specific <a>Charge</a>,
--   identified by <a>ChargeId</a>.
fullRefundById :: MonadIO m => ChargeId -> StripeT m Charge

-- | Represents an amount in cents in the Stripe system.
newtype Amount
Amount :: Int -> Amount
unAmount :: Amount -> Int

-- | A maximum number of objects that the Stripe API will return. This
--   value should be between 1 and 100, inclusive.
newtype Count
Count :: Int -> Count
unCount :: Count -> Int

-- | Represents a currency (e.g., "usd") in the Stripe system. This is a
--   3-letter ISO code.
newtype Currency
Currency :: Text -> Currency
unCurrency :: Currency -> Text

-- | Describes an object in the Stripe system.
newtype Description
Description :: Text -> Description
unDescription :: Description -> Text

-- | A positive integer that is an offset into the array of objects
--   returned by the Stripe API.
newtype Offset
Offset :: Int -> Offset
unOffset :: Offset -> Int

-- | This is the simplest representation of UTC. It consists of the day
--   number, and a time offset from midnight. Note that if a day has a leap
--   second added to it, it will have 86401 seconds.
data UTCTime :: *
UTCTime :: Day -> DiffTime -> UTCTime

-- | the day
utctDay :: UTCTime -> Day

-- | the time from midnight, 0 &lt;= t &lt; 86401s (because of
--   leap-seconds)
utctDayTime :: UTCTime -> DiffTime

-- | Configuration for the <a>StripeT</a> monad transformer.
data StripeConfig
StripeConfig :: SecretKey -> FilePath -> StripeVersion -> StripeConfig
stripeSecretKey :: StripeConfig -> SecretKey
stripeCAFile :: StripeConfig -> FilePath
stripeVersion :: StripeConfig -> StripeVersion

-- | Defines the monad transformer under which all Stripe REST API resource
--   calls take place.
newtype StripeT m a
StripeT :: StateT StripeConfig (ErrorT StripeFailure m) a -> StripeT m a

-- | Runs the <a>StripeT</a> monad transformer with a given
--   <a>StripeConfig</a>. This will handle all of the authorization dance
--   steps necessary to utilize the Stripe API.
--   
--   Its use is demonstrated in other functions, such as <a>query</a>.
runStripeT :: MonadIO m => StripeConfig -> StripeT m a -> m (Either StripeFailure a)
instance Show ChargeId
instance Eq ChargeId
instance Show Charge
instance FromJSON Charge

module Web.Stripe.Connect
authURL :: Maybe Scope -> Maybe Text -> Maybe Landing -> ClientId -> URL
getAccessToken :: SecretKey -> AuthCode -> IO (Maybe StripeConnectTokens)
createCustomerToken :: MonadIO m => CustomerId -> StripeT m Token

-- | A key used when authenticating to the Stripe API.
newtype SecretKey
SecretKey :: Text -> SecretKey
unSecretKey :: SecretKey -> Text
data StripeConnectTokens
StripeConnectTokens :: AccessToken -> RefreshToken -> UserId -> PublishableKey -> StripeConnectTokens
scAccessToken :: StripeConnectTokens -> AccessToken
scRefreshToken :: StripeConnectTokens -> RefreshToken
scUserId :: StripeConnectTokens -> UserId
scPublishableKey :: StripeConnectTokens -> PublishableKey
data Scope
ReadOnly :: Scope
ReadWrite :: Scope
data Landing
Login :: Landing
Register :: Landing
type AuthCode = ByteString
type AccessToken = Text
type PublishableKey = Text
type RefreshToken = Text
type UserId = Text
type ClientId = ByteString
type URL = ByteString
instance Typeable StripeConnectException
instance Show StripeConnectException
instance Eq StripeConnectException
instance Eq Scope
instance Eq Landing
instance Show StripeConnectTokens
instance Exception StripeConnectException
instance FromJSON StripeConnectTokens
instance Show Landing
instance Show Scope

module Web.Stripe.Subscription

-- | Represents a subscription in the Stripe API.
data Subscription
Subscription :: SubscriptionId -> CustomerId -> Plan -> SubStatus -> UTCTime -> Maybe UTCTime -> Maybe UTCTime -> UTCTime -> UTCTime -> Maybe Discount -> Subscription
subId :: Subscription -> SubscriptionId
subCustomerId :: Subscription -> CustomerId
subPlan :: Subscription -> Plan
subStatus :: Subscription -> SubStatus
subStart :: Subscription -> UTCTime
subTrialStart :: Subscription -> Maybe UTCTime
subTrialEnd :: Subscription -> Maybe UTCTime

-- | Current period start
subPeriodStart :: Subscription -> UTCTime

-- | Current period end
subPeriodEnd :: Subscription -> UTCTime
subDiscount :: Subscription -> Maybe Discount
newtype SubscriptionId
SubscriptionId :: Text -> SubscriptionId
unSubscriptionId :: SubscriptionId -> Text

-- | Describes the various stages that a
data SubStatus
Trialing :: SubStatus
Active :: SubStatus
PastDue :: SubStatus
Unpaid :: SubStatus
Canceled :: SubStatus
UnknownStatus :: Text -> SubStatus

-- | A boolean flag that determines whether or not to prorate switching
--   plans during a billing cycle.
newtype SubProrate
SubProrate :: Bool -> SubProrate
unSubProrate :: SubProrate -> Bool

-- | UTC integer timestamp representing the end of the trial period that
--   the customer receives before being charged for the first time.
newtype SubTrialEnd
SubTrialEnd :: Int -> SubTrialEnd
unSubTrialEnd :: SubTrialEnd -> Int

-- | A boolean flag that determines whether or not the cancellation of the
--   <a>Subscription</a> should be delayed until the end of the current
--   period.
newtype SubAtPeriodEnd
SubAtPeriodEnd :: Bool -> SubAtPeriodEnd
unSubAtPeriodEnd :: SubAtPeriodEnd -> Bool
data SubscriptionList
SubscriptionList :: Int -> [Subscription] -> SubscriptionList
subListCount :: SubscriptionList -> Int
subListData :: SubscriptionList -> [Subscription]

-- | Create a new <a>Subscription</a>. Limitations: does not yet support
--   passing a card, quantity, or application fee
createSub :: MonadIO m => CustomerId -> PlanId -> Maybe CpnId -> Maybe SubTrialEnd -> StripeT m Subscription
getSubscription :: MonadIO m => CustomerId -> SubscriptionId -> StripeT m Subscription
getSubscriptions :: MonadIO m => CustomerId -> StripeT m SubscriptionList

-- | Update the subscription associated with a <tt>Customer</tt>,
--   identified by <a>CustomerId</a>, in the Stripe system.
--   
--   If <a>SubTrialEnd</a> is provided, this will override the default
--   trial period of the plan to which the customer is subscribed.
updateSubRCard :: MonadIO m => RequestCard -> CustomerId -> PlanId -> Maybe CpnId -> Maybe SubProrate -> Maybe SubTrialEnd -> StripeT m Subscription

-- | Behaves precisely like <a>updateSubRCard</a>, but uses a
--   <tt>Token</tt>, identified by <a>TokenId</a>, rather than a
--   <a>RequestCard</a>.
updateSubToken :: MonadIO m => TokenId -> CustomerId -> PlanId -> Maybe CpnId -> Maybe SubProrate -> Maybe SubTrialEnd -> StripeT m Subscription

-- | Update a <a>Subscription</a>
updateSubscription :: MonadIO m => CustomerId -> PlanId -> Maybe CpnId -> Maybe SubProrate -> Maybe SubTrialEnd -> StripeT m Subscription

-- | Internal convenience function to update a <a>Subscription</a>. Try
--   using <a>updateSubscription</a>, <a>updateSubToken</a>, or
--   <a>updateSubRCard</a>
updateSub :: MonadIO m => [(ByteString, ByteString)] -> CustomerId -> PlanId -> Maybe CpnId -> Maybe SubProrate -> Maybe SubTrialEnd -> StripeT m Subscription

-- | Cancels the <a>Subscription</a> associated with a <tt>Customer</tt>,
--   identified by <a>CustomerId</a>, in the Stripe system.
cancelSub :: MonadIO m => CustomerId -> Maybe SubAtPeriodEnd -> StripeT m Subscription

-- | This is the simplest representation of UTC. It consists of the day
--   number, and a time offset from midnight. Note that if a day has a leap
--   second added to it, it will have 86401 seconds.
data UTCTime :: *
UTCTime :: Day -> DiffTime -> UTCTime

-- | the day
utctDay :: UTCTime -> Day

-- | the time from midnight, 0 &lt;= t &lt; 86401s (because of
--   leap-seconds)
utctDayTime :: UTCTime -> DiffTime

-- | Configuration for the <a>StripeT</a> monad transformer.
data StripeConfig
StripeConfig :: SecretKey -> FilePath -> StripeVersion -> StripeConfig
stripeSecretKey :: StripeConfig -> SecretKey
stripeCAFile :: StripeConfig -> FilePath
stripeVersion :: StripeConfig -> StripeVersion

-- | Defines the monad transformer under which all Stripe REST API resource
--   calls take place.
newtype StripeT m a
StripeT :: StateT StripeConfig (ErrorT StripeFailure m) a -> StripeT m a

-- | Runs the <a>StripeT</a> monad transformer with a given
--   <a>StripeConfig</a>. This will handle all of the authorization dance
--   steps necessary to utilize the Stripe API.
--   
--   Its use is demonstrated in other functions, such as <a>query</a>.
runStripeT :: MonadIO m => StripeConfig -> StripeT m a -> m (Either StripeFailure a)
instance Show SubStatus
instance Eq SubStatus
instance Show Subscription
instance Show SubProrate
instance Eq SubProrate
instance Show SubTrialEnd
instance Eq SubTrialEnd
instance Show SubAtPeriodEnd
instance Eq SubAtPeriodEnd
instance FromJSON SubscriptionList
instance FromJSON Subscription
