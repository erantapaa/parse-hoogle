-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An EKG backend to send statistics to Carbon (part of Graphite monitoring tools)
--   
@package ekg-carbon
@version 1.0.4


-- | This module lets you periodically flush metrics to a Graphite Carbon
--   backend. Example usage:
--   
--   <pre>
--   main = do
--     store &lt;- newStore
--     forkCarbon defaultCarbonOptions store
--   </pre>
--   
--   You probably want to include some of the predefined metrics defined in
--   the <tt>ekg-core</tt> package, by calling e.g. the
--   <a>registerGcMetrics</a> function defined in that package.
module System.Remote.Monitoring.Carbon

-- | Options to control how to connect to the Carbon server and how often
--   to flush metrics. The flush interval should match the shortest
--   retention rate of the matching retention periods, or you risk
--   over-riding previous samples.
data CarbonOptions
CarbonOptions :: !Text -> !Int -> !Int -> !Text -> !Text -> CarbonOptions

-- | The hostname or IP address of the server running Carbon.
host :: CarbonOptions -> !Text

-- | Server port of the TCP line receiver interface.
port :: CarbonOptions -> !Int

-- | The amount of time between sampling EKG metrics and pushing to Carbon.
flushInterval :: CarbonOptions -> !Int

-- | Prefix to add to all metric names.
prefix :: CarbonOptions -> !Text

-- | Suffix to add to all metric names. This is particularly useful for
--   sending per host stats by settings this value to: <tt>takeWhile (/=
--   '.') &lt;$&gt; getHostName</tt>, using <tt>getHostName</tt> from the
--   <tt>Network.BSD</tt> module in the network package.
suffix :: CarbonOptions -> !Text

-- | Defaults:
--   
--   <ul>
--   <li><tt>host</tt> = <tt>"127.0.0.1"</tt></li>
--   <li><tt>port</tt> = <tt>2003</tt></li>
--   <li><tt>flushInterval</tt> = <tt>1000</tt></li>
--   <li>Empty <a>prefix</a> and <a>suffix</a>.</li>
--   </ul>
defaultCarbonOptions :: CarbonOptions

-- | Create a thread that periodically flushes the metrics in <a>Store</a>
--   to Carbon. If the thread flushing statistics throws an exception (for
--   example, the network connection is lost), this exception will be
--   thrown up to the thread that called <a>forkCarbon</a>. For more
--   control, see <a>forkCarbonRestart</a>.
forkCarbon :: CarbonOptions -> Store -> IO ThreadId

-- | Create a thread that periodically flushes the metrics in <a>Store</a>
--   to Carbon. If the thread flushing statistics throws an exception (for
--   example, the network connection is lost), the callback function will
--   be invoked with the exception that was thrown, and an <a>IO</a>
--   computation to restart the handler.
--   
--   For example, you can use <a>forkCarbonRestart</a> to log failures and
--   restart logging:
--   
--   <pre>
--   <a>forkCarbonRestart</a> opts
--                       store
--                       (ex restart -&gt; do hPutStrLn stderr ("ekg-carbon: " ++ show ex)
--                                          restart)
--   </pre>
forkCarbonRestart :: CarbonOptions -> Store -> (SomeException -> IO () -> IO ()) -> IO ThreadId
instance Eq CarbonOptions
instance Show CarbonOptions
