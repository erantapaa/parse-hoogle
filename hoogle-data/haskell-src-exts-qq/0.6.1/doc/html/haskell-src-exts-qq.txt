-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A quasiquoter for haskell-src-exts.
--   
--   Allows one to write programs that generate Haskell programs much more
--   concisely and legibly. This package supports:
--   
--   <ul>
--   <li>Antiquotations, denoted by stealing the splice syntax of Template
--   Haskell, for example <tt>[hs| $x ++ $(Hs.strE <a>bar</a>) |]</tt>.
--   Splices may not nested.</li>
--   <li>Antiquoting pattern variables in patterns, using double
--   parentheses. For instance:</li>
--   </ul>
--   
--   <pre>
--   let x = Hs.name "n" in [hs| \ ((x)) -&gt; $(Hs.Var (Hs.UnQual x)) + 1 |]
--   </pre>
--   
--   <ul>
--   <li>Antiquoting bound names. Names that are antiquoted appear
--   surrounded by double underscores. For instance:</li>
--   </ul>
--   
--   <pre>
--   let f = "incr"
--       fE = Hs.Var $ Hs.UnQual $ Hs.name f
--   in [hs| let __f__ x = x + 1 in $fE 10 |]
--   </pre>
--   
--   We need three different syntaxes for antiquotations, because we do not
--   extend the haskell-src-exts parser in any way and the Template Haskell
--   splicing syntax is only available in expression contexts.
@package haskell-src-exts-qq
@version 0.6.1


-- | This module defines quasiquoters for haskell-src-exts expressions and
--   declarations.
--   
--   Antiquotations steal the splice syntax of Template Haskell, so for
--   example example <tt>x</tt> appears antiquoted in <tt>[$hs| $x ++
--   $(Hs.strE "bar") |]</tt>. Expressions appearing inside parenthesized
--   splices are limited to concrete syntax expressible by Template
--   Haskell's <a>Exp</a> data type.
--   
--   Names in patterns can also be antiquoted, using double parentheses.
--   For instance:
--   
--   <pre>
--   let x = Hs.name "n" in [hs| \ ((x)) -&gt; $(Hs.Var (Hs.UnQual x)) + 1 |]
--   </pre>
--   
--   Alternatively, one can use the double underscore syntax, useful when
--   antiquoting a function name as in the following:
--   
--   <pre>
--   let f = "incr"
--       fE = Hs.Var $ Hs.UnQual $ Hs.name f
--   in [hs| let __f__ x = x + 1 in $fE 10 |]
--   </pre>
--   
--   In a pattern context, antiquotations use the same syntax.
module Language.Haskell.Exts.QQ

-- | A quasiquoter for expressions. All Haskell extensions known by
--   haskell-src-exts are activated by default.
hs :: QuasiQuoter

-- | A quasiquoter for top-level declarations.
dec :: QuasiQuoter

-- | A quasiquoter for types. All Haskell extensions known by
--   haskell-src-exts are activated by default.
ty :: QuasiQuoter

-- | Rather than importing the above quasiquoters, one can create custom
--   quasiquoters with a customized <tt>ParseMode</tt> using this function.
--   
--   <pre>
--   hs = hsWithMode mode
--   dec = decWithMode mode
--   </pre>
hsWithMode :: ParseMode -> QuasiQuoter
decWithMode :: ParseMode -> QuasiQuoter
tyWithMode :: ParseMode -> QuasiQuoter
