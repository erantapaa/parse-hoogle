-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Debugging by observing in place
--   
@package hood
@version 0.2.1

module Debug.Hood.Observe

-- | <a>observe</a> observes data structures in flight.
--   
--   An example of use is <tt> map (+1) . observe "intermeduate" . map (+2)
--   </tt>
--   
--   In this example, we observe the value that flows from the producer
--   <tt>map (+2)</tt> to the consumer <tt>map (+1)</tt>.
--   
--   <a>observe</a> can also observe functions as well a structural values.
observe :: Observable a => String -> a -> a
newtype Observer
O :: (forall a. Observable a => String -> a -> a) -> Observer
type Observing a = a -> a
class Observable a where observers label arg = defaultObservers label arg
observer :: Observable a => a -> Parent -> a
observers :: Observable a => String -> (Observer -> a) -> a

-- | The main entry point; run some IO code, and debug inside it.
--   
--   An example of using this debugger is
--   
--   <pre>
--   runO (print [ observe "+1" (+1) x | x &lt;- observe "xs" [1..3]])
--   </pre>
--   
--   <pre>
--   [2,3,4]
--    -- +1
--     {  1  -&gt; 2
--     }
--    -- +1
--     {  2  -&gt; 3
--     }
--    -- +1
--     {  3  -&gt; 4
--     }
--    -- xs
--     1 : 2 : 3 : []
--   </pre>
--   
--   Which says, the return is <tt>[2,3,4]</tt>, there were <tt>3</tt>
--   calls to +1 (showing arguments and results), and <tt>xs</tt>, which
--   was the list <tt>1 : 2 : 3 : []</tt>.
runO :: IO a -> IO ()

-- | print a value, with debugging
printO :: Show a => a -> IO ()

-- | print a string, with debugging
putStrO :: String -> IO ()
(<<) :: Observable a => ObserverM (a -> b) -> a -> ObserverM b
thunk :: Observable a => a -> ObserverM a
send :: String -> ObserverM a -> Parent -> a
observeBase :: Show a => a -> Parent -> a
observeOpaque :: String -> a -> Parent -> a

-- | run some code and return the CDS structure (for when you want to write
--   your own debugger).
debugO :: IO a -> IO [CDS]
data CDS
CDSNamed :: String -> CDSSet -> CDS
CDSCons :: Int -> String -> [CDSSet] -> CDS
CDSFun :: Int -> CDSSet -> CDSSet -> CDS
CDSEntered :: Int -> CDS
instance Show Parent
instance Show Change
instance Show Event
instance Show CDS
instance Eq CDS
instance Ord CDS
instance Eq Output
instance Ord Output
instance Eq DOC
instance Show DOC
instance Show Doc
instance Eq Doc
instance Monad ObserverM
instance Applicative ObserverM
instance Functor ObserverM
instance Observable Dynamic
instance Observable SomeException
instance (Observable a, Observable b) => Observable (a -> b)
instance Observable a => Observable (IO a)
instance (Ix a, Observable a, Observable b) => Observable (Array a b)
instance (Observable a, Observable b) => Observable (Either a b)
instance Observable a => Observable (Maybe a)
instance Observable a => Observable [a]
instance (Observable a, Observable b, Observable c, Observable d, Observable e) => Observable (a, b, c, d, e)
instance (Observable a, Observable b, Observable c, Observable d) => Observable (a, b, c, d)
instance (Observable a, Observable b, Observable c) => Observable (a, b, c)
instance (Observable a, Observable b) => Observable (a, b)
instance Observable ()
instance Observable Char
instance Observable Double
instance Observable Float
instance Observable Integer
instance Observable Bool
instance Observable Int
