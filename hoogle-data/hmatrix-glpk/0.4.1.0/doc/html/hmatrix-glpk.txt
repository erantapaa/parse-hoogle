-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Linear Programming based on GLPK
--   
@package hmatrix-glpk
@version 0.4.1.0


-- | This module provides an interface to the standard simplex algorithm.
--   
--   For example, the following LP problem
--   
--   maximize 4 x_1 - 3 x_2 + 2 x_3 subject to
--   
--   2 x_1 + x_2 &lt;= 10
--   
--   x_2 + 5 x_3 &lt;= 20
--   
--   and
--   
--   x_i &gt;= 0
--   
--   can be solved as follows:
--   
--   <pre>
--   import Numeric.LinearProgramming
--   
--   prob = Maximize [4, -3, 2]
--   
--   constr1 = Sparse [ [2#1, 1#2] :&lt;=: 10
--                    , [1#2, 5#3] :&lt;=: 20
--                    ]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; simplex prob constr1 []
--   Optimal (28.0,[5.0,0.0,4.0])
--   </pre>
--   
--   The coefficients of the constraint matrix can also be given in dense
--   format:
--   
--   <pre>
--   constr2 = Dense [ [2,1,0] :&lt;=: 10
--                   , [0,1,5] :&lt;=: 20
--                   ]
--   </pre>
--   
--   Note that when using sparse constraints, coefficients cannot appear
--   more than once in each constraint. You can alternatively use General
--   which will automatically sum any duplicate coefficients when
--   necessary.
--   
--   <pre>
--   constr3 = General [ [1#1, 1#1, 1#2] :&lt;=: 10
--                     , [1#2, 5#3] :&lt;=: 20
--                     ]
--   </pre>
--   
--   By default all variables are bounded as <tt>x_i &gt;= 0</tt>, but this
--   can be changed:
--   
--   <pre>
--   &gt;&gt;&gt; simplex prob constr2 [ 2 :&gt;=: 1, 3 :&amp;: (2,7)]
--   Optimal (22.6,[4.5,1.0,3.8])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; simplex prob constr2 [Free 2]
--   Unbounded
--   </pre>
--   
--   The given bound for a variable completely replaces the default, so
--   <tt>0 &lt;= x_i &lt;= b</tt> must be explicitly given as <tt>i :&amp;:
--   (0,b)</tt>. Multiple bounds for a variable are not allowed, instead of
--   <tt>[i :&gt;=: a, i:&lt;=: b]</tt> use <tt>i :&amp;: (a,b)</tt>.
module Numeric.LinearProgramming
simplex :: Optimization -> Constraints -> Bounds -> Solution

-- | Simplex method with exact internal arithmetic. See glp_exact in glpk
--   documentation for more information.
exact :: Optimization -> Constraints -> Bounds -> Solution

-- | Convert a system of General constraints to one with unique
--   coefficients.
sparseOfGeneral :: Constraints -> Constraints
data Optimization
Maximize :: [Double] -> Optimization
Minimize :: [Double] -> Optimization
data Constraints
Dense :: [Bound [Double]] -> Constraints
Sparse :: [Bound [(Double, Int)]] -> Constraints
General :: [Bound [(Double, Int)]] -> Constraints
type Bounds = [Bound Int]
data Bound x
(:<=:) :: x -> Double -> Bound x
(:>=:) :: x -> Double -> Bound x
(:&:) :: x -> (Double, Double) -> Bound x
(:==:) :: x -> Double -> Bound x
Free :: x -> Bound x

-- | Coefficient of a variable for a sparse and general representations of
--   constraints.
(#) :: Double -> Int -> (Double, Int)
data Solution
Undefined :: Solution
Feasible :: (Double, [Double]) -> Solution
Infeasible :: (Double, [Double]) -> Solution
NoFeasible :: Solution
Optimal :: (Double, [Double]) -> Solution
Unbounded :: Solution
instance Show x => Show (Bound x)
instance Show Solution


-- | Linear system solvers in the L_1 norm using linear programming.
module Numeric.LinearProgramming.L1

-- | Solution in the L_1 norm, with L_1 regularization, of a linear system
--   <tt>Ax=b</tt>.
--   
--   <pre>
--   argmin_x  λ||x||_1 + ||Ax-b||_1
--   </pre>
l1Solve :: Double -> Matrix Double -> Vector Double -> Vector Double

-- | Solution in the L_1 norm, with L_1 regularization, of a system of
--   linear inequalities <tt>Ax&gt;=b</tt>.
--   
--   <pre>
--   argmin_x  λ||x||_1 + ||step(b-Ax)||_1
--   </pre>
l1SolveGT :: Double -> Matrix Double -> Vector Double -> Vector Double

-- | L_1 solution of overconstrained system Ax=b.
--   
--   <pre>
--   argmin_x ||Ax-b||_1
--   </pre>
l1SolveO :: Matrix Double -> Vector Double -> Vector Double

-- | L_inf solution of overconstrained system Ax=b.
--   
--   <pre>
--   argmin_x ||Ax-b||_inf
--   </pre>
lInfSolveO :: Matrix Double -> Vector Double -> Vector Double

-- | L1 solution of underconstrained linear system Ax=b.
--   
--   <pre>
--   argmin_x ||x||_1 such that Ax=b
--   </pre>
l1SolveU :: Matrix Double -> Vector Double -> Vector Double
