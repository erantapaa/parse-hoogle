-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A better error monad transformer
--   
--   This package provides a better error monad transformer for the
--   <tt>transformers</tt> package.
@package transformers-abort
@version 0.5.0.1

module Control.Monad.Trans.Finish
type Finish f α = FinishT f Identity α
runFinish :: Finish f α -> Either f α
runFinish' :: Finish α α -> α
newtype FinishT f μ α
FinishT :: μ (Either f α) -> FinishT f μ α
runFinishT :: FinishT f μ α -> μ (Either f α)
runFinishT' :: Monad μ => FinishT α μ α -> μ α
finish :: Monad μ => f -> FinishT f μ α
instance MonadBaseControl η μ => MonadBaseControl η (FinishT e μ)
instance MonadTransControl (FinishT f)
instance MonadTrans (FinishT f)
instance BindTrans (FinishT f)
instance MonadBase η μ => MonadBase η (FinishT f μ)
instance MonadIO μ => MonadIO (FinishT f μ)
instance MonadFix μ => MonadFix (FinishT f μ)
instance Monad μ => Monad (FinishT f μ)
instance (Functor μ, Monad μ) => Bind (FinishT f μ)
instance (Functor μ, Monad μ) => Applicative (FinishT f μ)
instance (Functor μ, Monad μ) => Apply (FinishT f μ)
instance Functor μ => Functor (FinishT f μ)
instance Monad μ => Pointed (FinishT f μ)

module Control.Monad.Trans.Abort
type Abort e α = AbortT e Identity α
runAbort :: Abort e α -> Either e α
newtype AbortT e μ α
AbortT :: μ (Either e α) -> AbortT e μ α
runAbortT :: AbortT e μ α -> μ (Either e α)
abort :: Monad μ => e -> AbortT e μ α
recover :: Monad μ => AbortT e μ α -> (e -> AbortT e μ α) -> AbortT e μ α
instance MonadBaseControl η μ => MonadBaseControl η (AbortT e μ)
instance MonadTransControl (AbortT e)
instance MonadTrans (AbortT e)
instance BindTrans (AbortT e)
instance MonadBase η μ => MonadBase η (AbortT e μ)
instance MonadIO μ => MonadIO (AbortT e μ)
instance MonadFix μ => MonadFix (AbortT e μ)
instance (Monad μ, Default e) => MonadPlus (AbortT e μ)
instance Monad μ => Monad (AbortT e μ)
instance (Functor μ, Monad μ) => Bind (AbortT e μ)
instance (Functor μ, Monad μ, Default e) => Alternative (AbortT e μ)
instance (Functor μ, Monad μ) => Applicative (AbortT e μ)
instance (Functor μ, Monad μ) => Apply (AbortT e μ)
instance (Functor μ, Monad μ, Default e) => Plus (AbortT e μ)
instance (Functor μ, Monad μ) => Alt (AbortT e μ)
instance Functor μ => Functor (AbortT e μ)
instance Monad μ => Pointed (AbortT e μ)
