-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Flexible records with named fields.
--   
--   Flexible records with named fields.
--   
--   <ul>
--   <li><i><tt>v0.1</tt></i> Initial (not published on cabal).</li>
--   <li><i><tt>v0.2</tt></i> <tt>record</tt> allows for default values
--   now.</li>
--   <li><i><tt>v0.2.1</tt></i> Requires <tt>names-0.2.1</tt> now.</li>
--   <li><i><tt>v0.2.2</tt></i> TH <tt>record</tt> definitions allow for
--   more types to be used in the definition.</li>
--   <li><i><tt>v0.2.3</tt></i> Cabal package tidied up and basic
--   documentation added (also fixed a bug regarding definition of default
--   values).</li>
--   <li><i><tt>v0.3</tt></i> Records can now extend other records.</li>
--   <li><i><tt>v0.3.1</tt></i> Added sample files to cabal package,
--   requirements bumped for names-v0.3</li>
--   <li><i><tt>v0.3.2</tt></i> Added <tt>new</tt>.</li>
--   <li><i><tt>v0.3.3</tt></i> Pushed requirements for
--   <tt>names-0.3.1</tt>. Updated documentation and samples.</li>
--   <li><i><tt>v0.4</tt></i> Records can now be serialized by means of the
--   <tt>binary</tt> package. Added <tt>upd</tt> function.</li>
--   <li><i><tt>v0.5</tt></i> Added <tt>record'</tt>.</li>
--   </ul>
@package named-records
@version 0.5


-- | Flexible records with named fields.
--   
--   Named records allow you to define und use records with labeled fields.
--   These records are first class objects. Record fields are labeled by
--   names, which can basically be any type. However, the names package
--   provides global name types and some syntactic sugar to use them.
--   
--   Here is a complete walk-through, with Template Haskell syntactic
--   sugar.
--   
--   This is how a typical example preamble looks like:
--   
--   <pre>
--   import Data.NamedRecord
--   </pre>
--   
--   In order to use names you need to declare them first (see the
--   <tt>names</tt> package for further details):
--   
--   <pre>
--   name "firstName"
--   name "lastName"
--   </pre>
--   
--   These are two records <tt>Person</tt> and <tt>User</tt>:
--   
--   <pre>
--   record "Person"
--       `has` "firstName" := ''String
--       `has` "lastName"  := ''String
--   
--   record "User"
--       `has` "firstName" := ''String
--       `has` "lastName"  := ''String
--       `has` "loginName" := ''String
--   </pre>
--   
--   Note that these declarations create constructor functions
--   <tt>newPerson</tt> and <tt>newUser</tt>, as well as type synonyms
--   <tt>Person</tt> and <tt>User</tt> (use <tt>-ddump-splices</tt> to see
--   what has been generated).
--   
--   Here are two instances of these recors:
--   
--   <pre>
--   julian = newPerson
--      `set` firstName := "Julian"
--      `set` lastName  := "Fleischer"
--   
--   alexander = newUser
--      `set` firstName := "Alexander"
--      `set` lastName  := "Carnicero"
--      `set` loginName := "alexander.carnicero"
--   </pre>
--   
--   We can now create a <tt>displayName</tt> function like the following:
--   
--   <pre>
--   displayName obj =
--       (obj `get` firstName) ++ " " ++
--       (obj `get` lastName)
--   </pre>
--   
--   Note that this function will accept any record that has a
--   <tt>firstName</tt> and a <tt>lastName</tt> field of type
--   <tt>String</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; displayName julian
--   Julian Fleischer
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; displayName alexander
--   Alexander Carnicero
--   </pre>
--   
--   As mentioned above, records are first class citizens. That means you
--   can create them anywhere:
--   
--   <pre>
--   &gt;&gt;&gt; displayName (firstName := "John" :+ lastName := "Doe")
--   John Doe
--   </pre>
--   
--   It is also possible to declare default values:
--   
--   <pre>
--   name "serverName"
--   name "port"
--   
--   record "ServerConfig"
--       `has` "serverName" := ''String := "localhost"
--       `has` "port"       := ''Int := (4711 :: Int)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; newServerConfig
--   serverName := "localhost" :+ port := 4711
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; newServerConfig `set` serverName := "example.org"
--   serverName := "example.org" :+ port := 4711
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; newServerConfig `get` port
--   4711
--   </pre>
--   
--   Complex expressions and types need to be quoted using <tt>[e| expr
--   |]</tt> and <tt>[t| type |]</tt> like so:
--   
--   <pre>
--   record "Server"
--       `has` "requestHandler" := [t| Request -&gt; Response |]
--                              := [e| \x -&gt; answer x |]
--       `has` "config" := ''Config := [e| newConfig |]
--   </pre>
--   
--   It is furthermore possible to extend existing records (but due to
--   stage restrictions in GHCs implementation of Template Haskell, two
--   records of which one extends the other can not be contained in the
--   same module):
--   
--   <pre>
--   module Sample2 where
--   
--   import Data.NamedRecord
--   import Data.Word
--   
--   record "Account"
--       `has` "id"        := ''Word64
--   
--       `has` "loginName" := ''String
--       `has` "password"  := ''String
--   
--   record "Person"
--       `has` "id"        := ''Word64
--   
--       `has` "firstName" := ''String
--       `has` "lastName"  := ''String
--   </pre>
--   
--   <pre>
--   module Sample where
--   
--   import Data.NamedRecord
--   import Data.Word
--   
--   import Sample2
--   
--   record "User"
--       `extends` __Person
--       `extends` __Account
--   
--       `has` "id"           := ''Word64
--       `has` "emailAddress" := ''String
--   </pre>
module Data.NamedRecord
class Property o n v | o n -> v
get :: Property o n v => o -> n -> v
set :: Property o n v => o -> n := v -> o
upd :: Property o n v => o -> n := (v -> v) -> o
class New o
new :: New o => o
add :: b -> a -> a :+ b
data (:=) a b
(:=) :: a -> b -> := a b
data (:+) a b
(:+) :: a -> b -> :+ a b
record :: String -> Record
record' :: String -> Record
extends :: RecordExtends a => Record -> a -> Record
has :: RecordTemplate a b c => a -> b -> c
name :: String -> Q [Dec]
nameT :: String -> Q Type
nameV :: String -> Q Exp
names :: Names' a => a
instance [overlap ok] (Show a, Show b) => Show (a := b)
instance [overlap ok] (Show a, Show b) => Show (a :+ b)
instance [overlap ok] Show n => FieldNames (n := ns)
instance [overlap ok] (Show n, FieldNames r) => FieldNames ((n := ns) :+ r)
instance [overlap ok] RecordExtends [(String, (Type, Exp))]
instance [overlap ok] RecordTemplate Record [(String, Q Type, Maybe (Q Exp))] (Q [Dec])
instance [overlap ok] Field v => RecordTemplate Record (String := v) (Q [Dec])
instance [overlap ok] Field v => RecordTemplate (String := v) [(String, Q Type, Maybe (Q Exp))] [(String, Q Type, Maybe (Q Exp))]
instance [overlap ok] (Field v, Field w) => RecordTemplate (String := v) (String := w) [(String, Q Type, Maybe (Q Exp))]
instance [overlap ok] (Data a, Typeable a) => Field a
instance [overlap ok] Field (Q Type)
instance [overlap ok] Field Name
instance [overlap ok] ToExp e => Field (Name := e)
instance [overlap ok] ToExp e => Field (Q Type := e)
instance [overlap ok] Lift a => ToExp a
instance [overlap ok] ToExp (Q Exp)
instance [overlap ok] (New a, New b) => New (a :+ b)
instance [overlap ok] New (a := b)
instance [overlap ok] (Binary v, Binary b) => Binary (v :+ b)
instance [overlap ok] Binary v => Binary (n := v)
instance [overlap ok] Property b n v => Property (a :+ b) n v
instance [overlap ok] Property ((n := v) :+ b) n v
instance [overlap ok] Property (n := v) n v
