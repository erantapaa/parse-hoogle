-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Packed, strict nibble arrays with a list interface (ByteString for nibbles)
--   
--   Data.NibbleString holds an array of Nibbles (4-bit values), and
--   provides an interface similar to that in Data.ByteString. Although
--   similar to Bytestring, there are obvious differences. The "length" of
--   a nibblestring will be twice that of bytestring, unpacking a
--   nibblestring will result in two items per byte, etc. Data.NibbleString
--   is intended to be imported qualified.
@package nibblestring
@version 0.0.3


-- | <a>NibbleString</a> is the "<tt>ByteString</tt>" of nibbles (4 bit
--   values). It is intended to be used in the same way that
--   <tt>ByteString</tt> is used, although, currently, only a subset of the
--   functions have been implemented.
--   
--   Internally, a <a>NibbleString</a> stores data similarly to
--   <tt>ByteString</tt>, however, as per design:
--   
--   <ul>
--   <li>Each byte of data in a <a>NibbleString</a> contributes 2 to the
--   length.</li>
--   <li>When unpacked, each byte of data in a <a>NibbleString</a> creates
--   2 <a>Nibble</a> items.</li>
--   <li>Unlike a <tt>ByteString</tt>, a <a>NibbleString</a> can hold an
--   odd number of Nibbles.</li>
--   </ul>
--   
--   For the most part, <a>NibbleString</a> is a convenience wrapper around
--   <tt>ByteString</tt>
module Data.NibbleString

-- | Nibbles are stored as the low four bits of a Word8.
--   
--   Nothing prevents storing 1s in the upper four bits, but the functions
--   here will (do their best to) ignore this data, or complain when it is
--   set.
type Nibble = Word8

-- | This is the basic <a>NibbleString</a> data type.
--   
--   A <a>NibbleString</a> is just a <tt>ByteString</tt> internally, but
--   with a spot to store the extra Nibble for odd length strings.
data NibbleString
EvenNibbleString :: ByteString -> NibbleString
OddNibbleString :: Nibble -> ByteString -> NibbleString

-- | <i>O(1)</i> Returns the <a>NibbleString</a> of length 0.
empty :: NibbleString

-- | <i>O(1)</i> Creates a <a>NibbleString</a> of length 1 using the given
--   <a>Nibble</a>.
singleton :: Nibble -> NibbleString

-- | <i>O(1)</i> Returns <a>True</a> if the <a>NibbleString</a> has size 0.
null :: NibbleString -> Bool

-- | <i>O(1)</i> Returns the number of Nibbles stored in the
--   <a>NibbleString</a>.
--   
--   The value returned will be double that stored in an identical
--   <tt>ByteString</tt>.
length :: NibbleString -> Int

-- | <i>O(n)</i> Convert a [<a>Nibble</a>] into a <a>NibbleString</a>.
pack :: [Nibble] -> NibbleString

-- | <i>O(n)</i> Convert a <a>NibbleString</a> into a [<a>Nibble</a>].
unpack :: NibbleString -> [Nibble]

-- | <i>O(1)</i> Convert one byte to a list of 2 Nibbles.
--   
--   This can be useful in converting lists of bytes to a
--   <a>NibbleString</a>.
--   
--   <pre>
--   nibbleString = pack $ byte2Nibbles =&lt;&lt; listOfBytes
--   </pre>
byte2Nibbles :: Word8 -> [Nibble]

-- | <i>O(n)</i> Returns <a>True</a> if the first <a>NibbleString</a> is a
--   prefix of the second.
isPrefixOf :: NibbleString -> NibbleString -> Bool

-- | <i>O(1)</i> Returns the first <a>Nibble</a> in a <a>NibbleString</a>.
head :: NibbleString -> Nibble

-- | <i>O(1)</i> Returns the <a>NibbleString</a> remaining after removing
--   the head Nibble.
tail :: NibbleString -> NibbleString

-- | <i>O(n)</i> <tt>cons n s</tt> returns a new <a>NibbleString</a> by
--   prepending n to the given <a>NibbleString</a>.
--   
--   For $s$ of even length, the operation occurs in <i>O(1)</i>, however
--   for odd length, the underlying bytearray needs to be copied.
cons :: Nibble -> NibbleString -> NibbleString

-- | <i>O(n)</i> <tt>take n</tt> returns a new <a>NibbleString</a> by
--   dropping the first n Nibbles from the given <a>NibbleString</a>.
--   
--   Note- This works similarly to the ByteString version of take, although
--   it runs at (worst case) in O(n). The reason for this, is, because if
--   the even-odd nibbles are misaligned after the take, the whole array
--   needs to be copied to shift things over correctly.
take :: Int -> NibbleString -> NibbleString

-- | <i>O(1)</i> <tt>drop n</tt> returns a new <a>NibbleString</a> by
--   dropping the first n Nibbles from the given <a>NibbleString</a>.
drop :: Int -> NibbleString -> NibbleString

-- | <i>O(n)</i> Creates a new <a>NibbleString</a> by appending one to
--   another.
append :: NibbleString -> NibbleString -> NibbleString
instance Show NibbleString
instance Eq NibbleString
instance Ord NibbleString
instance IsString NibbleString
instance Pretty NibbleString
