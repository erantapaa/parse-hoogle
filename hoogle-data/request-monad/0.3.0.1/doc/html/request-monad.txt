-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A transformer for generic requests
--   
@package request-monad
@version 0.3.0.1


-- | <ul>
--   <li><i>Computation type:</i> Compuations that send requests and handle
--   responses</li>
--   <li><i>Binding strategy:</i> Response callbacks are composed with the
--   binding function</li>
--   <li><i>Useful for:</i> Implementation-agnostic requests (i.e. making
--   real requests versus mocking), adding middlewares.</li>
--   <li><i>Example type:</i> <tt><a>Request</a> String String a</tt></li>
--   </ul>
--   
--   The Request monad
module Control.Monad.Request.Class

-- | This type class generalizes monadic requests.
--   
--   Parameters:
--   
--   <ul>
--   <li><tt>r</tt> - The type of request</li>
--   <li><tt>r'</tt> - The type of response</li>
--   <li><tt>m</tt> - The monad through which the requests are sent</li>
--   </ul>
class Monad m => MonadRequest r r' m | m -> r r'
send :: MonadRequest r r' m => r -> m r'
instance (Monoid w, MonadRequest r r' m) => MonadRequest r r' (WriterT w m)
instance (Monoid w, MonadRequest r r' m) => MonadRequest r r' (WriterT w m)
instance MonadRequest r r' m => MonadRequest r r' (StateT x m)
instance MonadRequest r r' m => MonadRequest r r' (StateT x m)
instance MonadRequest r r' m => MonadRequest r r' (ReaderT x m)
instance (Monoid w, MonadRequest r r' m) => MonadRequest r r' (RWST x w s m)
instance (Monoid w, MonadRequest r r' m) => MonadRequest r r' (RWST x w s m)
instance MonadRequest r r' m => MonadRequest r r' (MaybeT m)
instance MonadRequest r r' m => MonadRequest r r' (ListT m)
instance MonadRequest r r' m => MonadRequest r r' (ExceptT e m)
instance (Error e, MonadRequest r r' m) => MonadRequest r r' (ErrorT e m)
instance MonadRequest r r' m => MonadRequest r r' (ContT x m)
instance MonadRequest r r' m => MonadRequest r r' (IdentityT m)


-- | <ul>
--   <li><i>Computation type:</i> Compuations that send requests and handle
--   responses</li>
--   <li><i>Binding strategy:</i> Response callbacks are composed with the
--   binding function</li>
--   <li><i>Useful for:</i> Implementation-agnostic requests (i.e. making
--   real requests versus mocking), adding middlewares.</li>
--   <li><i>Example type:</i> <tt><a>Request</a> String String a</tt></li>
--   </ul>
--   
--   The Request monad
module Control.Monad.Request.Lazy

-- | This type class generalizes monadic requests.
--   
--   Parameters:
--   
--   <ul>
--   <li><tt>r</tt> - The type of request</li>
--   <li><tt>r'</tt> - The type of response</li>
--   <li><tt>m</tt> - The monad through which the requests are sent</li>
--   </ul>
class Monad m => MonadRequest r r' m | m -> r r'
send :: MonadRequest r r' m => r -> m r'

-- | A Request monad, parameterized by the request type, <tt>r</tt>, and
--   response type, <tt>r'</tt>. together.
type Request r r' = RequestT r r' Identity

-- | Turn a request and response callback into a monadic computation.
request :: r -> (r' -> a) -> Request r r' a

-- | Evaluate a <tt><a>Request</a> r r' a</tt> action.
runRequest :: Request r r' a -> (r -> r') -> a

-- | Given a <tt>x -&gt; r</tt>, transform a computation that sends
--   requests of type <tt>x</tt> into one that sends requests of type
--   <tt>r</tt>.
mapRequest :: (x -> r) -> Request x r' a -> Request r r' a

-- | Given a mapping from <tt>r' -&gt; x</tt>, transform a computation
--   handles responses of type <tt>x</tt> to one that handles responses of
--   type <tt>r'</tt>.
mapResponse :: (r' -> x) -> Request r x a -> Request r r' a

-- | A request monad, parameterized by the request type, <tt>r</tt>,
--   response type, <tt>r'</tt>, and inner monad, <tt>m</tt>.
type RequestT r r' = FreeT (RequestF r r')

-- | This function takes a request and monadic response handler to produce
--   a <tt><a>RequestT</a> r r' m a</tt>.
requestT :: Monad m => r -> (r' -> RequestT r r' m a) -> RequestT r r' m a

-- | Given a <tt><a>RequestT</a> r r' m a</tt> and a mapping from requests
--   to responses, return a monadic computation which produces <tt>a</tt>.
runRequestT :: Monad m => RequestT r r' m a -> (r -> m r') -> m a

-- | Turn a computation that requests <tt>x</tt> into a computation that
--   requests <tt>r</tt>.
mapRequestT :: Monad m => (x -> RequestT r r' m r) -> RequestT x r' m a -> RequestT r r' m a

-- | Turn a computation that handles <tt>x</tt> into a computation that
--   handles <tt>r'</tt>.
mapResponseT :: Monad m => (r' -> RequestT r r' m x) -> RequestT r x m a -> RequestT r r' m a
instance Functor (RequestF r r')
instance Monad m => MonadRequest r r' (RequestT r r' m)


-- | <ul>
--   <li><i>Computation type:</i> Compuations that send requests and handle
--   responses</li>
--   <li><i>Binding strategy:</i> Response callbacks are composed with the
--   binding function</li>
--   <li><i>Useful for:</i> Implementation-agnostic requests (i.e. making
--   real requests versus mocking), adding middlewares.</li>
--   <li><i>Example type:</i> <tt><a>Request</a> String String a</tt></li>
--   </ul>
--   
--   The Request monad
module Control.Monad.Request
