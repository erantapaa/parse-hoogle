-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A pretty-print library that employs a dynamic programming algorithm for optimal rendering.
--   
@package dynamic-pp
@version 0.2.0


-- | A pretty printer implementation, based loosely on the Wadler-Leijin
--   pretty printer, but redesigned to facilitate a dynamic programming
--   optimal layout algorithm.
--   
--   This pretty printer module trades some of the generality of the
--   Wadler-Leijin scheme in order to facilitate an efficient optimizing
--   layout engine. The nesting, column, and width combinators are removed.
module Text.Format
data Doc

-- | Graphics options for ANSI terminals. All options are wrapped in the
--   <a>Maybe</a> datatype, with <a>Nothing</a> meaning "leave this option
--   as-is".
data Graphics

-- | Set options on the terminal, or keep the current setting in the case
--   of <a>Nothing</a>.
Options :: !(Maybe ConsoleIntensity) -> !(Maybe Underlining) -> !(Maybe BlinkSpeed) -> !(Maybe (Color, ColorIntensity)) -> !(Maybe (Color, ColorIntensity)) -> !(Maybe Bool) -> Graphics

-- | Console intensity.
consoleIntensity :: Graphics -> !(Maybe ConsoleIntensity)

-- | Underlining.
underlining :: Graphics -> !(Maybe Underlining)

-- | Blinking speed.
blinkSpeed :: Graphics -> !(Maybe BlinkSpeed)

-- | Foreground color and intensity.
foreground :: Graphics -> !(Maybe (Color, ColorIntensity))

-- | Background color and intensity.
background :: Graphics -> !(Maybe (Color, ColorIntensity))

-- | Whether or not to swap the foreground and background.
swapForegroundBackground :: Graphics -> !(Maybe Bool)

-- | Reset the terminal in this mode.
Default :: Graphics

-- | A class representing datatypes that can be formatted as <a>Doc</a>s.
class Format item where formatList = list . map format
format :: Format item => item -> Doc
formatList :: Format item => [item] -> Doc

-- | A class representing datatypes that can be formatted as <a>Doc</a>s
--   inside a monad.
class Monad m => FormatM m item where formatListM = liftM list . mapM formatM
formatM :: FormatM m item => item -> m Doc
formatListM :: FormatM m item => [item] -> m Doc

-- | An empty <a>Doc</a>.
empty :: Doc

-- | A <a>Doc</a> consisting of a linebreak, that is not turned into a
--   space when erased by a <a>group</a>.
line :: Doc

-- | A <a>Doc</a> consisting of a linebreak, that is turned into a space
--   when erased by a <a>group</a>.
linebreak :: Doc

-- | A <a>Doc</a> consisting of a linebreak that cannot be erased by a
--   <a>group</a>.
hardline :: Doc

-- | A <a>Doc</a> consisting of a space character, that can be turned into
--   a linebreak in order to break lines that are too long.
softline :: Doc

-- | An empty <a>Doc</a> that can be turned into a linebreak in order to
--   break lines that are too long.
softbreak :: Doc

-- | A <a>Doc</a> containing a single character.
char :: Char -> Doc

-- | Create a <a>Doc</a> containing a string.
string :: String -> Doc

-- | Create a <a>Doc</a> containing a bytestring.
bytestring :: ByteString -> Doc

-- | Create a <a>Doc</a> containing a lazy bytestring
lazyBytestring :: ByteString -> Doc

-- | The character <tt>(</tt>
lparen :: Doc

-- | The character <tt>)</tt>
rparen :: Doc

-- | The character <tt>[</tt>
lbrack :: Doc

-- | The character <tt>]</tt>
rbrack :: Doc

-- | The character <tt>{</tt>
lbrace :: Doc

-- | The character <tt>}</tt>
rbrace :: Doc

-- | The character <tt>&lt;</tt>
langle :: Doc

-- | The character <tt>&gt;</tt>
rangle :: Doc

-- | The character <tt>'</tt>
squote :: Doc

-- | The character <tt>"</tt>
dquote :: Doc

-- | The character <tt>`</tt>
backquote :: Doc

-- | The character <tt>,</tt>
comma :: Doc

-- | The character <tt>;</tt>
semi :: Doc

-- | The character <tt>:</tt>
colon :: Doc

-- | The character <tt>.</tt>
dot :: Doc

-- | The character <tt>\</tt>
backslash :: Doc

-- | The character <tt>=</tt>
equals :: Doc

-- | A space character.
space :: Doc

-- | Increase the indentation level of a document by some amount.
nest :: Int -> Doc -> Doc

-- | Increase the indentation level of a document by some amount.
indent :: Int -> Doc -> Doc

-- | Set the indentation level to the current column.
align :: Doc -> Doc

-- | Enclose a <a>Doc</a> in single quotes
squoted :: Doc -> Doc

-- | Enclose a <a>Doc</a> in double quotes
dquoted :: Doc -> Doc

-- | Enclose a <a>Doc</a> in paretheses
parens :: Doc -> Doc

-- | Enclose a <a>Doc</a> in brackets
brackets :: Doc -> Doc

-- | Enclose a <a>Doc</a> in braces
braces :: Doc -> Doc

-- | Enclose a <a>Doc</a> in angles
angles :: Doc -> Doc

-- | Render a list, enclosed in brackets and separated by commas.
list :: [Doc] -> Doc

-- | Set the graphics mode on a document.
graphics :: Graphics -> Doc -> Doc

-- | Color a <a>Doc</a> dull white.
dullWhite :: Doc -> Doc

-- | Color a <a>Doc</a> dull red.
dullRed :: Doc -> Doc

-- | Color a <a>Doc</a> dull yellow.
dullYellow :: Doc -> Doc

-- | Color a <a>Doc</a> dull green.
dullGreen :: Doc -> Doc

-- | Color a <a>Doc</a> dull blue.
dullBlue :: Doc -> Doc

-- | Color a <a>Doc</a> dull cyan.
dullCyan :: Doc -> Doc

-- | Color a <a>Doc</a> dull magenta.
dullMagenta :: Doc -> Doc

-- | Color a <a>Doc</a> dull black.
dullBlack :: Doc -> Doc

-- | Color a <a>Doc</a> vivid white.
vividWhite :: Doc -> Doc

-- | Color a <a>Doc</a> vivid red.
vividRed :: Doc -> Doc

-- | Color a <a>Doc</a> vivid yellow.
vividYellow :: Doc -> Doc

-- | Color a <a>Doc</a> vivid green.
vividGreen :: Doc -> Doc

-- | Color a <a>Doc</a> vivid blue.
vividBlue :: Doc -> Doc

-- | Color a <a>Doc</a> vivid cyan.
vividCyan :: Doc -> Doc

-- | Color a <a>Doc</a> vivid magenta.
vividMagenta :: Doc -> Doc

-- | Color a <a>Doc</a> vivid black.
vividBlack :: Doc -> Doc

-- | Color a <a>Doc</a>s background dull white.
dullWhiteBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background dull red.
dullRedBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background dull yellow.
dullYellowBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background dull green.
dullGreenBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background dull blue.
dullBlueBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background dull cyan.
dullCyanBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background dull magenta.
dullMagentaBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background dull black.
dullBlackBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background vivid white.
vividWhiteBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background vivid red.
vividRedBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background vivid yellow.
vividYellowBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background vivid green.
vividGreenBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background vivid blue.
vividBlueBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background vivid cyan.
vividCyanBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background vivid magenta.
vividMagentaBackground :: Doc -> Doc

-- | Color a <a>Doc</a>s background vivid black.
vividBlackBackground :: Doc -> Doc

-- | Joun <a>Doc</a>s with no space in between them.
beside :: Doc -> Doc -> Doc

-- | Concatenate a list of <a>Doc</a>s. This is generally more efficient
--   than repeatedly using <a>beside</a> or <a>&lt;&gt;</a>.
concat :: [Doc] -> Doc

-- | A choice of several options. Only one of these will be chosen and used
--   to render the final document.
choose :: [Doc] -> Doc

-- | Join two <a>Doc</a>s with no space in between.
(<>) :: Doc -> Doc -> Doc

-- | Join two <a>Doc</a>s with a space in between them.
(<+>) :: Doc -> Doc -> Doc

-- | Join two <a>Doc</a>s with a <a>hardline</a> in between them.
(<!>) :: Doc -> Doc -> Doc

-- | Join two <a>Doc</a>s with a <a>line</a> in between them.
(<$>) :: Doc -> Doc -> Doc

-- | Join two <a>Doc</a>s with a <a>linebreak</a> in between them.
(<$$>) :: Doc -> Doc -> Doc

-- | Join two <a>Doc</a>s with a <a>softline</a> in between them.
(</>) :: Doc -> Doc -> Doc

-- | Join two <a>Doc</a>s with a <a>softbreak</a> in between them.
(<//>) :: Doc -> Doc -> Doc

-- | Join a list of <a>Doc</a>s with spaces in between each. This is
--   generally more efficient than repeatedly using <a>&lt;+&gt;</a>.
hsep :: [Doc] -> Doc

-- | Concatenate a list of <a>Doc</a>s. This is generally more efficient
--   than repeatedly using <a>beside</a> or <a>&lt;&gt;</a>.
hcat :: [Doc] -> Doc

-- | Join a list of <a>Doc</a>s with <a>line</a>s in between each. This is
--   generally more efficient than repeatedly using <a>&lt;$$&gt;</a>.
vsep :: [Doc] -> Doc

-- | Join a list of <a>Doc</a>s with <a>linebreak</a>s in between each.
--   This is generally more efficient than repeatedly using
--   <a>&lt;$&gt;</a>.
vcat :: [Doc] -> Doc

-- | Join a list of <a>Doc</a>s using either <a>hsep</a> or <a>vsep</a>.
sep :: [Doc] -> Doc

-- | Join a list of <a>Doc</a>s using either <a>hcat</a> or <a>vcat</a>.
cat :: [Doc] -> Doc

-- | Join a list of <a>Doc</a>s with <a>softline</a>s in between each. This
--   is generally more efficient than repeatedly using <a>&lt;/&gt;</a>.
fillSep :: [Doc] -> Doc

-- | Join a list of <a>Doc</a>s with <a>softbreak</a>s in between each.
--   This is generally more efficient than repeatedly using
--   <a>&lt;//&gt;</a>.
fillCat :: [Doc] -> Doc

-- | Enclose a <a>Doc</a> within two other <a>Doc</a>s
enclose :: Doc -> Doc -> Doc -> Doc

-- | Concatenate a list of <a>Doc</a>s into a single doc, with each element
--   separated from the others by a given <a>Doc</a> representing
--   punctuation.
punctuate :: Doc -> [Doc] -> [Doc]

-- | Enclose a list of <a>Doc</a>s, separated by punctuation, and align
--   nesting of the contents to the end of the left enclosing <a>Doc</a>
encloseSep :: Doc -> Doc -> Doc -> [Doc] -> Doc

-- | Erase all linebreaks in a <a>Doc</a> and replace them with either
--   spaces or nothing, depending on the kind of linebreak.
flatten :: Doc -> Maybe Doc

-- | A <a>Doc</a> that <a>choose</a>s between the unmodified argument, or
--   the <a>flatten</a>ed version of the argument.
group :: Doc -> Doc

-- | Render the entire <a>Doc</a> to one line. Good for output that will be
--   read only by a machine, where newlines are not important at all
renderOneLine :: Doc -> ByteString

-- | Produce a <a>Builder</a> that renders the <a>Doc</a> to one line.
buildOneLine :: Doc -> Builder

-- | Output the entire <a>Doc</a>, as rendered by <a>renderOneLine</a> to
--   the given <a>Handle</a>.
putOneLine :: Handle -> Doc -> IO ()

-- | Render the entire <a>Doc</a>, preserving newlines, but without any
--   indentation. Good for output that will be read only by machine, but
--   where newlines matter.
renderFast :: Doc -> ByteString

-- | Produce a <a>Builder</a> that renders the <a>Doc</a> quickly.
buildFast :: Doc -> Builder

-- | Output the entire <a>Doc</a>, as rendered by <a>renderFast</a> to the
--   given <a>Handle</a>.
putFast :: Handle -> Doc -> IO ()

-- | Render a <a>Doc</a> as a lazy bytestring using an optimal layout
--   rendering engine. The engine will render the document in the fewest
--   number of lines possible without exceeding the maximum column width.
renderOptimal :: Int -> Bool -> Doc -> ByteString

-- | Produce a <a>Builder</a> that renders the <a>Doc</a> using the optimal
--   layout engine.
buildOptimal :: Int -> Bool -> Doc -> Builder

-- | Output the entire <a>Doc</a>, as rendered by <a>renderOptimal</a> to
--   the given <a>Handle</a>.
putOptimal :: Handle -> Int -> Bool -> Doc -> IO ()
instance Ord LineKind
instance Eq LineKind
instance Enum LineKind
instance Ord Graphics
instance Eq Graphics
instance Eq Doc
instance Show Column
instance Show Indent
instance Format Double
instance Format Float
instance Format Word
instance Format Integer
instance Format Int
instance Format ByteString
instance Format ByteString
instance Format String
instance Format Doc
instance Format a => Format [a]
instance Eq Column
instance Ord Column
instance Hashable Column
instance Hashable Graphics
instance Hashable Doc
instance Hashable LineKind
instance Ord Doc
