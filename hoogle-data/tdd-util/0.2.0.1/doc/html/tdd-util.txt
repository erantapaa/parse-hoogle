-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Test framework wrapper
--   
--   tdd-util is a small test framework for TDD (cf.
--   <a>https://en.wikipedia.org/wiki/Test-driven_development</a>) that
--   integrates three testing libraries, whose modules are all exported
--   under <a>Test.Util.Framework</a>, while providing utilities based on
--   each of these, exported under <a>Test.Util</a>, by wrapping the
--   library <tt>test-framework</tt>.
--   
--   <i>Getting Started</i>
--   
--   To get started, an example that uses this library is this library's
--   test suite itself and can be found at
--   <a>https://github.com/bairyn/tdd-util/tree/master/testsrc</a>. Each
--   module under <tt>src</tt> corresponds with a module under
--   <tt>testsrc/Test</tt> that contains the tests for that module. (For
--   example, this library currently exports two modules in
--   <tt>src/Test/Util.hs</tt> and <tt>src/Test/Util/Framework.hs</tt>;
--   their tests are located, respectively, in
--   <tt>testsrc/Test/Test/Util.hs</tt> and
--   <tt>testsrc/Test/Test/Util/Framework.hs</tt>; and a module in
--   <tt>src/Data/Trie.hs</tt> would correspond with a test module in
--   <tt>testsrc/Test/Trie.hs</tt>). This structure can be conveniently
--   cargo culted from this library, but these conventions are not
--   enforced.
--   
--   <i>Test Modules</i>
--   
--   Conventially, each module in <tt>src/X.hs</tt> corresponds with a
--   module that contains tests for that module located at
--   <tt>testsrc/Test/X.hs</tt>. None of these Test modules depend on each
--   other by importing them. For a concrete example of such a test module,
--   see
--   <a>https://github.com/bairyn/tdd-util/blob/master/testsrc/Test/Test/Util.hs</a>.
--   
--   Each test module exports a list of <tt>test-framework</tt>'s
--   <a>TTest</a>s (an alias to disambiguate between <tt>Test</tt> types
--   from different libraries) named <tt>tests</tt>.
--   
--   This list of tests can either be run individually by importing the
--   test module, and then running <tt><a>defaultMain</a> tests</tt>; or be
--   grouped together in the test-suite's <tt>Tests</tt> module (see
--   below).
--   
--   In the tests themselves, very briefly, <tt><a>testGroup</a> "Brief
--   description of test" […]</tt> can be used to construct a single
--   test-framework test (<a>TTest</a>) from a group of other tests,
--   <tt><a>testProperty</a> name prop_foo </tt> can be used to construct a
--   <a>TTest</a> from a QuickCheck property, and <tt><a>testCase</a> name
--   $ do …</tt> can be used to construct a test from <a>HUnit</a>. See
--   test-framework's documentation for more information about constructing
--   QuickCheck and HUnit properties.
--   
--   Here is a segment of code from
--   <a>https://github.com/bairyn/tdd-util/blob/master/testsrc/Test/Test/Util.hs</a>:
--   
--   <pre>
--   module Test.Test.Util
--   ( tests
--   ) where
--   
--   import Control.Applicative
--   …
--   import Text.Printf
--   
--   import Test.Util
--   import Test.Util.Framework
--   …
--   tests :: [TTest]
--   tests =
--   [ testGroup "Throwing and catching exceptions - isExceptionThrown" $
--   [ testCase "throwing an exception" $ do
--   thrown &lt;- isExceptionThrown $ do
--   throwIO $ AssertionFailed "assertion failed"
--   when (either (e -&gt; flip const (e :: AssertionFailed) $ False) (const True) $ thrown) $ do
--   assertString "exception NOT thrown"
--   , testCase "not throwing an exception" $ do
--   thrown &lt;- isExceptionThrown $ do
--   return ()
--   when (either (e -&gt; flip const (e :: AssertionFailed) $ True) (const False) $ thrown) $ do
--   assertString "exception thrown"
--   ]
--   , testGroup "Throwing and catching exceptions - assert*Thrown" $
--   …
--   ]
--   …
--   </pre>
--   
--   <i>Tests.hs</i>
--   
--   Each test module is conventionally grouped into a single test module,
--   at <tt>testsrc/Tests.hs</tt> (e.g. see
--   <a>https://github.com/bairyn/tdd-util/blob/master/testsrc/Tests.hs</a>),
--   that exports a list of <a>TTest</a>s named <tt>tests</tt>.
--   Interactively, this test module can be loaded in ghci, and the tests
--   can be run as before, with <tt>defaultMain tests</tt>.
--   
--   These tests can also be specified in the project's cabal file, by
--   invoking <tt>defaultMain</tt> on <tt>tests</tt> in an external
--   <tt>Main.hs</tt> file under <tt>testsrc</tt> (e.g. see
--   <a>https://github.com/bairyn/tdd-util/blob/master/testsrc/Main.hs</a>).
--   Running this <tt>Main.hs</tt> will result in the test suite being run,
--   so a <tt>test-suite</tt> section can be added to the cabal file as it
--   is in
--   <a>https://github.com/bairyn/tdd-util/blob/master/tdd-util.cabal</a>.
--   
--   When a test suite is specified, cabal will recognized it and, when
--   configured to do so, will run it when installing your package,
--   resulting in output that may look like this when it succeeds.
--   
--   <pre>
--   Running 1 test suites...
--   Test suite tdd-util-tests: RUNNING...
--   Test suite tdd-util-tests: PASS
--   Test suite logged to: dist/test/tdd-util-0.1.0.1-tdd-util-tests.log
--   1 of 1 test suites (1 of 1 test cases) passed.
--   </pre>
--   
--   This package's <tt>Tests.hs</tt>:
--   
--   <pre>
--   module Tests
--   ( tests
--   ) where
--   
--   import Test.Util.Framework
--   
--   import qualified Test.Test.Util
--   import qualified Test.Test.Util.Framework
--   
--   tests :: [TTest]
--   tests =
--   [ testGroup "Test.Test.Util.tests" $ Test.Test.Util.tests
--   , testGroup "Test.Test.Util.Framework.tests" $ Test.Test.Util.Framework.tests
--   ]
--   </pre>
--   
--   <i>Main.hs Example</i>
--   
--   <tt>Main.hs</tt> conventially defines a simple program that invokes
--   <tt>defaultMain tests</tt> from the test group that encapsulates the
--   entire test suite in <tt>Tests.hs</tt>. Here is this package's
--   <tt>Main.hs</tt> file:
--   
--   <pre>
--   module Main where
--   
--   import Test.Util.Framework
--   
--   import Tests
--   
--   main :: IO ()
--   main = do
--   defaultMain tests
--   </pre>
--   
--   <i>Cabal Configuration</i>
--   
--   Your package's cabal configuration can be updated to point to
--   <tt>testsrc/Main.hs/</tt>; here is a segment in this package's Cabal
--   file that contains part of the specification for the package's test
--   suite:
--   
--   <pre>
--   test-suite tdd-util-tests
--   type: exitcode-stdio-1.0
--   default-language: Haskell2010
--   hs-source-dirs: testsrc, src
--   ghc-options: -Wall -threaded
--   main-is: Main.hs
--   default-extensions:
--   GADTs
--   ,TemplateHaskell
--   ,DeriveDataTypeable
--   build-depends:
--   …
--   other-modules:
--   Tests
--   ,Test.Test.Util
--   ,Test.Test.Util.Framework
--   </pre>
--   
--   Note that <tt>tdd-util</tt> is the only TDD library one needs to
--   depend on, if one only uses <tt>QuickCheck</tt>, <tt>HUnit</tt>, and
--   <tt>test-framework</tt> via <a>Test.Util.Framework</a>; this omission
--   is strictly optional, of course.
--   
--   <i>Test Running Example</i>
--   
--   Here is the output of importing <tt>Test.Test.Util</tt> inside the
--   <tt>testsrc</tt> directory and then running <tt>tests</tt> on my
--   system (note this is not the result of running the entire test suite;
--   to do that, either run Main.hs or run, with <a>defaultMain</a>, the
--   <tt>tests</tt> exported from <tt>Tests.hs</tt> rather than
--   <tt>Test.Test.Util</tt>), without the coloured formatting:
--   
--   <pre>
--   % ghci Test.Test.Util
--   GHCi, version 7.6.1: http://www.haskell.org/ghc/  :? for help
--   Loading package ghc-prim ... linking ... done.
--   Loading package integer-gmp ... linking ... done.
--   Loading package base ... linking ... done.
--   [1 of 1] Compiling Test.Test.Util   ( Test/Test/Util.hs, interpreted )
--   Ok, modules loaded: Test.Test.Util.
--   
--   *Test.Test.Util&gt; defaultMain tests
--   Loading package pretty-1.1.1.0 ... linking ... done.
--   …
--   Loading package tdd-util-0.1.0.1 ... linking ... done.
--   Throwing and catching exceptions - isExceptionThrown:
--   throwing an exception: [OK]
--   not throwing an exception: [OK]
--   Throwing and catching exceptions - assert*Thrown:
--   throwing an exception: [OK]
--   not throwing an exception: [OK]
--   isExceptionThrown -&gt; assert*Thrown:
--   Applying appropriate assert*Thrown given result of isExceptionThrown: [OK, passed 100 tests]
--   Timed tests:
--   timeMicroseconds:
--   timeMicroseconds is accurate for random sleep times within 10ms: [OK, passed 100 tests]
--   timeMicroseconds is accurate for random delay times by timeout within 10ms: [OK, passed 100 tests]
--   timeoutMicroseconds behaves like timeout and throws exceptions appropriately:
--   timeoutMicroseconds overflow: [OK]
--   timeoutMicroseconds non-overflow: [OK]
--   waiting for a random amount of time from 0ms - 600ms; measured time difference is less than 10ms: [OK, passed 100 tests]
--   assertMicroseconds:
--   timeoutMicroseconds -&gt; assertMicroseconds (assert*Thrown): [OK, passed 100 tests]
--   timeoutProcessMicroseconds behaves like timeoutMicroseconds and throws exceptions appropriately:
--   timeoutProcessMicroseconds overflow: [OK]
--   timeoutProcessMicroseconds non-overflow: [OK]
--   random sleep times and timeouts; return value is appropriate (NB: requires -threaded to work properly): [OK, passed 100 tests]
--   assertProcessMicroseconds:
--   timeoutProcessMicroseconds -&gt; assertProcessMicroseconds (assert*Thrown): [OK, passed 100 tests]
--   
--   Properties  Test Cases  Total
--   Passed  7           8           15
--   Failed  0           0           0
--   Total   7           8           15
--   </pre>
@package tdd-util
@version 0.2.0.1


-- | <a>Test.Util.Framework</a> is a super-module that re-exports other
--   modules pertaining to TDD, so that they can be imported under a single
--   module.
--   
--   HUnit's <tt>Test</tt> type is renamed to <a>HTest</a>, and
--   test-framework's to <a>TTest</a>. The same renaming scheme, with the
--   addition that <tt>Q</tt> is prepended for QuickCheck, has been applied
--   to the following names:
--   
--   <ul>
--   <li><tt>Test</tt></li>
--   <li><tt>assert</tt></li>
--   <li><tt>State</tt></li>
--   <li><tt>test</tt></li>
--   </ul>
--   
--   <a>Result</a> is renamed to <a>SingleResult</a>; <a>reason</a> in this
--   module cannot be renamed, so it is unfortunately not exported.
--   
--   Unfortunately, Haskell's design makes it inconvenient to rename
--   classes. In this module, <a>Testable</a> is not re-exported from any
--   module.
module Test.Util.Framework

-- | Alias for <a>Test</a>.
type HTest = Test

-- | Alias for <a>Test</a>.
type TTest = Test

-- | Alias for <a>assert</a>.
qAssert :: Monad m => Bool -> PropertyM m ()

-- | Alias for <a>State</a>.
type QState = State

-- | Alias for <a>test</a>.
qTest :: QState -> (StdGen -> Int -> Prop) -> IO Result

-- | Alias for <a>Result</a>.
type SingleResult = Result


-- | A module containing utilities for testing with
--   <tt>test-framework</tt>, <tt>HUnit</tt>, and <tt>testable</tt>.
module Test.Util

-- | Determine whether an exception was caught, and return it if so.
isExceptionThrown :: (Functor m, MonadCatchIO m, Exception e) => m a -> m (Either e a)

-- | Assert that an exception is thrown.
--   
--   When an exception is not thrown, the input <a>String</a>, or otherwise
--   a default string, is output.
--   
--   For more control, see the more fundamental <a>isExceptionThrown</a>.
assertThrown :: (Functor m, MonadCatchIO m, Exception e, Show e) => Maybe String -> Proxy e -> m () -> m ()

-- | Assert that an exception is not thrown.
--   
--   When an exception is thrown, the input function, or a default one, is
--   given the exception and the resulting string is output.
--   
--   For more control, see the more fundamental <a>isExceptionThrown</a>.
assertNotThrown :: (Functor m, MonadCatchIO m, Exception e, Show e) => Maybe (e -> String) -> m () -> m ()

-- | Time a computation.
timeMicroseconds :: (Monad m, MonadIO m) => m a -> m (a, Integer)

-- | Run a computation within an approximate time limit.
--   
--   This is currently a wrapper for <a>timeout</a> that checks for
--   overflows.
timeoutMicroseconds :: Integer -> IO a -> IO (Maybe a)

-- | Assert that a computation runs within an approximate time limit.
--   
--   If the computation does not finish within the given time limit, a
--   <a>TimeLimitExceeded</a> exception is thrown.
--   
--   For more control, see the more fundamental <a>timeoutMicroseconds</a>
--   function.
assertMicroseconds :: Integer -> IO a -> IO a

-- | Apply an approximate time limit, from the current time, to a process
--   by its handle.
--   
--   If the process finishes approximately within the given time limit,
--   <a>Just</a> its exit code is returned. Otherwise, it is killed and
--   <a>Nothing</a> is returned.
--   
--   This function requires a threaded runtime system to work properly.
timeoutProcessMicroseconds :: Integer -> ProcessHandle -> IO (Maybe ExitCode)

-- | Assert that a process finishes within an approximate time limit.
--   
--   If the computation does not finish within the given time limit, a
--   <a>TimeLimitExceeded</a> exception is thrown.
--   
--   For more control, see the more fundamental
--   <a>timeoutProcessMicroseconds</a> function.
assertProcessMicroseconds :: Integer -> ProcessHandle -> IO ()

-- | A class of exceptions for <a>Tests.Util</a>.
data TestUtilException
TestUtilException :: e -> TestUtilException
testUtilExceptionToException :: Exception e => e -> SomeException
testUtilExceptionFromException :: Exception e => SomeException -> Maybe e

-- | <tt>timeoutMicrosoconds</tt> was invoked with an integer that would
--   cause the input given to <a>timeout</a> to overflow.
data TimeoutOverflow
TimeoutOverflow :: Maybe String -> Integer -> Integer -> TimeoutOverflow

-- | Optional error message.
_timeoutOverflow_message :: TimeoutOverflow -> Maybe String

-- | Input given to <a>timeoutMicroseconds</a>.
_timeoutOverflow_microseconds :: TimeoutOverflow -> Integer

-- | Maximum bound of <a>Int</a> as an <a>Integer</a>.
_timeoutOverflow_inputBound :: TimeoutOverflow -> Integer
timeoutOverflow_message :: Lens' TimeoutOverflow (Maybe String)
timeoutOverflow_microseconds :: Lens' TimeoutOverflow Integer
timeoutOverflow_inputBound :: Lens' TimeoutOverflow Integer
data TimeLimitExceeded
TimeLimitExceeded :: Maybe String -> String -> Integer -> TimeLimitExceeded

-- | Optional error message.
_timelimitExceeded_message :: TimeLimitExceeded -> Maybe String

-- | Name of the function that directly threw the exception
--   (<a>assertMicroseconds</a>, etc.)
_timelimitExceeded_callerName :: TimeLimitExceeded -> String

-- | The timelimit.
_timelimitExceeded_microseconds :: TimeLimitExceeded -> Integer
timelimitExceeded_message :: Lens' TimeLimitExceeded (Maybe String)
timelimitExceeded_callerName :: Lens' TimeLimitExceeded String
timelimitExceeded_microseconds :: Lens' TimeLimitExceeded Integer
instance Typeable TestUtilException
instance Typeable TimeoutOverflow
instance Typeable TimeLimitExceeded
instance Show TimeoutOverflow
instance Eq TimeoutOverflow
instance Show TimeLimitExceeded
instance Eq TimeLimitExceeded
instance Exception TimeLimitExceeded
instance Exception TimeoutOverflow
instance Exception TestUtilException
instance Show TestUtilException
