-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Compute with colors and differenct color spaces
--   
--   
--   <a>prizm</a> is a Haskell library for computing with colors.
--   Specifically providing functions for transforming between different
--   color spaces, interpolating colors and adjusting the tint, shade, hue,
--   or lightness or a color.
--   
--   My inspiration for writing this was Sass and Bourbon, both implement
--   interesting functions for computing with colors for use in stylesheets
--   and I wanted the same thing for use in <a>Clay</a>.
--   
--   <i>Colour Module</i>
--   
--   There is some overlap with the Haskell Colour Module that already
--   exists; however, this library is filling a couple of needs the other
--   doesn't satisfy. Primarily transformations and color mutations in the
--   CIE L*Ch space.
--   
--   <i>Supported Algorithms &amp; Functions</i>
--   
--   All of these functions operate on color within the CIE L*Ch
--   representation. The percentage values may range between -100 and 100.
--   
--   <ul>
--   <li>sRGB <a>-</a> CIE XYZ</li>
--   <li>CIE XYZ <a>-</a> CIE L*ab</li>
--   <li>CIE L*ab <a>-</a> CIE L*Ch</li>
--   <li>Color interpolation</li>
--   <li>Tinting / Darkening</li>
--   <li>Lightness</li>
--   <li>Hue</li>
--   <li>Chroma/Saturation</li>
--   </ul>
--   
--   <i>Formulas, Resources, and Links</i>
--   
--   <ul>
--   <li><a>General Color Formulas, Data, and Algorithms</a></li>
--   <li><a>CIE Conversion Mathematics</a></li>
--   <li><a>Conversion Algorithm Sources</a></li>
--   <li><a>Good list of useful color manipulation formulas</a></li>
--   </ul>
@package prizm
@version 0.3.1.2


-- | Some basic utility functions for the CIE transformations.
module Data.Prizm.Color.CIE

-- | Exact rational of the <a>0.008856</a> value.
v1 :: Double

-- | Exact rational of the <a>7.787</a> value.
v2 :: Double

-- | Reference white, 2deg observer, d65 illuminant.
refWhite :: [Double]
transformXYZ :: Double -> Double


module Data.Prizm.Color.Transform

-- | Round a number to the Nth place.
roundN :: Integer -> Double -> Double

-- | Truncate a number to the Nth place.
truncateN :: Integer -> Double -> Double
zipTransform :: ZipList Double -> [Double] -> Double


module Data.Prizm.Types

-- | Working space matrix to convert from sRGB to CIE XYZ
newtype RGBtoXYZ
RGBtoXYZ :: [[Double]] -> RGBtoXYZ

-- | Working space matrix to convert from CIE XYZ to sRGB
newtype XYZtoRGB
XYZtoRGB :: [[Double]] -> XYZtoRGB

-- | Hex format color code, eg '#AB9D92'
type Hex = String
type Percent = Integer
data RGB a
RGB :: !a -> !a -> !a -> RGB a
data CIEXYZ a
CIEXYZ :: !a -> !a -> !a -> CIEXYZ a
data CIELAB a
CIELAB :: !a -> !a -> !a -> CIELAB a
data CIELCH a
CIELCH :: !a -> !a -> !a -> CIELCH a
instance Eq RGBtoXYZ
instance Ord RGBtoXYZ
instance Show RGBtoXYZ
instance Eq XYZtoRGB
instance Ord XYZtoRGB
instance Show XYZtoRGB
instance Eq a => Eq (RGB a)
instance Ord a => Ord (RGB a)
instance Show a => Show (RGB a)
instance Eq a => Eq (CIEXYZ a)
instance Ord a => Ord (CIEXYZ a)
instance Show a => Show (CIEXYZ a)
instance Eq a => Eq (CIELAB a)
instance Ord a => Ord (CIELAB a)
instance Show a => Show (CIELAB a)
instance Eq a => Eq (CIELCH a)
instance Ord a => Ord (CIELCH a)
instance Show a => Show (CIELCH a)
instance Applicative CIELCH
instance Applicative CIELAB
instance Applicative CIEXYZ
instance Applicative RGB
instance Functor CIELCH
instance Functor CIELAB
instance Functor CIEXYZ
instance Functor RGB


-- | <a>Color</a> provides functions for blending colors, convenience
--   blending (<a>tint</a> and <a>shade</a>), and adjusting the <a>hue</a>,
--   <a>lightness</a>, or <a>chroma</a> of a given color.
--   
--   These functions require your color to be represented in <tt>CIE
--   L*Ch</tt>. The reason for this is because the <tt>L*CH</tt> color
--   space represents colors closest to how the human eye sees them.
--   Blending and transforming a color in <tt>L*Ch</tt> maintains the
--   brightness of the colors more accurately. Here is a link to a blog
--   post by someone detailing the differences and documenting them well:
--   <a>Improved Color Blending</a>.
--   
--   NOTE: the transformations between color spaces are intensive, if you
--   have a HEX or RGB color it first needs to be transformed to the
--   <a>CIEXYZ</a> color space, then the <a>CIELAB</a> space, and finally
--   to <a>CIELCH</a>.
--   
--   I may at some point try to generalize the function's types but I
--   wanted to first support <a>CIELCH</a> as the transformation format.
module Data.Prizm.Color

-- | Interpolate two colors with a weight.
--   
--   Weight is applied left to right, so if a weight of 25% is supplied,
--   then the color on the left will be multiplied by 25% and the second
--   color will be multiplied by 75%.
--   
--   <tt>CIE L*Ch</tt> is used because the interpolation between the colors
--   is more accurate than <a>CIELAB</a>, <a>CIEXYZ</a>, and S<a>RGB</a>
--   color spaces.
interpolate :: Percent -> (CIELCH Double, CIELCH Double) -> CIELCH Double

-- | Blend two colors using an interpolation value of 50%.
(<|>) :: CIELCH Double -> CIELCH Double -> CIELCH Double

-- | Shade a color by blending it using a weight and the color black.
shade :: CIELCH Double -> Percent -> CIELCH Double

-- | Tint a color by blending it using a weight and the color white.
tint :: CIELCH Double -> Percent -> CIELCH Double

-- | Adjust the lightness / darkness of a color.
lightness :: CIELCH Double -> Percent -> CIELCH Double

-- | Adjust the saturation/chroma of a color.
--   
--   A maximum chroma value of 120 is assumed here, anything more is
--   generally considered out of gamut.
chroma :: CIELCH Double -> Percent -> CIELCH Double

-- | Adjust the hue of a color.
hue :: CIELCH Double -> Percent -> CIELCH Double


-- | Pre-calculated illuminant matrices: <a>RGB to XYZ Matrix</a>.
module Data.Prizm.Color.Matrices.RGB
d65SRGB :: RGBtoXYZ
d65Adobe :: RGBtoXYZ


-- | Transformation functions and convenience functions to do the base
--   conversion between S<a>RGB</a> and <a>CIEXYZ</a>.
module Data.Prizm.Color.SRGB

-- | Convert an S<a>RGB</a> value to a <a>CIEXYZ</a> value.
toXYZ :: RGB Integer -> CIEXYZ Double

-- | Convert an S<a>RGB</a> value to a <a>CIEXYZ</a> given a pre-calculated
--   illuminant matrix.
--   
--   It is recommended to use <a>toXYZ</a> as it uses the most common
--   illuminant matrix.
toXYZMatrix :: RGBtoXYZ -> RGB Integer -> CIEXYZ Double

-- | Convert an S<a>RGB</a> value to <a>Hex</a>.
toHex :: RGB Integer -> Hex

-- | Convert a <a>Hex</a> to an S<a>RGB</a>.
fromHex :: Hex -> RGB Integer

-- | Clamp an integer with an upper-bound of 255 (the maximum RGB value).
clamp :: Integer -> Integer


-- | Pre-calculated illuminant matrices: <a>RGB to XYZ Matrix</a>.
module Data.Prizm.Color.Matrices.XYZ
d65SRGB :: XYZtoRGB
d65Adobe :: XYZtoRGB


-- | Transformation functions and convenience functions, some imported from
--   the other modules to ease conversion between representations.
module Data.Prizm.Color.CIE.XYZ

-- | Convert a CIE color to an SRGB color.
--   
--   This function uses the default d65 illuminant matrix.
toRGB :: CIEXYZ Double -> RGB Integer

-- | Convert an XYZ color to an SRGB color.
--   
--   <a>XYZtoRGB</a> is the pre-calculated illuminant matrix, it is
--   preferable to use <tt>toRG</tt> as it uses the most <a>common</a> one.
toRGBMatrix :: XYZtoRGB -> CIEXYZ Double -> RGB Integer

-- | Convenience function to convert XYZ to HEX.
toHex :: CIEXYZ Double -> Hex

-- | Convert an XYZ color to a LAB color.
--   
--   This function uses the default reference white (2deg observer, d65
--   illuminant).
toLAB :: CIEXYZ Double -> CIELAB Double

-- | Convenience function to convert XYZ to LAB.
toLCH :: CIEXYZ Double -> CIELCH Double

-- | Convenience function to convert RGB to XYZ.
fromRGB :: RGB Integer -> CIEXYZ Double

-- | Convenience function to convert HEX to XYZ.
fromHex :: Hex -> CIEXYZ Double

-- | Convenience function to convert LAB to XYZ.
fromLAB :: CIELAB Double -> CIEXYZ Double

-- | Convenience function to convert LCH to XYZ.
fromLCH :: CIELCH Double -> CIEXYZ Double


-- | Transformation functions and convenience functions, some imported from
--   the other modules to ease conversion between representations.
module Data.Prizm.Color.CIE.LAB

-- | Convenience function to convert LAB to RGB.
toRGB :: CIELAB Double -> RGB Integer

-- | Convenience function to convert LAB to HEX.
toHex :: CIELAB Double -> Hex

-- | Convert a LAB color to the LCH representation.
toLCH :: CIELAB Double -> CIELCH Double

-- | Convert a LAB color to the XYZ representation.
toXYZ :: CIELAB Double -> CIEXYZ Double

-- | Convenience function to convert RGB to LAB.
fromRGB :: RGB Integer -> CIELAB Double

-- | Convenience function to convert HEX to LAB.
fromHex :: Hex -> CIELAB Double

-- | Convert an XYZ color to LAB.
fromXYZ :: CIEXYZ Double -> CIELAB Double

-- | Convert an LCH color to the LAB representation.
fromLCH :: CIELCH Double -> CIELAB Double


-- | Transformation functions and convenience functions, some imported from
--   the other modules to ease conversion between representations.
module Data.Prizm.Color.CIE.LCH

-- | Convert from LCH to RGB.
toRGB :: CIELCH Double -> RGB Integer

-- | Convert from LCH to Hex.
toHex :: CIELCH Double -> Hex

-- | Convert an LCH color to LAB.
toLAB :: CIELCH Double -> CIELAB Double

-- | Convert from LCH to XYZ.
toXYZ :: CIELCH Double -> CIEXYZ Double

-- | Convenience function to convert from RGB to LCH.
fromRGB :: RGB Integer -> CIELCH Double

-- | Convenience function to convert from Hex to LCH.
fromHex :: Hex -> CIELCH Double

-- | Convenience function to convert from LAB to LCH.
fromLAB :: CIELAB Double -> CIELCH Double

-- | Convert from XYZ to LCH.
fromXYZ :: CIEXYZ Double -> CIELCH Double
