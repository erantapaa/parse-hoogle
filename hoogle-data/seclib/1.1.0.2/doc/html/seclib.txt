-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A simple library for static information-flow security in Haskell
--   
--   This package presents a static library to enforce <i>Information-Flow
--   Control</i> (IFC) in Haskell. IFC allows untrusted code to manipulate
--   sensitive data (i.e., secret information), while preserving its
--   confidentiality.
--   
--   To illustrate the use case scenario for <i>SecLib</i>, let us consider
--   two Haskell programmers , Alice and Bob, who do not trust each other.
--   Image that Alice wishes to use Bob's code to check the strength of
--   Alice's sensitive passwords. Clearly, Alice is concern that the
--   passwords could be leaked if they are run with Bob's code. How could
--   Alice be sure that Bob's code will preserve the confidentiality of
--   Alice's password? One option is to do code review---a very time
--   consuming approach. Instead, Alice demands that Bob's code uses the
--   security monads provided by this library (i.e., <a>Sec</a> and
--   <a>SecIO</a>). Now, Alice only requires, by using the type-system,
--   that Bob's code is written using such monads. Importantly, Alice needs
--   to use Safe Haskell to compile Bob's untrusted code using the flags
--   <tt>-XSafe</tt>. This package provides the files <tt>Alice.hs</tt> and
--   <tt>Bob.hs</tt>. The former calls into functions provided by the
--   latter and the library guarantees that secrets are not unintentionally
--   or maliciously leaked.
--   
--   The library is a modern and simplified version (updated to exploit the
--   last GHC type-system features) of the work presented in <i>A Library
--   for Light-weight Information-Flow Security in Haskell</i> by Alejandro
--   Russo, Koen Claessen and John Hughes. In Proc. of the ACM SIGPLAN 2008
--   Haskell Symposium. With respect to the version 1.0.0.0, this version
--   has less side-effectful features (e.g., no secure file handlers and
--   sockets) as well as declassification combinators. However, it presents
--   a simpler and more intuitive interface which can be easily extended to
--   cover a rich-set of side-effects.
@package seclib
@version 1.1.0.2

module SecLib.TCB.Lattice
class CanFlowTo l l'

-- | The class <a>Less</a> determines the allowed flows of information.
--   <tt>Less l l'</tt> tests the order relationship of <tt>l</tt> and
--   <tt>l'</tt> in the lattice, i.e., if <tt>l</tt> ⊑ <tt>l'</tt>.
--   
--   The sole purpose of the unexported class <a>CanFlowTo</a> is to
--   restrict untrusted code from making arbitrary instances of the class
--   <a>Less</a> (credit to Pablo Buiras!)
class CanFlowTo l l' => Less l l'


-- | This module describes security lattices.
module SecLib.Lattice

-- | The class <a>Less</a> determines the allowed flows of information.
--   <tt>Less l l'</tt> tests the order relationship of <tt>l</tt> and
--   <tt>l'</tt> in the lattice, i.e., if <tt>l</tt> ⊑ <tt>l'</tt>.
--   
--   The sole purpose of the unexported class <a>CanFlowTo</a> is to
--   restrict untrusted code from making arbitrary instances of the class
--   <a>Less</a> (credit to Pablo Buiras!)
class CanFlowTo l l' => Less l l'


-- | It provides a family of security monads for pure values.
module SecLib.TCB.Sec

-- | This monad denotes computations which produce values at security level
--   <tt>l</tt>.
newtype Sec l a
MkSec :: a -> Sec l a

-- | This function unlabels data (to be used only by trusted modules)
unsec :: Sec l a -> a

-- | It raises the security level of a value based on order-relationship
--   expressed by the security lattice.
--   
--   This is the only operation which connects members of the <tt>Sec
--   l</tt> monad family.
up :: Less l l' => Sec l a -> Sec l' a
instance Applicative (Sec l)
instance Functor (Sec l)
instance Monad (Sec l)


-- | Provide security for computations involving pure values.
module SecLib.Sec

-- | This monad denotes computations which produce values at security level
--   <tt>l</tt>.
data Sec l a

-- | It raises the security level of a value based on order-relationship
--   expressed by the security lattice.
--   
--   This is the only operation which connects members of the <tt>Sec
--   l</tt> monad family.
up :: Less l l' => Sec l a -> Sec l' a


-- | Define the two-point standard security lattice that refers to public
--   and secret information.
module SecLib.LowHigh

-- | Security level associated to public information.
data L

-- | Security level associated to secret information.
data H

-- | Only public values can be removed from the <a>Sec</a> monad.
public :: Sec L a -> a
instance Less L H
instance CanFlowTo L H
instance Less H H
instance CanFlowTo H H
instance Less L L
instance CanFlowTo L L


-- | Provide security for computations involving side-effects.
module SecLib.TCB.SecIO

-- | This monad represents side-effectful computations with observable
--   effects, and return values, at security level, at least, <tt>l</tt>.
newtype SecIO l a
MkSecIO :: (IO (Sec l a)) -> SecIO l a

-- | <a>SecIO</a> cannot be a functor for security reasons. The member
--   <a>fmap</a> is declared as <tt>undefined</tt> due to the
--   Applicative-Monad Haskell 2014 proposal.

-- | For the same reason as above, '(<a>*</a>)' is undefined.

-- | Lift pure sensitive values into secure side-effectful computations.
toSecIO :: Sec l a -> SecIO l a

-- | Execute secure computations.
--   
--   This function can be safely given to untrusted code. However, trusted
--   code should not run an <a>IO</a> computation returned by untrusted
--   code. After all, its origin cannot be determined, i.e., it could come
--   from <a>run</a> or any other IO operation which could compromise
--   confidentiality or integrity of data.
run :: SecIO l a -> IO (Sec l a)

-- | Secure coupling of side-effectul computations.
plug :: Less l l' => SecIO l' a -> SecIO l (Sec l' a)
ioTCB :: IO a -> SecIO l a
instance Applicative (SecIO l)
instance Functor (SecIO l)
instance Monad (SecIO l)


-- | Provide security for computations involving side-effects.
module SecLib.SecIO

-- | This monad represents side-effectful computations with observable
--   effects, and return values, at security level, at least, <tt>l</tt>.
data SecIO l a

-- | Lift pure sensitive values into secure side-effectful computations.
toSecIO :: Sec l a -> SecIO l a

-- | Execute secure computations.
--   
--   This function can be safely given to untrusted code. However, trusted
--   code should not run an <a>IO</a> computation returned by untrusted
--   code. After all, its origin cannot be determined, i.e., it could come
--   from <a>run</a> or any other IO operation which could compromise
--   confidentiality or integrity of data.
run :: SecIO l a -> IO (Sec l a)

-- | Secure coupling of side-effectul computations.
plug :: Less l l' => SecIO l' a -> SecIO l (Sec l' a)


-- | It provides a secure interface for manipulation of references.
module SecLib.TCB.Ref

-- | Secure references
data Ref l a

-- | Only use by trusted code
tcbRef :: IORef a -> Ref l a

-- | It creates a new reference. There is no relation between <tt>l</tt>
--   and <tt>l'</tt> since creating a reference is not an <i>observable</i>
--   event inside the <a>SecIO</a> monad.
newRefSecIO :: a -> SecIO l (Ref l' a)

-- | As above, there is no relation between <tt>l</tt> and <tt>l'</tt>.
--   Bare in mind that reading a reference is not an <i>observable</i>
--   event inside the <a>SecIO</a> monad.
readRefSecIO :: Ref l a -> SecIO l' (Sec l a)

-- | It writes references only at the security level indicated by the
--   argument of the <a>SecIO</a> monad.
writeRefSecIO :: Ref l a -> a -> SecIO l ()


-- | It provides a secure interface for manipulation of references.
module SecLib.Ref

-- | Secure references
data Ref l a

-- | Only use by trusted code
tcbRef :: IORef a -> Ref l a

-- | It creates a new reference. There is no relation between <tt>l</tt>
--   and <tt>l'</tt> since creating a reference is not an <i>observable</i>
--   event inside the <a>SecIO</a> monad.
newRefSecIO :: a -> SecIO l (Ref l' a)

-- | As above, there is no relation between <tt>l</tt> and <tt>l'</tt>.
--   Bare in mind that reading a reference is not an <i>observable</i>
--   event inside the <a>SecIO</a> monad.
readRefSecIO :: Ref l a -> SecIO l' (Sec l a)

-- | It writes references only at the security level indicated by the
--   argument of the <a>SecIO</a> monad.
writeRefSecIO :: Ref l a -> a -> SecIO l ()


-- | Provide means for declassification.
module SecLib.Reveal

-- | This function allows to downgrade information and it must be
--   <b>used_with_care</b>.
--   
--   Once that untrusted code gets access to this function (or any instance
--   of it), it can exercise it freely.
--   
--   Normally, untrusted code gets access to a restricted versions of
--   <a>reveal</a>. For instance, to reveal the last four digits of a
--   credit card number, untrusted code gets access to the following
--   function.
--   
--   <pre>
--   reveal_4digits :: Less H L =&gt; Sec H CreditCard -&gt; Sec L Int
--   </pre>
reveal :: Less l l' => Sec l' a -> Sec l a
