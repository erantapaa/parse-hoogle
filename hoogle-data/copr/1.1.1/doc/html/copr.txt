-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell interface to the Fedora Copr system
--   
--   This provides a Haskell interface to the Fedora Copr public build
--   system.
@package copr
@version 1.1.1

module Fedora.Copr.ListCoprs
data Coprs
Coprs :: String -> Maybe [Repo] -> Maybe String -> Coprs
output :: Coprs -> String
repos :: Coprs -> Maybe [Repo]
error :: Coprs -> Maybe String
data Repo
Repo :: Map Text Text -> Text -> Text -> Text -> Text -> Repo
yumRepos :: Repo -> Map Text Text
additionalRepos :: Repo -> Text
instructions :: Repo -> Text
name :: Repo -> Text
description :: Repo -> Text
instance Eq Repo
instance Show Repo
instance Eq Coprs
instance Show Coprs
instance FromJSON Coprs
instance FromJSON Repo

module Fedora.Copr.CoprStatus
data CoprStatusResponse
CoprStatusResponse :: String -> Maybe String -> Maybe String -> CoprStatusResponse
output :: CoprStatusResponse -> String
status :: CoprStatusResponse -> Maybe String
error :: CoprStatusResponse -> Maybe String
instance Eq CoprStatusResponse
instance Show CoprStatusResponse
instance FromJSON CoprStatusResponse

module Fedora.Copr.CoprProject
data CoprProject
CoprProject :: Text -> [Text] -> [Text] -> NonEmpty Text -> Maybe Text -> Maybe Text -> CoprProject
name :: CoprProject -> Text
repos :: CoprProject -> [Text]
initialPackages :: CoprProject -> [Text]
chroots :: CoprProject -> NonEmpty Text
description :: CoprProject -> Maybe Text
instructions :: CoprProject -> Maybe Text
data NewCoprResponse
NewCoprResponse :: String -> Maybe String -> Maybe String -> NewCoprResponse
output :: NewCoprResponse -> String
message :: NewCoprResponse -> Maybe String
error :: NewCoprResponse -> Maybe String
instance Eq NewCoprResponse
instance Show NewCoprResponse
instance Eq CoprProject
instance Show CoprProject
instance ToJSON CoprProject
instance FromJSON NewCoprResponse

module Fedora.Copr.CoprBuild
data CoprBuild
CoprBuild :: NonEmpty Text -> Int -> Int -> CoprBuild
packages :: CoprBuild -> NonEmpty Text
memory :: CoprBuild -> Int
timeout :: CoprBuild -> Int
data CoprBuildResponse
CoprBuildResponse :: String -> Maybe Int -> Maybe String -> Maybe String -> CoprBuildResponse
output :: CoprBuildResponse -> String
buildId :: CoprBuildResponse -> Maybe Int
message :: CoprBuildResponse -> Maybe String
error :: CoprBuildResponse -> Maybe String
instance Eq CoprBuildResponse
instance Show CoprBuildResponse
instance Eq CoprBuild
instance Show CoprBuild
instance ToJSON CoprBuild
instance FromJSON CoprBuildResponse


-- | Provides a Haskell interface to the Fedora <a>Copr</a> build system
--   <a>API</a>.
module Fedora.Copr
data CoprConfig
CoprConfig :: Hostname -> Port -> Bool -> ByteString -> ByteString -> CoprConfig

-- | The domain on which Copr is hosted.
domain :: CoprConfig -> Hostname

-- | The port on which Copr operates.
port :: CoprConfig -> Port

-- | Should we use SSL or Plain Text?
ssl :: CoprConfig -> Bool

-- | The API login (<i>not</i> the same as username).
login :: CoprConfig -> ByteString

-- | The API token.
token :: CoprConfig -> ByteString
type Username = ByteString
type ProjectName = ByteString
defaultConfig :: CoprConfig

-- | A utility wrapper for calling API methods with a <a>CoprConfig</a>.
--   
--   You can use this to do things like:
--   
--   <pre>
--   &gt;&gt;&gt; let c = defaultConfig { login = "your_login", token = "your_token" }
--   
--   &gt;&gt;&gt; withConfig c $ coprs "codeblock"
--   </pre>
withConfig :: CoprConfig -> (CoprConfig -> IO a) -> IO a

-- | Add a build to a copr project.
--   
--   This makes use of the
--   <tt>/api/coprs<i>[username]\</i>[project]/new_build/</tt> endpoint.
--   
--   <pre>
--   &gt;&gt;&gt; withConfig c $ addBuild "codeblock" "testproject" (CoprBuild (NEL.fromList ["http://example.com/foo-1.0.0.src.rpm"]) 2048 3600)
--   </pre>
addBuild :: Username -> ProjectName -> CoprBuild -> CoprConfig -> IO CoprBuildResponse

-- | Check the status of a copr build.
--   
--   This makes use of the <tt>/api/coprs/build_status/[build_id]/</tt>
--   endpoint.
--   
--   <pre>
--   &gt;&gt;&gt; withConfig c $ buildStatus 1033
--   </pre>
buildStatus :: Int -> CoprConfig -> IO CoprStatusResponse

-- | Retrieve a list of copr projects for an individual user.
--   
--   This makes use of the <tt>/api/coprs/[username]/</tt> endpoint.
--   
--   <pre>
--   &gt;&gt;&gt; withConfig c $ coprs "codeblock"
--   </pre>
coprs :: Username -> CoprConfig -> IO Coprs

-- | Create a new copr project.
--   
--   This makes use of the <tt>/api/coprs/[username]/new/</tt> endpoint.
--   
--   <pre>
--   &gt;&gt;&gt; withConfig c $ new "codeblock" (CoprProject "testproject" [] [] (NEL.fromList ["fedora-20-x86_64"]))
--   </pre>
new :: Username -> CoprProject -> CoprConfig -> IO NewCoprResponse
instance Eq CoprConfig
instance Show CoprConfig
