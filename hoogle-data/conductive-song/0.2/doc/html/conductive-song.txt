-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | a library of functions which are useful for composing music
--   
--   This library contains functions which are useful for composing music,
--   including scales and pitch.
@package conductive-song
@version 0.2

module Sound.Conductive.Pitch
a440 :: Int
a440MIDI :: Int
a4MIDI :: Int
a4 :: Int
cent :: Double
pitches :: Int -> Int -> [Double]
pitchTableInWiki :: [Double]
notes :: [[Char]]
notesOctave :: Show a => a -> [[Char]]
octaves :: Show a => [a] -> [[Char]]
noteNames :: [[Char]]
pitchValues :: [Integer]
audibleSemitones :: [(Integer, Double)]
audiblePitches :: [([Char], (Integer, Double))]
pitchesAndNotes :: [(Integer, [Char])]
pLookup :: ((Integer, Double) -> b) -> [Char] -> Maybe b
pitch :: [Char] -> Maybe Integer
frequency :: [Char] -> Maybe Double
midiPitch :: [Char] -> Maybe Integer
semitoneToFreq :: Integer -> Maybe Double

module Sound.Conductive.Scale
chromaticRel :: [Integer]
ionianRel :: [Integer]
dorianRel :: [Integer]
phrygianRel :: [Integer]
lydianRel :: [Integer]
mixolydianRel :: [Integer]
aeolianRel :: [Integer]
locrianRel :: [Integer]
absoluteScaleMaker :: Num a => [a] -> Int -> a -> [a]
chromatic :: Int -> Integer -> [Integer]
ionian :: Int -> Integer -> [Integer]
dorian :: Int -> Integer -> [Integer]
phrygian :: Int -> Integer -> [Integer]
lydian :: Int -> Integer -> [Integer]
mixolydian :: Int -> Integer -> [Integer]
aeolian :: Int -> Integer -> [Integer]
locrian :: Int -> Integer -> [Integer]
bilawalRel :: [Integer]
khamajRel :: [Integer]
kafiRel :: [Integer]
asavariRel :: [Integer]
bhairaviRel :: [Integer]
bhairavRel :: [Integer]
kalyanRel :: [Integer]
marwaRel :: [Integer]
poorviRel :: [Integer]
todiRel :: [Integer]
bilawal :: Int -> Integer -> [Integer]
khamaj :: Int -> Integer -> [Integer]
kafi :: Int -> Integer -> [Integer]
asavari :: Int -> Integer -> [Integer]
bhairavi :: Int -> Integer -> [Integer]
bhairav :: Int -> Integer -> [Integer]
kalyan :: Int -> Integer -> [Integer]
marwa :: Int -> Integer -> [Integer]
poorvi :: Int -> Integer -> [Integer]
todi :: Int -> Integer -> [Integer]
mold' :: (Num a, Ord a) => [a] -> [a] -> [a] -> [a]
mold :: (Num a, Ord a) => [a] -> [a] -> a -> [a]
fitToScale :: (Num b, Ord b) => [b] -> [b] -> [b]
rawToScaleDegrees :: (Num a, Ord a) => [a] -> [a] -> [a]
transpose :: Num a => a -> [a] -> [a]
transposeHeadTo :: Num a => a -> [a] -> [a]
maxInterval' :: (Fractional a, Ord a) => a -> [a] -> [a] -> [a]
maxInterval :: (Fractional a, Ord a) => a -> [a] -> [a]
