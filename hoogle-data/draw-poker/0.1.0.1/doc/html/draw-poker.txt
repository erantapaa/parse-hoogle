-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | playing draw poker
--   
@package draw-poker
@version 0.1.0.1

module Game.Poker.Cards
data Suit
Hearts :: Suit
Diamonds :: Suit
Clubs :: Suit
Spades :: Suit
data Card
allCards :: [Card]
cardSuit :: Card -> Suit
cardNumber :: Card -> Int
cardStrength :: Card -> Int
h2 :: Card
h3 :: Card
h4 :: Card
h5 :: Card
h6 :: Card
h7 :: Card
h8 :: Card
h9 :: Card
h10 :: Card
hJ :: Card
hQ :: Card
hK :: Card
hA :: Card
d2 :: Card
d3 :: Card
d4 :: Card
d5 :: Card
d6 :: Card
d7 :: Card
d8 :: Card
d9 :: Card
d10 :: Card
dJ :: Card
dQ :: Card
dK :: Card
dA :: Card
c2 :: Card
c3 :: Card
c4 :: Card
c5 :: Card
c6 :: Card
c7 :: Card
c8 :: Card
c9 :: Card
c10 :: Card
cJ :: Card
cQ :: Card
cK :: Card
cA :: Card
s2 :: Card
s3 :: Card
s4 :: Card
s5 :: Card
s6 :: Card
s7 :: Card
s8 :: Card
s9 :: Card
s10 :: Card
sJ :: Card
sQ :: Card
sK :: Card
sA :: Card
instance Show Suit
instance Read Suit
instance Eq Suit
instance Ord Suit
instance Enum Suit
instance Eq Card
instance Ord Card
instance Show Card

module Game.Poker.Hands
data Hand
toHand :: [Card] -> Maybe Hand
fromHand :: Hand -> [Card]
data PokerHand
HighCards :: PokerHand
OnePair :: PokerHand
TwoPair :: PokerHand
ThreeOfAKind :: PokerHand
Straight :: PokerHand
Flush :: PokerHand
FullHouse :: PokerHand
FourOfAKind :: PokerHand
StraightFlush :: PokerHand
pokerHand :: Hand -> (PokerHand, Card)
straightHint :: Hand -> Maybe Card
flushHint :: Hand -> Maybe Card
nOfKindHint :: Int -> Hand -> Maybe [[Card]]
straightFlush :: Hand -> Maybe (PokerHand, Card)
fourOfAKind :: Hand -> Maybe (PokerHand, Card)
fullHouse :: Hand -> Maybe (PokerHand, Card)
flush :: Hand -> Maybe (PokerHand, Card)
straight :: Hand -> Maybe (PokerHand, Card)
threeOfAKind :: Hand -> Maybe (PokerHand, Card)
twoPair :: Hand -> Maybe (PokerHand, Card)
onePair :: Hand -> Maybe (PokerHand, Card)
type DiscardList = [Card]
type Deck = [Card]
getHand :: Deck -> Maybe (Hand, Deck)
drawHand :: Deck -> DiscardList -> Hand -> Maybe (Hand, Deck)
getDiscardList :: Hand -> IO (Maybe DiscardList)
judgeVictory :: (PokerHand, Card) -> (PokerHand, Card) -> Ordering
instance Show Hand
instance Eq Hand
instance Ord Hand
instance Show PokerHand
instance Read PokerHand
instance Eq PokerHand
instance Ord PokerHand
instance Enum PokerHand

module Game.Poker.AI
aiSelectDiscards :: Hand -> DiscardList
nOfKindDiscards :: Hand -> DiscardList

module Game.Poker.Simple
simpleGame :: IO ()
instance Eq Player

module Game.Poker
