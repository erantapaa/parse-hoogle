-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | It provides the functionality like unix "uniq" utility
--   
@package Unique
@version 0.4.2


-- | Library provides functions to find unique and duplicate elements in
--   the list. Unlike Unique or UniqueStrict modules this one uses
--   Data.HashMap.Strict for calculation.
--   
--   The elements in the list can be unsorted (do not have an instance of
--   Ord class, but Hashable is needed). This implementation is good for
--   ByteStrings.
module Data.List.UniqueUnsorted

-- | <a>repeated</a> finds only the elements that are present more than
--   once in the list. Example:
--   
--   <pre>
--   repeated  "foo bar" == "o"
--   </pre>
repeated :: (Hashable a, Eq a) => [a] -> [a]

-- | The <a>repeatedBy</a> function behaves just like <a>repeated</a>,
--   except it uses a user-supplied equality predicate.
--   
--   <pre>
--   repeatedBy (&gt;2) "This is the test line" == " stei"
--   </pre>
repeatedBy :: (Hashable a, Eq a) => (Int -> Bool) -> [a] -> [a]

-- | <a>unique</a> gets only unique elements, that do not have duplicates.
--   
--   <pre>
--   unique  "foo bar" == " abrf"
--   </pre>
unique :: (Hashable a, Eq a) => [a] -> [a]

-- | <a>count</a> of each element in the list. Example:
--   
--   <pre>
--   count "This is the test line" == [(' ',4),('s',3),('T',1),('t',3),('e',3),('h',2),('i',3),('l',1),('n',1)]
--   </pre>
count :: (Hashable a, Eq a) => [a] -> [(a, Int)]

-- | <a>count_</a> of each elements in the list, it sorts by their number.
--   Example:
--   
--   <pre>
--   count_ "This is the test line" == [('n',1),('l',1),('T',1),('h',2),('i',3),('e',3),('t',3),('s',3),(' ',4)]
--   </pre>
count_ :: (Hashable a, Eq a) => [a] -> [(a, Int)]


-- | Library provides functions to find unique and duplicate elements in
--   the list. Unlike Data.List.Unique this one uses Data.Map.Strict for
--   calculations. So it's much faster and it uses less memory.
module Data.List.UniqueStrict

-- | <a>repeated</a> finds only the elements that are present more than
--   once in the list. Example:
--   
--   <pre>
--   repeated  "foo bar" == "o"
--   </pre>
repeated :: Ord a => [a] -> [a]

-- | The <a>repeatedBy</a> function behaves just like repeated, except it
--   uses a user-supplied equality predicate.
--   
--   <pre>
--   repeatedBy (&gt;2) "This is the test line" == " eist"
--   </pre>
repeatedBy :: Ord a => (Int -> Bool) -> [a] -> [a]

-- | <a>unique</a> gets only unique elements, that do not have duplicates.
--   It sorts them. Example:
--   
--   <pre>
--   unique  "foo bar" == " abfr"
--   </pre>
unique :: Ord a => [a] -> [a]

-- | <a>count</a> of each element in the list, it sorts by keys (elements).
--   Example:
--   
--   <pre>
--   count "foo bar" == [(' ',1),('a',1),('b',1),('f',1),('o',2),('r',1)]
--   </pre>
count :: Ord a => [a] -> [(a, Int)]

-- | <a>count_</a> of each elements in the list, it sorts by their number.
--   Example:
--   
--   <pre>
--   count_ "foo bar" == [(' ',1),('a',1),('b',1),('f',1),('r',1),('o',2)]
--   </pre>
count_ :: Ord a => [a] -> [(a, Int)]


-- | Library provides the functions to find unique and duplicate elements
--   in the list
module Data.List.Unique

-- | <a>sortUniq</a> sorts the list and removes the duplicates of elements.
--   Example:
--   
--   <pre>
--   sortUniq "foo bar" == " abfor"
--   </pre>
sortUniq :: Ord a => [a] -> [a]

-- | <a>repeated</a> finds only the elements that are present more than
--   once in the list. Example:
--   
--   <pre>
--   repeated  "foo bar" == "o"
--   </pre>
repeated :: Ord a => [a] -> [a]

-- | The repeatedBy function behaves just like repeated, except it uses a
--   user-supplied equality predicate.
--   
--   <pre>
--   repeatedBy (&gt;2) "This is the test line" == " eist"
--   </pre>
repeatedBy :: Ord a => (Int -> Bool) -> [a] -> [a]

-- | <a>unique</a> gets only unique elements, that do not have duplicates.
--   It sorts them. Example:
--   
--   <pre>
--   unique  "foo bar" == " abfr"
--   </pre>
unique :: Ord a => [a] -> [a]

-- | <a>count</a> of each element in the list, it sorts by keys (elements).
--   Example:
--   
--   <pre>
--   count "foo bar" == [(' ',1),('a',1),('b',1),('f',1),('o',2),('r',1)]
--   </pre>
count :: Ord a => [a] -> [(a, Int)]

-- | <a>count_</a> of each elements in the list, it sorts by their number.
--   Example:
--   
--   <pre>
--   count_ "foo bar" == [(' ',1),('a',1),('b',1),('f',1),('r',1),('o',2)]
--   </pre>
count_ :: Ord a => [a] -> [(a, Int)]

-- | <a>countElem</a> gets the number of occurrences of the specified
--   element. Example:
--   
--   <pre>
--   countElem 'o' "foo bar" == 2
--   </pre>
countElem :: Eq a => a -> [a] -> Int
