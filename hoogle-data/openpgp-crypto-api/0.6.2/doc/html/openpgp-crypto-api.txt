-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Implement cryptography for OpenPGP using crypto-api compatible libraries
--   
--   This is a wrapper around
--   <a>http://hackage.haskell.org/package/crypto-api</a> and related
--   libraries that currently does fingerprint generation, signature
--   generation, signature verification, and both asymmetric and symmetric
--   encryption and decryption.
--   
--   It is indended to be used with
--   <a>http://hackage.haskell.org/package/openpgp</a>
--   
--   It is intended that you use qualified imports with this library.
--   
--   <pre>
--   import qualified Data.OpenPGP.CryptoAPI as OpenPGP
--   </pre>
@package openpgp-crypto-api
@version 0.6.2

module Data.OpenPGP.CryptoAPI

-- | Generate a key fingerprint from a PublicKeyPacket or SecretKeyPacket
--   <a>http://tools.ietf.org/html/rfc4880#section-12.2</a>
fingerprint :: Packet -> String

-- | Make a signature
--   
--   In order to set more options on a signature, pass in a signature
--   packet.
sign :: CryptoRandomGen g => Message -> SignatureOver -> HashAlgorithm -> String -> Integer -> g -> (SignatureOver, g)

-- | Verify a message signature
verify :: Message -> SignatureOver -> SignatureOver
encrypt :: CryptoRandomGen g => [ByteString] -> Message -> SymmetricAlgorithm -> Message -> g -> Either GenError (Message, g)

-- | Decrypt an OpenPGP message using secret key
decryptAsymmetric :: Message -> Message -> Maybe Message

-- | Decrypt an OpenPGP message using passphrase
decryptSymmetric :: [ByteString] -> Message -> Maybe Message
decryptSecretKey :: ByteString -> Packet -> Maybe Packet
