-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Force-directed node placement intended for incremental graph drawing
--   
--   Defines basic methods for force-directed node displacement that can be
--   combined into an incremental graph-drawing procedure. See
--   graph-rewriting-ski package for an example.
@package graph-rewriting-layout
@version 0.5.3

module GraphRewriting.Layout.Rotation
newtype Rotation
Rotation :: Angle -> Rotation
rotation :: Rotation -> Angle
type Angle = Double
type Impulse = Angle -> Angle
type Momentum = Impulse -> Rotation -> Rotation
v01 :: Vector2
meanAngle :: [Angle] -> Angle
momSum :: [Momentum] -> Momentum
approach :: Rotation -> Momentum
momentum :: Angle -> Momentum
angle :: Vector2 -> Vector2 -> Angle
rotate :: Angle -> Vector2 -> Vector2

module GraphRewriting.Layout.Position
newtype Position
Position :: Vector2 -> Position
position :: Position -> Vector2

module GraphRewriting.Layout.PortSpec

-- | Port position relative to the node center, and the direction in which
--   edges should stick out.
class PortSpec n
portSpec :: PortSpec n => n -> [(Vector2, Vector2)]
sameDir :: Vector2 -> (Vector2, Vector2)
portDir :: PortSpec n => n -> [Vector2]
relPortPos :: PortSpec n => n -> [Vector2]
absPortPos :: (PortSpec n, View Position n) => n -> [Vector2]
propOfPort :: View [Port] n => (n -> [a]) -> Edge -> n -> [a]

module GraphRewriting.Layout.RotPortSpec
rotPortSpec :: (PortSpec n, View Rotation n) => n -> [(Vector2, Vector2)]
relRotPortPos :: (PortSpec n, View Rotation n) => n -> [Vector2]
absRotPortSpec :: (PortSpec n, View Position n, View Rotation n) => n -> [(Vector2, Vector2)]
absRotPortPos :: (PortSpec n, View Position n, View Rotation n) => n -> [Vector2]
angularMomentum :: (View Position n, PortSpec n, View Rotation n, View [Port] n) => Node -> WithGraph n Momentum
focalPoint :: [Vector2] -> Vector2
average :: Fractional a => [a] -> a

module GraphRewriting.Layout.Coulomb
coulombForce :: View Position n => Node -> WithGraph n Force

module GraphRewriting.Layout.Gravitation
centralGravitation :: View Position n => Node -> WithGraph n Force
gravitation :: View Position n => Node -> Rewrite n Force

module GraphRewriting.Layout.SpringEmbedder
springForce :: (View [Port] n, View Position n, View Rotation n, PortSpec n) => Double -> Node -> WithGraph n Force

module GraphRewriting.Layout.Wrapper

-- | Wraps a value of type <tt>w</tt>, augmenting it with layout
--   information
data Wrapper w
Wrapper :: Rotation -> Position -> w -> Wrapper w
wRot :: Wrapper w -> Rotation
wPos :: Wrapper w -> Position
wrappee :: Wrapper w -> w

-- | Wraps the nodes of a graph, augmenting them with layout information
wrapGraph :: Graph n -> Graph (Wrapper n)
updateWrappee :: w -> Wrapper t -> Wrapper w
instance [overlap ok] View Position (Wrapper n)
instance [overlap ok] View Rotation (Wrapper n)
instance [overlap ok] PortSpec n => PortSpec (Wrapper n)
instance [overlap ok] View v n => View v (Wrapper n)
