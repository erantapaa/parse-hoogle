-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A basic library for defining units of time as types.
--   
--   In many cases, it is useful (either for error checking or
--   documentation reasons) to define input and output types as having a
--   particular unit of time. In addition, by creating a type class
--   defining type units, this library should make it easier to separate
--   the units of time the developer wants to think in versus the units of
--   time the library author wants to think in.
@package time-units
@version 1.0.0


-- | This module defines types for many useful time periods, as well as
--   mechanisms for converting between them.
module Data.Time.Units

-- | A generic class that describes all the units of time. We use
--   microseconds here because that tends to be what GHC (at least) tends
--   to use as its system-level minimum tick size.
class TimeUnit a
toMicroseconds :: TimeUnit a => a -> Integer
fromMicroseconds :: TimeUnit a => Integer -> a
data Attosecond
data Femtosecond
data Picosecond
data Nanosecond
data Microsecond
data Millisecond
data Second
data Minute
data Hour
data Day
data Week
data Fortnight

-- | Add two times together to get a useful third time unit. As per usual,
--   you'll want to make sure that you are careful regarding precision.
--   This function goes through microseconds as an intermediary form.
addTime :: (TimeUnit a, TimeUnit b, TimeUnit c) => a -> b -> c

-- | Subtract the second time from the first, to get a useful third time
--   unit. As per usual, you'll want to make sure that you are careful
--   regarding precision. This function goes through microseconds as an
--   intermediary form.
subTime :: (TimeUnit a, TimeUnit b, TimeUnit c) => a -> b -> c

-- | Convert one time unit to another. Note that if you move from a smaller
--   time unit to a larger one, or between two time units smaller than a
--   microsecond, you will lose precision.
convertUnit :: (TimeUnit a, TimeUnit b) => a -> b

-- | Get the current CPU time in your favorite units. This is probably not
--   very useful in itself, but is likely useful for comparison purposes
--   ...
getCPUTimeWithUnit :: TimeUnit a => IO a
instance Typeable Attosecond
instance Typeable Femtosecond
instance Typeable Picosecond
instance Typeable Nanosecond
instance Typeable Microsecond
instance Typeable Millisecond
instance Typeable Second
instance Typeable Minute
instance Typeable Hour
instance Typeable Day
instance Typeable Week
instance Typeable Fortnight
instance Enum Attosecond
instance Eq Attosecond
instance Integral Attosecond
instance Data Attosecond
instance Num Attosecond
instance Ord Attosecond
instance Real Attosecond
instance Ix Attosecond
instance Enum Femtosecond
instance Eq Femtosecond
instance Integral Femtosecond
instance Data Femtosecond
instance Num Femtosecond
instance Ord Femtosecond
instance Real Femtosecond
instance Ix Femtosecond
instance Enum Picosecond
instance Eq Picosecond
instance Integral Picosecond
instance Data Picosecond
instance Num Picosecond
instance Ord Picosecond
instance Real Picosecond
instance Ix Picosecond
instance Enum Nanosecond
instance Eq Nanosecond
instance Integral Nanosecond
instance Data Nanosecond
instance Num Nanosecond
instance Ord Nanosecond
instance Real Nanosecond
instance Ix Nanosecond
instance Enum Microsecond
instance Eq Microsecond
instance Integral Microsecond
instance Data Microsecond
instance Num Microsecond
instance Ord Microsecond
instance Real Microsecond
instance Ix Microsecond
instance Enum Millisecond
instance Eq Millisecond
instance Integral Millisecond
instance Data Millisecond
instance Num Millisecond
instance Ord Millisecond
instance Real Millisecond
instance Ix Millisecond
instance Enum Second
instance Eq Second
instance Integral Second
instance Data Second
instance Num Second
instance Ord Second
instance Real Second
instance Ix Second
instance Enum Minute
instance Eq Minute
instance Integral Minute
instance Data Minute
instance Num Minute
instance Ord Minute
instance Real Minute
instance Ix Minute
instance Enum Hour
instance Eq Hour
instance Integral Hour
instance Data Hour
instance Num Hour
instance Ord Hour
instance Real Hour
instance Ix Hour
instance Enum Day
instance Eq Day
instance Integral Day
instance Data Day
instance Num Day
instance Ord Day
instance Real Day
instance Ix Day
instance Enum Week
instance Eq Week
instance Integral Week
instance Data Week
instance Num Week
instance Ord Week
instance Real Week
instance Ix Week
instance Enum Fortnight
instance Eq Fortnight
instance Integral Fortnight
instance Data Fortnight
instance Num Fortnight
instance Ord Fortnight
instance Real Fortnight
instance Ix Fortnight
instance Read Fortnight
instance Show Fortnight
instance TimeUnit Fortnight
instance Read Week
instance Show Week
instance TimeUnit Week
instance Read Day
instance Show Day
instance TimeUnit Day
instance Read Hour
instance Show Hour
instance TimeUnit Hour
instance Read Minute
instance Show Minute
instance TimeUnit Minute
instance Read Second
instance Show Second
instance TimeUnit Second
instance Read Millisecond
instance Show Millisecond
instance TimeUnit Millisecond
instance Read Microsecond
instance Show Microsecond
instance TimeUnit Microsecond
instance Read Nanosecond
instance Show Nanosecond
instance TimeUnit Nanosecond
instance Read Picosecond
instance Show Picosecond
instance TimeUnit Picosecond
instance Read Femtosecond
instance Show Femtosecond
instance TimeUnit Femtosecond
instance Read Attosecond
instance Show Attosecond
instance TimeUnit Attosecond
