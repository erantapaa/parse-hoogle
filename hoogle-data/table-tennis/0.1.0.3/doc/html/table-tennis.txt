-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A table tennis game tracking engine
--   
--   A table tennis game tracking engine. This is purely a facility for
--   managing a game.
@package table-tennis
@version 0.1.0.3

module Data.TableTennis
class Playable a
data Player
Player :: String -> Int -> Player
name :: Player -> String
handicap :: Player -> Int
data Team
Team :: Player -> Player -> Team
topPlayer :: Team -> Player
bottomPlayer :: Team -> Player
data GameLength
Eleven :: GameLength
TwentyOne :: GameLength
data Game a
Game :: a -> a -> Int -> Int -> GameLength -> Side -> Game a
leftSide :: Game a -> a
rightSide :: Game a -> a
leftScore :: Game a -> Int
rightScore :: Game a -> Int
gameLength :: Game a -> GameLength
serving :: Game a -> Side
data Side
LeftSide :: Side
RightSide :: Side

-- | New SinglesGame with specified Players<i>GameLength</i>service Side,
--   scores = 0 with the scores set to 0
newSinglesGame :: Player -> Player -> GameLength -> Side -> Game Player

-- | A new DoublesGame with specified Teams<i>GameLength</i>serving Side
--   with the scores set to 0
newDoublesGame :: Team -> Team -> GameLength -> Side -> Game Team

-- | Add a point to the specified Side's score
winPoint :: Playable a => Game a -> Side -> Game a

-- | How many serves each player gets according to GameLength
serviceLength :: GameLength -> Int

-- | Convert GameLength to numerical representation
valueOf :: GameLength -> Int

-- | True if it is another Player/Team's turn to serve
serviceToChange :: Playable a => Game a -> Bool

-- | The winner of a Game or Nothing if nobody has won
winner :: Playable a => Game a -> Maybe a

-- | Makes the receiver become the server, rotates the serving side
--   Precondition: we have already determined it is time to change service
changeService :: Playable a => Game a -> Game a

-- | Exchange sides of the table (typically after a Game is won)
swapSides :: Playable a => Game a -> Game a
instance Show Player
instance Show Team
instance Show GameLength
instance Show Side
instance Show a => Show (Game a)
instance Playable Team
instance Playable Player
