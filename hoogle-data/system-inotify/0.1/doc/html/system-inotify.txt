-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binding to Linux's inotify interface
--   
--   Binding to Linux's inotify interface
@package system-inotify
@version 0.1


-- | This module wraps Linux's inotify interface for directory change
--   notification. This Haddock doesn't provide full documentation about
--   the semantics of this system. For that you should read the manual
--   pages for inotify which can be found at
--   <a>http://linux.die.net/man/7/inotify</a>
module System.Inotify

-- | These are the events which can be observed
data ChangeEvent
Accessed :: ChangeEvent
Modified :: ChangeEvent
AttributeModified :: ChangeEvent

-- | writable file was closed
WritableClosed :: ChangeEvent

-- | non writable file was closed
Closed :: ChangeEvent
Opened :: ChangeEvent
MovedFrom :: ChangeEvent
MovedTo :: ChangeEvent

-- | the watched directory/file was moved
SelfMoved :: ChangeEvent
Created :: ChangeEvent

-- | subfile was deleted
Deleted :: ChangeEvent

-- | the watch directory/file was deleted
SelfDeleted :: ChangeEvent

-- | When registering a watch, you can also give a number of options
data Option

-- | don't dereference target if it's a symbolic link
DontFollow :: Option

-- | Add events to a watch if that given path is already being watched
MaskAdd :: Option

-- | Monitor for one event only
Oneshot :: Option

-- | Only watch if the target is a directory
OnlyDir :: Option

-- | The kernel can also report one of these alerts
data Alert

-- | watch was implicitly removed
Ignored :: Alert
QueueOverflowed :: Alert
Unmounted :: Alert

-- | These are the events which the kernel reports back to us.
data Event
Event :: Watch -> [ChangeEvent] -> [Alert] -> Word32 -> ByteString -> Event
evwatch :: Event -> Watch
evevents :: Event -> [ChangeEvent]
evalerts :: Event -> [Alert]
evcookie :: Event -> Word32
evname :: Event -> ByteString
data Inotify
data Watch

-- | Create a new Inotify object. Each inotify object has its own stream of
--   events which can be read and it's own Watch namespace (so n.b. that
--   <a>Watch</a> objects from different Inotify's can compare equal).
inotify :: IO Inotify

-- | Add a watch on a file or directory
addWatch :: Inotify -> FilePath -> [ChangeEvent] -> [Option] -> IO Watch

-- | Read the next event from an <a>Inotify</a>
next :: Inotify -> IO Event

-- | A list containing all change events
allChangeEvents :: [ChangeEvent]
instance Show Event
instance Show Watch
instance Eq Watch
instance Show Alert
instance Eq Alert
instance Enum Alert
instance Show Option
instance Eq Option
instance Enum Option
instance Show ChangeEvent
instance Eq ChangeEvent
instance Enum ChangeEvent
