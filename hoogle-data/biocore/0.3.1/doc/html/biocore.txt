-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A bioinformatics library
--   
--   A set of core definitions and data structures commonly used in
--   bioinformatics. The intention is that bioinformatics libraries will
--   use this as a common ground to avoid needless incompatibilities and
--   duplicated work.
@package biocore
@version 0.3.1


-- | Define common data types for features of sequences
module Bio.Core.Strand

-- | A <a>Strand</a> is either plus (forward) or minus (reverse or
--   reverse-complement)
data Strand
Plus :: Strand
Minus :: Strand
instance Typeable Strand
instance Eq Strand
instance Ord Strand
instance Read Strand
instance Show Strand


-- | This module defines common data structures for biosequences, i.e. data
--   that represents nucleotide or protein sequences.
--   
--   Basically, anything resembling or wrapping a sequence should implement
--   the <a>BioSeq</a> class (and <a>BioSeqQual</a> if quality information
--   is available).
--   
--   The data types are mostly wrappers from lazy bytestrings from
--   <a>Lazy</a> and <a>Char8</a>, but most users of this module should not
--   need to access the underlying data types directly.
module Bio.Core.Sequence

-- | A quality value is in the range 0..255.
newtype Qual
Qual :: Word8 -> Qual
unQual :: Qual -> Word8

-- | An <a>Offset</a> is a zero-based index into a sequence
newtype Offset
Offset :: Int64 -> Offset
unOff :: Offset -> Int64

-- | Sequence data are lazy bytestrings of ASCII characters.
newtype SeqData
SeqData :: ByteString -> SeqData
unSD :: SeqData -> ByteString

-- | Sequence data are lazy bytestrings of ASCII characters.
newtype SeqLabel
SeqLabel :: ByteString -> SeqLabel
unSL :: SeqLabel -> ByteString

-- | Quality data are lazy bytestrings of <a>Qual</a>s.
newtype QualData
QualData :: ByteString -> QualData
unQD :: QualData -> ByteString

-- | The <a>BioSeq</a> class models sequence data, and any data object that
--   represents a biological sequence should implement it.
class BioSeq s where seqid = seqlabel seqheader = seqlabel seqlabel = seqid
seqid :: BioSeq s => s -> SeqLabel
seqheader :: BioSeq s => s -> SeqLabel
seqdata :: BioSeq s => s -> SeqData
seqlength :: BioSeq s => s -> Offset
seqlabel :: BioSeq s => s -> SeqLabel

-- | The BioSeqQual class extends <a>BioSeq</a> with quality data. Any
--   correspondig data object should be an instance, this will allow Fasta
--   formatted quality data <a>toFastaQual</a>, as well as the combined
--   FastQ format (via <a>toFastQ</a>).
class BioSeq sq => BioSeqQual sq
seqqual :: BioSeqQual sq => sq -> QualData

-- | Any <a>BioSeq</a> can be formatted as Fasta, 60-char lines.
toFasta :: BioSeq s => s -> ByteString

-- | Output Fasta-formatted quality data (.qual files), where quality
--   values are output as whitespace-separated integers.
toFastaQual :: BioSeqQual s => s -> ByteString

-- | Output FastQ-formatted data. For simplicity, only the Sanger quality
--   format is supported, and only four lines per sequence (i.e. no line
--   breaks in sequence or quality data).
toFastQ :: BioSeqQual s => s -> ByteString
instance Typeable SeqData
instance Typeable SeqLabel
instance Typeable Qual
instance Typeable QualData
instance Typeable Offset
instance Eq SeqData
instance Ord SeqData
instance IsString SeqData
instance Show SeqData
instance Stringable SeqData
instance Eq SeqLabel
instance Ord SeqLabel
instance IsString SeqLabel
instance Show SeqLabel
instance Stringable SeqLabel
instance Show Qual
instance Eq Qual
instance Ord Qual
instance Num Qual
instance Enum Qual
instance Real Qual
instance Integral Qual
instance Eq QualData
instance Ord QualData
instance Show QualData
instance Stringable QualData
instance Show Offset
instance Eq Offset
instance Ord Offset
instance Num Offset
instance Enum Offset
instance Real Offset
instance Integral Offset
instance Monoid QualData
instance Monoid SeqLabel
instance Monoid SeqData


-- | Re-exporting everything from sub-modules for simplicity
module Bio.Core
