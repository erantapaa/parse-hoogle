-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Monadic List alternative to lazy I/O
--   
--   Git repository is at: <a>http://github.com/Peaker/mlist</a>
--   
--   Â© 2009 by Eyal Lotem; BSD3 license.
@package mlist
@version 0.0.2

module Data.MList
newtype Monad m => MList m a
MList :: m (MListItem m a) -> MList m a
unMList :: MList m a -> m (MListItem m a)
data Monad m => MListItem m a
MNil :: MListItem m a
MCons :: a -> (MList m a) -> MListItem m a
empty :: Monad m => MList m a
cons :: Monad m => a -> MList m a -> MList m a
singleton :: Monad m => a -> MList m a
fromList :: Monad m => [a] -> MList m a
toList :: Monad m => MList m a -> m [a]
execute :: Monad m => MList m a -> m ()
zipWith :: Monad m => (a -> b -> c) -> MList m a -> MList m b -> MList m c
take :: (Integral i, Monad m) => i -> MList m a -> MList m a
repeat :: Monad m => a -> MList m a
replicate :: (Monad m, Integral i) => i -> a -> MList m a
mrepeat :: Monad m => m a -> MList m a
mreplicate :: (Monad m, Integral i) => i -> m a -> MList m a
cycle :: Monad m => MList m a -> MList m a
mfoldr :: Monad m => (a -> m b -> m b) -> m b -> MList m a -> m b
mfoldr' :: Monad m => (a -> MList m b -> MList m b) -> MList m b -> MList m a -> MList m b
map :: Monad m => (a -> b) -> MList m a -> MList m b
condense :: Monad m => MList m (m a) -> MList m a
msequence :: Monad m => MList m (m a) -> m [a]
msequence_ :: Monad m => MList m (m a) -> m ()
mmap :: Monad m => (a -> m b) -> MList m a -> MList m b
mfor :: Monad m => MList m a -> (a -> m b) -> MList m b
append :: Monad m => MList m a -> MList m a -> MList m a
concat :: Monad m => MList m (MList m a) -> MList m a
mmerge :: Monad m => m (MList m a) -> MList m a
instance Monad m => Monad (MList m)
instance Monad m => Applicative (MList m)
instance Monad m => Functor (MList m)
instance Monad m => Monoid (MList m a)

module Data.MList.Control
while :: Monad m => m Bool -> m a -> MList m a
forever :: Monad m => m a -> MList m a

module Data.MList.IO
hGetLines :: Handle -> MList IO String

module Data.MList.Memo
memo :: MList IO a -> IO (MList IO a)
