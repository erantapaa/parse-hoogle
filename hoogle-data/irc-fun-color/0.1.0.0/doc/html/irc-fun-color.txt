-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Add color and style decorations to IRC messages.
--   
@package irc-fun-color
@version 0.1.0.0


-- | This module allows you to add color and style to IRC text messages.
--   Decoding style-encoded messages isn't implemented currently.
--   
--   Building styled strings is done in two steps:
--   
--   <ol>
--   <li>Construct the string using combinators</li>
--   <li>Encode it into the IRC message styling format</li>
--   </ol>
--   
--   The result you get is a style-encoded <a>String</a> which you can send
--   as an IRC message (e.g. using PRIVMSG).
--   
--   The combinators are:
--   
--   <ul>
--   <li>'()' : Apply a style to a styled string</li>
--   <li>'(&lt;&gt;)' : Styles strings are monoids, use '(&lt;&gt;)' to
--   concatenate them</li>
--   </ul>
--   
--   The tools for choosing styles for application are:
--   
--   <ul>
--   <li><a>Color</a> : Choose a (foreground) color</li>
--   <li><a>Decoration</a> : Choose a decoration style, e.g. bold or
--   underline</li>
--   <li><a>fg</a> : Choose a foreground color, you can use the
--   <a>Color</a> itself directly</li>
--   <li><a>bg</a> : Choose background color</li>
--   <li><a>fgBg</a> : Choose both colors</li>
--   </ul>
--   
--   Once you build the styled string, use <a>encode</a> to obtain an
--   encoded <a>String</a> for use in IRC.
--   
--   Here are some examples. I assume here the <tt>OverloadedStrings</tt>
--   extension is enabled. If you prefer not to use it, you'll need to
--   directly apply <a>Pure</a> or <a>fromString</a> to <a>String</a>s
--   before styling (e.g. with '(#&gt;)').
--   
--   Green text:
--   
--   <pre>
--   Green #&gt; "hello beautiful world"
--   </pre>
--   
--   The same, but without the extension mentioned above:
--   
--   <pre>
--   Green #&gt; Pure "hello beautiful world"
--   </pre>
--   
--   Bold text:
--   
--   <pre>
--   Bold #&gt; "hello beautiful world"
--   </pre>
--   
--   Green text with some underlined text in the middle:
--   
--   <pre>
--   Green #&gt; ("hello " &lt;&gt; Underline #&gt; "beautiful" &lt;&gt; " world")
--   </pre>
--   
--   Red text on gray background:
--   
--   <pre>
--   Red `fgBg` Gray #&gt; "hello beautiful world"
--   </pre>
--   
--   Text with a red underlined part in the middle, and the whole string
--   with blue background:
--   
--   <pre>
--   ("hello " &lt;&gt; Red #&gt; Underline #&gt; "beaufitul" &lt;&gt; " world") &lt;# bg Blue
--   </pre>
--   
--   Three letters. The first is lime-on-black and bold. The second is
--   black-on-line. The third is again lime-on-black, and italicized:
--   
--   <pre>
--   Lime `fgBg` Black #&gt; (Bold #&gt; "A" &lt;&gt; Reverse #&gt; "B" &lt;&gt; Italic #&gt; "C")
--   </pre>
--   
--   Bold, underlined purple-on-white text:
--   
--   <pre>
--   Bold #&gt; Underline #&gt; Purple `fgBg` White #&gt; "hello beautiful world"
--   </pre>
module Network.IRC.Fun.Color

-- | One of the 16 available color codes.
data Color
White :: Color
Black :: Color
Navy :: Color
Green :: Color
Red :: Color
Maroon :: Color
Purple :: Color
Orange :: Color
Yellow :: Color
Lime :: Color
Teal :: Color
Cyan :: Color
Blue :: Color
Magenta :: Color
Gray :: Color
Silver :: Color

-- | A text decoration style.
data Decoration
Bold :: Decoration
Italic :: Decoration
Underline :: Decoration
Reverse :: Decoration

-- | Apply a style to a given string.
(#>) :: Style s => s -> StyledString -> StyledString

-- | Apply a style to a given string.
(<#) :: Style s => StyledString -> s -> StyledString

-- | Create a foreground color style with a given color.
fg :: Color -> FgBg

-- | Create a background color style with a given color.
bg :: Color -> FgBg

-- | Create a color style with a given foreground and background colors.
fgBg :: Color -> Color -> FgBg

-- | Convert a styled string value into an IRC style-coded text message.
encode :: StyledString -> String

-- | A class for types which add style formatting to a string. This is what
--   makes '()' work.
class Style s
style :: Style s => s -> StyledString -> StyledString

-- | A string tagged with style attributes.
data StyledString
Pure :: String -> StyledString
Colored :: (Maybe Color) -> (Maybe Color) -> StyledString -> StyledString
Decorated :: Decoration -> StyledString -> StyledString
Concat :: [StyledString] -> StyledString

-- | A color decoration, specifying text foreground and background colors.
data FgBg
FgBg :: (Maybe Color) -> (Maybe Color) -> FgBg

-- | A color specified by its red, green and blue components.
data RGB a
RGB :: a -> a -> a -> RGB a

-- | Return the default RGB values of IRC colors. Client often allow the
--   user to change the values, but these are the defaults.
toIrcRGB :: Num a => Color -> RGB a

-- | Return RGB values for color codes, using the Tango color scheme. It is
--   a rough mapping between IRC color names and the 16 terminal colors.
toTangoRGB :: Num a => Color -> RGB a

-- | Remove style from a string, returning just the content.
strip :: StyledString -> String
instance Enum Color
instance Eq Color
instance Show Color
instance Eq a => Eq (RGB a)
instance Show a => Show (RGB a)
instance Eq Decoration
instance Show Decoration
instance Show StyledString
instance Eq FgBg
instance Show FgBg
instance Show StyledChunk
instance Style Decoration
instance Style FgBg
instance Style Color
instance IsString StyledString
instance Monoid StyledString
