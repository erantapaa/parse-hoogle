-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Streaming HTML parser
--   
@package list-t-html-parser
@version 0.4.0.0

module ListT.HTMLParser

-- | A backtracking HTML-tokens stream parser.
data Parser m a

-- | A possibly detailed parser error. When <a>mzero</a> or <a>empty</a> is
--   used, an error value of <a>Nothing</a> is produced.
type Error = Maybe ErrorDetails
data ErrorDetails

-- | A text message
ErrorDetails_Message :: Text -> ErrorDetails

-- | Unexpected token
ErrorDetails_UnexpectedToken :: ErrorDetails

-- | End of input
ErrorDetails_EOI :: ErrorDetails

-- | Run a parser on a stream of HTML tokens, consuming only as many as
--   needed.
run :: Monad m => Parser m a -> ListT m Token -> m (Either Error a)

-- | End of input.
eoi :: Monad m => Parser m ()

-- | A token with HTML entities decoded and with spaces filtered out.
token :: Monad m => Parser m Token

-- | An HTML token as it is: without HTML-decoding and ignoring of spaces.
rawToken :: Monad m => Parser m Token

-- | A text token, which is completely composed of characters, which
--   satisfy the <a>isSpace</a> predicate.
space :: Monad m => Parser m Text

-- | An opening tag with HTML entities in values decoded.
openingTag :: Monad m => Parser m OpeningTag

-- | A closing tag.
closingTag :: Monad m => Parser m Identifier

-- | A text between tags with HTML entities decoded.
text :: Monad m => Parser m Text

-- | Contents of a comment.
comment :: Monad m => Parser m Text

-- | The auto-repaired textual HTML representation of an HTML-tree node.
--   
--   Useful for consuming HTML-formatted snippets.
--   
--   E.g., when the following parser:
--   
--   <pre>
--   openingTag *&gt; html
--   </pre>
--   
--   is run against the following HTML snippet:
--   
--   <pre>
--   &lt;ul&gt;
--     &lt;li&gt;I'm not your friend, &lt;b&gt;buddy&lt;/b&gt;!&lt;/li&gt;
--     &lt;li&gt;I'm not your buddy, &lt;b&gt;guy&lt;/b&gt;!&lt;/li&gt;
--     &lt;li&gt;He's not your guy, &lt;b&gt;friend&lt;/b&gt;!&lt;/li&gt;
--     &lt;li&gt;I'm not your friend, &lt;b&gt;buddy&lt;/b&gt;!&lt;/li&gt;
--   &lt;/ul&gt;
--   </pre>
--   
--   it'll produce the following text builder value:
--   
--   <pre>
--   &lt;li&gt;I'm not your friend, &lt;b&gt;buddy&lt;/b&gt;!&lt;/li&gt;
--   </pre>
--   
--   If you want to consume all children of a node, it's recommended to use
--   <a>properHTML</a> in combination with <a>many</a> or <a>many1</a>. For
--   details consult the docs on <a>properHTML</a>.
--   
--   <b>This parser is smart and handles and repairs broken HTML</b>:
--   
--   <ul>
--   <li>It repairs unclosed tags, interpreting them as closed singletons.
--   E.g., <tt>&lt;br&gt;</tt> will be consumed as
--   <tt>&lt;br/&gt;</tt>.</li>
--   <li>It handles orphan closing tags by ignoring them. E.g. it'll
--   consume the input <tt>&lt;a&gt;&lt;/b&gt;&lt;/a&gt;</tt> as
--   <tt>&lt;a&gt;&lt;/a&gt;</tt>.</li>
--   </ul>
html :: Monad m => Parser m Builder

-- | Same as <a>html</a>, but fails if the input begins with an orphan
--   closing tag. I.e., the input "&lt;/a&gt;&lt;b&gt;&lt;/b&gt;" will make
--   this parser fail.
--   
--   This parser is particularly useful for consuming all children in the
--   current context. E.g., running the following parser:
--   
--   <pre>
--   openingTag *&gt; (mconcat &lt;$&gt; many properHTML)
--   </pre>
--   
--   on the following input:
--   
--   <pre>
--   &lt;ul&gt;
--     &lt;li&gt;I'm not your friend, &lt;b&gt;buddy&lt;/b&gt;!&lt;/li&gt;
--     &lt;li&gt;I'm not your buddy, &lt;b&gt;guy&lt;/b&gt;!&lt;/li&gt;
--     &lt;li&gt;He's not your guy, &lt;b&gt;friend&lt;/b&gt;!&lt;/li&gt;
--     &lt;li&gt;I'm not your friend, &lt;b&gt;buddy&lt;/b&gt;!&lt;/li&gt;
--   &lt;/ul&gt;
--   </pre>
--   
--   will produce a merged text builder, which consists of the following
--   nodes:
--   
--   <pre>
--   &lt;li&gt;I'm not your friend, &lt;b&gt;buddy&lt;/b&gt;!&lt;/li&gt;
--   &lt;li&gt;I'm not your buddy, &lt;b&gt;guy&lt;/b&gt;!&lt;/li&gt;
--   &lt;li&gt;He's not your guy, &lt;b&gt;friend&lt;/b&gt;!&lt;/li&gt;
--   &lt;li&gt;I'm not your friend, &lt;b&gt;buddy&lt;/b&gt;!&lt;/li&gt;
--   </pre>
--   
--   Notice that unlike with <a>html</a>, it's safe to assume that it will
--   not consume the following closing <tt>&lt;/ul&gt;</tt> tag, because it
--   does not begin a valid HTML-tree node.
--   
--   Notice also that despite failing in case of the first broken token,
--   this parser handles the broken tokens in other cases the same way as
--   <a>html</a>.
properHTML :: Monad m => Parser m Builder

-- | Apply a parser at least one time.
many1 :: Monad m => Parser m a -> Parser m [a]

-- | Apply a parser multiple times until another parser is satisfied.
--   Returns results of both parsers.
manyTill :: Monad m => Parser m a -> Parser m b -> Parser m ([a], b)

-- | Skip any tokens until the provided parser is satisfied.
skipTill :: Monad m => Parser m a -> Parser m a

-- | Greedily consume all the input until the end, while running the
--   provided parser. Same as:
--   
--   <pre>
--   theParser &lt;* eoi
--   </pre>
total :: Monad m => Parser m a -> Parser m a
instance Show ErrorDetails
instance Eq ErrorDetails
instance Monad m => Functor (Parser m)
instance Monad m => Applicative (Parser m)
instance Monad m => MonadError Error (Parser m)
instance Monad m => MonadPlus (Parser m)
instance Monad m => Alternative (Parser m)
instance Monad m => Monad (Parser m)
