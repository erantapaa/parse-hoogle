-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Musical pitch representation.
--   
@package music-pitch
@version 1.9.0


-- | Common (Western classical) pitches, intervals and related types.
module Music.Pitch.Common.Types

-- | Number of octaves. May be negative, indicating a downward interval.
data Octaves

-- | Number of diatonic steps. May be negative, indicating a downward
--   interval.
data DiatonicSteps

-- | Number of chromatic steps. May be negative, indicating a downward
--   interval.
data ChromaticSteps

-- | Number of semitones. May be negative, indicating a downward interval.
type Semitones = ChromaticSteps

-- | The <i>number</i> component of an interval (fourth, fifth) etc. May be
--   negative, indicating a downward interval.
data Number

-- | The <i>quality</i> component of an interval (minor, major, augmented).
--   Generalized from single/double augmented/diminished to any number of
--   steps.
data Quality
Major :: Quality
Minor :: Quality
Perfect :: Quality
Augmented :: Integer -> Quality
Diminished :: Integer -> Quality

-- | The alteration implied by a quality is dependent on whether it is
--   attached to a major/minor vs. a perfect-style number. This type
--   represents the two possibilities.
data QualityType
PerfectType :: QualityType
MajorMinorType :: QualityType

-- | This type represents standard basis for intervbals.
data IntervalBasis
Chromatic :: IntervalBasis
Diatonic :: IntervalBasis

-- | Interval type.
newtype Interval
Interval :: (ChromaticSteps, DiatonicSteps) -> Interval
getInterval :: Interval -> (ChromaticSteps, DiatonicSteps)

-- | Pitch name component.
data Name
C :: Name
D :: Name
E :: Name
F :: Name
G :: Name
A :: Name
B :: Name

-- | Accidental, represented as number of alterations. Generalized from
--   natural and single/double sharp/flat to any number of steps.
data Accidental

-- | Pitch type.
newtype Pitch
Pitch :: Interval -> Pitch
getPitch :: Pitch -> Interval
instance Typeable Interval
instance Typeable Pitch
instance Eq ChromaticSteps
instance Ord ChromaticSteps
instance Show ChromaticSteps
instance Enum ChromaticSteps
instance Num ChromaticSteps
instance Real ChromaticSteps
instance Integral ChromaticSteps
instance Eq DiatonicSteps
instance Ord DiatonicSteps
instance Show DiatonicSteps
instance Enum DiatonicSteps
instance Num DiatonicSteps
instance Real DiatonicSteps
instance Integral DiatonicSteps
instance Eq Octaves
instance Ord Octaves
instance Num Octaves
instance Enum Octaves
instance Real Octaves
instance Integral Octaves
instance Eq Number
instance Ord Number
instance Num Number
instance Enum Number
instance Real Number
instance Integral Number
instance Eq Quality
instance Ord Quality
instance Show Quality
instance Eq QualityType
instance Ord QualityType
instance Read QualityType
instance Show QualityType
instance Eq Accidental
instance Ord Accidental
instance Num Accidental
instance Enum Accidental
instance Real Accidental
instance Integral Accidental
instance Eq Name
instance Ord Name
instance Show Name
instance Enum Name
instance Eq IntervalBasis
instance Ord IntervalBasis
instance Show IntervalBasis
instance Enum IntervalBasis
instance Eq Interval
instance Eq Pitch
instance Ord Pitch
instance AdditiveGroup DiatonicSteps
instance AdditiveGroup ChromaticSteps
instance Ord Interval
instance (IsPitch a, Alterable a) => IsPitch (Accidental -> a)
instance Alterable Accidental
instance Show Accidental
instance Show Number
instance Show Octaves


-- | Number component of intervals.
module Music.Pitch.Common.Number

-- | The <i>number</i> component of an interval (fourth, fifth) etc. May be
--   negative, indicating a downward interval.
data Number
class HasNumber a
number :: HasNumber a => a -> Number

-- | A synonym for <tt>1</tt>.
unison :: Number

-- | A synonym for <tt>1</tt>.
prime :: Number

-- | A synonym for <tt>2</tt>.
second :: Number

-- | A synonym for <tt>3</tt>.
third :: Number

-- | A synonym for <tt>4</tt>.
fourth :: Number

-- | A synonym for <tt>5</tt>.
fifth :: Number

-- | A synonym for <tt>6</tt>.
sixth :: Number

-- | A synonym for <tt>7</tt>.
seventh :: Number

-- | A synonym for <tt>8</tt>.
octave :: Number

-- | A synonym for <tt>9</tt>.
ninth :: Number

-- | A synonym for <tt>10</tt>.
tenth :: Number

-- | A synonym for <tt>11</tt>.
eleventh :: Number

-- | A synonym for <tt>12</tt>.
twelfth :: Number

-- | A synonym for <tt>13</tt>.
thirteenth :: Number

-- | A synonym for <tt>14</tt>.
fourteenth :: Number

-- | A synonym for <tt>15</tt>.
fifteenth :: Number
diatonicSteps :: Iso' Number DiatonicSteps
instance HasNumber Number


-- | Common interval quality.
module Music.Pitch.Common.Quality

-- | The <i>quality</i> component of an interval (minor, major, augmented).
--   Generalized from single/double augmented/diminished to any number of
--   steps.
data Quality
Major :: Quality
Minor :: Quality
Perfect :: Quality
Augmented :: Integer -> Quality
Diminished :: Integer -> Quality

-- | Return all possible quality types for a given quality.
qualityTypes :: Quality -> [QualityType]

-- | Types of value that has an interval quality (mainly <a>Interval</a>
--   and <a>Quality</a> itself).
class HasQuality a
quality :: HasQuality a => a -> Quality

-- | Invert a quality.
--   
--   Perfect is unaffected, major becomes minor and vice versa, augmented
--   becomes diminished and vice versa.
invertQuality :: Quality -> Quality

-- | Returns whether the given quality is perfect.
isPerfect :: HasQuality a => a -> Bool

-- | Returns whether the given quality is major.
isMajor :: HasQuality a => a -> Bool

-- | Returns whether the given quality is minor.
isMinor :: HasQuality a => a -> Bool

-- | Returns whether the given quality is augmented (including double
--   augmented etc).
isAugmented :: HasQuality a => a -> Bool

-- | Returns whether the given quality is diminished (including double
--   diminished etc).
isDiminished :: HasQuality a => a -> Bool

-- | The alteration implied by a quality is dependent on whether it is
--   attached to a major/minor vs. a perfect-style number. This type
--   represents the two possibilities.
data QualityType
PerfectType :: QualityType
MajorMinorType :: QualityType

-- | The quality type expected for a given number, i.e. perfect for
--   unisons, fourths, and fifths and major/minor for everything else.
expectedQualityType :: Number -> QualityType
data Direction
Upward :: Direction
Downward :: Direction

-- | Return the alteration in implied by the given quality to a number of a
--   given quality type.
qualityToAlteration :: Direction -> QualityType -> Quality -> Maybe ChromaticSteps

-- | <i>Deprecated: Use qualityToAlteration</i>
qualityToDiff :: Bool -> QualityType -> Quality -> ChromaticSteps
instance Eq Direction
instance Ord Direction
instance Show Direction
instance Augmentable Quality
instance HasQuality Quality


-- | Semitones and enharmonic equivalence.
module Music.Pitch.Common.Semitones

-- | Number of octaves. May be negative, indicating a downward interval.
data Octaves

-- | Number of semitones. May be negative, indicating a downward interval.
type Semitones = ChromaticSteps

-- | Class of intervals that can be converted to a number of
--   <a>Semitones</a>.
class HasSemitones a
semitones :: HasSemitones a => a -> Semitones

-- | Precisely one semitone.
semitone :: Semitones

-- | Precisely one whole tone, or two semitones.
tone :: Semitones

-- | Precisely two whole tones, or four semitones.
ditone :: Semitones

-- | Precisely three whole tones, or six semitones.
tritone :: Semitones

-- | Returns true iff the given interval spans one semitone.
isSemitone :: HasSemitones a => a -> Bool

-- | Returns true iff the given interval spans one whole tone (two
--   semitones).
isTone :: HasSemitones a => a -> Bool

-- | Returns true iff the given interval spans three whole tones (six
--   semitones).
isTritone :: HasSemitones a => a -> Bool

-- | Enharmonic equivalence.
--   
--   <pre>
--   &gt;&gt;&gt; asInterval _A2 == m3
--   False
--   
--   &gt;&gt;&gt; asInterval _A2 =:= m3
--   True
--   </pre>
(=:=) :: HasSemitones a => a -> a -> Bool

-- | Enharmonic non-equivalence.
--   
--   <pre>
--   &gt;&gt;&gt; asInterval _A2 /= m3
--   True
--   
--   &gt;&gt;&gt; asInterval _A2 /:= m3
--   False
--   </pre>
(/:=) :: HasSemitones a => a -> a -> Bool
instance HasSemitones ChromaticSteps
instance HasOctaves Octaves


-- | Pitch range or ambitus.
module Music.Pitch.Ambitus

-- | An ambitus is (mathematical) interval.
--   
--   Also known as <i>range</i> or <i>tessitura</i>, this type can be used
--   to restrict the range instruments, chords, melodies etc.
data Ambitus a
ambitus :: (Num a, Ord a) => Iso (a, a) (b, b) (Ambitus a) (Ambitus b)

-- | Not a true functor for similar reasons as sets.
mapAmbitus :: (Ord b, Num b) => (a -> b) -> Ambitus a -> Ambitus b
ambitusHighest :: (Num a, Ord a) => Ambitus a -> a
ambitusLowest :: (Num a, Ord a) => Ambitus a -> a

-- | Returns a postive interval (or _P1 for empty ambitus)
ambitusInterval :: (Num a, Ord a, AffineSpace a) => Ambitus a -> Diff a
instance (Show a, Num a, Ord a) => Show (Ambitus a)
instance Rewrapped (Ambitus a) (Ambitus b)
instance Wrapped (Ambitus a)


-- | Absolute pitch representation.
module Music.Pitch.Absolute

-- | Absolute frequency in Hertz.
newtype Hertz
Hertz :: Double -> Hertz
getHertz :: Hertz -> Double

-- | Number of cents.
--   
--   Cents are a logarithmic representation of frequency such that
--   
--   <pre>
--   f * (2/1) = frequency (cents f + 1200)
--   </pre>
data Cents

-- | Number of pure fifths.
--   
--   Fifths are a logarithmic representation of frequency.
--   
--   <pre>
--   f * (3/2) = frequency (fifths f + 1)
--   </pre>
data Fifths
class HasFrequency a
frequency :: HasFrequency a => a -> Hertz

-- | Convert a frequency to fifths.
fifths :: HasFrequency a => a -> Fifths

-- | Convert a frequency to cents.
cents :: HasFrequency a => a -> Cents
instance Read Hertz
instance Eq Hertz
instance Enum Hertz
instance Num Hertz
instance Ord Hertz
instance Fractional Hertz
instance Floating Hertz
instance Real Hertz
instance RealFrac Hertz
instance Read Octaves
instance Show Octaves
instance Eq Octaves
instance Enum Octaves
instance Num Octaves
instance Ord Octaves
instance Fractional Octaves
instance Floating Octaves
instance Real Octaves
instance RealFrac Octaves
instance Read Fifths
instance Show Fifths
instance Eq Fifths
instance Enum Fifths
instance Num Fifths
instance Ord Fifths
instance Fractional Fifths
instance Floating Fifths
instance Real Fifths
instance RealFrac Fifths
instance Read Cents
instance Show Cents
instance Eq Cents
instance Enum Cents
instance Num Cents
instance Ord Cents
instance Fractional Cents
instance Floating Cents
instance Real Cents
instance RealFrac Cents
instance HasFrequency Cents
instance HasFrequency Fifths
instance HasFrequency Octaves
instance HasFrequency Hertz
instance AffineSpace Hertz
instance Monoid Cents
instance Monoid Fifths
instance Monoid Octaves
instance Monoid Hertz
instance Semigroup Cents
instance Semigroup Fifths
instance Semigroup Octaves
instance Semigroup Hertz
instance Show Hertz


-- | Generic equal temperament pitch.
--   
--   Use the type-level numbers to construct an temperement dividing the
--   octave in any number of equal-sized steps.
--   
--   Common cases such as 6, 12 and 24 are provided for convenience.
module Music.Pitch.Equal
data Equal a

-- | Create an equal-temperament value.
toEqual :: IsNat a => Int -> Equal a

-- | Extract an equal-temperament value.
fromEqual :: IsNat a => Equal a -> Int

-- | Convert an equal-temeperament value to a frequency ratio.
--   
--   <pre>
--   &gt;&gt;&gt; equalToRatio (7 :: Equal12)
--   1.4983070768766815
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; equalToRatio (4 :: Equal12)
--   1.2599210498948732
--   </pre>
equalToRatio :: IsNat a => Equal a -> Double

-- | Size of this type (value not evaluated).
--   
--   <pre>
--   &gt;&gt;&gt; size (undefined :: Equal N2)
--   2
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; size (undefined :: Equal N12)
--   12
--   </pre>
size :: IsNat a => Equal a -> Int

-- | Safely cast a tempered value to another size.
--   
--   <pre>
--   &gt;&gt;&gt; cast (1 :: Equal12) :: Equal24
--   2 :: Equal24
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; cast (8 :: Equal12) :: Equal6
--   4 :: Equal6
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (2 :: Equal12) + cast (2 :: Equal24)
--   3 :: Equal12
--   </pre>
cast :: (IsNat a, IsNat b) => Equal a -> Equal b
type Equal6 = Equal N6
type Equal12 = Equal N12
type Equal17 = Equal N17
type Equal24 = Equal N24
type Equal36 = Equal N36
type N20 = N10 :*: N2
type N30 = N10 :*: N3
type N17 = N10 :+: N7
type N24 = N20 :+: N4
type N36 = N30 :+: N6
instance Ord (Equal a)
instance Eq (Equal a)
instance IsNat a => VectorSpace (Equal a)
instance IsNat a => AdditiveGroup (Equal a)
instance IsNat a => Monoid (Equal a)
instance IsNat a => Semigroup (Equal a)
instance IsNat a => Num (Equal a)
instance Show (Equal a)


-- | Common intervals.
module Music.Pitch.Common.Interval

-- | Interval type.
data Interval

-- | View an interval as a pair of quality and number or vice versa.
interval :: Iso' (Quality, Number) Interval

-- | View an interval as a pair of alteration and diatonic steps or vice
--   versa.
interval' :: Iso' (ChromaticSteps, DiatonicSteps) Interval

-- | View an interval as a pair of total number of chromatic and diatonic
--   steps.
interval'' :: Iso' (ChromaticSteps, DiatonicSteps) Interval

-- | View or set the number component of an interval.
_number :: Lens' Interval Number

-- | View or set the quality of an interval.
_quality :: Lens' Interval Quality

-- | View or set the number of chromatic steps in an interval.
_steps :: Lens' Interval DiatonicSteps

-- | View or set the alteration (i.e. the number of chromatic steps
--   differing from the excepted number) in an interval.
_alteration :: Lens' Interval ChromaticSteps

-- | Creates a perfect interval. If given an inperfect number, constructs a
--   major interval.
perfect :: Number -> Interval

-- | Creates a major interval. If given a perfect number, constructs a
--   perfect interval.
major :: Number -> Interval

-- | Creates a minor interval. If given a perfect number, constructs a
--   diminished interval.
minor :: Number -> Interval

-- | Creates an augmented interval.
augmented :: Number -> Interval

-- | Creates a diminished interval.
diminished :: Number -> Interval

-- | Creates a doubly augmented interval.
doublyAugmented :: Number -> Interval

-- | Creates a doubly diminished interval.
doublyDiminished :: Number -> Interval

-- | Returns whether the given interval is negative.
isNegative :: Interval -> Bool

-- | Returns whether the given interval is positive.
isPositive :: Interval -> Bool

-- | Returns whether the given interval is non-negative. This implies that
--   it is either positive or a perfect unison.
isNonNegative :: Interval -> Bool

-- | Returns whether the given interval a perfect unison.
isPerfectUnison :: Interval -> Bool

-- | Returns whether the given interval is a step (a second or smaller).
--   
--   Only diatonic <a>number</a> is taken into account, so <tt>_A2</tt> is
--   considered a step and <tt>m3</tt> a leap, even though they have the
--   same number of semitones.
isStep :: Interval -> Bool

-- | Returns whether the given interval is a leap (larger than a second).
--   
--   Only the diatonic <a>number</a> is taken into account, so <tt>_A2</tt>
--   is considered a step and <tt>m3</tt> a leap, even though they have the
--   same number of semitones.
isLeap :: Interval -> Bool

-- | Returns whether the given interval is simple.
--   
--   A simple interval is a non-negative interval spanning less than one
--   octave.
isSimple :: Interval -> Bool

-- | Returns whether the given interval is compound.
--   
--   A compound interval is either a negative interval, or a positive
--   interval spanning one octave or more. Note that compound intervals may
--   be smaller than an octave if they are negative, so
--   
--   <pre>
--   &gt;&gt;&gt; isCompound (-m3)
--   True 
--   
--   &gt;&gt;&gt; isCompound $ abs (-m3)
--   False 
--   </pre>
isCompound :: Interval -> Bool

-- | Separate a compound interval into octaves and a simple interval.
--   
--   <pre>
--   x*^_P8 + y = z  iff  (x, y) = separate z
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; separate (2*^_P8+m3)
--   (2,m3)
--   
--   &gt;&gt;&gt; separate (3*^_P8+m3)
--   (3,m3)
--   
--   &gt;&gt;&gt; separate (0*^_P8+m3)
--   (0,m3)
--   
--   &gt;&gt;&gt; separate ((-1)*^_P8+m3)
--   </pre>
separate :: Interval -> (Octaves, Interval)

-- | Returns the simple part of an interval.
--   
--   <pre>
--   (perfect octave)^*x + y = z  iff  y = simple z
--   </pre>
simple :: Interval -> Interval

-- | Returns the non-simple part of an interval.
--   
--   <pre>
--   _P8^*octaves x ^+^ simple x = x
--   </pre>
octaves :: Interval -> Octaves

-- | Intervallic inversion.
--   
--   The inversion an interval is determined as follows:
--   
--   <ul>
--   <li>The number of a simple interval the difference of nine and the
--   number of its inversion.</li>
--   <li>The quality of a simple interval is the inversion of the quality
--   of its inversion.</li>
--   <li>The inversion of a compound interval is the inversion of its
--   simple component.</li>
--   </ul>
invert :: Interval -> Interval

-- | This type represents standard basis for intervbals.
data IntervalBasis
Chromatic :: IntervalBasis
Diatonic :: IntervalBasis

-- | Represent an interval i in a new basis (j, k).
--   
--   We want x,y where i = x*j + y*k
--   
--   e.g., convertBasis basis_d2 _P5 basis_P8 == Just (-12,7), as expected.
convertBasis :: Interval -> Interval -> Interval -> Maybe (Int, Int)

-- | Same as above, but don't worry if new interval has non-integer
--   coefficients -- useful when getting a value to use as a frequency
--   ratio in a tuning system.
convertBasisFloat :: (Fractional t, Eq t) => Interval -> Interval -> Interval -> Maybe (t, t)

-- | Integer div of intervals: i / di = x, where x is an integer
intervalDiv :: Interval -> Interval -> Int
instance ToJSON Interval
instance ToJSON ChromaticSteps
instance ToJSON DiatonicSteps
instance IsInterval Interval
instance HasSemitones Interval
instance Augmentable Interval
instance HasNumber Interval
instance HasQuality Interval
instance HasBasis Interval
instance VectorSpace Interval
instance AdditiveGroup Interval
instance Monoid Interval
instance Semigroup Interval
instance Show Interval
instance Num Interval


-- | Basic harmony.
module Music.Pitch.Common.Harmony

-- | Whether the given interval is a (harmonic) dissonance.
isDissonance :: Interval -> Bool

-- | Whether the given interval is a (harmonic) consonance.
isConsonance :: Interval -> Bool

-- | Whether the given interval is a perfect (harmonic) consonance.
isPerfectConsonance :: Interval -> Bool

-- | Whether the given interval is an imperfect (harmonic) consonance.
isImperfectConsonance :: Interval -> Bool

-- | Whether the given interval is a melodic dissonance.
isMelodicDissonance :: Interval -> Bool

-- | Whether an interval is melodic consonance.
isMelodicConsonance :: Interval -> Bool


-- | Common pitch.
module Music.Pitch.Common.Pitch

-- | Accidental, represented as number of alterations. Generalized from
--   natural and single/double sharp/flat to any number of steps.
data Accidental

-- | The natural accidental.
natural :: Accidental

-- | The flat accidental.
flat :: Accidental

-- | The sharp accidental.
sharp :: Accidental

-- | The double flat accidental.
doubleFlat :: Accidental

-- | The double sharp accidental.
doubleSharp :: Accidental

-- | Returns whether this is a natural accidental.
isNatural :: Accidental -> Bool

-- | Returns whether this is a flat, double flat etc.
isFlattened :: Accidental -> Bool

-- | Returns whether this is a sharp, double sharp etc.
isSharpened :: Accidental -> Bool

-- | Returns whether this is a standard accidental, i.e. either a double
--   flat, flat, natural, sharp or double sharp.
isStandardAccidental :: Accidental -> Bool

-- | Pitch name component.
data Name
C :: Name
D :: Name
E :: Name
F :: Name
G :: Name
A :: Name
B :: Name

-- | Pitch type.
data Pitch

-- | Creates a pitch from name accidental.
mkPitch :: Name -> Accidental -> Pitch

-- | Returns the name of a pitch.
--   
--   To convert a pitch to a numeric type, use <a>octaves</a>,
--   <tt>steps</tt> or <a>semitones</a> on the relevant interval type, for
--   example:
--   
--   <pre>
--   semitones ('a\'' .-. <a>c</a>)
--   </pre>
name :: Pitch -> Name

-- | Returns the accidental of a pitch.
--   
--   See also <a>octaves</a>, and <tt>steps</tt> and <a>semitones</a>.
accidental :: Pitch -> Accidental
upDiatonicP :: Pitch -> DiatonicSteps -> Pitch -> Pitch
downDiatonicP :: Pitch -> DiatonicSteps -> Pitch -> Pitch
upChromaticP :: Pitch -> ChromaticSteps -> Pitch -> Pitch
downChromaticP :: Pitch -> ChromaticSteps -> Pitch -> Pitch
invertDiatonicallyP :: Pitch -> Pitch -> Pitch
invertChromaticallyP :: Pitch -> Pitch -> Pitch
instance ToJSON Pitch
instance AffineSpace Pitch
instance Num Pitch
instance Show Pitch
instance Alterable Pitch
instance Enum Pitch
instance IsPitch Pitch


-- | Intonation and tuning.
module Music.Pitch.Intonation
newtype Intonation p
Intonation :: (p -> Hertz) -> Intonation p
getIntonation :: Intonation p -> p -> Hertz
newtype Tuning i
Tuning :: (i -> Double) -> Tuning i
getTuning :: Tuning i -> i -> Double

-- | Turn a tuning into an intonation.
intone :: (Pitch, Hertz) -> Tuning Interval -> Intonation Pitch
synTune :: (Interval, Double) -> (Interval, Double) -> Interval -> Double
pureOctaveWith :: (Interval, Double) -> Tuning Interval
pythagorean :: Tuning Interval
quarterCommaMeantone :: Tuning Interval
schismaticMeantone :: Tuning Interval
fiveToneEqual :: Tuning Interval
sevenToneEqual :: Tuning Interval
twelveToneEqual :: Tuning Interval
nineteenToneEqual :: Tuning Interval
thirtyOneToneEqual :: Tuning Interval
fiftyThreeToneEqual :: Tuning Interval

-- | Modern standard intonation, i.e. 12-TET with <tt>a = 440 Hz</tt>.
standardIntonation :: Intonation Pitch


-- | Common pitch names in various (human) languages.
module Music.Pitch.Common.Names
data Language
English :: Language
German :: Language
Dutch :: Language
Japanese :: Language
Italian :: Language
French :: Language
Spanish :: Language
Portuguese :: Language
Russian :: Language
Romanian :: Language
Swedish :: Language
NewSwedish :: Language
data Mode
MajorMode :: Mode
MinorMode :: Mode
showKey :: Language -> Pitch -> Mode -> String
showPitch :: Language -> Pitch -> String
showMode :: Language -> Mode -> String
showSep :: Language -> String
instance Show Language
instance Eq Language
instance Ord Language
instance Eq Mode
instance Ord Mode
instance Show Mode


-- | Provides pitch spelling.
module Music.Pitch.Common.Spell

-- | A spelling provide a way of notating a semitone interval such as
--   <a>tritone</a>.
--   
--   Examples:
--   
--   <pre>
--   spell usingSharps tritone   == _A4
--   spell usingFlats  tritone   == d5
--   spell modally     tone      == _M2
--   </pre>
type Spelling = Semitones -> Number

-- | Spell an interval using the given <a>Spelling</a>.
spell :: HasSemitones a => Spelling -> a -> Interval

-- | Flipped version of <a>spell</a>. To be used infix, as in:
--   
--   <pre>
--   d5 `spelled` usingSharps
--   </pre>
spelled :: HasSemitones a => a -> Spelling -> Interval

-- | Spell using the most the most common accidentals. Double sharps and
--   flats are not preserved.
--   
--   This spelling is particularly useful for modal music where the tonic
--   is C.
--   
--   <pre>
--   c cs d eb e f fs g gs a bb b
--   </pre>
modally :: Spelling

-- | Spell using sharps. Double sharps and flats are not preserved.
--   
--   <pre>
--   c cs d ds e f fs g gs a as b
--   </pre>
usingSharps :: Spelling

-- | Spell using flats. Double sharps and flats are not preserved.
--   
--   <pre>
--   c db d eb e f gb g ab a bb b
--   </pre>
usingFlats :: Spelling


-- | Common pitch representation.
module Music.Pitch.Common


-- | Clefs and staff positions.
module Music.Pitch.Clef

-- | Represents staff number relative middle. Staff zero is either the
--   middle staff, or if using an even number of lines, the staff below the
--   middle space.
data StaffLines

-- | Represents the difference betwee staff positions (often corresponding
--   to one diatonic step).
data HalfSpaces
type ClefLine = StaffLines

-- | Common clef symbols
data ClefSymbol
GClef :: ClefSymbol
CClef :: ClefSymbol
FClef :: ClefSymbol
PercClef :: ClefSymbol
NeutralClef :: ClefSymbol
type ClefOctave = Integer
newtype Clef
Clef :: (ClefSymbol, ClefOctave, ClefLine) -> Clef
getClef :: Clef -> (ClefSymbol, ClefOctave, ClefLine)

-- | Return the English name of the given clef.
symbolName :: ClefSymbol -> String

-- | Return the pitch implied by the given clef at the middle space or
--   line.
symbolPitch :: ClefSymbol -> Maybe Pitch
positionPitch :: Clef -> StaffLines -> Maybe Pitch
pitchPosition :: Clef -> Pitch -> Maybe StaffLines

-- | Is this a clef used in contemporary notation?
isModernClef :: Clef -> Bool

-- | Is this an historical clef?
isHistoricalClef :: Clef -> Bool

-- | Is this a traditional voice clef, i.e. a C clef on some staff.
isVoiceClef :: Clef -> Bool

-- | Standard treble clef.
trebleClef :: Clef

-- | Standard bass clef.
bassClef :: Clef

-- | Standard soprano clef.
sopranoClef :: Clef

-- | Standard mezzo soprano clef.
mezzoSopranoClef :: Clef

-- | Standard alto clef.
altoClef :: Clef

-- | Standard tenor clef.
tenorClef :: Clef

-- | Standard baritone clef.
baritoneClef :: Clef
instance Typeable StaffLines
instance Typeable HalfSpaces
instance Typeable ClefSymbol
instance Typeable Clef
instance Eq StaffLines
instance Ord StaffLines
instance Read StaffLines
instance Show StaffLines
instance Enum StaffLines
instance Num StaffLines
instance Real StaffLines
instance Integral StaffLines
instance Eq HalfSpaces
instance Ord HalfSpaces
instance Read HalfSpaces
instance Show HalfSpaces
instance Enum HalfSpaces
instance Num HalfSpaces
instance Real HalfSpaces
instance Integral HalfSpaces
instance Eq ClefSymbol
instance Ord ClefSymbol
instance Show ClefSymbol
instance Eq Clef
instance Ord Clef
instance Show Clef


-- | Scales and chords.
module Music.Pitch.Scale

-- | A mode is a list of intervals and a characteristic repeating interval.
data Mode a

-- | <pre>
--   [Interval] -&gt; Interval -&gt; Mode Pitch
--   </pre>
modeFromSteps :: [Diff a] -> Diff a -> Mode a

-- | <pre>
--   Lens' (Mode Pitch) [Interval]
--   </pre>
modeIntervals :: Lens' (Mode a) [Diff a]

-- | <pre>
--   Lens' (Mode Pitch) Interval
--   </pre>
modeRepeat :: Lens' (Mode a) (Diff a)

-- | A scale is a mode with a specified tonic.
data Scale a

-- | <pre>
--   Lens' (Scale Pitch) Pitch
--   </pre>
scaleTonic :: Lens' (Scale a) a

-- | <pre>
--   Lens' (Scale Pitch) (Mode Pitch)
--   </pre>
scaleMode :: Lens' (Scale a) (Mode a)

-- | <pre>
--   &gt;&gt;&gt; leadingInterval majorScale
--   m2
--   
--   &gt;&gt;&gt; leadingInterval harmonicMinorScale
--   m2
--   
--   &gt;&gt;&gt; leadingInterval pureMinorScale
--   _M2
--   </pre>
leadingInterval :: AffineSpace a => Mode a -> Diff a
invertMode :: AffineSpace a => Int -> Mode a -> Mode a
modeToScale :: AffineSpace a => a -> Mode a -> Scale a
scaleToList :: AffineSpace a => Scale a -> [a]
data Function a

-- | <pre>
--   [Interval] -&gt; Interval -&gt; Function Pitch
--   </pre>
functionFromSteps :: [Diff a] -> Diff a -> Function a

-- | <pre>
--   Lens' (Function Pitch) [Interval]
--   </pre>
functionIntervals :: Lens' (Function a) [Diff a]

-- | <pre>
--   Lens' (Function Pitch) Interval
--   </pre>
functionRepeat :: Lens' (Function a) (Diff a)
data Chord a

-- | <pre>
--   Lens' (Chord Pitch) Pitch
--   </pre>
chordTonic :: Lens' (Chord a) a

-- | <pre>
--   Lens' (Chord Pitch) (Function Pitch)
--   </pre>
chordFunction :: Lens' (Chord a) (Function a)

-- | <pre>
--   &gt;&gt;&gt; complementInterval majorTriad
--   _P4
--   
--   &gt;&gt;&gt; complementInterval minorTriad
--   _P4
--   
--   &gt;&gt;&gt; complementInterval majorMinorSeventhChord
--   _M2
--   </pre>
--   
--   <pre>
--   Lens' (Function Pitch) Interval
--   </pre>
complementInterval :: AffineSpace a => Function a -> Diff a
invertChord :: AffineSpace a => Int -> Function a -> Function a
functionToChord :: AffineSpace a => a -> Function a -> Chord a

-- | Returns a single inversion of the given chord (no repeats!).
chordToList :: AffineSpace a => Chord a -> [a]
majorScale :: Mode Pitch
pureMinorScale :: Mode Pitch
harmonicMinorScale :: Mode Pitch
melodicMinorScaleUp :: Mode Pitch
aeolian :: Mode Pitch
locrian :: Mode Pitch
ionian :: Mode Pitch
dorian :: Mode Pitch
phrygian :: Mode Pitch
lydian :: Mode Pitch
mixolydian :: Mode Pitch
majorPentaTonic :: Mode Pitch
minorPentaTonic :: Mode Pitch
bluesMinor :: Mode Pitch
bluesMajor :: Mode Pitch
bebopScale :: Mode Pitch
wholeTone :: Mode Pitch
octatonic :: Mode Pitch
firstMode :: Mode Pitch
secondMode :: Mode Pitch
thirdMode :: Mode Pitch
fourthMode :: Mode Pitch
fifthMode :: Mode Pitch
sixthMode :: Mode Pitch
seventhMode :: Mode Pitch
majorTriad :: Function Pitch
minorTriad :: Function Pitch
augmentedChord :: Function Pitch
diminishedChord :: Function Pitch
halfDiminishedChord :: Function Pitch
majorMinorSeventhChord :: Function Pitch
majorMajorSeventhChord :: Function Pitch


-- | Provides various representations of musical pitches and intervals.
module Music.Pitch
