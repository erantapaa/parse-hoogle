-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Free foreign exchange/currency feed from the European Central Bank
--   
--   A Haskell API for the the European Central Bank's free daily currency
--   reference rates.
--   
--   ChangeLog: 0.1.2: Timestamp now has correct hour.
@package eurofxref
@version 0.2.1

module Financial.CurrencyRates

-- | A standard three-letter currency name.
newtype Currency
Currency :: String -> Currency

-- | A table of currency rates.
data Rates a
Rates :: Currency -> UTCTime -> Map Currency a -> Rates a

-- | The reference currency
raReference :: Rates a -> Currency

-- | The time when the rates were valid
raTime :: Rates a -> UTCTime

-- | Value of one unit of the reference currency in each currency
raRates :: Rates a -> Map Currency a

-- | Re-base the rates to a different reference currency, such that the new
--   rates give the value of one unit of that currency.
rebase :: Fractional a => Currency -> Rates a -> Rates a
instance Eq Currency
instance Show Currency
instance Read Currency
instance Ord Currency


-- | Example using ghci, where we read the currency rates relative to
--   Euros, and re-base them to New Zealand dollars.
--   
--   <pre>
--   &gt; :m Financial.EuroFXRef Data.Map
--   &gt; fmap (assocs . raRates . rebase (Currency "NZD")) fetch :: IO [(Currency, Double)]
--   [(Currency "AUD",0.7696441703909034),(Currency "BGN",1.1064094586185438),...
--   </pre>
--   
--   Each number is one unit of the reference currency in that currency,
--   e.g. in this example NZD 1 == AUD 0.77.
module Financial.EuroFXRef

-- | Fetch today's currency rates from European Central Bank server.
--   <a>IO</a> works for <tt>m</tt> and <a>Double</a> for <tt>a</tt>.
--   
--   Throws a <a>EuropeanCentralBankException</a> for failures at HTTP and
--   above, or <a>IOException</a> for network-level failures.
fetch :: (Failure EuropeanCentralBankException m, Failure HttpException m, MonadIO m, Read a) => m (Rates a)

-- | An exception indicating a parse error in the parsing of European
--   Central Bank.
data EuropeanCentralBankException
ECBXMLParseException :: XMLParseError -> EuropeanCentralBankException
ECBHttpException :: HttpException -> EuropeanCentralBankException
ECBHttpStatusException :: Status -> EuropeanCentralBankException
ECBParseException :: String -> EuropeanCentralBankException

-- | The URL for the European Central Bank's free daily reference rates.
europeanCentralBankDaily :: Failure HttpException m => m (Request m')

-- | Fetch today's currency rates from the specified URL.
--   
--   Throws a <a>EuropeanCentralBankException</a> for failures at HTTP and
--   above, or <a>IOException</a> for network-level failures.
fetchFrom :: (Failure EuropeanCentralBankException m, Failure HttpException m, MonadResource m, MonadBaseControl IO m, Read a) => Request m -> Manager -> m (Rates a)

-- | Parse the European Central Bank's XML format.
parseEuropeanCentralBank :: Read a => UNode String -> Either String (Rates a)
instance Typeable EuropeanCentralBankException
instance Show EuropeanCentralBankException
instance Exception EuropeanCentralBankException
