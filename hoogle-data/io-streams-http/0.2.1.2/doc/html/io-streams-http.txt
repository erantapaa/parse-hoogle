-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | http-client for io-streams
--   
@package io-streams-http
@version 0.2.1.2


-- | Here is an example GET request that streams the response body to
--   standard output:
--   
--   <pre>
--   import           System.IO.Streams (InputStream, OutputStream)
--   import qualified System.IO.Streams as Streams
--   import           System.IO.Streams.HTTP
--   import           Network.HTTP.Client
--   
--   main :: IO ()
--   main = do
--     req &lt;- parseUrl "http://google.com"
--     withManager defaultManagerSettings $ \m -&gt; 
--       withHTTP req m $ \resp -&gt; do
--         Streams.handleToOutputStream stdout &gt;&gt;=
--           Streams.connect (responseBody resp)
--   </pre>
--   
--   Here is an example POST request that also streams the request body
--   from standard input:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   module Main where
--   import           System.IO.Streams       ( InputStream, OutputStream )
--   import qualified System.IO.Streams as    Streams
--   import           System.IO.Streams.HTTP  ( withHTTP, parseUrl, withManager, stream )
--   import           Network.HTTP.Client.TLS ( tlsManagerSettings )
--   import           Network.HTTP.Client     ( responseBody )
--   
--   bodyTest :: IO ()
--   bodyTest = do
--     req &lt;- parseUrl "https://google.com"
--     let request = req { method = "POST"
--                       , requestBody = stream $ Streams.fromLazyByteString "body"
--                       }
--     withManager tlsManagerSettings $ \m -&gt;
--       withHTTP req m $ \resp -&gt; do
--           Streams.supplyTo Streams.stdout (responseBody resp)   
--   </pre>
--   
--   For non-streaming request bodies, study the <a>RequestBody</a> type,
--   which also accepts strict / lazy bytestrings
module System.IO.Streams.HTTP

-- | Send an HTTP <a>Request</a> and wait for an HTTP <a>Response</a>
withHTTP :: Request -> Manager -> (Response (InputStream ByteString) -> IO a) -> IO a

-- | Stream with N bytes exactly
streamN :: Int64 -> IO (InputStream ByteString) -> RequestBody

-- | Stream body of request
stream :: IO (InputStream ByteString) -> RequestBody
