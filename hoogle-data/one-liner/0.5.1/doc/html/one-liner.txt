-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Constraint-based generics
--   
@package one-liner
@version 0.5.1


module Generics.OneLiner.Info
data CtorInfo
CtorInfo :: String -> Bool -> Fixity -> CtorInfo
ctorName :: CtorInfo -> String
isRecord :: CtorInfo -> Bool
fixity :: CtorInfo -> Fixity
ctor :: String -> CtorInfo
data Fixity
Prefix :: Fixity
Infix :: Associativity -> Int -> Fixity
data Associativity
LeftAssociative :: Associativity
RightAssociative :: Associativity
NotAssociative :: Associativity
data FieldInfo p
SelectorInfo :: String -> p -> FieldInfo p
selectorName :: FieldInfo p -> String
project :: FieldInfo p -> p
FieldInfo :: p -> FieldInfo p
project :: FieldInfo p -> p
instance Eq Associativity
instance Show Associativity
instance Ord Associativity
instance Read Associativity
instance Eq Fixity
instance Show Fixity
instance Ord Fixity
instance Read Fixity
instance Eq CtorInfo
instance Show CtorInfo
instance Ord CtorInfo
instance Read CtorInfo
instance Functor FieldInfo


-- | This module is for writing generic functions on algebraic data types
--   of kind <tt>* -&gt; *</tt>. These data types must be an instance of
--   the <a>ADT1</a> type class.
--   
--   Here's an example how to write such an instance for this data type:
--   
--   <pre>
--   data T a = A [a] | B a (T a)
--   </pre>
--   
--   <pre>
--   instance <a>ADT1</a> T where
--     <a>ctorIndex</a> A{} = 0
--     <a>ctorIndex</a> B{} = 1
--     <a>ctorInfo</a> _ 0 = <a>ctor</a> "A"
--     <a>ctorInfo</a> _ 1 = <a>ctor</a> "B"
--     type <a>Constraints</a> T c = (c [], c T)
--     <a>buildsRecA</a> _ par sub rec =
--       [ A <a>&lt;$&gt;</a> sub (<a>component</a> (\(A l) -&gt; l)
--       , B <a>&lt;$&gt;</a> par (<a>param</a> (\(B a _) -&gt; a)) <a>&lt;*&gt;</a> rec (<a>component</a> (\(B _ t) -&gt; t))
--       ]
--   </pre>
module Generics.OneLiner.ADT1
data Constraint :: BOX

-- | Type class for algebraic data types of kind <tt>* -&gt; *</tt>.
--   Implement either <a>buildsA</a> if the type <tt>t</tt> is not
--   recursive, or <a>buildsRecA</a> if the type <tt>t</tt> is recursive.
class ADT1 t where type family Constraints t (c :: (* -> *) -> Constraint) :: Constraint ctorIndex _ = 0 buildsA for param sub = buildsRecA for param sub sub buildsRecA for param sub _ = buildsA for param sub
ctorIndex :: ADT1 t => t a -> Int
ctorInfo :: ADT1 t => t a -> Int -> CtorInfo
buildsA :: (ADT1 t, Constraints t c, Applicative f) => for c -> (FieldInfo (Extract t) -> f b) -> (forall s. c s => FieldInfo (t :~> s) -> f (s b)) -> [f (t b)]
buildsRecA :: (ADT1 t, Constraints t c, Applicative f) => for c -> (FieldInfo (Extract t) -> f b) -> (forall s. c s => FieldInfo (t :~> s) -> f (s b)) -> (FieldInfo (t :~> t) -> f (t b)) -> [f (t b)]

-- | Add an instance for this class if the data type has exactly one
--   constructor.
--   
--   This class has no methods.
class ADT1 t => ADT1Record t

-- | Tell the compiler which class we want to use in the traversal. Should
--   be used like this:
--   
--   <pre>
--   (For :: For Show)
--   </pre>
--   
--   Where <tt>Show</tt> can be any class.
data For (c :: (* -> *) -> Constraint)
For :: For
newtype Extract f
Extract :: (forall x. f x -> x) -> Extract f
getExtract :: Extract f -> forall x. f x -> x
newtype (:~>) f g
Nat :: (forall x. f x -> g x) -> (:~>) f g
getNat :: (:~>) f g -> forall x. f x -> g x
(!) :: t a -> FieldInfo (Extract t) -> a
(!~) :: t a -> FieldInfo (t :~> s) -> s a

-- | Get the value from the result of one of the <tt>builds</tt> functions
--   that matches the constructor of <tt>t</tt>.
at :: ADT1 t => [a] -> t b -> a
param :: (forall a. t a -> a) -> FieldInfo (Extract t)
component :: (forall a. t a -> s a) -> FieldInfo (t :~> s)

-- | <a>buildsA</a> specialized to the <a>Identity</a> applicative functor.
builds :: (ADT1 t, Constraints t c) => for c -> (FieldInfo (Extract t) -> b) -> (forall s. c s => FieldInfo (t :~> s) -> s b) -> [t b]

-- | <a>buildsA</a> specialized to the <a>Constant</a> applicative functor,
--   which collects monoid values <tt>m</tt>.
mbuilds :: (ADT1 t, Constraints t c, Monoid m) => for c -> (FieldInfo (Extract t) -> m) -> (forall s. c s => FieldInfo (t :~> s) -> m) -> [m]

-- | <a>builds</a> for data types with exactly one constructor
build :: (ADT1Record t, Constraints t c) => for c -> (FieldInfo (Extract t) -> b) -> (forall s. c s => FieldInfo (t :~> s) -> s b) -> t b
instance ADT1 []
instance ADT1 Maybe


module Generics.OneLiner.Functions1
fmapADT :: (ADT1 t, Constraints t Functor) => (a -> b) -> t a -> t b
foldMapADT :: (ADT1 t, Constraints t Foldable, Monoid m) => (a -> m) -> t a -> m
traverseADT :: (ADT1 t, Constraints t Traversable, Applicative f) => (a -> f b) -> t a -> f (t b)
pureADT :: (ADT1Record t, Constraints t Applicative) => a -> t a
apADT :: (ADT1Record t, Constraints t Applicative) => t (a -> b) -> t a -> t b
bindADT :: (ADT1Record t, Constraints t Monad) => t a -> (a -> t b) -> t b
mfixADT :: (ADT1Record t, Constraints t MonadFix) => (a -> t a) -> t a


-- | This module is for writing generic functions on algebraic data types
--   of kind <tt>*</tt>. These data types must be an instance of the
--   <a>ADT</a> type class.
--   
--   Here's an example how to write such an instance for this data type:
--   
--   <pre>
--   data T a = A Int a | B a (T a)
--   </pre>
--   
--   <pre>
--   instance <a>ADT</a> (T a) where
--     <a>ctorIndex</a> A{} = 0
--     <a>ctorIndex</a> B{} = 1
--     <a>ctorInfo</a> _ 0 = <a>ctor</a> "A"
--     <a>ctorInfo</a> _ 1 = <a>ctor</a> "B"
--     type <a>Constraints</a> (T a) c = (c Int, c a, c (T a))
--     <a>buildsRecA</a> _ sub rec =
--       [ A <a>&lt;$&gt;</a> sub (<a>FieldInfo</a> (\(A i _) -&gt; i)) <a>&lt;*&gt;</a> sub (<a>FieldInfo</a> (\(A _ a) -&gt; a))
--       , B <a>&lt;$&gt;</a> sub (<a>FieldInfo</a> (\(B a _) -&gt; a)) <a>&lt;*&gt;</a> rec (<a>FieldInfo</a> (\(B _ t) -&gt; t))
--       ]
--   </pre>
--   
--   And this is how you would write generic equality, using the <a>All</a>
--   monoid:
--   
--   <pre>
--   eqADT :: (<a>ADT</a> t, <a>Constraints</a> t <a>Eq</a>) =&gt; t -&gt; t -&gt; <a>Bool</a>
--   eqADT s t = <a>ctorIndex</a> s == <a>ctorIndex</a> t <a>&amp;&amp;</a>
--     <a>getAll</a> (<a>mbuilds</a> (<a>For</a> :: <a>For</a> <a>Eq</a>) (\fld -&gt; <a>All</a> $ s <a>!</a> fld <a>==</a> t <a>!</a> fld) `<a>at</a>` s)
--   </pre>
module Generics.OneLiner.ADT
data Constraint :: BOX

-- | Type class for algebraic data types of kind <tt>*</tt>. Implement
--   either <a>buildsA</a> if the type <tt>t</tt> is not recursive, or
--   <a>buildsRecA</a> if the type <tt>t</tt> is recursive.
class ADT t where type family Constraints t (c :: * -> Constraint) :: Constraint ctorIndex _ = 0 buildsA for f = buildsRecA for f f buildsRecA for sub _ = buildsA for sub
ctorIndex :: ADT t => t -> Int
ctorInfo :: ADT t => t -> Int -> CtorInfo
buildsA :: (ADT t, Constraints t c, Applicative f) => for c -> (forall s. c s => FieldInfo (t -> s) -> f s) -> [f t]
buildsRecA :: (ADT t, Constraints t c, Applicative f) => for c -> (forall s. c s => FieldInfo (t -> s) -> f s) -> (FieldInfo (t -> t) -> f t) -> [f t]

-- | Add an instance for this class if the data type has exactly one
--   constructor.
--   
--   This class has no methods.
class ADT t => ADTRecord t

-- | Tell the compiler which class we want to use in the traversal. Should
--   be used like this:
--   
--   <pre>
--   (For :: For Show)
--   </pre>
--   
--   Where <tt>Show</tt> can be any class.
data For (c :: * -> Constraint)
For :: For

-- | Get the subcomponent by using the projector from the field
--   information.
(!) :: t -> FieldInfo (t -> s) -> s

-- | Get the value from the result of one of the <tt>builds</tt> functions
--   that matches the constructor of <tt>t</tt>.
at :: ADT t => [a] -> t -> a

-- | <a>buildsA</a> specialized to the <a>Identity</a> applicative functor.
builds :: (ADT t, Constraints t c) => for c -> (forall s. c s => FieldInfo (t -> s) -> s) -> [t]

-- | <a>buildsA</a> specialized to the <a>Constant</a> applicative functor,
--   which collects monoid values <tt>m</tt>.
mbuilds :: (ADT t, Constraints t c, Monoid m) => for c -> (forall s. c s => FieldInfo (t -> s) -> m) -> [m]

-- | Transform a value by transforming each subcomponent.
gmap :: (ADT t, Constraints t c) => for c -> (forall s. c s => s -> s) -> t -> t

-- | Fold a value, by mapping each subcomponent to a monoid value and
--   collecting those.
gfoldMap :: (ADT t, Constraints t c, Monoid m) => for c -> (forall s. c s => s -> m) -> t -> m

-- | Applicative traversal given a way to traverse each subcomponent.
gtraverse :: (ADT t, Constraints t c, Applicative f) => for c -> (forall s. c s => s -> f s) -> t -> f t

-- | <a>builds</a> for data types with exactly one constructor
build :: (ADTRecord t, Constraints t c) => for c -> (forall s. c s => FieldInfo (t -> s) -> s) -> t

-- | Derive a 0-ary operation by applying the operation to every
--   subcomponent.
op0 :: (ADTRecord t, Constraints t c) => for c -> (forall s. c s => s) -> t

-- | Derive a unary operation by applying the operation to every
--   subcomponent.
op1 :: (ADTRecord t, Constraints t c) => for c -> (forall s. c s => s -> s) -> t -> t

-- | Derive a binary operation by applying the operation to every
--   subcomponent.
op2 :: (ADTRecord t, Constraints t c) => for c -> (forall s. c s => s -> s -> s) -> t -> t -> t
instance ADT [a]
instance ADT (Maybe a)
instance ADT (Either a b)
instance ADT Bool
instance ADTRecord (a, b, c, d)
instance ADT (a, b, c, d)
instance ADTRecord (a, b, c)
instance ADT (a, b, c)
instance ADTRecord (a, b)
instance ADT (a, b)
instance ADTRecord ()
instance ADT ()


module Generics.OneLiner.Functions
eqADT :: (ADT t, Constraints t Eq) => t -> t -> Bool
compareADT :: (ADT t, Constraints t Ord) => t -> t -> Ordering
minBoundADT :: (ADT t, Constraints t Bounded) => t
maxBoundADT :: (ADT t, Constraints t Bounded) => t
showsPrecADT :: (ADT t, Constraints t Show) => Int -> t -> ShowS
readPrecADT :: (ADT t, Constraints t Read) => ReadPrec t
memptyADT :: (ADTRecord t, Constraints t Monoid) => t
mappendADT :: (ADTRecord t, Constraints t Monoid) => t -> t -> t
fromIntegerADT :: (ADTRecord t, Constraints t Num) => Integer -> t


-- | This module is for writing generic functions on algebraic data types
--   of kind <tt>*</tt>. These data types must be an instance of the
--   <a>Generic</a> type class, which can be derived.
module Generics.OneLiner

-- | Create a value (one for each constructor), given how to construct the
--   components.
--   
--   <pre>
--   <a>minBound</a> = <a>head</a> <a>$</a> <a>create</a> (<a>For</a> :: <a>For</a> <a>Bounded</a>) <a>minBound</a>
--   <a>maxBound</a> = <a>last</a> <a>$</a> <a>create</a> (<a>For</a> :: <a>For</a> <a>Bounded</a>) <a>maxBound</a>
--   </pre>
create :: (ADT t, Constraints t c) => for c -> (forall s. c s => s) -> [t]

-- | Create a value (one for each constructor), given how to construct the
--   components, under an applicative effect.
--   
--   Here's how to implement <tt>get</tt> from the <tt>binary</tt> package:
--   
--   <pre>
--   get = getWord8 <a>&gt;&gt;=</a> \ix -&gt; <a>createA</a> (<a>For</a> :: <a>For</a> Binary) get <a>!!</a> <a>fromEnum</a> ix
--   </pre>
createA :: (ADT t, Constraints t c, Applicative f) => for c -> (forall s. c s => f s) -> [f t]

-- | Get the index in the lists returned by <a>create</a> and
--   <a>createA</a> of the constructor of the given value.
--   
--   For example, this is the implementation of <tt>put</tt> that generates
--   the binary data that the above implentation of <tt>get</tt> expects:
--   
--   <pre>
--   <tt>put</tt> t = <tt>putWord8</tt> (<a>toEnum</a> (<a>ctorIndex</a> t)) <a>&lt;&gt;</a> <a>gfoldMap</a> (<a>For</a> :: <a>For</a> <tt>Binary</tt>) <tt>put</tt> t
--   </pre>
--   
--   <i>Note that this assumes a straightforward <a>Monoid</a> instance of
--   <tt>Put</tt> which <tt>binary</tt> unfortunately does not provide.</i>
ctorIndex :: ADT t => t -> Int

-- | Map over a structure, updating each component.
gmap :: (ADT t, Constraints t c) => for c -> (forall s. c s => s -> s) -> t -> t

-- | Map each component of a structure to a monoid, and combine the
--   results.
--   
--   If you have a class <tt>Size</tt>, which measures the size of a
--   structure, then this could be the default implementation:
--   
--   <pre>
--   size = <a>succ</a> <a>.</a> <a>getSum</a> <a>.</a> <a>gfoldMap</a> (<a>For</a> :: <a>For</a> Size) (<a>Sum</a> <a>.</a> size)
--   </pre>
gfoldMap :: (ADT t, Constraints t c, Monoid m) => for c -> (forall s. c s => s -> m) -> t -> m

-- | Map each component of a structure to an action, evaluate these actions
--   from left to right, and collect the results.
gtraverse :: (ADT t, Constraints t c, Applicative f) => for c -> (forall s. c s => s -> f s) -> t -> f t

-- | Combine two values by combining each component of the structures with
--   the given function. Returns <a>Nothing</a> if the constructors don't
--   match.
gzipWith :: (ADT t, Constraints t c) => for c -> (forall s. c s => s -> s -> s) -> t -> t -> Maybe t

-- | Combine two values by combining each component of the structures to a
--   monoid, and combine the results. Returns <a>mempty</a> if the
--   constructors don't match.
--   
--   <pre>
--   <a>compare</a> s t = <a>compare</a> (<a>ctorIndex</a> s) (<a>ctorIndex</a> t) <a>&lt;&gt;</a> <a>mzipWith</a> (<a>For</a> :: <a>For</a> <a>Ord</a>) <a>compare</a> s t
--   </pre>
mzipWith :: (ADT t, Constraints t c, Monoid m) => for c -> (forall s. c s => s -> s -> m) -> t -> t -> m

-- | Combine two values by combining each component of the structures with
--   the given function, under an applicative effect. Returns
--   <a>Nothing</a> if the constructors don't match.
zipWithA :: (ADT t, Constraints t c, Applicative f) => for c -> (forall s. c s => s -> s -> f s) -> t -> t -> Maybe (f t)

-- | Generate ways to consume values of type <tt>t</tt>. This is the
--   contravariant version of <a>createA</a>.
consume :: (ADT t, Constraints t c, Decidable f) => for c -> (forall s. c s => f s) -> f t

-- | Implement a nullary operator by calling the operator for each
--   component.
--   
--   <pre>
--   <a>mempty</a> = <a>op0</a> (<a>For</a> :: <a>For</a> <a>Monoid</a>) <a>mempty</a>
--   <a>fromInteger</a> i = <a>op0</a> (<a>For</a> :: <a>For</a> <a>Num</a>) (<a>fromInteger</a> i)
--   </pre>
op0 :: (ADTRecord t, Constraints t c) => for c -> (forall s. c s => s) -> t

-- | Implement a unary operator by calling the operator on the components.
--   This is here for consistency, it is the same as <a>gmap</a>.
--   
--   <pre>
--   <a>negate</a> = <a>op1</a> (<a>For</a> :: <a>For</a> <a>Num</a>) <a>negate</a>
--   </pre>
op1 :: (ADTRecord t, Constraints t c) => for c -> (forall s. c s => s -> s) -> t -> t

-- | Implement a binary operator by calling the operator on the components.
--   
--   <pre>
--   <a>mappend</a> = <a>op2</a> (<a>For</a> :: <a>For</a> <a>Monoid</a>) <a>mappend</a>
--   (<a>+</a>) = <a>op2</a> (<a>For</a> :: <a>For</a> <a>Num</a>) (<a>+</a>)
--   </pre>
op2 :: (ADTRecord t, Constraints t c) => for c -> (forall s. c s => s -> s -> s) -> t -> t -> t

-- | <a>ADT</a> is a constraint type synonym. The <a>Generic</a> instance
--   can be derived, and any generic representation will be an instance of
--   <a>ADT'</a>.
type ADT t = (Generic t, ADT' (Rep t))

-- | <a>ADTRecord</a> is a constraint type synonym. An instance is an
--   <a>ADT</a> with *exactly* one constructor.
type ADTRecord t = (ADT t, 1 ~ CtorCount t)

-- | <a>ADTNonEmpty</a> is a constraint type synonym. An instance is an
--   <a>ADT</a> with *at least* one constructor.
type ADTNonEmpty t = (ADT t, 1 <= CtorCount t)

-- | <a>CtorCount</a> is the number of constructors of a type at the type
--   level. F.e. if you want to require that a type has at least two
--   constructors, you can add the constraint <tt>(2 <a>&lt;=</a>
--   <a>CtorCount</a> t)</tt>.
type CtorCount t = CtorCount' (Rep t)

-- | <a>Constraints</a> is a constraint type synonym, containing the
--   constraint requirements for an instance for <tt>t</tt> of class
--   <tt>c</tt>. It requires an instance of class <tt>c</tt> for each
--   component of <tt>t</tt>.
type Constraints t c = Constraints' (Rep t) c

-- | Tell the compiler which class we want to use in the traversal. Should
--   be used like this:
--   
--   <pre>
--   (For :: For Show)
--   </pre>
--   
--   Where <tt>Show</tt> can be any class.
data For (c :: * -> Constraint)
For :: For

-- | <tt>Deep c</tt> recursively requires all parts of the datatype to be
--   an instance of <tt>c</tt> and of <a>Generic</a>.
class DeepConstraint c t => Deep (c :: * -> Constraint) t

-- | A trick to avoid GHC from detecting a cycle.

-- | For primitive values like <a>Int</a>, <a>Float</a>, <a>Double</a> and
--   <a>Char</a>, the generic representation of a value contains itself. If
--   you use generics recursively (f.e. using <a>Deep</a>), use
--   <a>isAtom</a> to detect primitive values and prevent an infinite loop.
isAtom :: (ADT t, Typeable t, Constraints t Typeable) => proxy t -> Bool
instance (DeepConstraint c t) => Deep c t
instance ADT' f => ADT' (M1 i t f)
instance ADT' (K1 i v)
instance (ADT' f, ADT' g) => ADT' (f :*: g)
instance ADT' U1
instance (ADT' f, ADT' g) => ADT' (f :+: g)
instance ADT' V1
