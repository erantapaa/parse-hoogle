-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HSP support for Formlets
--   
--   A modular way to build forms based on applicative functors, as
--   described in:
--   
--   <ul>
--   <li>Ezra Cooper, Samuel Lindley, Philip Wadler and Jeremy Yallop "An
--   idiom's guide to formlets" Technical Report, EDI-INF-RR-1263.
--   <a>http://groups.inf.ed.ac.uk/links/formlets/</a></li>
--   </ul>
--   
--   This library extends formlets with support for HSP
@package formlets-hsp
@version 2.3.1

module HSP.Formlets
input :: (XMLGenerator x, Monad v) => Maybe String -> Form [XMLGenT x (XML x)] v String
textarea :: (XMLGenerator x, Monad v) => (String -> Rect) -> Maybe String -> Form [XMLGenT x (XML x)] v String
file :: (XMLGenerator x, Monad v) => Form [XMLGenT x (XML x)] v File
label :: (XMLGenerator x, Monad v) => String -> Form [XMLGenT x (XML x)] v ()
hidden :: (XMLGenerator x, Monad v) => Maybe String -> Form [XMLGenT x (XML x)] v String
submit :: (XMLGenerator x, Monad v) => String -> Form [XMLGenT x (XML x)] v Bool
password :: (Monad v, XMLGenerator x) => Maybe String -> Form [XMLGenT x (XML x)] v String
checkboxes :: (XMLGenerator x, Monad v, Applicative v, Read a, Show a) => [(a, String)] -> [a] -> Form [XMLGenT x (XML x)] v [a]
select :: (XMLGenerator x, Monad v, Applicative v, Read a, Show a) => Maybe a -> [(a, String)] -> Form [XMLGenT x (XML x)] v (Maybe a)
selectMulti :: (XMLGenerator x, Monad v, Applicative v, Read a, Show a) => [(a, String)] -> Form [XMLGenT x (XML x)] v [a]
radio :: (XMLGenerator x, Monad v, Applicative v, Read a, Show a) => [(a, String)] -> Maybe a -> Form [XMLGenT x (XML x)] v (Maybe a)
div :: (Monad m1, EmbedAsChild m xml, EmbedAsAttr m (Attr [Char] a), Monoid xml) => a -> Form xml m1 b -> Form [XMLGenT m (XML m)] m1 b
span :: (Monad m1, EmbedAsChild m xml, EmbedAsAttr m (Attr [Char] a), Monoid xml) => a -> Form xml m1 b -> Form [XMLGenT m (XML m)] m1 b
withAttrs :: (EmbedAsAttr x (Attr attr val), XMLGenerator x, Monad v) => [Attr attr val] -> Form [XMLGenT x (XML x)] v a -> Form [XMLGenT x (XML x)] v a
fset :: (EmbedAsAttr x (Attr attr val), XMLGenerator x, Monad v) => Form [XMLGenT x (XML x)] v a -> [Attr attr val] -> Form [XMLGenT x (XML x)] v a
