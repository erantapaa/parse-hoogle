-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Caching asynchronous DNS resolver.
--   
--   Caching asynchronous DNS resolver built on top of GNU ADNS
--   <a>http://www.chiark.greenend.org.uk/~ian/adns/</a>.
--   
--   <ul>
--   <li>Resolves several IP addresses for one host (if available) in
--   round-robin fashion.</li>
--   <li>Limits number of parallel requests (so DNS resolving continues to
--   work even under heavy load).</li>
--   <li>Errors are cached too (for one minute).</li>
--   <li>Handles CNAMEs (<tt>hsdns</tt> returns error for them).</li>
--   </ul>
--   
--   This cache is tested in a long running web-crawler (used in
--   <a>http://bazqux.com</a>) so it should be safe to use it in real world
--   applications.
@package hsdns-cache
@version 1.0.3


-- | Caching asynchronous DNS resolver built on top of GNU ADNS
--   <a>http://www.chiark.greenend.org.uk/~ian/adns/</a>.
--   
--   <ul>
--   <li>Resolves several IP addresses for one host (if available) in
--   round-robin fashion.</li>
--   <li>Limits number of parallel requests (so DNS resolving continues to
--   work even under heavy load).</li>
--   <li>Errors are cached too (for one minute).</li>
--   <li>Handles CNAMEs (<tt>hsdns</tt> returns error for them).</li>
--   </ul>
--   
--   You should link your program with the <i>threaded</i> runtime-system
--   when using this module. In GHC, this is accomplished by specifying
--   <tt>-threaded</tt> on the command-line.
--   
--   This cache is tested in a long running web-crawler (used in
--   <a>http://bazqux.com</a>) so it should be safe to use it in real world
--   applications.
module ADNS.Cache

-- | Asynchronous DNS cache.
data DnsCache

-- | Create cache and run action passed.
withDnsCache :: (DnsCache -> IO a) -> IO a

-- | Wait till all running resolvers are finished and block further
--   resolvers.
stopDnsCache :: DnsCache -> IO ()

-- | Resolve A DNS record.
resolveA :: DnsCache -> HostName -> IO (Either String HostAddress)

-- | Resolve cached A DNS record. Returns Nothing if host name is not yet
--   cached.
resolveCachedA :: DnsCache -> HostName -> IO (Maybe (Either String HostAddress))

-- | Show <tt>HostAddress</tt> in standard 123.45.67.89 format.
--   
--   Unlike <a>inet_ntoa</a> this function is pure and thread-safe.
showHostAddress :: HostAddress -> String
instance Show a => Show (Queue a)
