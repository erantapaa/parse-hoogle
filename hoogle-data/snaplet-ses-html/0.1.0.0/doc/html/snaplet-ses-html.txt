-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Snaplet for the ses-html package
--   
@package snaplet-ses-html
@version 0.1.0.0

module Snap.Snaplet.SES

-- | Initialize snaplet
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   {-# LANGUAGE RecordWildCards   #-}
--   {-# LANGUAGE TemplateHaskell   #-}
--   module Main ( main ) where
--    
--   import           Control.Lens
--   import qualified Data.ByteString.Char8 as B8
--   import qualified Data.ByteString.Lazy.Char8 as BL8
--   import           Snap
--   import           Snap.Snaplet.SES
--    
--   data App = App {
--      _awsKeys :: Snaplet AWSKeys
--   }
--    
--   makeLenses ''App
--    
--   initApp :: SnapletInit App App
--   initApp = makeSnaplet "name" "description" Nothing $ do
--               _awsKeys &lt;- nestSnaplet "ses-html" awsKeys initAWSKeys
--               addRoutes [("/", handleKeys)]
--               return App {..}
--     where
--       handleKeys = method GET $ do
--         with awsKeys $ withKeys $ liftIO . print
--         result &lt;- with awsKeys $ sendEmail ["david@solidtranslate.com"] "cookie-crisp" "&lt;h1&gt;TEST&lt;/h1&gt;"
--         liftIO $ print result
--         writeBS "done"
--    
--   main :: IO ()
--   main = do (_, app, _) &lt;- runSnaplet Nothing initApp
--             httpServe config app
--     where
--       config = setAccessLog ConfigNoLog $
--                setErrorLog ConfigNoLog $
--                defaultConfig
--   </pre>
--   
--   ./snaplets/ses-html/devel.cfg
--   
--   <pre>
--   public = "publickey"
--   secret = "secretkey"
--   region = "us-east-1"
--   sender = "sender@verifiedaddress.com"
--   </pre>
initAWSKeys :: SnapletInit a AWSKeys

-- | Send a ByteString of HTML from a Snap Handler
sendEmail :: HasAWSKeys m => To -> Subject -> ByteString -> m SESResult

-- | Send Blaze email from a snap handler
sendEmailBlaze :: HasAWSKeys m => To -> Subject -> Html -> m SESResult

-- | Helper function for operating on <a>AWSKeys</a> inside of
--   <a>HasAWSKeys</a> constrained Monads
withKeys :: HasAWSKeys m => (AWSKeys -> IO a) -> m a

-- | Type to hold AWS Config Information
data AWSKeys
AWSKeys :: PublicKey -> SecretKey -> Region -> Text -> AWSKeys

-- | AWS Public Key
publicKey :: AWSKeys -> PublicKey

-- | AWS Secret Key
secretKey :: AWSKeys -> SecretKey

-- | AWS Region Key
region :: AWSKeys -> Region

-- | AWS Verified Sender Email
sender :: AWSKeys -> Text

-- | Class to allow extraction of <a>AWSKeys</a> from arbitrary Monads
--   constrained by MonadIO
class MonadIO m => HasAWSKeys m
getKeys :: HasAWSKeys m => m AWSKeys
instance Show AWSKeys
instance MonadIO m => HasAWSKeys (ReaderT AWSKeys m)
instance MonadIO m => HasAWSKeys (ReaderT (Snaplet AWSKeys) m)
instance HasAWSKeys (Handler b AWSKeys)
