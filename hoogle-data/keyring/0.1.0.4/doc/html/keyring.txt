-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Keyring access
--   
@package keyring
@version 0.1.0.4


-- | Access to KWallet.
module System.Keyring.Unix.KDE

-- | <tt><a>getPassword</a> service username</tt> gets a password from the
--   user's network wallet.
--   
--   <tt>username</tt> is the name of the user whose password to get.
--   <tt>service</tt> identifies the application which fetches the
--   password.
--   
--   This function throws <a>KWalletError</a> if access to KWallet failed.
getPassword :: Service -> Username -> IO (Maybe Password)

-- | <tt><a>setPassword</a> service username password</tt> adds
--   <tt>password</tt> for <tt>username</tt> to the user's network wallet.
--   
--   <tt>username</tt> is the name of the user whose password to set.
--   <tt>service</tt> identifies the application which sets the password.
--   
--   This function throws <a>KWalletError</a> if access to KWallet failed.
setPassword :: Service -> Username -> Password -> IO ()
data KWalletError

-- | <tt><a>KWalletDBusError</a> name message</tt> denotes an error
--   received over DBus.
--   
--   <tt>name</tt> is the proper name of the error, and <tt>message</tt> is
--   a human-readable error message.
KWalletDBusError :: ErrorName -> (Maybe String) -> KWalletError

-- | <tt><a>KWalletOperationError</a> message</tt> denotes a failed KWallet
--   operation.
--   
--   <tt>message</tt> is a human-readable error message with details on the
--   error.
KWalletOperationError :: String -> KWalletError

-- | <tt><a>KWalletInvalidReturn</a> expected actual</tt> denotes an
--   unexpected return value from a DBus method call.
--   
--   <tt>expected</tt> is the expected type signature, and <tt>actual</tt>
--   is the signature which was actually received from the remote DBus
--   object.
KWalletInvalidReturn :: [Type] -> [Type] -> KWalletError
instance Typeable KWalletError
instance DBusTypeable Wallet
instance DBusTypeable AppID
instance Exception KWalletError
instance Show KWalletError


-- | Access to keyrings of Unix systems.
--   
--   Currently this module only supports KWallet, via
--   <a>System.Keyring.Unix.KDE</a>.
--   
--   This module and any of its submodules are not available on OS X. See
--   <a>System.Keyring.Darwin</a> for keyring support on OS X.
module System.Keyring.Unix

-- | <tt><a>getPassword</a> service username</tt> gets a password from the
--   current keyring.
--   
--   <tt>username</tt> is the name of the user whose password to get.
--   <tt>service</tt> identifies the application which fetches the
--   password.
--   
--   This function throws <a>KeyringMissingBackendError</a> is no keyring
--   implementation exists for the current system and environment, and
--   <a>KeyringError</a> if access to the keyring failed.
getPassword :: Service -> Username -> IO (Maybe Password)

-- | <tt><a>setPassword</a> service username password</tt> adds
--   <tt>password</tt> for <tt>username</tt> to the current keyring.
--   
--   <tt>username</tt> is the name of the user whose password to set.
--   <tt>service</tt> identifies the application which sets the password.
--   
--   This function throws <a>KeyringMissingBackendError</a> is no keyring
--   implementation exists for the current system and environment, and
--   <a>KeyringError</a> if access to the keyring failed.
setPassword :: Service -> Username -> Password -> IO ()


-- | Access to the keyring of the user.
--   
--   This module provides access to the keyring of the current system.
--   Currently this module supports the following keyrings:
--   
--   <ul>
--   <li>Keychain on OS X</li>
--   <li>KWallet on KDE</li>
--   </ul>
--   
--   The module automatically picks the best appropriate keyring.
module System.Keyring

-- | A service which uses the keyring
--   
--   The service identifies the application or service for which a secret
--   is stored.
newtype Service
Service :: String -> Service

-- | A username
newtype Username
Username :: String -> Username

-- | A password
newtype Password
Password :: String -> Password

-- | <tt><a>getPassword</a> service username</tt> gets the password for the
--   given <tt>username</tt> and <tt>service</tt> from the keyring.
--   
--   <tt>service</tt> identifies the application which gets the password.
--   
--   This function throws <a>KeyringMissingBackendError</a> is no keyring
--   implementation exists for the current system and environment, and
--   <a>KeyringError</a> if access to the keyring failed.
getPassword :: Service -> Username -> IO (Maybe Password)

-- | <tt><a>setPassword</a> service username password</tt> adds
--   <tt>password</tt> to the keyring.
--   
--   <tt>service</tt> identifies the application which sets the password.
--   
--   This function throws <a>KeyringMissingBackendError</a> is no keyring
--   implementation exists for the current system and environment, and
--   <a>KeyringError</a> if access to the keyring failed.
setPassword :: Service -> Username -> Password -> IO ()

-- | Base type for all exceptions of this library.
data KeyringError
KeyringError :: e -> KeyringError
data KeyringMissingBackendError

-- | <tt><a>KeyringMissingBackendError</a></tt> indicates that no keyring
--   backend is available for the current system and environment.
--   
--   See <a>System.Keyring</a> for a list of supported keyring backends.
KeyringMissingBackendError :: KeyringMissingBackendError
