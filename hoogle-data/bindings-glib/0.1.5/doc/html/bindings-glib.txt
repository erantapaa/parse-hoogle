-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Low level bindings to GLib.
--   
--   Low level bindings to GLib.
@package bindings-glib
@version 0.1.5


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Standard-Macros.html</a>
module Bindings.GLib.Fundamentals.StandardMacros
c'G_DIR_SEPARATOR :: Num a => a
c'G_DIR_SEPARATOR_S :: Ptr a
c'G_IS_DIR_SEPARATOR :: CChar -> CInt
c'G_SEARCHPATH_SEPARATOR :: Num a => a
c'G_SEARCHPATH_SEPARATOR_S :: Ptr a
c'TRUE :: Num a => a
c'FALSE :: Num a => a
c'NULL :: Ptr a
c'G_MEM_ALIGN :: Num a => a


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Numerical-Definitions.html</a>
module Bindings.GLib.Fundamentals.NumericalDefinitions
c'G_IEEE754_FLOAT_BIAS :: Num a => a
c'G_IEEE754_DOUBLE_BIAS :: Num a => a
c'G_E :: Fractional a => a
c'G_LN2 :: Fractional a => a
c'G_LN10 :: Fractional a => a
c'G_PI :: Fractional a => a
c'G_PI_2 :: Fractional a => a
c'G_PI_4 :: Fractional a => a
c'G_SQRT2 :: Fractional a => a
c'G_LOG_2_BASE_10 :: Fractional a => a


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Miscellaneous-Macros.html</a>
module Bindings.GLib.Fundamentals.MiscellaneousMacros
c'G_GINT16_MODIFIER :: Ptr a
c'G_GINT16_FORMAT :: Ptr a
c'G_GUINT16_FORMAT :: Ptr a
c'G_GINT32_MODIFIER :: Ptr a
c'G_GINT32_FORMAT :: Ptr a
c'G_GUINT32_FORMAT :: Ptr a
c'G_GINT64_MODIFIER :: Ptr a
c'G_GINT64_FORMAT :: Ptr a
c'G_GUINT64_FORMAT :: Ptr a
c'G_GSIZE_MODIFIER :: Ptr a
c'G_GSIZE_FORMAT :: Ptr a
c'G_GSSIZE_FORMAT :: Ptr a
c'G_GOFFSET_MODIFIER :: Ptr a
c'G_GOFFSET_FORMAT :: Ptr a
c'G_GINTPTR_MODIFIER :: Ptr a
c'G_GINTPTR_FORMAT :: Ptr a
c'G_GUINTPTR_FORMAT :: Ptr a


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Limits-of-Basic-Types.html</a>
module Bindings.GLib.Fundamentals.LimitsOfBasicTypes
c'G_MININT :: Num a => a
c'G_MAXINT :: Num a => a
c'G_MAXUINT :: Num a => a
c'G_MINSHORT :: Num a => a
c'G_MAXSHORT :: Num a => a
c'G_MAXUSHORT :: Num a => a
c'G_MINLONG :: Num a => a
c'G_MAXLONG :: Num a => a
c'G_MAXULONG :: Num a => a
c'G_MININT8 :: Num a => a
c'G_MAXINT8 :: Num a => a
c'G_MAXUINT8 :: Num a => a
c'G_MININT16 :: Num a => a
c'G_MAXINT16 :: Num a => a
c'G_MAXUINT16 :: Num a => a
c'G_MININT32 :: Num a => a
c'G_MAXINT32 :: Num a => a
c'G_MAXUINT32 :: Num a => a
c'G_MININT64 :: Num a => a
c'G_MAXINT64 :: Num a => a
c'G_MAXUINT64 :: Num a => a
c'G_MAXSIZE :: Num a => a
c'G_MINSSIZE :: Num a => a
c'G_MAXSSIZE :: Num a => a
c'G_MINOFFSET :: Num a => a
c'G_MAXOFFSET :: Num a => a
c'G_MINFLOAT :: Num a => a
c'G_MAXFLOAT :: Num a => a
c'G_MINDOUBLE :: Num a => a
c'G_MAXDOUBLE :: Num a => a


-- | 
--   <a>http://library.gnome.org/devel/glib/unstable/glib-Basic-Types.html</a>
module Bindings.GLib.Fundamentals.BasicTypes
type C'gboolean = CInt
type C'gpointer = Ptr ()
type C'gconstpointer = Ptr ()
type C'gchar = CChar
type C'guchar = CUChar
type C'gint = CInt
type C'guint = CUInt
type C'gshort = Int16
type C'gushort = Word16
type C'glong = CInt
type C'gulong = CUInt
type C'gint8 = CChar
type C'guint8 = CUChar
type C'gint16 = Int16
type C'guint16 = Word16
type C'gint32 = CInt
type C'guint32 = CUInt
type C'gint64 = Int64
type C'guint64 = Word64
type C'gfloat = CFloat
type C'gdouble = CDouble
type C'gsize = CUInt
type C'gssize = CInt
type C'goffset = Int64
type C'gintptr = CInt
type C'guintptr = CUInt


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Byte-Order-Macros.html</a>
module Bindings.GLib.Fundamentals.ByteOrderMacros
c'g_htonl :: C'gint32 -> C'gint32
c'g_htons :: C'gint16 -> C'gint16
c'g_ntohl :: C'gint32 -> C'gint32
c'g_ntohs :: C'gint16 -> C'gint16
c'GINT_FROM_BE :: C'gint -> C'gint
c'GINT_FROM_LE :: C'gint -> C'gint
c'GINT_TO_BE :: C'gint -> C'gint
c'GINT_TO_LE :: C'gint -> C'gint
c'GUINT_FROM_BE :: C'guint -> C'guint
c'GUINT_FROM_LE :: C'guint -> C'guint
c'GUINT_TO_BE :: C'guint -> C'guint
c'GUINT_TO_LE :: C'guint -> C'guint
c'GLONG_FROM_BE :: C'glong -> C'glong
c'GLONG_FROM_LE :: C'glong -> C'glong
c'GLONG_TO_BE :: C'glong -> C'glong
c'GLONG_TO_LE :: C'glong -> C'glong
c'GULONG_FROM_BE :: C'gulong -> C'gulong
c'GULONG_FROM_LE :: C'gulong -> C'gulong
c'GULONG_TO_BE :: C'gulong -> C'gulong
c'GULONG_TO_LE :: C'gulong -> C'gulong
c'GINT16_FROM_BE :: C'gint16 -> C'gint16
c'GINT16_FROM_LE :: C'gint16 -> C'gint16
c'GINT16_TO_BE :: C'gint16 -> C'gint16
c'GINT16_TO_LE :: C'gint16 -> C'gint16
c'GUINT16_FROM_BE :: C'guint16 -> C'guint16
c'GUINT16_FROM_LE :: C'guint16 -> C'guint16
c'GUINT16_TO_BE :: C'guint16 -> C'guint16
c'GUINT16_TO_LE :: C'guint16 -> C'guint16
c'GINT32_FROM_BE :: C'gint32 -> C'gint32
c'GINT32_FROM_LE :: C'gint32 -> C'gint32
c'GINT32_TO_BE :: C'gint32 -> C'gint32
c'GINT32_TO_LE :: C'gint32 -> C'gint32
c'GUINT32_FROM_BE :: C'guint32 -> C'guint32
c'GUINT32_FROM_LE :: C'guint32 -> C'guint32
c'GUINT32_TO_BE :: C'guint32 -> C'guint32
c'GUINT32_TO_LE :: C'guint32 -> C'guint32
c'GINT64_FROM_BE :: C'gint64 -> C'gint64
c'GINT64_FROM_LE :: C'gint64 -> C'gint64
c'GINT64_TO_BE :: C'gint64 -> C'gint64
c'GINT64_TO_LE :: C'gint64 -> C'gint64
c'GUINT64_FROM_BE :: C'guint64 -> C'guint64
c'GUINT64_FROM_LE :: C'guint64 -> C'guint64
c'GUINT64_TO_BE :: C'guint64 -> C'guint64
c'GUINT64_TO_LE :: C'guint64 -> C'guint64
c'GUINT16_SWAP_BE_PDP :: C'guint16 -> C'guint16
c'GUINT16_SWAP_LE_BE :: C'guint16 -> C'guint16
c'GUINT16_SWAP_LE_PDP :: C'guint16 -> C'guint16
c'GUINT32_SWAP_BE_PDP :: C'guint32 -> C'guint32
c'GUINT32_SWAP_LE_BE :: C'guint32 -> C'guint32
c'GUINT32_SWAP_LE_PDP :: C'guint32 -> C'guint32
c'GUINT64_SWAP_LE_BE :: C'guint64 -> C'guint64


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Type-Conversion-Macros.html</a>
module Bindings.GLib.Fundamentals.TypeConversionMacros
c'GINT_TO_POINTER :: C'gint -> C'gpointer
c'GPOINTER_TO_INT :: C'gpointer -> C'gint
c'GUINT_TO_POINTER :: C'guint -> C'gpointer
c'GPOINTER_TO_UINT :: C'gpointer -> C'guint
c'GSIZE_TO_POINTER :: C'gsize -> C'gpointer
c'GPOINTER_TO_SIZE :: C'gpointer -> C'gsize


-- | 
--   <a>http://library.gnome.org/devel/glib/unstable/glib-Version-Information.html</a>
module Bindings.GLib.Fundamentals.VersionInformation
p'glib_major_version :: Ptr (C'guint)
p'glib_minor_version :: Ptr (C'guint)
p'glib_micro_version :: Ptr (C'guint)
p'glib_binary_age :: Ptr (C'guint)
p'glib_interface_age :: Ptr (C'guint)
c'glib_check_version :: C'guint -> C'guint -> C'guint -> IO (Ptr C'gchar)
p'glib_check_version :: FunPtr (C'guint -> C'guint -> C'guint -> IO (Ptr C'gchar))
c'GLIB_MAJOR_VERSION :: Num a => a
c'GLIB_MINOR_VERSION :: Num a => a
c'GLIB_MICRO_VERSION :: Num a => a


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Memory-Allocation.html</a>
module Bindings.GLib.CoreApplicationSupport.MemoryAllocation
c'g_malloc :: C'gsize -> IO C'gpointer
c'g_malloc0 :: C'gsize -> IO C'gpointer
p'g_malloc :: FunPtr (C'gsize -> IO C'gpointer)
c'g_realloc :: C'gpointer -> C'gsize -> IO C'gpointer
c'g_try_malloc :: C'gsize -> IO C'gpointer
p'g_malloc0 :: FunPtr (C'gsize -> IO C'gpointer)
c'g_try_malloc0 :: C'gsize -> IO C'gpointer
p'g_realloc :: FunPtr (C'gpointer -> C'gsize -> IO C'gpointer)
p'g_try_malloc :: FunPtr (C'gsize -> IO C'gpointer)
c'g_try_realloc :: C'gpointer -> C'gsize -> IO C'gpointer
c'g_free :: C'gpointer -> IO ()
p'g_try_malloc0 :: FunPtr (C'gsize -> IO C'gpointer)
p'g_mem_gc_friendly :: Ptr (C'gboolean)
p'g_try_realloc :: FunPtr (C'gpointer -> C'gsize -> IO C'gpointer)
p'g_free :: FunPtr (C'gpointer -> IO ())
c'g_memdup :: C'gconstpointer -> C'guint -> IO C'gpointer
p'g_memdup :: FunPtr (C'gconstpointer -> C'guint -> IO C'gpointer)
data C'GMemVTable
C'GMemVTable :: FunPtr (C'gsize -> IO C'gpointer) -> FunPtr (C'gpointer -> C'gsize -> IO C'gpointer) -> FunPtr (C'gpointer -> IO ()) -> FunPtr (C'gsize -> C'gsize -> IO C'gpointer) -> FunPtr (C'gsize -> IO C'gpointer) -> FunPtr (C'gpointer -> C'gsize -> IO C'gpointer) -> C'GMemVTable
c'GMemVTable'malloc :: C'GMemVTable -> FunPtr (C'gsize -> IO C'gpointer)
c'GMemVTable'realloc :: C'GMemVTable -> FunPtr (C'gpointer -> C'gsize -> IO C'gpointer)
c'GMemVTable'free :: C'GMemVTable -> FunPtr (C'gpointer -> IO ())
c'GMemVTable'calloc :: C'GMemVTable -> FunPtr (C'gsize -> C'gsize -> IO C'gpointer)
c'GMemVTable'try_malloc :: C'GMemVTable -> FunPtr (C'gsize -> IO C'gpointer)
c'GMemVTable'try_realloc :: C'GMemVTable -> FunPtr (C'gpointer -> C'gsize -> IO C'gpointer)
c'g_mem_set_vtable :: Ptr C'GMemVTable -> IO ()
c'g_mem_is_system_malloc :: IO C'gboolean
p'g_mem_set_vtable :: FunPtr (Ptr C'GMemVTable -> IO ())
p'glib_mem_profiler_table :: Ptr (Ptr C'GMemVTable)
p'g_mem_is_system_malloc :: FunPtr (IO C'gboolean)
c'g_mem_profile :: IO ()
p'g_mem_profile :: FunPtr (IO ())
instance Eq C'GMemVTable
instance Show C'GMemVTable
instance Storable C'GMemVTable


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Atomic-Operations.html</a>
module Bindings.GLib.Fundamentals.AtomicOperations
c'g_atomic_int_get :: Ptr C'gint -> IO C'gint
c'g_atomic_int_set :: Ptr C'gint -> C'gint -> IO ()
c'g_atomic_int_add :: Ptr C'gint -> C'gint -> IO ()
c'g_atomic_int_exchange_and_add :: Ptr C'gint -> C'gint -> IO C'gint
c'g_atomic_int_compare_and_exchange :: Ptr C'gint -> C'gint -> C'gint -> IO C'gboolean
c'g_atomic_pointer_get :: Ptr C'gpointer -> IO C'gpointer
c'g_atomic_pointer_set :: Ptr C'gpointer -> C'gpointer -> IO ()
c'g_atomic_pointer_compare_and_exchange :: Ptr C'gpointer -> C'gpointer -> C'gpointer -> IO C'gboolean
c'g_atomic_int_inc :: Ptr C'gint -> IO ()
c'g_atomic_int_dec_and_test :: Ptr C'gint -> IO C'gboolean


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-fundamentals.html</a>
module Bindings.GLib.Fundamentals


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Message-Logging.html</a>
module Bindings.GLib.CoreApplicationSupport.MessageLogging
c'G_LOG_DOMAIN :: Ptr a
c'G_LOG_FATAL_MASK :: Num a => a
c'G_LOG_LEVEL_USER_SHIFT :: Num a => a
type C'GLogFunc = FunPtr (Ptr C'gchar -> C'GLogLevelFlags -> Ptr C'gchar -> C'gpointer -> IO ())
mk'GLogFunc :: (Ptr C'gchar -> C'GLogLevelFlags -> Ptr C'gchar -> C'gpointer -> IO ()) -> IO C'GLogFunc
type C'GLogLevelFlags = CInt
mK'GLogFunc :: C'GLogFunc -> (Ptr C'gchar -> C'GLogLevelFlags -> Ptr C'gchar -> C'gpointer -> IO ())
c'G_LOG_FLAG_RECURSION :: Num a => a
c'G_LOG_FLAG_FATAL :: Num a => a
c'G_LOG_LEVEL_ERROR :: Num a => a
c'G_LOG_LEVEL_CRITICAL :: Num a => a
c'G_LOG_LEVEL_WARNING :: Num a => a
c'G_LOG_LEVEL_MESSAGE :: Num a => a
c'G_LOG_LEVEL_INFO :: Num a => a
c'G_LOG_LEVEL_DEBUG :: Num a => a
c'G_LOG_LEVEL_MASK :: Num a => a
c'g_log_set_handler :: Ptr C'gchar -> C'GLogLevelFlags -> C'GLogFunc -> C'gpointer -> IO C'guint
c'g_log_remove_handler :: Ptr C'gchar -> C'guint -> IO ()
c'g_log_set_always_fatal :: C'GLogLevelFlags -> IO C'GLogLevelFlags
p'g_log_set_handler :: FunPtr (Ptr C'gchar -> C'GLogLevelFlags -> C'GLogFunc -> C'gpointer -> IO C'guint)
p'g_log_remove_handler :: FunPtr (Ptr C'gchar -> C'guint -> IO ())
c'g_log_set_fatal_mask :: Ptr C'gchar -> C'GLogLevelFlags -> IO C'GLogLevelFlags
p'g_log_set_always_fatal :: FunPtr (C'GLogLevelFlags -> IO C'GLogLevelFlags)
c'g_log_default_handler :: Ptr C'gchar -> C'GLogLevelFlags -> Ptr C'gchar -> C'gpointer -> IO ()
c'g_log_set_default_handler :: C'GLogFunc -> C'gpointer -> IO C'GLogFunc
p'g_log_set_fatal_mask :: FunPtr (Ptr C'gchar -> C'GLogLevelFlags -> IO C'GLogLevelFlags)
p'g_log_default_handler :: FunPtr (Ptr C'gchar -> C'GLogLevelFlags -> Ptr C'gchar -> C'gpointer -> IO ())
p'g_log_set_default_handler :: FunPtr (C'GLogFunc -> C'gpointer -> IO C'GLogFunc)


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Warnings-and-Assertions.html</a>
module Bindings.GLib.CoreApplicationSupport.MessageOutputAndDebuggingFunctions
c'g_set_print_handler :: Ptr C'GPrintFunc -> IO C'GPrintFunc
type C'GPrintFunc = FunPtr (Ptr C'gchar -> IO ())
p'g_set_print_handler :: FunPtr (Ptr C'GPrintFunc -> IO C'GPrintFunc)
mk'GPrintFunc :: (Ptr C'gchar -> IO ()) -> IO C'GPrintFunc
c'g_set_printerr_handler :: C'GPrintFunc -> IO C'GPrintFunc
mK'GPrintFunc :: C'GPrintFunc -> (Ptr C'gchar -> IO ())
c'g_on_error_query :: Ptr C'gchar -> IO ()
p'g_set_printerr_handler :: FunPtr (C'GPrintFunc -> IO C'GPrintFunc)
c'g_on_error_stack_trace :: Ptr C'gchar -> IO ()
p'g_on_error_query :: FunPtr (Ptr C'gchar -> IO ())
p'g_on_error_stack_trace :: FunPtr (Ptr C'gchar -> IO ())


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Date-and-Time-Functions.html</a>
module Bindings.GLib.Utilities.DateAndTimeFunctions
c'G_USEC_PER_SEC :: Num a => a
data C'GTimeVal
C'GTimeVal :: C'glong -> C'glong -> C'GTimeVal
c'GTimeVal'tv_sec :: C'GTimeVal -> C'glong
c'GTimeVal'tv_usec :: C'GTimeVal -> C'glong
c'g_get_current_time :: Ptr C'GTimeVal -> IO ()
c'g_usleep :: C'gulong -> IO ()
p'g_get_current_time :: FunPtr (Ptr C'GTimeVal -> IO ())
c'g_time_val_add :: Ptr C'GTimeVal -> C'glong -> IO ()
p'g_usleep :: FunPtr (C'gulong -> IO ())
c'g_time_val_from_iso8601 :: Ptr C'gchar -> Ptr C'GTimeVal -> IO C'gboolean
c'g_time_val_to_iso8601 :: Ptr C'GTimeVal -> IO (Ptr C'gchar)
p'g_time_val_add :: FunPtr (Ptr C'GTimeVal -> C'glong -> IO ())
p'g_time_val_from_iso8601 :: FunPtr (Ptr C'gchar -> Ptr C'GTimeVal -> IO C'gboolean)
p'g_time_val_to_iso8601 :: FunPtr (Ptr C'GTimeVal -> IO (Ptr C'gchar))
data C'GDate
C'GDate :: C'GDate
type C'GDateDMY = CUInt
c'G_DATE_DAY :: Num a => a
c'G_DATE_MONTH :: Num a => a
c'G_DATE_YEAR :: Num a => a
type C'GDateDay = CUChar
type C'GDateMonth = CUInt
c'G_DATE_BAD_MONTH :: Num a => a
c'G_DATE_JANUARY :: Num a => a
c'G_DATE_FEBRUARY :: Num a => a
c'G_DATE_MARCH :: Num a => a
c'G_DATE_APRIL :: Num a => a
c'G_DATE_MAY :: Num a => a
c'G_DATE_JUNE :: Num a => a
c'G_DATE_JULY :: Num a => a
c'G_DATE_AUGUST :: Num a => a
c'G_DATE_SEPTEMBER :: Num a => a
c'G_DATE_OCTOBER :: Num a => a
c'G_DATE_NOVEMBER :: Num a => a
c'G_DATE_DECEMBER :: Num a => a
type C'GDateYear = Word16
type C'GDateWeekday = CUInt
c'G_DATE_BAD_WEEKDAY :: Num a => a
c'G_DATE_MONDAY :: Num a => a
c'G_DATE_TUESDAY :: Num a => a
c'G_DATE_WEDNESDAY :: Num a => a
c'G_DATE_THURSDAY :: Num a => a
c'G_DATE_FRIDAY :: Num a => a
c'G_DATE_SATURDAY :: Num a => a
c'G_DATE_SUNDAY :: Num a => a
c'G_DATE_BAD_DAY :: Num a => a
c'G_DATE_BAD_JULIAN :: Num a => a
c'G_DATE_BAD_YEAR :: Num a => a
c'g_date_new :: IO (Ptr C'GDate)
c'g_date_new_dmy :: C'GDateDay -> C'GDateMonth -> C'GDateYear -> IO (Ptr C'GDate)
p'g_date_new :: FunPtr (IO (Ptr C'GDate))
c'g_date_new_julian :: C'guint32 -> IO (Ptr C'GDate)
c'g_date_clear :: Ptr C'GDate -> C'guint -> IO ()
p'g_date_new_dmy :: FunPtr (C'GDateDay -> C'GDateMonth -> C'GDateYear -> IO (Ptr C'GDate))
c'g_date_free :: Ptr C'GDate -> IO ()
p'g_date_new_julian :: FunPtr (C'guint32 -> IO (Ptr C'GDate))
p'g_date_clear :: FunPtr (Ptr C'GDate -> C'guint -> IO ())
p'g_date_free :: FunPtr (Ptr C'GDate -> IO ())
c'g_date_set_day :: Ptr C'GDate -> C'GDateDay -> IO ()
c'g_date_set_month :: Ptr C'GDate -> C'GDateMonth -> IO ()
c'g_date_set_year :: Ptr C'GDate -> C'GDateYear -> IO ()
p'g_date_set_day :: FunPtr (Ptr C'GDate -> C'GDateDay -> IO ())
p'g_date_set_month :: FunPtr (Ptr C'GDate -> C'GDateMonth -> IO ())
c'g_date_set_dmy :: Ptr C'GDate -> C'GDateDay -> C'GDateMonth -> C'GDateYear -> IO ()
c'g_date_set_julian :: Ptr C'GDate -> C'guint32 -> IO ()
p'g_date_set_year :: FunPtr (Ptr C'GDate -> C'GDateYear -> IO ())
c'g_date_set_time_t :: Ptr C'GDate -> CTime -> IO ()
p'g_date_set_dmy :: FunPtr (Ptr C'GDate -> C'GDateDay -> C'GDateMonth -> C'GDateYear -> IO ())
c'g_date_set_time_val :: Ptr C'GDate -> Ptr C'GTimeVal -> IO ()
p'g_date_set_julian :: FunPtr (Ptr C'GDate -> C'guint32 -> IO ())
c'g_date_set_parse :: Ptr C'GDate -> Ptr C'gchar -> IO ()
p'g_date_set_time_t :: FunPtr (Ptr C'GDate -> CTime -> IO ())
p'g_date_set_time_val :: FunPtr (Ptr C'GDate -> Ptr C'GTimeVal -> IO ())
c'g_date_add_days :: Ptr C'GDate -> C'guint -> IO ()
p'g_date_set_parse :: FunPtr (Ptr C'GDate -> Ptr C'gchar -> IO ())
c'g_date_subtract_days :: Ptr C'GDate -> C'guint -> IO ()
c'g_date_add_months :: Ptr C'GDate -> C'guint -> IO ()
p'g_date_add_days :: FunPtr (Ptr C'GDate -> C'guint -> IO ())
c'g_date_subtract_months :: Ptr C'GDate -> C'guint -> IO ()
p'g_date_subtract_days :: FunPtr (Ptr C'GDate -> C'guint -> IO ())
c'g_date_add_years :: Ptr C'GDate -> C'guint -> IO ()
p'g_date_add_months :: FunPtr (Ptr C'GDate -> C'guint -> IO ())
c'g_date_subtract_years :: Ptr C'GDate -> C'guint -> IO ()
p'g_date_subtract_months :: FunPtr (Ptr C'GDate -> C'guint -> IO ())
c'g_date_days_between :: Ptr C'GDate -> Ptr C'GDate -> IO C'gint
p'g_date_add_years :: FunPtr (Ptr C'GDate -> C'guint -> IO ())
c'g_date_compare :: Ptr C'GDate -> Ptr C'GDate -> IO C'gint
p'g_date_subtract_years :: FunPtr (Ptr C'GDate -> C'guint -> IO ())
p'g_date_days_between :: FunPtr (Ptr C'GDate -> Ptr C'GDate -> IO C'gint)
c'g_date_clamp :: Ptr C'GDate -> Ptr C'GDate -> Ptr C'GDate -> IO ()
c'g_date_order :: Ptr C'GDate -> Ptr C'GDate -> IO ()
p'g_date_compare :: FunPtr (Ptr C'GDate -> Ptr C'GDate -> IO C'gint)
p'g_date_clamp :: FunPtr (Ptr C'GDate -> Ptr C'GDate -> Ptr C'GDate -> IO ())
c'g_date_get_day :: Ptr C'GDate -> IO C'GDateDay
p'g_date_order :: FunPtr (Ptr C'GDate -> Ptr C'GDate -> IO ())
c'g_date_get_month :: Ptr C'GDate -> IO C'GDateMonth
c'g_date_get_year :: Ptr C'GDate -> IO C'GDateYear
p'g_date_get_day :: FunPtr (Ptr C'GDate -> IO C'GDateDay)
c'g_date_get_julian :: Ptr C'GDate -> IO C'guint32
p'g_date_get_month :: FunPtr (Ptr C'GDate -> IO C'GDateMonth)
c'g_date_get_weekday :: Ptr C'GDate -> IO C'GDateWeekday
p'g_date_get_year :: FunPtr (Ptr C'GDate -> IO C'GDateYear)
c'g_date_get_day_of_year :: Ptr C'GDate -> IO C'guint
p'g_date_get_julian :: FunPtr (Ptr C'GDate -> IO C'guint32)
p'g_date_get_weekday :: FunPtr (Ptr C'GDate -> IO C'GDateWeekday)
p'g_date_get_day_of_year :: FunPtr (Ptr C'GDate -> IO C'guint)
c'g_date_get_days_in_month :: C'GDateMonth -> C'GDateYear -> IO C'guint8
c'g_date_is_first_of_month :: Ptr C'GDate -> IO C'gboolean
c'g_date_is_last_of_month :: Ptr C'GDate -> IO C'gboolean
p'g_date_get_days_in_month :: FunPtr (C'GDateMonth -> C'GDateYear -> IO C'guint8)
c'g_date_is_leap_year :: C'GDateYear -> IO C'gboolean
p'g_date_is_first_of_month :: FunPtr (Ptr C'GDate -> IO C'gboolean)
c'g_date_get_monday_week_of_year :: Ptr C'GDate -> IO C'guint
p'g_date_is_last_of_month :: FunPtr (Ptr C'GDate -> IO C'gboolean)
c'g_date_get_monday_weeks_in_year :: C'GDateYear -> IO C'guint8
p'g_date_is_leap_year :: FunPtr (C'GDateYear -> IO C'gboolean)
c'g_date_get_sunday_week_of_year :: Ptr C'GDate -> IO C'guint
p'g_date_get_monday_week_of_year :: FunPtr (Ptr C'GDate -> IO C'guint)
c'g_date_get_sunday_weeks_in_year :: C'GDateYear -> IO C'guint8
p'g_date_get_monday_weeks_in_year :: FunPtr (C'GDateYear -> IO C'guint8)
c'g_date_get_iso8601_week_of_year :: Ptr C'GDate -> IO C'guint
p'g_date_get_sunday_week_of_year :: FunPtr (Ptr C'GDate -> IO C'guint)
p'g_date_get_sunday_weeks_in_year :: FunPtr (C'GDateYear -> IO C'guint8)
p'g_date_get_iso8601_week_of_year :: FunPtr (Ptr C'GDate -> IO C'guint)
c'g_date_strftime :: Ptr C'gchar -> C'gsize -> Ptr C'gchar -> Ptr C'GDate -> IO C'gsize
data C'tm
C'tm :: C'tm
c'g_date_to_struct_tm :: Ptr C'GDate -> Ptr C'tm -> IO ()
p'g_date_strftime :: FunPtr (Ptr C'gchar -> C'gsize -> Ptr C'gchar -> Ptr C'GDate -> IO C'gsize)
c'g_date_valid :: Ptr C'GDate -> IO C'gboolean
p'g_date_to_struct_tm :: FunPtr (Ptr C'GDate -> Ptr C'tm -> IO ())
c'g_date_valid_day :: C'GDateDay -> IO C'gboolean
c'g_date_valid_month :: C'GDateMonth -> IO C'gboolean
p'g_date_valid :: FunPtr (Ptr C'GDate -> IO C'gboolean)
c'g_date_valid_year :: C'GDateYear -> IO C'gboolean
p'g_date_valid_day :: FunPtr (C'GDateDay -> IO C'gboolean)
p'g_date_valid_month :: FunPtr (C'GDateMonth -> IO C'gboolean)
c'g_date_valid_dmy :: C'GDateDay -> C'GDateMonth -> C'GDateYear -> IO C'gboolean
c'g_date_valid_julian :: C'guint32 -> IO C'gboolean
p'g_date_valid_year :: FunPtr (C'GDateYear -> IO C'gboolean)
c'g_date_valid_weekday :: C'GDateWeekday -> IO C'gboolean
p'g_date_valid_dmy :: FunPtr (C'GDateDay -> C'GDateMonth -> C'GDateYear -> IO C'gboolean)
p'g_date_valid_julian :: FunPtr (C'guint32 -> IO C'gboolean)
p'g_date_valid_weekday :: FunPtr (C'GDateWeekday -> IO C'gboolean)
instance Eq C'GTimeVal
instance Show C'GTimeVal
instance Eq C'GDate
instance Show C'GDate
instance Storable C'GDate
instance Storable C'GTimeVal


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Doubly-Linked-Lists.html</a>
module Bindings.GLib.DataTypes.DoublyLinkedLists
data C'GList
C'GList :: C'gpointer -> Ptr C'GList -> Ptr C'GList -> C'GList
c'GList'data :: C'GList -> C'gpointer
c'GList'next :: C'GList -> Ptr C'GList
c'GList'prev :: C'GList -> Ptr C'GList
c'g_list_append :: Ptr C'GList -> C'gpointer -> IO (Ptr C'GList)
c'g_list_prepend :: Ptr C'GList -> C'gpointer -> IO (Ptr C'GList)
p'g_list_append :: FunPtr (Ptr C'GList -> C'gpointer -> IO (Ptr C'GList))
c'g_list_insert :: Ptr C'GList -> C'gpointer -> C'gint -> IO (Ptr C'GList)
p'g_list_prepend :: FunPtr (Ptr C'GList -> C'gpointer -> IO (Ptr C'GList))
c'g_list_insert_before :: Ptr C'GList -> Ptr C'GList -> C'gpointer -> IO (Ptr C'GList)
c'g_list_insert_sorted :: Ptr C'GList -> C'gpointer -> C'GCompareFunc -> IO (Ptr C'GList)
p'g_list_insert :: FunPtr (Ptr C'GList -> C'gpointer -> C'gint -> IO (Ptr C'GList))
c'g_list_remove :: Ptr C'GList -> C'gconstpointer -> IO (Ptr C'GList)
p'g_list_insert_before :: FunPtr (Ptr C'GList -> Ptr C'GList -> C'gpointer -> IO (Ptr C'GList))
c'g_list_remove_link :: Ptr C'GList -> Ptr C'GList -> IO (Ptr C'GList)
p'g_list_insert_sorted :: FunPtr (Ptr C'GList -> C'gpointer -> C'GCompareFunc -> IO (Ptr C'GList))
c'g_list_delete_link :: Ptr C'GList -> Ptr C'GList -> IO (Ptr C'GList)
p'g_list_remove :: FunPtr (Ptr C'GList -> C'gconstpointer -> IO (Ptr C'GList))
c'g_list_remove_all :: Ptr C'GList -> C'gconstpointer -> IO (Ptr C'GList)
p'g_list_remove_link :: FunPtr (Ptr C'GList -> Ptr C'GList -> IO (Ptr C'GList))
c'g_list_free :: Ptr C'GList -> IO ()
p'g_list_delete_link :: FunPtr (Ptr C'GList -> Ptr C'GList -> IO (Ptr C'GList))
p'g_list_remove_all :: FunPtr (Ptr C'GList -> C'gconstpointer -> IO (Ptr C'GList))
c'g_list_alloc :: IO (Ptr C'GList)
p'g_list_free :: FunPtr (Ptr C'GList -> IO ())
c'g_list_free_1 :: Ptr C'GList -> IO ()
c'g_list_free1 :: Ptr C'GList -> IO ()
p'g_list_alloc :: FunPtr (IO (Ptr C'GList))
p'g_list_free_1 :: FunPtr (Ptr C'GList -> IO ())
c'g_list_length :: Ptr C'GList -> IO C'guint
c'g_list_copy :: Ptr C'GList -> IO (Ptr C'GList)
c'g_list_reverse :: Ptr C'GList -> IO (Ptr C'GList)
p'g_list_length :: FunPtr (Ptr C'GList -> IO C'guint)
p'g_list_copy :: FunPtr (Ptr C'GList -> IO (Ptr C'GList))
c'g_list_sort :: Ptr C'GList -> C'GCompareFunc -> IO (Ptr C'GList)
p'g_list_reverse :: FunPtr (Ptr C'GList -> IO (Ptr C'GList))
type C'GCompareFunc = FunPtr (C'gconstpointer -> C'gconstpointer -> IO C'gint)
p'g_list_sort :: FunPtr (Ptr C'GList -> C'GCompareFunc -> IO (Ptr C'GList))
mk'GCompareFunc :: (C'gconstpointer -> C'gconstpointer -> IO C'gint) -> IO C'GCompareFunc
c'g_list_insert_sorted_with_data :: Ptr C'GList -> C'gpointer -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GList)
c'g_list_sort_with_data :: Ptr C'GList -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GList)
mK'GCompareFunc :: C'GCompareFunc -> (C'gconstpointer -> C'gconstpointer -> IO C'gint)
p'g_list_insert_sorted_with_data :: FunPtr (Ptr C'GList -> C'gpointer -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GList))
type C'GCompareDataFunc = FunPtr (C'gconstpointer -> C'gconstpointer -> C'gpointer -> IO C'gint)
p'g_list_sort_with_data :: FunPtr (Ptr C'GList -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GList))
mk'GCompareDataFunc :: (C'gconstpointer -> C'gconstpointer -> C'gpointer -> IO C'gint) -> IO C'GCompareDataFunc
c'g_list_concat :: Ptr C'GList -> Ptr C'GList -> IO (Ptr C'GList)
c'g_list_foreach :: Ptr C'GList -> C'GFunc -> C'gpointer -> IO ()
mK'GCompareDataFunc :: C'GCompareDataFunc -> (C'gconstpointer -> C'gconstpointer -> C'gpointer -> IO C'gint)
p'g_list_concat :: FunPtr (Ptr C'GList -> Ptr C'GList -> IO (Ptr C'GList))
type C'GFunc = FunPtr (C'gpointer -> C'gpointer -> IO ())
p'g_list_foreach :: FunPtr (Ptr C'GList -> C'GFunc -> C'gpointer -> IO ())
mk'GFunc :: (C'gpointer -> C'gpointer -> IO ()) -> IO C'GFunc
c'g_list_first :: Ptr C'GList -> IO (Ptr C'GList)
c'g_list_last :: Ptr C'GList -> IO (Ptr C'GList)
mK'GFunc :: C'GFunc -> (C'gpointer -> C'gpointer -> IO ())
c'g_list_previous :: Ptr C'GList -> IO (Ptr C'GList)
p'g_list_first :: FunPtr (Ptr C'GList -> IO (Ptr C'GList))
c'g_list_next :: Ptr C'GList -> IO (Ptr C'GList)
p'g_list_last :: FunPtr (Ptr C'GList -> IO (Ptr C'GList))
c'g_list_nth :: Ptr C'GList -> C'guint -> IO (Ptr C'GList)
c'g_list_nth_data :: Ptr C'GList -> C'guint -> IO C'gpointer
c'g_list_nth_prev :: Ptr C'GList -> C'guint -> IO (Ptr C'GList)
p'g_list_nth :: FunPtr (Ptr C'GList -> C'guint -> IO (Ptr C'GList))
p'g_list_nth_data :: FunPtr (Ptr C'GList -> C'guint -> IO C'gpointer)
c'g_list_find :: Ptr C'GList -> C'gconstpointer -> IO (Ptr C'GList)
p'g_list_nth_prev :: FunPtr (Ptr C'GList -> C'guint -> IO (Ptr C'GList))
c'g_list_find_custom :: Ptr C'GList -> C'gconstpointer -> C'GCompareFunc -> IO (Ptr C'GList)
c'g_list_position :: Ptr C'GList -> Ptr C'GList -> IO C'gint
p'g_list_find :: FunPtr (Ptr C'GList -> C'gconstpointer -> IO (Ptr C'GList))
c'g_list_index :: Ptr C'GList -> C'gconstpointer -> IO C'gint
p'g_list_find_custom :: FunPtr (Ptr C'GList -> C'gconstpointer -> C'GCompareFunc -> IO (Ptr C'GList))
p'g_list_position :: FunPtr (Ptr C'GList -> Ptr C'GList -> IO C'gint)
p'g_list_index :: FunPtr (Ptr C'GList -> C'gconstpointer -> IO C'gint)
instance Eq C'GList
instance Show C'GList
instance Storable C'GList


-- | <a>http://library.gnome.org/devel/glib/stable/glib-Quarks.html</a>
module Bindings.GLib.DataTypes.Quarks
type C'GQuark = CUInt
c'g_quark_from_string :: Ptr C'gchar -> IO C'GQuark
c'g_quark_from_static_string :: Ptr C'gchar -> IO C'GQuark
c'g_quark_to_string :: C'GQuark -> IO (Ptr C'gchar)
p'g_quark_from_string :: FunPtr (Ptr C'gchar -> IO C'GQuark)
c'g_quark_try_string :: Ptr C'gchar -> IO C'GQuark
p'g_quark_from_static_string :: FunPtr (Ptr C'gchar -> IO C'GQuark)
c'g_intern_string :: Ptr C'gchar -> IO (Ptr C'gchar)
p'g_quark_to_string :: FunPtr (C'GQuark -> IO (Ptr C'gchar))
c'g_intern_static_string :: Ptr C'gchar -> IO (Ptr C'gchar)
p'g_quark_try_string :: FunPtr (Ptr C'gchar -> IO C'GQuark)
p'g_intern_string :: FunPtr (Ptr C'gchar -> IO (Ptr C'gchar))
p'g_intern_static_string :: FunPtr (Ptr C'gchar -> IO (Ptr C'gchar))


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Error-Reporting.html</a>
module Bindings.GLib.CoreApplicationSupport.ErrorReporting
data C'GError
C'GError :: C'GQuark -> C'gint -> Ptr C'gchar -> C'GError
c'GError'domain :: C'GError -> C'GQuark
c'GError'code :: C'GError -> C'gint
c'GError'message :: C'GError -> Ptr C'gchar
c'g_error_new_literal :: C'GQuark -> C'gint -> Ptr C'gchar -> IO (Ptr C'GError)
c'g_error_free :: Ptr C'GError -> IO ()
c'g_error_copy :: Ptr C'GError -> IO (Ptr C'GError)
p'g_error_new_literal :: FunPtr (C'GQuark -> C'gint -> Ptr C'gchar -> IO (Ptr C'GError))
p'g_error_free :: FunPtr (Ptr C'GError -> IO ())
c'g_error_matches :: Ptr C'GError -> C'GQuark -> C'gint -> IO C'gboolean
p'g_error_copy :: FunPtr (Ptr C'GError -> IO (Ptr C'GError))
c'g_set_error_literal :: Ptr (Ptr C'GError) -> C'GQuark -> C'gint -> Ptr C'gchar -> IO ()
c'g_propagate_error :: Ptr (Ptr C'GError) -> Ptr C'GError -> IO ()
p'g_error_matches :: FunPtr (Ptr C'GError -> C'GQuark -> C'gint -> IO C'gboolean)
c'g_clear_error :: Ptr (Ptr C'GError) -> IO ()
p'g_set_error_literal :: FunPtr (Ptr (Ptr C'GError) -> C'GQuark -> C'gint -> Ptr C'gchar -> IO ())
p'g_propagate_error :: FunPtr (Ptr (Ptr C'GError) -> Ptr C'GError -> IO ())
p'g_clear_error :: FunPtr (Ptr (Ptr C'GError) -> IO ())
instance Eq C'GError
instance Show C'GError
instance Storable C'GError


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Thread-Pools.html</a>
module Bindings.GLib.CoreApplicationSupport.ThreadPools
data C'GThreadPool
C'GThreadPool :: C'GFunc -> C'gpointer -> C'gboolean -> C'GThreadPool
c'GThreadPool'func :: C'GThreadPool -> C'GFunc
c'GThreadPool'user_data :: C'GThreadPool -> C'gpointer
c'GThreadPool'exclusive :: C'GThreadPool -> C'gboolean
c'g_thread_pool_new :: C'GFunc -> C'gpointer -> C'gint -> C'gboolean -> Ptr (Ptr C'GError) -> IO (Ptr C'GThreadPool)
c'g_thread_pool_push :: Ptr C'GThreadPool -> C'gpointer -> Ptr (Ptr C'GError) -> IO ()
c'g_thread_pool_set_max_threads :: Ptr C'GThreadPool -> C'gint -> Ptr (Ptr C'GError) -> IO ()
p'g_thread_pool_new :: FunPtr (C'GFunc -> C'gpointer -> C'gint -> C'gboolean -> Ptr (Ptr C'GError) -> IO (Ptr C'GThreadPool))
c'g_thread_pool_get_max_threads :: Ptr C'GThreadPool -> IO C'gint
p'g_thread_pool_push :: FunPtr (Ptr C'GThreadPool -> C'gpointer -> Ptr (Ptr C'GError) -> IO ())
c'g_thread_pool_get_num_threads :: Ptr C'GThreadPool -> IO C'guint
p'g_thread_pool_set_max_threads :: FunPtr (Ptr C'GThreadPool -> C'gint -> Ptr (Ptr C'GError) -> IO ())
c'g_thread_pool_unprocessed :: Ptr C'GThreadPool -> IO C'guint
p'g_thread_pool_get_max_threads :: FunPtr (Ptr C'GThreadPool -> IO C'gint)
p'g_thread_pool_get_num_threads :: FunPtr (Ptr C'GThreadPool -> IO C'guint)
c'g_thread_pool_free :: Ptr C'GThreadPool -> C'gboolean -> C'gboolean -> IO ()
c'g_thread_pool_set_max_unused_threads :: C'gint -> IO ()
p'g_thread_pool_unprocessed :: FunPtr (Ptr C'GThreadPool -> IO C'guint)
c'g_thread_pool_get_max_unused_threads :: IO C'gint
p'g_thread_pool_free :: FunPtr (Ptr C'GThreadPool -> C'gboolean -> C'gboolean -> IO ())
c'g_thread_pool_get_num_unused_threads :: IO C'guint
p'g_thread_pool_set_max_unused_threads :: FunPtr (C'gint -> IO ())
c'g_thread_pool_stop_unused_threads :: IO ()
p'g_thread_pool_get_max_unused_threads :: FunPtr (IO C'gint)
p'g_thread_pool_get_num_unused_threads :: FunPtr (IO C'guint)
c'g_thread_pool_set_sort_function :: Ptr C'GThreadPool -> C'GCompareDataFunc -> C'gpointer -> IO ()
p'g_thread_pool_stop_unused_threads :: FunPtr (IO ())
c'g_thread_pool_set_max_idle_time :: C'guint -> IO ()
c'g_thread_pool_get_max_idle_time :: IO C'guint
p'g_thread_pool_set_sort_function :: FunPtr (Ptr C'GThreadPool -> C'GCompareDataFunc -> C'gpointer -> IO ())
p'g_thread_pool_set_max_idle_time :: FunPtr (C'guint -> IO ())
p'g_thread_pool_get_max_idle_time :: FunPtr (IO C'guint)
instance Eq C'GThreadPool
instance Show C'GThreadPool
instance Storable C'GThreadPool


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Unicode-Manipulation.html</a>
module Bindings.GLib.Utilities.UnicodeManipulation
type C'gunichar = CUInt
type C'gunichar2 = Word16
c'g_unichar_validate :: C'gunichar -> IO C'gboolean
c'g_unichar_isalnum :: C'gunichar -> IO C'gboolean
c'g_unichar_isalpha :: C'gunichar -> IO C'gboolean
p'g_unichar_validate :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_iscntrl :: C'gunichar -> IO C'gboolean
p'g_unichar_isalnum :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_isdefined :: C'gunichar -> IO C'gboolean
p'g_unichar_isalpha :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_isdigit :: C'gunichar -> IO C'gboolean
p'g_unichar_iscntrl :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_isgraph :: C'gunichar -> IO C'gboolean
p'g_unichar_isdefined :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_islower :: C'gunichar -> IO C'gboolean
p'g_unichar_isdigit :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_ismark :: C'gunichar -> IO C'gboolean
p'g_unichar_isgraph :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_isprint :: C'gunichar -> IO C'gboolean
p'g_unichar_islower :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_ispunct :: C'gunichar -> IO C'gboolean
p'g_unichar_ismark :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_isspace :: C'gunichar -> IO C'gboolean
p'g_unichar_isprint :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_istitle :: C'gunichar -> IO C'gboolean
p'g_unichar_ispunct :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_isupper :: C'gunichar -> IO C'gboolean
p'g_unichar_isspace :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_isxdigit :: C'gunichar -> IO C'gboolean
p'g_unichar_istitle :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_iswide :: C'gunichar -> IO C'gboolean
p'g_unichar_isupper :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_iswide_cjk :: C'gunichar -> IO C'gboolean
p'g_unichar_isxdigit :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_iszerowidth :: C'gunichar -> IO C'gboolean
p'g_unichar_iswide :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_toupper :: C'gunichar -> IO C'gunichar
p'g_unichar_iswide_cjk :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_tolower :: C'gunichar -> IO C'gunichar
p'g_unichar_iszerowidth :: FunPtr (C'gunichar -> IO C'gboolean)
c'g_unichar_totitle :: C'gunichar -> IO C'gunichar
p'g_unichar_toupper :: FunPtr (C'gunichar -> IO C'gunichar)
c'g_unichar_digit_value :: C'gunichar -> IO C'gint
p'g_unichar_tolower :: FunPtr (C'gunichar -> IO C'gunichar)
c'g_unichar_xdigit_value :: C'gunichar -> IO C'gint
p'g_unichar_totitle :: FunPtr (C'gunichar -> IO C'gunichar)
p'g_unichar_digit_value :: FunPtr (C'gunichar -> IO C'gint)
type C'GUnicodeType = CUInt
p'g_unichar_xdigit_value :: FunPtr (C'gunichar -> IO C'gint)
c'G_UNICODE_FORMAT :: Num a => a
c'G_UNICODE_UNASSIGNED :: Num a => a
c'G_UNICODE_PRIVATE_USE :: Num a => a
c'G_UNICODE_SURROGATE :: Num a => a
c'G_UNICODE_LOWERCASE_LETTER :: Num a => a
c'G_UNICODE_MODIFIER_LETTER :: Num a => a
c'G_UNICODE_OTHER_LETTER :: Num a => a
c'G_UNICODE_TITLECASE_LETTER :: Num a => a
c'G_UNICODE_UPPERCASE_LETTER :: Num a => a
c'G_UNICODE_COMBINING_MARK :: Num a => a
c'G_UNICODE_ENCLOSING_MARK :: Num a => a
c'G_UNICODE_NON_SPACING_MARK :: Num a => a
c'G_UNICODE_DECIMAL_NUMBER :: Num a => a
c'G_UNICODE_LETTER_NUMBER :: Num a => a
c'G_UNICODE_OTHER_NUMBER :: Num a => a
c'G_UNICODE_CONNECT_PUNCTUATION :: Num a => a
c'G_UNICODE_DASH_PUNCTUATION :: Num a => a
c'G_UNICODE_CLOSE_PUNCTUATION :: Num a => a
c'G_UNICODE_FINAL_PUNCTUATION :: Num a => a
c'G_UNICODE_INITIAL_PUNCTUATION :: Num a => a
c'G_UNICODE_OTHER_PUNCTUATION :: Num a => a
c'G_UNICODE_OPEN_PUNCTUATION :: Num a => a
c'G_UNICODE_CURRENCY_SYMBOL :: Num a => a
c'G_UNICODE_MODIFIER_SYMBOL :: Num a => a
c'G_UNICODE_MATH_SYMBOL :: Num a => a
c'G_UNICODE_OTHER_SYMBOL :: Num a => a
c'G_UNICODE_LINE_SEPARATOR :: Num a => a
c'G_UNICODE_PARAGRAPH_SEPARATOR :: Num a => a
c'G_UNICODE_SPACE_SEPARATOR :: Num a => a
c'g_unichar_type :: C'gunichar -> IO C'GUnicodeType
type C'GUnicodeBreakType = CUInt
p'g_unichar_type :: FunPtr (C'gunichar -> IO C'GUnicodeType)
c'G_UNICODE_BREAK_MANDATORY :: Num a => a
c'G_UNICODE_BREAK_CARRIAGE_RETURN :: Num a => a
c'G_UNICODE_BREAK_LINE_FEED :: Num a => a
c'G_UNICODE_BREAK_COMBINING_MARK :: Num a => a
c'G_UNICODE_BREAK_SURROGATE :: Num a => a
c'G_UNICODE_BREAK_ZERO_WIDTH_SPACE :: Num a => a
c'G_UNICODE_BREAK_INSEPARABLE :: Num a => a
c'G_UNICODE_BREAK_NON_BREAKING_GLUE :: Num a => a
c'G_UNICODE_BREAK_CONTINGENT :: Num a => a
c'G_UNICODE_BREAK_SPACE :: Num a => a
c'G_UNICODE_BREAK_AFTER :: Num a => a
c'G_UNICODE_BREAK_BEFORE :: Num a => a
c'G_UNICODE_BREAK_BEFORE_AND_AFTER :: Num a => a
c'G_UNICODE_BREAK_HYPHEN :: Num a => a
c'G_UNICODE_BREAK_NON_STARTER :: Num a => a
c'G_UNICODE_BREAK_OPEN_PUNCTUATION :: Num a => a
c'G_UNICODE_BREAK_CLOSE_PUNCTUATION :: Num a => a
c'G_UNICODE_BREAK_QUOTATION :: Num a => a
c'G_UNICODE_BREAK_EXCLAMATION :: Num a => a
c'G_UNICODE_BREAK_IDEOGRAPHIC :: Num a => a
c'G_UNICODE_BREAK_NUMERIC :: Num a => a
c'G_UNICODE_BREAK_INFIX_SEPARATOR :: Num a => a
c'G_UNICODE_BREAK_SYMBOL :: Num a => a
c'G_UNICODE_BREAK_ALPHABETIC :: Num a => a
c'G_UNICODE_BREAK_PREFIX :: Num a => a
c'G_UNICODE_BREAK_POSTFIX :: Num a => a
c'G_UNICODE_BREAK_COMPLEX_CONTEXT :: Num a => a
c'G_UNICODE_BREAK_AMBIGUOUS :: Num a => a
c'G_UNICODE_BREAK_UNKNOWN :: Num a => a
c'G_UNICODE_BREAK_NEXT_LINE :: Num a => a
c'G_UNICODE_BREAK_WORD_JOINER :: Num a => a
c'G_UNICODE_BREAK_HANGUL_L_JAMO :: Num a => a
c'G_UNICODE_BREAK_HANGUL_V_JAMO :: Num a => a
c'G_UNICODE_BREAK_HANGUL_T_JAMO :: Num a => a
c'G_UNICODE_BREAK_HANGUL_LV_SYLLABLE :: Num a => a
c'G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE :: Num a => a
c'g_unichar_break_type :: C'gunichar -> IO C'GUnicodeBreakType
c'g_unichar_combining_class :: C'gunichar -> IO C'gint
c'g_unicode_canonical_ordering :: Ptr C'gunichar -> C'gsize -> IO ()
p'g_unichar_break_type :: FunPtr (C'gunichar -> IO C'GUnicodeBreakType)
p'g_unichar_combining_class :: FunPtr (C'gunichar -> IO C'gint)
c'g_unicode_canonical_decomposition :: C'gunichar -> Ptr C'gsize -> IO (Ptr C'gunichar)
p'g_unicode_canonical_ordering :: FunPtr (Ptr C'gunichar -> C'gsize -> IO ())
c'g_unichar_get_mirror_char :: C'gunichar -> Ptr C'gunichar -> IO C'gboolean
p'g_unicode_canonical_decomposition :: FunPtr (C'gunichar -> Ptr C'gsize -> IO (Ptr C'gunichar))
type C'GUnicodeScript = CInt
p'g_unichar_get_mirror_char :: FunPtr (C'gunichar -> Ptr C'gunichar -> IO C'gboolean)
c'G_UNICODE_SCRIPT_INVALID_CODE :: Num a => a
c'G_UNICODE_SCRIPT_COMMON :: Num a => a
c'G_UNICODE_SCRIPT_INHERITED :: Num a => a
c'G_UNICODE_SCRIPT_ARABIC :: Num a => a
c'G_UNICODE_SCRIPT_ARMENIAN :: Num a => a
c'G_UNICODE_SCRIPT_BENGALI :: Num a => a
c'G_UNICODE_SCRIPT_BOPOMOFO :: Num a => a
c'G_UNICODE_SCRIPT_CHEROKEE :: Num a => a
c'G_UNICODE_SCRIPT_COPTIC :: Num a => a
c'G_UNICODE_SCRIPT_CYRILLIC :: Num a => a
c'G_UNICODE_SCRIPT_DESERET :: Num a => a
c'G_UNICODE_SCRIPT_DEVANAGARI :: Num a => a
c'G_UNICODE_SCRIPT_ETHIOPIC :: Num a => a
c'G_UNICODE_SCRIPT_GEORGIAN :: Num a => a
c'G_UNICODE_SCRIPT_GOTHIC :: Num a => a
c'G_UNICODE_SCRIPT_GREEK :: Num a => a
c'G_UNICODE_SCRIPT_GUJARATI :: Num a => a
c'G_UNICODE_SCRIPT_GURMUKHI :: Num a => a
c'G_UNICODE_SCRIPT_HAN :: Num a => a
c'G_UNICODE_SCRIPT_HANGUL :: Num a => a
c'G_UNICODE_SCRIPT_HEBREW :: Num a => a
c'G_UNICODE_SCRIPT_HIRAGANA :: Num a => a
c'G_UNICODE_SCRIPT_KANNADA :: Num a => a
c'G_UNICODE_SCRIPT_KATAKANA :: Num a => a
c'G_UNICODE_SCRIPT_KHMER :: Num a => a
c'G_UNICODE_SCRIPT_LAO :: Num a => a
c'G_UNICODE_SCRIPT_LATIN :: Num a => a
c'G_UNICODE_SCRIPT_MALAYALAM :: Num a => a
c'G_UNICODE_SCRIPT_MONGOLIAN :: Num a => a
c'G_UNICODE_SCRIPT_MYANMAR :: Num a => a
c'G_UNICODE_SCRIPT_OGHAM :: Num a => a
c'G_UNICODE_SCRIPT_OLD_ITALIC :: Num a => a
c'G_UNICODE_SCRIPT_ORIYA :: Num a => a
c'G_UNICODE_SCRIPT_RUNIC :: Num a => a
c'G_UNICODE_SCRIPT_SINHALA :: Num a => a
c'G_UNICODE_SCRIPT_SYRIAC :: Num a => a
c'G_UNICODE_SCRIPT_TAMIL :: Num a => a
c'G_UNICODE_SCRIPT_TELUGU :: Num a => a
c'G_UNICODE_SCRIPT_THAANA :: Num a => a
c'G_UNICODE_SCRIPT_THAI :: Num a => a
c'G_UNICODE_SCRIPT_TIBETAN :: Num a => a
c'G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL :: Num a => a
c'G_UNICODE_SCRIPT_YI :: Num a => a
c'G_UNICODE_SCRIPT_TAGALOG :: Num a => a
c'G_UNICODE_SCRIPT_HANUNOO :: Num a => a
c'G_UNICODE_SCRIPT_BUHID :: Num a => a
c'G_UNICODE_SCRIPT_TAGBANWA :: Num a => a
c'G_UNICODE_SCRIPT_BRAILLE :: Num a => a
c'G_UNICODE_SCRIPT_CYPRIOT :: Num a => a
c'G_UNICODE_SCRIPT_LIMBU :: Num a => a
c'G_UNICODE_SCRIPT_OSMANYA :: Num a => a
c'G_UNICODE_SCRIPT_SHAVIAN :: Num a => a
c'G_UNICODE_SCRIPT_LINEAR_B :: Num a => a
c'G_UNICODE_SCRIPT_TAI_LE :: Num a => a
c'G_UNICODE_SCRIPT_UGARITIC :: Num a => a
c'G_UNICODE_SCRIPT_NEW_TAI_LUE :: Num a => a
c'G_UNICODE_SCRIPT_BUGINESE :: Num a => a
c'G_UNICODE_SCRIPT_GLAGOLITIC :: Num a => a
c'G_UNICODE_SCRIPT_TIFINAGH :: Num a => a
c'G_UNICODE_SCRIPT_SYLOTI_NAGRI :: Num a => a
c'G_UNICODE_SCRIPT_OLD_PERSIAN :: Num a => a
c'G_UNICODE_SCRIPT_KHAROSHTHI :: Num a => a
c'G_UNICODE_SCRIPT_UNKNOWN :: Num a => a
c'G_UNICODE_SCRIPT_BALINESE :: Num a => a
c'G_UNICODE_SCRIPT_CUNEIFORM :: Num a => a
c'G_UNICODE_SCRIPT_PHOENICIAN :: Num a => a
c'G_UNICODE_SCRIPT_PHAGS_PA :: Num a => a
c'G_UNICODE_SCRIPT_NKO :: Num a => a
c'G_UNICODE_SCRIPT_KAYAH_LI :: Num a => a
c'G_UNICODE_SCRIPT_LEPCHA :: Num a => a
c'G_UNICODE_SCRIPT_REJANG :: Num a => a
c'G_UNICODE_SCRIPT_SUNDANESE :: Num a => a
c'G_UNICODE_SCRIPT_SAURASHTRA :: Num a => a
c'G_UNICODE_SCRIPT_CHAM :: Num a => a
c'G_UNICODE_SCRIPT_OL_CHIKI :: Num a => a
c'G_UNICODE_SCRIPT_VAI :: Num a => a
c'G_UNICODE_SCRIPT_CARIAN :: Num a => a
c'G_UNICODE_SCRIPT_LYCIAN :: Num a => a
c'G_UNICODE_SCRIPT_LYDIAN :: Num a => a
c'g_unichar_get_script :: C'gunichar -> IO C'GUnicodeScript
c'g_utf8_next_char :: Ptr C'gchar -> IO (Ptr C'gchar)
p'g_unichar_get_script :: FunPtr (C'gunichar -> IO C'GUnicodeScript)
c'g_utf8_get_char :: Ptr C'gchar -> IO C'gunichar
c'g_utf8_get_char_validated :: Ptr C'gchar -> C'gssize -> IO C'gunichar
p'g_utf8_get_char :: FunPtr (Ptr C'gchar -> IO C'gunichar)
c'g_utf8_offset_to_pointer :: Ptr C'gchar -> C'glong -> IO (Ptr C'gchar)
c'g_utf8_pointer_to_offset :: Ptr C'gchar -> Ptr C'gchar -> IO C'glong
p'g_utf8_get_char_validated :: FunPtr (Ptr C'gchar -> C'gssize -> IO C'gunichar)
c'g_utf8_prev_char :: Ptr C'gchar -> IO (Ptr C'gchar)
p'g_utf8_offset_to_pointer :: FunPtr (Ptr C'gchar -> C'glong -> IO (Ptr C'gchar))
c'g_utf8_find_next_char :: Ptr C'gchar -> Ptr C'gchar -> IO (Ptr C'gchar)
p'g_utf8_pointer_to_offset :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> IO C'glong)
p'g_utf8_prev_char :: FunPtr (Ptr C'gchar -> IO (Ptr C'gchar))
c'g_utf8_find_prev_char :: Ptr C'gchar -> Ptr C'gchar -> IO (Ptr C'gchar)
c'g_utf8_strlen :: Ptr C'gchar -> C'gssize -> IO C'glong
p'g_utf8_find_next_char :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> IO (Ptr C'gchar))
p'g_utf8_find_prev_char :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> IO (Ptr C'gchar))
c'g_utf8_strncpy :: Ptr C'gchar -> Ptr C'gchar -> C'gsize -> IO (Ptr C'gchar)
p'g_utf8_strlen :: FunPtr (Ptr C'gchar -> C'gssize -> IO C'glong)
c'g_utf8_strchr :: Ptr C'gchar -> C'gssize -> C'gunichar -> IO (Ptr C'gchar)
c'g_utf8_strrchr :: Ptr C'gchar -> C'gssize -> C'gunichar -> IO (Ptr C'gchar)
p'g_utf8_strncpy :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> C'gsize -> IO (Ptr C'gchar))
c'g_utf8_strreverse :: Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar)
p'g_utf8_strchr :: FunPtr (Ptr C'gchar -> C'gssize -> C'gunichar -> IO (Ptr C'gchar))
c'g_utf8_validate :: Ptr C'gchar -> C'gssize -> Ptr (Ptr C'gchar) -> IO C'gboolean
p'g_utf8_strrchr :: FunPtr (Ptr C'gchar -> C'gssize -> C'gunichar -> IO (Ptr C'gchar))
c'g_utf8_strup :: Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar)
p'g_utf8_strreverse :: FunPtr (Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar))
c'g_utf8_strdown :: Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar)
p'g_utf8_validate :: FunPtr (Ptr C'gchar -> C'gssize -> Ptr (Ptr C'gchar) -> IO C'gboolean)
c'g_utf8_casefold :: Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar)
p'g_utf8_strup :: FunPtr (Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar))
p'g_utf8_strdown :: FunPtr (Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar))
c'g_utf8_normalize :: Ptr C'gchar -> C'gssize -> C'GNormalizeMode -> IO (Ptr C'gchar)
p'g_utf8_casefold :: FunPtr (Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar))
type C'GNormalizeMode = CUInt
p'g_utf8_normalize :: FunPtr (Ptr C'gchar -> C'gssize -> C'GNormalizeMode -> IO (Ptr C'gchar))
c'G_NORMALIZE_DEFAULT :: Num a => a
c'G_NORMALIZE_NFD :: Num a => a
c'G_NORMALIZE_DEFAULT_COMPOSE :: Num a => a
c'G_NORMALIZE_NFC :: Num a => a
c'G_NORMALIZE_ALL :: Num a => a
c'G_NORMALIZE_NFKD :: Num a => a
c'G_NORMALIZE_ALL_COMPOSE :: Num a => a
c'G_NORMALIZE_NFKC :: Num a => a
c'g_utf8_collate :: Ptr C'gchar -> Ptr C'gchar -> IO C'gint
c'g_utf8_collate_key :: Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar)
c'g_utf8_collate_key_for_filename :: Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar)
p'g_utf8_collate :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> IO C'gint)
p'g_utf8_collate_key :: FunPtr (Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar))
p'g_utf8_collate_key_for_filename :: FunPtr (Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar))
c'g_utf8_to_utf16 :: Ptr C'gchar -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gunichar2)
c'g_utf8_to_ucs4 :: Ptr C'gchar -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gunichar)
p'g_utf8_to_utf16 :: FunPtr (Ptr C'gchar -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gunichar2))
c'g_utf8_to_ucs4_fast :: Ptr C'gchar -> C'glong -> Ptr C'glong -> IO (Ptr C'gunichar)
p'g_utf8_to_ucs4 :: FunPtr (Ptr C'gchar -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gunichar))
p'g_utf8_to_ucs4_fast :: FunPtr (Ptr C'gchar -> C'glong -> Ptr C'glong -> IO (Ptr C'gunichar))
c'g_utf16_to_ucs4 :: Ptr C'gunichar2 -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gunichar)
c'g_utf16_to_utf8 :: Ptr C'gunichar2 -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gchar)
p'g_utf16_to_ucs4 :: FunPtr (Ptr C'gunichar2 -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gunichar))
c'g_ucs4_to_utf16 :: Ptr C'gunichar -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gunichar2)
p'g_utf16_to_utf8 :: FunPtr (Ptr C'gunichar2 -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gchar))
c'g_ucs4_to_utf8 :: Ptr C'gunichar -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gchar)
p'g_ucs4_to_utf16 :: FunPtr (Ptr C'gunichar -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gunichar2))
c'g_unichar_to_utf8 :: C'gunichar -> Ptr C'gchar -> IO C'gint
p'g_ucs4_to_utf8 :: FunPtr (Ptr C'gunichar -> C'glong -> Ptr C'glong -> Ptr C'glong -> Ptr (Ptr C'GError) -> IO (Ptr C'gchar))
p'g_unichar_to_utf8 :: FunPtr (C'gunichar -> Ptr C'gchar -> IO C'gint)


-- | <a>http://library.gnome.org/devel/glib/stable/glib-Strings.html</a>
module Bindings.GLib.DataTypes.Strings
data C'GString
C'GString :: Ptr C'gchar -> C'gsize -> C'gsize -> C'GString
c'GString'str :: C'GString -> Ptr C'gchar
c'GString'len :: C'GString -> C'gsize
c'GString'allocated_len :: C'GString -> C'gsize
c'g_string_new :: Ptr C'gchar -> IO (Ptr C'GString)
c'g_string_new_len :: Ptr C'gchar -> C'gssize -> IO (Ptr C'GString)
c'g_string_sized_new :: C'gsize -> IO (Ptr C'GString)
p'g_string_new :: FunPtr (Ptr C'gchar -> IO (Ptr C'GString))
c'g_string_assign :: Ptr C'GString -> Ptr C'gchar -> IO (Ptr C'GString)
p'g_string_new_len :: FunPtr (Ptr C'gchar -> C'gssize -> IO (Ptr C'GString))
p'g_string_sized_new :: FunPtr (C'gsize -> IO (Ptr C'GString))
c'g_string_append :: Ptr C'GString -> Ptr C'gchar -> IO (Ptr C'GString)
c'g_string_append_c :: Ptr C'GString -> C'gchar -> IO (Ptr C'GString)
p'g_string_assign :: FunPtr (Ptr C'GString -> Ptr C'gchar -> IO (Ptr C'GString))
c'g_string_append_unichar :: Ptr C'GString -> C'gunichar -> IO (Ptr C'GString)
p'g_string_append :: FunPtr (Ptr C'GString -> Ptr C'gchar -> IO (Ptr C'GString))
p'g_string_append_c :: FunPtr (Ptr C'GString -> C'gchar -> IO (Ptr C'GString))
p'g_string_append_unichar :: FunPtr (Ptr C'GString -> C'gunichar -> IO (Ptr C'GString))
c'g_string_append_len :: Ptr C'GString -> Ptr C'gchar -> C'gssize -> IO (Ptr C'GString)
c'g_string_append_uri_escaped :: Ptr C'GString -> CString -> CString -> C'gboolean -> IO (Ptr C'GString)
p'g_string_append_len :: FunPtr (Ptr C'GString -> Ptr C'gchar -> C'gssize -> IO (Ptr C'GString))
c'g_string_prepend :: Ptr C'GString -> Ptr C'gchar -> IO (Ptr C'GString)
p'g_string_append_uri_escaped :: FunPtr (Ptr C'GString -> CString -> CString -> C'gboolean -> IO (Ptr C'GString))
c'g_string_prepend_c :: Ptr C'GString -> C'gchar -> IO (Ptr C'GString)
c'g_string_prepend_unichar :: Ptr C'GString -> C'gunichar -> IO (Ptr C'GString)
p'g_string_prepend :: FunPtr (Ptr C'GString -> Ptr C'gchar -> IO (Ptr C'GString))
p'g_string_prepend_c :: FunPtr (Ptr C'GString -> C'gchar -> IO (Ptr C'GString))
p'g_string_prepend_unichar :: FunPtr (Ptr C'GString -> C'gunichar -> IO (Ptr C'GString))
c'g_string_prepend_len :: Ptr C'GString -> Ptr C'gchar -> C'gssize -> IO (Ptr C'GString)
c'g_string_insert :: Ptr C'GString -> C'gssize -> Ptr C'gchar -> IO (Ptr C'GString)
p'g_string_prepend_len :: FunPtr (Ptr C'GString -> Ptr C'gchar -> C'gssize -> IO (Ptr C'GString))
c'g_string_insert_c :: Ptr C'GString -> C'gssize -> C'gchar -> IO (Ptr C'GString)
p'g_string_insert :: FunPtr (Ptr C'GString -> C'gssize -> Ptr C'gchar -> IO (Ptr C'GString))
c'g_string_insert_unichar :: Ptr C'GString -> C'gssize -> C'gunichar -> IO (Ptr C'GString)
p'g_string_insert_c :: FunPtr (Ptr C'GString -> C'gssize -> C'gchar -> IO (Ptr C'GString))
p'g_string_insert_unichar :: FunPtr (Ptr C'GString -> C'gssize -> C'gunichar -> IO (Ptr C'GString))
c'g_string_insert_len :: Ptr C'GString -> C'gssize -> Ptr C'gchar -> C'gssize -> IO (Ptr C'GString)
c'g_string_overwrite :: Ptr C'GString -> C'gsize -> Ptr C'gchar -> IO (Ptr C'GString)
p'g_string_insert_len :: FunPtr (Ptr C'GString -> C'gssize -> Ptr C'gchar -> C'gssize -> IO (Ptr C'GString))
p'g_string_overwrite :: FunPtr (Ptr C'GString -> C'gsize -> Ptr C'gchar -> IO (Ptr C'GString))
c'g_string_overwrite_len :: Ptr C'GString -> C'gsize -> Ptr C'gchar -> C'gssize -> IO (Ptr C'GString)
c'g_string_erase :: Ptr C'GString -> C'gssize -> C'gssize -> IO (Ptr C'GString)
p'g_string_overwrite_len :: FunPtr (Ptr C'GString -> C'gsize -> Ptr C'gchar -> C'gssize -> IO (Ptr C'GString))
c'g_string_truncate :: Ptr C'GString -> C'gsize -> IO (Ptr C'GString)
p'g_string_erase :: FunPtr (Ptr C'GString -> C'gssize -> C'gssize -> IO (Ptr C'GString))
c'g_string_set_size :: Ptr C'GString -> C'gsize -> IO (Ptr C'GString)
c'g_string_free :: Ptr C'GString -> C'gboolean -> IO (Ptr C'gchar)
p'g_string_truncate :: FunPtr (Ptr C'GString -> C'gsize -> IO (Ptr C'GString))
c'g_string_hash :: Ptr C'GString -> IO C'guint
p'g_string_set_size :: FunPtr (Ptr C'GString -> C'gsize -> IO (Ptr C'GString))
c'g_string_equal :: Ptr C'GString -> Ptr C'GString -> IO C'gboolean
p'g_string_free :: FunPtr (Ptr C'GString -> C'gboolean -> IO (Ptr C'gchar))
p'g_string_hash :: FunPtr (Ptr C'GString -> IO C'guint)
p'g_string_equal :: FunPtr (Ptr C'GString -> Ptr C'GString -> IO C'gboolean)
instance Eq C'GString
instance Show C'GString
instance Storable C'GString


-- | <a>http://library.gnome.org/devel/glib/stable/glib-Datasets.html</a>
module Bindings.GLib.DataTypes.Datasets
c'g_dataset_id_set_data :: C'gconstpointer -> C'GQuark -> C'gpointer -> IO ()
c'g_dataset_id_set_data_full :: C'gconstpointer -> C'GQuark -> C'gpointer -> C'GDestroyNotify -> IO ()
type C'GDestroyNotify = FunPtr (C'gpointer -> IO ())
p'g_dataset_id_set_data_full :: FunPtr (C'gconstpointer -> C'GQuark -> C'gpointer -> C'GDestroyNotify -> IO ())
mk'GDestroyNotify :: (C'gpointer -> IO ()) -> IO C'GDestroyNotify
c'g_dataset_id_get_data :: C'gconstpointer -> C'GQuark -> IO C'gpointer
c'g_dataset_id_remove_data :: C'gconstpointer -> C'GQuark -> IO ()
mK'GDestroyNotify :: C'GDestroyNotify -> (C'gpointer -> IO ())
c'g_dataset_id_remove_no_notify :: C'gconstpointer -> C'GQuark -> IO C'gpointer
p'g_dataset_id_get_data :: FunPtr (C'gconstpointer -> C'GQuark -> IO C'gpointer)
c'g_dataset_set_data :: C'gconstpointer -> Ptr C'gchar -> C'gpointer -> IO ()
p'g_dataset_id_remove_no_notify :: FunPtr (C'gconstpointer -> C'GQuark -> IO C'gpointer)
c'g_dataset_set_data_full :: C'gconstpointer -> Ptr C'gchar -> C'gpointer -> C'GDestroyNotify -> IO ()
c'g_dataset_get_data :: C'gconstpointer -> Ptr C'gchar -> IO C'gpointer
c'g_dataset_remove_data :: C'gconstpointer -> Ptr C'gchar -> IO C'gpointer
c'g_dataset_remove_no_notify :: C'gconstpointer -> Ptr C'gchar -> IO C'gpointer
c'g_dataset_foreach :: C'gconstpointer -> C'GDataForeachFunc -> C'gpointer -> IO ()
type C'GDataForeachFunc = FunPtr (C'GQuark -> C'gpointer -> C'gpointer -> IO ())
p'g_dataset_foreach :: FunPtr (C'gconstpointer -> C'GDataForeachFunc -> C'gpointer -> IO ())
mk'GDataForeachFunc :: (C'GQuark -> C'gpointer -> C'gpointer -> IO ()) -> IO C'GDataForeachFunc
c'g_dataset_destroy :: C'gconstpointer -> IO ()
mK'GDataForeachFunc :: C'GDataForeachFunc -> (C'GQuark -> C'gpointer -> C'gpointer -> IO ())
p'g_dataset_destroy :: FunPtr (C'gconstpointer -> IO ())


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Asynchronous-Queues.html</a>
module Bindings.GLib.CoreApplicationSupport.AsynchronousQueues
data C'GAsyncQueue
C'GAsyncQueue :: C'GAsyncQueue
c'g_async_queue_new :: IO (Ptr C'GAsyncQueue)
c'g_async_queue_new_full :: C'GDestroyNotify -> IO (Ptr C'GAsyncQueue)
p'g_async_queue_new :: FunPtr (IO (Ptr C'GAsyncQueue))
c'g_async_queue_ref :: Ptr C'GAsyncQueue -> IO (Ptr C'GAsyncQueue)
c'g_async_queue_unref :: Ptr C'GAsyncQueue -> IO ()
p'g_async_queue_new_full :: FunPtr (C'GDestroyNotify -> IO (Ptr C'GAsyncQueue))
c'g_async_queue_push :: Ptr C'GAsyncQueue -> C'gpointer -> IO ()
p'g_async_queue_ref :: FunPtr (Ptr C'GAsyncQueue -> IO (Ptr C'GAsyncQueue))
p'g_async_queue_unref :: FunPtr (Ptr C'GAsyncQueue -> IO ())
c'g_async_queue_push_sorted :: Ptr C'GAsyncQueue -> C'gpointer -> C'GCompareDataFunc -> C'gpointer -> IO ()
c'g_async_queue_pop :: Ptr C'GAsyncQueue -> IO C'gpointer
p'g_async_queue_push :: FunPtr (Ptr C'GAsyncQueue -> C'gpointer -> IO ())
c'g_async_queue_try_pop :: Ptr C'GAsyncQueue -> IO C'gpointer
p'g_async_queue_push_sorted :: FunPtr (Ptr C'GAsyncQueue -> C'gpointer -> C'GCompareDataFunc -> C'gpointer -> IO ())
p'g_async_queue_pop :: FunPtr (Ptr C'GAsyncQueue -> IO C'gpointer)
c'g_async_queue_timed_pop :: Ptr C'GAsyncQueue -> Ptr C'GTimeVal -> IO C'gpointer
c'g_async_queue_length :: Ptr C'GAsyncQueue -> IO C'gint
p'g_async_queue_try_pop :: FunPtr (Ptr C'GAsyncQueue -> IO C'gpointer)
p'g_async_queue_timed_pop :: FunPtr (Ptr C'GAsyncQueue -> Ptr C'GTimeVal -> IO C'gpointer)
c'g_async_queue_sort :: Ptr C'GAsyncQueue -> C'GCompareDataFunc -> C'gpointer -> IO ()
p'g_async_queue_length :: FunPtr (Ptr C'GAsyncQueue -> IO C'gint)
c'g_async_queue_lock :: Ptr C'GAsyncQueue -> IO ()
p'g_async_queue_sort :: FunPtr (Ptr C'GAsyncQueue -> C'GCompareDataFunc -> C'gpointer -> IO ())
c'g_async_queue_unlock :: Ptr C'GAsyncQueue -> IO ()
p'g_async_queue_lock :: FunPtr (Ptr C'GAsyncQueue -> IO ())
c'g_async_queue_push_unlocked :: Ptr C'GAsyncQueue -> C'gpointer -> IO ()
p'g_async_queue_unlock :: FunPtr (Ptr C'GAsyncQueue -> IO ())
c'g_async_queue_push_sorted_unlocked :: Ptr C'GAsyncQueue -> C'gpointer -> C'GCompareDataFunc -> C'gpointer -> IO ()
c'g_async_queue_pop_unlocked :: Ptr C'GAsyncQueue -> IO C'gpointer
p'g_async_queue_push_unlocked :: FunPtr (Ptr C'GAsyncQueue -> C'gpointer -> IO ())
c'g_async_queue_try_pop_unlocked :: Ptr C'GAsyncQueue -> IO C'gpointer
p'g_async_queue_push_sorted_unlocked :: FunPtr (Ptr C'GAsyncQueue -> C'gpointer -> C'GCompareDataFunc -> C'gpointer -> IO ())
p'g_async_queue_pop_unlocked :: FunPtr (Ptr C'GAsyncQueue -> IO C'gpointer)
c'g_async_queue_timed_pop_unlocked :: Ptr C'GAsyncQueue -> Ptr C'GTimeVal -> IO C'gpointer
c'g_async_queue_length_unlocked :: Ptr C'GAsyncQueue -> IO C'gint
p'g_async_queue_try_pop_unlocked :: FunPtr (Ptr C'GAsyncQueue -> IO C'gpointer)
p'g_async_queue_timed_pop_unlocked :: FunPtr (Ptr C'GAsyncQueue -> Ptr C'GTimeVal -> IO C'gpointer)
c'g_async_queue_sort_unlocked :: Ptr C'GAsyncQueue -> C'GCompareDataFunc -> C'gpointer -> IO ()
p'g_async_queue_length_unlocked :: FunPtr (Ptr C'GAsyncQueue -> IO C'gint)
p'g_async_queue_sort_unlocked :: FunPtr (Ptr C'GAsyncQueue -> C'GCompareDataFunc -> C'gpointer -> IO ())


-- | <a>http://library.gnome.org/devel/glib/stable/glib-Threads.html</a>
module Bindings.GLib.CoreApplicationSupport.Threads
c'G_THREAD_ERROR :: Num a => a
type C'GThreadError = CUInt
c'G_THREAD_ERROR_AGAIN :: Num a => a
data C'GThreadFunctions
C'GThreadFunctions :: FunPtr (IO (Ptr C'GMutex)) -> FunPtr (Ptr C'GMutex -> IO ()) -> FunPtr (Ptr C'GMutex -> IO C'gboolean) -> FunPtr (Ptr C'GMutex -> IO ()) -> FunPtr (Ptr C'GMutex -> IO ()) -> FunPtr (IO (Ptr C'GCond)) -> FunPtr (Ptr C'GCond -> IO ()) -> FunPtr (Ptr C'GCond -> IO ()) -> FunPtr (Ptr C'GCond -> Ptr C'GMutex -> IO ()) -> FunPtr (Ptr C'GCond -> Ptr C'GMutex -> Ptr C'GTimeVal -> IO C'gboolean) -> FunPtr (Ptr C'GCond -> IO ()) -> FunPtr (C'GDestroyNotify -> IO (Ptr C'GPrivate)) -> FunPtr (Ptr C'GPrivate -> IO C'gpointer) -> FunPtr (Ptr C'GPrivate -> C'gpointer -> IO ()) -> FunPtr (C'GThreadFunc -> C'gpointer -> C'gulong -> C'gboolean -> C'gboolean -> C'GThreadPriority -> C'gpointer -> Ptr (Ptr C'GError) -> IO ()) -> FunPtr (IO ()) -> FunPtr (C'gpointer -> IO ()) -> FunPtr (IO ()) -> FunPtr (C'gpointer -> C'GThreadPriority -> IO ()) -> FunPtr (C'gpointer -> IO ()) -> FunPtr (C'gpointer -> C'gpointer -> IO C'gboolean) -> C'GThreadFunctions
c'GThreadFunctions'mutex_new :: C'GThreadFunctions -> FunPtr (IO (Ptr C'GMutex))
c'GThreadFunctions'mutex_lock :: C'GThreadFunctions -> FunPtr (Ptr C'GMutex -> IO ())
c'GThreadFunctions'mutex_trylock :: C'GThreadFunctions -> FunPtr (Ptr C'GMutex -> IO C'gboolean)
c'GThreadFunctions'mutex_unlock :: C'GThreadFunctions -> FunPtr (Ptr C'GMutex -> IO ())
c'GThreadFunctions'mutex_free :: C'GThreadFunctions -> FunPtr (Ptr C'GMutex -> IO ())
c'GThreadFunctions'cond_new :: C'GThreadFunctions -> FunPtr (IO (Ptr C'GCond))
c'GThreadFunctions'cond_signal :: C'GThreadFunctions -> FunPtr (Ptr C'GCond -> IO ())
c'GThreadFunctions'cond_broadcast :: C'GThreadFunctions -> FunPtr (Ptr C'GCond -> IO ())
c'GThreadFunctions'cond_wait :: C'GThreadFunctions -> FunPtr (Ptr C'GCond -> Ptr C'GMutex -> IO ())
c'GThreadFunctions'cond_timed_wait :: C'GThreadFunctions -> FunPtr (Ptr C'GCond -> Ptr C'GMutex -> Ptr C'GTimeVal -> IO C'gboolean)
c'GThreadFunctions'cond_free :: C'GThreadFunctions -> FunPtr (Ptr C'GCond -> IO ())
c'GThreadFunctions'private_new :: C'GThreadFunctions -> FunPtr (C'GDestroyNotify -> IO (Ptr C'GPrivate))
c'GThreadFunctions'private_get :: C'GThreadFunctions -> FunPtr (Ptr C'GPrivate -> IO C'gpointer)
c'GThreadFunctions'private_set :: C'GThreadFunctions -> FunPtr (Ptr C'GPrivate -> C'gpointer -> IO ())
c'GThreadFunctions'thread_create :: C'GThreadFunctions -> FunPtr (C'GThreadFunc -> C'gpointer -> C'gulong -> C'gboolean -> C'gboolean -> C'GThreadPriority -> C'gpointer -> Ptr (Ptr C'GError) -> IO ())
c'GThreadFunctions'thread_yield :: C'GThreadFunctions -> FunPtr (IO ())
c'GThreadFunctions'thread_join :: C'GThreadFunctions -> FunPtr (C'gpointer -> IO ())
c'GThreadFunctions'thread_exit :: C'GThreadFunctions -> FunPtr (IO ())
c'GThreadFunctions'thread_set_priority :: C'GThreadFunctions -> FunPtr (C'gpointer -> C'GThreadPriority -> IO ())
c'GThreadFunctions'thread_self :: C'GThreadFunctions -> FunPtr (C'gpointer -> IO ())
c'GThreadFunctions'thread_equal :: C'GThreadFunctions -> FunPtr (C'gpointer -> C'gpointer -> IO C'gboolean)
c'g_thread_init :: Ptr C'GThreadFunctions -> IO ()
c'g_thread_supported :: IO C'gboolean
c'g_thread_get_initialized :: IO C'gboolean
p'g_thread_init :: FunPtr (Ptr C'GThreadFunctions -> IO ())
type C'GThreadFunc = FunPtr (C'gpointer -> IO C'gpointer)
p'g_thread_get_initialized :: FunPtr (IO C'gboolean)
mk'GThreadFunc :: (C'gpointer -> IO C'gpointer) -> IO C'GThreadFunc
type C'GThreadPriority = CUInt
mK'GThreadFunc :: C'GThreadFunc -> (C'gpointer -> IO C'gpointer)
c'G_THREAD_PRIORITY_LOW :: Num a => a
c'G_THREAD_PRIORITY_NORMAL :: Num a => a
c'G_THREAD_PRIORITY_HIGH :: Num a => a
c'G_THREAD_PRIORITY_URGENT :: Num a => a
data C'GThread
C'GThread :: C'GThread
c'g_thread_create :: C'GThreadFunc -> C'gpointer -> C'gboolean -> Ptr (Ptr C'GError) -> IO (Ptr C'GThread)
c'g_thread_create_full :: C'GThreadFunc -> C'gpointer -> C'gulong -> C'gboolean -> C'gboolean -> C'GThreadPriority -> Ptr (Ptr C'GError) -> IO (Ptr C'GThread)
c'g_thread_self :: IO (Ptr C'GThread)
c'g_thread_join :: Ptr C'GThread -> IO C'gpointer
p'g_thread_create_full :: FunPtr (C'GThreadFunc -> C'gpointer -> C'gulong -> C'gboolean -> C'gboolean -> C'GThreadPriority -> Ptr (Ptr C'GError) -> IO (Ptr C'GThread))
p'g_thread_self :: FunPtr (IO (Ptr C'GThread))
c'g_thread_set_priority :: Ptr C'GThread -> C'GThreadPriority -> IO ()
c'g_thread_yield :: IO ()
p'g_thread_join :: FunPtr (Ptr C'GThread -> IO C'gpointer)
c'g_thread_exit :: C'gpointer -> IO ()
p'g_thread_set_priority :: FunPtr (Ptr C'GThread -> C'GThreadPriority -> IO ())
c'g_thread_foreach :: C'GFunc -> C'gpointer -> IO ()
p'g_thread_exit :: FunPtr (C'gpointer -> IO ())
data C'GMutex
C'GMutex :: C'GMutex
p'g_thread_foreach :: FunPtr (C'GFunc -> C'gpointer -> IO ())
c'g_mutex_new :: IO (Ptr C'GMutex)
c'g_mutex_lock :: Ptr C'GMutex -> IO ()
c'g_mutex_trylock :: Ptr C'GMutex -> IO C'gboolean
c'g_mutex_unlock :: Ptr C'GMutex -> IO ()
c'g_mutex_free :: Ptr C'GMutex -> IO ()
data C'GStaticMutex
C'GStaticMutex :: C'GStaticMutex
c'g_static_mutex_init :: Ptr C'GStaticMutex -> IO ()
c'g_static_mutex_lock :: Ptr C'GStaticMutex -> IO ()
c'g_static_mutex_trylock :: Ptr C'GStaticMutex -> IO C'gboolean
c'g_static_mutex_unlock :: Ptr C'GStaticMutex -> IO ()
c'g_static_mutex_get_mutex :: Ptr C'GStaticMutex -> IO (Ptr C'GMutex)
c'g_static_mutex_free :: Ptr C'GStaticMutex -> IO ()
data C'GStaticRecMutex
C'GStaticRecMutex :: C'GStaticRecMutex
c'g_static_rec_mutex_init :: Ptr C'GStaticRecMutex -> IO ()
c'g_static_rec_mutex_lock :: Ptr C'GStaticRecMutex -> IO ()
c'g_static_rec_mutex_trylock :: Ptr C'GStaticRecMutex -> IO C'gboolean
p'g_static_rec_mutex_init :: FunPtr (Ptr C'GStaticRecMutex -> IO ())
c'g_static_rec_mutex_unlock :: Ptr C'GStaticRecMutex -> IO ()
p'g_static_rec_mutex_lock :: FunPtr (Ptr C'GStaticRecMutex -> IO ())
c'g_static_rec_mutex_lock_full :: Ptr C'GStaticRecMutex -> C'guint -> IO ()
p'g_static_rec_mutex_trylock :: FunPtr (Ptr C'GStaticRecMutex -> IO C'gboolean)
c'g_static_rec_mutex_unlock_full :: Ptr C'GStaticRecMutex -> IO C'guint
p'g_static_rec_mutex_unlock :: FunPtr (Ptr C'GStaticRecMutex -> IO ())
c'g_static_rec_mutex_free :: Ptr C'GStaticRecMutex -> IO ()
p'g_static_rec_mutex_lock_full :: FunPtr (Ptr C'GStaticRecMutex -> C'guint -> IO ())
p'g_static_rec_mutex_unlock_full :: FunPtr (Ptr C'GStaticRecMutex -> IO C'guint)
p'g_static_rec_mutex_free :: FunPtr (Ptr C'GStaticRecMutex -> IO ())
data C'GStaticRWLock
C'GStaticRWLock :: C'GStaticRWLock
c'g_static_rw_lock_init :: Ptr C'GStaticRWLock -> IO ()
c'g_static_rw_lock_reader_lock :: Ptr C'GStaticRWLock -> IO ()
c'g_static_rw_lock_reader_trylock :: Ptr C'GStaticRWLock -> IO C'gboolean
p'g_static_rw_lock_init :: FunPtr (Ptr C'GStaticRWLock -> IO ())
c'g_static_rw_lock_reader_unlock :: Ptr C'GStaticRWLock -> IO ()
p'g_static_rw_lock_reader_lock :: FunPtr (Ptr C'GStaticRWLock -> IO ())
c'g_static_rw_lock_writer_lock :: Ptr C'GStaticRWLock -> IO ()
p'g_static_rw_lock_reader_trylock :: FunPtr (Ptr C'GStaticRWLock -> IO C'gboolean)
c'g_static_rw_lock_writer_trylock :: Ptr C'GStaticRWLock -> IO C'gboolean
p'g_static_rw_lock_reader_unlock :: FunPtr (Ptr C'GStaticRWLock -> IO ())
c'g_static_rw_lock_writer_unlock :: Ptr C'GStaticRWLock -> IO ()
p'g_static_rw_lock_writer_lock :: FunPtr (Ptr C'GStaticRWLock -> IO ())
c'g_static_rw_lock_free :: Ptr C'GStaticRWLock -> IO ()
p'g_static_rw_lock_writer_trylock :: FunPtr (Ptr C'GStaticRWLock -> IO C'gboolean)
p'g_static_rw_lock_writer_unlock :: FunPtr (Ptr C'GStaticRWLock -> IO ())
data C'GCond
C'GCond :: C'GCond
p'g_static_rw_lock_free :: FunPtr (Ptr C'GStaticRWLock -> IO ())
c'g_cond_new :: IO (Ptr C'GCond)
c'g_cond_signal :: Ptr C'GCond -> IO ()
c'g_cond_broadcast :: Ptr C'GCond -> IO ()
c'g_cond_wait :: Ptr C'GCond -> Ptr C'GMutex -> IO ()
c'g_cond_timed_wait :: Ptr C'GCond -> Ptr C'GMutex -> Ptr C'GTimeVal -> IO C'gboolean
c'g_cond_free :: Ptr C'GCond -> IO ()
data C'GPrivate
C'GPrivate :: C'GPrivate
c'g_private_new :: C'GDestroyNotify -> IO (Ptr C'GPrivate)
c'g_private_get :: Ptr C'GPrivate -> IO C'gpointer
c'g_private_set :: Ptr C'GPrivate -> C'gpointer -> IO ()
data C'GStaticPrivate
C'GStaticPrivate :: C'GStaticPrivate
c'g_static_private_init :: Ptr C'GStaticPrivate -> IO ()
c'g_static_private_get :: Ptr C'GStaticPrivate -> IO C'gpointer
p'g_static_private_init :: FunPtr (Ptr C'GStaticPrivate -> IO ())
c'g_static_private_set :: Ptr C'GStaticPrivate -> C'gpointer -> C'GDestroyNotify -> IO ()
c'g_static_private_free :: Ptr C'GStaticPrivate -> IO ()
p'g_static_private_get :: FunPtr (Ptr C'GStaticPrivate -> IO C'gpointer)
p'g_static_private_set :: FunPtr (Ptr C'GStaticPrivate -> C'gpointer -> C'GDestroyNotify -> IO ())
p'g_static_private_free :: FunPtr (Ptr C'GStaticPrivate -> IO ())
data C'GOnce
C'GOnce :: C'GOnceStatus -> C'gpointer -> C'GOnce
c'GOnce'status :: C'GOnce -> C'GOnceStatus
c'GOnce'retval :: C'GOnce -> C'gpointer
type C'GOnceStatus = CUInt
c'G_ONCE_STATUS_NOTCALLED :: Num a => a
c'G_ONCE_STATUS_PROGRESS :: Num a => a
c'G_ONCE_STATUS_READY :: Num a => a
c'g_once_init_enter :: Ptr C'gsize -> IO C'gboolean
c'g_once_init_leave :: Ptr C'gsize -> C'gsize -> IO ()
p'g_once_init_enter :: FunPtr (Ptr C'gsize -> IO C'gboolean)
p'g_once_init_leave :: FunPtr (Ptr C'gsize -> C'gsize -> IO ())
instance Eq C'GStaticMutex
instance Show C'GStaticMutex
instance Eq C'GStaticRecMutex
instance Show C'GStaticRecMutex
instance Eq C'GStaticRWLock
instance Show C'GStaticRWLock
instance Eq C'GThreadFunctions
instance Show C'GThreadFunctions
instance Eq C'GStaticPrivate
instance Show C'GStaticPrivate
instance Eq C'GOnce
instance Show C'GOnce
instance Storable C'GOnce
instance Storable C'GStaticPrivate
instance Storable C'GStaticRWLock
instance Storable C'GStaticRecMutex
instance Storable C'GStaticMutex
instance Storable C'GThreadFunctions


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-The-Main-Event-Loop.html</a>
module Bindings.GLib.CoreApplicationSupport.MainEventLoop
data C'GMainLoop
C'GMainLoop :: C'GMainLoop
c'g_main_loop_new :: Ptr C'GMainContext -> C'gboolean -> IO (Ptr C'GMainLoop)
c'g_main_loop_ref :: Ptr C'GMainLoop -> IO (Ptr C'GMainLoop)
c'g_main_loop_unref :: Ptr C'GMainLoop -> IO ()
p'g_main_loop_new :: FunPtr (Ptr C'GMainContext -> C'gboolean -> IO (Ptr C'GMainLoop))
c'g_main_loop_run :: Ptr C'GMainLoop -> IO ()
p'g_main_loop_ref :: FunPtr (Ptr C'GMainLoop -> IO (Ptr C'GMainLoop))
c'g_main_loop_quit :: Ptr C'GMainLoop -> IO ()
p'g_main_loop_unref :: FunPtr (Ptr C'GMainLoop -> IO ())
c'g_main_loop_is_running :: Ptr C'GMainLoop -> IO C'gboolean
p'g_main_loop_run :: FunPtr (Ptr C'GMainLoop -> IO ())
p'g_main_loop_quit :: FunPtr (Ptr C'GMainLoop -> IO ())
c'g_main_loop_get_context :: Ptr C'GMainLoop -> IO (Ptr C'GMainContext)
p'g_main_loop_is_running :: FunPtr (Ptr C'GMainLoop -> IO C'gboolean)
p'g_main_loop_get_context :: FunPtr (Ptr C'GMainLoop -> IO (Ptr C'GMainContext))
c'G_PRIORITY_HIGH :: Num a => a
c'G_PRIORITY_DEFAULT :: Num a => a
c'G_PRIORITY_HIGH_IDLE :: Num a => a
c'G_PRIORITY_DEFAULT_IDLE :: Num a => a
c'G_PRIORITY_LOW :: Num a => a
data C'GMainContext
C'GMainContext :: C'GMainContext
c'g_main_context_new :: IO (Ptr C'GMainContext)
c'g_main_context_ref :: Ptr C'GMainContext -> IO (Ptr C'GMainContext)
c'g_main_context_unref :: Ptr C'GMainContext -> IO ()
p'g_main_context_new :: FunPtr (IO (Ptr C'GMainContext))
c'g_main_context_default :: IO (Ptr C'GMainContext)
p'g_main_context_ref :: FunPtr (Ptr C'GMainContext -> IO (Ptr C'GMainContext))
p'g_main_context_unref :: FunPtr (Ptr C'GMainContext -> IO ())
c'g_main_context_iteration :: Ptr C'GMainContext -> C'gboolean -> IO C'gboolean
p'g_main_context_default :: FunPtr (IO (Ptr C'GMainContext))
c'g_main_context_pending :: Ptr C'GMainContext -> IO C'gboolean
c'g_main_context_find_source_by_id :: Ptr C'GMainContext -> C'guint -> IO (Ptr C'GSource)
p'g_main_context_iteration :: FunPtr (Ptr C'GMainContext -> C'gboolean -> IO C'gboolean)
p'g_main_context_pending :: FunPtr (Ptr C'GMainContext -> IO C'gboolean)
c'g_main_context_find_source_by_user_data :: Ptr C'GMainContext -> C'gpointer -> IO (Ptr C'GSource)
p'g_main_context_find_source_by_id :: FunPtr (Ptr C'GMainContext -> C'guint -> IO (Ptr C'GSource))
c'g_main_context_find_source_by_funcs_user_data :: Ptr C'GMainContext -> Ptr C'GSourceFuncs -> C'gpointer -> IO (Ptr C'GSource)
c'g_main_context_wakeup :: Ptr C'GMainContext -> IO ()
p'g_main_context_find_source_by_user_data :: FunPtr (Ptr C'GMainContext -> C'gpointer -> IO (Ptr C'GSource))
c'g_main_context_acquire :: Ptr C'GMainContext -> IO C'gboolean
p'g_main_context_find_source_by_funcs_user_data :: FunPtr (Ptr C'GMainContext -> Ptr C'GSourceFuncs -> C'gpointer -> IO (Ptr C'GSource))
c'g_main_context_release :: Ptr C'GMainContext -> IO ()
p'g_main_context_wakeup :: FunPtr (Ptr C'GMainContext -> IO ())
c'g_main_context_is_owner :: Ptr C'GMainContext -> IO C'gboolean
p'g_main_context_acquire :: FunPtr (Ptr C'GMainContext -> IO C'gboolean)
p'g_main_context_release :: FunPtr (Ptr C'GMainContext -> IO ())
c'g_main_context_wait :: Ptr C'GMainContext -> Ptr C'GCond -> Ptr C'GMutex -> IO C'gboolean
p'g_main_context_is_owner :: FunPtr (Ptr C'GMainContext -> IO C'gboolean)
c'g_main_context_prepare :: Ptr C'GMainContext -> Ptr C'gint -> IO C'gboolean
p'g_main_context_wait :: FunPtr (Ptr C'GMainContext -> Ptr C'GCond -> Ptr C'GMutex -> IO C'gboolean)
c'g_main_context_query :: Ptr C'GMainContext -> C'gint -> Ptr C'gint -> Ptr C'GPollFD -> C'gint -> IO C'gint
p'g_main_context_prepare :: FunPtr (Ptr C'GMainContext -> Ptr C'gint -> IO C'gboolean)
c'g_main_context_check :: Ptr C'GMainContext -> C'gint -> Ptr C'GPollFD -> C'gint -> IO C'gint
c'g_main_context_dispatch :: Ptr C'GMainContext -> IO ()
p'g_main_context_query :: FunPtr (Ptr C'GMainContext -> C'gint -> Ptr C'gint -> Ptr C'GPollFD -> C'gint -> IO C'gint)
c'g_main_context_set_poll_func :: Ptr C'GMainContext -> C'GPollFunc -> IO ()
p'g_main_context_check :: FunPtr (Ptr C'GMainContext -> C'gint -> Ptr C'GPollFD -> C'gint -> IO C'gint)
c'g_main_context_get_poll_func :: Ptr C'GMainContext -> IO C'GPollFunc
p'g_main_context_dispatch :: FunPtr (Ptr C'GMainContext -> IO ())
p'g_main_context_set_poll_func :: FunPtr (Ptr C'GMainContext -> C'GPollFunc -> IO ())
type C'GPollFunc = FunPtr (Ptr C'GPollFD -> C'guint -> C'gint -> IO C'gint)
p'g_main_context_get_poll_func :: FunPtr (Ptr C'GMainContext -> IO C'GPollFunc)
mk'GPollFunc :: (Ptr C'GPollFD -> C'guint -> C'gint -> IO C'gint) -> IO C'GPollFunc
c'g_main_context_add_poll :: Ptr C'GMainContext -> Ptr C'GPollFD -> C'gint -> IO ()
c'g_main_context_remove_poll :: Ptr C'GMainContext -> Ptr C'GPollFD -> IO ()
mK'GPollFunc :: C'GPollFunc -> (Ptr C'GPollFD -> C'guint -> C'gint -> IO C'gint)
c'g_main_depth :: IO C'gint
p'g_main_context_add_poll :: FunPtr (Ptr C'GMainContext -> Ptr C'GPollFD -> C'gint -> IO ())
c'g_main_current_source :: IO (Ptr C'GSource)
p'g_main_context_remove_poll :: FunPtr (Ptr C'GMainContext -> Ptr C'GPollFD -> IO ())
p'g_main_depth :: FunPtr (IO C'gint)
c'g_main_context_get_thread_default :: IO (Ptr C'GMainContext)
p'g_main_current_source :: FunPtr (IO (Ptr C'GSource))
c'g_main_context_push_thread_default :: Ptr C'GMainContext -> IO ()
c'g_main_context_pop_thread_default :: Ptr C'GMainContext -> IO ()
p'g_main_context_get_thread_default :: FunPtr (IO (Ptr C'GMainContext))
p'g_main_context_push_thread_default :: FunPtr (Ptr C'GMainContext -> IO ())
c'g_timeout_source_new :: C'guint -> IO (Ptr C'GSource)
p'g_main_context_pop_thread_default :: FunPtr (Ptr C'GMainContext -> IO ())
c'g_timeout_source_new_seconds :: C'guint -> IO (Ptr C'GSource)
p'g_timeout_source_new :: FunPtr (C'guint -> IO (Ptr C'GSource))
c'g_timeout_add :: C'guint -> C'GSourceFunc -> C'gpointer -> IO C'guint
p'g_timeout_source_new_seconds :: FunPtr (C'guint -> IO (Ptr C'GSource))
c'g_timeout_add_full :: C'gint -> C'guint -> C'GSourceFunc -> C'gpointer -> C'GDestroyNotify -> IO C'guint
c'g_timeout_add_seconds :: C'guint -> C'GSourceFunc -> C'gpointer -> IO C'guint
p'g_timeout_add :: FunPtr (C'guint -> C'GSourceFunc -> C'gpointer -> IO C'guint)
c'g_timeout_add_seconds_full :: C'gint -> C'guint -> C'GSourceFunc -> C'gpointer -> C'GDestroyNotify -> IO C'guint
p'g_timeout_add_full :: FunPtr (C'gint -> C'guint -> C'GSourceFunc -> C'gpointer -> C'GDestroyNotify -> IO C'guint)
p'g_timeout_add_seconds :: FunPtr (C'guint -> C'GSourceFunc -> C'gpointer -> IO C'guint)
c'g_idle_source_new :: IO (Ptr C'GSource)
p'g_timeout_add_seconds_full :: FunPtr (C'gint -> C'guint -> C'GSourceFunc -> C'gpointer -> C'GDestroyNotify -> IO C'guint)
c'g_idle_add :: C'GSourceFunc -> C'gpointer -> IO C'guint
p'g_idle_source_new :: FunPtr (IO (Ptr C'GSource))
c'g_idle_add_full :: C'gint -> C'GSourceFunc -> C'gpointer -> C'GDestroyNotify -> IO C'guint
c'g_idle_remove_by_data :: C'gpointer -> IO C'gboolean
p'g_idle_add :: FunPtr (C'GSourceFunc -> C'gpointer -> IO C'guint)
p'g_idle_add_full :: FunPtr (C'gint -> C'GSourceFunc -> C'gpointer -> C'GDestroyNotify -> IO C'guint)
type C'GPid = CInt
p'g_idle_remove_by_data :: FunPtr (C'gpointer -> IO C'gboolean)
type C'GChildWatchFunc = FunPtr (C'GPid -> C'gint -> C'gpointer -> IO ())
mk'GChildWatchFunc :: (C'GPid -> C'gint -> C'gpointer -> IO ()) -> IO C'GChildWatchFunc
c'g_child_watch_source_new :: C'GPid -> IO (Ptr C'GSource)
c'g_child_watch_add :: C'GPid -> C'GChildWatchFunc -> C'gpointer -> IO C'guint
mK'GChildWatchFunc :: C'GChildWatchFunc -> (C'GPid -> C'gint -> C'gpointer -> IO ())
p'g_child_watch_source_new :: FunPtr (C'GPid -> IO (Ptr C'GSource))
c'g_child_watch_add_full :: C'gint -> C'GPid -> C'GChildWatchFunc -> C'gpointer -> C'GDestroyNotify -> IO C'guint
p'g_child_watch_add :: FunPtr (C'GPid -> C'GChildWatchFunc -> C'gpointer -> IO C'guint)
p'g_child_watch_add_full :: FunPtr (C'gint -> C'GPid -> C'GChildWatchFunc -> C'gpointer -> C'GDestroyNotify -> IO C'guint)
data C'GPollFD
C'GPollFD :: C'gushort -> C'gushort -> C'GPollFD
c'GPollFD'events :: C'GPollFD -> C'gushort
c'GPollFD'revents :: C'GPollFD -> C'gushort
c'g_poll :: Ptr C'GPollFD -> C'guint -> C'gint -> IO C'gint
data C'GSource
C'GSource :: C'GSource
p'g_poll :: FunPtr (Ptr C'GPollFD -> C'guint -> C'gint -> IO C'gint)
type C'GSourceDummyMarshal = FunPtr (IO ())
mk'GSourceDummyMarshal :: (IO ()) -> IO C'GSourceDummyMarshal
data C'GSourceFuncs
C'GSourceFuncs :: FunPtr (Ptr C'GSource -> Ptr C'gint -> IO C'gboolean) -> FunPtr (Ptr C'GSource -> IO C'gboolean) -> FunPtr (Ptr C'GSource -> C'GSourceFunc -> C'gpointer -> IO C'gboolean) -> FunPtr (Ptr C'GSource -> IO ()) -> C'GSourceFunc -> C'GSourceDummyMarshal -> C'GSourceFuncs
c'GSourceFuncs'prepare :: C'GSourceFuncs -> FunPtr (Ptr C'GSource -> Ptr C'gint -> IO C'gboolean)
c'GSourceFuncs'check :: C'GSourceFuncs -> FunPtr (Ptr C'GSource -> IO C'gboolean)
c'GSourceFuncs'dispatch :: C'GSourceFuncs -> FunPtr (Ptr C'GSource -> C'GSourceFunc -> C'gpointer -> IO C'gboolean)
c'GSourceFuncs'finalize :: C'GSourceFuncs -> FunPtr (Ptr C'GSource -> IO ())
c'GSourceFuncs'closure_callback :: C'GSourceFuncs -> C'GSourceFunc
c'GSourceFuncs'closure_marshal :: C'GSourceFuncs -> C'GSourceDummyMarshal
mK'GSourceDummyMarshal :: C'GSourceDummyMarshal -> (IO ())
data C'GSourceCallbackFuncs
C'GSourceCallbackFuncs :: FunPtr (C'gpointer -> IO ()) -> FunPtr (C'gpointer -> IO ()) -> FunPtr (C'gpointer -> Ptr C'GSource -> Ptr C'GSourceFunc -> Ptr C'gpointer -> IO ()) -> C'GSourceCallbackFuncs
c'GSourceCallbackFuncs'ref :: C'GSourceCallbackFuncs -> FunPtr (C'gpointer -> IO ())
c'GSourceCallbackFuncs'unref :: C'GSourceCallbackFuncs -> FunPtr (C'gpointer -> IO ())
c'GSourceCallbackFuncs'get :: C'GSourceCallbackFuncs -> FunPtr (C'gpointer -> Ptr C'GSource -> Ptr C'GSourceFunc -> Ptr C'gpointer -> IO ())
c'g_source_new :: Ptr C'GSourceFuncs -> C'guint -> IO (Ptr C'GSource)
c'g_source_ref :: Ptr C'GSource -> IO (Ptr C'GSource)
c'g_source_unref :: Ptr C'GSource -> IO ()
p'g_source_new :: FunPtr (Ptr C'GSourceFuncs -> C'guint -> IO (Ptr C'GSource))
c'g_source_set_funcs :: Ptr C'GSource -> Ptr C'GSourceFuncs -> IO ()
p'g_source_ref :: FunPtr (Ptr C'GSource -> IO (Ptr C'GSource))
p'g_source_unref :: FunPtr (Ptr C'GSource -> IO ())
c'g_source_attach :: Ptr C'GSource -> Ptr C'GMainContext -> IO C'guint
c'g_source_destroy :: Ptr C'GSource -> IO ()
p'g_source_set_funcs :: FunPtr (Ptr C'GSource -> Ptr C'GSourceFuncs -> IO ())
c'g_source_is_destroyed :: Ptr C'GSource -> IO C'gboolean
p'g_source_attach :: FunPtr (Ptr C'GSource -> Ptr C'GMainContext -> IO C'guint)
p'g_source_destroy :: FunPtr (Ptr C'GSource -> IO ())
c'g_source_set_priority :: Ptr C'GSource -> C'gint -> IO ()
c'g_source_get_priority :: Ptr C'GSource -> IO C'gint
p'g_source_is_destroyed :: FunPtr (Ptr C'GSource -> IO C'gboolean)
c'g_source_set_can_recurse :: Ptr C'GSource -> C'gboolean -> IO ()
p'g_source_set_priority :: FunPtr (Ptr C'GSource -> C'gint -> IO ())
c'g_source_get_can_recurse :: Ptr C'GSource -> IO C'gboolean
p'g_source_get_priority :: FunPtr (Ptr C'GSource -> IO C'gint)
c'g_source_get_id :: Ptr C'GSource -> IO C'guint
p'g_source_set_can_recurse :: FunPtr (Ptr C'GSource -> C'gboolean -> IO ())
p'g_source_get_can_recurse :: FunPtr (Ptr C'GSource -> IO C'gboolean)
c'g_source_get_context :: Ptr C'GSource -> IO (Ptr C'GMainContext)
p'g_source_get_id :: FunPtr (Ptr C'GSource -> IO C'guint)
c'g_source_set_callback :: Ptr C'GSource -> C'GSourceFunc -> C'gpointer -> C'GDestroyNotify -> IO ()
p'g_source_get_context :: FunPtr (Ptr C'GSource -> IO (Ptr C'GMainContext))
type C'GSourceFunc = FunPtr (C'gpointer -> IO C'gboolean)
p'g_source_set_callback :: FunPtr (Ptr C'GSource -> C'GSourceFunc -> C'gpointer -> C'GDestroyNotify -> IO ())
mk'GSourceFunc :: (C'gpointer -> IO C'gboolean) -> IO C'GSourceFunc
c'g_source_set_callback_indirect :: Ptr C'GSource -> C'gpointer -> Ptr C'GSourceCallbackFuncs -> IO ()
c'g_source_add_poll :: Ptr C'GSource -> Ptr C'GPollFD -> IO ()
mK'GSourceFunc :: C'GSourceFunc -> (C'gpointer -> IO C'gboolean)
c'g_source_remove_poll :: Ptr C'GSource -> Ptr C'GPollFD -> IO ()
p'g_source_set_callback_indirect :: FunPtr (Ptr C'GSource -> C'gpointer -> Ptr C'GSourceCallbackFuncs -> IO ())
c'g_source_get_current_time :: Ptr C'GSource -> Ptr C'GTimeVal -> IO ()
p'g_source_add_poll :: FunPtr (Ptr C'GSource -> Ptr C'GPollFD -> IO ())
c'g_source_remove :: C'guint -> IO C'gboolean
p'g_source_remove_poll :: FunPtr (Ptr C'GSource -> Ptr C'GPollFD -> IO ())
c'g_source_remove_by_funcs_user_data :: Ptr C'GSourceFuncs -> C'gpointer -> IO C'gboolean
p'g_source_get_current_time :: FunPtr (Ptr C'GSource -> Ptr C'GTimeVal -> IO ())
c'g_source_remove_by_user_data :: C'gpointer -> IO C'gboolean
p'g_source_remove :: FunPtr (C'guint -> IO C'gboolean)
p'g_source_remove_by_funcs_user_data :: FunPtr (Ptr C'GSourceFuncs -> C'gpointer -> IO C'gboolean)
p'g_source_remove_by_user_data :: FunPtr (C'gpointer -> IO C'gboolean)
instance Eq C'GPollFD
instance Show C'GPollFD
instance Eq C'GSourceCallbackFuncs
instance Show C'GSourceCallbackFuncs
instance Eq C'GSourceFuncs
instance Show C'GSourceFuncs
instance Storable C'GSourceCallbackFuncs
instance Storable C'GSourceFuncs
instance Storable C'GPollFD


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Commandline-option-parser.html</a>
module Bindings.GLib.Utilities.CommandlineOptionParser
type C'GOptionError = CUInt
c'G_OPTION_ERROR_UNKNOWN_OPTION :: Num a => a
c'G_OPTION_ERROR_BAD_VALUE :: Num a => a
c'G_OPTION_ERROR_FAILED :: Num a => a
c'G_OPTION_ERROR :: Num a => a
type C'GOptionArgFunc = FunPtr (Ptr C'gchar -> Ptr C'gchar -> C'gpointer -> Ptr (Ptr C'GError) -> IO C'gboolean)
mk'GOptionArgFunc :: (Ptr C'gchar -> Ptr C'gchar -> C'gpointer -> Ptr (Ptr C'GError) -> IO C'gboolean) -> IO C'GOptionArgFunc
data C'GOptionContext
C'GOptionContext :: C'GOptionContext
mK'GOptionArgFunc :: C'GOptionArgFunc -> (Ptr C'gchar -> Ptr C'gchar -> C'gpointer -> Ptr (Ptr C'GError) -> IO C'gboolean)
c'g_option_context_new :: Ptr C'gchar -> IO (Ptr C'GOptionContext)
c'g_option_context_set_summary :: Ptr C'GOptionContext -> Ptr C'gchar -> IO ()
c'g_option_context_get_summary :: Ptr C'GOptionContext -> IO (Ptr C'gchar)
p'g_option_context_new :: FunPtr (Ptr C'gchar -> IO (Ptr C'GOptionContext))
c'g_option_context_set_description :: Ptr C'GOptionContext -> Ptr C'gchar -> IO ()
p'g_option_context_set_summary :: FunPtr (Ptr C'GOptionContext -> Ptr C'gchar -> IO ())
c'g_option_context_get_description :: Ptr C'GOptionContext -> IO (Ptr C'gchar)
p'g_option_context_get_summary :: FunPtr (Ptr C'GOptionContext -> IO (Ptr C'gchar))
p'g_option_context_set_description :: FunPtr (Ptr C'GOptionContext -> Ptr C'gchar -> IO ())
p'g_option_context_get_description :: FunPtr (Ptr C'GOptionContext -> IO (Ptr C'gchar))
type C'GTranslateFunc = FunPtr (Ptr C'gchar -> C'gpointer -> IO (Ptr C'gchar))
mk'GTranslateFunc :: (Ptr C'gchar -> C'gpointer -> IO (Ptr C'gchar)) -> IO C'GTranslateFunc
c'g_option_context_set_translate_func :: Ptr C'GOptionContext -> C'GTranslateFunc -> C'gpointer -> C'GDestroyNotify -> IO ()
c'g_option_context_set_translation_domain :: Ptr C'GOptionContext -> Ptr C'gchar -> IO ()
mK'GTranslateFunc :: C'GTranslateFunc -> (Ptr C'gchar -> C'gpointer -> IO (Ptr C'gchar))
c'g_option_context_free :: Ptr C'GOptionContext -> IO ()
p'g_option_context_set_translate_func :: FunPtr (Ptr C'GOptionContext -> C'GTranslateFunc -> C'gpointer -> C'GDestroyNotify -> IO ())
p'g_option_context_set_translation_domain :: FunPtr (Ptr C'GOptionContext -> Ptr C'gchar -> IO ())
c'g_option_context_parse :: Ptr C'GOptionContext -> Ptr C'gint -> Ptr (Ptr (Ptr C'gchar)) -> Ptr (Ptr C'GError) -> IO C'gboolean
p'g_option_context_free :: FunPtr (Ptr C'GOptionContext -> IO ())
c'g_option_context_set_help_enabled :: Ptr C'GOptionContext -> C'gboolean -> IO ()
c'g_option_context_get_help_enabled :: Ptr C'GOptionContext -> IO C'gboolean
p'g_option_context_parse :: FunPtr (Ptr C'GOptionContext -> Ptr C'gint -> Ptr (Ptr (Ptr C'gchar)) -> Ptr (Ptr C'GError) -> IO C'gboolean)
c'g_option_context_set_ignore_unknown_options :: Ptr C'GOptionContext -> C'gboolean -> IO ()
p'g_option_context_set_help_enabled :: FunPtr (Ptr C'GOptionContext -> C'gboolean -> IO ())
c'g_option_context_get_ignore_unknown_options :: Ptr C'GOptionContext -> IO C'gboolean
p'g_option_context_get_help_enabled :: FunPtr (Ptr C'GOptionContext -> IO C'gboolean)
p'g_option_context_set_ignore_unknown_options :: FunPtr (Ptr C'GOptionContext -> C'gboolean -> IO ())
c'g_option_context_get_help :: Ptr C'GOptionContext -> C'gboolean -> Ptr C'GOptionGroup -> IO (Ptr C'gchar)
p'g_option_context_get_ignore_unknown_options :: FunPtr (Ptr C'GOptionContext -> IO C'gboolean)
p'g_option_context_get_help :: FunPtr (Ptr C'GOptionContext -> C'gboolean -> Ptr C'GOptionGroup -> IO (Ptr C'gchar))
type C'GOptionArg = CUInt
c'G_OPTION_ARG_NONE :: Num a => a
c'G_OPTION_ARG_STRING :: Num a => a
c'G_OPTION_ARG_INT :: Num a => a
c'G_OPTION_ARG_CALLBACK :: Num a => a
c'G_OPTION_ARG_FILENAME :: Num a => a
c'G_OPTION_ARG_STRING_ARRAY :: Num a => a
c'G_OPTION_ARG_FILENAME_ARRAY :: Num a => a
c'G_OPTION_ARG_DOUBLE :: Num a => a
c'G_OPTION_ARG_INT64 :: Num a => a
type C'GOptionFlags = CUInt
c'G_OPTION_FLAG_HIDDEN :: Num a => a
c'G_OPTION_FLAG_IN_MAIN :: Num a => a
c'G_OPTION_FLAG_REVERSE :: Num a => a
c'G_OPTION_FLAG_NO_ARG :: Num a => a
c'G_OPTION_FLAG_FILENAME :: Num a => a
c'G_OPTION_FLAG_OPTIONAL_ARG :: Num a => a
c'G_OPTION_FLAG_NOALIAS :: Num a => a
c'G_OPTION_REMAINING :: Ptr a
data C'GOptionEntry
C'GOptionEntry :: Ptr C'gchar -> C'gchar -> C'gint -> C'GOptionArg -> C'gpointer -> Ptr C'gchar -> Ptr C'gchar -> C'GOptionEntry
c'GOptionEntry'long_name :: C'GOptionEntry -> Ptr C'gchar
c'GOptionEntry'short_name :: C'GOptionEntry -> C'gchar
c'GOptionEntry'flags :: C'GOptionEntry -> C'gint
c'GOptionEntry'arg :: C'GOptionEntry -> C'GOptionArg
c'GOptionEntry'arg_data :: C'GOptionEntry -> C'gpointer
c'GOptionEntry'description :: C'GOptionEntry -> Ptr C'gchar
c'GOptionEntry'arg_description :: C'GOptionEntry -> Ptr C'gchar
c'g_option_context_add_main_entries :: Ptr C'GOptionContext -> Ptr C'GOptionEntry -> Ptr C'gchar -> IO ()
data C'GOptionGroup
C'GOptionGroup :: C'GOptionGroup
p'g_option_context_add_main_entries :: FunPtr (Ptr C'GOptionContext -> Ptr C'GOptionEntry -> Ptr C'gchar -> IO ())
c'g_option_context_add_group :: Ptr C'GOptionContext -> Ptr C'GOptionGroup -> IO ()
c'g_option_context_set_main_group :: Ptr C'GOptionContext -> Ptr C'GOptionGroup -> IO ()
c'g_option_context_get_main_group :: Ptr C'GOptionContext -> IO (Ptr C'GOptionGroup)
p'g_option_context_add_group :: FunPtr (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> IO ())
p'g_option_context_set_main_group :: FunPtr (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> IO ())
c'g_option_group_new :: Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gpointer -> C'GDestroyNotify -> IO (Ptr C'GOptionGroup)
c'g_option_group_free :: Ptr C'GOptionGroup -> IO ()
p'g_option_context_get_main_group :: FunPtr (Ptr C'GOptionContext -> IO (Ptr C'GOptionGroup))
c'g_option_group_add_entries :: Ptr C'GOptionGroup -> Ptr C'GOptionEntry -> IO ()
p'g_option_group_new :: FunPtr (Ptr C'gchar -> Ptr C'gchar -> Ptr C'gchar -> C'gpointer -> C'GDestroyNotify -> IO (Ptr C'GOptionGroup))
p'g_option_group_free :: FunPtr (Ptr C'GOptionGroup -> IO ())
type C'GOptionParseFunc = FunPtr (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> C'gpointer -> Ptr (Ptr C'GError) -> IO C'gboolean)
p'g_option_group_add_entries :: FunPtr (Ptr C'GOptionGroup -> Ptr C'GOptionEntry -> IO ())
mk'GOptionParseFunc :: (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> C'gpointer -> Ptr (Ptr C'GError) -> IO C'gboolean) -> IO C'GOptionParseFunc
c'g_option_group_set_parse_hooks :: Ptr C'GOptionGroup -> C'GOptionParseFunc -> C'GOptionParseFunc -> IO ()
mK'GOptionParseFunc :: C'GOptionParseFunc -> (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> C'gpointer -> Ptr (Ptr C'GError) -> IO C'gboolean)
type C'GOptionErrorFunc = FunPtr (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> C'gpointer -> Ptr (Ptr C'GError) -> IO ())
p'g_option_group_set_parse_hooks :: FunPtr (Ptr C'GOptionGroup -> C'GOptionParseFunc -> C'GOptionParseFunc -> IO ())
mk'GOptionErrorFunc :: (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> C'gpointer -> Ptr (Ptr C'GError) -> IO ()) -> IO C'GOptionErrorFunc
c'g_option_group_set_error_hook :: Ptr C'GOptionGroup -> C'GOptionErrorFunc -> IO ()
c'g_option_group_set_translate_func :: Ptr C'GOptionGroup -> C'GTranslateFunc -> C'gpointer -> C'GDestroyNotify -> IO ()
mK'GOptionErrorFunc :: C'GOptionErrorFunc -> (Ptr C'GOptionContext -> Ptr C'GOptionGroup -> C'gpointer -> Ptr (Ptr C'GError) -> IO ())
c'g_option_group_set_translation_domain :: Ptr C'GOptionGroup -> Ptr C'gchar -> IO ()
p'g_option_group_set_error_hook :: FunPtr (Ptr C'GOptionGroup -> C'GOptionErrorFunc -> IO ())
p'g_option_group_set_translate_func :: FunPtr (Ptr C'GOptionGroup -> C'GTranslateFunc -> C'gpointer -> C'GDestroyNotify -> IO ())
p'g_option_group_set_translation_domain :: FunPtr (Ptr C'GOptionGroup -> Ptr C'gchar -> IO ())
instance Eq C'GOptionEntry
instance Show C'GOptionEntry
instance Storable C'GOptionEntry


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Hostname-Utilities.html</a>
module Bindings.GLib.Utilities.HostnameUtilities
c'g_hostname_to_ascii :: Ptr C'gchar -> IO (Ptr C'gchar)
c'g_hostname_to_unicode :: Ptr C'gchar -> IO (Ptr C'gchar)
c'g_hostname_is_non_ascii :: Ptr C'gchar -> IO C'gboolean
p'g_hostname_to_ascii :: FunPtr (Ptr C'gchar -> IO (Ptr C'gchar))
c'g_hostname_is_ascii_encoded :: Ptr C'gchar -> IO C'gboolean
p'g_hostname_to_unicode :: FunPtr (Ptr C'gchar -> IO (Ptr C'gchar))
c'g_hostname_is_ip_address :: Ptr C'gchar -> IO C'gboolean
p'g_hostname_is_non_ascii :: FunPtr (Ptr C'gchar -> IO C'gboolean)
p'g_hostname_is_ascii_encoded :: FunPtr (Ptr C'gchar -> IO C'gboolean)
p'g_hostname_is_ip_address :: FunPtr (Ptr C'gchar -> IO C'gboolean)


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Simple-XML-Subset-Parser.html</a>
module Bindings.GLib.Utilities.SimpleXmlSubsetParser
c'g_markup_escape_text :: Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar)
p'g_markup_escape_text :: FunPtr (Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar))


-- | <a>http://library.gnome.org/devel/glib/stable/glib-utilities.html</a>
module Bindings.GLib.Utilities


-- | <a>http://library.gnome.org/devel/glib/stable/glib-Arrays.html</a>
module Bindings.GLib.DataTypes.Arrays
data C'GArray
C'GArray :: Ptr C'gchar -> C'guint -> C'GArray
c'GArray'data :: C'GArray -> Ptr C'gchar
c'GArray'len :: C'GArray -> C'guint
c'g_array_new :: C'gboolean -> C'gboolean -> C'guint -> IO (Ptr C'GArray)
c'g_array_sized_new :: C'gboolean -> C'gboolean -> C'guint -> C'guint -> IO (Ptr C'GArray)
c'g_array_ref :: Ptr C'GArray -> IO (Ptr C'GArray)
p'g_array_new :: FunPtr (C'gboolean -> C'gboolean -> C'guint -> IO (Ptr C'GArray))
c'g_array_unref :: Ptr C'GArray -> IO ()
p'g_array_sized_new :: FunPtr (C'gboolean -> C'gboolean -> C'guint -> C'guint -> IO (Ptr C'GArray))
c'g_array_get_element_size :: Ptr C'GArray -> IO C'guint
p'g_array_ref :: FunPtr (Ptr C'GArray -> IO (Ptr C'GArray))
p'g_array_unref :: FunPtr (Ptr C'GArray -> IO ())
p'g_array_get_element_size :: FunPtr (Ptr C'GArray -> IO C'guint)
c'g_array_append_vals :: Ptr C'GArray -> C'gconstpointer -> C'guint -> IO (Ptr C'GArray)
c'g_array_prepend_vals :: Ptr C'GArray -> C'gconstpointer -> C'guint -> IO (Ptr C'GArray)
p'g_array_append_vals :: FunPtr (Ptr C'GArray -> C'gconstpointer -> C'guint -> IO (Ptr C'GArray))
p'g_array_prepend_vals :: FunPtr (Ptr C'GArray -> C'gconstpointer -> C'guint -> IO (Ptr C'GArray))
c'g_array_insert_vals :: Ptr C'GArray -> C'guint -> C'gconstpointer -> C'guint -> IO (Ptr C'GArray)
c'g_array_remove_index :: Ptr C'GArray -> C'guint -> IO (Ptr C'GArray)
c'g_array_remove_index_fast :: Ptr C'GArray -> C'guint -> IO (Ptr C'GArray)
p'g_array_insert_vals :: FunPtr (Ptr C'GArray -> C'guint -> C'gconstpointer -> C'guint -> IO (Ptr C'GArray))
p'g_array_remove_index :: FunPtr (Ptr C'GArray -> C'guint -> IO (Ptr C'GArray))
c'g_array_remove_range :: Ptr C'GArray -> C'guint -> C'guint -> IO (Ptr C'GArray)
c'g_array_sort :: Ptr C'GArray -> C'GCompareFunc -> IO ()
p'g_array_remove_index_fast :: FunPtr (Ptr C'GArray -> C'guint -> IO (Ptr C'GArray))
c'g_array_sort_with_data :: Ptr C'GArray -> C'GCompareDataFunc -> C'gpointer -> IO ()
p'g_array_remove_range :: FunPtr (Ptr C'GArray -> C'guint -> C'guint -> IO (Ptr C'GArray))
p'g_array_sort :: FunPtr (Ptr C'GArray -> C'GCompareFunc -> IO ())
c'g_array_set_size :: Ptr C'GArray -> C'guint -> IO (Ptr C'GArray)
p'g_array_sort_with_data :: FunPtr (Ptr C'GArray -> C'GCompareDataFunc -> C'gpointer -> IO ())
c'g_array_free :: Ptr C'GArray -> C'gboolean -> IO (Ptr C'gchar)
p'g_array_set_size :: FunPtr (Ptr C'GArray -> C'guint -> IO (Ptr C'GArray))
p'g_array_free :: FunPtr (Ptr C'GArray -> C'gboolean -> IO (Ptr C'gchar))
instance Eq C'GArray
instance Show C'GArray
instance Storable C'GArray


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Balanced-Binary-Trees.html</a>
module Bindings.GLib.DataTypes.BalancedBinaryTrees
data C'GTree
C'GTree :: C'GTree
c'g_tree_new :: C'GCompareFunc -> IO (Ptr C'GTree)
c'g_tree_ref :: Ptr C'GTree -> IO (Ptr C'GTree)
c'g_tree_unref :: Ptr C'GTree -> IO ()
p'g_tree_new :: FunPtr (C'GCompareFunc -> IO (Ptr C'GTree))
p'g_tree_ref :: FunPtr (Ptr C'GTree -> IO (Ptr C'GTree))
c'g_tree_new_with_data :: C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GTree)
p'g_tree_unref :: FunPtr (Ptr C'GTree -> IO ())
c'g_tree_new_full :: C'GCompareDataFunc -> C'gpointer -> C'GDestroyNotify -> C'GDestroyNotify -> IO (Ptr C'GTree)
c'g_tree_insert :: Ptr C'GTree -> C'gpointer -> C'gpointer -> IO ()
p'g_tree_new_with_data :: FunPtr (C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GTree))
c'g_tree_replace :: Ptr C'GTree -> C'gpointer -> C'gpointer -> IO ()
p'g_tree_new_full :: FunPtr (C'GCompareDataFunc -> C'gpointer -> C'GDestroyNotify -> C'GDestroyNotify -> IO (Ptr C'GTree))
c'g_tree_nnodes :: Ptr C'GTree -> IO C'gint
p'g_tree_insert :: FunPtr (Ptr C'GTree -> C'gpointer -> C'gpointer -> IO ())
c'g_tree_height :: Ptr C'GTree -> IO C'gint
p'g_tree_replace :: FunPtr (Ptr C'GTree -> C'gpointer -> C'gpointer -> IO ())
p'g_tree_nnodes :: FunPtr (Ptr C'GTree -> IO C'gint)
c'g_tree_lookup :: Ptr C'GTree -> C'gconstpointer -> IO C'gpointer
p'g_tree_height :: FunPtr (Ptr C'GTree -> IO C'gint)
c'g_tree_lookup_extended :: Ptr C'GTree -> C'gconstpointer -> Ptr C'gpointer -> Ptr C'gpointer -> IO C'gboolean
c'g_tree_foreach :: Ptr C'GTree -> C'GTraverseFunc -> C'gpointer -> IO ()
p'g_tree_lookup :: FunPtr (Ptr C'GTree -> C'gconstpointer -> IO C'gpointer)
c'g_tree_traverse :: Ptr C'GTree -> C'GTraverseFunc -> C'GTraverseType -> C'gpointer -> IO ()
p'g_tree_lookup_extended :: FunPtr (Ptr C'GTree -> C'gconstpointer -> Ptr C'gpointer -> Ptr C'gpointer -> IO C'gboolean)
p'g_tree_foreach :: FunPtr (Ptr C'GTree -> C'GTraverseFunc -> C'gpointer -> IO ())
type C'GTraverseFunc = FunPtr (C'gpointer -> C'gpointer -> C'gpointer -> IO C'gboolean)
p'g_tree_traverse :: FunPtr (Ptr C'GTree -> C'GTraverseFunc -> C'GTraverseType -> C'gpointer -> IO ())
mk'GTraverseFunc :: (C'gpointer -> C'gpointer -> C'gpointer -> IO C'gboolean) -> IO C'GTraverseFunc
type C'GTraverseType = CUInt
mK'GTraverseFunc :: C'GTraverseFunc -> (C'gpointer -> C'gpointer -> C'gpointer -> IO C'gboolean)
c'G_IN_ORDER :: Num a => a
c'G_PRE_ORDER :: Num a => a
c'G_POST_ORDER :: Num a => a
c'G_LEVEL_ORDER :: Num a => a
c'g_tree_search :: Ptr C'GTree -> C'GCompareFunc -> C'gconstpointer -> IO C'gpointer
c'g_tree_remove :: Ptr C'GTree -> C'gconstpointer -> IO C'gboolean
c'g_tree_steal :: Ptr C'GTree -> C'gconstpointer -> IO C'gboolean
p'g_tree_search :: FunPtr (Ptr C'GTree -> C'GCompareFunc -> C'gconstpointer -> IO C'gpointer)
c'g_tree_destroy :: Ptr C'GTree -> IO ()
p'g_tree_remove :: FunPtr (Ptr C'GTree -> C'gconstpointer -> IO C'gboolean)
p'g_tree_steal :: FunPtr (Ptr C'GTree -> C'gconstpointer -> IO C'gboolean)
p'g_tree_destroy :: FunPtr (Ptr C'GTree -> IO ())


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Hash-Tables.html</a>
module Bindings.GLib.DataTypes.HashTables
data C'GHashTable
C'GHashTable :: C'GHashTable
c'g_hash_table_new :: C'GHashFunc -> C'GEqualFunc -> IO (Ptr C'GHashTable)
c'g_hash_table_new_full :: C'GHashFunc -> C'GEqualFunc -> C'GDestroyNotify -> C'GDestroyNotify -> IO (Ptr C'GHashTable)
p'g_hash_table_new :: FunPtr (C'GHashFunc -> C'GEqualFunc -> IO (Ptr C'GHashTable))
type C'GHashFunc = FunPtr (C'gconstpointer -> IO C'guint)
p'g_hash_table_new_full :: FunPtr (C'GHashFunc -> C'GEqualFunc -> C'GDestroyNotify -> C'GDestroyNotify -> IO (Ptr C'GHashTable))
type C'GEqualFunc = FunPtr (C'gconstpointer -> C'gconstpointer -> IO C'gboolean)
mk'GHashFunc :: (C'gconstpointer -> IO C'guint) -> IO C'GHashFunc
mk'GEqualFunc :: (C'gconstpointer -> C'gconstpointer -> IO C'gboolean) -> IO C'GEqualFunc
mK'GHashFunc :: C'GHashFunc -> (C'gconstpointer -> IO C'guint)
c'g_hash_table_insert :: Ptr C'GHashTable -> C'gpointer -> C'gpointer -> IO ()
c'g_hash_table_replace :: Ptr C'GHashTable -> C'gpointer -> C'gpointer -> IO ()
mK'GEqualFunc :: C'GEqualFunc -> (C'gconstpointer -> C'gconstpointer -> IO C'gboolean)
c'g_hash_table_size :: Ptr C'GHashTable -> IO C'guint
p'g_hash_table_insert :: FunPtr (Ptr C'GHashTable -> C'gpointer -> C'gpointer -> IO ())
c'g_hash_table_lookup :: Ptr C'GHashTable -> C'gconstpointer -> IO C'gpointer
p'g_hash_table_replace :: FunPtr (Ptr C'GHashTable -> C'gpointer -> C'gpointer -> IO ())
p'g_hash_table_size :: FunPtr (Ptr C'GHashTable -> IO C'guint)
c'g_hash_table_lookup_extended :: Ptr C'GHashTable -> C'gconstpointer -> C'gpointer -> C'gpointer -> IO C'gboolean
c'g_hash_table_foreach :: Ptr C'GHashTable -> C'GHFunc -> C'gpointer -> IO ()
p'g_hash_table_lookup :: FunPtr (Ptr C'GHashTable -> C'gconstpointer -> IO C'gpointer)
c'g_hash_table_find :: Ptr C'GHashTable -> C'GHRFunc -> C'gpointer -> IO C'gpointer
p'g_hash_table_lookup_extended :: FunPtr (Ptr C'GHashTable -> C'gconstpointer -> C'gpointer -> C'gpointer -> IO C'gboolean)
p'g_hash_table_foreach :: FunPtr (Ptr C'GHashTable -> C'GHFunc -> C'gpointer -> IO ())
type C'GHFunc = FunPtr (C'gpointer -> C'gpointer -> C'gpointer -> IO ())
p'g_hash_table_find :: FunPtr (Ptr C'GHashTable -> C'GHRFunc -> C'gpointer -> IO C'gpointer)
mk'GHFunc :: (C'gpointer -> C'gpointer -> C'gpointer -> IO ()) -> IO C'GHFunc
c'g_hash_table_remove :: Ptr C'GHashTable -> C'gconstpointer -> IO C'gboolean
c'g_hash_table_steal :: Ptr C'GHashTable -> C'gconstpointer -> IO C'gboolean
mK'GHFunc :: C'GHFunc -> (C'gpointer -> C'gpointer -> C'gpointer -> IO ())
c'g_hash_table_foreach_remove :: Ptr C'GHashTable -> C'GHRFunc -> C'gpointer -> IO C'guint
p'g_hash_table_remove :: FunPtr (Ptr C'GHashTable -> C'gconstpointer -> IO C'gboolean)
c'g_hash_table_foreach_steal :: Ptr C'GHashTable -> C'GHRFunc -> C'gpointer -> IO C'guint
p'g_hash_table_steal :: FunPtr (Ptr C'GHashTable -> C'gconstpointer -> IO C'gboolean)
c'g_hash_table_remove_all :: Ptr C'GHashTable -> IO ()
p'g_hash_table_foreach_remove :: FunPtr (Ptr C'GHashTable -> C'GHRFunc -> C'gpointer -> IO C'guint)
c'g_hash_table_steal_all :: Ptr C'GHashTable -> IO ()
p'g_hash_table_foreach_steal :: FunPtr (Ptr C'GHashTable -> C'GHRFunc -> C'gpointer -> IO C'guint)
p'g_hash_table_remove_all :: FunPtr (Ptr C'GHashTable -> IO ())
c'g_hash_table_get_keys :: Ptr C'GHashTable -> IO (Ptr C'GList)
p'g_hash_table_steal_all :: FunPtr (Ptr C'GHashTable -> IO ())
c'g_hash_table_get_values :: Ptr C'GHashTable -> IO (Ptr C'GList)
p'g_hash_table_get_keys :: FunPtr (Ptr C'GHashTable -> IO (Ptr C'GList))
type C'GHRFunc = FunPtr (C'gpointer -> C'gpointer -> C'gpointer -> IO C'gboolean)
p'g_hash_table_get_values :: FunPtr (Ptr C'GHashTable -> IO (Ptr C'GList))
mk'GHRFunc :: (C'gpointer -> C'gpointer -> C'gpointer -> IO C'gboolean) -> IO C'GHRFunc
c'g_hash_table_destroy :: Ptr C'GHashTable -> IO ()
c'g_hash_table_ref :: Ptr C'GHashTable -> IO (Ptr C'GHashTable)
mK'GHRFunc :: C'GHRFunc -> (C'gpointer -> C'gpointer -> C'gpointer -> IO C'gboolean)
c'g_hash_table_unref :: Ptr C'GHashTable -> IO ()
p'g_hash_table_destroy :: FunPtr (Ptr C'GHashTable -> IO ())
p'g_hash_table_ref :: FunPtr (Ptr C'GHashTable -> IO (Ptr C'GHashTable))
p'g_hash_table_unref :: FunPtr (Ptr C'GHashTable -> IO ())
data C'GHashTableIter
C'GHashTableIter :: C'GHashTableIter
c'g_hash_table_iter_init :: Ptr C'GHashTableIter -> Ptr C'GHashTable -> IO ()
c'g_hash_table_iter_next :: Ptr C'GHashTableIter -> C'gpointer -> C'gpointer -> IO C'gboolean
c'g_hash_table_iter_get_hash_table :: Ptr C'GHashTableIter -> IO (Ptr C'GHashTable)
p'g_hash_table_iter_init :: FunPtr (Ptr C'GHashTableIter -> Ptr C'GHashTable -> IO ())
c'g_hash_table_iter_remove :: Ptr C'GHashTableIter -> IO ()
p'g_hash_table_iter_next :: FunPtr (Ptr C'GHashTableIter -> C'gpointer -> C'gpointer -> IO C'gboolean)
c'g_hash_table_iter_steal :: Ptr C'GHashTableIter -> IO ()
p'g_hash_table_iter_get_hash_table :: FunPtr (Ptr C'GHashTableIter -> IO (Ptr C'GHashTable))
p'g_hash_table_iter_remove :: FunPtr (Ptr C'GHashTableIter -> IO ())
p'g_hash_table_iter_steal :: FunPtr (Ptr C'GHashTableIter -> IO ())
c'g_direct_equal :: C'gconstpointer -> C'gconstpointer -> IO C'gboolean
c'g_direct_hash :: C'gconstpointer -> IO C'guint
c'g_int_equal :: C'gconstpointer -> C'gconstpointer -> IO C'gboolean
p'g_direct_equal :: FunPtr (C'gconstpointer -> C'gconstpointer -> IO C'gboolean)
c'g_int_hash :: C'gconstpointer -> IO C'guint
p'g_direct_hash :: FunPtr (C'gconstpointer -> IO C'guint)
c'g_int64_equal :: C'gconstpointer -> C'gconstpointer -> IO C'gboolean
p'g_int_equal :: FunPtr (C'gconstpointer -> C'gconstpointer -> IO C'gboolean)
c'g_int64_hash :: C'gconstpointer -> IO C'guint
p'g_int_hash :: FunPtr (C'gconstpointer -> IO C'guint)
c'g_double_equal :: C'gconstpointer -> C'gconstpointer -> IO C'gboolean
p'g_int64_equal :: FunPtr (C'gconstpointer -> C'gconstpointer -> IO C'gboolean)
c'g_double_hash :: C'gconstpointer -> IO C'guint
p'g_int64_hash :: FunPtr (C'gconstpointer -> IO C'guint)
c'g_str_equal :: C'gconstpointer -> C'gconstpointer -> IO C'gboolean
p'g_double_equal :: FunPtr (C'gconstpointer -> C'gconstpointer -> IO C'gboolean)
c'g_str_hash :: C'gconstpointer -> IO C'guint
p'g_double_hash :: FunPtr (C'gconstpointer -> IO C'guint)
p'g_str_equal :: FunPtr (C'gconstpointer -> C'gconstpointer -> IO C'gboolean)
p'g_str_hash :: FunPtr (C'gconstpointer -> IO C'guint)
instance Eq C'GHashTableIter
instance Show C'GHashTableIter
instance Storable C'GHashTableIter


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Memory-Slices.html</a>
module Bindings.GLib.DataTypes.MemorySlices
c'g_slice_alloc :: C'gsize -> IO C'gpointer
c'g_slice_alloc0 :: C'gsize -> IO C'gpointer
p'g_slice_alloc :: FunPtr (C'gsize -> IO C'gpointer)
c'g_slice_copy :: C'gsize -> C'gconstpointer -> IO C'gpointer
c'g_slice_free1 :: C'gsize -> C'gpointer -> IO ()
p'g_slice_alloc0 :: FunPtr (C'gsize -> IO C'gpointer)
c'g_slice_free_chain_with_offset :: C'gsize -> C'gpointer -> C'gsize -> IO ()
p'g_slice_copy :: FunPtr (C'gsize -> C'gconstpointer -> IO C'gpointer)
p'g_slice_free1 :: FunPtr (C'gsize -> C'gpointer -> IO ())
p'g_slice_free_chain_with_offset :: FunPtr (C'gsize -> C'gpointer -> C'gsize -> IO ())


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-N-ary-Trees.html</a>
module Bindings.GLib.DataTypes.NAryTrees
data C'GNode
C'GNode :: C'gpointer -> Ptr C'GNode -> Ptr C'GNode -> Ptr C'GNode -> Ptr C'GNode -> C'GNode
c'GNode'data :: C'GNode -> C'gpointer
c'GNode'next :: C'GNode -> Ptr C'GNode
c'GNode'prev :: C'GNode -> Ptr C'GNode
c'GNode'parent :: C'GNode -> Ptr C'GNode
c'GNode'children :: C'GNode -> Ptr C'GNode
c'g_node_new :: C'gpointer -> IO (Ptr C'GNode)
c'g_node_copy :: Ptr C'GNode -> IO (Ptr C'GNode)
p'g_node_new :: FunPtr (C'gpointer -> IO (Ptr C'GNode))
type C'GCopyFunc = FunPtr (C'gconstpointer -> C'gpointer -> IO C'gpointer)
p'g_node_copy :: FunPtr (Ptr C'GNode -> IO (Ptr C'GNode))
mk'GCopyFunc :: (C'gconstpointer -> C'gpointer -> IO C'gpointer) -> IO C'GCopyFunc
c'g_node_copy_deep :: Ptr C'GNode -> C'GCopyFunc -> C'gpointer -> IO (Ptr C'GNode)
mK'GCopyFunc :: C'GCopyFunc -> (C'gconstpointer -> C'gpointer -> IO C'gpointer)
c'g_node_insert :: Ptr C'GNode -> C'gint -> Ptr C'GNode -> IO (Ptr C'GNode)
p'g_node_copy_deep :: FunPtr (Ptr C'GNode -> C'GCopyFunc -> C'gpointer -> IO (Ptr C'GNode))
c'g_node_insert_before :: Ptr C'GNode -> Ptr C'GNode -> Ptr C'GNode -> IO (Ptr C'GNode)
c'g_node_insert_after :: Ptr C'GNode -> Ptr C'GNode -> Ptr C'GNode -> IO (Ptr C'GNode)
p'g_node_insert :: FunPtr (Ptr C'GNode -> C'gint -> Ptr C'GNode -> IO (Ptr C'GNode))
p'g_node_insert_before :: FunPtr (Ptr C'GNode -> Ptr C'GNode -> Ptr C'GNode -> IO (Ptr C'GNode))
c'g_node_append :: Ptr C'GNode -> Ptr C'GNode -> IO (Ptr C'GNode)
p'g_node_insert_after :: FunPtr (Ptr C'GNode -> Ptr C'GNode -> Ptr C'GNode -> IO (Ptr C'GNode))
c'g_node_prepend :: Ptr C'GNode -> Ptr C'GNode -> IO (Ptr C'GNode)
c'g_node_insert_data :: Ptr C'GNode -> C'gint -> C'gpointer -> IO (Ptr C'GNode)
p'g_node_prepend :: FunPtr (Ptr C'GNode -> Ptr C'GNode -> IO (Ptr C'GNode))
c'g_node_insert_data_before :: Ptr C'GNode -> Ptr C'GNode -> C'gpointer -> IO (Ptr C'GNode)
c'g_node_append_data :: Ptr C'GNode -> C'gpointer -> IO (Ptr C'GNode)
c'g_node_prepend_data :: Ptr C'GNode -> C'gpointer -> IO (Ptr C'GNode)
c'g_node_reverse_children :: Ptr C'GNode -> IO ()
c'g_node_traverse :: Ptr C'GNode -> C'GTraverseType -> C'GTraverseFlags -> C'gint -> C'GNodeTraverseFunc -> C'gpointer -> IO ()
p'g_node_reverse_children :: FunPtr (Ptr C'GNode -> IO ())
type C'GTraverseFlags = CUInt
p'g_node_traverse :: FunPtr (Ptr C'GNode -> C'GTraverseType -> C'GTraverseFlags -> C'gint -> C'GNodeTraverseFunc -> C'gpointer -> IO ())
c'G_TRAVERSE_LEAVES :: Num a => a
c'G_TRAVERSE_NON_LEAVES :: Num a => a
c'G_TRAVERSE_ALL :: Num a => a
c'G_TRAVERSE_MASK :: Num a => a
c'G_TRAVERSE_LEAFS :: Num a => a
c'G_TRAVERSE_NON_LEAFS :: Num a => a
type C'GNodeTraverseFunc = FunPtr (Ptr C'GNode -> C'gpointer -> IO C'gboolean)
mk'GNodeTraverseFunc :: (Ptr C'GNode -> C'gpointer -> IO C'gboolean) -> IO C'GNodeTraverseFunc
c'g_node_children_foreach :: Ptr C'GNode -> C'GTraverseFlags -> C'GNodeForeachFunc -> C'gpointer -> IO ()
mK'GNodeTraverseFunc :: C'GNodeTraverseFunc -> (Ptr C'GNode -> C'gpointer -> IO C'gboolean)
type C'GNodeForeachFunc = FunPtr (Ptr C'GNode -> C'gpointer -> IO ())
p'g_node_children_foreach :: FunPtr (Ptr C'GNode -> C'GTraverseFlags -> C'GNodeForeachFunc -> C'gpointer -> IO ())
mk'GNodeForeachFunc :: (Ptr C'GNode -> C'gpointer -> IO ()) -> IO C'GNodeForeachFunc
c'g_node_get_root :: Ptr C'GNode -> IO (Ptr C'GNode)
mK'GNodeForeachFunc :: C'GNodeForeachFunc -> (Ptr C'GNode -> C'gpointer -> IO ())
c'g_node_find :: Ptr C'GNode -> C'GTraverseType -> C'GTraverseFlags -> C'gpointer -> IO (Ptr C'GNode)
p'g_node_get_root :: FunPtr (Ptr C'GNode -> IO (Ptr C'GNode))
c'g_node_find_child :: Ptr C'GNode -> C'GTraverseFlags -> C'gpointer -> IO (Ptr C'GNode)
c'g_node_child_index :: Ptr C'GNode -> C'gpointer -> IO C'gint
p'g_node_find :: FunPtr (Ptr C'GNode -> C'GTraverseType -> C'GTraverseFlags -> C'gpointer -> IO (Ptr C'GNode))
c'g_node_child_position :: Ptr C'GNode -> Ptr C'GNode -> IO C'gint
p'g_node_find_child :: FunPtr (Ptr C'GNode -> C'GTraverseFlags -> C'gpointer -> IO (Ptr C'GNode))
p'g_node_child_index :: FunPtr (Ptr C'GNode -> C'gpointer -> IO C'gint)
c'g_node_first_child :: Ptr C'GNode -> IO (Ptr C'GNode)
p'g_node_child_position :: FunPtr (Ptr C'GNode -> Ptr C'GNode -> IO C'gint)
c'g_node_last_child :: Ptr C'GNode -> IO (Ptr C'GNode)
c'g_node_nth_child :: Ptr C'GNode -> C'guint -> IO (Ptr C'GNode)
c'g_node_first_sibling :: Ptr C'GNode -> IO (Ptr C'GNode)
p'g_node_last_child :: FunPtr (Ptr C'GNode -> IO (Ptr C'GNode))
p'g_node_nth_child :: FunPtr (Ptr C'GNode -> C'guint -> IO (Ptr C'GNode))
c'g_node_next_sibling :: Ptr C'GNode -> IO (Ptr C'GNode)
p'g_node_first_sibling :: FunPtr (Ptr C'GNode -> IO (Ptr C'GNode))
c'g_node_prev_sibling :: Ptr C'GNode -> IO (Ptr C'GNode)
c'g_node_last_sibling :: Ptr C'GNode -> IO (Ptr C'GNode)
c'G_NODE_IS_LEAF :: Ptr C'GNode -> IO C'gboolean
p'g_node_last_sibling :: FunPtr (Ptr C'GNode -> IO (Ptr C'GNode))
c'G_NODE_IS_ROOT :: Ptr C'GNode -> IO C'gboolean
c'g_node_depth :: Ptr C'GNode -> IO C'guint
c'g_node_n_nodes :: Ptr C'GNode -> C'GTraverseFlags -> IO C'guint
c'g_node_n_children :: Ptr C'GNode -> IO C'guint
p'g_node_depth :: FunPtr (Ptr C'GNode -> IO C'guint)
c'g_node_is_ancestor :: Ptr C'GNode -> Ptr C'GNode -> IO C'gboolean
p'g_node_n_nodes :: FunPtr (Ptr C'GNode -> C'GTraverseFlags -> IO C'guint)
c'g_node_max_height :: Ptr C'GNode -> IO C'guint
p'g_node_n_children :: FunPtr (Ptr C'GNode -> IO C'guint)
p'g_node_is_ancestor :: FunPtr (Ptr C'GNode -> Ptr C'GNode -> IO C'gboolean)
c'g_node_unlink :: Ptr C'GNode -> IO ()
p'g_node_max_height :: FunPtr (Ptr C'GNode -> IO C'guint)
c'g_node_destroy :: Ptr C'GNode -> IO ()
p'g_node_unlink :: FunPtr (Ptr C'GNode -> IO ())
p'g_node_destroy :: FunPtr (Ptr C'GNode -> IO ())
instance Eq C'GNode
instance Show C'GNode
instance Storable C'GNode


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Pointer-Arrays.html</a>
module Bindings.GLib.DataTypes.PointerArrays
data C'GPtrArray
C'GPtrArray :: Ptr C'gpointer -> C'guint -> C'GPtrArray
c'GPtrArray'pdata :: C'GPtrArray -> Ptr C'gpointer
c'GPtrArray'len :: C'GPtrArray -> C'guint
c'g_ptr_array_new :: IO (Ptr C'GPtrArray)
c'g_ptr_array_sized_new :: C'guint -> IO (Ptr C'GPtrArray)
p'g_ptr_array_new :: FunPtr (IO (Ptr C'GPtrArray))
c'g_ptr_array_new_with_free_func :: C'GDestroyNotify -> IO (Ptr C'GPtrArray)
p'g_ptr_array_sized_new :: FunPtr (C'guint -> IO (Ptr C'GPtrArray))
c'g_ptr_array_set_free_func :: Ptr C'GPtrArray -> C'GDestroyNotify -> IO ()
c'g_ptr_array_ref :: Ptr C'GPtrArray -> IO (Ptr C'GPtrArray)
p'g_ptr_array_new_with_free_func :: FunPtr (C'GDestroyNotify -> IO (Ptr C'GPtrArray))
c'g_ptr_array_unref :: Ptr C'GPtrArray -> IO ()
p'g_ptr_array_set_free_func :: FunPtr (Ptr C'GPtrArray -> C'GDestroyNotify -> IO ())
c'g_ptr_array_add :: Ptr C'GPtrArray -> C'gpointer -> IO ()
p'g_ptr_array_ref :: FunPtr (Ptr C'GPtrArray -> IO (Ptr C'GPtrArray))
p'g_ptr_array_unref :: FunPtr (Ptr C'GPtrArray -> IO ())
c'g_ptr_array_remove :: Ptr C'GPtrArray -> C'gpointer -> IO C'gboolean
c'g_ptr_array_remove_index :: Ptr C'GPtrArray -> C'guint -> IO C'gpointer
p'g_ptr_array_add :: FunPtr (Ptr C'GPtrArray -> C'gpointer -> IO ())
c'g_ptr_array_remove_fast :: Ptr C'GPtrArray -> C'gpointer -> IO C'gboolean
p'g_ptr_array_remove :: FunPtr (Ptr C'GPtrArray -> C'gpointer -> IO C'gboolean)
c'g_ptr_array_remove_index_fast :: Ptr C'GPtrArray -> C'guint -> IO C'gpointer
p'g_ptr_array_remove_index :: FunPtr (Ptr C'GPtrArray -> C'guint -> IO C'gpointer)
c'g_ptr_array_remove_range :: Ptr C'GPtrArray -> C'guint -> C'guint -> IO ()
p'g_ptr_array_remove_fast :: FunPtr (Ptr C'GPtrArray -> C'gpointer -> IO C'gboolean)
c'g_ptr_array_sort :: Ptr C'GPtrArray -> C'GCompareFunc -> IO ()
p'g_ptr_array_remove_index_fast :: FunPtr (Ptr C'GPtrArray -> C'guint -> IO C'gpointer)
p'g_ptr_array_remove_range :: FunPtr (Ptr C'GPtrArray -> C'guint -> C'guint -> IO ())
c'g_ptr_array_sort_with_data :: Ptr C'GPtrArray -> C'GCompareDataFunc -> C'gpointer -> IO ()
c'g_ptr_array_set_size :: Ptr C'GPtrArray -> C'gint -> IO ()
p'g_ptr_array_sort :: FunPtr (Ptr C'GPtrArray -> C'GCompareFunc -> IO ())
p'g_ptr_array_sort_with_data :: FunPtr (Ptr C'GPtrArray -> C'GCompareDataFunc -> C'gpointer -> IO ())
c'g_ptr_array_index :: Ptr C'GPtrArray -> C'guint -> IO C'gpointer
p'g_ptr_array_set_size :: FunPtr (Ptr C'GPtrArray -> C'gint -> IO ())
c'g_ptr_array_free :: Ptr C'GPtrArray -> C'gboolean -> IO (Ptr C'gpointer)
c'g_ptr_array_foreach :: Ptr C'GPtrArray -> C'GFunc -> C'gpointer -> IO ()
p'g_ptr_array_free :: FunPtr (Ptr C'GPtrArray -> C'gboolean -> IO (Ptr C'gpointer))
p'g_ptr_array_foreach :: FunPtr (Ptr C'GPtrArray -> C'GFunc -> C'gpointer -> IO ())
instance Eq C'GPtrArray
instance Show C'GPtrArray
instance Storable C'GPtrArray


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Singly-Linked-Lists.html</a>
module Bindings.GLib.DataTypes.SinglyLinkedLists
data C'GSList
C'GSList :: C'gpointer -> Ptr C'GSList -> C'GSList
c'GSList'data :: C'GSList -> C'gpointer
c'GSList'next :: C'GSList -> Ptr C'GSList
c'g_slist_alloc :: IO (Ptr C'GSList)
c'g_slist_append :: Ptr C'GSList -> C'gpointer -> IO (Ptr C'GSList)
p'g_slist_alloc :: FunPtr (IO (Ptr C'GSList))
c'g_slist_prepend :: Ptr C'GSList -> C'gpointer -> IO (Ptr C'GSList)
p'g_slist_append :: FunPtr (Ptr C'GSList -> C'gpointer -> IO (Ptr C'GSList))
c'g_slist_insert :: Ptr C'GSList -> C'gpointer -> C'gint -> IO (Ptr C'GSList)
p'g_slist_prepend :: FunPtr (Ptr C'GSList -> C'gpointer -> IO (Ptr C'GSList))
c'g_slist_insert_before :: Ptr C'GSList -> Ptr C'GSList -> C'gpointer -> IO (Ptr C'GSList)
c'g_slist_insert_sorted :: Ptr C'GSList -> C'gpointer -> C'GCompareFunc -> IO (Ptr C'GSList)
p'g_slist_insert :: FunPtr (Ptr C'GSList -> C'gpointer -> C'gint -> IO (Ptr C'GSList))
c'g_slist_remove :: Ptr C'GSList -> C'gconstpointer -> IO (Ptr C'GSList)
p'g_slist_insert_before :: FunPtr (Ptr C'GSList -> Ptr C'GSList -> C'gpointer -> IO (Ptr C'GSList))
c'g_slist_remove_link :: Ptr C'GSList -> Ptr C'GSList -> IO (Ptr C'GSList)
p'g_slist_insert_sorted :: FunPtr (Ptr C'GSList -> C'gpointer -> C'GCompareFunc -> IO (Ptr C'GSList))
c'g_slist_delete_link :: Ptr C'GSList -> Ptr C'GSList -> IO (Ptr C'GSList)
p'g_slist_remove :: FunPtr (Ptr C'GSList -> C'gconstpointer -> IO (Ptr C'GSList))
c'g_slist_remove_all :: Ptr C'GSList -> C'gconstpointer -> IO (Ptr C'GSList)
p'g_slist_remove_link :: FunPtr (Ptr C'GSList -> Ptr C'GSList -> IO (Ptr C'GSList))
c'g_slist_free :: Ptr C'GSList -> IO ()
p'g_slist_delete_link :: FunPtr (Ptr C'GSList -> Ptr C'GSList -> IO (Ptr C'GSList))
c'g_slist_free_1 :: Ptr C'GSList -> IO ()
p'g_slist_remove_all :: FunPtr (Ptr C'GSList -> C'gconstpointer -> IO (Ptr C'GSList))
p'g_slist_free :: FunPtr (Ptr C'GSList -> IO ())
c'g_slist_free1 :: Ptr C'GSList -> IO ()
p'g_slist_free_1 :: FunPtr (Ptr C'GSList -> IO ())
c'g_slist_length :: Ptr C'GSList -> IO C'guint
c'g_slist_copy :: Ptr C'GSList -> IO (Ptr C'GSList)
c'g_slist_reverse :: Ptr C'GSList -> IO (Ptr C'GSList)
p'g_slist_length :: FunPtr (Ptr C'GSList -> IO C'guint)
p'g_slist_copy :: FunPtr (Ptr C'GSList -> IO (Ptr C'GSList))
c'g_slist_insert_sorted_with_data :: Ptr C'GSList -> C'gpointer -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GSList)
p'g_slist_reverse :: FunPtr (Ptr C'GSList -> IO (Ptr C'GSList))
c'g_slist_sort :: Ptr C'GSList -> C'GCompareFunc -> IO (Ptr C'GSList)
c'g_slist_sort_with_data :: Ptr C'GSList -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GSList)
p'g_slist_insert_sorted_with_data :: FunPtr (Ptr C'GSList -> C'gpointer -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GSList))
c'g_slist_concat :: Ptr C'GSList -> Ptr C'GSList -> IO (Ptr C'GSList)
p'g_slist_sort :: FunPtr (Ptr C'GSList -> C'GCompareFunc -> IO (Ptr C'GSList))
c'g_slist_foreach :: Ptr C'GSList -> C'GFunc -> C'gpointer -> IO ()
p'g_slist_sort_with_data :: FunPtr (Ptr C'GSList -> C'GCompareDataFunc -> C'gpointer -> IO (Ptr C'GSList))
c'g_slist_last :: Ptr C'GSList -> IO (Ptr C'GSList)
p'g_slist_concat :: FunPtr (Ptr C'GSList -> Ptr C'GSList -> IO (Ptr C'GSList))
p'g_slist_foreach :: FunPtr (Ptr C'GSList -> C'GFunc -> C'gpointer -> IO ())
c'g_slist_next :: Ptr C'GSList -> IO (Ptr C'GSList)
p'g_slist_last :: FunPtr (Ptr C'GSList -> IO (Ptr C'GSList))
c'g_slist_nth :: Ptr C'GSList -> C'guint -> IO (Ptr C'GSList)
c'g_slist_nth_data :: Ptr C'GSList -> C'guint -> IO C'gpointer
c'g_slist_find :: Ptr C'GSList -> C'gconstpointer -> IO (Ptr C'GSList)
p'g_slist_nth :: FunPtr (Ptr C'GSList -> C'guint -> IO (Ptr C'GSList))
p'g_slist_nth_data :: FunPtr (Ptr C'GSList -> C'guint -> IO C'gpointer)
c'g_slist_find_custom :: Ptr C'GSList -> C'gconstpointer -> C'GCompareFunc -> IO (Ptr C'GSList)
c'g_slist_position :: Ptr C'GSList -> Ptr C'GSList -> IO C'gint
p'g_slist_find :: FunPtr (Ptr C'GSList -> C'gconstpointer -> IO (Ptr C'GSList))
c'g_slist_index :: Ptr C'GSList -> C'gconstpointer -> IO C'gint
p'g_slist_find_custom :: FunPtr (Ptr C'GSList -> C'gconstpointer -> C'GCompareFunc -> IO (Ptr C'GSList))
c'g_slist_push_allocator :: C'gpointer -> IO ()
p'g_slist_position :: FunPtr (Ptr C'GSList -> Ptr C'GSList -> IO C'gint)
c'g_slist_pop_allocator :: IO ()
p'g_slist_index :: FunPtr (Ptr C'GSList -> C'gconstpointer -> IO C'gint)
p'g_slist_push_allocator :: FunPtr (C'gpointer -> IO ())
p'g_slist_pop_allocator :: FunPtr (IO ())
instance Eq C'GSList
instance Show C'GSList
instance Storable C'GSList


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-String-Chunks.html</a>
module Bindings.GLib.DataTypes.StringChunks
data C'GStringChunk
C'GStringChunk :: C'GStringChunk
c'g_string_chunk_new :: C'gsize -> IO (Ptr C'GStringChunk)
c'g_string_chunk_insert :: Ptr C'GStringChunk -> Ptr C'gchar -> IO (Ptr C'gchar)
p'g_string_chunk_new :: FunPtr (C'gsize -> IO (Ptr C'GStringChunk))
c'g_string_chunk_insert_const :: Ptr C'GStringChunk -> Ptr C'gchar -> IO (Ptr C'gchar)
p'g_string_chunk_insert :: FunPtr (Ptr C'GStringChunk -> Ptr C'gchar -> IO (Ptr C'gchar))
c'g_string_chunk_insert_len :: Ptr C'GStringChunk -> Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar)
c'g_string_chunk_clear :: Ptr C'GStringChunk -> IO ()
p'g_string_chunk_insert_const :: FunPtr (Ptr C'GStringChunk -> Ptr C'gchar -> IO (Ptr C'gchar))
c'g_string_chunk_free :: Ptr C'GStringChunk -> IO ()
p'g_string_chunk_insert_len :: FunPtr (Ptr C'GStringChunk -> Ptr C'gchar -> C'gssize -> IO (Ptr C'gchar))
p'g_string_chunk_clear :: FunPtr (Ptr C'GStringChunk -> IO ())
p'g_string_chunk_free :: FunPtr (Ptr C'GStringChunk -> IO ())


-- | 
--   <a>http://library.gnome.org/devel/glib/stable/glib-Trash-Stacks.html</a>
module Bindings.GLib.DataTypes.TrashStacks
data C'GTrashStack
C'GTrashStack :: Ptr C'GTrashStack -> C'GTrashStack
c'GTrashStack'next :: C'GTrashStack -> Ptr C'GTrashStack
c'g_trash_stack_push :: Ptr (Ptr C'GTrashStack) -> C'gpointer -> IO ()
c'g_trash_stack_pop :: Ptr (Ptr C'GTrashStack) -> IO C'gpointer
c'g_trash_stack_peek :: Ptr (Ptr C'GTrashStack) -> IO C'gpointer
p'g_trash_stack_push :: FunPtr (Ptr (Ptr C'GTrashStack) -> C'gpointer -> IO ())
c'g_trash_stack_height :: Ptr (Ptr C'GTrashStack) -> IO C'guint
p'g_trash_stack_pop :: FunPtr (Ptr (Ptr C'GTrashStack) -> IO C'gpointer)
p'g_trash_stack_peek :: FunPtr (Ptr (Ptr C'GTrashStack) -> IO C'gpointer)
p'g_trash_stack_height :: FunPtr (Ptr (Ptr C'GTrashStack) -> IO C'guint)
instance Eq C'GTrashStack
instance Show C'GTrashStack
instance Storable C'GTrashStack


-- | <a>http://library.gnome.org/devel/glib/stable/glib-data-types.html</a>
module Bindings.GLib.DataTypes


-- | <a>http://library.gnome.org/devel/glib/stable/glib-core.html</a>
module Bindings.GLib.CoreApplicationSupport

module Bindings.GLib
