-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | authenticate support for apiary web framework.
--   
@package apiary-authenticate
@version 1.4.0

module Web.Apiary.Authenticate
data Auth
data AuthConfig
AuthConfig :: ByteString -> Text -> [Text] -> [Text] -> [Text] -> [(Text, Provider)] -> AuthConfig
authSuccessPage :: AuthConfig -> ByteString
authUrl :: AuthConfig -> Text
authPrefix :: AuthConfig -> [Text]
authReturnToPath :: AuthConfig -> [Text]
authLogoutPath :: AuthConfig -> [Text]
providers :: AuthConfig -> [(Text, Provider)]
data Provider
Provider :: Text -> Maybe Text -> [(Text, Text)] -> Provider
providerUrl :: Provider -> Text
realm :: Provider -> Maybe Text
parameters :: Provider -> [(Text, Text)]
data OpenId_ a
OpenId_ :: a -> [(a, a)] -> Maybe a -> OpenId_ a
opLocal :: OpenId_ a -> a
params :: OpenId_ a -> [(a, a)]
claimed :: OpenId_ a -> Maybe a
type OpenId = OpenId_ Text
pOpenId :: Proxy OpenId
initAuth :: (Has (Session OpenId m) exts, MonadBaseControl IO m) => AuthConfig -> Initializer m exts (Auth : exts)
initAuthWith :: (Has (Session OpenId m) exts, MonadBaseControl IO m) => ManagerSettings -> AuthConfig -> Initializer m exts (Auth : exts)
initAuthWithManager :: (Has (Session OpenId m) exts, MonadBaseControl IO m) => Manager -> AuthConfig -> Initializer m exts (Auth : exts)

-- | default auth handlers. since 0.8.0.0.
authHandler :: (Monad m, MonadIO actM, Has Auth exts, Has (Session OpenId actM) exts) => ApiaryT exts prms actM m ()

-- | filter which check whether logged in or not, and get id. since
--   0.7.0.0.
authorized :: (Has (Session OpenId actM) exts, Monad actM, "auth" </ kvs) => Filter exts actM m kvs (("auth" := OpenId) : kvs)
authorized' :: (Has (Session OpenId actM) exts, KnownSymbol key, Monad actM, key </ kvs) => proxy key -> Filter exts actM m kvs ((key := OpenId) : kvs)

-- | delete session. since 0.7.0.0.
authLogout :: (Has (Session OpenId m) exts, Monad m) => ActionT exts prms m ()
authConfig :: (Has Auth exts, Monad m) => ActionT exts prms m AuthConfig
authProviders :: (Has Auth exts, Monad m) => ActionT exts prms m [(Text, Provider)]

-- | get authenticate routes: (title, route). since 0.7.0.0.
authRoutes :: (Has Auth exts, Monad m) => ActionT exts prms m [(Text, ByteString)]
