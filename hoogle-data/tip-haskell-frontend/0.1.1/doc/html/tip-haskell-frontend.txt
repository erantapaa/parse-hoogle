-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convert from Haskell to Tip
--   
@package tip-haskell-frontend
@version 0.1.1


-- | The Haskell frontend to Tip
module Tip.HaskellFrontend

-- | Transforms a Haskell file to a Tip Theory, crashing if unsuccessful
readHaskellFile :: Params -> IO (Theory Id)

-- | A representation of identifiers that come from GHC.
--   
--   The <a>PrettyVar</a> instance is one way to print the names.
data Id
GHCOrigin :: Name -> Id
LiftedFrom :: Id -> Id -> Id
Eta :: Int -> Id
Discrim :: Id -> Id
Project :: Id -> Int -> Id
Error :: Id

-- | Parameters
data Params
Params :: FilePath -> [FilePath] -> [DebugFlags] -> [String] -> [String] -> Params

-- | File to process
file :: Params -> FilePath

-- | Directories to include
include :: Params -> [FilePath]

-- | Debugging flags
flags :: Params -> [DebugFlags]

-- | Only consider these properties
only :: Params -> [String]

-- | Also translate these functions and its transitive dependencies
extra :: Params -> [String]

-- | Default parameters, given the name of the file to process
defaultParams :: FilePath -> Params

-- | Debugging flags
data DebugFlags
PrintCore :: DebugFlags
PrintProps :: DebugFlags
PrintExtraIds :: DebugFlags
PrintInitialTip :: DebugFlags


-- | The language properties are expressed in in the Haskell source
module Tip

-- | The property data type
data Equality a
data (:=>:) a b
data And a b
data Or a b
data Neg a
data Forall a b
data Exists a b

-- | Equality
(===) :: a -> a -> Equality a

-- | Inequality
(=/=) :: a -> a -> Neg (Equality a)

-- | A synonym for <a>===</a>, but for booleans
bool :: Bool -> Equality Bool

-- | Implication
(==>) :: a -> b -> a :=>: b

-- | Conjunction
(.&&.) :: a -> b -> And a b

-- | Disjunction
(.||.) :: a -> b -> Or a b

-- | Negation
neg :: a -> Neg a

-- | Universal quantification
forAll :: (a -> b) -> Forall a b

-- | Existential quantification
exists :: (a -> b) -> Exists a b
instance (Arbitrary a, Show a, Testable b) => Testable (Forall a b)
instance (Testable a, Testable b) => Testable (Or a b)
instance (Testable a, Testable b) => Testable (And a b)
instance (Eq a, Show a, Testable b) => Testable (Equality a :=>: b)
instance Testable (Neg Bool)
instance Testable b => Testable (Neg Bool :=>: b)
instance Testable b => Testable (Bool :=>: b)
instance (Eq a, Show a) => Testable (Equality a)
