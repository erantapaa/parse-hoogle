-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Fuzzy logic library with support for T1, IT2, GT2.
--   
@package huzzy
@version 0.1.5.5

module Huzzy.Base.Sets

-- | Type representing type-1 membership functions.
newtype MF a
MF :: (a -> Double) -> MF a

-- | Standard operations on fuzzy sets. Instantiated for each kind of fuzzy
--   set. If you want to overload with a t-norm, instantiate against a
--   newtype or instantiated set.
class Fuzzy a
(?&&) :: Fuzzy a => a -> a -> a
(?||) :: Fuzzy a => a -> a -> a
fnot :: Fuzzy a => a -> a

-- | Specifically for fuzzy sets, as opposed to fuzzy values. Support is
--   all elements of domain for which membership is non-zero. Hedge is a
--   modifier of fuzzy sets. <a>is</a> is for application of a value to a
--   fuzzy set.
class FSet a where type family Value a type family Support a type family Returned a
support :: FSet a => a -> Support a
hedge :: FSet a => Double -> a -> a
is :: FSet a => Value a -> a -> Returned a

-- | Produces the dual t-conorm from a t-norm
tCo :: (Num a, Fuzzy a) => FuzOp a -> a -> a -> a

-- | Standard t-norm used for intersection.
tGodel :: (Fuzzy a, Ord a) => FuzOp a
tProd :: (Fuzzy a, Num a) => FuzOp a
tLuk :: (Fuzzy a, Num a, Ord a) => FuzOp a
tDras :: (Fuzzy a, Eq a, Num a) => FuzOp a
tNilMin :: (Fuzzy a, Eq a, Num a, Ord a) => FuzOp a
tHam :: (Fuzzy a, Eq a, Num a, Fractional a) => FuzOp a

-- | Ensure that input list is correctly ordered for desired performance.
--   I.e. if desired property is that for a u with 2 values of z, max is
--   chosen, order descending on right value of tuple.
discrete :: Eq a => [(a, Double)] -> MF a

-- | Used for type-2 defuzzification.
singleton :: Double -> MF a
tri :: Double -> Double -> Double -> MF Double
trap :: Double -> Double -> Double -> Double -> MF Double
bell :: Double -> Double -> Double -> MF Double
gaus :: Double -> Double -> MF Double
up :: Double -> Double -> MF Double
down :: Double -> Double -> MF Double
sig :: Double -> Double -> MF Double
instance Num (MF a)
instance (Fuzzy a, Fuzzy b) => Fuzzy (a, b)
instance Fuzzy (MF a)
instance Fuzzy b => Fuzzy (a -> b)
instance Fuzzy Double

module Huzzy.Base.Systems

-- | Allows overloading of functions used in rule definition.
class Fuzzy a => FRule a where type family Antecedent a
(=*>) :: FRule a => Antecedent a -> a -> a
(=|>) :: FRule a => Antecedent a -> a -> a
weight :: FRule a => a -> Double -> a

-- | Overloaded defuzzification functions.
class FRule a => Defuzzifier a where type family Result a
centroid :: Defuzzifier a => a -> Result a
instance FRule (MF a)
instance FRule b => FRule (a -> b)
instance FRule Double

module Huzzy.TypeOne.Sets

-- | Type-1 fuzzy sets, with associated membership function and domain. Use
--   smart constructors to create.
data T1Set a

-- | Standard operations on fuzzy sets. Instantiated for each kind of fuzzy
--   set. If you want to overload with a t-norm, instantiate against a
--   newtype or instantiated set.
class Fuzzy a
(?&&) :: Fuzzy a => a -> a -> a
(?||) :: Fuzzy a => a -> a -> a
fnot :: Fuzzy a => a -> a

-- | Specifically for fuzzy sets, as opposed to fuzzy values. Support is
--   all elements of domain for which membership is non-zero. Hedge is a
--   modifier of fuzzy sets. <a>is</a> is for application of a value to a
--   fuzzy set.
class FSet a where type family Value a type family Support a type family Returned a
support :: FSet a => a -> Support a
hedge :: FSet a => Double -> a -> a
is :: FSet a => Value a -> a -> Returned a

-- | Smart constructor for continuous membership functions. Warning, fine
--   resolutions will make this a very slow construction.
contT1 :: (Num a, Enum a) => a -> a -> a -> MF a -> T1Set a

-- | Smart constructor for discrete continuous membership functions. Avoid
--   large domains.
discT1 :: [a] -> MF a -> T1Set a

-- | Only use this if you're sure your membership functions are safe, or
--   your domain is huge.
unsafeMkT1 :: [a] -> MF a -> T1Set a

-- | Cuts a type-1 fuzzy set at a given degree of membership.
alpha :: Double -> T1Set a -> [a]

-- | Performs a cut and then finds the x values on the curve at point of
--   cut.
findCuts :: Ord a => T1Set a -> Double -> (a, a)
instance Num (T1Set a)
instance FSet (T1Set a)
instance Fuzzy (T1Set a)

module Huzzy.TypeOne.Systems

-- | Allows overloading of functions used in rule definition.
class Fuzzy a => FRule a where type family Antecedent a
(=*>) :: FRule a => Antecedent a -> a -> a
(=|>) :: FRule a => Antecedent a -> a -> a
weight :: FRule a => a -> Double -> a

-- | Overloaded defuzzification functions.
class FRule a => Defuzzifier a where type family Result a
centroid :: Defuzzifier a => a -> Result a
instance Defuzzifier (T1Set Double)
instance FRule (T1Set a)

module Huzzy.TypeTwo.Interval.Sets

-- | Interval Type-2 Fuzzy sets. Defined entirely by the footprint of
--   uncertainty, lmf and umf are the bounds of this area.
data IT2Set a

-- | Standard operations on fuzzy sets. Instantiated for each kind of fuzzy
--   set. If you want to overload with a t-norm, instantiate against a
--   newtype or instantiated set.
class Fuzzy a
(?&&) :: Fuzzy a => a -> a -> a
(?||) :: Fuzzy a => a -> a -> a
fnot :: Fuzzy a => a -> a

-- | Specifically for fuzzy sets, as opposed to fuzzy values. Support is
--   all elements of domain for which membership is non-zero. Hedge is a
--   modifier of fuzzy sets. <a>is</a> is for application of a value to a
--   fuzzy set.
class FSet a where type family Value a type family Support a type family Returned a
support :: FSet a => a -> Support a
hedge :: FSet a => Double -> a -> a
is :: FSet a => Value a -> a -> Returned a

-- | Smart constructor for continuos interval type-2 membership functions.
--   Watch that resolution!
contIT2 :: (Num a, Enum a) => a -> a -> a -> MF a -> MF a -> IT2Set a

-- | Smart constructor for discrete interval type-2 membership functions.
--   Be wary of domain size.
discIT2 :: [a] -> MF a -> MF a -> IT2Set a

-- | Only use this if you trust your functions or have no other recourse.
unsafeMkIT2 :: [a] -> MF a -> MF a -> IT2Set a

-- | Used in zSlices type-2 defuzzification
cylExt :: Double -> Double -> IT2Set a
instance FSet (IT2Set a)
instance Fuzzy (IT2Set a)

module Huzzy.TypeTwo.ZSlices.Sets

-- | A zSlices based type-2 set requires the number of z levels, and a list
--   of zslices.
data T2ZSet a

-- | Standard operations on fuzzy sets. Instantiated for each kind of fuzzy
--   set. If you want to overload with a t-norm, instantiate against a
--   newtype or instantiated set.
class Fuzzy a
(?&&) :: Fuzzy a => a -> a -> a
(?||) :: Fuzzy a => a -> a -> a
fnot :: Fuzzy a => a -> a

-- | Specifically for fuzzy sets, as opposed to fuzzy values. Support is
--   all elements of domain for which membership is non-zero. Hedge is a
--   modifier of fuzzy sets. <a>is</a> is for application of a value to a
--   fuzzy set.
class FSet a where type family Value a type family Support a type family Returned a
support :: FSet a => a -> Support a
hedge :: FSet a => Double -> a -> a
is :: FSet a => Value a -> a -> Returned a

-- | Smart constructor for continuous type-2 fuzzy membership functions.
--   Works only on the base interval set, make sure you trust your zSlices.
contZT2 :: (Enum a, Num a) => a -> a -> a -> [IT2Set a] -> T2ZSet a

-- | Smart constructor for discrete type-2 fuzzy membership functions.
--   Works only on the base interval set, make sure you trust your zSlices.
discZT2 :: [a] -> [IT2Set a] -> T2ZSet a

-- | Unsafe constructor, only use if you trust your membership functions or
--   domain is very large.
unsafeZT2 :: [a] -> [IT2Set a] -> T2ZSet a

-- | Used in defuzzification.
cylExtT2 :: T1Set Double -> Int -> T2ZSet Double

-- | Constructor for triangular type-2 fuzzy set. Arguements are pairs of
--   points for defining a base Interval type-2 fuzzy set. The left element
--   of each pair is for the lower membership function, The right element
--   is for the upper membership function, Order is: left corner, peak,
--   right corner. Int is number of zSlices desired, the level of
--   discretisation.
mkT2Tri :: (Double, Double) -> (Double, Double) -> (Double, Double) -> Int -> T2ZSet Double
zLevelAxis :: Int -> [Double]
instance FSet (T2ZSet a)
instance Fuzzy (T2ZSet a)

module Huzzy.TypeTwo.Interval.Systems

-- | Allows overloading of functions used in rule definition.
class Fuzzy a => FRule a where type family Antecedent a
(=*>) :: FRule a => Antecedent a -> a -> a
(=|>) :: FRule a => Antecedent a -> a -> a
weight :: FRule a => a -> Double -> a

-- | Overloaded defuzzification functions.
class FRule a => Defuzzifier a where type family Result a
centroid :: Defuzzifier a => a -> Result a

-- | Karnik-Mendel algorithm. Currently needs a big overhaul.
km :: IT2Set Double -> (Double, Double, Int, Int)
instance Defuzzifier (IT2Set Double)
instance FRule (IT2Set a)

module Huzzy.TypeTwo.ZSlices.Systems

-- | Allows overloading of functions used in rule definition.
class Fuzzy a => FRule a where type family Antecedent a
(=*>) :: FRule a => Antecedent a -> a -> a
(=|>) :: FRule a => Antecedent a -> a -> a
weight :: FRule a => a -> Double -> a

-- | Overloaded defuzzification functions.
class FRule a => Defuzzifier a where type family Result a
centroid :: Defuzzifier a => a -> Result a
instance Defuzzifier (T2ZSet Double)
instance FRule (T2ZSet Double)
