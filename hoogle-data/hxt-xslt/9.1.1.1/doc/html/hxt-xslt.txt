-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The XSLT modules for HXT.
--   
@package hxt-xslt
@version 9.1.1.1


-- | Common imports and functions for HXSLT
module Text.XML.HXT.XSLT.Common
filterTree :: Tree t => (a -> Bool) -> t a -> Maybe (t a)
mapTreeCtx :: Tree t => (c -> a -> (c, b)) -> c -> t a -> t b
filterTreeCtx :: Tree t => (c -> a -> (c, Bool)) -> c -> t a -> Maybe (t a)
zipTreeWith :: Tree t => (a -> b -> c) -> t a -> t b -> t c
zipTree :: Tree t => t a -> t b -> t (a, b)
unzipTree :: Functor t => t (a, b) -> (t a, t b)
showTrees :: [XmlTree] -> String
isElemType :: XmlNode n => QName -> n -> Bool
isAttrType :: XmlNode n => QName -> n -> Bool
isWhitespaceNode :: XmlNode n => n -> Bool
collectTextnodes :: [XmlTree] -> String
tryFetchAttribute :: XmlNode n => n -> QName -> Maybe String
fetchAttributeWDefault :: XmlNode n => n -> QName -> String -> String
fetchAttribute :: XmlNode n => n -> QName -> String
hasAttribute :: XmlNode n => n -> QName -> Bool
setAttribute :: XmlNode n => QName -> String -> n -> n
data ExName
ExName :: String -> String -> ExName
mkExName :: QName -> ExName
exLocal :: ExName -> String
exUri :: ExName -> String
parseExName :: UriMapping -> String -> ExName
type UriMapping = Map String String
getUriMap :: XmlNode n => n -> UriMapping
setUriMap :: XmlNode n => UriMapping -> n -> n
uriMap2Attrs :: UriMapping -> [XmlTree]
expandNSDecls :: XmlTree -> XmlTree
lookupPrefix :: UriMapping -> String -> String
isNsAttr :: XmlTree -> Bool
mkLiteralExpr :: String -> Expr
mkStringExpr :: Expr -> Expr
mkBoolExpr :: Expr -> Expr
mkTrueExpr :: Expr
concatExpr :: [Expr] -> Expr
splitExpr :: Expr -> [Expr]
unionExpr :: [Expr] -> Expr
splitMatchByPrio :: Expr -> [(Float, Expr)]
computePriority :: Expr -> Float
computeNTestPriority :: NodeTest -> Float
isMatchExpr :: Expr -> Bool
fromJustErr :: String -> Maybe a -> a
readWDefault :: Read a => a -> String -> a
instance Show ExName
instance Eq ExName
instance Ord ExName


-- | Names and constants for HXSLT
module Text.XML.HXT.XSLT.Names
xsltPrefix :: String
xsltUri :: String
mkXsltName :: String -> QName
mkXsltAttribName :: String -> QName
xsltTransform :: QName
xsltNamespaceAlias :: QName
xsltPreserveSpace :: QName
xsltStripSpace :: QName
xsltSort :: QName
xsltCopyOf :: QName
xsltCopy :: QName
xsltAttributeSet :: QName
xsltWithParam :: QName
xsltParam :: QName
xsltVariable :: QName
xsltCallTemplate :: QName
xsltApplyImports :: QName
xsltApplyTemplates :: QName
xsltTemplate :: QName
xsltImport :: QName
xsltInclude :: QName
xsltProcInstr :: QName
xsltComment :: QName
xsltValueOf :: QName
xsltText :: QName
xsltAttribute :: QName
xsltElement :: QName
xsltIf :: QName
xsltOtherwise :: QName
xsltWhen :: QName
xsltChoose :: QName
xsltForEach :: QName
xsltMessage :: QName
xsltStylesheet :: QName
xsltTerminate :: QName
xsltExtensionElementPrefixes :: QName
xsltExlcudeResultPrefixes :: QName
xsltVersion :: QName
xsltResultPrefix :: QName
xsltStylesheetPrefix :: QName
xsltElements :: QName
xsltOrder :: QName
xsltDataType :: QName
xsltMode :: QName
xsltPriority :: QName
xsltMatch :: QName
xsltHRef :: QName
xsltUseAttributeSets :: QName
xsltNamespace :: QName
xsltName :: QName
xsltTest :: QName
xsltSelect :: QName
xsltUseAttributeSetsLRE :: QName
xsltExtensionElementPrefixesLRE :: QName
xsltExlcudeResultPrefixesLRE :: QName
xsltVersionLRE :: QName
xmlSpace :: QName


-- | Types for compiled stylesheets
module Text.XML.HXT.XSLT.CompiledStylesheet
data CompiledStylesheet
CompStylesheet :: [MatchRule] -> (Map ExName NamedRule) -> (Map ExName Variable) -> (Map ExName [AttributeSet]) -> [Strips] -> NSAliasing -> CompiledStylesheet
getMatchRules :: CompiledStylesheet -> [MatchRule]
getNamedRules :: CompiledStylesheet -> (Map ExName NamedRule)
getVariables :: CompiledStylesheet -> (Map ExName Variable)
getAttributeSets :: CompiledStylesheet -> Map ExName [AttributeSet]
getStrips :: CompiledStylesheet -> [Strips]
getAliases :: CompiledStylesheet -> NSAliasing
data MatchRule
MatRule :: MatchExpr -> Float -> (Maybe ExName) -> [MatchRule] -> [Variable] -> Template -> MatchRule
getRulePrio :: MatchRule -> Float
getRuleMode :: MatchRule -> Maybe ExName
getRuleImports :: MatchRule -> [MatchRule]
data NamedRule
NamRule :: ExName -> [Variable] -> Template -> NamedRule
getRuleName :: NamedRule -> ExName
data Variable
MkVar :: Bool -> ExName -> (Either Expr Template) -> Variable
getVarName :: Variable -> ExName
isParam :: Variable -> Bool
newtype UsedAttribSets
UsedAttribSets :: [ExName] -> UsedAttribSets
data AttributeSet
AttribSet :: ExName -> UsedAttribSets -> Template -> AttributeSet
type NTest = ExName
parseNTest :: UriMapping -> String -> NTest
type Strips = Map NTest Bool
lookupStrip :: ExName -> [Strips] -> Bool
lookupStrip1 :: ExName -> Strips -> Maybe Bool
feedSpaces :: Bool -> [NTest] -> Strips -> Strips
feedStrips :: [NTest] -> Strips -> Strips
feedPreserves :: [NTest] -> Strips -> Strips
stripDocument :: [Strips] -> XmlTree -> XmlTree
stripStylesheet :: XmlTree -> XmlTree
stripSpaces :: (Bool -> XNode -> Bool) -> Bool -> XmlTree -> XmlTree
type NSAliasing = Map String String
addAlias :: UriMapping -> String -> String -> NSAliasing -> NSAliasing
lookupAlias :: NSAliasing -> QName -> QName
aliasUriMapping :: NSAliasing -> UriMapping -> UriMapping
data Template
TemplComposite :: [Template] -> Template
TemplForEach :: SelectExpr -> [SortKey] -> Template -> Template
TemplChoose :: [When] -> Template
TemplMessage :: Bool -> Template -> Template
TemplElement :: ComputedQName -> UriMapping -> UsedAttribSets -> Template -> Template
TemplAttribute :: ComputedQName -> Template -> Template
TemplText :: String -> Template
TemplValueOf :: StringExpr -> Template
TemplComment :: Template -> Template
TemplProcInstr :: StringExpr -> Template -> Template
TemplApply :: (Maybe SelectExpr) -> (Maybe ExName) -> (Map ExName Variable) -> [SortKey] -> Template
TemplApplyImports :: Template
TemplVariable :: Variable -> Template
TemplCall :: ExName -> (Map ExName Variable) -> Template
TemplCopy :: UsedAttribSets -> Template -> Template
TemplCopyOf :: Expr -> Template
data SortKey
SortK :: StringExpr -> StringExpr -> StringExpr -> SortKey
data When
WhenPart :: TestExpr -> Template -> When
data ComputedQName
LiteralQName :: QName -> ComputedQName
CompQName :: UriMapping -> StringExpr -> StringExpr -> ComputedQName
newtype SelectExpr
SelectExpr :: Expr -> SelectExpr
newtype TestExpr
TestExpr :: Expr -> TestExpr
newtype StringExpr
StringExpr :: Expr -> StringExpr
newtype MatchExpr
MatchExpr :: Expr -> MatchExpr
instance Show UsedAttribSets
instance Show SelectExpr
instance Show TestExpr
instance Show StringExpr
instance Show ComputedQName
instance Show SortKey
instance Show Template
instance Show When
instance Show Variable
instance Show AttributeSet
instance Show NamedRule
instance Show MatchExpr
instance Show CompiledStylesheet
instance Show MatchRule


-- | The compilation functions for XSLT stylesheets
module Text.XML.HXT.XSLT.Compilation
prepareXSLTDocument :: XmlTree -> XmlTree
assembleStylesheet :: XmlTree -> [CompiledStylesheet] -> CompiledStylesheet


-- | The transformation functions for XSLT transformation of XML documents
--   
--   Exports only two pure functions <a>applyStylesheet</a> and
--   <a>applyStylesheetWParams</a>
module Text.XML.HXT.XSLT.Application
applyStylesheet :: CompiledStylesheet -> XmlTree -> [XmlTree]
applyStylesheetWParams :: XPathParams -> CompiledStylesheet -> XmlTree -> [XmlTree]
type XPathParams = Map ExName Expr


-- | The HXT arrow interface for the XSLT module
--   
--   The application programming interface to the arrow modules of the
--   Haskell XML Toolbox. This module exports all important arrows for
--   input, output, parsing, validating and transforming XML. It also
--   exports all basic datatypes and functions of the toolbox.
module Text.XML.HXT.XSLT.XsltArrows

-- | Compile a document representing an XSLT stylesheet into an internal
--   representation
--   
--   The internal representation is an abstract syntax tree for the XSLT
--   rules. XSLT imports and includes are evaluated and the rules are
--   normalized and prepared for easy application.
xsltCompileStylesheet :: IOSArrow XmlTree CompiledStylesheet

-- | A convinient function for combining reading a stylesheet and
--   compilation.
--   
--   Reading an XSLT stylesheet is always done without validation but with
--   namespace propagation. Comments are removed from the stylesheet.
xsltCompileStylesheetFromURI :: IOSArrow String CompiledStylesheet

-- | apply a compiled XSLT stylesheet to a whole document tree
--   
--   The compiled stylesheet must have been created with
--   <a>xsltCompileStylesheet</a> or <a>xsltCompileStylesheetFromURI</a>
xsltApplyStylesheet :: CompiledStylesheet -> IOSArrow XmlTree XmlTree

-- | apply an XSLT stylesheet given by an URI to a whole document tree
--   
--   The string parameter is the URI of the XSLT stylesheet. In case of an
--   error during stylesheet compilation or stylesheet application all
--   children of the root node are removed and the error status is set in
--   the attribute list of the root node of the input document.
xsltApplyStylesheetFromURI :: String -> IOSArrow XmlTree XmlTree
data CompiledStylesheet


-- | The HXT XSLT interface
--   
--   The application programming interface to the XSLT modules of the
--   Haskell XML Toolbox. This module exports all important arrows for XSLT
--   processing.
module Text.XML.HXT.XSLT
