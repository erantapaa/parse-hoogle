-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Send messages to a Handle concurrently without getting them mixed.
--   
@package post-mess-age
@version 0.1.0.0


-- | Mechanism to get messages sent to a <a>Handle</a> concurrently without
--   getting them mixed. They are sent to the handle in the same order they
--   are received by a <i>passer object</i> (see <a>Passer</a>), not
--   sending a message before the previous message is sent completely.
module Control.Concurrent.PostMessAge

-- | The <a>Passer</a> is the object that you send the messages to. It will
--   redirect this message to its attached <a>Handle</a>, making sure the
--   messages are not intercalated. Use <a>postMessage</a> to send message
--   to a passer object.
data Passer a

-- | Create a passer object from a <a>Handle</a> and a function to send
--   values to that handle.
createPasser :: Handle -> (Handle -> a -> IO ()) -> IO (Passer a)

-- | Close a passer object, so it won't receive any more messages in the
--   future. Once a passer object is closed, it can't be opened again. If
--   you want to reuse a handle, create another passer object with
--   <a>createPasser</a>.
closePasser :: Passer a -> IO ()

-- | Send a message to a passer object. It returns a value indicating if
--   the message reached the passer object.
postMessage :: Passer a -> a -> IO Bool

-- | Check if a passer object is closed. When a passer object is closed, it
--   won't send any more messages to its attached handle. This does not
--   mean the handle itself is closed.
isPasserClosed :: Passer a -> IO Bool

-- | Check if a passer object is open. While a passer object is open, all
--   the messages received by the passer are sent to its attached handle.
isPasserOpen :: Passer a -> IO Bool
