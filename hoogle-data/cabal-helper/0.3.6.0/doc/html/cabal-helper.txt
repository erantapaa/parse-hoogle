-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple interface to some of Cabal's configuration state used by ghc-mod
--   
@package cabal-helper
@version 0.3.6.0

module Distribution.Helper

-- | Paths or names of various programs we need.
data Programs
Programs :: FilePath -> FilePath -> FilePath -> Programs
cabalProgram :: Programs -> FilePath
ghcProgram :: Programs -> FilePath
ghcPkgProgram :: Programs -> FilePath

-- | Caches helper executable result so it doesn't have to be run more than
--   once as reading in Cabal's <tt>LocalBuildInfo</tt> datatype from disk
--   is very slow but running all possible queries against it at once is
--   cheap.
data Query m a

-- | <tt>runQuery query distdir</tt>. Run a <a>Query</a>. <tt>distdir</tt>
--   is where Cabal's <tt>setup-config</tt> file is located.
runQuery :: Monad m => FilePath -> Query m a -> m a
runQuery' :: Monad m => Programs -> FilePath -> Query m a -> m a

-- | Modules or files Cabal would have the compiler build directly. Can be
--   used to compute the home module closure for a component.
entrypoints :: MonadIO m => Query m [(ChComponentName, ChEntrypoint)]

-- | A component's <tt>source-dirs</tt> field, beware as if this is empty
--   implicit behaviour in GHC kicks in.
sourceDirs :: MonadIO m => Query m [(ChComponentName, [FilePath])]

-- | All options cabal would pass to GHC.
ghcOptions :: MonadIO m => Query m [(ChComponentName, [String])]

-- | Only search path related GHC options.
ghcSrcOptions :: MonadIO m => Query m [(ChComponentName, [String])]

-- | Only package related GHC options, sufficient for things don't need to
--   access any home modules.
ghcPkgOptions :: MonadIO m => Query m [(ChComponentName, [String])]

-- | Like <tt>ghcPkgOptions</tt> but for the whole package not just one
--   component
ghcMergedPkgOptions :: MonadIO m => Query m [String]

-- | Only language related options, i.e. <tt>-XSomeExtension</tt>
ghcLangOptions :: MonadIO m => Query m [(ChComponentName, [String])]
newtype ChModuleName
ChModuleName :: String -> ChModuleName
data ChComponentName
ChSetupHsName :: ChComponentName
ChLibName :: ChComponentName
ChExeName :: String -> ChComponentName
ChTestName :: String -> ChComponentName
ChBenchName :: String -> ChComponentName
data ChEntrypoint

-- | Almost like <a>ChExeEntrypoint</a> but <tt>main-is</tt> could either
--   be <tt>"Setup.hs"</tt> or <tt>"Setup.lhs"</tt>. Since we don't know
--   where the source directory is you have to find these files.
ChSetupEntrypoint :: ChEntrypoint
ChLibEntrypoint :: [ChModuleName] -> [ChModuleName] -> ChEntrypoint
chExposedModules :: ChEntrypoint -> [ChModuleName]
chOtherModules :: ChEntrypoint -> [ChModuleName]
ChExeEntrypoint :: FilePath -> [ChModuleName] -> ChEntrypoint
chMainIs :: ChEntrypoint -> FilePath
chOtherModules :: ChEntrypoint -> [ChModuleName]
buildPlatform :: IO String

-- | Run <tt>cabal configure</tt>
reconfigure :: MonadIO m => Programs -> [String] -> m ()

-- | Create <tt>cabal_macros.h</tt> and <tt>Paths_&lt;pkg&gt;</tt> possibly
--   other generated files in the usual place.
writeAutogenFiles :: MonadIO m => FilePath -> m ()

-- | This exception is thrown by all <a>runQuery</a> functions if the
--   internal wrapper executable cannot be found. You may catch this and
--   present the user an appropriate error message however the default is
--   to print <a>libexecNotFoundError</a>.
data LibexecNotFoundError
LibexecNotFoundError :: String -> FilePath -> LibexecNotFoundError
libexecNotFoundError :: String -> FilePath -> String -> String
instance Typeable Programs
instance Typeable LibexecNotFoundError
instance Eq Programs
instance Ord Programs
instance Show Programs
instance Read Programs
instance Generic Programs
instance Eq SomeLocalBuildInfo
instance Ord SomeLocalBuildInfo
instance Read SomeLocalBuildInfo
instance Show SomeLocalBuildInfo
instance Functor m => Functor (Query m)
instance (Monad m, Functor m) => Applicative (Query m)
instance Monad m => Monad (Query m)
instance MonadIO m => MonadIO (Query m)
instance Datatype D1Programs
instance Constructor C1_0Programs
instance Selector S1_0_0Programs
instance Selector S1_0_1Programs
instance Selector S1_0_2Programs
instance Show LibexecNotFoundError
instance Exception LibexecNotFoundError
instance Default Programs
