-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for Secure Multi-Execution in Haskell
--   
--   The library is based on the paper <i>Secure Multi-Execution in
--   Haskell</i> by Mauro Jaskelioff, and Alejandro Russo. In Proceedings
--   of Andrei Ershov International Conference on Perspectives of System
--   Informatics (PSI'11), Akademgorodok, Novosibirsk, Russia, June 27-July
--   1, 2011. LNCS, Springer-Verlag.
--   <a>http://www.cse.chalmers.se/~russo/publications_files/sme.pdf</a>
@package sme
@version 0.1


-- | This module should be ** only ** imported by trustworthy for:
--   
--   <ul>
--   <li>define the security levels of files and their default values</li>
--   <li>define a security lattice</li>
--   </ul>
module SME.Trustworthy

-- | Type class to encode security lattices.
class Eq a => Lattice a
meet :: Lattice a => a -> a -> Maybe a
join :: Lattice a => a -> a -> Maybe a

-- | Type class to encode finite security lattices.
class Lattice a => FiniteLattice a
universe :: FiniteLattice a => [a]
upset :: FiniteLattice a => a -> [a]

-- | Implementation of the order relationship between elements of the
--   lattice.
less :: Lattice a => a -> a -> Bool

-- | Implementation of the strict order relationship between security
--   levels of the lattice.
sless :: Lattice a => a -> a -> Bool

-- | Data type encoding two security levels.
data Level

-- | Security level to represent public (low) information.
L :: Level

-- | Security level to represent secret (high) information.
H :: Level

-- | Type class to specify security policies for programs run under secure
--   multi-execution.
class FiniteLattice l => Policy l a b | a -> l b
level :: Policy l a b => a -> l
defvalue :: Policy l a b => a -> b

-- | The multi-execution monad.
data ME a

-- | Data type to set the security lattice to be used by function
--   <a>sme</a>.
data SetLevel l
SetLevel :: SetLevel l

-- | Secure operation for reading files.
readFile :: FilePath -> ME String

-- | Secure operation for writing files.
writeFile :: FilePath -> String -> ME ()

-- | Function to perform secure multi-execution. The first argument is only
--   there for type-checking purposes.
sme :: Policy l FilePath String => SetLevel l -> ME a -> IO ()

-- | Function to perform secure multi-execution considering the two-point
--   security lattice encoded by <a>Level</a>.
sme' :: Policy Level FilePath String => ME a -> IO ()


-- | This module should be imported by untrustworthy code. Generally
--   speaking, untrustworhty code's import list should look like
--   
--   <pre>
--   import SME.Untrustworthy 
--   import MyLattice
--   </pre>
--   
--   where module <tt>MyLattice</tt> implements the security lattice under
--   consideration.
module SME.Untrustworthy

-- | Type class to encode security lattices.
class Eq a => Lattice a

-- | Type class to encode finite security lattices.
class Lattice a => FiniteLattice a

-- | Implementation of the order relationship between elements of the
--   lattice.
less :: Lattice a => a -> a -> Bool

-- | Implementation of the strict order relationship between security
--   levels of the lattice.
sless :: Lattice a => a -> a -> Bool

-- | Data type encoding two security levels.
data Level

-- | Type class to specify security policies for programs run under secure
--   multi-execution.
class FiniteLattice l => Policy l a b | a -> l b

-- | The multi-execution monad.
data ME a

-- | Data type to set the security lattice to be used by function
--   <a>sme</a>.
data SetLevel l
SetLevel :: SetLevel l

-- | Secure operation for reading files.
readFile :: FilePath -> ME String

-- | Secure operation for writing files.
writeFile :: FilePath -> String -> ME ()

-- | Function to perform secure multi-execution. The first argument is only
--   there for type-checking purposes.
sme :: Policy l FilePath String => SetLevel l -> ME a -> IO ()

-- | Function to perform secure multi-execution considering the two-point
--   security lattice encoded by <a>Level</a>.
sme' :: Policy Level FilePath String => ME a -> IO ()
