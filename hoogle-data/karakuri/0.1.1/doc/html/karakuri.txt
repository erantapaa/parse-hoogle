-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Good stateful automata
--   
@package karakuri
@version 0.1.1

module Data.Karakuri

-- | Karakuri means automaton in Japanese.
data Karakuri m a
Karakuri :: (s -> m s) -> (s -> a) -> s -> Karakuri m a
type Karakuri' = Karakuri Identity

-- | Run a <a>Karakuri</a>.
step :: Monad m => Karakuri m a -> m (Karakuri m a)
transKarakuri :: (forall s. m s -> n s) -> Karakuri m a -> Karakuri n a

-- | Create a <a>Karakuri</a> from the stateful action.
stateful :: Monad m => StateT s m () -> s -> Karakuri m s

-- | Create a <a>Karakuri</a> from the stateful action.
stateful' :: Monad m => State s () -> s -> Karakuri m s

-- | Create a <a>Karakuri</a> that performs the given action every time.
effective :: Monad m => a -> m a -> Karakuri m a
instance Monad m => ComonadApply (Karakuri m)
instance Comonad (Karakuri m)
instance Monad m => Applicative (Karakuri m)
instance Functor (Karakuri m)

module Control.Monad.Butai
data ButaiT m a
register :: (:!) (ButaiBase v0) m => Karakuri v0 r_a3Af -> m (Key r_a3Af)
look :: (:!) (ButaiBase v0) m => Key v1 -> m v1
updateAll :: (:!) (ButaiBase v0) m => m ()
newtype Key a
Kao :: Int -> Key a
transButaiT :: (Monad m, Monad n) => (forall x. m x -> n x) -> ButaiT m a -> ButaiT n a
runButaiT :: Monad m => ButaiT m a -> m a
instance Monad m => Monad (ButaiT m)
instance Monad m => Applicative (ButaiT m)
instance Monad m => Functor (ButaiT m)
instance MonadState s m => MonadState s (ButaiT m)
instance Monad m => ButaiBase (ButaiT m) :! ButaiT m
instance MonadTrans ButaiT
instance MonadIO m => MonadIO (ButaiT m)
