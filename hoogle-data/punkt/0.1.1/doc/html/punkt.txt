-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Multilingual unsupervised sentence tokenization with Punkt.
--   
@package punkt
@version 0.1.1

module NLP.Punkt.Match
re_split_impl :: Regex -> Text -> [Either Text Text]
re_split_pos :: Regex -> Text -> [Either (Text, Int) (Text, Int)]
re_split :: Regex -> Text -> [Text]
re_compile :: Text -> Regex
word_seps :: Regex
intrasep :: Regex

module NLP.Punkt

-- | Carries various orthographic statistics for a particular textual type.
data OrthoFreq
OrthoFreq :: Int -> Int -> Int -> Int -> Int -> OrthoFreq

-- | number of lowercase occurrences
freq_lower :: OrthoFreq -> Int

-- | uppercase occurrences
freq_upper :: OrthoFreq -> Int

-- | number of lowercase occurrences in the first position of a sentence
freq_first_lower :: OrthoFreq -> Int

-- | number of uppercase occurrences strictly internal to a sentence
freq_internal_upper :: OrthoFreq -> Int

-- | number of occurences in the first position
freq_after_ender :: OrthoFreq -> Int

-- | Represents training data obtained from a corpus required by Punkt.
data PunktData
PunktData :: HashMap Text Int -> HashMap Text OrthoFreq -> HashMap (Text, Text) Int -> Int -> Int -> PunktData

-- | Occurrences of each textual type, case-insensitive. Used during
--   Punkt's type-based stage. Also contains occurrences of trailing
--   periods.
type_count :: PunktData -> HashMap Text Int

-- | Dictionary of orthographic data for each textual type.
ortho_count :: PunktData -> HashMap Text OrthoFreq
collocations :: PunktData -> HashMap (Text, Text) Int
total_enders :: PunktData -> Int
total_toks :: PunktData -> Int
data Entity a
Word :: a -> Bool -> Entity a
Punct :: a -> Entity a
ParaStart :: Entity a
Ellipsis :: Entity a
Dash :: Entity a
data Token
Token :: Int -> Int -> Entity Text -> Bool -> Bool -> Token
offset :: Token -> Int
toklen :: Token -> Int
entity :: Token -> Entity Text
sentend :: Token -> Bool
abbrev :: Token -> Bool
type Punkt = Reader PunktData
norm :: Text -> Text
is_initial :: Token -> Bool
is_word :: Token -> Bool

-- | Dunning log likelihood modified by Kiss/Strunk
strunk_log :: Double -> Double -> Double -> Double -> Double

-- | Dunning's original log likelihood
dunning_log :: Double -> Double -> Double -> Double -> Double
ask_type_count :: Punkt (HashMap Text Int)
ask_total_toks :: Num a => Punkt a
ask_total_enders :: Num a => Punkt a
ask_ortho :: Text -> Punkt OrthoFreq
ask_colloc :: Text -> Text -> Punkt Double

-- | Occurrences of a textual type, strictly ignoring trailing period.
--   <tt>c(w, ~.)</tt>. Case-insensitive.
freq :: Text -> Punkt Double

-- | Occurrences of a textual type with trailing period. <tt>c(w, .)</tt>.
--   Case-insensitive.
freq_snoc_dot :: Text -> Punkt Double

-- | <tt>c(w) == c(w, .) + c(w, ~.)</tt>. Case-insensitive.
freq_type :: Text -> Punkt Double
dlen :: Text -> Double

-- | Returns the log likelihood that (w_ <tt>snoc</tt> <a>.</a>) is an
--   abbreviation. Case-insensitive.
prob_abbr :: Text -> Punkt Double

-- | Decides if <tt>w</tt> is a sentence ender based on its capitalization.
--   Case-insensitive.
decide_ortho :: Text -> Punkt (Maybe Bool)

-- | Special orthographic heuristic for post-possible-initial tokens.
--   Case-insensitive.
decide_initial_ortho :: Text -> Punkt (Maybe Bool)

-- | Log likelihood that <tt>w</tt> is a frequent sentence starter.
--   Case-insensitive.
prob_starter :: Text -> Punkt Double

-- | Computes the collocational likelihood of <tt>w</tt> and <tt>x</tt>.
--   Case-insensitive.
prob_colloc :: Text -> Text -> Punkt Double

-- | Builds a dictionary of textual type frequencies from a stream of
--   tokens.
build_type_count :: [Token] -> HashMap Text Int
build_ortho_count :: [Token] -> HashMap Text OrthoFreq
build_collocs :: [Token] -> HashMap (Text, Text) Int
to_tokens :: Text -> [Token]
build_punkt_data :: [Token] -> PunktData
classify_by_type :: Token -> Punkt Token
classify_by_next :: Token -> Token -> Punkt Token
classify_punkt :: Text -> [Token]
find_breaks :: Text -> [(Int, Int)]
substring :: Text -> Int -> Int -> Text
match_spaces :: Text -> Maybe (Int, Int)

-- | Main export of the entire package. Splits a corpus into its
--   constituent sentences.
split_sentences :: Text -> [Text]

-- | <tt>runPunkt data computation</tt> runs <tt>computation</tt> using
--   <tt>data</tt> collected from a corpus using <a>build_punkt_data</a>.
runPunkt :: PunktData -> Punkt a -> a
instance Show OrthoFreq
instance Show PunktData
instance Eq a => Eq (Entity a)
instance Show a => Show (Entity a)
instance Show Token
